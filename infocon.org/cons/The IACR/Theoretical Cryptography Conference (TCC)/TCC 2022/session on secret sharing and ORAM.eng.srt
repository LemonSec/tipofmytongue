1
00:00:00,000 --> 00:00:01,860
we'll go immediately into the business

2
00:00:01,860 --> 00:00:03,780
meeting which will be about half an hour

3
00:00:03,780 --> 00:00:08,299
starting at five o'clock in this room

4
00:00:13,980 --> 00:00:16,379
um hi everyone so I'm Shruti I'm going

5
00:00:16,379 --> 00:00:18,000
to be sharing the last session of the

6
00:00:18,000 --> 00:00:21,119
day on secret sharing and Oram uh the

7
00:00:21,119 --> 00:00:22,920
first talk is going to be by divesh

8
00:00:22,920 --> 00:00:25,080
Agarwal on secret sharing Randomness and

9
00:00:25,080 --> 00:00:26,880
random list reductions

10
00:00:26,880 --> 00:00:28,260
thank you

11
00:00:28,260 --> 00:00:32,779
um so this is Joint work with Elton John

12
00:00:36,059 --> 00:00:39,059
um so so uniform Randomness

13
00:00:39,059 --> 00:00:40,860
um is prevalent in many applications in

14
00:00:40,860 --> 00:00:42,480
computer science including randomized

15
00:00:42,480 --> 00:00:44,340
algorithms many crypto constructions

16
00:00:44,340 --> 00:00:47,460
distributed protocols so it's present in

17
00:00:47,460 --> 00:00:49,440
a lot of places but

18
00:00:49,440 --> 00:00:50,940
can we really generate uniform

19
00:00:50,940 --> 00:00:52,079
randomness

20
00:00:52,079 --> 00:00:54,059
so in an Ideal World we would assume

21
00:00:54,059 --> 00:00:55,920
that there is an oracle so our computer

22
00:00:55,920 --> 00:00:57,780
behaves like an oracle that produces a

23
00:00:57,780 --> 00:00:59,699
random bit which is zero or one with

24
00:00:59,699 --> 00:01:01,739
probability half so if you call this

25
00:01:01,739 --> 00:01:04,739
Oracle end times you will get a a bit

26
00:01:04,739 --> 00:01:06,900
string which is uh which takes any fixed

27
00:01:06,900 --> 00:01:08,460
value with probability one over two to

28
00:01:08,460 --> 00:01:09,840
the n

29
00:01:09,840 --> 00:01:12,240
but in reality this is too good to be

30
00:01:12,240 --> 00:01:14,340
true in input in reality when we

31
00:01:14,340 --> 00:01:16,920
generate Randomness we typically the

32
00:01:16,920 --> 00:01:18,840
minimum assumption that we can make is

33
00:01:18,840 --> 00:01:19,799
that

34
00:01:19,799 --> 00:01:22,140
um it is hard to guess this random

35
00:01:22,140 --> 00:01:24,900
variable X so equivalently the

36
00:01:24,900 --> 00:01:26,880
probability that X takes a certain value

37
00:01:26,880 --> 00:01:30,000
X is upper bounded by 1 over 2 to the K

38
00:01:30,000 --> 00:01:31,979
which is equivalent to saying that it

39
00:01:31,979 --> 00:01:34,140
has been entropy at least K so it's K is

40
00:01:34,140 --> 00:01:37,100
some number less than n

41
00:01:39,360 --> 00:01:41,520
um so we ask this question whether we

42
00:01:41,520 --> 00:01:43,320
can use such a source for crypto

43
00:01:43,320 --> 00:01:45,119
applications

44
00:01:45,119 --> 00:01:48,360
uh so this the way to use the simple

45
00:01:48,360 --> 00:01:50,399
idea to use this is if you can extract

46
00:01:50,399 --> 00:01:52,200
uniform Randomness from The Source let's

47
00:01:52,200 --> 00:01:54,000
say there's an algorithm that takes this

48
00:01:54,000 --> 00:01:56,520
Source X as input and outputs a

49
00:01:56,520 --> 00:01:58,680
uniformly random source

50
00:01:58,680 --> 00:02:01,259
unfortunately we know that deterministic

51
00:02:01,259 --> 00:02:03,479
extractor is impossible for these main

52
00:02:03,479 --> 00:02:05,520
entropy sources so there's no extractor

53
00:02:05,520 --> 00:02:07,740
that takes any arbitrary mean entropy

54
00:02:07,740 --> 00:02:09,538
source and outputs the uniformly random

55
00:02:09,538 --> 00:02:11,760
source

56
00:02:11,760 --> 00:02:13,020
um so we ask this question whether we

57
00:02:13,020 --> 00:02:14,819
can still build crypto Primitives from

58
00:02:14,819 --> 00:02:17,700
such main entropy sources and actually

59
00:02:17,700 --> 00:02:19,980
this was answered in the negative

60
00:02:19,980 --> 00:02:22,280
by though this

61
00:02:22,280 --> 00:02:25,739
in 2004 so they showed that a bunch of

62
00:02:25,739 --> 00:02:27,840
these crypto Primitives cannot be built

63
00:02:27,840 --> 00:02:29,760
from Main entropy sources in particular

64
00:02:29,760 --> 00:02:31,140
they showed the impossibility from block

65
00:02:31,140 --> 00:02:33,679
sources

66
00:02:34,200 --> 00:02:37,260
so to summarize so we have um uniform

67
00:02:37,260 --> 00:02:38,819
Source or

68
00:02:38,819 --> 00:02:40,140
um very close to uniform source and

69
00:02:40,140 --> 00:02:40,980
Source from which you can

70
00:02:40,980 --> 00:02:43,200
deterministically extract so from these

71
00:02:43,200 --> 00:02:44,519
sources we can easily build crypto

72
00:02:44,519 --> 00:02:46,379
Primitives because we can just extract

73
00:02:46,379 --> 00:02:48,420
Randomness and then use it to

74
00:02:48,420 --> 00:02:50,580
build these crypto Primitives but from

75
00:02:50,580 --> 00:02:52,860
block sources or main entropy sources in

76
00:02:52,860 --> 00:02:55,140
general we are not able to build many

77
00:02:55,140 --> 00:02:56,700
crypto Primitives

78
00:02:56,700 --> 00:02:58,379
so

79
00:02:58,379 --> 00:03:01,140
um the question what do we want to ask

80
00:03:01,140 --> 00:03:03,360
is what are the crypto Primitives what

81
00:03:03,360 --> 00:03:05,760
crypto Primitives can be built from some

82
00:03:05,760 --> 00:03:07,739
weak source that is not extractable so

83
00:03:07,739 --> 00:03:10,760
is there some Source in the middle here

84
00:03:10,760 --> 00:03:13,440
which is still good for crypto and which

85
00:03:13,440 --> 00:03:16,200
is I mean not extractable

86
00:03:16,200 --> 00:03:17,940
that's the question that we want to try

87
00:03:17,940 --> 00:03:19,140
to understand

88
00:03:19,140 --> 00:03:21,420
whether there are any sources from which

89
00:03:21,420 --> 00:03:22,800
we cannot extract but still they are

90
00:03:22,800 --> 00:03:24,540
good enough for crypto

91
00:03:24,540 --> 00:03:26,940
so in a kind of breakthrough result this

92
00:03:26,940 --> 00:03:29,700
was answered uh for encryption scheme by

93
00:03:29,700 --> 00:03:32,159
Bosley and though this in 2007 what they

94
00:03:32,159 --> 00:03:33,659
showed is that if you start with any

95
00:03:33,659 --> 00:03:35,459
encryption scheme you look at the source

96
00:03:35,459 --> 00:03:36,959
that you need for this encryption scheme

97
00:03:36,959 --> 00:03:39,180
then you can extract from this source

98
00:03:39,180 --> 00:03:41,040
and the idea was simple enough that I

99
00:03:41,040 --> 00:03:44,159
can describe in a single slide so you

100
00:03:44,159 --> 00:03:47,099
take a let's say the K key uh K is a

101
00:03:47,099 --> 00:03:49,560
random variable this is a key sampled uh

102
00:03:49,560 --> 00:03:51,900
from The Source used for this encryption

103
00:03:51,900 --> 00:03:52,920
scheme

104
00:03:52,920 --> 00:03:54,959
so what they do is they extract from the

105
00:03:54,959 --> 00:03:56,879
uni extract uniform Randomness from the

106
00:03:56,879 --> 00:04:00,599
encryption of a fixed message zero

107
00:04:00,599 --> 00:04:03,299
under this key so uh the first

108
00:04:03,299 --> 00:04:05,580
observation towards the proof is that

109
00:04:05,580 --> 00:04:08,340
the encryption of 0 looks uh

110
00:04:08,340 --> 00:04:09,900
statistically close to encryption of

111
00:04:09,900 --> 00:04:12,239
uniform message so this is using the

112
00:04:12,239 --> 00:04:15,500
security of the encryption scheme

113
00:04:15,500 --> 00:04:17,880
and the encryption of a uniform message

114
00:04:17,880 --> 00:04:20,298
can be written as a convex combination

115
00:04:20,298 --> 00:04:24,300
of encryption of a uniform message on

116
00:04:24,300 --> 00:04:27,660
for any fixed key Okay so

117
00:04:27,660 --> 00:04:30,960
to the case this case any fixed T in the

118
00:04:30,960 --> 00:04:32,759
key space so you can write encryption of

119
00:04:32,759 --> 00:04:35,040
K and uniform message as a convex

120
00:04:35,040 --> 00:04:38,699
combination of these and then uh

121
00:04:38,699 --> 00:04:40,560
observe that uh

122
00:04:40,560 --> 00:04:42,900
because we can decrypt correctly so this

123
00:04:42,900 --> 00:04:45,240
encryption of a fixed key and a uniform

124
00:04:45,240 --> 00:04:47,580
message is actually a flat distribution

125
00:04:47,580 --> 00:04:50,940
over 2 to the m ciphertext so this 2 to

126
00:04:50,940 --> 00:04:53,280
the m came out as 2m when I converted to

127
00:04:53,280 --> 00:04:58,500
PDF the thing so but it's uh so it's 2

128
00:04:58,500 --> 00:05:01,259
to the m f at X and this is a flat

129
00:05:01,259 --> 00:05:03,419
distribution which which means that it

130
00:05:03,419 --> 00:05:05,520
is uniform over some set of size 2 to

131
00:05:05,520 --> 00:05:07,080
the m

132
00:05:07,080 --> 00:05:11,160
and then uh it is well known and not to

133
00:05:11,160 --> 00:05:13,800
not too hard to see that extraction is

134
00:05:13,800 --> 00:05:15,660
possible if you have a not too large

135
00:05:15,660 --> 00:05:17,699
number of flat distributions so if you

136
00:05:17,699 --> 00:05:19,500
just go over so the number of flight

137
00:05:19,500 --> 00:05:20,759
distribution that we are looking at is

138
00:05:20,759 --> 00:05:23,039
just the size of the key space so we can

139
00:05:23,039 --> 00:05:25,199
extract from that so that was basically

140
00:05:25,199 --> 00:05:26,940
the main at least one of the main

141
00:05:26,940 --> 00:05:29,780
results in this paper

142
00:05:30,720 --> 00:05:32,460
we look at a related question which is

143
00:05:32,460 --> 00:05:34,680
two out of two secret sharing so here a

144
00:05:34,680 --> 00:05:36,180
message M we want to share it between

145
00:05:36,180 --> 00:05:39,120
two parties uh such that the first party

146
00:05:39,120 --> 00:05:41,100
gets the share L the second party gets

147
00:05:41,100 --> 00:05:43,440
the share R and the property that we

148
00:05:43,440 --> 00:05:45,960
want is that one of L or R does not

149
00:05:45,960 --> 00:05:48,180
reveal any information about M but

150
00:05:48,180 --> 00:05:49,680
together they can reconstruct the

151
00:05:49,680 --> 00:05:51,919
message

152
00:05:53,280 --> 00:05:55,979
um I give a simple observation here that

153
00:05:55,979 --> 00:05:58,139
encryption is actually also a two out of

154
00:05:58,139 --> 00:06:00,360
two secret sharing scheme you can uh

155
00:06:00,360 --> 00:06:02,400
basically take first chair to be just

156
00:06:02,400 --> 00:06:04,199
the key K and the second share to be

157
00:06:04,199 --> 00:06:06,600
encryption of the message with this key

158
00:06:06,600 --> 00:06:09,419
K and it is

159
00:06:09,419 --> 00:06:11,520
not too hard to see actually that uh if

160
00:06:11,520 --> 00:06:12,960
you if you look at just one of them

161
00:06:12,960 --> 00:06:14,520
let's say you are given just the key K

162
00:06:14,520 --> 00:06:16,259
or just the encryption of the message

163
00:06:16,259 --> 00:06:18,600
you will not be able to recover the

164
00:06:18,600 --> 00:06:20,220
message from that but if you are given

165
00:06:20,220 --> 00:06:22,020
both then you can just decrypt

166
00:06:22,020 --> 00:06:24,300
so this is a special case of two or two

167
00:06:24,300 --> 00:06:25,680
secret sharing

168
00:06:25,680 --> 00:06:28,800
uh so the question that we want to ask

169
00:06:28,800 --> 00:06:31,380
is whether 122 secret sharing in general

170
00:06:31,380 --> 00:06:34,580
would imply run imply extraction

171
00:06:34,580 --> 00:06:36,660
and this was actually a question that

172
00:06:36,660 --> 00:06:38,460
was asked as the main open question in

173
00:06:38,460 --> 00:06:40,560
this paper by Bosley and though this

174
00:06:40,560 --> 00:06:42,539
and I started looking at this question

175
00:06:42,539 --> 00:06:45,720
in 2012 and I thought like back then how

176
00:06:45,720 --> 00:06:47,220
hard can this question be it's a small

177
00:06:47,220 --> 00:06:49,860
generalization of this this encryption

178
00:06:49,860 --> 00:06:52,259
scheme so it should be quite easy

179
00:06:52,259 --> 00:06:54,539
but after 10 years I think it's it's

180
00:06:54,539 --> 00:06:55,979
quite a hard question I'm not going to

181
00:06:55,979 --> 00:06:57,680
be solving it today

182
00:06:57,680 --> 00:07:00,180
uh I'm going to show something weaker

183
00:07:00,180 --> 00:07:03,020
than this

184
00:07:03,060 --> 00:07:05,039
uh so let me try to explain the

185
00:07:05,039 --> 00:07:06,780
difficulty although I'll not do justice

186
00:07:06,780 --> 00:07:09,419
to the 10 years so suppose we use the

187
00:07:09,419 --> 00:07:12,000
same idea as encryption

188
00:07:12,000 --> 00:07:12,780
um

189
00:07:12,780 --> 00:07:14,460
we try to extract from one of the shares

190
00:07:14,460 --> 00:07:16,020
let's see the left chair right so we

191
00:07:16,020 --> 00:07:18,479
take the take a fixed message 0 and you

192
00:07:18,479 --> 00:07:19,800
uh

193
00:07:19,800 --> 00:07:22,560
and look at the left chair k0

194
00:07:22,560 --> 00:07:24,720
then what you can do is something very

195
00:07:24,720 --> 00:07:25,919
similar you can say that this is

196
00:07:25,919 --> 00:07:27,300
statistically indistinguishable from

197
00:07:27,300 --> 00:07:28,979
left share of K with the uniform message

198
00:07:28,979 --> 00:07:32,460
because uh because essentially as we

199
00:07:32,460 --> 00:07:33,900
just said that from one of the shares

200
00:07:33,900 --> 00:07:35,400
you should not reveal anything about the

201
00:07:35,400 --> 00:07:36,240
message

202
00:07:36,240 --> 00:07:38,520
so that skill works and you can also

203
00:07:38,520 --> 00:07:39,720
write this as a convex combination of

204
00:07:39,720 --> 00:07:42,240
left chair with fixed TK and a uniform

205
00:07:42,240 --> 00:07:44,400
message where K goes over all the all

206
00:07:44,400 --> 00:07:46,380
the key space

207
00:07:46,380 --> 00:07:48,840
but unfortunately from a single chair

208
00:07:48,840 --> 00:07:51,360
this this might not have any entropy so

209
00:07:51,360 --> 00:07:52,979
we might not be able to I mean get

210
00:07:52,979 --> 00:07:54,720
anything out of this I mean although you

211
00:07:54,720 --> 00:07:55,860
can write it as a Converse combination

212
00:07:55,860 --> 00:07:58,680
of these from single one of them this

213
00:07:58,680 --> 00:08:01,460
might not give you anything

214
00:08:01,800 --> 00:08:04,139
so I mean if you want to kind of think

215
00:08:04,139 --> 00:08:05,759
of this example I mean that I just

216
00:08:05,759 --> 00:08:07,139
mentioned that encryption scheme is a

217
00:08:07,139 --> 00:08:08,940
two out of two secret sharing scheme if

218
00:08:08,940 --> 00:08:10,800
you look at one of the shares let's say

219
00:08:10,800 --> 00:08:13,020
just the key K that would not I mean um

220
00:08:13,020 --> 00:08:14,940
you would not have any entropy if you

221
00:08:14,940 --> 00:08:17,660
fix the PK

222
00:08:17,759 --> 00:08:19,740
so we consider this question

223
00:08:19,740 --> 00:08:22,560
leakage resilient secret sharing

224
00:08:22,560 --> 00:08:24,660
so what I what I mean when I say liquid

225
00:08:24,660 --> 00:08:26,699
resilient secret sharing so you

226
00:08:26,699 --> 00:08:29,280
so you are given the same secret sharing

227
00:08:29,280 --> 00:08:30,599
scheme like with two shared left left

228
00:08:30,599 --> 00:08:33,120
share in the right chair and you are

229
00:08:33,120 --> 00:08:35,399
allowed to leak one bit from the left

230
00:08:35,399 --> 00:08:36,958
chair and one bit from the right shift

231
00:08:36,958 --> 00:08:38,339
and then you want the same security

232
00:08:38,339 --> 00:08:41,180
guarantee still

233
00:08:42,479 --> 00:08:44,700
so what we show is that leakage

234
00:08:44,700 --> 00:08:46,020
resilient secret sharing actually

235
00:08:46,020 --> 00:08:48,540
implies extraction and here's a rough

236
00:08:48,540 --> 00:08:49,920
sketch of the proof

237
00:08:49,920 --> 00:08:53,160
by the xor Lemma we can assume that f

238
00:08:53,160 --> 00:08:55,680
and g actually not one bit but T bits

239
00:08:55,680 --> 00:08:57,839
the error blows up by a factor 2 to the

240
00:08:57,839 --> 00:08:58,980
T

241
00:08:58,980 --> 00:09:01,200
and then we're going to extract uniform

242
00:09:01,200 --> 00:09:03,839
Randomness from F of K and a fixed

243
00:09:03,839 --> 00:09:06,000
message 0 and G of K and a fixed message

244
00:09:06,000 --> 00:09:07,200
0

245
00:09:07,200 --> 00:09:10,860
and notice that uh since we said that we

246
00:09:10,860 --> 00:09:12,779
should not lose much by by basically

247
00:09:12,779 --> 00:09:14,459
giving this information so this looks

248
00:09:14,459 --> 00:09:16,980
statistically close to F of K and a

249
00:09:16,980 --> 00:09:18,779
uniform message in G of K and a uniform

250
00:09:18,779 --> 00:09:20,640
message

251
00:09:20,640 --> 00:09:22,560
and again we write this as a convex

252
00:09:22,560 --> 00:09:26,279
combination of uh F of k u g of K U

253
00:09:26,279 --> 00:09:27,660
where K is now

254
00:09:27,660 --> 00:09:30,779
uh this any fixed key in the key space

255
00:09:30,779 --> 00:09:33,300
just like earlier so now the crucial

256
00:09:33,300 --> 00:09:35,399
observation is that this f and g can be

257
00:09:35,399 --> 00:09:37,260
arbitrary we said that this works for

258
00:09:37,260 --> 00:09:40,440
any arbitrary leakage function so we can

259
00:09:40,440 --> 00:09:42,839
choose f and g in such a way that F of K

260
00:09:42,839 --> 00:09:45,660
U and G of K U have high Min entropy and

261
00:09:45,660 --> 00:09:47,339
this is kind of the main non-trivial

262
00:09:47,339 --> 00:09:49,380
step in this proof that I don't mention

263
00:09:49,380 --> 00:09:50,519
here

264
00:09:50,519 --> 00:09:53,760
so final observation is that extraction

265
00:09:53,760 --> 00:09:56,399
is possible not just from of La not from

266
00:09:56,399 --> 00:09:58,140
a small number of flat sources but also

267
00:09:58,140 --> 00:09:59,580
from a small number of main entropy

268
00:09:59,580 --> 00:10:01,680
distribution so we use that to conclude

269
00:10:01,680 --> 00:10:04,500
the proof of this

270
00:10:04,500 --> 00:10:08,399
uh so one primitive that has been very

271
00:10:08,399 --> 00:10:09,899
well studied in the recent years is

272
00:10:09,899 --> 00:10:11,519
non-allible codes in the split State

273
00:10:11,519 --> 00:10:15,720
model so actually that is uh uh that is

274
00:10:15,720 --> 00:10:17,580
also a non-mallieable code in a split

275
00:10:17,580 --> 00:10:19,380
State model is also a leakage resilient

276
00:10:19,380 --> 00:10:21,480
secret leakage resilient two out of two

277
00:10:21,480 --> 00:10:23,760
secret sharing scheme and which means

278
00:10:23,760 --> 00:10:26,640
that um you cannot have non-allible

279
00:10:26,640 --> 00:10:27,720
codes in the split straight model

280
00:10:27,720 --> 00:10:30,000
without extractable sources so you need

281
00:10:30,000 --> 00:10:32,399
extractable sources to be able to build

282
00:10:32,399 --> 00:10:34,740
these non-viable goods and maybe it's

283
00:10:34,740 --> 00:10:36,720
it's kind of interesting to contrast

284
00:10:36,720 --> 00:10:39,120
this with the AMD codes which can be

285
00:10:39,120 --> 00:10:41,160
constructed from an intro entropy source

286
00:10:41,160 --> 00:10:42,779
so these are these tamper detection

287
00:10:42,779 --> 00:10:45,660
codes for a certain kind of tampering so

288
00:10:45,660 --> 00:10:47,760
you can actually construct those from

289
00:10:47,760 --> 00:10:50,160
an entropy source

290
00:10:50,160 --> 00:10:53,519
okay so just to vent out our frustration

291
00:10:53,519 --> 00:10:55,740
we introduced this new notion random

292
00:10:55,740 --> 00:10:57,839
list reductions which basically so since

293
00:10:57,839 --> 00:10:59,160
we were not able to resolve the main

294
00:10:59,160 --> 00:11:01,380
open question we said okay what let's

295
00:11:01,380 --> 00:11:04,079
study what all we cannot resolve so we

296
00:11:04,079 --> 00:11:06,180
uh so this is Randomness reduction is

297
00:11:06,180 --> 00:11:08,100
basically you'd want to reduce a

298
00:11:08,100 --> 00:11:10,380
primitive a to A Primitive B without

299
00:11:10,380 --> 00:11:12,180
additional Randomness so basically you

300
00:11:12,180 --> 00:11:13,920
are given a construction of a you want

301
00:11:13,920 --> 00:11:15,540
to give construction for B without

302
00:11:15,540 --> 00:11:17,700
introducing any more randomness

303
00:11:17,700 --> 00:11:20,940
so this would immediately imply that if

304
00:11:20,940 --> 00:11:23,720
you have a construction

305
00:11:23,720 --> 00:11:26,880
for a that does not require extractable

306
00:11:26,880 --> 00:11:28,320
Randomness then you have a construction

307
00:11:28,320 --> 00:11:29,940
immediately for B that does not require

308
00:11:29,940 --> 00:11:31,800
extractable randomness

309
00:11:31,800 --> 00:11:35,279
so the example of such a reduction we

310
00:11:35,279 --> 00:11:37,380
already saw this encryption reduces to

311
00:11:37,380 --> 00:11:40,079
two out of two secret sharing

312
00:11:40,079 --> 00:11:43,920
so we studied for what n t n Prime and T

313
00:11:43,920 --> 00:11:46,680
Prime can basically NP secret sharing so

314
00:11:46,680 --> 00:11:48,899
TR defense secret sharing okay reduce

315
00:11:48,899 --> 00:11:50,640
can be converted to T Prime out of n

316
00:11:50,640 --> 00:11:52,440
Prime secret sharing without any

317
00:11:52,440 --> 00:11:54,360
additional randomness

318
00:11:54,360 --> 00:11:56,760
so we show many different reductions for

319
00:11:56,760 --> 00:11:59,040
different choices of n e and Prime and T

320
00:11:59,040 --> 00:11:59,820
Prime

321
00:11:59,820 --> 00:12:01,980
so here's a simple example let's say n

322
00:12:01,980 --> 00:12:04,380
Prime and T Prime is 2 then we can get a

323
00:12:04,380 --> 00:12:06,420
simple reduction by just giving the for

324
00:12:06,420 --> 00:12:09,200
giving any T minus 1 shares to one party

325
00:12:09,200 --> 00:12:12,120
and any other any one other share to the

326
00:12:12,120 --> 00:12:14,399
second party

327
00:12:14,399 --> 00:12:16,200
and that that is a valid two out of two

328
00:12:16,200 --> 00:12:17,820
secret sharing scheme without any

329
00:12:17,820 --> 00:12:19,200
additional randomness

330
00:12:19,200 --> 00:12:21,060
so it motivates what are called

331
00:12:21,060 --> 00:12:22,680
distribution designs they have been

332
00:12:22,680 --> 00:12:24,420
studied in the literature actually so

333
00:12:24,420 --> 00:12:26,459
where you want to distribute n shares

334
00:12:26,459 --> 00:12:29,820
into n Prime sets such that any t t sets

335
00:12:29,820 --> 00:12:32,100
contain T Prime shares and less than T

336
00:12:32,100 --> 00:12:34,620
sets contain less than T Prime shares so

337
00:12:34,620 --> 00:12:37,980
it's a nice combinatorial structure and

338
00:12:37,980 --> 00:12:40,800
we find distribution designs for several

339
00:12:40,800 --> 00:12:43,139
different choices of NT and Prime and T

340
00:12:43,139 --> 00:12:46,200
Prime uh in some cases these designs are

341
00:12:46,200 --> 00:12:48,060
actually tight and cannot be improved so

342
00:12:48,060 --> 00:12:49,740
we have several different constructions

343
00:12:49,740 --> 00:12:52,260
in the paper different sex reductions in

344
00:12:52,260 --> 00:12:53,820
the paper

345
00:12:53,820 --> 00:12:55,260
so

346
00:12:55,260 --> 00:12:57,720
this basically implies that

347
00:12:57,720 --> 00:12:59,940
um if two out of two secret sharing

348
00:12:59,940 --> 00:13:03,540
implies extraction then I mean because

349
00:13:03,540 --> 00:13:04,920
of the reduction that I just mentioned

350
00:13:04,920 --> 00:13:07,500
then T out of n secret threshold secret

351
00:13:07,500 --> 00:13:09,839
sharing implies extraction for any t and

352
00:13:09,839 --> 00:13:10,620
n

353
00:13:10,620 --> 00:13:12,839
so extracting from two out of two secret

354
00:13:12,839 --> 00:13:16,079
sharing might be harder and so maybe

355
00:13:16,079 --> 00:13:18,180
maybe most of our effort went into that

356
00:13:18,180 --> 00:13:19,139
so maybe

357
00:13:19,139 --> 00:13:21,899
uh hopefully it motivates

358
00:13:21,899 --> 00:13:24,540
our main open question whether we can

359
00:13:24,540 --> 00:13:27,120
extract uh Randomness from a t out of n

360
00:13:27,120 --> 00:13:29,160
secret sharing scheme maybe that is

361
00:13:29,160 --> 00:13:31,680
slightly easier than

362
00:13:31,680 --> 00:13:33,060
extracting from a two out of two secret

363
00:13:33,060 --> 00:13:34,440
sharing scheme

364
00:13:34,440 --> 00:13:35,820
so it's a very fundamental question

365
00:13:35,820 --> 00:13:38,459
which hopefully this work would motivate

366
00:13:38,459 --> 00:13:42,779
kind of trying to understand this better

367
00:13:42,779 --> 00:13:44,700
thank you

368
00:13:44,700 --> 00:13:46,760
um

369
00:13:50,279 --> 00:13:53,180
questions

370
00:14:00,060 --> 00:14:02,899
is there any hope in non-random

371
00:14:02,899 --> 00:14:05,399
randomized reductions but like they use

372
00:14:05,399 --> 00:14:08,180
bad randomness

373
00:14:08,959 --> 00:14:11,519
because you you focused on random list

374
00:14:11,519 --> 00:14:13,139
reduction I mean I know so little about

375
00:14:13,139 --> 00:14:16,019
this problem in this I mean what can be

376
00:14:16,019 --> 00:14:18,360
done that I I have a hard time kind of

377
00:14:18,360 --> 00:14:20,339
saying that something can be said there

378
00:14:20,339 --> 00:14:23,519
but I mean so the simplest we thought of

379
00:14:23,519 --> 00:14:25,620
basically without using any additional

380
00:14:25,620 --> 00:14:27,240
Randomness because then you immediately

381
00:14:27,240 --> 00:14:30,300
get yes an implication we didn't even go

382
00:14:30,300 --> 00:14:32,579
there out of trying with some small

383
00:14:32,579 --> 00:14:34,920
Randomness because because we understand

384
00:14:34,920 --> 00:14:37,200
so little about kind of what is going on

385
00:14:37,200 --> 00:14:39,240
about how to extract that we could not

386
00:14:39,240 --> 00:14:40,980
we did not want to complicate it for

387
00:14:40,980 --> 00:14:42,060
that

388
00:14:42,060 --> 00:14:44,040
experiences a lot of sources really

389
00:14:44,040 --> 00:14:46,380
can't even Define as part of it is going

390
00:14:46,380 --> 00:14:50,360
to be used for the Primitive products

391
00:14:52,770 --> 00:14:56,100
[Laughter]

392
00:14:56,100 --> 00:14:58,740
okay uh given the time uh we could take

393
00:14:58,740 --> 00:15:00,300
more questions offline with the wish

394
00:15:00,300 --> 00:15:02,279
thank you let's thank the speaker once

395
00:15:02,279 --> 00:15:04,399
again

396
00:15:07,680 --> 00:15:10,079
so the next talk is on uh leakage

397
00:15:10,079 --> 00:15:12,120
resilient linear secret sharing against

398
00:15:12,120 --> 00:15:16,019
uh arbitrary bounded size leakage family

399
00:15:16,019 --> 00:15:18,839
um The Talk would be given by high uh

400
00:15:18,839 --> 00:15:21,620
new in

401
00:15:39,839 --> 00:15:42,600
or don't request this last button okay

402
00:15:42,600 --> 00:15:45,740
so this step okay

403
00:15:47,279 --> 00:15:49,740
okay so thank you for the introductions

404
00:15:49,740 --> 00:15:51,360
um this year so I work with magic and

405
00:15:51,360 --> 00:15:54,360
I'm Tom pinkwang sheu and Androids so

406
00:15:54,360 --> 00:15:56,160
let me start with the notion of secret

407
00:15:56,160 --> 00:15:58,199
sharing in particular the threshold

408
00:15:58,199 --> 00:16:01,800
scheme so it is a way to share a secret

409
00:16:01,800 --> 00:16:04,800
into secret chest satisfying two

410
00:16:04,800 --> 00:16:07,500
conditions coinless and privacy

411
00:16:07,500 --> 00:16:10,380
so the correct the clinic conditions say

412
00:16:10,380 --> 00:16:12,540
that any cliches can reconstruct the

413
00:16:12,540 --> 00:16:14,579
secrets where K is a reconstructing

414
00:16:14,579 --> 00:16:15,839
threshold

415
00:16:15,839 --> 00:16:18,720
and the Privacy ensures us

416
00:16:18,720 --> 00:16:20,100
any

417
00:16:20,100 --> 00:16:23,040
um Western cliche and not reviewing in

418
00:16:23,040 --> 00:16:25,139
any information about the secrets and in

419
00:16:25,139 --> 00:16:27,360
other words if we look at any dishes

420
00:16:27,360 --> 00:16:30,300
about Secrets it is indeed individual

421
00:16:30,300 --> 00:16:33,660
From Any teacher of another secrets

422
00:16:33,660 --> 00:16:37,259
so however secret says vulnerable to

423
00:16:37,259 --> 00:16:39,480
liquid attacks so we ask the question

424
00:16:39,480 --> 00:16:42,000
what if anniversary obtains some muscle

425
00:16:42,000 --> 00:16:46,380
information from every single success

426
00:16:46,380 --> 00:16:48,779
so here is a visualize of the questions

427
00:16:48,779 --> 00:16:51,600
okay so in the local leakage model

428
00:16:51,600 --> 00:16:53,519
third personally can get possible

429
00:16:53,519 --> 00:16:56,160
information for every circuits

430
00:16:56,160 --> 00:16:57,779
so

431
00:16:57,779 --> 00:16:59,519
The Secret Sales scheme a liquid

432
00:16:59,519 --> 00:17:01,259
residence if the two liquid

433
00:17:01,259 --> 00:17:04,079
distributions as statistically closed

434
00:17:04,079 --> 00:17:05,819
okay so here we are in information

435
00:17:05,819 --> 00:17:07,980
theoretic setting I personally have

436
00:17:07,980 --> 00:17:11,720
another computational Power

437
00:17:11,819 --> 00:17:14,040
so since the introductions there have

438
00:17:14,040 --> 00:17:16,199
been a lot of work on this topic and

439
00:17:16,199 --> 00:17:18,000
there are two main research predictions

440
00:17:18,000 --> 00:17:20,280
okay so each of them have some

441
00:17:20,280 --> 00:17:22,740
advantages and disadvantages

442
00:17:22,740 --> 00:17:26,280
so our belong to the second line of my

443
00:17:26,280 --> 00:17:28,679
research and we study the liquid

444
00:17:28,679 --> 00:17:31,440
resilience of prominent schemes

445
00:17:31,440 --> 00:17:33,780
so in this work uh

446
00:17:33,780 --> 00:17:37,500
we consider two secretary schemes Massey

447
00:17:37,500 --> 00:17:40,140
and shambia this cream are widely used

448
00:17:40,140 --> 00:17:42,240
in applications so let me briefly

449
00:17:42,240 --> 00:17:45,059
introduce to a schemes

450
00:17:45,059 --> 00:17:47,580
so the massive screams corresponding to

451
00:17:47,580 --> 00:17:50,280
a linear course CC

452
00:17:50,280 --> 00:17:53,100
and to share a secret

453
00:17:53,100 --> 00:17:55,380
example a random codeword from the

454
00:17:55,380 --> 00:17:58,440
linear acoustic condition on the first

455
00:17:58,440 --> 00:18:00,660
cone because the first coordinate being

456
00:18:00,660 --> 00:18:03,900
the secrets and all other coordinates as

457
00:18:03,900 --> 00:18:06,679
the secret says

458
00:18:08,360 --> 00:18:13,520
in which some linear codes

459
00:18:13,760 --> 00:18:16,380
and an important property of Xavier

460
00:18:16,380 --> 00:18:19,200
scheme is that a secret says uh

461
00:18:19,200 --> 00:18:21,600
polynomial evaluations add distinct

462
00:18:21,600 --> 00:18:24,059
evaluation places

463
00:18:24,059 --> 00:18:27,240
and effects in this work we consider the

464
00:18:27,240 --> 00:18:29,820
multicolor constructions of these

465
00:18:29,820 --> 00:18:32,640
screams so the first game in Massey

466
00:18:32,640 --> 00:18:35,340
corresponding to a random linear code so

467
00:18:35,340 --> 00:18:38,220
what it means is that the general Matrix

468
00:18:38,220 --> 00:18:41,039
of the quality is sample uniformly at

469
00:18:41,039 --> 00:18:42,780
random

470
00:18:42,780 --> 00:18:45,419
and for service scheme

471
00:18:45,419 --> 00:18:47,820
we consider it with random Evolution

472
00:18:47,820 --> 00:18:50,299
places

473
00:18:50,760 --> 00:18:51,900
so

474
00:18:51,900 --> 00:18:54,179
um here is a leakage model

475
00:18:54,179 --> 00:18:56,820
and this is a more General granted Loop

476
00:18:56,820 --> 00:18:58,740
or leakage what do I have showed you

477
00:18:58,740 --> 00:19:00,419
before

478
00:19:00,419 --> 00:19:03,120
and so liquid function can lick Global

479
00:19:03,120 --> 00:19:05,340
Information from all the secret shares

480
00:19:05,340 --> 00:19:07,860
for example it can lick the list

481
00:19:07,860 --> 00:19:12,059
Philippine bits of the sum of other sets

482
00:19:12,059 --> 00:19:16,020
so in this model it is if the two make

483
00:19:16,020 --> 00:19:17,820
contributions

484
00:19:17,820 --> 00:19:20,460
um indistinguishable okay and then we

485
00:19:20,460 --> 00:19:24,260
measure this in statistical distance

486
00:19:24,919 --> 00:19:27,539
is we say that a secret sharing scheme

487
00:19:27,539 --> 00:19:29,640
is a liquid resilience again a family

488
00:19:29,640 --> 00:19:33,059
application if it is liquid resilience

489
00:19:33,059 --> 00:19:37,580
for every liquid function in that family

490
00:19:37,860 --> 00:19:40,860
so with this right now in mind let me

491
00:19:40,860 --> 00:19:42,720
Briefly summarize the prior work and our

492
00:19:42,720 --> 00:19:45,000
contributions

493
00:19:45,000 --> 00:19:48,120
so here I will have n practice and the

494
00:19:48,120 --> 00:19:50,400
Reconstruction Festival

495
00:19:50,400 --> 00:19:52,320
and I want to emphasize that some

496
00:19:52,320 --> 00:19:54,780
smaller value of 30 questions so that's

497
00:19:54,780 --> 00:19:56,580
better so we want to put the liquid

498
00:19:56,580 --> 00:20:00,120
precedence across more reconstruction

499
00:20:00,120 --> 00:20:04,100
so in pdr18

500
00:20:10,039 --> 00:20:13,020
the number of parties and this is again

501
00:20:13,020 --> 00:20:15,380
arbitrary local leakage model

502
00:20:15,380 --> 00:20:18,720
and reconstructions is the deterministic

503
00:20:18,720 --> 00:20:21,000
constructions so it goes for any fixed

504
00:20:21,000 --> 00:20:23,940
Evolution places

505
00:20:23,940 --> 00:20:27,120
and three years later uh mbsw showed

506
00:20:27,120 --> 00:20:28,440
that

507
00:20:28,440 --> 00:20:30,660
if k e at least half the number of

508
00:20:30,660 --> 00:20:33,299
parties is surprises against the same

509
00:20:33,299 --> 00:20:35,880
linkage family but this is a multicolor

510
00:20:35,880 --> 00:20:38,520
constructures and they should put the

511
00:20:38,520 --> 00:20:40,320
message corresponding to a random linear

512
00:20:40,320 --> 00:20:41,280
course

513
00:20:41,280 --> 00:20:44,360
um is liquid resilience

514
00:20:44,700 --> 00:20:48,360
and in another work by MN PSW they show

515
00:20:48,360 --> 00:20:50,880
that some schemes is liquid resilience

516
00:20:50,880 --> 00:20:53,160
as known as the Reconstruction threshold

517
00:20:53,160 --> 00:20:54,720
in at least two

518
00:20:54,720 --> 00:20:57,480
and it it worked for like almost all the

519
00:20:57,480 --> 00:20:59,580
Reconstruction threshold and here they

520
00:20:59,580 --> 00:21:02,100
consider a smaller leakage family for

521
00:21:02,100 --> 00:21:04,860
physical bits so in this model every

522
00:21:04,860 --> 00:21:05,880
share

523
00:21:05,880 --> 00:21:07,799
has Lambda bits in the binary

524
00:21:07,799 --> 00:21:09,360
representations

525
00:21:09,360 --> 00:21:11,460
and solidity function release some

526
00:21:11,460 --> 00:21:14,880
information about those physical bits

527
00:21:14,880 --> 00:21:18,000
and again this is a multicolor

528
00:21:18,000 --> 00:21:20,400
constructions

529
00:21:20,400 --> 00:21:23,700
and recently mnpw input the result by

530
00:21:23,700 --> 00:21:25,679
video AR

531
00:21:25,679 --> 00:21:29,760
from them by 85 2.78

532
00:21:29,760 --> 00:21:31,559
and if this works we make two

533
00:21:31,559 --> 00:21:33,840
contributions one for mercy and one for

534
00:21:33,840 --> 00:21:35,100
Champion

535
00:21:35,100 --> 00:21:37,919
and we consider the linkage family is an

536
00:21:37,919 --> 00:21:40,020
habitually bubble style joint leakage

537
00:21:40,020 --> 00:21:42,299
and for the first result we showed that

538
00:21:42,299 --> 00:21:45,299
Mercy is liquid resilience if the

539
00:21:45,299 --> 00:21:48,780
Reconstruction has at least four

540
00:21:48,780 --> 00:21:51,480
and from a Chinese scheme we showed up

541
00:21:51,480 --> 00:21:55,320
it is wicked resilience if uh Kai at

542
00:21:55,320 --> 00:21:58,260
least half the number of Puppets

543
00:21:58,260 --> 00:22:00,659
and here I will note that important

544
00:22:00,659 --> 00:22:01,860
constructions are not the color

545
00:22:01,860 --> 00:22:04,020
constructions so we use some random list

546
00:22:04,020 --> 00:22:06,980
in the constructions

547
00:22:07,380 --> 00:22:08,760
so let me

548
00:22:08,760 --> 00:22:09,299
um

549
00:22:09,299 --> 00:22:11,700
State hours results more formally

550
00:22:11,700 --> 00:22:14,400
so in this book we consider

551
00:22:14,400 --> 00:22:15,059
um

552
00:22:15,059 --> 00:22:17,760
SQL set screen in which every secret

553
00:22:17,760 --> 00:22:20,580
says the element of a field where the

554
00:22:20,580 --> 00:22:22,080
science appear in rapidly choosed by

555
00:22:22,080 --> 00:22:24,000
Lambda and Lambda is a security

556
00:22:24,000 --> 00:22:26,159
parameter

557
00:22:26,159 --> 00:22:28,620
and first we saw that massive schemes

558
00:22:28,620 --> 00:22:31,860
corresponding to a random Matrix or

559
00:22:31,860 --> 00:22:33,900
random generated Matrix a liquid

560
00:22:33,900 --> 00:22:36,659
resilience with very high probability

561
00:22:36,659 --> 00:22:40,740
okay and the sigh of religious family

562
00:22:40,740 --> 00:22:43,260
is this much okay so it depends only on

563
00:22:43,260 --> 00:22:44,220
play

564
00:22:44,220 --> 00:22:49,039
and the range of the liquid functions

565
00:22:49,159 --> 00:22:52,020
so here here's some note we require only

566
00:22:52,020 --> 00:22:56,159
three at least four and uh our results

567
00:22:56,159 --> 00:22:58,980
by buses some barrier due to existing

568
00:22:58,980 --> 00:23:00,539
poor approach

569
00:23:00,539 --> 00:23:02,340
so in

570
00:23:02,340 --> 00:23:05,220
a paper by Imagine at all they showed us

571
00:23:05,220 --> 00:23:08,460
if we use a fuller approach the best one

572
00:23:08,460 --> 00:23:11,700
can go for is a career at least and by

573
00:23:11,700 --> 00:23:12,539
two

574
00:23:12,539 --> 00:23:15,120
but here we can show that for some very

575
00:23:15,120 --> 00:23:16,559
small constants

576
00:23:16,559 --> 00:23:18,720
and these results enables secure

577
00:23:18,720 --> 00:23:21,059
computation of secrets so what I mean is

578
00:23:21,059 --> 00:23:24,299
that this um schemes have some

579
00:23:24,299 --> 00:23:27,659
multiplication friendly property so this

580
00:23:27,659 --> 00:23:30,000
is very useful in application in

581
00:23:30,000 --> 00:23:32,340
particular for secure computations

582
00:23:32,340 --> 00:23:35,159
and this you know these results usually

583
00:23:35,159 --> 00:23:37,500
optimal in terms of the size of the

584
00:23:37,500 --> 00:23:39,000
leakage family

585
00:23:39,000 --> 00:23:42,240
so in fact like this I

586
00:23:42,240 --> 00:23:44,700
linkage family upside slightly bigger

587
00:23:44,700 --> 00:23:48,179
than the bar we have here so that any

588
00:23:48,179 --> 00:23:49,039
messages

589
00:23:49,039 --> 00:23:52,940
in not ticket residence

590
00:23:53,159 --> 00:23:55,440
and we also throw similar results for

591
00:23:55,440 --> 00:23:56,700
shamia

592
00:23:56,700 --> 00:23:59,400
here's the difference that we could the

593
00:23:59,400 --> 00:24:01,020
side of the leakage family a difference

594
00:24:01,020 --> 00:24:04,020
now it depends on the vehicle circumc

595
00:24:04,020 --> 00:24:07,140
vessel and also the number party

596
00:24:07,140 --> 00:24:09,919
and it is a Randomness over the

597
00:24:09,919 --> 00:24:13,520
evolution basics

598
00:24:13,919 --> 00:24:17,520
so our results worked when uh at least n

599
00:24:17,520 --> 00:24:21,000
by two and this is the optimal due to

600
00:24:21,000 --> 00:24:24,620
the barrier I mentioned earlier

601
00:24:25,140 --> 00:24:28,200
so for the last few minutes let me give

602
00:24:28,200 --> 00:24:30,000
you some high level overview of our

603
00:24:30,000 --> 00:24:32,220
technical ideas so first we look at the

604
00:24:32,220 --> 00:24:33,299
massive screen

605
00:24:33,299 --> 00:24:35,460
so our objective to show that the

606
00:24:35,460 --> 00:24:37,440
massive streams corresponding to a

607
00:24:37,440 --> 00:24:39,900
random generator Matrix is liquid

608
00:24:39,900 --> 00:24:42,840
resilience with very high probability

609
00:24:42,840 --> 00:24:46,140
so we use a combinator two arguments and

610
00:24:46,140 --> 00:24:48,900
the second movement technique

611
00:24:48,900 --> 00:24:52,039
so after a few reduction steps to bounce

612
00:24:52,039 --> 00:24:54,659
to bounce the distinguishing about this

613
00:24:54,659 --> 00:24:58,140
it suffices to put a suitable random

614
00:24:58,140 --> 00:25:00,419
variable in this one

615
00:25:00,419 --> 00:25:02,580
we want to show that it is small with

616
00:25:02,580 --> 00:25:04,860
high quality if we can solve this we are

617
00:25:04,860 --> 00:25:09,139
done I'm not going over the details here

618
00:25:09,419 --> 00:25:12,299
and about this um we use the second

619
00:25:12,299 --> 00:25:13,620
movement techniques

620
00:25:13,620 --> 00:25:15,780
and we prove that it is small with high

621
00:25:15,780 --> 00:25:18,299
quality by showing that in fact the

622
00:25:18,299 --> 00:25:20,460
expectations of the square the

623
00:25:20,460 --> 00:25:21,900
expectation of the second movement

624
00:25:21,900 --> 00:25:24,779
technique is small and I want to note

625
00:25:24,779 --> 00:25:26,100
here that

626
00:25:26,100 --> 00:25:29,220
um we put this using the fact that the

627
00:25:29,220 --> 00:25:31,799
generator Matrix is fully random it is

628
00:25:31,799 --> 00:25:35,120
very important in our proof

629
00:25:35,220 --> 00:25:37,740
and from some scheme

630
00:25:37,740 --> 00:25:38,279
um

631
00:25:38,279 --> 00:25:40,559
one can see that maybe the same idea

632
00:25:40,559 --> 00:25:41,940
works

633
00:25:41,940 --> 00:25:43,500
but in fact

634
00:25:43,500 --> 00:25:46,260
um it seemed to fail why because here

635
00:25:46,260 --> 00:25:48,480
when we consider shamia with random

636
00:25:48,480 --> 00:25:51,179
evaluation places some general Matrix

637
00:25:51,179 --> 00:25:55,260
has much random mix so uh we couldn't

638
00:25:55,260 --> 00:25:57,659
make the proof go through but we

639
00:25:57,659 --> 00:26:00,179
observed that if we use existing Fourier

640
00:26:00,179 --> 00:26:04,260
approach in MMP SW 21

641
00:26:04,260 --> 00:26:06,299
and with the new idea of clouding the

642
00:26:06,299 --> 00:26:08,940
second moment techniques we can complete

643
00:26:08,940 --> 00:26:10,440
the proof and showing that calculators

644
00:26:10,440 --> 00:26:14,520
and N by two works

645
00:26:14,700 --> 00:26:17,880
so to conclude the same table I have

646
00:26:17,880 --> 00:26:19,860
showed you before

647
00:26:19,860 --> 00:26:21,659
and from this we can see a lot of open

648
00:26:21,659 --> 00:26:24,360
question yes for example uh can we

649
00:26:24,360 --> 00:26:26,580
de-randomize all the multicolor

650
00:26:26,580 --> 00:26:28,260
constructions

651
00:26:28,260 --> 00:26:31,260
and another interesting open question is

652
00:26:31,260 --> 00:26:33,659
that can we practice a half barrier

653
00:26:33,659 --> 00:26:36,059
threshold for shamia with fixed

654
00:26:36,059 --> 00:26:37,679
Evolution places

655
00:26:37,679 --> 00:26:39,299
okay

656
00:26:39,299 --> 00:26:40,740
um that's all I have uh thank you for

657
00:26:40,740 --> 00:26:42,419
your questions I'm happy to take your

658
00:26:42,419 --> 00:26:44,659
questions

659
00:26:49,140 --> 00:26:50,700
uh we have time for a couple of

660
00:26:50,700 --> 00:26:53,059
questions

661
00:26:59,100 --> 00:27:01,740
okay if not I had one quick question so

662
00:27:01,740 --> 00:27:04,440
are there any uh impossibilities in

663
00:27:04,440 --> 00:27:07,020
terms of improving beyond for instance

664
00:27:07,020 --> 00:27:10,980
uh K4 or for even for like massive

665
00:27:10,980 --> 00:27:15,740
secret sharing uh for random linear code

666
00:27:16,200 --> 00:27:17,460
um I'll tell you very very good

667
00:27:17,460 --> 00:27:20,159
questions actually we don't have any

668
00:27:20,159 --> 00:27:22,500
like impossibility results here it's

669
00:27:22,500 --> 00:27:24,779
just some harness of computation

670
00:27:24,779 --> 00:27:27,539
resourcing that exists some back random

671
00:27:27,539 --> 00:27:29,159
list or some back Evolution Place

672
00:27:29,159 --> 00:27:30,720
function here

673
00:27:30,720 --> 00:27:35,000
but most of them are good yeah

674
00:27:35,159 --> 00:27:36,600
okay if there are no more questions

675
00:27:36,600 --> 00:27:39,918
let's thank the speaker again

676
00:27:49,500 --> 00:27:52,500
so the next talk and the last stop for

677
00:27:52,500 --> 00:27:55,500
the day is on random index oblivious Ram

678
00:27:55,500 --> 00:28:00,020
uh the talk would be given by Shah live

679
00:28:56,400 --> 00:28:58,440
down into your slides forward don't

680
00:28:58,440 --> 00:29:01,140
press the last buttons

681
00:29:01,140 --> 00:29:04,500
thank you uh so yeah I'm sure you live

682
00:29:04,500 --> 00:29:06,600
we'll talk about random index oblivious

683
00:29:06,600 --> 00:29:10,260
Ram uh and that's joint work with Uhl

684
00:29:10,260 --> 00:29:11,940
crucial

685
00:29:11,940 --> 00:29:15,000
so let me just remind you what oblivious

686
00:29:15,000 --> 00:29:18,419
Ram is uh construct introduced uh quite

687
00:29:18,419 --> 00:29:21,720
a while ago by Gilda nostrovski you have

688
00:29:21,720 --> 00:29:23,820
a client that wants to access some

689
00:29:23,820 --> 00:29:25,500
memory but that's not going to store it

690
00:29:25,500 --> 00:29:26,840
locally

691
00:29:26,840 --> 00:29:31,200
so it wants to offload it to a server it

692
00:29:31,200 --> 00:29:32,640
doesn't want the server to know what

693
00:29:32,640 --> 00:29:34,140
it's doing

694
00:29:34,140 --> 00:29:36,720
so you're introducing between them sort

695
00:29:36,720 --> 00:29:38,880
of a compiler that runs locally at the

696
00:29:38,880 --> 00:29:39,779
client

697
00:29:39,779 --> 00:29:42,120
uh and when the client wants to access a

698
00:29:42,120 --> 00:29:45,659
particular memory position I

699
00:29:45,659 --> 00:29:48,419
it compiles it into some query to the

700
00:29:48,419 --> 00:29:51,600
server the server answers that query the

701
00:29:51,600 --> 00:29:53,700
compiler translate the answer back to

702
00:29:53,700 --> 00:29:55,320
the mem whatever was in the memory

703
00:29:55,320 --> 00:29:57,000
location

704
00:29:57,000 --> 00:29:59,279
and the server shouldn't know what the

705
00:29:59,279 --> 00:30:02,700
what index was accessed that's the point

706
00:30:02,700 --> 00:30:05,059
um in terms of efficiency consideration

707
00:30:05,059 --> 00:30:07,679
uh the compiler should use little space

708
00:30:07,679 --> 00:30:10,620
and little communication and the server

709
00:30:10,620 --> 00:30:12,179
space should not be much more than

710
00:30:12,179 --> 00:30:14,279
whatever it is to store the memory to

711
00:30:14,279 --> 00:30:15,360
begin with

712
00:30:15,360 --> 00:30:18,179
so that's what oblivious Ram is

713
00:30:18,179 --> 00:30:21,120
and in this work we look at an oblivious

714
00:30:21,120 --> 00:30:23,100
realm of a Twist where the client

715
00:30:23,100 --> 00:30:25,220
doesn't need to access any specific

716
00:30:25,220 --> 00:30:28,260
index but rather just want to sample a

717
00:30:28,260 --> 00:30:30,419
random index out of the memory so now

718
00:30:30,419 --> 00:30:33,179
the interface is very similar except uh

719
00:30:33,179 --> 00:30:35,279
the client asks for a sample the

720
00:30:35,279 --> 00:30:37,679
compiler translated to a query the

721
00:30:37,679 --> 00:30:39,659
server unsold the query the compiler

722
00:30:39,659 --> 00:30:41,820
translated now to

723
00:30:41,820 --> 00:30:44,580
index and whatever was in the index and

724
00:30:44,580 --> 00:30:46,799
require that the index that you sample

725
00:30:46,799 --> 00:30:50,220
is a random index from the memory and

726
00:30:50,220 --> 00:30:51,960
again the same thing as as before the

727
00:30:51,960 --> 00:30:53,520
server shouldn't learn what index was

728
00:30:53,520 --> 00:30:55,140
accessed the compiler should use a

729
00:30:55,140 --> 00:30:57,059
little space little communication and

730
00:30:57,059 --> 00:31:00,980
the server space should be small

731
00:31:01,440 --> 00:31:02,039
um

732
00:31:02,039 --> 00:31:04,919
why you look at it well the obvious

733
00:31:04,919 --> 00:31:06,600
observation is this is a weaker

734
00:31:06,600 --> 00:31:08,700
primitive than full-blown or um because

735
00:31:08,700 --> 00:31:10,679
you can always Implement full blown

736
00:31:10,679 --> 00:31:12,419
around by the client just chooses a

737
00:31:12,419 --> 00:31:14,299
random index and run the Orem protocol

738
00:31:14,299 --> 00:31:17,340
uh so maybe you can make it faster and

739
00:31:17,340 --> 00:31:18,720
also it's sufficient for several

740
00:31:18,720 --> 00:31:20,880
applications so an obvious one is you

741
00:31:20,880 --> 00:31:23,100
want to compute statistics of the memory

742
00:31:23,100 --> 00:31:25,380
so you just need to sample a few things

743
00:31:25,380 --> 00:31:27,659
you don't need to sample to do anything

744
00:31:27,659 --> 00:31:30,960
um uh to access any specific one I want

745
00:31:30,960 --> 00:31:35,039
to sub sample you're trying to uh divide

746
00:31:35,039 --> 00:31:38,039
to try to figure out some graph property

747
00:31:38,039 --> 00:31:39,960
of whatever you have there so you just

748
00:31:39,960 --> 00:31:41,760
sub sample and try to compute It On The

749
00:31:41,760 --> 00:31:45,960
Ground uh in some cases if the client is

750
00:31:45,960 --> 00:31:48,240
too small to even store the sub sample

751
00:31:48,240 --> 00:31:50,760
then you can combine it you sub sample

752
00:31:50,760 --> 00:31:53,039
and Builder full blown Oram and then run

753
00:31:53,039 --> 00:31:55,620
the procedure so it's good it could be a

754
00:31:55,620 --> 00:31:59,159
useful property in several application

755
00:31:59,159 --> 00:32:02,700
the one that we that motivated this um

756
00:32:02,700 --> 00:32:05,700
work is a lottery type application we'll

757
00:32:05,700 --> 00:32:07,620
think of uh people sign up with the

758
00:32:07,620 --> 00:32:08,460
server

759
00:32:08,460 --> 00:32:10,799
to participate in the lottery the client

760
00:32:10,799 --> 00:32:13,440
chooses one of them at random maybe a

761
00:32:13,440 --> 00:32:15,840
few of them at random to win the jackpot

762
00:32:15,840 --> 00:32:18,840
and the server should know who won uh

763
00:32:18,840 --> 00:32:21,480
why look at that uh the reason for that

764
00:32:21,480 --> 00:32:24,779
was it's useful for uh massive scale

765
00:32:24,779 --> 00:32:27,059
multi-party computation where you want

766
00:32:27,059 --> 00:32:29,580
to choose random committees

767
00:32:29,580 --> 00:32:30,500
um

768
00:32:30,500 --> 00:32:33,840
and in that application it's in the

769
00:32:33,840 --> 00:32:35,600
paper I'm not going to expand on it much

770
00:32:35,600 --> 00:32:38,940
but the client the random index client

771
00:32:38,940 --> 00:32:42,179
is actually implemented via SQL and PC

772
00:32:42,179 --> 00:32:45,840
so it makes it all the more urgent to

773
00:32:45,840 --> 00:32:47,580
try to make it as efficient as we

774
00:32:47,580 --> 00:32:49,740
possibly can it's exactly the same

775
00:32:49,740 --> 00:32:52,559
motivation that uh motivated the study

776
00:32:52,559 --> 00:32:56,159
of random peer uh by Jen tradel from

777
00:32:56,159 --> 00:32:59,059
last year's TCC

778
00:33:00,419 --> 00:33:03,539
um in the paper we Define the security

779
00:33:03,539 --> 00:33:06,120
Notions for random index so I'm roughly

780
00:33:06,120 --> 00:33:07,679
speaking there are two Notions that we

781
00:33:07,679 --> 00:33:09,840
look at there is the notion of future

782
00:33:09,840 --> 00:33:11,940
Randomness is sufficient for this

783
00:33:11,940 --> 00:33:15,179
Lottery based uh applications well the

784
00:33:15,179 --> 00:33:16,919
next index that you're going to look at

785
00:33:16,919 --> 00:33:21,720
uh looks random to the server uh even if

786
00:33:21,720 --> 00:33:23,220
you have all the history of everything

787
00:33:23,220 --> 00:33:24,960
that happens so far

788
00:33:24,960 --> 00:33:27,059
and maybe you can weaken a little bit

789
00:33:27,059 --> 00:33:29,279
talking about high entropy rather than

790
00:33:29,279 --> 00:33:32,039
fully random uh but it's future looking

791
00:33:32,039 --> 00:33:34,620
then there is full Randomness that says

792
00:33:34,620 --> 00:33:36,480
that the entire sequence look random to

793
00:33:36,480 --> 00:33:39,659
the server both past and future and just

794
00:33:39,659 --> 00:33:41,460
to make to point out what the difference

795
00:33:41,460 --> 00:33:44,460
is in if you only need future Randomness

796
00:33:44,460 --> 00:33:47,580
it's perfectly okay for you to reveal in

797
00:33:47,580 --> 00:33:50,159
the I plus first query whatever you were

798
00:33:50,159 --> 00:33:52,559
looking in the if query and that can

799
00:33:52,559 --> 00:33:55,559
help in efficiency

800
00:33:55,559 --> 00:33:58,620
uh other Notions are batch maybe you

801
00:33:58,620 --> 00:34:00,240
want more than a single lookup at the

802
00:34:00,240 --> 00:34:03,539
same time uh and there is another notion

803
00:34:03,539 --> 00:34:06,000
in the paper that's uh even slightly

804
00:34:06,000 --> 00:34:07,440
weaker than that and I'm not going to

805
00:34:07,440 --> 00:34:09,980
talk about it here

806
00:34:09,980 --> 00:34:14,339
we show that yes it does help in

807
00:34:14,339 --> 00:34:17,580
improving uh efficiency

808
00:34:17,580 --> 00:34:21,239
in the sense that at least the Concrete

809
00:34:21,239 --> 00:34:24,179
Construction is simpler the specific

810
00:34:24,179 --> 00:34:27,080
parameters can be better it doesn't help

811
00:34:27,080 --> 00:34:30,418
uh asymptotically because random index

812
00:34:30,418 --> 00:34:32,820
or for the most part

813
00:34:32,820 --> 00:34:34,199
um the same lower bounds that are apply

814
00:34:34,199 --> 00:34:36,839
to our modify also to the random index

815
00:34:36,839 --> 00:34:39,000
version so asymptotics you don't expect

816
00:34:39,000 --> 00:34:41,879
to gain much but it does help in terms

817
00:34:41,879 --> 00:34:44,099
of specific

818
00:34:44,099 --> 00:34:47,639
yeah constructions and efficiency

819
00:34:47,639 --> 00:34:50,099
uh so I'm also just going to present the

820
00:34:50,099 --> 00:34:53,820
uh high level of the hierarchical random

821
00:34:53,820 --> 00:34:57,720
index or um that we have uh so let me

822
00:34:57,720 --> 00:35:00,060
remind you sort of a high level how

823
00:35:00,060 --> 00:35:02,760
hierarchical aurum looks like so the

824
00:35:02,760 --> 00:35:05,760
server storage now consists of a order

825
00:35:05,760 --> 00:35:07,859
of login levers where level I has

826
00:35:07,859 --> 00:35:10,980
roughly two to the I slots uh so the

827
00:35:10,980 --> 00:35:13,440
bottom level has n slots the top one the

828
00:35:13,440 --> 00:35:16,460
one above it and over two Etc

829
00:35:16,460 --> 00:35:20,880
and when you query you query the server

830
00:35:20,880 --> 00:35:24,660
from one slot from each level and you

831
00:35:24,660 --> 00:35:26,820
have the guarantee that one of these

832
00:35:26,820 --> 00:35:28,500
contains the right element the one that

833
00:35:28,500 --> 00:35:30,900
you're actually looking for and finding

834
00:35:30,900 --> 00:35:33,540
that right element is really the smart

835
00:35:33,540 --> 00:35:36,780
software article or um this is worth of

836
00:35:36,780 --> 00:35:39,420
ingenious hashing schemes are needed in

837
00:35:39,420 --> 00:35:41,460
order to find it and make sure that that

838
00:35:41,460 --> 00:35:42,900
one of them will contain the one that

839
00:35:42,900 --> 00:35:46,320
you're really looking for and then the

840
00:35:46,320 --> 00:35:49,500
client gets all of these elements takes

841
00:35:49,500 --> 00:35:51,780
out of them the one that it wants and

842
00:35:51,780 --> 00:35:53,960
put it at the top

843
00:35:53,960 --> 00:35:57,000
and because the top is very small you

844
00:35:57,000 --> 00:35:59,099
need to continuously push things down so

845
00:35:59,099 --> 00:36:02,160
every two to the I query uh you merge

846
00:36:02,160 --> 00:36:04,980
all the levels from I up to from one up

847
00:36:04,980 --> 00:36:08,579
to I minus one into level I and usually

848
00:36:08,579 --> 00:36:11,220
this is where a lot of the complexity uh

849
00:36:11,220 --> 00:36:15,060
run time and Etc lies

850
00:36:15,060 --> 00:36:17,400
uh okay so let's suppose we want to use

851
00:36:17,400 --> 00:36:19,619
this structure and we aim for future

852
00:36:19,619 --> 00:36:20,820
randomness

853
00:36:20,820 --> 00:36:23,160
so one thing that you can see off the

854
00:36:23,160 --> 00:36:25,740
top there is no right element anymore so

855
00:36:25,740 --> 00:36:27,660
you don't need this ingenious hashing

856
00:36:27,660 --> 00:36:29,400
space

857
00:36:29,400 --> 00:36:32,280
um every query contains an index uh from

858
00:36:32,280 --> 00:36:34,440
the previous one so the server knows

859
00:36:34,440 --> 00:36:36,839
exactly what was accessed all the way in

860
00:36:36,839 --> 00:36:39,359
the back in particular the server knows

861
00:36:39,359 --> 00:36:42,300
exactly which in which item appears in

862
00:36:42,300 --> 00:36:44,400
what level and how many items are in

863
00:36:44,400 --> 00:36:46,140
each level it just doesn't know the

864
00:36:46,140 --> 00:36:50,579
order of items in a level uh so now the

865
00:36:50,579 --> 00:36:52,320
server can just return the last element

866
00:36:52,320 --> 00:36:53,640
from each level

867
00:36:53,640 --> 00:36:55,380
the only thing that the client still

868
00:36:55,380 --> 00:36:57,720
needs to do is to choose one of them and

869
00:36:57,720 --> 00:36:59,700
you choose them at random based on how

870
00:36:59,700 --> 00:37:01,440
many elements are in each level so that

871
00:37:01,440 --> 00:37:03,900
to get random uniform probability of the

872
00:37:03,900 --> 00:37:06,780
the elements of overall

873
00:37:06,780 --> 00:37:09,300
um and then the same thing the each

874
00:37:09,300 --> 00:37:11,220
level the top level is Rewritten

875
00:37:11,220 --> 00:37:13,680
entirely in each step and whenever you

876
00:37:13,680 --> 00:37:14,820
uh

877
00:37:14,820 --> 00:37:17,400
um merge it down you need to make sure

878
00:37:17,400 --> 00:37:20,579
that uh the ordering at the level is

879
00:37:20,579 --> 00:37:24,240
random you don't need any kind of uh

880
00:37:24,240 --> 00:37:27,240
placing the the the elements in a

881
00:37:27,240 --> 00:37:29,820
particular place so again no hashing and

882
00:37:29,820 --> 00:37:31,619
slightly simpler than the merging of

883
00:37:31,619 --> 00:37:34,500
full blown

884
00:37:34,500 --> 00:37:36,480
so this is if you wanted future

885
00:37:36,480 --> 00:37:38,220
Randomness if you wanted more if you

886
00:37:38,220 --> 00:37:40,740
want to also past things to look random

887
00:37:40,740 --> 00:37:44,820
then you cannot tell the server what was

888
00:37:44,820 --> 00:37:47,220
fetched before so the server in

889
00:37:47,220 --> 00:37:49,440
particular cannot know from which level

890
00:37:49,440 --> 00:37:51,540
you took the right the the element

891
00:37:51,540 --> 00:37:54,300
before that so it doesn't know how many

892
00:37:54,300 --> 00:37:57,000
elements are in a level and it cannot

893
00:37:57,000 --> 00:37:58,800
return to you just the last one every

894
00:37:58,800 --> 00:37:59,900
time

895
00:37:59,900 --> 00:38:02,760
but what helps you is well it still

896
00:38:02,760 --> 00:38:05,339
knows more or less how many elements are

897
00:38:05,339 --> 00:38:07,320
in each level uh there was a fairly

898
00:38:07,320 --> 00:38:09,660
small window uh where with very high

899
00:38:09,660 --> 00:38:12,300
probability the number of elements are

900
00:38:12,300 --> 00:38:14,760
either here or there so the small window

901
00:38:14,760 --> 00:38:17,220
where the next element must be so the

902
00:38:17,220 --> 00:38:19,380
server can just give you all of them

903
00:38:19,380 --> 00:38:21,960
and you can improve a little bit if you

904
00:38:21,960 --> 00:38:25,460
allow caching at this client side

905
00:38:25,680 --> 00:38:27,359
all right that's pretty much all I

906
00:38:27,359 --> 00:38:29,760
wanted to tell you uh if you want to see

907
00:38:29,760 --> 00:38:31,680
more read the paper uh there is a

908
00:38:31,680 --> 00:38:35,460
construction of T3 based Oram uh the

909
00:38:35,460 --> 00:38:38,220
advantage aurorum which the advantage of

910
00:38:38,220 --> 00:38:40,500
uh tree base oblivious Ram is you don't

911
00:38:40,500 --> 00:38:43,320
need the recursive position map where

912
00:38:43,320 --> 00:38:46,020
you have smaller and smaller trees so

913
00:38:46,020 --> 00:38:47,760
there is a login Factor Improvement

914
00:38:47,760 --> 00:38:51,180
there uh the Sim the scheme itself is

915
00:38:51,180 --> 00:38:54,000
extremely simple the analysis of it is

916
00:38:54,000 --> 00:38:56,940
extremely not simple uh and also the

917
00:38:56,940 --> 00:38:58,980
parameters are not great so it would be

918
00:38:58,980 --> 00:39:02,040
nice to get a better analysis uh open

919
00:39:02,040 --> 00:39:03,660
problems yeah get better better skin

920
00:39:03,660 --> 00:39:06,599
better analysis now one nice question is

921
00:39:06,599 --> 00:39:08,820
whether you can do hybrid I want to

922
00:39:08,820 --> 00:39:10,859
build a structure that will allow me

923
00:39:10,859 --> 00:39:13,859
both to look for specific elements and

924
00:39:13,859 --> 00:39:15,480
to look for random elements and I want

925
00:39:15,480 --> 00:39:18,180
to pay only the random elements price if

926
00:39:18,180 --> 00:39:19,800
I happen to just need a random element

927
00:39:19,800 --> 00:39:22,260
think of running a randomized algorithm

928
00:39:22,260 --> 00:39:24,119
sometimes you sample sometimes you need

929
00:39:24,119 --> 00:39:27,599
something specific uh it's easy to do if

930
00:39:27,599 --> 00:39:30,240
the scheme is read only it's hard to do

931
00:39:30,240 --> 00:39:32,099
if it's not

932
00:39:32,099 --> 00:39:34,140
um it would be interesting to do another

933
00:39:34,140 --> 00:39:35,880
nice question is whether there is a way

934
00:39:35,880 --> 00:39:39,119
to build full-blown aurum from random

935
00:39:39,119 --> 00:39:40,140
orom

936
00:39:40,140 --> 00:39:43,920
in the peer setting uh we had a

937
00:39:43,920 --> 00:39:46,320
construction of a random in of a

938
00:39:46,320 --> 00:39:48,060
full-blown peel from a random index

939
00:39:48,060 --> 00:39:50,400
field that type of construction really

940
00:39:50,400 --> 00:39:52,440
doesn't work for uh I believe it's from

941
00:39:52,440 --> 00:39:55,020
at all uh we don't have any other thing

942
00:39:55,020 --> 00:39:57,420
any any other direction to build it I

943
00:39:57,420 --> 00:39:58,920
mean you can try to build it uh you know

944
00:39:58,920 --> 00:40:01,200
one-way functions and so but in Orem we

945
00:40:01,200 --> 00:40:03,119
have even without and I don't even know

946
00:40:03,119 --> 00:40:04,740
how to do that

947
00:40:04,740 --> 00:40:05,760
um

948
00:40:05,760 --> 00:40:08,780
and that's it

949
00:40:14,040 --> 00:40:18,380
thank you uh we have time for questions

950
00:40:22,619 --> 00:40:25,800
so in your definition you require that

951
00:40:25,800 --> 00:40:28,920
the random index is supplied by the

952
00:40:28,920 --> 00:40:31,320
client at the beginning does it make

953
00:40:31,320 --> 00:40:33,900
sense to think about a variant where the

954
00:40:33,900 --> 00:40:36,560
random index is going to be

955
00:40:36,560 --> 00:40:39,060
determined at the End by the

956
00:40:39,060 --> 00:40:41,460
functionality the random index is an

957
00:40:41,460 --> 00:40:43,500
output of the algorithm not an input yes

958
00:40:43,500 --> 00:40:46,160
oh okay

959
00:40:53,040 --> 00:40:56,460
thanks for the nice talk I had to so

960
00:40:56,460 --> 00:40:58,140
with regards to one of the last things

961
00:40:58,140 --> 00:41:01,260
you said that you were not aware of a

962
00:41:01,260 --> 00:41:03,240
transformation from a random index or

963
00:41:03,240 --> 00:41:04,859
Ram to Oram and the same thing that

964
00:41:04,859 --> 00:41:06,240
happens with peer

965
00:41:06,240 --> 00:41:09,300
uh but so I was wondering is there a

966
00:41:09,300 --> 00:41:13,140
reason to believe that the

967
00:41:13,140 --> 00:41:15,240
um that the number of rounds or

968
00:41:15,240 --> 00:41:17,339
interaction plays a meaningful part in

969
00:41:17,339 --> 00:41:19,619
the difference between random index and

970
00:41:19,619 --> 00:41:23,040
uh just for blowing uh in the setting

971
00:41:23,040 --> 00:41:24,180
over run

972
00:41:24,180 --> 00:41:26,460
in the sense that for random index pair

973
00:41:26,460 --> 00:41:28,320
is a different I mean there's a number

974
00:41:28,320 --> 00:41:30,839
of rounds plays an important role in so

975
00:41:30,839 --> 00:41:33,000
yeah I

976
00:41:33,000 --> 00:41:36,560
don't think so simply because for most

977
00:41:36,560 --> 00:41:39,660
Forum scheme you know there's just a

978
00:41:39,660 --> 00:41:42,680
single flow right

979
00:41:52,980 --> 00:41:54,359
all right

980
00:41:54,359 --> 00:41:57,359
yeah I don't know I mean that I mean for

981
00:41:57,359 --> 00:42:00,000
the three thing it's saved something but

982
00:42:00,000 --> 00:42:01,920
I didn't try to think of whether it's in

983
00:42:01,920 --> 00:42:03,660
her so I don't know

984
00:42:03,660 --> 00:42:06,200
next

985
00:42:07,440 --> 00:42:10,460
any more questions

986
00:42:12,780 --> 00:42:15,599
okay if not uh let's thank Shai again

987
00:42:15,599 --> 00:42:18,380
thank you

988
00:42:20,579 --> 00:42:22,619
so we'll head straight into the business

989
00:42:22,619 --> 00:42:23,640
meeting

990
00:42:23,640 --> 00:42:26,240
thank you

