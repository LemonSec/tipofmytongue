1
00:00:00,000 --> 00:00:02,700
uh post lunch session on interactive

2
00:00:02,700 --> 00:00:04,799
proofs so we'll have four talks uh

3
00:00:04,799 --> 00:00:07,460
during this session

4
00:00:10,380 --> 00:00:13,019
all right are we all set

5
00:00:13,019 --> 00:00:16,379
okay great so so our first talk will be

6
00:00:16,379 --> 00:00:18,240
on the auctioneer transformation of

7
00:00:18,240 --> 00:00:19,859
multi-round interactive proofs and

8
00:00:19,859 --> 00:00:22,260
Thomas will be giving the talk

9
00:00:22,260 --> 00:00:24,480
okay thanks for the introduction uh this

10
00:00:24,480 --> 00:00:26,400
is Joint work with my co-authors uh

11
00:00:26,400 --> 00:00:30,140
Sarah sphere and Michael close

12
00:00:30,420 --> 00:00:33,360
so the starting point uh of our work is

13
00:00:33,360 --> 00:00:36,000
an interactive proof obviously which is

14
00:00:36,000 --> 00:00:37,620
a protocol between a proofer and a

15
00:00:37,620 --> 00:00:39,600
verifier and the goal of this protocol

16
00:00:39,600 --> 00:00:42,120
is for the proofer to prove knowledge of

17
00:00:42,120 --> 00:00:45,000
a witness a secret witness given a

18
00:00:45,000 --> 00:00:47,460
public statement X so the proofer knows

19
00:00:47,460 --> 00:00:49,920
the witness W corresponding to X and the

20
00:00:49,920 --> 00:00:52,440
verifier Only Knows X and

21
00:00:52,440 --> 00:00:54,960
um the the proof and verifier exchange a

22
00:00:54,960 --> 00:00:56,879
couple of messages and in the end the

23
00:00:56,879 --> 00:00:59,520
verify decides whether to accept or

24
00:00:59,520 --> 00:01:02,879
reject the proofers claim

25
00:01:02,879 --> 00:01:05,580
um we will be restricting to public coin

26
00:01:05,580 --> 00:01:08,460
protocols and public coin protocols the

27
00:01:08,460 --> 00:01:11,640
verifiers messages so the C1 up to C mu

28
00:01:11,640 --> 00:01:14,340
in this example are chosen uniformly at

29
00:01:14,340 --> 00:01:17,340
random and are independent of the the

30
00:01:17,340 --> 00:01:22,700
messages sent or communicated thus far

31
00:01:24,180 --> 00:01:26,159
so interactive proofs have a number of

32
00:01:26,159 --> 00:01:28,320
desirable security properties and we

33
00:01:28,320 --> 00:01:29,939
will be focusing on knowledge soundness

34
00:01:29,939 --> 00:01:31,860
and informally knowledge soundness

35
00:01:31,860 --> 00:01:33,960
states that a dishonest proofer so

36
00:01:33,960 --> 00:01:35,759
without knowledge of a secret witness W

37
00:01:35,759 --> 00:01:37,740
should not be able to convince a

38
00:01:37,740 --> 00:01:40,079
verifier or at least should only be able

39
00:01:40,079 --> 00:01:42,900
to convince a verifier at very small or

40
00:01:42,900 --> 00:01:44,939
even negligible probability so that's

41
00:01:44,939 --> 00:01:47,280
the property that we will be focusing on

42
00:01:47,280 --> 00:01:49,079
and examples of these multi-round

43
00:01:49,079 --> 00:01:50,579
interactive proofs were already given

44
00:01:50,579 --> 00:01:53,880
this morning by Nick so uh you have a

45
00:01:53,880 --> 00:01:56,040
very large class of bulletproof-like

46
00:01:56,040 --> 00:01:58,860
protocols that all of these uh specific

47
00:01:58,860 --> 00:02:01,200
properties and that have become of

48
00:02:01,200 --> 00:02:03,180
Interest quite quite recently the last

49
00:02:03,180 --> 00:02:05,659
couple of years

50
00:02:06,420 --> 00:02:09,660
so in practice you want to deploy these

51
00:02:09,660 --> 00:02:11,280
interactive groups in a non-interactive

52
00:02:11,280 --> 00:02:13,620
manner and you can do this by using the

53
00:02:13,620 --> 00:02:15,540
well-known feature mirror transformation

54
00:02:15,540 --> 00:02:19,080
where you replace the challenges sent by

55
00:02:19,080 --> 00:02:21,180
the verifier to the proofer by random

56
00:02:21,180 --> 00:02:22,680
Oracle queries

57
00:02:22,680 --> 00:02:25,080
so instead of sending a message to the

58
00:02:25,080 --> 00:02:28,379
verifier and requesting a challenge in

59
00:02:28,379 --> 00:02:31,260
return the proofer makes a query to

60
00:02:31,260 --> 00:02:33,540
random Oracle and uses the output of

61
00:02:33,540 --> 00:02:36,420
this query as a challenge so this is a

62
00:02:36,420 --> 00:02:38,400
very well known transformation and it's

63
00:02:38,400 --> 00:02:39,420
sort of

64
00:02:39,420 --> 00:02:42,660
um uh makes the protocol non-interactive

65
00:02:42,660 --> 00:02:44,700
because the approver does not have to

66
00:02:44,700 --> 00:02:46,980
verify or have to communicate with the

67
00:02:46,980 --> 00:02:48,959
verifier anymore to to create the entire

68
00:02:48,959 --> 00:02:51,379
proof

69
00:02:51,599 --> 00:02:55,260
so obviously if you apply this feature

70
00:02:55,260 --> 00:02:56,700
mirror transformation the cheating

71
00:02:56,700 --> 00:02:58,500
probability for dishonest proofers

72
00:02:58,500 --> 00:02:59,819
increases

73
00:02:59,819 --> 00:03:01,620
and the reason is actually that this

74
00:03:01,620 --> 00:03:02,700
owner's proofer in this normal

75
00:03:02,700 --> 00:03:04,680
interactive modes can query the random

76
00:03:04,680 --> 00:03:06,660
Oracle many times

77
00:03:06,660 --> 00:03:08,760
many of these protocols namely have a

78
00:03:08,760 --> 00:03:10,500
cheating strategy that succeeds or that

79
00:03:10,500 --> 00:03:12,120
proceeds as follows if the if the

80
00:03:12,120 --> 00:03:13,680
proofer tries to Guess The Challenge

81
00:03:13,680 --> 00:03:15,360
before having seen it before receiving

82
00:03:15,360 --> 00:03:17,760
it from the verifier and if it guesses

83
00:03:17,760 --> 00:03:19,800
this challenge correctly then this

84
00:03:19,800 --> 00:03:21,300
always prove it can succeed in

85
00:03:21,300 --> 00:03:23,819
convincing the verifier even if it

86
00:03:23,819 --> 00:03:25,379
doesn't know Witness

87
00:03:25,379 --> 00:03:28,019
so in the interactive setting the prover

88
00:03:28,019 --> 00:03:29,700
has only one chance of guessing these

89
00:03:29,700 --> 00:03:31,319
challenges correctly but in the

90
00:03:31,319 --> 00:03:33,360
non-interactive setting the proofer can

91
00:03:33,360 --> 00:03:34,980
just query the random Oracle many times

92
00:03:34,980 --> 00:03:39,260
uh to to try and cheat

93
00:03:39,260 --> 00:03:42,120
and uh again it's also quite easy to see

94
00:03:42,120 --> 00:03:44,340
that this cheating probability uh

95
00:03:44,340 --> 00:03:46,080
depends on the number of times the

96
00:03:46,080 --> 00:03:48,720
proofer is allowed to query the random

97
00:03:48,720 --> 00:03:52,260
Oracle so the query complexity queue

98
00:03:52,260 --> 00:03:54,659
so a very natural question to ask is

99
00:03:54,659 --> 00:03:56,580
what is actually the security loss of

100
00:03:56,580 --> 00:03:59,159
the sphere chimir transformation so with

101
00:03:59,159 --> 00:04:01,260
what factor does the cheating

102
00:04:01,260 --> 00:04:03,180
probability or more precisely the

103
00:04:03,180 --> 00:04:05,400
knowledge error of these proofs increase

104
00:04:05,400 --> 00:04:07,140
if you apply the future mere

105
00:04:07,140 --> 00:04:08,819
transformation you go from interactive

106
00:04:08,819 --> 00:04:10,560
to non-interactive

107
00:04:10,560 --> 00:04:13,319
foreign so let us consider a very simple

108
00:04:13,319 --> 00:04:14,459
example

109
00:04:14,459 --> 00:04:16,019
so suppose we have a three round

110
00:04:16,019 --> 00:04:17,639
protocol

111
00:04:17,639 --> 00:04:19,560
um we're cheating probability copper so

112
00:04:19,560 --> 00:04:21,298
this Kappa is typically equal to the

113
00:04:21,298 --> 00:04:23,759
probability uh that the proofer guesses

114
00:04:23,759 --> 00:04:26,100
the challenge correctly

115
00:04:26,100 --> 00:04:27,540
and if you then apply the future

116
00:04:27,540 --> 00:04:29,699
transformation it's quite easy to see

117
00:04:29,699 --> 00:04:32,460
that the cheating probability uh Grows

118
00:04:32,460 --> 00:04:34,860
by approximately a factor Q where Q is

119
00:04:34,860 --> 00:04:36,900
this query complexity because the proof

120
00:04:36,900 --> 00:04:38,400
again simply try to guess the challenge

121
00:04:38,400 --> 00:04:40,500
queue times

122
00:04:40,500 --> 00:04:44,220
so here we see a security loss of a

123
00:04:44,220 --> 00:04:47,160
factor Q or at least linear in q

124
00:04:47,160 --> 00:04:48,840
so if we don't look at this multi-round

125
00:04:48,840 --> 00:04:49,919
protocol

126
00:04:49,919 --> 00:04:51,840
what we now do is we take the sequential

127
00:04:51,840 --> 00:04:53,639
the default sequential repetition of

128
00:04:53,639 --> 00:04:55,259
this three round protocol then we get a

129
00:04:55,259 --> 00:04:58,620
very uh we get a protocol with uh two t

130
00:04:58,620 --> 00:05:00,300
plus one round so this is a multi-round

131
00:05:00,300 --> 00:05:01,800
protocol

132
00:05:01,800 --> 00:05:05,100
and uh you can show that this uh this

133
00:05:05,100 --> 00:05:06,840
this protocol has the interactive

134
00:05:06,840 --> 00:05:08,400
protocol as cheating probability Kappa

135
00:05:08,400 --> 00:05:11,040
to the power T because now if a proofer

136
00:05:11,040 --> 00:05:12,780
wants to cheat it must cheat in all

137
00:05:12,780 --> 00:05:15,060
these T instances

138
00:05:15,060 --> 00:05:16,380
um but if you don't look at the Fiat

139
00:05:16,380 --> 00:05:18,479
shimir cheating probability you see that

140
00:05:18,479 --> 00:05:21,060
it becomes Q to the power T times Kappa

141
00:05:21,060 --> 00:05:23,759
to the power t or at least approximately

142
00:05:23,759 --> 00:05:25,440
and the reason is that also for the

143
00:05:25,440 --> 00:05:27,539
future transformation the proofer can

144
00:05:27,539 --> 00:05:29,100
simply attack all the T instances

145
00:05:29,100 --> 00:05:30,960
independently so separately from each

146
00:05:30,960 --> 00:05:31,740
other

147
00:05:31,740 --> 00:05:33,840
so what we see here is that we have a

148
00:05:33,840 --> 00:05:35,820
security loss that's exponential in a

149
00:05:35,820 --> 00:05:37,259
number of rounds

150
00:05:37,259 --> 00:05:39,060
so in general this is the case so in

151
00:05:39,060 --> 00:05:40,560
general the security loss of the future

152
00:05:40,560 --> 00:05:41,880
mu transformation is actually

153
00:05:41,880 --> 00:05:44,220
exponential in the number of rounds of

154
00:05:44,220 --> 00:05:46,979
the the protocol

155
00:05:46,979 --> 00:05:49,440
however this is somewhat of a contrived

156
00:05:49,440 --> 00:05:52,680
example because if you want to decrease

157
00:05:52,680 --> 00:05:54,180
the knowledge error of an interactive

158
00:05:54,180 --> 00:05:56,160
proof you can also resort to parallel

159
00:05:56,160 --> 00:05:57,539
repetition instead of sequential

160
00:05:57,539 --> 00:05:59,160
repetition and you then they don't have

161
00:05:59,160 --> 00:06:02,160
this blow up any number of rounds

162
00:06:02,160 --> 00:06:03,720
um so it is somewhat of a contrived

163
00:06:03,720 --> 00:06:05,039
example but it shows that there's some

164
00:06:05,039 --> 00:06:07,320
settings the the security loss is

165
00:06:07,320 --> 00:06:10,680
exponential in a number of rounds

166
00:06:10,680 --> 00:06:13,139
so what do we know uh from prior work so

167
00:06:13,139 --> 00:06:15,479
we have these uh a forking lemmas they

168
00:06:15,479 --> 00:06:17,220
have been known for quite some time

169
00:06:17,220 --> 00:06:18,419
already and that show that the security

170
00:06:18,419 --> 00:06:20,820
loss for three round protocols is linear

171
00:06:20,820 --> 00:06:23,160
in Q so what we saw in the first example

172
00:06:23,160 --> 00:06:25,500
for the three round protocol and we also

173
00:06:25,500 --> 00:06:27,120
know that in general the security loss

174
00:06:27,120 --> 00:06:29,220
is exponential uh in the number of

175
00:06:29,220 --> 00:06:31,580
rounds

176
00:06:31,680 --> 00:06:33,539
um and recently we've seen some

177
00:06:33,539 --> 00:06:35,880
multi-runs uh or some works on

178
00:06:35,880 --> 00:06:37,979
multi-round protocols and they show that

179
00:06:37,979 --> 00:06:39,600
some of these multi-round protocols

180
00:06:39,600 --> 00:06:41,940
perhaps actually have a security loss

181
00:06:41,940 --> 00:06:43,440
that does not depend on the number of

182
00:06:43,440 --> 00:06:44,639
rounds

183
00:06:44,639 --> 00:06:47,639
so we have these specific extractor so

184
00:06:47,639 --> 00:06:49,560
straight line extraction that uses a

185
00:06:49,560 --> 00:06:51,419
different technique or the first one is

186
00:06:51,419 --> 00:06:53,340
for interactive Oracle proofs and the

187
00:06:53,340 --> 00:06:55,560
second one uh Works only in the algebra

188
00:06:55,560 --> 00:06:57,720
group model so for a restricted class of

189
00:06:57,720 --> 00:06:59,520
protocols we we know that the security

190
00:06:59,520 --> 00:07:01,199
loss does not depend on the number of

191
00:07:01,199 --> 00:07:03,620
rounds

192
00:07:03,720 --> 00:07:06,660
so what we do in this work is we show uh

193
00:07:06,660 --> 00:07:08,580
first we give a positive results where

194
00:07:08,580 --> 00:07:11,280
we show that if we look at these a very

195
00:07:11,280 --> 00:07:14,220
broad class of interactive proofs so K1

196
00:07:14,220 --> 00:07:17,400
to K mu out of N1 up to n mu special

197
00:07:17,400 --> 00:07:20,160
sound interactive proofs so uh this

198
00:07:20,160 --> 00:07:21,900
morning Nick also referred to these as

199
00:07:21,900 --> 00:07:23,460
these three special sound protocols

200
00:07:23,460 --> 00:07:25,740
they're not going to explain what that

201
00:07:25,740 --> 00:07:27,479
actually means but this is a very large

202
00:07:27,479 --> 00:07:28,860
class of protocols for example

203
00:07:28,860 --> 00:07:30,900
bulletproofs admit this structure or

204
00:07:30,900 --> 00:07:33,060
have this property but for these

205
00:07:33,060 --> 00:07:35,400
protocols the security loss is linear in

206
00:07:35,400 --> 00:07:37,440
the query complexity queue and it is

207
00:07:37,440 --> 00:07:39,060
independent of the number of rounds of

208
00:07:39,060 --> 00:07:41,340
these protocols so the security loss is

209
00:07:41,340 --> 00:07:44,160
actually equal to Q Plus One

210
00:07:44,160 --> 00:07:45,720
so that is the first result of the

211
00:07:45,720 --> 00:07:48,240
positive result uh second we also

212
00:07:48,240 --> 00:07:49,740
provide a negative result which is

213
00:07:49,740 --> 00:07:52,020
actually we show that there are also

214
00:07:52,020 --> 00:07:54,419
natural protocols or interactive proofs

215
00:07:54,419 --> 00:07:56,460
where we do see this exponential

216
00:07:56,460 --> 00:07:58,380
security loss so it's not that we only

217
00:07:58,380 --> 00:08:00,300
see this exponential security loss for

218
00:08:00,300 --> 00:08:03,620
uh contrived examples

219
00:08:04,380 --> 00:08:06,120
but to give some intuition on the

220
00:08:06,120 --> 00:08:07,680
results

221
00:08:07,680 --> 00:08:09,180
um I already said that knowledge

222
00:08:09,180 --> 00:08:11,039
soundness is the informal definition or

223
00:08:11,039 --> 00:08:13,500
the intuition is that it's uh states

224
00:08:13,500 --> 00:08:15,840
that this Almost proofers Do not succeed

225
00:08:15,840 --> 00:08:17,699
in convincing a verifier

226
00:08:17,699 --> 00:08:20,099
more formally knowledge soundness is

227
00:08:20,099 --> 00:08:21,660
defined in terms of a knowledge

228
00:08:21,660 --> 00:08:24,180
extractor so an Interactive Group is

229
00:08:24,180 --> 00:08:25,319
knowledge sound if there exists

230
00:08:25,319 --> 00:08:27,960
knowledge extractor and the knowledge

231
00:08:27,960 --> 00:08:30,419
extractor is basically given Oracle

232
00:08:30,419 --> 00:08:32,458
access to the proof of P star that is

233
00:08:32,458 --> 00:08:34,620
trying to attack a protocol and its goal

234
00:08:34,620 --> 00:08:36,179
is to compute a witness or to extract

235
00:08:36,179 --> 00:08:38,219
the witness a secret witness out of this

236
00:08:38,219 --> 00:08:40,559
uh proof of B Star and that's of course

237
00:08:40,559 --> 00:08:42,120
it has to be efficient and succeed with

238
00:08:42,120 --> 00:08:44,159
large enough probabilities with large

239
00:08:44,159 --> 00:08:46,819
enough probability

240
00:08:47,100 --> 00:08:49,080
so what can you extract to do in the

241
00:08:49,080 --> 00:08:50,880
interactive setting the extract directly

242
00:08:50,880 --> 00:08:53,220
plays the role of the verifier so it can

243
00:08:53,220 --> 00:08:56,760
choose which challenges it sends to the

244
00:08:56,760 --> 00:08:58,980
to the proof or to the disorders proofer

245
00:08:58,980 --> 00:09:01,380
and in that way it can create a

246
00:09:01,380 --> 00:09:03,480
transcripts protocol transcripts and

247
00:09:03,480 --> 00:09:05,040
from these political transcripts the

248
00:09:05,040 --> 00:09:06,540
extractor can typically compute the

249
00:09:06,540 --> 00:09:07,940
witness

250
00:09:07,940 --> 00:09:10,140
in the normal interactive setting the

251
00:09:10,140 --> 00:09:12,360
situation is a little bit different so

252
00:09:12,360 --> 00:09:13,920
where we look at these when we look at

253
00:09:13,920 --> 00:09:15,360
these non-interactive random Oracle

254
00:09:15,360 --> 00:09:17,820
proofs so such as the future mu

255
00:09:17,820 --> 00:09:20,339
Transformations then the extractor can

256
00:09:20,339 --> 00:09:22,320
answer the random Oracle queries of the

257
00:09:22,320 --> 00:09:25,019
the disawlers proof of P star and it may

258
00:09:25,019 --> 00:09:26,880
also reprogram the random Oracle

259
00:09:26,880 --> 00:09:28,260
basically meaning that it runs the

260
00:09:28,260 --> 00:09:30,060
proofer again for the same or a random

261
00:09:30,060 --> 00:09:33,300
Oracle but it reprograms one of its uh

262
00:09:33,300 --> 00:09:35,459
entries

263
00:09:35,459 --> 00:09:36,839
um and the challenge here is that

264
00:09:36,839 --> 00:09:39,420
actually the the extractor does not know

265
00:09:39,420 --> 00:09:41,160
which of these random Oracle queries the

266
00:09:41,160 --> 00:09:43,680
proof of P star is going to use so in

267
00:09:43,680 --> 00:09:45,720
the interactive setting the proofer must

268
00:09:45,720 --> 00:09:48,060
answer or give a reply to the the

269
00:09:48,060 --> 00:09:49,920
challenge that is provided by the

270
00:09:49,920 --> 00:09:52,040
verifier or the extractor but in the

271
00:09:52,040 --> 00:09:54,300
random Oracle setting

272
00:09:54,300 --> 00:09:56,640
in a non-interactive setting the the

273
00:09:56,640 --> 00:09:59,459
proofer can query many

274
00:09:59,459 --> 00:10:02,160
um make many random Oracle queries and

275
00:10:02,160 --> 00:10:04,620
decide later which of those to use

276
00:10:04,620 --> 00:10:06,600
so that's actually the challenge uh in

277
00:10:06,600 --> 00:10:09,480
the non-interactive setting

278
00:10:09,480 --> 00:10:12,660
so what we do uh very briefly some some

279
00:10:12,660 --> 00:10:15,720
ideas in our approach we Define an

280
00:10:15,720 --> 00:10:18,060
abstract sampling game that mimics the

281
00:10:18,060 --> 00:10:21,000
extractor for three round protocols

282
00:10:21,000 --> 00:10:23,820
and a key observation is actually that

283
00:10:23,820 --> 00:10:26,040
reprogramming the random Oracle for an

284
00:10:26,040 --> 00:10:27,779
input that is not queried by the proof

285
00:10:27,779 --> 00:10:30,420
of B Star does not change P Stars output

286
00:10:30,420 --> 00:10:33,920
so this seems like a very obvious uh

287
00:10:33,920 --> 00:10:36,060
observation but it's actually crucial in

288
00:10:36,060 --> 00:10:38,640
the analysis so what it basically means

289
00:10:38,640 --> 00:10:41,339
that if P star does not query a specific

290
00:10:41,339 --> 00:10:44,399
entry of the random Oracle then if the

291
00:10:44,399 --> 00:10:46,860
extractor reprograms that entry then

292
00:10:46,860 --> 00:10:48,600
from the point of view of the proof of P

293
00:10:48,600 --> 00:10:50,940
star nothing has changed so its output

294
00:10:50,940 --> 00:10:53,040
is actually going to be identical to the

295
00:10:53,040 --> 00:10:54,899
output before

296
00:10:54,899 --> 00:10:56,579
so that's one of the observations that

297
00:10:56,579 --> 00:10:58,800
we make and that we incorporate into the

298
00:10:58,800 --> 00:11:01,019
analysis

299
00:11:01,019 --> 00:11:03,480
um and then another observation is that

300
00:11:03,480 --> 00:11:05,339
there exists a very natural recursive

301
00:11:05,339 --> 00:11:07,260
approach to go from Two Rounds

302
00:11:07,260 --> 00:11:08,760
interactive proofs to multi-round

303
00:11:08,760 --> 00:11:10,620
protocols

304
00:11:10,620 --> 00:11:12,540
um and what we do there is basically we

305
00:11:12,540 --> 00:11:14,399
have this three round extractor and then

306
00:11:14,399 --> 00:11:17,399
it this basically uses uh a sub

307
00:11:17,399 --> 00:11:19,920
extractor instead of the proof or P Star

308
00:11:19,920 --> 00:11:22,980
as as input so

309
00:11:22,980 --> 00:11:25,440
um I'm not going into details right now

310
00:11:25,440 --> 00:11:28,680
but there is a very natural approach to

311
00:11:28,680 --> 00:11:31,620
to do this if you do this naively you

312
00:11:31,620 --> 00:11:34,560
get an inefficient extractor and to

313
00:11:34,560 --> 00:11:36,540
handle that we introduced an earlier

314
00:11:36,540 --> 00:11:38,700
board option so basically that allows

315
00:11:38,700 --> 00:11:40,560
you to to make sure that the overall

316
00:11:40,560 --> 00:11:43,920
extractor is is going to be efficient

317
00:11:43,920 --> 00:11:45,000
um

318
00:11:45,000 --> 00:11:48,120
so I realized I had to skip over a lot

319
00:11:48,120 --> 00:11:49,740
of the details but I'm happy to take

320
00:11:49,740 --> 00:11:52,200
questions uh and also discuss them

321
00:11:52,200 --> 00:11:55,339
further later on

322
00:11:59,220 --> 00:12:01,140
great so we have a little bit of time

323
00:12:01,140 --> 00:12:03,600
for questions so do we have any

324
00:12:03,600 --> 00:12:06,260
questions for Thomas

325
00:12:11,060 --> 00:12:13,800
so what what's the exact running time of

326
00:12:13,800 --> 00:12:15,300
your extractor you say it's still

327
00:12:15,300 --> 00:12:17,100
putting them in time but but there's all

328
00:12:17,100 --> 00:12:20,220
this abortion and and so okay that's do

329
00:12:20,220 --> 00:12:22,560
you have a like a concrete bowel yet or

330
00:12:22,560 --> 00:12:25,620
yeah so the uh exact running time of the

331
00:12:25,620 --> 00:12:29,120
extractor so okay let me see

332
00:12:29,150 --> 00:12:29,579
[Music]

333
00:12:29,579 --> 00:12:31,260
um

334
00:12:31,260 --> 00:12:33,000
so it's basically the product of all

335
00:12:33,000 --> 00:12:35,040
these kis because that's the size of the

336
00:12:35,040 --> 00:12:37,200
tree that you need to extract

337
00:12:37,200 --> 00:12:40,740
um times uh a Q Plus One

338
00:12:40,740 --> 00:12:43,740
so yeah we have a a concrete boundary

339
00:12:43,740 --> 00:12:46,320
it's not so bad okay yeah

340
00:12:46,320 --> 00:12:48,240
thanks

341
00:12:48,240 --> 00:12:52,040
great additional questions yeah

342
00:12:54,540 --> 00:12:56,940
so what image I would imagine your proof

343
00:12:56,940 --> 00:12:58,860
also would extend to this auxiliary

344
00:12:58,860 --> 00:13:00,360
input random Oracle model is

345
00:13:00,360 --> 00:13:01,920
pre-processing there is a generic

346
00:13:01,920 --> 00:13:04,139
technique to do pre-sampling would it

347
00:13:04,139 --> 00:13:05,579
give tight bounce so there is like a

348
00:13:05,579 --> 00:13:07,980
better way to to extend your bounds to

349
00:13:07,980 --> 00:13:09,899
press you know to auxiliary input random

350
00:13:09,899 --> 00:13:11,459
Oracle

351
00:13:11,459 --> 00:13:15,480
um I I wouldn't know actually so yeah

352
00:13:15,480 --> 00:13:17,240
foreign

353
00:13:17,240 --> 00:13:20,899
any additional questions

354
00:13:21,480 --> 00:13:25,100
otherwise let's thank the speaker again

355
00:13:33,180 --> 00:13:35,700
all right so our next talk will be a

356
00:13:35,700 --> 00:13:37,680
virtual talk delivered over Zoom so

357
00:13:37,680 --> 00:13:41,660
let's uh wait until we set that up

358
00:13:50,220 --> 00:13:53,880
all right can you hear me yes yes okay

359
00:13:53,880 --> 00:13:56,519
wonderful so our next talk will be on

360
00:13:56,519 --> 00:13:59,040
steganography free zero knowledge and

361
00:13:59,040 --> 00:14:01,560
the talk will be given by bezat abdom

362
00:14:01,560 --> 00:14:02,820
likely

363
00:14:02,820 --> 00:14:05,600
okay thank you for the introduction

364
00:14:05,600 --> 00:14:08,519
uh this is the joint work with news

365
00:14:08,519 --> 00:14:10,399
flash hacker with

366
00:14:10,399 --> 00:14:12,079
Julian

367
00:14:12,079 --> 00:14:16,019
so uh in in this talk I'm gonna first

368
00:14:16,019 --> 00:14:18,120
start with the motivation the motivation

369
00:14:18,120 --> 00:14:20,360
mainly say what is the definition of

370
00:14:20,360 --> 00:14:22,620
storynographic communications and what

371
00:14:22,620 --> 00:14:24,899
are the challenges so far in this area

372
00:14:24,899 --> 00:14:27,660
and then we will list the result of the

373
00:14:27,660 --> 00:14:30,120
paper and then we look at the new model

374
00:14:30,120 --> 00:14:32,459
uh which is one of the results of this

375
00:14:32,459 --> 00:14:35,120
paper to see how we can prevent this

376
00:14:35,120 --> 00:14:37,700
stereography

377
00:14:37,700 --> 00:14:40,380
Communications and then we see how we

378
00:14:40,380 --> 00:14:45,899
can construct or instantly an example an

379
00:14:45,899 --> 00:14:48,120
example importantly so

380
00:14:48,120 --> 00:14:50,579
imagine that we have two parties party a

381
00:14:50,579 --> 00:14:53,279
and TB RTA wants to send some secret

382
00:14:53,279 --> 00:14:57,380
message to the party b in a way that

383
00:14:57,380 --> 00:15:01,079
uh the external Observer should not be

384
00:15:01,079 --> 00:15:03,800
able to detect that so this is called

385
00:15:03,800 --> 00:15:05,899
stogenography

386
00:15:05,899 --> 00:15:09,540
sloganographic communication so for that

387
00:15:09,540 --> 00:15:12,180
one cannot use an encrypted Channel why

388
00:15:12,180 --> 00:15:14,279
because this can be detected easily by

389
00:15:14,279 --> 00:15:16,800
the external Observer so one way that

390
00:15:16,800 --> 00:15:21,300
part A my uh might be able to do that is

391
00:15:21,300 --> 00:15:25,980
to instead embed uh her message in in

392
00:15:25,980 --> 00:15:27,600
any other message

393
00:15:27,600 --> 00:15:30,500
let us in a photograph or other things

394
00:15:30,500 --> 00:15:34,820
and also it is known that

395
00:15:35,060 --> 00:15:38,779
there is no way to prevent

396
00:15:38,779 --> 00:15:41,100
astroganography Communication in a play

397
00:15:41,100 --> 00:15:42,959
model so we have impossibility results

398
00:15:42,959 --> 00:15:45,420
for that in the independent model

399
00:15:45,420 --> 00:15:49,800
and to overcome this impossibility there

400
00:15:49,800 --> 00:15:52,920
are some directions that actually use

401
00:15:52,920 --> 00:15:54,180
the

402
00:15:54,180 --> 00:15:58,079
that bring some constraints in order to

403
00:15:58,079 --> 00:16:00,720
overcome this impossible terrorism for

404
00:16:00,720 --> 00:16:03,060
example the first one is called

405
00:16:03,060 --> 00:16:05,760
collusion-free protocols which actually

406
00:16:05,760 --> 00:16:10,380
tries to to to prevent a group of actors

407
00:16:10,380 --> 00:16:13,860
earlier parties from clothing with each

408
00:16:13,860 --> 00:16:17,040
other by the assumptions that there is a

409
00:16:17,040 --> 00:16:21,180
physical uh sealed envelopes and also

410
00:16:21,180 --> 00:16:25,019
plus some interactive uh pre-processing

411
00:16:25,019 --> 00:16:29,040
phase and also another way to overcome

412
00:16:29,040 --> 00:16:31,260
to the impossibility and construct such

413
00:16:31,260 --> 00:16:33,079
a

414
00:16:33,079 --> 00:16:37,880
stereography free communication is using

415
00:16:37,880 --> 00:16:41,459
sanitizations which instead of which in

416
00:16:41,459 --> 00:16:44,339
this model instead of using physical

417
00:16:44,339 --> 00:16:48,360
assumptions here one consider an active

418
00:16:48,360 --> 00:16:52,320
mediator this this active mediator sits

419
00:16:52,320 --> 00:16:56,519
a between the the parties or the A and B

420
00:16:56,519 --> 00:16:59,040
and can modify the message

421
00:16:59,040 --> 00:17:03,180
so he so it it is an active mediators

422
00:17:03,180 --> 00:17:07,040
but the and also there are some other

423
00:17:07,040 --> 00:17:09,179
approaches which are not going through

424
00:17:09,179 --> 00:17:12,799
to that for example using transmission

425
00:17:12,919 --> 00:17:15,959
setup stuff or other things

426
00:17:15,959 --> 00:17:18,780
but all of these things still there is

427
00:17:18,780 --> 00:17:21,900
an uh a main question or the main

428
00:17:21,900 --> 00:17:23,819
challenge is that is there any more

429
00:17:23,819 --> 00:17:27,559
realistic model that can prevent this

430
00:17:27,559 --> 00:17:30,720
astronomographic Communications

431
00:17:30,720 --> 00:17:33,600
not using for example some active

432
00:17:33,600 --> 00:17:36,140
mediator because in the classical

433
00:17:36,140 --> 00:17:40,200
stereography communication we want a

434
00:17:40,200 --> 00:17:42,720
passive external Observer or a passive

435
00:17:42,720 --> 00:17:44,400
material so

436
00:17:44,400 --> 00:17:46,860
the result of this paper try to somehow

437
00:17:46,860 --> 00:17:49,320
give a solution another solution in this

438
00:17:49,320 --> 00:17:51,539
in this area first

439
00:17:51,539 --> 00:17:53,340
the first result actually is that we

440
00:17:53,340 --> 00:17:56,640
Define a new model for stochonography

441
00:17:56,640 --> 00:18:01,020
freeness and then in order to to

442
00:18:01,020 --> 00:18:03,480
instantiate it we Define a New

443
00:18:03,480 --> 00:18:05,700
Primitives we called it stogography

444
00:18:05,700 --> 00:18:09,860
freezero knowledge or in in short it is

445
00:18:09,860 --> 00:18:13,820
sfzk and then we construct

446
00:18:13,820 --> 00:18:15,620
uh

447
00:18:15,620 --> 00:18:19,799
SF ZK arguments in in two settings with

448
00:18:19,799 --> 00:18:22,380
black box simulations into setting in

449
00:18:22,380 --> 00:18:25,799
single execution setting which means

450
00:18:25,799 --> 00:18:26,960
that

451
00:18:26,960 --> 00:18:31,919
one cannot use uh which which means that

452
00:18:31,919 --> 00:18:34,020
the pre-processing phase is not reusable

453
00:18:34,020 --> 00:18:36,140
and multi

454
00:18:36,140 --> 00:18:39,900
execution phase and also we give an

455
00:18:39,900 --> 00:18:42,059
impossibility result that this is the

456
00:18:42,059 --> 00:18:45,780
best case that one can get in this model

457
00:18:45,780 --> 00:18:48,360
but in this stock I only cover the first

458
00:18:48,360 --> 00:18:50,820
three parts and the rest can I would

459
00:18:50,820 --> 00:18:52,520
refer it in the

460
00:18:52,520 --> 00:18:55,440
full version of the paper

461
00:18:55,440 --> 00:19:00,299
so here Instagram for free uh

462
00:19:00,299 --> 00:19:04,260
actually our our model to prevent such a

463
00:19:04,260 --> 00:19:09,260
issue is divided into phases first phase

464
00:19:09,260 --> 00:19:12,720
is is non-interactive proprocessing

465
00:19:12,720 --> 00:19:15,660
Phase which actually each party can send

466
00:19:15,660 --> 00:19:17,880
a single message to each other and then

467
00:19:17,880 --> 00:19:20,100
this is an actual protocol which called

468
00:19:20,100 --> 00:19:23,640
execution phase and in this model we

469
00:19:23,640 --> 00:19:25,980
assume that only one party should be

470
00:19:25,980 --> 00:19:29,039
honest in the pre-processing phase but

471
00:19:29,039 --> 00:19:32,220
in the execution posts can be malicious

472
00:19:32,220 --> 00:19:36,179
and simply Define a stogography freeness

473
00:19:36,179 --> 00:19:38,520
in a following way we say that okay

474
00:19:38,520 --> 00:19:43,260
another and adversarial uh sender

475
00:19:43,260 --> 00:19:45,720
is given a beta B at the at the

476
00:19:45,720 --> 00:19:48,179
beginning of the execution phase and

477
00:19:48,179 --> 00:19:51,720
then at the end we ask the and then we

478
00:19:51,720 --> 00:19:53,940
want that the probability that the

479
00:19:53,940 --> 00:19:56,960
receiver outputs the value

480
00:19:56,960 --> 00:20:00,120
a bitter B such that the execution

481
00:20:00,120 --> 00:20:03,179
transcript is accepted by The Observer B

482
00:20:03,179 --> 00:20:05,360
negative

483
00:20:05,360 --> 00:20:09,059
and so now people to understand it and

484
00:20:09,059 --> 00:20:12,020
construct such a Primitives we first

485
00:20:12,020 --> 00:20:15,780
quickly recall the key Primitives that

486
00:20:15,780 --> 00:20:18,179
that we will use in our Construction

487
00:20:18,179 --> 00:20:21,299
which is uh which the first one is zero

488
00:20:21,299 --> 00:20:22,740
knowledge with super polynomial

489
00:20:22,740 --> 00:20:25,799
simulations here we assume that I mean

490
00:20:25,799 --> 00:20:28,200
for our for our Construction

491
00:20:28,200 --> 00:20:30,120
we assume that there is a three round

492
00:20:30,120 --> 00:20:32,039
public coin zero knowledge with the

493
00:20:32,039 --> 00:20:34,020
following properties which is

494
00:20:34,020 --> 00:20:36,440
simulatable in the super polynomial time

495
00:20:36,440 --> 00:20:40,020
and and also the second condition is

496
00:20:40,020 --> 00:20:41,460
that the first and the second message

497
00:20:41,460 --> 00:20:45,720
since this is true protocol

498
00:20:46,380 --> 00:20:48,660
the first and the second message let's

499
00:20:48,660 --> 00:20:52,200
call it on One beta should be a

500
00:20:52,200 --> 00:20:55,080
for those we have only one accepting

501
00:20:55,080 --> 00:20:58,740
saved message account and also if we fix

502
00:20:58,740 --> 00:21:01,260
the transcript Alpha and data uncommon

503
00:21:01,260 --> 00:21:03,419
then either of the following should

504
00:21:03,419 --> 00:21:06,299
holds this witness should be extractable

505
00:21:06,299 --> 00:21:10,640
or there is at most one data for the

506
00:21:10,640 --> 00:21:13,740
transcript Alpha and beta Hong Kong

507
00:21:13,740 --> 00:21:15,419
which is accepted

508
00:21:15,419 --> 00:21:20,039
and also we need a special kind of uh

509
00:21:20,039 --> 00:21:21,500
nibie non-interactive Fitness

510
00:21:21,500 --> 00:21:23,940
indistinguishability which is called

511
00:21:23,940 --> 00:21:27,419
Navy with honest pre-processing which is

512
00:21:27,419 --> 00:21:29,760
actually a Navy but divided in two steps

513
00:21:29,760 --> 00:21:32,480
which in the first step

514
00:21:32,480 --> 00:21:36,000
uh plural commits with some preliminary

515
00:21:36,000 --> 00:21:38,460
value which this which in this step

516
00:21:38,460 --> 00:21:41,220
forward is not given any statement and

517
00:21:41,220 --> 00:21:43,260
this is a statement in the independent

518
00:21:43,260 --> 00:21:45,480
and in the second step forward is given

519
00:21:45,480 --> 00:21:49,919
a witness and uh a statement to compute

520
00:21:49,919 --> 00:21:52,620
the real proof for the protocol and we

521
00:21:52,620 --> 00:21:54,799
assume that the sound is full as long as

522
00:21:54,799 --> 00:21:59,400
the first step uh is done honestly

523
00:21:59,400 --> 00:22:02,220
and after that now we can Define the New

524
00:22:02,220 --> 00:22:04,140
Primitives which is called estoga naught

525
00:22:04,140 --> 00:22:06,720
with three zero knowledge so here

526
00:22:06,720 --> 00:22:09,360
to follow our our mother which I was

527
00:22:09,360 --> 00:22:12,539
explaining here we assume that this sfzk

528
00:22:12,539 --> 00:22:14,520
argument process two phase again

529
00:22:14,520 --> 00:22:17,760
uninteractive uh pre-processing which

530
00:22:17,760 --> 00:22:21,000
each one which each party just sent a

531
00:22:21,000 --> 00:22:22,320
single message

532
00:22:22,320 --> 00:22:25,320
and also execution phase that approver

533
00:22:25,320 --> 00:22:27,360
wants to prove a validity of some a

534
00:22:27,360 --> 00:22:29,580
statement that is given in this phase

535
00:22:29,580 --> 00:22:31,980
execution for example and now the

536
00:22:31,980 --> 00:22:34,620
security requirement is first the

537
00:22:34,620 --> 00:22:36,659
standard which is scheme properties

538
00:22:36,659 --> 00:22:38,700
which is called completeness which says

539
00:22:38,700 --> 00:22:40,500
that for a value proverb

540
00:22:40,500 --> 00:22:42,840
uh verify you should accept the proof

541
00:22:42,840 --> 00:22:45,360
soundness is it Opposite for an invalid

542
00:22:45,360 --> 00:22:47,280
proverb or invalid board

543
00:22:47,280 --> 00:22:49,500
the verifier should reject the proof and

544
00:22:49,500 --> 00:22:51,000
zero knowledge says that the proof of

545
00:22:51,000 --> 00:22:53,100
price should not leak any information of

546
00:22:53,100 --> 00:22:57,240
the weakness and also we need to and

547
00:22:57,240 --> 00:23:00,360
also we add two more extra properties

548
00:23:00,360 --> 00:23:03,000
first is called Observer soundness which

549
00:23:03,000 --> 00:23:06,059
says that for some for for any invalid

550
00:23:06,059 --> 00:23:10,760
word or for any invalid accrueber

551
00:23:10,760 --> 00:23:16,260
uh no Coalition of uh program verifier

552
00:23:16,260 --> 00:23:19,980
should be accepted by The Observer and

553
00:23:19,980 --> 00:23:22,020
the last one is computationally unique

554
00:23:22,020 --> 00:23:25,020
transcript says that for any valid world

555
00:23:25,020 --> 00:23:28,380
two different set of efficient proverb p

556
00:23:28,380 --> 00:23:32,280
and B and and Pistol and BSR should not

557
00:23:32,280 --> 00:23:34,020
be able to generate two different

558
00:23:34,020 --> 00:23:36,600
transcripts or two different groups such

559
00:23:36,600 --> 00:23:40,320
that it is passed by the verification by

560
00:23:40,320 --> 00:23:42,299
The Observer

561
00:23:42,299 --> 00:23:45,000
so now let's see how we can instantiate

562
00:23:45,000 --> 00:23:48,000
it how we can understand in this sfc K

563
00:23:48,000 --> 00:23:50,039
so there are some difficulties to

564
00:23:50,039 --> 00:23:53,580
achieve it but the main one here is

565
00:23:53,580 --> 00:23:57,360
that if we want to get a Black Bob

566
00:23:57,360 --> 00:24:00,059
simulation of the construction in a

567
00:24:00,059 --> 00:24:02,700
single execution let's say for the first

568
00:24:02,700 --> 00:24:06,179
here the normal way is that okay similar

569
00:24:06,179 --> 00:24:08,760
works by the rewinding which actually

570
00:24:08,760 --> 00:24:12,559
rewind the advert cellular verifier in

571
00:24:12,559 --> 00:24:16,020
multiple times so to do that actually

572
00:24:16,020 --> 00:24:18,059
this creates multiple protocol

573
00:24:18,059 --> 00:24:20,640
transcript in order to make the

574
00:24:20,640 --> 00:24:23,220
rewinding ports which which actually

575
00:24:23,220 --> 00:24:26,220
this is in the opposite of the of the

576
00:24:26,220 --> 00:24:27,919
new property

577
00:24:27,919 --> 00:24:31,380
uh computational unit transcript which

578
00:24:31,380 --> 00:24:33,720
why because here similar can be counted

579
00:24:33,720 --> 00:24:37,200
as a efficient algorithm so this

580
00:24:37,200 --> 00:24:38,940
simulator office should not be able to

581
00:24:38,940 --> 00:24:41,400
produce multiple transcripts otherwise

582
00:24:41,400 --> 00:24:43,320
it will break the computational unit

583
00:24:43,320 --> 00:24:46,260
task profile so now the main the main

584
00:24:46,260 --> 00:24:50,159
one of the main challenge is that how we

585
00:24:50,159 --> 00:24:51,900
can achieve zero knowledge without

586
00:24:51,900 --> 00:24:56,880
violating cut or resources so to do that

587
00:24:56,880 --> 00:24:58,380
actually

588
00:24:58,380 --> 00:25:00,960
we extend the language in Navy in the

589
00:25:00,960 --> 00:25:03,539
following in the three branches so which

590
00:25:03,539 --> 00:25:06,000
the first Branch actually is going to be

591
00:25:06,000 --> 00:25:08,700
passed we will see by the verified by

592
00:25:08,700 --> 00:25:11,220
the approver and the second Branch will

593
00:25:11,220 --> 00:25:14,880
be uh used by the simulator in order to

594
00:25:14,880 --> 00:25:17,580
simulate the proof and the last branch

595
00:25:17,580 --> 00:25:19,200
which I will not talk about it in the

596
00:25:19,200 --> 00:25:22,020
stock this is only will be using the

597
00:25:22,020 --> 00:25:23,720
proof in order

598
00:25:23,720 --> 00:25:26,760
uh to prove the indistinguishability

599
00:25:26,760 --> 00:25:29,880
between the first two branches

600
00:25:29,880 --> 00:25:33,120
so now as I mentioned the protocol this

601
00:25:33,120 --> 00:25:36,179
sfdk has two phases pre-processing base

602
00:25:36,179 --> 00:25:38,220
and execution phase in the previous

603
00:25:38,220 --> 00:25:39,779
design phase

604
00:25:39,779 --> 00:25:43,260
Google commits to some messages zero and

605
00:25:43,260 --> 00:25:47,940
some Randomness are primes and then uh

606
00:25:47,940 --> 00:25:51,120
generate the first message of the HPP

607
00:25:51,120 --> 00:25:54,840
Nev and the first message of spsck

608
00:25:54,840 --> 00:25:57,659
but later it will be it will be used to

609
00:25:57,659 --> 00:25:59,880
prove that okay the first message of HPP

610
00:25:59,880 --> 00:26:02,120
is generated correctly

611
00:26:02,120 --> 00:26:04,340
and then

612
00:26:04,340 --> 00:26:07,559
transfer or make the green one actually

613
00:26:07,559 --> 00:26:08,820
public

614
00:26:08,820 --> 00:26:11,880
and on the other side also verifier

615
00:26:11,880 --> 00:26:15,120
first generic a random image of Y from

616
00:26:15,120 --> 00:26:17,240
some uh

617
00:26:17,240 --> 00:26:19,559
one-way function which is supposed to be

618
00:26:19,559 --> 00:26:21,480
substantially hard

619
00:26:21,480 --> 00:26:24,480
and also sample some distance X Prime

620
00:26:24,480 --> 00:26:27,620
from some average case hard language

621
00:26:27,620 --> 00:26:31,200
hard relation r with Unique Fitness W

622
00:26:31,200 --> 00:26:32,279
Prime

623
00:26:32,279 --> 00:26:36,539
and also commit in the second message of

624
00:26:36,539 --> 00:26:39,480
a beta that will be sent for the spsck

625
00:26:39,480 --> 00:26:41,700
because using that this is three rounds

626
00:26:41,700 --> 00:26:44,220
as I mentioned

627
00:26:44,220 --> 00:26:47,640
now in the execution phase proofer first

628
00:26:47,640 --> 00:26:50,460
commit to some messages Zero by using

629
00:26:50,460 --> 00:26:52,200
the random code in the r Prime which

630
00:26:52,200 --> 00:26:54,000
already fixed in the pre-processing

631
00:26:54,000 --> 00:26:55,140
phase

632
00:26:55,140 --> 00:26:58,940
and after getting the decomicment

633
00:26:58,940 --> 00:27:02,940
values from the verifier which is

634
00:27:02,940 --> 00:27:06,720
contains the beta and some Unique

635
00:27:06,720 --> 00:27:10,320
Fitness W Prime which verifier already

636
00:27:10,320 --> 00:27:12,360
committed in the preprocessing phase

637
00:27:12,360 --> 00:27:15,000
first prover checks the validity of

638
00:27:15,000 --> 00:27:17,400
those and after that create the second

639
00:27:17,400 --> 00:27:21,539
message of svsdk and an EV part

640
00:27:21,539 --> 00:27:24,240
uh which the second message of spsck

641
00:27:24,240 --> 00:27:27,000
says that okay the first message of the

642
00:27:27,000 --> 00:27:29,340
Navy is well formed

643
00:27:29,340 --> 00:27:32,220
and the Navy part wants to prove the

644
00:27:32,220 --> 00:27:35,159
first branch of the of the of the of the

645
00:27:35,159 --> 00:27:36,120
protocol

646
00:27:36,120 --> 00:27:39,720
so here and then in order to simulate

647
00:27:39,720 --> 00:27:44,279
and to simulate the protocol now instead

648
00:27:44,279 --> 00:27:47,279
of using the normal rewinding here the

649
00:27:47,279 --> 00:27:51,539
simulator first compute the first commit

650
00:27:51,539 --> 00:27:54,179
to some message zero and after getting

651
00:27:54,179 --> 00:27:56,520
the commitment message from the verifier

652
00:27:56,520 --> 00:27:59,460
which is better on the witness W Prime

653
00:27:59,460 --> 00:28:03,140
then he again rewinds the the verifier

654
00:28:03,140 --> 00:28:06,179
and then start from the beginning and

655
00:28:06,179 --> 00:28:09,000
instead of commitment to the zero he

656
00:28:09,000 --> 00:28:11,820
commits to the weakness W Prime because

657
00:28:11,820 --> 00:28:15,059
he already got it from the uh the

658
00:28:15,059 --> 00:28:18,059
verifier and then can pass the second

659
00:28:18,059 --> 00:28:20,279
part of the and then generate the Nivea

660
00:28:20,279 --> 00:28:23,039
and SPS for the second part of the for

661
00:28:23,039 --> 00:28:26,039
the second branch of the language

662
00:28:26,039 --> 00:28:30,539
so okay now uh as a summary we will be I

663
00:28:30,539 --> 00:28:33,840
was just I was just talking about the

664
00:28:33,840 --> 00:28:37,380
the new model and how we can implement

665
00:28:37,380 --> 00:28:40,620
it in the single execution setting and

666
00:28:40,620 --> 00:28:42,179
the rest of the result I will refer to

667
00:28:42,179 --> 00:28:45,539
the paper and as a or also open problem

668
00:28:45,539 --> 00:28:48,900
that might be interesting to somehow

669
00:28:48,900 --> 00:28:50,880
look at this property I mean Instagram

670
00:28:50,880 --> 00:28:54,059
would be free in the multi-party setting

671
00:28:54,059 --> 00:28:56,460
or some other models as well

672
00:28:56,460 --> 00:28:59,360
okay thank you

673
00:29:03,419 --> 00:29:05,580
great so we have time for one quick

674
00:29:05,580 --> 00:29:07,500
question if anyone wants to ask well the

675
00:29:07,500 --> 00:29:10,820
next speaker starts setting up

676
00:29:12,000 --> 00:29:14,520
so I have one brief question so in your

677
00:29:14,520 --> 00:29:16,320
construction you rely extensively on

678
00:29:16,320 --> 00:29:18,360
sub-exponential hardness can you comment

679
00:29:18,360 --> 00:29:19,860
on whether it might be possible to build

680
00:29:19,860 --> 00:29:22,200
steganography free zero knowledge using

681
00:29:22,200 --> 00:29:23,880
polynomial hard assumptions

682
00:29:23,880 --> 00:29:28,080
well that's a good question

683
00:29:28,080 --> 00:29:30,840
I would say using this substantial heart

684
00:29:30,840 --> 00:29:32,640
assumption actually is a main trick that

685
00:29:32,640 --> 00:29:33,539
we can

686
00:29:33,539 --> 00:29:37,279
we can uh we can get rid of

687
00:29:37,279 --> 00:29:40,559
I would say I don't know how to

688
00:29:40,559 --> 00:29:42,360
construct it because there are some

689
00:29:42,360 --> 00:29:44,760
difficulty you know if you want to use

690
00:29:44,760 --> 00:29:47,340
the quality in the proof which

691
00:29:47,340 --> 00:29:50,460
I'm not sure that one can explain it in

692
00:29:50,460 --> 00:29:53,820
the in the in this short time yeah but I

693
00:29:53,820 --> 00:29:55,860
have no idea that how it would be

694
00:29:55,860 --> 00:29:59,820
because yeah sounds good great let's

695
00:29:59,820 --> 00:30:02,658
thank the speaker again

696
00:30:02,700 --> 00:30:05,480
yeah thanks

697
00:30:15,419 --> 00:30:18,860
hey are we good

698
00:30:22,640 --> 00:30:26,600
don't press this last one okay

699
00:30:26,600 --> 00:30:29,520
all right so our third talk for this

700
00:30:29,520 --> 00:30:31,620
session will be on Vector commitments

701
00:30:31,620 --> 00:30:33,179
over rings and compressed Sigma

702
00:30:33,179 --> 00:30:35,220
protocols and Ignacio will be giving a

703
00:30:35,220 --> 00:30:36,240
talk

704
00:30:36,240 --> 00:30:37,500
thank you

705
00:30:37,500 --> 00:30:39,799
um yeah this is a paper with uh Thomas

706
00:30:39,799 --> 00:30:42,600
Ronald Kramer Ivan Dam Gord and Daniel

707
00:30:42,600 --> 00:30:45,500
espodero uh and this is about

708
00:30:45,500 --> 00:30:47,760
generalizing the theory of compressing

709
00:30:47,760 --> 00:30:50,399
my protocol which was introduced by

710
00:30:50,399 --> 00:30:54,200
Thomas and and Ronald and came to 2020

711
00:30:54,200 --> 00:30:58,740
uh to uh proven like statements linear

712
00:30:58,740 --> 00:31:01,980
forms over for committed values over

713
00:31:01,980 --> 00:31:04,080
Rings

714
00:31:04,080 --> 00:31:06,360
um so first of all let me

715
00:31:06,360 --> 00:31:09,480
um let me remind you even though all of

716
00:31:09,480 --> 00:31:10,799
you will probably know what the

717
00:31:10,799 --> 00:31:12,899
commitment scheme is it's usually

718
00:31:12,899 --> 00:31:15,480
described as a digital equivalent of the

719
00:31:15,480 --> 00:31:19,440
safe box where uh Alice can put a

720
00:31:19,440 --> 00:31:21,720
message in this box by applying some

721
00:31:21,720 --> 00:31:24,419
function some randomized functions and

722
00:31:24,419 --> 00:31:26,700
then she can open later the box to

723
00:31:26,700 --> 00:31:29,220
reveal the values that she put in and

724
00:31:29,220 --> 00:31:31,080
the properties that we want is that

725
00:31:31,080 --> 00:31:34,140
basically Alice can once the she has put

726
00:31:34,140 --> 00:31:36,960
the the message in the Box she can also

727
00:31:36,960 --> 00:31:40,200
open it to two different values and also

728
00:31:40,200 --> 00:31:42,419
that's uh when the message is in the box

729
00:31:42,419 --> 00:31:45,840
but before opening nobody else can uh

730
00:31:45,840 --> 00:31:48,840
learn anything about the message

731
00:31:48,840 --> 00:31:51,720
uh then uh what we will want to

732
00:31:51,720 --> 00:31:55,220
construct is homomorphic commitments and

733
00:31:55,220 --> 00:31:57,919
homomorphic commitments we describe them

734
00:31:57,919 --> 00:32:00,960
as follows so suppose so so the message

735
00:32:00,960 --> 00:32:02,880
space is going to be a group

736
00:32:02,880 --> 00:32:05,640
uh that will write additively and then

737
00:32:05,640 --> 00:32:07,500
the commitment space is some other group

738
00:32:07,500 --> 00:32:11,520
uh multiplicative group and then what we

739
00:32:11,520 --> 00:32:13,740
want is that if we multiply two

740
00:32:13,740 --> 00:32:17,220
commitments to X and Y then the

741
00:32:17,220 --> 00:32:19,860
resulting thing is a commitment to it so

742
00:32:19,860 --> 00:32:22,679
actually you have there the commitments

743
00:32:22,679 --> 00:32:25,200
to X and Y then you multiply them and

744
00:32:25,200 --> 00:32:27,299
then you get some commitments to X Plus

745
00:32:27,299 --> 00:32:31,080
y when with some Randomness that uh

746
00:32:31,080 --> 00:32:33,179
depends on the randomness and messages

747
00:32:33,179 --> 00:32:35,580
that we have originally but I guess that

748
00:32:35,580 --> 00:32:39,899
the important thing here is that say um

749
00:32:39,899 --> 00:32:43,919
um opening uh at some of messages uh

750
00:32:43,919 --> 00:32:47,640
should only uh reveal the value uh the

751
00:32:47,640 --> 00:32:49,380
sum of the messages but not more

752
00:32:49,380 --> 00:32:51,000
information about the individual

753
00:32:51,000 --> 00:32:52,679
messages so this is maybe the important

754
00:32:52,679 --> 00:32:53,820
thing about

755
00:32:53,820 --> 00:32:55,620
the homomorphic properties of the

756
00:32:55,620 --> 00:32:57,979
committee

757
00:32:58,200 --> 00:33:00,600
um then we have uh the notion of a

758
00:33:00,600 --> 00:33:03,539
vector commitment uh uh basically when

759
00:33:03,539 --> 00:33:06,000
you consider The Binding hiding and

760
00:33:06,000 --> 00:33:08,460
homomorphic properties you could just

761
00:33:08,460 --> 00:33:11,220
think of that to be a commitment on on a

762
00:33:11,220 --> 00:33:13,080
on a certain group that is the direct

763
00:33:13,080 --> 00:33:16,440
product of n copies of the same of some

764
00:33:16,440 --> 00:33:18,059
other group

765
00:33:18,059 --> 00:33:19,799
um so you are committing to vectors of

766
00:33:19,799 --> 00:33:23,340
of elements uh but

767
00:33:23,340 --> 00:33:25,799
um when we talk about better commitments

768
00:33:25,799 --> 00:33:28,019
we also want some additional properties

769
00:33:28,019 --> 00:33:30,779
namely we want to have a commitment that

770
00:33:30,779 --> 00:33:33,659
is succeeds so basically it should not

771
00:33:33,659 --> 00:33:35,340
grow too much with the length of the

772
00:33:35,340 --> 00:33:38,460
message that we commit to and then we

773
00:33:38,460 --> 00:33:41,940
also want that we want to maybe open

774
00:33:41,940 --> 00:33:44,760
positions of the vector like coordinates

775
00:33:44,760 --> 00:33:46,320
individual coordinates of the vector

776
00:33:46,320 --> 00:33:49,039
also in a succinct way and for us

777
00:33:49,039 --> 00:33:53,100
that will be like poly log n because

778
00:33:53,100 --> 00:33:56,419
what we will get so um

779
00:33:56,419 --> 00:33:59,340
the in particular this position opening

780
00:33:59,340 --> 00:34:00,440
is just

781
00:34:00,440 --> 00:34:04,140
a special case of

782
00:34:04,140 --> 00:34:06,659
um what we could call linear opening or

783
00:34:06,659 --> 00:34:09,359
opening of a inner product with a a

784
00:34:09,359 --> 00:34:13,500
known public Vector so basically like um

785
00:34:13,500 --> 00:34:15,960
having some kind of non-interactive

786
00:34:15,960 --> 00:34:18,899
proof for a relation that's uh well

787
00:34:18,899 --> 00:34:21,659
given some commitment and some uh and

788
00:34:21,659 --> 00:34:25,379
some value we know a vector that commits

789
00:34:25,379 --> 00:34:28,500
to that commitment and satisfies that a

790
00:34:28,500 --> 00:34:30,739
certain linear public linear form

791
00:34:30,739 --> 00:34:32,940
applied to the vector gives you the

792
00:34:32,940 --> 00:34:34,500
value y

793
00:34:34,500 --> 00:34:38,280
and now this is a a more General case

794
00:34:38,280 --> 00:34:40,560
than than a position opening because you

795
00:34:40,560 --> 00:34:42,719
can just have a position opening by just

796
00:34:42,719 --> 00:34:45,359
setting the this this form l

797
00:34:45,359 --> 00:34:47,580
to be the the form that gives you like

798
00:34:47,580 --> 00:34:50,280
the ice coordinates for whatever if

799
00:34:50,280 --> 00:34:53,159
position you want to to open

800
00:34:53,159 --> 00:34:55,980
okay so so this is uh the definitions I

801
00:34:55,980 --> 00:35:00,060
needed to like uh State our results

802
00:35:00,060 --> 00:35:03,000
that is that we construct Vector

803
00:35:03,000 --> 00:35:07,440
commitments for uh vectors over uh the

804
00:35:07,440 --> 00:35:11,160
Ring of integers modulo M for any m

805
00:35:11,160 --> 00:35:13,260
that is not necessarily a prime and this

806
00:35:13,260 --> 00:35:15,720
is like the sort of novelty that our

807
00:35:15,720 --> 00:35:17,940
commitments we will be also homomorphic

808
00:35:17,940 --> 00:35:20,880
uh with respect to the group uh of

809
00:35:20,880 --> 00:35:22,680
integers modulus M and this m doesn't

810
00:35:22,680 --> 00:35:25,020
need to be you know it could be Prime

811
00:35:25,020 --> 00:35:27,720
now these commitments uh that we

812
00:35:27,720 --> 00:35:30,240
construct have uh in fact constant size

813
00:35:30,240 --> 00:35:32,160
uh they don't depend on the length of

814
00:35:32,160 --> 00:35:33,839
the vector

815
00:35:33,839 --> 00:35:37,140
um we also construct uh then uh

816
00:35:37,140 --> 00:35:40,800
compressing my protocols that prove

817
00:35:40,800 --> 00:35:42,720
statements of the form that they just

818
00:35:42,720 --> 00:35:44,460
explained in the in the previous slides

819
00:35:44,460 --> 00:35:46,980
and this proves in our case we'll have

820
00:35:46,980 --> 00:35:49,680
uh log n log log n size so that means

821
00:35:49,680 --> 00:35:51,359
that in particular for example our

822
00:35:51,359 --> 00:35:54,420
commitments can or have this this or

823
00:35:54,420 --> 00:35:57,839
login log logging size position opening

824
00:35:57,839 --> 00:35:59,520
but we can also like open more General

825
00:35:59,520 --> 00:36:01,140
uh

826
00:36:01,140 --> 00:36:04,140
uh combinations of the coordinates of of

827
00:36:04,140 --> 00:36:07,800
the vector and in fact it's a bit better

828
00:36:07,800 --> 00:36:10,140
because we can even like amortize this

829
00:36:10,140 --> 00:36:13,200
so This complexity there is like for

830
00:36:13,200 --> 00:36:15,900
opening uh one or proving understanding

831
00:36:15,900 --> 00:36:19,140
over one vector but in fact we can prove

832
00:36:19,140 --> 00:36:23,280
uh uh the same uh sort of form for like

833
00:36:23,280 --> 00:36:26,579
the uh these statements with the same

834
00:36:26,579 --> 00:36:28,980
complexity so this is some somehow like

835
00:36:28,980 --> 00:36:31,740
blacks that are amortized

836
00:36:31,740 --> 00:36:33,180
um

837
00:36:33,180 --> 00:36:36,300
yeah so so now for the rest of the talk

838
00:36:36,300 --> 00:36:39,240
let me give some details

839
00:36:39,240 --> 00:36:42,119
um the first thing is that we construct

840
00:36:42,119 --> 00:36:45,420
is this Vector commitments uh for their

841
00:36:45,420 --> 00:36:48,300
for Rings modulo M for no necessarily

842
00:36:48,300 --> 00:36:49,520
Prime M

843
00:36:49,520 --> 00:36:54,359
and one problem here is that as far as

844
00:36:54,359 --> 00:36:55,920
we know we didn't find like any any

845
00:36:55,920 --> 00:36:58,020
construction uh out there that that

846
00:36:58,020 --> 00:37:00,780
would uh that was homomorphic for for

847
00:37:00,780 --> 00:37:04,320
like uh this ring so generally

848
00:37:04,320 --> 00:37:06,119
um because for example pederson's

849
00:37:06,119 --> 00:37:09,720
commitment work uh but only for

850
00:37:09,720 --> 00:37:12,359
say for example Prime values of M

851
00:37:12,359 --> 00:37:15,480
because they need to work in a group

852
00:37:15,480 --> 00:37:18,240
that's where the discrete log is is hard

853
00:37:18,240 --> 00:37:21,000
so if and this group has to have order n

854
00:37:21,000 --> 00:37:23,160
so in particular if m is two to the k

855
00:37:23,160 --> 00:37:26,180
then we are not going to get that

856
00:37:26,180 --> 00:37:30,200
another possibility could be to use uh

857
00:37:30,200 --> 00:37:33,300
dangor Fujisaki construction that is in

858
00:37:33,300 --> 00:37:36,720
uh homomorphic record commitment for for

859
00:37:36,720 --> 00:37:37,920
integers

860
00:37:37,920 --> 00:37:40,200
but the problem there is that if you

861
00:37:40,200 --> 00:37:45,420
like open a sum of vectors then you are

862
00:37:45,420 --> 00:37:47,579
revealing the sum over the integers and

863
00:37:47,579 --> 00:37:48,900
that gives more information than

864
00:37:48,900 --> 00:37:51,119
revealing the sum modular

865
00:37:51,119 --> 00:37:52,500
so

866
00:37:52,500 --> 00:37:53,160
um

867
00:37:53,160 --> 00:37:57,839
so um our constructions for this Vector

868
00:37:57,839 --> 00:38:00,900
commitments uh have basically two steps

869
00:38:00,900 --> 00:38:03,000
one is to construct actually the

870
00:38:03,000 --> 00:38:04,920
homomorphic commitments for single

871
00:38:04,920 --> 00:38:07,260
values and single value

872
00:38:07,260 --> 00:38:11,160
and then we can uh have or we find a

873
00:38:11,160 --> 00:38:13,800
general uh genetic construction of

874
00:38:13,800 --> 00:38:16,380
vector commitments from a single valid

875
00:38:16,380 --> 00:38:19,920
commitments so the second thing uh let

876
00:38:19,920 --> 00:38:22,079
me explain the second thing first so if

877
00:38:22,079 --> 00:38:24,300
you have a commitment for for single

878
00:38:24,300 --> 00:38:25,980
values

879
00:38:25,980 --> 00:38:27,839
um we can construct a commitment to

880
00:38:27,839 --> 00:38:31,380
vectors quite easily by just taking the

881
00:38:31,380 --> 00:38:34,140
same setup but now sampling with the

882
00:38:34,140 --> 00:38:36,900
single value commitment uh sampling

883
00:38:36,900 --> 00:38:39,960
basically commitments to n uh random

884
00:38:39,960 --> 00:38:41,099
values

885
00:38:41,099 --> 00:38:44,160
and then in order to commit to a vector

886
00:38:44,160 --> 00:38:45,119
X

887
00:38:45,119 --> 00:38:48,740
we just take this

888
00:38:48,740 --> 00:38:51,060
these values that have been sampled in

889
00:38:51,060 --> 00:38:53,240
the setup we raise them to the

890
00:38:53,240 --> 00:38:57,180
coordinates of X we we multiply them and

891
00:38:57,180 --> 00:38:59,640
then we multiply by a commitment of of

892
00:38:59,640 --> 00:39:02,160
zero with the single value committee and

893
00:39:02,160 --> 00:39:05,240
and this simply works

894
00:39:05,339 --> 00:39:06,180
um

895
00:39:06,180 --> 00:39:08,700
now let me just show you how to

896
00:39:08,700 --> 00:39:10,619
construct the single value commitments

897
00:39:10,619 --> 00:39:13,500
and here we we have a constructions

898
00:39:13,500 --> 00:39:17,040
based on on factoring assumptions and we

899
00:39:17,040 --> 00:39:18,900
separate the cases that and all the

900
00:39:18,900 --> 00:39:20,640
emissot and M is even

901
00:39:20,640 --> 00:39:22,740
so uh for M out we have this

902
00:39:22,740 --> 00:39:26,040
construction here now the setup actually

903
00:39:26,040 --> 00:39:29,940
if you if you realize it's just output

904
00:39:29,940 --> 00:39:32,579
in a random element in set and start

905
00:39:32,579 --> 00:39:34,440
completed random I mean I just wrote it

906
00:39:34,440 --> 00:39:37,859
there to notice that uh all I mean

907
00:39:37,859 --> 00:39:39,660
that's that's any element that you you

908
00:39:39,660 --> 00:39:42,300
sample there is of the form a to DM for

909
00:39:42,300 --> 00:39:43,380
some random

910
00:39:43,380 --> 00:39:45,119
a

911
00:39:45,119 --> 00:39:47,160
um and then once you have sampled that

912
00:39:47,160 --> 00:39:49,680
in the setup uh then you uh then it can

913
00:39:49,680 --> 00:39:52,020
because the commitment can be

914
00:39:52,020 --> 00:39:54,420
constructed by just uh raising these

915
00:39:54,420 --> 00:39:57,599
elements to to X and then multiplying by

916
00:39:57,599 --> 00:40:00,900
R to the n and that works

917
00:40:00,900 --> 00:40:03,540
um of course always to to guarantee

918
00:40:03,540 --> 00:40:06,660
blindness the the uh the commuter should

919
00:40:06,660 --> 00:40:09,420
not known this this value of a

920
00:40:09,420 --> 00:40:11,820
in the setup

921
00:40:11,820 --> 00:40:14,099
um then for M even we have the problem

922
00:40:14,099 --> 00:40:17,460
that m is not co-prime with Phi of n

923
00:40:17,460 --> 00:40:19,320
and then in that case we have to adapt

924
00:40:19,320 --> 00:40:21,660
the construction a bit and then we work

925
00:40:21,660 --> 00:40:24,900
over the group of elements with Jacobi

926
00:40:24,900 --> 00:40:29,460
symbol one and the uh the commitment has

927
00:40:29,460 --> 00:40:32,520
to be adapted a bit so we have to add

928
00:40:32,520 --> 00:40:35,640
this element minus one to the B

929
00:40:35,640 --> 00:40:38,820
but this simply is very similar to the

930
00:40:38,820 --> 00:40:41,160
other Construction

931
00:40:41,160 --> 00:40:43,800
okay so that was the the commitments and

932
00:40:43,800 --> 00:40:44,579
now

933
00:40:44,579 --> 00:40:47,520
um to show you a little bit uh how the

934
00:40:47,520 --> 00:40:50,820
uh the the open in the linear openings

935
00:40:50,820 --> 00:40:52,320
work

936
00:40:52,320 --> 00:40:54,180
um basically we are as I said

937
00:40:54,180 --> 00:40:56,400
generalizing this compressing protocol

938
00:40:56,400 --> 00:40:58,260
Theory

939
00:40:58,260 --> 00:40:59,040
um

940
00:40:59,040 --> 00:41:02,160
so first of all we can assume that's the

941
00:41:02,160 --> 00:41:04,560
modulus m is power of a prime because

942
00:41:04,560 --> 00:41:05,820
otherwise we can use the Chinese

943
00:41:05,820 --> 00:41:08,700
remember theorem and and reduce to that

944
00:41:08,700 --> 00:41:10,680
case

945
00:41:10,680 --> 00:41:12,660
um so assuming that m is of this form

946
00:41:12,660 --> 00:41:16,800
now if M was prime one could just use or

947
00:41:16,800 --> 00:41:18,960
Define a standard quite standard Sigma

948
00:41:18,960 --> 00:41:22,020
protocol uh with soundness one over m in

949
00:41:22,020 --> 00:41:23,880
this in this way

950
00:41:23,880 --> 00:41:26,400
um and then use this theory of

951
00:41:26,400 --> 00:41:28,800
compressing my protocols where you are

952
00:41:28,800 --> 00:41:30,900
basically like compressing the last step

953
00:41:30,900 --> 00:41:35,099
of this Sigma protocol uh having or

954
00:41:35,099 --> 00:41:39,119
leading to a shorter proof

955
00:41:39,119 --> 00:41:41,220
uh while at the same time well you are

956
00:41:41,220 --> 00:41:43,380
losing a little bit of soundness but not

957
00:41:43,380 --> 00:41:45,300
that much the soundness of this

958
00:41:45,300 --> 00:41:47,099
compression step is to overrend

959
00:41:47,099 --> 00:41:48,960
important and then soundness that you

960
00:41:48,960 --> 00:41:51,780
get in the end is to log n over them

961
00:41:51,780 --> 00:41:54,540
but now the problem is that if we are

962
00:41:54,540 --> 00:41:58,079
over uh over rings so where m is not

963
00:41:58,079 --> 00:42:03,240
Prime and it's a power of of a prime

964
00:42:03,240 --> 00:42:05,339
um the problem is that in in general

965
00:42:05,339 --> 00:42:07,920
this construction requires that the

966
00:42:07,920 --> 00:42:10,680
challenges the verifier sense live in a

967
00:42:10,680 --> 00:42:12,480
space where the difference of two

968
00:42:12,480 --> 00:42:13,800
different challenges needs to be

969
00:42:13,800 --> 00:42:15,060
imperative

970
00:42:15,060 --> 00:42:16,380
and

971
00:42:16,380 --> 00:42:17,099
um

972
00:42:17,099 --> 00:42:19,079
and the soundness is given by the

973
00:42:19,079 --> 00:42:22,260
inverse of of the size of that set and

974
00:42:22,260 --> 00:42:24,140
also the compressing

975
00:42:24,140 --> 00:42:26,700
is also given by the sounds of the

976
00:42:26,700 --> 00:42:30,119
compression step is two over that size

977
00:42:30,119 --> 00:42:34,020
so when we are of uh when we are in the

978
00:42:34,020 --> 00:42:36,240
case where m is 2 to the k for example

979
00:42:36,240 --> 00:42:39,180
then the the sets where we have the

980
00:42:39,180 --> 00:42:41,400
difference to be invertible of any two

981
00:42:41,400 --> 00:42:43,800
elements can have size 2 at most because

982
00:42:43,800 --> 00:42:45,780
we cannot have two elements of the same

983
00:42:45,780 --> 00:42:47,960
part

984
00:42:48,060 --> 00:42:49,980
um that means that the soundness would

985
00:42:49,980 --> 00:42:52,740
be uh one half of just of the sigma

986
00:42:52,740 --> 00:42:54,000
protocol that you have in the beginning

987
00:42:54,000 --> 00:42:56,220
but even it is even worse when you

988
00:42:56,220 --> 00:42:57,540
compress because then you don't even

989
00:42:57,540 --> 00:42:59,040
have any soundness

990
00:42:59,040 --> 00:43:01,319
uh there

991
00:43:01,319 --> 00:43:02,040
um

992
00:43:02,040 --> 00:43:05,940
so instead we use galvar Rings which is

993
00:43:05,940 --> 00:43:08,460
a a tool that has been used in a number

994
00:43:08,460 --> 00:43:12,480
of Works in NPC over over rings

995
00:43:12,480 --> 00:43:14,760
um and this is an extension of

996
00:43:14,760 --> 00:43:15,540
um

997
00:43:15,540 --> 00:43:19,200
of uh of uh yeah of the Ring of integers

998
00:43:19,200 --> 00:43:22,440
module or to decay uh where essentially

999
00:43:22,440 --> 00:43:24,599
you are taking like a larger ring that

1000
00:43:24,599 --> 00:43:27,000
sounds like a exceptional set so that's

1001
00:43:27,000 --> 00:43:29,220
where the differences are of any two

1002
00:43:29,220 --> 00:43:30,720
elements are invertible

1003
00:43:30,720 --> 00:43:32,940
which are larger and then you can get as

1004
00:43:32,940 --> 00:43:34,920
large as you want by increasing the the

1005
00:43:34,920 --> 00:43:36,839
degree of the polynomial that defines

1006
00:43:36,839 --> 00:43:39,480
this gallery and then you get P to the D

1007
00:43:39,480 --> 00:43:41,579
and then the question is okay then you

1008
00:43:41,579 --> 00:43:43,980
have to commit uh to to vectors that

1009
00:43:43,980 --> 00:43:45,960
have like elements in that extensional

1010
00:43:45,960 --> 00:43:48,660
ring but the point is that you can

1011
00:43:48,660 --> 00:43:51,780
always see those commitments or those

1012
00:43:51,780 --> 00:43:55,380
those vectors as the vectors over the

1013
00:43:55,380 --> 00:43:58,200
um over the smaller ring so basically a

1014
00:43:58,200 --> 00:44:00,260
commitment to that is just the

1015
00:44:00,260 --> 00:44:03,180
commitments to two vectors over the ring

1016
00:44:03,180 --> 00:44:05,460
and then everything works fine with the

1017
00:44:05,460 --> 00:44:07,319
homomorphic properties

1018
00:44:07,319 --> 00:44:11,339
and in the end we get a protocol that

1019
00:44:11,339 --> 00:44:13,020
actually can prove these statements of

1020
00:44:13,020 --> 00:44:14,400
that form because

1021
00:44:14,400 --> 00:44:16,920
of this sort of like larger ring that we

1022
00:44:16,920 --> 00:44:19,200
are taking with the batch the the

1023
00:44:19,200 --> 00:44:21,180
statements and we have the the

1024
00:44:21,180 --> 00:44:23,900
complexity there that I was like uh

1025
00:44:23,900 --> 00:44:26,880
announcing at the beginning

1026
00:44:26,880 --> 00:44:28,200
um

1027
00:44:28,200 --> 00:44:30,420
right so in in particular we have

1028
00:44:30,420 --> 00:44:32,819
position opening of this complexity log

1029
00:44:32,819 --> 00:44:34,319
n log of n

1030
00:44:34,319 --> 00:44:37,380
and well I have uh left some things

1031
00:44:37,380 --> 00:44:41,099
without the mentioning but basically we

1032
00:44:41,099 --> 00:44:43,859
have in the paper we have constructions

1033
00:44:43,859 --> 00:44:46,319
of single value commitments from what we

1034
00:44:46,319 --> 00:44:48,599
call Community groups which is an

1035
00:44:48,599 --> 00:44:50,640
obstruction of originalization of what

1036
00:44:50,640 --> 00:44:53,400
we have of what I have explained

1037
00:44:53,400 --> 00:44:55,800
and we have also construction class

1038
00:44:55,800 --> 00:44:58,800
groups that that help with like the

1039
00:44:58,800 --> 00:45:02,280
trustedness of the setup more details in

1040
00:45:02,280 --> 00:45:04,079
comparison with the sigma protocols and

1041
00:45:04,079 --> 00:45:06,720
then an application uh that sort of

1042
00:45:06,720 --> 00:45:08,280
motivated the little bits us at the

1043
00:45:08,280 --> 00:45:09,900
beginning that is to verify our

1044
00:45:09,900 --> 00:45:12,980
computation and encrypted data in a

1045
00:45:12,980 --> 00:45:16,319
paper in pkc21 where it's like

1046
00:45:16,319 --> 00:45:18,540
uh working offerings has certain

1047
00:45:18,540 --> 00:45:20,940
advantages instead as opposed to working

1048
00:45:20,940 --> 00:45:22,140
outfit

1049
00:45:22,140 --> 00:45:25,040
so yeah

1050
00:45:26,760 --> 00:45:28,760
foreign

1051
00:45:28,760 --> 00:45:30,960
so maybe we have time for one quick

1052
00:45:30,960 --> 00:45:34,579
question while the next speaker sets up

1053
00:45:37,619 --> 00:45:39,839
so can you comment on uh whether you can

1054
00:45:39,839 --> 00:45:41,880
extend beyond linear functions so say I

1055
00:45:41,880 --> 00:45:43,319
want to can you say anything about

1056
00:45:43,319 --> 00:45:44,940
extending to proving non-linear

1057
00:45:44,940 --> 00:45:46,560
relations such as quadratic relations or

1058
00:45:46,560 --> 00:45:47,579
higher degrees

1059
00:45:47,579 --> 00:45:49,079
um yeah so the

1060
00:45:49,079 --> 00:45:51,060
um we haven't looked at uh into that

1061
00:45:51,060 --> 00:45:53,700
where I suppose that I mean in the

1062
00:45:53,700 --> 00:45:55,740
compressing my protocol paper they they

1063
00:45:55,740 --> 00:45:58,079
have something that needs to to

1064
00:45:58,079 --> 00:46:00,660
um to address that we select uh and call

1065
00:46:00,660 --> 00:46:02,640
them things with sort of polynomials

1066
00:46:02,640 --> 00:46:05,460
like a kind of a semis you can say in

1067
00:46:05,460 --> 00:46:08,040
some way so I suppose that we can do

1068
00:46:08,040 --> 00:46:10,380
that in this case but I haven't we

1069
00:46:10,380 --> 00:46:12,060
haven't looked at that specifically

1070
00:46:12,060 --> 00:46:14,400
though great great so let's thank the

1071
00:46:14,400 --> 00:46:16,819
speaker again

1072
00:46:17,000 --> 00:46:20,180
thank you

1073
00:46:51,680 --> 00:46:54,240
thank you

1074
00:46:54,240 --> 00:46:56,700
all right so our final talk for this

1075
00:46:56,700 --> 00:46:58,079
session will be on universally

1076
00:46:58,079 --> 00:47:00,300
composable Sigma protocols in the global

1077
00:47:00,300 --> 00:47:02,220
random Oracle model and Leia will be

1078
00:47:02,220 --> 00:47:04,859
giving a talk hi I'm Leanna Mesa

1079
00:47:04,859 --> 00:47:06,240
Rosenbloom I'm here to talk about

1080
00:47:06,240 --> 00:47:08,579
universally composable Sigma protocols

1081
00:47:08,579 --> 00:47:10,740
in the global random Oracle model this

1082
00:47:10,740 --> 00:47:13,800
is Joint work with annalize

1083
00:47:13,800 --> 00:47:15,420
the point of this work is to create

1084
00:47:15,420 --> 00:47:17,640
better non-interactive zero knowledge

1085
00:47:17,640 --> 00:47:19,880
proofs of knowledge or nizzix for short

1086
00:47:19,880 --> 00:47:22,319
typically nizzix are constructed from

1087
00:47:22,319 --> 00:47:24,240
Sigma protocols that are made efficient

1088
00:47:24,240 --> 00:47:26,160
and non-interactive using the Fiat

1089
00:47:26,160 --> 00:47:28,020
Shamir heuristic and the random Oracle

1090
00:47:28,020 --> 00:47:29,460
model or ROM

1091
00:47:29,460 --> 00:47:32,579
most applications of nizzix use them as

1092
00:47:32,579 --> 00:47:35,160
follows Alice has a value V she wants to

1093
00:47:35,160 --> 00:47:37,079
convince Bob that this value is correct

1094
00:47:37,079 --> 00:47:39,720
so she generates a proof that proof Pi

1095
00:47:39,720 --> 00:47:42,119
that V is correct and sends V and pi to

1096
00:47:42,119 --> 00:47:44,520
Bob Bob then checks the proof If the

1097
00:47:44,520 --> 00:47:46,859
proof is valid Bob accepts the otherwise

1098
00:47:46,859 --> 00:47:49,200
Bob Rejects and this appears in

1099
00:47:49,200 --> 00:47:51,119
countless cryptographic protocol designs

1100
00:47:51,119 --> 00:47:53,339
the pros of this are that the Fiat

1101
00:47:53,339 --> 00:47:55,619
Shamir transform is very efficient and

1102
00:47:55,619 --> 00:47:57,540
the nizzics are provably secure in the

1103
00:47:57,540 --> 00:47:59,220
random Oracle model as long as they are

1104
00:47:59,220 --> 00:48:01,740
by themselves the caveat being that if

1105
00:48:01,740 --> 00:48:03,900
they are not security is not guaranteed

1106
00:48:03,900 --> 00:48:06,359
when the nizzix are composed as in many

1107
00:48:06,359 --> 00:48:08,460
of the applications given

1108
00:48:08,460 --> 00:48:11,220
and composable security is non-trivial

1109
00:48:11,220 --> 00:48:14,040
so recently Works have shown that there

1110
00:48:14,040 --> 00:48:15,540
are practical attacks on the

1111
00:48:15,540 --> 00:48:17,700
non-composability of these musics that

1112
00:48:17,700 --> 00:48:19,859
lead to malicious provers being able to

1113
00:48:19,859 --> 00:48:23,040
forge proofs so we would want a

1114
00:48:23,040 --> 00:48:25,380
universally composable or UC version of

1115
00:48:25,380 --> 00:48:27,720
nizzix that maintain reasonable

1116
00:48:27,720 --> 00:48:30,780
efficiency in the random Oracle model

1117
00:48:30,780 --> 00:48:33,300
in this work we Define physics in a more

1118
00:48:33,300 --> 00:48:35,579
composition-friendly way we then use our

1119
00:48:35,579 --> 00:48:37,680
definition to identify Standard Security

1120
00:48:37,680 --> 00:48:40,020
properties that are both necessary and

1121
00:48:40,020 --> 00:48:42,720
sufficient for obtaining UC nizzix in

1122
00:48:42,720 --> 00:48:44,880
the global random Oracle model where the

1123
00:48:44,880 --> 00:48:46,500
global random Oracle model is a more

1124
00:48:46,500 --> 00:48:48,660
realistic model where all the parties

1125
00:48:48,660 --> 00:48:51,240
across all different composed protocols

1126
00:48:51,240 --> 00:48:53,160
share the same random Oracle

1127
00:48:53,160 --> 00:48:56,220
finally we realize efficient UC and

1128
00:48:56,220 --> 00:48:58,319
physics in the global ROM using the

1129
00:48:58,319 --> 00:49:00,180
randomized special and transform so the

1130
00:49:00,180 --> 00:49:02,460
implications of our work are plug and

1131
00:49:02,460 --> 00:49:04,980
play musics or any application that

1132
00:49:04,980 --> 00:49:09,359
maintain efficiency in the ROM

1133
00:49:09,359 --> 00:49:11,220
I'll begin the technical details of the

1134
00:49:11,220 --> 00:49:13,920
talk with the ideal functionality of

1135
00:49:13,920 --> 00:49:15,660
these musics so in the UC model the

1136
00:49:15,660 --> 00:49:17,040
ideal functionality is the party

1137
00:49:17,040 --> 00:49:19,380
responsible for forming the output of

1138
00:49:19,380 --> 00:49:21,720
the honest parties in our case proofs

1139
00:49:21,720 --> 00:49:24,720
and verifications of proofs ethnic has

1140
00:49:24,720 --> 00:49:26,460
three interfaces set up prove and

1141
00:49:26,460 --> 00:49:29,040
verified in the setup phase the honest

1142
00:49:29,040 --> 00:49:31,440
party sends a setup request to the ideal

1143
00:49:31,440 --> 00:49:33,660
functionality who passes this request to

1144
00:49:33,660 --> 00:49:35,940
the ideal adversary which is the entity

1145
00:49:35,940 --> 00:49:37,319
in charge of helping the ideal

1146
00:49:37,319 --> 00:49:39,000
functionality form the output for the

1147
00:49:39,000 --> 00:49:41,099
previous

1148
00:49:41,099 --> 00:49:43,319
so in the previous the honest party

1149
00:49:43,319 --> 00:49:45,480
induced by the adversarial environment

1150
00:49:45,480 --> 00:49:48,020
to prove a statement x with a witness W

1151
00:49:48,020 --> 00:49:50,460
passes this to the ideal functionality

1152
00:49:50,460 --> 00:49:52,440
who either produces a proof or it

1153
00:49:52,440 --> 00:49:55,200
outputs fail computed as follows

1154
00:49:55,200 --> 00:49:57,780
first the ideal functionality throws out

1155
00:49:57,780 --> 00:49:59,400
the witness and computes the proof

1156
00:49:59,400 --> 00:50:01,560
according to the simulate algorithm if

1157
00:50:01,560 --> 00:50:03,300
the verification of this proof fails

1158
00:50:03,300 --> 00:50:05,339
then the ideal functionality outputs

1159
00:50:05,339 --> 00:50:07,980
fail otherwise it outputs the proof

1160
00:50:07,980 --> 00:50:09,960
in the verify phase the honest party

1161
00:50:09,960 --> 00:50:12,960
sends a proof for ethnic to verify and

1162
00:50:12,960 --> 00:50:15,359
ethnic either sends the verification or

1163
00:50:15,359 --> 00:50:17,819
outputs fail again computed as follows

1164
00:50:17,819 --> 00:50:20,880
if this proof is valid and not simulated

1165
00:50:20,880 --> 00:50:23,280
then ethnic computes the witness

1166
00:50:23,280 --> 00:50:25,859
according to the extract algorithm if it

1167
00:50:25,859 --> 00:50:28,260
is able to extract a valid witness it

1168
00:50:28,260 --> 00:50:30,780
just outputs the verification otherwise

1169
00:50:30,780 --> 00:50:32,520
it fails

1170
00:50:32,520 --> 00:50:34,740
we want to show

1171
00:50:34,740 --> 00:50:37,079
we can realize this functionality in the

1172
00:50:37,079 --> 00:50:38,579
global random Oracle so now we'll talk

1173
00:50:38,579 --> 00:50:40,980
about global random Oracle the first is

1174
00:50:40,980 --> 00:50:43,319
a strict setup that functions very

1175
00:50:43,319 --> 00:50:45,599
closely to a regular random Oracle well

1176
00:50:45,599 --> 00:50:48,480
where Alice sends her input X the Oracle

1177
00:50:48,480 --> 00:50:50,880
has some random function and it Returns

1178
00:50:50,880 --> 00:50:52,740
the value of that function computed on

1179
00:50:52,740 --> 00:50:55,200
Alice's input unfortunately it's not

1180
00:50:55,200 --> 00:50:56,880
possible to achieve nesics in this

1181
00:50:56,880 --> 00:50:59,880
setting because typically the simulator

1182
00:50:59,880 --> 00:51:02,160
needs to be able to program the random

1183
00:51:02,160 --> 00:51:03,900
Oracle in order to simulate proofs of

1184
00:51:03,900 --> 00:51:05,819
statements without a witness and it

1185
00:51:05,819 --> 00:51:07,619
needs to see the adversary's Oracle

1186
00:51:07,619 --> 00:51:09,780
queries in order to extract Witnesses

1187
00:51:09,780 --> 00:51:11,579
from the adversary's proofs so we build

1188
00:51:11,579 --> 00:51:13,140
those functionalities into the global

1189
00:51:13,140 --> 00:51:15,000
random Oracle as follows

1190
00:51:15,000 --> 00:51:17,160
first the observability interface the

1191
00:51:17,160 --> 00:51:18,839
Oracle now has a mouth from which it's

1192
00:51:18,839 --> 00:51:20,700
going to blab all of the illegitimate

1193
00:51:20,700 --> 00:51:23,160
queries which I will explain in a moment

1194
00:51:23,160 --> 00:51:25,980
the interface Works similarly except now

1195
00:51:25,980 --> 00:51:27,780
Alice has a session ID which she sends

1196
00:51:27,780 --> 00:51:30,119
with her query if that session ID she

1197
00:51:30,119 --> 00:51:31,920
sends with the query does not match her

1198
00:51:31,920 --> 00:51:34,440
actual session ID then the Oracle adds

1199
00:51:34,440 --> 00:51:36,420
this to the list of illegitimate queries

1200
00:51:36,420 --> 00:51:37,619
for her session

1201
00:51:37,619 --> 00:51:40,020
and now Alice can query for illegitimate

1202
00:51:40,020 --> 00:51:41,640
queries and see that list of

1203
00:51:41,640 --> 00:51:43,859
illegitimate queries this allows the

1204
00:51:43,859 --> 00:51:46,619
extractor to observe this list and in

1205
00:51:46,619 --> 00:51:49,440
the random uh sorry in the UC model the

1206
00:51:49,440 --> 00:51:51,960
environment is not part of any

1207
00:51:51,960 --> 00:51:53,400
legitimate protocol session by

1208
00:51:53,400 --> 00:51:55,859
definition so this will allow the the

1209
00:51:55,859 --> 00:51:59,099
extractor to extract the queries from

1210
00:51:59,099 --> 00:52:01,020
the environment's truths

1211
00:52:01,020 --> 00:52:02,640
sorry extract the witness

1212
00:52:02,640 --> 00:52:04,500
next we add the programming interface

1213
00:52:04,500 --> 00:52:06,359
which is in the form of a little imp

1214
00:52:06,359 --> 00:52:07,980
under the table who's going to program

1215
00:52:07,980 --> 00:52:10,020
the output values of the random Oracle

1216
00:52:10,020 --> 00:52:12,059
so Alice can now send a programming

1217
00:52:12,059 --> 00:52:14,460
request because this is global we have

1218
00:52:14,460 --> 00:52:16,680
to let anybody program the random Oracle

1219
00:52:16,680 --> 00:52:18,660
and so as long as that index has not

1220
00:52:18,660 --> 00:52:21,540
been queried yet the Imp programs the

1221
00:52:21,540 --> 00:52:24,180
Oracle but because if we we don't want

1222
00:52:24,180 --> 00:52:26,280
to allow Alice to cheat if Alice is an

1223
00:52:26,280 --> 00:52:28,140
adversary we don't want to allow her to

1224
00:52:28,140 --> 00:52:29,940
just program the Oracle and Forge proofs

1225
00:52:29,940 --> 00:52:31,980
so we add an interface called the is

1226
00:52:31,980 --> 00:52:34,020
programmed interface that allows anyone

1227
00:52:34,020 --> 00:52:36,300
to check whether indices in their

1228
00:52:36,300 --> 00:52:38,940
session have been programmed before so

1229
00:52:38,940 --> 00:52:41,339
if Alice's session ID that she sends

1230
00:52:41,339 --> 00:52:42,780
with her query matches her actual

1231
00:52:42,780 --> 00:52:45,480
session ID then the random Oracle

1232
00:52:45,480 --> 00:52:47,099
reveals the programming otherwise it

1233
00:52:47,099 --> 00:52:48,000
does not

1234
00:52:48,000 --> 00:52:50,220
again this would allow the simulator to

1235
00:52:50,220 --> 00:52:51,900
program but because the environment is

1236
00:52:51,900 --> 00:52:53,280
not part of any legitimate protocol

1237
00:52:53,280 --> 00:52:55,800
session then the environment cannot tell

1238
00:52:55,800 --> 00:52:57,359
whether the simulator has programmed a

1239
00:52:57,359 --> 00:52:59,460
random Oracle or not

1240
00:52:59,460 --> 00:53:01,500
we're working in the UC model so very

1241
00:53:01,500 --> 00:53:05,099
briefly there is a real world where the

1242
00:53:05,099 --> 00:53:06,720
parties are running the real

1243
00:53:06,720 --> 00:53:09,720
cryptographic protocol pi and in the

1244
00:53:09,720 --> 00:53:12,240
presence of an adversary a in the ideal

1245
00:53:12,240 --> 00:53:15,059
World there are dummy parties who are

1246
00:53:15,059 --> 00:53:17,339
talking to the ideal functionality F in

1247
00:53:17,339 --> 00:53:19,800
the presence of an ideal adversary s and

1248
00:53:19,800 --> 00:53:23,760
we say that Pi UC realizes F if no

1249
00:53:23,760 --> 00:53:25,559
environment D can tell whether it is

1250
00:53:25,559 --> 00:53:27,420
living in the real world or in the ideal

1251
00:53:27,420 --> 00:53:29,280
world

1252
00:53:29,280 --> 00:53:31,740
our first result says that any protocol

1253
00:53:31,740 --> 00:53:34,859
that realizes ethnic in any Global

1254
00:53:34,859 --> 00:53:36,420
random Oracle model must have three

1255
00:53:36,420 --> 00:53:38,040
properties first it must be

1256
00:53:38,040 --> 00:53:40,800
overwhelmingly complete it must have the

1257
00:53:40,800 --> 00:53:42,720
non-interactive multiple special honest

1258
00:53:42,720 --> 00:53:45,180
verifiers zero knowledge or Nim Shiva

1259
00:53:45,180 --> 00:53:46,319
zik property

1260
00:53:46,319 --> 00:53:48,180
and it must be non-interactive

1261
00:53:48,180 --> 00:53:50,819
especially special simulation sound or

1262
00:53:50,819 --> 00:53:53,040
nist so the overwhelming completeness

1263
00:53:53,040 --> 00:53:54,839
property says that given any honestly

1264
00:53:54,839 --> 00:53:57,000
computed proof or X that is in the

1265
00:53:57,000 --> 00:53:59,339
language of R the probability that the

1266
00:53:59,339 --> 00:54:01,200
verifier accepts is overwhelming in the

1267
00:54:01,200 --> 00:54:03,180
security parameter the NIMS physic

1268
00:54:03,180 --> 00:54:04,859
property says that polynomially many

1269
00:54:04,859 --> 00:54:06,240
proofs from the simulator are

1270
00:54:06,240 --> 00:54:08,040
indistinguishable from polynomial money

1271
00:54:08,040 --> 00:54:10,680
proofs from the regular approver and the

1272
00:54:10,680 --> 00:54:12,960
nist property says that given any valid

1273
00:54:12,960 --> 00:54:14,760
and non-simulated proof the extract

1274
00:54:14,760 --> 00:54:16,740
algorithm must be able to extract a

1275
00:54:16,740 --> 00:54:18,660
witness from the proof using only the

1276
00:54:18,660 --> 00:54:20,640
adversary's queries to the random Oracle

1277
00:54:20,640 --> 00:54:22,319
and this must hold even when the

1278
00:54:22,319 --> 00:54:24,359
adversary gets to see polynomially many

1279
00:54:24,359 --> 00:54:26,099
proofs from the simulator

1280
00:54:26,099 --> 00:54:28,680
okay so these properties are necessary

1281
00:54:28,680 --> 00:54:31,140
to achieve UC nizzix and how do we

1282
00:54:31,140 --> 00:54:33,240
actually realize them using something

1283
00:54:33,240 --> 00:54:35,220
called a straight line compiler so this

1284
00:54:35,220 --> 00:54:37,559
will allow us to get those properties a

1285
00:54:37,559 --> 00:54:39,480
straight line compiler takes any Sigma

1286
00:54:39,480 --> 00:54:41,640
protocol as input and produces a tuple

1287
00:54:41,640 --> 00:54:42,960
of algorithms with the following

1288
00:54:42,960 --> 00:54:45,240
properties the setup prove and verify

1289
00:54:45,240 --> 00:54:47,160
algorithms all have access to the random

1290
00:54:47,160 --> 00:54:50,160
Oracle and we Define it to have these

1291
00:54:50,160 --> 00:54:52,200
three properties just discussed

1292
00:54:52,200 --> 00:54:54,480
there is a straight line compiler

1293
00:54:54,480 --> 00:54:56,280
already in existence namely the

1294
00:54:56,280 --> 00:54:58,260
randomized fishland transform so in the

1295
00:54:58,260 --> 00:55:00,119
full version of this paper in 2005

1296
00:55:00,119 --> 00:55:02,040
fishland showed that these three

1297
00:55:02,040 --> 00:55:03,839
properties hold for the original version

1298
00:55:03,839 --> 00:55:05,760
of the fission transform there is an

1299
00:55:05,760 --> 00:55:07,859
updated randomized version that Conde

1300
00:55:07,859 --> 00:55:09,180
and shallot show

1301
00:55:09,180 --> 00:55:10,800
slightly different versions of these

1302
00:55:10,800 --> 00:55:12,900
properties so we just update to show

1303
00:55:12,900 --> 00:55:14,460
that the randomized Michelin transform

1304
00:55:14,460 --> 00:55:17,160
also has these three properties

1305
00:55:17,160 --> 00:55:19,020
and we show that these three properties

1306
00:55:19,020 --> 00:55:22,800
are sufficient to attain UC nizzics in

1307
00:55:22,800 --> 00:55:25,140
the programmable Global random Oracle

1308
00:55:25,140 --> 00:55:27,059
model so as long as you can program the

1309
00:55:27,059 --> 00:55:29,220
global random Oracle you can take any

1310
00:55:29,220 --> 00:55:30,839
Sigma protocol run it through a straight

1311
00:55:30,839 --> 00:55:34,079
line compiler and obtain UC musics and

1312
00:55:34,079 --> 00:55:36,480
the proof Works briefly as follows we

1313
00:55:36,480 --> 00:55:40,680
just replace the honest party there

1314
00:55:40,680 --> 00:55:42,720
slowly with the dummy so we start in the

1315
00:55:42,720 --> 00:55:44,460
real world we replace the prover with

1316
00:55:44,460 --> 00:55:46,559
the simulator reduce it to the NIMS

1317
00:55:46,559 --> 00:55:48,359
physic property then replace the

1318
00:55:48,359 --> 00:55:50,280
verifier with the extractor reduce it to

1319
00:55:50,280 --> 00:55:52,079
the nist property and now we've replaced

1320
00:55:52,079 --> 00:55:53,640
all of the entities and this looks like

1321
00:55:53,640 --> 00:55:55,859
a lot like ethnic and S so we just

1322
00:55:55,859 --> 00:55:57,960
rearrange the components

1323
00:55:57,960 --> 00:56:00,240
this assumes this little imp down here

1324
00:56:00,240 --> 00:56:03,119
is programming the random Oracle based

1325
00:56:03,119 --> 00:56:05,220
on the localized session of each party

1326
00:56:05,220 --> 00:56:07,079
so if you don't like this assumption we

1327
00:56:07,079 --> 00:56:08,520
have an additional construction that

1328
00:56:08,520 --> 00:56:10,500
works without this uh the programming

1329
00:56:10,500 --> 00:56:14,160
interface using a CRS so the prover will

1330
00:56:14,160 --> 00:56:15,720
show that either they have a valid

1331
00:56:15,720 --> 00:56:18,780
witness to the proof or they have a

1332
00:56:18,780 --> 00:56:21,480
trapdoor to the CRS so in the real world

1333
00:56:21,480 --> 00:56:24,480
the provers can compute the CRS for a

1334
00:56:24,480 --> 00:56:26,900
one-time setup cost using a UC

1335
00:56:26,900 --> 00:56:28,920
non-interactive secure computation

1336
00:56:28,920 --> 00:56:31,559
protocol and only the observable random

1337
00:56:31,559 --> 00:56:33,720
Oracle and in the ideal world the

1338
00:56:33,720 --> 00:56:35,760
simulator can generate the CRS with a

1339
00:56:35,760 --> 00:56:37,859
trapdoor

1340
00:56:37,859 --> 00:56:39,900
so given this or protocol construction

1341
00:56:39,900 --> 00:56:43,980
over r or the CRS relation s the

1342
00:56:43,980 --> 00:56:46,440
restricted observable Global Ros this is

1343
00:56:46,440 --> 00:56:48,599
the non-programming random Oracle you

1344
00:56:48,599 --> 00:56:51,180
can take that or protocol and run it

1345
00:56:51,180 --> 00:56:53,400
through any straight line compiler and

1346
00:56:53,400 --> 00:56:56,280
you will end up with a UC nizzic in the

1347
00:56:56,280 --> 00:57:00,059
observable only CRF hybrid model the

1348
00:57:00,059 --> 00:57:02,819
proof is similar to the loss proof in

1349
00:57:02,819 --> 00:57:04,380
spirit we don't have time to go through

1350
00:57:04,380 --> 00:57:08,099
it but it follows very similarly and

1351
00:57:08,099 --> 00:57:10,880
thank you

1352
00:57:15,660 --> 00:57:20,058
great we have time for questions so

1353
00:57:28,859 --> 00:57:31,260
um yeah so I apologies if this is a a

1354
00:57:31,260 --> 00:57:32,520
silly question

1355
00:57:32,520 --> 00:57:33,960
um I'm not familiar with the sort of UC

1356
00:57:33,960 --> 00:57:36,180
music stuff but uh what is what goes

1357
00:57:36,180 --> 00:57:37,800
wrong with the the future may transform

1358
00:57:37,800 --> 00:57:40,319
uh for for building the six in in this

1359
00:57:40,319 --> 00:57:42,660
like Global programmable model

1360
00:57:42,660 --> 00:57:46,500
yes so the source of the attacks uh with

1361
00:57:46,500 --> 00:57:49,140
composability are the root of that is

1362
00:57:49,140 --> 00:57:50,760
with rewinding

1363
00:57:50,760 --> 00:57:53,280
um so a lot of those attacks not are

1364
00:57:53,280 --> 00:57:56,700
refer you to the the attacks uh listed I

1365
00:57:56,700 --> 00:57:58,500
guess on the first slide but because you

1366
00:57:58,500 --> 00:58:01,260
rewind it as you start to compose

1367
00:58:01,260 --> 00:58:03,000
um the protocols it kind of blows up the

1368
00:58:03,000 --> 00:58:04,559
reduction size and it turns out that

1369
00:58:04,559 --> 00:58:06,839
leads to the ability to kind of Forge

1370
00:58:06,839 --> 00:58:10,680
one more on top of um the proofs that

1371
00:58:10,680 --> 00:58:14,640
we're given so yeah thank you

1372
00:58:14,640 --> 00:58:17,099
additional questions yeah in the front

1373
00:58:17,099 --> 00:58:19,800
yeah on the site

1374
00:58:19,800 --> 00:58:21,720
so just one quick question about the CRS

1375
00:58:21,720 --> 00:58:23,640
uh so if you could elaborate more and

1376
00:58:23,640 --> 00:58:25,500
specifically like the CRS needs to be

1377
00:58:25,500 --> 00:58:27,300
local for each execution of the protocol

1378
00:58:27,300 --> 00:58:29,160
or okay that's correct it's a session

1379
00:58:29,160 --> 00:58:32,339
local CRS yes so um it's not quite

1380
00:58:32,339 --> 00:58:34,680
Global uh that aspect of it it is a

1381
00:58:34,680 --> 00:58:36,420
session local CRS however the parties

1382
00:58:36,420 --> 00:58:38,520
can compute it using only the observable

1383
00:58:38,520 --> 00:58:40,079
random Oracle in the beginning of the

1384
00:58:40,079 --> 00:58:41,280
protocol session

1385
00:58:41,280 --> 00:58:42,599
yeah

1386
00:58:42,599 --> 00:58:46,640
all right and one final question I think

1387
00:58:46,640 --> 00:58:49,020
I think I think you answered the

1388
00:58:49,020 --> 00:58:51,059
question but yeah just I would like more

1389
00:58:51,059 --> 00:58:53,940
detail on how you do this pre-processing

1390
00:58:53,940 --> 00:58:55,740
phase like to generate the CRS like how

1391
00:58:55,740 --> 00:58:58,200
you said it's non-interactive like in an

1392
00:58:58,200 --> 00:58:59,940
interactive as opposium in

1393
00:58:59,940 --> 00:59:02,880
two rounds like uh yeah great question

1394
00:59:02,880 --> 00:59:06,000
so the reason why we we did the proof or

1395
00:59:06,000 --> 00:59:08,819
that I formulated this kind of in the uh

1396
00:59:08,819 --> 00:59:11,339
observable CRS hybrid model is because

1397
00:59:11,339 --> 00:59:12,660
technically you would add the

1398
00:59:12,660 --> 00:59:14,160
interaction at the beginning

1399
00:59:14,160 --> 00:59:16,020
um of computing the CRS so that is an

1400
00:59:16,020 --> 00:59:18,119
additional round so assuming that you

1401
00:59:18,119 --> 00:59:19,859
have that CRS for at the beginning of

1402
00:59:19,859 --> 00:59:21,960
the session then from that beginning

1403
00:59:21,960 --> 00:59:25,079
step on everything is non-interactive so

1404
00:59:25,079 --> 00:59:26,940
you could rephrase the theorem statement

1405
00:59:26,940 --> 00:59:30,180
three as being just the gro like just

1406
00:59:30,180 --> 00:59:32,460
the observable hybrid model but then you

1407
00:59:32,460 --> 00:59:33,900
would be assuming kind of an additional

1408
00:59:33,900 --> 00:59:35,760
interaction Step At the beginning to

1409
00:59:35,760 --> 00:59:37,740
compute that CRS

1410
00:59:37,740 --> 00:59:40,220
you know but

1411
00:59:40,220 --> 00:59:43,680
uh no so it the the beginning round kind

1412
00:59:43,680 --> 00:59:46,200
of it it's a one-time setup cost so once

1413
00:59:46,200 --> 00:59:48,299
you compute that CRS everything is just

1414
00:59:48,299 --> 00:59:52,339
like non-interactive as normal

1415
00:59:54,119 --> 00:59:56,040
so how many runs do you require to

1416
00:59:56,040 --> 00:59:57,420
generate the setup it's a

1417
00:59:57,420 --> 00:59:59,220
non-interactive so just one wrong track

1418
00:59:59,220 --> 01:00:01,140
goes from

1419
01:00:01,140 --> 01:00:03,119
Uber to

1420
01:00:03,119 --> 01:00:06,359
like that's what I yeah so it's a paper

1421
01:00:06,359 --> 01:00:09,900
um uh it's kanetti at all 2014. it's a

1422
01:00:09,900 --> 01:00:12,480
the UC nisk uh protocol in their paper

1423
01:00:12,480 --> 01:00:14,640
it is it's nisk so it would just be

1424
01:00:14,640 --> 01:00:16,200
adding one additional round and for

1425
01:00:16,200 --> 01:00:18,319
details I'll refer you to them

1426
01:00:18,319 --> 01:00:21,960
yeah right great so let's thank the

1427
01:00:21,960 --> 01:00:24,500
speaker again

1428
01:00:28,380 --> 01:00:30,540
and this concludes the session and I

1429
01:00:30,540 --> 01:00:32,339
think we have a half hour coffee break

1430
01:00:32,339 --> 01:00:36,558
we'll reconvene at 3pm

