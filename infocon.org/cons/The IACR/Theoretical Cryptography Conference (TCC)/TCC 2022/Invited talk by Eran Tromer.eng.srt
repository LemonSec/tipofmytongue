1
00:00:00,060 --> 00:00:03,480
thanks Alex for solving this

2
00:00:03,480 --> 00:00:04,319
um okay

3
00:00:04,319 --> 00:00:07,319
yeah it's my pleasure to introduce the

4
00:00:07,319 --> 00:00:11,099
second invited talk at this year's chess

5
00:00:11,099 --> 00:00:13,320
um it's as you've seen if you as you can

6
00:00:13,320 --> 00:00:15,780
read it's Iran drama

7
00:00:15,780 --> 00:00:18,180
um let me say a few words about Iran

8
00:00:18,180 --> 00:00:20,400
he's done a PhD at the Weitzman

9
00:00:20,400 --> 00:00:22,199
Institute in Israel and has been

10
00:00:22,199 --> 00:00:25,080
previous held uh has had quite a journey

11
00:00:25,080 --> 00:00:26,939
in the world like for this position is

12
00:00:26,939 --> 00:00:28,740
the MIT

13
00:00:28,740 --> 00:00:31,560
um at Microsoft you have been a

14
00:00:31,560 --> 00:00:34,920
professor at Tel Aviv University and

15
00:00:34,920 --> 00:00:37,200
right now you're a associate research

16
00:00:37,200 --> 00:00:39,780
scientist at Columbia University but

17
00:00:39,780 --> 00:00:42,719
quite also active in Industry Iran is

18
00:00:42,719 --> 00:00:44,940
the founder of sea lens Corporation and

19
00:00:44,940 --> 00:00:46,680
a founding scientist of the zcash

20
00:00:46,680 --> 00:00:49,920
Privacy for reserving cryptocurrency and

21
00:00:49,920 --> 00:00:53,520
uh right and in terms of research Iran

22
00:00:53,520 --> 00:00:55,620
is super broad one of these figures that

23
00:00:55,620 --> 00:00:57,719
has been appearing in the chess

24
00:00:57,719 --> 00:01:00,600
community and the TCC Community but not

25
00:01:00,600 --> 00:01:02,579
only there but also like a couple of

26
00:01:02,579 --> 00:01:05,220
security conferences so Iran has done it

27
00:01:05,220 --> 00:01:07,140
all so I was surprised to see where

28
00:01:07,140 --> 00:01:08,640
there are so many technical problems

29
00:01:08,640 --> 00:01:10,560
with uploading the slides but uh

30
00:01:10,560 --> 00:01:14,520
eventually it got resolved uh yeah

31
00:01:14,520 --> 00:01:16,740
um okay so it's been very well known for

32
00:01:16,740 --> 00:01:19,619
his unconventional side Channel attacks

33
00:01:19,619 --> 00:01:22,020
exploiting some weird leakage which

34
00:01:22,020 --> 00:01:24,420
always is a surprise special purpose

35
00:01:24,420 --> 00:01:27,119
Hardware breaking devices but also a

36
00:01:27,119 --> 00:01:29,880
more uh Theory stuff like homologic

37
00:01:29,880 --> 00:01:32,280
encryption comes to my mind

38
00:01:32,280 --> 00:01:34,320
um but also zero knowledge proves more

39
00:01:34,320 --> 00:01:37,140
recently uh okay and today he's gonna

40
00:01:37,140 --> 00:01:39,540
talk about from practice to Theory uh

41
00:01:39,540 --> 00:01:40,920
sounds very exciting how would I learn

42
00:01:40,920 --> 00:01:43,500
to stop worrying about the models uh

43
00:01:43,500 --> 00:01:46,140
Iran floresios

44
00:01:46,140 --> 00:01:49,140
foreign

45
00:01:50,939 --> 00:01:53,100
thank you it's an honor to be here and

46
00:01:53,100 --> 00:01:55,259
also I appreciate your patience as we

47
00:01:55,259 --> 00:01:56,820
were waiting for the Beats to flow

48
00:01:56,820 --> 00:01:58,680
through they say with great PowerPoint

49
00:01:58,680 --> 00:02:02,280
come great difficulties or some such

50
00:02:02,280 --> 00:02:06,299
um and uh it's um particularly an honor

51
00:02:06,299 --> 00:02:07,160
to

52
00:02:07,160 --> 00:02:09,959
have a chance to follow this in the

53
00:02:09,959 --> 00:02:12,599
footsteps of Yuda lindel who gave a talk

54
00:02:12,599 --> 00:02:15,540
last crypto a few months ago about his

55
00:02:15,540 --> 00:02:18,060
journey from Theory into practice

56
00:02:18,060 --> 00:02:20,520
and while I've doubled in that I thought

57
00:02:20,520 --> 00:02:22,440
that there are some counterpoints uh

58
00:02:22,440 --> 00:02:25,080
about the back and forth that goes on

59
00:02:25,080 --> 00:02:27,420
between the two fields and this will be

60
00:02:27,420 --> 00:02:29,280
a very subjective talks about the kind

61
00:02:29,280 --> 00:02:31,560
of experiences I've undergone as I came

62
00:02:31,560 --> 00:02:33,120
to fully appreciate the wonders of

63
00:02:33,120 --> 00:02:35,580
modals and what they can do for us if we

64
00:02:35,580 --> 00:02:38,760
feed them and care for them I have lots

65
00:02:38,760 --> 00:02:40,440
of material very little time feel free

66
00:02:40,440 --> 00:02:42,660
to stop me I don't mind skipping some

67
00:02:42,660 --> 00:02:44,580
slides in the interest of a good

68
00:02:44,580 --> 00:02:45,540
discussion

69
00:02:45,540 --> 00:02:49,080
so uh just ask questions during or out

70
00:02:49,080 --> 00:02:50,400
there as you prefer

71
00:02:50,400 --> 00:02:53,180
all right

72
00:02:53,580 --> 00:02:55,440
let's talk about side Channel attacks

73
00:02:55,440 --> 00:02:58,140
side Channel attacks are kind of the

74
00:02:58,140 --> 00:03:00,599
winter Central violation of models right

75
00:03:00,599 --> 00:03:02,459
we have our Turing machines we have a

76
00:03:02,459 --> 00:03:04,800
Boolean circuit and then we have the

77
00:03:04,800 --> 00:03:07,920
bloody reality where beats just leak all

78
00:03:07,920 --> 00:03:09,120
over the place

79
00:03:09,120 --> 00:03:11,700
but if you haven't seen this before let

80
00:03:11,700 --> 00:03:14,700
me show you some side Channel attacks

81
00:03:14,700 --> 00:03:16,080
some of the stuff we and others have

82
00:03:16,080 --> 00:03:18,180
been up to and then we'll opine a bit

83
00:03:18,180 --> 00:03:20,519
about where this takes us and let me

84
00:03:20,519 --> 00:03:21,300
actually start with something

85
00:03:21,300 --> 00:03:25,140
non-cryptographic but very visceral

86
00:03:25,140 --> 00:03:27,480
um which is the question uh that we all

87
00:03:27,480 --> 00:03:29,700
encounter we are having a zoom call and

88
00:03:29,700 --> 00:03:32,099
our colleagues seems slightly uh

89
00:03:32,099 --> 00:03:34,739
disengaged in conversation now is it

90
00:03:34,739 --> 00:03:36,840
because they are pondering uh words of

91
00:03:36,840 --> 00:03:39,180
wisdom or is it because they are reading

92
00:03:39,180 --> 00:03:42,180
the email I somehow I have this problem

93
00:03:42,180 --> 00:03:45,420
often and uh it would be nice if we

94
00:03:45,420 --> 00:03:48,120
could uh figure out what the other side

95
00:03:48,120 --> 00:03:49,500
of the call is doing now of course

96
00:03:49,500 --> 00:03:51,480
they're not telling us

97
00:03:51,480 --> 00:03:52,159
um

98
00:03:52,159 --> 00:03:55,500
but the screen is

99
00:03:55,500 --> 00:03:58,860
so the screen is rendering either or a

100
00:03:58,860 --> 00:04:01,680
collaborative conversation or social

101
00:04:01,680 --> 00:04:02,700
media

102
00:04:02,700 --> 00:04:05,099
and this screen is not intentionally

103
00:04:05,099 --> 00:04:06,780
shared with the counterpart to the

104
00:04:06,780 --> 00:04:08,099
conversation

105
00:04:08,099 --> 00:04:10,439
but if you look carefully around you

106
00:04:10,439 --> 00:04:12,959
you'll find all sort of sensors that can

107
00:04:12,959 --> 00:04:14,819
observe the screen of course there are

108
00:04:14,819 --> 00:04:16,320
webcams that could take pictures of the

109
00:04:16,320 --> 00:04:17,820
screens but that's not very exciting

110
00:04:17,820 --> 00:04:22,320
because obviously uh whoever is reading

111
00:04:22,320 --> 00:04:23,699
their email will take care to not

112
00:04:23,699 --> 00:04:25,380
photograph their own screen doing that

113
00:04:25,380 --> 00:04:28,440
but how about the microphones right

114
00:04:28,440 --> 00:04:31,080
we're having an audio conversation over

115
00:04:31,080 --> 00:04:32,880
the Internet so microphones are

116
00:04:32,880 --> 00:04:34,560
ubiquitous they're picking up noise and

117
00:04:34,560 --> 00:04:35,900
as it turns out

118
00:04:35,900 --> 00:04:39,120
there is some noise coming from the

119
00:04:39,120 --> 00:04:41,639
electronics doing some very very simple

120
00:04:41,639 --> 00:04:43,680
computation in this case feeding the

121
00:04:43,680 --> 00:04:46,680
screen pixels with the requisite energy

122
00:04:46,680 --> 00:04:48,780
but nonetheless as they were doing that

123
00:04:48,780 --> 00:04:51,540
some capacitors are vibrating some coils

124
00:04:51,540 --> 00:04:54,240
are whining and if you look at the

125
00:04:54,240 --> 00:04:56,340
signal that is emanating and we bought

126
00:04:56,340 --> 00:04:58,139
it on a nice spectrogram then you can

127
00:04:58,139 --> 00:04:59,880
see that different frequency components

128
00:04:59,880 --> 00:05:01,880
change over time

129
00:05:01,880 --> 00:05:04,560
uh for example let's take an extreme an

130
00:05:04,560 --> 00:05:06,840
extreme case so uh

131
00:05:06,840 --> 00:05:10,100
a screen that has some

132
00:05:10,100 --> 00:05:13,139
zebra stripes then a black region and

133
00:05:13,139 --> 00:05:14,940
some more zebra stripes and you can

134
00:05:14,940 --> 00:05:16,860
actually if you're correctly demodulate

135
00:05:16,860 --> 00:05:18,900
the signal you can see the zebra stripe

136
00:05:18,900 --> 00:05:21,180
the black region and the others in the

137
00:05:21,180 --> 00:05:22,860
acoustic emanation then the noise

138
00:05:22,860 --> 00:05:25,680
generated by the screen and picked up by

139
00:05:25,680 --> 00:05:28,080
the microphone

140
00:05:28,080 --> 00:05:30,419
now the presence of a signal by itself

141
00:05:30,419 --> 00:05:32,220
doesn't suffice in this case to actually

142
00:05:32,220 --> 00:05:33,780
exploit it you need to do a sort of

143
00:05:33,780 --> 00:05:35,759
signal processing and then put it into

144
00:05:35,759 --> 00:05:38,220
some machine learning algorithm using

145
00:05:38,220 --> 00:05:40,320
neural networks in order to cope with a

146
00:05:40,320 --> 00:05:41,520
tremendous amount of noise and

147
00:05:41,520 --> 00:05:43,979
variability I will skip straight to the

148
00:05:43,979 --> 00:05:46,620
bottom line yes this works we can

149
00:05:46,620 --> 00:05:50,039
robustly figure out what screen content

150
00:05:50,039 --> 00:05:52,080
is rendered on the other side of the

151
00:05:52,080 --> 00:05:53,060
call

152
00:05:53,060 --> 00:05:56,880
just by analyzing this leakage

153
00:05:56,880 --> 00:05:58,860
well this basically has many practical

154
00:05:58,860 --> 00:06:00,780
ramifications if you happen to be

155
00:06:00,780 --> 00:06:03,120
chatting with me on a voice call but

156
00:06:03,120 --> 00:06:05,880
beyond those it's not just about screen

157
00:06:05,880 --> 00:06:08,520
content it's also about real computation

158
00:06:08,520 --> 00:06:12,240
because the uh the CPU inside the

159
00:06:12,240 --> 00:06:14,520
computer in its power supply and the

160
00:06:14,520 --> 00:06:16,560
memory chips and their power supply

161
00:06:16,560 --> 00:06:19,560
everything there is

162
00:06:19,560 --> 00:06:21,900
um changing its power consumption and

163
00:06:21,900 --> 00:06:24,000
its electromagnetic emanations

164
00:06:24,000 --> 00:06:26,460
as the computation proceeds whatever the

165
00:06:26,460 --> 00:06:28,800
computation may be and that can be

166
00:06:28,800 --> 00:06:31,259
picked up by adjacent sensors like the

167
00:06:31,259 --> 00:06:34,160
aforementioned microphone

168
00:06:34,160 --> 00:06:37,680
so what if we could measure that leakage

169
00:06:37,680 --> 00:06:39,660
so on the other side of a call and

170
00:06:39,660 --> 00:06:42,139
figure out what computation is happening

171
00:06:42,139 --> 00:06:45,780
so uh in a paper uh presented at usinyx

172
00:06:45,780 --> 00:06:48,199
we looked at several

173
00:06:48,199 --> 00:06:51,600
scenarios uh let me uh

174
00:06:51,600 --> 00:06:55,620
jump straight into some real computation

175
00:06:55,620 --> 00:06:58,500
um you can you can be artificial

176
00:06:58,500 --> 00:07:01,020
computation like just a loop that does

177
00:07:01,020 --> 00:07:03,000
heavy stuff like multiplications versus

178
00:07:03,000 --> 00:07:06,000
just waiting and then you can look at

179
00:07:06,000 --> 00:07:08,340
the resulting noise and play relevant

180
00:07:08,340 --> 00:07:10,380
frequencies this difference between the

181
00:07:10,380 --> 00:07:13,639
two is easily distinguishable

182
00:07:13,740 --> 00:07:14,880
um and it also applies to Medical

183
00:07:14,880 --> 00:07:16,440
different computers of many different

184
00:07:16,440 --> 00:07:19,560
models uh and it works through many

185
00:07:19,560 --> 00:07:24,060
different voice uh the apps like zoom

186
00:07:24,060 --> 00:07:27,180
and Skype and some gamer favorite apps

187
00:07:27,180 --> 00:07:29,520
Google Hangouts they all use different

188
00:07:29,520 --> 00:07:32,099
codecs different Transformations but

189
00:07:32,099 --> 00:07:34,080
still the signal passes through

190
00:07:34,080 --> 00:07:36,660
and not just any signal it actually

191
00:07:36,660 --> 00:07:39,660
works for cryptographic signals so

192
00:07:39,660 --> 00:07:41,340
here's the one of the use cases we

193
00:07:41,340 --> 00:07:44,039
looked at the libg Crypt cryptographic

194
00:07:44,039 --> 00:07:46,580
Library it's open source fairly popular

195
00:07:46,580 --> 00:07:50,840
and we set up a laptop doing uh

196
00:07:50,840 --> 00:07:53,120
ecdsa

197
00:07:53,120 --> 00:07:56,099
signatures uh using libgcrypt while

198
00:07:56,099 --> 00:08:00,080
having it in open Voiceover IP call

199
00:08:00,080 --> 00:08:03,060
and uh well

200
00:08:03,060 --> 00:08:04,979
it turns out that there are interesting

201
00:08:04,979 --> 00:08:06,360
things to observe

202
00:08:06,360 --> 00:08:10,080
because if we recall a cdsa the

203
00:08:10,080 --> 00:08:12,180
interesting part here is the uh the

204
00:08:12,180 --> 00:08:15,060
signing algorithm and in designing

205
00:08:15,060 --> 00:08:17,160
algorithm there is a key point where the

206
00:08:17,160 --> 00:08:19,800
heavy computation is done and that is an

207
00:08:19,800 --> 00:08:21,660
elliptic curve scalar by Point

208
00:08:21,660 --> 00:08:24,319
multiplication

209
00:08:24,479 --> 00:08:27,960
um of uh some group generator by a

210
00:08:27,960 --> 00:08:31,020
secret non-skay as it happens this K

211
00:08:31,020 --> 00:08:33,839
really is secret if it leaks this secret

212
00:08:33,839 --> 00:08:36,919
key can be deduced

213
00:08:37,620 --> 00:08:39,120
now

214
00:08:39,120 --> 00:08:40,140
um

215
00:08:40,140 --> 00:08:42,059
in the particular implementation of libg

216
00:08:42,059 --> 00:08:45,959
Crypt it happened it so happens that the

217
00:08:45,959 --> 00:08:47,760
multiplication takes variable amount of

218
00:08:47,760 --> 00:08:48,860
time

219
00:08:48,860 --> 00:08:52,440
it's uh scanning the nonce for the

220
00:08:52,440 --> 00:08:54,420
leading zeros and skips those for

221
00:08:54,420 --> 00:08:57,420
efficiencies sake and that means that a

222
00:08:57,420 --> 00:08:59,040
little bit of information about the

223
00:08:59,040 --> 00:09:01,620
execution time is leaking through a

224
00:09:01,620 --> 00:09:03,959
timing side Channel

225
00:09:03,959 --> 00:09:08,160
now we we can observe the difference

226
00:09:08,160 --> 00:09:10,440
between different types of computation

227
00:09:10,440 --> 00:09:13,320
as gleaned before and that gives us hope

228
00:09:13,320 --> 00:09:16,500
that we can indeed use this timing side

229
00:09:16,500 --> 00:09:18,839
channel to deduce the number of leading

230
00:09:18,839 --> 00:09:21,779
zeros in the nodes

231
00:09:21,779 --> 00:09:25,080
as it as it happens you can indeed do

232
00:09:25,080 --> 00:09:27,779
that sort of very crudely just by yes

233
00:09:27,779 --> 00:09:30,420
simple signal processing uh looking at

234
00:09:30,420 --> 00:09:33,360
the signal after some filters and AMD

235
00:09:33,360 --> 00:09:36,240
modulation and then um there is a point

236
00:09:36,240 --> 00:09:38,399
in the resulting demodulated signal or

237
00:09:38,399 --> 00:09:40,740
you can see that there is a valley of

238
00:09:40,740 --> 00:09:41,839
less energy

239
00:09:41,839 --> 00:09:45,660
corresponding to the signing operation

240
00:09:45,660 --> 00:09:48,300
but it's extremely noisy so we need some

241
00:09:48,300 --> 00:09:50,339
more techniques to repeat and amplify

242
00:09:50,339 --> 00:09:53,459
reject outliers and at the end of the

243
00:09:53,459 --> 00:09:55,740
day we can indeed identify the cases

244
00:09:55,740 --> 00:09:57,600
where the nonce has many zeros and that

245
00:09:57,600 --> 00:10:00,300
as it turns out sufficient suffices for

246
00:10:00,300 --> 00:10:02,580
key extraction we can't recover the

247
00:10:02,580 --> 00:10:04,380
whole loans through this channel but

248
00:10:04,380 --> 00:10:06,540
having many examples of signatures whose

249
00:10:06,540 --> 00:10:09,360
nonsense have many leading zeros through

250
00:10:09,360 --> 00:10:10,860
a

251
00:10:10,860 --> 00:10:13,680
um a lattice attacks in particular the

252
00:10:13,680 --> 00:10:15,120
improved boundaries of the Albrecht and

253
00:10:15,120 --> 00:10:17,880
Henninger suffice us to extract the full

254
00:10:17,880 --> 00:10:20,820
key so real machine real software real

255
00:10:20,820 --> 00:10:23,399
cryptographic algorithm and the attack

256
00:10:23,399 --> 00:10:24,779
was just

257
00:10:24,779 --> 00:10:26,940
talking to someone whose computer is

258
00:10:26,940 --> 00:10:28,500
running that algorithm that's pretty

259
00:10:28,500 --> 00:10:30,800
scary

260
00:10:33,240 --> 00:10:36,839
now even scarier is an application to

261
00:10:36,839 --> 00:10:38,220
Counter-Strike

262
00:10:38,220 --> 00:10:40,440
now for those of you who are either too

263
00:10:40,440 --> 00:10:42,839
old or too young to know Counter-Strike

264
00:10:42,839 --> 00:10:45,180
that's a very popular first person

265
00:10:45,180 --> 00:10:48,899
shooter game uh it's uh the most popular

266
00:10:48,899 --> 00:10:52,140
in its class ever there are tournaments

267
00:10:52,140 --> 00:10:54,779
with large sums of money it's a serious

268
00:10:54,779 --> 00:10:56,279
thing

269
00:10:56,279 --> 00:10:59,579
um and it hinges on the fact that when

270
00:10:59,579 --> 00:11:01,620
you roam the the world you don't know

271
00:11:01,620 --> 00:11:03,360
where your opponent is so at any point

272
00:11:03,360 --> 00:11:07,339
it could Ambush you or backstab you

273
00:11:07,500 --> 00:11:09,839
um Matt of course you're going to win

274
00:11:09,839 --> 00:11:13,079
and then you you need to uh uh express

275
00:11:13,079 --> 00:11:15,600
your Glee uh at their expense and that

276
00:11:15,600 --> 00:11:18,000
means having an open Voiceover IP

277
00:11:18,000 --> 00:11:20,519
connection right so there's a voice

278
00:11:20,519 --> 00:11:23,820
connection through which you can

279
00:11:23,820 --> 00:11:26,579
um as you can by now guess record the

280
00:11:26,579 --> 00:11:30,300
noises made by the electronics of your

281
00:11:30,300 --> 00:11:31,579
counterparty

282
00:11:31,579 --> 00:11:35,399
and um deduce what they're up to

283
00:11:35,399 --> 00:11:37,980
as it turns out 3D rendering is a fairly

284
00:11:37,980 --> 00:11:40,620
computationally expensive process and

285
00:11:40,620 --> 00:11:42,899
the complexity of 3D rendering depends

286
00:11:42,899 --> 00:11:46,380
on what your opponent is looking at

287
00:11:46,380 --> 00:11:49,920
they're really frustum and if you are

288
00:11:49,920 --> 00:11:51,779
moving in and out of that first tube you

289
00:11:51,779 --> 00:11:53,700
can modulate that signal and bottom line

290
00:11:53,700 --> 00:11:56,519
you can learn where they're looking and

291
00:11:56,519 --> 00:11:58,019
then go around them and stab them in the

292
00:11:58,019 --> 00:11:59,640
back

293
00:11:59,640 --> 00:12:02,040
um I'll refer you to the full paper for

294
00:12:02,040 --> 00:12:04,079
the details uh but

295
00:12:04,079 --> 00:12:05,820
um I guess it's one way to monetize

296
00:12:05,820 --> 00:12:07,079
research you can enlist to those

297
00:12:07,079 --> 00:12:08,880
competitions and try to make some money

298
00:12:08,880 --> 00:12:11,360
out of that

299
00:12:12,120 --> 00:12:13,740
so

300
00:12:13,740 --> 00:12:16,880
um going back to some older Works uh

301
00:12:16,880 --> 00:12:20,579
mine go through uh voice over IP maybe

302
00:12:20,579 --> 00:12:22,620
we can just directly measure the the

303
00:12:22,620 --> 00:12:24,839
acoustic signals through microphones

304
00:12:24,839 --> 00:12:28,140
so you can uh just place your cell phone

305
00:12:28,140 --> 00:12:30,000
next to someone computer and record the

306
00:12:30,000 --> 00:12:32,279
signals or you can even do that at large

307
00:12:32,279 --> 00:12:34,740
distances uh this is 10 meters away

308
00:12:34,740 --> 00:12:36,980
using a parabolic dish

309
00:12:36,980 --> 00:12:39,540
using the laser microphones there are

310
00:12:39,540 --> 00:12:41,880
results that are even more striking and

311
00:12:41,880 --> 00:12:43,380
all of these things boil down to the

312
00:12:43,380 --> 00:12:45,180
same point our computers leak

313
00:12:45,180 --> 00:12:47,459
information inadvertent ways so in this

314
00:12:47,459 --> 00:12:49,079
case the acoustic and electromagnetic

315
00:12:49,079 --> 00:12:52,019
channels and models that don't take this

316
00:12:52,019 --> 00:12:53,160
into account

317
00:12:53,160 --> 00:12:55,019
will give us a false sense of security

318
00:12:55,019 --> 00:12:57,480
as is the case for many of the leading

319
00:12:57,480 --> 00:12:59,880
algorithms and uh that have been struck

320
00:12:59,880 --> 00:13:02,040
over over by various attacks in buyers

321
00:13:02,040 --> 00:13:04,680
supposedly secure implementations

322
00:13:04,680 --> 00:13:07,399
yes

323
00:13:13,139 --> 00:13:15,180
so the question was does it require an

324
00:13:15,180 --> 00:13:17,760
app that conveys the voice so in the

325
00:13:17,760 --> 00:13:20,459
first few examples I gave that requires

326
00:13:20,459 --> 00:13:21,779
some kind of

327
00:13:21,779 --> 00:13:25,200
um a voice over IP app

328
00:13:25,200 --> 00:13:25,980
um

329
00:13:25,980 --> 00:13:28,260
in principle it could be done even if

330
00:13:28,260 --> 00:13:31,200
your cell phone is near the computer and

331
00:13:31,200 --> 00:13:34,260
recording that is a lower signal quality

332
00:13:34,260 --> 00:13:36,260
so we haven't looked at that very deeply

333
00:13:36,260 --> 00:13:39,060
this last thing I showed that this does

334
00:13:39,060 --> 00:13:42,000
not require an app this is just

335
00:13:42,000 --> 00:13:45,000
having someone in this case the uh

336
00:13:45,000 --> 00:13:46,800
computer at the end of the classroom

337
00:13:46,800 --> 00:13:49,079
doing some RSA encryption

338
00:13:49,079 --> 00:13:51,360
the attacker is here with this parabolic

339
00:13:51,360 --> 00:13:52,200
dish

340
00:13:52,200 --> 00:13:54,899
in the amplifier and subsequent analysis

341
00:13:54,899 --> 00:13:56,579
uh and they're just recording the noise

342
00:13:56,579 --> 00:13:58,380
from across the classroom and recovering

343
00:13:58,380 --> 00:14:00,680
the key

344
00:14:05,519 --> 00:14:08,160
correct

345
00:14:08,160 --> 00:14:11,040
you might be muted though

346
00:14:11,040 --> 00:14:13,740
so I mentioned electromagnetic radiation

347
00:14:13,740 --> 00:14:16,440
so this is a result I'm very proud of

348
00:14:16,440 --> 00:14:19,260
because of the app name uh

349
00:14:19,260 --> 00:14:22,440
well we reconstructed the pita portable

350
00:14:22,440 --> 00:14:24,779
instrument for Trace analysis uh which

351
00:14:24,779 --> 00:14:27,660
is a piece of package Electronics inside

352
00:14:27,660 --> 00:14:31,440
pita bread and if you place that Pita

353
00:14:31,440 --> 00:14:33,839
next to someone's laptop as it happens

354
00:14:33,839 --> 00:14:37,079
that blue thing is uh it's an antenna

355
00:14:37,079 --> 00:14:38,760
and some of the other things are

356
00:14:38,760 --> 00:14:42,180
amplifiers filter digitizers and uh and

357
00:14:42,180 --> 00:14:44,399
the small repurposed video streamer

358
00:14:44,399 --> 00:14:45,899
running Linux that does the signal

359
00:14:45,899 --> 00:14:48,360
analysis so you can place that next to

360
00:14:48,360 --> 00:14:50,579
someone's computer running a vulnerable

361
00:14:50,579 --> 00:14:53,220
version of the software and extract

362
00:14:53,220 --> 00:14:55,760
their keys

363
00:14:56,720 --> 00:14:58,560
so

364
00:14:58,560 --> 00:15:01,800
um what else let's let's pause here to

365
00:15:01,800 --> 00:15:04,500
assist uh things are scary

366
00:15:04,500 --> 00:15:07,560
right we uh we saw some acoustic attacks

367
00:15:07,560 --> 00:15:10,079
in electromagnetics uh of course there

368
00:15:10,079 --> 00:15:11,760
are the classic power analysis attacks

369
00:15:11,760 --> 00:15:12,899
where you just measure the power

370
00:15:12,899 --> 00:15:15,180
consumption of someone's smart card or

371
00:15:15,180 --> 00:15:17,820
computer or whatever the device may be

372
00:15:17,820 --> 00:15:19,620
then there are more invasive attacks

373
00:15:19,620 --> 00:15:22,740
where you stick probes and measure wires

374
00:15:22,740 --> 00:15:24,060
directly

375
00:15:24,060 --> 00:15:26,160
and there's the whole huge class of

376
00:15:26,160 --> 00:15:28,199
architectural and microarchitectural

377
00:15:28,199 --> 00:15:31,199
attacks where you exploit things like

378
00:15:31,199 --> 00:15:34,139
contention for shared memory resources

379
00:15:34,139 --> 00:15:36,660
one process is accessing memory thereby

380
00:15:36,660 --> 00:15:38,639
using up some units some resources

381
00:15:38,639 --> 00:15:41,100
slowing down the other the other is you

382
00:15:41,100 --> 00:15:43,260
the attacker so you can learn when the

383
00:15:43,260 --> 00:15:46,199
first one is doing its thing and that

384
00:15:46,199 --> 00:15:47,639
has been shown over and over to be

385
00:15:47,639 --> 00:15:50,040
exploitable uh this kind of cross talk

386
00:15:50,040 --> 00:15:51,740
between things on the same computer

387
00:15:51,740 --> 00:15:54,660
leaks information and I won't have time

388
00:15:54,660 --> 00:15:56,699
to go into the many fascinating

389
00:15:56,699 --> 00:15:59,040
techniques for exploiting it but

390
00:15:59,040 --> 00:16:01,440
everything starting from

391
00:16:01,440 --> 00:16:02,480
um

392
00:16:02,480 --> 00:16:05,220
dedicated supposedly secure cryptography

393
00:16:05,220 --> 00:16:08,660
to uh systems level

394
00:16:08,660 --> 00:16:11,699
mechanisms like sgx has been repeatedly

395
00:16:11,699 --> 00:16:14,660
broken by these kind of mechanisms

396
00:16:14,660 --> 00:16:18,300
and last but not least there are attacks

397
00:16:18,300 --> 00:16:20,519
not merely on secrecy but also on

398
00:16:20,519 --> 00:16:21,660
integrity

399
00:16:21,660 --> 00:16:24,060
now of course secrecy of often they

400
00:16:24,060 --> 00:16:25,980
reflects indirectly on Integrity because

401
00:16:25,980 --> 00:16:27,899
if someone steals your authentication

402
00:16:27,899 --> 00:16:29,639
keys or your passwords there goes your

403
00:16:29,639 --> 00:16:30,720
integrity

404
00:16:30,720 --> 00:16:32,760
but also there are low level attacks

405
00:16:32,760 --> 00:16:35,160
like row Hammer by which certain memory

406
00:16:35,160 --> 00:16:37,380
access patterns can cause corruption of

407
00:16:37,380 --> 00:16:39,240
memory for other processes running on

408
00:16:39,240 --> 00:16:40,320
the same machine

409
00:16:40,320 --> 00:16:42,180
and you can even do that from JavaScript

410
00:16:42,180 --> 00:16:44,639
so you can you can go to a website that

411
00:16:44,639 --> 00:16:46,079
has the right JavaScript code which

412
00:16:46,079 --> 00:16:47,639
doesn't have any special privileges but

413
00:16:47,639 --> 00:16:49,800
it can access memory and next thing you

414
00:16:49,800 --> 00:16:51,000
know your operating system is

415
00:16:51,000 --> 00:16:54,620
compromised it's really bad stuff

416
00:16:55,860 --> 00:16:57,860
um

417
00:16:58,079 --> 00:17:00,620
questions

418
00:17:01,920 --> 00:17:03,420
all right so let's talk a little bit

419
00:17:03,420 --> 00:17:05,040
about side Channel resilience and what

420
00:17:05,040 --> 00:17:07,859
we would do about all of this

421
00:17:07,859 --> 00:17:10,799
so clearly the root of the problem here

422
00:17:10,799 --> 00:17:13,439
was that our naive models the one we

423
00:17:13,439 --> 00:17:15,240
learn and teach the intro to computer

424
00:17:15,240 --> 00:17:17,579
science are blatant lies

425
00:17:17,579 --> 00:17:19,859
right the the model of we have a nice

426
00:17:19,859 --> 00:17:21,900
machine it has input processing and

427
00:17:21,900 --> 00:17:24,839
output or a turing machine or Boolean

428
00:17:24,839 --> 00:17:25,799
circuit whatever your favorite

429
00:17:25,799 --> 00:17:27,959
abstraction is do not reflect any of

430
00:17:27,959 --> 00:17:29,280
these and so in a world where these

431
00:17:29,280 --> 00:17:31,620
things exist

432
00:17:31,620 --> 00:17:34,020
um the the secrecy guarantees or

433
00:17:34,020 --> 00:17:36,059
Integrity guarantees are all off and we

434
00:17:36,059 --> 00:17:37,679
have to do something about it

435
00:17:37,679 --> 00:17:40,500
and uh I think the the uh the first

436
00:17:40,500 --> 00:17:43,500
paper that uh you tackle this head zone

437
00:17:43,500 --> 00:17:46,140
is the Isha is seminal paper from O3

438
00:17:46,140 --> 00:17:47,940
which

439
00:17:47,940 --> 00:17:50,039
um gave us the following framework it

440
00:17:50,039 --> 00:17:52,380
says uh let's start with any computation

441
00:17:52,380 --> 00:17:55,260
model does a Boolean circuit and of

442
00:17:55,260 --> 00:17:57,179
course it could be subject to various

443
00:17:57,179 --> 00:17:59,340
bad attacks

444
00:17:59,340 --> 00:18:01,020
um so we're going to fix it we're going

445
00:18:01,020 --> 00:18:02,940
to plug it into a circuit transformation

446
00:18:02,940 --> 00:18:06,000
that would give us a new circuit that is

447
00:18:06,000 --> 00:18:11,000
resilient against some class of attacks

448
00:18:12,120 --> 00:18:15,059
um so the idea is that

449
00:18:15,059 --> 00:18:18,600
the adversary would be allowed to pick

450
00:18:18,600 --> 00:18:20,480
the leakage

451
00:18:20,480 --> 00:18:23,520
function from some class

452
00:18:23,520 --> 00:18:26,400
the leakage function operates on the

453
00:18:26,400 --> 00:18:28,919
wires of the circuit and uh tells the

454
00:18:28,919 --> 00:18:31,320
adversary the result that means for

455
00:18:31,320 --> 00:18:33,900
example in our case this would be some

456
00:18:33,900 --> 00:18:35,880
spectrogram representing the noise while

457
00:18:35,880 --> 00:18:38,240
the circuit is evaluated

458
00:18:38,240 --> 00:18:42,059
and the Transformer is supposed to build

459
00:18:42,059 --> 00:18:43,679
this transform circuit on the right hand

460
00:18:43,679 --> 00:18:46,320
side such that the adversary doesn't

461
00:18:46,320 --> 00:18:50,760
really learn anything from the

462
00:18:50,760 --> 00:18:51,980
um from

463
00:18:51,980 --> 00:18:54,960
the that leakage from their augmented

464
00:18:54,960 --> 00:18:57,660
view taking into account that leakage

465
00:18:57,660 --> 00:19:00,299
what does it doesn't learn anything mean

466
00:19:00,299 --> 00:19:03,000
well the simulation Paradigm uh there is

467
00:19:03,000 --> 00:19:05,160
a simulator that interacts only with the

468
00:19:05,160 --> 00:19:07,500
designated nominal circuit and just

469
00:19:07,500 --> 00:19:11,400
makes up the leakage function and uh was

470
00:19:11,400 --> 00:19:13,200
precisely the output of the leakage

471
00:19:13,200 --> 00:19:14,100
function

472
00:19:14,100 --> 00:19:16,440
and the adversary can't even tell

473
00:19:16,440 --> 00:19:18,660
whether they are looking at the real

474
00:19:18,660 --> 00:19:20,220
world give you the real leakage function

475
00:19:20,220 --> 00:19:22,320
or the simulated one given by the

476
00:19:22,320 --> 00:19:23,460
adversary

477
00:19:23,460 --> 00:19:26,460
I'm skipping many details here but this

478
00:19:26,460 --> 00:19:28,860
is the spirit of things

479
00:19:28,860 --> 00:19:30,419
um and that that paper came with a

480
00:19:30,419 --> 00:19:32,460
construction for the specific case of uh

481
00:19:32,460 --> 00:19:36,240
t wire leakage uh also no probing liquid

482
00:19:36,240 --> 00:19:37,559
which is basically the case where the

483
00:19:37,559 --> 00:19:40,200
adversary can learn up to T wires out of

484
00:19:40,200 --> 00:19:41,520
the circuit

485
00:19:41,520 --> 00:19:43,260
the construction is very elegant it

486
00:19:43,260 --> 00:19:45,059
basically does secret sharing of every

487
00:19:45,059 --> 00:19:47,460
logical wire into many physical wires

488
00:19:47,460 --> 00:19:51,299
such that if you only learn uh up to

489
00:19:51,299 --> 00:19:54,539
t-shares then you cannot decode now for

490
00:19:54,539 --> 00:19:56,460
a single wire this is Trivial right you

491
00:19:56,460 --> 00:19:59,340
just provide sufficiently sufficiently

492
00:19:59,340 --> 00:20:02,400
many shares K plus one would do for a

493
00:20:02,400 --> 00:20:05,100
additive secret sharing but

494
00:20:05,100 --> 00:20:06,660
um where things become interesting is

495
00:20:06,660 --> 00:20:08,820
that you need to compute you have two

496
00:20:08,820 --> 00:20:11,179
wires and you need to compute their xor

497
00:20:11,179 --> 00:20:14,400
or their end is more interesting so you

498
00:20:14,400 --> 00:20:16,500
know you need some kind of gadgets that

499
00:20:16,500 --> 00:20:19,260
somehow evolves the wires in a way that

500
00:20:19,260 --> 00:20:22,260
no choice of T wires among the whole

501
00:20:22,260 --> 00:20:24,179
gadgets not just individual logical

502
00:20:24,179 --> 00:20:25,799
wires

503
00:20:25,799 --> 00:20:26,520
um

504
00:20:26,520 --> 00:20:30,059
it leaks anything that is not simulated

505
00:20:30,059 --> 00:20:33,059
so it's it's very elegant in this the

506
00:20:33,059 --> 00:20:35,039
stateless cases fully specified here

507
00:20:35,039 --> 00:20:36,240
basically

508
00:20:36,240 --> 00:20:38,580
um and the security proof is also very

509
00:20:38,580 --> 00:20:40,500
elegant and iterative the idea is that

510
00:20:40,500 --> 00:20:43,500
when the simulator runs uh and whenever

511
00:20:43,500 --> 00:20:46,500
they ask for a value of the wire in the

512
00:20:46,500 --> 00:20:50,039
transformed circuit if this is uh if the

513
00:20:50,039 --> 00:20:52,679
value of this wire is already implied by

514
00:20:52,679 --> 00:20:55,860
linear algebra on the wires previously

515
00:20:55,860 --> 00:20:59,340
queried then the simulator answers with

516
00:20:59,340 --> 00:21:02,220
that inevitable result and otherwise it

517
00:21:02,220 --> 00:21:04,380
picks at random and this all works it

518
00:21:04,380 --> 00:21:05,820
gives the right distribution is

519
00:21:05,820 --> 00:21:08,179
indistinguishable amazing

520
00:21:08,179 --> 00:21:11,700
so that sets the uh create a huge

521
00:21:11,700 --> 00:21:15,740
cottage industry of other kind of uh

522
00:21:15,740 --> 00:21:18,059
leakage models that reflect different

523
00:21:18,059 --> 00:21:20,280
scenarios and extend the models in

524
00:21:20,280 --> 00:21:22,919
various ways uh for example there is the

525
00:21:22,919 --> 00:21:25,140
mikali raisin only computation leaks

526
00:21:25,140 --> 00:21:27,360
information uh there is the Hamming

527
00:21:27,360 --> 00:21:30,020
weight model used by predictionaries

528
00:21:30,020 --> 00:21:32,580
separable leakage bounded leakage and

529
00:21:32,580 --> 00:21:34,679
many others I will not have time for any

530
00:21:34,679 --> 00:21:35,880
kind anything approaching a

531
00:21:35,880 --> 00:21:38,039
comprehensive survey but I do want to

532
00:21:38,039 --> 00:21:39,960
point out gold Reich and ostrowsky's

533
00:21:39,960 --> 00:21:41,820
work on oblivious run which in

534
00:21:41,820 --> 00:21:43,020
retrospect

535
00:21:43,020 --> 00:21:45,600
is an amazing leakage resilience

536
00:21:45,600 --> 00:21:47,460
mechanism against

537
00:21:47,460 --> 00:21:51,539
um the leakage of memory addresses

538
00:21:51,539 --> 00:21:53,100
and remember the leakage of memory

539
00:21:53,100 --> 00:21:55,440
addresses is actually exactly what

540
00:21:55,440 --> 00:21:56,880
happens in many of the micro

541
00:21:56,880 --> 00:21:59,159
architectural attacks I mentioned where

542
00:21:59,159 --> 00:22:01,740
crosstalk in accessing memory reveals

543
00:22:01,740 --> 00:22:03,740
what memory is accessed

544
00:22:03,740 --> 00:22:08,220
so uh as as in this case too the

545
00:22:08,220 --> 00:22:10,620
theorists uh had the Grand Vision that

546
00:22:10,620 --> 00:22:12,960
the practitioners took many years to

547
00:22:12,960 --> 00:22:13,919
realize

548
00:22:13,919 --> 00:22:16,760
um of course at the time uh

549
00:22:16,760 --> 00:22:19,380
when we uh published a paper on cash

550
00:22:19,380 --> 00:22:22,620
attacks and AES we referenced gold rack

551
00:22:22,620 --> 00:22:23,940
end ostrovsky and said that

552
00:22:23,940 --> 00:22:26,580
unfortunately it's not practical and too

553
00:22:26,580 --> 00:22:28,919
complicated uh and many people in this

554
00:22:28,919 --> 00:22:31,380
room have been fixing that so uh I think

555
00:22:31,380 --> 00:22:33,179
we're doing much better also on the

556
00:22:33,179 --> 00:22:35,880
constants of applying oblivious Ram to

557
00:22:35,880 --> 00:22:38,340
these mitigations

558
00:22:38,340 --> 00:22:41,159
and I also want to call out another uh

559
00:22:41,159 --> 00:22:44,460
development I found really uh satisfying

560
00:22:44,460 --> 00:22:46,440
intellectually

561
00:22:46,440 --> 00:22:49,760
um one of the criticisms on

562
00:22:49,760 --> 00:22:53,820
in on the original isw a probing model

563
00:22:53,820 --> 00:22:56,159
was that in reality the leakage is not

564
00:22:56,159 --> 00:22:58,740
really local it's not learning a few

565
00:22:58,740 --> 00:23:00,900
wires but often the makeage is learning

566
00:23:00,900 --> 00:23:02,460
some aggregate functions of all the

567
00:23:02,460 --> 00:23:04,860
wires in the circuits think of that

568
00:23:04,860 --> 00:23:07,440
electron electromagnetic measurement or

569
00:23:07,440 --> 00:23:09,120
the acoustic measurement from before it

570
00:23:09,120 --> 00:23:11,039
wasn't focusing on the specific between

571
00:23:11,039 --> 00:23:13,140
the CPU it was some weird aggregate

572
00:23:13,140 --> 00:23:14,159
function

573
00:23:14,159 --> 00:23:15,960
so

574
00:23:15,960 --> 00:23:18,000
how can we protect against those if the

575
00:23:18,000 --> 00:23:20,520
modem doesn't even capture them and it

576
00:23:20,520 --> 00:23:22,080
would be nice to capture some kind of

577
00:23:22,080 --> 00:23:24,299
notion of leakage that they can learn a

578
00:23:24,299 --> 00:23:27,360
lot of globally but it's not so smart

579
00:23:27,360 --> 00:23:29,460
that it can learn everything

580
00:23:29,460 --> 00:23:30,900
and

581
00:23:30,900 --> 00:23:35,039
um something like low complexity classes

582
00:23:35,039 --> 00:23:38,039
say ac0 seems intuitive like a good

583
00:23:38,039 --> 00:23:39,360
match

584
00:23:39,360 --> 00:23:42,299
so um it turns out that you can extend

585
00:23:42,299 --> 00:23:46,380
uh you can follow the isw model and they

586
00:23:46,380 --> 00:23:49,140
achieve a construction that is resilient

587
00:23:49,140 --> 00:23:52,559
against ac0 probably and curiously the

588
00:23:52,559 --> 00:23:54,480
way it works is by relying good circuit

589
00:23:54,480 --> 00:23:57,120
complexity lower bounds we know that

590
00:23:57,120 --> 00:23:59,820
Computing parity is hard for ac0 so if

591
00:23:59,820 --> 00:24:02,340
we use parity as an encoding scheme

592
00:24:02,340 --> 00:24:05,940
an adversary that can only observe ac0

593
00:24:05,940 --> 00:24:08,520
leakages from the circuit

594
00:24:08,520 --> 00:24:11,039
that is leakage which is an ac0 function

595
00:24:11,039 --> 00:24:13,620
applied to the circuit

596
00:24:13,620 --> 00:24:16,200
cannot decode

597
00:24:16,200 --> 00:24:18,659
now again this is the intuition for a

598
00:24:18,659 --> 00:24:20,340
single wire if you're going to compute

599
00:24:20,340 --> 00:24:22,860
in many Gates or many wires you need to

600
00:24:22,860 --> 00:24:25,200
make sure that there's no way to do some

601
00:24:25,200 --> 00:24:28,440
Global ac0 function on everything and

602
00:24:28,440 --> 00:24:30,600
try to decode from that something you

603
00:24:30,600 --> 00:24:32,039
also have additional information from

604
00:24:32,039 --> 00:24:33,960
the inputs and outputs it turns out you

605
00:24:33,960 --> 00:24:35,700
can do it but originally we could only

606
00:24:35,700 --> 00:24:38,100
do it using trusted Hardware components

607
00:24:38,100 --> 00:24:39,840
and then there was some additional

608
00:24:39,840 --> 00:24:42,360
follow-up work there was a a nice walk

609
00:24:42,360 --> 00:24:45,539
by uh Ruth Bloom that showed how they

610
00:24:45,539 --> 00:24:48,240
trusted com by saying trusted I mean uh

611
00:24:48,240 --> 00:24:50,340
leak free but very small components

612
00:24:50,340 --> 00:24:53,039
inverse Bloom eliminated that but in

613
00:24:53,039 --> 00:24:56,960
favor of uh of an assumption IPP and uh

614
00:24:56,960 --> 00:25:00,179
last year it turns out that actually the

615
00:25:00,179 --> 00:25:03,360
original ISD isw construction was Secure

616
00:25:03,360 --> 00:25:05,700
against ac0 all along he just needed the

617
00:25:05,700 --> 00:25:07,220
right analysis

618
00:25:07,220 --> 00:25:11,100
so open problem resolved and uh the next

619
00:25:11,100 --> 00:25:14,700
one up is what goes behind Beyond ac0 uh

620
00:25:14,700 --> 00:25:15,960
the original paper gave a general

621
00:25:15,960 --> 00:25:19,200
framework with h0 as an example can we

622
00:25:19,200 --> 00:25:20,880
stretch Beyond this year also without

623
00:25:20,880 --> 00:25:24,659
the the uh the minimal non-dicky

624
00:25:24,659 --> 00:25:26,779
Hardware

625
00:25:27,840 --> 00:25:31,039
um question so far

626
00:25:32,460 --> 00:25:34,799
all right so moving on let me talk about

627
00:25:34,799 --> 00:25:37,919
something completely different

628
00:25:37,919 --> 00:25:40,260
biochemistry

629
00:25:40,260 --> 00:25:41,580
so

630
00:25:41,580 --> 00:25:44,279
um I think biochemistry is great I'm

631
00:25:44,279 --> 00:25:48,659
doing it all the time and um

632
00:25:48,659 --> 00:25:49,440
um

633
00:25:49,440 --> 00:25:53,520
just to recall from your biology class

634
00:25:53,520 --> 00:25:58,500
uh the the basics of life is uh

635
00:25:58,500 --> 00:26:01,740
DNA RNA in proteins right we have DNA

636
00:26:01,740 --> 00:26:04,500
encoding the information in a robust way

637
00:26:04,500 --> 00:26:08,279
and the proteins that are the active

638
00:26:08,279 --> 00:26:11,400
embodiment of that information that are

639
00:26:11,400 --> 00:26:14,340
interact with the physical world in

640
00:26:14,340 --> 00:26:16,500
various interesting ways and there's RNA

641
00:26:16,500 --> 00:26:18,480
that mediates the two

642
00:26:18,480 --> 00:26:21,740
and um

643
00:26:23,400 --> 00:26:25,740
the beauty of it is that DNA can really

644
00:26:25,740 --> 00:26:27,360
be thought about as a digital message

645
00:26:27,360 --> 00:26:29,820
and that's a key to many of the

646
00:26:29,820 --> 00:26:32,299
processes underlying life in evolution

647
00:26:32,299 --> 00:26:34,940
but it's also a way to store information

648
00:26:34,940 --> 00:26:38,700
you can go back from DNA into the

649
00:26:38,700 --> 00:26:40,380
digital representation through a process

650
00:26:40,380 --> 00:26:42,299
called sequencing which is nowadays very

651
00:26:42,299 --> 00:26:43,620
inexpensive

652
00:26:43,620 --> 00:26:45,900
uh the human genome back in the day was

653
00:26:45,900 --> 00:26:47,460
a huge Endeavor now you can buy a

654
00:26:47,460 --> 00:26:48,960
machine that does it

655
00:26:48,960 --> 00:26:50,840
um keep it in your office on your desk

656
00:26:50,840 --> 00:26:54,000
and uh you can also easily uh replicate

657
00:26:54,000 --> 00:26:56,580
the DNA oh I see someone doing it right

658
00:26:56,580 --> 00:27:00,299
now uh so uh that's that's a great way

659
00:27:00,299 --> 00:27:01,679
to store information right you can make

660
00:27:01,679 --> 00:27:03,779
copies you can read it out

661
00:27:03,779 --> 00:27:06,539
um and therefore DNA storage

662
00:27:06,539 --> 00:27:10,140
um is uh inactive field of research and

663
00:27:10,140 --> 00:27:12,380
has various applications

664
00:27:12,380 --> 00:27:16,500
but what about proteins proteins are

665
00:27:16,500 --> 00:27:20,820
weird and messy uh they they don't have

666
00:27:20,820 --> 00:27:24,480
a system a small DNA of pretty much

667
00:27:24,480 --> 00:27:26,580
passive molecules rather It's a larger

668
00:27:26,580 --> 00:27:28,860
DNA or very active molecules then tend

669
00:27:28,860 --> 00:27:30,419
to stick to each other and do weird

670
00:27:30,419 --> 00:27:33,419
stuff uh this particular example seems

671
00:27:33,419 --> 00:27:36,360
to be very popular in our days

672
00:27:36,360 --> 00:27:39,419
um and uh what would you ever do with

673
00:27:39,419 --> 00:27:42,419
proteins they're so hard to work with

674
00:27:42,419 --> 00:27:43,020
um

675
00:27:43,020 --> 00:27:45,720
there's even an XKCD about it

676
00:27:45,720 --> 00:27:49,020
but if you don't believe XKCD then let

677
00:27:49,020 --> 00:27:51,419
me invoke uh Francis and Craig

678
00:27:51,419 --> 00:27:54,059
sorry Francis Creek

679
00:27:54,059 --> 00:27:57,720
um so in a seminal talk and follow-up

680
00:27:57,720 --> 00:27:59,700
paper in 57

681
00:27:59,700 --> 00:28:00,720
um

682
00:28:00,720 --> 00:28:04,559
a Francis Creek presented this amazing

683
00:28:04,559 --> 00:28:07,020
breakthrough in the conceptualization of

684
00:28:07,020 --> 00:28:09,260
the essence of biological systems

685
00:28:09,260 --> 00:28:12,360
through the lens of information

686
00:28:12,360 --> 00:28:15,240
and he posited that we have these three

687
00:28:15,240 --> 00:28:18,000
ingredients DNA RNA and protein and the

688
00:28:18,000 --> 00:28:21,299
information flow between them only works

689
00:28:21,299 --> 00:28:23,760
in particular ways this is called the

690
00:28:23,760 --> 00:28:26,460
central dogma of molecular biology DNA

691
00:28:26,460 --> 00:28:28,740
can be duplicated it can be transferred

692
00:28:28,740 --> 00:28:29,940
to RNA

693
00:28:29,940 --> 00:28:32,279
and you can make proteins out of that

694
00:28:32,279 --> 00:28:33,539
but

695
00:28:33,539 --> 00:28:36,000
that seminal paper explicitly conjecture

696
00:28:36,000 --> 00:28:38,100
that it never happens

697
00:28:38,100 --> 00:28:42,779
that proteins go back into DNA that is

698
00:28:42,779 --> 00:28:45,840
into a clean digital representation

699
00:28:45,840 --> 00:28:48,720
so if I first I found the uh this

700
00:28:48,720 --> 00:28:50,360
conceptualization

701
00:28:50,360 --> 00:28:53,880
1957 really striking

702
00:28:53,880 --> 00:28:56,340
um but also it's these diagrams look a

703
00:28:56,340 --> 00:28:59,178
bit familiar right

704
00:28:59,220 --> 00:29:01,500
we have something that is easy in One

705
00:29:01,500 --> 00:29:02,940
Direction and hard in the other

706
00:29:02,940 --> 00:29:04,080
direction

707
00:29:04,080 --> 00:29:06,659
now what they were doing that right

708
00:29:06,659 --> 00:29:08,640
so we have some common partners and

709
00:29:08,640 --> 00:29:10,820
there's a good reason to think that this

710
00:29:10,820 --> 00:29:13,620
hardness really is there

711
00:29:13,620 --> 00:29:17,220
um so that conjecture withstood 65 years

712
00:29:17,220 --> 00:29:20,039
of research billions of dollars of

713
00:29:20,039 --> 00:29:22,080
Biotech r d because if you could

714
00:29:22,080 --> 00:29:25,200
sequence proteins it would make uh

715
00:29:25,200 --> 00:29:27,179
finding drugs and understanding systems

716
00:29:27,179 --> 00:29:28,500
so much easier

717
00:29:28,500 --> 00:29:30,720
and in a sense it withstood billions of

718
00:29:30,720 --> 00:29:34,080
years of evolution because if evolution

719
00:29:34,080 --> 00:29:37,919
had developed a way to pinpoint the the

720
00:29:37,919 --> 00:29:40,320
sequences and reason about them it could

721
00:29:40,320 --> 00:29:44,279
evade uh Intruders much more efficiently

722
00:29:44,279 --> 00:29:47,640
and yet it hasn't so

723
00:29:47,640 --> 00:29:49,620
you might say that the evidence for

724
00:29:49,620 --> 00:29:51,600
hardness here is nearly as hard as that

725
00:29:51,600 --> 00:29:54,139
of LW

726
00:29:55,159 --> 00:29:58,380
no so there's a call of hardness what

727
00:29:58,380 --> 00:30:00,120
will we do with it

728
00:30:00,120 --> 00:30:03,240
uh let's let's dig it dig some more into

729
00:30:03,240 --> 00:30:05,640
what's exactly

730
00:30:05,640 --> 00:30:06,380
um

731
00:30:06,380 --> 00:30:08,940
is easy and hard well

732
00:30:08,940 --> 00:30:11,760
we can read proteins spot is do interact

733
00:30:11,760 --> 00:30:13,200
with the environment

734
00:30:13,200 --> 00:30:15,600
and um

735
00:30:15,600 --> 00:30:17,520
um

736
00:30:17,520 --> 00:30:21,419
they uh affect digital reality around

737
00:30:21,419 --> 00:30:24,179
them and biology biochemists managed to

738
00:30:24,179 --> 00:30:26,039
to eventually read them but the thing is

739
00:30:26,039 --> 00:30:28,980
the process for doing so is macroscopic

740
00:30:28,980 --> 00:30:31,380
and destructive you need like a whole

741
00:30:31,380 --> 00:30:34,440
milligram of these proteins and you put

742
00:30:34,440 --> 00:30:36,120
them in a mass spec which basically

743
00:30:36,120 --> 00:30:38,399
breaks it down and shoots them at a

744
00:30:38,399 --> 00:30:40,020
detector and the detector figures out

745
00:30:40,020 --> 00:30:42,539
what the energy of the fragments and

746
00:30:42,539 --> 00:30:44,940
then you take the signal together and

747
00:30:44,940 --> 00:30:47,340
try to guess what could have caused that

748
00:30:47,340 --> 00:30:50,059
distribution of of energy

749
00:30:50,059 --> 00:30:52,260
but there's nothing left of the original

750
00:30:52,260 --> 00:30:54,960
other than those fragments so there's

751
00:30:54,960 --> 00:30:56,700
kind of like a building self-destruct

752
00:30:56,700 --> 00:30:58,340
mechanism

753
00:30:58,340 --> 00:31:01,080
whenever you try to uh to read out these

754
00:31:01,080 --> 00:31:02,940
proteins

755
00:31:02,940 --> 00:31:05,640
so we have something that is uncloneable

756
00:31:05,640 --> 00:31:08,640
and self-destructing in some sense

757
00:31:08,640 --> 00:31:11,159
and there are things in cryptography

758
00:31:11,159 --> 00:31:14,279
that are like that The Primitives that

759
00:31:14,279 --> 00:31:16,500
have proven useful that are that have a

760
00:31:16,500 --> 00:31:18,720
similar uh sense to them

761
00:31:18,720 --> 00:31:21,720
uh in particular the one-time tokens of

762
00:31:21,720 --> 00:31:25,799
the gkr or one-time programs paper uh

763
00:31:25,799 --> 00:31:28,080
but basically that right the the talk is

764
00:31:28,080 --> 00:31:30,059
that encode to messages you can read one

765
00:31:30,059 --> 00:31:31,020
of them

766
00:31:31,020 --> 00:31:33,899
and then they assumed to self-destruct

767
00:31:33,899 --> 00:31:37,200
and you can of course not replicate them

768
00:31:37,200 --> 00:31:39,539
otherwise this would be trivial and if

769
00:31:39,539 --> 00:31:41,520
you only had such tokens that you can

770
00:31:41,520 --> 00:31:44,640
build uh bounded execution software

771
00:31:44,640 --> 00:31:46,740
we heard about that yesterday for some

772
00:31:46,740 --> 00:31:48,720
motivation I would repeat it but um

773
00:31:48,720 --> 00:31:50,760
there are many reasons to want to limit

774
00:31:50,760 --> 00:31:52,740
the number of times a piece of software

775
00:31:52,740 --> 00:31:55,140
well executed clearly you cannot do it

776
00:31:55,140 --> 00:31:57,659
in the standard classical model

777
00:31:57,659 --> 00:31:59,640
um but here we have a biology of course

778
00:31:59,640 --> 00:32:01,440
you could try to do it using Electronics

779
00:32:01,440 --> 00:32:03,120
in tamper-proof electronics right you

780
00:32:03,120 --> 00:32:05,039
can have a device that is very very

781
00:32:05,039 --> 00:32:07,020
secure in the recorded sense and it

782
00:32:07,020 --> 00:32:08,820
doesn't have any of the leakages that I

783
00:32:08,820 --> 00:32:12,000
showed you earlier and hope that you

784
00:32:12,000 --> 00:32:12,600
um

785
00:32:12,600 --> 00:32:15,240
that you got it right but maybe instead

786
00:32:15,240 --> 00:32:16,740
we can build it on something that is

787
00:32:16,740 --> 00:32:18,539
more fundamental like this Con these

788
00:32:18,539 --> 00:32:19,860
conjectured properties of the

789
00:32:19,860 --> 00:32:22,520
biochemistry

790
00:32:22,760 --> 00:32:26,399
so uh we need to capture what are these

791
00:32:26,399 --> 00:32:29,580
properties and uh to uh move to a higher

792
00:32:29,580 --> 00:32:31,500
extraction level abstraction level what

793
00:32:31,500 --> 00:32:34,919
we uh conjecture to obtain is what we

794
00:32:34,919 --> 00:32:38,360
call the a consumable tokens for

795
00:32:38,360 --> 00:32:42,240
parameterized by three parameters uh one

796
00:32:42,240 --> 00:32:46,860
means okay V is the number of a key and

797
00:32:46,860 --> 00:32:49,260
message pairs that they can store so I

798
00:32:49,260 --> 00:32:53,700
can take a a v pairs of a message

799
00:32:53,700 --> 00:32:57,600
protected by a key and put them in one

800
00:32:57,600 --> 00:32:59,940
test tube in the form of suitably

801
00:32:59,940 --> 00:33:02,399
constructed proteins

802
00:33:02,399 --> 00:33:06,899
and then I will say a party the honest

803
00:33:06,899 --> 00:33:09,899
party that knows a key Ki can use that

804
00:33:09,899 --> 00:33:11,580
to somehow interact with the test tube

805
00:33:11,580 --> 00:33:13,980
and retrieve the message Ami that's the

806
00:33:13,980 --> 00:33:15,840
one in the parameterization if we're

807
00:33:15,840 --> 00:33:18,120
proactive about generalizing but the

808
00:33:18,120 --> 00:33:20,519
dishonest party well we assume that the

809
00:33:20,519 --> 00:33:22,320
attacker has more power maybe they have

810
00:33:22,320 --> 00:33:24,659
the latest model of them aspect so they

811
00:33:24,659 --> 00:33:27,080
can read more messages and messages

812
00:33:27,080 --> 00:33:29,700
let's agree that would make it trivial

813
00:33:29,700 --> 00:33:31,620
but there is some Gap

814
00:33:31,620 --> 00:33:35,658
and uh that could be exploited

815
00:33:35,940 --> 00:33:38,100
um the concurrentialization of these so

816
00:33:38,100 --> 00:33:40,200
very very briefly

817
00:33:40,200 --> 00:33:42,000
um the idea is to synthesize proteins

818
00:33:42,000 --> 00:33:44,279
that have a payload part that conveys

819
00:33:44,279 --> 00:33:45,960
the message and a header that conveys

820
00:33:45,960 --> 00:33:47,220
the the key

821
00:33:47,220 --> 00:33:51,240
and then we mix them with many decoys so

822
00:33:51,240 --> 00:33:53,940
it will be hard to get a nice clean

823
00:33:53,940 --> 00:33:55,919
sample that can be put into a mass spec

824
00:33:55,919 --> 00:33:57,960
if you put a mixed sample into a mass

825
00:33:57,960 --> 00:33:59,279
spec it basically gives you nothing

826
00:33:59,279 --> 00:34:00,960
useful

827
00:34:00,960 --> 00:34:04,559
and then uh the the on this retrieval

828
00:34:04,559 --> 00:34:08,040
would uh take a given key

829
00:34:08,040 --> 00:34:10,918
could consider the corresponding segment

830
00:34:10,918 --> 00:34:12,480
of the protein

831
00:34:12,480 --> 00:34:15,780
and construct an antibody that latches

832
00:34:15,780 --> 00:34:18,359
onto that protein that is something that

833
00:34:18,359 --> 00:34:20,760
that Labs can do either the standard

834
00:34:20,760 --> 00:34:24,179
procedure so once you can latch into the

835
00:34:24,179 --> 00:34:26,418
correct proteins

836
00:34:26,418 --> 00:34:32,219
you can pull those out and and put them

837
00:34:32,219 --> 00:34:33,659
in your mass spec and read out the

838
00:34:33,659 --> 00:34:34,859
content

839
00:34:34,859 --> 00:34:38,219
but any such interaction destroys some

840
00:34:38,219 --> 00:34:39,960
of the material in the test tube and

841
00:34:39,960 --> 00:34:41,399
that is where the limit of the number of

842
00:34:41,399 --> 00:34:44,820
queries comes from

843
00:34:44,820 --> 00:34:47,580
so this is one particular biochemical

844
00:34:47,580 --> 00:34:51,119
system that invokes the conjectured

845
00:34:51,119 --> 00:34:52,918
hardness in the concrete way

846
00:34:52,918 --> 00:34:56,280
and then we can go ahead and try to

847
00:34:56,280 --> 00:34:58,080
argue about it and this is where things

848
00:34:58,080 --> 00:35:00,180
become very interesting in

849
00:35:00,180 --> 00:35:02,040
um from the perspective of models and

850
00:35:02,040 --> 00:35:03,480
formalization

851
00:35:03,480 --> 00:35:06,780
well obviously uh we want to to learn

852
00:35:06,780 --> 00:35:09,599
whether this system really has the

853
00:35:09,599 --> 00:35:11,640
properties we conjecture that's an

854
00:35:11,640 --> 00:35:13,800
empirical question but even before it

855
00:35:13,800 --> 00:35:15,540
becomes empirical there it's a modeling

856
00:35:15,540 --> 00:35:17,339
question because what exactly are the

857
00:35:17,339 --> 00:35:19,440
properties how do we capture them in a

858
00:35:19,440 --> 00:35:22,200
way that is empirically checkable

859
00:35:22,200 --> 00:35:25,320
and what we do is we introduce an

860
00:35:25,320 --> 00:35:28,099
intermediate Vector model that

861
00:35:28,099 --> 00:35:31,500
characterizes uh the conjectured

862
00:35:31,500 --> 00:35:33,240
evolution of the concentration of

863
00:35:33,240 --> 00:35:35,940
different proteins in the solution uh

864
00:35:35,940 --> 00:35:37,920
and on one hand that implies The

865
00:35:37,920 --> 00:35:40,140
Primitives we need and on the other hand

866
00:35:40,140 --> 00:35:44,240
it lets us check whether concrete

867
00:35:44,240 --> 00:35:48,060
systems behave accordingly or can be

868
00:35:48,060 --> 00:35:50,460
brought to a state that contradicts the

869
00:35:50,460 --> 00:35:53,160
conjectured model and right now we have

870
00:35:53,160 --> 00:35:57,119
our colleagues uh doing experiments in

871
00:35:57,119 --> 00:36:00,200
the wet lab uh in this period

872
00:36:00,200 --> 00:36:03,420
on the other direction uh given a simple

873
00:36:03,420 --> 00:36:06,119
primitive formally modeled how do you

874
00:36:06,119 --> 00:36:08,760
build something useful out of it like

875
00:36:08,760 --> 00:36:12,060
those bounding time executions

876
00:36:12,060 --> 00:36:15,359
and we need tools to take some weak

877
00:36:15,359 --> 00:36:17,700
constant sized properties and amplify

878
00:36:17,700 --> 00:36:21,480
them into strong functionalities the the

879
00:36:21,480 --> 00:36:24,000
of arbitrary size just like you would

880
00:36:24,000 --> 00:36:26,820
take a one-way function and build a prg

881
00:36:26,820 --> 00:36:29,940
out of it and so much more uh we want to

882
00:36:29,940 --> 00:36:32,339
play in this nice digital realm using a

883
00:36:32,339 --> 00:36:33,720
suitable abstraction

884
00:36:33,720 --> 00:36:36,300
but

885
00:36:36,300 --> 00:36:38,220
how can we play nicely in the digital

886
00:36:38,220 --> 00:36:39,960
realm taking things and composing them

887
00:36:39,960 --> 00:36:41,700
in the underlying system are messy

888
00:36:41,700 --> 00:36:45,119
proteins so the right formalism needs to

889
00:36:45,119 --> 00:36:47,220
give the right so the formally it needs

890
00:36:47,220 --> 00:36:48,300
to give the right composibility

891
00:36:48,300 --> 00:36:49,800
properties and the universal

892
00:36:49,800 --> 00:36:51,540
composibility framework saves the day

893
00:36:51,540 --> 00:36:53,900
yet again

894
00:36:54,180 --> 00:36:56,660
sorry

895
00:37:00,119 --> 00:37:01,680
right so

896
00:37:01,680 --> 00:37:02,700
um

897
00:37:02,700 --> 00:37:04,980
the question was whether proteins are

898
00:37:04,980 --> 00:37:06,560
fragile

899
00:37:06,560 --> 00:37:10,140
and it depends a lot on their

900
00:37:10,140 --> 00:37:12,839
environment but with the proper Cooling

901
00:37:12,839 --> 00:37:14,640
and the right chemical environment they

902
00:37:14,640 --> 00:37:17,299
are quite robust

903
00:37:18,740 --> 00:37:21,900
uh so briefly applications uh it

904
00:37:21,900 --> 00:37:24,780
includes a relaxed notion of the uh

905
00:37:24,780 --> 00:37:28,260
one-time programs of gkr as well as a

906
00:37:28,260 --> 00:37:30,780
notion of digital Locker or low entropy

907
00:37:30,780 --> 00:37:32,579
encryption which is basically an

908
00:37:32,579 --> 00:37:34,079
encryption scheme that makes sense even

909
00:37:34,079 --> 00:37:36,119
if the passwords have low entropy

910
00:37:36,119 --> 00:37:38,099
because you can make this Cipher to

911
00:37:38,099 --> 00:37:40,980
excel destruct after a few attempts so

912
00:37:40,980 --> 00:37:42,420
kind of like what you get when you log

913
00:37:42,420 --> 00:37:44,339
into Google you're locked out after a

914
00:37:44,339 --> 00:37:46,079
few trials by doing it in the

915
00:37:46,079 --> 00:37:47,940
non-interactive setting where you're not

916
00:37:47,940 --> 00:37:49,440
talking to any server you're just

917
00:37:49,440 --> 00:37:51,480
interacting with your local reality

918
00:37:51,480 --> 00:37:55,220
through this biochemistry

919
00:37:56,339 --> 00:37:58,079
um so I think there are many more quite

920
00:37:58,079 --> 00:37:59,160
interesting questions here about

921
00:37:59,160 --> 00:38:01,859
modeling and about uh additional

922
00:38:01,859 --> 00:38:04,380
Primitives uh but they will move on in

923
00:38:04,380 --> 00:38:07,040
the interest of time

924
00:38:11,700 --> 00:38:13,020
okay

925
00:38:13,020 --> 00:38:16,759
um again to completely switch tracks

926
00:38:16,920 --> 00:38:20,900
I want to talk about some other work

927
00:38:20,900 --> 00:38:24,119
that raises uh an interesting open

928
00:38:24,119 --> 00:38:27,260
question so I'm basically uh

929
00:38:27,260 --> 00:38:30,720
abusing my talk here to uh pose an open

930
00:38:30,720 --> 00:38:33,480
question that I really need solved

931
00:38:33,480 --> 00:38:34,680
um but it's not just me that may be

932
00:38:34,680 --> 00:38:36,960
solve because the motivating uh scenario

933
00:38:36,960 --> 00:38:39,359
is one where people are communicating

934
00:38:39,359 --> 00:38:40,859
privately and want to protect their

935
00:38:40,859 --> 00:38:42,839
privacy

936
00:38:42,839 --> 00:38:45,060
um think about a signal of WhatsApp

937
00:38:45,060 --> 00:38:47,220
think about uh privacy preserving

938
00:38:47,220 --> 00:38:50,220
blockchains like zika show Monero

939
00:38:50,220 --> 00:38:51,300
um

940
00:38:51,300 --> 00:38:52,980
we want to make sure that people can't

941
00:38:52,980 --> 00:38:56,160
eavesdrop on our messages and there is

942
00:38:56,160 --> 00:38:57,780
some system let's call it a bulletin

943
00:38:57,780 --> 00:38:59,940
board for Simplicity uh that collects

944
00:38:59,940 --> 00:39:02,640
messages uh and they're sent by a sender

945
00:39:02,640 --> 00:39:03,900
and you can make sure that they're

946
00:39:03,900 --> 00:39:06,420
encrypted and then they are retrieved by

947
00:39:06,420 --> 00:39:09,660
the by the recipient and we can make

948
00:39:09,660 --> 00:39:11,339
sure that uh

949
00:39:11,339 --> 00:39:14,660
uh the content is properly

950
00:39:14,660 --> 00:39:16,859
encrypted or randomized through

951
00:39:16,859 --> 00:39:19,079
encryption for simple messages or for or

952
00:39:19,079 --> 00:39:21,180
through zero knowledge proofs or things

953
00:39:21,180 --> 00:39:24,180
like the zcash cryptocurrency

954
00:39:24,180 --> 00:39:26,160
um but that's not enough because there

955
00:39:26,160 --> 00:39:28,560
is also traffic analysis if people see

956
00:39:28,560 --> 00:39:31,079
who is paying whom too much information

957
00:39:31,079 --> 00:39:32,400
leaks

958
00:39:32,400 --> 00:39:34,740
um the CIA director or is famously

959
00:39:34,740 --> 00:39:36,480
quoted saying we kill people based on

960
00:39:36,480 --> 00:39:37,619
metadata

961
00:39:37,619 --> 00:39:40,619
so uh

962
00:39:40,619 --> 00:39:42,119
um let's talk about protecting the

963
00:39:42,119 --> 00:39:44,460
metadata so on the sender side there's a

964
00:39:44,460 --> 00:39:46,200
variety of techniques things like

965
00:39:46,200 --> 00:39:49,800
sending your message through a mixnet

966
00:39:49,800 --> 00:39:52,560
um but on the recipients they side it's

967
00:39:52,560 --> 00:39:54,839
actually a non-trivial problem how would

968
00:39:54,839 --> 00:39:56,880
the recipient learn what messages are

969
00:39:56,880 --> 00:39:59,339
addressed to them without disclosing

970
00:39:59,339 --> 00:40:00,720
that to others

971
00:40:00,720 --> 00:40:02,220
the trivial solution is to just download

972
00:40:02,220 --> 00:40:04,200
the whole bulletin every single message

973
00:40:04,200 --> 00:40:07,200
being sent and do some kind of trial com

974
00:40:07,200 --> 00:40:09,900
a decryption uh to see what's relevant

975
00:40:09,900 --> 00:40:11,820
for them

976
00:40:11,820 --> 00:40:12,720
um

977
00:40:12,720 --> 00:40:14,520
of course that's completely impractical

978
00:40:14,520 --> 00:40:16,680
for large messages even though some

979
00:40:16,680 --> 00:40:18,480
blockchains still use it because they're

980
00:40:18,480 --> 00:40:19,800
small enough

981
00:40:19,800 --> 00:40:21,599
but the model we really want is to have

982
00:40:21,599 --> 00:40:23,820
some kind of detective service that

983
00:40:23,820 --> 00:40:27,540
serves the user and a a summarizes the

984
00:40:27,540 --> 00:40:29,640
blockchain on behalf of the user a full

985
00:40:29,640 --> 00:40:31,260
node for the blockchain ECU wheel

986
00:40:31,260 --> 00:40:32,760
serving a light client for those

987
00:40:32,760 --> 00:40:34,500
familiar

988
00:40:34,500 --> 00:40:37,440
um but we wanted to to obtain privacy

989
00:40:37,440 --> 00:40:39,960
against that detector the detector

990
00:40:39,960 --> 00:40:42,000
should know what messages are addressed

991
00:40:42,000 --> 00:40:44,839
to the given recipient

992
00:40:45,359 --> 00:40:47,880
um so there are a few reasons works on

993
00:40:47,880 --> 00:40:50,400
that in practice the zcash people use

994
00:40:50,400 --> 00:40:54,119
some kind of a constant Factor improved

995
00:40:54,119 --> 00:40:56,760
version of the uh of the naive scan just

996
00:40:56,760 --> 00:40:58,859
by discounting irrelevant information

997
00:40:58,859 --> 00:41:00,900
this paper from last year that

998
00:41:00,900 --> 00:41:03,300
introduces decoys in a way that's

999
00:41:03,300 --> 00:41:05,579
oblivious to the detector and creates

1000
00:41:05,579 --> 00:41:06,960
basically false positive making

1001
00:41:06,960 --> 00:41:09,599
deductions somewhat harder but it's very

1002
00:41:09,599 --> 00:41:11,880
not robust against active attacks or

1003
00:41:11,880 --> 00:41:13,920
statistical analysis

1004
00:41:13,920 --> 00:41:15,740
uh and there's another paper that

1005
00:41:15,740 --> 00:41:18,480
provides a private signaling schemes

1006
00:41:18,480 --> 00:41:20,760
which basically implement the detector

1007
00:41:20,760 --> 00:41:24,660
either using trusted Hardware or using a

1008
00:41:24,660 --> 00:41:26,400
multi-party committee

1009
00:41:26,400 --> 00:41:29,640
with the obvious drawbacks and the

1010
00:41:29,640 --> 00:41:31,440
question is how can we do better how can

1011
00:41:31,440 --> 00:41:33,839
we get a single server without trusted

1012
00:41:33,839 --> 00:41:36,540
Hardware while making it efficient and

1013
00:41:36,540 --> 00:41:38,280
furthermore achieving some stronger

1014
00:41:38,280 --> 00:41:39,720
security Notions that I haven't

1015
00:41:39,720 --> 00:41:41,940
described yet

1016
00:41:41,940 --> 00:41:44,760
um and as it turns out this is possible

1017
00:41:44,760 --> 00:41:47,040
um we have a recent paper where we

1018
00:41:47,040 --> 00:41:49,260
construct this using fully homomorphic

1019
00:41:49,260 --> 00:41:51,060
encryption

1020
00:41:51,060 --> 00:41:52,200
um

1021
00:41:52,200 --> 00:41:55,920
and the idea is that the recipient would

1022
00:41:55,920 --> 00:41:59,099
create an FHA key pair the fpg public

1023
00:41:59,099 --> 00:42:01,440
key would serve as a clue key using

1024
00:42:01,440 --> 00:42:04,140
which descenders would attach Clues to

1025
00:42:04,140 --> 00:42:06,780
every Trend to every message

1026
00:42:06,780 --> 00:42:09,720
and whenever Cinder wants to send a

1027
00:42:09,720 --> 00:42:11,820
message to the recipient they fetch

1028
00:42:11,820 --> 00:42:14,700
their cloaky encrypt a bunch of ones

1029
00:42:14,700 --> 00:42:16,800
under that clucky and put that on the

1030
00:42:16,800 --> 00:42:18,000
bulletin

1031
00:42:18,000 --> 00:42:20,700
and then when the detector uh working on

1032
00:42:20,700 --> 00:42:22,980
behalf of that recipient is looking for

1033
00:42:22,980 --> 00:42:25,859
the pink users messages

1034
00:42:25,859 --> 00:42:27,960
I'm sorry the animations are a bit wonky

1035
00:42:27,960 --> 00:42:29,760
here okay

1036
00:42:29,760 --> 00:42:33,000
um then what they do is uh they take all

1037
00:42:33,000 --> 00:42:35,339
of those ciphertext for attached to

1038
00:42:35,339 --> 00:42:39,180
every message and do a an fhe recryption

1039
00:42:39,180 --> 00:42:40,500
operation

1040
00:42:40,500 --> 00:42:43,560
that is decryption under fhe in order to

1041
00:42:43,560 --> 00:42:46,140
refresh the ciphertext

1042
00:42:46,140 --> 00:42:48,720
and then just take the end of that and

1043
00:42:48,720 --> 00:42:50,880
the result is an encryption of one in

1044
00:42:50,880 --> 00:42:52,800
the case where indeed what we have is a

1045
00:42:52,800 --> 00:42:54,119
bunch of encryptions of one right we

1046
00:42:54,119 --> 00:42:56,280
encrypt them we get a bunch of ones

1047
00:42:56,280 --> 00:42:58,500
we take the end it's still one but what

1048
00:42:58,500 --> 00:43:01,200
happens if uh the message was actually

1049
00:43:01,200 --> 00:43:03,060
addressed to someone else

1050
00:43:03,060 --> 00:43:04,859
then the subscription operation is with

1051
00:43:04,859 --> 00:43:07,940
using the wrong FHA evaluation key

1052
00:43:07,940 --> 00:43:10,020
and um

1053
00:43:10,020 --> 00:43:13,140
for the schemes we use uh we get the

1054
00:43:13,140 --> 00:43:15,780
natural property that recrypting under

1055
00:43:15,780 --> 00:43:19,200
the wrong key gives you a random link

1056
00:43:19,200 --> 00:43:20,220
text

1057
00:43:20,220 --> 00:43:22,760
so some of those

1058
00:43:22,760 --> 00:43:25,440
decrypted some of these refreshed

1059
00:43:25,440 --> 00:43:26,880
psychotics are likely to be encryptions

1060
00:43:26,880 --> 00:43:29,099
of zero therefore homomorphically

1061
00:43:29,099 --> 00:43:31,140
evaluating The End by the detector gives

1062
00:43:31,140 --> 00:43:33,599
a zero the end of the day the detector

1063
00:43:33,599 --> 00:43:36,000
gets a vectors that is of ciphertext

1064
00:43:36,000 --> 00:43:37,619
that are zero one indicating what are

1065
00:43:37,619 --> 00:43:40,460
the pertinent messages

1066
00:43:40,500 --> 00:43:42,300
um that you can later be combined with

1067
00:43:42,300 --> 00:43:44,040
additional techniques to create a digest

1068
00:43:44,040 --> 00:43:46,980
that is sent to the recipient and uh

1069
00:43:46,980 --> 00:43:49,980
using generic fhe it's completely

1070
00:43:49,980 --> 00:43:51,660
impractical but

1071
00:43:51,660 --> 00:43:54,000
we use a variety of Tricks none of which

1072
00:43:54,000 --> 00:43:56,040
I'll even mention to make it so

1073
00:43:56,040 --> 00:43:59,099
practical that it's even better than all

1074
00:43:59,099 --> 00:44:00,720
other Solutions including those that use

1075
00:44:00,720 --> 00:44:03,060
trusted hardware and has very

1076
00:44:03,060 --> 00:44:05,160
isosymptotics even for Bitcoin scale and

1077
00:44:05,160 --> 00:44:06,359
Beyond

1078
00:44:06,359 --> 00:44:08,880
now why am I mentioning all of this

1079
00:44:08,880 --> 00:44:10,800
so first it's in order to give the one

1080
00:44:10,800 --> 00:44:12,300
fancy feeling to all the people who have

1081
00:44:12,300 --> 00:44:14,579
been working on fhe that yes it has yet

1082
00:44:14,579 --> 00:44:15,900
another application it makes people

1083
00:44:15,900 --> 00:44:18,119
happy and the zika people have been

1084
00:44:18,119 --> 00:44:21,300
writing on how difficult this problem is

1085
00:44:21,300 --> 00:44:23,819
and they need it solving fpg saves the

1086
00:44:23,819 --> 00:44:24,859
date

1087
00:44:24,859 --> 00:44:27,960
but the other reason is that we run into

1088
00:44:27,960 --> 00:44:29,760
an interesting theoretical question as

1089
00:44:29,760 --> 00:44:32,520
we were working on that which is when we

1090
00:44:32,520 --> 00:44:33,660
looked at an additional security

1091
00:44:33,660 --> 00:44:36,060
property uh called denial of service

1092
00:44:36,060 --> 00:44:37,560
resistance

1093
00:44:37,560 --> 00:44:40,020
so at night of service attack on such a

1094
00:44:40,020 --> 00:44:43,740
scheme is where an adversary sends a

1095
00:44:43,740 --> 00:44:45,359
single message

1096
00:44:45,359 --> 00:44:47,819
that is detected as pertinent by

1097
00:44:47,819 --> 00:44:50,839
numerous recipients

1098
00:44:51,060 --> 00:44:54,660
but otherwise there an adversary can

1099
00:44:54,660 --> 00:44:57,839
always spam someone by sending a single

1100
00:44:57,839 --> 00:45:00,060
message that someone that's inevitable

1101
00:45:00,060 --> 00:45:01,980
but it shouldn't be the case that the

1102
00:45:01,980 --> 00:45:04,440
adversary can send a wild card clue that

1103
00:45:04,440 --> 00:45:06,240
causes the message to be received by

1104
00:45:06,240 --> 00:45:08,099
numerous recipients and induced load in

1105
00:45:08,099 --> 00:45:10,440
all of them that would create an

1106
00:45:10,440 --> 00:45:12,660
aggregate load in the system maybe uh

1107
00:45:12,660 --> 00:45:16,319
overwhelm small clients

1108
00:45:16,319 --> 00:45:18,900
and overflow the scheme it's really bad

1109
00:45:18,900 --> 00:45:22,440
and it's not theoretical prior schemes

1110
00:45:22,440 --> 00:45:25,220
which really vulnerable to these attacks

1111
00:45:25,220 --> 00:45:28,020
once I identified

1112
00:45:28,020 --> 00:45:30,240
and the scheme I described now actually

1113
00:45:30,240 --> 00:45:32,400
resists the denial of service attacks

1114
00:45:32,400 --> 00:45:34,380
but only under the following weird

1115
00:45:34,380 --> 00:45:37,040
conjecture

1116
00:45:37,380 --> 00:45:38,819
um so here's the conjecture it's

1117
00:45:38,819 --> 00:45:41,880
conjunction about lwe samples it will be

1118
00:45:41,880 --> 00:45:43,800
convenient to describe it in terms of

1119
00:45:43,800 --> 00:45:46,260
the regular 05 encryption

1120
00:45:46,260 --> 00:45:48,319
so um

1121
00:45:48,319 --> 00:45:52,800
the setup is the following uh we are the

1122
00:45:52,800 --> 00:45:54,599
game is the following

1123
00:45:54,599 --> 00:45:57,660
we honestly generate two regular five

1124
00:45:57,660 --> 00:46:01,380
key pairs that is uh a secret key and a

1125
00:46:01,380 --> 00:46:04,319
bunch of LW samples and likewise another

1126
00:46:04,319 --> 00:46:05,339
pair

1127
00:46:05,339 --> 00:46:07,200
we give those to the adversary and we

1128
00:46:07,200 --> 00:46:09,480
say hey adversary think about this as

1129
00:46:09,480 --> 00:46:14,220
two uh regular public keys and uh give

1130
00:46:14,220 --> 00:46:16,260
me a ciphertech that decrypts to zero

1131
00:46:16,260 --> 00:46:18,180
under both of these

1132
00:46:18,180 --> 00:46:20,460
oh sorry

1133
00:46:20,460 --> 00:46:23,040
so um the adversary doesn't know the

1134
00:46:23,040 --> 00:46:24,900
secret Keys you cannot decrypt

1135
00:46:24,900 --> 00:46:27,359
what can I do well if you do the trivial

1136
00:46:27,359 --> 00:46:29,760
thing in this case of uh giving the

1137
00:46:29,760 --> 00:46:32,520
ciphertext in which the a vector is all

1138
00:46:32,520 --> 00:46:36,660
zero okay so uh let's re let's rule that

1139
00:46:36,660 --> 00:46:37,920
out

1140
00:46:37,920 --> 00:46:40,740
they can also do the the trivial thing

1141
00:46:40,740 --> 00:46:45,240
of encrypting a zero to uh pk1 and

1142
00:46:45,240 --> 00:46:48,060
hoping that it will come out zero also

1143
00:46:48,060 --> 00:46:50,339
when the under pk2

1144
00:46:50,339 --> 00:46:53,280
okay so with local for a negligible

1145
00:46:53,280 --> 00:46:55,140
advantage over that

1146
00:46:55,140 --> 00:46:57,060
is there an adversary that can achieve

1147
00:46:57,060 --> 00:46:59,400
over the more the negligible advantage

1148
00:46:59,400 --> 00:47:02,180
in this simple game

1149
00:47:03,180 --> 00:47:04,980
that's the question

1150
00:47:04,980 --> 00:47:06,420
um there are many generalizations they

1151
00:47:06,420 --> 00:47:08,099
won't get into any of those but even

1152
00:47:08,099 --> 00:47:11,460
this this cleanest version seems weird

1153
00:47:11,460 --> 00:47:15,060
it's not like any lwe assumption or

1154
00:47:15,060 --> 00:47:16,560
other lattice assumptions more like a

1155
00:47:16,560 --> 00:47:17,880
knowledge assumption

1156
00:47:17,880 --> 00:47:20,339
if anything it's a bit reminiscent of

1157
00:47:20,339 --> 00:47:22,920
the knowledge of knapsack of noisy inner

1158
00:47:22,920 --> 00:47:25,680
products from the paper defining uh

1159
00:47:25,680 --> 00:47:28,680
ecrhs and snarks uh one combined with

1160
00:47:28,680 --> 00:47:30,660
sis the intuition is that the adversary

1161
00:47:30,660 --> 00:47:33,660
would only be able to construct zeros

1162
00:47:33,660 --> 00:47:35,460
with hyperability if they know what

1163
00:47:35,460 --> 00:47:36,839
they're doing if they know that they're

1164
00:47:36,839 --> 00:47:39,240
putting together lwe samples

1165
00:47:39,240 --> 00:47:41,099
and if they know what they're doing then

1166
00:47:41,099 --> 00:47:42,839
that would violate it so yes

1167
00:47:42,839 --> 00:47:45,839
um but anyway I would like to post this

1168
00:47:45,839 --> 00:47:49,079
uh both uh to assist with the

1169
00:47:49,079 --> 00:47:50,819
plausibility and its connection to other

1170
00:47:50,819 --> 00:47:52,560
things known about lattices or knowledge

1171
00:47:52,560 --> 00:47:55,279
assumptions in general

1172
00:47:57,359 --> 00:47:59,220
um

1173
00:47:59,220 --> 00:48:01,020
I added in the last minute an

1174
00:48:01,020 --> 00:48:03,359
observation about uh Colmore Grove

1175
00:48:03,359 --> 00:48:05,400
living complexity in light of the other

1176
00:48:05,400 --> 00:48:07,260
invited talk with the dwelled on meta

1177
00:48:07,260 --> 00:48:09,060
complexity and I couldn't resist

1178
00:48:09,060 --> 00:48:10,440
mentioning that it has yet more

1179
00:48:10,440 --> 00:48:13,560
applications uh including solving famous

1180
00:48:13,560 --> 00:48:16,319
open problems in the realm of copyright

1181
00:48:16,319 --> 00:48:17,819
law

1182
00:48:17,819 --> 00:48:21,140
as it turns out uh lawyers are

1183
00:48:21,140 --> 00:48:24,140
notoriously

1184
00:48:24,260 --> 00:48:26,460
having trouble with the notion of

1185
00:48:26,460 --> 00:48:28,140
copyright infringement

1186
00:48:28,140 --> 00:48:29,880
and in particular the notion of

1187
00:48:29,880 --> 00:48:32,220
substantial similarity here for example

1188
00:48:32,220 --> 00:48:35,460
this uh famous case of the Obama poster

1189
00:48:35,460 --> 00:48:39,480
uh is the upper one derivative work is

1190
00:48:39,480 --> 00:48:41,700
the low on derivative work well the low

1191
00:48:41,700 --> 00:48:43,859
one has to temporarily proceed it but if

1192
00:48:43,859 --> 00:48:45,680
you didn't know what know that

1193
00:48:45,680 --> 00:48:48,599
and the test that I applied are very

1194
00:48:48,599 --> 00:48:50,940
heuristics and inconsistent and uh

1195
00:48:50,940 --> 00:48:53,099
there's whole scholarship about it

1196
00:48:53,099 --> 00:48:56,400
and it turns out that you can frame this

1197
00:48:56,400 --> 00:49:00,359
problem in a way that looks uh that the

1198
00:49:00,359 --> 00:49:03,240
intuitive to a cryptographer and using

1199
00:49:03,240 --> 00:49:07,140
um a sort of game with an adversarial

1200
00:49:07,140 --> 00:49:08,880
Advantage

1201
00:49:08,880 --> 00:49:13,140
um and the way it's played is we have

1202
00:49:13,140 --> 00:49:15,359
two parties the the producer and

1203
00:49:15,359 --> 00:49:17,099
reproducer corresponding to the

1204
00:49:17,099 --> 00:49:19,980
plaintiff and defendant and they each

1205
00:49:19,980 --> 00:49:23,160
try to reconstruct the uh the resulting

1206
00:49:23,160 --> 00:49:27,900
image one given just the uh sorry one

1207
00:49:27,900 --> 00:49:30,960
given the the whole original copyrighted

1208
00:49:30,960 --> 00:49:33,900
work and the other given uh just the

1209
00:49:33,900 --> 00:49:35,819
non-copyrighted elements filtered out

1210
00:49:35,819 --> 00:49:37,339
from it

1211
00:49:37,339 --> 00:49:39,720
and the point is that the

1212
00:49:39,720 --> 00:49:41,579
non-copyrighted elements

1213
00:49:41,579 --> 00:49:43,440
um kind of a description of a process

1214
00:49:43,440 --> 00:49:45,900
that they could do and if you look at it

1215
00:49:45,900 --> 00:49:47,280
hard enough or read the full paper

1216
00:49:47,280 --> 00:49:49,980
you'll see that uh reasoning about the

1217
00:49:49,980 --> 00:49:51,839
kind of processes that could be done to

1218
00:49:51,839 --> 00:49:54,480
produce the copyrighted work looks a lot

1219
00:49:54,480 --> 00:49:57,660
like reasoning about the complexity of

1220
00:49:57,660 --> 00:49:59,819
describing a computation that produces a

1221
00:49:59,819 --> 00:50:01,460
given string

1222
00:50:01,460 --> 00:50:04,160
complexity of a computation

1223
00:50:04,160 --> 00:50:07,200
so the size of the description of the

1224
00:50:07,200 --> 00:50:08,579
computation

1225
00:50:08,579 --> 00:50:10,380
that produces the given string is common

1226
00:50:10,380 --> 00:50:13,079
complexity throw in some bounds on

1227
00:50:13,079 --> 00:50:15,960
efficiency and you get a comma of living

1228
00:50:15,960 --> 00:50:17,700
and as it turns out this beautifully

1229
00:50:17,700 --> 00:50:21,000
falls into place and we tried quite a

1230
00:50:21,000 --> 00:50:24,660
battery of well-known legal cases

1231
00:50:24,660 --> 00:50:27,000
um to see whether this framework would

1232
00:50:27,000 --> 00:50:28,339
give the same

1233
00:50:28,339 --> 00:50:30,540
the same predictions or at least explain

1234
00:50:30,540 --> 00:50:32,700
them more intuitively and it seems to

1235
00:50:32,700 --> 00:50:33,920
stick

1236
00:50:33,920 --> 00:50:36,420
so again the theory is stopping doing

1237
00:50:36,420 --> 00:50:37,800
something right all along it just took

1238
00:50:37,800 --> 00:50:40,579
maybe to realize

1239
00:50:41,700 --> 00:50:45,799
um we are nearly out of time right

1240
00:50:48,000 --> 00:50:51,300
yay okay so uh

1241
00:50:51,300 --> 00:50:53,040
um let me tell you about how to almost

1242
00:50:53,040 --> 00:50:54,780
lose everyone's money

1243
00:50:54,780 --> 00:50:56,940
by getting your model wrong so this is

1244
00:50:56,940 --> 00:50:59,700
my great Mia culpa

1245
00:50:59,700 --> 00:51:01,879
um

1246
00:51:02,280 --> 00:51:06,380
so this is a kind of uh in any

1247
00:51:06,380 --> 00:51:08,880
an anecdote that I hope any one of you

1248
00:51:08,880 --> 00:51:11,880
wishing to make the udemy build side of

1249
00:51:11,880 --> 00:51:13,920
the transition going from Theory into

1250
00:51:13,920 --> 00:51:16,680
practice we'll keep in mind

1251
00:51:16,680 --> 00:51:20,460
so uh it goes back to uh zero cash or Z

1252
00:51:20,460 --> 00:51:22,680
cash

1253
00:51:22,680 --> 00:51:24,780
um I assume in here are already familiar

1254
00:51:24,780 --> 00:51:26,880
the bottom line is it's a way to make

1255
00:51:26,880 --> 00:51:28,859
blockchain transaction private

1256
00:51:28,859 --> 00:51:31,380
by instead of putting everyone's private

1257
00:51:31,380 --> 00:51:33,059
information on the chain in order for

1258
00:51:33,059 --> 00:51:36,420
transaction to be verifiable we just uh

1259
00:51:36,420 --> 00:51:39,000
put a zero knowledge snug proof that the

1260
00:51:39,000 --> 00:51:40,260
center of the transaction already

1261
00:51:40,260 --> 00:51:41,819
checked all there is

1262
00:51:41,819 --> 00:51:44,180
to check

1263
00:51:44,180 --> 00:51:46,800
for those familiar it follows the uh

1264
00:51:46,800 --> 00:51:49,160
Sanders tashma approach

1265
00:51:49,160 --> 00:51:51,960
generalizes it in various ways none of

1266
00:51:51,960 --> 00:51:53,720
which I will

1267
00:51:53,720 --> 00:51:56,220
dwell on today except for one cool thing

1268
00:51:56,220 --> 00:51:58,859
well and one important thing

1269
00:51:58,859 --> 00:52:01,680
um this uses ZK snarks the all of the

1270
00:52:01,680 --> 00:52:03,540
properties of sneaky snarks are highly

1271
00:52:03,540 --> 00:52:06,119
critical here uh is your knowledge as a

1272
00:52:06,119 --> 00:52:08,819
synchronous non-interactiveness uh

1273
00:52:08,819 --> 00:52:11,099
soundness and furthermore knowledge

1274
00:52:11,099 --> 00:52:13,079
soundness

1275
00:52:13,079 --> 00:52:17,099
um and uh the way to get those is uh

1276
00:52:17,099 --> 00:52:19,800
using a structured reference stream

1277
00:52:19,800 --> 00:52:23,040
so a CRS with private randomness

1278
00:52:23,040 --> 00:52:26,880
so uh how do we come up with that well

1279
00:52:26,880 --> 00:52:29,099
this is in the TCC paper you would just

1280
00:52:29,099 --> 00:52:31,319
assume the existence of that and give

1281
00:52:31,319 --> 00:52:33,540
the algorithm for generating it but in

1282
00:52:33,540 --> 00:52:35,160
reality you actually need a process by

1283
00:52:35,160 --> 00:52:36,780
which to generate a string and have

1284
00:52:36,780 --> 00:52:39,240
people trust it

1285
00:52:39,240 --> 00:52:42,599
so we built a protocol for the NPC

1286
00:52:42,599 --> 00:52:45,480
dedicated for that and then that

1287
00:52:45,480 --> 00:52:48,180
protocol got executed by the commercial

1288
00:52:48,180 --> 00:52:50,700
spin-off in a very striking way there

1289
00:52:50,700 --> 00:52:54,059
were six geographically distributed

1290
00:52:54,059 --> 00:52:56,460
participants it was recently revealed

1291
00:52:56,460 --> 00:52:59,460
that one of them was uh Ed Snowden

1292
00:52:59,460 --> 00:53:02,760
and they all had dedicated machines and

1293
00:53:02,760 --> 00:53:05,520
they all use different procedures to

1294
00:53:05,520 --> 00:53:08,480
monitor or protect those machines

1295
00:53:08,480 --> 00:53:12,000
and crucially because this is an NPC

1296
00:53:12,000 --> 00:53:14,460
with secret Randomness for creating

1297
00:53:14,460 --> 00:53:16,319
secret randomness

1298
00:53:16,319 --> 00:53:17,880
with SRS

1299
00:53:17,880 --> 00:53:20,220
the secret Randomness needed to be kept

1300
00:53:20,220 --> 00:53:23,460
secret so uh everybody had a lot of fun

1301
00:53:23,460 --> 00:53:26,760
blowing up and burning and uh hammering

1302
00:53:26,760 --> 00:53:29,520
at their computers at the end of this

1303
00:53:29,520 --> 00:53:32,040
um in order to make sure that hopefully

1304
00:53:32,040 --> 00:53:33,839
at least one of the shares is destroyed

1305
00:53:33,839 --> 00:53:35,760
and that would have been enough

1306
00:53:35,760 --> 00:53:37,680
so

1307
00:53:37,680 --> 00:53:39,780
that was part of the the setup of the

1308
00:53:39,780 --> 00:53:42,240
cryptocurrency it worked beautifully and

1309
00:53:42,240 --> 00:53:45,540
people started transacting and uh large

1310
00:53:45,540 --> 00:53:47,900
numbers

1311
00:53:47,960 --> 00:53:50,400
were supposedly conveyed but I can't

1312
00:53:50,400 --> 00:53:51,780
really tell because it is privacy

1313
00:53:51,780 --> 00:53:54,119
preserving

1314
00:53:54,119 --> 00:53:55,559
um and there was even a publicly

1315
00:53:55,559 --> 00:53:57,480
verifiable audit Trail so we can make

1316
00:53:57,480 --> 00:54:00,240
sure the the NPC was done correctly uh

1317
00:54:00,240 --> 00:54:01,200
for

1318
00:54:01,200 --> 00:54:04,920
um the the public parts of that

1319
00:54:04,920 --> 00:54:05,640
um

1320
00:54:05,640 --> 00:54:09,059
so if for the for the soundness part

1321
00:54:09,059 --> 00:54:12,660
there are things you can verify and uh

1322
00:54:12,660 --> 00:54:15,440
my point is

1323
00:54:15,540 --> 00:54:18,960
um we found out three years later that

1324
00:54:18,960 --> 00:54:20,760
actually

1325
00:54:20,760 --> 00:54:22,140
um

1326
00:54:22,140 --> 00:54:24,359
okay sorry I apparently I skipped the

1327
00:54:24,359 --> 00:54:27,900
slide but uh we did oh no

1328
00:54:27,900 --> 00:54:29,940
do the thing please do the thing it's a

1329
00:54:29,940 --> 00:54:32,339
Mac I can't do Mac things

1330
00:54:32,339 --> 00:54:34,400
um

1331
00:54:36,660 --> 00:54:38,880
so um

1332
00:54:38,880 --> 00:54:42,660
what we learned is that uh we had an

1333
00:54:42,660 --> 00:54:46,140
oopsie and uh our zero knowledge proof

1334
00:54:46,140 --> 00:54:48,960
was uh not sound the way we generated

1335
00:54:48,960 --> 00:54:51,839
the CRS

1336
00:54:51,839 --> 00:54:55,160
um concretely what happened is

1337
00:54:55,160 --> 00:54:59,280
there was a write-up we had in an

1338
00:54:59,280 --> 00:55:00,740
unrelated paper

1339
00:55:00,740 --> 00:55:04,500
of the a variant of the Pinocchio scheme

1340
00:55:04,500 --> 00:55:07,800
and we had a typo there copy and pasted

1341
00:55:07,800 --> 00:55:09,420
some elements in the common reference

1342
00:55:09,420 --> 00:55:10,579
string

1343
00:55:10,579 --> 00:55:13,140
assuming that G1 and G2 are symmetric

1344
00:55:13,140 --> 00:55:15,440
which they weren't in that case

1345
00:55:15,440 --> 00:55:18,180
and no one caught it for a long time

1346
00:55:18,180 --> 00:55:21,359
because uh the the proofs they look

1347
00:55:21,359 --> 00:55:23,880
they're very elegant in the ggm OR AGM

1348
00:55:23,880 --> 00:55:25,980
uh but when you're working with the AGM

1349
00:55:25,980 --> 00:55:27,599
you need to keep track of what

1350
00:55:27,599 --> 00:55:29,460
generators are available to the

1351
00:55:29,460 --> 00:55:31,859
adversary because the adversary is only

1352
00:55:31,859 --> 00:55:34,500
on the hook to know the explanation of

1353
00:55:34,500 --> 00:55:36,180
what the output as a linear combination

1354
00:55:36,180 --> 00:55:38,160
of the generator they know

1355
00:55:38,160 --> 00:55:40,500
and if they know too many generated

1356
00:55:40,500 --> 00:55:42,720
generators because you copy and paste it

1357
00:55:42,720 --> 00:55:44,059
too much

1358
00:55:44,059 --> 00:55:47,660
then the the proof Falls

1359
00:55:47,660 --> 00:55:50,400
it falls down and in fact leads to a

1360
00:55:50,400 --> 00:55:53,059
real vulnerability

1361
00:55:53,520 --> 00:55:55,680
um so fortunately this was caught in

1362
00:55:55,680 --> 00:55:59,180
time by Ariel gabizon who was doing a

1363
00:55:59,180 --> 00:56:04,200
attractive a formal proof uh and um

1364
00:56:04,200 --> 00:56:09,980
uh through a rather painful process uh

1365
00:56:09,980 --> 00:56:13,260
security was reinstated the Saving Grace

1366
00:56:13,260 --> 00:56:16,980
was that you could only cheat by knowing

1367
00:56:16,980 --> 00:56:19,020
the the requisite generators from the

1368
00:56:19,020 --> 00:56:21,660
structure of different string and very

1369
00:56:21,660 --> 00:56:24,300
few people bothered downloading that

1370
00:56:24,300 --> 00:56:26,280
structured reference string and no one

1371
00:56:26,280 --> 00:56:28,920
of them apparently abused that knowledge

1372
00:56:28,920 --> 00:56:31,680
so the moment it was realized that the

1373
00:56:31,680 --> 00:56:36,540
uh that file was taken down and a major

1374
00:56:36,540 --> 00:56:39,300
upgraded the network uh went it went

1375
00:56:39,300 --> 00:56:40,859
into planning and execution and happened

1376
00:56:40,859 --> 00:56:41,880
in time

1377
00:56:41,880 --> 00:56:44,339
then they sprout to sapling transition

1378
00:56:44,339 --> 00:56:47,640
of the cash uh closed that loophole

1379
00:56:47,640 --> 00:56:51,240
but it was very scary and uh never do

1380
00:56:51,240 --> 00:56:52,859
that make sure you get your bottles

1381
00:56:52,859 --> 00:56:54,720
right and you appreciate the uh

1382
00:56:54,720 --> 00:56:57,059
Delicacies of things like AGM in this

1383
00:56:57,059 --> 00:56:58,500
case

1384
00:56:58,500 --> 00:57:01,619
um and by God get your formal formally

1385
00:57:01,619 --> 00:57:04,200
proven before you deploy anything

1386
00:57:04,200 --> 00:57:07,140
now to help you do that uh we have this

1387
00:57:07,140 --> 00:57:08,520
thing there's zero knowledge proof

1388
00:57:08,520 --> 00:57:12,319
standardization efforts that aims to

1389
00:57:12,319 --> 00:57:15,180
help understand what is out there in

1390
00:57:15,180 --> 00:57:16,380
zero knowledge proof schemes and

1391
00:57:16,380 --> 00:57:18,420
implementations enabling the operability

1392
00:57:18,420 --> 00:57:20,280
between different implementations and

1393
00:57:20,280 --> 00:57:22,920
new applications we have a community

1394
00:57:22,920 --> 00:57:26,520
reference version 0.3 is just out uh

1395
00:57:26,520 --> 00:57:28,200
covering all of the above and more and

1396
00:57:28,200 --> 00:57:30,540
you're welcome to contribute this is the

1397
00:57:30,540 --> 00:57:33,180
last in-person ZK proof from before the

1398
00:57:33,180 --> 00:57:34,980
pandemic but the next one is next week

1399
00:57:34,980 --> 00:57:37,079
in Tel Aviv so

1400
00:57:37,079 --> 00:57:38,940
drop by

1401
00:57:38,940 --> 00:57:43,160
we can use all the help we can get

1402
00:57:43,160 --> 00:57:44,700
and

1403
00:57:44,700 --> 00:57:46,319
um I think this would be a good time to

1404
00:57:46,319 --> 00:57:48,240
conclude so I'm happy to take any

1405
00:57:48,240 --> 00:57:51,319
questions for the remaining time

1406
00:57:58,980 --> 00:58:02,520
yeah thanks Aaron questions comments

1407
00:58:02,520 --> 00:58:06,980
if time for a couple of them

1408
00:58:07,200 --> 00:58:08,700
take the microphone in the beginning

1409
00:58:08,700 --> 00:58:11,480
it's coming

1410
00:58:12,559 --> 00:58:14,520
non-technical question but I'm curious

1411
00:58:14,520 --> 00:58:15,960
people are always saying that this

1412
00:58:15,960 --> 00:58:18,059
blockchain is like decentralized the

1413
00:58:18,059 --> 00:58:20,220
blah blah blah so I assume somebody like

1414
00:58:20,220 --> 00:58:22,140
Ariel or somebody last trusters will

1415
00:58:22,140 --> 00:58:24,059
actually steal money from a lot of

1416
00:58:24,059 --> 00:58:26,160
people I assume it wouldn't have worked

1417
00:58:26,160 --> 00:58:28,200
in practice so some who do you believe

1418
00:58:28,200 --> 00:58:30,059
in this uh right because people like

1419
00:58:30,059 --> 00:58:31,740
stop blockchains with like probably some

1420
00:58:31,740 --> 00:58:33,420
kind of special instruction like to

1421
00:58:33,420 --> 00:58:36,299
reverse on transactions I mean so do you

1422
00:58:36,299 --> 00:58:38,819
really believe that this uh well in this

1423
00:58:38,819 --> 00:58:40,380
particular case is blockchain thing

1424
00:58:40,380 --> 00:58:42,480
would I mean actually delivers on this

1425
00:58:42,480 --> 00:58:44,040
decentralized thing I kind of feel like

1426
00:58:44,040 --> 00:58:46,260
social engineering will stop this kind

1427
00:58:46,260 --> 00:58:48,960
of attacks actually to be effective in

1428
00:58:48,960 --> 00:58:50,220
the real world

1429
00:58:50,220 --> 00:58:52,260
I mean even as a you know bug was

1430
00:58:52,260 --> 00:58:54,740
exploited

1431
00:58:54,839 --> 00:58:57,059
so that's a great question and uh in a

1432
00:58:57,059 --> 00:58:59,660
sense there is some stress here between

1433
00:58:59,660 --> 00:59:03,480
uh security the sense of integrity and

1434
00:59:03,480 --> 00:59:05,760
Security in the sense of privacy because

1435
00:59:05,760 --> 00:59:09,480
had they not had in the cases or the

1436
00:59:09,480 --> 00:59:12,359
Bitcoin and its friend had bugs they

1437
00:59:12,359 --> 00:59:13,799
were easy to notice because everything

1438
00:59:13,799 --> 00:59:15,540
is there is in plain text and you can

1439
00:59:15,540 --> 00:59:19,380
observe that uh some wraparound minting

1440
00:59:19,380 --> 00:59:21,240
just happened

1441
00:59:21,240 --> 00:59:23,640
um if everything is properly protected

1442
00:59:23,640 --> 00:59:25,880
by encryption and zero knowledge proofs

1443
00:59:25,880 --> 00:59:29,099
then uh some forms of bugs might not

1444
00:59:29,099 --> 00:59:31,500
even be observable I mean might maybe

1445
00:59:31,500 --> 00:59:33,900
probably unobservable by polynomial time

1446
00:59:33,900 --> 00:59:36,180
auditors

1447
00:59:36,180 --> 00:59:38,099
um and so there are good questions about

1448
00:59:38,099 --> 00:59:40,559
how do you build built-in suspenders uh

1449
00:59:40,559 --> 00:59:43,819
mechanisms where is basically combiners

1450
00:59:43,819 --> 00:59:46,020
where you

1451
00:59:46,020 --> 00:59:48,059
um for the for the finicky part of the

1452
00:59:48,059 --> 00:59:49,500
screen you have something else that

1453
00:59:49,500 --> 00:59:51,480
would uh would be able to detect when

1454
00:59:51,480 --> 00:59:53,960
they go wrong

1455
00:59:58,319 --> 01:00:00,119
I've actually a question that somebody

1456
01:00:00,119 --> 01:00:02,520
sent me over what's up I can ask it and

1457
01:00:02,520 --> 01:00:03,960
read it out

1458
01:00:03,960 --> 01:00:05,520
um so what do you think about the

1459
01:00:05,520 --> 01:00:07,980
relevance of these leakage models to to

1460
01:00:07,980 --> 01:00:10,079
practice are they actually used in in

1461
01:00:10,079 --> 01:00:13,260
practice and if not why not

1462
01:00:13,260 --> 01:00:16,680
so practitioners uh in the hardware

1463
01:00:16,680 --> 01:00:20,099
world have their own view of things

1464
01:00:20,099 --> 01:00:21,660
their old culture and their old library

1465
01:00:21,660 --> 01:00:24,660
of mitigations they like to use

1466
01:00:24,660 --> 01:00:25,520
um

1467
01:00:25,520 --> 01:00:28,760
and I haven't seen as much

1468
01:00:28,760 --> 01:00:31,260
transfer between the two worlds as I

1469
01:00:31,260 --> 01:00:35,160
hoped for partially because uh the the

1470
01:00:35,160 --> 01:00:38,339
TCC compilers tend to have intend to be

1471
01:00:38,339 --> 01:00:42,440
uh not efficient enough

1472
01:00:42,960 --> 01:00:43,819
um

1473
01:00:43,819 --> 01:00:47,940
uh nonetheless I the analysis techniques

1474
01:00:47,940 --> 01:00:50,520
developed for these ought to be employed

1475
01:00:50,520 --> 01:00:53,299
even for the real world technique so uh

1476
01:00:53,299 --> 01:00:55,740
there should be clarity about what is

1477
01:00:55,740 --> 01:00:57,780
being protected against and why does it

1478
01:00:57,780 --> 01:01:00,240
work and uh there have been many failure

1479
01:01:00,240 --> 01:01:02,880
modes by very secure chips that actually

1480
01:01:02,880 --> 01:01:05,819
were not secure because they uh implicit

1481
01:01:05,819 --> 01:01:07,500
adversarial model was not expensive

1482
01:01:07,500 --> 01:01:10,020
enough still there's a lot more room for

1483
01:01:10,020 --> 01:01:12,680
convergence

1484
01:01:17,880 --> 01:01:19,559
yeah so so what do you think of the

1485
01:01:19,559 --> 01:01:21,839
complementary Viewpoint of like you know

1486
01:01:21,839 --> 01:01:24,240
implementing the the ideal Black Box

1487
01:01:24,240 --> 01:01:25,980
through other means that are not

1488
01:01:25,980 --> 01:01:28,200
cryptographic so which is what I think

1489
01:01:28,200 --> 01:01:29,819
some of the practitioners would like to

1490
01:01:29,819 --> 01:01:32,160
do actually you know just to use formal

1491
01:01:32,160 --> 01:01:34,619
verification to make sure that there's

1492
01:01:34,619 --> 01:01:36,180
no such Channel or something like that

1493
01:01:36,180 --> 01:01:39,240
so I think formal verification is uh

1494
01:01:39,240 --> 01:01:42,240
complementary and rarely in competition

1495
01:01:42,240 --> 01:01:44,339
um the cryptography here is more about

1496
01:01:44,339 --> 01:01:46,559
ensuring that particular computations

1497
01:01:46,559 --> 01:01:49,140
correctly executed the thing that was

1498
01:01:49,140 --> 01:01:50,520
formally verified

1499
01:01:50,520 --> 01:01:52,260
right

1500
01:01:52,260 --> 01:01:53,700
um

1501
01:01:53,700 --> 01:01:56,640
and in fact we just had a couple of

1502
01:01:56,640 --> 01:01:58,980
Works about these connections showing uh

1503
01:01:58,980 --> 01:02:01,319
how cryptography can reason about

1504
01:02:01,319 --> 01:02:03,960
formal methods and prove for example in

1505
01:02:03,960 --> 01:02:06,059
zero knowledge that vulnerability does

1506
01:02:06,059 --> 01:02:08,700
or does not exist in a given piece of

1507
01:02:08,700 --> 01:02:12,599
code uh by reasoning about sat solvers

1508
01:02:12,599 --> 01:02:15,359
and resolution pros and things like that

1509
01:02:15,359 --> 01:02:16,700
um

1510
01:02:16,700 --> 01:02:19,920
uh that said for these complex protocols

1511
01:02:19,920 --> 01:02:22,020
like the one I just described uh

1512
01:02:22,020 --> 01:02:24,540
certainly uh system-wide formal

1513
01:02:24,540 --> 01:02:26,339
verification rather than just that of

1514
01:02:26,339 --> 01:02:28,559
individual component is called for and

1515
01:02:28,559 --> 01:02:30,119
it does stretch the current limits of

1516
01:02:30,119 --> 01:02:31,980
formal verification so open problems

1517
01:02:31,980 --> 01:02:33,119
number one

1518
01:02:33,119 --> 01:02:35,780
foreign

