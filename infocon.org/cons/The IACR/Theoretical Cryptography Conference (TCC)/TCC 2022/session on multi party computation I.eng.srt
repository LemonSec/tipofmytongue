1
00:00:00,000 --> 00:00:01,399
uh

2
00:00:01,399 --> 00:00:04,259
multi-party computation session

3
00:00:04,259 --> 00:00:06,379
and

4
00:00:06,379 --> 00:00:08,880
the first talk in this session is about

5
00:00:08,880 --> 00:00:11,400
run optimal honest majority MPC

6
00:00:11,400 --> 00:00:13,920
minicrypt and with Everlasting security

7
00:00:13,920 --> 00:00:19,220
this is work by Benny Applebaum El Iran

8
00:00:20,900 --> 00:00:24,900
will give it up thanks so hi everyone

9
00:00:24,900 --> 00:00:27,359
I'll present a joint work with Benny

10
00:00:27,359 --> 00:00:28,560
novita

11
00:00:28,560 --> 00:00:30,900
if someone stopped so we assume that

12
00:00:30,900 --> 00:00:32,340
there are end parties

13
00:00:32,340 --> 00:00:34,320
they couldn't communicate about secure

14
00:00:34,320 --> 00:00:36,800
channels

15
00:00:37,020 --> 00:00:39,180
and they want to secure the compute the

16
00:00:39,180 --> 00:00:41,399
function f order of their private inputs

17
00:00:41,399 --> 00:00:43,440
and they want to do so in the presence

18
00:00:43,440 --> 00:00:44,760
of the computation and rebounded

19
00:00:44,760 --> 00:00:46,500
adversary that corrupts the minority of

20
00:00:46,500 --> 00:00:47,640
the parties

21
00:00:47,640 --> 00:00:49,739
and we assume that adversal is active

22
00:00:49,739 --> 00:00:50,940
which means that you can deviate from

23
00:00:50,940 --> 00:00:53,039
the protocol and will require from

24
00:00:53,039 --> 00:00:55,680
security and community

25
00:00:55,680 --> 00:00:57,300
and in this work we studied the Run

26
00:00:57,300 --> 00:00:59,100
complexity of General NPC in this

27
00:00:59,100 --> 00:01:00,000
setting

28
00:01:00,000 --> 00:01:02,520
so let me tell you what is known there

29
00:01:02,520 --> 00:01:04,319
is another round of pikl that showed

30
00:01:04,319 --> 00:01:06,000
that at least three months are required

31
00:01:06,000 --> 00:01:08,900
for General NPC

32
00:01:09,140 --> 00:01:11,880
so the first one is the is the apple one

33
00:01:11,880 --> 00:01:13,860
of GLS that showed that it provided the

34
00:01:13,860 --> 00:01:15,420
playground protocol which require the

35
00:01:15,420 --> 00:01:17,400
common random string and they assume the

36
00:01:17,400 --> 00:01:19,979
existence of the threshold refugee

37
00:01:19,979 --> 00:01:22,920
and the CRS was removed in a formal wall

38
00:01:22,920 --> 00:01:25,200
and the state of the earth is the

39
00:01:25,200 --> 00:01:27,060
protocol of ictj that requires only

40
00:01:27,060 --> 00:01:28,799
public key encryption and

41
00:01:28,799 --> 00:01:31,500
non-interactive zero knowledge

42
00:01:31,500 --> 00:01:33,119
and in this work we ask can we do better

43
00:01:33,119 --> 00:01:35,579
can we remove the public key encryption

44
00:01:35,579 --> 00:01:37,560
and more interactive zero knowledge and

45
00:01:37,560 --> 00:01:39,240
maybe we can even obtain round Optimum

46
00:01:39,240 --> 00:01:41,880
NPC for many clip type assumptions

47
00:01:41,880 --> 00:01:43,680
so this is the question

48
00:01:43,680 --> 00:01:46,140
and our main result is a compiler

49
00:01:46,140 --> 00:01:48,360
and our starting point is the restricted

50
00:01:48,360 --> 00:01:49,920
class of functionality is going with a

51
00:01:49,920 --> 00:01:51,600
single input functionality so those are

52
00:01:51,600 --> 00:01:53,159
functionalities take input from a

53
00:01:53,159 --> 00:01:55,140
silicon party and then provide the

54
00:01:55,140 --> 00:01:57,180
outputs to the rest of the parties and

55
00:01:57,180 --> 00:01:58,860
our compiler takes any two-round

56
00:01:58,860 --> 00:02:00,600
protocol Simian input functionalities

57
00:02:00,600 --> 00:02:02,399
where the first found this input

58
00:02:02,399 --> 00:02:04,979
independent an offline amount and it

59
00:02:04,979 --> 00:02:06,299
transformed the spot according to a

60
00:02:06,299 --> 00:02:08,780
three on protocol for General NPC

61
00:02:08,780 --> 00:02:11,819
using only non-interactive commitments

62
00:02:11,819 --> 00:02:14,760
so this is our company

63
00:02:14,760 --> 00:02:16,920
and in the previous walk again then in

64
00:02:16,920 --> 00:02:18,720
Arpita we provided the construction of

65
00:02:18,720 --> 00:02:20,340
200 single input functionalities

66
00:02:20,340 --> 00:02:23,640
assuming non-interactive commitments

67
00:02:23,640 --> 00:02:25,200
um the resiliency of our protocol is

68
00:02:25,200 --> 00:02:27,120
Optimum for a constant number of parties

69
00:02:27,120 --> 00:02:29,040
and it is almost optimized when the

70
00:02:29,040 --> 00:02:30,480
number of parties is polynomial in the

71
00:02:30,480 --> 00:02:32,640
security parameter which means that we

72
00:02:32,640 --> 00:02:33,780
need a little bit more than honest

73
00:02:33,780 --> 00:02:35,280
majority

74
00:02:35,280 --> 00:02:36,959
um but now by plugging in this photo

75
00:02:36,959 --> 00:02:39,000
come into the compiler we obtain a round

76
00:02:39,000 --> 00:02:42,599
Optimum MPC from a from non-collective

77
00:02:42,599 --> 00:02:44,760
commitments under this and with the same

78
00:02:44,760 --> 00:02:47,099
resiliency as the original protocol okay

79
00:02:47,099 --> 00:02:48,480
so this is the bottom line this is our

80
00:02:48,480 --> 00:02:49,739
main result

81
00:02:49,739 --> 00:02:51,599
and now let me say a few words about the

82
00:02:51,599 --> 00:02:53,459
non-interactive commitments

83
00:02:53,459 --> 00:02:54,780
so there are two kinds of

84
00:02:54,780 --> 00:02:56,760
non-interactive commitments the first

85
00:02:56,760 --> 00:02:58,560
one is computationally hiding and if you

86
00:02:58,560 --> 00:03:00,720
are using these kind of commitments then

87
00:03:00,720 --> 00:03:02,760
we need the security against an active

88
00:03:02,760 --> 00:03:05,340
opening attacks and it is now that such

89
00:03:05,340 --> 00:03:06,959
a commitments can be based on mini clip

90
00:03:06,959 --> 00:03:08,580
type assumptions such as the injectable

91
00:03:08,580 --> 00:03:10,379
functions with sub-exponential hardness

92
00:03:10,379 --> 00:03:12,659
the other options take any assumption

93
00:03:12,659 --> 00:03:13,739
for mail and you can obtain around

94
00:03:13,739 --> 00:03:16,640
Optimum NPC

95
00:03:17,120 --> 00:03:20,099
under those assumptions so this is the

96
00:03:20,099 --> 00:03:22,500
first kind of commitments the second one

97
00:03:22,500 --> 00:03:24,420
is statistically hiding and if you are

98
00:03:24,420 --> 00:03:25,680
using this kind of commitments you

99
00:03:25,680 --> 00:03:27,060
actually obtain a stronger notion of

100
00:03:27,060 --> 00:03:29,459
security called reversing security

101
00:03:29,459 --> 00:03:31,080
and this means that the protocol is

102
00:03:31,080 --> 00:03:33,000
secure even against an adversary that is

103
00:03:33,000 --> 00:03:34,260
the boundary dealing with execution

104
00:03:34,260 --> 00:03:36,420
which is the standout but can be

105
00:03:36,420 --> 00:03:38,099
computationally unbounded after the

106
00:03:38,099 --> 00:03:40,680
execution okay so by using statistically

107
00:03:40,680 --> 00:03:42,239
hiding non-interactive commitment to

108
00:03:42,239 --> 00:03:44,159
obtain Everlasting security for every

109
00:03:44,159 --> 00:03:47,580
nc1 circuit and imprerons

110
00:03:47,580 --> 00:03:49,500
and again it is now that such

111
00:03:49,500 --> 00:03:51,180
commitments can be based on a mini clip

112
00:03:51,180 --> 00:03:52,379
type assumption in this case the

113
00:03:52,379 --> 00:03:54,420
commission resistant hash functions

114
00:03:54,420 --> 00:03:55,920
I should mention that there is a

115
00:03:55,920 --> 00:03:57,599
technicality regarding how we send it

116
00:03:57,599 --> 00:03:59,819
the hash functions and because the

117
00:03:59,819 --> 00:04:01,260
adversal is non-uniform we need to

118
00:04:01,260 --> 00:04:02,760
select a random hash function from the

119
00:04:02,760 --> 00:04:03,599
family

120
00:04:03,599 --> 00:04:05,040
and we need to do so before the

121
00:04:05,040 --> 00:04:07,260
execution of the protocol so one way to

122
00:04:07,260 --> 00:04:09,659
do it is to use a common random string

123
00:04:09,659 --> 00:04:11,400
we can also have an additional outline

124
00:04:11,400 --> 00:04:13,319
in which the part is generally such

125
00:04:13,319 --> 00:04:15,720
function and finally if the adversal is

126
00:04:15,720 --> 00:04:17,040
uniform then we can have a fixed

127
00:04:17,040 --> 00:04:18,478
function

128
00:04:18,478 --> 00:04:20,579
good so those are the results

129
00:04:20,579 --> 00:04:24,000
and now let's see the construction

130
00:04:24,000 --> 00:04:26,220
so our starting point is a two round

131
00:04:26,220 --> 00:04:28,259
protocol or general an NPC that is

132
00:04:28,259 --> 00:04:29,639
secure against the weak adversely

133
00:04:29,639 --> 00:04:31,800
semi-immunicious adversely and this is

134
00:04:31,800 --> 00:04:33,419
just an adversal in the coolers honesty

135
00:04:33,419 --> 00:04:34,800
but you can choose the inputs and the

136
00:04:34,800 --> 00:04:37,259
randomness of the corrupt parties

137
00:04:37,259 --> 00:04:39,840
we then transform this photo connect to

138
00:04:39,840 --> 00:04:41,160
three one protocol which is secure

139
00:04:41,160 --> 00:04:42,960
against the stronger adverse effects of

140
00:04:42,960 --> 00:04:45,120
adversary the second place honestly but

141
00:04:45,120 --> 00:04:47,220
can make any corrupt party to about at

142
00:04:47,220 --> 00:04:48,720
any point of time

143
00:04:48,720 --> 00:04:50,759
and finally we transform this protocol

144
00:04:50,759 --> 00:04:53,040
and protocol it is secure against active

145
00:04:53,040 --> 00:04:54,540
Advil stories now there are

146
00:04:54,540 --> 00:04:56,960
non-constructions of the two rounds

147
00:04:56,960 --> 00:04:59,220
even with information theoretic security

148
00:04:59,220 --> 00:05:01,500
so this is our starting point

149
00:05:01,500 --> 00:05:03,540
and the first transformation from Seven

150
00:05:03,540 --> 00:05:05,220
Malaysians to Frank stock is the

151
00:05:05,220 --> 00:05:06,720
information theoretic we do not require

152
00:05:06,720 --> 00:05:09,300
any cryptographic assumptions only the

153
00:05:09,300 --> 00:05:11,160
second round requests the steel and

154
00:05:11,160 --> 00:05:12,419
input functionalities and

155
00:05:12,419 --> 00:05:15,479
non-interactive commitments

156
00:05:15,479 --> 00:05:17,580
and I should mention that the

157
00:05:17,580 --> 00:05:19,560
our compiler can be seen as the

158
00:05:19,560 --> 00:05:21,300
information theoretic version of the

159
00:05:21,300 --> 00:05:25,620
compiler of the sdgj as we can see soon

160
00:05:25,620 --> 00:05:27,300
okay so let's start like I said our

161
00:05:27,300 --> 00:05:28,860
starting point is the two run protocol

162
00:05:28,860 --> 00:05:31,320
for semi-monitious adversal is we assume

163
00:05:31,320 --> 00:05:32,940
that in the first round the parties

164
00:05:32,940 --> 00:05:34,380
communicate only there will be private

165
00:05:34,380 --> 00:05:35,580
channels and in the second round they

166
00:05:35,580 --> 00:05:37,500
use only the broadcast channels and

167
00:05:37,500 --> 00:05:40,080
every protocol can be transformed into a

168
00:05:40,080 --> 00:05:41,340
particle of this storm so this is

169
00:05:41,340 --> 00:05:43,560
without also generality so this is our

170
00:05:43,560 --> 00:05:45,000
starting point

171
00:05:45,000 --> 00:05:46,800
and now we want to transform it into a

172
00:05:46,800 --> 00:05:48,240
tree on protocol which is secure against

173
00:05:48,240 --> 00:05:50,039
the fan stop adversary that can abort

174
00:05:50,039 --> 00:05:52,380
the corrupt parties at any time and

175
00:05:52,380 --> 00:05:54,000
there are two kinds of about the advers

176
00:05:54,000 --> 00:05:55,080
are looking about the parties in the

177
00:05:55,080 --> 00:05:57,180
first round or in the second round and

178
00:05:57,180 --> 00:05:59,520
in this token focus and focus on second

179
00:05:59,520 --> 00:06:01,800
roundabouts

180
00:06:01,800 --> 00:06:03,840
so what does it mean let's take Mr Brown

181
00:06:03,840 --> 00:06:05,820
as an example it means that Mr Walton is

182
00:06:05,820 --> 00:06:07,259
honestly in round one

183
00:06:07,259 --> 00:06:09,120
but then decided to about in round two

184
00:06:09,120 --> 00:06:10,620
so they did not provide the voters

185
00:06:10,620 --> 00:06:12,180
message to the rest of the parties in

186
00:06:12,180 --> 00:06:14,280
round two again we would like to secure

187
00:06:14,280 --> 00:06:15,960
the emulate the broadcast message of Mr

188
00:06:15,960 --> 00:06:18,660
bound even if he abodes

189
00:06:18,660 --> 00:06:21,180
and in order to do so we first need to

190
00:06:21,180 --> 00:06:22,740
make sure that all the communication in

191
00:06:22,740 --> 00:06:24,900
the protocol is the public this is the

192
00:06:24,900 --> 00:06:27,000
first step and then we will make sure

193
00:06:27,000 --> 00:06:28,560
that for every party that did not Abode

194
00:06:28,560 --> 00:06:30,300
in round one the parties can securely

195
00:06:30,300 --> 00:06:32,940
compute the voters message in one two

196
00:06:32,940 --> 00:06:36,060
so making the communication public is

197
00:06:36,060 --> 00:06:38,039
easy we add another round round zero

198
00:06:38,039 --> 00:06:39,780
where we got every pair of parties to

199
00:06:39,780 --> 00:06:42,180
exchange one claim pets

200
00:06:42,180 --> 00:06:44,340
and now in round one instead of sending

201
00:06:44,340 --> 00:06:46,680
a private messages the party's first

202
00:06:46,680 --> 00:06:48,360
encrypt their messages using the

203
00:06:48,360 --> 00:06:49,800
one-time pets and then send the

204
00:06:49,800 --> 00:06:51,300
encrypted messages of the broadcast

205
00:06:51,300 --> 00:06:53,100
Journey okay so this is essentially the

206
00:06:53,100 --> 00:06:55,500
same protocol but now the communication

207
00:06:55,500 --> 00:06:57,840
round one is

208
00:06:57,840 --> 00:06:59,699
and I should mention previous work use

209
00:06:59,699 --> 00:07:01,440
the public encryption here we don't need

210
00:07:01,440 --> 00:07:05,060
public encryption one time period

211
00:07:05,400 --> 00:07:07,560
so in this in the second step we want to

212
00:07:07,560 --> 00:07:09,240
make sure that for every party that it's

213
00:07:09,240 --> 00:07:11,160
not about in round one the parties can

214
00:07:11,160 --> 00:07:12,840
compute the broadcast message you want

215
00:07:12,840 --> 00:07:14,520
to

216
00:07:14,520 --> 00:07:16,440
so let's take again Mr Barn as an

217
00:07:16,440 --> 00:07:18,120
example I'm going to notice that the

218
00:07:18,120 --> 00:07:19,979
broadcast message of Mr bong is just a

219
00:07:19,979 --> 00:07:22,680
function GI of the inputs of Mr Brown

220
00:07:22,680 --> 00:07:25,800
the randomness of Mr one only one-time

221
00:07:25,800 --> 00:07:27,419
pads that were exchanged with Mr Brown

222
00:07:27,419 --> 00:07:28,919
in round zero and along the Public

223
00:07:28,919 --> 00:07:32,099
Communication in round one

224
00:07:32,099 --> 00:07:34,319
and then we want to make sure that if Mr

225
00:07:34,319 --> 00:07:35,940
Bond did not about in round one we can

226
00:07:35,940 --> 00:07:37,440
recover is the broadcast message in

227
00:07:37,440 --> 00:07:39,780
round two so we met Mr Brown to generate

228
00:07:39,780 --> 00:07:41,520
the government Circuit of the function

229
00:07:41,520 --> 00:07:43,080
GI in round one

230
00:07:43,080 --> 00:07:45,900
and broadcast it to the parties

231
00:07:45,900 --> 00:07:48,419
he also generated he knows already the

232
00:07:48,419 --> 00:07:49,740
input to the randomness in the one

233
00:07:49,740 --> 00:07:51,180
template so we can release the neighbors

234
00:07:51,180 --> 00:07:52,319
to the parties

235
00:07:52,319 --> 00:07:54,599
and but the main problem is that he does

236
00:07:54,599 --> 00:07:55,919
not know the public messages that

237
00:07:55,919 --> 00:07:57,599
they'll send at the same round okay so

238
00:07:57,599 --> 00:07:59,099
we met Mr one share all the possible

239
00:07:59,099 --> 00:08:01,800
labels in round one among the parties

240
00:08:01,800 --> 00:08:03,720
and the parties can recover those

241
00:08:03,720 --> 00:08:05,520
Neighbors in round two and in this way

242
00:08:05,520 --> 00:08:07,860
is the carbon circuit to compute the the

243
00:08:07,860 --> 00:08:10,800
broadcast message of Mr one okay so this

244
00:08:10,800 --> 00:08:12,120
is the main idea

245
00:08:12,120 --> 00:08:16,099
uh for the first of a protocol

246
00:08:17,099 --> 00:08:19,800
and now let's move to to the active

247
00:08:19,800 --> 00:08:22,199
adversary and here we found the gmw

248
00:08:22,199 --> 00:08:24,300
Paradigm and we just want to make every

249
00:08:24,300 --> 00:08:26,580
party post that we played Honestly by

250
00:08:26,580 --> 00:08:28,860
using his own knowledge posts

251
00:08:28,860 --> 00:08:30,479
and it is well now the synchronic

252
00:08:30,479 --> 00:08:32,640
functionality is capture zero knowledge

253
00:08:32,640 --> 00:08:34,260
so from now on assume that they have a

254
00:08:34,260 --> 00:08:35,520
two on protocol for zero number which

255
00:08:35,520 --> 00:08:36,659
will be first down this input

256
00:08:36,659 --> 00:08:38,880
independent

257
00:08:38,880 --> 00:08:41,279
okay so this is open stop protocol

258
00:08:41,279 --> 00:08:43,080
and here's the main idea we let the

259
00:08:43,080 --> 00:08:44,880
parties the execute government around in

260
00:08:44,880 --> 00:08:48,120
one in in round zero in round one the

261
00:08:48,120 --> 00:08:49,440
parties proved that they acted honestly

262
00:08:49,440 --> 00:08:51,360
vote in round zero and in round one now

263
00:08:51,360 --> 00:08:53,459
because round zero is very simple it's

264
00:08:53,459 --> 00:08:56,459
fine to postpone the fourth to round one

265
00:08:56,459 --> 00:08:58,680
and finally in Route 2 they do the same

266
00:08:58,680 --> 00:09:00,720
and if some cool things that we know

267
00:09:00,720 --> 00:09:03,000
that this part is corrupt and we simply

268
00:09:03,000 --> 00:09:04,860
think of it as an about in 30 and our

269
00:09:04,860 --> 00:09:06,420
protocol is secure against the voting

270
00:09:06,420 --> 00:09:08,839
parties

271
00:09:19,459 --> 00:09:21,660
Mr Pink

272
00:09:21,660 --> 00:09:24,060
uh using the private message it is not

273
00:09:24,060 --> 00:09:25,980
clear how Mr pin can convince the rest

274
00:09:25,980 --> 00:09:27,959
of the parties that he acted honestly

275
00:09:27,959 --> 00:09:31,080
with respect to this private message

276
00:09:31,080 --> 00:09:33,720
and so the solution is to use committed

277
00:09:33,720 --> 00:09:35,880
one templates we let Mr one generate the

278
00:09:35,880 --> 00:09:37,440
commitment of this one-time parent and

279
00:09:37,440 --> 00:09:39,360
send the opening to Mr Pink

280
00:09:39,360 --> 00:09:41,399
and now if Mr Pink received the valid

281
00:09:41,399 --> 00:09:42,899
opening then he can prove consistency

282
00:09:42,899 --> 00:09:45,660
with the committed one-time pad

283
00:09:45,660 --> 00:09:47,580
and if you received an infinite opening

284
00:09:47,580 --> 00:09:49,920
then he knows that Mr Brown is corrupt

285
00:09:49,920 --> 00:09:52,019
and you can just send a message of Mr to

286
00:09:52,019 --> 00:09:53,820
Mr bomb unencrypted over the reporters

287
00:09:53,820 --> 00:09:55,320
Channel

288
00:09:55,320 --> 00:09:57,540
so this is the main idea

289
00:09:57,540 --> 00:09:59,820
and let me quickly summarize

290
00:09:59,820 --> 00:10:01,800
we've seen a clear on protocol for a

291
00:10:01,800 --> 00:10:03,120
general NPC

292
00:10:03,120 --> 00:10:05,279
that provides stock security under

293
00:10:05,279 --> 00:10:07,019
medical type assumptions

294
00:10:07,019 --> 00:10:09,000
and with Everlasting security and the

295
00:10:09,000 --> 00:10:10,019
version that provides of elastic

296
00:10:10,019 --> 00:10:12,060
security

297
00:10:12,060 --> 00:10:14,040
and the way to do it is to use a gmw

298
00:10:14,040 --> 00:10:17,580
type compiler for one majority where the

299
00:10:17,580 --> 00:10:19,380
public key encryption can be replaced by

300
00:10:19,380 --> 00:10:21,240
committed the one-time pets and zero

301
00:10:21,240 --> 00:10:22,800
knowledge repoofs can be executed by

302
00:10:22,800 --> 00:10:24,779
using single input functionalities

303
00:10:24,779 --> 00:10:27,740
and that's it

304
00:10:32,279 --> 00:10:34,880
questions

305
00:10:36,120 --> 00:10:38,160
I have one question is

306
00:10:38,160 --> 00:10:40,380
um are there any other settings where

307
00:10:40,380 --> 00:10:42,720
you can foresee Transformations for a

308
00:10:42,720 --> 00:10:44,760
single in from a single input to a

309
00:10:44,760 --> 00:10:47,940
generic uh yes so we have a recent work

310
00:10:47,940 --> 00:10:50,100
on the statistical regime

311
00:10:50,100 --> 00:10:53,100
um statistical security and honest

312
00:10:53,100 --> 00:10:54,060
majority

313
00:10:54,060 --> 00:10:55,620
well we have a stimuli transformation

314
00:10:55,620 --> 00:10:57,300
we're acquiring it a bit more from the

315
00:10:57,300 --> 00:10:58,920
single input functionalities we need to

316
00:10:58,920 --> 00:11:02,640
perform in our operations before the I

317
00:11:02,640 --> 00:11:04,320
mean we need to perform in our

318
00:11:04,320 --> 00:11:06,360
operations about the outputs of the

319
00:11:06,360 --> 00:11:07,680
single repositionalities but yes in

320
00:11:07,680 --> 00:11:10,860
general a similar transformation works

321
00:11:10,860 --> 00:11:13,640
foreign

322
00:11:16,459 --> 00:11:20,359
let's thank this speaker again

323
00:12:05,100 --> 00:12:07,700
foreign

324
00:12:10,880 --> 00:12:12,980
Yes sounds good

325
00:12:12,980 --> 00:12:16,440
so the second talk is sublinear circle

326
00:12:16,440 --> 00:12:18,959
computation from new assumption by let

327
00:12:18,959 --> 00:12:22,860
Boyle Jeffrey Couture and PLM

328
00:12:22,860 --> 00:12:25,560
as a thank you and um hello everyone

329
00:12:25,560 --> 00:12:28,380
thank you for being here so uh as I just

330
00:12:28,380 --> 00:12:29,820
said I'm here to talk about sublinear

331
00:12:29,820 --> 00:12:31,440
social computation from new assumptions

332
00:12:31,440 --> 00:12:32,760
which is joint work with the LED

333
00:12:32,760 --> 00:12:34,980
boylander far crypto and let me first

334
00:12:34,980 --> 00:12:37,019
reassure you that all of our assumptions

335
00:12:37,019 --> 00:12:38,820
are perfectly standard and that any

336
00:12:38,820 --> 00:12:40,800
novelty here is only in the context of

337
00:12:40,800 --> 00:12:43,019
sublinear secure computation

338
00:12:43,019 --> 00:12:45,000
so with that being said uh secure

339
00:12:45,000 --> 00:12:47,160
two-party computation allows Alice and

340
00:12:47,160 --> 00:12:49,680
Bob to compute a function here

341
00:12:49,680 --> 00:12:52,800
represented as a Boolean circuit c

342
00:12:52,800 --> 00:12:54,180
um without having to reveal anything

343
00:12:54,180 --> 00:12:57,060
about their inputs XA and XB other than

344
00:12:57,060 --> 00:13:00,360
the output of the computation why

345
00:13:00,360 --> 00:13:01,860
now we say that the protocol is

346
00:13:01,860 --> 00:13:04,680
sublinear if Alison is a communication

347
00:13:04,680 --> 00:13:06,779
between ice and Bob is sublinear in the

348
00:13:06,779 --> 00:13:08,339
circuit size so that's the number of

349
00:13:08,339 --> 00:13:10,500
gates of the circuit and the important

350
00:13:10,500 --> 00:13:12,360
part here is that the dependency on the

351
00:13:12,360 --> 00:13:16,800
circuit B some additive sublinear term

352
00:13:16,800 --> 00:13:18,779
now obviously it's it would be great to

353
00:13:18,779 --> 00:13:20,279
allow Wireless and Bob to compute any

354
00:13:20,279 --> 00:13:22,079
circuits they'd like but it's already

355
00:13:22,079 --> 00:13:25,019
very well motivated if to to allow for

356
00:13:25,019 --> 00:13:27,180
computation of a wide and expressive

357
00:13:27,180 --> 00:13:28,620
function classes

358
00:13:28,620 --> 00:13:31,019
now a natural question you may have is

359
00:13:31,019 --> 00:13:32,820
do we already know how to do this and

360
00:13:32,820 --> 00:13:34,800
the answer is yes in fact there are

361
00:13:34,800 --> 00:13:37,079
three main ways which yield uh protocols

362
00:13:37,079 --> 00:13:39,480
from a variety of assumptions uh for

363
00:13:39,480 --> 00:13:42,480
either trusted setup or a specific

364
00:13:42,480 --> 00:13:45,300
structured algebraic assumptions

365
00:13:45,300 --> 00:13:47,579
and what I'm Superman's under the rug

366
00:13:47,579 --> 00:13:48,899
here that not all of these Solutions

367
00:13:48,899 --> 00:13:50,820
work for the same function classes but

368
00:13:50,820 --> 00:13:52,680
it doesn't really matter for now

369
00:13:52,680 --> 00:13:55,079
uh before I can tell uh tell you about

370
00:13:55,079 --> 00:13:58,500
how we contribute to this landscape I

371
00:13:58,500 --> 00:14:00,000
need to introduce uh private information

372
00:14:00,000 --> 00:14:02,820
retrieval so we have seen this both as a

373
00:14:02,820 --> 00:14:04,680
tool in order to build sublinear secure

374
00:14:04,680 --> 00:14:07,380
computation and as a desirable goal in

375
00:14:07,380 --> 00:14:10,200
of itself in the sense that it is a

376
00:14:10,200 --> 00:14:11,880
highly specialized it's a highly

377
00:14:11,880 --> 00:14:13,620
specialized form of sublinear social

378
00:14:13,620 --> 00:14:14,940
computation

379
00:14:14,940 --> 00:14:17,160
so Alice has an index Bob has a database

380
00:14:17,160 --> 00:14:19,079
and the goal is for Alice to retrieves

381
00:14:19,079 --> 00:14:21,720
the element of her choice from Bob's

382
00:14:21,720 --> 00:14:22,680
database

383
00:14:22,680 --> 00:14:24,839
now uh because it's going to come up

384
00:14:24,839 --> 00:14:26,579
later I'll mention that we can impose a

385
00:14:26,579 --> 00:14:28,680
symmetric notion on privacy so Bob

386
00:14:28,680 --> 00:14:30,060
doesn't want Alice to learn the rest of

387
00:14:30,060 --> 00:14:31,500
his database

388
00:14:31,500 --> 00:14:34,380
and this task becomes non-trivial as

389
00:14:34,380 --> 00:14:36,660
soon as you impose sublinearity in the

390
00:14:36,660 --> 00:14:38,339
input size so sublinearity in the

391
00:14:38,339 --> 00:14:39,899
database

392
00:14:39,899 --> 00:14:42,000
and it's so specialized in the fact that

393
00:14:42,000 --> 00:14:44,040
we can hope to achieve a very low

394
00:14:44,040 --> 00:14:46,320
communication protocols and their exists

395
00:14:46,320 --> 00:14:48,120
Solutions in the literature

396
00:14:48,120 --> 00:14:49,920
so now we're ready to talk about what's

397
00:14:49,920 --> 00:14:52,740
new and the our contribution is twofold

398
00:14:52,740 --> 00:14:54,899
we have two main results uh mostly in

399
00:14:54,899 --> 00:14:57,660
the completely independent in fact so um

400
00:14:57,660 --> 00:14:59,339
the focus of this talk is going to be on

401
00:14:59,339 --> 00:15:00,660
the first one so I'll just say a couple

402
00:15:00,660 --> 00:15:02,699
of words about the second so we achieve

403
00:15:02,699 --> 00:15:04,199
poly logarithmic private information

404
00:15:04,199 --> 00:15:07,380
retrieval from CDH and uh a few

405
00:15:07,380 --> 00:15:09,240
interesting things about this so first

406
00:15:09,240 --> 00:15:10,740
of all it's a computational assumption

407
00:15:10,740 --> 00:15:13,320
which is nice and the second that is

408
00:15:13,320 --> 00:15:15,480
that it essentially is the first uh

409
00:15:15,480 --> 00:15:17,519
truly sublinear solution from this

410
00:15:17,519 --> 00:15:20,279
essential this Assumption of CDH

411
00:15:20,279 --> 00:15:22,800
and finally an artifact of our

412
00:15:22,800 --> 00:15:24,660
construction is that we have to use

413
00:15:24,660 --> 00:15:26,100
interaction so it would be interesting

414
00:15:26,100 --> 00:15:27,420
to see if we could bring it down to two

415
00:15:27,420 --> 00:15:29,160
rounds to match other constructions of

416
00:15:29,160 --> 00:15:30,480
polydog appear

417
00:15:30,480 --> 00:15:32,519
but this is all I I can say about this

418
00:15:32,519 --> 00:15:35,940
for now and uh our main result is for

419
00:15:35,940 --> 00:15:38,220
sublinear Circle computation of the

420
00:15:38,220 --> 00:15:40,500
class of lead circuits which

421
00:15:40,500 --> 00:15:43,199
um is a very expressive one

422
00:15:43,199 --> 00:15:44,519
so

423
00:15:44,519 --> 00:15:45,839
um

424
00:15:45,839 --> 00:15:47,940
we won't be interested so much in the

425
00:15:47,940 --> 00:15:49,860
specific Assumption of quadratic

426
00:15:49,860 --> 00:15:51,480
residuality plus learning parity of

427
00:15:51,480 --> 00:15:54,079
noise but rather I'll try I'll I'll

428
00:15:54,079 --> 00:15:57,180
probably convey that we've achieved a

429
00:15:57,180 --> 00:15:59,040
new way to break the circuit size

430
00:15:59,040 --> 00:16:00,779
barrier so a new way to achieve this is

431
00:16:00,779 --> 00:16:03,720
this is this thing

432
00:16:03,720 --> 00:16:05,160
um so as as

433
00:16:05,160 --> 00:16:07,260
um Jasper said yesterday uh this is

434
00:16:07,260 --> 00:16:09,300
essentially a conver a lumberjack

435
00:16:09,300 --> 00:16:11,100
convention so we should all be very

436
00:16:11,100 --> 00:16:15,000
excited to be shaving logs and logs logs

437
00:16:15,000 --> 00:16:17,760
um good so what we do is we provide a

438
00:16:17,760 --> 00:16:19,380
protocol for log log depth circuits and

439
00:16:19,380 --> 00:16:21,060
this translates into a slightly

440
00:16:21,060 --> 00:16:24,720
sublinear protocol for larger class

441
00:16:24,720 --> 00:16:26,760
so what is this new approach to bringing

442
00:16:26,760 --> 00:16:29,220
this exercise barrier in a sense we

443
00:16:29,220 --> 00:16:31,199
introduce this tool we introduce

444
00:16:31,199 --> 00:16:33,360
correlated symmetric peer which is a

445
00:16:33,360 --> 00:16:35,240
form of private information retrieval

446
00:16:35,240 --> 00:16:38,519
which allows us to build uh

447
00:16:38,519 --> 00:16:40,380
sublinear security computation

448
00:16:40,380 --> 00:16:42,959
so in the rest of this talk I'm going to

449
00:16:42,959 --> 00:16:45,980
first tell you

450
00:16:45,980 --> 00:16:49,740
how we can use a form of private

451
00:16:49,740 --> 00:16:51,779
information retrieval in order to build

452
00:16:51,779 --> 00:16:53,519
sublinear SQL computation

453
00:16:53,519 --> 00:16:55,019
then I'm just going to Define what this

454
00:16:55,019 --> 00:16:57,779
tool is and finally we'll sketch how we

455
00:16:57,779 --> 00:16:59,940
can hope to instantiate this on the new

456
00:16:59,940 --> 00:17:03,920
assumptions as I promised in the title

457
00:17:04,439 --> 00:17:06,900
so first of all Alice and Bob are trying

458
00:17:06,900 --> 00:17:09,179
to compute a log logged up circuit

459
00:17:09,179 --> 00:17:10,740
so what's interesting about log log

460
00:17:10,740 --> 00:17:12,900
depth is that

461
00:17:12,900 --> 00:17:15,480
um because each gate in the circuit only

462
00:17:15,480 --> 00:17:18,839
has fan in at most two each output only

463
00:17:18,839 --> 00:17:20,579
depends on that most logarithmically

464
00:17:20,579 --> 00:17:22,020
many inputs

465
00:17:22,020 --> 00:17:24,119
and this is true for every one of your

466
00:17:24,119 --> 00:17:25,559
outputs

467
00:17:25,559 --> 00:17:27,540
so what's very good about that is that

468
00:17:27,540 --> 00:17:30,059
each of the databases sorry each of the

469
00:17:30,059 --> 00:17:32,280
truth tables of these single output

470
00:17:32,280 --> 00:17:34,260
circuits are

471
00:17:34,260 --> 00:17:37,200
um have polynomial size so this already

472
00:17:37,200 --> 00:17:39,900
suggests a way to to do for Alice and

473
00:17:39,900 --> 00:17:41,940
Bob due to secure computation Alice

474
00:17:41,940 --> 00:17:44,160
prepares the truth tables and hard codes

475
00:17:44,160 --> 00:17:46,200
her inputs in there and then the goal is

476
00:17:46,200 --> 00:17:47,760
I mean it really looks like private

477
00:17:47,760 --> 00:17:50,039
information retrieval Bob wants to

478
00:17:50,039 --> 00:17:51,539
retrieve the element corresponding to

479
00:17:51,539 --> 00:17:52,940
his own input

480
00:17:52,940 --> 00:17:55,500
so I mean it would be a bit of a short

481
00:17:55,500 --> 00:17:57,419
talk if we could just like treat this as

482
00:17:57,419 --> 00:17:59,340
parallel like just as independent

483
00:17:59,340 --> 00:18:01,679
instances of peer and what goes wrong is

484
00:18:01,679 --> 00:18:03,660
that if you just run pair for each of

485
00:18:03,660 --> 00:18:05,820
those instances independently you use

486
00:18:05,820 --> 00:18:07,679
far too much communication

487
00:18:07,679 --> 00:18:09,780
uh but we're not dead yet because uh

488
00:18:09,780 --> 00:18:12,419
fortunately these these uh instances of

489
00:18:12,419 --> 00:18:14,640
peer are highly redundant so like

490
00:18:14,640 --> 00:18:16,080
they're highly correlated and that's

491
00:18:16,080 --> 00:18:18,120
what we're interested in today so in the

492
00:18:18,120 --> 00:18:19,740
sense that all of the queries Bob makes

493
00:18:19,740 --> 00:18:21,960
only depends on his input so there's

494
00:18:21,960 --> 00:18:23,700
some redundancy here

495
00:18:23,700 --> 00:18:27,240
I'll just mention that there was uh in

496
00:18:27,240 --> 00:18:29,039
previous lines of work on on sublinear

497
00:18:29,039 --> 00:18:30,780
secure computation

498
00:18:30,780 --> 00:18:33,179
um a similar notion was like a similar

499
00:18:33,179 --> 00:18:34,640
decomposer

500
00:18:34,640 --> 00:18:37,020
decomposition from like this large

501
00:18:37,020 --> 00:18:39,240
circuit to like this small ones was used

502
00:18:39,240 --> 00:18:41,520
but our contribution here is to view

503
00:18:41,520 --> 00:18:43,740
this as a form of private information

504
00:18:43,740 --> 00:18:46,440
retrieval

505
00:18:46,440 --> 00:18:48,059
so

506
00:18:48,059 --> 00:18:50,280
um I want to emphasize that what we are

507
00:18:50,280 --> 00:18:52,440
trying to do we have a single a single

508
00:18:52,440 --> 00:18:54,419
client and a single server and that

509
00:18:54,419 --> 00:18:56,280
these two entities are trying to do a

510
00:18:56,280 --> 00:18:58,080
lot of pairs

511
00:18:58,080 --> 00:19:00,600
so if there was if there was no

512
00:19:00,600 --> 00:19:01,679
correlation

513
00:19:01,679 --> 00:19:03,600
all of the databases are independent all

514
00:19:03,600 --> 00:19:05,039
of the queries are independent you can't

515
00:19:05,039 --> 00:19:07,260
do you can't do much here

516
00:19:07,260 --> 00:19:09,059
so what you might be familiar with is

517
00:19:09,059 --> 00:19:11,039
the notion of batches peer where

518
00:19:11,039 --> 00:19:12,419
essentially the client is trying to make

519
00:19:12,419 --> 00:19:14,520
a lot of queries to the same database

520
00:19:14,520 --> 00:19:16,500
but this is not what we're interested in

521
00:19:16,500 --> 00:19:18,240
today we're interested in the Dual

522
00:19:18,240 --> 00:19:22,500
notion so uh here's a toy example the

523
00:19:22,500 --> 00:19:24,059
databases are independent but the

524
00:19:24,059 --> 00:19:26,160
queries are highly correlated in a

525
00:19:26,160 --> 00:19:27,900
public manner

526
00:19:27,900 --> 00:19:29,340
so what I want to bring your attention

527
00:19:29,340 --> 00:19:31,440
to is the fact that you could describe

528
00:19:31,440 --> 00:19:33,419
the like the total entropy used to

529
00:19:33,419 --> 00:19:35,100
describe all of these queries is rather

530
00:19:35,100 --> 00:19:37,080
small like it's independent of K is a

531
00:19:37,080 --> 00:19:39,539
number of databases so we can hope for a

532
00:19:39,539 --> 00:19:41,160
protocol here where the upload

533
00:19:41,160 --> 00:19:43,140
communication from client to server is

534
00:19:43,140 --> 00:19:46,679
independent of the number of databases

535
00:19:46,679 --> 00:19:49,080
now for our application to go through to

536
00:19:49,080 --> 00:19:50,640
sublinear Circle computation we're going

537
00:19:50,640 --> 00:19:53,640
to need a more involved form of um of

538
00:19:53,640 --> 00:19:55,799
correlation between the queries and it's

539
00:19:55,799 --> 00:19:57,660
a notion we call corrected despair with

540
00:19:57,660 --> 00:19:59,220
mix and match queries

541
00:19:59,220 --> 00:20:01,320
so recalls that each output of your

542
00:20:01,320 --> 00:20:02,880
circuit depends on a small number of

543
00:20:02,880 --> 00:20:05,400
inputs and this is exactly how we're

544
00:20:05,400 --> 00:20:07,980
going to do our queries so

545
00:20:07,980 --> 00:20:09,600
all of the queries can be described by

546
00:20:09,600 --> 00:20:12,360
Bob's input and a single query to a

547
00:20:12,360 --> 00:20:13,980
single database is just a subset of

548
00:20:13,980 --> 00:20:15,720
Bob's inputs

549
00:20:15,720 --> 00:20:17,340
so why do we call this mix and match

550
00:20:17,340 --> 00:20:19,980
well uh what can help us to view it this

551
00:20:19,980 --> 00:20:22,140
way so the total entropy of all of the

552
00:20:22,140 --> 00:20:24,960
queries is just Bob's input vector and

553
00:20:24,960 --> 00:20:27,419
the way you craft all of the queries is

554
00:20:27,419 --> 00:20:30,000
just to mix and match

555
00:20:30,000 --> 00:20:32,880
um the individual bits of Bob's input

556
00:20:32,880 --> 00:20:34,559
and it's going to be useful in building

557
00:20:34,559 --> 00:20:37,280
this notion

558
00:20:37,380 --> 00:20:38,940
so

559
00:20:38,940 --> 00:20:42,419
um what I can't explain I mean it would

560
00:20:42,419 --> 00:20:44,640
be a lot of computations is that if we

561
00:20:44,640 --> 00:20:46,620
want to be able to use

562
00:20:46,620 --> 00:20:48,360
so let's say we can instantiate this

563
00:20:48,360 --> 00:20:49,679
primitive

564
00:20:49,679 --> 00:20:51,299
does this yield sublinear security

565
00:20:51,299 --> 00:20:52,679
computation

566
00:20:52,679 --> 00:20:56,039
it does but we have a very small budget

567
00:20:56,039 --> 00:20:58,799
for communication essentially we need

568
00:20:58,799 --> 00:21:00,720
constant upload rate from client to

569
00:21:00,720 --> 00:21:04,140
server and and rate one download

570
00:21:04,140 --> 00:21:06,179
so in particular the amount of

571
00:21:06,179 --> 00:21:08,520
communication must scale with the

572
00:21:08,520 --> 00:21:10,620
size of the with the entropy of the

573
00:21:10,620 --> 00:21:12,539
problem not with the total size of all

574
00:21:12,539 --> 00:21:15,860
of the queries which is much larger

575
00:21:15,960 --> 00:21:18,900
so how can we hope to build this from

576
00:21:18,900 --> 00:21:20,220
standard assumptions

577
00:21:20,220 --> 00:21:24,000
so our starting point is to start with a

578
00:21:24,000 --> 00:21:25,919
specific construction of symmetric pair

579
00:21:25,919 --> 00:21:28,919
and adapt it to the correlated case

580
00:21:28,919 --> 00:21:32,280
so the specific construction is uh one

581
00:21:32,280 --> 00:21:34,320
you may be familiar with we start with

582
00:21:34,320 --> 00:21:36,360
linear homomorphic encryption we get

583
00:21:36,360 --> 00:21:38,520
oblivious transfer and then symmetric

584
00:21:38,520 --> 00:21:39,900
pair

585
00:21:39,900 --> 00:21:43,559
now because I as I said we are so tight

586
00:21:43,559 --> 00:21:46,020
on uh we have such a small budget for

587
00:21:46,020 --> 00:21:48,900
communication for our corrected aspir we

588
00:21:48,900 --> 00:21:50,340
are going to have to use rate one

589
00:21:50,340 --> 00:21:52,080
versions of these Primitives of linear

590
00:21:52,080 --> 00:21:53,460
homomorphic encryption and oblivious

591
00:21:53,460 --> 00:21:54,900
transfer

592
00:21:54,900 --> 00:21:57,059
now this can be done but at the cost of

593
00:21:57,059 --> 00:21:58,559
batching which is going to be a problem

594
00:21:58,559 --> 00:22:00,000
in a minute

595
00:22:00,000 --> 00:22:02,220
but the good news for now is that like

596
00:22:02,220 --> 00:22:04,260
if we they exist constructions in the

597
00:22:04,260 --> 00:22:06,360
literature of these Primitives of these

598
00:22:06,360 --> 00:22:08,280
rate one Primitives from new assumptions

599
00:22:08,280 --> 00:22:10,919
as at least as far as sublinear secure

600
00:22:10,919 --> 00:22:13,100
computation is concerned

601
00:22:13,100 --> 00:22:16,559
but there's a problem with batching to

602
00:22:16,559 --> 00:22:17,760
understand the problem with batching we

603
00:22:17,760 --> 00:22:19,200
have to go back to this idea of mixing

604
00:22:19,200 --> 00:22:20,280
and matching

605
00:22:20,280 --> 00:22:22,380
because what's going on is that what

606
00:22:22,380 --> 00:22:24,659
we're trying to do is uh parallel

607
00:22:24,659 --> 00:22:27,179
instances of symmetric peer and we would

608
00:22:27,179 --> 00:22:28,559
like to instantiate each one of them

609
00:22:28,559 --> 00:22:30,480
using oblivious transfers

610
00:22:30,480 --> 00:22:32,159
but what's the correlation between the

611
00:22:32,159 --> 00:22:34,080
queries corresponds to

612
00:22:34,080 --> 00:22:36,240
is the fact that some of these oblivious

613
00:22:36,240 --> 00:22:37,919
transfers are redundant because the

614
00:22:37,919 --> 00:22:40,440
choice bits correspond to Bob's inputs

615
00:22:40,440 --> 00:22:43,200
so what we'd love to do is just to pay

616
00:22:43,200 --> 00:22:45,600
communication once in order to do all of

617
00:22:45,600 --> 00:22:46,919
our OTs

618
00:22:46,919 --> 00:22:49,320
and then mix and match the OTS we've

619
00:22:49,320 --> 00:22:51,720
paid for into these different instances

620
00:22:51,720 --> 00:22:54,000
so that overall we have very low

621
00:22:54,000 --> 00:22:56,520
communication

622
00:22:56,520 --> 00:22:58,799
unfortunately because we considered a

623
00:22:58,799 --> 00:23:01,320
batched primitive this it's a monolithic

624
00:23:01,320 --> 00:23:03,059
primitive so there's no good reason why

625
00:23:03,059 --> 00:23:07,440
we should be able to decompose uh uh our

626
00:23:07,440 --> 00:23:09,419
OT messages to retrieve these Atomic

627
00:23:09,419 --> 00:23:10,860
Otis we need

628
00:23:10,860 --> 00:23:13,620
now fortunately we were able to to

629
00:23:13,620 --> 00:23:16,559
observe a non-blackbox property of the

630
00:23:16,559 --> 00:23:18,120
construction of brockovski Branco

631
00:23:18,120 --> 00:23:20,700
deutsling and Pooh which gives us

632
00:23:20,700 --> 00:23:22,260
exactly what we need

633
00:23:22,260 --> 00:23:23,880
basically

634
00:23:23,880 --> 00:23:26,159
so they have two round battery so

635
00:23:26,159 --> 00:23:28,919
there's one receiver message from a

636
00:23:28,919 --> 00:23:30,840
client to server and one send a message

637
00:23:30,840 --> 00:23:32,940
from a server to client

638
00:23:32,940 --> 00:23:35,700
and the answer in a sense the message

639
00:23:35,700 --> 00:23:38,100
from server to client is answer to the

640
00:23:38,100 --> 00:23:39,600
OTs

641
00:23:39,600 --> 00:23:41,820
is decomposable in the sense that if you

642
00:23:41,820 --> 00:23:44,340
look at the structure you can like there

643
00:23:44,340 --> 00:23:45,840
is a one-to-one correspondence between

644
00:23:45,840 --> 00:23:48,539
the bits of the answer and the Otis

645
00:23:48,539 --> 00:23:50,400
you're interested in so you can in fact

646
00:23:50,400 --> 00:23:52,620
decompose and everything goes well

647
00:23:52,620 --> 00:23:54,480
now I wouldn't have time to go into more

648
00:23:54,480 --> 00:23:56,820
detail uh about this construction

649
00:23:56,820 --> 00:23:58,980
hopefully I've given some clue about the

650
00:23:58,980 --> 00:24:01,440
tools to use and I'll refer you to the

651
00:24:01,440 --> 00:24:06,140
paper when it reaches e-print very soon

652
00:24:06,480 --> 00:24:08,159
um so before before I leave you I'll

653
00:24:08,159 --> 00:24:10,320
just I'll just remind you that so recall

654
00:24:10,320 --> 00:24:13,200
that we have uh two main independent

655
00:24:13,200 --> 00:24:15,539
contributions the first is the one I

656
00:24:15,539 --> 00:24:17,400
spend time on sublinear secure

657
00:24:17,400 --> 00:24:18,840
computation for the class of loud

658
00:24:18,840 --> 00:24:21,080
circuits from new assumptions and

659
00:24:21,080 --> 00:24:24,299
interestingly from a form of private

660
00:24:24,299 --> 00:24:27,120
information retriever so hopefully maybe

661
00:24:27,120 --> 00:24:30,179
converging towards uh some kind of

662
00:24:30,179 --> 00:24:32,159
generic assumption we're not there yet

663
00:24:32,159 --> 00:24:33,299
but hopefully

664
00:24:33,299 --> 00:24:35,400
and the second contribution is poly

665
00:24:35,400 --> 00:24:37,440
logarithmic peer from CDH

666
00:24:37,440 --> 00:24:39,780
now uh very quickly

667
00:24:39,780 --> 00:24:42,179
all of this was for the two-part setting

668
00:24:42,179 --> 00:24:44,220
what happens for the multi-part setting

669
00:24:44,220 --> 00:24:47,159
well it turns out that

670
00:24:47,159 --> 00:24:50,340
um so these are the four Pros if now is

671
00:24:50,340 --> 00:24:51,960
the now four approaches we have to

672
00:24:51,960 --> 00:24:54,000
Breaking the circuit size barrier and

673
00:24:54,000 --> 00:24:55,980
the homomorphic secretion corrected

674
00:24:55,980 --> 00:24:58,440
that's clear don't seem great for the

675
00:24:58,440 --> 00:25:00,539
multi-part setting however new and

676
00:25:00,539 --> 00:25:02,400
exciting work we were able to observe

677
00:25:02,400 --> 00:25:04,860
that if you combine the two tools which

678
00:25:04,860 --> 00:25:08,100
on their own are hard to give like it's

679
00:25:08,100 --> 00:25:10,500
hard to use to get multi-party Sublime

680
00:25:10,500 --> 00:25:13,380
secure computation combining them was uh

681
00:25:13,380 --> 00:25:15,240
exactly what we needed to get

682
00:25:15,240 --> 00:25:17,940
multi-party Sublime Circle computation

683
00:25:17,940 --> 00:25:20,280
so with that I'd uh I'll be very happy

684
00:25:20,280 --> 00:25:22,020
to take any of your questions and I'd

685
00:25:22,020 --> 00:25:24,860
like to thank you for your attention

686
00:25:28,559 --> 00:25:31,039
questions

687
00:25:35,240 --> 00:25:39,299
one question that I had is the

688
00:25:39,299 --> 00:25:42,120
peer we've correlated queries are there

689
00:25:42,120 --> 00:25:44,400
any other interesting classes of

690
00:25:44,400 --> 00:25:46,559
correlated queries that makes make it

691
00:25:46,559 --> 00:25:50,400
possible to to save on the communication

692
00:25:50,400 --> 00:25:52,320
um so for the so for this specific

693
00:25:52,320 --> 00:25:54,659
problem

694
00:25:54,659 --> 00:25:57,059
um so so I guess the question is is

695
00:25:57,059 --> 00:25:59,520
rather whether whether the specific

696
00:25:59,520 --> 00:26:01,140
correlation would have any

697
00:26:01,140 --> 00:26:03,240
um I guess interesting uh applications

698
00:26:03,240 --> 00:26:05,100
because for instance so if we're just

699
00:26:05,100 --> 00:26:07,340
like if the correlation is quite simple

700
00:26:07,340 --> 00:26:10,320
already if we have sorry

701
00:26:10,320 --> 00:26:13,860
if we have two round uh uh

702
00:26:13,860 --> 00:26:15,840
private information retriever an

703
00:26:15,840 --> 00:26:18,059
interesting feature of that is that uh

704
00:26:18,059 --> 00:26:19,440
the receiver message is completely

705
00:26:19,440 --> 00:26:22,020
independent of the database and uh so

706
00:26:22,020 --> 00:26:23,640
what this means is that all of the

707
00:26:23,640 --> 00:26:25,559
queries of the form like sends the same

708
00:26:25,559 --> 00:26:28,080
query to the to our menu databases send

709
00:26:28,080 --> 00:26:31,919
us like publicly permuted

710
00:26:31,919 --> 00:26:34,260
um or publicly shifted I guess uh

711
00:26:34,260 --> 00:26:36,360
queries to different databases or can be

712
00:26:36,360 --> 00:26:39,480
done with just any two round pair so but

713
00:26:39,480 --> 00:26:42,600
I I we didn't look into uh more into

714
00:26:42,600 --> 00:26:45,419
other forms of correlation uh but if

715
00:26:45,419 --> 00:26:46,620
there are any applications that could be

716
00:26:46,620 --> 00:26:48,979
interesting

717
00:26:52,140 --> 00:26:55,820
all right that's thanks again

718
00:27:15,059 --> 00:27:17,779
thank you

719
00:27:29,700 --> 00:27:32,100
the next talk is about random optimal

720
00:27:32,100 --> 00:27:34,020
Black Box secure computation from two

721
00:27:34,020 --> 00:27:36,320
round malicious OT by yuvali Shai

722
00:27:36,320 --> 00:27:39,320
dakshikrana

723
00:27:39,740 --> 00:27:42,960
and dakshita will give the talk

724
00:27:42,960 --> 00:27:46,640
oops okay

725
00:28:01,140 --> 00:28:03,299
sorry to interrupt we don't have sound

726
00:28:03,299 --> 00:28:05,760
on Zoom

727
00:28:05,760 --> 00:28:09,000
sorry this should be better yes thank

728
00:28:09,000 --> 00:28:09,840
you

729
00:28:09,840 --> 00:28:11,100
all right

730
00:28:11,100 --> 00:28:11,940
um

731
00:28:11,940 --> 00:28:13,140
thanks

732
00:28:13,140 --> 00:28:16,500
so let's get started

733
00:28:16,500 --> 00:28:17,760
um all right

734
00:28:17,760 --> 00:28:19,200
um so this talk is going to be about

735
00:28:19,200 --> 00:28:21,120
building multi-party computation

736
00:28:21,120 --> 00:28:24,779
protocols the goal in NPC is to is for a

737
00:28:24,779 --> 00:28:26,940
set of players that each have private

738
00:28:26,940 --> 00:28:29,460
inputs to compute a joint function on

739
00:28:29,460 --> 00:28:30,779
these inputs

740
00:28:30,779 --> 00:28:32,700
um without necessarily revealing or

741
00:28:32,700 --> 00:28:34,500
without without revealing the private

742
00:28:34,500 --> 00:28:37,940
inputs of participants to each other

743
00:28:39,059 --> 00:28:42,980
sorry is there a yeah

744
00:28:45,600 --> 00:28:46,980
thank you

745
00:28:46,980 --> 00:28:49,260
um all right uh so the goal is to

746
00:28:49,260 --> 00:28:50,760
compute a joint function on private

747
00:28:50,760 --> 00:28:51,840
inputs

748
00:28:51,840 --> 00:28:53,820
um and the security property that we

749
00:28:53,820 --> 00:28:55,980
want is that no colluding subset of

750
00:28:55,980 --> 00:28:58,140
players should be able to learn any

751
00:28:58,140 --> 00:29:00,059
information about the private inputs of

752
00:29:00,059 --> 00:29:02,039
other participants beyond what is

753
00:29:02,039 --> 00:29:04,140
revealed by their own implicit inputs

754
00:29:04,140 --> 00:29:06,659
and the output of the protocol

755
00:29:06,659 --> 00:29:07,559
um

756
00:29:07,559 --> 00:29:09,419
so

757
00:29:09,419 --> 00:29:12,120
It Is by now well known that a key

758
00:29:12,120 --> 00:29:14,039
building block called oblivious transfer

759
00:29:14,039 --> 00:29:16,980
is both necessary and sufficient to

760
00:29:16,980 --> 00:29:18,860
build multi-party computation protocols

761
00:29:18,860 --> 00:29:21,059
oblivious transfer is a two-party

762
00:29:21,059 --> 00:29:23,399
primitive that allows a sender to

763
00:29:23,399 --> 00:29:25,620
obliviously transmit one out of two

764
00:29:25,620 --> 00:29:28,380
messages uh to a receiver in this

765
00:29:28,380 --> 00:29:31,020
example the sender has input say 0 S1

766
00:29:31,020 --> 00:29:33,299
the receiver has private input B this

767
00:29:33,299 --> 00:29:35,039
can be considered a special case of

768
00:29:35,039 --> 00:29:37,200
two-party secure computation where the

769
00:29:37,200 --> 00:29:40,799
receiver learns only SP corresponding to

770
00:29:40,799 --> 00:29:42,779
their choice between and the sender does

771
00:29:42,779 --> 00:29:47,120
not learn what would be the receiver has

772
00:29:47,460 --> 00:29:49,460
um

773
00:29:49,740 --> 00:29:52,140
there's been a huge amount of progress

774
00:29:52,140 --> 00:29:55,080
in recent years in understanding how to

775
00:29:55,080 --> 00:29:57,240
build multi-party computation protocols

776
00:29:57,240 --> 00:30:00,299
from this building block OT it all

777
00:30:00,299 --> 00:30:04,080
started with Yao's uh work on garbled

778
00:30:04,080 --> 00:30:07,080
circuits that gave two round two-party

779
00:30:07,080 --> 00:30:09,659
computation protocols from any two round

780
00:30:09,659 --> 00:30:11,179
OT

781
00:30:11,179 --> 00:30:13,980
subsequently The Works of gold Wright

782
00:30:13,980 --> 00:30:16,140
Michael evicterson and Bieber mikali

783
00:30:16,140 --> 00:30:18,179
Rogue generalized this to the

784
00:30:18,179 --> 00:30:20,279
multi-party setting and in particular

785
00:30:20,279 --> 00:30:22,320
Beaver mikali ragway obtained constant

786
00:30:22,320 --> 00:30:24,840
round multi-party protocols starting

787
00:30:24,840 --> 00:30:28,320
from any constant round OT

788
00:30:28,320 --> 00:30:31,080
um and then in more recent years uh this

789
00:30:31,080 --> 00:30:33,480
gap of constant versus two rounds was

790
00:30:33,480 --> 00:30:35,820
closed by uh gargan srinivasan and

791
00:30:35,820 --> 00:30:37,799
benamuda and Lin that obtained

792
00:30:37,799 --> 00:30:40,320
multi-party gobbling schemes enabling

793
00:30:40,320 --> 00:30:42,840
two-round MPC protocols from any

794
00:30:42,840 --> 00:30:45,559
two-round OT

795
00:30:45,600 --> 00:30:48,120
um all these constructions

796
00:30:48,120 --> 00:30:50,279
either already achieve or can be easily

797
00:30:50,279 --> 00:30:52,200
modified to achieve malicious Security

798
00:30:52,200 --> 00:30:54,539
in the common reference string model and

799
00:30:54,539 --> 00:30:56,399
that's going to be that that model is

800
00:30:56,399 --> 00:30:58,440
going to be the focus of this talk

801
00:30:58,440 --> 00:31:01,380
it turns out that in this setting of

802
00:31:01,380 --> 00:31:03,059
malicious Security in the CRF model

803
00:31:03,059 --> 00:31:05,700
there is still a big gap between what we

804
00:31:05,700 --> 00:31:07,200
know to do in the two-party setting

805
00:31:07,200 --> 00:31:09,480
versus the multi-party setting in

806
00:31:09,480 --> 00:31:11,580
particular if we care about Black Box

807
00:31:11,580 --> 00:31:13,860
constructions where the protocol the

808
00:31:13,860 --> 00:31:15,720
two-party or the multi-party computation

809
00:31:15,720 --> 00:31:18,419
protocol requires only black box access

810
00:31:18,419 --> 00:31:21,000
to the next message functionality of the

811
00:31:21,000 --> 00:31:23,640
underlying OT then in the two-party

812
00:31:23,640 --> 00:31:26,460
setting the work of Isha at all built

813
00:31:26,460 --> 00:31:28,860
Black Box secure protocols for two-party

814
00:31:28,860 --> 00:31:31,919
computation from any two round OT and on

815
00:31:31,919 --> 00:31:33,720
the other hand in the multi-party

816
00:31:33,720 --> 00:31:36,179
setting all we have are non-blag box

817
00:31:36,179 --> 00:31:38,760
constructions that really use the code

818
00:31:38,760 --> 00:31:40,919
of the oblivious transfer protocol in

819
00:31:40,919 --> 00:31:43,740
highly non-trivial ways

820
00:31:43,740 --> 00:31:44,399
um

821
00:31:44,399 --> 00:31:46,020
so what do we know in the Black Box

822
00:31:46,020 --> 00:31:48,899
setting for MPC we know that two round

823
00:31:48,899 --> 00:31:51,779
adaptive OT which is maliciously secure

824
00:31:51,779 --> 00:31:54,360
OT that satisfies some extra adaptivity

825
00:31:54,360 --> 00:31:56,700
properties can be used to build three

826
00:31:56,700 --> 00:31:59,700
round multi-party computation protocols

827
00:31:59,700 --> 00:32:02,039
um and we also know uh so that was by a

828
00:32:02,039 --> 00:32:04,320
work of Patra and srinivasan and we also

829
00:32:04,320 --> 00:32:06,600
know why joint works with uh Isha

830
00:32:06,600 --> 00:32:09,539
srinivasan and Sahar that two round OT

831
00:32:09,539 --> 00:32:11,279
protocols can be used to build

832
00:32:11,279 --> 00:32:13,679
three-round MPC protocols in the random

833
00:32:13,679 --> 00:32:15,899
Oracle model as well as two round NPC

834
00:32:15,899 --> 00:32:18,240
protocols in otco relations models so

835
00:32:18,240 --> 00:32:19,980
these are idealized models that are

836
00:32:19,980 --> 00:32:21,120
different from the common reference

837
00:32:21,120 --> 00:32:24,059
string model which is what we care about

838
00:32:24,059 --> 00:32:27,480
in for the purposes of this work

839
00:32:27,480 --> 00:32:28,559
um

840
00:32:28,559 --> 00:32:31,039
what this work does is close this

841
00:32:31,039 --> 00:32:33,899
seemingly apparent Gap in particular

842
00:32:33,899 --> 00:32:36,659
removes the need for adaptive OT uh from

843
00:32:36,659 --> 00:32:39,059
the work of Patra and srinivasan and

844
00:32:39,059 --> 00:32:41,640
builds three round NPC in the CRS model

845
00:32:41,640 --> 00:32:44,279
that makes black box use of any two

846
00:32:44,279 --> 00:32:46,500
round maliciously secure OT

847
00:32:46,500 --> 00:32:48,960
now you may have observed that in the

848
00:32:48,960 --> 00:32:51,000
two-party setting we've been talking

849
00:32:51,000 --> 00:32:54,360
about two round protocols for secure

850
00:32:54,360 --> 00:32:56,220
computation on the other hand in the

851
00:32:56,220 --> 00:32:57,720
multi-party setting

852
00:32:57,720 --> 00:32:59,279
um I've been talking about three round

853
00:32:59,279 --> 00:33:02,220
protocols and there is uh there is a

854
00:33:02,220 --> 00:33:03,960
reason for this there's a lower bound of

855
00:33:03,960 --> 00:33:05,760
Apple bomb at all that rules out

856
00:33:05,760 --> 00:33:07,620
constructions of two round multi-party

857
00:33:07,620 --> 00:33:10,440
computation that for three or more

858
00:33:10,440 --> 00:33:12,840
parties that make black box use of a two

859
00:33:12,840 --> 00:33:15,539
round 40 protocol so these results on

860
00:33:15,539 --> 00:33:17,100
three round protocols actually match

861
00:33:17,100 --> 00:33:19,740
this lower bound and it is known that we

862
00:33:19,740 --> 00:33:21,779
cannot do any better

863
00:33:21,779 --> 00:33:24,299
so now let me summarize our results we

864
00:33:24,299 --> 00:33:25,919
show that in the common reference string

865
00:33:25,919 --> 00:33:28,460
model two round maliciously secure OT

866
00:33:28,460 --> 00:33:31,260
implies three round maliciously secure

867
00:33:31,260 --> 00:33:33,840
NPC uh in a black box way

868
00:33:33,840 --> 00:33:35,460
and we also show that two round

869
00:33:35,460 --> 00:33:37,919
maliciously secure OT in a black box way

870
00:33:37,919 --> 00:33:40,200
can be used to build what is called two

871
00:33:40,200 --> 00:33:43,740
round two-sided nisk now let me Define

872
00:33:43,740 --> 00:33:45,240
nisk

873
00:33:45,240 --> 00:33:47,720
this is actually short for

874
00:33:47,720 --> 00:33:50,940
non-interactive secure computation

875
00:33:50,940 --> 00:33:53,039
um the word non-interactive may be a

876
00:33:53,039 --> 00:33:54,360
little bit of a misnomer this is

877
00:33:54,360 --> 00:33:56,340
actually a two round protocol that

878
00:33:56,340 --> 00:33:59,159
allows a receiver and a sender to

879
00:33:59,159 --> 00:34:01,980
compute so two parties to compute a

880
00:34:01,980 --> 00:34:03,539
joint function on their private inputs

881
00:34:03,539 --> 00:34:07,260
by just sending a single message each

882
00:34:07,260 --> 00:34:10,679
um now one-sidedness where only one of

883
00:34:10,679 --> 00:34:13,440
the two parties receives the output is

884
00:34:13,440 --> 00:34:15,480
known from Black Box use of two round OT

885
00:34:15,480 --> 00:34:18,359
this was the result of ishai kushilovitz

886
00:34:18,359 --> 00:34:20,820
ostrovsky prabhakaran and sahai back in

887
00:34:20,820 --> 00:34:24,239
2011. on the other hand when both

888
00:34:24,239 --> 00:34:26,219
parties want to receive an output this

889
00:34:26,219 --> 00:34:28,080
becomes much more challenging

890
00:34:28,080 --> 00:34:30,540
now you may wonder why one cannot just

891
00:34:30,540 --> 00:34:33,960
run two one-sidedness in parallel one

892
00:34:33,960 --> 00:34:36,839
delivers an OT one delivers an output to

893
00:34:36,839 --> 00:34:38,820
the first party and the other delivers

894
00:34:38,820 --> 00:34:40,619
an output to the second party so let's

895
00:34:40,619 --> 00:34:42,300
just have both parties run these two

896
00:34:42,300 --> 00:34:44,460
protocols and then both get get outputs

897
00:34:44,460 --> 00:34:46,619
and we're done and indeed this works in

898
00:34:46,619 --> 00:34:48,480
the semi honest setting but in the

899
00:34:48,480 --> 00:34:51,540
malicious setting uh a key challenge is

900
00:34:51,540 --> 00:34:54,179
to ensure that adversarial parties use

901
00:34:54,179 --> 00:34:56,219
the same input across both invocations

902
00:34:56,219 --> 00:34:58,740
of this one-sidedness

903
00:34:58,740 --> 00:35:01,200
um and so we we deal with this challenge

904
00:35:01,200 --> 00:35:03,720
in this book by using and building on

905
00:35:03,720 --> 00:35:05,640
NPC in the head techniques first

906
00:35:05,640 --> 00:35:08,460
pioneered by um Isha prabhakaran sahai

907
00:35:08,460 --> 00:35:11,460
and we use these techniques to build uh

908
00:35:11,460 --> 00:35:13,440
protocols that check input consistency

909
00:35:13,440 --> 00:35:16,020
via cut and choose mechanisms and then

910
00:35:16,020 --> 00:35:18,020
compile combine the results to get

911
00:35:18,020 --> 00:35:22,500
provably correct and secure protocols

912
00:35:22,500 --> 00:35:24,960
so now let me give a quick recap of the

913
00:35:24,960 --> 00:35:28,140
IPS compiler a key tool or building

914
00:35:28,140 --> 00:35:30,780
block in this compiler is an outer

915
00:35:30,780 --> 00:35:34,079
protocol that that um that is in the

916
00:35:34,079 --> 00:35:36,180
client server setting it allows two

917
00:35:36,180 --> 00:35:38,579
clients that have sorry in this example

918
00:35:38,579 --> 00:35:40,200
we'll care about two clients this can be

919
00:35:40,200 --> 00:35:42,359
generalized to multiple clients also

920
00:35:42,359 --> 00:35:45,240
both clients have inputs private inputs

921
00:35:45,240 --> 00:35:47,040
let's say X and Y

922
00:35:47,040 --> 00:35:49,500
um and they use the help of servers to

923
00:35:49,500 --> 00:35:52,800
compute a joint function on these inputs

924
00:35:52,800 --> 00:35:54,599
um in this example again there are M

925
00:35:54,599 --> 00:35:57,359
servers each client will secret share

926
00:35:57,359 --> 00:35:59,579
their input via an appropriate threshold

927
00:35:59,579 --> 00:36:01,859
secret sharing scheme and send these

928
00:36:01,859 --> 00:36:04,380
shares to each of the M servers

929
00:36:04,380 --> 00:36:06,780
um the servers will compute some

930
00:36:06,780 --> 00:36:08,640
function on these shares

931
00:36:08,640 --> 00:36:10,920
what we require for the purposes of our

932
00:36:10,920 --> 00:36:13,619
work is that the server's computation

933
00:36:13,619 --> 00:36:15,720
should be non-interactive that means

934
00:36:15,720 --> 00:36:17,339
each of the servers should not have to

935
00:36:17,339 --> 00:36:19,560
talk to anyone they simply compute

936
00:36:19,560 --> 00:36:21,540
locally on their private shares they

937
00:36:21,540 --> 00:36:23,579
cover an output and then send these

938
00:36:23,579 --> 00:36:25,500
outputs back to the clients

939
00:36:25,500 --> 00:36:28,140
the clients that obtain these outputs Z1

940
00:36:28,140 --> 00:36:30,839
through ZM can combine them by running

941
00:36:30,839 --> 00:36:32,820
an appropriate decoding function on them

942
00:36:32,820 --> 00:36:35,040
to recover the actual output of the

943
00:36:35,040 --> 00:36:36,660
protocol which is some function f

944
00:36:36,660 --> 00:36:40,320
computed on their inputs X and Y

945
00:36:40,320 --> 00:36:42,599
um in terms of security this outer

946
00:36:42,599 --> 00:36:44,940
protocol uh we require it to satisfy

947
00:36:44,940 --> 00:36:47,820
malicious security against corruption of

948
00:36:47,820 --> 00:36:49,800
one of the clients and a constant

949
00:36:49,800 --> 00:36:52,200
fraction of servers and such a protocol

950
00:36:52,200 --> 00:36:53,780
was built in the work of

951
00:36:53,780 --> 00:36:55,380
ishaikushilovitz and paskin

952
00:36:55,380 --> 00:36:58,859
journeyatsuki in 2010.

953
00:36:58,859 --> 00:37:03,119
now the way the IPS compiler works is it

954
00:37:03,119 --> 00:37:05,160
takes this outer protocol but then

955
00:37:05,160 --> 00:37:08,040
removes the need for these servers by

956
00:37:08,040 --> 00:37:10,320
having the clients emulate each of these

957
00:37:10,320 --> 00:37:12,420
M servers in their head

958
00:37:12,420 --> 00:37:14,760
what that means is that instead of there

959
00:37:14,760 --> 00:37:16,619
being actual physical servers that do

960
00:37:16,619 --> 00:37:19,020
the computation uh the two clients the

961
00:37:19,020 --> 00:37:21,480
two parties themselves run the next

962
00:37:21,480 --> 00:37:23,280
message function of each of these

963
00:37:23,280 --> 00:37:26,700
servers by running or by invoking a semi

964
00:37:26,700 --> 00:37:28,500
honest secure two-party computation

965
00:37:28,500 --> 00:37:29,880
protocol

966
00:37:29,880 --> 00:37:32,040
um for corresponding to the function of

967
00:37:32,040 --> 00:37:33,960
each of these servers

968
00:37:33,960 --> 00:37:36,000
the semi honest Protocols are often

969
00:37:36,000 --> 00:37:38,579
called inner protocols

970
00:37:38,579 --> 00:37:39,960
now

971
00:37:39,960 --> 00:37:42,359
um one important

972
00:37:42,359 --> 00:37:45,660
one important issue here is that a

973
00:37:45,660 --> 00:37:48,599
malicious client that is running each of

974
00:37:48,599 --> 00:37:51,599
these M semi honest servers if corrupted

975
00:37:51,599 --> 00:37:53,579
can actually be cheating in all M

976
00:37:53,579 --> 00:37:54,839
executions

977
00:37:54,839 --> 00:37:57,720
and it is important to ensure that that

978
00:37:57,720 --> 00:38:00,300
does not happen if we ever want to hope

979
00:38:00,300 --> 00:38:02,520
to rely on security of the outer

980
00:38:02,520 --> 00:38:04,380
protocol because recall that the outer

981
00:38:04,380 --> 00:38:06,300
protocol was only secure against

982
00:38:06,300 --> 00:38:08,040
corruption of a constant fraction

983
00:38:08,040 --> 00:38:09,180
servers

984
00:38:09,180 --> 00:38:12,060
now these checks are performed via a

985
00:38:12,060 --> 00:38:14,160
mechanism called watch lists this

986
00:38:14,160 --> 00:38:16,680
enables both clients to do cut and

987
00:38:16,680 --> 00:38:19,380
choose checks essentially opening some

988
00:38:19,380 --> 00:38:21,180
of these semi honest secure two-party

989
00:38:21,180 --> 00:38:23,480
computation protocols and checking that

990
00:38:23,480 --> 00:38:26,880
each of the clients behaved honestly

991
00:38:26,880 --> 00:38:28,079
um

992
00:38:28,079 --> 00:38:31,260
and by combining carefully the watch

993
00:38:31,260 --> 00:38:33,119
lists as well as the inner protocols

994
00:38:33,119 --> 00:38:35,280
that are emulating servers for the outer

995
00:38:35,280 --> 00:38:38,480
protocol uh the work of ips

996
00:38:38,480 --> 00:38:40,560
helps design maliciously secure

997
00:38:40,560 --> 00:38:42,540
protocols

998
00:38:42,540 --> 00:38:44,760
now in our work

999
00:38:44,760 --> 00:38:46,980
our goal is to build round optimal

1000
00:38:46,980 --> 00:38:49,440
protocols via this mechanism so we want

1001
00:38:49,440 --> 00:38:50,700
to make sure

1002
00:38:50,700 --> 00:38:51,240
um

1003
00:38:51,240 --> 00:38:53,460
we want to make sure that running these

1004
00:38:53,460 --> 00:38:56,400
running all these uh components in

1005
00:38:56,400 --> 00:38:58,500
parallel does not introduce additional

1006
00:38:58,500 --> 00:39:00,000
round overheads

1007
00:39:00,000 --> 00:39:02,339
because of those reasons we require very

1008
00:39:02,339 --> 00:39:04,200
specific inner protocols which are the

1009
00:39:04,200 --> 00:39:06,420
semi honest protocols and in particular

1010
00:39:06,420 --> 00:39:08,400
we require them to satisfy some

1011
00:39:08,400 --> 00:39:10,680
additional properties uh the property

1012
00:39:10,680 --> 00:39:12,119
that we require is an output

1013
00:39:12,119 --> 00:39:14,099
equivocality property

1014
00:39:14,099 --> 00:39:17,040
in the case of two-sided non-interactive

1015
00:39:17,040 --> 00:39:19,800
secure computation uh which is one of

1016
00:39:19,800 --> 00:39:22,140
our results it turns out that all we

1017
00:39:22,140 --> 00:39:24,060
need in order to build an appropriate

1018
00:39:24,060 --> 00:39:27,000
inner protocol is just instantiate Yao's

1019
00:39:27,000 --> 00:39:29,640
garbling plus OT with any maliciously

1020
00:39:29,640 --> 00:39:32,579
security and that suffices

1021
00:39:32,579 --> 00:39:34,320
similarly for our multi-party

1022
00:39:34,320 --> 00:39:37,200
computation result we we build on this

1023
00:39:37,200 --> 00:39:40,200
rework of Patra and srinivasan and um

1024
00:39:40,200 --> 00:39:42,060
essentially substitute maliciously

1025
00:39:42,060 --> 00:39:44,460
Security in their protocol to get a

1026
00:39:44,460 --> 00:39:47,700
robust NPC which then suffices to

1027
00:39:47,700 --> 00:39:50,520
instantiate our inner protocols

1028
00:39:50,520 --> 00:39:53,640
another technical difficulty that we

1029
00:39:53,640 --> 00:39:55,560
encounter is that we require the watch

1030
00:39:55,560 --> 00:39:58,680
list mechanism to allow the simulator to

1031
00:39:58,680 --> 00:40:01,200
program ahead of time which executions

1032
00:40:01,200 --> 00:40:02,820
are going to be watched by malicious

1033
00:40:02,820 --> 00:40:05,339
parties in the system uh this is crucial

1034
00:40:05,339 --> 00:40:07,920
to simulation for reasons that will

1035
00:40:07,920 --> 00:40:10,079
require some time to go into and I don't

1036
00:40:10,079 --> 00:40:12,540
have the time here so please go ahead

1037
00:40:12,540 --> 00:40:15,000
and read our paper but we built this

1038
00:40:15,000 --> 00:40:16,920
type of watch list mechanism using ideas

1039
00:40:16,920 --> 00:40:20,579
from the icons result

1040
00:40:20,579 --> 00:40:24,240
I just want to start to wrap up with a

1041
00:40:24,240 --> 00:40:26,700
different perspective on what we do uh

1042
00:40:26,700 --> 00:40:28,800
so we can we can think of our work as

1043
00:40:28,800 --> 00:40:31,079
starting with simple ground optimal

1044
00:40:31,079 --> 00:40:35,160
realizations of two-sidedness and semi

1045
00:40:35,160 --> 00:40:38,280
honest MPC that make black box use of

1046
00:40:38,280 --> 00:40:41,339
any semi honest OT and now replace the

1047
00:40:41,339 --> 00:40:43,859
semi honest OT with maliciously Security

1048
00:40:43,859 --> 00:40:45,839
in these instantiations

1049
00:40:45,839 --> 00:40:48,780
and what we get as a result is a form of

1050
00:40:48,780 --> 00:40:51,300
robust MPC which is not fully

1051
00:40:51,300 --> 00:40:53,940
maliciously secure but we show via the

1052
00:40:53,940 --> 00:40:56,339
IPS compiler that's a simple application

1053
00:40:56,339 --> 00:40:58,500
of the IPS compiler that it can be

1054
00:40:58,500 --> 00:41:00,300
bootstrapped to full malicious Security

1055
00:41:00,300 --> 00:41:03,020
in a round optimal manner

1056
00:41:03,020 --> 00:41:06,540
so with that um I just want to conclude

1057
00:41:06,540 --> 00:41:08,880
with some open questions

1058
00:41:08,880 --> 00:41:11,520
um that that our work needs

1059
00:41:11,520 --> 00:41:13,560
um the first is can we obtain our

1060
00:41:13,560 --> 00:41:16,500
results by just making Black Box use of

1061
00:41:16,500 --> 00:41:18,839
two round semi honesty instead of

1062
00:41:18,839 --> 00:41:21,780
maliciously security this appears to be

1063
00:41:21,780 --> 00:41:23,160
challenging

1064
00:41:23,160 --> 00:41:25,680
um because we don't really know

1065
00:41:25,680 --> 00:41:27,800
constructions of maliciously secure OT

1066
00:41:27,800 --> 00:41:30,480
that make that blocks use of semi honest

1067
00:41:30,480 --> 00:41:33,900
Duty and there are certain challenges uh

1068
00:41:33,900 --> 00:41:35,460
that one would have to overcome in that

1069
00:41:35,460 --> 00:41:37,140
setting

1070
00:41:37,140 --> 00:41:39,060
um another question is if we can base

1071
00:41:39,060 --> 00:41:41,160
three round NPC on three round

1072
00:41:41,160 --> 00:41:43,440
maliciously security so this is not

1073
00:41:43,440 --> 00:41:45,000
something that is ruled out by the lower

1074
00:41:45,000 --> 00:41:47,160
bound of Apple bomb at all

1075
00:41:47,160 --> 00:41:49,500
um and our work in particular needs to

1076
00:41:49,500 --> 00:41:51,119
round OT

1077
00:41:51,119 --> 00:41:53,040
and then a final open question is

1078
00:41:53,040 --> 00:41:55,140
whether similar results can be obtained

1079
00:41:55,140 --> 00:41:57,720
in an OT hybrid model so our work

1080
00:41:57,720 --> 00:42:00,180
crucially relies on using the next

1081
00:42:00,180 --> 00:42:03,359
messages that the OT protocol generates

1082
00:42:03,359 --> 00:42:05,160
um on the other hand in an OT hybrid

1083
00:42:05,160 --> 00:42:06,060
model

1084
00:42:06,060 --> 00:42:08,460
um parties just have access to Ideal OTS

1085
00:42:08,460 --> 00:42:11,160
and cannot necessarily use the next

1086
00:42:11,160 --> 00:42:14,820
message function of Dot

1087
00:42:14,820 --> 00:42:16,859
um with that I would like to wrap up and

1088
00:42:16,859 --> 00:42:20,119
open the floor to any questions

1089
00:42:24,420 --> 00:42:27,260
any questions

1090
00:42:30,720 --> 00:42:32,940
um so can you obtain adaptive security

1091
00:42:32,940 --> 00:42:35,520
using the same compiler by replacing the

1092
00:42:35,520 --> 00:42:37,680
malicious secure OT with an Adaptive OT

1093
00:42:37,680 --> 00:42:39,420
like

1094
00:42:39,420 --> 00:42:40,440
um

1095
00:42:40,440 --> 00:42:42,000
so it turns out that Patra and

1096
00:42:42,000 --> 00:42:44,040
srinivasan already showed that if you

1097
00:42:44,040 --> 00:42:46,079
had an Adaptive OT then that would

1098
00:42:46,079 --> 00:42:48,540
suffice to build maliciously secure MPC

1099
00:42:48,540 --> 00:42:50,880
let me see no I mean like if you want

1100
00:42:50,880 --> 00:42:53,099
the MPC to be adaptively secure ah if

1101
00:42:53,099 --> 00:42:55,500
you want the NPC to be adaptedly secure

1102
00:42:55,500 --> 00:42:57,300
um I will have to think about it

1103
00:42:57,300 --> 00:42:59,880
probably I don't think it would be easy

1104
00:42:59,880 --> 00:43:01,920
but I'll have to think about it okay

1105
00:43:01,920 --> 00:43:04,099
thanks

1106
00:43:10,200 --> 00:43:12,859
thanks thank you

1107
00:43:48,780 --> 00:43:50,960
thank you

1108
00:43:55,020 --> 00:43:57,859
it's working

1109
00:44:00,960 --> 00:44:03,440
the next stock is MPS

1110
00:44:03,440 --> 00:44:06,359
scales NPC with small clients and large

1111
00:44:06,359 --> 00:44:10,520
ephemeral servers by anasuya acharya

1112
00:44:10,520 --> 00:44:15,200
Vladimir kolasnikov and Manoj Baruch

1113
00:44:17,460 --> 00:44:21,119
okay hi everyone so this talk is about

1114
00:44:21,119 --> 00:44:23,760
um NPC with a specialized communication

1115
00:44:23,760 --> 00:44:24,960
patterns

1116
00:44:24,960 --> 00:44:27,540
and this is the recent and a very

1117
00:44:27,540 --> 00:44:29,640
exciting line of work

1118
00:44:29,640 --> 00:44:32,940
uh well essentially we have a large pool

1119
00:44:32,940 --> 00:44:35,099
of parties

1120
00:44:35,099 --> 00:44:39,660
um or workers that we choose from uh to

1121
00:44:39,660 --> 00:44:43,740
perform our computation and um and I

1122
00:44:43,740 --> 00:44:46,380
mean this this line of work is basically

1123
00:44:46,380 --> 00:44:49,740
driven or motivated by um

1124
00:44:49,740 --> 00:44:53,460
by blockchain based platforms that

1125
00:44:53,460 --> 00:44:57,900
um are becoming uh more and more popular

1126
00:44:57,900 --> 00:45:01,500
okay oh sorry wrong way okay

1127
00:45:01,500 --> 00:45:04,440
so one of the Pioneers

1128
00:45:04,440 --> 00:45:07,260
um of this line works is a paper that

1129
00:45:07,260 --> 00:45:09,599
introduced the also model it also sends

1130
00:45:09,599 --> 00:45:11,960
for you only speak once

1131
00:45:11,960 --> 00:45:16,319
and uh uh and most relevant uh word to

1132
00:45:16,319 --> 00:45:19,440
to our work and here the parties

1133
00:45:19,440 --> 00:45:22,680
basically uh come online for a very

1134
00:45:22,680 --> 00:45:24,359
short period of time

1135
00:45:24,359 --> 00:45:26,700
and they only uh produce a single

1136
00:45:26,700 --> 00:45:28,920
message so to come and participate in a

1137
00:45:28,920 --> 00:45:30,900
second round of the protocol

1138
00:45:30,900 --> 00:45:32,460
so basically they they come online

1139
00:45:32,460 --> 00:45:36,180
they've been elected somehow uh uh come

1140
00:45:36,180 --> 00:45:38,900
online produce or compute their message

1141
00:45:38,900 --> 00:45:40,980
send it to

1142
00:45:40,980 --> 00:45:46,140
um and unspecified receiver and then

1143
00:45:46,140 --> 00:45:47,700
go offline

1144
00:45:47,700 --> 00:45:50,819
and another feature of this uh of this

1145
00:45:50,819 --> 00:45:53,040
protocol is that um

1146
00:45:53,040 --> 00:45:57,000
it allows to avoid adaptive Corruptions

1147
00:45:57,000 --> 00:46:00,240
which pose a real threat in large scale

1148
00:46:00,240 --> 00:46:04,680
and long-term MPC protocols so we also

1149
00:46:04,680 --> 00:46:07,740
or this paper was the first showing how

1150
00:46:07,740 --> 00:46:11,040
we can avoid such threats

1151
00:46:11,040 --> 00:46:13,560
but this model also had some

1152
00:46:13,560 --> 00:46:16,079
restrictions or limitations

1153
00:46:16,079 --> 00:46:17,819
for one

1154
00:46:17,819 --> 00:46:20,640
um it requires choosing

1155
00:46:20,640 --> 00:46:24,480
um at least one set of Committee of of

1156
00:46:24,480 --> 00:46:27,599
Cardiff to perform the next round of the

1157
00:46:27,599 --> 00:46:28,800
computation

1158
00:46:28,800 --> 00:46:31,859
and this adds a slight complication to

1159
00:46:31,859 --> 00:46:33,839
the protocol because the protocol maths

1160
00:46:33,839 --> 00:46:37,079
introduced such a mechanism

1161
00:46:37,079 --> 00:46:40,980
also it supports uh only supports honest

1162
00:46:40,980 --> 00:46:44,460
majority so meaning the uh threshold

1163
00:46:44,460 --> 00:46:48,720
corruption uh within a committee uh or

1164
00:46:48,720 --> 00:46:51,060
ecclesiastary can corrupt less than half

1165
00:46:51,060 --> 00:46:54,119
of the court is and that means that it

1166
00:46:54,119 --> 00:46:56,700
requires even a stronger

1167
00:46:56,700 --> 00:47:00,060
um or stricter honest majority on the

1168
00:47:00,060 --> 00:47:03,180
entire set of pools

1169
00:47:03,180 --> 00:47:06,480
so the question is whether we can uh

1170
00:47:06,480 --> 00:47:11,180
eliminate or avoid these restriction

1171
00:47:12,440 --> 00:47:16,619
so in this in this paper we introduce

1172
00:47:16,619 --> 00:47:20,520
um a new model called scales

1173
00:47:20,520 --> 00:47:24,000
um which likely tweaks the yoso model

1174
00:47:24,000 --> 00:47:25,560
in what sense

1175
00:47:25,560 --> 00:47:29,160
so we distinct two set of parties we

1176
00:47:29,160 --> 00:47:31,619
have the client which will be the input

1177
00:47:31,619 --> 00:47:33,240
provider

1178
00:47:33,240 --> 00:47:36,119
and there will be lightweight uh uh

1179
00:47:36,119 --> 00:47:39,300
machines that are not expected to work

1180
00:47:39,300 --> 00:47:40,560
much

1181
00:47:40,560 --> 00:47:42,960
and on the other hand we have the set of

1182
00:47:42,960 --> 00:47:46,200
servers which are the heavy machine will

1183
00:47:46,200 --> 00:47:48,420
perform and will perform the bulk of the

1184
00:47:48,420 --> 00:47:49,859
computation

1185
00:47:49,859 --> 00:47:52,619
the tweaking to the model is that the

1186
00:47:52,619 --> 00:47:55,140
input providers or the clients are going

1187
00:47:55,140 --> 00:47:57,000
to speak twice

1188
00:47:57,000 --> 00:47:59,099
once at the beginning of the protocol

1189
00:47:59,099 --> 00:48:02,040
and once at the end of the program

1190
00:48:02,040 --> 00:48:04,800
and that will buy us our mileage in a

1191
00:48:04,800 --> 00:48:06,599
sense that

1192
00:48:06,599 --> 00:48:10,020
um our protocol or protocol we're going

1193
00:48:10,020 --> 00:48:12,300
to construct this model will actually

1194
00:48:12,300 --> 00:48:15,300
support dishonest majority it will be

1195
00:48:15,300 --> 00:48:18,060
sufficient that only a single server

1196
00:48:18,060 --> 00:48:20,579
will be honest

1197
00:48:20,579 --> 00:48:24,839
we're going to rely only on a bulletin

1198
00:48:24,839 --> 00:48:27,839
board no setup assumption

1199
00:48:27,839 --> 00:48:29,880
and you can think of it maybe as

1200
00:48:29,880 --> 00:48:32,700
sort of the minimal assumption in MPC

1201
00:48:32,700 --> 00:48:35,220
protocols that replaces point-to-point

1202
00:48:35,220 --> 00:48:38,839
channels in the traditional MPC program

1203
00:48:38,839 --> 00:48:43,319
and uh um for some applications we might

1204
00:48:43,319 --> 00:48:45,060
even do with a constant number of

1205
00:48:45,060 --> 00:48:48,420
servers even as small as two

1206
00:48:48,420 --> 00:48:50,160
so that's great

1207
00:48:50,160 --> 00:48:52,920
I mean I'm going to talk about scales in

1208
00:48:52,920 --> 00:48:55,140
this in this presentation but there are

1209
00:48:55,140 --> 00:48:57,960
other applications that uh uh we

1210
00:48:57,960 --> 00:48:59,700
consider in in the papers you can see

1211
00:48:59,700 --> 00:49:01,920
the paper for more

1212
00:49:01,920 --> 00:49:06,180
okay and uh in order to uh to construct

1213
00:49:06,180 --> 00:49:09,180
a scales protocol we Define and

1214
00:49:09,180 --> 00:49:11,760
construct three building blocks which

1215
00:49:11,760 --> 00:49:12,599
I'm

1216
00:49:12,599 --> 00:49:15,720
slightly patch in your stock

1217
00:49:15,720 --> 00:49:16,500
um

1218
00:49:16,500 --> 00:49:18,839
we have a strong a key and message or

1219
00:49:18,839 --> 00:49:20,760
morphic encryption which I'll explain a

1220
00:49:20,760 --> 00:49:23,700
little bit later uh re-randomize the

1221
00:49:23,700 --> 00:49:25,859
re-randomizable government schemes which

1222
00:49:25,859 --> 00:49:27,900
is the main building block and

1223
00:49:27,900 --> 00:49:30,359
incremental uh decomposable randomizing

1224
00:49:30,359 --> 00:49:31,200
code

1225
00:49:31,200 --> 00:49:32,880
I just want to say that these

1226
00:49:32,880 --> 00:49:35,520
obstructions helped also to fix a a

1227
00:49:35,520 --> 00:49:38,579
small bag in the proof of a previous

1228
00:49:38,579 --> 00:49:41,400
work by Gentry it out which we also rely

1229
00:49:41,400 --> 00:49:43,980
heavily in our work

1230
00:49:43,980 --> 00:49:47,819
foreign so just pictorially

1231
00:49:47,819 --> 00:49:49,920
how does a protocol

1232
00:49:49,920 --> 00:49:52,800
uh look like in the scale model so we

1233
00:49:52,800 --> 00:49:57,000
have an initial server server School uh

1234
00:49:57,000 --> 00:49:59,940
which could be uh

1235
00:49:59,940 --> 00:50:02,520
corrupted to some extent

1236
00:50:02,520 --> 00:50:05,220
and we have the clients or the input

1237
00:50:05,220 --> 00:50:07,200
providers

1238
00:50:07,200 --> 00:50:10,079
and to run a scales protocol they will

1239
00:50:10,079 --> 00:50:14,220
uh start by publishing their first

1240
00:50:14,220 --> 00:50:16,140
message on the bulletin board this

1241
00:50:16,140 --> 00:50:19,560
message depends on their input

1242
00:50:19,560 --> 00:50:25,020
next we have a sequence of servers being

1243
00:50:25,020 --> 00:50:27,900
nominated or nominated themselves

1244
00:50:27,900 --> 00:50:31,680
and I mean coming up reading the content

1245
00:50:31,680 --> 00:50:34,140
of the bulletin board and Publishing

1246
00:50:34,140 --> 00:50:35,819
their message

1247
00:50:35,819 --> 00:50:40,020
and then after this is done the uh the

1248
00:50:40,020 --> 00:50:43,380
clients publish their second message and

1249
00:50:43,380 --> 00:50:45,720
out of all this data on the Boolean

1250
00:50:45,720 --> 00:50:49,260
boards it could be publicly sorry the

1251
00:50:49,260 --> 00:50:51,900
decoding of the the functions it could

1252
00:50:51,900 --> 00:50:56,059
be publicly extracted

1253
00:50:56,220 --> 00:51:00,359
so uh our protocol achieves semione

1254
00:51:00,359 --> 00:51:01,740
security

1255
00:51:01,740 --> 00:51:05,400
and uh in terms of uh security features

1256
00:51:05,400 --> 00:51:08,640
as I was saying uh we support honest

1257
00:51:08,640 --> 00:51:12,480
majority sorry dishonest majority we

1258
00:51:12,480 --> 00:51:15,059
only require a single corrupted server

1259
00:51:15,059 --> 00:51:16,859
no restrictions whatsoever on the client

1260
00:51:16,859 --> 00:51:18,960
could they could also conclude with the

1261
00:51:18,960 --> 00:51:20,040
server

1262
00:51:20,040 --> 00:51:23,460
and for the servers we also achieve uh

1263
00:51:23,460 --> 00:51:26,220
the yosel style adaptive Corruptions

1264
00:51:26,220 --> 00:51:28,440
while the client could also be

1265
00:51:28,440 --> 00:51:31,380
adaptively corrupted by plugging in the

1266
00:51:31,380 --> 00:51:34,020
right uh building block so we're using

1267
00:51:34,020 --> 00:51:37,079
OT we're using uh receivers that uh

1268
00:51:37,079 --> 00:51:38,880
adapted with secure OT you can get

1269
00:51:38,880 --> 00:51:40,880
adaptive security

1270
00:51:40,880 --> 00:51:44,160
and in terms of features just just

1271
00:51:44,160 --> 00:51:47,400
summarize what I was saying uh uh one on

1272
00:51:47,400 --> 00:51:50,640
a server overall is sufficient you could

1273
00:51:50,640 --> 00:51:52,680
do also with a constant number of

1274
00:51:52,680 --> 00:51:54,480
servers

1275
00:51:54,480 --> 00:51:57,059
um each server publishes the single

1276
00:51:57,059 --> 00:51:59,760
message and is also compatible with

1277
00:51:59,760 --> 00:52:03,300
random cell selection process the server

1278
00:52:03,300 --> 00:52:05,099
can nominate itself

1279
00:52:05,099 --> 00:52:07,440
that's fine as long as an honest server

1280
00:52:07,440 --> 00:52:11,099
uh I mean within the this process also

1281
00:52:11,099 --> 00:52:12,480
nominated itself

1282
00:52:12,480 --> 00:52:15,119
and for the clients as I was saying

1283
00:52:15,119 --> 00:52:18,960
their computation is small small in a

1284
00:52:18,960 --> 00:52:21,119
sense that it is only proportional to

1285
00:52:21,119 --> 00:52:23,160
their input size and the number of

1286
00:52:23,160 --> 00:52:25,740
servers but not the number of clients

1287
00:52:25,740 --> 00:52:29,339
and they uh a useful feature they can

1288
00:52:29,339 --> 00:52:33,660
actually agree when to uh or dynamically

1289
00:52:33,660 --> 00:52:36,480
control when to publish their second

1290
00:52:36,480 --> 00:52:39,540
message and therefore end the the

1291
00:52:39,540 --> 00:52:42,119
process made or the computation made by

1292
00:52:42,119 --> 00:52:43,740
the service

1293
00:52:43,740 --> 00:52:46,339
foreign

1294
00:52:48,440 --> 00:52:51,920
object for scales

1295
00:52:51,920 --> 00:52:54,480
re-randomizable gardening schemes let's

1296
00:52:54,480 --> 00:52:56,900
start with what you're familiar with

1297
00:52:56,900 --> 00:52:59,760
gambling schemes and recall the

1298
00:52:59,760 --> 00:53:03,000
abstraction by belarid Owl so we have

1299
00:53:03,000 --> 00:53:06,180
let's say very roughly two main entities

1300
00:53:06,180 --> 00:53:09,200
a governor and evaluator the garbler

1301
00:53:09,200 --> 00:53:11,760
basically takes a description of the

1302
00:53:11,760 --> 00:53:15,000
function and outputs the some sort of

1303
00:53:15,000 --> 00:53:18,119
encoding of this function and also the

1304
00:53:18,119 --> 00:53:20,579
input encoding right it is the encoding

1305
00:53:20,579 --> 00:53:25,559
of uh uh of the input to uh uh the

1306
00:53:25,559 --> 00:53:27,000
gardening scale

1307
00:53:27,000 --> 00:53:31,500
an evaluator will take the uh function

1308
00:53:31,500 --> 00:53:35,280
encoding and in encoding that depends on

1309
00:53:35,280 --> 00:53:39,180
the inputs and will produce or if I mean

1310
00:53:39,180 --> 00:53:43,020
the evaluation phase will produce the uh

1311
00:53:43,020 --> 00:53:44,760
the output

1312
00:53:44,760 --> 00:53:49,200
uh well specifically We Care in this

1313
00:53:49,200 --> 00:53:52,680
work uh about projective uh Goblin uh

1314
00:53:52,680 --> 00:53:57,300
schemes uh where the encoding of uh of

1315
00:53:57,300 --> 00:54:02,540
each bit in the input is independent

1316
00:54:02,640 --> 00:54:05,579
okay so what are we randomizable Goblin

1317
00:54:05,579 --> 00:54:09,480
skin now we add an additional entity a

1318
00:54:09,480 --> 00:54:12,599
re-randomizer this re-randomizer takes

1319
00:54:12,599 --> 00:54:16,440
uh an encoding a function encoding and

1320
00:54:16,440 --> 00:54:19,980
outputs anyone a fresh one

1321
00:54:19,980 --> 00:54:25,380
it also outputs you see this is Pi Pi is

1322
00:54:25,380 --> 00:54:25,980
um

1323
00:54:25,980 --> 00:54:28,200
some transformation that should be

1324
00:54:28,200 --> 00:54:32,598
applied on the input encoding

1325
00:54:32,640 --> 00:54:37,200
security wise we want this uh

1326
00:54:37,200 --> 00:54:39,300
re-randomized

1327
00:54:39,300 --> 00:54:41,640
uh gargling scheme

1328
00:54:41,640 --> 00:54:43,740
to look fresh

1329
00:54:43,740 --> 00:54:46,619
or took indistinguishable from a fresh

1330
00:54:46,619 --> 00:54:49,800
garbling even if a garbler and an

1331
00:54:49,800 --> 00:54:52,760
evaluator could

1332
00:54:53,880 --> 00:54:55,020
and

1333
00:54:55,020 --> 00:54:57,359
um so one way to think of a randomizable

1334
00:54:57,359 --> 00:55:00,900
carbon schemes think of it as um as a

1335
00:55:00,900 --> 00:55:03,660
distributive garbling but of the special

1336
00:55:03,660 --> 00:55:05,420
case of disabled traveling work

1337
00:55:05,420 --> 00:55:08,640
Randomness is indeed a secret shared

1338
00:55:08,640 --> 00:55:11,400
among the among the parties but the

1339
00:55:11,400 --> 00:55:15,780
process to generate the final Goblin is

1340
00:55:15,780 --> 00:55:17,400
sequential

1341
00:55:17,400 --> 00:55:19,980
so this is what uh this may be the

1342
00:55:19,980 --> 00:55:22,040
source of the name of incremental

1343
00:55:22,040 --> 00:55:24,440
randomizing coding because there's some

1344
00:55:24,440 --> 00:55:28,079
incremental process that each party adds

1345
00:55:28,079 --> 00:55:31,500
or contributes its own Randomness to the

1346
00:55:31,500 --> 00:55:34,619
final government scheme

1347
00:55:34,619 --> 00:55:36,180
good

1348
00:55:36,180 --> 00:55:39,180
okay so

1349
00:55:39,180 --> 00:55:39,800
um

1350
00:55:39,800 --> 00:55:44,520
constructing uh uh such a such an

1351
00:55:44,520 --> 00:55:46,079
instance

1352
00:55:46,079 --> 00:55:49,319
um has been shown already or appeared in

1353
00:55:49,319 --> 00:55:51,300
the literature in the same with Gentry

1354
00:55:51,300 --> 00:55:54,240
halevi content paper

1355
00:55:54,240 --> 00:55:57,420
um implicitly I mean they call it a real

1356
00:55:57,420 --> 00:56:01,380
randomizable XP and let me describe the

1357
00:56:01,380 --> 00:56:03,300
construction here

1358
00:56:03,300 --> 00:56:07,079
okay so when we have a garbage circuit

1359
00:56:07,079 --> 00:56:10,380
basically we choose two labels or two

1360
00:56:10,380 --> 00:56:13,579
keys per wire

1361
00:56:14,040 --> 00:56:15,300
right good

1362
00:56:15,300 --> 00:56:16,800
now

1363
00:56:16,800 --> 00:56:17,880
um

1364
00:56:17,880 --> 00:56:22,680
if you recall the way uh um like

1365
00:56:22,680 --> 00:56:27,059
plastic Goblin schemes work is that

1366
00:56:27,059 --> 00:56:31,619
um every uh pair of input keys or input

1367
00:56:31,619 --> 00:56:34,859
tables are used to encrypt the

1368
00:56:34,859 --> 00:56:37,319
corresponding output label the output

1369
00:56:37,319 --> 00:56:39,720
label that corresponds to the result of

1370
00:56:39,720 --> 00:56:43,380
the computation on this particular gate

1371
00:56:43,380 --> 00:56:47,400
so we have a set of ciphertexts and now

1372
00:56:47,400 --> 00:56:49,859
we want to re-randomize them so what do

1373
00:56:49,859 --> 00:56:52,859
you do you use homographic encryption

1374
00:56:52,859 --> 00:56:55,260
right because it has re-randomizing

1375
00:56:55,260 --> 00:56:57,800
properties

1376
00:56:59,220 --> 00:57:00,900
not that simple

1377
00:57:00,900 --> 00:57:05,700
because uh you need to recall that each

1378
00:57:05,700 --> 00:57:09,660
label play plays two roles in a goblin

1379
00:57:09,660 --> 00:57:11,880
scheme it plays a role of a plain text

1380
00:57:11,880 --> 00:57:14,940
and it plays a role of the key right

1381
00:57:14,940 --> 00:57:18,559
so if you want to randomize a ciphertext

1382
00:57:18,559 --> 00:57:21,900
or a gate we need to make sure we

1383
00:57:21,900 --> 00:57:25,440
randomize both the plaintiffs and the

1384
00:57:25,440 --> 00:57:27,540
keys

1385
00:57:27,540 --> 00:57:30,480
so uh so that's why we need both the

1386
00:57:30,480 --> 00:57:32,339
keys and the message to be uh

1387
00:57:32,339 --> 00:57:34,559
homomorphic with respect to the

1388
00:57:34,559 --> 00:57:37,559
encrypting scheme I just want to say we

1389
00:57:37,559 --> 00:57:39,240
don't need polio morphic encryption

1390
00:57:39,240 --> 00:57:43,140
because it sometimes confuses uh people

1391
00:57:43,140 --> 00:57:45,240
they think we need something that strong

1392
00:57:45,240 --> 00:57:48,599
no it's sufficient we need a much weaker

1393
00:57:48,599 --> 00:57:51,240
notion additive geomorphic encryption is

1394
00:57:51,240 --> 00:57:54,980
enough but the extra property of key

1395
00:57:54,980 --> 00:57:59,040
event organizations is required as well

1396
00:57:59,040 --> 00:58:02,940
so now if you uh you take a look so

1397
00:58:02,940 --> 00:58:04,200
basically

1398
00:58:04,200 --> 00:58:07,740
the river organization process works by

1399
00:58:07,740 --> 00:58:12,059
uh applying a transformation on the uh

1400
00:58:12,059 --> 00:58:16,440
both the input tables and the outputated

1401
00:58:16,440 --> 00:58:17,760
and

1402
00:58:17,760 --> 00:58:21,420
um and this goes a gate by gate in the

1403
00:58:21,420 --> 00:58:24,059
rear randomization process um neglecting

1404
00:58:24,059 --> 00:58:26,700
a lot a lot of technical details how it

1405
00:58:26,700 --> 00:58:29,040
is done but just imagine there is a

1406
00:58:29,040 --> 00:58:30,660
class of Transformations that could be

1407
00:58:30,660 --> 00:58:35,220
applied on this set of certificates

1408
00:58:35,220 --> 00:58:38,640
creating fresh psychotics

1409
00:58:38,640 --> 00:58:43,260
and um if going back to uh uh to our

1410
00:58:43,260 --> 00:58:47,819
picture of uh uh uh RGS randomizable

1411
00:58:47,819 --> 00:58:50,760
carbon scheme we also need to provide or

1412
00:58:50,760 --> 00:58:52,920
need to make sure that

1413
00:58:52,920 --> 00:58:59,160
sorry that we uh um apply at this a

1414
00:58:59,160 --> 00:59:01,200
consistent transformation on the input

1415
00:59:01,200 --> 00:59:02,760
encoding

1416
00:59:02,760 --> 00:59:06,119
so uh so how do you do that

1417
00:59:06,119 --> 00:59:09,540
so remember everything is going to be on

1418
00:59:09,540 --> 00:59:11,160
the bulletin board

1419
00:59:11,160 --> 00:59:15,359
so as part of each uh encoder message

1420
00:59:15,359 --> 00:59:17,400
and call your message

1421
00:59:17,400 --> 00:59:21,180
it will provide the encryptions of the

1422
00:59:21,180 --> 00:59:24,960
input labels to the goblin scheme

1423
00:59:24,960 --> 00:59:27,980
so this type protects are going to be

1424
00:59:27,980 --> 00:59:32,280
re-randomized along the process as well

1425
00:59:32,280 --> 00:59:35,040
so here we say if you look at here what

1426
00:59:35,040 --> 00:59:37,099
we say basically

1427
00:59:37,099 --> 00:59:41,400
the keys that are used to encrypt those

1428
00:59:41,400 --> 00:59:45,660
labels are basically what we're going to

1429
00:59:45,660 --> 00:59:49,500
use as inputs to the OT right

1430
00:59:49,500 --> 00:59:52,260
somewhere you're going to be an OT that

1431
00:59:52,260 --> 00:59:55,760
will allow the client to obtain the the

1432
00:59:55,760 --> 00:59:58,500
corresponding input labels so that later

1433
00:59:58,500 --> 01:00:01,319
someone can evaluate the final garment

1434
01:00:01,319 --> 01:00:02,460
scheme

1435
01:00:02,460 --> 01:00:05,400
so these keys that encrypt the input

1436
01:00:05,400 --> 01:00:09,359
labels will be set as an input to the OT

1437
01:00:09,359 --> 01:00:10,559
phase

1438
01:00:10,559 --> 01:00:13,380
and now by the way this encryption

1439
01:00:13,380 --> 01:00:16,020
scheme is slightly weaker than what we

1440
01:00:16,020 --> 01:00:18,359
need to the actual government scheme

1441
01:00:18,359 --> 01:00:20,579
because here we only encrypt the input

1442
01:00:20,579 --> 01:00:21,960
labels

1443
01:00:21,960 --> 01:00:25,099
and uh as part of

1444
01:00:25,099 --> 01:00:27,359
re-randomizing the problem scheme or

1445
01:00:27,359 --> 01:00:28,980
this transformation

1446
01:00:28,980 --> 01:00:33,000
the server or each server also applies

1447
01:00:33,000 --> 01:00:35,640
the corresponding transformation on this

1448
01:00:35,640 --> 01:00:37,079
set of

1449
01:00:37,079 --> 01:00:40,559
right so here if you have a set of

1450
01:00:40,559 --> 01:00:43,440
ciphertext the first we apply the

1451
01:00:43,440 --> 01:00:45,299
transformation on the set of plain texts

1452
01:00:45,299 --> 01:00:49,200
and then on the set of keys coming

1453
01:00:49,200 --> 01:00:53,419
okay sorry wrapping up

1454
01:00:53,819 --> 01:00:58,319
so uh let me skip uh uh um give protocol

1455
01:00:58,319 --> 01:01:01,040
and

1456
01:01:01,640 --> 01:01:03,839
and uh

1457
01:01:03,839 --> 01:01:06,720
um so just one sentence performing wise

1458
01:01:06,720 --> 01:01:08,640
there's a trade-off between yoso and

1459
01:01:08,640 --> 01:01:11,160
scales computation and communication and

1460
01:01:11,160 --> 01:01:13,500
number of rounds see everything in the

1461
01:01:13,500 --> 01:01:17,280
paper open problems this paper leaves a

1462
01:01:17,280 --> 01:01:20,819
lot a lot a lot of open problems uh how

1463
01:01:20,819 --> 01:01:24,119
to construct better schemes uh achieve

1464
01:01:24,119 --> 01:01:27,780
stronger security and even go below uh

1465
01:01:27,780 --> 01:01:31,200
uh maybe constructing sublinear rear

1466
01:01:31,200 --> 01:01:32,700
randomizing

1467
01:01:32,700 --> 01:01:35,419
thank you

1468
01:01:38,180 --> 01:01:40,559
so I think we'll take the questions off

1469
01:01:40,559 --> 01:01:42,799
that

