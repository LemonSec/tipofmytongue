1
00:00:00,000 --> 00:00:03,720
everyone to this afternoon session on

2
00:00:03,720 --> 00:00:05,640
key agreement and commitments so the

3
00:00:05,640 --> 00:00:09,059
first talk is on the worst case in

4
00:00:09,059 --> 00:00:11,460
efficiency of continuous group key

5
00:00:11,460 --> 00:00:13,740
agreement that's worked by Alex uh

6
00:00:13,740 --> 00:00:16,680
Beanstalk evgenie Dotties Garrison

7
00:00:16,680 --> 00:00:19,020
Grogan Mohammed ajabadi and Paul Russell

8
00:00:19,020 --> 00:00:21,300
and Alex is going to give the talk yeah

9
00:00:21,300 --> 00:00:24,000
thanks for the introduction and thank

10
00:00:24,000 --> 00:00:25,800
you all for being here today

11
00:00:25,800 --> 00:00:28,439
uh okay so

12
00:00:28,439 --> 00:00:31,679
the motivation for this work comes from

13
00:00:31,679 --> 00:00:34,860
secure group messaging uh obviously this

14
00:00:34,860 --> 00:00:38,160
is a very real world uh primitive used

15
00:00:38,160 --> 00:00:40,020
by billions of people across many

16
00:00:40,020 --> 00:00:42,840
applications signal WhatsApp

17
00:00:42,840 --> 00:00:44,180
Etc

18
00:00:44,180 --> 00:00:46,980
uh and in fact it's gained a lot of

19
00:00:46,980 --> 00:00:49,680
attention from both the security and the

20
00:00:49,680 --> 00:00:52,559
crypto communities recently uh you know

21
00:00:52,559 --> 00:00:54,780
especially through this recent

22
00:00:54,780 --> 00:00:57,480
standardization effort of the ITF called

23
00:00:57,480 --> 00:01:01,218
uh the messaging layer security

24
00:01:01,800 --> 00:01:03,239
okay and of course the basic

25
00:01:03,239 --> 00:01:05,280
functionality is that users are in

26
00:01:05,280 --> 00:01:07,619
groups they can send messages to each

27
00:01:07,619 --> 00:01:10,439
other and also they can uh remove one

28
00:01:10,439 --> 00:01:12,780
one another from the group and add new

29
00:01:12,780 --> 00:01:15,380
users to the group

30
00:01:15,380 --> 00:01:19,439
and important for functionality is that

31
00:01:19,439 --> 00:01:21,780
users can go offline sometimes

32
00:01:21,780 --> 00:01:23,520
so if you're if you're on a plane

33
00:01:23,520 --> 00:01:26,100
obviously uh other people can

34
00:01:26,100 --> 00:01:29,460
communicate to you directly so users

35
00:01:29,460 --> 00:01:31,799
send messages some delivery service

36
00:01:31,799 --> 00:01:34,439
sitting in the middle buffers these

37
00:01:34,439 --> 00:01:36,420
messages for other users and then when

38
00:01:36,420 --> 00:01:39,540
users come online uh the server delivers

39
00:01:39,540 --> 00:01:42,360
these messages to them

40
00:01:42,360 --> 00:01:45,000
okay and of course we want Standard

41
00:01:45,000 --> 00:01:46,680
end-to-end Security with respect to

42
00:01:46,680 --> 00:01:50,939
non-members and this includes uh those

43
00:01:50,939 --> 00:01:53,880
users that were removed right before a

44
00:01:53,880 --> 00:01:56,520
message were sent what was sent and also

45
00:01:56,520 --> 00:01:58,799
those that are added immediately after

46
00:01:58,799 --> 00:02:00,600
the message was sent

47
00:02:00,600 --> 00:02:03,240
okay in fact we also want some more

48
00:02:03,240 --> 00:02:05,820
robust security properties uh which I'll

49
00:02:05,820 --> 00:02:07,799
talk about on the next slide

50
00:02:07,799 --> 00:02:10,500
uh but first I just want to mention that

51
00:02:10,500 --> 00:02:13,500
uh continuous group key agreement or cgk

52
00:02:13,500 --> 00:02:16,680
from the title slide uh is at the core

53
00:02:16,680 --> 00:02:19,440
of secure group messaging and so

54
00:02:19,440 --> 00:02:21,599
basically for each add and remove

55
00:02:21,599 --> 00:02:25,200
operation uh it creates a new shared

56
00:02:25,200 --> 00:02:28,500
secret which only the current uh members

57
00:02:28,500 --> 00:02:31,500
of the group use to encrypt messages and

58
00:02:31,500 --> 00:02:33,680
more

59
00:02:34,200 --> 00:02:36,239
okay so now let me talk about this

60
00:02:36,239 --> 00:02:37,620
additional security

61
00:02:37,620 --> 00:02:40,140
so this is security uh with respect to

62
00:02:40,140 --> 00:02:41,700
state leakages

63
00:02:41,700 --> 00:02:44,700
uh and what what I mean by this is if we

64
00:02:44,700 --> 00:02:48,120
have this uh timeline of of the session

65
00:02:48,120 --> 00:02:49,440
at the bottom

66
00:02:49,440 --> 00:02:52,680
uh we uh the adverse degree can say at

67
00:02:52,680 --> 00:02:56,099
time equals four uh

68
00:02:56,099 --> 00:02:58,980
I want to corrupt some user

69
00:02:58,980 --> 00:03:01,560
and they can uh make this corruption

70
00:03:01,560 --> 00:03:05,160
last until sometime T equals eight

71
00:03:05,160 --> 00:03:08,819
okay and importantly this also includes

72
00:03:08,819 --> 00:03:12,480
uh any Randomness that the user samples

73
00:03:12,480 --> 00:03:14,819
during this time

74
00:03:14,819 --> 00:03:17,519
and so the security properties that we

75
00:03:17,519 --> 00:03:20,940
want here oh sorry and also uh because

76
00:03:20,940 --> 00:03:23,760
of this sort of corruption we also allow

77
00:03:23,760 --> 00:03:26,519
users to periodically issue these

78
00:03:26,519 --> 00:03:28,379
so-called State updates which will allow

79
00:03:28,379 --> 00:03:30,420
them to heal from these Corruptions

80
00:03:30,420 --> 00:03:33,599
Okay and like ads and removes each such

81
00:03:33,599 --> 00:03:36,180
operation uh will also create a shared

82
00:03:36,180 --> 00:03:38,360
Secret

83
00:03:38,519 --> 00:03:42,180
okay so uh the First Security property

84
00:03:42,180 --> 00:03:44,040
we want with respect to these state

85
00:03:44,040 --> 00:03:46,799
leakages is forward secrecy

86
00:03:46,799 --> 00:03:49,560
so that means from time to equal zero to

87
00:03:49,560 --> 00:03:51,480
four at the bottom

88
00:03:51,480 --> 00:03:52,920
uh

89
00:03:52,920 --> 00:03:55,080
we still want security

90
00:03:55,080 --> 00:03:57,060
even though the adversary corrupts the

91
00:03:57,060 --> 00:04:00,299
uh the user at time T equals four

92
00:04:00,299 --> 00:04:02,459
okay and then also on the other side we

93
00:04:02,459 --> 00:04:04,379
want post compromise security which is

94
00:04:04,379 --> 00:04:07,200
sort of the focus of this talk uh which

95
00:04:07,200 --> 00:04:10,980
means that once uh we reached 10 equals

96
00:04:10,980 --> 00:04:12,720
eight and the user is no longer

97
00:04:12,720 --> 00:04:13,920
corrupted

98
00:04:13,920 --> 00:04:17,459
if this user issues a state update then

99
00:04:17,459 --> 00:04:19,858
sort of everything from time to equals a

100
00:04:19,858 --> 00:04:23,659
on should now be secure again

101
00:04:24,900 --> 00:04:28,020
okay and so there are a couple of subtle

102
00:04:28,020 --> 00:04:31,320
but very important properties that come

103
00:04:31,320 --> 00:04:35,280
from this PCS notion uh the first is

104
00:04:35,280 --> 00:04:37,680
what we call double joint prevention

105
00:04:37,680 --> 00:04:40,440
so this sort of captures a scenario

106
00:04:40,440 --> 00:04:44,300
where uh maybe we have some protocol

107
00:04:44,300 --> 00:04:47,639
that instructs users to delete

108
00:04:47,639 --> 00:04:50,160
certain Randomness that they sample from

109
00:04:50,160 --> 00:04:51,540
time to time

110
00:04:51,540 --> 00:04:54,240
but maybe we have a malicious user that

111
00:04:54,240 --> 00:04:56,880
during this time period decides that

112
00:04:56,880 --> 00:04:59,280
they're going to defy the protocol and

113
00:04:59,280 --> 00:05:01,199
keep this Randomness instead of deleting

114
00:05:01,199 --> 00:05:01,979
it

115
00:05:01,979 --> 00:05:04,680
and so of course what we want is even if

116
00:05:04,680 --> 00:05:07,800
this happens and this user is removed at

117
00:05:07,800 --> 00:05:10,440
the time eight then everything uh

118
00:05:10,440 --> 00:05:12,300
everything in the future should still be

119
00:05:12,300 --> 00:05:14,400
secure

120
00:05:14,400 --> 00:05:17,400
okay and then sort of similarly

121
00:05:17,400 --> 00:05:20,639
uh maybe this user isn't malicious but

122
00:05:20,639 --> 00:05:22,020
there's some virus or some

123
00:05:22,020 --> 00:05:24,840
implementation flaw that leaks the

124
00:05:24,840 --> 00:05:27,300
sampled Randomness during this time uh

125
00:05:27,300 --> 00:05:28,919
to the adversary

126
00:05:28,919 --> 00:05:31,979
and again what we want is if this

127
00:05:31,979 --> 00:05:34,320
leakage stops and the user updates at

128
00:05:34,320 --> 00:05:36,000
time eight

129
00:05:36,000 --> 00:05:39,960
everything after time 8 should be secure

130
00:05:39,960 --> 00:05:42,240
okay

131
00:05:42,240 --> 00:05:44,400
uh so now what do we want from

132
00:05:44,400 --> 00:05:46,740
efficiency well ideally we want

133
00:05:46,740 --> 00:05:48,360
logarithmic

134
00:05:48,360 --> 00:05:51,180
uh or at least sublinear in the number

135
00:05:51,180 --> 00:05:53,460
of users of the group

136
00:05:53,460 --> 00:05:56,820
and in fact some protocols do claim

137
00:05:56,820 --> 00:05:59,400
so-called fair weather login

138
00:05:59,400 --> 00:06:01,560
and what this sort of means is that

139
00:06:01,560 --> 00:06:04,740
under some good conditions you get

140
00:06:04,740 --> 00:06:06,840
logarithmic efficiency

141
00:06:06,840 --> 00:06:09,360
but there's no worst case bound that's

142
00:06:09,360 --> 00:06:12,060
been proved for any protocols and these

143
00:06:12,060 --> 00:06:13,620
so-called fair weather conditions are

144
00:06:13,620 --> 00:06:16,259
also never really defined anywhere

145
00:06:16,259 --> 00:06:19,259
okay and in fact all known schemes

146
00:06:19,259 --> 00:06:21,780
actually have worst case linear

147
00:06:21,780 --> 00:06:25,259
communication or sorry efficiency and

148
00:06:25,259 --> 00:06:27,419
this is even for communication so not

149
00:06:27,419 --> 00:06:28,860
just computation

150
00:06:28,860 --> 00:06:31,860
uh and even holds amortized over long

151
00:06:31,860 --> 00:06:33,300
periods of time

152
00:06:33,300 --> 00:06:38,160
and the main result in this work is that

153
00:06:38,160 --> 00:06:42,240
we show any cgk scheme that's black box

154
00:06:42,240 --> 00:06:45,360
from public key encryption must suffer

155
00:06:45,360 --> 00:06:46,380
from this kind of worst case

156
00:06:46,380 --> 00:06:48,200
inefficiency

157
00:06:48,200 --> 00:06:49,740
[Music]

158
00:06:49,740 --> 00:06:53,520
okay uh so now I'll give a high level

159
00:06:53,520 --> 00:06:55,560
summary of how some of these existing

160
00:06:55,560 --> 00:06:58,319
schemes work and sort of where they go

161
00:06:58,319 --> 00:06:59,240
wrong

162
00:06:59,240 --> 00:07:02,520
uh and hopefully here also I'll be able

163
00:07:02,520 --> 00:07:05,759
to provide a lot of intuition for you

164
00:07:05,759 --> 00:07:06,900
know how our lower bound actually

165
00:07:06,900 --> 00:07:11,160
applies to any cgk scheme

166
00:07:11,160 --> 00:07:15,539
okay so basically most protocols at

167
00:07:15,539 --> 00:07:17,880
least those that claim to be efficient

168
00:07:17,880 --> 00:07:20,460
uh can be grouped into the so-called

169
00:07:20,460 --> 00:07:22,440
tree chem family

170
00:07:22,440 --> 00:07:25,259
so as you might guess these are tree

171
00:07:25,259 --> 00:07:28,440
based protocols where we have user key

172
00:07:28,440 --> 00:07:30,660
pairs at the leaves of the tree

173
00:07:30,660 --> 00:07:34,199
and then we build on top of these leaves

174
00:07:34,199 --> 00:07:37,440
where each interior

175
00:07:37,440 --> 00:07:41,400
each interior node is is a another key

176
00:07:41,400 --> 00:07:44,940
pair and at the root we have uh uh

177
00:07:44,940 --> 00:07:46,800
basically what serves as the shared

178
00:07:46,800 --> 00:07:50,539
Secret at some time t

179
00:07:50,819 --> 00:07:53,340
okay and of course the public keys can

180
00:07:53,340 --> 00:07:54,900
be known to all

181
00:07:54,900 --> 00:07:58,099
but we want this sort of Ideal invariant

182
00:07:58,099 --> 00:08:01,620
where the secret key at a given node B

183
00:08:01,620 --> 00:08:04,860
should only be known to its descendants

184
00:08:04,860 --> 00:08:08,220
so if we look at as K1 here it should be

185
00:08:08,220 --> 00:08:11,039
that only C and D know it but for

186
00:08:11,039 --> 00:08:15,620
example A and B should not know it

187
00:08:16,080 --> 00:08:18,000
okay so now for an example operation

188
00:08:18,000 --> 00:08:21,660
let's say B updates so first of all B

189
00:08:21,660 --> 00:08:24,720
will delete everything on its root sorry

190
00:08:24,720 --> 00:08:26,759
on the on the on its path from the leaf

191
00:08:26,759 --> 00:08:27,840
to the root

192
00:08:27,840 --> 00:08:31,199
then sample a new Leaf key pair

193
00:08:31,199 --> 00:08:33,360
sample a parent

194
00:08:33,360 --> 00:08:35,580
encrypt the secret key to the to the

195
00:08:35,580 --> 00:08:37,979
other child then send Paul a new wreath

196
00:08:37,979 --> 00:08:41,099
a new route and encrypt this brute

197
00:08:41,099 --> 00:08:43,380
secret to uh both of the children of the

198
00:08:43,380 --> 00:08:44,580
root

199
00:08:44,580 --> 00:08:46,380
okay and so this is nice we get log

200
00:08:46,380 --> 00:08:48,060
efficiency

201
00:08:48,060 --> 00:08:50,880
uh but now let me tell you where things

202
00:08:50,880 --> 00:08:52,680
start to go wrong

203
00:08:52,680 --> 00:08:56,160
okay so let's say that this user d

204
00:08:56,160 --> 00:08:59,580
add some K users okay and we of course

205
00:08:59,580 --> 00:09:02,100
can make k equal to Omega n

206
00:09:02,100 --> 00:09:05,279
and importantly let's assume that these

207
00:09:05,279 --> 00:09:07,380
users remain offline for a long period

208
00:09:07,380 --> 00:09:09,480
of time

209
00:09:09,480 --> 00:09:11,940
okay so we have some K users uh over

210
00:09:11,940 --> 00:09:13,080
here

211
00:09:13,080 --> 00:09:14,880
and

212
00:09:14,880 --> 00:09:17,880
the protocol is sort of vary on what to

213
00:09:17,880 --> 00:09:19,019
do here

214
00:09:19,019 --> 00:09:23,459
uh some basically just directly encrypt

215
00:09:23,459 --> 00:09:26,940
uh this secret to these K users while

216
00:09:26,940 --> 00:09:30,600
some may be more efficient schemes do

217
00:09:30,600 --> 00:09:33,600
actually build some structure here

218
00:09:33,600 --> 00:09:36,060
okay but the main thing to notice is

219
00:09:36,060 --> 00:09:38,339
that even if there is any structure here

220
00:09:38,339 --> 00:09:42,860
it's all created by this user d

221
00:09:43,620 --> 00:09:47,160
okay so now if a removes d

222
00:09:47,160 --> 00:09:49,620
because of our security properties

223
00:09:49,620 --> 00:09:53,399
we can't trust that the deletes this

224
00:09:53,399 --> 00:09:56,279
and so we have to completely throw it

225
00:09:56,279 --> 00:09:58,320
out

226
00:09:58,320 --> 00:10:01,740
okay and so what this means is that a

227
00:10:01,740 --> 00:10:05,700
needs to somehow encrypt a new secret to

228
00:10:05,700 --> 00:10:06,800
Omega k

229
00:10:06,800 --> 00:10:10,260
independent or exactly K independent

230
00:10:10,260 --> 00:10:11,959
public keys and so this should

231
00:10:11,959 --> 00:10:15,480
intuitively require uh

232
00:10:15,480 --> 00:10:17,940
Omega K communication

233
00:10:17,940 --> 00:10:20,459
and yeah so

234
00:10:20,459 --> 00:10:23,100
just to go back like

235
00:10:23,100 --> 00:10:26,760
no matter what scheme we have here

236
00:10:26,760 --> 00:10:30,120
anything that these K users know must

237
00:10:30,120 --> 00:10:32,700
have been created by this removed user

238
00:10:32,700 --> 00:10:33,660
indeed

239
00:10:33,660 --> 00:10:38,399
so yeah in in any scheme basically this

240
00:10:38,399 --> 00:10:41,279
user a is just left with communicating

241
00:10:41,279 --> 00:10:44,220
with K independent public keys and so

242
00:10:44,220 --> 00:10:47,579
this basically provides the basis of the

243
00:10:47,579 --> 00:10:51,800
even more General uh lower bound

244
00:10:52,800 --> 00:10:56,399
uh okay and then yes also we can sort of

245
00:10:56,399 --> 00:10:59,579
continue this forever so maybe after a

246
00:10:59,579 --> 00:11:02,880
removes D maybe B removes a and so on

247
00:11:02,880 --> 00:11:05,160
you have to sort of add some more users

248
00:11:05,160 --> 00:11:08,160
in between but yeah you basically you

249
00:11:08,160 --> 00:11:09,839
can continue this forever under the

250
00:11:09,839 --> 00:11:12,620
right conditions

251
00:11:13,800 --> 00:11:16,920
uh okay so now before I go into a bit

252
00:11:16,920 --> 00:11:19,019
more detail on the lower bound

253
00:11:19,019 --> 00:11:20,519
uh

254
00:11:20,519 --> 00:11:22,620
I want to recall that

255
00:11:22,620 --> 00:11:26,700
really this Omega K communication comes

256
00:11:26,700 --> 00:11:29,820
from this strong but standard PCS

257
00:11:29,820 --> 00:11:31,440
requirement we have

258
00:11:31,440 --> 00:11:34,860
because precisely we can't trust D to

259
00:11:34,860 --> 00:11:36,839
delete this old structure

260
00:11:36,839 --> 00:11:38,220
uh

261
00:11:38,220 --> 00:11:40,500
if we did then

262
00:11:40,500 --> 00:11:43,380
we could just keep this structure and we

263
00:11:43,380 --> 00:11:46,200
would always have log efficiency so it's

264
00:11:46,200 --> 00:11:49,920
really this property that uh gives us

265
00:11:49,920 --> 00:11:52,579
the lower bound

266
00:11:53,160 --> 00:11:56,220
okay so now a little bit more detail on

267
00:11:56,220 --> 00:11:57,959
the general lower bound

268
00:11:57,959 --> 00:12:00,959
uh the first step that we do is we

269
00:12:00,959 --> 00:12:03,660
abstract out a so-called compact key

270
00:12:03,660 --> 00:12:06,240
exchange primitive which exactly

271
00:12:06,240 --> 00:12:09,420
captures this communicating a press key

272
00:12:09,420 --> 00:12:13,699
to K independent public keys

273
00:12:14,279 --> 00:12:18,000
okay and sort of the main technical meat

274
00:12:18,000 --> 00:12:20,640
of our paper is showing a black box

275
00:12:20,640 --> 00:12:23,880
separation uh that shows that this

276
00:12:23,880 --> 00:12:26,339
primitive cannot be achieved black box

277
00:12:26,339 --> 00:12:29,459
from pke uh with little of K

278
00:12:29,459 --> 00:12:31,579
communication

279
00:12:31,579 --> 00:12:34,380
uh and yeah but unfortunately I don't

280
00:12:34,380 --> 00:12:36,000
really have time to go into the details

281
00:12:36,000 --> 00:12:38,519
on this too much so I'll give like uh to

282
00:12:38,519 --> 00:12:40,680
a bullet points summary

283
00:12:40,680 --> 00:12:42,420
uh

284
00:12:42,420 --> 00:12:45,000
so if this ciphertext that is

285
00:12:45,000 --> 00:12:47,220
communicated to these KU there's is

286
00:12:47,220 --> 00:12:48,680
short

287
00:12:48,680 --> 00:12:52,320
intuitively you can only really fit a

288
00:12:52,320 --> 00:12:54,240
small amount of Base public key

289
00:12:54,240 --> 00:12:58,380
ciphertext uh uh in here

290
00:12:58,380 --> 00:13:01,980
okay uh yeah and this is like mostly

291
00:13:01,980 --> 00:13:04,380
related to non-uniform random Oracle

292
00:13:04,380 --> 00:13:05,820
lower bounds

293
00:13:05,820 --> 00:13:07,560
uh

294
00:13:07,560 --> 00:13:10,260
and so because of this

295
00:13:10,260 --> 00:13:13,800
what the users have uh at their disposal

296
00:13:13,800 --> 00:13:15,839
to do to decrypt

297
00:13:15,839 --> 00:13:18,360
is basically a subset

298
00:13:18,360 --> 00:13:22,560
of the uh secret keys that can be used

299
00:13:22,560 --> 00:13:24,720
to decrypt the base public use

300
00:13:24,720 --> 00:13:27,180
ciphertext

301
00:13:27,180 --> 00:13:30,120
uh and so there's some correlation here

302
00:13:30,120 --> 00:13:31,740
because

303
00:13:31,740 --> 00:13:35,839
every each of these K users can't have

304
00:13:35,839 --> 00:13:39,600
uh each a unique secret key

305
00:13:39,600 --> 00:13:43,920
and so an adversary that's can basically

306
00:13:43,920 --> 00:13:46,800
run the initialization uh algorithm a

307
00:13:46,800 --> 00:13:49,620
bunch of times can successfully recover

308
00:13:49,620 --> 00:13:53,160
this correlation and therefore uh

309
00:13:53,160 --> 00:13:55,139
decrypt the ciphertext

310
00:13:55,139 --> 00:13:57,300
so yeah obviously it's like much more

311
00:13:57,300 --> 00:13:58,920
complicated than that but that's like

312
00:13:58,920 --> 00:14:02,519
the very high level summary

313
00:14:02,519 --> 00:14:05,160
okay and then of course the last step is

314
00:14:05,160 --> 00:14:06,620
showing that

315
00:14:06,620 --> 00:14:10,139
tgka actually implies this primitive uh

316
00:14:10,139 --> 00:14:12,959
and moreover implies it tightly in terms

317
00:14:12,959 --> 00:14:15,899
of the communication costs okay and this

318
00:14:15,899 --> 00:14:18,839
pretty much exactly corresponds to the

319
00:14:18,839 --> 00:14:20,639
sequence of operations I showed on the

320
00:14:20,639 --> 00:14:23,399
previous slides because again

321
00:14:23,399 --> 00:14:26,579
uh if B creates all this structure and

322
00:14:26,579 --> 00:14:29,639
then D is removed we can't trust any of

323
00:14:29,639 --> 00:14:31,200
the structure anymore

324
00:14:31,200 --> 00:14:34,680
okay so then yeah this this user a is

325
00:14:34,680 --> 00:14:37,200
just left with communicating 2K

326
00:14:37,200 --> 00:14:40,260
independent public Keys which is exactly

327
00:14:40,260 --> 00:14:44,519
our CK cke setting here

328
00:14:44,519 --> 00:14:46,320
uh yeah

329
00:14:46,320 --> 00:14:48,600
okay and we also generalize this a bit

330
00:14:48,600 --> 00:14:51,180
more maybe it's not just one user D that

331
00:14:51,180 --> 00:14:53,760
adds all these users maybe it's a few

332
00:14:53,760 --> 00:14:56,339
and then they all get removed and so

333
00:14:56,339 --> 00:14:59,220
yeah you get like the same flavor of

334
00:14:59,220 --> 00:15:02,399
lower bound uh maybe like slightly lower

335
00:15:02,399 --> 00:15:07,639
amortized over uh a few operations

336
00:15:08,220 --> 00:15:11,699
okay so yeah just to conclude uh we show

337
00:15:11,699 --> 00:15:14,459
that all cgk protocols black box from

338
00:15:14,459 --> 00:15:17,579
pke must suffer from this worst case

339
00:15:17,579 --> 00:15:19,500
Omega and communication

340
00:15:19,500 --> 00:15:23,399
even amortized over long periods of time

341
00:15:23,399 --> 00:15:25,860
and also in the paper we have another

342
00:15:25,860 --> 00:15:28,500
result that shows that there's no

343
00:15:28,500 --> 00:15:31,079
singles TGK protocol that can perform

344
00:15:31,079 --> 00:15:33,480
best on all sequences

345
00:15:33,480 --> 00:15:37,680
so what I mean by this is uh if you give

346
00:15:37,680 --> 00:15:39,899
me a cgk protocol

347
00:15:39,899 --> 00:15:42,600
I can always choose a sequence and there

348
00:15:42,600 --> 00:15:44,639
will be another protocol that performs

349
00:15:44,639 --> 00:15:47,160
much better on the sequence than the

350
00:15:47,160 --> 00:15:49,880
original protocol

351
00:15:50,459 --> 00:15:52,680
okay now just to leave you with some

352
00:15:52,680 --> 00:15:54,060
open problems

353
00:15:54,060 --> 00:15:57,720
uh one obvious thing is to prove the

354
00:15:57,720 --> 00:15:59,820
lower bound with respect to Stronger

355
00:15:59,820 --> 00:16:01,800
Primitives or assumptions than just pke

356
00:16:01,800 --> 00:16:04,560
I mean obviously this seems like a very

357
00:16:04,560 --> 00:16:06,779
strong primitive

358
00:16:06,779 --> 00:16:09,060
probably you need like IO or something

359
00:16:09,060 --> 00:16:11,459
to get actual like logarithmic

360
00:16:11,459 --> 00:16:14,459
efficiency for example uh so yeah this

361
00:16:14,459 --> 00:16:15,779
is a good question

362
00:16:15,779 --> 00:16:18,000
and then also on the more practical side

363
00:16:18,000 --> 00:16:20,519
can we improve better average case

364
00:16:20,519 --> 00:16:22,699
communication upper bounds

365
00:16:22,699 --> 00:16:26,279
uh but sort of the problem here is we

366
00:16:26,279 --> 00:16:27,779
don't really know what sequences are

367
00:16:27,779 --> 00:16:31,440
average necessarily and furthermore if

368
00:16:31,440 --> 00:16:33,120
you look at like the trivially good

369
00:16:33,120 --> 00:16:35,459
sequences which are like just all

370
00:16:35,459 --> 00:16:37,259
updates where we can get logarithmic

371
00:16:37,259 --> 00:16:38,519
efficiency

372
00:16:38,519 --> 00:16:40,500
these are very different from something

373
00:16:40,500 --> 00:16:42,540
like one user adds a bunch of other

374
00:16:42,540 --> 00:16:46,139
users and then is removed so sort of

375
00:16:46,139 --> 00:16:48,000
figuring out

376
00:16:48,000 --> 00:16:50,759
what sequences are average maybe has to

377
00:16:50,759 --> 00:16:53,759
come through like empirical data uh that

378
00:16:53,759 --> 00:16:55,740
we can analyze

379
00:16:55,740 --> 00:16:57,600
um and then yeah last thing and also

380
00:16:57,600 --> 00:16:58,860
just like

381
00:16:58,860 --> 00:17:02,279
this last Point kind of ties into our

382
00:17:02,279 --> 00:17:04,799
additional results because like

383
00:17:04,799 --> 00:17:08,699
every protocol sort of has to choose

384
00:17:08,699 --> 00:17:11,640
what they want to handle efficiently but

385
00:17:11,640 --> 00:17:13,500
like if you don't know which sequences

386
00:17:13,500 --> 00:17:15,780
will show up more frequently then it's

387
00:17:15,780 --> 00:17:19,020
hard to know which which sequences you

388
00:17:19,020 --> 00:17:21,419
should cater your protocol to

389
00:17:21,419 --> 00:17:25,160
um so yeah that's it thank you

390
00:17:26,069 --> 00:17:28,380
[Music]

391
00:17:28,380 --> 00:17:31,559
all right so thank you so maybe we take

392
00:17:31,559 --> 00:17:32,820
one quick question while the next

393
00:17:32,820 --> 00:17:34,260
speaker sets up since we're already a

394
00:17:34,260 --> 00:17:36,660
couple of minutes behind schedule

395
00:17:36,660 --> 00:17:39,179
so

396
00:17:39,179 --> 00:17:42,919
one question feel free to ask

397
00:17:43,980 --> 00:17:47,660
I didn't want to discourage you

398
00:17:57,260 --> 00:18:02,059
all right so please thank you

399
00:18:14,039 --> 00:18:18,780
all right so while Brent sets up let me

400
00:18:18,780 --> 00:18:20,039
introduce the talk

401
00:18:20,039 --> 00:18:21,960
so the next stroke is an Adaptive

402
00:18:21,960 --> 00:18:24,059
multi-party Nike uh strong work by

403
00:18:24,059 --> 00:18:25,799
venkata copula brand Waters and Mark

404
00:18:25,799 --> 00:18:27,720
zandry and Brent is going to give the

405
00:18:27,720 --> 00:18:29,340
talk okay

406
00:18:29,340 --> 00:18:31,500
um first yeah thanks for um uh hammy I'm

407
00:18:31,500 --> 00:18:32,700
Brent waters I'll be talking about

408
00:18:32,700 --> 00:18:35,160
adaptive multi-party non-interactive key

409
00:18:35,160 --> 00:18:37,440
exchange or um Nike

410
00:18:37,440 --> 00:18:39,600
uh so the idea of non-interactive key

411
00:18:39,600 --> 00:18:42,299
exchange is that um any subset of users

412
00:18:42,299 --> 00:18:45,179
can derive a shared secret without

413
00:18:45,179 --> 00:18:46,799
interacting with each other for example

414
00:18:46,799 --> 00:18:49,140
in this case we can imagine uh let's say

415
00:18:49,140 --> 00:18:52,620
users um and beat are able to derive K

416
00:18:52,620 --> 00:18:55,020
sub a b now if you zoom in a little bit

417
00:18:55,020 --> 00:18:56,880
more what actually happens is they'll

418
00:18:56,880 --> 00:18:58,620
both generate every single using the

419
00:18:58,620 --> 00:19:01,740
system will generate a public private

420
00:19:01,740 --> 00:19:03,539
key pair keeping the secret key to

421
00:19:03,539 --> 00:19:04,860
themselves and then posting the public

422
00:19:04,860 --> 00:19:07,080
key on the bulletin board

423
00:19:07,080 --> 00:19:09,080
um then after that uh what will happen

424
00:19:09,080 --> 00:19:12,299
is any user that has their own secret

425
00:19:12,299 --> 00:19:13,860
key along with the public keys of

426
00:19:13,860 --> 00:19:15,900
everyone else in the system can run the

427
00:19:15,900 --> 00:19:19,140
key generation procedure and come up for

428
00:19:19,140 --> 00:19:21,419
the shared secret so notice these two

429
00:19:21,419 --> 00:19:23,460
users arrive at the same point even

430
00:19:23,460 --> 00:19:25,020
though they kind of uh travel different

431
00:19:25,020 --> 00:19:27,480
ways to get there right

432
00:19:27,480 --> 00:19:29,940
um so intuitively the security says that

433
00:19:29,940 --> 00:19:31,440
um an adversary shouldn't be able to

434
00:19:31,440 --> 00:19:33,419
guess what the secret is if they don't

435
00:19:33,419 --> 00:19:35,520
own any of the users um in this

436
00:19:35,520 --> 00:19:36,840
particular set

437
00:19:36,840 --> 00:19:39,179
okay so the title of this talk is about

438
00:19:39,179 --> 00:19:41,160
adaptive security

439
00:19:41,160 --> 00:19:42,419
um so first let's uh see in a little

440
00:19:42,419 --> 00:19:44,460
more detail what this is uh this is

441
00:19:44,460 --> 00:19:45,539
going to be a game between a challenge

442
00:19:45,539 --> 00:19:47,100
and an attacker where the attacker can

443
00:19:47,100 --> 00:19:49,799
make uh multiple types of queries um the

444
00:19:49,799 --> 00:19:51,660
first one is the attacker can say hey

445
00:19:51,660 --> 00:19:53,880
please create an honest user for me in

446
00:19:53,880 --> 00:19:55,440
which case the Challenger will generate

447
00:19:55,440 --> 00:19:57,419
a key pair give the public key to the

448
00:19:57,419 --> 00:19:59,160
attacker and Mark this as uncorrupted

449
00:19:59,160 --> 00:20:01,919
for now uh the next type of query is the

450
00:20:01,919 --> 00:20:03,299
attackers could say Hey you know that

451
00:20:03,299 --> 00:20:05,280
honest user I actually want to corrupt

452
00:20:05,280 --> 00:20:07,500
them so point at their public key and

453
00:20:07,500 --> 00:20:08,700
then the Challenger will give them the

454
00:20:08,700 --> 00:20:10,020
corresponding secret key in the market

455
00:20:10,020 --> 00:20:12,360
as corrupted and then finally another

456
00:20:12,360 --> 00:20:14,400
key uh another type of query called

457
00:20:14,400 --> 00:20:16,380
generating a shared key where the

458
00:20:16,380 --> 00:20:18,360
attacker would give a um set s for some

459
00:20:18,360 --> 00:20:20,340
uncorrupted set of users and then I'll

460
00:20:20,340 --> 00:20:21,539
get to see

461
00:20:21,539 --> 00:20:24,419
um the shared shared secret K sub s and

462
00:20:24,419 --> 00:20:26,640
it can make many of these queries um can

463
00:20:26,640 --> 00:20:28,799
be in well in any order that makes sense

464
00:20:28,799 --> 00:20:31,020
at least and then after doing all this

465
00:20:31,020 --> 00:20:33,780
on the attacker comes forward with a set

466
00:20:33,780 --> 00:20:36,240
as star and the Challenger will either

467
00:20:36,240 --> 00:20:38,940
give the key for S star the shared key

468
00:20:38,940 --> 00:20:41,280
or something random and the attacker's

469
00:20:41,280 --> 00:20:42,660
job is to guess which one of these two

470
00:20:42,660 --> 00:20:44,520
situations happen and we're going to say

471
00:20:44,520 --> 00:20:45,900
it's secure as long as the advantage of

472
00:20:45,900 --> 00:20:47,760
guessing this should be um pretty like

473
00:20:47,760 --> 00:20:49,919
negligibly close to one half and we'll

474
00:20:49,919 --> 00:20:51,720
have the natural restrictions where you

475
00:20:51,720 --> 00:20:53,940
know you the set as star cannot include

476
00:20:53,940 --> 00:20:55,500
let's say a corrupted user for example

477
00:20:55,500 --> 00:20:57,480
okay

478
00:20:57,480 --> 00:20:58,740
Okay so

479
00:20:58,740 --> 00:21:00,000
um you might ask well why do I care

480
00:21:00,000 --> 00:21:01,380
about adaptive Security in this

481
00:21:01,380 --> 00:21:03,780
situation well the first one is I think

482
00:21:03,780 --> 00:21:05,460
it is the most robust definition

483
00:21:05,460 --> 00:21:07,559
possible right you know users make

484
00:21:07,559 --> 00:21:09,179
certain decisions this might impact

485
00:21:09,179 --> 00:21:11,580
their you know impact their decisions of

486
00:21:11,580 --> 00:21:13,740
what other things actions to take so on

487
00:21:13,740 --> 00:21:15,720
and so forth and I think if we're you

488
00:21:15,720 --> 00:21:17,160
know kind of honest with ourselves I

489
00:21:17,160 --> 00:21:18,840
think a notion like selective or static

490
00:21:18,840 --> 00:21:20,880
security I do believe it's meaningful

491
00:21:20,880 --> 00:21:23,640
but usually we put that out because it's

492
00:21:23,640 --> 00:21:24,720
hard to get the Adaptive definition

493
00:21:24,720 --> 00:21:26,640
right not because we thought it was the

494
00:21:26,640 --> 00:21:28,080
right thing in the in in the first place

495
00:21:28,080 --> 00:21:30,000
necessarily

496
00:21:30,000 --> 00:21:32,340
um so that's the reason also uh it's

497
00:21:32,340 --> 00:21:33,539
kind of an interesting problem that

498
00:21:33,539 --> 00:21:35,159
comes up in if we're going let's say

499
00:21:35,159 --> 00:21:38,280
from selective security to Adaptive

500
00:21:38,280 --> 00:21:40,140
um if there's a if we have end users in

501
00:21:40,140 --> 00:21:41,520
the system and we do two-party key

502
00:21:41,520 --> 00:21:43,620
exchange we have to take this uh without

503
00:21:43,620 --> 00:21:45,659
better ideas let's say we have to take

504
00:21:45,659 --> 00:21:48,659
this um N squared uh loss but when you

505
00:21:48,659 --> 00:21:49,620
want to do

506
00:21:49,620 --> 00:21:51,059
um bigger party key exchange let's say

507
00:21:51,059 --> 00:21:53,640
end user L users then your loss actually

508
00:21:53,640 --> 00:21:56,580
grows exponentially with L right and um

509
00:21:56,580 --> 00:21:58,080
this necessitates complexity leveraging

510
00:21:58,080 --> 00:22:01,320
so by exponential hardness and that part

511
00:22:01,320 --> 00:22:03,299
of type of thing so that's kind of why I

512
00:22:03,299 --> 00:22:04,980
find it interesting at least

513
00:22:04,980 --> 00:22:06,179
uh there's actually pretty rich

514
00:22:06,179 --> 00:22:09,539
literature around party uh Nike uh the

515
00:22:09,539 --> 00:22:10,620
first is obviously the famous

516
00:22:10,620 --> 00:22:12,120
diffie-hellman

517
00:22:12,120 --> 00:22:12,840
um

518
00:22:12,840 --> 00:22:15,179
a two-party key exchange protocol which

519
00:22:15,179 --> 00:22:17,120
led among other things to uh public

520
00:22:17,120 --> 00:22:19,679
cryptography so that was a good win for

521
00:22:19,679 --> 00:22:22,860
us right uh and then Jew in 2000 had

522
00:22:22,860 --> 00:22:24,600
this pretty interesting assumption you

523
00:22:24,600 --> 00:22:26,039
know we always hear about bilinear Maps

524
00:22:26,039 --> 00:22:27,299
now but at first they were thought to

525
00:22:27,299 --> 00:22:29,039
actually do bad stuff right you know

526
00:22:29,039 --> 00:22:30,539
they're in attack

527
00:22:30,539 --> 00:22:31,799
um so he was the first one who kind of

528
00:22:31,799 --> 00:22:34,140
said hey maybe we can do something more

529
00:22:34,140 --> 00:22:35,220
with that and show that you could do

530
00:22:35,220 --> 00:22:37,500
three-party key exchange and then I

531
00:22:37,500 --> 00:22:39,240
won't go

532
00:22:39,240 --> 00:22:40,740
um and then I won't go through all these

533
00:22:40,740 --> 00:22:42,299
but like coming in within the last

534
00:22:42,299 --> 00:22:43,919
decade we've seen in general for what I

535
00:22:43,919 --> 00:22:46,080
call L party key exchange things from

536
00:22:46,080 --> 00:22:49,860
multi-linear maps to obfuscation

537
00:22:49,860 --> 00:22:51,840
um usually with Selective security a

538
00:22:51,840 --> 00:22:53,940
couple of the ones at the end did claim

539
00:22:53,940 --> 00:22:56,100
some form of adaptive security but this

540
00:22:56,100 --> 00:22:57,539
was under some type of interactive

541
00:22:57,539 --> 00:23:00,179
assumption where like okay if I say this

542
00:23:00,179 --> 00:23:01,679
then I'm allowed to ask for this and

543
00:23:01,679 --> 00:23:04,380
then I can ask for that and like it's

544
00:23:04,380 --> 00:23:05,520
not just like hey I get my number

545
00:23:05,520 --> 00:23:06,960
theoretic assumption I have to solve it

546
00:23:06,960 --> 00:23:10,020
it says back and forth thing and I would

547
00:23:10,020 --> 00:23:12,780
argue at least qualitatively this isn't

548
00:23:12,780 --> 00:23:14,460
I mean it was interesting to see but

549
00:23:14,460 --> 00:23:16,559
like it's more pushing the problem of

550
00:23:16,559 --> 00:23:19,200
adaptivity into the Assumption rather

551
00:23:19,200 --> 00:23:20,760
than like you know taking a static

552
00:23:20,760 --> 00:23:22,799
assumption and trying to you know solve

553
00:23:22,799 --> 00:23:24,960
it what is what I would say

554
00:23:24,960 --> 00:23:26,280
um but there's a reason for this given

555
00:23:26,280 --> 00:23:28,440
by Rao in that she showed there was some

556
00:23:28,440 --> 00:23:30,419
uh Black Box barriers for getting

557
00:23:30,419 --> 00:23:32,940
security from uh non-interactive

558
00:23:32,940 --> 00:23:33,960
assumptions

559
00:23:33,960 --> 00:23:35,460
and

560
00:23:35,460 --> 00:23:37,919
um however it's limited to what she

561
00:23:37,919 --> 00:23:39,600
calls admissible reductions or miscible

562
00:23:39,600 --> 00:23:41,520
constructions pretty much things where

563
00:23:41,520 --> 00:23:43,740
once you publish a public key to public

564
00:23:43,740 --> 00:23:45,780
keys were published it would fix what

565
00:23:45,780 --> 00:23:48,120
the only answers could be for

566
00:23:48,120 --> 00:23:51,240
um for the shared keys right and um the

567
00:23:51,240 --> 00:23:52,679
constructions up until this point were

568
00:23:52,679 --> 00:23:55,500
admissible as she called it but you know

569
00:23:55,500 --> 00:23:56,880
what we want to ask ourselves is okay

570
00:23:56,880 --> 00:23:59,820
let's let's break out of that Paradigm

571
00:23:59,820 --> 00:24:02,700
and um see what can happen

572
00:24:02,700 --> 00:24:04,380
okay so here's our results and

573
00:24:04,380 --> 00:24:05,760
contributions

574
00:24:05,760 --> 00:24:06,900
um there's gonna be three of them

575
00:24:06,900 --> 00:24:08,400
although I'm going to just focus on one

576
00:24:08,400 --> 00:24:10,679
for this talk uh the first one is that

577
00:24:10,679 --> 00:24:12,240
we have a set of generic tools to

578
00:24:12,240 --> 00:24:14,340
simplify the problem of Nike we kind of

579
00:24:14,340 --> 00:24:16,320
reduce the case of Nike with setup to

580
00:24:16,320 --> 00:24:18,059
the case of Nike without setup or maybe

581
00:24:18,059 --> 00:24:19,380
the other way around I might be saying

582
00:24:19,380 --> 00:24:20,460
it wrong

583
00:24:20,460 --> 00:24:21,900
um and then what we do is we can also

584
00:24:21,900 --> 00:24:23,640
get we're using other techniques get rid

585
00:24:23,640 --> 00:24:26,039
of the shared key queries just to like

586
00:24:26,039 --> 00:24:28,200
um make the problem easier right simpler

587
00:24:28,200 --> 00:24:30,299
to deal with uh the middle one is what I

588
00:24:30,299 --> 00:24:32,460
want to focus on uh we show pretty close

589
00:24:32,460 --> 00:24:33,840
connection between

590
00:24:33,840 --> 00:24:36,140
um Nike and adapt what are called

591
00:24:36,140 --> 00:24:38,700
adaptively secure um constrained

592
00:24:38,700 --> 00:24:40,740
functions and we show that constraints

593
00:24:40,740 --> 00:24:42,419
functions for the special class plus

594
00:24:42,419 --> 00:24:45,059
obfuscation will give you multi-party

595
00:24:45,059 --> 00:24:47,280
Nike with um some bounded number of user

596
00:24:47,280 --> 00:24:49,380
users uh

597
00:24:49,380 --> 00:24:51,960
uh about a number of uh Corruptions and

598
00:24:51,960 --> 00:24:53,640
then we also show how to build this from

599
00:24:53,640 --> 00:24:56,159
obfuscation uh plus the decisional

600
00:24:56,159 --> 00:24:58,200
Diffie helmet problem in in non-bilinear

601
00:24:58,200 --> 00:25:00,179
groups okay then finally is a more

602
00:25:00,179 --> 00:25:02,940
direct construction uh but this talk is

603
00:25:02,940 --> 00:25:05,340
going to um focus on the middle part

604
00:25:05,340 --> 00:25:07,620
and what I like to do is do a little bit

605
00:25:07,620 --> 00:25:09,120
of a pivot here even though it talks

606
00:25:09,120 --> 00:25:11,520
about Nike uh for the rest of it I'm

607
00:25:11,520 --> 00:25:12,960
really going to talk about constrained

608
00:25:12,960 --> 00:25:14,880
prfs I'm going to kind of ask you to

609
00:25:14,880 --> 00:25:16,440
believe me that if I built this type of

610
00:25:16,440 --> 00:25:18,720
constrained prf that it would be the

611
00:25:18,720 --> 00:25:20,220
solution for non-interactive key

612
00:25:20,220 --> 00:25:23,340
exchange right so um first of all not

613
00:25:23,340 --> 00:25:26,159
con let me introduce constrained purefs

614
00:25:26,159 --> 00:25:28,380
um to people right here uh constrained

615
00:25:28,380 --> 00:25:29,880
suit random function is like a regular

616
00:25:29,880 --> 00:25:31,260
pseudo random function like we see up

617
00:25:31,260 --> 00:25:33,440
here right there's Texas input the key

618
00:25:33,440 --> 00:25:36,539
uh and the input and outputs of value y

619
00:25:36,539 --> 00:25:39,000
but what you can also do with these

620
00:25:39,000 --> 00:25:41,580
things is you can um kind of restrict

621
00:25:41,580 --> 00:25:44,340
them so if you have this master key you

622
00:25:44,340 --> 00:25:45,900
can call this constrain function along

623
00:25:45,900 --> 00:25:48,600
with a circuit C and it comes up with a

624
00:25:48,600 --> 00:25:51,299
new prf which will work on all inputs

625
00:25:51,299 --> 00:25:53,640
where C of X is equal to one okay it

626
00:25:53,640 --> 00:25:55,260
will give you that answer give you the

627
00:25:55,260 --> 00:25:57,480
same answer as the master key however if

628
00:25:57,480 --> 00:25:59,340
C of X is equal to zero

629
00:25:59,340 --> 00:26:00,900
um I really shouldn't know what the

630
00:26:00,900 --> 00:26:03,059
answer be able to compute the answer and

631
00:26:03,059 --> 00:26:05,340
moreover I cannot um distinguish it from

632
00:26:05,340 --> 00:26:07,620
a random value

633
00:26:07,620 --> 00:26:09,179
um just actually

634
00:26:09,179 --> 00:26:10,919
um uh introduced by three research about

635
00:26:10,919 --> 00:26:12,240
a decade ago

636
00:26:12,240 --> 00:26:15,539
okay so for Nike it turns out that um

637
00:26:15,539 --> 00:26:18,360
what we need is a constraint prf for

638
00:26:18,360 --> 00:26:20,460
special class of functions

639
00:26:20,460 --> 00:26:22,020
um here the inputs are going to be not

640
00:26:22,020 --> 00:26:24,360
bits but more from a larger alphabet

641
00:26:24,360 --> 00:26:26,220
let's call it Sigma and it's going to be

642
00:26:26,220 --> 00:26:27,960
L symbol so we're going to think about L

643
00:26:27,960 --> 00:26:29,460
symbols

644
00:26:29,460 --> 00:26:31,799
um over Sigma and the constraint is

645
00:26:31,799 --> 00:26:33,179
pretty simple it's just going to be

646
00:26:33,179 --> 00:26:35,820
specified by position I between 1 and L

647
00:26:35,820 --> 00:26:39,840
and uh symbol Z the idea being like uh

648
00:26:39,840 --> 00:26:41,700
if the ice position of the input is

649
00:26:41,700 --> 00:26:43,740
equal to Z then you can figure out the

650
00:26:43,740 --> 00:26:46,799
prf and if it's not you can't and that's

651
00:26:46,799 --> 00:26:49,740
uh that's it right so that's the

652
00:26:49,740 --> 00:26:50,700
constraint that we're going to be

653
00:26:50,700 --> 00:26:52,679
interested in and you'll um due to lack

654
00:26:52,679 --> 00:26:53,880
of time you'll have to kind of believe

655
00:26:53,880 --> 00:26:57,299
me that this is uh useful for Nike

656
00:26:57,299 --> 00:26:59,100
okay so if we kind of figure out the

657
00:26:59,100 --> 00:27:01,440
security game for constrained prfs for

658
00:27:01,440 --> 00:27:03,059
what we're talking about Challenger

659
00:27:03,059 --> 00:27:04,740
would choose a master public key as you

660
00:27:04,740 --> 00:27:06,720
might expect adversary gets to make

661
00:27:06,720 --> 00:27:09,120
adaptively many different queries of

662
00:27:09,120 --> 00:27:12,240
let's say a position and a symbol we'll

663
00:27:12,240 --> 00:27:14,159
get back the corresponding constrained

664
00:27:14,159 --> 00:27:16,320
key can do this over and over again and

665
00:27:16,320 --> 00:27:17,880
then finally at the end of the day

666
00:27:17,880 --> 00:27:19,200
um it's going to give you a challenge X

667
00:27:19,200 --> 00:27:21,659
star that isn't easily Satisfied by

668
00:27:21,659 --> 00:27:23,400
trivially Satisfied by one of those keys

669
00:27:23,400 --> 00:27:25,500
on before and we're going to get back to

670
00:27:25,500 --> 00:27:27,840
either the prf or a random value and

671
00:27:27,840 --> 00:27:29,880
again we want to argue that it's hard to

672
00:27:29,880 --> 00:27:31,260
be able to distinguish these with better

673
00:27:31,260 --> 00:27:33,960
than one half guessing right

674
00:27:33,960 --> 00:27:36,659
okay so

675
00:27:36,659 --> 00:27:39,240
um what I'm gonna do in the um time we

676
00:27:39,240 --> 00:27:41,580
have here is try to give you some idea

677
00:27:41,580 --> 00:27:43,860
how we constructed these things uh we

678
00:27:43,860 --> 00:27:44,760
constructed them from

679
00:27:44,760 --> 00:27:47,580
indistinguishability obfuscation uh plus

680
00:27:47,580 --> 00:27:50,279
ddh uh we're going to use kind of a Nora

681
00:27:50,279 --> 00:27:53,039
reingold's sort of a norheingold variant

682
00:27:53,039 --> 00:27:56,460
um of this so here for the key for each

683
00:27:56,460 --> 00:27:58,140
position in each symbol we're gonna

684
00:27:58,140 --> 00:28:01,020
choose a random exponent e sub I comma W

685
00:28:01,020 --> 00:28:03,960
okay and then we're going to also have a

686
00:28:03,960 --> 00:28:06,779
random base H and the valuation of the

687
00:28:06,779 --> 00:28:09,720
prf as I have it up here is to Simply do

688
00:28:09,720 --> 00:28:11,640
a subset product based on the symbols so

689
00:28:11,640 --> 00:28:13,440
I look at the first symbol look up with

690
00:28:13,440 --> 00:28:15,539
its corresponding e value is then look

691
00:28:15,539 --> 00:28:17,400
up the second symbol the corresponding

692
00:28:17,400 --> 00:28:20,400
some thing multiply them together and so

693
00:28:20,400 --> 00:28:23,340
on and so forth until I multiply all of

694
00:28:23,340 --> 00:28:24,779
these exponents together and then I take

695
00:28:24,779 --> 00:28:26,880
H and raised to that

696
00:28:26,880 --> 00:28:28,679
um so pretty much almost nor wrangled

697
00:28:28,679 --> 00:28:29,400
right

698
00:28:29,400 --> 00:28:31,500
okay so the construction of the

699
00:28:31,500 --> 00:28:33,360
constrained prf is pretty simple itself

700
00:28:33,360 --> 00:28:34,860
it's actually the proof that gets a

701
00:28:34,860 --> 00:28:37,320
little more complicated uh so think of

702
00:28:37,320 --> 00:28:38,640
this thing in green here as the

703
00:28:38,640 --> 00:28:40,620
obfuscated program and it'll be

704
00:28:40,620 --> 00:28:42,900
parameterized by a index I star and

705
00:28:42,900 --> 00:28:44,220
symbol Z

706
00:28:44,220 --> 00:28:47,159
and uh the way it works is that the

707
00:28:47,159 --> 00:28:48,480
first you look at the input and you say

708
00:28:48,480 --> 00:28:51,960
well is the I star symbol equal to Z if

709
00:28:51,960 --> 00:28:53,580
not reject because we're not supposed to

710
00:28:53,580 --> 00:28:56,039
be able to answer it otherwise and if it

711
00:28:56,039 --> 00:28:57,779
is equal to Z then you go ahead and you

712
00:28:57,779 --> 00:29:00,179
I guess just do the computation right V

713
00:29:00,179 --> 00:29:01,679
is equal to the product of all these

714
00:29:01,679 --> 00:29:04,260
things according to x and then you take

715
00:29:04,260 --> 00:29:06,360
H and raise it to the V

716
00:29:06,360 --> 00:29:08,039
um so hopefully that's pretty

717
00:29:08,039 --> 00:29:09,600
um straightforward

718
00:29:09,600 --> 00:29:12,600
okay so to actually prove it though is

719
00:29:12,600 --> 00:29:15,240
kind of hard is somewhat difficult and

720
00:29:15,240 --> 00:29:17,039
so if you look up here right we have

721
00:29:17,039 --> 00:29:18,659
this eventually the challenge we have

722
00:29:18,659 --> 00:29:21,299
this base H and if we could kind of make

723
00:29:21,299 --> 00:29:23,700
this disappear from anywhere else

724
00:29:23,700 --> 00:29:26,039
um in the stuff above it uh it would

725
00:29:26,039 --> 00:29:27,539
just be true like it'd just be hard to

726
00:29:27,539 --> 00:29:29,340
distinguish right if the base H only

727
00:29:29,340 --> 00:29:31,620
came in at the very end uh but it

728
00:29:31,620 --> 00:29:33,120
actually is part of these constrained

729
00:29:33,120 --> 00:29:34,260
Keys it's like

730
00:29:34,260 --> 00:29:36,600
you know um shoved in there somewhere

731
00:29:36,600 --> 00:29:38,700
inside an obvious get a program but at

732
00:29:38,700 --> 00:29:40,919
least to start it's there uh so what

733
00:29:40,919 --> 00:29:42,779
we're gonna do from our proof is to take

734
00:29:42,779 --> 00:29:45,299
this H out one by one from the

735
00:29:45,299 --> 00:29:47,880
constraint keys and try to replace it

736
00:29:47,880 --> 00:29:50,039
with something else okay

737
00:29:50,039 --> 00:29:51,419
so

738
00:29:51,419 --> 00:29:54,720
um let's see so kind of the idea is

739
00:29:54,720 --> 00:29:56,460
um originally the the programs come with

740
00:29:56,460 --> 00:29:59,220
some you take um uh H and raised to the

741
00:29:59,220 --> 00:30:01,200
V instead now for the I key given out

742
00:30:01,200 --> 00:30:03,480
I'm going to choose a new somehow after

743
00:30:03,480 --> 00:30:04,919
several hybrids I'm going to change it

744
00:30:04,919 --> 00:30:06,720
so that it has a different base and

745
00:30:06,720 --> 00:30:08,820
raises that to the V instead right and

746
00:30:08,820 --> 00:30:11,039
if I can do that for all the keys then

747
00:30:11,039 --> 00:30:13,140
this original H is just uh not related

748
00:30:13,140 --> 00:30:15,240
to any of them at all okay so I want to

749
00:30:15,240 --> 00:30:17,520
change them one by one from using this

750
00:30:17,520 --> 00:30:19,860
core H value or this thing from the

751
00:30:19,860 --> 00:30:22,919
public key to enough in public key but

752
00:30:22,919 --> 00:30:25,500
um uh from The Challenge to something

753
00:30:25,500 --> 00:30:26,640
else

754
00:30:26,640 --> 00:30:29,340
uh there's kind of a problem though in

755
00:30:29,340 --> 00:30:31,380
that if we try to do this as I outlined

756
00:30:31,380 --> 00:30:34,200
there will be consistency issues

757
00:30:34,200 --> 00:30:37,020
so imagine that like okay so an attacker

758
00:30:37,020 --> 00:30:40,020
gets two of these keys and it thinks of

759
00:30:40,020 --> 00:30:41,580
one input that both keys should answer

760
00:30:41,580 --> 00:30:43,799
well it could it could feed that input

761
00:30:43,799 --> 00:30:46,380
into both obfuscated programs and it

762
00:30:46,380 --> 00:30:48,120
should get out the same answer right

763
00:30:48,120 --> 00:30:50,580
like it otherwise you know when the heck

764
00:30:50,580 --> 00:30:52,200
is going on here

765
00:30:52,200 --> 00:30:55,080
um but it it won't right if we kind of

766
00:30:55,080 --> 00:30:57,179
do the proof like this it will get H1 to

767
00:30:57,179 --> 00:31:00,419
the V here and H2 to the V well we timed

768
00:31:00,419 --> 00:31:03,000
it just right with the zoom thing but um

769
00:31:03,000 --> 00:31:06,480
uh uh so the H2 to be there these will

770
00:31:06,480 --> 00:31:08,520
be two different things and the attacker

771
00:31:08,520 --> 00:31:10,020
you know we'll say hey what the heck's

772
00:31:10,020 --> 00:31:11,580
going on I'm I'm quitting that this

773
00:31:11,580 --> 00:31:12,840
looks different

774
00:31:12,840 --> 00:31:15,000
uh so the idea is that we're gonna kind

775
00:31:15,000 --> 00:31:18,000
of do this but be um each new key will

776
00:31:18,000 --> 00:31:20,880
be deferential to the previous ones okay

777
00:31:20,880 --> 00:31:22,140
so first I'm going to give out the first

778
00:31:22,140 --> 00:31:24,539
key and change it's space to H1 via a

779
00:31:24,539 --> 00:31:26,640
bunch of ddh stuff and I O and all that

780
00:31:26,640 --> 00:31:28,559
stuff then when I give out um the key

781
00:31:28,559 --> 00:31:31,260
for let's say H2 oh sorry for the second

782
00:31:31,260 --> 00:31:33,600
key by that point I know what the first

783
00:31:33,600 --> 00:31:36,720
constrain key was and essentially that

784
00:31:36,720 --> 00:31:39,059
second program will say look at this

785
00:31:39,059 --> 00:31:41,220
input if it could have been answered by

786
00:31:41,220 --> 00:31:43,500
the first program use H1

787
00:31:43,500 --> 00:31:45,600
if not so I'll kind of defer to it if

788
00:31:45,600 --> 00:31:48,179
not I'll use my own um thing my my own

789
00:31:48,179 --> 00:31:50,100
new generator itself and then for the

790
00:31:50,100 --> 00:31:51,360
third key that's given out it first

791
00:31:51,360 --> 00:31:53,159
looks at the input say well could it

792
00:31:53,159 --> 00:31:55,980
have been answered by key one okay if so

793
00:31:55,980 --> 00:31:59,520
use H1 if not ask about H2 and be

794
00:31:59,520 --> 00:32:02,760
differential to that and if if not then

795
00:32:02,760 --> 00:32:05,039
um then I get to use my H3 and this way

796
00:32:05,039 --> 00:32:06,600
things are consistent like there's not

797
00:32:06,600 --> 00:32:09,120
like a natural obviously my proof is is

798
00:32:09,120 --> 00:32:13,020
wrong type of um deal going on uh this

799
00:32:13,020 --> 00:32:15,360
type of proof idea is also though why we

800
00:32:15,360 --> 00:32:17,159
handle right now just a bounded number

801
00:32:17,159 --> 00:32:20,039
of of Corruptions because on the I query

802
00:32:20,039 --> 00:32:22,380
I need to say hey this is what happened

803
00:32:22,380 --> 00:32:24,539
in the previous I minus one one so I

804
00:32:24,539 --> 00:32:26,760
have to kind of put it in there and it

805
00:32:26,760 --> 00:32:29,159
would be Obviously good to um get by

806
00:32:29,159 --> 00:32:30,360
this

807
00:32:30,360 --> 00:32:33,960
okay so um in summary so using i o and

808
00:32:33,960 --> 00:32:36,000
decisional Divi Helman we can strain the

809
00:32:36,000 --> 00:32:37,980
key we change them one by one to use a

810
00:32:37,980 --> 00:32:39,899
different value but um getting

811
00:32:39,899 --> 00:32:41,640
consistency is pretty important and we

812
00:32:41,640 --> 00:32:43,380
have to kind of do this I guess I call

813
00:32:43,380 --> 00:32:45,120
deferring to the previous to the

814
00:32:45,120 --> 00:32:47,220
previous things

815
00:32:47,220 --> 00:32:49,080
um and then you know we do jump around

816
00:32:49,080 --> 00:32:51,720
we do jump around these previous um

817
00:32:51,720 --> 00:32:53,580
so-called impossibility results which

818
00:32:53,580 --> 00:32:54,779
would have held even for a bounded

819
00:32:54,779 --> 00:32:56,640
number of query um Corruptions by the

820
00:32:56,640 --> 00:32:58,080
way

821
00:32:58,080 --> 00:33:00,539
um since the prf is not fixed

822
00:33:00,539 --> 00:33:02,580
um by the public key

823
00:33:02,580 --> 00:33:05,279
and um just to conclude uh some things I

824
00:33:05,279 --> 00:33:07,500
find kind of interesting are could you

825
00:33:07,500 --> 00:33:08,940
remove the bound on the Restriction of

826
00:33:08,940 --> 00:33:10,200
the group size right now it's just an

827
00:33:10,200 --> 00:33:12,299
obfuscated program not an obfuscated

828
00:33:12,299 --> 00:33:14,279
turing machine just obviously a circuit

829
00:33:14,279 --> 00:33:16,140
so you know you have you can pick any

830
00:33:16,140 --> 00:33:18,059
value you want but you have to pick some

831
00:33:18,059 --> 00:33:19,679
value at the beginning of how many users

832
00:33:19,679 --> 00:33:21,360
get together

833
00:33:21,360 --> 00:33:24,000
and um perhaps probably even more

834
00:33:24,000 --> 00:33:26,460
challenging could we remove the bound on

835
00:33:26,460 --> 00:33:28,799
the number of Corruptions uh right now

836
00:33:28,799 --> 00:33:31,440
this technique at least in my mind seems

837
00:33:31,440 --> 00:33:34,140
to be pretty heavily tied to having a

838
00:33:34,140 --> 00:33:36,600
bound on the number of Corruptions and

839
00:33:36,600 --> 00:33:37,679
um I think it would take some

840
00:33:37,679 --> 00:33:40,019
significant new insight into this or you

841
00:33:40,019 --> 00:33:41,820
know maybe you can prove it's impossible

842
00:33:41,820 --> 00:33:44,340
under this this or that

843
00:33:44,340 --> 00:33:46,019
um okay so I try to get through they

844
00:33:46,019 --> 00:33:49,679
make it on time okay wow okay so

845
00:33:49,679 --> 00:33:52,820
um thank you everyone

846
00:33:56,880 --> 00:33:58,980
all right any questions for Brian yeah

847
00:33:58,980 --> 00:34:01,500
thank you come here there's a microphone

848
00:34:01,500 --> 00:34:05,240
yeah no oh there's another one yeah

849
00:34:10,639 --> 00:34:13,619
is there any gap between the selective

850
00:34:13,619 --> 00:34:16,500
version uh of the notion in terms of

851
00:34:16,500 --> 00:34:19,199
assumption versus the Adaptive version

852
00:34:19,199 --> 00:34:21,899
uh afternoon that's all you're able to

853
00:34:21,899 --> 00:34:24,060
get oh okay

854
00:34:24,060 --> 00:34:26,580
um so I think I think there's a little

855
00:34:26,580 --> 00:34:28,379
crackling there but um

856
00:34:28,379 --> 00:34:31,080
yeah I think for you know I think

857
00:34:31,080 --> 00:34:32,219
essentially the same problem happens

858
00:34:32,219 --> 00:34:35,940
these constraint prfs and Nike have

859
00:34:35,940 --> 00:34:38,219
similar issues where

860
00:34:38,219 --> 00:34:38,879
um

861
00:34:38,879 --> 00:34:40,080
yeah I think I think for General

862
00:34:40,080 --> 00:34:42,119
functionality for example

863
00:34:42,119 --> 00:34:43,619
um from i o i could build it pretty

864
00:34:43,619 --> 00:34:46,320
pretty easily for

865
00:34:46,320 --> 00:34:48,000
um any functionality if it was selected

866
00:34:48,000 --> 00:34:49,980
for example and then adaptive

867
00:34:49,980 --> 00:34:51,179
I have to think about that a little bit

868
00:34:51,179 --> 00:34:53,159
but yeah adaptively constrained peer

869
00:34:53,159 --> 00:34:56,219
house is a is a problem and we solved it

870
00:34:56,219 --> 00:35:00,660
for this one particular class but uh

871
00:35:00,660 --> 00:35:02,700
yeah you know for more for more broad

872
00:35:02,700 --> 00:35:04,920
classes oh one particular prep class

873
00:35:04,920 --> 00:35:07,619
what plus bounded Corruptions so um it

874
00:35:07,619 --> 00:35:09,800
is also a problem there

875
00:35:09,800 --> 00:35:12,300
if Kenny

876
00:35:12,300 --> 00:35:13,859
you can just speak loudly yeah just

877
00:35:13,859 --> 00:35:16,160
speak louder

878
00:35:24,000 --> 00:35:25,440
good question so it's it's in those

879
00:35:25,440 --> 00:35:27,900
proof you know I said I changed it to hi

880
00:35:27,900 --> 00:35:30,960
um it's where that happens it's sort of

881
00:35:30,960 --> 00:35:34,320
that it's commutative in a sense that um

882
00:35:34,320 --> 00:35:36,900
let's say I'm focused uh um I'm focused

883
00:35:36,900 --> 00:35:39,300
on the ice hybrid in changing

884
00:35:39,300 --> 00:35:39,900
um

885
00:35:39,900 --> 00:35:41,940
the iPhone users key pretty much what

886
00:35:41,940 --> 00:35:44,280
will happen is that um e-value I will

887
00:35:44,280 --> 00:35:47,700
not have in the clear and I'll have H to

888
00:35:47,700 --> 00:35:49,619
the e

889
00:35:49,619 --> 00:35:52,859
um and uh the fact that's commutative I

890
00:35:52,859 --> 00:35:55,020
can kind of move things I'm not

891
00:35:55,020 --> 00:35:56,700
explaining it too well but um I I do

892
00:35:56,700 --> 00:36:00,560
rely on kind of the algebraic properties

893
00:36:03,619 --> 00:36:05,820
I mean I imagine you could try to

894
00:36:05,820 --> 00:36:08,760
abstract it out I'm not sure it would be

895
00:36:08,760 --> 00:36:10,560
very enlightening but yeah I imagine you

896
00:36:10,560 --> 00:36:12,119
could say well any prf with such and

897
00:36:12,119 --> 00:36:14,280
such property I wouldn't claim no

898
00:36:14,280 --> 00:36:15,900
rheingold is the only

899
00:36:15,900 --> 00:36:19,200
wherever to do it yeah

900
00:36:19,200 --> 00:36:22,020
all right so I think we thanks we'll

901
00:36:22,020 --> 00:36:23,520
move on to the next talk if there's a

902
00:36:23,520 --> 00:36:26,540
yeah thank you

903
00:36:34,920 --> 00:36:37,200
all right so the next talk is on the

904
00:36:37,200 --> 00:36:39,000
impossibility of algebraic Vector

905
00:36:39,000 --> 00:36:41,339
commitments in pairing free groups and

906
00:36:41,339 --> 00:36:43,079
that's work with our Catalano Daria

907
00:36:43,079 --> 00:36:45,420
Rosario Genero and Emmanuel Junta and

908
00:36:45,420 --> 00:36:46,740
Emmanuela will be giving the talk okay

909
00:36:46,740 --> 00:36:48,119
thank you for the introduction and

910
00:36:48,119 --> 00:36:50,880
welcome everyone so uh first of all let

911
00:36:50,880 --> 00:36:52,440
me uh briefly remind what Vector

912
00:36:52,440 --> 00:36:53,820
commitments are giving out best

913
00:36:53,820 --> 00:36:55,920
definition so better commitment is a

914
00:36:55,920 --> 00:36:58,380
remedy that allows the committer to need

915
00:36:58,380 --> 00:37:00,780
commit to a vector of messages in such a

916
00:37:00,780 --> 00:37:02,460
way that after he gives a commitment

917
00:37:02,460 --> 00:37:05,040
it's it is a it can actually open some

918
00:37:05,040 --> 00:37:07,260
position of this Factor so in this case

919
00:37:07,260 --> 00:37:08,520
for instance you can give an opening

920
00:37:08,520 --> 00:37:10,560
proof for position three and open the

921
00:37:10,560 --> 00:37:11,880
message in position three and the

922
00:37:11,880 --> 00:37:14,400
verifier later on check this and same

923
00:37:14,400 --> 00:37:16,140
for position 1 and so on and so forth

924
00:37:16,140 --> 00:37:18,780
for all for each position of this vector

925
00:37:18,780 --> 00:37:20,640
now the two main properties we want

926
00:37:20,640 --> 00:37:22,619
Vector commitments to satisfy our

927
00:37:22,619 --> 00:37:24,839
succiness which says that the

928
00:37:24,839 --> 00:37:27,180
commitments this envelope here and also

929
00:37:27,180 --> 00:37:29,160
the opening proof have to be small and

930
00:37:29,160 --> 00:37:30,720
should depends at most logarithmically

931
00:37:30,720 --> 00:37:33,240
on the length of the vector we started

932
00:37:33,240 --> 00:37:35,579
with and position binding which

933
00:37:35,579 --> 00:37:37,380
resembles a binding property of

934
00:37:37,380 --> 00:37:39,960
commitments which says that given uh I

935
00:37:39,960 --> 00:37:40,920
mean it's very hard to open this

936
00:37:40,920 --> 00:37:42,720
envelope but two different positions and

937
00:37:42,720 --> 00:37:44,220
that's this one okay here at two

938
00:37:44,220 --> 00:37:46,079
different positions uh sorry at the same

939
00:37:46,079 --> 00:37:48,980
position for two different messages

940
00:37:48,980 --> 00:37:51,599
uh now uh nowadays we have like

941
00:37:51,599 --> 00:37:53,160
construction Vector commitments under

942
00:37:53,160 --> 00:37:55,800
several assumptions and settings uh we

943
00:37:55,800 --> 00:37:57,900
have several from pairing or from groups

944
00:37:57,900 --> 00:37:59,820
on another recently also from Lucky

945
00:37:59,820 --> 00:38:02,280
assumptions and from Ash I mean we have

946
00:38:02,280 --> 00:38:04,859
like Merkel trees which is uh I mean

947
00:38:04,859 --> 00:38:06,960
also consider Vector commitments but we

948
00:38:06,960 --> 00:38:08,700
don't know much about what happens in

949
00:38:08,700 --> 00:38:11,940
Prime order groups uh without pairings

950
00:38:11,940 --> 00:38:13,320
so in this work we study essentially

951
00:38:13,320 --> 00:38:15,599
what happens in this setting and in the

952
00:38:15,599 --> 00:38:17,339
rest of it all I'm gonna say that a

953
00:38:17,339 --> 00:38:19,260
vector commitment is actually a break if

954
00:38:19,260 --> 00:38:22,020
it builds on a primordial group of known

955
00:38:22,020 --> 00:38:24,839
order without pairings uh in a black box

956
00:38:24,839 --> 00:38:27,720
way and its security only comes from art

957
00:38:27,720 --> 00:38:29,579
problems within the group

958
00:38:29,579 --> 00:38:31,859
uh so to be more specific about what I

959
00:38:31,859 --> 00:38:33,960
mean by Black Box uh here I said that

960
00:38:33,960 --> 00:38:35,040
the vector commitment could be

961
00:38:35,040 --> 00:38:36,839
instantiated in the motor generic group

962
00:38:36,839 --> 00:38:39,599
model which is an idealization of a

963
00:38:39,599 --> 00:38:41,579
group and essentially instead of having

964
00:38:41,579 --> 00:38:43,079
operation explicitly you have two

965
00:38:43,079 --> 00:38:45,420
oracles one for addition that is the

966
00:38:45,420 --> 00:38:47,640
group operation and another one for a

967
00:38:47,640 --> 00:38:49,680
quality of this I mean one way to check

968
00:38:49,680 --> 00:38:52,619
if uh group elements are the same and as

969
00:38:52,619 --> 00:38:54,720
opposed to soup group models which is

970
00:38:54,720 --> 00:38:56,460
often confused with in this case we have

971
00:38:56,460 --> 00:38:58,619
no element representation so we don't

972
00:38:58,619 --> 00:39:00,720
have random element representations we

973
00:39:00,720 --> 00:39:02,640
only have LM and builds that are not

974
00:39:02,640 --> 00:39:05,220
really given explicitly

975
00:39:05,220 --> 00:39:05,880
um

976
00:39:05,880 --> 00:39:08,760
okay so One Reason by the way uh Vector

977
00:39:08,760 --> 00:39:09,960
commitments in this setting like

978
00:39:09,960 --> 00:39:11,700
building black box from a group would be

979
00:39:11,700 --> 00:39:13,560
interesting it's because they would I

980
00:39:13,560 --> 00:39:15,180
mean they would likely retain the

981
00:39:15,180 --> 00:39:17,520
amorphic property of the group so uh I

982
00:39:17,520 --> 00:39:20,099
mean one one way to have a morphic uh

983
00:39:20,099 --> 00:39:21,599
Vector commitments would be to use a

984
00:39:21,599 --> 00:39:23,460
group in a black box way another

985
00:39:23,460 --> 00:39:25,440
interesting property is that compiling

986
00:39:25,440 --> 00:39:27,060
these two snarks is likely going to be

987
00:39:27,060 --> 00:39:28,560
more efficient and also that's why we

988
00:39:28,560 --> 00:39:29,820
started looking at this problem in the

989
00:39:29,820 --> 00:39:30,720
first place

990
00:39:30,720 --> 00:39:33,660
however uh the question is like to this

991
00:39:33,660 --> 00:39:35,700
primitive exists and unfortunately we

992
00:39:35,700 --> 00:39:37,140
are to tell you that Unfortunately they

993
00:39:37,140 --> 00:39:40,260
don't and in particular we have two

994
00:39:40,260 --> 00:39:42,900
negative results so in the first results

995
00:39:42,900 --> 00:39:45,060
uh we somehow restrict the verification

996
00:39:45,060 --> 00:39:46,980
procedure by only checking linear

997
00:39:46,980 --> 00:39:49,200
equation and we say that in this setting

998
00:39:49,200 --> 00:39:51,599
like they just don't exist uh either

999
00:39:51,599 --> 00:39:52,800
there is either they're not position

1000
00:39:52,800 --> 00:39:55,020
binding or if they're position binding

1001
00:39:55,020 --> 00:39:56,700
they're not succeed because this lower

1002
00:39:56,700 --> 00:39:58,500
bound here applies

1003
00:39:58,500 --> 00:40:00,480
so at least one other the length of the

1004
00:40:00,480 --> 00:40:02,160
commitment or the opening length has to

1005
00:40:02,160 --> 00:40:04,500
be square root of n where n is the

1006
00:40:04,500 --> 00:40:06,420
length of the vector I'm committing to

1007
00:40:06,420 --> 00:40:08,099
oh sorry

1008
00:40:08,099 --> 00:40:09,960
uh and the second result which is the

1009
00:40:09,960 --> 00:40:12,060
one I'm going to focus in the remaining

1010
00:40:12,060 --> 00:40:13,740
of the talk uh it's a black box

1011
00:40:13,740 --> 00:40:16,740
separation says which says that even if

1012
00:40:16,740 --> 00:40:17,880
we don't restrict at all the

1013
00:40:17,880 --> 00:40:20,040
verification procedure we still have the

1014
00:40:20,040 --> 00:40:23,460
same issue uh either the either director

1015
00:40:23,460 --> 00:40:25,320
commitment we have uh is position

1016
00:40:25,320 --> 00:40:27,480
binding against an inefficient adversary

1017
00:40:27,480 --> 00:40:30,420
that only use the group efficiently or

1018
00:40:30,420 --> 00:40:33,060
uh this lower bound here applies so it's

1019
00:40:33,060 --> 00:40:35,900
not succinct anymore

1020
00:40:36,300 --> 00:40:37,500
um

1021
00:40:37,500 --> 00:40:39,839
so in order to get there uh we basically

1022
00:40:39,839 --> 00:40:42,300
start with a previous work uh which

1023
00:40:42,300 --> 00:40:43,920
essentially provides an impossibility

1024
00:40:43,920 --> 00:40:45,839
results for algebraic signatures so the

1025
00:40:45,839 --> 00:40:46,980
same question but for different

1026
00:40:46,980 --> 00:40:48,960
Primitives that is digital signatures in

1027
00:40:48,960 --> 00:40:51,119
Maurice group model and they basically

1028
00:40:51,119 --> 00:40:52,980
show that for a large class of signature

1029
00:40:52,980 --> 00:40:56,579
uh I mean distributes cannot be built uh

1030
00:40:56,579 --> 00:40:58,380
so what we do is essentially start from

1031
00:40:58,380 --> 00:41:01,200
there uh we build digital signatures

1032
00:41:01,200 --> 00:41:02,940
from Vector commitments which are nice

1033
00:41:02,940 --> 00:41:05,099
construction not so nice actually from

1034
00:41:05,099 --> 00:41:06,359
uh digital signature from better

1035
00:41:06,359 --> 00:41:08,640
commitments uh then we describe an

1036
00:41:08,640 --> 00:41:11,040
attack for for digital signatures that

1037
00:41:11,040 --> 00:41:13,320
capture also uh the one that we

1038
00:41:13,320 --> 00:41:15,119
construct from Vector commitments in

1039
00:41:15,119 --> 00:41:16,800
some sense we also across some Gap that

1040
00:41:16,800 --> 00:41:18,900
was left open like we removed some

1041
00:41:18,900 --> 00:41:20,640
limitation that was previously used in

1042
00:41:20,640 --> 00:41:22,859
the verification procedure and finally

1043
00:41:22,859 --> 00:41:24,900
we conclude that Vector commitments are

1044
00:41:24,900 --> 00:41:27,240
impossible so that's the high level idea

1045
00:41:27,240 --> 00:41:29,579
of our results

1046
00:41:29,579 --> 00:41:32,640
so uh the first step is to build digital

1047
00:41:32,640 --> 00:41:34,920
signatures from Vector commitments and

1048
00:41:34,920 --> 00:41:36,720
the way we do this is basically by

1049
00:41:36,720 --> 00:41:37,859
building a signatures with

1050
00:41:37,859 --> 00:41:39,560
polynominantly bounded message space

1051
00:41:39,560 --> 00:41:41,700
essentially the message space is going

1052
00:41:41,700 --> 00:41:43,079
to be the indexes of the vector

1053
00:41:43,079 --> 00:41:46,140
commitments uh and in order to set up

1054
00:41:46,140 --> 00:41:48,380
the signature scheme we have first

1055
00:41:48,380 --> 00:41:50,599
designer deciding like random messages

1056
00:41:50,599 --> 00:41:53,160
and committing to them and this

1057
00:41:53,160 --> 00:41:54,480
commitment is going to be the

1058
00:41:54,480 --> 00:41:56,400
verification key of the signature scheme

1059
00:41:56,400 --> 00:41:58,920
and in order to sign a message say the

1060
00:41:58,920 --> 00:42:01,440
index free or index one designer can

1061
00:42:01,440 --> 00:42:03,240
simply open the vector commitments and

1062
00:42:03,240 --> 00:42:05,160
this is a signature for say the index

1063
00:42:05,160 --> 00:42:07,200
free so if you want to sign the message

1064
00:42:07,200 --> 00:42:08,940
one you can simply open the vector

1065
00:42:08,940 --> 00:42:11,220
commitment in position one and so on and

1066
00:42:11,220 --> 00:42:12,480
so forth

1067
00:42:12,480 --> 00:42:15,599
so now the question is uh is this uh

1068
00:42:15,599 --> 00:42:18,240
signature scheme unforgeable

1069
00:42:18,240 --> 00:42:21,540
now as it turns out unfortunately it may

1070
00:42:21,540 --> 00:42:24,180
not be unforgeable so that I guess again

1071
00:42:24,180 --> 00:42:26,099
this construction is not so nice as it

1072
00:42:26,099 --> 00:42:28,500
may seem at First Sight and the reason

1073
00:42:28,500 --> 00:42:30,839
is that Vector commitments in no way

1074
00:42:30,839 --> 00:42:32,880
implies that it's very hard to compute

1075
00:42:32,880 --> 00:42:35,099
these openings by itself but only say

1076
00:42:35,099 --> 00:42:36,300
that it's very hard to compute two

1077
00:42:36,300 --> 00:42:38,640
different openings for the same position

1078
00:42:38,640 --> 00:42:40,560
so one easy counter example of

1079
00:42:40,560 --> 00:42:42,500
affordable signatures built in this way

1080
00:42:42,500 --> 00:42:44,760
could be for instance by taking any

1081
00:42:44,760 --> 00:42:46,619
Vector commitments you like and

1082
00:42:46,619 --> 00:42:48,420
appending to the commitment the opening

1083
00:42:48,420 --> 00:42:51,000
for the first position now if you want

1084
00:42:51,000 --> 00:42:53,160
to forge I'm a signature for one you

1085
00:42:53,160 --> 00:42:54,540
just have a forgery already in the

1086
00:42:54,540 --> 00:42:55,859
verification key

1087
00:42:55,859 --> 00:42:58,020
but interestingly this is still a vector

1088
00:42:58,020 --> 00:43:00,359
commitment right because this part here

1089
00:43:00,359 --> 00:43:02,700
is succinct openings remain succinct and

1090
00:43:02,700 --> 00:43:04,560
it's still very hard to compute uh two

1091
00:43:04,560 --> 00:43:06,900
different openings for one position

1092
00:43:06,900 --> 00:43:08,280
so unfortunately they are not

1093
00:43:08,280 --> 00:43:10,800
unforgeable uh so we ask a different

1094
00:43:10,800 --> 00:43:14,220
question so the attack we found that

1095
00:43:14,220 --> 00:43:16,140
makes this unforgeable comes from the

1096
00:43:16,140 --> 00:43:18,540
fact that openings and commitment May

1097
00:43:18,540 --> 00:43:20,280
leak information about other openings

1098
00:43:20,280 --> 00:43:22,020
and other other openings in their

1099
00:43:22,020 --> 00:43:24,780
position but this cannot contain too

1100
00:43:24,780 --> 00:43:26,339
much information because they have to be

1101
00:43:26,339 --> 00:43:28,980
succinct so the question is like can an

1102
00:43:28,980 --> 00:43:30,900
adversar you makes Not So Many query

1103
00:43:30,900 --> 00:43:33,480
produce many forgery and we Define this

1104
00:43:33,480 --> 00:43:35,520
notion as three term forgeability where

1105
00:43:35,520 --> 00:43:37,619
the adversary has to come up with Theta

1106
00:43:37,619 --> 00:43:39,660
forger instead of only one in a standard

1107
00:43:39,660 --> 00:43:43,319
definition of signature security and in

1108
00:43:43,319 --> 00:43:44,760
fact the answer that this is indeed

1109
00:43:44,760 --> 00:43:47,400
possible so in adversario tries to break

1110
00:43:47,400 --> 00:43:49,319
this signature scheme cannot make too

1111
00:43:49,319 --> 00:43:50,760
many forgeries although you can make

1112
00:43:50,760 --> 00:43:52,500
some of them so you can make some

1113
00:43:52,500 --> 00:43:54,359
forgeries

1114
00:43:54,359 --> 00:43:56,640
uh so this is the first part the second

1115
00:43:56,640 --> 00:43:58,260
part is like proving impossibility of

1116
00:43:58,260 --> 00:44:00,420
algebraic signature like extending the

1117
00:44:00,420 --> 00:44:03,000
previous results and we're standing in

1118
00:44:03,000 --> 00:44:04,859
three different dimensions so the first

1119
00:44:04,859 --> 00:44:08,280
okay the first step is that we extend uh

1120
00:44:08,280 --> 00:44:09,720
what was known for unforgeable

1121
00:44:09,720 --> 00:44:11,819
signatures to fit unforgeable signature

1122
00:44:11,819 --> 00:44:14,099
so we also capture this weaker notion

1123
00:44:14,099 --> 00:44:15,960
and

1124
00:44:15,960 --> 00:44:18,180
um okay and also we observed that the

1125
00:44:18,180 --> 00:44:20,099
previous results essentially gives a

1126
00:44:20,099 --> 00:44:21,839
lower bound of the message space of

1127
00:44:21,839 --> 00:44:24,359
secure signature which depends on number

1128
00:44:24,359 --> 00:44:25,920
of group elements in the verification

1129
00:44:25,920 --> 00:44:28,319
key now in our construction the

1130
00:44:28,319 --> 00:44:30,359
verification key is composed by the

1131
00:44:30,359 --> 00:44:33,060
commitment and the CRS and the

1132
00:44:33,060 --> 00:44:34,800
commitment is very short but the CRS is

1133
00:44:34,800 --> 00:44:36,000
actually very large and that's

1134
00:44:36,000 --> 00:44:38,760
problematic so to make our impossibility

1135
00:44:38,760 --> 00:44:41,520
uh I mean our result works we need to

1136
00:44:41,520 --> 00:44:42,960
exclude the group elements in this ERS

1137
00:44:42,960 --> 00:44:45,180
in these lower bounds so this is one

1138
00:44:45,180 --> 00:44:47,160
technical contribution and the second

1139
00:44:47,160 --> 00:44:49,260
one is we remove this limitation like in

1140
00:44:49,260 --> 00:44:50,760
this previous result they first they

1141
00:44:50,760 --> 00:44:53,220
assume that the verifier only can check

1142
00:44:53,220 --> 00:44:55,859
linear equations and we remove this and

1143
00:44:55,859 --> 00:44:57,300
assume that the verifier is simply any

1144
00:44:57,300 --> 00:44:59,099
generic algorithm in the generic group

1145
00:44:59,099 --> 00:45:00,540
model

1146
00:45:00,540 --> 00:45:02,819
so in particular as a corollary we also

1147
00:45:02,819 --> 00:45:05,339
obtained that signatures with large

1148
00:45:05,339 --> 00:45:07,079
message space are not possible in modern

1149
00:45:07,079 --> 00:45:08,940
DGM

1150
00:45:08,940 --> 00:45:11,040
okay so to put all together we

1151
00:45:11,040 --> 00:45:12,720
essentially have that we build

1152
00:45:12,720 --> 00:45:15,180
signatures from Vector commitments which

1153
00:45:15,180 --> 00:45:16,920
are feet unforgeable for some parameter

1154
00:45:16,920 --> 00:45:19,200
of theta we obtain that signatures are

1155
00:45:19,200 --> 00:45:21,180
impossible and as a consequence if

1156
00:45:21,180 --> 00:45:22,380
Vector commitments are positioned

1157
00:45:22,380 --> 00:45:23,640
binding the thing that they have to

1158
00:45:23,640 --> 00:45:25,380
satisfy this lower bound which comes

1159
00:45:25,380 --> 00:45:27,420
from these bounds on a message space and

1160
00:45:27,420 --> 00:45:29,700
the values of theta we derive in our

1161
00:45:29,700 --> 00:45:31,560
paper

1162
00:45:31,560 --> 00:45:34,920
um okay so just final slides so in

1163
00:45:34,920 --> 00:45:37,020
conclusion we essentially showed that uh

1164
00:45:37,020 --> 00:45:38,400
if you want to build better commitment

1165
00:45:38,400 --> 00:45:40,500
in a black box way from primer from

1166
00:45:40,500 --> 00:45:42,839
primary group and without pairings uh

1167
00:45:42,839 --> 00:45:44,819
you cannot do this unfortunately uh if

1168
00:45:44,819 --> 00:45:45,780
you want them to be both position

1169
00:45:45,780 --> 00:45:48,300
binding and succinct and the same result

1170
00:45:48,300 --> 00:45:50,460
applies as well to polynomial commitment

1171
00:45:50,460 --> 00:45:51,960
and any primitive that actually implies

1172
00:45:51,960 --> 00:45:53,940
Vector commitment so polynomial

1173
00:45:53,940 --> 00:45:55,380
commitment and functional functional

1174
00:45:55,380 --> 00:45:57,660
commitment also are captured in our uh

1175
00:45:57,660 --> 00:46:00,480
by our impossibility results uh and it's

1176
00:46:00,480 --> 00:46:02,339
essentially just one way to a big way to

1177
00:46:02,339 --> 00:46:03,540
say that there is no free lunch in

1178
00:46:03,540 --> 00:46:05,700
computer science uh I mean if you want

1179
00:46:05,700 --> 00:46:07,380
to uh build better commitment in this

1180
00:46:07,380 --> 00:46:08,940
setting either you have to use the group

1181
00:46:08,940 --> 00:46:11,520
in a non-blackbox way uh or you need to

1182
00:46:11,520 --> 00:46:13,200
use other assumptions on top of group

1183
00:46:13,200 --> 00:46:15,720
theoretic assumptions so finally we also

1184
00:46:15,720 --> 00:46:17,400
leave some open problems that is study

1185
00:46:17,400 --> 00:46:19,380
what happens in Shoop group model well

1186
00:46:19,380 --> 00:46:21,540
there you actually have random group

1187
00:46:21,540 --> 00:46:23,880
element representation situation and I

1188
00:46:23,880 --> 00:46:25,680
mean it becomes harder to study and

1189
00:46:25,680 --> 00:46:27,599
there are actually some construction in

1190
00:46:27,599 --> 00:46:29,280
this case so would be interesting to

1191
00:46:29,280 --> 00:46:31,740
know what happens and that's it so thank

1192
00:46:31,740 --> 00:46:34,520
you for your attention

1193
00:46:40,800 --> 00:46:42,660
I had a quick question so can you say

1194
00:46:42,660 --> 00:46:44,940
more about the extension to shoots DGM

1195
00:46:44,940 --> 00:46:46,319
because I thought there it's sort of

1196
00:46:46,319 --> 00:46:47,880
maybe that's what you meant by there

1197
00:46:47,880 --> 00:46:49,680
exist some constructions so you could

1198
00:46:49,680 --> 00:46:51,900
abuse of the group encodings to build a

1199
00:46:51,900 --> 00:46:53,339
hash function and then have a miracle 3

1200
00:46:53,339 --> 00:46:56,099
right yeah you can build like uh

1201
00:46:56,099 --> 00:46:57,540
actually you can be like a numerical

1202
00:46:57,540 --> 00:46:58,800
such function you can build medical

1203
00:46:58,800 --> 00:47:01,560
trees you can build also uh Pederson and

1204
00:47:01,560 --> 00:47:03,240
on top of that use bulletproof there are

1205
00:47:03,240 --> 00:47:05,579
many possible things uh but all these

1206
00:47:05,579 --> 00:47:07,440
things have logarithmic logarithmic

1207
00:47:07,440 --> 00:47:09,720
opening and it's not clear if we can

1208
00:47:09,720 --> 00:47:11,640
have constant opening uh even in the

1209
00:47:11,640 --> 00:47:13,200
random Oracle model for instance this is

1210
00:47:13,200 --> 00:47:14,520
this will be even more difficult to

1211
00:47:14,520 --> 00:47:17,579
study but it's still an open question uh

1212
00:47:17,579 --> 00:47:20,280
and that's what I mean here thanks thank

1213
00:47:20,280 --> 00:47:22,619
you for the question are there any more

1214
00:47:22,619 --> 00:47:23,640
questions

1215
00:47:23,640 --> 00:47:26,640
foreign

1216
00:47:58,760 --> 00:48:01,380
is just opening the vector the Patterson

1217
00:48:01,380 --> 00:48:03,300
commitment elements you want to open to

1218
00:48:03,300 --> 00:48:05,460
belongs so square root of an opening

1219
00:48:05,460 --> 00:48:09,440
openings so thank you for the question

1220
00:48:10,079 --> 00:48:11,819
all right let's take the speaker again

1221
00:48:11,819 --> 00:48:14,900
and then the next speaker cancel

1222
00:48:16,560 --> 00:48:19,040
sure

1223
00:48:39,240 --> 00:48:42,240
all right and the the last the last talk

1224
00:48:42,240 --> 00:48:44,520
is on for round black box non-mallible

1225
00:48:44,520 --> 00:48:46,380
commitments from one-way permutations

1226
00:48:46,380 --> 00:48:48,359
and that's joint work by Mikhail

1227
00:48:48,359 --> 00:48:51,000
Champion Manuel ursinai and Luisa

1228
00:48:51,000 --> 00:48:53,640
siniskaki and uh Michaela will be giving

1229
00:48:53,640 --> 00:48:54,540
the talk

1230
00:48:54,540 --> 00:48:57,180
right thanks for the introduction okay

1231
00:48:57,180 --> 00:48:59,819
so no marble commitments

1232
00:48:59,819 --> 00:49:02,220
so let's start the dog by not

1233
00:49:02,220 --> 00:49:04,380
introducing commitment schemes you'll

1234
00:49:04,380 --> 00:49:06,240
know what they are and let's talk about

1235
00:49:06,240 --> 00:49:09,000
normal ability so uh in normal

1236
00:49:09,000 --> 00:49:10,800
commitment like we are interested in

1237
00:49:10,800 --> 00:49:12,119
this scenario

1238
00:49:12,119 --> 00:49:13,680
um where we have a sender and the

1239
00:49:13,680 --> 00:49:14,819
receiver like in this International

1240
00:49:14,819 --> 00:49:18,119
commitments and unmann in the middle the

1241
00:49:18,119 --> 00:49:19,440
man in the middle

1242
00:49:19,440 --> 00:49:22,560
um may receive commitment from another

1243
00:49:22,560 --> 00:49:25,800
sender and now he may tamper with it

1244
00:49:25,800 --> 00:49:27,839
which means like he can flip some bits

1245
00:49:27,839 --> 00:49:31,800
or he can do something maybe smarter

1246
00:49:31,800 --> 00:49:34,920
um then he will send if we will forward

1247
00:49:34,920 --> 00:49:37,140
this commitment to the receiver and this

1248
00:49:37,140 --> 00:49:40,319
commitment now may contain either a

1249
00:49:40,319 --> 00:49:42,119
valid commitment so which means that

1250
00:49:42,119 --> 00:49:44,940
it's a commitment that admits an opening

1251
00:49:44,940 --> 00:49:48,900
uh or maybe not but what we want from a

1252
00:49:48,900 --> 00:49:51,060
normal level commitment is that this

1253
00:49:51,060 --> 00:49:53,819
message in Prime should not be related

1254
00:49:53,819 --> 00:49:56,280
with the message M that was committed by

1255
00:49:56,280 --> 00:49:58,800
the sender okay

1256
00:49:58,800 --> 00:50:00,300
so

1257
00:50:00,300 --> 00:50:02,760
um this notion is particularly important

1258
00:50:02,760 --> 00:50:05,700
like uh in particular like you if you

1259
00:50:05,700 --> 00:50:07,140
want to construct a multi-party

1260
00:50:07,140 --> 00:50:08,579
computation protocol with minimum run

1261
00:50:08,579 --> 00:50:11,220
complexity on most of the protocols rely

1262
00:50:11,220 --> 00:50:14,099
on normal level commitments and but even

1263
00:50:14,099 --> 00:50:17,460
if you want for example uh realize uh I

1264
00:50:17,460 --> 00:50:19,560
don't know an option for example using

1265
00:50:19,560 --> 00:50:20,760
commitments like you should use

1266
00:50:20,760 --> 00:50:22,200
normalable commitments like normal

1267
00:50:22,200 --> 00:50:24,599
commitments they don't work so you need

1268
00:50:24,599 --> 00:50:27,480
a form of normal ability

1269
00:50:27,480 --> 00:50:30,900
um so in this work we are interested in

1270
00:50:30,900 --> 00:50:33,180
normal constructing normal commitments

1271
00:50:33,180 --> 00:50:36,300
in the play model no CRS non-markal and

1272
00:50:36,300 --> 00:50:39,119
using polynomial time assumptions

1273
00:50:39,119 --> 00:50:40,980
so what do we know so there has been a

1274
00:50:40,980 --> 00:50:43,980
long line of research and like in Fox

1275
00:50:43,980 --> 00:50:46,560
2012 like we got the first

1276
00:50:46,560 --> 00:50:48,960
um result the first protocol that was

1277
00:50:48,960 --> 00:50:51,660
constant round and moreover it used the

1278
00:50:51,660 --> 00:50:53,940
underlying one-way function in a black

1279
00:50:53,940 --> 00:50:55,440
box way

1280
00:50:55,440 --> 00:50:56,760
okay

1281
00:50:56,760 --> 00:50:59,700
um so we had other works and we finally

1282
00:50:59,700 --> 00:51:03,660
reached a protocol that consists of two

1283
00:51:03,660 --> 00:51:06,540
round which we know is also optimal but

1284
00:51:06,540 --> 00:51:07,740
unfortunately

1285
00:51:07,740 --> 00:51:10,140
um all these works like

1286
00:51:10,140 --> 00:51:12,180
um relied on the underlying when we

1287
00:51:12,180 --> 00:51:15,359
function in uh in a black box way okay

1288
00:51:15,359 --> 00:51:17,940
so ideally we would like to get uh to

1289
00:51:17,940 --> 00:51:19,980
run construction uh that use one by

1290
00:51:19,980 --> 00:51:22,319
functions in a black box way and that's

1291
00:51:22,319 --> 00:51:25,559
not not what we do so we managed to go

1292
00:51:25,559 --> 00:51:27,839
to four round okay so it's still

1293
00:51:27,839 --> 00:51:29,760
um an open question whether we can go to

1294
00:51:29,760 --> 00:51:32,599
to three rounds

1295
00:51:33,240 --> 00:51:36,180
um so so the setting where we are is is

1296
00:51:36,180 --> 00:51:38,160
the following so the management the

1297
00:51:38,160 --> 00:51:40,319
middle we receive anonymously generated

1298
00:51:40,319 --> 00:51:42,300
commitment from from the left from the

1299
00:51:42,300 --> 00:51:44,220
sender and it will generate a commitment

1300
00:51:44,220 --> 00:51:46,920
on the right now observe that um this

1301
00:51:46,920 --> 00:51:50,099
commitment might not admit an opening so

1302
00:51:50,099 --> 00:51:53,040
it might be a commitment of both we'll

1303
00:51:53,040 --> 00:51:56,160
say and I should be clear that the

1304
00:51:56,160 --> 00:51:59,040
notion of normal ability implies that

1305
00:51:59,040 --> 00:52:02,359
whether for example uh man the middle

1306
00:52:02,359 --> 00:52:05,400
performs a good or a bad commitment on

1307
00:52:05,400 --> 00:52:07,680
the right session this should be

1308
00:52:07,680 --> 00:52:09,540
completely independent from what it

1309
00:52:09,540 --> 00:52:14,000
receives on the on the left okay

1310
00:52:14,040 --> 00:52:15,660
um so one of the main building block we

1311
00:52:15,660 --> 00:52:17,760
will rely on is actually

1312
00:52:17,760 --> 00:52:19,740
um what we call a weak normal level

1313
00:52:19,740 --> 00:52:22,200
commitment which is animal about

1314
00:52:22,200 --> 00:52:26,160
commitment that it remains secure as

1315
00:52:26,160 --> 00:52:28,319
long as the adversary promises to never

1316
00:52:28,319 --> 00:52:31,079
commit to to Port so as long as as long

1317
00:52:31,079 --> 00:52:34,079
as adversity performs a good commitment

1318
00:52:34,079 --> 00:52:38,700
this object is normalable and

1319
00:52:38,700 --> 00:52:41,880
um in a work of fox 2014 of goyal at all

1320
00:52:41,880 --> 00:52:45,020
the others provide this commitment which

1321
00:52:45,020 --> 00:52:49,440
moreover has a nice extractor that we

1322
00:52:49,440 --> 00:52:52,380
can run to extract the message committed

1323
00:52:52,380 --> 00:52:55,800
by the mean to look

1324
00:52:55,800 --> 00:52:58,140
so now we said that this commitment is

1325
00:52:58,140 --> 00:53:01,020
secure as long as the adversity provides

1326
00:53:01,020 --> 00:53:03,119
a well-firm commitment so the natural

1327
00:53:03,119 --> 00:53:05,640
idea to lift the security of a weak

1328
00:53:05,640 --> 00:53:08,000
normal level commitment or fully secure

1329
00:53:08,000 --> 00:53:10,319
normalable commitment is to say okay

1330
00:53:10,319 --> 00:53:13,319
let's attach Azure knowledge proof so

1331
00:53:13,319 --> 00:53:17,099
now the receiver will accept uh only if

1332
00:53:17,099 --> 00:53:19,260
the digital knowledge proof is accepting

1333
00:53:19,260 --> 00:53:21,359
and the soundness of this proof

1334
00:53:21,359 --> 00:53:24,599
guarantees that if the receiver accepts

1335
00:53:24,599 --> 00:53:27,000
then the economical commitment is well

1336
00:53:27,000 --> 00:53:28,500
formed

1337
00:53:28,500 --> 00:53:30,660
so now we would like to argue that this

1338
00:53:30,660 --> 00:53:31,920
stuff is secure

1339
00:53:31,920 --> 00:53:34,380
and to do that we would like to of

1340
00:53:34,380 --> 00:53:35,819
course rely on the security of the

1341
00:53:35,819 --> 00:53:38,099
underlying normal level commitment but

1342
00:53:38,099 --> 00:53:39,720
we cannot do that straight away because

1343
00:53:39,720 --> 00:53:42,599
I mean the randomness and the message is

1344
00:53:42,599 --> 00:53:45,839
used by the sender to also compute

1345
00:53:45,839 --> 00:53:49,079
digital knowledge protocol so uh we need

1346
00:53:49,079 --> 00:53:50,040
to do

1347
00:53:50,040 --> 00:53:51,720
um proof through hybrids and the first

1348
00:53:51,720 --> 00:53:53,339
hybrid in the first type we do is okay

1349
00:53:53,339 --> 00:53:54,960
let's run the simulator of the zero

1350
00:53:54,960 --> 00:53:57,839
knowledge protocol and

1351
00:53:57,839 --> 00:54:00,240
argue that that's okay

1352
00:54:00,240 --> 00:54:02,880
uh no not that the adversary might do

1353
00:54:02,880 --> 00:54:05,880
the following so he might perform an

1354
00:54:05,880 --> 00:54:08,700
ill-formed commitment uh on the right

1355
00:54:08,700 --> 00:54:10,920
because he's modeling this proof he

1356
00:54:10,920 --> 00:54:13,140
doesn't know what's going on but he just

1357
00:54:13,140 --> 00:54:14,940
does that because he's modeling the the

1358
00:54:14,940 --> 00:54:17,940
simulated proof he receives on the left

1359
00:54:17,940 --> 00:54:20,579
and and now what we ideally would like

1360
00:54:20,579 --> 00:54:22,800
to do is is that we want to use this

1361
00:54:22,800 --> 00:54:25,859
Behavior to construct a reduction that

1362
00:54:25,859 --> 00:54:28,020
breaks the security of the of the

1363
00:54:28,020 --> 00:54:29,760
digital knowledge protocol because now

1364
00:54:29,760 --> 00:54:32,099
we can use the the fact that the

1365
00:54:32,099 --> 00:54:34,140
adversary is Computing to a bad

1366
00:54:34,140 --> 00:54:37,500
commitment on the on the right

1367
00:54:37,500 --> 00:54:39,420
um to distinguish whether a challenger

1368
00:54:39,420 --> 00:54:41,940
is generating uh the zero knowledge

1369
00:54:41,940 --> 00:54:44,280
proof using the simulator or using the

1370
00:54:44,280 --> 00:54:46,319
the honest proverb procedure

1371
00:54:46,319 --> 00:54:48,660
so now remember we are in the play model

1372
00:54:48,660 --> 00:54:50,280
and remember also that we have an

1373
00:54:50,280 --> 00:54:52,260
extractor that we can use to detect

1374
00:54:52,260 --> 00:54:54,839
whether the message is good or respect

1375
00:54:54,839 --> 00:54:57,720
so we you know the idea is to say let's

1376
00:54:57,720 --> 00:55:00,300
run this this extractor so we can detect

1377
00:55:00,300 --> 00:55:02,339
what's going on

1378
00:55:02,339 --> 00:55:05,339
so this fails because

1379
00:55:05,339 --> 00:55:06,839
um the only way the extractor can work

1380
00:55:06,839 --> 00:55:09,059
in this setting is by doing some rewinds

1381
00:55:09,059 --> 00:55:11,520
and the wines are bad because if you

1382
00:55:11,520 --> 00:55:12,960
know uh you are doing a security

1383
00:55:12,960 --> 00:55:15,720
reduction the messages of the gene

1384
00:55:15,720 --> 00:55:17,579
knowledge protocol are generated by a a

1385
00:55:17,579 --> 00:55:20,059
challenger and the Challenger will not

1386
00:55:20,059 --> 00:55:23,160
reply to you to different

1387
00:55:23,160 --> 00:55:25,319
um it will not allow you allow you

1388
00:55:25,319 --> 00:55:27,540
basically to reset like and that's what

1389
00:55:27,540 --> 00:55:30,059
you need here because now you might be

1390
00:55:30,059 --> 00:55:32,280
able to uh to reply to multiple third

1391
00:55:32,280 --> 00:55:34,619
rounds and generate multiple fourth

1392
00:55:34,619 --> 00:55:37,680
rounds and that's not how the Challenger

1393
00:55:37,680 --> 00:55:40,140
of zero knowledge works so like it gives

1394
00:55:40,140 --> 00:55:42,780
you only one one transcript

1395
00:55:42,780 --> 00:55:44,280
so the way

1396
00:55:44,280 --> 00:55:49,200
the others uh of fox 2014 uh of the 2014

1397
00:55:49,200 --> 00:55:51,300
paper uh solved this problem is by

1398
00:55:51,300 --> 00:55:53,040
saying okay let's use a stronger notion

1399
00:55:53,040 --> 00:55:56,460
of technology that allows rewind that it

1400
00:55:56,460 --> 00:56:00,359
remains secure uh under these mild uh

1401
00:56:00,359 --> 00:56:03,740
reset a toxicity

1402
00:56:05,099 --> 00:56:07,319
it's called it's a non-blackbox in the

1403
00:56:07,319 --> 00:56:09,540
use of The Primitives and also uh like

1404
00:56:09,540 --> 00:56:11,700
max non-black box use of the of the week

1405
00:56:11,700 --> 00:56:13,200
normally

1406
00:56:13,200 --> 00:56:16,079
so we take a different approach uh I

1407
00:56:16,079 --> 00:56:18,119
will not have time to explain everything

1408
00:56:18,119 --> 00:56:21,540
here but basically what we do is that we

1409
00:56:21,540 --> 00:56:25,079
consider a simpler uh sub protocols to

1410
00:56:25,079 --> 00:56:26,760
realize this

1411
00:56:26,760 --> 00:56:30,480
um digital knowledge approved that and

1412
00:56:30,480 --> 00:56:32,819
each of these sub protocol I really

1413
00:56:32,819 --> 00:56:35,880
enjoys a mild form of normal ability

1414
00:56:35,880 --> 00:56:39,900
in particular the main tool we use is

1415
00:56:39,900 --> 00:56:43,280
this one is the Glo is a this pink box

1416
00:56:43,280 --> 00:56:46,500
which is just a proof of knowledge

1417
00:56:46,500 --> 00:56:48,540
um with the delayed input property

1418
00:56:48,540 --> 00:56:51,480
delete input means that the prover does

1419
00:56:51,480 --> 00:56:53,339
not need the statement and the witness

1420
00:56:53,339 --> 00:56:55,220
to compute the first round

1421
00:56:55,220 --> 00:56:59,339
and it enjoys this property that we call

1422
00:56:59,339 --> 00:57:01,440
adaptive on S3 version knowledge with

1423
00:57:01,440 --> 00:57:03,119
respect to community

1424
00:57:03,119 --> 00:57:05,280
okay so just a recap of the notion of

1425
00:57:05,280 --> 00:57:08,040
adaptive and spiritual knowledge so in

1426
00:57:08,040 --> 00:57:09,960
this notion we have two words there is

1427
00:57:09,960 --> 00:57:13,140
the first word where adversary

1428
00:57:13,140 --> 00:57:15,240
um picks the Challenger so picks the

1429
00:57:15,240 --> 00:57:16,500
second round

1430
00:57:16,500 --> 00:57:19,700
uh the proverb computes the first round

1431
00:57:19,700 --> 00:57:22,200
and then the adversity can adaptively

1432
00:57:22,200 --> 00:57:24,660
pick a statement and a witness

1433
00:57:24,660 --> 00:57:26,640
uh I know the proverb can use the

1434
00:57:26,640 --> 00:57:28,500
witness and the statement to to compute

1435
00:57:28,500 --> 00:57:30,420
the third round okay

1436
00:57:30,420 --> 00:57:32,160
and then there is the simulated world

1437
00:57:32,160 --> 00:57:34,140
where the simulator needs to compute

1438
00:57:34,140 --> 00:57:35,480
these pink messages

1439
00:57:35,480 --> 00:57:38,940
and but without using the victims it's

1440
00:57:38,940 --> 00:57:41,220
nothing nothing special it's just

1441
00:57:41,220 --> 00:57:42,540
something it's very very knowledge but

1442
00:57:42,540 --> 00:57:44,940
where the adversity decides the

1443
00:57:44,940 --> 00:57:47,520
statement and the witness adaptively on

1444
00:57:47,520 --> 00:57:48,720
the first round

1445
00:57:48,720 --> 00:57:50,700
and right and what we want is that these

1446
00:57:50,700 --> 00:57:53,640
two words are indistinguishable so

1447
00:57:53,640 --> 00:57:56,280
good so in the notion we introduce is

1448
00:57:56,280 --> 00:57:57,300
that we

1449
00:57:57,300 --> 00:58:00,180
um we assume that the adversary is also

1450
00:58:00,180 --> 00:58:02,400
generating a commitment on the right

1451
00:58:02,400 --> 00:58:05,339
and we require the indistinguishability

1452
00:58:05,339 --> 00:58:08,339
on the joint distribution of the view of

1453
00:58:08,339 --> 00:58:10,020
the adversary and of the committed

1454
00:58:10,020 --> 00:58:11,220
message

1455
00:58:11,220 --> 00:58:13,079
so the distinguisher basically here now

1456
00:58:13,079 --> 00:58:15,599
takes not just a view but also the

1457
00:58:15,599 --> 00:58:18,140
committed message

1458
00:58:18,720 --> 00:58:20,040
so

1459
00:58:20,040 --> 00:58:21,960
uh the

1460
00:58:21,960 --> 00:58:24,240
main tool we use here other than the

1461
00:58:24,240 --> 00:58:27,119
weakness level commitment is also is an

1462
00:58:27,119 --> 00:58:29,160
honestly referred the knowledge protocol

1463
00:58:29,160 --> 00:58:32,280
with respect to a commitment where the

1464
00:58:32,280 --> 00:58:36,319
commitment is uh extractable okay

1465
00:58:36,319 --> 00:58:40,200
and now one could ask whether

1466
00:58:40,200 --> 00:58:42,299
on you know the notion of one honestly

1467
00:58:42,299 --> 00:58:45,599
verified knowledge trivial implies uh

1468
00:58:45,599 --> 00:58:49,440
our new notion and the answer is is no

1469
00:58:49,440 --> 00:58:52,440
and the reason is the following

1470
00:58:52,440 --> 00:58:54,119
so

1471
00:58:54,119 --> 00:58:56,579
as we said we now consider extractable

1472
00:58:56,579 --> 00:58:58,619
commitments uh so the adverse is

1473
00:58:58,619 --> 00:59:00,780
generating this commitment on the on the

1474
00:59:00,780 --> 00:59:02,940
right session and we have a challenger

1475
00:59:02,940 --> 00:59:04,559
one is very very zero knowledge which is

1476
00:59:04,559 --> 00:59:06,599
providing the big message decided in a

1477
00:59:06,599 --> 00:59:10,079
simulated manner or in a on a smaller

1478
00:59:10,079 --> 00:59:12,000
and now we want to run this

1479
00:59:12,000 --> 00:59:13,740
distinguisher remember the distinguisher

1480
00:59:13,740 --> 00:59:15,359
here takes a simple review of The Man in

1481
00:59:15,359 --> 00:59:18,540
the middle and the committed message we

1482
00:59:18,540 --> 00:59:19,859
need to extract the committed message

1483
00:59:19,859 --> 00:59:22,500
and the commitment is extractable that's

1484
00:59:22,500 --> 00:59:25,859
great we can extract and now we can fit

1485
00:59:25,859 --> 00:59:28,200
uh the distinguisher and we can see what

1486
00:59:28,200 --> 00:59:31,619
is this the distinguisher outputs and in

1487
00:59:31,619 --> 00:59:34,020
this way we complete the reduction

1488
00:59:34,020 --> 00:59:35,880
so this has a very similar problem to

1489
00:59:35,880 --> 00:59:38,099
what the one I showed you before we

1490
00:59:38,099 --> 00:59:42,059
because now to extract we need to rewind

1491
00:59:42,059 --> 00:59:45,420
and if we perform our wine now we might

1492
00:59:45,420 --> 00:59:46,920
need to ask the Challenger you know

1493
00:59:46,920 --> 00:59:49,140
please give me another third round but

1494
00:59:49,140 --> 00:59:51,780
for this new pair of statement weakness

1495
00:59:51,780 --> 00:59:53,819
and the Challenger I mean no way he will

1496
00:59:53,819 --> 00:59:55,440
reply to you either the reduction

1497
00:59:55,440 --> 00:59:59,040
manages to generate those or I mean the

1498
00:59:59,040 --> 01:00:02,099
Challenger will not keep this to you

1499
01:00:02,099 --> 01:00:03,599
so

1500
01:00:03,599 --> 01:00:06,420
instead we construct a protocol that

1501
01:00:06,420 --> 01:00:08,640
it's secure in this setting

1502
01:00:08,640 --> 01:00:11,040
the way we do it I will explain it this

1503
01:00:11,040 --> 01:00:14,339
at very high level is by taking the BMR

1504
01:00:14,339 --> 01:00:15,720
protocol the multi-party computation

1505
01:00:15,720 --> 01:00:17,640
protocol

1506
01:00:17,640 --> 01:00:19,619
um and compile it using an NPC in the

1507
01:00:19,619 --> 01:00:22,140
head approach

1508
01:00:22,140 --> 01:00:23,579
so the nice

1509
01:00:23,579 --> 01:00:25,920
property that VMware has is that it has

1510
01:00:25,920 --> 01:00:27,359
a preprocessing phase and an online

1511
01:00:27,359 --> 01:00:29,220
phase where the pre-processing phase is

1512
01:00:29,220 --> 01:00:30,540
independent from the input of the

1513
01:00:30,540 --> 01:00:34,020
parties and these um basically gives you

1514
01:00:34,020 --> 01:00:37,759
uh the delayed input flavor

1515
01:00:38,579 --> 01:00:41,280
um and this gives you an idea the

1516
01:00:41,280 --> 01:00:42,359
importance of reversion knowledge

1517
01:00:42,359 --> 01:00:45,839
protocol to go to them to get all the

1518
01:00:45,839 --> 01:00:48,359
properties we need we combine this

1519
01:00:48,359 --> 01:00:49,740
protocol with a special type of

1520
01:00:49,740 --> 01:00:51,839
commitment

1521
01:00:51,839 --> 01:00:55,500
um and we get our final uh our final

1522
01:00:55,500 --> 01:00:57,839
Gadget

1523
01:00:57,839 --> 01:01:00,980
um so

1524
01:01:02,099 --> 01:01:04,380
so I don't have time to explain you all

1525
01:01:04,380 --> 01:01:05,760
the other

1526
01:01:05,760 --> 01:01:08,460
um the other building blocks uh work and

1527
01:01:08,460 --> 01:01:10,079
how they interact together

1528
01:01:10,079 --> 01:01:12,240
but the main takeaway of this work is

1529
01:01:12,240 --> 01:01:13,680
that

1530
01:01:13,680 --> 01:01:18,000
rewind security uh it's sometimes too

1531
01:01:18,000 --> 01:01:19,920
strong because

1532
01:01:19,920 --> 01:01:21,900
in the reality

1533
01:01:21,900 --> 01:01:25,200
like an adversary it's it's never

1534
01:01:25,200 --> 01:01:27,359
managed to see to ask for multiple third

1535
01:01:27,359 --> 01:01:28,799
rounds of a protocol and receive

1536
01:01:28,799 --> 01:01:31,859
multiple fourth rounds so uh in in these

1537
01:01:31,859 --> 01:01:33,839
protocols it's not like the adversary is

1538
01:01:33,839 --> 01:01:37,500
stateful and can really record uh

1539
01:01:37,500 --> 01:01:41,400
all these uh resets that it does it's a

1540
01:01:41,400 --> 01:01:43,920
reduction that does their wines

1541
01:01:43,920 --> 01:01:46,460
and so

1542
01:01:46,460 --> 01:01:49,020
like the adversity is actually a bit

1543
01:01:49,020 --> 01:01:51,480
less strong so rewind security might be

1544
01:01:51,480 --> 01:01:53,760
too much sometimes you can do something

1545
01:01:53,760 --> 01:01:56,040
weaker for example constructing a

1546
01:01:56,040 --> 01:01:58,200
privity A Primitive that you prove it

1547
01:01:58,200 --> 01:02:00,240
remains secure in when run in parallel

1548
01:02:00,240 --> 01:02:02,579
with some other primitive B which in

1549
01:02:02,579 --> 01:02:05,220
this case is a commitment

1550
01:02:05,220 --> 01:02:09,299
and what remains open is that uh yeah we

1551
01:02:09,299 --> 01:02:11,040
don't know yet how to do a trillion

1552
01:02:11,040 --> 01:02:13,140
protocol that uses black one-way

1553
01:02:13,140 --> 01:02:15,359
functions in a black box way we know how

1554
01:02:15,359 --> 01:02:18,059
to do that using non-black box uh um

1555
01:02:18,059 --> 01:02:19,740
using the one-way functions in

1556
01:02:19,740 --> 01:02:22,020
non-blackbox way and moreover the

1557
01:02:22,020 --> 01:02:24,540
construction we have it's secure as long

1558
01:02:24,540 --> 01:02:27,960
as uh you Pro as long as the sender

1559
01:02:27,960 --> 01:02:30,540
sends one commitment and and the main

1560
01:02:30,540 --> 01:02:33,420
damage generates one completion okay so

1561
01:02:33,420 --> 01:02:35,099
to extend this in a setting where the

1562
01:02:35,099 --> 01:02:37,380
magnitude can generate more than one

1563
01:02:37,380 --> 01:02:39,660
commitment it's it's not it's an open

1564
01:02:39,660 --> 01:02:41,400
problem but we believe that using

1565
01:02:41,400 --> 01:02:43,099
similar techniques we might be able to

1566
01:02:43,099 --> 01:02:45,660
uh to achieve that

1567
01:02:45,660 --> 01:02:48,119
and uh yeah for more detail like please

1568
01:02:48,119 --> 01:02:50,579
give a look to our paper and thank you

1569
01:02:50,579 --> 01:02:52,819
very much

1570
01:02:56,040 --> 01:02:58,200
all right so does anyone have any

1571
01:02:58,200 --> 01:02:59,579
questions so if you have questions uh

1572
01:02:59,579 --> 01:03:01,200
we're going to repeat them don't use the

1573
01:03:01,200 --> 01:03:03,680
microphone

1574
01:03:09,420 --> 01:03:12,299
all right so I don't see anyone okay so

1575
01:03:12,299 --> 01:03:14,339
then let's just thanks all of the

1576
01:03:14,339 --> 01:03:16,140
speakers of the session again and we are

1577
01:03:16,140 --> 01:03:19,098
having a break now

