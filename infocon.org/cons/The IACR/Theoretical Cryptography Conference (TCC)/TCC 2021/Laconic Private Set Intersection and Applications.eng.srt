1
00:00:00,799 --> 00:00:01,680
hi

2
00:00:01,680 --> 00:00:03,760
this talk is about laconic private set

3
00:00:03,760 --> 00:00:06,640
intersectional applications i'm pedro

4
00:00:06,640 --> 00:00:08,240
and this is joint work with navida

5
00:00:08,240 --> 00:00:10,960
lamati niko dotling sanjayam garg

6
00:00:10,960 --> 00:00:14,719
muhammad ajabadi and siang poo

7
00:00:14,719 --> 00:00:16,800
in this work we study the framework of

8
00:00:16,800 --> 00:00:19,039
laconic cryptography which is a special

9
00:00:19,039 --> 00:00:22,480
case of two-party secure computation

10
00:00:22,480 --> 00:00:25,119
here the first party or the receiver has

11
00:00:25,119 --> 00:00:27,519
a long input x

12
00:00:27,519 --> 00:00:30,640
it first hashes the input into a small

13
00:00:30,640 --> 00:00:32,880
hash h

14
00:00:32,880 --> 00:00:35,360
then the sender computes a message m

15
00:00:35,360 --> 00:00:40,640
depending on his input y and the hash h

16
00:00:40,719 --> 00:00:44,000
finally given x and m the receiver can

17
00:00:44,000 --> 00:00:45,840
compute

18
00:00:45,840 --> 00:00:48,239
f x y

19
00:00:48,239 --> 00:00:50,960
in terms of efficiency we require that

20
00:00:50,960 --> 00:00:52,640
the communication complexity of the

21
00:00:52,640 --> 00:00:53,760
protocol

22
00:00:53,760 --> 00:00:55,440
doesn't depend on the size of the

23
00:00:55,440 --> 00:00:58,480
receiver's input x

24
00:00:58,480 --> 00:01:00,480
the electronic cryptography framework

25
00:01:00,480 --> 00:01:02,559
allows for secure reverse delegation of

26
00:01:02,559 --> 00:01:04,479
computation as opposed to fully

27
00:01:04,479 --> 00:01:06,640
homomorphic encryption and allows for

28
00:01:06,640 --> 00:01:10,720
communication efficient secure protocols

29
00:01:10,720 --> 00:01:12,960
teleconic cryptography framework was

30
00:01:12,960 --> 00:01:15,280
presented in the work of show it all

31
00:01:15,280 --> 00:01:17,119
where a laconic oblivious transfer

32
00:01:17,119 --> 00:01:19,040
protocol is presented

33
00:01:19,040 --> 00:01:21,119
this protocol can be based on several

34
00:01:21,119 --> 00:01:24,479
hardness assumptions such as ddh lwe or

35
00:01:24,479 --> 00:01:26,560
qr

36
00:01:26,560 --> 00:01:29,600
later a laconic protocol to compute any

37
00:01:29,600 --> 00:01:31,759
function was presented in a work of

38
00:01:31,759 --> 00:01:33,280
quack at all

39
00:01:33,280 --> 00:01:35,840
this protocol is based on the hardness

40
00:01:35,840 --> 00:01:39,040
of dlwb with superpolynomial modulus to

41
00:01:39,040 --> 00:01:41,040
noise ratio

42
00:01:41,040 --> 00:01:43,280
both of these works use non-black box

43
00:01:43,280 --> 00:01:44,399
techniques

44
00:01:44,399 --> 00:01:47,680
which makes both schemes impractical for

45
00:01:47,680 --> 00:01:50,399
real world applications

46
00:01:50,399 --> 00:01:53,520
this raises two questions the first one

47
00:01:53,520 --> 00:01:55,680
is whether we can build laconic

48
00:01:55,680 --> 00:01:58,240
protocols for other functionalities from

49
00:01:58,240 --> 00:02:01,600
from assumptions other than lwb

50
00:02:01,600 --> 00:02:03,680
the second one is whether we can build

51
00:02:03,680 --> 00:02:06,320
efficient laconic protocols

52
00:02:06,320 --> 00:02:08,318
in this work we focus on leconic

53
00:02:08,318 --> 00:02:11,680
protocols for a specific functionality

54
00:02:11,680 --> 00:02:15,120
namely private set intersection

55
00:02:15,120 --> 00:02:18,560
here the receiver has a large input set

56
00:02:18,560 --> 00:02:23,280
x and the sender as a small input set y

57
00:02:23,280 --> 00:02:25,200
in the end of the protocol the receiver

58
00:02:25,200 --> 00:02:26,879
should learn the intersection of both

59
00:02:26,879 --> 00:02:29,440
sets and nothing else

60
00:02:29,440 --> 00:02:31,280
so what do we know about placonic

61
00:02:31,280 --> 00:02:34,400
private set intersection

62
00:02:34,400 --> 00:02:36,800
we know that laconic function evaluation

63
00:02:36,800 --> 00:02:39,519
implies loconic psi but at the cost of

64
00:02:39,519 --> 00:02:41,920
super polynomial modulus to noise ratio

65
00:02:41,920 --> 00:02:45,200
lwe and non-black box techniques

66
00:02:45,200 --> 00:02:48,319
hence we ask two questions in this work

67
00:02:48,319 --> 00:02:51,440
the first one is whether laconic psi can

68
00:02:51,440 --> 00:02:54,959
be based on assumptions other than lwe

69
00:02:54,959 --> 00:02:56,959
the second one is whether we can build

70
00:02:56,959 --> 00:03:00,480
efficient electronic psi protocols

71
00:03:00,480 --> 00:03:03,840
our results are two-fold

72
00:03:03,840 --> 00:03:06,800
start by presenting a feasibility result

73
00:03:06,800 --> 00:03:09,519
namely we construct the lpsi from

74
00:03:09,519 --> 00:03:11,680
anonymous hash encryption which can be

75
00:03:11,680 --> 00:03:17,800
based on cdh or lwb and garbled circuits

76
00:03:18,000 --> 00:03:20,319
construction builds on the merkle tree

77
00:03:20,319 --> 00:03:22,720
garbled circuit based approach

78
00:03:22,720 --> 00:03:24,879
of dotling at all

79
00:03:24,879 --> 00:03:26,799
showing how to use garbled circuits to

80
00:03:26,799 --> 00:03:29,360
perform binary search on a set of sorted

81
00:03:29,360 --> 00:03:30,720
values

82
00:03:30,720 --> 00:03:32,879
the construction uses non-black box

83
00:03:32,879 --> 00:03:34,159
techniques

84
00:03:34,159 --> 00:03:37,120
so as our second contribution we present

85
00:03:37,120 --> 00:03:40,000
electronic psi protocol from phi hiding

86
00:03:40,000 --> 00:03:44,000
which uses only black box techniques

87
00:03:44,000 --> 00:03:46,080
then we show how to extend the phy

88
00:03:46,080 --> 00:03:49,920
hiding construction into a reusable lpsi

89
00:03:49,920 --> 00:03:52,159
where the first message of the receiver

90
00:03:52,159 --> 00:03:54,959
can be reused across several executions

91
00:03:54,959 --> 00:03:57,120
of the protocol and which is secure

92
00:03:57,120 --> 00:03:58,840
against malicious

93
00:03:58,840 --> 00:04:02,080
senders we do this by relying on the

94
00:04:02,080 --> 00:04:04,319
decisional composite residuocity

95
00:04:04,319 --> 00:04:06,879
assumption the fire hiding assumption

96
00:04:06,879 --> 00:04:08,879
and the subgroup decisional assumption

97
00:04:08,879 --> 00:04:11,120
on pairings

98
00:04:11,120 --> 00:04:13,280
as an additional result

99
00:04:13,280 --> 00:04:15,360
we construct black box designated

100
00:04:15,360 --> 00:04:18,320
verifier nesix for range proofs for dam

101
00:04:18,320 --> 00:04:20,798
guard uric ciphertexts

102
00:04:20,798 --> 00:04:22,720
this allows us to prove

103
00:04:22,720 --> 00:04:23,520
that

104
00:04:23,520 --> 00:04:25,520
the plain text

105
00:04:25,520 --> 00:04:26,639
of a

106
00:04:26,639 --> 00:04:31,040
dj ciphertext is within a certain range

107
00:04:31,040 --> 00:04:33,280
for the rest of this talk i'm going to

108
00:04:33,280 --> 00:04:35,840
focus on the blackbox lpsi from phi

109
00:04:35,840 --> 00:04:37,759
hiding

110
00:04:37,759 --> 00:04:39,120
for a detailed

111
00:04:39,120 --> 00:04:41,199
description and analysis of our

112
00:04:41,199 --> 00:04:44,000
feasibility result please check the full

113
00:04:44,000 --> 00:04:46,000
version of the paper

114
00:04:46,000 --> 00:04:48,240
we now describe our construction based

115
00:04:48,240 --> 00:04:50,800
on the phi hiding assumption

116
00:04:50,800 --> 00:04:53,680
our starting point is the construction

117
00:04:53,680 --> 00:04:56,160
of coil at all for one-way functions

118
00:04:56,160 --> 00:04:58,880
with encryptions from phi hiding

119
00:04:58,880 --> 00:05:01,440
recall that in a one-way function with

120
00:05:01,440 --> 00:05:04,720
encryption given h which is a the result

121
00:05:04,720 --> 00:05:06,720
of a one-way function

122
00:05:06,720 --> 00:05:09,440
applied to a string of bits x

123
00:05:09,440 --> 00:05:11,919
the encryptor can encrypt a message with

124
00:05:11,919 --> 00:05:15,360
respect to a position i and a bit b

125
00:05:15,360 --> 00:05:18,479
the decryptor can recover m if and only

126
00:05:18,479 --> 00:05:21,280
if x i is equal to b

127
00:05:21,280 --> 00:05:25,600
otherwise the message m remains hidden

128
00:05:25,600 --> 00:05:28,080
in the one-way function with encryption

129
00:05:28,080 --> 00:05:31,120
by goyal at all the crs is composed by

130
00:05:31,120 --> 00:05:33,520
an rsa modulus n

131
00:05:33,520 --> 00:05:35,520
and by 2l

132
00:05:35,520 --> 00:05:38,960
uniformly chosen prime numbers

133
00:05:38,960 --> 00:05:41,199
to compute the one-way function on an

134
00:05:41,199 --> 00:05:44,720
input string x

135
00:05:44,720 --> 00:05:47,759
we first choose a random

136
00:05:47,759 --> 00:05:50,800
element r and compute g to the r times

137
00:05:50,800 --> 00:05:53,840
the product of the primes p i x i modulo

138
00:05:53,840 --> 00:05:54,960
n

139
00:05:54,960 --> 00:05:58,400
given h a position i star and a bit p

140
00:05:58,400 --> 00:06:00,639
the encryptor first chooses a random

141
00:06:00,639 --> 00:06:03,280
element rho and computes the ciphertext

142
00:06:03,280 --> 00:06:07,840
which is g to the rho times p i star b

143
00:06:07,919 --> 00:06:10,479
then it uses as the shared key

144
00:06:10,479 --> 00:06:13,759
the value h to the rho modulo n

145
00:06:13,759 --> 00:06:16,400
finally the decrypter computes the key k

146
00:06:16,400 --> 00:06:17,360
prime

147
00:06:17,360 --> 00:06:19,919
which is the ciphertext to the

148
00:06:19,919 --> 00:06:22,880
product of the primes p i x i for i

149
00:06:22,880 --> 00:06:24,800
different than i star

150
00:06:24,800 --> 00:06:28,240
it is easy to see that if x i prime is

151
00:06:28,240 --> 00:06:29,440
equal to b

152
00:06:29,440 --> 00:06:32,400
then k prime is equal to k

153
00:06:32,400 --> 00:06:35,199
our first observation is that this

154
00:06:35,199 --> 00:06:38,319
scheme almost yells electronic psi

155
00:06:38,319 --> 00:06:41,360
scheme as we'll see in the next slide

156
00:06:41,360 --> 00:06:43,360
let's see how we can build electronic

157
00:06:43,360 --> 00:06:45,759
psi protocol using the ideas from the

158
00:06:45,759 --> 00:06:47,280
previous slide

159
00:06:47,280 --> 00:06:49,759
let's assume for now that we have a

160
00:06:49,759 --> 00:06:52,960
universe of polynomial size

161
00:06:52,960 --> 00:06:56,319
we will later explain how we can remove

162
00:06:56,319 --> 00:06:57,680
this

163
00:06:57,680 --> 00:06:58,479
this

164
00:06:58,479 --> 00:07:00,960
this condition

165
00:07:00,960 --> 00:07:04,560
the crs is composed by an rsa modulus

166
00:07:04,560 --> 00:07:06,000
an element g

167
00:07:06,000 --> 00:07:08,720
in the multiplicative group

168
00:07:08,720 --> 00:07:10,160
zn star

169
00:07:10,160 --> 00:07:12,319
and primes p1

170
00:07:12,319 --> 00:07:14,720
pl each one encoding

171
00:07:14,720 --> 00:07:17,280
an element in the universe

172
00:07:17,280 --> 00:07:20,160
let's assume that the receiver as a set

173
00:07:20,160 --> 00:07:24,560
as r and that the sender as a set

174
00:07:24,560 --> 00:07:25,759
s s

175
00:07:25,759 --> 00:07:28,720
with only one element

176
00:07:28,720 --> 00:07:30,880
the receiver starts by computing a hash

177
00:07:30,880 --> 00:07:34,160
value h which is computed as g to the r

178
00:07:34,160 --> 00:07:39,599
times the products p i for each i in sr

179
00:07:39,599 --> 00:07:41,840
then the sender computes

180
00:07:41,840 --> 00:07:46,878
an element f which is g to the rho times

181
00:07:46,960 --> 00:07:49,199
pw which is a prime encoding the element

182
00:07:49,199 --> 00:07:50,639
w

183
00:07:50,639 --> 00:07:52,879
and

184
00:07:52,960 --> 00:07:55,199
a value r which is a randomness

185
00:07:55,199 --> 00:07:58,400
extractor applied to the hash value h to

186
00:07:58,400 --> 00:08:00,878
the row

187
00:08:01,120 --> 00:08:02,560
it sends the

188
00:08:02,560 --> 00:08:06,080
randomness extractor seed s the value f

189
00:08:06,080 --> 00:08:09,360
and the value r to the receiver

190
00:08:09,360 --> 00:08:10,160
now

191
00:08:10,160 --> 00:08:13,199
for each element in the receiver set the

192
00:08:13,199 --> 00:08:16,080
receiver computes a value ri which is

193
00:08:16,080 --> 00:08:19,039
the extractor applied to f to the r

194
00:08:19,039 --> 00:08:22,319
times the product of the primes encoding

195
00:08:22,319 --> 00:08:24,479
the receiver set element except for the

196
00:08:24,479 --> 00:08:26,400
ith position

197
00:08:26,400 --> 00:08:29,039
if there if there is an element i such

198
00:08:29,039 --> 00:08:31,919
that the value ri is equal to r

199
00:08:31,919 --> 00:08:33,919
then the receiver outputs

200
00:08:33,919 --> 00:08:37,039
the set element i

201
00:08:37,039 --> 00:08:40,240
it is easy to see that the

202
00:08:40,240 --> 00:08:42,080
protocol is correct

203
00:08:42,080 --> 00:08:44,959
and laconic in the sense that the

204
00:08:44,959 --> 00:08:47,360
communication complexity of the protocol

205
00:08:47,360 --> 00:08:49,120
doesn't depend on the size of the

206
00:08:49,120 --> 00:08:51,600
receiver set

207
00:08:51,600 --> 00:08:54,080
however there's a drawback in this

208
00:08:54,080 --> 00:08:56,000
protocol namely

209
00:08:56,000 --> 00:08:57,440
it only works

210
00:08:57,440 --> 00:09:00,240
for polynomial size universes and is

211
00:09:00,240 --> 00:09:03,360
only secure against a semi understander

212
00:09:03,360 --> 00:09:05,600
now let's see how we can prove semi on

213
00:09:05,600 --> 00:09:07,440
the security of

214
00:09:07,440 --> 00:09:09,680
security against the semi on the sender

215
00:09:09,680 --> 00:09:13,200
is trivial since the value h in is

216
00:09:13,200 --> 00:09:15,920
indistinguishable from a uniform value

217
00:09:15,920 --> 00:09:18,080
for security against a semi honest

218
00:09:18,080 --> 00:09:21,360
receiver we first replace the

219
00:09:21,360 --> 00:09:24,240
rsa modulus in the crs

220
00:09:24,240 --> 00:09:27,120
by a nor say by a

221
00:09:27,120 --> 00:09:28,240
value n

222
00:09:28,240 --> 00:09:31,680
such that pw divides phi of n

223
00:09:31,680 --> 00:09:34,320
this change goes unnoticed under the phi

224
00:09:34,320 --> 00:09:36,320
hiding assumption

225
00:09:36,320 --> 00:09:38,640
now we can argue that the value f which

226
00:09:38,640 --> 00:09:41,200
is g to the rho times pw loses

227
00:09:41,200 --> 00:09:43,519
information about rho

228
00:09:43,519 --> 00:09:46,080
this means that the value h to the rho

229
00:09:46,080 --> 00:09:50,120
has high min entropy

230
00:09:50,640 --> 00:09:53,279
and thus we can replace r

231
00:09:53,279 --> 00:09:56,480
by a uniform value

232
00:09:56,560 --> 00:09:58,320
now we can change the

233
00:09:58,320 --> 00:10:02,560
rsa modulus back to the normal mode

234
00:10:03,600 --> 00:10:06,320
and we can conclude that uh

235
00:10:06,320 --> 00:10:10,560
and we can replace f by a uniform value

236
00:10:10,560 --> 00:10:12,880
we now show the main ideas

237
00:10:12,880 --> 00:10:13,760
uh

238
00:10:13,760 --> 00:10:16,720
to uh extend this protocol into a

239
00:10:16,720 --> 00:10:18,720
protocol that supports exponential

240
00:10:18,720 --> 00:10:22,480
universes the main idea is to describe

241
00:10:22,480 --> 00:10:27,600
the universe implicitly via a prf key

242
00:10:27,600 --> 00:10:30,079
this prf should map into the prime

243
00:10:30,079 --> 00:10:33,079
numbers

244
00:10:33,440 --> 00:10:36,160
but recall that in the security proof

245
00:10:36,160 --> 00:10:38,399
for a semi-honest receiver we need to

246
00:10:38,399 --> 00:10:40,880
program one of the primes to

247
00:10:40,880 --> 00:10:43,360
use the fi hiding assumption

248
00:10:43,360 --> 00:10:46,800
for that we'll use a programmable prf in

249
00:10:46,800 --> 00:10:49,680
which we can program one of the outputs

250
00:10:49,680 --> 00:10:52,160
of the prf

251
00:10:52,160 --> 00:10:54,720
we now show the main ideas on how to

252
00:10:54,720 --> 00:10:56,880
extend the protocol to allow for

253
00:10:56,880 --> 00:11:00,240
malicious sender

254
00:11:00,240 --> 00:11:02,160
recall that to prove

255
00:11:02,160 --> 00:11:04,160
security against a malicious sender we

256
00:11:04,160 --> 00:11:07,279
need to extract the sender's input

257
00:11:07,279 --> 00:11:09,360
for this we can use general purpose

258
00:11:09,360 --> 00:11:10,399
nesix

259
00:11:10,399 --> 00:11:11,440
to

260
00:11:11,440 --> 00:11:14,000
guarantee that the receiver's message is

261
00:11:14,000 --> 00:11:15,279
well formed

262
00:11:15,279 --> 00:11:17,120
but this

263
00:11:17,120 --> 00:11:18,160
uses

264
00:11:18,160 --> 00:11:21,439
non-black box techniques

265
00:11:22,079 --> 00:11:24,079
so observe that the res that the

266
00:11:24,079 --> 00:11:25,600
sender's message is composed by the

267
00:11:25,600 --> 00:11:28,480
value f which is g to the rho times pw

268
00:11:28,480 --> 00:11:30,560
and the value r which is the extractor

269
00:11:30,560 --> 00:11:32,640
applied to h to the rho

270
00:11:32,640 --> 00:11:33,600
to prove

271
00:11:33,600 --> 00:11:35,600
malicious center security we need to

272
00:11:35,600 --> 00:11:39,680
extract both the values w and rho

273
00:11:39,680 --> 00:11:42,800
the high level idea to extract

274
00:11:42,800 --> 00:11:43,920
both

275
00:11:43,920 --> 00:11:46,480
w and rho is the following we first

276
00:11:46,480 --> 00:11:48,320
perform a re-encryption step which

277
00:11:48,320 --> 00:11:50,560
allows the simulator to extract the

278
00:11:50,560 --> 00:11:52,959
sender's input w

279
00:11:52,959 --> 00:11:55,760
then we switch to a dom guard uric group

280
00:11:55,760 --> 00:11:57,680
and this allows to extract

281
00:11:57,680 --> 00:11:59,519
both

282
00:11:59,519 --> 00:12:02,399
the value raw pw and check that r is

283
00:12:02,399 --> 00:12:04,880
indeed well formed

284
00:12:04,880 --> 00:12:06,079
finally

285
00:12:06,079 --> 00:12:10,480
we show how to construct range proof

286
00:12:10,480 --> 00:12:13,040
range proof proof systems for dam guard

287
00:12:13,040 --> 00:12:15,279
uric ciphertexts and this guarantees

288
00:12:15,279 --> 00:12:17,920
that the simulator can extract the value

289
00:12:17,920 --> 00:12:19,839
uh with hype with overwhelming

290
00:12:19,839 --> 00:12:21,600
probability

291
00:12:21,600 --> 00:12:23,680
let's let's first look at the

292
00:12:23,680 --> 00:12:26,720
re-encryption re-encryption step

293
00:12:26,720 --> 00:12:29,760
here the observation is that the value r

294
00:12:29,760 --> 00:12:34,399
computed by the sender is uniform when

295
00:12:34,399 --> 00:12:37,760
the element is not in the receiver set

296
00:12:37,760 --> 00:12:39,839
in the original protocol the sender

297
00:12:39,839 --> 00:12:42,320
computes the value f and the value r and

298
00:12:42,320 --> 00:12:44,399
sends both of them to the receiver the

299
00:12:44,399 --> 00:12:46,720
receiver then checks if there's an

300
00:12:46,720 --> 00:12:49,279
i such that r i is equal to r and

301
00:12:49,279 --> 00:12:53,040
outputs the element i if the if this

302
00:12:53,040 --> 00:12:55,279
happens for for for some for some

303
00:12:55,279 --> 00:12:57,360
element

304
00:12:57,360 --> 00:12:59,200
we now modify the protocol in the

305
00:12:59,200 --> 00:13:02,480
following way we had the we had a public

306
00:13:02,480 --> 00:13:06,160
key of an ncpa public encryption to the

307
00:13:06,160 --> 00:13:08,720
to the crs for which the simulator has

308
00:13:08,720 --> 00:13:11,519
the secret key

309
00:13:12,560 --> 00:13:14,560
then the sender sends the value f as

310
00:13:14,560 --> 00:13:15,680
before

311
00:13:15,680 --> 00:13:17,600
but now it sends a cipher text which

312
00:13:17,600 --> 00:13:19,200
encrypts

313
00:13:19,200 --> 00:13:20,800
his

314
00:13:20,800 --> 00:13:22,000
input

315
00:13:22,000 --> 00:13:26,000
element w with the randomness r

316
00:13:26,000 --> 00:13:30,160
the receiver computes ri as before for

317
00:13:30,160 --> 00:13:33,360
all elements in his set and it checks if

318
00:13:33,360 --> 00:13:35,920
the encryption of the value of this of

319
00:13:35,920 --> 00:13:39,920
the set element i with randomness ri

320
00:13:39,920 --> 00:13:41,440
corresponds

321
00:13:41,440 --> 00:13:43,839
is the same as the ciphertext sent by

322
00:13:43,839 --> 00:13:45,440
the sender

323
00:13:45,440 --> 00:13:48,079
in the security proof the simulator now

324
00:13:48,079 --> 00:13:50,560
has the secret key for the public key

325
00:13:50,560 --> 00:13:52,639
and can decrypt the ciphertext sent by

326
00:13:52,639 --> 00:13:55,040
the sender and recover the uh

327
00:13:55,040 --> 00:13:57,920
via sender's input w

328
00:13:57,920 --> 00:14:00,560
as a bonus we get perfect correctness

329
00:14:00,560 --> 00:14:03,279
for our new protocol

330
00:14:03,279 --> 00:14:05,360
and security against

331
00:14:05,360 --> 00:14:08,000
the receiver

332
00:14:08,639 --> 00:14:10,320
we can simply

333
00:14:10,320 --> 00:14:12,880
since r is uniform we can simply replace

334
00:14:12,880 --> 00:14:16,560
the ciphertext by encryptions of zero

335
00:14:16,560 --> 00:14:18,560
now for to prove security against a

336
00:14:18,560 --> 00:14:20,320
malicious sender

337
00:14:20,320 --> 00:14:22,480
the simulator since it has the secret

338
00:14:22,480 --> 00:14:25,040
key of the public key can extract w uh

339
00:14:25,040 --> 00:14:26,720
from the ciphertext as i mentioned

340
00:14:26,720 --> 00:14:28,480
before

341
00:14:28,480 --> 00:14:30,959
but there's still an issue

342
00:14:30,959 --> 00:14:32,720
which is the following the simulator

343
00:14:32,720 --> 00:14:35,360
does not detect false positives

344
00:14:35,360 --> 00:14:37,040
for example consider the case where a

345
00:14:37,040 --> 00:14:40,880
malicious sender encrypts using a a

346
00:14:40,880 --> 00:14:44,079
uniform value r instead of computing it

347
00:14:44,079 --> 00:14:45,920
honestly

348
00:14:45,920 --> 00:14:49,680
in this case the simulator will extract

349
00:14:49,680 --> 00:14:52,719
the sender's input

350
00:14:52,880 --> 00:14:53,760
but

351
00:14:53,760 --> 00:14:56,320
the honest receiver

352
00:14:56,320 --> 00:14:57,600
might

353
00:14:57,600 --> 00:15:00,399
will fail with high probability

354
00:15:00,399 --> 00:15:02,560
so to fix this we need a way to extract

355
00:15:02,560 --> 00:15:05,519
the randomness rule from the value f

356
00:15:05,519 --> 00:15:07,920
from the value f

357
00:15:07,920 --> 00:15:10,720
our our solution for this is simple

358
00:15:10,720 --> 00:15:13,920
we simply replace the uh

359
00:15:13,920 --> 00:15:17,440
multiplicative group of zn

360
00:15:17,440 --> 00:15:20,399
by a dam guard utic group

361
00:15:20,399 --> 00:15:23,600
recall that dam guard uric groups

362
00:15:23,600 --> 00:15:25,920
have a very nice property which is the

363
00:15:25,920 --> 00:15:29,120
following given phi of n we can

364
00:15:29,120 --> 00:15:31,040
efficiently compute

365
00:15:31,040 --> 00:15:33,519
discrete logarithms

366
00:15:33,519 --> 00:15:36,079
let's see how we can use this fact about

367
00:15:36,079 --> 00:15:38,399
dj groups to prove

368
00:15:38,399 --> 00:15:41,360
security against malicious senders

369
00:15:41,360 --> 00:15:44,000
assume for now that we have a reusable

370
00:15:44,000 --> 00:15:46,800
designated verifier nizik

371
00:15:46,800 --> 00:15:48,560
which given f

372
00:15:48,560 --> 00:15:51,279
which is g to the a allows us to show

373
00:15:51,279 --> 00:15:53,040
that the the

374
00:15:53,040 --> 00:15:57,360
exponent a is within some range

375
00:15:57,360 --> 00:15:59,600
for a complete description of such a

376
00:15:59,600 --> 00:16:00,639
scheme

377
00:16:00,639 --> 00:16:03,680
please see the full version of our paper

378
00:16:03,680 --> 00:16:05,759
let's see how the final version of our

379
00:16:05,759 --> 00:16:09,199
protocol looks like now all parties

380
00:16:09,199 --> 00:16:14,480
compute their uh values in the dj group

381
00:16:14,480 --> 00:16:16,639
the sender now sends f

382
00:16:16,639 --> 00:16:19,279
and the ciphertext ct as before but

383
00:16:19,279 --> 00:16:21,279
additionally proves that

384
00:16:21,279 --> 00:16:22,639
the

385
00:16:22,639 --> 00:16:24,639
exponent in

386
00:16:24,639 --> 00:16:25,759
in g

387
00:16:25,759 --> 00:16:29,920
to the row pw is within some range

388
00:16:29,920 --> 00:16:31,600
for security against the malicious

389
00:16:31,600 --> 00:16:35,040
sender we can replace the the element g

390
00:16:35,040 --> 00:16:36,560
by an element

391
00:16:36,560 --> 00:16:39,040
g2 for which we can for each the

392
00:16:39,040 --> 00:16:43,599
simulator can compute uh d-logs

393
00:16:43,839 --> 00:16:46,160
the simulator can now recover a rho

394
00:16:46,160 --> 00:16:49,199
times pw and perform the re-encryption

395
00:16:49,199 --> 00:16:51,839
step as before

396
00:16:52,240 --> 00:16:53,600
to show the

397
00:16:53,600 --> 00:16:55,199
usefulness

398
00:16:55,199 --> 00:16:58,320
of laconic private set intersection

399
00:16:58,320 --> 00:17:01,759
we show that we can use laconic psi to

400
00:17:01,759 --> 00:17:03,839
construct a new primitive that we call

401
00:17:03,839 --> 00:17:06,640
self-detecting encryption

402
00:17:06,640 --> 00:17:09,280
self-detecting encryption is essentially

403
00:17:09,280 --> 00:17:11,599
a public key encryption such that we can

404
00:17:11,599 --> 00:17:14,720
detect if ciphertex is encrypting a

405
00:17:14,720 --> 00:17:17,039
special message

406
00:17:17,039 --> 00:17:18,480
let's see how we can build

407
00:17:18,480 --> 00:17:20,640
self-detecting encryption from laconic

408
00:17:20,640 --> 00:17:21,919
psi

409
00:17:21,919 --> 00:17:25,520
first an authority such as a government

410
00:17:25,520 --> 00:17:28,640
publishes a hash of the uh

411
00:17:28,640 --> 00:17:31,919
special database which can be exam for

412
00:17:31,919 --> 00:17:36,240
example composed by illegal videos

413
00:17:36,240 --> 00:17:38,559
then cipher texts

414
00:17:38,559 --> 00:17:39,679
are

415
00:17:39,679 --> 00:17:42,640
encrypted as

416
00:17:42,640 --> 00:17:44,960
with respect to this hash

417
00:17:44,960 --> 00:17:48,000
that is ciphertext corresponds to the

418
00:17:48,000 --> 00:17:50,400
sender's message in the lpsipro in the

419
00:17:50,400 --> 00:17:52,160
lpsi

420
00:17:52,160 --> 00:17:56,000
finally anyone knowing the database

421
00:17:56,000 --> 00:17:58,640
can perform a private set intersection

422
00:17:58,640 --> 00:18:02,799
between the database and the ciphertext

423
00:18:02,799 --> 00:18:04,480
if the ciphertext is encrypting a

424
00:18:04,480 --> 00:18:06,320
message a message

425
00:18:06,320 --> 00:18:09,039
which is in the database then we learn

426
00:18:09,039 --> 00:18:10,160
the message

427
00:18:10,160 --> 00:18:13,280
otherwise we know we learn nothing about

428
00:18:13,280 --> 00:18:16,000
the encrypted message

429
00:18:16,000 --> 00:18:20,039
that's all thanks

