1
00:00:01,360 --> 00:00:03,600
cryptographic challenge a formal

2
00:00:03,600 --> 00:00:06,480
treatment of repliable onion encryption

3
00:00:06,480 --> 00:00:08,880
my name is megumi ando and this is joint

4
00:00:08,880 --> 00:00:12,559
work with ana licianskaya

5
00:00:13,840 --> 00:00:15,519
suppose that alice wants to send a

6
00:00:15,519 --> 00:00:18,160
message to david anonymously

7
00:00:18,160 --> 00:00:20,320
then encrypting the message can prevent

8
00:00:20,320 --> 00:00:21,920
an eavesdropper from learning the

9
00:00:21,920 --> 00:00:25,039
content of the message

10
00:00:27,439 --> 00:00:29,679
but it won't prevent an adversary who

11
00:00:29,679 --> 00:00:32,000
can observe the network traffic from

12
00:00:32,000 --> 00:00:34,000
discerning that alice is communicating

13
00:00:34,000 --> 00:00:35,760
with david

14
00:00:35,760 --> 00:00:37,680
the adversary can simply trace the

15
00:00:37,680 --> 00:00:39,920
sequence of bits coming out of alice's

16
00:00:39,920 --> 00:00:44,160
computer and going into davis

17
00:00:44,160 --> 00:00:46,239
so what can alice do to prevent the

18
00:00:46,239 --> 00:00:48,079
adversary from learning who she is

19
00:00:48,079 --> 00:00:51,039
communicating with

20
00:00:51,920 --> 00:00:54,160
one practical approach is to use onion

21
00:00:54,160 --> 00:00:55,199
routing

22
00:00:55,199 --> 00:00:57,920
which was originally proposed by chong

23
00:00:57,920 --> 00:01:00,239
to send a message to david

24
00:01:00,239 --> 00:01:02,320
alice first picks a writing path ending

25
00:01:02,320 --> 00:01:03,680
with david

26
00:01:03,680 --> 00:01:06,240
in this example the routing path is the

27
00:01:06,240 --> 00:01:10,240
sequence of parties bob charlie david

28
00:01:10,240 --> 00:01:12,240
then she forms a layered encryption

29
00:01:12,240 --> 00:01:14,720
object called an onion

30
00:01:14,720 --> 00:01:16,880
and sends it to the first party on the

31
00:01:16,880 --> 00:01:20,320
routing path bob

32
00:01:20,720 --> 00:01:23,119
bob decrypts just the outermost layer of

33
00:01:23,119 --> 00:01:25,680
the onion or peels the outermost layer

34
00:01:25,680 --> 00:01:27,360
of the onion

35
00:01:27,360 --> 00:01:30,479
this reveals an inner onion also known

36
00:01:30,479 --> 00:01:32,880
as the processed onion in blue

37
00:01:32,880 --> 00:01:34,799
and the destination of the processed

38
00:01:34,799 --> 00:01:36,880
onion charlie

39
00:01:36,880 --> 00:01:39,119
charlie repeats this process

40
00:01:39,119 --> 00:01:40,720
he peels the outermost layer of the

41
00:01:40,720 --> 00:01:42,960
onion revealing the processed onion in

42
00:01:42,960 --> 00:01:45,280
pink and the next destination for the

43
00:01:45,280 --> 00:01:47,439
onion david

44
00:01:47,439 --> 00:01:49,840
when david peels the processed onion he

45
00:01:49,840 --> 00:01:54,119
obtains a message from alice

46
00:01:55,840 --> 00:01:58,159
now if alice sends her message via onion

47
00:01:58,159 --> 00:02:00,799
routing the network adversary may not

48
00:02:00,799 --> 00:02:03,920
know who her recipient is

49
00:02:03,920 --> 00:02:06,399
for example if charlie receives alice's

50
00:02:06,399 --> 00:02:08,959
onion to david in purple

51
00:02:08,959 --> 00:02:12,400
along with another onion in yellow

52
00:02:12,400 --> 00:02:14,319
then the adversary cannot determine

53
00:02:14,319 --> 00:02:16,480
which outgoing onion corresponds to

54
00:02:16,480 --> 00:02:19,760
which incoming onion

55
00:02:20,000 --> 00:02:21,760
is the green onion the result of

56
00:02:21,760 --> 00:02:24,080
processing the purple onion and the

57
00:02:24,080 --> 00:02:26,000
white onion from processing the yellow

58
00:02:26,000 --> 00:02:28,239
onion

59
00:02:28,239 --> 00:02:30,319
or is it the other way around

60
00:02:30,319 --> 00:02:32,319
in other words onions that are batch

61
00:02:32,319 --> 00:02:36,000
processed at an honest party mix

62
00:02:36,000 --> 00:02:38,400
an anonymity can be achieved so long as

63
00:02:38,400 --> 00:02:40,800
the onions sufficiently mix as they

64
00:02:40,800 --> 00:02:44,000
travel through the network

65
00:02:46,080 --> 00:02:48,400
however using public key encryption to

66
00:02:48,400 --> 00:02:51,120
form the onion encryption layers as

67
00:02:51,120 --> 00:02:52,959
charm envisioned it

68
00:02:52,959 --> 00:02:55,680
is not exactly what we want

69
00:02:55,680 --> 00:02:57,680
this is because the encryption of a

70
00:02:57,680 --> 00:03:00,800
message is necessarily strictly longer

71
00:03:00,800 --> 00:03:02,800
than the message

72
00:03:02,800 --> 00:03:04,879
what this means is that onions with

73
00:03:04,879 --> 00:03:07,840
different numbers of hops to go don't

74
00:03:07,840 --> 00:03:10,159
mix

75
00:03:10,720 --> 00:03:13,360
the adversary can trivially determine

76
00:03:13,360 --> 00:03:15,360
which outgoing onion corresponds to

77
00:03:15,360 --> 00:03:18,159
which incoming onion for the sizes of

78
00:03:18,159 --> 00:03:20,799
the onions

79
00:03:22,879 --> 00:03:25,120
cavemnish and listyanskaya formalized

80
00:03:25,120 --> 00:03:27,519
the notion of onion encryption but by

81
00:03:27,519 --> 00:03:30,319
defining an onion encryption scheme

82
00:03:30,319 --> 00:03:32,879
as a triple of algorithms

83
00:03:32,879 --> 00:03:36,480
a key generation algorithm g

84
00:03:36,480 --> 00:03:41,040
an onion farming algorithm form onion

85
00:03:41,040 --> 00:03:43,599
and an onion processing algorithm proc

86
00:03:43,599 --> 00:03:44,720
onion

87
00:03:44,720 --> 00:03:47,040
they also provided the first formal

88
00:03:47,040 --> 00:03:48,799
security definitions

89
00:03:48,799 --> 00:03:51,599
for onion encryption

90
00:03:51,599 --> 00:03:54,000
onions generated using a secure onion

91
00:03:54,000 --> 00:03:56,560
encryption scheme mixed properly

92
00:03:56,560 --> 00:03:58,720
regardless of how far they are for their

93
00:03:58,720 --> 00:04:01,720
destinations

94
00:04:04,640 --> 00:04:06,560
however the paper by kamenish and

95
00:04:06,560 --> 00:04:08,159
lisyanskaya

96
00:04:08,159 --> 00:04:10,319
and subsequent follow-up work did not

97
00:04:10,319 --> 00:04:12,560
tackle two-way channels

98
00:04:12,560 --> 00:04:15,040
when alice's recipient david received

99
00:04:15,040 --> 00:04:17,279
the message from alice there was no

100
00:04:17,279 --> 00:04:21,358
method for replying to her anonymously

101
00:04:21,358 --> 00:04:23,520
two-way communication is necessary for

102
00:04:23,520 --> 00:04:25,120
most internet

103
00:04:25,120 --> 00:04:27,759
applications for example for web

104
00:04:27,759 --> 00:04:29,759
browsing or for filling out a form

105
00:04:29,759 --> 00:04:31,360
online

106
00:04:31,360 --> 00:04:33,199
so to conduct these applications

107
00:04:33,199 --> 00:04:35,360
anonymously it is clear that we need

108
00:04:35,360 --> 00:04:38,479
anonymous two-way channels

109
00:04:38,479 --> 00:04:40,720
the challenge with constructing a cca

110
00:04:40,720 --> 00:04:44,000
secure repliable onion encryption scheme

111
00:04:44,000 --> 00:04:46,560
is that it is unclear how to do so when

112
00:04:46,560 --> 00:04:48,400
the returned onions cannot be

113
00:04:48,400 --> 00:04:51,440
constructed by any one party

114
00:04:51,440 --> 00:04:53,520
the return path must be supplied by the

115
00:04:53,520 --> 00:04:55,280
sender alice

116
00:04:55,280 --> 00:04:57,520
whereas a reply message must be supplied

117
00:04:57,520 --> 00:05:01,039
by the recipient david

118
00:05:02,320 --> 00:05:04,800
in this paper we formalize the notion of

119
00:05:04,800 --> 00:05:07,759
repliable onion encryption

120
00:05:07,759 --> 00:05:10,320
in this work an onion is a pair

121
00:05:10,320 --> 00:05:14,720
consisting of the header and the content

122
00:05:14,720 --> 00:05:16,720
a repliable onion encryption scheme

123
00:05:16,720 --> 00:05:19,280
consists of four algorithms

124
00:05:19,280 --> 00:05:22,560
the key generation algorithm g

125
00:05:22,560 --> 00:05:24,479
the onion uninforming algorithm form

126
00:05:24,479 --> 00:05:28,080
onion that takes as input the label

127
00:05:28,080 --> 00:05:29,360
the message

128
00:05:29,360 --> 00:05:31,280
the forward path from the sender to the

129
00:05:31,280 --> 00:05:32,560
recipient

130
00:05:32,560 --> 00:05:34,479
the return path from the recipient to

131
00:05:34,479 --> 00:05:36,000
the sender

132
00:05:36,000 --> 00:05:37,759
and the public keys of the parties on

133
00:05:37,759 --> 00:05:39,600
the routing path consisting of the

134
00:05:39,600 --> 00:05:42,560
forward the return pass

135
00:05:42,560 --> 00:05:44,800
and outputs a list of onions

136
00:05:44,800 --> 00:05:47,039
corresponding to the forward path

137
00:05:47,039 --> 00:05:49,039
and a list of headers corresponding to

138
00:05:49,039 --> 00:05:51,680
the return path

139
00:05:51,680 --> 00:05:54,639
the onion processing algorithm

140
00:05:54,639 --> 00:05:57,759
proc onion takes as input the onion to

141
00:05:57,759 --> 00:05:59,360
be processed

142
00:05:59,360 --> 00:06:02,240
processing party and a secret key

143
00:06:02,240 --> 00:06:04,840
and outputs a role in an

144
00:06:04,840 --> 00:06:07,680
output if the role is intermediary the

145
00:06:07,680 --> 00:06:10,080
output is a processed onion

146
00:06:10,080 --> 00:06:11,919
and next destination

147
00:06:11,919 --> 00:06:14,240
if the role is recipient the output is

148
00:06:14,240 --> 00:06:15,919
the message

149
00:06:15,919 --> 00:06:18,319
if the role is sender then the output is

150
00:06:18,319 --> 00:06:21,360
a label and a reply message

151
00:06:21,360 --> 00:06:23,840
so the purpose of having labels is that

152
00:06:23,840 --> 00:06:25,840
the sender can use them to determine

153
00:06:25,840 --> 00:06:28,319
which message the reply message is a

154
00:06:28,319 --> 00:06:31,120
response for

155
00:06:31,199 --> 00:06:33,199
finally there's a new type of algorithm

156
00:06:33,199 --> 00:06:34,639
for reply

157
00:06:34,639 --> 00:06:37,039
for forming a reply onion

158
00:06:37,039 --> 00:06:40,479
it takes as input the reply message

159
00:06:40,479 --> 00:06:43,440
the onion it is replying to

160
00:06:43,440 --> 00:06:46,560
the recipient and a secret key

161
00:06:46,560 --> 00:06:49,280
and is a return to onion

162
00:06:49,280 --> 00:06:51,120
and first destination for the return

163
00:06:51,120 --> 00:06:53,520
onion

164
00:06:53,680 --> 00:06:56,080
our contributions are as follows

165
00:06:56,080 --> 00:06:58,479
first we define the ideal functionality

166
00:06:58,479 --> 00:07:00,880
for repliable onion encryption and

167
00:07:00,880 --> 00:07:04,000
committees uc model or more precisely in

168
00:07:04,000 --> 00:07:06,800
kinetic cohen and lindle's simplified uc

169
00:07:06,800 --> 00:07:08,160
model

170
00:07:08,160 --> 00:07:11,039
we call this f rose for repliable onion

171
00:07:11,039 --> 00:07:13,680
encryption scheme

172
00:07:13,680 --> 00:07:16,240
next we present a game-based definition

173
00:07:16,240 --> 00:07:18,479
repliable onion security

174
00:07:18,479 --> 00:07:20,880
and prove that it is both sufficient and

175
00:07:20,880 --> 00:07:24,560
almost necessary for realizing f rows

176
00:07:24,560 --> 00:07:26,560
and finally we present the first

177
00:07:26,560 --> 00:07:28,639
provably secure repliable onion

178
00:07:28,639 --> 00:07:31,199
encryption scheme charlotte encryption

179
00:07:31,199 --> 00:07:33,520
scheme

180
00:07:38,479 --> 00:07:40,560
security and kennedy's universal

181
00:07:40,560 --> 00:07:43,280
composability model is described with

182
00:07:43,280 --> 00:07:46,160
respect to an ideal functionality

183
00:07:46,160 --> 00:07:49,120
the sukeem obscure the environment z

184
00:07:49,120 --> 00:07:51,199
cannot tell whether it is operating in

185
00:07:51,199 --> 00:07:54,000
the real world that uses a scheme

186
00:07:54,000 --> 00:07:55,919
or in the ideal world that uses the

187
00:07:55,919 --> 00:07:58,400
ideal functionality instead

188
00:07:58,400 --> 00:08:00,720
for onion encryption the environment can

189
00:08:00,720 --> 00:08:02,720
instruct the honest parties to form an

190
00:08:02,720 --> 00:08:05,520
onion to process an onion or to form a

191
00:08:05,520 --> 00:08:07,440
reply

192
00:08:07,440 --> 00:08:09,919
in the real world the honest parties run

193
00:08:09,919 --> 00:08:11,840
the appropriate algorithm from the onion

194
00:08:11,840 --> 00:08:13,919
encryption scheme

195
00:08:13,919 --> 00:08:15,919
in the ideal world the honest parties

196
00:08:15,919 --> 00:08:17,759
relay the instruction to the ideal

197
00:08:17,759 --> 00:08:19,919
functionality f rows

198
00:08:19,919 --> 00:08:21,919
it is a job of the ideal functionality

199
00:08:21,919 --> 00:08:24,319
to form onions process onions and form

200
00:08:24,319 --> 00:08:26,800
replies

201
00:08:26,800 --> 00:08:28,639
we chose to work specifically in the

202
00:08:28,639 --> 00:08:30,479
simplified uc model

203
00:08:30,479 --> 00:08:32,640
first because this choice simplifies the

204
00:08:32,640 --> 00:08:35,360
way we model communication

205
00:08:35,360 --> 00:08:38,080
in the suc model the environment may

206
00:08:38,080 --> 00:08:40,000
communicate with the honest parties by

207
00:08:40,000 --> 00:08:42,159
writing into their input tapes

208
00:08:42,159 --> 00:08:44,320
and reading their output tapes and the

209
00:08:44,320 --> 00:08:46,240
honest parties can communicate with the

210
00:08:46,240 --> 00:08:51,040
ideal functionality via a central router

211
00:08:51,040 --> 00:08:53,760
second realizability of f rows and the

212
00:08:53,760 --> 00:08:56,959
suc model implies reliability in the

213
00:08:56,959 --> 00:08:59,680
full uc model so we don't really lose

214
00:08:59,680 --> 00:09:02,160
any generality by working in the

215
00:09:02,160 --> 00:09:05,120
simplified model

216
00:09:06,959 --> 00:09:09,839
first let us provide an intuition for

217
00:09:09,839 --> 00:09:13,600
our ideal functionality f rose

218
00:09:13,600 --> 00:09:16,320
in order to ensure that the onions mix

219
00:09:16,320 --> 00:09:18,800
at honest intermediaries we want it to

220
00:09:18,800 --> 00:09:21,440
be impossible to match an incoming onion

221
00:09:21,440 --> 00:09:23,680
to its outgoing onion

222
00:09:23,680 --> 00:09:26,000
moreover it should be impossible to tell

223
00:09:26,000 --> 00:09:28,080
whether these onions are forward onions

224
00:09:28,080 --> 00:09:30,560
or return onions

225
00:09:30,560 --> 00:09:33,120
in the ideal world this is guaranteed by

226
00:09:33,120 --> 00:09:35,360
generating the incoming onions and

227
00:09:35,360 --> 00:09:37,839
outgoing onions in an information

228
00:09:37,839 --> 00:09:41,760
theoretically independent way

229
00:09:42,800 --> 00:09:45,120
to form an onion on behalf of honest

230
00:09:45,120 --> 00:09:48,240
party pi the ideal functionality first

231
00:09:48,240 --> 00:09:50,000
partitions the forward path into

232
00:09:50,000 --> 00:09:51,360
segments

233
00:09:51,360 --> 00:09:53,920
where each segment is a list that ends

234
00:09:53,920 --> 00:09:56,480
in the next honest party

235
00:09:56,480 --> 00:09:58,160
here following the notational

236
00:09:58,160 --> 00:10:00,160
conventions of the paper

237
00:10:00,160 --> 00:10:02,320
the honest parties are capitalized

238
00:10:02,320 --> 00:10:04,560
whereas the adversarial ones are in

239
00:10:04,560 --> 00:10:06,560
lower case

240
00:10:06,560 --> 00:10:09,519
so in this example the segments are the

241
00:10:09,519 --> 00:10:12,079
list consisting of p1

242
00:10:12,079 --> 00:10:16,480
the list consisting of p2 p3 and p4

243
00:10:16,480 --> 00:10:19,680
the list consisting of p5 and finally

244
00:10:19,680 --> 00:10:24,000
the list consisting of p6 and p7

245
00:10:24,000 --> 00:10:28,480
let oi denote the onion for party pi

246
00:10:28,480 --> 00:10:31,120
the onions 0102

247
00:10:31,120 --> 00:10:34,880
o5 and o6 are formed independently of

248
00:10:34,880 --> 00:10:35,839
each other

249
00:10:35,839 --> 00:10:37,600
for example

250
00:10:37,600 --> 00:10:40,160
o1 is formed without m or the rest of

251
00:10:40,160 --> 00:10:43,680
the routing path in its input

252
00:10:43,680 --> 00:10:46,079
the first onion o1 is returned to the

253
00:10:46,079 --> 00:10:48,959
sender pi

254
00:10:49,120 --> 00:10:52,720
let o4 be what p4 gets if o2 is

255
00:10:52,720 --> 00:10:55,200
processed correctly

256
00:10:55,200 --> 00:10:58,000
if the ideal functionality is asked by

257
00:10:58,000 --> 00:11:02,560
p4 to process o4 it returns o5

258
00:11:02,560 --> 00:11:05,839
likewise let o7 be what the recipient p7

259
00:11:05,839 --> 00:11:09,760
gets if o6 is processed correctly

260
00:11:09,760 --> 00:11:12,399
then o7 gets processed to m

261
00:11:12,399 --> 00:11:14,640
this is a message that was in the sender

262
00:11:14,640 --> 00:11:18,240
pi's input to form onion

263
00:11:18,240 --> 00:11:20,880
in order to respond to the onion o7 with

264
00:11:20,880 --> 00:11:23,680
a reply message m prime on behalf of the

265
00:11:23,680 --> 00:11:25,440
recipient p7

266
00:11:25,440 --> 00:11:27,680
the ideal functionality first retrieves

267
00:11:27,680 --> 00:11:30,160
the return path which it maintained

268
00:11:30,160 --> 00:11:33,920
internally and then forms onions using m

269
00:11:33,920 --> 00:11:36,079
prime and the return path

270
00:11:36,079 --> 00:11:38,320
this is done using the same approach

271
00:11:38,320 --> 00:11:40,240
that was used for forming the forward

272
00:11:40,240 --> 00:11:43,279
forward onions

273
00:11:43,279 --> 00:11:44,880
of course the full description of the

274
00:11:44,880 --> 00:11:46,560
ideal functionality is much more

275
00:11:46,560 --> 00:11:49,040
involved please refer to the paper for

276
00:11:49,040 --> 00:11:51,760
more details

277
00:11:54,880 --> 00:11:56,880
since it can be cumbersome to directly

278
00:11:56,880 --> 00:11:59,120
prove that an onion encryption scheme

279
00:11:59,120 --> 00:12:01,920
realizes afros we also present a

280
00:12:01,920 --> 00:12:03,839
game-based security definition that

281
00:12:03,839 --> 00:12:06,399
proves to be both sufficient and almost

282
00:12:06,399 --> 00:12:10,079
necessary for realizing f rows

283
00:12:10,079 --> 00:12:12,480
we now describe the salient points of

284
00:12:12,480 --> 00:12:14,720
the security game

285
00:12:14,720 --> 00:12:16,800
first the adversary picks two honest

286
00:12:16,800 --> 00:12:20,399
parties i and s

287
00:12:20,399 --> 00:12:23,200
next the adversary gets oracle access to

288
00:12:23,200 --> 00:12:25,920
processed onions and reply and reply to

289
00:12:25,920 --> 00:12:29,519
onions on behalf of ins

290
00:12:29,519 --> 00:12:31,760
then the adversary picks the parameters

291
00:12:31,760 --> 00:12:33,920
for the challenge onion which includes

292
00:12:33,920 --> 00:12:37,200
the forward path and the return path

293
00:12:37,200 --> 00:12:39,839
the honest party s must be the sender of

294
00:12:39,839 --> 00:12:42,079
the challenge onion and so the return

295
00:12:42,079 --> 00:12:44,639
path must end in s

296
00:12:44,639 --> 00:12:46,320
and the honest party eye must be

297
00:12:46,320 --> 00:12:48,399
somewhere else on the routing path

298
00:12:48,399 --> 00:12:50,720
either as an intermediary on the forward

299
00:12:50,720 --> 00:12:52,639
path the recipient

300
00:12:52,639 --> 00:12:56,720
or an intermediary on the return path

301
00:12:56,720 --> 00:12:59,440
the challenger samples random bit if the

302
00:12:59,440 --> 00:13:01,839
bid comes up zero then the challenger

303
00:13:01,839 --> 00:13:03,600
forms the onion o

304
00:13:03,600 --> 00:13:06,560
as specified by the adversary

305
00:13:06,560 --> 00:13:08,480
otherwise the challenger forms two

306
00:13:08,480 --> 00:13:11,200
onions for example if i is an

307
00:13:11,200 --> 00:13:13,360
intermediary on the forward path

308
00:13:13,360 --> 00:13:15,600
then the first onion is formed using the

309
00:13:15,600 --> 00:13:17,920
forward path up to eye

310
00:13:17,920 --> 00:13:20,000
and the second onion is formed using the

311
00:13:20,000 --> 00:13:22,880
rest of the running path

312
00:13:22,880 --> 00:13:25,440
the adversary again gets oracle access

313
00:13:25,440 --> 00:13:27,440
to processed onions and replied to

314
00:13:27,440 --> 00:13:30,000
onions on behalf of ins

315
00:13:30,000 --> 00:13:32,399
however this time the oracles are

316
00:13:32,399 --> 00:13:34,800
patched in the event that b is equal to

317
00:13:34,800 --> 00:13:35,760
one

318
00:13:35,760 --> 00:13:37,279
in this case

319
00:13:37,279 --> 00:13:39,519
the challenge onion layer for i

320
00:13:39,519 --> 00:13:42,639
processes to o prime rather than to a

321
00:13:42,639 --> 00:13:44,880
message

322
00:13:44,880 --> 00:13:47,199
finally the adversary outputs a guess b

323
00:13:47,199 --> 00:13:50,240
prime for b and wins if b prime is equal

324
00:13:50,240 --> 00:13:52,320
to b

325
00:13:52,320 --> 00:13:54,720
an onion encryption scheme is repliable

326
00:13:54,720 --> 00:13:56,959
onion secure if every efficient

327
00:13:56,959 --> 00:13:59,440
adversary wins this game only with

328
00:13:59,440 --> 00:14:03,160
negligible advantage

329
00:14:03,760 --> 00:14:06,959
in the paper we proved that if the onion

330
00:14:06,959 --> 00:14:09,040
encryption scheme sigma

331
00:14:09,040 --> 00:14:12,399
is repliable onion secure then it suc

332
00:14:12,399 --> 00:14:14,720
realizes the ideal functionality of

333
00:14:14,720 --> 00:14:17,360
ropes this shows that the game based

334
00:14:17,360 --> 00:14:19,600
definition is sufficient

335
00:14:19,600 --> 00:14:21,440
we also proved that

336
00:14:21,440 --> 00:14:25,040
if sigma succ realizes f rows

337
00:14:25,040 --> 00:14:27,279
then it is non-adaptively repliable

338
00:14:27,279 --> 00:14:28,959
onion secure

339
00:14:28,959 --> 00:14:30,320
this shows that the game based

340
00:14:30,320 --> 00:14:35,040
definition is almost necessary as well

341
00:14:39,519 --> 00:14:41,920
our construction is called charlotte

342
00:14:41,920 --> 00:14:43,519
encryption scheme

343
00:14:43,519 --> 00:14:45,839
because the onions it generates are

344
00:14:45,839 --> 00:14:48,560
pairs of layered encryption objects

345
00:14:48,560 --> 00:14:51,120
and so in that respect these onions are

346
00:14:51,120 --> 00:14:54,639
more akin to shallots than onions

347
00:14:54,639 --> 00:14:56,639
for the construction we make use of the

348
00:14:56,639 --> 00:14:59,360
following cryptographic primitives

349
00:14:59,360 --> 00:15:02,160
a cca2 secure encryption scheme with

350
00:15:02,160 --> 00:15:03,199
tags

351
00:15:03,199 --> 00:15:05,440
a message authentication code a

352
00:15:05,440 --> 00:15:07,519
pseudo-random permutation or block

353
00:15:07,519 --> 00:15:08,880
cipher

354
00:15:08,880 --> 00:15:12,560
and a collision resistant hash function

355
00:15:12,560 --> 00:15:15,519
each party generates his or her key pair

356
00:15:15,519 --> 00:15:17,519
by running the encryption scheme's key

357
00:15:17,519 --> 00:15:20,720
generation algorithm

358
00:15:21,920 --> 00:15:25,360
recall that each onion is a pair

359
00:15:25,360 --> 00:15:28,160
consisting of the header and the content

360
00:15:28,160 --> 00:15:30,480
we now describe the steps for processing

361
00:15:30,480 --> 00:15:32,480
an onion oi

362
00:15:32,480 --> 00:15:34,560
which consists of the header

363
00:15:34,560 --> 00:15:35,839
e i

364
00:15:35,839 --> 00:15:37,759
v i 1

365
00:15:37,759 --> 00:15:41,519
b i 2 and the content ci

366
00:15:41,519 --> 00:15:43,519
when the processing party is an

367
00:15:43,519 --> 00:15:46,320
intermediary

368
00:15:46,480 --> 00:15:49,040
first decrypt the first block of the

369
00:15:49,040 --> 00:15:52,240
header e i to get the role and the block

370
00:15:52,240 --> 00:15:55,279
cipher key ki

371
00:15:55,279 --> 00:15:58,000
then use ki to decrypt the other blocks

372
00:15:58,000 --> 00:15:59,279
of the header

373
00:15:59,279 --> 00:16:02,079
and the content

374
00:16:02,079 --> 00:16:04,560
finally to make the last block of the

375
00:16:04,560 --> 00:16:06,000
processed header

376
00:16:06,000 --> 00:16:07,199
decrypt

377
00:16:07,199 --> 00:16:10,319
the all zero string

378
00:16:14,959 --> 00:16:17,440
next we describe how to form an onion

379
00:16:17,440 --> 00:16:19,360
using an example

380
00:16:19,360 --> 00:16:22,399
let the forward path be the list p1 p2

381
00:16:22,399 --> 00:16:23,839
p3

382
00:16:23,839 --> 00:16:26,560
and let the return path be the list p4

383
00:16:26,560 --> 00:16:28,880
p5 p6

384
00:16:28,880 --> 00:16:32,079
first the sender alice who is also

385
00:16:32,079 --> 00:16:33,279
p6

386
00:16:33,279 --> 00:16:35,519
picks block cipher keys

387
00:16:35,519 --> 00:16:40,320
k1 through k6 and mac keys capital k 3

388
00:16:40,320 --> 00:16:43,360
and capital k6

389
00:16:43,360 --> 00:16:46,000
we will use curly brackets to denote

390
00:16:46,000 --> 00:16:47,199
encryption

391
00:16:47,199 --> 00:16:49,759
and reverse curly brackets to denote

392
00:16:49,759 --> 00:16:52,399
decryption

393
00:16:52,800 --> 00:16:55,040
to form the header

394
00:16:55,040 --> 00:16:57,680
to form the header h1 for the onion we

395
00:16:57,680 --> 00:17:00,959
first form the header for the recipient

396
00:17:00,959 --> 00:17:04,799
to obtain b31 we encrypt the aux0 string

397
00:17:04,799 --> 00:17:07,039
under the key k1

398
00:17:07,039 --> 00:17:09,039
and then encrypt the result

399
00:17:09,039 --> 00:17:11,839
under the key k2

400
00:17:11,839 --> 00:17:15,520
b32 is result of encrypting the all zero

401
00:17:15,520 --> 00:17:19,520
string under the key k2

402
00:17:19,520 --> 00:17:22,799
the block e3 is encryption of the role

403
00:17:22,799 --> 00:17:25,760
recipient along with the decryption keys

404
00:17:25,760 --> 00:17:28,640
for the recipient

405
00:17:28,640 --> 00:17:31,840
next we form the header h2 for the

406
00:17:31,840 --> 00:17:34,799
second intermediary p2

407
00:17:34,799 --> 00:17:38,640
the block b21 is encryption of p3

408
00:17:38,640 --> 00:17:41,120
the next destination after p2

409
00:17:41,120 --> 00:17:44,480
and e3 under the key k2

410
00:17:44,480 --> 00:17:47,280
and the block b22 is the encryption of

411
00:17:47,280 --> 00:17:51,840
b31 under the key k2

412
00:17:51,840 --> 00:17:54,480
the block e2 is the encryption of the

413
00:17:54,480 --> 00:18:00,559
roll intermediary along with p2's key k2

414
00:18:00,559 --> 00:18:03,440
we repeat this one last time to get the

415
00:18:03,440 --> 00:18:08,880
header h1 for the first intermediary p1

416
00:18:09,679 --> 00:18:12,720
to form the content c1 we first form the

417
00:18:12,720 --> 00:18:15,039
header for the return onion in similar

418
00:18:15,039 --> 00:18:17,440
fashion

419
00:18:18,880 --> 00:18:21,919
then the meta message for the recipient

420
00:18:21,919 --> 00:18:23,280
capital m

421
00:18:23,280 --> 00:18:26,080
consists of alice's message to david who

422
00:18:26,080 --> 00:18:30,480
is also p3 the keys for replying

423
00:18:30,480 --> 00:18:33,280
the first destination on the return path

424
00:18:33,280 --> 00:18:36,080
and the return header

425
00:18:36,080 --> 00:18:38,559
the meta message along with the mac tag

426
00:18:38,559 --> 00:18:40,840
for the message is

427
00:18:40,840 --> 00:18:44,720
encrypted first under the key k3 then

428
00:18:44,720 --> 00:18:49,360
the key k2 and finally the key k1

429
00:18:49,360 --> 00:18:52,559
the onion for the first intermediary

430
00:18:52,559 --> 00:18:57,840
is o1 which is h1 and c1

431
00:19:02,400 --> 00:19:06,400
to process the onion o3 as a recipient

432
00:19:06,400 --> 00:19:08,799
david who is also p3

433
00:19:08,799 --> 00:19:12,880
decrypts e3 to get the role recipient

434
00:19:12,880 --> 00:19:14,720
and the key k3

435
00:19:14,720 --> 00:19:17,280
then k3 is used to obtain the meta

436
00:19:17,280 --> 00:19:19,918
message m

437
00:19:20,000 --> 00:19:22,000
to reply to the

438
00:19:22,000 --> 00:19:24,880
message with the reply message m prime

439
00:19:24,880 --> 00:19:26,799
david computes the content for the

440
00:19:26,799 --> 00:19:29,840
return onion by encrypting m

441
00:19:29,840 --> 00:19:32,240
by encrypting m prime in the mac tag

442
00:19:32,240 --> 00:19:34,720
forked

443
00:19:37,520 --> 00:19:39,280
finally we show that challenge

444
00:19:39,280 --> 00:19:41,360
encryption scheme is repliable onion

445
00:19:41,360 --> 00:19:42,480
secure

446
00:19:42,480 --> 00:19:45,440
that is we show that experiment 0

447
00:19:45,440 --> 00:19:47,600
when b is equal to 0 in the security

448
00:19:47,600 --> 00:19:50,000
game is indistinguishable from

449
00:19:50,000 --> 00:19:53,280
experiment 1 when b is equal to 1. we do

450
00:19:53,280 --> 00:19:56,720
this via a sequence of hybrids

451
00:19:56,720 --> 00:19:59,840
the high level idea is the following

452
00:19:59,840 --> 00:20:02,320
and in hybrid 1 we form the onion for

453
00:20:02,320 --> 00:20:04,480
honest intermediary eye

454
00:20:04,480 --> 00:20:06,640
and then wrap that onion

455
00:20:06,640 --> 00:20:08,720
with layers of shallot encryption to get

456
00:20:08,720 --> 00:20:12,400
the onion for the first intermediary p1

457
00:20:12,400 --> 00:20:14,559
this produces an onion that is

458
00:20:14,559 --> 00:20:16,640
identically distributed to that in

459
00:20:16,640 --> 00:20:19,120
experiment 0.

460
00:20:19,120 --> 00:20:21,280
hybrid two is the same as hybrid one

461
00:20:21,280 --> 00:20:24,080
except that i's key kj

462
00:20:24,080 --> 00:20:26,799
is swapped out for the all zero key

463
00:20:26,799 --> 00:20:28,000
hybrids one and two are

464
00:20:28,000 --> 00:20:30,880
indistinguishable because of the cca to

465
00:20:30,880 --> 00:20:32,840
security of the encryption

466
00:20:32,840 --> 00:20:36,240
scheme hybrid 3 is the same as hyper 2

467
00:20:36,240 --> 00:20:38,960
except that the blocks in the onion oj

468
00:20:38,960 --> 00:20:42,320
are swapped out for truly random blocks

469
00:20:42,320 --> 00:20:44,880
hybrids 2 and 3 are indistinguishable

470
00:20:44,880 --> 00:20:46,720
because of the pseudorandomness of the

471
00:20:46,720 --> 00:20:49,760
pseudorandom permutation

472
00:20:49,760 --> 00:20:52,640
hybrid 4 is the same as hybrid 3 except

473
00:20:52,640 --> 00:20:55,440
that a second key kj prime is sampled

474
00:20:55,440 --> 00:20:57,679
independently of kj

475
00:20:57,679 --> 00:21:00,080
and the truly random blocks in oj are

476
00:21:00,080 --> 00:21:02,080
swapped out for pseudorandom ones

477
00:21:02,080 --> 00:21:04,960
generated under kj prime

478
00:21:04,960 --> 00:21:07,520
hybrids 3 and 4 are indistinguishable

479
00:21:07,520 --> 00:21:11,760
because of the pseudo-randomness of prps

480
00:21:11,760 --> 00:21:14,799
hybrid 5 is the same as hybrid 4 except

481
00:21:14,799 --> 00:21:17,200
that the all zero key is replaced with

482
00:21:17,200 --> 00:21:19,039
kj prime

483
00:21:19,039 --> 00:21:20,480
hybrids four and five are

484
00:21:20,480 --> 00:21:22,880
indistinguishable because of the cca2

485
00:21:22,880 --> 00:21:26,400
security of the encryption scheme

486
00:21:26,400 --> 00:21:29,200
finally hybrid five and experiment one

487
00:21:29,200 --> 00:21:30,960
are indistinguishable because their

488
00:21:30,960 --> 00:21:34,240
outputs are identically distributed

489
00:21:34,240 --> 00:21:36,240
the full proof with all the details can

490
00:21:36,240 --> 00:21:39,360
be found in the paper

491
00:21:42,799 --> 00:21:45,280
to summarize in this paper we formalized

492
00:21:45,280 --> 00:21:48,640
the notion of repliable onion encryption

493
00:21:48,640 --> 00:21:51,120
we defined security for repliable ionian

494
00:21:51,120 --> 00:21:54,000
encryption in the simplified uc model by

495
00:21:54,000 --> 00:21:56,480
providing a description of the ideal

496
00:21:56,480 --> 00:21:59,200
functionality f rows and presented a

497
00:21:59,200 --> 00:22:02,080
game-based definition that is sufficient

498
00:22:02,080 --> 00:22:04,320
and almost necessary for realizing

499
00:22:04,320 --> 00:22:06,159
f-rows

500
00:22:06,159 --> 00:22:08,320
finally we gave the first construction

501
00:22:08,320 --> 00:22:10,880
of a provably secure repliable onion

502
00:22:10,880 --> 00:22:12,799
encryption scheme

503
00:22:12,799 --> 00:22:14,799
this concludes the presentation of our

504
00:22:14,799 --> 00:22:19,240
paper thank you for your attention

