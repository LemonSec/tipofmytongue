1
00:00:01,040 --> 00:00:03,600
hi i'm benedict and in this video i'm

2
00:00:03,600 --> 00:00:06,240
going to give an overview on our paper

3
00:00:06,240 --> 00:00:08,240
grafting key trees efficient key

4
00:00:08,240 --> 00:00:10,400
management for overlapping groups

5
00:00:10,400 --> 00:00:13,920
this is joint work with joel ahat miguel

6
00:00:13,920 --> 00:00:17,559
carne guillermo

7
00:00:19,439 --> 00:00:21,520
i will start with a short introduction

8
00:00:21,520 --> 00:00:24,000
into key trees concretely actually one

9
00:00:24,000 --> 00:00:26,000
of their main applications

10
00:00:26,000 --> 00:00:29,039
continuous group key agreement

11
00:00:29,039 --> 00:00:30,800
so in the setting of continuous group

12
00:00:30,800 --> 00:00:33,920
key agreement a group of users wants to

13
00:00:33,920 --> 00:00:35,920
establish a shared key that then is

14
00:00:35,920 --> 00:00:37,840
supposed to secure the communication

15
00:00:37,840 --> 00:00:39,200
within the group

16
00:00:39,200 --> 00:00:41,040
and we assume this group to be long

17
00:00:41,040 --> 00:00:43,360
lived so users want to be able to

18
00:00:43,360 --> 00:00:46,000
regularly rotate the key material known

19
00:00:46,000 --> 00:00:47,120
to them

20
00:00:47,120 --> 00:00:49,600
on one hand this is to achieve forward

21
00:00:49,600 --> 00:00:52,000
secrecy but on the other hand users

22
00:00:52,000 --> 00:00:53,840
might get corrupted

23
00:00:53,840 --> 00:00:56,320
and their keys might leak

24
00:00:56,320 --> 00:00:58,480
so updating the those keys should

25
00:00:58,480 --> 00:01:00,559
re-establish security of the

26
00:01:00,559 --> 00:01:01,920
communication

27
00:01:01,920 --> 00:01:03,920
and of course one wants this operation

28
00:01:03,920 --> 00:01:06,000
to have a communication cost that is as

29
00:01:06,000 --> 00:01:09,360
small as possible

30
00:01:09,439 --> 00:01:11,760
now the structure which is at core of

31
00:01:11,760 --> 00:01:14,080
efficient cgka schemes

32
00:01:14,080 --> 00:01:15,360
are usually

33
00:01:15,360 --> 00:01:18,479
key trees so this is a directed tree

34
00:01:18,479 --> 00:01:20,560
where the group key corresponds to the

35
00:01:20,560 --> 00:01:22,880
root and the users correspond to the

36
00:01:22,880 --> 00:01:24,400
leaves of the tree

37
00:01:24,400 --> 00:01:26,560
and every node is associated with a key

38
00:01:26,560 --> 00:01:29,119
pair of an asymmetric encryption scheme

39
00:01:29,119 --> 00:01:31,360
so you can think of the group key just

40
00:01:31,360 --> 00:01:34,159
being the secret key at the root

41
00:01:34,159 --> 00:01:35,600
now the intuition behind this

42
00:01:35,600 --> 00:01:37,600
construction is

43
00:01:37,600 --> 00:01:40,079
that edges mean that the knowledge of

44
00:01:40,079 --> 00:01:42,640
the key of the node that the edge starts

45
00:01:42,640 --> 00:01:44,960
in implies knowledge of the key of the

46
00:01:44,960 --> 00:01:46,720
other node

47
00:01:46,720 --> 00:01:49,280
so we have the following key invariant

48
00:01:49,280 --> 00:01:51,920
every user knows exactly the secret keys

49
00:01:51,920 --> 00:01:54,479
of nodes that lie on the path from their

50
00:01:54,479 --> 00:01:56,640
leaf to the root

51
00:01:56,640 --> 00:01:57,759
and the nice thing about this

52
00:01:57,759 --> 00:01:59,280
construction is

53
00:01:59,280 --> 00:02:01,920
that we are able to very cheaply update

54
00:02:01,920 --> 00:02:03,680
keys

55
00:02:03,680 --> 00:02:05,439
so to see this

56
00:02:05,439 --> 00:02:07,119
let's assume that one user gets

57
00:02:07,119 --> 00:02:09,520
corrupted and their keys leak

58
00:02:09,520 --> 00:02:12,319
so to perform an update the user would

59
00:02:12,319 --> 00:02:13,520
now

60
00:02:13,520 --> 00:02:14,800
sample fresh

61
00:02:14,800 --> 00:02:17,760
keys for all the nodes on their path in

62
00:02:17,760 --> 00:02:22,160
a sequential way from leaf to root

63
00:02:22,160 --> 00:02:24,319
and of course this change now has to be

64
00:02:24,319 --> 00:02:26,000
communicated to the rest of the group

65
00:02:26,000 --> 00:02:27,520
and to do so

66
00:02:27,520 --> 00:02:29,200
the user would encrypt

67
00:02:29,200 --> 00:02:31,360
a every new key

68
00:02:31,360 --> 00:02:33,680
under the public key of its co-parent

69
00:02:33,680 --> 00:02:36,400
that is the parent that is not part of

70
00:02:36,400 --> 00:02:38,480
the update path

71
00:02:38,480 --> 00:02:41,760
and every user below such a note is now

72
00:02:41,760 --> 00:02:43,440
able to recover this new key by

73
00:02:43,440 --> 00:02:46,400
decrypting and then in turn is able to

74
00:02:46,400 --> 00:02:48,959
recover the remaining secret keys up to

75
00:02:48,959 --> 00:02:50,560
the root

76
00:02:50,560 --> 00:02:53,200
now the update cost of this operation

77
00:02:53,200 --> 00:02:54,879
just corresponds to the number of

78
00:02:54,879 --> 00:02:57,760
ciphertexts that have to be generated

79
00:02:57,760 --> 00:03:00,239
so it corresponds to the length of the

80
00:03:00,239 --> 00:03:02,959
update path

81
00:03:03,360 --> 00:03:05,120
and if we use a balanced binary tree

82
00:03:05,120 --> 00:03:06,480
then this cost is going to be

83
00:03:06,480 --> 00:03:09,120
logarithmic in the number of users

84
00:03:09,120 --> 00:03:09,920
and

85
00:03:09,920 --> 00:03:14,480
we re-establish security of the key tree

86
00:03:16,800 --> 00:03:19,599
key trees are used for example as i as i

87
00:03:19,599 --> 00:03:22,080
said in the construction of cgka for

88
00:03:22,080 --> 00:03:23,120
example

89
00:03:23,120 --> 00:03:25,200
in the current standardization effort

90
00:03:25,200 --> 00:03:27,680
for message layer security but they are

91
00:03:27,680 --> 00:03:29,680
also used to construct multicast

92
00:03:29,680 --> 00:03:31,680
encryption schemes so in this setting we

93
00:03:31,680 --> 00:03:34,560
have a central authority

94
00:03:34,560 --> 00:03:36,480
that would know all of the secret keys

95
00:03:36,480 --> 00:03:38,319
and perform the updates

96
00:03:38,319 --> 00:03:40,239
so in this setting it's sufficient to

97
00:03:40,239 --> 00:03:42,400
rely on symmetric encryption instead of

98
00:03:42,400 --> 00:03:44,959
asymmetric encryption and here updates

99
00:03:44,959 --> 00:03:47,120
would not so much be about recovering

100
00:03:47,120 --> 00:03:49,920
from corruption but rather about adding

101
00:03:49,920 --> 00:03:53,360
or removing users from the groove

102
00:03:53,360 --> 00:03:55,280
now as we have seen

103
00:03:55,280 --> 00:03:57,519
the update cost of key trees is going to

104
00:03:57,519 --> 00:03:59,760
be logarithmic in the number of users

105
00:03:59,760 --> 00:04:01,280
and this actually turns out to be

106
00:04:01,280 --> 00:04:03,200
optimal with respect to the average

107
00:04:03,200 --> 00:04:04,480
update cost

108
00:04:04,480 --> 00:04:05,760
meaning that

109
00:04:05,760 --> 00:04:08,640
if we have a key tree then the average

110
00:04:08,640 --> 00:04:11,120
update cost for a user must be at least

111
00:04:11,120 --> 00:04:13,040
log n

112
00:04:13,040 --> 00:04:14,879
now the question we are interested in in

113
00:04:14,879 --> 00:04:16,320
our work

114
00:04:16,320 --> 00:04:18,720
is what is the situation if we have

115
00:04:18,720 --> 00:04:21,199
multiple potentially overlapping groups

116
00:04:21,199 --> 00:04:25,680
can we find more efficient solutions

117
00:04:26,000 --> 00:04:28,720
and to address this question we define

118
00:04:28,720 --> 00:04:31,600
key graphs for multiple groups and i'm

119
00:04:31,600 --> 00:04:33,919
now going to tell you what those look

120
00:04:33,919 --> 00:04:35,600
like

121
00:04:35,600 --> 00:04:38,960
now the setting we are interested in

122
00:04:38,960 --> 00:04:42,320
here we have a universe of n users and a

123
00:04:42,320 --> 00:04:45,440
system of k groups each containing some

124
00:04:45,440 --> 00:04:47,440
of those users so in the picture the

125
00:04:47,440 --> 00:04:49,919
dots in the venn diagram

126
00:04:49,919 --> 00:04:51,199
correspond

127
00:04:51,199 --> 00:04:53,919
to the individual users

128
00:04:53,919 --> 00:04:55,759
and now we can define a key graph for

129
00:04:55,759 --> 00:04:57,440
the system as follows

130
00:04:57,440 --> 00:05:00,639
so a key graph is going to be a directed

131
00:05:00,639 --> 00:05:02,240
acyclic graph

132
00:05:02,240 --> 00:05:04,560
where we require that we have one sink

133
00:05:04,560 --> 00:05:05,759
per group

134
00:05:05,759 --> 00:05:07,520
and the sink is going to serve as the

135
00:05:07,520 --> 00:05:10,639
key of the respective group on the other

136
00:05:10,639 --> 00:05:13,039
hand for every user

137
00:05:13,039 --> 00:05:17,120
we want to have one source

138
00:05:17,919 --> 00:05:19,520
and now of course we have to specify

139
00:05:19,520 --> 00:05:21,440
properties that ensure

140
00:05:21,440 --> 00:05:23,120
correctness and security of our

141
00:05:23,120 --> 00:05:24,639
construction

142
00:05:24,639 --> 00:05:26,720
and what we want is that users have

143
00:05:26,720 --> 00:05:29,759
exactly access to the keys of groups

144
00:05:29,759 --> 00:05:32,000
that they are members of

145
00:05:32,000 --> 00:05:35,120
so quite naturally we require that there

146
00:05:35,120 --> 00:05:37,360
is a path from a user source to one of

147
00:05:37,360 --> 00:05:40,080
the things exactly if the user is in the

148
00:05:40,080 --> 00:05:42,400
corresponding group so in the picture we

149
00:05:42,400 --> 00:05:43,840
depicted this for

150
00:05:43,840 --> 00:05:46,160
a user which is a member of groups two

151
00:05:46,160 --> 00:05:47,680
and three

152
00:05:47,680 --> 00:05:49,280
and we now have the following key

153
00:05:49,280 --> 00:05:50,800
invariant

154
00:05:50,800 --> 00:05:53,120
graph invariant

155
00:05:53,120 --> 00:05:56,160
the users know exactly the keys of nodes

156
00:05:56,160 --> 00:05:59,199
that they can reach from the leaf

157
00:05:59,199 --> 00:06:02,960
so let's have a look at the update cost

158
00:06:02,960 --> 00:06:05,199
similar to the one group case users

159
00:06:05,199 --> 00:06:08,240
would rotate all keys that they know

160
00:06:08,240 --> 00:06:10,560
so all keys corresponding to nodes that

161
00:06:10,560 --> 00:06:11,840
they can reach

162
00:06:11,840 --> 00:06:13,440
and of course they have to communicate

163
00:06:13,440 --> 00:06:16,080
these changes and to do so they would

164
00:06:16,080 --> 00:06:17,440
encrypt

165
00:06:17,440 --> 00:06:20,160
the new key of a node to all of its

166
00:06:20,160 --> 00:06:22,560
co-parents

167
00:06:22,560 --> 00:06:24,080
now in the definition we actually do not

168
00:06:24,080 --> 00:06:26,319
have to require that the graph is binary

169
00:06:26,319 --> 00:06:28,560
that is that every non-source has in

170
00:06:28,560 --> 00:06:31,360
degree 2 as depicted in the picture here

171
00:06:31,360 --> 00:06:33,280
but actually this property turns out to

172
00:06:33,280 --> 00:06:36,479
hold without loss of generality

173
00:06:36,479 --> 00:06:39,120
in the sense that given an arbitrary key

174
00:06:39,120 --> 00:06:41,919
graph for

175
00:06:42,080 --> 00:06:43,919
we can transform it into one that

176
00:06:43,919 --> 00:06:45,840
actually has this property in a way that

177
00:06:45,840 --> 00:06:49,360
can only decrease the update cost

178
00:06:49,360 --> 00:06:51,520
so we can assume that every node has

179
00:06:51,520 --> 00:06:54,080
exactly one co-parent

180
00:06:54,080 --> 00:06:56,240
and thus the update cost of user is

181
00:06:56,240 --> 00:06:57,840
going to correspond to the number of

182
00:06:57,840 --> 00:07:00,880
nodes in the graph that they can reach

183
00:07:00,880 --> 00:07:03,120
and now what we're interested in is

184
00:07:03,120 --> 00:07:05,919
finding key tria key graphs which have a

185
00:07:05,919 --> 00:07:08,800
minimal total update cost and this is

186
00:07:08,800 --> 00:07:10,720
just going to be defined as the sum of

187
00:07:10,720 --> 00:07:13,680
the update cost of all users

188
00:07:13,680 --> 00:07:15,360
and note that this is directly

189
00:07:15,360 --> 00:07:18,880
proportional to the average update cost

190
00:07:18,880 --> 00:07:21,199
but it turned out to make for a bit

191
00:07:21,199 --> 00:07:22,240
nicer

192
00:07:22,240 --> 00:07:25,120
presentation so we stuck to this measure

193
00:07:25,120 --> 00:07:27,440
of update cost

194
00:07:27,440 --> 00:07:29,039
okay let's have a look at the first

195
00:07:29,039 --> 00:07:31,280
example and this first example is

196
00:07:31,280 --> 00:07:32,880
actually just going to be the trivial

197
00:07:32,880 --> 00:07:35,599
way to construct a key graph

198
00:07:35,599 --> 00:07:37,360
and what we are going to do is we are

199
00:07:37,360 --> 00:07:39,599
simply using the solution for one group

200
00:07:39,599 --> 00:07:41,680
in parallel that is we built one

201
00:07:41,680 --> 00:07:44,400
balanced binary tree per group

202
00:07:44,400 --> 00:07:46,639
and now we can consider the update cost

203
00:07:46,639 --> 00:07:49,440
of this operation

204
00:07:49,440 --> 00:07:50,720
so in

205
00:07:50,720 --> 00:07:52,240
this trivial solution

206
00:07:52,240 --> 00:07:54,879
all users of one group

207
00:07:54,879 --> 00:07:57,440
of one fixed group have an update cost

208
00:07:57,440 --> 00:07:59,599
that is the logarithm of the group size

209
00:07:59,599 --> 00:08:01,840
so if we sum of all of the users in this

210
00:08:01,840 --> 00:08:04,720
group this is going to give us a term

211
00:08:04,720 --> 00:08:07,280
group size times the log of the group

212
00:08:07,280 --> 00:08:09,199
size and finally if we sum over all of

213
00:08:09,199 --> 00:08:10,960
the groups we end up with the total

214
00:08:10,960 --> 00:08:14,080
update cost of the trivial solution

215
00:08:14,080 --> 00:08:15,840
and this is simply

216
00:08:15,840 --> 00:08:18,960
the sum of the group sizes times the log

217
00:08:18,960 --> 00:08:20,960
and the main question is can we do

218
00:08:20,960 --> 00:08:24,000
better than this

219
00:08:24,560 --> 00:08:26,879
so i will now give a brief overview on

220
00:08:26,879 --> 00:08:28,720
our contributions

221
00:08:28,720 --> 00:08:30,479
so we consider this question in two

222
00:08:30,479 --> 00:08:32,640
different settings so first to get a

223
00:08:32,640 --> 00:08:35,440
feeling on the question we start with an

224
00:08:35,440 --> 00:08:36,958
asymptotic setting

225
00:08:36,958 --> 00:08:39,120
here we are going to consider a fixed

226
00:08:39,120 --> 00:08:41,120
group system but then let the number of

227
00:08:41,120 --> 00:08:43,519
users grow in a way that leaves the

228
00:08:43,519 --> 00:08:45,600
relative size of the groups as well as

229
00:08:45,600 --> 00:08:47,760
the relative size of their intersections

230
00:08:47,760 --> 00:08:48,959
constant

231
00:08:48,959 --> 00:08:51,200
and we can show that yes we can indeed

232
00:08:51,200 --> 00:08:53,360
do better than the trivial solution

233
00:08:53,360 --> 00:08:55,519
and we do this by computing lower bounds

234
00:08:55,519 --> 00:08:57,200
on the update cost and then give a

235
00:08:57,200 --> 00:08:59,600
matching solution

236
00:08:59,600 --> 00:09:02,080
however this comes with a caveat that

237
00:09:02,080 --> 00:09:04,080
these asymptotics actually can kick in

238
00:09:04,080 --> 00:09:05,839
quite slowly and the solution actually

239
00:09:05,839 --> 00:09:07,920
performs quite bad for some concrete

240
00:09:07,920 --> 00:09:09,040
systems

241
00:09:09,040 --> 00:09:10,800
so we also considered

242
00:09:10,800 --> 00:09:14,000
the question of finding good key graphs

243
00:09:14,000 --> 00:09:16,399
for a concrete group through systems and

244
00:09:16,399 --> 00:09:18,880
here we propose an algorithm to find key

245
00:09:18,880 --> 00:09:20,560
graphs that seems better suited for

246
00:09:20,560 --> 00:09:22,800
concrete systems and we then prove

247
00:09:22,800 --> 00:09:24,959
bounce on its update costs that make it

248
00:09:24,959 --> 00:09:28,480
quite easy to compare it to solutions

249
00:09:28,480 --> 00:09:31,680
we found in the asymptotics setting

250
00:09:31,680 --> 00:09:33,519
and as a second contribution we also

251
00:09:33,519 --> 00:09:35,519
provide lower bounds on the update cost

252
00:09:35,519 --> 00:09:37,519
of continuous group key agreement and

253
00:09:37,519 --> 00:09:41,120
multicast encryption in a symbolic model

254
00:09:41,120 --> 00:09:43,200
and i will now discuss our results in

255
00:09:43,200 --> 00:09:45,839
more detail starting with the asymptotic

256
00:09:45,839 --> 00:09:48,839
setting

257
00:09:50,959 --> 00:09:53,120
so in the asymptotic setting we start

258
00:09:53,120 --> 00:09:56,000
with a fixed base system of k groups

259
00:09:56,000 --> 00:09:57,839
all of which are subgroups of some

260
00:09:57,839 --> 00:09:59,200
universe of

261
00:09:59,200 --> 00:10:01,760
lowercase and users

262
00:10:01,760 --> 00:10:04,160
and now we're going to build a sequence

263
00:10:04,160 --> 00:10:06,959
of group systems for a larger number of

264
00:10:06,959 --> 00:10:09,040
users and we're going to do this

265
00:10:09,040 --> 00:10:10,399
by simply

266
00:10:10,399 --> 00:10:13,920
replacing every user

267
00:10:13,920 --> 00:10:14,720
with

268
00:10:14,720 --> 00:10:17,040
several copies

269
00:10:17,040 --> 00:10:20,160
so concretely if we want to build a

270
00:10:20,160 --> 00:10:22,480
group with let's say capital n users

271
00:10:22,480 --> 00:10:23,920
we're going to replace the user with

272
00:10:23,920 --> 00:10:27,279
capital n over small n copies so this

273
00:10:27,279 --> 00:10:31,320
would look something like this

274
00:10:33,920 --> 00:10:35,760
and for simplicity here we assume that

275
00:10:35,760 --> 00:10:38,000
small n divides capital n

276
00:10:38,000 --> 00:10:40,240
so there's two things i want to point

277
00:10:40,240 --> 00:10:41,279
out

278
00:10:41,279 --> 00:10:42,959
first

279
00:10:42,959 --> 00:10:45,360
the number of groups is constant

280
00:10:45,360 --> 00:10:47,360
but also the relative size of the groups

281
00:10:47,360 --> 00:10:48,640
and also the relative size of their

282
00:10:48,640 --> 00:10:51,360
intersection stays constant

283
00:10:51,360 --> 00:10:54,160
now we want to construct key graphs that

284
00:10:54,160 --> 00:10:56,320
have an optimal update cost when the

285
00:10:56,320 --> 00:11:00,800
number of users tends to infinity

286
00:11:00,800 --> 00:11:02,399
so first let's have a look at the

287
00:11:02,399 --> 00:11:04,399
trivial solution

288
00:11:04,399 --> 00:11:06,399
for that recall that it simply builds

289
00:11:06,399 --> 00:11:08,160
one balanced binary tree for every

290
00:11:08,160 --> 00:11:09,440
single group

291
00:11:09,440 --> 00:11:11,279
so let's consider one of those groups

292
00:11:11,279 --> 00:11:14,880
say group s i

293
00:11:14,880 --> 00:11:17,360
and note that the fraction of users that

294
00:11:17,360 --> 00:11:18,640
are members of this group is actually

295
00:11:18,640 --> 00:11:20,480
independent of m and we're going to

296
00:11:20,480 --> 00:11:23,600
define denote this fraction by

297
00:11:23,600 --> 00:11:25,920
s i

298
00:11:25,920 --> 00:11:29,600
so now we can consider the update cost

299
00:11:29,600 --> 00:11:31,440
that the tree corresponding to this

300
00:11:31,440 --> 00:11:32,320
group

301
00:11:32,320 --> 00:11:35,519
contributes to the total update cost

302
00:11:35,519 --> 00:11:38,320
and this actually is just as discussed

303
00:11:38,320 --> 00:11:39,279
before

304
00:11:39,279 --> 00:11:41,600
the group size times the log of the

305
00:11:41,600 --> 00:11:43,519
groove size

306
00:11:43,519 --> 00:11:44,560
but

307
00:11:44,560 --> 00:11:47,680
we can now rewrite this as n times small

308
00:11:47,680 --> 00:11:51,360
s i times logarithm of n times small s i

309
00:11:51,360 --> 00:11:53,920
then finally we can pull the logarithm

310
00:11:53,920 --> 00:11:54,959
apart

311
00:11:54,959 --> 00:11:57,839
like this

312
00:11:59,200 --> 00:12:01,920
so now if we sum over all

313
00:12:01,920 --> 00:12:02,959
the groups

314
00:12:02,959 --> 00:12:05,040
we actually get

315
00:12:05,040 --> 00:12:08,160
a total update cost of n times log n

316
00:12:08,160 --> 00:12:10,560
times the sum over all the

317
00:12:10,560 --> 00:12:12,880
relative group sizes as i

318
00:12:12,880 --> 00:12:15,760
plus a term which is of order n

319
00:12:15,760 --> 00:12:17,600
so this second term

320
00:12:17,600 --> 00:12:19,279
stems from

321
00:12:19,279 --> 00:12:22,800
summing up the terms n times s i times

322
00:12:22,800 --> 00:12:26,160
log s i so it's dependent uh really

323
00:12:26,160 --> 00:12:28,639
dependent on the on the group system and

324
00:12:28,639 --> 00:12:30,880
it particularly depends on k

325
00:12:30,880 --> 00:12:32,480
but as we're only interested in the

326
00:12:32,480 --> 00:12:34,959
asymptotics with respect to n it's going

327
00:12:34,959 --> 00:12:37,279
to be yeah this

328
00:12:37,279 --> 00:12:40,160
linear in n

329
00:12:41,680 --> 00:12:43,839
okay now we can make the observation

330
00:12:43,839 --> 00:12:45,680
that actually if we sum over all of

331
00:12:45,680 --> 00:12:48,800
those relative group sizes what we get

332
00:12:48,800 --> 00:12:49,920
is just

333
00:12:49,920 --> 00:12:52,320
the average number of groups that users

334
00:12:52,320 --> 00:12:54,959
are members of so we end up with our

335
00:12:54,959 --> 00:12:57,439
final

336
00:12:57,760 --> 00:12:59,120
update cost

337
00:12:59,120 --> 00:13:02,639
of t times n times log n plus a term

338
00:13:02,639 --> 00:13:06,440
that is of order n

339
00:13:06,959 --> 00:13:08,880
now to see whether this is optimal we

340
00:13:08,880 --> 00:13:10,880
are going to derive a lower bound on the

341
00:13:10,880 --> 00:13:12,240
update cost

342
00:13:12,240 --> 00:13:14,079
of group systems in the asymptotic

343
00:13:14,079 --> 00:13:15,200
setting

344
00:13:15,200 --> 00:13:17,120
and to this end we are going to

345
00:13:17,120 --> 00:13:20,079
partition the universe of users into the

346
00:13:20,079 --> 00:13:22,240
sets of users that are members of

347
00:13:22,240 --> 00:13:24,560
exactly the same groups

348
00:13:24,560 --> 00:13:27,279
and this is depicted now in the venn

349
00:13:27,279 --> 00:13:28,720
diagram

350
00:13:28,720 --> 00:13:30,720
okay you can see that

351
00:13:30,720 --> 00:13:32,800
each set in this partition is specified

352
00:13:32,800 --> 00:13:35,120
by some index set j which is just going

353
00:13:35,120 --> 00:13:37,440
to be a subset of the numbers from 1 to

354
00:13:37,440 --> 00:13:38,480
k

355
00:13:38,480 --> 00:13:40,399
and the set indicates

356
00:13:40,399 --> 00:13:43,120
exactly the set of groups that the users

357
00:13:43,120 --> 00:13:45,199
are members of

358
00:13:45,199 --> 00:13:47,279
and similar to before we can denote the

359
00:13:47,279 --> 00:13:49,519
fraction of users who lie in each of

360
00:13:49,519 --> 00:13:52,720
those sets in the partition by lowercase

361
00:13:52,720 --> 00:13:54,160
pj

362
00:13:54,160 --> 00:13:57,839
and again this value pj is independent

363
00:13:57,839 --> 00:14:00,240
of the overall number of users n

364
00:14:00,240 --> 00:14:02,320
by construction of this asymptotic

365
00:14:02,320 --> 00:14:04,000
setting

366
00:14:04,000 --> 00:14:06,240
so now let's have a look at a key graph

367
00:14:06,240 --> 00:14:08,160
for our group system

368
00:14:08,160 --> 00:14:09,600
we can observe

369
00:14:09,600 --> 00:14:11,519
that the leaves of of one of those

370
00:14:11,519 --> 00:14:13,760
partitioning sets always have at least

371
00:14:13,760 --> 00:14:16,000
one common sink so in the picture i've

372
00:14:16,000 --> 00:14:18,079
shown this for the users who are exactly

373
00:14:18,079 --> 00:14:20,320
members of the groups one and two

374
00:14:20,320 --> 00:14:23,519
and thus have paths to the sinks for

375
00:14:23,519 --> 00:14:27,040
group one and group two

376
00:14:27,839 --> 00:14:30,000
but this means that we actually can find

377
00:14:30,000 --> 00:14:31,920
a key tree

378
00:14:31,920 --> 00:14:34,639
for those users as a sub graph of our

379
00:14:34,639 --> 00:14:35,760
key graph

380
00:14:35,760 --> 00:14:38,320
and we already know that the update cost

381
00:14:38,320 --> 00:14:41,199
of size of this partitioning set times

382
00:14:41,199 --> 00:14:43,199
the logarithm of its size is going to be

383
00:14:43,199 --> 00:14:45,360
optimal for such a key tree and we can

384
00:14:45,360 --> 00:14:47,199
now conclude that the cost of this key

385
00:14:47,199 --> 00:14:51,120
tree must be at least as large

386
00:14:51,120 --> 00:14:53,680
and similarly to before we can now

387
00:14:53,680 --> 00:14:56,320
replace

388
00:14:56,320 --> 00:14:59,440
the size of the set by lowercase pj

389
00:14:59,440 --> 00:15:02,720
times n times the log of this value

390
00:15:02,720 --> 00:15:04,480
plus

391
00:15:04,480 --> 00:15:08,399
some value which is of order n

392
00:15:09,199 --> 00:15:10,240
okay

393
00:15:10,240 --> 00:15:12,800
and now we can simply sum over all of

394
00:15:12,800 --> 00:15:15,120
the sets and since those sets form a

395
00:15:15,120 --> 00:15:17,199
partition actually their relative sizes

396
00:15:17,199 --> 00:15:18,959
must sum up to one

397
00:15:18,959 --> 00:15:21,279
and we end up with an update cost of at

398
00:15:21,279 --> 00:15:23,440
least n times log n

399
00:15:23,440 --> 00:15:27,839
plus a term which is of order n

400
00:15:28,639 --> 00:15:30,480
and the nice thing about this bound is

401
00:15:30,480 --> 00:15:32,320
that it actually already gives us a good

402
00:15:32,320 --> 00:15:34,880
hint on how to construct a matching key

403
00:15:34,880 --> 00:15:37,759
graph so again we're going to partition

404
00:15:37,759 --> 00:15:41,199
our universe of users as before and then

405
00:15:41,199 --> 00:15:43,759
we simply build one balanced binary tree

406
00:15:43,759 --> 00:15:46,959
for every set in this partition

407
00:15:46,959 --> 00:15:49,279
now to achieve correctness we have to

408
00:15:49,279 --> 00:15:51,360
add a layer on top that combines the

409
00:15:51,360 --> 00:15:54,160
roots of those trees to get the required

410
00:15:54,160 --> 00:15:56,800
group keys so in the picture

411
00:15:56,800 --> 00:15:58,720
for group one we would have to combine

412
00:15:58,720 --> 00:16:01,040
the users who are members of exactly

413
00:16:01,040 --> 00:16:03,040
group one with the ones who are exactly

414
00:16:03,040 --> 00:16:05,199
in groups one and two and the ones who

415
00:16:05,199 --> 00:16:08,639
are in groups one two and three

416
00:16:08,639 --> 00:16:10,880
and then we would do the same for the

417
00:16:10,880 --> 00:16:12,800
remaining groups

418
00:16:12,800 --> 00:16:16,480
now we can analyze the cost of this

419
00:16:16,480 --> 00:16:19,680
so as discussed the

420
00:16:19,920 --> 00:16:23,040
in the lower bound the cost of this

421
00:16:23,040 --> 00:16:25,759
bottom layer is going to be n times log

422
00:16:25,759 --> 00:16:29,199
n plus some term of order n

423
00:16:29,199 --> 00:16:31,360
so now let's consider the the upper the

424
00:16:31,360 --> 00:16:33,600
second layer

425
00:16:33,600 --> 00:16:35,839
and we can see that since we only have a

426
00:16:35,839 --> 00:16:38,639
finite number of groups for every user

427
00:16:38,639 --> 00:16:40,800
the second layer is going to only going

428
00:16:40,800 --> 00:16:44,160
to add a constant

429
00:16:45,920 --> 00:16:48,240
communication cost

430
00:16:48,240 --> 00:16:49,920
but this means that the overall cost

431
00:16:49,920 --> 00:16:51,839
added by the second layer must be linear

432
00:16:51,839 --> 00:16:53,440
in the number of users and we can

433
00:16:53,440 --> 00:16:55,600
actually conclude that the cost

434
00:16:55,600 --> 00:16:59,839
asymptotically matches our lower bound

435
00:16:59,839 --> 00:17:02,880
so to summarize our findings about the

436
00:17:02,880 --> 00:17:05,839
asymptotic setting

437
00:17:06,880 --> 00:17:09,199
and in the asymptotic setting we can see

438
00:17:09,199 --> 00:17:11,599
that an optimal solution has an update

439
00:17:11,599 --> 00:17:14,000
cost of n times log n which

440
00:17:14,000 --> 00:17:16,240
interestingly is independent of the

441
00:17:16,240 --> 00:17:18,160
particular set system we are interested

442
00:17:18,160 --> 00:17:19,839
in and only depends on the number of

443
00:17:19,839 --> 00:17:21,520
users

444
00:17:21,520 --> 00:17:23,280
and we can also see that we can save a

445
00:17:23,280 --> 00:17:25,039
factor corresponding to the average

446
00:17:25,039 --> 00:17:26,880
number of groups that users are members

447
00:17:26,880 --> 00:17:30,480
of compared to the trivial solution

448
00:17:30,480 --> 00:17:32,640
however all of this comes with

449
00:17:32,640 --> 00:17:34,400
some carryouts

450
00:17:34,400 --> 00:17:37,280
so first note that we really relied on

451
00:17:37,280 --> 00:17:39,600
the number of groups staying fixed while

452
00:17:39,600 --> 00:17:42,320
the number of users grows

453
00:17:42,320 --> 00:17:45,200
which is not very realistic in practice

454
00:17:45,200 --> 00:17:47,200
and in particular the asymptotic notion

455
00:17:47,200 --> 00:17:49,200
heights constant that depend on the

456
00:17:49,200 --> 00:17:50,799
number of groups k

457
00:17:50,799 --> 00:17:52,640
and for general group system this this

458
00:17:52,640 --> 00:17:53,840
number of groups could actually be

459
00:17:53,840 --> 00:17:55,919
exponential in the number of users for

460
00:17:55,919 --> 00:17:58,080
example this would be the case if we

461
00:17:58,080 --> 00:18:00,880
consider the system which contains every

462
00:18:00,880 --> 00:18:03,760
possible subgroup

463
00:18:03,760 --> 00:18:04,720
so

464
00:18:04,720 --> 00:18:06,799
this asymptotic effects can actually

465
00:18:06,799 --> 00:18:08,799
kick in quite slowly

466
00:18:08,799 --> 00:18:10,720
and this also made us

467
00:18:10,720 --> 00:18:12,799
look at the situation for concrete group

468
00:18:12,799 --> 00:18:15,600
systems and i'm going to

469
00:18:15,600 --> 00:18:18,320
discuss our results in this setting

470
00:18:18,320 --> 00:18:21,520
now in greater detail

471
00:18:22,480 --> 00:18:24,799
so from now on we're going to consider

472
00:18:24,799 --> 00:18:28,320
some fixed system of k subgroups of n

473
00:18:28,320 --> 00:18:30,880
users and a first observation we can

474
00:18:30,880 --> 00:18:32,720
make is that actually the update cost of

475
00:18:32,720 --> 00:18:34,400
the trivial solution

476
00:18:34,400 --> 00:18:36,640
can differ from the optimal update cost

477
00:18:36,640 --> 00:18:39,600
by at most a factor of log n

478
00:18:39,600 --> 00:18:42,720
and the reason for this is as follows

479
00:18:42,720 --> 00:18:44,640
in the trivial solution we know that the

480
00:18:44,640 --> 00:18:48,400
cost for a user that is in m groups

481
00:18:48,400 --> 00:18:50,080
can be at most

482
00:18:50,080 --> 00:18:51,280
log n

483
00:18:51,280 --> 00:18:53,200
times m

484
00:18:53,200 --> 00:18:54,799
but on the other hand the cost for the

485
00:18:54,799 --> 00:18:57,840
same user in an optimal solution must be

486
00:18:57,840 --> 00:19:00,240
at least m as they need to at least

487
00:19:00,240 --> 00:19:03,039
replaced to replace all group keys when

488
00:19:03,039 --> 00:19:05,440
performing an update

489
00:19:05,440 --> 00:19:09,520
so this establishes this inequality

490
00:19:09,520 --> 00:19:11,280
but unfortunately it turns out that

491
00:19:11,280 --> 00:19:13,200
there actually are examples of very

492
00:19:13,200 --> 00:19:16,080
natural group systems in which this

493
00:19:16,080 --> 00:19:18,799
worst case happens for both the trivial

494
00:19:18,799 --> 00:19:21,679
solution and also the asymptotically

495
00:19:21,679 --> 00:19:23,760
optimal solution we have this seen so

496
00:19:23,760 --> 00:19:24,960
far

497
00:19:24,960 --> 00:19:27,280
and to see this we can consider

498
00:19:27,280 --> 00:19:29,679
this hierarchical set system

499
00:19:29,679 --> 00:19:32,160
where the group s i contains exactly the

500
00:19:32,160 --> 00:19:33,280
users

501
00:19:33,280 --> 00:19:36,160
1 to i

502
00:19:36,160 --> 00:19:38,400
and the first observation we can make is

503
00:19:38,400 --> 00:19:41,039
that the sets we partitioned into before

504
00:19:41,039 --> 00:19:44,080
now all contain exactly one user

505
00:19:44,080 --> 00:19:45,520
which means that the graphs of the

506
00:19:45,520 --> 00:19:47,840
trivial and the asymptotically optimal

507
00:19:47,840 --> 00:19:51,199
graph actually coincide

508
00:19:51,600 --> 00:19:54,960
and also the cost of the ith group is

509
00:19:54,960 --> 00:19:58,160
going to be i times log i so if we sum

510
00:19:58,160 --> 00:20:00,240
over all groups we obtain a total cost

511
00:20:00,240 --> 00:20:04,720
of roughly n squared times log n

512
00:20:04,720 --> 00:20:07,039
however the optimal solution for this

513
00:20:07,039 --> 00:20:09,919
system is essentially this path depicted

514
00:20:09,919 --> 00:20:11,520
on the right

515
00:20:11,520 --> 00:20:13,760
and there you can see that the cost for

516
00:20:13,760 --> 00:20:15,600
user n minus i

517
00:20:15,600 --> 00:20:17,679
is actually i

518
00:20:17,679 --> 00:20:19,039
so if we

519
00:20:19,039 --> 00:20:21,440
sum over all of those users we would end

520
00:20:21,440 --> 00:20:23,280
up with the total cost of order n

521
00:20:23,280 --> 00:20:24,320
squared

522
00:20:24,320 --> 00:20:26,799
so this matches this worst case

523
00:20:26,799 --> 00:20:28,799
discussed above

524
00:20:28,799 --> 00:20:30,960
so what goes wrong here

525
00:20:30,960 --> 00:20:33,120
intuitively we have a very hierarchical

526
00:20:33,120 --> 00:20:34,559
group system

527
00:20:34,559 --> 00:20:37,440
but both of our solutions

528
00:20:37,440 --> 00:20:39,760
put the users that are at very different

529
00:20:39,760 --> 00:20:41,840
levels in this system at the same level

530
00:20:41,840 --> 00:20:43,360
in the key graph

531
00:20:43,360 --> 00:20:46,159
so our goal was to find solutions that

532
00:20:46,159 --> 00:20:48,799
better reflect this hierarchical nature

533
00:20:48,799 --> 00:20:50,559
of group systems

534
00:20:50,559 --> 00:20:53,120
and we propose an algorithm to generate

535
00:20:53,120 --> 00:20:55,600
key graphs which seems better equipped

536
00:20:55,600 --> 00:20:58,240
to handle such systems in particular for

537
00:20:58,240 --> 00:21:00,400
this example it would just recover the

538
00:21:00,400 --> 00:21:04,480
optimal solution so now i'm going to

539
00:21:04,480 --> 00:21:07,440
describe our algorithm

540
00:21:07,440 --> 00:21:09,200
i'm going to start with a high level

541
00:21:09,200 --> 00:21:10,960
description

542
00:21:10,960 --> 00:21:13,360
so the algorithm runs in two

543
00:21:13,360 --> 00:21:17,039
phases and both both phases

544
00:21:17,039 --> 00:21:19,679
are implemented with greedy algorithms

545
00:21:19,679 --> 00:21:21,679
so executing the algorithm is quite

546
00:21:21,679 --> 00:21:23,280
efficient

547
00:21:23,280 --> 00:21:25,200
and similarly to before we are going to

548
00:21:25,200 --> 00:21:28,080
partition our universe of users into the

549
00:21:28,080 --> 00:21:30,720
sets of users who are members of exactly

550
00:21:30,720 --> 00:21:32,159
the same groups

551
00:21:32,159 --> 00:21:34,480
and we can actually adapt a

552
00:21:34,480 --> 00:21:36,559
a bit more

553
00:21:36,559 --> 00:21:39,120
abstract view of this

554
00:21:39,120 --> 00:21:41,360
so as seen before every set in this

555
00:21:41,360 --> 00:21:44,159
partition corresponds to an index set

556
00:21:44,159 --> 00:21:47,760
which specifies the corresponding groups

557
00:21:47,760 --> 00:21:50,159
and we can arrange those index sets in a

558
00:21:50,159 --> 00:21:53,200
graph the so-called boolean letters so

559
00:21:53,200 --> 00:21:54,880
in this boolean letters

560
00:21:54,880 --> 00:21:57,280
the index sets are going

561
00:21:57,280 --> 00:21:59,679
correspond to nodes

562
00:21:59,679 --> 00:22:02,320
and an edge corresponds to one set being

563
00:22:02,320 --> 00:22:04,320
a subset of the other

564
00:22:04,320 --> 00:22:06,960
and as you can see in the picture it

565
00:22:06,960 --> 00:22:08,400
actually reflects this hierarchical

566
00:22:08,400 --> 00:22:10,320
nature of sets quite well and for

567
00:22:10,320 --> 00:22:13,360
example the singleton sets

568
00:22:13,360 --> 00:22:16,559
all lie at the top level

569
00:22:16,559 --> 00:22:18,400
now in the first phase

570
00:22:18,400 --> 00:22:20,720
our algorithm picks a sub-graph of the

571
00:22:20,720 --> 00:22:22,720
boolean letters

572
00:22:22,720 --> 00:22:24,159
and

573
00:22:24,159 --> 00:22:25,679
it does so

574
00:22:25,679 --> 00:22:27,840
to achieve uh to to match some

575
00:22:27,840 --> 00:22:29,679
correctness property so essentially what

576
00:22:29,679 --> 00:22:32,400
we want here is that every node has

577
00:22:32,400 --> 00:22:35,280
paths to exactly the singleton sets that

578
00:22:35,280 --> 00:22:37,600
it decomposes into

579
00:22:37,600 --> 00:22:40,799
and then in the second phase there we

580
00:22:40,799 --> 00:22:42,320
attach

581
00:22:42,320 --> 00:22:44,480
the users at their corresponding

582
00:22:44,480 --> 00:22:46,640
position in the lattice graph and then

583
00:22:46,640 --> 00:22:48,880
starting from the bottom build binary

584
00:22:48,880 --> 00:22:51,760
trees for every node in the letters

585
00:22:51,760 --> 00:22:55,360
so i'm going to

586
00:22:55,360 --> 00:22:57,919
describe this in more detail now

587
00:22:57,919 --> 00:23:00,080
so first let's start with the first

588
00:23:00,080 --> 00:23:02,159
phase so here we start with our group

589
00:23:02,159 --> 00:23:04,480
system so in the example

590
00:23:04,480 --> 00:23:07,120
with three groups

591
00:23:07,120 --> 00:23:09,360
and we first identified the largest

592
00:23:09,360 --> 00:23:11,840
intersection of two sets so in our

593
00:23:11,840 --> 00:23:14,400
example those we would be the groups one

594
00:23:14,400 --> 00:23:16,559
and two

595
00:23:16,559 --> 00:23:19,840
and now we split those two sets into

596
00:23:19,840 --> 00:23:20,960
three

597
00:23:20,960 --> 00:23:23,039
the intersection of

598
00:23:23,039 --> 00:23:25,600
the the two sets as well as the sets

599
00:23:25,600 --> 00:23:28,879
without the intersection

600
00:23:29,919 --> 00:23:32,559
and we also add edges from the

601
00:23:32,559 --> 00:23:34,960
intersection to the

602
00:23:34,960 --> 00:23:36,880
two

603
00:23:36,880 --> 00:23:38,799
other sets so in the lattice graph this

604
00:23:38,799 --> 00:23:41,679
corresponds to adding edges from node 1

605
00:23:41,679 --> 00:23:44,000
2 to the nodes one

606
00:23:44,000 --> 00:23:46,320
and two

607
00:23:46,320 --> 00:23:48,000
so now we have a system consisting of

608
00:23:48,000 --> 00:23:50,000
four different sets so in the example

609
00:23:50,000 --> 00:23:51,440
this would be

610
00:23:51,440 --> 00:23:54,400
the intersection of groups two and one

611
00:23:54,400 --> 00:23:56,720
group two without group one and group

612
00:23:56,720 --> 00:23:59,039
one without group two as well as group

613
00:23:59,039 --> 00:24:00,080
three

614
00:24:00,080 --> 00:24:01,760
and we are just going to repeat this

615
00:24:01,760 --> 00:24:04,960
process until all sets are disjoint

616
00:24:04,960 --> 00:24:06,880
so in our example

617
00:24:06,880 --> 00:24:09,360
the next largest intersection now would

618
00:24:09,360 --> 00:24:11,440
be to intersect group three that is the

619
00:24:11,440 --> 00:24:16,320
yellow set with the xi'an colored set

620
00:24:16,320 --> 00:24:18,400
and this results in a new set which is

621
00:24:18,400 --> 00:24:20,320
depicted in green

622
00:24:20,320 --> 00:24:21,360
and

623
00:24:21,360 --> 00:24:23,279
in the lattice graph we add the

624
00:24:23,279 --> 00:24:26,240
corresponding edges from the set 2 3 to

625
00:24:26,240 --> 00:24:29,120
the nodes 2 and 3.

626
00:24:29,120 --> 00:24:31,360
so now we have 5 sets and we actually

627
00:24:31,360 --> 00:24:33,919
have to repeat this step one last time

628
00:24:33,919 --> 00:24:35,919
so it might be a bit hard to see but

629
00:24:35,919 --> 00:24:37,600
there actually is a non-empty

630
00:24:37,600 --> 00:24:39,440
intersection between the yellow and the

631
00:24:39,440 --> 00:24:42,080
blue set

632
00:24:42,480 --> 00:24:44,640
but after splitting

633
00:24:44,640 --> 00:24:46,240
those two sets we actually have

634
00:24:46,240 --> 00:24:49,200
partitioned our set system as desired

635
00:24:49,200 --> 00:24:51,919
and also the boolean lattice graph now

636
00:24:51,919 --> 00:24:54,480
satisfies the desired correctness

637
00:24:54,480 --> 00:24:56,640
property and in the paper we formally

638
00:24:56,640 --> 00:24:58,559
show that this indeed will always be the

639
00:24:58,559 --> 00:25:00,400
case

640
00:25:00,400 --> 00:25:02,720
so this concludes the first phase of the

641
00:25:02,720 --> 00:25:05,279
algorithm

642
00:25:05,520 --> 00:25:09,120
now let's discuss the second phase

643
00:25:09,120 --> 00:25:12,320
so here first we attach the users of the

644
00:25:12,320 --> 00:25:14,559
partitioning sets to the corresponding

645
00:25:14,559 --> 00:25:16,960
node in the lattice graph so the users

646
00:25:16,960 --> 00:25:20,080
here are depicted by the little dots

647
00:25:20,080 --> 00:25:22,000
and then our idea is that for every node

648
00:25:22,000 --> 00:25:23,360
in the lattice graph we are going to

649
00:25:23,360 --> 00:25:25,200
build a binary tree

650
00:25:25,200 --> 00:25:27,679
and the leaves of this tree are going to

651
00:25:27,679 --> 00:25:30,960
be on one hand the users attached to it

652
00:25:30,960 --> 00:25:33,120
and on the other hand the notes in the

653
00:25:33,120 --> 00:25:36,320
lattice graph that have an incident edge

654
00:25:36,320 --> 00:25:38,720
to our note

655
00:25:38,720 --> 00:25:41,360
so let's begin from the bottom

656
00:25:41,360 --> 00:25:44,080
so here we have just a couple of users

657
00:25:44,080 --> 00:25:46,480
so we can simply build a balanced binary

658
00:25:46,480 --> 00:25:48,799
tree for them

659
00:25:48,799 --> 00:25:51,520
but now let's consider the blue node

660
00:25:51,520 --> 00:25:53,600
here we have some users but we now also

661
00:25:53,600 --> 00:25:55,600
have an in-going edge from the root of

662
00:25:55,600 --> 00:25:58,000
the tree that we just built

663
00:25:58,000 --> 00:26:00,000
and we can see that this node actually

664
00:26:00,000 --> 00:26:01,440
represents

665
00:26:01,440 --> 00:26:04,720
more than one user so if we would simply

666
00:26:04,720 --> 00:26:07,200
be building a balanced binary g we would

667
00:26:07,200 --> 00:26:08,960
not achieve the best

668
00:26:08,960 --> 00:26:10,880
solution with respect to average update

669
00:26:10,880 --> 00:26:12,080
cost

670
00:26:12,080 --> 00:26:14,080
however we can actually see this as a

671
00:26:14,080 --> 00:26:16,799
coding problem for the set of leaves

672
00:26:16,799 --> 00:26:19,520
where every leaf has a weight where it

673
00:26:19,520 --> 00:26:22,080
is proportional to the number of users

674
00:26:22,080 --> 00:26:24,000
it represents

675
00:26:24,000 --> 00:26:26,240
so if we use huffman coding to build a

676
00:26:26,240 --> 00:26:27,520
tree

677
00:26:27,520 --> 00:26:29,840
we are actually going to get an optimal

678
00:26:29,840 --> 00:26:32,400
solution as huffman codes are optimal

679
00:26:32,400 --> 00:26:34,240
and if we apply this to the blue node it

680
00:26:34,240 --> 00:26:37,760
would look something like this

681
00:26:37,760 --> 00:26:39,760
so note here that the root of the black

682
00:26:39,760 --> 00:26:42,000
tree is actually attached a bit higher

683
00:26:42,000 --> 00:26:43,520
in the blue tree

684
00:26:43,520 --> 00:26:46,000
as it has larger weight

685
00:26:46,000 --> 00:26:49,919
and now if we repeatedly apply this idea

686
00:26:49,919 --> 00:26:52,400
we finally end up with a

687
00:26:52,400 --> 00:26:55,360
graph that looks something like this

688
00:26:55,360 --> 00:26:57,520
and in the paper we show that this is

689
00:26:57,520 --> 00:26:59,840
indeed a key graph which satisfies the

690
00:26:59,840 --> 00:27:02,480
correctness properties we require

691
00:27:02,480 --> 00:27:05,520
for the considered group system

692
00:27:05,520 --> 00:27:07,279
and of course we would like to know how

693
00:27:07,279 --> 00:27:10,240
efficient this solution is

694
00:27:10,240 --> 00:27:12,480
so as a first thing going back to the

695
00:27:12,480 --> 00:27:15,520
asymptotic setting we can show that it

696
00:27:15,520 --> 00:27:16,240
is

697
00:27:16,240 --> 00:27:19,120
also asymptotically optimal so already

698
00:27:19,120 --> 00:27:21,279
this is quite nice

699
00:27:21,279 --> 00:27:23,440
but we also compute bounce on its update

700
00:27:23,440 --> 00:27:25,200
cost in the concrete setting and i'm

701
00:27:25,200 --> 00:27:26,960
going to discuss them in a bit more

702
00:27:26,960 --> 00:27:29,520
detail now

703
00:27:29,520 --> 00:27:31,520
so we can show the following bound on

704
00:27:31,520 --> 00:27:34,000
the update cost of key graphs generated

705
00:27:34,000 --> 00:27:35,679
with our algorithm

706
00:27:35,679 --> 00:27:37,440
this looks quite complicated but

707
00:27:37,440 --> 00:27:38,960
actually makes it quite easy to compare

708
00:27:38,960 --> 00:27:41,600
it to the trivial solution and i will

709
00:27:41,600 --> 00:27:44,320
try to break it down now

710
00:27:44,320 --> 00:27:49,279
so let's first consider the first term

711
00:27:49,279 --> 00:27:51,360
we can see that this term actually just

712
00:27:51,360 --> 00:27:53,600
corresponds to the update cost of the

713
00:27:53,600 --> 00:27:55,840
trivial solution

714
00:27:55,840 --> 00:27:57,679
which means that the second part of this

715
00:27:57,679 --> 00:28:00,000
equation is going to tell us how much we

716
00:28:00,000 --> 00:28:03,279
save compared to it so here we have a

717
00:28:03,279 --> 00:28:06,159
sum running all of an over

718
00:28:06,159 --> 00:28:08,559
some running over all of the nodes in

719
00:28:08,559 --> 00:28:11,039
the lattice graph that are no singleton

720
00:28:11,039 --> 00:28:12,000
sets

721
00:28:12,000 --> 00:28:14,000
that is the nodes

722
00:28:14,000 --> 00:28:16,720
below the first level

723
00:28:16,720 --> 00:28:18,960
so let's consider one of those terms and

724
00:28:18,960 --> 00:28:20,880
concretely let's look at the blue

725
00:28:20,880 --> 00:28:22,480
partitioning set representing the

726
00:28:22,480 --> 00:28:25,440
lattice node one two

727
00:28:25,440 --> 00:28:27,520
and we can see that the saved cost

728
00:28:27,520 --> 00:28:29,600
actually corresponds to the update cost

729
00:28:29,600 --> 00:28:32,240
of building a balanced binary tree

730
00:28:32,240 --> 00:28:35,120
for a certain number of users and more

731
00:28:35,120 --> 00:28:38,159
precisely this number of users

732
00:28:38,159 --> 00:28:40,080
is going to be the users that either

733
00:28:40,080 --> 00:28:42,720
belong to the letters node itself

734
00:28:42,720 --> 00:28:44,960
or to a lattice node that has a path

735
00:28:44,960 --> 00:28:47,600
into it so in our example this would be

736
00:28:47,600 --> 00:28:49,760
the users who are exactly in the groups

737
00:28:49,760 --> 00:28:51,360
one and two

738
00:28:51,360 --> 00:28:53,840
and the users who are exactly in groups

739
00:28:53,840 --> 00:28:57,360
one two and three

740
00:28:57,440 --> 00:29:00,399
and to briefly cover the other nodes

741
00:29:00,399 --> 00:29:03,120
we would also in our example save the

742
00:29:03,120 --> 00:29:05,200
cost of building one tree for the users

743
00:29:05,200 --> 00:29:07,520
in groups one two and three so this

744
00:29:07,520 --> 00:29:09,600
corresponds to the black node

745
00:29:09,600 --> 00:29:10,720
and

746
00:29:10,720 --> 00:29:12,960
uh to the cost of building a tree for

747
00:29:12,960 --> 00:29:15,760
the users in groups two and three

748
00:29:15,760 --> 00:29:19,279
corresponding to the green node

749
00:29:19,279 --> 00:29:22,399
however all of this comes with a caveat

750
00:29:22,399 --> 00:29:24,159
and that is so far we have only looked

751
00:29:24,159 --> 00:29:25,600
at the lower bound

752
00:29:25,600 --> 00:29:27,520
but the upper bound also includes some

753
00:29:27,520 --> 00:29:30,320
terms of plus one and due to these terms

754
00:29:30,320 --> 00:29:32,320
we can unfortunately not formally

755
00:29:32,320 --> 00:29:35,200
conclude that our algorithm always does

756
00:29:35,200 --> 00:29:37,120
better than the trivial one

757
00:29:37,120 --> 00:29:38,240
so if there

758
00:29:38,240 --> 00:29:41,120
is some concrete group system for which

759
00:29:41,120 --> 00:29:43,039
our algorithm actually does worse it

760
00:29:43,039 --> 00:29:45,679
would be due to those surrounding errors

761
00:29:45,679 --> 00:29:47,440
however i want to point out that we were

762
00:29:47,440 --> 00:29:49,440
not able to find an example where our

763
00:29:49,440 --> 00:29:51,600
algorithm actually does not outperform

764
00:29:51,600 --> 00:29:54,880
the trivial algorithm

765
00:29:54,880 --> 00:29:56,720
overall we unfortunately do not know

766
00:29:56,720 --> 00:29:58,799
whether our algorithm always finds the

767
00:29:58,799 --> 00:30:01,520
optimal key graph or whether it's

768
00:30:01,520 --> 00:30:03,760
optimal up to some factor so we consider

769
00:30:03,760 --> 00:30:05,600
this a very interesting open question

770
00:30:05,600 --> 00:30:07,279
and i will discuss it in a bit more

771
00:30:07,279 --> 00:30:10,559
detail at the very end of the video

772
00:30:10,559 --> 00:30:12,960
and i also want to point out that in the

773
00:30:12,960 --> 00:30:15,039
paper we also give a comparison to the

774
00:30:15,039 --> 00:30:17,120
asymptotically optimal algorithm from

775
00:30:17,120 --> 00:30:19,919
before and similarly our algorithm seems

776
00:30:19,919 --> 00:30:22,159
to do better however here the savings

777
00:30:22,159 --> 00:30:24,480
are less substantial they are actually

778
00:30:24,480 --> 00:30:25,279
more

779
00:30:25,279 --> 00:30:26,880
of all the

780
00:30:26,880 --> 00:30:27,760
n

781
00:30:27,760 --> 00:30:31,360
than of order n times log n

782
00:30:33,200 --> 00:30:36,000
let me now briefly discuss the second

783
00:30:36,000 --> 00:30:37,679
contribution in the concrete setting we

784
00:30:37,679 --> 00:30:40,159
make in this paper and that is

785
00:30:40,159 --> 00:30:44,000
lower bounds in a symbolic model

786
00:30:44,880 --> 00:30:47,039
so we derive lower bounds on the update

787
00:30:47,039 --> 00:30:49,039
cost of continuous group key agreement

788
00:30:49,039 --> 00:30:51,200
schemes and multicast encryption schemes

789
00:30:51,200 --> 00:30:54,080
in this setting of multiple groups

790
00:30:54,080 --> 00:30:56,000
and we consider schemes

791
00:30:56,000 --> 00:30:58,000
built from public key encryption

792
00:30:58,000 --> 00:30:59,760
pseudorandom generators and secret

793
00:30:59,760 --> 00:31:03,120
sharing in the case of cgka

794
00:31:03,120 --> 00:31:05,360
and symmetric encryption pseudorandom

795
00:31:05,360 --> 00:31:07,279
generators and secret sharing in the

796
00:31:07,279 --> 00:31:10,559
case of multicast

797
00:31:10,559 --> 00:31:12,880
and to prove our bounds we rely on a

798
00:31:12,880 --> 00:31:15,440
symbolic model in the style of

799
00:31:15,440 --> 00:31:17,120
dolef and yao

800
00:31:17,120 --> 00:31:19,039
that is we model the used building

801
00:31:19,039 --> 00:31:22,080
blocks as idealized primitives

802
00:31:22,080 --> 00:31:23,519
and this means that the information

803
00:31:23,519 --> 00:31:25,760
about secret keys can only be recovered

804
00:31:25,760 --> 00:31:29,039
according to some fixed derivation rules

805
00:31:29,039 --> 00:31:31,039
and the security notion we target is

806
00:31:31,039 --> 00:31:33,200
post compromise security

807
00:31:33,200 --> 00:31:35,200
which means that users should be able to

808
00:31:35,200 --> 00:31:37,200
recover from corruption

809
00:31:37,200 --> 00:31:39,120
and since we arrive lower bonds this

810
00:31:39,120 --> 00:31:40,799
also in particular excludes

811
00:31:40,799 --> 00:31:42,640
constructions for stronger security

812
00:31:42,640 --> 00:31:45,039
notions one would like in practice like

813
00:31:45,039 --> 00:31:48,880
post compromise forward secrecy

814
00:31:48,880 --> 00:31:51,039
and our approach follows the ideas by

815
00:31:51,039 --> 00:31:53,679
micheal and panchwani who considered the

816
00:31:53,679 --> 00:31:56,000
worst case update cost for multicast

817
00:31:56,000 --> 00:31:58,320
encryption for a single group

818
00:31:58,320 --> 00:32:00,159
so the difference being that we consider

819
00:32:00,159 --> 00:32:02,159
multiple groups and find bonds with

820
00:32:02,159 --> 00:32:04,559
respect to the average update cost and

821
00:32:04,559 --> 00:32:06,240
if we restrict to a single group our

822
00:32:06,240 --> 00:32:08,240
amount actually matches the one

823
00:32:08,240 --> 00:32:11,039
established in this paper

824
00:32:11,039 --> 00:32:14,799
so here is what we were able to show

825
00:32:14,799 --> 00:32:17,360
so we can see that again the partition

826
00:32:17,360 --> 00:32:19,360
into sets of users who belong to exactly

827
00:32:19,360 --> 00:32:21,919
the same groups plays a role

828
00:32:21,919 --> 00:32:23,679
and more precisely

829
00:32:23,679 --> 00:32:26,080
we show that in the symbolic model every

830
00:32:26,080 --> 00:32:29,039
secure cgka or multicast scheme must

831
00:32:29,039 --> 00:32:31,600
have an average update cost of at least

832
00:32:31,600 --> 00:32:33,440
the cost of constructing a balanced

833
00:32:33,440 --> 00:32:36,000
binary tree for every set in the

834
00:32:36,000 --> 00:32:38,559
partition

835
00:32:38,880 --> 00:32:41,279
so to give some idea of the proof

836
00:32:41,279 --> 00:32:43,360
and we allow arbitrary schemes so we

837
00:32:43,360 --> 00:32:44,399
cannot

838
00:32:44,399 --> 00:32:46,720
so so they do not necessarily have to

839
00:32:46,720 --> 00:32:49,200
use a fixed key derivation graph

840
00:32:49,200 --> 00:32:51,519
however we can show that at some point

841
00:32:51,519 --> 00:32:53,519
at every point during during the

842
00:32:53,519 --> 00:32:55,360
protocol execution

843
00:32:55,360 --> 00:32:57,440
in the symbolic model we can identify

844
00:32:57,440 --> 00:32:59,200
something which looks like a key

845
00:32:59,200 --> 00:33:01,760
derivation graph in the secret keys of

846
00:33:01,760 --> 00:33:03,440
the system

847
00:33:03,440 --> 00:33:05,200
and then we can compute lower bounds on

848
00:33:05,200 --> 00:33:07,440
the communication complexity incurred by

849
00:33:07,440 --> 00:33:09,039
this graph similar to how we got the

850
00:33:09,039 --> 00:33:12,799
bound in the asymptotics setting

851
00:33:12,799 --> 00:33:15,039
so this concludes the technical part of

852
00:33:15,039 --> 00:33:16,799
this video and

853
00:33:16,799 --> 00:33:18,559
i will

854
00:33:18,559 --> 00:33:20,559
end with a brief summary and some open

855
00:33:20,559 --> 00:33:22,960
questions

856
00:33:22,960 --> 00:33:24,720
so in this work we investigate the

857
00:33:24,720 --> 00:33:27,039
update cost of key graphs for several

858
00:33:27,039 --> 00:33:29,519
potentially overlapping groups and we

859
00:33:29,519 --> 00:33:32,480
consider this question in two settings

860
00:33:32,480 --> 00:33:34,320
in the asymptotic setting we compute

861
00:33:34,320 --> 00:33:36,799
lower bounds on the update cost and find

862
00:33:36,799 --> 00:33:39,519
the matching constructions

863
00:33:39,519 --> 00:33:41,440
but unfortunately this construction is

864
00:33:41,440 --> 00:33:43,919
not satisfactory for certain concrete

865
00:33:43,919 --> 00:33:47,760
group systems so we also consider

866
00:33:47,760 --> 00:33:50,320
concrete resistance afterwards

867
00:33:50,320 --> 00:33:52,159
and here we propose an algorithm to

868
00:33:52,159 --> 00:33:54,559
compute key graphs and compute bounds on

869
00:33:54,559 --> 00:33:56,480
its update costs that make it quite easy

870
00:33:56,480 --> 00:34:00,000
to compare it to the trivial solution

871
00:34:00,000 --> 00:34:02,399
and as a second contribution we derive

872
00:34:02,399 --> 00:34:04,880
lower bounds on the update cost of cgka

873
00:34:04,880 --> 00:34:07,279
and multicast encryption from multiple

874
00:34:07,279 --> 00:34:09,839
groups in a symbolic model

875
00:34:09,839 --> 00:34:12,079
and now let me end

876
00:34:12,079 --> 00:34:13,918
by pointing out some interesting open

877
00:34:13,918 --> 00:34:16,480
questions so the most pressing one is

878
00:34:16,480 --> 00:34:18,960
probably the question of optimality in

879
00:34:18,960 --> 00:34:20,960
the concrete setting so this can be

880
00:34:20,960 --> 00:34:23,280
asked in different flavors

881
00:34:23,280 --> 00:34:26,560
so the first one would be in general

882
00:34:26,560 --> 00:34:29,520
is it possible to efficiently find the

883
00:34:29,520 --> 00:34:32,560
optimal key graph for a group system

884
00:34:32,560 --> 00:34:34,320
or on the other end of the spectrum

885
00:34:34,320 --> 00:34:37,679
might this even be np complete

886
00:34:37,679 --> 00:34:39,280
and there's a second flavor of this

887
00:34:39,280 --> 00:34:41,199
question if we restricted ourselves to

888
00:34:41,199 --> 00:34:43,760
algorithms which follow this boolean

889
00:34:43,760 --> 00:34:46,320
letters approach so

890
00:34:46,320 --> 00:34:48,800
if uh so

891
00:34:48,800 --> 00:34:51,359
key graphs anywhere in the first phase

892
00:34:51,359 --> 00:34:52,719
um the

893
00:34:52,719 --> 00:34:55,199
we pick a subgraph of this boolean

894
00:34:55,199 --> 00:34:56,879
letters and then in second phase use

895
00:34:56,879 --> 00:34:59,839
huffman codes to generate the final key

896
00:34:59,839 --> 00:35:00,960
graph

897
00:35:00,960 --> 00:35:03,359
the open question would be is our

898
00:35:03,359 --> 00:35:06,880
approach optimal if we restrict two

899
00:35:06,880 --> 00:35:09,680
key graphs generated with this approach

900
00:35:09,680 --> 00:35:11,440
and this essentially translates to some

901
00:35:11,440 --> 00:35:13,599
discrete optimization problem over

902
00:35:13,599 --> 00:35:15,599
graphs so we if you're interested in

903
00:35:15,599 --> 00:35:19,200
this we detail this in the paper

904
00:35:19,200 --> 00:35:21,599
now a different line for future work

905
00:35:21,599 --> 00:35:22,880
would be concerned with making the

906
00:35:22,880 --> 00:35:24,480
approach practical

907
00:35:24,480 --> 00:35:27,599
so tree cam and other cgka protocols

908
00:35:27,599 --> 00:35:29,760
employ additional mechanisms to ensure

909
00:35:29,760 --> 00:35:32,240
that all users all have a consistent

910
00:35:32,240 --> 00:35:34,079
view of the key graph

911
00:35:34,079 --> 00:35:36,000
so a good question would be do those

912
00:35:36,000 --> 00:35:38,720
carry over

913
00:35:38,720 --> 00:35:40,480
and on the other hand of course one

914
00:35:40,480 --> 00:35:42,839
would like to be able to add and remove

915
00:35:42,839 --> 00:35:44,400
users

916
00:35:44,400 --> 00:35:46,480
to and from the groups

917
00:35:46,480 --> 00:35:48,000
and we show

918
00:35:48,000 --> 00:35:49,760
in the paper that this can be

919
00:35:49,760 --> 00:35:51,760
implemented for our constructions using

920
00:35:51,760 --> 00:35:53,920
techniques like blanking or unmerged

921
00:35:53,920 --> 00:35:54,800
leaves

922
00:35:54,800 --> 00:35:56,400
but it is an interesting open question

923
00:35:56,400 --> 00:35:59,680
how efficient this would this would be

924
00:35:59,680 --> 00:36:03,040
compared to the trivial solution

925
00:36:03,040 --> 00:36:05,920
now this marks the end of this video so

926
00:36:05,920 --> 00:36:10,520
thank you a lot for watching bye

927
00:36:18,560 --> 00:36:20,640
you

