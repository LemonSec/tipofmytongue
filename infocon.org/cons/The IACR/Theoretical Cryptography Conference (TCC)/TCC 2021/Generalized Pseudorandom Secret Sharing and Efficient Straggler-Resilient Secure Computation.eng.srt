1
00:00:01,280 --> 00:00:03,360
hello everyone my name is arianov and i

2
00:00:03,360 --> 00:00:05,200
will present the paper generalized

3
00:00:05,200 --> 00:00:06,640
random secretary and efficient

4
00:00:06,640 --> 00:00:08,960
struggling brazilian secure competition

5
00:00:08,960 --> 00:00:11,040
this is a joint work with fabrizio malda

6
00:00:11,040 --> 00:00:15,200
and red bull diploma devi and ivanishai

7
00:00:15,200 --> 00:00:16,800
so in this role we consider the popular

8
00:00:16,800 --> 00:00:18,480
setting of multibody computation with

9
00:00:18,480 --> 00:00:20,160
advanced majority

10
00:00:20,160 --> 00:00:21,760
in this setting we have n parties who

11
00:00:21,760 --> 00:00:22,880
wish to compute jointly some

12
00:00:22,880 --> 00:00:25,199
functionality over their private inputs

13
00:00:25,199 --> 00:00:27,599
without revealing anything by the output

14
00:00:27,599 --> 00:00:30,240
in the presence of t corrupted parties

15
00:00:30,240 --> 00:00:33,040
where n is larger than 2t

16
00:00:33,040 --> 00:00:35,520
so the reason this setting is so popular

17
00:00:35,520 --> 00:00:37,360
is because because in this setting we

18
00:00:37,360 --> 00:00:38,879
are able to achieve highly efficient

19
00:00:38,879 --> 00:00:40,879
protocols that are information dramatic

20
00:00:40,879 --> 00:00:42,719
or only make a black box use of cheap

21
00:00:42,719 --> 00:00:44,800
symmetric crypt

22
00:00:44,800 --> 00:00:46,399
now within this setting we can

23
00:00:46,399 --> 00:00:49,039
distinguish between two sub settings

24
00:00:49,039 --> 00:00:50,960
the weak honest modality setting will n

25
00:00:50,960 --> 00:00:52,960
is exactly 2t plus 1 which is the

26
00:00:52,960 --> 00:00:55,199
minimum number of parties required to

27
00:00:55,199 --> 00:00:57,039
maintain bonus majority

28
00:00:57,039 --> 00:00:58,879
and the strongest majority setting will

29
00:00:58,879 --> 00:01:02,480
n is directly larger than 2t plus 1.

30
00:01:02,480 --> 00:01:04,080
the main question that we ask in this

31
00:01:04,080 --> 00:01:06,159
work is what can we gain in terms of

32
00:01:06,159 --> 00:01:08,400
control efficiency from allowing strong

33
00:01:08,400 --> 00:01:10,240
bonus majority

34
00:01:10,240 --> 00:01:12,240
now this question may seem a bit odd at

35
00:01:12,240 --> 00:01:14,080
first glance because we used to think

36
00:01:14,080 --> 00:01:16,640
that in cryptographic protocols

37
00:01:16,640 --> 00:01:18,240
there is a trade-off between security

38
00:01:18,240 --> 00:01:20,240
and efficiency so if we reduce the

39
00:01:20,240 --> 00:01:22,880
security threshold then we will be able

40
00:01:22,880 --> 00:01:26,320
to improve efficiency

41
00:01:26,320 --> 00:01:28,000
however this is not true for the honest

42
00:01:28,000 --> 00:01:29,520
majority setting

43
00:01:29,520 --> 00:01:31,280
to see this consider the task of

44
00:01:31,280 --> 00:01:33,439
evaluating an arithmetic circuit over

45
00:01:33,439 --> 00:01:35,280
secret shared inputs

46
00:01:35,280 --> 00:01:36,880
if the sql chain is linear then the

47
00:01:36,880 --> 00:01:38,799
parties need only to interact to compute

48
00:01:38,799 --> 00:01:40,960
multiplication gates

49
00:01:40,960 --> 00:01:42,479
the best semerance multiplication

50
00:01:42,479 --> 00:01:43,759
portable to this state is the dam

51
00:01:43,759 --> 00:01:46,799
goddess protocol which has two rounds

52
00:01:46,799 --> 00:01:49,119
in the first round the parties send two

53
00:01:49,119 --> 00:01:51,600
team messages to party p1 or any other

54
00:01:51,600 --> 00:01:53,040
designated party

55
00:01:53,040 --> 00:01:56,719
and then rtp1 sends back n minus t minus

56
00:01:56,719 --> 00:01:58,799
1 measure this to the other parties

57
00:01:58,799 --> 00:02:01,520
so the communication cost is n plus t

58
00:02:01,520 --> 00:02:04,240
minus 1 send elements a multiplication

59
00:02:04,240 --> 00:02:05,600
gate

60
00:02:05,600 --> 00:02:07,520
now recent works have also closed the

61
00:02:07,520 --> 00:02:09,280
gap between semi honest and malicious

62
00:02:09,280 --> 00:02:10,878
security in this one in the honest

63
00:02:10,878 --> 00:02:12,560
majority setting

64
00:02:12,560 --> 00:02:13,920
this means that we have the same

65
00:02:13,920 --> 00:02:15,920
communication cost also with malicious

66
00:02:15,920 --> 00:02:18,319
security both for the strong and the

67
00:02:18,319 --> 00:02:20,640
weak honest majority setting

68
00:02:20,640 --> 00:02:22,160
now assume that we want to work in the

69
00:02:22,160 --> 00:02:24,239
strong honest majority setting so now we

70
00:02:24,239 --> 00:02:26,239
have two options first to run a protocol

71
00:02:26,239 --> 00:02:28,239
in the strong honest majority setting

72
00:02:28,239 --> 00:02:29,680
but the second option is to let the

73
00:02:29,680 --> 00:02:32,400
parties share their inputs to a subset

74
00:02:32,400 --> 00:02:34,800
of two three plus one parties who will

75
00:02:34,800 --> 00:02:37,040
run the protocol further in the week on

76
00:02:37,040 --> 00:02:38,959
this majority setting

77
00:02:38,959 --> 00:02:41,120
it is straightforward to see that in

78
00:02:41,120 --> 00:02:43,120
that the second option will result with

79
00:02:43,120 --> 00:02:44,640
less communication

80
00:02:44,640 --> 00:02:46,640
and so it is not clear what can we gain

81
00:02:46,640 --> 00:02:48,000
from working in the strong bonus

82
00:02:48,000 --> 00:02:50,400
modality setting

83
00:02:50,400 --> 00:02:52,000
a different direction that has been

84
00:02:52,000 --> 00:02:53,599
considered in the strongest majority

85
00:02:53,599 --> 00:02:55,440
setting to improve efficiency

86
00:02:55,440 --> 00:02:57,519
is to evaluate multiple gates together

87
00:02:57,519 --> 00:02:59,760
at the same cost of a single gate this

88
00:02:59,760 --> 00:03:01,840
can be done using factor musical chain

89
00:03:01,840 --> 00:03:04,000
where we store l secret in the same

90
00:03:04,000 --> 00:03:05,519
polynomial

91
00:03:05,519 --> 00:03:07,280
so now the degree of the polynomials

92
00:03:07,280 --> 00:03:09,360
that are used during the computation is

93
00:03:09,360 --> 00:03:10,720
t plus l

94
00:03:10,720 --> 00:03:12,879
which we denote by t and the number of

95
00:03:12,879 --> 00:03:16,159
parties must be larger than 2t

96
00:03:16,159 --> 00:03:19,360
now when evaluating smd circuits

97
00:03:19,360 --> 00:03:21,840
where you have many copies of the same

98
00:03:21,840 --> 00:03:24,319
circuit in parallel with this gives an

99
00:03:24,319 --> 00:03:26,720
immediate improvement by a factor of l

100
00:03:26,720 --> 00:03:28,879
for both communication and computation

101
00:03:28,879 --> 00:03:31,120
which is of course significant however

102
00:03:31,120 --> 00:03:33,280
when working over general circuits

103
00:03:33,280 --> 00:03:34,640
previous works could only achieve a

104
00:03:34,640 --> 00:03:36,640
symptotic efficiency but with high

105
00:03:36,640 --> 00:03:38,640
concrete cost for routing secrets

106
00:03:38,640 --> 00:03:41,040
between blocks when moving from one

107
00:03:41,040 --> 00:03:42,640
layer of the circuit to the next layer

108
00:03:42,640 --> 00:03:44,080
of the circuit

109
00:03:44,080 --> 00:03:45,840
so the question that we started with

110
00:03:45,840 --> 00:03:47,840
remains open what can we gain in terms

111
00:03:47,840 --> 00:03:49,519
of concrete efficiency

112
00:03:49,519 --> 00:03:51,440
from working in the strongholds for

113
00:03:51,440 --> 00:03:53,280
dirty setting when evaluating the

114
00:03:53,280 --> 00:03:55,840
general circuits

115
00:03:55,840 --> 00:03:57,680
in this work we present new techniques

116
00:03:57,680 --> 00:03:59,280
for the stormland's majority setting

117
00:03:59,280 --> 00:04:01,200
improving communication computational

118
00:04:01,200 --> 00:04:04,000
cost storage and latency

119
00:04:04,000 --> 00:04:06,080
all of our techniques are based on

120
00:04:06,080 --> 00:04:08,720
cellular random signature in plss

121
00:04:08,720 --> 00:04:10,640
which allows secure and non-interactive

122
00:04:10,640 --> 00:04:12,640
generation of certain random shamil

123
00:04:12,640 --> 00:04:15,040
secret sharings form a set of replicated

124
00:04:15,040 --> 00:04:17,120
seeds that is distributed across the

125
00:04:17,120 --> 00:04:18,320
parties

126
00:04:18,320 --> 00:04:20,639
now while this method does not require

127
00:04:20,639 --> 00:04:23,440
any communication the computational cost

128
00:04:23,440 --> 00:04:25,199
it grows very fast with the number of

129
00:04:25,199 --> 00:04:26,639
parties and therefore it is only

130
00:04:26,639 --> 00:04:29,199
practical for small values of team

131
00:04:29,199 --> 00:04:31,040
nevertheless it has many applications

132
00:04:31,040 --> 00:04:33,440
beyond the context of npc and therefore

133
00:04:33,440 --> 00:04:35,840
some of our techniques are of interest

134
00:04:35,840 --> 00:04:37,440
even beyond the context of secure

135
00:04:37,440 --> 00:04:39,919
multiparty computation

136
00:04:39,919 --> 00:04:42,160
our first contribution is a way to

137
00:04:42,160 --> 00:04:44,560
construct useful linear correlations

138
00:04:44,560 --> 00:04:47,040
using prss to support computation of

139
00:04:47,040 --> 00:04:50,000
non-smd circuits over pax secret time

140
00:04:50,000 --> 00:04:52,080
which avoid the routing mechanism

141
00:04:52,080 --> 00:04:54,840
overhead from previous works

142
00:04:54,840 --> 00:04:56,720
completely

143
00:04:56,720 --> 00:04:59,680
our second technical contribution is a

144
00:04:59,680 --> 00:05:02,000
new general plss construction with

145
00:05:02,000 --> 00:05:04,000
reduced number of seeds and reduced

146
00:05:04,000 --> 00:05:05,680
computational cost

147
00:05:05,680 --> 00:05:08,400
when the polynomial polynomial degree t

148
00:05:08,400 --> 00:05:10,479
is higher than what is required by the

149
00:05:10,479 --> 00:05:12,800
corruption threshold t and the packing

150
00:05:12,800 --> 00:05:14,560
parameter l

151
00:05:14,560 --> 00:05:16,880
by achieving this we are able to extend

152
00:05:16,880 --> 00:05:19,520
the range for which the plss technique

153
00:05:19,520 --> 00:05:22,000
is applicable

154
00:05:22,000 --> 00:05:24,400
our third and last contribution is chip

155
00:05:24,400 --> 00:05:26,960
straggler's resilience in particular we

156
00:05:26,960 --> 00:05:29,360
show that if the number of parties n is

157
00:05:29,360 --> 00:05:31,360
larger than what is required by the

158
00:05:31,360 --> 00:05:33,039
polynomial degree t

159
00:05:33,039 --> 00:05:36,160
namely that n is larger than 2 d plus 1

160
00:05:36,160 --> 00:05:37,600
then we can allow the protocol to

161
00:05:37,600 --> 00:05:40,000
proceed even if not all messages have

162
00:05:40,000 --> 00:05:42,240
arrived in each round

163
00:05:42,240 --> 00:05:43,840
while this is uh straightforward to

164
00:05:43,840 --> 00:05:46,479
achieving with similar security this is

165
00:05:46,479 --> 00:05:48,400
much more challenging to achieve with

166
00:05:48,400 --> 00:05:50,160
malicious security because it requires

167
00:05:50,160 --> 00:05:52,720
dealing with a subtle attack due to

168
00:05:52,720 --> 00:05:55,360
guyaratal which we call the double

169
00:05:55,360 --> 00:05:56,639
dipping attack

170
00:05:56,639 --> 00:05:58,160
which breaks the privacy of the

171
00:05:58,160 --> 00:05:59,520
computation

172
00:05:59,520 --> 00:06:01,520
we present a solution for this attack

173
00:06:01,520 --> 00:06:03,840
that requires no additional cost while

174
00:06:03,840 --> 00:06:07,199
achieving strategies resilience

175
00:06:07,199 --> 00:06:09,360
using our three technical contributions

176
00:06:09,360 --> 00:06:11,840
we obtain the following two results

177
00:06:11,840 --> 00:06:14,319
the first result is a prss scheme for

178
00:06:14,319 --> 00:06:16,160
sharing the greedy polynomials between

179
00:06:16,160 --> 00:06:18,720
end parties with security threshold t

180
00:06:18,720 --> 00:06:20,319
where we make a reduction from the

181
00:06:20,319 --> 00:06:23,039
covering designs problem and show that

182
00:06:23,039 --> 00:06:25,440
given a solution to that problem of size

183
00:06:25,440 --> 00:06:28,400
k our plss scheme requires k times d

184
00:06:28,400 --> 00:06:31,199
plus one times a minus t divided by n

185
00:06:31,199 --> 00:06:34,479
prf seeds party which improves upon the

186
00:06:34,479 --> 00:06:37,680
classical result of qualitative when d

187
00:06:37,680 --> 00:06:40,240
is larger than t

188
00:06:40,240 --> 00:06:41,919
and in the following table we can see

189
00:06:41,919 --> 00:06:44,479
the number of seats probability in this

190
00:06:44,479 --> 00:06:46,960
work and in the work of criminal for two

191
00:06:46,960 --> 00:06:49,759
special cases when t equals one in any

192
00:06:49,759 --> 00:06:52,000
number of bodies and when t equals two

193
00:06:52,000 --> 00:06:53,759
and any number of probabilities such

194
00:06:53,759 --> 00:06:56,560
that m is smaller than three times d

195
00:06:56,560 --> 00:06:58,960
plus one

196
00:06:58,960 --> 00:07:01,360
now i said before this result has many

197
00:07:01,360 --> 00:07:03,440
applications even beyond the context of

198
00:07:03,440 --> 00:07:06,080
general npc for example for threshold

199
00:07:06,080 --> 00:07:08,880
cryptography as shown by clementine

200
00:07:08,880 --> 00:07:11,039
or for the task of secure aggregation

201
00:07:11,039 --> 00:07:13,840
which is important for secure federated

202
00:07:13,840 --> 00:07:15,039
learning

203
00:07:15,039 --> 00:07:17,039
or even for the simple task of secure

204
00:07:17,039 --> 00:07:19,120
distributed storage where a dealer wants

205
00:07:19,120 --> 00:07:22,080
to store secret across multiple servers

206
00:07:22,080 --> 00:07:24,319
and with plss the dealer only needs to

207
00:07:24,319 --> 00:07:26,639
broadcast the offset between the actual

208
00:07:26,639 --> 00:07:29,360
secret and the secret that was generated

209
00:07:29,360 --> 00:07:32,639
using prss

210
00:07:33,520 --> 00:07:35,520
our second result is an mpc protocol

211
00:07:35,520 --> 00:07:37,520
with malicious security and struggles

212
00:07:37,520 --> 00:07:38,720
resilience

213
00:07:38,720 --> 00:07:40,080
in particular we showed that given a

214
00:07:40,080 --> 00:07:41,759
security threshold t

215
00:07:41,759 --> 00:07:43,360
packing parameter l

216
00:07:43,360 --> 00:07:45,759
number of parties n which is equal or

217
00:07:45,759 --> 00:07:49,120
larger than 2t plus 2 l minus 1 then

218
00:07:49,120 --> 00:07:50,960
there exists a protocol to compute any

219
00:07:50,960 --> 00:07:53,120
arithmetic circuit c over a finite field

220
00:07:53,120 --> 00:07:55,840
f with s multiplication gates which has

221
00:07:55,840 --> 00:07:58,319
the following properties first the

222
00:07:58,319 --> 00:08:00,560
protocol makes only black box use of any

223
00:08:00,560 --> 00:08:02,479
cellular random function

224
00:08:02,479 --> 00:08:04,240
the protocol achieves malicious security

225
00:08:04,240 --> 00:08:06,800
against t corrupted studies even if tau

226
00:08:06,800 --> 00:08:09,440
messages are lost in each epoch

227
00:08:09,440 --> 00:08:13,199
where tau is n minus 2 t plus 2 l minus

228
00:08:13,199 --> 00:08:16,000
1 and an epoch is defined as the two

229
00:08:16,000 --> 00:08:18,479
rounds where p1 sends a message to all

230
00:08:18,479 --> 00:08:20,160
the other parties and receives back a

231
00:08:20,160 --> 00:08:23,039
message from them

232
00:08:23,039 --> 00:08:24,639
and the third property is that if the

233
00:08:24,639 --> 00:08:26,160
parties follow the protocol then it

234
00:08:26,160 --> 00:08:27,759
terminates successfully even if tau

235
00:08:27,759 --> 00:08:30,080
messages chosen adductively by the

236
00:08:30,080 --> 00:08:32,640
advisory are dropped in each epoch

237
00:08:32,640 --> 00:08:34,320
and finally the communication cost of

238
00:08:34,320 --> 00:08:35,519
the protocol

239
00:08:35,519 --> 00:08:38,159
is given in this equation

240
00:08:38,159 --> 00:08:41,279
as can be seen the communication cost

241
00:08:41,279 --> 00:08:43,279
decreases as we increase the packing

242
00:08:43,279 --> 00:08:45,600
parameter l and as we will see we are

243
00:08:45,600 --> 00:08:49,200
able to beat the best previous protocols

244
00:08:49,200 --> 00:08:51,519
in this setting while achieving stargaz

245
00:08:51,519 --> 00:08:53,680
resilience

246
00:08:53,680 --> 00:08:56,320
so let's go into our first contribution

247
00:08:56,320 --> 00:08:58,399
of generalized prss to support

248
00:08:58,399 --> 00:09:00,800
computation of non-smd circuits over

249
00:09:00,800 --> 00:09:03,680
pac-square chilling

250
00:09:03,680 --> 00:09:05,600
so let's first recall how the dumb girl

251
00:09:05,600 --> 00:09:08,240
needs a multiplication protocol works so

252
00:09:08,240 --> 00:09:10,000
we use the bucket notation to denote the

253
00:09:10,000 --> 00:09:11,920
secret charge of x via polynomial of the

254
00:09:11,920 --> 00:09:13,440
gritty

255
00:09:13,440 --> 00:09:15,040
now at the beginning of the protocol the

256
00:09:15,040 --> 00:09:17,600
parties hold shares of the two inputs

257
00:09:17,600 --> 00:09:21,040
and also shares of a random r using a

258
00:09:21,040 --> 00:09:23,360
polynomial degree d and also using a

259
00:09:23,360 --> 00:09:26,000
polynomial degree 2d

260
00:09:26,000 --> 00:09:28,399
first the part is locally compute shares

261
00:09:28,399 --> 00:09:31,920
of x times y minus r using a polynomial

262
00:09:31,920 --> 00:09:34,720
degree 2d by multiplying the shares of

263
00:09:34,720 --> 00:09:36,880
the inputs and subtracting from it their

264
00:09:36,880 --> 00:09:38,640
shares of r using a polynomial of degree

265
00:09:38,640 --> 00:09:39,519
2d

266
00:09:39,519 --> 00:09:41,600
and then they send their shells to party

267
00:09:41,600 --> 00:09:44,399
p1 who can reconstruct

268
00:09:44,399 --> 00:09:47,360
x times y minus r and then

269
00:09:47,360 --> 00:09:49,040
share it back to the parties using a

270
00:09:49,040 --> 00:09:51,200
polynomial of degree

271
00:09:51,200 --> 00:09:53,120
finally the parties can locally compute

272
00:09:53,120 --> 00:09:56,000
the shares of the output by adding

273
00:09:56,000 --> 00:09:58,560
the shares of r using a polynomial of

274
00:09:58,560 --> 00:10:01,120
the gradient

275
00:10:01,120 --> 00:10:03,360
to generate the collect analysis we can

276
00:10:03,360 --> 00:10:08,240
you can use prss without any interaction

277
00:10:08,399 --> 00:10:10,800
so how can we compute non-smd circuits

278
00:10:10,800 --> 00:10:12,880
using park signature

279
00:10:12,880 --> 00:10:14,640
so to illustrate our method let's

280
00:10:14,640 --> 00:10:16,800
consider the following example

281
00:10:16,800 --> 00:10:18,399
so let's assume that in each block we

282
00:10:18,399 --> 00:10:19,360
encode

283
00:10:19,360 --> 00:10:20,720
two secrets

284
00:10:20,720 --> 00:10:22,720
and the parties need to multiply a block

285
00:10:22,720 --> 00:10:25,760
with x1 and x2 with the block that holds

286
00:10:25,760 --> 00:10:27,519
y1 and y2

287
00:10:27,519 --> 00:10:29,680
so the output block should store in the

288
00:10:29,680 --> 00:10:32,240
first position x1 times y1 and in the

289
00:10:32,240 --> 00:10:34,320
second position x2

290
00:10:34,320 --> 00:10:35,760
times y2

291
00:10:35,760 --> 00:10:37,200
now let's assume that after this

292
00:10:37,200 --> 00:10:38,959
multiplication operation there are many

293
00:10:38,959 --> 00:10:40,399
addition gates

294
00:10:40,399 --> 00:10:42,000
and then when the part is reached the

295
00:10:42,000 --> 00:10:43,120
next

296
00:10:43,120 --> 00:10:45,200
layer of multiplication gates there is a

297
00:10:45,200 --> 00:10:47,440
block which in the first position should

298
00:10:47,440 --> 00:10:51,440
store a linear combination of z1 and z2

299
00:10:51,440 --> 00:10:53,680
so a protocol will work as follows

300
00:10:53,680 --> 00:10:55,760
if we give the parties shares of a

301
00:10:55,760 --> 00:10:57,600
random block that store

302
00:10:57,600 --> 00:11:00,480
a random l1 and r2 then the parties can

303
00:11:00,480 --> 00:11:02,160
perform the first

304
00:11:02,160 --> 00:11:04,560
step of the damgonessen protocol which

305
00:11:04,560 --> 00:11:08,399
will result with party p1 holding z1 r1

306
00:11:08,399 --> 00:11:10,800
and z2 r2

307
00:11:10,800 --> 00:11:12,880
now instead of proceeding to the second

308
00:11:12,880 --> 00:11:14,959
step of the diagnosis protocol we will

309
00:11:14,959 --> 00:11:16,959
first ask p1

310
00:11:16,959 --> 00:11:17,760
to

311
00:11:17,760 --> 00:11:19,920
locally compute all addition gates over

312
00:11:19,920 --> 00:11:22,079
the mast values and only when it reaches

313
00:11:22,079 --> 00:11:24,480
the next layer of multiplication gates

314
00:11:24,480 --> 00:11:27,120
to stick a share the masked blocks

315
00:11:27,120 --> 00:11:28,399
according to the structure of the

316
00:11:28,399 --> 00:11:29,519
circuit

317
00:11:29,519 --> 00:11:32,160
this means that p1 will secretary a

318
00:11:32,160 --> 00:11:34,240
block well in the first position there

319
00:11:34,240 --> 00:11:36,720
is a linear combination of z1 plus l1

320
00:11:36,720 --> 00:11:39,120
and z2 plus r2

321
00:11:39,120 --> 00:11:41,920
now if you further give the parties also

322
00:11:41,920 --> 00:11:44,079
shares of a random lock well in the

323
00:11:44,079 --> 00:11:45,440
first position

324
00:11:45,440 --> 00:11:47,440
the there is there is a linear

325
00:11:47,440 --> 00:11:49,120
combination the same linear combination

326
00:11:49,120 --> 00:11:51,760
of r1 and l2 then the parties will be

327
00:11:51,760 --> 00:11:54,399
able to unmask the block that they

328
00:11:54,399 --> 00:11:56,880
received from party p1

329
00:11:56,880 --> 00:11:59,040
and obtain the correct blocks that will

330
00:11:59,040 --> 00:12:01,120
enable them to proceed with the

331
00:12:01,120 --> 00:12:03,360
computation

332
00:12:03,360 --> 00:12:04,399
so

333
00:12:04,399 --> 00:12:06,480
so if we generalize

334
00:12:06,480 --> 00:12:08,560
our example what we obtain is the

335
00:12:08,560 --> 00:12:11,040
following so the part is first locally

336
00:12:11,040 --> 00:12:12,720
multiplying blocks

337
00:12:12,720 --> 00:12:15,760
of shared values mask the result and

338
00:12:15,760 --> 00:12:18,399
send it to p1 we can reconstruct the

339
00:12:18,399 --> 00:12:21,680
must outputs and then locally compute

340
00:12:21,680 --> 00:12:24,720
addition gates over the mass values

341
00:12:24,720 --> 00:12:27,440
then when parting p1 reaches the next

342
00:12:27,440 --> 00:12:29,440
layers of multiplication gates it can

343
00:12:29,440 --> 00:12:32,720
secretive block block of masked inputs

344
00:12:32,720 --> 00:12:35,760
which will be unmasked by the parties

345
00:12:35,760 --> 00:12:37,519
and what we need to support in this

346
00:12:37,519 --> 00:12:39,600
process is correlated randomness of the

347
00:12:39,600 --> 00:12:41,440
following form

348
00:12:41,440 --> 00:12:45,600
shares of a random log of l secrets

349
00:12:45,600 --> 00:12:48,000
using a polynomial of degree 2 d and

350
00:12:48,000 --> 00:12:49,839
shares of a random block using a

351
00:12:49,839 --> 00:12:52,399
polynomial of degree d or each secret

352
00:12:52,399 --> 00:12:53,760
satisfies

353
00:12:53,760 --> 00:12:55,760
linear constraints that are induced by

354
00:12:55,760 --> 00:12:57,760
the structure of the circuit

355
00:12:57,760 --> 00:12:59,440
in what we show in the paper that we can

356
00:12:59,440 --> 00:13:02,639
produce these correlations using plss

357
00:13:02,639 --> 00:13:05,200
therefore enabling computation over pak

358
00:13:05,200 --> 00:13:07,680
secret shelling without any extra

359
00:13:07,680 --> 00:13:09,680
overhead

360
00:13:09,680 --> 00:13:11,120
so now let's move to our second

361
00:13:11,120 --> 00:13:12,399
contribution

362
00:13:12,399 --> 00:13:14,639
which is new designs for reducing

363
00:13:14,639 --> 00:13:19,040
storage and computational costs of prss

364
00:13:19,040 --> 00:13:21,760
so first let's recall the classical prss

365
00:13:21,760 --> 00:13:24,959
construction of cdi

366
00:13:24,959 --> 00:13:27,360
so first for each subset of size t we

367
00:13:27,360 --> 00:13:30,560
give the complement subset acid

368
00:13:30,560 --> 00:13:32,800
and then to generate the next cell the

369
00:13:32,800 --> 00:13:34,480
random

370
00:13:34,480 --> 00:13:36,639
for each subset of size 3 we define the

371
00:13:36,639 --> 00:13:38,480
next polynomial

372
00:13:38,480 --> 00:13:40,399
where we give all the parties in the

373
00:13:40,399 --> 00:13:43,360
subset t the evaluation point 0 and an

374
00:13:43,360 --> 00:13:45,519
additional point is computed using the

375
00:13:45,519 --> 00:13:47,920
seed that is not known to the parties in

376
00:13:47,920 --> 00:13:48,880
t

377
00:13:48,880 --> 00:13:50,639
so what we get here is a polynomial of

378
00:13:50,639 --> 00:13:53,120
the greek t because it is defined by t

379
00:13:53,120 --> 00:13:55,040
plus one points

380
00:13:55,040 --> 00:13:56,800
and also a polynomial where each body

381
00:13:56,800 --> 00:13:59,199
can compute its evaluation point

382
00:13:59,199 --> 00:14:00,839
on this on the

383
00:14:00,839 --> 00:14:03,760
polynomial and the final the output

384
00:14:03,760 --> 00:14:06,800
share of h by dpi is the sum of all its

385
00:14:06,800 --> 00:14:09,760
evaluation points iterating over all the

386
00:14:09,760 --> 00:14:12,560
subsets of size t

387
00:14:12,560 --> 00:14:14,240
and what we get is the chameleons

388
00:14:14,240 --> 00:14:16,560
concerning of the sum of the secrets

389
00:14:16,560 --> 00:14:18,800
that are stored at the point 0 in all

390
00:14:18,800 --> 00:14:22,240
the polynomials that we defined

391
00:14:23,360 --> 00:14:24,160
so

392
00:14:24,160 --> 00:14:26,399
using the cdi construction

393
00:14:26,399 --> 00:14:28,839
for generating a degree polynomial

394
00:14:28,839 --> 00:14:32,480
requires storage of n choose t seeds and

395
00:14:32,480 --> 00:14:35,360
approximately n to c times d minus t

396
00:14:35,360 --> 00:14:37,760
plus 1 prf invocations

397
00:14:37,760 --> 00:14:38,959
where t is the number of corporate

398
00:14:38,959 --> 00:14:42,560
values and d is equal or larger than t

399
00:14:42,560 --> 00:14:44,800
this of course limits the practicality

400
00:14:44,800 --> 00:14:46,639
of the construction for only small

401
00:14:46,639 --> 00:14:49,120
number of parties what we show it is

402
00:14:49,120 --> 00:14:50,800
that if d

403
00:14:50,800 --> 00:14:52,880
is strictly larger than t

404
00:14:52,880 --> 00:14:55,680
then we can use this gap to achieve

405
00:14:55,680 --> 00:14:58,079
drastic improvements both for the

406
00:14:58,079 --> 00:15:00,560
storage and the amount of prf

407
00:15:00,560 --> 00:15:03,279
invocations

408
00:15:03,600 --> 00:15:05,120
the main technical tool for our

409
00:15:05,120 --> 00:15:08,000
construction is covering designs

410
00:15:08,000 --> 00:15:10,399
this problem is defined as follows

411
00:15:10,399 --> 00:15:13,440
so given integers n m and t we say that

412
00:15:13,440 --> 00:15:16,880
a collection of sets s 1 to s k is a nmt

413
00:15:16,880 --> 00:15:19,199
cover if it satisfies the following

414
00:15:19,199 --> 00:15:20,320
properties

415
00:15:20,320 --> 00:15:23,199
so each sj must be of size m and must be

416
00:15:23,199 --> 00:15:24,320
a subset

417
00:15:24,320 --> 00:15:26,959
of the set one to n

418
00:15:26,959 --> 00:15:28,480
and each set

419
00:15:28,480 --> 00:15:31,040
of one each subset of one to n of size t

420
00:15:31,040 --> 00:15:34,480
must be covered by at least one sj

421
00:15:34,480 --> 00:15:36,560
so in the right side we see an example

422
00:15:36,560 --> 00:15:39,120
of six two one cover

423
00:15:39,120 --> 00:15:41,040
because we have six items

424
00:15:41,040 --> 00:15:43,199
and the size of each set in the cover is

425
00:15:43,199 --> 00:15:46,399
two and each single item is covered by

426
00:15:46,399 --> 00:15:49,600
at least one set

427
00:15:49,600 --> 00:15:51,279
now it's almost straightforward to see

428
00:15:51,279 --> 00:15:53,440
that covering designs are necessary to

429
00:15:53,440 --> 00:15:56,639
achieve general prss in particular if we

430
00:15:56,639 --> 00:16:00,160
have a tcq prc solution for generating

431
00:16:00,160 --> 00:16:03,040
the 3d polynomials then we can obtain an

432
00:16:03,040 --> 00:16:04,959
ndt cover

433
00:16:04,959 --> 00:16:06,959
to see this consider a solution for this

434
00:16:06,959 --> 00:16:11,920
queue plcs which consists of k subsets

435
00:16:11,920 --> 00:16:15,040
each set sj includes parties who receive

436
00:16:15,040 --> 00:16:16,480
clj

437
00:16:16,480 --> 00:16:19,680
now each set must be of size n minus t

438
00:16:19,680 --> 00:16:22,480
in order to generate a polynomial of the

439
00:16:22,480 --> 00:16:23,600
gritty

440
00:16:23,600 --> 00:16:25,839
and the t security property guarantees

441
00:16:25,839 --> 00:16:28,800
that each set of t parties must miss at

442
00:16:28,800 --> 00:16:31,440
least one scene which means that there

443
00:16:31,440 --> 00:16:34,480
exists a set sj such that intersection

444
00:16:34,480 --> 00:16:38,880
between hd and that subset is empty

445
00:16:38,880 --> 00:16:42,480
now in order to obtain an ndt cover it

446
00:16:42,480 --> 00:16:44,959
suffices to simply take the complement

447
00:16:44,959 --> 00:16:46,320
subsets

448
00:16:46,320 --> 00:16:49,360
of s1 to sk

449
00:16:49,360 --> 00:16:50,639
now it's

450
00:16:50,639 --> 00:16:54,720
the size of each a complement set is d

451
00:16:54,720 --> 00:16:56,800
and we are guaranteed that its set of

452
00:16:56,800 --> 00:16:59,600
department is covered by at least one

453
00:16:59,600 --> 00:17:02,639
complement subset so what we get is an

454
00:17:02,639 --> 00:17:05,839
ndt cover

455
00:17:06,480 --> 00:17:08,319
however the opposite direction is

456
00:17:08,319 --> 00:17:09,520
natural

457
00:17:09,520 --> 00:17:12,400
and if we take an ndt cover this does

458
00:17:12,400 --> 00:17:15,439
not imply a tcq plss solution for

459
00:17:15,439 --> 00:17:18,400
generating degree polynomials

460
00:17:18,400 --> 00:17:20,000
to see this consider the following

461
00:17:20,000 --> 00:17:22,640
example here we have a four to one

462
00:17:22,640 --> 00:17:25,679
carbon that consists of two sets s1 and

463
00:17:25,679 --> 00:17:27,039
s2

464
00:17:27,039 --> 00:17:30,000
so in order to construct a prss

465
00:17:30,000 --> 00:17:32,799
solution we would like to

466
00:17:32,799 --> 00:17:35,360
define two polynomials that corresponds

467
00:17:35,360 --> 00:17:37,120
to the sets s1 and s2 the first

468
00:17:37,120 --> 00:17:39,840
polynomial corresponds to the set s1 and

469
00:17:39,840 --> 00:17:41,840
here we will give the parties in the set

470
00:17:41,840 --> 00:17:44,960
s1 the evaluation point 0 and an

471
00:17:44,960 --> 00:17:46,799
additional point will be computed using

472
00:17:46,799 --> 00:17:48,640
a c that will be given to the parties

473
00:17:48,640 --> 00:17:50,720
that are not in s1

474
00:17:50,720 --> 00:17:54,400
similarly the polynomial fs2 will be

475
00:17:54,400 --> 00:17:55,840
defined

476
00:17:55,840 --> 00:17:59,039
using the set s2 namely the parties in

477
00:17:59,039 --> 00:18:00,799
the set s2 will be given the evaluation

478
00:18:00,799 --> 00:18:02,000
point 0

479
00:18:02,000 --> 00:18:04,000
and the an additional point will be

480
00:18:04,000 --> 00:18:06,000
computed using a c that will be given to

481
00:18:06,000 --> 00:18:08,080
the parties that are not in s2

482
00:18:08,080 --> 00:18:10,400
then the final polynomial will be f1

483
00:18:10,400 --> 00:18:12,960
plus f2 which is indeed a 2 degree

484
00:18:12,960 --> 00:18:15,280
polynomial because it is defined by

485
00:18:15,280 --> 00:18:17,280
three points

486
00:18:17,280 --> 00:18:19,600
now to see that this is not a tcq

487
00:18:19,600 --> 00:18:20,720
solution

488
00:18:20,720 --> 00:18:24,000
assume that p1 is the coordinate party

489
00:18:24,000 --> 00:18:26,799
now to learn the polynomial f p1 only

490
00:18:26,799 --> 00:18:30,559
misses one piece of information only k1

491
00:18:30,559 --> 00:18:33,679
however if f was a truly random two

492
00:18:33,679 --> 00:18:36,559
degree polynomial p1 should have missed

493
00:18:36,559 --> 00:18:38,559
two points on the polynomials or in

494
00:18:38,559 --> 00:18:40,080
other words it should have missed two

495
00:18:40,080 --> 00:18:41,600
pieces of information

496
00:18:41,600 --> 00:18:43,440
this means that f is not certain or

497
00:18:43,440 --> 00:18:46,320
random therefore the construction is not

498
00:18:46,320 --> 00:18:48,960
t secure

499
00:18:49,760 --> 00:18:52,160
what we can prove and we indeed prove in

500
00:18:52,160 --> 00:18:55,120
the paper is that given an n d plus one

501
00:18:55,120 --> 00:18:57,039
t cover of size k

502
00:18:57,039 --> 00:19:00,080
we can construct a tcq plss solution for

503
00:19:00,080 --> 00:19:02,400
generating the gritty polynomials where

504
00:19:02,400 --> 00:19:04,799
the total number of seeds is k times d

505
00:19:04,799 --> 00:19:07,760
plus 1 and the total number of prf calls

506
00:19:07,760 --> 00:19:11,200
is k times d plus 1 times n minus t

507
00:19:11,200 --> 00:19:13,200
the main idea behind our construction is

508
00:19:13,200 --> 00:19:15,600
that we take each set sj in the cover

509
00:19:15,600 --> 00:19:18,799
and generate d plus 1 sets of size t

510
00:19:18,799 --> 00:19:19,760
from it

511
00:19:19,760 --> 00:19:22,480
but each time by each time removing

512
00:19:22,480 --> 00:19:25,120
one party from the set sj

513
00:19:25,120 --> 00:19:27,120
and then we use all the sets that we

514
00:19:27,120 --> 00:19:30,240
obtain k times t plus one sets to

515
00:19:30,240 --> 00:19:32,559
generate the prss solution and the

516
00:19:32,559 --> 00:19:34,320
security argument

517
00:19:34,320 --> 00:19:36,960
says that given a set of coordinate

518
00:19:36,960 --> 00:19:39,919
parties of size t there must be a set sj

519
00:19:39,919 --> 00:19:41,200
that covers it

520
00:19:41,200 --> 00:19:44,640
but from this set sj we generated d plus

521
00:19:44,640 --> 00:19:46,080
one sets

522
00:19:46,080 --> 00:19:49,280
from which d plus one minus minus t sets

523
00:19:49,280 --> 00:19:51,520
does include t

524
00:19:51,520 --> 00:19:53,520
which means that will be d plus one

525
00:19:53,520 --> 00:19:56,240
minus these seeds that are unknown to

526
00:19:56,240 --> 00:19:58,559
the partition t which is exactly what we

527
00:19:58,559 --> 00:20:02,720
need in order to prove security

528
00:20:03,039 --> 00:20:05,360
so in this table we present a comparison

529
00:20:05,360 --> 00:20:07,280
between our construction and the cdi

530
00:20:07,280 --> 00:20:09,760
construction for multiple data points

531
00:20:09,760 --> 00:20:12,159
so here for different n d

532
00:20:12,159 --> 00:20:13,679
t parameters

533
00:20:13,679 --> 00:20:16,000
we have obtained the best

534
00:20:16,000 --> 00:20:19,840
n d plus one t cover size in using it we

535
00:20:19,840 --> 00:20:20,960
computed

536
00:20:20,960 --> 00:20:23,200
the number of seats per party in our

537
00:20:23,200 --> 00:20:24,480
construction

538
00:20:24,480 --> 00:20:26,080
while the number of seats per party in

539
00:20:26,080 --> 00:20:28,000
the cdi construction is simply n minus

540
00:20:28,000 --> 00:20:29,760
one choose t

541
00:20:29,760 --> 00:20:32,240
as can be seen from this table we get a

542
00:20:32,240 --> 00:20:35,600
dramatic improvement over cdi as the gap

543
00:20:35,600 --> 00:20:37,120
between d and t

544
00:20:37,120 --> 00:20:39,520
grows

545
00:20:39,679 --> 00:20:42,000
in the paper we further extend this

546
00:20:42,000 --> 00:20:45,360
result and show that given an nd plus 1d

547
00:20:45,360 --> 00:20:48,640
cover we can use it to construct a pls

548
00:20:48,640 --> 00:20:51,120
solution for generating double chemical

549
00:20:51,120 --> 00:20:52,559
packed sharings

550
00:20:52,559 --> 00:20:55,520
which mean that we can generate block of

551
00:20:55,520 --> 00:20:57,840
l random secrets that are shared using a

552
00:20:57,840 --> 00:21:00,320
polynomial of degree d and a polynomial

553
00:21:00,320 --> 00:21:02,640
degree 2d which is exactly what we need

554
00:21:02,640 --> 00:21:04,240
in order to evaluate

555
00:21:04,240 --> 00:21:06,000
samd circuits

556
00:21:06,000 --> 00:21:08,559
in addition given an n

557
00:21:08,559 --> 00:21:11,679
d plus 1 minus lt couples we can use it

558
00:21:11,679 --> 00:21:15,360
to generate as prss solution for

559
00:21:15,360 --> 00:21:18,159
packed sharings with linear constraints

560
00:21:18,159 --> 00:21:20,320
meaning that we can generate a

561
00:21:20,320 --> 00:21:22,960
non-interactively block of random

562
00:21:22,960 --> 00:21:24,799
secrets l random circuits that are

563
00:21:24,799 --> 00:21:27,120
shared using a polynomial degree 2d

564
00:21:27,120 --> 00:21:29,520
a block of l circuits that are shared

565
00:21:29,520 --> 00:21:31,520
using the polynomial of the gradient and

566
00:21:31,520 --> 00:21:33,120
this secret is a fixed linear

567
00:21:33,120 --> 00:21:35,520
combination of the thickest though that

568
00:21:35,520 --> 00:21:37,760
were shared using a polynomial of degree

569
00:21:37,760 --> 00:21:38,720
2d

570
00:21:38,720 --> 00:21:40,960
which as we have seen earlier in the

571
00:21:40,960 --> 00:21:43,120
talk is exactly what we need in order to

572
00:21:43,120 --> 00:21:48,239
support evaluation of non-samd circuits

573
00:21:48,559 --> 00:21:50,720
so now let's move to our third and last

574
00:21:50,720 --> 00:21:53,200
contribution which is cheap struggle

575
00:21:53,200 --> 00:21:55,520
resilience

576
00:21:55,520 --> 00:21:57,520
so consider a network which includes two

577
00:21:57,520 --> 00:21:58,640
rounds

578
00:21:58,640 --> 00:22:00,720
first p1 sends his

579
00:22:00,720 --> 00:22:02,720
second round messages in the damn

580
00:22:02,720 --> 00:22:04,799
grenadian protocol for the current layer

581
00:22:04,799 --> 00:22:07,200
of multiplication gates and then p1

582
00:22:07,200 --> 00:22:08,320
receives

583
00:22:08,320 --> 00:22:10,480
the first run messages in the

584
00:22:10,480 --> 00:22:12,400
demognation protocol for the next layer

585
00:22:12,400 --> 00:22:14,320
of multiplication gates

586
00:22:14,320 --> 00:22:16,880
since x times y minus r is shared using

587
00:22:16,880 --> 00:22:18,880
a polynomial of degree 2d

588
00:22:18,880 --> 00:22:20,799
this means that p1 only needs 2d

589
00:22:20,799 --> 00:22:22,159
messages to arrive in order to

590
00:22:22,159 --> 00:22:25,280
reconstruct x times y minus r

591
00:22:25,280 --> 00:22:26,799
and therefore even

592
00:22:26,799 --> 00:22:30,400
if n minus 2d messages are dropped the

593
00:22:30,400 --> 00:22:32,640
protocol can still proceed

594
00:22:32,640 --> 00:22:35,760
in this case we say that a protocol has

595
00:22:35,760 --> 00:22:39,280
n minus 2d struggle resilience

596
00:22:39,280 --> 00:22:41,039
in the paper we give also a formal

597
00:22:41,039 --> 00:22:43,039
definition for structural resilience

598
00:22:43,039 --> 00:22:44,880
where we allow the adversary to choose

599
00:22:44,880 --> 00:22:47,120
adaptively the messages to draft in each

600
00:22:47,120 --> 00:22:48,000
epoch

601
00:22:48,000 --> 00:22:49,760
and also stress that secure that

602
00:22:49,760 --> 00:22:52,000
security should hold not only the

603
00:22:52,000 --> 00:22:53,679
presence of an adversary controlling

604
00:22:53,679 --> 00:22:56,080
these parties but also if some

605
00:22:56,080 --> 00:22:59,039
merchandise are dropped in each epoch

606
00:22:59,039 --> 00:23:00,960
finally it is worth noting that the

607
00:23:00,960 --> 00:23:02,640
feasibility of struggling resilience

608
00:23:02,640 --> 00:23:05,520
follows from standard robust npc

609
00:23:05,520 --> 00:23:08,240
protocols but there it comes with a

610
00:23:08,240 --> 00:23:11,039
extra significant overhead herewith we

611
00:23:11,039 --> 00:23:13,120
are interested in struggling resilience

612
00:23:13,120 --> 00:23:16,960
mpc and not for robustness without any

613
00:23:16,960 --> 00:23:19,280
additional overhead

614
00:23:19,280 --> 00:23:21,280
while starting resilience is

615
00:23:21,280 --> 00:23:23,520
straightforward to achieve with similar

616
00:23:23,520 --> 00:23:25,840
security it is much more challenging to

617
00:23:25,840 --> 00:23:27,760
achieve with malicious security in

618
00:23:27,760 --> 00:23:30,240
particular if you allow p1 to use only

619
00:23:30,240 --> 00:23:31,280
the first

620
00:23:31,280 --> 00:23:33,600
2d messages that it receives

621
00:23:33,600 --> 00:23:36,000
this will completely break the privacy

622
00:23:36,000 --> 00:23:38,640
of the protocol this is due to an attack

623
00:23:38,640 --> 00:23:40,960
by goyaletal which we call the double

624
00:23:40,960 --> 00:23:43,440
dipping attack and is carried out over

625
00:23:43,440 --> 00:23:45,520
two layers of the circuit

626
00:23:45,520 --> 00:23:48,559
so assume we want to multiply x and y

627
00:23:48,559 --> 00:23:51,039
and then multiply the result with z

628
00:23:51,039 --> 00:23:54,320
so malicious p 1 can work as follows

629
00:23:54,320 --> 00:23:57,360
so when multiplying x times y

630
00:23:57,360 --> 00:23:59,919
party p1 will send the correct second

631
00:23:59,919 --> 00:24:02,799
round message to all the parties except

632
00:24:02,799 --> 00:24:06,240
for one honest part is say pm

633
00:24:06,240 --> 00:24:09,840
then when multiplying x times y with z

634
00:24:09,840 --> 00:24:13,360
party p1 can compute the message that pn

635
00:24:13,360 --> 00:24:15,279
should have sent him

636
00:24:15,279 --> 00:24:17,760
using the 2d messages that he first

637
00:24:17,760 --> 00:24:20,159
receives from the other parties this is

638
00:24:20,159 --> 00:24:21,760
due to the fact that all the messages

639
00:24:21,760 --> 00:24:24,400
are point on a polynomial of degree to d

640
00:24:24,400 --> 00:24:27,200
and so p1 can compute all the

641
00:24:27,200 --> 00:24:30,080
other points on the polynomial using the

642
00:24:30,080 --> 00:24:32,720
points the first 2d points it receives

643
00:24:32,720 --> 00:24:35,279
and its own point

644
00:24:35,279 --> 00:24:38,480
then p1 can use the difference between

645
00:24:38,480 --> 00:24:41,679
the message that pn should have sent

646
00:24:41,679 --> 00:24:44,159
and the message that pn actually send in

647
00:24:44,159 --> 00:24:48,240
order to compute p and shell of z

648
00:24:48,240 --> 00:24:50,240
which of course is completely forbidden

649
00:24:50,240 --> 00:24:54,720
and breaks the privacy of the protocol

650
00:24:55,039 --> 00:24:56,720
the attack is caused by the fact that

651
00:24:56,720 --> 00:24:58,880
all the masks lie on a polynomial of

652
00:24:58,880 --> 00:25:02,240
degree 2d and therefore once p1 receives

653
00:25:02,240 --> 00:25:06,960
2d shares you can compute the n minus 2d

654
00:25:06,960 --> 00:25:09,919
shares of the remaining parties

655
00:25:09,919 --> 00:25:11,679
previous solutions to this attack

656
00:25:11,679 --> 00:25:13,600
include using a masking polynomial of

657
00:25:13,600 --> 00:25:15,679
degree n minus one or adding a

658
00:25:15,679 --> 00:25:18,240
consistency check between each two

659
00:25:18,240 --> 00:25:19,760
layers of the circuit

660
00:25:19,760 --> 00:25:21,840
whether the first solution leaves no

661
00:25:21,840 --> 00:25:23,360
room for starters

662
00:25:23,360 --> 00:25:25,840
while the second solution results in

663
00:25:25,840 --> 00:25:28,480
increasing the latency we present a

664
00:25:28,480 --> 00:25:31,039
solution where we still can use only 2d

665
00:25:31,039 --> 00:25:33,039
messages and therefore struggling

666
00:25:33,039 --> 00:25:35,200
resilience is maintained and also

667
00:25:35,200 --> 00:25:36,320
without

668
00:25:36,320 --> 00:25:39,840
increasing the latency of the execution

669
00:25:39,840 --> 00:25:42,240
in our solution each body chooses its

670
00:25:42,240 --> 00:25:44,480
mask independently

671
00:25:44,480 --> 00:25:46,080
and then the masking polynomial is

672
00:25:46,080 --> 00:25:48,640
determined by the first 2d messages p1

673
00:25:48,640 --> 00:25:50,240
receives

674
00:25:50,240 --> 00:25:51,919
this means in particular that all the

675
00:25:51,919 --> 00:25:54,159
messages sent by the other parties are

676
00:25:54,159 --> 00:25:56,960
now independent and cannot be predicted

677
00:25:56,960 --> 00:25:58,640
which is what we need in order to

678
00:25:58,640 --> 00:26:01,039
prevent the double dipping attack

679
00:26:01,039 --> 00:26:03,200
now this raises several challenges when

680
00:26:03,200 --> 00:26:05,520
we want to unmask the shares in the next

681
00:26:05,520 --> 00:26:07,200
multiplication layer

682
00:26:07,200 --> 00:26:09,679
and for this to succeed we need to

683
00:26:09,679 --> 00:26:11,200
additional things

684
00:26:11,200 --> 00:26:13,840
first we need p1 to send the set of 2d

685
00:26:13,840 --> 00:26:16,159
parties that we'll use to interpolate

686
00:26:16,159 --> 00:26:18,159
meaning the set of 2d parties for which

687
00:26:18,159 --> 00:26:20,559
the messages arrived first

688
00:26:20,559 --> 00:26:22,960
and second we need to tweak a little bit

689
00:26:22,960 --> 00:26:24,640
decorating rms

690
00:26:24,640 --> 00:26:26,320
and in the paper we showed that we can

691
00:26:26,320 --> 00:26:28,640
use our prss techniques

692
00:26:28,640 --> 00:26:30,480
in a black box way to support this

693
00:26:30,480 --> 00:26:31,919
without of course any additional

694
00:26:31,919 --> 00:26:33,120
communication

695
00:26:33,120 --> 00:26:34,880
however this requires increasing the

696
00:26:34,880 --> 00:26:36,720
amount of correlated randomness by a

697
00:26:36,720 --> 00:26:39,279
factor of n

698
00:26:39,279 --> 00:26:41,120
so with our solution we are able to

699
00:26:41,120 --> 00:26:43,840
compute the circuit with n minus 2d

700
00:26:43,840 --> 00:26:47,360
struggles resilience and with privacy

701
00:26:47,360 --> 00:26:49,600
however this is not enough in order to

702
00:26:49,600 --> 00:26:51,520
achieve malicious security we also need

703
00:26:51,520 --> 00:26:55,039
to show how we can achieve correctness

704
00:26:55,039 --> 00:26:56,960
in our protocol we use distributed

705
00:26:56,960 --> 00:26:59,279
zero-knowledge proofs due to monetary to

706
00:26:59,279 --> 00:27:00,799
verify the correctness of all

707
00:27:00,799 --> 00:27:03,120
multiplications with sublinear

708
00:27:03,120 --> 00:27:04,480
communication in the size of the

709
00:27:04,480 --> 00:27:07,039
computed circuit and constant number

710
00:27:07,039 --> 00:27:08,400
rounds

711
00:27:08,400 --> 00:27:11,039
now using this tool in our setting

712
00:27:11,039 --> 00:27:13,039
raises several challenges for example

713
00:27:13,039 --> 00:27:16,000
since we use park secret chain

714
00:27:16,000 --> 00:27:17,840
now all the secrets are stored in

715
00:27:17,840 --> 00:27:20,159
different positions of the blocks and we

716
00:27:20,159 --> 00:27:22,640
need to show how we can perform in the

717
00:27:22,640 --> 00:27:24,720
verification protocol slot friendly

718
00:27:24,720 --> 00:27:27,200
operations meaning operations that are

719
00:27:27,200 --> 00:27:28,240
over

720
00:27:28,240 --> 00:27:30,399
that are over secrets that are stored in

721
00:27:30,399 --> 00:27:32,159
the same position

722
00:27:32,159 --> 00:27:34,880
of the block another

723
00:27:34,880 --> 00:27:36,720
challenge is that the state may be

724
00:27:36,720 --> 00:27:37,919
partial

725
00:27:37,919 --> 00:27:39,679
for some parties who struggle in the

726
00:27:39,679 --> 00:27:41,520
circuit evaluation

727
00:27:41,520 --> 00:27:43,279
to solve this we will need to run the

728
00:27:43,279 --> 00:27:45,840
verification protocol several times

729
00:27:45,840 --> 00:27:47,679
number of times that is abundant by the

730
00:27:47,679 --> 00:27:49,120
circuit's depth

731
00:27:49,120 --> 00:27:51,520
nevertheless we show that the overall

732
00:27:51,520 --> 00:27:54,480
cost remains subliminal for all natural

733
00:27:54,480 --> 00:27:56,720
circuits

734
00:27:56,720 --> 00:27:59,279
so finally we examined the communication

735
00:27:59,279 --> 00:28:01,120
cost of our protocol for various

736
00:28:01,120 --> 00:28:02,399
parameters

737
00:28:02,399 --> 00:28:04,080
so in this table we can see for

738
00:28:04,080 --> 00:28:06,080
different number of corrupted bodies for

739
00:28:06,080 --> 00:28:08,559
different number of structures and for

740
00:28:08,559 --> 00:28:10,880
different packing parameters

741
00:28:10,880 --> 00:28:12,640
we present the number of parties

742
00:28:12,640 --> 00:28:13,840
computed as

743
00:28:13,840 --> 00:28:16,640
2t plus 2l minus 1 plus tau

744
00:28:16,640 --> 00:28:19,279
the total number of feed elements sent

745
00:28:19,279 --> 00:28:21,840
per multiplication gate in our protocol

746
00:28:21,840 --> 00:28:23,360
and the ratio between the communication

747
00:28:23,360 --> 00:28:25,039
cost of our protocol and the

748
00:28:25,039 --> 00:28:28,000
communication cost of the best protocol

749
00:28:28,000 --> 00:28:30,080
where we leave no room for standards and

750
00:28:30,080 --> 00:28:33,360
well we don't use x square sharing which

751
00:28:33,360 --> 00:28:35,279
means that the number of parties is much

752
00:28:35,279 --> 00:28:38,399
smaller as can be seen from the table

753
00:28:38,399 --> 00:28:40,880
when we increase the packing parameter

754
00:28:40,880 --> 00:28:42,640
and the number of corruptions we are

755
00:28:42,640 --> 00:28:44,559
able to beat

756
00:28:44,559 --> 00:28:47,279
the previous best protocol while still

757
00:28:47,279 --> 00:28:50,720
leaving room for struggles

758
00:28:51,039 --> 00:28:53,120
so to summarize our contribution our

759
00:28:53,120 --> 00:28:55,520
first contribution is pss for particle

760
00:28:55,520 --> 00:28:57,520
sharing which allows us to reduce

761
00:28:57,520 --> 00:29:00,240
communication and computation when

762
00:29:00,240 --> 00:29:02,720
computing non-smd circuits

763
00:29:02,720 --> 00:29:04,720
a second contribution is new design for

764
00:29:04,720 --> 00:29:06,720
pss which allows us to reduce

765
00:29:06,720 --> 00:29:10,000
computation and storage and the final

766
00:29:10,000 --> 00:29:12,320
contribution is total resilience which

767
00:29:12,320 --> 00:29:14,720
allows us to reduce the latency

768
00:29:14,720 --> 00:29:16,480
of the protocol

769
00:29:16,480 --> 00:29:18,320
so with this i will end my talk thank

770
00:29:18,320 --> 00:29:22,279
you very much for listening

