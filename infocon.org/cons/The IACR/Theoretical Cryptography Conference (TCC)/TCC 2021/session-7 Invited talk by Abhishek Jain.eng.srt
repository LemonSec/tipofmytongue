1
00:00:03,280 --> 00:00:06,000
you're ready to go

2
00:00:06,560 --> 00:00:08,959
um

3
00:00:10,110 --> 00:00:12,639
[Music]

4
00:00:12,639 --> 00:00:16,519
which computer is that one

5
00:00:20,960 --> 00:00:23,519
you're wrong

6
00:00:23,519 --> 00:00:26,080
we know we're trying to fix in sweden's

7
00:00:26,080 --> 00:00:29,080
life

8
00:00:38,160 --> 00:00:40,480
okay so um it's my pleasure to introduce

9
00:00:40,480 --> 00:00:43,120
our invited speaker abhishek jain

10
00:00:43,120 --> 00:00:45,680
i'll be the quick thing about him he uh

11
00:00:45,680 --> 00:00:48,160
graduated from ucla supervised by rafael

12
00:00:48,160 --> 00:00:50,640
strassky and amitsa hai uh post doc at

13
00:00:50,640 --> 00:00:53,600
mit and now he's been a faculty at jhu

14
00:00:53,600 --> 00:00:56,239
for several years now um we recently got

15
00:00:56,239 --> 00:00:57,199
tenure

16
00:00:57,199 --> 00:00:59,280
and more importantly now is kind of the

17
00:00:59,280 --> 00:01:01,680
point of why we invited abby shake and

18
00:01:01,680 --> 00:01:03,680
uh you know i think in general one very

19
00:01:03,680 --> 00:01:05,519
good way to use these invited talks is

20
00:01:05,519 --> 00:01:06,240
to

21
00:01:06,240 --> 00:01:08,159
um grab people doing really special

22
00:01:08,159 --> 00:01:10,560
research at the hopefully at the late

23
00:01:10,560 --> 00:01:12,479
just kind of like a late early stage

24
00:01:12,479 --> 00:01:13,280
your

25
00:01:13,280 --> 00:01:16,400
early mid-career um researcher and if

26
00:01:16,400 --> 00:01:17,920
you looked at abhishek recently he's

27
00:01:17,920 --> 00:01:19,840
doing really well um first we could do

28
00:01:19,840 --> 00:01:21,600
kind of superficial bill ads and you see

29
00:01:21,600 --> 00:01:23,360
like a bunch of papers at eurocrypt

30
00:01:23,360 --> 00:01:26,640
crypto stuff like that um also advising

31
00:01:26,640 --> 00:01:28,640
students who are you know doing really

32
00:01:28,640 --> 00:01:29,840
well also

33
00:01:29,840 --> 00:01:31,360
uh but then if we take a little bit of a

34
00:01:31,360 --> 00:01:32,240
deeper

35
00:01:32,240 --> 00:01:34,000
look into it uh for example i think the

36
00:01:34,000 --> 00:01:35,680
work he might cover today

37
00:01:35,680 --> 00:01:38,000
uh he recently had a solution to this

38
00:01:38,000 --> 00:01:40,479
open problem of uh getting

39
00:01:40,479 --> 00:01:42,000
non-interactive zero knowledge proofs

40
00:01:42,000 --> 00:01:44,079
from the decisional difficult problem

41
00:01:44,079 --> 00:01:46,159
and this was a really core open problem

42
00:01:46,159 --> 00:01:48,000
i know yeah we see we are solving open

43
00:01:48,000 --> 00:01:49,840
problems all the time but but this is an

44
00:01:49,840 --> 00:01:51,119
open problem that if you just say it

45
00:01:51,119 --> 00:01:53,680
people know what it is and uh you know

46
00:01:53,680 --> 00:01:55,520
have thought about it before and when

47
00:01:55,520 --> 00:01:56,880
you kind of look at the techniques you

48
00:01:56,880 --> 00:01:58,079
see this there's this interactive

49
00:01:58,079 --> 00:02:00,159
protocol um there's a bunch of well

50
00:02:00,159 --> 00:02:02,000
he'll tell you better himself but a

51
00:02:02,000 --> 00:02:03,920
bunch of guessing and all this and you

52
00:02:03,920 --> 00:02:05,759
know you can understand it but what's uh

53
00:02:05,759 --> 00:02:07,040
kind of hard to understand is like how

54
00:02:07,040 --> 00:02:10,239
he came up with it so um maybe we'll uh

55
00:02:10,239 --> 00:02:12,879
get some insights into a pretty amazing

56
00:02:12,879 --> 00:02:14,000
result there

57
00:02:14,000 --> 00:02:17,040
so let's thank you

58
00:02:21,120 --> 00:02:22,560
all right thanks brent

59
00:02:22,560 --> 00:02:24,560
um

60
00:02:24,560 --> 00:02:26,800
okay so yeah so today's talk will be

61
00:02:26,800 --> 00:02:28,720
about non-interactive proofs

62
00:02:28,720 --> 00:02:31,040
and i'm borrowing the subtitles from uh

63
00:02:31,040 --> 00:02:32,319
you all

64
00:02:32,319 --> 00:02:35,599
from from a couple of years ago talks um

65
00:02:35,599 --> 00:02:36,959
okay so

66
00:02:36,959 --> 00:02:38,560
broadly speaking

67
00:02:38,560 --> 00:02:40,160
in this talk i want to talk about

68
00:02:40,160 --> 00:02:42,560
non-interactive proofs uh where there is

69
00:02:42,560 --> 00:02:44,720
a prover and there is a verifier and the

70
00:02:44,720 --> 00:02:47,200
approval wants to prove some statement x

71
00:02:47,200 --> 00:02:49,440
in the language l to the verifier

72
00:02:49,440 --> 00:02:51,440
and the prover wants to accomplish this

73
00:02:51,440 --> 00:02:53,440
by sending a single message to the

74
00:02:53,440 --> 00:02:55,840
verifier and the verifier upon receiving

75
00:02:55,840 --> 00:02:58,640
this message either accepts or rejects

76
00:02:58,640 --> 00:03:00,080
the proof

77
00:03:00,080 --> 00:03:01,760
so for these groups to be useful we

78
00:03:01,760 --> 00:03:03,040
typically require at least two

79
00:03:03,040 --> 00:03:05,440
properties and so the first is uh

80
00:03:05,440 --> 00:03:07,920
completeness which says that if the

81
00:03:07,920 --> 00:03:09,440
proof is generated honestly and the

82
00:03:09,440 --> 00:03:12,239
verifier is honest uh then

83
00:03:12,239 --> 00:03:14,080
proofs for ex for true statements will

84
00:03:14,080 --> 00:03:15,440
be accepted

85
00:03:15,440 --> 00:03:17,280
and the second property is soundness

86
00:03:17,280 --> 00:03:19,840
which roughly says that

87
00:03:19,840 --> 00:03:21,519
if the statement is false then no matter

88
00:03:21,519 --> 00:03:23,120
what the cheating prover does the

89
00:03:23,120 --> 00:03:25,840
verifier will reject

90
00:03:25,840 --> 00:03:27,680
so even with these two properties

91
00:03:27,680 --> 00:03:29,360
non-interactive groups on their own are

92
00:03:29,360 --> 00:03:31,280
kind of easy to achieve if at least we

93
00:03:31,280 --> 00:03:32,959
talk about np languages because the

94
00:03:32,959 --> 00:03:35,120
proof could simply be the witness

95
00:03:35,120 --> 00:03:36,799
so typically we associate some

96
00:03:36,799 --> 00:03:38,000
additional properties with

97
00:03:38,000 --> 00:03:40,319
non-interactive groups and

98
00:03:40,319 --> 00:03:42,560
the two properties that i um i'm going

99
00:03:42,560 --> 00:03:44,400
to focus on in this talk are the

100
00:03:44,400 --> 00:03:45,360
following

101
00:03:45,360 --> 00:03:47,840
uh so the first one is zero knowledge

102
00:03:47,840 --> 00:03:50,159
property uh introduced by goldwater

103
00:03:50,159 --> 00:03:52,560
mikhail and rakhoff in the 80s uh in the

104
00:03:52,560 --> 00:03:53,599
interactive setting and then

105
00:03:53,599 --> 00:03:54,879
subsequently ported to the

106
00:03:54,879 --> 00:03:57,280
non-interactive setting um

107
00:03:57,280 --> 00:03:59,519
which roughly says that the proof does

108
00:03:59,519 --> 00:04:01,599
not reveal anything beyond the validity

109
00:04:01,599 --> 00:04:03,120
of the statement

110
00:04:03,120 --> 00:04:04,799
and this is going to be the primary

111
00:04:04,799 --> 00:04:08,080
focus of this talk but i will also talk

112
00:04:08,080 --> 00:04:09,280
in some part

113
00:04:09,280 --> 00:04:10,959
about a second property which is

114
00:04:10,959 --> 00:04:13,599
succinctness or in short referred to as

115
00:04:13,599 --> 00:04:15,920
stocks which is succinct non-interactive

116
00:04:15,920 --> 00:04:17,279
arguments

117
00:04:17,279 --> 00:04:18,880
this was introduced in the interactive

118
00:04:18,880 --> 00:04:21,279
setting by killian and then uh ported to

119
00:04:21,279 --> 00:04:23,040
the non-interactive setting by mccauley

120
00:04:23,040 --> 00:04:25,280
and a lot of follow-up works which

121
00:04:25,280 --> 00:04:28,320
roughly uh says that the communication

122
00:04:28,320 --> 00:04:30,160
and the verification complexity of the

123
00:04:30,160 --> 00:04:31,120
proof

124
00:04:31,120 --> 00:04:33,360
should be quite low even smaller than

125
00:04:33,360 --> 00:04:35,680
the witness size

126
00:04:35,680 --> 00:04:37,680
okay so

127
00:04:37,680 --> 00:04:41,680
why do we care about these properties

128
00:04:41,680 --> 00:04:43,120
so first of all hopefully for this

129
00:04:43,120 --> 00:04:44,639
audience i don't need to convince you

130
00:04:44,639 --> 00:04:46,800
that these are really fascinating uh

131
00:04:46,800 --> 00:04:49,360
properties uh both individually and

132
00:04:49,360 --> 00:04:50,320
together

133
00:04:50,320 --> 00:04:53,199
um so if cryptography is a study of uh

134
00:04:53,199 --> 00:04:54,960
seemingly paradoxical notions then

135
00:04:54,960 --> 00:04:56,720
perhaps these two are very very good

136
00:04:56,720 --> 00:04:59,680
representatives of that idea

137
00:04:59,680 --> 00:05:02,000
uh both of these properties give a lot

138
00:05:02,000 --> 00:05:04,080
of opportunities for flexing our theory

139
00:05:04,080 --> 00:05:05,840
muscles and

140
00:05:05,840 --> 00:05:07,440
you can see an excellent talk by you

141
00:05:07,440 --> 00:05:09,360
wallet simons

142
00:05:09,360 --> 00:05:13,360
which elaborates on this idea

143
00:05:13,759 --> 00:05:15,680
fortunately there are also lots of

144
00:05:15,680 --> 00:05:17,840
applications of both of these properties

145
00:05:17,840 --> 00:05:19,440
that we have looked at in photography

146
00:05:19,440 --> 00:05:21,039
for many years

147
00:05:21,039 --> 00:05:23,199
most recently these properties have

148
00:05:23,199 --> 00:05:24,800
probably been most popularized by the

149
00:05:24,800 --> 00:05:26,560
advent of blockchains

150
00:05:26,560 --> 00:05:28,800
and

151
00:05:28,800 --> 00:05:30,880
perhaps most because

152
00:05:30,880 --> 00:05:32,960
mostly because of the last application

153
00:05:32,960 --> 00:05:34,400
now these properties are really

154
00:05:34,400 --> 00:05:37,199
mainstream you can find dedicated

155
00:05:37,199 --> 00:05:39,440
podcasts blog posts about

156
00:05:39,440 --> 00:05:40,320
these

157
00:05:40,320 --> 00:05:42,400
these notions even by not academics you

158
00:05:42,400 --> 00:05:44,800
can find websites dedicated to studying

159
00:05:44,800 --> 00:05:47,039
zero knowledge uh that are you know

160
00:05:47,039 --> 00:05:49,520
maintained by non-academicians um there

161
00:05:49,520 --> 00:05:51,199
are standardization efforts possible

162
00:05:51,199 --> 00:05:53,120
knowledge and

163
00:05:53,120 --> 00:05:55,360
perhaps it might not be an overstatement

164
00:05:55,360 --> 00:05:57,120
to say that zero knowledge might even

165
00:05:57,120 --> 00:06:00,720
overtake apache in popularity

166
00:06:01,680 --> 00:06:02,479
okay

167
00:06:02,479 --> 00:06:04,720
so in this talk um

168
00:06:04,720 --> 00:06:07,199
i will talk about uh

169
00:06:07,199 --> 00:06:08,720
you know the history of these notions

170
00:06:08,720 --> 00:06:10,400
but mostly focusing on the present in

171
00:06:10,400 --> 00:06:12,319
true mindfulness

172
00:06:12,319 --> 00:06:13,280
spirit

173
00:06:13,280 --> 00:06:14,720
um

174
00:06:14,720 --> 00:06:17,120
so even in the present i will

175
00:06:17,120 --> 00:06:19,600
focus mostly on the topic of assumptions

176
00:06:19,600 --> 00:06:21,199
namely what assumptions are really

177
00:06:21,199 --> 00:06:24,240
necessary um for these properties both

178
00:06:24,240 --> 00:06:26,160
for zero knowledge and

179
00:06:26,160 --> 00:06:27,360
sickness

180
00:06:27,360 --> 00:06:30,160
and time permitting towards the end i

181
00:06:30,160 --> 00:06:31,759
will talk maybe a little bit about

182
00:06:31,759 --> 00:06:33,680
theory versus practice for these

183
00:06:33,680 --> 00:06:34,800
properties

184
00:06:34,800 --> 00:06:36,800
um at least for the ladder property you

185
00:06:36,800 --> 00:06:38,639
can see excellent talks by yens and

186
00:06:38,639 --> 00:06:42,080
sarah at last crypto and eurocrypt

187
00:06:42,080 --> 00:06:44,000
and towards the very end i might touch

188
00:06:44,000 --> 00:06:45,840
upon a little bit about the trust models

189
00:06:45,840 --> 00:06:49,520
involved in these properties

190
00:06:49,520 --> 00:06:50,479
okay

191
00:06:50,479 --> 00:06:52,479
so let me get started

192
00:06:52,479 --> 00:06:54,240
so the first part of this talk will

193
00:06:54,240 --> 00:06:56,080
primarily focus on non-interactive zero

194
00:06:56,080 --> 00:06:58,720
knowledge groups

195
00:06:58,720 --> 00:07:00,160
this is going to be the longest part of

196
00:07:00,160 --> 00:07:01,919
this talk and perhaps the most

197
00:07:01,919 --> 00:07:03,440
technically intensive

198
00:07:03,440 --> 00:07:04,960
the second part will be a little bit

199
00:07:04,960 --> 00:07:06,720
about succinct non-interactive arguments

200
00:07:06,720 --> 00:07:08,560
the shorter part and the final part will

201
00:07:08,560 --> 00:07:10,240
be the smallest a little bit of

202
00:07:10,240 --> 00:07:13,919
discussion on both of these topics

203
00:07:13,919 --> 00:07:17,599
okay any questions so far

204
00:07:17,599 --> 00:07:20,240
okay let me then get started

205
00:07:20,240 --> 00:07:22,319
so let's start with non-interactive zero

206
00:07:22,319 --> 00:07:24,319
knowledge proofs um

207
00:07:24,319 --> 00:07:27,120
so first and foremost uh the notion as i

208
00:07:27,120 --> 00:07:29,199
defined earlier is actually impossible

209
00:07:29,199 --> 00:07:32,240
in the plane model um

210
00:07:32,240 --> 00:07:33,759
so typically

211
00:07:33,759 --> 00:07:35,680
we have to allow for some trusted setup

212
00:07:35,680 --> 00:07:37,360
and the most common trusted setup that

213
00:07:37,360 --> 00:07:39,919
we that we talk about is common

214
00:07:39,919 --> 00:07:41,520
reference string setup where there is

215
00:07:41,520 --> 00:07:42,319
some

216
00:07:42,319 --> 00:07:44,560
let's say trusted party that samples a

217
00:07:44,560 --> 00:07:47,039
reference string ideally a random string

218
00:07:47,039 --> 00:07:48,960
and sends it to both the parties and the

219
00:07:48,960 --> 00:07:51,039
prover generates its proof using this

220
00:07:51,039 --> 00:07:53,280
wrapped in string and the verify uses

221
00:07:53,280 --> 00:07:54,879
this reference string to verify the

222
00:07:54,879 --> 00:07:56,639
proof

223
00:07:56,639 --> 00:07:58,639
this is perhaps the most commonly used

224
00:07:58,639 --> 00:08:01,199
model in uh in theory but

225
00:08:01,199 --> 00:08:04,160
also we often consider the rhino miracle

226
00:08:04,160 --> 00:08:05,759
model and i'll talk about the

227
00:08:05,759 --> 00:08:09,199
differences in these two models shortly

228
00:08:09,199 --> 00:08:11,680
but for uh for the primary purposes of

229
00:08:11,680 --> 00:08:13,199
this talk i'm going to focus on the

230
00:08:13,199 --> 00:08:15,680
common reference string model

231
00:08:15,680 --> 00:08:17,120
okay so

232
00:08:17,120 --> 00:08:19,039
the main question that i'm interested in

233
00:08:19,039 --> 00:08:21,280
is what assumptions are necessary and

234
00:08:21,280 --> 00:08:23,280
sufficient for constructing

235
00:08:23,280 --> 00:08:26,720
non-interactive zero knowledge

236
00:08:26,720 --> 00:08:28,720
so let me start with what we don't know

237
00:08:28,720 --> 00:08:31,599
about this even now

238
00:08:31,599 --> 00:08:33,360
so even though non-interactive zero

239
00:08:33,360 --> 00:08:35,120
knowledge was introduced uh you know in

240
00:08:35,120 --> 00:08:37,360
the 80s it's perhaps surprising that we

241
00:08:37,360 --> 00:08:39,279
still don't quite know

242
00:08:39,279 --> 00:08:41,919
its cryptographic complexity um

243
00:08:41,919 --> 00:08:44,080
fairly well so

244
00:08:44,080 --> 00:08:45,839
we don't quite know whether we can build

245
00:08:45,839 --> 00:08:48,720
physics from many crypto assumptions

246
00:08:48,720 --> 00:08:50,560
if we make some relaxations then we do

247
00:08:50,560 --> 00:08:52,480
know the answer so for example if we do

248
00:08:52,480 --> 00:08:54,880
allow interaction then we know from many

249
00:08:54,880 --> 00:08:57,839
years ago that we can build an ethics uh

250
00:08:57,839 --> 00:08:59,440
sorry interactive zero knowledge in

251
00:08:59,440 --> 00:09:03,519
minicrypt or if we allow random oracle

252
00:09:03,519 --> 00:09:05,440
perhaps even more surprisingly we don't

253
00:09:05,440 --> 00:09:06,800
even understand very well the

254
00:09:06,800 --> 00:09:08,399
relationship between non-interactive

255
00:09:08,399 --> 00:09:11,279
zero knowledge and public encryption

256
00:09:11,279 --> 00:09:14,160
and as far as i know no implication is

257
00:09:14,160 --> 00:09:16,080
known in either direction

258
00:09:16,080 --> 00:09:18,240
except if you make a bunch of

259
00:09:18,240 --> 00:09:19,760
restrictions

260
00:09:19,760 --> 00:09:21,519
so let's say you want you consider the

261
00:09:21,519 --> 00:09:23,680
designated verifier setting and even

262
00:09:23,680 --> 00:09:26,640
there if you only consider non-reusable

263
00:09:26,640 --> 00:09:29,760
uh designated verifying music

264
00:09:29,760 --> 00:09:31,760
then maybe you know we know some things

265
00:09:31,760 --> 00:09:33,920
but not not otherwise

266
00:09:33,920 --> 00:09:35,440
and

267
00:09:35,440 --> 00:09:37,279
it should be fairly easy to see that

268
00:09:37,279 --> 00:09:39,440
this question also has implications to

269
00:09:39,440 --> 00:09:42,160
cpa versus ccs security in public

270
00:09:42,160 --> 00:09:43,839
encryption

271
00:09:43,839 --> 00:09:46,320
okay so this is what we don't know but

272
00:09:46,320 --> 00:09:48,000
here is what we know

273
00:09:48,000 --> 00:09:50,000
so we do know starting from the work of

274
00:09:50,000 --> 00:09:52,000
uh blue metal and then

275
00:09:52,000 --> 00:09:54,000
fighting epidural shamir in the in the

276
00:09:54,000 --> 00:09:57,200
80s and 90 early 90s um we can build

277
00:09:57,200 --> 00:09:59,760
physics from a variety of assumptions so

278
00:09:59,760 --> 00:10:01,519
we can build it from factoring related

279
00:10:01,519 --> 00:10:04,079
assumptions um we can build it from

280
00:10:04,079 --> 00:10:05,360
various standard assumptions on

281
00:10:05,360 --> 00:10:08,160
bi-linear maps um this was pretty much

282
00:10:08,160 --> 00:10:10,320
the state of affairs until uh you know

283
00:10:10,320 --> 00:10:12,000
mid-2010s

284
00:10:12,000 --> 00:10:14,160
and then in the last few years a new

285
00:10:14,160 --> 00:10:16,160
sort of renewed focus started on

286
00:10:16,160 --> 00:10:17,760
building uh non-interactive zero

287
00:10:17,760 --> 00:10:20,800
knowledge um which led to

288
00:10:20,800 --> 00:10:23,760
constructions from learning with errors

289
00:10:23,760 --> 00:10:26,079
and then even more recently

290
00:10:26,079 --> 00:10:28,480
from learning parity with noise and

291
00:10:28,480 --> 00:10:30,079
you know other standard assumptions like

292
00:10:30,079 --> 00:10:32,480
ddh qr etc

293
00:10:32,480 --> 00:10:33,360
okay

294
00:10:33,360 --> 00:10:34,800
so

295
00:10:34,800 --> 00:10:36,480
this is this was sort of the state of

296
00:10:36,480 --> 00:10:39,920
appears uh until 2020 and if you look at

297
00:10:39,920 --> 00:10:41,360
this

298
00:10:41,360 --> 00:10:44,320
you'll see that this perhaps looks much

299
00:10:44,320 --> 00:10:47,040
worse or at least noticeably worse than

300
00:10:47,040 --> 00:10:49,760
public encryption um and in fact even

301
00:10:49,760 --> 00:10:51,760
worse than identity-based encryption

302
00:10:51,760 --> 00:10:53,839
right and in particular the notable

303
00:10:53,839 --> 00:10:56,000
omission from this list of assumptions

304
00:10:56,000 --> 00:10:59,200
here which are sufficient uh

305
00:10:59,200 --> 00:11:00,079
assumptions foreign

306
00:11:00,079 --> 00:11:02,079
to the hardness of discrete log right so

307
00:11:02,079 --> 00:11:03,920
for example gdh

308
00:11:03,920 --> 00:11:05,279
we didn't quite know how to build

309
00:11:05,279 --> 00:11:07,760
physics from that

310
00:11:07,760 --> 00:11:09,600
so

311
00:11:09,600 --> 00:11:12,320
another way to think about why

312
00:11:12,320 --> 00:11:13,760
this question is interesting or

313
00:11:13,760 --> 00:11:17,040
important is uh perhaps in answering uh

314
00:11:17,040 --> 00:11:19,519
um what is the relative uh you know

315
00:11:19,519 --> 00:11:21,279
power of uh

316
00:11:21,279 --> 00:11:23,920
standard groups versus groups that come

317
00:11:23,920 --> 00:11:25,440
equipped with pairings

318
00:11:25,440 --> 00:11:29,519
um so starting from the work of um

319
00:11:29,519 --> 00:11:32,000
bonnie and franklin we we saw that uh

320
00:11:32,000 --> 00:11:33,600
pairing groups can actually help us

321
00:11:33,600 --> 00:11:35,600
achieve a lot in cryptography that we

322
00:11:35,600 --> 00:11:37,839
didn't know earlier so for example uh

323
00:11:37,839 --> 00:11:39,120
you know it led to constructions of

324
00:11:39,120 --> 00:11:40,800
identity based encryption even

325
00:11:40,800 --> 00:11:42,640
attribute-based encryptions and many

326
00:11:42,640 --> 00:11:44,640
other amazing tools

327
00:11:44,640 --> 00:11:47,120
as well as physics

328
00:11:47,120 --> 00:11:48,800
but we didn't quite know how to

329
00:11:48,800 --> 00:11:51,120
accomplish those tasks

330
00:11:51,120 --> 00:11:54,160
in standard non-parent groups

331
00:11:54,160 --> 00:11:55,839
at least for the case of identity based

332
00:11:55,839 --> 00:11:57,200
encryption this gap was somewhat

333
00:11:57,200 --> 00:11:59,680
narrowed um in the in the work of

334
00:11:59,680 --> 00:12:03,760
totaling edward a few years ago but the

335
00:12:03,760 --> 00:12:07,200
same is still not wasn't still clear for

336
00:12:07,200 --> 00:12:09,839
other settings and we can ask whether

337
00:12:09,839 --> 00:12:13,040
such gaps are sort of inherent

338
00:12:13,040 --> 00:12:15,600
okay so for the case of nisik's uh

339
00:12:15,600 --> 00:12:17,519
this is the first result that i want to

340
00:12:17,519 --> 00:12:19,920
talk about this is a joint work with my

341
00:12:19,920 --> 00:12:22,240
student shenzhen

342
00:12:22,240 --> 00:12:25,279
so we show that we can build physics um

343
00:12:25,279 --> 00:12:28,320
for all of np from the sub exponential

344
00:12:28,320 --> 00:12:30,079
hardness of the decisional difficult

345
00:12:30,079 --> 00:12:32,320
assumption uh in standard non-parent

346
00:12:32,320 --> 00:12:33,760
groups

347
00:12:33,760 --> 00:12:36,320
okay so a couple of remarks um this is

348
00:12:36,320 --> 00:12:39,200
not a practical scheme

349
00:12:39,200 --> 00:12:40,639
but it does help

350
00:12:40,639 --> 00:12:42,720
reduce i would say the gap between

351
00:12:42,720 --> 00:12:44,399
pairing and non-pairing groups a little

352
00:12:44,399 --> 00:12:45,839
bit further although there are still

353
00:12:45,839 --> 00:12:47,519
many things we don't know

354
00:12:47,519 --> 00:12:49,360
how to do in standard groups that we do

355
00:12:49,360 --> 00:12:50,320
know from

356
00:12:50,320 --> 00:12:52,560
parent groups

357
00:12:52,560 --> 00:12:54,160
and as far as answering the question

358
00:12:54,160 --> 00:12:57,760
between physics and public encryption um

359
00:12:57,760 --> 00:12:59,760
again you know some progress but no

360
00:12:59,760 --> 00:13:02,800
definitive answer yet

361
00:13:03,519 --> 00:13:04,639
okay

362
00:13:04,639 --> 00:13:07,120
so let me then proceed to give some

363
00:13:07,120 --> 00:13:09,600
background uh about how we obtained this

364
00:13:09,600 --> 00:13:11,600
result um

365
00:13:11,600 --> 00:13:13,839
so let me just uh mention first of all

366
00:13:13,839 --> 00:13:14,560
that

367
00:13:14,560 --> 00:13:17,519
prior to 2017-ish i would say roughly

368
00:13:17,519 --> 00:13:21,279
speaking nisiks and the crs model were

369
00:13:21,279 --> 00:13:23,920
mainly uh limited to these two sort of

370
00:13:23,920 --> 00:13:26,320
approaches the first is the hidden bit

371
00:13:26,320 --> 00:13:28,720
model approach um of

372
00:13:28,720 --> 00:13:31,680
fragile epidural shamir and then

373
00:13:31,680 --> 00:13:33,920
there was this other approach which

374
00:13:33,920 --> 00:13:36,720
crucially relied on bilinear maps you

375
00:13:36,720 --> 00:13:38,959
know proposed by growth of ostrovsky and

376
00:13:38,959 --> 00:13:41,440
sahai which was subsequently made

377
00:13:41,440 --> 00:13:45,279
practical in many settings by protest

378
00:13:45,760 --> 00:13:47,199
on the other hand when it comes to a

379
00:13:47,199 --> 00:13:49,120
random oracle model i guess the the

380
00:13:49,120 --> 00:13:51,199
canonical the most well-known approach

381
00:13:51,199 --> 00:13:52,800
is due to

382
00:13:52,800 --> 00:13:55,360
fear chamir which basically starts from

383
00:13:55,360 --> 00:13:57,839
a sigma protocol or more generally any

384
00:13:57,839 --> 00:13:59,920
interactive proof which is public coin

385
00:13:59,920 --> 00:14:02,480
in the verifier and then collapses it to

386
00:14:02,480 --> 00:14:04,880
a non-interactive proof

387
00:14:04,880 --> 00:14:07,600
and the idea is simple uh we equip the

388
00:14:07,600 --> 00:14:10,000
proven verify with the random oracle and

389
00:14:10,000 --> 00:14:10,800
now

390
00:14:10,800 --> 00:14:12,000
instead of

391
00:14:12,000 --> 00:14:15,199
computing the verifies uh challenge at

392
00:14:15,199 --> 00:14:18,160
random uh during inter y interaction now

393
00:14:18,160 --> 00:14:20,240
we basically do it non-interactively by

394
00:14:20,240 --> 00:14:22,240
computing it as the output of the random

395
00:14:22,240 --> 00:14:24,959
oracle on the first prover message right

396
00:14:24,959 --> 00:14:27,360
so here the first message being alpha

397
00:14:27,360 --> 00:14:29,120
and now the approver can just directly

398
00:14:29,120 --> 00:14:31,279
compute the answer to the challenge

399
00:14:31,279 --> 00:14:34,480
gamma and then send them all together

400
00:14:34,480 --> 00:14:36,399
the verifier can of course check that

401
00:14:36,399 --> 00:14:38,959
the challenge was computed correctly

402
00:14:38,959 --> 00:14:40,959
okay so i'm not going to argue why this

403
00:14:40,959 --> 00:14:42,480
gives soundness but

404
00:14:42,480 --> 00:14:43,760
hopefully you can

405
00:14:43,760 --> 00:14:45,199
you can see that

406
00:14:45,199 --> 00:14:46,959
by using properties of random oracle we

407
00:14:46,959 --> 00:14:49,040
can actually argue that this is sound

408
00:14:49,040 --> 00:14:51,839
and in fact also zero knowledge

409
00:14:51,839 --> 00:14:53,600
okay so we can obviously ask the

410
00:14:53,600 --> 00:14:55,760
question that if we have this really

411
00:14:55,760 --> 00:14:56,639
nice

412
00:14:56,639 --> 00:14:58,720
approach for constructing music via the

413
00:14:58,720 --> 00:15:00,320
random oracle can we actually

414
00:15:00,320 --> 00:15:02,560
instantiate the random oracle with some

415
00:15:02,560 --> 00:15:04,800
special hash function family and of

416
00:15:04,800 --> 00:15:06,480
course this is a very broad question

417
00:15:06,480 --> 00:15:08,880
random oracles are not just you know

418
00:15:08,880 --> 00:15:10,560
used here for constructing music they

419
00:15:10,560 --> 00:15:12,079
have been used for many other

420
00:15:12,079 --> 00:15:14,160
cryptographic primitives at least for

421
00:15:14,160 --> 00:15:15,920
efficient cryptographic primitives so

422
00:15:15,920 --> 00:15:18,480
this is a rather broad question um but

423
00:15:18,480 --> 00:15:20,639
it but focusing on the question of uh

424
00:15:20,639 --> 00:15:22,959
non-interactive zero knowledge um this

425
00:15:22,959 --> 00:15:24,639
is sort of what we knew

426
00:15:24,639 --> 00:15:27,199
so there were a bunch of negative

427
00:15:27,199 --> 00:15:29,680
answers uh in the case of non in the

428
00:15:29,680 --> 00:15:31,519
case of interactive arguments it was

429
00:15:31,519 --> 00:15:34,079
shown that there do exist specific

430
00:15:34,079 --> 00:15:37,600
protocols that you cannot collapse um

431
00:15:37,600 --> 00:15:40,399
by using any hash function family and

432
00:15:40,399 --> 00:15:42,399
even in the case of proofs there was

433
00:15:42,399 --> 00:15:43,279
some

434
00:15:43,279 --> 00:15:46,720
partial conditional lower bounds

435
00:15:46,720 --> 00:15:49,600
but then a possible route towards you

436
00:15:49,600 --> 00:15:52,959
know a positive resolution was

437
00:15:52,959 --> 00:15:55,120
shown or suggested by the notion of

438
00:15:55,120 --> 00:15:58,160
correlation intractable hash functions

439
00:15:58,160 --> 00:16:00,320
the the notion was initially introduced

440
00:16:00,320 --> 00:16:02,480
for a somewhat different reason but then

441
00:16:02,480 --> 00:16:04,639
a path forward was shown in the work of

442
00:16:04,639 --> 00:16:06,839
levy uh myths and

443
00:16:06,839 --> 00:16:08,480
rekov

444
00:16:08,480 --> 00:16:11,440
and then this uh this idea was somehow

445
00:16:11,440 --> 00:16:12,880
uh you know

446
00:16:12,880 --> 00:16:15,279
adopted uh more strongly in in the last

447
00:16:15,279 --> 00:16:18,000
few years and um i'm going to now talk

448
00:16:18,000 --> 00:16:19,839
about how this was done in the in the

449
00:16:19,839 --> 00:16:21,839
last few years to build physics from a

450
00:16:21,839 --> 00:16:24,560
variety of assumptions so let me first

451
00:16:24,560 --> 00:16:26,639
talk about what this primitive is so

452
00:16:26,639 --> 00:16:28,639
what are correlation interactable hash

453
00:16:28,639 --> 00:16:30,399
functions

454
00:16:30,399 --> 00:16:32,720
so this is a family of hash functions

455
00:16:32,720 --> 00:16:34,320
keyed hash functions

456
00:16:34,320 --> 00:16:37,360
k denotes the key here and we say that

457
00:16:37,360 --> 00:16:40,160
uh family of uh heat hash functions is

458
00:16:40,160 --> 00:16:42,480
correlation intractable uh for a

459
00:16:42,480 --> 00:16:45,600
function family f um actually let me say

460
00:16:45,600 --> 00:16:47,839
that in general we define correlation

461
00:16:47,839 --> 00:16:49,199
interactability with respect to a

462
00:16:49,199 --> 00:16:51,360
relation family but here i'm simplifying

463
00:16:51,360 --> 00:16:53,120
it and focusing on

464
00:16:53,120 --> 00:16:55,680
searchable relations and just

465
00:16:55,680 --> 00:16:58,560
represented by this function family

466
00:16:58,560 --> 00:16:59,360
so

467
00:16:59,360 --> 00:17:01,759
the idea is as follows we require that

468
00:17:01,759 --> 00:17:04,799
for any member of this function family

469
00:17:04,799 --> 00:17:09,199
if we sample a key k at random

470
00:17:09,199 --> 00:17:11,679
a key for this hash function and then

471
00:17:11,679 --> 00:17:13,679
give it to the adversary it should be

472
00:17:13,679 --> 00:17:16,160
hard for the adversary to come up with

473
00:17:16,160 --> 00:17:17,760
an input x

474
00:17:17,760 --> 00:17:20,559
such that uh the output of the hash

475
00:17:20,559 --> 00:17:22,959
function on this x

476
00:17:22,959 --> 00:17:25,599
actually collides with the output of uh

477
00:17:25,599 --> 00:17:28,799
the function f on on the same x okay so

478
00:17:28,799 --> 00:17:30,720
the probability of this should be very

479
00:17:30,720 --> 00:17:33,720
small

480
00:17:34,160 --> 00:17:35,679
so this is the notion of correlation

481
00:17:35,679 --> 00:17:38,400
interactability and now let's see how

482
00:17:38,400 --> 00:17:40,720
this can help us in instantiating the

483
00:17:40,720 --> 00:17:42,320
random oracle in the future view

484
00:17:42,320 --> 00:17:44,080
paradigm

485
00:17:44,080 --> 00:17:45,679
okay so again we start with the sigma

486
00:17:45,679 --> 00:17:46,720
protocol

487
00:17:46,720 --> 00:17:48,559
and we do more or less the same as we

488
00:17:48,559 --> 00:17:50,480
did earlier when we were using random

489
00:17:50,480 --> 00:17:52,480
oracles except that now

490
00:17:52,480 --> 00:17:55,360
um we sample a key for this collision

491
00:17:55,360 --> 00:17:57,200
interactable hash function family and

492
00:17:57,200 --> 00:17:59,360
that's now part of the crs

493
00:17:59,360 --> 00:18:02,720
and known to both the parties

494
00:18:02,720 --> 00:18:04,240
and now the approver works in the same

495
00:18:04,240 --> 00:18:06,960
manner as before except that now he uses

496
00:18:06,960 --> 00:18:09,120
the hash function to actually compute

497
00:18:09,120 --> 00:18:12,080
the challenge data okay and the rest is

498
00:18:12,080 --> 00:18:13,600
at before

499
00:18:13,600 --> 00:18:15,600
so we can ask why does this actually

500
00:18:15,600 --> 00:18:18,799
work why does this give us unlisted

501
00:18:18,799 --> 00:18:21,520
so arguing sound arguings your knowledge

502
00:18:21,520 --> 00:18:22,880
is actually easy so i'm not really going

503
00:18:22,880 --> 00:18:24,880
to talk about that

504
00:18:24,880 --> 00:18:27,360
more or less can be argued by relying on

505
00:18:27,360 --> 00:18:28,640
the honest verified zero knowledge

506
00:18:28,640 --> 00:18:30,559
property of the underlying sigma

507
00:18:30,559 --> 00:18:31,520
protocol

508
00:18:31,520 --> 00:18:33,440
but let me just focus on soundness which

509
00:18:33,440 --> 00:18:36,080
is the more interesting case here

510
00:18:36,080 --> 00:18:36,880
okay

511
00:18:36,880 --> 00:18:39,039
so let's first recall that sigma

512
00:18:39,039 --> 00:18:41,760
protocols um have this so-called special

513
00:18:41,760 --> 00:18:45,440
soundness property which says that um

514
00:18:45,440 --> 00:18:47,120
if you look at a proof for a false

515
00:18:47,120 --> 00:18:49,280
statement right so let's say we have a

516
00:18:49,280 --> 00:18:51,360
transcript alpha beta gamma

517
00:18:51,360 --> 00:18:53,360
so it says that if i give you two

518
00:18:53,360 --> 00:18:56,480
transcripts uh two accepting transcripts

519
00:18:56,480 --> 00:18:59,760
with the same prefix so the same alpha

520
00:18:59,760 --> 00:19:02,960
but different challenges beta0 and beta1

521
00:19:02,960 --> 00:19:05,760
and corresponding answers then you can

522
00:19:05,760 --> 00:19:08,320
actually extract a witness

523
00:19:08,320 --> 00:19:09,200
okay

524
00:19:09,200 --> 00:19:11,120
good so this is a special soundless

525
00:19:11,120 --> 00:19:12,799
property and now if we have this

526
00:19:12,799 --> 00:19:16,480
property uh we can note uh that

527
00:19:16,480 --> 00:19:18,640
for any alpha

528
00:19:18,640 --> 00:19:21,200
there exists actually a unique beta such

529
00:19:21,200 --> 00:19:22,080
that

530
00:19:22,080 --> 00:19:24,000
the transcript alpha beta gamma will be

531
00:19:24,000 --> 00:19:26,000
accepted right this is a consequence of

532
00:19:26,000 --> 00:19:28,480
the special soundness property

533
00:19:28,480 --> 00:19:30,080
and now that we have this uniqueness

534
00:19:30,080 --> 00:19:32,720
guarantee we can define a mapping

535
00:19:32,720 --> 00:19:33,840
so-called

536
00:19:33,840 --> 00:19:35,440
function which i'm calling a bad

537
00:19:35,440 --> 00:19:38,799
function which maps alpha to this

538
00:19:38,799 --> 00:19:41,440
bad beta right this beta that would have

539
00:19:41,440 --> 00:19:43,679
resulted in an accepting transcript even

540
00:19:43,679 --> 00:19:46,400
though the statement is false

541
00:19:46,400 --> 00:19:48,559
okay

542
00:19:48,559 --> 00:19:50,720
so now

543
00:19:50,720 --> 00:19:52,880
now let's argue some this uh given this

544
00:19:52,880 --> 00:19:53,919
observation

545
00:19:53,919 --> 00:19:54,720
so

546
00:19:54,720 --> 00:19:57,440
let's say we use uh cih

547
00:19:57,440 --> 00:19:59,120
as the hash function family for

548
00:19:59,120 --> 00:20:01,280
instantiating the random oracle and we

549
00:20:01,280 --> 00:20:02,080
will

550
00:20:02,080 --> 00:20:04,320
we will use ch which is correlation

551
00:20:04,320 --> 00:20:06,080
interactable with respect to the family

552
00:20:06,080 --> 00:20:08,000
of bad functions

553
00:20:08,000 --> 00:20:09,360
okay

554
00:20:09,360 --> 00:20:12,720
so now if uh if a transcript is accepted

555
00:20:12,720 --> 00:20:15,120
then on the one hand just the way we

556
00:20:15,120 --> 00:20:17,280
constructed the protocol we have that

557
00:20:17,280 --> 00:20:19,679
beta is the output of the hash function

558
00:20:19,679 --> 00:20:22,080
right but at the same time

559
00:20:22,080 --> 00:20:24,960
we also have that beta is equal to

560
00:20:24,960 --> 00:20:27,440
the output of the function band right so

561
00:20:27,440 --> 00:20:28,799
what this means is that if you notice

562
00:20:28,799 --> 00:20:30,720
the right hand side of the equality we

563
00:20:30,720 --> 00:20:32,159
have that the output of the hash

564
00:20:32,159 --> 00:20:34,799
function on alpha is equal to the output

565
00:20:34,799 --> 00:20:38,159
of bad on alpha right so this is a

566
00:20:38,159 --> 00:20:40,080
contradiction to the polish correlation

567
00:20:40,080 --> 00:20:42,559
intractability property

568
00:20:42,559 --> 00:20:45,200
okay so let me mention since it's not

569
00:20:45,200 --> 00:20:47,520
cited here all of this abstraction that

570
00:20:47,520 --> 00:20:49,840
i'm using here is from prior works of

571
00:20:49,840 --> 00:20:50,799
course and

572
00:20:50,799 --> 00:20:52,080
in particular the abstraction that i'm

573
00:20:52,080 --> 00:20:53,679
using here is from the work of kennedy

574
00:20:53,679 --> 00:20:56,240
utah 2019

575
00:20:56,240 --> 00:21:00,320
and uh even more so for this slide

576
00:21:00,320 --> 00:21:02,799
so so far i haven't really talked about

577
00:21:02,799 --> 00:21:04,640
you know whether the bad function is

578
00:21:04,640 --> 00:21:07,360
efficiently computable or not and we can

579
00:21:07,360 --> 00:21:08,720
actually make it

580
00:21:08,720 --> 00:21:10,799
efficiently computable by using uh

581
00:21:10,799 --> 00:21:12,880
trapdoor sigma protocols which are

582
00:21:12,880 --> 00:21:15,520
basically sigma protocols uh in the crs

583
00:21:15,520 --> 00:21:17,120
model

584
00:21:17,120 --> 00:21:19,600
where the first messages alpha are of a

585
00:21:19,600 --> 00:21:21,039
particular form

586
00:21:21,039 --> 00:21:22,960
they they are commitments to some

587
00:21:22,960 --> 00:21:25,200
message and the idea is that given the

588
00:21:25,200 --> 00:21:27,039
trap door for this commitment if you

589
00:21:27,039 --> 00:21:28,640
think of the commitment as implemented

590
00:21:28,640 --> 00:21:30,240
using a public encryption scheme then

591
00:21:30,240 --> 00:21:32,400
using the secret key

592
00:21:32,400 --> 00:21:34,960
you can actually

593
00:21:34,960 --> 00:21:37,200
extract m which helps you find the bad

594
00:21:37,200 --> 00:21:39,120
beta and now you have an efficient

595
00:21:39,120 --> 00:21:40,080
function

596
00:21:40,080 --> 00:21:43,280
that okay so why does this matter it it

597
00:21:43,280 --> 00:21:45,520
helps because now you have you you can

598
00:21:45,520 --> 00:21:47,200
obtain a contradiction by the same

599
00:21:47,200 --> 00:21:50,000
approach as earlier uh you know for

600
00:21:50,000 --> 00:21:51,600
correlation interactable hash functions

601
00:21:51,600 --> 00:21:54,320
that are correlation interactable for

602
00:21:54,320 --> 00:21:56,080
efficiently computable functions right

603
00:21:56,080 --> 00:21:58,400
so smaller class potentially smaller

604
00:21:58,400 --> 00:22:01,039
class of functions

605
00:22:01,039 --> 00:22:03,919
so this makes the task of building cih a

606
00:22:03,919 --> 00:22:06,080
little bit easier

607
00:22:06,080 --> 00:22:08,400
okay so one thing to point out here is

608
00:22:08,400 --> 00:22:11,520
that this function that here involves

609
00:22:11,520 --> 00:22:13,760
the decryption of the commitment and

610
00:22:13,760 --> 00:22:15,919
this sort of affects you know what what

611
00:22:15,919 --> 00:22:18,000
is the complexity of this bad function

612
00:22:18,000 --> 00:22:20,240
right and this will matter uh

613
00:22:20,240 --> 00:22:22,080
later on

614
00:22:22,080 --> 00:22:23,600
okay so

615
00:22:23,600 --> 00:22:25,200
so now that we have this approach we can

616
00:22:25,200 --> 00:22:28,320
ask what kind of cih do we know right

617
00:22:28,320 --> 00:22:31,039
what class of

618
00:22:31,039 --> 00:22:33,200
functions do they support and i'm going

619
00:22:33,200 --> 00:22:35,360
to restrict my attention to cih

620
00:22:35,360 --> 00:22:37,120
constructions based on standard

621
00:22:37,120 --> 00:22:39,039
assumptions

622
00:22:39,039 --> 00:22:40,640
so

623
00:22:40,640 --> 00:22:42,720
based on learning with errors assumption

624
00:22:42,720 --> 00:22:45,120
we actually know cih for all uh

625
00:22:45,120 --> 00:22:47,760
polynomial size circuits

626
00:22:47,760 --> 00:22:50,000
this was shown in the work of

627
00:22:50,000 --> 00:22:52,159
piket and sheehan building on the work

628
00:22:52,159 --> 00:22:52,840
of

629
00:22:52,840 --> 00:22:55,039
canadian uh previously

630
00:22:55,039 --> 00:22:57,840
and uh subsequently you know it was

631
00:22:57,840 --> 00:22:59,840
extended to even bigger class of

632
00:22:59,840 --> 00:23:02,720
relations um more is most recently in

633
00:23:02,720 --> 00:23:04,720
the work of uh

634
00:23:04,720 --> 00:23:06,480
homegrown

635
00:23:06,480 --> 00:23:10,000
and lombardi and uh broadband

636
00:23:10,000 --> 00:23:12,799
so using these results in in particular

637
00:23:12,799 --> 00:23:14,559
the first of these results you can

638
00:23:14,559 --> 00:23:15,919
obtain physics from the learning with

639
00:23:15,919 --> 00:23:18,080
error assumption right this is the this

640
00:23:18,080 --> 00:23:20,080
was a breakthrough result a couple of

641
00:23:20,080 --> 00:23:21,280
years ago

642
00:23:21,280 --> 00:23:23,520
and this was the route towards obtaining

643
00:23:23,520 --> 00:23:25,760
that result

644
00:23:25,760 --> 00:23:28,159
um on the other hand

645
00:23:28,159 --> 00:23:30,400
things are

646
00:23:30,400 --> 00:23:32,159
somewhat more limited if we consider

647
00:23:32,159 --> 00:23:34,240
other assumptions so if we consider

648
00:23:34,240 --> 00:23:36,720
other standard assumptions like ddh

649
00:23:36,720 --> 00:23:40,559
you know qr dcr etc

650
00:23:40,559 --> 00:23:43,039
the only other known approach

651
00:23:43,039 --> 00:23:45,200
for building cih based on these

652
00:23:45,200 --> 00:23:46,480
assumptions

653
00:23:46,480 --> 00:23:47,679
was given

654
00:23:47,679 --> 00:23:50,000
last year in the work of brakerski

655
00:23:50,000 --> 00:23:51,600
coppola and mar

656
00:23:51,600 --> 00:23:53,919
who showed how to build a cih for

657
00:23:53,919 --> 00:23:56,640
constant degree polynomials

658
00:23:56,640 --> 00:23:57,520
okay

659
00:23:57,520 --> 00:24:00,640
and this is a somewhat limited class

660
00:24:00,640 --> 00:24:02,320
which is why

661
00:24:02,320 --> 00:24:03,760
they

662
00:24:03,760 --> 00:24:05,760
they could build musics

663
00:24:05,760 --> 00:24:08,400
using this route from essentially the

664
00:24:08,400 --> 00:24:10,559
same assumption right so you could take

665
00:24:10,559 --> 00:24:14,159
cih for this family of uh functions

666
00:24:14,159 --> 00:24:16,960
and uh use it to build music from you

667
00:24:16,960 --> 00:24:19,679
know ddh or qr or dcr but you

668
00:24:19,679 --> 00:24:23,520
additionally need the lpn assumption

669
00:24:23,520 --> 00:24:26,240
okay and the use of lpn in their work

670
00:24:26,240 --> 00:24:28,799
was very much to allow for you know

671
00:24:28,799 --> 00:24:32,400
using this ch family

672
00:24:32,400 --> 00:24:35,679
okay so we can ask

673
00:24:35,679 --> 00:24:37,200
whether this route could actually give

674
00:24:37,200 --> 00:24:39,360
you directly in ethics from ddh and it

675
00:24:39,360 --> 00:24:41,919
seems insufficient mainly because

676
00:24:41,919 --> 00:24:42,640
the

677
00:24:42,640 --> 00:24:44,880
the class of functions supported here is

678
00:24:44,880 --> 00:24:47,600
quite small if you think about

679
00:24:47,600 --> 00:24:49,840
building music from ddh and you think

680
00:24:49,840 --> 00:24:51,360
about the bad

681
00:24:51,360 --> 00:24:53,279
function that i mentioned earlier

682
00:24:53,279 --> 00:24:55,279
because it involves decryption of the

683
00:24:55,279 --> 00:24:57,279
commitment if you want to instantiate

684
00:24:57,279 --> 00:24:59,520
everything from ddh it seems quite hard

685
00:24:59,520 --> 00:25:02,080
we don't quite know how to build uh

686
00:25:02,080 --> 00:25:04,640
such such things where the decryption

687
00:25:04,640 --> 00:25:05,840
would be

688
00:25:05,840 --> 00:25:07,279
captured by a constantly people in

689
00:25:07,279 --> 00:25:09,440
norway right

690
00:25:09,440 --> 00:25:10,240
okay

691
00:25:10,240 --> 00:25:11,279
so

692
00:25:11,279 --> 00:25:14,480
the question we can ask is uh you know

693
00:25:14,480 --> 00:25:16,240
for the for the purposes of constructing

694
00:25:16,240 --> 00:25:18,240
physics but even broadly

695
00:25:18,240 --> 00:25:20,480
can we build cih for larger class of

696
00:25:20,480 --> 00:25:24,320
functions from assumptions other than

697
00:25:24,880 --> 00:25:26,080
okay

698
00:25:26,080 --> 00:25:27,520
so

699
00:25:27,520 --> 00:25:29,120
going back to the application of medics

700
00:25:29,120 --> 00:25:31,440
from ddh what we show in the same work

701
00:25:31,440 --> 00:25:34,159
is uh you can build uh correlation

702
00:25:34,159 --> 00:25:37,200
interactable hash functions for constant

703
00:25:37,200 --> 00:25:40,400
depth threshold circuits so tc0 from

704
00:25:40,400 --> 00:25:42,799
sub-exponential ddh

705
00:25:42,799 --> 00:25:44,720
the result is slightly more general but

706
00:25:44,720 --> 00:25:47,200
uh this is essentially the main result

707
00:25:47,200 --> 00:25:49,279
and uh we show that this is actually

708
00:25:49,279 --> 00:25:51,760
sufficient for building musics from

709
00:25:51,760 --> 00:25:55,279
sub-exponential ddh via the phm plus ch

710
00:25:55,279 --> 00:25:58,240
route so tc0 is sufficient and if you

711
00:25:58,240 --> 00:25:59,840
want a one-line intuition it's

712
00:25:59,840 --> 00:26:01,600
essentially that algomar encryption

713
00:26:01,600 --> 00:26:04,159
ciphertext can actually be decrypted in

714
00:26:04,159 --> 00:26:06,080
tc0 okay

715
00:26:06,080 --> 00:26:08,480
if that is uh is some seems somewhat

716
00:26:08,480 --> 00:26:10,960
unbelievable you know the intuition then

717
00:26:10,960 --> 00:26:12,720
is that if you're familiar with now

718
00:26:12,720 --> 00:26:14,880
rheingold prfs and you know that they

719
00:26:14,880 --> 00:26:18,559
can be evaluated in tc0 it's essentially

720
00:26:18,559 --> 00:26:21,919
the same intuition here as well okay

721
00:26:21,919 --> 00:26:24,400
so i'm not going to show uh why tc0 is

722
00:26:24,400 --> 00:26:26,480
sufficient okay you can trust me that

723
00:26:26,480 --> 00:26:29,279
this is true uh so then the task the

724
00:26:29,279 --> 00:26:30,640
main task is

725
00:26:30,640 --> 00:26:33,200
how can we build ceih for constant depth

726
00:26:33,200 --> 00:26:34,960
threshold circuits

727
00:26:34,960 --> 00:26:36,840
from ddh

728
00:26:36,840 --> 00:26:38,559
okay

729
00:26:38,559 --> 00:26:41,520
any questions so far

730
00:26:41,919 --> 00:26:44,400
carry on then so the main tool that we

731
00:26:44,400 --> 00:26:49,679
use uh to build a cih for tc0 is

732
00:26:49,679 --> 00:26:51,679
a primitive that we call interactive

733
00:26:51,679 --> 00:26:54,240
trap door hashing if the name seems

734
00:26:54,240 --> 00:26:55,840
sounds a mouthful don't worry i'll

735
00:26:55,840 --> 00:26:58,080
explain shortly why we use this this

736
00:26:58,080 --> 00:27:00,000
nomenclature

737
00:27:00,000 --> 00:27:01,039
so

738
00:27:01,039 --> 00:27:02,880
it's a protocol between two parties

739
00:27:02,880 --> 00:27:04,640
sender and a receiver

740
00:27:04,640 --> 00:27:06,640
and roughly speaking you can think of it

741
00:27:06,640 --> 00:27:08,799
as a very very special form of secure

742
00:27:08,799 --> 00:27:10,559
two-party computation protocol with lots

743
00:27:10,559 --> 00:27:13,440
of properties and lots of structure

744
00:27:13,440 --> 00:27:15,679
so the sender has some input x

745
00:27:15,679 --> 00:27:17,279
and the receiver has

746
00:27:17,279 --> 00:27:19,600
an input of function f with the

747
00:27:19,600 --> 00:27:21,840
multi-bit output

748
00:27:21,840 --> 00:27:24,159
and the parties exchange messages with

749
00:27:24,159 --> 00:27:27,360
each other in an alternating fashion

750
00:27:27,360 --> 00:27:29,360
and we want a bunch of properties from

751
00:27:29,360 --> 00:27:31,919
this protocol so first of all at the end

752
00:27:31,919 --> 00:27:33,600
of this protocol

753
00:27:33,600 --> 00:27:37,039
the sender obtains some encoding

754
00:27:37,039 --> 00:27:38,960
which we denote as e this is something

755
00:27:38,960 --> 00:27:41,440
that the sender computes on its own

756
00:27:41,440 --> 00:27:42,880
and then the receiver on its own

757
00:27:42,880 --> 00:27:45,200
computes a value d which we call the

758
00:27:45,200 --> 00:27:47,120
decoding okay

759
00:27:47,120 --> 00:27:49,440
and the first property we want is uh

760
00:27:49,440 --> 00:27:52,240
additive reconstruction that is by

761
00:27:52,240 --> 00:27:55,200
adding or sorting these these two values

762
00:27:55,200 --> 00:27:56,720
encoding and decoding

763
00:27:56,720 --> 00:27:58,000
you can obtain the output of the

764
00:27:58,000 --> 00:28:00,720
function f on x

765
00:28:00,720 --> 00:28:02,320
okay so if you're familiar with

766
00:28:02,320 --> 00:28:04,000
homophobic secret sharing this is very

767
00:28:04,000 --> 00:28:06,880
reminiscent of that

768
00:28:06,880 --> 00:28:09,840
the second property and this is really a

769
00:28:09,840 --> 00:28:12,240
key property of this of this notion is

770
00:28:12,240 --> 00:28:13,919
that we want that the sender's

771
00:28:13,919 --> 00:28:16,640
communication is very small it's it's

772
00:28:16,640 --> 00:28:18,480
laconic in the sense that

773
00:28:18,480 --> 00:28:20,720
the the size of each of the messages

774
00:28:20,720 --> 00:28:22,799
that the sender sends is in fact even

775
00:28:22,799 --> 00:28:24,399
independent of the input and output

776
00:28:24,399 --> 00:28:26,799
length it only depends it's bounded by

777
00:28:26,799 --> 00:28:28,480
the security parameter and this is a

778
00:28:28,480 --> 00:28:31,679
really really strong property right

779
00:28:31,679 --> 00:28:33,840
which is what gives this primitive a lot

780
00:28:33,840 --> 00:28:36,480
of power as we'll see soon

781
00:28:36,480 --> 00:28:38,960
and the third property is

782
00:28:38,960 --> 00:28:41,039
function hiding which basically says

783
00:28:41,039 --> 00:28:43,440
that the messages of the receiver hide

784
00:28:43,440 --> 00:28:45,520
the function f

785
00:28:45,520 --> 00:28:47,200
okay

786
00:28:47,200 --> 00:28:50,080
good so

787
00:28:50,559 --> 00:28:53,039
this primitive is essentially

788
00:28:53,039 --> 00:28:55,520
morally speaking a generalization of the

789
00:28:55,520 --> 00:28:57,679
notion of trapped or hash functions

790
00:28:57,679 --> 00:28:59,840
which was introduced by dotlingberg

791
00:28:59,840 --> 00:29:00,880
schei

792
00:29:00,880 --> 00:29:03,919
mala volta moore and ostrovsky

793
00:29:03,919 --> 00:29:06,240
a couple of years ago and

794
00:29:06,240 --> 00:29:08,320
there are some syntactic differences but

795
00:29:08,320 --> 00:29:11,200
morally speaking you can think of

796
00:29:11,200 --> 00:29:13,360
door hash function that's essentially

797
00:29:13,360 --> 00:29:15,520
two round version of interactive

798
00:29:15,520 --> 00:29:17,600
trapdoor hashing again there are some

799
00:29:17,600 --> 00:29:19,360
minus interactive differences but this

800
00:29:19,360 --> 00:29:22,240
is essentially the the way to look at it

801
00:29:22,240 --> 00:29:24,960
and interactive trap.hashing essentially

802
00:29:24,960 --> 00:29:27,279
says okay let's allow more interaction

803
00:29:27,279 --> 00:29:28,880
right

804
00:29:28,880 --> 00:29:30,159
but the rest of the properties are

805
00:29:30,159 --> 00:29:32,320
essentially the same and trampoline hash

806
00:29:32,320 --> 00:29:34,960
functions were originally introduced for

807
00:29:34,960 --> 00:29:36,559
uh constructing raid efficient

808
00:29:36,559 --> 00:29:38,159
cryptographic primitives like rate one

809
00:29:38,159 --> 00:29:41,520
oblivious transfer pir and so on

810
00:29:41,520 --> 00:29:44,480
but then in 2020 um

811
00:29:44,480 --> 00:29:47,120
brokerski uh koplan mar actually showed

812
00:29:47,120 --> 00:29:47,840
that

813
00:29:47,840 --> 00:29:49,840
you can use this primitive to build

814
00:29:49,840 --> 00:29:51,760
correlation interactable hash functions

815
00:29:51,760 --> 00:29:53,520
okay and this is where

816
00:29:53,520 --> 00:29:56,240
the focus on this x comes in

817
00:29:56,240 --> 00:29:59,200
okay and again the name of this limited

818
00:29:59,200 --> 00:30:00,399
interactive type of hashing is

819
00:30:00,399 --> 00:30:02,880
essentially coming from uh hash

820
00:30:02,880 --> 00:30:04,080
functions

821
00:30:04,080 --> 00:30:06,880
okay so now let's see why this primitive

822
00:30:06,880 --> 00:30:08,799
is useful for building correlation

823
00:30:08,799 --> 00:30:11,760
interactable hash functions

824
00:30:11,760 --> 00:30:12,960
so

825
00:30:12,960 --> 00:30:15,520
the implication from trap door hash

826
00:30:15,520 --> 00:30:17,440
functions so two round version of

827
00:30:17,440 --> 00:30:19,360
interactive trapped or hashing

828
00:30:19,360 --> 00:30:21,039
two correlation interactable hash

829
00:30:21,039 --> 00:30:23,520
functions was actually shown by uh by

830
00:30:23,520 --> 00:30:25,600
bracos geek of landmark and this was a

831
00:30:25,600 --> 00:30:27,840
general implication the problem is that

832
00:30:27,840 --> 00:30:30,320
trapdoor hash functions are only known

833
00:30:30,320 --> 00:30:33,200
for very small class of functions namely

834
00:30:33,200 --> 00:30:35,440
constant degree polynomials and again if

835
00:30:35,440 --> 00:30:37,440
you look at the restrictions all the

836
00:30:37,440 --> 00:30:39,600
properties that are required maybe this

837
00:30:39,600 --> 00:30:41,919
is not so surprising that this is a hard

838
00:30:41,919 --> 00:30:44,559
to build primitive

839
00:30:44,559 --> 00:30:46,399
and what we show is essentially a

840
00:30:46,399 --> 00:30:47,919
two-step approach

841
00:30:47,919 --> 00:30:50,640
so first as is often the case in uh you

842
00:30:50,640 --> 00:30:52,000
know in in secure computational

843
00:30:52,000 --> 00:30:54,159
literature if you allow more interaction

844
00:30:54,159 --> 00:30:56,080
you can achieve more and this is what we

845
00:30:56,080 --> 00:30:58,480
show that if you allow for more uh

846
00:30:58,480 --> 00:31:00,799
interaction by by generalizing the

847
00:31:00,799 --> 00:31:02,720
notion of trapdoor hash to interact with

848
00:31:02,720 --> 00:31:05,440
prop.hash you can capture a bigger class

849
00:31:05,440 --> 00:31:07,440
of computations

850
00:31:07,440 --> 00:31:09,360
so in fact by just going to even

851
00:31:09,360 --> 00:31:10,880
arbitrary constant rounds you can

852
00:31:10,880 --> 00:31:13,279
already do tc0

853
00:31:13,279 --> 00:31:15,039
and now this may seem a little bit

854
00:31:15,039 --> 00:31:16,000
strange

855
00:31:16,000 --> 00:31:17,760
well now that we have all this

856
00:31:17,760 --> 00:31:19,519
interaction what do we do with it right

857
00:31:19,519 --> 00:31:21,360
uh how does it help and help us in

858
00:31:21,360 --> 00:31:23,360
building music so we show that you can

859
00:31:23,360 --> 00:31:25,519
actually do round compression so you can

860
00:31:25,519 --> 00:31:27,919
actually take this constant on protocols

861
00:31:27,919 --> 00:31:31,039
uh um and then compress it to build uh

862
00:31:31,039 --> 00:31:32,799
or collapse its round to build

863
00:31:32,799 --> 00:31:34,720
correlation interactable hash functions

864
00:31:34,720 --> 00:31:36,559
for the same family it's important here

865
00:31:36,559 --> 00:31:38,720
in this transformation that the starting

866
00:31:38,720 --> 00:31:40,399
interactive trap door hash is constant

867
00:31:40,399 --> 00:31:42,000
round

868
00:31:42,000 --> 00:31:43,840
okay otherwise uh

869
00:31:43,840 --> 00:31:45,840
the the first step is actually quite

870
00:31:45,840 --> 00:31:47,360
general if you allow for polynomial

871
00:31:47,360 --> 00:31:50,480
rounds you can even go to p slash poly

872
00:31:50,480 --> 00:31:51,840
okay

873
00:31:51,840 --> 00:31:52,799
so

874
00:31:52,799 --> 00:31:55,039
i will mainly talk about the second part

875
00:31:55,039 --> 00:31:55,840
here

876
00:31:55,840 --> 00:31:57,919
and the first part will be will be much

877
00:31:57,919 --> 00:32:00,640
briefer so let's see how do we do round

878
00:32:00,640 --> 00:32:02,880
compression

879
00:32:02,880 --> 00:32:04,720
so

880
00:32:04,720 --> 00:32:06,320
so this is the structure of uh

881
00:32:06,320 --> 00:32:08,399
interactive trapdoor hashing protocol

882
00:32:08,399 --> 00:32:09,600
and we want to

883
00:32:09,600 --> 00:32:12,559
build cih from it so here is what we do

884
00:32:12,559 --> 00:32:14,559
so the receiver

885
00:32:14,559 --> 00:32:17,760
he simply imagines an execution of

886
00:32:17,760 --> 00:32:19,760
this protocol so suppose i want to set

887
00:32:19,760 --> 00:32:21,360
the key for the hash function right

888
00:32:21,360 --> 00:32:24,240
that's that's my goal i want to define

889
00:32:24,240 --> 00:32:26,240
a hash function i want to define a key

890
00:32:26,240 --> 00:32:28,159
and then the hashing algorithm so what

891
00:32:28,159 --> 00:32:30,320
we do is we just imagine an execution of

892
00:32:30,320 --> 00:32:32,080
this protocol

893
00:32:32,080 --> 00:32:34,559
we imagine all the receiver messages and

894
00:32:34,559 --> 00:32:36,960
then we collect them together

895
00:32:36,960 --> 00:32:40,480
and put them as part of the key where

896
00:32:40,480 --> 00:32:42,720
the key additionally contains a random

897
00:32:42,720 --> 00:32:45,200
pad a random string view okay which is

898
00:32:45,200 --> 00:32:48,159
let's say n bits where n is

899
00:32:48,159 --> 00:32:50,720
larger than the security parameter

900
00:32:50,720 --> 00:32:52,480
okay now of course this seems a little

901
00:32:52,480 --> 00:32:54,320
bit strange right how can we imagine the

902
00:32:54,320 --> 00:32:56,240
messages of the receiver without

903
00:32:56,240 --> 00:32:57,840
thinking about the sender messages right

904
00:32:57,840 --> 00:32:59,600
the receiver messages depend upon the

905
00:32:59,600 --> 00:33:02,480
sender messages so we simply guess them

906
00:33:02,480 --> 00:33:04,320
okay so we guess

907
00:33:04,320 --> 00:33:06,559
the sender's messages while generating

908
00:33:06,559 --> 00:33:08,840
this key

909
00:33:08,840 --> 00:33:11,279
okay and now

910
00:33:11,279 --> 00:33:13,919
to evaluate the hash function uh the

911
00:33:13,919 --> 00:33:16,880
sender will take the input x right on

912
00:33:16,880 --> 00:33:18,960
which he wants to evaluate the hash and

913
00:33:18,960 --> 00:33:20,880
then in his mind he will just run an

914
00:33:20,880 --> 00:33:23,120
execution of this interactive hashing

915
00:33:23,120 --> 00:33:25,120
protocol so for the first round it will

916
00:33:25,120 --> 00:33:27,039
take the first part of the key and treat

917
00:33:27,039 --> 00:33:28,799
it as the receiver's message then

918
00:33:28,799 --> 00:33:30,720
compute its next message and then you

919
00:33:30,720 --> 00:33:32,480
know take the second part of the key

920
00:33:32,480 --> 00:33:34,000
treat it as a second receiver message

921
00:33:34,000 --> 00:33:35,039
and so on

922
00:33:35,039 --> 00:33:36,960
at the end it will obtain this encoding

923
00:33:36,960 --> 00:33:38,559
e

924
00:33:38,559 --> 00:33:40,640
and now the final output of the hash

925
00:33:40,640 --> 00:33:43,039
will be this encoding e xor with this

926
00:33:43,039 --> 00:33:45,120
random pad u

927
00:33:45,120 --> 00:33:47,200
okay

928
00:33:47,200 --> 00:33:49,039
okay so now we want to show that this

929
00:33:49,039 --> 00:33:51,279
construction is actually correlation

930
00:33:51,279 --> 00:33:53,120
intractable

931
00:33:53,120 --> 00:33:55,039
so this is the the definition of

932
00:33:55,039 --> 00:33:57,440
correlation interactivity again and we

933
00:33:57,440 --> 00:33:59,600
want to show that this construction here

934
00:33:59,600 --> 00:34:01,679
in the small box

935
00:34:01,679 --> 00:34:03,840
where k is the key actually achieves

936
00:34:03,840 --> 00:34:06,159
correlation interactability

937
00:34:06,159 --> 00:34:08,159
okay so here is how we do it

938
00:34:08,159 --> 00:34:10,239
so first uh i'll show you

939
00:34:10,239 --> 00:34:11,918
why this is true for the case of two

940
00:34:11,918 --> 00:34:13,679
rounds and this is essentially the proof

941
00:34:13,679 --> 00:34:16,719
from rucker speak up learn more

942
00:34:16,719 --> 00:34:18,879
so in the two-round case the receiver

943
00:34:18,879 --> 00:34:20,639
has only one message the sender has only

944
00:34:20,639 --> 00:34:23,040
one message right

945
00:34:23,040 --> 00:34:23,839
okay

946
00:34:23,839 --> 00:34:25,760
so now

947
00:34:25,760 --> 00:34:28,480
first of all from the correctness of the

948
00:34:28,480 --> 00:34:30,399
of the trapdoor hashing right we have

949
00:34:30,399 --> 00:34:32,639
that the output of the function f on x

950
00:34:32,639 --> 00:34:34,560
is equal to the xor of the encoding and

951
00:34:34,560 --> 00:34:36,000
the decoding

952
00:34:36,000 --> 00:34:38,560
and now let's say we let's say that this

953
00:34:38,560 --> 00:34:40,079
construction is not correlation

954
00:34:40,079 --> 00:34:41,359
intractable

955
00:34:41,359 --> 00:34:43,679
so then on the left hand side we have

956
00:34:43,679 --> 00:34:44,399
that

957
00:34:44,399 --> 00:34:46,399
the adversary actually managed to come

958
00:34:46,399 --> 00:34:49,199
up managed to

959
00:34:49,199 --> 00:34:52,480
obtain an x such that h of x is equal to

960
00:34:52,480 --> 00:34:55,280
f of x right with high property

961
00:34:55,280 --> 00:34:56,079
okay

962
00:34:56,079 --> 00:34:59,040
so now on the right hand side uh we can

963
00:34:59,040 --> 00:35:00,960
just cancel out the encodings right in

964
00:35:00,960 --> 00:35:02,400
the in the two equations

965
00:35:02,400 --> 00:35:05,119
and now we get that uh the decoding d is

966
00:35:05,119 --> 00:35:07,599
actually equal to the pad the random pad

967
00:35:07,599 --> 00:35:08,320
u

968
00:35:08,320 --> 00:35:10,880
okay and remember that the random pad u

969
00:35:10,880 --> 00:35:13,680
is uh n bits long which is potentially

970
00:35:13,680 --> 00:35:16,240
much longer much larger sorry much

971
00:35:16,240 --> 00:35:18,320
longer than the security parameter

972
00:35:18,320 --> 00:35:22,160
lambda okay so in particular

973
00:35:22,160 --> 00:35:24,160
the decoding d actually has a pretty

974
00:35:24,160 --> 00:35:26,640
sparse range because it only depends on

975
00:35:26,640 --> 00:35:29,200
the message this very small message that

976
00:35:29,200 --> 00:35:30,480
the sender sent

977
00:35:30,480 --> 00:35:31,200
right

978
00:35:31,200 --> 00:35:34,320
so space is quite sparse um

979
00:35:34,320 --> 00:35:37,440
whereas u actually is n bits long so

980
00:35:37,440 --> 00:35:39,359
therefore we can argue that uh the

981
00:35:39,359 --> 00:35:42,480
probability that d is actually equals uh

982
00:35:42,480 --> 00:35:44,640
u adversary actually managed to find an

983
00:35:44,640 --> 00:35:47,520
x such that this holds is very small it

984
00:35:47,520 --> 00:35:49,599
is negligible so this is essentially the

985
00:35:49,599 --> 00:35:52,480
proof for the two round case

986
00:35:52,480 --> 00:35:55,040
and now let's try to generalize it to

987
00:35:55,040 --> 00:35:57,119
more than two rounds

988
00:35:57,119 --> 00:35:59,520
so let's say four rounds okay so now

989
00:35:59,520 --> 00:36:01,119
there are two receiver messages and

990
00:36:01,119 --> 00:36:03,760
there are two sender messages

991
00:36:03,760 --> 00:36:04,800
okay

992
00:36:04,800 --> 00:36:07,119
so again recall that the way we

993
00:36:07,119 --> 00:36:09,040
constructed the key was by guessing the

994
00:36:09,040 --> 00:36:10,800
sender message right

995
00:36:10,800 --> 00:36:12,560
so first of all the additive

996
00:36:12,560 --> 00:36:14,320
reconstruction property now will only

997
00:36:14,320 --> 00:36:16,480
hold uh you know up to the probability

998
00:36:16,480 --> 00:36:18,480
that our guess is actually correct right

999
00:36:18,480 --> 00:36:20,160
we we made a guess about the sender

1000
00:36:20,160 --> 00:36:22,560
message and now if the sender actually

1001
00:36:22,560 --> 00:36:24,400
happened to choose an x which results in

1002
00:36:24,400 --> 00:36:27,119
the same small message then we have

1003
00:36:27,119 --> 00:36:29,760
additive reconstruction correctness

1004
00:36:29,760 --> 00:36:32,400
okay but of course this

1005
00:36:32,400 --> 00:36:34,160
this guess will you know will only be

1006
00:36:34,160 --> 00:36:35,760
correct with some small probability

1007
00:36:35,760 --> 00:36:38,320
right roughly 2 to the minus lambda

1008
00:36:38,320 --> 00:36:40,000
so can we still prove correlation in

1009
00:36:40,000 --> 00:36:42,560
fact ability

1010
00:36:42,560 --> 00:36:45,119
so so here is an oversimplified argument

1011
00:36:45,119 --> 00:36:47,200
why we can still argue

1012
00:36:47,200 --> 00:36:48,960
so note that our guess is correct with

1013
00:36:48,960 --> 00:36:50,880
probability two to the minus lambda

1014
00:36:50,880 --> 00:36:52,320
right and again i'm cheating a little

1015
00:36:52,320 --> 00:36:55,040
bit here but let's say this is the case

1016
00:36:55,040 --> 00:36:57,839
then from guessing correctness uh we

1017
00:36:57,839 --> 00:37:00,320
have that uh you know d actually matches

1018
00:37:00,320 --> 00:37:01,839
the random pad u

1019
00:37:01,839 --> 00:37:04,400
with probability still at least two to

1020
00:37:04,400 --> 00:37:06,400
the minus lambda right so it's not too

1021
00:37:06,400 --> 00:37:08,560
small it's small but not too small

1022
00:37:08,560 --> 00:37:10,240
but you know from the same argument as

1023
00:37:10,240 --> 00:37:13,599
before from the sparsity of uh d right

1024
00:37:13,599 --> 00:37:15,280
the decoding value

1025
00:37:15,280 --> 00:37:16,640
we have that it's

1026
00:37:16,640 --> 00:37:18,720
the probability of d matching u is

1027
00:37:18,720 --> 00:37:20,640
actually upper bounded by two to the

1028
00:37:20,640 --> 00:37:24,480
minus omega n right so it's very small

1029
00:37:24,480 --> 00:37:26,720
so when n is substantially larger than

1030
00:37:26,720 --> 00:37:29,040
lambda then we get a contradiction right

1031
00:37:29,040 --> 00:37:30,720
the left hand side is smaller than the

1032
00:37:30,720 --> 00:37:33,599
right hand side which is yeah so

1033
00:37:33,599 --> 00:37:35,280
so you get a contradiction

1034
00:37:35,280 --> 00:37:37,119
okay so so i was cheating a little bit

1035
00:37:37,119 --> 00:37:39,040
here um because

1036
00:37:39,040 --> 00:37:40,880
uh here i sort of assumed that the

1037
00:37:40,880 --> 00:37:43,119
adversary can not infer any information

1038
00:37:43,119 --> 00:37:45,359
about our guesses by looking at the at

1039
00:37:45,359 --> 00:37:46,400
the key

1040
00:37:46,400 --> 00:37:48,240
the hash key but that's not quite true

1041
00:37:48,240 --> 00:37:49,200
right

1042
00:37:49,200 --> 00:37:50,880
the correlation interactivity game is

1043
00:37:50,880 --> 00:37:52,640
adaptive in the sense that the adversary

1044
00:37:52,640 --> 00:37:54,800
sees the key and then has to come up

1045
00:37:54,800 --> 00:37:57,520
with an x and in our case the key

1046
00:37:57,520 --> 00:37:59,440
actually encodes some information about

1047
00:37:59,440 --> 00:38:02,640
our guesses right how well you know we

1048
00:38:02,640 --> 00:38:04,400
can say that the the

1049
00:38:04,400 --> 00:38:06,480
receiver messages hide information about

1050
00:38:06,480 --> 00:38:09,200
the guesses but it's not a they don't

1051
00:38:09,200 --> 00:38:11,200
hide it perfectly right the function

1052
00:38:11,200 --> 00:38:14,720
hiding property is only computational

1053
00:38:14,720 --> 00:38:16,480
okay so in particular the function

1054
00:38:16,480 --> 00:38:18,320
hiding property says that if i look at

1055
00:38:18,320 --> 00:38:20,480
any receiver message uh you know which

1056
00:38:20,480 --> 00:38:22,640
depends on the state of the receiver

1057
00:38:22,640 --> 00:38:24,320
here the state actually depends on the

1058
00:38:24,320 --> 00:38:26,800
prior sender messages then it's

1059
00:38:26,800 --> 00:38:28,880
computationally indistinguishable from a

1060
00:38:28,880 --> 00:38:31,200
randomly sampled string

1061
00:38:31,200 --> 00:38:32,800
so we have only uh you know

1062
00:38:32,800 --> 00:38:34,720
computational function hiding so we

1063
00:38:34,720 --> 00:38:36,880
still need to make the previous argument

1064
00:38:36,880 --> 00:38:39,680
uh you know work um and we can do it by

1065
00:38:39,680 --> 00:38:41,119
you know

1066
00:38:41,119 --> 00:38:43,040
by basically strengthening the function

1067
00:38:43,040 --> 00:38:44,960
writing property now it's going to be

1068
00:38:44,960 --> 00:38:46,880
sub-exponential function hiding and we

1069
00:38:46,880 --> 00:38:48,640
can play with the security parameters

1070
00:38:48,640 --> 00:38:51,280
carefully so we can make the security

1071
00:38:51,280 --> 00:38:54,079
parameter for the first round uh you

1072
00:38:54,079 --> 00:38:56,720
know let's say some lambda 1 for the

1073
00:38:56,720 --> 00:38:58,400
second round we can make it slightly

1074
00:38:58,400 --> 00:39:00,560
bigger lambda 2 where lambda 2 is bigger

1075
00:39:00,560 --> 00:39:03,119
than lambda 1 and so on right and

1076
00:39:03,119 --> 00:39:05,200
the the structure of our protocol allows

1077
00:39:05,200 --> 00:39:06,960
for playing with the security parameters

1078
00:39:06,960 --> 00:39:08,880
in this manner right for each round we

1079
00:39:08,880 --> 00:39:10,880
can actually pick a different security

1080
00:39:10,880 --> 00:39:12,640
parameter

1081
00:39:12,640 --> 00:39:14,960
and now the idea is that if you look at

1082
00:39:14,960 --> 00:39:16,640
the probability of the guess the

1083
00:39:16,640 --> 00:39:18,800
center's message guess that we made

1084
00:39:18,800 --> 00:39:20,960
being correct it's essentially the same

1085
00:39:20,960 --> 00:39:23,359
as before 2 to the minus lambda 1 but we

1086
00:39:23,359 --> 00:39:25,119
lose a little bit here

1087
00:39:25,119 --> 00:39:26,880
because of the the function hiding

1088
00:39:26,880 --> 00:39:28,880
property right but how much do we lose

1089
00:39:28,880 --> 00:39:30,640
we lose essentially 2 to the minus

1090
00:39:30,640 --> 00:39:31,680
lambda 2

1091
00:39:31,680 --> 00:39:34,320
to the c where c is some constant right

1092
00:39:34,320 --> 00:39:36,240
so so we lose a little bit but not too

1093
00:39:36,240 --> 00:39:37,680
much by playing with the security

1094
00:39:37,680 --> 00:39:39,599
parameters

1095
00:39:39,599 --> 00:39:41,119
so the first part is again coming from

1096
00:39:41,119 --> 00:39:44,000
the random case and the second loss is

1097
00:39:44,000 --> 00:39:46,240
because of the sub exponential function

1098
00:39:46,240 --> 00:39:48,240
hiding property

1099
00:39:48,240 --> 00:39:50,960
so now you can make this idea you know

1100
00:39:50,960 --> 00:39:52,800
more general you can extend it to

1101
00:39:52,800 --> 00:39:54,960
constant rounds or even log log rounds

1102
00:39:54,960 --> 00:39:56,720
and more or less the same proof as

1103
00:39:56,720 --> 00:39:58,160
earlier works

1104
00:39:58,160 --> 00:39:59,680
just that you have to you have to take

1105
00:39:59,680 --> 00:40:01,920
into account the loss due to function

1106
00:40:01,920 --> 00:40:04,400
hiding but otherwise the same idea as

1107
00:40:04,400 --> 00:40:06,560
before works

1108
00:40:06,560 --> 00:40:07,520
okay

1109
00:40:07,520 --> 00:40:10,240
so that's essentially why we can build

1110
00:40:10,240 --> 00:40:11,920
coordination interactive hash functions

1111
00:40:11,920 --> 00:40:14,880
from interactive drug rehashing

1112
00:40:14,880 --> 00:40:16,079
okay

1113
00:40:16,079 --> 00:40:18,400
so now let me just give you very very

1114
00:40:18,400 --> 00:40:21,119
short overview of why more interaction

1115
00:40:21,119 --> 00:40:23,839
can help us in expanding the class of

1116
00:40:23,839 --> 00:40:26,800
computations that we can uh

1117
00:40:26,800 --> 00:40:28,079
that that we can

1118
00:40:28,079 --> 00:40:30,800
build uh achieve by an interactive drug

1119
00:40:30,800 --> 00:40:32,240
progression

1120
00:40:32,240 --> 00:40:35,119
okay so the approach is very standard

1121
00:40:35,119 --> 00:40:37,040
you know how we how we work in secure

1122
00:40:37,040 --> 00:40:38,960
computational protocols let's compute

1123
00:40:38,960 --> 00:40:40,560
layer by layer right and this is

1124
00:40:40,560 --> 00:40:42,319
essentially what we will do here as well

1125
00:40:42,319 --> 00:40:44,560
we take our tcs circuit layerize it and

1126
00:40:44,560 --> 00:40:47,280
now we will evaluate it layer by layer

1127
00:40:47,280 --> 00:40:49,520
so for the first layer we will

1128
00:40:49,520 --> 00:40:50,880
you know come up with an interactive

1129
00:40:50,880 --> 00:40:52,720
trapdoor hashing protocol

1130
00:40:52,720 --> 00:40:54,800
and and use it to evaluate the first

1131
00:40:54,800 --> 00:40:57,520
layer of gates and then second layer of

1132
00:40:57,520 --> 00:40:58,880
gates and then you know just compose

1133
00:40:58,880 --> 00:41:00,720
them together so that we get interactive

1134
00:41:00,720 --> 00:41:02,560
proper hashing for

1135
00:41:02,560 --> 00:41:04,880
tc0 circuits

1136
00:41:04,880 --> 00:41:07,440
one thing that i'm going to um

1137
00:41:07,440 --> 00:41:09,280
that i'm going to remark is that you

1138
00:41:09,280 --> 00:41:11,680
know interactive trap.hashing uh does

1139
00:41:11,680 --> 00:41:13,839
not give you the output uh as it is

1140
00:41:13,839 --> 00:41:15,119
right it gives you it in a secret

1141
00:41:15,119 --> 00:41:18,079
sharing form so we need to xor those

1142
00:41:18,079 --> 00:41:20,400
values to proceed to the next

1143
00:41:20,400 --> 00:41:22,480
layer of computation and this extorting

1144
00:41:22,480 --> 00:41:24,560
or shears can be absorbed essentially in

1145
00:41:24,560 --> 00:41:26,240
the in the functionality of the next

1146
00:41:26,240 --> 00:41:29,760
layer so i'm not going to mention it

1147
00:41:29,760 --> 00:41:32,000
so now let's just talk about one there

1148
00:41:32,000 --> 00:41:32,880
which

1149
00:41:32,880 --> 00:41:35,040
consists of threshold gates or rather

1150
00:41:35,040 --> 00:41:38,079
xor then threshold gears okay and let's

1151
00:41:38,079 --> 00:41:40,880
just think about a single gate

1152
00:41:40,880 --> 00:41:42,560
so what we do is

1153
00:41:42,560 --> 00:41:45,359
in principle we we decompose this

1154
00:41:45,359 --> 00:41:48,400
computation into two different uh linear

1155
00:41:48,400 --> 00:41:50,480
functions

1156
00:41:50,480 --> 00:41:52,880
and then we have trap dot hash functions

1157
00:41:52,880 --> 00:41:54,560
uh we already know trapped or hash

1158
00:41:54,560 --> 00:41:56,640
functions for linear functions so we can

1159
00:41:56,640 --> 00:41:58,800
evaluate each of these functions wire

1160
00:41:58,800 --> 00:42:00,960
such as wrapper hash function and then

1161
00:42:00,960 --> 00:42:03,359
we put them together and we get uh

1162
00:42:03,359 --> 00:42:04,880
interactive trap door hashing for a

1163
00:42:04,880 --> 00:42:06,480
threshold gate

1164
00:42:06,480 --> 00:42:09,119
okay so now if you're paying attention

1165
00:42:09,119 --> 00:42:10,720
it you'll see that i just pulled off a

1166
00:42:10,720 --> 00:42:12,520
magic trick right so

1167
00:42:12,520 --> 00:42:14,160
[Music]

1168
00:42:14,160 --> 00:42:16,960
what i did is i took a threshold gate or

1169
00:42:16,960 --> 00:42:19,920
rather an exorbitant threshold gate

1170
00:42:19,920 --> 00:42:21,760
which involves non-linear computation

1171
00:42:21,760 --> 00:42:23,760
and i decomposed it into two linear

1172
00:42:23,760 --> 00:42:25,599
functions right so that doesn't sound

1173
00:42:25,599 --> 00:42:27,599
quite right right if i could do that i

1174
00:42:27,599 --> 00:42:29,200
could just put these two linear

1175
00:42:29,200 --> 00:42:30,960
functions together and i could do it

1176
00:42:30,960 --> 00:42:32,800
non-interactively right so where is the

1177
00:42:32,800 --> 00:42:34,240
interaction

1178
00:42:34,240 --> 00:42:36,480
so the crucial use of interaction is in

1179
00:42:36,480 --> 00:42:38,400
how we actually obtain the description

1180
00:42:38,400 --> 00:42:40,400
of these linear functions so the main

1181
00:42:40,400 --> 00:42:41,920
point is that

1182
00:42:41,920 --> 00:42:44,240
we require the sender and the receiver

1183
00:42:44,240 --> 00:42:46,640
to do some non-linear processing uh

1184
00:42:46,640 --> 00:42:48,319
which is intermediate and it's outside

1185
00:42:48,319 --> 00:42:51,200
the protocol and that helps them obtain

1186
00:42:51,200 --> 00:42:53,200
the description of the second linear

1187
00:42:53,200 --> 00:42:55,119
function and then they can continue

1188
00:42:55,119 --> 00:42:56,800
right so this is how we

1189
00:42:56,800 --> 00:42:58,960
we we decompose this computation into

1190
00:42:58,960 --> 00:43:01,440
two simple functions

1191
00:43:01,440 --> 00:43:03,760
and this is all i want to say about uh

1192
00:43:03,760 --> 00:43:06,000
this construction the details on how

1193
00:43:06,000 --> 00:43:07,680
what are the two linear functions and so

1194
00:43:07,680 --> 00:43:10,640
on uh you can find them in the paper or

1195
00:43:10,640 --> 00:43:13,200
in a separate talk by shenzhen

1196
00:43:13,200 --> 00:43:14,400
um

1197
00:43:14,400 --> 00:43:16,480
the details here are not that

1198
00:43:16,480 --> 00:43:18,960
not that complicated

1199
00:43:18,960 --> 00:43:20,480
okay

1200
00:43:20,480 --> 00:43:22,800
so that was uh all i wanted to talk

1201
00:43:22,800 --> 00:43:24,560
about the current state of affairs in

1202
00:43:24,560 --> 00:43:27,200
non-interactive zero knowledge um let me

1203
00:43:27,200 --> 00:43:29,599
now proceed to the second part

1204
00:43:29,599 --> 00:43:31,520
of the talk where i'll talk a little bit

1205
00:43:31,520 --> 00:43:35,040
about succinct non-interactive arguments

1206
00:43:35,040 --> 00:43:35,839
okay

1207
00:43:35,839 --> 00:43:37,200
so

1208
00:43:37,200 --> 00:43:39,119
so think non-interactive arguments or

1209
00:43:39,119 --> 00:43:42,000
slogs in short

1210
00:43:42,000 --> 00:43:43,839
essentially the same setting as before

1211
00:43:43,839 --> 00:43:44,720
where

1212
00:43:44,720 --> 00:43:46,240
you know the approver wants to prove

1213
00:43:46,240 --> 00:43:48,960
some statement to the verifier here i've

1214
00:43:48,960 --> 00:43:50,880
i've taken a tutoring machine

1215
00:43:50,880 --> 00:43:52,960
model of representation

1216
00:43:52,960 --> 00:43:54,720
and he wants to convince the verifier of

1217
00:43:54,720 --> 00:43:57,280
the statement via a non-infractive proof

1218
00:43:57,280 --> 00:43:59,359
um the key requirement here is that the

1219
00:43:59,359 --> 00:44:01,280
verification time both the proof size

1220
00:44:01,280 --> 00:44:03,520
and the verification time is quite small

1221
00:44:03,520 --> 00:44:05,359
smaller than the time to

1222
00:44:05,359 --> 00:44:06,839
to run the

1223
00:44:06,839 --> 00:44:09,440
machine and as in the case of

1224
00:44:09,440 --> 00:44:10,960
non-attractive zero knowledge this

1225
00:44:10,960 --> 00:44:12,800
notion is also impossible to achieve in

1226
00:44:12,800 --> 00:44:14,720
the plane model here

1227
00:44:14,720 --> 00:44:16,560
the impossibility comes you know if

1228
00:44:16,560 --> 00:44:19,839
you're talking about non-uniform provers

1229
00:44:19,839 --> 00:44:22,079
so again typically we either supplement

1230
00:44:22,079 --> 00:44:24,400
the model with the crs or vinyl mortar

1231
00:44:24,400 --> 00:44:28,400
to bypass impossibility results um

1232
00:44:28,400 --> 00:44:30,800
and just like the case of music the main

1233
00:44:30,800 --> 00:44:32,960
question that i'm interested in here is

1234
00:44:32,960 --> 00:44:36,000
what assumptions can we use to build uh

1235
00:44:36,000 --> 00:44:37,359
slots

1236
00:44:37,359 --> 00:44:39,359
okay

1237
00:44:39,359 --> 00:44:42,560
in particular starts for np

1238
00:44:42,560 --> 00:44:45,280
so here is the state of appears um

1239
00:44:45,280 --> 00:44:48,079
we can build snarks for np if we allow

1240
00:44:48,079 --> 00:44:51,280
for either the random oracle model or uh

1241
00:44:51,280 --> 00:44:52,720
knowledge type assumptions right

1242
00:44:52,720 --> 00:44:54,960
assumptions that involve extractability

1243
00:44:54,960 --> 00:44:56,640
um

1244
00:44:56,640 --> 00:44:58,240
and uh

1245
00:44:58,240 --> 00:45:00,079
this this is a very long line of work

1246
00:45:00,079 --> 00:45:02,000
starting from the work of macaulay and

1247
00:45:02,000 --> 00:45:03,839
then you know

1248
00:45:03,839 --> 00:45:06,240
very very

1249
00:45:06,240 --> 00:45:07,040
very

1250
00:45:07,040 --> 00:45:09,040
impressive sequence of works in fact

1251
00:45:09,040 --> 00:45:10,960
very productive line of research which

1252
00:45:10,960 --> 00:45:13,359
is very very active presently

1253
00:45:13,359 --> 00:45:15,680
and i should mention that many of the

1254
00:45:15,680 --> 00:45:16,960
more recent schemes have been

1255
00:45:16,960 --> 00:45:18,960
implemented and some of them are

1256
00:45:18,960 --> 00:45:20,560
actually used in practice this is in

1257
00:45:20,560 --> 00:45:21,599
fact

1258
00:45:21,599 --> 00:45:22,880
um

1259
00:45:22,880 --> 00:45:25,440
you know responsible for many and many

1260
00:45:25,440 --> 00:45:27,280
new startups in the blockchain area

1261
00:45:27,280 --> 00:45:28,480
right

1262
00:45:28,480 --> 00:45:31,599
okay so this is the side of

1263
00:45:31,599 --> 00:45:33,280
the side of result that involves either

1264
00:45:33,280 --> 00:45:35,520
random oracle or some non-standard

1265
00:45:35,520 --> 00:45:36,640
assumptions

1266
00:45:36,640 --> 00:45:39,440
and unfortunately there is a barrier for

1267
00:45:39,440 --> 00:45:41,839
building snots for np from standard

1268
00:45:41,839 --> 00:45:43,920
assumptions and this is the the

1269
00:45:43,920 --> 00:45:46,160
beautiful work of gentry wicks

1270
00:45:46,160 --> 00:45:47,520
i should mention that there are some

1271
00:45:47,520 --> 00:45:50,240
caveats here but i'll put them aside for

1272
00:45:50,240 --> 00:45:53,280
now maybe mention them at the end

1273
00:45:53,280 --> 00:45:56,079
um so given this uh this lower bound of

1274
00:45:56,079 --> 00:45:58,400
gentry bricks we can ask whether we can

1275
00:45:58,400 --> 00:46:02,160
build snox for sub classes of np

1276
00:46:02,160 --> 00:46:03,680
while still relying on standard

1277
00:46:03,680 --> 00:46:05,839
assumptions

1278
00:46:05,839 --> 00:46:08,000
so the main subclass that i want to

1279
00:46:08,000 --> 00:46:09,680
mention is

1280
00:46:09,680 --> 00:46:12,640
snarks for p

1281
00:46:12,640 --> 00:46:14,240
so deterministic polynomial time

1282
00:46:14,240 --> 00:46:17,200
computation um same setting as before

1283
00:46:17,200 --> 00:46:20,480
except that now the client uh is asking

1284
00:46:20,480 --> 00:46:23,040
you know the prover to perform some

1285
00:46:23,040 --> 00:46:24,400
deterministic polynomial time

1286
00:46:24,400 --> 00:46:25,920
computation and prove that it did so

1287
00:46:25,920 --> 00:46:28,079
correctly

1288
00:46:28,079 --> 00:46:28,960
so

1289
00:46:28,960 --> 00:46:30,880
obviously this is a natural and

1290
00:46:30,880 --> 00:46:33,760
important subclass of np but uh you know

1291
00:46:33,760 --> 00:46:35,520
which is independently interesting but

1292
00:46:35,520 --> 00:46:37,280
also has some useful cryptographic

1293
00:46:37,280 --> 00:46:39,680
applications uh directly so we know that

1294
00:46:39,680 --> 00:46:43,040
using nzx and fhe we can build uh

1295
00:46:43,040 --> 00:46:44,240
you know

1296
00:46:44,240 --> 00:46:46,079
shorter analytics which where the the

1297
00:46:46,079 --> 00:46:47,599
size of the music doesn't depend on the

1298
00:46:47,599 --> 00:46:50,079
relation size only on the witness size

1299
00:46:50,079 --> 00:46:51,839
and now using snarks for p you can

1300
00:46:51,839 --> 00:46:53,599
transfer this property also to the

1301
00:46:53,599 --> 00:46:56,560
verification time

1302
00:46:56,560 --> 00:46:58,640
you can also use uh snarks for p

1303
00:46:58,640 --> 00:47:01,920
together with the suitable sequential

1304
00:47:01,920 --> 00:47:04,400
functions uh to build uh verifiable

1305
00:47:04,400 --> 00:47:06,960
delay functions

1306
00:47:06,960 --> 00:47:08,000
okay

1307
00:47:08,000 --> 00:47:10,560
so prior work in this regime is roughly

1308
00:47:10,560 --> 00:47:13,280
in two categories uh so first category

1309
00:47:13,280 --> 00:47:14,960
which is also a very productive line of

1310
00:47:14,960 --> 00:47:17,040
research starting from the work of kalai

1311
00:47:17,040 --> 00:47:18,560
raj and woodroom

1312
00:47:18,560 --> 00:47:21,040
so it restricts the setting by allowing

1313
00:47:21,040 --> 00:47:23,280
the verifier to hold a secret key and

1314
00:47:23,280 --> 00:47:25,599
use that for verification so this is the

1315
00:47:25,599 --> 00:47:27,920
designated verified setting and here we

1316
00:47:27,920 --> 00:47:30,640
can actually do uh we can actually

1317
00:47:30,640 --> 00:47:32,480
achieve snarks for p and even some other

1318
00:47:32,480 --> 00:47:34,800
subclasses of np uh by relying on

1319
00:47:34,800 --> 00:47:37,200
standard assumptions

1320
00:47:37,200 --> 00:47:39,520
but if we insist on public verification

1321
00:47:39,520 --> 00:47:41,359
where the proof can be verified by

1322
00:47:41,359 --> 00:47:44,319
anyone um then uh

1323
00:47:44,319 --> 00:47:47,119
again until a year ago uh

1324
00:47:47,119 --> 00:47:49,839
what we knew was to how um what was how

1325
00:47:49,839 --> 00:47:52,160
to build uh such troops from either

1326
00:47:52,160 --> 00:47:54,960
obfuscation style assumptions or some

1327
00:47:54,960 --> 00:47:56,640
new but non-standard assumptions on

1328
00:47:56,640 --> 00:47:58,720
bilinear maps

1329
00:47:58,720 --> 00:47:59,920
so the question

1330
00:47:59,920 --> 00:48:01,680
can ask is whether we can build snarks

1331
00:48:01,680 --> 00:48:05,280
for p from standard assumptions

1332
00:48:05,280 --> 00:48:08,400
and uh some uh really nice progress was

1333
00:48:08,400 --> 00:48:11,200
made in this direction uh last year uh

1334
00:48:11,200 --> 00:48:14,000
by javale atal who showed that if you

1335
00:48:14,000 --> 00:48:15,520
restrict the computation to bounded

1336
00:48:15,520 --> 00:48:18,000
depth then you can actually achieve

1337
00:48:18,000 --> 00:48:20,240
snarks for such circuits from

1338
00:48:20,240 --> 00:48:22,160
sub-exponential lwe and the result

1339
00:48:22,160 --> 00:48:24,160
improved upon a prior work of kennedy at

1340
00:48:24,160 --> 00:48:28,079
all that used stronger assumptions

1341
00:48:28,079 --> 00:48:31,839
okay so before even talking about uh how

1342
00:48:31,839 --> 00:48:33,599
you know whether we can resolve this

1343
00:48:33,599 --> 00:48:35,200
question or not let's actually see what

1344
00:48:35,200 --> 00:48:36,240
are the

1345
00:48:36,240 --> 00:48:37,920
what are the intuitive barriers towards

1346
00:48:37,920 --> 00:48:40,079
resolving this question

1347
00:48:40,079 --> 00:48:42,319
so

1348
00:48:42,319 --> 00:48:44,319
in the spirit of using fiat shamir with

1349
00:48:44,319 --> 00:48:46,000
correlation and tractability we can ask

1350
00:48:46,000 --> 00:48:48,880
whether we can round collapse succinct

1351
00:48:48,880 --> 00:48:50,640
interactive protocols right earlier we

1352
00:48:50,640 --> 00:48:52,720
were looking at arbitrary

1353
00:48:52,720 --> 00:48:54,400
public coin interactive proofs now we

1354
00:48:54,400 --> 00:48:56,000
can say well can we start from a

1355
00:48:56,000 --> 00:48:57,760
protocol which is succinct and then

1356
00:48:57,760 --> 00:48:59,760
apply

1357
00:48:59,760 --> 00:49:02,000
the cih transformation on it so the

1358
00:49:02,000 --> 00:49:03,680
canonical example of such a protocol

1359
00:49:03,680 --> 00:49:05,520
would be a killian

1360
00:49:05,520 --> 00:49:07,040
but there are some barriers to it which

1361
00:49:07,040 --> 00:49:09,280
was shown a couple of years ago by uh

1362
00:49:09,280 --> 00:49:11,119
bartosekitol

1363
00:49:11,119 --> 00:49:13,280
morally speaking the results said that

1364
00:49:13,280 --> 00:49:16,000
instantiating random oracle in this you

1365
00:49:16,000 --> 00:49:17,359
know

1366
00:49:17,359 --> 00:49:18,800
in killian

1367
00:49:18,800 --> 00:49:20,880
is going to be hard okay the the result

1368
00:49:20,880 --> 00:49:23,599
is more nuanced

1369
00:49:23,599 --> 00:49:24,720
but

1370
00:49:24,720 --> 00:49:26,319
perhaps a high level point is that

1371
00:49:26,319 --> 00:49:28,319
kilian is an argument system so it's

1372
00:49:28,319 --> 00:49:31,520
computationally sound whereas uh

1373
00:49:31,520 --> 00:49:33,520
the the standard methodology of using

1374
00:49:33,520 --> 00:49:35,440
the correlation interactability seems to

1375
00:49:35,440 --> 00:49:37,599
require uh starting from

1376
00:49:37,599 --> 00:49:39,280
protocols that are

1377
00:49:39,280 --> 00:49:42,319
statistically sound or other proofs

1378
00:49:42,319 --> 00:49:45,200
okay and sort of a one-line argument for

1379
00:49:45,200 --> 00:49:47,280
why this is true is that

1380
00:49:47,280 --> 00:49:49,200
you know we start from a protocol and

1381
00:49:49,200 --> 00:49:51,359
define some bad relation on it and then

1382
00:49:51,359 --> 00:49:52,960
the soundness of the non-interactive

1383
00:49:52,960 --> 00:49:56,000
protocol rely requires cih for uh that

1384
00:49:56,000 --> 00:49:59,440
bad relation right but

1385
00:49:59,440 --> 00:50:00,960
morally speaking

1386
00:50:00,960 --> 00:50:03,920
that the best results we know and maybe

1387
00:50:03,920 --> 00:50:07,280
perhaps even hope for is cih for sparse

1388
00:50:07,280 --> 00:50:09,760
relations that is where for any alpha

1389
00:50:09,760 --> 00:50:11,680
the fraction of beta

1390
00:50:11,680 --> 00:50:14,400
which leads to accept is is is

1391
00:50:14,400 --> 00:50:16,640
negligible um

1392
00:50:16,640 --> 00:50:18,960
and this means that essentially

1393
00:50:18,960 --> 00:50:20,880
now we must start from a protocol which

1394
00:50:20,880 --> 00:50:22,559
is statistically sound right if we are

1395
00:50:22,559 --> 00:50:24,160
saying that for any alpha then the

1396
00:50:24,160 --> 00:50:26,240
fraction of beta that leads to except is

1397
00:50:26,240 --> 00:50:28,240
is negligible

1398
00:50:28,240 --> 00:50:30,000
in the case of arguments that may not be

1399
00:50:30,000 --> 00:50:31,359
true right it may be much larger

1400
00:50:31,359 --> 00:50:32,559
fraction

1401
00:50:32,559 --> 00:50:34,800
okay so now we can ask well

1402
00:50:34,800 --> 00:50:36,400
why not start with interactive proofs

1403
00:50:36,400 --> 00:50:38,559
then right so indeed this is the

1404
00:50:38,559 --> 00:50:40,240
approach that was taken in the work of

1405
00:50:40,240 --> 00:50:42,559
jawali atal and previously kennedy at

1406
00:50:42,559 --> 00:50:44,880
all where they started from particular

1407
00:50:44,880 --> 00:50:47,119
kind of interactive proofs uh namely

1408
00:50:47,119 --> 00:50:49,599
goldwater rod bloom's protocol for

1409
00:50:49,599 --> 00:50:52,000
bounded depth computation and did manage

1410
00:50:52,000 --> 00:50:53,920
to collapse its rounds to build uh

1411
00:50:53,920 --> 00:50:56,160
snarks for boundary depth computation

1412
00:50:56,160 --> 00:50:58,960
so there are some other uh special case

1413
00:50:58,960 --> 00:51:00,000
uh

1414
00:51:00,000 --> 00:51:02,079
succinct interactive proofs but in

1415
00:51:02,079 --> 00:51:03,680
general if you want uh succinct

1416
00:51:03,680 --> 00:51:06,240
interactive proofs for all of all of p

1417
00:51:06,240 --> 00:51:08,240
that seems unlikely

1418
00:51:08,240 --> 00:51:10,319
so this puts us in a bind you know we

1419
00:51:10,319 --> 00:51:12,559
want to use this nice framework for

1420
00:51:12,559 --> 00:51:14,559
building snots but it seems like we

1421
00:51:14,559 --> 00:51:17,200
don't have a good starting point

1422
00:51:17,200 --> 00:51:19,520
so the nevertheless in uh in a joint

1423
00:51:19,520 --> 00:51:21,920
work with my students are right

1424
00:51:21,920 --> 00:51:24,000
chaudhary and chiang chong chin um

1425
00:51:24,000 --> 00:51:26,240
earlier this year we showed that we can

1426
00:51:26,240 --> 00:51:28,319
build snarks for p from the learning

1427
00:51:28,319 --> 00:51:30,319
with errors assumption

1428
00:51:30,319 --> 00:51:33,280
and in some sense to to kind of bypass

1429
00:51:33,280 --> 00:51:34,960
the previous bind

1430
00:51:34,960 --> 00:51:37,119
what we do is we sort of shift the

1431
00:51:37,119 --> 00:51:39,680
problem of computing snarks for p to a

1432
00:51:39,680 --> 00:51:42,559
related problem a related subclass of np

1433
00:51:42,559 --> 00:51:44,720
which is batch and v

1434
00:51:44,720 --> 00:51:47,119
in batch np the idea is that

1435
00:51:47,119 --> 00:51:48,960
the prover nodes wants to prove a bunch

1436
00:51:48,960 --> 00:51:50,720
of statements a batch of statements

1437
00:51:50,720 --> 00:51:51,839
let's say k

1438
00:51:51,839 --> 00:51:53,280
x1 to xk

1439
00:51:53,280 --> 00:51:55,520
all in the same language and he wants to

1440
00:51:55,520 --> 00:51:58,000
do it by using a single

1441
00:51:58,000 --> 00:52:00,400
a single message

1442
00:52:00,400 --> 00:52:02,480
and here the efficiency properties are

1443
00:52:02,480 --> 00:52:04,160
as follows we want that the

1444
00:52:04,160 --> 00:52:06,720
communication complexity should be much

1445
00:52:06,720 --> 00:52:09,280
smaller than sending all the witnesses

1446
00:52:09,280 --> 00:52:11,040
right and accordingly we can put

1447
00:52:11,040 --> 00:52:14,160
restrictions on the verification time

1448
00:52:14,160 --> 00:52:16,640
so batch verification is uh you know

1449
00:52:16,640 --> 00:52:18,640
it's a it's a pretty well studied

1450
00:52:18,640 --> 00:52:20,240
problem it's been studied for signature

1451
00:52:20,240 --> 00:52:22,000
schemes and and other cryptographic

1452
00:52:22,000 --> 00:52:24,160
primitives so batch np is a pretty

1453
00:52:24,160 --> 00:52:27,520
useful uh subclass of np on its own

1454
00:52:27,520 --> 00:52:29,680
importantly here the generifix lower

1455
00:52:29,680 --> 00:52:32,480
bound doesn't hold

1456
00:52:32,480 --> 00:52:34,079
however

1457
00:52:34,079 --> 00:52:35,920
if we want to build snacks for batch np

1458
00:52:35,920 --> 00:52:37,760
it seems like we have somewhat similar

1459
00:52:37,760 --> 00:52:40,400
challenges sp for example we don't quite

1460
00:52:40,400 --> 00:52:43,680
know uh interactive proofs succinct

1461
00:52:43,680 --> 00:52:46,559
interactive troops for batches b

1462
00:52:46,559 --> 00:52:49,440
we do know them for uh up for example

1463
00:52:49,440 --> 00:52:50,240
but

1464
00:52:50,240 --> 00:52:51,760
but it's not like there is a lower bound

1465
00:52:51,760 --> 00:52:53,359
there or you know that they're unlikely

1466
00:52:53,359 --> 00:52:55,760
to exist we just don't know

1467
00:52:55,760 --> 00:52:56,559
okay

1468
00:52:56,559 --> 00:52:59,040
so what we do is uh

1469
00:52:59,040 --> 00:53:01,520
we we abstract out this uh this notion

1470
00:53:01,520 --> 00:53:03,839
of dual mode interactive arguments for

1471
00:53:03,839 --> 00:53:05,520
batch np and this is sort of the key

1472
00:53:05,520 --> 00:53:07,200
idea that lets us

1473
00:53:07,200 --> 00:53:08,800
you know circumvent the barriers that i

1474
00:53:08,800 --> 00:53:10,400
mentioned earlier

1475
00:53:10,400 --> 00:53:13,040
so what we do is we define the

1476
00:53:13,040 --> 00:53:15,359
interactive arguments for batch np in

1477
00:53:15,359 --> 00:53:17,520
sort of a two mode setting so these

1478
00:53:17,520 --> 00:53:19,520
protocols are now going to be in the crs

1479
00:53:19,520 --> 00:53:20,400
model

1480
00:53:20,400 --> 00:53:22,319
and there will be a normal mode of the

1481
00:53:22,319 --> 00:53:23,920
crs

1482
00:53:23,920 --> 00:53:25,760
but then there will also be a trapdoor

1483
00:53:25,760 --> 00:53:28,720
mode where the crs can be programmed on

1484
00:53:28,720 --> 00:53:31,200
some index let's say i where i varies

1485
00:53:31,200 --> 00:53:33,280
from one to k

1486
00:53:33,280 --> 00:53:35,359
okay and the requirement is that once

1487
00:53:35,359 --> 00:53:38,640
you switch the crs to the trapdoor mode

1488
00:53:38,640 --> 00:53:41,839
then this protocol becomes statistically

1489
00:53:41,839 --> 00:53:44,720
sound at index i meaning that

1490
00:53:44,720 --> 00:53:47,200
at index i the cheating proverb cannot

1491
00:53:47,200 --> 00:53:49,200
use cannot prove any false statement

1492
00:53:49,200 --> 00:53:51,839
even if the proverb is unbounded okay so

1493
00:53:51,839 --> 00:53:53,359
now in the trapdoor mode we have a

1494
00:53:53,359 --> 00:53:55,440
statistical soundness property except

1495
00:53:55,440 --> 00:53:57,200
that a particular index i which is

1496
00:53:57,200 --> 00:53:58,800
programmed in the crs

1497
00:53:58,800 --> 00:53:59,760
okay

1498
00:53:59,760 --> 00:54:00,559
and

1499
00:54:00,559 --> 00:54:02,559
for those of you who are familiar with

1500
00:54:02,559 --> 00:54:04,160
this notion of somewhere statistically

1501
00:54:04,160 --> 00:54:06,160
binding commitments you can see sort of

1502
00:54:06,160 --> 00:54:08,079
the the analog here and in fact the

1503
00:54:08,079 --> 00:54:10,400
notion is inspired by that by ssb

1504
00:54:10,400 --> 00:54:12,800
commitments

1505
00:54:12,800 --> 00:54:14,160
okay

1506
00:54:14,160 --> 00:54:16,800
so now sort of uh a one page uh proof

1507
00:54:16,800 --> 00:54:20,640
for why this helps in uh in uh in

1508
00:54:20,640 --> 00:54:24,240
in long collapse via cih is

1509
00:54:24,240 --> 00:54:26,720
so if you have an interactive argument

1510
00:54:26,720 --> 00:54:28,000
where uh

1511
00:54:28,000 --> 00:54:30,240
you know let's say

1512
00:54:30,240 --> 00:54:32,480
the the tuple of statements uh you know

1513
00:54:32,480 --> 00:54:34,079
being in the language

1514
00:54:34,079 --> 00:54:36,079
does not hold it means that there is at

1515
00:54:36,079 --> 00:54:38,880
least one index i right where x is not

1516
00:54:38,880 --> 00:54:40,640
in the language

1517
00:54:40,640 --> 00:54:42,480
so now in order to do round compression

1518
00:54:42,480 --> 00:54:44,960
what we can do is we can switch the crs

1519
00:54:44,960 --> 00:54:47,359
to the trapdoor mode right where the

1520
00:54:47,359 --> 00:54:49,920
trapdoor crs is

1521
00:54:49,920 --> 00:54:53,280
is programmed at i right you can guess i

1522
00:54:53,280 --> 00:54:56,000
in advance so and it incurs a small loss

1523
00:54:56,000 --> 00:54:58,240
so that's not a problem

1524
00:54:58,240 --> 00:55:01,359
and now we get the guarantee that at

1525
00:55:01,359 --> 00:55:02,559
index i

1526
00:55:02,559 --> 00:55:04,799
x i that the proof must be statistically

1527
00:55:04,799 --> 00:55:06,960
sound right and once we get statistical

1528
00:55:06,960 --> 00:55:09,440
soundness now we can actually you know

1529
00:55:09,440 --> 00:55:11,200
achieve for use correlation in

1530
00:55:11,200 --> 00:55:12,880
tractability as we were able to do

1531
00:55:12,880 --> 00:55:14,799
before right so this is sort of what

1532
00:55:14,799 --> 00:55:16,640
helps us bypass that

1533
00:55:16,640 --> 00:55:18,880
that conceptual barrier

1534
00:55:18,880 --> 00:55:21,599
and once you have uh snot for batch and

1535
00:55:21,599 --> 00:55:22,319
p

1536
00:55:22,319 --> 00:55:23,520
you can

1537
00:55:23,520 --> 00:55:25,040
move to p

1538
00:55:25,040 --> 00:55:27,040
again i'm going to give you an extremely

1539
00:55:27,040 --> 00:55:29,280
high level uh intuition for why you can

1540
00:55:29,280 --> 00:55:32,240
do so i'm going to cheat a lot so

1541
00:55:32,240 --> 00:55:34,240
let's say we take a p computation and we

1542
00:55:34,240 --> 00:55:36,400
break it down you know into intermediate

1543
00:55:36,400 --> 00:55:40,079
states let's say st1 to st4 here right

1544
00:55:40,079 --> 00:55:42,319
you can you can

1545
00:55:42,319 --> 00:55:45,040
divide it into lots of steps and now you

1546
00:55:45,040 --> 00:55:46,559
can write down a bunch of batch

1547
00:55:46,559 --> 00:55:49,359
statements so the first statement will

1548
00:55:49,359 --> 00:55:51,440
say that the first step of computation

1549
00:55:51,440 --> 00:55:52,880
was correct the second statement will

1550
00:55:52,880 --> 00:55:54,400
say that the second step of computation

1551
00:55:54,400 --> 00:55:56,799
was correct and so on and now i can say

1552
00:55:56,799 --> 00:55:59,040
well let's just prove these batch state

1553
00:55:59,040 --> 00:56:01,040
these batch of statements right so we

1554
00:56:01,040 --> 00:56:03,200
can use this not for batch np for

1555
00:56:03,200 --> 00:56:05,359
proving this so let's say we just run it

1556
00:56:05,359 --> 00:56:07,520
in the normal mode

1557
00:56:07,520 --> 00:56:10,240
now what we can do is uh you know we can

1558
00:56:10,240 --> 00:56:12,640
we can switch the crs into the trapdoor

1559
00:56:12,640 --> 00:56:15,359
mode right and uh you know instead of

1560
00:56:15,359 --> 00:56:17,200
programming it at one index we can index

1561
00:56:17,200 --> 00:56:19,280
we can program it at two indices right

1562
00:56:19,280 --> 00:56:21,280
two adjacent indices

1563
00:56:21,280 --> 00:56:24,000
and uh we can argue that uh let's say if

1564
00:56:24,000 --> 00:56:26,079
we program it at one comma two then we

1565
00:56:26,079 --> 00:56:28,240
can argue that the first step is correct

1566
00:56:28,240 --> 00:56:30,559
right then we can uh by switching the

1567
00:56:30,559 --> 00:56:32,480
crs we can argue that the second step is

1568
00:56:32,480 --> 00:56:34,559
correct and so on and so forth so you

1569
00:56:34,559 --> 00:56:36,319
know from the from the beginning we can

1570
00:56:36,319 --> 00:56:38,640
go till the end and argue everything is

1571
00:56:38,640 --> 00:56:40,480
correct

1572
00:56:40,480 --> 00:56:42,559
so that's sort of the the high level

1573
00:56:42,559 --> 00:56:44,799
principle there are a bunch of things

1574
00:56:44,799 --> 00:56:46,160
that i was hiding here and i was

1575
00:56:46,160 --> 00:56:48,160
cheating so first of course we have to

1576
00:56:48,160 --> 00:56:49,760
compress everything right i mean we

1577
00:56:49,760 --> 00:56:51,280
cannot give out all these states in the

1578
00:56:51,280 --> 00:56:53,359
clear that would already be a lot of

1579
00:56:53,359 --> 00:56:55,599
communication so we can compress them by

1580
00:56:55,599 --> 00:56:58,480
using ssb commitments

1581
00:56:58,480 --> 00:57:00,000
but perhaps the biggest challenge is

1582
00:57:00,000 --> 00:57:01,119
that

1583
00:57:01,119 --> 00:57:02,880
unlike batch arguments where the

1584
00:57:02,880 --> 00:57:04,640
statements can be sort of independent

1585
00:57:04,640 --> 00:57:07,359
right x1 x2 x3 they can be independent

1586
00:57:07,359 --> 00:57:08,799
and they sort of don't have any bearing

1587
00:57:08,799 --> 00:57:10,720
with uh with each other here they are

1588
00:57:10,720 --> 00:57:12,799
related right

1589
00:57:12,799 --> 00:57:14,400
and the problem is that when we switch

1590
00:57:14,400 --> 00:57:16,960
the crs every time to prove that you

1591
00:57:16,960 --> 00:57:18,319
know either the first step was correct

1592
00:57:18,319 --> 00:57:20,000
or the second step was correct we have

1593
00:57:20,000 --> 00:57:21,520
to ensure continuity and we have to

1594
00:57:21,520 --> 00:57:23,920
ensure that the adversary did not change

1595
00:57:23,920 --> 00:57:26,240
these states these intermediate states

1596
00:57:26,240 --> 00:57:27,920
when we actually switch the crs so

1597
00:57:27,920 --> 00:57:30,480
that's sort of the the key challenge

1598
00:57:30,480 --> 00:57:31,920
and

1599
00:57:31,920 --> 00:57:34,000
it's possible to circumvent that by

1600
00:57:34,000 --> 00:57:35,440
using a

1601
00:57:35,440 --> 00:57:37,359
notion of a stronger form of ssb

1602
00:57:37,359 --> 00:57:38,559
commitments called no signaling

1603
00:57:38,559 --> 00:57:39,680
commitments

1604
00:57:39,680 --> 00:57:41,359
you'll hear about them i think on

1605
00:57:41,359 --> 00:57:43,839
thursday so i'm going to skip it here

1606
00:57:43,839 --> 00:57:45,680
let me mention that an alternative

1607
00:57:45,680 --> 00:57:47,680
transformation from snot for batch and

1608
00:57:47,680 --> 00:57:50,319
p2p was actually shown um by collide

1609
00:57:50,319 --> 00:57:52,720
vector nathan and song and i think

1610
00:57:52,720 --> 00:57:55,040
rachel will talk about this later today

1611
00:57:55,040 --> 00:57:56,880
so yeah

1612
00:57:56,880 --> 00:57:58,640
okay

1613
00:57:58,640 --> 00:57:59,680
so

1614
00:57:59,680 --> 00:58:01,280
so this is why

1615
00:58:01,280 --> 00:58:03,359
we can build snarks for batch np which

1616
00:58:03,359 --> 00:58:05,200
is moderately speaking and why we are

1617
00:58:05,200 --> 00:58:07,119
useful for building stocks for p

1618
00:58:07,119 --> 00:58:08,799
we do show our construction of snacks

1619
00:58:08,799 --> 00:58:10,960
for batch np from a degree but i'm not

1620
00:58:10,960 --> 00:58:14,319
going to uh talk about it today

1621
00:58:14,319 --> 00:58:15,920
there is a talk by zhengchang which is

1622
00:58:15,920 --> 00:58:17,839
online which explains this in a lot of

1623
00:58:17,839 --> 00:58:20,839
details so i recommend you to watch

1624
00:58:20,839 --> 00:58:24,000
that okay so in the last maybe five

1625
00:58:24,000 --> 00:58:25,520
minutes or

1626
00:58:25,520 --> 00:58:26,480
fewer

1627
00:58:26,480 --> 00:58:29,119
um let me have a short discussion about

1628
00:58:29,119 --> 00:58:30,000
uh

1629
00:58:30,000 --> 00:58:31,680
the current state of appears and what

1630
00:58:31,680 --> 00:58:33,440
kind of questions we would like to

1631
00:58:33,440 --> 00:58:34,839
address going

1632
00:58:34,839 --> 00:58:38,559
forward so the first uh perhaps uh most

1633
00:58:38,559 --> 00:58:39,920
important question in this line of

1634
00:58:39,920 --> 00:58:42,000
research is whether there are ways to

1635
00:58:42,000 --> 00:58:45,599
succumb and gentry wicks lower bound

1636
00:58:45,599 --> 00:58:47,680
to build snarks for

1637
00:58:47,680 --> 00:58:50,880
maybe np or other important subclasses

1638
00:58:50,880 --> 00:58:53,359
and so let me let me mention that

1639
00:58:53,359 --> 00:58:55,200
caveats in the generic slower bound

1640
00:58:55,200 --> 00:58:57,359
right so so first of all the lower bound

1641
00:58:57,359 --> 00:58:59,680
requires adaptive soundness so it only

1642
00:58:59,680 --> 00:59:02,799
rules out uh snags for batch np where uh

1643
00:59:02,799 --> 00:59:05,040
the soundness is adaptive namely the

1644
00:59:05,040 --> 00:59:07,760
prover chooses the statement after

1645
00:59:07,760 --> 00:59:11,040
looking at the crs so if you uh if you

1646
00:59:11,040 --> 00:59:12,400
weaken the soundness requirement to

1647
00:59:12,400 --> 00:59:14,240
another adapter where the adversary must

1648
00:59:14,240 --> 00:59:16,480
declare the statement in advance before

1649
00:59:16,480 --> 00:59:18,640
then seeing the crs we don't know of any

1650
00:59:18,640 --> 00:59:21,599
lower bound um also the lower bound is

1651
00:59:21,599 --> 00:59:24,480
black box in nature it uses the the the

1652
00:59:24,480 --> 00:59:26,079
reduction uses the adversary in a black

1653
00:59:26,079 --> 00:59:28,400
box way so if you can develop non-black

1654
00:59:28,400 --> 00:59:30,240
box techniques maybe there would be a

1655
00:59:30,240 --> 00:59:32,559
way to overcome that

1656
00:59:32,559 --> 00:59:33,599
so

1657
00:59:33,599 --> 00:59:35,680
non black box reductions are far and few

1658
00:59:35,680 --> 00:59:37,760
in cryptography but the first

1659
00:59:37,760 --> 00:59:40,000
restriction seems somewhat more tempting

1660
00:59:40,000 --> 00:59:42,400
to exploit and

1661
00:59:42,400 --> 00:59:44,880
strangely or perhaps maybe somewhat

1662
00:59:44,880 --> 00:59:46,319
surprisingly we still don't know how to

1663
00:59:46,319 --> 00:59:48,720
exploit it and i should mention that in

1664
00:59:48,720 --> 00:59:51,119
fact this is so far something that seems

1665
00:59:51,119 --> 00:59:53,280
to be even outside the reach of io at

1666
00:59:53,280 --> 00:59:55,680
least if we require short crs if you

1667
00:59:55,680 --> 00:59:57,839
require long crs then indeed you can do

1668
00:59:57,839 --> 00:59:58,960
things but

1669
00:59:58,960 --> 01:00:01,760
with short crs it seems hard

1670
01:00:01,760 --> 01:00:03,440
of course we can ask the question

1671
01:00:03,440 --> 01:00:06,079
whether we can build snarks for

1672
01:00:06,079 --> 01:00:08,000
other subclasses of np from standard

1673
01:00:08,000 --> 01:00:10,640
assumptions and currently we know for a

1674
01:00:10,640 --> 01:00:12,240
few uh

1675
01:00:12,240 --> 01:00:15,839
subclasses but uh it's perhaps

1676
01:00:15,839 --> 01:00:17,520
natural to ask if we can extend the

1677
01:00:17,520 --> 01:00:19,440
current state of affairs to other

1678
01:00:19,440 --> 01:00:21,040
interesting classes of

1679
01:00:21,040 --> 01:00:22,480
np

1680
01:00:22,480 --> 01:00:24,079
and again the main challenge here

1681
01:00:24,079 --> 01:00:25,680
usually seems to be how to ensure

1682
01:00:25,680 --> 01:00:27,119
consistency across

1683
01:00:27,119 --> 01:00:29,839
in the computation

1684
01:00:30,079 --> 01:00:31,680
you know we can also ask if we can come

1685
01:00:31,680 --> 01:00:34,000
up with different uh models here maybe

1686
01:00:34,000 --> 01:00:35,760
change the model somehow

1687
01:00:35,760 --> 01:00:37,119
you know maybe change the model of

1688
01:00:37,119 --> 01:00:38,319
communication

1689
01:00:38,319 --> 01:00:40,400
some some other relaxations and i should

1690
01:00:40,400 --> 01:00:42,799
say that uh you know echoing here here

1691
01:00:42,799 --> 01:00:44,240
perhaps the biggest success story of

1692
01:00:44,240 --> 01:00:45,760
theoretical crypto is in coming up with

1693
01:00:45,760 --> 01:00:48,160
the new and interesting models so maybe

1694
01:00:48,160 --> 01:00:49,839
there are interesting things we could

1695
01:00:49,839 --> 01:00:51,680
try here as well

1696
01:00:51,680 --> 01:00:54,319
okay so i think i'm already

1697
01:00:54,319 --> 01:00:56,799
running out of time but uh if it's okay

1698
01:00:56,799 --> 01:00:59,200
can i use two more minutes uh brent

1699
01:00:59,200 --> 01:01:01,119
sure okay

1700
01:01:01,119 --> 01:01:03,839
all right so i'm going to remark uh you

1701
01:01:03,839 --> 01:01:05,599
know in two slides about uh theory

1702
01:01:05,599 --> 01:01:08,960
versus practice of these

1703
01:01:08,960 --> 01:01:11,920
of these primitives so musics and stocks

1704
01:01:11,920 --> 01:01:13,760
so if you look at the correlation

1705
01:01:13,760 --> 01:01:16,720
interactability uh framework uh you can

1706
01:01:16,720 --> 01:01:18,720
say that perhaps uh you know what it

1707
01:01:18,720 --> 01:01:20,799
helped us do is actually

1708
01:01:20,799 --> 01:01:22,880
build a bridge from uh practice to

1709
01:01:22,880 --> 01:01:24,000
theory right this is somewhat

1710
01:01:24,000 --> 01:01:26,000
unconventional going from practice to

1711
01:01:26,000 --> 01:01:28,160
theory um

1712
01:01:28,160 --> 01:01:30,480
uh but uh perhaps this is to be expected

1713
01:01:30,480 --> 01:01:32,400
if we are able to instantiate random

1714
01:01:32,400 --> 01:01:35,200
oracles uh in uh you know in

1715
01:01:35,200 --> 01:01:36,839
cryptographic primitives

1716
01:01:36,839 --> 01:01:39,680
um one could argue that perhaps this

1717
01:01:39,680 --> 01:01:42,640
bridge is somewhat one way um and uh you

1718
01:01:42,640 --> 01:01:44,480
know we we go from practice to theory

1719
01:01:44,480 --> 01:01:46,480
but sort of we don't know the way back

1720
01:01:46,480 --> 01:01:47,280
here

1721
01:01:47,280 --> 01:01:49,359
at least the current server appears

1722
01:01:49,359 --> 01:01:50,160
so

1723
01:01:50,160 --> 01:01:52,240
let me explain why so let's talk about

1724
01:01:52,240 --> 01:01:54,079
assumptions

1725
01:01:54,079 --> 01:01:56,240
so so far we know very few approaches

1726
01:01:56,240 --> 01:01:57,520
for achieving correlation and

1727
01:01:57,520 --> 01:01:59,680
tractability and these approaches seem

1728
01:01:59,680 --> 01:02:02,559
to require you know compression and

1729
01:02:02,559 --> 01:02:05,280
hiding and we know how to achieve these

1730
01:02:05,280 --> 01:02:07,119
properties i mean i'm being informal

1731
01:02:07,119 --> 01:02:08,559
here but we know how to achieve this

1732
01:02:08,559 --> 01:02:11,200
using apigee or trapdoor hash which is

1733
01:02:11,200 --> 01:02:14,799
also very related to hss

1734
01:02:14,799 --> 01:02:16,319
so we can ask if these techniques are

1735
01:02:16,319 --> 01:02:18,559
necessary perhaps more to the point we

1736
01:02:18,559 --> 01:02:20,880
can ask if we can build cih from weaker

1737
01:02:20,880 --> 01:02:22,880
assumptions maybe with information

1738
01:02:22,880 --> 01:02:25,280
theoretically for at least small classes

1739
01:02:25,280 --> 01:02:27,760
of functions and there is some recent

1740
01:02:27,760 --> 01:02:30,319
work but the answer still remains

1741
01:02:30,319 --> 01:02:32,160
unclear

1742
01:02:32,160 --> 01:02:34,400
let me say that resolving this question

1743
01:02:34,400 --> 01:02:37,119
uh would have some bearing on the public

1744
01:02:37,119 --> 01:02:39,359
key encryption versus music question

1745
01:02:39,359 --> 01:02:41,760
and perhaps also on the efficiency if we

1746
01:02:41,760 --> 01:02:43,359
manage to substantially reduce the

1747
01:02:43,359 --> 01:02:45,359
assumptions it's likely that we will

1748
01:02:45,359 --> 01:02:46,799
also improve the efficiency of these

1749
01:02:46,799 --> 01:02:49,359
constructions

1750
01:02:49,359 --> 01:02:53,200
another point i want to mention is that

1751
01:02:53,200 --> 01:02:56,079
the known constructions of cih require

1752
01:02:56,079 --> 01:02:58,079
the code of the relation or the the

1753
01:02:58,079 --> 01:02:59,520
function

1754
01:02:59,520 --> 01:03:01,119
for which we require correlation in

1755
01:03:01,119 --> 01:03:03,119
tractability so what this results is

1756
01:03:03,119 --> 01:03:05,200
that if we use this table or sigma

1757
01:03:05,200 --> 01:03:08,000
protocol approach um where the relation

1758
01:03:08,000 --> 01:03:10,160
is cryptographic in nature we end up

1759
01:03:10,160 --> 01:03:12,079
with the sort of a non-black box use of

1760
01:03:12,079 --> 01:03:14,640
cryptography in the overall construction

1761
01:03:14,640 --> 01:03:18,640
and we can ask if this is inherent

1762
01:03:18,640 --> 01:03:20,880
okay so i'm even more out of time so i'm

1763
01:03:20,880 --> 01:03:22,960
going to skip the last point of this

1764
01:03:22,960 --> 01:03:24,000
talk

1765
01:03:24,000 --> 01:03:26,640
trust models

1766
01:03:28,960 --> 01:03:31,440
okay so let me summarize by saying that

1767
01:03:31,440 --> 01:03:33,440
non-interactive proofs are really cool

1768
01:03:33,440 --> 01:03:35,599
and this is a good time to work on them

1769
01:03:35,599 --> 01:03:36,640
so

1770
01:03:36,640 --> 01:03:39,879
thank you

1771
01:03:44,640 --> 01:03:46,640
okay so we'll take um questions from the

1772
01:03:46,640 --> 01:03:48,559
audience also justin will let us know

1773
01:03:48,559 --> 01:03:50,000
some remote people

1774
01:03:50,000 --> 01:03:52,799
um chime in

1775
01:03:54,880 --> 01:03:57,119
uh well i've got some questions they

1776
01:03:57,119 --> 01:04:01,119
showed up in the uh chat or not the chat

1777
01:04:01,119 --> 01:04:04,240
but the uh

1778
01:04:04,880 --> 01:04:07,839
question forum

1779
01:04:08,640 --> 01:04:11,280
so my first one was

1780
01:04:11,280 --> 01:04:13,520
doesn't the complain doesn't the

1781
01:04:13,520 --> 01:04:16,640
assumption of completeness

1782
01:04:16,640 --> 01:04:20,598
imply inconsistency

1783
01:04:20,640 --> 01:04:23,119
is soundness

1784
01:04:23,119 --> 01:04:24,640
and notion

1785
01:04:24,640 --> 01:04:26,400
of restricted

1786
01:04:26,400 --> 01:04:28,000
or bordered

1787
01:04:28,000 --> 01:04:30,400
to an e epsilon

1788
01:04:30,400 --> 01:04:33,400
consistency

1789
01:04:34,480 --> 01:04:37,680
i'm not sure i understand the question

1790
01:04:37,680 --> 01:04:40,640
impossible to elaborate

1791
01:04:40,640 --> 01:04:43,680
well you spoke of the soundness of the

1792
01:04:43,680 --> 01:04:46,879
decision problem

1793
01:04:46,960 --> 01:04:50,240
but in your first or second slide you

1794
01:04:50,240 --> 01:04:52,690
assumed completeness

1795
01:04:52,690 --> 01:04:54,160
[Music]

1796
01:04:54,160 --> 01:04:56,960
under goodell's theorem doesn't the

1797
01:04:56,960 --> 01:05:00,280
assumption of completeness imply

1798
01:05:00,280 --> 01:05:02,000
inconsistency

1799
01:05:02,000 --> 01:05:03,160
and you

1800
01:05:03,160 --> 01:05:06,480
emphasized at the end of your talk

1801
01:05:06,480 --> 01:05:08,559
that the major problem

1802
01:05:08,559 --> 01:05:13,280
was ensuring consistency

1803
01:05:13,280 --> 01:05:14,319
uh

1804
01:05:14,319 --> 01:05:16,240
so i think there might be some confusion

1805
01:05:16,240 --> 01:05:17,680
here so first of all if you're referring

1806
01:05:17,680 --> 01:05:19,839
to completeness uh completeness is for

1807
01:05:19,839 --> 01:05:21,839
true statement soundness is for false

1808
01:05:21,839 --> 01:05:23,920
statements but if you're referring to

1809
01:05:23,920 --> 01:05:26,079
consistency um

1810
01:05:26,079 --> 01:05:28,640
later on that was a very i mean that was

1811
01:05:28,640 --> 01:05:30,960
an informal use of consistency but it

1812
01:05:30,960 --> 01:05:32,640
was really more about

1813
01:05:32,640 --> 01:05:34,720
continuity in the computation

1814
01:05:34,720 --> 01:05:36,720
ensuring that uh you know when we look

1815
01:05:36,720 --> 01:05:38,799
at each slice of the computation one at

1816
01:05:38,799 --> 01:05:41,520
a time and argue about it uh when we

1817
01:05:41,520 --> 01:05:42,960
switch from one hybrid to the other

1818
01:05:42,960 --> 01:05:46,319
there's a continuity and uh and uh the

1819
01:05:46,319 --> 01:05:47,839
sharepoints are consistent that's

1820
01:05:47,839 --> 01:05:51,200
essentially important these days

1821
01:05:51,200 --> 01:05:55,039
in quantum computing isn't it

1822
01:05:55,039 --> 01:05:58,240
my second question was

1823
01:05:58,240 --> 01:06:00,640
isn't guessing

1824
01:06:00,640 --> 01:06:02,640
the sender's key

1825
01:06:02,640 --> 01:06:06,079
the same as brute force search

1826
01:06:06,079 --> 01:06:08,160
it is we are essentially uh you know

1827
01:06:08,160 --> 01:06:10,160
simply guessing there but uh the point

1828
01:06:10,160 --> 01:06:12,240
is that again we can

1829
01:06:12,240 --> 01:06:14,079
we can set up parameters appropriately

1830
01:06:14,079 --> 01:06:16,079
so that uh we can still

1831
01:06:16,079 --> 01:06:17,359
achieve our view

1832
01:06:17,359 --> 01:06:20,078
and tractability

1833
01:06:20,960 --> 01:06:24,079
and my third question

1834
01:06:24,079 --> 01:06:25,359
was

1835
01:06:25,359 --> 01:06:27,599
once again today

1836
01:06:27,599 --> 01:06:30,559
are you assuming

1837
01:06:30,559 --> 01:06:31,680
shared

1838
01:06:31,680 --> 01:06:33,599
trusted

1839
01:06:33,599 --> 01:06:34,640
quote

1840
01:06:34,640 --> 01:06:36,480
perfect time

1841
01:06:36,480 --> 01:06:37,760
unquote

1842
01:06:37,760 --> 01:06:41,280
amongst the interactive parties

1843
01:06:41,280 --> 01:06:44,240
typically interactive protocols we

1844
01:06:44,240 --> 01:06:47,599
we define them in the synchronous model

1845
01:06:47,599 --> 01:06:50,799
i think the assumption of

1846
01:06:50,799 --> 01:06:52,480
sorry just just to cut off we have one

1847
01:06:52,480 --> 01:06:54,480
one question from from the audience in

1848
01:06:54,480 --> 01:06:56,480
place okay okay

1849
01:06:56,480 --> 01:06:59,480
sorry

1850
01:07:03,760 --> 01:07:05,599
yes so the question was why was the

1851
01:07:05,599 --> 01:07:08,000
vector d spar so d only really depends

1852
01:07:08,000 --> 01:07:10,079
on the sender's message right so the

1853
01:07:10,079 --> 01:07:11,440
thing is that the sender's message is

1854
01:07:11,440 --> 01:07:13,440
upper bounded by the security parameter

1855
01:07:13,440 --> 01:07:16,160
and the u is n bits long which is much

1856
01:07:16,160 --> 01:07:19,440
larger than lambda so

1857
01:07:20,400 --> 01:07:21,760
yeah so i mean yeah

1858
01:07:21,760 --> 01:07:23,280
yeah there i was just talking about one

1859
01:07:23,280 --> 01:07:25,359
round but yeah yeah for every round it

1860
01:07:25,359 --> 01:07:28,359
is

1861
01:07:28,880 --> 01:07:31,680
any other questions

1862
01:07:31,760 --> 01:07:33,440
it's not kind of a meta question like

1863
01:07:33,440 --> 01:07:34,640
how long did it

1864
01:07:34,640 --> 01:07:35,920
there were a lot of moving parts for

1865
01:07:35,920 --> 01:07:38,400
example like the the guessing and then

1866
01:07:38,400 --> 01:07:41,119
the showing that things weren't tcc0

1867
01:07:41,119 --> 01:07:43,839
how long did it take

1868
01:07:44,000 --> 01:07:46,640
honestly how long did it take um well i

1869
01:07:46,640 --> 01:07:49,039
mean i should anyway try to genjon for

1870
01:07:49,039 --> 01:07:52,079
for you know the the key ideas uh

1871
01:07:52,079 --> 01:07:54,560
i would say that uh perhaps

1872
01:07:54,560 --> 01:07:56,400
[Music]

1873
01:07:56,400 --> 01:07:58,160
i mean we did to be honest we didn't

1874
01:07:58,160 --> 01:07:59,839
even start with the the question of

1875
01:07:59,839 --> 01:08:02,640
constructing physics from ddh we were

1876
01:08:02,640 --> 01:08:04,160
trying to address a slightly different

1877
01:08:04,160 --> 01:08:05,760
question but uh

1878
01:08:05,760 --> 01:08:08,079
eventually we realized that we could do

1879
01:08:08,079 --> 01:08:10,640
it from ddh but

1880
01:08:10,640 --> 01:08:12,400
the the the key idea was really the

1881
01:08:12,400 --> 01:08:15,039
interaction once uh you know

1882
01:08:15,039 --> 01:08:16,960
you notice that interaction can actually

1883
01:08:16,960 --> 01:08:19,600
help i think the wrong collapsing part

1884
01:08:19,600 --> 01:08:22,000
the you know the

1885
01:08:22,000 --> 01:08:23,439
the guessing and the round collapsing

1886
01:08:23,439 --> 01:08:25,600
perhaps is something very natural okay

1887
01:08:25,600 --> 01:08:27,040
okay so you thought okay if i have

1888
01:08:27,040 --> 01:08:28,799
interaction i can do this class and then

1889
01:08:28,799 --> 01:08:30,960
yeah yeah maybe if you get that hard

1890
01:08:30,960 --> 01:08:32,640
then again yeah yeah i mean

1891
01:08:32,640 --> 01:08:34,880
the thing is that if you if you try to

1892
01:08:34,880 --> 01:08:38,000
use uh interaction uh

1893
01:08:38,000 --> 01:08:39,679
initially it seems counterintuitive

1894
01:08:39,679 --> 01:08:41,520
right like why would i use interaction

1895
01:08:41,520 --> 01:08:42,880
in the setting where my goal is to

1896
01:08:42,880 --> 01:08:44,880
achieve non-interactivity right so it

1897
01:08:44,880 --> 01:08:46,960
just seems sort of counterintuitive to

1898
01:08:46,960 --> 01:08:48,399
use that

1899
01:08:48,399 --> 01:08:50,799
but yeah once you sort of

1900
01:08:50,799 --> 01:08:52,319
get over that point just look at the

1901
01:08:52,319 --> 01:08:54,640
question of cih completely independently

1902
01:08:54,640 --> 01:08:56,000
right correlation interactivity

1903
01:08:56,000 --> 01:08:58,319
independently then you know it perhaps

1904
01:08:58,319 --> 01:09:01,520
makes more sense yeah

1905
01:09:01,520 --> 01:09:04,319
did you have a question yeah yeah

1906
01:09:04,319 --> 01:09:06,560
just

1907
01:09:16,880 --> 01:09:19,279
yeah i'm actually not

1908
01:09:19,279 --> 01:09:20,880
very familiar with the whole lower

1909
01:09:20,880 --> 01:09:23,600
bounds yeah so i don't know if somebody

1910
01:09:23,600 --> 01:09:25,040
else might volunteer to answer that

1911
01:09:25,040 --> 01:09:28,479
question maybe daniel i don't know

1912
01:09:29,439 --> 01:09:31,678
yeah

1913
01:09:32,399 --> 01:09:34,719
they must be over somehow bypassing them

1914
01:09:34,719 --> 01:09:37,920
i'm not sure how yeah

1915
01:09:37,920 --> 01:09:42,759
okay well that was a great talk and uh

