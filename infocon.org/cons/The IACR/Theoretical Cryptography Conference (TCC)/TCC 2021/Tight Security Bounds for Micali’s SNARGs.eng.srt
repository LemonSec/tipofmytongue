1
00:00:00,719 --> 00:00:03,040
hi my name is elon yugev this is joint

2
00:00:03,040 --> 00:00:05,040
walk with alessandro chiesa and this

3
00:00:05,040 --> 00:00:07,040
talk is about tight security balance for

4
00:00:07,040 --> 00:00:08,720
mikali snogs

5
00:00:08,720 --> 00:00:10,719
so let's talk and i'll start with a

6
00:00:10,719 --> 00:00:13,120
brief overview of what our snarks

7
00:00:13,120 --> 00:00:15,280
succinct non-interactive arguments in

8
00:00:15,280 --> 00:00:17,199
the random oracle model

9
00:00:17,199 --> 00:00:18,800
so snarks in a row

10
00:00:18,800 --> 00:00:20,800
so this is a proof system so we have a

11
00:00:20,800 --> 00:00:23,039
prover we have a verifier we have some

12
00:00:23,039 --> 00:00:24,960
language and we have this verifier that

13
00:00:24,960 --> 00:00:27,279
is wondering if this instance x is in

14
00:00:27,279 --> 00:00:28,560
the language

15
00:00:28,560 --> 00:00:30,960
the proof is non-interactive so we have

16
00:00:30,960 --> 00:00:33,600
this single message a proof by that

17
00:00:33,600 --> 00:00:36,160
approval sends and the verifier reads

18
00:00:36,160 --> 00:00:39,840
fine and decides if to accept or reject

19
00:00:39,840 --> 00:00:42,960
um the communication complexity

20
00:00:42,960 --> 00:00:46,079
complexity is going to be succinct so in

21
00:00:46,079 --> 00:00:48,879
in particular the size of this proof pi

22
00:00:48,879 --> 00:00:50,640
is going to be much smaller than the

23
00:00:50,640 --> 00:00:54,960
size of the witness of this np language

24
00:00:54,960 --> 00:00:58,239
um and to get succinctness actually we

25
00:00:58,239 --> 00:01:00,719
have to sacrifice something so what

26
00:01:00,719 --> 00:01:04,080
we're sacrificing is uh the information

27
00:01:04,080 --> 00:01:06,159
theoretical soundness and we're gonna

28
00:01:06,159 --> 00:01:08,880
settle for computational soundness so

29
00:01:08,880 --> 00:01:11,119
what is computation sound is in the

30
00:01:11,119 --> 00:01:12,880
random oracle model

31
00:01:12,880 --> 00:01:14,799
so both the puber and verify have a

32
00:01:14,799 --> 00:01:16,960
common resource this is a truly random

33
00:01:16,960 --> 00:01:18,880
function so this is random the random

34
00:01:18,880 --> 00:01:20,320
function here

35
00:01:20,320 --> 00:01:21,360
it

36
00:01:21,360 --> 00:01:23,920
eats arbitrary strings and outputs a

37
00:01:23,920 --> 00:01:26,720
string of length lambda

38
00:01:26,720 --> 00:01:29,520
and the soundness is as follows

39
00:01:29,520 --> 00:01:31,200
we're going to say that the

40
00:01:31,200 --> 00:01:33,920
the scheme has t epsilon security so it

41
00:01:33,920 --> 00:01:36,479
has two parameters t and epsilon

42
00:01:36,479 --> 00:01:38,880
for instance is not in the language

43
00:01:38,880 --> 00:01:42,079
if for any t query unbounded adversary p

44
00:01:42,079 --> 00:01:43,920
so the adversary has the unbounded

45
00:01:43,920 --> 00:01:46,399
competition in power but is bounded to

46
00:01:46,399 --> 00:01:48,159
at most t queries to this random

47
00:01:48,159 --> 00:01:50,479
molecule so the probability over the

48
00:01:50,479 --> 00:01:53,840
random oracle the disproval outputs pi

49
00:01:53,840 --> 00:01:56,560
that makes the verifier accept the proof

50
00:01:56,560 --> 00:01:58,960
i notice that the verifier has access to

51
00:01:58,960 --> 00:02:02,240
the same random oracle is at most

52
00:02:02,240 --> 00:02:04,799
epsilon okay when epsilon is a function

53
00:02:04,799 --> 00:02:07,200
of t and lambda

54
00:02:07,200 --> 00:02:10,239
so t epsilon security means that if you

55
00:02:10,239 --> 00:02:12,319
perform at mostly queries

56
00:02:12,319 --> 00:02:14,480
you can convince the verifier of a false

57
00:02:14,480 --> 00:02:16,640
statement with probability at most

58
00:02:16,640 --> 00:02:19,119
epsilon

59
00:02:19,599 --> 00:02:22,000
so why do we study snogs or in general

60
00:02:22,000 --> 00:02:23,760
why do we study crypto in the random

61
00:02:23,760 --> 00:02:25,760
oracle model so first this is a very

62
00:02:25,760 --> 00:02:28,000
nice very elegant information theoretic

63
00:02:28,000 --> 00:02:30,160
model okay there's no real computational

64
00:02:30,160 --> 00:02:31,840
assumptions here we have a totally

65
00:02:31,840 --> 00:02:33,599
random function and then things are

66
00:02:33,599 --> 00:02:35,440
information theoretic

67
00:02:35,440 --> 00:02:38,800
um and this allows us to

68
00:02:38,800 --> 00:02:41,360
prove a lot of stuff upper bounds and

69
00:02:41,360 --> 00:02:44,959
low bounds and these pulls are usually

70
00:02:44,959 --> 00:02:47,040
very tight you can even get very very

71
00:02:47,040 --> 00:02:49,200
close to the to like very concrete and

72
00:02:49,200 --> 00:02:51,360
absolute constants

73
00:02:51,360 --> 00:02:53,280
it's not only just a general model we

74
00:02:53,280 --> 00:02:55,440
have some very beautiful constructions

75
00:02:55,440 --> 00:02:58,480
of songs in the room

76
00:02:58,480 --> 00:03:01,519
and you can take these constructions and

77
00:03:01,519 --> 00:03:03,599
if you want to bring them back to to

78
00:03:03,599 --> 00:03:05,440
real life you just heuristically

79
00:03:05,440 --> 00:03:08,319
instantiate the the random oracle with

80
00:03:08,319 --> 00:03:10,000
some cryptographic

81
00:03:10,000 --> 00:03:12,159
cryptographic hash function these are

82
00:03:12,159 --> 00:03:13,760
usually considered as

83
00:03:13,760 --> 00:03:16,080
relatively lightweight crypto it doesn't

84
00:03:16,080 --> 00:03:18,400
involve things like public encryption

85
00:03:18,400 --> 00:03:19,360
and

86
00:03:19,360 --> 00:03:21,280
lattices and so on

87
00:03:21,280 --> 00:03:23,760
and it's actually a very efficient way

88
00:03:23,760 --> 00:03:27,280
uh to get post content security

89
00:03:27,280 --> 00:03:29,120
okay so we have all these attractive

90
00:03:29,120 --> 00:03:31,519
features of slugs in the hall and this

91
00:03:31,519 --> 00:03:34,959
is going to be the focus of this tank

92
00:03:36,000 --> 00:03:38,400
um so i talked about construction so

93
00:03:38,400 --> 00:03:40,319
we're going to focus on i would say the

94
00:03:40,319 --> 00:03:41,920
main construction okay the beautiful

95
00:03:41,920 --> 00:03:45,200
consumption of the of mikali it dates

96
00:03:45,200 --> 00:03:47,599
back to 94 it's going to be

97
00:03:47,599 --> 00:03:49,519
it's a construction based on kilian's

98
00:03:49,519 --> 00:03:51,920
interactive version where he

99
00:03:51,920 --> 00:03:53,840
made it non-interactive using the fiat

100
00:03:53,840 --> 00:03:55,840
mirror transformation

101
00:03:55,840 --> 00:03:58,400
and in a high high level overview the

102
00:03:58,400 --> 00:04:01,599
construction is as follows so uh

103
00:04:01,599 --> 00:04:03,200
what we're gonna do we're gonna take an

104
00:04:03,200 --> 00:04:05,760
information theoretic proof okay in our

105
00:04:05,760 --> 00:04:07,599
case a pcp

106
00:04:07,599 --> 00:04:09,040
we're gonna combine it with a

107
00:04:09,040 --> 00:04:11,439
cryptographic commitment scheme okay

108
00:04:11,439 --> 00:04:12,959
that supports

109
00:04:12,959 --> 00:04:14,720
local openings these are going to be a

110
00:04:14,720 --> 00:04:16,000
merkel hash

111
00:04:16,000 --> 00:04:17,120
and

112
00:04:17,120 --> 00:04:21,680
together what we're going to get is now

113
00:04:21,680 --> 00:04:24,000
so let me spell a few more details about

114
00:04:24,000 --> 00:04:25,759
this

115
00:04:25,759 --> 00:04:26,840
so

116
00:04:26,840 --> 00:04:30,800
um i assume most of you at least

117
00:04:30,800 --> 00:04:32,479
saw or heard about this construction but

118
00:04:32,479 --> 00:04:35,280
i want to take you step by step

119
00:04:35,280 --> 00:04:38,240
because we need to see a few details

120
00:04:38,240 --> 00:04:39,840
so the approval is going to start by

121
00:04:39,840 --> 00:04:42,639
writing a pcp for the statements okay so

122
00:04:42,639 --> 00:04:44,160
this is a pcp

123
00:04:44,160 --> 00:04:46,160
that can convince the verifier that

124
00:04:46,160 --> 00:04:48,560
indeed x is in the language okay the

125
00:04:48,560 --> 00:04:50,320
problem is that the pooler cannot send

126
00:04:50,320 --> 00:04:52,800
this entire pcp because it's too large

127
00:04:52,800 --> 00:04:54,800
instead the prover is just going to send

128
00:04:54,800 --> 00:04:57,440
a commitment to this pcp okay so it

129
00:04:57,440 --> 00:05:00,160
computes this miracle milk entry of this

130
00:05:00,160 --> 00:05:02,240
pcp and it computes this mercury using

131
00:05:02,240 --> 00:05:05,759
the random molecule of course

132
00:05:05,759 --> 00:05:06,720
now

133
00:05:06,720 --> 00:05:07,680
um

134
00:05:07,680 --> 00:05:10,639
the verifier is supposed to

135
00:05:10,639 --> 00:05:14,400
pick randomness okay for the pcp that

136
00:05:14,400 --> 00:05:16,479
will tell him which query locations he

137
00:05:16,479 --> 00:05:18,000
wants to read

138
00:05:18,000 --> 00:05:21,039
and we do not allow interaction here so

139
00:05:21,039 --> 00:05:23,199
we're going to let the random oracle

140
00:05:23,199 --> 00:05:24,880
simulate the verifier okay this is

141
00:05:24,880 --> 00:05:27,199
called the fiat trimmer transformation

142
00:05:27,199 --> 00:05:29,680
so the approval is going to query

143
00:05:29,680 --> 00:05:30,880
the route

144
00:05:30,880 --> 00:05:33,440
okay so after he committed to the pcp

145
00:05:33,440 --> 00:05:35,199
he's going to query this vote the

146
00:05:35,199 --> 00:05:36,400
commitment

147
00:05:36,400 --> 00:05:37,680
okay so he's going to apply the random

148
00:05:37,680 --> 00:05:40,160
molecule to the root and use use the

149
00:05:40,160 --> 00:05:42,400
output of the random okay to derive pcp

150
00:05:42,400 --> 00:05:44,000
randomness

151
00:05:44,000 --> 00:05:46,000
okay so once approver has this pcp

152
00:05:46,000 --> 00:05:48,160
randomness he knows what what are the

153
00:05:48,160 --> 00:05:50,080
query locations that the verifier wants

154
00:05:50,080 --> 00:05:52,320
to see and the proof is going to contain

155
00:05:52,320 --> 00:05:53,520
the root

156
00:05:53,520 --> 00:05:57,039
a of the pcp all the pcp answers okay

157
00:05:57,039 --> 00:05:59,520
that correspond to to this location and

158
00:05:59,520 --> 00:06:02,560
for each answer an authentication path

159
00:06:02,560 --> 00:06:04,960
that assures us that indeed

160
00:06:04,960 --> 00:06:07,280
the pcn pcp answer that he wrote here

161
00:06:07,280 --> 00:06:10,000
corresponds to the pcp that underlies

162
00:06:10,000 --> 00:06:12,560
this root

163
00:06:12,560 --> 00:06:15,520
okay so this is the the part of the

164
00:06:15,520 --> 00:06:17,360
of the pool what is the verifier gonna

165
00:06:17,360 --> 00:06:20,479
do well he's to verify that the pcp

166
00:06:20,479 --> 00:06:22,080
answer so it's going to run the pcp

167
00:06:22,080 --> 00:06:25,120
verifier okay on this to to to make sure

168
00:06:25,120 --> 00:06:27,759
that the pcp is fine and then it's going

169
00:06:27,759 --> 00:06:30,000
to check for each symbol okay in this

170
00:06:30,000 --> 00:06:31,199
answer it's going to check the

171
00:06:31,199 --> 00:06:33,440
authentication path to to make sure that

172
00:06:33,440 --> 00:06:35,360
indeed this is what the approval

173
00:06:35,360 --> 00:06:38,160
intended to send

174
00:06:38,160 --> 00:06:40,800
so what is the size of this pcp or

175
00:06:40,800 --> 00:06:43,199
very roughly speaking

176
00:06:43,199 --> 00:06:44,880
it's the number of queue it's the number

177
00:06:44,880 --> 00:06:47,759
of queries of the pcp q okay so we need

178
00:06:47,759 --> 00:06:50,720
to um to open each location

179
00:06:50,720 --> 00:06:52,560
and for each location you have to send

180
00:06:52,560 --> 00:06:56,000
roughly a login nodes okay on the on the

181
00:06:56,000 --> 00:06:57,919
three and each node has a lambda bits

182
00:06:57,919 --> 00:07:00,000
output so this is roughly the size of

183
00:07:00,000 --> 00:07:03,160
the proof

184
00:07:05,199 --> 00:07:06,400
okay

185
00:07:06,400 --> 00:07:08,160
what about soundness how do we improve

186
00:07:08,160 --> 00:07:09,759
soundness of

187
00:07:09,759 --> 00:07:11,360
of this scheme

188
00:07:11,360 --> 00:07:14,479
so again we you use some underlying pcp

189
00:07:14,479 --> 00:07:16,479
okay so suppose you initialize the

190
00:07:16,479 --> 00:07:19,280
scheme with a pcp with soundness epsilon

191
00:07:19,280 --> 00:07:20,560
pcp

192
00:07:20,560 --> 00:07:21,680
okay

193
00:07:21,680 --> 00:07:24,160
the best soundness expression and known

194
00:07:24,160 --> 00:07:26,960
is actually due to bcs a few years ago

195
00:07:26,960 --> 00:07:28,880
and we're gonna denote the soundness

196
00:07:28,880 --> 00:07:30,639
with epsilon arg okay this is the

197
00:07:30,639 --> 00:07:32,960
soundness of our argument scheme

198
00:07:32,960 --> 00:07:34,800
and as we said it's a function of of t

199
00:07:34,800 --> 00:07:37,039
and lambda

200
00:07:37,039 --> 00:07:38,720
so the best sound this question knows is

201
00:07:38,720 --> 00:07:40,400
the following soundness

202
00:07:40,400 --> 00:07:43,759
okay so we have t times epsilon

203
00:07:43,759 --> 00:07:47,280
t times epsilon is it comes from

204
00:07:47,280 --> 00:07:49,840
the arrow of the pcp so a cheating

205
00:07:49,840 --> 00:07:52,560
pooler can just try to convince the pcp

206
00:07:52,560 --> 00:07:55,280
verifier okay you can do this say by

207
00:07:55,280 --> 00:07:58,080
just choosing a random proof and hoping

208
00:07:58,080 --> 00:08:00,080
that the verifier would be convinced

209
00:08:00,080 --> 00:08:02,400
okay and each time you might lose the

210
00:08:02,400 --> 00:08:05,039
probability of lambda and he can do this

211
00:08:05,039 --> 00:08:06,960
roughly two times okay because this is

212
00:08:06,960 --> 00:08:09,039
his query budget

213
00:08:09,039 --> 00:08:10,840
and he can try to attack the random

214
00:08:10,840 --> 00:08:13,199
oracle for example you can try to find

215
00:08:13,199 --> 00:08:15,120
collisions and that's why he's not

216
00:08:15,120 --> 00:08:16,479
really committed

217
00:08:16,479 --> 00:08:18,639
to any specific string

218
00:08:18,639 --> 00:08:20,639
and to rule out this

219
00:08:20,639 --> 00:08:22,879
you have to assume that he didn't

220
00:08:22,879 --> 00:08:24,800
do magical things like find collisions

221
00:08:24,800 --> 00:08:27,440
or inverted random oracle and you use

222
00:08:27,440 --> 00:08:29,120
you lose this probability that comes

223
00:08:29,120 --> 00:08:32,479
from the birthday paradox

224
00:08:34,479 --> 00:08:35,760
okay

225
00:08:35,760 --> 00:08:36,799
and the

226
00:08:36,799 --> 00:08:38,799
main question that we want to ask is is

227
00:08:38,799 --> 00:08:42,479
this tight is this expression tight

228
00:08:42,479 --> 00:08:44,000
okay this is going to be the focus of

229
00:08:44,000 --> 00:08:46,320
this walk and i want to point out that

230
00:08:46,320 --> 00:08:48,560
the negative answer would be excellent

231
00:08:48,560 --> 00:08:50,959
news because if this expression is not

232
00:08:50,959 --> 00:08:53,200
tight and you can actually prove a much

233
00:08:53,200 --> 00:08:54,640
tighter expression

234
00:08:54,640 --> 00:08:56,640
and this intent would yield a small

235
00:08:56,640 --> 00:08:58,640
argument size okay and we're going to

236
00:08:58,640 --> 00:09:01,040
see this

237
00:09:02,320 --> 00:09:03,200
so

238
00:09:03,200 --> 00:09:05,839
this part already hinted is actually

239
00:09:05,839 --> 00:09:07,600
tight

240
00:09:07,600 --> 00:09:10,160
um so the the cheating pool can try to

241
00:09:10,160 --> 00:09:12,240
convince the pcp verifier

242
00:09:12,240 --> 00:09:14,320
roughly two times okay and each time he

243
00:09:14,320 --> 00:09:17,040
might actually lose uh

244
00:09:17,040 --> 00:09:19,519
an error of epsilon pcp

245
00:09:19,519 --> 00:09:21,279
okay so we have like a matching attack

246
00:09:21,279 --> 00:09:23,760
for this expression

247
00:09:23,760 --> 00:09:25,920
for this expression the answer is

248
00:09:25,920 --> 00:09:27,279
unclear

249
00:09:27,279 --> 00:09:28,240
okay

250
00:09:28,240 --> 00:09:31,839
so this tells us that the for example

251
00:09:31,839 --> 00:09:33,680
the cheating pool is not going to find

252
00:09:33,680 --> 00:09:35,360
any collision

253
00:09:35,360 --> 00:09:38,000
but what about vice versa can you attack

254
00:09:38,000 --> 00:09:40,240
the scheme if you are given a single

255
00:09:40,240 --> 00:09:42,720
collision

256
00:09:46,000 --> 00:09:48,959
so i want to pinpoint on this question

257
00:09:48,959 --> 00:09:50,560
and

258
00:09:50,560 --> 00:09:52,160
i want to show you that the answer to

259
00:09:52,160 --> 00:09:53,360
this question

260
00:09:53,360 --> 00:09:55,440
actually depends on the fine details of

261
00:09:55,440 --> 00:09:58,160
the construction

262
00:09:58,160 --> 00:10:01,040
and if you're slightly careless with the

263
00:10:01,040 --> 00:10:02,560
implementation

264
00:10:02,560 --> 00:10:03,440
then

265
00:10:03,440 --> 00:10:07,120
one collision is actually very harmful

266
00:10:07,120 --> 00:10:09,040
okay so let's try to see this so

267
00:10:09,040 --> 00:10:11,600
consider the micalli construction okay

268
00:10:11,600 --> 00:10:14,959
and suppose we have a binary pcb okay so

269
00:10:14,959 --> 00:10:17,200
this is the pcp string here

270
00:10:17,200 --> 00:10:19,519
okay i never really think of padded up

271
00:10:19,519 --> 00:10:21,839
up to length lambda okay because we want

272
00:10:21,839 --> 00:10:23,279
to hash

273
00:10:23,279 --> 00:10:25,200
two lambda bits to lambda bits this is

274
00:10:25,200 --> 00:10:26,800
the milky hash

275
00:10:26,800 --> 00:10:28,480
the medical tree

276
00:10:28,480 --> 00:10:29,600
um

277
00:10:29,600 --> 00:10:32,720
so if this is the construction then we

278
00:10:32,720 --> 00:10:34,959
can reuse a single

279
00:10:34,959 --> 00:10:37,200
zero and one collision okay so you can

280
00:10:37,200 --> 00:10:39,120
find the collision in the leaves between

281
00:10:39,120 --> 00:10:40,720
zero and one

282
00:10:40,720 --> 00:10:43,519
and you can reuse this uh collision

283
00:10:43,519 --> 00:10:45,360
everywhere

284
00:10:45,360 --> 00:10:48,399
okay so if i found the collision here

285
00:10:48,399 --> 00:10:50,560
i can use the same collision here and

286
00:10:50,560 --> 00:10:54,640
here and here and here and so on

287
00:10:54,880 --> 00:10:58,240
so in this case i'm almost not committed

288
00:10:58,240 --> 00:11:01,040
to any location of the pcp

289
00:11:01,040 --> 00:11:03,519
so i can commit to something

290
00:11:03,519 --> 00:11:05,600
random using this collision

291
00:11:05,600 --> 00:11:07,360
and then when i see the

292
00:11:07,360 --> 00:11:09,200
the queries of the verifier i can just

293
00:11:09,200 --> 00:11:11,839
open in a way that makes him

294
00:11:11,839 --> 00:11:13,680
accept

295
00:11:13,680 --> 00:11:15,440
and if this is the case then the

296
00:11:15,440 --> 00:11:17,360
soundness is actually optimal okay we

297
00:11:17,360 --> 00:11:19,120
just have to rule this out and we have

298
00:11:19,120 --> 00:11:22,560
to assume that he found no collision

299
00:11:22,560 --> 00:11:24,720
however

300
00:11:24,720 --> 00:11:27,920
um this can be truly avoided by adding

301
00:11:27,920 --> 00:11:29,440
indexes

302
00:11:29,440 --> 00:11:31,120
so when i mean adding indexes we're

303
00:11:31,120 --> 00:11:33,839
going to add a prefix i j

304
00:11:33,839 --> 00:11:36,320
for every node okay to the value of

305
00:11:36,320 --> 00:11:38,240
every node okay these are like constant

306
00:11:38,240 --> 00:11:39,839
prefixes that

307
00:11:39,839 --> 00:11:41,760
that just mentioned their location in

308
00:11:41,760 --> 00:11:44,160
the tree okay so the leaves are going to

309
00:11:44,160 --> 00:11:47,200
be layer one okay so we're gonna add the

310
00:11:47,200 --> 00:11:49,120
the one and then we have like this is

311
00:11:49,120 --> 00:11:51,200
node the one and this is the first node

312
00:11:51,200 --> 00:11:52,880
in level one this is the third node in

313
00:11:52,880 --> 00:11:54,240
level one

314
00:11:54,240 --> 00:11:57,440
and so on

315
00:11:57,440 --> 00:11:59,680
uh and now you can ask

316
00:11:59,680 --> 00:12:02,959
is the sound is optimal

317
00:12:03,279 --> 00:12:04,959
um

318
00:12:04,959 --> 00:12:06,800
so let me just mention that once i find

319
00:12:06,800 --> 00:12:08,720
that collision here

320
00:12:08,720 --> 00:12:11,200
okay i can actually i can't reuse it

321
00:12:11,200 --> 00:12:13,600
here okay because the prefixes are going

322
00:12:13,600 --> 00:12:15,760
to be different

323
00:12:15,760 --> 00:12:17,680
so collision here doesn't give me

324
00:12:17,680 --> 00:12:19,040
anything here and if i want to find the

325
00:12:19,040 --> 00:12:22,000
equilibrium here i have to walk again

326
00:12:22,000 --> 00:12:24,240
and find the new collision okay so i

327
00:12:24,240 --> 00:12:26,880
cannot reuse my computation

328
00:12:26,880 --> 00:12:28,959
and more importantly i cannot reuse the

329
00:12:28,959 --> 00:12:30,880
success probability so if i had some

330
00:12:30,880 --> 00:12:32,399
success probability of finding a

331
00:12:32,399 --> 00:12:34,639
collision here the probability that i

332
00:12:34,639 --> 00:12:37,120
find many many collisions is going to

333
00:12:37,120 --> 00:12:40,320
decrease very fast

334
00:12:40,480 --> 00:12:43,519
okay so with this implementation in hand

335
00:12:43,519 --> 00:12:44,800
okay with the

336
00:12:44,800 --> 00:12:47,040
with the prefixes i can state our

337
00:12:47,040 --> 00:12:49,680
results so we give a negative answer to

338
00:12:49,680 --> 00:12:51,680
this question and we show that the it's

339
00:12:51,680 --> 00:12:53,519
not tight okay

340
00:12:53,519 --> 00:12:55,120
remind you that negative answer means

341
00:12:55,120 --> 00:12:56,160
good news

342
00:12:56,160 --> 00:12:58,560
okay and what we do we actually show a

343
00:12:58,560 --> 00:13:01,839
tight security bound for mikali

344
00:13:01,839 --> 00:13:04,800
so our main theorem is that the

345
00:13:04,800 --> 00:13:07,200
security expression for mikali is the

346
00:13:07,200 --> 00:13:09,279
following the same t times epsilon that

347
00:13:09,279 --> 00:13:12,880
we had before okay but instead of this t

348
00:13:12,880 --> 00:13:15,360
squared over 2 to the lambda we have t

349
00:13:15,360 --> 00:13:17,200
over 2 to the lambda

350
00:13:17,200 --> 00:13:19,040
okay and we have some other small

351
00:13:19,040 --> 00:13:21,040
expression here that replaces the four

352
00:13:21,040 --> 00:13:22,800
okay c capital c

353
00:13:22,800 --> 00:13:26,560
which depends on l the length of the pcp

354
00:13:26,560 --> 00:13:28,320
and log sigma where sigma is the

355
00:13:28,320 --> 00:13:30,800
alphabet of the pcb

356
00:13:30,800 --> 00:13:33,200
okay so this is the expression we have

357
00:13:33,200 --> 00:13:35,200
and this expression holds provided that

358
00:13:35,200 --> 00:13:37,680
lambda is not too small okay so it has

359
00:13:37,680 --> 00:13:40,880
to be at least 2 log t

360
00:13:41,360 --> 00:13:43,839
we show an almost matching low bound so

361
00:13:43,839 --> 00:13:46,399
this is tight and even inside c this

362
00:13:46,399 --> 00:13:49,040
expression is almost tight

363
00:13:49,040 --> 00:13:52,160
okay so we have a matching low bound

364
00:13:52,160 --> 00:13:55,120
and as i promised this has implications

365
00:13:55,120 --> 00:13:57,760
on the argument side size

366
00:13:57,760 --> 00:14:00,480
so using the previous analysis

367
00:14:00,480 --> 00:14:03,199
if we wanted t epsilon security we had

368
00:14:03,199 --> 00:14:06,000
to set lambda to be log t squared over

369
00:14:06,000 --> 00:14:07,279
epsilon

370
00:14:07,279 --> 00:14:09,360
okay this is what you get if you

371
00:14:09,360 --> 00:14:11,760
require the success probability to be at

372
00:14:11,760 --> 00:14:13,600
most epsilon

373
00:14:13,600 --> 00:14:16,800
using our analysis we can set a lambda

374
00:14:16,800 --> 00:14:18,800
to be the maximum of these two

375
00:14:18,800 --> 00:14:21,360
expressions but you can see that it's

376
00:14:21,360 --> 00:14:23,839
smaller than this expression okay

377
00:14:23,839 --> 00:14:25,920
so let's say that this is the maximal

378
00:14:25,920 --> 00:14:27,519
one depending on the values of t and

379
00:14:27,519 --> 00:14:28,880
epsilon

380
00:14:28,880 --> 00:14:31,279
the lambda has to be only log t squared

381
00:14:31,279 --> 00:14:33,839
and not log d squared over epsilon

382
00:14:33,839 --> 00:14:35,440
and again this gives us a smaller

383
00:14:35,440 --> 00:14:37,680
argument size because as we said before

384
00:14:37,680 --> 00:14:39,279
this is the argument size is q times

385
00:14:39,279 --> 00:14:41,680
lambda times log n so these two things

386
00:14:41,680 --> 00:14:44,079
are like a constant and we we are making

387
00:14:44,079 --> 00:14:47,360
a lambda better so any factor that we

388
00:14:47,360 --> 00:14:49,279
improve here we we

389
00:14:49,279 --> 00:14:50,880
gain the same factor in the argument

390
00:14:50,880 --> 00:14:53,199
size

391
00:14:56,839 --> 00:14:59,199
um we worked

392
00:14:59,199 --> 00:15:01,839
quite hard to make sure that all the

393
00:15:01,839 --> 00:15:04,399
constants and our theorems are very very

394
00:15:04,399 --> 00:15:06,800
tight okay and have a very concrete and

395
00:15:06,800 --> 00:15:08,320
good concerns

396
00:15:08,320 --> 00:15:11,040
and what we show is we get actually

397
00:15:11,040 --> 00:15:13,519
computer efficiency as well so in this

398
00:15:13,519 --> 00:15:15,360
table we're comparing our analysis to

399
00:15:15,360 --> 00:15:19,040
the best pile analysis of mikali so we

400
00:15:19,040 --> 00:15:21,040
took the the same

401
00:15:21,040 --> 00:15:23,440
pcp with soundness and some proof length

402
00:15:23,440 --> 00:15:26,560
okay 2 to 30 and we amplified it and

403
00:15:26,560 --> 00:15:29,120
depending on the tn epsilon you can show

404
00:15:29,120 --> 00:15:31,040
you can see the results here so in red

405
00:15:31,040 --> 00:15:32,880
this is the size of the argument in my

406
00:15:32,880 --> 00:15:34,880
color schemes and in blue it's uh it's

407
00:15:34,880 --> 00:15:35,920
all skin

408
00:15:35,920 --> 00:15:37,519
and you can see that overall depending

409
00:15:37,519 --> 00:15:40,880
on the values of t and epsilon we get a

410
00:15:40,880 --> 00:15:42,480
improvement between

411
00:15:42,480 --> 00:15:45,680
20 to 40 percent

412
00:15:47,519 --> 00:15:48,639
okay

413
00:15:48,639 --> 00:15:50,720
um another thing that i want to mention

414
00:15:50,720 --> 00:15:53,199
this tight analysis actually led us to a

415
00:15:53,199 --> 00:15:55,199
new construction okay so this is a

416
00:15:55,199 --> 00:15:57,120
significant wall that you can

417
00:15:57,120 --> 00:15:59,279
see in the last crypto

418
00:15:59,279 --> 00:16:01,519
and the new construction took the tight

419
00:16:01,519 --> 00:16:04,399
analysis and managed to overcome and

420
00:16:04,399 --> 00:16:06,000
circumvent all the bottlenecks in the

421
00:16:06,000 --> 00:16:07,920
analysis

422
00:16:07,920 --> 00:16:09,920
and what we got is that the the new

423
00:16:09,920 --> 00:16:12,560
construction has a has sound is just t

424
00:16:12,560 --> 00:16:15,440
times epsilon okay with with the same

425
00:16:15,440 --> 00:16:17,199
requirement on lambda

426
00:16:17,199 --> 00:16:19,440
and this actually gives a much better

427
00:16:19,440 --> 00:16:21,920
argument size both concretely and

428
00:16:21,920 --> 00:16:24,240
actually even asymptotically

429
00:16:24,240 --> 00:16:26,560
and i really welcome you to see the

430
00:16:26,560 --> 00:16:29,040
paper on imprint

431
00:16:29,040 --> 00:16:30,079
okay

432
00:16:30,079 --> 00:16:31,360
so now i want to

433
00:16:31,360 --> 00:16:35,279
dive back in to our construction

434
00:16:35,279 --> 00:16:37,600
in the analysis of our construction

435
00:16:37,600 --> 00:16:41,600
so first how the prior analysis worked

436
00:16:41,600 --> 00:16:43,519
okay so we wanted security and we call

437
00:16:43,519 --> 00:16:45,600
it snugs right

438
00:16:45,600 --> 00:16:47,759
what we did usually

439
00:16:47,759 --> 00:16:49,600
is we wanted to say okay the commitment

440
00:16:49,600 --> 00:16:51,839
scheme is really a commitment scheme so

441
00:16:51,839 --> 00:16:54,000
we had to assume

442
00:16:54,000 --> 00:16:56,320
okay or condition on the event that

443
00:16:56,320 --> 00:16:58,720
there are no collision and no inversions

444
00:16:58,720 --> 00:17:01,040
okay and that's why we lost this

445
00:17:01,040 --> 00:17:03,839
probability in the soundest

446
00:17:03,839 --> 00:17:06,000
once we have this then really the

447
00:17:06,000 --> 00:17:08,079
cheating proverb has nothing

448
00:17:08,079 --> 00:17:09,520
he or she can do

449
00:17:09,520 --> 00:17:11,039
except to

450
00:17:11,039 --> 00:17:13,359
commit to some

451
00:17:13,359 --> 00:17:16,400
pcp string and hope that the verifier is

452
00:17:16,400 --> 00:17:18,959
convinced okay so the security from this

453
00:17:18,959 --> 00:17:21,119
point on is reduced to the soundness of

454
00:17:21,119 --> 00:17:23,678
the pcb

455
00:17:23,760 --> 00:17:25,199
in our case

456
00:17:25,199 --> 00:17:28,160
we want the security of mikali snarg but

457
00:17:28,160 --> 00:17:30,240
we cannot just condition on not finding

458
00:17:30,240 --> 00:17:33,360
collisions or inversions okay and we

459
00:17:33,360 --> 00:17:35,760
have actually have to keep showing that

460
00:17:35,760 --> 00:17:37,039
soundness

461
00:17:37,039 --> 00:17:38,080
holds

462
00:17:38,080 --> 00:17:40,240
even when the pool will find collisions

463
00:17:40,240 --> 00:17:41,760
or inversions

464
00:17:41,760 --> 00:17:43,520
okay what we're going to do instead

465
00:17:43,520 --> 00:17:45,039
we're going to score the collisions

466
00:17:45,039 --> 00:17:46,480
joining belgians

467
00:17:46,480 --> 00:17:47,840
okay and we're going to bound the

468
00:17:47,840 --> 00:17:50,160
probability that he finds more and more

469
00:17:50,160 --> 00:17:52,240
collision to inversions

470
00:17:52,240 --> 00:17:55,440
and then given a specific esco

471
00:17:55,440 --> 00:17:57,039
we're going to see

472
00:17:57,039 --> 00:17:59,840
how harmful this disco is okay so we're

473
00:17:59,840 --> 00:18:02,320
going to have some new game that we call

474
00:18:02,320 --> 00:18:04,240
trees on this game

475
00:18:04,240 --> 00:18:06,160
and this game has got is going to have a

476
00:18:06,160 --> 00:18:07,760
specific budget and we're going to bound

477
00:18:07,760 --> 00:18:10,240
the probability of the adversary to win

478
00:18:10,240 --> 00:18:12,880
given this specific budget

479
00:18:12,880 --> 00:18:15,200
and we're gonna um

480
00:18:15,200 --> 00:18:17,440
do this bound using a reduction to

481
00:18:17,440 --> 00:18:18,960
another type of game that we're gonna

482
00:18:18,960 --> 00:18:21,200
call that we call it reverse on this

483
00:18:21,200 --> 00:18:22,080
game

484
00:18:22,080 --> 00:18:24,320
and this game will reduce back to pcp

485
00:18:24,320 --> 00:18:26,240
soundness

486
00:18:26,240 --> 00:18:28,480
okay so the analysis is very modular in

487
00:18:28,480 --> 00:18:30,720
this uh and this approach this game

488
00:18:30,720 --> 00:18:32,480
really describes

489
00:18:32,480 --> 00:18:35,120
all possible strategies that adversary

490
00:18:35,120 --> 00:18:36,880
can do

491
00:18:36,880 --> 00:18:38,559
and this is an intermediate and very

492
00:18:38,559 --> 00:18:40,559
simple game that allows us to to reduce

493
00:18:40,559 --> 00:18:42,080
all these possible strategies to

494
00:18:42,080 --> 00:18:44,240
something very simple in this game we

495
00:18:44,240 --> 00:18:46,320
can like say something very meaningful

496
00:18:46,320 --> 00:18:49,679
just using the pcp service

497
00:18:49,679 --> 00:18:52,720
okay so now i'm gonna dive in

498
00:18:52,720 --> 00:18:55,840
these steps okay to give some additional

499
00:18:55,840 --> 00:18:57,360
details and we're going to start with

500
00:18:57,360 --> 00:18:59,840
the scoring collisions and inversions

501
00:18:59,840 --> 00:19:02,960
okay so we're in this part of the proof

502
00:19:02,960 --> 00:19:06,000
um so we introduce a scoring function

503
00:19:06,000 --> 00:19:07,840
okay the scoring function is a function

504
00:19:07,840 --> 00:19:10,320
of the query traces of the algorithm so

505
00:19:10,320 --> 00:19:12,400
suppose you have achieving prover you

506
00:19:12,400 --> 00:19:14,000
can look at his

507
00:19:14,000 --> 00:19:16,400
it's a query trace okay and then you can

508
00:19:16,400 --> 00:19:18,320
give a score to this square

509
00:19:18,320 --> 00:19:19,760
query please

510
00:19:19,760 --> 00:19:22,240
and the scores are going to allow us to

511
00:19:22,240 --> 00:19:24,720
quantify the soundness even in the event

512
00:19:24,720 --> 00:19:27,360
of collisional intelligence okay so

513
00:19:27,360 --> 00:19:29,280
let's first talk about the skull okay

514
00:19:29,280 --> 00:19:31,120
what school do i give to a specific

515
00:19:31,120 --> 00:19:33,760
trace okay if the trace hack contains

516
00:19:33,760 --> 00:19:35,039
nothing interesting it's not going to

517
00:19:35,039 --> 00:19:36,400
get the scope it's going to get it's

518
00:19:36,400 --> 00:19:39,280
going when i see some rare events okay

519
00:19:39,280 --> 00:19:41,919
so one example of we have two kinds of

520
00:19:41,919 --> 00:19:43,600
irrelevant one the first one is

521
00:19:43,600 --> 00:19:46,320
collisions okay so if i see a collision

522
00:19:46,320 --> 00:19:49,120
i'm going to add one to the scroll

523
00:19:49,120 --> 00:19:51,280
okay and i have to define this slightly

524
00:19:51,280 --> 00:19:53,360
more precisely okay so what happens if i

525
00:19:53,360 --> 00:19:55,919
see a k-wise collision okay these are k

526
00:19:55,919 --> 00:19:57,760
elements that all collides with the same

527
00:19:57,760 --> 00:20:00,559
value it's going to get a k uh a score

528
00:20:00,559 --> 00:20:03,200
of k k minus 1.

529
00:20:03,200 --> 00:20:06,240
okay i'm going to add all these scrolls

530
00:20:06,240 --> 00:20:08,320
so this more or less counts the number

531
00:20:08,320 --> 00:20:11,440
of collisions in a given place

532
00:20:11,440 --> 00:20:13,440
okay the second thing is going to be

533
00:20:13,440 --> 00:20:15,280
about inversions

534
00:20:15,280 --> 00:20:17,520
okay so inversion is another thing we

535
00:20:17,520 --> 00:20:19,440
don't want the adversary to do because

536
00:20:19,440 --> 00:20:21,039
then he can

537
00:20:21,039 --> 00:20:24,799
start by querying the root and seeing uh

538
00:20:24,799 --> 00:20:27,039
and seeing the queries and then walk his

539
00:20:27,039 --> 00:20:29,760
way back and just derive the pcp that he

540
00:20:29,760 --> 00:20:31,280
wants that

541
00:20:31,280 --> 00:20:34,880
that convinces a specific verify

542
00:20:34,880 --> 00:20:36,320
okay

543
00:20:36,320 --> 00:20:37,679
so we're going to count the number of

544
00:20:37,679 --> 00:20:39,600
inversions so inversion is going to be a

545
00:20:39,600 --> 00:20:41,360
response y

546
00:20:41,360 --> 00:20:45,440
okay the hit a previous query x1 x2 okay

547
00:20:45,440 --> 00:20:47,679
so remember that queries are rehashing

548
00:20:47,679 --> 00:20:49,280
two elements to one okay we go with

549
00:20:49,280 --> 00:20:50,880
another tree

550
00:20:50,880 --> 00:20:53,919
um so what we don't expect is to see a

551
00:20:53,919 --> 00:20:55,280
an answer

552
00:20:55,280 --> 00:20:56,799
that hits something that we queried

553
00:20:56,799 --> 00:20:59,039
before okay this is also reverted and

554
00:20:59,039 --> 00:21:00,960
we're gonna

555
00:21:00,960 --> 00:21:03,600
and we're going to count these

556
00:21:03,600 --> 00:21:06,080
and given this scoring function

557
00:21:06,080 --> 00:21:08,240
uh what we claim and what we show in the

558
00:21:08,240 --> 00:21:11,440
paper is that any t algorithm

559
00:21:11,440 --> 00:21:13,679
for any query algorithm the probability

560
00:21:13,679 --> 00:21:17,919
that this that the score is more than k

561
00:21:17,919 --> 00:21:20,559
is bounded by something that

562
00:21:20,559 --> 00:21:22,080
you can already see comes from the

563
00:21:22,080 --> 00:21:26,880
birthday paradox to the power of k

564
00:21:26,880 --> 00:21:28,159
and this thing this thing is not going

565
00:21:28,159 --> 00:21:29,840
to be very small so this thing is going

566
00:21:29,840 --> 00:21:31,600
to be like a constant so the probability

567
00:21:31,600 --> 00:21:33,200
that he finds a collision in our

568
00:21:33,200 --> 00:21:35,200
analysis is actually going to be some

569
00:21:35,200 --> 00:21:37,919
constant okay so we can

570
00:21:37,919 --> 00:21:40,320
most definitely not rule out the

571
00:21:40,320 --> 00:21:42,640
event that he finds a collision okay but

572
00:21:42,640 --> 00:21:44,080
the probability that you find case

573
00:21:44,080 --> 00:21:46,400
collisions this already decays

574
00:21:46,400 --> 00:21:49,679
exponentially faster than k

575
00:21:52,159 --> 00:21:53,039
okay

576
00:21:53,039 --> 00:21:56,400
so before i go into the other parts okay

577
00:21:56,400 --> 00:21:57,840
the three sounders and i think i just

578
00:21:57,840 --> 00:21:59,200
want to show you how

579
00:21:59,200 --> 00:22:01,440
using this and we're going to have a

580
00:22:01,440 --> 00:22:03,360
step that you're going to believe and

581
00:22:03,360 --> 00:22:04,559
i'm going to

582
00:22:04,559 --> 00:22:07,280
show you later okay how i can conclude

583
00:22:07,280 --> 00:22:09,120
the proof okay so this will show why

584
00:22:09,120 --> 00:22:10,799
this is useful

585
00:22:10,799 --> 00:22:12,880
so what is the probability that the

586
00:22:12,880 --> 00:22:15,039
verifier accepts okay suppose that x is

587
00:22:15,039 --> 00:22:16,559
not the language and i want to bound the

588
00:22:16,559 --> 00:22:18,000
sound cell

589
00:22:18,000 --> 00:22:20,240
so this thing i can always do i can

590
00:22:20,240 --> 00:22:22,159
always do this infinite sum and say okay

591
00:22:22,159 --> 00:22:24,960
it's the probability that verify accepts

592
00:22:24,960 --> 00:22:26,480
conditioned on

593
00:22:26,480 --> 00:22:29,200
the adversary okay getting a score of at

594
00:22:29,200 --> 00:22:31,679
most k

595
00:22:32,320 --> 00:22:34,640
times the probability of getting a score

596
00:22:34,640 --> 00:22:35,840
of mos k

597
00:22:35,840 --> 00:22:38,080
okay so this is just a sequence of the

598
00:22:38,080 --> 00:22:40,080
infinite sequence of events and i can

599
00:22:40,080 --> 00:22:42,159
just sum up the probabilities of all

600
00:22:42,159 --> 00:22:43,200
these

601
00:22:43,200 --> 00:22:45,679
all of these things

602
00:22:45,679 --> 00:22:47,280
okay so this is using the scoring

603
00:22:47,280 --> 00:22:49,678
function

604
00:22:50,320 --> 00:22:52,000
so now

605
00:22:52,000 --> 00:22:54,400
now i can focus on one specific k and

606
00:22:54,400 --> 00:22:55,919
ask what is the probability that the

607
00:22:55,919 --> 00:22:58,000
verifier accepts okay what the

608
00:22:58,000 --> 00:22:59,840
probability that the chi chi approval

609
00:22:59,840 --> 00:23:01,200
succeeds

610
00:23:01,200 --> 00:23:02,240
if

611
00:23:02,240 --> 00:23:04,559
i condition on him getting a score of at

612
00:23:04,559 --> 00:23:07,120
most k so if k is three means i cannot

613
00:23:07,120 --> 00:23:08,640
find four collision he has a budget of

614
00:23:08,640 --> 00:23:10,240
three collisions so what's the

615
00:23:10,240 --> 00:23:12,480
probability of succeeding with this

616
00:23:12,480 --> 00:23:14,960
specific budget this is exactly why we

617
00:23:14,960 --> 00:23:17,760
introduced this game threesomeness game

618
00:23:17,760 --> 00:23:19,679
okay so this is really by by the

619
00:23:19,679 --> 00:23:23,120
definition of the three sounders game

620
00:23:23,120 --> 00:23:26,080
yeah okay

621
00:23:26,480 --> 00:23:28,640
now this is a step that of course i

622
00:23:28,640 --> 00:23:30,799
didn't show yet okay

623
00:23:30,799 --> 00:23:33,280
and this is going to be lemma 1 plus 2

624
00:23:33,280 --> 00:23:34,840
okay that we're going to just briefly

625
00:23:34,840 --> 00:23:38,320
see uh and this uh the probability of

626
00:23:38,320 --> 00:23:40,159
getting the scope okay this is the claim

627
00:23:40,159 --> 00:23:43,360
that we we have on the

628
00:23:43,600 --> 00:23:46,320
underscoring function

629
00:23:46,320 --> 00:23:47,360
okay and we're going to see this

630
00:23:47,360 --> 00:23:49,760
expression and just maybe just point out

631
00:23:49,760 --> 00:23:52,720
already that what we see here is this is

632
00:23:52,720 --> 00:23:54,400
actually the cost we get from collision

633
00:23:54,400 --> 00:23:56,240
so we have the same t in epsilon as

634
00:23:56,240 --> 00:23:59,039
before okay as in the original

635
00:23:59,039 --> 00:24:01,520
a sum this expression of mikali but we

636
00:24:01,520 --> 00:24:04,559
pay another factor here of two to the k

637
00:24:04,559 --> 00:24:06,400
okay because if he has a score of k this

638
00:24:06,400 --> 00:24:07,919
gives them a lot of power it gives them

639
00:24:07,919 --> 00:24:09,360
exponential and k

640
00:24:09,360 --> 00:24:11,200
power okay and this is going to come

641
00:24:11,200 --> 00:24:14,400
from the inversions part

642
00:24:14,400 --> 00:24:16,320
but now we can just take everything that

643
00:24:16,320 --> 00:24:18,640
depends on that doesn't depend on k we

644
00:24:18,640 --> 00:24:21,520
can take it out and we just get this the

645
00:24:21,520 --> 00:24:23,520
same expression okay just rewritten

646
00:24:23,520 --> 00:24:24,720
differently

647
00:24:24,720 --> 00:24:26,640
and then when we look at this infinite

648
00:24:26,640 --> 00:24:29,840
sum okay that depends on k and now here

649
00:24:29,840 --> 00:24:31,600
comes the condition that lambda is

650
00:24:31,600 --> 00:24:34,000
slightly more than 2 log t then this

651
00:24:34,000 --> 00:24:35,600
infinite sum is going to converge and

652
00:24:35,600 --> 00:24:38,080
we're going to be left with the

653
00:24:38,080 --> 00:24:40,400
the soundest expression that we want

654
00:24:40,400 --> 00:24:41,360
okay

655
00:24:41,360 --> 00:24:43,279
so really what's missing

656
00:24:43,279 --> 00:24:46,559
is for me to give you analysis why if

657
00:24:46,559 --> 00:24:49,360
you're limited to a budget of k

658
00:24:49,360 --> 00:24:52,080
okay in this three sounds game uh i i

659
00:24:52,080 --> 00:24:54,400
need to give you some bound in the

660
00:24:54,400 --> 00:24:57,679
of the soundness of this game

661
00:24:58,400 --> 00:24:59,279
okay

662
00:24:59,279 --> 00:25:00,720
and lemma one plus two is going to be

663
00:25:00,720 --> 00:25:01,919
about the three soundness and the

664
00:25:01,919 --> 00:25:03,279
reversal

665
00:25:03,279 --> 00:25:04,720
okay

666
00:25:04,720 --> 00:25:06,400
okay so now we're moving on to the three

667
00:25:06,400 --> 00:25:08,640
sounders game

668
00:25:08,640 --> 00:25:10,720
so we introduce this intermediate

669
00:25:10,720 --> 00:25:13,520
information theoretic game okay place on

670
00:25:13,520 --> 00:25:16,880
this game it has two parameters okay t

671
00:25:16,880 --> 00:25:19,200
is the number of the actions okay this

672
00:25:19,200 --> 00:25:20,640
corresponds to number of queries that

673
00:25:20,640 --> 00:25:22,640
varsity has it's okay in the game it's

674
00:25:22,640 --> 00:25:25,120
the number of the actions he can do and

675
00:25:25,120 --> 00:25:27,200
k is some bad budget okay it's going to

676
00:25:27,200 --> 00:25:30,720
be the collision and inversion budget

677
00:25:30,720 --> 00:25:32,799
the game is planed on a graph okay it's

678
00:25:32,799 --> 00:25:34,159
blended it off

679
00:25:34,159 --> 00:25:37,039
and uh

680
00:25:37,279 --> 00:25:38,000
and

681
00:25:38,000 --> 00:25:40,400
in in every you have this infinite loop

682
00:25:40,400 --> 00:25:43,520
where the approval can choose one of two

683
00:25:43,520 --> 00:25:46,400
actions okay the first one is adding an

684
00:25:46,400 --> 00:25:48,720
edge the second one is deriving pcp

685
00:25:48,720 --> 00:25:50,559
randomness okay we're gonna see this in

686
00:25:50,559 --> 00:25:51,520
a second

687
00:25:51,520 --> 00:25:54,159
every time he chooses an action the the

688
00:25:54,159 --> 00:25:57,200
budget t decreases by one okay and when

689
00:25:57,200 --> 00:26:00,400
we get to zero we stop

690
00:26:00,559 --> 00:26:03,760
uh okay so what is this graph

691
00:26:03,760 --> 00:26:06,640
so the graph already contains

692
00:26:06,640 --> 00:26:08,320
all possible nodes

693
00:26:08,320 --> 00:26:11,120
and the what the cheating pool can do it

694
00:26:11,120 --> 00:26:13,840
can add edges from this set

695
00:26:13,840 --> 00:26:15,600
okay so this is the complete

696
00:26:15,600 --> 00:26:17,200
set of edges and you can choose one and

697
00:26:17,200 --> 00:26:19,360
add it to the gulf

698
00:26:19,360 --> 00:26:21,520
so what are these edges

699
00:26:21,520 --> 00:26:22,400
so

700
00:26:22,400 --> 00:26:23,840
remember in the construction we have the

701
00:26:23,840 --> 00:26:26,960
prefixes i and j okay so every node we

702
00:26:26,960 --> 00:26:29,279
know exactly where it is okay so these

703
00:26:29,279 --> 00:26:31,600
are these i and j's here okay so we have

704
00:26:31,600 --> 00:26:33,120
levels

705
00:26:33,120 --> 00:26:34,960
and the i is going to be the

706
00:26:34,960 --> 00:26:36,799
the level of the node

707
00:26:36,799 --> 00:26:39,440
okay so we're always connecting nodes

708
00:26:39,440 --> 00:26:42,320
from level i to two nodes in level i

709
00:26:42,320 --> 00:26:44,880
plus one okay for example here so we

710
00:26:44,880 --> 00:26:45,919
have

711
00:26:45,919 --> 00:26:47,760
this is level i and two nodes in level i

712
00:26:47,760 --> 00:26:49,039
plus one

713
00:26:49,039 --> 00:26:51,520
okay and if you connect it to some

714
00:26:51,520 --> 00:26:52,880
position j and these are the

715
00:26:52,880 --> 00:26:55,279
corresponding positions okay in the next

716
00:26:55,279 --> 00:26:56,559
level

717
00:26:56,559 --> 00:26:59,840
and the h values are just like the the

718
00:26:59,840 --> 00:27:02,480
actual hash the output of the oracle

719
00:27:02,480 --> 00:27:04,559
this is something that he can completely

720
00:27:04,559 --> 00:27:07,679
uh specify

721
00:27:07,679 --> 00:27:08,799
okay

722
00:27:08,799 --> 00:27:09,520
so

723
00:27:09,520 --> 00:27:11,679
this is the complete set of edges and

724
00:27:11,679 --> 00:27:13,360
you can choose from here and add it to

725
00:27:13,360 --> 00:27:14,799
the graph

726
00:27:14,799 --> 00:27:16,880
however we didn't talk about the budget

727
00:27:16,880 --> 00:27:20,720
okay what happens to the budget key

728
00:27:20,720 --> 00:27:23,440
okay so if he just adds an edge let's

729
00:27:23,440 --> 00:27:25,840
say he added this edge fine he just adds

730
00:27:25,840 --> 00:27:29,120
it and t decreases by one okay

731
00:27:29,120 --> 00:27:31,840
what happens if he adds a collision

732
00:27:31,840 --> 00:27:34,799
okay so let's in this example here okay

733
00:27:34,799 --> 00:27:37,279
we have the node u and he added this

734
00:27:37,279 --> 00:27:40,559
this edge here and the v primes okay so

735
00:27:40,559 --> 00:27:42,559
we have a collision here

736
00:27:42,559 --> 00:27:45,600
uh he's allowed to do that okay but each

737
00:27:45,600 --> 00:27:48,960
time he does this the um the collision

738
00:27:48,960 --> 00:27:51,279
budget decreases by one

739
00:27:51,279 --> 00:27:53,760
okay and of course once we got to zero

740
00:27:53,760 --> 00:27:56,000
that's it okay it cannot continue beyond

741
00:27:56,000 --> 00:27:58,320
zero

742
00:27:58,320 --> 00:28:00,480
okay so that was the easy part what

743
00:28:00,480 --> 00:28:02,720
about inversions

744
00:28:02,720 --> 00:28:04,559
uh inversion is

745
00:28:04,559 --> 00:28:07,760
is a the harder part to add okay so the

746
00:28:07,760 --> 00:28:09,440
problem also has a budget of k

747
00:28:09,440 --> 00:28:10,880
inversions

748
00:28:10,880 --> 00:28:13,279
and this is slightly harder to model

749
00:28:13,279 --> 00:28:14,159
because

750
00:28:14,159 --> 00:28:16,480
a single inversion actually

751
00:28:16,480 --> 00:28:18,480
allows him to win

752
00:28:18,480 --> 00:28:21,200
okay so if he can invert something he

753
00:28:21,200 --> 00:28:23,120
can just

754
00:28:23,120 --> 00:28:26,640
er er he can just a a computer root and

755
00:28:26,640 --> 00:28:28,880
then compute the corresponding pcp that

756
00:28:28,880 --> 00:28:30,880
is good for this root and then just

757
00:28:30,880 --> 00:28:32,799
invert back the function to connect the

758
00:28:32,799 --> 00:28:34,000
two

759
00:28:34,000 --> 00:28:36,559
so we're not gonna allow

760
00:28:36,559 --> 00:28:38,720
arbitrary inversions okay or or

761
00:28:38,720 --> 00:28:40,640
something called strong inversions these

762
00:28:40,640 --> 00:28:43,279
are gonna be disallowed okay instead

763
00:28:43,279 --> 00:28:45,840
what we're gonna allow is weak inversion

764
00:28:45,840 --> 00:28:48,159
okay i'm gonna try to um tell you what

765
00:28:48,159 --> 00:28:49,840
is the difference so

766
00:28:49,840 --> 00:28:52,480
a strong inversion is gonna be when i

767
00:28:52,480 --> 00:28:53,600
have some

768
00:28:53,600 --> 00:28:56,720
value y okay and i wanna find some x

769
00:28:56,720 --> 00:28:58,880
such that f of x equals y this is a

770
00:28:58,880 --> 00:29:01,440
stronger version okay i particularly

771
00:29:01,440 --> 00:29:03,440
inverted y

772
00:29:03,440 --> 00:29:07,360
okay corresponding to this function if

773
00:29:07,360 --> 00:29:09,760
what is a weak inversion okay which is

774
00:29:09,760 --> 00:29:11,679
allowed the weak inversion is where i

775
00:29:11,679 --> 00:29:14,960
give you a large subset okay of y one y

776
00:29:14,960 --> 00:29:16,799
one up to y m

777
00:29:16,799 --> 00:29:19,279
and then you're gonna

778
00:29:19,279 --> 00:29:23,600
find x that inverted one of them

779
00:29:23,600 --> 00:29:25,600
okay this is a much easier task and this

780
00:29:25,600 --> 00:29:26,640
is going to be

781
00:29:26,640 --> 00:29:27,600
allowed

782
00:29:27,600 --> 00:29:29,520
and let me show you how this goes back

783
00:29:29,520 --> 00:29:31,679
to the graph okay

784
00:29:31,679 --> 00:29:33,840
so

785
00:29:33,840 --> 00:29:37,279
if the prover wants to add an inversion

786
00:29:37,279 --> 00:29:38,399
okay

787
00:29:38,399 --> 00:29:41,440
so inversion is adding a um an edge to a

788
00:29:41,440 --> 00:29:42,799
part of the graph that's already

789
00:29:42,799 --> 00:29:45,279
connected okay

790
00:29:45,279 --> 00:29:48,399
then he can specify inj

791
00:29:48,399 --> 00:29:50,640
but he cannot specify h

792
00:29:50,640 --> 00:29:53,039
okay so if this node here is already

793
00:29:53,039 --> 00:29:55,200
connected and he wants to add now this

794
00:29:55,200 --> 00:29:58,399
to this edge here connected to here this

795
00:29:58,399 --> 00:30:00,799
would be an inversion okay

796
00:30:00,799 --> 00:30:03,120
so he can specify i and h but he cannot

797
00:30:03,120 --> 00:30:06,159
specify the specific h of this node

798
00:30:06,159 --> 00:30:07,440
instead

799
00:30:07,440 --> 00:30:10,640
h is going to be sampled from the

800
00:30:10,640 --> 00:30:13,200
all possible potential capital h

801
00:30:13,200 --> 00:30:15,520
okay so what is capital h

802
00:30:15,520 --> 00:30:16,320
so

803
00:30:16,320 --> 00:30:19,200
capital h is going to be all the h's

804
00:30:19,200 --> 00:30:22,799
for which this node i i j h

805
00:30:22,799 --> 00:30:25,520
he cannot connect to okay if there's

806
00:30:25,520 --> 00:30:27,919
some h such that i j h is just free and

807
00:30:27,919 --> 00:30:29,200
it can connect to and it's not

808
00:30:29,200 --> 00:30:31,120
considered inversion then fine just just

809
00:30:31,120 --> 00:30:33,600
do that okay you take all the nodes that

810
00:30:33,600 --> 00:30:35,360
all are already connected to some

811
00:30:35,360 --> 00:30:37,120
component and this is going to be the

812
00:30:37,120 --> 00:30:39,120
capital h okay

813
00:30:39,120 --> 00:30:41,120
and now an edge is added only with

814
00:30:41,120 --> 00:30:43,200
probability the size of this capillary

815
00:30:43,200 --> 00:30:45,679
is h over 2 to the t

816
00:30:45,679 --> 00:30:47,200
okay if you're slightly confused let me

817
00:30:47,200 --> 00:30:48,640
give you two examples i think they'll

818
00:30:48,640 --> 00:30:51,279
make things easier so

819
00:30:51,279 --> 00:30:53,360
when h equals one let's say just started

820
00:30:53,360 --> 00:30:55,039
and have only one node that's connected

821
00:30:55,039 --> 00:30:56,399
to something and he wants to do an

822
00:30:56,399 --> 00:30:57,519
inversion

823
00:30:57,519 --> 00:30:59,600
but then sure you can say listen i give

824
00:30:59,600 --> 00:31:02,000
you ij i want to do this in version and

825
00:31:02,000 --> 00:31:04,320
capital h contains only this particular

826
00:31:04,320 --> 00:31:06,640
node okay so this is actually a strong

827
00:31:06,640 --> 00:31:09,279
inversion okay so right this is a strong

828
00:31:09,279 --> 00:31:11,919
inversion but we're going to add this

829
00:31:11,919 --> 00:31:13,840
edge only with probability one over two

830
00:31:13,840 --> 00:31:16,480
to the one over two t

831
00:31:16,480 --> 00:31:18,399
okay and maybe more importantly i want

832
00:31:18,399 --> 00:31:20,640
to i want to mention that every time he

833
00:31:20,640 --> 00:31:21,840
he does this

834
00:31:21,840 --> 00:31:23,120
the inversion

835
00:31:23,120 --> 00:31:26,480
a budget decreases by one regardless of

836
00:31:26,480 --> 00:31:29,120
whether the edge was added or not

837
00:31:29,120 --> 00:31:31,440
okay so you can try to do a strong

838
00:31:31,440 --> 00:31:33,360
inversion but it's going to happen with

839
00:31:33,360 --> 00:31:35,919
very small probability and it costs him

840
00:31:35,919 --> 00:31:38,320
an inversion budget

841
00:31:38,320 --> 00:31:39,200
okay

842
00:31:39,200 --> 00:31:41,039
the other side

843
00:31:41,039 --> 00:31:43,679
he can make h very large

844
00:31:43,679 --> 00:31:46,799
okay you can make h the largest possible

845
00:31:46,799 --> 00:31:48,880
is t okay you can have it most t and

846
00:31:48,880 --> 00:31:50,320
nodes connected because it has to

847
00:31:50,320 --> 00:31:51,760
connect them first

848
00:31:51,760 --> 00:31:54,640
this would be a very weak inversion okay

849
00:31:54,640 --> 00:31:57,760
but it's added with probability half

850
00:31:57,760 --> 00:32:00,480
okay so you can have you can have many

851
00:32:00,480 --> 00:32:02,320
potential nodes and then you're going to

852
00:32:02,320 --> 00:32:04,240
be you're going to add the edge with

853
00:32:04,240 --> 00:32:06,000
higher probability

854
00:32:06,000 --> 00:32:08,559
okay but your edge is going to be added

855
00:32:08,559 --> 00:32:10,159
to a randomly

856
00:32:10,159 --> 00:32:12,399
a node from h

857
00:32:12,399 --> 00:32:14,320
so you cannot really specify exactly

858
00:32:14,320 --> 00:32:15,919
where the inversion is going to be you

859
00:32:15,919 --> 00:32:18,320
have a big bucket of nodes potential

860
00:32:18,320 --> 00:32:20,080
nodes you say i want to inversion with

861
00:32:20,080 --> 00:32:22,159
one of them and with high mobility you

862
00:32:22,159 --> 00:32:25,200
have an edge that connects a random one

863
00:32:25,200 --> 00:32:26,559
okay so this is like the trade-off

864
00:32:26,559 --> 00:32:28,399
between a strong and a weakened version

865
00:32:28,399 --> 00:32:30,480
and of course he can do anything on this

866
00:32:30,480 --> 00:32:33,519
trade-off that he wants

867
00:32:36,000 --> 00:32:37,919
okay so that was the three soundness

868
00:32:37,919 --> 00:32:40,000
game and the threesome's game really

869
00:32:40,000 --> 00:32:41,840
captured all possible

870
00:32:41,840 --> 00:32:44,399
strategies of the adversary and that's

871
00:32:44,399 --> 00:32:46,159
actually what we show we show that any

872
00:32:46,159 --> 00:32:49,039
adversary for the original snog we can

873
00:32:49,039 --> 00:32:51,120
translate to an adversary in the

874
00:32:51,120 --> 00:32:52,880
threesomes game

875
00:32:52,880 --> 00:32:54,960
and now what we do we introduce a new

876
00:32:54,960 --> 00:32:56,880
game okay and i'm gonna present it here

877
00:32:56,880 --> 00:32:59,519
a very simple form of this game called

878
00:32:59,519 --> 00:33:01,039
reveal soundness

879
00:33:01,039 --> 00:33:04,080
and what we show we reduce every a

880
00:33:04,080 --> 00:33:06,000
adversary to the of the trees honest

881
00:33:06,000 --> 00:33:08,480
game to the to adversary to this reverse

882
00:33:08,480 --> 00:33:11,279
on this game so the reverse on this game

883
00:33:11,279 --> 00:33:12,320
is the following it's called the veil

884
00:33:12,320 --> 00:33:14,399
sounders because we're gonna reverse the

885
00:33:14,399 --> 00:33:15,919
roles of

886
00:33:15,919 --> 00:33:17,519
in a standard pcp your first committee

887
00:33:17,519 --> 00:33:19,519
of pcp and then you choose randomness

888
00:33:19,519 --> 00:33:21,760
right and we're gonna verse this so we

889
00:33:21,760 --> 00:33:22,840
call it reveal

890
00:33:22,840 --> 00:33:26,159
songs so the game is as follows though

891
00:33:26,159 --> 00:33:28,960
we start where the game first stamp is

892
00:33:28,960 --> 00:33:31,440
row one up to ot

893
00:33:31,440 --> 00:33:34,000
okay so this game has some parameter t

894
00:33:34,000 --> 00:33:35,600
and these randomnesses these are

895
00:33:35,600 --> 00:33:37,279
randomnesses of the

896
00:33:37,279 --> 00:33:39,120
pcp verifier

897
00:33:39,120 --> 00:33:41,279
okay so we start by sampling randomness

898
00:33:41,279 --> 00:33:44,000
for the pcb verifier okay very weird but

899
00:33:44,000 --> 00:33:46,559
we sample a lot of them okay so one up

900
00:33:46,559 --> 00:33:49,200
to volte

901
00:33:49,360 --> 00:33:51,679
only then okay this is given to the

902
00:33:51,679 --> 00:33:54,240
proven okay and the prover as a function

903
00:33:54,240 --> 00:33:56,799
of these randomnesses he submits a proof

904
00:33:56,799 --> 00:33:58,480
by

905
00:33:58,480 --> 00:34:00,480
okay

906
00:34:00,480 --> 00:34:04,080
but then the game samples a random index

907
00:34:04,080 --> 00:34:05,120
i

908
00:34:05,120 --> 00:34:07,600
okay and the prover wins

909
00:34:07,600 --> 00:34:10,800
if pi conditions the pcp verifier with

910
00:34:10,800 --> 00:34:13,119
randomness or i

911
00:34:13,119 --> 00:34:16,079
okay so we choose a lot of randomnesses

912
00:34:16,079 --> 00:34:18,079
the prover as a function of this chooses

913
00:34:18,079 --> 00:34:20,719
the proof pi and then we choose a random

914
00:34:20,719 --> 00:34:22,159
one okay

915
00:34:22,159 --> 00:34:24,079
and he wins if

916
00:34:24,079 --> 00:34:26,800
if pi convinces the pcp identifier with

917
00:34:26,800 --> 00:34:28,879
on the missile line

918
00:34:28,879 --> 00:34:30,320
okay this is very similar to the

919
00:34:30,320 --> 00:34:33,679
weakened version we talked about earlier

920
00:34:33,679 --> 00:34:35,839
and our main result here is that we show

921
00:34:35,839 --> 00:34:36,560
that

922
00:34:36,560 --> 00:34:39,359
you can reduce three soundness okay you

923
00:34:39,359 --> 00:34:41,760
can do the the successful ability of

924
00:34:41,760 --> 00:34:43,119
achieving improvement in the threes on

925
00:34:43,119 --> 00:34:44,719
this game you can reduce it to the

926
00:34:44,719 --> 00:34:46,719
reverse on this game and then you can

927
00:34:46,719 --> 00:34:49,040
reduce this back to the standout pcp

928
00:34:49,040 --> 00:34:50,960
soundness

929
00:34:50,960 --> 00:34:52,960
okay so let me just specify the two

930
00:34:52,960 --> 00:34:54,000
lemmas

931
00:34:54,000 --> 00:34:55,918
so if we have epsilon 3 that is a

932
00:34:55,918 --> 00:34:58,720
function of t and k okay so you have t

933
00:34:58,720 --> 00:35:00,880
actions and k is the budget

934
00:35:00,880 --> 00:35:02,960
the reverse soundness has only this one

935
00:35:02,960 --> 00:35:05,040
parameter okay t

936
00:35:05,040 --> 00:35:08,079
okay and the first letter says that

937
00:35:08,079 --> 00:35:10,880
uh the winning probability in the three

938
00:35:10,880 --> 00:35:14,000
soundness game is this expression

939
00:35:14,000 --> 00:35:16,320
okay so it's t times epsilon pc because

940
00:35:16,320 --> 00:35:19,440
i can always just try okay and actually

941
00:35:19,440 --> 00:35:21,839
every time i try have a advantage of two

942
00:35:21,839 --> 00:35:24,640
to the k okay these are because of the

943
00:35:24,640 --> 00:35:26,000
collisions

944
00:35:26,000 --> 00:35:27,599
and i have this additional term this

945
00:35:27,599 --> 00:35:30,079
comes from the inversions so i have 2 to

946
00:35:30,079 --> 00:35:33,119
the k power times my probability in this

947
00:35:33,119 --> 00:35:35,280
reverse soundness game

948
00:35:35,280 --> 00:35:37,920
okay and these are the two inversions

949
00:35:37,920 --> 00:35:39,920
and then the second lemma says that okay

950
00:35:39,920 --> 00:35:42,720
what is this epsilon reverse okay this

951
00:35:42,720 --> 00:35:44,400
epsilon reverse actually something we

952
00:35:44,400 --> 00:35:45,680
can bound

953
00:35:45,680 --> 00:35:47,520
and this bound actually just depends on

954
00:35:47,520 --> 00:35:50,160
the parameter of the pcp such as the

955
00:35:50,160 --> 00:35:52,640
the length of the pcp and the alphabet

956
00:35:52,640 --> 00:35:55,280
provided that the pcp that you use had

957
00:35:55,280 --> 00:35:57,839
has a good enough soundness

958
00:35:57,839 --> 00:35:59,119
okay so it's not like a smooth

959
00:35:59,119 --> 00:36:01,440
expression with in terms of epsilon pcp

960
00:36:01,440 --> 00:36:03,599
but once you have this condition we can

961
00:36:03,599 --> 00:36:05,680
bound down the levels on this

962
00:36:05,680 --> 00:36:08,000
and now you plug these things in back in

963
00:36:08,000 --> 00:36:10,880
the original explosion that you we saw

964
00:36:10,880 --> 00:36:14,480
and we can conclude the proof

965
00:36:15,760 --> 00:36:19,280
okay so conclusion we gave a new and a

966
00:36:19,280 --> 00:36:21,760
tight analysis of michael snod this is a

967
00:36:21,760 --> 00:36:23,520
new upper bound and a matching lower

968
00:36:23,520 --> 00:36:24,400
bound

969
00:36:24,400 --> 00:36:26,400
and to do that we had to introduce some

970
00:36:26,400 --> 00:36:29,359
new pcp games which i think is uh

971
00:36:29,359 --> 00:36:31,839
are interesting on under on right in

972
00:36:31,839 --> 00:36:34,480
particular this river sounds game

973
00:36:34,480 --> 00:36:36,240
uh we actually

974
00:36:36,240 --> 00:36:38,480
got something we got a new we got new

975
00:36:38,480 --> 00:36:40,720
and smaller argument sizes okay both

976
00:36:40,720 --> 00:36:43,200
theoretically and practically

977
00:36:43,200 --> 00:36:44,240
um

978
00:36:44,240 --> 00:36:46,800
some ideas for future work first what we

979
00:36:46,800 --> 00:36:49,520
do what we did apply to nikoli snog and

980
00:36:49,520 --> 00:36:51,760
of course if you want something really

981
00:36:51,760 --> 00:36:53,680
efficient and practical you're not going

982
00:36:53,680 --> 00:36:56,400
to implement the mikali that uses pcps

983
00:36:56,400 --> 00:36:58,079
we're going to integrate a new modern

984
00:36:58,079 --> 00:37:00,720
version of it called the bcs where the

985
00:37:00,720 --> 00:37:03,119
construction is a similar in spirit but

986
00:37:03,119 --> 00:37:06,000
it's it's based on iops

987
00:37:06,000 --> 00:37:08,000
okay so iops this is an interactive

988
00:37:08,000 --> 00:37:10,000
version of pcps and they're much much

989
00:37:10,000 --> 00:37:11,920
more efficient in a lot of research

990
00:37:11,920 --> 00:37:14,240
these days than iops

991
00:37:14,240 --> 00:37:16,480
um so the idea of future work is

992
00:37:16,480 --> 00:37:19,040
actually taking what we did for one

993
00:37:19,040 --> 00:37:21,119
round okay i've been calling three and

994
00:37:21,119 --> 00:37:23,119
apply it to bcs

995
00:37:23,119 --> 00:37:25,520
where you have many rounds and in each

996
00:37:25,520 --> 00:37:28,240
round you have this three okay so you

997
00:37:28,240 --> 00:37:29,680
would have to

998
00:37:29,680 --> 00:37:31,599
uh kind of define the interactive

999
00:37:31,599 --> 00:37:34,240
version of these pcp games okay to be

1000
00:37:34,240 --> 00:37:37,520
like iop games

1001
00:37:37,520 --> 00:37:38,720
uh

1002
00:37:38,720 --> 00:37:41,119
second thing is that

1003
00:37:41,119 --> 00:37:42,720
as we already mentioned we can take this

1004
00:37:42,720 --> 00:37:44,640
tight analysis and this gave us a lot of

1005
00:37:44,640 --> 00:37:48,079
the ideas uh for a better construction

1006
00:37:48,079 --> 00:37:50,960
with the smaller argument size okay so

1007
00:37:50,960 --> 00:37:52,800
future work let's continue this let's

1008
00:37:52,800 --> 00:37:54,800
find better construction of snarks in

1009
00:37:54,800 --> 00:37:57,359
the random oracle model and i didn't

1010
00:37:57,359 --> 00:38:00,560
find this explicitly but there is the

1011
00:38:00,560 --> 00:38:03,760
very big open problem of can you achieve

1012
00:38:03,760 --> 00:38:06,240
a linear argument size of snugs in the

1013
00:38:06,240 --> 00:38:09,119
random oracle model so both the mikali

1014
00:38:09,119 --> 00:38:10,640
and the bcs construction have something

1015
00:38:10,640 --> 00:38:13,040
called the quadratic argument size which

1016
00:38:13,040 --> 00:38:15,520
i did informally

1017
00:38:15,520 --> 00:38:16,720
define

1018
00:38:16,720 --> 00:38:19,280
but the hope is that the titan title

1019
00:38:19,280 --> 00:38:20,640
analysis

1020
00:38:20,640 --> 00:38:23,200
could lead us to a linear argument size

1021
00:38:23,200 --> 00:38:26,480
which would be very amazing

1022
00:38:26,480 --> 00:38:31,520
so with this i end thank you very much

