1
00:00:00,960 --> 00:00:03,919
and this session is on routing

2
00:00:03,919 --> 00:00:07,359
signatures commitment time lock

3
00:00:07,359 --> 00:00:09,280
the first talk is cryptographic

4
00:00:09,280 --> 00:00:11,759
charlotte a formal treatment of reply

5
00:00:11,759 --> 00:00:13,200
replayable

6
00:00:13,200 --> 00:00:15,200
onion encryption

7
00:00:15,200 --> 00:00:17,840
and this is a joint work of megumi ando

8
00:00:17,840 --> 00:00:20,480
and alissanske and megumi is gonna give

9
00:00:20,480 --> 00:00:22,800
a talk

10
00:00:28,840 --> 00:00:32,000
hello ken can you see my screen can you

11
00:00:32,000 --> 00:00:33,600
hear me

12
00:00:33,600 --> 00:00:35,600
okay great thank you so much for the

13
00:00:35,600 --> 00:00:38,239
introduction

14
00:00:38,640 --> 00:00:42,239
um so suppose that alice wants to send a

15
00:00:42,239 --> 00:00:44,960
message to david anonymously

16
00:00:44,960 --> 00:00:47,200
what can she do well she can use onion

17
00:00:47,200 --> 00:00:48,320
routing

18
00:00:48,320 --> 00:00:50,960
so to do this she picks a routing path

19
00:00:50,960 --> 00:00:53,280
from herself to david

20
00:00:53,280 --> 00:00:55,680
and forms a layered

21
00:00:55,680 --> 00:00:58,559
encryption object called an onion which

22
00:00:58,559 --> 00:00:59,760
gets

23
00:00:59,760 --> 00:01:01,680
sent through the routing path and at

24
00:01:01,680 --> 00:01:02,640
every

25
00:01:02,640 --> 00:01:05,920
node of the path a layer of encryption

26
00:01:05,920 --> 00:01:08,640
is taken off

27
00:01:08,640 --> 00:01:10,960
so this is helpful for achieving

28
00:01:10,960 --> 00:01:14,159
anonymity because

29
00:01:14,159 --> 00:01:16,720
onions that are received simultaneously

30
00:01:16,720 --> 00:01:19,280
at an honest note mix

31
00:01:19,280 --> 00:01:21,280
in other words when

32
00:01:21,280 --> 00:01:23,759
these onions are batch processed

33
00:01:23,759 --> 00:01:26,799
the outgoing onions cannot be mashed

34
00:01:26,799 --> 00:01:30,240
with the incoming onions

35
00:01:30,720 --> 00:01:31,520
um

36
00:01:31,520 --> 00:01:34,320
kamenish and licianskaya formalized the

37
00:01:34,320 --> 00:01:38,079
notion of onion encryption in 2005.

38
00:01:38,079 --> 00:01:41,280
in this paper they uh

39
00:01:41,280 --> 00:01:42,479
defined

40
00:01:42,479 --> 00:01:44,720
an onion encryption scheme to consist of

41
00:01:44,720 --> 00:01:46,479
three algorithms

42
00:01:46,479 --> 00:01:49,680
g which is the key generation algorithm

43
00:01:49,680 --> 00:01:51,680
form onion for forming

44
00:01:51,680 --> 00:01:52,799
onions

45
00:01:52,799 --> 00:01:55,920
and proc onion for processing onions

46
00:01:55,920 --> 00:01:57,680
in this paper they also

47
00:01:57,680 --> 00:01:58,719
defined

48
00:01:58,719 --> 00:02:01,680
rigorous notions of security

49
00:02:01,680 --> 00:02:04,880
in particular the security definition

50
00:02:04,880 --> 00:02:06,719
said that

51
00:02:06,719 --> 00:02:09,199
onions with different layers of

52
00:02:09,199 --> 00:02:11,599
onions with uh different late numbers of

53
00:02:11,599 --> 00:02:14,319
layers can mix together

54
00:02:14,319 --> 00:02:16,879
they also provided the first provably

55
00:02:16,879 --> 00:02:19,599
secure construction of

56
00:02:19,599 --> 00:02:23,120
an onion encryption scheme however this

57
00:02:23,120 --> 00:02:24,720
work along with

58
00:02:24,720 --> 00:02:26,800
subsequent work on onion encryption

59
00:02:26,800 --> 00:02:29,280
didn't solve two-way channels

60
00:02:29,280 --> 00:02:32,000
which are useful in many internet

61
00:02:32,000 --> 00:02:33,840
applications

62
00:02:33,840 --> 00:02:35,680
and the reason why uh

63
00:02:35,680 --> 00:02:37,120
forming onion

64
00:02:37,120 --> 00:02:39,840
and onion encryption scheme with a reply

65
00:02:39,840 --> 00:02:42,000
option is technically challenging is

66
00:02:42,000 --> 00:02:43,360
because

67
00:02:43,360 --> 00:02:45,760
return onions must incorporate

68
00:02:45,760 --> 00:02:48,080
information from both the sender and the

69
00:02:48,080 --> 00:02:49,519
recipient

70
00:02:49,519 --> 00:02:52,160
so the sender must supply the return

71
00:02:52,160 --> 00:02:54,000
path because otherwise it wouldn't be

72
00:02:54,000 --> 00:02:55,519
anonymous

73
00:02:55,519 --> 00:02:58,800
and the recipient clearly must supply

74
00:02:58,800 --> 00:03:01,760
the reply message

75
00:03:02,560 --> 00:03:05,120
in this paper uh

76
00:03:05,120 --> 00:03:07,440
we have a formal treatment of repliable

77
00:03:07,440 --> 00:03:09,599
onion encryption

78
00:03:09,599 --> 00:03:11,440
so we define

79
00:03:11,440 --> 00:03:13,680
a repliable onion encryption to consist

80
00:03:13,680 --> 00:03:15,599
of four algorithms

81
00:03:15,599 --> 00:03:18,720
the key generation algorithm uh form

82
00:03:18,720 --> 00:03:21,360
onion proc onion and a new fourth

83
00:03:21,360 --> 00:03:22,560
algorithm

84
00:03:22,560 --> 00:03:25,280
form reply for forming a reply back to

85
00:03:25,280 --> 00:03:27,599
the sentence

86
00:03:27,599 --> 00:03:29,680
the contributions of the paper are the

87
00:03:29,680 --> 00:03:31,920
following first we have an ideal

88
00:03:31,920 --> 00:03:35,440
functionality which we call f rows for

89
00:03:35,440 --> 00:03:38,640
repliable onion encryption schemes

90
00:03:38,640 --> 00:03:41,280
second we also have a game-based

91
00:03:41,280 --> 00:03:43,280
security definition which we call

92
00:03:43,280 --> 00:03:45,599
repliable onion security

93
00:03:45,599 --> 00:03:48,000
and we proved that this game-based

94
00:03:48,000 --> 00:03:50,959
definition is both sufficient and almost

95
00:03:50,959 --> 00:03:52,959
necessary

96
00:03:52,959 --> 00:03:56,159
in order to realize f-rows

97
00:03:56,159 --> 00:03:58,879
finally we have a construction that

98
00:03:58,879 --> 00:04:00,959
satisfies these

99
00:04:00,959 --> 00:04:04,560
two definitions of security

100
00:04:04,879 --> 00:04:06,879
of course the definitions are actually a

101
00:04:06,879 --> 00:04:09,280
big portion of our work

102
00:04:09,280 --> 00:04:11,840
however given our time constraint we're

103
00:04:11,840 --> 00:04:13,599
not going to even attempt to try to

104
00:04:13,599 --> 00:04:16,079
provide a security definition in the uc

105
00:04:16,079 --> 00:04:16,959
model

106
00:04:16,959 --> 00:04:18,959
so instead what we're going to do is

107
00:04:18,959 --> 00:04:22,000
provide a little bit of an overview of

108
00:04:22,000 --> 00:04:24,800
our construction

109
00:04:26,000 --> 00:04:28,400
so the way we deal with the technical

110
00:04:28,400 --> 00:04:30,400
challenge that we mentioned before is

111
00:04:30,400 --> 00:04:33,280
that in this paper every onion consists

112
00:04:33,280 --> 00:04:36,960
of two parts a header and a content

113
00:04:36,960 --> 00:04:40,080
and the header is

114
00:04:40,639 --> 00:04:42,479
incorporates information about the

115
00:04:42,479 --> 00:04:44,720
routing path and the content

116
00:04:44,720 --> 00:04:46,880
incorporates information about the

117
00:04:46,880 --> 00:04:48,320
payload

118
00:04:48,320 --> 00:04:50,960
and our uh construction is called

119
00:04:50,960 --> 00:04:52,880
charlotte encryption because both of

120
00:04:52,880 --> 00:04:55,440
these parts the header and the content

121
00:04:55,440 --> 00:04:58,479
are themselves each

122
00:04:58,479 --> 00:05:01,120
a layered encryption object and so

123
00:05:01,120 --> 00:05:04,320
our onions end up having

124
00:05:04,320 --> 00:05:06,560
a form which is more like a shallot than

125
00:05:06,560 --> 00:05:08,560
an onion

126
00:05:08,560 --> 00:05:09,600
so

127
00:05:09,600 --> 00:05:12,560
what does a processing party

128
00:05:12,560 --> 00:05:14,880
do in order to process an onion

129
00:05:14,880 --> 00:05:17,600
well the first thing they do is

130
00:05:17,600 --> 00:05:20,400
they take part of the header and decrypt

131
00:05:20,400 --> 00:05:22,800
it to get a symmetric key

132
00:05:22,800 --> 00:05:24,400
then they use this key

133
00:05:24,400 --> 00:05:27,680
to decrypt all the other pieces of the

134
00:05:27,680 --> 00:05:29,039
onion

135
00:05:29,039 --> 00:05:31,360
and this gets you almost all the pieces

136
00:05:31,360 --> 00:05:33,440
of the peeled onion

137
00:05:33,440 --> 00:05:36,479
however there's a mis a piece missing

138
00:05:36,479 --> 00:05:37,759
because

139
00:05:37,759 --> 00:05:40,639
otherwise the length of the peeled onion

140
00:05:40,639 --> 00:05:43,120
would not be the same as the length of

141
00:05:43,120 --> 00:05:45,039
the onion that we're peeling

142
00:05:45,039 --> 00:05:47,600
and this is problematic because then the

143
00:05:47,600 --> 00:05:48,960
onions with

144
00:05:48,960 --> 00:05:50,720
different numbers of layers would not

145
00:05:50,720 --> 00:05:51,680
mix

146
00:05:51,680 --> 00:05:54,400
so what do we do to get this missing

147
00:05:54,400 --> 00:05:55,199
piece

148
00:05:55,199 --> 00:05:56,960
well we just decrypt

149
00:05:56,960 --> 00:05:59,840
the ah zero string

150
00:05:59,840 --> 00:06:02,240
okay so we just described how we process

151
00:06:02,240 --> 00:06:04,160
an onion and now we're going to describe

152
00:06:04,160 --> 00:06:06,560
how we form an onion

153
00:06:06,560 --> 00:06:10,240
so that it can be processed in this way

154
00:06:10,240 --> 00:06:11,919
first we're going to explain how we're

155
00:06:11,919 --> 00:06:14,080
going to construct the header and in

156
00:06:14,080 --> 00:06:16,160
this simple example we're going to have

157
00:06:16,160 --> 00:06:18,080
our routing path consist of three

158
00:06:18,080 --> 00:06:22,160
parties p1 p2 and p3

159
00:06:22,160 --> 00:06:24,319
and what we do first is we create the

160
00:06:24,319 --> 00:06:27,120
header for the recipient p3 the header

161
00:06:27,120 --> 00:06:29,360
is h3

162
00:06:29,360 --> 00:06:31,759
the header consists of pieces most of

163
00:06:31,759 --> 00:06:33,039
which are

164
00:06:33,039 --> 00:06:35,759
layered decryptions of the allzera

165
00:06:35,759 --> 00:06:36,720
string

166
00:06:36,720 --> 00:06:38,160
and the last

167
00:06:38,160 --> 00:06:41,280
piece is the encryption of the symmetric

168
00:06:41,280 --> 00:06:42,400
key for

169
00:06:42,400 --> 00:06:45,360
the recipient p3

170
00:06:45,360 --> 00:06:48,080
to get the header for this the second

171
00:06:48,080 --> 00:06:50,479
party on the interme um on the writing

172
00:06:50,479 --> 00:06:51,840
path

173
00:06:51,840 --> 00:06:53,440
we

174
00:06:53,440 --> 00:06:57,520
encrypt pieces of h3 in order to get all

175
00:06:57,520 --> 00:06:58,720
but one

176
00:06:58,720 --> 00:07:01,120
part of h2

177
00:07:01,120 --> 00:07:02,560
the last part

178
00:07:02,560 --> 00:07:03,840
we just

179
00:07:03,840 --> 00:07:07,919
encrypt the symmetric key for p2

180
00:07:07,919 --> 00:07:10,960
and we repeat this process one more time

181
00:07:10,960 --> 00:07:13,759
to get to the header for the first party

182
00:07:13,759 --> 00:07:15,759
the routing path

183
00:07:15,759 --> 00:07:18,400
and this is h1 this is the header for

184
00:07:18,400 --> 00:07:20,800
the onion that we're forming

185
00:07:20,800 --> 00:07:23,759
okay so how do we form the content well

186
00:07:23,759 --> 00:07:24,720
first

187
00:07:24,720 --> 00:07:28,720
we create the header for the return path

188
00:07:28,720 --> 00:07:31,599
in pretty much the same way

189
00:07:31,599 --> 00:07:35,360
and so the return path it has parties

190
00:07:35,360 --> 00:07:38,880
p4 p5 and p6 and so the header for the

191
00:07:38,880 --> 00:07:41,599
return path is h4

192
00:07:41,599 --> 00:07:45,039
this we embed into what we call a meta

193
00:07:45,039 --> 00:07:47,039
message which also

194
00:07:47,039 --> 00:07:49,039
includes the message from the sender to

195
00:07:49,039 --> 00:07:50,400
the recipient

196
00:07:50,400 --> 00:07:53,280
the keys that the recipient can use to

197
00:07:53,280 --> 00:07:55,759
reply back to the sender

198
00:07:55,759 --> 00:08:00,000
and the first party on the return path

199
00:08:00,319 --> 00:08:02,960
then we

200
00:08:03,199 --> 00:08:07,120
encrypted this meta message along with

201
00:08:07,120 --> 00:08:09,759
a tag for integrity protection

202
00:08:09,759 --> 00:08:13,759
using the symmetric keys for the parties

203
00:08:13,759 --> 00:08:15,599
on the forward path

204
00:08:15,599 --> 00:08:19,919
this becomes our content c1 so so our

205
00:08:19,919 --> 00:08:20,800
onion

206
00:08:20,800 --> 00:08:23,199
is h1 that we saw before in a previous

207
00:08:23,199 --> 00:08:27,840
slide and this content c1

208
00:08:27,840 --> 00:08:30,000
okay um so

209
00:08:30,000 --> 00:08:30,960
this

210
00:08:30,960 --> 00:08:34,080
concludes our very short overview of

211
00:08:34,080 --> 00:08:36,640
this paper um thank you very much for

212
00:08:36,640 --> 00:08:39,880
your attention

213
00:08:43,760 --> 00:08:47,839
thank you megumi is that any question

214
00:08:50,720 --> 00:08:53,200
okay so maybe i left one quick question

215
00:08:53,200 --> 00:08:54,800
um can you go back

216
00:08:54,800 --> 00:08:56,959
to the last slide

217
00:08:56,959 --> 00:09:01,040
and i know that's the conclusion slides

218
00:09:02,160 --> 00:09:04,800
yeah um just can you comment what it

219
00:09:04,800 --> 00:09:06,720
means that the game-based security

220
00:09:06,720 --> 00:09:09,200
definition is necessary

221
00:09:09,200 --> 00:09:10,880
for the ideal function to implement the

222
00:09:10,880 --> 00:09:13,760
ideal functionality

223
00:09:13,760 --> 00:09:16,480
um so

224
00:09:16,640 --> 00:09:18,080
are you talking about the fact that it

225
00:09:18,080 --> 00:09:20,880
says almost necessary

226
00:09:20,880 --> 00:09:23,680
um yeah so i i'm just so you have an

227
00:09:23,680 --> 00:09:25,279
ideal functionality and then you have a

228
00:09:25,279 --> 00:09:27,200
game-based definition

229
00:09:27,200 --> 00:09:29,600
yes that is necessary

230
00:09:29,600 --> 00:09:32,720
yes so we first have um

231
00:09:32,720 --> 00:09:34,880
you know a definition of security in the

232
00:09:34,880 --> 00:09:36,560
uc model

233
00:09:36,560 --> 00:09:38,160
and as you can imagine it's quite

234
00:09:38,160 --> 00:09:39,440
involved

235
00:09:39,440 --> 00:09:40,959
and so even though

236
00:09:40,959 --> 00:09:42,480
it's the one where

237
00:09:42,480 --> 00:09:45,040
we think intuitively this makes sense we

238
00:09:45,040 --> 00:09:47,279
also came up with a simpler game-based

239
00:09:47,279 --> 00:09:48,480
definition

240
00:09:48,480 --> 00:09:51,200
that is easier to use when we're proving

241
00:09:51,200 --> 00:09:53,760
that something is secure

242
00:09:53,760 --> 00:09:55,440
um so

243
00:09:55,440 --> 00:09:57,760
the proof that it is sufficient is

244
00:09:57,760 --> 00:10:00,640
actually quite simple is i mean it's

245
00:10:00,640 --> 00:10:02,560
pretty straightforward it's a hybrid

246
00:10:02,560 --> 00:10:03,600
argument

247
00:10:03,600 --> 00:10:05,519
and the

248
00:10:05,519 --> 00:10:07,600
proof in the other direction

249
00:10:07,600 --> 00:10:08,560
is

250
00:10:08,560 --> 00:10:09,519
uh

251
00:10:09,519 --> 00:10:12,720
also would go through assuming that

252
00:10:12,720 --> 00:10:16,399
we're in a non-adaptive case

253
00:10:16,640 --> 00:10:18,560
so the um

254
00:10:18,560 --> 00:10:19,440
the

255
00:10:19,440 --> 00:10:22,000
the corruptions that the adversary makes

256
00:10:22,000 --> 00:10:24,000
is non-adaptive

257
00:10:24,000 --> 00:10:26,320
does that answer your question

258
00:10:26,320 --> 00:10:27,440
sure

259
00:10:27,440 --> 00:10:29,040
thank you so much

260
00:10:29,040 --> 00:10:29,839
yes

261
00:10:29,839 --> 00:10:31,040
thank you listen

262
00:10:31,040 --> 00:10:33,839
again

263
00:10:34,240 --> 00:10:36,959
all right next uh next talk is trojan

264
00:10:36,959 --> 00:10:39,440
resilience without cryptography

265
00:10:39,440 --> 00:10:42,240
uh by subradi chakraborty stephan

266
00:10:42,240 --> 00:10:45,360
zabowski malcolm galatka

267
00:10:45,360 --> 00:10:46,880
thomas

268
00:10:46,880 --> 00:10:48,640
liz reggie

269
00:10:48,640 --> 00:10:49,920
sorry guys

270
00:10:49,920 --> 00:10:53,279
um christopher patrick michelle yellow

271
00:10:53,279 --> 00:10:56,530
and mal gordata is giving the talk

272
00:10:56,530 --> 00:10:58,000
[Music]

273
00:10:58,000 --> 00:10:59,839
and feel free to say the author's name

274
00:10:59,839 --> 00:11:01,360
again if i

275
00:11:01,360 --> 00:11:04,160
messed up too much

276
00:11:05,040 --> 00:11:08,690
uh okay hello everyone sorry

277
00:11:08,690 --> 00:11:10,079
[Music]

278
00:11:10,079 --> 00:11:13,079
okay

279
00:11:15,839 --> 00:11:17,920
okay so here we go

280
00:11:17,920 --> 00:11:20,560
uh yes so i presented the paper trojan

281
00:11:20,560 --> 00:11:22,560
resilience without cryptography

282
00:11:22,560 --> 00:11:24,399
written by shukra deep chakraborty

283
00:11:24,399 --> 00:11:27,040
stefan jambowski

284
00:11:27,040 --> 00:11:29,279
this is me thomas zurek christopher

285
00:11:29,279 --> 00:11:32,000
pietschak and michelle yero

286
00:11:32,000 --> 00:11:33,680
and and

287
00:11:33,680 --> 00:11:35,680
in this paper we investigate the

288
00:11:35,680 --> 00:11:37,760
countermeasures against digital hardware

289
00:11:37,760 --> 00:11:38,959
turdans

290
00:11:38,959 --> 00:11:41,120
and as the theoretical solutions the

291
00:11:41,120 --> 00:11:43,040
existing theoretical solutions make use

292
00:11:43,040 --> 00:11:44,720
of some

293
00:11:44,720 --> 00:11:46,640
cryptographic tools such as multi-party

294
00:11:46,640 --> 00:11:49,680
computation or verifiable computation we

295
00:11:49,680 --> 00:11:53,839
focus on extremely simple constructions

296
00:11:54,399 --> 00:11:56,079
and we showed that one of such

297
00:11:56,079 --> 00:11:58,160
constructions achieves meaningful

298
00:11:58,160 --> 00:12:00,480
security parameters

299
00:12:00,480 --> 00:12:03,279
okay so this problem comes from

300
00:12:03,279 --> 00:12:06,480
the contemporary context of using

301
00:12:06,480 --> 00:12:09,279
computing devices which is as follows

302
00:12:09,279 --> 00:12:11,120
there is some user with

303
00:12:11,120 --> 00:12:12,160
some

304
00:12:12,160 --> 00:12:14,320
functionality f in his mind

305
00:12:14,320 --> 00:12:15,680
he may even possess the circuit

306
00:12:15,680 --> 00:12:17,760
description which would realize this

307
00:12:17,760 --> 00:12:19,519
functionality but he's not the

308
00:12:19,519 --> 00:12:21,519
manufacturer by himself

309
00:12:21,519 --> 00:12:23,680
so he sends this circuit description to

310
00:12:23,680 --> 00:12:25,600
some untrusted factory and receives a

311
00:12:25,600 --> 00:12:26,720
circuit

312
00:12:26,720 --> 00:12:28,639
which hopefully

313
00:12:28,639 --> 00:12:31,680
realizes this functionality f

314
00:12:31,680 --> 00:12:33,279
of course we can easily imagine the

315
00:12:33,279 --> 00:12:35,040
opportunities given to the adversary

316
00:12:35,040 --> 00:12:37,440
insert protocol

317
00:12:37,440 --> 00:12:39,920
and the existing theoretical counter

318
00:12:39,920 --> 00:12:42,800
measures work in the following way

319
00:12:42,800 --> 00:12:45,120
the user puts the functionality f in a

320
00:12:45,120 --> 00:12:46,959
kind of compiler

321
00:12:46,959 --> 00:12:50,480
uh and there's the output he receives a

322
00:12:50,480 --> 00:12:53,040
circuit description here this part in

323
00:12:53,040 --> 00:12:55,440
the middle is the trusted component and

324
00:12:55,440 --> 00:12:58,240
the rest are untrusted components

325
00:12:58,240 --> 00:13:00,320
and the description of this trusted

326
00:13:00,320 --> 00:13:02,240
component is sent to the trusted

327
00:13:02,240 --> 00:13:04,720
manufacturer and the trusted module is

328
00:13:04,720 --> 00:13:05,760
received

329
00:13:05,760 --> 00:13:08,079
and the same holds for the untrusted

330
00:13:08,079 --> 00:13:10,560
components

331
00:13:10,560 --> 00:13:13,440
then everything is composed together in

332
00:13:13,440 --> 00:13:16,000
a trusted manner and the user can use

333
00:13:16,000 --> 00:13:18,720
the device

334
00:13:18,839 --> 00:13:21,920
sometimes the testing phase is added i

335
00:13:21,920 --> 00:13:24,560
will tell you about it more later

336
00:13:24,560 --> 00:13:27,120
uh and of course we can ask ourselves

337
00:13:27,120 --> 00:13:29,200
does it make any sense to

338
00:13:29,200 --> 00:13:31,200
make such a complicated procedure if the

339
00:13:31,200 --> 00:13:32,480
user has

340
00:13:32,480 --> 00:13:35,279
access to the trusted manufacturer

341
00:13:35,279 --> 00:13:37,440
um because we always need this trusted

342
00:13:37,440 --> 00:13:39,600
component and the answer to this

343
00:13:39,600 --> 00:13:42,639
question is yes but it depends and it

344
00:13:42,639 --> 00:13:44,959
depends uh from

345
00:13:44,959 --> 00:13:46,560
the technological gap between the

346
00:13:46,560 --> 00:13:48,880
manufacturers

347
00:13:48,880 --> 00:13:50,880
the greater the better and the size of

348
00:13:50,880 --> 00:13:53,040
the trusted component the smaller the

349
00:13:53,040 --> 00:13:56,079
better and some other things

350
00:13:56,079 --> 00:13:56,880
so

351
00:13:56,880 --> 00:13:58,959
what are the circuits in

352
00:13:58,959 --> 00:14:01,440
simple constructions

353
00:14:01,440 --> 00:14:02,240
uh

354
00:14:02,240 --> 00:14:04,160
first of all uh

355
00:14:04,160 --> 00:14:07,120
the trusted model is extremely simple

356
00:14:07,120 --> 00:14:09,839
uh by which i mean it consists only of a

357
00:14:09,839 --> 00:14:12,160
few equality multiplexer and repetition

358
00:14:12,160 --> 00:14:13,120
gates

359
00:14:13,120 --> 00:14:14,720
and secondly

360
00:14:14,720 --> 00:14:17,519
uh the untrusted modules are

361
00:14:17,519 --> 00:14:19,839
produced according to the specification

362
00:14:19,839 --> 00:14:22,079
by which i mean that

363
00:14:22,079 --> 00:14:24,320
we want them just to realize the

364
00:14:24,320 --> 00:14:26,399
functionality f they don't need to

365
00:14:26,399 --> 00:14:28,639
follow any cryptographic protocol

366
00:14:28,639 --> 00:14:30,720
if it's not in the functionality

367
00:14:30,720 --> 00:14:32,959
and so on

368
00:14:32,959 --> 00:14:35,199
uh and what is the security game in this

369
00:14:35,199 --> 00:14:36,560
case so

370
00:14:36,560 --> 00:14:39,040
as i said before there is this testing

371
00:14:39,040 --> 00:14:42,000
we call it lab face in our paper

372
00:14:42,000 --> 00:14:44,639
and in during the lab phase every single

373
00:14:44,639 --> 00:14:46,880
untrusted module is tested on some

374
00:14:46,880 --> 00:14:50,320
inputs and its outputs are compared to

375
00:14:50,320 --> 00:14:52,800
trusted implementation of functionality

376
00:14:52,800 --> 00:14:53,839
f

377
00:14:53,839 --> 00:14:56,399
and then the while phase begins and in

378
00:14:56,399 --> 00:14:58,720
the white phase

379
00:14:58,720 --> 00:15:01,600
the trusted module is connected to some

380
00:15:01,600 --> 00:15:04,000
number of untrusted modules

381
00:15:04,000 --> 00:15:06,560
and the trusted module receives iid

382
00:15:06,560 --> 00:15:09,199
inputs and auxiliary randomness

383
00:15:09,199 --> 00:15:11,680
and output something

384
00:15:11,680 --> 00:15:13,360
and the goals of the adversary in this

385
00:15:13,360 --> 00:15:15,440
game is to not be detected in the lab

386
00:15:15,440 --> 00:15:17,839
phase here in this equality game

387
00:15:17,839 --> 00:15:19,440
a gate

388
00:15:19,440 --> 00:15:21,839
not being detected in the white face

389
00:15:21,839 --> 00:15:23,920
just to remind you the

390
00:15:23,920 --> 00:15:26,560
trusted module can contain some equality

391
00:15:26,560 --> 00:15:27,440
gates

392
00:15:27,440 --> 00:15:29,360
and also to make the master to output

393
00:15:29,360 --> 00:15:32,160
many wrong outputs

394
00:15:32,160 --> 00:15:36,160
uh okay and this is our technical result

395
00:15:36,160 --> 00:15:38,399
i mean our construction which i

396
00:15:38,399 --> 00:15:40,560
mentioned in the in the beginning

397
00:15:40,560 --> 00:15:42,800
we call it p12

398
00:15:42,800 --> 00:15:46,320
scheme since here here we have 12 these

399
00:15:46,320 --> 00:15:47,920
are this pink

400
00:15:47,920 --> 00:15:51,519
12 untrusted modules

401
00:15:51,600 --> 00:15:52,839
and here are

402
00:15:52,839 --> 00:15:55,839
the security parameters which we

403
00:15:55,839 --> 00:15:57,120
achieved

404
00:15:57,120 --> 00:16:00,240
uh so for any constant c greater than

405
00:16:00,240 --> 00:16:02,240
zero there exists another constant c

406
00:16:02,240 --> 00:16:03,920
prime greater than zero

407
00:16:03,920 --> 00:16:06,480
such that this scheme is c c prime over

408
00:16:06,480 --> 00:16:09,839
two trojan resilient and when it happens

409
00:16:09,839 --> 00:16:11,440
so we say that

410
00:16:11,440 --> 00:16:13,440
it happens when there exists no

411
00:16:13,440 --> 00:16:15,680
adversary which produces at least c

412
00:16:15,680 --> 00:16:18,399
prime over diffraction of wrong outputs

413
00:16:18,399 --> 00:16:20,959
and is not detected during the wired and

414
00:16:20,959 --> 00:16:23,759
lab phase and both of these conditions

415
00:16:23,759 --> 00:16:27,279
must hold in simultaneously with some

416
00:16:27,279 --> 00:16:30,480
probability exceeding c

417
00:16:30,480 --> 00:16:31,680
okay

418
00:16:31,680 --> 00:16:33,839
so for more details

419
00:16:33,839 --> 00:16:36,880
i invite you to read the paper and

420
00:16:36,880 --> 00:16:38,160
watch the full

421
00:16:38,160 --> 00:16:40,000
presentation

422
00:16:40,000 --> 00:16:41,040
uh

423
00:16:41,040 --> 00:16:42,800
and of course uh

424
00:16:42,800 --> 00:16:44,720
i'd like to tell you what you can find

425
00:16:44,720 --> 00:16:47,440
there interesting what's interesting

426
00:16:47,440 --> 00:16:48,240
there

427
00:16:48,240 --> 00:16:50,959
in this presentation and in our paper so

428
00:16:50,959 --> 00:16:53,759
first of all we discuss if

429
00:16:53,759 --> 00:16:56,240
we can hope for better security

430
00:16:56,240 --> 00:16:58,480
parameters in case of extremely simple

431
00:16:58,480 --> 00:17:00,399
constructions

432
00:17:00,399 --> 00:17:03,600
we also try to answer

433
00:17:03,600 --> 00:17:06,160
why we need and do we really need

434
00:17:06,160 --> 00:17:07,119
12

435
00:17:07,119 --> 00:17:08,799
untrusted modules

436
00:17:08,799 --> 00:17:10,799
we show some nice security proofs of

437
00:17:10,799 --> 00:17:13,439
course and also we discuss the possible

438
00:17:13,439 --> 00:17:15,439
applications

439
00:17:15,439 --> 00:17:19,240
so thank you very much

440
00:17:22,319 --> 00:17:24,799
thank you marcos welcome

441
00:17:24,799 --> 00:17:28,160
any question for

442
00:17:30,880 --> 00:17:33,440
okay this is there are no questions

443
00:17:33,440 --> 00:17:34,590
thank you again

444
00:17:34,590 --> 00:17:38,179
[Applause]

445
00:17:41,520 --> 00:17:45,600
next talk is policy compliant signatures

446
00:17:45,600 --> 00:17:47,679
by christian brothers

447
00:17:47,679 --> 00:17:49,679
christian matt and

448
00:17:49,679 --> 00:17:51,440
henrik waldner

449
00:17:51,440 --> 00:17:54,880
and hendrik is gonna give the talk

450
00:17:54,880 --> 00:17:56,960
yes

451
00:17:56,960 --> 00:17:58,840
yes thank

452
00:17:58,840 --> 00:18:01,120
you introduction

453
00:18:01,120 --> 00:18:03,679
uh can you also see my screen

454
00:18:03,679 --> 00:18:05,120
yes

455
00:18:05,120 --> 00:18:08,240
okay a modified blockchain setting

456
00:18:08,240 --> 00:18:11,120
we have a we have a block and on top of

457
00:18:11,120 --> 00:18:16,159
this we have global policy f

458
00:18:16,799 --> 00:18:19,120
and now for it for two parties to

459
00:18:19,120 --> 00:18:21,679
generate a valid transaction besides the

460
00:18:21,679 --> 00:18:24,160
the standards to to fulfill this global

461
00:18:24,160 --> 00:18:25,200
policy

462
00:18:25,200 --> 00:18:26,880
so in more detail we have we have alice

463
00:18:26,880 --> 00:18:29,200
and bob in this setting and they're both

464
00:18:29,200 --> 00:18:31,280
both in possession of their

465
00:18:31,280 --> 00:18:32,960
their keys

466
00:18:32,960 --> 00:18:34,720
and their keys are additionally

467
00:18:34,720 --> 00:18:36,320
associated with an attribute set so

468
00:18:36,320 --> 00:18:39,120
ellis has the attribute set xa and bob

469
00:18:39,120 --> 00:18:41,120
has the attribute set xp

470
00:18:41,120 --> 00:18:42,960
and now alice can generate a signature

471
00:18:42,960 --> 00:18:44,480
using the public key of bob the

472
00:18:44,480 --> 00:18:46,480
transaction details and then send it to

473
00:18:46,480 --> 00:18:47,679
the blockchain

474
00:18:47,679 --> 00:18:49,280
and now the signature should only be

475
00:18:49,280 --> 00:18:50,559
valid if

476
00:18:50,559 --> 00:18:52,080
both of their associated attributes

477
00:18:52,080 --> 00:18:53,840
fulfill the policy and then everyone can

478
00:18:53,840 --> 00:18:55,840
verify this using both of their public

479
00:18:55,840 --> 00:18:56,880
keys

480
00:18:56,880 --> 00:18:58,480
and in terms of security in the setting

481
00:18:58,480 --> 00:19:00,240
we don't want to be anything revealed

482
00:19:00,240 --> 00:19:02,559
about their attributes just the validity

483
00:19:02,559 --> 00:19:04,640
of the signature

484
00:19:04,640 --> 00:19:06,160
and yeah we also of course want to have

485
00:19:06,160 --> 00:19:09,760
some unforgeability requirements

486
00:19:09,760 --> 00:19:11,840
and yet to realize this in in this work

487
00:19:11,840 --> 00:19:13,360
we introduced the notion of policy

488
00:19:13,360 --> 00:19:14,880
compliance signatures

489
00:19:14,880 --> 00:19:16,559
and in the in this setting we have a we

490
00:19:16,559 --> 00:19:18,240
have a setup authority carol who takes

491
00:19:18,240 --> 00:19:19,760
as an input this global policy and

492
00:19:19,760 --> 00:19:21,280
generates master public key and the

493
00:19:21,280 --> 00:19:22,799
master secret key

494
00:19:22,799 --> 00:19:24,480
the master secret key can then be used

495
00:19:24,480 --> 00:19:26,320
together with the attribute sets of the

496
00:19:26,320 --> 00:19:28,880
parties to generate their key pair so xa

497
00:19:28,880 --> 00:19:30,960
can be used to to generate alice keys

498
00:19:30,960 --> 00:19:34,559
and xp for both keys oops keys

499
00:19:34,559 --> 00:19:36,880
and yeah then alice can use her secret

500
00:19:36,880 --> 00:19:39,280
key to generate the signature for the

501
00:19:39,280 --> 00:19:40,640
message m

502
00:19:40,640 --> 00:19:42,240
and yeah the signature together with a

503
00:19:42,240 --> 00:19:44,160
message m can then be publicly verified

504
00:19:44,160 --> 00:19:46,480
using the master public key and both of

505
00:19:46,480 --> 00:19:49,520
the public keys of the involved parties

506
00:19:49,520 --> 00:19:51,120
and yes i already mentioned previously

507
00:19:51,120 --> 00:19:52,880
we need some unfortunate ability

508
00:19:52,880 --> 00:19:54,559
requirements and also some attribute

509
00:19:54,559 --> 00:19:57,520
hiding with respect to the attributes

510
00:19:57,520 --> 00:19:59,120
and in the unfoldability setting we have

511
00:19:59,120 --> 00:20:01,039
three basic attacks that we kind of want

512
00:20:01,039 --> 00:20:02,480
to prevent

513
00:20:02,480 --> 00:20:04,159
the first one is a key generation

514
00:20:04,159 --> 00:20:06,240
forgery so we don't want alice for

515
00:20:06,240 --> 00:20:08,240
example to be able to generate a keeper

516
00:20:08,240 --> 00:20:10,240
on her own without carol basically

517
00:20:10,240 --> 00:20:12,080
generating it for a specific attribute

518
00:20:12,080 --> 00:20:13,039
set

519
00:20:13,039 --> 00:20:14,880
so we have alice is able to for example

520
00:20:14,880 --> 00:20:17,520
generate the key sk prime then she might

521
00:20:17,520 --> 00:20:19,120
be able also to generate a velvet

522
00:20:19,120 --> 00:20:20,720
signature and this is something that we

523
00:20:20,720 --> 00:20:23,679
that we want to prevent

524
00:20:23,760 --> 00:20:26,159
additionally we want to prevent the

525
00:20:26,159 --> 00:20:29,600
signature foreign this is very similar

526
00:20:29,600 --> 00:20:30,480
to the

527
00:20:30,480 --> 00:20:32,080
to the standard setting of digital

528
00:20:32,080 --> 00:20:34,480
signature signature so no one who is not

529
00:20:34,480 --> 00:20:36,240
alice or doesn't have her secret key

530
00:20:36,240 --> 00:20:37,440
should be able to generate a valid

531
00:20:37,440 --> 00:20:39,440
signature and the last attack is an

532
00:20:39,440 --> 00:20:40,799
attribute forgery where it should not be

533
00:20:40,799 --> 00:20:42,480
possible for alice and bob together to

534
00:20:42,480 --> 00:20:44,320
create a valid signature if they do not

535
00:20:44,320 --> 00:20:46,559
fulfill the policy

536
00:20:46,559 --> 00:20:48,400
okay in in terms of attribute hiding

537
00:20:48,400 --> 00:20:50,000
there are basically two points where we

538
00:20:50,000 --> 00:20:52,000
need to to hide the attributes the first

539
00:20:52,000 --> 00:20:54,240
one is the the keys so we don't want

540
00:20:54,240 --> 00:20:56,159
their public keys to reveal anything

541
00:20:56,159 --> 00:20:57,919
about their attributes

542
00:20:57,919 --> 00:20:59,919
and in the second step we also do not

543
00:20:59,919 --> 00:21:01,520
want their signatures to reveal anything

544
00:21:01,520 --> 00:21:03,440
about their attributes besides the fact

545
00:21:03,440 --> 00:21:05,039
if they together fulfill the policy or

546
00:21:05,039 --> 00:21:06,960
not

547
00:21:06,960 --> 00:21:08,640
and yeah in this work we also present a

548
00:21:08,640 --> 00:21:10,480
construction to achieve this notion and

549
00:21:10,480 --> 00:21:12,320
the idea of our construction is to

550
00:21:12,320 --> 00:21:14,720
encrypt the attributes in the public key

551
00:21:14,720 --> 00:21:16,480
and use the secret keys of the different

552
00:21:16,480 --> 00:21:18,960
parties for the function evaluation

553
00:21:18,960 --> 00:21:21,760
to to obliviously evaluate the function

554
00:21:21,760 --> 00:21:23,200
is fulfilled

555
00:21:23,200 --> 00:21:24,720
and then if the function is fulfilled

556
00:21:24,720 --> 00:21:26,720
signature can be generated by proving

557
00:21:26,720 --> 00:21:28,480
that the output of this decryption

558
00:21:28,480 --> 00:21:31,520
procedure is is one

559
00:21:31,520 --> 00:21:33,760
so in more detail in our construction we

560
00:21:33,760 --> 00:21:35,360
have a the public key of the receiver

561
00:21:35,360 --> 00:21:36,880
contains an encryption of the attribute

562
00:21:36,880 --> 00:21:39,120
set and the sender is in possession of a

563
00:21:39,120 --> 00:21:40,799
secret key where the policy is already

564
00:21:40,799 --> 00:21:43,600
evaluated on its attributes and this can

565
00:21:43,600 --> 00:21:44,799
then be used

566
00:21:44,799 --> 00:21:46,799
to as a second input it can use the

567
00:21:46,799 --> 00:21:48,720
ciphertext of the receiver to evaluate

568
00:21:48,720 --> 00:21:49,919
the policy

569
00:21:49,919 --> 00:21:51,440
and we can achieve this using a

570
00:21:51,440 --> 00:21:53,520
predicate encryption scheme where then a

571
00:21:53,520 --> 00:21:55,760
functional key is generated for this

572
00:21:55,760 --> 00:21:58,000
policy that is already evaluated on the

573
00:21:58,000 --> 00:21:59,760
first component

574
00:21:59,760 --> 00:22:01,360
and then in the next step as the proof

575
00:22:01,360 --> 00:22:03,280
for the signature we can we can execute

576
00:22:03,280 --> 00:22:04,559
the zero knowledge proof to prove that

577
00:22:04,559 --> 00:22:08,480
the decryption actually has output one

578
00:22:08,480 --> 00:22:10,480
yes and in the next step we of course

579
00:22:10,480 --> 00:22:12,159
also need to allow the sender to add

580
00:22:12,159 --> 00:22:14,240
some message to the to the signature so

581
00:22:14,240 --> 00:22:15,760
we additionally

582
00:22:15,760 --> 00:22:17,039
give it

583
00:22:17,039 --> 00:22:18,880
a key pair for a normal digital

584
00:22:18,880 --> 00:22:20,400
signature scheme so it can use the

585
00:22:20,400 --> 00:22:22,720
signing key to generate a signature over

586
00:22:22,720 --> 00:22:25,280
its message together with the proof

587
00:22:25,280 --> 00:22:27,520
and in this setting we now already have

588
00:22:27,520 --> 00:22:29,360
our attribute hiding so the zero

589
00:22:29,360 --> 00:22:31,360
knowledge proof guarantees that nothing

590
00:22:31,360 --> 00:22:33,039
is leaked from the

591
00:22:33,039 --> 00:22:34,799
from the signature

592
00:22:34,799 --> 00:22:37,039
and the predicate encryption

593
00:22:37,039 --> 00:22:38,960
the security of the predicate encryption

594
00:22:38,960 --> 00:22:41,120
scheme guarantees that nothing is leaked

595
00:22:41,120 --> 00:22:42,799
from the ciphertext but we still have

596
00:22:42,799 --> 00:22:44,159
some issues with respect to the

597
00:22:44,159 --> 00:22:46,000
unforgivability so right now for example

598
00:22:46,000 --> 00:22:48,000
it's still possible to do mix and match

599
00:22:48,000 --> 00:22:49,600
attacks with respect to the to the

600
00:22:49,600 --> 00:22:51,360
secret key and therefore get an

601
00:22:51,360 --> 00:22:53,520
attribute forgery so additionally we are

602
00:22:53,520 --> 00:22:54,960
also going to let

603
00:22:54,960 --> 00:22:56,799
the key generation authorities sign the

604
00:22:56,799 --> 00:22:58,799
secret key pair such that this is not

605
00:22:58,799 --> 00:23:00,320
possible anymore and this we of course

606
00:23:00,320 --> 00:23:02,400
then also need to incorporate in the in

607
00:23:02,400 --> 00:23:04,240
the generation of the proof

608
00:23:04,240 --> 00:23:05,520
and we have the same problem in the

609
00:23:05,520 --> 00:23:09,039
public keys for key generation forgery

610
00:23:09,039 --> 00:23:11,120
so the signature also needs the

611
00:23:11,120 --> 00:23:13,600
authority also needs to sign the public

612
00:23:13,600 --> 00:23:15,840
keys of the different parties

613
00:23:15,840 --> 00:23:17,919
yeah this concludes general overview of

614
00:23:17,919 --> 00:23:20,000
our construction so yeah in the full

615
00:23:20,000 --> 00:23:21,840
paper we we basically do everything that

616
00:23:21,840 --> 00:23:23,280
i've just described in a formal way so

617
00:23:23,280 --> 00:23:25,120
we introduced this notion together with

618
00:23:25,120 --> 00:23:27,679
the two security noise notions defined

619
00:23:27,679 --> 00:23:29,679
as security games and we present our

620
00:23:29,679 --> 00:23:31,760
scheme and prove it security

621
00:23:31,760 --> 00:23:33,919
and furthermore we also consider the the

622
00:23:33,919 --> 00:23:37,520
setting of policy compliance just in uc

623
00:23:37,520 --> 00:23:39,600
and derive the corresponding simulation

624
00:23:39,600 --> 00:23:42,400
based notion that our cons that policy

625
00:23:42,400 --> 00:23:44,159
compliance signature scheme needs to

626
00:23:44,159 --> 00:23:45,279
achieve

627
00:23:45,279 --> 00:23:47,600
for the uc realization

628
00:23:47,600 --> 00:23:51,639
yeah thank you very much for listening

629
00:23:54,880 --> 00:23:56,880
thank you andrew

630
00:23:56,880 --> 00:24:00,080
any questions for angie

631
00:24:03,600 --> 00:24:05,840
okay so we have no questions thank you

632
00:24:05,840 --> 00:24:06,780
thanks again

633
00:24:06,780 --> 00:24:10,119
[Applause]

634
00:24:12,240 --> 00:24:14,880
next talk is continuously no malleable

635
00:24:14,880 --> 00:24:18,559
secret sharing giant timbering plane

636
00:24:18,559 --> 00:24:20,240
model and capacity

637
00:24:20,240 --> 00:24:21,440
uh by

638
00:24:21,440 --> 00:24:23,760
gianluca bryan antonio

639
00:24:23,760 --> 00:24:25,520
and eleventhury

640
00:24:25,520 --> 00:24:29,200
and luca is gonna keep the talk

641
00:24:29,520 --> 00:24:32,080
thank you for the introduction i hope

642
00:24:32,080 --> 00:24:34,080
you can hear me well

643
00:24:34,080 --> 00:24:35,520
so um

644
00:24:35,520 --> 00:24:36,960
skip sharing is a cryptographic

645
00:24:36,960 --> 00:24:40,320
primitive in which one party the one

646
00:24:40,320 --> 00:24:42,159
player the dealer has a secret message

647
00:24:42,159 --> 00:24:43,679
and wants to share it among other end

648
00:24:43,679 --> 00:24:46,640
players the parties so that only certain

649
00:24:46,640 --> 00:24:49,279
subsets of parties uh can reconstruct

650
00:24:49,279 --> 00:24:50,320
the message

651
00:24:50,320 --> 00:24:52,720
the success of parties which are allowed

652
00:24:52,720 --> 00:24:55,679
to reconstruct message are defined are

653
00:24:55,679 --> 00:24:57,679
which is uh what defines the access

654
00:24:57,679 --> 00:24:58,720
structure

655
00:24:58,720 --> 00:25:00,880
and the two formal properties of sql

656
00:25:00,880 --> 00:25:03,279
sharing are the following correctness

657
00:25:03,279 --> 00:25:05,760
states that every authorized subset of

658
00:25:05,760 --> 00:25:07,679
parties should be able to reconstruct

659
00:25:07,679 --> 00:25:10,559
the secret and privacy states that no

660
00:25:10,559 --> 00:25:12,720
unauthorized subset of parties should be

661
00:25:12,720 --> 00:25:14,559
able to learn any information about the

662
00:25:14,559 --> 00:25:16,240
secret

663
00:25:16,240 --> 00:25:19,919
clearly none adversary could attack the

664
00:25:19,919 --> 00:25:20,960
the

665
00:25:20,960 --> 00:25:24,559
cryptography primitive in some other

666
00:25:24,559 --> 00:25:27,600
sneaky ways such that tampering

667
00:25:27,600 --> 00:25:29,840
with the shares in particular the

668
00:25:29,840 --> 00:25:32,080
adversary could try to modify all the

669
00:25:32,080 --> 00:25:34,159
shirts and see how this modification

670
00:25:34,159 --> 00:25:36,240
affects the reconstruction

671
00:25:36,240 --> 00:25:37,039
or

672
00:25:37,039 --> 00:25:39,200
the adversary could also leak some

673
00:25:39,200 --> 00:25:41,039
some information from possibly all the

674
00:25:41,039 --> 00:25:43,520
shares and then try to tamper with the

675
00:25:43,520 --> 00:25:44,559
shares

676
00:25:44,559 --> 00:25:46,880
and to protect against this kind of

677
00:25:46,880 --> 00:25:48,799
attacks

678
00:25:48,799 --> 00:25:50,799
came out normally about signal sharing

679
00:25:50,799 --> 00:25:53,279
in which the reconstructed message is

680
00:25:53,279 --> 00:25:55,360
either the original message or a

681
00:25:55,360 --> 00:25:58,000
completely unrelated message and then

682
00:25:58,000 --> 00:26:00,559
leakage resilient nominal signal sharing

683
00:26:00,559 --> 00:26:02,640
in which normal ability holds even in

684
00:26:02,640 --> 00:26:04,720
the presence of leakage

685
00:26:04,720 --> 00:26:07,039
so clearly there are some limitations

686
00:26:07,039 --> 00:26:09,120
because for instance that it is

687
00:26:09,120 --> 00:26:11,520
impossible to protect against trivial

688
00:26:11,520 --> 00:26:13,840
attacks such that reconstruct all the

689
00:26:13,840 --> 00:26:16,320
shares then flip one bit of the message

690
00:26:16,320 --> 00:26:18,960
and then share the message back again

691
00:26:18,960 --> 00:26:19,760
so

692
00:26:19,760 --> 00:26:21,440
usually

693
00:26:21,440 --> 00:26:22,480
all

694
00:26:22,480 --> 00:26:24,320
normal ability and also leakage

695
00:26:24,320 --> 00:26:26,559
resilience is uh

696
00:26:26,559 --> 00:26:29,600
often is always defined

697
00:26:29,600 --> 00:26:32,400
against a certain class of uh leakage or

698
00:26:32,400 --> 00:26:35,039
tampering functions and in our work we

699
00:26:35,039 --> 00:26:36,400
consider

700
00:26:36,400 --> 00:26:37,440
the

701
00:26:37,440 --> 00:26:39,600
class of joint leakage and tampering

702
00:26:39,600 --> 00:26:41,679
functions in which the

703
00:26:41,679 --> 00:26:45,600
the adversary is allowed to partition

704
00:26:45,600 --> 00:26:46,720
the

705
00:26:46,720 --> 00:26:50,159
the shares in disjoint subsets

706
00:26:50,159 --> 00:26:52,960
of unauthorized shares

707
00:26:52,960 --> 00:26:53,919
and then

708
00:26:53,919 --> 00:26:56,000
the adversary is able to jointly leak

709
00:26:56,000 --> 00:26:59,360
from the shares and tamper with them

710
00:26:59,360 --> 00:27:02,960
with all the shares within each subset

711
00:27:02,960 --> 00:27:04,880
in this setting there is an even

712
00:27:04,880 --> 00:27:06,960
stronger model of continuous normal

713
00:27:06,960 --> 00:27:08,000
ability

714
00:27:08,000 --> 00:27:10,159
in which the adversary once the

715
00:27:10,159 --> 00:27:13,200
adversary chooses the reconstruction set

716
00:27:13,200 --> 00:27:14,320
then

717
00:27:14,320 --> 00:27:16,320
he is allowed to continuously tamper

718
00:27:16,320 --> 00:27:18,320
with the shares and see

719
00:27:18,320 --> 00:27:19,840
each time the

720
00:27:19,840 --> 00:27:21,360
result of this qualification to the

721
00:27:21,360 --> 00:27:22,559
reconstruction

722
00:27:22,559 --> 00:27:24,880
reconstructed message

723
00:27:24,880 --> 00:27:26,960
and uh

724
00:27:26,960 --> 00:27:29,919
but this model has uh some limitations

725
00:27:29,919 --> 00:27:30,720
which

726
00:27:30,720 --> 00:27:32,000
which has been

727
00:27:32,000 --> 00:27:34,000
been proven to be necessary in

728
00:27:34,000 --> 00:27:36,240
particular computation uh continues to

729
00:27:36,240 --> 00:27:38,000
malability can only be obtained in the

730
00:27:38,000 --> 00:27:39,600
computational setting

731
00:27:39,600 --> 00:27:41,200
and

732
00:27:41,200 --> 00:27:43,520
another limitation is the self-destruct

733
00:27:43,520 --> 00:27:44,480
trigger

734
00:27:44,480 --> 00:27:47,360
which means that whenever the adversary

735
00:27:47,360 --> 00:27:50,080
generates some invalid shares which

736
00:27:50,080 --> 00:27:52,240
cannot be reconstructed to any message

737
00:27:52,240 --> 00:27:53,520
then the

738
00:27:53,520 --> 00:27:56,080
oracles self-destruct and adversary

739
00:27:56,080 --> 00:27:58,320
cannot perform any more queries

740
00:27:58,320 --> 00:28:00,640
in this setting our first result is that

741
00:28:00,640 --> 00:28:02,399
we construct the first continuously

742
00:28:02,399 --> 00:28:04,320
malleable secret sharing scheme which is

743
00:28:04,320 --> 00:28:06,399
secure against joint tampering attacks

744
00:28:06,399 --> 00:28:08,000
in the plane model

745
00:28:08,000 --> 00:28:10,000
this is the first scheme of

746
00:28:10,000 --> 00:28:12,320
this in this kind of security because

747
00:28:12,320 --> 00:28:13,919
all other continuously unmalleable

748
00:28:13,919 --> 00:28:15,919
signation schemes are only secure

749
00:28:15,919 --> 00:28:17,919
against independent tampering and the

750
00:28:17,919 --> 00:28:20,240
only one which is secured against joint

751
00:28:20,240 --> 00:28:23,919
tampering requires a trusted setup

752
00:28:23,919 --> 00:28:26,559
then we study the rate and the capacity

753
00:28:26,559 --> 00:28:28,640
of secret sharing schemes in particular

754
00:28:28,640 --> 00:28:30,399
the rate is the ratio between the length

755
00:28:30,399 --> 00:28:32,880
of the message and the maximum length of

756
00:28:32,880 --> 00:28:34,640
of a share and the capacity is the

757
00:28:34,640 --> 00:28:36,640
maximum achievable rate for a single

758
00:28:36,640 --> 00:28:37,840
sharing scheme

759
00:28:37,840 --> 00:28:40,720
which for regular uh sharing

760
00:28:40,720 --> 00:28:43,360
is known to be

761
00:28:43,360 --> 00:28:45,679
exactly the threshold

762
00:28:45,679 --> 00:28:47,440
but for continuous malleable signal

763
00:28:47,440 --> 00:28:50,159
sharing we prove a negative result which

764
00:28:50,159 --> 00:28:52,399
says that um

765
00:28:52,399 --> 00:28:55,440
the the rate cannot be too high in

766
00:28:55,440 --> 00:28:57,039
particular

767
00:28:57,039 --> 00:28:59,279
uh any cigarette sharing achieving

768
00:28:59,279 --> 00:29:02,480
continuously continuous mobility

769
00:29:02,480 --> 00:29:05,520
against jointly tampering with more than

770
00:29:05,520 --> 00:29:07,760
half the threshold the shares

771
00:29:07,760 --> 00:29:10,559
cannot have shares too small and

772
00:29:10,559 --> 00:29:13,919
the capacity is the threshold minus the

773
00:29:13,919 --> 00:29:16,880
maximum number of shares diversity can

774
00:29:16,880 --> 00:29:19,919
jointly tamper with

775
00:29:20,000 --> 00:29:24,240
after this we show a rate compiler which

776
00:29:24,240 --> 00:29:27,120
achieves actually this uh

777
00:29:27,120 --> 00:29:28,720
this rate so

778
00:29:28,720 --> 00:29:32,240
in particular it achieves optimal rate

779
00:29:32,240 --> 00:29:34,240
and uh however

780
00:29:34,240 --> 00:29:36,720
we prove that this is secure with a

781
00:29:36,720 --> 00:29:38,399
certain restriction

782
00:29:38,399 --> 00:29:40,399
which is the adversary is forced to

783
00:29:40,399 --> 00:29:43,520
choose either zero or at least t-sh

784
00:29:43,520 --> 00:29:45,520
t-star shares for the reconstruction

785
00:29:45,520 --> 00:29:47,600
procedure from each subset of the

786
00:29:47,600 --> 00:29:49,520
partition of his choice

787
00:29:49,520 --> 00:29:53,120
this uh this star is a parameter of the

788
00:29:53,120 --> 00:29:55,520
um

789
00:29:55,520 --> 00:29:57,919
of the compiler which identifies the

790
00:29:57,919 --> 00:30:00,399
rate and yeah also the

791
00:30:00,399 --> 00:30:02,880
the the number of shares

792
00:30:02,880 --> 00:30:05,200
in the reconstruction set

793
00:30:05,200 --> 00:30:06,720
uh in the

794
00:30:06,720 --> 00:30:08,640
yeah in the intersection between the

795
00:30:08,640 --> 00:30:11,200
each subset and the reconstruction set

796
00:30:11,200 --> 00:30:12,720
so in conclusion

797
00:30:12,720 --> 00:30:14,799
uh we construct the first secret sharing

798
00:30:14,799 --> 00:30:16,480
scheme which achieves continuous

799
00:30:16,480 --> 00:30:18,320
malleability against joint

800
00:30:18,320 --> 00:30:20,000
joint leakage and tampering in the plane

801
00:30:20,000 --> 00:30:22,960
model we prove the negative result about

802
00:30:22,960 --> 00:30:24,159
the

803
00:30:24,159 --> 00:30:26,080
the capacity of not continuously on

804
00:30:26,080 --> 00:30:28,480
multiple secretion schemes and we show a

805
00:30:28,480 --> 00:30:30,320
rate compiler which achieves this

806
00:30:30,320 --> 00:30:32,720
optimal rate with the restriction i said

807
00:30:32,720 --> 00:30:34,000
before

808
00:30:34,000 --> 00:30:36,880
as a corollary to this one we construct

809
00:30:36,880 --> 00:30:38,240
the first continuously unmalleable

810
00:30:38,240 --> 00:30:40,000
serious sharing scheme against

811
00:30:40,000 --> 00:30:41,919
independent tampering breaking the rate

812
00:30:41,919 --> 00:30:44,640
one barrier and in particular

813
00:30:44,640 --> 00:30:45,440
the

814
00:30:45,440 --> 00:30:48,000
rate of our in continuation malleable

815
00:30:48,000 --> 00:30:49,200
signal sharing scheme against

816
00:30:49,200 --> 00:30:52,320
independent tampering is a

817
00:30:52,320 --> 00:30:54,960
healthy threshold of the

818
00:30:54,960 --> 00:30:57,440
health deconstruction threshold

819
00:30:57,440 --> 00:31:00,480
we also leave some open problems

820
00:31:00,480 --> 00:31:02,640
the first one is achieving the optimal

821
00:31:02,640 --> 00:31:05,279
rate without the restriction uh which is

822
00:31:05,279 --> 00:31:06,880
needed actually

823
00:31:06,880 --> 00:31:10,159
to prove a result but

824
00:31:10,159 --> 00:31:12,720
it is not linear to the model so it's

825
00:31:12,720 --> 00:31:14,799
only for our construction

826
00:31:14,799 --> 00:31:16,720
and our construction only achieves

827
00:31:16,720 --> 00:31:18,480
security for uh

828
00:31:18,480 --> 00:31:19,200
at

829
00:31:19,200 --> 00:31:21,519
rather high threshold

830
00:31:21,519 --> 00:31:23,919
with respect to the number of parties

831
00:31:23,919 --> 00:31:25,919
so we live open to

832
00:31:25,919 --> 00:31:28,799
do better so to find to achieve security

833
00:31:28,799 --> 00:31:30,480
even for

834
00:31:30,480 --> 00:31:32,480
a threshold which is less than

835
00:31:32,480 --> 00:31:34,799
two-thirds of the total number of

836
00:31:34,799 --> 00:31:36,000
parties

837
00:31:36,000 --> 00:31:39,039
thank you for the attention

838
00:31:42,720 --> 00:31:45,120
thank you thank you

839
00:31:45,120 --> 00:31:47,120
is that any question for

840
00:31:47,120 --> 00:31:49,760
john luca

841
00:31:50,320 --> 00:31:52,559
um i guess a quick question how is this

842
00:31:52,559 --> 00:31:55,120
style related to the rate i don't think

843
00:31:55,120 --> 00:31:56,799
i i don't know sorry

844
00:31:56,799 --> 00:32:00,320
right how is it

845
00:32:02,720 --> 00:32:04,559
is a parameter which uh

846
00:32:04,559 --> 00:32:07,279
actually in our rate compiler we use an

847
00:32:07,279 --> 00:32:09,360
information dispersal scheme

848
00:32:09,360 --> 00:32:10,159
uh

849
00:32:10,159 --> 00:32:10,940
which is a

850
00:32:10,940 --> 00:32:12,240
[Music]

851
00:32:12,240 --> 00:32:13,679
scheme

852
00:32:13,679 --> 00:32:15,440
just like secret sharing but without the

853
00:32:15,440 --> 00:32:18,559
privacy only the correctness property

854
00:32:18,559 --> 00:32:19,440
and

855
00:32:19,440 --> 00:32:22,000
we use an informational dispersal scheme

856
00:32:22,000 --> 00:32:24,000
which has a

857
00:32:24,000 --> 00:32:26,640
reconstruction threshold the star

858
00:32:26,640 --> 00:32:27,600
so

859
00:32:27,600 --> 00:32:28,399
since

860
00:32:28,399 --> 00:32:31,600
the rate of uh information

861
00:32:31,600 --> 00:32:34,159
the of information dispersal scheme is

862
00:32:34,159 --> 00:32:38,000
exactly the threshold then this uh

863
00:32:38,000 --> 00:32:40,399
threshold for the reconstruction of

864
00:32:40,399 --> 00:32:43,200
information dispersal schemes

865
00:32:43,200 --> 00:32:46,399
is also the rate of our construction

866
00:32:46,399 --> 00:32:48,640
however

867
00:32:48,640 --> 00:32:51,039
since we have to simulate the tampering

868
00:32:51,039 --> 00:32:51,760
and

869
00:32:51,760 --> 00:32:53,600
reconstruct the message from the

870
00:32:53,600 --> 00:32:56,240
information dispersal scheme inside the

871
00:32:56,240 --> 00:32:59,120
tampering oracle we have this model

872
00:32:59,120 --> 00:33:01,039
restriction about

873
00:33:01,039 --> 00:33:04,240
the either zero or at least t-shares

874
00:33:04,240 --> 00:33:07,120
from each subset

875
00:33:08,559 --> 00:33:12,720
okay thank you so much to look again

876
00:33:15,279 --> 00:33:17,200
okay next next talk is on the

877
00:33:17,200 --> 00:33:19,840
impossibility of purely algebraic

878
00:33:19,840 --> 00:33:20,960
signatures

879
00:33:20,960 --> 00:33:24,000
this is by nico dotling dominic hartmann

880
00:33:24,000 --> 00:33:26,880
dennis offines ike health

881
00:33:26,880 --> 00:33:28,720
sven shaggy

882
00:33:28,720 --> 00:33:30,559
and bogdan ursu

883
00:33:30,559 --> 00:33:33,519
and dominic will give the talk

884
00:33:33,519 --> 00:33:36,080
yes hello i hope you can hear me and see

885
00:33:36,080 --> 00:33:39,200
the slides yes great then let's get

886
00:33:39,200 --> 00:33:40,320
right to it

887
00:33:40,320 --> 00:33:42,000
um so we all know that digital

888
00:33:42,000 --> 00:33:43,760
signatures are integral to modern

889
00:33:43,760 --> 00:33:45,440
communication and we have many

890
00:33:45,440 --> 00:33:47,440
constructions from lots of different

891
00:33:47,440 --> 00:33:50,080
assumptions like one-way functions

892
00:33:50,080 --> 00:33:52,240
discrete logarithms and random oracles

893
00:33:52,240 --> 00:33:54,640
like schnauer signatures herrings in

894
00:33:54,640 --> 00:33:56,799
form of bonnie bayern signatures

895
00:33:56,799 --> 00:33:59,279
lattices and random oracles from general

896
00:33:59,279 --> 00:34:02,240
at all and also just hash functions like

897
00:34:02,240 --> 00:34:03,519
merkle trees

898
00:34:03,519 --> 00:34:04,320
but

899
00:34:04,320 --> 00:34:06,880
there are no constructions which only

900
00:34:06,880 --> 00:34:08,320
use

901
00:34:08,320 --> 00:34:10,320
groups may they be

902
00:34:10,320 --> 00:34:12,639
known or unknown order everything always

903
00:34:12,639 --> 00:34:14,960
needs pairing or random oracles or hash

904
00:34:14,960 --> 00:34:16,480
functions or something so we ask the

905
00:34:16,480 --> 00:34:18,000
questions

906
00:34:18,000 --> 00:34:20,719
can we build signatures just from groups

907
00:34:20,719 --> 00:34:22,000
and as the title

908
00:34:22,000 --> 00:34:25,359
suggests this actually isn't possible

909
00:34:25,359 --> 00:34:27,760
so what are actually our contributions

910
00:34:27,760 --> 00:34:30,159
well first we define what we consider

911
00:34:30,159 --> 00:34:32,079
algebraic signatures over prime order

912
00:34:32,079 --> 00:34:34,639
groups so what we consider is a

913
00:34:34,639 --> 00:34:37,119
signature which only works over group

914
00:34:37,119 --> 00:34:38,879
and then we show that these signatures

915
00:34:38,879 --> 00:34:40,719
can't be secure in the generic group

916
00:34:40,719 --> 00:34:41,918
model

917
00:34:41,918 --> 00:34:44,159
then we give a second definition of

918
00:34:44,159 --> 00:34:46,320
simplified algebraic signatures which

919
00:34:46,320 --> 00:34:48,000
are as the name suggests simpler and a

920
00:34:48,000 --> 00:34:49,839
bit more restricted than the algebraic

921
00:34:49,839 --> 00:34:52,079
signatures over primordial groups but

922
00:34:52,079 --> 00:34:54,960
they also work over potentially unknown

923
00:34:54,960 --> 00:34:57,920
order groups and show that these secures

924
00:34:57,920 --> 00:34:59,520
that these simplified algebraic

925
00:34:59,520 --> 00:35:01,280
signatures can be secure in the standard

926
00:35:01,280 --> 00:35:02,880
model

927
00:35:02,880 --> 00:35:05,280
and lastly we extend this to

928
00:35:05,280 --> 00:35:07,520
work for vls signatures with algebraic

929
00:35:07,520 --> 00:35:09,839
hash functions and as a corollary then

930
00:35:09,839 --> 00:35:11,359
show that these

931
00:35:11,359 --> 00:35:14,160
bls signatures wish with algebraic hash

932
00:35:14,160 --> 00:35:16,640
functions can be secure

933
00:35:16,640 --> 00:35:18,640
so let me give you a brief overview over

934
00:35:18,640 --> 00:35:20,560
the first result and then for the others

935
00:35:20,560 --> 00:35:22,400
you will have to look at the extender

936
00:35:22,400 --> 00:35:24,400
talk in the paper

937
00:35:24,400 --> 00:35:26,560
so how do we model these algebraic

938
00:35:26,560 --> 00:35:28,320
signatures

939
00:35:28,320 --> 00:35:30,640
so the question is how does a signature

940
00:35:30,640 --> 00:35:32,880
over a group actually look like if it

941
00:35:32,880 --> 00:35:34,720
can't use anything else

942
00:35:34,720 --> 00:35:36,400
and of course it should only use the

943
00:35:36,400 --> 00:35:38,000
group structure then and should be

944
00:35:38,000 --> 00:35:40,160
independent of group representation

945
00:35:40,160 --> 00:35:42,240
because otherwise we could again use

946
00:35:42,240 --> 00:35:44,000
hash functions or anything like that if

947
00:35:44,000 --> 00:35:46,880
we have a concrete group representation

948
00:35:46,880 --> 00:35:48,400
and on the other hand

949
00:35:48,400 --> 00:35:50,400
it should not allow easy encoding of

950
00:35:50,400 --> 00:35:52,640
some other hard problem into it and

951
00:35:52,640 --> 00:35:54,560
despite all these restrictions we still

952
00:35:54,560 --> 00:35:56,960
need a meaningful class of signatures so

953
00:35:56,960 --> 00:35:59,440
not just some pathological pathological

954
00:35:59,440 --> 00:36:00,880
examples

955
00:36:00,880 --> 00:36:02,480
and the uh

956
00:36:02,480 --> 00:36:04,240
a nice abstraction for this seems to be

957
00:36:04,240 --> 00:36:06,160
the generic group model and specifically

958
00:36:06,160 --> 00:36:08,079
the one by maura

959
00:36:08,079 --> 00:36:10,240
because recently it was shown that in

960
00:36:10,240 --> 00:36:12,320
shoes generic group model signatures

961
00:36:12,320 --> 00:36:14,480
actually exists namely

962
00:36:14,480 --> 00:36:16,320
signatures

963
00:36:16,320 --> 00:36:20,000
so i won't give you the detailed

964
00:36:20,000 --> 00:36:22,240
definition of these algebraic signatures

965
00:36:22,240 --> 00:36:24,240
for this talk just think about them as

966
00:36:24,240 --> 00:36:26,240
signatures where the verification is

967
00:36:26,240 --> 00:36:29,119
linear so we have these matrices a and b

968
00:36:29,119 --> 00:36:31,520
which depend on the message and some

969
00:36:31,520 --> 00:36:34,160
bit string in the signature

970
00:36:34,160 --> 00:36:36,720
and the verification is just a linear

971
00:36:36,720 --> 00:36:39,119
equation between the verification key

972
00:36:39,119 --> 00:36:40,720
and the signature

973
00:36:40,720 --> 00:36:42,240
and this seems to be

974
00:36:42,240 --> 00:36:44,720
a good abstraction in the generic group

975
00:36:44,720 --> 00:36:47,040
model because there we

976
00:36:47,040 --> 00:36:50,320
simply can't do more than just combine

977
00:36:50,320 --> 00:36:52,560
group elements linearly because we only

978
00:36:52,560 --> 00:36:55,760
have this group operation oracle

979
00:36:55,760 --> 00:36:57,599
and for these signatures

980
00:36:57,599 --> 00:36:59,760
with this nice linear property we can

981
00:36:59,760 --> 00:37:02,320
then state our main theorem in a bit of

982
00:37:02,320 --> 00:37:04,800
an informal way namely if we have such

983
00:37:04,800 --> 00:37:06,960
an algebraic signature over a cyclic

984
00:37:06,960 --> 00:37:09,760
group g of prime order p which has a

985
00:37:09,760 --> 00:37:12,480
public key of size n so it consists of n

986
00:37:12,480 --> 00:37:15,040
group elements then there is a gm

987
00:37:15,040 --> 00:37:16,480
adversary a

988
00:37:16,480 --> 00:37:18,400
that breaks the security

989
00:37:18,400 --> 00:37:20,160
of the signature scheme so it forges a

990
00:37:20,160 --> 00:37:22,720
signature with just n random signatures

991
00:37:22,720 --> 00:37:24,560
on random messages

992
00:37:24,560 --> 00:37:26,320
and this adversary a is efficient in the

993
00:37:26,320 --> 00:37:27,200
group

994
00:37:27,200 --> 00:37:29,200
but it might be

995
00:37:29,200 --> 00:37:31,280
exponential outside of this group but

996
00:37:31,280 --> 00:37:32,960
for an impossibility result this is

997
00:37:32,960 --> 00:37:35,520
actually fine as we discuss in the paper

998
00:37:35,520 --> 00:37:38,160
and the extended talk

999
00:37:38,160 --> 00:37:40,640
so let me give you just a brief idea of

1000
00:37:40,640 --> 00:37:41,520
the proof

1001
00:37:41,520 --> 00:37:44,079
the two main points that we exploit is

1002
00:37:44,079 --> 00:37:46,480
that first signature verification is of

1003
00:37:46,480 --> 00:37:48,000
course public

1004
00:37:48,000 --> 00:37:50,400
and for our case signature verification

1005
00:37:50,400 --> 00:37:52,000
is linear

1006
00:37:52,000 --> 00:37:54,720
and what we observed is that you if you

1007
00:37:54,720 --> 00:37:56,240
knew the discrete logarithms of this

1008
00:37:56,240 --> 00:37:57,920
verification key then you could actually

1009
00:37:57,920 --> 00:38:00,160
forge signatures

1010
00:38:00,160 --> 00:38:02,640
and whenever you can verify a signature

1011
00:38:02,640 --> 00:38:04,400
you actually learn something about these

1012
00:38:04,400 --> 00:38:06,000
discrete logarithms because you learn

1013
00:38:06,000 --> 00:38:09,200
linear relations between group elements

1014
00:38:09,200 --> 00:38:10,400
so

1015
00:38:10,400 --> 00:38:13,520
what we can then do is we look at the

1016
00:38:13,520 --> 00:38:16,480
space of all possible verification keys

1017
00:38:16,480 --> 00:38:18,560
that could have verified the signatures

1018
00:38:18,560 --> 00:38:20,400
that we have seen so far and these

1019
00:38:20,400 --> 00:38:24,079
formula find subspace of zp to the n

1020
00:38:24,079 --> 00:38:26,240
and if we knew this subspace then we

1021
00:38:26,240 --> 00:38:28,560
could actually attack something and this

1022
00:38:28,560 --> 00:38:30,800
works as follows because whenever we get

1023
00:38:30,800 --> 00:38:33,280
a new signature there are two cases

1024
00:38:33,280 --> 00:38:34,640
either

1025
00:38:34,640 --> 00:38:37,520
the signature reveals a new dimension of

1026
00:38:37,520 --> 00:38:38,800
the subspace

1027
00:38:38,800 --> 00:38:40,960
or a new set of constraints on the

1028
00:38:40,960 --> 00:38:43,599
verification key and then the dimension

1029
00:38:43,599 --> 00:38:45,839
of the subspace decreases and this can

1030
00:38:45,839 --> 00:38:47,920
only happen finite number of times and

1031
00:38:47,920 --> 00:38:49,520
if this happens n times then we know the

1032
00:38:49,520 --> 00:38:51,119
verification key or rather it's discrete

1033
00:38:51,119 --> 00:38:52,880
logarithm and this is enough to forge

1034
00:38:52,880 --> 00:38:54,000
signatures

1035
00:38:54,000 --> 00:38:56,720
or the second case is that we don't

1036
00:38:56,720 --> 00:38:58,880
learn any new constraints but then we

1037
00:38:58,880 --> 00:39:01,200
could have chosen any of the possible

1038
00:39:01,200 --> 00:39:03,920
verification keys and used its discrete

1039
00:39:03,920 --> 00:39:05,839
logarithms to actually forge a signature

1040
00:39:05,839 --> 00:39:07,920
already

1041
00:39:07,920 --> 00:39:09,680
but of course there are some problems

1042
00:39:09,680 --> 00:39:11,599
namely how do we compute these possible

1043
00:39:11,599 --> 00:39:15,440
verification keys with only a polynomial

1044
00:39:15,440 --> 00:39:18,400
number of group operations and then

1045
00:39:18,400 --> 00:39:22,160
since these matrices a and b over here

1046
00:39:22,160 --> 00:39:24,160
depend on the message and this bit

1047
00:39:24,160 --> 00:39:25,599
string t

1048
00:39:25,599 --> 00:39:27,839
we actually have to check if there even

1049
00:39:27,839 --> 00:39:29,760
is a solution and also this we have to

1050
00:39:29,760 --> 00:39:31,520
do with only polynomial many group

1051
00:39:31,520 --> 00:39:33,839
operations and these were the two main

1052
00:39:33,839 --> 00:39:36,000
things that we had to solve in the paper

1053
00:39:36,000 --> 00:39:38,240
um but i won't get into

1054
00:39:38,240 --> 00:39:40,160
any more detail here because of the time

1055
00:39:40,160 --> 00:39:42,000
constraints so for that you have to look

1056
00:39:42,000 --> 00:39:44,079
at the extended talk

1057
00:39:44,079 --> 00:39:46,640
and as i said our other contributions

1058
00:39:46,640 --> 00:39:47,920
are

1059
00:39:47,920 --> 00:39:49,440
a simplified algebraic signature

1060
00:39:49,440 --> 00:39:51,839
definition and an impossibility result

1061
00:39:51,839 --> 00:39:53,680
for them in the standard model and the

1062
00:39:53,680 --> 00:39:55,359
application to bls

1063
00:39:55,359 --> 00:39:56,400
and maybe some

1064
00:39:56,400 --> 00:39:59,119
interesting open questions

1065
00:39:59,119 --> 00:40:00,880
whether we can

1066
00:40:00,880 --> 00:40:02,720
extend this definition of algebraic

1067
00:40:02,720 --> 00:40:05,119
signatures for example for checking

1068
00:40:05,119 --> 00:40:07,040
inequalities because

1069
00:40:07,040 --> 00:40:09,839
as i said we only check linear equations

1070
00:40:09,839 --> 00:40:11,760
and only equalities there and maybe we

1071
00:40:11,760 --> 00:40:13,280
can extend this by also considering

1072
00:40:13,280 --> 00:40:14,640
inequalities

1073
00:40:14,640 --> 00:40:16,000
and

1074
00:40:16,000 --> 00:40:17,359
second question would be if we can

1075
00:40:17,359 --> 00:40:19,040
remove the simplifications we made for

1076
00:40:19,040 --> 00:40:21,119
the hidden order groups case

1077
00:40:21,119 --> 00:40:22,319
and

1078
00:40:22,319 --> 00:40:24,560
now our result shows that we can't build

1079
00:40:24,560 --> 00:40:28,079
signatures from just loops but with

1080
00:40:28,079 --> 00:40:30,000
hash functions it's actually possible

1081
00:40:30,000 --> 00:40:32,000
but just from hash functions we only get

1082
00:40:32,000 --> 00:40:34,000
rather long signatures so looking at

1083
00:40:34,000 --> 00:40:35,520
short signatures in that setting would

1084
00:40:35,520 --> 00:40:37,599
also be interesting

1085
00:40:37,599 --> 00:40:39,680
that's it for my short teaser

1086
00:40:39,680 --> 00:40:40,800
thanks for your attention and if you

1087
00:40:40,800 --> 00:40:44,319
have any questions feel free to ask

1088
00:40:48,240 --> 00:40:50,319
thank you dominique

1089
00:40:50,319 --> 00:40:53,759
any questions for dominique

1090
00:40:55,200 --> 00:40:58,400
yes jeff dennis do you want to speak up

1091
00:40:58,400 --> 00:41:01,040
uh oh sure um yeah uh it looks like

1092
00:41:01,040 --> 00:41:03,200
really nice result i um

1093
00:41:03,200 --> 00:41:05,440
i'm just curious so we have this old

1094
00:41:05,440 --> 00:41:08,160
paper from tcc12 it looks using very

1095
00:41:08,160 --> 00:41:10,640
different techniques but uh

1096
00:41:10,640 --> 00:41:12,480
one of our results also i think showed

1097
00:41:12,480 --> 00:41:14,079
the possibility of

1098
00:41:14,079 --> 00:41:16,800
some kind of algebraic model for

1099
00:41:16,800 --> 00:41:19,440
bls signatures i think i'm just curious

1100
00:41:19,440 --> 00:41:21,599
what is the relation because it looks

1101
00:41:21,599 --> 00:41:23,359
very different techniques but

1102
00:41:23,359 --> 00:41:26,240
there must be some catch

1103
00:41:26,240 --> 00:41:27,920
um

1104
00:41:27,920 --> 00:41:29,200
i'm actually

1105
00:41:29,200 --> 00:41:31,119
i uh from the top of my head i don't

1106
00:41:31,119 --> 00:41:35,040
know what paper you mean um basically

1107
00:41:35,040 --> 00:41:38,400
the the bls result is uh corollary from

1108
00:41:38,400 --> 00:41:40,079
everything so this wasn't the main

1109
00:41:40,079 --> 00:41:42,400
motivation but uh just

1110
00:41:42,400 --> 00:41:44,000
basically at the end we could apply it

1111
00:41:44,000 --> 00:41:46,480
there so um

1112
00:41:46,480 --> 00:41:49,760
i'm not sure if you're not a big deal

1113
00:41:49,760 --> 00:41:51,760
uh you will feel free i mean maybe i'll

1114
00:41:51,760 --> 00:41:53,440
put it on the zulu chat i mean i'm just

1115
00:41:53,440 --> 00:41:55,200
curious it's not i mean i'm sure there

1116
00:41:55,200 --> 00:41:56,880
are differences just i was curious to

1117
00:41:56,880 --> 00:41:58,880
see what they are but yeah i sent a link

1118
00:41:58,880 --> 00:42:02,000
but i can also log in to zulip and ask

1119
00:42:02,000 --> 00:42:04,400
there or you can just answer but yeah

1120
00:42:04,400 --> 00:42:08,720
yeah sure i'll i'll look at it

1121
00:42:10,240 --> 00:42:13,680
any other question for dominique

1122
00:42:13,680 --> 00:42:17,839
okay so let's thank dominique again

1123
00:42:18,960 --> 00:42:22,000
our last talk is in person

1124
00:42:22,000 --> 00:42:23,920
so

1125
00:42:23,920 --> 00:42:27,480
i'm gonna share

1126
00:42:40,640 --> 00:42:42,640
so our last stock is the round

1127
00:42:42,640 --> 00:42:46,079
complexity of quantum zero knowledge

1128
00:42:46,079 --> 00:42:48,880
uh by orestes and julio malavoca ioresti

1129
00:42:48,880 --> 00:42:52,240
will give the talk

1130
00:42:53,280 --> 00:42:55,520
great uh thanks for the introduction so

1131
00:42:55,520 --> 00:42:58,480
amores to send this work

1132
00:42:58,480 --> 00:42:59,920
the round complexity of quantum zero

1133
00:42:59,920 --> 00:43:02,400
knowledge

1134
00:43:05,280 --> 00:43:06,079
okay

1135
00:43:06,079 --> 00:43:08,079
so uh it probably needs no introduction

1136
00:43:08,079 --> 00:43:09,920
but for completeness uh

1137
00:43:09,920 --> 00:43:11,119
azure knowledge protocol is an

1138
00:43:11,119 --> 00:43:12,880
interactive protocol where we have

1139
00:43:12,880 --> 00:43:15,200
approver and a verifier and the approver

1140
00:43:15,200 --> 00:43:16,880
wants to prove the rest of the statement

1141
00:43:16,880 --> 00:43:19,040
while we really nothing beyond that so

1142
00:43:19,040 --> 00:43:20,400
if the approver wants to prove that a

1143
00:43:20,400 --> 00:43:22,000
segment x is in the language using a

1144
00:43:22,000 --> 00:43:24,000
witness w we want for the verifier to

1145
00:43:24,000 --> 00:43:26,720
learn nothing about w

1146
00:43:26,720 --> 00:43:28,160
now a very interesting problem a very

1147
00:43:28,160 --> 00:43:29,839
well studied is the number of messages

1148
00:43:29,839 --> 00:43:31,599
that change in azure knowledge protocol

1149
00:43:31,599 --> 00:43:34,000
or at the around complexity or knowledge

1150
00:43:34,000 --> 00:43:36,160
and for np statements it has been shown

1151
00:43:36,160 --> 00:43:38,880
that any statement can be proven as just

1152
00:43:38,880 --> 00:43:41,040
four rounds of interaction

1153
00:43:41,040 --> 00:43:42,160
and there's also very interesting

1154
00:43:42,160 --> 00:43:44,400
results for three rounds or knowledge

1155
00:43:44,400 --> 00:43:46,000
but it's not possible secure and that's

1156
00:43:46,000 --> 00:43:48,560
going to be a regular event later

1157
00:43:48,560 --> 00:43:50,560
so i've been talking about np statements

1158
00:43:50,560 --> 00:43:52,160
which makes sense because

1159
00:43:52,160 --> 00:43:53,920
for np statements we have all the

1160
00:43:53,920 --> 00:43:55,440
decision problems that if the answer is

1161
00:43:55,440 --> 00:43:56,319
yes

1162
00:43:56,319 --> 00:43:58,880
they are verifiable in polynomial time

1163
00:43:58,880 --> 00:43:59,839
but if we take a look at the

1164
00:43:59,839 --> 00:44:02,240
complexities we can also consider

1165
00:44:02,240 --> 00:44:05,119
uh the quantum analog of np which is qma

1166
00:44:05,119 --> 00:44:07,280
or quantum ordering narrator well we

1167
00:44:07,280 --> 00:44:09,200
have um

1168
00:44:09,200 --> 00:44:10,720
decision problems that if the answer is

1169
00:44:10,720 --> 00:44:12,720
yes we have quantum following all time

1170
00:44:12,720 --> 00:44:15,760
proofs that can persuade the quantum

1171
00:44:15,760 --> 00:44:17,520
polynomial time verifier with very high

1172
00:44:17,520 --> 00:44:20,000
probability so the question is

1173
00:44:20,000 --> 00:44:22,640
what about qma statements and the answer

1174
00:44:22,640 --> 00:44:24,079
is we have quantum zero knowledge

1175
00:44:24,079 --> 00:44:26,000
protocols it's basically the same

1176
00:44:26,000 --> 00:44:27,200
setting

1177
00:44:27,200 --> 00:44:28,880
but now the prover and the very far can

1178
00:44:28,880 --> 00:44:30,640
both the quantum and also the messages

1179
00:44:30,640 --> 00:44:33,200
above big quantum

1180
00:44:33,200 --> 00:44:35,440
uh in terms of run complexity the best

1181
00:44:35,440 --> 00:44:37,359
known result was constructed by vitascan

1182
00:44:37,359 --> 00:44:39,680
smelly last year and it's in constant

1183
00:44:39,680 --> 00:44:41,920
rounds so what we wonder is whether uh

1184
00:44:41,920 --> 00:44:44,160
qma statements inherently introduce more

1185
00:44:44,160 --> 00:44:45,680
rounds of interaction

1186
00:44:45,680 --> 00:44:47,760
and before answering that and getting to

1187
00:44:47,760 --> 00:44:49,599
our contribution i have to also

1188
00:44:49,599 --> 00:44:52,160
introduce another notion of the notion

1189
00:44:52,160 --> 00:44:54,160
of witnessing distinguishability which

1190
00:44:54,160 --> 00:44:56,319
is a weaker notion of zero knowledge so

1191
00:44:56,319 --> 00:44:57,599
it's kind of like the same setting we

1192
00:44:57,599 --> 00:44:59,520
have the approval of the verifier

1193
00:44:59,520 --> 00:45:01,040
but instead of arguing that the verifier

1194
00:45:01,040 --> 00:45:02,880
learns nothing about the weakness we

1195
00:45:02,880 --> 00:45:04,319
claim that the verifier cannot tell the

1196
00:45:04,319 --> 00:45:05,760
difference between two

1197
00:45:05,760 --> 00:45:08,079
weaknesses used by the proverb

1198
00:45:08,079 --> 00:45:10,079
so getting to our contribution and

1199
00:45:10,079 --> 00:45:12,160
answering the previous question assuming

1200
00:45:12,160 --> 00:45:15,359
a quasi-follow-normal hardness of lwp

1201
00:45:15,359 --> 00:45:16,720
first we construct a two-round

1202
00:45:16,720 --> 00:45:18,480
statistical witness in this possibility

1203
00:45:18,480 --> 00:45:20,160
argument for qma

1204
00:45:20,160 --> 00:45:21,839
and then we use this as a main building

1205
00:45:21,839 --> 00:45:24,079
block and we turn it into a fully

1206
00:45:24,079 --> 00:45:26,480
fledged uh zero knowledge protocols

1207
00:45:26,480 --> 00:45:28,319
so we get four round statistical zero

1208
00:45:28,319 --> 00:45:30,400
knowledge argument for gma

1209
00:45:30,400 --> 00:45:32,640
and we also move our research into the

1210
00:45:32,640 --> 00:45:35,440
timing model where uh both parties can

1211
00:45:35,440 --> 00:45:37,520
reliably measure the lapse of time and

1212
00:45:37,520 --> 00:45:39,839
we get two rounds on all these protocols

1213
00:45:39,839 --> 00:45:41,520
we get both uh computational and

1214
00:45:41,520 --> 00:45:43,200
statistical knowledge depending on some

1215
00:45:43,200 --> 00:45:45,839
additional assumptions

1216
00:45:45,839 --> 00:45:48,240
uh all of these protocols they

1217
00:45:48,240 --> 00:45:50,640
uh we get the best run complex of the

1218
00:45:50,640 --> 00:45:52,240
corresponding post quantum classical

1219
00:45:52,240 --> 00:45:54,640
problems

1220
00:45:54,640 --> 00:45:56,319
uh i'm not gonna get into into any

1221
00:45:56,319 --> 00:45:58,960
details but just for some intuition so

1222
00:45:58,960 --> 00:46:01,760
in np when we once our knowledge we have

1223
00:46:01,760 --> 00:46:04,160
a simulator that at some point uh

1224
00:46:04,160 --> 00:46:07,200
extracts uh uses an extraction technique

1225
00:46:07,200 --> 00:46:09,440
uh that directly or indirectly uses

1226
00:46:09,440 --> 00:46:11,119
cloning and in the quantum setting we

1227
00:46:11,119 --> 00:46:12,800
cannot use that

1228
00:46:12,800 --> 00:46:13,599
so

1229
00:46:13,599 --> 00:46:15,839
in these two papers from the smelly nana

1230
00:46:15,839 --> 00:46:17,680
and la plata they constructed a no clone

1231
00:46:17,680 --> 00:46:20,079
instruction technique that is compatible

1232
00:46:20,079 --> 00:46:21,280
with um

1233
00:46:21,280 --> 00:46:24,079
quantum protocols and in bs20 they

1234
00:46:24,079 --> 00:46:25,520
actually use that and

1235
00:46:25,520 --> 00:46:27,520
combined it with

1236
00:46:27,520 --> 00:46:29,839
a classical zero knowledge protocol and

1237
00:46:29,839 --> 00:46:31,920
a sigma quantum sigma protocol and they

1238
00:46:31,920 --> 00:46:33,359
called the constant bronze renault's

1239
00:46:33,359 --> 00:46:34,560
argument

1240
00:46:34,560 --> 00:46:36,400
so in our um

1241
00:46:36,400 --> 00:46:38,480
in our paper what we do is we still use

1242
00:46:38,480 --> 00:46:40,720
the same no cloning extraction technique

1243
00:46:40,720 --> 00:46:42,640
but we combined it with our statistical

1244
00:46:42,640 --> 00:46:45,200
wi for the cost for gma and we're able

1245
00:46:45,200 --> 00:46:47,599
to reduce the runs to four and also the

1246
00:46:47,599 --> 00:46:50,240
bonds get statistical as renaults

1247
00:46:50,240 --> 00:46:52,319
i didn't get into any technical details

1248
00:46:52,319 --> 00:46:54,160
but maybe it's best if there's any

1249
00:46:54,160 --> 00:46:55,680
specific questions to answer them

1250
00:46:55,680 --> 00:46:57,839
otherwise you can check the full version

1251
00:46:57,839 --> 00:47:01,440
of the paper on the print and finally uh

1252
00:47:01,440 --> 00:47:03,440
to get more personal i just finished my

1253
00:47:03,440 --> 00:47:06,240
masters so i'm looking for psd position

1254
00:47:06,240 --> 00:47:08,960
if anybody's interested um result yeah

1255
00:47:08,960 --> 00:47:12,880
and that's it i'm open to one person

1256
00:47:18,160 --> 00:47:19,440
all right thank you

1257
00:47:19,440 --> 00:47:22,319
and that was a good idea

1258
00:47:22,319 --> 00:47:24,880
so whoever is he's hiding please

1259
00:47:24,880 --> 00:47:27,119
um okay do we have any questions for

1260
00:47:27,119 --> 00:47:28,480
arrestees

1261
00:47:28,480 --> 00:47:31,040
from the audience

1262
00:47:31,040 --> 00:47:34,319
and how about the chat

1263
00:47:34,319 --> 00:47:38,599
okay it looks like there's no question

1264
00:47:41,040 --> 00:47:42,559
all right guys so we have reached the

1265
00:47:42,559 --> 00:47:45,359
end of tcc i would like to thank uh to

1266
00:47:45,359 --> 00:47:48,000
thank every everybody the

1267
00:47:48,000 --> 00:47:50,240
everybody who attended tcc the people

1268
00:47:50,240 --> 00:47:51,599
who came all the way to around thank you

1269
00:47:51,599 --> 00:47:52,559
so much

1270
00:47:52,559 --> 00:47:54,160
and the people who

1271
00:47:54,160 --> 00:47:56,079
who joined from

1272
00:47:56,079 --> 00:47:58,079
everywhere in the world through zoom and

1273
00:47:58,079 --> 00:48:00,160
a special thanks to kai and kevin thank

1274
00:48:00,160 --> 00:48:02,559
you so much for your help

1275
00:48:02,559 --> 00:48:03,520
and

1276
00:48:03,520 --> 00:48:05,599
that's it um

1277
00:48:05,599 --> 00:48:10,280
see you guys next year this is

1278
00:48:20,160 --> 00:48:22,240
you

