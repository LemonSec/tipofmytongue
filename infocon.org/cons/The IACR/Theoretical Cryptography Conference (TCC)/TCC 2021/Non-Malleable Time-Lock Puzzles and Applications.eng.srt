1
00:00:00,640 --> 00:00:02,320
i'll be talking about non-malleable

2
00:00:02,320 --> 00:00:04,560
timeline puzzles and applications

3
00:00:04,560 --> 00:00:06,240
this is joint work with cody freytag

4
00:00:06,240 --> 00:00:09,599
elanco morgotsky and rafael pass

5
00:00:09,599 --> 00:00:11,280
i want to start with the task of

6
00:00:11,280 --> 00:00:14,320
generating randomness among end people

7
00:00:14,320 --> 00:00:16,320
so the model that we're in and that

8
00:00:16,320 --> 00:00:18,400
we'll use throughout this talk is where

9
00:00:18,400 --> 00:00:20,480
we have many people that have access to

10
00:00:20,480 --> 00:00:22,320
a public bulletin board

11
00:00:22,320 --> 00:00:24,960
and the goal here is for them to agree

12
00:00:24,960 --> 00:00:27,599
on an unbiased coin

13
00:00:27,599 --> 00:00:30,160
this is an incredibly fundamental task

14
00:00:30,160 --> 00:00:33,200
with numerous applications like electing

15
00:00:33,200 --> 00:00:34,960
a committee in a blockchain setting or

16
00:00:34,960 --> 00:00:36,880
playing an online game or digital

17
00:00:36,880 --> 00:00:39,520
lotteries or really any application in a

18
00:00:39,520 --> 00:00:41,920
multi-party setting that requires

19
00:00:41,920 --> 00:00:44,800
trusted randomness or unbiased shared

20
00:00:44,800 --> 00:00:47,279
randomness

21
00:00:47,360 --> 00:00:49,280
as a warm-up let's just consider the

22
00:00:49,280 --> 00:00:51,760
two-party setting so we have alice and

23
00:00:51,760 --> 00:00:54,960
bob and the goal is for them to flip an

24
00:00:54,960 --> 00:00:56,800
unbiased bit

25
00:00:56,800 --> 00:00:59,120
just as a naive attempt just so we're on

26
00:00:59,120 --> 00:01:00,879
the same page

27
00:01:00,879 --> 00:01:02,879
maybe the first thing we might think to

28
00:01:02,879 --> 00:01:05,438
do is just have one party flip a coin

29
00:01:05,438 --> 00:01:07,840
and post it on the bulletin board

30
00:01:07,840 --> 00:01:10,159
obviously this is a problem because then

31
00:01:10,159 --> 00:01:12,640
you have to trust this party alice to

32
00:01:12,640 --> 00:01:15,119
flip an unbiased coin

33
00:01:15,119 --> 00:01:17,439
a better idea is for both players to

34
00:01:17,439 --> 00:01:19,840
flip a coin and then combine them this

35
00:01:19,840 --> 00:01:22,799
is the idea where bob flips a coin alice

36
00:01:22,799 --> 00:01:24,799
has a coin they post on the bulletin

37
00:01:24,799 --> 00:01:25,680
board

38
00:01:25,680 --> 00:01:27,920
and then we combine it using a suitable

39
00:01:27,920 --> 00:01:30,320
function for example by setting the

40
00:01:30,320 --> 00:01:33,119
output to the xor of their input bits of

41
00:01:33,119 --> 00:01:34,560
course though

42
00:01:34,560 --> 00:01:36,640
this is completely insecure

43
00:01:36,640 --> 00:01:39,280
and the reason is because bob is going

44
00:01:39,280 --> 00:01:42,479
second so he can pick his bit b2 based

45
00:01:42,479 --> 00:01:44,960
on b1 because he doesn't have to post it

46
00:01:44,960 --> 00:01:47,840
to the board until after he's seen b1

47
00:01:47,840 --> 00:01:50,000
in particular he can just pick b2 in a

48
00:01:50,000 --> 00:01:52,640
way that completely controls the output

49
00:01:52,640 --> 00:01:55,119
whichever way that he wants

50
00:01:55,119 --> 00:01:57,759
a recent approach by bonaire has done to

51
00:01:57,759 --> 00:01:59,920
mitigate this using what's known as a

52
00:01:59,920 --> 00:02:02,399
slow function just to recap

53
00:02:02,399 --> 00:02:05,040
bob could pick v2 based on b1 because he

54
00:02:05,040 --> 00:02:07,200
could just compute the output in advance

55
00:02:07,200 --> 00:02:09,199
and see if it was an output that he

56
00:02:09,199 --> 00:02:10,160
liked

57
00:02:10,160 --> 00:02:13,280
but instead if we compute the output as

58
00:02:13,280 --> 00:02:16,720
f of b1 b2 for some function that takes

59
00:02:16,720 --> 00:02:18,879
longer than the time that we're allowing

60
00:02:18,879 --> 00:02:20,480
for the protocol

61
00:02:20,480 --> 00:02:23,040
that fixes this problem right because

62
00:02:23,040 --> 00:02:24,640
bob will see b1

63
00:02:24,640 --> 00:02:27,200
he can pick b2 depending on b1 however

64
00:02:27,200 --> 00:02:28,239
he wants

65
00:02:28,239 --> 00:02:30,239
but he won't be able to compute this

66
00:02:30,239 --> 00:02:32,959
output f of b1 b2 during the time of the

67
00:02:32,959 --> 00:02:35,200
protocol the downside though is that

68
00:02:35,200 --> 00:02:37,920
alice will also have to compute f and

69
00:02:37,920 --> 00:02:40,239
and when we scale this up to have many

70
00:02:40,239 --> 00:02:42,239
players all the honest players will have

71
00:02:42,239 --> 00:02:44,319
to compute this slow function to get the

72
00:02:44,319 --> 00:02:47,120
output so this is really not desirable

73
00:02:47,120 --> 00:02:48,800
and i'll also mention that these

74
00:02:48,800 --> 00:02:50,480
approaches usually require some

75
00:02:50,480 --> 00:02:52,720
expensive sort of trusted setup and we

76
00:02:52,720 --> 00:02:54,480
really want to avoid that here for our

77
00:02:54,480 --> 00:02:55,760
application

78
00:02:55,760 --> 00:02:57,680
so the question we're focusing on in

79
00:02:57,680 --> 00:03:00,159
this work is whether we can get security

80
00:03:00,159 --> 00:03:02,879
against malicious adversaries who behave

81
00:03:02,879 --> 00:03:05,040
arbitrarily in the protocol

82
00:03:05,040 --> 00:03:07,920
but keep practical efficiency especially

83
00:03:07,920 --> 00:03:10,400
for the honest parties

84
00:03:10,400 --> 00:03:13,599
so uh one very uh classical way to do

85
00:03:13,599 --> 00:03:15,840
this coin flipping is what's called the

86
00:03:15,840 --> 00:03:18,720
commit and reveal paradigm and the idea

87
00:03:18,720 --> 00:03:21,200
here is for each party to hide their

88
00:03:21,200 --> 00:03:23,920
input so that no party can choose their

89
00:03:23,920 --> 00:03:26,720
value based on someone else's value so

90
00:03:26,720 --> 00:03:29,040
again alice is going to sample b1 bob

91
00:03:29,040 --> 00:03:30,560
will sample b2

92
00:03:30,560 --> 00:03:32,400
and then they're going to commit to

93
00:03:32,400 --> 00:03:33,840
these values

94
00:03:33,840 --> 00:03:36,000
so this commitment is the digital analog

95
00:03:36,000 --> 00:03:39,360
of a sealed envelope it hides the inputs

96
00:03:39,360 --> 00:03:42,720
and binds the sender to that value

97
00:03:42,720 --> 00:03:45,840
so now we can have alice and bob post

98
00:03:45,840 --> 00:03:47,760
their hidden their commitments so their

99
00:03:47,760 --> 00:03:50,239
hidden values on the board and then open

100
00:03:50,239 --> 00:03:52,480
them up and again compute the output as

101
00:03:52,480 --> 00:03:54,560
the xor

102
00:03:54,560 --> 00:03:55,360
so

103
00:03:55,360 --> 00:03:57,920
is this better have we have we overcome

104
00:03:57,920 --> 00:04:01,040
the problems we saw before well

105
00:04:01,040 --> 00:04:02,959
just as a quick sanity check

106
00:04:02,959 --> 00:04:05,280
if everyone behaves honestly the output

107
00:04:05,280 --> 00:04:07,439
is going to be unbiased right because if

108
00:04:07,439 --> 00:04:09,120
everyone is honest the output is just

109
00:04:09,120 --> 00:04:10,959
the xor of uniformly random and

110
00:04:10,959 --> 00:04:13,519
independent bits

111
00:04:13,519 --> 00:04:16,720
the problem which uh comes up here is

112
00:04:16,720 --> 00:04:18,399
that we want security against

113
00:04:18,399 --> 00:04:20,320
adversaries that behave however they

114
00:04:20,320 --> 00:04:21,199
want

115
00:04:21,199 --> 00:04:23,199
and in particular that means that they

116
00:04:23,199 --> 00:04:24,720
can abort

117
00:04:24,720 --> 00:04:26,000
so

118
00:04:26,000 --> 00:04:28,240
if bob here is the adversary and we're

119
00:04:28,240 --> 00:04:30,320
in the stage of the protocol where alice

120
00:04:30,320 --> 00:04:33,040
has just opened up her commitment to b1

121
00:04:33,040 --> 00:04:34,880
bob can look at what the output is going

122
00:04:34,880 --> 00:04:38,400
to be just as before and choose to abort

123
00:04:38,400 --> 00:04:40,000
based on whether or not he likes the

124
00:04:40,000 --> 00:04:42,320
output this is actually a classical

125
00:04:42,320 --> 00:04:44,320
impossibility due to cleave this has

126
00:04:44,320 --> 00:04:46,800
been circumvented in previous work using

127
00:04:46,800 --> 00:04:49,280
timed primitives so replacing the

128
00:04:49,280 --> 00:04:51,360
commitment with a primitive that has to

129
00:04:51,360 --> 00:04:54,160
do with timing and using these sort of

130
00:04:54,160 --> 00:04:56,960
timing assumptions to get around this

131
00:04:56,960 --> 00:04:58,479
aborting attack

132
00:04:58,479 --> 00:04:59,759
that's the line of work we're going to

133
00:04:59,759 --> 00:05:02,639
follow here and we're going to focus on

134
00:05:02,639 --> 00:05:05,039
timelock puzzles so timelock puzzles

135
00:05:05,039 --> 00:05:06,800
were introduced by revis chamier in

136
00:05:06,800 --> 00:05:08,639
wagner in 96

137
00:05:08,639 --> 00:05:09,360
and

138
00:05:09,360 --> 00:05:11,919
the idea of a timeline puzzle is that if

139
00:05:11,919 --> 00:05:14,560
you have some message s you can encode

140
00:05:14,560 --> 00:05:16,880
it into some puzzle

141
00:05:16,880 --> 00:05:19,039
along with a difficulty parameter or

142
00:05:19,039 --> 00:05:20,800
timing perimeter t

143
00:05:20,800 --> 00:05:23,280
such that it will take time t to solve

144
00:05:23,280 --> 00:05:25,440
the puzzle and recover s

145
00:05:25,440 --> 00:05:26,400
this is

146
00:05:26,400 --> 00:05:28,160
you know the idea of encrypting a

147
00:05:28,160 --> 00:05:30,080
message to the future

148
00:05:30,080 --> 00:05:31,680
and crucially

149
00:05:31,680 --> 00:05:34,240
generating this puzzle is really

150
00:05:34,240 --> 00:05:36,639
efficient it doesn't depend on t so no

151
00:05:36,639 --> 00:05:38,320
matter how long you want to hide your

152
00:05:38,320 --> 00:05:40,320
value for you can still generate the

153
00:05:40,320 --> 00:05:42,080
puzzle very efficiently

154
00:05:42,080 --> 00:05:43,759
and the other part of this

155
00:05:43,759 --> 00:05:46,400
is that solving can't be sped up even

156
00:05:46,400 --> 00:05:49,520
using parallelism so even an algorithm

157
00:05:49,520 --> 00:05:50,320
that

158
00:05:50,320 --> 00:05:52,560
has you know some massive parallel

159
00:05:52,560 --> 00:05:54,320
computing power

160
00:05:54,320 --> 00:05:56,800
it will still take them time t and that

161
00:05:56,800 --> 00:05:58,800
is really nice in applications like

162
00:05:58,800 --> 00:06:01,520
blockchains where we are uh considering

163
00:06:01,520 --> 00:06:03,600
adversaries that might have a lot of

164
00:06:03,600 --> 00:06:04,800
parallelism

165
00:06:04,800 --> 00:06:06,000
and there's a very well-known

166
00:06:06,000 --> 00:06:08,080
construction of time-lapse puzzles

167
00:06:08,080 --> 00:06:09,440
and it's based on what's called the

168
00:06:09,440 --> 00:06:11,680
repeated squaring assumption i'm gonna

169
00:06:11,680 --> 00:06:13,840
define this a little bit uh later more

170
00:06:13,840 --> 00:06:16,160
formally but it basically says that

171
00:06:16,160 --> 00:06:18,240
repeated squaring in a group of unknown

172
00:06:18,240 --> 00:06:20,400
order cannot be sped up

173
00:06:20,400 --> 00:06:21,280
and

174
00:06:21,280 --> 00:06:24,479
again sped up even with parallelism

175
00:06:24,479 --> 00:06:26,319
and lastly i'll mention that one really

176
00:06:26,319 --> 00:06:27,840
good way to think about a timeline

177
00:06:27,840 --> 00:06:30,400
puzzle is just as a fine grain analog of

178
00:06:30,400 --> 00:06:33,520
a commitment so hiding only holds until

179
00:06:33,520 --> 00:06:34,560
time t

180
00:06:34,560 --> 00:06:37,759
but it's fully binding

181
00:06:38,319 --> 00:06:39,440
okay

182
00:06:39,440 --> 00:06:42,080
back to our application remember we're

183
00:06:42,080 --> 00:06:44,560
trying to prevent uh an aborting

184
00:06:44,560 --> 00:06:46,720
adversary from

185
00:06:46,720 --> 00:06:49,120
from biasing the output of the protocol

186
00:06:49,120 --> 00:06:50,960
so what we're going to do here is

187
00:06:50,960 --> 00:06:52,560
replace the commitments that we have

188
00:06:52,560 --> 00:06:55,280
before with timelock puzzles

189
00:06:55,280 --> 00:06:57,919
as a caveat since we need some like

190
00:06:57,919 --> 00:07:00,240
difficulty for our timeline puzzles our

191
00:07:00,240 --> 00:07:01,840
protocol is going to have some time

192
00:07:01,840 --> 00:07:04,160
parameter t so we're sort of assuming

193
00:07:04,160 --> 00:07:06,080
that all the parties can keep track of

194
00:07:06,080 --> 00:07:08,000
elapsed time

195
00:07:08,000 --> 00:07:08,800
so

196
00:07:08,800 --> 00:07:11,360
alice posts a puzzle of b1

197
00:07:11,360 --> 00:07:13,919
bob posts a puzzle of b2

198
00:07:13,919 --> 00:07:14,720
and

199
00:07:14,720 --> 00:07:16,560
if they're both honest and they reveal

200
00:07:16,560 --> 00:07:18,240
b1 and b2

201
00:07:18,240 --> 00:07:20,720
we can just compute the output as before

202
00:07:20,720 --> 00:07:23,520
but if any adversary aborts and refuses

203
00:07:23,520 --> 00:07:25,039
to open their puzzle

204
00:07:25,039 --> 00:07:26,960
the advantage of timelock puzzles is

205
00:07:26,960 --> 00:07:29,120
that now the honest parties can just

206
00:07:29,120 --> 00:07:31,680
solve their puzzles in time t solve the

207
00:07:31,680 --> 00:07:35,919
uh the unopened puzzles in time t

208
00:07:35,919 --> 00:07:38,080
and the really nice efficiency property

209
00:07:38,080 --> 00:07:40,160
here is what we call optimistic

210
00:07:40,160 --> 00:07:42,400
efficiency which says that if nobody

211
00:07:42,400 --> 00:07:44,800
aborts the protocol is fully efficient

212
00:07:44,800 --> 00:07:45,680
right

213
00:07:45,680 --> 00:07:47,599
generating a puzzle is really quick

214
00:07:47,599 --> 00:07:49,520
opening the puzzle is just posting the

215
00:07:49,520 --> 00:07:51,680
opening that you already have and then

216
00:07:51,680 --> 00:07:53,440
computing the xor is obviously very

217
00:07:53,440 --> 00:07:55,520
efficient so

218
00:07:55,520 --> 00:07:58,080
this is really desirable because in a

219
00:07:58,080 --> 00:08:00,000
setting where everyone is honest we get

220
00:08:00,000 --> 00:08:02,400
the full efficiency benefits

221
00:08:02,400 --> 00:08:04,479
but if there's a malicious party that

222
00:08:04,479 --> 00:08:05,520
aborts

223
00:08:05,520 --> 00:08:07,599
we sort of have a fallback option where

224
00:08:07,599 --> 00:08:10,720
we then have to wait uh to spend time t

225
00:08:10,720 --> 00:08:12,879
solving their puzzle

226
00:08:12,879 --> 00:08:15,520
okay so does this give us security

227
00:08:15,520 --> 00:08:18,240
against fully malicious adversaries

228
00:08:18,240 --> 00:08:20,160
it does prevent the aborting problem as

229
00:08:20,160 --> 00:08:22,879
i said the only sort of leftover attack

230
00:08:22,879 --> 00:08:25,120
that we have to think about is whether

231
00:08:25,120 --> 00:08:27,520
the adversary can pick b2 in a way

232
00:08:27,520 --> 00:08:29,039
that's dishonest

233
00:08:29,039 --> 00:08:30,960
it's kind of easy to see that as long as

234
00:08:30,960 --> 00:08:33,519
b2 doesn't depend on b1

235
00:08:33,519 --> 00:08:35,679
in the end of the day b1 will be

236
00:08:35,679 --> 00:08:37,919
uniformly random sample by an honest

237
00:08:37,919 --> 00:08:40,880
party and independent of the other

238
00:08:40,880 --> 00:08:43,440
values as long as b2 doesn't depend on

239
00:08:43,440 --> 00:08:44,560
b1

240
00:08:44,560 --> 00:08:46,959
so let's see how this works

241
00:08:46,959 --> 00:08:49,760
so the adversary is given a puzzle to b1

242
00:08:49,760 --> 00:08:51,839
but he doesn't know b1

243
00:08:51,839 --> 00:08:54,480
so he can't directly choose b2 based on

244
00:08:54,480 --> 00:08:57,040
b1 like we saw in earlier iterations of

245
00:08:57,040 --> 00:08:58,240
this protocol

246
00:08:58,240 --> 00:09:01,200
but he still has this puzzle he still

247
00:09:01,200 --> 00:09:03,839
has something that depends on b1

248
00:09:03,839 --> 00:09:06,480
so it's possible that he could use it to

249
00:09:06,480 --> 00:09:08,640
create a puzzle to a value that's

250
00:09:08,640 --> 00:09:11,200
correlated with b1 somehow

251
00:09:11,200 --> 00:09:13,440
the trivial sort of attack of this form

252
00:09:13,440 --> 00:09:15,440
is just copying the puzzle right he

253
00:09:15,440 --> 00:09:17,360
could always do that but we can disallow

254
00:09:17,360 --> 00:09:18,080
that

255
00:09:18,080 --> 00:09:21,120
it's as easy to do as it is to catch

256
00:09:21,120 --> 00:09:24,080
but in general these attacks may be

257
00:09:24,080 --> 00:09:26,240
complex and arbitrary

258
00:09:26,240 --> 00:09:28,560
if we look at the classical construction

259
00:09:28,560 --> 00:09:30,880
of time-lapse puzzles they are actually

260
00:09:30,880 --> 00:09:33,519
trivially malleable because the

261
00:09:33,519 --> 00:09:35,920
the message b1 is basically part of a

262
00:09:35,920 --> 00:09:37,360
one-time pad

263
00:09:37,360 --> 00:09:38,160
and

264
00:09:38,160 --> 00:09:40,160
so with that time-lapse puzzle an

265
00:09:40,160 --> 00:09:43,279
adversary could take the puzzle of b1

266
00:09:43,279 --> 00:09:45,920
compute a puzzle to one plus b1 without

267
00:09:45,920 --> 00:09:47,680
solving it or spending time t or

268
00:09:47,680 --> 00:09:48,720
anything

269
00:09:48,720 --> 00:09:51,200
and then the puzz the output is clearly

270
00:09:51,200 --> 00:09:52,640
biased to one

271
00:09:52,640 --> 00:09:54,560
yeah so like i said we need to prevent

272
00:09:54,560 --> 00:09:56,959
all possible ways to correlate these two

273
00:09:56,959 --> 00:09:58,000
values

274
00:09:58,000 --> 00:09:59,560
and this is an area called

275
00:09:59,560 --> 00:10:01,680
non-malleability and

276
00:10:01,680 --> 00:10:03,519
this is what we focus on in this work

277
00:10:03,519 --> 00:10:05,839
which is formalizing and constructing

278
00:10:05,839 --> 00:10:06,959
time-lapse puzzles that are

279
00:10:06,959 --> 00:10:08,800
non-malleable

280
00:10:08,800 --> 00:10:12,320
so let me tell you about our results

281
00:10:12,320 --> 00:10:14,720
so as our first two results we give

282
00:10:14,720 --> 00:10:16,720
constructions of non-malleable timeline

283
00:10:16,720 --> 00:10:19,519
puzzles and we give two constructions in

284
00:10:19,519 --> 00:10:20,959
different settings

285
00:10:20,959 --> 00:10:23,279
so our first construction is incredibly

286
00:10:23,279 --> 00:10:24,480
efficient

287
00:10:24,480 --> 00:10:26,720
and in the random oracle model

288
00:10:26,720 --> 00:10:28,959
but it only relies on any timeline

289
00:10:28,959 --> 00:10:30,839
puzzle

290
00:10:30,839 --> 00:10:33,360
generically our second construction is

291
00:10:33,360 --> 00:10:34,720
in the plane model

292
00:10:34,720 --> 00:10:36,000
but it relies on stronger

293
00:10:36,000 --> 00:10:38,160
sub-exponential style assumptions so

294
00:10:38,160 --> 00:10:39,839
it's kind of a trade-off between what

295
00:10:39,839 --> 00:10:41,760
model you want and how much efficiency

296
00:10:41,760 --> 00:10:42,800
you want

297
00:10:42,800 --> 00:10:44,480
and uh so those are our two

298
00:10:44,480 --> 00:10:46,720
constructions and

299
00:10:46,720 --> 00:10:49,120
it's important to note that not only do

300
00:10:49,120 --> 00:10:51,600
we get non-malleability but we actually

301
00:10:51,600 --> 00:10:53,760
get a variant of what's known as

302
00:10:53,760 --> 00:10:55,839
concurrent non-malleability i'm going to

303
00:10:55,839 --> 00:10:57,440
talk about this a little bit later but

304
00:10:57,440 --> 00:11:00,000
it's crucial to have multi-party coin

305
00:11:00,000 --> 00:11:02,240
flipping instead of just two-party coin

306
00:11:02,240 --> 00:11:03,279
flipping

307
00:11:03,279 --> 00:11:05,600
and either of our constructions can be

308
00:11:05,600 --> 00:11:07,760
used to get fair multi-party coin

309
00:11:07,760 --> 00:11:10,640
flipping and auction protocols

310
00:11:10,640 --> 00:11:12,079
uh with different guarantees depending

311
00:11:12,079 --> 00:11:14,079
on the construction

312
00:11:14,079 --> 00:11:15,440
so let me tell you a little bit more

313
00:11:15,440 --> 00:11:17,360
about these two constructions

314
00:11:17,360 --> 00:11:20,000
so both of our constructions have no crs

315
00:11:20,000 --> 00:11:21,839
or anything no trusted setup which is

316
00:11:21,839 --> 00:11:23,040
really nice

317
00:11:23,040 --> 00:11:24,720
our first construction

318
00:11:24,720 --> 00:11:26,399
i i mentioned it's in the random oracle

319
00:11:26,399 --> 00:11:27,279
model

320
00:11:27,279 --> 00:11:29,519
so it's actually in this uh variant of

321
00:11:29,519 --> 00:11:30,959
the random oracle model called the

322
00:11:30,959 --> 00:11:33,200
auxiliary input random oracle model

323
00:11:33,200 --> 00:11:35,120
where security holds even when the

324
00:11:35,120 --> 00:11:37,120
adversary has some prior knowledge about

325
00:11:37,120 --> 00:11:39,279
the oracle and this is really nice

326
00:11:39,279 --> 00:11:41,519
especially in a practical setting where

327
00:11:41,519 --> 00:11:43,440
instead of a random oracle we have some

328
00:11:43,440 --> 00:11:45,279
some fixed function right it's

329
00:11:45,279 --> 00:11:47,279
reasonable to assume that an attacker

330
00:11:47,279 --> 00:11:49,760
might you know have pre-computed

331
00:11:49,760 --> 00:11:52,000
information about that function so

332
00:11:52,000 --> 00:11:54,240
that's the model that we're in

333
00:11:54,240 --> 00:11:55,680
and in contrast in our second

334
00:11:55,680 --> 00:11:57,760
construction we're in the plane model

335
00:11:57,760 --> 00:11:59,920
but we need to assume sub-exponentially

336
00:11:59,920 --> 00:12:00,959
secure

337
00:12:00,959 --> 00:12:03,760
uh a a bunch of cryptographic primitives

338
00:12:03,760 --> 00:12:05,839
that are sub-exponentially secure

339
00:12:05,839 --> 00:12:07,600
and this second construction is actually

340
00:12:07,600 --> 00:12:09,200
based on the non-malleable code of

341
00:12:09,200 --> 00:12:12,399
document soled komargotsky and pass from

342
00:12:12,399 --> 00:12:13,519
last year

343
00:12:13,519 --> 00:12:15,200
and basically what we do in the second

344
00:12:15,200 --> 00:12:16,880
construction is adapt their

345
00:12:16,880 --> 00:12:19,440
non-malleable code to our setting which

346
00:12:19,440 --> 00:12:22,720
involves concurrency and handling a

347
00:12:22,720 --> 00:12:24,800
larger set of attacks in this talk we're

348
00:12:24,800 --> 00:12:26,480
mostly going to be focusing on this

349
00:12:26,480 --> 00:12:28,079
first construction

350
00:12:28,079 --> 00:12:30,160
and uh what's really nice about this

351
00:12:30,160 --> 00:12:31,839
construction is that when you

352
00:12:31,839 --> 00:12:33,839
instantiate the timelock puzzle the

353
00:12:33,839 --> 00:12:35,519
underlying timelock puzzle with the

354
00:12:35,519 --> 00:12:37,360
repeated squaring assumption you get

355
00:12:37,360 --> 00:12:39,200
something super efficient

356
00:12:39,200 --> 00:12:42,399
generating a puzzle in our non-malleable

357
00:12:42,399 --> 00:12:45,120
talmud puzzle requires just one random

358
00:12:45,120 --> 00:12:46,880
oracle call and a few modular

359
00:12:46,880 --> 00:12:49,519
exponentiations to generate the

360
00:12:49,519 --> 00:12:50,880
underlying puzzle

361
00:12:50,880 --> 00:12:53,200
so it's really nice really efficient

362
00:12:53,200 --> 00:12:54,720
from one assumption

363
00:12:54,720 --> 00:12:55,839
um

364
00:12:55,839 --> 00:12:57,760
and in the random world model

365
00:12:57,760 --> 00:13:00,079
okay so let me tell you a little bit

366
00:13:00,079 --> 00:13:01,760
more about what we get in our coin

367
00:13:01,760 --> 00:13:03,440
flipping protocol that i alluded to

368
00:13:03,440 --> 00:13:04,480
earlier

369
00:13:04,480 --> 00:13:07,040
so this is what happens if you take our

370
00:13:07,040 --> 00:13:09,040
first construction instantiate it with

371
00:13:09,040 --> 00:13:11,279
the repeating squaring assumption

372
00:13:11,279 --> 00:13:12,800
we get a

373
00:13:12,800 --> 00:13:15,040
a multi-party coin flipping protocol

374
00:13:15,040 --> 00:13:18,000
with the following guarantees so first

375
00:13:18,000 --> 00:13:19,519
we get fairness

376
00:13:19,519 --> 00:13:21,200
this is what i spent the whole intro

377
00:13:21,200 --> 00:13:22,480
talking about

378
00:13:22,480 --> 00:13:24,800
saying that no malicious party can bias

379
00:13:24,800 --> 00:13:28,079
the output even if they control all but

380
00:13:28,079 --> 00:13:30,639
one party

381
00:13:30,639 --> 00:13:33,120
we also get optimistic efficiency so if

382
00:13:33,120 --> 00:13:34,880
everyone is honest the protocol is two

383
00:13:34,880 --> 00:13:37,200
rounds very efficient no solving any

384
00:13:37,200 --> 00:13:38,320
puzzles

385
00:13:38,320 --> 00:13:40,560
and lastly we get what we call public

386
00:13:40,560 --> 00:13:43,600
verifiability which is that actually if

387
00:13:43,600 --> 00:13:46,240
some party refuses to open their puzzle

388
00:13:46,240 --> 00:13:48,320
only one honest party needs to solve it

389
00:13:48,320 --> 00:13:49,920
it's not the case that everyone needs to

390
00:13:49,920 --> 00:13:50,880
solve it

391
00:13:50,880 --> 00:13:52,959
because in our construction we get a

392
00:13:52,959 --> 00:13:55,279
time-lapse puzzle where when you solve

393
00:13:55,279 --> 00:13:57,440
it you get a proof certifying the

394
00:13:57,440 --> 00:13:58,560
solution

395
00:13:58,560 --> 00:13:59,920
and this means that the output of the

396
00:13:59,920 --> 00:14:01,440
protocol can also be efficiently

397
00:14:01,440 --> 00:14:04,079
verified so even someone who is not

398
00:14:04,079 --> 00:14:06,079
participating in the protocol but comes

399
00:14:06,079 --> 00:14:08,399
later and sees the bulletin board can

400
00:14:08,399 --> 00:14:10,959
quickly verify the output of the coin

401
00:14:10,959 --> 00:14:12,399
flip

402
00:14:12,399 --> 00:14:14,399
and i'll mention that this is the first

403
00:14:14,399 --> 00:14:16,560
protocol under any assumption that

404
00:14:16,560 --> 00:14:20,560
satisfies that gives these guarantees

405
00:14:21,120 --> 00:14:22,639
okay so i've been talking about this

406
00:14:22,639 --> 00:14:24,560
repeated squaring assumption let me

407
00:14:24,560 --> 00:14:26,639
define it a little bit more formally so

408
00:14:26,639 --> 00:14:28,160
the repeated squaring assumption in an

409
00:14:28,160 --> 00:14:29,360
rsa group

410
00:14:29,360 --> 00:14:31,440
says that for any t

411
00:14:31,440 --> 00:14:34,720
the fastest way to do t repeated

412
00:14:34,720 --> 00:14:36,320
squarings

413
00:14:36,320 --> 00:14:39,519
in the group is to square t times

414
00:14:39,519 --> 00:14:41,680
so the fastest way to compute g to the

415
00:14:41,680 --> 00:14:43,040
two to the t

416
00:14:43,040 --> 00:14:46,000
is to can repeatedly square g

417
00:14:46,000 --> 00:14:48,000
pictorially what this looks like is if

418
00:14:48,000 --> 00:14:49,920
you have some element g and you want to

419
00:14:49,920 --> 00:14:52,320
get g to the two of the t mod n

420
00:14:52,320 --> 00:14:54,320
um the fastest way to do this is this

421
00:14:54,320 --> 00:14:56,639
repeated squaring and there are no

422
00:14:56,639 --> 00:14:58,320
shortcuts

423
00:14:58,320 --> 00:15:00,639
and it's really nice because this

424
00:15:00,639 --> 00:15:03,120
assumption has been studied for over 20

425
00:15:03,120 --> 00:15:05,279
years there are no known attacks

426
00:15:05,279 --> 00:15:07,600
and it's used in a ton of applications

427
00:15:07,600 --> 00:15:09,600
especially recently like verifiable

428
00:15:09,600 --> 00:15:11,839
delay functions randomness begins and

429
00:15:11,839 --> 00:15:13,600
many others

430
00:15:13,600 --> 00:15:14,399
and

431
00:15:14,399 --> 00:15:16,000
in particular this gives a very

432
00:15:16,000 --> 00:15:18,320
efficient timelock puzzle

433
00:15:18,320 --> 00:15:19,120
where

434
00:15:19,120 --> 00:15:22,399
uh the timelock puzzle samples the an

435
00:15:22,399 --> 00:15:25,440
element g and the group

436
00:15:25,440 --> 00:15:27,199
parametrized by n which is the product

437
00:15:27,199 --> 00:15:30,079
of two primes and it basically computes

438
00:15:30,079 --> 00:15:33,040
a one time pad of the secret s with g to

439
00:15:33,040 --> 00:15:34,720
the two to the t

440
00:15:34,720 --> 00:15:36,240
and the reason this gives a time of

441
00:15:36,240 --> 00:15:38,560
puzzle is because if you have these two

442
00:15:38,560 --> 00:15:39,839
primes

443
00:15:39,839 --> 00:15:41,680
whose product is n

444
00:15:41,680 --> 00:15:43,680
you can compute g to the two to the t

445
00:15:43,680 --> 00:15:45,199
efficiently

446
00:15:45,199 --> 00:15:47,519
but someone who does not have these two

447
00:15:47,519 --> 00:15:50,000
primes and only has g to the two to the

448
00:15:50,000 --> 00:15:53,279
t x sword with s

449
00:15:53,279 --> 00:15:55,759
has to recompute it g to the two of the

450
00:15:55,759 --> 00:15:58,399
t by repeatedly squaring t times

451
00:15:58,399 --> 00:16:01,040
following this assumption um to to

452
00:16:01,040 --> 00:16:03,600
recover s

453
00:16:03,600 --> 00:16:04,320
so

454
00:16:04,320 --> 00:16:05,519
that's repeated squaring assumption

455
00:16:05,519 --> 00:16:07,680
that's the main assumption underlying

456
00:16:07,680 --> 00:16:10,320
classical time-up puzzles and yeah

457
00:16:10,320 --> 00:16:12,320
that's what we're relying on

458
00:16:12,320 --> 00:16:13,360
so

459
00:16:13,360 --> 00:16:16,000
for this talk i'm going to do the

460
00:16:16,000 --> 00:16:17,440
following

461
00:16:17,440 --> 00:16:19,120
so first i'm going to give you a little

462
00:16:19,120 --> 00:16:20,959
bit of a more formal definition of

463
00:16:20,959 --> 00:16:23,519
non-malleability

464
00:16:23,519 --> 00:16:25,440
then i'm going to show you our main

465
00:16:25,440 --> 00:16:27,759
construction which is the non-validable

466
00:16:27,759 --> 00:16:29,839
timeline puzzles from plane timeline

467
00:16:29,839 --> 00:16:31,040
puzzles

468
00:16:31,040 --> 00:16:32,880
and finally i'm going to put everything

469
00:16:32,880 --> 00:16:34,720
together and tell you our multi-party

470
00:16:34,720 --> 00:16:36,720
coin clipping protocol how we achieve

471
00:16:36,720 --> 00:16:38,959
those properties and

472
00:16:38,959 --> 00:16:40,639
and wrap up

473
00:16:40,639 --> 00:16:41,440
okay

474
00:16:41,440 --> 00:16:44,480
so non-malleability

475
00:16:44,480 --> 00:16:46,079
the notion of non-malleability is

476
00:16:46,079 --> 00:16:47,839
concerned with a man in the middle

477
00:16:47,839 --> 00:16:50,000
adversary in general what it says is

478
00:16:50,000 --> 00:16:52,800
that no man in the middle adversary can

479
00:16:52,800 --> 00:16:55,440
transform a puzzle for one value into

480
00:16:55,440 --> 00:16:58,240
one for a related value

481
00:16:58,240 --> 00:16:59,839
you can think that the man in the middle

482
00:16:59,839 --> 00:17:02,560
adversary gets some time on puzzle to

483
00:17:02,560 --> 00:17:05,839
some value s and his goal is to output a

484
00:17:05,839 --> 00:17:08,880
timeline puzzle to s prime in a way that

485
00:17:08,880 --> 00:17:11,679
s and s prime uh his goal is to make s

486
00:17:11,679 --> 00:17:14,079
and s prime related so non-malleability

487
00:17:14,079 --> 00:17:16,799
says that they are not related we do

488
00:17:16,799 --> 00:17:18,799
have to disallow copying because that

489
00:17:18,799 --> 00:17:20,799
would be a trivial attack that would

490
00:17:20,799 --> 00:17:22,959
break down malleability so we don't

491
00:17:22,959 --> 00:17:24,959
allow the adversary to copy

492
00:17:24,959 --> 00:17:27,119
or rather if it does we replace its

493
00:17:27,119 --> 00:17:28,960
output with a dummy value

494
00:17:28,960 --> 00:17:29,840
and

495
00:17:29,840 --> 00:17:32,000
we also need to restrict to adversaries

496
00:17:32,000 --> 00:17:34,559
that run in parallel time t

497
00:17:34,559 --> 00:17:36,240
right because an adversary that could

498
00:17:36,240 --> 00:17:38,960
solve the puzzle could obviously solve

499
00:17:38,960 --> 00:17:41,039
it get s and then

500
00:17:41,039 --> 00:17:42,640
generate a puzzle to a value depending

501
00:17:42,640 --> 00:17:44,640
on s or just re-randomize the puzzle

502
00:17:44,640 --> 00:17:46,559
even those are sort of

503
00:17:46,559 --> 00:17:48,960
the two uh restrictions we were we

504
00:17:48,960 --> 00:17:51,360
placed on the adversary and this is very

505
00:17:51,360 --> 00:17:53,039
related to non-malleability for

506
00:17:53,039 --> 00:17:54,160
commitments

507
00:17:54,160 --> 00:17:56,640
so just to sort of see why this is

508
00:17:56,640 --> 00:17:59,679
related to um the setting of coin

509
00:17:59,679 --> 00:18:01,280
flipping where there was no man in the

510
00:18:01,280 --> 00:18:03,679
middle adversary uh the idea there is

511
00:18:03,679 --> 00:18:05,440
just that the adversary sees these

512
00:18:05,440 --> 00:18:07,919
puzzles on the board and so his goal is

513
00:18:07,919 --> 00:18:10,240
to maul them into a new puzzle that's

514
00:18:10,240 --> 00:18:12,880
related so that's where the man in the

515
00:18:12,880 --> 00:18:16,480
middle is sort of coming in there

516
00:18:16,559 --> 00:18:17,600
okay

517
00:18:17,600 --> 00:18:19,520
next i'm going to tell you about our

518
00:18:19,520 --> 00:18:22,000
transformation so how we get

519
00:18:22,000 --> 00:18:24,320
non-malleable time-lapse puzzles under

520
00:18:24,320 --> 00:18:26,720
that definition that i just said

521
00:18:26,720 --> 00:18:28,240
so we're going to start with any

522
00:18:28,240 --> 00:18:30,080
timeline puzzle and we're going to

523
00:18:30,080 --> 00:18:32,400
assume access to a random oracle so to

524
00:18:32,400 --> 00:18:35,120
generate a puzzle for some value s

525
00:18:35,120 --> 00:18:36,799
and with randomness r

526
00:18:36,799 --> 00:18:38,240
first we're going to query the random

527
00:18:38,240 --> 00:18:42,080
oracle to get some randomness r prime

528
00:18:42,080 --> 00:18:44,080
then we're gonna use the underlying

529
00:18:44,080 --> 00:18:47,440
timeline puzzle to generate a puzzle for

530
00:18:47,440 --> 00:18:50,640
uh our secret and our randomness using

531
00:18:50,640 --> 00:18:52,559
the randomness derived from the random

532
00:18:52,559 --> 00:18:54,240
oracle

533
00:18:54,240 --> 00:18:56,640
so pictorially it looks like this where

534
00:18:56,640 --> 00:18:59,120
we're given sr as input

535
00:18:59,120 --> 00:19:01,440
we use them to get this randomness r

536
00:19:01,440 --> 00:19:02,320
prime

537
00:19:02,320 --> 00:19:05,440
and then we combine them together to get

538
00:19:05,440 --> 00:19:07,840
a time lock puzzle for those of you who

539
00:19:07,840 --> 00:19:09,919
are familiar this construction is

540
00:19:09,919 --> 00:19:11,919
reminiscent of the fujisaki okamoto

541
00:19:11,919 --> 00:19:14,559
transformation for turning a cpa secure

542
00:19:14,559 --> 00:19:18,000
encryption scheme into a cca secure one

543
00:19:18,000 --> 00:19:20,160
but the analysis ends up being in our

544
00:19:20,160 --> 00:19:22,880
case uh quite different and non-trivial

545
00:19:22,880 --> 00:19:24,160
okay anyways going back to our

546
00:19:24,160 --> 00:19:26,240
transformation so uh this is how we

547
00:19:26,240 --> 00:19:28,640
generate the puzzle to solve the puzzle

548
00:19:28,640 --> 00:19:30,960
we solve the underlying puzzle to get

549
00:19:30,960 --> 00:19:33,520
this secret s and randomness r

550
00:19:33,520 --> 00:19:36,240
and then we check that the puzzle is uh

551
00:19:36,240 --> 00:19:38,960
indeed valid so because we recovered

552
00:19:38,960 --> 00:19:41,120
this randomness r that we started with

553
00:19:41,120 --> 00:19:43,120
we can actually check that our puzzle

554
00:19:43,120 --> 00:19:44,640
was generated

555
00:19:44,640 --> 00:19:46,080
um honestly

556
00:19:46,080 --> 00:19:48,880
this is only true if we're solving of a

557
00:19:48,880 --> 00:19:51,039
valid puzzle but it will turn out to be

558
00:19:51,039 --> 00:19:52,799
really useful later on

559
00:19:52,799 --> 00:19:55,360
uh but anyways that's it aside um this

560
00:19:55,360 --> 00:19:57,120
is our transformation it's incredibly

561
00:19:57,120 --> 00:19:59,840
simple query the random oracle

562
00:19:59,840 --> 00:20:01,840
and then generate underlying puzzle and

563
00:20:01,840 --> 00:20:04,080
then to solve solve the puzzle and check

564
00:20:04,080 --> 00:20:07,120
that it uh that it was generated

565
00:20:07,120 --> 00:20:08,240
honestly

566
00:20:08,240 --> 00:20:10,720
as some intuition on why this is not

567
00:20:10,720 --> 00:20:12,159
malleable

568
00:20:12,159 --> 00:20:14,000
recall that in malleability the

569
00:20:14,000 --> 00:20:17,440
adversary receives a puzzle for us

570
00:20:17,440 --> 00:20:18,799
so we have our man in the middle

571
00:20:18,799 --> 00:20:22,080
adversary here he gets some puzzle for s

572
00:20:22,080 --> 00:20:24,400
generally with randomness r i'm denoting

573
00:20:24,400 --> 00:20:27,600
it uh as a puzzle for sr using

574
00:20:27,600 --> 00:20:30,000
randomness of sr and his goal is to

575
00:20:30,000 --> 00:20:32,240
generate some new puzzle

576
00:20:32,240 --> 00:20:33,760
for some

577
00:20:33,760 --> 00:20:36,799
related value s prime using some other

578
00:20:36,799 --> 00:20:39,039
randomness r prime

579
00:20:39,039 --> 00:20:40,880
so

580
00:20:40,880 --> 00:20:42,480
at a high level

581
00:20:42,480 --> 00:20:46,240
since uh this new puzzle depends on

582
00:20:46,240 --> 00:20:49,520
the random oracle evaluated on s prime

583
00:20:49,520 --> 00:20:52,159
it seems that the only way to generate a

584
00:20:52,159 --> 00:20:55,120
valid puzzle first for s prime is to

585
00:20:55,120 --> 00:20:57,440
know s prime

586
00:20:57,440 --> 00:21:00,240
but if s prime is related to s

587
00:21:00,240 --> 00:21:01,679
then the only way to generate a valid

588
00:21:01,679 --> 00:21:05,200
puzzle for s prime is to know s

589
00:21:05,360 --> 00:21:06,799
but this breaks the hiding of our

590
00:21:06,799 --> 00:21:08,159
timeline puzzle

591
00:21:08,159 --> 00:21:10,320
and the hiding of our puzzle follows

592
00:21:10,320 --> 00:21:12,159
from the hiding of the underlying one

593
00:21:12,159 --> 00:21:14,480
this is obviously very high-level proof

594
00:21:14,480 --> 00:21:19,600
sketch for details see the paper

595
00:21:19,679 --> 00:21:22,960
okay so that is our construction and now

596
00:21:22,960 --> 00:21:24,880
i'm going to move on to the last section

597
00:21:24,880 --> 00:21:26,559
of the talk which is

598
00:21:26,559 --> 00:21:28,320
putting everything together for our coin

599
00:21:28,320 --> 00:21:30,480
flipping protocol

600
00:21:30,480 --> 00:21:32,720
so recall that what we want is an

601
00:21:32,720 --> 00:21:34,799
unbounded number of participants

602
00:21:34,799 --> 00:21:37,520
up to n minus one corrupted parties and

603
00:21:37,520 --> 00:21:40,960
we're trying to flip an unbiased coin

604
00:21:40,960 --> 00:21:43,120
so all of our parties uh flip their

605
00:21:43,120 --> 00:21:44,559
initial values

606
00:21:44,559 --> 00:21:45,919
and following what we talked about

607
00:21:45,919 --> 00:21:47,440
earlier they all post them on the

608
00:21:47,440 --> 00:21:49,679
bulletin board and then open them

609
00:21:49,679 --> 00:21:51,679
they can solve any unopened ones as we

610
00:21:51,679 --> 00:21:53,520
talked about and then the output is just

611
00:21:53,520 --> 00:21:55,760
going to be the xor of all the opened

612
00:21:55,760 --> 00:21:57,200
values

613
00:21:57,200 --> 00:21:59,360
so recall that what we want is these

614
00:21:59,360 --> 00:22:00,880
three properties

615
00:22:00,880 --> 00:22:02,240
so i'm going to talk briefly about how

616
00:22:02,240 --> 00:22:03,919
we get each one of them

617
00:22:03,919 --> 00:22:06,159
so optimistic efficiency i already

618
00:22:06,159 --> 00:22:08,799
talked about it if everyone is honest we

619
00:22:08,799 --> 00:22:11,120
don't need to solve any unopened puzzles

620
00:22:11,120 --> 00:22:13,200
because every puzzle will be open so the

621
00:22:13,200 --> 00:22:14,960
protocol will just take two rounds and

622
00:22:14,960 --> 00:22:16,400
terminate

623
00:22:16,400 --> 00:22:18,640
yeah okay so next

624
00:22:18,640 --> 00:22:21,440
to get fairness so recall that fairness

625
00:22:21,440 --> 00:22:25,520
says that nobody can bias that output

626
00:22:25,520 --> 00:22:27,440
so let's think about fairness in the

627
00:22:27,440 --> 00:22:29,280
beginning of this talk i talked about

628
00:22:29,280 --> 00:22:31,919
how we need our timelock puzzles to be

629
00:22:31,919 --> 00:22:34,559
non-malleable so that we can get this

630
00:22:34,559 --> 00:22:37,120
fairness and avoid mauling attacks

631
00:22:37,120 --> 00:22:39,120
and non-malleability as i've discussed

632
00:22:39,120 --> 00:22:42,000
it so far says that given a puzzle for s

633
00:22:42,000 --> 00:22:44,000
the adversary can't generate one for a

634
00:22:44,000 --> 00:22:47,280
related value s prime

635
00:22:47,280 --> 00:22:48,080
but

636
00:22:48,080 --> 00:22:49,840
in our coin flipping protocol the

637
00:22:49,840 --> 00:22:52,640
adversary receives many puzzles not just

638
00:22:52,640 --> 00:22:55,840
this one so it turns out that here we

639
00:22:55,840 --> 00:22:57,840
actually need what's called concurrent

640
00:22:57,840 --> 00:22:59,280
non-malleability

641
00:22:59,280 --> 00:23:01,520
which says that an adversary who

642
00:23:01,520 --> 00:23:03,760
receives many puzzles on the left

643
00:23:03,760 --> 00:23:05,840
can't generate many puzzles on the right

644
00:23:05,840 --> 00:23:08,159
to related values

645
00:23:08,159 --> 00:23:09,679
now this might seem just like a

646
00:23:09,679 --> 00:23:12,320
technicality it received one before now

647
00:23:12,320 --> 00:23:14,799
it's receiving many but actually this is

648
00:23:14,799 --> 00:23:17,200
inherently a more complex notion this in

649
00:23:17,200 --> 00:23:19,280
the setting of concurrency

650
00:23:19,280 --> 00:23:21,120
um so this is pictorially what it looks

651
00:23:21,120 --> 00:23:23,440
like we have an adversary who gets n

652
00:23:23,440 --> 00:23:25,360
puzzles on the left and tries to

653
00:23:25,360 --> 00:23:27,280
generate end puzzles on the right

654
00:23:27,280 --> 00:23:29,919
and really can combine and split these

655
00:23:29,919 --> 00:23:32,080
puzzles that it gets as input in any way

656
00:23:32,080 --> 00:23:34,080
that it wants

657
00:23:34,080 --> 00:23:36,960
so it turns out that this is actually

658
00:23:36,960 --> 00:23:39,280
impossible to achieve in an unbounded

659
00:23:39,280 --> 00:23:40,720
concurrent setting

660
00:23:40,720 --> 00:23:42,720
even though we can achieve it in the

661
00:23:42,720 --> 00:23:44,640
one-to-one setting

662
00:23:44,640 --> 00:23:46,559
actually before i move on and tell you

663
00:23:46,559 --> 00:23:48,720
the rest of our construction let me

664
00:23:48,720 --> 00:23:50,080
quickly tell you this impossibility

665
00:23:50,080 --> 00:23:51,360
result because it's really

666
00:23:51,360 --> 00:23:53,200
self-contained and it's really just a

667
00:23:53,200 --> 00:23:55,360
nice a nice little result so

668
00:23:55,360 --> 00:23:58,000
why is it impossible so let's even look

669
00:23:58,000 --> 00:24:00,480
at a simpler setting which suffices to

670
00:24:00,480 --> 00:24:02,240
show this impossibility where the

671
00:24:02,240 --> 00:24:04,320
adversary only gets one puzzle on the

672
00:24:04,320 --> 00:24:06,400
left but is allowed to generate many

673
00:24:06,400 --> 00:24:08,159
puzzles on the right this is known to

674
00:24:08,159 --> 00:24:09,440
imply a fully concurrent

675
00:24:09,440 --> 00:24:11,360
non-malleability so let's say first we

676
00:24:11,360 --> 00:24:14,640
sample z as some puzzle to s

677
00:24:14,640 --> 00:24:16,960
and we send over this puzzle z to our

678
00:24:16,960 --> 00:24:18,880
adversary

679
00:24:18,880 --> 00:24:20,880
the adversary in this impossibility

680
00:24:20,880 --> 00:24:22,559
result is going to do the following

681
00:24:22,559 --> 00:24:24,640
so we can view z

682
00:24:24,640 --> 00:24:26,559
it's some string of some length that

683
00:24:26,559 --> 00:24:29,360
depends on our timeline puzzle but it's

684
00:24:29,360 --> 00:24:31,520
a sequence of bits right so let's say z

685
00:24:31,520 --> 00:24:34,640
is a sequence of bits z one to

686
00:24:34,640 --> 00:24:36,159
um

687
00:24:36,159 --> 00:24:38,799
z m

688
00:24:38,799 --> 00:24:40,720
so what the adversary is gonna do is

689
00:24:40,720 --> 00:24:43,120
take each of the bits of z

690
00:24:43,120 --> 00:24:44,840
and generate a puzzle to them

691
00:24:44,840 --> 00:24:47,440
individually so he's going to generate

692
00:24:47,440 --> 00:24:49,840
let's let's call it y

693
00:24:49,840 --> 00:24:53,120
i as a puzzle

694
00:24:53,120 --> 00:24:55,919
to the value zi

695
00:24:55,919 --> 00:24:57,840
again we can just use t

696
00:24:57,840 --> 00:24:59,520
for every i

697
00:24:59,520 --> 00:25:01,120
and so now the adversary is going to

698
00:25:01,120 --> 00:25:04,000
output all these new puzzles y1

699
00:25:04,000 --> 00:25:05,200
to ym

700
00:25:05,200 --> 00:25:06,000
so

701
00:25:06,000 --> 00:25:07,520
recall that in the setting of

702
00:25:07,520 --> 00:25:09,840
non-malleability the adversary is trying

703
00:25:09,840 --> 00:25:12,400
to output these puzzles whose underlying

704
00:25:12,400 --> 00:25:15,360
value is related to s somehow in the

705
00:25:15,360 --> 00:25:16,880
formal definition we're going to have a

706
00:25:16,880 --> 00:25:19,600
distinguisher that sees these underlying

707
00:25:19,600 --> 00:25:22,559
values so here the distinguisher gets

708
00:25:22,559 --> 00:25:25,039
the values underlying why i went to ym

709
00:25:25,039 --> 00:25:29,520
which by design is z1 to zm

710
00:25:29,520 --> 00:25:30,880
what can he do

711
00:25:30,880 --> 00:25:34,080
he can just solve it

712
00:25:34,080 --> 00:25:35,760
solve z which is

713
00:25:35,760 --> 00:25:37,679
the concatenation

714
00:25:37,679 --> 00:25:39,120
of these

715
00:25:39,120 --> 00:25:41,279
of these bits

716
00:25:41,279 --> 00:25:43,279
and he'll get s

717
00:25:43,279 --> 00:25:45,360
and we're really relying on here that

718
00:25:45,360 --> 00:25:47,679
the distinguisher can solve the puzzle

719
00:25:47,679 --> 00:25:50,320
is a polynomial time algorithm

720
00:25:50,320 --> 00:25:52,559
um but clearly this is a valid attack

721
00:25:52,559 --> 00:25:54,960
because clearly the adversary a has

722
00:25:54,960 --> 00:25:57,440
mauled the puzzle z

723
00:25:57,440 --> 00:26:00,720
into a sequence of m puzzles that are

724
00:26:00,720 --> 00:26:03,200
non-trivially related to s

725
00:26:03,200 --> 00:26:05,360
just as a sino you could of course

726
00:26:05,360 --> 00:26:07,120
restrict the distinguisher not to be

727
00:26:07,120 --> 00:26:08,400
able to run

728
00:26:08,400 --> 00:26:10,320
the solving algorithm this gives a

729
00:26:10,320 --> 00:26:12,159
weaker notion and actually in the full

730
00:26:12,159 --> 00:26:14,640
paper we provide a much more in-depth

731
00:26:14,640 --> 00:26:17,279
comparison of these different notions

732
00:26:17,279 --> 00:26:18,880
and we also give a result separating

733
00:26:18,880 --> 00:26:21,039
these two definitions see the paper for

734
00:26:21,039 --> 00:26:22,559
a much more in-depth discussion of

735
00:26:22,559 --> 00:26:24,159
definitions

736
00:26:24,159 --> 00:26:26,799
okay so that's our impossibility result

737
00:26:26,799 --> 00:26:28,320
so going back to our coin flipping

738
00:26:28,320 --> 00:26:30,720
protocol and achieving fairness

739
00:26:30,720 --> 00:26:33,520
uh it turns out that it suffices to have

740
00:26:33,520 --> 00:26:35,679
what's actually a weaker notion of

741
00:26:35,679 --> 00:26:37,760
non-malleability

742
00:26:37,760 --> 00:26:40,000
so we introduce this new notion and we

743
00:26:40,000 --> 00:26:41,360
show that we can achieve it in an

744
00:26:41,360 --> 00:26:44,480
unbounded setting and that it suffices

745
00:26:44,480 --> 00:26:46,480
to get fairness in our coin flipping

746
00:26:46,480 --> 00:26:48,960
protocol even with an unbounded number

747
00:26:48,960 --> 00:26:50,799
of parties the new notion of

748
00:26:50,799 --> 00:26:53,039
non-malleability that we introduce which

749
00:26:53,039 --> 00:26:55,279
may even be of independent interest is

750
00:26:55,279 --> 00:26:57,600
called functional non-malleability

751
00:26:57,600 --> 00:27:00,320
and what it says is that no t-time

752
00:27:00,320 --> 00:27:02,960
adversary who receives many puzzles on

753
00:27:02,960 --> 00:27:04,000
the left

754
00:27:04,000 --> 00:27:06,799
can output many puzzles on the right

755
00:27:06,799 --> 00:27:09,200
but now instead of requiring that the

756
00:27:09,200 --> 00:27:11,360
underlying values are related

757
00:27:11,360 --> 00:27:12,799
this notion of functional

758
00:27:12,799 --> 00:27:14,960
non-malleability is parameterized by

759
00:27:14,960 --> 00:27:17,279
function f and we require that f of the

760
00:27:17,279 --> 00:27:20,960
underlying values from the input puzzles

761
00:27:20,960 --> 00:27:22,720
isn't related to f of the underlying

762
00:27:22,720 --> 00:27:25,279
values from the output puzzles

763
00:27:25,279 --> 00:27:27,919
now of course if you just have f be the

764
00:27:27,919 --> 00:27:30,480
identity function this is just standard

765
00:27:30,480 --> 00:27:32,159
plane non-malleability

766
00:27:32,159 --> 00:27:34,320
so functional non-malleability is really

767
00:27:34,320 --> 00:27:36,960
a generalization and it all depends on

768
00:27:36,960 --> 00:27:38,960
what class of functions we have

769
00:27:38,960 --> 00:27:41,440
functional non-malleability for

770
00:27:41,440 --> 00:27:44,399
so it turns out that we can achieve this

771
00:27:44,399 --> 00:27:47,360
in an unbounded concurrent setting

772
00:27:47,360 --> 00:27:50,640
as long as f is computable in low depth

773
00:27:50,640 --> 00:27:52,799
low depth is a fine restriction because

774
00:27:52,799 --> 00:27:54,720
for coin tossing the function we need to

775
00:27:54,720 --> 00:27:57,120
compute is just xor which can definitely

776
00:27:57,120 --> 00:28:00,159
be computed in low depth so

777
00:28:00,159 --> 00:28:02,720
what this says is that even if the

778
00:28:02,720 --> 00:28:05,919
adversary can bias the individual s-i

779
00:28:05,919 --> 00:28:07,520
values that it

780
00:28:07,520 --> 00:28:09,279
puts on the bulletin board

781
00:28:09,279 --> 00:28:11,520
it can't bias the output which is the

782
00:28:11,520 --> 00:28:13,840
xor of all of them

783
00:28:13,840 --> 00:28:15,840
and we really believe that this notion

784
00:28:15,840 --> 00:28:18,559
might be of independent interest

785
00:28:18,559 --> 00:28:20,799
and in the paper we compare this in more

786
00:28:20,799 --> 00:28:22,159
depth to different notions of not

787
00:28:22,159 --> 00:28:24,159
malleability so see the paper if you're

788
00:28:24,159 --> 00:28:25,840
interested in that

789
00:28:25,840 --> 00:28:27,679
so going back to our coin flipping

790
00:28:27,679 --> 00:28:28,720
protocol

791
00:28:28,720 --> 00:28:30,799
fairness comes from functional

792
00:28:30,799 --> 00:28:34,720
non-malleability for the xor function

793
00:28:34,720 --> 00:28:36,080
uh fully concurrent functional and

794
00:28:36,080 --> 00:28:38,399
unavailability i should say

795
00:28:38,399 --> 00:28:39,520
okay

796
00:28:39,520 --> 00:28:40,720
the last property i'm going to talk

797
00:28:40,720 --> 00:28:43,120
about is public verifiability so

798
00:28:43,120 --> 00:28:44,799
bear with me remember that public

799
00:28:44,799 --> 00:28:47,840
verifiability is when the output of the

800
00:28:47,840 --> 00:28:51,039
protocol can be verified by anybody

801
00:28:51,039 --> 00:28:52,320
okay so

802
00:28:52,320 --> 00:28:54,159
let's uh consider the setting where

803
00:28:54,159 --> 00:28:55,679
there's a party that doesn't open their

804
00:28:55,679 --> 00:28:56,640
puzzle

805
00:28:56,640 --> 00:28:59,039
so an honest party will solve it and

806
00:28:59,039 --> 00:29:00,799
post the solution

807
00:29:00,799 --> 00:29:02,720
that party solved the puzzle so they are

808
00:29:02,720 --> 00:29:05,120
convinced of uh whatever the solution

809
00:29:05,120 --> 00:29:07,279
that they got was

810
00:29:07,279 --> 00:29:08,000
but

811
00:29:08,000 --> 00:29:10,320
someone who comes later we don't want

812
00:29:10,320 --> 00:29:12,640
them to have to resolve these unsolved

813
00:29:12,640 --> 00:29:13,679
puzzles

814
00:29:13,679 --> 00:29:15,760
so pictorially what this looks like is

815
00:29:15,760 --> 00:29:18,159
alice posts a puzzle she goes offline

816
00:29:18,159 --> 00:29:19,279
aborts

817
00:29:19,279 --> 00:29:21,840
bob posts his puzzle and opens it

818
00:29:21,840 --> 00:29:24,080
bob spends tea time solving alice's

819
00:29:24,080 --> 00:29:25,279
puzzle

820
00:29:25,279 --> 00:29:28,399
but then a third party charlie who wants

821
00:29:28,399 --> 00:29:30,240
to know what the output is and wants to

822
00:29:30,240 --> 00:29:33,360
be convinced has to spend time t

823
00:29:33,360 --> 00:29:34,559
um

824
00:29:34,559 --> 00:29:37,440
to solve this uh puzzle for s1 to be

825
00:29:37,440 --> 00:29:40,240
convinced and note that it's not enough

826
00:29:40,240 --> 00:29:42,559
here if bob would just post s1 to the

827
00:29:42,559 --> 00:29:44,960
bulletin board after solving it because

828
00:29:44,960 --> 00:29:47,039
uh we have to handle the case where the

829
00:29:47,039 --> 00:29:49,919
adversary posts puzzles with no solution

830
00:29:49,919 --> 00:29:51,679
to address this we introduce what we

831
00:29:51,679 --> 00:29:53,520
call publicly verifiable timeline

832
00:29:53,520 --> 00:29:54,559
puzzles

833
00:29:54,559 --> 00:29:57,360
we get this by adapting the proof system

834
00:29:57,360 --> 00:29:59,039
due to paycheck

835
00:29:59,039 --> 00:30:02,320
for repeated squaring to our setting

836
00:30:02,320 --> 00:30:03,840
and along the way we use what's known as

837
00:30:03,840 --> 00:30:05,840
trapdoor verifiable delay functions so

838
00:30:05,840 --> 00:30:07,679
if you're interested in those details

839
00:30:07,679 --> 00:30:09,200
see the paper

840
00:30:09,200 --> 00:30:11,039
but basically what this gives is a

841
00:30:11,039 --> 00:30:13,840
puzzle where when you solve it you get a

842
00:30:13,840 --> 00:30:15,039
short proof

843
00:30:15,039 --> 00:30:16,960
that anyone can use to verify the

844
00:30:16,960 --> 00:30:18,080
solution

845
00:30:18,080 --> 00:30:20,080
okay so to put this in the context of

846
00:30:20,080 --> 00:30:21,600
our protocol

847
00:30:21,600 --> 00:30:23,200
what we actually show

848
00:30:23,200 --> 00:30:25,520
in our timelock puzzle construction

849
00:30:25,520 --> 00:30:27,679
is that if we start with a publicly

850
00:30:27,679 --> 00:30:29,440
verifiable timeline puzzle which we

851
00:30:29,440 --> 00:30:31,679
construct from repeated squaring we get

852
00:30:31,679 --> 00:30:33,600
a publicly verifiable non-malleable

853
00:30:33,600 --> 00:30:34,880
timeline puzzle

854
00:30:34,880 --> 00:30:36,640
so we can plug that in back into our

855
00:30:36,640 --> 00:30:38,480
coin flipping protocol and that's what

856
00:30:38,480 --> 00:30:41,200
gives us this public verifiability

857
00:30:41,200 --> 00:30:43,360
we do get some other variants of this

858
00:30:43,360 --> 00:30:45,200
protocol we get a non-interactive

859
00:30:45,200 --> 00:30:46,559
variant

860
00:30:46,559 --> 00:30:49,440
from our plain model construction so

861
00:30:49,440 --> 00:30:51,679
see the paper for those details

862
00:30:51,679 --> 00:30:54,080
and i'll just wrap up

863
00:30:54,080 --> 00:30:56,960
so in this work we constructed

864
00:30:56,960 --> 00:30:59,200
practically efficient non-malleable

865
00:30:59,200 --> 00:31:02,720
time-lock puzzles with no trusted setup

866
00:31:02,720 --> 00:31:04,480
we introduced the notion of functional

867
00:31:04,480 --> 00:31:06,559
non-malleability and showed that it's

868
00:31:06,559 --> 00:31:10,240
possible with unbounded concurrency

869
00:31:10,240 --> 00:31:12,640
and we constructed publicly verifiable

870
00:31:12,640 --> 00:31:14,320
timelock puzzles

871
00:31:14,320 --> 00:31:16,799
and we combined all these together to

872
00:31:16,799 --> 00:31:19,440
get uh coin flipping and also auctions

873
00:31:19,440 --> 00:31:21,600
which i didn't mention here um

874
00:31:21,600 --> 00:31:23,840
but these protocols with these three

875
00:31:23,840 --> 00:31:27,360
very desirable properties again no setup

876
00:31:27,360 --> 00:31:29,360
uh and in the random oracle model if

877
00:31:29,360 --> 00:31:30,880
we're using our construction of tunnel

878
00:31:30,880 --> 00:31:33,039
puzzles in the random oracle model

879
00:31:33,039 --> 00:31:35,600
and i guess uh just thinking in terms of

880
00:31:35,600 --> 00:31:38,240
open questions the main one here would

881
00:31:38,240 --> 00:31:40,880
be to extend this to fairness in general

882
00:31:40,880 --> 00:31:43,039
right fairness and coin flipping at

883
00:31:43,039 --> 00:31:44,720
auctions is great

884
00:31:44,720 --> 00:31:46,559
but really it would be important to just

885
00:31:46,559 --> 00:31:49,840
get general fair multi-party computation

886
00:31:49,840 --> 00:31:52,480
so thank you for listening and if you

887
00:31:52,480 --> 00:31:54,480
have any questions feel free to reach

888
00:31:54,480 --> 00:31:57,720
out to me

