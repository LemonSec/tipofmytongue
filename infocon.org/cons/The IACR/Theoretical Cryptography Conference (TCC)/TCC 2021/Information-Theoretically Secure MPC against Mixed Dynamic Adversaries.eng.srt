1
00:00:01,360 --> 00:00:03,840
hello welcome to my talk my name is

2
00:00:03,840 --> 00:00:06,560
daniel escudero and

3
00:00:06,560 --> 00:00:08,320
i'm going to present my joint work with

4
00:00:08,320 --> 00:00:11,200
ivan dankar the niv tv arabi

5
00:00:11,200 --> 00:00:14,320
on information theoretically securing pc

6
00:00:14,320 --> 00:00:18,560
against mixed dynamic adversaries

7
00:00:18,560 --> 00:00:20,560
and i want to

8
00:00:20,560 --> 00:00:23,519
state that a methylation now jp morgany

9
00:00:23,519 --> 00:00:25,199
research but this

10
00:00:25,199 --> 00:00:26,480
was a

11
00:00:26,480 --> 00:00:29,199
work done while it was at orleans

12
00:00:29,199 --> 00:00:31,840
university

13
00:00:32,640 --> 00:00:35,200
so let's first recall what secure

14
00:00:35,200 --> 00:00:37,120
multi-party computation is in this

15
00:00:37,120 --> 00:00:39,200
setting we have a set of multiple

16
00:00:39,200 --> 00:00:42,320
parties which i'm labeling p1 p2 p3 up

17
00:00:42,320 --> 00:00:43,760
to

18
00:00:43,760 --> 00:00:47,200
and they are connected in

19
00:00:47,200 --> 00:00:49,120
a voice channels so they have

20
00:00:49,120 --> 00:00:50,719
peer-to-peer channels

21
00:00:50,719 --> 00:00:53,039
and their goal is to securely compute

22
00:00:53,039 --> 00:00:54,640
certain functions so

23
00:00:54,640 --> 00:00:57,680
each pi has a secret input which we

24
00:00:57,680 --> 00:00:59,440
denote by x i

25
00:00:59,440 --> 00:01:01,920
and we consider an adversary that

26
00:01:01,920 --> 00:01:03,520
corrupts t

27
00:01:03,520 --> 00:01:06,080
out of the n parties

28
00:01:06,080 --> 00:01:08,479
and the idea is that at the end of the

29
00:01:08,479 --> 00:01:10,720
protocol execution so they are connected

30
00:01:10,720 --> 00:01:12,560
by these channels they exchange a lot of

31
00:01:12,560 --> 00:01:14,880
messages they they interact they

32
00:01:14,880 --> 00:01:16,640
interact among each other

33
00:01:16,640 --> 00:01:18,240
and at the end of the protocol the idea

34
00:01:18,240 --> 00:01:20,320
is that the parties get

35
00:01:20,320 --> 00:01:21,840
the output

36
00:01:21,840 --> 00:01:24,240
of certain function that they choose

37
00:01:24,240 --> 00:01:26,960
evaluated in their inputs and

38
00:01:26,960 --> 00:01:27,759
that

39
00:01:27,759 --> 00:01:30,000
only this is revealed nothing else about

40
00:01:30,000 --> 00:01:32,479
their input is revealed except

41
00:01:32,479 --> 00:01:34,320
from this output so this is the general

42
00:01:34,320 --> 00:01:37,040
goal of npc this is the general premise

43
00:01:37,040 --> 00:01:39,600
and we have several results in

44
00:01:39,600 --> 00:01:42,720
particular in the domain of information

45
00:01:42,720 --> 00:01:44,880
theoretic security

46
00:01:44,880 --> 00:01:46,799
which is what we are concerned with in

47
00:01:46,799 --> 00:01:47,920
this work

48
00:01:47,920 --> 00:01:50,640
we have the following two main results

49
00:01:50,640 --> 00:01:51,759
so for

50
00:01:51,759 --> 00:01:53,280
for a passive adversary which is an

51
00:01:53,280 --> 00:01:54,960
adversary that

52
00:01:54,960 --> 00:01:57,119
corrupts the parties in a passive way

53
00:01:57,119 --> 00:01:59,360
meaning that it can see the messages

54
00:01:59,360 --> 00:02:02,000
they receive the messages they send and

55
00:02:02,000 --> 00:02:06,960
also their internal state but it cannot

56
00:02:07,040 --> 00:02:08,720
change their behavior so they will

57
00:02:08,720 --> 00:02:10,720
follow the protocol execution the pro

58
00:02:10,720 --> 00:02:13,360
the protocol specification faithfully

59
00:02:13,360 --> 00:02:15,040
now for a passive adversary which is a

60
00:02:15,040 --> 00:02:17,440
very weak adversary we know that we can

61
00:02:17,440 --> 00:02:18,239
get

62
00:02:18,239 --> 00:02:21,120
perfect security assuming that to t is

63
00:02:21,120 --> 00:02:23,840
less than n perfect security meaning

64
00:02:23,840 --> 00:02:26,560
that the protocol is essentially

65
00:02:26,560 --> 00:02:28,480
unbreakable like no matter how many

66
00:02:28,480 --> 00:02:29,680
resources

67
00:02:29,680 --> 00:02:32,800
the adversary has how powerful it is

68
00:02:32,800 --> 00:02:34,319
it will not be able to break the

69
00:02:34,319 --> 00:02:36,959
protocol because statistically

70
00:02:36,959 --> 00:02:39,280
everything is is hidden like perfectly

71
00:02:39,280 --> 00:02:40,959
hidden

72
00:02:40,959 --> 00:02:43,120
now against an active adversary which is

73
00:02:43,120 --> 00:02:46,400
a more realistic adversary it can

74
00:02:46,400 --> 00:02:47,680
essentially

75
00:02:47,680 --> 00:02:49,200
change the behavior of the corrupt

76
00:02:49,200 --> 00:02:50,400
parties

77
00:02:50,400 --> 00:02:53,120
arbitrarily so it's an adversary we

78
00:02:53,120 --> 00:02:54,400
really would like to consider in

79
00:02:54,400 --> 00:02:55,440
practice

80
00:02:55,440 --> 00:02:58,080
we obtain the following results

81
00:02:58,080 --> 00:03:01,040
if we want to have perfect security then

82
00:03:01,040 --> 00:03:04,000
we have to go for a stronger bound on t

83
00:03:04,000 --> 00:03:06,319
so instead of having 2t less than n we

84
00:03:06,319 --> 00:03:08,959
have to have 3t less than n

85
00:03:08,959 --> 00:03:10,560
so the adversary can only corrupt a

86
00:03:10,560 --> 00:03:12,720
third of the parties if you want to have

87
00:03:12,720 --> 00:03:14,640
perfect security and you want to have

88
00:03:14,640 --> 00:03:16,959
statistical security which is a slightly

89
00:03:16,959 --> 00:03:19,360
weaker version of perfect of information

90
00:03:19,360 --> 00:03:21,519
theoretic security meaning that the

91
00:03:21,519 --> 00:03:24,159
protocol has a very slim very small

92
00:03:24,159 --> 00:03:26,000
chance of failing

93
00:03:26,000 --> 00:03:28,959
you can get back to the 2t listening

94
00:03:28,959 --> 00:03:30,879
domain

95
00:03:30,879 --> 00:03:33,280
so these are standard results

96
00:03:33,280 --> 00:03:36,720
and a an interesting fact is that

97
00:03:36,720 --> 00:03:39,519
you can also consider mixed adversaries

98
00:03:39,519 --> 00:03:42,640
so this is a this was considering this

99
00:03:42,640 --> 00:03:46,000
very important work from crypto98

100
00:03:46,000 --> 00:03:48,480
the idea is that now we want to consider

101
00:03:48,480 --> 00:03:50,280
an adversary that

102
00:03:50,280 --> 00:03:52,720
simultaneously corrupts some parties

103
00:03:52,720 --> 00:03:55,439
actively on some parties passively and

104
00:03:55,439 --> 00:03:57,599
even on top of that we will consider

105
00:03:57,599 --> 00:04:00,720
what we call fail stop parties which are

106
00:04:00,720 --> 00:04:02,400
some parties that the adversary don't

107
00:04:02,400 --> 00:04:04,720
does not control the adversary cannot

108
00:04:04,720 --> 00:04:06,879
see their state it cannot alter their

109
00:04:06,879 --> 00:04:08,319
behavior the only thing that bursaries

110
00:04:08,319 --> 00:04:10,959
can do on this part is make them stop

111
00:04:10,959 --> 00:04:13,599
so the adversary can cause them to crash

112
00:04:13,599 --> 00:04:15,680
basically and stop sending and receiving

113
00:04:15,680 --> 00:04:16,959
messages

114
00:04:16,959 --> 00:04:17,918
it's like

115
00:04:17,918 --> 00:04:19,440
it's a way of cheating with these

116
00:04:19,440 --> 00:04:20,959
parties but it's of course not as

117
00:04:20,959 --> 00:04:23,520
harmful as

118
00:04:23,520 --> 00:04:24,960
the adversary being able to read the

119
00:04:24,960 --> 00:04:26,720
state or the adversary being able to

120
00:04:26,720 --> 00:04:28,960
modify their behavior completely

121
00:04:28,960 --> 00:04:29,680
so

122
00:04:29,680 --> 00:04:31,919
when we consider mixed adversaries this

123
00:04:31,919 --> 00:04:34,240
work that i'm citing here

124
00:04:34,240 --> 00:04:36,479
it brings the following results for

125
00:04:36,479 --> 00:04:39,600
perfect security we can get it as long

126
00:04:39,600 --> 00:04:41,440
as 3ta

127
00:04:41,440 --> 00:04:45,360
plus 2tp plus tf is less than n

128
00:04:45,360 --> 00:04:46,560
so

129
00:04:46,560 --> 00:04:48,479
if this is this is exactly a

130
00:04:48,479 --> 00:04:50,000
generalization of the bound we knew

131
00:04:50,000 --> 00:04:52,080
before because before we had

132
00:04:52,080 --> 00:04:54,639
that perfect security was possible

133
00:04:54,639 --> 00:04:56,639
if 2t

134
00:04:56,639 --> 00:04:58,639
was less than n if the corruption was

135
00:04:58,639 --> 00:05:00,880
passive and 3t is less than n if the

136
00:05:00,880 --> 00:05:04,080
corruption is active we can see it here

137
00:05:04,080 --> 00:05:07,360
by setting this to be 0 we get 3t a

138
00:05:07,360 --> 00:05:10,000
less than n and by setting this to be 0

139
00:05:10,000 --> 00:05:12,560
we get 2tb less than n so this is a

140
00:05:12,560 --> 00:05:14,320
strict generalization of the previous

141
00:05:14,320 --> 00:05:17,280
results and for statistical security we

142
00:05:17,280 --> 00:05:19,840
get a similar inequality except that now

143
00:05:19,840 --> 00:05:21,520
we get a factor of 2 here instead of a

144
00:05:21,520 --> 00:05:23,840
factor of

145
00:05:23,840 --> 00:05:26,560
and these are very important results

146
00:05:26,560 --> 00:05:28,720
and this is the first work that consider

147
00:05:28,720 --> 00:05:30,560
mixed adversaries so adversaries that

148
00:05:30,560 --> 00:05:32,800
can simultaneously corrupt parties

149
00:05:32,800 --> 00:05:36,080
actively and also passively

150
00:05:36,080 --> 00:05:38,560
so let's try to understand in more

151
00:05:38,560 --> 00:05:41,120
detail what these results i just

152
00:05:41,120 --> 00:05:42,639
mentioned mean

153
00:05:42,639 --> 00:05:44,240
they mean that

154
00:05:44,240 --> 00:05:46,720
for every tuple

155
00:05:46,720 --> 00:05:50,000
you consider so for every three numbers

156
00:05:50,000 --> 00:05:51,759
you consider

157
00:05:51,759 --> 00:05:53,919
such that

158
00:05:53,919 --> 00:05:57,440
3t a plus 2 typically plus 2p plus tf is

159
00:05:57,440 --> 00:06:00,400
less than n i'm talking about a perfect

160
00:06:00,400 --> 00:06:02,880
security here of course just for

161
00:06:02,880 --> 00:06:05,039
illustration purposes

162
00:06:05,039 --> 00:06:08,800
if for every such tuple there exists a

163
00:06:08,800 --> 00:06:11,759
protocol that is perfectly secure as i

164
00:06:11,759 --> 00:06:13,360
mentioned this is the example of perfect

165
00:06:13,360 --> 00:06:15,280
security against

166
00:06:15,280 --> 00:06:18,240
ta active corruptions tp passive

167
00:06:18,240 --> 00:06:21,680
corruptions and tf fail stops

168
00:06:21,680 --> 00:06:22,479
so

169
00:06:22,479 --> 00:06:26,160
again for every tuple you choose

170
00:06:26,160 --> 00:06:28,800
if it satisfies this inequality then

171
00:06:28,800 --> 00:06:30,479
there will exist a protocol with these

172
00:06:30,479 --> 00:06:32,319
properties

173
00:06:32,319 --> 00:06:36,080
and the general idea in this paper

174
00:06:36,080 --> 00:06:38,880
is actually relatively simple is

175
00:06:38,880 --> 00:06:41,520
just use xiaomi sequence sharing with a

176
00:06:41,520 --> 00:06:45,680
degree equal to ta plus tp

177
00:06:45,680 --> 00:06:46,880
now

178
00:06:46,880 --> 00:06:50,000
a chameleon has a property that

179
00:06:50,000 --> 00:06:50,960
a

180
00:06:50,960 --> 00:06:52,960
no set of shares

181
00:06:52,960 --> 00:06:53,840
that

182
00:06:53,840 --> 00:06:56,479
are as large as as the degree

183
00:06:56,479 --> 00:06:59,360
can leak anything about the secret and

184
00:06:59,360 --> 00:07:01,360
in particular because an adversary

185
00:07:01,360 --> 00:07:02,960
corrupting ta

186
00:07:02,960 --> 00:07:06,240
parties actively and tp parties

187
00:07:06,240 --> 00:07:07,919
passively

188
00:07:07,919 --> 00:07:11,919
can learn a exactly ta plus tp shares

189
00:07:11,919 --> 00:07:13,360
because it can see the states of these

190
00:07:13,360 --> 00:07:16,639
two shares of these two parties then we

191
00:07:16,639 --> 00:07:18,400
can see that privacy holds in this case

192
00:07:18,400 --> 00:07:20,479
because we're choosing the degree

193
00:07:20,479 --> 00:07:24,720
so that no set of ta plus tp

194
00:07:24,720 --> 00:07:27,840
shares reveal anything about the secret

195
00:07:27,840 --> 00:07:30,000
so privacy will hold because that person

196
00:07:30,000 --> 00:07:32,479
can only see the state of t of ta

197
00:07:32,479 --> 00:07:34,639
parties plus tp parties

198
00:07:34,639 --> 00:07:39,120
and also because of this bound here

199
00:07:39,120 --> 00:07:41,199
together with the choice of the degree

200
00:07:41,199 --> 00:07:43,759
you can show that error correction holds

201
00:07:43,759 --> 00:07:45,680
so for error correction techniques to

202
00:07:45,680 --> 00:07:48,800
hold certain a inequality has to hold

203
00:07:48,800 --> 00:07:51,360
a between the number of errors and the

204
00:07:51,360 --> 00:07:53,919
number of shares that you get at the end

205
00:07:53,919 --> 00:07:56,479
and the degree and well that inequality

206
00:07:56,479 --> 00:07:58,240
will hold in this case with this choice

207
00:07:58,240 --> 00:08:00,319
of parameters and error correction is a

208
00:08:00,319 --> 00:08:02,400
method that allows you to at the end of

209
00:08:02,400 --> 00:08:05,120
the protocol get the result

210
00:08:05,120 --> 00:08:07,599
so so this is the general reason why

211
00:08:07,599 --> 00:08:08,560
this

212
00:08:08,560 --> 00:08:12,479
choice of d will work

213
00:08:12,479 --> 00:08:14,240
so

214
00:08:14,240 --> 00:08:15,520
again

215
00:08:15,520 --> 00:08:17,360
in the mixed adversary setting that we

216
00:08:17,360 --> 00:08:20,000
just saw for every tuple there exists a

217
00:08:20,000 --> 00:08:21,680
protocol

218
00:08:21,680 --> 00:08:22,400
so

219
00:08:22,400 --> 00:08:23,840
for example

220
00:08:23,840 --> 00:08:27,759
if you set n equal to eight

221
00:08:27,759 --> 00:08:29,120
and you choose

222
00:08:29,120 --> 00:08:32,880
t a equal to two t p equal to zero and t

223
00:08:32,880 --> 00:08:34,719
f equal to one

224
00:08:34,719 --> 00:08:38,399
well three t a plus two t p plus t f is

225
00:08:38,399 --> 00:08:40,159
equal to seven in this case which is

226
00:08:40,159 --> 00:08:41,519
less than eight

227
00:08:41,519 --> 00:08:43,679
the number of parties so in this case we

228
00:08:43,679 --> 00:08:46,000
know that there exists a protocol

229
00:08:46,000 --> 00:08:47,200
such that

230
00:08:47,200 --> 00:08:49,920
it supports two active corruptions

231
00:08:49,920 --> 00:08:51,920
no passive corruption

232
00:08:51,920 --> 00:08:52,800
and

233
00:08:52,800 --> 00:08:55,040
one fails of corruption

234
00:08:55,040 --> 00:08:57,040
so we know it exists because of the of

235
00:08:57,040 --> 00:08:58,560
the theorem

236
00:08:58,560 --> 00:09:01,279
if instead of that you choose

237
00:09:01,279 --> 00:09:03,839
ta equal to zero to be equal to three

238
00:09:03,839 --> 00:09:07,200
and tf equal to one again the sum with

239
00:09:07,200 --> 00:09:09,200
the appropriate weights

240
00:09:09,200 --> 00:09:11,440
is equal to seven so is less than eight

241
00:09:11,440 --> 00:09:13,600
in this case there will exist

242
00:09:13,600 --> 00:09:16,240
another protocol this can be an entirely

243
00:09:16,240 --> 00:09:18,399
different protocol by prime

244
00:09:18,399 --> 00:09:19,760
that supports

245
00:09:19,760 --> 00:09:22,720
no active corruptions three passive

246
00:09:22,720 --> 00:09:25,360
corruptions and one fields of corruption

247
00:09:25,360 --> 00:09:27,120
so this is just an illustration of what

248
00:09:27,120 --> 00:09:29,120
these results mean you can choose a

249
00:09:29,120 --> 00:09:30,399
tuple

250
00:09:30,399 --> 00:09:32,560
and there will exist a protocol you can

251
00:09:32,560 --> 00:09:34,640
choose another tuple that satisfies the

252
00:09:34,640 --> 00:09:37,120
same inequality and there will be

253
00:09:37,120 --> 00:09:39,200
another protocol and in principle it can

254
00:09:39,200 --> 00:09:41,920
be different

255
00:09:43,040 --> 00:09:43,839
okay

256
00:09:43,839 --> 00:09:44,720
so

257
00:09:44,720 --> 00:09:47,600
what we want to study here in this work

258
00:09:47,600 --> 00:09:50,560
is dynamic mpc

259
00:09:50,560 --> 00:09:54,240
so in a nutshell we can see dynamic mpc

260
00:09:54,240 --> 00:09:57,360
as a way of reversing the

261
00:09:57,360 --> 00:09:58,240
the

262
00:09:58,240 --> 00:10:01,600
quantifiers order so in the previous

263
00:10:01,600 --> 00:10:03,680
result we had

264
00:10:03,680 --> 00:10:06,560
every tuple there exists a protocol

265
00:10:06,560 --> 00:10:09,279
so instead of having these

266
00:10:09,279 --> 00:10:11,360
here we have for every tuple there

267
00:10:11,360 --> 00:10:12,880
exists a protocol instead of having

268
00:10:12,880 --> 00:10:13,760
these

269
00:10:13,760 --> 00:10:16,480
we want to have that there exists a

270
00:10:16,480 --> 00:10:20,399
single protocol such that for every

271
00:10:20,399 --> 00:10:21,680
tuple

272
00:10:21,680 --> 00:10:22,800
we get

273
00:10:22,800 --> 00:10:25,440
some notion of security

274
00:10:25,440 --> 00:10:26,959
so we want to reverse the order of the

275
00:10:26,959 --> 00:10:28,480
quantifiers we don't want to design a

276
00:10:28,480 --> 00:10:31,200
protocol specific to every single tuple

277
00:10:31,200 --> 00:10:33,360
you can come you can come up with we

278
00:10:33,360 --> 00:10:35,600
want to design a single protocol that

279
00:10:35,600 --> 00:10:37,760
works for every tuple

280
00:10:37,760 --> 00:10:40,800
as an example we would like a result of

281
00:10:40,800 --> 00:10:42,160
the following

282
00:10:42,160 --> 00:10:44,079
type

283
00:10:44,079 --> 00:10:47,519
there exists a protocol such that for

284
00:10:47,519 --> 00:10:49,279
every tuple

285
00:10:49,279 --> 00:10:52,000
such that the appropriate inequality

286
00:10:52,000 --> 00:10:53,519
holds

287
00:10:53,519 --> 00:10:56,000
the protocol is perfectly secure against

288
00:10:56,000 --> 00:10:58,240
an adversary corrupting ta parties

289
00:10:58,240 --> 00:11:01,440
actively tp parties passivity and tf

290
00:11:01,440 --> 00:11:03,279
fail stops

291
00:11:03,279 --> 00:11:05,760
now this this result won't hold like

292
00:11:05,760 --> 00:11:08,160
exactly as i stated here

293
00:11:08,160 --> 00:11:10,240
this result will not hold

294
00:11:10,240 --> 00:11:13,120
a but but we will be able to to show

295
00:11:13,120 --> 00:11:14,480
more concrete

296
00:11:14,480 --> 00:11:16,640
results about when does this hold and

297
00:11:16,640 --> 00:11:18,640
how does this hold but this is just an

298
00:11:18,640 --> 00:11:20,399
example of the type of results we would

299
00:11:20,399 --> 00:11:22,160
like it's very different from the one we

300
00:11:22,160 --> 00:11:24,640
had before before we had for every tuple

301
00:11:24,640 --> 00:11:27,440
there exists a protocol and now we have

302
00:11:27,440 --> 00:11:29,040
there exists a protocol that works for

303
00:11:29,040 --> 00:11:31,040
every single tuple

304
00:11:31,040 --> 00:11:34,240
and i want to begin by illustrating why

305
00:11:34,240 --> 00:11:36,320
this is difficult

306
00:11:36,320 --> 00:11:38,160
this is more challenging than the things

307
00:11:38,160 --> 00:11:39,920
we have from before

308
00:11:39,920 --> 00:11:42,399
and the main reason is that the protocol

309
00:11:42,399 --> 00:11:45,120
does not know the concrete values

310
00:11:45,120 --> 00:11:47,519
you want to design a protocol that works

311
00:11:47,519 --> 00:11:51,519
for any tuple such that some property

312
00:11:51,519 --> 00:11:54,639
holds it can be 3ta plus 2tp

313
00:11:54,639 --> 00:11:56,800
plus f less than n

314
00:11:56,800 --> 00:11:59,519
you don't know anything about t a t p t

315
00:11:59,519 --> 00:12:01,760
f except that they satisfy this

316
00:12:01,760 --> 00:12:03,040
inequality

317
00:12:03,040 --> 00:12:05,120
and as an example

318
00:12:05,120 --> 00:12:07,040
about why this will be hard let's go

319
00:12:07,040 --> 00:12:09,120
back to the case in which n is equal to

320
00:12:09,120 --> 00:12:12,000
eight and assume that you want to design

321
00:12:12,000 --> 00:12:13,200
a dynamic

322
00:12:13,200 --> 00:12:16,079
a secure protocol but still use the same

323
00:12:16,079 --> 00:12:18,240
paradigm of using shamir with this

324
00:12:18,240 --> 00:12:20,000
degree

325
00:12:20,000 --> 00:12:21,279
so

326
00:12:21,279 --> 00:12:24,639
you use them shamir with this degree and

327
00:12:24,639 --> 00:12:27,360
let's say that that you use

328
00:12:27,360 --> 00:12:30,399
exactly degree equal to two

329
00:12:30,399 --> 00:12:32,320
so let's say you begin with degree of

330
00:12:32,320 --> 00:12:34,480
quantity in this case

331
00:12:34,480 --> 00:12:39,120
if the tuple ta tp and tf happens to be

332
00:12:39,120 --> 00:12:40,639
201

333
00:12:40,639 --> 00:12:42,000
respectively

334
00:12:42,000 --> 00:12:43,440
then you can get

335
00:12:43,440 --> 00:12:44,800
privacy

336
00:12:44,800 --> 00:12:47,200
because the maximum amount of shares

337
00:12:47,200 --> 00:12:49,839
that the adversary learn is 2 plus 0 so

338
00:12:49,839 --> 00:12:51,920
you get privacy and you also get the

339
00:12:51,920 --> 00:12:53,440
right correction

340
00:12:53,440 --> 00:12:54,959
you can check that the error correction

341
00:12:54,959 --> 00:12:55,839
bound

342
00:12:55,839 --> 00:12:57,680
will hold this is essentially the

343
00:12:57,680 --> 00:13:00,000
construction that you would get from the

344
00:13:00,000 --> 00:13:01,600
from the previous mixed adversary

345
00:13:01,600 --> 00:13:04,160
construct papers

346
00:13:04,160 --> 00:13:05,519
but now

347
00:13:05,519 --> 00:13:07,519
if you choose this d

348
00:13:07,519 --> 00:13:09,920
this protocol you design should work for

349
00:13:09,920 --> 00:13:12,399
any tuple not only for this tuple so

350
00:13:12,399 --> 00:13:15,839
what if you also consider this new tuple

351
00:13:15,839 --> 00:13:18,160
zero three one

352
00:13:18,160 --> 00:13:19,760
well

353
00:13:19,760 --> 00:13:23,760
this d will not work for this new tuple

354
00:13:23,760 --> 00:13:25,920
because now in this new tuple it is

355
00:13:25,920 --> 00:13:29,120
still this new tuple still preserves

356
00:13:29,120 --> 00:13:31,680
it it still satisfies the bound because

357
00:13:31,680 --> 00:13:34,240
3 times 0 plus two times three plus one

358
00:13:34,240 --> 00:13:35,839
is less than eight

359
00:13:35,839 --> 00:13:37,760
so your protocol should be secure

360
00:13:37,760 --> 00:13:40,399
against such tuple but it's not because

361
00:13:40,399 --> 00:13:42,720
the degree is two

362
00:13:42,720 --> 00:13:45,360
and the adversary can see

363
00:13:45,360 --> 00:13:48,079
three shares because it can corrupt

364
00:13:48,079 --> 00:13:49,040
three

365
00:13:49,040 --> 00:13:51,519
parties passively so there will be no

366
00:13:51,519 --> 00:13:53,680
privacy sure there will be still error

367
00:13:53,680 --> 00:13:55,360
correction this is trivial because there

368
00:13:55,360 --> 00:13:57,199
are no actively corrupt parties actually

369
00:13:57,199 --> 00:13:59,519
but but there is no privacy so if you

370
00:13:59,519 --> 00:14:01,279
choose this d

371
00:14:01,279 --> 00:14:03,360
it will not work against this tuple it

372
00:14:03,360 --> 00:14:05,519
may work against some tuples but not

373
00:14:05,519 --> 00:14:08,240
against this tuple in particular so

374
00:14:08,240 --> 00:14:10,800
let's say you change and you choose d

375
00:14:10,800 --> 00:14:12,560
equal to three you increase d because

376
00:14:12,560 --> 00:14:13,920
the problem was privacy you just

377
00:14:13,920 --> 00:14:15,519
increase it and now everything should

378
00:14:15,519 --> 00:14:18,720
work right so now you have privacy and

379
00:14:18,720 --> 00:14:20,160
you also have

380
00:14:20,160 --> 00:14:21,440
you can show that you also have a

381
00:14:21,440 --> 00:14:24,079
correction again because because

382
00:14:24,079 --> 00:14:27,360
ta is equal to zero

383
00:14:27,360 --> 00:14:30,320
but sure maybe now with the choice of d

384
00:14:30,320 --> 00:14:32,880
equal to three now you get

385
00:14:32,880 --> 00:14:33,760
a

386
00:14:33,760 --> 00:14:35,360
you get your protocol to work for the

387
00:14:35,360 --> 00:14:36,720
tuple below

388
00:14:36,720 --> 00:14:39,040
but for for the tuple on top

389
00:14:39,040 --> 00:14:42,000
your protocol simply will not work

390
00:14:42,000 --> 00:14:43,360
because

391
00:14:43,360 --> 00:14:45,360
maybe you will have privacy because the

392
00:14:45,360 --> 00:14:47,440
degree is three which is larger than two

393
00:14:47,440 --> 00:14:48,800
the maximum number of shares that

394
00:14:48,800 --> 00:14:50,880
adversary gets but now you don't get the

395
00:14:50,880 --> 00:14:53,680
road correction you can check that the

396
00:14:53,680 --> 00:14:55,440
it is possible to check that the error

397
00:14:55,440 --> 00:14:57,040
correction bound will not hold in this

398
00:14:57,040 --> 00:14:59,199
case so the conclusion is

399
00:14:59,199 --> 00:15:02,240
from this slide if you choose this fixed

400
00:15:02,240 --> 00:15:04,480
degree for your protocol it will work

401
00:15:04,480 --> 00:15:06,720
for this tuple but not for this one and

402
00:15:06,720 --> 00:15:08,639
if you choose this degree then it will

403
00:15:08,639 --> 00:15:10,800
work for this tuple but not for this one

404
00:15:10,800 --> 00:15:11,680
so

405
00:15:11,680 --> 00:15:13,519
this is the challenge in designing

406
00:15:13,519 --> 00:15:15,920
dynamically secure protocols you cannot

407
00:15:15,920 --> 00:15:19,839
simply go and choose one single tuple

408
00:15:19,839 --> 00:15:22,320
one single paradigm one single degree

409
00:15:22,320 --> 00:15:24,720
you have to be more dynamic well as the

410
00:15:24,720 --> 00:15:26,160
name implies you have to be a little bit

411
00:15:26,160 --> 00:15:27,839
more flexible in the in the way you

412
00:15:27,839 --> 00:15:29,680
design your protocol

413
00:15:29,680 --> 00:15:30,800
and this is basically the main

414
00:15:30,800 --> 00:15:34,560
difficulty in designing these techniques

415
00:15:34,959 --> 00:15:36,800
so i want to to

416
00:15:36,800 --> 00:15:38,480
mention that there are previous works in

417
00:15:38,480 --> 00:15:40,240
this direction in the direction of

418
00:15:40,240 --> 00:15:41,440
designing

419
00:15:41,440 --> 00:15:44,160
a dynamically secure protocols so we

420
00:15:44,160 --> 00:15:47,279
have this word from crypto 13

421
00:15:47,279 --> 00:15:50,160
by hurt at all where they do

422
00:15:50,160 --> 00:15:51,920
introduce the concept of a dynamic

423
00:15:51,920 --> 00:15:54,720
adversary actually and they consider

424
00:15:54,720 --> 00:15:56,560
this adversaries in the computational

425
00:15:56,560 --> 00:15:58,959
security setting so what you do where

426
00:15:58,959 --> 00:16:01,680
you make computational assumptions

427
00:16:01,680 --> 00:16:03,759
this is in contrast to our setting here

428
00:16:03,759 --> 00:16:05,600
where we consider information theoretic

429
00:16:05,600 --> 00:16:06,959
security

430
00:16:06,959 --> 00:16:08,560
now

431
00:16:08,560 --> 00:16:11,680
in very recent war occasion 19

432
00:16:11,680 --> 00:16:12,959
um

433
00:16:12,959 --> 00:16:15,279
patra and ravi considered the setting

434
00:16:15,279 --> 00:16:17,199
again of computational security but this

435
00:16:17,199 --> 00:16:19,680
time in contrast to the work on the left

436
00:16:19,680 --> 00:16:21,759
they consider round complexity

437
00:16:21,759 --> 00:16:23,360
specifically so they proved some lower

438
00:16:23,360 --> 00:16:26,000
bounds in the round complexity

439
00:16:26,000 --> 00:16:29,360
and they proved that a certain protocols

440
00:16:29,360 --> 00:16:30,880
they designed would be optimal with

441
00:16:30,880 --> 00:16:33,360
respect to these lower bounds

442
00:16:33,360 --> 00:16:35,279
now i should also mention that there is

443
00:16:35,279 --> 00:16:36,959
this work that

444
00:16:36,959 --> 00:16:40,079
a even though it does not is hurt at all

445
00:16:40,079 --> 00:16:41,920
but even though it does not consider

446
00:16:41,920 --> 00:16:43,519
explicitly

447
00:16:43,519 --> 00:16:46,480
a dynamic adversary it's still related

448
00:16:46,480 --> 00:16:48,560
to it because you consider general

449
00:16:48,560 --> 00:16:50,399
adversary so general structures of

450
00:16:50,399 --> 00:16:53,040
adversaries and it is not hard to see

451
00:16:53,040 --> 00:16:55,519
that a dynamic adversary is just a much

452
00:16:55,519 --> 00:17:00,079
more flexible or larger collection of is

453
00:17:00,079 --> 00:17:02,399
a larger adversary structure and they

454
00:17:02,399 --> 00:17:03,839
consider this is exactly what they

455
00:17:03,839 --> 00:17:06,959
consider in this work so we do a more a

456
00:17:06,959 --> 00:17:10,480
third of a comparison to this paper in

457
00:17:10,480 --> 00:17:12,640
our work so we invite you to to read it

458
00:17:12,640 --> 00:17:14,240
there but the conclusion is basically

459
00:17:14,240 --> 00:17:16,240
they do achieve some feasibility and

460
00:17:16,240 --> 00:17:18,319
impossibility results but because they

461
00:17:18,319 --> 00:17:21,280
consider our arbitrary adversarial

462
00:17:21,280 --> 00:17:23,839
structures their results are essentially

463
00:17:23,839 --> 00:17:26,400
polynomial on the size of the structure

464
00:17:26,400 --> 00:17:29,280
and well for threshold structures like

465
00:17:29,280 --> 00:17:31,840
the ones we consider here this size of

466
00:17:31,840 --> 00:17:33,280
the size of the structure is actually

467
00:17:33,280 --> 00:17:35,520
exponential it's very large so our

468
00:17:35,520 --> 00:17:36,960
results are

469
00:17:36,960 --> 00:17:39,280
a more meaningful feasibility results

470
00:17:39,280 --> 00:17:40,960
for the concrete case of threshold

471
00:17:40,960 --> 00:17:43,440
structures

472
00:17:44,160 --> 00:17:47,280
okay so what are our results

473
00:17:47,280 --> 00:17:49,760
the results we achieve here

474
00:17:49,760 --> 00:17:51,600
are the following

475
00:17:51,600 --> 00:17:53,200
so

476
00:17:53,200 --> 00:17:55,840
for statistical security

477
00:17:55,840 --> 00:17:58,240
we have to assume the bound from the

478
00:17:58,240 --> 00:18:00,480
non-dynamic setting this is the bound

479
00:18:00,480 --> 00:18:02,799
from the work assigned to the beginning

480
00:18:02,799 --> 00:18:04,320
for the mixed adversary we have to

481
00:18:04,320 --> 00:18:06,720
assume that these bound holds otherwise

482
00:18:06,720 --> 00:18:08,720
we cannot even hope to get protocols in

483
00:18:08,720 --> 00:18:10,720
the in the in the dynamic setting if

484
00:18:10,720 --> 00:18:12,480
they cannot be obtained in the

485
00:18:12,480 --> 00:18:16,080
non-dynamic setting so in this concrete

486
00:18:16,080 --> 00:18:18,320
scenario statistical security we get the

487
00:18:18,320 --> 00:18:20,400
following two results for secure

488
00:18:20,400 --> 00:18:22,240
function evaluation

489
00:18:22,240 --> 00:18:25,120
which we abbreviate with sfe this is the

490
00:18:25,120 --> 00:18:26,720
part is just provide input and get

491
00:18:26,720 --> 00:18:28,240
output

492
00:18:28,240 --> 00:18:31,360
in this setting we showed that god

493
00:18:31,360 --> 00:18:34,480
protocols are possible to design

494
00:18:34,480 --> 00:18:37,520
so this is a very good positive result

495
00:18:37,520 --> 00:18:39,679
but unfortunately

496
00:18:39,679 --> 00:18:41,919
even if you only require fairness not

497
00:18:41,919 --> 00:18:43,440
even god

498
00:18:43,440 --> 00:18:44,880
you need to have

499
00:18:44,880 --> 00:18:47,840
a number of rounds that grow

500
00:18:47,840 --> 00:18:50,160
a linearly with n asymptotically

501
00:18:50,160 --> 00:18:52,400
speaking

502
00:18:52,400 --> 00:18:54,080
so the number of rounds of this protocol

503
00:18:54,080 --> 00:18:57,600
grow linearly within and this is very

504
00:18:57,600 --> 00:18:59,440
bad because you can have

505
00:18:59,440 --> 00:19:02,080
in the non-dynamic setting you can have

506
00:19:02,080 --> 00:19:05,039
protocols with very low round count if

507
00:19:05,039 --> 00:19:06,720
the function is simple enough for

508
00:19:06,720 --> 00:19:10,559
example if the function is in nc1 so

509
00:19:10,559 --> 00:19:12,080
in these cases

510
00:19:12,080 --> 00:19:14,799
in each one orange zero you you can get

511
00:19:14,799 --> 00:19:16,960
constant round protocols

512
00:19:16,960 --> 00:19:19,360
but in the dynamic setting it's

513
00:19:19,360 --> 00:19:21,919
impossible to get this protocol so this

514
00:19:21,919 --> 00:19:23,919
shows a strict separation between the

515
00:19:23,919 --> 00:19:25,600
non-dynamic setting and the dynamic

516
00:19:25,600 --> 00:19:27,440
setting

517
00:19:27,440 --> 00:19:30,799
now for reactive mpc which is where you

518
00:19:30,799 --> 00:19:32,320
get input you get output and then you

519
00:19:32,320 --> 00:19:34,880
may reuse this input again and this

520
00:19:34,880 --> 00:19:37,039
reactive npc can be obtained basically

521
00:19:37,039 --> 00:19:40,880
from sfe and verifiable secret sharing

522
00:19:40,880 --> 00:19:43,760
in this setting fairness is possible

523
00:19:43,760 --> 00:19:47,760
but god requires in addition that

524
00:19:47,760 --> 00:19:51,200
r the maximum between t a plus dp and f

525
00:19:51,200 --> 00:19:53,679
the maximum width in ta plus df is less

526
00:19:53,679 --> 00:19:54,799
than n

527
00:19:54,799 --> 00:19:57,840
these r can be interpreted as the number

528
00:19:57,840 --> 00:20:00,160
of shares or number of states that the

529
00:20:00,160 --> 00:20:02,080
adversary can read

530
00:20:02,080 --> 00:20:03,760
it corresponds to active and passive

531
00:20:03,760 --> 00:20:07,039
parities and f corresponds to the number

532
00:20:07,039 --> 00:20:09,200
of parties the adversary can cause to

533
00:20:09,200 --> 00:20:10,159
crash

534
00:20:10,159 --> 00:20:12,880
which is the active parties and the ones

535
00:20:12,880 --> 00:20:15,679
that are fail stop

536
00:20:16,159 --> 00:20:18,240
okay so this is in terms of statistical

537
00:20:18,240 --> 00:20:20,080
security and in terms of perfect

538
00:20:20,080 --> 00:20:21,919
security where we assume the

539
00:20:21,919 --> 00:20:25,200
corresponding bound from the non-dynamic

540
00:20:25,200 --> 00:20:26,799
setting so essentially the same as

541
00:20:26,799 --> 00:20:29,120
before but with a tree here

542
00:20:29,120 --> 00:20:32,960
we show that sfe is actually impossible

543
00:20:32,960 --> 00:20:34,400
and this is a very interesting result

544
00:20:34,400 --> 00:20:35,840
even with a board

545
00:20:35,840 --> 00:20:38,080
it's still impossible even if you if the

546
00:20:38,080 --> 00:20:40,960
adversary is restricted to not make any

547
00:20:40,960 --> 00:20:44,480
fail stop corruption is still impossible

548
00:20:44,480 --> 00:20:46,240
but fortunately it's possible in some

549
00:20:46,240 --> 00:20:47,520
cases

550
00:20:47,520 --> 00:20:49,440
for example we explore the case in which

551
00:20:49,440 --> 00:20:51,520
you restrict the adversary to

552
00:20:51,520 --> 00:20:53,919
not make any active corruption and in

553
00:20:53,919 --> 00:20:56,159
that case we show is possible or

554
00:20:56,159 --> 00:20:58,159
alternatively the adversary does not

555
00:20:58,159 --> 00:21:00,400
corrupt any party passively it's also

556
00:21:00,400 --> 00:21:01,600
possible

557
00:21:01,600 --> 00:21:03,280
but we did not explore the exact

558
00:21:03,280 --> 00:21:05,360
conditions under which it is actually

559
00:21:05,360 --> 00:21:06,400
possible

560
00:21:06,400 --> 00:21:08,240
for reactive mpc

561
00:21:08,240 --> 00:21:10,000
we showed that

562
00:21:10,000 --> 00:21:12,720
god verifiable secret sharing

563
00:21:12,720 --> 00:21:14,480
so modifiable secretary where the output

564
00:21:14,480 --> 00:21:16,880
is guaranteed to be obtained at the end

565
00:21:16,880 --> 00:21:18,480
is impossible

566
00:21:18,480 --> 00:21:20,880
and this remains to be the case even if

567
00:21:20,880 --> 00:21:23,919
there are no fails of corruptions

568
00:21:23,919 --> 00:21:28,799
however we show that god vss is possible

569
00:21:28,799 --> 00:21:30,400
in some cases again

570
00:21:30,400 --> 00:21:31,360
so

571
00:21:31,360 --> 00:21:34,159
for example if we just 68 to be

572
00:21:34,159 --> 00:21:36,320
zero so no active corruptions and we

573
00:21:36,320 --> 00:21:38,640
also assume this extra bound we can show

574
00:21:38,640 --> 00:21:40,080
that in this case it's possible and

575
00:21:40,080 --> 00:21:41,440
actually we can show that this bound

576
00:21:41,440 --> 00:21:43,919
that i'm saying here is also optimal in

577
00:21:43,919 --> 00:21:44,880
this case

578
00:21:44,880 --> 00:21:46,240
same for the

579
00:21:46,240 --> 00:21:47,520
for the results here if there are no

580
00:21:47,520 --> 00:21:48,960
passive corruptions we need to assume

581
00:21:48,960 --> 00:21:50,880
this extra round and we show that in

582
00:21:50,880 --> 00:21:52,559
this this is the case you need to assume

583
00:21:52,559 --> 00:21:54,159
that

584
00:21:54,159 --> 00:21:55,919
and i'm also not mentioning the slide

585
00:21:55,919 --> 00:21:59,360
but fair bss is possible whenever

586
00:21:59,360 --> 00:22:00,320
a

587
00:22:00,320 --> 00:22:02,159
whenever secure function evaluation with

588
00:22:02,159 --> 00:22:05,760
perfect security is also possible

589
00:22:06,159 --> 00:22:09,120
so these are overall our results and now

590
00:22:09,120 --> 00:22:11,520
i would like to proceed to describing

591
00:22:11,520 --> 00:22:12,799
the techniques

592
00:22:12,799 --> 00:22:16,640
that we use to achieve such results

593
00:22:16,640 --> 00:22:19,280
so let me begin by describing our

594
00:22:19,280 --> 00:22:24,000
results on a statistically secure sfe

595
00:22:24,000 --> 00:22:28,080
with god we showed that this is possible

596
00:22:28,080 --> 00:22:30,480
and first the setting

597
00:22:30,480 --> 00:22:34,240
again we assume the bound for mixed the

598
00:22:34,240 --> 00:22:36,080
dynamic mixed adversary sorry in the

599
00:22:36,080 --> 00:22:38,240
statistical setting

600
00:22:38,240 --> 00:22:40,320
but furthermore for simplicity we will

601
00:22:40,320 --> 00:22:43,120
assume that tp is equal to zero so

602
00:22:43,120 --> 00:22:44,640
actually this term disappears and the

603
00:22:44,640 --> 00:22:46,880
boundaries to ta plus df less than n

604
00:22:46,880 --> 00:22:49,440
this makes sense this is not artificial

605
00:22:49,440 --> 00:22:51,679
this it makes sense because you can see

606
00:22:51,679 --> 00:22:54,640
that both passive and active parties

607
00:22:54,640 --> 00:22:56,640
have the same factor the same weight

608
00:22:56,640 --> 00:22:58,960
both of them have a factor of two so for

609
00:22:58,960 --> 00:23:01,039
the adversary it costs the same in terms

610
00:23:01,039 --> 00:23:03,919
of in terms of threshold to corrupt an

611
00:23:03,919 --> 00:23:05,919
active party or a passive party so it

612
00:23:05,919 --> 00:23:07,440
makes more sense to consider the strong

613
00:23:07,440 --> 00:23:09,200
adversary that only corrupts parties

614
00:23:09,200 --> 00:23:11,200
actively

615
00:23:11,200 --> 00:23:11,919
so

616
00:23:11,919 --> 00:23:14,799
we have this bound and we also assume in

617
00:23:14,799 --> 00:23:17,360
addition that parties can detect when

618
00:23:17,360 --> 00:23:19,760
another party fails stops and this is

619
00:23:19,760 --> 00:23:21,440
again not artificial so we can have a

620
00:23:21,440 --> 00:23:23,520
broadcast channel in which parties

621
00:23:23,520 --> 00:23:25,520
broadcast constantly some hard beats

622
00:23:25,520 --> 00:23:26,640
mentioning that they are alive and

623
00:23:26,640 --> 00:23:28,480
whenever a failsafe party crashes it

624
00:23:28,480 --> 00:23:29,919
will simply stop

625
00:23:29,919 --> 00:23:31,919
sending these

626
00:23:31,919 --> 00:23:34,559
heartbeats and whenever a party sends a

627
00:23:34,559 --> 00:23:36,320
stop send these heartbeats is considered

628
00:23:36,320 --> 00:23:37,200
to be

629
00:23:37,200 --> 00:23:39,760
fail stop

630
00:23:41,440 --> 00:23:44,080
okay so this is the general layout of

631
00:23:44,080 --> 00:23:45,520
our protocol i'm going to start with the

632
00:23:45,520 --> 00:23:46,799
bigger picture and then we're going to

633
00:23:46,799 --> 00:23:49,279
consider the small details

634
00:23:49,279 --> 00:23:52,080
so first we're going to assume a box

635
00:23:52,080 --> 00:23:55,120
which is a non-dynamic protocol so a

636
00:23:55,120 --> 00:23:58,080
traditional protocol just like

637
00:23:58,080 --> 00:24:00,400
the ones that we always knew they exist

638
00:24:00,400 --> 00:24:02,240
a classical protocol

639
00:24:02,240 --> 00:24:03,679
non-dynamic

640
00:24:03,679 --> 00:24:05,039
with god

641
00:24:05,039 --> 00:24:07,360
tolerating

642
00:24:07,360 --> 00:24:10,000
ta less than in half corruptions active

643
00:24:10,000 --> 00:24:12,159
corruption so this is a protocol that

644
00:24:12,159 --> 00:24:15,600
tolerates a uh dishonest

645
00:24:15,600 --> 00:24:17,360
dishonest minority

646
00:24:17,360 --> 00:24:19,600
and is non-dynamic we know a lot of

647
00:24:19,600 --> 00:24:20,960
these protocols

648
00:24:20,960 --> 00:24:22,799
now the parties are going to provide the

649
00:24:22,799 --> 00:24:25,600
inputs to this protocol

650
00:24:25,600 --> 00:24:28,000
and in the protocol execution

651
00:24:28,000 --> 00:24:30,400
they will restart if some failed stop is

652
00:24:30,400 --> 00:24:31,679
detected

653
00:24:31,679 --> 00:24:33,919
i want you to notice that because 2ta

654
00:24:33,919 --> 00:24:36,159
plus tf is less than n

655
00:24:36,159 --> 00:24:38,559
if you remove a field stop party you

656
00:24:38,559 --> 00:24:40,720
remove one from here they remove one

657
00:24:40,720 --> 00:24:42,880
from here so the new values will still

658
00:24:42,880 --> 00:24:46,000
satisfy the same inequality

659
00:24:46,000 --> 00:24:48,080
and finally at the end the protocol will

660
00:24:48,080 --> 00:24:49,760
produce output now what is the output

661
00:24:49,760 --> 00:24:53,120
the output is not exactly z so c in this

662
00:24:53,120 --> 00:24:54,480
case is the function that we want to

663
00:24:54,480 --> 00:24:55,760
compute

664
00:24:55,760 --> 00:24:58,000
but the output that we are what do we

665
00:24:58,000 --> 00:25:00,080
want to produce with this protocol is

666
00:25:00,080 --> 00:25:02,799
not exactly z in the clear but it's a

667
00:25:02,799 --> 00:25:04,400
shared version of c

668
00:25:04,400 --> 00:25:06,640
that i'm going to describe in a moment

669
00:25:06,640 --> 00:25:08,640
why do we want a shared version of z

670
00:25:08,640 --> 00:25:11,200
instead of having z in the clear let's

671
00:25:11,200 --> 00:25:12,960
say that we modify this protocol so that

672
00:25:12,960 --> 00:25:14,880
instead of producing shares of c we

673
00:25:14,880 --> 00:25:17,600
produce c the problem of doing this is

674
00:25:17,600 --> 00:25:20,640
that the adversary may cause some fail

675
00:25:20,640 --> 00:25:22,080
stops

676
00:25:22,080 --> 00:25:24,400
towards the end of the protocol

677
00:25:24,400 --> 00:25:26,640
so when the purple is about to end for

678
00:25:26,640 --> 00:25:29,039
example it can make a lot of parties

679
00:25:29,039 --> 00:25:31,520
fail stop and the adversary will learn

680
00:25:31,520 --> 00:25:33,840
output while the other parties will not

681
00:25:33,840 --> 00:25:35,520
this will not be fair and particularly

682
00:25:35,520 --> 00:25:37,200
will not satisfy guaranteed output

683
00:25:37,200 --> 00:25:39,520
delivery and the reason why this happens

684
00:25:39,520 --> 00:25:40,960
even though the protocol is assumed to

685
00:25:40,960 --> 00:25:42,480
satisfy guaranteed output delivery is

686
00:25:42,480 --> 00:25:44,480
because the protocol

687
00:25:44,480 --> 00:25:47,600
is is assumed to satisfy this property

688
00:25:47,600 --> 00:25:49,679
in the non-dynamic settings so it is

689
00:25:49,679 --> 00:25:52,640
assumed to tolerate active corruptions

690
00:25:52,640 --> 00:25:54,960
but is not assumed to tolerate

691
00:25:54,960 --> 00:25:56,480
fail stops

692
00:25:56,480 --> 00:25:58,640
so this is the problem this is why we

693
00:25:58,640 --> 00:25:59,340
need to

694
00:25:59,340 --> 00:26:00,640
[Music]

695
00:26:00,640 --> 00:26:04,000
to have a different approach

696
00:26:04,000 --> 00:26:05,520
so we're going to have a shared version

697
00:26:05,520 --> 00:26:06,960
i'm going to describe what this shared

698
00:26:06,960 --> 00:26:08,159
version means

699
00:26:08,159 --> 00:26:10,240
so what this means is that at the end of

700
00:26:10,240 --> 00:26:12,000
the protocol execution if this again if

701
00:26:12,000 --> 00:26:13,840
this protocol if some failed stop is

702
00:26:13,840 --> 00:26:15,440
detected in the middle of the protocol

703
00:26:15,440 --> 00:26:17,200
the protocol restarts this is not a

704
00:26:17,200 --> 00:26:19,840
problem by the way because nothing is

705
00:26:19,840 --> 00:26:21,279
leaked because of the properties of the

706
00:26:21,279 --> 00:26:23,039
protocol absolutely nothing is leaked

707
00:26:23,039 --> 00:26:25,840
about the output at any time so you can

708
00:26:25,840 --> 00:26:27,520
always restart because the adversary can

709
00:26:27,520 --> 00:26:29,360
change its inputs or something but it

710
00:26:29,360 --> 00:26:31,200
will never learn anything related to the

711
00:26:31,200 --> 00:26:32,159
output

712
00:26:32,159 --> 00:26:33,840
this is also the case because the output

713
00:26:33,840 --> 00:26:36,960
again is not in the clear is shared

714
00:26:36,960 --> 00:26:40,400
so the second step is that

715
00:26:40,400 --> 00:26:42,320
the parties are going to engage in a

716
00:26:42,320 --> 00:26:44,480
protocol that enables them to

717
00:26:44,480 --> 00:26:48,240
reconstruct this shared version of z

718
00:26:48,240 --> 00:26:50,000
and now after the the reconstruction

719
00:26:50,000 --> 00:26:51,919
they will get indeed c in the clear

720
00:26:51,919 --> 00:26:54,400
which is what we ultimately want

721
00:26:54,400 --> 00:26:55,919
what are the properties that we want

722
00:26:55,919 --> 00:26:58,400
from this reconstruction protocol well

723
00:26:58,400 --> 00:27:00,240
there are mainly two properties so the

724
00:27:00,240 --> 00:27:02,400
prop the protocol has to be

725
00:27:02,400 --> 00:27:03,760
fair

726
00:27:03,760 --> 00:27:04,880
meaning that

727
00:27:04,880 --> 00:27:08,480
either the output succeeds

728
00:27:08,480 --> 00:27:09,360
or

729
00:27:09,360 --> 00:27:11,840
the adversary learns nothing and this is

730
00:27:11,840 --> 00:27:13,840
not trivial to achieve because again as

731
00:27:13,840 --> 00:27:16,000
i mentioned if here up here we remove

732
00:27:16,000 --> 00:27:18,159
these brackets we try to output the

733
00:27:18,159 --> 00:27:20,000
result in the clear this will not be

734
00:27:20,000 --> 00:27:21,679
fair because the adversary can always

735
00:27:21,679 --> 00:27:24,320
make a lot of parties crash at the end

736
00:27:24,320 --> 00:27:27,440
it can learn all their values and it can

737
00:27:27,440 --> 00:27:29,520
remove or it can

738
00:27:29,520 --> 00:27:31,279
prevent the honest parties from learning

739
00:27:31,279 --> 00:27:32,720
these results because a lot of parties

740
00:27:32,720 --> 00:27:34,880
crashed at the end this is a good moment

741
00:27:34,880 --> 00:27:36,480
to mention by the way that the us in the

742
00:27:36,480 --> 00:27:38,640
adversary is rushing so it means that

743
00:27:38,640 --> 00:27:40,880
the adversary can choose to first hear

744
00:27:40,880 --> 00:27:42,880
the messages from the failsafe parties

745
00:27:42,880 --> 00:27:44,720
and then make them crash before these

746
00:27:44,720 --> 00:27:46,399
messages reach the honest parties as

747
00:27:46,399 --> 00:27:49,039
well so this is why getting fairness is

748
00:27:49,039 --> 00:27:51,279
really really difficult

749
00:27:51,279 --> 00:27:52,559
and then so this is the first property

750
00:27:52,559 --> 00:27:54,159
we want to from this reconstruction

751
00:27:54,159 --> 00:27:55,840
protocol it's not trivial this is

752
00:27:55,840 --> 00:27:58,399
actually one of the main complex parts

753
00:27:58,399 --> 00:28:00,240
and we also want that if the protocol

754
00:28:00,240 --> 00:28:01,279
aborts

755
00:28:01,279 --> 00:28:03,840
so if it again if it not it does not

756
00:28:03,840 --> 00:28:06,000
succeed if it aborts we know that the

757
00:28:06,000 --> 00:28:07,600
adversary learns nothing but we also

758
00:28:07,600 --> 00:28:09,600
want in addition to this that the

759
00:28:09,600 --> 00:28:12,640
parties identify some set of active or

760
00:28:12,640 --> 00:28:14,480
failed stop parties

761
00:28:14,480 --> 00:28:16,720
so it doesn't simply abort and says this

762
00:28:16,720 --> 00:28:19,039
failed but also it failed and by the way

763
00:28:19,039 --> 00:28:21,760
this set of parties are guaranteed to be

764
00:28:21,760 --> 00:28:23,440
actively corrupt and the set of parties

765
00:28:23,440 --> 00:28:24,960
are fail stop

766
00:28:24,960 --> 00:28:26,960
at this point when when they can

767
00:28:26,960 --> 00:28:29,200
identify these parties they can simply

768
00:28:29,200 --> 00:28:31,279
restart so we do the same here in the

769
00:28:31,279 --> 00:28:32,960
second part

770
00:28:32,960 --> 00:28:34,640
they start interacting in this

771
00:28:34,640 --> 00:28:37,360
reconstruction and at some point they

772
00:28:37,360 --> 00:28:40,159
it fails this reconstruction aborts so

773
00:28:40,159 --> 00:28:42,640
then the parties will go back here to

774
00:28:42,640 --> 00:28:44,799
the beginning of the protocol but now

775
00:28:44,799 --> 00:28:47,039
removing the identify active parties and

776
00:28:47,039 --> 00:28:49,360
removing the identified er fell so

777
00:28:49,360 --> 00:28:51,679
parties this is secure to do because of

778
00:28:51,679 --> 00:28:54,159
the fairness property nothing is leaked

779
00:28:54,159 --> 00:28:57,360
about the output whenever

780
00:28:57,360 --> 00:28:59,840
an abort occurs never never the

781
00:28:59,840 --> 00:29:01,279
adversary learns anything about the

782
00:29:01,279 --> 00:29:03,840
output so this is why we can sort of go

783
00:29:03,840 --> 00:29:05,200
back to the beginning and restart the

784
00:29:05,200 --> 00:29:08,960
protocol and a well you can intuitively

785
00:29:08,960 --> 00:29:11,919
intuitively see that if we restart this

786
00:29:11,919 --> 00:29:13,679
thing a lot every time we are kicking

787
00:29:13,679 --> 00:29:15,360
out some parties so eventually this will

788
00:29:15,360 --> 00:29:16,880
succeed and eventually this will result

789
00:29:16,880 --> 00:29:18,240
in the output

790
00:29:18,240 --> 00:29:20,159
so basically this is the layout this is

791
00:29:20,159 --> 00:29:22,080
the template and what we are missing

792
00:29:22,080 --> 00:29:24,640
right now is just how to get this box

793
00:29:24,640 --> 00:29:26,080
how to get this box in such a way that

794
00:29:26,080 --> 00:29:28,320
is fair in such a way that whenever you

795
00:29:28,320 --> 00:29:29,360
were bored

796
00:29:29,360 --> 00:29:32,240
you identified some some parts and again

797
00:29:32,240 --> 00:29:34,640
just just to mention it the hard part is

798
00:29:34,640 --> 00:29:37,039
getting fairness intuitively is because

799
00:29:37,039 --> 00:29:39,440
you can like reconstructing things in a

800
00:29:39,440 --> 00:29:41,520
fair manner is difficult if you have an

801
00:29:41,520 --> 00:29:42,880
adversary that can first get the

802
00:29:42,880 --> 00:29:44,960
messages and then choose to prevent the

803
00:29:44,960 --> 00:29:46,880
other parties from getting them this is

804
00:29:46,880 --> 00:29:50,399
the main interesting part

805
00:29:50,399 --> 00:29:51,440
so how do you get the further

806
00:29:51,440 --> 00:29:52,480
construction

807
00:29:52,480 --> 00:29:54,399
well we're going gonna have some notion

808
00:29:54,399 --> 00:29:56,640
of sharing so the notion of sharing that

809
00:29:56,640 --> 00:29:59,440
we're gonna use looks uh looks like this

810
00:29:59,440 --> 00:30:00,960
you have you're gonna have some random

811
00:30:00,960 --> 00:30:03,760
value that is given to the parties

812
00:30:03,760 --> 00:30:06,320
in point-to-point channels at the end

813
00:30:06,320 --> 00:30:08,799
and also you're going to have some

814
00:30:08,799 --> 00:30:10,640
secret shares so so these square

815
00:30:10,640 --> 00:30:11,840
brackets

816
00:30:11,840 --> 00:30:14,720
actually mean shamir secret sharing with

817
00:30:14,720 --> 00:30:16,559
some message authentication codes that

818
00:30:16,559 --> 00:30:19,440
allows parties to detect um

819
00:30:19,440 --> 00:30:22,080
incorrect shares so the details are are

820
00:30:22,080 --> 00:30:23,919
given in the paper but for now we just

821
00:30:23,919 --> 00:30:25,679
it's just good to think of it as a mercy

822
00:30:25,679 --> 00:30:27,520
percent with some additional information

823
00:30:27,520 --> 00:30:29,200
that allows parties to detect whenever a

824
00:30:29,200 --> 00:30:30,320
party

825
00:30:30,320 --> 00:30:32,080
whenever an actively corrupt party send

826
00:30:32,080 --> 00:30:34,720
an incorrector so we're going to have

827
00:30:34,720 --> 00:30:37,120
some r a for the shared representation

828
00:30:37,120 --> 00:30:39,200
of z we're going to have some r and then

829
00:30:39,200 --> 00:30:41,440
a series of shared values

830
00:30:41,440 --> 00:30:44,080
where the sum of all these values z1 up

831
00:30:44,080 --> 00:30:45,440
to zl

832
00:30:45,440 --> 00:30:47,520
gives you the masked version of z so it

833
00:30:47,520 --> 00:30:49,360
gives you z minus r

834
00:30:49,360 --> 00:30:50,559
and also

835
00:30:50,559 --> 00:30:53,520
each z each zi

836
00:30:53,520 --> 00:30:55,200
is secret shared with the degree

837
00:30:55,200 --> 00:30:57,279
corresponding to its index so zl is

838
00:30:57,279 --> 00:31:00,000
secrecy with degree l c l minus one will

839
00:31:00,000 --> 00:31:02,960
be secrecy with degree l minus one down

840
00:31:02,960 --> 00:31:04,880
to z1 that is degree is shared with

841
00:31:04,880 --> 00:31:06,240
degree one

842
00:31:06,240 --> 00:31:08,159
and here l

843
00:31:08,159 --> 00:31:10,799
is chosen to be this quantity here which

844
00:31:10,799 --> 00:31:12,720
is the maximum amount of actively

845
00:31:12,720 --> 00:31:13,919
correct parts of the adversary you can

846
00:31:13,919 --> 00:31:15,519
have in particular this is private

847
00:31:15,519 --> 00:31:17,600
because the adversary does not

848
00:31:17,600 --> 00:31:19,919
it cannot it cannot learn in particular

849
00:31:19,919 --> 00:31:21,360
this value because it has a very large

850
00:31:21,360 --> 00:31:23,120
degree it cannot get enough shares and

851
00:31:23,120 --> 00:31:24,799
because it can learn this value it

852
00:31:24,799 --> 00:31:27,200
cannot learn this value

853
00:31:27,200 --> 00:31:29,200
these type of sharings are called

854
00:31:29,200 --> 00:31:31,120
leveled sharings and they were

855
00:31:31,120 --> 00:31:33,039
introduced in the original work the

856
00:31:33,039 --> 00:31:35,120
first attention i give on i gave on the

857
00:31:35,120 --> 00:31:36,240
dynamic

858
00:31:36,240 --> 00:31:38,480
npc setting

859
00:31:38,480 --> 00:31:41,760
so with this type of sharings

860
00:31:41,760 --> 00:31:43,279
whenever you want to reconstruct a

861
00:31:43,279 --> 00:31:45,919
secret share value we do it like this

862
00:31:45,919 --> 00:31:49,919
first for d equal to l down to one you

863
00:31:49,919 --> 00:31:51,919
reconstruct each degree so the particles

864
00:31:51,919 --> 00:31:54,480
begin trying to reconstruct this one

865
00:31:54,480 --> 00:31:56,480
then they reconstruct the next one up to

866
00:31:56,480 --> 00:31:58,720
uh until the last one they try to learn

867
00:31:58,720 --> 00:32:00,320
c1

868
00:32:00,320 --> 00:32:02,559
either each of these because we're using

869
00:32:02,559 --> 00:32:04,320
some musical sharing with max in the

870
00:32:04,320 --> 00:32:06,720
honest majority setting where you only

871
00:32:06,720 --> 00:32:08,080
have error detection you don't have

872
00:32:08,080 --> 00:32:09,519
error correction

873
00:32:09,519 --> 00:32:11,039
the protocol can fail so either the

874
00:32:11,039 --> 00:32:12,960
protocol succeeds

875
00:32:12,960 --> 00:32:15,279
but if it fails

876
00:32:15,279 --> 00:32:17,039
a good thing is that because we're using

877
00:32:17,039 --> 00:32:18,640
max and the way that everything is

878
00:32:18,640 --> 00:32:20,080
designed

879
00:32:20,080 --> 00:32:22,640
the parties will be able to identify key

880
00:32:22,640 --> 00:32:26,000
a ka active parties and kf fell to

881
00:32:26,000 --> 00:32:29,120
parties such that the degree is greater

882
00:32:29,120 --> 00:32:31,360
than or equal to this quantity

883
00:32:31,360 --> 00:32:33,440
this is a rather standard when we use

884
00:32:33,440 --> 00:32:35,039
max with similar secret sharing but to

885
00:32:35,039 --> 00:32:36,720
give you an idea about why this works

886
00:32:36,720 --> 00:32:38,880
just very intuitively

887
00:32:38,880 --> 00:32:40,799
uh whenever you try to reconstruct

888
00:32:40,799 --> 00:32:43,919
shares with this degree

889
00:32:43,919 --> 00:32:45,440
everyone will announce their shares and

890
00:32:45,440 --> 00:32:47,279
their marks and their tax

891
00:32:47,279 --> 00:32:49,679
and maybe the corrupt parties the active

892
00:32:49,679 --> 00:32:51,039
required parties and maybe the fellows

893
00:32:51,039 --> 00:32:53,120
of parties won't do this so

894
00:32:53,120 --> 00:32:54,799
for sure you're going to have n shares

895
00:32:54,799 --> 00:32:57,200
at the end because they are announced by

896
00:32:57,200 --> 00:32:58,799
all the parties but you have to subtract

897
00:32:58,799 --> 00:33:00,399
the possible ones that will not be

898
00:33:00,399 --> 00:33:02,320
broadcasted that will not be sent which

899
00:33:02,320 --> 00:33:03,600
are the ones corresponding to the

900
00:33:03,600 --> 00:33:05,200
actively corrupt parties and the ones

901
00:33:05,200 --> 00:33:07,039
corrupting to different subparties so

902
00:33:07,039 --> 00:33:08,240
this is the number of shares that the

903
00:33:08,240 --> 00:33:10,640
parties have at the end and if this the

904
00:33:10,640 --> 00:33:12,559
if these are larger

905
00:33:12,559 --> 00:33:14,960
than deeply d plus one

906
00:33:14,960 --> 00:33:16,880
larger than equal to d plus one then

907
00:33:16,880 --> 00:33:18,320
they can't reconstruct because this is

908
00:33:18,320 --> 00:33:20,240
larger than the degree so if they could

909
00:33:20,240 --> 00:33:21,760
not reconstruct this because this

910
00:33:21,760 --> 00:33:23,519
quantity was not larger than that so

911
00:33:23,519 --> 00:33:26,159
it's smaller than or equal to d this is

912
00:33:26,159 --> 00:33:28,399
an intuition why if the reconstruction

913
00:33:28,399 --> 00:33:30,880
of cd with degree d fails is because a

914
00:33:30,880 --> 00:33:32,799
lot of parties misbehave actively and

915
00:33:32,799 --> 00:33:34,000
fail stop

916
00:33:34,000 --> 00:33:36,399
and the number of shares obtained at the

917
00:33:36,399 --> 00:33:38,399
end was not enough so this is upper

918
00:33:38,399 --> 00:33:39,600
bounded by d

919
00:33:39,600 --> 00:33:41,120
so this is the property of the secretion

920
00:33:41,120 --> 00:33:43,679
scheme you can reconstruct

921
00:33:43,679 --> 00:33:45,919
a by starting with a larger degree down

922
00:33:45,919 --> 00:33:48,720
to the lowest degree and if one of these

923
00:33:48,720 --> 00:33:50,240
reconstructions fail

924
00:33:50,240 --> 00:33:51,840
then it's because the parties can

925
00:33:51,840 --> 00:33:53,440
identify certain number of active

926
00:33:53,440 --> 00:33:55,200
parties certain number of elder parties

927
00:33:55,200 --> 00:33:57,120
such that this inequality holds this

928
00:33:57,120 --> 00:34:00,320
will be important later on

929
00:34:00,720 --> 00:34:03,679
so let me claim the following

930
00:34:03,679 --> 00:34:06,080
assume that d is greater than one we

931
00:34:06,080 --> 00:34:07,360
claim that

932
00:34:07,360 --> 00:34:09,599
if the reconstruction of z d with degree

933
00:34:09,599 --> 00:34:11,839
d results in a board

934
00:34:11,839 --> 00:34:13,760
then the adversary then does not learn

935
00:34:13,760 --> 00:34:15,359
the next value

936
00:34:15,359 --> 00:34:17,119
and this is enough to get fairness

937
00:34:17,119 --> 00:34:18,159
because

938
00:34:18,159 --> 00:34:20,480
it means that maybe the adversary when

939
00:34:20,480 --> 00:34:23,199
they are reconstructing zl

940
00:34:23,199 --> 00:34:25,918
maybe the adversary gets to learn zeal

941
00:34:25,918 --> 00:34:27,679
and again the reconstruction of shamir

942
00:34:27,679 --> 00:34:30,239
values shamir plain values is hard to

943
00:34:30,239 --> 00:34:31,839
make fair so maybe the adversary can

944
00:34:31,839 --> 00:34:33,119
learn zl

945
00:34:33,119 --> 00:34:35,520
and no one else learns cl this may

946
00:34:35,520 --> 00:34:37,918
sounds like like a breach for fairness

947
00:34:37,918 --> 00:34:40,320
but it's not because the claim shows

948
00:34:40,320 --> 00:34:41,679
that even though the brazilians have

949
00:34:41,679 --> 00:34:43,918
value diversity will not learn the next

950
00:34:43,918 --> 00:34:46,159
one and that personally needs all of

951
00:34:46,159 --> 00:34:49,359
them to be able to get z

952
00:34:49,359 --> 00:34:50,879
so this is why

953
00:34:50,879 --> 00:34:53,760
this will give you fairness

954
00:34:53,760 --> 00:34:56,719
so if diversity hits an opening cd it

955
00:34:56,719 --> 00:34:59,040
will not get zd minus one by the way

956
00:34:59,040 --> 00:35:00,640
this is assuming that these greater than

957
00:35:00,640 --> 00:35:02,720
one the case of d equal to one is handle

958
00:35:02,720 --> 00:35:04,480
slightly different and i leave the

959
00:35:04,480 --> 00:35:06,720
details for for the paper so i refer you

960
00:35:06,720 --> 00:35:08,240
to that

961
00:35:08,240 --> 00:35:11,759
so how do we prove this claim

962
00:35:11,920 --> 00:35:13,040
so

963
00:35:13,040 --> 00:35:16,160
first we know that if the reconstruction

964
00:35:16,160 --> 00:35:17,280
of cd

965
00:35:17,280 --> 00:35:19,359
with the greedy results in a board is

966
00:35:19,359 --> 00:35:22,400
because there are at least ki ka active

967
00:35:22,400 --> 00:35:25,200
parties and kf feldstep parties such

968
00:35:25,200 --> 00:35:27,520
that these inequality holds and the

969
00:35:27,520 --> 00:35:29,760
parties can identify these

970
00:35:29,760 --> 00:35:31,280
the honest partners can identify this

971
00:35:31,280 --> 00:35:33,920
set of parts

972
00:35:34,480 --> 00:35:36,960
so in particular if they are ka active

973
00:35:36,960 --> 00:35:39,359
parties we don't know anything about ta

974
00:35:39,359 --> 00:35:41,520
ta is the number of active parties they

975
00:35:41,520 --> 00:35:43,599
adversely chose to corrupt we don't know

976
00:35:43,599 --> 00:35:45,680
anything but because we know we identify

977
00:35:45,680 --> 00:35:47,359
at least ka of them

978
00:35:47,359 --> 00:35:49,839
well ta has to be for sure greater than

979
00:35:49,839 --> 00:35:51,839
or equal to ka

980
00:35:51,839 --> 00:35:53,760
and the same for tftf has to be greater

981
00:35:53,760 --> 00:35:55,839
than or equal to kf because we identify

982
00:35:55,839 --> 00:35:59,040
kf first of parties

983
00:35:59,040 --> 00:36:00,079
so now we can bring all these

984
00:36:00,079 --> 00:36:01,680
inequalities together

985
00:36:01,680 --> 00:36:04,640
a a also with the help of the one we

986
00:36:04,640 --> 00:36:06,320
started with which is the the main

987
00:36:06,320 --> 00:36:08,480
inequality for statistically securing pc

988
00:36:08,480 --> 00:36:10,880
2t a plus tf less than n

989
00:36:10,880 --> 00:36:13,200
and when we combine them we essentially

990
00:36:13,200 --> 00:36:14,160
get

991
00:36:14,160 --> 00:36:16,880
we essentially get this big inequality

992
00:36:16,880 --> 00:36:19,760
so we essentially get that d is greater

993
00:36:19,760 --> 00:36:23,119
than ta so the adversary has

994
00:36:23,119 --> 00:36:25,760
less than these shares

995
00:36:25,760 --> 00:36:28,400
why is this well the adversary

996
00:36:28,400 --> 00:36:30,720
disrupted the reconstruction of zd so

997
00:36:30,720 --> 00:36:32,000
everything stopped there the vertical

998
00:36:32,000 --> 00:36:34,160
stop there so the so regarding the

999
00:36:34,160 --> 00:36:36,800
shares of cd minus one the only thing

1000
00:36:36,800 --> 00:36:38,960
that the adversary has is the shares

1001
00:36:38,960 --> 00:36:40,800
from the corrupt parties because it

1002
00:36:40,800 --> 00:36:42,880
never received any message from for that

1003
00:36:42,880 --> 00:36:44,240
for that reconstruction because the

1004
00:36:44,240 --> 00:36:45,440
protocol stopped before that

1005
00:36:45,440 --> 00:36:48,000
reconstruction so the adversary only

1006
00:36:48,000 --> 00:36:51,520
gets ta shares but they are less than d

1007
00:36:51,520 --> 00:36:53,359
and if you want to reconstruct a degree

1008
00:36:53,359 --> 00:36:55,599
d minus one sharing you need

1009
00:36:55,599 --> 00:36:57,680
well at least d so this shows that the

1010
00:36:57,680 --> 00:37:00,000
adversary who only has ta sharings does

1011
00:37:00,000 --> 00:37:01,440
not have enough to reconstruct this

1012
00:37:01,440 --> 00:37:03,680
sharing down here

1013
00:37:03,680 --> 00:37:05,119
and this is why

1014
00:37:05,119 --> 00:37:08,400
the claim follows

1015
00:37:08,400 --> 00:37:10,640
so with this we conclude the proof of

1016
00:37:10,640 --> 00:37:11,440
the

1017
00:37:11,440 --> 00:37:12,560
upper bound

1018
00:37:12,560 --> 00:37:14,240
i would like to recall again this means

1019
00:37:14,240 --> 00:37:16,640
that we can get a statistically secure

1020
00:37:16,640 --> 00:37:18,800
protocol for secure function evaluation

1021
00:37:18,800 --> 00:37:21,040
in the dynamic setting and i roughly

1022
00:37:21,040 --> 00:37:23,839
gave you an idea about how it worked a

1023
00:37:23,839 --> 00:37:25,359
general template

1024
00:37:25,359 --> 00:37:26,800
so now i would like to bring your

1025
00:37:26,800 --> 00:37:28,880
attention to the lower to the lower

1026
00:37:28,880 --> 00:37:29,839
bound

1027
00:37:29,839 --> 00:37:31,599
for these protocols

1028
00:37:31,599 --> 00:37:33,200
and the interesting thing is that if you

1029
00:37:33,200 --> 00:37:36,079
notice this protocol needed to restart a

1030
00:37:36,079 --> 00:37:39,200
lot so bringing you back to

1031
00:37:39,200 --> 00:37:40,480
to where we had the template of the

1032
00:37:40,480 --> 00:37:42,560
protocol the protocol had to go back a

1033
00:37:42,560 --> 00:37:44,160
lot so if something went wrong you go

1034
00:37:44,160 --> 00:37:45,920
back and go back and go back and in the

1035
00:37:45,920 --> 00:37:48,079
worst case it can go back a lot of times

1036
00:37:48,079 --> 00:37:49,440
it can go back essentially number of

1037
00:37:49,440 --> 00:37:50,800
times that is proportional to the number

1038
00:37:50,800 --> 00:37:53,119
of parties because in every run

1039
00:37:53,119 --> 00:37:56,880
a new a corrupt party is identified so

1040
00:37:56,880 --> 00:37:58,800
it has a running it has a round count

1041
00:37:58,800 --> 00:38:00,880
that is proportional to n and what we

1042
00:38:00,880 --> 00:38:02,640
show here is that being proportional to

1043
00:38:02,640 --> 00:38:04,240
n having a round count proportional 20

1044
00:38:04,240 --> 00:38:05,839
is actually inherent

1045
00:38:05,839 --> 00:38:06,640
so

1046
00:38:06,640 --> 00:38:08,240
to show this we're going to suppose that

1047
00:38:08,240 --> 00:38:11,359
there exists a dynamic and also fair

1048
00:38:11,359 --> 00:38:12,880
statistically secure protocol with

1049
00:38:12,880 --> 00:38:14,160
exactly

1050
00:38:14,160 --> 00:38:15,920
and fourth rounds

1051
00:38:15,920 --> 00:38:17,520
and we're going to show that this is not

1052
00:38:17,520 --> 00:38:19,839
possible

1053
00:38:19,839 --> 00:38:21,359
so let's get started with the lower

1054
00:38:21,359 --> 00:38:23,440
bound

1055
00:38:23,440 --> 00:38:26,160
to this end consider

1056
00:38:26,160 --> 00:38:28,400
first the following scenario so we have

1057
00:38:28,400 --> 00:38:30,640
the end part is here

1058
00:38:30,640 --> 00:38:32,560
and the adversary chooses the following

1059
00:38:32,560 --> 00:38:33,680
corruptions

1060
00:38:33,680 --> 00:38:36,560
it chooses to corrupt actively the first

1061
00:38:36,560 --> 00:38:38,400
and fourth parties

1062
00:38:38,400 --> 00:38:40,560
it chooses to make the

1063
00:38:40,560 --> 00:38:43,440
middle and have -1 parties to fail stop

1064
00:38:43,440 --> 00:38:44,960
at some point

1065
00:38:44,960 --> 00:38:46,800
and well the remaining parties which you

1066
00:38:46,800 --> 00:38:49,440
can compute will be n4 plus one they

1067
00:38:49,440 --> 00:38:51,680
will remain honest again here we're

1068
00:38:51,680 --> 00:38:54,079
assuming by the way that two t a plus t

1069
00:38:54,079 --> 00:38:55,359
f is less than n

1070
00:38:55,359 --> 00:38:57,119
and you can see that these satisfy this

1071
00:38:57,119 --> 00:38:59,599
balance because two and four

1072
00:38:59,599 --> 00:39:02,800
plus two and half minus one

1073
00:39:02,800 --> 00:39:06,800
it is it will be exactly less than it

1074
00:39:06,800 --> 00:39:08,960
so this is the first scenario

1075
00:39:08,960 --> 00:39:11,040
this is the adversarial structure this

1076
00:39:11,040 --> 00:39:13,440
is what the adversary chooses and the

1077
00:39:13,440 --> 00:39:14,960
strategy in the actual protocol

1078
00:39:14,960 --> 00:39:17,040
execution looks like it looks as follows

1079
00:39:17,040 --> 00:39:18,079
so

1080
00:39:18,079 --> 00:39:20,240
r by the way is the number of rounds in

1081
00:39:20,240 --> 00:39:23,599
round one the protocol the the the cross

1082
00:39:23,599 --> 00:39:25,359
part just follow the protocol normally

1083
00:39:25,359 --> 00:39:27,119
and the fail stop parts is also follow

1084
00:39:27,119 --> 00:39:28,640
the protocol normally they won't crash

1085
00:39:28,640 --> 00:39:29,920
yet

1086
00:39:29,920 --> 00:39:31,599
in round two will be the same so the

1087
00:39:31,599 --> 00:39:33,119
protocol execution will continue

1088
00:39:33,119 --> 00:39:35,920
normally even up to run round r minus

1089
00:39:35,920 --> 00:39:38,079
one but in round r

1090
00:39:38,079 --> 00:39:40,000
when the part is sent to each other the

1091
00:39:40,000 --> 00:39:42,480
last messages they are supposed to send

1092
00:39:42,480 --> 00:39:44,000
the adversary

1093
00:39:44,000 --> 00:39:46,240
will cause the actively cropped parts to

1094
00:39:46,240 --> 00:39:49,200
stay silent and it will cause the

1095
00:39:49,200 --> 00:39:52,800
first top parties to also stay silent

1096
00:39:52,800 --> 00:39:54,400
what does this mean

1097
00:39:54,400 --> 00:39:56,720
let's analyze what these situations tell

1098
00:39:56,720 --> 00:39:58,560
so

1099
00:39:58,560 --> 00:40:00,160
here in the last round these parties

1100
00:40:00,160 --> 00:40:01,680
will not talk

1101
00:40:01,680 --> 00:40:04,319
but remember because the adversary is

1102
00:40:04,319 --> 00:40:05,680
rushing

1103
00:40:05,680 --> 00:40:07,760
the adversary will actually get the

1104
00:40:07,760 --> 00:40:10,720
shares we will get all the messages

1105
00:40:10,720 --> 00:40:12,560
so so at the end of the round the file

1106
00:40:12,560 --> 00:40:13,920
stop parties are supposed to send some

1107
00:40:13,920 --> 00:40:14,880
messages

1108
00:40:14,880 --> 00:40:16,960
the adversary will get those messages

1109
00:40:16,960 --> 00:40:19,440
but the honest parties will not so let's

1110
00:40:19,440 --> 00:40:21,440
analyze the situation

1111
00:40:21,440 --> 00:40:23,760
the adversary learns the output

1112
00:40:23,760 --> 00:40:25,200
why does that because it learns the

1113
00:40:25,200 --> 00:40:27,599
output because it behaves the adversary

1114
00:40:27,599 --> 00:40:29,440
behaves normally during the whole

1115
00:40:29,440 --> 00:40:31,440
protocol execution and as i just

1116
00:40:31,440 --> 00:40:32,960
mentioned that website gets the last

1117
00:40:32,960 --> 00:40:34,000
messages

1118
00:40:34,000 --> 00:40:35,599
so from the point of view of the bursary

1119
00:40:35,599 --> 00:40:37,359
the execution just happened successfully

1120
00:40:37,359 --> 00:40:39,359
the adversary received all the possible

1121
00:40:39,359 --> 00:40:41,040
messages in the protocol and because the

1122
00:40:41,040 --> 00:40:43,200
protocol is supposed to be well correct

1123
00:40:43,200 --> 00:40:45,520
it it gives the adversary the the

1124
00:40:45,520 --> 00:40:47,280
possibility or the

1125
00:40:47,280 --> 00:40:50,000
ability to compute the output

1126
00:40:50,000 --> 00:40:51,440
so because the adversary learns the

1127
00:40:51,440 --> 00:40:52,560
output

1128
00:40:52,560 --> 00:40:54,880
and the protocol is fair

1129
00:40:54,880 --> 00:40:56,720
the honest part is also must get the

1130
00:40:56,720 --> 00:40:58,000
output this is the definition of

1131
00:40:58,000 --> 00:40:59,680
fairness if the adversary gets the

1132
00:40:59,680 --> 00:41:01,200
output the honest practice must get it

1133
00:41:01,200 --> 00:41:03,520
as well

1134
00:41:04,000 --> 00:41:06,079
however the interesting thing is that

1135
00:41:06,079 --> 00:41:08,400
the honest part is even though they got

1136
00:41:08,400 --> 00:41:10,480
the output as i just mentioned

1137
00:41:10,480 --> 00:41:12,480
they did not get any message in the last

1138
00:41:12,480 --> 00:41:14,240
round because that's the strategy the

1139
00:41:14,240 --> 00:41:16,480
adversary chose the the messages the

1140
00:41:16,480 --> 00:41:17,920
parties get here

1141
00:41:17,920 --> 00:41:20,640
it they only come from among themselves

1142
00:41:20,640 --> 00:41:21,839
they never heard from the failed

1143
00:41:21,839 --> 00:41:23,760
subparties or they never heard from the

1144
00:41:23,760 --> 00:41:25,839
from the actively corrupt parties in the

1145
00:41:25,839 --> 00:41:27,839
last round

1146
00:41:27,839 --> 00:41:29,119
what does it mean

1147
00:41:29,119 --> 00:41:31,119
if the honest parties got the output but

1148
00:41:31,119 --> 00:41:32,720
they never got any message in the last

1149
00:41:32,720 --> 00:41:34,240
round is because they knew the output

1150
00:41:34,240 --> 00:41:36,800
already in the previous round so here in

1151
00:41:36,800 --> 00:41:39,839
round r minus one the honest parties

1152
00:41:39,839 --> 00:41:42,960
already got the out

1153
00:41:43,760 --> 00:41:46,240
and well this is a particular strategy

1154
00:41:46,240 --> 00:41:47,599
that we chose with the adversary

1155
00:41:47,599 --> 00:41:50,319
corrupting the first set of parties uh

1156
00:41:50,319 --> 00:41:52,160
actively and so on but this if you are

1157
00:41:52,160 --> 00:41:54,800
rearranged for any subset you can you

1158
00:41:54,800 --> 00:41:56,640
can essentially prove that

1159
00:41:56,640 --> 00:41:59,280
any set a yeah by the way when you do

1160
00:41:59,280 --> 00:42:01,200
the count again there are n4 plus one on

1161
00:42:01,200 --> 00:42:04,160
sparky so any set of n4

1162
00:42:04,160 --> 00:42:06,079
plus one parties

1163
00:42:06,079 --> 00:42:09,359
that you choose already know the output

1164
00:42:09,359 --> 00:42:11,520
in round r minus one so not only this

1165
00:42:11,520 --> 00:42:13,920
subset down here this subset has n four

1166
00:42:13,920 --> 00:42:17,520
plus one any subset you choose down here

1167
00:42:17,520 --> 00:42:19,839
of size and four plus one

1168
00:42:19,839 --> 00:42:22,720
already knows the output in that round

1169
00:42:22,720 --> 00:42:24,480
not in the last one they like as i've

1170
00:42:24,480 --> 00:42:26,079
said of this size does not need to go to

1171
00:42:26,079 --> 00:42:27,760
the last round if they get together they

1172
00:42:27,760 --> 00:42:31,119
already will know the output

1173
00:42:31,119 --> 00:42:31,920
okay

1174
00:42:31,920 --> 00:42:34,560
so that one was one scenario now

1175
00:42:34,560 --> 00:42:36,160
consider this second scenario now the

1176
00:42:36,160 --> 00:42:39,280
adversary will not corrupt in fourth

1177
00:42:39,280 --> 00:42:40,800
but instead of corrupting it fourth

1178
00:42:40,800 --> 00:42:42,800
actively it will corrupt in fourth plus

1179
00:42:42,800 --> 00:42:45,200
one actively

1180
00:42:45,200 --> 00:42:47,520
in addition it will corrupt

1181
00:42:47,520 --> 00:42:49,839
because it's corrupting one more

1182
00:42:49,839 --> 00:42:53,520
active party for every new active party

1183
00:42:53,520 --> 00:42:56,000
it has to subtract two

1184
00:42:56,000 --> 00:42:57,280
failed stock parties so instead of

1185
00:42:57,280 --> 00:42:59,040
corrupting in half minus one it will

1186
00:42:59,040 --> 00:43:00,800
corrupt and half minus three

1187
00:43:00,800 --> 00:43:02,720
face off parties and the rest will be

1188
00:43:02,720 --> 00:43:04,800
honest how many are the rest you can

1189
00:43:04,800 --> 00:43:07,839
check it will be n fourth plus two

1190
00:43:07,839 --> 00:43:11,040
this is the new adversarial uh choice

1191
00:43:11,040 --> 00:43:12,880
like this is the the choice that that

1192
00:43:12,880 --> 00:43:14,079
person would make

1193
00:43:14,079 --> 00:43:15,839
regarding the active

1194
00:43:15,839 --> 00:43:18,560
parties and the fellow parties

1195
00:43:18,560 --> 00:43:19,599
so

1196
00:43:19,599 --> 00:43:21,119
the strategy in the protocol execution

1197
00:43:21,119 --> 00:43:24,079
would be like this round one will be

1198
00:43:24,079 --> 00:43:25,599
just like nothing happened everyone

1199
00:43:25,599 --> 00:43:28,160
would behave honest round all the rounds

1200
00:43:28,160 --> 00:43:30,000
up to round r minus two would be like

1201
00:43:30,000 --> 00:43:33,520
that but in round r minus one

1202
00:43:33,520 --> 00:43:35,599
the actively corrupt parties will remain

1203
00:43:35,599 --> 00:43:37,359
silent and the field stop parties will

1204
00:43:37,359 --> 00:43:38,880
remain silent

1205
00:43:38,880 --> 00:43:41,920
and well the honest parties

1206
00:43:41,920 --> 00:43:44,480
they they will only hear from them from

1207
00:43:44,480 --> 00:43:46,480
from among each other right because they

1208
00:43:46,480 --> 00:43:47,599
never get the messages from these

1209
00:43:47,599 --> 00:43:50,000
parties here well and in the rest of the

1210
00:43:50,000 --> 00:43:54,319
like they remain silent from now onwards

1211
00:43:54,319 --> 00:43:55,920
so let's analyze this execution it's

1212
00:43:55,920 --> 00:43:59,040
similar as before the adversary controls

1213
00:43:59,040 --> 00:44:01,359
and fourth plus one parties right this

1214
00:44:01,359 --> 00:44:03,359
is what the adversary is controlling it

1215
00:44:03,359 --> 00:44:05,280
can see their state

1216
00:44:05,280 --> 00:44:08,880
and even though the adversary got a here

1217
00:44:08,880 --> 00:44:10,960
the corrupt parties they don't speak

1218
00:44:10,960 --> 00:44:12,000
here

1219
00:44:12,000 --> 00:44:13,440
again because the adversary is rushing

1220
00:44:13,440 --> 00:44:15,040
they will get all the messages so they

1221
00:44:15,040 --> 00:44:16,400
will get the messages coming from the

1222
00:44:16,400 --> 00:44:17,839
film stop and also from the honest

1223
00:44:17,839 --> 00:44:20,079
parties so it means because of the

1224
00:44:20,079 --> 00:44:22,400
previous result the adversary corrupts

1225
00:44:22,400 --> 00:44:24,480
n4 plus one parties

1226
00:44:24,480 --> 00:44:26,160
in round r minus one gets all the

1227
00:44:26,160 --> 00:44:28,480
messages so the previous conclusion

1228
00:44:28,480 --> 00:44:30,160
leads us to

1229
00:44:30,160 --> 00:44:31,920
to determine that the adversary will

1230
00:44:31,920 --> 00:44:35,040
learn the output in round r minus one

1231
00:44:35,040 --> 00:44:36,880
so the adversary gets the output index

1232
00:44:36,880 --> 00:44:39,359
execution why just to recap again it

1233
00:44:39,359 --> 00:44:41,040
gets all the messages in round r minus

1234
00:44:41,040 --> 00:44:43,599
one and it crops as a set of size and

1235
00:44:43,599 --> 00:44:45,280
four plus one which is enough to get the

1236
00:44:45,280 --> 00:44:47,280
output in round r minus one because of

1237
00:44:47,280 --> 00:44:49,200
our previous analysis in the in the

1238
00:44:49,200 --> 00:44:50,400
previous scenario

1239
00:44:50,400 --> 00:44:52,000
so now from fairness because the

1240
00:44:52,000 --> 00:44:53,280
adversary get the output the honest

1241
00:44:53,280 --> 00:44:54,960
partners have to get as well in round or

1242
00:44:54,960 --> 00:44:56,720
minus one but once again they don't

1243
00:44:56,720 --> 00:44:58,560
receive any message they they don't

1244
00:44:58,560 --> 00:45:01,040
receive any message

1245
00:45:01,040 --> 00:45:04,240
from from that round so they they only

1246
00:45:04,240 --> 00:45:06,640
got the messages from this round

1247
00:45:06,640 --> 00:45:08,640
so conclusion

1248
00:45:08,640 --> 00:45:10,400
it means that the honest party knew the

1249
00:45:10,400 --> 00:45:12,960
output already in round r minus two my

1250
00:45:12,960 --> 00:45:14,560
apologies for this type

1251
00:45:14,560 --> 00:45:16,640
so the so the part is already new the

1252
00:45:16,640 --> 00:45:21,200
output in the previous round so here

1253
00:45:23,680 --> 00:45:25,200
so you can see that what we're doing we

1254
00:45:25,200 --> 00:45:27,680
can continue the pattern we can continue

1255
00:45:27,680 --> 00:45:29,359
we can consider a new scenario in which

1256
00:45:29,359 --> 00:45:31,359
the adversary corrupts not n4 plus one

1257
00:45:31,359 --> 00:45:33,440
but then four plus two parties

1258
00:45:33,440 --> 00:45:35,200
and and then adapts the fails of

1259
00:45:35,200 --> 00:45:38,000
corruptions appropriately and this will

1260
00:45:38,000 --> 00:45:40,240
bring the adversary to know the output

1261
00:45:40,240 --> 00:45:42,400
even in a previous round

1262
00:45:42,400 --> 00:45:46,079
and if we iterate this argument

1263
00:45:46,079 --> 00:45:48,000
we can show

1264
00:45:48,000 --> 00:45:50,400
that the adversary already knows the

1265
00:45:50,400 --> 00:45:52,480
output in the first round

1266
00:45:52,480 --> 00:45:54,560
so you can you can essentially collapse

1267
00:45:54,560 --> 00:45:56,319
this argument down to the first round

1268
00:45:56,319 --> 00:45:57,920
but this is impossible you cannot get a

1269
00:45:57,920 --> 00:45:59,680
protocol in which the adversary learns

1270
00:45:59,680 --> 00:46:01,920
the result in the first round because

1271
00:46:01,920 --> 00:46:04,000
then it can always get the messages from

1272
00:46:04,000 --> 00:46:06,640
the from from the honest parties and use

1273
00:46:06,640 --> 00:46:08,400
those messages to evaluate the function

1274
00:46:08,400 --> 00:46:10,800
on any inputs of its own choice and this

1275
00:46:10,800 --> 00:46:13,359
leads to what we call residual attacks

1276
00:46:13,359 --> 00:46:14,800
it's not something allowed by the mpc

1277
00:46:14,800 --> 00:46:16,800
functionality

1278
00:46:16,800 --> 00:46:18,880
okay so this is essentially the general

1279
00:46:18,880 --> 00:46:20,480
idea of a lower bound i know a lot of

1280
00:46:20,480 --> 00:46:22,960
details are left in

1281
00:46:22,960 --> 00:46:25,040
are not discussed here but i invite you

1282
00:46:25,040 --> 00:46:26,560
to read the paper to to learn about

1283
00:46:26,560 --> 00:46:28,240
these details

1284
00:46:28,240 --> 00:46:29,680
i also want to mention this is the

1285
00:46:29,680 --> 00:46:31,599
overview of our results this is a chart

1286
00:46:31,599 --> 00:46:33,760
it is a table from the paper so we

1287
00:46:33,760 --> 00:46:36,560
discussed a god sfv in the statistical

1288
00:46:36,560 --> 00:46:38,400
setting and we also discussed that it

1289
00:46:38,400 --> 00:46:42,400
requires a in rounds some of the results

1290
00:46:42,400 --> 00:46:44,800
are similar in terms of the upper bound

1291
00:46:44,800 --> 00:46:47,599
but all these results here of course i

1292
00:46:47,599 --> 00:46:49,040
didn't have the time to discuss so i

1293
00:46:49,040 --> 00:46:50,880
invite you to read the paper for

1294
00:46:50,880 --> 00:46:52,880
for getting details on this additional

1295
00:46:52,880 --> 00:46:53,839
results

1296
00:46:53,839 --> 00:46:55,839
with that i would like to conclude thank

1297
00:46:55,839 --> 00:46:57,359
you so much for your attention open to

1298
00:46:57,359 --> 00:46:58,640
questions and invite you to read the

1299
00:46:58,640 --> 00:47:02,160
paper rules thank you so much

