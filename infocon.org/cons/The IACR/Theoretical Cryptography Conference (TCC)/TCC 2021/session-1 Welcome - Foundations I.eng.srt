1
00:00:00,080 --> 00:00:02,159
this in a while how many people this is

2
00:00:02,159 --> 00:00:04,640
their first conference since the whole

3
00:00:04,640 --> 00:00:06,160
deal

4
00:00:06,160 --> 00:00:07,680
i mean yeah

5
00:00:07,680 --> 00:00:09,920
the euro was wasn't there

6
00:00:09,920 --> 00:00:12,480
but okay so first um i just wanted uh

7
00:00:12,480 --> 00:00:15,599
kobe uh i'm brett waters i'm co co-chair

8
00:00:15,599 --> 00:00:17,520
with kobe kingston uh we just wanted to

9
00:00:17,520 --> 00:00:19,039
welcome everyone here

10
00:00:19,039 --> 00:00:21,600
uh first thank a few people first uh the

11
00:00:21,600 --> 00:00:23,840
program committee members uh we worked

12
00:00:23,840 --> 00:00:25,840
really hard to uh

13
00:00:25,840 --> 00:00:28,000
to get to get it through and also get

14
00:00:28,000 --> 00:00:29,840
things right we found you know really

15
00:00:29,840 --> 00:00:31,359
scrutinized for the errors found some

16
00:00:31,359 --> 00:00:33,440
errors in papers and other conferences

17
00:00:33,440 --> 00:00:36,160
as well as tcc

18
00:00:36,160 --> 00:00:38,079
so we went above and beyond in a few

19
00:00:38,079 --> 00:00:39,120
cases

20
00:00:39,120 --> 00:00:40,320
uh

21
00:00:40,320 --> 00:00:44,000
also we want to thank uh alessandra for

22
00:00:44,000 --> 00:00:46,079
putting this all all together so we

23
00:00:46,079 --> 00:00:48,800
could actually be here and um just

24
00:00:48,800 --> 00:00:50,719
before i hand things off to her

25
00:00:50,719 --> 00:00:52,640
um i'm really glad we were able to do

26
00:00:52,640 --> 00:00:54,079
this in person like this isn't the same

27
00:00:54,079 --> 00:00:56,559
as a 200 person conference but

28
00:00:56,559 --> 00:00:58,879
um i do think i look around some people

29
00:00:58,879 --> 00:01:01,440
like cal sandra danielle that i know and

30
00:01:01,440 --> 00:01:02,960
i think the reason or shy that i know

31
00:01:02,960 --> 00:01:04,559
them is because we're in conferences

32
00:01:04,559 --> 00:01:07,439
together right like i can't imagine

33
00:01:07,439 --> 00:01:09,040
seven years ago i'd be like hey you want

34
00:01:09,040 --> 00:01:11,119
to go to private zoom room and see if we

35
00:01:11,119 --> 00:01:12,720
have something in common

36
00:01:12,720 --> 00:01:15,040
let's see how that works

37
00:01:15,040 --> 00:01:16,720
and you know i feel bad for for the

38
00:01:16,720 --> 00:01:18,320
people who are the first second third

39
00:01:18,320 --> 00:01:19,439
year students

40
00:01:19,439 --> 00:01:21,119
who who need to do this is their main

41
00:01:21,119 --> 00:01:23,119
mechanism right now um

42
00:01:23,119 --> 00:01:25,680
and hopefully i'll actually get to know

43
00:01:25,680 --> 00:01:27,280
uh i don't know most of the people in

44
00:01:27,280 --> 00:01:28,560
here but hopefully we'll get to know

45
00:01:28,560 --> 00:01:29,759
them a little bit better

46
00:01:29,759 --> 00:01:33,040
okay so let's go for it

47
00:01:36,400 --> 00:01:38,799
all right guys let me open up my slides

48
00:01:38,799 --> 00:01:40,890
i'll show the screen

49
00:01:40,890 --> 00:01:43,980
[Music]

50
00:01:44,880 --> 00:01:48,679
am i showing the right

51
00:01:56,479 --> 00:01:59,479
um

52
00:02:18,239 --> 00:02:19,840
sorry guys i'm not sure what screen i'm

53
00:02:19,840 --> 00:02:21,930
supposed to share

54
00:02:21,930 --> 00:02:24,960
[Music]

55
00:02:29,620 --> 00:02:32,720
[Music]

56
00:02:32,720 --> 00:02:35,879
all right

57
00:02:48,800 --> 00:02:51,800
yes

58
00:02:53,130 --> 00:02:55,920
[Music]

59
00:02:55,920 --> 00:02:57,440
i mean are you guys seeing the right

60
00:02:57,440 --> 00:02:58,400
slides

61
00:02:58,400 --> 00:03:00,879
are you saying the presentation yes we

62
00:03:00,879 --> 00:03:02,640
are

63
00:03:02,640 --> 00:03:05,519
okay perfect you are not seeing this um

64
00:03:05,519 --> 00:03:06,640
here

65
00:03:06,640 --> 00:03:09,839
that's uh that's good

66
00:03:10,480 --> 00:03:12,879
but let's see why we're not seeing this

67
00:03:12,879 --> 00:03:14,319
on the screen

68
00:03:14,319 --> 00:03:15,280
um

69
00:03:15,280 --> 00:03:19,239
can somebody run

70
00:03:19,840 --> 00:03:21,040
all right guys this is what's gonna

71
00:03:21,040 --> 00:03:25,079
happen give me one second

72
00:03:35,120 --> 00:03:38,259
[Music]

73
00:04:15,300 --> 00:04:17,680
[Music]

74
00:04:17,680 --> 00:04:19,918
thanks

75
00:04:22,560 --> 00:04:26,000
all right guys uh sorry so welcome

76
00:04:26,000 --> 00:04:28,400
welcome to the hunter library i hope uh

77
00:04:28,400 --> 00:04:31,199
you like this beautiful space a few

78
00:04:31,199 --> 00:04:33,600
remarks of course we are all happy that

79
00:04:33,600 --> 00:04:36,400
you're here and um i would like you to

80
00:04:36,400 --> 00:04:39,759
enjoy uh raleigh this is fall time so i

81
00:04:39,759 --> 00:04:40,479
hope

82
00:04:40,479 --> 00:04:42,560
you take the opportunity there is a lake

83
00:04:42,560 --> 00:04:43,840
across the street

84
00:04:43,840 --> 00:04:46,000
so whenever you have time just free to

85
00:04:46,000 --> 00:04:49,040
walk just two minutes walk to the lake

86
00:04:49,040 --> 00:04:51,680
uh for the investment tcc just uh as a

87
00:04:51,680 --> 00:04:53,600
reminder everything is gonna be here in

88
00:04:53,600 --> 00:04:54,720
this room

89
00:04:54,720 --> 00:04:57,040
so even the online sections are we are

90
00:04:57,040 --> 00:04:58,880
going to be here and let's get zoom

91
00:04:58,880 --> 00:05:01,280
screen uh for the virtual edition is as

92
00:05:01,280 --> 00:05:03,280
usual let's just connect

93
00:05:03,280 --> 00:05:06,720
to the program from uh from the website

94
00:05:06,720 --> 00:05:08,800
um what do we really excuse me can i

95
00:05:08,800 --> 00:05:11,039
interrupt for a moment

96
00:05:11,039 --> 00:05:13,039
the you really should uh go to the

97
00:05:13,039 --> 00:05:15,600
program and then click on the join the

98
00:05:15,600 --> 00:05:18,560
conference button

99
00:05:21,199 --> 00:05:23,840
yes actually that's uh

100
00:05:23,840 --> 00:05:26,479
it was brought up to our attention that

101
00:05:26,479 --> 00:05:29,919
uh for some reason nc state guest

102
00:05:29,919 --> 00:05:31,759
this wi-fi does not allow you to go to

103
00:05:31,759 --> 00:05:33,919
the program uh however it should be fine

104
00:05:33,919 --> 00:05:35,520
because you're gonna be able to watch

105
00:05:35,520 --> 00:05:37,600
the conference from here so you don't

106
00:05:37,600 --> 00:05:39,680
need to connect to zoom

107
00:05:39,680 --> 00:05:42,800
right so likely this is only a problem

108
00:05:42,800 --> 00:05:46,160
for us but we are here and as kevin was

109
00:05:46,160 --> 00:05:47,440
suggesting

110
00:05:47,440 --> 00:05:48,560
if you go

111
00:05:48,560 --> 00:05:51,360
to the program on the website you should

112
00:05:51,360 --> 00:05:54,080
click join the conference okay so that's

113
00:05:54,080 --> 00:05:55,120
uh

114
00:05:55,120 --> 00:05:56,880
if you are remote

115
00:05:56,880 --> 00:05:59,360
uh so what to do enrolling um you must

116
00:05:59,360 --> 00:06:01,759
have received an email from me with

117
00:06:01,759 --> 00:06:03,759
ideas and suggestions so please read

118
00:06:03,759 --> 00:06:05,840
that but if you if you still have

119
00:06:05,840 --> 00:06:08,319
questions just ask me

120
00:06:08,319 --> 00:06:10,960
um then i would like you know to thank a

121
00:06:10,960 --> 00:06:12,240
lot of people

122
00:06:12,240 --> 00:06:14,319
and there's a lot of work behind the

123
00:06:14,319 --> 00:06:16,720
conference all the people that help um

124
00:06:16,720 --> 00:06:19,680
mostly uh the people i think the most

125
00:06:19,680 --> 00:06:22,720
were shy brian douglas and brad who

126
00:06:22,720 --> 00:06:24,160
helped with the

127
00:06:24,160 --> 00:06:24,960
with

128
00:06:24,960 --> 00:06:28,400
with a few organizational details

129
00:06:28,400 --> 00:06:30,080
and then um

130
00:06:30,080 --> 00:06:33,039
big thanks to our sponsors this was

131
00:06:33,039 --> 00:06:34,639
a lot of there was a lot of uncertainty

132
00:06:34,639 --> 00:06:35,600
around

133
00:06:35,600 --> 00:06:36,800
whether this conference was going to

134
00:06:36,800 --> 00:06:37,759
happen

135
00:06:37,759 --> 00:06:40,160
till the very end actually so having you

136
00:06:40,160 --> 00:06:42,800
know the the sponsor was actually a big

137
00:06:42,800 --> 00:06:45,440
big help so thank you so much

138
00:06:45,440 --> 00:06:47,759
and um

139
00:06:47,759 --> 00:06:49,759
that's it uh you guys enjoy the

140
00:06:49,759 --> 00:06:50,880
conference

141
00:06:50,880 --> 00:06:53,440
and at any point if you are tired of

142
00:06:53,440 --> 00:06:55,759
being inside with your mask please feel

143
00:06:55,759 --> 00:06:58,319
free to go outside there is a tent

144
00:06:58,319 --> 00:07:00,479
uh just for you there are chairs and

145
00:07:00,479 --> 00:07:03,280
tables so you can um you can just

146
00:07:03,280 --> 00:07:05,759
sit there and work there okay

147
00:07:05,759 --> 00:07:08,240
all right so we are ready to start with

148
00:07:08,240 --> 00:07:09,680
the first session

149
00:07:09,680 --> 00:07:13,360
and the first the first picture

150
00:07:13,440 --> 00:07:15,840
so that i set

151
00:07:15,840 --> 00:07:20,080
okay i'll set up the presentation

152
00:07:27,280 --> 00:07:28,460
okay

153
00:07:28,460 --> 00:07:39,039
[Music]

154
00:07:42,479 --> 00:07:43,199
and

155
00:07:43,199 --> 00:07:47,080
and the title is simple

156
00:07:51,350 --> 00:07:58,459
[Music]

157
00:08:08,639 --> 00:08:10,560
and so

158
00:08:10,560 --> 00:08:12,720
this talk is about simple constructions

159
00:08:12,720 --> 00:08:15,360
from unknown regular money functions

160
00:08:15,360 --> 00:08:17,440
so as we all know one way functions are

161
00:08:17,440 --> 00:08:18,879
the minimum assumption for

162
00:08:18,879 --> 00:08:20,879
complexity-based crypto

163
00:08:20,879 --> 00:08:23,919
and amazingly it surprises to construct

164
00:08:23,919 --> 00:08:25,599
many useful primitives

165
00:08:25,599 --> 00:08:26,879
including

166
00:08:26,879 --> 00:08:28,800
generators encryption

167
00:08:28,800 --> 00:08:30,800
pseudorandom functions

168
00:08:30,800 --> 00:08:33,120
zero knowledge proofs and more

169
00:08:33,120 --> 00:08:36,159
yet the efficiency of this construction

170
00:08:36,159 --> 00:08:38,240
sometimes do not allow us to implement

171
00:08:38,240 --> 00:08:39,839
the new

172
00:08:39,839 --> 00:08:41,519
and when we're considering the

173
00:08:41,519 --> 00:08:43,039
efficiency of

174
00:08:43,039 --> 00:08:45,839
these primitives we usually consider

175
00:08:45,839 --> 00:08:47,920
they want to minimize the acid or the

176
00:08:47,920 --> 00:08:49,279
keynote

177
00:08:49,279 --> 00:08:50,959
the number of calls to the money

178
00:08:50,959 --> 00:08:52,160
function

179
00:08:52,160 --> 00:08:54,720
and if we can we want to make the calls

180
00:08:54,720 --> 00:08:56,800
to be non-adaptive

181
00:08:56,800 --> 00:08:59,440
in this world we are focusing on plgs

182
00:08:59,440 --> 00:09:01,120
and universal hash function

183
00:09:01,120 --> 00:09:02,480
constructions

184
00:09:02,480 --> 00:09:04,320
for which they are regarding between the

185
00:09:04,320 --> 00:09:05,040
best

186
00:09:05,040 --> 00:09:06,320
upper bounds

187
00:09:06,320 --> 00:09:08,160
and in this talk i'm going to focus on

188
00:09:08,160 --> 00:09:10,640
prg's construction

189
00:09:10,640 --> 00:09:11,600
so

190
00:09:11,600 --> 00:09:13,680
let's start with the state of the art

191
00:09:13,680 --> 00:09:16,399
constructions so the

192
00:09:16,399 --> 00:09:19,440
efficiency of plg's construction

193
00:09:19,440 --> 00:09:21,519
may be dependent on the exact assumption

194
00:09:21,519 --> 00:09:23,600
here on the structure of the one-way

195
00:09:23,600 --> 00:09:25,839
function for example if you assume that

196
00:09:25,839 --> 00:09:28,080
the function is our permutation we can

197
00:09:28,080 --> 00:09:30,320
use the goddess levine article predicate

198
00:09:30,320 --> 00:09:31,600
in order to

199
00:09:31,600 --> 00:09:34,320
construct prg with one call and linear

200
00:09:34,320 --> 00:09:36,399
system excuse me the slides are not

201
00:09:36,399 --> 00:09:41,160
changing you're not sharing properly

202
00:09:48,520 --> 00:09:51,850
[Music]

203
00:10:01,440 --> 00:10:03,600
so for now i'll just fix this quick and

204
00:10:03,600 --> 00:10:04,800
then

205
00:10:04,800 --> 00:10:07,360
is it better now

206
00:10:07,360 --> 00:10:10,560
yeah yes yes

207
00:10:13,200 --> 00:10:14,480
sorry

208
00:10:14,480 --> 00:10:15,839
so if you're seeing the function with

209
00:10:15,839 --> 00:10:17,600
the computation you can use the goddess

210
00:10:17,600 --> 00:10:19,760
levine in order to construct prg with

211
00:10:19,760 --> 00:10:21,200
one part of the value function and

212
00:10:21,200 --> 00:10:22,720
linear signal

213
00:10:22,720 --> 00:10:24,720
if we only assume that the function is

214
00:10:24,720 --> 00:10:27,519
regular meaning that every image has the

215
00:10:27,519 --> 00:10:29,600
same number of images

216
00:10:29,600 --> 00:10:32,560
then we can use similar construction and

217
00:10:32,560 --> 00:10:34,320
get similar parameters

218
00:10:34,320 --> 00:10:35,760
but in order to implement this

219
00:10:35,760 --> 00:10:37,120
construction we need to know the

220
00:10:37,120 --> 00:10:39,200
regularity parameter or the number of

221
00:10:39,200 --> 00:10:41,279
images that every image has

222
00:10:41,279 --> 00:10:43,200
and if we do not know this regularity

223
00:10:43,200 --> 00:10:44,959
parameter we said that the function is

224
00:10:44,959 --> 00:10:46,560
unknown

225
00:10:46,560 --> 00:10:48,399
in this case the best construction error

226
00:10:48,399 --> 00:10:51,360
uses linear number of adaptive chords

227
00:10:51,360 --> 00:10:53,519
and we now save that this isn't your

228
00:10:53,519 --> 00:10:56,320
work of ikea artnic and weingarten julie

229
00:10:56,320 --> 00:10:58,079
and ben

230
00:10:58,079 --> 00:10:59,200
lastly

231
00:10:59,200 --> 00:11:01,200
aston impaleato levine and we'll be sure

232
00:11:01,200 --> 00:11:02,959
that we can use anyone we function in

233
00:11:02,959 --> 00:11:05,200
order to construct building and the

234
00:11:05,200 --> 00:11:08,000
parameters were improved by eight nerve

235
00:11:08,000 --> 00:11:10,959
and badan and zhang up to nq

236
00:11:10,959 --> 00:11:14,959
coils and then cube sealant in the

237
00:11:20,350 --> 00:11:23,600
[Music]

238
00:11:23,600 --> 00:11:26,160
for any prg construction

239
00:11:26,160 --> 00:11:27,920
and this should be compared with the

240
00:11:27,920 --> 00:11:30,560
best upper bound here which is n

241
00:11:30,560 --> 00:11:32,160
and q

242
00:11:32,160 --> 00:11:34,399
however this low voltage also if you

243
00:11:34,399 --> 00:11:36,079
assume a stronger assumption of the

244
00:11:36,079 --> 00:11:38,079
binary function that is that the

245
00:11:38,079 --> 00:11:40,720
function is unknown regular and in this

246
00:11:40,720 --> 00:11:42,240
case we know that the construction is

247
00:11:42,240 --> 00:11:45,440
tight yes it matches the best uh output

248
00:11:45,440 --> 00:11:48,240
we have that uses linear a cause but

249
00:11:48,240 --> 00:11:51,200
this upper bound use adaptive points so

250
00:11:51,200 --> 00:11:53,920
we can ask is this adaptivity necessary

251
00:11:53,920 --> 00:11:57,360
or in other words can we construct a prg

252
00:11:57,360 --> 00:11:59,920
from a regular one-way function that

253
00:11:59,920 --> 00:12:03,120
uses linear number of non-adaptive costs

254
00:12:03,120 --> 00:12:04,800
and in this work we are giving a

255
00:12:04,800 --> 00:12:07,120
positive answer to this question by

256
00:12:07,120 --> 00:12:08,959
showing the non-adaptive constructions

257
00:12:08,959 --> 00:12:11,519
of both prg's and universal runway hash

258
00:12:11,519 --> 00:12:13,920
functions from unknown regular running

259
00:12:13,920 --> 00:12:15,200
functions

260
00:12:15,200 --> 00:12:17,519
the constructions are tight with respect

261
00:12:17,519 --> 00:12:19,200
to the number of cars

262
00:12:19,200 --> 00:12:21,920
and there are relatively simple

263
00:12:21,920 --> 00:12:24,160
but he uses a long seed

264
00:12:24,160 --> 00:12:26,399
the seed of the prg is going to be n

265
00:12:26,399 --> 00:12:28,800
squared which should be compared with

266
00:12:28,800 --> 00:12:32,959
green lc in the adaptive construction

267
00:12:32,959 --> 00:12:34,639
so let me just conclude with the

268
00:12:34,639 --> 00:12:35,839
construction

269
00:12:35,839 --> 00:12:39,440
so let f be an unknown regular function

270
00:12:39,440 --> 00:12:42,079
and let h be a to universal family from

271
00:12:42,079 --> 00:12:45,040
200 so and last log and b

272
00:12:45,040 --> 00:12:46,880
and we need additional properties from

273
00:12:46,880 --> 00:12:49,839
this memory but i'm going to ignore it

274
00:12:49,839 --> 00:12:51,839
so the prg gets its input our

275
00:12:51,839 --> 00:12:54,959
description of our hash function h and

276
00:12:54,959 --> 00:12:57,120
t inputs to the boundary function x one

277
00:12:57,120 --> 00:12:58,160
to x t

278
00:12:58,160 --> 00:13:01,120
and it outputs a and for every pair of

279
00:13:01,120 --> 00:13:05,360
inputs x i x i plus one its output age

280
00:13:05,360 --> 00:13:08,720
applied to x i and f of x

281
00:13:08,720 --> 00:13:10,800
now there are three close to the value

282
00:13:10,800 --> 00:13:11,760
function

283
00:13:11,760 --> 00:13:13,920
and while we are getting this input t

284
00:13:13,920 --> 00:13:16,079
blocks of n bits each we are only

285
00:13:16,079 --> 00:13:18,639
outputting three minus one blocks of n

286
00:13:18,639 --> 00:13:20,160
plus log n b

287
00:13:20,160 --> 00:13:21,839
this is the reason we need to take t to

288
00:13:21,839 --> 00:13:24,000
be large enough larger than n of the

289
00:13:24,000 --> 00:13:25,760
logarithm which is tied with the

290
00:13:25,760 --> 00:13:27,440
government

291
00:13:27,440 --> 00:13:29,120
the second construction we have is a

292
00:13:29,120 --> 00:13:31,040
universal one

293
00:13:31,040 --> 00:13:33,839
in order to construct this primitive it

294
00:13:33,839 --> 00:13:35,600
is enough to construct a function that

295
00:13:35,600 --> 00:13:38,079
is shrinking and for which is

296
00:13:38,079 --> 00:13:39,920
it is how to find that collision for a

297
00:13:39,920 --> 00:13:41,440
random input

298
00:13:41,440 --> 00:13:43,920
and the other construction for universal

299
00:13:43,920 --> 00:13:45,600
hash function is very similar to the

300
00:13:45,600 --> 00:13:47,040
prv1

301
00:13:47,040 --> 00:13:49,360
so now let's h via the universal family

302
00:13:49,360 --> 00:13:52,399
from two n bits to n minus loading bits

303
00:13:52,399 --> 00:13:54,320
and the construction is the same except

304
00:13:54,320 --> 00:13:56,720
that we are now upgrading also f of x

305
00:13:56,720 --> 00:13:58,880
one in the beginning of the output and

306
00:13:58,880 --> 00:14:01,680
the last input xp at that

307
00:14:01,680 --> 00:14:02,399
so

308
00:14:02,399 --> 00:14:04,560
to conclude we presented a non-adaptive

309
00:14:04,560 --> 00:14:06,399
construction of prgs and universal

310
00:14:06,399 --> 00:14:08,240
runway hash functions from unknown

311
00:14:08,240 --> 00:14:10,560
regular running functions

312
00:14:10,560 --> 00:14:12,560
which are tight with respect to another

313
00:14:12,560 --> 00:14:13,839
of course

314
00:14:13,839 --> 00:14:16,000
and we have a few open questions the

315
00:14:16,000 --> 00:14:17,040
first is

316
00:14:17,040 --> 00:14:19,920
can we use similar idea to generalize it

317
00:14:19,920 --> 00:14:22,320
to an arbitrary boundary function the

318
00:14:22,320 --> 00:14:24,800
second is the if if this

319
00:14:24,800 --> 00:14:27,839
input length is optimal and the field is

320
00:14:27,839 --> 00:14:30,000
to find better logos

321
00:14:30,000 --> 00:14:33,240
so thanks

322
00:14:40,490 --> 00:14:43,649
[Applause]

323
00:14:45,690 --> 00:14:48,759
[Music]

324
00:14:58,090 --> 00:15:00,480
[Music]

325
00:15:00,480 --> 00:15:02,320
please repeat the questions so that the

326
00:15:02,320 --> 00:15:04,320
audience can hear them

327
00:15:04,320 --> 00:15:06,639
the question was if you are trading the

328
00:15:06,639 --> 00:15:09,760
side of the scene with the numbers

329
00:15:09,760 --> 00:15:10,880
so

330
00:15:10,880 --> 00:15:13,040
we

331
00:15:15,070 --> 00:15:17,600
[Music]

332
00:15:17,600 --> 00:15:19,440
but we believe that

333
00:15:19,440 --> 00:15:21,839
it is not reasonable

334
00:15:21,839 --> 00:15:23,760
uh

335
00:15:23,760 --> 00:15:26,760
yeah

336
00:15:35,330 --> 00:15:38,429
[Music]

337
00:15:44,880 --> 00:15:46,720
um

338
00:15:46,720 --> 00:15:48,090
i'm not

339
00:15:48,090 --> 00:15:51,190
[Music]

340
00:15:53,519 --> 00:15:58,360
okay sure let's say think not again

341
00:16:31,839 --> 00:16:34,839
um

342
00:16:39,120 --> 00:16:42,360
thank you

343
00:17:07,359 --> 00:17:10,359
conditions

344
00:17:44,000 --> 00:17:46,840
oh

345
00:17:46,840 --> 00:17:50,050
[Music]

346
00:17:53,600 --> 00:17:55,200
you guys remember how

347
00:17:55,200 --> 00:17:58,200
long

348
00:18:12,240 --> 00:18:15,240
hello

349
00:18:30,640 --> 00:18:33,640
uh

350
00:18:49,679 --> 00:18:52,679
okay

351
00:18:56,640 --> 00:18:59,120
that looks good for us on zoom okay

352
00:18:59,120 --> 00:19:00,000
great

353
00:19:00,000 --> 00:19:03,360
so the next time

354
00:19:03,360 --> 00:19:13,488
[Music]

355
00:19:16,400 --> 00:19:17,360
uh

356
00:19:17,360 --> 00:19:19,200
thanks for the introduction

357
00:19:19,200 --> 00:19:23,480
uh so this is a joint organization

358
00:19:25,380 --> 00:19:36,229
[Music]

359
00:19:50,160 --> 00:19:53,160
uh

360
00:19:56,800 --> 00:20:00,740
[Music]

361
00:20:04,880 --> 00:20:07,770
and

362
00:20:07,770 --> 00:20:10,159
[Music]

363
00:20:10,159 --> 00:20:12,530
is

364
00:20:12,530 --> 00:20:17,089
[Music]

365
00:20:20,000 --> 00:20:29,529
[Music]

366
00:20:32,559 --> 00:20:35,559
um

367
00:20:37,130 --> 00:20:40,299
[Music]

368
00:20:45,250 --> 00:20:49,500
[Music]

369
00:20:51,920 --> 00:20:54,799
[Music]

370
00:20:54,799 --> 00:20:57,799
um

371
00:21:04,090 --> 00:21:12,559
[Music]

372
00:21:12,559 --> 00:21:14,800
foreign

373
00:21:14,800 --> 00:21:18,720
[Music]

374
00:21:18,720 --> 00:21:21,720
um

375
00:21:28,280 --> 00:21:31,399
[Music]

376
00:21:33,700 --> 00:21:36,739
[Music]

377
00:21:41,880 --> 00:21:48,390
[Music]

378
00:21:54,360 --> 00:21:58,500
[Music]

379
00:22:01,900 --> 00:22:06,279
[Music]

380
00:22:07,520 --> 00:22:10,520
um

381
00:22:12,990 --> 00:22:15,360
[Music]

382
00:22:15,360 --> 00:22:18,360
um

383
00:22:25,590 --> 00:22:28,709
[Music]

384
00:22:36,130 --> 00:22:42,640
[Music]

385
00:22:42,640 --> 00:22:45,679
distinguish between these two cases

386
00:22:45,679 --> 00:22:48,799
and remember that the samples are easy

387
00:22:48,799 --> 00:22:51,679
so we really have to distinguish

388
00:22:51,679 --> 00:22:54,880
zero and

389
00:23:05,000 --> 00:23:17,559
[Music]

390
00:23:20,880 --> 00:23:23,679
so each time we call an oracle and they

391
00:23:23,679 --> 00:23:26,159
said called our sample

392
00:23:26,159 --> 00:23:29,280
so uh basically we need to

393
00:23:29,280 --> 00:23:31,520
select a column

394
00:23:31,520 --> 00:23:33,919
we selected the subset of a coordinate

395
00:23:33,919 --> 00:23:37,200
and we feed it into the dkwr algorithm

396
00:23:37,200 --> 00:23:40,799
so the gwpr algorithm is essentially

397
00:23:40,799 --> 00:23:44,799
similar to the bkw restricted to the set

398
00:23:44,799 --> 00:23:48,840
all it does is

399
00:23:52,540 --> 00:23:56,020
[Music]

400
00:24:01,600 --> 00:24:03,610
um

401
00:24:03,610 --> 00:24:12,240
[Music]

402
00:24:12,240 --> 00:24:15,240
um

403
00:24:16,170 --> 00:24:19,339
[Music]

404
00:24:28,159 --> 00:24:31,400
any questions

405
00:24:32,960 --> 00:24:35,200
okay so i have a quick question can you

406
00:24:35,200 --> 00:24:38,159
say anything about the impact of this

407
00:24:38,159 --> 00:24:40,159
implication

408
00:24:40,159 --> 00:24:42,400
are you aware of any applications that

409
00:24:42,400 --> 00:24:45,559
are affected

410
00:24:47,550 --> 00:24:50,659
[Music]

411
00:24:56,600 --> 00:25:04,480
[Music]

412
00:25:04,480 --> 00:25:07,480
is

413
00:25:08,110 --> 00:25:13,289
[Music]

414
00:25:16,320 --> 00:25:19,039
okay any other question

415
00:25:19,039 --> 00:25:21,110
okay

416
00:25:21,110 --> 00:25:22,390
[Music]

417
00:25:22,390 --> 00:25:25,499
[Applause]

418
00:25:30,240 --> 00:25:33,679
and then the next okay is happening

419
00:25:33,679 --> 00:25:36,320
virtually

420
00:25:40,559 --> 00:25:41,360
so

421
00:25:41,360 --> 00:25:42,799
roman

422
00:25:42,799 --> 00:25:45,600
is setting up

423
00:25:46,480 --> 00:25:47,600
okay so

424
00:25:47,600 --> 00:25:50,080
is the next stock recital

425
00:25:50,080 --> 00:25:52,240
towards site adaptive security of

426
00:25:52,240 --> 00:25:56,360
non-interactive exchange

427
00:26:03,360 --> 00:26:05,840
okay yeah thanks for the introduction

428
00:26:05,840 --> 00:26:07,840
so i will start with a brief definition

429
00:26:07,840 --> 00:26:09,919
of what non-interactive key exchange or

430
00:26:09,919 --> 00:26:13,039
for short nike is

431
00:26:13,200 --> 00:26:15,200
so there's this keychain algorithm that

432
00:26:15,200 --> 00:26:17,200
everybody can use to generate a public

433
00:26:17,200 --> 00:26:18,640
secret key pair

434
00:26:18,640 --> 00:26:20,080
and then we assume a public key

435
00:26:20,080 --> 00:26:22,640
infrastructure so everybody gets an

436
00:26:22,640 --> 00:26:24,799
authenticate copy of every other's

437
00:26:24,799 --> 00:26:26,880
public key

438
00:26:26,880 --> 00:26:28,960
and then every user can generate a

439
00:26:28,960 --> 00:26:31,440
shared key using his own secret key and

440
00:26:31,440 --> 00:26:34,400
the public key of someone else

441
00:26:34,400 --> 00:26:36,400
so when alice can use the first secret

442
00:26:36,400 --> 00:26:38,640
key and bob's public key and bob with

443
00:26:38,640 --> 00:26:41,360
his secret key and alice public key

444
00:26:41,360 --> 00:26:43,600
and then they should get the same

445
00:26:43,600 --> 00:26:47,360
secret or the same shared key

446
00:26:47,679 --> 00:26:49,840
the security notion we consider works as

447
00:26:49,840 --> 00:26:53,039
follows an adversary can adaptively

448
00:26:53,039 --> 00:26:54,960
query several oracles

449
00:26:54,960 --> 00:26:57,360
and the first oracle is to create a new

450
00:26:57,360 --> 00:26:59,440
user whenever he does this he gets there

451
00:26:59,440 --> 00:27:01,679
publicly

452
00:27:01,679 --> 00:27:04,159
the second oracle is to corrupt users

453
00:27:04,159 --> 00:27:05,840
when he does this he also sees the

454
00:27:05,840 --> 00:27:08,799
secret key of this user

455
00:27:08,799 --> 00:27:10,799
then he can reveal shared keys between

456
00:27:10,799 --> 00:27:12,240
users

457
00:27:12,240 --> 00:27:15,279
and finally he can get challenged on

458
00:27:15,279 --> 00:27:17,679
users that means he gets a shared key

459
00:27:17,679 --> 00:27:20,080
between them or just a random value and

460
00:27:20,080 --> 00:27:21,840
he has to distinguish between these two

461
00:27:21,840 --> 00:27:22,880
variants

462
00:27:22,880 --> 00:27:24,799
and of course he can do this only when

463
00:27:24,799 --> 00:27:26,799
both users are uncorrupted and he has

464
00:27:26,799 --> 00:27:30,559
not revealed the shared key between them

465
00:27:31,919 --> 00:27:33,919
okay and second let me briefly explain

466
00:27:33,919 --> 00:27:36,080
what we mean with site security so when

467
00:27:36,080 --> 00:27:37,840
we want to prove that the nike is secure

468
00:27:37,840 --> 00:27:39,600
we give a reduction to some underlying

469
00:27:39,600 --> 00:27:40,960
assumption

470
00:27:40,960 --> 00:27:42,480
and that guarantees that when we can

471
00:27:42,480 --> 00:27:44,080
break our scheme with probability

472
00:27:44,080 --> 00:27:46,480
epsilon using some resources row we can

473
00:27:46,480 --> 00:27:48,720
break the underlying assumption for a

474
00:27:48,720 --> 00:27:50,480
fair comparison with approximately the

475
00:27:50,480 --> 00:27:52,720
same resources with some probability

476
00:27:52,720 --> 00:27:54,960
epsilon divided by l and this l is

477
00:27:54,960 --> 00:27:58,000
called the security loss

478
00:27:58,000 --> 00:28:01,039
and uh the larger ellis was larger we

479
00:28:01,039 --> 00:28:03,440
have to select our security parameter to

480
00:28:03,440 --> 00:28:04,799
achieve a

481
00:28:04,799 --> 00:28:07,679
certain concrete level of security

482
00:28:07,679 --> 00:28:09,120
which means our scheme gets less

483
00:28:09,120 --> 00:28:10,080
efficient

484
00:28:10,080 --> 00:28:13,200
so we want to get l as small as possible

485
00:28:13,200 --> 00:28:15,279
and this is basically captured by

486
00:28:15,279 --> 00:28:16,399
tightness

487
00:28:16,399 --> 00:28:18,320
more concretely this means that l does

488
00:28:18,320 --> 00:28:21,200
not depend on the adversary

489
00:28:21,200 --> 00:28:23,440
in particular for nike this means that

490
00:28:23,440 --> 00:28:25,760
it does not grow with the number of uses

491
00:28:25,760 --> 00:28:29,720
the adversary registers

492
00:28:30,000 --> 00:28:31,039
and

493
00:28:31,039 --> 00:28:33,919
yeah it seems quite hard for nike to get

494
00:28:33,919 --> 00:28:37,440
tight security so uh well the

495
00:28:37,440 --> 00:28:39,840
most famous nike definitely is the tv

496
00:28:39,840 --> 00:28:41,120
helmet nike

497
00:28:41,120 --> 00:28:43,120
but in this setting with multiple users

498
00:28:43,120 --> 00:28:46,320
this has a security loss of n squared

499
00:28:46,320 --> 00:28:48,240
and there's also a work that shows that

500
00:28:48,240 --> 00:28:49,919
the security loss of n squared is

501
00:28:49,919 --> 00:28:53,039
necessary for every nike that has unique

502
00:28:53,039 --> 00:28:55,200
shared keys

503
00:28:55,200 --> 00:28:56,799
and i'm only aware of one work that

504
00:28:56,799 --> 00:28:59,120
managed to get below this n squared and

505
00:28:59,120 --> 00:29:01,919
this work achieved o of n security loss

506
00:29:01,919 --> 00:29:04,080
but also gave a lower bounds that shows

507
00:29:04,080 --> 00:29:07,918
that it's hard to get below this

508
00:29:08,080 --> 00:29:10,960
in our work we consider nike with a

509
00:29:10,960 --> 00:29:13,679
flexible key length so we show so we

510
00:29:13,679 --> 00:29:15,200
allow that the keys

511
00:29:15,200 --> 00:29:17,760
can get larger

512
00:29:17,760 --> 00:29:20,559
and grow with a number of users

513
00:29:20,559 --> 00:29:21,679
and then we

514
00:29:21,679 --> 00:29:24,080
get the following result and

515
00:29:24,080 --> 00:29:26,640
so given here by this black curve

516
00:29:26,640 --> 00:29:29,520
so in particular we can get our titans

517
00:29:29,520 --> 00:29:32,720
as small as o of log n but then our keys

518
00:29:32,720 --> 00:29:36,159
grow linear with the number of users

519
00:29:36,159 --> 00:29:37,760
and we also give a lower bound that

520
00:29:37,760 --> 00:29:40,399
shows that this trade-off between key

521
00:29:40,399 --> 00:29:42,480
size and tightness

522
00:29:42,480 --> 00:29:44,320
is inherent

523
00:29:44,320 --> 00:29:46,480
at least for a large class of nikes that

524
00:29:46,480 --> 00:29:48,000
captures all

525
00:29:48,000 --> 00:29:51,360
group based constructions

526
00:29:52,240 --> 00:29:54,399
and of course this is quite unconvenient

527
00:29:54,399 --> 00:29:56,880
to have this large keys so we also

528
00:29:56,880 --> 00:29:58,240
looked into a bit of a different

529
00:29:58,240 --> 00:30:00,399
direction and thought what happens when

530
00:30:00,399 --> 00:30:02,880
we relax the security notion

531
00:30:02,880 --> 00:30:04,960
and first of all if you

532
00:30:04,960 --> 00:30:07,279
consider selective security that means

533
00:30:07,279 --> 00:30:10,080
the adversary has to specify the

534
00:30:10,080 --> 00:30:11,919
challenge key pair even before seeing

535
00:30:11,919 --> 00:30:14,159
the public keys of the users then this

536
00:30:14,159 --> 00:30:16,799
is very easy to achieve

537
00:30:16,799 --> 00:30:17,760
and

538
00:30:17,760 --> 00:30:19,520
but we show that even in the strong

539
00:30:19,520 --> 00:30:21,600
semi-adapted security model where the

540
00:30:21,600 --> 00:30:24,000
adversary sees first all the public keys

541
00:30:24,000 --> 00:30:25,679
and then specifies the challenge key

542
00:30:25,679 --> 00:30:29,760
pair we can still achieve tightness

543
00:30:29,760 --> 00:30:31,840
and moreover we show that again when we

544
00:30:31,840 --> 00:30:34,240
allow larger keys we can get even

545
00:30:34,240 --> 00:30:36,399
stronger security notions and the larger

546
00:30:36,399 --> 00:30:38,960
we make the keys the later the adversary

547
00:30:38,960 --> 00:30:42,159
has to specify the challenge pair

548
00:30:42,159 --> 00:30:46,159
still use having a tight reduction

549
00:30:46,880 --> 00:30:49,120
so to sum up our work

550
00:30:49,120 --> 00:30:51,679
we considered the three desirable

551
00:30:51,679 --> 00:30:53,760
properties tightness adaptivity and

552
00:30:53,760 --> 00:30:56,080
compact keys for nike

553
00:30:56,080 --> 00:30:58,000
and show that you can have any two of

554
00:30:58,000 --> 00:31:00,320
these properties but unfortunately or

555
00:31:00,320 --> 00:31:03,279
not all three of them

556
00:31:03,279 --> 00:31:04,960
and more concretely when you have

557
00:31:04,960 --> 00:31:07,279
adaptivity you can also have a trade-off

558
00:31:07,279 --> 00:31:09,360
between tightness and compact keys that

559
00:31:09,360 --> 00:31:11,279
was our first result

560
00:31:11,279 --> 00:31:13,039
and when you have tightness you can have

561
00:31:13,039 --> 00:31:14,880
a trade-off between adductivity and

562
00:31:14,880 --> 00:31:16,720
compact keys that was our third

563
00:31:16,720 --> 00:31:19,120
construction

564
00:31:19,120 --> 00:31:20,240
okay

565
00:31:20,240 --> 00:31:21,279
that's it

566
00:31:21,279 --> 00:31:24,960
i'm looking forward for any questions

567
00:31:30,399 --> 00:31:33,799
any questions

568
00:31:34,830 --> 00:31:37,120
[Music]

569
00:31:37,120 --> 00:31:38,799
uh yeah thank you for the talk uh one

570
00:31:38,799 --> 00:31:40,799
question is one reason for tightness is

571
00:31:40,799 --> 00:31:43,039
that you can get better security by

572
00:31:43,039 --> 00:31:44,720
not making your group elements as large

573
00:31:44,720 --> 00:31:47,200
for example can you compare that to an

574
00:31:47,200 --> 00:31:49,120
alternative is to just but then you need

575
00:31:49,120 --> 00:31:51,279
many more group elements an alternative

576
00:31:51,279 --> 00:31:53,440
is to use that space just to increase

577
00:31:53,440 --> 00:31:55,120
your security parameters

578
00:31:55,120 --> 00:31:56,480
do these schemes

579
00:31:56,480 --> 00:31:58,080
do better than let's say that a naive

580
00:31:58,080 --> 00:31:59,679
approach where you just

581
00:31:59,679 --> 00:32:01,440
make bigger groups and

582
00:32:01,440 --> 00:32:03,600
analyze them like that

583
00:32:03,600 --> 00:32:06,159
uh yeah so i think for so we did not

584
00:32:06,159 --> 00:32:08,240
look into this specifically but

585
00:32:08,240 --> 00:32:10,480
i'm pretty sure if you want to achieve

586
00:32:10,480 --> 00:32:12,480
concrete efficiency it's best to go with

587
00:32:12,480 --> 00:32:14,559
the diffie-hellman key exchange and just

588
00:32:14,559 --> 00:32:17,120
use larger groups to

589
00:32:17,120 --> 00:32:18,880
to compensate for the additional

590
00:32:18,880 --> 00:32:20,399
security laws

591
00:32:20,399 --> 00:32:22,720
because well the helmet key itself is

592
00:32:22,720 --> 00:32:24,159
very efficient with just one group

593
00:32:24,159 --> 00:32:25,360
element

594
00:32:25,360 --> 00:32:26,320
and

595
00:32:26,320 --> 00:32:29,320
yeah

596
00:32:30,880 --> 00:32:34,000
okay any other questions

597
00:32:36,080 --> 00:32:37,919
may you mention

598
00:32:37,919 --> 00:32:38,799
any

599
00:32:38,799 --> 00:32:41,799
questions

600
00:32:51,000 --> 00:32:52,640
[Music]

601
00:32:52,640 --> 00:32:57,000
are there any questions

602
00:33:07,200 --> 00:33:10,440
yeah maybe

603
00:33:19,560 --> 00:33:22,659
[Music]

604
00:33:23,039 --> 00:33:26,240
uh yeah so our lower bound so first of

605
00:33:26,240 --> 00:33:27,840
all the lower bound does not quite match

606
00:33:27,840 --> 00:33:30,399
the upper bound so that we give so uh

607
00:33:30,399 --> 00:33:31,440
for the

608
00:33:31,440 --> 00:33:33,760
uh trade-off between compact keys and

609
00:33:33,760 --> 00:33:34,960
tightness

610
00:33:34,960 --> 00:33:36,640
so i think it would be interesting to

611
00:33:36,640 --> 00:33:38,480
figure out what

612
00:33:38,480 --> 00:33:41,679
to do to close this gap

613
00:33:42,080 --> 00:33:44,240
and yeah and another interesting work is

614
00:33:44,240 --> 00:33:48,320
our lower bound only works for

615
00:33:48,399 --> 00:33:50,880
nike's where the shared key is computed

616
00:33:50,880 --> 00:33:52,399
as inner product between public and

617
00:33:52,399 --> 00:33:53,600
secret key

618
00:33:53,600 --> 00:33:55,120
essentially

619
00:33:55,120 --> 00:33:57,120
and that captures

620
00:33:57,120 --> 00:33:59,440
yeah as i said all group-based nikes

621
00:33:59,440 --> 00:34:02,159
that we know but of course not all nikes

622
00:34:02,159 --> 00:34:04,159
and i think it would be interesting to

623
00:34:04,159 --> 00:34:06,559
get either a more general lower bound

624
00:34:06,559 --> 00:34:10,000
or maybe get some nikes that bypass this

625
00:34:10,000 --> 00:34:13,320
lower bound

626
00:34:25,679 --> 00:34:29,480
okay so we're back

627
00:34:44,159 --> 00:34:46,159
so this one right

628
00:34:46,159 --> 00:34:50,200
i don't know of all

629
00:35:05,599 --> 00:35:07,200
okay

630
00:35:07,200 --> 00:35:08,960
so the next step of this session is

631
00:35:08,960 --> 00:35:11,359
titled covert learning how to learn with

632
00:35:11,359 --> 00:35:13,839
an unfastened intermediary

633
00:35:13,839 --> 00:35:17,040
by one connecting other

634
00:35:19,200 --> 00:35:22,800
uh yeah so hi i'm arie karcher and um

635
00:35:22,800 --> 00:35:25,119
please forgive me before you begin uh

636
00:35:25,119 --> 00:35:27,200
you will need to go into presentation

637
00:35:27,200 --> 00:35:29,359
mode

638
00:35:29,359 --> 00:35:31,839
okay

639
00:35:32,000 --> 00:35:33,839
my apologies for interrupting there's no

640
00:35:33,839 --> 00:35:36,720
good way to do it

641
00:35:39,920 --> 00:35:42,480
uh i believe it's up at the top um in

642
00:35:42,480 --> 00:35:45,119
the left corner uh it looks like a

643
00:35:45,119 --> 00:35:49,040
screen with a play button on it

644
00:35:49,040 --> 00:35:51,040
does that work there's a menu item that

645
00:35:51,040 --> 00:35:53,440
says slideshow in the center

646
00:35:53,440 --> 00:35:54,640
but i don't think you're sharing the

647
00:35:54,640 --> 00:35:57,879
right screen

648
00:36:01,360 --> 00:36:04,439
[Music]

649
00:36:07,920 --> 00:36:10,920
foreign

650
00:36:13,040 --> 00:36:14,640
okay so i'm going to first present and

651
00:36:14,640 --> 00:36:18,078
then share that's what you suggest

652
00:36:19,599 --> 00:36:20,800
sure

653
00:36:20,800 --> 00:36:22,800
so share screen

654
00:36:22,800 --> 00:36:27,000
i will share this screen right

655
00:36:27,520 --> 00:36:29,839
then

656
00:36:32,720 --> 00:36:34,320
is it better

657
00:36:34,320 --> 00:36:36,800
no we online don't see that so i think

658
00:36:36,800 --> 00:36:38,160
what you'll need to do is share the

659
00:36:38,160 --> 00:36:43,118
whole screen instead of a an application

660
00:36:48,720 --> 00:36:52,439
show the whole screen

661
00:37:07,440 --> 00:37:08,000
top for

662
00:37:08,000 --> 00:37:11,110
[Music]

663
00:37:11,599 --> 00:37:12,400
yes

664
00:37:12,400 --> 00:37:14,640
again

665
00:37:14,880 --> 00:37:16,480
basically that was correct you just

666
00:37:16,480 --> 00:37:20,000
needed to swap the presenter view

667
00:37:20,000 --> 00:37:23,839
okay let's try again then

668
00:37:24,400 --> 00:37:27,200
so this was correct just

669
00:37:27,200 --> 00:37:30,079
just tell me where to go

670
00:37:30,079 --> 00:37:31,920
uh i think it's to the right of your

671
00:37:31,920 --> 00:37:33,599
cursor

672
00:37:33,599 --> 00:37:36,240
um swap presenter view and slideshow try

673
00:37:36,240 --> 00:37:38,160
that

674
00:37:38,160 --> 00:37:40,800
yeah that works for

675
00:37:40,800 --> 00:37:42,880
they would not work for us though it's

676
00:37:42,880 --> 00:37:45,599
kind of okay

677
00:37:47,359 --> 00:37:48,839
yeah we can

678
00:37:48,839 --> 00:37:52,759
remove okay

679
00:37:52,980 --> 00:37:56,070
[Music]

680
00:38:14,240 --> 00:38:17,399
no weirdo

681
00:38:30,880 --> 00:38:33,040
i

682
00:38:41,560 --> 00:38:43,440
[Music]

683
00:38:43,440 --> 00:38:44,880
to the right of that menu there's

684
00:38:44,880 --> 00:38:48,480
something that says slideshow

685
00:38:57,520 --> 00:39:01,640
i need to see behind this

686
00:39:25,520 --> 00:39:29,000
with a new shape

687
00:39:40,160 --> 00:39:43,839
and click on this one

688
00:39:45,920 --> 00:39:48,160
okay

689
00:39:49,119 --> 00:39:51,520
what does she say that's good for us

690
00:39:51,520 --> 00:39:54,520
online

691
00:39:58,000 --> 00:39:58,880
um

692
00:39:58,880 --> 00:40:00,320
yeah

693
00:40:00,320 --> 00:40:01,839
i think it might have just been mine

694
00:40:01,839 --> 00:40:06,520
because mine had presenter views saved

695
00:40:12,880 --> 00:40:15,200
um

696
00:40:15,599 --> 00:40:17,119
do i leave it on the screen or don't

697
00:40:17,119 --> 00:40:20,599
present here

698
00:40:37,620 --> 00:40:44,160
[Music]

699
00:40:44,160 --> 00:40:47,480
that's the problem

700
00:40:47,690 --> 00:40:50,789
[Music]

701
00:40:54,330 --> 00:40:58,770
[Music]

702
00:41:02,240 --> 00:41:05,240
okay

703
00:41:09,200 --> 00:41:10,880
okay uh

704
00:41:10,880 --> 00:41:13,599
sorry for the delay um

705
00:41:13,599 --> 00:41:15,680
so i'll be presenting the paper covert

706
00:41:15,680 --> 00:41:17,359
learning how to learn with an untrusted

707
00:41:17,359 --> 00:41:18,560
intermediary

708
00:41:18,560 --> 00:41:22,160
it's strong work with ron carnetti

709
00:41:23,599 --> 00:41:24,400
so

710
00:41:24,400 --> 00:41:26,640
in the basic agnostic learning problem a

711
00:41:26,640 --> 00:41:28,319
learner communicates with a membership

712
00:41:28,319 --> 00:41:29,280
oracle

713
00:41:29,280 --> 00:41:31,359
for an arbitrary boolean function

714
00:41:31,359 --> 00:41:33,200
the learner may query the function on

715
00:41:33,200 --> 00:41:35,599
any point with the goal of producing a

716
00:41:35,599 --> 00:41:37,839
hypothesis function within some fixed

717
00:41:37,839 --> 00:41:39,920
class that approximates the original

718
00:41:39,920 --> 00:41:42,319
function

719
00:41:44,640 --> 00:41:46,640
now what if there is a computationally

720
00:41:46,640 --> 00:41:49,119
bounded eavesdropping adversary that can

721
00:41:49,119 --> 00:41:50,720
observe all the queries that the learner

722
00:41:50,720 --> 00:41:52,160
makes

723
00:41:52,160 --> 00:41:53,920
can the learner fashion the queries in a

724
00:41:53,920 --> 00:41:56,160
clever way that allows him to learn the

725
00:41:56,160 --> 00:41:57,920
function but prevent the eavesdropper

726
00:41:57,920 --> 00:42:00,640
from doing the same

727
00:42:00,720 --> 00:42:02,800
now what if instead of a simple passive

728
00:42:02,800 --> 00:42:04,480
adversary there's an intermediary who

729
00:42:04,480 --> 00:42:06,480
may view the queries and intercept and

730
00:42:06,480 --> 00:42:08,800
corrupt the responses

731
00:42:08,800 --> 00:42:10,160
now can the learner complete the

732
00:42:10,160 --> 00:42:12,480
previous task while also detecting and

733
00:42:12,480 --> 00:42:15,040
interference from the intermediary in

734
00:42:15,040 --> 00:42:17,200
this case maybe the learner has

735
00:42:17,200 --> 00:42:19,440
also some access to random ground truth

736
00:42:19,440 --> 00:42:22,640
information about the function

737
00:42:22,800 --> 00:42:24,480
in our work we formalized this new

738
00:42:24,480 --> 00:42:26,240
notion of privacy and learning called

739
00:42:26,240 --> 00:42:27,520
covert learning

740
00:42:27,520 --> 00:42:29,040
namely the guarantee that no

741
00:42:29,040 --> 00:42:30,960
eavesdropper learns anything about the

742
00:42:30,960 --> 00:42:32,800
learned function nor any prior

743
00:42:32,800 --> 00:42:34,880
information that the learner has about

744
00:42:34,880 --> 00:42:36,160
this function

745
00:42:36,160 --> 00:42:38,480
we do this using a simulation based

746
00:42:38,480 --> 00:42:40,160
privacy

747
00:42:40,160 --> 00:42:42,079
definition and also we give a

748
00:42:42,079 --> 00:42:44,160
verifiability guarantee that's adapted

749
00:42:44,160 --> 00:42:45,119
from

750
00:42:45,119 --> 00:42:47,040
uh work on interactive perspective

751
00:42:47,040 --> 00:42:48,480
verifying machine learning of cold

752
00:42:48,480 --> 00:42:52,160
washer roth william shea for nintendo

753
00:42:52,160 --> 00:42:54,079
and under this model we provide formal

754
00:42:54,079 --> 00:42:55,760
descriptions of algorithms for several

755
00:42:55,760 --> 00:42:57,440
salient learning tests like noisy

756
00:42:57,440 --> 00:42:59,200
parodies and polyamorous decision

757
00:42:59,200 --> 00:43:00,720
injuries

758
00:43:00,720 --> 00:43:03,280
and we motivate the study of verifiable

759
00:43:03,280 --> 00:43:04,960
learning besides just theoretical

760
00:43:04,960 --> 00:43:06,160
interests

761
00:43:06,160 --> 00:43:08,640
with applications to real world kind of

762
00:43:08,640 --> 00:43:10,880
hostile learning settings like the

763
00:43:10,880 --> 00:43:12,640
secure outsourcing of chemical

764
00:43:12,640 --> 00:43:14,720
experiments and drug discovery as well

765
00:43:14,720 --> 00:43:17,040
as producing robust model extraction

766
00:43:17,040 --> 00:43:19,359
attacks

767
00:43:19,359 --> 00:43:21,839
now let me dive into a specific example

768
00:43:21,839 --> 00:43:24,319
of covert learning first by introducing

769
00:43:24,319 --> 00:43:26,079
a problem many of you have probably seen

770
00:43:26,079 --> 00:43:27,280
before

771
00:43:27,280 --> 00:43:29,440
so in this problem the given inputs are

772
00:43:29,440 --> 00:43:30,720
m

773
00:43:30,720 --> 00:43:33,920
random and vectors along with m binary

774
00:43:33,920 --> 00:43:34,880
labels

775
00:43:34,880 --> 00:43:36,640
and it's guaranteed that for each binary

776
00:43:36,640 --> 00:43:38,480
vector and corresponding label there's a

777
00:43:38,480 --> 00:43:40,640
parity function on n bits

778
00:43:40,640 --> 00:43:42,240
such that the label is the parity of the

779
00:43:42,240 --> 00:43:44,079
random vector with probability of half

780
00:43:44,079 --> 00:43:47,280
plus some small quantity tau

781
00:43:47,280 --> 00:43:49,040
and the problem is to use these examples

782
00:43:49,040 --> 00:43:52,000
to find this t for paradise

783
00:43:52,000 --> 00:43:54,240
now if you believe the well-known lpn

784
00:43:54,240 --> 00:43:56,240
hardness assumption then this problem

785
00:43:56,240 --> 00:43:58,480
should also be competitionally hard

786
00:43:58,480 --> 00:44:00,160
but an important question is what

787
00:44:00,160 --> 00:44:01,520
happens if you can choose the binary

788
00:44:01,520 --> 00:44:03,119
vectors instead of them just being

789
00:44:03,119 --> 00:44:04,319
random

790
00:44:04,319 --> 00:44:05,839
in this case it's known how to

791
00:44:05,839 --> 00:44:07,520
efficiently find the secret parity in

792
00:44:07,520 --> 00:44:10,400
time polynomial n and one over tau using

793
00:44:10,400 --> 00:44:13,920
the goldberg 11 algorithm

794
00:44:14,800 --> 00:44:16,240
now our question

795
00:44:16,240 --> 00:44:17,920
our question pertaining to this problem

796
00:44:17,920 --> 00:44:19,280
is what happens if you intend to run

797
00:44:19,280 --> 00:44:20,720
this learning algorithm in a hostile

798
00:44:20,720 --> 00:44:22,400
environment in other words a third party

799
00:44:22,400 --> 00:44:25,040
who observes all the queries made by the

800
00:44:25,040 --> 00:44:26,720
some machine running on the goldberg

801
00:44:26,720 --> 00:44:29,119
webbing algorithm

802
00:44:29,119 --> 00:44:30,720
and in this case the user operator can

803
00:44:30,720 --> 00:44:32,240
also find the secret parity just by

804
00:44:32,240 --> 00:44:33,760
observing the data and running the rest

805
00:44:33,760 --> 00:44:38,000
of the goldberg 11 algorithm uh locally

806
00:44:38,000 --> 00:44:38,880
now

807
00:44:38,880 --> 00:44:40,560
the goldwork 11 algorithm can be split

808
00:44:40,560 --> 00:44:42,720
into three phases constructing some

809
00:44:42,720 --> 00:44:44,720
non-adaptive set of queries

810
00:44:44,720 --> 00:44:46,079
performing those queries and then

811
00:44:46,079 --> 00:44:48,160
post-processing the results

812
00:44:48,160 --> 00:44:49,599
but the problem is that the queries

813
00:44:49,599 --> 00:44:52,240
themselves leak information

814
00:44:52,240 --> 00:44:54,240
and one idea to mitigate this is to

815
00:44:54,240 --> 00:44:55,839
force the queries themselves to look

816
00:44:55,839 --> 00:44:56,880
random

817
00:44:56,880 --> 00:44:58,400
note that their original learning

818
00:44:58,400 --> 00:45:00,560
problem is computationally or thought to

819
00:45:00,560 --> 00:45:01,920
be computationally hard with random

820
00:45:01,920 --> 00:45:04,079
examples so if we can make the queries

821
00:45:04,079 --> 00:45:05,280
look random

822
00:45:05,280 --> 00:45:06,960
pseudorandom then that's enough to

823
00:45:06,960 --> 00:45:08,800
obtain similar hardness at least any

824
00:45:08,800 --> 00:45:10,800
entity can distinguish this with a

825
00:45:10,800 --> 00:45:12,880
random queries

826
00:45:12,880 --> 00:45:14,800
and the simple technique to do this is

827
00:45:14,800 --> 00:45:17,520
to mask or pad each query individually

828
00:45:17,520 --> 00:45:19,359
and it turns out that we can construct

829
00:45:19,359 --> 00:45:22,480
these maps by using an lpn

830
00:45:22,480 --> 00:45:24,160
style distribution where each secret

831
00:45:24,160 --> 00:45:26,960
vector here pictured in yellow is used

832
00:45:26,960 --> 00:45:28,880
along with the results to then recover

833
00:45:28,880 --> 00:45:32,400
the secret parity using some natural

834
00:45:35,200 --> 00:45:37,040
and as previously mentioned our work

835
00:45:37,040 --> 00:45:38,720
also considers a further twist to the

836
00:45:38,720 --> 00:45:40,000
problem

837
00:45:40,000 --> 00:45:41,119
we're asking

838
00:45:41,119 --> 00:45:42,800
what if there exists not only just an

839
00:45:42,800 --> 00:45:44,880
eavesdropper but a more active

840
00:45:44,880 --> 00:45:46,400
adversarial intermediary who can

841
00:45:46,400 --> 00:45:47,920
actually modify the answers to these

842
00:45:47,920 --> 00:45:48,880
queries

843
00:45:48,880 --> 00:45:50,880
and note this is um

844
00:45:50,880 --> 00:45:53,040
on top of the function

845
00:45:53,040 --> 00:45:54,400
that is to be learned there's also an

846
00:45:54,400 --> 00:45:56,880
arbitrary function from the beginning so

847
00:45:56,880 --> 00:45:58,079
it's kind of like a second level of

848
00:45:58,079 --> 00:46:01,040
adversarial noise

849
00:46:01,040 --> 00:46:02,480
so the question is how can we fashion

850
00:46:02,480 --> 00:46:03,680
the queries in situations at least

851
00:46:03,680 --> 00:46:05,280
detect when this interference is

852
00:46:05,280 --> 00:46:07,440
happening

853
00:46:07,440 --> 00:46:09,440
and to do this we'll have to allow the

854
00:46:09,440 --> 00:46:11,599
algorithm to have access to some random

855
00:46:11,599 --> 00:46:14,640
uncorrect uncorrupted examples in order

856
00:46:14,640 --> 00:46:16,400
to at least have some information to

857
00:46:16,400 --> 00:46:19,680
leverage against the intermediary

858
00:46:19,680 --> 00:46:21,920
and we can extend our previous algorithm

859
00:46:21,920 --> 00:46:24,400
in a pretty simple way so we can use a

860
00:46:24,400 --> 00:46:27,040
wrapper function that randomly executes

861
00:46:27,040 --> 00:46:29,200
the previous algorithm or queries for a

862
00:46:29,200 --> 00:46:32,000
section of ground truth examples

863
00:46:32,000 --> 00:46:33,599
then in the second case we can check to

864
00:46:33,599 --> 00:46:35,680
make sure that the return answers are

865
00:46:35,680 --> 00:46:38,160
consistent with the ground truth

866
00:46:38,160 --> 00:46:40,000
and this is shown in through code on the

867
00:46:40,000 --> 00:46:41,040
slide

868
00:46:41,040 --> 00:46:42,960
and if the labels aren't consistent then

869
00:46:42,960 --> 00:46:45,040
we can abort as we have proof of

870
00:46:45,040 --> 00:46:47,520
interference

871
00:46:47,520 --> 00:46:48,560
and note that because of the

872
00:46:48,560 --> 00:46:50,319
pseudo-randomness of the examples in the

873
00:46:50,319 --> 00:46:51,760
learning case

874
00:46:51,760 --> 00:46:53,680
um the intermediary cannot tell which

875
00:46:53,680 --> 00:46:56,319
case is which so the idea is to repeat

876
00:46:56,319 --> 00:46:58,079
this process many times

877
00:46:58,079 --> 00:46:58,960
and

878
00:46:58,960 --> 00:47:00,960
then either the intermediary will be

879
00:47:00,960 --> 00:47:03,920
detected cheating or at least one

880
00:47:03,920 --> 00:47:05,760
iteration will be uncorrupt and suitable

881
00:47:05,760 --> 00:47:08,319
for learning

882
00:47:08,560 --> 00:47:11,040
and so

883
00:47:20,079 --> 00:47:21,520
can you say something about the general

884
00:47:21,520 --> 00:47:22,960
phase are there functions that can be

885
00:47:22,960 --> 00:47:24,319
learned but cannot be worked private

886
00:47:24,319 --> 00:47:26,480
though

887
00:47:27,839 --> 00:47:30,078
um

888
00:47:34,640 --> 00:47:36,720
so a big open question is when there is

889
00:47:36,720 --> 00:47:38,880
a general kind of compiler that can take

890
00:47:38,880 --> 00:47:41,920
any learning algorithm and turn it into

891
00:47:41,920 --> 00:47:44,480
this type of private algorithm

892
00:47:44,480 --> 00:47:46,640
and so i don't know exactly what is the

893
00:47:46,640 --> 00:47:50,078
extent of which this is possible

894
00:47:51,040 --> 00:47:53,440
but in some sense uh if you're using

895
00:47:53,440 --> 00:47:55,040
this technique that i described where

896
00:47:55,040 --> 00:47:57,520
you kind of apply uh transformations of

897
00:47:57,520 --> 00:47:58,960
the queries themselves

898
00:47:58,960 --> 00:48:01,599
then the more complex the function is

899
00:48:01,599 --> 00:48:02,480
uh

900
00:48:02,480 --> 00:48:04,640
the less kind of underlying homomorphism

901
00:48:04,640 --> 00:48:06,800
you might be able to extract out of that

902
00:48:06,800 --> 00:48:09,119
so it's unclear exactly how how far you

903
00:48:09,119 --> 00:48:11,440
can go

904
00:48:11,450 --> 00:48:14,779
[Music]

905
00:48:17,359 --> 00:48:18,319
okay

906
00:48:18,319 --> 00:48:21,839
any other question

907
00:48:24,640 --> 00:48:26,160
okay so

908
00:48:26,160 --> 00:48:30,040
next thing sorry again

909
00:48:59,920 --> 00:49:02,920
this

910
00:49:43,119 --> 00:49:59,200
right um

911
00:49:59,200 --> 00:50:02,200
um

912
00:50:02,880 --> 00:50:06,010
[Music]

913
00:50:20,000 --> 00:50:23,000
hey

914
00:50:54,480 --> 00:50:57,839
that works for us online

915
00:51:00,240 --> 00:51:01,040
okay

916
00:51:01,040 --> 00:51:03,200
let's talk about the first session

917
00:51:03,200 --> 00:51:07,440
of distributed vehicle specials by

918
00:51:07,440 --> 00:51:08,599
and tidy

919
00:51:24,640 --> 00:51:25,599
hi

920
00:51:25,599 --> 00:51:28,319
i'm ben and i will talk to you about our

921
00:51:28,319 --> 00:51:30,240
faith and stimulate the

922
00:51:30,240 --> 00:51:32,800
american puzzles it's a joint walk with

923
00:51:32,800 --> 00:51:36,200
italy know

924
00:51:37,040 --> 00:51:39,200
so first a quick overview of the classic

925
00:51:39,200 --> 00:51:42,480
markets puzzles protocol

926
00:51:42,480 --> 00:51:44,559
alice and bob wants to communicate the

927
00:51:44,559 --> 00:51:45,760
secret key

928
00:51:45,760 --> 00:51:48,480
and they use a random oracle to do so

929
00:51:48,480 --> 00:51:52,400
ali selects a set of square root of n

930
00:51:52,400 --> 00:51:54,319
random inputs and

931
00:51:54,319 --> 00:51:58,480
sends the image of the set to bob

932
00:51:58,480 --> 00:52:00,319
bob selects a

933
00:52:00,319 --> 00:52:03,520
set of his own and with high probability

934
00:52:03,520 --> 00:52:05,359
since the

935
00:52:05,359 --> 00:52:07,200
the sets are of size the square root of

936
00:52:07,200 --> 00:52:09,760
the domain

937
00:52:09,760 --> 00:52:11,440
those sets intersect

938
00:52:11,440 --> 00:52:14,079
and then bob sends an image from the

939
00:52:14,079 --> 00:52:16,240
intersection

940
00:52:16,240 --> 00:52:17,599
to alice

941
00:52:17,599 --> 00:52:19,280
both of them know the brain image of

942
00:52:19,280 --> 00:52:20,480
this image

943
00:52:20,480 --> 00:52:24,720
and they agree on it is their secret key

944
00:52:24,720 --> 00:52:26,960
an adversary that wants to

945
00:52:26,960 --> 00:52:29,680
recover the secret key must make on a

946
00:52:29,680 --> 00:52:32,720
golf and where is the under moroccan

947
00:52:32,720 --> 00:52:34,800
this is a quadratic gap in query

948
00:52:34,800 --> 00:52:37,680
complexity and this gap is also shown to

949
00:52:37,680 --> 00:52:40,319
be optimal

950
00:52:40,319 --> 00:52:43,440
so we investigated another model for

951
00:52:43,440 --> 00:52:46,000
this

952
00:52:46,000 --> 00:52:48,800
for this key agreement whatever

953
00:52:48,800 --> 00:52:51,680
in our model there are m s players

954
00:52:51,680 --> 00:52:52,480
that

955
00:52:52,480 --> 00:52:54,640
uh that form a fully connected network

956
00:52:54,640 --> 00:52:56,240
meaning every pair of players can

957
00:52:56,240 --> 00:52:58,079
communicate and there are no

958
00:52:58,079 --> 00:53:00,800
pre-existing secure channels

959
00:53:00,800 --> 00:53:02,800
the goal is to allow each pair of

960
00:53:02,800 --> 00:53:05,599
players to agree on a secret key

961
00:53:05,599 --> 00:53:07,920
and the adversary's goal is to recover

962
00:53:07,920 --> 00:53:10,240
anything

963
00:53:10,240 --> 00:53:12,640
also here we also use the random kill

964
00:53:12,640 --> 00:53:14,319
mode

965
00:53:14,319 --> 00:53:16,800
so a basic protocol in this

966
00:53:16,800 --> 00:53:19,280
model would be that

967
00:53:19,280 --> 00:53:21,119
fixing

968
00:53:21,119 --> 00:53:24,559
a constant number of secure links for

969
00:53:24,559 --> 00:53:26,720
each participant

970
00:53:26,720 --> 00:53:29,359
in a way that creates a connected graph

971
00:53:29,359 --> 00:53:32,400
and then every pairwise key is sent on a

972
00:53:32,400 --> 00:53:37,280
path encrypted on a path in this segment

973
00:53:40,559 --> 00:53:42,480
the problem is that

974
00:53:42,480 --> 00:53:45,440
covering a key is still as hard as doing

975
00:53:45,440 --> 00:53:49,040
so in classic mental puzzles so we

976
00:53:49,040 --> 00:53:51,359
did not improve the complexity of the

977
00:53:51,359 --> 00:53:53,920
adversary

978
00:53:55,760 --> 00:53:57,760
in our paper we show a

979
00:53:57,760 --> 00:54:01,520
new distributed protocol in which

980
00:54:01,520 --> 00:54:03,760
every player makes big queries and

981
00:54:03,760 --> 00:54:05,520
communicates two bits

982
00:54:05,520 --> 00:54:08,480
and while the bursary has to perform

983
00:54:08,480 --> 00:54:10,960
n times t squared queries in order to

984
00:54:10,960 --> 00:54:13,119
cover some key

985
00:54:13,119 --> 00:54:15,520
this gives us a super quadratic gap

986
00:54:15,520 --> 00:54:17,359
which is better than the

987
00:54:17,359 --> 00:54:19,599
quadratic gap in the

988
00:54:19,599 --> 00:54:21,680
in the classic protocol

989
00:54:21,680 --> 00:54:22,800
and

990
00:54:22,800 --> 00:54:25,119
we also showed that this gap is optimal

991
00:54:25,119 --> 00:54:26,800
in this model

992
00:54:26,800 --> 00:54:29,359
and we further show

993
00:54:29,359 --> 00:54:31,359
an extension to our protocol to handle

994
00:54:31,359 --> 00:54:34,880
with the semi honest players that

995
00:54:34,880 --> 00:54:39,559
perform the protocol honestly but

996
00:54:39,599 --> 00:54:42,240
but have but share the information with

997
00:54:42,240 --> 00:54:45,118
the anniversary

998
00:54:47,599 --> 00:54:49,599
the basic idea in our protocol is that

999
00:54:49,599 --> 00:54:52,240
instead of fixing the secure the secure

1000
00:54:52,240 --> 00:54:53,839
links that each

1001
00:54:53,839 --> 00:54:55,599
player has to achieve

1002
00:54:55,599 --> 00:54:57,760
and

1003
00:54:57,760 --> 00:54:59,119
we

1004
00:54:59,119 --> 00:55:02,400
we make arbitrary links

1005
00:55:02,559 --> 00:55:04,559
each player where is the random query to

1006
00:55:04,559 --> 00:55:06,319
the random

1007
00:55:06,319 --> 00:55:07,359
and

1008
00:55:07,359 --> 00:55:09,359
when we set the domain size of the

1009
00:55:09,359 --> 00:55:12,319
random market to be n times c squared

1010
00:55:12,319 --> 00:55:16,559
then the each each of the thick wall is

1011
00:55:16,559 --> 00:55:18,240
each set of queries of

1012
00:55:18,240 --> 00:55:22,400
an honest participant uh intersects

1013
00:55:22,400 --> 00:55:24,720
the end times take queries of the others

1014
00:55:24,720 --> 00:55:26,319
or the other participants with their

1015
00:55:26,319 --> 00:55:28,240
probability

1016
00:55:28,240 --> 00:55:30,400
the problem is to find out those

1017
00:55:30,400 --> 00:55:33,119
intersections between players

1018
00:55:33,119 --> 00:55:34,480
uh

1019
00:55:34,480 --> 00:55:36,080
a basic solution would be to

1020
00:55:36,080 --> 00:55:37,200
[Music]

1021
00:55:37,200 --> 00:55:40,000
for every player to send to designate

1022
00:55:40,000 --> 00:55:42,160
this all to one player

1023
00:55:42,160 --> 00:55:43,440
and

1024
00:55:43,440 --> 00:55:45,440
if all the players send

1025
00:55:45,440 --> 00:55:47,839
their elements to this player he makes

1026
00:55:47,839 --> 00:55:50,000
the matchmaking between the players that

1027
00:55:50,000 --> 00:55:52,960
have intersections

1028
00:55:53,040 --> 00:55:54,960
this is

1029
00:55:54,960 --> 00:55:57,359
this is problematic because

1030
00:55:57,359 --> 00:55:59,520
the

1031
00:55:59,520 --> 00:56:02,640
intermediate player has to make

1032
00:56:02,640 --> 00:56:05,119
all the order of a m-type c

1033
00:56:05,119 --> 00:56:07,760
communication

1034
00:56:08,240 --> 00:56:09,359
but

1035
00:56:09,359 --> 00:56:11,760
we in our protocol

1036
00:56:11,760 --> 00:56:14,079
we solve this by

1037
00:56:14,079 --> 00:56:16,240
distributing the role of the matchmaker

1038
00:56:16,240 --> 00:56:18,160
so that every player is assigned the

1039
00:56:18,160 --> 00:56:21,839
range of images to be sent to him

1040
00:56:22,880 --> 00:56:25,200
and makes the matchmaking between pairs

1041
00:56:25,200 --> 00:56:27,680
of players

1042
00:56:28,480 --> 00:56:30,480
so in the paper we describe the details

1043
00:56:30,480 --> 00:56:32,960
of this protocol we also show an

1044
00:56:32,960 --> 00:56:35,760
optimality proof for this model

1045
00:56:35,760 --> 00:56:38,240
and and we show an extension to our

1046
00:56:38,240 --> 00:56:41,200
protocol to under handle semi honest

1047
00:56:41,200 --> 00:56:43,520
participants

1048
00:56:43,520 --> 00:56:46,000
there are also several problems that are

1049
00:56:46,000 --> 00:56:47,119
left open

1050
00:56:47,119 --> 00:56:48,880
like handling

1051
00:56:48,880 --> 00:56:50,960
a greater fraction

1052
00:56:50,960 --> 00:56:54,000
of adversarial players than you that

1053
00:56:54,000 --> 00:56:55,760
then is handled by your

1054
00:56:55,760 --> 00:56:56,960
extension

1055
00:56:56,960 --> 00:56:58,559
and

1056
00:56:58,559 --> 00:57:00,319
also

1057
00:57:00,319 --> 00:57:01,920
experimenting with the

1058
00:57:01,920 --> 00:57:04,000
different security models like for

1059
00:57:04,000 --> 00:57:05,040
example

1060
00:57:05,040 --> 00:57:07,599
when an adversary's goal is to cover

1061
00:57:07,599 --> 00:57:10,720
more than one key

1062
00:57:11,200 --> 00:57:13,439
this

1063
00:57:20,079 --> 00:57:22,799
any questions

1064
00:57:24,880 --> 00:57:27,440
yes

1065
00:57:27,440 --> 00:57:29,839
i'm sure that the communication is also

1066
00:57:29,839 --> 00:57:31,680
optional um

1067
00:57:31,680 --> 00:57:34,879
like the cluster communication

1068
00:57:35,280 --> 00:57:36,640
we

1069
00:57:36,640 --> 00:57:40,640
did not try to do so but the

1070
00:57:40,640 --> 00:57:42,240
it should

1071
00:57:42,240 --> 00:57:45,119
i don't have an answer

1072
00:57:45,119 --> 00:57:48,720
let's start with the two-party case

1073
00:57:51,440 --> 00:57:55,720
that's an open question right

1074
00:57:55,839 --> 00:57:58,640
any more questions

1075
00:58:00,079 --> 00:58:02,240
yes just clarify the distinction between

1076
00:58:02,240 --> 00:58:04,880
the basic model and the seminars

1077
00:58:04,880 --> 00:58:09,799
what you mean when you say someone else

1078
00:58:15,200 --> 00:58:16,799
honestly they

1079
00:58:16,799 --> 00:58:19,440
make all the transactions like regular

1080
00:58:19,440 --> 00:58:21,680
players but they

1081
00:58:21,680 --> 00:58:23,839
send t-shirts that are sent to them in

1082
00:58:23,839 --> 00:58:24,799
the graph

1083
00:58:24,799 --> 00:58:28,160
they can share them with their person

1084
00:58:28,160 --> 00:58:30,319
so the connections that pass through

1085
00:58:30,319 --> 00:58:33,880
them are not secure

1086
00:58:36,319 --> 00:58:37,200
okay

1087
00:58:37,200 --> 00:58:39,839
any more questions

1088
00:58:39,839 --> 00:58:43,240
okay so if not let us

1089
00:58:43,240 --> 00:58:47,759
[Music]

1090
00:58:54,640 --> 00:58:57,440
an announcement first um the speaker

1091
00:58:57,440 --> 00:59:01,680
solved the next question please send

