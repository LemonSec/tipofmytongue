1
00:00:02,960 --> 00:00:05,120
hi everyone i'm molly devdas and today

2
00:00:05,120 --> 00:00:06,799
i'll be talking about succinct lw

3
00:00:06,799 --> 00:00:08,160
sampling random polynomials and

4
00:00:08,160 --> 00:00:10,480
observation this is joint work with my

5
00:00:10,480 --> 00:00:12,639
advisor vanilla vikings nothing at mit

6
00:00:12,639 --> 00:00:14,320
willie quack at northeastern daniel

7
00:00:14,320 --> 00:00:17,119
wicks at northeastern ndt and also hote

8
00:00:17,119 --> 00:00:19,759
at ntt

9
00:00:20,960 --> 00:00:22,080
let's start by talking about

10
00:00:22,080 --> 00:00:24,320
indistinguishability obfuscation

11
00:00:24,320 --> 00:00:25,199
we generally think of an

12
00:00:25,199 --> 00:00:26,720
indistinguishability scheme as some

13
00:00:26,720 --> 00:00:28,480
randomized compiler that takes a circuit

14
00:00:28,480 --> 00:00:30,320
c and compute some obfuscation of that

15
00:00:30,320 --> 00:00:32,238
circuit there's two properties that we

16
00:00:32,238 --> 00:00:33,600
want from this

17
00:00:33,600 --> 00:00:36,079
scheme first being correctness we want

18
00:00:36,079 --> 00:00:37,600
that the obfuscated circuit will compute

19
00:00:37,600 --> 00:00:39,520
the same function as c basically so that

20
00:00:39,520 --> 00:00:40,719
we can use it

21
00:00:40,719 --> 00:00:41,840
in the same way that we would use the

22
00:00:41,840 --> 00:00:43,520
circuit c just without leaking any

23
00:00:43,520 --> 00:00:45,440
information which is the second property

24
00:00:45,440 --> 00:00:47,440
we want security which means that the

25
00:00:47,440 --> 00:00:48,960
obfuscated circuit should hide

26
00:00:48,960 --> 00:00:50,239
everything about the implementation of

27
00:00:50,239 --> 00:00:51,280
the function

28
00:00:51,280 --> 00:00:52,399
this means that if we have two

29
00:00:52,399 --> 00:00:54,399
functional equivalent circuits c1 and c2

30
00:00:54,399 --> 00:00:55,440
which basically means that they have the

31
00:00:55,440 --> 00:00:57,280
same truth table then we should have

32
00:00:57,280 --> 00:00:59,359
that the obfuscation of c1 is

33
00:00:59,359 --> 00:01:00,879
computationally indistinguishable from

34
00:01:00,879 --> 00:01:04,239
the obfuscation of c2

35
00:01:04,479 --> 00:01:06,560
io especially in recent years has been

36
00:01:06,560 --> 00:01:08,560
shown to imply most main cryptographic

37
00:01:08,560 --> 00:01:09,920
primitives that we

38
00:01:09,920 --> 00:01:12,000
are trying to build today which means

39
00:01:12,000 --> 00:01:13,439
that it's become even more and more

40
00:01:13,439 --> 00:01:15,759
important for us to try to construct io

41
00:01:15,759 --> 00:01:17,680
with the security proof

42
00:01:17,680 --> 00:01:19,200
as we'll see in a second most of the

43
00:01:19,200 --> 00:01:21,520
current state-of-the-art io either

44
00:01:21,520 --> 00:01:23,680
relies on assumptions

45
00:01:23,680 --> 00:01:26,479
such as bilinear maps which are not

46
00:01:26,479 --> 00:01:28,640
known to be post quantum secure

47
00:01:28,640 --> 00:01:31,680
or on very complicated interactive

48
00:01:31,680 --> 00:01:33,280
non-falsifiable assumptions we'll see in

49
00:01:33,280 --> 00:01:35,840
a second but first to talk about some

50
00:01:35,840 --> 00:01:37,600
current construction state-of-the-art io

51
00:01:37,600 --> 00:01:39,280
schemes

52
00:01:39,280 --> 00:01:42,640
a recent one by jls um used uh the

53
00:01:42,640 --> 00:01:44,560
external lithium helmet assumption lpn

54
00:01:44,560 --> 00:01:47,360
over finite fields goldrick and lwe and

55
00:01:47,360 --> 00:01:49,840
then later managed to remove lwe using

56
00:01:49,840 --> 00:01:52,320
only the first three assumptions um

57
00:01:52,320 --> 00:01:54,000
again we're unhappy with these just

58
00:01:54,000 --> 00:01:56,000
because they're not post quantum secure

59
00:01:56,000 --> 00:01:58,640
uh we are going to try to base uh i o

60
00:01:58,640 --> 00:02:02,079
solely on lwb like assumptions uh which

61
00:02:02,079 --> 00:02:05,200
are believed to be post quantum secure

62
00:02:05,200 --> 00:02:07,600
what is lwe

63
00:02:07,600 --> 00:02:10,000
the lwe assumption parametrized by some

64
00:02:10,000 --> 00:02:12,160
parameters n q and chi

65
00:02:12,160 --> 00:02:13,920
uh basically states that these two

66
00:02:13,920 --> 00:02:17,760
distributions um some matrix a or uh uh

67
00:02:17,760 --> 00:02:20,239
some matrix a multiplied by secret s

68
00:02:20,239 --> 00:02:22,879
plus an error vector e

69
00:02:22,879 --> 00:02:25,680
is indistinguishable from the matrix a

70
00:02:25,680 --> 00:02:26,640
and a

71
00:02:26,640 --> 00:02:28,560
truly uniform vector

72
00:02:28,560 --> 00:02:31,920
here we have that a s a and s and u are

73
00:02:31,920 --> 00:02:33,360
all drawn uniformly from their

74
00:02:33,360 --> 00:02:36,239
distributions and e is drawn from chi uh

75
00:02:36,239 --> 00:02:38,080
we also have that

76
00:02:38,080 --> 00:02:39,840
uh just in terms of the parameters we

77
00:02:39,840 --> 00:02:41,360
usually think about m and n as being

78
00:02:41,360 --> 00:02:43,519
poly and lambda q as being two to the

79
00:02:43,519 --> 00:02:46,400
poly and lambda and chi is b bounded

80
00:02:46,400 --> 00:02:48,400
with b small enough uh that you know

81
00:02:48,400 --> 00:02:50,239
it's basically a very very small error

82
00:02:50,239 --> 00:02:51,760
that we're seeing

83
00:02:51,760 --> 00:02:55,360
uh in terms of q being the whole modulus

84
00:02:55,360 --> 00:02:57,440
we do believe this v post quantum secure

85
00:02:57,440 --> 00:03:00,480
um so if we manage to build i o from lwe

86
00:03:00,480 --> 00:03:02,319
then we will have plausibly post quantum

87
00:03:02,319 --> 00:03:03,360
secure

88
00:03:03,360 --> 00:03:05,760
i o

89
00:03:07,440 --> 00:03:08,720
what are the current constructions that

90
00:03:08,720 --> 00:03:10,879
i mentioned that are based on lwe ish

91
00:03:10,879 --> 00:03:12,080
assumptions

92
00:03:12,080 --> 00:03:15,760
so we have some based on ggh15 encodings

93
00:03:15,760 --> 00:03:17,360
the problem with these is just that we

94
00:03:17,360 --> 00:03:19,280
don't have a proof of security on the

95
00:03:19,280 --> 00:03:21,200
other hand we have this other line of

96
00:03:21,200 --> 00:03:23,519
work very recent um

97
00:03:23,519 --> 00:03:25,440
including by romaine gay and rafael pass

98
00:03:25,440 --> 00:03:28,000
and then a work from last year by botek

99
00:03:28,000 --> 00:03:29,360
and daniel

100
00:03:29,360 --> 00:03:31,120
here we do have security proofs but we

101
00:03:31,120 --> 00:03:33,040
have these very complicated

102
00:03:33,040 --> 00:03:34,799
sometimes interactive or non-falsifiable

103
00:03:34,799 --> 00:03:37,280
lw like assumptions that involve

104
00:03:37,280 --> 00:03:38,879
randomness leakage and other things that

105
00:03:38,879 --> 00:03:40,720
aren't well studied uh we would really

106
00:03:40,720 --> 00:03:42,959
like to base io on an lwb like

107
00:03:42,959 --> 00:03:44,480
assumption that is well studied and

108
00:03:44,480 --> 00:03:47,120
falsifiable and non-interactive which is

109
00:03:47,120 --> 00:03:49,840
the main goal of this work

110
00:03:49,840 --> 00:03:51,680
how are we going to do this so we will

111
00:03:51,680 --> 00:03:54,239
use succinct randomized encodings uh

112
00:03:54,239 --> 00:03:56,000
what is a sync to randomizing coding

113
00:03:56,000 --> 00:03:57,360
assisting to analyze encoding of some

114
00:03:57,360 --> 00:04:00,799
function which maps l bits to end bits

115
00:04:00,799 --> 00:04:01,760
is an

116
00:04:01,760 --> 00:04:03,280
efficient probabilistic algorithm in

117
00:04:03,280 --> 00:04:05,200
code such that here are the three

118
00:04:05,200 --> 00:04:06,239
properties you want first of all

119
00:04:06,239 --> 00:04:07,360
correctness

120
00:04:07,360 --> 00:04:09,360
given the crs we're working in the crs

121
00:04:09,360 --> 00:04:10,720
model here

122
00:04:10,720 --> 00:04:12,560
the function f and the encoding we

123
00:04:12,560 --> 00:04:14,640
should be able to efficiently recover f

124
00:04:14,640 --> 00:04:16,320
x

125
00:04:16,320 --> 00:04:17,600
security

126
00:04:17,600 --> 00:04:19,519
so for any two inputs

127
00:04:19,519 --> 00:04:22,880
x 0 and x 1 such that f x 0 is equal to

128
00:04:22,880 --> 00:04:24,720
f x 1 we should have that their

129
00:04:24,720 --> 00:04:26,160
encodings are computationally

130
00:04:26,160 --> 00:04:28,479
distinguishable

131
00:04:28,479 --> 00:04:30,400
and lastly it's a sinkness we need a

132
00:04:30,400 --> 00:04:32,080
pretty strong bound on this thing this

133
00:04:32,080 --> 00:04:34,639
year we want that the encoding

134
00:04:34,639 --> 00:04:36,880
has bit length n to the one minus delta

135
00:04:36,880 --> 00:04:39,600
for some delta less than one

136
00:04:39,600 --> 00:04:41,840
i'm ignoring here uh factors that are

137
00:04:41,840 --> 00:04:43,600
polynomial in the security parameter or

138
00:04:43,600 --> 00:04:45,520
l et cetera since they're not that

139
00:04:45,520 --> 00:04:47,919
important

140
00:04:48,000 --> 00:04:50,160
we already know that sre

141
00:04:50,160 --> 00:04:53,120
as defined before uh suffices for io

142
00:04:53,120 --> 00:04:54,479
this is from work from a couple of years

143
00:04:54,479 --> 00:04:56,080
ago i'm not going to get into it but

144
00:04:56,080 --> 00:04:57,680
basically you can think about the input

145
00:04:57,680 --> 00:04:59,840
x as being the description of a circuit

146
00:04:59,840 --> 00:05:01,919
and f being the universal function

147
00:05:01,919 --> 00:05:03,759
so f is basically just going to compute

148
00:05:03,759 --> 00:05:05,919
the truth table of x i you know evaluate

149
00:05:05,919 --> 00:05:09,680
circuit x on all possible inputs

150
00:05:09,680 --> 00:05:11,360
we'll now turn to actually constructing

151
00:05:11,360 --> 00:05:14,639
such an sre scheme

152
00:05:14,639 --> 00:05:16,720
okay here's our first try based on some

153
00:05:16,720 --> 00:05:19,759
homeowner commitment schemes um gsw and

154
00:05:19,759 --> 00:05:22,000
gvw if you're familiar

155
00:05:22,000 --> 00:05:24,560
so we'll have some c this commitment c

156
00:05:24,560 --> 00:05:27,199
will consist of a matrix a a tall skinny

157
00:05:27,199 --> 00:05:28,400
matrix a

158
00:05:28,400 --> 00:05:30,560
here we have that w much much smaller

159
00:05:30,560 --> 00:05:31,600
than m

160
00:05:31,600 --> 00:05:33,280
uh we're going to multiply by some

161
00:05:33,280 --> 00:05:35,520
randomness r add an error e and then

162
00:05:35,520 --> 00:05:37,520
finally our encoding of the input will

163
00:05:37,520 --> 00:05:39,520
be x tensor g where g is the gadget

164
00:05:39,520 --> 00:05:41,840
matrix

165
00:05:41,840 --> 00:05:43,919
we can perform homomorphic evaluation on

166
00:05:43,919 --> 00:05:47,440
this commitment to get c sub f

167
00:05:47,440 --> 00:05:48,400
uh

168
00:05:48,400 --> 00:05:50,160
note that the homomorphic evaluation

169
00:05:50,160 --> 00:05:53,199
only only requires knowledge um of the

170
00:05:53,199 --> 00:05:55,120
function f and not of the input x

171
00:05:55,120 --> 00:05:56,479
however

172
00:05:56,479 --> 00:05:58,240
the two matrices that we see here are

173
00:05:58,240 --> 00:06:00,400
sub f of x and e sub f of x

174
00:06:00,400 --> 00:06:02,880
they do depend on x

175
00:06:02,880 --> 00:06:03,600
and

176
00:06:03,600 --> 00:06:05,280
after doing this homomorphic evaluation

177
00:06:05,280 --> 00:06:06,400
we can recover

178
00:06:06,400 --> 00:06:08,479
f of x by simply

179
00:06:08,479 --> 00:06:13,039
subtracting uh a times r sub f of f of x

180
00:06:13,039 --> 00:06:15,120
and then rounding because e sub f x will

181
00:06:15,120 --> 00:06:17,680
still be small

182
00:06:17,680 --> 00:06:20,319
however revealing r sub fx is

183
00:06:20,319 --> 00:06:21,919
semantically insecure

184
00:06:21,919 --> 00:06:24,080
uh just to clarify in this picture what

185
00:06:24,080 --> 00:06:25,680
we see in orange are the things that are

186
00:06:25,680 --> 00:06:28,080
released publicly and what we see in

187
00:06:28,080 --> 00:06:29,360
blue are the things that are either you

188
00:06:29,360 --> 00:06:32,400
know computed by uh the the person who's

189
00:06:32,400 --> 00:06:34,960
trying to evaluate the circuit um

190
00:06:34,960 --> 00:06:36,960
or they're uh

191
00:06:36,960 --> 00:06:38,639
or they're they're not given at all and

192
00:06:38,639 --> 00:06:40,000
they're just kind of implicit in the

193
00:06:40,000 --> 00:06:42,080
construction

194
00:06:42,080 --> 00:06:43,360
so this is basically the issue with

195
00:06:43,360 --> 00:06:45,600
their first try um we have system this

196
00:06:45,600 --> 00:06:47,520
year um we managed to get some sickness

197
00:06:47,520 --> 00:06:49,120
basically by the fact that c will be

198
00:06:49,120 --> 00:06:52,319
much smaller than c sub f um however

199
00:06:52,319 --> 00:06:54,800
revealing r sub f x is not actually

200
00:06:54,800 --> 00:06:57,199
going to give us security

201
00:06:57,199 --> 00:07:00,080
so what are we going to do

202
00:07:01,280 --> 00:07:02,800
again committing to x using the

203
00:07:02,800 --> 00:07:04,800
homeowner for commitment scheme

204
00:07:04,800 --> 00:07:07,120
what if we now also generate some new

205
00:07:07,120 --> 00:07:10,160
lwe instance b star um in terms of the

206
00:07:10,160 --> 00:07:12,000
same a as as in our commitment so we'll

207
00:07:12,000 --> 00:07:14,400
have b stars equal to a s star plus e

208
00:07:14,400 --> 00:07:16,400
star in this ideal world this is

209
00:07:16,400 --> 00:07:17,599
basically just a straw man we're

210
00:07:17,599 --> 00:07:19,680
thinking of s as being random and e is

211
00:07:19,680 --> 00:07:21,039
being gaussian like how we would really

212
00:07:21,039 --> 00:07:24,080
want to know the v sample to be

213
00:07:24,080 --> 00:07:26,880
the sre will be a c so this is the same

214
00:07:26,880 --> 00:07:28,160
as before

215
00:07:28,160 --> 00:07:29,919
b star so that's new we're adding that

216
00:07:29,919 --> 00:07:33,520
into sre now and then r sub f x plus s

217
00:07:33,520 --> 00:07:34,319
star

218
00:07:34,319 --> 00:07:36,560
so the point of this here is that we're

219
00:07:36,560 --> 00:07:38,479
going to basically mask any information

220
00:07:38,479 --> 00:07:41,199
that r sub f x might leak

221
00:07:41,199 --> 00:07:44,879
by adding the truly random s star

222
00:07:44,879 --> 00:07:46,960
to decode um you start by

223
00:07:46,960 --> 00:07:49,039
homomorphically evaluating c to get c

224
00:07:49,039 --> 00:07:50,400
sub f

225
00:07:50,400 --> 00:07:54,479
then you add b star and subtract a times

226
00:07:54,479 --> 00:07:57,440
r sub f x plus s star

227
00:07:57,440 --> 00:07:59,840
this basically works out to what you

228
00:07:59,840 --> 00:08:03,280
would expect and eventually you get that

229
00:08:03,280 --> 00:08:04,879
all of the terms except for the errors

230
00:08:04,879 --> 00:08:06,160
cancel

231
00:08:06,160 --> 00:08:08,000
and then you can just round to recover f

232
00:08:08,000 --> 00:08:10,319
of x

233
00:08:10,560 --> 00:08:12,560
however this doesn't work either because

234
00:08:12,560 --> 00:08:15,199
this is not succinct uh b star

235
00:08:15,199 --> 00:08:17,599
has the same size as c sub f remember

236
00:08:17,599 --> 00:08:18,720
the reason why we got the significance

237
00:08:18,720 --> 00:08:20,639
in the first uh the first try was

238
00:08:20,639 --> 00:08:22,560
because we weren't giving c sub f c sub

239
00:08:22,560 --> 00:08:24,080
for just giving c and then asking the

240
00:08:24,080 --> 00:08:26,319
evaluator to do homomorphic evaluation

241
00:08:26,319 --> 00:08:29,039
in this case because b star is actually

242
00:08:29,039 --> 00:08:30,800
just as big as cf it just gets added to

243
00:08:30,800 --> 00:08:32,479
it um it has been length n and we no

244
00:08:32,479 --> 00:08:35,360
longer have sickness

245
00:08:35,360 --> 00:08:37,200
our third try

246
00:08:37,200 --> 00:08:39,279
uh again committing to x using homeowner

247
00:08:39,279 --> 00:08:41,440
for commitment scheme now we're going to

248
00:08:41,440 --> 00:08:44,800
sample a short seed for b star

249
00:08:44,800 --> 00:08:47,200
the sre will be just replacing b star

250
00:08:47,200 --> 00:08:49,279
with the short seed

251
00:08:49,279 --> 00:08:51,360
and to decode we're just going to expand

252
00:08:51,360 --> 00:08:53,920
the seed to the full matrix b star and

253
00:08:53,920 --> 00:08:58,080
proceed as as decoding used to happen

254
00:08:58,080 --> 00:08:59,920
this one you know this is this is really

255
00:08:59,920 --> 00:09:01,040
what we want this is the point of this

256
00:09:01,040 --> 00:09:03,360
work um basically what we're gonna see

257
00:09:03,360 --> 00:09:06,480
is uh this new notion of succinct lwb

258
00:09:06,480 --> 00:09:08,080
sampling

259
00:09:08,080 --> 00:09:10,399
where we have some two functions shed

260
00:09:10,399 --> 00:09:12,800
and expand gen will sample some short

261
00:09:12,800 --> 00:09:14,240
seed c b

262
00:09:14,240 --> 00:09:17,519
c sub b star and expand taking the crs

263
00:09:17,519 --> 00:09:20,839
and the seed can give us back b

264
00:09:20,839 --> 00:09:22,399
star

265
00:09:22,399 --> 00:09:24,080
we'll now define what we actually mean

266
00:09:24,080 --> 00:09:26,480
by sustained lwb sampler so there's

267
00:09:26,480 --> 00:09:28,240
three properties we want first being

268
00:09:28,240 --> 00:09:30,560
correctness um we basically so we'll

269
00:09:30,560 --> 00:09:32,959
often write it as b star is uh equal to

270
00:09:32,959 --> 00:09:34,880
a star s star plus

271
00:09:34,880 --> 00:09:35,839
e star

272
00:09:35,839 --> 00:09:37,200
however

273
00:09:37,200 --> 00:09:38,640
uh just for to define correctness this

274
00:09:38,640 --> 00:09:39,839
way basically what we want is that you

275
00:09:39,839 --> 00:09:41,360
start is approximately

276
00:09:41,360 --> 00:09:43,920
a star star

277
00:09:43,920 --> 00:09:46,000
security we'll get to in a second um

278
00:09:46,000 --> 00:09:47,519
because it's very non-trivial uh

279
00:09:47,519 --> 00:09:49,920
intuitively we basically want you know

280
00:09:49,920 --> 00:09:51,920
to be as close to the ideal world as

281
00:09:51,920 --> 00:09:53,600
possible again the ideal world being

282
00:09:53,600 --> 00:09:55,680
where s star is truly random and east

283
00:09:55,680 --> 00:09:57,200
star is gaussian

284
00:09:57,200 --> 00:09:58,959
however this is not really achievable

285
00:09:58,959 --> 00:10:00,240
and so i'll talk in the next couple of

286
00:10:00,240 --> 00:10:01,760
minutes about what we actually do manage

287
00:10:01,760 --> 00:10:03,839
to achieve

288
00:10:03,839 --> 00:10:06,720
in terms of security

289
00:10:07,200 --> 00:10:08,880
the the last property that we want is to

290
00:10:08,880 --> 00:10:11,440
sickness um so succinct states that the

291
00:10:11,440 --> 00:10:13,760
seed should have bit length n to the one

292
00:10:13,760 --> 00:10:16,320
minus uh delta

293
00:10:16,320 --> 00:10:17,920
where again n is the bit length of v

294
00:10:17,920 --> 00:10:22,240
star uh for some delta less than one

295
00:10:24,880 --> 00:10:27,040
okay let's uh revisit the security

296
00:10:27,040 --> 00:10:28,480
notion now that we've covered

297
00:10:28,480 --> 00:10:29,839
correctness and sensingness which are

298
00:10:29,839 --> 00:10:31,920
pretty simple to define

299
00:10:31,920 --> 00:10:33,760
the question is what security guarantee

300
00:10:33,760 --> 00:10:36,160
do we really need in order to be able to

301
00:10:36,160 --> 00:10:38,079
upgrade this and use it to create a

302
00:10:38,079 --> 00:10:39,839
semantically secure sre in the way that

303
00:10:39,839 --> 00:10:42,560
i just described

304
00:10:42,880 --> 00:10:44,560
so first

305
00:10:44,560 --> 00:10:47,760
we'll remember the definition from ww um

306
00:10:47,760 --> 00:10:49,920
which basically asked that even if

307
00:10:49,920 --> 00:10:52,320
you're given the seed b star still looks

308
00:10:52,320 --> 00:10:54,399
indistinguishable from fresh lgbt

309
00:10:54,399 --> 00:10:55,839
samples here if i fresh all the way

310
00:10:55,839 --> 00:10:58,240
samples you mean like ideal ones with uh

311
00:10:58,240 --> 00:11:00,880
truly random s and gaussian e

312
00:11:00,880 --> 00:11:02,240
unfortunately

313
00:11:02,240 --> 00:11:04,640
this definition requires a simulator

314
00:11:04,640 --> 00:11:06,720
it depends on the the circuit

315
00:11:06,720 --> 00:11:07,839
implementation by what you mean

316
00:11:07,839 --> 00:11:09,760
basically you're homomorphically

317
00:11:09,760 --> 00:11:11,760
evaluating and the way that that

318
00:11:11,760 --> 00:11:13,680
evaluation is implemented actually

319
00:11:13,680 --> 00:11:15,760
affects the security of this scheme uh

320
00:11:15,760 --> 00:11:18,160
there was a paper last year also showing

321
00:11:18,160 --> 00:11:19,200
that for a specific circuit

322
00:11:19,200 --> 00:11:21,040
implementation this is actually broken

323
00:11:21,040 --> 00:11:22,720
um there's other good implementations

324
00:11:22,720 --> 00:11:24,480
that which is not broken but the point

325
00:11:24,480 --> 00:11:25,680
being this this assumption is too

326
00:11:25,680 --> 00:11:26,880
complicated and we want something much

327
00:11:26,880 --> 00:11:30,160
simpler and easier to work with

328
00:11:32,720 --> 00:11:34,880
really all we need from e star is that

329
00:11:34,880 --> 00:11:38,000
we want you start to mask e sub f x if

330
00:11:38,000 --> 00:11:40,160
you recall this is kind of the the error

331
00:11:40,160 --> 00:11:42,399
term that gets left added on to our

332
00:11:42,399 --> 00:11:44,079
what we eventually are going to decode

333
00:11:44,079 --> 00:11:45,680
um and so what we want is that e star is

334
00:11:45,680 --> 00:11:47,440
going to mask this e sub f x which is

335
00:11:47,440 --> 00:11:48,959
dependent on x and therefore something

336
00:11:48,959 --> 00:11:51,760
that we don't want to leak

337
00:11:52,560 --> 00:11:54,160
okay so let's take another stab at

338
00:11:54,160 --> 00:11:55,600
defining what exactly you mean by

339
00:11:55,600 --> 00:11:57,839
security

340
00:11:58,720 --> 00:12:00,480
basically what we want is that easter is

341
00:12:00,480 --> 00:12:02,720
a good flooding distribution um and then

342
00:12:02,720 --> 00:12:04,800
it's able to flood uh use of fx in the

343
00:12:04,800 --> 00:12:07,040
way that i said before

344
00:12:07,040 --> 00:12:08,720
how could we quantify this we could say

345
00:12:08,720 --> 00:12:12,160
that for all uh f x zero and x one such

346
00:12:12,160 --> 00:12:13,760
that f of x zero is equal to f of x one

347
00:12:13,760 --> 00:12:15,040
so basically taking the same approach

348
00:12:15,040 --> 00:12:17,360
for security as um in the the security

349
00:12:17,360 --> 00:12:18,880
definition for sre

350
00:12:18,880 --> 00:12:21,120
um

351
00:12:21,440 --> 00:12:23,600
we can state that we want uh given the

352
00:12:23,600 --> 00:12:27,120
seed um and some encryption of the two

353
00:12:27,120 --> 00:12:29,680
inputs that we basically have uh the

354
00:12:29,680 --> 00:12:31,279
property that estar is going to flood

355
00:12:31,279 --> 00:12:32,320
the error

356
00:12:32,320 --> 00:12:34,240
this error is is is what we think of as

357
00:12:34,240 --> 00:12:36,399
the error that's created by homomorphic

358
00:12:36,399 --> 00:12:40,160
evaluating f on the encryption of x

359
00:12:40,160 --> 00:12:42,079
unfortunately we're still not happy with

360
00:12:42,079 --> 00:12:44,399
this um this quantifies over all f it's

361
00:12:44,399 --> 00:12:46,639
not falsifiable it's hard to work with

362
00:12:46,639 --> 00:12:47,920
we really want something that's going to

363
00:12:47,920 --> 00:12:48,880
be

364
00:12:48,880 --> 00:12:52,000
a much much easier to analyze but we do

365
00:12:52,000 --> 00:12:53,920
we want that notion to imply this one

366
00:12:53,920 --> 00:12:55,200
right because this is pretty much the

367
00:12:55,200 --> 00:12:56,480
weakest security notion that we feel

368
00:12:56,480 --> 00:12:57,920
comfortable with but we we want to make

369
00:12:57,920 --> 00:12:59,680
sure that we're going to get this but we

370
00:12:59,680 --> 00:13:00,959
don't want to have to necessarily

371
00:13:00,959 --> 00:13:04,480
analyze it um so what can we do

372
00:13:04,480 --> 00:13:06,639
this is basically the main punch line of

373
00:13:06,639 --> 00:13:08,000
our paper

374
00:13:08,000 --> 00:13:10,240
we we show that it suffices to protect a

375
00:13:10,240 --> 00:13:12,079
single and operation

376
00:13:12,079 --> 00:13:14,399
which means that uh all we need to show

377
00:13:14,399 --> 00:13:17,120
is that given seed for b star if you

378
00:13:17,120 --> 00:13:19,120
have an encryption of zero and one and

379
00:13:19,120 --> 00:13:20,720
encryption is zero and zero

380
00:13:20,720 --> 00:13:22,880
and then you homomorphically

381
00:13:22,880 --> 00:13:25,600
evaluate and on these ciphertexts

382
00:13:25,600 --> 00:13:28,079
that the the resulting

383
00:13:28,079 --> 00:13:32,000
error can be flooded by e-star

384
00:13:32,560 --> 00:13:34,320
we use a hybrid argument and a flag

385
00:13:34,320 --> 00:13:36,639
trick that's implicit in in ww but not

386
00:13:36,639 --> 00:13:39,600
really abstracted out or specified well

387
00:13:39,600 --> 00:13:41,440
and this gives us what we want which is

388
00:13:41,440 --> 00:13:44,240
strong security

389
00:13:45,839 --> 00:13:47,199
i'll very briefly outline the

390
00:13:47,199 --> 00:13:49,760
construction just in a small case uh the

391
00:13:49,760 --> 00:13:51,600
entries of e-star end up being

392
00:13:51,600 --> 00:13:53,600
low-degree multi-linear polynomials in

393
00:13:53,600 --> 00:13:55,440
the entries of the original e's which

394
00:13:55,440 --> 00:13:57,519
i'll show in a second um this is where

395
00:13:57,519 --> 00:13:58,959
the the part of the head over paper

396
00:13:58,959 --> 00:14:01,360
random polynomials comes in um so for d

397
00:14:01,360 --> 00:14:04,000
equals two we basically have that the

398
00:14:04,000 --> 00:14:07,120
the seed for b star will be two lwe

399
00:14:07,120 --> 00:14:10,480
samples for a one and a two

400
00:14:10,480 --> 00:14:12,399
uh we'll compute b star by taking the

401
00:14:12,399 --> 00:14:15,279
tensor of these of these two samples um

402
00:14:15,279 --> 00:14:17,360
using the mixed product property we can

403
00:14:17,360 --> 00:14:19,680
simplify this um until we get something

404
00:14:19,680 --> 00:14:21,680
that looks kind of like uh what we want

405
00:14:21,680 --> 00:14:23,839
an lw sample to look like this strange

406
00:14:23,839 --> 00:14:25,519
thing with with a's and i's is going to

407
00:14:25,519 --> 00:14:27,040
become our a-star

408
00:14:27,040 --> 00:14:29,519
um this term that depends on s b and e

409
00:14:29,519 --> 00:14:32,399
will become our s star and then e1 and

410
00:14:32,399 --> 00:14:34,880
tensor e2 will become our e star this is

411
00:14:34,880 --> 00:14:37,279
why the entries of e star are uh low to

412
00:14:37,279 --> 00:14:39,680
b polynomials um it's worth noting we

413
00:14:39,680 --> 00:14:41,600
actually are multiplying like b star is

414
00:14:41,600 --> 00:14:44,160
actually going to be p times v1 tensor

415
00:14:44,160 --> 00:14:46,000
v2 times p prime these are large

416
00:14:46,000 --> 00:14:48,560
matrices that we keep in this in the crs

417
00:14:48,560 --> 00:14:50,240
um without getting into too much detail

418
00:14:50,240 --> 00:14:52,000
we're also going to re-randomize a-star

419
00:14:52,000 --> 00:14:53,519
and s-star i'm using killian

420
00:14:53,519 --> 00:14:55,360
randomization just to ensure that they

421
00:14:55,360 --> 00:14:56,399
don't leak anything more than the

422
00:14:56,399 --> 00:14:58,560
product this allows us to focus solely

423
00:14:58,560 --> 00:15:00,959
on e-star um in the paper we also do

424
00:15:00,959 --> 00:15:02,800
some cryptanalysis

425
00:15:02,800 --> 00:15:05,519
showing that some attacks like such as

426
00:15:05,519 --> 00:15:08,000
linearization sum of squares uh

427
00:15:08,000 --> 00:15:09,600
covariance attacks

428
00:15:09,600 --> 00:15:12,399
won't work on e-star um and there's also

429
00:15:12,399 --> 00:15:14,320
been some recent work showing that we

430
00:15:14,320 --> 00:15:16,639
cannot actually hope for e-star to look

431
00:15:16,639 --> 00:15:18,800
uh pseudo-iid on its own

432
00:15:18,800 --> 00:15:21,040
however uh again we don't need that all

433
00:15:21,040 --> 00:15:24,320
we need is freestar to flood uh the the

434
00:15:24,320 --> 00:15:26,720
error from one and operation um so we

435
00:15:26,720 --> 00:15:28,639
still have confidence in our scheme

436
00:15:28,639 --> 00:15:30,560
uh and i think that's my time so thank

437
00:15:30,560 --> 00:15:33,560
you

