1
00:00:00,640 --> 00:00:02,560
hello everyone and welcome to my talk on

2
00:00:02,560 --> 00:00:04,480
our paper on the impossibility of purely

3
00:00:04,480 --> 00:00:06,080
algebraic signatures

4
00:00:06,080 --> 00:00:07,680
my name is dominic hartmann and this is

5
00:00:07,680 --> 00:00:09,440
joint work with nico doddling dennis who

6
00:00:09,440 --> 00:00:13,040
finds ike kills svenshek and bogdan also

7
00:00:13,040 --> 00:00:15,839
so let's get started

8
00:00:15,839 --> 00:00:18,000
we look at digital signatures and as we

9
00:00:18,000 --> 00:00:19,520
all know they are an integral part to

10
00:00:19,520 --> 00:00:20,960
modern communications and basically

11
00:00:20,960 --> 00:00:23,519
ubiquitous and therefore various

12
00:00:23,519 --> 00:00:24,880
assumptions and primitives have been

13
00:00:24,880 --> 00:00:27,840
shown to yield digital signatures

14
00:00:27,840 --> 00:00:29,359
for example we know that one-way

15
00:00:29,359 --> 00:00:30,800
functions

16
00:00:30,800 --> 00:00:32,479
are sufficient

17
00:00:32,479 --> 00:00:33,840
and necessary to build digital

18
00:00:33,840 --> 00:00:36,320
signatures and we can also build them

19
00:00:36,320 --> 00:00:38,559
from discrete logarithm

20
00:00:38,559 --> 00:00:40,719
assumptions and the random oracle model

21
00:00:40,719 --> 00:00:42,879
for example schnorr signatures from

22
00:00:42,879 --> 00:00:45,760
pairings like boniboyan signatures from

23
00:00:45,760 --> 00:00:48,079
lattices and random oracles

24
00:00:48,079 --> 00:00:50,239
e.g the construction of gentry at all

25
00:00:50,239 --> 00:00:54,000
and hash functions like merkle trees

26
00:00:54,000 --> 00:00:55,840
and it is always interesting to see

27
00:00:55,840 --> 00:00:57,199
which assumptions are actually

28
00:00:57,199 --> 00:00:59,760
sufficient to build specific primitives

29
00:00:59,760 --> 00:01:02,559
so what we are looking at is whether

30
00:01:02,559 --> 00:01:03,600
just

31
00:01:03,600 --> 00:01:05,040
a group is enough to actually build

32
00:01:05,040 --> 00:01:07,680
signatures because as of right now there

33
00:01:07,680 --> 00:01:09,360
are no constructions from just groups

34
00:01:09,360 --> 00:01:11,680
you always need some additional property

35
00:01:11,680 --> 00:01:14,560
like a pairing or a random oracle to

36
00:01:14,560 --> 00:01:16,799
achieve signatures so we asked the

37
00:01:16,799 --> 00:01:18,159
question

38
00:01:18,159 --> 00:01:20,479
is this inherent can we actually build

39
00:01:20,479 --> 00:01:23,600
signatures from just groups

40
00:01:23,600 --> 00:01:26,560
and we prove that for a specific class

41
00:01:26,560 --> 00:01:27,360
of

42
00:01:27,360 --> 00:01:28,960
natural signatures over groups this is

43
00:01:28,960 --> 00:01:31,040
actually impossible

44
00:01:31,040 --> 00:01:33,600
so what are our contributions firstly

45
00:01:33,600 --> 00:01:36,079
we've defined this class of signatures

46
00:01:36,079 --> 00:01:38,320
which we call algebraic signatures over

47
00:01:38,320 --> 00:01:40,560
prime order groups and show that in the

48
00:01:40,560 --> 00:01:42,560
generic group model these signatures

49
00:01:42,560 --> 00:01:44,960
can't be secure

50
00:01:44,960 --> 00:01:47,439
secondly we define simplified algebraic

51
00:01:47,439 --> 00:01:49,920
signatures which also capture hidden

52
00:01:49,920 --> 00:01:52,159
order groups and we show that these

53
00:01:52,159 --> 00:01:54,320
simplified algebraic signatures can't be

54
00:01:54,320 --> 00:01:57,520
secure even in the standard model

55
00:01:57,520 --> 00:01:59,840
and lastly we show an application of

56
00:01:59,840 --> 00:02:01,920
this whole framework and show that bls

57
00:02:01,920 --> 00:02:05,119
signatures can actually be expressed

58
00:02:05,119 --> 00:02:07,040
as simplified algebraic signatures if

59
00:02:07,040 --> 00:02:08,878
you instantiate them

60
00:02:08,878 --> 00:02:10,878
with an algebraic hash function

61
00:02:10,878 --> 00:02:13,360
and therefore we also show that bis

62
00:02:13,360 --> 00:02:16,000
signatures can't be implemented securely

63
00:02:16,000 --> 00:02:19,520
with an algebraic hash function

64
00:02:19,920 --> 00:02:23,120
okay so let's get started

65
00:02:23,120 --> 00:02:25,040
how do these algebraic signatures

66
00:02:25,040 --> 00:02:26,800
actually look like

67
00:02:26,800 --> 00:02:29,040
because this will be the main focus of

68
00:02:29,040 --> 00:02:30,800
this talk

69
00:02:30,800 --> 00:02:33,040
so i'll mainly focus on the prime order

70
00:02:33,040 --> 00:02:34,879
group case and just give you the high

71
00:02:34,879 --> 00:02:38,319
level idea for the hidden order groups

72
00:02:38,319 --> 00:02:41,280
and i'll just briefly talk about the

73
00:02:41,280 --> 00:02:44,000
application in the end

74
00:02:44,000 --> 00:02:44,879
so

75
00:02:44,879 --> 00:02:47,200
how do we model signatures over just a

76
00:02:47,200 --> 00:02:49,280
group because

77
00:02:49,280 --> 00:02:52,640
it is not so clear uh how exactly do you

78
00:02:52,640 --> 00:02:54,319
prevent an adversary from doing things

79
00:02:54,319 --> 00:02:56,319
that are not really allowed or should

80
00:02:56,319 --> 00:02:57,840
not be allowed in a group or what these

81
00:02:57,840 --> 00:02:59,200
things actually are

82
00:02:59,200 --> 00:03:01,040
so um

83
00:03:01,040 --> 00:03:03,519
a signature that works just over group

84
00:03:03,519 --> 00:03:05,519
should basically only use the group

85
00:03:05,519 --> 00:03:07,599
structure and it should also be

86
00:03:07,599 --> 00:03:10,080
independent of the group representation

87
00:03:10,080 --> 00:03:12,239
because then it could do all sorts of

88
00:03:12,239 --> 00:03:14,400
things with this bit representation for

89
00:03:14,400 --> 00:03:16,720
example hash the group elements or hash

90
00:03:16,720 --> 00:03:18,560
into the group and

91
00:03:18,560 --> 00:03:20,720
then the security might actually depend

92
00:03:20,720 --> 00:03:22,480
on the hash function

93
00:03:22,480 --> 00:03:26,159
and not on the group itself

94
00:03:26,159 --> 00:03:28,319
so especially it should not be allowed

95
00:03:28,319 --> 00:03:30,959
to encode some other hard problem into

96
00:03:30,959 --> 00:03:33,200
group elements or into the structure of

97
00:03:33,200 --> 00:03:35,040
group elements and of course we also

98
00:03:35,040 --> 00:03:36,720
need a formalization which actually

99
00:03:36,720 --> 00:03:38,319
allows for more than just pathological

100
00:03:38,319 --> 00:03:40,239
examples so we need a large class of

101
00:03:40,239 --> 00:03:41,840
signatures otherwise an impossibility

102
00:03:41,840 --> 00:03:43,680
result wouldn't really be all that

103
00:03:43,680 --> 00:03:45,280
interesting

104
00:03:45,280 --> 00:03:47,519
and it seems that the right abstraction

105
00:03:47,519 --> 00:03:50,560
for this is the generic group model

106
00:03:50,560 --> 00:03:53,760
which was introduced by shoop and later

107
00:03:53,760 --> 00:03:54,959
a different

108
00:03:54,959 --> 00:03:57,280
definition was given by maura

109
00:03:57,280 --> 00:03:59,680
so let me recall the generic group model

110
00:03:59,680 --> 00:04:01,360
first

111
00:04:01,360 --> 00:04:03,920
in the generic group model we idealize a

112
00:04:03,920 --> 00:04:05,360
prime order group

113
00:04:05,360 --> 00:04:06,480
and

114
00:04:06,480 --> 00:04:09,280
instead of giving an adversary access to

115
00:04:09,280 --> 00:04:12,000
the group representation it only gets

116
00:04:12,000 --> 00:04:13,840
labels for group elements which

117
00:04:13,840 --> 00:04:15,760
themselves don't have any structure and

118
00:04:15,760 --> 00:04:17,440
don't help in computing anything about

119
00:04:17,440 --> 00:04:18,320
the group

120
00:04:18,320 --> 00:04:19,358
so

121
00:04:19,358 --> 00:04:21,440
in order to actually use the group the

122
00:04:21,440 --> 00:04:23,840
adversary also needs

123
00:04:23,840 --> 00:04:25,600
oracles which perform the group

124
00:04:25,600 --> 00:04:26,880
operations

125
00:04:26,880 --> 00:04:27,600
and

126
00:04:27,600 --> 00:04:30,000
generally in the generic group model the

127
00:04:30,000 --> 00:04:32,560
runtime of an adversary or an algorithm

128
00:04:32,560 --> 00:04:33,840
is generally

129
00:04:33,840 --> 00:04:35,120
measured in the number of group

130
00:04:35,120 --> 00:04:37,040
operations that it performs so oracle

131
00:04:37,040 --> 00:04:39,120
queries

132
00:04:39,120 --> 00:04:41,120
later our adversary will actually be

133
00:04:41,120 --> 00:04:43,120
efficient in terms of group operations

134
00:04:43,120 --> 00:04:44,960
but inefficient outside the groups the

135
00:04:44,960 --> 00:04:48,400
except the exact interpretation of that

136
00:04:48,400 --> 00:04:50,960
will come later so keep that in mind

137
00:04:50,960 --> 00:04:52,240
i'll talk about

138
00:04:52,240 --> 00:04:54,960
this specific runtime measurement

139
00:04:54,960 --> 00:04:56,560
in a bit

140
00:04:56,560 --> 00:04:58,160
so as i said there are two variants of

141
00:04:58,160 --> 00:05:00,080
the generic group model one by shupe and

142
00:05:00,080 --> 00:05:03,120
one by maura and they differ in how they

143
00:05:03,120 --> 00:05:04,639
assign these labels

144
00:05:04,639 --> 00:05:06,479
in shoot generic group model every group

145
00:05:06,479 --> 00:05:08,720
element gets a random bit string as a

146
00:05:08,720 --> 00:05:10,960
label from some domain that is large

147
00:05:10,960 --> 00:05:12,160
enough

148
00:05:12,160 --> 00:05:14,560
while in maura's generic group model the

149
00:05:14,560 --> 00:05:17,039
labels are sequential so whenever

150
00:05:17,039 --> 00:05:18,479
a new group element is given to the

151
00:05:18,479 --> 00:05:20,320
adversary it just gets the next label

152
00:05:20,320 --> 00:05:23,039
like one two three so they aren't random

153
00:05:23,039 --> 00:05:25,039
they are just completely meaningless

154
00:05:25,039 --> 00:05:26,320
basically

155
00:05:26,320 --> 00:05:29,919
and just a sequence of numbers

156
00:05:29,919 --> 00:05:30,720
so

157
00:05:30,720 --> 00:05:32,400
why should we choose one over the other

158
00:05:32,400 --> 00:05:34,320
well in shoots generic group model we

159
00:05:34,320 --> 00:05:37,280
know that this implies signatures

160
00:05:37,280 --> 00:05:38,400
you can actually

161
00:05:38,400 --> 00:05:40,400
prove schnoor signature is secure in

162
00:05:40,400 --> 00:05:43,840
this in this model and it even can be

163
00:05:43,840 --> 00:05:46,320
used to build a random oracle while in

164
00:05:46,320 --> 00:05:48,400
mars group model

165
00:05:48,400 --> 00:05:50,479
it's not known to imply signatures

166
00:05:50,479 --> 00:05:52,639
so we use marvel's generic group model

167
00:05:52,639 --> 00:05:54,560
because otherwise impossibility results

168
00:05:54,560 --> 00:05:56,240
aren't really feasible because we know

169
00:05:56,240 --> 00:05:58,400
that there actually are signatures in

170
00:05:58,400 --> 00:06:01,199
shoe's generic group model

171
00:06:01,199 --> 00:06:04,240
okay now that we know what we can do in

172
00:06:04,240 --> 00:06:06,479
this model

173
00:06:06,479 --> 00:06:08,960
we can

174
00:06:09,199 --> 00:06:11,280
talk about how to model

175
00:06:11,280 --> 00:06:14,000
algebraic signatures

176
00:06:14,000 --> 00:06:15,680
and the idea is of course we have a

177
00:06:15,680 --> 00:06:17,440
prime order group g

178
00:06:17,440 --> 00:06:20,160
and we need some parameters n k l and

179
00:06:20,160 --> 00:06:22,800
kappa and throughout the rest of this

180
00:06:22,800 --> 00:06:24,560
work we will call the message space

181
00:06:24,560 --> 00:06:26,639
capital m

182
00:06:26,639 --> 00:06:28,639
and how does such an algebraic signature

183
00:06:28,639 --> 00:06:30,160
now look like of course we have to

184
00:06:30,160 --> 00:06:31,919
define key generation

185
00:06:31,919 --> 00:06:34,720
signing and verification and for key

186
00:06:34,720 --> 00:06:36,479
generation of course we get a

187
00:06:36,479 --> 00:06:38,240
verification key and a secret key and on

188
00:06:38,240 --> 00:06:40,240
the secret key we don't have any

189
00:06:40,240 --> 00:06:42,479
constraints it's just a bit string and

190
00:06:42,479 --> 00:06:44,720
the verification key consists of n group

191
00:06:44,720 --> 00:06:48,479
elements and also some random bit string

192
00:06:48,479 --> 00:06:49,919
and for

193
00:06:49,919 --> 00:06:51,919
making it clear if i'm talking about

194
00:06:51,919 --> 00:06:53,840
group elements or exponents i'll write

195
00:06:53,840 --> 00:06:57,360
group elements in these brackets

196
00:06:57,360 --> 00:06:59,199
and whenever i'm talking about exponents

197
00:06:59,199 --> 00:07:01,520
i will leave the brackets out

198
00:07:01,520 --> 00:07:02,720
so

199
00:07:02,720 --> 00:07:05,199
for this verification key

200
00:07:05,199 --> 00:07:06,639
if i talk about

201
00:07:06,639 --> 00:07:09,120
x without the

202
00:07:09,120 --> 00:07:10,720
without the brackets i mean the discrete

203
00:07:10,720 --> 00:07:14,720
logarithms of these group elements

204
00:07:14,960 --> 00:07:17,120
but we don't make any constraints on how

205
00:07:17,120 --> 00:07:19,199
this key is actually computed so we just

206
00:07:19,199 --> 00:07:21,680
say it looks like this but not how you

207
00:07:21,680 --> 00:07:23,759
can compute it

208
00:07:23,759 --> 00:07:26,319
similarly for the signing algorithm we

209
00:07:26,319 --> 00:07:28,560
just demand that a signature consists of

210
00:07:28,560 --> 00:07:32,000
k group elements and

211
00:07:32,000 --> 00:07:33,120
some

212
00:07:33,120 --> 00:07:37,199
bit string t of length at most kappa

213
00:07:37,199 --> 00:07:38,960
and lastly the verification algorithm

214
00:07:38,960 --> 00:07:40,639
and here is where we actually do make

215
00:07:40,639 --> 00:07:42,479
some constraints

216
00:07:42,479 --> 00:07:44,720
and that is we say that the verification

217
00:07:44,720 --> 00:07:46,319
is actually just checking linear

218
00:07:46,319 --> 00:07:48,879
equations namely we have these matrices

219
00:07:48,879 --> 00:07:51,919
a and b which can depend on s

220
00:07:51,919 --> 00:07:54,080
the mass so the bit string from the

221
00:07:54,080 --> 00:07:55,599
public key

222
00:07:55,599 --> 00:07:58,319
the message m and the bit string t from

223
00:07:58,319 --> 00:08:00,000
the verification key

224
00:08:00,000 --> 00:08:02,560
and now verification is just

225
00:08:02,560 --> 00:08:06,000
checking that a times x is equal to b

226
00:08:06,000 --> 00:08:07,120
times y

227
00:08:07,120 --> 00:08:09,440
and note that a and b are actually

228
00:08:09,440 --> 00:08:11,599
matrices over z p

229
00:08:11,599 --> 00:08:13,280
and this is because of the generic group

230
00:08:13,280 --> 00:08:14,639
model

231
00:08:14,639 --> 00:08:17,039
because as i said we don't want to be

232
00:08:17,039 --> 00:08:19,440
able to hash into and out of the group

233
00:08:19,440 --> 00:08:21,520
so

234
00:08:21,520 --> 00:08:23,840
these matrices

235
00:08:23,840 --> 00:08:24,960
can't

236
00:08:24,960 --> 00:08:29,120
create new group elements from s m or t

237
00:08:29,120 --> 00:08:30,720
and in the generic group model we also

238
00:08:30,720 --> 00:08:33,599
can't multiply two group elements so

239
00:08:33,599 --> 00:08:36,080
this actually seems to be reasonable

240
00:08:36,080 --> 00:08:38,399
constraints in a generic group model to

241
00:08:38,399 --> 00:08:40,640
say that we are only allowed to check

242
00:08:40,640 --> 00:08:42,880
linear relations

243
00:08:42,880 --> 00:08:46,399
between the public key elements and the

244
00:08:46,399 --> 00:08:49,440
signature group elements

245
00:08:50,320 --> 00:08:51,680
okay

246
00:08:51,680 --> 00:08:55,519
so for every message we get different

247
00:08:55,519 --> 00:08:58,399
matrices and because later in

248
00:08:58,399 --> 00:09:00,080
in the security game

249
00:09:00,080 --> 00:09:02,800
we only have one public key i will

250
00:09:02,800 --> 00:09:05,200
mostly emit the s from the matrices

251
00:09:05,200 --> 00:09:06,800
because it will be fixed either way so

252
00:09:06,800 --> 00:09:08,560
we can also

253
00:09:08,560 --> 00:09:10,560
think of it as a function only dependent

254
00:09:10,560 --> 00:09:12,240
on m and t and this makes everything a

255
00:09:12,240 --> 00:09:14,800
bit shorter

256
00:09:14,880 --> 00:09:17,279
and notice that the parameters that we

257
00:09:17,279 --> 00:09:19,440
defined above so the n k

258
00:09:19,440 --> 00:09:21,600
and l are the dimensions of the matrices

259
00:09:21,600 --> 00:09:23,360
and we will

260
00:09:23,360 --> 00:09:25,760
see this later in the performance of our

261
00:09:25,760 --> 00:09:28,080
adversary

262
00:09:28,080 --> 00:09:29,839
so now that we have defined how our

263
00:09:29,839 --> 00:09:31,360
signatures look like we also have to

264
00:09:31,360 --> 00:09:33,760
define what security we actually prove

265
00:09:33,760 --> 00:09:35,760
impossibility for and since we want to

266
00:09:35,760 --> 00:09:37,519
prove an impossibility result the weaker

267
00:09:37,519 --> 00:09:39,519
the notion the better

268
00:09:39,519 --> 00:09:42,320
so we won't use standard ufcma security

269
00:09:42,320 --> 00:09:46,000
but ufq rma security and intuitively

270
00:09:46,000 --> 00:09:48,720
this just says that an adversary gets

271
00:09:48,720 --> 00:09:50,720
queue signatures on random messages and

272
00:09:50,720 --> 00:09:52,320
the verification key

273
00:09:52,320 --> 00:09:54,240
is not allowed to make any

274
00:09:54,240 --> 00:09:56,640
signature queries on chosen messages and

275
00:09:56,640 --> 00:09:58,880
in the end has to produce a forgery

276
00:09:58,880 --> 00:10:01,279
which of course cannot be contained in

277
00:10:01,279 --> 00:10:03,120
the messages that he received in the

278
00:10:03,120 --> 00:10:05,200
first place

279
00:10:05,200 --> 00:10:06,880
and obviously this is

280
00:10:06,880 --> 00:10:09,839
weaker than the standard ufcma security

281
00:10:09,839 --> 00:10:11,600
so if we show that even this is

282
00:10:11,600 --> 00:10:13,360
impossible then of course this also

283
00:10:13,360 --> 00:10:15,120
implies that your cma security is

284
00:10:15,120 --> 00:10:17,920
impossible so it makes our result only

285
00:10:17,920 --> 00:10:20,240
stronger

286
00:10:20,240 --> 00:10:22,160
okay and now that we have defined how

287
00:10:22,160 --> 00:10:23,519
our signatures look like and what

288
00:10:23,519 --> 00:10:25,600
security notion we consider we can

289
00:10:25,600 --> 00:10:28,079
actually state the main theorem

290
00:10:28,079 --> 00:10:29,920
for generic groups

291
00:10:29,920 --> 00:10:32,079
and for prime order groups

292
00:10:32,079 --> 00:10:33,839
and this is our first impossibility

293
00:10:33,839 --> 00:10:36,560
result namely if we have an algebraic

294
00:10:36,560 --> 00:10:39,680
signature scheme sick with parameters n

295
00:10:39,680 --> 00:10:42,399
k l and kappa

296
00:10:42,399 --> 00:10:44,320
then there exists a generic group

297
00:10:44,320 --> 00:10:45,839
adversary a

298
00:10:45,839 --> 00:10:48,399
that breaks the uf nrma

299
00:10:48,399 --> 00:10:51,360
security of this signature scheme

300
00:10:51,360 --> 00:10:55,360
with probability one over n plus one

301
00:10:55,360 --> 00:10:57,920
and it only makes a polynomial number of

302
00:10:57,920 --> 00:10:59,680
group operation queries

303
00:10:59,680 --> 00:11:01,760
but the additional runtime so everything

304
00:11:01,760 --> 00:11:04,480
else is exponential in kappa but

305
00:11:04,480 --> 00:11:06,480
polynomial in

306
00:11:06,480 --> 00:11:08,720
n k l and

307
00:11:08,720 --> 00:11:12,000
the logarithm of the group order

308
00:11:12,000 --> 00:11:13,120
so

309
00:11:13,120 --> 00:11:15,120
just as a reminder

310
00:11:15,120 --> 00:11:17,440
these are the parameters that we

311
00:11:17,440 --> 00:11:19,920
consider so the parameter of the

312
00:11:19,920 --> 00:11:22,640
assumption this n is the size of the

313
00:11:22,640 --> 00:11:25,839
public key so the width of this matrix

314
00:11:25,839 --> 00:11:26,839
matrix

315
00:11:26,839 --> 00:11:29,680
a and the other parameters as i said l

316
00:11:29,680 --> 00:11:31,360
and k

317
00:11:31,360 --> 00:11:33,279
are seen in the

318
00:11:33,279 --> 00:11:37,279
in the other runtime of the adversary

319
00:11:37,279 --> 00:11:39,839
okay so now let me give you a overview

320
00:11:39,839 --> 00:11:44,959
of how this attack actually works

321
00:11:44,959 --> 00:11:47,519
and the main idea is twofold namely

322
00:11:47,519 --> 00:11:49,360
first the signature verification is

323
00:11:49,360 --> 00:11:50,639
public

324
00:11:50,639 --> 00:11:53,600
and also it's a linear equation

325
00:11:53,600 --> 00:11:55,519
so whenever we see

326
00:11:55,519 --> 00:11:57,040
a valid signature

327
00:11:57,040 --> 00:12:00,720
this actually tells us something about

328
00:12:00,720 --> 00:12:02,320
about the verification key or more

329
00:12:02,320 --> 00:12:03,519
specifically about the discrete

330
00:12:03,519 --> 00:12:06,480
logarithms of the verification key

331
00:12:06,480 --> 00:12:07,519
and

332
00:12:07,519 --> 00:12:09,600
we can see that if we knew these

333
00:12:09,600 --> 00:12:11,680
discrete logarithms this would also

334
00:12:11,680 --> 00:12:15,279
already be enough to compute signatures

335
00:12:15,279 --> 00:12:16,720
and

336
00:12:16,720 --> 00:12:19,600
we also observe that these

337
00:12:19,600 --> 00:12:21,040
possible

338
00:12:21,040 --> 00:12:23,360
verification keys they form in a fine

339
00:12:23,360 --> 00:12:26,800
subspace of finite dimension of

340
00:12:26,800 --> 00:12:29,279
zp or more precisely the discrete

341
00:12:29,279 --> 00:12:32,240
logarithms from this affine subspace

342
00:12:32,240 --> 00:12:34,399
so whenever we see a new signature one

343
00:12:34,399 --> 00:12:37,360
of two things can happen

344
00:12:37,360 --> 00:12:40,639
either we can learn something new about

345
00:12:40,639 --> 00:12:42,639
the public key

346
00:12:42,639 --> 00:12:44,399
or the discrete logarithms of the public

347
00:12:44,399 --> 00:12:46,639
key and in this case the dimension of

348
00:12:46,639 --> 00:12:50,160
this find subspace of possible

349
00:12:50,160 --> 00:12:52,480
public verification keys decreases by at

350
00:12:52,480 --> 00:12:53,680
least one

351
00:12:53,680 --> 00:12:55,360
and since this is a finite dimensional

352
00:12:55,360 --> 00:12:58,000
subspace this can only happen

353
00:12:58,000 --> 00:13:00,079
a finite amount of time

354
00:13:00,079 --> 00:13:01,680
or the other case

355
00:13:01,680 --> 00:13:03,680
is that the signature doesn't reveal a

356
00:13:03,680 --> 00:13:05,360
new constraint but in this case a

357
00:13:05,360 --> 00:13:07,120
forgery is already possible because then

358
00:13:07,120 --> 00:13:09,839
we could just take any

359
00:13:09,839 --> 00:13:11,680
of the public keys or the discrete

360
00:13:11,680 --> 00:13:13,760
logarithms of set public key from the

361
00:13:13,760 --> 00:13:15,839
space of possible keys and we could

362
00:13:15,839 --> 00:13:18,160
forge with that

363
00:13:18,160 --> 00:13:20,560
now the question is how do we compute

364
00:13:20,560 --> 00:13:22,720
this set of possible verification keys

365
00:13:22,720 --> 00:13:24,959
with just polynomially many group

366
00:13:24,959 --> 00:13:26,320
operations

367
00:13:26,320 --> 00:13:28,320
and if we know this

368
00:13:28,320 --> 00:13:30,399
set how do we actually check that such a

369
00:13:30,399 --> 00:13:32,480
verification key works

370
00:13:32,480 --> 00:13:33,680
because

371
00:13:33,680 --> 00:13:36,880
as i said before these matrices a and b

372
00:13:36,880 --> 00:13:40,399
depend on m and t so we have to find

373
00:13:40,399 --> 00:13:42,000
a message m and t

374
00:13:42,000 --> 00:13:43,680
such that we actually can

375
00:13:43,680 --> 00:13:45,920
know whether this

376
00:13:45,920 --> 00:13:48,959
public key space that we already know

377
00:13:48,959 --> 00:13:50,720
is small enough

378
00:13:50,720 --> 00:13:51,680
and

379
00:13:51,680 --> 00:13:53,199
these are the two main problems that we

380
00:13:53,199 --> 00:13:54,320
have to solve

381
00:13:54,320 --> 00:13:56,000
and i'll talk about them one after

382
00:13:56,000 --> 00:13:58,079
another so

383
00:13:58,079 --> 00:14:00,160
first how can we compute this set of

384
00:14:00,160 --> 00:14:02,800
possible public keys and well basically

385
00:14:02,800 --> 00:14:04,320
the answer is we can't with just

386
00:14:04,320 --> 00:14:06,000
polynomially many group operations but

387
00:14:06,000 --> 00:14:07,519
we can compute something that is good

388
00:14:07,519 --> 00:14:09,839
enough namely we can compute its dual

389
00:14:09,839 --> 00:14:12,880
space so we don't compute the set

390
00:14:12,880 --> 00:14:15,199
of possible public keys

391
00:14:15,199 --> 00:14:17,040
instead we compute the space of

392
00:14:17,040 --> 00:14:19,440
constraints on this public keys

393
00:14:19,440 --> 00:14:20,560
space

394
00:14:20,560 --> 00:14:23,920
so basically we get linear equations of

395
00:14:23,920 --> 00:14:25,120
the form

396
00:14:25,120 --> 00:14:28,079
z transposed times x so the discrete

397
00:14:28,079 --> 00:14:30,560
logarithms of the public key

398
00:14:30,560 --> 00:14:32,639
is equal to zero and each signature

399
00:14:32,639 --> 00:14:34,959
might reveal some of these equations

400
00:14:34,959 --> 00:14:37,279
and these equations also form in a fine

401
00:14:37,279 --> 00:14:38,639
subspace

402
00:14:38,639 --> 00:14:40,560
of z p to the n

403
00:14:40,560 --> 00:14:42,240
and whenever

404
00:14:42,240 --> 00:14:43,120
the

405
00:14:43,120 --> 00:14:45,040
space of possible public keys would

406
00:14:45,040 --> 00:14:46,959
shrink by one

407
00:14:46,959 --> 00:14:48,320
the dimension of this

408
00:14:48,320 --> 00:14:51,279
dual space increases by one

409
00:14:51,279 --> 00:14:54,240
so now instead of having a decreasing

410
00:14:54,240 --> 00:14:55,360
dimension we have an increasing

411
00:14:55,360 --> 00:14:57,839
dimension but still the vector space has

412
00:14:57,839 --> 00:15:01,360
finite dimension so at some point

413
00:15:01,360 --> 00:15:03,760
we know either the whole space or we

414
00:15:03,760 --> 00:15:05,839
know at least enough

415
00:15:05,839 --> 00:15:10,320
that we can actually forge a signature

416
00:15:10,320 --> 00:15:12,399
okay but still there's the problem that

417
00:15:12,399 --> 00:15:14,959
we need to know when we actually have

418
00:15:14,959 --> 00:15:16,880
enough information

419
00:15:16,880 --> 00:15:20,160
and how do we find such such a pair m

420
00:15:20,160 --> 00:15:21,040
and t

421
00:15:21,040 --> 00:15:24,880
that we actually know enough

422
00:15:24,880 --> 00:15:25,680
and

423
00:15:25,680 --> 00:15:27,199
here

424
00:15:27,199 --> 00:15:28,160
we

425
00:15:28,160 --> 00:15:31,360
see that these these constraints

426
00:15:31,360 --> 00:15:33,759
are all in this left kernel so what we

427
00:15:33,759 --> 00:15:34,800
do

428
00:15:34,800 --> 00:15:38,240
is we check for an new m and t

429
00:15:38,240 --> 00:15:41,360
if this left kernel of the matrix b

430
00:15:41,360 --> 00:15:42,720
at times a

431
00:15:42,720 --> 00:15:44,639
is actually already covered by all the

432
00:15:44,639 --> 00:15:46,560
constraints that we have seen before

433
00:15:46,560 --> 00:15:48,000
also these

434
00:15:48,000 --> 00:15:50,240
these kjs that we

435
00:15:50,240 --> 00:15:53,120
defined on the previous slide

436
00:15:53,120 --> 00:15:56,639
and since a and b are zp matrices and

437
00:15:56,639 --> 00:15:59,920
these constraints are also a subspace of

438
00:15:59,920 --> 00:16:01,519
zp to the n

439
00:16:01,519 --> 00:16:03,279
this is checkable without group

440
00:16:03,279 --> 00:16:04,800
operations

441
00:16:04,800 --> 00:16:08,800
and we show in our paper that if this

442
00:16:08,800 --> 00:16:10,880
this

443
00:16:10,880 --> 00:16:11,920
condition

444
00:16:11,920 --> 00:16:14,639
holds then there exists the solution to

445
00:16:14,639 --> 00:16:17,120
the verification equation and we can

446
00:16:17,120 --> 00:16:19,279
actually find it i won't go into the

447
00:16:19,279 --> 00:16:21,120
technical details there but it's

448
00:16:21,120 --> 00:16:22,480
basically

449
00:16:22,480 --> 00:16:25,120
just linear algebra using the

450
00:16:25,120 --> 00:16:28,240
basis extension theorem

451
00:16:28,240 --> 00:16:30,399
if you want more details you can look it

452
00:16:30,399 --> 00:16:32,880
up in our paper

453
00:16:32,880 --> 00:16:34,720
okay so now

454
00:16:34,720 --> 00:16:39,040
we can collect these kj's

455
00:16:39,040 --> 00:16:41,600
by considering the left kernel of the

456
00:16:41,600 --> 00:16:43,839
matrices that we get for the signatures

457
00:16:43,839 --> 00:16:45,279
that our

458
00:16:45,279 --> 00:16:46,959
challenger gives us

459
00:16:46,959 --> 00:16:49,040
and for a new message we can actually

460
00:16:49,040 --> 00:16:51,199
check if there is a solution

461
00:16:51,199 --> 00:16:53,360
by

462
00:16:53,360 --> 00:16:56,800
by using this inclusion in the subspace

463
00:16:56,800 --> 00:16:59,519
so now we can actually show how our

464
00:16:59,519 --> 00:17:01,279
anniversary works

465
00:17:01,279 --> 00:17:04,799
as in the uf rma game it gets n

466
00:17:04,799 --> 00:17:07,919
signatures on messages m1 to mn and for

467
00:17:07,919 --> 00:17:09,919
each of these messages we compute this

468
00:17:09,919 --> 00:17:12,480
fine subspace of constraints ki

469
00:17:12,480 --> 00:17:15,439
and we consider the vector space sum of

470
00:17:15,439 --> 00:17:17,439
all of these constraints which we call

471
00:17:17,439 --> 00:17:21,039
li or ln for the last of these subspaces

472
00:17:21,039 --> 00:17:24,480
and as i said these form a rising

473
00:17:24,480 --> 00:17:27,520
inclusion of subspaces

474
00:17:27,520 --> 00:17:30,799
and then we just take a random message m

475
00:17:30,799 --> 00:17:33,200
star and now we have to try for all

476
00:17:33,200 --> 00:17:35,919
possible t

477
00:17:36,080 --> 00:17:37,120
if

478
00:17:37,120 --> 00:17:40,640
this left kernel of b of m star t star

479
00:17:40,640 --> 00:17:43,200
times a of m star t star is actually in

480
00:17:43,200 --> 00:17:44,960
the set of all constraints

481
00:17:44,960 --> 00:17:46,799
and if we don't find such a t well then

482
00:17:46,799 --> 00:17:47,919
we

483
00:17:47,919 --> 00:17:50,480
didn't know enough constraints on the

484
00:17:50,480 --> 00:17:52,880
public key yet and if we do find such a

485
00:17:52,880 --> 00:17:54,960
t then we know that there actually

486
00:17:54,960 --> 00:17:57,200
exists a solution to this linear

487
00:17:57,200 --> 00:17:58,640
equation system

488
00:17:58,640 --> 00:18:00,240
that we need to solve in order to get a

489
00:18:00,240 --> 00:18:01,360
signature

490
00:18:01,360 --> 00:18:04,480
and we can actually solve this um

491
00:18:04,480 --> 00:18:06,160
with just polynomially many group

492
00:18:06,160 --> 00:18:08,799
operation queries um because we can

493
00:18:08,799 --> 00:18:10,960
compute a weak inverse of b

494
00:18:10,960 --> 00:18:13,039
um think about it as just gaussian

495
00:18:13,039 --> 00:18:14,799
elimination

496
00:18:14,799 --> 00:18:16,559
and then we get a solution for this

497
00:18:16,559 --> 00:18:17,760
equation system and since the

498
00:18:17,760 --> 00:18:20,640
verification is defined just in a way

499
00:18:20,640 --> 00:18:22,480
that this verification equation has to

500
00:18:22,480 --> 00:18:25,200
hold then of course this solution is a

501
00:18:25,200 --> 00:18:26,720
valid signature

502
00:18:26,720 --> 00:18:28,799
and we can just output it and the

503
00:18:28,799 --> 00:18:31,200
adversary will win

504
00:18:31,200 --> 00:18:33,120
the only thing left to consider now is

505
00:18:33,120 --> 00:18:36,080
the probability that such a t star

506
00:18:36,080 --> 00:18:38,880
exists or doesn't exist

507
00:18:38,880 --> 00:18:41,679
and this is a simple dimension argument

508
00:18:41,679 --> 00:18:44,320
because if we assume that for every

509
00:18:44,320 --> 00:18:47,520
message m1 to mn and m star

510
00:18:47,520 --> 00:18:49,600
the dimension of the

511
00:18:49,600 --> 00:18:51,440
constraint space increases by at least

512
00:18:51,440 --> 00:18:53,440
one well then in the end we would have a

513
00:18:53,440 --> 00:18:55,200
vector space of dimension

514
00:18:55,200 --> 00:18:57,919
n plus 1 but it is a subspace of zp to

515
00:18:57,919 --> 00:18:59,440
the n which has dimension n so this

516
00:18:59,440 --> 00:19:01,760
can't happen so there are at least two

517
00:19:01,760 --> 00:19:03,200
messages which

518
00:19:03,200 --> 00:19:05,360
are subsequent where the dimension does

519
00:19:05,360 --> 00:19:06,640
not increase

520
00:19:06,640 --> 00:19:08,960
and since all messages are random

521
00:19:08,960 --> 00:19:11,440
with probability at least one over n

522
00:19:11,440 --> 00:19:14,000
plus one this is uh

523
00:19:14,000 --> 00:19:16,720
m n and our message m star and if that

524
00:19:16,720 --> 00:19:19,200
is the case then there will be such a t

525
00:19:19,200 --> 00:19:20,720
star

526
00:19:20,720 --> 00:19:22,799
and we will be successful and this is

527
00:19:22,799 --> 00:19:24,559
where the success probability of our

528
00:19:24,559 --> 00:19:27,520
adversary comes from

529
00:19:28,000 --> 00:19:30,400
okay and this is it for

530
00:19:30,400 --> 00:19:32,720
prime order groups

531
00:19:32,720 --> 00:19:37,120
now as i said on to the interpretation

532
00:19:37,280 --> 00:19:39,280
the attack that i just described is only

533
00:19:39,280 --> 00:19:41,039
pseudoefficient that is it needs

534
00:19:41,039 --> 00:19:43,280
polynomially many group operations but

535
00:19:43,280 --> 00:19:44,960
it is exponential

536
00:19:44,960 --> 00:19:47,120
in kappa for operations outside of the

537
00:19:47,120 --> 00:19:49,280
group because it has to brute force

538
00:19:49,280 --> 00:19:53,440
search over all possible strings t

539
00:19:53,440 --> 00:19:55,440
so this is an efficient attack as long

540
00:19:55,440 --> 00:19:57,919
as this kappa is small or there is some

541
00:19:57,919 --> 00:20:00,880
smart way of finding t star

542
00:20:00,880 --> 00:20:03,360
which is not exponential

543
00:20:03,360 --> 00:20:05,120
of course this might not always be the

544
00:20:05,120 --> 00:20:07,039
case but there are two other

545
00:20:07,039 --> 00:20:09,120
possibilities namely either

546
00:20:09,120 --> 00:20:11,280
kappa is large

547
00:20:11,280 --> 00:20:14,400
and t star is hard to find even with the

548
00:20:14,400 --> 00:20:16,559
secret key but if that would be the case

549
00:20:16,559 --> 00:20:18,559
well then even an honest signer that

550
00:20:18,559 --> 00:20:20,480
knows the secret key wouldn't be able to

551
00:20:20,480 --> 00:20:22,480
reliably find it and then he couldn't

552
00:20:22,480 --> 00:20:23,919
produce valid signatures and then the

553
00:20:23,919 --> 00:20:25,360
signature scheme simply wouldn't be

554
00:20:25,360 --> 00:20:27,840
correct so this is unlikely

555
00:20:27,840 --> 00:20:28,720
and

556
00:20:28,720 --> 00:20:31,200
the other option is that kappa is large

557
00:20:31,200 --> 00:20:33,520
nt star is only easy to find with the

558
00:20:33,520 --> 00:20:35,360
secret key which is some arbitrary bit

559
00:20:35,360 --> 00:20:36,400
string

560
00:20:36,400 --> 00:20:38,720
but then the security of the signature

561
00:20:38,720 --> 00:20:41,440
scheme relies on finding a suitable t

562
00:20:41,440 --> 00:20:42,880
star

563
00:20:42,880 --> 00:20:44,480
and then it must rely on some other

564
00:20:44,480 --> 00:20:45,919
hardness assumption which is somehow

565
00:20:45,919 --> 00:20:48,240
encoded in this bit string in the secret

566
00:20:48,240 --> 00:20:49,919
key

567
00:20:49,919 --> 00:20:51,840
so by ignoring

568
00:20:51,840 --> 00:20:53,360
the computation that we do outside the

569
00:20:53,360 --> 00:20:55,360
group what we actually do is something

570
00:20:55,360 --> 00:20:57,200
similar to an impact glyco-rooted style

571
00:20:57,200 --> 00:20:58,880
oracle separation

572
00:20:58,880 --> 00:20:59,840
there

573
00:20:59,840 --> 00:21:01,440
the adversary is

574
00:21:01,440 --> 00:21:05,360
normally provided with an oracle of the

575
00:21:05,360 --> 00:21:09,039
assumption that we think

576
00:21:09,200 --> 00:21:11,039
is not sufficient to show something and

577
00:21:11,039 --> 00:21:13,039
a p-space oracle which allows it to

578
00:21:13,039 --> 00:21:15,600
solve all other problems basically also

579
00:21:15,600 --> 00:21:18,159
there the interpretation is that this

580
00:21:18,159 --> 00:21:21,280
p-space oracle allows it to bypass all

581
00:21:21,280 --> 00:21:23,440
other external hardness assumptions and

582
00:21:23,440 --> 00:21:26,240
only focus on the hardness of this

583
00:21:26,240 --> 00:21:28,080
assumption that you get an oracle for

584
00:21:28,080 --> 00:21:29,360
and we do

585
00:21:29,360 --> 00:21:31,039
almost the same here

586
00:21:31,039 --> 00:21:33,280
just that we don't give a p-space oracle

587
00:21:33,280 --> 00:21:35,440
but we say that our adversary is

588
00:21:35,440 --> 00:21:39,440
unbounded outside of our generic group

589
00:21:39,440 --> 00:21:41,840
so even though this doesn't necessarily

590
00:21:41,840 --> 00:21:44,240
give you a concrete attack on such

591
00:21:44,240 --> 00:21:46,320
signature schemes it is still a

592
00:21:46,320 --> 00:21:48,159
reasonable

593
00:21:48,159 --> 00:21:51,760
attack for an impossibility result

594
00:21:52,400 --> 00:21:56,159
okay now on to hidden order groups

595
00:21:56,159 --> 00:21:56,960
and

596
00:21:56,960 --> 00:21:59,760
the core idea here is similar but there

597
00:21:59,760 --> 00:22:01,760
are some new challenges

598
00:22:01,760 --> 00:22:03,840
because first of all we can't compute

599
00:22:03,840 --> 00:22:05,440
inverse group elements or rather we

600
00:22:05,440 --> 00:22:08,080
can't compute inverse exponents

601
00:22:08,080 --> 00:22:10,880
and since we need to invert these

602
00:22:10,880 --> 00:22:12,960
matrices to do gaussian elimination and

603
00:22:12,960 --> 00:22:15,360
they consist of exponents we can't do

604
00:22:15,360 --> 00:22:16,960
this because we don't know the group

605
00:22:16,960 --> 00:22:20,080
order so this doesn't work

606
00:22:20,080 --> 00:22:22,159
and additionally there is no generic

607
00:22:22,159 --> 00:22:24,320
group model for hidden order groups

608
00:22:24,320 --> 00:22:27,440
so the whole oracle separation approach

609
00:22:27,440 --> 00:22:29,360
also doesn't really apply

610
00:22:29,360 --> 00:22:31,520
so we have to make some simplifications

611
00:22:31,520 --> 00:22:33,840
and come up with different ways to show

612
00:22:33,840 --> 00:22:35,760
impossibilities here

613
00:22:35,760 --> 00:22:37,360
and this is where the definition of

614
00:22:37,360 --> 00:22:40,240
simplified algebraic signatures comes in

615
00:22:40,240 --> 00:22:42,799
now we define everything over a group of

616
00:22:42,799 --> 00:22:45,280
potentially unknown order n and we only

617
00:22:45,280 --> 00:22:48,240
have parameters n k and l

618
00:22:48,240 --> 00:22:50,960
and key generation and signing is

619
00:22:50,960 --> 00:22:53,120
similar but we

620
00:22:53,120 --> 00:22:54,720
event the bit strings for the

621
00:22:54,720 --> 00:22:56,400
verification key this isn't actually a

622
00:22:56,400 --> 00:22:58,400
constraint because

623
00:22:58,400 --> 00:23:01,200
now we actually get the representation

624
00:23:01,200 --> 00:23:02,799
of the group elements so we could encode

625
00:23:02,799 --> 00:23:05,120
this string s into the group elements

626
00:23:05,120 --> 00:23:07,200
for the signature this is actually a

627
00:23:07,200 --> 00:23:10,240
constraint because this string t

628
00:23:10,240 --> 00:23:11,120
was

629
00:23:11,120 --> 00:23:13,440
an important part of the previous

630
00:23:13,440 --> 00:23:15,280
definition and here we don't have it so

631
00:23:15,280 --> 00:23:17,120
this is why these are simplified

632
00:23:17,120 --> 00:23:18,880
algebraic signatures

633
00:23:18,880 --> 00:23:20,720
and the verification equation then of

634
00:23:20,720 --> 00:23:23,200
course also is simplified

635
00:23:23,200 --> 00:23:25,600
now a only depends on the verification

636
00:23:25,600 --> 00:23:27,840
key and m because we don't have t

637
00:23:27,840 --> 00:23:29,520
and b can only depend on the

638
00:23:29,520 --> 00:23:31,600
verification key and not on

639
00:23:31,600 --> 00:23:34,240
the message which is a constraint on the

640
00:23:34,240 --> 00:23:37,520
proof that we use later so here's also a

641
00:23:37,520 --> 00:23:39,360
small simplification

642
00:23:39,360 --> 00:23:42,400
note however that a and b depend on the

643
00:23:42,400 --> 00:23:44,400
whole verification key and not just on

644
00:23:44,400 --> 00:23:46,400
some bitstring because as i said we are

645
00:23:46,400 --> 00:23:48,000
not in a generic

646
00:23:48,000 --> 00:23:49,039
model

647
00:23:49,039 --> 00:23:51,200
but the adversary gets to see also the

648
00:23:51,200 --> 00:23:54,480
representation and can actually use it

649
00:23:54,480 --> 00:23:55,919
okay so

650
00:23:55,919 --> 00:23:58,320
let me state the impossibility result

651
00:23:58,320 --> 00:23:59,840
for these simplified algebraic

652
00:23:59,840 --> 00:24:01,679
signatures and it is actually pretty

653
00:24:01,679 --> 00:24:05,039
similar to the previous one again let

654
00:24:05,039 --> 00:24:07,039
sig be a simplified algebraic signature

655
00:24:07,039 --> 00:24:09,520
scheme with parameters as before over

656
00:24:09,520 --> 00:24:11,840
group g this time of potentially unknown

657
00:24:11,840 --> 00:24:13,360
order and now we are in the standard

658
00:24:13,360 --> 00:24:16,799
model so we say that now there exists a

659
00:24:16,799 --> 00:24:19,520
polynomial time adversary in the

660
00:24:19,520 --> 00:24:22,640
dimensions of the matrices

661
00:24:22,640 --> 00:24:23,919
and this

662
00:24:23,919 --> 00:24:27,520
adversary wins the ufqs rma game with

663
00:24:27,520 --> 00:24:30,400
probability one over qs plus one so

664
00:24:30,400 --> 00:24:32,720
again the probability of winning

665
00:24:32,720 --> 00:24:35,279
corresponds to the

666
00:24:35,279 --> 00:24:38,159
parameter of the assumption and here qs

667
00:24:38,159 --> 00:24:41,200
is larger than before namely it is

668
00:24:41,200 --> 00:24:44,159
n times l squared times t max

669
00:24:44,159 --> 00:24:47,120
where t max is polynomial in

670
00:24:47,120 --> 00:24:49,039
the logarithm of the group order times

671
00:24:49,039 --> 00:24:51,600
uh the size of the public key plus the

672
00:24:51,600 --> 00:24:53,200
message length

673
00:24:53,200 --> 00:24:55,600
it's still all polynomial but it has to

674
00:24:55,600 --> 00:24:57,120
be a bit larger because

675
00:24:57,120 --> 00:25:00,320
now instead of working over a field we

676
00:25:00,320 --> 00:25:02,159
work over the integers and there we have

677
00:25:02,159 --> 00:25:05,039
to bound the size that the integers

678
00:25:05,039 --> 00:25:06,720
integers might take and to do this

679
00:25:06,720 --> 00:25:08,400
efficiently

680
00:25:08,400 --> 00:25:12,400
we have to use more signatures

681
00:25:12,400 --> 00:25:14,960
and what is the proof idea here similar

682
00:25:14,960 --> 00:25:17,120
as before we want to combine previous

683
00:25:17,120 --> 00:25:18,320
signatures

684
00:25:18,320 --> 00:25:20,159
into a new signature and due to the

685
00:25:20,159 --> 00:25:22,640
constraints we can just do linear

686
00:25:22,640 --> 00:25:24,320
combinations of previously seen

687
00:25:24,320 --> 00:25:27,200
signatures this is why this matrix b can

688
00:25:27,200 --> 00:25:29,039
only depend on the verification key and

689
00:25:29,039 --> 00:25:30,720
not on the message

690
00:25:30,720 --> 00:25:32,880
but as i said the problem is now we have

691
00:25:32,880 --> 00:25:34,880
to work of the integers because in an

692
00:25:34,880 --> 00:25:36,960
unknown order group we can't invert so

693
00:25:36,960 --> 00:25:39,760
we can't work over it

694
00:25:39,760 --> 00:25:42,880
as a regular vector space or field

695
00:25:42,880 --> 00:25:44,640
and the main tool to

696
00:25:44,640 --> 00:25:46,320
solve this is the so-called

697
00:25:46,320 --> 00:25:49,919
hermit-normal form short h and f

698
00:25:49,919 --> 00:25:50,799
and

699
00:25:50,799 --> 00:25:54,480
if we compute this over the matrices

700
00:25:54,480 --> 00:25:57,600
a of v vkmi for all the mi

701
00:25:57,600 --> 00:25:59,679
for enough signatures in a specific form

702
00:25:59,679 --> 00:26:01,600
which i won't go into detail here then

703
00:26:01,600 --> 00:26:03,520
we can use this to find a linear

704
00:26:03,520 --> 00:26:05,840
combination of this

705
00:26:05,840 --> 00:26:08,640
a v k m star

706
00:26:08,640 --> 00:26:11,679
and we can do this efficiently

707
00:26:11,679 --> 00:26:12,559
and

708
00:26:12,559 --> 00:26:15,679
this hnf has some nice properties which

709
00:26:15,679 --> 00:26:17,279
allows us to

710
00:26:17,279 --> 00:26:18,559
accurately bound the number of

711
00:26:18,559 --> 00:26:21,120
signatures that we actually need

712
00:26:21,120 --> 00:26:24,240
with a similar dimension argument and

713
00:26:24,240 --> 00:26:28,000
some properties of the hmf

714
00:26:28,480 --> 00:26:31,760
so as i said we also

715
00:26:31,760 --> 00:26:34,480
cover bls signatures and for this we

716
00:26:34,480 --> 00:26:37,120
define plain algebraic signatures

717
00:26:37,120 --> 00:26:39,279
which also include pairings

718
00:26:39,279 --> 00:26:40,559
although they are pretty much

719
00:26:40,559 --> 00:26:43,279
tailor-made to the

720
00:26:43,279 --> 00:26:45,760
setting with algebra hash functions

721
00:26:45,760 --> 00:26:47,679
and i won't go into the details here if

722
00:26:47,679 --> 00:26:51,279
you want to learn more then

723
00:26:51,279 --> 00:26:53,120
you can look at our paper

724
00:26:53,120 --> 00:26:55,440
and then we apply our impossibility

725
00:26:55,440 --> 00:26:56,640
result

726
00:26:56,640 --> 00:26:59,039
for simplified algebraic signatures to

727
00:26:59,039 --> 00:27:01,120
these plain algebraic signatures in the

728
00:27:01,120 --> 00:27:03,120
standard model

729
00:27:03,120 --> 00:27:04,840
and of course there are still some open

730
00:27:04,840 --> 00:27:07,520
questions as i said algebraic signatures

731
00:27:07,520 --> 00:27:08,320
are

732
00:27:08,320 --> 00:27:10,000
a bit limited

733
00:27:10,000 --> 00:27:11,520
for example we don't consider

734
00:27:11,520 --> 00:27:13,279
inequalities because they could also be

735
00:27:13,279 --> 00:27:15,120
checked in a generic group model

736
00:27:15,120 --> 00:27:17,039
and another open question is can we

737
00:27:17,039 --> 00:27:19,200
remove the simplifications we made in

738
00:27:19,200 --> 00:27:21,679
the hidden order group setting

739
00:27:21,679 --> 00:27:24,559
and of course similar results for

740
00:27:24,559 --> 00:27:26,320
short purely hash based signatures would

741
00:27:26,320 --> 00:27:28,080
also be interesting because now we

742
00:27:28,080 --> 00:27:29,360
talked about

743
00:27:29,360 --> 00:27:31,679
signatures just from groups and we know

744
00:27:31,679 --> 00:27:34,559
that with groups and random oracles or

745
00:27:34,559 --> 00:27:37,360
hash functions in general we can build

746
00:27:37,360 --> 00:27:39,279
short signatures but from groups we

747
00:27:39,279 --> 00:27:41,039
can't and from hashes we only know long

748
00:27:41,039 --> 00:27:42,640
signatures so this would also be an

749
00:27:42,640 --> 00:27:44,799
interesting question

750
00:27:44,799 --> 00:27:47,360
thank you all for your attention and

751
00:27:47,360 --> 00:27:48,799
if you have any questions feel free to

752
00:27:48,799 --> 00:27:50,399
ask them at the conference

753
00:27:50,399 --> 00:27:53,120
bye

