1
00:00:11,840 --> 00:00:13,679
there we go

2
00:00:13,679 --> 00:00:15,360
are we ready

3
00:00:15,360 --> 00:00:17,600
yes and again please accept my apologies

4
00:00:17,600 --> 00:00:20,160
i've been awake since 4 30. so

5
00:00:20,160 --> 00:00:22,400
no worries thank you all right great our

6
00:00:22,400 --> 00:00:24,400
next speaker will be leo rotem and he's

7
00:00:24,400 --> 00:00:25,760
going to tell us about simple and

8
00:00:25,760 --> 00:00:27,519
efficient batch verification techniques

9
00:00:27,519 --> 00:00:30,680
for bds

10
00:00:30,960 --> 00:00:32,320
all right so thank you and then i

11
00:00:32,320 --> 00:00:34,320
mentioned more and i'll talk about

12
00:00:34,320 --> 00:00:36,960
better verification for vdfs

13
00:00:36,960 --> 00:00:38,640
and so before we talk about

14
00:00:38,640 --> 00:00:41,440
verifiability

15
00:00:41,680 --> 00:00:42,480
okay

16
00:00:42,480 --> 00:00:44,079
so before we talk about verifiability

17
00:00:44,079 --> 00:00:46,800
let's define delay functions

18
00:00:46,800 --> 00:00:48,559
uh so roughly speaking the daily

19
00:00:48,559 --> 00:00:49,920
function is a function which is

20
00:00:49,920 --> 00:00:51,920
efficiently computable but only in a

21
00:00:51,920 --> 00:00:54,160
manner which is inherited sequential

22
00:00:54,160 --> 00:00:55,760
so one way to formalize this is by

23
00:00:55,760 --> 00:00:57,199
introducing an additional delay

24
00:00:57,199 --> 00:00:58,399
parameter t

25
00:00:58,399 --> 00:01:00,160
and then given this delay parameter the

26
00:01:00,160 --> 00:01:01,760
function should be computable in some

27
00:01:01,760 --> 00:01:03,760
time polynomial in t

28
00:01:03,760 --> 00:01:05,680
but it shouldn't be

29
00:01:05,680 --> 00:01:07,680
easy to evaluate a function on a random

30
00:01:07,680 --> 00:01:10,000
which was an input in time less than t

31
00:01:10,000 --> 00:01:12,320
even with pre-processing and polynomial

32
00:01:12,320 --> 00:01:14,799
number of power processors

33
00:01:14,799 --> 00:01:17,680
now the focus to this work is about

34
00:01:17,680 --> 00:01:19,360
verifiable delay functions and we'll

35
00:01:19,360 --> 00:01:21,040
focus about the verifiability of data

36
00:01:21,040 --> 00:01:22,479
functions so you can forget about the

37
00:01:22,479 --> 00:01:23,920
previous slide

38
00:01:23,920 --> 00:01:24,880
and

39
00:01:24,880 --> 00:01:26,560
unsurprisingly a verifiable delay

40
00:01:26,560 --> 00:01:28,240
function is a delay function which

41
00:01:28,240 --> 00:01:29,520
allows

42
00:01:29,520 --> 00:01:31,360
for efficient verification so what do we

43
00:01:31,360 --> 00:01:33,680
mean by that

44
00:01:33,680 --> 00:01:35,759
given the input x to the function you

45
00:01:35,759 --> 00:01:37,600
should be able to produce alongside the

46
00:01:37,600 --> 00:01:40,400
output f of x a short proof pi asserting

47
00:01:40,400 --> 00:01:42,079
the validity of this output with respect

48
00:01:42,079 --> 00:01:44,640
to the input x

49
00:01:44,640 --> 00:01:47,200
then given x f of x and this short proof

50
00:01:47,200 --> 00:01:48,240
pi

51
00:01:48,240 --> 00:01:50,000
one should be able to verify quickly

52
00:01:50,000 --> 00:01:52,159
that f of x is indeed the correct output

53
00:01:52,159 --> 00:01:54,320
of the function on input x and very

54
00:01:54,320 --> 00:01:56,960
quickly we typically mean much quicker

55
00:01:56,960 --> 00:01:58,079
than uh

56
00:01:58,079 --> 00:02:00,479
the very sorry the trivial verification

57
00:02:00,479 --> 00:02:02,000
time

58
00:02:02,000 --> 00:02:02,719
that

59
00:02:02,719 --> 00:02:04,560
will resolve by simply computing the

60
00:02:04,560 --> 00:02:07,200
function and u

61
00:02:07,360 --> 00:02:09,360
now even though this is a relatively

62
00:02:09,360 --> 00:02:11,038
recent motion it

63
00:02:11,038 --> 00:02:12,879
uh already has many applications in

64
00:02:12,879 --> 00:02:14,879
cryptography and beyond so just to name

65
00:02:14,879 --> 00:02:17,040
a few we have uh process application

66
00:02:17,040 --> 00:02:19,040
verifiable randomness beacons

67
00:02:19,040 --> 00:02:21,280
uh computational time stamping resource

68
00:02:21,280 --> 00:02:23,680
efficient blockchains and much more than

69
00:02:23,680 --> 00:02:25,360
that

70
00:02:25,360 --> 00:02:26,640
and

71
00:02:26,640 --> 00:02:28,720
the main way we currently know how to

72
00:02:28,720 --> 00:02:31,280
construct verifiable delay functions

73
00:02:31,280 --> 00:02:32,560
is by

74
00:02:32,560 --> 00:02:34,239
relying on the repeated squaring delay

75
00:02:34,239 --> 00:02:35,519
function

76
00:02:35,519 --> 00:02:37,440
so this function is defined with respect

77
00:02:37,440 --> 00:02:39,599
to some cryptographic group g

78
00:02:39,599 --> 00:02:42,000
it takes as input some group element x

79
00:02:42,000 --> 00:02:43,760
and the output of the function is x

80
00:02:43,760 --> 00:02:45,440
raised to the power of 2 to the t and

81
00:02:45,440 --> 00:02:47,440
it's not hard to see that this is indeed

82
00:02:47,440 --> 00:02:48,879
computable

83
00:02:48,879 --> 00:02:52,400
in time t uh times some polynomial on

84
00:02:52,400 --> 00:02:54,720
the security parameter uh but simply by

85
00:02:54,720 --> 00:02:56,959
theory petersburgs

86
00:02:56,959 --> 00:02:58,800
so this function was proposed back in

87
00:02:58,800 --> 00:03:01,040
the 96 by the western wagner as the

88
00:03:01,040 --> 00:03:02,879
basis for the timelock puzzle which is a

89
00:03:02,879 --> 00:03:05,280
related notion

90
00:03:05,280 --> 00:03:07,360
and the fact that this is indeed the

91
00:03:07,360 --> 00:03:08,640
delay function

92
00:03:08,640 --> 00:03:10,720
is based on an assumption

93
00:03:10,720 --> 00:03:12,959
that states that this computation cannot

94
00:03:12,959 --> 00:03:15,360
be sped up below time t

95
00:03:15,360 --> 00:03:17,360
at least in certain groups

96
00:03:17,360 --> 00:03:18,879
and it's not hard to see that in order

97
00:03:18,879 --> 00:03:21,280
for this assumption to be even possible

98
00:03:21,280 --> 00:03:22,959
in some cryptographic group

99
00:03:22,959 --> 00:03:25,599
in some cryptographic group g

100
00:03:25,599 --> 00:03:27,440
this group has to be a group of unknown

101
00:03:27,440 --> 00:03:29,360
order meaning it should be difficult to

102
00:03:29,360 --> 00:03:31,200
compute a group's order given the

103
00:03:31,200 --> 00:03:32,799
group's representation

104
00:03:32,799 --> 00:03:34,720
and we currently have two

105
00:03:34,720 --> 00:03:37,519
family of families of groups that serve

106
00:03:37,519 --> 00:03:39,599
as candidate groups for such an

107
00:03:39,599 --> 00:03:41,040
assumption

108
00:03:41,040 --> 00:03:43,280
so these are the family of our city

109
00:03:43,280 --> 00:03:45,280
groups and specific subgroups of our rsi

110
00:03:45,280 --> 00:03:47,360
groups and the class groups of the

111
00:03:47,360 --> 00:03:50,400
imaging encrypted numbers

112
00:03:50,400 --> 00:03:51,200
now

113
00:03:51,200 --> 00:03:53,360
going back to pdfs

114
00:03:53,360 --> 00:03:55,120
the way you get a verifiable delay

115
00:03:55,120 --> 00:03:57,120
function from this delay function is by

116
00:03:57,120 --> 00:04:00,159
augmenting it with a

117
00:04:00,159 --> 00:04:01,920
proof of correct exponentiation so this

118
00:04:01,920 --> 00:04:03,439
is a protocol

119
00:04:03,439 --> 00:04:06,159
in which prover convinces a verifier

120
00:04:06,159 --> 00:04:08,720
that some group element y

121
00:04:08,720 --> 00:04:10,640
is indeed equal to x raised to the power

122
00:04:10,640 --> 00:04:12,080
of two to the t

123
00:04:12,080 --> 00:04:15,200
uh so such protocols were constructed by

124
00:04:15,200 --> 00:04:17,600
some recent work starting with the works

125
00:04:17,600 --> 00:04:20,079
of pieza and vasilovsky

126
00:04:20,079 --> 00:04:21,600
and the way you get a non-interactive

127
00:04:21,600 --> 00:04:23,120
proof from this protocol is simply by

128
00:04:23,120 --> 00:04:26,479
applying the virtual mirrors

129
00:04:26,800 --> 00:04:30,160
now in some scenarios you might be

130
00:04:30,160 --> 00:04:32,080
interested in verifying not just one but

131
00:04:32,080 --> 00:04:35,199
many vdf outputs at the same time and

132
00:04:35,199 --> 00:04:36,479
there's concrete examples you can

133
00:04:36,479 --> 00:04:39,840
consider the uh example of verifying uh

134
00:04:39,840 --> 00:04:42,320
that some storage service maintains many

135
00:04:42,320 --> 00:04:44,000
copies of your file

136
00:04:44,000 --> 00:04:46,800
via some vdf based proof of replication

137
00:04:46,800 --> 00:04:49,759
so this is one example

138
00:04:49,759 --> 00:04:50,639
now

139
00:04:50,639 --> 00:04:52,880
the naive solution in order to achieve

140
00:04:52,880 --> 00:04:54,960
this

141
00:04:54,960 --> 00:04:57,199
uh verification of many pdf outputs is

142
00:04:57,199 --> 00:05:00,240
simply by uh having the improver compute

143
00:05:00,240 --> 00:05:02,240
a proof for each output

144
00:05:02,240 --> 00:05:04,400
and then the verifier simply verifies

145
00:05:04,400 --> 00:05:06,720
each proof separately

146
00:05:06,720 --> 00:05:08,320
and the downside of this approach of

147
00:05:08,320 --> 00:05:10,639
course is that it results in a linear

148
00:05:10,639 --> 00:05:13,280
blow up in both the proof size

149
00:05:13,280 --> 00:05:16,080
and the verification time

150
00:05:16,080 --> 00:05:17,280
so

151
00:05:17,280 --> 00:05:18,960
the question that we ask is can we do

152
00:05:18,960 --> 00:05:20,960
better than that

153
00:05:20,960 --> 00:05:23,360
so in order to answer this question uh

154
00:05:23,360 --> 00:05:25,520
we'll take a look at the related work

155
00:05:25,520 --> 00:05:27,360
from over 30 years ago

156
00:05:27,360 --> 00:05:29,919
so this is the seminal work of belarus

157
00:05:29,919 --> 00:05:32,880
that studied the question of that

158
00:05:32,880 --> 00:05:35,280
verification of exponentiations

159
00:05:35,280 --> 00:05:37,759
in stickley groups of nono

160
00:05:37,759 --> 00:05:39,520
so the setting in their work was the

161
00:05:39,520 --> 00:05:41,759
following you have a bunch of exponents

162
00:05:41,759 --> 00:05:43,199
x y for x n

163
00:05:43,199 --> 00:05:45,039
and a bunch of group elements eight by

164
00:05:45,039 --> 00:05:47,120
three gen and you want to verify that g

165
00:05:47,120 --> 00:05:49,280
is equal to x i for v i

166
00:05:49,280 --> 00:05:52,720
and some publicly known generated

167
00:05:52,720 --> 00:05:55,600
and so vgr presented

168
00:05:55,600 --> 00:05:58,080
two main procedures in order to to do

169
00:05:58,080 --> 00:06:00,479
this more quickly than

170
00:06:00,479 --> 00:06:02,319
simply computing

171
00:06:02,319 --> 00:06:04,880
g to the x cipher api

172
00:06:04,880 --> 00:06:06,880
and what we want to do is we want to

173
00:06:06,880 --> 00:06:09,039
somehow translate their procedures to

174
00:06:09,039 --> 00:06:11,520
the vdf setting

175
00:06:11,520 --> 00:06:14,080
and now there are two issues that

176
00:06:14,080 --> 00:06:16,240
we need to be minded offering doing that

177
00:06:16,240 --> 00:06:18,479
so the first is that in the video

178
00:06:18,479 --> 00:06:20,080
setting we're in a setting where we have

179
00:06:20,080 --> 00:06:22,240
an external approver

180
00:06:22,240 --> 00:06:23,120
and

181
00:06:23,120 --> 00:06:25,680
the verifier takes in some external

182
00:06:25,680 --> 00:06:26,960
proof and

183
00:06:26,960 --> 00:06:28,880
uses this proof in order to verify the

184
00:06:28,880 --> 00:06:30,800
computation

185
00:06:30,800 --> 00:06:34,000
so there's an additional

186
00:06:34,000 --> 00:06:35,919
parameter that we need to remind it of

187
00:06:35,919 --> 00:06:38,080
which is the uh proof level or the

188
00:06:38,080 --> 00:06:39,440
communication complexity in the

189
00:06:39,440 --> 00:06:42,160
interactive set

190
00:06:42,319 --> 00:06:44,400
the second issue that we need to mine it

191
00:06:44,400 --> 00:06:45,199
off

192
00:06:45,199 --> 00:06:47,919
is that the more efficient procedure

193
00:06:47,919 --> 00:06:49,840
presented the vgr

194
00:06:49,840 --> 00:06:53,120
inherently relies on the fact that the

195
00:06:53,120 --> 00:06:55,680
group is a group of primordial

196
00:06:55,680 --> 00:06:57,280
and as we mentioned before the

197
00:06:57,280 --> 00:07:00,720
candidates that we currently have

198
00:07:00,720 --> 00:07:01,919
for groups in which we know how to

199
00:07:01,919 --> 00:07:04,880
construct pdfs uh are not groups of

200
00:07:04,880 --> 00:07:06,560
primaries

201
00:07:06,560 --> 00:07:08,160
um so

202
00:07:08,160 --> 00:07:10,080
an initial first step was already taken

203
00:07:10,080 --> 00:07:12,240
by vzelowski in translating

204
00:07:12,240 --> 00:07:13,919
some of these ideas to the video of

205
00:07:13,919 --> 00:07:15,120
certain

206
00:07:15,120 --> 00:07:17,280
and in an updated version of his

207
00:07:17,280 --> 00:07:18,560
original work

208
00:07:18,560 --> 00:07:20,479
uh he presented a batch version of the

209
00:07:20,479 --> 00:07:22,160
office protocol

210
00:07:22,160 --> 00:07:23,520
so

211
00:07:23,520 --> 00:07:25,280
instead of simply uh

212
00:07:25,280 --> 00:07:26,639
providing

213
00:07:26,639 --> 00:07:28,960
a different proof for any out for every

214
00:07:28,960 --> 00:07:31,840
output he showed how to

215
00:07:31,840 --> 00:07:34,720
compute all the outputs alongside

216
00:07:34,720 --> 00:07:36,880
one shorter proof that asserts the

217
00:07:36,880 --> 00:07:40,479
validity of all of these outputs

218
00:07:40,720 --> 00:07:43,120
so this is great

219
00:07:43,120 --> 00:07:46,319
two uh uh things that are left uh to be

220
00:07:46,319 --> 00:07:48,080
desired by this work

221
00:07:48,080 --> 00:07:50,720
is first that this is not uh at least

222
00:07:50,720 --> 00:07:52,319
in the way that it was presented not a

223
00:07:52,319 --> 00:07:55,120
generic transformation so it's simply a

224
00:07:55,120 --> 00:07:59,919
batch version of the losses protocol and

225
00:07:59,919 --> 00:08:01,919
it's not presented as a general compiler

226
00:08:01,919 --> 00:08:03,360
that can take any proof of correct

227
00:08:03,360 --> 00:08:06,639
exponentiation for a single instance and

228
00:08:06,639 --> 00:08:09,840
transform it into a batch proof for many

229
00:08:09,840 --> 00:08:11,680
instances

230
00:08:11,680 --> 00:08:14,000
but more uh

231
00:08:14,000 --> 00:08:16,160
more serious issue is that the analysis

232
00:08:16,160 --> 00:08:18,639
of this protocol relies on the adaptive

233
00:08:18,639 --> 00:08:20,479
route assumption which is a relatively

234
00:08:20,479 --> 00:08:21,199
uh

235
00:08:21,199 --> 00:08:23,360
new and strong assumption for groups of

236
00:08:23,360 --> 00:08:25,039
unknown

237
00:08:25,039 --> 00:08:28,160
so relying on this assumption uh is

238
00:08:28,160 --> 00:08:29,680
essentially for free if you consider

239
00:08:29,680 --> 00:08:31,280
there's a lot skills protocol because

240
00:08:31,280 --> 00:08:33,360
single instance protocol also relies on

241
00:08:33,360 --> 00:08:35,200
the adapter's assumption

242
00:08:35,200 --> 00:08:36,559
uh but it is stronger than the

243
00:08:36,559 --> 00:08:38,719
assumptions needed for other

244
00:08:38,719 --> 00:08:40,479
proofs of correct exponentiation so for

245
00:08:40,479 --> 00:08:43,039
example beats protocol relies on the low

246
00:08:43,039 --> 00:08:45,839
order assumption which is weaker and a

247
00:08:45,839 --> 00:08:49,279
recent protocol big blockade is actually

248
00:08:49,279 --> 00:08:51,440
an information theoretic

249
00:08:51,440 --> 00:08:52,560
protocol

250
00:08:52,560 --> 00:08:54,640
that doesn't rely on any assumption

251
00:08:54,640 --> 00:08:56,959
okay so we want to uh somehow get rid of

252
00:08:56,959 --> 00:08:59,680
this seductive word assumption

253
00:08:59,680 --> 00:09:02,080
um so in this life what we're doing is

254
00:09:02,080 --> 00:09:03,519
the following

255
00:09:03,519 --> 00:09:06,839
so we present general and

256
00:09:06,839 --> 00:09:08,240
modular uh

257
00:09:08,240 --> 00:09:10,240
techniques for better verification of

258
00:09:10,240 --> 00:09:12,880
pdfs focusing specifically on crucial

259
00:09:12,880 --> 00:09:15,200
correct exponentiation

260
00:09:15,200 --> 00:09:19,120
so we define a suitable soundless notion

261
00:09:19,120 --> 00:09:22,240
and then we present two compilers uh

262
00:09:22,240 --> 00:09:24,240
that improve upon the naive solution

263
00:09:24,240 --> 00:09:27,839
simply producing uh and different proofs

264
00:09:27,839 --> 00:09:30,160
one compiler

265
00:09:30,160 --> 00:09:31,760
that works in any group and doesn't make

266
00:09:31,760 --> 00:09:34,080
any group specific assumptions

267
00:09:34,080 --> 00:09:36,320
and one compiler which is specifically

268
00:09:36,320 --> 00:09:38,080
based on the low order assumptions so

269
00:09:38,080 --> 00:09:40,880
both of the these compilers extend the

270
00:09:40,880 --> 00:09:44,399
ideas of bgr to the vds

271
00:09:44,399 --> 00:09:44,890
um

272
00:09:44,890 --> 00:09:46,240
[Music]

273
00:09:46,240 --> 00:09:47,920
now

274
00:09:47,920 --> 00:09:49,519
it's not hard to see that so the lower

275
00:09:49,519 --> 00:09:51,279
the assumption essentially says that you

276
00:09:51,279 --> 00:09:53,440
cannot come up with a group element that

277
00:09:53,440 --> 00:09:55,839
has no order together with the order

278
00:09:55,839 --> 00:09:56,959
so it's not hard to see that this

279
00:09:56,959 --> 00:09:58,480
assumption doesn't hold in our cell

280
00:09:58,480 --> 00:10:01,360
groups since -1 is also always an

281
00:10:01,360 --> 00:10:03,279
element of order two in the group

282
00:10:03,279 --> 00:10:05,920
and so we also have specific

283
00:10:05,920 --> 00:10:08,560
protocols for rsi groups for the

284
00:10:08,560 --> 00:10:10,320
specific case where the modulus is the

285
00:10:10,320 --> 00:10:12,320
product of two stage pipes

286
00:10:12,320 --> 00:10:13,920
so first of all we show how to extend

287
00:10:13,920 --> 00:10:16,160
the lower compiler to such groups

288
00:10:16,160 --> 00:10:17,920
and we also present an information

289
00:10:17,920 --> 00:10:19,440
theoretically a

290
00:10:19,440 --> 00:10:21,040
proof of correct exponentiation in these

291
00:10:21,040 --> 00:10:22,079
groups

292
00:10:22,079 --> 00:10:24,640
that has better parameters in

293
00:10:24,640 --> 00:10:26,880
the information theoretic protocol of

294
00:10:26,880 --> 00:10:28,480
blocket

295
00:10:28,480 --> 00:10:31,200
now just to give you a sense of the

296
00:10:31,200 --> 00:10:32,399
parameters

297
00:10:32,399 --> 00:10:34,480
in our protocols

298
00:10:34,480 --> 00:10:35,760
so

299
00:10:35,760 --> 00:10:38,320
what's important to note here is that in

300
00:10:38,320 --> 00:10:40,160
both protocols the communication

301
00:10:40,160 --> 00:10:41,600
complexity or proof size in the

302
00:10:41,600 --> 00:10:43,120
non-interactive setting

303
00:10:43,120 --> 00:10:45,440
is essentially independent of the number

304
00:10:45,440 --> 00:10:48,079
and of instances that you wish to verify

305
00:10:48,079 --> 00:10:51,360
and the verification time still linearly

306
00:10:51,360 --> 00:10:53,360
depends uh

307
00:10:53,360 --> 00:10:56,160
on the number of instances

308
00:10:56,160 --> 00:10:59,040
but we decouple the dependency on the

309
00:10:59,040 --> 00:11:01,200
number of instances to be verified

310
00:11:01,200 --> 00:11:02,959
and on the

311
00:11:02,959 --> 00:11:04,800
original verification time of this

312
00:11:04,800 --> 00:11:06,399
single instance perk

313
00:11:06,399 --> 00:11:09,360
so even if the single instance protocol

314
00:11:09,360 --> 00:11:12,240
has quite an expensive verification time

315
00:11:12,240 --> 00:11:14,000
you essentially still only pay for it

316
00:11:14,000 --> 00:11:16,800
once instead of once per

317
00:11:16,800 --> 00:11:19,920
each instance that you want to verify

318
00:11:19,920 --> 00:11:22,399
okay so that will conclude and take your

319
00:11:22,399 --> 00:11:26,120
questions thank you

320
00:11:33,680 --> 00:11:35,360
all right let's uh thank leor and all

321
00:11:35,360 --> 00:11:37,000
the speakers of the session again

322
00:11:37,000 --> 00:11:40,340
[Applause]

323
00:11:40,880 --> 00:11:42,560
we're gonna have a coffee break now we

324
00:11:42,560 --> 00:11:46,760
will resume an entertainer

