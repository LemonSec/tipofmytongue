1
00:00:01,599 --> 00:00:04,160
um hi everyone i'm chaitan and i'm going

2
00:00:04,160 --> 00:00:05,759
to present our paper on three with

3
00:00:05,759 --> 00:00:07,680
separators and just carbling let's joint

4
00:00:07,680 --> 00:00:11,840
work with karen klein and this is pizza

5
00:00:11,840 --> 00:00:13,679
our main result says that for villains

6
00:00:13,679 --> 00:00:16,160
because of size s and tree with w

7
00:00:16,160 --> 00:00:17,440
yahoo's carbine is adaptively

8
00:00:17,440 --> 00:00:18,800
indistinguishable with only a loss in

9
00:00:18,800 --> 00:00:20,480
security which is

10
00:00:20,480 --> 00:00:23,600
s to the o of w

11
00:00:23,840 --> 00:00:25,519
as a consequence

12
00:00:25,519 --> 00:00:26,960
yao scorpling is adaptively

13
00:00:26,960 --> 00:00:29,439
inexchangeable for a constant constantly

14
00:00:29,439 --> 00:00:31,039
with circuits with only a polynomial

15
00:00:31,039 --> 00:00:32,719
loss and security

16
00:00:32,719 --> 00:00:35,680
um so what is tribute to it is a

17
00:00:35,680 --> 00:00:39,280
notion from algorithmic graph theory and

18
00:00:39,280 --> 00:00:41,840
it is informally a measure of how far

19
00:00:41,840 --> 00:00:44,000
the circuit is from a boolean formula or

20
00:00:44,000 --> 00:00:45,760
more generally how far the

21
00:00:45,760 --> 00:00:48,640
the graph is from a from a tree

22
00:00:48,640 --> 00:00:49,680
and

23
00:00:49,680 --> 00:00:50,480
uh

24
00:00:50,480 --> 00:00:51,680
which is also worth pointing out that

25
00:00:51,680 --> 00:00:53,199
the loss in securities is with respect

26
00:00:53,199 --> 00:00:55,039
to the underlying symmetrical encryption

27
00:00:55,039 --> 00:00:56,559
scheme

28
00:00:56,559 --> 00:00:59,120
a few remarks uh regarding our result is

29
00:00:59,120 --> 00:01:01,840
an order firstly um apple bar metal a

30
00:01:01,840 --> 00:01:04,319
ruled out adaptive simulatability of

31
00:01:04,319 --> 00:01:05,600
yours garbling

32
00:01:05,600 --> 00:01:08,560
and uh as a consequence our result is uh

33
00:01:08,560 --> 00:01:10,840
the best possible result one could hope

34
00:01:10,840 --> 00:01:14,720
for uh secondly uh the fagolian mix uh

35
00:01:14,720 --> 00:01:16,560
proved adaptive simulatability of a

36
00:01:16,560 --> 00:01:18,479
close variant of of your scribbling

37
00:01:18,479 --> 00:01:21,040
which we denote by gamma prime

38
00:01:21,040 --> 00:01:22,880
and

39
00:01:22,880 --> 00:01:25,040
we can prove adaptive simulatability of

40
00:01:25,040 --> 00:01:28,240
of this variant uh in terms of uh to it

41
00:01:28,240 --> 00:01:30,400
as well so our results can basically be

42
00:01:30,400 --> 00:01:33,920
basically tuned slightly to uh to

43
00:01:33,920 --> 00:01:37,439
adaptive simulatability of common prime

44
00:01:37,439 --> 00:01:40,640
uh this is the overview of our our talk

45
00:01:40,640 --> 00:01:42,640
uh in the first off we will just uh make

46
00:01:42,640 --> 00:01:44,159
ourselves familiar with the with the

47
00:01:44,159 --> 00:01:46,079
with the various notions uh with the

48
00:01:46,079 --> 00:01:48,159
various security models and also uh most

49
00:01:48,159 --> 00:01:49,600
importantly with uh with the house

50
00:01:49,600 --> 00:01:50,560
garbling

51
00:01:50,560 --> 00:01:52,079
and in the second part we will talk

52
00:01:52,079 --> 00:01:53,920
about our reduction we will keep it

53
00:01:53,920 --> 00:01:55,600
informal and

54
00:01:55,600 --> 00:01:56,880
explain

55
00:01:56,880 --> 00:01:57,920
the things

56
00:01:57,920 --> 00:02:00,719
on a very high level

57
00:02:02,000 --> 00:02:03,360
uh so

58
00:02:03,360 --> 00:02:05,360
so guarding was originally motivated by

59
00:02:05,360 --> 00:02:07,759
a secure functional evaluation so here

60
00:02:07,759 --> 00:02:10,000
we have a party alice who holds a

61
00:02:10,000 --> 00:02:13,280
circuit c and another party pop holds an

62
00:02:13,280 --> 00:02:14,160
input

63
00:02:14,160 --> 00:02:16,080
x to this circuit the circuit is from n

64
00:02:16,080 --> 00:02:18,640
bits to l bits and they want to jointly

65
00:02:18,640 --> 00:02:20,800
evaluate the circuit c on the input x a

66
00:02:20,800 --> 00:02:22,800
trivial way to do this would be for

67
00:02:22,800 --> 00:02:24,720
either alice to simply send our circuit

68
00:02:24,720 --> 00:02:27,440
over to bob or for bob to send the input

69
00:02:27,440 --> 00:02:29,840
x to all this but what we would like is

70
00:02:29,840 --> 00:02:31,840
for the respective parties to not reveal

71
00:02:31,840 --> 00:02:32,560
their

72
00:02:32,560 --> 00:02:35,360
uh information that is alice does not

73
00:02:35,360 --> 00:02:37,920
want to reveal her circuit c whereas bob

74
00:02:37,920 --> 00:02:41,680
doesn't want to reveal uh his input x

75
00:02:41,680 --> 00:02:43,920
um so yeah suggested the following uh

76
00:02:43,920 --> 00:02:46,000
elegant idea to

77
00:02:46,000 --> 00:02:48,480
carry this out so first alice completes

78
00:02:48,480 --> 00:02:50,879
the goblin of her circuit c

79
00:02:50,879 --> 00:02:53,040
and sends it over to bob

80
00:02:53,040 --> 00:02:56,720
bob then retrieves the appropriate um

81
00:02:56,720 --> 00:02:58,720
secret information uh regarding this

82
00:02:58,720 --> 00:03:02,000
kabul circuit from from from alice and

83
00:03:02,000 --> 00:03:03,200
and then

84
00:03:03,200 --> 00:03:06,080
bob evaluates uh the garbled circuit on

85
00:03:06,080 --> 00:03:08,159
the gobble input to obtain

86
00:03:08,159 --> 00:03:12,079
uh the output c of x

87
00:03:13,120 --> 00:03:15,440
uh so guarding as a standalone primitive

88
00:03:15,440 --> 00:03:17,680
was formalized much later by valerie

89
00:03:17,680 --> 00:03:19,120
hong and ragaway

90
00:03:19,120 --> 00:03:20,879
uh so they suggested the following

91
00:03:20,879 --> 00:03:22,800
syntax for for goblin it consists of

92
00:03:22,800 --> 00:03:25,200
three algorithms uh a randomized goblin

93
00:03:25,200 --> 00:03:27,120
circuit algorithm which takes a circuit

94
00:03:27,120 --> 00:03:30,640
c and outputs a gobble circuit c and uh

95
00:03:30,640 --> 00:03:33,360
a secret uh key k

96
00:03:33,360 --> 00:03:36,000
uh the gobble input algorithm uh is also

97
00:03:36,000 --> 00:03:38,640
randomized it takes the the input x and

98
00:03:38,640 --> 00:03:41,680
the secret key k as input and outputs a

99
00:03:41,680 --> 00:03:44,159
garbled input x tilde

100
00:03:44,159 --> 00:03:46,400
finally a gobbled evaluation

101
00:03:46,400 --> 00:03:48,239
is a deterministic algorithm which takes

102
00:03:48,239 --> 00:03:49,680
the global circuit and the global input

103
00:03:49,680 --> 00:03:51,040
and outputs the

104
00:03:51,040 --> 00:03:52,879
uh the output y

105
00:03:52,879 --> 00:03:54,720
the main motivation for such a syntax

106
00:03:54,720 --> 00:03:57,840
was to separate oblivious transfer from

107
00:03:57,840 --> 00:04:00,799
uh from cobbling

108
00:04:00,799 --> 00:04:02,480
uh it's also worth pointing out that for

109
00:04:02,480 --> 00:04:04,080
our setting uh that is the house

110
00:04:04,080 --> 00:04:06,080
garbling the global input is uh is

111
00:04:06,080 --> 00:04:08,799
deterministic

112
00:04:09,920 --> 00:04:11,280
as for correctness it should hold that

113
00:04:11,280 --> 00:04:12,799
for every security parameter lambda and

114
00:04:12,799 --> 00:04:15,360
every circuit c and every input x

115
00:04:15,360 --> 00:04:17,519
the the evaluation of of a global

116
00:04:17,519 --> 00:04:19,358
circuit on the gobbles input should

117
00:04:19,358 --> 00:04:22,320
match the output of the circuit on x

118
00:04:22,320 --> 00:04:23,759
and

119
00:04:23,759 --> 00:04:25,759
uh before moving on it's worth pointing

120
00:04:25,759 --> 00:04:29,360
out that the goblin of the circuit uh is

121
00:04:29,360 --> 00:04:31,360
independent of the input x therefore one

122
00:04:31,360 --> 00:04:33,360
could think of of the whole goblin

123
00:04:33,360 --> 00:04:35,280
process being split into an online phase

124
00:04:35,280 --> 00:04:36,639
and an offline phase in the offline

125
00:04:36,639 --> 00:04:38,720
phase one generates the

126
00:04:38,720 --> 00:04:40,160
the global circuit whereas enough

127
00:04:40,160 --> 00:04:42,400
offline phase one generates the global

128
00:04:42,400 --> 00:04:44,240
input and these are

129
00:04:44,240 --> 00:04:45,360
one candidate of these as being

130
00:04:45,360 --> 00:04:48,320
independent of each other

131
00:04:48,320 --> 00:04:50,479
what about security uh recall that our

132
00:04:50,479 --> 00:04:52,639
goal is to capture uh the security

133
00:04:52,639 --> 00:04:54,080
requirement that

134
00:04:54,080 --> 00:04:56,080
the two parties involved uh in in the

135
00:04:56,080 --> 00:04:57,440
goblins should not reveal their

136
00:04:57,440 --> 00:04:59,120
respective uh

137
00:04:59,120 --> 00:05:01,680
information secret information

138
00:05:01,680 --> 00:05:04,479
and this is captured by the following uh

139
00:05:04,479 --> 00:05:05,440
game

140
00:05:05,440 --> 00:05:06,800
uh which is called adapt to

141
00:05:06,800 --> 00:05:08,320
simulatability

142
00:05:08,320 --> 00:05:10,000
uh it's played between an adversary and

143
00:05:10,000 --> 00:05:11,120
a challenger

144
00:05:11,120 --> 00:05:13,520
the adversary first uh sends over a

145
00:05:13,520 --> 00:05:15,759
circuit c office zone of his own choice

146
00:05:15,759 --> 00:05:17,759
to to the challenger the challenger

147
00:05:17,759 --> 00:05:19,680
tosses the coin b and depending on its

148
00:05:19,680 --> 00:05:21,039
output either

149
00:05:21,039 --> 00:05:21,840
uh

150
00:05:21,840 --> 00:05:24,160
outputs the the honest goblin of c as a

151
00:05:24,160 --> 00:05:26,720
bow or a simulated version of the goblin

152
00:05:26,720 --> 00:05:29,199
shown below

153
00:05:29,199 --> 00:05:32,400
the adversary next picks an input x and

154
00:05:32,400 --> 00:05:34,320
as before the challenger either gives

155
00:05:34,320 --> 00:05:35,520
the honest

156
00:05:35,520 --> 00:05:37,199
garbling or a simulated version of the

157
00:05:37,199 --> 00:05:39,360
garbling so the simulator in in this

158
00:05:39,360 --> 00:05:41,440
case is are the two algorithms this s

159
00:05:41,440 --> 00:05:44,400
circuit and s input

160
00:05:44,400 --> 00:05:46,880
finally uh the adversary guesses uh

161
00:05:46,880 --> 00:05:48,240
outputs a bit b

162
00:05:48,240 --> 00:05:51,680
and wins if uh b prime equals

163
00:05:51,680 --> 00:05:53,759
uh as convention the advantage of the

164
00:05:53,759 --> 00:05:55,600
adversary is is defined as the the

165
00:05:55,600 --> 00:05:57,520
probability with which uh he guesses

166
00:05:57,520 --> 00:06:00,000
correctly bonded away from half

167
00:06:00,000 --> 00:06:02,160
uh the source of adaptivity in this game

168
00:06:02,160 --> 00:06:04,720
is the ability of the adversary to pick

169
00:06:04,720 --> 00:06:07,840
up x after the fact that he has seen the

170
00:06:07,840 --> 00:06:10,400
goblin of the circuit c prime c tilde

171
00:06:10,400 --> 00:06:12,319
and in in the selective version of this

172
00:06:12,319 --> 00:06:15,520
game uh he would have to output

173
00:06:15,520 --> 00:06:16,880
both the circuit and the input in a

174
00:06:16,880 --> 00:06:18,400
single go

175
00:06:18,400 --> 00:06:21,440
uh adaptivity is uh important in some

176
00:06:21,440 --> 00:06:24,960
applications like one-time programs

177
00:06:25,120 --> 00:06:28,000
uh a weaker notion of uh security that

178
00:06:28,000 --> 00:06:30,160
we are interested in is called adaptive

179
00:06:30,160 --> 00:06:31,759
and distinguishability

180
00:06:31,759 --> 00:06:32,800
um

181
00:06:32,800 --> 00:06:34,880
in this game uh the

182
00:06:34,880 --> 00:06:37,520
the adversary sends over two circuits c0

183
00:06:37,520 --> 00:06:39,759
and c1 over to the challenger

184
00:06:39,759 --> 00:06:42,160
conditioned on on on uh

185
00:06:42,160 --> 00:06:43,680
the topology of the two circuits being

186
00:06:43,680 --> 00:06:45,280
the same

187
00:06:45,280 --> 00:06:48,880
uh the challenger next flips a coin uh b

188
00:06:48,880 --> 00:06:50,639
and sends over

189
00:06:50,639 --> 00:06:53,280
uh the goblin of the of the circuit cb

190
00:06:53,280 --> 00:06:54,880
to the adversary

191
00:06:54,880 --> 00:06:57,440
next the adversary uh picks two inputs

192
00:06:57,440 --> 00:07:00,400
x0 x1 again conditioned on the uh the

193
00:07:00,400 --> 00:07:02,319
taskbar non-trivial which is that the

194
00:07:02,319 --> 00:07:05,599
evaluation of c0 on x0 and and c1 and x1

195
00:07:05,599 --> 00:07:08,319
should being the same

196
00:07:08,319 --> 00:07:10,400
uh the challenger uh

197
00:07:10,400 --> 00:07:11,759
sends over the

198
00:07:11,759 --> 00:07:14,160
the goblin of of the input xp

199
00:07:14,160 --> 00:07:16,160
finally the adversary guess is a bit b

200
00:07:16,160 --> 00:07:17,759
prime and wins if

201
00:07:17,759 --> 00:07:20,880
uh the guess is correct

202
00:07:21,280 --> 00:07:23,360
uh as in the case of uh adaptive

203
00:07:23,360 --> 00:07:25,280
simulatability the the source of

204
00:07:25,280 --> 00:07:27,120
adaptivity in this game is

205
00:07:27,120 --> 00:07:28,880
uh the fact that the adversary can

206
00:07:28,880 --> 00:07:32,000
choose the inputs after he has seen the

207
00:07:32,000 --> 00:07:34,639
the kabul circuit

208
00:07:34,639 --> 00:07:36,720
uh it can be easily shown that adaptive

209
00:07:36,720 --> 00:07:38,080
simulatability implies adaptive and

210
00:07:38,080 --> 00:07:39,520
distinguishability

211
00:07:39,520 --> 00:07:42,880
uh using using the the the standard

212
00:07:42,880 --> 00:07:44,479
two-step hybrid argument

213
00:07:44,479 --> 00:07:46,400
moreover adaptive and distinguishability

214
00:07:46,400 --> 00:07:48,800
uh suffices for certain applications uh

215
00:07:48,800 --> 00:07:50,800
like uh some forms of symmetric key

216
00:07:50,800 --> 00:07:53,680
functional encryption

217
00:07:54,879 --> 00:07:58,560
finally we explain yahoo's garbling

218
00:07:58,560 --> 00:08:00,720
um recall that i was grabbing is built

219
00:08:00,720 --> 00:08:03,280
on top of a symmetric encryption scheme

220
00:08:03,280 --> 00:08:05,360
um the first step in in of the goblin

221
00:08:05,360 --> 00:08:07,759
process is to associate each wire w in

222
00:08:07,759 --> 00:08:10,080
the circuit c to a pair of secret keys

223
00:08:10,080 --> 00:08:13,840
kw0 and kw1

224
00:08:14,000 --> 00:08:15,039
next

225
00:08:15,039 --> 00:08:17,840
alice uh computes the the galvat double

226
00:08:17,840 --> 00:08:19,360
circuit c which consists of two

227
00:08:19,360 --> 00:08:21,360
components a graveling table and an

228
00:08:21,360 --> 00:08:22,479
output map

229
00:08:22,479 --> 00:08:24,960
uh the garden table uh is

230
00:08:24,960 --> 00:08:26,800
associated with each gate of the circuit

231
00:08:26,800 --> 00:08:28,400
and for each get g

232
00:08:28,400 --> 00:08:31,280
uh the goblin table encodes the the gate

233
00:08:31,280 --> 00:08:33,519
table of the underlying gate g

234
00:08:33,519 --> 00:08:35,440
for example uh let's consider the and

235
00:08:35,440 --> 00:08:37,919
gate in the in the example above

236
00:08:37,919 --> 00:08:38,958
uh here

237
00:08:38,958 --> 00:08:40,958
the goblin table it consists of four

238
00:08:40,958 --> 00:08:42,479
double ciphertexts

239
00:08:42,479 --> 00:08:44,640
uh of the underlying encryption

240
00:08:44,640 --> 00:08:45,760
and

241
00:08:45,760 --> 00:08:47,279
uh the outer

242
00:08:47,279 --> 00:08:49,760
and the inner keys uh of this used in

243
00:08:49,760 --> 00:08:51,360
this encryption they correspond to the

244
00:08:51,360 --> 00:08:53,440
the incoming wires to the two incoming

245
00:08:53,440 --> 00:08:55,120
virus to this and gate

246
00:08:55,120 --> 00:08:57,120
uh whereas the payload to the to the

247
00:08:57,120 --> 00:09:00,240
encryption is the is one of the two

248
00:09:00,240 --> 00:09:03,120
uh keys of the outgoing wire uh denoted

249
00:09:03,120 --> 00:09:04,399
by six here

250
00:09:04,399 --> 00:09:05,200
and

251
00:09:05,200 --> 00:09:06,720
so what exactly is the payload is

252
00:09:06,720 --> 00:09:08,399
determined by the the gate being

253
00:09:08,399 --> 00:09:09,839
evaluated

254
00:09:09,839 --> 00:09:12,000
for example in this case

255
00:09:12,000 --> 00:09:14,080
in the case of the and gate the

256
00:09:14,080 --> 00:09:16,640
uh in in the first three cases uh we

257
00:09:16,640 --> 00:09:19,839
encode uh we encrypt uh case six zero uh

258
00:09:19,839 --> 00:09:21,360
which corresponds to

259
00:09:21,360 --> 00:09:23,760
the the bit zero whereas only in the

260
00:09:23,760 --> 00:09:25,440
last case when

261
00:09:25,440 --> 00:09:27,120
when the encryption when the outer and

262
00:09:27,120 --> 00:09:29,360
the inner keys correspond to the one bit

263
00:09:29,360 --> 00:09:31,680
that's the only case when we encrypt

264
00:09:31,680 --> 00:09:34,800
uh k61

265
00:09:35,040 --> 00:09:37,680
uh finally uh we have the output map

266
00:09:37,680 --> 00:09:41,120
uh which takes each uh output wire and

267
00:09:41,120 --> 00:09:42,959
maps it to a bit uh

268
00:09:42,959 --> 00:09:46,080
zero or one uh the goal uh of of this

269
00:09:46,080 --> 00:09:49,440
output map is to help uh bob uh evaluate

270
00:09:49,440 --> 00:09:52,320
um the the double input and it and it

271
00:09:52,320 --> 00:09:56,000
access a guide to the decoding procedure

272
00:09:56,000 --> 00:09:59,360
uh the garble input x tilde um

273
00:09:59,360 --> 00:10:02,560
is simply determined by the the input

274
00:10:02,560 --> 00:10:05,680
uh x and the idea is to use x to choose

275
00:10:05,680 --> 00:10:08,399
this subset of input wires uh determined

276
00:10:08,399 --> 00:10:10,240
by this input that is for example if

277
00:10:10,240 --> 00:10:13,120
your input is at 0 1 1 0

278
00:10:13,120 --> 00:10:15,040
then the the gobbled input simply

279
00:10:15,040 --> 00:10:16,800
consists of the correct key selected

280
00:10:16,800 --> 00:10:18,480
according to the bit

281
00:10:18,480 --> 00:10:21,120
of the input

282
00:10:21,440 --> 00:10:22,800
uh so

283
00:10:22,800 --> 00:10:24,320
once uh

284
00:10:24,320 --> 00:10:25,920
bob has the global circuit and double

285
00:10:25,920 --> 00:10:28,399
input how does he evaluate the basic

286
00:10:28,399 --> 00:10:30,320
idea is to evaluate over the encryption

287
00:10:30,320 --> 00:10:32,399
what do we mean by this uh given the the

288
00:10:32,399 --> 00:10:33,839
gobbled input

289
00:10:33,839 --> 00:10:36,240
he proceeds in a topological uh order he

290
00:10:36,240 --> 00:10:39,440
picks like each gate and then um

291
00:10:39,440 --> 00:10:41,519
the goblin table of this skate and then

292
00:10:41,519 --> 00:10:44,480
he simply decrypts um all the all the

293
00:10:44,480 --> 00:10:46,399
ciphertexts by the special property of

294
00:10:46,399 --> 00:10:47,680
the encryption scheme it is guaranteed

295
00:10:47,680 --> 00:10:49,200
that only one of the ciphertext will

296
00:10:49,200 --> 00:10:51,839
decrypt correctly and and and

297
00:10:51,839 --> 00:10:54,480
and this way he learns the output

298
00:10:54,480 --> 00:10:56,000
uh where the keys are the key

299
00:10:56,000 --> 00:10:57,120
corresponding to the output wire he

300
00:10:57,120 --> 00:10:59,279
proceeds um in a similar manner until he

301
00:10:59,279 --> 00:11:01,040
reaches the output gates

302
00:11:01,040 --> 00:11:02,959
uh at which point he can use the output

303
00:11:02,959 --> 00:11:05,600
map to decode and uh and figure out

304
00:11:05,600 --> 00:11:07,440
which bits

305
00:11:07,440 --> 00:11:10,560
the output really are

306
00:11:12,399 --> 00:11:14,720
uh note that the online complexity of um

307
00:11:14,720 --> 00:11:17,440
of of of your scribbling is more or less

308
00:11:17,440 --> 00:11:19,519
optimal since it only depends on the the

309
00:11:19,519 --> 00:11:21,360
length of the input

310
00:11:21,360 --> 00:11:24,240
uh and also the security parameter

311
00:11:24,240 --> 00:11:27,279
uh there is a close variant uh of of of

312
00:11:27,279 --> 00:11:28,720
yours gardening which we already alluded

313
00:11:28,720 --> 00:11:30,800
to called gamma prime where the output

314
00:11:30,800 --> 00:11:32,720
map is sent in the online phase

315
00:11:32,720 --> 00:11:35,360
um therefore the the goblet circuit

316
00:11:35,360 --> 00:11:37,760
consists only uh only of the kabul

317
00:11:37,760 --> 00:11:39,839
governing tables where the goblet input

318
00:11:39,839 --> 00:11:41,839
consists of the global input and also

319
00:11:41,839 --> 00:11:44,480
the output map

320
00:11:44,480 --> 00:11:46,720
the drawback of this variant is that the

321
00:11:46,720 --> 00:11:48,720
online complexity now grows also with

322
00:11:48,720 --> 00:11:50,480
the the output length

323
00:11:50,480 --> 00:11:53,040
for example if you use gamma prime to

324
00:11:53,040 --> 00:11:56,560
encode to garble a prg which uh maps

325
00:11:56,560 --> 00:11:58,480
from n bits to n to the c bits uh the

326
00:11:58,480 --> 00:12:01,519
online complexity now uh grows within to

327
00:12:01,519 --> 00:12:03,040
the c

328
00:12:03,040 --> 00:12:05,600
and uh moreover as we saw in the in the

329
00:12:05,600 --> 00:12:06,720
first slide

330
00:12:06,720 --> 00:12:08,079
uh such a

331
00:12:08,079 --> 00:12:10,000
scheme cannot be proven adaptively

332
00:12:10,000 --> 00:12:13,760
simulatable for the original yao

333
00:12:15,360 --> 00:12:17,920
um so we have seen various security

334
00:12:17,920 --> 00:12:20,560
models and various variants of yao so so

335
00:12:20,560 --> 00:12:22,639
what do we know about the security of

336
00:12:22,639 --> 00:12:25,600
of all these uh schemes

337
00:12:25,600 --> 00:12:28,720
um the security of um original yao

338
00:12:28,720 --> 00:12:31,279
scheme was initiated in the seminal work

339
00:12:31,279 --> 00:12:32,959
of lindelof and pinkas they showed that

340
00:12:32,959 --> 00:12:36,079
gamma is uh selectively simulatable

341
00:12:36,079 --> 00:12:38,880
since this is the uh the strongest uh

342
00:12:38,880 --> 00:12:40,880
possible notion in the selective setting

343
00:12:40,880 --> 00:12:42,959
it automatically implies

344
00:12:42,959 --> 00:12:44,560
uh the other notions of security in the

345
00:12:44,560 --> 00:12:47,040
selective setting

346
00:12:47,040 --> 00:12:48,720
uh this was followed by the work of

347
00:12:48,720 --> 00:12:51,519
apple balm at all who saw that

348
00:12:51,519 --> 00:12:54,639
gamma cannot be adaptively simulatable

349
00:12:54,639 --> 00:12:56,399
so this was a corollary of a more

350
00:12:56,399 --> 00:12:58,079
general theorem which they proved which

351
00:12:58,079 --> 00:12:59,760
said that the online complexity of a

352
00:12:59,760 --> 00:13:02,240
randomized encoding scheme

353
00:13:02,240 --> 00:13:03,920
which is secure in the adaptive which is

354
00:13:03,920 --> 00:13:05,600
adaptively simulatable must exceed the

355
00:13:05,600 --> 00:13:07,279
output length as we saw in the

356
00:13:07,279 --> 00:13:10,480
description uh before the online uh

357
00:13:10,480 --> 00:13:13,519
complexity of vr it depends solely on

358
00:13:13,519 --> 00:13:17,200
the in input and not on the output

359
00:13:17,760 --> 00:13:20,399
java gogoli and vix observed that this

360
00:13:20,399 --> 00:13:22,320
is not true for the variant in fact this

361
00:13:22,320 --> 00:13:24,240
was the motivation uh their motivation

362
00:13:24,240 --> 00:13:26,160
to come up with a variant and they

363
00:13:26,160 --> 00:13:27,600
proceeded to show that this variant

364
00:13:27,600 --> 00:13:29,200
gamma prime is actually adaptively

365
00:13:29,200 --> 00:13:30,399
simulatable

366
00:13:30,399 --> 00:13:32,480
there are some caveats here they their

367
00:13:32,480 --> 00:13:33,920
security actually integrates

368
00:13:33,920 --> 00:13:35,680
exponentially with that the depth of the

369
00:13:35,680 --> 00:13:36,720
circuit

370
00:13:36,720 --> 00:13:37,839
um

371
00:13:37,839 --> 00:13:39,920
but they still managed to prove adaptive

372
00:13:39,920 --> 00:13:41,519
simulatability

373
00:13:41,519 --> 00:13:43,920
uh but the the situation with adaptive

374
00:13:43,920 --> 00:13:45,600
and distinguishability of yao has

375
00:13:45,600 --> 00:13:48,560
remained open and largely neglected and

376
00:13:48,560 --> 00:13:50,079
we show

377
00:13:50,079 --> 00:13:53,360
in this work that there are some

378
00:13:53,360 --> 00:13:55,519
regimes where

379
00:13:55,519 --> 00:13:57,040
gamma is actually adaptively

380
00:13:57,040 --> 00:13:59,839
indistinguishable

381
00:14:01,440 --> 00:14:02,800
that concludes the first part of our

382
00:14:02,800 --> 00:14:05,120
talk uh in the second part uh we will

383
00:14:05,120 --> 00:14:07,279
focus on our reduction as mentioned

384
00:14:07,279 --> 00:14:09,120
earlier we will keep it uh on a high

385
00:14:09,120 --> 00:14:10,959
level and largely informal

386
00:14:10,959 --> 00:14:13,600
uh since we build on the works of uh in

387
00:14:13,600 --> 00:14:14,959
the previous works on the previous works

388
00:14:14,959 --> 00:14:16,560
of glendale and pinkas and japan william

389
00:14:16,560 --> 00:14:19,839
mix we will spend a few slides on this

390
00:14:19,839 --> 00:14:22,800
security reductions

391
00:14:28,720 --> 00:14:31,120
key to all these uh secretary reductions

392
00:14:31,120 --> 00:14:33,199
is the notion of gobbling modes

393
00:14:33,199 --> 00:14:34,240
um

394
00:14:34,240 --> 00:14:36,000
as we saw in the previous slide in one

395
00:14:36,000 --> 00:14:37,279
of the previous slides

396
00:14:37,279 --> 00:14:40,160
uh the honest gobbling uh table of of a

397
00:14:40,160 --> 00:14:41,519
gate g it

398
00:14:41,519 --> 00:14:45,120
encodes the the gate table of the gate g

399
00:14:45,120 --> 00:14:46,959
and

400
00:14:46,959 --> 00:14:49,839
this is what we call the real mode

401
00:14:49,839 --> 00:14:51,839
on the other hand we have the simulated

402
00:14:51,839 --> 00:14:53,440
mode where instead of garbling the gate

403
00:14:53,440 --> 00:14:55,040
g we simply

404
00:14:55,040 --> 00:14:59,199
gobble the the constant zero uh gate

405
00:14:59,199 --> 00:15:01,040
therefore the payload in the goblin

406
00:15:01,040 --> 00:15:03,600
tables is always kw zero the key

407
00:15:03,600 --> 00:15:05,360
corresponding to the output wire which

408
00:15:05,360 --> 00:15:07,839
which encodes the zero bit

409
00:15:07,839 --> 00:15:10,720
in between these two modes is uh

410
00:15:10,720 --> 00:15:12,320
something called the input dependent

411
00:15:12,320 --> 00:15:13,199
mode

412
00:15:13,199 --> 00:15:15,760
here the payload is a constant

413
00:15:15,760 --> 00:15:17,920
but this constant is determined by the

414
00:15:17,920 --> 00:15:19,519
by the value of the wire

415
00:15:19,519 --> 00:15:21,600
uh the value of the wire when we

416
00:15:21,600 --> 00:15:24,000
evaluate the circuit on the input x so

417
00:15:24,000 --> 00:15:25,680
it can be constant zero on constant one

418
00:15:25,680 --> 00:15:27,440
depending on the value

419
00:15:27,440 --> 00:15:29,519
now that in order to simulate this

420
00:15:29,519 --> 00:15:32,800
uh mode uh the the knowledge of the the

421
00:15:32,800 --> 00:15:35,279
value of the wire w is necessary unlike

422
00:15:35,279 --> 00:15:38,480
in the case of real or sim

423
00:15:39,519 --> 00:15:41,440
uh i would also like to point out that

424
00:15:41,440 --> 00:15:42,320
uh

425
00:15:42,320 --> 00:15:43,360
in the

426
00:15:43,360 --> 00:15:44,800
uh in distinguishing in the in

427
00:15:44,800 --> 00:15:46,480
distinguishability game

428
00:15:46,480 --> 00:15:47,600
um

429
00:15:47,600 --> 00:15:49,920
the real mode will consist of two real

430
00:15:49,920 --> 00:15:52,079
mods real zero and real one

431
00:15:52,079 --> 00:15:54,720
for example real zero will consists of

432
00:15:54,720 --> 00:15:55,839
the gate

433
00:15:55,839 --> 00:15:58,480
uh in the circuit c0 whereas real one

434
00:15:58,480 --> 00:16:01,279
will consist of the gate in second c1

435
00:16:01,279 --> 00:16:02,240
and

436
00:16:02,240 --> 00:16:04,000
uh for the input dependent modes there

437
00:16:04,000 --> 00:16:05,759
would also be two modes input zero and

438
00:16:05,759 --> 00:16:08,959
input one for example input one

439
00:16:08,959 --> 00:16:10,880
will consist of the governing table

440
00:16:10,880 --> 00:16:12,079
uh which is the

441
00:16:12,079 --> 00:16:13,920
constant gate but where the value is

442
00:16:13,920 --> 00:16:15,199
determined by

443
00:16:15,199 --> 00:16:17,680
the circuit c1 run on the input

444
00:16:17,680 --> 00:16:20,079
x1

445
00:16:20,720 --> 00:16:22,639
so uh let's look at the selective

446
00:16:22,639 --> 00:16:25,360
simulatability uh game uh security

447
00:16:25,360 --> 00:16:28,000
reduction of lindelin pink cars

448
00:16:28,000 --> 00:16:29,759
uh so there are two main parts in this

449
00:16:29,759 --> 00:16:31,360
reduction the first is a hybrid argument

450
00:16:31,360 --> 00:16:34,320
where we progressively replace um each

451
00:16:34,320 --> 00:16:38,800
goblin table uh with uh simulated ones

452
00:16:38,800 --> 00:16:40,639
and the second is a a programming step

453
00:16:40,639 --> 00:16:42,639
where we program the output map so that

454
00:16:42,639 --> 00:16:44,000
these changes are

455
00:16:44,000 --> 00:16:47,440
um indistinguishable to an adversary

456
00:16:47,440 --> 00:16:50,720
how does the hybrid argument works um

457
00:16:50,720 --> 00:16:52,880
so we proceed in a topological order

458
00:16:52,880 --> 00:16:54,959
with some topological order and then we

459
00:16:54,959 --> 00:16:56,639
what we do is we progressively replace

460
00:16:56,639 --> 00:16:59,040
each real goblin table uh with an input

461
00:16:59,040 --> 00:17:01,199
dependent garden table

462
00:17:01,199 --> 00:17:03,759
as shown in this illustration

463
00:17:03,759 --> 00:17:06,559
so why is it crucial to

464
00:17:06,559 --> 00:17:08,160
proceed in a in a

465
00:17:08,160 --> 00:17:10,640
uh in a topological order so the idea is

466
00:17:10,640 --> 00:17:11,439
to

467
00:17:11,439 --> 00:17:12,799
ensure that

468
00:17:12,799 --> 00:17:15,599
before switching some gate to input

469
00:17:15,599 --> 00:17:17,679
dependent mode we want to guarantee that

470
00:17:17,679 --> 00:17:19,359
both its parents have already been

471
00:17:19,359 --> 00:17:20,400
switched to

472
00:17:20,400 --> 00:17:22,400
uh input dependent mode

473
00:17:22,400 --> 00:17:24,240
and why do we need this uh this is

474
00:17:24,240 --> 00:17:26,000
crucial for the for the security

475
00:17:26,000 --> 00:17:28,079
argument to go through we want to ensure

476
00:17:28,079 --> 00:17:30,640
that the the at least one of the keys of

477
00:17:30,640 --> 00:17:32,880
both the parents are free

478
00:17:32,880 --> 00:17:33,919
and

479
00:17:33,919 --> 00:17:35,919
this will help us embed the the

480
00:17:35,919 --> 00:17:39,440
challenge uh key of the underlying ske

481
00:17:39,440 --> 00:17:42,799
into the into one of these gates

482
00:17:42,799 --> 00:17:43,679
and

483
00:17:43,679 --> 00:17:46,400
and therefore this the this uh this step

484
00:17:46,400 --> 00:17:47,919
it can be shown indistinguishable based

485
00:17:47,919 --> 00:17:49,679
on the ciphertext in distributability of

486
00:17:49,679 --> 00:17:52,480
the underlying sk

487
00:17:52,480 --> 00:17:55,679
and uh we carry we go on uh switching

488
00:17:55,679 --> 00:17:57,679
the gates input dependent unless until

489
00:17:57,679 --> 00:17:59,600
we have switched everything

490
00:17:59,600 --> 00:18:02,559
and then this switch

491
00:18:02,559 --> 00:18:04,080
the gates for me to be dependent to sim

492
00:18:04,080 --> 00:18:06,480
in the reverse topological order

493
00:18:06,480 --> 00:18:08,799
and note that unlike the first step this

494
00:18:08,799 --> 00:18:10,799
step is information theoretic since the

495
00:18:10,799 --> 00:18:12,480
keys are used in a symmetric manner in

496
00:18:12,480 --> 00:18:15,600
the in the gates

497
00:18:15,600 --> 00:18:17,600
note that if one uses the default output

498
00:18:17,600 --> 00:18:20,000
map uh the the adversary can trivially

499
00:18:20,000 --> 00:18:22,240
tell uh like the hybrids from each other

500
00:18:22,240 --> 00:18:23,919
since uh the

501
00:18:23,919 --> 00:18:25,600
since it can tell us why the evaluation

502
00:18:25,600 --> 00:18:27,600
of the of the global circuit therefore

503
00:18:27,600 --> 00:18:29,280
it is necessary that in each hybrid we

504
00:18:29,280 --> 00:18:32,000
program the output map so that it maps

505
00:18:32,000 --> 00:18:34,320
correctly to the output c of x now that

506
00:18:34,320 --> 00:18:35,840
this is not an issue in the selective

507
00:18:35,840 --> 00:18:38,080
setting since the the input is already

508
00:18:38,080 --> 00:18:39,520
available in the

509
00:18:39,520 --> 00:18:43,160
in the offline phase

510
00:18:43,200 --> 00:18:45,760
um note that this automatically implies

511
00:18:45,760 --> 00:18:47,840
uh adaptive simulatability but with the

512
00:18:47,840 --> 00:18:50,400
loss um which is exponentially the input

513
00:18:50,400 --> 00:18:52,960
length one simply guesses the input and

514
00:18:52,960 --> 00:18:54,080
then

515
00:18:54,080 --> 00:18:55,840
applies the selective simulatability

516
00:18:55,840 --> 00:18:56,960
reduction

517
00:18:56,960 --> 00:18:59,440
and we get adaptive simulatability the

518
00:18:59,440 --> 00:19:02,080
whole uh point of

519
00:19:02,080 --> 00:19:04,400
our work and also that of japanese is to

520
00:19:04,400 --> 00:19:08,520
avoid this exponential loss

521
00:19:11,520 --> 00:19:13,760
so what are the hurdles to adapt to

522
00:19:13,760 --> 00:19:15,440
security

523
00:19:15,440 --> 00:19:16,240
uh

524
00:19:16,240 --> 00:19:17,520
the most obvious problem is that the

525
00:19:17,520 --> 00:19:19,440
input act is only available in the

526
00:19:19,440 --> 00:19:21,520
online phase unlike in the case of

527
00:19:21,520 --> 00:19:23,760
the selective game

528
00:19:23,760 --> 00:19:25,919
so this manifests itself in in two ways

529
00:19:25,919 --> 00:19:28,000
so first uh we cannot program the the

530
00:19:28,000 --> 00:19:30,480
output map in the offline phase

531
00:19:30,480 --> 00:19:32,799
uh since the the input becomes available

532
00:19:32,799 --> 00:19:34,480
only in the online phase

533
00:19:34,480 --> 00:19:36,720
uh java google and makes basically sets

534
00:19:36,720 --> 00:19:39,760
up this issue and uh resorted to sending

535
00:19:39,760 --> 00:19:41,840
the output map in the online phase

536
00:19:41,840 --> 00:19:43,280
that's why they had to change the scheme

537
00:19:43,280 --> 00:19:45,919
and is what to to to this to the variant

538
00:19:45,919 --> 00:19:47,120
gamma prime

539
00:19:47,120 --> 00:19:49,200
uh what this bought them was the ability

540
00:19:49,200 --> 00:19:51,200
to defer the programming after they saw

541
00:19:51,200 --> 00:19:52,960
the input

542
00:19:52,960 --> 00:19:53,760
uh

543
00:19:53,760 --> 00:19:56,799
our solution uh is different

544
00:19:56,799 --> 00:19:59,600
so we first of all we cannot avoid to uh

545
00:19:59,600 --> 00:20:01,520
to defer

546
00:20:01,520 --> 00:20:03,120
sending news since we want to improve

547
00:20:03,120 --> 00:20:05,039
the security of the original

548
00:20:05,039 --> 00:20:08,480
protocol therefore our idea is to avoid

549
00:20:08,480 --> 00:20:11,520
steam mode in the hybrid cell together

550
00:20:11,520 --> 00:20:13,679
this is based on our observation that

551
00:20:13,679 --> 00:20:15,360
the requirement to program the output

552
00:20:15,360 --> 00:20:17,679
map is closely related to

553
00:20:17,679 --> 00:20:21,080
the sim mode

554
00:20:21,280 --> 00:20:24,159
the second uh problem that

555
00:20:24,159 --> 00:20:27,360
that come we come across is is now how

556
00:20:27,360 --> 00:20:30,000
do we simulate the input dependent

557
00:20:30,000 --> 00:20:31,840
goblin tables recall that the input

558
00:20:31,840 --> 00:20:33,360
dependent gates

559
00:20:33,360 --> 00:20:35,120
in order to simulate them we need to

560
00:20:35,120 --> 00:20:36,880
know the value of the wire the output

561
00:20:36,880 --> 00:20:38,559
fire of these gates

562
00:20:38,559 --> 00:20:40,960
uh since uh the input is only available

563
00:20:40,960 --> 00:20:42,799
in the online phase whereas we have to

564
00:20:42,799 --> 00:20:45,120
send the goblin table in the offline

565
00:20:45,120 --> 00:20:46,840
phase we have a dilemma

566
00:20:46,840 --> 00:20:48,799
here uh so

567
00:20:48,799 --> 00:20:50,559
jaffa volley and vex sold this in a very

568
00:20:50,559 --> 00:20:52,159
clever manner and this was their main

569
00:20:52,159 --> 00:20:54,000
clinical contribution so instead of

570
00:20:54,000 --> 00:20:57,120
using a lot of input dependent gates as

571
00:20:57,120 --> 00:20:59,120
in the case of lindell and pinkas

572
00:20:59,120 --> 00:21:01,120
what they did was they had a more frugal

573
00:21:01,120 --> 00:21:02,480
approach they minimized the number of

574
00:21:02,480 --> 00:21:04,240
input dependent gates and and then they

575
00:21:04,240 --> 00:21:06,080
went on to simply guess the value of

576
00:21:06,080 --> 00:21:08,159
these input dependent gates in case the

577
00:21:08,159 --> 00:21:09,600
number of input dependent gates is not

578
00:21:09,600 --> 00:21:10,640
too many

579
00:21:10,640 --> 00:21:12,320
the security loss that results is not

580
00:21:12,320 --> 00:21:15,039
too much either

581
00:21:15,600 --> 00:21:16,559
and

582
00:21:16,559 --> 00:21:18,159
but the question still remains how does

583
00:21:18,159 --> 00:21:20,240
one uh minimize the number of input

584
00:21:20,240 --> 00:21:21,840
dependent gates

585
00:21:21,840 --> 00:21:25,200
uh so what java gogolian wix uh did was

586
00:21:25,200 --> 00:21:27,200
they looked at uh restricted critical

587
00:21:27,200 --> 00:21:30,159
classes which kind of allowed you to use

588
00:21:30,159 --> 00:21:33,280
a few uh input dependent gates

589
00:21:33,280 --> 00:21:36,240
an example for this is nc one that is

590
00:21:36,240 --> 00:21:37,840
loaded circuits

591
00:21:37,840 --> 00:21:39,200
um

592
00:21:39,200 --> 00:21:42,080
since we cannot

593
00:21:42,080 --> 00:21:44,880
but this approach is uh tightly

594
00:21:44,880 --> 00:21:45,600
uh

595
00:21:45,600 --> 00:21:47,600
linked to the ability to program the

596
00:21:47,600 --> 00:21:49,039
output map since we don't have this

597
00:21:49,039 --> 00:21:50,480
ability we need like a totally different

598
00:21:50,480 --> 00:21:54,640
approach and what our approach is is to

599
00:21:54,640 --> 00:21:56,240
have a more divide and conquer based

600
00:21:56,240 --> 00:21:58,559
approach based on uh tree width and

601
00:21:58,559 --> 00:22:01,520
separators uh to reiterate since we do

602
00:22:01,520 --> 00:22:04,400
not have the the the ability to program

603
00:22:04,400 --> 00:22:06,640
the output map uh we have to avoid the

604
00:22:06,640 --> 00:22:09,200
sim mode and

605
00:22:09,200 --> 00:22:10,559
and this means we need like we need a

606
00:22:10,559 --> 00:22:12,400
totally different approach to minimizing

607
00:22:12,400 --> 00:22:14,480
the number of input dependent gates we

608
00:22:14,480 --> 00:22:16,000
believe this is our main technical

609
00:22:16,000 --> 00:22:18,559
contribution

610
00:22:21,280 --> 00:22:23,200
um

611
00:22:23,200 --> 00:22:25,360
there's a notion from algorithmic graph

612
00:22:25,360 --> 00:22:27,840
theory informally it is

613
00:22:27,840 --> 00:22:29,600
the measure of how far a circuit is from

614
00:22:29,600 --> 00:22:30,400
a

615
00:22:30,400 --> 00:22:32,720
formula or or more generally how far an

616
00:22:32,720 --> 00:22:35,840
undirected graph is from uh from a tree

617
00:22:35,840 --> 00:22:39,039
the exact definition of important

618
00:22:39,039 --> 00:22:41,520
as we will rely on on on the notion of

619
00:22:41,520 --> 00:22:42,960
separators more

620
00:22:42,960 --> 00:22:45,760
uh a separator for a for a circuit c is

621
00:22:45,760 --> 00:22:48,480
a subset of it gates that that removing

622
00:22:48,480 --> 00:22:49,760
this uh

623
00:22:49,760 --> 00:22:51,919
this set of gates s and the incident

624
00:22:51,919 --> 00:22:53,919
wires results in

625
00:22:53,919 --> 00:22:56,640
the circuit c being disconnected

626
00:22:56,640 --> 00:22:58,720
into sub-circuits and and each of the

627
00:22:58,720 --> 00:23:01,360
sub-circuits should have uh should not

628
00:23:01,360 --> 00:23:02,720
be too large

629
00:23:02,720 --> 00:23:06,000
um as for example in the figure we have

630
00:23:06,000 --> 00:23:08,480
a circuit c on the left and and

631
00:23:08,480 --> 00:23:10,960
the the separator for this circuit is is

632
00:23:10,960 --> 00:23:13,520
uh is shown in between the dashed lines

633
00:23:13,520 --> 00:23:15,280
as you can see if you remove the the

634
00:23:15,280 --> 00:23:17,039
gates in between the dashed lines the

635
00:23:17,039 --> 00:23:18,880
circuit splits nicely into

636
00:23:18,880 --> 00:23:20,880
a circuit c1 and

637
00:23:20,880 --> 00:23:24,080
another circuit c2

638
00:23:24,720 --> 00:23:25,679
um

639
00:23:25,679 --> 00:23:27,840
what we crucially rely on is is a is a

640
00:23:27,840 --> 00:23:29,520
classical theorem of uh robertson and

641
00:23:29,520 --> 00:23:32,400
seymour uh which says that in case the

642
00:23:32,400 --> 00:23:35,919
true width of a graph is bounded by w

643
00:23:35,919 --> 00:23:38,320
then the it also has a uh also has

644
00:23:38,320 --> 00:23:42,480
separators which are uh bounded uh by w

645
00:23:42,480 --> 00:23:44,000
we call this the trivit separator

646
00:23:44,000 --> 00:23:46,480
theorem and note that since the three

647
00:23:46,480 --> 00:23:48,240
width is a monotonous property which

648
00:23:48,240 --> 00:23:50,480
means that uh whenever you remove who

649
00:23:50,480 --> 00:23:52,799
gets from a circuit its tribute can only

650
00:23:52,799 --> 00:23:55,039
decrease this means that

651
00:23:55,039 --> 00:23:57,120
uh it is possible to apply the tribute

652
00:23:57,120 --> 00:23:59,200
separator theorem recursively on smaller

653
00:23:59,200 --> 00:24:01,520
and smaller circuits and we will use

654
00:24:01,520 --> 00:24:02,880
this uh

655
00:24:02,880 --> 00:24:05,840
observation crucially

656
00:24:06,000 --> 00:24:09,120
uh so we are almost uh there uh to

657
00:24:09,120 --> 00:24:10,880
explain our reduction

658
00:24:10,880 --> 00:24:12,880
uh we will consider a slightly simpler

659
00:24:12,880 --> 00:24:14,640
indistinguishability game just for the

660
00:24:14,640 --> 00:24:16,640
sake of simplicity where

661
00:24:16,640 --> 00:24:18,880
instead of sending two inputs

662
00:24:18,880 --> 00:24:21,679
uh the adversary only sends one input uh

663
00:24:21,679 --> 00:24:23,919
our result can be easily adapted to the

664
00:24:23,919 --> 00:24:26,480
the full case uh so just to

665
00:24:26,480 --> 00:24:29,120
uh state the the game now so the address

666
00:24:29,120 --> 00:24:31,200
three first sends two circuits c0 c1

667
00:24:31,200 --> 00:24:33,039
over to the challenger the challenger

668
00:24:33,039 --> 00:24:34,799
flips a bit b

669
00:24:34,799 --> 00:24:37,440
and sends the garbling of the circuit cb

670
00:24:37,440 --> 00:24:40,080
the usa now just picks one input x and

671
00:24:40,080 --> 00:24:42,080
gets back the garbling of this input x

672
00:24:42,080 --> 00:24:43,120
then he

673
00:24:43,120 --> 00:24:44,640
guesses the bit b

674
00:24:44,640 --> 00:24:47,279
and then save your cases correctly

675
00:24:47,279 --> 00:24:49,919
uh also to recall we will have four

676
00:24:49,919 --> 00:24:51,360
grabbing modes

677
00:24:51,360 --> 00:24:52,799
two corresponding to the real modes and

678
00:24:52,799 --> 00:24:54,320
two corresponding to the the input

679
00:24:54,320 --> 00:24:56,960
dependent modes

680
00:24:56,960 --> 00:24:59,200
uh so the goal of our reduction is to

681
00:24:59,200 --> 00:25:01,279
switch the goblin tables all from from

682
00:25:01,279 --> 00:25:03,279
real zero to real one recall that our

683
00:25:03,279 --> 00:25:04,320
goal is to

684
00:25:04,320 --> 00:25:06,880
uh show that uh the cases where the

685
00:25:06,880 --> 00:25:09,039
goblin of c zero and x is sent and the

686
00:25:09,039 --> 00:25:10,799
goblin of c one and x sent are

687
00:25:10,799 --> 00:25:12,080
indistinguishable this will

688
00:25:12,080 --> 00:25:13,760
corresponding to all the gates being

689
00:25:13,760 --> 00:25:15,360
being either in the real zero mode or in

690
00:25:15,360 --> 00:25:16,320
the real

691
00:25:16,320 --> 00:25:18,159
one mode we also

692
00:25:18,159 --> 00:25:21,360
proceed via hardware argument and our

693
00:25:21,360 --> 00:25:23,200
constraint in this hybrid argument is to

694
00:25:23,200 --> 00:25:26,880
minimize the number of gates in input 0

695
00:25:26,880 --> 00:25:29,120
or input one mode

696
00:25:29,120 --> 00:25:31,600
our main idea is to maintain gates in

697
00:25:31,600 --> 00:25:33,039
input dependent modes only on the

698
00:25:33,039 --> 00:25:34,559
separator

699
00:25:34,559 --> 00:25:36,880
what does this buy us uh by the property

700
00:25:36,880 --> 00:25:39,039
of the separator this means that the

701
00:25:39,039 --> 00:25:41,039
circuit is uh kind of split into two

702
00:25:41,039 --> 00:25:43,600
parts and it is possible to recurse on

703
00:25:43,600 --> 00:25:45,039
these two

704
00:25:45,039 --> 00:25:46,799
uh components independently of each

705
00:25:46,799 --> 00:25:47,919
other

706
00:25:47,919 --> 00:25:50,559
moreover if the separator is not too big

707
00:25:50,559 --> 00:25:52,559
this would mean that the number of gets

708
00:25:52,559 --> 00:25:54,000
an input depend on what you maintain is

709
00:25:54,000 --> 00:25:56,640
also not too too many and this would

710
00:25:56,640 --> 00:25:59,520
mean that we don't have to guess a lot

711
00:25:59,520 --> 00:26:01,120
when we try to simulate the gates in

712
00:26:01,120 --> 00:26:03,600
input dependent mode

713
00:26:03,600 --> 00:26:05,120
uh so this is the structure of our

714
00:26:05,120 --> 00:26:07,200
recursive uh this is the recursive

715
00:26:07,200 --> 00:26:08,559
structure for hybrids

716
00:26:08,559 --> 00:26:11,360
so as as as described we start with with

717
00:26:11,360 --> 00:26:15,520
with the all real zero uh gates

718
00:26:15,520 --> 00:26:18,240
then what we do is we switch

719
00:26:18,240 --> 00:26:20,559
uh the the gates on the separator to

720
00:26:20,559 --> 00:26:23,120
input dependent mode

721
00:26:23,120 --> 00:26:25,200
and this splits the graph the circuit

722
00:26:25,200 --> 00:26:28,720
into c1 and c2 and we recursively

723
00:26:28,720 --> 00:26:31,200
uh switch the two components uh to real

724
00:26:31,200 --> 00:26:32,240
one

725
00:26:32,240 --> 00:26:34,640
as illustrated here

726
00:26:34,640 --> 00:26:36,799
finally we can switch also the separator

727
00:26:36,799 --> 00:26:39,600
from input dependent to real

728
00:26:39,600 --> 00:26:41,520
uh what is the cost of this whole

729
00:26:41,520 --> 00:26:42,799
operation

730
00:26:42,799 --> 00:26:44,640
uh the number of gates we maintain in

731
00:26:44,640 --> 00:26:47,150
input dependent mode is roughly uh

732
00:26:47,150 --> 00:26:48,240
[Music]

733
00:26:48,240 --> 00:26:50,799
size of the size of the separator times

734
00:26:50,799 --> 00:26:52,880
the degree times the log of the size of

735
00:26:52,880 --> 00:26:54,400
the circuit

736
00:26:54,400 --> 00:26:56,720
um we're roughly speaking the

737
00:26:56,720 --> 00:26:59,360
the dependence on on log s

738
00:26:59,360 --> 00:27:01,520
it comes from the fact that we have to

739
00:27:01,520 --> 00:27:03,840
uh continue recursing till we reach

740
00:27:03,840 --> 00:27:07,480
constant side circuits

741
00:27:08,240 --> 00:27:10,320
in the paper we have

742
00:27:10,320 --> 00:27:11,200
we have

743
00:27:11,200 --> 00:27:12,799
abstracted all these details out and and

744
00:27:12,799 --> 00:27:14,640
we have a more formal approach which we

745
00:27:14,640 --> 00:27:17,200
described using a pebble game

746
00:27:17,200 --> 00:27:18,880
so our main

747
00:27:18,880 --> 00:27:20,880
theorem is proved using two lamata in

748
00:27:20,880 --> 00:27:22,960
the first lemma we show a tight coupling

749
00:27:22,960 --> 00:27:23,840
between

750
00:27:23,840 --> 00:27:25,840
the pebbling configurations and the and

751
00:27:25,840 --> 00:27:26,960
the hybrids

752
00:27:26,960 --> 00:27:29,919
um in particular we show that any two

753
00:27:29,919 --> 00:27:32,480
hybrids which correspond to neighboring

754
00:27:32,480 --> 00:27:33,520
um

755
00:27:33,520 --> 00:27:34,799
coming configurations they can be shown

756
00:27:34,799 --> 00:27:36,960
to indistimishable

757
00:27:36,960 --> 00:27:39,600
in the second step uh what we show is

758
00:27:39,600 --> 00:27:41,919
that there exists a table strategy

759
00:27:41,919 --> 00:27:43,840
uh which is uh which does not use too

760
00:27:43,840 --> 00:27:46,320
many pebbles uh

761
00:27:46,320 --> 00:27:49,679
which are of particular color

762
00:27:49,679 --> 00:27:52,159
and these two uh the mata will give us

763
00:27:52,159 --> 00:27:53,440
our main theorem

764
00:27:53,440 --> 00:27:55,360
and uh in order to prove this we will

765
00:27:55,360 --> 00:27:57,120
also use the peace prize guessing

766
00:27:57,120 --> 00:27:58,240
framework of

767
00:27:58,240 --> 00:28:01,279
chapagoli at all

768
00:28:01,279 --> 00:28:03,120
uh so that's with that i would like to

769
00:28:03,120 --> 00:28:05,600
conclude uh my talk and i would like to

770
00:28:05,600 --> 00:28:08,719
thank you for your attention

771
00:28:08,960 --> 00:28:10,880
and these are the references

772
00:28:10,880 --> 00:28:12,000
and

773
00:28:12,000 --> 00:28:13,600
these are the

774
00:28:13,600 --> 00:28:15,440
people we would like to acknowledge

775
00:28:15,440 --> 00:28:17,840
thank you

