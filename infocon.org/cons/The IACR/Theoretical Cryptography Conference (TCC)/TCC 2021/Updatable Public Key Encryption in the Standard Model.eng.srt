1
00:00:02,320 --> 00:00:04,000
hi everyone thank you for taking the

2
00:00:04,000 --> 00:00:06,160
time to view this video this is a longer

3
00:00:06,160 --> 00:00:08,080
version of the talk that i'm presenting

4
00:00:08,080 --> 00:00:11,120
during the proceedings of tcc 2021

5
00:00:11,120 --> 00:00:13,519
this is about my work on updatable

6
00:00:13,519 --> 00:00:15,280
public key encryption in the standard

7
00:00:15,280 --> 00:00:16,800
model and destroy and work with your

8
00:00:16,800 --> 00:00:20,240
kenny dodis and daniel wicks

9
00:00:20,720 --> 00:00:22,480
without much i do let's quickly jump

10
00:00:22,480 --> 00:00:24,960
into it let's begin with a quick refresh

11
00:00:24,960 --> 00:00:27,359
on public key encryption and

12
00:00:27,359 --> 00:00:29,359
motivate forward secure public

13
00:00:29,359 --> 00:00:31,039
encryption using it

14
00:00:31,039 --> 00:00:34,000
and then we will tie it up with our

15
00:00:34,000 --> 00:00:37,840
primitive of updatable public encryption

16
00:00:37,840 --> 00:00:39,760
uh let us recall the setting of

17
00:00:39,760 --> 00:00:40,800
updatable

18
00:00:40,800 --> 00:00:43,120
public encryption

19
00:00:43,120 --> 00:00:45,520
you have alice and you have bob

20
00:00:45,520 --> 00:00:48,000
bob wishes to communicate with alice

21
00:00:48,000 --> 00:00:50,399
in order to facilitate that alice

22
00:00:50,399 --> 00:00:52,719
generates a public key secret key pair

23
00:00:52,719 --> 00:00:54,480
keeps the secret key for herself and

24
00:00:54,480 --> 00:00:56,960
communicates the public key to pop

25
00:00:56,960 --> 00:00:59,440
bob with knowledge of the public key

26
00:00:59,440 --> 00:01:01,680
can choose to encrypt a message m

27
00:01:01,680 --> 00:01:02,559
not

28
00:01:02,559 --> 00:01:05,119
uh with the public key to get ciphertext

29
00:01:05,119 --> 00:01:08,159
c0 and communicates that ciphertext

30
00:01:08,159 --> 00:01:10,159
to alice

31
00:01:10,159 --> 00:01:12,080
alice with knowledge of the secret key

32
00:01:12,080 --> 00:01:14,560
is in a position to decrypt c0

33
00:01:14,560 --> 00:01:16,560
and recover the underlying message m

34
00:01:16,560 --> 00:01:18,479
naught

35
00:01:18,479 --> 00:01:22,240
and bob can do it repeatedly

36
00:01:22,560 --> 00:01:24,720
and at some point of time we assume that

37
00:01:24,720 --> 00:01:26,479
there is an attack

38
00:01:26,479 --> 00:01:28,960
and there is an adversary who is capable

39
00:01:28,960 --> 00:01:31,920
of corrupting the user and your uh eve

40
00:01:31,920 --> 00:01:34,000
chooses to corrupt alice and recover the

41
00:01:34,000 --> 00:01:35,600
secret key info

42
00:01:35,600 --> 00:01:37,840
now it is obvious that if eve has kept

43
00:01:37,840 --> 00:01:40,560
track of messages c naught

44
00:01:40,560 --> 00:01:42,799
through scene four can use a secret key

45
00:01:42,799 --> 00:01:45,360
to decrypt the ciphertext to recover the

46
00:01:45,360 --> 00:01:47,759
underlying message m naught through m4

47
00:01:47,759 --> 00:01:50,240
making all of them insecure

48
00:01:50,240 --> 00:01:52,399
now the question we ask ourselves is can

49
00:01:52,399 --> 00:01:54,720
we protect the messages

50
00:01:54,720 --> 00:01:57,520
let's take a more granular look

51
00:01:57,520 --> 00:01:59,759
at when the compromise happens and let

52
00:01:59,759 --> 00:02:01,119
us assume that the compromise has

53
00:02:01,119 --> 00:02:02,799
happened sometime between hours

54
00:02:02,799 --> 00:02:06,479
decrypting c1 and alice decrypting c2

55
00:02:06,479 --> 00:02:07,360
now

56
00:02:07,360 --> 00:02:08,959
the problem is that

57
00:02:08,959 --> 00:02:11,280
the messages from m2 and

58
00:02:11,280 --> 00:02:14,160
m3 and m4 are impossible to protect

59
00:02:14,160 --> 00:02:15,760
whereas the goal of forward secure

60
00:02:15,760 --> 00:02:17,680
encryption is to protect m naught and m

61
00:02:17,680 --> 00:02:21,040
one because those messages were received

62
00:02:21,040 --> 00:02:23,920
before the corruption happened

63
00:02:23,920 --> 00:02:25,920
and this is the forward secure public

64
00:02:25,920 --> 00:02:27,680
key encryption

65
00:02:27,680 --> 00:02:29,920
alice generates a public key secret key

66
00:02:29,920 --> 00:02:32,239
pair for a particular time period say

67
00:02:32,239 --> 00:02:35,280
time period zero keep secret key sk0 for

68
00:02:35,280 --> 00:02:38,160
herself and communicates pk 0 to bob

69
00:02:38,160 --> 00:02:41,040
bob with knowledge of b k naught

70
00:02:41,040 --> 00:02:43,200
can encrypt a message m naught of its

71
00:02:43,200 --> 00:02:46,000
choice to communicate the cipher text c

72
00:02:46,000 --> 00:02:47,440
naught to

73
00:02:47,440 --> 00:02:48,720
alice

74
00:02:48,720 --> 00:02:51,599
in addition bob also moves the public

75
00:02:51,599 --> 00:02:54,160
key from p k naught to a new time period

76
00:02:54,160 --> 00:02:56,000
b k 1.

77
00:02:56,000 --> 00:02:57,840
now alice

78
00:02:57,840 --> 00:03:00,080
with knowledge of the r secret k s k

79
00:03:00,080 --> 00:03:02,000
naught and having received the

80
00:03:02,000 --> 00:03:03,920
ciphertext c naught can decrypt the

81
00:03:03,920 --> 00:03:04,959
message

82
00:03:04,959 --> 00:03:07,840
uh to get m naught and also moves the

83
00:03:07,840 --> 00:03:09,760
public as the secret key that she has

84
00:03:09,760 --> 00:03:13,120
from sk naught to sta1

85
00:03:13,120 --> 00:03:15,920
and bob does this repeatedly

86
00:03:15,920 --> 00:03:17,760
now if

87
00:03:17,760 --> 00:03:20,959
sk2 is corrupted the goal of em uh

88
00:03:20,959 --> 00:03:22,720
forward secure encryption of our secure

89
00:03:22,720 --> 00:03:24,799
public encryption to be precise is that

90
00:03:24,799 --> 00:03:27,760
m naught and m1 remain secure and m2 m3

91
00:03:27,760 --> 00:03:28,879
and m4

92
00:03:28,879 --> 00:03:30,720
are basically impossible to protect

93
00:03:30,720 --> 00:03:32,879
because those ciphertexts were

94
00:03:32,879 --> 00:03:35,360
were received after

95
00:03:35,360 --> 00:03:39,599
um after uh the compromise has happened

96
00:03:39,599 --> 00:03:41,360
now let us quickly take a look at

97
00:03:41,360 --> 00:03:44,000
related work in fs literature

98
00:03:44,000 --> 00:03:44,879
pretty much

99
00:03:44,879 --> 00:03:46,879
state of the art is the work by kenneth

100
00:03:46,879 --> 00:03:48,879
d at all uh where they proposed

101
00:03:48,879 --> 00:03:50,560
constructions of public secure public

102
00:03:50,560 --> 00:03:52,480
encryption from head article identity

103
00:03:52,480 --> 00:03:53,920
based encryption

104
00:03:53,920 --> 00:03:56,239
now most recently in crypto 2018 you had

105
00:03:56,239 --> 00:03:57,040
work

106
00:03:57,040 --> 00:03:59,519
uh your two works that proposed a notion

107
00:03:59,519 --> 00:04:01,120
of key updatable public key encryption

108
00:04:01,120 --> 00:04:03,120
schemes right now the key updates can be

109
00:04:03,120 --> 00:04:04,879
labeled by arbitrary strings but once

110
00:04:04,879 --> 00:04:07,280
again the constructions work from hype

111
00:04:07,280 --> 00:04:08,640
now ib schemes are often more

112
00:04:08,640 --> 00:04:10,080
complicated and in a vision when

113
00:04:10,080 --> 00:04:11,680
compared to the publicly encrypted

114
00:04:11,680 --> 00:04:12,959
counterparts

115
00:04:12,959 --> 00:04:14,480
so the question we confront in this

116
00:04:14,480 --> 00:04:16,320
paper in this research

117
00:04:16,320 --> 00:04:18,639
is can we close the efficiency gap

118
00:04:18,639 --> 00:04:20,720
by suitably weakening the security

119
00:04:20,720 --> 00:04:21,839
definition

120
00:04:21,839 --> 00:04:23,199
in

121
00:04:23,199 --> 00:04:25,600
specifically what we want is to use the

122
00:04:25,600 --> 00:04:27,919
ciphertext that the sender is

123
00:04:27,919 --> 00:04:30,000
communicating with the receiver to help

124
00:04:30,000 --> 00:04:31,680
achieve maybe a weaker notion of forward

125
00:04:31,680 --> 00:04:33,040
secrecy

126
00:04:33,040 --> 00:04:35,199
now let us take a look at how this would

127
00:04:35,199 --> 00:04:36,000
look

128
00:04:36,000 --> 00:04:37,600
uh and this most simplest setting to

129
00:04:37,600 --> 00:04:39,680
visualize would be the symmetric key

130
00:04:39,680 --> 00:04:40,560
setting

131
00:04:40,560 --> 00:04:44,080
so alice has a key k naught and bob also

132
00:04:44,080 --> 00:04:45,840
has a key k naught

133
00:04:45,840 --> 00:04:48,479
now one simple thing that uh bob can do

134
00:04:48,479 --> 00:04:50,240
is when bob is encrypting a message and

135
00:04:50,240 --> 00:04:51,680
not of its choice

136
00:04:51,680 --> 00:04:53,040
will also

137
00:04:53,040 --> 00:04:54,560
encrypt

138
00:04:54,560 --> 00:04:56,479
the new key k1

139
00:04:56,479 --> 00:04:58,639
so alice with knowledge of k naught will

140
00:04:58,639 --> 00:05:01,120
be in a position to decrypt and recover

141
00:05:01,120 --> 00:05:03,199
both m naught and k one

142
00:05:03,199 --> 00:05:06,320
and this can happen repeatedly

143
00:05:06,320 --> 00:05:08,800
this is a very simple setting uh and

144
00:05:08,800 --> 00:05:10,960
very simple scheme indeed however the

145
00:05:10,960 --> 00:05:13,360
symmetric scheme is inherently uh one

146
00:05:13,360 --> 00:05:14,960
center one receiver

147
00:05:14,960 --> 00:05:16,960
and if we need for if we needed to

148
00:05:16,960 --> 00:05:20,639
support uh multiple senders uh um

149
00:05:20,639 --> 00:05:24,720
we would have to rely on some kind of a

150
00:05:24,720 --> 00:05:27,280
public key primitive so let us take a

151
00:05:27,280 --> 00:05:28,560
look at

152
00:05:28,560 --> 00:05:31,440
a direct counterpart of symmetric

153
00:05:31,440 --> 00:05:33,039
encryption where i'm just replacing all

154
00:05:33,039 --> 00:05:34,240
of the keys

155
00:05:34,240 --> 00:05:36,479
uh with public key security pair so this

156
00:05:36,479 --> 00:05:38,560
is how it would look

157
00:05:38,560 --> 00:05:41,600
where i'm replacing

158
00:05:41,600 --> 00:05:44,720
in this manner so what has happened is

159
00:05:44,720 --> 00:05:49,520
that bob chooses a pk1 sk1 pair

160
00:05:49,520 --> 00:05:50,840
and then sends

161
00:05:50,840 --> 00:05:54,000
sk1 along with pk1

162
00:05:54,000 --> 00:05:55,759
to alice

163
00:05:55,759 --> 00:05:58,639
now alice can decrypt the message to

164
00:05:58,639 --> 00:06:01,840
recover m naught and sk1 and can simply

165
00:06:01,840 --> 00:06:04,080
uh make sure that sk1 and pk1 are

166
00:06:04,080 --> 00:06:06,880
consistent and so on and so forth

167
00:06:06,880 --> 00:06:09,520
however we recall that the issue that we

168
00:06:09,520 --> 00:06:11,280
had was that we wanted to support

169
00:06:11,280 --> 00:06:14,319
multiple senders so what if we have some

170
00:06:14,319 --> 00:06:15,440
kind of a

171
00:06:15,440 --> 00:06:17,440
another user charlie who wants to also

172
00:06:17,440 --> 00:06:20,400
participate in sending messages to

173
00:06:20,400 --> 00:06:21,600
alice

174
00:06:21,600 --> 00:06:23,360
one issue that me that is immediate is

175
00:06:23,360 --> 00:06:24,240
that

176
00:06:24,240 --> 00:06:27,280
charlie needs to keep track of the most

177
00:06:27,280 --> 00:06:29,680
recent message so that

178
00:06:29,680 --> 00:06:31,759
charlie knows the public key that is

179
00:06:31,759 --> 00:06:34,720
most current and can use that public key

180
00:06:34,720 --> 00:06:37,840
to encrypt messages so specifically uh

181
00:06:37,840 --> 00:06:39,600
charlie needs to keep track and make

182
00:06:39,600 --> 00:06:42,400
sure that uh charlie knows pk2 to

183
00:06:42,400 --> 00:06:43,919
intervene at this point to encrypt with

184
00:06:43,919 --> 00:06:46,880
a message uh using pk2

185
00:06:46,880 --> 00:06:48,880
so in essence this requires strong

186
00:06:48,880 --> 00:06:50,319
synchronization

187
00:06:50,319 --> 00:06:53,120
however all is not lost because for some

188
00:06:53,120 --> 00:06:54,720
applications such as secure messaging

189
00:06:54,720 --> 00:06:55,680
this is

190
00:06:55,680 --> 00:06:57,680
not a huge problem we can assume some

191
00:06:57,680 --> 00:06:59,599
kind of serialization

192
00:06:59,599 --> 00:07:01,919
so are we done with the setting is it a

193
00:07:01,919 --> 00:07:04,160
case of the is it the case of understood

194
00:07:04,160 --> 00:07:05,680
securely after

195
00:07:05,680 --> 00:07:08,800
unfortunately not

196
00:07:08,800 --> 00:07:10,960
as with any message

197
00:07:10,960 --> 00:07:13,360
uh as with any scheme uh there are

198
00:07:13,360 --> 00:07:15,680
lurking trust issues here

199
00:07:15,680 --> 00:07:17,759
and what is the trust issue here let us

200
00:07:17,759 --> 00:07:20,479
now look at a multiple center when both

201
00:07:20,479 --> 00:07:21,599
uh

202
00:07:21,599 --> 00:07:23,599
bob and charlie wish to communicate with

203
00:07:23,599 --> 00:07:24,800
alice

204
00:07:24,800 --> 00:07:26,720
so this is how this game would look and

205
00:07:26,720 --> 00:07:28,840
we have alice we have bob and we have

206
00:07:28,840 --> 00:07:32,479
charlie now bob begins the first message

207
00:07:32,479 --> 00:07:33,599
sending

208
00:07:33,599 --> 00:07:37,360
by first moving pk0 to pk1 and

209
00:07:37,360 --> 00:07:39,520
encrypting the new secret key sk1 that

210
00:07:39,520 --> 00:07:41,599
is consistent with pk1 along with the

211
00:07:41,599 --> 00:07:43,599
message m naught of its choice

212
00:07:43,599 --> 00:07:45,440
now we are assuming that these public

213
00:07:45,440 --> 00:07:47,440
keys are written in a public manner so

214
00:07:47,440 --> 00:07:49,199
that charlie can quickly recover the

215
00:07:49,199 --> 00:07:51,199
most recent public key

216
00:07:51,199 --> 00:07:53,919
now alice with knowledge of sk naught as

217
00:07:53,919 --> 00:07:56,319
before can decrypt to get m naught and

218
00:07:56,319 --> 00:07:57,919
sk1

219
00:07:57,919 --> 00:08:01,759
now charlie will retrieve pk1 generate a

220
00:08:01,759 --> 00:08:03,680
new sk2 pk2

221
00:08:03,680 --> 00:08:05,840
and send a message of his choice which

222
00:08:05,840 --> 00:08:07,440
is m1

223
00:08:07,440 --> 00:08:10,800
and also move the public record to pk2

224
00:08:10,800 --> 00:08:12,639
and now alice is in a position to

225
00:08:12,639 --> 00:08:14,639
decrypt the message

226
00:08:14,639 --> 00:08:17,360
now we spoke about trust so

227
00:08:17,360 --> 00:08:19,919
let's look at whom can charlie trust in

228
00:08:19,919 --> 00:08:21,039
the setting

229
00:08:21,039 --> 00:08:23,039
charlie can trust himself

230
00:08:23,039 --> 00:08:24,960
and charlie can trust the receiver

231
00:08:24,960 --> 00:08:27,520
because alice is the one he's

232
00:08:27,520 --> 00:08:29,360
communicating with and the palace is a

233
00:08:29,360 --> 00:08:31,680
corrupt entity any way the messages are

234
00:08:31,680 --> 00:08:33,679
are insecure at that point

235
00:08:33,679 --> 00:08:35,599
however

236
00:08:35,599 --> 00:08:38,640
whom does charlie need to trust actually

237
00:08:38,640 --> 00:08:40,399
it is quite obvious to see that

238
00:08:40,399 --> 00:08:42,399
charlie also needs to trust bob in the

239
00:08:42,399 --> 00:08:43,839
setting

240
00:08:43,839 --> 00:08:45,360
and

241
00:08:45,360 --> 00:08:47,760
which might be fine

242
00:08:47,760 --> 00:08:49,519
unless bob is a

243
00:08:49,519 --> 00:08:51,760
male level identity in which case we

244
00:08:51,760 --> 00:08:53,839
clearly have a problem

245
00:08:53,839 --> 00:08:55,920
and this is a big problem even if you

246
00:08:55,920 --> 00:08:58,240
assume an honest but curious model

247
00:08:58,240 --> 00:09:00,320
because either bob can choose randomness

248
00:09:00,320 --> 00:09:02,880
which could be corrupted later or bob

249
00:09:02,880 --> 00:09:05,920
can choose bad randomness or simply bob

250
00:09:05,920 --> 00:09:09,680
can choose not to erase sk1 because if

251
00:09:09,680 --> 00:09:12,399
bob still had sk1 bob can decrypt the

252
00:09:12,399 --> 00:09:15,120
message that's being sent by charlie

253
00:09:15,120 --> 00:09:16,880
recovering the entire message so this is

254
00:09:16,880 --> 00:09:20,399
basically on a protocol where we expect

255
00:09:20,399 --> 00:09:22,320
the users to generate the new public key

256
00:09:22,320 --> 00:09:25,279
secret key pair and immediately erase

257
00:09:25,279 --> 00:09:27,440
secret key uh that has been generated

258
00:09:27,440 --> 00:09:31,200
from his memory from his or their memory

259
00:09:31,200 --> 00:09:32,160
okay

260
00:09:32,160 --> 00:09:33,440
now

261
00:09:33,440 --> 00:09:36,000
the goal that we have to ask is

262
00:09:36,000 --> 00:09:37,760
reasonable security even under

263
00:09:37,760 --> 00:09:39,360
compromised senders

264
00:09:39,360 --> 00:09:41,600
and the solution is quite simple the

265
00:09:41,600 --> 00:09:43,839
ciphertext will aid in producing the

266
00:09:43,839 --> 00:09:46,160
secret keys chain and not contain the

267
00:09:46,160 --> 00:09:47,920
secret keys themselves and this is what

268
00:09:47,920 --> 00:09:50,640
we call updatable public key encryption

269
00:09:50,640 --> 00:09:52,320
so let us take a look at the updatable

270
00:09:52,320 --> 00:09:54,800
public encryption the primitive with its

271
00:09:54,800 --> 00:09:58,560
uh syntax and security

272
00:09:58,959 --> 00:10:00,000
um

273
00:10:00,000 --> 00:10:04,440
setting an ordered sequence of

274
00:10:06,720 --> 00:10:08,880
so let us the setting here as before we

275
00:10:08,880 --> 00:10:10,640
assume that some kind of a serialization

276
00:10:10,640 --> 00:10:12,880
mechanism has happened where every user

277
00:10:12,880 --> 00:10:14,399
receives the same ordered sequence of

278
00:10:14,399 --> 00:10:16,240
ciphertext which is to be decrypted by

279
00:10:16,240 --> 00:10:17,360
the receiver

280
00:10:17,360 --> 00:10:18,800
we can either assume it's a one center

281
00:10:18,800 --> 00:10:20,399
or there's some external mechanism to

282
00:10:20,399 --> 00:10:21,519
serialize

283
00:10:21,519 --> 00:10:24,000
uh in a nutshell sender or senders

284
00:10:24,000 --> 00:10:26,560
possibly produce a public key chain the

285
00:10:26,560 --> 00:10:29,200
ciphertext will help receive uh help the

286
00:10:29,200 --> 00:10:31,440
receiver produce a secret keychain

287
00:10:31,440 --> 00:10:32,720
and the both the chains need to be

288
00:10:32,720 --> 00:10:33,839
consistent

289
00:10:33,839 --> 00:10:35,519
however the key point here is that the

290
00:10:35,519 --> 00:10:38,880
public key chain is not fixed a priority

291
00:10:38,880 --> 00:10:42,000
so therefore what we get is a security

292
00:10:42,000 --> 00:10:45,279
requirement that any good ciphertext uh

293
00:10:45,279 --> 00:10:48,320
within uh within uh um quotes restore

294
00:10:48,320 --> 00:10:50,160
security irrespective of what happens

295
00:10:50,160 --> 00:10:51,600
between them

296
00:10:51,600 --> 00:10:54,800
and we will formalize this intuition uh

297
00:10:54,800 --> 00:10:56,399
with the syntax and security in just a

298
00:10:56,399 --> 00:10:57,519
few slides

299
00:10:57,519 --> 00:10:59,120
so

300
00:10:59,120 --> 00:11:00,320
let us look a look and take a look at

301
00:11:00,320 --> 00:11:03,760
the syntax of upke um upk much like any

302
00:11:03,760 --> 00:11:05,920
public encryption will have the three

303
00:11:05,920 --> 00:11:08,480
keep algorithms of gen encryption and

304
00:11:08,480 --> 00:11:09,680
decryption

305
00:11:09,680 --> 00:11:11,519
uh the original updatable public

306
00:11:11,519 --> 00:11:13,040
encryption which was proposed by jost

307
00:11:13,040 --> 00:11:14,880
and others uh use three additional

308
00:11:14,880 --> 00:11:16,800
algorithms one to generate some kind of

309
00:11:16,800 --> 00:11:18,880
an update token want to use the update

310
00:11:18,880 --> 00:11:20,640
token to generate

311
00:11:20,640 --> 00:11:23,200
the uh update the public key and one

312
00:11:23,200 --> 00:11:24,720
which uses the tokens to update the

313
00:11:24,720 --> 00:11:25,920
secretly

314
00:11:25,920 --> 00:11:28,640
uh the work by alvin and others

315
00:11:28,640 --> 00:11:30,880
simplified it where they just assumed

316
00:11:30,880 --> 00:11:31,760
that

317
00:11:31,760 --> 00:11:32,560
uh

318
00:11:32,560 --> 00:11:34,160
an update happened every after every

319
00:11:34,160 --> 00:11:35,920
message so they combine the update

320
00:11:35,920 --> 00:11:37,920
process and the encryption process

321
00:11:37,920 --> 00:11:40,160
together update public key to be precise

322
00:11:40,160 --> 00:11:41,920
and the encryption process and update

323
00:11:41,920 --> 00:11:43,680
secret key and the decryption process

324
00:11:43,680 --> 00:11:44,880
together

325
00:11:44,880 --> 00:11:46,480
however for clarity we have tried to

326
00:11:46,480 --> 00:11:48,079
take the middle ground where we will

327
00:11:48,079 --> 00:11:50,000
assume that there are five algorithms as

328
00:11:50,000 --> 00:11:53,040
opposed to six which is a huge saving um

329
00:11:53,040 --> 00:11:55,279
and these are our algorithm we are all

330
00:11:55,279 --> 00:11:56,800
as mentioned we have a general gen

331
00:11:56,800 --> 00:11:58,399
algorithm that will generate the public

332
00:11:58,399 --> 00:12:00,480
key secret key pair an encryption

333
00:12:00,480 --> 00:12:02,480
algorithm that will take a public key

334
00:12:02,480 --> 00:12:04,880
and uh message him and they use some

335
00:12:04,880 --> 00:12:06,720
randomness to generate the cipher text

336
00:12:06,720 --> 00:12:09,120
in the c in the ciphertext space

337
00:12:09,120 --> 00:12:11,920
um decryption will have a secret key uh

338
00:12:11,920 --> 00:12:13,440
and will be in a position to decrypt the

339
00:12:13,440 --> 00:12:16,000
cr secret uh the ciphertext c to recover

340
00:12:16,000 --> 00:12:18,720
the underlying message and

341
00:12:18,720 --> 00:12:20,800
in addition we have two other algorithms

342
00:12:20,800 --> 00:12:22,560
which is update public key which is a

343
00:12:22,560 --> 00:12:24,399
randomized algorithm that takes public

344
00:12:24,399 --> 00:12:25,920
key the old public key and produces the

345
00:12:25,920 --> 00:12:28,160
new public epk prime and something

346
00:12:28,160 --> 00:12:30,720
called we call as the update ciphertext

347
00:12:30,720 --> 00:12:32,800
now the update secret key will take the

348
00:12:32,800 --> 00:12:35,440
old secret key and the update ciphertext

349
00:12:35,440 --> 00:12:37,600
is produced here to produce a new secret

350
00:12:37,600 --> 00:12:39,680
ksk prime that is consistent with pk

351
00:12:39,680 --> 00:12:42,480
prime hence the colors um

352
00:12:42,480 --> 00:12:46,560
so what is the correctness requirement

353
00:12:46,720 --> 00:12:49,040
the correctness requirement is that if a

354
00:12:49,040 --> 00:12:52,480
message is encrypted with a public key

355
00:12:52,480 --> 00:12:54,560
it is decrypted by the corresponding

356
00:12:54,560 --> 00:12:55,839
secret key

357
00:12:55,839 --> 00:12:59,839
a very uh a very naive uh extension of a

358
00:12:59,839 --> 00:13:02,560
standard pke correctness

359
00:13:02,560 --> 00:13:04,639
so what is the security

360
00:13:04,639 --> 00:13:08,720
what is our security model so

361
00:13:08,720 --> 00:13:10,399
we are what we present here is something

362
00:13:10,399 --> 00:13:13,839
called as indc rcpa star well you know

363
00:13:13,839 --> 00:13:16,720
what ind cpa might mean the cr and the

364
00:13:16,720 --> 00:13:19,040
star are uh

365
00:13:19,040 --> 00:13:20,480
notations that we will explain in the

366
00:13:20,480 --> 00:13:22,079
very next slide but let's take a look at

367
00:13:22,079 --> 00:13:24,160
the security definition here

368
00:13:24,160 --> 00:13:26,399
so we have the challenger and we have

369
00:13:26,399 --> 00:13:28,079
the adversity

370
00:13:28,079 --> 00:13:29,600
now the

371
00:13:29,600 --> 00:13:32,079
the challenger will generate a publicly

372
00:13:32,079 --> 00:13:34,959
secret key pair uh for time period zero

373
00:13:34,959 --> 00:13:37,600
and also chooses the the random bit for

374
00:13:37,600 --> 00:13:40,160
the uh the cpa part of the game it will

375
00:13:40,160 --> 00:13:42,160
communicate probably uh the public epk

376
00:13:42,160 --> 00:13:44,639
not to the adversary the adversary will

377
00:13:44,639 --> 00:13:47,440
provide a sequence of randomness r i say

378
00:13:47,440 --> 00:13:49,680
q such randomness along with its

379
00:13:49,680 --> 00:13:51,760
challenge messages m naught star and m

380
00:13:51,760 --> 00:13:52,959
one star

381
00:13:52,959 --> 00:13:55,120
now this is what the challenger does

382
00:13:55,120 --> 00:13:58,240
it will sequentially update

383
00:13:58,240 --> 00:14:00,560
the public key

384
00:14:00,560 --> 00:14:03,600
q times from p k naught to p k q and

385
00:14:03,600 --> 00:14:06,000
similarly update the secret key as well

386
00:14:06,000 --> 00:14:08,800
so as follows so it will take r one p k

387
00:14:08,800 --> 00:14:10,720
naught to produce a new public key pk

388
00:14:10,720 --> 00:14:13,360
one and the update cipher text f1

389
00:14:13,360 --> 00:14:16,000
up one becomes

390
00:14:16,000 --> 00:14:17,680
becomes an input to the update secret k

391
00:14:17,680 --> 00:14:19,440
algorithm along with sk naught to

392
00:14:19,440 --> 00:14:23,120
produce sk1 this happens repeatedly

393
00:14:23,120 --> 00:14:25,120
now at which point

394
00:14:25,120 --> 00:14:26,880
what the adversary what the challenger

395
00:14:26,880 --> 00:14:30,000
does is that challenger will choose a

396
00:14:30,000 --> 00:14:32,000
randomness r star

397
00:14:32,000 --> 00:14:34,639
of his choice

398
00:14:34,639 --> 00:14:36,959
and produce the corresponding pk star

399
00:14:36,959 --> 00:14:39,760
and sk star in essence what is happening

400
00:14:39,760 --> 00:14:42,000
is that this r star corresponds to a

401
00:14:42,000 --> 00:14:44,560
good cipher text where it's not an

402
00:14:44,560 --> 00:14:46,959
adversarially controlled randomness so

403
00:14:46,959 --> 00:14:49,120
as long as this has happened security is

404
00:14:49,120 --> 00:14:51,600
restored it's what our security capable

405
00:14:51,600 --> 00:14:54,240
capture so what does

406
00:14:54,240 --> 00:14:56,560
um the adversary receive the adversary

407
00:14:56,560 --> 00:14:58,959
will receive pk start

408
00:14:58,959 --> 00:15:00,639
and the secret key wherein there is a

409
00:15:00,639 --> 00:15:02,079
compromise that has happened which has

410
00:15:02,079 --> 00:15:04,880
made the adversary possible to receive

411
00:15:04,880 --> 00:15:06,560
the secret key

412
00:15:06,560 --> 00:15:08,480
along with an update ciphertext that was

413
00:15:08,480 --> 00:15:11,040
actually used upstart and the challenge

414
00:15:11,040 --> 00:15:13,519
ciphertext which is an encryption of pk

415
00:15:13,519 --> 00:15:15,680
uh mb start

416
00:15:15,680 --> 00:15:17,839
under pkq

417
00:15:17,839 --> 00:15:19,839
okay so the idea here is that as long as

418
00:15:19,839 --> 00:15:21,279
there is one

419
00:15:21,279 --> 00:15:23,760
good randomness

420
00:15:23,760 --> 00:15:25,839
even if everything that before was

421
00:15:25,839 --> 00:15:27,760
adversarially controlled and possibly

422
00:15:27,760 --> 00:15:30,240
zero randomness went into it there is

423
00:15:30,240 --> 00:15:32,079
still security

424
00:15:32,079 --> 00:15:33,600
it's a fundamental goal now the

425
00:15:33,600 --> 00:15:36,000
adversary will respond with b prime and

426
00:15:36,000 --> 00:15:37,759
the probability that the uh the red

427
00:15:37,759 --> 00:15:39,440
attack of wins is

428
00:15:39,440 --> 00:15:41,759
probably that b is equal to b prime and

429
00:15:41,759 --> 00:15:45,199
this is standard advantage definition

430
00:15:45,199 --> 00:15:46,000
so

431
00:15:46,000 --> 00:15:48,959
this is our security definition but as i

432
00:15:48,959 --> 00:15:51,440
said what does cr mean and why the start

433
00:15:51,440 --> 00:15:54,000
is something we will look at right now

434
00:15:54,000 --> 00:15:56,399
um but before that we will quickly uh

435
00:15:56,399 --> 00:15:58,639
look at differences some subtle

436
00:15:58,639 --> 00:16:00,720
differences from existing definitions of

437
00:16:00,720 --> 00:16:03,199
the security game to begin with

438
00:16:03,199 --> 00:16:04,800
just and others does not provide for

439
00:16:04,800 --> 00:16:07,519
malicious randomness what it allows is

440
00:16:07,519 --> 00:16:09,519
for the adversary to expose randomness

441
00:16:09,519 --> 00:16:10,720
instead

442
00:16:10,720 --> 00:16:12,959
and the original definition of uh the

443
00:16:12,959 --> 00:16:15,199
other definition of alvin and others uh

444
00:16:15,199 --> 00:16:17,920
were included the best mi because we

445
00:16:17,920 --> 00:16:20,079
call that some of the update public key

446
00:16:20,079 --> 00:16:22,800
encryption uh update public key

447
00:16:22,800 --> 00:16:24,560
operation and the encryption were

448
00:16:24,560 --> 00:16:26,639
combined together whereas it's quite

449
00:16:26,639 --> 00:16:28,720
unnecessary for our model

450
00:16:28,720 --> 00:16:31,040
so let us look at the security

451
00:16:31,040 --> 00:16:32,079
model

452
00:16:32,079 --> 00:16:34,399
cr is basically a short for chosen

453
00:16:34,399 --> 00:16:35,600
randomness

454
00:16:35,600 --> 00:16:37,279
basically the adversary chooses the

455
00:16:37,279 --> 00:16:39,839
randomness as indicated by ricr this is

456
00:16:39,839 --> 00:16:42,160
something that's adversely chosen

457
00:16:42,160 --> 00:16:45,120
indcr cpstar is a very simplified model

458
00:16:45,120 --> 00:16:47,759
presented here and what is why what is

459
00:16:47,759 --> 00:16:49,600
the simplification we assume that the

460
00:16:49,600 --> 00:16:52,399
secret key is revealed right after the

461
00:16:52,399 --> 00:16:56,240
challenge message so basically uh pkq is

462
00:16:56,240 --> 00:16:59,040
used to encrypt uh the challenge message

463
00:16:59,040 --> 00:17:00,959
and immediately there is a good update

464
00:17:00,959 --> 00:17:02,880
that happens which gives you the secret

465
00:17:02,880 --> 00:17:05,119
key right here however a more generic

466
00:17:05,119 --> 00:17:08,480
assumption would let you choose uh let

467
00:17:08,480 --> 00:17:11,039
the adversary uh process provide for

468
00:17:11,039 --> 00:17:12,720
more randomness between the challenge

469
00:17:12,720 --> 00:17:14,959
phase and the exposed space or the

470
00:17:14,959 --> 00:17:15,919
reveal

471
00:17:15,919 --> 00:17:18,319
face of the operation uh and we present

472
00:17:18,319 --> 00:17:20,559
this more generic version in our full

473
00:17:20,559 --> 00:17:22,559
version additionally we also look at the

474
00:17:22,559 --> 00:17:24,959
cca extension of this definition which

475
00:17:24,959 --> 00:17:27,280
will allow for decryption queries um and

476
00:17:27,280 --> 00:17:28,640
which is also available in the full

477
00:17:28,640 --> 00:17:31,039
version and there is a stronger security

478
00:17:31,039 --> 00:17:33,520
model where beyond chosen randomness

479
00:17:33,520 --> 00:17:35,919
which we refer to as chosen update a

480
00:17:35,919 --> 00:17:37,679
bridge with cu

481
00:17:37,679 --> 00:17:40,240
and here the adversary provides update

482
00:17:40,240 --> 00:17:42,160
so rather than just providing randomness

483
00:17:42,160 --> 00:17:44,640
ri the adversary provides an update

484
00:17:44,640 --> 00:17:46,960
ciphertext and a public key consistent

485
00:17:46,960 --> 00:17:48,640
with the update what do i mean by

486
00:17:48,640 --> 00:17:50,320
probably are consistent uh publicly or

487
00:17:50,320 --> 00:17:52,160
consistent with the update is that the

488
00:17:52,160 --> 00:17:55,760
new public key and when the receiver is

489
00:17:55,760 --> 00:17:58,400
uh decrypts the update ciphertext to and

490
00:17:58,400 --> 00:18:00,640
then updates its secret key from sk not

491
00:18:00,640 --> 00:18:04,320
to sk1 sk1 and this provided public epk1

492
00:18:04,320 --> 00:18:05,760
are consistent

493
00:18:05,760 --> 00:18:08,880
and this is a stronger model and we

494
00:18:08,880 --> 00:18:11,840
present constructions and uh study this

495
00:18:11,840 --> 00:18:13,600
thing a little more detail in the full

496
00:18:13,600 --> 00:18:15,039
version of the paper which we call as

497
00:18:15,039 --> 00:18:18,640
indcu cpa and its cca counterpart indc

498
00:18:18,640 --> 00:18:20,240
ucca

499
00:18:20,240 --> 00:18:21,039
okay

500
00:18:21,039 --> 00:18:24,640
um so let us look at where upke

501
00:18:24,640 --> 00:18:25,760
stands

502
00:18:25,760 --> 00:18:28,080
uh between public key and forward secure

503
00:18:28,080 --> 00:18:29,919
public encryption and just a quick

504
00:18:29,919 --> 00:18:33,200
comparison in a very zoomed out manner

505
00:18:33,200 --> 00:18:35,600
uh we will compare along three axis the

506
00:18:35,600 --> 00:18:37,600
efficiency uh the assumptions and the

507
00:18:37,600 --> 00:18:40,080
forward security security security it's

508
00:18:40,080 --> 00:18:42,160
very efficient you have a whole bunch of

509
00:18:42,160 --> 00:18:44,960
assumptions dda and cdh factoring lw and

510
00:18:44,960 --> 00:18:46,880
by definition it's clearly not forward

511
00:18:46,880 --> 00:18:49,600
secure uh whereas fspke on the other

512
00:18:49,600 --> 00:18:51,200
hand is inefficient because most

513
00:18:51,200 --> 00:18:52,559
construction all the constructions are

514
00:18:52,559 --> 00:18:54,320
from height now it has more and more

515
00:18:54,320 --> 00:18:55,679
high constructions were built they were

516
00:18:55,679 --> 00:18:58,160
consequently more and more fspke

517
00:18:58,160 --> 00:19:00,240
constructions from a wide swath of

518
00:19:00,240 --> 00:19:01,679
assumptions

519
00:19:01,679 --> 00:19:04,160
and by definition this is forward secure

520
00:19:04,160 --> 00:19:05,360
um

521
00:19:05,360 --> 00:19:07,600
the upk that was proposed by jost and

522
00:19:07,600 --> 00:19:11,280
others is roughly the same uh uh

523
00:19:11,280 --> 00:19:14,559
efficiency uh um as a pke scheme uh we

524
00:19:14,559 --> 00:19:16,080
will look at that construction just a

525
00:19:16,080 --> 00:19:18,880
few slides i've got the very next slide

526
00:19:18,880 --> 00:19:21,679
and the assumption here is that

527
00:19:21,679 --> 00:19:23,200
it requires a little bit of

528
00:19:23,200 --> 00:19:25,360
synchronization as we discussed

529
00:19:25,360 --> 00:19:27,440
and the final piece of the puzzle is

530
00:19:27,440 --> 00:19:28,480
that

531
00:19:28,480 --> 00:19:31,679
it is from the cdh assumption um

532
00:19:31,679 --> 00:19:33,919
and it is in the random oracle model

533
00:19:33,919 --> 00:19:35,840
however this will serve as a very useful

534
00:19:35,840 --> 00:19:38,000
launchpad for our construction and where

535
00:19:38,000 --> 00:19:39,919
we will eventually get to

536
00:19:39,919 --> 00:19:43,440
so this is their construction

537
00:19:43,440 --> 00:19:45,280
uh

538
00:19:45,280 --> 00:19:46,960
so they have a gen algorithm that will

539
00:19:46,960 --> 00:19:48,640
basically um

540
00:19:48,640 --> 00:19:49,760
publicly

541
00:19:49,760 --> 00:19:51,840
secret ks and compute public key as g to

542
00:19:51,840 --> 00:19:55,360
the s encryption is uh uses a randomness

543
00:19:55,360 --> 00:19:57,600
and then hash is the randomness

544
00:19:57,600 --> 00:20:00,880
and decryption is uh basically um

545
00:20:00,880 --> 00:20:02,640
the entire scheme is similar to the

546
00:20:02,640 --> 00:20:04,960
standard hashtag encryption however the

547
00:20:04,960 --> 00:20:06,559
update public key encryption they have

548
00:20:06,559 --> 00:20:09,280
is they use two randomness uh one to

549
00:20:09,280 --> 00:20:11,600
generate randomness r one uh using

550
00:20:11,600 --> 00:20:13,520
randomness r two to generate actually a

551
00:20:13,520 --> 00:20:15,760
ciphertext and then update the public

552
00:20:15,760 --> 00:20:18,159
key h prime corresponding to ah g to the

553
00:20:18,159 --> 00:20:21,919
r one so in essence r1 is the offset

554
00:20:21,919 --> 00:20:23,600
with which you will update the secret

555
00:20:23,600 --> 00:20:25,520
key

556
00:20:25,520 --> 00:20:28,320
and the update secret key is basically

557
00:20:28,320 --> 00:20:31,039
uh decrypting and then updating the

558
00:20:31,039 --> 00:20:34,559
secret key ssk plus r1

559
00:20:34,559 --> 00:20:36,320
now what is the intuition that's

560
00:20:36,320 --> 00:20:38,159
happening here let's just take a very

561
00:20:38,159 --> 00:20:40,880
zoomed out look

562
00:20:41,200 --> 00:20:44,640
update public key is basically this

563
00:20:44,640 --> 00:20:47,039
uh essentially think of it as that is

564
00:20:47,039 --> 00:20:50,799
some secret gig offset r1 which is also

565
00:20:50,799 --> 00:20:52,720
uh which you can use it to update sk

566
00:20:52,720 --> 00:20:54,880
prime as sk plus r1 that's the key idea

567
00:20:54,880 --> 00:20:58,559
here so now somehow uh the update pk

568
00:20:58,559 --> 00:21:00,880
should communicate r1 so that the

569
00:21:00,880 --> 00:21:03,120
adversary or the receiver can decrypt it

570
00:21:03,120 --> 00:21:05,760
to recover the uh offset

571
00:21:05,760 --> 00:21:08,400
so this is what happens and the key idea

572
00:21:08,400 --> 00:21:10,400
here is that it uses this homomorphism

573
00:21:10,400 --> 00:21:12,720
property where uh

574
00:21:12,720 --> 00:21:14,720
h the public key component h is nothing

575
00:21:14,720 --> 00:21:16,400
but g to the s which is a function of f

576
00:21:16,400 --> 00:21:17,360
of s

577
00:21:17,360 --> 00:21:19,280
so that f of

578
00:21:19,280 --> 00:21:20,159
s k

579
00:21:20,159 --> 00:21:22,960
star of f of r 1 is basically p k times

580
00:21:22,960 --> 00:21:24,799
f of r 1 as this

581
00:21:24,799 --> 00:21:27,039
times being the star operation so there

582
00:21:27,039 --> 00:21:29,280
is some kind of homomorphism and for us

583
00:21:29,280 --> 00:21:31,360
it's very simple as p k times g to the

584
00:21:31,360 --> 00:21:32,480
r1

585
00:21:32,480 --> 00:21:35,360
so now why is it secure just a very uh

586
00:21:35,360 --> 00:21:37,919
high level intuition uh is that let's

587
00:21:37,919 --> 00:21:40,000
assume q is equal to zero what

588
00:21:40,000 --> 00:21:42,559
information does the adversary learn

589
00:21:42,559 --> 00:21:45,919
now the adversary uh q is equal to zero

590
00:21:45,919 --> 00:21:47,760
recall means that the adversary has not

591
00:21:47,760 --> 00:21:50,480
provided any randomness so uh it just

592
00:21:50,480 --> 00:21:51,919
quickly goes into the challenge phase

593
00:21:51,919 --> 00:21:53,679
then it has a secret key s and it

594
00:21:53,679 --> 00:21:56,080
receives p k naught as j to the s it

595
00:21:56,080 --> 00:21:59,360
produces uh m not started m1 star and

596
00:21:59,360 --> 00:22:02,159
receives all of these uh public keys uh

597
00:22:02,159 --> 00:22:04,880
p k star the sk star c star and upstart

598
00:22:04,880 --> 00:22:06,799
and then it responds with v prime so let

599
00:22:06,799 --> 00:22:08,400
us take a look at each of these terms so

600
00:22:08,400 --> 00:22:11,280
what is sk star s k star is nothing but

601
00:22:11,280 --> 00:22:14,880
s plus some delta in essence it's a

602
00:22:14,880 --> 00:22:18,000
leakage function of sk uh

603
00:22:18,000 --> 00:22:20,640
that's what the adversary receives and

604
00:22:20,640 --> 00:22:22,640
what is up star actually

605
00:22:22,640 --> 00:22:26,480
upstart is an encryption of delta stuff

606
00:22:26,480 --> 00:22:29,440
essentially here the message

607
00:22:29,440 --> 00:22:32,320
is dependent on the secret key s because

608
00:22:32,320 --> 00:22:35,679
the message is encrypted by with pk not

609
00:22:35,679 --> 00:22:37,840
corresponding with s and the message

610
00:22:37,840 --> 00:22:39,600
itself is nothing but

611
00:22:39,600 --> 00:22:42,080
s k star minus esta s

612
00:22:42,080 --> 00:22:43,360
okay

613
00:22:43,360 --> 00:22:46,480
so what we have is that delta star is

614
00:22:46,480 --> 00:22:48,080
random

615
00:22:48,080 --> 00:22:49,600
and fortunately which means that the

616
00:22:49,600 --> 00:22:51,039
leakage is

617
00:22:51,039 --> 00:22:52,880
trivial

618
00:22:52,880 --> 00:22:55,280
uh there's no leakage you can prove it

619
00:22:55,280 --> 00:22:57,360
and the other on the other hand

620
00:22:57,360 --> 00:22:59,360
the hash function which is modeled as a

621
00:22:59,360 --> 00:23:02,640
random oracle will ensure ktm security

622
00:23:02,640 --> 00:23:04,720
so this will be the intuition that we

623
00:23:04,720 --> 00:23:06,880
will use to launch towards us trends and

624
00:23:06,880 --> 00:23:08,400
model constructions

625
00:23:08,400 --> 00:23:11,440
uh the kdm security will allow

626
00:23:11,440 --> 00:23:13,360
adversary to obtain an encryption of a

627
00:23:13,360 --> 00:23:15,039
function of g of the secret keys under

628
00:23:15,039 --> 00:23:18,320
public under a particular public key

629
00:23:18,320 --> 00:23:20,080
and fortunately

630
00:23:20,080 --> 00:23:21,840
we only need circular security that is

631
00:23:21,840 --> 00:23:24,080
an encryption of the secret key and use

632
00:23:24,080 --> 00:23:26,480
some additional homomorphisms uh when we

633
00:23:26,480 --> 00:23:28,080
go forward towards standard model so

634
00:23:28,080 --> 00:23:30,720
here we have a vector secret key

635
00:23:30,720 --> 00:23:32,240
uh say and

636
00:23:32,240 --> 00:23:33,520
n uh

637
00:23:33,520 --> 00:23:34,880
components law

638
00:23:34,880 --> 00:23:37,039
and we can use both bhh of crypto system

639
00:23:37,039 --> 00:23:38,720
and dual recovery system for this

640
00:23:38,720 --> 00:23:40,559
purpose

641
00:23:40,559 --> 00:23:43,200
and we will now encrypt delta bit by bit

642
00:23:43,200 --> 00:23:44,559
so delta

643
00:23:44,559 --> 00:23:47,279
is a vector is an n bit vector uh with

644
00:23:47,279 --> 00:23:49,679
either zero or one and this seems to be

645
00:23:49,679 --> 00:23:52,159
very inherent and we will see why when

646
00:23:52,159 --> 00:23:54,159
we get to the constructions

647
00:23:54,159 --> 00:23:56,640
and the problem now is that the leakage

648
00:23:56,640 --> 00:23:59,600
ski star is no longer trivial because

649
00:23:59,600 --> 00:24:01,200
i'm taking a component

650
00:24:01,200 --> 00:24:02,880
even if sk1

651
00:24:02,880 --> 00:24:05,520
sk2 and sk3 might be an element in zp

652
00:24:05,520 --> 00:24:07,120
the delta itself is either zero or one

653
00:24:07,120 --> 00:24:08,720
so if you are if you get the output you

654
00:24:08,720 --> 00:24:11,039
can easily recover the input

655
00:24:11,039 --> 00:24:13,919
and uh so what we need is some kind of a

656
00:24:13,919 --> 00:24:16,000
simultaneous circular security and

657
00:24:16,000 --> 00:24:18,159
leakage resilience what is circular

658
00:24:18,159 --> 00:24:20,320
security and leakage resilient security

659
00:24:20,320 --> 00:24:22,559
uh is that given an encryption of the

660
00:24:22,559 --> 00:24:25,200
secret ks and any bounded entropy

661
00:24:25,200 --> 00:24:27,200
leakage on s the scheme is still

662
00:24:27,200 --> 00:24:29,200
semantically secure

663
00:24:29,200 --> 00:24:29,919
okay

664
00:24:29,919 --> 00:24:32,799
so let us now that let us now look at

665
00:24:32,799 --> 00:24:34,960
our contributions and we will look at

666
00:24:34,960 --> 00:24:38,880
the ddh construction uh we will uh refer

667
00:24:38,880 --> 00:24:40,559
you to the full version of the paper for

668
00:24:40,559 --> 00:24:43,919
a more robust security uh uh proof

669
00:24:43,919 --> 00:24:45,840
we will only present a very high level

670
00:24:45,840 --> 00:24:47,760
intuition on what is happening

671
00:24:47,760 --> 00:24:49,440
okay

672
00:24:49,440 --> 00:24:52,880
so this is our contributions

673
00:24:54,080 --> 00:24:56,320
we built two efficient upke schemes in

674
00:24:56,320 --> 00:24:59,840
the standard model the constructions in

675
00:24:59,840 --> 00:25:01,360
the other two papers but in the random

676
00:25:01,360 --> 00:25:03,520
oracle model we have one construction

677
00:25:03,520 --> 00:25:05,039
from the ddh assumption which is based

678
00:25:05,039 --> 00:25:06,960
on the bho construction

679
00:25:06,960 --> 00:25:09,120
construction 2 is from the lwe

680
00:25:09,120 --> 00:25:11,279
assumption which is based on the dual

681
00:25:11,279 --> 00:25:13,440
record cryptosystem

682
00:25:13,440 --> 00:25:15,039
and uh

683
00:25:15,039 --> 00:25:16,960
this is where our uh

684
00:25:16,960 --> 00:25:18,640
efficiency assumptions and forward

685
00:25:18,640 --> 00:25:21,600
security lie well we again have uh the

686
00:25:21,600 --> 00:25:23,279
synchronization which seems to be

687
00:25:23,279 --> 00:25:25,279
inherent to this paradigm

688
00:25:25,279 --> 00:25:26,880
and these are the assumptions we have

689
00:25:26,880 --> 00:25:29,360
cds ddh and lwe

690
00:25:29,360 --> 00:25:30,320
and

691
00:25:30,320 --> 00:25:31,200
uh

692
00:25:31,200 --> 00:25:34,640
we inherit a security parameter loss

693
00:25:34,640 --> 00:25:36,720
in efficiency though but it still seems

694
00:25:36,720 --> 00:25:38,960
to be better than uh fspk constructions

695
00:25:38,960 --> 00:25:42,159
from similar assumptions

696
00:25:42,159 --> 00:25:43,919
one key thing to note is that we have

697
00:25:43,919 --> 00:25:46,400
identified a similar blueprint even

698
00:25:46,400 --> 00:25:48,400
though we haven't uh we don't have a

699
00:25:48,400 --> 00:25:50,559
generic construction yet uh and that

700
00:25:50,559 --> 00:25:52,400
seems to be inherent limitations in

701
00:25:52,400 --> 00:25:53,520
trying to come up with a generic

702
00:25:53,520 --> 00:25:55,360
construction because of the way each

703
00:25:55,360 --> 00:25:58,480
construction treats what's uh the how uh

704
00:25:58,480 --> 00:26:00,320
the update happens and the assumptions

705
00:26:00,320 --> 00:26:03,200
uh are for the homomorphism that we need

706
00:26:03,200 --> 00:26:05,279
okay so let us take a look at the ddh

707
00:26:05,279 --> 00:26:07,520
construction very quickly so this is a

708
00:26:07,520 --> 00:26:10,400
quick refresher on the radius assumption

709
00:26:10,400 --> 00:26:12,080
uh and we will

710
00:26:12,080 --> 00:26:13,840
go quickly into the bh as your crypto

711
00:26:13,840 --> 00:26:15,600
system

712
00:26:15,600 --> 00:26:17,440
uh the idea here is that this is just a

713
00:26:17,440 --> 00:26:20,000
variant of the original cryptosystem the

714
00:26:20,000 --> 00:26:22,000
idea here is that the secret key is

715
00:26:22,000 --> 00:26:24,000
albeit string along with it there is

716
00:26:24,000 --> 00:26:26,080
also a g1 through gl which is a public

717
00:26:26,080 --> 00:26:27,520
key uh uh

718
00:26:27,520 --> 00:26:28,720
competence

719
00:26:28,720 --> 00:26:30,559
and this uh there is another public key

720
00:26:30,559 --> 00:26:33,200
component uh computed as a product of gi

721
00:26:33,200 --> 00:26:35,120
to the si where si is just a bit to

722
00:26:35,120 --> 00:26:36,400
begin with

723
00:26:36,400 --> 00:26:39,360
and uh the public key uh secret key are

724
00:26:39,360 --> 00:26:41,520
returned

725
00:26:41,520 --> 00:26:44,960
inc uh will just choose a randomness r

726
00:26:44,960 --> 00:26:47,760
and we'll compute each component as g i

727
00:26:47,760 --> 00:26:49,200
to the r

728
00:26:49,200 --> 00:26:51,120
and then finally compute c is equal to h

729
00:26:51,120 --> 00:26:54,000
to the r times m

730
00:26:54,000 --> 00:26:56,320
and then return these l plus uh this l

731
00:26:56,320 --> 00:26:58,960
plus one uh group element

732
00:26:58,960 --> 00:27:01,360
and therefore the secret key uh

733
00:27:01,360 --> 00:27:04,480
it will simply decrypt it as c times the

734
00:27:04,480 --> 00:27:08,480
inverse of each fy to the si

735
00:27:08,480 --> 00:27:10,400
and it will return m

736
00:27:10,400 --> 00:27:12,240
and these are g is basically a fixed

737
00:27:12,240 --> 00:27:14,720
generator of a cyclic group g with

738
00:27:14,720 --> 00:27:16,640
primordial p to be precise it's g one

739
00:27:16,640 --> 00:27:18,720
through g l

740
00:27:18,720 --> 00:27:19,600
so

741
00:27:19,600 --> 00:27:22,640
what is our ddh construction actually

742
00:27:22,640 --> 00:27:25,919
our ddh construction is as follows

743
00:27:25,919 --> 00:27:27,360
as before

744
00:27:27,360 --> 00:27:29,919
we will just sample l

745
00:27:29,919 --> 00:27:32,480
offsets as indicated before so delta is

746
00:27:32,480 --> 00:27:34,960
basically a bit string and then i will

747
00:27:34,960 --> 00:27:38,240
compute the new public key offset as gi

748
00:27:38,240 --> 00:27:40,320
to the delta i

749
00:27:40,320 --> 00:27:44,320
and new public key as h times h prime

750
00:27:44,320 --> 00:27:46,840
which is computed here

751
00:27:46,840 --> 00:27:50,720
and we will also uh encrypt each delta

752
00:27:50,720 --> 00:27:54,000
bit by bit but in the uh in the um

753
00:27:54,000 --> 00:27:55,200
exponent

754
00:27:55,200 --> 00:27:57,120
which is important for the key dependent

755
00:27:57,120 --> 00:27:58,960
message security

756
00:27:58,960 --> 00:28:01,360
and we will return pk prime and update

757
00:28:01,360 --> 00:28:02,960
ciphertext

758
00:28:02,960 --> 00:28:05,200
now the update secret key will be in a

759
00:28:05,200 --> 00:28:07,840
position to

760
00:28:07,840 --> 00:28:09,120
decrypt

761
00:28:09,120 --> 00:28:12,000
each dial guy

762
00:28:12,080 --> 00:28:13,520
and that's one of the beauty that's why

763
00:28:13,520 --> 00:28:14,720
we need

764
00:28:14,720 --> 00:28:18,000
delta to be a bit string to make this

765
00:28:18,000 --> 00:28:20,320
decryption this discrete log possible

766
00:28:20,320 --> 00:28:22,320
and then we'll update our secret ks

767
00:28:22,320 --> 00:28:24,799
prime as s plus delta where it's an

768
00:28:24,799 --> 00:28:27,279
addition element by element over z p and

769
00:28:27,279 --> 00:28:29,120
will return s prime

770
00:28:29,120 --> 00:28:31,120
okay so what has happened is that even

771
00:28:31,120 --> 00:28:33,679
though we started off with uh uh a bit

772
00:28:33,679 --> 00:28:35,200
string

773
00:28:35,200 --> 00:28:35,919
the

774
00:28:35,919 --> 00:28:37,919
this uh the resulting secret key that

775
00:28:37,919 --> 00:28:40,880
evolves basically grows slowly over zp

776
00:28:40,880 --> 00:28:43,039
and this is just a quick example on how

777
00:28:43,039 --> 00:28:44,799
it grows

778
00:28:44,799 --> 00:28:45,840
um

779
00:28:45,840 --> 00:28:48,799
so this is our ddh construction

780
00:28:48,799 --> 00:28:51,520
uh let us quickly uh move on to

781
00:28:51,520 --> 00:28:53,520
discussing uh the outline of the

782
00:28:53,520 --> 00:28:56,880
security proof uh due to lack of time i

783
00:28:56,880 --> 00:28:59,440
will only look at uh introduce the cs

784
00:28:59,440 --> 00:29:01,279
plus lr security game

785
00:29:01,279 --> 00:29:04,799
and then discuss how we reduce the upk

786
00:29:04,799 --> 00:29:07,440
security to cs plus a large security and

787
00:29:07,440 --> 00:29:09,039
introduce the various assumptions that

788
00:29:09,039 --> 00:29:10,880
we have along the way such as mortgages

789
00:29:10,880 --> 00:29:12,399
that we need

790
00:29:12,399 --> 00:29:14,640
so this is the cs plus a large security

791
00:29:14,640 --> 00:29:16,720
as before we have an adversary we have a

792
00:29:16,720 --> 00:29:18,720
challenger we have an adversary we have

793
00:29:18,720 --> 00:29:21,120
challenger generates pk and sk

794
00:29:21,120 --> 00:29:23,600
and the adversary uh receives pk from

795
00:29:23,600 --> 00:29:25,039
the challenger

796
00:29:25,039 --> 00:29:28,880
and in response the adversary provides l

797
00:29:28,880 --> 00:29:32,480
m not an m one your l is a a leakage

798
00:29:32,480 --> 00:29:34,080
function which can possibly even be

799
00:29:34,080 --> 00:29:35,360
randomized

800
00:29:35,360 --> 00:29:36,799
uh and then the adversary or the

801
00:29:36,799 --> 00:29:39,520
challenger will choose uh random bit b

802
00:29:39,520 --> 00:29:42,159
we'll encrypt it as before and we'll

803
00:29:42,159 --> 00:29:44,880
also encrypt the secret key under the

804
00:29:44,880 --> 00:29:46,880
public key though in our case we will

805
00:29:46,880 --> 00:29:49,039
have it bit by bit encryption but that's

806
00:29:49,039 --> 00:29:51,520
just a side subtlety here

807
00:29:51,520 --> 00:29:54,000
and then it will respond with c0 c1 and

808
00:29:54,000 --> 00:29:56,640
log sk and the adversary now has to get

809
00:29:56,640 --> 00:29:59,039
right and the similar advantage as

810
00:29:59,039 --> 00:30:01,039
defined before

811
00:30:01,039 --> 00:30:02,640
so in essence what does the adversary

812
00:30:02,640 --> 00:30:05,120
get the adversary gets an encryption of

813
00:30:05,120 --> 00:30:06,840
the challenge message

814
00:30:06,840 --> 00:30:09,919
and uh an encryption of um

815
00:30:09,919 --> 00:30:12,399
uh and an encryption of the secret key

816
00:30:12,399 --> 00:30:15,039
itself um

817
00:30:15,039 --> 00:30:15,840
so

818
00:30:15,840 --> 00:30:18,080
and this is as i mentioned l can even be

819
00:30:18,080 --> 00:30:20,320
probabilistic so we only need that that

820
00:30:20,320 --> 00:30:23,360
is uh there is at most lambda bit loss

821
00:30:23,360 --> 00:30:24,640
in uh

822
00:30:24,640 --> 00:30:27,360
entropy uh when uh when you condition

823
00:30:27,360 --> 00:30:30,399
the secret key on the leakage function

824
00:30:30,399 --> 00:30:32,960
so now we will reduce the upk security

825
00:30:32,960 --> 00:30:35,840
to the cs plus lr

826
00:30:35,840 --> 00:30:37,600
so this is how it proceeds so we will

827
00:30:37,600 --> 00:30:40,880
have cs plus lr implies upke so we'll

828
00:30:40,880 --> 00:30:43,919
have the challenger we'll have the uh

829
00:30:43,919 --> 00:30:46,320
the purplish uh adversary which plays

830
00:30:46,320 --> 00:30:47,840
playing the upk game and the red

831
00:30:47,840 --> 00:30:51,039
adversity playing the singers

832
00:30:51,760 --> 00:30:54,000
the challenger will produce the publicly

833
00:30:54,000 --> 00:30:57,919
security pair and send pknot to the red

834
00:30:57,919 --> 00:30:59,600
adversary which forwards it to the

835
00:30:59,600 --> 00:31:01,279
purple adversary

836
00:31:01,279 --> 00:31:03,519
now in return the purple adversary will

837
00:31:03,519 --> 00:31:05,440
provide delta one and not start and

838
00:31:05,440 --> 00:31:07,360
remove stuck i should mention here that

839
00:31:07,360 --> 00:31:09,360
here i'm assuming that q is equal to one

840
00:31:09,360 --> 00:31:11,679
just to just uh capture the essence of

841
00:31:11,679 --> 00:31:14,480
the game uh even um you can refer the

842
00:31:14,480 --> 00:31:17,200
paper for the full version of the proof

843
00:31:17,200 --> 00:31:19,919
so now what the adversity of playing the

844
00:31:19,919 --> 00:31:21,760
cs plus large game does the red

845
00:31:21,760 --> 00:31:24,000
anniversary is that it has to choose a

846
00:31:24,000 --> 00:31:25,440
leakage function

847
00:31:25,440 --> 00:31:26,559
and the leakage function is a

848
00:31:26,559 --> 00:31:28,320
deterministic it's a probabilistic

849
00:31:28,320 --> 00:31:31,120
leakage function where it

850
00:31:31,120 --> 00:31:34,159
you choose uh it asks the um

851
00:31:34,159 --> 00:31:37,120
the challenger to choose a delta of its

852
00:31:37,120 --> 00:31:39,120
choice delta star to be precise and then

853
00:31:39,120 --> 00:31:41,440
do x plus delta star where x is your the

854
00:31:41,440 --> 00:31:44,240
secret key and you're recall that it's l

855
00:31:44,240 --> 00:31:45,519
bits long

856
00:31:45,519 --> 00:31:47,279
so your what i'm doing is that i'm

857
00:31:47,279 --> 00:31:49,679
implicitly sending our setting delta

858
00:31:49,679 --> 00:31:51,200
star as a randomness for the secured

859
00:31:51,200 --> 00:31:53,760
update so the r star that we saw in the

860
00:31:53,760 --> 00:31:55,919
um upke security game is what i'm

861
00:31:55,919 --> 00:31:58,000
calling delta stand here

862
00:31:58,000 --> 00:32:01,360
and now uh the red adversary will send l

863
00:32:01,360 --> 00:32:04,000
and not start an m1 star and in response

864
00:32:04,000 --> 00:32:06,159
this is what the red adversary receives

865
00:32:06,159 --> 00:32:09,279
it receives a secret key i love escape

866
00:32:09,279 --> 00:32:12,240
uh the the leakage on secret key is k

867
00:32:12,240 --> 00:32:13,440
which is

868
00:32:13,440 --> 00:32:15,039
some uh

869
00:32:15,039 --> 00:32:15,919
l

870
00:32:15,919 --> 00:32:18,640
uh l uh length well vector

871
00:32:18,640 --> 00:32:20,720
sorry a vector of length l which is

872
00:32:20,720 --> 00:32:22,399
defined as s naught plus delta star

873
00:32:22,399 --> 00:32:24,480
whereas s naught was the original secret

874
00:32:24,480 --> 00:32:26,159
key which is l bits delta star is

875
00:32:26,159 --> 00:32:28,720
another l bits and then it does this bit

876
00:32:28,720 --> 00:32:30,080
by bit edition

877
00:32:30,080 --> 00:32:32,799
it also receives the c naught uh which

878
00:32:32,799 --> 00:32:34,320
is an encryption of one of the challenge

879
00:32:34,320 --> 00:32:36,399
messages and uh m not start at m one

880
00:32:36,399 --> 00:32:39,279
star and also receives the secret key

881
00:32:39,279 --> 00:32:41,200
uh or an encryption of the cpt to be

882
00:32:41,200 --> 00:32:44,480
precise and we will call this as n prime

883
00:32:44,480 --> 00:32:46,880
because what n prime is that it's

884
00:32:46,880 --> 00:32:49,919
basically a bit by bit encryption of s

885
00:32:49,919 --> 00:32:51,519
naught in the exponent

886
00:32:51,519 --> 00:32:53,360
okay

887
00:32:53,360 --> 00:32:55,360
and uh

888
00:32:55,360 --> 00:32:57,200
so this is what the red adversary has

889
00:32:57,200 --> 00:32:59,519
and we will now look at what

890
00:32:59,519 --> 00:33:01,279
the purple adversary needs and how the

891
00:33:01,279 --> 00:33:03,200
redwood bursary is in a position to

892
00:33:03,200 --> 00:33:06,320
generate it for the purple adversity

893
00:33:06,320 --> 00:33:08,640
so it needs

894
00:33:08,640 --> 00:33:11,440
s star is equal to s naught plus delta 1

895
00:33:11,440 --> 00:33:13,360
plus delta star which is the new secret

896
00:33:13,360 --> 00:33:15,600
key which is corresponding to the uh

897
00:33:15,600 --> 00:33:17,760
fresh randomness delta star so

898
00:33:17,760 --> 00:33:19,039
fortunately

899
00:33:19,039 --> 00:33:19,679
the

900
00:33:19,679 --> 00:33:21,840
the red adversary already has

901
00:33:21,840 --> 00:33:24,720
z which is s naught plus delta star so

902
00:33:24,720 --> 00:33:26,159
and

903
00:33:26,159 --> 00:33:28,559
the red adversary knows delta 1 because

904
00:33:28,559 --> 00:33:30,399
it receives delta 1 from the purple

905
00:33:30,399 --> 00:33:34,159
adversity so it simply does an addition

906
00:33:34,159 --> 00:33:36,159
so we have a checkpin

907
00:33:36,159 --> 00:33:36,840
so

908
00:33:36,840 --> 00:33:40,960
now the uh now the red adversary has an

909
00:33:40,960 --> 00:33:42,960
encryption of the message challenge

910
00:33:42,960 --> 00:33:44,480
message m b

911
00:33:44,480 --> 00:33:47,919
subject to a public key p k naught

912
00:33:47,919 --> 00:33:48,720
okay

913
00:33:48,720 --> 00:33:50,320
and this p k naught corresponds to a

914
00:33:50,320 --> 00:33:51,840
secret k not

915
00:33:51,840 --> 00:33:52,880
however

916
00:33:52,880 --> 00:33:54,960
what the adversary

917
00:33:54,960 --> 00:33:57,200
purple adversary needs is an encryption

918
00:33:57,200 --> 00:33:59,519
of mb corresponding to the key s1 and

919
00:33:59,519 --> 00:34:03,519
pk1 so what we have is a key mismatch

920
00:34:03,519 --> 00:34:06,640
so we need key homomorphism okay

921
00:34:06,640 --> 00:34:09,440
so this is uh what key homomorphism is

922
00:34:09,440 --> 00:34:11,440
basically given a cipher text and a

923
00:34:11,440 --> 00:34:13,280
public key pair corresponding to a

924
00:34:13,280 --> 00:34:14,960
secret key s

925
00:34:14,960 --> 00:34:17,520
uh it will choose a delta and it's in a

926
00:34:17,520 --> 00:34:19,520
position to generate a public key secret

927
00:34:19,520 --> 00:34:22,639
key pair corresponding to the secret key

928
00:34:22,639 --> 00:34:24,000
a public key cipher takes pair

929
00:34:24,000 --> 00:34:25,918
corresponding to the

930
00:34:25,918 --> 00:34:28,879
secret key s plus delta

931
00:34:28,879 --> 00:34:31,119
okay

932
00:34:31,119 --> 00:34:34,000
so let us look at the construction of

933
00:34:34,000 --> 00:34:36,320
chiomomorphism theomorphism is this

934
00:34:36,320 --> 00:34:37,520
perimeter

935
00:34:37,520 --> 00:34:39,760
is this function definition and this is

936
00:34:39,760 --> 00:34:42,560
what we have we parse pk as the l plus

937
00:34:42,560 --> 00:34:44,399
one vector

938
00:34:44,399 --> 00:34:46,320
and then power c t also has the l plus

939
00:34:46,320 --> 00:34:49,040
one group element and it will compute h

940
00:34:49,040 --> 00:34:51,520
prime as h times g i to the delta i

941
00:34:51,520 --> 00:34:53,280
similar to what you saw in the update

942
00:34:53,280 --> 00:34:55,280
public key algorithm

943
00:34:55,280 --> 00:34:56,719
and compute

944
00:34:56,719 --> 00:34:58,480
c prime

945
00:34:58,480 --> 00:34:59,440
also

946
00:34:59,440 --> 00:35:02,000
by updating this offset alone and

947
00:35:02,000 --> 00:35:05,040
therefore will set

948
00:35:06,400 --> 00:35:08,640
pk prime and cd prime as follows and

949
00:35:08,640 --> 00:35:11,359
then communicates uh pk prime and ct

950
00:35:11,359 --> 00:35:14,079
prime as a return value

951
00:35:14,079 --> 00:35:17,040
so what the red adversary will do is it

952
00:35:17,040 --> 00:35:18,800
will simply

953
00:35:18,800 --> 00:35:21,119
compute key homomorphism on p k naught

954
00:35:21,119 --> 00:35:23,599
and c naught and it knows s delta 1 and

955
00:35:23,599 --> 00:35:25,599
it provides that as the offset therefore

956
00:35:25,599 --> 00:35:27,359
you will get c naught prime which is

957
00:35:27,359 --> 00:35:29,200
also correct

958
00:35:29,200 --> 00:35:30,960
so now let us look at the final one of

959
00:35:30,960 --> 00:35:33,599
the final components which is c1

960
00:35:33,599 --> 00:35:36,079
which is bit by bit encryption as

961
00:35:36,079 --> 00:35:37,839
denoted here

962
00:35:37,839 --> 00:35:41,040
uh here however what the adversary uh

963
00:35:41,040 --> 00:35:44,079
playing the upk game needs is uh each

964
00:35:44,079 --> 00:35:47,440
bit by bit of delta star so d1 through

965
00:35:47,440 --> 00:35:50,720
dl is the offset that is used um

966
00:35:50,720 --> 00:35:52,960
corresponding to the l bits in delta

967
00:35:52,960 --> 00:35:54,240
star

968
00:35:54,240 --> 00:35:56,560
so here we not only have a public key

969
00:35:56,560 --> 00:35:58,720
mismatch uh the key are we also have a

970
00:35:58,720 --> 00:36:00,560
message mismatch so you need message on

971
00:36:00,560 --> 00:36:03,200
the what we said in addition to key now

972
00:36:03,200 --> 00:36:05,200
so message homomorphism is this given a

973
00:36:05,200 --> 00:36:07,520
cipher text that encrypts g to the x

974
00:36:07,520 --> 00:36:09,520
you and given x point you want to be in

975
00:36:09,520 --> 00:36:12,880
a position to generate a cipher text

976
00:36:12,880 --> 00:36:15,040
that will now end up g to the x prime

977
00:36:15,040 --> 00:36:16,480
minus x

978
00:36:16,480 --> 00:36:18,800
and this is the construction

979
00:36:18,800 --> 00:36:20,320
um

980
00:36:20,320 --> 00:36:22,400
and uh we will not go into the details

981
00:36:22,400 --> 00:36:24,480
you can verify the details due to

982
00:36:24,480 --> 00:36:26,880
positive time however

983
00:36:26,880 --> 00:36:28,480
we have this construction of mesodermal

984
00:36:28,480 --> 00:36:29,599
morbidism

985
00:36:29,599 --> 00:36:30,880
so now

986
00:36:30,880 --> 00:36:33,520
what the adversary will do is

987
00:36:33,520 --> 00:36:36,160
use first the key homomorphism to update

988
00:36:36,160 --> 00:36:38,079
it to the correct key and then use

989
00:36:38,079 --> 00:36:40,320
message morphism to generate each and

990
00:36:40,320 --> 00:36:42,960
every component that is needed by the

991
00:36:42,960 --> 00:36:44,960
purple adversary

992
00:36:44,960 --> 00:36:46,720
and the final component that the purple

993
00:36:46,720 --> 00:36:48,640
adversary needs

994
00:36:48,640 --> 00:36:51,359
is pk star which is easy to generate

995
00:36:51,359 --> 00:36:53,280
from just a star

996
00:36:53,280 --> 00:36:55,680
and therefore it simulates that also

997
00:36:55,680 --> 00:36:56,720
perfectly

998
00:36:56,720 --> 00:36:58,800
and now the turbo adversary will respond

999
00:36:58,800 --> 00:37:00,640
to b prime and then inverse which is

1000
00:37:00,640 --> 00:37:02,880
forwards that yes this is the simple

1001
00:37:02,880 --> 00:37:04,560
reduction that we have

1002
00:37:04,560 --> 00:37:05,920
um

1003
00:37:05,920 --> 00:37:09,240
and um

1004
00:37:12,720 --> 00:37:14,560
so so far what we have seen is that we

1005
00:37:14,560 --> 00:37:17,680
have seen uh how to reduce upke security

1006
00:37:17,680 --> 00:37:19,920
to cs plus allah security so the missing

1007
00:37:19,920 --> 00:37:22,320
part of the puzzle is to prove that our

1008
00:37:22,320 --> 00:37:25,040
scheme is actually cs slr secure uh

1009
00:37:25,040 --> 00:37:26,560
which we will

1010
00:37:26,560 --> 00:37:27,839
invite you to look at the full version

1011
00:37:27,839 --> 00:37:29,680
of the paper it's available online where

1012
00:37:29,680 --> 00:37:32,160
we go into the details of the proof

1013
00:37:32,160 --> 00:37:35,200
and summarize the the hybrid arguments

1014
00:37:35,200 --> 00:37:37,680
uh to prove it to be secure

1015
00:37:37,680 --> 00:37:41,119
so with that said we will uh move on to

1016
00:37:41,119 --> 00:37:42,480
the conclusion

1017
00:37:42,480 --> 00:37:43,520
um

1018
00:37:43,520 --> 00:37:45,599
we do not have time to go over the lwe

1019
00:37:45,599 --> 00:37:48,079
construction however

1020
00:37:48,079 --> 00:37:50,160
we will uh invite you to again refer to

1021
00:37:50,160 --> 00:37:52,320
the full version of the paper

1022
00:37:52,320 --> 00:37:54,720
so what have we done this talk in this

1023
00:37:54,720 --> 00:37:55,599
paper

1024
00:37:55,599 --> 00:37:57,760
we presented an updatable public

1025
00:37:57,760 --> 00:38:00,160
encryption uh definition and security

1026
00:38:00,160 --> 00:38:01,040
model

1027
00:38:01,040 --> 00:38:02,960
in our paper we presented two upk

1028
00:38:02,960 --> 00:38:04,320
constructions in standard model one from

1029
00:38:04,320 --> 00:38:06,560
the dds assumption and one from the lwe

1030
00:38:06,560 --> 00:38:08,160
association which is believed to be post

1031
00:38:08,160 --> 00:38:09,680
quantum secure

1032
00:38:09,680 --> 00:38:11,920
uh we also showed that two constructions

1033
00:38:11,920 --> 00:38:13,599
were simultaneously circular secure and

1034
00:38:13,599 --> 00:38:15,280
leakage resilient

1035
00:38:15,280 --> 00:38:17,680
and we presented a possible abstraction

1036
00:38:17,680 --> 00:38:20,160
and going from pke to upke where we said

1037
00:38:20,160 --> 00:38:23,440
a pke will need cs plus lr security some

1038
00:38:23,440 --> 00:38:25,040
kind of chemomorphism and some kind of

1039
00:38:25,040 --> 00:38:26,880
message from morrison

1040
00:38:26,880 --> 00:38:29,200
and um

1041
00:38:29,200 --> 00:38:30,640
and that's the question if we can come

1042
00:38:30,640 --> 00:38:32,880
up with a more genetic uh construction

1043
00:38:32,880 --> 00:38:34,880
that goes from any pk that has these

1044
00:38:34,880 --> 00:38:36,720
properties to upk

1045
00:38:36,720 --> 00:38:38,640
and that's all i have time for you

1046
00:38:38,640 --> 00:38:39,680
um

1047
00:38:39,680 --> 00:38:41,119
and i would rather that's all i have

1048
00:38:41,119 --> 00:38:42,960
time for thank you so much for taking

1049
00:38:42,960 --> 00:38:45,440
the time to again uh see the full

1050
00:38:45,440 --> 00:38:47,119
version of the video

1051
00:38:47,119 --> 00:38:49,680
i will take questions during the talk

1052
00:38:49,680 --> 00:38:52,919
thank you

