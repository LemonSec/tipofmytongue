1
00:00:02,240 --> 00:00:04,799
so hello everyone and welcome to this

2
00:00:04,799 --> 00:00:07,200
presentation

3
00:00:07,200 --> 00:00:09,679
today i'm going to talk about the work

4
00:00:09,679 --> 00:00:11,599
adaptive security of multiparty

5
00:00:11,599 --> 00:00:14,160
protocols revisited

6
00:00:14,160 --> 00:00:16,480
and this is trained work with martin

7
00:00:16,480 --> 00:00:20,000
hurt and wally motor

8
00:00:20,240 --> 00:00:21,840
so in the problem of multi-party

9
00:00:21,840 --> 00:00:24,480
computation there is a set of parties

10
00:00:24,480 --> 00:00:26,960
who would like to jointly perform a

11
00:00:26,960 --> 00:00:28,800
computation

12
00:00:28,800 --> 00:00:30,960
and one can think about this as the part

13
00:00:30,960 --> 00:00:33,760
is having or sitting in front of their

14
00:00:33,760 --> 00:00:35,760
own computing device

15
00:00:35,760 --> 00:00:39,040
which can be a laptop a mobile phone

16
00:00:39,040 --> 00:00:40,000
um

17
00:00:40,000 --> 00:00:42,160
whatever device they have and the

18
00:00:42,160 --> 00:00:43,600
devices

19
00:00:43,600 --> 00:00:46,480
connected to some communication network

20
00:00:46,480 --> 00:00:50,559
which for example can be the internet

21
00:00:50,640 --> 00:00:52,559
then each party can give inputs and

22
00:00:52,559 --> 00:00:55,520
obtain outputs from their respective

23
00:00:55,520 --> 00:00:56,879
devices

24
00:00:56,879 --> 00:00:59,920
and the goal of the protocol is to

25
00:00:59,920 --> 00:01:02,640
construct an ideal computer that

26
00:01:02,640 --> 00:01:05,438
performs some computation

27
00:01:05,438 --> 00:01:07,600
and that is completely resilient and

28
00:01:07,600 --> 00:01:09,200
trustworthy

29
00:01:09,200 --> 00:01:11,920
even when some of the devices can be

30
00:01:11,920 --> 00:01:14,320
hacked

31
00:01:15,360 --> 00:01:16,960
and usually those parties whose

32
00:01:16,960 --> 00:01:20,400
computers were not hacked are typically

33
00:01:20,400 --> 00:01:23,200
referred to as honest parties

34
00:01:23,200 --> 00:01:25,119
while those that had their computer

35
00:01:25,119 --> 00:01:27,280
hacked are referred to as corrupted

36
00:01:27,280 --> 00:01:29,759
parties

37
00:01:30,479 --> 00:01:32,720
and typically it doesn't need to be like

38
00:01:32,720 --> 00:01:34,720
that but typically we care about

39
00:01:34,720 --> 00:01:36,240
guarantees

40
00:01:36,240 --> 00:01:38,560
for the honest parties those that didn't

41
00:01:38,560 --> 00:01:41,600
have their computer

42
00:01:41,600 --> 00:01:43,600
we would like that

43
00:01:43,600 --> 00:01:46,399
the honest parties obtain the correct

44
00:01:46,399 --> 00:01:47,759
computation

45
00:01:47,759 --> 00:01:49,840
the correct output of the computation

46
00:01:49,840 --> 00:01:52,399
and moreover we usually

47
00:01:52,399 --> 00:01:54,479
also want that their inputs to the

48
00:01:54,479 --> 00:01:56,799
computation remain as private as

49
00:01:56,799 --> 00:01:59,360
possible

50
00:02:00,240 --> 00:02:02,399
so in this work we consider the setting

51
00:02:02,399 --> 00:02:03,119
of

52
00:02:03,119 --> 00:02:06,240
adaptive corruption

53
00:02:06,320 --> 00:02:08,399
this is a very challenging setting where

54
00:02:08,399 --> 00:02:10,800
the party's computers

55
00:02:10,800 --> 00:02:13,440
can be hacked or corrupted during the

56
00:02:13,440 --> 00:02:16,720
execution of the protocol

57
00:02:16,720 --> 00:02:18,720
and not only that

58
00:02:18,720 --> 00:02:20,959
the corruption can be based on any

59
00:02:20,959 --> 00:02:23,760
information gathered so far

60
00:02:23,760 --> 00:02:26,080
this can be the information

61
00:02:26,080 --> 00:02:28,480
that adversary

62
00:02:28,480 --> 00:02:30,319
bought from the network

63
00:02:30,319 --> 00:02:32,560
or information that is leaked from an

64
00:02:32,560 --> 00:02:34,840
internal state of a

65
00:02:34,840 --> 00:02:36,640
computer

66
00:02:36,640 --> 00:02:39,360
the question is what can we guarantee in

67
00:02:39,360 --> 00:02:42,640
this challenging setting

68
00:02:43,920 --> 00:02:45,840
and very intuitively the security

69
00:02:45,840 --> 00:02:48,000
guarantee depends

70
00:02:48,000 --> 00:02:51,200
on the set of parties that are corrupted

71
00:02:51,200 --> 00:02:53,360
so the more parties are corrupted the

72
00:02:53,360 --> 00:02:56,400
less is guaranteed

73
00:02:56,400 --> 00:02:58,560
and typically all guarantees are lost

74
00:02:58,560 --> 00:03:01,200
when the number of corruptions exceed a

75
00:03:01,200 --> 00:03:04,480
certain pump

76
00:03:04,480 --> 00:03:06,319
um

77
00:03:06,319 --> 00:03:08,959
let us first review what the current

78
00:03:08,959 --> 00:03:10,720
standard notion

79
00:03:10,720 --> 00:03:12,800
of adaptive security is

80
00:03:12,800 --> 00:03:15,440
i'm gonna

81
00:03:15,920 --> 00:03:18,640
represent the computers that execute the

82
00:03:18,640 --> 00:03:21,599
protocol with round objects

83
00:03:21,599 --> 00:03:25,599
and the network has an square object

84
00:03:25,599 --> 00:03:28,560
um and in the standard notion one first

85
00:03:28,560 --> 00:03:31,120
specifies an ideal system

86
00:03:31,120 --> 00:03:34,319
i call the system mpc

87
00:03:34,319 --> 00:03:36,400
which for concreteness we can think that

88
00:03:36,400 --> 00:03:38,560
it simply computes a function right so

89
00:03:38,560 --> 00:03:42,000
it gets an input at each interface

90
00:03:42,000 --> 00:03:43,760
and then computes a function over these

91
00:03:43,760 --> 00:03:46,799
inputs and gives back an output

92
00:03:46,799 --> 00:03:49,280
at each interface

93
00:03:49,280 --> 00:03:51,040
so we would like to construct such an

94
00:03:51,040 --> 00:03:52,640
ideal system

95
00:03:52,640 --> 00:03:55,200
but in fact it is easy to see that we

96
00:03:55,200 --> 00:03:59,519
don't quite get this ideal system npc

97
00:03:59,519 --> 00:04:02,000
because in the left the adversary kind

98
00:04:02,000 --> 00:04:03,760
of learns

99
00:04:03,760 --> 00:04:06,480
some information he learns some internal

100
00:04:06,480 --> 00:04:08,799
states of the parties when corrupting

101
00:04:08,799 --> 00:04:11,120
them maybe he learns something from the

102
00:04:11,120 --> 00:04:12,959
network

103
00:04:12,959 --> 00:04:15,920
and in the right the system

104
00:04:15,920 --> 00:04:17,918
doesn't have there is no network nor

105
00:04:17,918 --> 00:04:21,680
internal states of computers

106
00:04:21,680 --> 00:04:24,400
what we get is an ideal system that also

107
00:04:24,400 --> 00:04:26,880
involves

108
00:04:27,040 --> 00:04:29,280
a system sigma which is usually called

109
00:04:29,280 --> 00:04:30,639
simulator

110
00:04:30,639 --> 00:04:32,400
and the simulator is in charge of

111
00:04:32,400 --> 00:04:35,120
reproducing any information or any

112
00:04:35,120 --> 00:04:36,800
interaction

113
00:04:36,800 --> 00:04:39,520
with that person

114
00:04:40,400 --> 00:04:43,040
so the the the simulator will reproduce

115
00:04:43,040 --> 00:04:45,600
any adversarial information

116
00:04:45,600 --> 00:04:47,120
while having

117
00:04:47,120 --> 00:04:48,880
uh only

118
00:04:48,880 --> 00:04:52,800
access to the data inputs and outputs

119
00:04:52,800 --> 00:04:55,360
of corrupted parties

120
00:04:55,360 --> 00:04:58,479
at that point in time so for example

121
00:04:58,479 --> 00:05:01,919
if parties 3 and 4 are corrupted

122
00:05:01,919 --> 00:05:04,639
the simulator must reproduce whatever

123
00:05:04,639 --> 00:05:06,479
the adversary learns

124
00:05:06,479 --> 00:05:08,560
from the information that has

125
00:05:08,560 --> 00:05:10,479
been leaked in the wires of these

126
00:05:10,479 --> 00:05:12,479
corrupted parties for example their

127
00:05:12,479 --> 00:05:14,160
inputs

128
00:05:14,160 --> 00:05:18,720
and maybe their outputs if they got any

129
00:05:18,720 --> 00:05:20,639
therefore the honest parties benefit

130
00:05:20,639 --> 00:05:23,440
from the security guarantees because any

131
00:05:23,440 --> 00:05:25,039
information

132
00:05:25,039 --> 00:05:27,120
leaked to the adversary

133
00:05:27,120 --> 00:05:30,080
can be deduced solely from the data of

134
00:05:30,080 --> 00:05:33,039
corrupted parties

135
00:05:33,039 --> 00:05:36,720
let's go into it in a bit more detail

136
00:05:36,720 --> 00:05:39,120
so in the beginning

137
00:05:39,120 --> 00:05:42,000
honest parties define their inputs

138
00:05:42,000 --> 00:05:43,840
and during this input stage that

139
00:05:43,840 --> 00:05:46,240
versailles can corrupt for example part

140
00:05:46,240 --> 00:05:48,639
d3

141
00:05:48,639 --> 00:05:50,800
and therefore the simulator gets access

142
00:05:50,800 --> 00:05:54,000
to p3's input and has to explain his

143
00:05:54,000 --> 00:05:55,360
internal x

144
00:05:55,360 --> 00:05:56,800
state

145
00:05:56,800 --> 00:05:58,479
and the simulator also has the

146
00:05:58,479 --> 00:06:01,039
capability to substitute and decide what

147
00:06:01,039 --> 00:06:03,360
the input of p3 is

148
00:06:03,360 --> 00:06:05,840
whatever he wants

149
00:06:05,840 --> 00:06:08,319
based on the learned information that

150
00:06:08,319 --> 00:06:12,080
bursary maybe decides to corrupt p4

151
00:06:12,080 --> 00:06:14,080
and the same happens with the simulator

152
00:06:14,080 --> 00:06:15,840
right

153
00:06:15,840 --> 00:06:18,080
and of course if any information is

154
00:06:18,080 --> 00:06:19,280
leaked

155
00:06:19,280 --> 00:06:21,600
from the network the simulator also has

156
00:06:21,600 --> 00:06:22,800
to

157
00:06:22,800 --> 00:06:26,000
like give those messages

158
00:06:26,000 --> 00:06:29,039
at some point all the inputs are defined

159
00:06:29,039 --> 00:06:31,759
both from honest and corrupted parties

160
00:06:31,759 --> 00:06:34,720
and at this point the mpc system

161
00:06:34,720 --> 00:06:37,440
computes the function over the defined

162
00:06:37,440 --> 00:06:39,120
inputs

163
00:06:39,120 --> 00:06:41,840
and gives back the outputs

164
00:06:41,840 --> 00:06:43,600
and this stage takes some time and

165
00:06:43,600 --> 00:06:45,680
typically in the left system

166
00:06:45,680 --> 00:06:48,319
adversary learns the output of the

167
00:06:48,319 --> 00:06:51,919
corrupted parties first

168
00:06:52,080 --> 00:06:53,520
and based on that

169
00:06:53,520 --> 00:06:54,880
he can corrupt

170
00:06:54,880 --> 00:06:57,520
further parties

171
00:06:57,520 --> 00:06:59,280
and in the right system the simulator

172
00:06:59,280 --> 00:07:01,120
has to output all messages that are

173
00:07:01,120 --> 00:07:04,319
linked to that bursary

174
00:07:04,560 --> 00:07:07,599
and so on right

175
00:07:09,919 --> 00:07:13,039
and the logic is that

176
00:07:13,039 --> 00:07:17,000
anything that adversary

177
00:07:17,280 --> 00:07:19,840
and provoke in in the left system he can

178
00:07:19,840 --> 00:07:20,800
also

179
00:07:20,800 --> 00:07:23,120
achieve the same effect in the right

180
00:07:23,120 --> 00:07:25,520
system

181
00:07:27,320 --> 00:07:29,440
[Music]

182
00:07:29,440 --> 00:07:32,000
and while this standard notion of

183
00:07:32,000 --> 00:07:34,160
adaptive security is

184
00:07:34,160 --> 00:07:35,680
intuitive

185
00:07:35,680 --> 00:07:37,759
it turns out to be technically too

186
00:07:37,759 --> 00:07:41,759
strong or apparently too strong

187
00:07:41,759 --> 00:07:43,759
and one of the main obstacles here is

188
00:07:43,759 --> 00:07:46,879
the so called commitment problem

189
00:07:46,879 --> 00:07:49,199
let me explain it with a very simple

190
00:07:49,199 --> 00:07:50,879
example

191
00:07:50,879 --> 00:07:53,120
so consider a setting with two parties

192
00:07:53,120 --> 00:07:55,520
connected via

193
00:07:55,520 --> 00:07:57,599
authenticated channel

194
00:07:57,599 --> 00:08:00,800
and let's say that party

195
00:08:00,800 --> 00:08:02,000
rt1

196
00:08:02,000 --> 00:08:04,400
inputs x1 to the protocol

197
00:08:04,400 --> 00:08:08,080
and commits to its input using some

198
00:08:08,080 --> 00:08:10,639
perfectly hiding commitment scheme some

199
00:08:10,639 --> 00:08:12,639
encryption or something

200
00:08:12,639 --> 00:08:14,960
and since the channel is authenticated

201
00:08:14,960 --> 00:08:19,039
that personally sees the commitment b

202
00:08:19,039 --> 00:08:21,120
and therefore the simulator has to come

203
00:08:21,120 --> 00:08:25,199
up with a fake commitment b prime

204
00:08:25,440 --> 00:08:27,680
and the point here is that b prime has

205
00:08:27,680 --> 00:08:31,199
to be generated without the knowledge of

206
00:08:31,199 --> 00:08:32,640
input x1

207
00:08:32,640 --> 00:08:37,120
because at this point the part is honest

208
00:08:37,440 --> 00:08:39,120
but now the problem is that if the

209
00:08:39,120 --> 00:08:42,799
adversary adaptively corrupts rt1

210
00:08:42,799 --> 00:08:46,000
and learns its internal state

211
00:08:46,000 --> 00:08:48,399
that adversary learns in particular the

212
00:08:48,399 --> 00:08:51,519
way the commitment was created

213
00:08:51,519 --> 00:08:53,360
and the problem is that the simulator

214
00:08:53,360 --> 00:08:55,920
cannot consistently explain the fake

215
00:08:55,920 --> 00:08:58,560
commitment b prime with respect to the

216
00:08:58,560 --> 00:09:01,439
input x1

217
00:09:03,120 --> 00:09:04,800
so note that this protocol is

218
00:09:04,800 --> 00:09:07,200
technically or

219
00:09:07,200 --> 00:09:09,600
apparently insecure under the standard

220
00:09:09,600 --> 00:09:12,880
notion no matter what happens next so

221
00:09:12,880 --> 00:09:16,080
even if we execute an extremely like

222
00:09:16,080 --> 00:09:19,839
super secure protocol afterwards

223
00:09:19,839 --> 00:09:22,560
the mere fact that the party publishes a

224
00:09:22,560 --> 00:09:25,600
commitment of its private input

225
00:09:25,600 --> 00:09:29,200
makes the protocol insecure

226
00:09:30,080 --> 00:09:31,920
and this is the case even

227
00:09:31,920 --> 00:09:34,640
if if the commitment is perfectly hiding

228
00:09:34,640 --> 00:09:37,680
right and this should not be the case

229
00:09:37,680 --> 00:09:39,839
because

230
00:09:39,839 --> 00:09:42,240
at least intuitively publishing

231
00:09:42,240 --> 00:09:46,640
v cannot harm in any way the protocol

232
00:09:47,440 --> 00:09:49,600
and the technical issue arises in many

233
00:09:49,600 --> 00:09:52,160
scenarios where some form of encryption

234
00:09:52,160 --> 00:09:55,519
or commitment is used

235
00:09:55,600 --> 00:09:57,760
and as a result current typical

236
00:09:57,760 --> 00:10:00,080
protocols use additional techniques that

237
00:10:00,080 --> 00:10:03,200
are designed to specifically target

238
00:10:03,200 --> 00:10:06,240
or overcome this technical challenge

239
00:10:06,240 --> 00:10:09,519
so for example they use the

240
00:10:09,519 --> 00:10:12,240
secure erasable memory which incurs an

241
00:10:12,240 --> 00:10:14,399
additional assumption

242
00:10:14,399 --> 00:10:16,399
or

243
00:10:16,399 --> 00:10:17,680
we also use

244
00:10:17,680 --> 00:10:20,079
non-committing encryption or equivocal

245
00:10:20,079 --> 00:10:21,200
tools

246
00:10:21,200 --> 00:10:23,839
which typically incur an important

247
00:10:23,839 --> 00:10:26,720
efficiency loss

248
00:10:26,880 --> 00:10:29,680
in this work we ask whether

249
00:10:29,680 --> 00:10:33,680
one can modify the definition and find

250
00:10:33,680 --> 00:10:36,000
natural definition

251
00:10:36,000 --> 00:10:38,240
for security against an adaptive

252
00:10:38,240 --> 00:10:39,920
adversary

253
00:10:39,920 --> 00:10:41,920
that is not subject to the commitment

254
00:10:41,920 --> 00:10:44,319
problem

255
00:10:45,279 --> 00:10:48,399
and the answer is yes

256
00:10:48,480 --> 00:10:51,279
and here is how we do it

257
00:10:51,279 --> 00:10:52,160
so

258
00:10:52,160 --> 00:10:54,880
when one thinks about adaptive security

259
00:10:54,880 --> 00:10:56,959
a very natural idea

260
00:10:56,959 --> 00:10:59,760
is to specify a guarantee

261
00:10:59,760 --> 00:11:04,160
for each possible set of honest parties

262
00:11:05,440 --> 00:11:07,680
so at any point in the protocol the

263
00:11:07,680 --> 00:11:09,680
guarantees that we have

264
00:11:09,680 --> 00:11:12,480
depend on

265
00:11:12,480 --> 00:11:15,680
the current set of honest parties

266
00:11:15,680 --> 00:11:18,480
so here is a picture where we consider

267
00:11:18,480 --> 00:11:21,680
three parties e1 p2 and p3

268
00:11:21,680 --> 00:11:23,279
so at the beginning

269
00:11:23,279 --> 00:11:26,240
all parties are honest so we benefit

270
00:11:26,240 --> 00:11:29,920
from all these guarantees

271
00:11:29,920 --> 00:11:32,399
and then at some point maybe p1 becomes

272
00:11:32,399 --> 00:11:33,680
corrupted

273
00:11:33,680 --> 00:11:35,680
and therefore we lose some of the

274
00:11:35,680 --> 00:11:38,000
guarantees

275
00:11:38,000 --> 00:11:39,920
but all those guarantees corresponding

276
00:11:39,920 --> 00:11:40,839
to

277
00:11:40,839 --> 00:11:45,440
sets that are still honest remain

278
00:11:45,440 --> 00:11:48,000
and the same for p2

279
00:11:48,000 --> 00:11:50,800
at this point only p3 is honest and

280
00:11:50,800 --> 00:11:52,639
therefore and therefore there are only

281
00:11:52,639 --> 00:11:55,120
these two guarantees

282
00:11:55,120 --> 00:11:57,200
um and maybe in the end everyone is

283
00:11:57,200 --> 00:11:59,519
corrupted so we are left with a single

284
00:11:59,519 --> 00:12:01,920
guarantee

285
00:12:01,920 --> 00:12:03,839
at a high level it seems to be clear

286
00:12:03,839 --> 00:12:06,079
that

287
00:12:06,079 --> 00:12:08,720
kind of this is what adaptive security

288
00:12:08,720 --> 00:12:11,200
is about somehow like we give guarantees

289
00:12:11,200 --> 00:12:13,120
and the more parties are corrupted the

290
00:12:13,120 --> 00:12:16,160
less is guaranteed

291
00:12:16,720 --> 00:12:19,839
and we we will now explain like

292
00:12:19,839 --> 00:12:21,920
how with this view one can overcome the

293
00:12:21,920 --> 00:12:24,160
commitment problem

294
00:12:24,160 --> 00:12:26,160
so

295
00:12:26,160 --> 00:12:27,680
intuitively

296
00:12:27,680 --> 00:12:30,880
what we do is we guarantee

297
00:12:30,880 --> 00:12:35,440
and we give a guarantee for each set x

298
00:12:35,440 --> 00:12:37,440
that provides

299
00:12:37,440 --> 00:12:40,079
intuitively par privacy to the parties

300
00:12:40,079 --> 00:12:41,440
in x

301
00:12:41,440 --> 00:12:42,639
so the view

302
00:12:42,639 --> 00:12:45,920
the guarantee for x says the view of the

303
00:12:45,920 --> 00:12:48,800
adversary depends only

304
00:12:48,800 --> 00:12:50,959
on the inputs of the parties that are

305
00:12:50,959 --> 00:12:53,839
not in x

306
00:12:54,079 --> 00:12:56,560
regardless of whether they are corrupted

307
00:12:56,560 --> 00:12:58,399
or not

308
00:12:58,399 --> 00:13:00,079
and technically this means that the

309
00:13:00,079 --> 00:13:01,440
simulator

310
00:13:01,440 --> 00:13:06,639
can read the inputs of parties not in x

311
00:13:06,639 --> 00:13:09,200
as i said regardless of whether they are

312
00:13:09,200 --> 00:13:11,839
corrupted

313
00:13:12,560 --> 00:13:14,399
one can think about many different

314
00:13:14,399 --> 00:13:17,120
variants but this seems to be kind of

315
00:13:17,120 --> 00:13:18,880
one of the strongest guarantees to

316
00:13:18,880 --> 00:13:21,920
consider that allows at the same time to

317
00:13:21,920 --> 00:13:24,880
overcome the type of commitment problem

318
00:13:24,880 --> 00:13:25,920
that

319
00:13:25,920 --> 00:13:29,279
that i explained before

320
00:13:29,600 --> 00:13:32,320
so why do we overcome

321
00:13:32,320 --> 00:13:34,560
a commitment problem

322
00:13:34,560 --> 00:13:36,720
so first observe that the guarantee is

323
00:13:36,720 --> 00:13:39,920
dropped as soon as any party in x gets

324
00:13:39,920 --> 00:13:41,440
corrupted

325
00:13:41,440 --> 00:13:43,199
so technically what we are saying is

326
00:13:43,199 --> 00:13:46,480
that the simulator stops at that point

327
00:13:46,480 --> 00:13:48,880
and the state of the party doesn't need

328
00:13:48,880 --> 00:13:50,320
to be explained so there is no

329
00:13:50,320 --> 00:13:53,519
commitment problem here

330
00:13:55,120 --> 00:13:56,639
and moreover

331
00:13:56,639 --> 00:14:00,880
if a party not in x gets corrupted

332
00:14:00,880 --> 00:14:03,360
the simulator can explain its internal

333
00:14:03,360 --> 00:14:05,600
state because it knew it

334
00:14:05,600 --> 00:14:09,279
it knew its input beforehand

335
00:14:11,920 --> 00:14:14,839
so let's go back to the slide with

336
00:14:14,839 --> 00:14:17,760
guarantees we have that guarantee

337
00:14:17,760 --> 00:14:18,959
or x

338
00:14:18,959 --> 00:14:21,360
says intuitively any information leaked

339
00:14:21,360 --> 00:14:23,120
to the adversary

340
00:14:23,120 --> 00:14:26,000
so far depends only on the inputs of

341
00:14:26,000 --> 00:14:28,720
parties not in x

342
00:14:28,720 --> 00:14:31,519
so if we pick the largest set

343
00:14:31,519 --> 00:14:33,279
x what we are seeing is that all

344
00:14:33,279 --> 00:14:34,639
information

345
00:14:34,639 --> 00:14:37,360
that the bursary has learned so far

346
00:14:37,360 --> 00:14:40,079
depends only on the data of the

347
00:14:40,079 --> 00:14:43,760
corrupted set at that point

348
00:14:43,760 --> 00:14:45,760
and this holds for any

349
00:14:45,760 --> 00:14:48,560
point e in time

350
00:14:48,560 --> 00:14:52,480
for example if we if we fix this t

351
00:14:52,480 --> 00:14:55,600
um we say that

352
00:14:55,600 --> 00:14:57,519
any information leaked

353
00:14:57,519 --> 00:15:00,880
so far up to time t

354
00:15:00,880 --> 00:15:03,120
can be derived from the data of the

355
00:15:03,120 --> 00:15:05,920
corrupted parties at time t

356
00:15:05,920 --> 00:15:08,079
and of course this is in contrast to the

357
00:15:08,079 --> 00:15:11,120
standard definition the point is that

358
00:15:11,120 --> 00:15:13,519
different statements here do not need to

359
00:15:13,519 --> 00:15:15,519
be consistent with each other

360
00:15:15,519 --> 00:15:17,440
and this is exactly what allows us to

361
00:15:17,440 --> 00:15:21,040
overcome the commitment problem

362
00:15:22,240 --> 00:15:26,560
another question is like like how can we

363
00:15:26,560 --> 00:15:29,920
express this in such a way that

364
00:15:29,920 --> 00:15:33,040
that it composes as well for example

365
00:15:33,040 --> 00:15:35,839
so in in our work we choose the

366
00:15:35,839 --> 00:15:38,079
constructive cryptography framework to

367
00:15:38,079 --> 00:15:40,560
express such guarantees

368
00:15:40,560 --> 00:15:41,440
um

369
00:15:41,440 --> 00:15:44,480
instantiate it to the multi-party

370
00:15:44,480 --> 00:15:46,160
setting

371
00:15:46,160 --> 00:15:47,680
um

372
00:15:47,680 --> 00:15:51,360
the constructive crypto is is a theory

373
00:15:51,360 --> 00:15:54,959
of what we call resources

374
00:15:54,959 --> 00:15:56,959
and there are clear algebraic and

375
00:15:56,959 --> 00:15:58,639
well-defined rules

376
00:15:58,639 --> 00:16:01,120
so the resources are typically

377
00:16:01,120 --> 00:16:04,079
elements that we care about

378
00:16:04,079 --> 00:16:04,959
so

379
00:16:04,959 --> 00:16:07,279
those elements that we explicitly assume

380
00:16:07,279 --> 00:16:08,639
like the network

381
00:16:08,639 --> 00:16:10,880
or that we would like to construct like

382
00:16:10,880 --> 00:16:13,360
the ideal computer

383
00:16:13,360 --> 00:16:16,240
these are simply systems with interfaces

384
00:16:16,240 --> 00:16:19,680
to the parties considered in the setting

385
00:16:19,680 --> 00:16:22,000
and the converters are the round objects

386
00:16:22,000 --> 00:16:23,360
right

387
00:16:23,360 --> 00:16:25,600
they are the protocol engines

388
00:16:25,600 --> 00:16:28,240
which are the recipes that we use to

389
00:16:28,240 --> 00:16:30,320
transform resources

390
00:16:30,320 --> 00:16:33,279
to resources

391
00:16:33,519 --> 00:16:35,519
we can then combine resources and

392
00:16:35,519 --> 00:16:37,360
converters to construct further

393
00:16:37,360 --> 00:16:39,199
resources

394
00:16:39,199 --> 00:16:41,360
and in fact we will understand this as

395
00:16:41,360 --> 00:16:44,320
sets of resources or resource

396
00:16:44,320 --> 00:16:47,320
specifications

397
00:16:47,440 --> 00:16:50,560
and considering sets is kind of natural

398
00:16:50,560 --> 00:16:51,920
i think

399
00:16:51,920 --> 00:16:54,160
because it allows us to talk in terms of

400
00:16:54,160 --> 00:16:55,360
guarantees

401
00:16:55,360 --> 00:16:57,279
maybe we want to

402
00:16:57,279 --> 00:17:00,000
construct some sort of program that

403
00:17:00,000 --> 00:17:02,160
computes some function within a given

404
00:17:02,160 --> 00:17:04,480
accuracy and time limit

405
00:17:04,480 --> 00:17:07,520
maybe the network that we assume

406
00:17:07,520 --> 00:17:10,160
has some delay between

407
00:17:10,160 --> 00:17:12,799
i don't know 5 and 10 seconds and so on

408
00:17:12,799 --> 00:17:16,000
we don't want to necessarily talk about

409
00:17:16,000 --> 00:17:17,760
fully defined

410
00:17:17,760 --> 00:17:20,160
concrete systems we want to talk about

411
00:17:20,160 --> 00:17:21,919
guarantees

412
00:17:21,919 --> 00:17:24,959
the construction notion says

413
00:17:24,959 --> 00:17:27,199
protocol pi

414
00:17:27,199 --> 00:17:29,760
which are all these

415
00:17:29,760 --> 00:17:33,320
protocol engines

416
00:17:33,919 --> 00:17:37,440
applied to any resource in specification

417
00:17:37,440 --> 00:17:39,600
r

418
00:17:40,080 --> 00:17:45,280
is a resource in specification ss

419
00:17:46,480 --> 00:17:49,360
so specification r includes any resource

420
00:17:49,360 --> 00:17:53,039
that we would be willing to assume

421
00:17:53,120 --> 00:17:55,919
and s includes any resource that we

422
00:17:55,919 --> 00:17:58,799
would be happy to construct

423
00:17:58,799 --> 00:18:00,880
so how can we say this in in the

424
00:18:00,880 --> 00:18:02,320
framework so

425
00:18:02,320 --> 00:18:04,799
so we say um

426
00:18:04,799 --> 00:18:07,280
for each set x

427
00:18:07,280 --> 00:18:10,240
the protocol attached to any resource in

428
00:18:10,240 --> 00:18:11,200
r

429
00:18:11,200 --> 00:18:12,480
satisfy

430
00:18:12,480 --> 00:18:14,880
satisfies a guarantee

431
00:18:14,880 --> 00:18:16,000
for x

432
00:18:16,000 --> 00:18:17,840
right

433
00:18:17,840 --> 00:18:21,120
and we can elegantly

434
00:18:21,280 --> 00:18:23,360
trace all these guarantees at the same

435
00:18:23,360 --> 00:18:25,440
time within one single construction

436
00:18:25,440 --> 00:18:26,640
statement

437
00:18:26,640 --> 00:18:28,480
simply by specifying the ideal

438
00:18:28,480 --> 00:18:30,720
specification as the intersection of

439
00:18:30,720 --> 00:18:33,679
specifications

440
00:18:34,410 --> 00:18:36,960
[Music]

441
00:18:36,960 --> 00:18:38,720
so here are a few

442
00:18:38,720 --> 00:18:41,600
lemmas about our definition

443
00:18:41,600 --> 00:18:43,120
so first

444
00:18:43,120 --> 00:18:45,039
our definition lies

445
00:18:45,039 --> 00:18:47,919
strictly in between the current

446
00:18:47,919 --> 00:18:52,340
notions of adaptive and static security

447
00:18:52,340 --> 00:18:54,799
[Music]

448
00:18:54,799 --> 00:18:57,919
it overcomes at least this type of

449
00:18:57,919 --> 00:18:59,840
commitment problem that i explained

450
00:18:59,840 --> 00:19:01,679
before

451
00:19:01,679 --> 00:19:03,840
and therefore is

452
00:19:03,840 --> 00:19:05,760
kind of

453
00:19:05,760 --> 00:19:07,679
strictly weaker than the standard

454
00:19:07,679 --> 00:19:11,840
adaptive security definition

455
00:19:13,039 --> 00:19:15,039
but it's also nice that many of the

456
00:19:15,039 --> 00:19:17,360
protocols that are believed to be secure

457
00:19:17,360 --> 00:19:20,320
in practice but are not secure

458
00:19:20,320 --> 00:19:24,400
under the standard adaptive security

459
00:19:24,400 --> 00:19:26,720
these are secure under our definition

460
00:19:26,720 --> 00:19:28,880
right

461
00:19:28,880 --> 00:19:30,960
and this is the case for the famous cdn

462
00:19:30,960 --> 00:19:34,480
and the close protocols a static version

463
00:19:34,480 --> 00:19:37,120
of the clause protocol

464
00:19:37,120 --> 00:19:40,240
and second our guarantees are

465
00:19:40,240 --> 00:19:42,240
apparently strong

466
00:19:42,240 --> 00:19:44,240
in the sense that many

467
00:19:44,240 --> 00:19:47,039
of the typical examples that separate

468
00:19:47,039 --> 00:19:48,160
static

469
00:19:48,160 --> 00:19:51,280
from standard adaptive security actually

470
00:19:51,280 --> 00:19:53,600
also separates static from our new

471
00:19:53,600 --> 00:19:56,080
notion

472
00:19:56,960 --> 00:20:01,120
so in conclusion we opened a new space

473
00:20:01,120 --> 00:20:03,360
of security definitions

474
00:20:03,360 --> 00:20:05,280
with the idea of giving

475
00:20:05,280 --> 00:20:07,840
a guarantee for every set of

476
00:20:07,840 --> 00:20:10,720
so far honest parties

477
00:20:10,720 --> 00:20:13,120
and we show that this viewpoint allows

478
00:20:13,120 --> 00:20:16,240
to to give like a concrete instantiation

479
00:20:16,240 --> 00:20:18,480
that over overcomes a particular

480
00:20:18,480 --> 00:20:21,200
commitment problem while at the same

481
00:20:21,200 --> 00:20:23,120
time achieving

482
00:20:23,120 --> 00:20:27,120
strong adaptive security guarantees

483
00:20:27,600 --> 00:20:29,760
so here is the apron version and thank

484
00:20:29,760 --> 00:20:33,720
you very much for listening

