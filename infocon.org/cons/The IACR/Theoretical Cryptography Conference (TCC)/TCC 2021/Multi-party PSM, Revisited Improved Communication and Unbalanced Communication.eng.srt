1
00:00:01,199 --> 00:00:04,080
today i will talk about our new result

2
00:00:04,080 --> 00:00:06,319
on multi-party psm

3
00:00:06,319 --> 00:00:09,519
this is joint work with luna from ens

4
00:00:09,519 --> 00:00:12,080
he will give the in-person talk

5
00:00:12,080 --> 00:00:15,280
i'm tianjin was the postdoc in uw until

6
00:00:15,280 --> 00:00:16,720
last month and will join picking

7
00:00:16,720 --> 00:00:19,600
university next year

8
00:00:19,600 --> 00:00:22,000
so what is psm

9
00:00:22,000 --> 00:00:25,680
it means private simultaneous messages

10
00:00:25,680 --> 00:00:28,000
there are k parties

11
00:00:28,000 --> 00:00:31,279
each has an input set the input space as

12
00:00:31,279 --> 00:00:33,440
of size n

13
00:00:33,440 --> 00:00:35,520
there's a referee

14
00:00:35,520 --> 00:00:38,000
the goal is to let referee learn the

15
00:00:38,000 --> 00:00:40,960
output of a public function evaluating

16
00:00:40,960 --> 00:00:43,920
on all the inputs after receiving a

17
00:00:43,920 --> 00:00:47,280
message from each party

18
00:00:47,280 --> 00:00:48,879
for correctness

19
00:00:48,879 --> 00:00:50,879
the referee learns of the functional

20
00:00:50,879 --> 00:00:52,719
output

21
00:00:52,719 --> 00:00:54,800
for security

22
00:00:54,800 --> 00:00:57,520
the referee should learn nothing else

23
00:00:57,520 --> 00:01:02,079
even if he is competitionally unbounded

24
00:01:02,079 --> 00:01:04,319
to make this possible

25
00:01:04,319 --> 00:01:07,040
randomness are shared among parties of

26
00:01:07,040 --> 00:01:08,560
course the randomness is hidden from the

27
00:01:08,560 --> 00:01:10,159
referee

28
00:01:10,159 --> 00:01:11,680
for psm

29
00:01:11,680 --> 00:01:16,159
we care about communication complexity

30
00:01:16,159 --> 00:01:19,360
psm is a very minimal model of secure

31
00:01:19,360 --> 00:01:21,200
computation

32
00:01:21,200 --> 00:01:24,159
things are extremely simplified it's a

33
00:01:24,159 --> 00:01:26,720
good place to understand fundamental

34
00:01:26,720 --> 00:01:28,320
problems such as

35
00:01:28,320 --> 00:01:32,159
what is the cost of secure computation

36
00:01:32,159 --> 00:01:34,960
it's also widely connected to many

37
00:01:34,960 --> 00:01:37,600
important crypto primitives

38
00:01:37,600 --> 00:01:39,200
for example you are familiar with

39
00:01:39,200 --> 00:01:41,280
scalable circuit

40
00:01:41,280 --> 00:01:43,200
if you think of it

41
00:01:43,200 --> 00:01:46,479
global circuit is essentially psm

42
00:01:46,479 --> 00:01:50,960
where each party only has one bit input

43
00:01:50,960 --> 00:01:53,119
in the literature of gap circuit and run

44
00:01:53,119 --> 00:01:55,280
mass encoding

45
00:01:55,280 --> 00:01:56,560
the function

46
00:01:56,560 --> 00:01:59,040
to compute is typically a circuit a

47
00:01:59,040 --> 00:02:01,920
formula a branch programming summary

48
00:02:01,920 --> 00:02:04,880
and we study how communication depends

49
00:02:04,880 --> 00:02:08,720
on computation size

50
00:02:08,720 --> 00:02:10,560
well for the rest of the problem in the

51
00:02:10,560 --> 00:02:12,080
page

52
00:02:12,080 --> 00:02:15,120
the central problem is on the complexity

53
00:02:15,120 --> 00:02:18,160
of the worst function

54
00:02:18,160 --> 00:02:20,640
so for the worst case function

55
00:02:20,640 --> 00:02:21,840
we knew

56
00:02:21,840 --> 00:02:24,879
its computation size is

57
00:02:24,879 --> 00:02:27,440
about input k

58
00:02:27,440 --> 00:02:29,520
actually let's write down the function

59
00:02:29,520 --> 00:02:30,480
takes

60
00:02:30,480 --> 00:02:33,040
input k bits

61
00:02:33,040 --> 00:02:35,120
the question is

62
00:02:35,120 --> 00:02:36,959
made the communication complexity of the

63
00:02:36,959 --> 00:02:38,160
function

64
00:02:38,160 --> 00:02:40,319
be much smaller

65
00:02:40,319 --> 00:02:43,920
so in a very similar model cts

66
00:02:43,920 --> 00:02:46,239
such cheap communication was recently

67
00:02:46,239 --> 00:02:47,920
achieved

68
00:02:47,920 --> 00:02:52,480
and how about the communication of psm

69
00:02:52,480 --> 00:02:55,519
in the paper that introduced psm

70
00:02:55,519 --> 00:02:57,440
switch killing now achieves

71
00:02:57,440 --> 00:02:59,280
communication capacity

72
00:02:59,280 --> 00:03:00,480
into the

73
00:03:00,480 --> 00:03:02,239
k minus 1

74
00:03:02,239 --> 00:03:05,920
which can be interpreted as all but one

75
00:03:05,920 --> 00:03:09,599
party's input space size

76
00:03:09,680 --> 00:03:10,879
recently

77
00:03:10,879 --> 00:03:14,080
bimarcus left with nuisance improve it

78
00:03:14,080 --> 00:03:16,959
to the square root of total input space

79
00:03:16,959 --> 00:03:19,200
size

80
00:03:19,200 --> 00:03:20,800
in the literature

81
00:03:20,800 --> 00:03:24,080
we also have more efficient psm

82
00:03:24,080 --> 00:03:27,519
when the number of parties is small

83
00:03:27,519 --> 00:03:31,360
how should we interpret these results

84
00:03:31,360 --> 00:03:36,080
is the case of smaller parties special

85
00:03:36,080 --> 00:03:39,440
or can they be generalized to larger k

86
00:03:39,440 --> 00:03:41,599
as well

87
00:03:41,599 --> 00:03:42,959
our result

88
00:03:42,959 --> 00:03:45,760
partially answers the question

89
00:03:45,760 --> 00:03:47,680
improved communication complexity to

90
00:03:47,680 --> 00:03:49,040
square root

91
00:03:49,040 --> 00:03:52,640
or but one party input space size

92
00:03:52,640 --> 00:03:54,959
when k equals two or three we match the

93
00:03:54,959 --> 00:03:56,480
previous upper bounds

94
00:03:56,480 --> 00:03:57,760
actually we rep

95
00:03:57,760 --> 00:04:00,560
we reproduce the bik and the bikini

96
00:04:00,560 --> 00:04:02,480
constructions

97
00:04:02,480 --> 00:04:04,159
for larger k

98
00:04:04,159 --> 00:04:06,080
we improved communication complexity by

99
00:04:06,080 --> 00:04:08,640
square root 10.

100
00:04:08,640 --> 00:04:10,239
unfortunately

101
00:04:10,239 --> 00:04:12,720
and interestingly we only proved our

102
00:04:12,720 --> 00:04:15,200
construction for infinitely many cases

103
00:04:15,200 --> 00:04:18,880
including or k no larger than 20

104
00:04:18,880 --> 00:04:23,440
and we conjecture it works for any k

105
00:04:23,840 --> 00:04:26,560
to show this in picture

106
00:04:26,560 --> 00:04:30,400
previously the set of art or for general

107
00:04:30,400 --> 00:04:31,120
k

108
00:04:31,120 --> 00:04:32,880
it's bkn

109
00:04:32,880 --> 00:04:35,040
and for smaller k we have some more

110
00:04:35,040 --> 00:04:37,440
efficient ones

111
00:04:37,440 --> 00:04:39,280
our psm

112
00:04:39,280 --> 00:04:42,160
matched previous works 1k small and he

113
00:04:42,160 --> 00:04:46,720
improved the set of art for large k

114
00:04:47,520 --> 00:04:48,400
okay

115
00:04:48,400 --> 00:04:51,440
for the case of two party psm as we just

116
00:04:51,440 --> 00:04:52,400
mentioned

117
00:04:52,400 --> 00:04:55,680
the state of art is square to m by b

118
00:04:55,680 --> 00:04:59,600
marichai kumaris and kuchi levis

119
00:05:00,560 --> 00:05:04,160
the earlier fkn achieves on

120
00:05:04,160 --> 00:05:05,759
communication

121
00:05:05,759 --> 00:05:08,160
which is worse but has a very nice

122
00:05:08,160 --> 00:05:10,000
feature

123
00:05:10,000 --> 00:05:13,120
only one party needs to send on bits

124
00:05:13,120 --> 00:05:14,720
the other party

125
00:05:14,720 --> 00:05:16,960
sends only affiliates

126
00:05:16,960 --> 00:05:19,199
so compared to bikk

127
00:05:19,199 --> 00:05:21,840
fkn trades communication capacity of one

128
00:05:21,840 --> 00:05:25,440
party for the other

129
00:05:25,440 --> 00:05:27,520
in this work

130
00:05:27,520 --> 00:05:30,880
we show an almost smooth trade-off

131
00:05:30,880 --> 00:05:32,639
one party sends

132
00:05:32,639 --> 00:05:34,639
unto the ita bits

133
00:05:34,639 --> 00:05:36,560
while the other party

134
00:05:36,560 --> 00:05:39,199
sends into the one-minute theta bits

135
00:05:39,199 --> 00:05:41,840
as long as the part that the product is

136
00:05:41,840 --> 00:05:44,560
no less than

137
00:05:44,639 --> 00:05:47,440
you see the trade-off is almost smooth

138
00:05:47,440 --> 00:05:49,680
because the only proof that

139
00:05:49,680 --> 00:05:51,919
trade out for rational eta whose

140
00:05:51,919 --> 00:05:55,840
denominator is no more than 20.

141
00:05:55,840 --> 00:05:58,000
after seeing our result

142
00:05:58,000 --> 00:06:00,240
you probably already have some questions

143
00:06:00,240 --> 00:06:02,479
to ask

144
00:06:02,479 --> 00:06:04,639
our work generates more questions than

145
00:06:04,639 --> 00:06:07,680
answers and i will discuss some of them

146
00:06:07,680 --> 00:06:10,560
in the last slides

147
00:06:10,560 --> 00:06:12,319
from these slides

148
00:06:12,319 --> 00:06:14,319
i will give a brief overview of our

149
00:06:14,319 --> 00:06:16,560
construction

150
00:06:16,560 --> 00:06:19,199
the first idea in the construction is

151
00:06:19,199 --> 00:06:22,160
that the function we want to compute can

152
00:06:22,160 --> 00:06:25,280
be written as a multilinear function

153
00:06:25,280 --> 00:06:26,240
this is

154
00:06:26,240 --> 00:06:28,080
obvious if you are familiar with

155
00:06:28,080 --> 00:06:30,080
notation

156
00:06:30,080 --> 00:06:32,479
so this bracket means

157
00:06:32,479 --> 00:06:36,000
inner product capital f

158
00:06:36,000 --> 00:06:38,639
is the truth table of f

159
00:06:38,639 --> 00:06:39,759
x i

160
00:06:39,759 --> 00:06:42,720
can be converted into a vector it's zero

161
00:06:42,720 --> 00:06:44,960
everywhere except for the number x y

162
00:06:44,960 --> 00:06:46,720
coordinate

163
00:06:46,720 --> 00:06:49,280
finally tensor product

164
00:06:49,280 --> 00:06:51,840
the tensor product of two vectors

165
00:06:51,840 --> 00:06:53,280
is a matrix

166
00:06:53,280 --> 00:06:55,120
and the tensor product of a matrix and

167
00:06:55,120 --> 00:06:56,240
the vector

168
00:06:56,240 --> 00:06:59,599
is a cube and so on

169
00:06:59,759 --> 00:07:02,800
once have these notations

170
00:07:02,800 --> 00:07:07,360
let's see how to construct super dpsl

171
00:07:07,360 --> 00:07:11,680
the input have been replaced by vectors

172
00:07:11,680 --> 00:07:13,199
every party

173
00:07:13,199 --> 00:07:15,520
sends the one-time path of its input

174
00:07:15,520 --> 00:07:17,840
vector

175
00:07:17,919 --> 00:07:20,880
the mast vector is sampled from shared

176
00:07:20,880 --> 00:07:23,520
randomness

177
00:07:23,599 --> 00:07:26,720
what the referee can compute

178
00:07:26,720 --> 00:07:28,960
the reference can compute this inner

179
00:07:28,960 --> 00:07:30,479
product

180
00:07:30,479 --> 00:07:32,960
okay so let's expand it

181
00:07:32,960 --> 00:07:36,880
it equals the sum of eight terms

182
00:07:36,880 --> 00:07:39,120
the first is the target

183
00:07:39,120 --> 00:07:42,880
it's it's what we want to compute

184
00:07:42,880 --> 00:07:45,919
the last seven terms are what we call

185
00:07:45,919 --> 00:07:47,919
easy terms

186
00:07:47,919 --> 00:07:51,280
look at the first term in the last row

187
00:07:51,280 --> 00:07:53,440
party p1

188
00:07:53,440 --> 00:07:55,280
knows x1

189
00:07:55,280 --> 00:07:59,360
knows r2 r3 from the shared randomness

190
00:07:59,360 --> 00:08:01,360
and after it's publix

191
00:08:01,360 --> 00:08:04,560
so party p1 knows this term

192
00:08:04,560 --> 00:08:06,240
similarly

193
00:08:06,240 --> 00:08:09,759
for every term in last row

194
00:08:09,759 --> 00:08:10,720
okay

195
00:08:10,720 --> 00:08:14,160
then look at this term

196
00:08:14,160 --> 00:08:19,599
the only thing p1 doesn't know it's x2

197
00:08:19,599 --> 00:08:23,520
so this term equals the inner product of

198
00:08:23,520 --> 00:08:27,120
something p1 nodes and x2

199
00:08:27,120 --> 00:08:30,960
similarly for the other two terms

200
00:08:31,840 --> 00:08:34,559
so the sum of these terms is a

201
00:08:34,559 --> 00:08:38,799
polynomial with om monomials

202
00:08:38,799 --> 00:08:41,599
as shown by shakush levis

203
00:08:41,599 --> 00:08:45,200
to compute the polynomial in psm model

204
00:08:45,200 --> 00:08:47,519
the communication is no more than the

205
00:08:47,519 --> 00:08:50,399
number of monomials

206
00:08:50,399 --> 00:08:51,760
that is

207
00:08:51,760 --> 00:08:54,720
the sum of all green terms

208
00:08:54,720 --> 00:08:56,640
can be computed

209
00:08:56,640 --> 00:09:00,319
with communication o n

210
00:09:00,399 --> 00:09:05,200
this explains why we call them easy

211
00:09:05,519 --> 00:09:07,920
once the referee learns the sum of the

212
00:09:07,920 --> 00:09:09,760
easy terms

213
00:09:09,760 --> 00:09:11,839
he can compute the target

214
00:09:11,839 --> 00:09:15,040
by subtracting the easy terms from the

215
00:09:15,040 --> 00:09:17,200
term on the left

216
00:09:17,200 --> 00:09:19,760
and it's easy to show that the referee

217
00:09:19,760 --> 00:09:23,279
learns no other information

218
00:09:23,279 --> 00:09:25,200
now let's try

219
00:09:25,200 --> 00:09:27,680
third party psm

220
00:09:27,680 --> 00:09:28,959
again

221
00:09:28,959 --> 00:09:31,680
every party sends one time path

222
00:09:31,680 --> 00:09:33,839
of its input vector

223
00:09:33,839 --> 00:09:35,200
the referee

224
00:09:35,200 --> 00:09:37,279
this inner product

225
00:09:37,279 --> 00:09:41,519
which is the sum of 32 terms

226
00:09:41,519 --> 00:09:42,560
again

227
00:09:42,560 --> 00:09:44,160
the first term is the target we want to

228
00:09:44,160 --> 00:09:46,560
compute

229
00:09:48,320 --> 00:09:49,440
so

230
00:09:49,440 --> 00:09:52,560
now look at this term

231
00:09:53,200 --> 00:09:55,600
p1 knows everything about this term

232
00:09:55,600 --> 00:09:58,720
except for x2 and x3

233
00:09:58,720 --> 00:10:01,120
so this term equals the inner product of

234
00:10:01,120 --> 00:10:03,680
something p1 notes and

235
00:10:03,680 --> 00:10:07,040
x to tensor product x3

236
00:10:07,040 --> 00:10:10,399
similarly for all the following terms

237
00:10:10,399 --> 00:10:13,200
their sum is a polynomial with

238
00:10:13,200 --> 00:10:16,480
n square monomials

239
00:10:16,720 --> 00:10:20,480
what about the other few terms

240
00:10:20,480 --> 00:10:24,399
i have no idea how to compute them

241
00:10:24,399 --> 00:10:26,399
i call them

242
00:10:26,399 --> 00:10:30,240
hot term and just leave them as they are

243
00:10:30,240 --> 00:10:33,120
so we are stuck here

244
00:10:33,120 --> 00:10:34,480
in the

245
00:10:34,480 --> 00:10:35,760
where can we

246
00:10:35,760 --> 00:10:38,240
make some progress

247
00:10:38,240 --> 00:10:41,519
the answer is in the first line

248
00:10:41,519 --> 00:10:44,959
sending one time pad of x i

249
00:10:44,959 --> 00:10:47,360
only cost embeds

250
00:10:47,360 --> 00:10:51,040
but our budget is in square bits

251
00:10:51,040 --> 00:10:53,360
it's as a general rule it's always

252
00:10:53,360 --> 00:10:56,160
better to use up the budget

253
00:10:56,160 --> 00:10:58,880
given the n square budget

254
00:10:58,880 --> 00:11:01,600
what can be sent

255
00:11:01,600 --> 00:11:04,079
we can send the one-time pad

256
00:11:04,079 --> 00:11:07,600
of x i times the product xg

257
00:11:07,600 --> 00:11:10,560
why is this within the budget

258
00:11:10,560 --> 00:11:12,399
so it's also due to the work of each

259
00:11:12,399 --> 00:11:13,760
other gush levis

260
00:11:13,760 --> 00:11:15,440
the complexity

261
00:11:15,440 --> 00:11:17,839
is no more than the number of phenomena

262
00:11:17,839 --> 00:11:20,640
the number of monomial which is n square

263
00:11:20,640 --> 00:11:22,000
okay

264
00:11:22,000 --> 00:11:25,120
so given this new one-time pad

265
00:11:25,120 --> 00:11:27,200
there are many more terms the referee

266
00:11:27,200 --> 00:11:29,279
can compute now

267
00:11:29,279 --> 00:11:31,120
and each of them

268
00:11:31,120 --> 00:11:32,720
equals the target

269
00:11:32,720 --> 00:11:34,880
plus some hard terms plus some easy

270
00:11:34,880 --> 00:11:36,800
terms

271
00:11:36,800 --> 00:11:39,200
now the most natural thought

272
00:11:39,200 --> 00:11:42,160
maybe the referee can combine them in a

273
00:11:42,160 --> 00:11:44,240
clever way so that

274
00:11:44,240 --> 00:11:47,519
all the hard terms are cancelled out

275
00:11:47,519 --> 00:11:50,480
and this is indeed possible

276
00:11:50,480 --> 00:11:52,720
the linear combination of this

277
00:11:52,720 --> 00:11:55,040
roughly computed reference computable

278
00:11:55,040 --> 00:11:56,959
terms

279
00:11:56,959 --> 00:11:59,519
equals the target

280
00:11:59,519 --> 00:12:03,440
plus some easy terms so this tells us

281
00:12:03,440 --> 00:12:06,639
how to construct the 5-party psm

282
00:12:06,639 --> 00:12:10,600
with n-square communication

283
00:12:10,720 --> 00:12:11,760
note that

284
00:12:11,760 --> 00:12:14,639
the target is multi

285
00:12:14,639 --> 00:12:16,639
multiplied by two

286
00:12:16,639 --> 00:12:19,680
so we have to use a finite field where

287
00:12:19,680 --> 00:12:22,839
two not equal to one to zero

288
00:12:22,839 --> 00:12:24,560
okay

289
00:12:24,560 --> 00:12:27,360
for general k party psm

290
00:12:27,360 --> 00:12:29,839
the ideas are the same

291
00:12:29,839 --> 00:12:33,040
first send one-time part of every tensor

292
00:12:33,040 --> 00:12:34,240
products

293
00:12:34,240 --> 00:12:37,519
of some input vectors as long as the

294
00:12:37,519 --> 00:12:40,560
budget allows

295
00:12:40,560 --> 00:12:42,880
then there are many terms

296
00:12:42,880 --> 00:12:45,360
the referee can compute

297
00:12:45,360 --> 00:12:48,160
each of them equals the target plus some

298
00:12:48,160 --> 00:12:51,200
hard terms plus some easy terms

299
00:12:51,200 --> 00:12:54,000
then do linear algebra to cancel out the

300
00:12:54,000 --> 00:12:55,440
hard terms

301
00:12:55,440 --> 00:12:57,360
which tells us

302
00:12:57,360 --> 00:12:58,959
how to

303
00:12:58,959 --> 00:13:01,279
construct k part psm

304
00:13:01,279 --> 00:13:05,040
within the communication budget

305
00:13:05,120 --> 00:13:08,480
uh when k is even the budget it's it's

306
00:13:08,480 --> 00:13:12,000
not an integer power of n

307
00:13:12,000 --> 00:13:15,360
so some extra work is needed

308
00:13:15,360 --> 00:13:18,079
we lined the computer to the linear

309
00:13:18,079 --> 00:13:21,600
algebra for k up to 20

310
00:13:21,600 --> 00:13:24,959
and the v did the linear algebra for k

311
00:13:24,959 --> 00:13:28,160
equals prime power minus 1.

312
00:13:28,160 --> 00:13:30,959
we conjecture that our method should

313
00:13:30,959 --> 00:13:34,480
work for any k

314
00:13:34,480 --> 00:13:36,720
as we mentioned some extra work is

315
00:13:36,720 --> 00:13:39,839
needed when k is even

316
00:13:39,839 --> 00:13:41,519
in previous slides

317
00:13:41,519 --> 00:13:44,480
the input is converted into a lens n

318
00:13:44,480 --> 00:13:46,079
vector

319
00:13:46,079 --> 00:13:47,040
now

320
00:13:47,040 --> 00:13:49,839
we need to convert it into two length

321
00:13:49,839 --> 00:13:51,600
square root of vectors

322
00:13:51,600 --> 00:13:55,600
and we do it in the most natural way

323
00:13:55,600 --> 00:13:59,839
split in the input into two numbers and

324
00:13:59,839 --> 00:14:02,720
convert the two number two number into

325
00:14:02,720 --> 00:14:05,839
two length square root of vectors

326
00:14:05,839 --> 00:14:08,720
the tensor product of these two lens

327
00:14:08,720 --> 00:14:10,959
square return vectors

328
00:14:10,959 --> 00:14:15,279
equals the original length vector

329
00:14:15,279 --> 00:14:16,399
and

330
00:14:16,399 --> 00:14:18,560
the rest of the construction is mostly

331
00:14:18,560 --> 00:14:20,079
the same

332
00:14:20,079 --> 00:14:22,319
okay

333
00:14:22,399 --> 00:14:25,040
now we quickly go through the two party

334
00:14:25,040 --> 00:14:26,720
psm

335
00:14:26,720 --> 00:14:30,800
the idea are almost the same

336
00:14:30,800 --> 00:14:34,639
say we allow one party to send the n

337
00:14:34,639 --> 00:14:37,120
to the b or k bits

338
00:14:37,120 --> 00:14:40,079
and the other party to send into the k

339
00:14:40,079 --> 00:14:43,040
minus b over k bits

340
00:14:43,040 --> 00:14:44,399
first we divide

341
00:14:44,399 --> 00:14:47,440
each input into k pieces

342
00:14:47,440 --> 00:14:49,680
and transfer each piece

343
00:14:49,680 --> 00:14:52,560
into a vector

344
00:14:53,279 --> 00:14:55,839
then the same observation

345
00:14:55,839 --> 00:15:00,320
the tensor product of all these vectors

346
00:15:00,320 --> 00:15:03,120
in the product with the truth table

347
00:15:03,120 --> 00:15:07,199
equals the target we want to compute

348
00:15:07,360 --> 00:15:08,880
okay

349
00:15:08,880 --> 00:15:09,920
then what

350
00:15:09,920 --> 00:15:13,440
we can send within the budget now

351
00:15:13,440 --> 00:15:16,880
the left party can send the one-time pad

352
00:15:16,880 --> 00:15:20,000
of the tensor product of at most b

353
00:15:20,000 --> 00:15:22,480
vectors

354
00:15:22,880 --> 00:15:24,639
similarly for the

355
00:15:24,639 --> 00:15:27,839
right party

356
00:15:29,600 --> 00:15:31,839
given this one-time pass

357
00:15:31,839 --> 00:15:33,920
there are many terms that the referee

358
00:15:33,920 --> 00:15:36,639
can compute

359
00:15:36,720 --> 00:15:37,680
and

360
00:15:37,680 --> 00:15:40,480
each of these terms equals the target

361
00:15:40,480 --> 00:15:44,320
plus some part-time plus some easy terms

362
00:15:44,320 --> 00:15:46,720
do the linear algebra

363
00:15:46,720 --> 00:15:49,199
if the hard terms can be cancelled out

364
00:15:49,199 --> 00:15:51,920
there's such a two-party psm

365
00:15:51,920 --> 00:15:54,800
we let computer to do the linearity bar

366
00:15:54,800 --> 00:15:57,519
for k up to 220.

367
00:15:57,519 --> 00:15:59,279
okay

368
00:15:59,279 --> 00:16:01,680
so so far we have

369
00:16:01,680 --> 00:16:03,920
sketched our results

370
00:16:03,920 --> 00:16:05,920
for k-party psm

371
00:16:05,920 --> 00:16:08,480
and for two-party psm with unbalanced

372
00:16:08,480 --> 00:16:10,800
communication

373
00:16:10,800 --> 00:16:12,639
the results

374
00:16:12,639 --> 00:16:13,680
generate

375
00:16:13,680 --> 00:16:16,240
more questions than answers

376
00:16:16,240 --> 00:16:18,560
the most immediate question

377
00:16:18,560 --> 00:16:22,800
do our frameworks work for any key

378
00:16:22,800 --> 00:16:24,800
the contractor

379
00:16:24,800 --> 00:16:26,320
yes

380
00:16:26,320 --> 00:16:29,040
i would be very surprised if the answer

381
00:16:29,040 --> 00:16:31,360
is no

382
00:16:31,360 --> 00:16:34,320
the next question

383
00:16:34,320 --> 00:16:37,680
i didn't rotate down explicitly but the

384
00:16:37,680 --> 00:16:40,320
complexity actually grows exponentially

385
00:16:40,320 --> 00:16:42,160
on k

386
00:16:42,160 --> 00:16:43,360
why

387
00:16:43,360 --> 00:16:46,560
because our construction is magic

388
00:16:46,560 --> 00:16:47,759
for example

389
00:16:47,759 --> 00:16:51,759
the referee receives many one time pads

390
00:16:51,759 --> 00:16:53,600
how many

391
00:16:53,600 --> 00:16:56,800
exponentially ok because we consider all

392
00:16:56,800 --> 00:16:59,519
symmetric twenty paths

393
00:16:59,519 --> 00:17:01,600
similarly in the paper

394
00:17:01,600 --> 00:17:04,720
we consider symmetric sums of roughly

395
00:17:04,720 --> 00:17:05,919
computed

396
00:17:05,919 --> 00:17:08,079
roughly computable terms

397
00:17:08,079 --> 00:17:10,640
and symmetric sum of hard terms and easy

398
00:17:10,640 --> 00:17:12,880
terms

399
00:17:12,880 --> 00:17:14,959
consider symmetric sum extremely

400
00:17:14,959 --> 00:17:19,520
simplified analysis so that

401
00:17:19,520 --> 00:17:24,240
we can go up to k equals 20.

402
00:17:24,240 --> 00:17:25,039
but

403
00:17:25,039 --> 00:17:28,240
can this exponential dependence on k be

404
00:17:28,240 --> 00:17:30,799
removed

405
00:17:31,760 --> 00:17:32,720
maybe

406
00:17:32,720 --> 00:17:33,840
yeah

407
00:17:33,840 --> 00:17:34,799
uh

408
00:17:34,799 --> 00:17:37,600
as our example fire party shows

409
00:17:37,600 --> 00:17:40,320
unsymmetric construction might work as

410
00:17:40,320 --> 00:17:41,200
well

411
00:17:41,200 --> 00:17:42,640
okay

412
00:17:42,640 --> 00:17:44,640
the next

413
00:17:44,640 --> 00:17:47,120
why it works

414
00:17:47,120 --> 00:17:49,280
right now the answer is

415
00:17:49,280 --> 00:17:52,559
okay the framework gives me a

416
00:17:52,559 --> 00:17:55,200
some system of linear equations i did

417
00:17:55,200 --> 00:17:57,600
some linear algebra and find

418
00:17:57,600 --> 00:17:59,840
the system is

419
00:17:59,840 --> 00:18:04,400
but such an answer is very unsatisfying

420
00:18:04,400 --> 00:18:06,559
and we are looking for a more intuitive

421
00:18:06,559 --> 00:18:08,559
answer

422
00:18:08,559 --> 00:18:11,840
or a better question to ask

423
00:18:11,840 --> 00:18:14,960
why it doesn't work in some in some

424
00:18:14,960 --> 00:18:17,360
cases

425
00:18:17,360 --> 00:18:19,360
there's no clear reason why our

426
00:18:19,360 --> 00:18:21,120
frameworks

427
00:18:21,120 --> 00:18:24,640
will not yield more efficient psm

428
00:18:24,640 --> 00:18:27,760
for example you might ask our two-party

429
00:18:27,760 --> 00:18:31,120
psm framework to find the two-part tpsm

430
00:18:31,120 --> 00:18:33,600
with communication complexity

431
00:18:33,600 --> 00:18:35,120
into the

432
00:18:35,120 --> 00:18:37,679
turnover 21 which is slightly smaller

433
00:18:37,679 --> 00:18:40,000
than square root

434
00:18:40,000 --> 00:18:40,960
okay

435
00:18:40,960 --> 00:18:43,120
given this budget

436
00:18:43,120 --> 00:18:44,720
the framework

437
00:18:44,720 --> 00:18:46,799
would find over

438
00:18:46,799 --> 00:18:48,320
600

439
00:18:48,320 --> 00:18:50,240
referee computable terms

440
00:18:50,240 --> 00:18:54,080
and only over 100 hard times

441
00:18:54,080 --> 00:18:58,000
so it looks very promising

442
00:18:58,000 --> 00:19:00,000
it's probably easy to cancel out 100

443
00:19:00,000 --> 00:19:02,400
hard terms from the 600

444
00:19:02,400 --> 00:19:04,559
roughly computable terms

445
00:19:04,559 --> 00:19:05,520
but

446
00:19:05,520 --> 00:19:08,160
it doesn't work

447
00:19:08,400 --> 00:19:10,960
once the hard times are cancelled out

448
00:19:10,960 --> 00:19:13,600
so is target

449
00:19:13,600 --> 00:19:15,679
so what's wrong here what is the reason

450
00:19:15,679 --> 00:19:18,080
behind

451
00:19:18,320 --> 00:19:19,840
finally

452
00:19:19,840 --> 00:19:22,840
we are now satisfied with this upper

453
00:19:22,840 --> 00:19:26,240
bound this work is a not fully

454
00:19:26,240 --> 00:19:28,919
successful attempt towards

455
00:19:28,919 --> 00:19:32,080
sub-exponential communication capacity

456
00:19:32,080 --> 00:19:34,880
and the sub-communication capacity is

457
00:19:34,880 --> 00:19:38,240
probably the moon should open problem in

458
00:19:38,240 --> 00:19:40,720
the psm literature

459
00:19:40,720 --> 00:19:44,400
that is that that is

460
00:19:44,720 --> 00:19:48,200
thank you for listening

