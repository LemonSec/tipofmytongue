1
00:00:00,719 --> 00:00:03,280
hello my name is chad sharp and i will

2
00:00:03,280 --> 00:00:04,960
be presenting vector and functional

3
00:00:04,960 --> 00:00:07,040
commitments from lattices by chris

4
00:00:07,040 --> 00:00:11,280
pikert zachary pepin and myself

5
00:00:11,280 --> 00:00:13,440
vector commitment schemes are similar to

6
00:00:13,440 --> 00:00:14,880
commitment schemes that you may already

7
00:00:14,880 --> 00:00:17,119
be familiar with except instead of

8
00:00:17,119 --> 00:00:19,600
committing to a single value we commit

9
00:00:19,600 --> 00:00:21,520
to a vector of values

10
00:00:21,520 --> 00:00:23,920
and produce a concise commitment c so

11
00:00:23,920 --> 00:00:25,519
concise meaning the size of the

12
00:00:25,519 --> 00:00:28,720
commitment is significantly smaller than

13
00:00:28,720 --> 00:00:31,599
the vector itself so perhaps logarithmic

14
00:00:31,599 --> 00:00:32,320
or

15
00:00:32,320 --> 00:00:35,840
constant size with respect to the vector

16
00:00:35,840 --> 00:00:37,520
and then when it comes time to open the

17
00:00:37,520 --> 00:00:40,559
vector we open it at a position i and

18
00:00:40,559 --> 00:00:44,640
produce a proof a p sub i

19
00:00:44,640 --> 00:00:46,559
then given the commitment the proof p

20
00:00:46,559 --> 00:00:50,160
sub i and a message entry m sub i verify

21
00:00:50,160 --> 00:00:52,800
will return one if m sub i is the ith

22
00:00:52,800 --> 00:00:55,440
entry of m

23
00:00:56,079 --> 00:00:57,680
the security property of vector

24
00:00:57,680 --> 00:01:00,719
commitments is called position binding

25
00:01:00,719 --> 00:01:01,840
which states that it should be

26
00:01:01,840 --> 00:01:04,000
infeasible to open a commitment at

27
00:01:04,000 --> 00:01:06,240
position i at two different message

28
00:01:06,240 --> 00:01:08,479
entries m sub i not equal to m sub i

29
00:01:08,479 --> 00:01:11,479
prime

30
00:01:12,320 --> 00:01:14,000
an additional property one might want

31
00:01:14,000 --> 00:01:15,680
from vector commitment schemes is what

32
00:01:15,680 --> 00:01:18,799
we call stateless updates

33
00:01:18,799 --> 00:01:21,600
so this these are algorithms that allow

34
00:01:21,600 --> 00:01:24,240
you to update commitments and proofs to

35
00:01:24,240 --> 00:01:27,360
reflect changes in the underlying vector

36
00:01:27,360 --> 00:01:29,360
so here our

37
00:01:29,360 --> 00:01:31,119
algorithm for updating commitments takes

38
00:01:31,119 --> 00:01:33,360
in the old commitment c

39
00:01:33,360 --> 00:01:35,119
and index j

40
00:01:35,119 --> 00:01:37,600
along with a delta between the old

41
00:01:37,600 --> 00:01:40,079
message entry mj and the new message

42
00:01:40,079 --> 00:01:42,720
entry mj prime

43
00:01:42,720 --> 00:01:44,880
and it outputs a new commitment c prime

44
00:01:44,880 --> 00:01:47,040
to a new vector

45
00:01:47,040 --> 00:01:50,079
m prime which is equal to the old vector

46
00:01:50,079 --> 00:01:55,200
with its jth entry replaced by mj prime

47
00:01:55,200 --> 00:01:58,079
by analogy we have a similar algorithm

48
00:01:58,079 --> 00:02:00,000
for proofs that will take an old proof p

49
00:02:00,000 --> 00:02:02,880
sub i and the same j and delta and

50
00:02:02,880 --> 00:02:05,439
output a new proof p sub i prime

51
00:02:05,439 --> 00:02:08,160
that works for the new vector m prime

52
00:02:08,160 --> 00:02:11,599
and reflects the underlying change

53
00:02:11,760 --> 00:02:13,760
functional commitments can be viewed as

54
00:02:13,760 --> 00:02:16,480
a generalization of vector commitments

55
00:02:16,480 --> 00:02:19,520
where rather than open taking an index

56
00:02:19,520 --> 00:02:21,520
it takes a function f that's a member of

57
00:02:21,520 --> 00:02:22,400
some

58
00:02:22,400 --> 00:02:24,640
particular function family

59
00:02:24,640 --> 00:02:27,040
then when it comes time to verify verify

60
00:02:27,040 --> 00:02:30,400
accepts if f m is equal to y and so i

61
00:02:30,400 --> 00:02:32,239
say that this is a generalization of

62
00:02:32,239 --> 00:02:34,640
vector commitments because you can view

63
00:02:34,640 --> 00:02:36,480
a vector commitment scheme as a

64
00:02:36,480 --> 00:02:38,400
functional commitment scheme where the

65
00:02:38,400 --> 00:02:40,480
family of functions are

66
00:02:40,480 --> 00:02:42,879
just the projections the d projections

67
00:02:42,879 --> 00:02:46,879
if the vector is of length d for example

68
00:02:47,360 --> 00:02:49,760
the security property for functional

69
00:02:49,760 --> 00:02:52,160
commitments is called function binding

70
00:02:52,160 --> 00:02:53,120
which states that it should be

71
00:02:53,120 --> 00:02:55,280
infeasible to open a commitment at a

72
00:02:55,280 --> 00:02:56,400
function f

73
00:02:56,400 --> 00:02:58,400
at two different outputs y not equal to

74
00:02:58,400 --> 00:03:00,879
y prime

75
00:03:01,599 --> 00:03:04,239
so as for prior work for picture

76
00:03:04,239 --> 00:03:05,440
commitments

77
00:03:05,440 --> 00:03:07,360
one that you may be familiar with that

78
00:03:07,360 --> 00:03:08,640
seems to fit the bill for vector

79
00:03:08,640 --> 00:03:10,959
improvements are called merkle trees

80
00:03:10,959 --> 00:03:13,280
these provide logarithmically sized

81
00:03:13,280 --> 00:03:16,000
commitments and proofs

82
00:03:16,000 --> 00:03:17,680
for a vector of values

83
00:03:17,680 --> 00:03:19,920
but these are not statelessly updatable

84
00:03:19,920 --> 00:03:21,840
in order to update the commitment you

85
00:03:21,840 --> 00:03:24,720
have to regenerate it essentially

86
00:03:24,720 --> 00:03:26,720
statelessly updatable vcs came onto the

87
00:03:26,720 --> 00:03:29,120
scene with ly10 and cf-13 with

88
00:03:29,120 --> 00:03:34,640
constructions based on rsa pairings etc

89
00:03:34,879 --> 00:03:37,040
these had constant size proofs and

90
00:03:37,040 --> 00:03:40,159
constant size commitments

91
00:03:40,159 --> 00:03:42,080
additionally there are merkle like

92
00:03:42,080 --> 00:03:43,599
statelessly updatable vector common

93
00:03:43,599 --> 00:03:44,560
schemes

94
00:03:44,560 --> 00:03:46,640
based on the short integer solution

95
00:03:46,640 --> 00:03:47,519
problem

96
00:03:47,519 --> 00:03:48,319
uh

97
00:03:48,319 --> 00:03:49,920
and i say merkel-like they were it was a

98
00:03:49,920 --> 00:03:52,239
sort of tree construction um but it

99
00:03:52,239 --> 00:03:53,920
maintained statelessly stateless

100
00:03:53,920 --> 00:03:55,519
updatability whereas the merkle trees

101
00:03:55,519 --> 00:03:57,439
did not

102
00:03:57,439 --> 00:03:59,200
and there are many more schemes with

103
00:03:59,200 --> 00:04:02,000
with many more different applications um

104
00:04:02,000 --> 00:04:03,680
you know including verifiable

105
00:04:03,680 --> 00:04:05,680
outsourcing of storage verifiable zero

106
00:04:05,680 --> 00:04:07,040
knowledge sets cryptographic

107
00:04:07,040 --> 00:04:08,799
accumulators pseudo-anonymous

108
00:04:08,799 --> 00:04:12,400
credentials and cryptocurrencies

109
00:04:12,400 --> 00:04:14,799
as for functional commitment schemes

110
00:04:14,799 --> 00:04:18,160
there are numerous to highlight a few

111
00:04:18,160 --> 00:04:19,680
the functional scheme for linear

112
00:04:19,680 --> 00:04:21,440
functions

113
00:04:21,440 --> 00:04:25,360
was proposed in lry16 based on pairings

114
00:04:25,360 --> 00:04:27,360
another functional scheme was proposed

115
00:04:27,360 --> 00:04:29,600
recently in nlp 20

116
00:04:29,600 --> 00:04:32,000
on a class of functions the

117
00:04:32,000 --> 00:04:35,120
authors deemed sparse polynomials

118
00:04:35,120 --> 00:04:37,280
but one common theme amongst all of the

119
00:04:37,280 --> 00:04:39,040
functional equipment schemes that have

120
00:04:39,040 --> 00:04:40,560
been

121
00:04:40,560 --> 00:04:43,040
created thus far at least those based on

122
00:04:43,040 --> 00:04:44,960
falsifiable assumptions

123
00:04:44,960 --> 00:04:46,400
has been that they

124
00:04:46,400 --> 00:04:48,400
only work for classes of functions that

125
00:04:48,400 --> 00:04:50,639
are called linearizable which means that

126
00:04:50,639 --> 00:04:53,759
the functions in that class are

127
00:04:53,759 --> 00:04:56,160
linear with respect to some fixed

128
00:04:56,160 --> 00:04:59,759
pre-processing of the message m

129
00:04:59,919 --> 00:05:01,840
we can go further than linearizable

130
00:05:01,840 --> 00:05:02,880
functions

131
00:05:02,880 --> 00:05:04,639
using snarks for np

132
00:05:04,639 --> 00:05:06,080
but these cannot be constructed from

133
00:05:06,080 --> 00:05:08,000
falsifiable assumptions so as far as

134
00:05:08,000 --> 00:05:10,639
falsifiable assumptions go thus far we

135
00:05:10,639 --> 00:05:12,320
can only we can only get linearizable

136
00:05:12,320 --> 00:05:14,400
functions

137
00:05:14,400 --> 00:05:15,840
there are numerous applications to

138
00:05:15,840 --> 00:05:17,280
functional equipment schemes including

139
00:05:17,280 --> 00:05:19,280
verifiable secret sharing content

140
00:05:19,280 --> 00:05:21,120
extraction signatures and serial

141
00:05:21,120 --> 00:05:24,120
knowledge

142
00:05:25,120 --> 00:05:26,800
in this paper we provide two main

143
00:05:26,800 --> 00:05:28,639
contributions along with two secondary

144
00:05:28,639 --> 00:05:29,919
contributions

145
00:05:29,919 --> 00:05:31,759
the two main contributions are as

146
00:05:31,759 --> 00:05:35,120
follows we provide a new post quantum

147
00:05:35,120 --> 00:05:37,120
scheme based on sas that's statelessly

148
00:05:37,120 --> 00:05:38,639
updatable

149
00:05:38,639 --> 00:05:40,720
and is has significantly shorter proof

150
00:05:40,720 --> 00:05:42,560
sizes than the only other one which was

151
00:05:42,560 --> 00:05:44,880
psty

152
00:05:44,880 --> 00:05:47,440
so to compare the two

153
00:05:47,440 --> 00:05:49,039
in this talk i'll be presenting our base

154
00:05:49,039 --> 00:05:51,039
construction but we also

155
00:05:51,039 --> 00:05:53,360
apply a tree transformation to it to

156
00:05:53,360 --> 00:05:54,560
make it

157
00:05:54,560 --> 00:05:56,479
to make it more suitable for vectors of

158
00:05:56,479 --> 00:05:58,240
large arity

159
00:05:58,240 --> 00:06:03,280
but here we compare it against psty with

160
00:06:03,520 --> 00:06:06,000
a a vector with respect to a vector of

161
00:06:06,000 --> 00:06:08,479
size d to the h and we note that we we

162
00:06:08,479 --> 00:06:10,560
lose a factor of d in the proof sizes

163
00:06:10,560 --> 00:06:12,560
compared to psty

164
00:06:12,560 --> 00:06:14,880
and as it turns out if you optimize dnh

165
00:06:14,880 --> 00:06:16,479
what you end up with

166
00:06:16,479 --> 00:06:18,000
is that d should be some small

167
00:06:18,000 --> 00:06:19,520
polynomial

168
00:06:19,520 --> 00:06:21,360
and so we're losing a small polynomial

169
00:06:21,360 --> 00:06:23,919
factor in proof sizes at the cost of our

170
00:06:23,919 --> 00:06:25,919
public parameters gain a small

171
00:06:25,919 --> 00:06:28,080
polynomial this seems like a worthy

172
00:06:28,080 --> 00:06:30,240
trade-off since

173
00:06:30,240 --> 00:06:32,560
one assumes there would be many proofs

174
00:06:32,560 --> 00:06:36,400
for it for any set of public parameters

175
00:06:36,720 --> 00:06:39,199
we also provide a new sis based

176
00:06:39,199 --> 00:06:40,479
functional equipment scheme for

177
00:06:40,479 --> 00:06:42,319
arbitrary bounded boolean circuits this

178
00:06:42,319 --> 00:06:45,600
goes way past linearizable functions

179
00:06:45,600 --> 00:06:47,360
this is the first functional commitment

180
00:06:47,360 --> 00:06:49,520
scheme based on a falsifiable assumption

181
00:06:49,520 --> 00:06:52,319
to go past linearizable functions

182
00:06:52,319 --> 00:06:53,759
and it's the first post-quantum

183
00:06:53,759 --> 00:06:55,280
functional commitment scheme from a

184
00:06:55,280 --> 00:06:58,240
falsifiable assumption

185
00:06:58,240 --> 00:07:01,520
our new fc scheme works in a new model

186
00:07:01,520 --> 00:07:03,520
in which a the permanently online in

187
00:07:03,520 --> 00:07:04,720
which the online authority that

188
00:07:04,720 --> 00:07:06,000
generated the

189
00:07:06,000 --> 00:07:07,759
setup uh the journey of the public

190
00:07:07,759 --> 00:07:09,039
parameters

191
00:07:09,039 --> 00:07:11,440
uh generates the generates reusable

192
00:07:11,440 --> 00:07:13,280
opening keys for any desired function so

193
00:07:13,280 --> 00:07:14,880
it remains online after it generates the

194
00:07:14,880 --> 00:07:16,720
public parameters

195
00:07:16,720 --> 00:07:18,479
we provide two secondary contributions

196
00:07:18,479 --> 00:07:19,759
which i won't be talking about in this

197
00:07:19,759 --> 00:07:21,199
presentation

198
00:07:21,199 --> 00:07:23,280
uh we provide a formal definition and

199
00:07:23,280 --> 00:07:25,759
construction of a zero knowledge vector

200
00:07:25,759 --> 00:07:26,960
commitment scheme

201
00:07:26,960 --> 00:07:29,360
and we provide a formal analysis of a

202
00:07:29,360 --> 00:07:31,599
long known folklore merkle-like tree

203
00:07:31,599 --> 00:07:34,080
construction that adapts vector

204
00:07:34,080 --> 00:07:37,120
equipment schemes to

205
00:07:37,280 --> 00:07:38,400
to work

206
00:07:38,400 --> 00:07:40,240
for function for vectors of very large

207
00:07:40,240 --> 00:07:41,759
arity

208
00:07:41,759 --> 00:07:43,120
our two schemes are based on the short

209
00:07:43,120 --> 00:07:44,800
integer solution problem so it's a brief

210
00:07:44,800 --> 00:07:46,720
reminder of what that is short integer

211
00:07:46,720 --> 00:07:49,440
solution problem

212
00:07:49,440 --> 00:07:51,440
says that given a uniformly random

213
00:07:51,440 --> 00:07:53,840
matrix a the goal is to find a non-zero

214
00:07:53,840 --> 00:07:56,400
vector x such that a times x is equal to

215
00:07:56,400 --> 00:07:59,919
0 mod q and x is short so has length

216
00:07:59,919 --> 00:08:02,960
less than beta in this case

217
00:08:02,960 --> 00:08:05,280
so our sas based vector and scheme is as

218
00:08:05,280 --> 00:08:06,400
follows

219
00:08:06,400 --> 00:08:07,440
in order to generate the public

220
00:08:07,440 --> 00:08:08,800
parameters

221
00:08:08,800 --> 00:08:11,120
for a

222
00:08:11,280 --> 00:08:15,039
vectors of rdd and security parameter n

223
00:08:15,039 --> 00:08:17,199
we generate a uniformly

224
00:08:17,199 --> 00:08:20,160
random matrix u with columns u0 through

225
00:08:20,160 --> 00:08:22,160
ud minus one

226
00:08:22,160 --> 00:08:23,360
and then we use a technique called

227
00:08:23,360 --> 00:08:25,759
trapdoor pre-image sampling to first

228
00:08:25,759 --> 00:08:27,599
generate

229
00:08:27,599 --> 00:08:30,479
d matrices ai with trapdoors

230
00:08:30,479 --> 00:08:32,399
and then for

231
00:08:32,399 --> 00:08:34,320
all distinct ij

232
00:08:34,320 --> 00:08:37,200
we generate short gaussian

233
00:08:37,200 --> 00:08:41,519
vectors rij such that a i times rij is

234
00:08:41,519 --> 00:08:43,360
equal to uj

235
00:08:43,360 --> 00:08:45,519
and then our public parameters are all

236
00:08:45,519 --> 00:08:49,519
these ais rijs and u

237
00:08:49,519 --> 00:08:51,040
to sort of view the relationship between

238
00:08:51,040 --> 00:08:53,200
these public parameters in a different

239
00:08:53,200 --> 00:08:56,320
way here's a matrix equation

240
00:08:56,320 --> 00:08:58,000
which shows the relationship between

241
00:08:58,000 --> 00:09:00,160
them

242
00:09:01,440 --> 00:09:04,240
to commit to a d bit message vector

243
00:09:04,240 --> 00:09:04,959
m

244
00:09:04,959 --> 00:09:07,120
we simply multiply the message vector m

245
00:09:07,120 --> 00:09:10,959
by u and produce command c

246
00:09:10,959 --> 00:09:14,160
to open this vector we multiply the ith

247
00:09:14,160 --> 00:09:16,800
row of that r tilde matrix from before

248
00:09:16,800 --> 00:09:18,959
by m so as a reminder of what that looks

249
00:09:18,959 --> 00:09:20,560
like

250
00:09:20,560 --> 00:09:23,120
we multiply um uh uh

251
00:09:23,120 --> 00:09:26,399
each entry of m by one of these arm our

252
00:09:26,399 --> 00:09:27,440
vectors

253
00:09:27,440 --> 00:09:28,399
uh

254
00:09:28,399 --> 00:09:30,560
and then sum them up um but the key

255
00:09:30,560 --> 00:09:32,399
thing to note here is that we sort of

256
00:09:32,399 --> 00:09:35,360
zero out the ith entry of m with this

257
00:09:35,360 --> 00:09:37,839
zero here

258
00:09:38,160 --> 00:09:39,839
then to verify

259
00:09:39,839 --> 00:09:42,160
we simply accept if p i is sufficiently

260
00:09:42,160 --> 00:09:44,880
short and the commitment c is equal to a

261
00:09:44,880 --> 00:09:48,320
i p i plus m i u i

262
00:09:48,320 --> 00:09:51,040
as for why this works the key thing to

263
00:09:51,040 --> 00:09:53,519
recognize is that when we multiply a i

264
00:09:53,519 --> 00:09:56,480
um by this you know by p i which is the

265
00:09:56,480 --> 00:09:58,399
i throw of r times m

266
00:09:58,399 --> 00:10:02,079
um multiplying a i by these r's give us

267
00:10:02,079 --> 00:10:02,959
u's

268
00:10:02,959 --> 00:10:05,600
um and so we end up with a i times p i

269
00:10:05,600 --> 00:10:08,000
is it's the sum of

270
00:10:08,000 --> 00:10:09,200
uh

271
00:10:09,200 --> 00:10:12,000
r i j times m j

272
00:10:12,000 --> 00:10:13,519
for all j not equal to i remember

273
00:10:13,519 --> 00:10:16,399
because we zeroed out the ith entry of m

274
00:10:16,399 --> 00:10:18,800
then once we add mi ui

275
00:10:18,800 --> 00:10:21,040
it's as if we are multiplying the matrix

276
00:10:21,040 --> 00:10:22,720
u by m and of course that's equal to the

277
00:10:22,720 --> 00:10:25,279
common c

278
00:10:25,839 --> 00:10:29,120
now to update uh commitments and proofs

279
00:10:29,120 --> 00:10:30,640
updates stateless updates sort of just

280
00:10:30,640 --> 00:10:32,399
fall out of the fact that

281
00:10:32,399 --> 00:10:33,600
the commitment function and the proof

282
00:10:33,600 --> 00:10:36,000
function are both linear themselves

283
00:10:36,000 --> 00:10:38,959
and so we simply multiply our delta

284
00:10:38,959 --> 00:10:41,200
between the old entry and the new entry

285
00:10:41,200 --> 00:10:44,800
by the appropriate uj or rij in the case

286
00:10:44,800 --> 00:10:47,279
of update p

287
00:10:47,279 --> 00:10:49,120
and then add that to the old proof and

288
00:10:49,120 --> 00:10:52,079
comment respectively

289
00:10:52,079 --> 00:10:53,760
okay moving on to functional commitments

290
00:10:53,760 --> 00:10:55,920
with authority so this looks very much

291
00:10:55,920 --> 00:10:57,920
like the diagram we saw functional

292
00:10:57,920 --> 00:11:00,079
components before except now remember

293
00:11:00,079 --> 00:11:01,760
that the authority that generated the

294
00:11:01,760 --> 00:11:03,920
public parameters remains online

295
00:11:03,920 --> 00:11:05,120
permanently

296
00:11:05,120 --> 00:11:05,920
and

297
00:11:05,920 --> 00:11:07,920
in order to

298
00:11:07,920 --> 00:11:10,399
use open we must first get an opening

299
00:11:10,399 --> 00:11:12,160
key from extract and this opening key is

300
00:11:12,160 --> 00:11:13,360
public you can imagine it being on a

301
00:11:13,360 --> 00:11:16,160
public bulletin board it's also reusable

302
00:11:16,160 --> 00:11:17,040
um

303
00:11:17,040 --> 00:11:19,760
and so we get the opening key via from

304
00:11:19,760 --> 00:11:23,439
extract and then we can use that in open

305
00:11:23,920 --> 00:11:25,680
so the base of our

306
00:11:25,680 --> 00:11:28,000
functional equipment scheme are what are

307
00:11:28,000 --> 00:11:29,839
called homomorphic commitments so these

308
00:11:29,839 --> 00:11:30,880
these were

309
00:11:30,880 --> 00:11:34,240
first introduced in gsw13

310
00:11:34,240 --> 00:11:37,360
so this says that a commitment to x with

311
00:11:37,360 --> 00:11:38,720
randomness r

312
00:11:38,720 --> 00:11:41,519
under a public matrix a is equal to ar

313
00:11:41,519 --> 00:11:43,519
plus encode x

314
00:11:43,519 --> 00:11:46,800
a is just some public matrix

315
00:11:46,800 --> 00:11:49,760
r is sufficiently short randomness

316
00:11:49,760 --> 00:11:52,320
and the key point here is that these the

317
00:11:52,320 --> 00:11:54,240
scheme has additive and multiplicative

318
00:11:54,240 --> 00:11:56,399
homomorphisms and so if we want to

319
00:11:56,399 --> 00:11:58,720
um emulate uh

320
00:11:58,720 --> 00:12:00,240
boolean functions our betray boolean

321
00:12:00,240 --> 00:12:02,399
functions addition and multiplication

322
00:12:02,399 --> 00:12:04,079
are of course enough because we get and

323
00:12:04,079 --> 00:12:05,920
or gates we can get nand gates from that

324
00:12:05,920 --> 00:12:08,399
etc

325
00:12:08,560 --> 00:12:10,480
so given these homomorphisms we can

326
00:12:10,480 --> 00:12:12,959
construct this algorithm eval which

327
00:12:12,959 --> 00:12:15,839
takes a function f a commitment cx and

328
00:12:15,839 --> 00:12:19,200
optionally randomness rx

329
00:12:19,200 --> 00:12:22,480
and it outputs a new commitment cxf

330
00:12:22,480 --> 00:12:24,320
and if the randomness was provided then

331
00:12:24,320 --> 00:12:27,519
it outputs new randomness our xf

332
00:12:27,519 --> 00:12:30,000
such that rxf is still short

333
00:12:30,000 --> 00:12:33,040
and if cx is a commitment to x under rx

334
00:12:33,040 --> 00:12:34,959
under randomness rx

335
00:12:34,959 --> 00:12:38,160
then cxf is a commitment to f of x under

336
00:12:38,160 --> 00:12:39,760
our x f

337
00:12:39,760 --> 00:12:41,360
right and so

338
00:12:41,360 --> 00:12:43,120
uh um that you know

339
00:12:43,120 --> 00:12:44,720
we're taking f to be from an arbitrary

340
00:12:44,720 --> 00:12:46,720
function family here but concretely you

341
00:12:46,720 --> 00:12:48,079
can imagine the function family being

342
00:12:48,079 --> 00:12:50,880
boolean functions

343
00:12:51,600 --> 00:12:53,440
now to generate the public parameters

344
00:12:53,440 --> 00:12:55,120
for our functional commitment scheme we

345
00:12:55,120 --> 00:12:57,200
first generate a matrix a with trap door

346
00:12:57,200 --> 00:12:58,079
t

347
00:12:58,079 --> 00:13:01,760
and the uniformly random matrix c

348
00:13:03,600 --> 00:13:06,480
we store the matrix c the matrix a and

349
00:13:06,480 --> 00:13:08,079
the trapdoor t

350
00:13:08,079 --> 00:13:10,000
as an extraction key and so this will be

351
00:13:10,000 --> 00:13:12,160
kept by the by the

352
00:13:12,160 --> 00:13:13,519
online authority

353
00:13:13,519 --> 00:13:15,680
and the public parameters are just cna

354
00:13:15,680 --> 00:13:19,040
so it doesn't include the trapdoor

355
00:13:19,680 --> 00:13:21,760
the trap the tag trapdoor techniques

356
00:13:21,760 --> 00:13:25,120
that we use allow us to map a

357
00:13:25,120 --> 00:13:28,399
to a unique af for every f in the

358
00:13:28,399 --> 00:13:30,399
function family and the key is that the

359
00:13:30,399 --> 00:13:34,639
trapdoor t will still allow us to

360
00:13:34,639 --> 00:13:38,560
pre-image sample with these afs

361
00:13:38,720 --> 00:13:40,720
and what's going to be the key for

362
00:13:40,720 --> 00:13:42,000
understanding this scheme at least

363
00:13:42,000 --> 00:13:43,199
intuitively

364
00:13:43,199 --> 00:13:44,800
is to think of c as being a

365
00:13:44,800 --> 00:13:46,399
superposition of commitments to all

366
00:13:46,399 --> 00:13:48,639
functions f in the family so it's it's

367
00:13:48,639 --> 00:13:50,240
simultaneous it's a commitment to

368
00:13:50,240 --> 00:13:51,279
functions

369
00:13:51,279 --> 00:13:53,360
and it's sort of simultaneously all at

370
00:13:53,360 --> 00:13:57,279
once a commitment to every function um

371
00:13:57,279 --> 00:13:59,680
in the uh in the family albeit under

372
00:13:59,680 --> 00:14:01,120
different randomness in different public

373
00:14:01,120 --> 00:14:03,839
matrices

374
00:14:03,839 --> 00:14:04,800
so

375
00:14:04,800 --> 00:14:06,560
now to describe the extract function

376
00:14:06,560 --> 00:14:08,000
which is run by the online authority to

377
00:14:08,000 --> 00:14:10,000
generate the opening keys

378
00:14:10,000 --> 00:14:12,160
what extract does is it uses the

379
00:14:12,160 --> 00:14:13,680
trapdoor t

380
00:14:13,680 --> 00:14:16,639
to generate a witness that says that c

381
00:14:16,639 --> 00:14:18,560
is a commitment to f right so i said

382
00:14:18,560 --> 00:14:20,240
that c is a can be viewed as a

383
00:14:20,240 --> 00:14:23,279
superposition of of commitments to all

384
00:14:23,279 --> 00:14:25,519
uh functions f in the family

385
00:14:25,519 --> 00:14:27,920
um extract gives us a witness that says

386
00:14:27,920 --> 00:14:30,639
that c is a

387
00:14:30,639 --> 00:14:33,600
commitment to this particular f

388
00:14:33,600 --> 00:14:35,600
with respect to the public matrix a sub

389
00:14:35,600 --> 00:14:36,320
f

390
00:14:36,320 --> 00:14:37,199
and

391
00:14:37,199 --> 00:14:38,720
the opening key is going to be the

392
00:14:38,720 --> 00:14:42,000
randomness r sub f

393
00:14:42,800 --> 00:14:45,120
now in order to commit

394
00:14:45,120 --> 00:14:47,120
so again to think of remember we thought

395
00:14:47,120 --> 00:14:48,639
of c c is a

396
00:14:48,639 --> 00:14:50,480
superposition of

397
00:14:50,480 --> 00:14:52,800
commitments to functions

398
00:14:52,800 --> 00:14:54,079
so

399
00:14:54,079 --> 00:14:56,000
we're going to a plot apply a particular

400
00:14:56,000 --> 00:14:57,120
function

401
00:14:57,120 --> 00:14:59,519
across you know all those possible

402
00:14:59,519 --> 00:15:00,800
states

403
00:15:00,800 --> 00:15:02,800
such that c sub m which is going to be

404
00:15:02,800 --> 00:15:04,800
the output of commit

405
00:15:04,800 --> 00:15:07,839
is a superposition of commitments to f m

406
00:15:07,839 --> 00:15:09,440
for all f and f

407
00:15:09,440 --> 00:15:10,800
right so what is the function that we

408
00:15:10,800 --> 00:15:12,959
need to apply well it's going to be this

409
00:15:12,959 --> 00:15:15,600
function u sub m of f where m here is

410
00:15:15,600 --> 00:15:17,279
hard coded into the function

411
00:15:17,279 --> 00:15:20,160
u sub m takes in a function as input

412
00:15:20,160 --> 00:15:21,360
namely f

413
00:15:21,360 --> 00:15:24,639
and it outputs f of m right so c here

414
00:15:24,639 --> 00:15:26,399
is a superposition of commitments to

415
00:15:26,399 --> 00:15:27,600
functions

416
00:15:27,600 --> 00:15:30,800
c sub m is a superposition of uh um

417
00:15:30,800 --> 00:15:31,839
outputs

418
00:15:31,839 --> 00:15:32,880
right right it's the position of

419
00:15:32,880 --> 00:15:34,399
commitments to outputs

420
00:15:34,399 --> 00:15:35,920
um

421
00:15:35,920 --> 00:15:37,440
because we applied this function sort of

422
00:15:37,440 --> 00:15:41,360
across all those possible states

423
00:15:41,360 --> 00:15:43,839
now open um

424
00:15:43,839 --> 00:15:45,199
looks very similar to commit because in

425
00:15:45,199 --> 00:15:47,199
fact it does the same thing

426
00:15:47,199 --> 00:15:48,880
and in fact the cm that's generated in

427
00:15:48,880 --> 00:15:50,639
commit and the cm that's generated and

428
00:15:50,639 --> 00:15:52,079
open

429
00:15:52,079 --> 00:15:52,839
are

430
00:15:52,839 --> 00:15:55,759
identical but the difference is open

431
00:15:55,759 --> 00:15:57,920
takes in the message m the function f

432
00:15:57,920 --> 00:16:01,680
um and the uh um

433
00:16:01,680 --> 00:16:05,040
opening key r sub f

434
00:16:05,040 --> 00:16:06,800
and the key here is that remember r sub

435
00:16:06,800 --> 00:16:08,959
f is a witness that says c is a

436
00:16:08,959 --> 00:16:10,399
commitment to f

437
00:16:10,399 --> 00:16:13,519
well eval has this optional argument

438
00:16:13,519 --> 00:16:16,320
where we can pass

439
00:16:16,560 --> 00:16:18,320
randomness to it and get the new

440
00:16:18,320 --> 00:16:20,000
randomness out

441
00:16:20,000 --> 00:16:22,399
and so we pass it a witness that says c

442
00:16:22,399 --> 00:16:24,240
is a function to f

443
00:16:24,240 --> 00:16:26,720
and what we get is a witness that c sub

444
00:16:26,720 --> 00:16:29,600
m is a function is a commitment to f of

445
00:16:29,600 --> 00:16:31,680
m

446
00:16:33,040 --> 00:16:35,279
and then we verify we do sort of exactly

447
00:16:35,279 --> 00:16:37,440
what i've described here

448
00:16:37,440 --> 00:16:39,680
um we accept if r

449
00:16:39,680 --> 00:16:41,600
if if r sub m f

450
00:16:41,600 --> 00:16:45,360
is short and if it is indeed a um c sub

451
00:16:45,360 --> 00:16:48,399
m is indeed a commitment to y um under

452
00:16:48,399 --> 00:16:50,079
the randomness r sub mf and the public

453
00:16:50,079 --> 00:16:52,959
matrix a sub f

454
00:16:54,079 --> 00:16:55,759
that this concludes my presentation

455
00:16:55,759 --> 00:16:58,399
thank you very much for listening i hope

456
00:16:58,399 --> 00:17:01,880
you have a great day

