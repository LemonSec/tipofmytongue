1
00:00:02,080 --> 00:00:03,679
hi everybody this talk is about

2
00:00:03,679 --> 00:00:05,440
ring-based identity-based encryption a

3
00:00:05,440 --> 00:00:07,520
synthetically shortened apk and title

4
00:00:07,520 --> 00:00:08,880
security

5
00:00:08,880 --> 00:00:10,719
the authors are parhadapala from

6
00:00:10,719 --> 00:00:13,120
hollyoak and genoa

7
00:00:13,120 --> 00:00:15,280
i'm parha tabla

8
00:00:15,280 --> 00:00:16,880
the identity based encryption is

9
00:00:16,880 --> 00:00:19,439
generalization of the public encryption

10
00:00:19,439 --> 00:00:21,359
that the encrypted can encrypt the

11
00:00:21,359 --> 00:00:24,160
message under the server's

12
00:00:24,160 --> 00:00:26,400
name or identity

13
00:00:26,400 --> 00:00:28,400
the concept is first introduced by

14
00:00:28,400 --> 00:00:29,599
xiaomir

15
00:00:29,599 --> 00:00:31,760
and the construct first construction is

16
00:00:31,760 --> 00:00:34,480
given by bonnie and franklin

17
00:00:34,480 --> 00:00:36,640
the security is similar to the public

18
00:00:36,640 --> 00:00:38,719
encryption scheme

19
00:00:38,719 --> 00:00:39,920
that

20
00:00:39,920 --> 00:00:42,160
in the ibe the challenge at the

21
00:00:42,160 --> 00:00:45,280
adversary allowed to query

22
00:00:45,280 --> 00:00:48,320
polynomially many identities

23
00:00:48,320 --> 00:00:50,239
and they get the secret case for the

24
00:00:50,239 --> 00:00:52,800
identities and the challenge for two

25
00:00:52,800 --> 00:00:54,800
messages under the challenge identity

26
00:00:54,800 --> 00:00:56,960
which is not created before

27
00:00:56,960 --> 00:00:59,680
and receiving the server challenge

28
00:00:59,680 --> 00:01:02,640
analytics and it gets which

29
00:01:02,640 --> 00:01:04,640
message is encrypted under the challenge

30
00:01:04,640 --> 00:01:07,199
activity

31
00:01:07,600 --> 00:01:10,960
this is a adaptive security notion

32
00:01:10,960 --> 00:01:13,520
the construction under the

33
00:01:13,520 --> 00:01:14,960
standard model

34
00:01:14,960 --> 00:01:17,600
uh in the classic uh

35
00:01:17,600 --> 00:01:20,400
in the classic assumptions there's many

36
00:01:20,400 --> 00:01:21,360
uh

37
00:01:21,360 --> 00:01:22,720
constructions

38
00:01:22,720 --> 00:01:24,400
among them the water's construction is

39
00:01:24,400 --> 00:01:26,880
very simple and efficient they use the

40
00:01:26,880 --> 00:01:29,040
drill system encryption

41
00:01:29,040 --> 00:01:32,000
but we don't know their system from lwe

42
00:01:32,000 --> 00:01:36,479
or postcondom ibs compact selector ips

43
00:01:36,479 --> 00:01:39,119
but there's many tries to construct

44
00:01:39,119 --> 00:01:41,040
lattice-based encryption

45
00:01:41,040 --> 00:01:44,079
that is based ibs schemes uh that's as

46
00:01:44,079 --> 00:01:48,399
compact as the selective secure one

47
00:01:48,720 --> 00:01:50,399
uh the iba

48
00:01:50,399 --> 00:01:52,320
that was a first construction is given

49
00:01:52,320 --> 00:01:55,920
by ibv10 which is adaptive security and

50
00:01:55,920 --> 00:01:59,439
their master publication is

51
00:01:59,439 --> 00:02:01,439
lambda matrixes

52
00:02:01,439 --> 00:02:02,240
the

53
00:02:02,240 --> 00:02:04,399
currently the best construction is given

54
00:02:04,399 --> 00:02:06,079
by yamada and

55
00:02:06,079 --> 00:02:08,720
and the construction needs omega log

56
00:02:08,720 --> 00:02:09,758
lambda

57
00:02:09,758 --> 00:02:13,440
matrixes in the public banking

58
00:02:13,440 --> 00:02:16,080
the yamadas construction is the bank

59
00:02:16,080 --> 00:02:17,200
result

60
00:02:17,200 --> 00:02:19,920
and the design is implicit

61
00:02:19,920 --> 00:02:21,920
the natural question is uh can we

62
00:02:21,920 --> 00:02:23,599
construct a better

63
00:02:23,599 --> 00:02:25,680
uh lattice-based i believe is more

64
00:02:25,680 --> 00:02:27,680
compact temperature and without using

65
00:02:27,680 --> 00:02:30,480
the bearing glycerin

66
00:02:30,480 --> 00:02:31,760
and

67
00:02:31,760 --> 00:02:34,840
of course that's explicitly designed

68
00:02:34,840 --> 00:02:38,640
them for the security for adaptive ip

69
00:02:38,640 --> 00:02:40,560
schemes

70
00:02:40,560 --> 00:02:42,720
there's two techniques to

71
00:02:42,720 --> 00:02:44,640
pre prove the

72
00:02:44,640 --> 00:02:47,920
adaptive security of id ibes the first

73
00:02:47,920 --> 00:02:51,760
is that this artificial labor technique

74
00:02:51,760 --> 00:02:53,599
in this technique

75
00:02:53,599 --> 00:02:56,400
the reduction will increase the running

76
00:02:56,400 --> 00:03:01,040
time by one over epsilon squared

77
00:03:01,120 --> 00:03:04,400
without the artificial technique

78
00:03:04,400 --> 00:03:07,200
the reduction can be removed the running

79
00:03:07,200 --> 00:03:08,720
time blow up

80
00:03:08,720 --> 00:03:11,120
but the advantage is we

81
00:03:11,120 --> 00:03:14,400
lose another epsilon

82
00:03:14,800 --> 00:03:17,360
so another natural question is can we do

83
00:03:17,360 --> 00:03:19,200
better

84
00:03:19,200 --> 00:03:22,319
for these two questions in this paper we

85
00:03:22,319 --> 00:03:24,959
will give a better

86
00:03:24,959 --> 00:03:26,799
ring based identity base

87
00:03:26,799 --> 00:03:29,840
uh ibu is more compact

88
00:03:29,840 --> 00:03:32,159
mbk and the best better security

89
00:03:32,159 --> 00:03:34,159
analysis for both this than the without

90
00:03:34,159 --> 00:03:36,560
artificial approach

91
00:03:36,560 --> 00:03:40,400
that's your first rb design

92
00:03:40,400 --> 00:03:44,080
let's recap the ibb's construction and

93
00:03:44,080 --> 00:03:46,000
in their construction the master public

94
00:03:46,000 --> 00:03:48,080
k is consists of

95
00:03:48,080 --> 00:03:51,200
uh l plus one matrixes a and b one to b

96
00:03:51,200 --> 00:03:52,159
l

97
00:03:52,159 --> 00:03:54,480
uh the key extraction algorithm uh on

98
00:03:54,480 --> 00:03:56,879
input the id and the master

99
00:03:56,879 --> 00:03:58,159
secret k

100
00:03:58,159 --> 00:04:00,799
first computes the fyd

101
00:04:00,799 --> 00:04:03,760
like this and using the sample left

102
00:04:03,760 --> 00:04:05,599
using that ta

103
00:04:05,599 --> 00:04:08,799
the chapter of a

104
00:04:08,799 --> 00:04:10,319
to sample a

105
00:04:10,319 --> 00:04:12,840
a gaussian

106
00:04:12,840 --> 00:04:14,879
distribution vector

107
00:04:14,879 --> 00:04:17,918
and added the skid

108
00:04:17,918 --> 00:04:20,320
to simulate the cajon algorithm dot that

109
00:04:20,320 --> 00:04:23,040
must replicate master secret k the

110
00:04:23,040 --> 00:04:27,040
simulator first replace this bis with a

111
00:04:27,040 --> 00:04:29,680
a times r i plus h i times g

112
00:04:29,680 --> 00:04:30,720
a

113
00:04:30,720 --> 00:04:33,919
a gsw type encoding and compute f id

114
00:04:33,919 --> 00:04:35,600
like this

115
00:04:35,600 --> 00:04:37,440
now from this we can see that

116
00:04:37,440 --> 00:04:39,919
if we let the second term

117
00:04:39,919 --> 00:04:41,199
by a

118
00:04:41,199 --> 00:04:45,280
function function of id and indexed by h

119
00:04:45,280 --> 00:04:49,840
i yeah indexed by l numbers hi

120
00:04:49,840 --> 00:04:54,960
then the computation of hfid is

121
00:04:54,960 --> 00:04:56,400
is

122
00:04:56,400 --> 00:04:58,560
is a homomorphic evaluation of this

123
00:04:58,560 --> 00:05:00,560
function

124
00:05:00,560 --> 00:05:03,199
uh given given the gsw encoding of this

125
00:05:03,199 --> 00:05:04,560
one

126
00:05:04,560 --> 00:05:07,440
encoding of the hash function

127
00:05:07,440 --> 00:05:10,240
the index of the hash function

128
00:05:10,240 --> 00:05:11,600
and computes

129
00:05:11,600 --> 00:05:14,720
this hash function and another require

130
00:05:14,720 --> 00:05:17,360
from this hash function is that

131
00:05:17,360 --> 00:05:19,759
we we want this hash function

132
00:05:19,759 --> 00:05:20,639
part

133
00:05:20,639 --> 00:05:24,080
partition the identity space that means

134
00:05:24,080 --> 00:05:25,840
partition

135
00:05:25,840 --> 00:05:28,479
h id star for the challenge identity is

136
00:05:28,479 --> 00:05:29,919
equal to zero

137
00:05:29,919 --> 00:05:32,720
and for other identities uh the hash

138
00:05:32,720 --> 00:05:38,000
function hash of that id is not zero

139
00:05:38,000 --> 00:05:41,199
to satisfy these two uh requirements a

140
00:05:41,199 --> 00:05:42,320
yamadas

141
00:05:42,320 --> 00:05:44,320
designs the hash function like this a

142
00:05:44,320 --> 00:05:48,000
times id plus b mod a rho

143
00:05:48,000 --> 00:05:52,400
a b rows are omega log lambda bits

144
00:05:52,400 --> 00:05:55,120
and they should and ensure that this

145
00:05:55,120 --> 00:05:57,039
hash function is

146
00:05:57,039 --> 00:05:59,039
a partition function

147
00:05:59,039 --> 00:06:00,639
besides and

148
00:06:00,639 --> 00:06:02,639
but the homomorphic evaluation of this

149
00:06:02,639 --> 00:06:03,840
function

150
00:06:03,840 --> 00:06:07,039
needs varying points 0

151
00:06:07,039 --> 00:06:09,360
so now we show that

152
00:06:09,360 --> 00:06:11,840
improve this hash function we designed a

153
00:06:11,840 --> 00:06:14,240
hash function a new hash function that's

154
00:06:14,240 --> 00:06:16,400
only need omega load one ring vectors

155
00:06:16,400 --> 00:06:17,440
because

156
00:06:17,440 --> 00:06:19,919
the yamaha scheme needs omega lambda

157
00:06:19,919 --> 00:06:22,960
bits and encode h bits

158
00:06:22,960 --> 00:06:23,759
so

159
00:06:23,759 --> 00:06:25,680
the master public gains in yamada's

160
00:06:25,680 --> 00:06:28,319
scheme is omega log lambda ring vectors

161
00:06:28,319 --> 00:06:30,160
or matrix

162
00:06:30,160 --> 00:06:31,680
so improve them

163
00:06:31,680 --> 00:06:34,080
let's see our design

164
00:06:34,080 --> 00:06:37,039
first of all we let's see a result from

165
00:06:37,039 --> 00:06:38,400
fl afl

166
00:06:38,400 --> 00:06:40,479
they said that

167
00:06:40,479 --> 00:06:42,400
if a hash function

168
00:06:42,400 --> 00:06:44,960
satisfies the two probability

169
00:06:44,960 --> 00:06:47,759
properties the first is hash of x is

170
00:06:47,759 --> 00:06:49,280
equal to zero

171
00:06:49,280 --> 00:06:51,440
uh this probability is one over a

172
00:06:51,440 --> 00:06:54,240
and the condition probability for two x

173
00:06:54,240 --> 00:06:56,800
one different x one x two the

174
00:06:56,800 --> 00:06:59,120
conditional d uh probability is equals

175
00:06:59,120 --> 00:07:02,560
uh smaller than one over b where a is

176
00:07:02,560 --> 00:07:04,240
larger than b

177
00:07:04,240 --> 00:07:06,720
and b is larger than q

178
00:07:06,720 --> 00:07:08,160
then

179
00:07:08,160 --> 00:07:10,560
there is a partitioning this hash

180
00:07:10,560 --> 00:07:12,240
function will partition

181
00:07:12,240 --> 00:07:14,800
the x

182
00:07:15,199 --> 00:07:19,199
and the axis in the queue

183
00:07:19,199 --> 00:07:22,960
is a noticeable probability that is a

184
00:07:22,960 --> 00:07:25,840
different definition of the partitioning

185
00:07:25,840 --> 00:07:28,400
so our goal is to construct the hash

186
00:07:28,400 --> 00:07:32,000
functions above properties that means

187
00:07:32,000 --> 00:07:32,800
a

188
00:07:32,800 --> 00:07:33,680
b

189
00:07:33,680 --> 00:07:35,759
is large enough to

190
00:07:35,759 --> 00:07:37,680
larger than a polynomial q any

191
00:07:37,680 --> 00:07:40,080
polynomial q

192
00:07:40,080 --> 00:07:42,319
let's see a basic design

193
00:07:42,319 --> 00:07:45,360
for the basic design the hash of a z the

194
00:07:45,360 --> 00:07:46,800
input c

195
00:07:46,800 --> 00:07:48,319
which might be a

196
00:07:48,319 --> 00:07:50,479
identity in the identity based

197
00:07:50,479 --> 00:07:52,720
encryption

198
00:07:52,720 --> 00:07:56,240
it's a ecc of z which is a vector and we

199
00:07:56,240 --> 00:07:58,319
choose a randomly choose an r first

200
00:07:58,319 --> 00:07:59,520
place

201
00:07:59,520 --> 00:08:01,840
and a minus a beta i random

202
00:08:01,840 --> 00:08:03,759
element in z p

203
00:08:03,759 --> 00:08:06,960
so it's easy to see that for n is z

204
00:08:06,960 --> 00:08:10,160
the probability of h z equals zero is

205
00:08:10,160 --> 00:08:12,639
equal to one over p and the condition

206
00:08:12,639 --> 00:08:15,520
probability for any different c one z

207
00:08:15,520 --> 00:08:18,000
two is smaller than one minus epsilon

208
00:08:18,000 --> 00:08:20,319
where epsilon is a relative distance of

209
00:08:20,319 --> 00:08:23,919
the ecc the error correcting code

210
00:08:23,919 --> 00:08:25,599
it's obvious that

211
00:08:25,599 --> 00:08:28,240
this hash function is not satisfied as

212
00:08:28,240 --> 00:08:30,479
the requirements of lambda 1

213
00:08:30,479 --> 00:08:33,039
because p is very small it's not larger

214
00:08:33,039 --> 00:08:35,760
than any polynomial

215
00:08:35,760 --> 00:08:36,559
so

216
00:08:36,559 --> 00:08:37,760
a

217
00:08:37,760 --> 00:08:40,080
a intuitive construction is that

218
00:08:40,080 --> 00:08:43,200
parallel repeating the basic hash for t

219
00:08:43,200 --> 00:08:44,399
times

220
00:08:44,399 --> 00:08:46,880
so repetitive times we have a hash

221
00:08:46,880 --> 00:08:49,120
function a repetition a repetitional

222
00:08:49,120 --> 00:08:50,800
hash function

223
00:08:50,800 --> 00:08:52,720
which is edge of the repetition of

224
00:08:52,720 --> 00:08:55,040
height function of z is

225
00:08:55,040 --> 00:08:56,320
equal

226
00:08:56,320 --> 00:08:58,800
at z equals to zero the probability is

227
00:08:58,800 --> 00:09:01,519
equals to one over p to t

228
00:09:01,519 --> 00:09:03,279
and the conditional probability also

229
00:09:03,279 --> 00:09:07,279
smaller than one minus absolute t

230
00:09:07,279 --> 00:09:11,600
uh because if we set the t to a large

231
00:09:11,600 --> 00:09:13,680
enough so we can

232
00:09:13,680 --> 00:09:14,720
uh this

233
00:09:14,720 --> 00:09:17,440
uh these two probabilities is satisfied

234
00:09:17,440 --> 00:09:19,360
for the lambda one

235
00:09:19,360 --> 00:09:22,720
but the the vector we designed for the

236
00:09:22,720 --> 00:09:24,640
hash function outputs of hash function

237
00:09:24,640 --> 00:09:28,080
is not compatible uh with the rings or

238
00:09:28,080 --> 00:09:30,560
the design of ibe

239
00:09:30,560 --> 00:09:31,920
so

240
00:09:31,920 --> 00:09:34,320
we embed this uh repetition function

241
00:09:34,320 --> 00:09:37,040
into a ring vector like this we embed

242
00:09:37,040 --> 00:09:39,040
the vector into the

243
00:09:39,040 --> 00:09:41,360
exponent of x

244
00:09:41,360 --> 00:09:43,839
so we just say one to one

245
00:09:43,839 --> 00:09:45,279
and we have a

246
00:09:45,279 --> 00:09:48,720
the probabilities are straight

247
00:09:48,720 --> 00:09:50,800
so it's this embedding is to be embedded

248
00:09:50,800 --> 00:09:53,360
vector into a one ring element with

249
00:09:53,360 --> 00:09:55,600
small coefficients

250
00:09:55,600 --> 00:09:56,560
which is

251
00:09:56,560 --> 00:09:58,640
invertible

252
00:09:58,640 --> 00:10:00,480
by the design

253
00:10:00,480 --> 00:10:01,600
and

254
00:10:01,600 --> 00:10:04,399
this kind of design is satisf satisfy

255
00:10:04,399 --> 00:10:06,880
the requirements for lambo one

256
00:10:06,880 --> 00:10:10,320
and the a this is p times two is large

257
00:10:10,320 --> 00:10:11,279
enough

258
00:10:11,279 --> 00:10:14,480
to larger than any polynomial q if you

259
00:10:14,480 --> 00:10:17,760
said that p is uh almost because to n

260
00:10:17,760 --> 00:10:21,600
squared and the t equals omega one

261
00:10:22,000 --> 00:10:24,000
so our second uh goal is to

262
00:10:24,000 --> 00:10:25,680
homomorphically evaluate this hash

263
00:10:25,680 --> 00:10:26,640
function

264
00:10:26,640 --> 00:10:29,120
uh to evaluate this hash function if we

265
00:10:29,120 --> 00:10:31,360
rewrite our the final

266
00:10:31,360 --> 00:10:34,560
real hash function like this

267
00:10:34,560 --> 00:10:37,200
uh we write the second term to the

268
00:10:37,200 --> 00:10:39,600
to here and the first term rewrites the

269
00:10:39,600 --> 00:10:41,440
first term like this

270
00:10:41,440 --> 00:10:44,800
if j is equals to alpha i then this j

271
00:10:44,800 --> 00:10:46,560
becomes alpha i

272
00:10:46,560 --> 00:10:49,440
and this is equals to this one

273
00:10:49,440 --> 00:10:52,720
if j not equals to alpha i now

274
00:10:52,720 --> 00:10:55,760
then this term is equal to zero and the

275
00:10:55,760 --> 00:10:57,920
all terms is equal and the sum is

276
00:10:57,920 --> 00:11:00,959
uh not relevant to previous one

277
00:11:00,959 --> 00:11:02,880
so now we want to homomorphically

278
00:11:02,880 --> 00:11:05,279
evaluate this hash function

279
00:11:05,279 --> 00:11:07,600
uh if if you are given the

280
00:11:07,600 --> 00:11:08,240
in

281
00:11:08,240 --> 00:11:09,680
encoding of the

282
00:11:09,680 --> 00:11:12,160
index of hash function alpha and beta we

283
00:11:12,160 --> 00:11:14,560
want to homologically evaluate this one

284
00:11:14,560 --> 00:11:16,640
and the z is in clear

285
00:11:16,640 --> 00:11:17,760
so

286
00:11:17,760 --> 00:11:20,000
first of all if we given the encoding of

287
00:11:20,000 --> 00:11:22,560
beta i like this

288
00:11:22,560 --> 00:11:24,560
then we can multiply evaluate the first

289
00:11:24,560 --> 00:11:25,440
term

290
00:11:25,440 --> 00:11:26,480
by the

291
00:11:26,480 --> 00:11:29,279
addition probability of the gsw type

292
00:11:29,279 --> 00:11:30,880
recording

293
00:11:30,880 --> 00:11:33,200
and then and we saw that if we given the

294
00:11:33,200 --> 00:11:34,640
encoding of

295
00:11:34,640 --> 00:11:37,120
this equality test j equals to gamma

296
00:11:37,120 --> 00:11:38,240
alpha i

297
00:11:38,240 --> 00:11:41,360
because i and j is insecure so this term

298
00:11:41,360 --> 00:11:43,360
is in clear so we only need to

299
00:11:43,360 --> 00:11:45,519
homogeneity register

300
00:11:45,519 --> 00:11:48,160
if we give us a homo evaluation system

301
00:11:48,160 --> 00:11:50,720
then we can homogenously evaluate whole

302
00:11:50,720 --> 00:11:52,000
height function

303
00:11:52,000 --> 00:11:54,320
so our goal is to given the encoding of

304
00:11:54,320 --> 00:11:57,839
alpha i which is indexing the hash

305
00:11:57,839 --> 00:11:58,800
function

306
00:11:58,800 --> 00:12:01,440
and j which is insecure

307
00:12:01,440 --> 00:12:03,360
and we want to homomorphically evaluate

308
00:12:03,360 --> 00:12:04,399
j

309
00:12:04,399 --> 00:12:06,880
whether it's j equals to alpha

310
00:12:06,880 --> 00:12:10,959
he calls this the homophobic taste

311
00:12:10,959 --> 00:12:12,079
and

312
00:12:12,079 --> 00:12:14,639
for this goal the previous approach uh

313
00:12:14,639 --> 00:12:16,800
used the bitwise comparison

314
00:12:16,800 --> 00:12:19,839
uh they decompose alpha

315
00:12:19,839 --> 00:12:22,959
as a bitwise alpha one to r5

316
00:12:22,959 --> 00:12:25,120
alpha t

317
00:12:25,120 --> 00:12:28,160
and it was compared with j like this

318
00:12:28,160 --> 00:12:32,000
so this approach needs omega log alpha

319
00:12:32,000 --> 00:12:36,399
for a encoding of each bit of the alpha

320
00:12:36,399 --> 00:12:38,959
for h bit of alpha i including this one

321
00:12:38,959 --> 00:12:40,720
and homophobic evaluate this one and

322
00:12:40,720 --> 00:12:42,079
homophobically compute the

323
00:12:42,079 --> 00:12:46,319
multiplication of jsw type income

324
00:12:46,480 --> 00:12:50,160
so this uh this this approach needs low

325
00:12:50,160 --> 00:12:54,079
load and ring vectors to encode alpha

326
00:12:54,079 --> 00:12:55,040
so

327
00:12:55,040 --> 00:12:58,160
we think we can can we do better

328
00:12:58,160 --> 00:12:59,200
so

329
00:12:59,200 --> 00:13:02,240
we have an observation for the ring r

330
00:13:02,240 --> 00:13:04,320
because it's a x to the x to the n plus

331
00:13:04,320 --> 00:13:05,680
one

332
00:13:05,680 --> 00:13:08,880
if the a f x a

333
00:13:08,880 --> 00:13:12,480
if f is equal to this uh this polynomial

334
00:13:12,480 --> 00:13:16,720
i want to v to the v to m to 1 n minus 1

335
00:13:16,720 --> 00:13:20,720
if v equals 1 then this uh m terms so

336
00:13:20,720 --> 00:13:23,519
it's equal to m if v not equals to one

337
00:13:23,519 --> 00:13:25,680
then the term is equal uh the numerator

338
00:13:25,680 --> 00:13:27,680
is equal to zero and denominator is not

339
00:13:27,680 --> 00:13:31,440
zero so the whole term is equal to zero

340
00:13:31,440 --> 00:13:34,959
if if we evaluate the the function at x

341
00:13:34,959 --> 00:13:38,160
to the i then if x equals zero which

342
00:13:38,160 --> 00:13:41,199
means x to the i equals to one so the

343
00:13:41,199 --> 00:13:44,639
the function value is equal to m and

344
00:13:44,639 --> 00:13:47,120
if i not equals to i

345
00:13:47,120 --> 00:13:49,199
then v not equals the

346
00:13:49,199 --> 00:13:53,040
one and the function value is not equal

347
00:13:53,040 --> 00:13:55,519
to zero

348
00:13:55,519 --> 00:13:58,399
so observing this one uh if if you are

349
00:13:58,399 --> 00:14:01,360
given the encoding of f x to the alpha

350
00:14:01,360 --> 00:14:04,000
minus j the encoding is jsw encoding of

351
00:14:04,000 --> 00:14:06,560
this one so we can

352
00:14:06,560 --> 00:14:08,639
we can homomorphically evaluate this

353
00:14:08,639 --> 00:14:10,959
polynomial and we got the encoding of

354
00:14:10,959 --> 00:14:13,199
this one

355
00:14:13,199 --> 00:14:15,279
so

356
00:14:15,279 --> 00:14:17,760
uh multiplying a uh homologous

357
00:14:17,760 --> 00:14:20,800
multiplying m inverse so we get

358
00:14:20,800 --> 00:14:21,760
uh

359
00:14:21,760 --> 00:14:25,199
the homophobic testing of j and alpha i

360
00:14:25,199 --> 00:14:28,720
this testing is only needs one encoding

361
00:14:28,720 --> 00:14:30,959
only encoding of this one we don't need

362
00:14:30,959 --> 00:14:33,440
a bit wise encoding of

363
00:14:33,440 --> 00:14:35,839
alpha

364
00:14:36,240 --> 00:14:38,639
so our testing is like this

365
00:14:38,639 --> 00:14:41,600
given the encoding of alpha

366
00:14:41,600 --> 00:14:43,519
which is in the zn

367
00:14:43,519 --> 00:14:47,040
and j is clear so let's first compute x

368
00:14:47,040 --> 00:14:48,320
to the alpha

369
00:14:48,320 --> 00:14:50,399
minus one encoding of this one by

370
00:14:50,399 --> 00:14:53,040
encoding of x to the alpha times x to

371
00:14:53,040 --> 00:14:54,880
the minus j

372
00:14:54,880 --> 00:14:57,680
because j is in secure and then compute

373
00:14:57,680 --> 00:14:59,600
the homologically evaluate the f

374
00:14:59,600 --> 00:15:01,120
function and we got the encoding of this

375
00:15:01,120 --> 00:15:02,480
one

376
00:15:02,480 --> 00:15:05,360
and then we compute the m m inverse oh

377
00:15:05,360 --> 00:15:07,760
that might be m inverse

378
00:15:07,760 --> 00:15:10,880
so here and we got i've got this one

379
00:15:10,880 --> 00:15:14,240
if j is equal to alpha then this term

380
00:15:14,240 --> 00:15:16,639
equals to 0

381
00:15:16,639 --> 00:15:18,079
and the

382
00:15:18,079 --> 00:15:21,360
and the x to the 0 is equal to 1 and the

383
00:15:21,360 --> 00:15:23,920
f function at the

384
00:15:23,920 --> 00:15:26,399
evaluation of f is one equals to m and

385
00:15:26,399 --> 00:15:28,560
the computing by m2 inverse which was

386
00:15:28,560 --> 00:15:30,720
the encoding of one otherwise it was

387
00:15:30,720 --> 00:15:33,519
encoding of zero so we perfectly done

388
00:15:33,519 --> 00:15:36,880
the homomorphic evaluation

389
00:15:36,880 --> 00:15:38,560
so now we finish the homophobic

390
00:15:38,560 --> 00:15:40,560
evaluation of our hash function and the

391
00:15:40,560 --> 00:15:42,800
design of harsh function

392
00:15:42,800 --> 00:15:44,240
so by the way we

393
00:15:44,240 --> 00:15:45,759
we see the

394
00:15:45,759 --> 00:15:48,399
application of this cut this type of

395
00:15:48,399 --> 00:15:50,399
equality testing

396
00:15:50,399 --> 00:15:53,040
given the encoding of x to the alpha we

397
00:15:53,040 --> 00:15:55,199
want to unpack that must be you know

398
00:15:55,199 --> 00:15:56,399
unpacked

399
00:15:56,399 --> 00:15:59,199
for alpha and we get every encoding of

400
00:15:59,199 --> 00:16:02,399
alpha by homophobic evaluating b and j

401
00:16:02,399 --> 00:16:04,240
where j is the

402
00:16:04,240 --> 00:16:07,440
eye speed of j is one

403
00:16:07,440 --> 00:16:10,160
so in this type if uh

404
00:16:10,160 --> 00:16:13,759
if the i speed of alpha is one

405
00:16:13,759 --> 00:16:16,880
then there's one j is equals to

406
00:16:16,880 --> 00:16:18,079
alpha

407
00:16:18,079 --> 00:16:19,680
and we got this homological lesson

408
00:16:19,680 --> 00:16:21,759
equals one and the whole

409
00:16:21,759 --> 00:16:25,600
addition will get the encoding of 1.

410
00:16:25,600 --> 00:16:28,320
if the encoding is with 0 then

411
00:16:28,320 --> 00:16:31,120
each evaluation of this one

412
00:16:31,120 --> 00:16:34,000
all gets a increase of 0 and

413
00:16:34,000 --> 00:16:36,560
and sum equals will get a encoding of

414
00:16:36,560 --> 00:16:38,880
zero

415
00:16:39,360 --> 00:16:41,680
and we get a packing given the encoding

416
00:16:41,680 --> 00:16:45,040
of every rfi we can pack

417
00:16:45,040 --> 00:16:47,120
pack them to get a encoding of alpha

418
00:16:47,120 --> 00:16:48,880
like this

419
00:16:48,880 --> 00:16:52,079
a straight a straight uh application of

420
00:16:52,079 --> 00:16:54,560
this encoding is that we can improve the

421
00:16:54,560 --> 00:16:57,519
mpk size of the ipe in yamada followed

422
00:16:57,519 --> 00:17:00,399
by a factor of load lamp straightly

423
00:17:00,399 --> 00:17:02,320
so this is an another

424
00:17:02,320 --> 00:17:04,959
application so let's see our uh

425
00:17:04,959 --> 00:17:07,599
construction the contraction is uh very

426
00:17:07,599 --> 00:17:10,319
similar to the previous constructions

427
00:17:10,319 --> 00:17:12,720
tryptophan constructs the a and r ta the

428
00:17:12,720 --> 00:17:14,000
triple f a

429
00:17:14,000 --> 00:17:15,599
and then uh

430
00:17:15,599 --> 00:17:17,599
generate the bi

431
00:17:17,599 --> 00:17:20,640
the t and the where's a atom is some

432
00:17:20,640 --> 00:17:22,400
constant

433
00:17:22,400 --> 00:17:24,240
and the t

434
00:17:24,240 --> 00:17:26,640
uh vectors like this

435
00:17:26,640 --> 00:17:30,080
and msk is the ta k generation and

436
00:17:30,080 --> 00:17:32,320
homomorphically evaluates the hash

437
00:17:32,320 --> 00:17:34,400
function this is circuit of hash

438
00:17:34,400 --> 00:17:35,360
function

439
00:17:35,360 --> 00:17:37,039
segregatedly

440
00:17:37,039 --> 00:17:38,400
and then

441
00:17:38,400 --> 00:17:40,559
using sample left

442
00:17:40,559 --> 00:17:43,360
ta is the chapter and you get a r which

443
00:17:43,360 --> 00:17:44,880
is a

444
00:17:44,880 --> 00:17:46,720
uh

445
00:17:46,720 --> 00:17:47,760
let this

446
00:17:47,760 --> 00:17:50,160
uh as a gaussian distribution vector

447
00:17:50,160 --> 00:17:51,760
underline this

448
00:17:51,760 --> 00:17:55,120
and r is secret k the encryption is the

449
00:17:55,120 --> 00:17:57,039
dual regular encryption

450
00:17:57,039 --> 00:18:01,039
that is bi i compute the f id uh in

451
00:18:01,039 --> 00:18:03,600
impression

452
00:18:04,240 --> 00:18:06,960
and then compute the bi bid using a

453
00:18:06,960 --> 00:18:09,039
public evaluation of fid

454
00:18:09,039 --> 00:18:10,880
which is similar to the previous k

455
00:18:10,880 --> 00:18:13,120
generation algorithm

456
00:18:13,120 --> 00:18:15,039
and then i use the

457
00:18:15,039 --> 00:18:16,799
uh dual encryption to

458
00:18:16,799 --> 00:18:19,039
encrypt the message mu a decryption is

459
00:18:19,039 --> 00:18:21,520
similar to the geodragon encryption

460
00:18:21,520 --> 00:18:25,039
so that is our design

461
00:18:25,440 --> 00:18:28,720
next we see our

462
00:18:28,720 --> 00:18:29,679
oh

463
00:18:29,679 --> 00:18:30,290
so over

464
00:18:30,290 --> 00:18:31,440
[Music]

465
00:18:31,440 --> 00:18:34,559
or there's a t is we got the t is uh

466
00:18:34,559 --> 00:18:37,520
equals to omega one so our design only

467
00:18:37,520 --> 00:18:39,200
needs omega one

468
00:18:39,200 --> 00:18:43,280
uh ring vectors so let's next see our

469
00:18:43,280 --> 00:18:46,160
better security analysis

470
00:18:46,160 --> 00:18:48,960
here we recall a bit security framework

471
00:18:48,960 --> 00:18:51,600
of mixing so underwater

472
00:18:51,600 --> 00:18:53,360
where

473
00:18:53,360 --> 00:18:56,880
where we allow the adversary output

474
00:18:56,880 --> 00:18:58,320
a boat

475
00:18:58,320 --> 00:19:01,679
he get aboard the mess the whole

476
00:19:01,679 --> 00:19:02,799
game

477
00:19:02,799 --> 00:19:05,200
which is different from the previous uh

478
00:19:05,200 --> 00:19:08,160
previous security analysis

479
00:19:08,160 --> 00:19:10,960
and uh if that alpha is not avoiding

480
00:19:10,960 --> 00:19:14,080
probability and beta is a

481
00:19:14,080 --> 00:19:16,240
conditional success probability then the

482
00:19:16,240 --> 00:19:18,320
advantage of address every is epsilon

483
00:19:18,320 --> 00:19:21,679
equals to alpha times 2 to beta minus 1

484
00:19:21,679 --> 00:19:24,679
squared

485
00:19:25,120 --> 00:19:26,640
there is a

486
00:19:26,640 --> 00:19:27,760
a

487
00:19:27,760 --> 00:19:29,440
as theorem given

488
00:19:29,440 --> 00:19:31,360
that if

489
00:19:31,360 --> 00:19:34,240
uh which is very intuitively

490
00:19:34,240 --> 00:19:36,640
correct in the

491
00:19:36,640 --> 00:19:38,480
surgical distance

492
00:19:38,480 --> 00:19:42,000
that if we replace a uh

493
00:19:42,000 --> 00:19:45,039
distribution p with a q

494
00:19:45,039 --> 00:19:47,280
then the output

495
00:19:47,280 --> 00:19:49,440
the non-abort probability

496
00:19:49,440 --> 00:19:50,320
is

497
00:19:50,320 --> 00:19:53,600
not affected by p and

498
00:19:53,600 --> 00:19:55,440
uh the success paragraph they are also

499
00:19:55,440 --> 00:19:58,320
very close to the previous beta

500
00:19:58,320 --> 00:20:00,799
under the distribution p

501
00:20:00,799 --> 00:20:02,640
this is very important in our security

502
00:20:02,640 --> 00:20:04,320
analysis

503
00:20:04,320 --> 00:20:06,799
and let's see the secretary first game

504
00:20:06,799 --> 00:20:09,039
one is original game and the probability

505
00:20:09,039 --> 00:20:11,760
is alpha zero for one game one in the

506
00:20:11,760 --> 00:20:13,919
game one the challenger choose a random

507
00:20:13,919 --> 00:20:15,760
partition function h

508
00:20:15,760 --> 00:20:18,720
by random indexing with a

509
00:20:18,720 --> 00:20:19,600
uh

510
00:20:19,600 --> 00:20:22,080
the challenger may use the other

511
00:20:22,080 --> 00:20:23,760
artificial technique or without

512
00:20:23,760 --> 00:20:26,880
artificial eyebrow technique

513
00:20:26,880 --> 00:20:27,919
where the

514
00:20:27,919 --> 00:20:30,000
lambda file is

515
00:20:30,000 --> 00:20:31,840
the estimation of

516
00:20:31,840 --> 00:20:34,080
gamma the gamma is a partitioning

517
00:20:34,080 --> 00:20:36,720
probability

518
00:20:36,960 --> 00:20:40,080
let's just skip this uh analysis for a

519
00:20:40,080 --> 00:20:41,280
moment

520
00:20:41,280 --> 00:20:42,080
uh

521
00:20:42,080 --> 00:20:44,240
for game one the game uh game one to

522
00:20:44,240 --> 00:20:45,280
game three

523
00:20:45,280 --> 00:20:47,520
game two uh we use a

524
00:20:47,520 --> 00:20:50,240
leftover hammer because we replace the

525
00:20:50,240 --> 00:20:53,360
bij with the jsw encoding and which is

526
00:20:53,360 --> 00:20:55,440
statistically the clause

527
00:20:55,440 --> 00:20:57,840
again to the game three we use a sample

528
00:20:57,840 --> 00:21:00,159
left to sample right

529
00:21:00,159 --> 00:21:01,360
because

530
00:21:01,360 --> 00:21:02,480
uh

531
00:21:02,480 --> 00:21:04,480
because we can compute our id by a

532
00:21:04,480 --> 00:21:07,039
trapezo

533
00:21:07,039 --> 00:21:09,280
because we have our rijs

534
00:21:09,280 --> 00:21:11,600
and the hash function

535
00:21:11,600 --> 00:21:13,840
and our five beta the challenger knows

536
00:21:13,840 --> 00:21:16,480
all the all these steps so you can check

537
00:21:16,480 --> 00:21:19,280
about this one and get our id

538
00:21:19,280 --> 00:21:21,840
and compute the skd using champ uh

539
00:21:21,840 --> 00:21:26,400
sample left using the rid which is uh

540
00:21:26,400 --> 00:21:29,760
this is a secret idea for

541
00:21:29,760 --> 00:21:31,440
for for

542
00:21:31,440 --> 00:21:33,840
for the matrix

543
00:21:33,840 --> 00:21:36,880
a chapter for this matrix and we know

544
00:21:36,880 --> 00:21:38,000
that

545
00:21:38,000 --> 00:21:40,559
then the simulated simulator uh can

546
00:21:40,559 --> 00:21:44,960
simulate the k gen without the ms msk

547
00:21:44,960 --> 00:21:47,280
game four is using this rear-end

548
00:21:47,280 --> 00:21:49,840
algorithm

549
00:21:50,000 --> 00:21:51,600
by the

550
00:21:51,600 --> 00:21:52,960
hash function

551
00:21:52,960 --> 00:21:54,720
because the hash function

552
00:21:54,720 --> 00:21:56,640
hash value of

553
00:21:56,640 --> 00:21:59,679
h i d star is equal to zero

554
00:21:59,679 --> 00:22:02,320
and the randomized uh properties of

555
00:22:02,320 --> 00:22:04,799
three rain we can get that

556
00:22:04,799 --> 00:22:08,400
the game's game three and game two is

557
00:22:08,400 --> 00:22:11,280
statistically close

558
00:22:11,280 --> 00:22:15,520
and again because we replace the c1

559
00:22:15,520 --> 00:22:17,280
with a random

560
00:22:17,280 --> 00:22:19,200
uh random element

561
00:22:19,200 --> 00:22:22,159
by the random randomness of real lovely

562
00:22:22,159 --> 00:22:24,000
this game before and game series is

563
00:22:24,000 --> 00:22:26,240
closed so we got game one to game four

564
00:22:26,240 --> 00:22:27,600
is close

565
00:22:27,600 --> 00:22:29,760
so let's come back to game zero the game

566
00:22:29,760 --> 00:22:31,280
one that

567
00:22:31,280 --> 00:22:34,159
that gamma is equals to the

568
00:22:34,159 --> 00:22:36,799
partitioning probability

569
00:22:36,799 --> 00:22:38,159
we get

570
00:22:38,159 --> 00:22:41,280
we have a llama which says that alpha

571
00:22:41,280 --> 00:22:43,760
one which is not about probability at

572
00:22:43,760 --> 00:22:44,880
game one

573
00:22:44,880 --> 00:22:48,320
is larger than gamma mean which is a

574
00:22:48,320 --> 00:22:51,679
lower bond of the estimation of gamma

575
00:22:51,679 --> 00:22:55,200
times a alpha 0 and the beta 1 is larger

576
00:22:55,200 --> 00:22:57,840
than the rate of gamma mean over gamma

577
00:22:57,840 --> 00:22:59,520
max gamma makes the upper bound of

578
00:22:59,520 --> 00:23:03,120
estimation of gamma times the beta 1.

579
00:23:03,120 --> 00:23:05,760
so if that the gamma mean

580
00:23:05,760 --> 00:23:08,720
over gamma max x equals to one over one

581
00:23:08,720 --> 00:23:11,840
minus theta zero over four then epsilon

582
00:23:11,840 --> 00:23:13,760
one is equals two

583
00:23:13,760 --> 00:23:14,720
is

584
00:23:14,720 --> 00:23:17,520
uh larger than epsilon zero times gamma

585
00:23:17,520 --> 00:23:19,600
mean over four

586
00:23:19,600 --> 00:23:22,559
over gamma zero is equal to

587
00:23:22,559 --> 00:23:26,159
2 times beta 0 minus 1.

588
00:23:26,159 --> 00:23:28,320
so we get this one

589
00:23:28,320 --> 00:23:30,080
and

590
00:23:30,080 --> 00:23:32,000
if the challenger uses this artificial

591
00:23:32,000 --> 00:23:34,240
technique and it said gamma mean

592
00:23:34,240 --> 00:23:36,240
the lower bound of the estimation of

593
00:23:36,240 --> 00:23:38,799
gamma equals to 1 over 2 q and gamma max

594
00:23:38,799 --> 00:23:43,279
is 1 over q the greater is 1 over 2.

595
00:23:43,279 --> 00:23:45,600
if we want to increase this ratio to

596
00:23:45,600 --> 00:23:46,799
this one

597
00:23:46,799 --> 00:23:50,720
we need a 1 over delta square that are

598
00:23:50,720 --> 00:23:53,200
zero square samples

599
00:23:53,200 --> 00:23:55,440
by current of bond and which is smaller

600
00:23:55,440 --> 00:23:57,360
than one over the epsilon zero and the

601
00:23:57,360 --> 00:23:59,840
absence the previous reductions need one

602
00:23:59,840 --> 00:24:02,000
over epsilon zero squared so over

603
00:24:02,000 --> 00:24:04,400
reduction if using this uh artificial

604
00:24:04,400 --> 00:24:06,159
bore technique or reduction is better

605
00:24:06,159 --> 00:24:08,880
than previous reductions

606
00:24:08,880 --> 00:24:10,720
if the challenge is without artificial

607
00:24:10,720 --> 00:24:12,080
technique

608
00:24:12,080 --> 00:24:14,559
and set the gamma mean

609
00:24:14,559 --> 00:24:16,720
over gamma max is as it

610
00:24:16,720 --> 00:24:18,880
third zero over four q

611
00:24:18,880 --> 00:24:21,840
then the ratio is exactly what we wanted

612
00:24:21,840 --> 00:24:25,039
uh but the reduction will lose at delta

613
00:24:25,039 --> 00:24:26,880
zero

614
00:24:26,880 --> 00:24:28,080
because

615
00:24:28,080 --> 00:24:30,559
the previous account epsilon one is

616
00:24:30,559 --> 00:24:33,200
larger than the gamma mean times

617
00:24:33,200 --> 00:24:35,919
epsilon zero but the previous uh

618
00:24:35,919 --> 00:24:37,760
coupling with the previous reductions

619
00:24:37,760 --> 00:24:40,159
the factor is

620
00:24:40,159 --> 00:24:43,279
epsilon zero and our factor is epsilon

621
00:24:43,279 --> 00:24:45,520
zero squared so our

622
00:24:45,520 --> 00:24:47,200
reduction is better

623
00:24:47,200 --> 00:24:50,159
so in this paper we give a better

624
00:24:50,159 --> 00:24:52,240
ibs scheme with better

625
00:24:52,240 --> 00:24:54,159
muscle public case

626
00:24:54,159 --> 00:24:56,880
and explicit design and a better

627
00:24:56,880 --> 00:24:58,159
reduction

628
00:24:58,159 --> 00:25:00,480
so thank you

629
00:25:00,480 --> 00:25:04,000
thank you for time

