1
00:00:00,799 --> 00:00:02,720
hello i'm peihan meow i'm going to talk

2
00:00:02,720 --> 00:00:04,960
about amortizing rate one ot and

3
00:00:04,960 --> 00:00:07,759
applications to pir and psi this is

4
00:00:07,759 --> 00:00:09,440
joint work with melissa chase saint

5
00:00:09,440 --> 00:00:10,240
james

6
00:00:10,240 --> 00:00:13,679
muhammad hyderabadi and jalin lee

7
00:00:13,679 --> 00:00:15,679
we start with the problem of oblivious

8
00:00:15,679 --> 00:00:18,160
transfer or ot for short which is a

9
00:00:18,160 --> 00:00:20,240
protocol between two parties we call

10
00:00:20,240 --> 00:00:22,880
them center and receiver the sender has

11
00:00:22,880 --> 00:00:26,320
two messages m0 m1 each of length n and

12
00:00:26,320 --> 00:00:28,640
the receiver has a single choice bit b

13
00:00:28,640 --> 00:00:30,400
as input

14
00:00:30,400 --> 00:00:32,800
and from the ot protocol the receiver

15
00:00:32,800 --> 00:00:34,880
will get one of the two messages

16
00:00:34,880 --> 00:00:37,600
depending on his choice bit namely m sub

17
00:00:37,600 --> 00:00:38,879
b

18
00:00:38,879 --> 00:00:41,680
and the sender gets nothing

19
00:00:41,680 --> 00:00:44,239
the security guarantee is that the

20
00:00:44,239 --> 00:00:46,640
choice bit b is hidden to the sender and

21
00:00:46,640 --> 00:00:48,879
the other message m sub 1 minus b is

22
00:00:48,879 --> 00:00:51,440
hidden to the receiver

23
00:00:51,440 --> 00:00:53,360
in this work we're interested in two

24
00:00:53,360 --> 00:00:55,920
message ot where there are two messages

25
00:00:55,920 --> 00:00:58,480
sent between the parties in particular

26
00:00:58,480 --> 00:01:00,399
in the first round the receiver will

27
00:01:00,399 --> 00:01:02,719
somehow encrypt his choice bit b and

28
00:01:02,719 --> 00:01:04,799
send to the sender and keep some secret

29
00:01:04,799 --> 00:01:06,479
states

30
00:01:06,479 --> 00:01:08,880
and then in the second round the sender

31
00:01:08,880 --> 00:01:11,280
will somehow encrypt her two messages

32
00:01:11,280 --> 00:01:13,680
and sent to the receiver

33
00:01:13,680 --> 00:01:15,439
and then the receiver can use the secret

34
00:01:15,439 --> 00:01:19,280
state to recover m sub b

35
00:01:19,280 --> 00:01:21,280
if we look at the message sent from the

36
00:01:21,280 --> 00:01:25,680
sender to the receiver which we call ots

37
00:01:25,680 --> 00:01:28,159
consider the ratio between the length of

38
00:01:28,159 --> 00:01:32,400
a single message m0 to the length of ots

39
00:01:32,400 --> 00:01:34,560
we know that information theoretically

40
00:01:34,560 --> 00:01:37,920
ots cannot be shorter than m0 so this

41
00:01:37,920 --> 00:01:41,439
ratio is at most one and in fact rate

42
00:01:41,439 --> 00:01:43,920
half is fairly easy to achieve

43
00:01:43,920 --> 00:01:46,640
generically

44
00:01:47,040 --> 00:01:48,720
in this work we're particularly

45
00:01:48,720 --> 00:01:51,200
interested in rate 1 o t where this

46
00:01:51,200 --> 00:01:55,439
ratio goes to 1 as n goes to infinity

47
00:01:55,439 --> 00:01:57,680
now you might be asking why why do we

48
00:01:57,680 --> 00:01:59,920
care about true message ot and why in

49
00:01:59,920 --> 00:02:02,320
particular rate one

50
00:02:02,320 --> 00:02:04,320
let's see an example of one out of four

51
00:02:04,320 --> 00:02:07,119
ot where the sender has four messages

52
00:02:07,119 --> 00:02:10,560
m00 to m11 and the receiver wants to get

53
00:02:10,560 --> 00:02:14,080
one of them in particular m sub bc

54
00:02:14,080 --> 00:02:16,640
so the receiver has two choice bits b

55
00:02:16,640 --> 00:02:17,840
and c

56
00:02:17,840 --> 00:02:20,560
we can achieve a one out of four ot from

57
00:02:20,560 --> 00:02:23,760
two message ot in the following way

58
00:02:23,760 --> 00:02:25,840
in the first round the receiver will

59
00:02:25,840 --> 00:02:28,800
send two ot messages an encryption b and

60
00:02:28,800 --> 00:02:31,040
encryption of c and keep

61
00:02:31,040 --> 00:02:32,720
two secret states

62
00:02:32,720 --> 00:02:34,959
stb and stc

63
00:02:34,959 --> 00:02:37,280
and then the sender will first generate

64
00:02:37,280 --> 00:02:40,640
an ots message using the encryption of c

65
00:02:40,640 --> 00:02:43,200
and this pair of messages

66
00:02:43,200 --> 00:02:45,519
and she will generate another ots

67
00:02:45,519 --> 00:02:47,840
message using encryption of c and

68
00:02:47,840 --> 00:02:50,959
another pair of messages and then she

69
00:02:50,959 --> 00:02:54,400
will think of these two ots messages as

70
00:02:54,400 --> 00:02:57,040
a pair of messages to generate another

71
00:02:57,040 --> 00:02:58,959
ots message

72
00:02:58,959 --> 00:03:01,280
using the encryption of b

73
00:03:01,280 --> 00:03:04,319
and send that to the receiver

74
00:03:04,319 --> 00:03:07,280
now the receiver can first use stb

75
00:03:07,280 --> 00:03:10,800
to recover one of these ots messages

76
00:03:10,800 --> 00:03:13,440
depending on the choice bit b

77
00:03:13,440 --> 00:03:17,120
and then use stc to recover

78
00:03:17,120 --> 00:03:20,560
the desired message m sub bc

79
00:03:20,560 --> 00:03:22,879
if you think about this example

80
00:03:22,879 --> 00:03:25,920
the two round ot allows us to do one ot

81
00:03:25,920 --> 00:03:28,640
inside another ot inside another ot it

82
00:03:28,640 --> 00:03:32,560
allows for a sequence of nested ot

83
00:03:32,560 --> 00:03:34,959
and the rate 1 property guarantees that

84
00:03:34,959 --> 00:03:37,680
the final ots message is not too much

85
00:03:37,680 --> 00:03:39,840
longer than the original message the

86
00:03:39,840 --> 00:03:42,799
extra communication cost only grows

87
00:03:42,799 --> 00:03:45,519
linearly in the number of sequential ots

88
00:03:45,519 --> 00:03:48,159
not exponentially

89
00:03:48,159 --> 00:03:50,480
so at a high level the two message rate

90
00:03:50,480 --> 00:03:53,439
one ot allows us to do nested ot with

91
00:03:53,439 --> 00:03:55,760
low communication

92
00:03:55,760 --> 00:03:58,159
and this leads to more applications

93
00:03:58,159 --> 00:04:00,720
where the sender has a large database

94
00:04:00,720 --> 00:04:02,480
and the receiver is interested in a

95
00:04:02,480 --> 00:04:04,879
particular location of the database but

96
00:04:04,879 --> 00:04:06,560
he doesn't want to reveal this location

97
00:04:06,560 --> 00:04:08,720
to the sender

98
00:04:08,720 --> 00:04:11,680
in these applications of rate 100 we can

99
00:04:11,680 --> 00:04:14,239
achieve this much communication where d

100
00:04:14,239 --> 00:04:16,639
is the size of the database and lambda

101
00:04:16,639 --> 00:04:18,959
is the security parameter

102
00:04:18,959 --> 00:04:20,959
so the communication doesn't have to

103
00:04:20,959 --> 00:04:22,639
grow linearly in the size of the

104
00:04:22,639 --> 00:04:26,960
database but only logarithmically

105
00:04:26,960 --> 00:04:29,040
and here is a list of concrete

106
00:04:29,040 --> 00:04:31,520
applications of rate one ot

107
00:04:31,520 --> 00:04:32,880
for example

108
00:04:32,880 --> 00:04:34,639
single server private information

109
00:04:34,639 --> 00:04:37,280
retrieval or pir with polylog

110
00:04:37,280 --> 00:04:38,560
communication

111
00:04:38,560 --> 00:04:41,360
and private setting transaction or psi

112
00:04:41,360 --> 00:04:43,919
with unbalanced set sizes where the

113
00:04:43,919 --> 00:04:45,919
communication is only polylog in the

114
00:04:45,919 --> 00:04:50,000
size of the larger set and so on

115
00:04:50,479 --> 00:04:52,639
the next question is can we actually

116
00:04:52,639 --> 00:04:54,800
achieve red one ot

117
00:04:54,800 --> 00:04:57,840
the answer is yes uh the dem guard uric

118
00:04:57,840 --> 00:05:00,000
cryptosystem gives a rate to anot from

119
00:05:00,000 --> 00:05:01,919
the dcr assumption

120
00:05:01,919 --> 00:05:04,800
and the recent work by doterra in 2019

121
00:05:04,800 --> 00:05:07,520
constructed rate one ot from a primitive

122
00:05:07,520 --> 00:05:09,600
called trapdoor hash functions which can

123
00:05:09,600 --> 00:05:12,320
be realized from various assumptions

124
00:05:12,320 --> 00:05:17,120
including ddh qr lwe and dcr

125
00:05:17,120 --> 00:05:19,360
now let's take a step back and look at

126
00:05:19,360 --> 00:05:21,520
rate 102 again

127
00:05:21,520 --> 00:05:24,400
so far we have only focused on the

128
00:05:24,400 --> 00:05:26,160
communication from the sender to the

129
00:05:26,160 --> 00:05:27,600
receiver

130
00:05:27,600 --> 00:05:28,800
it is

131
00:05:28,800 --> 00:05:30,800
rate one this is the best we can hope

132
00:05:30,800 --> 00:05:32,720
for

133
00:05:32,720 --> 00:05:36,240
but how about receiver communication

134
00:05:36,240 --> 00:05:38,400
if you look at the rate 102 construction

135
00:05:38,400 --> 00:05:40,479
from ddh

136
00:05:40,479 --> 00:05:43,120
for the first bit of the messages the

137
00:05:43,120 --> 00:05:45,280
receiver has to send order and group

138
00:05:45,280 --> 00:05:46,720
elements

139
00:05:46,720 --> 00:05:49,280
and this repeats for every bit of the

140
00:05:49,280 --> 00:05:52,160
messages so the overall communication

141
00:05:52,160 --> 00:05:54,720
from the receiver is order and square

142
00:05:54,720 --> 00:05:56,800
group elements

143
00:05:56,800 --> 00:05:59,120
a recent work by hyderabadi and

144
00:05:59,120 --> 00:06:00,479
ostrovsky

145
00:06:00,479 --> 00:06:02,319
last year improved the receiver

146
00:06:02,319 --> 00:06:04,160
communication from order and square

147
00:06:04,160 --> 00:06:06,800
group elements to order n based on the

148
00:06:06,800 --> 00:06:09,120
power ddh assumption

149
00:06:09,120 --> 00:06:12,160
and the high level idea is to use a

150
00:06:12,160 --> 00:06:15,520
sliding window where the first bit uses

151
00:06:15,520 --> 00:06:18,479
these group elements the second bit uses

152
00:06:18,479 --> 00:06:22,159
these group elements and so on

153
00:06:22,479 --> 00:06:24,639
now a natural question to ask is whether

154
00:06:24,639 --> 00:06:26,880
we can further reduce the receiver

155
00:06:26,880 --> 00:06:29,120
communication to let's say a constant

156
00:06:29,120 --> 00:06:32,319
number of group elements

157
00:06:32,800 --> 00:06:34,960
and now you might be asking why do we

158
00:06:34,960 --> 00:06:37,039
even care because the receiver

159
00:06:37,039 --> 00:06:38,800
communication

160
00:06:38,800 --> 00:06:41,280
doesn't seem too bad

161
00:06:41,280 --> 00:06:44,319
for a single instance of ot

162
00:06:44,319 --> 00:06:46,400
but if you think about the one out of

163
00:06:46,400 --> 00:06:49,039
four ot example

164
00:06:49,039 --> 00:06:52,080
the receiver has to send two ot messages

165
00:06:52,080 --> 00:06:54,880
and each ot message contains order and

166
00:06:54,880 --> 00:06:57,120
square group elements from the ddh

167
00:06:57,120 --> 00:06:59,840
assumption or order n group elements

168
00:06:59,840 --> 00:07:03,840
from the power ddh assumption

169
00:07:04,240 --> 00:07:06,240
and in the more advanced applications

170
00:07:06,240 --> 00:07:08,639
from rate 1 0t the receiver needs to

171
00:07:08,639 --> 00:07:12,400
send more ot messages in particular

172
00:07:12,400 --> 00:07:13,919
this n here

173
00:07:13,919 --> 00:07:16,400
is equal to some poly in d

174
00:07:16,400 --> 00:07:17,680
and

175
00:07:17,680 --> 00:07:20,160
the number of ots is also some polylog

176
00:07:20,160 --> 00:07:21,919
in d

177
00:07:21,919 --> 00:07:25,440
so this becomes more expensive

178
00:07:25,440 --> 00:07:27,520
now can we further reduce the receiver

179
00:07:27,520 --> 00:07:30,319
communication to save another polylog

180
00:07:30,319 --> 00:07:31,440
factor

181
00:07:31,440 --> 00:07:34,000
or if you think about it another way

182
00:07:34,000 --> 00:07:36,400
can we reuse some of the elements from

183
00:07:36,400 --> 00:07:39,280
the first ot in the other ots to save a

184
00:07:39,280 --> 00:07:41,919
polylog factor

185
00:07:41,919 --> 00:07:44,560
and here's our result so we'll propose

186
00:07:44,560 --> 00:07:46,479
the new primitive called amortize to

187
00:07:46,479 --> 00:07:49,680
h1not that works as follows

188
00:07:49,680 --> 00:07:51,840
there are two phases

189
00:07:51,840 --> 00:07:54,400
an offline phase and an online phase

190
00:07:54,400 --> 00:07:56,479
in the offline phase the receiver will

191
00:07:56,479 --> 00:07:58,720
send order n square group elements to

192
00:07:58,720 --> 00:08:01,759
the sender and keep a secret state

193
00:08:01,759 --> 00:08:04,080
this is the offline setup

194
00:08:04,080 --> 00:08:06,639
that's done once and for all

195
00:08:06,639 --> 00:08:09,680
and then after that in the online phase

196
00:08:09,680 --> 00:08:12,879
the sender will get two messages m0 m1

197
00:08:12,879 --> 00:08:14,879
each of length n

198
00:08:14,879 --> 00:08:16,560
and the receiver gets a single choice

199
00:08:16,560 --> 00:08:18,160
bit b

200
00:08:18,160 --> 00:08:20,319
and then the receiver will use the

201
00:08:20,319 --> 00:08:22,800
secret state to generate an ot message

202
00:08:22,800 --> 00:08:24,400
and send to the sender

203
00:08:24,400 --> 00:08:26,879
and the sender will somehow encrypt her

204
00:08:26,879 --> 00:08:29,120
two messages and send to the receiver

205
00:08:29,120 --> 00:08:30,800
and then the receiver can use the secret

206
00:08:30,800 --> 00:08:35,440
state to recover the message m sub b

207
00:08:35,599 --> 00:08:38,080
we still require the rate one property

208
00:08:38,080 --> 00:08:40,159
but now the communication from the

209
00:08:40,159 --> 00:08:41,919
receiver to the sender in the online

210
00:08:41,919 --> 00:08:44,159
phase becomes only a constant number of

211
00:08:44,159 --> 00:08:45,839
group elements

212
00:08:45,839 --> 00:08:48,560
and the online phase uh isn't just one

213
00:08:48,560 --> 00:08:50,800
time it can be down arbitrary number of

214
00:08:50,800 --> 00:08:51,760
times

215
00:08:51,760 --> 00:08:53,040
for example

216
00:08:53,040 --> 00:08:55,519
if they get another pair of messages and

217
00:08:55,519 --> 00:08:57,680
another choice bit and they can do it

218
00:08:57,680 --> 00:08:59,279
again

219
00:08:59,279 --> 00:09:01,680
arbitrary number of times

220
00:09:01,680 --> 00:09:03,519
another nice property about our

221
00:09:03,519 --> 00:09:06,800
construction is that the secret state

222
00:09:06,800 --> 00:09:09,040
remains unchanged throughout the entire

223
00:09:09,040 --> 00:09:11,600
execution and this is crucial for some

224
00:09:11,600 --> 00:09:14,800
of our psi applications

225
00:09:14,800 --> 00:09:17,519
so this is amortized or h1ot

226
00:09:17,519 --> 00:09:19,920
and we give a construction based on the

227
00:09:19,920 --> 00:09:22,399
bilinear sxdh assumption

228
00:09:22,399 --> 00:09:24,560
where we assume a bilinear map where

229
00:09:24,560 --> 00:09:28,240
both g1 and g2 are ddh hard

230
00:09:28,240 --> 00:09:30,880
and we can further reduce the offline

231
00:09:30,880 --> 00:09:33,120
communication from order n square to

232
00:09:33,120 --> 00:09:35,519
order n group elements based on the

233
00:09:35,519 --> 00:09:38,160
bilinear power ddh assumption where we

234
00:09:38,160 --> 00:09:42,640
additionally assume g1 is power ddh hard

235
00:09:42,640 --> 00:09:45,680
we call this primitive amortized rh10t

236
00:09:45,680 --> 00:09:47,440
because although the offline

237
00:09:47,440 --> 00:09:49,360
communication is roughly the same as

238
00:09:49,360 --> 00:09:50,880
before

239
00:09:50,880 --> 00:09:53,040
the online communication from the

240
00:09:53,040 --> 00:09:54,160
receiver

241
00:09:54,160 --> 00:09:56,000
is reduced by a lot

242
00:09:56,000 --> 00:09:58,160
and it can be done arbitrary number of

243
00:09:58,160 --> 00:09:59,120
times

244
00:09:59,120 --> 00:10:02,000
so if we want to run a large number of

245
00:10:02,000 --> 00:10:04,079
return ot

246
00:10:04,079 --> 00:10:06,000
we get much better amortized

247
00:10:06,000 --> 00:10:09,519
communication from the receiver

248
00:10:09,519 --> 00:10:11,680
and given that we can save a polylog

249
00:10:11,680 --> 00:10:14,800
factor in the receiver communication

250
00:10:14,800 --> 00:10:17,120
in a lot of applications from right one

251
00:10:17,120 --> 00:10:18,480
ot

252
00:10:18,480 --> 00:10:21,120
or if you think about it another way

253
00:10:21,120 --> 00:10:22,800
there is an offline phase where the

254
00:10:22,800 --> 00:10:25,600
receiver sends a polylog

255
00:10:25,600 --> 00:10:28,240
number of group elements to the sender

256
00:10:28,240 --> 00:10:30,640
and then the online communication from

257
00:10:30,640 --> 00:10:33,200
the receiver is reduced by a polylog

258
00:10:33,200 --> 00:10:34,560
factor

259
00:10:34,560 --> 00:10:36,800
and this can be done arbitrary number of

260
00:10:36,800 --> 00:10:38,880
times

261
00:10:38,880 --> 00:10:41,040
to summarize our results

262
00:10:41,040 --> 00:10:42,800
we proposed a new primitive called

263
00:10:42,800 --> 00:10:45,920
amortized rad1ot where the receiver

264
00:10:45,920 --> 00:10:48,000
sends order and square group elements in

265
00:10:48,000 --> 00:10:50,399
the offline phase and then in the online

266
00:10:50,399 --> 00:10:52,560
phase the receiver only needs to send

267
00:10:52,560 --> 00:10:54,959
constant number of group elements

268
00:10:54,959 --> 00:10:56,560
and the online phase can be done

269
00:10:56,560 --> 00:10:58,959
arbitrary number of times

270
00:10:58,959 --> 00:11:00,720
and this can be constructed from

271
00:11:00,720 --> 00:11:04,000
bilinear sxdh assumption

272
00:11:04,000 --> 00:11:06,000
and we can further reduce the offline

273
00:11:06,000 --> 00:11:08,160
communication from order n square to

274
00:11:08,160 --> 00:11:10,399
order n group elements based on the

275
00:11:10,399 --> 00:11:13,040
bilinear power ddh assumption

276
00:11:13,040 --> 00:11:15,920
and given these new tools we can

277
00:11:15,920 --> 00:11:18,160
reduce the receiver communication in a

278
00:11:18,160 --> 00:11:21,440
lot of applications such as pir and psi

279
00:11:21,440 --> 00:11:23,519
just to name a few

280
00:11:23,519 --> 00:11:25,920
and the center communication remains the

281
00:11:25,920 --> 00:11:26,839
same as

282
00:11:26,839 --> 00:11:29,600
before in the rest of the talk i will

283
00:11:29,600 --> 00:11:31,760
first present the rayton ot construction

284
00:11:31,760 --> 00:11:34,959
from ddh and then talk about how to get

285
00:11:34,959 --> 00:11:38,560
amortized rate 120 from bilinear maps

286
00:11:38,560 --> 00:11:40,720
and finally i will briefly mention some

287
00:11:40,720 --> 00:11:43,200
concrete optimizations

288
00:11:43,200 --> 00:11:45,600
okay first the retro and ot construction

289
00:11:45,600 --> 00:11:47,920
from ddh

290
00:11:47,920 --> 00:11:50,160
recall that for every bit of the

291
00:11:50,160 --> 00:11:52,320
messages the receiver needs to send

292
00:11:52,320 --> 00:11:54,320
order and group elements and let's see

293
00:11:54,320 --> 00:11:57,279
how that works

294
00:11:57,279 --> 00:11:59,360
let's first look at the first bit of the

295
00:11:59,360 --> 00:12:01,440
two messages

296
00:12:01,440 --> 00:12:03,680
the receiver will randomly sample two n

297
00:12:03,680 --> 00:12:07,360
group elements to form a vector h k

298
00:12:07,360 --> 00:12:09,200
and then he will randomly sample an

299
00:12:09,200 --> 00:12:11,760
exponent row and raise every group

300
00:12:11,760 --> 00:12:14,160
element to the power row except these

301
00:12:14,160 --> 00:12:16,480
two group elements

302
00:12:16,480 --> 00:12:18,240
this group element is additionally

303
00:12:18,240 --> 00:12:20,079
multiplied by

304
00:12:20,079 --> 00:12:22,399
g to the power 1 minus b

305
00:12:22,399 --> 00:12:24,240
and this group element is additionally

306
00:12:24,240 --> 00:12:27,600
multiplied by g to the power b

307
00:12:27,600 --> 00:12:29,680
where g is the generator of the group

308
00:12:29,680 --> 00:12:31,920
and b is the choice bit

309
00:12:31,920 --> 00:12:33,839
let's take a closer look at what's going

310
00:12:33,839 --> 00:12:35,920
on

311
00:12:35,920 --> 00:12:38,880
if b equals 0 then

312
00:12:38,880 --> 00:12:41,040
only this group element is additionally

313
00:12:41,040 --> 00:12:43,360
multiplied by g where all the other

314
00:12:43,360 --> 00:12:45,920
group elements are just h k raised to

315
00:12:45,920 --> 00:12:47,920
the power rho

316
00:12:47,920 --> 00:12:50,079
so we say that there is a bump here

317
00:12:50,079 --> 00:12:53,360
because there is additional g here

318
00:12:53,360 --> 00:12:55,680
on the other hand if b equals 1 then

319
00:12:55,680 --> 00:12:57,680
there's a bump here

320
00:12:57,680 --> 00:12:59,680
this group element is additionally

321
00:12:59,680 --> 00:13:01,920
multiplied by g where all the other

322
00:13:01,920 --> 00:13:03,760
group elements are just h k raised to

323
00:13:03,760 --> 00:13:05,760
the power rho

324
00:13:05,760 --> 00:13:07,360
and the sender cannot distinguish

325
00:13:07,360 --> 00:13:09,279
between these two cases

326
00:13:09,279 --> 00:13:11,760
she has no idea about where the bump is

327
00:13:11,760 --> 00:13:15,760
based on the ddh assumption

328
00:13:16,079 --> 00:13:18,560
for simplicity we're going to assume b

329
00:13:18,560 --> 00:13:20,959
equals 0 for the rest of the talk so

330
00:13:20,959 --> 00:13:23,120
there's a bump here and the receiver

331
00:13:23,120 --> 00:13:27,360
wants to learn the first bit of m0

332
00:13:27,519 --> 00:13:29,040
and then the receiver

333
00:13:29,040 --> 00:13:31,360
will send all these group elements to

334
00:13:31,360 --> 00:13:32,639
the sender

335
00:13:32,639 --> 00:13:34,000
and then the center will consider

336
00:13:34,000 --> 00:13:35,920
another vector m which is a

337
00:13:35,920 --> 00:13:39,680
concatenation of m0 and m1

338
00:13:39,680 --> 00:13:41,199
and then she will compute the inner

339
00:13:41,199 --> 00:13:44,399
product of h k and m and also the inner

340
00:13:44,399 --> 00:13:47,680
product of e k and m

341
00:13:47,680 --> 00:13:49,440
so for example if

342
00:13:49,440 --> 00:13:52,000
the message m looks like this

343
00:13:52,000 --> 00:13:55,519
then h is a product of these highlighted

344
00:13:55,519 --> 00:13:56,880
group elements

345
00:13:56,880 --> 00:13:58,800
and e is the product of these

346
00:13:58,800 --> 00:14:01,760
highlighted group elements

347
00:14:01,760 --> 00:14:04,639
so in this case because the first bit of

348
00:14:04,639 --> 00:14:07,600
m0 is equal to zero

349
00:14:07,600 --> 00:14:09,920
e should be exactly equal to h to the

350
00:14:09,920 --> 00:14:12,240
power rho

351
00:14:12,240 --> 00:14:13,839
on the other hand

352
00:14:13,839 --> 00:14:17,120
if the first bit of m0 equals 1

353
00:14:17,120 --> 00:14:19,680
then e should be equal to h to the power

354
00:14:19,680 --> 00:14:21,839
rho times g

355
00:14:21,839 --> 00:14:24,000
so in general e should be equal to

356
00:14:24,000 --> 00:14:26,240
either h to the rho or h to the rho

357
00:14:26,240 --> 00:14:28,160
times g

358
00:14:28,160 --> 00:14:30,399
and then the center can just ascend both

359
00:14:30,399 --> 00:14:35,040
elements uh h and e to the receiver

360
00:14:35,040 --> 00:14:36,800
and the receiver can figure out the

361
00:14:36,800 --> 00:14:38,240
first bit

362
00:14:38,240 --> 00:14:40,480
of m0

363
00:14:40,480 --> 00:14:42,800
by testing whether e is equal to h to

364
00:14:42,800 --> 00:14:46,240
the rho or h to the rho times g

365
00:14:46,240 --> 00:14:48,480
this is just for the first bit and then

366
00:14:48,480 --> 00:14:50,560
the receiver can do the same thing for

367
00:14:50,560 --> 00:14:54,320
all the other bits generating ek2 to ekn

368
00:14:54,320 --> 00:14:56,240
where there is a bump here

369
00:14:56,240 --> 00:14:59,199
and here

370
00:14:59,199 --> 00:15:00,880
and he will send everything to the

371
00:15:00,880 --> 00:15:01,839
sender

372
00:15:01,839 --> 00:15:04,399
and the sender

373
00:15:04,399 --> 00:15:06,880
will compute the inner product between

374
00:15:06,880 --> 00:15:10,560
every vector and the message vector

375
00:15:10,560 --> 00:15:13,600
and send all the results to the receiver

376
00:15:13,600 --> 00:15:16,240
and the receiver can recover

377
00:15:16,240 --> 00:15:19,360
every bit of m0

378
00:15:19,360 --> 00:15:22,000
so if we look at this construction it is

379
00:15:22,000 --> 00:15:25,120
not really rate 1 because the

380
00:15:25,120 --> 00:15:27,440
communication from sender to receiver

381
00:15:27,440 --> 00:15:31,120
contains n plus one group elements

382
00:15:31,120 --> 00:15:33,040
but our goal is to achieve one

383
00:15:33,040 --> 00:15:35,519
compartment plus n bits

384
00:15:35,519 --> 00:15:38,560
so that it is rate one

385
00:15:38,560 --> 00:15:41,600
so our goal is to somehow compress these

386
00:15:41,600 --> 00:15:44,399
group elements e1 to en to a bunch of

387
00:15:44,399 --> 00:15:47,519
bits b1 to bn one group element into one

388
00:15:47,519 --> 00:15:49,759
bit

389
00:15:50,000 --> 00:15:52,079
how can we achieve this

390
00:15:52,079 --> 00:15:53,920
let's go back to the first bit of the

391
00:15:53,920 --> 00:15:55,120
messages

392
00:15:55,120 --> 00:15:58,320
we know that e is either equal to h to

393
00:15:58,320 --> 00:16:01,440
the rho or h 0 times g and the sender

394
00:16:01,440 --> 00:16:03,360
only needs to convey this bit of

395
00:16:03,360 --> 00:16:05,920
information to the receiver

396
00:16:05,920 --> 00:16:08,399
we will leverage a function phi which is

397
00:16:08,399 --> 00:16:12,079
defined from g to bits such that for

398
00:16:12,079 --> 00:16:15,839
every element v in the group we have phi

399
00:16:15,839 --> 00:16:19,680
of v is not equal to phi of v times g

400
00:16:19,680 --> 00:16:21,600
given such a

401
00:16:21,600 --> 00:16:23,440
the sender can just send the group

402
00:16:23,440 --> 00:16:26,079
element h along with phi of e

403
00:16:26,079 --> 00:16:28,240
so that the receiver can learn the first

404
00:16:28,240 --> 00:16:31,279
bit of m0 by testing whether phi v is

405
00:16:31,279 --> 00:16:34,320
equal to phi of h to the rho or phi of h

406
00:16:34,320 --> 00:16:37,040
to the rho times g

407
00:16:37,040 --> 00:16:39,199
and this function phi can be achieved by

408
00:16:39,199 --> 00:16:41,519
the work of boyle guild ball and ishai

409
00:16:41,519 --> 00:16:44,160
in 2016

410
00:16:44,160 --> 00:16:46,959
and that completes the construction

411
00:16:46,959 --> 00:16:48,880
where the sender only needs to apply the

412
00:16:48,880 --> 00:16:50,959
function phi on all the group elements

413
00:16:50,959 --> 00:16:53,199
to compress these group elements in two

414
00:16:53,199 --> 00:16:56,399
bits and then we're done

415
00:16:56,399 --> 00:16:58,399
so that's the rate one ot construction

416
00:16:58,399 --> 00:16:59,680
from ddh

417
00:16:59,680 --> 00:17:01,440
next let's see how to construct

418
00:17:01,440 --> 00:17:03,519
amortized electron or t from bilinear

419
00:17:03,519 --> 00:17:05,599
maps

420
00:17:05,599 --> 00:17:07,839
so the very very high level idea is the

421
00:17:07,839 --> 00:17:10,160
following

422
00:17:10,160 --> 00:17:12,400
in the offline phase the receiver will

423
00:17:12,400 --> 00:17:15,039
generate all these group elements in g1

424
00:17:15,039 --> 00:17:16,799
and send to the sender

425
00:17:16,799 --> 00:17:19,039
where in each of the vectors here there

426
00:17:19,039 --> 00:17:21,839
are two bumps one bump here and one bump

427
00:17:21,839 --> 00:17:24,400
here because at this point the receiver

428
00:17:24,400 --> 00:17:27,280
doesn't know the choice bit yet

429
00:17:27,280 --> 00:17:28,960
and then in the online phase the

430
00:17:28,960 --> 00:17:30,799
receiver learns the choice bit let's say

431
00:17:30,799 --> 00:17:33,600
b equals zero and then he is gonna

432
00:17:33,600 --> 00:17:36,080
generate some group element in g2 and

433
00:17:36,080 --> 00:17:38,480
send to the sender

434
00:17:38,480 --> 00:17:40,559
and then the sender will map all these

435
00:17:40,559 --> 00:17:42,960
group elements in g1 with this group

436
00:17:42,960 --> 00:17:46,480
element in g2 using the bilinear map to

437
00:17:46,480 --> 00:17:49,600
generate a bunch of group elements in gt

438
00:17:49,600 --> 00:17:51,760
and somehow we want to make sure that

439
00:17:51,760 --> 00:17:54,640
there is only one bump in every vector

440
00:17:54,640 --> 00:17:57,760
one bump here one bomb here and so on

441
00:17:57,760 --> 00:18:00,400
and if this is the case then we can run

442
00:18:00,400 --> 00:18:02,880
rate 1 or t in the target group same as

443
00:18:02,880 --> 00:18:05,120
before

444
00:18:05,120 --> 00:18:07,760
however this idea doesn't quite work if

445
00:18:07,760 --> 00:18:10,320
there is only a single group element in

446
00:18:10,320 --> 00:18:12,640
each of the small boxes here

447
00:18:12,640 --> 00:18:16,080
we need two group elements per box

448
00:18:16,080 --> 00:18:19,200
let's take a closer look

449
00:18:19,200 --> 00:18:21,440
in each of the small boxes it will

450
00:18:21,440 --> 00:18:24,720
contain two group elements in g1

451
00:18:24,720 --> 00:18:27,120
we use the notation ri to denote a

452
00:18:27,120 --> 00:18:30,000
random vector of dimension 2 and we use

453
00:18:30,000 --> 00:18:32,640
this notation to denote

454
00:18:32,640 --> 00:18:35,919
the vector of g to the power r

455
00:18:35,919 --> 00:18:37,679
so in this vector

456
00:18:37,679 --> 00:18:40,640
each small box contains two random group

457
00:18:40,640 --> 00:18:43,520
elements in g1

458
00:18:43,520 --> 00:18:46,160
and then vk1 is just raising all these

459
00:18:46,160 --> 00:18:49,200
group elements to a random exponent row

460
00:18:49,200 --> 00:18:50,240
one

461
00:18:50,240 --> 00:18:52,640
and then we add two bumps

462
00:18:52,640 --> 00:18:54,799
here and here

463
00:18:54,799 --> 00:18:57,360
and similarly for vk2 it is just raising

464
00:18:57,360 --> 00:18:59,440
all these group elements to a random

465
00:18:59,440 --> 00:19:02,480
exponent row 2 and adding two bumps here

466
00:19:02,480 --> 00:19:04,880
and here and so on

467
00:19:04,880 --> 00:19:07,679
so this is the offline phase

468
00:19:07,679 --> 00:19:09,679
and then in the online phase after

469
00:19:09,679 --> 00:19:11,280
learning the choice bit let's say b

470
00:19:11,280 --> 00:19:14,080
equals 0 the receiver will generate two

471
00:19:14,080 --> 00:19:16,720
boxes each box contains two group

472
00:19:16,720 --> 00:19:19,520
elements in g2

473
00:19:19,520 --> 00:19:21,600
where s and t are two

474
00:19:21,600 --> 00:19:22,720
random

475
00:19:22,720 --> 00:19:25,280
vectors of dimension 2 such that the

476
00:19:25,280 --> 00:19:28,320
inner product of s and u equals 1 and

477
00:19:28,320 --> 00:19:31,520
the inner product of t and u equals 0.

478
00:19:31,520 --> 00:19:33,760
and we use this notation similarly as

479
00:19:33,760 --> 00:19:36,320
before but just to differentiate group

480
00:19:36,320 --> 00:19:39,840
elements in g1 or g2

481
00:19:40,240 --> 00:19:44,000
and then the sender will map these boxes

482
00:19:44,000 --> 00:19:47,039
with s and these boxes with t

483
00:19:47,039 --> 00:19:49,280
using the bilinear map

484
00:19:49,280 --> 00:19:52,160
so remember every box contains two group

485
00:19:52,160 --> 00:19:53,280
elements

486
00:19:53,280 --> 00:19:55,280
so the mapping is like doing an inner

487
00:19:55,280 --> 00:19:58,000
product between the two boxes

488
00:19:58,000 --> 00:19:59,840
and then the sender will get a vector of

489
00:19:59,840 --> 00:20:02,240
group elements in gt

490
00:20:02,240 --> 00:20:05,280
and similarly for the other vectors

491
00:20:05,280 --> 00:20:08,159
so because the inner product of s and u

492
00:20:08,159 --> 00:20:09,679
equals 1

493
00:20:09,679 --> 00:20:12,159
so there is a bump here

494
00:20:12,159 --> 00:20:13,520
on the other hand

495
00:20:13,520 --> 00:20:15,679
because the inner product of t and u is

496
00:20:15,679 --> 00:20:19,039
equal to 0 there is no bump here

497
00:20:19,039 --> 00:20:21,520
and similarly there is a bump here

498
00:20:21,520 --> 00:20:23,360
and not here

499
00:20:23,360 --> 00:20:25,840
so in this way we can make sure that in

500
00:20:25,840 --> 00:20:28,799
every vector there is exactly one bump

501
00:20:28,799 --> 00:20:31,440
and it is in the correct position and

502
00:20:31,440 --> 00:20:33,679
then we're done

503
00:20:33,679 --> 00:20:35,600
that's the construction of amortized

504
00:20:35,600 --> 00:20:37,760
h10t from bilinear map

505
00:20:37,760 --> 00:20:39,760
and finally i want to briefly mention

506
00:20:39,760 --> 00:20:43,919
some of our concrete optimizations

507
00:20:44,480 --> 00:20:46,480
in this construction the online

508
00:20:46,480 --> 00:20:48,960
communication from the receiver

509
00:20:48,960 --> 00:20:51,520
contains four group elements in g2 there

510
00:20:51,520 --> 00:20:53,919
are two boxes and each box contains two

511
00:20:53,919 --> 00:20:56,080
group elements in g2

512
00:20:56,080 --> 00:20:58,559
and we can reduce this communication to

513
00:20:58,559 --> 00:21:01,039
three group elements in g2

514
00:21:01,039 --> 00:21:02,880
and here's the idea

515
00:21:02,880 --> 00:21:05,039
first we will increase

516
00:21:05,039 --> 00:21:08,400
the number of group elements in each box

517
00:21:08,400 --> 00:21:10,080
from 2 to 3.

518
00:21:10,080 --> 00:21:12,080
so these vectors become

519
00:21:12,080 --> 00:21:14,480
vectors of dimension 3.

520
00:21:14,480 --> 00:21:16,640
and then we put a different bump here

521
00:21:16,640 --> 00:21:17,760
and here

522
00:21:17,760 --> 00:21:20,720
here we put plus u and here we plug we

523
00:21:20,720 --> 00:21:22,640
put plus v

524
00:21:22,640 --> 00:21:24,640
and then in the online phase

525
00:21:24,640 --> 00:21:26,480
the receiver will generate a single

526
00:21:26,480 --> 00:21:29,039
vector s of dimension 3 such that the

527
00:21:29,039 --> 00:21:31,520
inner product of s and u equals 1 and

528
00:21:31,520 --> 00:21:34,320
the inner product of s and v equals 0

529
00:21:34,320 --> 00:21:36,320
and then we're done

530
00:21:36,320 --> 00:21:39,200
the rest is the same as before but we

531
00:21:39,200 --> 00:21:40,640
reduce the

532
00:21:40,640 --> 00:21:42,880
receiver communication from 4 group

533
00:21:42,880 --> 00:21:46,559
elements to three group elements in g2

534
00:21:46,559 --> 00:21:49,200
and we have more optimizations discussed

535
00:21:49,200 --> 00:21:51,120
in the paper

536
00:21:51,120 --> 00:21:54,080
to summarize we proposed a new primitive

537
00:21:54,080 --> 00:21:56,799
called amortized h1ot and we give a

538
00:21:56,799 --> 00:21:59,120
construction from the bilinear sxdh

539
00:21:59,120 --> 00:22:00,640
assumption

540
00:22:00,640 --> 00:22:02,400
and we can further reduce the offline

541
00:22:02,400 --> 00:22:04,159
communication

542
00:22:04,159 --> 00:22:07,679
from the bilinear power ddh assumption

543
00:22:07,679 --> 00:22:09,520
and given this primitive

544
00:22:09,520 --> 00:22:11,120
we can reduce the receiver's

545
00:22:11,120 --> 00:22:13,200
communication in a lot of applications

546
00:22:13,200 --> 00:22:16,880
such as pir and psi

547
00:22:17,280 --> 00:22:19,200
finally i want to mention a few open

548
00:22:19,200 --> 00:22:20,240
problems

549
00:22:20,240 --> 00:22:22,640
can we achieve amortized return ot from

550
00:22:22,640 --> 00:22:24,159
other assumptions

551
00:22:24,159 --> 00:22:26,400
can we achieve some sort of amortized

552
00:22:26,400 --> 00:22:28,400
rich one ot extension

553
00:22:28,400 --> 00:22:30,880
and in terms of applications can we find

554
00:22:30,880 --> 00:22:34,559
more applications of amortized h1ot

555
00:22:34,559 --> 00:22:35,760
and can we

556
00:22:35,760 --> 00:22:37,760
get concretely efficient implementation

557
00:22:37,760 --> 00:22:40,640
of the existing applications

558
00:22:40,640 --> 00:22:43,520
thank you

