1
00:00:01,280 --> 00:00:03,520
this talk is on communication efficient

2
00:00:03,520 --> 00:00:05,440
asynchronous multi-party computation

3
00:00:05,440 --> 00:00:08,320
with adaptive security my name is martin

4
00:00:08,320 --> 00:00:09,920
here and this is joined to work with

5
00:00:09,920 --> 00:00:13,200
anik choparr and jindal yutzong

6
00:00:13,200 --> 00:00:15,599
first very briefly what is npc we

7
00:00:15,599 --> 00:00:17,440
consider n parties two of them are

8
00:00:17,440 --> 00:00:19,840
corrupted the parties are connected to

9
00:00:19,840 --> 00:00:22,240
these bilateral channels

10
00:00:22,240 --> 00:00:24,560
and the goal of mpc is to evaluate the

11
00:00:24,560 --> 00:00:27,840
circuit where each input is given by one

12
00:00:27,840 --> 00:00:30,320
of the parties and the output is

13
00:00:30,320 --> 00:00:34,160
revealed to entitled parties

14
00:00:34,160 --> 00:00:36,800
in the literature one considers several

15
00:00:36,800 --> 00:00:38,879
models with respect to the network one

16
00:00:38,879 --> 00:00:41,200
distinguishes synchronous channels and

17
00:00:41,200 --> 00:00:43,600
asynchronous channels in synchronous

18
00:00:43,600 --> 00:00:46,480
channels the delay of of the channels is

19
00:00:46,480 --> 00:00:48,879
bound by a non-constant whereas in

20
00:00:48,879 --> 00:00:50,960
asynchronous channels messages can be

21
00:00:50,960 --> 00:00:53,520
delayed arbitrarily messages can even

22
00:00:53,520 --> 00:00:55,520
overtake each other the adversary can

23
00:00:55,520 --> 00:00:58,160
control the delay of messages with

24
00:00:58,160 --> 00:01:00,879
respect to corruptions one distinguishes

25
00:01:00,879 --> 00:01:03,440
static corruption that active corruption

26
00:01:03,440 --> 00:01:05,920
static corruption means that all parties

27
00:01:05,920 --> 00:01:07,520
are corrupted right at the beginning of

28
00:01:07,520 --> 00:01:09,920
the protocol whereas in adaptive

29
00:01:09,920 --> 00:01:11,680
corruption the adverse is allowed to

30
00:01:11,680 --> 00:01:13,600
corrupt parties during the protocol

31
00:01:13,600 --> 00:01:16,400
execution and he chooses the parties to

32
00:01:16,400 --> 00:01:18,640
corrupt depending on information got it

33
00:01:18,640 --> 00:01:20,479
so far

34
00:01:20,479 --> 00:01:22,320
with respect to security one

35
00:01:22,320 --> 00:01:24,720
distinguishes computational security and

36
00:01:24,720 --> 00:01:27,280
information theoretic security where

37
00:01:27,280 --> 00:01:29,840
computational security usually is based

38
00:01:29,840 --> 00:01:31,840
on some hardness assumption and the

39
00:01:31,840 --> 00:01:33,759
adversary is assumed to be polynomially

40
00:01:33,759 --> 00:01:36,880
bounded whereas in information security

41
00:01:36,880 --> 00:01:39,600
in information theoretic security the

42
00:01:39,600 --> 00:01:44,640
security is unbounded without assumption

43
00:01:44,880 --> 00:01:46,960
in this work we consider the

44
00:01:46,960 --> 00:01:49,119
asynchronous network model

45
00:01:49,119 --> 00:01:50,960
and we allow the university to

46
00:01:50,960 --> 00:01:53,840
adaptively corrupt parties and you are

47
00:01:53,840 --> 00:01:57,200
after computational security in this

48
00:01:57,200 --> 00:01:58,960
model the best possible corruption

49
00:01:58,960 --> 00:02:02,320
threshold is t smaller and over three

50
00:02:02,320 --> 00:02:04,640
a little bit of history asynchronous

51
00:02:04,640 --> 00:02:07,119
protocols with t smaller and over three

52
00:02:07,119 --> 00:02:09,199
were first introduced by ben or kelm and

53
00:02:09,199 --> 00:02:11,920
trabin they achieved adaptive security

54
00:02:11,920 --> 00:02:13,360
at some

55
00:02:13,360 --> 00:02:15,680
communication complexity which was very

56
00:02:15,680 --> 00:02:17,680
high

57
00:02:17,680 --> 00:02:20,560
later on myself nielsen shutter tech

58
00:02:20,560 --> 00:02:22,959
presented the statically secure

59
00:02:22,959 --> 00:02:24,879
asynchronous mpc protocol that

60
00:02:24,879 --> 00:02:27,200
communicated into the three

61
00:02:27,200 --> 00:02:30,080
uh per com per multiplication gate and

62
00:02:30,080 --> 00:02:32,000
we improved this later

63
00:02:32,000 --> 00:02:35,480
to n squared

64
00:02:36,319 --> 00:02:38,640
and rionkon presented an adaptively

65
00:02:38,640 --> 00:02:41,360
secure mpc protocol that communicates

66
00:02:41,360 --> 00:02:43,120
into the five

67
00:02:43,120 --> 00:02:45,360
andrew darian potter presented a

68
00:02:45,360 --> 00:02:47,920
statically secure mpc protocol in the

69
00:02:47,920 --> 00:02:50,400
asynchronous model that assumes

70
00:02:50,400 --> 00:02:52,640
some automorphic encryption and

71
00:02:52,640 --> 00:02:55,040
communicates only linear per

72
00:02:55,040 --> 00:02:56,720
multiplication gate

73
00:02:56,720 --> 00:02:58,959
this was further improved by kohan by

74
00:02:58,959 --> 00:03:00,319
assuming

75
00:03:00,319 --> 00:03:02,640
fully homomorphic encryption where the

76
00:03:02,640 --> 00:03:04,959
overall communication complexity does

77
00:03:04,959 --> 00:03:08,080
not depend on the circuit size

78
00:03:08,080 --> 00:03:10,239
furthermore would have presented an

79
00:03:10,239 --> 00:03:12,720
adaptively secure asynchronous mpc

80
00:03:12,720 --> 00:03:15,840
protocol that communicates o of n to the

81
00:03:15,840 --> 00:03:19,120
four per multiplication gate

82
00:03:19,120 --> 00:03:21,760
as said in this work we focus on

83
00:03:21,760 --> 00:03:24,000
adaptive security

84
00:03:24,000 --> 00:03:27,120
and what we achieve is adaptive security

85
00:03:27,120 --> 00:03:30,080
against the cryptographic adversary we

86
00:03:30,080 --> 00:03:32,080
achieve standalone security and we do

87
00:03:32,080 --> 00:03:34,239
not assume somewhat or fully homomorphic

88
00:03:34,239 --> 00:03:35,599
encryption

89
00:03:35,599 --> 00:03:38,000
we we have two protocols in the paper

90
00:03:38,000 --> 00:03:40,159
the first protocol tolerates t smaller

91
00:03:40,159 --> 00:03:42,000
and over three which is optimal in that

92
00:03:42,000 --> 00:03:44,480
model and communicates o of n squared

93
00:03:44,480 --> 00:03:46,720
per multiplication gate

94
00:03:46,720 --> 00:03:48,720
note that this is the same communication

95
00:03:48,720 --> 00:03:51,280
complexity as is needed for static

96
00:03:51,280 --> 00:03:53,840
security if you don't want to assume

97
00:03:53,840 --> 00:03:56,319
some automorphic encryption respectively

98
00:03:56,319 --> 00:03:58,640
fully homomorphic encryption

99
00:03:58,640 --> 00:04:01,519
our second protocol tolerates slightly

100
00:04:01,519 --> 00:04:03,680
less corruptions

101
00:04:03,680 --> 00:04:05,599
and it has linear communication

102
00:04:05,599 --> 00:04:08,080
complexity and it assumes secure

103
00:04:08,080 --> 00:04:09,400
erasures

104
00:04:09,400 --> 00:04:11,519
non-interactive knowledge proofs and

105
00:04:11,519 --> 00:04:15,280
atomic send atomic sent means that if a

106
00:04:15,280 --> 00:04:17,519
non that the party sent can send a

107
00:04:17,519 --> 00:04:20,720
message to all other parties where if

108
00:04:20,720 --> 00:04:22,880
the party is honest then it the message

109
00:04:22,880 --> 00:04:24,560
arrives at all other parties if the

110
00:04:24,560 --> 00:04:26,800
party is malicious then the adversary

111
00:04:26,800 --> 00:04:29,120
chooses what happens but the adversary

112
00:04:29,120 --> 00:04:32,560
cannot corrupt the party during the send

113
00:04:32,560 --> 00:04:35,199
operation

114
00:04:36,720 --> 00:04:39,199
we follow the cdn approach which means

115
00:04:39,199 --> 00:04:41,199
that we assume a homomorphic threshold

116
00:04:41,199 --> 00:04:42,720
encryption scheme

117
00:04:42,720 --> 00:04:44,560
and we assume that the secret key of

118
00:04:44,560 --> 00:04:46,960
that scheme is initially shared among

119
00:04:46,960 --> 00:04:49,520
the parties then in order to provide an

120
00:04:49,520 --> 00:04:52,320
input to the computation the party would

121
00:04:52,320 --> 00:04:55,520
encrypt the input and

122
00:04:55,520 --> 00:04:57,600
send the encryption to everybody and

123
00:04:57,600 --> 00:05:00,400
prove plain text knowledge

124
00:05:00,400 --> 00:05:02,880
addition of course is for free by

125
00:05:02,880 --> 00:05:04,720
exploiting the homomorphism of the

126
00:05:04,720 --> 00:05:06,880
encryption scheme and for multiplication

127
00:05:06,880 --> 00:05:10,320
we will employ some protocol

128
00:05:10,320 --> 00:05:12,240
in order to output

129
00:05:12,240 --> 00:05:14,960
um we use threshold decryption towards

130
00:05:14,960 --> 00:05:18,320
the entitled parties

131
00:05:18,960 --> 00:05:21,039
so first each part encrypts his input

132
00:05:21,039 --> 00:05:22,639
proves plaintext knowledge and then we

133
00:05:22,639 --> 00:05:24,800
go through the circuit additions for

134
00:05:24,800 --> 00:05:27,440
free multiplications with the protocol

135
00:05:27,440 --> 00:05:29,039
finally we have an encryption of the

136
00:05:29,039 --> 00:05:30,960
output which is then threshold decrypted

137
00:05:30,960 --> 00:05:34,080
towards the entire parties

138
00:05:34,080 --> 00:05:36,400
we employ circuit randomization by

139
00:05:36,400 --> 00:05:38,639
beaver which means that in a in some

140
00:05:38,639 --> 00:05:40,800
preparation phase which is independent

141
00:05:40,800 --> 00:05:43,360
from the concrete circuit the parties

142
00:05:43,360 --> 00:05:46,960
prepare a bunch of triples abc a triple

143
00:05:46,960 --> 00:05:49,919
abc are three encryptions where the

144
00:05:49,919 --> 00:05:52,320
plaintext of the first two encryptions

145
00:05:52,320 --> 00:05:55,440
multiply to the certain encryption

146
00:05:55,440 --> 00:05:57,280
and then of course in the computation

147
00:05:57,280 --> 00:06:00,400
phase we can use these triples we for

148
00:06:00,400 --> 00:06:02,880
addition we just use the homomorphism of

149
00:06:02,880 --> 00:06:04,560
the encryption scheme and for

150
00:06:04,560 --> 00:06:06,800
multiplication in order to multiply two

151
00:06:06,800 --> 00:06:09,440
values two encryptions x and y

152
00:06:09,440 --> 00:06:12,160
the parties pick the next triple a b c

153
00:06:12,160 --> 00:06:13,680
and then they

154
00:06:13,680 --> 00:06:15,840
decrypt x minus

155
00:06:15,840 --> 00:06:19,120
a and y minus b and one can see that the

156
00:06:19,120 --> 00:06:21,759
product x times y can be written as a

157
00:06:21,759 --> 00:06:24,880
linear combination of the ciphertext abc

158
00:06:24,880 --> 00:06:27,440
which can be computed non-interactively

159
00:06:27,440 --> 00:06:30,080
so this means that multiplication

160
00:06:30,080 --> 00:06:31,360
boiled down

161
00:06:31,360 --> 00:06:35,160
to two public reconstructions

162
00:06:37,600 --> 00:06:40,240
now how do we prepare these triples

163
00:06:40,240 --> 00:06:43,360
so first of all the parties generate the

164
00:06:43,360 --> 00:06:45,039
random a

165
00:06:45,039 --> 00:06:48,720
therefore each party pj pro

166
00:06:48,720 --> 00:06:52,400
chooses a random h a encrypts it and pro

167
00:06:52,400 --> 00:06:55,520
costs asynchronously that means a costs

168
00:06:55,520 --> 00:06:57,440
big aj

169
00:06:57,440 --> 00:07:00,240
furthermore the party starts bilateral

170
00:07:00,240 --> 00:07:03,199
proofs interactively to prove plain text

171
00:07:03,199 --> 00:07:05,360
knowledge of aj

172
00:07:05,360 --> 00:07:07,440
then the part they run an agreement on a

173
00:07:07,440 --> 00:07:08,720
corset

174
00:07:08,720 --> 00:07:12,400
protocol in order to find at least

175
00:07:12,400 --> 00:07:15,120
n minus t parties who did the first step

176
00:07:15,120 --> 00:07:18,560
correctly that is each party votes for

177
00:07:18,560 --> 00:07:20,960
the party to be in the corset if the

178
00:07:20,960 --> 00:07:23,120
party received the a cards from that of

179
00:07:23,120 --> 00:07:25,599
the party and also accepted the proof of

180
00:07:25,599 --> 00:07:28,560
plaintext knowledge

181
00:07:29,680 --> 00:07:32,319
then all the parties compute a as the

182
00:07:32,319 --> 00:07:35,120
sum of the ahas from the parties in the

183
00:07:35,120 --> 00:07:37,680
corset

184
00:07:38,080 --> 00:07:41,280
then the parties produce the b and the c

185
00:07:41,280 --> 00:07:44,080
simultaneously for the b the parties

186
00:07:44,080 --> 00:07:46,560
just follow the same approach as for ta

187
00:07:46,560 --> 00:07:48,160
and for the c

188
00:07:48,160 --> 00:07:51,360
as now the a is known already each party

189
00:07:51,360 --> 00:07:55,360
provides a cj which is the bj times a

190
00:07:55,360 --> 00:07:56,840
plus some

191
00:07:56,840 --> 00:08:00,319
randomization so the cj will contain a

192
00:08:00,319 --> 00:08:02,319
plain text which is the product of the

193
00:08:02,319 --> 00:08:06,639
plain text of a and the plaintext of bj

194
00:08:06,639 --> 00:08:08,960
again the parties

195
00:08:08,960 --> 00:08:11,599
start bilateral proofs of plaintext

196
00:08:11,599 --> 00:08:14,479
knowledge of b j and multiplication

197
00:08:14,479 --> 00:08:17,520
proofs of c j then the parties run again

198
00:08:17,520 --> 00:08:19,759
a corset agreement protocol to find the

199
00:08:19,759 --> 00:08:22,000
subset of at least n minus t parties who

200
00:08:22,000 --> 00:08:25,199
did step four correctly

201
00:08:25,199 --> 00:08:28,000
and then they compute b as the sum of

202
00:08:28,000 --> 00:08:30,319
the b j's in the core set and c as the

203
00:08:30,319 --> 00:08:32,559
sum of the c j's in the corset one can

204
00:08:32,559 --> 00:08:35,599
easily verify that this triple a b c is

205
00:08:35,599 --> 00:08:38,080
now a correct multiplication triple and

206
00:08:38,080 --> 00:08:39,839
that the adversary does not know the

207
00:08:39,839 --> 00:08:42,399
plain text of a or b and of course not

208
00:08:42,399 --> 00:08:45,040
of c neither

209
00:08:45,040 --> 00:08:47,760
about the communication complexity the

210
00:08:47,760 --> 00:08:51,519
first step uh requires o of n a cost

211
00:08:51,519 --> 00:08:53,600
operations then in the second step we

212
00:08:53,600 --> 00:08:56,640
have one acs steps four and five

213
00:08:56,640 --> 00:09:00,080
equivalently and now by running this

214
00:09:00,080 --> 00:09:02,320
protocol multiple times in parallel we

215
00:09:02,320 --> 00:09:05,200
can amortize the cost of acs and of a

216
00:09:05,200 --> 00:09:07,440
cost so we have

217
00:09:07,440 --> 00:09:10,880
two acs's overall at the cost of a cost

218
00:09:10,880 --> 00:09:13,279
if the message so if we move if we if we

219
00:09:13,279 --> 00:09:15,600
want to across multiple messages at the

220
00:09:15,600 --> 00:09:18,080
same time then we can amortize the cost

221
00:09:18,080 --> 00:09:21,120
of a cast and we can have linear cost

222
00:09:21,120 --> 00:09:23,519
which sums up overall then to cost n

223
00:09:23,519 --> 00:09:27,760
squares n squared times copper

224
00:09:27,839 --> 00:09:30,080
now we want to achieve linear

225
00:09:30,080 --> 00:09:32,640
communication complexity first thing we

226
00:09:32,640 --> 00:09:35,360
do is we replace the bilateral proofs by

227
00:09:35,360 --> 00:09:37,680
non-interactive serial knowledge proofs

228
00:09:37,680 --> 00:09:40,399
which means that each party will just a

229
00:09:40,399 --> 00:09:43,600
cost one big message

230
00:09:43,600 --> 00:09:46,560
furthermore we assume that in the setup

231
00:09:46,560 --> 00:09:49,760
two committees are given to set c1 c2

232
00:09:49,760 --> 00:09:52,480
random subsets of the party sets where

233
00:09:52,480 --> 00:09:54,000
the size of each committee is

234
00:09:54,000 --> 00:09:55,839
approximately k

235
00:09:55,839 --> 00:09:58,800
each party knows if it is in a committee

236
00:09:58,800 --> 00:10:00,959
but part is not in the committee and do

237
00:10:00,959 --> 00:10:03,760
not know who is in the committee

238
00:10:03,760 --> 00:10:06,079
and now instead of having each party

239
00:10:06,079 --> 00:10:09,200
provide a random aha we have only

240
00:10:09,200 --> 00:10:11,519
parties in the first committee provide a

241
00:10:11,519 --> 00:10:14,640
random h a and then the sum of the h a

242
00:10:14,640 --> 00:10:16,640
still is a and will be known to

243
00:10:16,640 --> 00:10:19,600
everybody but only the parties in ci

244
00:10:19,600 --> 00:10:22,640
provide an aj we do exactly the same

245
00:10:22,640 --> 00:10:25,839
thing for the bjc j pair here just to

246
00:10:25,839 --> 00:10:28,560
use a different commit d and here we use

247
00:10:28,560 --> 00:10:31,279
the fact that the parties just need to

248
00:10:31,279 --> 00:10:33,519
send one message and they use atomic

249
00:10:33,519 --> 00:10:36,640
send in order to do that this means that

250
00:10:36,640 --> 00:10:39,600
even if a party is is uh honest if a

251
00:10:39,600 --> 00:10:41,760
part in the committee is honest then it

252
00:10:41,760 --> 00:10:44,959
will actually broadcast a valid message

253
00:10:44,959 --> 00:10:46,720
with correct non-interactive serial

254
00:10:46,720 --> 00:10:49,839
knowledge proofs in it

255
00:10:52,079 --> 00:10:54,480
so this brings down the communication

256
00:10:54,480 --> 00:10:58,240
complexity instead of n a costs we have

257
00:10:58,240 --> 00:11:00,640
now copper a costs and the costs for

258
00:11:00,640 --> 00:11:03,600
renekers by using a recent paper by blue

259
00:11:03,600 --> 00:11:06,399
metal we have costs of

260
00:11:06,399 --> 00:11:09,120
uh poly and copper times n which then

261
00:11:09,120 --> 00:11:11,920
sums up to overall communication

262
00:11:11,920 --> 00:11:15,680
complexity of n times poly of copper

263
00:11:15,680 --> 00:11:18,800
which by just standard techniques can be

264
00:11:18,800 --> 00:11:20,320
shown to

265
00:11:20,320 --> 00:11:25,040
to be equivalent to o of n times copper

266
00:11:26,079 --> 00:11:28,000
now in the computation phase i said

267
00:11:28,000 --> 00:11:30,079
before for input the party would just

268
00:11:30,079 --> 00:11:32,959
encrypt x a cost x improved plaintext

269
00:11:32,959 --> 00:11:35,120
knowledge addition exploit the

270
00:11:35,120 --> 00:11:38,320
homomorphism multiplication we consume

271
00:11:38,320 --> 00:11:40,240
one triple and we need two public

272
00:11:40,240 --> 00:11:42,480
reconstructions and then for the output

273
00:11:42,480 --> 00:11:44,320
we just reconstruct right to entitle

274
00:11:44,320 --> 00:11:46,480
parties now for these public

275
00:11:46,480 --> 00:11:49,760
reconstructions we use the technique by

276
00:11:49,760 --> 00:11:51,600
dumb guard nielsen of

277
00:11:51,600 --> 00:11:56,160
o7 namely we reconstruct n minus t n

278
00:11:56,160 --> 00:11:58,959
minus two t encryptions at the same time

279
00:11:58,959 --> 00:12:01,440
in parallel and therefore we first

280
00:12:01,440 --> 00:12:04,079
expand these n minus two t encryptions

281
00:12:04,079 --> 00:12:06,800
with a linear error correction code to n

282
00:12:06,800 --> 00:12:08,160
encryptions

283
00:12:08,160 --> 00:12:10,399
and now each encryption is

284
00:12:10,399 --> 00:12:13,440
reconstructed towards one party and the

285
00:12:13,440 --> 00:12:16,000
party will will then send the plaintext

286
00:12:16,000 --> 00:12:18,720
yj to everybody and everybody then

287
00:12:18,720 --> 00:12:21,360
receives a whole bunch of such yj's

288
00:12:21,360 --> 00:12:23,760
applies error correction and can

289
00:12:23,760 --> 00:12:26,959
reconstruct the values x1 up to xn minus

290
00:12:26,959 --> 00:12:29,359
2t

291
00:12:31,680 --> 00:12:33,600
the communication complexity of this

292
00:12:33,600 --> 00:12:36,399
protocol is n squared but as we

293
00:12:36,399 --> 00:12:39,600
reconstruct o of n ciphertext at once

294
00:12:39,600 --> 00:12:41,839
this amortizes to o of n per

295
00:12:41,839 --> 00:12:44,480
multiplication

296
00:12:44,480 --> 00:12:47,279
now is this adaptively secure well of

297
00:12:47,279 --> 00:12:48,800
course it's not

298
00:12:48,800 --> 00:12:52,079
if a honest party provides some input

299
00:12:52,079 --> 00:12:53,839
this means that it

300
00:12:53,839 --> 00:12:56,639
a costs an encryption of the input now

301
00:12:56,639 --> 00:12:57,680
in the

302
00:12:57,680 --> 00:12:59,760
in the simulation the simulator does not

303
00:12:59,760 --> 00:13:01,760
know that input if the part is honest

304
00:13:01,760 --> 00:13:03,760
and the simulator would just present a

305
00:13:03,760 --> 00:13:06,240
random encryption to the adversary but

306
00:13:06,240 --> 00:13:08,160
later the adversary could corrupt that

307
00:13:08,160 --> 00:13:10,639
party and this then the simulator needs

308
00:13:10,639 --> 00:13:13,519
to explain how this encryption contains

309
00:13:13,519 --> 00:13:16,160
the value the input value of that party

310
00:13:16,160 --> 00:13:19,680
and of course the simulator cannot

311
00:13:19,680 --> 00:13:21,839
so this is not adaptively secure in

312
00:13:21,839 --> 00:13:24,079
order to achieve adaptive security we

313
00:13:24,079 --> 00:13:25,360
use the

314
00:13:25,360 --> 00:13:28,160
this trick by don guard nielsen r3

315
00:13:28,160 --> 00:13:30,639
the basic idea is that

316
00:13:30,639 --> 00:13:34,560
a setup assumption we assume to have a

317
00:13:34,560 --> 00:13:37,120
constant encryption of one we call this

318
00:13:37,120 --> 00:13:39,360
k and then in order to encrypt the

319
00:13:39,360 --> 00:13:42,639
message m with respect to this k we just

320
00:13:42,639 --> 00:13:45,839
multiply k n times and we add a

321
00:13:45,839 --> 00:13:48,959
encryption of zero in order to randomize

322
00:13:48,959 --> 00:13:50,880
so clearly

323
00:13:50,880 --> 00:13:53,360
this gives an encryption of m if k is an

324
00:13:53,360 --> 00:13:55,519
encryption of 1.

325
00:13:55,519 --> 00:13:58,639
however in the simulation

326
00:13:58,639 --> 00:14:00,800
we will in the setup

327
00:14:00,800 --> 00:14:03,040
assume that k is not an encryption of

328
00:14:03,040 --> 00:14:05,920
one but k is an encryption of zero so

329
00:14:05,920 --> 00:14:08,959
thereby in the simulation all values are

330
00:14:08,959 --> 00:14:11,760
zero the inputs are encryptions of zero

331
00:14:11,760 --> 00:14:13,680
outputs everything is encryptions of

332
00:14:13,680 --> 00:14:16,720
zeros so this is pretty easy to simulate

333
00:14:16,720 --> 00:14:18,240
right

334
00:14:18,240 --> 00:14:20,480
however one problem we have now of

335
00:14:20,480 --> 00:14:22,160
course is that in the simulation the

336
00:14:22,160 --> 00:14:25,839
output y will always contain zero

337
00:14:25,839 --> 00:14:28,720
and this is not uh the same as in the

338
00:14:28,720 --> 00:14:31,279
real world so what we do here is we will

339
00:14:31,279 --> 00:14:34,079
not reconstruct the output y but we will

340
00:14:34,079 --> 00:14:37,760
reconstruct the value y plus m where m

341
00:14:37,760 --> 00:14:40,160
is constructed in such a way that in the

342
00:14:40,160 --> 00:14:42,880
real world m is an encryption of zero

343
00:14:42,880 --> 00:14:45,839
and in the ideal world m can be chosen

344
00:14:45,839 --> 00:14:49,040
by the simulator the basic idea here is

345
00:14:49,040 --> 00:14:52,399
to assume an additional value r to be

346
00:14:52,399 --> 00:14:55,040
part of the setup where r in the real

347
00:14:55,040 --> 00:14:57,279
world r is an encryption of zero and in

348
00:14:57,279 --> 00:15:01,120
the simulation r is an encryption of one

349
00:15:01,120 --> 00:15:04,320
and then the parties will encrypt some m

350
00:15:04,320 --> 00:15:06,399
with respect to r

351
00:15:06,399 --> 00:15:09,199
where this m is somehow i will not

352
00:15:09,199 --> 00:15:12,480
explain here how chosen by the simulator

353
00:15:12,480 --> 00:15:16,240
now clearly er of m in the real world

354
00:15:16,240 --> 00:15:19,040
contains zero because r is an encryption

355
00:15:19,040 --> 00:15:21,199
of zero so in the real world this does

356
00:15:21,199 --> 00:15:23,839
not change the output whereas in the

357
00:15:23,839 --> 00:15:27,519
ideal world the simulator can choose in

358
00:15:27,519 --> 00:15:31,040
the his contributions fj in such a way

359
00:15:31,040 --> 00:15:33,519
that m will contain the plaintext he

360
00:15:33,519 --> 00:15:36,399
wants and thereby can open the the

361
00:15:36,399 --> 00:15:39,040
output value of the computation as

362
00:15:39,040 --> 00:15:41,839
desired

363
00:15:43,440 --> 00:15:45,519
now there is a second problem if all

364
00:15:45,519 --> 00:15:47,600
encryptions contain a zero then of

365
00:15:47,600 --> 00:15:49,759
course the inputs given by the

366
00:15:49,759 --> 00:15:52,320
adversaries cannot be

367
00:15:52,320 --> 00:15:54,720
extracted so the simulator cannot find

368
00:15:54,720 --> 00:15:56,880
the inputs that the adversary gives into

369
00:15:56,880 --> 00:15:59,040
the computation in the real world and so

370
00:15:59,040 --> 00:16:00,639
he cannot give these inputs to the

371
00:16:00,639 --> 00:16:02,240
functionality

372
00:16:02,240 --> 00:16:04,639
but this can easily be solved by just

373
00:16:04,639 --> 00:16:06,959
adding a uc commitment to the input

374
00:16:06,959 --> 00:16:09,120
stage so if a party wants to give an

375
00:16:09,120 --> 00:16:11,519
input not only he needs to provide an

376
00:16:11,519 --> 00:16:13,600
encryption with respect to k of that

377
00:16:13,600 --> 00:16:16,160
input but in addition the party also

378
00:16:16,160 --> 00:16:19,360
needs to uc commit to that input and

379
00:16:19,360 --> 00:16:22,079
proof in serial knowledge that the

380
00:16:22,079 --> 00:16:24,160
commitment contains the same value as

381
00:16:24,160 --> 00:16:26,880
the encryption

382
00:16:27,199 --> 00:16:28,959
let me conclude

383
00:16:28,959 --> 00:16:31,600
we have presented two protocols

384
00:16:31,600 --> 00:16:33,279
the first protocol is for the

385
00:16:33,279 --> 00:16:35,440
asynchronous network it achieves

386
00:16:35,440 --> 00:16:38,720
adaptive security and it communicates in

387
00:16:38,720 --> 00:16:41,040
square per multiplication

388
00:16:41,040 --> 00:16:43,040
this is as efficient as the best-known

389
00:16:43,040 --> 00:16:46,639
protocol not using sh or fhe but our

390
00:16:46,639 --> 00:16:49,519
protocol is adaptively secure

391
00:16:49,519 --> 00:16:51,759
then we have presented the second

392
00:16:51,759 --> 00:16:54,079
protocols delay synchronous network

393
00:16:54,079 --> 00:16:56,240
adaptive security and with linear

394
00:16:56,240 --> 00:16:58,560
communication complexity

395
00:16:58,560 --> 00:17:00,560
here we have to pay a price on the

396
00:17:00,560 --> 00:17:02,720
corruption threshold so t is slightly

397
00:17:02,720 --> 00:17:04,959
smaller than the novice 3 we need to

398
00:17:04,959 --> 00:17:06,880
assume eurasia's non-interactive serial

399
00:17:06,880 --> 00:17:10,559
knowledge proofs and atomic's end

400
00:17:10,559 --> 00:17:12,559
it's an open question to achieve

401
00:17:12,559 --> 00:17:14,400
adaptive security with linear

402
00:17:14,400 --> 00:17:16,640
communication complexity in the standard

403
00:17:16,640 --> 00:17:19,640
model

