1
00:00:01,360 --> 00:00:03,280
welcome to my talk

2
00:00:03,280 --> 00:00:06,080
i'm going to talk about secure software

3
00:00:06,080 --> 00:00:09,440
living this is a joint work with twitch

4
00:00:09,440 --> 00:00:15,239
kitaga and takashiyamaka from ntt

5
00:00:20,000 --> 00:00:23,279
in this work we achieve secure software

6
00:00:23,279 --> 00:00:25,599
leasing schemes for pseudorandom

7
00:00:25,599 --> 00:00:28,400
functions and supports of evasive

8
00:00:28,400 --> 00:00:31,279
functions from the learning with errors

9
00:00:31,279 --> 00:00:33,680
assumption

10
00:00:33,680 --> 00:00:34,559
as

11
00:00:34,559 --> 00:00:38,320
an additional feature we can

12
00:00:38,320 --> 00:00:41,440
extend our scheme to

13
00:00:41,440 --> 00:00:44,000
secure software listing with classical

14
00:00:44,000 --> 00:00:46,640
communication

15
00:00:48,320 --> 00:00:51,120
let's start with what is secure software

16
00:00:51,120 --> 00:00:53,599
listing

17
00:00:54,480 --> 00:00:56,879
sega software releasing is a quantum

18
00:00:56,879 --> 00:00:59,199
cryptographic primitive

19
00:00:59,199 --> 00:01:01,760
there are lesser who has the software

20
00:01:01,760 --> 00:01:04,718
and the lesson

21
00:01:05,360 --> 00:01:07,920
a central authority generates a common

22
00:01:07,920 --> 00:01:10,880
reference string

23
00:01:11,760 --> 00:01:14,080
the lesser generates a protected

24
00:01:14,080 --> 00:01:18,158
software by using a secret key

25
00:01:19,040 --> 00:01:21,200
then the lesser sends it to the let's

26
00:01:21,200 --> 00:01:23,439
see

27
00:01:25,680 --> 00:01:28,159
the lazy can run the software on the

28
00:01:28,159 --> 00:01:30,159
estimated platform

29
00:01:30,159 --> 00:01:33,040
that is they can get an output for an

30
00:01:33,040 --> 00:01:35,439
input

31
00:01:39,840 --> 00:01:42,479
at some point the lesser returned the

32
00:01:42,479 --> 00:01:45,520
least software to the lesser

33
00:01:45,520 --> 00:01:47,520
then the lesser checks whether the

34
00:01:47,520 --> 00:01:50,000
returned software is a varied leased

35
00:01:50,000 --> 00:01:53,880
software or not

36
00:01:55,040 --> 00:01:57,200
after the let's see return the list

37
00:01:57,200 --> 00:01:59,759
software they cannot run the software

38
00:01:59,759 --> 00:02:01,360
anymore

39
00:02:01,360 --> 00:02:04,240
that is this software must be a quantum

40
00:02:04,240 --> 00:02:07,200
state since we can easily copy classical

41
00:02:07,200 --> 00:02:09,840
information

42
00:02:12,720 --> 00:02:15,040
there are two security notions for

43
00:02:15,040 --> 00:02:17,760
secure software releasing

44
00:02:17,760 --> 00:02:21,120
one is finite term

45
00:02:21,120 --> 00:02:21,599
in security

46
00:02:21,599 --> 00:02:24,800
security game an adversary receives a

47
00:02:24,800 --> 00:02:28,080
protected software

48
00:02:29,920 --> 00:02:32,800
then the adversary tries to generate

49
00:02:32,800 --> 00:02:36,560
possibly entangled bipartite states

50
00:02:36,560 --> 00:02:39,680
both of them can be used to run the list

51
00:02:39,680 --> 00:02:42,239
software

52
00:02:43,280 --> 00:02:46,480
the adversary sends one state to the

53
00:02:46,480 --> 00:02:50,000
register as a returned software and uses

54
00:02:50,000 --> 00:02:54,560
the other one to run the list software

55
00:02:56,720 --> 00:02:59,360
final term security guarantees the

56
00:02:59,360 --> 00:03:04,120
returned software is not buyed

57
00:03:04,640 --> 00:03:07,519
or the adversary cannot run the least

58
00:03:07,519 --> 00:03:10,000
software on the estimated platform

59
00:03:10,000 --> 00:03:11,440
anymore

60
00:03:11,440 --> 00:03:14,480
here the adversary is forced to run

61
00:03:14,480 --> 00:03:17,040
software by an honest evaluation

62
00:03:17,040 --> 00:03:19,840
algorithm

63
00:03:22,159 --> 00:03:24,959
the other notion is in finite time

64
00:03:24,959 --> 00:03:26,799
security

65
00:03:26,799 --> 00:03:29,440
this is stronger than finite term

66
00:03:29,440 --> 00:03:30,959
security

67
00:03:30,959 --> 00:03:34,080
in this security game the adversary also

68
00:03:34,080 --> 00:03:36,640
tries to generate possibly entangled

69
00:03:36,640 --> 00:03:39,839
bipartite states

70
00:03:42,159 --> 00:03:44,959
then the adversary tries to use both

71
00:03:44,959 --> 00:03:47,680
sides to run the least software on the

72
00:03:47,680 --> 00:03:50,799
legitimate platform

73
00:03:52,159 --> 00:03:55,120
in finite time security guarantees the

74
00:03:55,120 --> 00:03:58,080
adversary cannot use either of the two

75
00:03:58,080 --> 00:04:02,720
states to run the leased software

76
00:04:06,480 --> 00:04:08,720
announced under the plaque presented the

77
00:04:08,720 --> 00:04:11,280
notion of secure software racing and

78
00:04:11,280 --> 00:04:12,480
initially

79
00:04:12,480 --> 00:04:15,680
instantiate it for subclass of invasive

80
00:04:15,680 --> 00:04:18,320
functions by using public key content

81
00:04:18,320 --> 00:04:20,399
money and the

82
00:04:20,399 --> 00:04:22,560
lwe assumption against quantum

83
00:04:22,560 --> 00:04:24,400
advisories

84
00:04:24,400 --> 00:04:26,720
their scheme achieved in finance term

85
00:04:26,720 --> 00:04:28,960
security

86
00:04:28,960 --> 00:04:31,440
some concurrent and independent works

87
00:04:31,440 --> 00:04:33,840
improved the assumptions

88
00:04:33,840 --> 00:04:36,720
but the function the function class is

89
00:04:36,720 --> 00:04:41,280
limited to subclass of evasive functions

90
00:04:41,280 --> 00:04:43,440
aaron's on at all achieve secure

91
00:04:43,440 --> 00:04:45,840
software listing for broader function

92
00:04:45,840 --> 00:04:47,120
classes

93
00:04:47,120 --> 00:04:49,759
but they still need public key content

94
00:04:49,759 --> 00:04:52,000
money

95
00:04:52,000 --> 00:04:54,479
ours is the first secure software

96
00:04:54,479 --> 00:04:56,880
listing for broader function classes

97
00:04:56,880 --> 00:05:00,320
from standard assumptions

98
00:05:00,320 --> 00:05:03,600
in our paper we give constructions for

99
00:05:03,600 --> 00:05:06,080
pseudorandom functions and subclass of

100
00:05:06,080 --> 00:05:07,840
evasion functions

101
00:05:07,840 --> 00:05:10,639
but our construction can support public

102
00:05:10,639 --> 00:05:12,800
key encryption and signature by

103
00:05:12,800 --> 00:05:15,120
combining the technique by alonson

104
00:05:15,120 --> 00:05:17,600
ethanol

105
00:05:18,000 --> 00:05:20,400
our construction is based on the clean

106
00:05:20,400 --> 00:05:24,720
framework using software watermarking

107
00:05:24,720 --> 00:05:27,440
we can instantiate the watermarking part

108
00:05:27,440 --> 00:05:31,520
with standard standard assumptions

109
00:05:31,840 --> 00:05:34,080
around some ether concurrently and

110
00:05:34,080 --> 00:05:36,560
independently presented a similar

111
00:05:36,560 --> 00:05:40,400
technique based on watermarking

112
00:05:40,479 --> 00:05:43,280
we note that some works achieve security

113
00:05:43,280 --> 00:05:46,320
where pirate software is not forced to

114
00:05:46,320 --> 00:05:51,120
run by honest evaluation allergens

115
00:05:51,600 --> 00:05:54,400
lastly our construction can be achieved

116
00:05:54,400 --> 00:05:57,680
only with classical communication

117
00:05:57,680 --> 00:06:00,240
that is we do not need to send quantum

118
00:06:00,240 --> 00:06:02,639
states

119
00:06:05,199 --> 00:06:08,240
i explained the high-level idea for how

120
00:06:08,240 --> 00:06:12,319
to achieve secure software listing

121
00:06:14,080 --> 00:06:16,560
the scheme by annan sandler applica is

122
00:06:16,560 --> 00:06:18,639
as follows

123
00:06:18,639 --> 00:06:20,960
software is modeled as a classical

124
00:06:20,960 --> 00:06:23,440
circuit

125
00:06:23,759 --> 00:06:26,720
we somehow generate a protective circuit

126
00:06:26,720 --> 00:06:29,680
in the classical way and connect it to a

127
00:06:29,680 --> 00:06:32,400
quantum state

128
00:06:33,680 --> 00:06:36,560
when we return the list software to the

129
00:06:36,560 --> 00:06:39,039
lesser the lesser checks the quantum

130
00:06:39,039 --> 00:06:41,600
state part is valid

131
00:06:41,600 --> 00:06:44,080
then the lesser also checks the

132
00:06:44,080 --> 00:06:46,720
protected circuit part is correctly

133
00:06:46,720 --> 00:06:51,199
connected to the quantum state part

134
00:06:51,759 --> 00:06:54,639
if both are valid the returned software

135
00:06:54,639 --> 00:06:57,199
is bind

136
00:06:58,000 --> 00:07:00,240
when we learn the least software on a

137
00:07:00,240 --> 00:07:03,199
legitimate platform the platform does

138
00:07:03,199 --> 00:07:06,319
the same check as the lesson

139
00:07:06,319 --> 00:07:08,880
it checks both the content part and the

140
00:07:08,880 --> 00:07:11,599
connected part

141
00:07:11,599 --> 00:07:16,120
what is the quantum part

142
00:07:16,240 --> 00:07:19,759
we use a publicly verifiable unclonable

143
00:07:19,759 --> 00:07:23,440
state for for the quantum part

144
00:07:23,440 --> 00:07:26,720
this is also known as public key condom

145
00:07:26,720 --> 00:07:28,800
money

146
00:07:28,800 --> 00:07:31,919
in public key content money a central

147
00:07:31,919 --> 00:07:34,720
bank has a secret key and publishes a

148
00:07:34,720 --> 00:07:37,440
public key

149
00:07:38,880 --> 00:07:41,039
the bank generates a quantum money by

150
00:07:41,039 --> 00:07:45,080
using the secret key

151
00:07:45,360 --> 00:07:48,160
we can verify a content money is valid

152
00:07:48,160 --> 00:07:50,879
and gets its serial number by using the

153
00:07:50,879 --> 00:07:53,599
public key

154
00:07:54,400 --> 00:07:56,960
the adversary gets the content money and

155
00:07:56,960 --> 00:08:01,120
tries to make a copy of it

156
00:08:03,280 --> 00:08:06,160
the security of content money guarantees

157
00:08:06,160 --> 00:08:08,720
the potentially entangled two quantum

158
00:08:08,720 --> 00:08:10,960
states are not valid with the same

159
00:08:10,960 --> 00:08:15,440
serial number under the public key

160
00:08:18,080 --> 00:08:20,479
uncommon ability of public key content

161
00:08:20,479 --> 00:08:23,599
money and circuit production part imply

162
00:08:23,599 --> 00:08:26,639
finite term security

163
00:08:26,639 --> 00:08:28,879
the scheme by announce and laplace

164
00:08:28,879 --> 00:08:32,320
achieves infinite term security but ours

165
00:08:32,320 --> 00:08:34,880
achieve finite time security

166
00:08:34,880 --> 00:08:37,919
so we focus on finite term security in

167
00:08:37,919 --> 00:08:40,399
this talk

168
00:08:40,399 --> 00:08:43,279
the third projection part consists of

169
00:08:43,279 --> 00:08:46,880
input hiding obviously and simulation

170
00:08:46,880 --> 00:08:48,959
extractable music

171
00:08:48,959 --> 00:08:53,439
but the data is not important here

172
00:08:53,760 --> 00:08:57,040
the adversary generates two states

173
00:08:57,040 --> 00:08:59,920
one is for software check and the other

174
00:08:59,920 --> 00:09:02,720
is for learning software

175
00:09:02,720 --> 00:09:04,720
suppose each software passes the

176
00:09:04,720 --> 00:09:07,720
verification

177
00:09:09,200 --> 00:09:11,600
first we consider the case where the

178
00:09:11,600 --> 00:09:14,399
public keys for the quantum money part

179
00:09:14,399 --> 00:09:17,920
are the same in two states

180
00:09:18,000 --> 00:09:20,880
if the returned software is buying and

181
00:09:20,880 --> 00:09:23,279
we can run the other software on the

182
00:09:23,279 --> 00:09:25,360
legitimate platform

183
00:09:25,360 --> 00:09:28,000
then the adversary must break the the

184
00:09:28,000 --> 00:09:29,600
unproven ability

185
00:09:29,600 --> 00:09:31,920
since both content money states are

186
00:09:31,920 --> 00:09:34,319
buried

187
00:09:35,200 --> 00:09:38,000
second we consider the case where the

188
00:09:38,000 --> 00:09:40,320
public keys for the quantum money part

189
00:09:40,320 --> 00:09:43,440
are different in two states

190
00:09:43,440 --> 00:09:46,720
then the anniversary breaks the circuit

191
00:09:46,720 --> 00:09:49,040
protection part

192
00:09:49,040 --> 00:09:51,040
the detail of the searched protection

193
00:09:51,040 --> 00:09:53,360
part is not important to understand our

194
00:09:53,360 --> 00:09:56,000
construction

195
00:09:58,240 --> 00:10:01,040
the crucial observation here is the

196
00:10:01,040 --> 00:10:03,839
lesser can use their secret key for

197
00:10:03,839 --> 00:10:06,800
checking a return software while we need

198
00:10:06,800 --> 00:10:09,440
a public key to learn the least software

199
00:10:09,440 --> 00:10:12,880
on the regiment platform

200
00:10:14,880 --> 00:10:17,680
we found that we do not need the full

201
00:10:17,680 --> 00:10:20,320
power of public key quantum money for

202
00:10:20,320 --> 00:10:23,600
finite time security

203
00:10:25,519 --> 00:10:28,640
a crucial tool for our construction is

204
00:10:28,640 --> 00:10:31,279
two tire quantum lightning which we

205
00:10:31,279 --> 00:10:34,800
introduced in this work

206
00:10:36,160 --> 00:10:38,720
first we rebuild the notion of quantum

207
00:10:38,720 --> 00:10:41,279
lighting

208
00:10:41,440 --> 00:10:43,839
an authority generates a public key

209
00:10:43,839 --> 00:10:47,640
called bolt generator

210
00:10:48,240 --> 00:10:50,399
anyone who has the public key can

211
00:10:50,399 --> 00:10:54,880
generate a quantum state called the volt

212
00:10:56,320 --> 00:10:58,959
we can verify a quantum state is a

213
00:10:58,959 --> 00:11:01,600
varied board for a serial number by

214
00:11:01,600 --> 00:11:04,800
using the public key

215
00:11:06,959 --> 00:11:09,680
the adversary tries to make a copy of

216
00:11:09,680 --> 00:11:10,959
the bolt

217
00:11:10,959 --> 00:11:12,880
that is the other battery generator

218
00:11:12,880 --> 00:11:15,040
potentially entangle the two quantum

219
00:11:15,040 --> 00:11:17,519
states

220
00:11:20,480 --> 00:11:22,399
the uncomfortability of quantum

221
00:11:22,399 --> 00:11:25,120
lightning guarantees one of the two

222
00:11:25,120 --> 00:11:27,360
quantum states with the same serial

223
00:11:27,360 --> 00:11:30,800
number is inburied

224
00:11:32,160 --> 00:11:34,160
quantum lightening is a stronger

225
00:11:34,160 --> 00:11:37,279
primitive than public key content money

226
00:11:37,279 --> 00:11:39,920
there is no probably secure construction

227
00:11:39,920 --> 00:11:43,160
so far

228
00:11:44,720 --> 00:11:47,600
we introduced two tyre quantum lightning

229
00:11:47,600 --> 00:11:50,079
which is a relaxation of quantum

230
00:11:50,079 --> 00:11:52,639
lighting

231
00:11:52,639 --> 00:11:56,240
in cont into the quantum lightning and

232
00:11:56,240 --> 00:11:58,639
authority generate the public key and

233
00:11:58,639 --> 00:12:01,519
the secret key

234
00:12:02,240 --> 00:12:04,160
anyone who has the public key can

235
00:12:04,160 --> 00:12:09,000
generate a board as quantum lightning

236
00:12:10,560 --> 00:12:13,279
there are two types of verification in

237
00:12:13,279 --> 00:12:16,240
two-tier quantum lighting

238
00:12:16,240 --> 00:12:19,200
one is full verification which needs the

239
00:12:19,200 --> 00:12:21,920
secret key

240
00:12:22,480 --> 00:12:25,360
the other one is semi-verification which

241
00:12:25,360 --> 00:12:28,240
needs the public key

242
00:12:28,240 --> 00:12:32,800
so anyone can execute same verification

243
00:12:32,800 --> 00:12:36,320
however only the authority can execute

244
00:12:36,320 --> 00:12:39,560
full verification

245
00:12:42,160 --> 00:12:44,399
in the security game the adversary

246
00:12:44,399 --> 00:12:46,639
generates potentially entangled two

247
00:12:46,639 --> 00:12:51,320
quantum states as quantum lighting

248
00:12:52,560 --> 00:12:56,480
in two tired unclonability game

249
00:12:56,480 --> 00:12:59,040
one quantum state is checked by full

250
00:12:59,040 --> 00:13:03,040
verification using the secret key

251
00:13:03,040 --> 00:13:05,519
the other quantum state is checked by

252
00:13:05,519 --> 00:13:10,160
semi verification using the public key

253
00:13:10,160 --> 00:13:13,200
two-tier uncountability guarantees one

254
00:13:13,200 --> 00:13:15,519
of the two states with the same serial

255
00:13:15,519 --> 00:13:19,240
number is invalid

256
00:13:23,040 --> 00:13:26,000
to tire quantum lighting perfectly fits

257
00:13:26,000 --> 00:13:28,639
for finite time secure software

258
00:13:28,639 --> 00:13:31,120
releasing

259
00:13:31,200 --> 00:13:33,839
the laser can check a return software by

260
00:13:33,839 --> 00:13:35,839
using a full verification with the

261
00:13:35,839 --> 00:13:38,560
secret key

262
00:13:38,800 --> 00:13:41,279
although the lsd does not have the

263
00:13:41,279 --> 00:13:44,000
secret key they can check the list

264
00:13:44,000 --> 00:13:46,399
software by using the same verification

265
00:13:46,399 --> 00:13:49,839
with the public key

266
00:13:52,800 --> 00:13:56,639
now let's see our construction

267
00:13:57,519 --> 00:14:00,399
as we see we can use two tire quantum

268
00:14:00,399 --> 00:14:02,959
lightning instead of public key content

269
00:14:02,959 --> 00:14:05,440
money for the uncomfortable state part

270
00:14:05,440 --> 00:14:08,720
in secure software racing

271
00:14:08,720 --> 00:14:11,519
in addition we can achieve two tire

272
00:14:11,519 --> 00:14:14,560
quantum lightning from the sys or lw

273
00:14:14,560 --> 00:14:18,399
assumption against quantum adversaries

274
00:14:18,399 --> 00:14:20,560
we will see a concept concrete

275
00:14:20,560 --> 00:14:23,040
construction later

276
00:14:23,040 --> 00:14:26,079
it is easy to see we can not use two

277
00:14:26,079 --> 00:14:28,240
tyre quantum lighting to achieve

278
00:14:28,240 --> 00:14:31,360
infinite time security since the lassie

279
00:14:31,360 --> 00:14:35,360
should not have the secret key

280
00:14:36,160 --> 00:14:38,720
in the blueprint we need a circuit

281
00:14:38,720 --> 00:14:40,639
protection part

282
00:14:40,639 --> 00:14:43,199
we use software watermarking for this

283
00:14:43,199 --> 00:14:45,839
part

284
00:14:46,880 --> 00:14:49,440
let's briefly review what is software

285
00:14:49,440 --> 00:14:52,160
watermarking

286
00:14:52,160 --> 00:14:54,720
software watermarking can embed an

287
00:14:54,720 --> 00:14:59,320
arbitrary message into software

288
00:15:01,040 --> 00:15:03,600
watermark software is functionally

289
00:15:03,600 --> 00:15:07,920
equivalent to the original software

290
00:15:09,360 --> 00:15:12,320
we can extract the embedded message from

291
00:15:12,320 --> 00:15:14,560
the marked software by using an

292
00:15:14,560 --> 00:15:17,518
extraction key

293
00:15:18,399 --> 00:15:20,959
the security of software water marking

294
00:15:20,959 --> 00:15:23,680
is unremovability

295
00:15:23,680 --> 00:15:26,480
the adversary receives a marked software

296
00:15:26,480 --> 00:15:29,120
and tries to remove the embedded mark

297
00:15:29,120 --> 00:15:31,519
from it

298
00:15:33,519 --> 00:15:36,240
only movability guarantees if the

299
00:15:36,240 --> 00:15:38,560
software output by the adversary

300
00:15:38,560 --> 00:15:40,880
preserves the functionality of the

301
00:15:40,880 --> 00:15:42,639
original software

302
00:15:42,639 --> 00:15:44,079
then

303
00:15:44,079 --> 00:15:46,079
we can extract

304
00:15:46,079 --> 00:15:48,240
the message embedded in the marked

305
00:15:48,240 --> 00:15:50,639
software from the software output by the

306
00:15:50,639 --> 00:15:53,880
other battery

307
00:15:58,000 --> 00:16:00,480
we can construct secure software listing

308
00:16:00,480 --> 00:16:03,360
by combining software water marking with

309
00:16:03,360 --> 00:16:06,880
two tyre quantum lighting

310
00:16:07,040 --> 00:16:09,600
alessa generates a bolt and serial

311
00:16:09,600 --> 00:16:12,720
number and embeds the serial number and

312
00:16:12,720 --> 00:16:15,040
the public key of two tire quantum

313
00:16:15,040 --> 00:16:19,199
lightning into software by watermarking

314
00:16:19,199 --> 00:16:21,440
so the software is connected to the

315
00:16:21,440 --> 00:16:23,839
board

316
00:16:25,360 --> 00:16:27,759
when a software is returned

317
00:16:27,759 --> 00:16:30,320
the lesser extracts the embedded public

318
00:16:30,320 --> 00:16:33,120
key and serial number and checks the

319
00:16:33,120 --> 00:16:35,759
quantum state part by full verification

320
00:16:35,759 --> 00:16:38,880
with the secret key

321
00:16:41,199 --> 00:16:43,120
when unless they learn

322
00:16:43,120 --> 00:16:46,079
software they extract the embedded

323
00:16:46,079 --> 00:16:49,279
public key and serial number and checks

324
00:16:49,279 --> 00:16:51,120
the quantum state part by same

325
00:16:51,120 --> 00:16:54,959
verification with the public key

326
00:16:57,279 --> 00:17:00,480
precisely speaking we need mac to

327
00:17:00,480 --> 00:17:02,800
formally prove the security of our

328
00:17:02,800 --> 00:17:05,520
construction but i omit it for

329
00:17:05,520 --> 00:17:08,000
simplicity in this talk

330
00:17:08,000 --> 00:17:12,079
please see the paper for the detail

331
00:17:14,640 --> 00:17:17,599
we can prove the finite term security of

332
00:17:17,599 --> 00:17:20,160
our construction by using two carrier

333
00:17:20,160 --> 00:17:24,679
unclean ability and unlimitability

334
00:17:25,679 --> 00:17:29,360
the adversary generates two states

335
00:17:29,360 --> 00:17:31,840
one is checked by the lesser and the

336
00:17:31,840 --> 00:17:35,280
other one is not learn on the legitimate

337
00:17:35,280 --> 00:17:37,360
platform

338
00:17:37,360 --> 00:17:40,080
suppose the first one is valid under

339
00:17:40,080 --> 00:17:42,799
full verification and the second one is

340
00:17:42,799 --> 00:17:47,000
valid and the same verification

341
00:17:48,160 --> 00:17:52,480
at the blueprint we consider two cases

342
00:17:52,480 --> 00:17:53,600
first

343
00:17:53,600 --> 00:17:54,400
if

344
00:17:54,400 --> 00:17:56,960
the extracted public keys are the same

345
00:17:56,960 --> 00:17:58,480
in two states

346
00:17:58,480 --> 00:18:00,799
the adversary breaks two tire uncle

347
00:18:00,799 --> 00:18:03,360
nobility

348
00:18:05,039 --> 00:18:08,320
second if the accepted public keys are

349
00:18:08,320 --> 00:18:09,600
different

350
00:18:09,600 --> 00:18:11,280
in two states

351
00:18:11,280 --> 00:18:14,000
the adversary breaks only unlimitability

352
00:18:14,000 --> 00:18:16,640
of water marking since valid software

353
00:18:16,640 --> 00:18:18,160
must preserve

354
00:18:18,160 --> 00:18:20,720
the functionality of the original

355
00:18:20,720 --> 00:18:23,280
software

356
00:18:23,760 --> 00:18:26,080
note that this argument is

357
00:18:26,080 --> 00:18:29,039
oversimplified since we omit the mac

358
00:18:29,039 --> 00:18:32,720
part from this intuition

359
00:18:35,360 --> 00:18:38,480
i explained how to instantiate two tyre

360
00:18:38,480 --> 00:18:40,960
quantum lightning and watermarking from

361
00:18:40,960 --> 00:18:44,160
standard assumptions

362
00:18:46,080 --> 00:18:49,200
first anyone should be able to extract

363
00:18:49,200 --> 00:18:52,160
an embedded message from mac software

364
00:18:52,160 --> 00:18:54,960
since we need to extract it when we

365
00:18:54,960 --> 00:18:57,360
learn software

366
00:18:57,360 --> 00:19:00,320
that is we need publicly extractable

367
00:19:00,320 --> 00:19:02,799
watermarking

368
00:19:02,799 --> 00:19:05,120
there are publicly extractable water

369
00:19:05,120 --> 00:19:07,679
marking signature and public encryption

370
00:19:07,679 --> 00:19:10,720
based on standard assumptions but we

371
00:19:10,720 --> 00:19:14,080
need io for publicly extractable water

372
00:19:14,080 --> 00:19:17,199
marking prf

373
00:19:19,120 --> 00:19:22,320
in fact we do not need standard water

374
00:19:22,320 --> 00:19:25,520
marking and can use relaxed version of

375
00:19:25,520 --> 00:19:28,640
watermarking since pirate software is

376
00:19:28,640 --> 00:19:31,039
required to learn by an honest

377
00:19:31,039 --> 00:19:33,600
evaluation algorithm in secure software

378
00:19:33,600 --> 00:19:36,000
racing

379
00:19:36,480 --> 00:19:39,120
in relaxed water marking

380
00:19:39,120 --> 00:19:41,600
an extraction algorithm can check

381
00:19:41,600 --> 00:19:44,240
whether a circuit falls a regiment

382
00:19:44,240 --> 00:19:47,280
format or not

383
00:19:47,360 --> 00:19:49,919
so the relaxed water marking is much

384
00:19:49,919 --> 00:19:52,640
easier to achieve than standard

385
00:19:52,640 --> 00:19:55,440
watermarking

386
00:19:55,760 --> 00:19:58,559
we instantiate such a format check part

387
00:19:58,559 --> 00:20:01,440
with music

388
00:20:01,600 --> 00:20:04,240
we can achieve publicly extractable

389
00:20:04,240 --> 00:20:08,320
relaxed watermarking prs from the qlw

390
00:20:08,320 --> 00:20:10,400
assumption

391
00:20:10,400 --> 00:20:14,480
please see the paper for the detail

392
00:20:16,799 --> 00:20:19,039
to instantiate two tyre quantum

393
00:20:19,039 --> 00:20:22,559
lightning we use noisy trapdoor 123

394
00:20:22,559 --> 00:20:26,000
computation by blocker schedule

395
00:20:26,000 --> 00:20:28,559
there are two permutations over any bit

396
00:20:28,559 --> 00:20:30,480
string

397
00:20:30,480 --> 00:20:33,840
it is hard to find a pair of inputs such

398
00:20:33,840 --> 00:20:36,880
that the outputs of the two permutations

399
00:20:36,880 --> 00:20:38,960
collide

400
00:20:38,960 --> 00:20:43,120
such a pair is called claw

401
00:20:43,200 --> 00:20:44,320
however

402
00:20:44,320 --> 00:20:47,600
if we have a secret dropdown it is easy

403
00:20:47,600 --> 00:20:50,719
to find a claw

404
00:20:52,320 --> 00:20:56,240
a bolt generator is permutation f

405
00:20:56,240 --> 00:20:58,880
to generate a bolt we construct a

406
00:20:58,880 --> 00:21:02,600
uniform superposition

407
00:21:02,720 --> 00:21:03,840
then

408
00:21:03,840 --> 00:21:07,280
we apply permutation f to the registers

409
00:21:07,280 --> 00:21:09,919
and write the result into the third

410
00:21:09,919 --> 00:21:12,480
register

411
00:21:14,080 --> 00:21:17,440
lastly we measure the third register and

412
00:21:17,440 --> 00:21:20,320
obtain an image y

413
00:21:20,320 --> 00:21:24,080
this y is the serial number

414
00:21:24,080 --> 00:21:27,200
a volt is the collapsed state after the

415
00:21:27,200 --> 00:21:29,360
measurement

416
00:21:29,360 --> 00:21:32,799
so the state is a uniform superposition

417
00:21:32,799 --> 00:21:35,600
of the claw

418
00:21:37,360 --> 00:21:39,840
the full verification algorithm inverts

419
00:21:39,840 --> 00:21:42,400
y by using the secret trapdoor and gets

420
00:21:42,400 --> 00:21:45,200
the claw

421
00:21:45,200 --> 00:21:47,679
by using the claw we can verify a

422
00:21:47,679 --> 00:21:50,240
quantum state is a uniform superposition

423
00:21:50,240 --> 00:21:52,880
of the claw

424
00:21:54,320 --> 00:21:56,559
the same verification algorithm uses

425
00:21:56,559 --> 00:22:00,158
only the foundation f

426
00:22:01,760 --> 00:22:04,320
it applies f to a quantum state and

427
00:22:04,320 --> 00:22:07,200
checks whether the image is equal to y

428
00:22:07,200 --> 00:22:11,960
or not in the superposition way

429
00:22:12,880 --> 00:22:15,679
suppose one bolt with serial number y

430
00:22:15,679 --> 00:22:18,000
passes the full verification

431
00:22:18,000 --> 00:22:20,559
and another volt with serial number y

432
00:22:20,559 --> 00:22:23,918
passes the same verification

433
00:22:24,000 --> 00:22:27,039
by measuring the first bolt we can get

434
00:22:27,039 --> 00:22:30,799
x0 or x1 with probability half since the

435
00:22:30,799 --> 00:22:33,520
board must be a uniform superposition of

436
00:22:33,520 --> 00:22:36,000
the claw

437
00:22:38,080 --> 00:22:40,640
on the other hand we can get

438
00:22:40,640 --> 00:22:44,080
either x0 or x1 with some biased

439
00:22:44,080 --> 00:22:46,960
probability from the second board since

440
00:22:46,960 --> 00:22:50,480
its image is equal to

441
00:22:52,840 --> 00:22:57,520
one that is we can get both x0 and x1

442
00:22:57,520 --> 00:23:00,000
with probability half from these two

443
00:23:00,000 --> 00:23:01,760
bolts

444
00:23:01,760 --> 00:23:04,720
so to tie a unclonability hold due to

445
00:23:04,720 --> 00:23:07,120
the security of trapped claw-free

446
00:23:07,120 --> 00:23:09,840
permutations

447
00:23:11,280 --> 00:23:14,000
we can also consult two tire quantum

448
00:23:14,000 --> 00:23:16,880
lightning from the qsys assumption but

449
00:23:16,880 --> 00:23:21,159
we omit it in this talk

450
00:23:23,200 --> 00:23:25,440
we can extend the two-tier quantum

451
00:23:25,440 --> 00:23:27,840
lightning construction to one with

452
00:23:27,840 --> 00:23:30,159
classical communication by using the

453
00:23:30,159 --> 00:23:34,000
idea of world 2 certificate by lady and

454
00:23:34,000 --> 00:23:37,000
saturday

455
00:23:37,200 --> 00:23:40,480
we can generate a classical certificate

456
00:23:40,480 --> 00:23:44,559
that guarantees a boat was collapsed

457
00:23:44,559 --> 00:23:47,039
we use a start

458
00:23:47,039 --> 00:23:49,760
we use the certificate verification

459
00:23:49,760 --> 00:23:52,640
algorithm instead of a full verification

460
00:23:52,640 --> 00:23:54,720
algorithm

461
00:23:54,720 --> 00:23:56,880
by using the classical certificate

462
00:23:56,880 --> 00:24:00,400
instead of bold we use only classical

463
00:24:00,400 --> 00:24:03,400
communication

464
00:24:05,120 --> 00:24:07,279
we can instantiate the both two

465
00:24:07,279 --> 00:24:09,440
certificate mechanism by using the

466
00:24:09,440 --> 00:24:12,400
technique by brokerski at all and lolian

467
00:24:12,400 --> 00:24:15,200
and status

468
00:24:17,200 --> 00:24:20,480
we apply adamad operator to a board and

469
00:24:20,480 --> 00:24:25,200
obtain a superposition state like this

470
00:24:26,320 --> 00:24:28,720
we measure the registers and use the

471
00:24:28,720 --> 00:24:33,400
results as a classical certificate

472
00:24:36,000 --> 00:24:38,559
we can verify the certificate by using

473
00:24:38,559 --> 00:24:41,039
three images extracted from the serial

474
00:24:41,039 --> 00:24:43,679
number y

475
00:24:43,679 --> 00:24:45,760
tutorial quantum

476
00:24:45,760 --> 00:24:48,480
tutorial unclean ability immediately

477
00:24:48,480 --> 00:24:51,039
follows from the adaptive hardcore beat

478
00:24:51,039 --> 00:24:54,960
property of tropical free permutations

479
00:24:54,960 --> 00:24:59,559
please see the paper for the video

480
00:25:00,240 --> 00:25:02,640
it is easy to achieve secure software

481
00:25:02,640 --> 00:25:04,799
listing with classical communication

482
00:25:04,799 --> 00:25:07,360
from two-tier quantum lighting with

483
00:25:07,360 --> 00:25:10,639
cluster communication

484
00:25:12,240 --> 00:25:14,640
the lesser generates a public key of two

485
00:25:14,640 --> 00:25:17,279
tire condom lightning and sends it to

486
00:25:17,279 --> 00:25:19,840
the lassie

487
00:25:21,039 --> 00:25:23,679
the let's see generates a boat and its

488
00:25:23,679 --> 00:25:26,799
serial number and send the serial number

489
00:25:26,799 --> 00:25:30,080
to the lesson

490
00:25:34,159 --> 00:25:36,799
the list embed the public key and serial

491
00:25:36,799 --> 00:25:39,840
number to software by watermarking

492
00:25:39,840 --> 00:25:41,840
and send the marked software to the

493
00:25:41,840 --> 00:25:43,679
lesson

494
00:25:43,679 --> 00:25:47,440
the lc can run the software if the board

495
00:25:47,440 --> 00:25:50,400
does not collapse

496
00:25:52,080 --> 00:25:54,559
when the lesser returns the software

497
00:25:54,559 --> 00:25:57,360
they destroy the boat get the classical

498
00:25:57,360 --> 00:26:00,159
certificate and return the classical

499
00:26:00,159 --> 00:26:02,880
certificate to the lesser as an evidence

500
00:26:02,880 --> 00:26:05,919
they destroyed the board

501
00:26:05,919 --> 00:26:08,720
if the rest is destroyed the board they

502
00:26:08,720 --> 00:26:12,960
cannot run the software anymore

503
00:26:14,960 --> 00:26:18,559
let me summarize my talk

504
00:26:19,360 --> 00:26:22,320
we construct finite term secure software

505
00:26:22,320 --> 00:26:26,080
leasing schemes for prs and subclass of

506
00:26:26,080 --> 00:26:29,279
evasion functions from standard qlwa

507
00:26:29,279 --> 00:26:31,760
assumption

508
00:26:31,760 --> 00:26:32,640
we

509
00:26:32,640 --> 00:26:35,039
also achieved secure software listing

510
00:26:35,039 --> 00:26:38,080
with classical communication

511
00:26:38,080 --> 00:26:40,240
our technique is based on the clean

512
00:26:40,240 --> 00:26:43,039
framework by two tyre quantum lighting

513
00:26:43,039 --> 00:26:46,960
and first software watermarking

514
00:26:47,039 --> 00:26:50,840
that's it thank you for watching my

515
00:26:50,840 --> 00:26:54,000
talk you

