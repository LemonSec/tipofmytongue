1
00:00:00,480 --> 00:00:03,040
hello my name is ben and i would like to

2
00:00:03,040 --> 00:00:05,759
tell you about our paper distributed

3
00:00:05,759 --> 00:00:08,480
merkel's puzzles which introduces a new

4
00:00:08,480 --> 00:00:11,120
distributed key agreement protocol based

5
00:00:11,120 --> 00:00:13,360
on symmetric key primitives

6
00:00:13,360 --> 00:00:17,199
this disjoint work with the tiding

7
00:00:17,199 --> 00:00:19,039
we first described the

8
00:00:19,039 --> 00:00:21,840
classic miracles puzzles protocol

9
00:00:21,840 --> 00:00:23,600
in which two players

10
00:00:23,600 --> 00:00:26,400
tried to agree on a secret key over an

11
00:00:26,400 --> 00:00:29,359
insecure channel

12
00:00:29,679 --> 00:00:31,199
we consider

13
00:00:31,199 --> 00:00:32,479
a variant

14
00:00:32,479 --> 00:00:34,320
of this protocol based on a random

15
00:00:34,320 --> 00:00:36,800
oracle

16
00:00:37,120 --> 00:00:39,760
the protocol offers a quadratic gap in

17
00:00:39,760 --> 00:00:42,000
oracle queries between the honest

18
00:00:42,000 --> 00:00:44,480
players and the adversary which is

19
00:00:44,480 --> 00:00:48,239
trying to recover the secret key

20
00:00:48,399 --> 00:00:50,239
this quadratic app was shown to be

21
00:00:50,239 --> 00:00:55,399
optimal in a paper by barak and mahmoud

22
00:00:58,480 --> 00:01:01,680
given access to the random oracle h

23
00:01:01,680 --> 00:01:05,119
alice first selects a set of square root

24
00:01:05,119 --> 00:01:07,520
of n random inputs

25
00:01:07,520 --> 00:01:09,280
and computes

26
00:01:09,280 --> 00:01:13,280
the set's image and sends it to bob

27
00:01:13,280 --> 00:01:16,400
bob then selects a set of his own and

28
00:01:16,400 --> 00:01:19,360
computes its image

29
00:01:19,360 --> 00:01:21,520
by an argument similar to the birthday

30
00:01:21,520 --> 00:01:22,960
paradox

31
00:01:22,960 --> 00:01:26,560
the sets of alice and bob intersect thus

32
00:01:26,560 --> 00:01:31,040
meaning also the image sets intersect

33
00:01:31,040 --> 00:01:33,360
bob sends an image

34
00:01:33,360 --> 00:01:35,840
that in the intersection of the image

35
00:01:35,840 --> 00:01:36,960
sets

36
00:01:36,960 --> 00:01:40,199
to alice

37
00:01:40,320 --> 00:01:42,799
both player players know

38
00:01:42,799 --> 00:01:43,600
an

39
00:01:43,600 --> 00:01:46,560
a pre-image of this image

40
00:01:46,560 --> 00:01:49,439
and set it as the secret key

41
00:01:49,439 --> 00:01:51,920
with high probability this spray image

42
00:01:51,920 --> 00:01:55,840
is the same for alice and bob

43
00:01:57,280 --> 00:01:59,920
now an anniversary that wants to recover

44
00:01:59,920 --> 00:02:01,360
the

45
00:02:01,360 --> 00:02:04,479
secret key of alice and bob has to

46
00:02:04,479 --> 00:02:08,318
invert this image

47
00:02:08,318 --> 00:02:11,599
and to do so he must make omega of n

48
00:02:11,599 --> 00:02:15,200
queries to the random market

49
00:02:15,280 --> 00:02:17,520
in our paper we investigate a

50
00:02:17,520 --> 00:02:20,239
distributed key agreement model

51
00:02:20,239 --> 00:02:21,360
in which

52
00:02:21,360 --> 00:02:24,239
there are m honest players that form a

53
00:02:24,239 --> 00:02:26,800
fully connected network and there are no

54
00:02:26,800 --> 00:02:29,680
pre-existing secured links between the

55
00:02:29,680 --> 00:02:32,080
players

56
00:02:33,040 --> 00:02:35,599
the goal of such protocol is to allow

57
00:02:35,599 --> 00:02:37,840
all pairs of players to agree on a

58
00:02:37,840 --> 00:02:40,480
secret keys

59
00:02:40,720 --> 00:02:43,599
the goal of the adversary is to recover

60
00:02:43,599 --> 00:02:48,720
some key of an arbitrary pair of players

61
00:02:49,120 --> 00:02:51,920
our model also uses a random oracle

62
00:02:51,920 --> 00:02:56,400
which is accessible by all parties

63
00:02:56,400 --> 00:02:58,720
in terms of complexity for the players

64
00:02:58,720 --> 00:03:00,879
we consider the query and communication

65
00:03:00,879 --> 00:03:03,200
complexity and for the adversary we

66
00:03:03,200 --> 00:03:07,119
consider the query complexity only

67
00:03:08,000 --> 00:03:10,800
this model was not studied before

68
00:03:10,800 --> 00:03:13,440
and we think it was it is of interest

69
00:03:13,440 --> 00:03:16,239
because it is a natural generalization

70
00:03:16,239 --> 00:03:19,040
of the classic merkel's puzzles and it

71
00:03:19,040 --> 00:03:21,360
also may introduce used techniques

72
00:03:21,360 --> 00:03:22,319
useful

73
00:03:22,319 --> 00:03:25,280
in other models

74
00:03:25,280 --> 00:03:27,200
a naive implementation of such

75
00:03:27,200 --> 00:03:30,080
distributed protocol would be that all

76
00:03:30,080 --> 00:03:32,239
pairs of players perform the standard

77
00:03:32,239 --> 00:03:35,040
market's puzzles independently and agree

78
00:03:35,040 --> 00:03:38,720
between them on secret keys

79
00:03:38,959 --> 00:03:41,680
this protocol is wasteful because each

80
00:03:41,680 --> 00:03:44,720
player makes m times square root of n

81
00:03:44,720 --> 00:03:47,200
queries to the random organ where the

82
00:03:47,200 --> 00:03:49,840
adversary still needs only omega of n

83
00:03:49,840 --> 00:03:53,040
queries to recover a key

84
00:03:53,040 --> 00:03:55,840
we can improve upon the naive protocol

85
00:03:55,840 --> 00:03:58,879
by having each player create a constant

86
00:03:58,879 --> 00:04:01,200
number of secure links

87
00:04:01,200 --> 00:04:04,239
in a way that creates a connected graph

88
00:04:04,239 --> 00:04:06,879
we call such graph a connected secure

89
00:04:06,879 --> 00:04:08,720
graph

90
00:04:08,720 --> 00:04:10,080
now

91
00:04:10,080 --> 00:04:12,319
pair each pair of players that wants to

92
00:04:12,319 --> 00:04:15,280
share a secret key can do so by

93
00:04:15,280 --> 00:04:18,079
encrypting the key and sending it over a

94
00:04:18,079 --> 00:04:20,799
secure path

95
00:04:21,279 --> 00:04:23,040
in this example

96
00:04:23,040 --> 00:04:25,840
if player j wants to share a secret key

97
00:04:25,840 --> 00:04:28,560
with player i it can encrypt the key and

98
00:04:28,560 --> 00:04:31,360
send it to l which then encrypts it with

99
00:04:31,360 --> 00:04:32,880
its

100
00:04:32,880 --> 00:04:35,680
shared key with i and sends it to player

101
00:04:35,680 --> 00:04:38,680
i

102
00:04:43,040 --> 00:04:46,240
in this basic protocol each player

103
00:04:46,240 --> 00:04:47,199
makes

104
00:04:47,199 --> 00:04:48,720
square root of n

105
00:04:48,720 --> 00:04:51,199
queries to the random occurrence

106
00:04:51,199 --> 00:04:53,680
and an adversary that wants

107
00:04:53,680 --> 00:04:55,520
to recover a key

108
00:04:55,520 --> 00:04:58,560
still makes an omega of n queries to the

109
00:04:58,560 --> 00:05:00,720
random overkill

110
00:05:00,720 --> 00:05:01,600
by

111
00:05:01,600 --> 00:05:05,360
by using domain separation we can make

112
00:05:05,360 --> 00:05:07,680
recovering all the keys harder for the

113
00:05:07,680 --> 00:05:10,560
adversary

114
00:05:10,560 --> 00:05:12,479
the gap between the adversary and the

115
00:05:12,479 --> 00:05:13,919
honest players

116
00:05:13,919 --> 00:05:15,600
stays quadratic

117
00:05:15,600 --> 00:05:17,440
and the main question is

118
00:05:17,440 --> 00:05:20,960
is this gap optimal

119
00:05:21,039 --> 00:05:23,280
in our paper we introduce a new

120
00:05:23,280 --> 00:05:25,919
distributed key agreement protocol in

121
00:05:25,919 --> 00:05:28,160
which each player makes stick queries

122
00:05:28,160 --> 00:05:30,400
and communicates t bits

123
00:05:30,400 --> 00:05:32,639
while an adversary that wants to recover

124
00:05:32,639 --> 00:05:33,600
a key

125
00:05:33,600 --> 00:05:36,479
has to make omega of n times t squared

126
00:05:36,479 --> 00:05:39,840
queries to the random oracle

127
00:05:39,840 --> 00:05:42,720
this gives us a quality complexity gap

128
00:05:42,720 --> 00:05:45,440
of m times t between the honest players

129
00:05:45,440 --> 00:05:47,759
and the adversary

130
00:05:47,759 --> 00:05:49,840
throughout our paper and also in this

131
00:05:49,840 --> 00:05:52,240
presentation we're ignoring logarithmic

132
00:05:52,240 --> 00:05:54,720
factors

133
00:05:55,680 --> 00:05:57,120
now the following

134
00:05:57,120 --> 00:06:00,080
property of our protocol

135
00:06:00,080 --> 00:06:02,639
for a fixed security level the per

136
00:06:02,639 --> 00:06:05,600
player complexity is decreased as the

137
00:06:05,600 --> 00:06:08,800
number of players goes

138
00:06:09,199 --> 00:06:12,000
throughout our protocol we also assume

139
00:06:12,000 --> 00:06:13,680
that

140
00:06:13,680 --> 00:06:16,000
the number of players is upper bounded

141
00:06:16,000 --> 00:06:18,400
by t

142
00:06:19,680 --> 00:06:21,600
we also showed

143
00:06:21,600 --> 00:06:22,720
that

144
00:06:22,720 --> 00:06:25,360
the query complexity gap of

145
00:06:25,360 --> 00:06:29,039
m times t is optimal

146
00:06:29,759 --> 00:06:34,199
and no better gap can be achieved

147
00:06:35,280 --> 00:06:38,240
furthermore we show an extension to our

148
00:06:38,240 --> 00:06:41,039
protocol for the semi-honest model in

149
00:06:41,039 --> 00:06:43,600
which the adversary controls some of the

150
00:06:43,600 --> 00:06:45,120
players

151
00:06:45,120 --> 00:06:47,520
that participate in that participate in

152
00:06:47,520 --> 00:06:50,159
the protocol

153
00:06:52,319 --> 00:06:54,880
in our protocol instead of fixing secure

154
00:06:54,880 --> 00:06:57,919
links we create arbitrarily this allows

155
00:06:57,919 --> 00:06:58,800
us

156
00:06:58,800 --> 00:07:01,360
to exploit the birthday paradox in order

157
00:07:01,360 --> 00:07:03,520
to find in the sections in a larger

158
00:07:03,520 --> 00:07:05,440
domain

159
00:07:05,440 --> 00:07:06,800
each player

160
00:07:06,800 --> 00:07:08,080
makes

161
00:07:08,080 --> 00:07:09,360
t

162
00:07:09,360 --> 00:07:13,520
queries to the random oracle

163
00:07:14,160 --> 00:07:15,840
and setting the domain of the random

164
00:07:15,840 --> 00:07:17,120
oracle 2

165
00:07:17,120 --> 00:07:19,759
m times t squared creates a constant

166
00:07:19,759 --> 00:07:22,240
number of secure links per player with

167
00:07:22,240 --> 00:07:24,479
high probability

168
00:07:24,479 --> 00:07:27,759
this happens because the big queries of

169
00:07:27,759 --> 00:07:29,039
the player

170
00:07:29,039 --> 00:07:31,360
intersects intersect

171
00:07:31,360 --> 00:07:33,759
the m times t queries of the rest of the

172
00:07:33,759 --> 00:07:37,360
players with high probability

173
00:07:37,759 --> 00:07:40,720
also note that setting the domain size

174
00:07:40,720 --> 00:07:45,240
to m times t squared

175
00:07:45,440 --> 00:07:48,240
allows better security since

176
00:07:48,240 --> 00:07:50,639
it makes

177
00:07:50,639 --> 00:07:52,720
inverting an image of the random

178
00:07:52,720 --> 00:07:56,440
moroccan hardware

179
00:07:58,639 --> 00:08:00,400
the main challenge with the previous

180
00:08:00,400 --> 00:08:01,599
idea

181
00:08:01,599 --> 00:08:03,919
is to detect on intersections with

182
00:08:03,919 --> 00:08:06,319
minimal communication

183
00:08:06,319 --> 00:08:08,960
a trivial solution would be that each

184
00:08:08,960 --> 00:08:12,560
player broadcasts his set of images to

185
00:08:12,560 --> 00:08:14,960
all other players

186
00:08:14,960 --> 00:08:17,919
but this solution requires omega of m

187
00:08:17,919 --> 00:08:19,440
times t

188
00:08:19,440 --> 00:08:23,520
bits communicated per player

189
00:08:24,639 --> 00:08:27,280
another solution would be to set an

190
00:08:27,280 --> 00:08:28,960
intermediate player

191
00:08:28,960 --> 00:08:31,680
to which all players send their image

192
00:08:31,680 --> 00:08:34,000
sets and the intermediate player

193
00:08:34,000 --> 00:08:36,640
searches for matches between those image

194
00:08:36,640 --> 00:08:38,958
sets

195
00:08:38,958 --> 00:08:41,919
still the communication complexity

196
00:08:41,919 --> 00:08:45,200
of the intermediate player stays omega

197
00:08:45,200 --> 00:08:48,560
of m times t

198
00:08:49,200 --> 00:08:51,519
our solution is to distribute the role

199
00:08:51,519 --> 00:08:53,040
of the matchmaker

200
00:08:53,040 --> 00:08:55,839
in a way that the image age of x is sent

201
00:08:55,839 --> 00:08:59,920
to player h of x mod m

202
00:09:01,839 --> 00:09:03,600
we can think about this

203
00:09:03,600 --> 00:09:06,800
as assigning a range of images to each

204
00:09:06,800 --> 00:09:09,800
player

205
00:09:10,959 --> 00:09:13,120
now we describe the details of our

206
00:09:13,120 --> 00:09:14,480
protocol

207
00:09:14,480 --> 00:09:17,600
first each player queries the random

208
00:09:17,600 --> 00:09:21,040
oracle on t random inputs and sends

209
00:09:21,040 --> 00:09:24,480
images of the form h of x to player

210
00:09:24,480 --> 00:09:27,920
h of x mod m

211
00:09:27,920 --> 00:09:28,880
then

212
00:09:28,880 --> 00:09:30,160
each player

213
00:09:30,160 --> 00:09:32,640
detects matches in the received images

214
00:09:32,640 --> 00:09:35,040
and informs pairs of players that have a

215
00:09:35,040 --> 00:09:37,600
matching image

216
00:09:37,600 --> 00:09:40,000
in the following example

217
00:09:40,000 --> 00:09:42,800
players pi and pj

218
00:09:42,800 --> 00:09:47,360
send the image y to player pl where

219
00:09:47,360 --> 00:09:49,200
l is

220
00:09:49,200 --> 00:09:52,080
y mod m

221
00:09:53,040 --> 00:09:55,440
then player pl

222
00:09:55,440 --> 00:09:58,000
informs the players i and j that they

223
00:09:58,000 --> 00:10:03,080
have a matching image the image y

224
00:10:04,079 --> 00:10:05,200
and l

225
00:10:05,200 --> 00:10:07,680
also informs them of the player they

226
00:10:07,680 --> 00:10:10,479
have a match with

227
00:10:10,800 --> 00:10:14,399
now players pi and pj can agree on the

228
00:10:14,399 --> 00:10:18,240
pre-image of y

229
00:10:18,240 --> 00:10:21,360
note that this since

230
00:10:21,360 --> 00:10:24,240
all the images are uniform

231
00:10:24,240 --> 00:10:26,640
each player receives

232
00:10:26,640 --> 00:10:28,959
only order of t elements with high

233
00:10:28,959 --> 00:10:31,680
probability

234
00:10:31,680 --> 00:10:32,959
and there are

235
00:10:32,959 --> 00:10:36,000
only order of n matches

236
00:10:36,000 --> 00:10:37,839
communicated overall with the high

237
00:10:37,839 --> 00:10:40,480
probability

238
00:10:41,760 --> 00:10:43,360
the previous steps

239
00:10:43,360 --> 00:10:46,240
result in omega of m distributed secure

240
00:10:46,240 --> 00:10:48,880
links which with high probability form a

241
00:10:48,880 --> 00:10:51,519
connected graph

242
00:10:51,519 --> 00:10:54,560
now an adversary that wants to invert a

243
00:10:54,560 --> 00:10:56,240
specific image

244
00:10:56,240 --> 00:10:59,839
has to make omega of m times t squared

245
00:10:59,839 --> 00:11:03,440
queries to the random oracle

246
00:11:03,440 --> 00:11:05,360
this is an improvement over the basic

247
00:11:05,360 --> 00:11:06,480
protocol

248
00:11:06,480 --> 00:11:10,000
in which the adversary needs only

249
00:11:10,000 --> 00:11:12,240
t squared query queries to the random

250
00:11:12,240 --> 00:11:14,800
organ

251
00:11:14,800 --> 00:11:16,320
but still

252
00:11:16,320 --> 00:11:18,800
there is a problem

253
00:11:18,800 --> 00:11:21,040
the adversary can invert one of the

254
00:11:21,040 --> 00:11:22,720
secure links

255
00:11:22,720 --> 00:11:24,880
with high probability

256
00:11:24,880 --> 00:11:26,240
using only

257
00:11:26,240 --> 00:11:29,360
n over m queries

258
00:11:29,360 --> 00:11:32,079
meaning that the query complexity graph

259
00:11:32,079 --> 00:11:35,199
is still quadratic

260
00:11:35,760 --> 00:11:37,680
the question is

261
00:11:37,680 --> 00:11:40,399
how can we make inverting an arbitrary

262
00:11:40,399 --> 00:11:41,360
image

263
00:11:41,360 --> 00:11:45,760
as hard as invading a specific image

264
00:11:50,320 --> 00:11:52,639
we call the previous protocol the setup

265
00:11:52,639 --> 00:11:54,399
protocol

266
00:11:54,399 --> 00:11:56,880
and now we run the setup protocol l

267
00:11:56,880 --> 00:11:59,760
times independently using domain

268
00:11:59,760 --> 00:12:02,720
separation of the random oracle

269
00:12:02,720 --> 00:12:05,120
in order to obtain and secure link

270
00:12:05,120 --> 00:12:08,120
graphs

271
00:12:10,800 --> 00:12:12,959
now in order to distribute

272
00:12:12,959 --> 00:12:14,560
pairwise keys

273
00:12:14,560 --> 00:12:15,920
a player j

274
00:12:15,920 --> 00:12:18,160
that wants to communicate with the

275
00:12:18,160 --> 00:12:20,560
player i

276
00:12:20,560 --> 00:12:23,200
picks a key

277
00:12:23,200 --> 00:12:26,320
and computes an l out of l secret

278
00:12:26,320 --> 00:12:27,440
sharing

279
00:12:27,440 --> 00:12:30,160
of that key

280
00:12:31,680 --> 00:12:33,200
and then

281
00:12:33,200 --> 00:12:36,240
sends each share on a different on a

282
00:12:36,240 --> 00:12:40,560
secure path in on a different graph

283
00:12:40,560 --> 00:12:43,040
like so

284
00:12:46,399 --> 00:12:49,040
now an adversary that wants to recover

285
00:12:49,040 --> 00:12:51,839
the key has to invert a link

286
00:12:51,839 --> 00:12:52,800
in n

287
00:12:52,800 --> 00:12:56,719
in all of the l paths

288
00:12:59,920 --> 00:13:03,200
this method is similar to the multipath

289
00:13:03,200 --> 00:13:06,079
reinforcement protocol in introduced in

290
00:13:06,079 --> 00:13:10,239
a paper by chan periget's song

291
00:13:11,200 --> 00:13:12,399
finally

292
00:13:12,399 --> 00:13:14,720
as mentioned to the cover red key the

293
00:13:14,720 --> 00:13:16,800
adversary must recover

294
00:13:16,800 --> 00:13:21,839
a key on each of the l paths used

295
00:13:22,560 --> 00:13:24,720
the success probability of the adversary

296
00:13:24,720 --> 00:13:27,279
grows with the path's length

297
00:13:27,279 --> 00:13:29,440
but the cases exponentially in the

298
00:13:29,440 --> 00:13:34,440
number of times the setup protocol then

299
00:13:35,920 --> 00:13:37,200
fortunately

300
00:13:37,200 --> 00:13:39,199
each graph achieved by the setup

301
00:13:39,199 --> 00:13:40,880
protocol

302
00:13:40,880 --> 00:13:42,639
has order of

303
00:13:42,639 --> 00:13:47,399
log m diameter with high probability

304
00:13:50,160 --> 00:13:53,279
this property is similar to the

305
00:13:53,279 --> 00:13:54,560
gnp

306
00:13:54,560 --> 00:13:57,680
random graph model

307
00:13:57,680 --> 00:13:59,760
where each edge appears with the

308
00:13:59,760 --> 00:14:04,560
probability p but in our case the

309
00:14:04,560 --> 00:14:07,760
edges are dependent

310
00:14:09,839 --> 00:14:11,920
in the paper we prove this diameter

311
00:14:11,920 --> 00:14:12,880
bound

312
00:14:12,880 --> 00:14:15,360
by using properties of expanded graphs

313
00:14:15,360 --> 00:14:18,720
that exist in our graph

314
00:14:25,040 --> 00:14:28,880
setting l log n creates a small query

315
00:14:28,880 --> 00:14:30,720
and communication overhead for the

316
00:14:30,720 --> 00:14:31,680
players

317
00:14:31,680 --> 00:14:35,040
but the adversary now needs omega of m

318
00:14:35,040 --> 00:14:37,839
times t squared queries today

319
00:14:37,839 --> 00:14:40,639
and the moroccan in order to recover

320
00:14:40,639 --> 00:14:46,240
any key be the arbitrary or specific e

321
00:14:46,800 --> 00:14:49,440
now after the amplification we have

322
00:14:49,440 --> 00:14:52,480
achieved the m times t gap in quite

323
00:14:52,480 --> 00:14:55,920
complex complexity between the adversary

324
00:14:55,920 --> 00:14:59,719
and the honest parties

325
00:15:01,600 --> 00:15:04,399
a question arises can one design a

326
00:15:04,399 --> 00:15:06,880
distributed protocol which achieves a

327
00:15:06,880 --> 00:15:09,279
greater query complexity gap

328
00:15:09,279 --> 00:15:11,600
the answer is

329
00:15:11,600 --> 00:15:14,639
we show that the quick that the gap of m

330
00:15:14,639 --> 00:15:18,240
times t is optimal

331
00:15:20,240 --> 00:15:21,519
to do that

332
00:15:21,519 --> 00:15:22,800
for any

333
00:15:22,800 --> 00:15:25,600
key agreement protocol pi well every

334
00:15:25,600 --> 00:15:28,320
player makes at most thick queries

335
00:15:28,320 --> 00:15:30,480
we show an adversary

336
00:15:30,480 --> 00:15:32,079
that can recover

337
00:15:32,079 --> 00:15:34,000
a key grid in pi

338
00:15:34,000 --> 00:15:35,040
using

339
00:15:35,040 --> 00:15:38,480
order of m times t squared equals to the

340
00:15:38,480 --> 00:15:41,839
random origin

341
00:15:43,120 --> 00:15:45,440
we transform pi into a two-player

342
00:15:45,440 --> 00:15:48,399
protocol and then we use the adversary

343
00:15:48,399 --> 00:15:50,959
introduced in the paper by barack and

344
00:15:50,959 --> 00:15:53,959
mahmoud

345
00:15:55,120 --> 00:15:58,480
given a distributed protocol pi

346
00:15:58,480 --> 00:16:02,880
and the two-player protocol pi tag

347
00:16:03,360 --> 00:16:06,000
we have play one simulate one of the

348
00:16:06,000 --> 00:16:07,040
players

349
00:16:07,040 --> 00:16:09,680
from the distributed protocol

350
00:16:09,680 --> 00:16:11,360
we call him p1

351
00:16:11,360 --> 00:16:13,759
and player 2 simulates the rest of the

352
00:16:13,759 --> 00:16:16,800
players from pi

353
00:16:18,959 --> 00:16:21,759
the key between player 1 and player 2 is

354
00:16:21,759 --> 00:16:24,560
set to some key between p1 and the rest

355
00:16:24,560 --> 00:16:27,599
of the players in pi

356
00:16:29,680 --> 00:16:32,399
the 2 player protocol adversary can

357
00:16:32,399 --> 00:16:36,240
recover the key in pi tag using order of

358
00:16:36,240 --> 00:16:38,959
m times t squared queries to the random

359
00:16:38,959 --> 00:16:41,518
oracle

360
00:16:41,839 --> 00:16:44,800
the key between player 1 and player 2

361
00:16:44,800 --> 00:16:46,560
is one of the keys

362
00:16:46,560 --> 00:16:49,120
of p1 in pi

363
00:16:49,120 --> 00:16:52,720
thus there exists an adversary

364
00:16:52,720 --> 00:16:54,880
that recovers

365
00:16:54,880 --> 00:16:58,480
one key in any distributed protocol

366
00:16:58,480 --> 00:17:01,199
using order of n

367
00:17:01,199 --> 00:17:02,160
times

368
00:17:02,160 --> 00:17:07,039
t squared queries to the random organ

369
00:17:07,760 --> 00:17:09,439
thus meaning

370
00:17:09,439 --> 00:17:10,880
the

371
00:17:10,880 --> 00:17:12,319
gap of

372
00:17:12,319 --> 00:17:13,199
m

373
00:17:13,199 --> 00:17:15,839
times t in quite complexity between the

374
00:17:15,839 --> 00:17:17,280
adversary

375
00:17:17,280 --> 00:17:21,359
and the players is optimal

376
00:17:21,679 --> 00:17:24,160
now we consider an extension to our

377
00:17:24,160 --> 00:17:26,880
protocol for dealing with a semi-honest

378
00:17:26,880 --> 00:17:29,919
participant model

379
00:17:30,720 --> 00:17:32,640
in this model some faction of the

380
00:17:32,640 --> 00:17:35,679
players are controlled by an adversary

381
00:17:35,679 --> 00:17:37,760
those players execute the protocol

382
00:17:37,760 --> 00:17:39,919
honestly but they attempt to recover

383
00:17:39,919 --> 00:17:42,400
pairwise keys

384
00:17:42,400 --> 00:17:45,120
the main concern with such

385
00:17:45,120 --> 00:17:47,760
players that they have access to the key

386
00:17:47,760 --> 00:17:52,000
shares sent in the amplification phase

387
00:17:53,039 --> 00:17:55,440
in the following example

388
00:17:55,440 --> 00:17:56,799
we can see

389
00:17:56,799 --> 00:18:00,720
a key share sent on multiple paths

390
00:18:00,720 --> 00:18:02,640
where some of the paths

391
00:18:02,640 --> 00:18:07,039
include an adversary player in them

392
00:18:12,559 --> 00:18:14,400
key shares share

393
00:18:14,400 --> 00:18:16,559
sent in such paths

394
00:18:16,559 --> 00:18:20,000
are unknown to the adversary

395
00:18:20,000 --> 00:18:24,799
just like the kisha's r1 and r2

396
00:18:24,799 --> 00:18:28,120
in this example

397
00:18:28,720 --> 00:18:31,120
for the key for the sixth key to remain

398
00:18:31,120 --> 00:18:32,160
secret

399
00:18:32,160 --> 00:18:35,120
one of the past must

400
00:18:35,120 --> 00:18:37,840
stay clear of adversaries

401
00:18:37,840 --> 00:18:39,679
must be clear of adversaries like the

402
00:18:39,679 --> 00:18:41,600
path here

403
00:18:41,600 --> 00:18:45,520
of the last kisha

404
00:18:47,760 --> 00:18:50,480
our protocol can be easily extended to

405
00:18:50,480 --> 00:18:52,559
deal with the semi-honest participant

406
00:18:52,559 --> 00:18:53,520
model

407
00:18:53,520 --> 00:18:55,200
where a fraction of

408
00:18:55,200 --> 00:18:56,799
1 over log n

409
00:18:56,799 --> 00:19:00,240
of the players are semi-honest players

410
00:19:00,240 --> 00:19:03,360
semi-honest players

411
00:19:03,360 --> 00:19:04,160
this

412
00:19:04,160 --> 00:19:05,520
extension

413
00:19:05,520 --> 00:19:08,559
costs only a constant overhead

414
00:19:08,559 --> 00:19:13,440
in more setup protocol execution

415
00:19:13,600 --> 00:19:16,640
in brief we have described a distributed

416
00:19:16,640 --> 00:19:18,720
key agreement protocol in which

417
00:19:18,720 --> 00:19:21,200
participants make big queries to a

418
00:19:21,200 --> 00:19:24,320
random oracle and communicate order of t

419
00:19:24,320 --> 00:19:25,280
bits

420
00:19:25,280 --> 00:19:29,039
while an adversary must make omega of

421
00:19:29,039 --> 00:19:31,760
m times t squared equates to the random

422
00:19:31,760 --> 00:19:35,600
oracle in order to invert the key

423
00:19:35,760 --> 00:19:38,559
we have also shown that the well

424
00:19:38,559 --> 00:19:41,280
complexity gap bit of

425
00:19:41,280 --> 00:19:43,919
t times m between the

426
00:19:43,919 --> 00:19:46,240
honest players and the adversary is

427
00:19:46,240 --> 00:19:48,799
optimal

428
00:19:50,640 --> 00:19:52,880
there are several open problems that can

429
00:19:52,880 --> 00:19:55,679
be further investigated

430
00:19:55,679 --> 00:19:57,280
for example

431
00:19:57,280 --> 00:20:01,600
handling more adversarial player players

432
00:20:01,600 --> 00:20:04,480
or extending the security model for such

433
00:20:04,480 --> 00:20:07,280
model that the adversary's goal is to

434
00:20:07,280 --> 00:20:11,039
recover more than one key

435
00:20:12,159 --> 00:20:14,559
that's all thank you very much for your

436
00:20:14,559 --> 00:20:17,559
attention

