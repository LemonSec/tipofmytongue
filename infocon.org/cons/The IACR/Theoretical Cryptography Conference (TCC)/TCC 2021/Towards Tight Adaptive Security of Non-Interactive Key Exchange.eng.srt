1
00:00:00,399 --> 00:00:02,879
welcome to the presentation of a paper

2
00:00:02,879 --> 00:00:05,120
towards tight adaptive security of

3
00:00:05,120 --> 00:00:07,839
non-interactive key exchange my name is

4
00:00:07,839 --> 00:00:09,840
roman lanker and this is joint work with

5
00:00:09,840 --> 00:00:14,719
julia hesse dennis offense and lisa cole

6
00:00:14,799 --> 00:00:16,560
i will start my talk with an explanation

7
00:00:16,560 --> 00:00:18,720
of what non-interactive key exchange or

8
00:00:18,720 --> 00:00:20,400
for short nike is

9
00:00:20,400 --> 00:00:22,160
then i will talk about previous results

10
00:00:22,160 --> 00:00:24,240
on the tightness for nike and then i

11
00:00:24,240 --> 00:00:27,199
will go into more detail on of our work

12
00:00:27,199 --> 00:00:29,519
and present our first result which is a

13
00:00:29,519 --> 00:00:32,079
type nine key with large keys then our

14
00:00:32,079 --> 00:00:34,320
second result which is a lower bound

15
00:00:34,320 --> 00:00:36,559
that shows that these large keys seem to

16
00:00:36,559 --> 00:00:38,800
be necessary

17
00:00:38,800 --> 00:00:41,200
and finally our third result which is a

18
00:00:41,200 --> 00:00:45,520
tight semi-adaptively secure nike

19
00:00:45,520 --> 00:00:47,280
non-interactive key exchange or for

20
00:00:47,280 --> 00:00:48,640
short nike

21
00:00:48,640 --> 00:00:49,600
is

22
00:00:49,600 --> 00:00:51,760
cryptographic primitives that works as

23
00:00:51,760 --> 00:00:53,760
follows we have a key generation

24
00:00:53,760 --> 00:00:56,160
algorithm that every user can use to

25
00:00:56,160 --> 00:00:59,600
generate a public key secret key pairs

26
00:00:59,600 --> 00:01:02,559
then using a public key infrastructure

27
00:01:02,559 --> 00:01:04,799
the users can get authenticated copies

28
00:01:04,799 --> 00:01:07,920
of a public key of every other user

29
00:01:07,920 --> 00:01:10,320
and finally they can use a shared key

30
00:01:10,320 --> 00:01:13,119
algorithm to generate a shared key using

31
00:01:13,119 --> 00:01:15,759
their own secret key and the public key

32
00:01:15,759 --> 00:01:19,280
of someone somebody else

33
00:01:19,280 --> 00:01:21,680
and when alice and bob both do this

34
00:01:21,680 --> 00:01:25,960
they should get the same shared key

35
00:01:26,400 --> 00:01:27,759
now nike isn't very interesting

36
00:01:27,759 --> 00:01:29,759
primitives because it allows you to get

37
00:01:29,759 --> 00:01:31,600
symmetric keys with minimal

38
00:01:31,600 --> 00:01:34,079
communication

39
00:01:34,079 --> 00:01:35,600
and that is beneficial because that

40
00:01:35,600 --> 00:01:37,520
means it is fast

41
00:01:37,520 --> 00:01:39,920
and it also has very little energy usage

42
00:01:39,920 --> 00:01:41,680
which is important for battery powered

43
00:01:41,680 --> 00:01:44,159
devices

44
00:01:44,159 --> 00:01:46,000
it is also a building block for several

45
00:01:46,000 --> 00:01:48,159
other cryptocurrencies for example

46
00:01:48,159 --> 00:01:50,560
deniable authentication

47
00:01:50,560 --> 00:01:53,200
or together with a mac you can

48
00:01:53,200 --> 00:01:56,000
get interactive key exchange

49
00:01:56,000 --> 00:01:58,640
and designated verifier signatures quite

50
00:01:58,640 --> 00:02:01,040
easily

51
00:02:01,920 --> 00:02:03,759
now i will talk about the security

52
00:02:03,759 --> 00:02:06,000
notion that we i would consider in this

53
00:02:06,000 --> 00:02:09,199
talk that is an adversary has several

54
00:02:09,199 --> 00:02:11,840
oracles that he can query adaptively as

55
00:02:11,840 --> 00:02:13,760
often as he wants

56
00:02:13,760 --> 00:02:15,599
and the first oracle is to create new

57
00:02:15,599 --> 00:02:18,319
users and whenever he does this he gets

58
00:02:18,319 --> 00:02:20,959
their public key

59
00:02:20,959 --> 00:02:22,800
then he can corrupt these users that

60
00:02:22,800 --> 00:02:25,440
means he gets their secret key

61
00:02:25,440 --> 00:02:27,440
finally he can

62
00:02:27,440 --> 00:02:29,760
reveal share keys that is he selects to

63
00:02:29,760 --> 00:02:31,519
uses and gets the shared key between

64
00:02:31,519 --> 00:02:33,760
them

65
00:02:33,840 --> 00:02:35,680
and finally there's an oracle that he

66
00:02:35,680 --> 00:02:37,360
can query once

67
00:02:37,360 --> 00:02:38,600
where he gets the

68
00:02:38,600 --> 00:02:40,560
[Music]

69
00:02:40,560 --> 00:02:43,200
shared key between two users or a random

70
00:02:43,200 --> 00:02:44,400
value

71
00:02:44,400 --> 00:02:46,720
and this goal is to distinguish between

72
00:02:46,720 --> 00:02:48,560
these two variants

73
00:02:48,560 --> 00:02:50,800
of course uh

74
00:02:50,800 --> 00:02:52,720
the adversary must ensure that he has

75
00:02:52,720 --> 00:02:54,560
not revealed this shared key or

76
00:02:54,560 --> 00:02:56,319
corrupted any of these two challenge

77
00:02:56,319 --> 00:02:59,119
users before

78
00:02:59,760 --> 00:03:02,239
uh maybe more realistic security

79
00:03:02,239 --> 00:03:04,239
definition would be that the adversary

80
00:03:04,239 --> 00:03:06,319
can query this challenge oracle as often

81
00:03:06,319 --> 00:03:08,879
as you want

82
00:03:09,200 --> 00:03:10,000
and

83
00:03:10,000 --> 00:03:12,159
our work generalizes to this

84
00:03:12,159 --> 00:03:14,159
multi-challenge setting without

85
00:03:14,159 --> 00:03:16,000
additional security laws

86
00:03:16,000 --> 00:03:18,319
but for simplicity in this talk i will

87
00:03:18,319 --> 00:03:21,360
focus on the single challenge setting

88
00:03:21,360 --> 00:03:23,760
our paper uses for multi channels that

89
00:03:23,760 --> 00:03:26,239
think so

90
00:03:26,560 --> 00:03:28,959
finally i want to mention that there's

91
00:03:28,959 --> 00:03:31,360
another slightly stronger security

92
00:03:31,360 --> 00:03:32,640
notion

93
00:03:32,640 --> 00:03:34,239
that allows for dishonest key

94
00:03:34,239 --> 00:03:36,879
registration that is the adversary can

95
00:03:36,879 --> 00:03:39,200
generate its own public key

96
00:03:39,200 --> 00:03:41,519
and then ask for shared keys between

97
00:03:41,519 --> 00:03:42,879
this public key

98
00:03:42,879 --> 00:03:47,079
and another user in the system

99
00:03:47,120 --> 00:03:48,799
however the security notion can be

100
00:03:48,799 --> 00:03:50,799
achieved generically from what we have

101
00:03:50,799 --> 00:03:51,760
here

102
00:03:51,760 --> 00:03:54,080
using a non-interactive zero-knowledge

103
00:03:54,080 --> 00:03:55,599
proof of knowledge

104
00:03:55,599 --> 00:03:57,360
that's why we chose to ignore this

105
00:03:57,360 --> 00:04:00,480
additional oracle in our work

106
00:04:00,480 --> 00:04:02,640
but for our first construction we only

107
00:04:02,640 --> 00:04:03,599
need

108
00:04:03,599 --> 00:04:04,720
to prove

109
00:04:04,720 --> 00:04:07,360
linear relationships with this proof of

110
00:04:07,360 --> 00:04:08,640
knowledge

111
00:04:08,640 --> 00:04:09,519
so

112
00:04:09,519 --> 00:04:13,159
it is quite efficient

113
00:04:14,879 --> 00:04:16,478
okay so what do we mean by tight

114
00:04:16,478 --> 00:04:18,560
security when we want to prove that our

115
00:04:18,560 --> 00:04:21,199
nike achieves the security notion we

116
00:04:21,199 --> 00:04:22,800
typically give a reduction to some

117
00:04:22,800 --> 00:04:25,759
underlying assumption

118
00:04:25,759 --> 00:04:28,080
and this reduction guarantees that when

119
00:04:28,080 --> 00:04:30,320
we can break the scheme with probability

120
00:04:30,320 --> 00:04:32,800
epsilon using some resources rho we can

121
00:04:32,800 --> 00:04:34,400
break the underlying assumption with

122
00:04:34,400 --> 00:04:37,280
probability epsilon divided by l using

123
00:04:37,280 --> 00:04:39,600
for a fair comparison approximately the

124
00:04:39,600 --> 00:04:41,759
same resources

125
00:04:41,759 --> 00:04:44,960
and this l is called the security loss

126
00:04:44,960 --> 00:04:48,080
in general a large security loss l can

127
00:04:48,080 --> 00:04:50,160
be compensated by just choosing the

128
00:04:50,160 --> 00:04:52,560
security parameter larger

129
00:04:52,560 --> 00:04:54,320
the disadvantage is that your scheme

130
00:04:54,320 --> 00:04:56,880
gets less efficient so it's beneficial

131
00:04:56,880 --> 00:04:58,720
to look for schemes that have a small

132
00:04:58,720 --> 00:05:02,080
security loss in the first place

133
00:05:02,080 --> 00:05:04,240
and this is captured by tightness

134
00:05:04,240 --> 00:05:05,919
more concretely we mean that with

135
00:05:05,919 --> 00:05:08,400
tightness that the security loss l does

136
00:05:08,400 --> 00:05:10,639
not depend on the adversary

137
00:05:10,639 --> 00:05:13,039
so for nike this especially means that l

138
00:05:13,039 --> 00:05:15,520
does not grow with the number of users n

139
00:05:15,520 --> 00:05:19,198
that the adversary registers

140
00:05:21,120 --> 00:05:23,039
an example of a nike that probably

141
00:05:23,039 --> 00:05:24,560
everybody of you knows is the

142
00:05:24,560 --> 00:05:28,000
diffie-hellman key exchange

143
00:05:28,320 --> 00:05:30,720
when we want to analyze this

144
00:05:30,720 --> 00:05:33,840
nike in the multi-user setting

145
00:05:33,840 --> 00:05:36,000
we have to guess both challenge users in

146
00:05:36,000 --> 00:05:39,120
advance so at least the the index of the

147
00:05:39,120 --> 00:05:41,039
query when the adversary

148
00:05:41,039 --> 00:05:42,960
spawns these users

149
00:05:42,960 --> 00:05:44,639
and then embed a challenge in their

150
00:05:44,639 --> 00:05:46,320
public key

151
00:05:46,320 --> 00:05:50,800
that means we get a security loss of n

152
00:05:50,840 --> 00:05:53,840
squared and a work by bada at al showed

153
00:05:53,840 --> 00:05:56,160
that this loss of n squared is indeed

154
00:05:56,160 --> 00:05:57,759
necessary

155
00:05:57,759 --> 00:06:00,240
at least if the secret keys are unique

156
00:06:00,240 --> 00:06:03,360
given the public key

157
00:06:05,440 --> 00:06:08,160
the first work that managed to

158
00:06:08,160 --> 00:06:10,560
get around this lower bound is the work

159
00:06:10,560 --> 00:06:12,479
by hesse at i

160
00:06:12,479 --> 00:06:14,000
and they only need to guess one of the

161
00:06:14,000 --> 00:06:16,880
challenge users

162
00:06:17,120 --> 00:06:19,919
and then can embed their a challenge in

163
00:06:19,919 --> 00:06:21,680
their public key

164
00:06:21,680 --> 00:06:24,080
and so they get security loss of only o

165
00:06:24,080 --> 00:06:26,479
of n

166
00:06:26,479 --> 00:06:28,080
they also give a lower bound that shows

167
00:06:28,080 --> 00:06:30,800
that this loss o n is necessary for a

168
00:06:30,800 --> 00:06:34,520
large class of nikes

169
00:06:35,520 --> 00:06:38,000
in our work we now look at the case

170
00:06:38,000 --> 00:06:42,880
where you allow the keys to get larger

171
00:06:42,880 --> 00:06:43,759
and

172
00:06:43,759 --> 00:06:45,440
grow for example with the number of

173
00:06:45,440 --> 00:06:47,199
users

174
00:06:47,199 --> 00:06:49,280
now both of the previous works you

175
00:06:49,280 --> 00:06:51,360
cannot get any advantage of such large

176
00:06:51,360 --> 00:06:52,400
keys

177
00:06:52,400 --> 00:06:54,720
so their time does not change no matter

178
00:06:54,720 --> 00:06:58,000
how large you choose your key

179
00:06:58,479 --> 00:07:01,199
but our first con construct is a nike

180
00:07:01,199 --> 00:07:03,280
where larger keys give you less security

181
00:07:03,280 --> 00:07:04,560
loss

182
00:07:04,560 --> 00:07:06,240
more concretely if you allow your keys

183
00:07:06,240 --> 00:07:07,919
to have

184
00:07:07,919 --> 00:07:10,240
to grow with a number of users then you

185
00:07:10,240 --> 00:07:15,880
get your tightness as low as o of log n

186
00:07:16,240 --> 00:07:18,720
but when you have but when you want a

187
00:07:18,720 --> 00:07:21,199
constant size keys

188
00:07:21,199 --> 00:07:24,080
your security loss will be o of n

189
00:07:24,080 --> 00:07:26,479
squared

190
00:07:27,680 --> 00:07:30,160
we also give a lower bound that shows

191
00:07:30,160 --> 00:07:32,400
that these large keys seem to be

192
00:07:32,400 --> 00:07:34,880
necessary

193
00:07:34,880 --> 00:07:36,720
however our lower bound does not quite

194
00:07:36,720 --> 00:07:38,560
match our upper bound

195
00:07:38,560 --> 00:07:40,880
it only shows that of n is necessary for

196
00:07:40,880 --> 00:07:42,319
constant size

197
00:07:42,319 --> 00:07:45,680
keys and you need

198
00:07:45,680 --> 00:07:48,319
a key size of n to get constant

199
00:07:48,319 --> 00:07:50,800
tightness

200
00:07:52,879 --> 00:07:54,960
our low amount applies to nikes wherever

201
00:07:54,960 --> 00:07:57,039
shared key is the inner product of the

202
00:07:57,039 --> 00:07:59,360
public and secret key and this is the

203
00:07:59,360 --> 00:08:01,599
case for all known group based

204
00:08:01,599 --> 00:08:04,400
constructions

205
00:08:06,080 --> 00:08:08,160
i now want to explain our contributions

206
00:08:08,160 --> 00:08:09,840
in more detail

207
00:08:09,840 --> 00:08:13,360
our first construction starts as follows

208
00:08:13,360 --> 00:08:15,120
we take the

209
00:08:15,120 --> 00:08:17,280
public and secret key of a very simple

210
00:08:17,280 --> 00:08:19,680
nike here i will use the diffie-hellman

211
00:08:19,680 --> 00:08:22,080
nike for example

212
00:08:22,080 --> 00:08:24,000
in fact we will later use a pairing

213
00:08:24,000 --> 00:08:25,919
based version of the divi helmet key

214
00:08:25,919 --> 00:08:28,400
exchange

215
00:08:28,400 --> 00:08:30,720
and then we append to these keys

216
00:08:30,720 --> 00:08:33,120
vector of a lot of zeros

217
00:08:33,120 --> 00:08:35,760
both in the public and the secret key

218
00:08:35,760 --> 00:08:37,679
this will be our normal keys that is

219
00:08:37,679 --> 00:08:39,279
these are the keys you will get if you

220
00:08:39,279 --> 00:08:42,640
generate your keys honestly

221
00:08:42,640 --> 00:08:44,959
along with this the reduction will use a

222
00:08:44,959 --> 00:08:47,120
few semi-functional keys and these

223
00:08:47,120 --> 00:08:48,880
semi-functional keys will have in their

224
00:08:48,880 --> 00:08:52,399
public key a vector with one one entry

225
00:08:52,399 --> 00:08:54,640
so when new is the dimension of this

226
00:08:54,640 --> 00:08:56,399
vector we will be able to

227
00:08:56,399 --> 00:08:58,399
generate up to new different

228
00:08:58,399 --> 00:09:00,640
semi-functional keys

229
00:09:00,640 --> 00:09:02,959
a secret key will have have a lot of

230
00:09:02,959 --> 00:09:04,800
random entries

231
00:09:04,800 --> 00:09:07,279
and in the i secret key will have random

232
00:09:07,279 --> 00:09:10,320
entries are i1 to ri nu

233
00:09:10,320 --> 00:09:12,800
and they are chosen that that rij is the

234
00:09:12,800 --> 00:09:16,079
same as rji

235
00:09:16,800 --> 00:09:18,560
then we need that these normal keys and

236
00:09:18,560 --> 00:09:20,959
semi-functional keys are

237
00:09:20,959 --> 00:09:23,279
computationally indistinguishable

238
00:09:23,279 --> 00:09:26,320
we will achieve this later by applying a

239
00:09:26,320 --> 00:09:29,360
basis change to these vectors

240
00:09:29,360 --> 00:09:32,080
and to a uniformly random basis

241
00:09:32,080 --> 00:09:36,480
and encoding everything inside groups

242
00:09:36,480 --> 00:09:38,320
the shared key will be the inner product

243
00:09:38,320 --> 00:09:40,800
of public and secret keys

244
00:09:40,800 --> 00:09:42,480
since we encode everything in groups we

245
00:09:42,480 --> 00:09:43,200
will

246
00:09:43,200 --> 00:09:47,040
later need a pairing to compute this

247
00:09:48,080 --> 00:09:50,000
now what's the point of having these

248
00:09:50,000 --> 00:09:51,760
semi-functional keys

249
00:09:51,760 --> 00:09:53,760
well if you compute

250
00:09:53,760 --> 00:09:55,600
your shared key with two normal keys you

251
00:09:55,600 --> 00:09:58,160
will kind of get the real shared key

252
00:09:58,160 --> 00:10:00,959
that is the shared key

253
00:10:00,959 --> 00:10:02,959
you would also get with this

254
00:10:02,959 --> 00:10:05,279
basic nike

255
00:10:05,279 --> 00:10:07,519
same is true if you have one normal and

256
00:10:07,519 --> 00:10:10,320
one semi-functional key

257
00:10:10,320 --> 00:10:12,240
but when you both keys are

258
00:10:12,240 --> 00:10:14,079
semi-functional you will get the real

259
00:10:14,079 --> 00:10:16,720
value plus rij

260
00:10:16,720 --> 00:10:19,839
and this rij is uniformly random if

261
00:10:19,839 --> 00:10:22,000
secret key i and security j are both

262
00:10:22,000 --> 00:10:24,480
unknown

263
00:10:27,120 --> 00:10:28,560
now to get to the more concrete

264
00:10:28,560 --> 00:10:30,560
construction i will use implicit

265
00:10:30,560 --> 00:10:32,079
notation

266
00:10:32,079 --> 00:10:33,120
that is

267
00:10:33,120 --> 00:10:34,959
a matrix or a vector in these square

268
00:10:34,959 --> 00:10:36,959
brackets means that all entries are

269
00:10:36,959 --> 00:10:38,880
encoded in the group

270
00:10:38,880 --> 00:10:41,600
which means that if we have some value

271
00:10:41,600 --> 00:10:44,320
a we will not store a but g to the power

272
00:10:44,320 --> 00:10:46,240
of a where g is the generator of the

273
00:10:46,240 --> 00:10:48,480
group

274
00:10:50,240 --> 00:10:51,839
the underlying assumption for our

275
00:10:51,839 --> 00:10:55,200
construction will be the mddh assumption

276
00:10:55,200 --> 00:10:58,160
for uniformly random matrices

277
00:10:58,160 --> 00:11:01,040
that states that if i have a

278
00:11:01,040 --> 00:11:02,959
matrix d

279
00:11:02,959 --> 00:11:05,920
and a vector that is chosen uniformly

280
00:11:05,920 --> 00:11:08,320
random from the column span of this

281
00:11:08,320 --> 00:11:09,680
matrix d

282
00:11:09,680 --> 00:11:11,600
both encoded in a group

283
00:11:11,600 --> 00:11:12,959
then this is computationally

284
00:11:12,959 --> 00:11:14,480
indistinguishable

285
00:11:14,480 --> 00:11:17,279
to a unifying random matrix d and a

286
00:11:17,279 --> 00:11:21,519
completely uniformly random vector u

287
00:11:22,320 --> 00:11:24,320
this assumption is tightly implied by

288
00:11:24,320 --> 00:11:26,240
well-known standard assumptions for

289
00:11:26,240 --> 00:11:28,720
example the two linear assumption

290
00:11:28,720 --> 00:11:30,399
and it is conjectured to hold even in

291
00:11:30,399 --> 00:11:33,279
the presence of a symmetric pairing

292
00:11:33,279 --> 00:11:35,519
and a symmetric pairing is a bilinear

293
00:11:35,519 --> 00:11:38,320
map that it maps three to the a and g to

294
00:11:38,320 --> 00:11:39,920
the b

295
00:11:39,920 --> 00:11:40,959
to

296
00:11:40,959 --> 00:11:42,880
gt to the

297
00:11:42,880 --> 00:11:46,000
a times b where gt is a generator of

298
00:11:46,000 --> 00:11:48,880
another group

299
00:11:49,120 --> 00:11:51,519
now this is our concrete nike the public

300
00:11:51,519 --> 00:11:53,600
parameters contain a uniformly random

301
00:11:53,600 --> 00:11:55,279
matrix d

302
00:11:55,279 --> 00:11:57,440
and another matrix that we can write as

303
00:11:57,440 --> 00:11:58,720
m times d

304
00:11:58,720 --> 00:12:01,519
where m is a symmetric uniformly random

305
00:12:01,519 --> 00:12:04,079
matrix

306
00:12:04,800 --> 00:12:07,040
the public key or a normal public key

307
00:12:07,040 --> 00:12:09,200
will be just a

308
00:12:09,200 --> 00:12:12,000
vector from the span of d

309
00:12:12,000 --> 00:12:13,600
and the secret key

310
00:12:13,600 --> 00:12:16,240
m times this public key

311
00:12:16,240 --> 00:12:18,480
both encoded in the group this can be

312
00:12:18,480 --> 00:12:20,880
computed from a public parameters when

313
00:12:20,880 --> 00:12:24,000
you know this vector wi over set queue

314
00:12:24,000 --> 00:12:25,279
which you know when you generate it

315
00:12:25,279 --> 00:12:28,240
yourself of course

316
00:12:28,399 --> 00:12:31,760
and finally the shared key is just the

317
00:12:31,760 --> 00:12:33,680
inner product of the public and the

318
00:12:33,680 --> 00:12:36,240
secret key which you can compute using a

319
00:12:36,240 --> 00:12:38,959
pairing

320
00:12:38,959 --> 00:12:41,680
simi functional keys now look as follows

321
00:12:41,680 --> 00:12:43,839
the public key is now a uniformly random

322
00:12:43,839 --> 00:12:46,639
vector and the secret key is m times

323
00:12:46,639 --> 00:12:50,160
this uniformly random vector

324
00:12:51,680 --> 00:12:53,360
now when you apply to all of these

325
00:12:53,360 --> 00:12:55,519
vectors a basis change

326
00:12:55,519 --> 00:12:58,800
that maps the column vectors of d

327
00:12:58,800 --> 00:13:01,680
and all the semi-functional public keys

328
00:13:01,680 --> 00:13:03,839
to the standard basis

329
00:13:03,839 --> 00:13:05,440
or then you will get roughly the

330
00:13:05,440 --> 00:13:07,680
representation i started with in the

331
00:13:07,680 --> 00:13:09,760
beginning

332
00:13:09,760 --> 00:13:12,480
to see security of this nike we will

333
00:13:12,480 --> 00:13:16,639
look into the leakage of this matrix m

334
00:13:16,639 --> 00:13:19,040
and to see this more clearly we will

335
00:13:19,040 --> 00:13:20,480
also apply this

336
00:13:20,480 --> 00:13:22,639
describe basis change transformation to

337
00:13:22,639 --> 00:13:24,800
m

338
00:13:25,440 --> 00:13:26,160
so

339
00:13:26,160 --> 00:13:28,480
here's the matrix m this diagonal should

340
00:13:28,480 --> 00:13:30,000
remind you that this is a symmetric

341
00:13:30,000 --> 00:13:32,240
matrix

342
00:13:32,240 --> 00:13:34,480
and now the public parameters just leak

343
00:13:34,480 --> 00:13:36,720
a few rows and of course also the

344
00:13:36,720 --> 00:13:41,199
corresponding columns of this matrix m

345
00:13:41,199 --> 00:13:43,680
a secret key of a semi-functional user

346
00:13:43,680 --> 00:13:45,760
will leak one more row and also of

347
00:13:45,760 --> 00:13:47,920
course the corresponding column of this

348
00:13:47,920 --> 00:13:50,560
matrix m

349
00:13:50,560 --> 00:13:51,920
and the shared key between two

350
00:13:51,920 --> 00:13:54,079
semi-functional users will be just one

351
00:13:54,079 --> 00:13:57,120
entry of this matrix m

352
00:13:57,120 --> 00:13:58,240
and

353
00:13:58,240 --> 00:14:01,440
this leaks of course this entry and also

354
00:14:01,440 --> 00:14:03,519
the correspondingly mirrored entry

355
00:14:03,519 --> 00:14:06,560
because they are the same

356
00:14:07,440 --> 00:14:09,519
that means the chat keys between users

357
00:14:09,519 --> 00:14:11,519
with semi-functional keys are uniformly

358
00:14:11,519 --> 00:14:12,560
random

359
00:14:12,560 --> 00:14:15,040
even when we have adaptive corruptions

360
00:14:15,040 --> 00:14:17,120
of course as long as not secret key of

361
00:14:17,120 --> 00:14:20,880
any of the challenge users is leaked

362
00:14:24,000 --> 00:14:26,560
now to prove security of our nike let's

363
00:14:26,560 --> 00:14:29,440
call n the number of users and new the

364
00:14:29,440 --> 00:14:31,600
size of the table entries which is

365
00:14:31,600 --> 00:14:34,800
roughly the size of the keys

366
00:14:34,800 --> 00:14:37,760
and then we will apply a hybrid argument

367
00:14:37,760 --> 00:14:40,560
in each hybrid we will change new of the

368
00:14:40,560 --> 00:14:42,560
normal keys to semi-functional keys and

369
00:14:42,560 --> 00:14:44,959
so we can randomize new squared shared

370
00:14:44,959 --> 00:14:46,240
keys

371
00:14:46,240 --> 00:14:47,040
thus

372
00:14:47,040 --> 00:14:50,240
o of n divided by nu squared

373
00:14:50,240 --> 00:14:52,959
hybrids are necessary i suggest that we

374
00:14:52,959 --> 00:14:54,880
will need to switch new keys from normal

375
00:14:54,880 --> 00:14:58,480
to simi function and later back and this

376
00:14:58,480 --> 00:15:00,880
can be done with security loss only o of

377
00:15:00,880 --> 00:15:02,800
log nu

378
00:15:02,800 --> 00:15:05,120
due to a new mddh re-randomization

379
00:15:05,120 --> 00:15:07,519
argument we give

380
00:15:07,519 --> 00:15:09,760
this leads to our total security loss of

381
00:15:09,760 --> 00:15:12,399
n squared times log nu divided by nu

382
00:15:12,399 --> 00:15:14,240
squared

383
00:15:14,240 --> 00:15:16,079
now of course the large keys of our nike

384
00:15:16,079 --> 00:15:18,639
are quite a big disadvantage

385
00:15:18,639 --> 00:15:20,399
but unfortunately we also have a lower

386
00:15:20,399 --> 00:15:22,399
bound that shows that these keys are

387
00:15:22,399 --> 00:15:25,680
necessary for a large class of nikes

388
00:15:25,680 --> 00:15:28,320
and these large class of nikes we call

389
00:15:28,320 --> 00:15:31,040
inner product nikes

390
00:15:31,040 --> 00:15:33,040
and they are defined as follows the

391
00:15:33,040 --> 00:15:35,199
public keys contain implicitly are d

392
00:15:35,199 --> 00:15:37,199
dimensional vector x

393
00:15:37,199 --> 00:15:38,959
and also the secret keys contained

394
00:15:38,959 --> 00:15:42,560
implicitly a d-dimensional vector y

395
00:15:42,560 --> 00:15:44,320
the shared key is now a function f

396
00:15:44,320 --> 00:15:46,079
applied to the inner product of the

397
00:15:46,079 --> 00:15:48,000
vectors contained in the public and

398
00:15:48,000 --> 00:15:50,639
secret key

399
00:15:52,000 --> 00:15:54,000
this captures all known group based

400
00:15:54,000 --> 00:15:56,079
contractions for example dvr mankey

401
00:15:56,079 --> 00:15:57,199
exchange

402
00:15:57,199 --> 00:15:59,279
the work by hesse at al

403
00:15:59,279 --> 00:16:01,759
and also our first construction

404
00:16:01,759 --> 00:16:04,000
here's a sketch on how this lower bound

405
00:16:04,000 --> 00:16:06,639
works a reduction always sends the

406
00:16:06,639 --> 00:16:08,720
public key at registration

407
00:16:08,720 --> 00:16:11,120
that means that this vector x i is fixed

408
00:16:11,120 --> 00:16:14,240
for each user at registration

409
00:16:14,240 --> 00:16:16,720
now when the ice user is registered and

410
00:16:16,720 --> 00:16:19,120
this vector x i is in the span

411
00:16:19,120 --> 00:16:21,440
of the vector x from all the previous

412
00:16:21,440 --> 00:16:23,600
user then the reduction is already

413
00:16:23,600 --> 00:16:25,839
committed to the shared key for this

414
00:16:25,839 --> 00:16:27,120
user

415
00:16:27,120 --> 00:16:28,959
and the situation that x is not in the

416
00:16:28,959 --> 00:16:31,759
span of the previous vectors

417
00:16:31,759 --> 00:16:35,279
can happen at most d times

418
00:16:35,600 --> 00:16:37,759
that means when

419
00:16:37,759 --> 00:16:39,920
all users are registered

420
00:16:39,920 --> 00:16:42,000
and about half of the secret keys are

421
00:16:42,000 --> 00:16:44,639
opened the reduction is committed to a

422
00:16:44,639 --> 00:16:47,040
shared key among the remaining users

423
00:16:47,040 --> 00:16:50,079
with a significant probability

424
00:16:50,079 --> 00:16:52,320
now a meta reduction can unveil the

425
00:16:52,320 --> 00:16:54,079
shared key between two of the remaining

426
00:16:54,079 --> 00:16:55,199
users

427
00:16:55,199 --> 00:16:57,519
then rewind the reduction to the step

428
00:16:57,519 --> 00:17:00,079
before this

429
00:17:00,079 --> 00:17:02,320
and hopefully win the challenge with

430
00:17:02,320 --> 00:17:03,759
this key

431
00:17:03,759 --> 00:17:05,839
when my reduction is indeed committed to

432
00:17:05,839 --> 00:17:08,559
the shared key that the adversary

433
00:17:08,559 --> 00:17:09,760
unveiled

434
00:17:09,760 --> 00:17:12,799
he will win this game

435
00:17:12,799 --> 00:17:15,199
when you analyze this carefully and

436
00:17:15,199 --> 00:17:17,199
repeat this last step over and over

437
00:17:17,199 --> 00:17:19,760
again you will see that a minimal

438
00:17:19,760 --> 00:17:23,199
security loss of n over d is necessary

439
00:17:23,199 --> 00:17:25,359
that means for tightness you will need a

440
00:17:25,359 --> 00:17:28,559
large dimension d

441
00:17:28,559 --> 00:17:30,799
we cannot prove that for dimension d you

442
00:17:30,799 --> 00:17:32,960
will also need public and secret keys

443
00:17:32,960 --> 00:17:34,960
that grow with the

444
00:17:34,960 --> 00:17:36,480
and it seems quite hard to have high

445
00:17:36,480 --> 00:17:40,000
dimension with compact keys

446
00:17:41,039 --> 00:17:43,440
okay finally i want to talk about

447
00:17:43,440 --> 00:17:46,080
semi-adaptive security because what you

448
00:17:46,080 --> 00:17:47,679
have analyzed so far is adaptive

449
00:17:47,679 --> 00:17:50,160
security and we have seen that titan is

450
00:17:50,160 --> 00:17:53,840
tightness is quite hard to achieve

451
00:17:55,120 --> 00:17:57,200
on the other hand selective security

452
00:17:57,200 --> 00:17:58,799
that is a security notion where the

453
00:17:58,799 --> 00:18:00,880
adversary has to register all users in

454
00:18:00,880 --> 00:18:02,000
one shot

455
00:18:02,000 --> 00:18:04,080
and then specify the challenge

456
00:18:04,080 --> 00:18:06,880
pair before seeing the public key

457
00:18:06,880 --> 00:18:08,559
in this setting it's very easy to

458
00:18:08,559 --> 00:18:10,720
achieve tightness

459
00:18:10,720 --> 00:18:12,480
because the reduction knows exactly

460
00:18:12,480 --> 00:18:14,160
where to embed the challenge so for

461
00:18:14,160 --> 00:18:16,400
example the helmet key exchange

462
00:18:16,400 --> 00:18:18,400
is tightly secured in the selective

463
00:18:18,400 --> 00:18:20,559
model

464
00:18:20,559 --> 00:18:22,240
now in between this lies the steamy

465
00:18:22,240 --> 00:18:24,480
adaptive security model there an

466
00:18:24,480 --> 00:18:27,200
adversary has to specify the challenge

467
00:18:27,200 --> 00:18:29,840
keeper before making any corruptions

468
00:18:29,840 --> 00:18:32,400
that is any reveal of a secret key or a

469
00:18:32,400 --> 00:18:33,840
shared key

470
00:18:33,840 --> 00:18:38,000
but after seeing all the public keys

471
00:18:41,440 --> 00:18:43,200
our final construction will work in the

472
00:18:43,200 --> 00:18:46,400
semi-adaptive security model

473
00:18:46,400 --> 00:18:48,400
our semi-adaptive secure construction

474
00:18:48,400 --> 00:18:50,880
consists of two building blocks

475
00:18:50,880 --> 00:18:52,799
the first building block is in fact the

476
00:18:52,799 --> 00:18:54,799
nike i just presented but used in a

477
00:18:54,799 --> 00:18:56,559
different way

478
00:18:56,559 --> 00:18:58,720
so let's look at this construction again

479
00:18:58,720 --> 00:19:00,799
but that's the dimension new to one so

480
00:19:00,799 --> 00:19:04,000
we get compact keys

481
00:19:04,880 --> 00:19:07,039
then we can still switch all keys to

482
00:19:07,039 --> 00:19:10,039
semi-functional

483
00:19:10,720 --> 00:19:13,120
and the reduction can also output all of

484
00:19:13,120 --> 00:19:15,039
these secret keys

485
00:19:15,039 --> 00:19:16,720
the only problem is there will be

486
00:19:16,720 --> 00:19:18,880
information theoretic theoretically

487
00:19:18,880 --> 00:19:20,640
nothing secret about the shared keys

488
00:19:20,640 --> 00:19:22,880
between two semi-functional users

489
00:19:22,880 --> 00:19:25,760
anymore when just one of these secret

490
00:19:25,760 --> 00:19:28,559
keys is leaked

491
00:19:28,559 --> 00:19:31,520
but this is still useful because

492
00:19:31,520 --> 00:19:33,760
and the semi-adapter setting reduction

493
00:19:33,760 --> 00:19:36,640
first publishes all the public keys

494
00:19:36,640 --> 00:19:38,080
and then the adversary picks the

495
00:19:38,080 --> 00:19:40,000
challenge pair

496
00:19:40,000 --> 00:19:42,640
and now the reduction can program the

497
00:19:42,640 --> 00:19:44,000
challenge

498
00:19:44,000 --> 00:19:46,320
the challenge shared key to anything the

499
00:19:46,320 --> 00:19:48,640
reduction wants

500
00:19:48,640 --> 00:19:50,480
as long as it's something that looks

501
00:19:50,480 --> 00:19:53,679
uniformly random to the adversary

502
00:19:53,679 --> 00:19:55,520
thus we have a tool that gives us some

503
00:19:55,520 --> 00:19:58,080
adaptivity because we can

504
00:19:58,080 --> 00:20:00,160
after publishing all the public keys

505
00:20:00,160 --> 00:20:03,120
decide on this challenge key

506
00:20:03,120 --> 00:20:04,320
it's just that we will leak the

507
00:20:04,320 --> 00:20:08,158
challenge key to the adversary later

508
00:20:08,320 --> 00:20:09,919
our second building block will use the

509
00:20:09,919 --> 00:20:11,520
shared key as attack

510
00:20:11,520 --> 00:20:14,159
for a so called tag based nike that is

511
00:20:14,159 --> 00:20:16,480
basically a nike where you additionally

512
00:20:16,480 --> 00:20:18,400
get this input for the shared key

513
00:20:18,400 --> 00:20:22,080
computation attack t

514
00:20:22,400 --> 00:20:25,039
and you will have correctness as long as

515
00:20:25,039 --> 00:20:29,039
both users input the same tag t

516
00:20:29,120 --> 00:20:32,880
except for one special tag t star

517
00:20:32,880 --> 00:20:34,960
and security will hold only for the

518
00:20:34,960 --> 00:20:38,000
special tag t star

519
00:20:38,000 --> 00:20:39,760
now this tech based nike doesn't suffer

520
00:20:39,760 --> 00:20:41,840
from the same limitations to achieve

521
00:20:41,840 --> 00:20:44,720
tightness as standard nike

522
00:20:44,720 --> 00:20:46,320
because all the

523
00:20:46,320 --> 00:20:48,000
problems for achieving tightness come

524
00:20:48,000 --> 00:20:49,919
from fact that a reduction is usually

525
00:20:49,919 --> 00:20:52,320
quite early committed to a large portion

526
00:20:52,320 --> 00:20:54,159
of the shared keys

527
00:20:54,159 --> 00:20:55,919
and this relies crucially on the

528
00:20:55,919 --> 00:20:59,679
correctness property of the nike

529
00:21:00,320 --> 00:21:02,880
for the stack-based nike we separated

530
00:21:02,880 --> 00:21:05,200
correctness and security

531
00:21:05,200 --> 00:21:07,120
because we have to prove security only

532
00:21:07,120 --> 00:21:08,640
in a setting where we don't have

533
00:21:08,640 --> 00:21:10,720
correctness

534
00:21:10,720 --> 00:21:13,200
we can build that attack-based nike with

535
00:21:13,200 --> 00:21:14,080
a tight

536
00:21:14,080 --> 00:21:17,120
security reduction from lwe

537
00:21:17,120 --> 00:21:18,080
using

538
00:21:18,080 --> 00:21:20,400
techniques for leveled fully homomorphic

539
00:21:20,400 --> 00:21:22,960
encryption

540
00:21:24,240 --> 00:21:26,320
and as tech we can use the cherokee from

541
00:21:26,320 --> 00:21:28,320
the first construction

542
00:21:28,320 --> 00:21:30,720
so this gives us a tight semi-adaptively

543
00:21:30,720 --> 00:21:33,120
secure nike

544
00:21:33,120 --> 00:21:34,960
when we use our first construction with

545
00:21:34,960 --> 00:21:37,840
this parameter we not e set to one but

546
00:21:37,840 --> 00:21:40,159
to something larger

547
00:21:40,159 --> 00:21:41,840
we will get with this construction a

548
00:21:41,840 --> 00:21:44,240
nike that is secure in a stronger

549
00:21:44,240 --> 00:21:46,000
security model

550
00:21:46,000 --> 00:21:46,960
namely

551
00:21:46,960 --> 00:21:50,240
the in this model the adversary can ask

552
00:21:50,240 --> 00:21:52,799
for some of the secret keys

553
00:21:52,799 --> 00:21:58,200
before specifying the challenge key pair

554
00:21:58,240 --> 00:22:00,080
thus in this construction we will get a

555
00:22:00,080 --> 00:22:02,640
trade-off between key size

556
00:22:02,640 --> 00:22:07,120
and adaptivity of the security model

557
00:22:07,120 --> 00:22:09,280
now to summarize our work we looked at

558
00:22:09,280 --> 00:22:11,600
nike and focused on the three properties

559
00:22:11,600 --> 00:22:15,919
tightness adaptivity and compact keys

560
00:22:15,919 --> 00:22:18,000
and showed that we can achieve any two

561
00:22:18,000 --> 00:22:20,480
of these three properties

562
00:22:20,480 --> 00:22:23,280
our first construction is adaptivity

563
00:22:23,280 --> 00:22:25,120
and shows that the trade-off between

564
00:22:25,120 --> 00:22:28,799
tightness and compact keys is possible

565
00:22:28,799 --> 00:22:30,240
our second construction at least

566
00:22:30,240 --> 00:22:32,080
tightness ensures that a trade-off

567
00:22:32,080 --> 00:22:34,240
between adaptivity and compact keys is

568
00:22:34,240 --> 00:22:36,159
possible

569
00:22:36,159 --> 00:22:39,880
thank you for your attention

570
00:22:52,640 --> 00:22:54,720
you

