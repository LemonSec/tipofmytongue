1
00:00:07,700 --> 00:00:10,700
thank you

2
00:00:49,920 --> 00:00:51,960
all right everybody thanks for coming in

3
00:00:51,960 --> 00:00:54,539
this is the second to last session of

4
00:00:54,539 --> 00:00:55,620
the day

5
00:00:55,620 --> 00:00:58,140
uh this session's focus is going to be

6
00:00:58,140 --> 00:00:59,340
on

7
00:00:59,340 --> 00:01:01,680
fully homework fully homomorphic

8
00:01:01,680 --> 00:01:04,640
encryption and multi-party computation

9
00:01:04,640 --> 00:01:07,080
we're getting into magic crypto

10
00:01:07,080 --> 00:01:10,140
territory and so this should be really

11
00:01:10,140 --> 00:01:12,780
fun our first speaker is an invited

12
00:01:12,780 --> 00:01:15,600
speaker and so everyone give a warm

13
00:01:15,600 --> 00:01:19,080
welcomes to shrutique or gorantala

14
00:01:19,080 --> 00:01:21,560
shooting

15
00:01:25,799 --> 00:01:28,560
thanks Nick for the intro uh hi folks

16
00:01:28,560 --> 00:01:31,560
I'm Shati I'm part of the Effigy team at

17
00:01:31,560 --> 00:01:33,659
Google and I'm here to talk about

18
00:01:33,659 --> 00:01:36,240
polyomorphic encryption some of our

19
00:01:36,240 --> 00:01:38,640
adventures and learnings as we try to

20
00:01:38,640 --> 00:01:41,400
bring Effigy to production

21
00:01:41,400 --> 00:01:44,400
as the title suggests the agenda

22
00:01:44,400 --> 00:01:46,140
provides a way to navigate the

23
00:01:46,140 --> 00:01:48,659
ciphertext space which uh which is

24
00:01:48,659 --> 00:01:50,399
basically programming or encrypted data

25
00:01:50,399 --> 00:01:52,500
which I call the Fiji stack

26
00:01:52,500 --> 00:01:55,320
and because fhg is such an interesting

27
00:01:55,320 --> 00:01:59,040
and challenging space I talk about using

28
00:01:59,040 --> 00:02:01,020
a more abstract framework called a

29
00:02:01,020 --> 00:02:03,899
hierarchy of needs to define a path to

30
00:02:03,899 --> 00:02:06,719
real world fhe that is using fhe for

31
00:02:06,719 --> 00:02:08,160
privacy

32
00:02:08,160 --> 00:02:11,640
so what privacy benefits does

33
00:02:11,640 --> 00:02:14,340
provide in the current world we have

34
00:02:14,340 --> 00:02:17,520
secured storage and secure communication

35
00:02:17,520 --> 00:02:20,280
but not secure computation

36
00:02:20,280 --> 00:02:24,120
and FG Bridges this Gap in doing so it

37
00:02:24,120 --> 00:02:26,099
provides many benefits such as it

38
00:02:26,099 --> 00:02:28,200
prevents Insider risk that is it

39
00:02:28,200 --> 00:02:30,480
prevents internal employees from

40
00:02:30,480 --> 00:02:33,360
accessing user data it ensures policy

41
00:02:33,360 --> 00:02:35,239
compliance and also data minimization

42
00:02:35,239 --> 00:02:38,760
give data access to the fewest people

43
00:02:38,760 --> 00:02:41,400
and jobs possible

44
00:02:41,400 --> 00:02:44,040
and as you all know fully homomorphic

45
00:02:44,040 --> 00:02:45,599
encryption allows computation on

46
00:02:45,599 --> 00:02:48,480
encrypted data and the concept uh goes

47
00:02:48,480 --> 00:02:50,580
that for every function that you can

48
00:02:50,580 --> 00:02:52,800
perform in your plain text space there

49
00:02:52,800 --> 00:02:54,540
is an equivalent function that you can

50
00:02:54,540 --> 00:02:57,260
perform on the ciphertech space

51
00:02:57,260 --> 00:03:00,780
and this is made possible by NYC

52
00:03:00,780 --> 00:03:02,879
encryption scheme called The Learning

53
00:03:02,879 --> 00:03:05,900
with errors encryption scheme

54
00:03:05,900 --> 00:03:09,300
so in this scheme to encrypt a message

55
00:03:09,300 --> 00:03:12,540
small noise is added to large random

56
00:03:12,540 --> 00:03:14,780
samples for protection

57
00:03:14,780 --> 00:03:17,099
these samples are large

58
00:03:17,099 --> 00:03:19,620
the ciphertext here is the sample and

59
00:03:19,620 --> 00:03:23,159
the encryption and the samples are for

60
00:03:23,159 --> 00:03:26,040
20 up to one bit you need 720 integer so

61
00:03:26,040 --> 00:03:29,099
that's almost a cyphotex blow up of uh

62
00:03:29,099 --> 00:03:31,920
20 000 times there's a variant to this

63
00:03:31,920 --> 00:03:33,840
which is the ring version where you

64
00:03:33,840 --> 00:03:35,519
encrypt vectors of messages but there's

65
00:03:35,519 --> 00:03:38,580
also a ciphertext blow up there

66
00:03:38,580 --> 00:03:41,519
uh this noise is kind of the Boon and

67
00:03:41,519 --> 00:03:43,620
also bane of fhg there's a complicated

68
00:03:43,620 --> 00:03:45,239
relationship between noise and message

69
00:03:45,239 --> 00:03:48,360
here as you do computations on your

70
00:03:48,360 --> 00:03:50,940
encrypted data the competitions happen

71
00:03:50,940 --> 00:03:53,159
on the message but also the noise

72
00:03:53,159 --> 00:03:55,920
accumulates and it might reach a point

73
00:03:55,920 --> 00:03:57,860
where it corrupts the message

74
00:03:57,860 --> 00:04:00,959
and that that means that we need to do

75
00:04:00,959 --> 00:04:03,000
noise management we can do this noise

76
00:04:03,000 --> 00:04:04,860
management either by choosing large

77
00:04:04,860 --> 00:04:07,019
parameters to incorporate your entire

78
00:04:07,019 --> 00:04:08,340
competition

79
00:04:08,340 --> 00:04:11,220
or you can track the noise and perform

80
00:04:11,220 --> 00:04:13,379
what we call these ciphertext refresh

81
00:04:13,379 --> 00:04:16,560
operations periodically

82
00:04:16,560 --> 00:04:18,600
so as you can see there are many

83
00:04:18,600 --> 00:04:20,760
challenges uh when you start thinking

84
00:04:20,760 --> 00:04:22,680
about programming on encrypted data and

85
00:04:22,680 --> 00:04:24,060
they can be categorized into the first

86
00:04:24,060 --> 00:04:26,580
one which is data expansion uh which is

87
00:04:26,580 --> 00:04:29,220
obvious the ciphertext blow up uh speed

88
00:04:29,220 --> 00:04:31,259
because now you're performing your

89
00:04:31,259 --> 00:04:33,419
computations on this huge ciphertext

90
00:04:33,419 --> 00:04:35,940
space and also

91
00:04:35,940 --> 00:04:37,620
the simple computation such as

92
00:04:37,620 --> 00:04:39,720
additional multiplications or gate

93
00:04:39,720 --> 00:04:41,520
operations are not the same as they are

94
00:04:41,520 --> 00:04:43,020
on plaintext Space they are much more

95
00:04:43,020 --> 00:04:46,680
complex they require noise management

96
00:04:46,680 --> 00:04:49,020
and usability is because of all of these

97
00:04:49,020 --> 00:04:51,060
bells and whistles that go around with

98
00:04:51,060 --> 00:04:54,419
trying to do uh manage noise as well as

99
00:04:54,419 --> 00:04:55,979
computations

100
00:04:55,979 --> 00:04:58,740
so if you think about fhe programming

101
00:04:58,740 --> 00:05:01,979
it's a bit of a cognitive overload

102
00:05:01,979 --> 00:05:03,900
um in traditional cryptography

103
00:05:03,900 --> 00:05:05,820
encryption and decryption can be thought

104
00:05:05,820 --> 00:05:07,860
of as serialization deserialization

105
00:05:07,860 --> 00:05:10,740
layer just before you send a message or

106
00:05:10,740 --> 00:05:13,580
just after you receive a message

107
00:05:13,580 --> 00:05:16,440
bits messages are just bits you don't

108
00:05:16,440 --> 00:05:18,960
think about what computation uh you

109
00:05:18,960 --> 00:05:21,120
perform on those bits when you encrypt

110
00:05:21,120 --> 00:05:25,440
them but uh you are hyper aware the

111
00:05:25,440 --> 00:05:26,820
encryption algorithm needs to be hyper

112
00:05:26,820 --> 00:05:28,740
aware of the kind of competition that

113
00:05:28,740 --> 00:05:30,600
you perform

114
00:05:30,600 --> 00:05:32,880
so that is the plain text Universe uh

115
00:05:32,880 --> 00:05:34,680
and there's the site for text universe

116
00:05:34,680 --> 00:05:37,320
and you'd think it's just one universe

117
00:05:37,320 --> 00:05:39,900
but actually it's a multi words of fhe

118
00:05:39,900 --> 00:05:43,259
schemes depending upon how you encode

119
00:05:43,259 --> 00:05:46,020
these messages and error there are

120
00:05:46,020 --> 00:05:49,620
multiple schemes in some schemes are

121
00:05:49,620 --> 00:05:52,020
good for gate operations or lookup

122
00:05:52,020 --> 00:05:54,600
tables some schemes are better to do

123
00:05:54,600 --> 00:05:57,060
integer computations while some schemes

124
00:05:57,060 --> 00:05:59,100
are good to do approximate fixed Point

125
00:05:59,100 --> 00:06:00,960
arithmetic

126
00:06:00,960 --> 00:06:03,600
and and okay so if you put on your

127
00:06:03,600 --> 00:06:05,759
developer's hat you know you have your

128
00:06:05,759 --> 00:06:08,280
application it requires some basic

129
00:06:08,280 --> 00:06:11,039
Primitives you pick your scheme then

130
00:06:11,039 --> 00:06:13,560
there are many libraries that Implement

131
00:06:13,560 --> 00:06:14,880
these schemes

132
00:06:14,880 --> 00:06:16,740
and each of these libraries expose

133
00:06:16,740 --> 00:06:18,479
primitive operations now how are you

134
00:06:18,479 --> 00:06:20,880
converting these your bigger application

135
00:06:20,880 --> 00:06:22,500
to those Primitives

136
00:06:22,500 --> 00:06:25,380
thankfully there are many libraries

137
00:06:25,380 --> 00:06:27,720
but each of these libraries is again

138
00:06:27,720 --> 00:06:29,880
optimizing for a specific scheme or a

139
00:06:29,880 --> 00:06:31,500
specific type of comp

140
00:06:31,500 --> 00:06:34,979
uh computation or application how do you

141
00:06:34,979 --> 00:06:39,120
interrupt between these schemes

142
00:06:39,120 --> 00:06:41,039
and then there are hundred accelerators

143
00:06:41,039 --> 00:06:43,380
because if it is slow and there are many

144
00:06:43,380 --> 00:06:45,720
amazing Hardware accelerators the first

145
00:06:45,720 --> 00:06:48,180
question that comes to mind is do they

146
00:06:48,180 --> 00:06:49,500
exist for real

147
00:06:49,500 --> 00:06:54,660
will they uh work for my application

148
00:06:54,660 --> 00:06:57,780
so coming to the research in Fiji side

149
00:06:57,780 --> 00:07:00,060
a popular Fable comes to mind it's

150
00:07:00,060 --> 00:07:03,180
called a blind man and an elephant a

151
00:07:03,180 --> 00:07:04,740
bunch of Blind Men come across an

152
00:07:04,740 --> 00:07:06,960
elephant and each of them is described

153
00:07:06,960 --> 00:07:09,240
trying to describe the elephant by uh

154
00:07:09,240 --> 00:07:10,860
describing the part that's closest to

155
00:07:10,860 --> 00:07:12,840
them some are describing the trunk some

156
00:07:12,840 --> 00:07:14,100
are describing the legs some are

157
00:07:14,100 --> 00:07:15,620
describing the tail

158
00:07:15,620 --> 00:07:18,840
but the bigger picture is missing

159
00:07:18,840 --> 00:07:21,840
FHA research is kind of in a similar

160
00:07:21,840 --> 00:07:24,180
State there are many optimizations many

161
00:07:24,180 --> 00:07:26,759
schemes and all of them are important

162
00:07:26,759 --> 00:07:29,759
and all of them are needed but a bigger

163
00:07:29,759 --> 00:07:31,919
picture is missing

164
00:07:31,919 --> 00:07:35,120
and here we we

165
00:07:35,120 --> 00:07:38,160
propose this fhe stack where we try to

166
00:07:38,160 --> 00:07:39,539
put it all together

167
00:07:39,539 --> 00:07:42,599
on the top left is what we call fhg

168
00:07:42,599 --> 00:07:44,639
architecture selection module which

169
00:07:44,639 --> 00:07:46,560
selects your parameters which selects

170
00:07:46,560 --> 00:07:48,599
the schemes for you which does encoding

171
00:07:48,599 --> 00:07:50,819
how do you encode your message into this

172
00:07:50,819 --> 00:07:52,440
ciphertext space

173
00:07:52,440 --> 00:07:55,919
and on the right is a

174
00:07:55,919 --> 00:07:59,220
think of this as uh as a compiler tool

175
00:07:59,220 --> 00:08:01,620
chain if you think of fhg as its own

176
00:08:01,620 --> 00:08:03,780
Computing machine and ciphertext as

177
00:08:03,780 --> 00:08:06,180
registered then computation on this

178
00:08:06,180 --> 00:08:10,139
registers will incurred some cost and we

179
00:08:10,139 --> 00:08:14,220
need to find a way uh to optimize for

180
00:08:14,220 --> 00:08:18,479
performance while preserving privacy

181
00:08:18,479 --> 00:08:22,919
and this is a lot uh like the llvm tool

182
00:08:22,919 --> 00:08:23,960
chain

183
00:08:23,960 --> 00:08:28,580
it provides a lot of optimizers and

184
00:08:28,580 --> 00:08:31,800
schedulers and just to I'll be going

185
00:08:31,800 --> 00:08:34,380
down the parts of the stack in a bit but

186
00:08:34,380 --> 00:08:36,419
just to give a sense it follows the

187
00:08:36,419 --> 00:08:38,279
basic compiler architecture there's a

188
00:08:38,279 --> 00:08:39,958
front-end there's a middle end there's a

189
00:08:39,958 --> 00:08:42,779
back end and some of the principles that

190
00:08:42,779 --> 00:08:46,620
we try to follow is modularity domain

191
00:08:46,620 --> 00:08:50,459
experts can perform uh their work in

192
00:08:50,459 --> 00:08:51,899
their domain without worrying too much

193
00:08:51,899 --> 00:08:55,100
about other expertise interoperability

194
00:08:55,100 --> 00:08:57,480
each of the modules need to work well

195
00:08:57,480 --> 00:08:59,459
with the rest of the modules and

196
00:08:59,459 --> 00:09:01,820
reusability so

197
00:09:01,820 --> 00:09:04,320
experimenting in one module should not

198
00:09:04,320 --> 00:09:06,540
require for other modules available from

199
00:09:06,540 --> 00:09:08,420
scratch

200
00:09:08,420 --> 00:09:13,380
so we focused on one part of fhg schemes

201
00:09:13,380 --> 00:09:15,779
that is tfag that that is optimized for

202
00:09:15,779 --> 00:09:18,720
a gay bootstrapping now bootstrapping is

203
00:09:18,720 --> 00:09:20,760
one way of ciphertext refresh operations

204
00:09:20,760 --> 00:09:22,680
it reduces the noise so you can continue

205
00:09:22,680 --> 00:09:27,000
to do unlimited set of operations

206
00:09:27,000 --> 00:09:29,640
so we assume there's human input in the

207
00:09:29,640 --> 00:09:31,860
FHA architecture selection module so we

208
00:09:31,860 --> 00:09:34,019
choose a standards 128-bit security

209
00:09:34,019 --> 00:09:37,500
parameters which is binary encoding and

210
00:09:37,500 --> 00:09:40,380
uh Gateway strapping so

211
00:09:40,380 --> 00:09:42,180
so let's begin with the plain text

212
00:09:42,180 --> 00:09:44,519
program this is a basic string

213
00:09:44,519 --> 00:09:46,500
capitalization program that capitalizes

214
00:09:46,500 --> 00:09:48,120
the first letter of every word in a

215
00:09:48,120 --> 00:09:50,339
string there's two interesting things

216
00:09:50,339 --> 00:09:52,620
here one is

217
00:09:52,620 --> 00:09:55,019
um there is an if else condition and the

218
00:09:55,019 --> 00:09:59,580
second one is there's a for Loop so

219
00:09:59,580 --> 00:10:01,920
this comes to the first part of

220
00:10:01,920 --> 00:10:03,680
programming in fhe

221
00:10:03,680 --> 00:10:06,120
it's a data independent programming

222
00:10:06,120 --> 00:10:09,060
Paradigm it's known but as you actually

223
00:10:09,060 --> 00:10:12,240
start programming do you realize that

224
00:10:12,240 --> 00:10:14,100
there needs to be a lot of changes that

225
00:10:14,100 --> 00:10:16,320
need to be made to your program so if

226
00:10:16,320 --> 00:10:18,720
else condition needs to be Rewritten as

227
00:10:18,720 --> 00:10:21,120
a multiplexer because the server does

228
00:10:21,120 --> 00:10:23,220
not know when to Branch so you would

229
00:10:23,220 --> 00:10:25,320
have to execute all the branches and the

230
00:10:25,320 --> 00:10:27,540
condition would pick one branch

231
00:10:27,540 --> 00:10:28,920
selectively

232
00:10:28,920 --> 00:10:31,620
by the same logic how will the server

233
00:10:31,620 --> 00:10:33,240
know when to end the loop if it doesn't

234
00:10:33,240 --> 00:10:36,180
know what the loop variable is so Loops

235
00:10:36,180 --> 00:10:38,339
need to have static upper bounds

236
00:10:38,339 --> 00:10:39,839
and there's no branch and bound

237
00:10:39,839 --> 00:10:42,959
optimizations so every graph is like

238
00:10:42,959 --> 00:10:44,940
fully connected graph

239
00:10:44,940 --> 00:10:47,100
and turns out all of these problems are

240
00:10:47,100 --> 00:10:50,459
handled in high level synthesis which is

241
00:10:50,459 --> 00:10:51,560
Hardware

242
00:10:51,560 --> 00:10:54,240
Hardware synthesis which converts

243
00:10:54,240 --> 00:10:56,820
high-level programs to a representation

244
00:10:56,820 --> 00:11:00,540
that can be executed on Hardware

245
00:11:00,540 --> 00:11:02,940
so we convert that plain text program

246
00:11:02,940 --> 00:11:05,220
using a high level synthesis into a

247
00:11:05,220 --> 00:11:09,240
circuit and the power of this Circ

248
00:11:09,240 --> 00:11:11,040
intermediate representation of a circuit

249
00:11:11,040 --> 00:11:13,260
is that if you write your parser in of

250
00:11:13,260 --> 00:11:14,700
any high level language and convert it

251
00:11:14,700 --> 00:11:16,680
into the parts or into this intermediate

252
00:11:16,680 --> 00:11:18,959
representation you can execute the rest

253
00:11:18,959 --> 00:11:21,180
of the stack

254
00:11:21,180 --> 00:11:24,720
and this becomes obvious here the fhu

255
00:11:24,720 --> 00:11:26,760
optimizer converts that initial

256
00:11:26,760 --> 00:11:30,420
computational circuit into a circuit

257
00:11:30,420 --> 00:11:33,660
that you can execute with fhe

258
00:11:33,660 --> 00:11:36,300
in this because of this intermediate

259
00:11:36,300 --> 00:11:38,940
representations it was very easy to

260
00:11:38,940 --> 00:11:40,920
integrate this with state-of-the-art

261
00:11:40,920 --> 00:11:44,279
yosys ABC optimizations and we found

262
00:11:44,279 --> 00:11:47,220
that it almost always reduces the

263
00:11:47,220 --> 00:11:50,640
circuit size by 40 to 50 so there's an

264
00:11:50,640 --> 00:11:52,500
exponent there's a really good speed up

265
00:11:52,500 --> 00:11:53,839
there

266
00:11:53,839 --> 00:11:56,519
and as you can see here the

267
00:11:56,519 --> 00:11:59,220
computational graph is a directed

268
00:11:59,220 --> 00:12:02,339
acyclic graph now executing this graph

269
00:12:02,339 --> 00:12:05,040
just means going through this graph and

270
00:12:05,040 --> 00:12:07,200
then rewriting some of these nodes as

271
00:12:07,200 --> 00:12:10,860
gate nodes that perform on ciphertext

272
00:12:10,860 --> 00:12:13,620
so that comes to the next part of the

273
00:12:13,620 --> 00:12:16,260
stack which is the execution engine or

274
00:12:16,260 --> 00:12:19,079
the transpiler code gen and we the

275
00:12:19,079 --> 00:12:22,079
transporter code gen does two things it

276
00:12:22,079 --> 00:12:25,140
one of we call it a transpiler and not a

277
00:12:25,140 --> 00:12:28,380
compiler because it emits code it emits

278
00:12:28,380 --> 00:12:31,320
a library and that's powerful in its own

279
00:12:31,320 --> 00:12:35,160
way because then it is not dependent on

280
00:12:35,160 --> 00:12:36,899
the language in which the library is

281
00:12:36,899 --> 00:12:38,880
written so your library could be in go

282
00:12:38,880 --> 00:12:42,480
or C plus plus or rest you the code gen

283
00:12:42,480 --> 00:12:45,120
can just emit code so the transporter

284
00:12:45,120 --> 00:12:48,360
code gen emits is scheduler to run these

285
00:12:48,360 --> 00:12:51,480
operations on the server side and it

286
00:12:51,480 --> 00:12:54,600
also emits code that helps you to

287
00:12:54,600 --> 00:12:57,180
encrypt and decrypt on the client side

288
00:12:57,180 --> 00:12:59,399
so ignoring the things on the top which

289
00:12:59,399 --> 00:13:02,459
is what the server side scheduler is

290
00:13:02,459 --> 00:13:05,279
being emitted the bottom box shows that

291
00:13:05,279 --> 00:13:06,920
you can now

292
00:13:06,920 --> 00:13:09,720
Define your complicated data structures

293
00:13:09,720 --> 00:13:12,899
and then just say the datastructure dot

294
00:13:12,899 --> 00:13:14,519
encrypt it would do all of the

295
00:13:14,519 --> 00:13:16,560
bookkeeping for you

296
00:13:16,560 --> 00:13:17,360
um

297
00:13:17,360 --> 00:13:20,279
so coming back to the scheduler so the

298
00:13:20,279 --> 00:13:23,459
execution engine emitted schedulers uh

299
00:13:23,459 --> 00:13:25,019
what I showed before was a simple

300
00:13:25,019 --> 00:13:27,720
scheduler it just emits code and the

301
00:13:27,720 --> 00:13:30,420
simple single threaded scheduler

302
00:13:30,420 --> 00:13:31,079
um

303
00:13:31,079 --> 00:13:33,240
doesn't take advantage of parallelism so

304
00:13:33,240 --> 00:13:36,899
in the circuit scheduler uh stage of the

305
00:13:36,899 --> 00:13:40,200
stack you can Define your schedulers

306
00:13:40,200 --> 00:13:41,839
that are actually

307
00:13:41,839 --> 00:13:44,220
more suited to the hardware that you're

308
00:13:44,220 --> 00:13:46,019
using so having a multi-threaded

309
00:13:46,019 --> 00:13:48,720
scheduler on a multi-code CPU

310
00:13:48,720 --> 00:13:51,240
um performs great for CPU but it might

311
00:13:51,240 --> 00:13:54,720
not perform as well for GPU because GPU

312
00:13:54,720 --> 00:13:57,779
performs on a data parallel scheduling

313
00:13:57,779 --> 00:14:01,019
for GPU you need all nodes of same type

314
00:14:01,019 --> 00:14:03,240
to be executed at the same time so you

315
00:14:03,240 --> 00:14:05,760
could Define your CMD scheduler single

316
00:14:05,760 --> 00:14:08,279
instruction multiple data scheduler for

317
00:14:08,279 --> 00:14:11,399
GPU you could Define a single program

318
00:14:11,399 --> 00:14:14,220
multiple data scheduler for TPU

319
00:14:14,220 --> 00:14:17,459
now Effigy programs are huge you might

320
00:14:17,459 --> 00:14:20,100
need to be Distributing them across a

321
00:14:20,100 --> 00:14:24,420
fleet of compute a fleet of devices and

322
00:14:24,420 --> 00:14:25,680
at which point you might need a

323
00:14:25,680 --> 00:14:27,660
distributed scheduler

324
00:14:27,660 --> 00:14:29,399
this is kind of my favorite part of the

325
00:14:29,399 --> 00:14:31,019
Effigy stack because it's a very

326
00:14:31,019 --> 00:14:33,899
interesting interplay between trying to

327
00:14:33,899 --> 00:14:36,899
optimize between distributed systems and

328
00:14:36,899 --> 00:14:38,880
computer architecture

329
00:14:38,880 --> 00:14:41,160
so now we have a scheduler

330
00:14:41,160 --> 00:14:43,139
all the scheduler is doing is making

331
00:14:43,139 --> 00:14:46,620
calls to the FHA Library

332
00:14:46,620 --> 00:14:50,579
which is the core crypto implementation

333
00:14:50,579 --> 00:14:52,860
the core crypto implementation at this

334
00:14:52,860 --> 00:14:56,820
point is an API that exposes data

335
00:14:56,820 --> 00:14:59,160
manipulation instructions which are the

336
00:14:59,160 --> 00:15:00,839
instructions that you perform on your

337
00:15:00,839 --> 00:15:03,600
plain text it also does ciphertext

338
00:15:03,600 --> 00:15:06,060
maintenance operations which is doing

339
00:15:06,060 --> 00:15:07,760
this noise management

340
00:15:07,760 --> 00:15:10,680
and then there's some specification for

341
00:15:10,680 --> 00:15:12,839
support so that's that's all the FHA

342
00:15:12,839 --> 00:15:15,920
Library part is doing

343
00:15:15,959 --> 00:15:18,680
and then comes the more interesting part

344
00:15:18,680 --> 00:15:21,120
uh the which I call the micro

345
00:15:21,120 --> 00:15:24,600
instruction scheduler this is

346
00:15:24,600 --> 00:15:27,600
this is the interplay between the FHA

347
00:15:27,600 --> 00:15:30,360
library and the hardware the physical

348
00:15:30,360 --> 00:15:33,660
Hardware optimizations that you do now

349
00:15:33,660 --> 00:15:35,399
these physical Hardware optimizations

350
00:15:35,399 --> 00:15:37,680
could be going one layer below the

351
00:15:37,680 --> 00:15:39,660
crypto system into the maths layout

352
00:15:39,660 --> 00:15:42,899
where in all of fhe the Baseline

353
00:15:42,899 --> 00:15:44,880
operation is polynomial multiplication

354
00:15:44,880 --> 00:15:48,060
so if you can accelerate your polynomial

355
00:15:48,060 --> 00:15:49,860
multiplication on the hardware it has

356
00:15:49,860 --> 00:15:52,800
massive speed up you can go a level

357
00:15:52,800 --> 00:15:55,260
above and actually accelerate these

358
00:15:55,260 --> 00:15:57,720
crypto Primitives

359
00:15:57,720 --> 00:15:59,339
so the interesting thing in the hardware

360
00:15:59,339 --> 00:16:02,399
world is you measure these crypto

361
00:16:02,399 --> 00:16:06,120
Primitives based on throughput so all

362
00:16:06,120 --> 00:16:08,519
assume 100 parallelism

363
00:16:08,519 --> 00:16:12,540
but programs are not 100 paralyzable how

364
00:16:12,540 --> 00:16:14,820
do you translate these amortized

365
00:16:14,820 --> 00:16:18,660
primitive speed UPS uh to end-to-end

366
00:16:18,660 --> 00:16:20,760
programs

367
00:16:20,760 --> 00:16:22,920
and that's where FFG stock comes into

368
00:16:22,920 --> 00:16:25,560
play it applies the basic principle of

369
00:16:25,560 --> 00:16:28,380
computer science to fhe control the

370
00:16:28,380 --> 00:16:30,180
complexity with

371
00:16:30,180 --> 00:16:32,820
layers of abstraction and make

372
00:16:32,820 --> 00:16:35,699
independent progress

373
00:16:35,699 --> 00:16:37,500
and it allows for experimenting with

374
00:16:37,500 --> 00:16:40,320
variety of optimizers and crypto systems

375
00:16:40,320 --> 00:16:42,959
and Hardware without having to rebuild

376
00:16:42,959 --> 00:16:45,180
other components of the stack from

377
00:16:45,180 --> 00:16:47,339
scratch

378
00:16:47,339 --> 00:16:50,699
so we were able to integrate multiple

379
00:16:50,699 --> 00:16:53,699
optimizers as can be seen in the layer

380
00:16:53,699 --> 00:16:56,399
there and multiple schedulers single

381
00:16:56,399 --> 00:16:59,180
threaded multi-threaded GPU

382
00:16:59,180 --> 00:17:01,920
and multiple crypto systems all of these

383
00:17:01,920 --> 00:17:04,140
crypto Systems Support gate

384
00:17:04,140 --> 00:17:06,599
bootstrapping there's tfhe that we began

385
00:17:06,599 --> 00:17:09,380
with there is benefici from open fhe

386
00:17:09,380 --> 00:17:13,079
tfhe rust from Zama concrete and there's

387
00:17:13,079 --> 00:17:14,640
qfhe

388
00:17:14,640 --> 00:17:17,099
and some of these libraries are

389
00:17:17,099 --> 00:17:19,160
integrated with some of these Hardware

390
00:17:19,160 --> 00:17:23,400
uh CPUs gpus fpga and beloved or not

391
00:17:23,400 --> 00:17:25,199
photonics there's a company called a

392
00:17:25,199 --> 00:17:30,200
palaces which is doing photonics for fhe

393
00:17:30,200 --> 00:17:35,360
and this is what the Fiji stack unlocks

394
00:17:35,360 --> 00:17:40,740
end-to-end metrics this is more of a

395
00:17:40,740 --> 00:17:44,940
toy problem but it's it illustrates the

396
00:17:44,940 --> 00:17:49,140
the power of having stack and

397
00:17:49,140 --> 00:17:51,960
so what I'm trying to show here is there

398
00:17:51,960 --> 00:17:54,419
is bootstrap which is 13 milliseconds

399
00:17:54,419 --> 00:17:57,419
one three milliseconds for cggi t5g

400
00:17:57,419 --> 00:18:00,299
scheme and the circuit size for this was

401
00:18:00,299 --> 00:18:03,179
920 gates in a single threaded model

402
00:18:03,179 --> 00:18:06,960
this took 53 seconds and when you do it

403
00:18:06,960 --> 00:18:08,880
a multi-thread it online 96 core machine

404
00:18:08,880 --> 00:18:10,860
there's already an order of magnitude

405
00:18:10,860 --> 00:18:13,620
speed up here it reduced down to 1.84

406
00:18:13,620 --> 00:18:16,860
seconds and using yosys optimization the

407
00:18:16,860 --> 00:18:19,679
circuit size reduced to half and the

408
00:18:19,679 --> 00:18:22,799
speed is now less than a second

409
00:18:22,799 --> 00:18:25,799
and it translates to one of the DM

410
00:18:25,799 --> 00:18:29,760
schemes in bin fhe as well the single

411
00:18:29,760 --> 00:18:31,679
threaded is much slower the multi-stride

412
00:18:31,679 --> 00:18:34,500
is much faster and with yo says the

413
00:18:34,500 --> 00:18:35,820
speed translates

414
00:18:35,820 --> 00:18:39,000
now there are many new

415
00:18:39,000 --> 00:18:41,039
um crypto libraries where the bootstrap

416
00:18:41,039 --> 00:18:44,100
has been accelerated uh ntfhg RS the

417
00:18:44,100 --> 00:18:47,160
bootstrap speed is 4.5 seconds and there

418
00:18:47,160 --> 00:18:49,679
may be other optimizers there's the

419
00:18:49,679 --> 00:18:51,780
concept of lookup table that a concrete

420
00:18:51,780 --> 00:18:54,660
Library introduces and it would be

421
00:18:54,660 --> 00:18:57,360
interesting to see how scheduling that

422
00:18:57,360 --> 00:19:00,480
would actually increase the speed up

423
00:19:00,480 --> 00:19:04,380
um same goes for GPU and fpga there is

424
00:19:04,380 --> 00:19:06,120
two orders of magnitude speed up in

425
00:19:06,120 --> 00:19:11,100
bootstrap with fpgas and we are in the

426
00:19:11,100 --> 00:19:13,080
process of figuring out the results of

427
00:19:13,080 --> 00:19:16,140
these end-to-end metrics

428
00:19:16,140 --> 00:19:18,000
so

429
00:19:18,000 --> 00:19:20,059
um

430
00:19:20,640 --> 00:19:22,679
oops

431
00:19:22,679 --> 00:19:24,179
all right

432
00:19:24,179 --> 00:19:26,100
so

433
00:19:26,100 --> 00:19:29,220
that is the Boolean world and now to

434
00:19:29,220 --> 00:19:30,780
unpack this

435
00:19:30,780 --> 00:19:33,780
this thing that we assumed has human

436
00:19:33,780 --> 00:19:36,660
input in the domain specific programming

437
00:19:36,660 --> 00:19:39,200
for FHA architectural selection

438
00:19:39,200 --> 00:19:43,080
there needs to there needs to be a lot

439
00:19:43,080 --> 00:19:45,179
more parameter optimization for

440
00:19:45,179 --> 00:19:49,020
arithmetic and we think that multiple

441
00:19:49,020 --> 00:19:51,299
passes between the Optimizer and the

442
00:19:51,299 --> 00:19:53,760
architecture selection module uh would

443
00:19:53,760 --> 00:19:56,280
help with integrating integrating these

444
00:19:56,280 --> 00:19:59,640
new optimizers for arithmetic circuits

445
00:19:59,640 --> 00:20:02,100
and a lot of changes need to happen in

446
00:20:02,100 --> 00:20:05,480
the arithmetic scheduler as well

447
00:20:05,480 --> 00:20:09,900
so this kind of brings puts together the

448
00:20:09,900 --> 00:20:12,960
whole Computing on encrypted data model

449
00:20:12,960 --> 00:20:15,960
so are we having fhe yet

450
00:20:15,960 --> 00:20:17,820
not quite

451
00:20:17,820 --> 00:20:20,400
I didn't talk about

452
00:20:20,400 --> 00:20:23,100
Key Management I didn't talk about trust

453
00:20:23,100 --> 00:20:26,100
model uh in theory Computing on encrypt

454
00:20:26,100 --> 00:20:27,600
data that kind of gives you privacy but

455
00:20:27,600 --> 00:20:30,720
in practice not really

456
00:20:30,720 --> 00:20:32,820
so to talk about how these things fit

457
00:20:32,820 --> 00:20:34,740
together I'm going to use a popular

458
00:20:34,740 --> 00:20:37,380
framework in Psychology called the

459
00:20:37,380 --> 00:20:40,020
Maslow's hierarchy of needs Maslow's

460
00:20:40,020 --> 00:20:42,120
hierarchy of needs uh is a term in

461
00:20:42,120 --> 00:20:44,039
Psychology that talks about stages of

462
00:20:44,039 --> 00:20:45,539
growth in humans

463
00:20:45,539 --> 00:20:48,740
for motivation to Arise at us next stage

464
00:20:48,740 --> 00:20:52,860
each prior stage must be fully satisfied

465
00:20:52,860 --> 00:20:54,840
and the hierarchy of needs is split

466
00:20:54,840 --> 00:20:56,760
between deficiency needs and growth's

467
00:20:56,760 --> 00:20:59,100
needs deficiency needs are for survival

468
00:20:59,100 --> 00:21:01,620
gross needs or for humans to realize

469
00:21:01,620 --> 00:21:04,380
their true potential so this is the

470
00:21:04,380 --> 00:21:07,380
Effigy hierarchy of needs on the very

471
00:21:07,380 --> 00:21:10,740
bottom is level one is Baseline

472
00:21:10,740 --> 00:21:13,320
instruction set architecture

473
00:21:13,320 --> 00:21:15,720
we need to have if you think of Fiji as

474
00:21:15,720 --> 00:21:17,059
a Computing machine

475
00:21:17,059 --> 00:21:18,960
having the basic instruction

476
00:21:18,960 --> 00:21:21,000
architecture which could be bolstered at

477
00:21:21,000 --> 00:21:23,580
a manipulation or ciphertext expansion

478
00:21:23,580 --> 00:21:27,179
and Hardware cost and the Primitive

479
00:21:27,179 --> 00:21:29,280
instruction set and its cost is

480
00:21:29,280 --> 00:21:31,620
important and only then can you think

481
00:21:31,620 --> 00:21:33,360
about developing compilers and

482
00:21:33,360 --> 00:21:35,580
transpilers and once you develop

483
00:21:35,580 --> 00:21:38,159
compilers only then can you think about

484
00:21:38,159 --> 00:21:40,440
uh putting an effigy application

485
00:21:40,440 --> 00:21:41,640
together

486
00:21:41,640 --> 00:21:44,299
only after it becomes easy to develop

487
00:21:44,299 --> 00:21:46,799
programs on encrypted data do we think

488
00:21:46,799 --> 00:21:52,380
about actually deploying fhe for privacy

489
00:21:52,380 --> 00:21:55,799
only after the system and privacy

490
00:21:55,799 --> 00:21:58,020
engineering problems are solved do we

491
00:21:58,020 --> 00:22:00,659
see FHA realizing its true potential in

492
00:22:00,659 --> 00:22:02,100
privacy

493
00:22:02,100 --> 00:22:04,020
so deficiency is the bottom three are

494
00:22:04,020 --> 00:22:06,720
the deficiency needs and a hierarchy is

495
00:22:06,720 --> 00:22:09,539
a more abstract term on the bottomless

496
00:22:09,539 --> 00:22:10,620
layer is

497
00:22:10,620 --> 00:22:12,780
it talks about the needs

498
00:22:12,780 --> 00:22:15,480
um so the bottom most one the

499
00:22:15,480 --> 00:22:17,220
instructions at architecture the needs

500
00:22:17,220 --> 00:22:18,020
are

501
00:22:18,020 --> 00:22:20,820
instructions and the cost in the second

502
00:22:20,820 --> 00:22:23,760
layer we worry about parameter selection

503
00:22:23,760 --> 00:22:26,419
we worry about optimizers cost models

504
00:22:26,419 --> 00:22:29,520
schedulers intermediate representations

505
00:22:29,520 --> 00:22:31,620
on layer 3 is where we think about

506
00:22:31,620 --> 00:22:34,919
development speed debuggability scheme

507
00:22:34,919 --> 00:22:36,600
interoperability even though scheme

508
00:22:36,600 --> 00:22:38,580
interoperability came in level three

509
00:22:38,580 --> 00:22:41,100
actually it's addressed by ciphertext

510
00:22:41,100 --> 00:22:43,740
maintenance operation in level one

511
00:22:43,740 --> 00:22:46,620
um it's a it's a more abstract framework

512
00:22:46,620 --> 00:22:51,120
so we think stack addresses

513
00:22:51,120 --> 00:22:54,720
a lot of these deficiency needs

514
00:22:54,720 --> 00:22:56,760
we hope that fhsr can evolve into

515
00:22:56,760 --> 00:22:58,080
something that addresses these

516
00:22:58,080 --> 00:23:00,120
deficiency needs

517
00:23:00,120 --> 00:23:04,320
so the success here in in the deficiency

518
00:23:04,320 --> 00:23:05,940
needs is

519
00:23:05,940 --> 00:23:09,000
I love cryptographers but I do think

520
00:23:09,000 --> 00:23:10,860
cryptographers are the bottleneck in the

521
00:23:10,860 --> 00:23:13,380
deficiency needs the success here lies

522
00:23:13,380 --> 00:23:16,620
in empowering the users to be able to

523
00:23:16,620 --> 00:23:18,659
develop their own programs in encrypted

524
00:23:18,659 --> 00:23:21,059
data and make these trade-offs

525
00:23:21,059 --> 00:23:23,460
themselves but the cryptographer is

526
00:23:23,460 --> 00:23:26,159
heavily heavily needed in layer 4 where

527
00:23:26,159 --> 00:23:28,200
you do actual protocol development for

528
00:23:28,200 --> 00:23:30,059
privacy

529
00:23:30,059 --> 00:23:32,520
and here is where threat model privacy

530
00:23:32,520 --> 00:23:34,559
leaks Network bandwidth and something

531
00:23:34,559 --> 00:23:36,900
that we don't think about observability

532
00:23:36,900 --> 00:23:38,940
as you think about deploying a large

533
00:23:38,940 --> 00:23:41,100
scale application end-to-end encrypted

534
00:23:41,100 --> 00:23:42,600
uh

535
00:23:42,600 --> 00:23:44,940
how would you log any metrics how would

536
00:23:44,940 --> 00:23:47,700
you know if something goes wrong in a

537
00:23:47,700 --> 00:23:49,260
large scale system

538
00:23:49,260 --> 00:23:51,539
so layer four

539
00:23:51,539 --> 00:23:54,720
the firstly Key Management if it's one

540
00:23:54,720 --> 00:23:56,520
user with a server then it's a single

541
00:23:56,520 --> 00:23:59,039
key if it's an email setting there's a

542
00:23:59,039 --> 00:24:01,140
public private key setting if there's a

543
00:24:01,140 --> 00:24:02,760
multi-party competition there might be a

544
00:24:02,760 --> 00:24:04,740
multi-key setting that's needed and as

545
00:24:04,740 --> 00:24:06,240
we have seen end-to-end encryption on

546
00:24:06,240 --> 00:24:07,860
with cloud storage is really hard with

547
00:24:07,860 --> 00:24:10,380
key management and backing up keys

548
00:24:10,380 --> 00:24:12,600
secondly the trust model and protocol

549
00:24:12,600 --> 00:24:16,679
development is but a puzzle piece in

550
00:24:16,679 --> 00:24:19,080
the uh set of privacy enhancing

551
00:24:19,080 --> 00:24:22,679
Technologies so far I have assumed that

552
00:24:22,679 --> 00:24:24,240
there is

553
00:24:24,240 --> 00:24:27,179
an honest but curious model what if the

554
00:24:27,179 --> 00:24:29,220
server is adversarial you might need

555
00:24:29,220 --> 00:24:31,620
zero knowledge proofs what if the client

556
00:24:31,620 --> 00:24:33,840
is adversarial then trying to learn

557
00:24:33,840 --> 00:24:35,940
something about the model you might need

558
00:24:35,940 --> 00:24:37,760
a differential privacy

559
00:24:37,760 --> 00:24:41,220
and it's very interesting how you can

560
00:24:41,220 --> 00:24:45,240
leak data size to the server it's kind

561
00:24:45,240 --> 00:24:46,500
of understood in traditional

562
00:24:46,500 --> 00:24:49,260
cryptography but it has a more adverse

563
00:24:49,260 --> 00:24:52,460
effect on performance in the fhu space

564
00:24:52,460 --> 00:24:57,059
so if I'm trying to do translation how

565
00:24:57,059 --> 00:24:59,760
long is my output string if it's always

566
00:24:59,760 --> 00:25:02,700
500 characters or 1000 characters or

567
00:25:02,700 --> 00:25:04,679
thousand words then you're always

568
00:25:04,679 --> 00:25:07,500
generating 1000 Words which is bad for

569
00:25:07,500 --> 00:25:09,780
performance so you may need some form of

570
00:25:09,780 --> 00:25:12,840
probabilistic sizing so you still hide

571
00:25:12,840 --> 00:25:15,539
the the data size but also get the

572
00:25:15,539 --> 00:25:16,799
performance

573
00:25:16,799 --> 00:25:19,260
and the open problem ciphertext

574
00:25:19,260 --> 00:25:21,659
expansion there is packing and hybrid

575
00:25:21,659 --> 00:25:23,640
homomorphic encryption which might help

576
00:25:23,640 --> 00:25:27,059
with a ciphertext expansion but it's not

577
00:25:27,059 --> 00:25:29,820
a full solve problem yet

578
00:25:29,820 --> 00:25:33,600
okay so on the top of the pyramid is FHA

579
00:25:33,600 --> 00:25:36,120
actualization what does it mean

580
00:25:36,120 --> 00:25:37,559
um in a large company at the beginning

581
00:25:37,559 --> 00:25:39,900
of quarter the beginning of the year the

582
00:25:39,900 --> 00:25:41,700
team comes together and the thing about

583
00:25:41,700 --> 00:25:43,440
the product having some latency

584
00:25:43,440 --> 00:25:45,480
tolerance some Network bandwidth

585
00:25:45,480 --> 00:25:47,760
tolerance some privacy requirements some

586
00:25:47,760 --> 00:25:49,860
budget food hardware and product

587
00:25:49,860 --> 00:25:51,840
timelines

588
00:25:51,840 --> 00:25:53,760
and as we talked to a lot of products

589
00:25:53,760 --> 00:25:55,559
there are many latency tolerant

590
00:25:55,559 --> 00:25:58,620
applications available out there but the

591
00:25:58,620 --> 00:26:01,260
issue right now is the time required to

592
00:26:01,260 --> 00:26:04,620
develop fhe and if it takes a few years

593
00:26:04,620 --> 00:26:06,600
to launch a product

594
00:26:06,600 --> 00:26:08,940
product teams tend to look for

595
00:26:08,940 --> 00:26:11,220
alternative options less private options

596
00:26:11,220 --> 00:26:14,279
probably not what we want while speed up

597
00:26:14,279 --> 00:26:16,640
numbers for Primitives are

598
00:26:16,640 --> 00:26:19,260
great what is what would be more useful

599
00:26:19,260 --> 00:26:22,799
is these end-to-end app benchmarks with

600
00:26:22,799 --> 00:26:26,600
end-to-end application perspective

601
00:26:26,600 --> 00:26:31,140
so we are somewhat at level three

602
00:26:31,140 --> 00:26:31,919
um

603
00:26:31,919 --> 00:26:34,039
as you can see Effigy is now an

604
00:26:34,039 --> 00:26:36,120
interdisciplinary field between

605
00:26:36,120 --> 00:26:38,220
theoretical cryptography compilers

606
00:26:38,220 --> 00:26:40,919
Hardware optimizations

607
00:26:40,919 --> 00:26:43,860
um I hope the FSU hierarchy of needs and

608
00:26:43,860 --> 00:26:47,100
the stack serves as a framework to

609
00:26:47,100 --> 00:26:50,520
organize research and accelerate fhe

610
00:26:50,520 --> 00:26:52,760
parallely

611
00:26:52,760 --> 00:26:55,980
and as Pascal pointed out a few days ago

612
00:26:55,980 --> 00:26:59,820
FSG is like where deep learning was 10

613
00:26:59,820 --> 00:27:01,679
years ago reaching the Realms of reality

614
00:27:01,679 --> 00:27:04,200
but lacks a lot of tools and developing

615
00:27:04,200 --> 00:27:06,240
those seamless tools and empowering the

616
00:27:06,240 --> 00:27:07,980
youth developer

617
00:27:07,980 --> 00:27:11,760
um is what we need and

618
00:27:11,760 --> 00:27:14,640
that's our repo where we are working

619
00:27:14,640 --> 00:27:18,059
towards bringing fhe to practicality and

620
00:27:18,059 --> 00:27:20,220
if you have thoughts questions we have a

621
00:27:20,220 --> 00:27:22,740
discussion group and

622
00:27:22,740 --> 00:27:25,140
please reach out

623
00:27:25,140 --> 00:27:27,000
um that's our group email and that's my

624
00:27:27,000 --> 00:27:29,580
email as well thank you for listening

625
00:27:29,580 --> 00:27:35,640
[Applause]

626
00:27:35,640 --> 00:27:38,340
all right thank you yeah that's that's

627
00:27:38,340 --> 00:27:40,440
amazing it's like we're Reinventing the

628
00:27:40,440 --> 00:27:42,360
computer inside of cryptographic

629
00:27:42,360 --> 00:27:45,960
computer so um folks if there is if

630
00:27:45,960 --> 00:27:47,940
there are any questions I'm going to

631
00:27:47,940 --> 00:27:49,559
take some questions from online but

632
00:27:49,559 --> 00:27:51,840
please come up and

633
00:27:51,840 --> 00:27:52,559
um

634
00:27:52,559 --> 00:27:54,539
come to the front of the stage don't be

635
00:27:54,539 --> 00:27:56,880
afraid and uh in the meantime the folks

636
00:27:56,880 --> 00:27:58,380
in the back there's a lot of seats up

637
00:27:58,380 --> 00:28:00,419
front if you want to come up and take a

638
00:28:00,419 --> 00:28:01,559
seat so

639
00:28:01,559 --> 00:28:03,059
please

640
00:28:03,059 --> 00:28:06,000
uh thank you so much for like I don't

641
00:28:06,000 --> 00:28:07,440
know the way you organize this

642
00:28:07,440 --> 00:28:09,720
information it makes it feel like we

643
00:28:09,720 --> 00:28:12,960
have a goal with fhe and

644
00:28:12,960 --> 00:28:14,580
um it's yeah it's just really cool to

645
00:28:14,580 --> 00:28:17,220
see it like presented this way

646
00:28:17,220 --> 00:28:17,940
um

647
00:28:17,940 --> 00:28:20,820
I uh I don't know this field very well

648
00:28:20,820 --> 00:28:22,679
but I'm curious if you have any thoughts

649
00:28:22,679 --> 00:28:25,919
on like the momentum of theory in the

650
00:28:25,919 --> 00:28:28,140
field and how this like impacts you at

651
00:28:28,140 --> 00:28:30,240
lower layers so if the math is changing

652
00:28:30,240 --> 00:28:32,340
constantly underneath you

653
00:28:32,340 --> 00:28:34,679
how does that impact like higher level

654
00:28:34,679 --> 00:28:37,799
considerations do you plan to like keep

655
00:28:37,799 --> 00:28:39,960
some agile

656
00:28:39,960 --> 00:28:43,020
um like in your stack or um or are you

657
00:28:43,020 --> 00:28:44,460
just gonna pick some math and go with

658
00:28:44,460 --> 00:28:45,720
that for a while like what's your

659
00:28:45,720 --> 00:28:49,380
thinking that's a great question so

660
00:28:49,380 --> 00:28:52,080
yes we want to keep the stack agile uh

661
00:28:52,080 --> 00:28:54,240
hopefully the fhg library and the lower

662
00:28:54,240 --> 00:28:56,279
layers low at it will kind of take care

663
00:28:56,279 --> 00:28:58,559
of like even if math changes but to be

664
00:28:58,559 --> 00:29:01,919
honest the theory has not changed for

665
00:29:01,919 --> 00:29:05,580
years now the four schemes still remain

666
00:29:05,580 --> 00:29:09,779
the same since years and it's more of

667
00:29:09,779 --> 00:29:12,000
compiler optimizations and Hardware

668
00:29:12,000 --> 00:29:14,880
optimizations that are needed at this

669
00:29:14,880 --> 00:29:16,740
point in time cool thanks thank you for

670
00:29:16,740 --> 00:29:19,039
the question

671
00:29:20,059 --> 00:29:22,980
yeah so I guess on that on that note one

672
00:29:22,980 --> 00:29:24,360
of the things that can change is also

673
00:29:24,360 --> 00:29:26,039
the security model or the correctness

674
00:29:26,039 --> 00:29:28,260
model the underlying scheme and right

675
00:29:28,260 --> 00:29:30,240
now I'm thinking about approximate FHA

676
00:29:30,240 --> 00:29:33,059
schemes and I'm curious what role you

677
00:29:33,059 --> 00:29:35,399
think in general approximate computation

678
00:29:35,399 --> 00:29:38,640
plays in this the stack and uh more

679
00:29:38,640 --> 00:29:41,100
open-endedly future alternative Notions

680
00:29:41,100 --> 00:29:43,020
of correctness

681
00:29:43,020 --> 00:29:47,159
that's a good question so I guess just

682
00:29:47,159 --> 00:29:49,320
to place it in the head in the FSU

683
00:29:49,320 --> 00:29:50,700
schemes that are integer schemes and

684
00:29:50,700 --> 00:29:52,140
floating points schemes for floating

685
00:29:52,140 --> 00:29:53,460
Point schemes you would have to do

686
00:29:53,460 --> 00:29:56,520
approximations but integer schemes even

687
00:29:56,520 --> 00:29:58,140
for machine learning models you might

688
00:29:58,140 --> 00:30:00,600
have to do some form of quantization so

689
00:30:00,600 --> 00:30:02,580
there is always this tension between

690
00:30:02,580 --> 00:30:06,120
performance precision and privacy in fhc

691
00:30:06,120 --> 00:30:08,419
how do I think about this

692
00:30:08,419 --> 00:30:11,100
they there's no alternative first of all

693
00:30:11,100 --> 00:30:14,340
for approximation so it's if you want

694
00:30:14,340 --> 00:30:17,100
better Precision you just it's a

695
00:30:17,100 --> 00:30:19,080
trade-off that a product needs to make

696
00:30:19,080 --> 00:30:21,360
at this point in time

697
00:30:21,360 --> 00:30:22,500
um

698
00:30:22,500 --> 00:30:24,960
in machine learning World there is the

699
00:30:24,960 --> 00:30:26,640
alternative is you'd retrain your model

700
00:30:26,640 --> 00:30:29,220
and some and this also is needed but at

701
00:30:29,220 --> 00:30:31,559
the same time there are machine learning

702
00:30:31,559 --> 00:30:34,440
scientists spend a lot of time trying to

703
00:30:34,440 --> 00:30:35,760
train their model and asking them to

704
00:30:35,760 --> 00:30:38,039
retrain it is like no I'm not gonna do

705
00:30:38,039 --> 00:30:41,340
it so we might still like that's a

706
00:30:41,340 --> 00:30:45,240
trade-off that products need to make I

707
00:30:45,240 --> 00:30:47,159
do maybe there we will reach a point

708
00:30:47,159 --> 00:30:49,740
where data becomes so sensitive that

709
00:30:49,740 --> 00:30:52,740
retraining is okay but yeah only time

710
00:30:52,740 --> 00:30:54,360
will tell I guess

711
00:30:54,360 --> 00:30:56,940
thanks okay we have time for one last

712
00:30:56,940 --> 00:30:59,480
quick question

713
00:30:59,520 --> 00:31:01,200
um So currently like zero knowledge

714
00:31:01,200 --> 00:31:04,980
proof systems uh NPC and then fhe are

715
00:31:04,980 --> 00:31:07,500
all developing kind of similar

716
00:31:07,500 --> 00:31:10,260
um systems like this basically a IRS

717
00:31:10,260 --> 00:31:13,159
optimizers compilers execution players

718
00:31:13,159 --> 00:31:15,480
uh along entirely different tracks so

719
00:31:15,480 --> 00:31:17,279
they're not combined at all I guess I'm

720
00:31:17,279 --> 00:31:18,899
curious is there any opportunity to

721
00:31:18,899 --> 00:31:20,520
combine

722
00:31:20,520 --> 00:31:23,039
um this infrastructure like I like cross

723
00:31:23,039 --> 00:31:26,100
like IRS that work across NPC and and

724
00:31:26,100 --> 00:31:29,220
fhe and zkps or maybe like math layers

725
00:31:29,220 --> 00:31:30,539
Etc et cetera is there any opportunity

726
00:31:30,539 --> 00:31:34,620
for that I'm pretty sure there will be I

727
00:31:34,620 --> 00:31:36,899
don't know what they are right now but

728
00:31:36,899 --> 00:31:39,179
they are somewhat different I guess smpc

729
00:31:39,179 --> 00:31:41,340
kind of you keep sending these one-time

730
00:31:41,340 --> 00:31:43,260
pads to do your competition across it's

731
00:31:43,260 --> 00:31:45,600
more about communication

732
00:31:45,600 --> 00:31:47,760
um but if you see the FHA stack a lot of

733
00:31:47,760 --> 00:31:50,760
the layers are unaware of crypto so

734
00:31:50,760 --> 00:31:52,620
maybe we can like develop these

735
00:31:52,620 --> 00:31:54,000
intermediate representations with our

736
00:31:54,000 --> 00:31:56,700
cost models and our operations such that

737
00:31:56,700 --> 00:31:58,799
you can still reuse these optimizers

738
00:31:58,799 --> 00:32:00,179
across

739
00:32:00,179 --> 00:32:02,640
um that would be a very interesting

740
00:32:02,640 --> 00:32:04,679
um crossover to see

741
00:32:04,679 --> 00:32:06,659
thank you

742
00:32:06,659 --> 00:32:09,419
all right everyone please thanks truthy

743
00:32:09,419 --> 00:32:10,240
again

744
00:32:10,240 --> 00:32:15,640
[Music]

745
00:32:19,980 --> 00:32:21,600
all right

746
00:32:21,600 --> 00:32:24,539
the next speaker is and I'm going to

747
00:32:24,539 --> 00:32:26,100
butcher this I'm sorry Antigone

748
00:32:26,100 --> 00:32:28,440
polychroniado

749
00:32:28,440 --> 00:32:30,419
is that anywhere close to right okay

750
00:32:30,419 --> 00:32:32,700
okay thank you uh

751
00:32:32,700 --> 00:32:35,159
um this next talk is going to be on a

752
00:32:35,159 --> 00:32:37,740
project called Prime match so please

753
00:32:37,740 --> 00:32:40,080
thank uh the speaker

754
00:32:40,080 --> 00:32:41,640
um Antigone

755
00:32:41,640 --> 00:32:44,419
thank you

756
00:32:45,380 --> 00:32:45,880
[Music]

757
00:32:45,880 --> 00:32:48,360
[Applause]

758
00:32:48,360 --> 00:32:53,418
okay uh I have to stay closer

759
00:32:53,640 --> 00:32:55,919
so I'm gonna talk about primemales which

760
00:32:55,919 --> 00:32:57,600
is essentially privacy preserving

761
00:32:57,600 --> 00:32:59,880
auction system which is running live in

762
00:32:59,880 --> 00:33:01,620
production and JP Morgan

763
00:33:01,620 --> 00:33:03,779
and primate started as an ambitious

764
00:33:03,779 --> 00:33:05,700
project because it's the first bank that

765
00:33:05,700 --> 00:33:08,279
runs as a service and it's the result of

766
00:33:08,279 --> 00:33:10,620
three years of active work to put

767
00:33:10,620 --> 00:33:13,080
successful in production

768
00:33:13,080 --> 00:33:15,120
and in this talk I'm gonna talk first

769
00:33:15,120 --> 00:33:16,500
about the use case

770
00:33:16,500 --> 00:33:18,779
and then our contributions and since

771
00:33:18,779 --> 00:33:20,820
we're in real world crypto I'm gonna

772
00:33:20,820 --> 00:33:22,919
focus more on the production uh

773
00:33:22,919 --> 00:33:25,200
challenges to put such a real world

774
00:33:25,200 --> 00:33:27,240
system in production I will only have

775
00:33:27,240 --> 00:33:30,720
time to talk uh like superficially about

776
00:33:30,720 --> 00:33:33,240
our cryptographic Solutions our

777
00:33:33,240 --> 00:33:35,940
techniques deserve another talk and at

778
00:33:35,940 --> 00:33:37,320
the end I'm gonna actually show you a

779
00:33:37,320 --> 00:33:39,480
demo

780
00:33:39,480 --> 00:33:42,600
so what is the use case the use case is

781
00:33:42,600 --> 00:33:44,700
uh inventory matching

782
00:33:44,700 --> 00:33:47,700
and inventory matching is used by Banks

783
00:33:47,700 --> 00:33:49,860
to actually locate matches between

784
00:33:49,860 --> 00:33:52,019
buyers and sellers

785
00:33:52,019 --> 00:33:54,360
and if successful then the banks can

786
00:33:54,360 --> 00:33:57,080
offer these trades at discounted trades

787
00:33:57,080 --> 00:33:59,940
avoiding additional costs and price

788
00:33:59,940 --> 00:34:02,100
volatility if you were to execute those

789
00:34:02,100 --> 00:34:04,500
trades on the public open market

790
00:34:04,500 --> 00:34:08,300
okay and here is the process

791
00:34:08,300 --> 00:34:12,960
so um the banks they they daily publish

792
00:34:12,960 --> 00:34:14,280
their inventory

793
00:34:14,280 --> 00:34:15,659
to

794
00:34:15,659 --> 00:34:18,599
um to clients and clients here are hedge

795
00:34:18,599 --> 00:34:20,280
funds which are companies

796
00:34:20,280 --> 00:34:23,219
and typically this use case has 60

797
00:34:23,219 --> 00:34:25,879
clients

798
00:34:27,619 --> 00:34:29,820
thank you

799
00:34:29,820 --> 00:34:32,639
and what does this inventory include the

800
00:34:32,639 --> 00:34:35,520
inventory includes a list of symbols

801
00:34:35,520 --> 00:34:38,339
for stocks like apple Microsoft Google

802
00:34:38,339 --> 00:34:42,179
then we have the site whether uh we want

803
00:34:42,179 --> 00:34:43,679
to go longer short so for this talk we

804
00:34:43,679 --> 00:34:46,619
can assume that long is for um for buy

805
00:34:46,619 --> 00:34:48,599
and sources for sale and then we have

806
00:34:48,599 --> 00:34:49,980
the number of shares that you want to

807
00:34:49,980 --> 00:34:52,139
buy or sell okay the volume

808
00:34:52,139 --> 00:34:54,239
uh and as I said earlier the bank

809
00:34:54,239 --> 00:34:56,099
publishes this inventory every day to

810
00:34:56,099 --> 00:34:57,599
the clients the clients look at the list

811
00:34:57,599 --> 00:34:59,280
and if they want to match something they

812
00:34:59,280 --> 00:35:01,920
come back to the bank they mention what

813
00:35:01,920 --> 00:35:03,240
they want to match and then we execute

814
00:35:03,240 --> 00:35:04,740
the trade

815
00:35:04,740 --> 00:35:07,440
so what does this inventory include uh

816
00:35:07,440 --> 00:35:10,140
the inventory includes uh the banks past

817
00:35:10,140 --> 00:35:13,619
transactions with clients and this past

818
00:35:13,619 --> 00:35:16,020
transactions can actually reveal some

819
00:35:16,020 --> 00:35:18,240
information about future transactions so

820
00:35:18,240 --> 00:35:20,280
let me give you an example let's say

821
00:35:20,280 --> 00:35:23,940
yesterday we bought from climb a a large

822
00:35:23,940 --> 00:35:26,099
number of shares today we're gonna

823
00:35:26,099 --> 00:35:28,859
actually add this to our inventory

824
00:35:28,859 --> 00:35:30,599
uh

825
00:35:30,599 --> 00:35:33,780
uh doing this action may be uh will not

826
00:35:33,780 --> 00:35:35,480
make client a feel very comfortable

827
00:35:35,480 --> 00:35:38,160
seeing this added to actually the public

828
00:35:38,160 --> 00:35:39,720
inventory

829
00:35:39,720 --> 00:35:41,420
uh since it can link information

830
00:35:41,420 --> 00:35:43,320
although the inventory is actually

831
00:35:43,320 --> 00:35:45,240
anonymized it's aggregated but there's

832
00:35:45,240 --> 00:35:47,960
still this leakage and some clients

833
00:35:47,960 --> 00:35:50,940
indeed they ask to not add the the

834
00:35:50,940 --> 00:35:52,320
trades that we do with them in this

835
00:35:52,320 --> 00:35:54,420
inventory list

836
00:35:54,420 --> 00:35:56,460
okay this leads me to

837
00:35:56,460 --> 00:35:58,560
um mention what are the current problems

838
00:35:58,560 --> 00:36:00,480
with this process so the current

839
00:36:00,480 --> 00:36:03,240
problems are that clients are asking to

840
00:36:03,240 --> 00:36:04,740
remove these transactions from the

841
00:36:04,740 --> 00:36:07,320
inventory so we make a reduced inventory

842
00:36:07,320 --> 00:36:10,380
available okay as I had here earlier so

843
00:36:10,380 --> 00:36:12,000
we are not publishing our full inventory

844
00:36:12,000 --> 00:36:15,180
we have to publish a reduced inventory

845
00:36:15,180 --> 00:36:18,240
and because of that the discounted

846
00:36:18,240 --> 00:36:20,640
prices will not be the same

847
00:36:20,640 --> 00:36:23,900
what am I doing

848
00:36:24,540 --> 00:36:28,079
okay that's no problem number one and

849
00:36:28,079 --> 00:36:30,300
the client has this dilemma like shall I

850
00:36:30,300 --> 00:36:31,800
ask to include my past transactions in

851
00:36:31,800 --> 00:36:33,200
the inventor and get discounted prices

852
00:36:33,200 --> 00:36:35,099
or like

853
00:36:35,099 --> 00:36:38,640
um pay like with different prices and

854
00:36:38,640 --> 00:36:40,680
then the other big disadvantage from the

855
00:36:40,680 --> 00:36:43,320
bank side is that uh we are revealing

856
00:36:43,320 --> 00:36:45,000
our inventor okay so that's that's a big

857
00:36:45,000 --> 00:36:46,440
leakage

858
00:36:46,440 --> 00:36:49,500
and through all throughout this process

859
00:36:49,500 --> 00:36:51,599
I was

860
00:36:51,599 --> 00:36:53,280
I was saying that the client doesn't

861
00:36:53,280 --> 00:36:54,839
submit anything okay so we don't know

862
00:36:54,839 --> 00:36:57,060
what the client wants to do they just

863
00:36:57,060 --> 00:36:58,500
see the list and then they can decide so

864
00:36:58,500 --> 00:37:00,780
we get no information from the client

865
00:37:00,780 --> 00:37:03,180
so how we can solve these problems and

866
00:37:03,180 --> 00:37:04,859
what is the ideal solution for these

867
00:37:04,859 --> 00:37:06,900
problems so ideally we would like the

868
00:37:06,900 --> 00:37:08,640
client to send us what they want to do

869
00:37:08,640 --> 00:37:10,680
okay so let's say here I have an example

870
00:37:10,680 --> 00:37:13,380
of an inventory for the client

871
00:37:13,380 --> 00:37:16,320
there's no pointed here right

872
00:37:16,320 --> 00:37:19,560
uh so if the client submits his

873
00:37:19,560 --> 00:37:22,320
intentions encrypted then we can compute

874
00:37:22,320 --> 00:37:24,599
on this encrypted data and try to find

875
00:37:24,599 --> 00:37:26,220
matches with the with the bank's

876
00:37:26,220 --> 00:37:28,020
inventory so here for example you can

877
00:37:28,020 --> 00:37:31,020
see uh for the example that I have for

878
00:37:31,020 --> 00:37:32,760
Apple so the client wants to actually

879
00:37:32,760 --> 00:37:36,119
sell 100 shares of apple and the bank

880
00:37:36,119 --> 00:37:38,160
actually wants to buy 800 shares of

881
00:37:38,160 --> 00:37:39,180
Apple

882
00:37:39,180 --> 00:37:41,700
uh so after we compute the match on this

883
00:37:41,700 --> 00:37:43,380
encrypted data the answer is that we can

884
00:37:43,380 --> 00:37:45,359
have a matter of 100 shares so you can

885
00:37:45,359 --> 00:37:47,880
see that we can subtract the values from

886
00:37:47,880 --> 00:37:49,740
the inventor at the end and how we're

887
00:37:49,740 --> 00:37:51,599
going to achieve that solution so we're

888
00:37:51,599 --> 00:37:52,680
going to use secure multiplier

889
00:37:52,680 --> 00:37:54,240
computation

890
00:37:54,240 --> 00:37:55,680
I mean I'm sure that many of you are

891
00:37:55,680 --> 00:37:57,060
familiar with it so I'm not gonna stay

892
00:37:57,060 --> 00:37:59,160
on this slide just to say that uh

893
00:37:59,160 --> 00:38:00,900
singular multipart computation allows us

894
00:38:00,900 --> 00:38:02,820
to compute on private data without

895
00:38:02,820 --> 00:38:04,619
revealing any information about the

896
00:38:04,619 --> 00:38:06,960
private data apart from the output

897
00:38:06,960 --> 00:38:08,579
and this is what we're going to use here

898
00:38:08,579 --> 00:38:12,119
and the main ingredient that we need to

899
00:38:12,119 --> 00:38:14,940
compute in a private way is basically

900
00:38:14,940 --> 00:38:16,980
secure comparison okay so back to this

901
00:38:16,980 --> 00:38:19,020
example the main thing that we have to

902
00:38:19,020 --> 00:38:20,760
calculate is the minimum between the

903
00:38:20,760 --> 00:38:23,040
volumes of the two clients okay we want

904
00:38:23,040 --> 00:38:25,200
to calculate the minimum between 100 and

905
00:38:25,200 --> 00:38:28,440
800. and just to mention that we also

906
00:38:28,440 --> 00:38:31,500
hide uh the symbol and the side

907
00:38:31,500 --> 00:38:35,579
and how we do that is that in the US the

908
00:38:35,579 --> 00:38:37,140
number of symbols for this use case is

909
00:38:37,140 --> 00:38:39,839
5000 so the client submits a list for

910
00:38:39,839 --> 00:38:41,940
all of these 5000 symbols and if they

911
00:38:41,940 --> 00:38:43,200
don't want to actually execute on them

912
00:38:43,200 --> 00:38:45,119
they just put zeros okay so this is how

913
00:38:45,119 --> 00:38:47,520
we maintain privacy of the symbols and

914
00:38:47,520 --> 00:38:49,440
the side for the client so really the

915
00:38:49,440 --> 00:38:51,000
bottom line is that we need to have a

916
00:38:51,000 --> 00:38:53,400
secure comparison protocol for the

917
00:38:53,400 --> 00:38:56,119
quantities in the inventory

918
00:38:56,119 --> 00:38:59,160
okay so we have two variants we have the

919
00:38:59,160 --> 00:39:00,660
two-party version the client to bank

920
00:39:00,660 --> 00:39:03,359
matching where the clients come

921
00:39:03,359 --> 00:39:04,740
and this would mean they're encrypted

922
00:39:04,740 --> 00:39:06,000
the inventory and then we try to find

923
00:39:06,000 --> 00:39:09,000
matches between the bank and the client

924
00:39:09,000 --> 00:39:12,960
okay and the benefit here is that now we

925
00:39:12,960 --> 00:39:15,540
can actually expose the client to the

926
00:39:15,540 --> 00:39:17,579
full inventory of the bank without

927
00:39:17,579 --> 00:39:19,079
actually exposing the inventory because

928
00:39:19,079 --> 00:39:21,900
we're encrypting everything and there's

929
00:39:21,900 --> 00:39:23,760
no leakage and only if there's the match

930
00:39:23,760 --> 00:39:26,940
we reveal the information and then we

931
00:39:26,940 --> 00:39:28,859
know what is the matchup it goes public

932
00:39:28,859 --> 00:39:31,859
so you know what was the match okay

933
00:39:31,859 --> 00:39:33,660
and another thing so can we do some

934
00:39:33,660 --> 00:39:35,220
something even more exciting so we can

935
00:39:35,220 --> 00:39:37,980
also do the following thing uh I have an

936
00:39:37,980 --> 00:39:40,079
example here so let's say two clients

937
00:39:40,079 --> 00:39:41,579
come too much with the inventory of the

938
00:39:41,579 --> 00:39:43,740
bank but we don't have the inventory

939
00:39:43,740 --> 00:39:46,260
that the clients are asking okay so here

940
00:39:46,260 --> 00:39:48,180
for example we have zero stairs of Apple

941
00:39:48,180 --> 00:39:50,400
but what we can do we can actually match

942
00:39:50,400 --> 00:39:51,900
the clients together

943
00:39:51,900 --> 00:39:53,700
so we can also offer this client to

944
00:39:53,700 --> 00:39:55,619
client matching where we can match

945
00:39:55,619 --> 00:39:57,480
clients together and in that case we

946
00:39:57,480 --> 00:39:58,920
significantly increase the inventory

947
00:39:58,920 --> 00:40:00,660
that we have available in this system so

948
00:40:00,660 --> 00:40:02,579
think of it as creating like

949
00:40:02,579 --> 00:40:04,800
a market right

950
00:40:04,800 --> 00:40:06,839
and again I will repeat that there's no

951
00:40:06,839 --> 00:40:09,300
liquids here apart from the liquids of

952
00:40:09,300 --> 00:40:12,540
finding the matches and executing them

953
00:40:12,540 --> 00:40:14,820
okay so I had the example here so we can

954
00:40:14,820 --> 00:40:16,320
have a match of 100 between these two

955
00:40:16,320 --> 00:40:18,240
clients

956
00:40:18,240 --> 00:40:19,560
okay so for our cryptographic

957
00:40:19,560 --> 00:40:21,960
contribution so we have two parties a

958
00:40:21,960 --> 00:40:23,460
good comparison protocol where we have

959
00:40:23,460 --> 00:40:26,220
the client and the bank have inventory

960
00:40:26,220 --> 00:40:28,140
then we have the other case where the

961
00:40:28,140 --> 00:40:30,540
bank does not give as input than

962
00:40:30,540 --> 00:40:31,920
inventory and we try to match the

963
00:40:31,920 --> 00:40:34,680
clients together okay

964
00:40:34,680 --> 00:40:37,320
and the main cryptographic novelty that

965
00:40:37,320 --> 00:40:39,660
we have here is that we have a secure

966
00:40:39,660 --> 00:40:41,339
comparison protocol which is actually

967
00:40:41,339 --> 00:40:43,020
linear in the sense that we only need

968
00:40:43,020 --> 00:40:44,359
linear operations

969
00:40:44,359 --> 00:40:46,800
uh and that means that we can actually

970
00:40:46,800 --> 00:40:48,720
calculate locally because operations are

971
00:40:48,720 --> 00:40:49,740
linear

972
00:40:49,740 --> 00:40:52,920
and we only have two rounds

973
00:40:52,920 --> 00:40:54,660
for this protocol and it's important

974
00:40:54,660 --> 00:40:56,579
here because we you don't want to have a

975
00:40:56,579 --> 00:40:58,680
lot of runs back and forth improving the

976
00:40:58,680 --> 00:41:01,200
previous Works which require non-linear

977
00:41:01,200 --> 00:41:03,180
operations so then they are more

978
00:41:03,180 --> 00:41:06,000
expensive and also they had a more

979
00:41:06,000 --> 00:41:08,660
number of rounds

980
00:41:09,240 --> 00:41:11,760
so let me go back to uh the challenges

981
00:41:11,760 --> 00:41:13,380
now

982
00:41:13,380 --> 00:41:15,540
so that there were many challenges so I

983
00:41:15,540 --> 00:41:18,839
tried uh to give you one big advantage

984
00:41:18,839 --> 00:41:21,240
and one big disadvantage of to try to

985
00:41:21,240 --> 00:41:23,520
put such a thing in production so back

986
00:41:23,520 --> 00:41:26,160
in 2019 so that's when I also joined the

987
00:41:26,160 --> 00:41:29,099
firm so we are cryptographers we do

988
00:41:29,099 --> 00:41:30,839
security mode computation so we wanted

989
00:41:30,839 --> 00:41:31,800
to see

990
00:41:31,800 --> 00:41:34,020
if like the bank wants to put in

991
00:41:34,020 --> 00:41:36,420
production such auctions okay

992
00:41:36,420 --> 00:41:40,020
so the big disadvantage okay

993
00:41:40,020 --> 00:41:41,880
is that there was no other financial

994
00:41:41,880 --> 00:41:44,099
institution using security computation

995
00:41:44,099 --> 00:41:46,260
so you go and talk to them show me an

996
00:41:46,260 --> 00:41:47,460
example

997
00:41:47,460 --> 00:41:50,400
there's no example so that was a very

998
00:41:50,400 --> 00:41:53,579
big barrier at the beginning uh and

999
00:41:53,579 --> 00:41:54,839
again there were more challenges I'm

1000
00:41:54,839 --> 00:41:56,640
just highlighting here the important

1001
00:41:56,640 --> 00:41:59,220
ones however the bank like they like

1002
00:41:59,220 --> 00:42:01,619
Innovations so they they listen so there

1003
00:42:01,619 --> 00:42:03,119
was a long process

1004
00:42:03,119 --> 00:42:05,640
and um so that was the biggest

1005
00:42:05,640 --> 00:42:08,220
disadvantage so what is the advantage on

1006
00:42:08,220 --> 00:42:09,660
the client side

1007
00:42:09,660 --> 00:42:11,640
so again same situation with the clients

1008
00:42:11,640 --> 00:42:14,339
these clients are headphones as I was

1009
00:42:14,339 --> 00:42:16,440
saying they never saw secure multiple

1010
00:42:16,440 --> 00:42:17,880
computation before they don't know what

1011
00:42:17,880 --> 00:42:20,520
this is and having their data going

1012
00:42:20,520 --> 00:42:22,079
outside of the company even if it's

1013
00:42:22,079 --> 00:42:24,119
encrypted is very for it's a foreign

1014
00:42:24,119 --> 00:42:26,640
thing to them uh but the positive thing

1015
00:42:26,640 --> 00:42:28,440
here is that again the bank has like

1016
00:42:28,440 --> 00:42:30,420
very long-term clients and they were

1017
00:42:30,420 --> 00:42:33,359
willing to listen and see what we have

1018
00:42:33,359 --> 00:42:37,140
to offer okay so I can uh

1019
00:42:37,140 --> 00:42:38,579
um abstract here like the biggest

1020
00:42:38,579 --> 00:42:40,800
challenges

1021
00:42:40,800 --> 00:42:43,920
so let me first tell you some challenges

1022
00:42:43,920 --> 00:42:45,480
throughout the process

1023
00:42:45,480 --> 00:42:47,460
to actually first get the internal bind

1024
00:42:47,460 --> 00:42:48,839
to the product

1025
00:42:48,839 --> 00:42:51,119
so some steps that we had to do we had

1026
00:42:51,119 --> 00:42:52,680
to actually find the right people in the

1027
00:42:52,680 --> 00:42:54,540
bank to talk about that which is the

1028
00:42:54,540 --> 00:42:56,720
quantitative researcher team

1029
00:42:56,720 --> 00:42:59,040
uh and then

1030
00:42:59,040 --> 00:43:02,460
uh try to find the the suitable use case

1031
00:43:02,460 --> 00:43:04,859
Okay so they have a lot of products

1032
00:43:04,859 --> 00:43:06,900
there so you have to discuss with them

1033
00:43:06,900 --> 00:43:09,119
what makes more sense and that's why we

1034
00:43:09,119 --> 00:43:10,920
decided on this use case

1035
00:43:10,920 --> 00:43:13,020
then we had to design and like show them

1036
00:43:13,020 --> 00:43:15,240
the first demo to show them that it can

1037
00:43:15,240 --> 00:43:16,800
be feasible

1038
00:43:16,800 --> 00:43:19,200
uh but the story is not over here okay

1039
00:43:19,200 --> 00:43:20,520
so this is the beginning of the story

1040
00:43:20,520 --> 00:43:23,160
and that already took a lot of time to

1041
00:43:23,160 --> 00:43:24,540
achieve

1042
00:43:24,540 --> 00:43:28,680
okay so uh then for the external buy so

1043
00:43:28,680 --> 00:43:31,200
the bank will not build something if

1044
00:43:31,200 --> 00:43:33,180
they don't ask the clients

1045
00:43:33,180 --> 00:43:35,819
so another step through this process was

1046
00:43:35,819 --> 00:43:38,280
to go and ask the clients about it like

1047
00:43:38,280 --> 00:43:40,200
if they want to use it under what

1048
00:43:40,200 --> 00:43:41,940
conditions they want to use it

1049
00:43:41,940 --> 00:43:44,640
so we visited almost 20 hedge funds like

1050
00:43:44,640 --> 00:43:47,099
we were showing the demo

1051
00:43:47,099 --> 00:43:49,980
um unlike asking questions about what

1052
00:43:49,980 --> 00:43:52,680
this equipment for the computation so as

1053
00:43:52,680 --> 00:43:56,598
I said like they were not exported

1054
00:43:56,720 --> 00:44:00,119
exposed to these type of techniques

1055
00:44:00,119 --> 00:44:02,819
um and then the other things that we

1056
00:44:02,819 --> 00:44:04,260
want to have from the bank is to ask

1057
00:44:04,260 --> 00:44:06,900
them under what conditions they want to

1058
00:44:06,900 --> 00:44:08,520
use this product okay

1059
00:44:08,520 --> 00:44:10,079
so and there was a lot of client

1060
00:44:10,079 --> 00:44:12,480
feedback I don't have time to talk about

1061
00:44:12,480 --> 00:44:14,700
the client feedback it's yet another

1062
00:44:14,700 --> 00:44:16,740
talk like who was positive who was

1063
00:44:16,740 --> 00:44:20,098
negative but

1064
00:44:20,640 --> 00:44:23,579
after again a very long process

1065
00:44:23,579 --> 00:44:25,560
the bank decided based on the client

1066
00:44:25,560 --> 00:44:26,520
feedback

1067
00:44:26,520 --> 00:44:28,680
the bank decided to give the resources

1068
00:44:28,680 --> 00:44:30,980
to build a certain tool

1069
00:44:30,980 --> 00:44:33,240
and then

1070
00:44:33,240 --> 00:44:34,680
I'm going to mention only the

1071
00:44:34,680 --> 00:44:36,180
requirements that we had for the product

1072
00:44:36,180 --> 00:44:38,400
okay so and these are very important

1073
00:44:38,400 --> 00:44:39,900
because this is some lessons that you

1074
00:44:39,900 --> 00:44:41,520
can learn when we want to put such a

1075
00:44:41,520 --> 00:44:43,920
system in production so the first one is

1076
00:44:43,920 --> 00:44:46,020
that the clients they don't want to talk

1077
00:44:46,020 --> 00:44:47,940
to other clients in fact they want to

1078
00:44:47,940 --> 00:44:49,140
keep their identity hidden from the

1079
00:44:49,140 --> 00:44:50,640
other clients okay

1080
00:44:50,640 --> 00:44:52,440
and that requires only talking to the

1081
00:44:52,440 --> 00:44:53,220
bank

1082
00:44:53,220 --> 00:44:55,980
and moreover having like connections

1083
00:44:55,980 --> 00:44:58,260
between the clients okay to be honest

1084
00:44:58,260 --> 00:45:00,060
this is not realistic okay you should

1085
00:45:00,060 --> 00:45:01,680
when we talk about secret computation in

1086
00:45:01,680 --> 00:45:04,319
production we should not actually talk

1087
00:45:04,319 --> 00:45:06,240
so easily about establishing connections

1088
00:45:06,240 --> 00:45:08,760
across all of these parties okay so we

1089
00:45:08,760 --> 00:45:10,619
really had to consider a star topology

1090
00:45:10,619 --> 00:45:14,220
where everybody talks to the bank okay

1091
00:45:14,220 --> 00:45:16,200
and then the clients don't want to

1092
00:45:16,200 --> 00:45:19,980
install anything okay uh so then we had

1093
00:45:19,980 --> 00:45:22,079
to actually find solutions to make them

1094
00:45:22,079 --> 00:45:24,900
use the products so we had to come up

1095
00:45:24,900 --> 00:45:27,599
with a web-based solution

1096
00:45:27,599 --> 00:45:30,180
then another thing is that because it's

1097
00:45:30,180 --> 00:45:32,040
a web-based application it runs on the

1098
00:45:32,040 --> 00:45:34,920
clients browsers it should not be

1099
00:45:34,920 --> 00:45:38,460
computationally very intensive right

1100
00:45:38,460 --> 00:45:40,980
and then you know in NPC we have this

1101
00:45:40,980 --> 00:45:43,440
concept of pre-processing the data we

1102
00:45:43,440 --> 00:45:44,880
cannot use them here because the clients

1103
00:45:44,880 --> 00:45:46,680
don't know when they will come

1104
00:45:46,680 --> 00:45:49,859
uh we have all these different times for

1105
00:45:49,859 --> 00:45:51,720
the auctions they're not even sure if

1106
00:45:51,720 --> 00:45:52,800
they will participate in the auction

1107
00:45:52,800 --> 00:45:54,720
some seconds before so we cannot really

1108
00:45:54,720 --> 00:45:57,599
use any pre-processing

1109
00:45:57,599 --> 00:46:00,359
and then uh they don't want only some

1110
00:46:00,359 --> 00:46:01,920
other security okay we don't want the

1111
00:46:01,920 --> 00:46:03,420
clients to start sitting so we want

1112
00:46:03,420 --> 00:46:07,680
malicious security and also like some of

1113
00:46:07,680 --> 00:46:11,400
them I mean most of them they cannot uh

1114
00:46:11,400 --> 00:46:13,500
like review themselves so they wanted

1115
00:46:13,500 --> 00:46:15,599
the reviews from experts and all of

1116
00:46:15,599 --> 00:46:18,420
these processes okay so these were the

1117
00:46:18,420 --> 00:46:20,760
the highlight of the requirements there

1118
00:46:20,760 --> 00:46:23,900
were more requirements okay

1119
00:46:23,940 --> 00:46:25,740
and the other thing is frequent auctions

1120
00:46:25,740 --> 00:46:28,020
in the sense that you cannot like run

1121
00:46:28,020 --> 00:46:30,420
the auction and weights forever so you

1122
00:46:30,420 --> 00:46:34,520
want also to be fast okay

1123
00:46:35,220 --> 00:46:38,579
so here is architecture of the system

1124
00:46:38,579 --> 00:46:41,940
uh I cannot point but essentially what

1125
00:46:41,940 --> 00:46:43,380
happens the clients connect to the

1126
00:46:43,380 --> 00:46:46,520
browser and then we have this JPMorgan

1127
00:46:46,520 --> 00:46:49,260
portal the markets portal where they

1128
00:46:49,260 --> 00:46:51,720
connect there to the primates UI which

1129
00:46:51,720 --> 00:46:54,960
is actually on the cloud and then on the

1130
00:46:54,960 --> 00:46:57,359
left side we have actually this trading

1131
00:46:57,359 --> 00:47:00,540
platform where we actually have a

1132
00:47:00,540 --> 00:47:03,780
primate server which is the bank in the

1133
00:47:03,780 --> 00:47:04,920
previous example that I was talking

1134
00:47:04,920 --> 00:47:07,260
about and these were systems that they

1135
00:47:07,260 --> 00:47:09,720
weren't already existing uh in the bank

1136
00:47:09,720 --> 00:47:11,760
so we had to integrate all our code here

1137
00:47:11,760 --> 00:47:14,280
and there were yet another like set of

1138
00:47:14,280 --> 00:47:15,540
challenges

1139
00:47:15,540 --> 00:47:19,200
I'm not gonna mention them uh but they

1140
00:47:19,200 --> 00:47:21,000
were a lot okay

1141
00:47:21,000 --> 00:47:22,560
uh

1142
00:47:22,560 --> 00:47:24,720
and then our team it was very diverse

1143
00:47:24,720 --> 00:47:26,880
like we had like from like programmers

1144
00:47:26,880 --> 00:47:27,920
for different

1145
00:47:27,920 --> 00:47:31,020
types of skill sets with quants we had

1146
00:47:31,020 --> 00:47:32,780
legal cyber security

1147
00:47:32,780 --> 00:47:36,060
and a lot of different set of people so

1148
00:47:36,060 --> 00:47:38,280
I want to extend my thanks to more

1149
00:47:38,280 --> 00:47:40,140
people than the ones that you saw on the

1150
00:47:40,140 --> 00:47:41,839
first line

1151
00:47:41,839 --> 00:47:45,000
uh so now I'm gonna talk super quickly

1152
00:47:45,000 --> 00:47:46,980
about the cryptographic solutions and

1153
00:47:46,980 --> 00:47:49,859
then I'll show you the demo

1154
00:47:49,859 --> 00:47:52,940
how much time do I have

1155
00:47:53,660 --> 00:47:56,400
that was one four

1156
00:47:56,400 --> 00:47:59,280
four minutes or so okay we're a little

1157
00:47:59,280 --> 00:48:00,540
bit behind but

1158
00:48:00,540 --> 00:48:03,720
we want to see the demo yes okay

1159
00:48:03,720 --> 00:48:05,940
so super quickly for the cryptographic

1160
00:48:05,940 --> 00:48:08,700
contributions so I'm hiding a lot of

1161
00:48:08,700 --> 00:48:10,140
details here I just want to give you

1162
00:48:10,140 --> 00:48:12,720
only like the super high level idea here

1163
00:48:12,720 --> 00:48:14,880
so the main thing to remember is that

1164
00:48:14,880 --> 00:48:16,740
our comparison protocol is linear so the

1165
00:48:16,740 --> 00:48:19,140
parties can run computations locally so

1166
00:48:19,140 --> 00:48:20,880
and how we add privacy so the part is

1167
00:48:20,880 --> 00:48:23,339
Secrets here uh their input with the

1168
00:48:23,339 --> 00:48:24,839
other client

1169
00:48:24,839 --> 00:48:27,119
okay so they have we have inputs A and B

1170
00:48:27,119 --> 00:48:29,160
so A and B are the two things that we

1171
00:48:29,160 --> 00:48:30,900
want to compute the minimum think that

1172
00:48:30,900 --> 00:48:33,480
it's their volumes okay so we sent one

1173
00:48:33,480 --> 00:48:35,220
share to the other party we keep once

1174
00:48:35,220 --> 00:48:37,740
here and we run our minimum minimum

1175
00:48:37,740 --> 00:48:39,060
protocol that computes the minimum

1176
00:48:39,060 --> 00:48:40,560
between the two values

1177
00:48:40,560 --> 00:48:43,619
okay and then the bank lands the answer

1178
00:48:43,619 --> 00:48:45,839
so we run our protocol actually three

1179
00:48:45,839 --> 00:48:48,300
times okay so one time on the secret set

1180
00:48:48,300 --> 00:48:49,380
values

1181
00:48:49,380 --> 00:48:51,420
and now we want to check if the clients

1182
00:48:51,420 --> 00:48:53,339
run the right code okay so we want to

1183
00:48:53,339 --> 00:48:55,440
add normal issue security so how are we

1184
00:48:55,440 --> 00:48:57,300
going to do that uh we're going to

1185
00:48:57,300 --> 00:49:01,260
actually use commitments okay and uh

1186
00:49:01,260 --> 00:49:03,599
essentially we're going to run the code

1187
00:49:03,599 --> 00:49:05,579
that's not the code like the code with

1188
00:49:05,579 --> 00:49:07,500
the input that one part is supposed to

1189
00:49:07,500 --> 00:49:09,780
run to check in the other parties so

1190
00:49:09,780 --> 00:49:10,920
basically

1191
00:49:10,920 --> 00:49:13,380
in the second sensation so in the first

1192
00:49:13,380 --> 00:49:15,480
one I sent you once here in the second

1193
00:49:15,480 --> 00:49:17,160
sensation I'll send you a commitment of

1194
00:49:17,160 --> 00:49:19,200
my others here so you can run the same

1195
00:49:19,200 --> 00:49:21,240
protocol on the committed values and

1196
00:49:21,240 --> 00:49:22,680
then we have a third instantiation again

1197
00:49:22,680 --> 00:49:25,140
of the minimum protocol where we

1198
00:49:25,140 --> 00:49:27,300
actually using the openings openings of

1199
00:49:27,300 --> 00:49:30,000
the commitment to check uh that the

1200
00:49:30,000 --> 00:49:31,800
first invocation on The Secret Sales was

1201
00:49:31,800 --> 00:49:33,060
correct okay

1202
00:49:33,060 --> 00:49:34,680
that's how much I can say about the

1203
00:49:34,680 --> 00:49:36,720
technique since there is no time if

1204
00:49:36,720 --> 00:49:37,920
you're more interested you can look at

1205
00:49:37,920 --> 00:49:39,839
the paper or ask me

1206
00:49:39,839 --> 00:49:42,180
so let's see the demo

1207
00:49:42,180 --> 00:49:44,400
okay so this is the JP Morgan portal so

1208
00:49:44,400 --> 00:49:46,440
I'm going to show you the the client

1209
00:49:46,440 --> 00:49:48,240
side okay so what the client sees when

1210
00:49:48,240 --> 00:49:50,460
they interact with the system

1211
00:49:50,460 --> 00:49:53,160
so here you can see the the different

1212
00:49:53,160 --> 00:49:55,260
options that we have and they run every

1213
00:49:55,260 --> 00:49:57,359
10 minutes so you can see that when the

1214
00:49:57,359 --> 00:49:59,040
registration opens so there's a Time

1215
00:49:59,040 --> 00:50:01,020
window when the clients can come and

1216
00:50:01,020 --> 00:50:02,400
submit their

1217
00:50:02,400 --> 00:50:04,800
um their orders and we give here a

1218
00:50:04,800 --> 00:50:06,960
window five minutes and then after five

1219
00:50:06,960 --> 00:50:09,240
minutes we start the matching okay so

1220
00:50:09,240 --> 00:50:14,099
I'm gonna show you uh the first run

1221
00:50:14,099 --> 00:50:17,700
okay so here is what they see so you can

1222
00:50:17,700 --> 00:50:19,380
see there's the the timeline in the top

1223
00:50:19,380 --> 00:50:20,460
sorry I'm thinking that there's a

1224
00:50:20,460 --> 00:50:21,619
clicker here

1225
00:50:21,619 --> 00:50:24,240
uh and the client is asked to actually

1226
00:50:24,240 --> 00:50:27,960
submit uh their file of the trades to be

1227
00:50:27,960 --> 00:50:29,040
um

1228
00:50:29,040 --> 00:50:31,800
encrypted so I have a video here I don't

1229
00:50:31,800 --> 00:50:33,599
know how to make the video run with the

1230
00:50:33,599 --> 00:50:35,339
Google click here

1231
00:50:35,339 --> 00:50:38,599
can I click somewhere

1232
00:50:40,740 --> 00:50:43,200
can you click

1233
00:50:43,200 --> 00:50:45,599
okay it's on

1234
00:50:45,599 --> 00:50:47,520
okay so I have an example here where the

1235
00:50:47,520 --> 00:50:49,859
client finds an Excel file actually that

1236
00:50:49,859 --> 00:50:52,740
was me not the client uh and now we

1237
00:50:52,740 --> 00:50:55,260
upload the file and actually what the

1238
00:50:55,260 --> 00:50:57,000
Excel file contains

1239
00:50:57,000 --> 00:51:00,599
um is actually a simple I imported like

1240
00:51:00,599 --> 00:51:03,300
fake symbols here to show you and then

1241
00:51:03,300 --> 00:51:05,280
we have the direction longer shorts and

1242
00:51:05,280 --> 00:51:07,920
we have two quantities uh the minimum

1243
00:51:07,920 --> 00:51:09,359
and the maximum I'll talk about this in

1244
00:51:09,359 --> 00:51:10,440
a bit

1245
00:51:10,440 --> 00:51:11,880
and here you can see that they are

1246
00:51:11,880 --> 00:51:13,440
loaded on the browser of the client

1247
00:51:13,440 --> 00:51:15,599
again I'm showing you the client side so

1248
00:51:15,599 --> 00:51:16,920
everything happens locally on the

1249
00:51:16,920 --> 00:51:20,220
browser of the client

1250
00:51:20,220 --> 00:51:23,339
and then in the next in the next one I

1251
00:51:23,339 --> 00:51:24,540
think

1252
00:51:24,540 --> 00:51:26,880
can you click

1253
00:51:26,880 --> 00:51:29,220
so in the next one we're gonna press

1254
00:51:29,220 --> 00:51:31,500
this register button and now everything

1255
00:51:31,500 --> 00:51:33,540
is registered and sent to the to the

1256
00:51:33,540 --> 00:51:34,619
bank server

1257
00:51:34,619 --> 00:51:37,140
and we can see here on the top you can

1258
00:51:37,140 --> 00:51:38,520
see how many symbols are there and

1259
00:51:38,520 --> 00:51:41,420
they're recognized

1260
00:51:43,200 --> 00:51:45,660
okay so everything is registered so the

1261
00:51:45,660 --> 00:51:47,880
middle columns are different

1262
00:51:47,880 --> 00:51:49,380
um so you need to make sure that the

1263
00:51:49,380 --> 00:51:50,520
symbol is correct there are many

1264
00:51:50,520 --> 00:51:52,020
different systems for writing the

1265
00:51:52,020 --> 00:51:54,359
symbols and we want to check that this

1266
00:51:54,359 --> 00:51:55,680
is um

1267
00:51:55,680 --> 00:51:59,359
what's happening uh

1268
00:52:01,619 --> 00:52:03,359
we want to make sure that the symbol is

1269
00:52:03,359 --> 00:52:05,460
the right one in the right system and

1270
00:52:05,460 --> 00:52:07,319
the direction is long and short and

1271
00:52:07,319 --> 00:52:08,880
actually we ask the client to submit a

1272
00:52:08,880 --> 00:52:10,980
minimum quantity so that we cannot match

1273
00:52:10,980 --> 00:52:12,900
them above this quantity and a maximum

1274
00:52:12,900 --> 00:52:15,780
quantity that's why you see two

1275
00:52:15,780 --> 00:52:16,440
um

1276
00:52:16,440 --> 00:52:18,720
so the threshold quantity and the full

1277
00:52:18,720 --> 00:52:20,339
quantity okay so everything is

1278
00:52:20,339 --> 00:52:24,859
registered uh and then in the next one

1279
00:52:25,859 --> 00:52:28,200
sorry we didn't uh

1280
00:52:28,200 --> 00:52:29,579
so that it would be like that so here

1281
00:52:29,579 --> 00:52:31,980
you can see the matching so the matching

1282
00:52:31,980 --> 00:52:34,559
time has started at the top and you saw

1283
00:52:34,559 --> 00:52:37,920
gradually how it was matching uh so

1284
00:52:37,920 --> 00:52:39,839
first we match the minimum quantities of

1285
00:52:39,839 --> 00:52:41,339
the client that's why you saw how it was

1286
00:52:41,339 --> 00:52:44,579
going like that uh and then we have the

1287
00:52:44,579 --> 00:52:46,920
full quantities

1288
00:52:46,920 --> 00:52:49,859
so here you can see what what is like

1289
00:52:49,859 --> 00:52:52,500
the finals um view of the client so you

1290
00:52:52,500 --> 00:52:54,599
can see we have like full matches and

1291
00:52:54,599 --> 00:52:56,460
parcel months so personal math is that

1292
00:52:56,460 --> 00:52:58,619
you see in the second round for example

1293
00:52:58,619 --> 00:53:01,140
the client asked for his maximum

1294
00:53:01,140 --> 00:53:04,859
quantity was 440 but one gave him

1295
00:53:04,859 --> 00:53:06,839
300 okay so that's why we said their

1296
00:53:06,839 --> 00:53:08,099
parcel much

1297
00:53:08,099 --> 00:53:11,280
okay so this is um the demo

1298
00:53:11,280 --> 00:53:13,920
so to conclude so we identified the real

1299
00:53:13,920 --> 00:53:14,700
world

1300
00:53:14,700 --> 00:53:17,220
um use case for NPC I'm going to go

1301
00:53:17,220 --> 00:53:19,700
quickly here

1302
00:53:19,700 --> 00:53:22,859
uh and it's running live and there were

1303
00:53:22,859 --> 00:53:24,000
actually many challenges which

1304
00:53:24,000 --> 00:53:26,099
unfortunately I don't have time to talk

1305
00:53:26,099 --> 00:53:28,740
about all of them uh and I guess for

1306
00:53:28,740 --> 00:53:30,900
future work I'll skip that too see if

1307
00:53:30,900 --> 00:53:32,520
there's any question

1308
00:53:32,520 --> 00:53:34,250
thank you

1309
00:53:34,250 --> 00:53:37,280
[Applause]

1310
00:53:37,280 --> 00:53:40,849
[Music]

1311
00:53:43,020 --> 00:53:45,960
all right one question

1312
00:53:45,960 --> 00:53:47,819
does anybody have anything lined up if

1313
00:53:47,819 --> 00:53:51,619
not we can hop on to the next speaker

1314
00:53:53,240 --> 00:53:56,040
thank you for your talk I was wondering

1315
00:53:56,040 --> 00:53:59,220
how you will deal with the price the

1316
00:53:59,220 --> 00:54:02,040
underlying price of the share and would

1317
00:54:02,040 --> 00:54:03,900
you be able to do something like that

1318
00:54:03,900 --> 00:54:06,540
while considering different prices for

1319
00:54:06,540 --> 00:54:09,059
bidders and from askers and then I don't

1320
00:54:09,059 --> 00:54:10,859
know maybe do something for a whole book

1321
00:54:10,859 --> 00:54:12,420
order or

1322
00:54:12,420 --> 00:54:14,460
yeah actually that was part of one of my

1323
00:54:14,460 --> 00:54:16,920
open problems so the price in this use

1324
00:54:16,920 --> 00:54:19,500
case is fixed okay yes yes so there's no

1325
00:54:19,500 --> 00:54:21,000
price so there's the other concept of

1326
00:54:21,000 --> 00:54:22,920
dark pools where you submit also like

1327
00:54:22,920 --> 00:54:25,440
your uh your symbol your sides your

1328
00:54:25,440 --> 00:54:27,839
volume and the price that you want okay

1329
00:54:27,839 --> 00:54:29,339
and this is the setting of dark boots

1330
00:54:29,339 --> 00:54:31,319
actually we have also a lot of work on

1331
00:54:31,319 --> 00:54:33,180
that and also Nigel has a lot of work on

1332
00:54:33,180 --> 00:54:35,640
that uh so this is another thing to

1333
00:54:35,640 --> 00:54:37,079
consider so that you make it more

1334
00:54:37,079 --> 00:54:38,819
complex it's another use case where you

1335
00:54:38,819 --> 00:54:40,800
can also add the price element and then

1336
00:54:40,800 --> 00:54:42,180
you will have also to compare the prices

1337
00:54:42,180 --> 00:54:45,359
to see if we can get the match uh so the

1338
00:54:45,359 --> 00:54:47,280
situation is that currently to run a

1339
00:54:47,280 --> 00:54:49,319
dark pool in production again in the

1340
00:54:49,319 --> 00:54:51,660
start Network topology the running times

1341
00:54:51,660 --> 00:54:53,700
that they require from the business it's

1342
00:54:53,700 --> 00:54:56,220
like thousands of matches per second and

1343
00:54:56,220 --> 00:54:58,200
we are not there yet so there's a lot of

1344
00:54:58,200 --> 00:55:00,480
research to be done to reach the running

1345
00:55:00,480 --> 00:55:01,740
times that they're willing to accept

1346
00:55:01,740 --> 00:55:02,819
there

1347
00:55:02,819 --> 00:55:05,760
thank you okay thanks again uh another

1348
00:55:05,760 --> 00:55:07,619
round of applause for I'll take it as

1349
00:55:07,619 --> 00:55:10,460
the next stickers come out

1350
00:55:20,240 --> 00:55:22,500
okay this is the final Talk of the

1351
00:55:22,500 --> 00:55:24,240
session although we will have another

1352
00:55:24,240 --> 00:55:27,300
session right after this session

1353
00:55:27,300 --> 00:55:30,540
um so fhe and MPC this is the final talk

1354
00:55:30,540 --> 00:55:33,240
uh we're going to hear from Eric and Ben

1355
00:55:33,240 --> 00:55:38,959
about IPA which is uh not the beer

1356
00:55:40,400 --> 00:55:43,380
all right um so please welcome Eric

1357
00:55:43,380 --> 00:55:47,180
tabernac and Ben Savage

1358
00:55:47,280 --> 00:55:49,140
hello

1359
00:55:49,140 --> 00:55:50,760
are our mice working

1360
00:55:50,760 --> 00:55:51,839
all right

1361
00:55:51,839 --> 00:55:54,059
um I'm Eric I'm a research scientist at

1362
00:55:54,059 --> 00:55:56,819
meta and I'm Ben a software engineer at

1363
00:55:56,819 --> 00:55:59,040
meta and we're here today to talk about

1364
00:55:59,040 --> 00:56:01,319
interoperable private attribution or

1365
00:56:01,319 --> 00:56:03,960
ipas we've come to call it a possible

1366
00:56:03,960 --> 00:56:05,760
new private measurement web standard

1367
00:56:05,760 --> 00:56:09,319
proposed in the w3c

1368
00:56:10,619 --> 00:56:12,420
super happy to be here today but like

1369
00:56:12,420 --> 00:56:14,940
many projects this is a team effort so

1370
00:56:14,940 --> 00:56:17,400
thank you to everyone involved here

1371
00:56:17,400 --> 00:56:20,040
today and back at home

1372
00:56:20,040 --> 00:56:22,559
so the web is changing most notably

1373
00:56:22,559 --> 00:56:25,680
third-party cookies are going or gone

1374
00:56:25,680 --> 00:56:28,859
this is part of a larger effort to make

1375
00:56:28,859 --> 00:56:32,280
the web private by default for people

1376
00:56:32,280 --> 00:56:34,980
this is causing turbulence in digital

1377
00:56:34,980 --> 00:56:37,260
advertising braking and targeting and

1378
00:56:37,260 --> 00:56:39,300
measurement and while both are important

1379
00:56:39,300 --> 00:56:41,460
we found measurement was more easily

1380
00:56:41,460 --> 00:56:43,020
addressable through cryptographic

1381
00:56:43,020 --> 00:56:47,640
Solutions which became our IPA proposal

1382
00:56:47,640 --> 00:56:50,520
IPA is an aggregated measurement system

1383
00:56:50,520 --> 00:56:53,760
that aims to conform to the new Target

1384
00:56:53,760 --> 00:56:56,339
privacy model for the web specifically

1385
00:56:56,339 --> 00:56:59,059
our system is designed to only reveal

1386
00:56:59,059 --> 00:57:01,920
aggregate information about people and

1387
00:57:01,920 --> 00:57:04,440
for their cross-site browsing history to

1388
00:57:04,440 --> 00:57:06,720
remain private even in the face of

1389
00:57:06,720 --> 00:57:08,339
malicious adversaries

1390
00:57:08,339 --> 00:57:10,500
One Design choice we made to achieve

1391
00:57:10,500 --> 00:57:12,480
this goal is the use of differential

1392
00:57:12,480 --> 00:57:14,700
privacy which is a useful tool in

1393
00:57:14,700 --> 00:57:16,559
preventing differencing attacks that can

1394
00:57:16,559 --> 00:57:19,260
arise from aggregate statistics

1395
00:57:19,260 --> 00:57:22,079
we also rely on we avoid relying on

1396
00:57:22,079 --> 00:57:23,819
entrusted third parties

1397
00:57:23,819 --> 00:57:26,280
if there's any single party that could

1398
00:57:26,280 --> 00:57:28,920
be the cause of failure the risk of just

1399
00:57:28,920 --> 00:57:31,020
corrupting an adversary corrupt in them

1400
00:57:31,020 --> 00:57:33,180
is too high

1401
00:57:33,180 --> 00:57:35,339
our API is also designed to provide

1402
00:57:35,339 --> 00:57:37,680
utility to web developers particularly

1403
00:57:37,680 --> 00:57:39,359
those that use advertising to support

1404
00:57:39,359 --> 00:57:41,700
access to their content

1405
00:57:41,700 --> 00:57:43,980
so let's start with a motivating example

1406
00:57:43,980 --> 00:57:45,780
while you're browsing a news site you

1407
00:57:45,780 --> 00:57:48,780
might see an ad for sunglasses later you

1408
00:57:48,780 --> 00:57:50,280
might purchase sunglasses from the

1409
00:57:50,280 --> 00:57:52,020
Retailer's website and these types of

1410
00:57:52,020 --> 00:57:54,119
events are happening constantly

1411
00:57:54,119 --> 00:57:57,240
so in the past each individual's Journey

1412
00:57:57,240 --> 00:58:00,059
could be stored in a database and these

1413
00:58:00,059 --> 00:58:01,920
events could be joined together using a

1414
00:58:01,920 --> 00:58:03,420
third-party cookie

1415
00:58:03,420 --> 00:58:05,579
such a database powered measurement

1416
00:58:05,579 --> 00:58:09,000
statistics such as conversion rate cost

1417
00:58:09,000 --> 00:58:12,300
per conversion and return on ad spend

1418
00:58:12,300 --> 00:58:15,119
so with IPA our goal is for all those

1419
00:58:15,119 --> 00:58:17,520
individual Journeys and identifiers to

1420
00:58:17,520 --> 00:58:20,160
remain oblivious to all parties involved

1421
00:58:20,160 --> 00:58:22,079
but simultaneously we want to continue

1422
00:58:22,079 --> 00:58:23,940
enabling the computation of these

1423
00:58:23,940 --> 00:58:27,020
aggregate statistics

1424
00:58:27,119 --> 00:58:29,640
much of our design was inspired by prio

1425
00:58:29,640 --> 00:58:32,819
which includes an NPC that's operated by

1426
00:58:32,819 --> 00:58:35,099
semi-trusted helper parties

1427
00:58:35,099 --> 00:58:37,440
now such a system can't exist on

1428
00:58:37,440 --> 00:58:40,440
rainbows and Goodwill so we must also

1429
00:58:40,440 --> 00:58:42,000
consider the business model that will

1430
00:58:42,000 --> 00:58:43,559
support it

1431
00:58:43,559 --> 00:58:46,680
we needed to design a system such that

1432
00:58:46,680 --> 00:58:49,680
the cost of operating is borne by those

1433
00:58:49,680 --> 00:58:52,319
that benefit from it rather than the

1434
00:58:52,319 --> 00:58:55,380
browsers to achieve this we propose the

1435
00:58:55,380 --> 00:58:57,900
concept of a helper party Network that

1436
00:58:57,900 --> 00:59:00,059
consists of distinct entities who are

1437
00:59:00,059 --> 00:59:01,920
trusted to not collude

1438
00:59:01,920 --> 00:59:04,440
we envision an ecosystem of many helper

1439
00:59:04,440 --> 00:59:06,900
party networks with competition to drive

1440
00:59:06,900 --> 00:59:09,599
efficient performance and pricing this

1441
00:59:09,599 --> 00:59:11,400
ecosystem could be governed similar to

1442
00:59:11,400 --> 00:59:14,700
the ca browser Forum the body that vets

1443
00:59:14,700 --> 00:59:17,400
certificate authorities

1444
00:59:17,400 --> 00:59:19,380
now that we've covered our goals and

1445
00:59:19,380 --> 00:59:21,359
constraints let's dive deeper into the

1446
00:59:21,359 --> 00:59:23,160
design of IPA

1447
00:59:23,160 --> 00:59:25,859
we propose adding just two apis to the

1448
00:59:25,859 --> 00:59:27,059
web platform

1449
00:59:27,059 --> 00:59:29,339
set match key and get encrypted match

1450
00:59:29,339 --> 00:59:30,359
key

1451
00:59:30,359 --> 00:59:33,480
our goal is to link ad Impressions and

1452
00:59:33,480 --> 00:59:35,760
conversions that are associated with the

1453
00:59:35,760 --> 00:59:37,020
same person

1454
00:59:37,020 --> 00:59:38,700
and people often use more than one

1455
00:59:38,700 --> 00:59:39,839
device

1456
00:59:39,839 --> 00:59:41,700
so one idea that we have is to allow

1457
00:59:41,700 --> 00:59:43,920
sites that people log into across

1458
00:59:43,920 --> 00:59:46,920
multiple devices to call this set match

1459
00:59:46,920 --> 00:59:49,859
key API in order to set the same

1460
00:59:49,859 --> 00:59:52,380
identifier across all the devices that

1461
00:59:52,380 --> 00:59:53,940
are owned by that person

1462
00:59:53,940 --> 00:59:55,619
we would call sites that do this match

1463
00:59:55,619 --> 00:59:57,359
key providers

1464
00:59:57,359 --> 00:59:59,640
but protecting against a malicious match

1465
00:59:59,640 --> 01:00:01,380
key provider is currently one of our

1466
01:00:01,380 --> 01:00:02,819
open research problems that we're going

1467
01:00:02,819 --> 01:00:04,559
to talk about later so while we're

1468
01:00:04,559 --> 01:00:06,299
continuing this research we can fall

1469
01:00:06,299 --> 01:00:07,920
back on a simpler design that doesn't

1470
01:00:07,920 --> 01:00:10,559
support cross-device matching by having

1471
01:00:10,559 --> 01:00:12,900
each device simply generate a random

1472
01:00:12,900 --> 01:00:15,359
local key

1473
01:00:15,359 --> 01:00:17,640
so the actual raw value of this match

1474
01:00:17,640 --> 01:00:20,420
key would never be revealed to any site

1475
01:00:20,420 --> 01:00:22,740
instead sites would just call this

1476
01:00:22,740 --> 01:00:25,260
second API this get encrypted match key

1477
01:00:25,260 --> 01:00:28,319
to obtain a unique random secret sharing

1478
01:00:28,319 --> 01:00:30,720
of the match key where each share has

1479
01:00:30,720 --> 01:00:32,760
been encrypted towards one of the helper

1480
01:00:32,760 --> 01:00:36,740
parties in a helper party Network

1481
01:00:37,079 --> 01:00:38,940
foreign let's walk through our

1482
01:00:38,940 --> 01:00:41,040
sunglasses example again and see how

1483
01:00:41,040 --> 01:00:42,599
this works

1484
01:00:42,599 --> 01:00:45,059
first a person visits the website of a

1485
01:00:45,059 --> 01:00:47,460
match key provider they log in and the

1486
01:00:47,460 --> 01:00:50,099
site sets the match key on the device

1487
01:00:50,099 --> 01:00:52,680
next the person visits news dot example

1488
01:00:52,680 --> 01:00:54,720
and sees some ads including our

1489
01:00:54,720 --> 01:00:56,940
sunglasses ads we call sites like

1490
01:00:56,940 --> 01:01:01,020
news.example Source sites at any point a

1491
01:01:01,020 --> 01:01:04,079
source site can request and request an

1492
01:01:04,079 --> 01:01:06,299
encrypted match key and store it

1493
01:01:06,299 --> 01:01:08,940
alongside information like the campaign

1494
01:01:08,940 --> 01:01:11,099
IDs and time stamps of the ads that they

1495
01:01:11,099 --> 01:01:12,599
showed to that person

1496
01:01:12,599 --> 01:01:15,180
including our sunglasses ad

1497
01:01:15,180 --> 01:01:17,540
finally the person visits

1498
01:01:17,540 --> 01:01:19,500
sunglasses.example which we call a

1499
01:01:19,500 --> 01:01:22,380
trigger site again at any point the site

1500
01:01:22,380 --> 01:01:24,420
can request an encrypted match key and

1501
01:01:24,420 --> 01:01:26,160
store it along on inside information

1502
01:01:26,160 --> 01:01:28,799
about conversions such as purchase

1503
01:01:28,799 --> 01:01:30,780
values and time stamps

1504
01:01:30,780 --> 01:01:33,240
get encrypted matchkey uses a new secret

1505
01:01:33,240 --> 01:01:35,520
sharing of the match key for distinct

1506
01:01:35,520 --> 01:01:39,180
sites preventing sites or an individual

1507
01:01:39,180 --> 01:01:41,220
helper party from linking reports

1508
01:01:41,220 --> 01:01:44,400
outside of the MPC

1509
01:01:44,400 --> 01:01:46,740
next both sites will send the

1510
01:01:46,740 --> 01:01:48,359
information that they've logged to what

1511
01:01:48,359 --> 01:01:50,760
we call a report collector who is

1512
01:01:50,760 --> 01:01:53,040
compiling this information into reports

1513
01:01:53,040 --> 01:01:55,980
that include the encrypted match keys as

1514
01:01:55,980 --> 01:01:58,200
well as secret shares of the other data

1515
01:01:58,200 --> 01:01:59,819
that we talked about like campaign IDs

1516
01:01:59,819 --> 01:02:01,500
and purchase values

1517
01:02:01,500 --> 01:02:03,299
so the report collector could be one of

1518
01:02:03,299 --> 01:02:04,680
the two sites that we've listed or it

1519
01:02:04,680 --> 01:02:05,940
could be some measurement company to

1520
01:02:05,940 --> 01:02:06,960
which they've delegated this

1521
01:02:06,960 --> 01:02:08,940
responsibility

1522
01:02:08,940 --> 01:02:11,819
next the report collector sends each of

1523
01:02:11,819 --> 01:02:14,760
the sets of shares to the three helper

1524
01:02:14,760 --> 01:02:17,339
parties that would run our MPC

1525
01:02:17,339 --> 01:02:19,140
each helper party will only be able to

1526
01:02:19,140 --> 01:02:21,839
decrypt two of the three shares of the

1527
01:02:21,839 --> 01:02:23,760
encrypted match key

1528
01:02:23,760 --> 01:02:26,339
in IPA we use a three-party honest

1529
01:02:26,339 --> 01:02:28,799
majority network but other sizes and

1530
01:02:28,799 --> 01:02:30,599
configurations could exist

1531
01:02:30,599 --> 01:02:32,880
and critically our protocol is designed

1532
01:02:32,880 --> 01:02:35,460
to be secure even in the case that one

1533
01:02:35,460 --> 01:02:37,319
of the helper parties becomes actively

1534
01:02:37,319 --> 01:02:39,799
malicious

1535
01:02:40,200 --> 01:02:42,359
now that we've covered how the input

1536
01:02:42,359 --> 01:02:44,700
data is generated let's talk about how

1537
01:02:44,700 --> 01:02:46,559
we produce aggregate measurement results

1538
01:02:46,559 --> 01:02:48,359
in MPC

1539
01:02:48,359 --> 01:02:51,119
so let's first by explaining our ideal

1540
01:02:51,119 --> 01:02:52,680
functionality before we get into the

1541
01:02:52,680 --> 01:02:53,700
protocol

1542
01:02:53,700 --> 01:02:56,099
a measurement query consists of a set of

1543
01:02:56,099 --> 01:02:58,079
source reports these are the ad

1544
01:02:58,079 --> 01:03:00,540
Impressions and Trigger reports these

1545
01:03:00,540 --> 01:03:02,040
are the conversions

1546
01:03:02,040 --> 01:03:04,200
we first group them by the associated

1547
01:03:04,200 --> 01:03:07,680
person and sort by timestamp

1548
01:03:07,680 --> 01:03:11,339
then for each of the trigger reports we

1549
01:03:11,339 --> 01:03:12,960
look backwards to see if there's a

1550
01:03:12,960 --> 01:03:14,700
source event from the same person that

1551
01:03:14,700 --> 01:03:17,099
preceded it we call this last touch

1552
01:03:17,099 --> 01:03:19,380
attribution

1553
01:03:19,380 --> 01:03:21,900
values from the trigger reports are

1554
01:03:21,900 --> 01:03:23,880
assigned to the attributed Source

1555
01:03:23,880 --> 01:03:26,640
reports campaign breakdown key which we

1556
01:03:26,640 --> 01:03:30,059
can view as a histogram contribution

1557
01:03:30,059 --> 01:03:31,920
in order to provide our differential

1558
01:03:31,920 --> 01:03:34,619
privacy guarantees we need to ensure

1559
01:03:34,619 --> 01:03:36,540
that the total private total

1560
01:03:36,540 --> 01:03:39,119
contribution from each person is capped

1561
01:03:39,119 --> 01:03:41,460
here we're showing an example where it's

1562
01:03:41,460 --> 01:03:44,359
capped at 10.

1563
01:03:50,160 --> 01:03:51,780
we collect all the histogram

1564
01:03:51,780 --> 01:03:54,240
contributions in the query

1565
01:03:54,240 --> 01:03:56,339
we then Generate random noise according

1566
01:03:56,339 --> 01:03:58,920
to our differential privacy parameters

1567
01:03:58,920 --> 01:04:01,680
finally we aggregate all the histograms

1568
01:04:01,680 --> 01:04:04,200
including the random noise and release

1569
01:04:04,200 --> 01:04:08,040
the differentially private outputs

1570
01:04:08,040 --> 01:04:09,960
now let's talk about how we were able to

1571
01:04:09,960 --> 01:04:12,480
implement this functionality in MPC

1572
01:04:12,480 --> 01:04:13,980
so as we mentioned earlier we're

1573
01:04:13,980 --> 01:04:15,619
proposing that a helper party Network

1574
01:04:15,619 --> 01:04:18,660
consisting of three independent parties

1575
01:04:18,660 --> 01:04:20,940
operates a two out of three honest

1576
01:04:20,940 --> 01:04:22,440
majority NPC

1577
01:04:22,440 --> 01:04:24,480
so we arrived at this security model as

1578
01:04:24,480 --> 01:04:26,040
it represents a reasonable trade-off

1579
01:04:26,040 --> 01:04:27,599
between the real world security

1580
01:04:27,599 --> 01:04:29,940
considerations and performance

1581
01:04:29,940 --> 01:04:31,980
notably notably we've been able to

1582
01:04:31,980 --> 01:04:34,440
leverage replicated secret sharing which

1583
01:04:34,440 --> 01:04:36,059
provides really efficient multiplication

1584
01:04:36,059 --> 01:04:38,700
as well as malicious security compiler

1585
01:04:38,700 --> 01:04:41,040
that results in only approximately a

1586
01:04:41,040 --> 01:04:43,020
doubling of the cost over a semi honest

1587
01:04:43,020 --> 01:04:45,119
protocol here's a some of the papers

1588
01:04:45,119 --> 01:04:47,099
that we've used

1589
01:04:47,099 --> 01:04:48,780
peeking ahead we're going to need to

1590
01:04:48,780 --> 01:04:51,599
sort by this match key to get all of a

1591
01:04:51,599 --> 01:04:53,760
person's events grouped together to

1592
01:04:53,760 --> 01:04:55,920
accomplish that we want a bit decompose

1593
01:04:55,920 --> 01:04:58,319
representation of the match key with

1594
01:04:58,319 --> 01:05:01,440
each bit shared in a large Prime field

1595
01:05:01,440 --> 01:05:03,420
this introduces a real world trade-off

1596
01:05:03,420 --> 01:05:06,540
bit decomposition in MPC is expensive

1597
01:05:06,540 --> 01:05:08,880
and it would actually be really easy to

1598
01:05:08,880 --> 01:05:10,680
have the browser generate a share for

1599
01:05:10,680 --> 01:05:13,020
each bit however this increases the

1600
01:05:13,020 --> 01:05:15,359
client communication by at least an

1601
01:05:15,359 --> 01:05:17,220
order of magnitude so instead we send

1602
01:05:17,220 --> 01:05:19,380
them in Z2

1603
01:05:19,380 --> 01:05:21,599
from here we use a modulus conversion

1604
01:05:21,599 --> 01:05:23,700
protocol that's based on work by Kikuchi

1605
01:05:23,700 --> 01:05:25,500
at all that keeps our wire format

1606
01:05:25,500 --> 01:05:28,200
Compact and avoids the sort of expensive

1607
01:05:28,200 --> 01:05:31,160
bit decomposition

1608
01:05:31,260 --> 01:05:34,200
now we're able to perform our sorting

1609
01:05:34,200 --> 01:05:36,359
our goal is for all the reports that

1610
01:05:36,359 --> 01:05:38,520
have the same underlying match key to be

1611
01:05:38,520 --> 01:05:40,980
adjacent to one another and sorted by

1612
01:05:40,980 --> 01:05:43,380
time so naively you could accomplish

1613
01:05:43,380 --> 01:05:45,660
this via an oblivious sort by both match

1614
01:05:45,660 --> 01:05:49,098
key and timestamp

1615
01:05:49,380 --> 01:05:51,660
we realized that the timestamp doesn't

1616
01:05:51,660 --> 01:05:53,819
need to remain oblivious it leads to the

1617
01:05:53,819 --> 01:05:56,160
report collector and thus they're able

1618
01:05:56,160 --> 01:06:01,260
to pre-sort by timestamp before the MPC

1619
01:06:01,260 --> 01:06:03,839
we can then use a stable sorting

1620
01:06:03,839 --> 01:06:06,420
protocol to sort by the match key and

1621
01:06:06,420 --> 01:06:08,280
the reports will be grouped together by

1622
01:06:08,280 --> 01:06:10,500
matchkey and in chronological order just

1623
01:06:10,500 --> 01:06:11,760
as we need them

1624
01:06:11,760 --> 01:06:13,740
we considered a few different sorting

1625
01:06:13,740 --> 01:06:16,020
algorithms with a special focus on

1626
01:06:16,020 --> 01:06:19,680
communication efficiency because uh

1627
01:06:19,680 --> 01:06:21,960
egress from data centers is likely to be

1628
01:06:21,960 --> 01:06:23,579
the biggest driver of the dollar-based

1629
01:06:23,579 --> 01:06:25,260
cost of our system in the malicious

1630
01:06:25,260 --> 01:06:30,200
setting so in that case Radix sort wins

1631
01:06:30,660 --> 01:06:32,400
continuing with communication efficiency

1632
01:06:32,400 --> 01:06:34,980
we found that sorting by three bits at a

1633
01:06:34,980 --> 01:06:38,400
time is the most optimal

1634
01:06:38,400 --> 01:06:41,099
our current implementation using Radix

1635
01:06:41,099 --> 01:06:43,200
sort is from this efficient secure

1636
01:06:43,200 --> 01:06:47,160
three-party sorting paper by asherovital

1637
01:06:47,160 --> 01:06:49,980
with our reports sorted we're on to our

1638
01:06:49,980 --> 01:06:51,780
last touch attribution and aggregation

1639
01:06:51,780 --> 01:06:53,819
for the most part this is a fairly

1640
01:06:53,819 --> 01:06:55,980
generic MPC so we won't spend too much

1641
01:06:55,980 --> 01:06:57,960
time going through the each step of the

1642
01:06:57,960 --> 01:07:00,359
protocol but instead we'll continue to

1643
01:07:00,359 --> 01:07:02,880
focus on the interesting decision points

1644
01:07:02,880 --> 01:07:04,859
one issue that isn't well supported by

1645
01:07:04,859 --> 01:07:06,960
generic techniques is the need to look

1646
01:07:06,960 --> 01:07:10,079
back at several preceding rows for

1647
01:07:10,079 --> 01:07:11,880
example if a trigger report was not

1648
01:07:11,880 --> 01:07:14,099
immediately preceded by a source report

1649
01:07:14,099 --> 01:07:16,380
but had other reports in between

1650
01:07:16,380 --> 01:07:18,900
so graph SC offers an interesting

1651
01:07:18,900 --> 01:07:20,700
solution for these types of look backs

1652
01:07:20,700 --> 01:07:23,880
with o of n log n communication it works

1653
01:07:23,880 --> 01:07:25,920
by comparing first to the Row 1 and then

1654
01:07:25,920 --> 01:07:27,839
two and then four in the powers of two

1655
01:07:27,839 --> 01:07:29,880
above

1656
01:07:29,880 --> 01:07:32,039
in order to achieve differential privacy

1657
01:07:32,039 --> 01:07:33,900
on our outputs like Eric mentioned we

1658
01:07:33,900 --> 01:07:35,880
need to make sure that each person's

1659
01:07:35,880 --> 01:07:38,280
total contribution to the output is

1660
01:07:38,280 --> 01:07:40,619
capped so we leveraged more ideas from

1661
01:07:40,619 --> 01:07:42,480
graph SC to sort of scan through every

1662
01:07:42,480 --> 01:07:44,160
individual person's contributions and

1663
01:07:44,160 --> 01:07:46,619
add them up then we use this range check

1664
01:07:46,619 --> 01:07:48,119
protocol

1665
01:07:48,119 --> 01:07:49,980
to get the sum of these contributions

1666
01:07:49,980 --> 01:07:52,319
and contain them using this work from

1667
01:07:52,319 --> 01:07:54,559
nishide and OTA

1668
01:07:54,559 --> 01:07:58,500
the final step is to aggregate uh is to

1669
01:07:58,500 --> 01:08:00,359
aggregate contributions and release DP

1670
01:08:00,359 --> 01:08:02,819
outputs the simplest approach to

1671
01:08:02,819 --> 01:08:04,920
generate this noise is to have each

1672
01:08:04,920 --> 01:08:06,900
helper party generate one third of the

1673
01:08:06,900 --> 01:08:09,059
random noise independently but we're

1674
01:08:09,059 --> 01:08:10,680
exploring if it makes sense to do this

1675
01:08:10,680 --> 01:08:14,099
in MPC exactly how much noise is added

1676
01:08:14,099 --> 01:08:16,620
is the subject of both research and

1677
01:08:16,620 --> 01:08:19,198
standards conversations

1678
01:08:19,198 --> 01:08:22,020
we also need to ensure privacy across

1679
01:08:22,020 --> 01:08:24,179
queries not just on individual queries

1680
01:08:24,179 --> 01:08:26,939
to achieve this we're proposing that

1681
01:08:26,939 --> 01:08:28,620
individual sites will have a privacy

1682
01:08:28,620 --> 01:08:32,040
budget of Epsilon over a given Epoch

1683
01:08:32,040 --> 01:08:34,140
likely a week

1684
01:08:34,140 --> 01:08:36,839
each query will include a query specific

1685
01:08:36,839 --> 01:08:39,479
Epsilon which must be less than or equal

1686
01:08:39,479 --> 01:08:42,000
to the remaining budget helper parties

1687
01:08:42,000 --> 01:08:43,620
will keep track of that budget and

1688
01:08:43,620 --> 01:08:45,960
reject queries once it's exhausted

1689
01:08:45,960 --> 01:08:48,359
note that this design only limits the

1690
01:08:48,359 --> 01:08:50,698
rate at which sites gain information

1691
01:08:50,698 --> 01:08:54,179
about users but in infinite time the

1692
01:08:54,179 --> 01:08:57,000
total amount of information is unbounded

1693
01:08:57,000 --> 01:08:59,040
we believe this to be an acceptable

1694
01:08:59,040 --> 01:09:00,719
trade-off as only sites that have

1695
01:09:00,719 --> 01:09:03,179
long-term relationship with users are

1696
01:09:03,179 --> 01:09:05,040
able to obtain additional information in

1697
01:09:05,040 --> 01:09:06,299
this way

1698
01:09:06,299 --> 01:09:09,000
now that we've covered IPA as it stands

1699
01:09:09,000 --> 01:09:10,380
today we'd like to present a few open

1700
01:09:10,380 --> 01:09:13,198
areas of research

1701
01:09:13,198 --> 01:09:15,060
in order to support the largest

1702
01:09:15,060 --> 01:09:16,979
Publishers this protocol is going to

1703
01:09:16,979 --> 01:09:18,620
have to scale to support billions

1704
01:09:18,620 --> 01:09:21,540
possibly hundreds of billions of reports

1705
01:09:21,540 --> 01:09:23,520
in an individual query

1706
01:09:23,520 --> 01:09:25,198
so this will almost certainly require

1707
01:09:25,198 --> 01:09:26,880
some form of sharding

1708
01:09:26,880 --> 01:09:30,179
and this is really tricky as all of the

1709
01:09:30,179 --> 01:09:31,920
users reports have to go to the same

1710
01:09:31,920 --> 01:09:34,738
machine and thus A Shard size could

1711
01:09:34,738 --> 01:09:36,479
potentially reveal information about

1712
01:09:36,479 --> 01:09:39,179
which users end up on which shards and

1713
01:09:39,179 --> 01:09:40,620
possibly even which users are in the

1714
01:09:40,620 --> 01:09:42,120
intersection of source and Trigger

1715
01:09:42,120 --> 01:09:43,319
events

1716
01:09:43,319 --> 01:09:45,299
this is further Complicated by the fact

1717
01:09:45,299 --> 01:09:47,399
that we aim to keep these reports in

1718
01:09:47,399 --> 01:09:50,339
chronological order to save computation

1719
01:09:50,339 --> 01:09:51,960
on the Sorting

1720
01:09:51,960 --> 01:09:53,698
so we're currently working on ideas for

1721
01:09:53,698 --> 01:09:55,800
oblivious stable sharding with

1722
01:09:55,800 --> 01:09:59,780
differentially private Shard sizes

1723
01:10:00,300 --> 01:10:02,640
our privacy budgeting system is very

1724
01:10:02,640 --> 01:10:06,199
simple potentially overslow overly so

1725
01:10:06,199 --> 01:10:08,640
every query that a report collector

1726
01:10:08,640 --> 01:10:10,739
makes deducts from their budget for the

1727
01:10:10,739 --> 01:10:12,960
given Epoch this is even true for two

1728
01:10:12,960 --> 01:10:14,940
queries with absolutely no overlapping

1729
01:10:14,940 --> 01:10:15,840
people

1730
01:10:15,840 --> 01:10:18,840
however by Design it's impossible for a

1731
01:10:18,840 --> 01:10:21,719
report collector to know if or for any

1732
01:10:21,719 --> 01:10:23,460
individual helper party to know if two

1733
01:10:23,460 --> 01:10:25,699
queries have overlapping people

1734
01:10:25,699 --> 01:10:28,080
additionally report collectors need to

1735
01:10:28,080 --> 01:10:30,480
be able to be aware of how much of their

1736
01:10:30,480 --> 01:10:33,179
budget remains to properly manage it

1737
01:10:33,179 --> 01:10:35,400
we haven't been able to make any real

1738
01:10:35,400 --> 01:10:37,620
improvements to this simple design but

1739
01:10:37,620 --> 01:10:39,420
it could be an area where novel research

1740
01:10:39,420 --> 01:10:43,260
manlock much more efficient budget usage

1741
01:10:43,260 --> 01:10:44,760
in the last area of research that we're

1742
01:10:44,760 --> 01:10:46,679
going to highlight is the Privacy story

1743
01:10:46,679 --> 01:10:48,600
associated with the match key provider

1744
01:10:48,600 --> 01:10:50,460
like I mentioned earlier we recently

1745
01:10:50,460 --> 01:10:52,620
found an attack that allows a malicious

1746
01:10:52,620 --> 01:10:54,780
match key provider to collude with

1747
01:10:54,780 --> 01:10:56,640
source and helper sites to exceed their

1748
01:10:56,640 --> 01:10:58,140
privacy budget

1749
01:10:58,140 --> 01:11:00,659
so as a fallback devices can just

1750
01:11:00,659 --> 01:11:03,540
generate a random match key value but

1751
01:11:03,540 --> 01:11:04,800
we're actively researching new

1752
01:11:04,800 --> 01:11:06,780
approaches to match key providers that

1753
01:11:06,780 --> 01:11:08,219
could both enable for cross-device

1754
01:11:08,219 --> 01:11:10,199
attribution and conform to our Target

1755
01:11:10,199 --> 01:11:11,699
privacy threat model

1756
01:11:11,699 --> 01:11:13,739
even without cross-device attribution we

1757
01:11:13,739 --> 01:11:15,420
think that IPA provides unique value

1758
01:11:15,420 --> 01:11:18,300
compared to other related proposals

1759
01:11:18,300 --> 01:11:20,340
to better understand that unique value

1760
01:11:20,340 --> 01:11:22,560
let's compare IPA to two other private

1761
01:11:22,560 --> 01:11:24,719
measurement proposals most discussed in

1762
01:11:24,719 --> 01:11:27,600
the w3c's private advertising technology

1763
01:11:27,600 --> 01:11:29,640
community group

1764
01:11:29,640 --> 01:11:32,520
so the aggregation attribution report

1765
01:11:32,520 --> 01:11:34,199
sorry the aggregate attribution

1766
01:11:34,199 --> 01:11:36,960
reporting API ARA is part of Google's

1767
01:11:36,960 --> 01:11:39,540
privacy sandbox and Apple's private

1768
01:11:39,540 --> 01:11:41,400
click measurement is currently deployed

1769
01:11:41,400 --> 01:11:44,179
in safari

1770
01:11:44,940 --> 01:11:47,820
the first design Dimension is the use of

1771
01:11:47,820 --> 01:11:49,860
some kind of server component that

1772
01:11:49,860 --> 01:11:51,900
performs a private computation

1773
01:11:51,900 --> 01:11:55,020
so whereas IPA and ARA both rely on some

1774
01:11:55,020 --> 01:11:57,260
kind of server-based private computation

1775
01:11:57,260 --> 01:11:59,219
PCM does not

1776
01:11:59,219 --> 01:12:00,659
as we'll see that has a lot of

1777
01:12:00,659 --> 01:12:01,980
implications

1778
01:12:01,980 --> 01:12:04,620
IPA proposes the use of an MPC which we

1779
01:12:04,620 --> 01:12:06,960
just described whereas ARA proposes the

1780
01:12:06,960 --> 01:12:10,260
use of a tee hosted by some Cloud te

1781
01:12:10,260 --> 01:12:12,420
provider but in principle either

1782
01:12:12,420 --> 01:12:13,739
proposal could theoretically be

1783
01:12:13,739 --> 01:12:16,739
implemented in either of these setups

1784
01:12:16,739 --> 01:12:19,020
next is the Privacy definition

1785
01:12:19,020 --> 01:12:21,780
so both IPA and ARA propose the use of

1786
01:12:21,780 --> 01:12:23,820
central differential privacy

1787
01:12:23,820 --> 01:12:25,920
PCM on the other hand is purely

1788
01:12:25,920 --> 01:12:27,900
information theoretic relying on just

1789
01:12:27,900 --> 01:12:30,900
limited entropy in the reports and the

1790
01:12:30,900 --> 01:12:33,300
pigeonhole principle to assure that most

1791
01:12:33,300 --> 01:12:35,520
if not all reports contribute to some

1792
01:12:35,520 --> 01:12:37,140
kind of cohort

1793
01:12:37,140 --> 01:12:39,000
this does provide the ability to

1794
01:12:39,000 --> 01:12:40,739
perfectly track a limited number of

1795
01:12:40,739 --> 01:12:42,480
people at the expense of broader

1796
01:12:42,480 --> 01:12:45,379
measurement capabilities

1797
01:12:45,540 --> 01:12:47,820
IPA allows the report collector to

1798
01:12:47,820 --> 01:12:50,040
specify many values like the breakdown

1799
01:12:50,040 --> 01:12:53,580
keys at query time but ARA and PCM

1800
01:12:53,580 --> 01:12:55,800
handle this problem differently instead

1801
01:12:55,800 --> 01:12:58,380
sites call the apis to register an

1802
01:12:58,380 --> 01:13:00,900
impression or a conversion when they

1803
01:13:00,900 --> 01:13:05,040
happen and then they are attributed on

1804
01:13:05,040 --> 01:13:06,060
the device

1805
01:13:06,060 --> 01:13:08,340
information like the breakdown keys and

1806
01:13:08,340 --> 01:13:10,260
the purchase values have to be provided

1807
01:13:10,260 --> 01:13:13,320
to the API when it is called as a result

1808
01:13:13,320 --> 01:13:16,020
IPA provides much more flexibility in

1809
01:13:16,020 --> 01:13:18,620
the measurement capabilities

1810
01:13:18,620 --> 01:13:22,080
because array and PCM performed the

1811
01:13:22,080 --> 01:13:24,719
attribution on device they require a

1812
01:13:24,719 --> 01:13:27,540
random delay to disassociate the call to

1813
01:13:27,540 --> 01:13:31,140
the API from the output of the API these

1814
01:13:31,140 --> 01:13:33,960
delays in turn impede the ability for

1815
01:13:33,960 --> 01:13:36,300
sites to understand performance and

1816
01:13:36,300 --> 01:13:37,860
sometimes even results in dropping

1817
01:13:37,860 --> 01:13:41,280
reports hurting overall utility

1818
01:13:41,280 --> 01:13:43,860
mostly avoids this as calling get get

1819
01:13:43,860 --> 01:13:46,140
encrypted match key immediately returns

1820
01:13:46,140 --> 01:13:48,659
an encrypted match key that said sites

1821
01:13:48,659 --> 01:13:51,480
do have to wait to collect enough events

1822
01:13:51,480 --> 01:13:54,960
to produce meaningful aggregates

1823
01:13:54,960 --> 01:13:57,780
in the worst case scenario that the

1824
01:13:57,780 --> 01:13:59,219
security properties of the entire

1825
01:13:59,219 --> 01:14:02,159
protocol fail either through exploit or

1826
01:14:02,159 --> 01:14:04,860
error or helper party collusion IPA

1827
01:14:04,860 --> 01:14:06,900
would leak all individuals data in the

1828
01:14:06,900 --> 01:14:07,800
system

1829
01:14:07,800 --> 01:14:11,159
ARA in such a scenario would also reveal

1830
01:14:11,159 --> 01:14:13,679
individuals data though less so than IPA

1831
01:14:13,679 --> 01:14:15,900
because only information about people

1832
01:14:15,900 --> 01:14:18,300
who both saw an ad and made a purchase

1833
01:14:18,300 --> 01:14:20,040
would be released

1834
01:14:20,040 --> 01:14:22,140
PCM doesn't rely on a private

1835
01:14:22,140 --> 01:14:23,640
computation environment so this is a

1836
01:14:23,640 --> 01:14:26,100
little bit different though

1837
01:14:26,100 --> 01:14:28,560
cost is correlated with complexity

1838
01:14:28,560 --> 01:14:30,960
but complexity also has implications on

1839
01:14:30,960 --> 01:14:32,520
understandability

1840
01:14:32,520 --> 01:14:35,280
PCM is essentially free so in comparison

1841
01:14:35,280 --> 01:14:38,400
both IPA and ARA are expensive though

1842
01:14:38,400 --> 01:14:40,739
both are still a small fraction of the

1843
01:14:40,739 --> 01:14:43,380
relative advertising costs

1844
01:14:43,380 --> 01:14:46,620
as currently planned ARA would Deploy on

1845
01:14:46,620 --> 01:14:48,420
tees which would likely be cheaper than

1846
01:14:48,420 --> 01:14:50,460
MPC

1847
01:14:50,460 --> 01:14:52,560
the cryptography and differential

1848
01:14:52,560 --> 01:14:55,440
privacy that's used in both ARA and IPA

1849
01:14:55,440 --> 01:14:57,780
makes explaining them to end users

1850
01:14:57,780 --> 01:14:59,159
non-trivial

1851
01:14:59,159 --> 01:15:01,260
PCM sort of avoids server-side

1852
01:15:01,260 --> 01:15:03,659
computation and differential privacy

1853
01:15:03,659 --> 01:15:04,800
which makes it easy to explain

1854
01:15:04,800 --> 01:15:07,620
functionally how it works to users

1855
01:15:07,620 --> 01:15:09,540
ironically this makes its privacy

1856
01:15:09,540 --> 01:15:11,280
definition at least academically quite

1857
01:15:11,280 --> 01:15:13,639
weak

1858
01:15:13,860 --> 01:15:16,140
I'd like to leave you with a partying

1859
01:15:16,140 --> 01:15:17,100
thought

1860
01:15:17,100 --> 01:15:19,080
advertising is an important Financial

1861
01:15:19,080 --> 01:15:22,320
tool for providing no or low-cost access

1862
01:15:22,320 --> 01:15:24,840
to sites on the open web

1863
01:15:24,840 --> 01:15:27,420
the work Happening by all the folks in

1864
01:15:27,420 --> 01:15:29,820
this room is pushing Humanity closer to

1865
01:15:29,820 --> 01:15:31,679
the ability to operate at the efficient

1866
01:15:31,679 --> 01:15:34,020
Frontier between privacy and utility

1867
01:15:34,020 --> 01:15:36,600
where privacy does not have to come at

1868
01:15:36,600 --> 01:15:38,219
the cost of all utility

1869
01:15:38,219 --> 01:15:40,560
with some hard work and some real world

1870
01:15:40,560 --> 01:15:43,440
crypto I fundamentally believe the ad

1871
01:15:43,440 --> 01:15:45,719
supported business model can be rebuilt

1872
01:15:45,719 --> 01:15:47,280
in a way that conforms to the Target

1873
01:15:47,280 --> 01:15:49,560
privacy model of the web

1874
01:15:49,560 --> 01:15:51,719
we invite you to join our efforts to

1875
01:15:51,719 --> 01:15:53,940
make the web more private this QR code

1876
01:15:53,940 --> 01:15:55,920
links to our proposal including links to

1877
01:15:55,920 --> 01:15:57,239
all the ways in which you can help us

1878
01:15:57,239 --> 01:15:59,880
out with our efforts such as there is a

1879
01:15:59,880 --> 01:16:01,679
draft of an academic paper that would

1880
01:16:01,679 --> 01:16:03,179
benefit from feedback

1881
01:16:03,179 --> 01:16:04,739
there's our code base where we've

1882
01:16:04,739 --> 01:16:06,540
implemented this in Rust and if you want

1883
01:16:06,540 --> 01:16:07,560
to test that out or review our

1884
01:16:07,560 --> 01:16:09,360
implementation we'd appreciate that

1885
01:16:09,360 --> 01:16:11,219
there's also issues for all these open

1886
01:16:11,219 --> 01:16:13,440
problems that we mentioned and there's

1887
01:16:13,440 --> 01:16:15,480
information about a bi-weekly call where

1888
01:16:15,480 --> 01:16:17,219
we work through these issues and more

1889
01:16:17,219 --> 01:16:18,960
finally the incubation of this and

1890
01:16:18,960 --> 01:16:21,300
related apis is happening in the w3c

1891
01:16:21,300 --> 01:16:22,980
through the private advertising

1892
01:16:22,980 --> 01:16:26,159
technology community group or the pat CG

1893
01:16:26,159 --> 01:16:28,140
and this group is a community group so

1894
01:16:28,140 --> 01:16:29,820
it's open to anyone and we invite you to

1895
01:16:29,820 --> 01:16:32,000
join

1896
01:16:32,159 --> 01:16:33,270
thank you

1897
01:16:33,270 --> 01:16:34,500
[Applause]

1898
01:16:34,500 --> 01:16:38,960
[Music]

1899
01:16:38,960 --> 01:16:41,699
all right well that's definitely more

1900
01:16:41,699 --> 01:16:44,780
complicated than third party cookies

1901
01:16:44,780 --> 01:16:48,600
okay well um thanks folks I think uh if

1902
01:16:48,600 --> 01:16:49,920
we don't have questions we'll move on to

1903
01:16:49,920 --> 01:16:52,500
the final session of the day so um I'd

1904
01:16:52,500 --> 01:16:56,159
like to invite stanislav

