1
00:00:00,599 --> 00:00:02,820
let's resume

2
00:00:02,820 --> 00:00:04,500
our conference with the very last

3
00:00:04,500 --> 00:00:06,180
session

4
00:00:06,180 --> 00:00:08,220
the session is on

5
00:00:08,220 --> 00:00:10,019
Advanced encryption

6
00:00:10,019 --> 00:00:11,820
my name is Kristen reichberg and we will

7
00:00:11,820 --> 00:00:14,759
have three talks in this session

8
00:00:14,759 --> 00:00:17,640
the first one will be on time block

9
00:00:17,640 --> 00:00:19,800
encryption as already mentioned in the

10
00:00:19,800 --> 00:00:22,260
last of the last session and yolan will

11
00:00:22,260 --> 00:00:24,680
give the talk

12
00:00:24,680 --> 00:00:27,000
hello everyone

13
00:00:27,000 --> 00:00:29,900
um I'm very happy to be here today

14
00:00:29,900 --> 00:00:32,279
and I'm going to be talking today about

15
00:00:32,279 --> 00:00:36,680
t-lock so oh we made a practical widely

16
00:00:36,680 --> 00:00:38,820
deployed the time lock encryptions

17
00:00:38,820 --> 00:00:42,059
scheme and this is actually joint work

18
00:00:42,059 --> 00:00:45,120
with Nikola gay and Kelsey melisaris

19
00:00:45,120 --> 00:00:48,300
both of whom are also here today so if

20
00:00:48,300 --> 00:00:49,620
you have questions don't hesitate to

21
00:00:49,620 --> 00:00:52,559
talk to us after the talk

22
00:00:52,559 --> 00:00:56,579
um so what is maybe time Luck first so

23
00:00:56,579 --> 00:00:59,879
time luck encryption is really about

24
00:00:59,879 --> 00:01:02,640
encrypting a message now that you want

25
00:01:02,640 --> 00:01:05,099
to be able to decrypt in the future

26
00:01:05,099 --> 00:01:09,420
and um unlike the sessions name you know

27
00:01:09,420 --> 00:01:11,520
Advanced encryption

28
00:01:11,520 --> 00:01:13,200
um I'm afraid this is not going to be

29
00:01:13,200 --> 00:01:15,479
about the art Core math uh you know

30
00:01:15,479 --> 00:01:17,939
encryption scheme or whatsoever is going

31
00:01:17,939 --> 00:01:19,860
to be about very simple building blocks

32
00:01:19,860 --> 00:01:22,979
that exists for over 20 years and oh

33
00:01:22,979 --> 00:01:25,200
this can allow us to achieve timelock

34
00:01:25,200 --> 00:01:27,540
encryption that is encrypting a message

35
00:01:27,540 --> 00:01:29,640
today that we cannot decrypt until maybe

36
00:01:29,640 --> 00:01:31,799
Christmas or

37
00:01:31,799 --> 00:01:34,799
three years in the future or just maybe

38
00:01:34,799 --> 00:01:38,100
tomorrow you know or in five minutes

39
00:01:38,100 --> 00:01:40,920
and we've seen actually in the last Talk

40
00:01:40,920 --> 00:01:43,979
of the previous session uh quite a few

41
00:01:43,979 --> 00:01:47,579
of the applications of IB identity based

42
00:01:47,579 --> 00:01:49,799
encryption and it

43
00:01:49,799 --> 00:01:52,200
happens to be the case that time lock

44
00:01:52,200 --> 00:01:53,939
encryption has a lot of the same

45
00:01:53,939 --> 00:01:57,060
applications so you can also do uh dead

46
00:01:57,060 --> 00:02:00,119
man switches you can also do seal bid

47
00:02:00,119 --> 00:02:03,479
auctions you can also do conditional

48
00:02:03,479 --> 00:02:06,360
release of keys or something like that

49
00:02:06,360 --> 00:02:09,440
with time luck except that you won't be

50
00:02:09,440 --> 00:02:12,840
unlocking with a given identity you'll

51
00:02:12,840 --> 00:02:16,560
be unlocking it thanks to the time

52
00:02:16,560 --> 00:02:19,020
I'm actually a very interesting feature

53
00:02:19,020 --> 00:02:21,780
of time luck is especially the case it's

54
00:02:21,780 --> 00:02:25,020
the case for like releasing documents

55
00:02:25,020 --> 00:02:27,660
with a known umbergio period so like a

56
00:02:27,660 --> 00:02:29,819
responsible disclosure if you find a bag

57
00:02:29,819 --> 00:02:33,180
today in application and you want to

58
00:02:33,180 --> 00:02:36,720
release it to the vendor you know you

59
00:02:36,720 --> 00:02:39,599
usually agree on uh embargo period of

60
00:02:39,599 --> 00:02:43,800
maybe 120 days maybe 90 days or maybe

61
00:02:43,800 --> 00:02:46,200
you have to you know accept to never

62
00:02:46,200 --> 00:02:48,660
release the information which would be

63
00:02:48,660 --> 00:02:51,599
sad and so what happens if you get hit

64
00:02:51,599 --> 00:02:54,540
by a bus during the Embargo period right

65
00:02:54,540 --> 00:02:56,760
nobody will be here to release the

66
00:02:56,760 --> 00:02:59,640
vulnerability after a while and with

67
00:02:59,640 --> 00:03:01,440
time lock you could release the

68
00:03:01,440 --> 00:03:04,560
ciphertext and it will be released once

69
00:03:04,560 --> 00:03:06,300
the time has come anybody will be able

70
00:03:06,300 --> 00:03:08,099
to decrypt it and that is quite

71
00:03:08,099 --> 00:03:09,840
interesting also for journalists you

72
00:03:09,840 --> 00:03:12,060
know as a Deadman switch and so on and

73
00:03:12,060 --> 00:03:14,640
I'm pretty sure anybody is everybody is

74
00:03:14,640 --> 00:03:17,099
very afraid you know of that when they

75
00:03:17,099 --> 00:03:20,159
do responsible disclosure or maybe not

76
00:03:20,159 --> 00:03:21,840
but anyway

77
00:03:21,840 --> 00:03:23,519
there are a lot of other fun stuff you

78
00:03:23,519 --> 00:03:25,319
could do with time lag like responsible

79
00:03:25,319 --> 00:03:27,900
ransomware so if you're developing a run

80
00:03:27,900 --> 00:03:30,180
somewhere please use time locks so you

81
00:03:30,180 --> 00:03:33,060
say hey your data is encrypted unless

82
00:03:33,060 --> 00:03:35,159
you pay now or you will have to wait for

83
00:03:35,159 --> 00:03:37,140
three months that would be much nicer

84
00:03:37,140 --> 00:03:39,000
than the current Ransom words that we

85
00:03:39,000 --> 00:03:41,340
have right

86
00:03:41,340 --> 00:03:45,299
so what do we have to achieve time luck

87
00:03:45,299 --> 00:03:47,340
um I happen to work at protocol Labs on

88
00:03:47,340 --> 00:03:49,799
the drum team and Duran stands for

89
00:03:49,799 --> 00:03:53,040
distributed Randomness becomes and dran

90
00:03:53,040 --> 00:03:54,780
is an open source software that is meant

91
00:03:54,780 --> 00:03:57,720
to be run by a set of operators to

92
00:03:57,720 --> 00:03:59,459
produce together

93
00:03:59,459 --> 00:04:03,060
public verifiable random mechans

94
00:04:03,060 --> 00:04:05,340
and this is quite interesting for

95
00:04:05,340 --> 00:04:09,060
lotteries for smart contracts for you

96
00:04:09,060 --> 00:04:11,640
know whenever you need public randomness

97
00:04:11,640 --> 00:04:13,620
and the nice thing about Duran is it's

98
00:04:13,620 --> 00:04:16,620
building on top of threshold DLS

99
00:04:16,620 --> 00:04:19,738
and that is very important for what

100
00:04:19,738 --> 00:04:22,380
comes next remember that dran is also

101
00:04:22,380 --> 00:04:24,139
using pretty nice things such as

102
00:04:24,139 --> 00:04:27,419
Pederson distributed key generation for

103
00:04:27,419 --> 00:04:30,060
both key generation and resharings it's

104
00:04:30,060 --> 00:04:31,860
yeah we've seen that in the previous

105
00:04:31,860 --> 00:04:33,840
session what it means so I won't go into

106
00:04:33,840 --> 00:04:36,900
the details and finally Iran has

107
00:04:36,900 --> 00:04:39,419
actually been deployed in practice for

108
00:04:39,419 --> 00:04:41,040
over three years by the league of

109
00:04:41,040 --> 00:04:42,900
entropy so it's a Network that has been

110
00:04:42,900 --> 00:04:45,440
running to produce public variable

111
00:04:45,440 --> 00:04:48,360
random beacons and it's been actively

112
00:04:48,360 --> 00:04:52,380
used in production since 2020 and yes it

113
00:04:52,380 --> 00:04:54,540
is running in production with

114
00:04:54,540 --> 00:04:56,520
bearing-based cryptography

115
00:04:56,520 --> 00:04:58,860
we are not Apple

116
00:04:58,860 --> 00:05:01,020
so jiren becomes the nice thing about

117
00:05:01,020 --> 00:05:03,180
them is that they map to a given time

118
00:05:03,180 --> 00:05:04,680
because the league of entropy is

119
00:05:04,680 --> 00:05:07,800
operating under the security assumption

120
00:05:07,800 --> 00:05:10,320
that there is never a threshold amount

121
00:05:10,320 --> 00:05:13,500
of malicious nodes in the league and

122
00:05:13,500 --> 00:05:15,860
that means that as long as we've uh

123
00:05:15,860 --> 00:05:19,320
enough unless nodes you know we will be

124
00:05:19,320 --> 00:05:22,800
releasing a beacon at a given time with

125
00:05:22,800 --> 00:05:25,440
a threshold BLS signature matching the

126
00:05:25,440 --> 00:05:27,960
message uh getting signed in the beacon

127
00:05:27,960 --> 00:05:30,060
and that is quite interesting for time

128
00:05:30,060 --> 00:05:32,160
lock encryption because one issue we had

129
00:05:32,160 --> 00:05:34,680
with time lag encryption is that it's

130
00:05:34,680 --> 00:05:36,539
difficult to map you know to a given

131
00:05:36,539 --> 00:05:40,080
time like if you want your your secret

132
00:05:40,080 --> 00:05:42,479
to be decrypted tomorrow or do you

133
00:05:42,479 --> 00:05:44,880
represent tomorrow in term of you know

134
00:05:44,880 --> 00:05:50,360
secret keys or identity and so on and um

135
00:05:50,360 --> 00:05:53,160
it's quite interesting because a

136
00:05:53,160 --> 00:05:55,560
footnote in the IB paper was mentioning

137
00:05:55,560 --> 00:05:59,639
that you could see uh IB decryption Keys

138
00:05:59,639 --> 00:06:03,479
as signatures and that's exactly uh what

139
00:06:03,479 --> 00:06:06,000
the BLS scheme is doing it's using the

140
00:06:06,000 --> 00:06:09,120
encryption keys from the IB scheme as

141
00:06:09,120 --> 00:06:10,500
signatures

142
00:06:10,500 --> 00:06:12,479
and we have a live production Network

143
00:06:12,479 --> 00:06:15,060
that is releasing threshold BLS

144
00:06:15,060 --> 00:06:18,780
signatures at a given frequency and that

145
00:06:18,780 --> 00:06:21,419
is mapping very nicely to the time lock

146
00:06:21,419 --> 00:06:23,340
um problem right

147
00:06:23,340 --> 00:06:26,340
and so maybe a short BLS reminder since

148
00:06:26,340 --> 00:06:28,199
we've talked about threshold BLS

149
00:06:28,199 --> 00:06:31,440
previously but we didn't really see obls

150
00:06:31,440 --> 00:06:34,860
works exactly so BLS is using

151
00:06:34,860 --> 00:06:36,960
pairing-based cryptography so it means

152
00:06:36,960 --> 00:06:39,419
it has a pairing mapping two groups G1

153
00:06:39,419 --> 00:06:43,520
and G2 onto a Target group GT

154
00:06:43,520 --> 00:06:46,620
and to verify a signature what you'll be

155
00:06:46,620 --> 00:06:49,100
doing is you will take the signature p

156
00:06:49,100 --> 00:06:51,720
and you will compute the pairing of the

157
00:06:51,720 --> 00:06:54,600
generator of G1 together with the the

158
00:06:54,600 --> 00:06:58,319
signature and a signature in the DLS

159
00:06:58,319 --> 00:07:01,020
scheme is actually just the secret time

160
00:07:01,020 --> 00:07:04,139
the message mapped onto the group G2

161
00:07:04,139 --> 00:07:07,680
here and that is thanks to billinarity

162
00:07:07,680 --> 00:07:10,319
of the pairing equal to S time the

163
00:07:10,319 --> 00:07:13,199
pairing of the generator or fg1 and the

164
00:07:13,199 --> 00:07:16,740
message mapped onto G2 and now when we

165
00:07:16,740 --> 00:07:18,720
want where do we use the public Key Well

166
00:07:18,720 --> 00:07:21,180
we use it on the other side here at the

167
00:07:21,180 --> 00:07:24,300
bottom we compute the pairing of the

168
00:07:24,300 --> 00:07:27,300
public key of the group or you know if

169
00:07:27,300 --> 00:07:30,240
it's not a threshold scheme it would be

170
00:07:30,240 --> 00:07:32,400
your public key together with the

171
00:07:32,400 --> 00:07:34,919
message and that is by building narrity

172
00:07:34,919 --> 00:07:37,740
also going to give you the same value

173
00:07:37,740 --> 00:07:40,979
and to verify a BLS signature we will

174
00:07:40,979 --> 00:07:43,500
just compare these two values and say

175
00:07:43,500 --> 00:07:46,380
ah checks out it's a valid signature

176
00:07:46,380 --> 00:07:49,139
they are both equal

177
00:07:49,139 --> 00:07:50,940
um that's quite interesting because we

178
00:07:50,940 --> 00:07:53,099
have two different ways of coming up

179
00:07:53,099 --> 00:07:55,319
with the same value

180
00:07:55,319 --> 00:07:57,780
and that is you know quite similar to

181
00:07:57,780 --> 00:07:59,580
what we're trying to do when we do a key

182
00:07:59,580 --> 00:08:02,160
agreement except here there is a

183
00:08:02,160 --> 00:08:03,900
completely public way of coming up with

184
00:08:03,900 --> 00:08:06,120
the same value which is Computing the

185
00:08:06,120 --> 00:08:07,919
pairing of the public key together with

186
00:08:07,919 --> 00:08:10,440
the message and that is not great for a

187
00:08:10,440 --> 00:08:12,000
key agreement scheme you don't want any

188
00:08:12,000 --> 00:08:13,740
public information to allow you to

189
00:08:13,740 --> 00:08:16,620
recompute the same shirt secret and ID

190
00:08:16,620 --> 00:08:19,139
you know is actually working around that

191
00:08:19,139 --> 00:08:21,780
by just adding somehow the notion of

192
00:08:21,780 --> 00:08:24,120
ephemeral keys I mean that is not always

193
00:08:24,120 --> 00:08:26,340
described in the IB paper I'm just

194
00:08:26,340 --> 00:08:27,900
trying to give you some intuition of how

195
00:08:27,900 --> 00:08:30,419
it works but basically what you're going

196
00:08:30,419 --> 00:08:34,620
to do is you take a random value R you

197
00:08:34,620 --> 00:08:37,919
generate the nephemeral publicity PE and

198
00:08:37,919 --> 00:08:41,219
by Computing this time R times the

199
00:08:41,219 --> 00:08:44,820
pairing of your public key uh

200
00:08:44,820 --> 00:08:47,399
together with the message you will be

201
00:08:47,399 --> 00:08:49,680
able to extract by billionaireity or

202
00:08:49,680 --> 00:08:51,660
times the secret time the pairing of the

203
00:08:51,660 --> 00:08:53,580
generator and the message and you can do

204
00:08:53,580 --> 00:08:55,680
exactly the same once you've got the

205
00:08:55,680 --> 00:08:58,740
signature of the message P by Computing

206
00:08:58,740 --> 00:09:00,839
this time the pairing not of the

207
00:09:00,839 --> 00:09:04,019
generator and the signature but of the

208
00:09:04,019 --> 00:09:07,140
ephemeral key and the signature and that

209
00:09:07,140 --> 00:09:11,220
will give you the same final result and

210
00:09:11,220 --> 00:09:13,620
this is not using public information and

211
00:09:13,620 --> 00:09:16,080
so it's sort of a key agreement scheme

212
00:09:16,080 --> 00:09:16,860
right

213
00:09:16,860 --> 00:09:18,720
and that is really like the guess of

214
00:09:18,720 --> 00:09:21,000
what we'll be using what we do next is

215
00:09:21,000 --> 00:09:23,760
basically we'll be hashing that value to

216
00:09:23,760 --> 00:09:27,300
derive you know a fixed sized one-time

217
00:09:27,300 --> 00:09:30,180
pad key and will be hashing will be

218
00:09:30,180 --> 00:09:32,580
exorbing it with the message and that's

219
00:09:32,580 --> 00:09:34,260
it we've encrypted something we cannot

220
00:09:34,260 --> 00:09:36,720
decrypt until we've got the signature P

221
00:09:36,720 --> 00:09:39,620
for the message m

222
00:09:39,620 --> 00:09:43,140
and in practice actually because this is

223
00:09:43,140 --> 00:09:45,660
a real world crypto we add a few issues

224
00:09:45,660 --> 00:09:48,120
to do so because the legal entropy was

225
00:09:48,120 --> 00:09:51,200
running gear and in so-called chain mode

226
00:09:51,200 --> 00:09:54,600
and so the ash

227
00:09:54,600 --> 00:09:56,940
we wore signings where the ash of the

228
00:09:56,940 --> 00:09:59,459
Run number concatenated with the preview

229
00:09:59,459 --> 00:10:02,399
signature the idea being that if you

230
00:10:02,399 --> 00:10:04,320
want to sign a round in the future you

231
00:10:04,320 --> 00:10:06,540
know like I don't know round 10 you

232
00:10:06,540 --> 00:10:08,580
cannot sign it unless you know the

233
00:10:08,580 --> 00:10:11,700
previous signature for round nine and

234
00:10:11,700 --> 00:10:14,640
that seems like a stronger you know uh

235
00:10:14,640 --> 00:10:16,260
security

236
00:10:16,260 --> 00:10:18,720
assumption to not be able to sign future

237
00:10:18,720 --> 00:10:20,339
messages without knowing the previous

238
00:10:20,339 --> 00:10:22,800
signature but it's actually not really

239
00:10:22,800 --> 00:10:24,779
useful in our setting because we're

240
00:10:24,779 --> 00:10:26,700
assuming there is never a threshold

241
00:10:26,700 --> 00:10:29,339
amount of malicious nodes but as soon as

242
00:10:29,339 --> 00:10:31,080
there is a threshold amount of malicious

243
00:10:31,080 --> 00:10:33,180
nodes that are able to sign a future

244
00:10:33,180 --> 00:10:35,519
round they could also just be extracting

245
00:10:35,519 --> 00:10:37,560
the secret key instead and signing as

246
00:10:37,560 --> 00:10:39,300
many messages as they want or they could

247
00:10:39,300 --> 00:10:41,760
be signing all the intermediary messages

248
00:10:41,760 --> 00:10:44,480
they need in order to compute the future

249
00:10:44,480 --> 00:10:47,700
signature and so it wasn't too useful in

250
00:10:47,700 --> 00:10:49,800
our setting it would not improve really

251
00:10:49,800 --> 00:10:53,880
security and so what we did was simply

252
00:10:53,880 --> 00:10:56,459
we create we created a new scheme which

253
00:10:56,459 --> 00:10:59,519
was not using chained Randomness you

254
00:10:59,519 --> 00:11:02,160
know it was what we called Unchained and

255
00:11:02,160 --> 00:11:04,140
the messages that are getting signed are

256
00:11:04,140 --> 00:11:06,600
just the ash of the wrong number

257
00:11:06,600 --> 00:11:08,820
and that allowed us to solve the issue

258
00:11:08,820 --> 00:11:11,300
of not being able to predict the future

259
00:11:11,300 --> 00:11:13,860
messages that are going to be signed in

260
00:11:13,860 --> 00:11:16,079
the future which are acting as the

261
00:11:16,079 --> 00:11:19,920
public identity Keys basically

262
00:11:19,920 --> 00:11:23,640
another problem we've seen is that Duran

263
00:11:23,640 --> 00:11:25,079
was actually I mean it's not a big

264
00:11:25,079 --> 00:11:27,420
problem but if you want to use it on in

265
00:11:27,420 --> 00:11:29,640
blockchain ecosystems or on constraining

266
00:11:29,640 --> 00:11:33,000
devices or whatsoever given was running

267
00:11:33,000 --> 00:11:36,600
using the group G2 for signatures under

268
00:11:36,600 --> 00:11:40,680
group G1 for public keys and this

269
00:11:40,680 --> 00:11:43,140
actually is oh most people do threshold

270
00:11:43,140 --> 00:11:46,380
BLM BLS in general because it means you

271
00:11:46,380 --> 00:11:49,380
have a small public key on G1 and a much

272
00:11:49,380 --> 00:11:52,380
larger signature on G2 because G2 is

273
00:11:52,380 --> 00:11:54,240
actually an extension field of degree 2

274
00:11:54,240 --> 00:11:59,100
fg1 and also that means the mapping a

275
00:11:59,100 --> 00:12:01,200
message onto the group G2 is much more

276
00:12:01,200 --> 00:12:04,200
costlier than mapping it on G1 and that

277
00:12:04,200 --> 00:12:06,540
is a bit sad but why people do it in

278
00:12:06,540 --> 00:12:08,880
practice it's because usually what you

279
00:12:08,880 --> 00:12:10,920
do is you have multiple public Keys

280
00:12:10,920 --> 00:12:14,160
multiple signatures and thanks to the

281
00:12:14,160 --> 00:12:17,160
amomorphic properties of BLS or whatever

282
00:12:17,160 --> 00:12:18,959
you want to call them you can very

283
00:12:18,959 --> 00:12:21,480
easily aggregate these signatures into a

284
00:12:21,480 --> 00:12:23,640
single signature and you will keep all

285
00:12:23,640 --> 00:12:25,680
the public Keys you know so if you want

286
00:12:25,680 --> 00:12:27,240
to validate I don't know multiple

287
00:12:27,240 --> 00:12:29,399
transactions in a block you can have

288
00:12:29,399 --> 00:12:31,440
multiple public keys and just a single

289
00:12:31,440 --> 00:12:33,660
signature that is very nice in practice

290
00:12:33,660 --> 00:12:36,060
if what you're doing is I don't know a

291
00:12:36,060 --> 00:12:38,459
blockchain but we are not a blockchain

292
00:12:38,459 --> 00:12:40,920
we're not doing blockchain here so it

293
00:12:40,920 --> 00:12:42,480
was not too useful for us because we

294
00:12:42,480 --> 00:12:45,420
wanted each Beacon each random Beacon to

295
00:12:45,420 --> 00:12:48,300
have their own signature and so the easy

296
00:12:48,300 --> 00:12:50,700
installation was basically just to say

297
00:12:50,700 --> 00:12:54,000
swap them because it doesn't change

298
00:12:54,000 --> 00:12:56,639
anything for the billionaireity of the

299
00:12:56,639 --> 00:12:58,019
pairing you know you could use

300
00:12:58,019 --> 00:13:00,480
signatures on G1 which would be much

301
00:13:00,480 --> 00:13:05,279
smaller and public keys on G2 which are

302
00:13:05,279 --> 00:13:07,980
a bit bigger but we have just one group

303
00:13:07,980 --> 00:13:09,839
public key here for the world league of

304
00:13:09,839 --> 00:13:12,720
entropy and we don't really care about

305
00:13:12,720 --> 00:13:15,360
the size of that public key and then we

306
00:13:15,360 --> 00:13:17,940
have as many signatures as with beacons

307
00:13:17,940 --> 00:13:20,160
and so it's quite interesting in

308
00:13:20,160 --> 00:13:24,139
practice to have much smaller signatures

309
00:13:25,380 --> 00:13:27,959
um quick digression I guess so what we

310
00:13:27,959 --> 00:13:29,940
wanted to do was a practical time lock

311
00:13:29,940 --> 00:13:31,620
system something you could use today

312
00:13:31,620 --> 00:13:34,620
like you go on the internet you say oh I

313
00:13:34,620 --> 00:13:36,420
want to encrypt something for tomorrow

314
00:13:36,420 --> 00:13:39,660
and you can do it and so what we wanted

315
00:13:39,660 --> 00:13:41,519
it to be practical so we wanted to be

316
00:13:41,519 --> 00:13:44,160
able to encrypt big files and what

317
00:13:44,160 --> 00:13:46,620
people can do is either design a stream

318
00:13:46,620 --> 00:13:49,980
Cipher or design you know an in-breed

319
00:13:49,980 --> 00:13:52,440
encryptions key and that's just what we

320
00:13:52,440 --> 00:13:54,779
did and in order to do it very easily

321
00:13:54,779 --> 00:13:56,459
without caring about the implementation

322
00:13:56,459 --> 00:13:58,260
too much we chose to go with again

323
00:13:58,260 --> 00:14:00,720
because again is defining the notion of

324
00:14:00,720 --> 00:14:03,300
stanzas which are basically just team

325
00:14:03,300 --> 00:14:06,120
wrapping a symmetric key so again is

326
00:14:06,120 --> 00:14:08,160
going to take care of encrypting the

327
00:14:08,160 --> 00:14:12,839
data doing you know macing it doing a

328
00:14:12,839 --> 00:14:14,639
head Cipher on top of it whatsoever

329
00:14:14,639 --> 00:14:17,459
reading it and so on and we just need to

330
00:14:17,459 --> 00:14:20,040
wrap that symmetric key with our public

331
00:14:20,040 --> 00:14:21,779
scheme

332
00:14:21,779 --> 00:14:25,260
um and that's honestly something we're

333
00:14:25,260 --> 00:14:26,700
going to recommend doing in practice so

334
00:14:26,700 --> 00:14:28,079
if you're developing a post Quantum

335
00:14:28,079 --> 00:14:30,839
scheme or whatsoever a fancy scheme and

336
00:14:30,839 --> 00:14:32,639
you want to deploy a practical

337
00:14:32,639 --> 00:14:34,260
implementation you want to be able to

338
00:14:34,260 --> 00:14:37,200
encrypt tens of gigabyte of data create

339
00:14:37,200 --> 00:14:40,320
a custom stanza for again create a Aggie

340
00:14:40,320 --> 00:14:42,300
plugin and it just works it's really

341
00:14:42,300 --> 00:14:44,540
nice

342
00:14:44,820 --> 00:14:46,920
um I won't actually be going into the

343
00:14:46,920 --> 00:14:49,500
math details of our scheme because it's

344
00:14:49,500 --> 00:14:52,740
all an imprint anyway so I'm sorry is

345
00:14:52,740 --> 00:14:56,100
the advanced encryption session uh nope

346
00:14:56,100 --> 00:14:58,740
this is a very practical schema so we'll

347
00:14:58,740 --> 00:15:01,260
see how it works in practice

348
00:15:01,260 --> 00:15:02,940
and uh

349
00:15:02,940 --> 00:15:05,940
in practice our time lock is relying on

350
00:15:05,940 --> 00:15:07,920
the Drone Network run by the league of

351
00:15:07,920 --> 00:15:13,260
entropy so that network uh at the 100 up

352
00:15:13,260 --> 00:15:16,440
time since we launched in 2020 and this

353
00:15:16,440 --> 00:15:20,160
is really really nice and it's also

354
00:15:20,160 --> 00:15:22,500
showing that threshold networks are

355
00:15:22,500 --> 00:15:25,139
really really good at liveness as we've

356
00:15:25,139 --> 00:15:27,300
seen in the previous session uh it's

357
00:15:27,300 --> 00:15:30,360
really interesting to achieve a

358
00:15:30,360 --> 00:15:32,519
strong liveness properties to run a

359
00:15:32,519 --> 00:15:35,040
threshold Network we are currently

360
00:15:35,040 --> 00:15:37,279
releasing beacons every three seconds

361
00:15:37,279 --> 00:15:39,540
that means you cannot encrypt something

362
00:15:39,540 --> 00:15:42,240
for you know the next second unless

363
00:15:42,240 --> 00:15:45,300
you're I don't know you know on the

364
00:15:45,300 --> 00:15:47,760
on the multiple not on a multiple of

365
00:15:47,760 --> 00:15:50,760
three uh like three minutes anyway

366
00:15:50,760 --> 00:15:52,680
um it has a solid distribution Network

367
00:15:52,680 --> 00:15:55,139
to distribute the beacons so we are

368
00:15:55,139 --> 00:15:57,779
using cdns we have cloudflare with part

369
00:15:57,779 --> 00:15:59,160
of the league of entropy using the

370
00:15:59,160 --> 00:16:00,899
resilient Network to push the beacons

371
00:16:00,899 --> 00:16:04,560
user uh Edge servers we were using

372
00:16:04,560 --> 00:16:07,079
ourselves uh distribution network based

373
00:16:07,079 --> 00:16:09,199
on Amazon Cloud front we have a tour

374
00:16:09,199 --> 00:16:13,620
HTTP relay with gossip sub realize which

375
00:16:13,620 --> 00:16:17,100
are using a sub gossip mechanism to

376
00:16:17,100 --> 00:16:19,139
publish the the randomness for anybody

377
00:16:19,139 --> 00:16:22,380
to use so it's a pretty strong pretty

378
00:16:22,380 --> 00:16:25,199
solid Network and it's completely

379
00:16:25,199 --> 00:16:27,360
independent from time lapse

380
00:16:27,360 --> 00:16:30,360
so this is this doesn't care about time

381
00:16:30,360 --> 00:16:32,459
lock this is about producing public

382
00:16:32,459 --> 00:16:35,459
variable random beacons to using

383
00:16:35,459 --> 00:16:37,920
lotteries or to use insertations you

384
00:16:37,920 --> 00:16:40,680
know it's been used by um it's been like

385
00:16:40,680 --> 00:16:43,860
certified by some gambling companies to

386
00:16:43,860 --> 00:16:47,880
using their prng it's been used by uh

387
00:16:47,880 --> 00:16:50,100
like it's doing a leader election on

388
00:16:50,100 --> 00:16:52,560
filecoin it's being used well it's

389
00:16:52,560 --> 00:16:55,500
planned to be used to do sortitions to

390
00:16:55,500 --> 00:16:57,600
select people in Africa that would

391
00:16:57,600 --> 00:17:00,240
receive a universe Universal basic

392
00:17:00,240 --> 00:17:03,600
income through NGO to avoid you know any

393
00:17:03,600 --> 00:17:06,299
issue with Corruptions it's so it's

394
00:17:06,299 --> 00:17:08,939
independent from time luck entirely

395
00:17:08,939 --> 00:17:11,520
and at the bottom here we have the time

396
00:17:11,520 --> 00:17:13,980
lapse clients and the timeline client is

397
00:17:13,980 --> 00:17:15,119
just doing

398
00:17:15,119 --> 00:17:18,359
basically IB encryption using as a

399
00:17:18,359 --> 00:17:21,240
public identity key the future round

400
00:17:21,240 --> 00:17:23,280
message that will be signed in the

401
00:17:23,280 --> 00:17:26,760
future and it is it can add code the

402
00:17:26,760 --> 00:17:28,500
public key of the group you can compute

403
00:17:28,500 --> 00:17:30,840
as many as you want pairing based

404
00:17:30,840 --> 00:17:32,580
cryptography is not super fast but it's

405
00:17:32,580 --> 00:17:34,500
not super slow neither we can do a

406
00:17:34,500 --> 00:17:37,200
thousand encryption per second fairly

407
00:17:37,200 --> 00:17:40,080
easily so that just works and when you

408
00:17:40,080 --> 00:17:42,660
want to decrypt a timelocked message you

409
00:17:42,660 --> 00:17:44,520
just need to pull the signature from the

410
00:17:44,520 --> 00:17:46,980
different network for that round and

411
00:17:46,980 --> 00:17:49,679
you're able to decrypt it

412
00:17:49,679 --> 00:17:52,020
um we did it so we've released the go

413
00:17:52,020 --> 00:17:53,700
implementation a typescript

414
00:17:53,700 --> 00:17:56,400
implementation we've already seen a rest

415
00:17:56,400 --> 00:17:59,940
implementation pop-up so thank you Tebow

416
00:17:59,940 --> 00:18:01,679
for that

417
00:18:01,679 --> 00:18:03,299
um and so you can use it today if you

418
00:18:03,299 --> 00:18:06,000
want because we've also done a web demo

419
00:18:06,000 --> 00:18:08,520
actually which you can try now if you

420
00:18:08,520 --> 00:18:09,660
want

421
00:18:09,660 --> 00:18:11,820
um on your browser or on your mobile

422
00:18:11,820 --> 00:18:14,580
phone and it's deployed on the g-ron

423
00:18:14,580 --> 00:18:17,820
mainnet since March 1st it's been in the

424
00:18:17,820 --> 00:18:21,000
work since February 2022 so

425
00:18:21,000 --> 00:18:22,919
um we've done a lot of work to make it

426
00:18:22,919 --> 00:18:26,220
happen we added audited it's like live

427
00:18:26,220 --> 00:18:29,220
you can yeah rely on that and that is

428
00:18:29,220 --> 00:18:31,320
pretty cool so what remains to be done

429
00:18:31,320 --> 00:18:32,820
in practice

430
00:18:32,820 --> 00:18:34,799
um well it might be nice to look into

431
00:18:34,799 --> 00:18:37,919
post Quantum threshold signatures both

432
00:18:37,919 --> 00:18:41,580
Quantum IB schemes because there are not

433
00:18:41,580 --> 00:18:44,400
too many practical things there it might

434
00:18:44,400 --> 00:18:46,980
be cool to see actual applications using

435
00:18:46,980 --> 00:18:49,260
it you know to do seal bead or math

436
00:18:49,260 --> 00:18:51,059
prevention as we've seen in the last

437
00:18:51,059 --> 00:18:53,419
Talk of the previous session

438
00:18:53,419 --> 00:18:55,860
it might also be cool to be able to do

439
00:18:55,860 --> 00:18:57,539
some zero knowledge proofs on the

440
00:18:57,539 --> 00:18:59,460
content of the ciphertext that are

441
00:18:59,460 --> 00:19:01,200
getting time locked you know that might

442
00:19:01,200 --> 00:19:03,299
be also pretty interesting and sadly

443
00:19:03,299 --> 00:19:05,280
there are not too many implementation of

444
00:19:05,280 --> 00:19:09,840
BLS 12 381 so maybe we need to do a hack

445
00:19:09,840 --> 00:19:13,980
spec or whatsoever of BLS 12 381 to push

446
00:19:13,980 --> 00:19:15,840
forward a bit with adoption but anyway

447
00:19:15,840 --> 00:19:19,320
it's live it works and yeah if you have

448
00:19:19,320 --> 00:19:21,900
any questions we'll be around and we'll

449
00:19:21,900 --> 00:19:23,460
be hosting a Randomness Summit tomorrow

450
00:19:23,460 --> 00:19:26,280
we still have like 10 seats available if

451
00:19:26,280 --> 00:19:29,880
you're interested so yeah that's it

452
00:19:29,880 --> 00:19:30,910
thanks for that

453
00:19:30,910 --> 00:19:32,200
[Applause]

454
00:19:32,200 --> 00:19:35,499
[Music]

455
00:19:36,960 --> 00:19:40,640
anyone having a short question

456
00:19:42,840 --> 00:19:46,039
um so you mentioned pqib

457
00:19:46,039 --> 00:19:48,960
is there an actual need from your users

458
00:19:48,960 --> 00:19:50,520
from your client sites or do you think

459
00:19:50,520 --> 00:19:52,860
it's as a marketing

460
00:19:52,860 --> 00:19:55,620
not really it's more like a fear you

461
00:19:55,620 --> 00:19:57,960
know because we've seen the missed call

462
00:19:57,960 --> 00:20:01,020
for threshold and it says please do

463
00:20:01,020 --> 00:20:04,140
threshold PQ but it also says you can

464
00:20:04,140 --> 00:20:06,780
also propose new schemes that are not PQ

465
00:20:06,780 --> 00:20:08,640
as long as they're a kind of new you

466
00:20:08,640 --> 00:20:12,600
know so this is based on the discrete

467
00:20:12,600 --> 00:20:15,539
logarithm problem so it's using elliptic

468
00:20:15,539 --> 00:20:19,380
curves so yeah we've seen also the patch

469
00:20:19,380 --> 00:20:21,720
for migrating away from

470
00:20:21,720 --> 00:20:24,299
um you know the classical crypto to move

471
00:20:24,299 --> 00:20:26,460
to post Quantum crypto without doing

472
00:20:26,460 --> 00:20:28,799
hybrid so without mixing together

473
00:20:28,799 --> 00:20:31,200
elliptic curves and post Quantum so it's

474
00:20:31,200 --> 00:20:33,539
like yeah that looks fishy maybe it

475
00:20:33,539 --> 00:20:35,160
would be great to have other schemes to

476
00:20:35,160 --> 00:20:36,299
do the same thing

477
00:20:36,299 --> 00:20:39,299
but that's it

478
00:20:39,299 --> 00:20:40,919
please join me in thanking your land

479
00:20:40,919 --> 00:20:41,650
again

480
00:20:41,650 --> 00:20:43,430
[Applause]

481
00:20:43,430 --> 00:20:44,650
[Music]

482
00:20:44,650 --> 00:20:45,630
[Applause]

483
00:20:45,630 --> 00:20:48,759
[Music]

484
00:20:53,520 --> 00:20:56,400
so our next talk in the session is on

485
00:20:56,400 --> 00:20:58,860
portunus um

486
00:20:58,860 --> 00:21:03,900
and access control scheme based on Abe

487
00:21:03,900 --> 00:21:06,240
and uh Tanya is going to give the talk

488
00:21:06,240 --> 00:21:09,380
please take it away

489
00:21:10,180 --> 00:21:12,480
[Music]

490
00:21:12,480 --> 00:21:16,020
all right uh hello everyone I'm Tanya

491
00:21:16,020 --> 00:21:19,440
and today I'll be discussing portunus

492
00:21:19,440 --> 00:21:22,919
which is a geographic key management

493
00:21:22,919 --> 00:21:25,140
system deployed cloudflare

494
00:21:25,140 --> 00:21:29,640
fortunes is uh uh uh attribute

495
00:21:29,640 --> 00:21:31,919
opportunist is based on attribute-based

496
00:21:31,919 --> 00:21:35,520
encryption and to our knowledge it's the

497
00:21:35,520 --> 00:21:39,419
first Abe scheme deployed at such a

498
00:21:39,419 --> 00:21:41,280
large scale

499
00:21:41,280 --> 00:21:46,260
so during RWC 2018 Nick Sullivan gave a

500
00:21:46,260 --> 00:21:49,799
presentation on Geo key manager which

501
00:21:49,799 --> 00:21:53,460
was the predecessor of the system but

502
00:21:53,460 --> 00:21:55,799
the features and

503
00:21:55,799 --> 00:21:59,340
uh the security guarantees that were

504
00:21:59,340 --> 00:22:00,600
offered by that system were

505
00:22:00,600 --> 00:22:04,140
unfortunately lacking and fortunes is

506
00:22:04,140 --> 00:22:06,240
our answer to that

507
00:22:06,240 --> 00:22:10,940
I'd also like to convince you today that

508
00:22:10,940 --> 00:22:14,100
attribute-based encryption is naturally

509
00:22:14,100 --> 00:22:18,419
symbiotic with distributed systems and

510
00:22:18,419 --> 00:22:22,380
it's a great alternative to consider as

511
00:22:22,380 --> 00:22:24,840
opposed to the usual strategy of relying

512
00:22:24,840 --> 00:22:28,380
on a uh of relying on a central Arbiter

513
00:22:28,380 --> 00:22:31,620
to enforce Access Control

514
00:22:31,620 --> 00:22:35,280
so with that let's get started

515
00:22:35,280 --> 00:22:39,559
so imagine we imagine we have a bank

516
00:22:39,559 --> 00:22:41,820
based on the European Union that's a

517
00:22:41,820 --> 00:22:43,260
customer of cloudflare

518
00:22:43,260 --> 00:22:45,679
and

519
00:22:45,679 --> 00:22:48,780
this this Bank uh

520
00:22:48,780 --> 00:22:52,799
needs to upload their TLS certificate to

521
00:22:52,799 --> 00:22:54,960
cloudflare in order for us to be able to

522
00:22:54,960 --> 00:22:58,400
terminate TLS on their behalf so

523
00:22:58,400 --> 00:23:01,679
this means that their request is going

524
00:23:01,679 --> 00:23:04,020
to go to the core or the control plan

525
00:23:04,020 --> 00:23:07,039
and cluster which handles API traffic

526
00:23:07,039 --> 00:23:12,840
for for every API request uh this the

527
00:23:12,840 --> 00:23:14,640
certificate manager that exists in the

528
00:23:14,640 --> 00:23:18,720
core will then encrypt the the customer

529
00:23:18,720 --> 00:23:22,080
signing key with the master public key

530
00:23:22,080 --> 00:23:25,020
that's shared across all nodes at

531
00:23:25,020 --> 00:23:26,820
cloudflare across the entire Edge

532
00:23:26,820 --> 00:23:29,780
fleeted cloudflare

533
00:23:31,640 --> 00:23:36,200
next uh the it will get put into

534
00:23:36,200 --> 00:23:39,900
Quicksilver which is an embeddable key

535
00:23:39,900 --> 00:23:42,000
value store that's that's a globally

536
00:23:42,000 --> 00:23:44,400
synchronized uh key value store that we

537
00:23:44,400 --> 00:23:47,640
use to manage service configurations uh

538
00:23:47,640 --> 00:23:49,620
and Quicksilver will replicate the thing

539
00:23:49,620 --> 00:23:52,200
throughout the network and this means

540
00:23:52,200 --> 00:23:54,480
that every machine and every data center

541
00:23:54,480 --> 00:23:57,059
will get a local copy of this customer's

542
00:23:57,059 --> 00:23:59,880
encrypted key

543
00:23:59,880 --> 00:24:04,260
but Aaron likes to catch this Bank does

544
00:24:04,260 --> 00:24:06,179
not want its key to be accessible

545
00:24:06,179 --> 00:24:09,480
outside of EU based data centers so what

546
00:24:09,480 --> 00:24:12,200
can we do here

547
00:24:12,240 --> 00:24:14,220
so the first thing that comes to mind is

548
00:24:14,220 --> 00:24:17,039
to Simply centralize uh Access Control

549
00:24:17,039 --> 00:24:18,840
in the core

550
00:24:18,840 --> 00:24:21,360
but there's

551
00:24:21,360 --> 00:24:24,840
a reason that we build this globally

552
00:24:24,840 --> 00:24:27,360
synced key value store in the first

553
00:24:27,360 --> 00:24:32,159
place that because we can't rely on on

554
00:24:32,159 --> 00:24:34,620
making round trips to the core for

555
00:24:34,620 --> 00:24:37,159
something as fundamental as TLS

556
00:24:37,159 --> 00:24:40,740
termination and it it would sort of

557
00:24:40,740 --> 00:24:42,840
defeat the point of building this huge

558
00:24:42,840 --> 00:24:45,900
Global Network in the first place

559
00:24:45,900 --> 00:24:49,919
so uh this is uh you know we we need the

560
00:24:49,919 --> 00:24:52,159
low latency and fault tolerance that

561
00:24:52,159 --> 00:24:55,760
Quicksilver would give us

562
00:24:56,039 --> 00:24:59,460
so the the third option is to use uh

563
00:24:59,460 --> 00:25:01,980
traditional public key cryptography so

564
00:25:01,980 --> 00:25:03,000
here

565
00:25:03,000 --> 00:25:07,320
instead of issuing a single key a single

566
00:25:07,320 --> 00:25:11,220
master key we issue separate uh keys for

567
00:25:11,220 --> 00:25:14,760
every Data Center and we wrap the

568
00:25:14,760 --> 00:25:17,760
customers signing key with the set of

569
00:25:17,760 --> 00:25:21,679
keys of the authorized data centers

570
00:25:21,960 --> 00:25:26,700
but here as you can see the the storage

571
00:25:26,700 --> 00:25:29,039
overhead actually becomes pretty large

572
00:25:29,039 --> 00:25:31,919
especially as we try to scale the system

573
00:25:31,919 --> 00:25:34,980
to billions of certificates so this is

574
00:25:34,980 --> 00:25:38,220
this is unfortunately not possible

575
00:25:38,220 --> 00:25:41,159
so given all those uh solutions that we

576
00:25:41,159 --> 00:25:44,400
looked at we started to whittle down to

577
00:25:44,400 --> 00:25:46,740
some some system requirements that we

578
00:25:46,740 --> 00:25:50,820
hope to achieve with our system and uh

579
00:25:50,820 --> 00:25:53,640
you know these are based on customer

580
00:25:53,640 --> 00:25:55,799
feedback customer needs as well as

581
00:25:55,799 --> 00:25:58,200
internal engineering goals

582
00:25:58,200 --> 00:26:00,419
so as you can see attribute-based

583
00:26:00,419 --> 00:26:03,840
encryption helps us with most of these

584
00:26:03,840 --> 00:26:05,820
or at least gives us the building blocks

585
00:26:05,820 --> 00:26:08,220
in order to be able to efficiently

586
00:26:08,220 --> 00:26:10,799
implement this sort of scheme the only

587
00:26:10,799 --> 00:26:12,419
thing that you don't get out of the box

588
00:26:12,419 --> 00:26:15,419
here is key rotation uh which you have

589
00:26:15,419 --> 00:26:18,900
to build on top of the system

590
00:26:18,900 --> 00:26:21,320
so let's take a really simple example of

591
00:26:21,320 --> 00:26:24,240
attribute-based uh encryption so we're

592
00:26:24,240 --> 00:26:26,279
going to only talk about ciphertext

593
00:26:26,279 --> 00:26:29,279
policy Abe which is the more natural

594
00:26:29,279 --> 00:26:32,580
form of Abe in terms of how Access

595
00:26:32,580 --> 00:26:36,840
Control gets expressed so here we have a

596
00:26:36,840 --> 00:26:39,299
ciphertext that's encrypted and policy

597
00:26:39,299 --> 00:26:43,320
country us or region EU and

598
00:26:43,320 --> 00:26:45,659
as you can see it can be decrypted by

599
00:26:45,659 --> 00:26:48,480
either of those two regions

600
00:26:48,480 --> 00:26:51,480
so we can also do negations we can do

601
00:26:51,480 --> 00:26:53,700
conjunctions and we can compose all of

602
00:26:53,700 --> 00:26:57,059
these uh different attributes in in

603
00:26:57,059 --> 00:27:00,080
various ways

604
00:27:00,419 --> 00:27:03,179
so given those uh characteristics that

605
00:27:03,179 --> 00:27:04,640
we just saw

606
00:27:04,640 --> 00:27:08,220
that led us on a hunt to find a scheme

607
00:27:08,220 --> 00:27:10,919
that would satisfy several of these

608
00:27:10,919 --> 00:27:13,020
properties so the first thing that we

609
00:27:13,020 --> 00:27:14,940
looked at was negation

610
00:27:14,940 --> 00:27:17,700
so every attribute-based encryption

611
00:27:17,700 --> 00:27:20,400
scheme will give you monotonic Boolean

612
00:27:20,400 --> 00:27:23,159
formulas out of the box so that includes

613
00:27:23,159 --> 00:27:27,720
ants and ores but in order to find a

614
00:27:27,720 --> 00:27:30,720
negation or not uh you have to look a

615
00:27:30,720 --> 00:27:33,900
little bit uh harder and it's further

616
00:27:33,900 --> 00:27:36,860
Complicated by the fact that negation

617
00:27:36,860 --> 00:27:40,919
comes in various different uh

618
00:27:40,919 --> 00:27:44,460
flavors I guess and you have to pick the

619
00:27:44,460 --> 00:27:46,559
one that's that's most suitable for your

620
00:27:46,559 --> 00:27:47,700
task

621
00:27:47,700 --> 00:27:53,220
a large universe so this refers to

622
00:27:53,220 --> 00:27:55,799
um being able to use arbitrary strings

623
00:27:55,799 --> 00:27:58,260
for your attributes the other thing this

624
00:27:58,260 --> 00:28:02,340
gives us is it lets you not have to

625
00:28:02,340 --> 00:28:04,860
define or not have to predefine your

626
00:28:04,860 --> 00:28:06,779
entire set of attributes right from the

627
00:28:06,779 --> 00:28:08,039
outset

628
00:28:08,039 --> 00:28:10,260
and this is pretty important because

629
00:28:10,260 --> 00:28:13,260
imagine you get you have to implement a

630
00:28:13,260 --> 00:28:17,340
new Regulatory Compliance uh policy so

631
00:28:17,340 --> 00:28:20,100
you could just add a new new attribute

632
00:28:20,100 --> 00:28:21,779
you don't have to like re-instantiate

633
00:28:21,779 --> 00:28:24,779
your entire scheme all over again

634
00:28:24,779 --> 00:28:27,059
next is repeated attributes so this is

635
00:28:27,059 --> 00:28:30,120
just yeah ease of ease of use helps you

636
00:28:30,120 --> 00:28:35,340
make it more interesting uh policies and

637
00:28:35,340 --> 00:28:38,340
then finally pretty much all AB schemes

638
00:28:38,340 --> 00:28:41,100
are presented in a form that's secure

639
00:28:41,100 --> 00:28:43,740
against plain text attacks but we were

640
00:28:43,740 --> 00:28:46,740
looking for uh security against chosen

641
00:28:46,740 --> 00:28:48,720
cyber text attacks that we could

642
00:28:48,720 --> 00:28:52,860
Implement in in a decently efficient way

643
00:28:52,860 --> 00:28:55,860
so the scheme that we could Verge onto

644
00:28:55,860 --> 00:28:59,220
was the tkn20 scheme uh and it's based

645
00:28:59,220 --> 00:29:01,380
on the Matrix decisional diffie-hellman

646
00:29:01,380 --> 00:29:07,260
assumption that's uh an extension of the

647
00:29:07,260 --> 00:29:10,320
the classic development assumption that

648
00:29:10,320 --> 00:29:14,760
applies in certain scenarios that relate

649
00:29:14,760 --> 00:29:18,059
to bilinear pairings and it's got this

650
00:29:18,059 --> 00:29:21,299
interesting thing going on where uh so

651
00:29:21,299 --> 00:29:23,640
that's that's not really a real thing

652
00:29:23,640 --> 00:29:26,520
from like the the scheme but the idea is

653
00:29:26,520 --> 00:29:28,440
that there's there's matrices in the

654
00:29:28,440 --> 00:29:30,679
exponents and that leads so all sorts of

655
00:29:30,679 --> 00:29:33,419
performance overheads and we'll maybe

656
00:29:33,419 --> 00:29:37,440
talk about that in a bit uh and then the

657
00:29:37,440 --> 00:29:39,120
second thing we try to do is do the

658
00:29:39,120 --> 00:29:41,880
transformation from CPA to CCA and we

659
00:29:41,880 --> 00:29:43,860
were able to do this using internal

660
00:29:43,860 --> 00:29:46,860
wildcards and the well-known voting caps

661
00:29:46,860 --> 00:29:48,240
transformation

662
00:29:48,240 --> 00:29:51,360
and finally uh we open source this into

663
00:29:51,360 --> 00:29:55,279
our cryptographic Suites Library Circle

664
00:29:55,279 --> 00:30:00,059
this is based on so we implemented the

665
00:30:00,059 --> 00:30:02,760
scheme and we used our pre-existing

666
00:30:02,760 --> 00:30:06,240
pairings implementation called uh for

667
00:30:06,240 --> 00:30:08,419
for BLS 12

668
00:30:08,419 --> 00:30:09,980
and

669
00:30:09,980 --> 00:30:12,600
this is actually this is an important

670
00:30:12,600 --> 00:30:14,520
note here because

671
00:30:14,520 --> 00:30:17,279
you have to pick the right pairing curve

672
00:30:17,279 --> 00:30:19,020
as well as the right implementation for

673
00:30:19,020 --> 00:30:22,380
your use case because it as it turns out

674
00:30:22,380 --> 00:30:24,620
since a b is built on top of pairings

675
00:30:24,620 --> 00:30:28,080
the the Baseline speed of your scheme is

676
00:30:28,080 --> 00:30:30,960
going to be very closely related to the

677
00:30:30,960 --> 00:30:33,299
the speed at which you can do pairing

678
00:30:33,299 --> 00:30:35,840
operations

679
00:30:36,539 --> 00:30:38,520
all right so let's let's take a look at

680
00:30:38,520 --> 00:30:41,539
how the scheme is actually designed

681
00:30:41,539 --> 00:30:44,520
so the first thing is key distribution

682
00:30:44,520 --> 00:30:49,440
so in this case uh we have the core and

683
00:30:49,440 --> 00:30:51,360
in the core we have this key generation

684
00:30:51,360 --> 00:30:53,760
Authority that exists in a very tightly

685
00:30:53,760 --> 00:30:56,399
controlled environment

686
00:30:56,399 --> 00:30:58,399
uh and

687
00:30:58,399 --> 00:31:02,820
this uh this is this Authority uh holds

688
00:31:02,820 --> 00:31:07,520
the master secret key and uh IT issues

689
00:31:07,520 --> 00:31:10,799
attribute-based secret keys to uh to the

690
00:31:10,799 --> 00:31:15,020
various Edge machines that we have

691
00:31:15,059 --> 00:31:15,960
um

692
00:31:15,960 --> 00:31:20,100
and uh the the attributes that are

693
00:31:20,100 --> 00:31:23,340
presented here are validated by the key

694
00:31:23,340 --> 00:31:26,039
generation Authority using a machine

695
00:31:26,039 --> 00:31:28,799
provisioning database that maintains a

696
00:31:28,799 --> 00:31:31,380
map of machines to attribute values

697
00:31:31,380 --> 00:31:34,260
amongst other things and again right

698
00:31:34,260 --> 00:31:36,539
access to this this database is also

699
00:31:36,539 --> 00:31:39,799
very strictly controlled

700
00:31:39,840 --> 00:31:43,320
encryption is pretty straightforward uh

701
00:31:43,320 --> 00:31:47,000
you you have the customer uploads their

702
00:31:47,000 --> 00:31:49,919
their certificate and the associated

703
00:31:49,919 --> 00:31:54,299
signing key and the the certificate

704
00:31:54,299 --> 00:31:56,100
manager in the core

705
00:31:56,100 --> 00:31:59,220
encrypts that under an access policy

706
00:31:59,220 --> 00:32:01,740
that the customer has specified using

707
00:32:01,740 --> 00:32:03,659
the master public key

708
00:32:03,659 --> 00:32:08,340
it then puts the places the uh the

709
00:32:08,340 --> 00:32:11,159
wrapped key into Quicksilver which is

710
00:32:11,159 --> 00:32:13,140
the key value store that we we talked

711
00:32:13,140 --> 00:32:15,320
about and that

712
00:32:15,320 --> 00:32:20,240
takes the key to every every machine

713
00:32:20,240 --> 00:32:21,960
decryption is a little bit more

714
00:32:21,960 --> 00:32:25,140
interesting so uh let's see so we start

715
00:32:25,140 --> 00:32:29,520
off with uh a user that wants to connect

716
00:32:29,520 --> 00:32:32,460
to our customers website so they when

717
00:32:32,460 --> 00:32:34,020
they make that request they reach the

718
00:32:34,020 --> 00:32:37,880
nearest uh cloudflare Data Center

719
00:32:37,880 --> 00:32:41,820
the TLs termination service in this data

720
00:32:41,820 --> 00:32:45,779
center is able to so it tries to fetch

721
00:32:45,779 --> 00:32:47,820
the customer's wrapped key from

722
00:32:47,820 --> 00:32:50,279
Quicksilver and tries to decrypt it

723
00:32:50,279 --> 00:32:52,320
using the attribute secret key that is

724
00:32:52,320 --> 00:32:54,720
present on the machine

725
00:32:54,720 --> 00:32:58,799
if it's successful great it can get the

726
00:32:58,799 --> 00:33:01,740
key perform the TLs signature and it's

727
00:33:01,740 --> 00:33:05,700
done otherwise if it can decrypt it

728
00:33:05,700 --> 00:33:08,940
it sends it to the closest cloudflare

729
00:33:08,940 --> 00:33:11,399
data center that can in fact decrypt it

730
00:33:11,399 --> 00:33:14,640
and satisfies the the set of policies uh

731
00:33:14,640 --> 00:33:16,740
that unsatisfies the set of attributes

732
00:33:16,740 --> 00:33:20,059
the policy requires

733
00:33:20,279 --> 00:33:22,740
and assuming everything goes well they

734
00:33:22,740 --> 00:33:25,260
should be able to decrypt it get the key

735
00:33:25,260 --> 00:33:28,158
sign the message

736
00:33:28,919 --> 00:33:33,240
uh so in terms of performance it's it's

737
00:33:33,240 --> 00:33:36,000
important to figure out what matters for

738
00:33:36,000 --> 00:33:38,519
your use case so in our case decryption

739
00:33:38,519 --> 00:33:40,019
is really the only operation that we

740
00:33:40,019 --> 00:33:43,620
cared about and while we were optimizing

741
00:33:43,620 --> 00:33:46,080
some of our pairings as well like this

742
00:33:46,080 --> 00:33:48,179
this is the path that we try to optimize

743
00:33:48,179 --> 00:33:51,059
the most so I'm sure there's like

744
00:33:51,059 --> 00:33:54,600
numerous places where we can we can

745
00:33:54,600 --> 00:33:57,059
improve the other algorithms but it just

746
00:33:57,059 --> 00:33:59,880
did not matter too much to us uh but

747
00:33:59,880 --> 00:34:03,059
here we're again benchmarking against uh

748
00:34:03,059 --> 00:34:06,000
policy sides of 50. it's not really

749
00:34:06,000 --> 00:34:08,280
practical for us like for us typically

750
00:34:08,280 --> 00:34:10,139
it's going to be somewhere around three

751
00:34:10,139 --> 00:34:15,060
to four attributes and uh yeah as you

752
00:34:15,060 --> 00:34:17,040
can see it's it's still pretty pretty

753
00:34:17,040 --> 00:34:20,399
bad uh compared to what what you usually

754
00:34:20,399 --> 00:34:22,638
get

755
00:34:23,339 --> 00:34:27,000
so like all good computer scientists we

756
00:34:27,000 --> 00:34:28,320
resorted to adding a layer of

757
00:34:28,320 --> 00:34:30,260
indirection to solve our problem

758
00:34:30,260 --> 00:34:35,280
uh we did what is similar to public key

759
00:34:35,280 --> 00:34:39,480
encryption where you don't use the the

760
00:34:39,480 --> 00:34:41,639
public keys to encrypt large swaths of

761
00:34:41,639 --> 00:34:44,460
data we do the same here where we

762
00:34:44,460 --> 00:34:48,000
generate an x25519 key pair that

763
00:34:48,000 --> 00:34:52,139
corresponds to Unique policies and

764
00:34:52,139 --> 00:34:54,899
that's what we use to actually encrypt

765
00:34:54,899 --> 00:34:58,220
the the customers keys and

766
00:34:58,220 --> 00:35:02,160
further the the policy key itself is

767
00:35:02,160 --> 00:35:04,380
encrypted using Abe under whatever

768
00:35:04,380 --> 00:35:07,440
policy is associated with it

769
00:35:07,440 --> 00:35:10,680
and this uh combined with caching at the

770
00:35:10,680 --> 00:35:13,560
edge helps us reduce the decryption cost

771
00:35:13,560 --> 00:35:17,060
by a really significant amount

772
00:35:17,060 --> 00:35:19,800
and it also facilitates key rotation

773
00:35:19,800 --> 00:35:23,640
amongst many other uh ways that we do

774
00:35:23,640 --> 00:35:26,420
that because it helps us

775
00:35:26,420 --> 00:35:28,920
not have to because because the number

776
00:35:28,920 --> 00:35:31,800
of policy keys that we have is much

777
00:35:31,800 --> 00:35:34,320
lower than the number of customers so we

778
00:35:34,320 --> 00:35:36,540
have uh this lets us only have to

779
00:35:36,540 --> 00:35:39,119
re-wrap a small handful of policies as

780
00:35:39,119 --> 00:35:42,359
opposed to having to re-wrap a large

781
00:35:42,359 --> 00:35:46,380
spot of customer keys if we were doing

782
00:35:46,380 --> 00:35:49,800
the previous version

783
00:35:49,800 --> 00:35:53,040
so in terms of challenges uh there's

784
00:35:53,040 --> 00:35:55,500
there are several of them there's the

785
00:35:55,500 --> 00:35:58,200
reason that AB is not very commonly used

786
00:35:58,200 --> 00:36:01,140
and when we ran into quite a few

787
00:36:01,140 --> 00:36:05,579
so uh the first uh first thing was uh

788
00:36:05,579 --> 00:36:07,200
when we were

789
00:36:07,200 --> 00:36:10,099
well we learned that uh

790
00:36:10,099 --> 00:36:13,700
useful and efficient Abe schemes are

791
00:36:13,700 --> 00:36:16,619
surprisingly recent because even back in

792
00:36:16,619 --> 00:36:19,800
2016 when we were trying to build the

793
00:36:19,800 --> 00:36:23,099
the older version of of this system

794
00:36:23,099 --> 00:36:27,000
Gokey manager we weren't able to find a

795
00:36:27,000 --> 00:36:29,220
scheme that particularly had negation

796
00:36:29,220 --> 00:36:32,040
and was still uh efficient enough so

797
00:36:32,040 --> 00:36:35,460
instead we sort of ended up simulating a

798
00:36:35,460 --> 00:36:37,980
b using a combination of identity based

799
00:36:37,980 --> 00:36:42,119
encryption and broadcast encryption but

800
00:36:42,119 --> 00:36:45,720
the the foundational property of ABA is

801
00:36:45,720 --> 00:36:47,760
collusion resistance and that's also

802
00:36:47,760 --> 00:36:51,000
what makes it hard in the first place so

803
00:36:51,000 --> 00:36:52,500
this definitely did not have any

804
00:36:52,500 --> 00:36:55,680
Collision resistance but there were

805
00:36:55,680 --> 00:36:57,119
there were other number of other

806
00:36:57,119 --> 00:37:01,980
problems it was very inflexible uh it

807
00:37:01,980 --> 00:37:04,500
did not allow us to add new attributes

808
00:37:04,500 --> 00:37:06,599
after the original scheme was

809
00:37:06,599 --> 00:37:09,859
instantiated it didn't let us

810
00:37:09,859 --> 00:37:14,420
handle newly added data centers or

811
00:37:14,420 --> 00:37:17,760
deleted or reorganized data centers

812
00:37:17,760 --> 00:37:21,540
so on uh next is

813
00:37:21,540 --> 00:37:25,920
the the task of translating a research

814
00:37:25,920 --> 00:37:29,760
paper into usable and scalable code is

815
00:37:29,760 --> 00:37:33,359
it's very burdensome and especially with

816
00:37:33,359 --> 00:37:37,160
uh some of these schemes where small

817
00:37:37,160 --> 00:37:39,900
supposedly trivial steps can conceal

818
00:37:39,900 --> 00:37:43,260
very significant computational uh

819
00:37:43,260 --> 00:37:46,380
resources so we we had to watch out for

820
00:37:46,380 --> 00:37:50,760
that uh choosing parameters uh again it

821
00:37:50,760 --> 00:37:53,880
you have to understand how different

822
00:37:53,880 --> 00:37:56,940
parameters affect your application and

823
00:37:56,940 --> 00:37:59,099
we actually when we were doing the the

824
00:37:59,099 --> 00:38:03,960
transform from CPA to CCA we ran into a

825
00:38:03,960 --> 00:38:06,359
an issue in this area but I don't think

826
00:38:06,359 --> 00:38:10,740
of time to go into that uh pairings of

827
00:38:10,740 --> 00:38:13,440
course that's yeah they're they're not

828
00:38:13,440 --> 00:38:15,839
standardized they're unfamiliar they add

829
00:38:15,839 --> 00:38:18,660
a lot of engineering overhead uh and

830
00:38:18,660 --> 00:38:20,400
yeah finally the path to post on it

831
00:38:20,400 --> 00:38:23,520
maybe is definitely unclear

832
00:38:23,520 --> 00:38:26,099
and there were a lot of other challenges

833
00:38:26,099 --> 00:38:28,619
right like networking

834
00:38:28,619 --> 00:38:29,240
um

835
00:38:29,240 --> 00:38:33,060
it's it's not you you can't just send

836
00:38:33,060 --> 00:38:36,180
requests to whatever is closest you have

837
00:38:36,180 --> 00:38:38,880
to also figure out whether or not that

838
00:38:38,880 --> 00:38:41,220
other data center has the capacity to

839
00:38:41,220 --> 00:38:44,280
possibly handle it this is just one of

840
00:38:44,280 --> 00:38:47,579
the things but there are several here

841
00:38:47,579 --> 00:38:50,040
Key Management key rotation the talk at

842
00:38:50,040 --> 00:38:53,400
Google really covered a lot of the

843
00:38:53,400 --> 00:38:55,920
issues that you have to think about

844
00:38:55,920 --> 00:38:58,320
um operational maintenance and buy-in

845
00:38:58,320 --> 00:39:00,500
from other teams so this is

846
00:39:00,500 --> 00:39:04,200
uh this is something that um if you

847
00:39:04,200 --> 00:39:06,380
deploy Advanced crypto

848
00:39:06,380 --> 00:39:09,180
to something that's as critical as like

849
00:39:09,180 --> 00:39:11,460
the TLs termination stack

850
00:39:11,460 --> 00:39:13,920
then there's bound to be problems that

851
00:39:13,920 --> 00:39:15,780
maybe are not related to your service

852
00:39:15,780 --> 00:39:17,220
but are related to other services

853
00:39:17,220 --> 00:39:21,980
occasionally and when that happens SRE

854
00:39:21,980 --> 00:39:24,960
Engineers are usually looking into this

855
00:39:24,960 --> 00:39:28,800
stuff and it's the the crypto part just

856
00:39:28,800 --> 00:39:31,619
appears as a block Black Box to you know

857
00:39:31,619 --> 00:39:33,300
other teams that are interfacing with

858
00:39:33,300 --> 00:39:37,260
your uh piece of the pie so that can

859
00:39:37,260 --> 00:39:38,760
sometimes be challenging in terms of

860
00:39:38,760 --> 00:39:41,180
Maintenance because you you have to keep

861
00:39:41,180 --> 00:39:46,020
uh trying to you explain what you did

862
00:39:46,020 --> 00:39:48,720
and why it's not the crypto that could

863
00:39:48,720 --> 00:39:50,960
is is at fault

864
00:39:50,960 --> 00:39:55,020
and policy uh yeah the encrypted data

865
00:39:55,020 --> 00:39:57,300
still lives in restricted regions so

866
00:39:57,300 --> 00:39:59,760
this is this is a very interesting angle

867
00:39:59,760 --> 00:40:01,700
because

868
00:40:01,700 --> 00:40:04,920
yeah it's not accessible in those

869
00:40:04,920 --> 00:40:08,160
regions but sometimes conveying this to

870
00:40:08,160 --> 00:40:13,680
lawyers and customers can be interesting

871
00:40:13,680 --> 00:40:16,740
so we have a number of uh features that

872
00:40:16,740 --> 00:40:19,079
we would potentially like to see in

873
00:40:19,079 --> 00:40:21,420
these schemes so quickly there's

874
00:40:21,420 --> 00:40:25,020
attribute changes this is it's easy

875
00:40:25,020 --> 00:40:27,180
enough to add new attributes but it's

876
00:40:27,180 --> 00:40:29,940
very difficult to change attribute

877
00:40:29,940 --> 00:40:33,060
values or to deal with negation in these

878
00:40:33,060 --> 00:40:36,960
in these contexts so uh and quickly the

879
00:40:36,960 --> 00:40:39,240
Dual system encryption this refers to

880
00:40:39,240 --> 00:40:42,060
the Matrix uh the matrices and the

881
00:40:42,060 --> 00:40:43,740
exponent structure that I talked about

882
00:40:43,740 --> 00:40:47,040
earlier uh this this system is really

883
00:40:47,040 --> 00:40:49,500
good for creating strong security proofs

884
00:40:49,500 --> 00:40:52,200
but it actually incurs a significant

885
00:40:52,200 --> 00:40:55,560
performance hit on all the operations

886
00:40:55,560 --> 00:40:59,640
and sometimes things like negation

887
00:40:59,640 --> 00:41:02,460
could be added to schemes but they

888
00:41:02,460 --> 00:41:05,160
they're not so you know to researchers

889
00:41:05,160 --> 00:41:08,480
would be good to have

890
00:41:08,480 --> 00:41:11,940
uh finally I want to conclude by saying

891
00:41:11,940 --> 00:41:14,220
that in our case

892
00:41:14,220 --> 00:41:18,660
we had to use Abe because of quicksilver

893
00:41:18,660 --> 00:41:22,920
but uh I just want to reiterate what why

894
00:41:22,920 --> 00:41:25,280
that is a constraint in the first place

895
00:41:25,280 --> 00:41:29,700
so for we've built out this huge Network

896
00:41:29,700 --> 00:41:32,400
we don't want to have a Reliance on the

897
00:41:32,400 --> 00:41:35,820
core throughout the whole process

898
00:41:35,820 --> 00:41:37,980
um so Quicksilver gets us the low

899
00:41:37,980 --> 00:41:40,380
latency and the fault tolerance that we

900
00:41:40,380 --> 00:41:41,579
need

901
00:41:41,579 --> 00:41:42,420
um

902
00:41:42,420 --> 00:41:46,380
and Quicksilver also has a parts of it

903
00:41:46,380 --> 00:41:48,420
have an interesting replication strategy

904
00:41:48,420 --> 00:41:51,740
where uh there's communication between

905
00:41:51,740 --> 00:41:54,060
different nodes that don't necessarily

906
00:41:54,060 --> 00:41:55,680
have to interact directly with the core

907
00:41:55,680 --> 00:41:58,260
and they can share a data set between

908
00:41:58,260 --> 00:42:01,140
their their neighbors so if you invert

909
00:42:01,140 --> 00:42:04,500
that principle what this means is using

910
00:42:04,500 --> 00:42:07,320
systems like Abe lets you build things

911
00:42:07,320 --> 00:42:10,020
like Quicksilver which helps make your

912
00:42:10,020 --> 00:42:12,480
system more decentralized and it also

913
00:42:12,480 --> 00:42:14,160
gives you storage layer encryption which

914
00:42:14,160 --> 00:42:16,500
means you can share your data between

915
00:42:16,500 --> 00:42:18,780
neighboring nodes without worrying about

916
00:42:18,780 --> 00:42:23,060
accidental data leaks or any any other

917
00:42:23,060 --> 00:42:26,099
issues because as long as your your

918
00:42:26,099 --> 00:42:28,220
decryption key is secure

919
00:42:28,220 --> 00:42:30,300
it's encrypted

920
00:42:30,300 --> 00:42:33,000
so yeah with that I'd like to conclude

921
00:42:33,000 --> 00:42:36,420
the talk and say that uh Abe I believe

922
00:42:36,420 --> 00:42:40,500
is uh criminally underutilized in uh the

923
00:42:40,500 --> 00:42:43,079
the in building Access Control Systems

924
00:42:43,079 --> 00:42:45,540
and there's definitely a lack of

925
00:42:45,540 --> 00:42:48,359
awareness in the distributed systems and

926
00:42:48,359 --> 00:42:51,660
database security communities

927
00:42:51,660 --> 00:42:54,660
um likely due to you know lack of prior

928
00:42:54,660 --> 00:42:58,319
art and lack of standardization uh in

929
00:42:58,319 --> 00:43:00,660
these in these schemes uh but it's it's

930
00:43:00,660 --> 00:43:02,160
all it could also be a two-way street

931
00:43:02,160 --> 00:43:05,280
where it's hard to justify doing those

932
00:43:05,280 --> 00:43:09,240
efforts if there's no no practical use

933
00:43:09,240 --> 00:43:11,760
cases so I hope this is a good example

934
00:43:11,760 --> 00:43:14,760
for anyone who wants to try to undertake

935
00:43:14,760 --> 00:43:17,880
similar things but yeah that was it

936
00:43:17,880 --> 00:43:20,599
thank you so much

937
00:43:25,140 --> 00:43:27,420
any quick questions for Tanya yes

938
00:43:27,420 --> 00:43:28,980
uh so first thanks for sharing a

939
00:43:28,980 --> 00:43:31,740
compelling use of Abe uh two questions

940
00:43:31,740 --> 00:43:33,480
one I'm curious about the ratio between

941
00:43:33,480 --> 00:43:35,339
the number of unique policies and the

942
00:43:35,339 --> 00:43:36,839
number of customers like what order of

943
00:43:36,839 --> 00:43:39,060
magnitude that is and then second I'm

944
00:43:39,060 --> 00:43:42,599
curious about how changes in policy are

945
00:43:42,599 --> 00:43:44,099
handled by the system or whether those

946
00:43:44,099 --> 00:43:47,339
happen at all yeah so to answer the

947
00:43:47,339 --> 00:43:50,280
first question uh usually policies are

948
00:43:50,280 --> 00:43:52,740
you know they're they're based on a

949
00:43:52,740 --> 00:43:55,200
country or they're based on like a

950
00:43:55,200 --> 00:43:57,359
region which is really only EU because

951
00:43:57,359 --> 00:44:00,060
you know it's kind of like a country uh

952
00:44:00,060 --> 00:44:02,180
but

953
00:44:02,180 --> 00:44:06,540
but uh yeah and sometimes it's like a

954
00:44:06,540 --> 00:44:08,400
negation so like not this particular

955
00:44:08,400 --> 00:44:11,460
place or something like that so uh the

956
00:44:11,460 --> 00:44:14,520
ratio like we also we have more demand

957
00:44:14,520 --> 00:44:17,460
for people who want to use it for for

958
00:44:17,460 --> 00:44:18,720
their countries then we could actually

959
00:44:18,720 --> 00:44:20,940
provide it because you know sometimes we

960
00:44:20,940 --> 00:44:24,180
uh those countries don't have data

961
00:44:24,180 --> 00:44:26,400
centers that are large enough to be like

962
00:44:26,400 --> 00:44:28,740
the you know single point of failure or

963
00:44:28,740 --> 00:44:30,540
so we want to ensure that there's at

964
00:44:30,540 --> 00:44:32,220
least like you know a couple large data

965
00:44:32,220 --> 00:44:34,560
centers in their country before we can

966
00:44:34,560 --> 00:44:36,599
add like a policy that just restricts it

967
00:44:36,599 --> 00:44:40,740
to them so yeah the the ratio is

968
00:44:40,740 --> 00:44:43,319
like yeah I think think about like you

969
00:44:43,319 --> 00:44:45,720
know like the main countries that are

970
00:44:45,720 --> 00:44:47,700
large enough to support multiple data

971
00:44:47,700 --> 00:44:48,800
centers versus

972
00:44:48,800 --> 00:44:52,440
uh thousands and up to millions of

973
00:44:52,440 --> 00:44:53,940
customers so

974
00:44:53,940 --> 00:44:55,680
it's like ballpark how many unique

975
00:44:55,680 --> 00:44:58,260
policies do there end up being uh sorry

976
00:44:58,260 --> 00:45:00,420
what uh in terms of like a rough

977
00:45:00,420 --> 00:45:02,339
ballpark how many unique policies do you

978
00:45:02,339 --> 00:45:04,260
end up managing in your system yeah I

979
00:45:04,260 --> 00:45:06,140
would say like

980
00:45:06,140 --> 00:45:09,180
20-ish is what we have maybe like you

981
00:45:09,180 --> 00:45:09,839
know

982
00:45:09,839 --> 00:45:13,560
people trying to use right now

983
00:45:13,560 --> 00:45:16,319
um but uh yeah I mean it definitely

984
00:45:16,319 --> 00:45:18,839
changes and it depends and for the other

985
00:45:18,839 --> 00:45:20,400
question how do you handle policy

986
00:45:20,400 --> 00:45:24,780
changes so we don't we

987
00:45:24,780 --> 00:45:27,060
just tell the customer to re-upload

988
00:45:27,060 --> 00:45:29,760
their certificate and yeah but you know

989
00:45:29,760 --> 00:45:32,520
potentially that that could be handled

990
00:45:32,520 --> 00:45:35,940
thanks okay thank you in the interest of

991
00:45:35,940 --> 00:45:37,680
time we have to take the rest of land

992
00:45:37,680 --> 00:45:38,600
thanks a lotanya

993
00:45:38,600 --> 00:45:45,359
[Applause]

994
00:45:45,359 --> 00:45:47,160
all right so last but not least we have

995
00:45:47,160 --> 00:45:49,020
a talk on context committing

996
00:45:49,020 --> 00:45:50,819
authenticated encryption with Associated

997
00:45:50,819 --> 00:45:53,760
data very large

998
00:45:53,760 --> 00:45:55,260
list of authors

999
00:45:55,260 --> 00:46:00,380
and um sanketh is going to give the talk

1000
00:46:01,370 --> 00:46:07,888
[Music]

1001
00:46:10,440 --> 00:46:14,099
okay cool uh can you hear me

1002
00:46:14,099 --> 00:46:15,780
awesome uh thanks so much for the

1003
00:46:15,780 --> 00:46:17,220
introduction yes we have too many

1004
00:46:17,220 --> 00:46:19,200
authors all of them are awesome I can

1005
00:46:19,200 --> 00:46:21,599
adjust for that though so I'm so happy

1006
00:46:21,599 --> 00:46:23,640
to be here today I'll be making a case

1007
00:46:23,640 --> 00:46:25,140
for context commenting authenticated

1008
00:46:25,140 --> 00:46:27,300
encryption

1009
00:46:27,300 --> 00:46:29,460
our story starts with an authenticated

1010
00:46:29,460 --> 00:46:31,619
encryption with Associated data also

1011
00:46:31,619 --> 00:46:33,359
known as aead

1012
00:46:33,359 --> 00:46:34,859
this is one of the most fundamental

1013
00:46:34,859 --> 00:46:36,780
Primitives it is used everywhere from

1014
00:46:36,780 --> 00:46:38,819
TLS to cloud storage to end-to-end

1015
00:46:38,819 --> 00:46:40,140
encrypted messaging

1016
00:46:40,140 --> 00:46:42,420
it enables a sender and a recipient with

1017
00:46:42,420 --> 00:46:44,280
the shared contacts to exchange messages

1018
00:46:44,280 --> 00:46:47,280
or an insecure Channel

1019
00:46:47,280 --> 00:46:49,920
here the context consists of a key

1020
00:46:49,920 --> 00:46:52,319
a nonce like a random IV or a counter

1021
00:46:52,319 --> 00:46:55,140
and a necessary data like a packet

1022
00:46:55,140 --> 00:46:56,099
header

1023
00:46:56,099 --> 00:46:58,740
the key must be shared out of band the

1024
00:46:58,740 --> 00:47:00,780
nonsense necessary Associated data can

1025
00:47:00,780 --> 00:47:02,040
be shared in band

1026
00:47:02,040 --> 00:47:04,500
with the ciphertext or out of band this

1027
00:47:04,500 --> 00:47:06,240
I love sending encrypted messages to the

1028
00:47:06,240 --> 00:47:07,740
recipient with confidentiality and

1029
00:47:07,740 --> 00:47:09,900
authenticity

1030
00:47:09,900 --> 00:47:11,900
we have many schemes that achieve

1031
00:47:11,900 --> 00:47:14,579
achieve these goals including AES GCM

1032
00:47:14,579 --> 00:47:18,720
chapter 20 poly 1305 and AES TCMS IV

1033
00:47:18,720 --> 00:47:20,220
these schemes are standardized and

1034
00:47:20,220 --> 00:47:21,839
widely deployed if you're using

1035
00:47:21,839 --> 00:47:23,520
encryption right now chances are you're

1036
00:47:23,520 --> 00:47:26,400
using one of these schemes

1037
00:47:26,400 --> 00:47:28,560
finally these schemes have security

1038
00:47:28,560 --> 00:47:29,880
proof showing that they achieve

1039
00:47:29,880 --> 00:47:31,920
confidentiality and authenticity even in

1040
00:47:31,920 --> 00:47:33,180
the presence of a meddler in the middle

1041
00:47:33,180 --> 00:47:34,859
who can like observe in many plate

1042
00:47:34,859 --> 00:47:37,220
packets

1043
00:47:37,500 --> 00:47:40,079
but in recent years we've seen a surge

1044
00:47:40,079 --> 00:47:42,420
of attacks on our use of aead

1045
00:47:42,420 --> 00:47:44,880
and these attacks Target the most widely

1046
00:47:44,880 --> 00:47:46,859
used schemes like those mentioned on the

1047
00:47:46,859 --> 00:47:48,359
previous slide

1048
00:47:48,359 --> 00:47:49,980
especially concerning because we've

1049
00:47:49,980 --> 00:47:52,980
built protocols assuming that aead is a

1050
00:47:52,980 --> 00:47:54,900
solved problem

1051
00:47:54,900 --> 00:47:56,819
what is going on under the hood is that

1052
00:47:56,819 --> 00:47:58,200
these attacks highlight new threat

1053
00:47:58,200 --> 00:48:00,180
models that deviate from the traditional

1054
00:48:00,180 --> 00:48:03,300
model of a meddler in the middle

1055
00:48:03,300 --> 00:48:04,920
to understand these attacks we need to

1056
00:48:04,920 --> 00:48:06,359
consider a different architecture that

1057
00:48:06,359 --> 00:48:09,599
is popular in modern deployments of aead

1058
00:48:09,599 --> 00:48:13,740
here a sender shares excuse me here a

1059
00:48:13,740 --> 00:48:15,540
sender shares the ciphertext with a

1060
00:48:15,540 --> 00:48:17,579
ciphertext distributor like a Content

1061
00:48:17,579 --> 00:48:19,800
delivery Network who then shares it to

1062
00:48:19,800 --> 00:48:21,300
the recipients

1063
00:48:21,300 --> 00:48:23,339
then the sender separately shares the

1064
00:48:23,339 --> 00:48:25,140
Privacy sensitive key with the

1065
00:48:25,140 --> 00:48:26,640
recipients over some other secure

1066
00:48:26,640 --> 00:48:28,440
Channel

1067
00:48:28,440 --> 00:48:30,300
the distributor and the recipients

1068
00:48:30,300 --> 00:48:32,819
implicitly assume that since they all

1069
00:48:32,819 --> 00:48:34,319
receive the same ciphertext that they

1070
00:48:34,319 --> 00:48:36,480
will all receive the same plain text we

1071
00:48:36,480 --> 00:48:38,280
call this expectation multi-recipient

1072
00:48:38,280 --> 00:48:39,839
integrity

1073
00:48:39,839 --> 00:48:42,780
this is the intended Behavior

1074
00:48:42,780 --> 00:48:45,839
this works if the sender is honest

1075
00:48:45,839 --> 00:48:48,599
but the sender is malicious and we're

1076
00:48:48,599 --> 00:48:51,839
using a standard ad scheme like AES GCM

1077
00:48:51,839 --> 00:48:53,520
then the malicious sender can arrange

1078
00:48:53,520 --> 00:48:54,960
for different plane tags to be received

1079
00:48:54,960 --> 00:48:57,060
the malicious sender does this by

1080
00:48:57,060 --> 00:48:59,339
crafting a specific ciphertext non-syn

1081
00:48:59,339 --> 00:49:00,720
Associated data

1082
00:49:00,720 --> 00:49:03,599
and picking two different Keys K1 and K2

1083
00:49:03,599 --> 00:49:05,940
such that the recipients get different

1084
00:49:05,940 --> 00:49:08,760
plain tags in this example recipient a

1085
00:49:08,760 --> 00:49:10,619
gets the image of a cat while recipient

1086
00:49:10,619 --> 00:49:13,319
P gets the image of a dog

1087
00:49:13,319 --> 00:49:17,040
this isn't this is unintended Behavior

1088
00:49:17,040 --> 00:49:19,440
and it stems from the fact that deployed

1089
00:49:19,440 --> 00:49:20,880
schemes are not what is called key

1090
00:49:20,880 --> 00:49:22,020
committing

1091
00:49:22,020 --> 00:49:24,060
specifically we say that a scheme is not

1092
00:49:24,060 --> 00:49:25,740
key commanding if it is computationally

1093
00:49:25,740 --> 00:49:28,680
efficient to find two keys and decipher

1094
00:49:28,680 --> 00:49:30,480
text such that the ciphertext decrypts

1095
00:49:30,480 --> 00:49:32,400
correctly under both keys

1096
00:49:32,400 --> 00:49:35,220
and produces different plain texts most

1097
00:49:35,220 --> 00:49:36,540
of the schemes that we use in practice

1098
00:49:36,540 --> 00:49:38,940
today are not key committing in fact

1099
00:49:38,940 --> 00:49:41,099
modern protocols like TLS 1.3 and

1100
00:49:41,099 --> 00:49:42,900
wireguard only support non-key

1101
00:49:42,900 --> 00:49:44,760
committing ciphers

1102
00:49:44,760 --> 00:49:46,859
furthermore finding these colliding

1103
00:49:46,859 --> 00:49:49,020
ciphertext and keys only takes a few

1104
00:49:49,020 --> 00:49:51,420
seconds on a laptop

1105
00:49:51,420 --> 00:49:52,920
to see how this affects real world

1106
00:49:52,920 --> 00:49:54,839
deployments let us look at a simplified

1107
00:49:54,839 --> 00:49:57,839
version of dgrw's attack on Facebook

1108
00:49:57,839 --> 00:50:00,720
Messenger abuse reporting

1109
00:50:00,720 --> 00:50:02,819
here in malicious sender chooses a

1110
00:50:02,819 --> 00:50:04,500
specific ciphertext and sends it to

1111
00:50:04,500 --> 00:50:06,420
Facebook who then forwards it to the

1112
00:50:06,420 --> 00:50:08,460
internet recipient

1113
00:50:08,460 --> 00:50:10,500
then the sender sends a specifically

1114
00:50:10,500 --> 00:50:12,420
crafted key to the intended recipient

1115
00:50:12,420 --> 00:50:14,940
under which the ciphertext decrypts an

1116
00:50:14,940 --> 00:50:16,740
abusive image

1117
00:50:16,740 --> 00:50:19,140
the internet recipient aligned by the

1118
00:50:19,140 --> 00:50:21,359
image reports it to the moderator who

1119
00:50:21,359 --> 00:50:23,099
then gets a copy of the ciphertext from

1120
00:50:23,099 --> 00:50:24,420
Facebook

1121
00:50:24,420 --> 00:50:26,220
then the malicious Center sends a

1122
00:50:26,220 --> 00:50:28,380
different key to the moderator under

1123
00:50:28,380 --> 00:50:29,880
which the ciphertext decrypts to a

1124
00:50:29,880 --> 00:50:32,040
benign image

1125
00:50:32,040 --> 00:50:34,980
this clearly breaks encryption so

1126
00:50:34,980 --> 00:50:36,839
it is Hardware encryption this clearly

1127
00:50:36,839 --> 00:50:39,780
breaks the abuse reporting and similar

1128
00:50:39,780 --> 00:50:41,520
multi-disciplined Integrity attacks have

1129
00:50:41,520 --> 00:50:43,500
been found and passed in the AWS

1130
00:50:43,500 --> 00:50:45,780
encryption SDK and in a pre-release

1131
00:50:45,780 --> 00:50:47,880
product reviewed at Google

1132
00:50:47,880 --> 00:50:50,760
and that's not it after those attacks a

1133
00:50:50,760 --> 00:50:52,079
new class of attacks was discovered

1134
00:50:52,079 --> 00:50:53,819
which started its confidentiality rather

1135
00:50:53,819 --> 00:50:55,740
than Integrity the so-called

1136
00:50:55,740 --> 00:50:57,720
partitioning Oracle attacks arise in a

1137
00:50:57,720 --> 00:50:59,640
setting where the server for example

1138
00:50:59,640 --> 00:51:00,900
knows a password

1139
00:51:00,900 --> 00:51:02,880
and it reveals to the client whether the

1140
00:51:02,880 --> 00:51:04,800
password successfully decrypts a

1141
00:51:04,800 --> 00:51:06,660
submitted ciphertext

1142
00:51:06,660 --> 00:51:08,760
so in this setting a malicious sender

1143
00:51:08,760 --> 00:51:10,559
can attempt to recover the password by

1144
00:51:10,559 --> 00:51:13,020
sending ciphertext encrypted under guest

1145
00:51:13,020 --> 00:51:15,200
password

1146
00:51:15,300 --> 00:51:17,640
ideally one submitted ciphertext should

1147
00:51:17,640 --> 00:51:19,980
allow ruling out one guest password

1148
00:51:19,980 --> 00:51:22,380
but we just saw that we can construct

1149
00:51:22,380 --> 00:51:24,180
ciphertext that decrypt under two keys

1150
00:51:24,180 --> 00:51:25,800
so this would allow guessing two

1151
00:51:25,800 --> 00:51:29,339
passwords per guess per ciphert X

1152
00:51:29,339 --> 00:51:32,240
lgr show how to construct in 30 seconds

1153
00:51:32,240 --> 00:51:35,240
ciphertext for AES GCM the decrypt under

1154
00:51:35,240 --> 00:51:38,400
4096 given keys so this would allow

1155
00:51:38,400 --> 00:51:41,760
ruling out 4096 passwords per ciphert X

1156
00:51:41,760 --> 00:51:43,680
submitted

1157
00:51:43,680 --> 00:51:45,720
the shadow stocks GDP proxy was

1158
00:51:45,720 --> 00:51:47,460
vulnerable to this attack

1159
00:51:47,460 --> 00:51:49,980
and lgr show that using ciphertext the

1160
00:51:49,980 --> 00:51:52,260
decrypt under thousands of keys one can

1161
00:51:52,260 --> 00:51:53,760
significantly improve the odds of

1162
00:51:53,760 --> 00:51:55,500
recording the password compared to the

1163
00:51:55,500 --> 00:51:57,240
traditional Brute Force approach which

1164
00:51:57,240 --> 00:51:59,640
tries one password at a time

1165
00:51:59,640 --> 00:52:01,200
this is for a fixed number of

1166
00:52:01,200 --> 00:52:03,540
submissions to the server

1167
00:52:03,540 --> 00:52:05,640
and a similar attack was also possible

1168
00:52:05,640 --> 00:52:07,619
on early non-compliant implementation

1169
00:52:07,619 --> 00:52:09,540
silver pick and several other open

1170
00:52:09,540 --> 00:52:11,940
source libraries

1171
00:52:11,940 --> 00:52:13,680
to summarize we have seen two kinds of

1172
00:52:13,680 --> 00:52:15,059
attacks on authenticated encryption

1173
00:52:15,059 --> 00:52:17,160
schemes the first class multi-recipient

1174
00:52:17,160 --> 00:52:19,319
Integrity attacks violate Integrity in

1175
00:52:19,319 --> 00:52:21,119
multi-recipient settings

1176
00:52:21,119 --> 00:52:22,980
the second class partitioning Oracle

1177
00:52:22,980 --> 00:52:24,660
attacks while at confidentiality in

1178
00:52:24,660 --> 00:52:26,220
password-based settings

1179
00:52:26,220 --> 00:52:27,960
and we discussed two examples for each

1180
00:52:27,960 --> 00:52:29,400
but there are many more instances of

1181
00:52:29,400 --> 00:52:31,500
these attacks in practice see the papers

1182
00:52:31,500 --> 00:52:34,140
listed on the screen

1183
00:52:34,140 --> 00:52:36,059
simply these attacks break the most

1184
00:52:36,059 --> 00:52:38,819
widely used aad schemes they do not

1185
00:52:38,819 --> 00:52:41,339
invalidate prior security analyzes they

1186
00:52:41,339 --> 00:52:44,339
exploit the lack of key commitment

1187
00:52:44,339 --> 00:52:47,040
so how do we achieve this key commitment

1188
00:52:47,040 --> 00:52:49,200
a traditional approach is to append a

1189
00:52:49,200 --> 00:52:51,180
hash of the key to the cipher text

1190
00:52:51,180 --> 00:52:53,160
a variant of this is currently deployed

1191
00:52:53,160 --> 00:52:55,619
by the AWS encryption SDK

1192
00:52:55,619 --> 00:52:58,740
this approach clearly works but extends

1193
00:52:58,740 --> 00:53:00,240
the length of the ciphertext by another

1194
00:53:00,240 --> 00:53:02,280
two Lambda where Lambda is the security

1195
00:53:02,280 --> 00:53:03,660
parameter

1196
00:53:03,660 --> 00:53:05,760
and might require multiple Primitives in

1197
00:53:05,760 --> 00:53:07,859
the case of the AWS encryption SDK the

1198
00:53:07,859 --> 00:53:09,839
encrypt with asdcm but they construct

1199
00:53:09,839 --> 00:53:13,859
this hash using hkdf Shadow 56 those are

1200
00:53:13,859 --> 00:53:15,300
two different Primitives

1201
00:53:15,300 --> 00:53:17,760
a more lightweight approach is to append

1202
00:53:17,760 --> 00:53:19,440
2 Lambda zeros to the message and

1203
00:53:19,440 --> 00:53:21,300
encrypt that and during decryption

1204
00:53:21,300 --> 00:53:24,599
verify the verify that the two Lambda 0

1205
00:53:24,599 --> 00:53:27,059
still exist this serves as a makeshift

1206
00:53:27,059 --> 00:53:29,040
hash to the key because if you change

1207
00:53:29,040 --> 00:53:31,140
the ciphert X then the zeros would also

1208
00:53:31,140 --> 00:53:32,579
changed

1209
00:53:32,579 --> 00:53:34,260
this approach was suggested in a

1210
00:53:34,260 --> 00:53:36,540
previous draft of opaque and while this

1211
00:53:36,540 --> 00:53:37,859
approach does not require additional

1212
00:53:37,859 --> 00:53:39,720
Primitives it also extends the length of

1213
00:53:39,720 --> 00:53:41,280
the ciphertext by another two Lambda

1214
00:53:41,280 --> 00:53:43,140
bits

1215
00:53:43,140 --> 00:53:45,480
these approaches exist they're proved

1216
00:53:45,480 --> 00:53:47,400
they're fast they're provably secure and

1217
00:53:47,400 --> 00:53:49,680
they're already deployed in practice so

1218
00:53:49,680 --> 00:53:52,020
we could standardize one of them

1219
00:53:52,020 --> 00:53:54,059
and indeed their current efforts to

1220
00:53:54,059 --> 00:53:56,940
standardize key converting AED schemes a

1221
00:53:56,940 --> 00:53:58,920
recent cfrg draft calls out key

1222
00:53:58,920 --> 00:54:01,200
commitment as a desirable attribute for

1223
00:54:01,200 --> 00:54:02,760
aead schemes

1224
00:54:02,760 --> 00:54:04,980
in an upcoming missed workshop on black

1225
00:54:04,980 --> 00:54:07,380
Cipher modes of operation similarly

1226
00:54:07,380 --> 00:54:09,720
calls our key commitment

1227
00:54:09,720 --> 00:54:12,540
so I'll ask again we could standardize

1228
00:54:12,540 --> 00:54:14,160
one of the key converting approaches on

1229
00:54:14,160 --> 00:54:15,540
the previous slide or some other key

1230
00:54:15,540 --> 00:54:17,160
converting approach

1231
00:54:17,160 --> 00:54:20,819
we but we fear this is short-sighted

1232
00:54:20,819 --> 00:54:22,859
to understand why let's go back to the

1233
00:54:22,859 --> 00:54:25,440
multi-recipient Integrity setting recall

1234
00:54:25,440 --> 00:54:27,180
that if the keys are the same then the

1235
00:54:27,180 --> 00:54:29,460
recipients get the same plain text and

1236
00:54:29,460 --> 00:54:31,140
this is true even for an adversarial

1237
00:54:31,140 --> 00:54:32,819
choice of ciphertext nouns and

1238
00:54:32,819 --> 00:54:34,559
Associated data

1239
00:54:34,559 --> 00:54:36,420
further if we use a key comforting

1240
00:54:36,420 --> 00:54:38,520
scheme and the malicious sender picks

1241
00:54:38,520 --> 00:54:40,260
two different Keys then at least one of

1242
00:54:40,260 --> 00:54:42,359
the recipients gets an error this is

1243
00:54:42,359 --> 00:54:44,339
exactly what we want then what am I

1244
00:54:44,339 --> 00:54:46,380
complaining about if

1245
00:54:46,380 --> 00:54:48,300
you change the settings slightly

1246
00:54:48,300 --> 00:54:50,099
sending either the nons or the

1247
00:54:50,099 --> 00:54:52,020
associated data separately to the

1248
00:54:52,020 --> 00:54:53,460
recipients

1249
00:54:53,460 --> 00:54:55,680
then the problem comes back in

1250
00:54:55,680 --> 00:54:57,720
particular the attacker can choose the

1251
00:54:57,720 --> 00:54:59,940
same key but it's but instead vary the

1252
00:54:59,940 --> 00:55:01,980
nonce or the associated data to

1253
00:55:01,980 --> 00:55:03,900
re-enable violations of multi-recipient

1254
00:55:03,900 --> 00:55:06,540
Integrity this works because the key

1255
00:55:06,540 --> 00:55:08,339
commitment only ensures that the keys

1256
00:55:08,339 --> 00:55:09,480
are the same

1257
00:55:09,480 --> 00:55:11,880
and what we really want is what we call

1258
00:55:11,880 --> 00:55:13,559
context commitment

1259
00:55:13,559 --> 00:55:15,300
this is a notion that we recently

1260
00:55:15,300 --> 00:55:16,859
introduced to capture this more General

1261
00:55:16,859 --> 00:55:19,079
notion of commitment

1262
00:55:19,079 --> 00:55:21,119
specifically we say that a scheme is not

1263
00:55:21,119 --> 00:55:22,920
context committing if it is

1264
00:55:22,920 --> 00:55:24,839
computationally efficient to find two

1265
00:55:24,839 --> 00:55:27,240
contacts that is key nonce and

1266
00:55:27,240 --> 00:55:29,880
Associated data triples and a ciphertext

1267
00:55:29,880 --> 00:55:31,920
such that the ciphertext decrypts

1268
00:55:31,920 --> 00:55:33,960
correctly under both contacts

1269
00:55:33,960 --> 00:55:36,240
context commitment is strictly stronger

1270
00:55:36,240 --> 00:55:38,220
than key commitment

1271
00:55:38,220 --> 00:55:40,920
more broadly our recent Works introduce

1272
00:55:40,920 --> 00:55:42,960
a large space of new definitions which

1273
00:55:42,960 --> 00:55:44,520
are in some ways analogous to Hash

1274
00:55:44,520 --> 00:55:46,500
function security

1275
00:55:46,500 --> 00:55:48,960
for example at Europe later this year we

1276
00:55:48,960 --> 00:55:51,180
will describe a new AED security goal

1277
00:55:51,180 --> 00:55:53,160
called context discovery which is

1278
00:55:53,160 --> 00:55:56,040
analogous to premature resistance and

1279
00:55:56,040 --> 00:55:57,540
traditional context commitment is

1280
00:55:57,540 --> 00:56:00,000
analogous to Collision resistance

1281
00:56:00,000 --> 00:56:02,400
that said all these Notions are implied

1282
00:56:02,400 --> 00:56:04,559
by a scheme being context committing so

1283
00:56:04,559 --> 00:56:06,420
for the purposes of the stack I'll Focus

1284
00:56:06,420 --> 00:56:09,359
just on context commitment

1285
00:56:09,359 --> 00:56:11,819
unfortunately not only do non-keycoming

1286
00:56:11,819 --> 00:56:14,700
schemes not achieve context commitment

1287
00:56:14,700 --> 00:56:16,920
but even our context even our key

1288
00:56:16,920 --> 00:56:18,500
commitment countermeasures do not

1289
00:56:18,500 --> 00:56:20,760
achieve context commitment

1290
00:56:20,760 --> 00:56:22,920
this puts us in a delicate position as

1291
00:56:22,920 --> 00:56:24,540
we think about standardizing committing

1292
00:56:24,540 --> 00:56:26,040
encryption schemes

1293
00:56:26,040 --> 00:56:28,319
let's consider the timeline here about

1294
00:56:28,319 --> 00:56:30,420
six years ago we already had the theory

1295
00:56:30,420 --> 00:56:32,280
of key commitment for aead

1296
00:56:32,280 --> 00:56:34,500
then in 2019 we had the invisible

1297
00:56:34,500 --> 00:56:37,559
salamanders attack on Facebook Messenger

1298
00:56:37,559 --> 00:56:39,119
and three years ago we had the

1299
00:56:39,119 --> 00:56:40,500
partitioning Oracle attack and the

1300
00:56:40,500 --> 00:56:41,819
formal analysis of key commitment

1301
00:56:41,819 --> 00:56:43,319
countermeasures

1302
00:56:43,319 --> 00:56:45,180
and last year and this year we began

1303
00:56:45,180 --> 00:56:46,619
developing the theory of context

1304
00:56:46,619 --> 00:56:47,640
commitment

1305
00:56:47,640 --> 00:56:50,280
and so if history repeats itself we

1306
00:56:50,280 --> 00:56:52,260
expect practically relevant attacks the

1307
00:56:52,260 --> 00:56:54,119
target context commitment to appear in

1308
00:56:54,119 --> 00:56:55,859
the next few years

1309
00:56:55,859 --> 00:56:57,660
the point being we should really Target

1310
00:56:57,660 --> 00:57:00,059
context commitment now as we consider

1311
00:57:00,059 --> 00:57:02,880
standardizing these schemes

1312
00:57:02,880 --> 00:57:04,859
fortunately the best achieve context

1313
00:57:04,859 --> 00:57:06,900
commitment relatively cheaply

1314
00:57:06,900 --> 00:57:08,760
the most straightforward approach is to

1315
00:57:08,760 --> 00:57:10,559
append a hash of the context to the

1316
00:57:10,559 --> 00:57:12,000
ciphertext

1317
00:57:12,000 --> 00:57:14,640
this works but extends the length of the

1318
00:57:14,640 --> 00:57:17,400
ciphertax by 2 Lambda is slow for large

1319
00:57:17,400 --> 00:57:19,260
Associated data and might require

1320
00:57:19,260 --> 00:57:21,540
multiple perimeters

1321
00:57:21,540 --> 00:57:24,300
a clever construction is to replace a

1322
00:57:24,300 --> 00:57:26,400
tag with the hash of the context and the

1323
00:57:26,400 --> 00:57:27,240
tag

1324
00:57:27,240 --> 00:57:30,180
this produces optimal and ciphertax but

1325
00:57:30,180 --> 00:57:32,040
is still too slow for large Associated

1326
00:57:32,040 --> 00:57:34,500
data and might require large Primitives

1327
00:57:34,500 --> 00:57:35,940
excuse me might require multiple

1328
00:57:35,940 --> 00:57:37,980
Primitives

1329
00:57:37,980 --> 00:57:40,380
a wholly different approach is to do a

1330
00:57:40,380 --> 00:57:42,240
hash based construction like a duplex

1331
00:57:42,240 --> 00:57:44,520
which natively produces a collision

1332
00:57:44,520 --> 00:57:46,800
resistant tag to the Collision resistant

1333
00:57:46,800 --> 00:57:49,140
tag that commits to the context

1334
00:57:49,140 --> 00:57:51,240
this approach uses a single primitive

1335
00:57:51,240 --> 00:57:54,359
has optimal and ciphertext but is not

1336
00:57:54,359 --> 00:57:56,099
paralyzable

1337
00:57:56,099 --> 00:57:58,260
so all these are pretty good but none of

1338
00:57:58,260 --> 00:58:00,480
them are single primitive optimal length

1339
00:58:00,480 --> 00:58:01,920
and parallelizable

1340
00:58:01,920 --> 00:58:03,599
attributes that we have been accustomed

1341
00:58:03,599 --> 00:58:06,900
to by schemes like AES GCM

1342
00:58:06,900 --> 00:58:08,400
so we've been working on a new

1343
00:58:08,400 --> 00:58:10,079
construction that seeks to provide all

1344
00:58:10,079 --> 00:58:11,819
these attributes and more

1345
00:58:11,819 --> 00:58:14,460
we start from a wide permutation like

1346
00:58:14,460 --> 00:58:16,619
ketchak or ascon and we build a block

1347
00:58:16,619 --> 00:58:18,900
Cipher using Evan Mansour

1348
00:58:18,900 --> 00:58:20,819
we then turn that black Cipher into a

1349
00:58:20,819 --> 00:58:23,700
tweakable block Cipher using XCX

1350
00:58:23,700 --> 00:58:25,500
we then have an OCB inspired

1351
00:58:25,500 --> 00:58:27,180
authenticated encryption mod

1352
00:58:27,180 --> 00:58:28,980
and finally we integrate with other

1353
00:58:28,980 --> 00:58:31,440
useful attributes like non-siding

1354
00:58:31,440 --> 00:58:33,480
in some this is a single primitive

1355
00:58:33,480 --> 00:58:35,640
construction with optimal and ciphertax

1356
00:58:35,640 --> 00:58:38,339
and is maximally paralyzable

1357
00:58:38,339 --> 00:58:40,319
keep an eye out for a paper we're hoping

1358
00:58:40,319 --> 00:58:43,380
to have it on apron soon

1359
00:58:43,380 --> 00:58:46,559
but let's put that aside and let's try

1360
00:58:46,559 --> 00:58:47,880
to answer the actual question in the

1361
00:58:47,880 --> 00:58:49,380
title right we've done lots of

1362
00:58:49,380 --> 00:58:50,819
background but like do you need contest

1363
00:58:50,819 --> 00:58:52,319
commitment

1364
00:58:52,319 --> 00:58:54,180
we say yes

1365
00:58:54,180 --> 00:58:56,460
because while we don't have practical

1366
00:58:56,460 --> 00:58:58,020
attacks the target context commitment

1367
00:58:58,020 --> 00:59:00,119
we're worried that we'd be missing an

1368
00:59:00,119 --> 00:59:02,160
opportunity to protect protocols from

1369
00:59:02,160 --> 00:59:03,720
future attacks

1370
00:59:03,720 --> 00:59:05,579
furthermore the additional contact

1371
00:59:05,579 --> 00:59:07,440
additional cost to achieve context

1372
00:59:07,440 --> 00:59:08,940
commitment over key commitment is

1373
00:59:08,940 --> 00:59:11,359
minimal

1374
00:59:11,460 --> 00:59:12,960
so I would like to conclude with three

1375
00:59:12,960 --> 00:59:15,540
calls to action first build context

1376
00:59:15,540 --> 00:59:17,339
converting aead schemes

1377
00:59:17,339 --> 00:59:19,380
second standardize a few canonical

1378
00:59:19,380 --> 00:59:21,839
context Computing aead schemes

1379
00:59:21,839 --> 00:59:24,240
and third deploy these few canonical

1380
00:59:24,240 --> 00:59:26,940
context committing aad schemes like in

1381
00:59:26,940 --> 00:59:28,740
this talk I focused more on attacks but

1382
00:59:28,740 --> 00:59:30,119
context commitment also creates

1383
00:59:30,119 --> 00:59:32,160
opportunities for instance in the

1384
00:59:32,160 --> 00:59:35,099
previous talk uh we talked about doing

1385
00:59:35,099 --> 00:59:37,680
zero knowledge proofs over ciphertax we

1386
00:59:37,680 --> 00:59:39,119
need context commitment to do things

1387
00:59:39,119 --> 00:59:40,680
like that because otherwise your site

1388
00:59:40,680 --> 00:59:41,940
protects

1389
00:59:41,940 --> 00:59:43,500
otherwise revealing a key to us

1390
00:59:43,500 --> 00:59:45,000
revealing your current key to a

1391
00:59:45,000 --> 00:59:46,980
ciphertext it's not proof that you knew

1392
00:59:46,980 --> 00:59:48,599
the right key

1393
00:59:48,599 --> 00:59:51,480
see our papers for lots more and thanks

1394
00:59:51,480 --> 00:59:52,859
so much for sticking out in for my talk

1395
00:59:52,859 --> 00:59:56,040
uh I'm happy to take questions now but

1396
00:59:56,040 --> 00:59:57,180
feel free to find me around the

1397
00:59:57,180 --> 00:59:59,880
conference at hacks or on the Internet

1398
00:59:59,880 --> 01:00:01,400
thank you

1399
01:00:01,400 --> 01:00:08,520
[Applause]

1400
01:00:08,520 --> 01:00:11,780
all right any quick questions

1401
01:00:14,579 --> 01:00:16,500
uh thank you for this I'm really really

1402
01:00:16,500 --> 01:00:19,260
excited to see the paper I love OCB it's

1403
01:00:19,260 --> 01:00:21,580
my favorite mode of operation

1404
01:00:21,580 --> 01:00:23,400
[Music]

1405
01:00:23,400 --> 01:00:24,119
um

1406
01:00:24,119 --> 01:00:26,700
when okay so you reference the cfrg

1407
01:00:26,700 --> 01:00:28,920
draft that's like looking at basically

1408
01:00:28,920 --> 01:00:32,520
the constellation of aead properties

1409
01:00:32,520 --> 01:00:34,380
when are we going to be done with this

1410
01:00:34,380 --> 01:00:35,940
like

1411
01:00:35,940 --> 01:00:38,099
this process of like you know thinking

1412
01:00:38,099 --> 01:00:39,720
more and more about attacks and like

1413
01:00:39,720 --> 01:00:41,880
refining our definitions do you think

1414
01:00:41,880 --> 01:00:44,520
this ends like when is like when it what

1415
01:00:44,520 --> 01:00:47,160
is the what is the ultimate property for

1416
01:00:47,160 --> 01:00:50,960
aead that we need to achieve

1417
01:00:51,119 --> 01:00:53,099
so back in

1418
01:00:53,099 --> 01:00:54,540
back can have a idea we had just

1419
01:00:54,540 --> 01:00:55,980
encryption and then we had authenticated

1420
01:00:55,980 --> 01:00:57,780
encryption and then we realized we need

1421
01:00:57,780 --> 01:01:00,540
context so we went from AE to aead and

1422
01:01:00,540 --> 01:01:01,980
then now we're saying oh we also need a

1423
01:01:01,980 --> 01:01:03,180
key commitment and then now I'm saying

1424
01:01:03,180 --> 01:01:05,040
we need college commitment and then I

1425
01:01:05,040 --> 01:01:06,180
also sneaked in saying we need

1426
01:01:06,180 --> 01:01:09,420
non-siding and if you looked at the cfrg

1427
01:01:09,420 --> 01:01:10,920
draft there's like 10 more attributes

1428
01:01:10,920 --> 01:01:12,240
that it mentions like attacks or

1429
01:01:12,240 --> 01:01:14,040
multi-user security

1430
01:01:14,040 --> 01:01:15,900
and not to misuse resistance which is

1431
01:01:15,900 --> 01:01:17,220
also another really important property

1432
01:01:17,220 --> 01:01:18,440
like

1433
01:01:18,440 --> 01:01:20,099
ideally

1434
01:01:20,099 --> 01:01:22,140
I would like to think that these things

1435
01:01:22,140 --> 01:01:23,819
were stop but I don't know if they will

1436
01:01:23,819 --> 01:01:25,260
because our applications are getting

1437
01:01:25,260 --> 01:01:27,299
more and more complex and we get as we

1438
01:01:27,299 --> 01:01:28,559
start doing more and more interesting

1439
01:01:28,559 --> 01:01:30,059
things we need more and more properties

1440
01:01:30,059 --> 01:01:32,099
from our authenticated encryption

1441
01:01:32,099 --> 01:01:35,040
so I know that's a non-anter but

1442
01:01:35,040 --> 01:01:36,480
keep the symmetric cryptographers

1443
01:01:36,480 --> 01:01:39,540
employed though so that's good yes

1444
01:01:39,540 --> 01:01:42,920
more papers more jobs

1445
01:01:43,380 --> 01:01:44,940
so um

1446
01:01:44,940 --> 01:01:46,920
um like obviously batching everything

1447
01:01:46,920 --> 01:01:49,740
now is going to be really expensive

1448
01:01:49,740 --> 01:01:51,720
um are there any cases where this might

1449
01:01:51,720 --> 01:01:53,760
introduce like where a non-context

1450
01:01:53,760 --> 01:01:55,319
committing AED might introduce

1451
01:01:55,319 --> 01:01:59,220
variability where there is not a

1452
01:01:59,220 --> 01:02:01,260
malicious sender or a sender that might

1453
01:02:01,260 --> 01:02:03,480
become malicious after sending the

1454
01:02:03,480 --> 01:02:04,859
ciphertext

1455
01:02:04,859 --> 01:02:07,819
like does it always have to involve a

1456
01:02:07,819 --> 01:02:11,760
malicious sender of the ciphertext

1457
01:02:11,760 --> 01:02:14,339
so yeah so I I used a very simplified

1458
01:02:14,339 --> 01:02:16,079
model one another way of thinking about

1459
01:02:16,079 --> 01:02:18,660
it this is you take a ciphertext you

1460
01:02:18,660 --> 01:02:20,579
send it to like some cloud provider and

1461
01:02:20,579 --> 01:02:21,900
the cloud provider sends it to someone

1462
01:02:21,900 --> 01:02:25,079
else like uh you don't always have it

1463
01:02:25,079 --> 01:02:26,220
doesn't always have to be the standard

1464
01:02:26,220 --> 01:02:28,500
of themselves like in the partitioning

1465
01:02:28,500 --> 01:02:30,299
Oracle attack for instance like in that

1466
01:02:30,299 --> 01:02:32,579
case the original sender might not be

1467
01:02:32,579 --> 01:02:35,339
honest towards the other cloud provider

1468
01:02:35,339 --> 01:02:37,380
right yes yeah so then there is a notion

1469
01:02:37,380 --> 01:02:39,420
of a malicious sender

1470
01:02:39,420 --> 01:02:42,480
yes okay is it like but is there any

1471
01:02:42,480 --> 01:02:45,660
case where a uh where this might happen

1472
01:02:45,660 --> 01:02:47,640
when there is not some kind of notion of

1473
01:02:47,640 --> 01:02:49,079
a militia Center anywhere in the

1474
01:02:49,079 --> 01:02:51,780
Protocol no so if you if you again uh so

1475
01:02:51,780 --> 01:02:53,160
the title of my talk is ask your

1476
01:02:53,160 --> 01:02:54,000
cryptographer so if you're a

1477
01:02:54,000 --> 01:02:55,440
cryptographer tells you there's no

1478
01:02:55,440 --> 01:02:57,000
malicious standard ever in our protocol

1479
01:02:57,000 --> 01:02:58,440
then you don't have to worry about this

1480
01:02:58,440 --> 01:02:59,940
okay so there's like a nice property

1481
01:02:59,940 --> 01:03:01,920
that if we see a protocol area like

1482
01:03:01,920 --> 01:03:03,359
we're sure there's no malicious Center

1483
01:03:03,359 --> 01:03:04,799
and there cannot be any militia Center

1484
01:03:04,799 --> 01:03:07,160
we're like okay we are safe not actually

1485
01:03:07,160 --> 01:03:12,319
batching this yes okay thank you

1486
01:03:15,020 --> 01:03:18,780
the OCB mode that you proposed it's not

1487
01:03:18,780 --> 01:03:20,220
completely committing it's just

1488
01:03:20,220 --> 01:03:21,960
committing right you right now you're

1489
01:03:21,960 --> 01:03:24,059
not pushing for compactly committed so

1490
01:03:24,059 --> 01:03:25,500
you're not using any Collision resistant

1491
01:03:25,500 --> 01:03:28,680
hashing just uh it's variant of OCB with

1492
01:03:28,680 --> 01:03:30,960
negligible cost but it's not completely

1493
01:03:30,960 --> 01:03:32,400
committing just committing right context

1494
01:03:32,400 --> 01:03:34,319
committing uh let's take this off and

1495
01:03:34,319 --> 01:03:35,880
it's kind of complicated to answer the

1496
01:03:35,880 --> 01:03:38,119
question

1497
01:03:39,240 --> 01:03:41,640
all right with that let's thank everyone

1498
01:03:41,640 --> 01:03:42,760
in this session

1499
01:03:42,760 --> 01:03:49,819
[Applause]

