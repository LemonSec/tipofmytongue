1
00:00:00,000 --> 00:00:01,979
the session actually Nigel has an

2
00:00:01,979 --> 00:00:03,600
announcement about the lightning talks

3
00:00:03,600 --> 00:00:06,240
session so go ahead Nigel okay so to

4
00:00:06,240 --> 00:00:07,859
prepare for the lightning talk session

5
00:00:07,859 --> 00:00:09,240
for those who have not been at real

6
00:00:09,240 --> 00:00:11,280
world crypto before

7
00:00:11,280 --> 00:00:14,219
um you get you all have to queue up and

8
00:00:14,219 --> 00:00:17,580
we're going to queue up by the stairs on

9
00:00:17,580 --> 00:00:19,800
stage left and for those who are

10
00:00:19,800 --> 00:00:21,840
technically illiterate that means you're

11
00:00:21,840 --> 00:00:25,140
right okay so stage left for the stairs

12
00:00:25,140 --> 00:00:27,060
to get and just be a queue

13
00:00:27,060 --> 00:00:29,519
the amount of time you have to speak

14
00:00:29,519 --> 00:00:31,500
will depend on the length of the queue

15
00:00:31,500 --> 00:00:33,660
and whether I think your talk is boring

16
00:00:33,660 --> 00:00:35,040
or not

17
00:00:35,040 --> 00:00:39,840
and um and there's no slides no

18
00:00:39,840 --> 00:00:41,960
technical uh uh

19
00:00:41,960 --> 00:00:45,300
paraphernalia you just speak until your

20
00:00:45,300 --> 00:00:47,940
time is up budget about a minute to two

21
00:00:47,940 --> 00:00:50,039
minutes for your talk depending on the

22
00:00:50,039 --> 00:00:51,300
length of the queue but usually average

23
00:00:51,300 --> 00:00:53,219
it's about one or two minutes but we

24
00:00:53,219 --> 00:00:54,600
look forward to see hearing your

25
00:00:54,600 --> 00:00:57,059
lightning talks at the end of this

26
00:00:57,059 --> 00:01:00,360
session on stage left thank you okay

27
00:01:00,360 --> 00:01:02,039
thank you Nigel lightning talks are

28
00:01:02,039 --> 00:01:03,480
always a fun session so please please

29
00:01:03,480 --> 00:01:06,420
line up and and give you liking talk all

30
00:01:06,420 --> 00:01:08,460
right so welcome to the session on side

31
00:01:08,460 --> 00:01:10,380
channels and back doors we have three

32
00:01:10,380 --> 00:01:12,960
exciting talks and the first talk is

33
00:01:12,960 --> 00:01:14,400
actually going to be given by uh

34
00:01:14,400 --> 00:01:16,799
Christina Garman and Daniel genkin on

35
00:01:16,799 --> 00:01:19,380
failures in sgx sgx has actually become

36
00:01:19,380 --> 00:01:21,540
kind of important in in industry and

37
00:01:21,540 --> 00:01:23,400
trying to protect various secrets and

38
00:01:23,400 --> 00:01:24,900
this talk I think is a very important

39
00:01:24,900 --> 00:01:27,240
one for people to keep in mind in that

40
00:01:27,240 --> 00:01:29,820
sgx might not be as good as protecting

41
00:01:29,820 --> 00:01:31,680
in protecting Secrets as we may have

42
00:01:31,680 --> 00:01:34,259
hoped so Danielle and Christina please

43
00:01:34,259 --> 00:01:35,400
take it away

44
00:01:35,400 --> 00:01:37,979
all right uh thanks Dan for the

45
00:01:37,979 --> 00:01:39,479
introduction my name is Daniel gamkin

46
00:01:39,479 --> 00:01:41,520
and this is Christina Garman and the

47
00:01:41,520 --> 00:01:44,220
title of our talk is sgx fail how stuff

48
00:01:44,220 --> 00:01:46,439
gets extracted and this is a big shout

49
00:01:46,439 --> 00:01:48,479
out of collaborators from many places

50
00:01:48,479 --> 00:01:50,040
and I won't read their names because

51
00:01:50,040 --> 00:01:52,140
otherwise we'd simply run out of time

52
00:01:52,140 --> 00:01:55,259
so uh let's quickly recap this idea of

53
00:01:55,259 --> 00:01:57,360
trusted execution environments it is RWC

54
00:01:57,360 --> 00:01:58,619
after all but I want to set some

55
00:01:58,619 --> 00:02:00,600
baseline

56
00:02:00,600 --> 00:02:02,820
Hardware features and aim to enforce

57
00:02:02,820 --> 00:02:04,700
data access control and isolation

58
00:02:04,700 --> 00:02:07,619
integrity and confidentiality at the

59
00:02:07,619 --> 00:02:09,780
hardware level so rather than using some

60
00:02:09,780 --> 00:02:12,000
some crypto protocols to it to get these

61
00:02:12,000 --> 00:02:13,920
properties instead we're going to rely

62
00:02:13,920 --> 00:02:16,500
on the CPU itself to guarantee that for

63
00:02:16,500 --> 00:02:18,480
us and not only that we would like to

64
00:02:18,480 --> 00:02:20,280
guarantee this in the presence of very

65
00:02:20,280 --> 00:02:22,440
strong adversaries even if the operating

66
00:02:22,440 --> 00:02:24,420
system the BIOS the ram the hardware

67
00:02:24,420 --> 00:02:26,400
everything around The Enclave is

68
00:02:26,400 --> 00:02:28,800
corrupted steel code that lives inside

69
00:02:28,800 --> 00:02:31,260
The Enclave can be saved because the

70
00:02:31,260 --> 00:02:34,200
security backing is by the CPU itself

71
00:02:34,200 --> 00:02:37,680
okay and this gives us a new native

72
00:02:37,680 --> 00:02:39,360
performance with strong security because

73
00:02:39,360 --> 00:02:40,620
we don't need to rely on heavy

74
00:02:40,620 --> 00:02:42,540
cryptographic machinery the CPU just

75
00:02:42,540 --> 00:02:44,519
guarantees this for us and when you

76
00:02:44,519 --> 00:02:46,200
stick this into dally well you get this

77
00:02:46,200 --> 00:02:48,720
CPU wearing a chain for some reason okay

78
00:02:48,720 --> 00:02:51,000
now there have been many instantiations

79
00:02:51,000 --> 00:02:52,620
of this idea

80
00:02:52,620 --> 00:02:55,680
um trust zone or arm CCA Amazon has

81
00:02:55,680 --> 00:02:58,920
their Nitro Enclave AMD has their SUV

82
00:02:58,920 --> 00:03:01,739
but the topic of today's talk is the

83
00:03:01,739 --> 00:03:03,420
perhaps the most well-known realization

84
00:03:03,420 --> 00:03:06,720
of this which is Intel sgx now sgx

85
00:03:06,720 --> 00:03:08,280
stands for software guide extensions

86
00:03:08,280 --> 00:03:10,560
it's a set of architectural features

87
00:03:10,560 --> 00:03:13,140
present in most x86 machines starting

88
00:03:13,140 --> 00:03:16,140
from Skylake back in 2016 all the way to

89
00:03:16,140 --> 00:03:18,060
these days now moving from client parts

90
00:03:18,060 --> 00:03:20,099
to server computers coming soon to the

91
00:03:20,099 --> 00:03:23,280
cloud near you okay now the nice thing

92
00:03:23,280 --> 00:03:25,560
about sgx is that it has an attestation

93
00:03:25,560 --> 00:03:28,980
mechanism that allows you to ascertain

94
00:03:28,980 --> 00:03:32,099
the genuine of of the hardware to which

95
00:03:32,099 --> 00:03:34,080
you're about to set your secrets so if

96
00:03:34,080 --> 00:03:35,519
you're this remote client right there

97
00:03:35,519 --> 00:03:37,620
and you're trying to you're about to

98
00:03:37,620 --> 00:03:40,200
ship secrets into somebody's processor

99
00:03:40,200 --> 00:03:42,000
without knowing what that processor is

100
00:03:42,000 --> 00:03:43,500
or what machine is this over the network

101
00:03:43,500 --> 00:03:45,480
you can still do this without a station

102
00:03:45,480 --> 00:03:47,280
it's cryptographically backed you can

103
00:03:47,280 --> 00:03:48,780
make sure it's genuine Intel hardware

104
00:03:48,780 --> 00:03:50,159
and that you're talking to an enclave

105
00:03:50,159 --> 00:03:52,319
and then it's safe to ship your secrets

106
00:03:52,319 --> 00:03:53,760
into the enclave

107
00:03:53,760 --> 00:03:56,400
now because of the station is so

108
00:03:56,400 --> 00:04:00,120
critical to the trust of uh to to the to

109
00:04:00,120 --> 00:04:01,920
trust in sgx I'm going to spend another

110
00:04:01,920 --> 00:04:04,080
slide at how other station uh flow

111
00:04:04,080 --> 00:04:06,180
actually works so let's say we have some

112
00:04:06,180 --> 00:04:08,400
user Enclave trying to prove that it's

113
00:04:08,400 --> 00:04:11,099
genuine and should be trustworthy well

114
00:04:11,099 --> 00:04:12,900
it issues a thing called the quote it

115
00:04:12,900 --> 00:04:16,199
which is its own ID this goes into the

116
00:04:16,199 --> 00:04:18,418
into the processor the processor has

117
00:04:18,418 --> 00:04:21,180
another station key it signs the quote

118
00:04:21,180 --> 00:04:24,240
and then this quote is being is returned

119
00:04:24,240 --> 00:04:26,100
to the user Enclave now signed by the

120
00:04:26,100 --> 00:04:28,560
hardware and goes all the way across the

121
00:04:28,560 --> 00:04:30,780
internet to a remote client the remote

122
00:04:30,780 --> 00:04:33,620
client can't verify the quote by himself

123
00:04:33,620 --> 00:04:36,000
instead he needs to go to into the

124
00:04:36,000 --> 00:04:38,759
station server to verify the quote for

125
00:04:38,759 --> 00:04:41,100
him Intel knows what Hardware they make

126
00:04:41,100 --> 00:04:43,380
they know what keys are genuine and what

127
00:04:43,380 --> 00:04:45,300
keys are not so they can verify the

128
00:04:45,300 --> 00:04:47,699
signature and when the IES says yay okay

129
00:04:47,699 --> 00:04:50,460
then it comes back to the remote client

130
00:04:50,460 --> 00:04:52,740
and only after verifying the IES

131
00:04:52,740 --> 00:04:55,080
response the client now feels safe to

132
00:04:55,080 --> 00:04:57,000
deliver top secret data into somebody

133
00:04:57,000 --> 00:04:59,220
else's Enclave because they're sure that

134
00:04:59,220 --> 00:05:00,720
they're talking to a genuine Intel

135
00:05:00,720 --> 00:05:02,639
Hardware into a genuine Enclave on that

136
00:05:02,639 --> 00:05:04,139
hardware and not some malicious

137
00:05:04,139 --> 00:05:05,160
simulator

138
00:05:05,160 --> 00:05:07,560
so that's at least the idea the problem

139
00:05:07,560 --> 00:05:09,780
with trusted execution environments is

140
00:05:09,780 --> 00:05:11,820
that they have enemies and they have

141
00:05:11,820 --> 00:05:13,979
very powerful enemies in this in the

142
00:05:13,979 --> 00:05:16,199
form of side Channel attacks so what do

143
00:05:16,199 --> 00:05:18,240
I mean by that well the what happens

144
00:05:18,240 --> 00:05:20,400
once in a while is that these side

145
00:05:20,400 --> 00:05:22,979
channels attack the CPU they extract

146
00:05:22,979 --> 00:05:24,960
that a station key and the trust of the

147
00:05:24,960 --> 00:05:26,400
entire attestation process actually

148
00:05:26,400 --> 00:05:28,259
depends on their attestation key so

149
00:05:28,259 --> 00:05:30,180
whether the station key ends up on

150
00:05:30,180 --> 00:05:32,699
Twitter being being used to sign various

151
00:05:32,699 --> 00:05:35,880
fun stuff then there is a freak out a

152
00:05:35,880 --> 00:05:37,979
responsible disclosure and then very

153
00:05:37,979 --> 00:05:40,320
quickly Intel issues a microcode update

154
00:05:40,320 --> 00:05:43,080
that is being installed inside your

155
00:05:43,080 --> 00:05:45,840
machine's bios and then every time you

156
00:05:45,840 --> 00:05:48,120
boot your machine it updates the CPU and

157
00:05:48,120 --> 00:05:49,919
hopefully squashes all side channels

158
00:05:49,919 --> 00:05:51,539
that's still not enough by itself

159
00:05:51,539 --> 00:05:52,860
because you need to rotate at the

160
00:05:52,860 --> 00:05:55,560
station keys so let's do that okay and

161
00:05:55,560 --> 00:05:57,720
now if you show up to the IES with an

162
00:05:57,720 --> 00:05:59,820
out of date key then you get an Angry

163
00:05:59,820 --> 00:06:01,620
Gram in the form of group out of date

164
00:06:01,620 --> 00:06:04,620
which basically means well this

165
00:06:04,620 --> 00:06:06,360
microcode version is out of date

166
00:06:06,360 --> 00:06:08,880
probably compromised these keys are

167
00:06:08,880 --> 00:06:10,620
probably not trustworthy we don't

168
00:06:10,620 --> 00:06:12,479
recommend you actually use them to put

169
00:06:12,479 --> 00:06:14,160
anything interesting here

170
00:06:14,160 --> 00:06:17,400
so that's a quick view of sgx data

171
00:06:17,400 --> 00:06:19,979
station flow and the takeaway that we

172
00:06:19,979 --> 00:06:21,960
found surprising as we did this project

173
00:06:21,960 --> 00:06:25,979
is how critical the BIOS is in actually

174
00:06:25,979 --> 00:06:27,900
enforcing the security of this thing

175
00:06:27,900 --> 00:06:29,880
because every time there is an update

176
00:06:29,880 --> 00:06:32,460
following a logo then or a side Channel

177
00:06:32,460 --> 00:06:34,919
then guess what you need to install

178
00:06:34,919 --> 00:06:37,199
fresh bios at your machine

179
00:06:37,199 --> 00:06:39,900
the problem with biosets is that while

180
00:06:39,900 --> 00:06:41,460
installing them is a complicated menu

181
00:06:41,460 --> 00:06:43,680
process requires experienced users

182
00:06:43,680 --> 00:06:46,259
there's no automated way of doing it at

183
00:06:46,259 --> 00:06:47,160
scale

184
00:06:47,160 --> 00:06:49,199
and buyers vendors by themselves are

185
00:06:49,199 --> 00:06:50,580
very cautious because they're very

186
00:06:50,580 --> 00:06:52,500
careful about breaking motherboards one

187
00:06:52,500 --> 00:06:54,000
mistake in a bios update and you're

188
00:06:54,000 --> 00:06:55,620
basically buying new hardware

189
00:06:55,620 --> 00:06:57,960
so there's some inherent tension here

190
00:06:57,960 --> 00:06:59,759
and when we decided to take a look at

191
00:06:59,759 --> 00:07:02,039
the BIOS release time between when the

192
00:07:02,039 --> 00:07:04,020
vulnerability became public and when the

193
00:07:04,020 --> 00:07:05,720
BIOS that actually

194
00:07:05,720 --> 00:07:08,400
fixes it becomes available well guess

195
00:07:08,400 --> 00:07:10,440
what the picture is not pretty it takes

196
00:07:10,440 --> 00:07:13,500
between 37 days and 329 days to even

197
00:07:13,500 --> 00:07:16,380
have that bios yet alone now go and

198
00:07:16,380 --> 00:07:18,360
manually install this and close your

199
00:07:18,360 --> 00:07:19,919
entire infrastructure

200
00:07:19,919 --> 00:07:21,000
okay

201
00:07:21,000 --> 00:07:24,479
and if you're a vendor hoping to use sjx

202
00:07:24,479 --> 00:07:26,280
to hold your secrets you're now in this

203
00:07:26,280 --> 00:07:28,740
dilemma because you can either allow

204
00:07:28,740 --> 00:07:30,960
unpatched machines on Rescue Secrets

205
00:07:30,960 --> 00:07:33,660
being exposed or you can make you can

206
00:07:33,660 --> 00:07:35,639
try making users to update their bios

207
00:07:35,639 --> 00:07:37,440
the problem is that some users simply

208
00:07:37,440 --> 00:07:38,880
can't update so you have to drop them

209
00:07:38,880 --> 00:07:40,979
otherwise or just are now pissed off

210
00:07:40,979 --> 00:07:42,900
because you have to guide them through

211
00:07:42,900 --> 00:07:45,060
these clunking mechanics of updating the

212
00:07:45,060 --> 00:07:46,740
bios so then we found this awesome

213
00:07:46,740 --> 00:07:50,000
animation that basically outlines the

214
00:07:50,000 --> 00:07:52,080
outlines your problem

215
00:07:52,080 --> 00:07:53,940
and what we'll see is that both

216
00:07:53,940 --> 00:07:55,560
approaches in this dilemma no matter

217
00:07:55,560 --> 00:07:56,940
what you do what you do you're gonna

218
00:07:56,940 --> 00:07:58,139
have issues

219
00:07:58,139 --> 00:08:00,120
so the first case study we would like to

220
00:08:00,120 --> 00:08:03,180
talk about is power DVD and what is that

221
00:08:03,180 --> 00:08:06,780
well 4K Blu-ray discs are have DRM in

222
00:08:06,780 --> 00:08:08,900
them they're encrypted and you can't

223
00:08:08,900 --> 00:08:11,940
quite clone these disks now the way that

224
00:08:11,940 --> 00:08:14,460
DRM this the way that Blu-ray discs are

225
00:08:14,460 --> 00:08:15,840
supposed to be played they're supposed

226
00:08:15,840 --> 00:08:17,819
to be a hardware player a big box in

227
00:08:17,819 --> 00:08:20,099
which you stick them into but you might

228
00:08:20,099 --> 00:08:21,599
decide for some reason that you want to

229
00:08:21,599 --> 00:08:23,580
play them on your computer and you can't

230
00:08:23,580 --> 00:08:26,580
quite do that except with except if you

231
00:08:26,580 --> 00:08:28,020
use one piece of software called

232
00:08:28,020 --> 00:08:30,479
powerdvd which is the only software as

233
00:08:30,479 --> 00:08:33,000
file as we know that is that is licensed

234
00:08:33,000 --> 00:08:35,339
to play Blu-ray discs what does it do it

235
00:08:35,339 --> 00:08:38,219
spins up in sgx enclave and decrypts the

236
00:08:38,219 --> 00:08:40,679
disk inside The Enclave using a protocol

237
00:08:40,679 --> 00:08:44,399
called aacs 2.0 well the thing is that

238
00:08:44,399 --> 00:08:46,260
they have a loud user base a very

239
00:08:46,260 --> 00:08:48,000
diverse set of platforms and most of the

240
00:08:48,000 --> 00:08:49,680
users are actually pretty non-technical

241
00:08:49,680 --> 00:08:52,080
so bios updates are not a thing that

242
00:08:52,080 --> 00:08:54,060
they would like the users to do so they

243
00:08:54,060 --> 00:08:55,980
trust group out of date machines which

244
00:08:55,980 --> 00:08:57,779
means that I could whip out my old

245
00:08:57,779 --> 00:09:00,120
foreshadow code back from 2018 when I

246
00:09:00,120 --> 00:09:01,800
was standing there presenting this and

247
00:09:01,800 --> 00:09:03,420
went like all right well you can dump

248
00:09:03,420 --> 00:09:06,600
The Enclave we reverse engineer aacs 2.0

249
00:09:06,600 --> 00:09:08,820
protocol it's full of wonderful crypto

250
00:09:08,820 --> 00:09:11,399
that this audience would enjoy so go dig

251
00:09:11,399 --> 00:09:13,560
into in our paper this is like modern

252
00:09:13,560 --> 00:09:17,040
DRM uh we could we could extract this

253
00:09:17,040 --> 00:09:19,200
decryption Keys which of course solve

254
00:09:19,200 --> 00:09:21,360
now solves the wonderful open problem of

255
00:09:21,360 --> 00:09:23,580
watching Blu-rays on your AMD and M1

256
00:09:23,580 --> 00:09:25,800
machines also on Linux because powerdvd

257
00:09:25,800 --> 00:09:27,779
only works on windows so now that we've

258
00:09:27,779 --> 00:09:30,480
solved that problem uh there is very

259
00:09:30,480 --> 00:09:32,040
little that can be done about it because

260
00:09:32,040 --> 00:09:34,200
you cannot expect powerdvd to start

261
00:09:34,200 --> 00:09:36,300
enforcing sgx habits because otherwise

262
00:09:36,300 --> 00:09:38,399
they'll lose you the user base it's not

263
00:09:38,399 --> 00:09:40,019
clear what what the countermeasure is

264
00:09:40,019 --> 00:09:42,000
here and I'm going to turn over to

265
00:09:42,000 --> 00:09:43,740
Christina to talk about Second Use case

266
00:09:43,740 --> 00:09:46,640
which is the secret Network

267
00:09:46,920 --> 00:09:49,860
awesome so we saw an example there of

268
00:09:49,860 --> 00:09:51,060
something where the system had a hard

269
00:09:51,060 --> 00:09:53,580
time enforcing bios updates we're going

270
00:09:53,580 --> 00:09:54,839
to look at it now an instance it hits

271
00:09:54,839 --> 00:09:56,640
that second bullet point of a system

272
00:09:56,640 --> 00:09:58,380
that tries to keep up to date and

273
00:09:58,380 --> 00:09:59,700
enforce uh updates through the

274
00:09:59,700 --> 00:10:01,740
attestation service but we still see

275
00:10:01,740 --> 00:10:03,480
issues in practice with this being

276
00:10:03,480 --> 00:10:04,800
utilized

277
00:10:04,800 --> 00:10:06,839
so if you're not familiar with secret

278
00:10:06,839 --> 00:10:08,820
network is the first production instance

279
00:10:08,820 --> 00:10:11,519
of tee based private smart contracts if

280
00:10:11,519 --> 00:10:12,720
you're not familiar with what a smart

281
00:10:12,720 --> 00:10:14,580
contract is it's basically a stateful

282
00:10:14,580 --> 00:10:16,380
program that users can interact with

283
00:10:16,380 --> 00:10:18,180
then that can make automated decisions

284
00:10:18,180 --> 00:10:21,660
regarding the transference of assets

285
00:10:21,660 --> 00:10:23,339
so secret launched their privacy

286
00:10:23,339 --> 00:10:25,200
preserving smart contract features in

287
00:10:25,200 --> 00:10:27,300
2020 and right now they have a current

288
00:10:27,300 --> 00:10:29,100
market cap of roughly over 100 million

289
00:10:29,100 --> 00:10:30,839
USD

290
00:10:30,839 --> 00:10:33,240
at a high level it basically works by

291
00:10:33,240 --> 00:10:35,459
storing the same private key and every

292
00:10:35,459 --> 00:10:38,040
validators enclave and this key and all

293
00:10:38,040 --> 00:10:39,899
the other Associated material is derived

294
00:10:39,899 --> 00:10:41,580
from what they call the consensus seed

295
00:10:41,580 --> 00:10:44,040
and this seed was generated at the start

296
00:10:44,040 --> 00:10:46,200
of the network and it's given and

297
00:10:46,200 --> 00:10:48,120
provisioned to every validator that

298
00:10:48,120 --> 00:10:50,519
joins the network then

299
00:10:50,519 --> 00:10:52,680
and crucially all the transactions and

300
00:10:52,680 --> 00:10:54,720
contracts data and Untamed data and all

301
00:10:54,720 --> 00:10:57,240
of this is encrypted to this key and

302
00:10:57,240 --> 00:10:58,260
this is where we get the Privacy

303
00:10:58,260 --> 00:11:00,420
preserving features from

304
00:11:00,420 --> 00:11:02,100
so how does this work in a little bit

305
00:11:02,100 --> 00:11:04,440
more detail so let's say we have a

306
00:11:04,440 --> 00:11:06,060
validator enclave and you want to set up

307
00:11:06,060 --> 00:11:08,220
a new validator node what do you do so

308
00:11:08,220 --> 00:11:09,480
the first thing you do is you go through

309
00:11:09,480 --> 00:11:11,640
the attestation process that Daniel uh

310
00:11:11,640 --> 00:11:12,779
discussed

311
00:11:12,779 --> 00:11:14,339
um and to make sure that you are genuine

312
00:11:14,339 --> 00:11:15,959
Intel hardware and that you are actually

313
00:11:15,959 --> 00:11:18,120
fully patched and up to date running the

314
00:11:18,120 --> 00:11:20,399
latest microcode and all of that if this

315
00:11:20,399 --> 00:11:21,839
passes through the network and all the

316
00:11:21,839 --> 00:11:24,000
attestation checks out then the network

317
00:11:24,000 --> 00:11:25,860
Provisions you with the consensus seed

318
00:11:25,860 --> 00:11:27,300
which allows you to derive this private

319
00:11:27,300 --> 00:11:28,700
key and everything else that you need

320
00:11:28,700 --> 00:11:31,380
and as more validators come along this

321
00:11:31,380 --> 00:11:33,420
entire process just keeps happening and

322
00:11:33,420 --> 00:11:35,640
this allows them to then maintain the

323
00:11:35,640 --> 00:11:37,320
state execute contracts in a privacy

324
00:11:37,320 --> 00:11:39,000
preserving way

325
00:11:39,000 --> 00:11:40,860
so if you're a user now and you want to

326
00:11:40,860 --> 00:11:43,380
execute a smart contract what do you do

327
00:11:43,380 --> 00:11:45,600
so you take whatever your transaction is

328
00:11:45,600 --> 00:11:46,920
whatever your update is whatever you

329
00:11:46,920 --> 00:11:49,200
want to do you encrypt it and you send

330
00:11:49,200 --> 00:11:51,000
it over to the validators where it's

331
00:11:51,000 --> 00:11:54,480
loaded Into The Enclave only then once

332
00:11:54,480 --> 00:11:55,920
it's in The Enclave is it decrypted

333
00:11:55,920 --> 00:11:57,000
because that's where all the keys and

334
00:11:57,000 --> 00:11:58,920
the secrets live the update or whatever

335
00:11:58,920 --> 00:12:00,180
happens

336
00:12:00,180 --> 00:12:02,640
and then everything that's sent onto the

337
00:12:02,640 --> 00:12:04,800
chain then is encrypted and because all

338
00:12:04,800 --> 00:12:06,600
the validators share the same key they

339
00:12:06,600 --> 00:12:08,459
can all access this information allowing

340
00:12:08,459 --> 00:12:10,740
them to maintain the chain

341
00:12:10,740 --> 00:12:13,200
so exhibit started in roughly 2020

342
00:12:13,200 --> 00:12:15,660
secret had been running along doing this

343
00:12:15,660 --> 00:12:18,779
system and then in August of 2022 xapic

344
00:12:18,779 --> 00:12:20,760
was disclosed with a public assertion

345
00:12:20,760 --> 00:12:22,260
that patching wouldn't be enforced until

346
00:12:22,260 --> 00:12:25,320
March or April of 2023 by IIs and so

347
00:12:25,320 --> 00:12:26,399
we'd already been working on this

348
00:12:26,399 --> 00:12:28,320
project looking at powerdvd and things

349
00:12:28,320 --> 00:12:31,320
like this but this got us thinking so

350
00:12:31,320 --> 00:12:33,540
what can we do then so we have this gap

351
00:12:33,540 --> 00:12:36,600
between disclosure and enforcement would

352
00:12:36,600 --> 00:12:38,339
we be able to get a validator node up

353
00:12:38,339 --> 00:12:40,200
and running then on the system that

354
00:12:40,200 --> 00:12:41,940
passes the IIs at the station process

355
00:12:41,940 --> 00:12:44,639
but is still vulnerable to x uh apic and

356
00:12:44,639 --> 00:12:46,260
if we did what might we be able to

357
00:12:46,260 --> 00:12:47,700
extract and what might the consequences

358
00:12:47,700 --> 00:12:49,200
be

359
00:12:49,200 --> 00:12:51,360
so this is exactly then what we set out

360
00:12:51,360 --> 00:12:52,500
to do

361
00:12:52,500 --> 00:12:54,420
um so I want to note that this quote up

362
00:12:54,420 --> 00:12:55,860
here this is from Secrets gray paper

363
00:12:55,860 --> 00:12:57,660
it's important to note that the majority

364
00:12:57,660 --> 00:12:59,639
of theoretical attacks that occur on TES

365
00:12:59,639 --> 00:13:01,920
and sgx in particular happen within

366
00:13:01,920 --> 00:13:04,560
research Labs so we also set out to kind

367
00:13:04,560 --> 00:13:06,839
of yes we also set out to kind of debunk

368
00:13:06,839 --> 00:13:08,940
this kind of widespread assumption that

369
00:13:08,940 --> 00:13:10,680
these are tax or purely academic in

370
00:13:10,680 --> 00:13:12,480
nature and don't actually impact real

371
00:13:12,480 --> 00:13:14,820
systems

372
00:13:14,820 --> 00:13:17,700
so there's a lot to unpack here we're

373
00:13:17,700 --> 00:13:18,899
not going to go through this too much

374
00:13:18,899 --> 00:13:21,720
but um setting up the validator node

375
00:13:21,720 --> 00:13:22,920
which is the first thing we had to do

376
00:13:22,920 --> 00:13:24,060
was actually one of the toughest parts

377
00:13:24,060 --> 00:13:26,220
of the attack because setting us up sgx

378
00:13:26,220 --> 00:13:28,320
is actually harder than breaking it

379
00:13:28,320 --> 00:13:30,600
um but if you want to if you want to

380
00:13:30,600 --> 00:13:32,399
learn more about this please come talk

381
00:13:32,399 --> 00:13:34,079
to us there's lots of fun little oopses

382
00:13:34,079 --> 00:13:36,540
and fun things that we to talk about

383
00:13:36,540 --> 00:13:38,579
um but once we navigated all the

384
00:13:38,579 --> 00:13:40,320
hardware and figured out what CPU we

385
00:13:40,320 --> 00:13:41,700
wanted to use we were able to

386
00:13:41,700 --> 00:13:43,860
successfully register a computer onto

387
00:13:43,860 --> 00:13:45,899
the network as a validator that was

388
00:13:45,899 --> 00:13:47,880
vulnerable to x-apic even though it

389
00:13:47,880 --> 00:13:50,459
passed through the attestation process

390
00:13:50,459 --> 00:13:52,500
so once we have this oh and one

391
00:13:52,500 --> 00:13:54,360
important thing to note is that any node

392
00:13:54,360 --> 00:13:56,279
that registers as a validator even if

393
00:13:56,279 --> 00:13:58,200
it's not actively adding blocks to the

394
00:13:58,200 --> 00:14:00,180
system or contributing is provisioned

395
00:14:00,180 --> 00:14:02,160
with this consensus seed so the attack

396
00:14:02,160 --> 00:14:04,380
basically costs just the cost of a

397
00:14:04,380 --> 00:14:06,060
registration transaction which is one

398
00:14:06,060 --> 00:14:08,279
secret so less than one US dollar

399
00:14:08,279 --> 00:14:10,560
so once we have our node up and running

400
00:14:10,560 --> 00:14:13,500
now we can extract the consensus seed

401
00:14:13,500 --> 00:14:15,060
um because we have a vulnerable node

402
00:14:15,060 --> 00:14:17,459
that we can attack and once we have this

403
00:14:17,459 --> 00:14:19,500
consensus seed the keys derived from the

404
00:14:19,500 --> 00:14:21,720
consensus seed then allow us to decrypt

405
00:14:21,720 --> 00:14:23,820
any transaction or contract state that

406
00:14:23,820 --> 00:14:25,019
exists

407
00:14:25,019 --> 00:14:27,360
we actually wrote a fun little tool just

408
00:14:27,360 --> 00:14:29,820
for the test net that we called pikrit

409
00:14:29,820 --> 00:14:31,860
um which allows you to take any um

410
00:14:31,860 --> 00:14:34,139
contract State any encrypted data on the

411
00:14:34,139 --> 00:14:36,120
Chain plug it in and decrypt it

412
00:14:36,120 --> 00:14:38,040
basically breaking all of the Privacy

413
00:14:38,040 --> 00:14:41,040
guarantees of the smart contract system

414
00:14:41,040 --> 00:14:42,899
we also built our own little private nft

415
00:14:42,899 --> 00:14:45,300
that we loaded up onto the chain

416
00:14:45,300 --> 00:14:47,040
um so there is a fun little rubber ducky

417
00:14:47,040 --> 00:14:48,779
nft hiding somewhere in the secret

418
00:14:48,779 --> 00:14:51,480
network if you want to go find it

419
00:14:51,480 --> 00:14:53,880
yeah

420
00:14:53,880 --> 00:14:55,560
so I do want to talk briefly about

421
00:14:55,560 --> 00:14:57,360
mitigations here because unlike with

422
00:14:57,360 --> 00:14:59,220
powerdvd where there's really not a lot

423
00:14:59,220 --> 00:15:01,139
they can do there were things both

424
00:15:01,139 --> 00:15:02,940
short-term and long-term um that secret

425
00:15:02,940 --> 00:15:04,860
both did and is working to do and things

426
00:15:04,860 --> 00:15:06,180
that we recommend in terms of

427
00:15:06,180 --> 00:15:07,740
mitigations

428
00:15:07,740 --> 00:15:09,839
so the immediate thing that they did is

429
00:15:09,839 --> 00:15:11,940
basically froze registration to block

430
00:15:11,940 --> 00:15:13,920
all new nodes so other people couldn't

431
00:15:13,920 --> 00:15:15,839
come in and do exactly what we did in

432
00:15:15,839 --> 00:15:18,060
voter register vulnerable nodes onto the

433
00:15:18,060 --> 00:15:20,820
network and potentially steal secrets uh

434
00:15:20,820 --> 00:15:21,899
they actually did this through an

435
00:15:21,899 --> 00:15:23,339
interesting mechanism they didn't change

436
00:15:23,339 --> 00:15:24,839
the protocol or the code or anything

437
00:15:24,839 --> 00:15:27,240
like that they basically just revoked

438
00:15:27,240 --> 00:15:29,639
their developer key with IAS which meant

439
00:15:29,639 --> 00:15:31,560
that anytime you try to go to IIs to ask

440
00:15:31,560 --> 00:15:34,440
for at the station uh verification they

441
00:15:34,440 --> 00:15:36,180
just said no we don't want to talk to

442
00:15:36,180 --> 00:15:37,980
you so if you couldn't pass uh at the

443
00:15:37,980 --> 00:15:39,420
station or couldn't even interact with

444
00:15:39,420 --> 00:15:41,339
the system then no new nodes could

445
00:15:41,339 --> 00:15:43,199
register

446
00:15:43,199 --> 00:15:45,420
so in the short term then um what have

447
00:15:45,420 --> 00:15:47,639
they done so they actually then between

448
00:15:47,639 --> 00:15:50,220
before TCB recovery happened they

449
00:15:50,220 --> 00:15:52,139
implemented an allow list um to make

450
00:15:52,139 --> 00:15:54,060
sure that only non-vulnerable processors

451
00:15:54,060 --> 00:15:55,920
could join so this is actually done

452
00:15:55,920 --> 00:15:57,300
using a feature that we didn't talk

453
00:15:57,300 --> 00:15:59,160
about in the attestation process which

454
00:15:59,160 --> 00:16:01,019
is that there's actually a group ID that

455
00:16:01,019 --> 00:16:02,699
is part of that process as well that

456
00:16:02,699 --> 00:16:04,620
goes into the report and this basically

457
00:16:04,620 --> 00:16:07,320
bins processors into families so what

458
00:16:07,320 --> 00:16:09,300
they could do then is check not only

459
00:16:09,300 --> 00:16:11,100
that your IES passed so you weren't

460
00:16:11,100 --> 00:16:12,839
vulnerable to like anything before X

461
00:16:12,839 --> 00:16:15,120
apic but they could also then check your

462
00:16:15,120 --> 00:16:16,980
processor family to make sure that you

463
00:16:16,980 --> 00:16:18,779
would not be vulnerable to xapic as well

464
00:16:18,779 --> 00:16:20,459
that way they could trickle in new nodes

465
00:16:20,459 --> 00:16:22,620
and still keep the system running

466
00:16:22,620 --> 00:16:24,420
and then after TCB recovery

467
00:16:24,420 --> 00:16:26,699
interestingly they've also enforced that

468
00:16:26,699 --> 00:16:28,320
only server class Hardware can actually

469
00:16:28,320 --> 00:16:30,000
join the network obviously as long as

470
00:16:30,000 --> 00:16:31,680
their microcode is patched in up to date

471
00:16:31,680 --> 00:16:33,899
now

472
00:16:33,899 --> 00:16:35,639
so in the long term what are they doing

473
00:16:35,639 --> 00:16:37,680
or what have we recommended

474
00:16:37,680 --> 00:16:39,420
um it actually turns out they didn't

475
00:16:39,420 --> 00:16:41,220
have any sort of strategy for rolling

476
00:16:41,220 --> 00:16:43,139
this consensus seed into place like I

477
00:16:43,139 --> 00:16:44,040
said I don't know if they didn't expect

478
00:16:44,040 --> 00:16:46,079
to have to do this or not so they're

479
00:16:46,079 --> 00:16:47,579
developing a strategy for figuring out

480
00:16:47,579 --> 00:16:49,440
how to roll this one consensus seed

481
00:16:49,440 --> 00:16:51,240
because of the fact that it could have

482
00:16:51,240 --> 00:16:54,000
potentially been extracted

483
00:16:54,000 --> 00:16:55,680
um also moving toward a more defense

484
00:16:55,680 --> 00:16:57,720
in-depth system making sure there are

485
00:16:57,720 --> 00:16:59,100
many layers that you might have to dig

486
00:16:59,100 --> 00:17:00,899
through before you can get to Secrets or

487
00:17:00,899 --> 00:17:01,860
Keys

488
00:17:01,860 --> 00:17:03,600
um and also from a defense and depth

489
00:17:03,600 --> 00:17:05,220
perspective making sure that there's not

490
00:17:05,220 --> 00:17:07,079
necessarily just one secret that rules

491
00:17:07,079 --> 00:17:08,939
them all where if you're able to extract

492
00:17:08,939 --> 00:17:10,319
it you're able to break all of the

493
00:17:10,319 --> 00:17:13,639
Privacy guarantees of the system

494
00:17:14,520 --> 00:17:16,380
so I want to wrap up by talking a little

495
00:17:16,380 --> 00:17:18,660
bit more broadly about Lessons Learned

496
00:17:18,660 --> 00:17:20,699
both through a disclosure process and as

497
00:17:20,699 --> 00:17:22,079
well as from this work

498
00:17:22,079 --> 00:17:24,059
so from the disclosure process we

499
00:17:24,059 --> 00:17:25,319
actually got to see firsthand that

500
00:17:25,319 --> 00:17:26,819
there's a constant tension between

501
00:17:26,819 --> 00:17:29,520
different sgx deployments so some

502
00:17:29,520 --> 00:17:30,960
deployments need fast roll out of

503
00:17:30,960 --> 00:17:32,880
patches TCB recovery and attestation

504
00:17:32,880 --> 00:17:35,160
reports like the secret Network who

505
00:17:35,160 --> 00:17:37,559
needs IAS to be enforcing patching as

506
00:17:37,559 --> 00:17:39,840
soon as a vulnerability hits

507
00:17:39,840 --> 00:17:41,820
um the public so that way no one can

508
00:17:41,820 --> 00:17:43,500
register vulnerable nodes again like we

509
00:17:43,500 --> 00:17:44,520
did

510
00:17:44,520 --> 00:17:46,500
but some larger scale systems or other

511
00:17:46,500 --> 00:17:48,240
deployments might need significant time

512
00:17:48,240 --> 00:17:50,400
to roll out updates maybe they have a

513
00:17:50,400 --> 00:17:52,140
large number of notes that they need to

514
00:17:52,140 --> 00:17:54,120
install the updates on and bios updates

515
00:17:54,120 --> 00:17:55,860
and then reboot the entire system maybe

516
00:17:55,860 --> 00:17:57,480
there's reliability checks they need to

517
00:17:57,480 --> 00:17:59,640
do Etc

518
00:17:59,640 --> 00:18:01,380
but the way that the system is set up

519
00:18:01,380 --> 00:18:02,880
right now with this single attestation

520
00:18:02,880 --> 00:18:05,100
server um in service it lumps everyone

521
00:18:05,100 --> 00:18:06,960
into the same boat where everyone has to

522
00:18:06,960 --> 00:18:09,660
run on exactly the same update timeline

523
00:18:09,660 --> 00:18:11,460
uh we actually got to see this in

524
00:18:11,460 --> 00:18:13,740
practice with this uh X epic

525
00:18:13,740 --> 00:18:15,720
um like live uh so when it was first

526
00:18:15,720 --> 00:18:17,880
came out you can see that they plan to

527
00:18:17,880 --> 00:18:20,880
enforce it in April of 2023 then we came

528
00:18:20,880 --> 00:18:21,660
along

529
00:18:21,660 --> 00:18:23,100
um and disclosed our work and they were

530
00:18:23,100 --> 00:18:24,840
like uh oh we better start enforcing

531
00:18:24,840 --> 00:18:25,620
this

532
00:18:25,620 --> 00:18:27,299
um so they picked November 15th as an

533
00:18:27,299 --> 00:18:29,400
enforcement date uh and then they got

534
00:18:29,400 --> 00:18:31,440
pushed back from some uh law other

535
00:18:31,440 --> 00:18:33,419
deployments that said no no we can't be

536
00:18:33,419 --> 00:18:35,220
ready by then for you you know we won't

537
00:18:35,220 --> 00:18:36,840
be patched in our machine's own patch at

538
00:18:36,840 --> 00:18:38,700
the station we need more time and you

539
00:18:38,700 --> 00:18:40,320
watch them yo-yo then to the final date

540
00:18:40,320 --> 00:18:42,360
they settled on which was November 29th

541
00:18:42,360 --> 00:18:44,340
so you can see this tension really at

542
00:18:44,340 --> 00:18:45,900
work then between different deployments

543
00:18:45,900 --> 00:18:48,360
and what their needs are

544
00:18:48,360 --> 00:18:50,940
in terms of broader more generic Lessons

545
00:18:50,940 --> 00:18:52,140
Learned

546
00:18:52,140 --> 00:18:53,700
um again if we go back to our

547
00:18:53,700 --> 00:18:55,919
theoretical attacks these attacks are

548
00:18:55,919 --> 00:18:57,600
not just theoretical

549
00:18:57,600 --> 00:18:59,640
um clearly they have significant real

550
00:18:59,640 --> 00:19:01,440
world impact they're also not just done

551
00:19:01,440 --> 00:19:03,600
in research Labs uh they're done in grad

552
00:19:03,600 --> 00:19:05,400
students Apartments

553
00:19:05,400 --> 00:19:06,020
um

554
00:19:06,020 --> 00:19:08,940
but this is not just theoretical it

555
00:19:08,940 --> 00:19:10,500
certainly can have significant real

556
00:19:10,500 --> 00:19:12,840
world impact

557
00:19:12,840 --> 00:19:15,120
in terms of what the users for example

558
00:19:15,120 --> 00:19:16,440
can learn

559
00:19:16,440 --> 00:19:18,419
um you should if any of like you use a

560
00:19:18,419 --> 00:19:20,100
system that has sdx somewhere in the

561
00:19:20,100 --> 00:19:21,840
pipeline you really need to understand

562
00:19:21,840 --> 00:19:24,840
the impact on your data when sgx is

563
00:19:24,840 --> 00:19:27,419
broken what data is used in there how is

564
00:19:27,419 --> 00:19:29,280
it used and what happens in the events

565
00:19:29,280 --> 00:19:31,559
of a compromise

566
00:19:31,559 --> 00:19:34,260
for developers you really need to plan

567
00:19:34,260 --> 00:19:36,419
ahead for TCB recovery and you have to

568
00:19:36,419 --> 00:19:38,940
assume that sgx is going to break

569
00:19:38,940 --> 00:19:40,740
um you can't just plan and not have a

570
00:19:40,740 --> 00:19:42,360
strategy you have to develop your system

571
00:19:42,360 --> 00:19:43,980
with strategies in mind for how you're

572
00:19:43,980 --> 00:19:46,140
going to go through this process

573
00:19:46,140 --> 00:19:47,880
and it's also really important to

574
00:19:47,880 --> 00:19:49,740
understand what information might leak

575
00:19:49,740 --> 00:19:51,299
via different classes of attacks and

576
00:19:51,299 --> 00:19:53,340
what the mitigations are

577
00:19:53,340 --> 00:19:54,419
um there's not a lot of time for me

578
00:19:54,419 --> 00:19:55,860
we're not talking about it here but we

579
00:19:55,860 --> 00:19:57,240
actually as part of this work we've also

580
00:19:57,240 --> 00:19:59,340
built a comprehensive categorization of

581
00:19:59,340 --> 00:20:01,080
all the publicly known Hardware attacks

582
00:20:01,080 --> 00:20:03,179
on sgx the information they leak what

583
00:20:03,179 --> 00:20:04,440
the various countermeasures are and

584
00:20:04,440 --> 00:20:05,700
stuff so check that out if you're

585
00:20:05,700 --> 00:20:06,960
interested in learning a little bit more

586
00:20:06,960 --> 00:20:08,760
about that

587
00:20:08,760 --> 00:20:10,980
and again I want to emphasize that

588
00:20:10,980 --> 00:20:12,480
defense and depth is still important

589
00:20:12,480 --> 00:20:14,280
side channels are an active research

590
00:20:14,280 --> 00:20:16,620
area as we all know

591
00:20:16,620 --> 00:20:19,500
um and you have to assume that sgx is

592
00:20:19,500 --> 00:20:22,860
going to break and you have to plan for

593
00:20:22,860 --> 00:20:24,960
it it breaks early it breaks often and

594
00:20:24,960 --> 00:20:26,580
once it stays broken it's broken for a

595
00:20:26,580 --> 00:20:29,100
while so you've got a plan for that

596
00:20:29,100 --> 00:20:31,440
and we also did a lot of discussion

597
00:20:31,440 --> 00:20:33,419
about future te design recommendations

598
00:20:33,419 --> 00:20:35,400
for example that they really need to

599
00:20:35,400 --> 00:20:37,080
include a better mechanism for fast and

600
00:20:37,080 --> 00:20:38,820
automatic updates because as we see in

601
00:20:38,820 --> 00:20:40,500
this bios update mechanism it's not

602
00:20:40,500 --> 00:20:42,059
sustainable and doesn't necessarily work

603
00:20:42,059 --> 00:20:44,220
in practice

604
00:20:44,220 --> 00:20:46,440
so with that I want to thank you for

605
00:20:46,440 --> 00:20:48,600
listening um this is our website if we

606
00:20:48,600 --> 00:20:50,280
urge you to go check out anything and I

607
00:20:50,280 --> 00:20:51,480
want to have a shout out and a thank you

608
00:20:51,480 --> 00:20:53,520
to all of our awesome collaborators on

609
00:20:53,520 --> 00:20:54,660
this paper

610
00:20:54,660 --> 00:20:57,570
um and with that we will take questions

611
00:20:57,570 --> 00:21:03,539
[Applause]

612
00:21:03,539 --> 00:21:06,980
great we have time for one question

613
00:21:08,400 --> 00:21:09,900
maybe I shouldn't have been the one

614
00:21:09,900 --> 00:21:12,000
question but um if you wanted to make

615
00:21:12,000 --> 00:21:14,280
one if somebody wanted to make a an

616
00:21:14,280 --> 00:21:16,860
enclave that wasn't going to break and

617
00:21:16,860 --> 00:21:19,320
they could do whatever they wanted you

618
00:21:19,320 --> 00:21:22,860
know crazy ceremonies

619
00:21:22,860 --> 00:21:27,080
what uh what what would they do

620
00:21:32,580 --> 00:21:34,799
in this case there's not going to be a

621
00:21:34,799 --> 00:21:37,799
one size fits all here it it really is

622
00:21:37,799 --> 00:21:39,960
not clear what to do and very very much

623
00:21:39,960 --> 00:21:41,340
depends on your use case on the

624
00:21:41,340 --> 00:21:42,960
computation you're trying to run and

625
00:21:42,960 --> 00:21:44,220
what you're trying to do

626
00:21:44,220 --> 00:21:46,140
that sounds like a whole other lecture

627
00:21:46,140 --> 00:21:48,240
yeah yes

628
00:21:48,240 --> 00:21:49,740
okay fine we'll take one more question

629
00:21:49,740 --> 00:21:51,900
and then we'll move on what stops you

630
00:21:51,900 --> 00:21:54,659
from tweeting the consensus seed

631
00:21:54,659 --> 00:21:57,900
say again what is stopping you from

632
00:21:57,900 --> 00:21:59,820
tweeting the consensus seed from

633
00:21:59,820 --> 00:22:04,100
tweeting it yes that would not be nice

634
00:22:07,880 --> 00:22:11,520
great okay to everyone thank you uh

635
00:22:11,520 --> 00:22:13,440
thank you both and yeah let's thank the

636
00:22:13,440 --> 00:22:14,660
speakers one more time

637
00:22:14,660 --> 00:22:14,940
[Applause]

638
00:22:14,940 --> 00:22:19,119
[Music]

639
00:22:21,440 --> 00:22:24,780
okay our next talk is going to be on uh

640
00:22:24,780 --> 00:22:26,820
Randomness failures and in particular

641
00:22:26,820 --> 00:22:31,460
Randomness in the Cisco Asa

642
00:22:31,500 --> 00:22:33,179
hi

643
00:22:33,179 --> 00:22:34,740
hi sorry

644
00:22:34,740 --> 00:22:38,100
hi I'm Riyad and with my colleague Arno

645
00:22:38,100 --> 00:22:40,020
we'll present you some findings on

646
00:22:40,020 --> 00:22:42,900
Randomness issues in Cisco Aza line of

647
00:22:42,900 --> 00:22:43,820
product

648
00:22:43,820 --> 00:22:47,520
and our responsible disclosure to Cisco

649
00:22:47,520 --> 00:22:49,200
about this

650
00:22:49,200 --> 00:22:51,600
so the beginning of the story was when

651
00:22:51,600 --> 00:22:53,700
we were working on a cryptographic

652
00:22:53,700 --> 00:22:56,280
library on the elliptic curves and the

653
00:22:56,280 --> 00:22:59,520
x50 noun parser as internal projects and

654
00:22:59,520 --> 00:23:02,159
we had to test them on a quite large set

655
00:23:02,159 --> 00:23:05,039
of certificates other than 250 million

656
00:23:05,039 --> 00:23:07,919
certificates and among them we stumbled

657
00:23:07,919 --> 00:23:11,580
upon uh so a cdsa certificate with the

658
00:23:11,580 --> 00:23:14,600
duplicated nonsense and duplicated keys

659
00:23:14,600 --> 00:23:18,539
after further investigation we found out

660
00:23:18,539 --> 00:23:21,299
that all these ecdsa certificates were

661
00:23:21,299 --> 00:23:23,159
self-signed certificates from the same

662
00:23:23,159 --> 00:23:25,440
vendor Cisco Aza

663
00:23:25,440 --> 00:23:28,500
more investigation showed that uh

664
00:23:28,500 --> 00:23:31,140
RSA self-signed certificates from the

665
00:23:31,140 --> 00:23:34,200
same vendors suffered from also modulus

666
00:23:34,200 --> 00:23:37,559
duplications and as we can see here the

667
00:23:37,559 --> 00:23:41,340
proportion of duplication is quite large

668
00:23:41,340 --> 00:23:45,000
focusing on ecdsa one thing to notice is

669
00:23:45,000 --> 00:23:49,679
that nonsreuse on ecdsa is quite

670
00:23:49,679 --> 00:23:52,380
devastating since using the same nodes

671
00:23:52,380 --> 00:23:54,120
with the same private key will break

672
00:23:54,120 --> 00:23:56,640
both the nodes and the private key

673
00:23:56,640 --> 00:24:00,299
and we exploited this attack since we

674
00:24:00,299 --> 00:24:01,799
had some intersection between the

675
00:24:01,799 --> 00:24:04,440
duplicated non-uh certificate set and

676
00:24:04,440 --> 00:24:06,419
the duplicated Keys certificate set

677
00:24:06,419 --> 00:24:08,880
using a kind of iterative algorithm

678
00:24:08,880 --> 00:24:11,280
where we were bouncing from a found

679
00:24:11,280 --> 00:24:13,559
private key to a found nouns and vice

680
00:24:13,559 --> 00:24:17,880
versa and we were able to break 5000

681
00:24:17,880 --> 00:24:23,120
certificates Keys using this algorithm

682
00:24:23,120 --> 00:24:27,179
so obviously duplicated nonsense and

683
00:24:27,179 --> 00:24:29,580
certificate tend to point at a serious

684
00:24:29,580 --> 00:24:32,640
RNG failure here and in the state of the

685
00:24:32,640 --> 00:24:37,860
art we have many many topics on that and

686
00:24:37,860 --> 00:24:40,400
we will briefly discuss some of them in

687
00:24:40,400 --> 00:24:46,320
2008 Debian open SSL patched Library had

688
00:24:46,320 --> 00:24:49,799
some serious RNG failures that allowed

689
00:24:49,799 --> 00:24:56,400
to to break SSH and SSL keys in 2010 uh

690
00:24:56,400 --> 00:24:59,900
the the PlayStation 3

691
00:24:59,900 --> 00:25:04,380
of Sony used the same nonce for signing

692
00:25:04,380 --> 00:25:08,400
different signatures and this allowed

693
00:25:08,400 --> 00:25:10,740
with a non-serious the confirmation of

694
00:25:10,740 --> 00:25:12,900
the master firmware signing key no

695
00:25:12,900 --> 00:25:16,640
random at all were used back then in

696
00:25:16,640 --> 00:25:22,080
2012 regarding RSA prime factors were

697
00:25:22,080 --> 00:25:25,620
generated it with collisions and this

698
00:25:25,620 --> 00:25:27,799
allowed some gcd attacks

699
00:25:27,799 --> 00:25:30,380
recovering these prime factors

700
00:25:30,380 --> 00:25:33,120
these attacks did not work on our set

701
00:25:33,120 --> 00:25:35,700
and we will explain why later and

702
00:25:35,700 --> 00:25:39,260
finally in 2013 we had uh at the same

703
00:25:39,260 --> 00:25:42,960
non-reuse attacks on crypto wallets

704
00:25:42,960 --> 00:25:45,539
more interestingly and regarding our

705
00:25:45,539 --> 00:25:50,000
precise topic on Cisco Aza in 2019

706
00:25:50,000 --> 00:25:53,520
there were cve that was actually

707
00:25:53,520 --> 00:25:55,159
presented at

708
00:25:55,159 --> 00:25:57,200
RWC this year

709
00:25:57,200 --> 00:26:01,919
in 2019 and the the that was concerning

710
00:26:01,919 --> 00:26:04,260
and no entropy keys

711
00:26:04,260 --> 00:26:07,620
and interestingly we stumbled upon this

712
00:26:07,620 --> 00:26:11,940
issue by surprise using our our set and

713
00:26:11,940 --> 00:26:15,179
we will show that the road causes of of

714
00:26:15,179 --> 00:26:19,559
this was not fixed and how we reported

715
00:26:19,559 --> 00:26:21,960
this to Cisco with the responsible

716
00:26:21,960 --> 00:26:26,159
disclosure and hopefully fix this in a

717
00:26:26,159 --> 00:26:28,559
new cve this year

718
00:26:28,559 --> 00:26:32,279
so first of all we have plotted here the

719
00:26:32,279 --> 00:26:33,900
proportion of broken keys in

720
00:26:33,900 --> 00:26:36,500
certificates in our set

721
00:26:36,500 --> 00:26:40,679
showing that after after the 2019 cve

722
00:26:40,679 --> 00:26:43,740
the the proportion remains remained the

723
00:26:43,740 --> 00:26:45,960
same showing that the root causes were

724
00:26:45,960 --> 00:26:48,320
not fixed back then

725
00:26:48,320 --> 00:26:51,720
uh this uh forced us to try to

726
00:26:51,720 --> 00:26:53,760
understand what happens inside the

727
00:26:53,760 --> 00:26:54,960
appliances

728
00:26:54,960 --> 00:26:58,740
and the the Aza appliances actually are

729
00:26:58,740 --> 00:27:02,220
firewalls that Implement VPN ipsec TLS

730
00:27:02,220 --> 00:27:04,500
Etc and they come in two flavors the

731
00:27:04,500 --> 00:27:07,500
first one are Hardware Appliances using

732
00:27:07,500 --> 00:27:09,720
cryptographic and network accelerators

733
00:27:09,720 --> 00:27:12,299
and we got one for uh for quite a cheap

734
00:27:12,299 --> 00:27:16,320
price and we also have a family of

735
00:27:16,320 --> 00:27:19,340
virtual appliances is a VV for virtual

736
00:27:19,340 --> 00:27:23,400
that do not use make use of networker

737
00:27:23,400 --> 00:27:26,400
and crypto accelerators but they share

738
00:27:26,400 --> 00:27:29,880
the same firmware uh as the Hardware

739
00:27:29,880 --> 00:27:31,620
Appliances

740
00:27:31,620 --> 00:27:34,380
in this talk we won't detail the uh the

741
00:27:34,380 --> 00:27:36,260
instrumentation

742
00:27:36,260 --> 00:27:39,059
of these appliances because we don't

743
00:27:39,059 --> 00:27:41,400
have time but we will have a full-length

744
00:27:41,400 --> 00:27:43,440
article that will detail this

745
00:27:43,440 --> 00:27:46,380
so regarding first of all the um the

746
00:27:46,380 --> 00:27:48,659
Hardware Appliances since it is quite

747
00:27:48,659 --> 00:27:51,120
complex to instrument them we only

748
00:27:51,120 --> 00:27:53,700
provide here a black box approach

749
00:27:53,700 --> 00:27:56,580
through scripting showing that for

750
00:27:56,580 --> 00:27:59,760
various firmware versions that appeared

751
00:27:59,760 --> 00:28:03,720
uh also after the cve we exhibit some

752
00:28:03,720 --> 00:28:07,740
collisions on modulus nodes and keys

753
00:28:07,740 --> 00:28:11,760
even for recent film firmware so that

754
00:28:11,760 --> 00:28:14,340
confirms also that the problem is still

755
00:28:14,340 --> 00:28:15,600
here

756
00:28:15,600 --> 00:28:18,720
now we had to try to understand deeper

757
00:28:18,720 --> 00:28:20,700
what happens on these uh on these

758
00:28:20,700 --> 00:28:22,980
appliances so we had to perform some

759
00:28:22,980 --> 00:28:25,200
analysis and through our instrumentation

760
00:28:25,200 --> 00:28:29,580
of virtual appliances we kind of came up

761
00:28:29,580 --> 00:28:33,539
with this separation in layers that will

762
00:28:33,539 --> 00:28:36,000
provide Randomness generation in the

763
00:28:36,000 --> 00:28:39,120
appliances and we have many Primitives

764
00:28:39,120 --> 00:28:41,460
per layer so we won't detail all of them

765
00:28:41,460 --> 00:28:44,340
but we will only focus on on the the

766
00:28:44,340 --> 00:28:47,279
main ones first of all we have entropy

767
00:28:47,279 --> 00:28:49,740
sources and lifters among them we have

768
00:28:49,740 --> 00:28:53,340
cheap sources that provide almost no

769
00:28:53,340 --> 00:28:55,620
entropy or only a few bits of entropy

770
00:28:55,620 --> 00:28:59,940
for example the NCD round function will

771
00:28:59,940 --> 00:29:02,159
provide no entropy at all because its

772
00:29:02,159 --> 00:29:05,400
output is known we also have get time

773
00:29:05,400 --> 00:29:08,640
update at the microsecond resolution we

774
00:29:08,640 --> 00:29:10,740
have another version in Cisco firmware

775
00:29:10,740 --> 00:29:12,779
that will provide 10 milliseconds

776
00:29:12,779 --> 00:29:14,820
resolution which is a bad idea as we

777
00:29:14,820 --> 00:29:17,820
will see later sure we also have better

778
00:29:17,820 --> 00:29:20,159
resources in the firmware like air

779
00:29:20,159 --> 00:29:23,039
Durand and RDC that are instructions

780
00:29:23,039 --> 00:29:25,440
that provide 64 bits entropy seeds

781
00:29:25,440 --> 00:29:29,760
however these sources really depend and

782
00:29:29,760 --> 00:29:32,580
rely on the underlying CPU and the

783
00:29:32,580 --> 00:29:34,860
options for virtualization in the

784
00:29:34,860 --> 00:29:37,500
hypervisor so we cannot count on them

785
00:29:37,500 --> 00:29:38,940
everywhere

786
00:29:38,940 --> 00:29:41,700
and these sources will feed entropy

787
00:29:41,700 --> 00:29:45,720
lifters mainly nfscrs lcgs but using

788
00:29:45,720 --> 00:29:50,220
only 32-bit seats usually we also have a

789
00:29:50,220 --> 00:29:52,919
lifter from the Eraser Labs B safe

790
00:29:52,919 --> 00:29:55,440
library that is used inside the firmware

791
00:29:55,440 --> 00:29:58,820
and we will explain this later

792
00:29:58,820 --> 00:30:01,440
these entropy sources and lifters will

793
00:30:01,440 --> 00:30:04,700
feed determined deterministic engines

794
00:30:04,700 --> 00:30:07,919
these engines are are

795
00:30:07,919 --> 00:30:09,320
quietly

796
00:30:09,320 --> 00:30:11,760
separated in two families the

797
00:30:11,760 --> 00:30:14,220
standardized ones standardized by nist

798
00:30:14,220 --> 00:30:17,340
so a CTR counter mode the RBG is used

799
00:30:17,340 --> 00:30:20,340
with AES and the hash drbg is used with

800
00:30:20,340 --> 00:30:23,399
the Chateau function these Implement an

801
00:30:23,399 --> 00:30:27,240
instantiate generate and reseed the API

802
00:30:27,240 --> 00:30:30,840
we also have the ancestor of these of

803
00:30:30,840 --> 00:30:34,380
these uh deterministic generators the

804
00:30:34,380 --> 00:30:37,380
mdrand openssl function that is based on

805
00:30:37,380 --> 00:30:40,140
the old chaguan prg

806
00:30:40,140 --> 00:30:42,539
but the key Point here to to keep in

807
00:30:42,539 --> 00:30:45,059
mind is that d stands for deterministic

808
00:30:45,059 --> 00:30:47,640
these engines do not make Miracle they

809
00:30:47,640 --> 00:30:50,100
can't invent and they can't come up with

810
00:30:50,100 --> 00:30:53,640
new entropy they are only as good as the

811
00:30:53,640 --> 00:30:57,120
entropy sources feeding them

812
00:30:57,120 --> 00:31:00,059
finally we have the key generation layer

813
00:31:00,059 --> 00:31:02,820
and in this layer we have RSA key

814
00:31:02,820 --> 00:31:05,520
generation that we unveiled through our

815
00:31:05,520 --> 00:31:10,260
analysis we have seen that CD generation

816
00:31:10,260 --> 00:31:13,919
is used here a 28 byte seed will

817
00:31:13,919 --> 00:31:17,159
generate the p and Q prime factors and

818
00:31:17,159 --> 00:31:19,500
this perfectly explains why the gcd

819
00:31:19,500 --> 00:31:22,080
attacks don't work here because we when

820
00:31:22,080 --> 00:31:23,940
we have collisions we have collisions on

821
00:31:23,940 --> 00:31:26,460
both p and Q factors

822
00:31:26,460 --> 00:31:30,240
regarding ecdsa key generation we use

823
00:31:30,240 --> 00:31:33,480
the firmware users classical openssl

824
00:31:33,480 --> 00:31:36,679
generation over the nist prime curve and

825
00:31:36,679 --> 00:31:40,140
it reduces modular the order so nothing

826
00:31:40,140 --> 00:31:43,919
new here and regarding the loans we we

827
00:31:43,919 --> 00:31:46,620
have two paths for for Generation that

828
00:31:46,620 --> 00:31:48,720
we will explain explain later we have

829
00:31:48,720 --> 00:31:51,419
the be safe based part and a hash the

830
00:31:51,419 --> 00:31:55,080
RBG based path and now I let Arnold

831
00:31:55,080 --> 00:31:56,880
explain all this

832
00:31:56,880 --> 00:31:59,659
Imperial

833
00:32:00,299 --> 00:32:02,159
has presented all the building blocks

834
00:32:02,159 --> 00:32:03,899
that they are in the Cisco firmware and

835
00:32:03,899 --> 00:32:06,059
we will now take a look at the boot

836
00:32:06,059 --> 00:32:08,220
process regarding the random part so

837
00:32:08,220 --> 00:32:10,380
basically all the firmware we looked at

838
00:32:10,380 --> 00:32:13,140
we take a look at have the same kind of

839
00:32:13,140 --> 00:32:16,080
pattern regarding the boot they're all

840
00:32:16,080 --> 00:32:18,419
instantiate deterministic generator

841
00:32:18,419 --> 00:32:21,779
being a city or mgron from entropy

842
00:32:21,779 --> 00:32:24,179
sources and lifters and then the pattern

843
00:32:24,179 --> 00:32:27,120
is the following were users colors will

844
00:32:27,120 --> 00:32:29,820
grab random requests from them from the

845
00:32:29,820 --> 00:32:32,340
deterministic generator 16 byte 3 times

846
00:32:32,340 --> 00:32:35,220
16 by 3 times 16 byte and so on and at

847
00:32:35,220 --> 00:32:38,220
some point the RS certificates will be

848
00:32:38,220 --> 00:32:39,960
generated it's a sale time certificate

849
00:32:39,960 --> 00:32:41,000
so

850
00:32:41,000 --> 00:32:43,799
28 bytes or from them will be requested

851
00:32:43,799 --> 00:32:46,320
from the deterministic generator and

852
00:32:46,320 --> 00:32:48,899
will be feeded to the will be given to

853
00:32:48,899 --> 00:32:51,000
the fips algorithm in order to produce

854
00:32:51,000 --> 00:32:53,100
the Eraser key and then the RSA

855
00:32:53,100 --> 00:32:54,539
certificate the cell phone certificate

856
00:32:54,539 --> 00:32:57,299
will be generated after that errors a

857
00:32:57,299 --> 00:32:59,399
certificates another certificate is

858
00:32:59,399 --> 00:33:02,159
generated them

859
00:33:02,159 --> 00:33:04,740
um an ecdss self-cent certificate so for

860
00:33:04,740 --> 00:33:09,779
that purpose an ecdc ecdsak is generated

861
00:33:09,779 --> 00:33:12,679
by grabbing 32 bytes of Random from the

862
00:33:12,679 --> 00:33:15,600
generic uh the deterministic generator

863
00:33:15,600 --> 00:33:17,940
and in order to Pro to produce the

864
00:33:17,940 --> 00:33:19,799
signature on the certificates you need

865
00:33:19,799 --> 00:33:22,080
an answer and that means it's not

866
00:33:22,080 --> 00:33:24,360
directly taken from the deterministic

867
00:33:24,360 --> 00:33:26,159
generator but it's taken from the be

868
00:33:26,159 --> 00:33:29,580
safe so we request 30 to 32 bytes from

869
00:33:29,580 --> 00:33:32,220
the beast from them from the B safe and

870
00:33:32,220 --> 00:33:36,179
that be safe lifter has been initialized

871
00:33:36,179 --> 00:33:40,860
with uh 24 bytes of random 16 bytes and

872
00:33:40,860 --> 00:33:42,539
then 8 bytes so there is already a

873
00:33:42,539 --> 00:33:46,019
problem in there 24 bytes in in and 32

874
00:33:46,019 --> 00:33:49,620
outs there is another Ryan for the

875
00:33:49,620 --> 00:33:51,960
generation of the ecds and nuns which is

876
00:33:51,960 --> 00:33:53,399
used for the signature of the set sign

877
00:33:53,399 --> 00:33:56,940
certificates where we use an hdrbg

878
00:33:56,940 --> 00:33:59,779
instead of the be safe lifter

879
00:33:59,779 --> 00:34:03,919
initialized from entropy sources

880
00:34:04,140 --> 00:34:07,320
one word on the be safe lifter it's

881
00:34:07,320 --> 00:34:09,599
basically a construction made on xiaowan

882
00:34:09,599 --> 00:34:11,000
and

883
00:34:11,000 --> 00:34:14,599
reduction modular reduction module

884
00:34:14,599 --> 00:34:18,619
let's say a small Prime 160 bits

885
00:34:18,619 --> 00:34:21,780
what can be said on that is that it's

886
00:34:21,780 --> 00:34:25,020
cumbersome but deterministic so once you

887
00:34:25,020 --> 00:34:26,339
have understood how it works you can

888
00:34:26,339 --> 00:34:28,679
reduce the block and just consider it as

889
00:34:28,679 --> 00:34:31,399
another lifter

890
00:34:32,040 --> 00:34:34,379
um let's now take a look at the specific

891
00:34:34,379 --> 00:34:36,119
version in order to explain how we

892
00:34:36,119 --> 00:34:37,739
worked with Riyadh in order to

893
00:34:37,739 --> 00:34:39,839
understand the root cause of the issue

894
00:34:39,839 --> 00:34:43,080
so we took the version 9.10.1 because

895
00:34:43,080 --> 00:34:45,060
it's probably one of the most the most

896
00:34:45,060 --> 00:34:46,619
interesting one

897
00:34:46,619 --> 00:34:49,080
um the idea we add is to in in order to

898
00:34:49,080 --> 00:34:50,339
understand and validate our

899
00:34:50,339 --> 00:34:53,040
understanding of the issue on on the

900
00:34:53,040 --> 00:34:56,879
other V and on Cisco globally we decided

901
00:34:56,879 --> 00:34:59,099
to implement some kind of kitchen or

902
00:34:59,099 --> 00:35:01,560
proof of concept where the idea was to

903
00:35:01,560 --> 00:35:04,560
be able to construct or reconstruct all

904
00:35:04,560 --> 00:35:06,359
the private keys that were associated

905
00:35:06,359 --> 00:35:07,920
with the certificate with the broken

906
00:35:07,920 --> 00:35:10,619
certificates so we will present how we

907
00:35:10,619 --> 00:35:13,500
did that in order to have a valid input

908
00:35:13,500 --> 00:35:15,359
to provide to Cisco for the for the

909
00:35:15,359 --> 00:35:17,220
advisory

910
00:35:17,220 --> 00:35:19,440
um on this version the mechanism that I

911
00:35:19,440 --> 00:35:21,540
use are CTR the RBG this is the main

912
00:35:21,540 --> 00:35:24,119
deterministic generator for rscc and

913
00:35:24,119 --> 00:35:29,160
ecdsa key the ucds and nuns is a is a is

914
00:35:29,160 --> 00:35:32,280
requested to to be safe which is seated

915
00:35:32,280 --> 00:35:34,560
from the Ctrl the LBG the interesting

916
00:35:34,560 --> 00:35:37,980
part is the instantiate where there are

917
00:35:37,980 --> 00:35:40,500
many two main paths the personalization

918
00:35:40,500 --> 00:35:43,140
string is almost fixed with only the

919
00:35:43,140 --> 00:35:44,880
time from boot rounded to 10

920
00:35:44,880 --> 00:35:47,940
milliseconds being used to provide

921
00:35:47,940 --> 00:35:51,359
viability and the most important part in

922
00:35:51,359 --> 00:35:54,359
the drbg instantiation should be the

923
00:35:54,359 --> 00:35:55,980
entrepreneurs which is provided during

924
00:35:55,980 --> 00:35:58,079
the instantiation in that specific case

925
00:35:58,079 --> 00:36:01,020
you have 40 bytes and 20 bytes of random

926
00:36:01,020 --> 00:36:03,300
which are taken or so-called random

927
00:36:03,300 --> 00:36:05,880
which are taken from md-run which is

928
00:36:05,880 --> 00:36:08,099
instead itself insensitive from a seed

929
00:36:08,099 --> 00:36:11,940
from an lfsr which is exceeded from 32

930
00:36:11,940 --> 00:36:14,099
bits of other TSC so at the end of the

931
00:36:14,099 --> 00:36:16,680
day in this version you have only 30 two

932
00:36:16,680 --> 00:36:19,260
bits at the roots of the drbg

933
00:36:19,260 --> 00:36:21,300
another interesting part with this

934
00:36:21,300 --> 00:36:23,280
version is that when you call the

935
00:36:23,280 --> 00:36:26,700
generator to get random from the grbg in

936
00:36:26,700 --> 00:36:28,740
the various calls for creating the keys

937
00:36:28,740 --> 00:36:31,380
and stuff like that you you have

938
00:36:31,380 --> 00:36:32,640
function where you can provide

939
00:36:32,640 --> 00:36:34,740
additional inputs and in that specific

940
00:36:34,740 --> 00:36:37,140
case the additional input function uh

941
00:36:37,140 --> 00:36:39,000
uses the time at the moment of the call

942
00:36:39,000 --> 00:36:41,099
run that to 10 millisecond and when you

943
00:36:41,099 --> 00:36:43,859
want to do occasion in order to to

944
00:36:43,859 --> 00:36:45,839
emulate that you have to take that into

945
00:36:45,839 --> 00:36:46,740
account

946
00:36:46,740 --> 00:36:49,380
so the question is what's the complexity

947
00:36:49,380 --> 00:36:52,680
of finding all the private keys for this

948
00:36:52,680 --> 00:36:54,720
the the the certificates which are

949
00:36:54,720 --> 00:36:56,820
generated by this version

950
00:36:56,820 --> 00:36:58,140
um basically we have two parts you have

951
00:36:58,140 --> 00:37:01,200
32 bits of seeds for seeding the lfsr

952
00:37:01,200 --> 00:37:04,500
and something like certain bits of time

953
00:37:04,500 --> 00:37:07,980
complexity which is pro which is which

954
00:37:07,980 --> 00:37:10,440
which we can which is associated with

955
00:37:10,440 --> 00:37:12,960
the the rounded time value that you

956
00:37:12,960 --> 00:37:15,660
inject each time you call the General so

957
00:37:15,660 --> 00:37:20,060
the complexity is like 45 45

958
00:37:20,060 --> 00:37:23,820
bits with a large constant because they

959
00:37:23,820 --> 00:37:27,780
are at every Point EVD RBG calls so the

960
00:37:27,780 --> 00:37:30,540
idea is to validate our implementation

961
00:37:30,540 --> 00:37:33,000
because there are various elements to

962
00:37:33,000 --> 00:37:34,920
take into account it's to do a meeting

963
00:37:34,920 --> 00:37:36,900
the middle solution we decided to remove

964
00:37:36,900 --> 00:37:40,079
the lfsr seeds part by modifying the

965
00:37:40,079 --> 00:37:42,900
binary uh either the firmware that we

966
00:37:42,900 --> 00:37:45,000
add with a non-flick seed and work on

967
00:37:45,000 --> 00:37:47,760
the second part that was more on the on

968
00:37:47,760 --> 00:37:50,400
the CTR the RBG to validate that work

969
00:37:50,400 --> 00:37:54,859
our code did work uh and and understand

970
00:37:54,859 --> 00:37:59,160
uh how uh if you had problem with that

971
00:37:59,160 --> 00:38:00,480
so

972
00:38:00,480 --> 00:38:03,240
what you see here on the picture is

973
00:38:03,240 --> 00:38:05,640
um the the timing value which are

974
00:38:05,640 --> 00:38:07,560
provided at each generate code so what

975
00:38:07,560 --> 00:38:10,740
you what you have here it's quite a

976
00:38:10,740 --> 00:38:12,900
large amount of volatility for the first

977
00:38:12,900 --> 00:38:16,320
value which is the boot time during the

978
00:38:16,320 --> 00:38:19,140
instantiation and we see that every time

979
00:38:19,140 --> 00:38:22,020
the the firmware would we have the same

980
00:38:22,020 --> 00:38:24,000
pattern and the pattern shows that

981
00:38:24,000 --> 00:38:27,000
between the the different call to the

982
00:38:27,000 --> 00:38:29,640
generates we do not have a large

983
00:38:29,640 --> 00:38:31,380
variation between the time value that

984
00:38:31,380 --> 00:38:33,420
are passed to the generate so we are in

985
00:38:33,420 --> 00:38:36,720
a good position to emulate that and this

986
00:38:36,720 --> 00:38:39,618
will reduce the complexity

987
00:38:40,140 --> 00:38:42,660
what we did is that we considered the

988
00:38:42,660 --> 00:38:44,300
average

989
00:38:44,300 --> 00:38:47,520
curve and a small enveloper run that in

990
00:38:47,520 --> 00:38:49,980
order to work to validate our proof of

991
00:38:49,980 --> 00:38:53,220
concept on a small subset of all the

992
00:38:53,220 --> 00:38:56,240
keys and certificate keys that would be

993
00:38:56,240 --> 00:38:58,320
all the private keys that would be

994
00:38:58,320 --> 00:39:00,720
associated with broken certificates and

995
00:39:00,720 --> 00:39:03,300
to validate that a code did work on that

996
00:39:03,300 --> 00:39:05,940
we did that on patch version and on the

997
00:39:05,940 --> 00:39:07,200
patch version and then on an unpad

998
00:39:07,200 --> 00:39:09,720
version by verifying that we were able

999
00:39:09,720 --> 00:39:12,660
for this small part to get back to the

1000
00:39:12,660 --> 00:39:14,220
private Keys associated with the

1001
00:39:14,220 --> 00:39:16,320
certificates that were generated so in

1002
00:39:16,320 --> 00:39:18,599
eight days we have quite good confidence

1003
00:39:18,599 --> 00:39:20,700
that we had a validation for this

1004
00:39:20,700 --> 00:39:22,920
version

1005
00:39:22,920 --> 00:39:26,220
note that we have presented what we what

1006
00:39:26,220 --> 00:39:28,980
we did on this version we also did the

1007
00:39:28,980 --> 00:39:30,720
same kind of stuff on all other versions

1008
00:39:30,720 --> 00:39:32,820
that are in this table and this table

1009
00:39:32,820 --> 00:39:35,400
summarize the result we have for all

1010
00:39:35,400 --> 00:39:37,800
this version so I won't I will not take

1011
00:39:37,800 --> 00:39:39,599
all the line and Columns of the table

1012
00:39:39,599 --> 00:39:41,520
what's interesting is that for all this

1013
00:39:41,520 --> 00:39:44,300
version you have a broken RSA modulus

1014
00:39:44,300 --> 00:39:46,440
non-seize and key and we are able to

1015
00:39:46,440 --> 00:39:49,859
provide kitchen for for most all of this

1016
00:39:49,859 --> 00:39:52,380
element for some versions the other

1017
00:39:52,380 --> 00:39:54,060
interesting part is the last column

1018
00:39:54,060 --> 00:39:56,700
which is the complexity of providing

1019
00:39:56,700 --> 00:40:01,500
kitchen for those version which is said

1020
00:40:01,500 --> 00:40:03,960
32 bits most of the time there is there

1021
00:40:03,960 --> 00:40:06,000
is even a version for for which there is

1022
00:40:06,000 --> 00:40:07,460
a 16-bit

1023
00:40:07,460 --> 00:40:11,520
complexity occasion for this version and

1024
00:40:11,520 --> 00:40:13,079
the last point in this slide is the word

1025
00:40:13,079 --> 00:40:15,540
CD that you see everywhere on the common

1026
00:40:15,540 --> 00:40:18,359
current what it's what it shows is that

1027
00:40:18,359 --> 00:40:22,440
in most Cisco as a firmware constriction

1028
00:40:22,440 --> 00:40:25,619
you have the stacks of lifters one on

1029
00:40:25,619 --> 00:40:27,180
top the other so for instance if you

1030
00:40:27,180 --> 00:40:30,599
take the version the 9.6.4 version the

1031
00:40:30,599 --> 00:40:33,599
main drbg is the ctrbg which is CD by

1032
00:40:33,599 --> 00:40:36,359
mdaron which is itself CD by LG RBG

1033
00:40:36,359 --> 00:40:38,520
which are itself CD by rfsr which is

1034
00:40:38,520 --> 00:40:42,180
itself seeded by 32 bits of rdsc so you

1035
00:40:42,180 --> 00:40:45,119
have a stack of stuff but no entropy at

1036
00:40:45,119 --> 00:40:47,640
the root of this stack so at the end of

1037
00:40:47,640 --> 00:40:48,720
the day

1038
00:40:48,720 --> 00:40:52,740
it's bad so um as a conclusion we hope

1039
00:40:52,740 --> 00:40:54,599
you enjoyed following the white rabbit

1040
00:40:54,599 --> 00:40:58,740
with us on this journey uh started which

1041
00:40:58,740 --> 00:41:01,560
started with duplicating nonsense keys

1042
00:41:01,560 --> 00:41:04,079
in certificates and for which we had to

1043
00:41:04,079 --> 00:41:06,300
to do kitchens and Implement stuff in

1044
00:41:06,300 --> 00:41:08,520
order to understand how things work in

1045
00:41:08,520 --> 00:41:11,099
order to report that to Cisco and help

1046
00:41:11,099 --> 00:41:14,099
them fix their code we learned some

1047
00:41:14,099 --> 00:41:16,980
stuff during that journey I mean learned

1048
00:41:16,980 --> 00:41:19,140
is not quite the word we it's probably

1049
00:41:19,140 --> 00:41:21,540
something we already knew but which

1050
00:41:21,540 --> 00:41:23,940
should be repeated to other developers

1051
00:41:23,940 --> 00:41:26,520
is that when you work with random in

1052
00:41:26,520 --> 00:41:28,980
your firmware you have to consider the

1053
00:41:28,980 --> 00:41:31,320
following you have to fail instead of

1054
00:41:31,320 --> 00:41:33,359
having a fallback to balance open source

1055
00:41:33,359 --> 00:41:35,760
it's better not to use run and say okay

1056
00:41:35,760 --> 00:41:39,359
I can't provide entropy and not fall

1057
00:41:39,359 --> 00:41:42,000
back I'm having a fallback to run when

1058
00:41:42,000 --> 00:41:44,339
you when you are auditing search code

1059
00:41:44,339 --> 00:41:46,260
you should consider the worst code pass

1060
00:41:46,260 --> 00:41:48,240
regarding the random providers and

1061
00:41:48,240 --> 00:41:49,380
remove them in if they are not

1062
00:41:49,380 --> 00:41:50,720
acceptable

1063
00:41:50,720 --> 00:41:53,700
when things which would help is mixing

1064
00:41:53,700 --> 00:41:56,040
multiple systems instead of using a

1065
00:41:56,040 --> 00:41:58,500
single one and there are some drbg

1066
00:41:58,500 --> 00:42:02,040
takeover messages where the RBG as we

1067
00:42:02,040 --> 00:42:04,320
had explained are deterministic so they

1068
00:42:04,320 --> 00:42:07,020
are good but you need to have run them

1069
00:42:07,020 --> 00:42:09,240
at the root of at their route if if you

1070
00:42:09,240 --> 00:42:11,040
want to to be somewhere at the end of

1071
00:42:11,040 --> 00:42:13,560
the day you need to have good audience

1072
00:42:13,560 --> 00:42:17,160
and receding is is Eric is a requirement

1073
00:42:17,160 --> 00:42:20,400
but it's almost never used so it should

1074
00:42:20,400 --> 00:42:22,840
be some final thoughts

1075
00:42:22,840 --> 00:42:22,920
[Music]

1076
00:42:22,920 --> 00:42:24,380
um

1077
00:42:24,380 --> 00:42:27,000
the beginning of the story was a black

1078
00:42:27,000 --> 00:42:29,040
box approach where we saw where we saw

1079
00:42:29,040 --> 00:42:31,440
bad certificates but in fact it's it's

1080
00:42:31,440 --> 00:42:34,020
not sufficient sometimes in one of the

1081
00:42:34,020 --> 00:42:36,060
version or two other version we had good

1082
00:42:36,060 --> 00:42:38,520
looking keys to for which we we thought

1083
00:42:38,520 --> 00:42:40,680
there was no problem in those keys but

1084
00:42:40,680 --> 00:42:42,119
at the end of the day we were able to do

1085
00:42:42,119 --> 00:42:44,160
a kitchen for that key for the for that

1086
00:42:44,160 --> 00:42:46,740
set of keys for this version because for

1087
00:42:46,740 --> 00:42:48,839
instance if you don't have enough enough

1088
00:42:48,839 --> 00:42:51,240
samples you won't eat a birthday Paradox

1089
00:42:51,240 --> 00:42:53,640
and so you won't be able to see that

1090
00:42:53,640 --> 00:42:55,500
there is a problem in the keys and you

1091
00:42:55,500 --> 00:42:57,420
will think it's okay and in fact it's

1092
00:42:57,420 --> 00:42:58,280
not

1093
00:42:58,280 --> 00:43:01,020
the other element is that it's not

1094
00:43:01,020 --> 00:43:03,060
because you have good grbg or PNG or

1095
00:43:03,060 --> 00:43:05,520
even if you stack them that you will end

1096
00:43:05,520 --> 00:43:07,680
up with good random you need entropy at

1097
00:43:07,680 --> 00:43:08,880
the root of that

1098
00:43:08,880 --> 00:43:10,440
and if you are interested by this

1099
00:43:10,440 --> 00:43:12,000
presentation and you want to learn more

1100
00:43:12,000 --> 00:43:13,680
about the instrumentation work we did

1101
00:43:13,680 --> 00:43:15,480
there it will be a full-length article

1102
00:43:15,480 --> 00:43:18,060
that will be presented uh at stick

1103
00:43:18,060 --> 00:43:20,160
conference in few weeks

1104
00:43:20,160 --> 00:43:22,020
if you have questions

1105
00:43:22,020 --> 00:43:24,110
great thank you for the wonderful talk

1106
00:43:24,110 --> 00:43:25,840
[Applause]

1107
00:43:25,840 --> 00:43:28,130
[Music]

1108
00:43:28,130 --> 00:43:31,140
[Applause]

1109
00:43:31,140 --> 00:43:32,940
we're a little bit behind schedule so

1110
00:43:32,940 --> 00:43:34,680
maybe I'll ask for uh questions to cut

1111
00:43:34,680 --> 00:43:36,720
to uh go offline

1112
00:43:36,720 --> 00:43:39,240
um so please find the speakers to ask

1113
00:43:39,240 --> 00:43:41,460
any questions thanks looks like terrific

1114
00:43:41,460 --> 00:43:44,420
work so thank you very much

1115
00:43:47,040 --> 00:43:48,900
and let's say let's see the last Talk of

1116
00:43:48,900 --> 00:43:51,960
the session is going to be on uh

1117
00:43:51,960 --> 00:43:54,060
actually related to the random the suit

1118
00:43:54,060 --> 00:43:55,859
of the prgs we saw in the in the

1119
00:43:55,859 --> 00:43:57,119
previous the standard we saw in the

1120
00:43:57,119 --> 00:44:00,240
previous talk about breaking uh uh

1121
00:44:00,240 --> 00:44:01,500
basically breaking the college nor

1122
00:44:01,500 --> 00:44:04,680
generator so um yeah Ken and Adam uh

1123
00:44:04,680 --> 00:44:07,079
floor is yours all right thank you so uh

1124
00:44:07,079 --> 00:44:08,880
Welcome to our talk on the possibly of a

1125
00:44:08,880 --> 00:44:10,319
back door in the college nor generator

1126
00:44:10,319 --> 00:44:12,180
I'm Kean Ryan I'm co-presenting with

1127
00:44:12,180 --> 00:44:13,619
Adam Sewell

1128
00:44:13,619 --> 00:44:15,720
so in this talk we want to present you

1129
00:44:15,720 --> 00:44:17,819
with a cryptographic mystery that has

1130
00:44:17,819 --> 00:44:19,680
been puzzling researchers for the last

1131
00:44:19,680 --> 00:44:22,200
10 years and although this mystery still

1132
00:44:22,200 --> 00:44:24,000
remains unsolved we've recently made

1133
00:44:24,000 --> 00:44:25,560
some breakthroughs and we have made some

1134
00:44:25,560 --> 00:44:27,420
good progress on this problem and that's

1135
00:44:27,420 --> 00:44:30,000
what we want to present to you today and

1136
00:44:30,000 --> 00:44:31,740
it's entirely possible that one of you

1137
00:44:31,740 --> 00:44:33,660
in the audience has the missing piece

1138
00:44:33,660 --> 00:44:35,460
that can answer this question once and

1139
00:44:35,460 --> 00:44:36,720
for all

1140
00:44:36,720 --> 00:44:39,599
so this Story begins with a random

1141
00:44:39,599 --> 00:44:41,040
number generator that you may already be

1142
00:44:41,040 --> 00:44:44,400
familiar with dually C drbg

1143
00:44:44,400 --> 00:44:46,260
so dual EC was first proposed for

1144
00:44:46,260 --> 00:44:48,119
standardization in a 2004 presentation

1145
00:44:48,119 --> 00:44:50,700
at a nist workshop I apologize for the

1146
00:44:50,700 --> 00:44:52,200
confusing diagram this was taken from

1147
00:44:52,200 --> 00:44:54,960
those 2004 slides

1148
00:44:54,960 --> 00:44:56,819
the important thing is that duly see is

1149
00:44:56,819 --> 00:44:58,260
based on asymmetric cryptography

1150
00:44:58,260 --> 00:45:00,660
specifically elliptic curves

1151
00:45:00,660 --> 00:45:03,599
uh Julie C was eventually standardized

1152
00:45:03,599 --> 00:45:07,319
in uh nist special publication 800-90a

1153
00:45:07,319 --> 00:45:09,119
and as part of the publication it

1154
00:45:09,119 --> 00:45:11,819
included multiple pre-generated pairs of

1155
00:45:11,819 --> 00:45:14,160
elliptic curve points p and Q to be used

1156
00:45:14,160 --> 00:45:16,619
by default in the RNG

1157
00:45:16,619 --> 00:45:18,240
throughout the standardization process

1158
00:45:18,240 --> 00:45:20,460
uh Julie C was a subject of a lot of

1159
00:45:20,460 --> 00:45:22,079
Crypt analysis and multiple groups

1160
00:45:22,079 --> 00:45:23,819
independently came to the conclusion

1161
00:45:23,819 --> 00:45:25,680
that it would be possible to backdoor

1162
00:45:25,680 --> 00:45:28,140
duly see in essence if you know the

1163
00:45:28,140 --> 00:45:29,640
discrete log of the elliptic curve

1164
00:45:29,640 --> 00:45:31,920
points p and Q you can observe some of

1165
00:45:31,920 --> 00:45:34,500
the output of dually C recover the

1166
00:45:34,500 --> 00:45:36,180
secret internal State and then use that

1167
00:45:36,180 --> 00:45:38,460
to protect all future outputs

1168
00:45:38,460 --> 00:45:40,500
now in spite of this weakness in July C

1169
00:45:40,500 --> 00:45:43,079
it remained in the standard

1170
00:45:43,079 --> 00:45:45,060
multiple companies began to implement

1171
00:45:45,060 --> 00:45:47,099
dual EC and this included a company

1172
00:45:47,099 --> 00:45:49,619
known as Juniper Networks now in 2012

1173
00:45:49,619 --> 00:45:51,599
Juniper Networks was hacked and their

1174
00:45:51,599 --> 00:45:53,880
values of p and Q for julissi were

1175
00:45:53,880 --> 00:45:55,980
replaced with different values

1176
00:45:55,980 --> 00:45:58,619
so this replacement would allow this

1177
00:45:58,619 --> 00:46:01,020
adversary to passively decrypt the VPN

1178
00:46:01,020 --> 00:46:02,940
communication going through these

1179
00:46:02,940 --> 00:46:05,400
Juniper Networks devices this stayed in

1180
00:46:05,400 --> 00:46:06,660
place for three years until it was

1181
00:46:06,660 --> 00:46:09,000
finally patched and we say this as a way

1182
00:46:09,000 --> 00:46:10,680
of motivating that even the potential

1183
00:46:10,680 --> 00:46:12,480
for a backdoor can have catastrophic

1184
00:46:12,480 --> 00:46:15,060
security implications

1185
00:46:15,060 --> 00:46:16,800
so we're skipping over a lot of the

1186
00:46:16,800 --> 00:46:18,720
details in the history of dually EC but

1187
00:46:18,720 --> 00:46:20,280
why are we talking about it anyway this

1188
00:46:20,280 --> 00:46:22,800
talk is about Macaulay snore

1189
00:46:22,800 --> 00:46:25,680
so McAuley schner was first proposed for

1190
00:46:25,680 --> 00:46:27,599
standardization in a 2004 presentation

1191
00:46:27,599 --> 00:46:29,760
at a nist workshop I apologize for the

1192
00:46:29,760 --> 00:46:31,680
confusing picture uh this is straight

1193
00:46:31,680 --> 00:46:34,680
from that 2004 slide deck

1194
00:46:34,680 --> 00:46:36,359
the important thing to take away here is

1195
00:46:36,359 --> 00:46:37,560
that my collection is based on

1196
00:46:37,560 --> 00:46:41,579
asymmetric cryptography specifically RSA

1197
00:46:41,579 --> 00:46:43,079
in spite of the poor performance

1198
00:46:43,079 --> 00:46:44,880
McAllister was ultimately standardized

1199
00:46:44,880 --> 00:46:47,520
and ISO 18031 and as part of the

1200
00:46:47,520 --> 00:46:49,260
standard it includes these pre-generated

1201
00:46:49,260 --> 00:46:51,720
RSA moduli

1202
00:46:51,720 --> 00:46:53,520
oh and think about that why would a

1203
00:46:53,520 --> 00:46:55,260
standard need to include a pre-generated

1204
00:46:55,260 --> 00:46:58,500
RSA modulus what happens if you know the

1205
00:46:58,500 --> 00:47:01,020
factorization

1206
00:47:01,020 --> 00:47:02,579
so it seems the similarities between

1207
00:47:02,579 --> 00:47:04,319
dualysium and college nor end there

1208
00:47:04,319 --> 00:47:06,180
there's not an obvious way to use this

1209
00:47:06,180 --> 00:47:08,160
knowledge of the factorization to

1210
00:47:08,160 --> 00:47:10,500
recover any sort of information about

1211
00:47:10,500 --> 00:47:12,780
Macau College Noir so it seems at least

1212
00:47:12,780 --> 00:47:14,460
not in an obvious way

1213
00:47:14,460 --> 00:47:16,859
but on the other hand there were subtle

1214
00:47:16,859 --> 00:47:17,880
changes between the version of a

1215
00:47:17,880 --> 00:47:19,020
collection or that was initially

1216
00:47:19,020 --> 00:47:21,000
proposed and the version that was

1217
00:47:21,000 --> 00:47:22,920
ultimately standardized specifically to

1218
00:47:22,920 --> 00:47:24,720
increase the output length

1219
00:47:24,720 --> 00:47:26,760
and the proof of security from a college

1220
00:47:26,760 --> 00:47:28,800
Norway depends exponentially on the

1221
00:47:28,800 --> 00:47:31,020
output length so this change seemingly

1222
00:47:31,020 --> 00:47:33,000
has the effect of totally invalidating

1223
00:47:33,000 --> 00:47:35,099
the proof of security

1224
00:47:35,099 --> 00:47:38,400
what is going on with Macaulay Schnur

1225
00:47:38,400 --> 00:47:40,500
well McAuliffe North is pretty simple

1226
00:47:40,500 --> 00:47:43,079
and easy to describe so the internal

1227
00:47:43,079 --> 00:47:44,819
state of Macaulay Schnur is a large

1228
00:47:44,819 --> 00:47:46,260
integer s

1229
00:47:46,260 --> 00:47:48,119
we take s and we raise it to the power

1230
00:47:48,119 --> 00:47:50,640
of E modulo N so we essentially perform

1231
00:47:50,640 --> 00:47:53,520
a textbook RSA encryption with e n where

1232
00:47:53,520 --> 00:47:55,440
those are the default values from the

1233
00:47:55,440 --> 00:47:57,000
standard

1234
00:47:57,000 --> 00:47:59,099
we can then take the K least in thin

1235
00:47:59,099 --> 00:48:01,619
bits and output those as the RNG output

1236
00:48:01,619 --> 00:48:03,720
and we take the remaining most given

1237
00:48:03,720 --> 00:48:06,540
bits and that becomes the new state so

1238
00:48:06,540 --> 00:48:08,160
this gives us a very nice algebraic

1239
00:48:08,160 --> 00:48:11,099
relationship between both the states and

1240
00:48:11,099 --> 00:48:12,359
the output

1241
00:48:12,359 --> 00:48:14,400
if we need more than K bits of output we

1242
00:48:14,400 --> 00:48:16,319
can repeat this process again again

1243
00:48:16,319 --> 00:48:18,540
until we have enough output

1244
00:48:18,540 --> 00:48:20,520
so if you're familiar with the Blum bum

1245
00:48:20,520 --> 00:48:23,220
shoe uh generator you might recognize

1246
00:48:23,220 --> 00:48:25,319
this as being similar uh in the case of

1247
00:48:25,319 --> 00:48:27,420
Blum Blum shoe there's one or just a few

1248
00:48:27,420 --> 00:48:29,040
bits output at a time but in the case of

1249
00:48:29,040 --> 00:48:31,200
a collection or there can be thousands

1250
00:48:31,200 --> 00:48:33,540
of bits output at a time so this leads

1251
00:48:33,540 --> 00:48:35,220
to the very natural question does all of

1252
00:48:35,220 --> 00:48:37,319
this additional output give us some

1253
00:48:37,319 --> 00:48:39,720
advantage in recovering the state or

1254
00:48:39,720 --> 00:48:41,880
breaking the RNG

1255
00:48:41,880 --> 00:48:43,859
uh in the very natural thing to consider

1256
00:48:43,859 --> 00:48:45,660
here is that since the outputs are based

1257
00:48:45,660 --> 00:48:48,480
on RSA encryption what happens if we go

1258
00:48:48,480 --> 00:48:49,980
backwards what if we use knowledge of

1259
00:48:49,980 --> 00:48:51,900
the factorization to perform RSA

1260
00:48:51,900 --> 00:48:54,119
decryption and it turns out that this

1261
00:48:54,119 --> 00:48:55,740
doesn't seem to make the problem any

1262
00:48:55,740 --> 00:48:58,380
easier because we're only outputting a

1263
00:48:58,380 --> 00:49:01,140
subset of the bits we only know partial

1264
00:49:01,140 --> 00:49:03,839
RSA ciphertext so it's unclear how we

1265
00:49:03,839 --> 00:49:05,819
reverse this process to get back to the

1266
00:49:05,819 --> 00:49:07,619
original state

1267
00:49:07,619 --> 00:49:10,440
so there's not really an obvious way to

1268
00:49:10,440 --> 00:49:11,819
back during the college nor and even

1269
00:49:11,819 --> 00:49:13,440
doing some small amount of Brute Force

1270
00:49:13,440 --> 00:49:15,359
like was done in the case of julissi

1271
00:49:15,359 --> 00:49:17,760
doesn't seem to help here and that leads

1272
00:49:17,760 --> 00:49:19,079
us to the main question of this talk

1273
00:49:19,079 --> 00:49:21,780
does knowledge of the factorization of

1274
00:49:21,780 --> 00:49:24,359
these hard-coded public moduli lead to

1275
00:49:24,359 --> 00:49:26,760
some sort of attack on Macaulay Schnur

1276
00:49:26,760 --> 00:49:28,500
and we want to open this up to be even

1277
00:49:28,500 --> 00:49:29,760
more General you don't have to

1278
00:49:29,760 --> 00:49:31,740
necessarily know the factorization but

1279
00:49:31,740 --> 00:49:33,720
any sort of malicious construction of

1280
00:49:33,720 --> 00:49:35,700
these public moduli

1281
00:49:35,700 --> 00:49:37,680
and this question is still unanswered we

1282
00:49:37,680 --> 00:49:39,480
don't have an answer to this question

1283
00:49:39,480 --> 00:49:41,700
but what we do have is a number of

1284
00:49:41,700 --> 00:49:43,740
interesting observations about Macaulay

1285
00:49:43,740 --> 00:49:46,140
Schnur and the first observation is that

1286
00:49:46,140 --> 00:49:48,599
there aren't any simple backdoors in

1287
00:49:48,599 --> 00:49:51,119
Macaulay snore so to be a bit more

1288
00:49:51,119 --> 00:49:52,980
precise buy a simple backdoor we mean

1289
00:49:52,980 --> 00:49:54,780
that there are no backdoors that rely

1290
00:49:54,780 --> 00:49:58,800
exclusively on RSA decryption

1291
00:49:58,800 --> 00:50:00,660
the way that we show this is we take the

1292
00:50:00,660 --> 00:50:02,640
construction of Macaulay snore and we

1293
00:50:02,640 --> 00:50:05,520
replace RSA encryption with a random

1294
00:50:05,520 --> 00:50:09,180
invertible function more specifically a

1295
00:50:09,180 --> 00:50:11,280
efficiently invertible pseudorandom

1296
00:50:11,280 --> 00:50:12,420
permutation

1297
00:50:12,420 --> 00:50:14,640
now you can think of this as similar to

1298
00:50:14,640 --> 00:50:17,119
a cryptographic sponge in duplex mode

1299
00:50:17,119 --> 00:50:19,740
and we can show that this modified

1300
00:50:19,740 --> 00:50:22,560
construction is secure so that tells us

1301
00:50:22,560 --> 00:50:24,300
that if the standardized version of

1302
00:50:24,300 --> 00:50:27,060
Macaulay snore is not secure then that's

1303
00:50:27,060 --> 00:50:29,819
because the RSA encryption does not

1304
00:50:29,819 --> 00:50:33,060
behave like a random invertible function

1305
00:50:33,060 --> 00:50:35,099
so clearly we know that RSA encryption

1306
00:50:35,099 --> 00:50:37,020
is invertible its inverse is just

1307
00:50:37,020 --> 00:50:39,839
decryption so that motivates us to look

1308
00:50:39,839 --> 00:50:43,079
at the non-random properties of RSA more

1309
00:50:43,079 --> 00:50:44,460
specifically we want to look at the

1310
00:50:44,460 --> 00:50:46,619
algebraic properties of the RSA

1311
00:50:46,619 --> 00:50:48,660
encryption function because if we don't

1312
00:50:48,660 --> 00:50:51,059
look at those algebraic properties we

1313
00:50:51,059 --> 00:50:52,500
can prove that we will not be able to

1314
00:50:52,500 --> 00:50:55,800
find any sort of backdoor

1315
00:50:55,800 --> 00:50:57,420
right and this leads us to our second

1316
00:50:57,420 --> 00:50:59,700
main result of this talk there does

1317
00:50:59,700 --> 00:51:02,160
exist an algebraic attack but in

1318
00:51:02,160 --> 00:51:04,500
non-default settings

1319
00:51:04,500 --> 00:51:07,440
so recall that we have the algebraic

1320
00:51:07,440 --> 00:51:09,359
relationship between the states and the

1321
00:51:09,359 --> 00:51:10,980
output and we can assume for this attack

1322
00:51:10,980 --> 00:51:13,140
that the adversary gets to see some of

1323
00:51:13,140 --> 00:51:14,819
this output they would like to recover

1324
00:51:14,819 --> 00:51:16,440
the states so that they can predict the

1325
00:51:16,440 --> 00:51:18,300
future output

1326
00:51:18,300 --> 00:51:20,700
now we have this polynomial equation

1327
00:51:20,700 --> 00:51:22,740
where we have the unknown States and the

1328
00:51:22,740 --> 00:51:24,480
known output and I want to point out

1329
00:51:24,480 --> 00:51:26,520
that the unknown States here are small

1330
00:51:26,520 --> 00:51:29,520
integers relative to the size of n

1331
00:51:29,520 --> 00:51:30,900
I also want to point out that the

1332
00:51:30,900 --> 00:51:33,960
default public exponent e is three so

1333
00:51:33,960 --> 00:51:35,640
this is a cubic polynomial or a

1334
00:51:35,640 --> 00:51:37,260
polynomial of low degree

1335
00:51:37,260 --> 00:51:38,640
and for those of you in the audience who

1336
00:51:38,640 --> 00:51:39,480
are familiar with algebraic

1337
00:51:39,480 --> 00:51:41,220
cryptanalysis you may see a low degree

1338
00:51:41,220 --> 00:51:44,460
polynomial equation modulo n with a

1339
00:51:44,460 --> 00:51:46,380
small solution and you may think this

1340
00:51:46,380 --> 00:51:48,119
seems like the perfect example to use

1341
00:51:48,119 --> 00:51:49,859
coppersmith's method to solve this

1342
00:51:49,859 --> 00:51:51,180
equation

1343
00:51:51,180 --> 00:51:53,520
but as it turns out for the parameters

1344
00:51:53,520 --> 00:51:55,920
in the iso standard this doesn't work

1345
00:51:55,920 --> 00:51:58,079
the state sizes are just not small

1346
00:51:58,079 --> 00:52:00,000
enough for copper Smith method to

1347
00:52:00,000 --> 00:52:02,940
succeed in solving this equation

1348
00:52:02,940 --> 00:52:05,160
but this isn't the only sort of

1349
00:52:05,160 --> 00:52:06,780
polynomial that we can look at former

1350
00:52:06,780 --> 00:52:09,359
College nor What If instead of using the

1351
00:52:09,359 --> 00:52:11,099
polynomial equation based on RSA

1352
00:52:11,099 --> 00:52:13,559
encryption we use the polynomial based

1353
00:52:13,559 --> 00:52:15,420
on decryption

1354
00:52:15,420 --> 00:52:17,880
so if we have some non-default value of

1355
00:52:17,880 --> 00:52:19,380
the public exponent where the

1356
00:52:19,380 --> 00:52:21,720
corresponding private exponent is small

1357
00:52:21,720 --> 00:52:23,760
then we can rewrite the polynomial

1358
00:52:23,760 --> 00:52:25,319
equation so instead of being to the

1359
00:52:25,319 --> 00:52:27,780
power of E it's to the power of D we

1360
00:52:27,780 --> 00:52:29,160
once again have a polynomial equation

1361
00:52:29,160 --> 00:52:31,200
that has small degree and small

1362
00:52:31,200 --> 00:52:33,660
Solutions but unlike in the previous

1363
00:52:33,660 --> 00:52:35,819
case in this case coppersmith's method

1364
00:52:35,819 --> 00:52:39,300
does succeed so we do have an attack in

1365
00:52:39,300 --> 00:52:40,859
the non-default setting where we can

1366
00:52:40,859 --> 00:52:43,740
recover the state from the output

1367
00:52:43,740 --> 00:52:46,559
now it may seem a little bit weird that

1368
00:52:46,559 --> 00:52:47,880
we could have a setting where we have

1369
00:52:47,880 --> 00:52:49,859
both the default modulus found on the

1370
00:52:49,859 --> 00:52:52,619
standard and this non-default large

1371
00:52:52,619 --> 00:52:54,780
suspicious looking value of E

1372
00:52:54,780 --> 00:52:56,280
but that's not just Allowed by the

1373
00:52:56,280 --> 00:52:58,559
standard it is explicitly recommended by

1374
00:52:58,559 --> 00:52:59,940
the standard that this should be

1375
00:52:59,940 --> 00:53:01,500
possible

1376
00:53:01,500 --> 00:53:03,300
now there are some other problems where

1377
00:53:03,300 --> 00:53:06,300
it's hard to imagine a context where the

1378
00:53:06,300 --> 00:53:07,680
choice of public exponent could be

1379
00:53:07,680 --> 00:53:09,900
adversarially chosen and lead to this

1380
00:53:09,900 --> 00:53:11,579
sort of attack

1381
00:53:11,579 --> 00:53:13,980
um but so there are weaknesses with this

1382
00:53:13,980 --> 00:53:16,859
but this attack that we've described is

1383
00:53:16,859 --> 00:53:18,599
entirely compliant with the standard

1384
00:53:18,599 --> 00:53:20,460
even though there are some potential

1385
00:53:20,460 --> 00:53:23,059
drawbacks

1386
00:53:25,680 --> 00:53:28,619
all right is my audio working

1387
00:53:28,619 --> 00:53:29,940
all right

1388
00:53:29,940 --> 00:53:32,640
um so we know we're going to have to do

1389
00:53:32,640 --> 00:53:34,920
some sort of algebra Crypt analysis and

1390
00:53:34,920 --> 00:53:37,440
it seems to be hard to do with Macaulay

1391
00:53:37,440 --> 00:53:38,280
Schnur

1392
00:53:38,280 --> 00:53:41,040
what we can do instead is we can look at

1393
00:53:41,040 --> 00:53:44,220
a related construction that has a

1394
00:53:44,220 --> 00:53:46,740
somewhat simpler algebraic structure

1395
00:53:46,740 --> 00:53:48,359
that is more amenable to algebraic

1396
00:53:48,359 --> 00:53:50,220
cryptanalysis and by doing this we're

1397
00:53:50,220 --> 00:53:51,599
able to get some much more interesting

1398
00:53:51,599 --> 00:53:52,800
backdoors

1399
00:53:52,800 --> 00:53:54,180
so what we're going to focus on is

1400
00:53:54,180 --> 00:53:56,400
called the RSA prg

1401
00:53:56,400 --> 00:53:59,099
uh the RSA prg was introduced by McAuley

1402
00:53:59,099 --> 00:54:00,960
and Schnur in the very same paper that

1403
00:54:00,960 --> 00:54:02,640
introduced the construction that

1404
00:54:02,640 --> 00:54:04,380
eventually became standardized as

1405
00:54:04,380 --> 00:54:06,839
Macaulay schnauer drbg like Macaulay

1406
00:54:06,839 --> 00:54:09,780
snore we start with some State asira we

1407
00:54:09,780 --> 00:54:12,420
raise it to the E mod n we output the K

1408
00:54:12,420 --> 00:54:14,040
least significant bits

1409
00:54:14,040 --> 00:54:17,099
but here where Macaulay Schnur would

1410
00:54:17,099 --> 00:54:19,380
truncate those significant bits and use

1411
00:54:19,380 --> 00:54:21,359
only the remaining most significant bits

1412
00:54:21,359 --> 00:54:24,300
as the next state for their sap RG we

1413
00:54:24,300 --> 00:54:27,240
just take the entire thing so we take

1414
00:54:27,240 --> 00:54:29,760
the whole thing raise it to the e-mod N

1415
00:54:29,760 --> 00:54:31,680
output the K least significant bits take

1416
00:54:31,680 --> 00:54:33,900
the whole thing and so on

1417
00:54:33,900 --> 00:54:36,180
this gives us this really nice algebraic

1418
00:54:36,180 --> 00:54:38,220
expression for the ith State it's zero

1419
00:54:38,220 --> 00:54:41,339
state raised to the e to the I mod M

1420
00:54:41,339 --> 00:54:45,440
because we're raising to the e i times

1421
00:54:45,480 --> 00:54:47,579
so let's let's go through an example

1422
00:54:47,579 --> 00:54:48,300
um

1423
00:54:48,300 --> 00:54:51,960
here we have our modulus n which is

1424
00:54:51,960 --> 00:54:54,960
totally legit it was generated honestly

1425
00:54:54,960 --> 00:54:57,359
nothing malicious out about it I think

1426
00:54:57,359 --> 00:54:58,500
you promise

1427
00:54:58,500 --> 00:55:00,180
uh and here we have a bunch of states

1428
00:55:00,180 --> 00:55:02,220
and corresponding outputs now why am i

1429
00:55:02,220 --> 00:55:03,540
showing you this it's not because I'm

1430
00:55:03,540 --> 00:55:05,040
expecting you to verify the modular

1431
00:55:05,040 --> 00:55:06,900
exponentiations in your head it's

1432
00:55:06,900 --> 00:55:07,859
because we're about to see something

1433
00:55:07,859 --> 00:55:10,619
interesting so so far everything looks

1434
00:55:10,619 --> 00:55:11,400
normal

1435
00:55:11,400 --> 00:55:14,460
uh but if we go one iteration further

1436
00:55:14,460 --> 00:55:17,220
uh we see that the output has repeated

1437
00:55:17,220 --> 00:55:19,079
and more than just that the entire state

1438
00:55:19,079 --> 00:55:21,480
has repeated States 19 and 16 are equal

1439
00:55:21,480 --> 00:55:24,300
which means if we keep going uh States

1440
00:55:24,300 --> 00:55:26,700
20 and 17 will also be equal so what's

1441
00:55:26,700 --> 00:55:28,079
going on here this is horrible uh

1442
00:55:28,079 --> 00:55:30,300
pseudor random generator should not have

1443
00:55:30,300 --> 00:55:33,660
incredibly short Cycles uh well I lied

1444
00:55:33,660 --> 00:55:35,040
sorry about that and was actually

1445
00:55:35,040 --> 00:55:36,900
maliciously generated

1446
00:55:36,900 --> 00:55:38,520
um

1447
00:55:38,520 --> 00:55:42,420
so how long should the Cycles be uh if

1448
00:55:42,420 --> 00:55:44,640
the ice state is s0 to the e to the I

1449
00:55:44,640 --> 00:55:47,400
mod M we are working in an exponent in

1450
00:55:47,400 --> 00:55:49,140
an exponent we would expect Cycles to

1451
00:55:49,140 --> 00:55:51,480
have length Phi of V of n so that e to

1452
00:55:51,480 --> 00:55:55,079
the I equals e to the J mod Phi of M so

1453
00:55:55,079 --> 00:55:58,020
that state I equals State J mod n

1454
00:55:58,020 --> 00:55:59,880
uh but it turns out it's actually easy

1455
00:55:59,880 --> 00:56:02,520
to generate parameters where the cycle

1456
00:56:02,520 --> 00:56:04,140
length rather than being the full Thea

1457
00:56:04,140 --> 00:56:06,420
the event is a very small factor of U of

1458
00:56:06,420 --> 00:56:08,700
U of n in this case that factor is three

1459
00:56:08,700 --> 00:56:10,980
so we get cycles of length three

1460
00:56:10,980 --> 00:56:14,040
how is this as a back door well the

1461
00:56:14,040 --> 00:56:15,599
output is very clearly distinguishable

1462
00:56:15,599 --> 00:56:16,859
from random so we can break the security

1463
00:56:16,859 --> 00:56:20,400
of the prg uh however it's also very

1464
00:56:20,400 --> 00:56:22,559
clearly distinguishable from random to

1465
00:56:22,559 --> 00:56:24,240
absolutely everyone looking at it I mean

1466
00:56:24,240 --> 00:56:25,859
the thing Cycles with period three

1467
00:56:25,859 --> 00:56:28,140
anyone looking at this would know that

1468
00:56:28,140 --> 00:56:30,119
there's something fishy going on

1469
00:56:30,119 --> 00:56:33,420
uh so this is maybe not plausible as a

1470
00:56:33,420 --> 00:56:34,440
backdoor

1471
00:56:34,440 --> 00:56:38,880
however uh we can take these ideas and

1472
00:56:38,880 --> 00:56:40,740
extend them to get something that is a

1473
00:56:40,740 --> 00:56:43,380
much more compelling backdoor uh in

1474
00:56:43,380 --> 00:56:45,780
particular the idea that we had was

1475
00:56:45,780 --> 00:56:48,000
there is this relation in the exponent e

1476
00:56:48,000 --> 00:56:50,160
to the I equals e to the J mod P of n it

1477
00:56:50,160 --> 00:56:51,480
turns into a relation between States

1478
00:56:51,480 --> 00:56:54,480
state I equals State J mod n a cycle

1479
00:56:54,480 --> 00:56:56,400
Cycles are obvious but if we make the

1480
00:56:56,400 --> 00:56:57,839
relation in the exponents a little more

1481
00:56:57,839 --> 00:57:00,420
complicated say add a few extra terms we

1482
00:57:00,420 --> 00:57:02,220
get a more complicated relation between

1483
00:57:02,220 --> 00:57:05,220
the states that does not lead to Cycles

1484
00:57:05,220 --> 00:57:08,040
but still has structure that allows for

1485
00:57:08,040 --> 00:57:10,260
using multivariate coppersmith to

1486
00:57:10,260 --> 00:57:13,380
recover the states given the outputs

1487
00:57:13,380 --> 00:57:18,359
um we believe that if the uh if the

1488
00:57:18,359 --> 00:57:19,800
relation is chosen with sufficient

1489
00:57:19,800 --> 00:57:22,559
entropy uh it would lead to an

1490
00:57:22,559 --> 00:57:26,040
undiscoverable back door uh it seems

1491
00:57:26,040 --> 00:57:28,079
difficult to unless you know what

1492
00:57:28,079 --> 00:57:30,480
relation you're looking for uh tell from

1493
00:57:30,480 --> 00:57:31,920
the outputs or even the full States

1494
00:57:31,920 --> 00:57:35,339
whether there is such a relation

1495
00:57:35,339 --> 00:57:37,200
so this is uh

1496
00:57:37,200 --> 00:57:39,240
it's exciting we have a backdoor that

1497
00:57:39,240 --> 00:57:40,440
has

1498
00:57:40,440 --> 00:57:42,599
the very efficient parameter generation

1499
00:57:42,599 --> 00:57:45,420
it has uh it's efficient to exploit it

1500
00:57:45,420 --> 00:57:47,640
would even give a so-called no one but

1501
00:57:47,640 --> 00:57:51,900
us style backdoor where uh it would only

1502
00:57:51,900 --> 00:57:53,760
be exploitable by someone who knows the

1503
00:57:53,760 --> 00:57:55,380
secret backdoor information

1504
00:57:55,380 --> 00:57:57,359
have we found the Smoking Gun can this

1505
00:57:57,359 --> 00:58:01,680
uh give a backdoor in the full msdrbg

1506
00:58:01,680 --> 00:58:04,800
it seems hard because of the truncations

1507
00:58:04,800 --> 00:58:06,780
so in RS aprg we have this nice

1508
00:58:06,780 --> 00:58:08,819
algebraic structure where the ice state

1509
00:58:08,819 --> 00:58:10,680
is a monomial we can work in the

1510
00:58:10,680 --> 00:58:12,900
exponents and move to the states for

1511
00:58:12,900 --> 00:58:15,000
McAllister we have this big ugly

1512
00:58:15,000 --> 00:58:17,160
polynomial that has exponentially many

1513
00:58:17,160 --> 00:58:21,660
terms and it's uh it's not even known in

1514
00:58:21,660 --> 00:58:24,480
advance because you have to chop off the

1515
00:58:24,480 --> 00:58:26,960
hey significant bits of output each time

1516
00:58:26,960 --> 00:58:30,540
uh so it seems very challenging to come

1517
00:58:30,540 --> 00:58:32,040
up with anything you can do at parameter

1518
00:58:32,040 --> 00:58:33,480
generation time that would be

1519
00:58:33,480 --> 00:58:36,960
exploitable at uh that would lead to any

1520
00:58:36,960 --> 00:58:38,160
sort of exploitable relation between

1521
00:58:38,160 --> 00:58:40,260
states so further ideas will be

1522
00:58:40,260 --> 00:58:41,700
necessary to carry this sort of thing

1523
00:58:41,700 --> 00:58:44,520
over to Macaulay snor

1524
00:58:44,520 --> 00:58:47,819
uh so to recap we've shown that there

1525
00:58:47,819 --> 00:58:49,559
are no simple backdoors in the college

1526
00:58:49,559 --> 00:58:51,420
nor that only rely on being able to

1527
00:58:51,420 --> 00:58:54,180
invert the RSA function which does not

1528
00:58:54,180 --> 00:58:55,559
rule out the possibility that there are

1529
00:58:55,559 --> 00:58:57,540
back doors that make use of the

1530
00:58:57,540 --> 00:58:59,940
algebraic structure of RSA we've shown

1531
00:58:59,940 --> 00:59:01,740
that the iso standard allows insecure

1532
00:59:01,740 --> 00:59:04,859
choices of e which while not the default

1533
00:59:04,859 --> 00:59:07,920
would lead to insecure Behavior

1534
00:59:07,920 --> 00:59:10,680
and we've also shown that in a closely

1535
00:59:10,680 --> 00:59:13,859
related instruction the RSA prg there is

1536
00:59:13,859 --> 00:59:17,220
a rather compelling backdoor that does

1537
00:59:17,220 --> 00:59:20,940
not seem to carry over to msdrbg

1538
00:59:20,940 --> 00:59:22,559
now at this point I have a question for

1539
00:59:22,559 --> 00:59:25,020
all of you the audience which is have

1540
00:59:25,020 --> 00:59:26,640
you heard of Macaulay snorer being

1541
00:59:26,640 --> 00:59:28,940
implemented or used in the real world

1542
00:59:28,940 --> 00:59:33,240
we have not been able to find any real

1543
00:59:33,240 --> 00:59:34,799
world implementations of this that have

1544
00:59:34,799 --> 00:59:36,720
actually been deployed however at one

1545
00:59:36,720 --> 00:59:38,460
point people also thought this was true

1546
00:59:38,460 --> 00:59:40,559
of dual EC and it was only when people

1547
00:59:40,559 --> 00:59:43,140
started looking that they realized it

1548
00:59:43,140 --> 00:59:44,339
actually had been implemented and used

1549
00:59:44,339 --> 00:59:47,040
in a number of real world systems uh if

1550
00:59:47,040 --> 00:59:48,839
there is anyone in the world who would

1551
00:59:48,839 --> 00:59:51,059
know whether some obscure cryptographic

1552
00:59:51,059 --> 00:59:52,799
algorithm has been implemented in a real

1553
00:59:52,799 --> 00:59:56,760
world system it is the crowd at RWC so

1554
00:59:56,760 --> 00:59:59,160
if you have ever come across McAllister

1555
00:59:59,160 --> 01:00:00,599
if you've ever heard of anyone being

1556
01:00:00,599 --> 01:00:02,400
asked to implement it please come and

1557
01:00:02,400 --> 01:00:04,200
talk to us

1558
01:00:04,200 --> 01:00:06,839
so where does this leave us we have this

1559
01:00:06,839 --> 01:00:08,579
truly fascinating open problem of

1560
01:00:08,579 --> 01:00:11,460
macaulay's new drbg it I mean it seems

1561
01:00:11,460 --> 01:00:13,380
to have it all it's got the Intrigue of

1562
01:00:13,380 --> 01:00:15,240
potential government backdoors I mean

1563
01:00:15,240 --> 01:00:17,700
who puts a hard-coded RSA modulus into a

1564
01:00:17,700 --> 01:00:19,559
standard it's

1565
01:00:19,559 --> 01:00:21,299
got a construction that's as

1566
01:00:21,299 --> 01:00:24,119
straightforward as textbook RSA uh it

1567
01:00:24,119 --> 01:00:25,380
feels like the sort of problem you

1568
01:00:25,380 --> 01:00:27,180
should be able to solve on a chalkboard

1569
01:00:27,180 --> 01:00:29,940
in a weekend it's it's an excuse to do

1570
01:00:29,940 --> 01:00:31,799
algebraic Crypt analysis and truly how

1571
01:00:31,799 --> 01:00:33,359
often do you get one of those

1572
01:00:33,359 --> 01:00:38,299
uh and yet this problem has puzzled

1573
01:00:38,299 --> 01:00:41,280
cryptographers for the last 10 years uh

1574
01:00:41,280 --> 01:00:42,960
it has nerd sniped generations of

1575
01:00:42,960 --> 01:00:45,180
cryptographers and after this talk it is

1576
01:00:45,180 --> 01:00:46,980
my sincere hope that it has nerd sniped

1577
01:00:46,980 --> 01:00:48,059
all of you too

1578
01:00:48,059 --> 01:00:50,400
where is the back door is there a back

1579
01:00:50,400 --> 01:00:52,680
door was this all just a giant red

1580
01:00:52,680 --> 01:00:55,079
herring to distract from Dual EC the

1581
01:00:55,079 --> 01:00:56,640
answers are out there somewhere maybe

1582
01:00:56,640 --> 01:00:59,099
you will find them our full paper is on

1583
01:00:59,099 --> 01:01:00,720
ePrint I highly encourage you to check

1584
01:01:00,720 --> 01:01:02,220
it out for full details of these and

1585
01:01:02,220 --> 01:01:03,780
other attacks and with that we're happy

1586
01:01:03,780 --> 01:01:05,350
to take questions thank you

1587
01:01:05,350 --> 01:01:06,470
[Applause]

1588
01:01:06,470 --> 01:01:09,390
[Music]

1589
01:01:09,390 --> 01:01:14,220
[Applause]

1590
01:01:14,220 --> 01:01:16,380
so I'll use my program as chair I have a

1591
01:01:16,380 --> 01:01:17,640
quick question about the performance of

1592
01:01:17,640 --> 01:01:19,559
these generators compared to the AES and

1593
01:01:19,559 --> 01:01:22,079
Matt and hash based generators like are

1594
01:01:22,079 --> 01:01:24,240
you would there be any reasonable reason

1595
01:01:24,240 --> 01:01:26,819
to use these generators over the well

1596
01:01:26,819 --> 01:01:28,980
over the hash based or AES based math

1597
01:01:28,980 --> 01:01:31,260
generators given their performance

1598
01:01:31,260 --> 01:01:33,480
so the original justification the

1599
01:01:33,480 --> 01:01:34,859
original justification for why these

1600
01:01:34,859 --> 01:01:36,240
generators should be used is that

1601
01:01:36,240 --> 01:01:38,040
they're based on uh asymmetric

1602
01:01:38,040 --> 01:01:39,660
cryptography so they should be based on

1603
01:01:39,660 --> 01:01:41,700
hard computational assumptions so sort

1604
01:01:41,700 --> 01:01:43,020
of the justification was even though

1605
01:01:43,020 --> 01:01:44,640
these have poor performance benefits

1606
01:01:44,640 --> 01:01:47,400
they should be used because they have uh

1607
01:01:47,400 --> 01:01:50,040
maybe stronger security guarantees as in

1608
01:01:50,040 --> 01:01:52,680
less less Quantum secure

1609
01:01:52,680 --> 01:01:55,440
uh as in uh based on asymmetric instead

1610
01:01:55,440 --> 01:01:57,420
of symmetric cryptography

1611
01:01:57,420 --> 01:01:59,339
although it's worth noting that it turns

1612
01:01:59,339 --> 01:02:01,680
out that uh neither do LEC Norma College

1613
01:02:01,680 --> 01:02:04,680
nor ends up with the output sizes used

1614
01:02:04,680 --> 01:02:07,079
from accommodation or in the standard uh

1615
01:02:07,079 --> 01:02:10,020
actually being providely reducible to uh

1616
01:02:10,020 --> 01:02:13,680
well-studied computational assumptions

1617
01:02:13,680 --> 01:02:15,900
so okay not fast and also not

1618
01:02:15,900 --> 01:02:18,180
necessarily secure yeah so let's take

1619
01:02:18,180 --> 01:02:19,440
one question and then we'll move on to

1620
01:02:19,440 --> 01:02:21,240
the lightning talks

1621
01:02:21,240 --> 01:02:23,579
um so I'm I'm so I've looked at this

1622
01:02:23,579 --> 01:02:24,900
before so it's a bit of a loaded

1623
01:02:24,900 --> 01:02:26,339
question

1624
01:02:26,339 --> 01:02:28,799
um in the original paper they suggest

1625
01:02:28,799 --> 01:02:30,900
that you could use a prime modulus so

1626
01:02:30,900 --> 01:02:33,180
they say we can do this with a composite

1627
01:02:33,180 --> 01:02:34,559
but you probably don't need to do a

1628
01:02:34,559 --> 01:02:36,780
composite so you could do a prime

1629
01:02:36,780 --> 01:02:38,819
so the fact that this aligns with what

1630
01:02:38,819 --> 01:02:40,619
you found because you can use its

1631
01:02:40,619 --> 01:02:42,420
encryption is fine if it was crime then

1632
01:02:42,420 --> 01:02:44,280
you can always invert these things did

1633
01:02:44,280 --> 01:02:45,839
you did you look at what would happen if

1634
01:02:45,839 --> 01:02:47,880
an attacker picked a special kind of

1635
01:02:47,880 --> 01:02:48,900
prime

1636
01:02:48,900 --> 01:02:50,819
this is this is a great question because

1637
01:02:50,819 --> 01:02:53,640
it is really unclear even how you would

1638
01:02:53,640 --> 01:02:55,380
be able to get something exploitable in

1639
01:02:55,380 --> 01:02:57,599
the case that you have a prime modulus I

1640
01:02:57,599 --> 01:02:59,339
believe there is some work that has been

1641
01:02:59,339 --> 01:03:01,200
done showing that for special types of

1642
01:03:01,200 --> 01:03:04,260
prime uh like mercen primes I believe

1643
01:03:04,260 --> 01:03:06,540
um there there may be things you can do

1644
01:03:06,540 --> 01:03:08,880
um I believe that was like Antonio sanso

1645
01:03:08,880 --> 01:03:09,960
I think

1646
01:03:09,960 --> 01:03:13,500
um yeah he looked at sparse primes so so

1647
01:03:13,500 --> 01:03:17,220
um yes but in terms of uh how one would

1648
01:03:17,220 --> 01:03:19,140
prove the security of that I mean it's

1649
01:03:19,140 --> 01:03:22,079
not going to come from you know the RSA

1650
01:03:22,079 --> 01:03:24,059
problem uh it's unclear what sort of

1651
01:03:24,059 --> 01:03:25,799
computational hardness assumption you

1652
01:03:25,799 --> 01:03:28,200
would use to be able to show that that

1653
01:03:28,200 --> 01:03:30,119
this would give something secure

1654
01:03:30,119 --> 01:03:32,940
uh in the case that well if it's Prime

1655
01:03:32,940 --> 01:03:36,660
the factors are already known anyway

1656
01:03:36,660 --> 01:03:38,220
awesome yeah this was a really really

1657
01:03:38,220 --> 01:03:40,079
cool talk um I think we're gonna have to

1658
01:03:40,079 --> 01:03:41,280
take the rest of the questions offline

1659
01:03:41,280 --> 01:03:42,599
because we do want to give time to the

1660
01:03:42,599 --> 01:03:44,280
lightning talks so thank you so much

1661
01:03:44,280 --> 01:03:46,270
this really really good talk

1662
01:03:46,270 --> 01:03:51,050
[Music]

1663
01:03:52,260 --> 01:03:53,520
okay and thank you to all the speakers

1664
01:03:53,520 --> 01:03:55,319
of the session and now we're gonna move

1665
01:03:55,319 --> 01:03:57,000
to the lightning talks so Nigel the

1666
01:03:57,000 --> 01:03:58,619
floor is yours

1667
01:03:58,619 --> 01:04:00,740
hello

