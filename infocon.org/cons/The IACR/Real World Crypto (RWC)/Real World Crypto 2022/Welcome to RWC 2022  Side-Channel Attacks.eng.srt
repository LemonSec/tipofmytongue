1
00:00:03,140 --> 00:00:19,800
[Music]

2
00:00:21,920 --> 00:00:24,640
we have a few seconds right at best

3
00:00:24,640 --> 00:00:25,920
and maybe

4
00:00:25,920 --> 00:00:29,000
how exactly

5
00:00:29,000 --> 00:00:32,140
[Music]

6
00:00:32,479 --> 00:00:35,150
yeah somewhat

7
00:00:35,150 --> 00:00:36,480
[Music]

8
00:00:36,480 --> 00:00:37,280
all right

9
00:00:37,280 --> 00:00:38,640
[Music]

10
00:00:38,640 --> 00:00:42,480
good good morning rwc 2022

11
00:00:42,480 --> 00:00:45,480
um

12
00:00:51,920 --> 00:00:54,079
it's a it's a pretty good start it's

13
00:00:54,079 --> 00:00:55,680
actually really really awesome to see so

14
00:00:55,680 --> 00:00:57,039
many people here

15
00:00:57,039 --> 00:01:00,559
um so yeah we where uh you want leila

16
00:01:00,559 --> 00:01:03,199
and me we've been organizing this event

17
00:01:03,199 --> 00:01:05,280
um as general chairs

18
00:01:05,280 --> 00:01:08,080
so uh let's like take one slide give us

19
00:01:08,080 --> 00:01:09,600
one slide to tell you what it's like to

20
00:01:09,600 --> 00:01:11,600
organize rwc

21
00:01:11,600 --> 00:01:13,920
to actually three times

22
00:01:13,920 --> 00:01:16,159
so it kind of started in 2018 when i was

23
00:01:16,159 --> 00:01:18,720
at rwc i talked to emilia who was one of

24
00:01:18,720 --> 00:01:20,159
the general chairs and together with

25
00:01:20,159 --> 00:01:21,840
anya and she told me you know this is

26
00:01:21,840 --> 00:01:23,680
actually a lot a lot of work

27
00:01:23,680 --> 00:01:25,040
but if i had to do it again it would be

28
00:01:25,040 --> 00:01:26,400
super easy because now i know how

29
00:01:26,400 --> 00:01:28,320
everything works it's it's super chill

30
00:01:28,320 --> 00:01:29,280
right

31
00:01:29,280 --> 00:01:31,119
and at the time i was organizing chess

32
00:01:31,119 --> 00:01:32,560
together with ilyana who's sitting here

33
00:01:32,560 --> 00:01:33,759
in the front

34
00:01:33,759 --> 00:01:35,680
and um so

35
00:01:35,680 --> 00:01:37,840
rwc went well chess went well and sort

36
00:01:37,840 --> 00:01:40,400
of these words were resonating with me

37
00:01:40,400 --> 00:01:41,759
i thought like you know if you actually

38
00:01:41,759 --> 00:01:43,840
know how to run an icr event in the

39
00:01:43,840 --> 00:01:46,159
burst from bella here in amsterdam

40
00:01:46,159 --> 00:01:47,520
you know emilia said that's not a lot of

41
00:01:47,520 --> 00:01:49,439
work right so organizing real world

42
00:01:49,439 --> 00:01:51,040
crypto 2021

43
00:01:51,040 --> 00:01:52,880
very quick thing right

44
00:01:52,880 --> 00:01:56,479
20 minute operation in and out done

45
00:01:56,479 --> 00:01:57,280
um

46
00:01:57,280 --> 00:01:59,280
didn't quite happen so we did organize

47
00:01:59,280 --> 00:02:01,759
2021 you probably most of you were at

48
00:02:01,759 --> 00:02:03,840
the virtual event um

49
00:02:03,840 --> 00:02:06,159
it's different

50
00:02:06,159 --> 00:02:09,119
then we organized it for january 2022

51
00:02:09,119 --> 00:02:12,800
and pretty last minute had to postpone

52
00:02:12,800 --> 00:02:15,200
and it's really awesome to see it now

53
00:02:15,200 --> 00:02:17,520
that it actually came together um yeah

54
00:02:17,520 --> 00:02:21,840
it was not was not quite that that easy

55
00:02:21,840 --> 00:02:23,120
over the last few nights maybe we didn't

56
00:02:23,120 --> 00:02:24,319
get as much sleep as we would have

57
00:02:24,319 --> 00:02:25,599
wanted to

58
00:02:25,599 --> 00:02:28,000
um actually the hardest thing until the

59
00:02:28,000 --> 00:02:30,160
end was to estimate how many people

60
00:02:30,160 --> 00:02:31,200
would come

61
00:02:31,200 --> 00:02:32,959
there's usually have decent estimates

62
00:02:32,959 --> 00:02:34,959
from previous years but first

63
00:02:34,959 --> 00:02:36,720
hybrid rwc

64
00:02:36,720 --> 00:02:38,160
i mean how many people show up in person

65
00:02:38,160 --> 00:02:40,080
how many go remote how many people are

66
00:02:40,080 --> 00:02:42,319
concerned that the netherlands have no

67
00:02:42,319 --> 00:02:44,480
kahuna rules anymore how many are super

68
00:02:44,480 --> 00:02:46,080
happy that the netherlands do not have

69
00:02:46,080 --> 00:02:48,080
any corona rules anymore

70
00:02:48,080 --> 00:02:50,959
um we had no idea and uh well we made

71
00:02:50,959 --> 00:02:53,680
some sort of guess and this is the only

72
00:02:53,680 --> 00:02:54,879
solid statistic that i have on the

73
00:02:54,879 --> 00:02:57,200
slides we have 485 in-person

74
00:02:57,200 --> 00:02:59,200
registrations at the time when i made

75
00:02:59,200 --> 00:03:02,840
those slides which was 5 48 am this

76
00:03:02,840 --> 00:03:05,440
morning and on the next few slides

77
00:03:05,440 --> 00:03:06,560
there's a few statistics that are

78
00:03:06,560 --> 00:03:08,640
completely flawed because they are based

79
00:03:08,640 --> 00:03:10,720
on data from yesterday and there were

80
00:03:10,720 --> 00:03:12,080
lots of lots of registrations in

81
00:03:12,080 --> 00:03:13,840
particular virtual like remote

82
00:03:13,840 --> 00:03:16,159
attendance but also in-person attendance

83
00:03:16,159 --> 00:03:19,120
still coming in over the night so as you

84
00:03:19,120 --> 00:03:20,879
can see most of the registrations are in

85
00:03:20,879 --> 00:03:23,440
person i believe that may change like

86
00:03:23,440 --> 00:03:25,360
over the next couple of minutes i don't

87
00:03:25,360 --> 00:03:26,080
know

88
00:03:26,080 --> 00:03:29,120
um so as i said data from yesterday

89
00:03:29,120 --> 00:03:31,040
there's really people from from all over

90
00:03:31,040 --> 00:03:34,879
the world as you can see here um

91
00:03:34,879 --> 00:03:35,760
now

92
00:03:35,760 --> 00:03:37,840
this is also completely flawed statistic

93
00:03:37,840 --> 00:03:39,200
because you would think that you see all

94
00:03:39,200 --> 00:03:40,480
of these people from all over the world

95
00:03:40,480 --> 00:03:42,000
here in the room of course not i mean

96
00:03:42,000 --> 00:03:44,640
this is across like virtual and

97
00:03:44,640 --> 00:03:46,799
in-person registrations very hard to do

98
00:03:46,799 --> 00:03:48,640
these statistics properly

99
00:03:48,640 --> 00:03:50,799
um you also see that most people are

100
00:03:50,799 --> 00:03:52,879
from europe and as far as i understand i

101
00:03:52,879 --> 00:03:54,799
didn't do those graphics this is way way

102
00:03:54,799 --> 00:03:58,000
beyond my excel skills um

103
00:03:58,000 --> 00:03:59,280
most people are from europe and i think

104
00:03:59,280 --> 00:04:00,640
that counts also in the remote

105
00:04:00,640 --> 00:04:03,040
participants

106
00:04:03,040 --> 00:04:05,519
you can see here that we have actually

107
00:04:05,519 --> 00:04:08,799
um a lot of regular registrations and

108
00:04:08,799 --> 00:04:11,439
you see how this splits into a regular

109
00:04:11,439 --> 00:04:12,480
and

110
00:04:12,480 --> 00:04:14,560
it says remote student twice this is

111
00:04:14,560 --> 00:04:16,560
very flawed statistics that i get here

112
00:04:16,560 --> 00:04:18,880
okay so there's some some sort of split

113
00:04:18,880 --> 00:04:20,798
between regular and remote and students

114
00:04:20,798 --> 00:04:23,040
and whatever

115
00:04:23,040 --> 00:04:24,639
now let's move away from those

116
00:04:24,639 --> 00:04:26,560
statistics let me tell you a few things

117
00:04:26,560 --> 00:04:28,080
like regarding the organization of the

118
00:04:28,080 --> 00:04:30,479
event so um most of you will have

119
00:04:30,479 --> 00:04:32,000
checked the website of rwc and you

120
00:04:32,000 --> 00:04:33,440
probably saw on the on the starting page

121
00:04:33,440 --> 00:04:34,479
and also somewhere in the travel

122
00:04:34,479 --> 00:04:36,560
information some recommendations on how

123
00:04:36,560 --> 00:04:38,960
to deal with with covet

124
00:04:38,960 --> 00:04:40,639
now as i said there's really no

125
00:04:40,639 --> 00:04:42,080
restrictions in the netherlands anymore

126
00:04:42,080 --> 00:04:43,600
but it would be nice if you read through

127
00:04:43,600 --> 00:04:45,360
those and you know follow those

128
00:04:45,360 --> 00:04:47,919
recommendations in particular um wear a

129
00:04:47,919 --> 00:04:50,240
mask when you're not in the catering

130
00:04:50,240 --> 00:04:51,600
area so i think in the catering area

131
00:04:51,600 --> 00:04:53,360
this we will be eating we'll be drinking

132
00:04:53,360 --> 00:04:54,800
there's no point but when you're not in

133
00:04:54,800 --> 00:04:56,160
the catering area please wear a mask

134
00:04:56,160 --> 00:04:57,280
when you're on stage it's also by the

135
00:04:57,280 --> 00:04:59,440
way okay to not wear a mask um as you

136
00:04:59,440 --> 00:05:00,880
can see

137
00:05:00,880 --> 00:05:02,560
when i'm talking about catering so all

138
00:05:02,560 --> 00:05:04,560
the catering will be um most of you came

139
00:05:04,560 --> 00:05:05,919
from there now will be across there in

140
00:05:05,919 --> 00:05:07,440
the hill tassel so that means all the

141
00:05:07,440 --> 00:05:09,120
coffee breaks the lunches we will have a

142
00:05:09,120 --> 00:05:10,960
reception tonight and my understanding

143
00:05:10,960 --> 00:05:12,320
is that afterwards you don't need a

144
00:05:12,320 --> 00:05:14,560
dinner reservation anymore

145
00:05:14,560 --> 00:05:16,160
um tomorrow evening there's going to be

146
00:05:16,160 --> 00:05:17,919
a concert and there will be drinks with

147
00:05:17,919 --> 00:05:19,199
the concert there may be some light

148
00:05:19,199 --> 00:05:20,560
snacks but you might want a dinner

149
00:05:20,560 --> 00:05:24,160
reservation after the concert

150
00:05:24,160 --> 00:05:26,240
now if you're wondering where things are

151
00:05:26,240 --> 00:05:28,479
um so the the blue mark room is where we

152
00:05:28,479 --> 00:05:30,240
are right now and then sort of to the

153
00:05:30,240 --> 00:05:31,440
right on the ground floor you see that

154
00:05:31,440 --> 00:05:34,080
the hotel where where the catering is

155
00:05:34,080 --> 00:05:35,520
we also have

156
00:05:35,520 --> 00:05:36,800
several breakout rooms on the first

157
00:05:36,800 --> 00:05:38,400
floor so if you want to

158
00:05:38,400 --> 00:05:39,680
retreat with a group of people to

159
00:05:39,680 --> 00:05:41,360
discuss stuff maybe you have a project

160
00:05:41,360 --> 00:05:42,800
meeting running in parallel or whatever

161
00:05:42,800 --> 00:05:44,639
there's six rooms on the first floor

162
00:05:44,639 --> 00:05:48,560
that's rooms 1.1 to 1.6 and um

163
00:05:48,560 --> 00:05:49,520
that's

164
00:05:49,520 --> 00:05:51,840
the rooms well i can show this now here

165
00:05:51,840 --> 00:05:53,199
the remote people won't see this but

166
00:05:53,199 --> 00:05:55,759
they don't care

167
00:06:00,639 --> 00:06:03,120
okay so if you're staying around in

168
00:06:03,120 --> 00:06:05,120
amsterdam not just for rbc but you do a

169
00:06:05,120 --> 00:06:06,400
little bit of tourism

170
00:06:06,400 --> 00:06:07,919
we put some basic information at least

171
00:06:07,919 --> 00:06:09,600
on tourism and on public transportation

172
00:06:09,600 --> 00:06:10,720
on the website so you might want to

173
00:06:10,720 --> 00:06:12,000
check that out as a like sort of

174
00:06:12,000 --> 00:06:14,000
starting point for your uh venturing

175
00:06:14,000 --> 00:06:15,840
into amsterdam

176
00:06:15,840 --> 00:06:17,600
also if you're staying longer next week

177
00:06:17,600 --> 00:06:20,240
there is the def connect event by the

178
00:06:20,240 --> 00:06:21,919
ethereum crowd

179
00:06:21,919 --> 00:06:23,919
and it's sold out

180
00:06:23,919 --> 00:06:27,199
um but we can get 25 tickets for rbc

181
00:06:27,199 --> 00:06:28,880
participants for free so if you're

182
00:06:28,880 --> 00:06:30,240
interested in this i'm not posting the

183
00:06:30,240 --> 00:06:32,720
link to get the tickets because then you

184
00:06:32,720 --> 00:06:34,240
know stuff would happen just come to the

185
00:06:34,240 --> 00:06:36,240
registration desk if you want to attend

186
00:06:36,240 --> 00:06:37,759
we can get you set up with a with a free

187
00:06:37,759 --> 00:06:40,400
ticket for dev connect

188
00:06:40,400 --> 00:06:42,560
um and generally if you have any other

189
00:06:42,560 --> 00:06:44,720
questions come to the registration desk

190
00:06:44,720 --> 00:06:46,560
there's always going to be someone there

191
00:06:46,560 --> 00:06:48,800
we have a signal group to discuss stuff

192
00:06:48,800 --> 00:06:50,080
if the people there don't know we'll

193
00:06:50,080 --> 00:06:52,639
figure it out

194
00:06:52,800 --> 00:06:54,000
um now

195
00:06:54,000 --> 00:06:56,080
last but not least we really this event

196
00:06:56,080 --> 00:06:57,759
would not be possible without the

197
00:06:57,759 --> 00:07:00,880
generous help of various sponsors so let

198
00:07:00,880 --> 00:07:02,800
me just briefly show their logos i'm not

199
00:07:02,800 --> 00:07:04,400
going to go through all of them but

200
00:07:04,400 --> 00:07:07,199
there's lots a lot of sponsors and um

201
00:07:07,199 --> 00:07:09,919
it's really amazing how well nigel

202
00:07:09,919 --> 00:07:12,000
really manages to to connect to all of

203
00:07:12,000 --> 00:07:13,280
these uh

204
00:07:13,280 --> 00:07:15,440
now kenny so nigel did it for this event

205
00:07:15,440 --> 00:07:17,599
now it's kenny so now if you want to now

206
00:07:17,599 --> 00:07:19,599
if you want to sponsor rwc next year

207
00:07:19,599 --> 00:07:21,280
don't talk to nigel anymore talk to

208
00:07:21,280 --> 00:07:24,000
kenny nigel's out

209
00:07:24,000 --> 00:07:26,080
all right so it continues with the

210
00:07:26,080 --> 00:07:27,680
sponsors

211
00:07:27,680 --> 00:07:30,720
and uh well that's basically it so with

212
00:07:30,720 --> 00:07:33,039
this i want to tell you just enjoy rwc

213
00:07:33,039 --> 00:07:36,000
2022 and enjoy amsterdam and now it's my

214
00:07:36,000 --> 00:07:37,360
pleasure to hand over to the first

215
00:07:37,360 --> 00:07:38,960
session here which happens to be layla

216
00:07:38,960 --> 00:07:40,639
who's standing behind me here thank you

217
00:07:40,639 --> 00:07:41,800
very much

218
00:07:41,800 --> 00:07:50,800
[Applause]

219
00:07:50,800 --> 00:07:53,280
good morning everyone it's my pleasure

220
00:07:53,280 --> 00:07:56,240
to have as the first session uh daniel

221
00:07:56,240 --> 00:07:58,080
genkin said it never starts with side

222
00:07:58,080 --> 00:08:00,080
channels how come well maybe something

223
00:08:00,080 --> 00:08:03,520
to thank to our program chair for elena

224
00:08:03,520 --> 00:08:05,520
so yeah we are kicking off with the

225
00:08:05,520 --> 00:08:07,840
session on such an attacks

226
00:08:07,840 --> 00:08:11,039
and our first stock is spectra

227
00:08:11,039 --> 00:08:12,800
declassified

228
00:08:12,800 --> 00:08:14,639
quartered by a number of people as you

229
00:08:14,639 --> 00:08:17,440
can see on this slide but the most

230
00:08:17,440 --> 00:08:19,440
important one i will mention is the one

231
00:08:19,440 --> 00:08:21,840
that gives a talk at the moment that's

232
00:08:21,840 --> 00:08:25,400
cioli o'connor

233
00:08:30,120 --> 00:08:33,039
[Applause]

234
00:08:33,039 --> 00:08:35,199
oh

235
00:08:35,279 --> 00:08:36,640
is it this one

236
00:08:36,640 --> 00:08:38,159
okay cool

237
00:08:38,159 --> 00:08:39,039
okay

238
00:08:39,039 --> 00:08:42,080
um so my name is ceo o'connell and uh

239
00:08:42,080 --> 00:08:43,760
this work was done in conjunction with

240
00:08:43,760 --> 00:08:46,320
authors from georgia tech um

241
00:08:46,320 --> 00:08:47,440
mpi

242
00:08:47,440 --> 00:08:49,600
mdir the university of wright broad and

243
00:08:49,600 --> 00:08:52,800
the university of uh of adelaide

244
00:08:52,800 --> 00:08:55,600
so this talk is about how

245
00:08:55,600 --> 00:08:58,480
uh speculative execution interacts with

246
00:08:58,480 --> 00:09:00,000
declassification

247
00:09:00,000 --> 00:09:01,839
and in particular we show a surprising

248
00:09:01,839 --> 00:09:04,160
case in which

249
00:09:04,160 --> 00:09:07,040
sorry i forgot to do this

250
00:09:07,040 --> 00:09:09,360
we show a surprising case in which we

251
00:09:09,360 --> 00:09:11,760
are able to speculatively leak data

252
00:09:11,760 --> 00:09:14,080
without um without having an out of

253
00:09:14,080 --> 00:09:15,839
bounds access

254
00:09:15,839 --> 00:09:17,600
um so let's see how this uh how this

255
00:09:17,600 --> 00:09:18,800
goes

256
00:09:18,800 --> 00:09:20,560
so we begin with alice sending a message

257
00:09:20,560 --> 00:09:21,519
to bob

258
00:09:21,519 --> 00:09:24,000
and charlie can intercept the message

259
00:09:24,000 --> 00:09:26,399
um so what alice does is she uses this

260
00:09:26,399 --> 00:09:29,279
mock cipher to encrypt her message to

261
00:09:29,279 --> 00:09:30,480
bob

262
00:09:30,480 --> 00:09:32,880
um now the way this the cipher works is

263
00:09:32,880 --> 00:09:34,959
it applies a one-time pad one bit at a

264
00:09:34,959 --> 00:09:38,160
time now unfortunately for alice it

265
00:09:38,160 --> 00:09:40,480
branches on key material and what's the

266
00:09:40,480 --> 00:09:42,080
problem with this

267
00:09:42,080 --> 00:09:45,440
well the value of alice's key influences

268
00:09:45,440 --> 00:09:47,680
the execution time of

269
00:09:47,680 --> 00:09:49,680
of her program and if charlie can

270
00:09:49,680 --> 00:09:50,880
measure the execution time of the

271
00:09:50,880 --> 00:09:53,040
program then he can infer some

272
00:09:53,040 --> 00:09:56,800
information about alice's key

273
00:09:57,200 --> 00:09:59,360
so that's called a timing side channel

274
00:09:59,360 --> 00:10:01,600
and the go to defense is called constant

275
00:10:01,600 --> 00:10:04,079
time programming and the way this works

276
00:10:04,079 --> 00:10:06,160
is we try to ensure that there's no

277
00:10:06,160 --> 00:10:08,240
correlation between the execution time

278
00:10:08,240 --> 00:10:09,760
of the program

279
00:10:09,760 --> 00:10:12,800
and any secret data so what we do is if

280
00:10:12,800 --> 00:10:14,959
we have secret data we make sure that it

281
00:10:14,959 --> 00:10:17,200
cannot be used as the condition for a

282
00:10:17,200 --> 00:10:19,360
loop or for a branch

283
00:10:19,360 --> 00:10:21,519
it cannot be used as part of an address

284
00:10:21,519 --> 00:10:24,000
for a memory access and we can't use it

285
00:10:24,000 --> 00:10:26,320
as a parameter for some sort of variable

286
00:10:26,320 --> 00:10:27,200
time

287
00:10:27,200 --> 00:10:31,360
instruction so for example square root

288
00:10:31,760 --> 00:10:33,760
so we apply constant time programming to

289
00:10:33,760 --> 00:10:36,320
alice's program and now it's safe the

290
00:10:36,320 --> 00:10:38,399
problem is that this is ad hoc and

291
00:10:38,399 --> 00:10:40,880
requires the developer to be very

292
00:10:40,880 --> 00:10:43,519
careful about where they put or sorry

293
00:10:43,519 --> 00:10:46,399
where they use secret values

294
00:10:46,399 --> 00:10:48,880
we can mitigate this by using a security

295
00:10:48,880 --> 00:10:51,600
type system what this does is it allows

296
00:10:51,600 --> 00:10:53,519
the developer to

297
00:10:53,519 --> 00:10:55,360
um to annotate the parts of their

298
00:10:55,360 --> 00:10:57,279
program that should be secret and the

299
00:10:57,279 --> 00:10:58,640
parts that they don't really care about

300
00:10:58,640 --> 00:11:02,399
they can be public and what it does

301
00:11:02,399 --> 00:11:05,040
if we show uh if we show alice's

302
00:11:05,040 --> 00:11:06,959
original program

303
00:11:06,959 --> 00:11:09,600
is it's able to automatically detect

304
00:11:09,600 --> 00:11:12,320
when you use a secret value so in this

305
00:11:12,320 --> 00:11:15,120
case the key and you use it in a way

306
00:11:15,120 --> 00:11:17,600
that it would leak they um

307
00:11:17,600 --> 00:11:19,279
lick the value to

308
00:11:19,279 --> 00:11:22,160
uh to an outside observer

309
00:11:22,160 --> 00:11:23,920
additionally it can recommend how to

310
00:11:23,920 --> 00:11:25,440
change the program so here we see that

311
00:11:25,440 --> 00:11:26,880
it should remove the if and now our

312
00:11:26,880 --> 00:11:29,839
program's nice and safe

313
00:11:29,839 --> 00:11:31,200
so let's have a look let's have a look

314
00:11:31,200 --> 00:11:34,640
at how values flow through our program

315
00:11:34,640 --> 00:11:36,720
on the left we have publicly typed

316
00:11:36,720 --> 00:11:38,720
values and they are able to flow to the

317
00:11:38,720 --> 00:11:40,959
outside world we don't care because by

318
00:11:40,959 --> 00:11:43,680
definition they are public

319
00:11:43,680 --> 00:11:46,079
on the right we have secretly typed

320
00:11:46,079 --> 00:11:47,440
values

321
00:11:47,440 --> 00:11:48,399
and

322
00:11:48,399 --> 00:11:50,160
we need to make sure that they don't

323
00:11:50,160 --> 00:11:53,200
flow to the outside world and indeed our

324
00:11:53,200 --> 00:11:54,399
constant time programming and our

325
00:11:54,399 --> 00:11:56,160
security type system ensures that this

326
00:11:56,160 --> 00:11:58,959
is not the case

327
00:12:00,959 --> 00:12:01,680
so

328
00:12:01,680 --> 00:12:02,639
um

329
00:12:02,639 --> 00:12:05,600
now we have a problem

330
00:12:05,600 --> 00:12:07,360
at some point we may want to take a

331
00:12:07,360 --> 00:12:09,600
secret value and actually send it to the

332
00:12:09,600 --> 00:12:12,720
outside world in this example we perform

333
00:12:12,720 --> 00:12:15,279
encryption and we have some some

334
00:12:15,279 --> 00:12:17,839
ciphertext which is uh sorry we have

335
00:12:17,839 --> 00:12:20,000
some internal state which is considered

336
00:12:20,000 --> 00:12:22,399
to be secret and we would like to now

337
00:12:22,399 --> 00:12:25,839
expose it as the ciphertext the problem

338
00:12:25,839 --> 00:12:26,800
is

339
00:12:26,800 --> 00:12:29,279
when we set the the secret variable

340
00:12:29,279 --> 00:12:31,120
state we try to

341
00:12:31,120 --> 00:12:33,279
assign that to a public variable

342
00:12:33,279 --> 00:12:36,000
the compiler complains it says well hang

343
00:12:36,000 --> 00:12:37,200
on a second

344
00:12:37,200 --> 00:12:39,120
i don't know that this is safe you're

345
00:12:39,120 --> 00:12:41,760
trying to leak ace or you're trying to

346
00:12:41,760 --> 00:12:44,000
set a secret value to a public variable

347
00:12:44,000 --> 00:12:46,079
and that leaks it how do i know that

348
00:12:46,079 --> 00:12:47,680
that's a safe operation the compiler

349
00:12:47,680 --> 00:12:50,000
cannot automatically determine that

350
00:12:50,000 --> 00:12:52,399
so what we do is we use a declassify

351
00:12:52,399 --> 00:12:53,760
statement

352
00:12:53,760 --> 00:12:56,399
this acts like a typecast

353
00:12:56,399 --> 00:12:58,720
for um for security type systems it

354
00:12:58,720 --> 00:13:01,839
takes a value that is secret and turns

355
00:13:01,839 --> 00:13:04,560
it into a value that is public and the

356
00:13:04,560 --> 00:13:07,440
uh the developer asserts that this is

357
00:13:07,440 --> 00:13:08,880
safe to do

358
00:13:08,880 --> 00:13:11,040
now like a type uh type coercion or

359
00:13:11,040 --> 00:13:14,000
typecast this has no runtime effect it's

360
00:13:14,000 --> 00:13:16,079
just a message from the developer to the

361
00:13:16,079 --> 00:13:18,839
compiler that this is safe to

362
00:13:18,839 --> 00:13:22,000
do so now when we add declassification

363
00:13:22,000 --> 00:13:24,560
back to our diagram we see that there is

364
00:13:24,560 --> 00:13:26,800
a path for secret values to reach the

365
00:13:26,800 --> 00:13:28,880
outside world but they must pass through

366
00:13:28,880 --> 00:13:30,480
the declassify statement and as we

367
00:13:30,480 --> 00:13:31,680
talked before

368
00:13:31,680 --> 00:13:33,920
the only time that happens is when the

369
00:13:33,920 --> 00:13:36,320
uh when the developer asserts that these

370
00:13:36,320 --> 00:13:38,720
secret values are safe to turn into

371
00:13:38,720 --> 00:13:40,079
public uh

372
00:13:40,079 --> 00:13:41,920
sorry these secret variables are safe to

373
00:13:41,920 --> 00:13:43,600
turn into public variables and then can

374
00:13:43,600 --> 00:13:46,000
be leaked to the outside world

375
00:13:46,000 --> 00:13:48,560
so now everything is safe

376
00:13:48,560 --> 00:13:51,519
unfortunately in 2018

377
00:13:51,519 --> 00:13:55,120
um spectre was uh was published

378
00:13:55,120 --> 00:13:58,160
and the key idea behind spectre is that

379
00:13:58,160 --> 00:14:00,160
under speculative execution the

380
00:14:00,160 --> 00:14:01,839
invariance of our program or the

381
00:14:01,839 --> 00:14:03,839
conditions that it checks for do not

382
00:14:03,839 --> 00:14:05,440
necessarily hold

383
00:14:05,440 --> 00:14:07,760
so for example

384
00:14:07,760 --> 00:14:10,800
here is um the uh the classic specter

385
00:14:10,800 --> 00:14:13,839
gadget for respective variant one

386
00:14:13,839 --> 00:14:16,480
um all it is is it's a function that

387
00:14:16,480 --> 00:14:18,880
indexes into an array and it's bounds

388
00:14:18,880 --> 00:14:20,800
checked so it won't index into the array

389
00:14:20,800 --> 00:14:22,800
unless it's inside of the uh the length

390
00:14:22,800 --> 00:14:24,240
of the array

391
00:14:24,240 --> 00:14:26,320
once it does the index we call this leak

392
00:14:26,320 --> 00:14:27,839
function and this leak function just

393
00:14:27,839 --> 00:14:29,920
abstracts over the side channel leakage

394
00:14:29,920 --> 00:14:31,199
that we want to use it could have been

395
00:14:31,199 --> 00:14:32,399
one of the three that we discussed

396
00:14:32,399 --> 00:14:35,120
earlier or or something else it doesn't

397
00:14:35,120 --> 00:14:37,600
particularly matter for our um uh our

398
00:14:37,600 --> 00:14:39,519
case it's just that we leaked the value

399
00:14:39,519 --> 00:14:42,000
somehow

400
00:14:42,480 --> 00:14:44,000
now

401
00:14:44,000 --> 00:14:46,959
the key idea behind spectre

402
00:14:46,959 --> 00:14:49,519
is that this body can be executed even

403
00:14:49,519 --> 00:14:51,519
if the condition is false

404
00:14:51,519 --> 00:14:53,440
now what this means

405
00:14:53,440 --> 00:14:54,720
is that

406
00:14:54,720 --> 00:14:57,199
this index could actually be larger than

407
00:14:57,199 --> 00:14:58,880
the length of the array and when that

408
00:14:58,880 --> 00:15:00,000
happens

409
00:15:00,000 --> 00:15:02,720
this array index is now out of bounds

410
00:15:02,720 --> 00:15:04,639
and we're not just loading some public

411
00:15:04,639 --> 00:15:06,240
value we could load any value any

412
00:15:06,240 --> 00:15:08,320
arbitrary value of our program in

413
00:15:08,320 --> 00:15:10,959
particular we could access some secret

414
00:15:10,959 --> 00:15:13,760
value and um and load it now what's

415
00:15:13,760 --> 00:15:15,040
worse

416
00:15:15,040 --> 00:15:16,880
is the value that we're loading we have

417
00:15:16,880 --> 00:15:19,120
asserted to the type system that this is

418
00:15:19,120 --> 00:15:21,360
public and we're allowed to leak it so

419
00:15:21,360 --> 00:15:23,440
what can happen is we load a secret

420
00:15:23,440 --> 00:15:25,120
value speculatively

421
00:15:25,120 --> 00:15:26,560
and then we leak it out through some

422
00:15:26,560 --> 00:15:28,560
side channel now of course the processor

423
00:15:28,560 --> 00:15:30,720
will at some time detect that this

424
00:15:30,720 --> 00:15:33,279
condition is actually false and kill the

425
00:15:33,279 --> 00:15:36,240
specular of execution but we've already

426
00:15:36,240 --> 00:15:39,440
leaked the value and it's too late

427
00:15:39,440 --> 00:15:40,480
so

428
00:15:40,480 --> 00:15:42,959
if we look back at our um our diagram we

429
00:15:42,959 --> 00:15:45,519
now have a second way in which

430
00:15:45,519 --> 00:15:47,519
values can leak

431
00:15:47,519 --> 00:15:48,800
sorry secret values can link to the

432
00:15:48,800 --> 00:15:50,079
outside world

433
00:15:50,079 --> 00:15:52,160
so this happens when spectra is used to

434
00:15:52,160 --> 00:15:54,959
smuggle a secretly typed value

435
00:15:54,959 --> 00:15:57,680
and then link it into the public domain

436
00:15:57,680 --> 00:15:59,440
now fortunately

437
00:15:59,440 --> 00:16:01,040
there are mitigations for spectre and

438
00:16:01,040 --> 00:16:03,279
for variant spectre variant one there's

439
00:16:03,279 --> 00:16:04,880
a mitigation called

440
00:16:04,880 --> 00:16:07,040
speculative load hardening now the way

441
00:16:07,040 --> 00:16:08,959
this works

442
00:16:08,959 --> 00:16:11,920
oops sorry the way this works is that

443
00:16:11,920 --> 00:16:14,560
um we instrument the uh the com the

444
00:16:14,560 --> 00:16:16,560
program with the compiler to detect

445
00:16:16,560 --> 00:16:19,279
misspeculation and if any misspeculation

446
00:16:19,279 --> 00:16:21,440
is detected we then poison all

447
00:16:21,440 --> 00:16:22,959
additional loads

448
00:16:22,959 --> 00:16:25,600
so let's look at how this looks with a

449
00:16:25,600 --> 00:16:27,360
spectre gadget

450
00:16:27,360 --> 00:16:29,759
we apply all of the um the masking from

451
00:16:29,759 --> 00:16:30,800
slh

452
00:16:30,800 --> 00:16:32,399
and there's two main things that we care

453
00:16:32,399 --> 00:16:35,680
about the first is the second green line

454
00:16:35,680 --> 00:16:38,240
here and what that does is it maintains

455
00:16:38,240 --> 00:16:40,560
the mask variable for each condition in

456
00:16:40,560 --> 00:16:43,279
our program we recompute the condition

457
00:16:43,279 --> 00:16:45,360
using a special instruction that cannot

458
00:16:45,360 --> 00:16:47,759
be speculatively executed so for intel

459
00:16:47,759 --> 00:16:50,560
machines this looks like a c move

460
00:16:50,560 --> 00:16:51,839
for other architectures that may be

461
00:16:51,839 --> 00:16:53,600
different

462
00:16:53,600 --> 00:16:55,360
the second thing that's very important

463
00:16:55,360 --> 00:16:58,959
is that any access to memory we apply

464
00:16:58,959 --> 00:17:00,880
this masking operation and the way this

465
00:17:00,880 --> 00:17:02,639
works is we just do a bit wise or with

466
00:17:02,639 --> 00:17:03,839
the mask

467
00:17:03,839 --> 00:17:07,280
now in the case that the index is within

468
00:17:07,280 --> 00:17:08,880
the length of the array that is that the

469
00:17:08,880 --> 00:17:10,720
body has been speculatively executed

470
00:17:10,720 --> 00:17:12,160
correctly

471
00:17:12,160 --> 00:17:14,720
then the mask is simply zero and the

472
00:17:14,720 --> 00:17:16,839
masking off the masking operation does

473
00:17:16,839 --> 00:17:20,240
nothing however in the case that the

474
00:17:20,240 --> 00:17:22,079
body is executed and the condition is

475
00:17:22,079 --> 00:17:23,520
actually false

476
00:17:23,520 --> 00:17:26,079
mask gets set to negative one and now

477
00:17:26,079 --> 00:17:28,400
any time we perform a memory access we

478
00:17:28,400 --> 00:17:30,240
poison that value and set it to negative

479
00:17:30,240 --> 00:17:32,720
one as well now how does this look in

480
00:17:32,720 --> 00:17:35,039
our diagram

481
00:17:35,039 --> 00:17:37,360
what happens is anytime we try to use a

482
00:17:37,360 --> 00:17:39,760
spec a spectre attack to smuggle a

483
00:17:39,760 --> 00:17:43,039
secret type out to the public domain

484
00:17:43,039 --> 00:17:44,240
slh

485
00:17:44,240 --> 00:17:47,280
poisons that value in effect it cuts off

486
00:17:47,280 --> 00:17:49,840
the flow of secret types to the outside

487
00:17:49,840 --> 00:17:52,159
world

488
00:17:53,360 --> 00:17:54,640
so

489
00:17:54,640 --> 00:17:57,840
um a lot of workers currently looked at

490
00:17:57,840 --> 00:18:00,640
how speculative execution interacts with

491
00:18:00,640 --> 00:18:02,960
um with secret values

492
00:18:02,960 --> 00:18:06,160
but there's still a pathway for secret

493
00:18:06,160 --> 00:18:08,000
types to reach the outside world through

494
00:18:08,000 --> 00:18:09,760
this declassification

495
00:18:09,760 --> 00:18:12,000
and to the best of our knowledge

496
00:18:12,000 --> 00:18:13,559
no work has looked at how

497
00:18:13,559 --> 00:18:16,559
declassification interacts with regular

498
00:18:16,559 --> 00:18:18,799
interacts with speculative execution and

499
00:18:18,799 --> 00:18:21,840
we aim to fill that gap

500
00:18:22,000 --> 00:18:25,360
so back to our um our mock cipher

501
00:18:25,360 --> 00:18:27,280
let's consider what happens if this

502
00:18:27,280 --> 00:18:29,760
particular loop is predicted not to be

503
00:18:29,760 --> 00:18:32,480
taken that is that we predict it will be

504
00:18:32,480 --> 00:18:33,280
taken

505
00:18:33,280 --> 00:18:34,880
sorry that is that

506
00:18:34,880 --> 00:18:36,640
the processor predicts that we skip this

507
00:18:36,640 --> 00:18:38,400
loop entirely

508
00:18:38,400 --> 00:18:40,640
what happens here is that we skip the

509
00:18:40,640 --> 00:18:42,400
encryption itself

510
00:18:42,400 --> 00:18:45,120
and now our declassification rather than

511
00:18:45,120 --> 00:18:47,360
rather than declassifying the um the

512
00:18:47,360 --> 00:18:49,840
cipher text declassifies the unencrypted

513
00:18:49,840 --> 00:18:52,000
message

514
00:18:52,000 --> 00:18:54,559
and because we've now asserted that it's

515
00:18:54,559 --> 00:18:56,400
safe and public

516
00:18:56,400 --> 00:18:59,600
we can link this to charlie

517
00:18:59,840 --> 00:19:03,039
so if we look back at our diagram we see

518
00:19:03,039 --> 00:19:06,320
that there is now a pathway through the

519
00:19:06,320 --> 00:19:08,480
three speculative declassification and

520
00:19:08,480 --> 00:19:10,000
because speculative declassification

521
00:19:10,000 --> 00:19:11,679
happens at the time the developer did

522
00:19:11,679 --> 00:19:14,320
not intend

523
00:19:14,320 --> 00:19:16,960
um it could i sorry it violates the

524
00:19:16,960 --> 00:19:19,280
security uh the security intent of the

525
00:19:19,280 --> 00:19:21,520
developer and in particular we could

526
00:19:21,520 --> 00:19:23,679
declassify a value that may still be

527
00:19:23,679 --> 00:19:26,160
secret

528
00:19:26,480 --> 00:19:28,559
so let's look at a real world example

529
00:19:28,559 --> 00:19:31,840
so this is a implementation of aes

530
00:19:31,840 --> 00:19:33,600
and aes has

531
00:19:33,600 --> 00:19:36,240
security parameters that allow you to

532
00:19:36,240 --> 00:19:37,919
modify the number of rounds that are

533
00:19:37,919 --> 00:19:39,440
that are performed

534
00:19:39,440 --> 00:19:41,520
and we use a branch here to support

535
00:19:41,520 --> 00:19:43,440
multiple um uh multiple security

536
00:19:43,440 --> 00:19:45,360
parameters at once

537
00:19:45,360 --> 00:19:48,400
so just like the previous uh example

538
00:19:48,400 --> 00:19:49,200
we

539
00:19:49,200 --> 00:19:50,640
um

540
00:19:50,640 --> 00:19:52,640
we can predict that this branch is not

541
00:19:52,640 --> 00:19:53,520
taken

542
00:19:53,520 --> 00:19:55,520
and skip applying additional rounds of

543
00:19:55,520 --> 00:19:56,960
encryption

544
00:19:56,960 --> 00:19:59,280
so now this declassification

545
00:19:59,280 --> 00:20:02,159
can declassify an incorrectly encrypted

546
00:20:02,159 --> 00:20:05,039
cipher text and what we show

547
00:20:05,039 --> 00:20:06,960
and this can also be linked to charlie

548
00:20:06,960 --> 00:20:08,159
and what we show

549
00:20:08,159 --> 00:20:09,600
is that

550
00:20:09,600 --> 00:20:11,120
if you get the incorrectly encrypted

551
00:20:11,120 --> 00:20:13,120
ciphertext and the correctly encrypted

552
00:20:13,120 --> 00:20:15,200
ciphertext it is possible to recover the

553
00:20:15,200 --> 00:20:17,440
key

554
00:20:17,600 --> 00:20:20,559
so how do we fix this what we do is we

555
00:20:20,559 --> 00:20:22,159
insert a speculation fence into the

556
00:20:22,159 --> 00:20:24,080
declassification

557
00:20:24,080 --> 00:20:27,120
so what is it a speculation fence it's a

558
00:20:27,120 --> 00:20:29,520
special instruction that ensures that

559
00:20:29,520 --> 00:20:31,520
earlier instructions need to execute

560
00:20:31,520 --> 00:20:33,840
correctly before later instructions

561
00:20:33,840 --> 00:20:36,240
execute or in other words

562
00:20:36,240 --> 00:20:38,880
if we try to leak the ciphertext those

563
00:20:38,880 --> 00:20:41,039
instructions cannot execute until

564
00:20:41,039 --> 00:20:43,120
everything before it successfully

565
00:20:43,120 --> 00:20:45,280
executes

566
00:20:45,280 --> 00:20:48,320
so if we look back at our diagram we

567
00:20:48,320 --> 00:20:50,559
still have a flow of secret values to

568
00:20:50,559 --> 00:20:52,320
the outside world

569
00:20:52,320 --> 00:20:54,159
but it must pass through our fence

570
00:20:54,159 --> 00:20:56,880
declassifier and because of the way

571
00:20:56,880 --> 00:21:00,400
sorry because of the semantics of a

572
00:21:00,400 --> 00:21:02,640
of a speculative fence

573
00:21:02,640 --> 00:21:05,200
this can only happen when the developer

574
00:21:05,200 --> 00:21:06,559
intended it to

575
00:21:06,559 --> 00:21:10,080
and therefore it's safe

576
00:21:11,039 --> 00:21:14,080
so we implement um density classifier

577
00:21:14,080 --> 00:21:17,440
and compare it to uh to slh so slh here

578
00:21:17,440 --> 00:21:20,080
is in light blue and fence declassifier

579
00:21:20,080 --> 00:21:23,039
is in dark blue sorry slh plus fenster

580
00:21:23,039 --> 00:21:25,440
classifies in dark blue and we implement

581
00:21:25,440 --> 00:21:26,720
this for a series of encryption

582
00:21:26,720 --> 00:21:28,400
algorithms what we see is that the

583
00:21:28,400 --> 00:21:31,679
performance impact is negligible

584
00:21:31,679 --> 00:21:34,080
as an additional contribution we look at

585
00:21:34,080 --> 00:21:36,240
optimizing slh itself

586
00:21:36,240 --> 00:21:38,240
and what we do is we take advantage of

587
00:21:38,240 --> 00:21:40,799
advantage of the security type system

588
00:21:40,799 --> 00:21:41,520
to

589
00:21:41,520 --> 00:21:43,840
try to minimize the number of masking

590
00:21:43,840 --> 00:21:45,039
operations and we'll look at how that

591
00:21:45,039 --> 00:21:46,720
works right now

592
00:21:46,720 --> 00:21:48,880
so here we have our spectre gadget just

593
00:21:48,880 --> 00:21:50,080
as before

594
00:21:50,080 --> 00:21:53,439
and we apply our masking

595
00:21:53,760 --> 00:21:55,280
now let's consider what happens if the

596
00:21:55,280 --> 00:21:58,880
value that we are loading into is secret

597
00:21:58,880 --> 00:22:01,679
this particular leak cannot exist and

598
00:22:01,679 --> 00:22:03,760
the reason why is because our security

599
00:22:03,760 --> 00:22:05,919
type system guarantees that anything we

600
00:22:05,919 --> 00:22:08,640
mark as secret cannot lead to a leak it

601
00:22:08,640 --> 00:22:10,480
can go through a declassifier but it can

602
00:22:10,480 --> 00:22:13,120
never go to a leak

603
00:22:13,120 --> 00:22:15,120
what this means is that if we

604
00:22:15,120 --> 00:22:17,600
speculatively perform this array index

605
00:22:17,600 --> 00:22:19,600
and it happens to be out of bounds

606
00:22:19,600 --> 00:22:21,360
we don't particularly care it doesn't

607
00:22:21,360 --> 00:22:22,960
matter if this is the right value or the

608
00:22:22,960 --> 00:22:25,840
wrong value it still can never leak and

609
00:22:25,840 --> 00:22:27,120
because of this

610
00:22:27,120 --> 00:22:28,720
we don't need to actually perform the

611
00:22:28,720 --> 00:22:31,120
mask

612
00:22:31,360 --> 00:22:34,159
so when we apply

613
00:22:34,159 --> 00:22:38,159
um when we apply selective slh to

614
00:22:38,159 --> 00:22:40,080
the two encryption algorithms we see

615
00:22:40,080 --> 00:22:41,919
that as many as 95

616
00:22:41,919 --> 00:22:45,600
of masking operations can be removed

617
00:22:45,600 --> 00:22:48,000
um so to summarize this talk

618
00:22:48,000 --> 00:22:50,640
um speculative declassification violates

619
00:22:50,640 --> 00:22:54,960
the security and tension of developers

620
00:22:54,960 --> 00:22:56,880
we show that it's a problem with a

621
00:22:56,880 --> 00:22:59,200
real-world implementation of aes

622
00:22:59,200 --> 00:23:00,480
and then we mitigate the problem with

623
00:23:00,480 --> 00:23:02,320
fenced classification and we show that

624
00:23:02,320 --> 00:23:05,120
the mitigation has negligible impact

625
00:23:05,120 --> 00:23:07,520
to performance and then finally we show

626
00:23:07,520 --> 00:23:10,320
that we can optimize slh

627
00:23:10,320 --> 00:23:12,400
by taking advantage of the security type

628
00:23:12,400 --> 00:23:15,120
system to reduce the number of masking

629
00:23:15,120 --> 00:23:17,360
operations that are required um so thank

630
00:23:17,360 --> 00:23:19,600
you for listening to my presentation and

631
00:23:19,600 --> 00:23:23,240
i'm happy to take questions

632
00:23:30,640 --> 00:23:32,400
thanks for the talk

633
00:23:32,400 --> 00:23:35,280
does this work yes i just would like to

634
00:23:35,280 --> 00:23:37,200
explain how this works so please if you

635
00:23:37,200 --> 00:23:39,039
have a question if you could come to the

636
00:23:39,039 --> 00:23:41,520
mic there is that okay yes please sorry

637
00:23:41,520 --> 00:23:43,039
i should have said before and people

638
00:23:43,039 --> 00:23:45,120
could have been there already

639
00:23:45,120 --> 00:23:47,279
but

640
00:23:47,679 --> 00:23:50,559
watson's silence um what what happens

641
00:23:50,559 --> 00:23:54,720
when value speculation uh is introduced

642
00:23:54,720 --> 00:23:57,200
so what was that when value speculation

643
00:23:57,200 --> 00:23:58,480
is introduced

644
00:23:58,480 --> 00:24:00,799
um

645
00:24:01,520 --> 00:24:02,960
it's not something that we've looked at

646
00:24:02,960 --> 00:24:05,120
in this uh in this work uh

647
00:24:05,120 --> 00:24:08,719
it'd be very interesting for future work

648
00:24:11,200 --> 00:24:14,320
hello thank you for your talk okay i was

649
00:24:14,320 --> 00:24:15,600
wondering

650
00:24:15,600 --> 00:24:18,480
the the classify does a lot of heavy

651
00:24:18,480 --> 00:24:20,240
lifting here

652
00:24:20,240 --> 00:24:21,120
and

653
00:24:21,120 --> 00:24:22,960
in particular in the case where the

654
00:24:22,960 --> 00:24:25,120
security of the classifier would depend

655
00:24:25,120 --> 00:24:26,000
on

656
00:24:26,000 --> 00:24:29,679
some higher level property like

657
00:24:29,679 --> 00:24:32,480
announce never being used twice

658
00:24:32,480 --> 00:24:35,120
one the classify could be secure

659
00:24:35,120 --> 00:24:37,440
well another classify

660
00:24:37,440 --> 00:24:41,039
could not be secure and i don't think

661
00:24:41,039 --> 00:24:42,880
this binary

662
00:24:42,880 --> 00:24:45,120
type system can capture this notion

663
00:24:45,120 --> 00:24:48,559
right um so

664
00:24:48,559 --> 00:24:50,720
tentatively i would say i agree but

665
00:24:50,720 --> 00:24:53,679
that's not my area uh where's sanjay

666
00:24:53,679 --> 00:24:55,120
um

667
00:24:55,120 --> 00:24:56,960
oh he's right at the back there he's the

668
00:24:56,960 --> 00:24:58,640
person to talk to he does a lot of the

669
00:24:58,640 --> 00:25:01,039
formalization of of the

670
00:25:01,039 --> 00:25:02,640
security type system he'd be the one to

671
00:25:02,640 --> 00:25:04,880
talk to about this okay because i was

672
00:25:04,880 --> 00:25:08,080
wondering what happens if

673
00:25:08,640 --> 00:25:12,000
speculatively i managed to execute

674
00:25:12,000 --> 00:25:15,200
something like cha-cha but using the

675
00:25:15,200 --> 00:25:17,200
same noise

676
00:25:17,200 --> 00:25:18,080
and then

677
00:25:18,080 --> 00:25:21,120
even if your type system proves this

678
00:25:21,120 --> 00:25:24,480
operation secure it actually isn't

679
00:25:24,480 --> 00:25:26,640
um i think in that case uh what you

680
00:25:26,640 --> 00:25:29,039
would find is that the um defense

681
00:25:29,039 --> 00:25:30,880
declassifier would make sure that you

682
00:25:30,880 --> 00:25:33,520
can't misspeculate a

683
00:25:33,520 --> 00:25:35,200
uh an encryption of cha-cha 20 with the

684
00:25:35,200 --> 00:25:36,960
same nonce so you would have to do this

685
00:25:36,960 --> 00:25:39,600
architecturally and i believe that's the

686
00:25:39,600 --> 00:25:40,960
that you start getting into the area

687
00:25:40,960 --> 00:25:42,720
where our security type system just

688
00:25:42,720 --> 00:25:46,080
makes no statement whatsoever okay i see

689
00:25:46,080 --> 00:25:48,640
thank you no worries

690
00:25:48,640 --> 00:25:52,400
thank you do we have another question

691
00:25:52,400 --> 00:25:55,120
yes so you showed us a case where an

692
00:25:55,120 --> 00:25:56,559
out-of-bounds array read would

693
00:25:56,559 --> 00:25:58,320
incorrectly leak a secret value into a

694
00:25:58,320 --> 00:25:59,919
public variable

695
00:25:59,919 --> 00:26:01,039
so

696
00:26:01,039 --> 00:26:02,480
is public denser secretness is it a

697
00:26:02,480 --> 00:26:04,159
property of a variable binding or is it

698
00:26:04,159 --> 00:26:06,080
a property of like a region of memory

699
00:26:06,080 --> 00:26:06,960
and

700
00:26:06,960 --> 00:26:09,360
oh sorry sorry caught you all i guess

701
00:26:09,360 --> 00:26:10,720
you know with that in mind then is data

702
00:26:10,720 --> 00:26:13,039
considered secret by default

703
00:26:13,039 --> 00:26:15,279
um so it's a property of the variable

704
00:26:15,279 --> 00:26:17,840
branding itself and in the language that

705
00:26:17,840 --> 00:26:20,000
we use which is fact um you're required

706
00:26:20,000 --> 00:26:22,240
to uh to market secret or public you

707
00:26:22,240 --> 00:26:23,919
can't there is no default as far as i'm

708
00:26:23,919 --> 00:26:25,279
aware

709
00:26:25,279 --> 00:26:27,919
okay uh last sort of question uh

710
00:26:27,919 --> 00:26:29,120
does this relate at all to the problem

711
00:26:29,120 --> 00:26:31,120
of pointer provenance that uh compiler

712
00:26:31,120 --> 00:26:35,039
folks are looking into um

713
00:26:35,039 --> 00:26:36,880
i'm not sure sorry

714
00:26:36,880 --> 00:26:39,840
thank you

715
00:26:40,400 --> 00:26:43,200
uh hello my name is armando so another

716
00:26:43,200 --> 00:26:45,840
question that i have is that fence code

717
00:26:45,840 --> 00:26:47,840
is a well-known technique but how did

718
00:26:47,840 --> 00:26:49,919
you ensure that the fans actually

719
00:26:49,919 --> 00:26:53,200
executed the the the instructions that

720
00:26:53,200 --> 00:26:56,480
the program actually is issuing

721
00:26:56,480 --> 00:26:58,559
sir can you repeat the question

722
00:26:58,559 --> 00:27:01,520
when you use defense code

723
00:27:01,520 --> 00:27:02,880
how do you make sure that the

724
00:27:02,880 --> 00:27:05,600
instructions that were privately

725
00:27:05,600 --> 00:27:07,919
issued by the by the programmer are

726
00:27:07,919 --> 00:27:09,520
actually executed

727
00:27:09,520 --> 00:27:11,600
uh so you're saying um i don't know if i

728
00:27:11,600 --> 00:27:13,520
have slides okay um so you're saying

729
00:27:13,520 --> 00:27:16,240
that uh

730
00:27:16,240 --> 00:27:17,840
how do we make sure that instructions

731
00:27:17,840 --> 00:27:19,679
before the fence are actually correctly

732
00:27:19,679 --> 00:27:22,240
executed right um so what we do is we

733
00:27:22,240 --> 00:27:23,520
use some sort of

734
00:27:23,520 --> 00:27:26,000
specular defense so for intel it's an

735
00:27:26,000 --> 00:27:27,440
elephant's instruction

736
00:27:27,440 --> 00:27:29,200
and the semantics of that instruction

737
00:27:29,200 --> 00:27:30,720
are that the

738
00:27:30,720 --> 00:27:33,120
instructions before it needed to be

739
00:27:33,120 --> 00:27:35,520
completely executed before instructions

740
00:27:35,520 --> 00:27:37,200
after it can be executed yeah yeah but

741
00:27:37,200 --> 00:27:39,600
it is someone tampers the programs and

742
00:27:39,600 --> 00:27:41,279
so you are not sure that the

743
00:27:41,279 --> 00:27:43,440
instructions that were under you on the

744
00:27:43,440 --> 00:27:46,080
original program are actually executed

745
00:27:46,080 --> 00:27:47,600
oh so you're saying under under the

746
00:27:47,600 --> 00:27:49,600
effect of somebody tampering the program

747
00:27:49,600 --> 00:27:52,559
right um

748
00:27:52,559 --> 00:27:54,880
uh i think that's a conversation for uh

749
00:27:54,880 --> 00:27:59,039
to take offline okay thank you awesome

750
00:27:59,600 --> 00:28:00,799
um

751
00:28:00,799 --> 00:28:02,240
so i've uh

752
00:28:02,240 --> 00:28:04,480
i feel like there's been a lot of work

753
00:28:04,480 --> 00:28:06,240
on pain tracking and like just

754
00:28:06,240 --> 00:28:07,679
propagating

755
00:28:07,679 --> 00:28:09,919
this sort of state do you feel like this

756
00:28:09,919 --> 00:28:11,279
would

757
00:28:11,279 --> 00:28:13,520
this is kind of like a cat and mouse

758
00:28:13,520 --> 00:28:15,360
chase where like it's like

759
00:28:15,360 --> 00:28:17,360
there's a new speculative execution

760
00:28:17,360 --> 00:28:19,360
attack that comes out you do something

761
00:28:19,360 --> 00:28:20,480
there's like

762
00:28:20,480 --> 00:28:22,000
um

763
00:28:22,000 --> 00:28:23,679
would you say that this would be like a

764
00:28:23,679 --> 00:28:25,600
problem that's better suited to like the

765
00:28:25,600 --> 00:28:26,880
hardware

766
00:28:26,880 --> 00:28:28,799
level where like you have like you know

767
00:28:28,799 --> 00:28:31,440
secret data and like not secret data and

768
00:28:31,440 --> 00:28:32,799
then like

769
00:28:32,799 --> 00:28:34,320
you kind of uh

770
00:28:34,320 --> 00:28:35,200
yeah

771
00:28:35,200 --> 00:28:37,039
go from there instead of just like you

772
00:28:37,039 --> 00:28:38,640
know so you'll build something and then

773
00:28:38,640 --> 00:28:40,559
like there might be like a new

774
00:28:40,559 --> 00:28:42,799
intel change or whatever and like it's

775
00:28:42,799 --> 00:28:44,480
kind of gone

776
00:28:44,480 --> 00:28:46,000
um

777
00:28:46,000 --> 00:28:49,039
oh oh boy uh

778
00:28:49,039 --> 00:28:50,880
so

779
00:28:50,880 --> 00:28:53,360
uh i think the best way to answer that

780
00:28:53,360 --> 00:28:55,520
is that um that's sort of like

781
00:28:55,520 --> 00:28:58,159
cooperation with um with the hardware

782
00:28:58,159 --> 00:29:00,799
vendors is like the topic of entire

783
00:29:00,799 --> 00:29:02,240
presentations and possibly entire

784
00:29:02,240 --> 00:29:04,399
conferences it's it's a lot of

785
00:29:04,399 --> 00:29:07,279
um a lot of stuff in there to unpack

786
00:29:07,279 --> 00:29:08,320
um

787
00:29:08,320 --> 00:29:10,240
i'm sorry that it's kind of like a

788
00:29:10,240 --> 00:29:13,799
unfulfilling answer

789
00:29:16,159 --> 00:29:19,600
okay thank you um i i see a question in

790
00:29:19,600 --> 00:29:21,440
zulip but maybe you can take it uh

791
00:29:21,440 --> 00:29:23,600
offline afterwards i think we should

792
00:29:23,600 --> 00:29:26,399
move on to the second talk thanks mr

793
00:29:26,399 --> 00:29:29,760
speaker again thank you

794
00:29:35,000 --> 00:29:36,720
[Applause]

795
00:29:36,720 --> 00:29:41,039
okay our next speaker is yang

796
00:29:41,440 --> 00:29:43,679
that's another talk authored by a number

797
00:29:43,679 --> 00:29:45,440
of people um

798
00:29:45,440 --> 00:29:47,600
and we will find out what cryptographic

799
00:29:47,600 --> 00:29:49,520
library developers think about timing

800
00:29:49,520 --> 00:29:52,080
attacks and it appears they are not that

801
00:29:52,080 --> 00:29:53,679
hard to mitigate

802
00:29:53,679 --> 00:29:55,600
young the floor is yours

803
00:29:55,600 --> 00:29:57,039
thank you leila

804
00:29:57,039 --> 00:29:59,360
um all right so my name is jan hi

805
00:29:59,360 --> 00:30:00,320
everyone

806
00:30:00,320 --> 00:30:01,600
and i'm presenting work done in

807
00:30:01,600 --> 00:30:03,440
cooperation with all of these uh great

808
00:30:03,440 --> 00:30:05,840
people so some are from maxwell

809
00:30:05,840 --> 00:30:07,760
institute for security and privacy some

810
00:30:07,760 --> 00:30:09,520
are from erisa and some are from george

811
00:30:09,520 --> 00:30:11,600
washington university and i'm from the

812
00:30:11,600 --> 00:30:13,360
center for research on cryptography and

813
00:30:13,360 --> 00:30:15,200
security from massage university in

814
00:30:15,200 --> 00:30:17,440
czech republic and this is work on what

815
00:30:17,440 --> 00:30:19,360
cryptographic library developers think

816
00:30:19,360 --> 00:30:21,360
about timing attacks but before i begin

817
00:30:21,360 --> 00:30:22,799
if you want to check out the full paper

818
00:30:22,799 --> 00:30:26,559
there's a qr code there but also a link

819
00:30:26,559 --> 00:30:27,279
so

820
00:30:27,279 --> 00:30:30,159
uh timing attacks does this work no this

821
00:30:30,159 --> 00:30:32,399
doesn't work does this work this works

822
00:30:32,399 --> 00:30:34,320
um so timing attacks they have been

823
00:30:34,320 --> 00:30:35,440
around for a while they are now more

824
00:30:35,440 --> 00:30:37,760
than 25 years old introduced in this

825
00:30:37,760 --> 00:30:40,480
1996 paper and the way they work is they

826
00:30:40,480 --> 00:30:42,559
abuse timing leaks so as was really

827
00:30:42,559 --> 00:30:44,880
nicely explained by the previous talk

828
00:30:44,880 --> 00:30:46,399
they have used that the duration of an

829
00:30:46,399 --> 00:30:48,240
operation depends on some secrets

830
00:30:48,240 --> 00:30:50,559
somewhere and that the duration leaks on

831
00:30:50,559 --> 00:30:52,080
secret information

832
00:30:52,080 --> 00:30:54,080
now why this happens is mostly due to

833
00:30:54,080 --> 00:30:56,159
branches or memory accesses on secret

834
00:30:56,159 --> 00:30:58,080
derived values there can also be

835
00:30:58,080 --> 00:30:59,760
variable time instructions but those are

836
00:30:59,760 --> 00:31:02,480
sort of a smaller problem usually and

837
00:31:02,480 --> 00:31:04,480
the way the attacker would would get to

838
00:31:04,480 --> 00:31:06,880
to these uh to these leaks is through

839
00:31:06,880 --> 00:31:08,640
like measuring the whole operation so

840
00:31:08,640 --> 00:31:10,399
something like either uh modular

841
00:31:10,399 --> 00:31:13,200
exponentiation in rsa or like uh scalar

842
00:31:13,200 --> 00:31:15,200
multiplication and ecc

843
00:31:15,200 --> 00:31:17,519
or do like a cache attack on on some

844
00:31:17,519 --> 00:31:20,399
some iteration of this and so on uh but

845
00:31:20,399 --> 00:31:22,480
for this talk uh we don't consider

846
00:31:22,480 --> 00:31:24,640
speculative execution at all as it's

847
00:31:24,640 --> 00:31:26,960
it's a whole another beast uh and this

848
00:31:26,960 --> 00:31:29,279
is just like pure uh pure timing attacks

849
00:31:29,279 --> 00:31:31,039
without speculation

850
00:31:31,039 --> 00:31:32,399
now what's interesting for me about

851
00:31:32,399 --> 00:31:34,320
timing attacks is that they are still

852
00:31:34,320 --> 00:31:37,039
around uh so even after these 25 years

853
00:31:37,039 --> 00:31:38,559
just two years ago there were these two

854
00:31:38,559 --> 00:31:41,279
groups of vulnerabilities uh uh minerva

855
00:31:41,279 --> 00:31:44,320
and tpm fell in one was in smart cards

856
00:31:44,320 --> 00:31:46,640
and sort of cryptographic libraries

857
00:31:46,640 --> 00:31:48,799
otherwise in tpm and other secure

858
00:31:48,799 --> 00:31:50,720
hardware and those were really pretty

859
00:31:50,720 --> 00:31:52,640
serious uh serious timing attack

860
00:31:52,640 --> 00:31:54,240
vulnerabilities

861
00:31:54,240 --> 00:31:56,080
there actually are techniques of

862
00:31:56,080 --> 00:31:57,679
avoiding timing attacks again as was

863
00:31:57,679 --> 00:31:59,200
really nicely explained by the previous

864
00:31:59,200 --> 00:32:00,880
talk there's this constant time code

865
00:32:00,880 --> 00:32:02,640
practice where you avoid

866
00:32:02,640 --> 00:32:04,080
these

867
00:32:04,080 --> 00:32:05,519
or you avoid these things that will leak

868
00:32:05,519 --> 00:32:07,120
your secrets so you avoid these branches

869
00:32:07,120 --> 00:32:09,039
and the memory accesses and then you

870
00:32:09,039 --> 00:32:10,880
hope that the compiler doesn't optimize

871
00:32:10,880 --> 00:32:12,559
those away but you don't really just

872
00:32:12,559 --> 00:32:13,679
have to hope

873
00:32:13,679 --> 00:32:15,440
you can also test so there are these

874
00:32:15,440 --> 00:32:17,519
tools for verifying resistance to timing

875
00:32:17,519 --> 00:32:18,640
attacks

876
00:32:18,640 --> 00:32:20,720
for this work we have collected most of

877
00:32:20,720 --> 00:32:22,720
them that like we call it all that we

878
00:32:22,720 --> 00:32:24,799
could find and this was not an easy task

879
00:32:24,799 --> 00:32:26,720
there is no wikipedia list of tools that

880
00:32:26,720 --> 00:32:29,200
can uh that can do this sort of stuff uh

881
00:32:29,200 --> 00:32:31,679
so there is no more than 25 of them um

882
00:32:31,679 --> 00:32:33,519
there are some summers like 10 years old

883
00:32:33,519 --> 00:32:35,360
some are just from last year and they

884
00:32:35,360 --> 00:32:36,960
have very different targets so whether

885
00:32:36,960 --> 00:32:38,640
it's like they work on a source code

886
00:32:38,640 --> 00:32:41,519
level or like a binary level um and they

887
00:32:41,519 --> 00:32:43,279
use very different techniques so there's

888
00:32:43,279 --> 00:32:45,679
like dynamic instrumentation tools that

889
00:32:45,679 --> 00:32:47,519
instrument your your code and then run

890
00:32:47,519 --> 00:32:49,440
it to observe its behavior to test

891
00:32:49,440 --> 00:32:51,279
whether it's constant time or not and

892
00:32:51,279 --> 00:32:52,720
there are also like formal analysis

893
00:32:52,720 --> 00:32:54,960
tools that use that use formal methods

894
00:32:54,960 --> 00:32:57,120
and things like symbolic execution to

895
00:32:57,120 --> 00:32:59,600
argue whether your code is constant time

896
00:32:59,600 --> 00:33:01,519
and due to these these reasons these

897
00:33:01,519 --> 00:33:02,960
different techniques the tools have very

898
00:33:02,960 --> 00:33:04,960
different requirements on your code so

899
00:33:04,960 --> 00:33:06,799
some need stuff like code annotations

900
00:33:06,799 --> 00:33:09,760
like secret uh secret uh types and so on

901
00:33:09,760 --> 00:33:11,679
uh and they give a very different

902
00:33:11,679 --> 00:33:13,519
guarantees so some give only like

903
00:33:13,519 --> 00:33:15,519
statistical guarantees meaning your code

904
00:33:15,519 --> 00:33:17,919
is likely to be constant time but some

905
00:33:17,919 --> 00:33:19,440
gives more sort of more stronger

906
00:33:19,440 --> 00:33:21,679
guarantees that ria's really real code

907
00:33:21,679 --> 00:33:25,120
is really constant time so all in all

908
00:33:25,120 --> 00:33:27,200
like it seems that we know how to avoid

909
00:33:27,200 --> 00:33:29,600
timing attacks right we have uh tools to

910
00:33:29,600 --> 00:33:31,360
to test resistance against timing

911
00:33:31,360 --> 00:33:33,679
attacks so why are timing attacks still

912
00:33:33,679 --> 00:33:34,559
around

913
00:33:34,559 --> 00:33:36,799
uh is it that timing attacks are just

914
00:33:36,799 --> 00:33:38,000
not part of three models of

915
00:33:38,000 --> 00:33:39,919
cryptographic libraries is it that

916
00:33:39,919 --> 00:33:41,519
libraries do not know how to protect

917
00:33:41,519 --> 00:33:42,880
against them

918
00:33:42,880 --> 00:33:44,559
is it that the developers are unaware of

919
00:33:44,559 --> 00:33:47,200
these tools that could help them or why

920
00:33:47,200 --> 00:33:48,799
are the tools uh not being used

921
00:33:48,799 --> 00:33:51,360
effectively right generally so well what

922
00:33:51,360 --> 00:33:53,519
we decided to do let's let's just ask

923
00:33:53,519 --> 00:33:55,440
the developers right they are the ones

924
00:33:55,440 --> 00:33:57,120
that you know answers to these questions

925
00:33:57,120 --> 00:33:58,559
they're the ones that would know the

926
00:33:58,559 --> 00:34:00,240
thread models of their libraries they're

927
00:34:00,240 --> 00:34:01,760
the ones that would know how to how

928
00:34:01,760 --> 00:34:03,600
their libraries try to protect against

929
00:34:03,600 --> 00:34:04,880
timing attacks

930
00:34:04,880 --> 00:34:06,720
and also they are the ones that would

931
00:34:06,720 --> 00:34:08,159
use these tools

932
00:34:08,159 --> 00:34:10,399
they are the ones that would fix timing

933
00:34:10,399 --> 00:34:11,679
timing links

934
00:34:11,679 --> 00:34:13,918
so that's what we did we decided to run

935
00:34:13,918 --> 00:34:16,239
a survey on open source cryptographic

936
00:34:16,239 --> 00:34:18,079
library developers

937
00:34:18,079 --> 00:34:19,520
we focused on the most active

938
00:34:19,520 --> 00:34:21,918
contributors by number of comments and

939
00:34:21,918 --> 00:34:23,760
in the end we invited more than 200

940
00:34:23,760 --> 00:34:26,800
developers from 36 libraries and we got

941
00:34:26,800 --> 00:34:30,079
44 value responses from 27 libraries

942
00:34:30,079 --> 00:34:31,599
so here i would just like to thank all

943
00:34:31,599 --> 00:34:35,040
the all the participants of our research

944
00:34:35,040 --> 00:34:36,800
some of some of you might even be here

945
00:34:36,800 --> 00:34:38,239
in this room which in which case really

946
00:34:38,239 --> 00:34:39,119
thank you

947
00:34:39,119 --> 00:34:41,679
or or remotely

948
00:34:41,679 --> 00:34:43,280
yeah without you this research wouldn't

949
00:34:43,280 --> 00:34:45,440
be possible and also these libraries

950
00:34:45,440 --> 00:34:47,359
wouldn't be as good as they are

951
00:34:47,359 --> 00:34:48,879
and if if you're a cryptographic library

952
00:34:48,879 --> 00:34:51,440
developer and we didn't invite you

953
00:34:51,440 --> 00:34:53,359
i'm sorry we had to stop inviting at

954
00:34:53,359 --> 00:34:55,199
some point

955
00:34:55,199 --> 00:34:57,440
so we have all these popular libraries

956
00:34:57,440 --> 00:34:59,839
that responded to our survey and we also

957
00:34:59,839 --> 00:35:01,440
think that we really got the key

958
00:35:01,440 --> 00:35:03,359
developers we wanted to ask so we got a

959
00:35:03,359 --> 00:35:05,359
lot of core developers maintainers or

960
00:35:05,359 --> 00:35:07,280
commenters so these are the people that

961
00:35:07,280 --> 00:35:09,440
would influence how these libraries sort

962
00:35:09,440 --> 00:35:11,599
of handle timing attacks and and where

963
00:35:11,599 --> 00:35:13,040
they go

964
00:35:13,040 --> 00:35:15,599
so in our survey we first focus on the

965
00:35:15,599 --> 00:35:17,839
participant background so their general

966
00:35:17,839 --> 00:35:19,839
experience in developing cryptographic

967
00:35:19,839 --> 00:35:22,079
code and stuff like that but then we

968
00:35:22,079 --> 00:35:24,079
focused on the library so so the the

969
00:35:24,079 --> 00:35:25,920
developers uh

970
00:35:25,920 --> 00:35:28,079
role in the library as well as how the

971
00:35:28,079 --> 00:35:29,680
library makes design decisions so

972
00:35:29,680 --> 00:35:31,040
whether there's committee or there's

973
00:35:31,040 --> 00:35:33,680
some voting and how these are made

974
00:35:33,680 --> 00:35:35,119
then we focus on the library's thread

975
00:35:35,119 --> 00:35:37,040
model with regards to side channel

976
00:35:37,040 --> 00:35:39,520
attacks and then ask developers about

977
00:35:39,520 --> 00:35:41,280
what timing attack predictions they have

978
00:35:41,280 --> 00:35:42,560
in their library

979
00:35:42,560 --> 00:35:45,359
and how these work and finally we also

980
00:35:45,359 --> 00:35:47,200
ask them about how they test these

981
00:35:47,200 --> 00:35:48,800
timing attack protections and and

982
00:35:48,800 --> 00:35:50,800
whether they actually do that

983
00:35:50,800 --> 00:35:52,640
next we ask them about uh their

984
00:35:52,640 --> 00:35:54,480
awareness of these tools so these 25

985
00:35:54,480 --> 00:35:56,880
tools that i uh presented on a slide

986
00:35:56,880 --> 00:36:00,000
just a few back uh and and whether they

987
00:36:00,000 --> 00:36:01,920
are aware of these tools and and how

988
00:36:01,920 --> 00:36:03,599
they learned about them if they knew

989
00:36:03,599 --> 00:36:05,200
about these tools we'll also ask them

990
00:36:05,200 --> 00:36:06,960
how they if they try to use them and

991
00:36:06,960 --> 00:36:08,720
what are their experiences with those

992
00:36:08,720 --> 00:36:09,839
tools

993
00:36:09,839 --> 00:36:11,440
now as we suspect that quite a lot of

994
00:36:11,440 --> 00:36:14,000
them wouldn't have used any of the tools

995
00:36:14,000 --> 00:36:16,079
uh we also wanted to to get their

996
00:36:16,079 --> 00:36:17,839
opinion on the tools somehow so we

997
00:36:17,839 --> 00:36:20,160
presented them with uh with properties

998
00:36:20,160 --> 00:36:22,160
of these three groups of tools uh so

999
00:36:22,160 --> 00:36:23,839
these are three very distinct groups of

1000
00:36:23,839 --> 00:36:26,240
tools based on based on how they operate

1001
00:36:26,240 --> 00:36:28,240
um these dynamic instrumentation based

1002
00:36:28,240 --> 00:36:30,160
tools statistical runtime tests and

1003
00:36:30,160 --> 00:36:32,079
formal analysis based tools

1004
00:36:32,079 --> 00:36:33,280
and and they have very different

1005
00:36:33,280 --> 00:36:35,599
properties on the the the requirements

1006
00:36:35,599 --> 00:36:38,000
on your codes that they need to run but

1007
00:36:38,000 --> 00:36:39,680
also the guarantees on the results they

1008
00:36:39,680 --> 00:36:40,800
give you

1009
00:36:40,800 --> 00:36:42,960
and then we asked the the participants

1010
00:36:42,960 --> 00:36:44,560
about their likeliness of use of these

1011
00:36:44,560 --> 00:36:47,200
groups of tools and their reasoning

1012
00:36:47,200 --> 00:36:48,640
finally we asked them about their

1013
00:36:48,640 --> 00:36:51,200
general thousand timing attacks and uh

1014
00:36:51,200 --> 00:36:53,040
an opinion on our survey and i must say

1015
00:36:53,040 --> 00:36:54,800
that most liked this sort of research

1016
00:36:54,800 --> 00:36:56,960
and liked our survey so that felt really

1017
00:36:56,960 --> 00:36:58,240
nice

1018
00:36:58,240 --> 00:37:00,640
so what did we find out luckily we find

1019
00:37:00,640 --> 00:37:02,320
out that developers know about timing

1020
00:37:02,320 --> 00:37:04,800
attacks so 100 of our sample knew about

1021
00:37:04,800 --> 00:37:06,720
timing attacks although their opinions

1022
00:37:06,720 --> 00:37:10,000
vary so from this this statement that

1023
00:37:10,000 --> 00:37:11,839
got into the title of our paper is that

1024
00:37:11,839 --> 00:37:14,560
timing tags are not hard to mitigate at

1025
00:37:14,560 --> 00:37:16,400
least using some specific compilers i

1026
00:37:16,400 --> 00:37:17,920
would really like to know what compilers

1027
00:37:17,920 --> 00:37:20,960
those are because uh i i i don't know

1028
00:37:20,960 --> 00:37:22,800
anything that's make this specifically

1029
00:37:22,800 --> 00:37:24,560
easy but so so if this is you please

1030
00:37:24,560 --> 00:37:26,880
like let me know um

1031
00:37:26,880 --> 00:37:28,800
uh but also so the opinions varied from

1032
00:37:28,800 --> 00:37:30,640
from this sort of spectrum and on one

1033
00:37:30,640 --> 00:37:32,320
side there was this strong opinion that

1034
00:37:32,320 --> 00:37:34,320
uh it was totally obvious

1035
00:37:34,320 --> 00:37:36,000
for everybody right from the start that

1036
00:37:36,000 --> 00:37:37,520
protection against timing attacks is

1037
00:37:37,520 --> 00:37:38,720
something that's necessary for

1038
00:37:38,720 --> 00:37:40,480
cryptographic libraries so that's a

1039
00:37:40,480 --> 00:37:42,880
strong opinion on on the necessary

1040
00:37:42,880 --> 00:37:44,880
protections against timing attacks but

1041
00:37:44,880 --> 00:37:46,560
also to this more skeptical that for

1042
00:37:46,560 --> 00:37:48,400
many cases there aren't enough real

1043
00:37:48,400 --> 00:37:51,040
world attacks to justify spending time

1044
00:37:51,040 --> 00:37:53,599
on avoiding timing links and so the last

1045
00:37:53,599 --> 00:37:55,119
last quarter has the world's real world

1046
00:37:55,119 --> 00:37:56,560
in it and i actually wonder what the

1047
00:37:56,560 --> 00:37:58,320
opinion of this real world crypto

1048
00:37:58,320 --> 00:38:00,880
audience is on timing attacks i might

1049
00:38:00,880 --> 00:38:02,720
run a poll during the lightning session

1050
00:38:02,720 --> 00:38:05,040
or something like that um

1051
00:38:05,040 --> 00:38:06,880
but now um even though the opinions

1052
00:38:06,880 --> 00:38:08,640
varied of the individual developers the

1053
00:38:08,640 --> 00:38:10,240
library is mostly considered timing

1054
00:38:10,240 --> 00:38:12,079
attacks in in their framework so they

1055
00:38:12,079 --> 00:38:15,520
included in them 23 libraries did that

1056
00:38:15,520 --> 00:38:17,119
although they often differentiated

1057
00:38:17,119 --> 00:38:19,440
between remotely exploitable and locally

1058
00:38:19,440 --> 00:38:21,680
exploitable attacks although the line

1059
00:38:21,680 --> 00:38:23,920
there there is fuzzy uh some libraries

1060
00:38:23,920 --> 00:38:26,480
out like outright excluded local attacks

1061
00:38:26,480 --> 00:38:29,280
uh out of that trend model but most

1062
00:38:29,280 --> 00:38:31,280
libraries were just sort of giving

1063
00:38:31,280 --> 00:38:33,119
higher priority to to remotely

1064
00:38:33,119 --> 00:38:35,119
exploitable attacks than to locally

1065
00:38:35,119 --> 00:38:36,880
exploitable attacks

1066
00:38:36,880 --> 00:38:39,040
now the the reasoning for uh including

1067
00:38:39,040 --> 00:38:41,040
timing effects in their framework of aid

1068
00:38:41,040 --> 00:38:43,200
uh there was this general uh

1069
00:38:43,200 --> 00:38:44,800
feeling that timing attacks are relevant

1070
00:38:44,800 --> 00:38:47,119
threat for for cryptographic libraries

1071
00:38:47,119 --> 00:38:49,119
uh there was this more specific uh

1072
00:38:49,119 --> 00:38:50,640
statement that

1073
00:38:50,640 --> 00:38:52,960
uh the the fear of loss of reputation as

1074
00:38:52,960 --> 00:38:55,440
the score puts it it's never found to be

1075
00:38:55,440 --> 00:38:57,200
the bag that a new research paper is

1076
00:38:57,200 --> 00:39:00,079
talking about exploiting and i feel like

1077
00:39:00,079 --> 00:39:02,560
yeah it's never fun to read that but

1078
00:39:02,560 --> 00:39:04,480
also most some libraries explain that

1079
00:39:04,480 --> 00:39:06,160
the target environment of the library is

1080
00:39:06,160 --> 00:39:07,920
such that it's just exposed to timing

1081
00:39:07,920 --> 00:39:10,800
attacks and it needs to be protected

1082
00:39:10,800 --> 00:39:12,480
so caring about having attacks is one

1083
00:39:12,480 --> 00:39:14,240
thing but actually claiming resistance

1084
00:39:14,240 --> 00:39:16,400
against them is another and here we see

1085
00:39:16,400 --> 00:39:18,240
that the 13 libraries claimed full

1086
00:39:18,240 --> 00:39:19,920
resistance against timing attacks which

1087
00:39:19,920 --> 00:39:21,359
is a pretty strong statement i'm

1088
00:39:21,359 --> 00:39:24,240
surprised that uh so many were so like

1089
00:39:24,240 --> 00:39:25,280
uh

1090
00:39:25,280 --> 00:39:27,680
strongly opinionated on this and our 10

1091
00:39:27,680 --> 00:39:29,280
libraries claim partial resistance

1092
00:39:29,280 --> 00:39:31,359
against timing attacks and this partial

1093
00:39:31,359 --> 00:39:32,800
resistance can be can be sort of a

1094
00:39:32,800 --> 00:39:34,079
problem from the point of view of the

1095
00:39:34,079 --> 00:39:36,240
user of the library uh if you want to

1096
00:39:36,240 --> 00:39:38,880
use this this library how do you know um

1097
00:39:38,880 --> 00:39:40,880
you're using the constant type part of

1098
00:39:40,880 --> 00:39:42,800
it and not not the leaky non-constant

1099
00:39:42,800 --> 00:39:44,240
type part of it right if it's if it's

1100
00:39:44,240 --> 00:39:46,320
not documented somewhere

1101
00:39:46,320 --> 00:39:48,000
it's really hard to not shoot yourself

1102
00:39:48,000 --> 00:39:50,480
in the foot while using such library and

1103
00:39:50,480 --> 00:39:52,160
some libraries out just outright said

1104
00:39:52,160 --> 00:39:54,320
that they are not constant time

1105
00:39:54,320 --> 00:39:55,839
now the reasoning

1106
00:39:55,839 --> 00:39:57,760
they use various different uh protection

1107
00:39:57,760 --> 00:40:00,400
techniques to avoid timing uh timing

1108
00:40:00,400 --> 00:40:02,400
leaks but mostly there was this constant

1109
00:40:02,400 --> 00:40:04,640
time core practice so as i explained

1110
00:40:04,640 --> 00:40:06,240
avoiding conditional branches and

1111
00:40:06,240 --> 00:40:08,560
lookups and secrets and then hoping the

1112
00:40:08,560 --> 00:40:11,599
compiler doesn't doesn't mess this up

1113
00:40:11,599 --> 00:40:13,119
but also there was this mention of using

1114
00:40:13,119 --> 00:40:14,640
a constant time algorithm so for

1115
00:40:14,640 --> 00:40:16,319
something like a scalar multiplication

1116
00:40:16,319 --> 00:40:18,880
on ecc there are various known regular

1117
00:40:18,880 --> 00:40:20,400
constant time algorithms that you can

1118
00:40:20,400 --> 00:40:22,000
just outright use

1119
00:40:22,000 --> 00:40:23,599
i would just mention one more counter

1120
00:40:23,599 --> 00:40:25,839
measure that day uh then one particular

1121
00:40:25,839 --> 00:40:27,599
library mentioned and that is random

1122
00:40:27,599 --> 00:40:28,640
delays

1123
00:40:28,640 --> 00:40:30,640
so so this library was really only just

1124
00:40:30,640 --> 00:40:32,319
using random delays and i don't think

1125
00:40:32,319 --> 00:40:34,160
that's a really good countermeasure

1126
00:40:34,160 --> 00:40:35,760
so i would invite all of you to try to

1127
00:40:35,760 --> 00:40:37,680
figure out which library that is and

1128
00:40:37,680 --> 00:40:39,200
maybe there are some timing links there

1129
00:40:39,200 --> 00:40:40,240
maybe there are interesting timing

1130
00:40:40,240 --> 00:40:42,079
attacks i don't know i didn't really

1131
00:40:42,079 --> 00:40:44,720
have time to look at that

1132
00:40:44,720 --> 00:40:45,839
but that's that's enough for the

1133
00:40:45,839 --> 00:40:48,000
libraries let's look at the tools

1134
00:40:48,000 --> 00:40:50,240
um so so most developers heard of at

1135
00:40:50,240 --> 00:40:52,240
least at least one tool and these were

1136
00:40:52,240 --> 00:40:54,000
the three most popular tools with ct

1137
00:40:54,000 --> 00:40:56,640
grime city verif and nmem sound so ct

1138
00:40:56,640 --> 00:40:58,720
grind is based on a list of walgreens

1139
00:40:58,720 --> 00:41:01,040
based on this this mem check uh tool in

1140
00:41:01,040 --> 00:41:03,040
bolgram that you can use sort of to

1141
00:41:03,040 --> 00:41:05,839
verify resistance against timing attacks

1142
00:41:05,839 --> 00:41:08,560
uh but but all from all the other tools

1143
00:41:08,560 --> 00:41:10,000
the the rest

1144
00:41:10,000 --> 00:41:14,160
the 22 tools that remain

1145
00:41:14,160 --> 00:41:16,160
those tools were unknown so only like

1146
00:41:16,160 --> 00:41:18,240
only one or zero developers knew about

1147
00:41:18,240 --> 00:41:19,680
those tools

1148
00:41:19,680 --> 00:41:21,839
so it's it's really hard for a tool to

1149
00:41:21,839 --> 00:41:24,480
be used if no one knows about it

1150
00:41:24,480 --> 00:41:26,480
on the other hand the approach of ct

1151
00:41:26,480 --> 00:41:28,800
grind is so simple that some developers

1152
00:41:28,800 --> 00:41:30,319
claim that they independently came up

1153
00:41:30,319 --> 00:41:31,920
with this approach if you have even

1154
00:41:31,920 --> 00:41:34,319
knowing that the tool existed so if you

1155
00:41:34,319 --> 00:41:35,440
want to know more about this approach

1156
00:41:35,440 --> 00:41:37,200
just hit me up i can i can explain it

1157
00:41:37,200 --> 00:41:38,240
later on

1158
00:41:38,240 --> 00:41:39,440
uh but

1159
00:41:39,440 --> 00:41:40,720
only

1160
00:41:40,720 --> 00:41:42,160
even though the developers sort of knew

1161
00:41:42,160 --> 00:41:44,079
about some of these tools only 19 tried

1162
00:41:44,079 --> 00:41:47,520
to use them was explaining that

1163
00:41:47,520 --> 00:41:49,200
they they cannot use them because they

1164
00:41:49,200 --> 00:41:50,240
lack time

1165
00:41:50,240 --> 00:41:52,480
right that that was the the

1166
00:41:52,480 --> 00:41:54,160
the the

1167
00:41:54,160 --> 00:41:55,760
most different given as the reason why

1168
00:41:55,760 --> 00:41:58,240
they cannot use these tools uh also some

1169
00:41:58,240 --> 00:42:00,400
explain that some of the tools are

1170
00:42:00,400 --> 00:42:02,400
unable to ignore known issues so like

1171
00:42:02,400 --> 00:42:03,920
you're trying to analyze code you know

1172
00:42:03,920 --> 00:42:05,760
there is a non-constant time part there

1173
00:42:05,760 --> 00:42:07,359
you want to just ignore that and focus

1174
00:42:07,359 --> 00:42:09,280
on some other part some tools cannot do

1175
00:42:09,280 --> 00:42:10,720
that and it's really a problem you are

1176
00:42:10,720 --> 00:42:12,800
getting too many sort of false positives

1177
00:42:12,800 --> 00:42:15,119
and uh you cannot get clarity out of

1178
00:42:15,119 --> 00:42:17,280
that but also it's hard to use a tool

1179
00:42:17,280 --> 00:42:19,680
that's not available and it's it's hard

1180
00:42:19,680 --> 00:42:21,200
to rely on a tool that's that's not

1181
00:42:21,200 --> 00:42:22,960
maintained so those were the other

1182
00:42:22,960 --> 00:42:25,440
reasons why these tools weren't used

1183
00:42:25,440 --> 00:42:26,640
so

1184
00:42:26,640 --> 00:42:28,800
uh the developers are also sort of

1185
00:42:28,800 --> 00:42:30,720
unlikely outright unlikely to use some

1186
00:42:30,720 --> 00:42:32,400
of these tools so when asked about these

1187
00:42:32,400 --> 00:42:33,920
three groups of tools these form

1188
00:42:33,920 --> 00:42:36,560
analysis statistical and dynamic tools

1189
00:42:36,560 --> 00:42:38,640
uh the developers were unlikely to use

1190
00:42:38,640 --> 00:42:41,119
form analysis tools and this was because

1191
00:42:41,119 --> 00:42:42,800
they were perceived as way too much

1192
00:42:42,800 --> 00:42:44,880
effort so 22 developers claim that these

1193
00:42:44,880 --> 00:42:46,640
are very too much effort and this is

1194
00:42:46,640 --> 00:42:48,480
really nicely summarized by the quote

1195
00:42:48,480 --> 00:42:50,720
that form analysis tools are not really

1196
00:42:50,720 --> 00:42:53,040
usable by mere mortals yet and i've

1197
00:42:53,040 --> 00:42:54,560
tried to use some of these tools i would

1198
00:42:54,560 --> 00:42:57,680
say i would mostly agree

1199
00:42:57,680 --> 00:42:58,960
you really have to know what you're

1200
00:42:58,960 --> 00:43:01,200
doing but yeah i cannot expect that from

1201
00:43:01,200 --> 00:43:02,480
uh

1202
00:43:02,480 --> 00:43:03,760
from people that are not focused on

1203
00:43:03,760 --> 00:43:06,240
formal methods

1204
00:43:06,240 --> 00:43:07,680
now

1205
00:43:07,680 --> 00:43:09,200
from for the dynamic and statistical

1206
00:43:09,200 --> 00:43:11,200
tools the developers feel that there is

1207
00:43:11,200 --> 00:43:12,800
a more acceptable trade-off between the

1208
00:43:12,800 --> 00:43:14,319
effort and the guarantees these tools

1209
00:43:14,319 --> 00:43:16,240
provide but they like the guarantees of

1210
00:43:16,240 --> 00:43:18,319
the dynamic instrumentation tools which

1211
00:43:18,319 --> 00:43:20,160
are a bit bit stronger than the

1212
00:43:20,160 --> 00:43:22,240
statistical ones and and so they would

1213
00:43:22,240 --> 00:43:24,480
like to use those more

1214
00:43:24,480 --> 00:43:26,480
so we identified a sort of leaky

1215
00:43:26,480 --> 00:43:28,720
pipeline of developers trying to to

1216
00:43:28,720 --> 00:43:30,319
mitigate timing attacks using these

1217
00:43:30,319 --> 00:43:33,200
tools with 44 developers entering uh and

1218
00:43:33,200 --> 00:43:36,160
only 17 developers meaningfully using uh

1219
00:43:36,160 --> 00:43:39,040
these tools to like uh uh prevent timing

1220
00:43:39,040 --> 00:43:41,760
leaks in their respective libraries

1221
00:43:41,760 --> 00:43:44,000
so uh what can we do about this what can

1222
00:43:44,000 --> 00:43:45,760
be what can we fix what can we can

1223
00:43:45,760 --> 00:43:47,760
change well the tool developers should

1224
00:43:47,760 --> 00:43:49,839
make their tools more usable um the

1225
00:43:49,839 --> 00:43:51,280
tools need to be available in the first

1226
00:43:51,280 --> 00:43:53,280
place that needs to be documentation be

1227
00:43:53,280 --> 00:43:55,040
easier to install so to make this effort

1228
00:43:55,040 --> 00:43:56,720
for developers easier

1229
00:43:56,720 --> 00:43:58,560
uh and also the tools need to be

1230
00:43:58,560 --> 00:44:00,319
promoted at appropriate venues so

1231
00:44:00,319 --> 00:44:02,240
something like real world crypto is a

1232
00:44:02,240 --> 00:44:04,160
good good place i feel like so i hope

1233
00:44:04,160 --> 00:44:06,319
i'm doing a good job here and also

1234
00:44:06,319 --> 00:44:08,079
crypto developers need to use these

1235
00:44:08,079 --> 00:44:10,400
tools ideally in an automated way in in

1236
00:44:10,400 --> 00:44:12,720
ci or something like that and they need

1237
00:44:12,720 --> 00:44:14,480
to eliminate all timing leaks even if

1238
00:44:14,480 --> 00:44:16,880
these leaks sort of feel not like likely

1239
00:44:16,880 --> 00:44:18,720
to be exploited at the moment they can

1240
00:44:18,720 --> 00:44:20,480
turn to be easily exploitable very

1241
00:44:20,480 --> 00:44:21,359
easily

1242
00:44:21,359 --> 00:44:23,599
and also marking secrets in code is

1243
00:44:23,599 --> 00:44:24,880
really helpful

1244
00:44:24,880 --> 00:44:26,800
because then you can use these tools

1245
00:44:26,800 --> 00:44:28,560
which require this sort of marking very

1246
00:44:28,560 --> 00:44:29,680
easily

1247
00:44:29,680 --> 00:44:30,640
now

1248
00:44:30,640 --> 00:44:32,720
gopala writers also has something to do

1249
00:44:32,720 --> 00:44:34,240
i didn't talk about compilers much

1250
00:44:34,240 --> 00:44:35,920
during the stock but compilers can

1251
00:44:35,920 --> 00:44:38,720
introduce these timing links in in even

1252
00:44:38,720 --> 00:44:41,200
seemingly like constant time code uh

1253
00:44:41,200 --> 00:44:43,359
some compilers should just sort of add

1254
00:44:43,359 --> 00:44:45,280
the support for these secret types as we

1255
00:44:45,280 --> 00:44:47,119
mentioned in law stock and then do not

1256
00:44:47,119 --> 00:44:48,640
introduce timing links based on these

1257
00:44:48,640 --> 00:44:50,960
secret types and also compilers should

1258
00:44:50,960 --> 00:44:53,040
sort of give more control to developers

1259
00:44:53,040 --> 00:44:55,280
to avoid these these timing links and

1260
00:44:55,280 --> 00:44:57,520
finally uh standardization bodies so

1261
00:44:57,520 --> 00:44:59,760
like uh nest in case of nist post

1262
00:44:59,760 --> 00:45:02,560
quantum crypto standardization effort

1263
00:45:02,560 --> 00:45:04,240
should encourage submitters to use these

1264
00:45:04,240 --> 00:45:06,000
tools i mean they're available so so why

1265
00:45:06,000 --> 00:45:08,720
not uh and also we feel like they they

1266
00:45:08,720 --> 00:45:10,560
should require constant time code that

1267
00:45:10,560 --> 00:45:12,400
it should just be the baseline of the

1268
00:45:12,400 --> 00:45:14,400
entry of the code entry to the to the

1269
00:45:14,400 --> 00:45:15,920
standardization effort that it should be

1270
00:45:15,920 --> 00:45:17,599
constant time

1271
00:45:17,599 --> 00:45:18,960
because how can we then expect these

1272
00:45:18,960 --> 00:45:20,480
libraries to be constant time if even

1273
00:45:20,480 --> 00:45:22,000
the sort of the original design

1274
00:45:22,000 --> 00:45:24,160
primitives are not

1275
00:45:24,160 --> 00:45:24,880
so

1276
00:45:24,880 --> 00:45:26,480
we have studied what cryptographic

1277
00:45:26,480 --> 00:45:27,839
library developers think about timing

1278
00:45:27,839 --> 00:45:30,319
effects by by running the survey and we

1279
00:45:30,319 --> 00:45:31,520
sort of found out that they know and

1280
00:45:31,520 --> 00:45:33,599
care about timing attacks but do not do

1281
00:45:33,599 --> 00:45:35,599
not know these tools that are needed for

1282
00:45:35,599 --> 00:45:38,000
for verification of of constant timeless

1283
00:45:38,000 --> 00:45:39,839
they do not use these tools mostly due

1284
00:45:39,839 --> 00:45:42,079
to lack of time and and perceived huge

1285
00:45:42,079 --> 00:45:44,560
effort we identify this leaky pipeline

1286
00:45:44,560 --> 00:45:47,119
that there is of these developers and

1287
00:45:47,119 --> 00:45:49,520
also that there uh really fear the

1288
00:45:49,520 --> 00:45:52,079
effort needed for formal analysis tools

1289
00:45:52,079 --> 00:45:53,680
so that's it for me uh thanks for

1290
00:45:53,680 --> 00:45:54,960
listening and i'm sure you have some

1291
00:45:54,960 --> 00:45:57,960
questions

1292
00:46:05,359 --> 00:46:07,359
okay i'd like to invite people with

1293
00:46:07,359 --> 00:46:09,680
questions to approach the mic

1294
00:46:09,680 --> 00:46:10,880
yes

1295
00:46:10,880 --> 00:46:13,839
hi thanks for the nice talk

1296
00:46:13,839 --> 00:46:16,000
so you mentioned uh and we saw the table

1297
00:46:16,000 --> 00:46:17,359
at the beginning that there are very

1298
00:46:17,359 --> 00:46:19,359
very many tools that

1299
00:46:19,359 --> 00:46:22,079
are used for uh checking costs on time

1300
00:46:22,079 --> 00:46:23,119
but uh

1301
00:46:23,119 --> 00:46:25,520
not much is done on compilers

1302
00:46:25,520 --> 00:46:28,560
to convert sql to the final binary

1303
00:46:28,560 --> 00:46:31,760
without optimization that breaks it

1304
00:46:31,760 --> 00:46:33,599
why do you think this is uh happening

1305
00:46:33,599 --> 00:46:35,280
and uh

1306
00:46:35,280 --> 00:46:38,079
are you aware of any work that is done

1307
00:46:38,079 --> 00:46:40,079
towards this direction

1308
00:46:40,079 --> 00:46:42,800
so yeah thanks for the question um

1309
00:46:42,800 --> 00:46:45,760
there is what okay so there are tools

1310
00:46:45,760 --> 00:46:48,800
that are sort of like compilers um

1311
00:46:48,800 --> 00:46:50,880
that do not introduce timing leaks but

1312
00:46:50,880 --> 00:46:53,119
they usually use their own language so

1313
00:46:53,119 --> 00:46:55,280
there is like the the previous tokyo's

1314
00:46:55,280 --> 00:46:57,920
fact which is like a custom language

1315
00:46:57,920 --> 00:46:59,680
where you have the secret types and then

1316
00:46:59,680 --> 00:47:01,359
you compile it and then it keeps the

1317
00:47:01,359 --> 00:47:02,960
constant timeless and it doesn't break

1318
00:47:02,960 --> 00:47:05,760
stuff so so so there are tools but they

1319
00:47:05,760 --> 00:47:08,079
use they use custom languages

1320
00:47:08,079 --> 00:47:09,599
and

1321
00:47:09,599 --> 00:47:11,680
also developers here there were some

1322
00:47:11,680 --> 00:47:13,920
sentiments that using custom languages

1323
00:47:13,920 --> 00:47:15,440
is something that they don't like

1324
00:47:15,440 --> 00:47:16,880
because they have to integrate it with

1325
00:47:16,880 --> 00:47:19,200
the rest of their c stuff and so that's

1326
00:47:19,200 --> 00:47:20,880
these tools don't don't see that much

1327
00:47:20,880 --> 00:47:22,480
use as well

1328
00:47:22,480 --> 00:47:24,559
and why compilers don't really support

1329
00:47:24,559 --> 00:47:26,240
this um

1330
00:47:26,240 --> 00:47:27,760
i think there's a big divide between

1331
00:47:27,760 --> 00:47:30,559
like compiler writers and like uh

1332
00:47:30,559 --> 00:47:32,559
like crypto side channel people i don't

1333
00:47:32,559 --> 00:47:35,040
think there is much overlap there and uh

1334
00:47:35,040 --> 00:47:37,359
sadly this results in and not supporting

1335
00:47:37,359 --> 00:47:39,760
this stuff

1336
00:47:39,760 --> 00:47:41,920
maybe quickly one question from zulip

1337
00:47:41,920 --> 00:47:43,440
while you get ready

1338
00:47:43,440 --> 00:47:46,640
uh by alexander anzala yamayako

1339
00:47:46,640 --> 00:47:48,480
can you give an estimate on how many of

1340
00:47:48,480 --> 00:47:50,640
the timing attack tools you identified

1341
00:47:50,640 --> 00:47:51,440
were

1342
00:47:51,440 --> 00:47:53,680
first actively maintained and second

1343
00:47:53,680 --> 00:47:55,920
industry ready for some value of

1344
00:47:55,920 --> 00:47:58,319
industry

1345
00:47:58,880 --> 00:48:01,920
actively maintained

1346
00:48:02,720 --> 00:48:03,730
a few

1347
00:48:03,730 --> 00:48:05,680
[Music]

1348
00:48:05,680 --> 00:48:10,160
like uh yeah i would say let's say

1349
00:48:10,240 --> 00:48:11,359
i would like the list but i don't have

1350
00:48:11,359 --> 00:48:13,359
the slides um

1351
00:48:13,359 --> 00:48:14,800
like uh

1352
00:48:14,800 --> 00:48:16,800
five would be able to actively maintain

1353
00:48:16,800 --> 00:48:18,960
an industry already wow that's uh

1354
00:48:18,960 --> 00:48:21,119
what is industry ready um let's okay

1355
00:48:21,119 --> 00:48:23,440
let's let's let's put it this way

1356
00:48:23,440 --> 00:48:27,040
some of the tools are used in ci for

1357
00:48:27,040 --> 00:48:29,119
continuous integration of cryptographic

1358
00:48:29,119 --> 00:48:32,559
libraries so i know amazon s2n uses uh

1359
00:48:32,559 --> 00:48:34,400
user very

1360
00:48:34,400 --> 00:48:36,640
uh like the the like one of the

1361
00:48:36,640 --> 00:48:38,480
co-authors of city very i think works at

1362
00:48:38,480 --> 00:48:41,280
amazon so yeah so they have that um but

1363
00:48:41,280 --> 00:48:42,559
also some open source cryptographic

1364
00:48:42,559 --> 00:48:44,880
libraries they use the uct grind they

1365
00:48:44,880 --> 00:48:47,359
use memsan and their ci so so that's as

1366
00:48:47,359 --> 00:48:49,040
industry ready as they as you can get

1367
00:48:49,040 --> 00:48:51,520
yeah you can get back to um alexander

1368
00:48:51,520 --> 00:48:54,319
and zulu playground yeah please

1369
00:48:54,319 --> 00:48:56,079
hi the spear thank you for your view

1370
00:48:56,079 --> 00:48:58,720
thanks so i was wondering how many of

1371
00:48:58,720 --> 00:49:00,000
these tools

1372
00:49:00,000 --> 00:49:02,000
had actually tried to integrate

1373
00:49:02,000 --> 00:49:05,119
themselves with the existing like turn

1374
00:49:05,119 --> 00:49:07,440
the like turn a bit around instead of

1375
00:49:07,440 --> 00:49:09,200
like developed other things these tools

1376
00:49:09,200 --> 00:49:11,599
the tools adapting to libraries

1377
00:49:11,599 --> 00:49:14,559
oh so so like i i've worked with these

1378
00:49:14,559 --> 00:49:16,400
tools and i've uh

1379
00:49:16,400 --> 00:49:18,480
some of them right like if there's 25 so

1380
00:49:18,480 --> 00:49:21,119
that's too much to to to work on at once

1381
00:49:21,119 --> 00:49:23,599
but i've integrated some of them to

1382
00:49:23,599 --> 00:49:26,000
do a few of like to a few open source

1383
00:49:26,000 --> 00:49:28,400
libraries like they're not upstream yet

1384
00:49:28,400 --> 00:49:30,400
but i i have the code and i'm working on

1385
00:49:30,400 --> 00:49:31,359
that

1386
00:49:31,359 --> 00:49:32,160
so

1387
00:49:32,160 --> 00:49:34,079
yeah was that the reasonable ease to do

1388
00:49:34,079 --> 00:49:36,559
for you was it reasonably easy for you

1389
00:49:36,559 --> 00:49:40,559
to do as someone who made it to so

1390
00:49:40,559 --> 00:49:42,640
more time efficient or like more

1391
00:49:42,640 --> 00:49:45,440
efficient for uh for you to implement

1392
00:49:45,440 --> 00:49:47,680
this into the libraries yeah so so we

1393
00:49:47,680 --> 00:49:49,599
mean like uh whether it's yeah whether

1394
00:49:49,599 --> 00:49:51,599
it's more more efficient to go like the

1395
00:49:51,599 --> 00:49:53,440
tool developers should implement this

1396
00:49:53,440 --> 00:49:55,119
stuff into the libraries rather than the

1397
00:49:55,119 --> 00:49:57,119
crypto developers should take the tools

1398
00:49:57,119 --> 00:49:59,680
right well maybe but the

1399
00:49:59,680 --> 00:50:01,680
uh so so the issues i had with the

1400
00:50:01,680 --> 00:50:03,920
libraries is that i was trying to

1401
00:50:03,920 --> 00:50:06,640
implement like a ct grind in nss and i

1402
00:50:06,640 --> 00:50:09,040
don't know nss and i like i don't know

1403
00:50:09,040 --> 00:50:10,880
their apis and whatnot so it took me

1404
00:50:10,880 --> 00:50:13,040
like a huge huge amount of effort to

1405
00:50:13,040 --> 00:50:14,559
understand the library so i know the

1406
00:50:14,559 --> 00:50:16,319
tool but i don't understand the library

1407
00:50:16,319 --> 00:50:17,760
or i don't know everyone but i don't

1408
00:50:17,760 --> 00:50:19,119
know the tools so

1409
00:50:19,119 --> 00:50:21,839
yeah okay thank you thank you

1410
00:50:21,839 --> 00:50:24,000
thank you we have maybe one more

1411
00:50:24,000 --> 00:50:25,440
question from

1412
00:50:25,440 --> 00:50:26,720
zulip

1413
00:50:26,720 --> 00:50:29,040
anders nielsen asked

1414
00:50:29,040 --> 00:50:31,280
timing attacks which the tools would fit

1415
00:50:31,280 --> 00:50:35,359
to check trusted execution environments

1416
00:50:36,240 --> 00:50:38,240
so depends on like

1417
00:50:38,240 --> 00:50:39,599
thanks for the question it depends on

1418
00:50:39,599 --> 00:50:41,440
where whether you have like access to

1419
00:50:41,440 --> 00:50:43,359
the code or you are trying to check a

1420
00:50:43,359 --> 00:50:44,800
running enclave or something like that

1421
00:50:44,800 --> 00:50:47,119
but if you have access to the code

1422
00:50:47,119 --> 00:50:49,200
then all the tools that work on the code

1423
00:50:49,200 --> 00:50:51,440
level would work and if you can compile

1424
00:50:51,440 --> 00:50:54,720
a binary for for these tools uh then

1425
00:50:54,720 --> 00:50:56,880
also the binary level tools will work so

1426
00:50:56,880 --> 00:50:59,359
i would say most most tools should work

1427
00:50:59,359 --> 00:51:00,960
i mean there are clarifications some of

1428
00:51:00,960 --> 00:51:02,800
the tools like don't support i don't

1429
00:51:02,800 --> 00:51:05,200
know like pointing point arithmetic or

1430
00:51:05,200 --> 00:51:06,880
dynamic libraries and they have these

1431
00:51:06,880 --> 00:51:10,720
limitations and whatnot but yeah most

1432
00:51:10,880 --> 00:51:12,160
thank you

1433
00:51:12,160 --> 00:51:13,839
i think it's time to move to the next

1434
00:51:13,839 --> 00:51:15,760
talk let's thank the speaker again thank

1435
00:51:15,760 --> 00:51:18,760
you

1436
00:51:23,270 --> 00:51:25,599
[Applause]

1437
00:51:25,599 --> 00:51:26,720
the final

1438
00:51:26,720 --> 00:51:28,079
talk in this

1439
00:51:28,079 --> 00:51:29,680
first session

1440
00:51:29,680 --> 00:51:30,240
is on

1441
00:51:30,240 --> 00:51:31,440
[Music]

1442
00:51:31,440 --> 00:51:33,599
again such an attacks lend me your ear

1443
00:51:33,599 --> 00:51:35,839
passive remote physical side channels on

1444
00:51:35,839 --> 00:51:38,800
pc so somewhat different side channels

1445
00:51:38,800 --> 00:51:41,599
and daniel genkin and rui schuster will

1446
00:51:41,599 --> 00:51:42,880
give the talk

1447
00:51:42,880 --> 00:51:44,960
right thanks leyla for the introduction

1448
00:51:44,960 --> 00:51:46,880
and my name is daniel genkin and this is

1449
00:51:46,880 --> 00:51:48,160
roy schuster

1450
00:51:48,160 --> 00:51:50,079
and our title is lend me your ear

1451
00:51:50,079 --> 00:51:51,920
passive physical side channel attacks on

1452
00:51:51,920 --> 00:51:53,920
pcs

1453
00:51:53,920 --> 00:51:56,079
and this would appear at the using

1454
00:51:56,079 --> 00:51:59,040
security 2021 2022 and his joint work

1455
00:51:59,040 --> 00:52:02,000
with nom nissan and iran trummer

1456
00:52:02,000 --> 00:52:04,160
so at a high level side channel attacks

1457
00:52:04,160 --> 00:52:05,920
come in two main flavors

1458
00:52:05,920 --> 00:52:07,119
the first one is what we call

1459
00:52:07,119 --> 00:52:09,040
software-based side channels and this is

1460
00:52:09,040 --> 00:52:10,559
an example of microarchitecture attacks

1461
00:52:10,559 --> 00:52:11,920
that we've seen in this session where

1462
00:52:11,920 --> 00:52:13,520
the victim and the attackers have some

1463
00:52:13,520 --> 00:52:15,599
contention on some cpu resource in this

1464
00:52:15,599 --> 00:52:17,119
case this blue gear

1465
00:52:17,119 --> 00:52:19,680
and the attacker times the contention

1466
00:52:19,680 --> 00:52:21,040
induced by the victim and deduces

1467
00:52:21,040 --> 00:52:22,640
information about what the victim is

1468
00:52:22,640 --> 00:52:24,160
doing

1469
00:52:24,160 --> 00:52:26,000
and this comes not only in the in the

1470
00:52:26,000 --> 00:52:27,920
microarchitecture world but as a

1471
00:52:27,920 --> 00:52:29,599
previous lecture mentioned we can also

1472
00:52:29,599 --> 00:52:31,520
talk about timing analysis or packet

1473
00:52:31,520 --> 00:52:32,720
analysis

1474
00:52:32,720 --> 00:52:34,559
and pretty much any shared resource

1475
00:52:34,559 --> 00:52:36,559
between attacker and victim can be

1476
00:52:36,559 --> 00:52:38,400
exploited to induce contention and to

1477
00:52:38,400 --> 00:52:40,079
reduce information about what the victim

1478
00:52:40,079 --> 00:52:41,200
is doing

1479
00:52:41,200 --> 00:52:42,640
so that's those are software-based

1480
00:52:42,640 --> 00:52:43,920
channels

1481
00:52:43,920 --> 00:52:46,000
in addition to it is a parallel world of

1482
00:52:46,000 --> 00:52:47,599
side channel attacks which are known as

1483
00:52:47,599 --> 00:52:49,680
physical side channels measuring the

1484
00:52:49,680 --> 00:52:51,200
device's power consumption

1485
00:52:51,200 --> 00:52:53,839
electromagnetic eliminations acoustic

1486
00:52:53,839 --> 00:52:56,319
emissions things that this device does

1487
00:52:56,319 --> 00:52:58,400
and emits involuntarily as it does

1488
00:52:58,400 --> 00:53:00,400
computations for example consuming power

1489
00:53:00,400 --> 00:53:02,640
or emitting gear

1490
00:53:02,640 --> 00:53:04,880
now between these dichotomy if we start

1491
00:53:04,880 --> 00:53:07,119
talking about physical side channels

1492
00:53:07,119 --> 00:53:09,200
well it's literally an attacker with an

1493
00:53:09,200 --> 00:53:11,359
antenna pointing it at a laptop and

1494
00:53:11,359 --> 00:53:12,960
trying to extract what this laptop is

1495
00:53:12,960 --> 00:53:14,640
doing so they have very different

1496
00:53:14,640 --> 00:53:16,319
properties than microarchitectural side

1497
00:53:16,319 --> 00:53:17,520
channels

1498
00:53:17,520 --> 00:53:19,200
and first of all don't need to execute

1499
00:53:19,200 --> 00:53:21,040
code in the target right that's that's

1500
00:53:21,040 --> 00:53:22,640
the the the greatest thing you don't

1501
00:53:22,640 --> 00:53:24,079
need to interact with the target in any

1502
00:53:24,079 --> 00:53:26,000
way just put your antenna dish near the

1503
00:53:26,000 --> 00:53:28,240
target and passively observe whatever

1504
00:53:28,240 --> 00:53:30,000
the target is a meeting so that's a

1505
00:53:30,000 --> 00:53:31,359
blessing

1506
00:53:31,359 --> 00:53:33,760
but in some sense it also occurs because

1507
00:53:33,760 --> 00:53:35,440
now you need physical proximity to the

1508
00:53:35,440 --> 00:53:37,599
target and you can't run them over the

1509
00:53:37,599 --> 00:53:40,400
internet purely by software against the

1510
00:53:40,400 --> 00:53:42,640
target that you don't even know where it

1511
00:53:42,640 --> 00:53:44,480
is

1512
00:53:44,480 --> 00:53:47,119
and that's how we typically view

1513
00:53:47,119 --> 00:53:49,200
physical side channels and we can even

1514
00:53:49,200 --> 00:53:50,559
argue that we can protect against

1515
00:53:50,559 --> 00:53:52,079
physical side channels by removing

1516
00:53:52,079 --> 00:53:53,920
proximity

1517
00:53:53,920 --> 00:53:55,520
and what we're going to do today is try

1518
00:53:55,520 --> 00:53:57,359
challenging this assumption

1519
00:53:57,359 --> 00:53:58,640
and in particular what we're going to

1520
00:53:58,640 --> 00:54:00,640
show you is a remote physical side

1521
00:54:00,640 --> 00:54:01,760
channel

1522
00:54:01,760 --> 00:54:03,839
without any attack code running on the

1523
00:54:03,839 --> 00:54:05,119
target so we're going to measure the

1524
00:54:05,119 --> 00:54:07,680
emissions of this laptop right here

1525
00:54:07,680 --> 00:54:10,400
without running any code on it and any

1526
00:54:10,400 --> 00:54:12,800
attack code on it and without assuming

1527
00:54:12,800 --> 00:54:15,440
we have physical proximity over it

1528
00:54:15,440 --> 00:54:17,520
so how can we do such a thing

1529
00:54:17,520 --> 00:54:19,520
well the first observation is here's a

1530
00:54:19,520 --> 00:54:20,800
laptop

1531
00:54:20,800 --> 00:54:22,640
and what i'm going to claim is that

1532
00:54:22,640 --> 00:54:24,480
laptops can measure themselves

1533
00:54:24,480 --> 00:54:26,800
and how do you how do you make a laptop

1534
00:54:26,800 --> 00:54:29,040
physically measure itself well as we all

1535
00:54:29,040 --> 00:54:31,680
know from the covet 19 pardemics

1536
00:54:31,680 --> 00:54:33,920
uh laptops are typically shipped with

1537
00:54:33,920 --> 00:54:35,599
internal microphones and we all know

1538
00:54:35,599 --> 00:54:37,280
these microphones by now because this is

1539
00:54:37,280 --> 00:54:39,200
our only voice connection to the outside

1540
00:54:39,200 --> 00:54:40,960
world

1541
00:54:40,960 --> 00:54:42,480
and if i were to look how this

1542
00:54:42,480 --> 00:54:44,240
microphone is wired so let me remove the

1543
00:54:44,240 --> 00:54:45,280
keyboard

1544
00:54:45,280 --> 00:54:46,720
then i would look i would find on the

1545
00:54:46,720 --> 00:54:49,760
motherboard in a wireless sorry an audio

1546
00:54:49,760 --> 00:54:51,359
interface

1547
00:54:51,359 --> 00:54:53,359
and the microphone is physically wired

1548
00:54:53,359 --> 00:54:57,200
to that audio interface with tracers

1549
00:54:57,200 --> 00:54:59,839
and what we i will also see on that very

1550
00:54:59,839 --> 00:55:03,359
same motherboard as a

1551
00:55:03,760 --> 00:55:05,359
sorry but i will also see on this very

1552
00:55:05,359 --> 00:55:07,440
very very same motherboard

1553
00:55:07,440 --> 00:55:10,000
is the processor okay the thing that

1554
00:55:10,000 --> 00:55:12,400
emits cm and is a heavyweight consumer

1555
00:55:12,400 --> 00:55:14,319
of of electricity

1556
00:55:14,319 --> 00:55:16,000
now if this picture right here looks

1557
00:55:16,000 --> 00:55:18,000
very similar to this picture which is a

1558
00:55:18,000 --> 00:55:20,079
proper em analysis with a proper em

1559
00:55:20,079 --> 00:55:21,920
probe well that's not by accident that's

1560
00:55:21,920 --> 00:55:23,680
exactly what is happening here we have

1561
00:55:23,680 --> 00:55:26,319
essentially building computers with em

1562
00:55:26,319 --> 00:55:29,280
probes in them hooked up to a measuring

1563
00:55:29,280 --> 00:55:31,599
device which is the audio interface

1564
00:55:31,599 --> 00:55:33,760
so now every time i turn on the audio

1565
00:55:33,760 --> 00:55:35,920
recording well guess what i am picking

1566
00:55:35,920 --> 00:55:37,760
the sound of the voice or of the

1567
00:55:37,760 --> 00:55:39,920
speaker's voice but also

1568
00:55:39,920 --> 00:55:42,400
any electronic magnetic emission emitted

1569
00:55:42,400 --> 00:55:44,240
by the processor which i can then

1570
00:55:44,240 --> 00:55:45,920
measure

1571
00:55:45,920 --> 00:55:48,480
and making it even worse well as we all

1572
00:55:48,480 --> 00:55:50,799
know zoom is part of our lives

1573
00:55:50,799 --> 00:55:52,160
so audio

1574
00:55:52,160 --> 00:55:54,400
picked up by my internal microphones is

1575
00:55:54,400 --> 00:55:56,160
also often shipped across the internet

1576
00:55:56,160 --> 00:55:58,400
to various places for example to the

1577
00:55:58,400 --> 00:56:01,200
attacker so now our voice over ip

1578
00:56:01,200 --> 00:56:02,960
attacker can

1579
00:56:02,960 --> 00:56:05,119
measure physical emissions by from this

1580
00:56:05,119 --> 00:56:07,839
laptop by simply monitoring the analog

1581
00:56:07,839 --> 00:56:10,079
signal being shipped to it over the voip

1582
00:56:10,079 --> 00:56:11,520
over a picture

1583
00:56:11,520 --> 00:56:12,720
and that's exactly what we're going to

1584
00:56:12,720 --> 00:56:14,000
show you today

1585
00:56:14,000 --> 00:56:15,760
so to show you that this actually all

1586
00:56:15,760 --> 00:56:18,160
works uh we've uh we've prepared a bunch

1587
00:56:18,160 --> 00:56:19,760
of demos and made the demo gods with

1588
00:56:19,760 --> 00:56:21,200
with us

1589
00:56:21,200 --> 00:56:23,439
okay

1590
00:56:23,680 --> 00:56:26,400
so we are going to measure the

1591
00:56:26,400 --> 00:56:28,640
thank

1592
00:56:28,839 --> 00:56:30,640
you so

1593
00:56:30,640 --> 00:56:31,520
uh

1594
00:56:31,520 --> 00:56:33,040
we're gonna measure

1595
00:56:33,040 --> 00:56:34,559
okay so we're gonna measure the

1596
00:56:34,559 --> 00:56:36,319
electromagnetic emissions from this

1597
00:56:36,319 --> 00:56:37,599
laptop

1598
00:56:37,599 --> 00:56:39,440
from our attacker station which is

1599
00:56:39,440 --> 00:56:41,599
located conveniently behind it

1600
00:56:41,599 --> 00:56:43,680
and the

1601
00:56:43,680 --> 00:56:46,079
and these two machines has a

1602
00:56:46,079 --> 00:56:46,880
and

1603
00:56:46,880 --> 00:56:49,520
a voiceover connection between them

1604
00:56:49,520 --> 00:56:51,680
now what i'm doing here is that whatever

1605
00:56:51,680 --> 00:56:53,040
look at the local microphone in this

1606
00:56:53,040 --> 00:56:55,760
laptop picks up we're piping it into the

1607
00:56:55,760 --> 00:56:58,079
attacker station and then instead of

1608
00:56:58,079 --> 00:57:00,319
showing it instead of playing it which

1609
00:57:00,319 --> 00:57:02,480
would create a really nasty echo in the

1610
00:57:02,480 --> 00:57:04,480
room what i'm doing instead is i'm

1611
00:57:04,480 --> 00:57:07,920
visualizing it in a form of a spectrum

1612
00:57:07,920 --> 00:57:09,119
so this diagram is called the

1613
00:57:09,119 --> 00:57:11,440
spectrogram the vertical axis is the

1614
00:57:11,440 --> 00:57:12,960
time axis

1615
00:57:12,960 --> 00:57:14,960
and the and the horizontal axis is the

1616
00:57:14,960 --> 00:57:18,960
frequency axis so if i whistle

1617
00:57:20,000 --> 00:57:22,319
you see my resource showed up and people

1618
00:57:22,319 --> 00:57:24,480
usually whistle at around one kilohertz

1619
00:57:24,480 --> 00:57:26,400
so that's that and the more yellow

1620
00:57:26,400 --> 00:57:28,240
something is the stronger the signal is

1621
00:57:28,240 --> 00:57:30,400
at that point in time and frequency

1622
00:57:30,400 --> 00:57:32,079
and by the way you see that this diagram

1623
00:57:32,079 --> 00:57:33,839
is live so this microphone is actually

1624
00:57:33,839 --> 00:57:35,920
picking up my voice

1625
00:57:35,920 --> 00:57:37,839
but in addition to picking up my voice

1626
00:57:37,839 --> 00:57:39,599
this microphone also picks up something

1627
00:57:39,599 --> 00:57:42,240
else so my voice stops at around here

1628
00:57:42,240 --> 00:57:44,319
this is why you see this area

1629
00:57:44,319 --> 00:57:46,640
to be a bit yellow but there is also

1630
00:57:46,640 --> 00:57:48,160
things here

1631
00:57:48,160 --> 00:57:49,760
and this is high relatively high

1632
00:57:49,760 --> 00:57:51,280
frequency em

1633
00:57:51,280 --> 00:57:53,680
that is being picked up as this laptop

1634
00:57:53,680 --> 00:57:55,200
just emits it

1635
00:57:55,200 --> 00:57:57,760
and if i were to run a small test

1636
00:57:57,760 --> 00:58:01,280
program on this machine

1637
00:58:01,280 --> 00:58:03,280
then as soon as i hit enter you see the

1638
00:58:03,280 --> 00:58:04,880
screen changed

1639
00:58:04,880 --> 00:58:08,319
and we have a very cyclic pattern and

1640
00:58:08,319 --> 00:58:10,079
everything what you're seeing here is

1641
00:58:10,079 --> 00:58:12,079
that this is a program that does one

1642
00:58:12,079 --> 00:58:14,319
second loops of memory instructions

1643
00:58:14,319 --> 00:58:15,839
followed by one second loops of

1644
00:58:15,839 --> 00:58:17,839
multiplications with some helps in

1645
00:58:17,839 --> 00:58:18,799
between

1646
00:58:18,799 --> 00:58:21,520
and we can see that we have here a

1647
00:58:21,520 --> 00:58:22,880
bright region which is memory

1648
00:58:22,880 --> 00:58:24,960
instructions a darker reason which is

1649
00:58:24,960 --> 00:58:27,040
multiplications and how it's in between

1650
00:58:27,040 --> 00:58:28,319
which show up

1651
00:58:28,319 --> 00:58:30,480
which light up the entire frequency

1652
00:58:30,480 --> 00:58:32,559
range so we can clearly distinguish

1653
00:58:32,559 --> 00:58:34,559
between operations

1654
00:58:34,559 --> 00:58:35,839
but we're not in the business of

1655
00:58:35,839 --> 00:58:37,280
distinguishing between high-level

1656
00:58:37,280 --> 00:58:39,280
operations we're at a big at the

1657
00:58:39,280 --> 00:58:40,880
business of extracting keys and doing

1658
00:58:40,880 --> 00:58:43,280
fun stuff with uh with signals so now

1659
00:58:43,280 --> 00:58:45,359
i'm going to hand it over to rory who is

1660
00:58:45,359 --> 00:58:46,880
going to show you how to actually use

1661
00:58:46,880 --> 00:58:49,200
this effect in in practice in now in

1662
00:58:49,200 --> 00:58:51,760
mounting cool attacks

1663
00:58:51,760 --> 00:58:53,440
thank you daniel

1664
00:58:53,440 --> 00:58:54,640
thank you

1665
00:58:54,640 --> 00:58:56,960
so um the first thing that i'm going to

1666
00:58:56,960 --> 00:58:59,119
do is i'm going to start running the

1667
00:58:59,119 --> 00:59:01,280
next demo because it takes a few seconds

1668
00:59:01,280 --> 00:59:03,599
to run

1669
00:59:03,599 --> 00:59:05,839
okay

1670
00:59:10,559 --> 00:59:13,280
so uh we are going to show how to

1671
00:59:13,280 --> 00:59:15,359
actually exploit this

1672
00:59:15,359 --> 00:59:17,040
side channel

1673
00:59:17,040 --> 00:59:18,960
sorry

1674
00:59:18,960 --> 00:59:21,520
okay and we are going to mount a website

1675
00:59:21,520 --> 00:59:23,359
identification attack where

1676
00:59:23,359 --> 00:59:25,680
uh the our victim is accessing some

1677
00:59:25,680 --> 00:59:28,480
website like twitter and at the same

1678
00:59:28,480 --> 00:59:30,240
time they are on a zoom caller voiceover

1679
00:59:30,240 --> 00:59:33,200
ip call with our attacker and audio is

1680
00:59:33,200 --> 00:59:35,200
being transmitted from the victim to the

1681
00:59:35,200 --> 00:59:37,119
attacker over the internet now the

1682
00:59:37,119 --> 00:59:40,160
attacker in our case will be running a

1683
00:59:40,160 --> 00:59:42,880
neural network to extract the um the

1684
00:59:42,880 --> 00:59:45,119
identity of the website

1685
00:59:45,119 --> 00:59:48,160
uh in the demo that i'm showing you

1686
00:59:48,160 --> 00:59:50,079
uh

1687
00:59:50,079 --> 00:59:51,520
there won't be a neural network

1688
00:59:51,520 --> 00:59:53,040
obviously what we will see is the

1689
00:59:53,040 --> 00:59:55,040
spectrum of uh

1690
00:59:55,040 --> 00:59:57,119
two uh websites that are now being

1691
00:59:57,119 --> 01:00:00,319
visited by our victim device

1692
01:00:00,319 --> 01:00:01,599
as i speak

1693
01:00:01,599 --> 01:00:04,640
and we are going to see that

1694
01:00:04,640 --> 01:00:06,000
they will have

1695
01:00:06,000 --> 01:00:09,839
very distinct differences between them

1696
01:00:12,319 --> 01:00:14,160
okay so this is our attacker device this

1697
01:00:14,160 --> 01:00:16,240
is going to take a second

1698
01:00:16,240 --> 01:00:17,680
all right

1699
01:00:17,680 --> 01:00:21,359
so you can see that uh these signals are

1700
01:00:21,359 --> 01:00:23,040
indeed different they they are treated

1701
01:00:23,040 --> 01:00:24,799
the same way but they have you know

1702
01:00:24,799 --> 01:00:26,240
visual difference between them that we

1703
01:00:26,240 --> 01:00:30,960
can see um of course uh

1704
01:00:30,960 --> 01:00:32,480
with what i'm not showing you and you

1705
01:00:32,480 --> 01:00:34,240
have to trust me is that these

1706
01:00:34,240 --> 01:00:36,000
differences are consistent so if i

1707
01:00:36,000 --> 01:00:38,319
visited if i had the victim visit google

1708
01:00:38,319 --> 01:00:39,680
multiple times and i had the victim

1709
01:00:39,680 --> 01:00:41,839
visit youtube multiple times you would

1710
01:00:41,839 --> 01:00:42,640
see

1711
01:00:42,640 --> 01:00:45,359
that uh the signals of youtube are more

1712
01:00:45,359 --> 01:00:47,359
similar to each other than the signals

1713
01:00:47,359 --> 01:00:49,359
are than they are to the signals at

1714
01:00:49,359 --> 01:00:50,480
google

1715
01:00:50,480 --> 01:00:53,119
and so uh we can use this to actually

1716
01:00:53,119 --> 01:00:54,960
distinguish between them

1717
01:00:54,960 --> 01:00:57,280
now uh

1718
01:00:57,280 --> 01:00:59,760
sometimes in pairs of websites we won't

1719
01:00:59,760 --> 01:01:01,599
be able to see it with our eyes but

1720
01:01:01,599 --> 01:01:03,680
still uh the neural network will be able

1721
01:01:03,680 --> 01:01:06,319
to detect these differences and our uh

1722
01:01:06,319 --> 01:01:09,040
primary result result here is that

1723
01:01:09,040 --> 01:01:10,720
using convolutional neural networks we

1724
01:01:10,720 --> 01:01:13,839
were able to to attain a 94 accuracy for

1725
01:01:13,839 --> 01:01:15,760
14-way classification between websites

1726
01:01:15,760 --> 01:01:18,480
so we can distinguish between uh

1727
01:01:18,480 --> 01:01:19,680
different activities or different

1728
01:01:19,680 --> 01:01:21,760
websites on the victim device uh

1729
01:01:21,760 --> 01:01:23,520
remotely and

1730
01:01:23,520 --> 01:01:25,200
we have a deeper characterization of

1731
01:01:25,200 --> 01:01:27,839
these numbers in the paper

1732
01:01:27,839 --> 01:01:28,799
now i'm going to talk about

1733
01:01:28,799 --> 01:01:30,960
cryptographic key extraction so here

1734
01:01:30,960 --> 01:01:32,880
it's a very similar setup

1735
01:01:32,880 --> 01:01:35,359
we have uh the victim device actually

1736
01:01:35,359 --> 01:01:38,000
performing signing some messages uh

1737
01:01:38,000 --> 01:01:40,079
electro i mean yeah

1738
01:01:40,079 --> 01:01:42,240
cryptographically signing some messages

1739
01:01:42,240 --> 01:01:43,119
um

1740
01:01:43,119 --> 01:01:45,520
and voice is being transmitted to the

1741
01:01:45,520 --> 01:01:47,119
attacker and the attacker is going to

1742
01:01:47,119 --> 01:01:49,040
run some machinery in order to actually

1743
01:01:49,040 --> 01:01:51,200
extract the key now why is that even

1744
01:01:51,200 --> 01:01:53,200
possible uh we are going to attack an

1745
01:01:53,200 --> 01:01:56,240
ecds implementation by lib decrypt

1746
01:01:56,240 --> 01:01:58,799
ecdsa has key generation verification

1747
01:01:58,799 --> 01:02:00,160
and signing

1748
01:02:00,160 --> 01:02:03,599
where the signing has this uh scalable

1749
01:02:03,599 --> 01:02:06,559
by point multiplication operation

1750
01:02:06,559 --> 01:02:09,280
that where the scalar is a random nonce

1751
01:02:09,280 --> 01:02:11,680
that is supposed to be kept secret so

1752
01:02:11,680 --> 01:02:13,680
since it's supposed to be kept secret we

1753
01:02:13,680 --> 01:02:15,760
have a constant time implementation

1754
01:02:15,760 --> 01:02:18,000
however

1755
01:02:18,000 --> 01:02:20,240
as exposed by minerva there is a bug in

1756
01:02:20,240 --> 01:02:22,160
this implementation

1757
01:02:22,160 --> 01:02:25,280
that basically allows us to see

1758
01:02:25,280 --> 01:02:27,760
a linear dependency between the duration

1759
01:02:27,760 --> 01:02:29,520
of the signature

1760
01:02:29,520 --> 01:02:30,319
and

1761
01:02:30,319 --> 01:02:31,680
the

1762
01:02:31,680 --> 01:02:34,720
the number of leading zeros in the key

1763
01:02:34,720 --> 01:02:36,720
so in other words for

1764
01:02:36,720 --> 01:02:39,280
short signatures they indicate that

1765
01:02:39,280 --> 01:02:41,440
there are many leading zeroes and if we

1766
01:02:41,440 --> 01:02:43,119
can detect short signatures then we can

1767
01:02:43,119 --> 01:02:44,330
detect

1768
01:02:44,330 --> 01:02:45,520
[Music]

1769
01:02:45,520 --> 01:02:48,480
nonces that we know a bunch of their

1770
01:02:48,480 --> 01:02:49,839
bits

1771
01:02:49,839 --> 01:02:54,000
uh so how can we use so uh so okay so uh

1772
01:02:54,000 --> 01:02:56,319
how do we detect short signatures uh the

1773
01:02:56,319 --> 01:02:58,640
first thing we do is we we process the

1774
01:02:58,640 --> 01:03:01,440
signal in the time domain then we we

1775
01:03:01,440 --> 01:03:04,160
pass it through a few filters

1776
01:03:04,160 --> 01:03:06,160
and we get this right hand

1777
01:03:06,160 --> 01:03:08,799
time domain signal that has this valley

1778
01:03:08,799 --> 01:03:09,760
in it

1779
01:03:09,760 --> 01:03:12,000
and the duration of the valley

1780
01:03:12,000 --> 01:03:15,280
corresponds to the signature time

1781
01:03:15,280 --> 01:03:19,119
unfortunately it is very very noisy

1782
01:03:19,119 --> 01:03:21,039
it's quite a noisy estimate

1783
01:03:21,039 --> 01:03:24,640
so what are we going to do to denoise it

1784
01:03:24,640 --> 01:03:26,240
we are going to attack

1785
01:03:26,240 --> 01:03:30,799
deterministic ede cdsa or rc697

1786
01:03:30,799 --> 01:03:32,079
where the nonce is derived

1787
01:03:32,079 --> 01:03:33,599
deterministically from the key and the

1788
01:03:33,599 --> 01:03:34,720
message

1789
01:03:34,720 --> 01:03:37,760
um and our attacker will be is we are

1790
01:03:37,760 --> 01:03:38,799
going to

1791
01:03:38,799 --> 01:03:40,640
attack a

1792
01:03:40,640 --> 01:03:42,640
victim that signs the same message

1793
01:03:42,640 --> 01:03:45,440
multiple times uh we are going to move

1794
01:03:45,440 --> 01:03:47,920
the tray where the attacker records

1795
01:03:47,920 --> 01:03:49,839
traces of each signature they are

1796
01:03:49,839 --> 01:03:52,400
grouping the traces by the message um

1797
01:03:52,400 --> 01:03:53,839
and then they are performing outlier

1798
01:03:53,839 --> 01:03:56,839
rejection and averaging to denoise the

1799
01:03:56,839 --> 01:04:00,319
um the the duration estimate and now

1800
01:04:00,319 --> 01:04:01,760
we're going to select the sort of the

1801
01:04:01,760 --> 01:04:04,000
shortest signatures which again short

1802
01:04:04,000 --> 01:04:06,640
signatures are signatures for which we

1803
01:04:06,640 --> 01:04:07,520
know

1804
01:04:07,520 --> 01:04:08,799
the first

1805
01:04:08,799 --> 01:04:10,559
uh several bits

1806
01:04:10,559 --> 01:04:14,079
uh this is was sufficient sufficient to

1807
01:04:14,079 --> 01:04:17,359
run uh the lattice attack of albert and

1808
01:04:17,359 --> 01:04:18,640
henninger

1809
01:04:18,640 --> 01:04:22,079
and um we could extract uh

1810
01:04:22,079 --> 01:04:24,799
a key from traces of twenty thousand

1811
01:04:24,799 --> 01:04:26,799
sign messages

1812
01:04:26,799 --> 01:04:29,039
uh the last attack i'm gonna talk about

1813
01:04:29,039 --> 01:04:31,920
if i have time is uh an attack against

1814
01:04:31,920 --> 01:04:34,319
our killer app uh it's an attack against

1815
01:04:34,319 --> 01:04:36,640
the on in the game it's cheat in the

1816
01:04:36,640 --> 01:04:39,039
game counter strike uh countersuck is an

1817
01:04:39,039 --> 01:04:40,240
e-sport

1818
01:04:40,240 --> 01:04:42,720
um or it's like it could be considered

1819
01:04:42,720 --> 01:04:45,280
the textbook example of an esport where

1820
01:04:45,280 --> 01:04:47,680
uh it's played competitively some people

1821
01:04:47,680 --> 01:04:49,760
take it very very seriously

1822
01:04:49,760 --> 01:04:51,119
uh and

1823
01:04:51,119 --> 01:04:53,680
it's a first-person shooter so what our

1824
01:04:53,680 --> 01:04:55,680
attacker will try to do here and again

1825
01:04:55,680 --> 01:04:57,760
the attacker is a similar setup where

1826
01:04:57,760 --> 01:05:00,000
the attacker has a voice over ip call

1827
01:05:00,000 --> 01:05:02,480
with the victim

1828
01:05:02,480 --> 01:05:03,760
and

1829
01:05:03,760 --> 01:05:05,359
it's it's actually it actually makes

1830
01:05:05,359 --> 01:05:06,960
sense if the attacker is in the game

1831
01:05:06,960 --> 01:05:09,200
playing against the victim then if

1832
01:05:09,200 --> 01:05:10,880
they're one-on-one playing then it makes

1833
01:05:10,880 --> 01:05:12,720
sense that they would have a voiceover p

1834
01:05:12,720 --> 01:05:14,559
call between them the attacker is trying

1835
01:05:14,559 --> 01:05:17,039
to find where the victim is in the game

1836
01:05:17,039 --> 01:05:18,799
it's like a game where you are a shooter

1837
01:05:18,799 --> 01:05:21,119
and you're looking for the other person

1838
01:05:21,119 --> 01:05:23,520
um and

1839
01:05:23,520 --> 01:05:24,880
the reason

1840
01:05:24,880 --> 01:05:27,039
for and of course they want to find them

1841
01:05:27,039 --> 01:05:27,920
and like

1842
01:05:27,920 --> 01:05:30,559
destroy them and so uh

1843
01:05:30,559 --> 01:05:33,200
the reason for why this is made possible

1844
01:05:33,200 --> 01:05:36,480
is because uh in this game

1845
01:05:36,480 --> 01:05:38,400
i'm going to be a little inaccurate and

1846
01:05:38,400 --> 01:05:40,000
say that

1847
01:05:40,000 --> 01:05:43,119
when the attacker is close to the victim

1848
01:05:43,119 --> 01:05:46,480
and for some meaning of the word close

1849
01:05:46,480 --> 01:05:48,480
the victim's computer is actually

1850
01:05:48,480 --> 01:05:50,319
rendering the attacker's avatar in the

1851
01:05:50,319 --> 01:05:51,359
game

1852
01:05:51,359 --> 01:05:53,200
and whenever that happens the attacker

1853
01:05:53,200 --> 01:05:55,520
can pick up on that signal so all the

1854
01:05:55,520 --> 01:05:57,760
attacker has to do is move near some

1855
01:05:57,760 --> 01:05:58,720
object

1856
01:05:58,720 --> 01:06:00,960
if they detect that the victim is now

1857
01:06:00,960 --> 01:06:03,119
rendering their own avatar

1858
01:06:03,119 --> 01:06:06,000
then they know that the victim is behind

1859
01:06:06,000 --> 01:06:07,280
this object

1860
01:06:07,280 --> 01:06:09,359
uh counter-strike is a game where like

1861
01:06:09,359 --> 01:06:11,440
there's a bunch of like trucks and

1862
01:06:11,440 --> 01:06:14,160
uh walls and objects you can hide behind

1863
01:06:14,160 --> 01:06:16,400
it so the attacker will try to detect

1864
01:06:16,400 --> 01:06:18,880
where the victim is and uh this is not

1865
01:06:18,880 --> 01:06:20,319
going to be live demo but it's going to

1866
01:06:20,319 --> 01:06:21,280
be a

1867
01:06:21,280 --> 01:06:23,440
video of this attack

1868
01:06:23,440 --> 01:06:26,000
uh where you can see that whenever the

1869
01:06:26,000 --> 01:06:28,319
attacker is the attacker is in the truck

1870
01:06:28,319 --> 01:06:30,319
and whenever they are on the right hand

1871
01:06:30,319 --> 01:06:32,559
side of the truck they see this zebra

1872
01:06:32,559 --> 01:06:34,240
pattern and when they're on the left

1873
01:06:34,240 --> 01:06:35,920
side of the truck the zebra pattern

1874
01:06:35,920 --> 01:06:37,440
disappears

1875
01:06:37,440 --> 01:06:39,039
and the zebra pattern

1876
01:06:39,039 --> 01:06:41,599
is happening because the victim is

1877
01:06:41,599 --> 01:06:43,680
rendering the attacker's avatar

1878
01:06:43,680 --> 01:06:45,920
so the attacker basically knows that the

1879
01:06:45,920 --> 01:06:47,440
victim is on the right hand side of the

1880
01:06:47,440 --> 01:06:48,240
truck

1881
01:06:48,240 --> 01:06:49,760
and they are going to

1882
01:06:49,760 --> 01:06:51,440
um

1883
01:06:51,440 --> 01:06:52,960
basically

1884
01:06:52,960 --> 01:06:54,480
move around the truck

1885
01:06:54,480 --> 01:06:55,680
and

1886
01:06:55,680 --> 01:06:59,280
kill them from behind so um

1887
01:06:59,280 --> 01:07:01,440
yeah

1888
01:07:01,440 --> 01:07:04,319
and with this

1889
01:07:06,799 --> 01:07:09,200
and with this we conclude and uh yeah i

1890
01:07:09,200 --> 01:07:10,960
should check out our paper and we'll

1891
01:07:10,960 --> 01:07:14,599
take questions now

1892
01:07:22,400 --> 01:07:26,319
yes questions for danielle and rui

1893
01:07:26,319 --> 01:07:30,240
so how should we protect against this

1894
01:07:30,720 --> 01:07:33,039
that's a good question

1895
01:07:33,039 --> 01:07:34,640
i mean

1896
01:07:34,640 --> 01:07:35,359
so

1897
01:07:35,359 --> 01:07:36,720
the other

1898
01:07:36,720 --> 01:07:39,200
what we demonstrated here is essentially

1899
01:07:39,200 --> 01:07:40,960
from from a cryptographic perspective

1900
01:07:40,960 --> 01:07:43,920
that this is a timing attack okay so

1901
01:07:43,920 --> 01:07:46,240
first of all constant time code

1902
01:07:46,240 --> 01:07:47,039
and

1903
01:07:47,039 --> 01:07:48,480
all the good stuff from the micro

1904
01:07:48,480 --> 01:07:50,160
architecture where it needs to be ported

1905
01:07:50,160 --> 01:07:52,000
here so that you don't start mounting

1906
01:07:52,000 --> 01:07:54,240
timing attacks by using the em signal as

1907
01:07:54,240 --> 01:07:55,680
a proxy

1908
01:07:55,680 --> 01:07:58,319
so that's one but two there is a slight

1909
01:07:58,319 --> 01:08:00,720
shift here in terms of what what is

1910
01:08:00,720 --> 01:08:02,400
believed to be possible versus what we

1911
01:08:02,400 --> 01:08:03,440
just did

1912
01:08:03,440 --> 01:08:04,160
the

1913
01:08:04,160 --> 01:08:06,319
we this is the first example

1914
01:08:06,319 --> 01:08:08,960
of a physical attack mounted across the

1915
01:08:08,960 --> 01:08:12,319
internet without any uh with without any

1916
01:08:12,319 --> 01:08:14,640
attack code running but on the victim

1917
01:08:14,640 --> 01:08:17,040
now this specific one it's a toy i i'm

1918
01:08:17,040 --> 01:08:19,120
not going to argue that that this that

1919
01:08:19,120 --> 01:08:20,560
this is something that you should be

1920
01:08:20,560 --> 01:08:22,799
awarded by tomorrow but it means that it

1921
01:08:22,799 --> 01:08:25,040
is possible at least in principle to

1922
01:08:25,040 --> 01:08:27,279
mount physical attacks across the

1923
01:08:27,279 --> 01:08:29,359
internet and now the question is what

1924
01:08:29,359 --> 01:08:31,600
else is in our machine what else leaks

1925
01:08:31,600 --> 01:08:33,520
and what can and the attacker cannot

1926
01:08:33,520 --> 01:08:34,960
observe and that's of course future

1927
01:08:34,960 --> 01:08:37,960
research

1928
01:08:39,120 --> 01:08:40,640
thank you

1929
01:08:40,640 --> 01:08:42,399
okay um

1930
01:08:42,399 --> 01:08:44,319
thanks for the talk i'm georgio i just

1931
01:08:44,319 --> 01:08:46,080
have a small question

1932
01:08:46,080 --> 01:08:48,640
did you find that if we add a certain

1933
01:08:48,640 --> 01:08:51,359
amount of noise to the data it would

1934
01:08:51,359 --> 01:08:53,520
become impossible for the neural network

1935
01:08:53,520 --> 01:08:55,679
to detect the

1936
01:08:55,679 --> 01:08:57,439
attacks uh the

1937
01:08:57,439 --> 01:08:59,359
the changes i mean well it's possible

1938
01:08:59,359 --> 01:09:02,080
but uh if we we do have we did uh

1939
01:09:02,080 --> 01:09:04,399
experiment with like uh different

1940
01:09:04,399 --> 01:09:05,520
running different programs in the

1941
01:09:05,520 --> 01:09:06,719
background

1942
01:09:06,719 --> 01:09:09,439
and also well you you saw that um we

1943
01:09:09,439 --> 01:09:10,880
were just talking

1944
01:09:10,880 --> 01:09:11,679
and

1945
01:09:11,679 --> 01:09:14,158
our victim did pick up on the voice so

1946
01:09:14,158 --> 01:09:16,319
these types of like ordinary noises

1947
01:09:16,319 --> 01:09:18,640
don't affect the attack um

1948
01:09:18,640 --> 01:09:21,920
it's possible that uh if you really try

1949
01:09:21,920 --> 01:09:24,000
to introduce noise and again that would

1950
01:09:24,000 --> 01:09:25,839
like i mean

1951
01:09:25,839 --> 01:09:28,319
without any hardware measures what i can

1952
01:09:28,319 --> 01:09:30,238
see is like you can for example like

1953
01:09:30,238 --> 01:09:32,640
make the cpu much more busy then maybe

1954
01:09:32,640 --> 01:09:34,479
you can confuse the neural network

1955
01:09:34,479 --> 01:09:38,880
eventually it is 94 it's not like 100 so

1956
01:09:38,880 --> 01:09:41,198
i can i can imagine a scenario where

1957
01:09:41,198 --> 01:09:43,600
more noisy signals will result in lower

1958
01:09:43,600 --> 01:09:47,880
accuracy all right thanks

1959
01:09:48,560 --> 01:09:50,399
hi uh thank you for the talk um i'm

1960
01:09:50,399 --> 01:09:52,479
curious so so many voip protocols have

1961
01:09:52,479 --> 01:09:54,719
like high pass filters or other um sort

1962
01:09:54,719 --> 01:09:56,239
of like space-saving or time-saving

1963
01:09:56,239 --> 01:09:59,280
filters uh due to a sense of which uh

1964
01:09:59,280 --> 01:10:01,120
uh codec specifically are most amenable

1965
01:10:01,120 --> 01:10:03,280
to this attack i'm sorry i couldn't hear

1966
01:10:03,280 --> 01:10:04,960
you the last of the questions yeah which

1967
01:10:04,960 --> 01:10:07,120
codecs are most amenable to this kind of

1968
01:10:07,120 --> 01:10:08,320
attack

1969
01:10:08,320 --> 01:10:09,199
uh

1970
01:10:09,199 --> 01:10:11,600
what's the name of that codec

1971
01:10:11,600 --> 01:10:13,760
i don't remember the name of this

1972
01:10:13,760 --> 01:10:16,640
um but it's the the

1973
01:10:16,640 --> 01:10:19,679
the the codec that

1974
01:10:19,679 --> 01:10:21,440
well okay there is a slide on this

1975
01:10:21,440 --> 01:10:22,400
actually

1976
01:10:22,400 --> 01:10:24,400
so let me pull it i saw you i saw you

1977
01:10:24,400 --> 01:10:25,520
had mumble on it so i'm wondering if

1978
01:10:25,520 --> 01:10:31,040
it's like speaks or right um this is

1979
01:10:31,040 --> 01:10:31,840
so

1980
01:10:31,840 --> 01:10:34,000
the the a lot of our experience were

1981
01:10:34,000 --> 01:10:35,760
made with mumble but we can see the

1982
01:10:35,760 --> 01:10:38,239
leakage from all the common you know

1983
01:10:38,239 --> 01:10:41,760
uh software that you would use for

1984
01:10:41,760 --> 01:10:43,600
yeah for voiceover

1985
01:10:43,600 --> 01:10:46,239
right so it it it's a it's an argument

1986
01:10:46,239 --> 01:10:48,400
between how close your microphone is and

1987
01:10:48,400 --> 01:10:49,679
how uh

1988
01:10:49,679 --> 01:10:52,560
and how good your analog setup is

1989
01:10:52,560 --> 01:10:54,480
this wasn't designed for this right

1990
01:10:54,480 --> 01:10:56,239
versus how the codec is configured

1991
01:10:56,239 --> 01:10:57,920
mumbo's codec you can configure

1992
01:10:57,920 --> 01:10:59,280
particularly friendly which is good

1993
01:10:59,280 --> 01:11:01,920
enough for live demo without

1994
01:11:01,920 --> 01:11:03,600
in a room full in a room full of people

1995
01:11:03,600 --> 01:11:05,520
and it and it doesn't fail even you even

1996
01:11:05,520 --> 01:11:07,679
though you speak over it but as you see

1997
01:11:07,679 --> 01:11:10,239
most software has some sort of leakage

1998
01:11:10,239 --> 01:11:11,360
and now it's an argument about

1999
01:11:11,360 --> 01:11:13,280
parameters most

2000
01:11:13,280 --> 01:11:15,600
it's there it's usually there now

2001
01:11:15,600 --> 01:11:17,199
is it good enough or not that's a

2002
01:11:17,199 --> 01:11:18,880
separate question

2003
01:11:18,880 --> 01:11:20,400
great thank you

2004
01:11:20,400 --> 01:11:22,719
maybe try to have a short one both of

2005
01:11:22,719 --> 01:11:25,040
you uh thank you

2006
01:11:25,040 --> 01:11:27,120
very interesting i was wondering uh

2007
01:11:27,120 --> 01:11:30,000
harsh projects are some uh manufacturers

2008
01:11:30,000 --> 01:11:31,679
most respectful to this attack than

2009
01:11:31,679 --> 01:11:32,960
others

2010
01:11:32,960 --> 01:11:36,159
sorry i didn't get that i uh some

2011
01:11:36,159 --> 01:11:38,560
like network models more suspectable to

2012
01:11:38,560 --> 01:11:42,000
this attack and others ah so

2013
01:11:42,000 --> 01:11:45,199
again there is a slide

2014
01:11:49,280 --> 01:11:50,080
you

2015
01:11:50,080 --> 01:11:51,840
you're slowly decompressing what we

2016
01:11:51,840 --> 01:11:53,280
compressed because we're running out of

2017
01:11:53,280 --> 01:11:55,120
time

2018
01:11:55,120 --> 01:11:58,320
it's common it's rather common

2019
01:11:58,320 --> 01:12:00,320
and

2020
01:12:00,320 --> 01:12:02,880
and how is it in your laptop versus

2021
01:12:02,880 --> 01:12:04,560
these i don't know it's a game of

2022
01:12:04,560 --> 01:12:06,560
numbers again

2023
01:12:06,560 --> 01:12:09,520
and are some manufacturers not affected

2024
01:12:09,520 --> 01:12:11,520
at all did you investigate and were

2025
01:12:11,520 --> 01:12:13,280
there like manufacturers that were

2026
01:12:13,280 --> 01:12:15,280
totally okay sorry

2027
01:12:15,280 --> 01:12:17,679
uh let's say like is apple affected by

2028
01:12:17,679 --> 01:12:19,280
this for example or all the members so

2029
01:12:19,280 --> 01:12:21,520
there are vendors that the there are

2030
01:12:21,520 --> 01:12:23,600
vendors with with better pipelines where

2031
01:12:23,600 --> 01:12:25,760
we could not see it by eye and then we

2032
01:12:25,760 --> 01:12:27,120
gave up instead of running something

2033
01:12:27,120 --> 01:12:28,880
more complicated that would extract it

2034
01:12:28,880 --> 01:12:30,719
because i saw the vendors that you can

2035
01:12:30,719 --> 01:12:32,640
just see it

2036
01:12:32,640 --> 01:12:33,720
okay last question

2037
01:12:33,720 --> 01:12:34,960
[Music]

2038
01:12:34,960 --> 01:12:37,840
so i've seen uh papers before that try

2039
01:12:37,840 --> 01:12:41,440
and geo geolocate videos by listening to

2040
01:12:41,440 --> 01:12:44,480
the 50 hertz frequency to try and detect

2041
01:12:44,480 --> 01:12:47,120
the electricity in the local area

2042
01:12:47,120 --> 01:12:48,960
did you try and do something like that

2043
01:12:48,960 --> 01:12:51,600
try and geolocate uh

2044
01:12:51,600 --> 01:12:54,239
laptops no we haven't and that's that's

2045
01:12:54,239 --> 01:12:56,239
actually super interesting uh

2046
01:12:56,239 --> 01:12:57,920
the electric interference signal that's

2047
01:12:57,920 --> 01:13:00,719
the 60 hertz is is forensic to use by

2048
01:13:00,719 --> 01:13:02,640
common by most police departments these

2049
01:13:02,640 --> 01:13:04,800
days and yeah that would be a very

2050
01:13:04,800 --> 01:13:06,320
interesting topic come talk to us after

2051
01:13:06,320 --> 01:13:09,040
if you if you'd like

2052
01:13:09,040 --> 01:13:11,040
thanks that is wonderful

2053
01:13:11,040 --> 01:13:12,480
and we were stuck in the same location

2054
01:13:12,480 --> 01:13:14,159
because of pandemic so it was kind of

2055
01:13:14,159 --> 01:13:16,640
hard to do

2056
01:13:16,640 --> 01:13:18,159
there is one question in zulip maybe you

2057
01:13:18,159 --> 01:13:19,840
can answer it offline because i think

2058
01:13:19,840 --> 01:13:21,840
it's time to go for a coffee break let's

2059
01:13:21,840 --> 01:13:23,199
thank to the speakers and all the

2060
01:13:23,199 --> 01:13:25,678
speakers

2061
01:13:31,199 --> 01:13:35,639
see you here in half an hour

2062
01:13:47,760 --> 01:13:49,840
you

