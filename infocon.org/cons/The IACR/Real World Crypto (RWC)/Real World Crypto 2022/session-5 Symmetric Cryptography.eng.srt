1
00:00:00,000 --> 00:00:05,440
[Music]

2
00:00:05,440 --> 00:00:07,000
is

3
00:00:07,000 --> 00:00:19,920
[Music]

4
00:00:19,920 --> 00:00:22,870
oh

5
00:00:22,870 --> 00:00:33,840
[Music]

6
00:00:33,840 --> 00:00:36,840
is

7
00:00:37,910 --> 00:00:56,800
[Music]

8
00:00:56,800 --> 00:00:59,450
oh

9
00:00:59,450 --> 00:01:12,799
[Music]

10
00:01:12,799 --> 00:01:16,119
tell me

11
00:01:16,350 --> 00:01:42,949
[Music]

12
00:01:49,920 --> 00:01:52,920
ladies

13
00:02:06,079 --> 00:02:09,560
good morning everybody

14
00:02:11,280 --> 00:02:13,760
good morning

15
00:02:15,040 --> 00:02:17,440
i'm very happy to be again at a physical

16
00:02:17,440 --> 00:02:19,040
conference

17
00:02:19,040 --> 00:02:20,720
it's so good to see everybody here in

18
00:02:20,720 --> 00:02:23,120
the room and have all these

19
00:02:23,120 --> 00:02:26,160
nice conversations see colleagues again

20
00:02:26,160 --> 00:02:28,000
and i'm also very happy to share this

21
00:02:28,000 --> 00:02:30,080
second session but maybe before i start

22
00:02:30,080 --> 00:02:32,160
one organizational announcement if you

23
00:02:32,160 --> 00:02:33,840
have any questions

24
00:02:33,840 --> 00:02:36,080
regarding the conference or with the

25
00:02:36,080 --> 00:02:38,560
local organization you can always go to

26
00:02:38,560 --> 00:02:40,720
the registration desk but also

27
00:02:40,720 --> 00:02:42,480
people with a blue cord so i have a

28
00:02:42,480 --> 00:02:44,640
black one but if you have a blue cord

29
00:02:44,640 --> 00:02:45,840
these folks can answer all your

30
00:02:45,840 --> 00:02:48,480
questions as well

31
00:02:48,840 --> 00:02:51,440
then now the second session will start

32
00:02:51,440 --> 00:02:54,000
about symmetric uh crypto and we start

33
00:02:54,000 --> 00:02:56,879
with uh our first invited talk

34
00:02:56,879 --> 00:02:59,120
uh called heavyweight security via

35
00:02:59,120 --> 00:03:01,360
lightweight crypto

36
00:03:01,360 --> 00:03:04,159
and this is a pre-recorded talk

37
00:03:04,159 --> 00:03:07,679
so please please start a video

38
00:03:12,000 --> 00:03:14,239
hi everyone it's a pleasure for me to

39
00:03:14,239 --> 00:03:17,120
join you today virtually so my name is

40
00:03:17,120 --> 00:03:20,159
matam sannastura and i have been working

41
00:03:20,159 --> 00:03:23,040
at nest for the last 13 years

42
00:03:23,040 --> 00:03:26,319
and i right now i'm co-leading the nist

43
00:03:26,319 --> 00:03:28,480
lightweight cryptography standardization

44
00:03:28,480 --> 00:03:30,799
project and today i would like to give

45
00:03:30,799 --> 00:03:33,360
you some information about this project

46
00:03:33,360 --> 00:03:35,519
what we have done before and where we

47
00:03:35,519 --> 00:03:39,840
are right now and also our next steps

48
00:03:40,879 --> 00:03:44,159
but before i go into the details of the

49
00:03:44,159 --> 00:03:46,080
lightweight cryptography project i would

50
00:03:46,080 --> 00:03:48,159
like to talk to you about the advanced

51
00:03:48,159 --> 00:03:50,400
encryption standard

52
00:03:50,400 --> 00:03:52,720
so 25 years ago

53
00:03:52,720 --> 00:03:53,879
in

54
00:03:53,879 --> 00:03:55,519
1997

55
00:03:55,519 --> 00:04:00,000
nist decided to develop a new standard

56
00:04:00,000 --> 00:04:01,599
so it wanted to

57
00:04:01,599 --> 00:04:04,400
develop a new standard for block ciphers

58
00:04:04,400 --> 00:04:07,599
that would replace the 64-bit

59
00:04:07,599 --> 00:04:09,920
bits

60
00:04:10,080 --> 00:04:12,319
and nests wanted to have an algorithm

61
00:04:12,319 --> 00:04:15,120
that would be secure for a long time

62
00:04:15,120 --> 00:04:16,238
and

63
00:04:16,238 --> 00:04:18,079
to be called the advanced encryption

64
00:04:18,079 --> 00:04:19,759
standard

65
00:04:19,759 --> 00:04:20,720
nist

66
00:04:20,720 --> 00:04:23,120
decided that it would be beneficial to

67
00:04:23,120 --> 00:04:25,440
involve the cryptographic community in

68
00:04:25,440 --> 00:04:28,240
the development of the standard and

69
00:04:28,240 --> 00:04:31,120
exactly from the beginning so

70
00:04:31,120 --> 00:04:32,720
it's kind of an

71
00:04:32,720 --> 00:04:34,880
enrollment like a partnership with the

72
00:04:34,880 --> 00:04:37,840
cryptography community

73
00:04:37,840 --> 00:04:40,320
and this the submission rhino designed

74
00:04:40,320 --> 00:04:42,960
by john daymond and winston freyman was

75
00:04:42,960 --> 00:04:44,320
selected

76
00:04:44,320 --> 00:04:46,880
as the advanced encryption standard

77
00:04:46,880 --> 00:04:51,520
and aft in december of 2001

78
00:04:51,520 --> 00:04:53,360
after this five year

79
00:04:53,360 --> 00:04:54,720
of effort

80
00:04:54,720 --> 00:04:57,360
the standard was finished approved and

81
00:04:57,360 --> 00:04:59,600
published

82
00:04:59,600 --> 00:05:02,240
and i included three references in this

83
00:05:02,240 --> 00:05:03,360
slide

84
00:05:03,360 --> 00:05:04,720
the first one

85
00:05:04,720 --> 00:05:07,199
uh by miles smith explains the

86
00:05:07,199 --> 00:05:09,919
development of the standards so it's a

87
00:05:09,919 --> 00:05:12,080
historical document that provides some

88
00:05:12,080 --> 00:05:14,960
insights about

89
00:05:15,280 --> 00:05:18,559
the development process

90
00:05:18,639 --> 00:05:22,160
and today 25 years later

91
00:05:22,160 --> 00:05:24,800
we can see that okay advanced encryption

92
00:05:24,800 --> 00:05:27,680
standard is the most widely adopted

93
00:05:27,680 --> 00:05:29,759
block block cipher that we have have

94
00:05:29,759 --> 00:05:31,440
today

95
00:05:31,440 --> 00:05:33,600
most of the modern processors have

96
00:05:33,600 --> 00:05:35,440
special hardware instructions to

97
00:05:35,440 --> 00:05:37,199
implement aes

98
00:05:37,199 --> 00:05:40,400
and and the cypher is also supported by

99
00:05:40,400 --> 00:05:43,360
many software libraries

100
00:05:43,360 --> 00:05:45,759
the development of aes also had

101
00:05:45,759 --> 00:05:49,039
significant impact on economy

102
00:05:49,039 --> 00:05:50,160
and

103
00:05:50,160 --> 00:05:52,240
to learn more about this you can look at

104
00:05:52,240 --> 00:05:53,600
the second

105
00:05:53,600 --> 00:05:55,600
footnote

106
00:05:55,600 --> 00:05:58,560
and after two 20 years of this

107
00:05:58,560 --> 00:06:01,199
publication of the standard nis decided

108
00:06:01,199 --> 00:06:03,280
to review this

109
00:06:03,280 --> 00:06:04,720
standard

110
00:06:04,720 --> 00:06:08,639
and uh published a list ir this

111
00:06:08,639 --> 00:06:10,400
internal report

112
00:06:10,400 --> 00:06:13,840
that provides a review of the standard

113
00:06:13,840 --> 00:06:17,360
and it is still standing secure and the

114
00:06:17,360 --> 00:06:20,240
algorithm is suitable to be used for

115
00:06:20,240 --> 00:06:22,960
years to come

116
00:06:23,199 --> 00:06:26,319
okay but why do the crypto community

117
00:06:26,319 --> 00:06:28,880
continue designing new symmetric key

118
00:06:28,880 --> 00:06:30,479
primitives

119
00:06:30,479 --> 00:06:32,560
well we could say we want to publish

120
00:06:32,560 --> 00:06:35,520
papers we want to

121
00:06:35,520 --> 00:06:38,479
go to conferences but we also see

122
00:06:38,479 --> 00:06:41,520
big companies investing in

123
00:06:41,520 --> 00:06:44,960
designing new symmetric primitives

124
00:06:44,960 --> 00:06:47,600
so there are some reasons for this as

125
00:06:47,600 --> 00:06:48,720
well

126
00:06:48,720 --> 00:06:51,759
so maybe we want something beyond just

127
00:06:51,759 --> 00:06:53,880
traditional

128
00:06:53,880 --> 00:06:57,039
confidentiality and

129
00:06:57,039 --> 00:06:59,520
integrity authentication maybe we want

130
00:06:59,520 --> 00:07:00,720
something

131
00:07:00,720 --> 00:07:02,720
some additional features

132
00:07:02,720 --> 00:07:05,360
so we have some new applications

133
00:07:05,360 --> 00:07:07,199
for example uh

134
00:07:07,199 --> 00:07:09,440
format preserving encryption

135
00:07:09,440 --> 00:07:11,280
where we want to have

136
00:07:11,280 --> 00:07:13,840
preserve the format of the plaintext in

137
00:07:13,840 --> 00:07:17,039
the ciphertext so if the plaintext was

138
00:07:17,039 --> 00:07:19,680
inc includes digit then we want the

139
00:07:19,680 --> 00:07:22,240
ciphertext to include digits as well or

140
00:07:22,240 --> 00:07:24,639
we want to be able to search

141
00:07:24,639 --> 00:07:26,880
like search queries on the encryption we

142
00:07:26,880 --> 00:07:28,960
want to preserve the order of the

143
00:07:28,960 --> 00:07:31,680
plaintext in the ciphertext

144
00:07:31,680 --> 00:07:34,560
or we want to

145
00:07:34,560 --> 00:07:37,520
obfuscate our implementations that are

146
00:07:37,520 --> 00:07:40,400
embed that are used in untrusted

147
00:07:40,400 --> 00:07:42,880
platforms

148
00:07:42,880 --> 00:07:45,280
through white box cryptography or we

149
00:07:45,280 --> 00:07:47,440
want to have full disk encryption or we

150
00:07:47,440 --> 00:07:49,520
want to use our ciphers

151
00:07:49,520 --> 00:07:51,360
in protocols like multi-party

152
00:07:51,360 --> 00:07:53,759
computation or zero knowledge proofs

153
00:07:53,759 --> 00:07:55,919
where

154
00:07:55,919 --> 00:07:56,720
the

155
00:07:56,720 --> 00:08:00,080
cost of implementing a nonlinear date is

156
00:08:00,080 --> 00:08:02,800
significantly higher than cost of

157
00:08:02,800 --> 00:08:06,560
implementing a linear gate

158
00:08:07,599 --> 00:08:11,599
or we want to have some new features

159
00:08:11,599 --> 00:08:13,199
um

160
00:08:13,199 --> 00:08:16,560
nouns misused resistance so

161
00:08:16,560 --> 00:08:17,919
when we design

162
00:08:17,919 --> 00:08:19,440
symmetric keys

163
00:08:19,440 --> 00:08:21,199
uh primitives we usually make

164
00:08:21,199 --> 00:08:23,759
assumptions but these assumptions do not

165
00:08:23,759 --> 00:08:26,240
always hold in the real world so the

166
00:08:26,240 --> 00:08:28,080
nonsense

167
00:08:28,080 --> 00:08:30,319
that are supposed to be unique

168
00:08:30,319 --> 00:08:33,120
might be reused in the real world or the

169
00:08:33,120 --> 00:08:34,799
keys that are generated that are

170
00:08:34,799 --> 00:08:36,719
supposed to be generated

171
00:08:36,719 --> 00:08:39,200
randomly and independently might have

172
00:08:39,200 --> 00:08:40,880
some

173
00:08:40,880 --> 00:08:43,839
relationships in between so

174
00:08:43,839 --> 00:08:47,200
related key security or we want to have

175
00:08:47,200 --> 00:08:49,360
for example um

176
00:08:49,360 --> 00:08:51,279
another example

177
00:08:51,279 --> 00:08:53,600
release of unverified

178
00:08:53,600 --> 00:08:56,800
plaintext rup security or key commitment

179
00:08:56,800 --> 00:08:59,680
or we still want to be secure if there's

180
00:08:59,680 --> 00:09:00,640
a

181
00:09:00,640 --> 00:09:02,640
if we have some quantum computers

182
00:09:02,640 --> 00:09:05,120
someday

183
00:09:05,200 --> 00:09:06,720
or we want to

184
00:09:06,720 --> 00:09:07,600
have

185
00:09:07,600 --> 00:09:09,760
combined functionality for example we

186
00:09:09,760 --> 00:09:11,920
want to do authenticated encryption but

187
00:09:11,920 --> 00:09:14,000
we want to do hashing as well so can we

188
00:09:14,000 --> 00:09:16,959
do it more efficiently

189
00:09:16,959 --> 00:09:18,160
and

190
00:09:18,160 --> 00:09:19,360
also

191
00:09:19,360 --> 00:09:21,600
maybe we want to be more suitable for

192
00:09:21,600 --> 00:09:24,000
constrained environments

193
00:09:24,000 --> 00:09:26,720
so this is where the lightweight crypto

194
00:09:26,720 --> 00:09:29,120
comes in so you can do any of these

195
00:09:29,120 --> 00:09:31,760
applications new features with aes

196
00:09:31,760 --> 00:09:33,519
but because aes

197
00:09:33,519 --> 00:09:35,839
is not

198
00:09:35,839 --> 00:09:37,120
um

199
00:09:37,120 --> 00:09:39,200
assuming that it will be used in these

200
00:09:39,200 --> 00:09:41,440
applications and

201
00:09:41,440 --> 00:09:44,240
this wasn't part of the design and

202
00:09:44,240 --> 00:09:47,040
we can actually design new

203
00:09:47,040 --> 00:09:48,480
primitives

204
00:09:48,480 --> 00:09:49,920
assuming we're

205
00:09:49,920 --> 00:09:52,160
knowing where they will be used

206
00:09:52,160 --> 00:09:53,680
and uh

207
00:09:53,680 --> 00:09:56,320
optimizing the design so that it will

208
00:09:56,320 --> 00:09:58,800
fit these applications better so these

209
00:09:58,800 --> 00:10:01,920
are these are called domain specific uh

210
00:10:01,920 --> 00:10:04,800
cyphers

211
00:10:04,800 --> 00:10:06,959
okay so

212
00:10:06,959 --> 00:10:09,040
yes lightweight cryptography

213
00:10:09,040 --> 00:10:12,160
is mostly cryptography suitable for

214
00:10:12,160 --> 00:10:14,399
constraint devices so

215
00:10:14,399 --> 00:10:16,399
when we talk about constraint devices

216
00:10:16,399 --> 00:10:19,680
we're talking about

217
00:10:19,680 --> 00:10:21,519
devices that has

218
00:10:21,519 --> 00:10:24,000
have limited resources it could be

219
00:10:24,000 --> 00:10:25,120
limited

220
00:10:25,120 --> 00:10:29,120
memory or power so rfid tags sensors are

221
00:10:29,120 --> 00:10:32,320
examples for this these are very common

222
00:10:32,320 --> 00:10:35,200
the number of these devices increased

223
00:10:35,200 --> 00:10:37,680
significantly and they are used many in

224
00:10:37,680 --> 00:10:40,959
many new applications

225
00:10:40,959 --> 00:10:45,519
and in these applications they typically

226
00:10:45,519 --> 00:10:47,920
collect a lot of private data it could

227
00:10:47,920 --> 00:10:50,399
be our location it could be our number

228
00:10:50,399 --> 00:10:52,800
of steps some health data

229
00:10:52,800 --> 00:10:54,720
then we see that sometimes in these

230
00:10:54,720 --> 00:10:57,839
applications this data is not protected

231
00:10:57,839 --> 00:10:59,920
and there are there may be multiple

232
00:10:59,920 --> 00:11:02,000
reasons of this

233
00:11:02,000 --> 00:11:03,680
and one of the reasons that we are

234
00:11:03,680 --> 00:11:05,519
interested in this

235
00:11:05,519 --> 00:11:07,760
um

236
00:11:08,320 --> 00:11:10,320
there's actually a lack of cryptography

237
00:11:10,320 --> 00:11:12,079
standards that are suitable for these

238
00:11:12,079 --> 00:11:13,519
devices

239
00:11:13,519 --> 00:11:15,760
and we know that nist crypto standards

240
00:11:15,760 --> 00:11:16,640
are

241
00:11:16,640 --> 00:11:18,959
optimized for general purpose computers

242
00:11:18,959 --> 00:11:20,880
not necessarily for these constraint

243
00:11:20,880 --> 00:11:23,440
devices and usually they can be

244
00:11:23,440 --> 00:11:25,360
implemented in these devices but they

245
00:11:25,360 --> 00:11:29,079
are not as efficient

246
00:11:29,680 --> 00:11:32,480
okay so when we talk about lightweight

247
00:11:32,480 --> 00:11:35,760
cryptography maybe we want to define

248
00:11:35,760 --> 00:11:37,839
weight of an algorithm

249
00:11:37,839 --> 00:11:39,680
and it is a property of its

250
00:11:39,680 --> 00:11:42,160
implementation and it also depends on

251
00:11:42,160 --> 00:11:44,480
different metrics uh based on the target

252
00:11:44,480 --> 00:11:45,760
platform

253
00:11:45,760 --> 00:11:47,839
there are hardware applications we

254
00:11:47,839 --> 00:11:50,399
typically

255
00:11:50,720 --> 00:11:53,200
consider the area the circuit area where

256
00:11:53,200 --> 00:11:54,800
we implement this

257
00:11:54,800 --> 00:11:57,200
the circuit uh the

258
00:11:57,200 --> 00:12:00,079
circuit of the

259
00:12:00,399 --> 00:12:03,440
perimeter or we look at the latency or

260
00:12:03,440 --> 00:12:05,839
cover consumption for some of the

261
00:12:05,839 --> 00:12:08,160
applications we can look at

262
00:12:08,160 --> 00:12:13,200
code size or latency or memory usage

263
00:12:13,200 --> 00:12:16,160
so i have uh four examples here

264
00:12:16,160 --> 00:12:18,320
uh these are the examples that we heard

265
00:12:18,320 --> 00:12:20,320
during our conferences

266
00:12:20,320 --> 00:12:21,839
especially

267
00:12:21,839 --> 00:12:23,680
early in the

268
00:12:23,680 --> 00:12:26,560
development process for the project

269
00:12:26,560 --> 00:12:31,680
development and one of the examples is

270
00:12:31,720 --> 00:12:34,000
anti-counterfeiting applications so

271
00:12:34,000 --> 00:12:36,480
typically rfid chips are used for these

272
00:12:36,480 --> 00:12:38,880
applications they have a challenge

273
00:12:38,880 --> 00:12:41,440
response protocols

274
00:12:41,440 --> 00:12:43,839
and you want to detect if the product is

275
00:12:43,839 --> 00:12:46,079
fake or not

276
00:12:46,079 --> 00:12:48,160
these divide these chips usually have

277
00:12:48,160 --> 00:12:50,240
very small amounts of memory and if you

278
00:12:50,240 --> 00:12:52,399
have a hardware oriented primitive with

279
00:12:52,399 --> 00:12:54,800
a small area

280
00:12:54,800 --> 00:12:56,880
it's typically more suitable for this

281
00:12:56,880 --> 00:12:58,160
application

282
00:12:58,160 --> 00:13:00,800
or we can look at healthcare

283
00:13:00,800 --> 00:13:03,599
applications

284
00:13:03,760 --> 00:13:06,720
barely for example measure that we use

285
00:13:06,720 --> 00:13:08,880
devices that measure our blood pressure

286
00:13:08,880 --> 00:13:11,040
or um

287
00:13:11,040 --> 00:13:13,920
blood sugar pulse they might be embedded

288
00:13:13,920 --> 00:13:16,800
in our body and in those cases we

289
00:13:16,800 --> 00:13:19,279
want hardware-oriented primitives with

290
00:13:19,279 --> 00:13:22,240
small energy requirements

291
00:13:22,240 --> 00:13:24,320
in vehicle communications or it could be

292
00:13:24,320 --> 00:13:26,560
in vehicle vehicle to vehicle road to

293
00:13:26,560 --> 00:13:27,839
vehicle

294
00:13:27,839 --> 00:13:31,279
or driving assistance systems uh we

295
00:13:31,279 --> 00:13:33,839
we want cyphers that has low have low

296
00:13:33,839 --> 00:13:36,880
latency and maybe high triple

297
00:13:36,880 --> 00:13:40,639
and as last example for the smartphone

298
00:13:40,639 --> 00:13:42,959
uh appliances

299
00:13:42,959 --> 00:13:46,240
that usually have low end cpus we might

300
00:13:46,240 --> 00:13:47,720
be in more interested in

301
00:13:47,720 --> 00:13:49,600
software-oriented primitives that

302
00:13:49,600 --> 00:13:52,160
consume

303
00:13:53,760 --> 00:13:56,079
less cpu time and smaller round

304
00:13:56,079 --> 00:13:58,560
requirements

305
00:13:58,560 --> 00:13:59,440
okay

306
00:13:59,440 --> 00:14:00,720
so how

307
00:14:00,720 --> 00:14:03,120
how as designing lightweight's

308
00:14:03,120 --> 00:14:06,399
primitives and conventional

309
00:14:06,399 --> 00:14:08,480
conventional designs

310
00:14:08,480 --> 00:14:11,600
so it's kind of an engineering challenge

311
00:14:11,600 --> 00:14:14,079
so we again similar to designing

312
00:14:14,079 --> 00:14:15,279
conventional

313
00:14:15,279 --> 00:14:17,680
cryptographic algorithms we we want to

314
00:14:17,680 --> 00:14:20,000
find the optimal trade-off between the

315
00:14:20,000 --> 00:14:22,800
security performance and cost

316
00:14:22,800 --> 00:14:24,560
so in uh

317
00:14:24,560 --> 00:14:26,800
2020 jean-philippe

318
00:14:26,800 --> 00:14:28,639
gave a talk

319
00:14:28,639 --> 00:14:30,880
again at real world crypto called too

320
00:14:30,880 --> 00:14:32,720
much crypto

321
00:14:32,720 --> 00:14:35,760
so he was arguing that we were actually

322
00:14:35,760 --> 00:14:38,319
designing

323
00:14:38,480 --> 00:14:40,560
cyprus that had

324
00:14:40,560 --> 00:14:42,880
more number of rounds that it

325
00:14:42,880 --> 00:14:44,959
actually required so

326
00:14:44,959 --> 00:14:46,880
he was claiming that we could actually

327
00:14:46,880 --> 00:14:49,600
reduce number of rounds of some of these

328
00:14:49,600 --> 00:14:53,199
ciphers without making them weaker

329
00:14:53,199 --> 00:14:55,040
so this actually

330
00:14:55,040 --> 00:14:57,040
uh

331
00:14:57,040 --> 00:15:00,800
is a big problem for when you're using

332
00:15:00,800 --> 00:15:02,240
um

333
00:15:02,240 --> 00:15:05,360
servers where crypto implementing crypto

334
00:15:05,360 --> 00:15:08,160
is cheap but it actually becomes a

335
00:15:08,160 --> 00:15:10,320
problem for these constraint devices

336
00:15:10,320 --> 00:15:13,920
that's why in earlier designs

337
00:15:13,920 --> 00:15:15,839
the new designs included smaller

338
00:15:15,839 --> 00:15:18,560
security margins by design

339
00:15:18,560 --> 00:15:19,760
and

340
00:15:19,760 --> 00:15:23,760
shorter keys and smaller block sizes

341
00:15:23,760 --> 00:15:26,079
but at the same time over the last 20

342
00:15:26,079 --> 00:15:28,639
years since the development of

343
00:15:28,639 --> 00:15:29,920
abs

344
00:15:29,920 --> 00:15:31,839
we have

345
00:15:31,839 --> 00:15:34,079
many improvements in the

346
00:15:34,079 --> 00:15:35,440
research

347
00:15:35,440 --> 00:15:36,639
area

348
00:15:36,639 --> 00:15:41,720
so we we have new designs that

349
00:15:42,320 --> 00:15:43,440
include

350
00:15:43,440 --> 00:15:46,079
smaller simpler rounds maybe instead of

351
00:15:46,079 --> 00:15:49,519
using very big grounds like aes uh

352
00:15:49,519 --> 00:15:52,000
big s box we can switch to smaller

353
00:15:52,000 --> 00:15:54,079
xboxes

354
00:15:54,079 --> 00:15:56,160
instead of using uh

355
00:15:56,160 --> 00:15:58,240
linear layers that are complicated we

356
00:15:58,240 --> 00:15:59,839
could look

357
00:15:59,839 --> 00:16:02,240
we can work with big permutations which

358
00:16:02,240 --> 00:16:04,480
are basically free in hardware

359
00:16:04,480 --> 00:16:06,000
or we could do

360
00:16:06,000 --> 00:16:09,120
simpler key schedules uh using for

361
00:16:09,120 --> 00:16:10,959
example um

362
00:16:10,959 --> 00:16:13,360
for permutation designs that use

363
00:16:13,360 --> 00:16:15,519
uh sponge construction where you don't

364
00:16:15,519 --> 00:16:18,020
actually need an additional key schedule

365
00:16:18,020 --> 00:16:19,759
[Music]

366
00:16:19,759 --> 00:16:24,399
okay so there is actually um

367
00:16:24,800 --> 00:16:26,720
there are things that we can do to

368
00:16:26,720 --> 00:16:30,720
implement uh secure

369
00:16:31,360 --> 00:16:33,839
to design secure uh

370
00:16:33,839 --> 00:16:35,680
crypto algorithms that are suitable for

371
00:16:35,680 --> 00:16:36,560
these

372
00:16:36,560 --> 00:16:37,839
devices

373
00:16:37,839 --> 00:16:40,079
and then this

374
00:16:40,079 --> 00:16:42,000
started this lightweight cryptography

375
00:16:42,000 --> 00:16:44,320
standardization process

376
00:16:44,320 --> 00:16:45,120
and

377
00:16:45,120 --> 00:16:47,600
it is

378
00:16:48,240 --> 00:16:50,560
the process is um

379
00:16:50,560 --> 00:16:53,120
similar to the

380
00:16:53,120 --> 00:16:55,600
public a public competitive competitions

381
00:16:55,600 --> 00:16:57,839
that this does for uh

382
00:16:57,839 --> 00:17:00,160
for aes and also for the

383
00:17:00,160 --> 00:17:03,040
uh sha-3 hash function and post-quantum

384
00:17:03,040 --> 00:17:05,520
cryptography standardization so it

385
00:17:05,520 --> 00:17:07,439
includes multiple rounds

386
00:17:07,439 --> 00:17:08,480
and the

387
00:17:08,480 --> 00:17:10,959
goal of the project is to develop new

388
00:17:10,959 --> 00:17:13,919
guidelines recommendations and standards

389
00:17:13,919 --> 00:17:15,359
optimized for

390
00:17:15,359 --> 00:17:17,039
constraint devices

391
00:17:17,039 --> 00:17:19,839
and our initial scope

392
00:17:19,839 --> 00:17:21,839
is to

393
00:17:21,839 --> 00:17:24,160
find is to develop authenticated

394
00:17:24,160 --> 00:17:25,439
encryption

395
00:17:25,439 --> 00:17:29,280
with optional hashing for constraint and

396
00:17:29,280 --> 00:17:31,039
constraint software and hardware

397
00:17:31,039 --> 00:17:32,559
environments

398
00:17:32,559 --> 00:17:34,720
so

399
00:17:35,520 --> 00:17:37,520
you could either submit an authenticated

400
00:17:37,520 --> 00:17:38,640
encryption

401
00:17:38,640 --> 00:17:41,120
algorithm or you can additionally

402
00:17:41,120 --> 00:17:42,480
optionally

403
00:17:42,480 --> 00:17:44,480
support the hashing for soft

404
00:17:44,480 --> 00:17:47,200
functionality as well

405
00:17:47,200 --> 00:17:51,200
hashing with a variable output length

406
00:17:51,200 --> 00:17:54,640
okay so a list held two workshops uh

407
00:17:54,640 --> 00:17:57,600
before the announcement but in 2018 yes

408
00:17:57,600 --> 00:17:59,919
published the submission requirements

409
00:17:59,919 --> 00:18:01,919
and evaluation criteria for the

410
00:18:01,919 --> 00:18:04,080
lightweight crypto standardization

411
00:18:04,080 --> 00:18:05,760
process and

412
00:18:05,760 --> 00:18:10,080
uh with the deadline of february of 2019

413
00:18:10,080 --> 00:18:13,600
the project officially started

414
00:18:13,600 --> 00:18:14,559
so

415
00:18:14,559 --> 00:18:16,400
the call included the requirements so

416
00:18:16,400 --> 00:18:19,120
what were the requirements uh

417
00:18:19,120 --> 00:18:21,120
the requirements we had

418
00:18:21,120 --> 00:18:23,280
requirements about security scan

419
00:18:23,280 --> 00:18:24,720
requirements about design and

420
00:18:24,720 --> 00:18:26,799
implementations

421
00:18:26,799 --> 00:18:29,160
basically for aad typical

422
00:18:29,160 --> 00:18:31,200
confidentiality and integrity

423
00:18:31,200 --> 00:18:33,679
requirements uh we put some requirements

424
00:18:33,679 --> 00:18:36,640
on the sizes of the keys and the

425
00:18:36,640 --> 00:18:38,720
length of the plan plaintext that the

426
00:18:38,720 --> 00:18:42,240
cypher is able to process securely of

427
00:18:42,240 --> 00:18:43,840
course we want the

428
00:18:43,840 --> 00:18:45,520
designs to perform better than the

429
00:18:45,520 --> 00:18:48,559
standards so we were thinking about aes

430
00:18:48,559 --> 00:18:50,720
with the

431
00:18:50,720 --> 00:18:55,919
with gcm ascm and we wanted the designs

432
00:18:55,919 --> 00:18:58,799
to be optimized for short messages and

433
00:18:58,799 --> 00:18:59,840
uh

434
00:18:59,840 --> 00:19:02,240
reference implementations and optimized

435
00:19:02,240 --> 00:19:04,320
implementations that are compatible with

436
00:19:04,320 --> 00:19:08,879
the api are part of the requirements

437
00:19:09,120 --> 00:19:11,440
and the evaluation criteria includes

438
00:19:11,440 --> 00:19:13,919
many different parts so of course the

439
00:19:13,919 --> 00:19:16,559
security is the biggest uh most

440
00:19:16,559 --> 00:19:18,000
important part

441
00:19:18,000 --> 00:19:20,720
um we wanted the designs to be mature

442
00:19:20,720 --> 00:19:24,160
enough uh we want um

443
00:19:24,160 --> 00:19:26,080
we looked at the security claims that

444
00:19:26,080 --> 00:19:28,639
the design

445
00:19:28,799 --> 00:19:31,600
includes and the security proofs

446
00:19:31,600 --> 00:19:34,400
for example for the modes and amount of

447
00:19:34,400 --> 00:19:37,120
third-party analysis the security margin

448
00:19:37,120 --> 00:19:40,720
and the design rationale of the

449
00:19:40,720 --> 00:19:42,960
candidates

450
00:19:42,960 --> 00:19:44,480
are the parts that we

451
00:19:44,480 --> 00:19:47,039
looked for the security and for software

452
00:19:47,039 --> 00:19:49,360
benchmarking of course we looked at

453
00:19:49,360 --> 00:19:51,200
um

454
00:19:51,200 --> 00:19:54,160
the target devices and we're trying to

455
00:19:54,160 --> 00:19:56,640
compile optimize implementations look at

456
00:19:56,640 --> 00:19:58,880
different performance metrics and we

457
00:19:58,880 --> 00:20:01,440
wanted to do a fair comparison of the

458
00:20:01,440 --> 00:20:05,360
candidates and especially with aes um

459
00:20:05,360 --> 00:20:06,799
gcm

460
00:20:06,799 --> 00:20:08,080
and then for

461
00:20:08,080 --> 00:20:11,120
hardware performance um

462
00:20:11,120 --> 00:20:13,840
we wanted to look at the fpga results

463
00:20:13,840 --> 00:20:15,919
asic results and different performance

464
00:20:15,919 --> 00:20:18,080
metrics and again we wanted to have a

465
00:20:18,080 --> 00:20:21,120
fair comparison of the

466
00:20:21,120 --> 00:20:23,200
candidates

467
00:20:23,200 --> 00:20:25,600
as additional features um

468
00:20:25,600 --> 00:20:27,360
we wanted to look at

469
00:20:27,360 --> 00:20:29,679
side channel resistance of these

470
00:20:29,679 --> 00:20:32,320
candidates misuse resistance what

471
00:20:32,320 --> 00:20:34,799
happens if some of the other assumptions

472
00:20:34,799 --> 00:20:38,640
are not do not hold in real world and uh

473
00:20:38,640 --> 00:20:43,039
we also wanted to have some diversity of

474
00:20:43,039 --> 00:20:46,159
algorithms for example some candidates

475
00:20:46,159 --> 00:20:49,520
were very similar to aes um maybe just

476
00:20:49,520 --> 00:20:52,480
changing the last round so maybe

477
00:20:52,480 --> 00:20:54,400
we also consider the

478
00:20:54,400 --> 00:20:56,799
diversity of

479
00:20:56,799 --> 00:20:58,400
the algorithms

480
00:20:58,400 --> 00:21:00,559
and we

481
00:21:00,559 --> 00:21:03,440
also kept in mind that uh

482
00:21:03,440 --> 00:21:05,840
post-quantum security uh would be

483
00:21:05,840 --> 00:21:07,919
relevant in the need

484
00:21:07,919 --> 00:21:10,720
can be relevant in the near future

485
00:21:10,720 --> 00:21:15,039
okay so after the call we received 57

486
00:21:15,039 --> 00:21:16,799
submissions and

487
00:21:16,799 --> 00:21:19,919
56 of them were accepted as around one

488
00:21:19,919 --> 00:21:22,559
candidates so this was the same amount

489
00:21:22,559 --> 00:21:24,320
of candidates

490
00:21:24,320 --> 00:21:28,480
for the caesar authenticated encryption

491
00:21:28,880 --> 00:21:31,679
competition

492
00:21:31,679 --> 00:21:33,440
okay and

493
00:21:33,440 --> 00:21:34,400
so

494
00:21:34,400 --> 00:21:36,960
let's collect these algorithms and

495
00:21:36,960 --> 00:21:39,919
publish them take a look at the

496
00:21:39,919 --> 00:21:43,039
internal the files and after a quick

497
00:21:43,039 --> 00:21:46,240
check let's publish the

498
00:21:46,240 --> 00:21:48,480
submissions and

499
00:21:48,480 --> 00:21:51,600
very quickly uh we received a lot of

500
00:21:51,600 --> 00:21:54,000
observations about these candidates and

501
00:21:54,000 --> 00:21:58,000
after four ounces decided to go from 56

502
00:21:58,000 --> 00:22:01,280
candidates to 32 candidates to eliminate

503
00:22:01,280 --> 00:22:02,240
the can

504
00:22:02,240 --> 00:22:04,320
the submissions that are less likely to

505
00:22:04,320 --> 00:22:06,799
be standardized so we saw a lot of

506
00:22:06,799 --> 00:22:09,280
distinguishing attacks we saw a lot of

507
00:22:09,280 --> 00:22:11,600
domain separation issues

508
00:22:11,600 --> 00:22:14,159
saw some designs that did not include a

509
00:22:14,159 --> 00:22:16,480
lot of design rationale and

510
00:22:16,480 --> 00:22:19,440
no third party analysis so

511
00:22:19,440 --> 00:22:21,520
we decided to

512
00:22:21,520 --> 00:22:24,159
eliminate those candidates early so that

513
00:22:24,159 --> 00:22:26,880
we can focus more on the more promising

514
00:22:26,880 --> 00:22:29,039
candidates and after round one we

515
00:22:29,039 --> 00:22:32,000
published a status report that explains

516
00:22:32,000 --> 00:22:33,120
our

517
00:22:33,120 --> 00:22:35,678
decision

518
00:22:36,640 --> 00:22:38,840
so we ended up having

519
00:22:38,840 --> 00:22:42,480
32 second-round candidates this was more

520
00:22:42,480 --> 00:22:43,679
manageable

521
00:22:43,679 --> 00:22:45,919
and the candidates if you divide them

522
00:22:45,919 --> 00:22:48,320
into two categories based on their

523
00:22:48,320 --> 00:22:50,799
functionality so some of them all

524
00:22:50,799 --> 00:22:53,440
approximately half included aad only

525
00:22:53,440 --> 00:22:55,919
functionality whereas the other part

526
00:22:55,919 --> 00:22:58,799
included aad and hashing

527
00:22:58,799 --> 00:23:02,400
so i aid only once

528
00:23:02,400 --> 00:23:04,480
were mostly based on block ciphers or

529
00:23:04,480 --> 00:23:08,000
tweakable block ciphers and were able to

530
00:23:08,000 --> 00:23:08,799
have

531
00:23:08,799 --> 00:23:12,000
shorter smaller internal state sites

532
00:23:12,000 --> 00:23:15,280
whereas the designs candidates providing

533
00:23:15,280 --> 00:23:18,240
aad and hashing they they were mostly

534
00:23:18,240 --> 00:23:21,520
based on permutations

535
00:23:21,520 --> 00:23:26,080
or a variant of uh sponge constructions

536
00:23:26,080 --> 00:23:27,760
okay then

537
00:23:27,760 --> 00:23:30,480
uh miss nlc started two candidates and

538
00:23:30,480 --> 00:23:33,520
the round two started

539
00:23:33,520 --> 00:23:34,840
round two took

540
00:23:34,840 --> 00:23:38,919
a almost about 20 months from august

541
00:23:38,919 --> 00:23:42,240
2019 to march 2021

542
00:23:42,240 --> 00:23:45,679
in the meanwhile we hosted two workshops

543
00:23:45,679 --> 00:23:49,919
and uh towards the end of this round um

544
00:23:49,919 --> 00:23:52,480
two we asked the submitters to provide

545
00:23:52,480 --> 00:23:55,919
some some status updates so

546
00:23:55,919 --> 00:23:58,720
if there were a third party analysis how

547
00:23:58,720 --> 00:24:00,960
would you respond to this or if you have

548
00:24:00,960 --> 00:24:04,640
some new security proofs or

549
00:24:04,640 --> 00:24:09,520
if you have new implementations so

550
00:24:09,760 --> 00:24:12,559
we wanted to give the designers uh a

551
00:24:12,559 --> 00:24:14,080
chance to

552
00:24:14,080 --> 00:24:15,360
support their

553
00:24:15,360 --> 00:24:16,960
submissions

554
00:24:16,960 --> 00:24:19,440
and most of the the evaluation of the

555
00:24:19,440 --> 00:24:21,760
candidates were done based on their

556
00:24:21,760 --> 00:24:23,760
security and the performance

557
00:24:23,760 --> 00:24:26,799
one it was mostly based on the

558
00:24:26,799 --> 00:24:29,679
security and

559
00:24:30,720 --> 00:24:33,120
here we have the chance of looking uh

560
00:24:33,120 --> 00:24:35,200
their software in hardware benchmarks as

561
00:24:35,200 --> 00:24:36,159
well

562
00:24:36,159 --> 00:24:37,840
and

563
00:24:37,840 --> 00:24:40,159
again at the end of round two we

564
00:24:40,159 --> 00:24:42,559
published the status report explaining

565
00:24:42,559 --> 00:24:44,799
the

566
00:24:44,880 --> 00:24:47,440
decision uh process

567
00:24:47,440 --> 00:24:49,919
okay so how did we do soft software

568
00:24:49,919 --> 00:24:52,559
benchmarking uh so we had an internal

569
00:24:52,559 --> 00:24:54,159
team uh

570
00:24:54,159 --> 00:24:56,240
that

571
00:24:56,240 --> 00:24:59,919
looked at the implementations and a

572
00:24:59,919 --> 00:25:01,919
there's some internal benchmarking but

573
00:25:01,919 --> 00:25:04,000
also we have some external teams that

574
00:25:04,000 --> 00:25:06,400
looked at

575
00:25:07,520 --> 00:25:10,000
the performance of the software and

576
00:25:10,000 --> 00:25:11,159
the different

577
00:25:11,159 --> 00:25:13,520
microcontrollers and

578
00:25:13,520 --> 00:25:16,240
some different metrics

579
00:25:16,240 --> 00:25:18,880
this is just an example that uh combine

580
00:25:18,880 --> 00:25:20,880
compares

581
00:25:20,880 --> 00:25:23,440
code size versus uh

582
00:25:23,440 --> 00:25:25,039
time

583
00:25:25,039 --> 00:25:26,400
measurements and

584
00:25:26,400 --> 00:25:28,480
you see that the ones the algorithms

585
00:25:28,480 --> 00:25:30,880
that are inside this red circle in this

586
00:25:30,880 --> 00:25:32,000
uh

587
00:25:32,000 --> 00:25:34,559
platform i actually provide better

588
00:25:34,559 --> 00:25:37,919
performance than uh aes gcm so ask on

589
00:25:37,919 --> 00:25:40,400
and photon retail are

590
00:25:40,400 --> 00:25:42,640
examples

591
00:25:42,640 --> 00:25:45,360
we also did some software benchmarking

592
00:25:45,360 --> 00:25:45,790
um

593
00:25:45,790 --> 00:25:47,200
[Music]

594
00:25:47,200 --> 00:25:49,200
that

595
00:25:49,200 --> 00:25:52,080
directly compares each candidates

596
00:25:52,080 --> 00:25:53,840
with asccm

597
00:25:53,840 --> 00:25:56,880
so we included relative timings for each

598
00:25:56,880 --> 00:25:59,120
candidate um

599
00:25:59,120 --> 00:26:00,720
in a matrix form

600
00:26:00,720 --> 00:26:03,039
and

601
00:26:03,039 --> 00:26:05,440
here on the

602
00:26:05,440 --> 00:26:08,000
here you could see the highlighted parts

603
00:26:08,000 --> 00:26:10,159
are actually the parts are the parts

604
00:26:10,159 --> 00:26:12,559
where uh the algo to provide a

605
00:26:12,559 --> 00:26:15,600
performance advantage over um

606
00:26:15,600 --> 00:26:17,120
over a yes

607
00:26:17,120 --> 00:26:18,480
and uh

608
00:26:18,480 --> 00:26:22,840
ask on especially me not so

609
00:26:22,840 --> 00:26:23,919
um and

610
00:26:23,919 --> 00:26:26,080
additional cyphers were able to actually

611
00:26:26,080 --> 00:26:29,039
perform better than aescm on this

612
00:26:29,039 --> 00:26:31,840
uh microcontroller

613
00:26:31,840 --> 00:26:32,960
so these

614
00:26:32,960 --> 00:26:35,039
results are available on our github web

615
00:26:35,039 --> 00:26:36,559
page

616
00:26:36,559 --> 00:26:38,880
okay and for hardware benchmarking we

617
00:26:38,880 --> 00:26:41,600
mostly relied on uh third-party analysis

618
00:26:41,600 --> 00:26:44,400
so this did not do any internal analysis

619
00:26:44,400 --> 00:26:46,880
but just looked at the available results

620
00:26:46,880 --> 00:26:47,760
by

621
00:26:47,760 --> 00:26:50,559
mainly by the gmu team and other teams

622
00:26:50,559 --> 00:26:53,360
that i listed here

623
00:26:53,360 --> 00:26:55,760
and this is uh just an example a true

624
00:26:55,760 --> 00:26:59,279
put over area a figure

625
00:26:59,279 --> 00:27:00,400
that is

626
00:27:00,400 --> 00:27:03,360
crafted generated by the gmu team here

627
00:27:03,360 --> 00:27:04,240
in this

628
00:27:04,240 --> 00:27:06,880
figure we see that subterranean zoodiac

629
00:27:06,880 --> 00:27:09,679
ascon and gift uh and gamly are

630
00:27:09,679 --> 00:27:10,960
providing

631
00:27:10,960 --> 00:27:13,919
um are performing very well in compared

632
00:27:13,919 --> 00:27:17,360
to the other candidates

633
00:27:17,360 --> 00:27:19,600
okay so uh

634
00:27:19,600 --> 00:27:21,919
we had 32 candidates

635
00:27:21,919 --> 00:27:23,840
and we looked at their performance

636
00:27:23,840 --> 00:27:25,279
software performance hardware

637
00:27:25,279 --> 00:27:28,000
performance and their available third

638
00:27:28,000 --> 00:27:29,919
party announcements and we reduced these

639
00:27:29,919 --> 00:27:32,240
candidates to 10.

640
00:27:32,240 --> 00:27:35,440
so this was the end of round two and we

641
00:27:35,440 --> 00:27:37,120
ended up

642
00:27:37,120 --> 00:27:38,159
in

643
00:27:38,159 --> 00:27:40,159
we selected candidates moving to the

644
00:27:40,159 --> 00:27:42,640
final round of the

645
00:27:42,640 --> 00:27:44,559
standardization

646
00:27:44,559 --> 00:27:48,159
okay so we're in round three final round

647
00:27:48,159 --> 00:27:50,480
which started last march

648
00:27:50,480 --> 00:27:54,240
march of 2021 and

649
00:27:54,240 --> 00:27:57,360
during the start of round three the

650
00:27:57,360 --> 00:27:59,600
finals were given an opportunity to

651
00:27:59,600 --> 00:28:01,440
update their submission packages and

652
00:28:01,440 --> 00:28:02,960
also proposed

653
00:28:02,960 --> 00:28:05,840
tweet today at some missions and we have

654
00:28:05,840 --> 00:28:07,919
quite a few algorithms that actually

655
00:28:07,919 --> 00:28:09,279
didn't want to use

656
00:28:09,279 --> 00:28:11,760
this opportunity and some of them

657
00:28:11,760 --> 00:28:13,760
increased their number of rounds and

658
00:28:13,760 --> 00:28:15,039
whereas some

659
00:28:15,039 --> 00:28:17,039
actually decreased

660
00:28:17,039 --> 00:28:20,080
the number of rounds

661
00:28:20,480 --> 00:28:23,679
claiming that their security margin

662
00:28:23,679 --> 00:28:25,279
was

663
00:28:25,279 --> 00:28:27,360
more than enough

664
00:28:27,360 --> 00:28:29,520
in round three we're also expecting to

665
00:28:29,520 --> 00:28:31,760
get some results that

666
00:28:31,760 --> 00:28:33,919
for side channel resistance

667
00:28:33,919 --> 00:28:35,840
of these candidates

668
00:28:35,840 --> 00:28:38,000
so uh the

669
00:28:38,000 --> 00:28:41,039
third theme from george mason university

670
00:28:41,039 --> 00:28:43,600
uh proposed a general framework to

671
00:28:43,600 --> 00:28:46,080
evaluate the site channel resistance of

672
00:28:46,080 --> 00:28:47,440
the finalists

673
00:28:47,440 --> 00:28:50,159
and they had proposed three calls

674
00:28:50,159 --> 00:28:52,559
cyclone

675
00:28:52,559 --> 00:28:54,880
security or

676
00:28:54,880 --> 00:28:57,200
validation calls and protected hardware

677
00:28:57,200 --> 00:28:59,440
implementations and protected software

678
00:28:59,440 --> 00:29:00,960
implementations

679
00:29:00,960 --> 00:29:04,159
and we will talk about these uh so this

680
00:29:04,159 --> 00:29:06,799
is a new initiative and we will rely on

681
00:29:06,799 --> 00:29:08,320
the results of

682
00:29:08,320 --> 00:29:13,559
this study to make our decision uh

683
00:29:13,760 --> 00:29:16,080
the final decision and side channel

684
00:29:16,080 --> 00:29:18,399
resistance of these candidates will also

685
00:29:18,399 --> 00:29:20,159
be considered in the

686
00:29:20,159 --> 00:29:22,640
last round of the evaluation

687
00:29:22,640 --> 00:29:24,960
and

688
00:29:24,960 --> 00:29:27,840
we are also planning to host a workshop

689
00:29:27,840 --> 00:29:31,840
which will be next month may 9 to 11. uh

690
00:29:31,840 --> 00:29:34,480
the workshop is going to be virtual the

691
00:29:34,480 --> 00:29:36,799
accepted papers are already announced on

692
00:29:36,799 --> 00:29:39,600
our website and the registration is open

693
00:29:39,600 --> 00:29:40,720
right now

694
00:29:40,720 --> 00:29:42,960
and um

695
00:29:42,960 --> 00:29:43,760
so

696
00:29:43,760 --> 00:29:44,720
we will

697
00:29:44,720 --> 00:29:47,600
hopefully have a chance to discuss

698
00:29:47,600 --> 00:29:50,640
in detail how we are going to proceed

699
00:29:50,640 --> 00:29:52,840
and how we're going to evaluate the

700
00:29:52,840 --> 00:29:56,080
candidates uh the remaining

701
00:29:56,080 --> 00:29:59,279
parts of the round three

702
00:29:59,279 --> 00:30:02,159
and uh this slide just summarizes the

703
00:30:02,159 --> 00:30:04,320
timeline of the project so

704
00:30:04,320 --> 00:30:08,480
uh the early stage from 2015 to 2018 we

705
00:30:08,480 --> 00:30:10,480
have posted the first and the second

706
00:30:10,480 --> 00:30:13,600
workshop and we also published a report

707
00:30:13,600 --> 00:30:16,000
uh summarizing dark observations a

708
00:30:16,000 --> 00:30:18,320
report on lightweight cryptography

709
00:30:18,320 --> 00:30:22,000
and in 2019 we had the call um

710
00:30:22,000 --> 00:30:23,440
[Music]

711
00:30:23,440 --> 00:30:25,279
the submissions worth you

712
00:30:25,279 --> 00:30:28,320
and we had the round one

713
00:30:28,320 --> 00:30:32,520
uh and published the nist ir

714
00:30:32,520 --> 00:30:35,440
8168 which is the status first data

715
00:30:35,440 --> 00:30:37,520
support and then round two started and

716
00:30:37,520 --> 00:30:41,679
we had the third workshop in 2020 and 21

717
00:30:41,679 --> 00:30:44,720
we had the fourth workshop and

718
00:30:44,720 --> 00:30:47,279
round three started we had we published

719
00:30:47,279 --> 00:30:48,720
a second round

720
00:30:48,720 --> 00:30:52,480
report and in 2022 we will have the

721
00:30:52,480 --> 00:30:54,399
fifth workshop and hopefully we're

722
00:30:54,399 --> 00:30:56,399
planning to announce the winner in the

723
00:30:56,399 --> 00:30:59,200
2022.

724
00:30:59,200 --> 00:31:02,080
okay what are our next steps so we are

725
00:31:02,080 --> 00:31:03,760
going to continue evaluate the

726
00:31:03,760 --> 00:31:05,679
candidates

727
00:31:05,679 --> 00:31:07,679
we are going to host a fifth lightweight

728
00:31:07,679 --> 00:31:10,080
cryptography workshop in may

729
00:31:10,080 --> 00:31:11,600
and

730
00:31:11,600 --> 00:31:13,679
depending on

731
00:31:13,679 --> 00:31:16,159
our results how comfortable we are with

732
00:31:16,159 --> 00:31:18,640
our decision we are hoping to make our

733
00:31:18,640 --> 00:31:21,919
decision uh the selection of a winner or

734
00:31:21,919 --> 00:31:22,960
winners

735
00:31:22,960 --> 00:31:25,440
uh by before the end of this year

736
00:31:25,440 --> 00:31:28,320
um and we will of course again publish a

737
00:31:28,320 --> 00:31:31,600
statements report uh

738
00:31:31,679 --> 00:31:34,799
explaining justifying our decision and

739
00:31:34,799 --> 00:31:36,960
then the standardization process will

740
00:31:36,960 --> 00:31:39,360
begin

741
00:31:39,679 --> 00:31:42,720
okay yeah so i would like to end my note

742
00:31:42,720 --> 00:31:45,120
with um

743
00:31:45,120 --> 00:31:47,760
and my toe with a note saying that

744
00:31:47,760 --> 00:31:50,159
uh although the name includes

745
00:31:50,159 --> 00:31:52,320
lightweight this protections this

746
00:31:52,320 --> 00:31:54,720
cryptography doesn't mean weak

747
00:31:54,720 --> 00:31:55,530
it doesn't mean

748
00:31:55,530 --> 00:31:56,880
[Music]

749
00:31:56,880 --> 00:31:58,159
um

750
00:31:58,159 --> 00:32:00,880
we cannot rely on these but they they

751
00:32:00,880 --> 00:32:03,360
are just tailored for constraint devices

752
00:32:03,360 --> 00:32:06,240
they are designed slightly differently

753
00:32:06,240 --> 00:32:08,240
with different concerns

754
00:32:08,240 --> 00:32:10,159
and um

755
00:32:10,159 --> 00:32:11,840
hopefully we are going to have a

756
00:32:11,840 --> 00:32:14,320
standard that will that can be used in

757
00:32:14,320 --> 00:32:16,559
these devices and

758
00:32:16,559 --> 00:32:19,840
people will start using this standard

759
00:32:19,840 --> 00:32:21,919
okay thank you for listening

760
00:32:21,919 --> 00:32:25,919
so if you want to contact us this is our

761
00:32:25,919 --> 00:32:28,720
email address we have a public forum

762
00:32:28,720 --> 00:32:32,399
and we have a project web page where we

763
00:32:32,399 --> 00:32:34,480
all of the analysis and now important

764
00:32:34,480 --> 00:32:36,480
announcements are

765
00:32:36,480 --> 00:32:38,320
done through either the forum or the

766
00:32:38,320 --> 00:32:40,960
website and we also have a github web

767
00:32:40,960 --> 00:32:44,080
page that includes the implementations

768
00:32:44,080 --> 00:32:46,320
thank you everyone thanks also to the

769
00:32:46,320 --> 00:32:49,780
organizers of the workshop

770
00:32:49,780 --> 00:32:54,069
[Applause]

771
00:32:54,240 --> 00:32:55,930
[Music]

772
00:32:55,930 --> 00:32:59,519
[Applause]

773
00:32:59,519 --> 00:33:01,440
so if there are any questions malcolm is

774
00:33:01,440 --> 00:33:02,880
in the

775
00:33:02,880 --> 00:33:05,600
zoom chat or in the zoom room so she can

776
00:33:05,600 --> 00:33:08,080
take any questions

777
00:33:08,080 --> 00:33:09,200
if you have a question please come

778
00:33:09,200 --> 00:33:12,240
forward to the microphone

779
00:33:13,279 --> 00:33:17,360
so hi melton thanks for the this nice uh

780
00:33:17,360 --> 00:33:18,640
talk

781
00:33:18,640 --> 00:33:19,440
so

782
00:33:19,440 --> 00:33:21,840
connecting to your last comment on

783
00:33:21,840 --> 00:33:23,679
the fact that lightweight is still very

784
00:33:23,679 --> 00:33:26,159
secure

785
00:33:26,240 --> 00:33:29,440
so i'm wondering do you think that

786
00:33:29,440 --> 00:33:33,039
will still make sense beside the legacy

787
00:33:33,039 --> 00:33:36,799
to use aes or chatri as primitives if

788
00:33:36,799 --> 00:33:38,399
the lightweight primitives already

789
00:33:38,399 --> 00:33:41,039
provide a very high security

790
00:33:41,039 --> 00:33:42,480
yeah

791
00:33:42,480 --> 00:33:45,120
so of course uh

792
00:33:45,120 --> 00:33:47,120
this these primitives will not be a

793
00:33:47,120 --> 00:33:49,519
replacement for aes

794
00:33:49,519 --> 00:33:52,080
or shall i mean if they support hashing

795
00:33:52,080 --> 00:33:54,799
uh or a replacement for shot two or so

796
00:33:54,799 --> 00:33:55,679
three

797
00:33:55,679 --> 00:33:58,559
so uh they will not be very efficient in

798
00:33:58,559 --> 00:33:59,600
uh

799
00:33:59,600 --> 00:34:03,279
in servers or big pcs so where they

800
00:34:03,279 --> 00:34:06,559
where we have aes instructions so they

801
00:34:06,559 --> 00:34:09,359
will be probably very slow in those

802
00:34:09,359 --> 00:34:11,119
environments so

803
00:34:11,119 --> 00:34:13,520
they won't be a replacement

804
00:34:13,520 --> 00:34:18,119
this is just tailored for small devices

805
00:34:21,440 --> 00:34:23,760
thank you so much

806
00:34:23,760 --> 00:34:26,639
i think um that we are running out of

807
00:34:26,639 --> 00:34:28,560
time and i'm gonna switch to the next

808
00:34:28,560 --> 00:34:30,320
speaker if there are any questions still

809
00:34:30,320 --> 00:34:32,159
pending let's go to the

810
00:34:32,159 --> 00:34:35,440
uh we can answer that in the chat

811
00:34:35,440 --> 00:34:37,280
let's thank the speaker again

812
00:34:37,280 --> 00:34:37,739
[Applause]

813
00:34:37,739 --> 00:34:43,989
[Music]

814
00:34:43,989 --> 00:34:45,520
[Applause]

815
00:34:45,520 --> 00:34:47,359
then we continue the symmetric

816
00:34:47,359 --> 00:34:50,000
cryptography session

817
00:34:50,000 --> 00:34:52,480
with a presentation titled rocked

818
00:34:52,480 --> 00:34:54,159
pseudorandom permutations and their

819
00:34:54,159 --> 00:34:56,399
applications

820
00:34:56,399 --> 00:34:59,200
which should be on the screen soon

821
00:34:59,200 --> 00:35:00,839
and the speaker will be

822
00:35:00,839 --> 00:35:04,560
jean-paul hello yeah okay okay

823
00:35:04,560 --> 00:35:05,440
so

824
00:35:05,440 --> 00:35:08,480
this talk is based on two works

825
00:35:08,480 --> 00:35:09,450
one with uh

826
00:35:09,450 --> 00:35:10,640
[Music]

827
00:35:10,640 --> 00:35:12,480
and another one with alessandra maloney

828
00:35:12,480 --> 00:35:14,960
jean-pierre moon and martin stein

829
00:35:14,960 --> 00:35:17,680
and the notion of rugged prps

830
00:35:17,680 --> 00:35:19,280
has been developed in parallel in these

831
00:35:19,280 --> 00:35:21,280
two works

832
00:35:21,280 --> 00:35:24,640
so i'll start this talk by

833
00:35:24,640 --> 00:35:27,040
defining what rugged prps are and

834
00:35:27,040 --> 00:35:29,119
showing a construction

835
00:35:29,119 --> 00:35:30,400
i'll then show how we can transform

836
00:35:30,400 --> 00:35:33,920
rugged prps into aad schemes

837
00:35:33,920 --> 00:35:35,760
then i'll introduce a new primitive

838
00:35:35,760 --> 00:35:38,400
called nonset aad and i'll show how it

839
00:35:38,400 --> 00:35:41,200
can be realized from rugged prps and how

840
00:35:41,200 --> 00:35:43,359
this is useful in the context of orders

841
00:35:43,359 --> 00:35:45,359
in channels

842
00:35:45,359 --> 00:35:48,560
and i also show in a very briefly how

843
00:35:48,560 --> 00:35:52,560
rugged prps can be beneficial to tour

844
00:35:52,560 --> 00:35:55,119
so let's start with the definition

845
00:35:55,119 --> 00:35:57,520
so from a tactical point of view a

846
00:35:57,520 --> 00:36:00,160
rugged prp is simply a treatment cipher

847
00:36:00,160 --> 00:36:02,160
a variable length to cable cipher over a

848
00:36:02,160 --> 00:36:03,520
split domain

849
00:36:03,520 --> 00:36:05,119
meaning that its simples and outputs

850
00:36:05,119 --> 00:36:07,119
consist of pairs of strings

851
00:36:07,119 --> 00:36:09,280
where the left string is of some fixed

852
00:36:09,280 --> 00:36:10,560
size n

853
00:36:10,560 --> 00:36:12,079
and the right string is a variable

854
00:36:12,079 --> 00:36:14,400
length

855
00:36:15,040 --> 00:36:15,920
and

856
00:36:15,920 --> 00:36:18,000
the unsub is a ciphering algorithm which

857
00:36:18,000 --> 00:36:21,280
takes a tweak and an input xl and xr

858
00:36:21,280 --> 00:36:23,200
returning yl and yr and the

859
00:36:23,200 --> 00:36:24,720
corresponding deciphering algorithm

860
00:36:24,720 --> 00:36:25,440
which

861
00:36:25,440 --> 00:36:28,480
reverses this process

862
00:36:28,800 --> 00:36:31,440
then from the point of view of security

863
00:36:31,440 --> 00:36:33,599
the security of rugged prp sits right in

864
00:36:33,599 --> 00:36:35,520
between that of a pseudonym permutation

865
00:36:35,520 --> 00:36:38,720
and a strong pseudonym permutation

866
00:36:38,720 --> 00:36:41,520
and intuitively the way we achieve this

867
00:36:41,520 --> 00:36:44,240
is by only giving partial access to the

868
00:36:44,240 --> 00:36:46,560
ciphering algorithm whereas the advisory

869
00:36:46,560 --> 00:36:47,839
has full access to the ciphering

870
00:36:47,839 --> 00:36:50,240
algorithm

871
00:36:50,240 --> 00:36:51,520
so let's look at the definition in more

872
00:36:51,520 --> 00:36:52,880
detail

873
00:36:52,880 --> 00:36:54,560
in the real world the advisor has access

874
00:36:54,560 --> 00:36:56,240
to a ciphering local under the ciphering

875
00:36:56,240 --> 00:36:57,680
oracle

876
00:36:57,680 --> 00:36:59,920
but we impose two further restrictions

877
00:36:59,920 --> 00:37:02,079
on what queries can the adversary make

878
00:37:02,079 --> 00:37:03,920
to the deciphering rocket

879
00:37:03,920 --> 00:37:06,480
so the first constraint is that

880
00:37:06,480 --> 00:37:08,560
the advance you can make a query

881
00:37:08,560 --> 00:37:10,880
involving a value il that was returned

882
00:37:10,880 --> 00:37:13,359
already by the enciphering oracle

883
00:37:13,359 --> 00:37:17,280
no matter what the values of t and y are

884
00:37:17,280 --> 00:37:20,079
the second constraint is that

885
00:37:20,079 --> 00:37:22,480
it cannot make it cannot repeat values

886
00:37:22,480 --> 00:37:26,079
of oil across deciphering queries

887
00:37:26,079 --> 00:37:27,440
and these turn out to be quite

888
00:37:27,440 --> 00:37:29,839
significant constraints on the adversary

889
00:37:29,839 --> 00:37:32,160
so in order to make the definition more

890
00:37:32,160 --> 00:37:33,280
useful

891
00:37:33,280 --> 00:37:35,280
we add a second way that the advisor can

892
00:37:35,280 --> 00:37:37,760
interact with the deciphering algorithm

893
00:37:37,760 --> 00:37:40,480
and this is via a third oracle called

894
00:37:40,480 --> 00:37:42,079
the guess oracle

895
00:37:42,079 --> 00:37:43,839
where here the adversaries applies in

896
00:37:43,839 --> 00:37:45,359
addition to the inputs to deciphering

897
00:37:45,359 --> 00:37:48,880
algorithm he supplies a guess xl prime

898
00:37:48,880 --> 00:37:50,960
of the left output

899
00:37:50,960 --> 00:37:52,720
and the oracle only returns true or

900
00:37:52,720 --> 00:37:54,720
false indicating whether the guess was

901
00:37:54,720 --> 00:37:57,520
correct or not

902
00:37:58,079 --> 00:37:59,200
so then

903
00:37:59,200 --> 00:38:00,720
so in summary

904
00:38:00,720 --> 00:38:02,320
the address has two ways of interacting

905
00:38:02,320 --> 00:38:06,079
with its ciphering algorithm one where

906
00:38:06,079 --> 00:38:07,359
the the

907
00:38:07,359 --> 00:38:09,760
the queries are constrained but then the

908
00:38:09,760 --> 00:38:11,599
adversary gets the full output and the

909
00:38:11,599 --> 00:38:13,440
second one the gas oracle

910
00:38:13,440 --> 00:38:14,400
where

911
00:38:14,400 --> 00:38:16,240
there's no constraints on the queries

912
00:38:16,240 --> 00:38:18,400
but the advancement gets one bit of

913
00:38:18,400 --> 00:38:20,800
output

914
00:38:21,119 --> 00:38:23,280
so then in the ideal world we simply

915
00:38:23,280 --> 00:38:25,280
replace that we could decipher

916
00:38:25,280 --> 00:38:28,400
with an ideal cipher

917
00:38:28,400 --> 00:38:30,160
and then

918
00:38:30,160 --> 00:38:33,520
we note that the adversary is only able

919
00:38:33,520 --> 00:38:34,480
to make

920
00:38:34,480 --> 00:38:36,640
with an ideal permutation with an ideal

921
00:38:36,640 --> 00:38:38,640
cipher and adversity is only able to

922
00:38:38,640 --> 00:38:40,640
make a successful guess query with

923
00:38:40,640 --> 00:38:42,640
negative probability so we simplify the

924
00:38:42,640 --> 00:38:45,359
definition with better

925
00:38:45,359 --> 00:38:47,760
and replace it with a dummy oracle that

926
00:38:47,760 --> 00:38:49,839
only returns false no matter what the

927
00:38:49,839 --> 00:38:52,320
input is

928
00:38:53,280 --> 00:38:54,720
and then for this definition to be

929
00:38:54,720 --> 00:38:55,680
useful

930
00:38:55,680 --> 00:38:57,920
or satisfiable sorry

931
00:38:57,920 --> 00:38:59,280
we must

932
00:38:59,280 --> 00:39:01,520
ensure that the advisor does not make

933
00:39:01,520 --> 00:39:03,680
queries that are trivial to gas

934
00:39:03,680 --> 00:39:06,880
right so that's the definition in full

935
00:39:06,880 --> 00:39:08,000
let's now look at potential

936
00:39:08,000 --> 00:39:09,680
constructions

937
00:39:09,680 --> 00:39:11,520
so what i'm showing you here is the piv

938
00:39:11,520 --> 00:39:12,640
construction

939
00:39:12,640 --> 00:39:14,960
which was proposed in 2013 by

940
00:39:14,960 --> 00:39:16,560
shinto interaction

941
00:39:16,560 --> 00:39:18,560
and this constructs a variable-length

942
00:39:18,560 --> 00:39:21,040
tweakable cypher that is

943
00:39:21,040 --> 00:39:23,280
secure in the sprp sense meaning it's a

944
00:39:23,280 --> 00:39:25,520
strong sedan permutation

945
00:39:25,520 --> 00:39:27,680
it consists of three layers

946
00:39:27,680 --> 00:39:29,440
two of which are

947
00:39:29,440 --> 00:39:31,440
a fixed input length tweakable cipher

948
00:39:31,440 --> 00:39:34,000
that can handle a large tweak

949
00:39:34,000 --> 00:39:35,920
and the middle layer which is simply

950
00:39:35,920 --> 00:39:38,560
available output length prf f

951
00:39:38,560 --> 00:39:39,920
that can normally be essentially

952
00:39:39,920 --> 00:39:43,839
something like as encounter mode

953
00:39:44,000 --> 00:39:45,680
so now if we take this construction and

954
00:39:45,680 --> 00:39:48,560
truncate the last layer we get what we

955
00:39:48,560 --> 00:39:51,280
call the uiv construction

956
00:39:51,280 --> 00:39:53,040
and while this construction is not

957
00:39:53,040 --> 00:39:54,160
sufficient

958
00:39:54,160 --> 00:39:56,560
for a strong prp it suffices for a

959
00:39:56,560 --> 00:39:59,119
rugged prp

960
00:39:59,119 --> 00:40:01,119
in addition it can be instantiated with

961
00:40:01,119 --> 00:40:02,560
the same components

962
00:40:02,560 --> 00:40:04,079
leading to performance characteristics

963
00:40:04,079 --> 00:40:07,760
that are very similar to this msid

964
00:40:07,760 --> 00:40:09,920
and it's also closely related to another

965
00:40:09,920 --> 00:40:12,480
scheme an aed scheme

966
00:40:12,480 --> 00:40:14,800
which is called gcne map and which was

967
00:40:14,800 --> 00:40:18,079
proposed in crypto 2017 by

968
00:40:18,079 --> 00:40:20,800
ashur dunkermann and lux

969
00:40:20,800 --> 00:40:22,240
but i'll come to that in a bit more

970
00:40:22,240 --> 00:40:24,960
later

971
00:40:24,960 --> 00:40:27,599
so what are the prp is good for for one

972
00:40:27,599 --> 00:40:30,560
thing we can easily transform them into

973
00:40:30,560 --> 00:40:32,880
non-spaced aed schemes

974
00:40:32,880 --> 00:40:34,079
with varying

975
00:40:34,079 --> 00:40:36,800
security properties

976
00:40:36,800 --> 00:40:40,000
so the problem of translating a cipher

977
00:40:40,000 --> 00:40:42,240
into an aed scheme dates back to the

978
00:40:42,240 --> 00:40:44,640
work of balayan dragoy from 2000

979
00:40:44,640 --> 00:40:46,000
in what they call the encoding and

980
00:40:46,000 --> 00:40:48,319
cipher paradigm which was then revisited

981
00:40:48,319 --> 00:40:51,119
by shinto and rashima 2013.

982
00:40:51,119 --> 00:40:53,760
however these fireworks assumed that the

983
00:40:53,760 --> 00:40:55,760
cipher was a strong prp

984
00:40:55,760 --> 00:40:58,160
whereas here will make do with a weaker

985
00:40:58,160 --> 00:41:01,598
primitive which is dragon prp

986
00:41:02,240 --> 00:41:03,359
so

987
00:41:03,359 --> 00:41:04,720
in our first construction data

988
00:41:04,720 --> 00:41:08,000
construction we simply replace the tweak

989
00:41:08,000 --> 00:41:09,440
with an encoding of the north and the

990
00:41:09,440 --> 00:41:10,400
header

991
00:41:10,400 --> 00:41:12,720
we place the message in the right report

992
00:41:12,720 --> 00:41:14,880
and we put some redundant bits fixed

993
00:41:14,880 --> 00:41:17,599
zero bits in the left input

994
00:41:17,599 --> 00:41:19,680
then during decryption we decipher in

995
00:41:19,680 --> 00:41:21,280
the natural way

996
00:41:21,280 --> 00:41:24,000
and we check whether the left's output

997
00:41:24,000 --> 00:41:26,000
is equal to the or zero string

998
00:41:26,000 --> 00:41:27,760
and if that's the case the encryption

999
00:41:27,760 --> 00:41:29,200
has succeeded and returned the message

1000
00:41:29,200 --> 00:41:30,079
jam

1001
00:41:30,079 --> 00:41:34,040
otherwise encryption fails

1002
00:41:36,240 --> 00:41:37,119
so

1003
00:41:37,119 --> 00:41:39,440
then we show that if the underlying

1004
00:41:39,440 --> 00:41:41,839
cypher is rugged prp not only this gives

1005
00:41:41,839 --> 00:41:44,640
us a secure aed scheme but also one that

1006
00:41:44,640 --> 00:41:48,240
is secure against misuse

1007
00:41:48,240 --> 00:41:50,800
now the symmetry between

1008
00:41:50,800 --> 00:41:53,200
cyphering and deciphering and the

1009
00:41:53,200 --> 00:41:55,839
definition of rugged prps prompts us to

1010
00:41:55,839 --> 00:41:58,079
consider a different construction where

1011
00:41:58,079 --> 00:41:59,200
we use

1012
00:41:59,200 --> 00:42:01,359
deciphering to encrypt and we use and

1013
00:42:01,359 --> 00:42:03,040
ciphering to decrypt

1014
00:42:03,040 --> 00:42:04,400
because these give difference i could

1015
00:42:04,400 --> 00:42:06,720
have different security properties

1016
00:42:06,720 --> 00:42:09,200
so things get a bit trickier here

1017
00:42:09,200 --> 00:42:10,400
and because if you remember the

1018
00:42:10,400 --> 00:42:12,960
definition we cannot repeat the yl value

1019
00:42:12,960 --> 00:42:14,400
and deciphering

1020
00:42:14,400 --> 00:42:16,319
so that becomes a natural candidate

1021
00:42:16,319 --> 00:42:18,400
where to place the nodes so we place

1022
00:42:18,400 --> 00:42:20,560
them once in the left input

1023
00:42:20,560 --> 00:42:21,839
and i'm going to put the header in the

1024
00:42:21,839 --> 00:42:22,880
tweak

1025
00:42:22,880 --> 00:42:25,200
and now we put the redundant bits and

1026
00:42:25,200 --> 00:42:26,960
the right part

1027
00:42:26,960 --> 00:42:28,720
and this turns out to be okay in this

1028
00:42:28,720 --> 00:42:30,480
case because we're using n ciphering to

1029
00:42:30,480 --> 00:42:32,640
the crypt but it wouldn't have been okay

1030
00:42:32,640 --> 00:42:35,680
in the previous construction

1031
00:42:37,359 --> 00:42:40,880
and then we decrypt indenture away

1032
00:42:40,880 --> 00:42:43,520
and this construction instead

1033
00:42:43,520 --> 00:42:45,040
assuming always that the underlying

1034
00:42:45,040 --> 00:42:47,760
cypher is a rugged prp this gives us an

1035
00:42:47,760 --> 00:42:50,400
ead scheme and once hiding a aed scheme

1036
00:42:50,400 --> 00:42:53,200
that is secure against

1037
00:42:53,200 --> 00:42:54,319
under the release of a verified

1038
00:42:54,319 --> 00:42:56,319
plaintext

1039
00:42:56,319 --> 00:42:58,400
and when instantiated

1040
00:42:58,400 --> 00:43:02,000
with gcm uiv this corresponds exactly to

1041
00:43:02,000 --> 00:43:05,200
the skin variation before gcmrap

1042
00:43:05,200 --> 00:43:06,480
however we can instantiate this

1043
00:43:06,480 --> 00:43:08,640
construction slightly differently

1044
00:43:08,640 --> 00:43:10,480
in order to have

1045
00:43:10,480 --> 00:43:13,359
more compact ciphertext

1046
00:43:13,359 --> 00:43:15,839
so essentially what we can do is

1047
00:43:15,839 --> 00:43:19,119
get rid of the zero bits and simply use

1048
00:43:19,119 --> 00:43:21,760
the nouns for the redundancy to get the

1049
00:43:21,760 --> 00:43:24,240
integrity check

1050
00:43:24,240 --> 00:43:27,040
right so here decryption

1051
00:43:27,040 --> 00:43:28,560
simply verifies that the recovered

1052
00:43:28,560 --> 00:43:32,640
months is equal to the supplied months

1053
00:43:33,440 --> 00:43:35,680
and this way we still get a scheme that

1054
00:43:35,680 --> 00:43:39,440
is secure under derivative plaintext

1055
00:43:39,440 --> 00:43:41,200
but it has a more complex cipher text

1056
00:43:41,200 --> 00:43:44,640
when compared to gcmrop

1057
00:43:45,760 --> 00:43:48,560
okay so our application of regular prps

1058
00:43:48,560 --> 00:43:51,200
is to we can also build a slightly more

1059
00:43:51,200 --> 00:43:54,079
general primitive than aad which we call

1060
00:43:54,079 --> 00:43:55,480
non-set aed

1061
00:43:55,480 --> 00:43:57,920
[Music]

1062
00:43:57,920 --> 00:43:59,440
so this last trick

1063
00:43:59,440 --> 00:44:01,359
of using the nonce to authenticate can

1064
00:44:01,359 --> 00:44:02,800
also be done with the ete construction

1065
00:44:02,800 --> 00:44:05,040
the first construction we saw

1066
00:44:05,040 --> 00:44:06,480
and this gives rise to the construction

1067
00:44:06,480 --> 00:44:10,000
shown here but we can go a step further

1068
00:44:10,000 --> 00:44:12,319
and to generalize it more and replace

1069
00:44:12,319 --> 00:44:15,200
the supported test during decryption

1070
00:44:15,200 --> 00:44:17,359
with a set membership test where now

1071
00:44:17,359 --> 00:44:20,839
decryption takes a set of nuances w

1072
00:44:20,839 --> 00:44:23,359
and authentication succeeds if the

1073
00:44:23,359 --> 00:44:26,720
retavered nonce is in that set

1074
00:44:26,720 --> 00:44:27,520
and

1075
00:44:27,520 --> 00:44:30,319
this is what we call the awm transform

1076
00:44:30,319 --> 00:44:32,560
and it transforms the rugged prp into an

1077
00:44:32,560 --> 00:44:33,760
onset

1078
00:44:33,760 --> 00:44:35,920
aad

1079
00:44:35,920 --> 00:44:39,019
[Applause]

1080
00:44:40,000 --> 00:44:42,240
yeah

1081
00:44:42,400 --> 00:44:44,960
that is also resistant

1082
00:44:44,960 --> 00:44:46,960
so let me define what is known as aad

1083
00:44:46,960 --> 00:44:48,240
more formally

1084
00:44:48,240 --> 00:44:50,319
so in the syntax the only thing that

1085
00:44:50,319 --> 00:44:51,440
changes

1086
00:44:51,440 --> 00:44:53,200
is the decryption algorithm so now

1087
00:44:53,200 --> 00:44:57,200
decryption takes a set of nuances w

1088
00:44:57,200 --> 00:44:59,760
and returns a pair of strings n and them

1089
00:44:59,760 --> 00:45:02,160
or to error messages

1090
00:45:02,160 --> 00:45:04,640
and it must hold also that the recovered

1091
00:45:04,640 --> 00:45:06,480
nonce is in the set that was applied to

1092
00:45:06,480 --> 00:45:09,359
the decryption algorithm

1093
00:45:09,359 --> 00:45:11,599
then correctness can be easily adapted

1094
00:45:11,599 --> 00:45:12,720
to mean that

1095
00:45:12,720 --> 00:45:15,280
whenever the nonce whenever this nonset

1096
00:45:15,280 --> 00:45:17,440
w contains the nouns that was used to

1097
00:45:17,440 --> 00:45:19,760
encrypt that cipher text

1098
00:45:19,760 --> 00:45:22,160
and decryption should succeed

1099
00:45:22,160 --> 00:45:24,160
and security also translates in a

1100
00:45:24,160 --> 00:45:26,000
straightforward manner

1101
00:45:26,000 --> 00:45:27,680
we only need to adapt

1102
00:45:27,680 --> 00:45:29,280
the definition of prohibited queries

1103
00:45:29,280 --> 00:45:30,640
that the advisor cannot make to the

1104
00:45:30,640 --> 00:45:32,880
encryption algorithm and in this case it

1105
00:45:32,880 --> 00:45:34,480
should be that

1106
00:45:34,480 --> 00:45:36,560
the address cannot query make a query

1107
00:45:36,560 --> 00:45:39,280
with w containing the nonce that was

1108
00:45:39,280 --> 00:45:42,000
used to produce that ciphertext

1109
00:45:42,000 --> 00:45:45,599
so then what is nonset ad useful for

1110
00:45:45,599 --> 00:45:47,760
right so my motivation is that it's

1111
00:45:47,760 --> 00:45:50,240
natural primitive in the context of all

1112
00:45:50,240 --> 00:45:52,079
the resilient channels

1113
00:45:52,079 --> 00:45:55,040
such as quick entity ls

1114
00:45:55,040 --> 00:45:57,359
and i will show you next that

1115
00:45:57,359 --> 00:45:59,520
we can genetically transform any nonset

1116
00:45:59,520 --> 00:46:00,640
aad

1117
00:46:00,640 --> 00:46:02,800
into such a channel for a white class of

1118
00:46:02,800 --> 00:46:05,599
functionalities

1119
00:46:06,000 --> 00:46:07,920
and it turns out also that monster tad

1120
00:46:07,920 --> 00:46:10,079
can be constructed in a blackbox manner

1121
00:46:10,079 --> 00:46:12,400
from non's hiding aad

1122
00:46:12,400 --> 00:46:14,560
but the aw construction is advantageous

1123
00:46:14,560 --> 00:46:16,720
because it constructed directly and

1124
00:46:16,720 --> 00:46:18,240
results in more compact ciphertext as

1125
00:46:18,240 --> 00:46:20,479
well

1126
00:46:21,119 --> 00:46:22,960
so what we know exactly by orders in

1127
00:46:22,960 --> 00:46:25,280
channels this is essentially the general

1128
00:46:25,280 --> 00:46:27,440
component of protocols like quick entity

1129
00:46:27,440 --> 00:46:30,240
ls which need to operate over udp and

1130
00:46:30,240 --> 00:46:32,400
hands need to be able to handle

1131
00:46:32,400 --> 00:46:35,680
out of order delivery of ciphertext

1132
00:46:35,680 --> 00:46:38,000
and when constructing such channels a

1133
00:46:38,000 --> 00:46:40,480
variety of possibilities arise

1134
00:46:40,480 --> 00:46:42,560
depending on how to handle reorderings

1135
00:46:42,560 --> 00:46:44,720
replays corruptions and deletions and

1136
00:46:44,720 --> 00:46:48,000
how much of each to allow

1137
00:46:48,000 --> 00:46:50,640
and typically constructions make use of

1138
00:46:50,640 --> 00:46:51,760
one or more

1139
00:46:51,760 --> 00:46:53,440
window mechanisms which tend to

1140
00:46:53,440 --> 00:46:56,400
complicate the design of such channels

1141
00:46:56,400 --> 00:46:58,000
making them hard to analyze and

1142
00:46:58,000 --> 00:47:00,079
understand

1143
00:47:00,079 --> 00:47:02,400
from a multicultural perspective we can

1144
00:47:02,400 --> 00:47:04,160
capture the functionality of the secure

1145
00:47:04,160 --> 00:47:07,040
of a or desiring channel via something

1146
00:47:07,040 --> 00:47:08,880
called a support predicate

1147
00:47:08,880 --> 00:47:11,200
which then permeates to all aspects of

1148
00:47:11,200 --> 00:47:13,520
the channel from correctness to security

1149
00:47:13,520 --> 00:47:16,400
to the recent notion of robustness

1150
00:47:16,400 --> 00:47:18,079
so this is our construction for

1151
00:47:18,079 --> 00:47:19,920
translating onset aad

1152
00:47:19,920 --> 00:47:23,200
into another resilient channel

1153
00:47:23,200 --> 00:47:24,880
so its first component is the

1154
00:47:24,880 --> 00:47:27,280
non-station here shown in blue

1155
00:47:27,280 --> 00:47:29,040
and the second component

1156
00:47:29,040 --> 00:47:30,720
is a couple of algorithms which we call

1157
00:47:30,720 --> 00:47:33,200
the non-set processing algorithms

1158
00:47:33,200 --> 00:47:34,160
and

1159
00:47:34,160 --> 00:47:36,319
shown in red so the first algorithm

1160
00:47:36,319 --> 00:47:37,359
simply is

1161
00:47:37,359 --> 00:47:39,359
initialization

1162
00:47:39,359 --> 00:47:42,559
then non-sextract used in send takes the

1163
00:47:42,559 --> 00:47:44,720
current state and extracts unknowns and

1164
00:47:44,720 --> 00:47:46,160
updates the state

1165
00:47:46,160 --> 00:47:48,240
that's going to denounce is then fed to

1166
00:47:48,240 --> 00:47:50,400
the encryption algorithm so this once

1167
00:47:50,400 --> 00:47:52,079
extract here can simply be for example a

1168
00:47:52,079 --> 00:47:53,280
counter

1169
00:47:53,280 --> 00:47:55,119
then at the receiver end things are a

1170
00:47:55,119 --> 00:47:56,240
bit more interesting we have this

1171
00:47:56,240 --> 00:47:58,640
non-set policy algorithm which from the

1172
00:47:58,640 --> 00:48:01,520
state extracts a set of nonsense

1173
00:48:01,520 --> 00:48:03,119
that are then fed to the decryption

1174
00:48:03,119 --> 00:48:04,880
algorithm

1175
00:48:04,880 --> 00:48:06,720
and decryption then returns and runs on

1176
00:48:06,720 --> 00:48:09,040
the message that nonce is fed to the

1177
00:48:09,040 --> 00:48:10,960
state update algorithm together with the

1178
00:48:10,960 --> 00:48:12,000
state

1179
00:48:12,000 --> 00:48:14,319
the state is updated and based on that

1180
00:48:14,319 --> 00:48:15,520
nonce

1181
00:48:15,520 --> 00:48:17,760
and a message number is recovered for

1182
00:48:17,760 --> 00:48:20,640
the associated message

1183
00:48:20,640 --> 00:48:22,480
so the interesting aspect here is that

1184
00:48:22,480 --> 00:48:24,400
we're able to prove this construction

1185
00:48:24,400 --> 00:48:27,040
secure correct and robust

1186
00:48:27,040 --> 00:48:28,960
um

1187
00:48:28,960 --> 00:48:30,640
for any uncertainty id and for any

1188
00:48:30,640 --> 00:48:32,559
support predicate that we desire so any

1189
00:48:32,559 --> 00:48:34,800
desired functionality this template

1190
00:48:34,800 --> 00:48:37,119
construction always works

1191
00:48:37,119 --> 00:48:39,760
and the point is that the security

1192
00:48:39,760 --> 00:48:43,680
relies only on the onset aad part right

1193
00:48:43,680 --> 00:48:46,720
the other algorithms need to signify a

1194
00:48:46,720 --> 00:48:48,960
functional requirement that they

1195
00:48:48,960 --> 00:48:50,240
faithfully implement the support

1196
00:48:50,240 --> 00:48:51,520
predicate

1197
00:48:51,520 --> 00:48:52,559
so

1198
00:48:52,559 --> 00:48:54,480
an implementer can change the

1199
00:48:54,480 --> 00:48:56,240
definitions of non-subtract no side

1200
00:48:56,240 --> 00:48:58,400
policy and say tablet however they want

1201
00:48:58,400 --> 00:48:59,760
in order to get this desired

1202
00:48:59,760 --> 00:49:00,960
functionality

1203
00:49:00,960 --> 00:49:02,720
and automatically the channel is

1204
00:49:02,720 --> 00:49:05,680
guaranteed to be secure

1205
00:49:07,440 --> 00:49:10,240
so finally let me briefly outline the

1206
00:49:10,240 --> 00:49:13,440
application of the prp stud

1207
00:49:13,440 --> 00:49:15,520
so for quite some time now tor has been

1208
00:49:15,520 --> 00:49:16,960
known to be

1209
00:49:16,960 --> 00:49:19,119
susceptible to tagging attacks

1210
00:49:19,119 --> 00:49:21,599
which undermines piracy

1211
00:49:21,599 --> 00:49:22,559
and

1212
00:49:22,559 --> 00:49:24,800
the main suggestion for addressing this

1213
00:49:24,800 --> 00:49:26,480
is to replace the enemy encryption so

1214
00:49:26,480 --> 00:49:27,920
that each layer

1215
00:49:27,920 --> 00:49:30,240
of the angular encryption scheme is a

1216
00:49:30,240 --> 00:49:32,160
wide block cipher or a white block

1217
00:49:32,160 --> 00:49:33,920
strong prp

1218
00:49:33,920 --> 00:49:35,440
however in concurrent work we showed

1219
00:49:35,440 --> 00:49:37,599
that

1220
00:49:37,599 --> 00:49:39,839
one can do it less that is rugged prp is

1221
00:49:39,839 --> 00:49:41,760
sufficient for this purpose and one can

1222
00:49:41,760 --> 00:49:42,839
build a

1223
00:49:42,839 --> 00:49:46,319
scheme and from our good prps

1224
00:49:46,319 --> 00:49:48,240
actually we were drafting a proposal

1225
00:49:48,240 --> 00:49:50,720
based on gcm uiv that is in addition

1226
00:49:50,720 --> 00:49:52,800
forward secure protects against tagging

1227
00:49:52,800 --> 00:49:55,520
attacks and according to our benchmarks

1228
00:49:55,520 --> 00:49:59,280
it provides very competitive performance

1229
00:49:59,280 --> 00:50:00,960
so to conclude

1230
00:50:00,960 --> 00:50:03,119
we've introduced rugged prps which

1231
00:50:03,119 --> 00:50:05,599
provide a new trade-off between

1232
00:50:05,599 --> 00:50:07,359
security and performance

1233
00:50:07,359 --> 00:50:08,960
and i hope i convince you that they're

1234
00:50:08,960 --> 00:50:12,240
useful in a variety of applications

1235
00:50:12,240 --> 00:50:13,760
we're also currently exploring

1236
00:50:13,760 --> 00:50:15,119
alternative constructions besides the

1237
00:50:15,119 --> 00:50:17,440
uav construction

1238
00:50:17,440 --> 00:50:18,400
and

1239
00:50:18,400 --> 00:50:20,559
we also believe that nonsense ued is the

1240
00:50:20,559 --> 00:50:22,240
right abstraction

1241
00:50:22,240 --> 00:50:24,640
for understanding and constructing all

1242
00:50:24,640 --> 00:50:27,280
the resilient channels

1243
00:50:27,280 --> 00:50:29,280
so that concludes my talk thank you very

1244
00:50:29,280 --> 00:50:31,230
much

1245
00:50:31,230 --> 00:50:36,889
[Music]

1246
00:50:38,100 --> 00:50:40,480
[Applause]

1247
00:50:40,480 --> 00:50:41,760
thank you very much are there any

1248
00:50:41,760 --> 00:50:43,440
questions please come forward to the

1249
00:50:43,440 --> 00:50:45,760
microphone

1250
00:50:45,760 --> 00:50:47,440
thank you so much this is a really cool

1251
00:50:47,440 --> 00:50:49,119
little little thing

1252
00:50:49,119 --> 00:50:50,800
um okay

1253
00:50:50,800 --> 00:50:51,599
so

1254
00:50:51,599 --> 00:50:53,040
this is the first time i'm hearing about

1255
00:50:53,040 --> 00:50:53,839
this

1256
00:50:53,839 --> 00:50:56,160
my impression is that this would help so

1257
00:50:56,160 --> 00:50:59,040
much with protocol design especially

1258
00:50:59,040 --> 00:51:01,200
when folks were working on quick

1259
00:51:01,200 --> 00:51:03,119
i'm curious if you came up with this

1260
00:51:03,119 --> 00:51:04,640
idea like

1261
00:51:04,640 --> 00:51:06,800
when you developed this idea and if you

1262
00:51:06,800 --> 00:51:08,480
were like looking at the quick standard

1263
00:51:08,480 --> 00:51:10,640
when you were thinking about it

1264
00:51:10,640 --> 00:51:11,760
um

1265
00:51:11,760 --> 00:51:13,760
yeah it mostly came out of tor and then

1266
00:51:13,760 --> 00:51:15,839
realized that um it could be applied to

1267
00:51:15,839 --> 00:51:17,599
channels as well and we were looking at

1268
00:51:17,599 --> 00:51:20,319
the robust papers out it was newspaper

1269
00:51:20,319 --> 00:51:22,880
one quick so yeah there was this mix of

1270
00:51:22,880 --> 00:51:25,040
lucky events that led us to this cool

1271
00:51:25,040 --> 00:51:26,640
thank you so much for

1272
00:51:26,640 --> 00:51:28,319
for uh describing this thing you're

1273
00:51:28,319 --> 00:51:30,640
welcome

1274
00:51:33,119 --> 00:51:37,720
all right let's thank the speaker again

1275
00:51:42,160 --> 00:51:44,319
so this concludes the session but don't

1276
00:51:44,319 --> 00:51:46,720
go anywhere yet because now we have the

1277
00:51:46,720 --> 00:51:50,118
award ceremony

1278
00:51:50,720 --> 00:51:51,760
hello

1279
00:51:51,760 --> 00:51:53,119
hello hello

1280
00:51:53,119 --> 00:51:54,720
okay can you put up the slides to the

1281
00:51:54,720 --> 00:51:58,200
aboard so many

