1
00:01:14,960 --> 00:01:18,000
all right good afternoon everybody our

2
00:01:18,000 --> 00:01:20,000
good morning to folks remote good

3
00:01:20,000 --> 00:01:21,920
evening to folks in more easterly time

4
00:01:21,920 --> 00:01:23,040
zones

5
00:01:23,040 --> 00:01:24,840
uh

6
00:01:24,840 --> 00:01:27,840
this this is the

7
00:01:27,840 --> 00:01:30,960
1 30 p.m amsterdam time session about

8
00:01:30,960 --> 00:01:33,439
secure messaging um i will be your

9
00:01:33,439 --> 00:01:35,759
session chair i'm richard barnes

10
00:01:35,759 --> 00:01:37,840
um now i believe the conference has had

11
00:01:37,840 --> 00:01:39,600
a few remote presentations but i will be

12
00:01:39,600 --> 00:01:40,400
the first

13
00:01:40,400 --> 00:01:42,640
remote session chair of the of the

14
00:01:42,640 --> 00:01:45,040
conference so i appreciate it you know

15
00:01:45,040 --> 00:01:46,799
we might have a couple of bugs to work

16
00:01:46,799 --> 00:01:48,320
as we go so i appreciate your tolerance

17
00:01:48,320 --> 00:01:49,360
there

18
00:01:49,360 --> 00:01:51,360
uh with all that said though um i think

19
00:01:51,360 --> 00:01:54,560
let's go ahead and

20
00:01:54,560 --> 00:01:56,560
get straight into things um our first

21
00:01:56,560 --> 00:01:59,280
speaker today on secure messaging is uh

22
00:01:59,280 --> 00:02:01,920
britta hale uh to talk to us about uh

23
00:02:01,920 --> 00:02:03,759
securing messaging authentication

24
00:02:03,759 --> 00:02:06,240
against active men and middle attacks

25
00:02:06,240 --> 00:02:09,758
with that uh proto please

26
00:02:09,758 --> 00:02:11,220
hey thank you

27
00:02:11,220 --> 00:02:17,200
[Applause]

28
00:02:17,200 --> 00:02:19,760
the secure messaging has gathered quite

29
00:02:19,760 --> 00:02:21,200
a bit of attention the last several

30
00:02:21,200 --> 00:02:24,239
years due to its ability to have for one

31
00:02:24,239 --> 00:02:26,400
support asynchronicity

32
00:02:26,400 --> 00:02:30,080
as well as some post-compromise

33
00:02:30,080 --> 00:02:32,480
basically features such as forward

34
00:02:32,480 --> 00:02:35,519
secrecy and the ability to heal from a

35
00:02:35,519 --> 00:02:37,120
passive attacker

36
00:02:37,120 --> 00:02:39,519
and this work we'll look at the active

37
00:02:39,519 --> 00:02:41,040
attacker case

38
00:02:41,040 --> 00:02:42,720
this is joint work with my co-author

39
00:02:42,720 --> 00:02:45,360
benjamin darling

40
00:02:45,360 --> 00:02:48,080
the signal is fairly representative of a

41
00:02:48,080 --> 00:02:50,800
typical continuous key exchange protocol

42
00:02:50,800 --> 00:02:52,319
used in the messaging space and what

43
00:02:52,319 --> 00:02:54,239
we'll focus on here but the

44
00:02:54,239 --> 00:02:56,000
observations we have applied to other

45
00:02:56,000 --> 00:02:58,159
messaging protocols as well

46
00:02:58,159 --> 00:03:00,800
what you see here is the core of a

47
00:03:00,800 --> 00:03:02,640
signal ratchet essentially the

48
00:03:02,640 --> 00:03:04,560
asynchronous diffie-hellman ratchet

49
00:03:04,560 --> 00:03:06,159
between alice and bob

50
00:03:06,159 --> 00:03:08,239
with ratchet keys shown in blue and they

51
00:03:08,239 --> 00:03:10,480
are combined to make a premaster secret

52
00:03:10,480 --> 00:03:13,280
which is then kdf for a root key

53
00:03:13,280 --> 00:03:15,120
and every time we drive a new key we see

54
00:03:15,120 --> 00:03:16,800
that i think your slides are not

55
00:03:16,800 --> 00:03:18,480
transitioning you may want to re-share

56
00:03:18,480 --> 00:03:20,159
your slides

57
00:03:20,159 --> 00:03:22,080
oh thank you for letting me know i'll

58
00:03:22,080 --> 00:03:24,720
give that a try

59
00:03:31,760 --> 00:03:32,799
let me know if you can see the next

60
00:03:32,799 --> 00:03:35,440
slide please

61
00:03:35,680 --> 00:03:37,840
no

62
00:03:39,280 --> 00:03:41,760
okay

63
00:03:44,159 --> 00:03:48,560
it is showing that i cannot resume share

64
00:03:51,440 --> 00:03:54,480
it's blocked permissions

65
00:03:57,280 --> 00:04:00,400
there's something in the chat that says

66
00:04:00,400 --> 00:04:04,480
so you need to do control i in the pdf

67
00:04:04,480 --> 00:04:07,599
can you av team at the end hop open

68
00:04:07,599 --> 00:04:10,640
there we go thank you

69
00:04:10,959 --> 00:04:13,760
can you see the different slides

70
00:04:13,760 --> 00:04:16,798
that looks good to me all good okay

71
00:04:16,798 --> 00:04:18,798
go go ahead all right

72
00:04:18,798 --> 00:04:20,560
so we're back to alice and bob and we've

73
00:04:20,560 --> 00:04:22,079
got distribution service in the middle

74
00:04:22,079 --> 00:04:24,160
uh supporting this asynchronous key

75
00:04:24,160 --> 00:04:25,440
exchange

76
00:04:25,440 --> 00:04:28,639
so so far so good uh these sessions are

77
00:04:28,639 --> 00:04:31,280
often lasting for

78
00:04:31,280 --> 00:04:33,360
months or even years so it's a

79
00:04:33,360 --> 00:04:36,400
continuous long-lived session

80
00:04:36,400 --> 00:04:38,240
and that raises some questions about

81
00:04:38,240 --> 00:04:40,000
authentication because in a normal key

82
00:04:40,000 --> 00:04:41,759
exchange protocol parties will

83
00:04:41,759 --> 00:04:44,160
authenticate at the very start of the

84
00:04:44,160 --> 00:04:45,680
protocol

85
00:04:45,680 --> 00:04:47,199
so how do we do this in signal for

86
00:04:47,199 --> 00:04:48,960
example

87
00:04:48,960 --> 00:04:52,080
well in signal we have a variant that

88
00:04:52,080 --> 00:04:55,199
uses the user as an out of band

89
00:04:55,199 --> 00:04:56,720
mechanism

90
00:04:56,720 --> 00:04:58,560
to support authentication and it works

91
00:04:58,560 --> 00:05:00,320
on trust in the first use method

92
00:05:00,320 --> 00:05:02,479
otherwise so you just trust the keys at

93
00:05:02,479 --> 00:05:03,840
the beginning but at some point the

94
00:05:03,840 --> 00:05:06,720
users meet up and compare either numeric

95
00:05:06,720 --> 00:05:09,600
codes or scan qr codes

96
00:05:09,600 --> 00:05:12,639
that are paid based on public

97
00:05:12,639 --> 00:05:14,639
keys so this very important point they

98
00:05:14,639 --> 00:05:16,960
are based on public keys uh they're then

99
00:05:16,960 --> 00:05:19,360
used to compute fingerprints and are

100
00:05:19,360 --> 00:05:21,680
concatenated

101
00:05:21,680 --> 00:05:23,120
so the claim in the app is that this

102
00:05:23,120 --> 00:05:25,600
will verify the security of the user's

103
00:05:25,600 --> 00:05:28,160
encryption

104
00:05:28,560 --> 00:05:32,240
but there are a few issues

105
00:05:32,240 --> 00:05:34,960
first of all these fingerprints again

106
00:05:34,960 --> 00:05:37,280
are based on public static information

107
00:05:37,280 --> 00:05:39,120
so unlike with a normal mutual

108
00:05:39,120 --> 00:05:40,960
authentication protocol where

109
00:05:40,960 --> 00:05:43,280
the users are proving knowledge of some

110
00:05:43,280 --> 00:05:45,120
secret key here they are proving

111
00:05:45,120 --> 00:05:48,639
knowledge of public static values

112
00:05:48,639 --> 00:05:50,800
this is further complicated by the fact

113
00:05:50,800 --> 00:05:52,560
that we are showing them to the user

114
00:05:52,560 --> 00:05:54,000
through a display and there's various

115
00:05:54,000 --> 00:05:55,680
attacks in the literature that actually

116
00:05:55,680 --> 00:05:57,600
target the display

117
00:05:57,600 --> 00:06:00,080
to and from the user

118
00:06:00,080 --> 00:06:02,080
these types of attacks do not generally

119
00:06:02,080 --> 00:06:04,000
imply compromise of the secret keys on

120
00:06:04,000 --> 00:06:06,560
the device so it's not a typical crypto

121
00:06:06,560 --> 00:06:09,039
compromise instead they

122
00:06:09,039 --> 00:06:10,319
either through malware or various

123
00:06:10,319 --> 00:06:12,160
techniques are able to display something

124
00:06:12,160 --> 00:06:13,840
to the user

125
00:06:13,840 --> 00:06:15,840
or alternatively

126
00:06:15,840 --> 00:06:20,440
manipulate the user input on the screen

127
00:06:21,039 --> 00:06:22,160
another

128
00:06:22,160 --> 00:06:24,880
consideration to this is the possibility

129
00:06:24,880 --> 00:06:26,400
of

130
00:06:26,400 --> 00:06:28,800
impersonation after compromise so if a

131
00:06:28,800 --> 00:06:30,400
device was compromised in the

132
00:06:30,400 --> 00:06:32,479
cryptographic sense

133
00:06:32,479 --> 00:06:34,880
a man in the middle could basically

134
00:06:34,880 --> 00:06:37,120
impersonate alice to bob or bob to alice

135
00:06:37,120 --> 00:06:39,360
uh fairly trivially that's the active

136
00:06:39,360 --> 00:06:41,360
attack that's normally out of scope and

137
00:06:41,360 --> 00:06:44,160
in signal analyses

138
00:06:44,160 --> 00:06:46,319
however if you're talking about alison

139
00:06:46,319 --> 00:06:48,880
bob comparing qr codes out of band for

140
00:06:48,880 --> 00:06:51,440
example this will not be detected

141
00:06:51,440 --> 00:06:53,440
because once again those are based those

142
00:06:53,440 --> 00:06:55,120
qr code computations are based on

143
00:06:55,120 --> 00:06:57,759
long-term static values and have nothing

144
00:06:57,759 --> 00:06:59,280
to do with happening with what's

145
00:06:59,280 --> 00:07:02,319
happening here in a given epoch so

146
00:07:02,319 --> 00:07:03,759
essentially alice and bob can compare

147
00:07:03,759 --> 00:07:07,039
everything looks great in person

148
00:07:07,039 --> 00:07:10,800
all the while being mad in the middle

149
00:07:10,800 --> 00:07:14,240
so this is not exactly ideal

150
00:07:14,240 --> 00:07:18,720
and the question is can we do better

151
00:07:18,720 --> 00:07:20,400
now i should know that there is a

152
00:07:20,400 --> 00:07:23,120
possible argument here where we say

153
00:07:23,120 --> 00:07:25,440
actually compromise is our scope for

154
00:07:25,440 --> 00:07:27,840
signal authentication or any similar

155
00:07:27,840 --> 00:07:30,080
messaging authentication

156
00:07:30,080 --> 00:07:32,479
so this simply doesn't apply

157
00:07:32,479 --> 00:07:34,400
however the natural

158
00:07:34,400 --> 00:07:36,880
observation encounter to that

159
00:07:36,880 --> 00:07:38,639
is that if we are not considering

160
00:07:38,639 --> 00:07:41,199
compromise why are we doing a ratcheted

161
00:07:41,199 --> 00:07:42,960
key exchange at all

162
00:07:42,960 --> 00:07:45,280
because if we're not considering that a

163
00:07:45,280 --> 00:07:46,560
device could be compromised then we

164
00:07:46,560 --> 00:07:48,240
could just assume that a long-term

165
00:07:48,240 --> 00:07:51,840
static symmetric key is fine

166
00:07:52,000 --> 00:07:54,560
so if we would really like to get

167
00:07:54,560 --> 00:07:57,120
authentication on this that matches the

168
00:07:57,120 --> 00:07:58,800
signal context this ratcheted key

169
00:07:58,800 --> 00:08:01,440
exchange context somehow we need to tie

170
00:08:01,440 --> 00:08:04,000
it to the epochs

171
00:08:04,000 --> 00:08:06,639
and we also need to

172
00:08:06,639 --> 00:08:07,840
basically

173
00:08:07,840 --> 00:08:10,319
model that human user in some way

174
00:08:10,319 --> 00:08:11,759
now that's not necessarily intrinsic

175
00:08:11,759 --> 00:08:12,960
that you always have to use this user

176
00:08:12,960 --> 00:08:14,879
outband but that's the current paradigm

177
00:08:14,879 --> 00:08:16,800
so how can we capture that how can we

178
00:08:16,800 --> 00:08:18,560
get some sort of security model that

179
00:08:18,560 --> 00:08:20,720
correctly reflects the types of attacks

180
00:08:20,720 --> 00:08:24,240
that we see on that sort of channel

181
00:08:24,240 --> 00:08:27,280
so in this work we actually look at

182
00:08:27,280 --> 00:08:29,280
that type of framework with the

183
00:08:29,280 --> 00:08:31,360
immediate epoch three priority

184
00:08:31,360 --> 00:08:34,320
authentication model

185
00:08:34,320 --> 00:08:35,919
and we do this by splitting into two

186
00:08:35,919 --> 00:08:37,760
pieces it is three-party but it's not

187
00:08:37,760 --> 00:08:40,880
your typical three devices because again

188
00:08:40,880 --> 00:08:42,799
what the user does and their interaction

189
00:08:42,799 --> 00:08:44,640
is completely distinct from having

190
00:08:44,640 --> 00:08:46,959
simply a third device

191
00:08:46,959 --> 00:08:48,959
on the device the device channel we have

192
00:08:48,959 --> 00:08:50,800
all sorts of typical queries that one

193
00:08:50,800 --> 00:08:54,240
sees in a continuous keygrain agreement

194
00:08:54,240 --> 00:08:56,320
protocol analyses

195
00:08:56,320 --> 00:08:58,480
and models and then on the user to

196
00:08:58,480 --> 00:09:00,880
device channel we have similar but

197
00:09:00,880 --> 00:09:03,839
different types of queries essentially

198
00:09:03,839 --> 00:09:05,760
that we have short-term

199
00:09:05,760 --> 00:09:08,480
access and we also have long-term access

200
00:09:08,480 --> 00:09:11,519
to either what is displayed to the user

201
00:09:11,519 --> 00:09:14,640
or what the user is able to enter into

202
00:09:14,640 --> 00:09:17,519
the device so possibly misinterpreting

203
00:09:17,519 --> 00:09:21,040
user inputs and so forth

204
00:09:21,040 --> 00:09:24,240
we then further split this up uh into

205
00:09:24,240 --> 00:09:26,640
different cases and look at them

206
00:09:26,640 --> 00:09:28,640
separately in crossfire when the

207
00:09:28,640 --> 00:09:30,640
protocol is secure and when not so in

208
00:09:30,640 --> 00:09:32,399
one case we say it is a typical

209
00:09:32,399 --> 00:09:34,800
cryptographic attack where

210
00:09:34,800 --> 00:09:36,959
the adversary has complete control on

211
00:09:36,959 --> 00:09:38,720
what happens from device device in other

212
00:09:38,720 --> 00:09:41,040
words a compromised device model but we

213
00:09:41,040 --> 00:09:42,880
restrict it on the user's device side

214
00:09:42,880 --> 00:09:45,040
and in the flip side for the compromised

215
00:09:45,040 --> 00:09:46,000
user

216
00:09:46,000 --> 00:09:48,080
we say the adversary has unrestricted

217
00:09:48,080 --> 00:09:50,399
access on the user side

218
00:09:50,399 --> 00:09:52,720
but we are going to restrict it on the

219
00:09:52,720 --> 00:09:54,959
device's device

220
00:09:54,959 --> 00:09:56,959
so that compromise device is really that

221
00:09:56,959 --> 00:09:58,640
classic case of a man in the middle

222
00:09:58,640 --> 00:10:01,040
possibly attacking and us wanting to

223
00:10:01,040 --> 00:10:02,640
detect it that they have complete

224
00:10:02,640 --> 00:10:04,160
control

225
00:10:04,160 --> 00:10:06,240
and for the reasons already noted a

226
00:10:06,240 --> 00:10:09,040
signal is insecure in both of these

227
00:10:09,040 --> 00:10:11,839
settings for our model

228
00:10:11,839 --> 00:10:13,279
so how can we fix this what can we do

229
00:10:13,279 --> 00:10:15,440
about it and the beauty of this solution

230
00:10:15,440 --> 00:10:18,320
is that it is so incredibly simple first

231
00:10:18,320 --> 00:10:20,560
of all in order to get authentication

232
00:10:20,560 --> 00:10:21,600
for

233
00:10:21,600 --> 00:10:23,440
at the epoch to be able to

234
00:10:23,440 --> 00:10:25,120
detect everything

235
00:10:25,120 --> 00:10:26,880
that could be a man in the middle we

236
00:10:26,880 --> 00:10:29,120
maintain a hash over all the public

237
00:10:29,120 --> 00:10:32,399
ratchet values up until the point of

238
00:10:32,399 --> 00:10:35,839
comparison of the qr codes

239
00:10:36,079 --> 00:10:37,920
we also include role separation which

240
00:10:37,920 --> 00:10:40,880
will come in in a minute when we

241
00:10:40,880 --> 00:10:41,920
basically

242
00:10:41,920 --> 00:10:43,760
compare whether or not you do numeric

243
00:10:43,760 --> 00:10:46,640
comparison or simply a qr code scan with

244
00:10:46,640 --> 00:10:48,320
where you can differentiate with the qr

245
00:10:48,320 --> 00:10:49,680
code scan so that you don't have

246
00:10:49,680 --> 00:10:51,360
reflection attacks from just reading a

247
00:10:51,360 --> 00:10:53,279
screen

248
00:10:53,279 --> 00:10:56,399
and from this hash from these hashes we

249
00:10:56,399 --> 00:10:59,120
combine them with an authentication key

250
00:10:59,120 --> 00:11:01,360
now this authentication key is a new

251
00:11:01,360 --> 00:11:02,880
introduction to the protocol it's simply

252
00:11:02,880 --> 00:11:04,640
one more key derivation

253
00:11:04,640 --> 00:11:06,880
and that's derived per epoch

254
00:11:06,880 --> 00:11:08,560
we then compute the fingerprints the new

255
00:11:08,560 --> 00:11:09,680
fingerprints

256
00:11:09,680 --> 00:11:12,000
over these authentication keys and the

257
00:11:12,000 --> 00:11:14,480
hash ratchets

258
00:11:14,480 --> 00:11:15,680
to

259
00:11:15,680 --> 00:11:16,800
basically

260
00:11:16,800 --> 00:11:19,760
have a new value that a user can compare

261
00:11:19,760 --> 00:11:21,360
and by maintaining two of these we're

262
00:11:21,360 --> 00:11:23,360
able to account for asynchronicity as

263
00:11:23,360 --> 00:11:25,680
well

264
00:11:26,079 --> 00:11:27,040
now

265
00:11:27,040 --> 00:11:29,040
this does not mean that they need to be

266
00:11:29,040 --> 00:11:31,760
driving fingerprints at every epoch

267
00:11:31,760 --> 00:11:32,959
that's a very important point you don't

268
00:11:32,959 --> 00:11:34,560
need to be doing that

269
00:11:34,560 --> 00:11:37,680
instead the user when the user wants to

270
00:11:37,680 --> 00:11:39,519
compare outbound which may be you know a

271
00:11:39,519 --> 00:11:41,360
year from now

272
00:11:41,360 --> 00:11:43,839
they will flip the screen in the normal

273
00:11:43,839 --> 00:11:45,360
signal setting so that means they have

274
00:11:45,360 --> 00:11:47,839
to stop messaging right and it will flip

275
00:11:47,839 --> 00:11:49,360
over to that i want to authenticate to

276
00:11:49,360 --> 00:11:51,920
generate say their qr code

277
00:11:51,920 --> 00:11:53,440
and at that time you can actually

278
00:11:53,440 --> 00:11:56,160
compute these fingerprints

279
00:11:56,160 --> 00:11:57,600
so you don't have to compute them all

280
00:11:57,600 --> 00:11:59,839
the time at and you only need the last

281
00:11:59,839 --> 00:12:01,519
two authentication keys which are

282
00:12:01,519 --> 00:12:03,440
separate from all other keys already

283
00:12:03,440 --> 00:12:06,000
derived

284
00:12:06,399 --> 00:12:08,399
so what does this look like for

285
00:12:08,399 --> 00:12:11,440
signal well in the

286
00:12:11,440 --> 00:12:13,200
prior signal setting

287
00:12:13,200 --> 00:12:16,079
this would all be x red x's

288
00:12:16,079 --> 00:12:18,560
and now we can certainly achieve better

289
00:12:18,560 --> 00:12:20,720
because we're able to tie

290
00:12:20,720 --> 00:12:22,160
information in

291
00:12:22,160 --> 00:12:24,720
for the epoch values that's the

292
00:12:24,720 --> 00:12:26,240
compromise device so that active

293
00:12:26,240 --> 00:12:27,760
adversary that man in the middle is

294
00:12:27,760 --> 00:12:30,240
really that compromise uh device setting

295
00:12:30,240 --> 00:12:32,480
that you see in green here

296
00:12:32,480 --> 00:12:34,880
so even if we simply make

297
00:12:34,880 --> 00:12:37,519
all assumptions are okay on the user's

298
00:12:37,519 --> 00:12:39,760
device channel we can now at least

299
00:12:39,760 --> 00:12:41,600
detect that man in the middle and we can

300
00:12:41,600 --> 00:12:44,160
get even better with some under even the

301
00:12:44,160 --> 00:12:46,399
compromise user setting if we are

302
00:12:46,399 --> 00:12:49,040
allowed non-matching in the scan and the

303
00:12:49,040 --> 00:12:51,040
details of that of what the different

304
00:12:51,040 --> 00:12:52,959
comparison methods are can be found in

305
00:12:52,959 --> 00:12:54,880
the paper

306
00:12:54,880 --> 00:12:57,519
so on that i will hand it off to the

307
00:12:57,519 --> 00:12:59,600
next speaker who is actually continuing

308
00:12:59,600 --> 00:13:01,120
with this work to

309
00:13:01,120 --> 00:13:03,040
take a look at how to do this without

310
00:13:03,040 --> 00:13:04,639
necessarily relying on the user in the

311
00:13:04,639 --> 00:13:07,120
middle and we'll take a joint q a at the

312
00:13:07,120 --> 00:13:08,000
end

313
00:13:08,000 --> 00:13:10,320
thank you

314
00:13:10,639 --> 00:13:11,550
thanks

315
00:13:11,550 --> 00:13:18,880
[Applause]

316
00:13:18,880 --> 00:13:22,560
so now we will switch over to alexandria

317
00:13:22,560 --> 00:13:26,000
who is i believe in person

318
00:13:29,360 --> 00:13:33,800
yes so thank you for the presentation

319
00:13:35,279 --> 00:13:37,279
okay so thank you very much for the

320
00:13:37,279 --> 00:13:38,720
presentation

321
00:13:38,720 --> 00:13:41,279
i will be talking about continuous

322
00:13:41,279 --> 00:13:43,519
authentication in secure messaging which

323
00:13:43,519 --> 00:13:46,639
as we tested is kind of a follow-up of

324
00:13:46,639 --> 00:13:48,959
the work they have done and which also

325
00:13:48,959 --> 00:13:51,519
tackles the issue of active

326
00:13:51,519 --> 00:13:53,680
man-in-the-middle attacks in secure

327
00:13:53,680 --> 00:13:54,880
messaging

328
00:13:54,880 --> 00:13:57,279
and because we have mostly worked on the

329
00:13:57,279 --> 00:14:00,480
signal setting i will be presenting

330
00:14:00,480 --> 00:14:04,079
continuous authentication in the signal

331
00:14:04,079 --> 00:14:06,240
with signal

332
00:14:06,240 --> 00:14:07,839
so

333
00:14:07,839 --> 00:14:11,199
yes so let's have a quick recap on

334
00:14:11,199 --> 00:14:12,800
signal security

335
00:14:12,800 --> 00:14:15,360
so signal offers secrecy and

336
00:14:15,360 --> 00:14:17,279
authenticity as stated in the previous

337
00:14:17,279 --> 00:14:21,040
presentation as well as forward secrecy

338
00:14:21,040 --> 00:14:23,519
in the presence of an adversary which

339
00:14:23,519 --> 00:14:26,399
can fully compromise the network as well

340
00:14:26,399 --> 00:14:28,240
as leak the

341
00:14:28,240 --> 00:14:30,480
secrets of some users

342
00:14:30,480 --> 00:14:32,880
so here for instance if the adversary

343
00:14:32,880 --> 00:14:36,720
leaks the secrets of alice then

344
00:14:36,720 --> 00:14:39,360
secrecy and authenticity are no longer

345
00:14:39,360 --> 00:14:42,480
no longer ensured but hopefully there is

346
00:14:42,480 --> 00:14:44,800
this post-compromised security property

347
00:14:44,800 --> 00:14:46,880
which states that if the adversary

348
00:14:46,880 --> 00:14:49,600
remains passive then after some message

349
00:14:49,600 --> 00:14:51,199
is exchanged

350
00:14:51,199 --> 00:14:53,360
alice and bob will retrieve some

351
00:14:53,360 --> 00:14:56,399
security because they are generating

352
00:14:56,399 --> 00:14:58,560
some random numbers that they can

353
00:14:58,560 --> 00:15:01,120
combine in a different manner's secret

354
00:15:01,120 --> 00:15:04,240
key that the adversary will not know

355
00:15:04,240 --> 00:15:05,040
but

356
00:15:05,040 --> 00:15:07,199
if the adversary remains active

357
00:15:07,199 --> 00:15:08,639
then the

358
00:15:08,639 --> 00:15:11,519
adversary can conserve its in the middle

359
00:15:11,519 --> 00:15:14,399
position which can have some dramatic

360
00:15:14,399 --> 00:15:16,560
consequences as sessions are really long

361
00:15:16,560 --> 00:15:18,000
leaves in signal

362
00:15:18,000 --> 00:15:20,399
and he will actually

363
00:15:20,399 --> 00:15:22,320
have two different sessions one with

364
00:15:22,320 --> 00:15:24,320
alice and the other with bob and there

365
00:15:24,320 --> 00:15:26,560
is no way on the invent channel that

366
00:15:26,560 --> 00:15:28,800
alice and bob can detect such an

367
00:15:28,800 --> 00:15:31,199
adversary and that is why they need to

368
00:15:31,199 --> 00:15:33,680
rely on some fingerprinting

369
00:15:33,680 --> 00:15:35,680
mechanism using an out-of-man channel

370
00:15:35,680 --> 00:15:38,160
like we saw in the previous

371
00:15:38,160 --> 00:15:39,680
presentation

372
00:15:39,680 --> 00:15:40,880
and

373
00:15:40,880 --> 00:15:44,880
our work is to tackle this issue and

374
00:15:44,880 --> 00:15:45,839
because

375
00:15:45,839 --> 00:15:48,320
almost no one is actually using those

376
00:15:48,320 --> 00:15:50,560
out-of-band checks we want to make

377
00:15:50,560 --> 00:15:52,320
something in-band

378
00:15:52,320 --> 00:15:55,199
by leveraging the identity keys that are

379
00:15:55,199 --> 00:15:57,440
used in the session initiation and are

380
00:15:57,440 --> 00:15:59,519
no longer used afterwards

381
00:15:59,519 --> 00:16:01,680
those identity keys could be

382
00:16:01,680 --> 00:16:03,360
authenticated using an out-of-band

383
00:16:03,360 --> 00:16:05,519
channel but afterwards active

384
00:16:05,519 --> 00:16:07,680
adversaries would be detected on the

385
00:16:07,680 --> 00:16:11,680
invent channel thanks to our mechanism

386
00:16:11,680 --> 00:16:15,839
and so this is what we have contributed

387
00:16:15,839 --> 00:16:17,680
we have first created a model that

388
00:16:17,680 --> 00:16:20,560
captures active

389
00:16:20,560 --> 00:16:22,959
so post compromise autumn

390
00:16:22,959 --> 00:16:24,399
security against active

391
00:16:24,399 --> 00:16:26,480
man-in-the-middle adversaries if they

392
00:16:26,480 --> 00:16:28,959
have not compromised long-term keys and

393
00:16:28,959 --> 00:16:31,279
we have created a generic extension that

394
00:16:31,279 --> 00:16:33,920
can be applied to any secure messaging

395
00:16:33,920 --> 00:16:37,440
scheme like signal to get the security

396
00:16:37,440 --> 00:16:40,079
and as a proof of concept we have also

397
00:16:40,079 --> 00:16:42,320
implemented this on top of the java

398
00:16:42,320 --> 00:16:44,380
signal library and

399
00:16:44,380 --> 00:16:45,519
[Music]

400
00:16:45,519 --> 00:16:48,480
but we will not cover that here

401
00:16:48,480 --> 00:16:49,199
so

402
00:16:49,199 --> 00:16:50,720
our method

403
00:16:50,720 --> 00:16:53,040
the core of our method is authentication

404
00:16:53,040 --> 00:16:55,600
steps those are detection procedures

405
00:16:55,600 --> 00:16:57,360
that happen regularly during the

406
00:16:57,360 --> 00:16:58,639
communication

407
00:16:58,639 --> 00:17:00,639
and which will leverage the identity

408
00:17:00,639 --> 00:17:02,079
keys of users

409
00:17:02,079 --> 00:17:04,640
so in this example there is an adversary

410
00:17:04,640 --> 00:17:06,880
between alice and bob which has managed

411
00:17:06,880 --> 00:17:09,199
to inject a message

412
00:17:09,199 --> 00:17:11,839
but at some point alice and bob will

413
00:17:11,839 --> 00:17:13,679
have this detection procedure that will

414
00:17:13,679 --> 00:17:15,679
try to detect if there has been an

415
00:17:15,679 --> 00:17:18,319
active adversary in their communication

416
00:17:18,319 --> 00:17:20,799
and to do that they create a transcript

417
00:17:20,799 --> 00:17:22,799
which is basically a series of cipher

418
00:17:22,799 --> 00:17:25,439
texts that they may hash to save space

419
00:17:25,439 --> 00:17:28,400
and alice will sign this transcript

420
00:17:28,400 --> 00:17:30,400
using a identity key and send the

421
00:17:30,400 --> 00:17:33,200
signature to bob and when bob receives a

422
00:17:33,200 --> 00:17:35,840
signature he will also compute on his

423
00:17:35,840 --> 00:17:37,679
part the transcript his own version of

424
00:17:37,679 --> 00:17:40,640
the transcript and verify if his version

425
00:17:40,640 --> 00:17:42,880
of the transcript

426
00:17:42,880 --> 00:17:43,600
has

427
00:17:43,600 --> 00:17:45,360
is

428
00:17:45,360 --> 00:17:47,360
and if the signature alice has provided

429
00:17:47,360 --> 00:17:50,240
is a correct signature for his version

430
00:17:50,240 --> 00:17:53,039
and if there is some injection like here

431
00:17:53,039 --> 00:17:55,520
then he will detect that there has been

432
00:17:55,520 --> 00:17:57,679
some tempering because the signature

433
00:17:57,679 --> 00:17:59,360
will not verify

434
00:17:59,360 --> 00:18:03,280
however if the signature is correct for

435
00:18:03,280 --> 00:18:05,440
his transcript then he can be convinced

436
00:18:05,440 --> 00:18:06,960
that

437
00:18:06,960 --> 00:18:09,919
only the order of the identity of alice

438
00:18:09,919 --> 00:18:12,160
would be able to

439
00:18:12,160 --> 00:18:14,960
force to create such a signature and it

440
00:18:14,960 --> 00:18:17,200
can be convinced that they have seen the

441
00:18:17,200 --> 00:18:19,440
same cipher text

442
00:18:19,440 --> 00:18:22,480
so for signal and other messaging scheme

443
00:18:22,480 --> 00:18:24,559
the computation of such a transcript is

444
00:18:24,559 --> 00:18:26,880
actually more complex because

445
00:18:26,880 --> 00:18:29,600
signal operates on an unreliable channel

446
00:18:29,600 --> 00:18:32,480
and so they first need to agree on the

447
00:18:32,480 --> 00:18:34,880
transcript of messages to stein because

448
00:18:34,880 --> 00:18:37,039
even without attacker some messages may

449
00:18:37,039 --> 00:18:39,679
get lost but it is basically

450
00:18:39,679 --> 00:18:42,000
only some additional messages where

451
00:18:42,000 --> 00:18:44,000
alice will send

452
00:18:44,000 --> 00:18:46,480
to bob every message he has received bob

453
00:18:46,480 --> 00:18:48,320
will do the same and after that they can

454
00:18:48,320 --> 00:18:49,600
agree on the

455
00:18:49,600 --> 00:18:51,919
set of messages to authenticate and can

456
00:18:51,919 --> 00:18:55,440
perform as in the last slide

457
00:18:55,520 --> 00:18:56,559
however

458
00:18:56,559 --> 00:18:59,520
we are not sure that the attacker has

459
00:18:59,520 --> 00:19:02,240
not compromised long-time keys and in

460
00:19:02,240 --> 00:19:04,480
this event the attacker could in the

461
00:19:04,480 --> 00:19:06,559
detection procedure replace alice's

462
00:19:06,559 --> 00:19:10,160
signature by a forge simulator if he has

463
00:19:10,160 --> 00:19:12,799
compromised alice's long-term key and in

464
00:19:12,799 --> 00:19:14,880
that case there is no way that bob can

465
00:19:14,880 --> 00:19:18,320
detect in-band this active adversary

466
00:19:18,320 --> 00:19:19,520
however

467
00:19:19,520 --> 00:19:21,600
they can use afterwards an out-of-bend

468
00:19:21,600 --> 00:19:24,320
channel in some kind of fingerprinting

469
00:19:24,320 --> 00:19:27,440
mechanism to exchange their transcript

470
00:19:27,440 --> 00:19:30,160
and in this instance they will see that

471
00:19:30,160 --> 00:19:31,679
the transcripts are different because

472
00:19:31,679 --> 00:19:33,600
there has been some injection

473
00:19:33,600 --> 00:19:36,000
yet they passed the detection procedure

474
00:19:36,000 --> 00:19:38,320
in band and that is a proof for them

475
00:19:38,320 --> 00:19:40,559
that alice's long time key has been

476
00:19:40,559 --> 00:19:42,080
compromised

477
00:19:42,080 --> 00:19:42,799
and

478
00:19:42,799 --> 00:19:43,760
therefore

479
00:19:43,760 --> 00:19:46,480
we have this

480
00:19:46,480 --> 00:19:49,440
we have used two cases where either the

481
00:19:49,440 --> 00:19:51,520
long term key is not compromised and

482
00:19:51,520 --> 00:19:55,360
thus our generic extension will ensure

483
00:19:55,360 --> 00:19:57,840
that tempering can be detected in band

484
00:19:57,840 --> 00:19:59,200
and so it is some kind of

485
00:19:59,200 --> 00:20:01,360
post-conforming security against active

486
00:20:01,360 --> 00:20:02,640
adversaries

487
00:20:02,640 --> 00:20:06,000
or we have the key compromised but then

488
00:20:06,000 --> 00:20:06,799
if

489
00:20:06,799 --> 00:20:08,960
alice and bob use an out of vent channel

490
00:20:08,960 --> 00:20:10,960
they can detect that such a key has been

491
00:20:10,960 --> 00:20:12,960
compromised and they can change it only

492
00:20:12,960 --> 00:20:15,679
when necessary where we have some kind

493
00:20:15,679 --> 00:20:18,559
of we force the adversary to use this

494
00:20:18,559 --> 00:20:20,799
key in order and to reveal its knowledge

495
00:20:20,799 --> 00:20:23,679
in order to avoid invent detection

496
00:20:23,679 --> 00:20:26,400
so this is a generic solution because we

497
00:20:26,400 --> 00:20:29,039
didn't use any

498
00:20:29,039 --> 00:20:31,919
property of our signal is implemented so

499
00:20:31,919 --> 00:20:32,960
we are

500
00:20:32,960 --> 00:20:35,440
pretty sure this can be

501
00:20:35,440 --> 00:20:37,520
applied to any kind of

502
00:20:37,520 --> 00:20:40,240
messaging protocol to get this

503
00:20:40,240 --> 00:20:42,640
bus confirmed security property as a

504
00:20:42,640 --> 00:20:44,640
proof of concept we implemented it on

505
00:20:44,640 --> 00:20:46,840
top on the official java library for

506
00:20:46,840 --> 00:20:49,840
signal and also this is currently a work

507
00:20:49,840 --> 00:20:52,240
in progress we are also investigating

508
00:20:52,240 --> 00:20:55,440
other alternative solutions which may be

509
00:20:55,440 --> 00:20:57,840
simpler for the specific case of signal

510
00:20:57,840 --> 00:21:00,720
so thank you for your attention and

511
00:21:00,720 --> 00:21:05,120
we can go to a q a with grita also

512
00:21:13,840 --> 00:21:17,679
thank you alexandra um i

513
00:21:17,679 --> 00:21:20,720
i can't see the mic line yet um i think

514
00:21:20,720 --> 00:21:21,520
the

515
00:21:21,520 --> 00:21:22,799
local team is going to turn the camera

516
00:21:22,799 --> 00:21:25,840
around so i could help there's my q um

517
00:21:25,840 --> 00:21:26,880
but

518
00:21:26,880 --> 00:21:28,320
that's what's going on as people are

519
00:21:28,320 --> 00:21:29,840
queuing up um

520
00:21:29,840 --> 00:21:31,840
one question from i said i'm kind of uh

521
00:21:31,840 --> 00:21:35,280
comparing uh this uh signal-like uh

522
00:21:35,280 --> 00:21:37,600
code comparison flow to other

523
00:21:37,600 --> 00:21:38,960
kind of what i think it was more

524
00:21:38,960 --> 00:21:40,720
traditional authentication regimes where

525
00:21:40,720 --> 00:21:43,039
you have things like certificates um

526
00:21:43,039 --> 00:21:45,039
which you can imagine carrying forward

527
00:21:45,039 --> 00:21:46,960
to a messaging situation so what i'm

528
00:21:46,960 --> 00:21:48,880
wondering is you know if you imagine a

529
00:21:48,880 --> 00:21:50,480
messaging situation where you had

530
00:21:50,480 --> 00:21:52,799
something like certificates for users

531
00:21:52,799 --> 00:21:54,320
would a bunch of this stuff still be

532
00:21:54,320 --> 00:21:57,039
necessary for asynchronicity or

533
00:21:57,039 --> 00:21:58,880
continuous security

534
00:21:58,880 --> 00:22:00,960
or would would the certificates and

535
00:22:00,960 --> 00:22:02,080
credentials handle most the

536
00:22:02,080 --> 00:22:05,039
authentication needs

537
00:22:05,679 --> 00:22:07,360
well i can have a go at that since it

538
00:22:07,360 --> 00:22:09,760
has to do with the user side

539
00:22:09,760 --> 00:22:10,559
so

540
00:22:10,559 --> 00:22:12,559
you don't need a lot of the stuff that

541
00:22:12,559 --> 00:22:15,840
would go into the actual like the qr

542
00:22:15,840 --> 00:22:18,320
code comparison for example so

543
00:22:18,320 --> 00:22:20,000
that's the good news you still need some

544
00:22:20,000 --> 00:22:22,240
sort of ratchet authentication so like

545
00:22:22,240 --> 00:22:25,440
what alexander pointed out is that

546
00:22:25,440 --> 00:22:26,559
you need something that you're pulling

547
00:22:26,559 --> 00:22:30,640
out per epoch uh in addition to

548
00:22:30,640 --> 00:22:32,480
you're you're essentially lying relying

549
00:22:32,480 --> 00:22:34,000
on long-term secret keys in the

550
00:22:34,000 --> 00:22:35,280
certificate so you're pulling something

551
00:22:35,280 --> 00:22:37,280
out per epoch

552
00:22:37,280 --> 00:22:38,880
uh but but if you're combining those in

553
00:22:38,880 --> 00:22:41,360
the right way then you can bypass some

554
00:22:41,360 --> 00:22:43,280
of the user side

555
00:22:43,280 --> 00:22:46,960
overhead that you have to compete on

556
00:22:47,200 --> 00:22:48,640
great thanks

557
00:22:48,640 --> 00:22:50,400
and i'm told there's someone in the

558
00:22:50,400 --> 00:22:53,280
in-person queue so uh whoever's uh there

559
00:22:53,280 --> 00:22:54,799
in the in the room you feel free to ask

560
00:22:54,799 --> 00:22:56,799
a question please

561
00:22:56,799 --> 00:22:59,200
um okay uh i have two questions one is

562
00:22:59,200 --> 00:23:00,960
about the first talk and the other is

563
00:23:00,960 --> 00:23:02,559
about the second one so i'll go with the

564
00:23:02,559 --> 00:23:03,679
first

565
00:23:03,679 --> 00:23:05,520
um doesn't

566
00:23:05,520 --> 00:23:07,280
like when a device is compromised

567
00:23:07,280 --> 00:23:09,200
doesn't it isn't it possible for the

568
00:23:09,200 --> 00:23:10,640
attacker to

569
00:23:10,640 --> 00:23:11,440
like

570
00:23:11,440 --> 00:23:13,120
influence the ratchet keys that would be

571
00:23:13,120 --> 00:23:15,760
used to into generating the fingerprints

572
00:23:15,760 --> 00:23:16,960
later on

573
00:23:16,960 --> 00:23:18,400
and wouldn't that be like

574
00:23:18,400 --> 00:23:20,000
counterproductive

575
00:23:20,000 --> 00:23:22,640
and for the second uh

576
00:23:22,640 --> 00:23:24,799
uh presentation

577
00:23:24,799 --> 00:23:26,640
doesn't the

578
00:23:26,640 --> 00:23:28,880
the add-on you you

579
00:23:28,880 --> 00:23:31,760
you present the signal uh completely

580
00:23:31,760 --> 00:23:35,360
remove the property of reliability

581
00:23:35,360 --> 00:23:36,960
that's it

582
00:23:36,960 --> 00:23:38,400
i need to answer the first question

583
00:23:38,400 --> 00:23:40,960
absolutely the use the adversary can

584
00:23:40,960 --> 00:23:42,960
inject its own ratchet secrets and it

585
00:23:42,960 --> 00:23:45,600
can manual connections simply like as

586
00:23:45,600 --> 00:23:46,720
presented

587
00:23:46,720 --> 00:23:49,120
what will be different is that when it

588
00:23:49,120 --> 00:23:50,640
can't control the user channels when the

589
00:23:50,640 --> 00:23:52,240
users compare these codes out of band

590
00:23:52,240 --> 00:23:54,159
they won't match

591
00:23:54,159 --> 00:23:56,960
so the users can know that there is

592
00:23:56,960 --> 00:23:58,720
basically a manual some attack at some

593
00:23:58,720 --> 00:24:00,880
point in time

594
00:24:00,880 --> 00:24:01,919
all right

595
00:24:01,919 --> 00:24:04,799
and for the deniability question we

596
00:24:04,799 --> 00:24:06,880
actually are using some designated

597
00:24:06,880 --> 00:24:09,760
verifier signature so it's actually

598
00:24:09,760 --> 00:24:13,039
conserved in liability because only the

599
00:24:13,039 --> 00:24:15,039
designated verifier can check if the

600
00:24:15,039 --> 00:24:17,039
signature is correct or not

601
00:24:17,039 --> 00:24:19,840
okay thanks

602
00:24:24,400 --> 00:24:26,400
all right thanks for that question and

603
00:24:26,400 --> 00:24:28,799
thank you again to britain alexander for

604
00:24:28,799 --> 00:24:30,640
the presentations

605
00:24:30,640 --> 00:24:33,120
thank you i think we need to

606
00:24:33,120 --> 00:24:37,719
move on to the next next talk

607
00:24:46,159 --> 00:24:49,600
again um next up we have uh matt green

608
00:24:49,600 --> 00:24:51,360
talking about uh

609
00:24:51,360 --> 00:24:53,600
evaluating the risks of client-side

610
00:24:53,600 --> 00:24:56,080
scanning

611
00:24:57,039 --> 00:24:59,520
okay uh one second i'm just

612
00:24:59,520 --> 00:25:01,279
getting my video working give me two

613
00:25:01,279 --> 00:25:03,360
seconds ah sorry i just stopped sharing

614
00:25:03,360 --> 00:25:05,600
do that

615
00:25:05,600 --> 00:25:08,159
okay hi everybody

616
00:25:08,159 --> 00:25:11,760
i hate doing this remotely um excellent

617
00:25:11,760 --> 00:25:13,279
okay just let me know if that's working

618
00:25:13,279 --> 00:25:15,520
okay

619
00:25:15,520 --> 00:25:17,360
i'm gonna take silence as a affirmation

620
00:25:17,360 --> 00:25:19,200
i see it on zoom

621
00:25:19,200 --> 00:25:20,240
okay

622
00:25:20,240 --> 00:25:22,559
let's go with that okay today uh first

623
00:25:22,559 --> 00:25:24,400
of all i'm very sorry i can't be there i

624
00:25:24,400 --> 00:25:25,360
was really looking forward to this

625
00:25:25,360 --> 00:25:28,240
conference but uh and then in any case

626
00:25:28,240 --> 00:25:30,559
um i am talking today after those two

627
00:25:30,559 --> 00:25:32,400
very strong technical talks i'm giving a

628
00:25:32,400 --> 00:25:34,720
slightly less technical talk about uh

629
00:25:34,720 --> 00:25:36,640
the risks of client-side scanning and

630
00:25:36,640 --> 00:25:38,720
this is a talk with my co-authors uh who

631
00:25:38,720 --> 00:25:40,799
are here on the screen uh some some of

632
00:25:40,799 --> 00:25:42,640
whom were planning on coming but could

633
00:25:42,640 --> 00:25:45,279
also not make it um and i actually want

634
00:25:45,279 --> 00:25:46,480
to um

635
00:25:46,480 --> 00:25:48,320
pitch a report that some of my

636
00:25:48,320 --> 00:25:50,159
co-authors wrote about this topic and

637
00:25:50,159 --> 00:25:52,480
i'll talk about it at the end um good so

638
00:25:52,480 --> 00:25:54,799
this is a very important uh topic i

639
00:25:54,799 --> 00:25:56,159
think because obviously you know we're

640
00:25:56,159 --> 00:25:57,440
all talking about the technical details

641
00:25:57,440 --> 00:25:59,600
of secure messaging the question now we

642
00:25:59,600 --> 00:26:00,960
should be asking ourselves is you know

643
00:26:00,960 --> 00:26:03,360
should we be allowed to deploy secure

644
00:26:03,360 --> 00:26:05,120
messaging and that's a major debate

645
00:26:05,120 --> 00:26:06,640
obviously people have talked about this

646
00:26:06,640 --> 00:26:08,880
already i hate to summarize a very very

647
00:26:08,880 --> 00:26:10,720
complicated policy debate in a single

648
00:26:10,720 --> 00:26:13,200
slide uh but if i could summarize that

649
00:26:13,200 --> 00:26:14,880
very complicated policy debate it's that

650
00:26:14,880 --> 00:26:16,640
an end-to-end encrypted messaging and

651
00:26:16,640 --> 00:26:18,960
end-to-end encrypted systems have begun

652
00:26:18,960 --> 00:26:21,200
to proliferate we have maybe two billion

653
00:26:21,200 --> 00:26:23,039
people worldwide who are able to use

654
00:26:23,039 --> 00:26:25,440
antenna encryption and that number

655
00:26:25,440 --> 00:26:27,200
continues to increase mostly because

656
00:26:27,200 --> 00:26:29,440
companies like facebook are pushing very

657
00:26:29,440 --> 00:26:31,039
hard to increase the amount of

658
00:26:31,039 --> 00:26:33,679
end-to-end encryption in their platforms

659
00:26:33,679 --> 00:26:35,440
this has created a lot of blowback and

660
00:26:35,440 --> 00:26:36,880
the blowback is mainly from law

661
00:26:36,880 --> 00:26:38,320
enforcement agencies and governments

662
00:26:38,320 --> 00:26:39,919
around the world who are very concerned

663
00:26:39,919 --> 00:26:41,360
that these new platforms will cause

664
00:26:41,360 --> 00:26:43,279
problems uh for law enforcement for the

665
00:26:43,279 --> 00:26:45,440
ability to actually trace suspects and

666
00:26:45,440 --> 00:26:46,799
to do other kinds of things that they

667
00:26:46,799 --> 00:26:49,600
they believe are critical um over the

668
00:26:49,600 --> 00:26:52,320
last i would say up until 2019 or so

669
00:26:52,320 --> 00:26:54,480
this debate was a relatively simple one

670
00:26:54,480 --> 00:26:57,919
uh the question was can we gain access

671
00:26:57,919 --> 00:27:00,400
to encrypted messaging in exceptional

672
00:27:00,400 --> 00:27:02,799
circumstances this capability was called

673
00:27:02,799 --> 00:27:04,559
exceptional access and it involved

674
00:27:04,559 --> 00:27:06,640
basically having some kind of

675
00:27:06,640 --> 00:27:08,480
targeted decryption capability for

676
00:27:08,480 --> 00:27:10,799
governments or for for law enforcement

677
00:27:10,799 --> 00:27:13,440
with a subpoena uh and the only really

678
00:27:13,440 --> 00:27:14,960
good way that we had to realize that was

679
00:27:14,960 --> 00:27:17,120
using key escrow and there was a you

680
00:27:17,120 --> 00:27:18,480
know there were a lot of concerns about

681
00:27:18,480 --> 00:27:20,240
the security and the reliability of key

682
00:27:20,240 --> 00:27:22,320
escrow systems and where that debate

683
00:27:22,320 --> 00:27:25,039
wound up by about 2019 was mostly kind

684
00:27:25,039 --> 00:27:26,559
of a stalemate

685
00:27:26,559 --> 00:27:27,440
even

686
00:27:27,440 --> 00:27:29,360
people on the policy side of the debate

687
00:27:29,360 --> 00:27:30,480
on the law enforcement side of the

688
00:27:30,480 --> 00:27:32,320
debate felt that there were some

689
00:27:32,320 --> 00:27:34,159
concerns with the existing technology

690
00:27:34,159 --> 00:27:35,440
for key escrow and that there were

691
00:27:35,440 --> 00:27:36,880
deployment concerns and that for at

692
00:27:36,880 --> 00:27:39,120
least data in motion for messaging there

693
00:27:39,120 --> 00:27:41,520
were probably some serious risks that

694
00:27:41,520 --> 00:27:42,960
couldn't quite be overcome with the

695
00:27:42,960 --> 00:27:45,279
systems that we had available and just

696
00:27:45,279 --> 00:27:46,640
as evidence for that if you don't

697
00:27:46,640 --> 00:27:48,320
believe me uh there's some great reports

698
00:27:48,320 --> 00:27:50,240
one by the national academy of sciences

699
00:27:50,240 --> 00:27:52,000
here in the u.s another by the carnegie

700
00:27:52,000 --> 00:27:54,320
institution that really summarizes this

701
00:27:54,320 --> 00:27:56,240
with a broad

702
00:27:56,240 --> 00:27:58,399
group of stakeholders kind of saying the

703
00:27:58,399 --> 00:27:59,840
same things that i'm saying today and

704
00:27:59,840 --> 00:28:01,279
that's that's where we got to by about

705
00:28:01,279 --> 00:28:03,200
2019

706
00:28:03,200 --> 00:28:06,080
and when you're in a sticky situation

707
00:28:06,080 --> 00:28:08,240
when you're stuck in a chess game maybe

708
00:28:08,240 --> 00:28:09,679
the answer isn't to continue playing the

709
00:28:09,679 --> 00:28:11,760
chess game maybe it's to flip the board

710
00:28:11,760 --> 00:28:14,640
and so in about 2019 the strategy at

711
00:28:14,640 --> 00:28:15,840
least coming out of high-level

712
00:28:15,840 --> 00:28:18,480
government officials in the us the uk

713
00:28:18,480 --> 00:28:21,200
and australia changed and this was

714
00:28:21,200 --> 00:28:24,320
represented by a open letter that was

715
00:28:24,320 --> 00:28:26,720
signed by then attorney general u.s

716
00:28:26,720 --> 00:28:28,080
william barr

717
00:28:28,080 --> 00:28:30,480
as well as the home secretary for the uh

718
00:28:30,480 --> 00:28:32,799
uk and the uh corresponding person in

719
00:28:32,799 --> 00:28:35,200
australia who unfortunately their name i

720
00:28:35,200 --> 00:28:37,520
don't know um and this basically

721
00:28:37,520 --> 00:28:39,520
resulted in a kind of a substantial

722
00:28:39,520 --> 00:28:41,200
change in the request and i don't think

723
00:28:41,200 --> 00:28:43,200
that technically people realize how

724
00:28:43,200 --> 00:28:45,520
substantial this change was but rather

725
00:28:45,520 --> 00:28:47,520
than asking for occasional exceptional

726
00:28:47,520 --> 00:28:48,799
access to

727
00:28:48,799 --> 00:28:50,640
encrypted messaging this letter

728
00:28:50,640 --> 00:28:53,200
essentially said hey we have all of

729
00:28:53,200 --> 00:28:54,960
these essentially mass surveillance

730
00:28:54,960 --> 00:28:56,399
systems these systems that are

731
00:28:56,399 --> 00:28:58,880
constantly scanning messages for the

732
00:28:58,880 --> 00:29:01,520
presence of abusive content such as

733
00:29:01,520 --> 00:29:04,159
child sexual abuse media and other types

734
00:29:04,159 --> 00:29:06,320
of content these systems will stop

735
00:29:06,320 --> 00:29:08,720
working the minute uh there are

736
00:29:08,720 --> 00:29:11,120
encrypted end-to-end encrypted systems

737
00:29:11,120 --> 00:29:13,840
handling those messages and this was a

738
00:29:13,840 --> 00:29:15,840
just a technically maybe from a law

739
00:29:15,840 --> 00:29:17,440
enforcement perspective this wasn't a

740
00:29:17,440 --> 00:29:18,559
big shift

741
00:29:18,559 --> 00:29:20,640
technically it was a massive shift in

742
00:29:20,640 --> 00:29:22,399
essentially what this entire technical

743
00:29:22,399 --> 00:29:24,480
debate was about and i just want to

744
00:29:24,480 --> 00:29:26,720
quote one section from the open letter

745
00:29:26,720 --> 00:29:29,360
that was published back in 2019 um it

746
00:29:29,360 --> 00:29:30,960
had a very specific request and the

747
00:29:30,960 --> 00:29:33,679
request was this it was to embed the

748
00:29:33,679 --> 00:29:36,159
safety of the public in system designs

749
00:29:36,159 --> 00:29:38,159
thereby enabling you to continue to act

750
00:29:38,159 --> 00:29:40,799
against illegal content effectively with

751
00:29:40,799 --> 00:29:42,799
no reduction to safety and facilitating

752
00:29:42,799 --> 00:29:44,799
the prosecution of offenders and

753
00:29:44,799 --> 00:29:46,880
safeguarding of victims

754
00:29:46,880 --> 00:29:48,640
and so this actually you know not only

755
00:29:48,640 --> 00:29:50,000
did it sort of change the technical

756
00:29:50,000 --> 00:29:52,159
shape of the debate but it led to a new

757
00:29:52,159 --> 00:29:54,399
sort of set of research and and

758
00:29:54,399 --> 00:29:55,600
discussions

759
00:29:55,600 --> 00:29:57,120
in the technical community where people

760
00:29:57,120 --> 00:29:59,440
began to ask is it possible

761
00:29:59,440 --> 00:30:01,600
to build systems that can scan for

762
00:30:01,600 --> 00:30:04,000
abusive content while maintaining end

763
00:30:04,000 --> 00:30:06,159
encryption and i think for this audience

764
00:30:06,159 --> 00:30:08,000
probably much of this history is not

765
00:30:08,000 --> 00:30:09,679
necessary but i want to just kind of go

766
00:30:09,679 --> 00:30:11,679
over the very very basics just to bring

767
00:30:11,679 --> 00:30:13,600
us to a point where we're at least all

768
00:30:13,600 --> 00:30:16,480
on the same page um i want to show you

769
00:30:16,480 --> 00:30:18,960
briefly hopefully you can see this what

770
00:30:18,960 --> 00:30:22,240
csam csam is child sexual abuse media

771
00:30:22,240 --> 00:30:23,919
what what the csam detection

772
00:30:23,919 --> 00:30:25,640
infrastructure looks like today in

773
00:30:25,640 --> 00:30:28,880
unencrypted messaging and data sharing

774
00:30:28,880 --> 00:30:30,880
systems many of you already familiar

775
00:30:30,880 --> 00:30:31,919
with this

776
00:30:31,919 --> 00:30:34,000
generally speaking when i send a message

777
00:30:34,000 --> 00:30:36,159
through a system like facebook messenger

778
00:30:36,159 --> 00:30:38,880
which is not currently uh by default

779
00:30:38,880 --> 00:30:41,360
encrypted what happens is my client

780
00:30:41,360 --> 00:30:43,679
sends that image up to a server that

781
00:30:43,679 --> 00:30:45,600
server then computes what's called a

782
00:30:45,600 --> 00:30:47,919
perceptual hash of that image and that

783
00:30:47,919 --> 00:30:49,840
perceptual hash is not really a

784
00:30:49,840 --> 00:30:51,200
cryptographic hash function it's a

785
00:30:51,200 --> 00:30:52,720
specialized hash function that is

786
00:30:52,720 --> 00:30:55,840
designed to be robust to changes in the

787
00:30:55,840 --> 00:30:58,480
actual image encoding so you get a hash

788
00:30:58,480 --> 00:31:00,960
or a digest that roughly summarizes the

789
00:31:00,960 --> 00:31:03,440
semantic content of the image and so

790
00:31:03,440 --> 00:31:04,960
there is you know typically these are

791
00:31:04,960 --> 00:31:07,200
exact hashes or they can be inexact

792
00:31:07,200 --> 00:31:09,360
hashes that allow comparison with some

793
00:31:09,360 --> 00:31:11,600
differences to get a similarity metric

794
00:31:11,600 --> 00:31:13,120
and on the server there's also a

795
00:31:13,120 --> 00:31:15,360
database which is a proprietary database

796
00:31:15,360 --> 00:31:18,080
of known abusive material and the image

797
00:31:18,080 --> 00:31:19,919
is then compared to this database and if

798
00:31:19,919 --> 00:31:22,480
it matches some kind of internal flag is

799
00:31:22,480 --> 00:31:23,840
raised

800
00:31:23,840 --> 00:31:26,000
there is a second version of this

801
00:31:26,000 --> 00:31:28,000
approach which is being pioneered by

802
00:31:28,000 --> 00:31:30,320
google which does not use perceptual

803
00:31:30,320 --> 00:31:32,000
hash functions and actually uses neural

804
00:31:32,000 --> 00:31:34,480
network classifiers and i just want to

805
00:31:34,480 --> 00:31:35,919
compare these two because they're both

806
00:31:35,919 --> 00:31:37,519
relevant since they're both being used

807
00:31:37,519 --> 00:31:40,159
in unencrypted systems the hash based

808
00:31:40,159 --> 00:31:42,480
approach is excellent at finding known

809
00:31:42,480 --> 00:31:44,159
content even if it's been slightly

810
00:31:44,159 --> 00:31:46,399
modified but it's limited to finding

811
00:31:46,399 --> 00:31:48,720
known csam content these newer

812
00:31:48,720 --> 00:31:50,240
approaches like the one being pioneered

813
00:31:50,240 --> 00:31:53,440
by google are trained on large uh corpue

814
00:31:53,440 --> 00:31:55,840
of uh known content but they can then

815
00:31:55,840 --> 00:31:58,720
recognize potentially novel content and

816
00:31:58,720 --> 00:32:00,480
this makes them more powerful but also

817
00:32:00,480 --> 00:32:02,559
with a higher risk of false positives

818
00:32:02,559 --> 00:32:04,559
potentially so these are kind of the two

819
00:32:04,559 --> 00:32:07,279
systems that are in use today outside of

820
00:32:07,279 --> 00:32:09,840
um encrypted systems

821
00:32:09,840 --> 00:32:11,279
they both have limitations that make

822
00:32:11,279 --> 00:32:12,960
them unsuitable for the deployment of

823
00:32:12,960 --> 00:32:14,720
end-to-end encryption one of them is

824
00:32:14,720 --> 00:32:16,320
that the server has to see the obvious

825
00:32:16,320 --> 00:32:17,679
one of course is the server has to see

826
00:32:17,679 --> 00:32:19,440
the media end-to-end encrypted systems

827
00:32:19,440 --> 00:32:21,760
block the server server can't access

828
00:32:21,760 --> 00:32:23,679
this data and so we're locked out and

829
00:32:23,679 --> 00:32:26,399
can't do much um it has there is at

830
00:32:26,399 --> 00:32:28,320
least you know some advantage which is

831
00:32:28,320 --> 00:32:30,080
that the databases themselves and the

832
00:32:30,080 --> 00:32:31,840
matching algorithms are proprietary and

833
00:32:31,840 --> 00:32:33,679
they can be kept behind on the server

834
00:32:33,679 --> 00:32:35,120
which makes it more difficult for

835
00:32:35,120 --> 00:32:37,279
criminals to evade these systems or find

836
00:32:37,279 --> 00:32:39,840
ways to uh spoof these systems

837
00:32:39,840 --> 00:32:41,360
they also create another possibility

838
00:32:41,360 --> 00:32:42,640
which is there's this possibility for

839
00:32:42,640 --> 00:32:44,480
abuse and surveillance by providers

840
00:32:44,480 --> 00:32:46,799
however we tend to discount that because

841
00:32:46,799 --> 00:32:48,880
the systems are not end to end encrypted

842
00:32:48,880 --> 00:32:51,200
in the first place so adding a

843
00:32:51,200 --> 00:32:52,960
surveillance system on top of a

844
00:32:52,960 --> 00:32:55,760
non-end-to-end encrypted system tends to

845
00:32:55,760 --> 00:32:57,360
not rub people the wrong way or at least

846
00:32:57,360 --> 00:32:59,039
it doesn't make the situation

847
00:32:59,039 --> 00:33:01,200
dramatically worse

848
00:33:01,200 --> 00:33:03,200
okay good so these are the systems that

849
00:33:03,200 --> 00:33:04,880
don't work with encryption how do we do

850
00:33:04,880 --> 00:33:06,240
client-side scanning how do we do

851
00:33:06,240 --> 00:33:08,840
scanning when we have encrypted

852
00:33:08,840 --> 00:33:11,360
systems so there are a couple of answers

853
00:33:11,360 --> 00:33:13,760
to that the obvious straw man answer is

854
00:33:13,760 --> 00:33:16,640
we do the scanning on the client side

855
00:33:16,640 --> 00:33:18,080
and that means performing the hashing

856
00:33:18,080 --> 00:33:19,919
the verification the matching on the

857
00:33:19,919 --> 00:33:21,360
client side where the data is not

858
00:33:21,360 --> 00:33:23,919
encrypted and then when we find a match

859
00:33:23,919 --> 00:33:25,440
the client can simply report the

860
00:33:25,440 --> 00:33:26,799
existence of that match up to the

861
00:33:26,799 --> 00:33:27,919
provider

862
00:33:27,919 --> 00:33:30,159
and this works well enough if you trust

863
00:33:30,159 --> 00:33:32,880
the client but it has a major limitation

864
00:33:32,880 --> 00:33:35,360
which of course is actually devastating

865
00:33:35,360 --> 00:33:37,760
in the setting of csam the problem is

866
00:33:37,760 --> 00:33:39,840
that nobody wants to make that hash

867
00:33:39,840 --> 00:33:42,480
database available to clients and they

868
00:33:42,480 --> 00:33:44,480
also in some cases don't even want the

869
00:33:44,480 --> 00:33:46,799
hashing algorithms to be available to

870
00:33:46,799 --> 00:33:48,559
clients and so the result of this and

871
00:33:48,559 --> 00:33:49,919
there are several reasons for this one

872
00:33:49,919 --> 00:33:52,000
of which is that existing perceptual

873
00:33:52,000 --> 00:33:54,159
algorithms hashing algorithms may be

874
00:33:54,159 --> 00:33:56,000
slightly reversible which means that you

875
00:33:56,000 --> 00:33:57,200
could expose

876
00:33:57,200 --> 00:33:59,840
victim content to outsiders who could

877
00:33:59,840 --> 00:34:01,519
potentially reverse this you might

878
00:34:01,519 --> 00:34:03,360
obtain a very low resolution image from

879
00:34:03,360 --> 00:34:05,200
some of these hash values but you could

880
00:34:05,200 --> 00:34:06,720
still obtain something so there's a

881
00:34:06,720 --> 00:34:08,960
confidentiality risk for victims

882
00:34:08,960 --> 00:34:10,560
it also allows for the possibility that

883
00:34:10,560 --> 00:34:12,159
people can detect whether they are going

884
00:34:12,159 --> 00:34:14,159
to be caught and they can find ways to

885
00:34:14,159 --> 00:34:16,239
obey by not sending certain images and

886
00:34:16,239 --> 00:34:18,639
they could even potentially create new

887
00:34:18,639 --> 00:34:20,480
csan material if we were talking about

888
00:34:20,480 --> 00:34:22,079
one of the systems that used a neural

889
00:34:22,079 --> 00:34:24,320
network so this is generally believed to

890
00:34:24,320 --> 00:34:26,320
be unacceptable exposing the hash

891
00:34:26,320 --> 00:34:29,040
database directly to the client

892
00:34:29,040 --> 00:34:30,960
themselves

893
00:34:30,960 --> 00:34:32,639
the obvious answer and you know this

894
00:34:32,639 --> 00:34:34,159
audience in particular should know the

895
00:34:34,159 --> 00:34:36,560
the obvious answer is let's use crypto

896
00:34:36,560 --> 00:34:38,399
uh ultimately we can build some kind of

897
00:34:38,399 --> 00:34:40,320
two-party computation between the client

898
00:34:40,320 --> 00:34:42,399
and the provider in which the provider

899
00:34:42,399 --> 00:34:44,800
submits the hash database maybe even the

900
00:34:44,800 --> 00:34:46,960
algorithms the client submits their

901
00:34:46,960 --> 00:34:48,879
image that's going to be sent and the

902
00:34:48,879 --> 00:34:51,760
2pc does some kind of matching procedure

903
00:34:51,760 --> 00:34:53,199
and that matching procedure could be

904
00:34:53,199 --> 00:34:55,119
limited it could be you know across many

905
00:34:55,119 --> 00:34:57,760
messages if i send 30 messages that

906
00:34:57,760 --> 00:35:00,640
match only then will some kind of signal

907
00:35:00,640 --> 00:35:02,640
and possibly the decrypted content be

908
00:35:02,640 --> 00:35:05,280
delivered to the provider and this is an

909
00:35:05,280 --> 00:35:06,880
area that was kind of entering active

910
00:35:06,880 --> 00:35:08,079
research

911
00:35:08,079 --> 00:35:11,680
up until i would say august of uh 2021

912
00:35:11,680 --> 00:35:13,280
so last august

913
00:35:13,280 --> 00:35:15,119
and i think again this audience should

914
00:35:15,119 --> 00:35:16,800
be familiar with you know what happened

915
00:35:16,800 --> 00:35:18,720
last august which is that research

916
00:35:18,720 --> 00:35:20,400
became very real

917
00:35:20,400 --> 00:35:23,119
in a hurry um and that happened with the

918
00:35:23,119 --> 00:35:26,000
release of a proposed system that was to

919
00:35:26,000 --> 00:35:28,960
be deployed in all apple uh iphones at

920
00:35:28,960 --> 00:35:31,520
least in the u.s last august it was

921
00:35:31,520 --> 00:35:34,320
supposed to be released with ios 15. um

922
00:35:34,320 --> 00:35:35,920
this received a lot of press so i won't

923
00:35:35,920 --> 00:35:38,960
belabor it but uh apple developed a

924
00:35:38,960 --> 00:35:41,599
client-side or two-pc based scanning

925
00:35:41,599 --> 00:35:43,760
system that used a private set

926
00:35:43,760 --> 00:35:46,480
intersection and a new perceptual hash

927
00:35:46,480 --> 00:35:49,200
function they developed to perform uh

928
00:35:49,200 --> 00:35:51,599
client-side media scanning of photo

929
00:35:51,599 --> 00:35:53,680
libraries on apple phones

930
00:35:53,680 --> 00:35:56,079
and really i i i can't say enough good

931
00:35:56,079 --> 00:35:58,240
things about the cryptographic elements

932
00:35:58,240 --> 00:35:59,599
of this protocol i think it's you know

933
00:35:59,599 --> 00:36:00,720
beautifully

934
00:36:00,720 --> 00:36:03,440
executed but also unfortunately i think

935
00:36:03,440 --> 00:36:05,200
fairly dangerous

936
00:36:05,200 --> 00:36:07,280
and i hope that i still have a little

937
00:36:07,280 --> 00:36:08,880
time i'm going to just briefly talk

938
00:36:08,880 --> 00:36:11,520
about some of the obvious concerns

939
00:36:11,520 --> 00:36:13,520
and talk about sort of why i think apple

940
00:36:13,520 --> 00:36:15,280
didn't address these this is not really

941
00:36:15,280 --> 00:36:18,480
an apple focused presentation and then

942
00:36:18,480 --> 00:36:19,680
hopefully i can we'll still have a

943
00:36:19,680 --> 00:36:21,119
little time for people who have

944
00:36:21,119 --> 00:36:22,880
questions at the end

945
00:36:22,880 --> 00:36:24,960
there are a number of risks in these

946
00:36:24,960 --> 00:36:26,880
systems and kind of figuring out how to

947
00:36:26,880 --> 00:36:29,280
address these risks was the biggest part

948
00:36:29,280 --> 00:36:30,720
of the research question that i think

949
00:36:30,720 --> 00:36:33,280
was being addressed in the the year

950
00:36:33,280 --> 00:36:36,000
prior to last august and the biggest one

951
00:36:36,000 --> 00:36:37,119
for me

952
00:36:37,119 --> 00:36:38,880
is the possibility of mission creep

953
00:36:38,880 --> 00:36:40,480
these systems ultimately perform

954
00:36:40,480 --> 00:36:43,200
scanning of a live database that can be

955
00:36:43,200 --> 00:36:44,960
updated by a provider that database

956
00:36:44,960 --> 00:36:46,880
contains information

957
00:36:46,880 --> 00:36:48,560
the information is provided by

958
00:36:48,560 --> 00:36:50,000
organizations that are quasi

959
00:36:50,000 --> 00:36:51,760
governmental like nicknack which is the

960
00:36:51,760 --> 00:36:52,960
national center for missing and

961
00:36:52,960 --> 00:36:54,800
exploited children

962
00:36:54,800 --> 00:36:57,680
those the actual raw imagery for very

963
00:36:57,680 --> 00:36:59,280
very good reasons

964
00:36:59,280 --> 00:37:01,920
is kept confidential and so ultimately

965
00:37:01,920 --> 00:37:04,000
what nikmec releases is a series of

966
00:37:04,000 --> 00:37:06,720
perceptual hashes of that imagery and

967
00:37:06,720 --> 00:37:08,960
they are then notified after some

968
00:37:08,960 --> 00:37:11,440
internal mod monitoring by companies

969
00:37:11,440 --> 00:37:13,839
when there is a customer who matches

970
00:37:13,839 --> 00:37:16,000
that database um so there is this

971
00:37:16,000 --> 00:37:17,680
possibility that you know with or

972
00:37:17,680 --> 00:37:20,240
without the consent of providers like

973
00:37:20,240 --> 00:37:22,720
apple or facebook these databases could

974
00:37:22,720 --> 00:37:25,200
be expanded either surreptitiously or

975
00:37:25,200 --> 00:37:27,760
overtly to include new kinds of content

976
00:37:27,760 --> 00:37:30,480
and i think this debate became very

977
00:37:30,480 --> 00:37:32,720
heated on the internet last summer but i

978
00:37:32,720 --> 00:37:34,079
really just i want to point out one

979
00:37:34,079 --> 00:37:35,599
thing that you know this is not some

980
00:37:35,599 --> 00:37:38,000
theoretical concern in fact if you go

981
00:37:38,000 --> 00:37:40,160
back to the 2019 bar

982
00:37:40,160 --> 00:37:42,800
patel letter uh you actually see that it

983
00:37:42,800 --> 00:37:44,320
doesn't just talk about adding the

984
00:37:44,320 --> 00:37:47,040
capability to scan for csam material it

985
00:37:47,040 --> 00:37:48,800
lists other type of material as equally

986
00:37:48,800 --> 00:37:50,640
important and the two types of material

987
00:37:50,640 --> 00:37:52,960
that are that are given as examples are

988
00:37:52,960 --> 00:37:55,280
uh terrorist content which is something

989
00:37:55,280 --> 00:37:57,119
that providers in the uk at least

990
00:37:57,119 --> 00:37:59,599
already stand for pretty rigorously as

991
00:37:59,599 --> 00:38:00,960
well as and this one's a little weird

992
00:38:00,960 --> 00:38:02,480
foreign adversaries attempts to

993
00:38:02,480 --> 00:38:05,119
undermine democratic institutions

994
00:38:05,119 --> 00:38:07,200
i'm not sure what a hash database looks

995
00:38:07,200 --> 00:38:09,280
like for election disinformation but if

996
00:38:09,280 --> 00:38:10,880
one could be built there's certainly

997
00:38:10,880 --> 00:38:12,640
motivation to do this so this is not

998
00:38:12,640 --> 00:38:15,280
theory there's clearly a demand to do

999
00:38:15,280 --> 00:38:16,320
this

1000
00:38:16,320 --> 00:38:18,400
um and i just want to sort of you know

1001
00:38:18,400 --> 00:38:20,160
highlight apple's response to this which

1002
00:38:20,160 --> 00:38:22,720
is well no we won't do this

1003
00:38:22,720 --> 00:38:24,640
i you know there's been a lot of debate

1004
00:38:24,640 --> 00:38:26,640
about how credible it is that a single

1005
00:38:26,640 --> 00:38:28,800
provider could basically block

1006
00:38:28,800 --> 00:38:30,960
governments requesting this i i guess

1007
00:38:30,960 --> 00:38:32,800
that's the major question is you know

1008
00:38:32,800 --> 00:38:34,400
now that we've removed the technical

1009
00:38:34,400 --> 00:38:37,040
restrictions can providers actually hold

1010
00:38:37,040 --> 00:38:39,359
back on adding to that database

1011
00:38:39,359 --> 00:38:41,839
okay the next obvious concern is

1012
00:38:41,839 --> 00:38:43,440
unauthorized surveillance so this is a

1013
00:38:43,440 --> 00:38:45,200
flavor of the previous which is that

1014
00:38:45,200 --> 00:38:46,640
malicious providers and government

1015
00:38:46,640 --> 00:38:49,200
organizations can obviously sneak uh

1016
00:38:49,200 --> 00:38:51,520
unauthorized content into the scanning

1017
00:38:51,520 --> 00:38:53,119
system and there is certainly motivation

1018
00:38:53,119 --> 00:38:55,119
this might be a hacked provider or it

1019
00:38:55,119 --> 00:38:56,800
might be a hacked organization adding

1020
00:38:56,800 --> 00:38:58,880
this content the challenge here is that

1021
00:38:58,880 --> 00:39:01,200
privacy preserving two pc protocols make

1022
00:39:01,200 --> 00:39:04,800
this extremely difficult to prevent and

1023
00:39:04,800 --> 00:39:06,640
just to kind of show you you know if you

1024
00:39:06,640 --> 00:39:08,640
look at how difficult this is let's take

1025
00:39:08,640 --> 00:39:10,960
apple as an example uh apple in their

1026
00:39:10,960 --> 00:39:12,480
their literature says the system is

1027
00:39:12,480 --> 00:39:15,040
designed to be auditable

1028
00:39:15,040 --> 00:39:16,320
and that this is in their frequently

1029
00:39:16,320 --> 00:39:18,560
asked questions but when you dig into

1030
00:39:18,560 --> 00:39:20,560
the published documents of the protocols

1031
00:39:20,560 --> 00:39:22,560
that were put out by apple and you look

1032
00:39:22,560 --> 00:39:24,480
at their actual systems you see that

1033
00:39:24,480 --> 00:39:26,240
there is no evidence in any of the

1034
00:39:26,240 --> 00:39:28,560
actual cryptographic protocols or proofs

1035
00:39:28,560 --> 00:39:30,720
that these auditability systems were

1036
00:39:30,720 --> 00:39:32,800
built in and just to give you one very

1037
00:39:32,800 --> 00:39:35,040
concrete example there is a point in the

1038
00:39:35,040 --> 00:39:37,280
apple psi protocol where you insert when

1039
00:39:37,280 --> 00:39:39,280
there is an empty space in the encrypted

1040
00:39:39,280 --> 00:39:42,640
database you insert a random element

1041
00:39:42,640 --> 00:39:44,400
that random element should be a random

1042
00:39:44,400 --> 00:39:46,000
element but of course the distribution

1043
00:39:46,000 --> 00:39:48,320
of meaningful database elements is

1044
00:39:48,320 --> 00:39:50,320
indistinguishable from random elements

1045
00:39:50,320 --> 00:39:52,160
and the protocol does not do a good job

1046
00:39:52,160 --> 00:39:54,079
at least as currently specified at

1047
00:39:54,079 --> 00:39:55,920
ensuring that this doesn't happen to

1048
00:39:55,920 --> 00:39:57,280
real systems so there are many

1049
00:39:57,280 --> 00:39:59,359
challenges it's possible this could be

1050
00:39:59,359 --> 00:40:01,359
built into an auditable system but as

1051
00:40:01,359 --> 00:40:03,359
published today that hasn't been done

1052
00:40:03,359 --> 00:40:04,800
and that's beyond the question of how do

1053
00:40:04,800 --> 00:40:06,800
you actually verify the content

1054
00:40:06,800 --> 00:40:08,560
that's being put into the system is is

1055
00:40:08,560 --> 00:40:09,520
valid

1056
00:40:09,520 --> 00:40:12,000
uh don't want to go over here so uh last

1057
00:40:12,000 --> 00:40:14,000
obvious question is how do you prevent

1058
00:40:14,000 --> 00:40:16,400
malicious false positives with many of

1059
00:40:16,400 --> 00:40:17,839
these models and hash functions it's

1060
00:40:17,839 --> 00:40:19,280
possible to generate essentially

1061
00:40:19,280 --> 00:40:22,000
collisions uh harmless images that you

1062
00:40:22,000 --> 00:40:23,680
can send to people as memes and you can

1063
00:40:23,680 --> 00:40:25,680
put into people's photo libraries that

1064
00:40:25,680 --> 00:40:28,079
will register as matching a known hash

1065
00:40:28,079 --> 00:40:30,560
database and so far the current solution

1066
00:40:30,560 --> 00:40:32,319
to this is mostly to try to keep the

1067
00:40:32,319 --> 00:40:35,200
hash functions and the models secret

1068
00:40:35,200 --> 00:40:36,880
unfortunately this doesn't work it took

1069
00:40:36,880 --> 00:40:38,800
about two weeks for apple's neural hash

1070
00:40:38,800 --> 00:40:40,720
function to be reverse engineered last

1071
00:40:40,720 --> 00:40:43,200
summer and it took about three more days

1072
00:40:43,200 --> 00:40:45,599
for people to develop viable reasonable

1073
00:40:45,599 --> 00:40:47,200
looking collisions between different

1074
00:40:47,200 --> 00:40:49,440
images this one on the top is from greg

1075
00:40:49,440 --> 00:40:50,960
maxwell and the others are actually

1076
00:40:50,960 --> 00:40:53,440
natural collisions uh the one on the top

1077
00:40:53,440 --> 00:40:54,640
right and the one on the top left are

1078
00:40:54,640 --> 00:40:56,240
natural collisions people found just

1079
00:40:56,240 --> 00:40:57,839
looking through databases

1080
00:40:57,839 --> 00:40:59,520
um the one i want to point out at the

1081
00:40:59,520 --> 00:41:01,280
bottom is a call out to my students who

1082
00:41:01,280 --> 00:41:02,720
have been doing the same kind of work

1083
00:41:02,720 --> 00:41:05,520
for photo dna and other perceptual

1084
00:41:05,520 --> 00:41:07,200
hashes and these turn out to be just as

1085
00:41:07,200 --> 00:41:08,640
vulnerable to this kind of collision

1086
00:41:08,640 --> 00:41:10,560
attack

1087
00:41:10,560 --> 00:41:12,720
okay nearing the end here um what i want

1088
00:41:12,720 --> 00:41:14,560
to say is two things uh the first is

1089
00:41:14,560 --> 00:41:16,480
that none of this is over apple has

1090
00:41:16,480 --> 00:41:18,160
delayed its plans to deploy these

1091
00:41:18,160 --> 00:41:19,839
systems and we'll find out apple is a

1092
00:41:19,839 --> 00:41:21,520
leader so what they do will tend to

1093
00:41:21,520 --> 00:41:23,119
influence the industry but there are

1094
00:41:23,119 --> 00:41:24,400
other people who are considering this as

1095
00:41:24,400 --> 00:41:26,400
well uh many people have decided that

1096
00:41:26,400 --> 00:41:27,920
because apple delayed their plans that

1097
00:41:27,920 --> 00:41:30,000
the debate is over even within apple and

1098
00:41:30,000 --> 00:41:32,400
so on it's probably not these systems

1099
00:41:32,400 --> 00:41:34,720
exist and they will be built and there's

1100
00:41:34,720 --> 00:41:36,079
going to be a continual debate about

1101
00:41:36,079 --> 00:41:38,079
whether deploying them makes sense even

1102
00:41:38,079 --> 00:41:40,319
if apple backs off its proposal the idea

1103
00:41:40,319 --> 00:41:42,800
is not going to go away

1104
00:41:42,800 --> 00:41:44,319
the last thing that i want to say and i

1105
00:41:44,319 --> 00:41:45,760
want to say it to this audience of you

1106
00:41:45,760 --> 00:41:47,040
know many

1107
00:41:47,040 --> 00:41:49,119
younger junior people whose careers are

1108
00:41:49,119 --> 00:41:51,359
just starting out which is that you know

1109
00:41:51,359 --> 00:41:53,440
this is a substantial and important

1110
00:41:53,440 --> 00:41:55,440
debate even if we use privacy preserving

1111
00:41:55,440 --> 00:41:57,839
technology really backwards privacy

1112
00:41:57,839 --> 00:41:59,440
preserving technology where the privacy

1113
00:41:59,440 --> 00:42:01,520
is not applied to the users

1114
00:42:01,520 --> 00:42:03,839
end-to-end encrypted content detection

1115
00:42:03,839 --> 00:42:05,520
is a surveillance system and it's one of

1116
00:42:05,520 --> 00:42:07,599
the most powerful ubiquitous

1117
00:42:07,599 --> 00:42:09,200
surveillance systems we've ever

1118
00:42:09,200 --> 00:42:11,040
considered deploying

1119
00:42:11,040 --> 00:42:13,119
and at least in democratic nations and i

1120
00:42:13,119 --> 00:42:14,400
think we should think very very

1121
00:42:14,400 --> 00:42:15,920
carefully before we build that

1122
00:42:15,920 --> 00:42:18,319
infrastructure if we must build that

1123
00:42:18,319 --> 00:42:20,079
infrastructure then we have to figure

1124
00:42:20,079 --> 00:42:22,880
out how as researchers we can make it

1125
00:42:22,880 --> 00:42:25,359
auditable and fundamentally resistant to

1126
00:42:25,359 --> 00:42:26,480
abuses

1127
00:42:26,480 --> 00:42:28,880
from the start rather than waiting until

1128
00:42:28,880 --> 00:42:30,319
after it's been deployed and trying to

1129
00:42:30,319 --> 00:42:32,560
bolt on these systems

1130
00:42:32,560 --> 00:42:34,400
okay the last thing i will say is that

1131
00:42:34,400 --> 00:42:35,760
there is an excellent paper about this

1132
00:42:35,760 --> 00:42:38,079
by some of my co-authors not myself but

1133
00:42:38,079 --> 00:42:39,680
some of my co-authors is called bugs in

1134
00:42:39,680 --> 00:42:42,240
our pockets it has a much more detailed

1135
00:42:42,240 --> 00:42:44,160
argument about the risks than anything i

1136
00:42:44,160 --> 00:42:45,040
could give you in this short

1137
00:42:45,040 --> 00:42:47,200
presentation so please go check it out

1138
00:42:47,200 --> 00:42:50,060
and read it and thank you very much

1139
00:42:50,060 --> 00:42:53,509
[Applause]

1140
00:42:59,770 --> 00:43:01,760
[Applause]

1141
00:43:01,760 --> 00:43:03,760
thank you matt um

1142
00:43:03,760 --> 00:43:05,680
uh we have a few minutes for questions

1143
00:43:05,680 --> 00:43:08,319
if people have uh if people like the

1144
00:43:08,319 --> 00:43:09,520
microphone

1145
00:43:09,520 --> 00:43:12,880
or put them into shadow result

1146
00:43:12,880 --> 00:43:14,960
um well people already organized that to

1147
00:43:14,960 --> 00:43:16,720
try try and maybe pull a silver lining

1148
00:43:16,720 --> 00:43:20,079
out of your black slides um

1149
00:43:20,079 --> 00:43:21,599
i wonder you know

1150
00:43:21,599 --> 00:43:23,680
setting aside

1151
00:43:23,680 --> 00:43:26,000
the law enforcement applications you

1152
00:43:26,000 --> 00:43:27,599
know are there things that have been

1153
00:43:27,599 --> 00:43:28,800
learned through the development of these

1154
00:43:28,800 --> 00:43:31,040
kind of psi and npc things that have

1155
00:43:31,040 --> 00:43:33,119
been developed that might be applicable

1156
00:43:33,119 --> 00:43:36,319
to more benign uh features of messaging

1157
00:43:36,319 --> 00:43:37,920
systems

1158
00:43:37,920 --> 00:43:39,440
yeah i think that the development of

1159
00:43:39,440 --> 00:43:41,839
these psi systems and even two pc neural

1160
00:43:41,839 --> 00:43:43,599
network evaluation has been incredibly

1161
00:43:43,599 --> 00:43:45,359
valuable and i think you know the the

1162
00:43:45,359 --> 00:43:47,040
ability to do this kind of work and do

1163
00:43:47,040 --> 00:43:49,040
it very efficiently is important

1164
00:43:49,040 --> 00:43:50,640
um so you know there are clearly

1165
00:43:50,640 --> 00:43:52,079
applications where this is not going to

1166
00:43:52,079 --> 00:43:53,599
be a violation of privacy where people

1167
00:43:53,599 --> 00:43:54,960
need to do this kind of scanning so

1168
00:43:54,960 --> 00:43:56,960
there's no problem with the technology

1169
00:43:56,960 --> 00:43:58,880
the the concern that i have is that you

1170
00:43:58,880 --> 00:44:00,240
know sometimes we develop technology

1171
00:44:00,240 --> 00:44:01,520
before we know how whether we're ready

1172
00:44:01,520 --> 00:44:03,040
to do it you know what we're ready to do

1173
00:44:03,040 --> 00:44:04,480
with it it's kind of the jurassic park

1174
00:44:04,480 --> 00:44:06,560
problem of cryptography is that you know

1175
00:44:06,560 --> 00:44:08,000
we we need to make sure that we know how

1176
00:44:08,000 --> 00:44:09,520
to control the dinosaurs before we set

1177
00:44:09,520 --> 00:44:10,960
them free on the island but i do think

1178
00:44:10,960 --> 00:44:12,960
the technology is wonderful and i'm very

1179
00:44:12,960 --> 00:44:15,200
enthusiastic about it

1180
00:44:15,200 --> 00:44:16,160
okay

1181
00:44:16,160 --> 00:44:17,680
here we have one question my friend

1182
00:44:17,680 --> 00:44:19,200
please go ahead

1183
00:44:19,200 --> 00:44:21,599
hi thank you very much for the talk

1184
00:44:21,599 --> 00:44:23,599
i remember reading at some point a

1185
00:44:23,599 --> 00:44:25,839
report by i believe the australian

1186
00:44:25,839 --> 00:44:27,200
federal police

1187
00:44:27,200 --> 00:44:30,160
about facebook pdq uh reasoning about

1188
00:44:30,160 --> 00:44:32,720
the fact that while for non-malicious

1189
00:44:32,720 --> 00:44:35,040
they call them modifications the

1190
00:44:35,040 --> 00:44:36,480
performance of detecting through

1191
00:44:36,480 --> 00:44:38,160
positives was very good

1192
00:44:38,160 --> 00:44:40,240
uh this degraded very quickly as soon as

1193
00:44:40,240 --> 00:44:42,160
you put a minimum effort like slightly

1194
00:44:42,160 --> 00:44:43,839
rotating the picture or something like

1195
00:44:43,839 --> 00:44:46,400
that so i'm wondering uh

1196
00:44:46,400 --> 00:44:48,240
do you have a clear understanding of

1197
00:44:48,240 --> 00:44:51,040
what's the adversarial model that law

1198
00:44:51,040 --> 00:44:53,200
enforcement is is thinking of because i

1199
00:44:53,200 --> 00:44:55,040
understand that season users sometimes

1200
00:44:55,040 --> 00:44:56,000
can be

1201
00:44:56,000 --> 00:44:58,319
very much looking into uh being

1202
00:44:58,319 --> 00:45:01,200
adversarial to evade control while

1203
00:45:01,200 --> 00:45:03,040
honest users might instead not be

1204
00:45:03,040 --> 00:45:05,119
worrying about that and

1205
00:45:05,119 --> 00:45:07,359
get tracked as a consequence of enabling

1206
00:45:07,359 --> 00:45:09,920
this kind of technology

1207
00:45:09,920 --> 00:45:11,599
yeah i think that these systems what

1208
00:45:11,599 --> 00:45:12,880
we've learned about these systems is

1209
00:45:12,880 --> 00:45:14,960
they are not particularly robust to

1210
00:45:14,960 --> 00:45:17,280
adversarial behavior of any kind even

1211
00:45:17,280 --> 00:45:19,440
mild attempts to evade the system are

1212
00:45:19,440 --> 00:45:21,280
very easy to get away with uh this is

1213
00:45:21,280 --> 00:45:22,880
particularly true with the open source

1214
00:45:22,880 --> 00:45:24,960
algorithms but you know there's no such

1215
00:45:24,960 --> 00:45:26,319
thing as a secret algorithm we learned

1216
00:45:26,319 --> 00:45:28,720
that because both neural hash and uh and

1217
00:45:28,720 --> 00:45:30,400
photo dna leaked out in this summer

1218
00:45:30,400 --> 00:45:32,880
within weeks of this apple announcement

1219
00:45:32,880 --> 00:45:34,480
so you know these public algorithms are

1220
00:45:34,480 --> 00:45:36,480
not robust they will never be robust

1221
00:45:36,480 --> 00:45:38,560
it's impossible to make them so so we

1222
00:45:38,560 --> 00:45:40,560
are targeting a really low hanging fruit

1223
00:45:40,560 --> 00:45:41,920
of users who are just not trying to

1224
00:45:41,920 --> 00:45:44,800
evade um you know that unfortunately is

1225
00:45:44,800 --> 00:45:46,319
relatively easy to do right now because

1226
00:45:46,319 --> 00:45:48,079
it turns out that most users were caught

1227
00:45:48,079 --> 00:45:49,920
sending csam content don't get

1228
00:45:49,920 --> 00:45:52,720
prosecuted 97 of them are outside of the

1229
00:45:52,720 --> 00:45:55,359
us at least here so our agencies can't

1230
00:45:55,359 --> 00:45:56,560
really do anything with most of the

1231
00:45:56,560 --> 00:45:58,480
reports that we get so there's not

1232
00:45:58,480 --> 00:46:00,000
really much incentive to invade if the

1233
00:46:00,000 --> 00:46:01,119
system to work well maybe the

1234
00:46:01,119 --> 00:46:02,720
adversarial model would be would be

1235
00:46:02,720 --> 00:46:05,920
stronger but we're not there

1236
00:46:05,920 --> 00:46:08,240
thank you

1237
00:46:08,240 --> 00:46:09,440
all right

1238
00:46:09,440 --> 00:46:10,800
thank you again matt

1239
00:46:10,800 --> 00:46:12,079
great talk

1240
00:46:12,079 --> 00:46:15,240
thank you

1241
00:46:17,000 --> 00:46:22,480
[Applause]

1242
00:46:22,480 --> 00:46:24,480
so next to turn our attention to some

1243
00:46:24,480 --> 00:46:26,319
analysis on telegram four attacks and

1244
00:46:26,319 --> 00:46:28,400
approve for telegram and i think we have

1245
00:46:28,400 --> 00:46:31,599
igor stefanos um on the uh zoom to

1246
00:46:31,599 --> 00:46:33,680
present

1247
00:46:33,680 --> 00:46:36,480
igor are you there

1248
00:46:38,640 --> 00:46:39,680
let's see

1249
00:46:39,680 --> 00:46:42,960
yes can you hear me that's great please

1250
00:46:42,960 --> 00:46:44,800
go ahead

1251
00:46:44,800 --> 00:46:47,760
let me show you my screen

1252
00:46:50,110 --> 00:46:52,960
[Music]

1253
00:46:52,960 --> 00:46:56,079
okay can you see the style

1254
00:46:56,079 --> 00:46:57,839
yes thank you

1255
00:46:57,839 --> 00:47:00,319
thank you uh so let me start son

1256
00:47:00,319 --> 00:47:02,800
uh so this talk is based on the telegram

1257
00:47:02,800 --> 00:47:04,560
paper that will appear in the security

1258
00:47:04,560 --> 00:47:08,880
and privacy conference in may of 2020

1259
00:47:08,880 --> 00:47:11,680
and so uh let's start by discussing the

1260
00:47:11,680 --> 00:47:13,119
relevance of

1261
00:47:13,119 --> 00:47:15,599
it is uh one of the most uh used instant

1262
00:47:15,599 --> 00:47:17,359
messaging applications

1263
00:47:17,359 --> 00:47:18,560
uh

1264
00:47:18,560 --> 00:47:21,040
uh in terms of monthly active users it

1265
00:47:21,040 --> 00:47:23,920
has uh roughly 550 million

1266
00:47:23,920 --> 00:47:25,760
users

1267
00:47:25,760 --> 00:47:28,160
so according to the study published

1268
00:47:28,160 --> 00:47:31,200
previous year in new cynics uh telegram

1269
00:47:31,200 --> 00:47:34,319
was a predominant messaging used in the

1270
00:47:34,319 --> 00:47:36,000
hong kong protests in

1271
00:47:36,000 --> 00:47:38,800
2019 2020

1272
00:47:38,800 --> 00:47:41,040
and generally telegram was perceived by

1273
00:47:41,040 --> 00:47:43,440
protesters to provide more security than

1274
00:47:43,440 --> 00:47:45,680
its uh competitors

1275
00:47:45,680 --> 00:47:47,200
and so uh

1276
00:47:47,200 --> 00:47:49,280
the important advantages of telegram

1277
00:47:49,280 --> 00:47:52,160
according to the protesters in hong kong

1278
00:47:52,160 --> 00:47:53,200
are

1279
00:47:53,200 --> 00:47:54,400
the support of

1280
00:47:54,400 --> 00:47:57,440
public and private group chats up to two

1281
00:47:57,440 --> 00:47:59,680
uh hundred thousand people

1282
00:47:59,680 --> 00:48:02,559
whereas in signal you have group chats

1283
00:48:02,559 --> 00:48:04,640
up to at most one thousand

1284
00:48:04,640 --> 00:48:07,440
whatsapp supports 256.

1285
00:48:07,440 --> 00:48:09,520
uh second advantage of telegram is that

1286
00:48:09,520 --> 00:48:11,599
it supports psychonymity meaning you can

1287
00:48:11,599 --> 00:48:14,079
use a pseudonym rather than reveal your

1288
00:48:14,079 --> 00:48:16,400
phone number to the linear group

1289
00:48:16,400 --> 00:48:18,319
uh this is not supported by signal and

1290
00:48:18,319 --> 00:48:20,319
whatsapp and there are a number of other

1291
00:48:20,319 --> 00:48:21,920
features that

1292
00:48:21,920 --> 00:48:24,640
are valuable to the protesters such as

1293
00:48:24,640 --> 00:48:27,359
anonymous polls disappearing messages

1294
00:48:27,359 --> 00:48:29,760
timed or scheduled messages ability to

1295
00:48:29,760 --> 00:48:32,960
delete messages by other people

1296
00:48:32,960 --> 00:48:34,559
and so uh

1297
00:48:34,559 --> 00:48:36,640
i guess the most valuable thing for us

1298
00:48:36,640 --> 00:48:38,400
that was discovered in this paper is

1299
00:48:38,400 --> 00:48:39,520
that uh

1300
00:48:39,520 --> 00:48:42,000
the common use cases for telegram was

1301
00:48:42,000 --> 00:48:44,559
that it was uh generally used in large

1302
00:48:44,559 --> 00:48:45,760
groups

1303
00:48:45,760 --> 00:48:48,720
in large public groups up to 50 000

1304
00:48:48,720 --> 00:48:49,839
members

1305
00:48:49,839 --> 00:48:52,720
and in small privates so here importance

1306
00:48:52,720 --> 00:48:55,680
is that it's mostly used for group chats

1307
00:48:55,680 --> 00:48:57,520
and uh

1308
00:48:57,520 --> 00:48:59,440
yeah there are two different use cases

1309
00:48:59,440 --> 00:49:02,559
for different sizes of charts

1310
00:49:02,559 --> 00:49:05,920
okay so uh the telegram offers two types

1311
00:49:05,920 --> 00:49:07,119
of chats

1312
00:49:07,119 --> 00:49:10,160
shots and secret shots

1313
00:49:10,559 --> 00:49:12,079
in cloud chats

1314
00:49:12,079 --> 00:49:14,160
you can

1315
00:49:14,160 --> 00:49:16,000
do group communication you can do

1316
00:49:16,000 --> 00:49:18,079
one-on-one communication

1317
00:49:18,079 --> 00:49:21,839
uh you get a client server encryption uh

1318
00:49:21,839 --> 00:49:22,880
and

1319
00:49:22,880 --> 00:49:25,680
cloud chats are enabled by default so by

1320
00:49:25,680 --> 00:49:27,200
default you do get client server

1321
00:49:27,200 --> 00:49:28,800
communication

1322
00:49:28,800 --> 00:49:31,040
uh in contrast in secret shots uh you

1323
00:49:31,040 --> 00:49:33,760
can only do one-on-one communication

1324
00:49:33,760 --> 00:49:36,400
uh it is sent to and encrypted but it is

1325
00:49:36,400 --> 00:49:38,480
not enabled by the

1326
00:49:38,480 --> 00:49:40,310
when you open the one and one chats

1327
00:49:40,310 --> 00:49:42,000
[Music]

1328
00:49:42,000 --> 00:49:44,720
so uh in order to uh

1329
00:49:44,720 --> 00:49:47,119
provide this encryption uh telegram has

1330
00:49:47,119 --> 00:49:50,319
invented its own empty proto protocol

1331
00:49:50,319 --> 00:49:52,800
it's uh it is telegram's equivalent of

1332
00:49:52,800 --> 00:49:56,559
the tls protocol so in cloud chats

1333
00:49:56,559 --> 00:49:58,160
telegram uses the empty predator

1334
00:49:58,160 --> 00:50:00,240
protocol script and authenticate

1335
00:50:00,240 --> 00:50:02,000
messages from the client to the server

1336
00:50:02,000 --> 00:50:03,440
and then from the server to other

1337
00:50:03,440 --> 00:50:04,880
clients

1338
00:50:04,880 --> 00:50:07,359
whereas in secret chats in addition to

1339
00:50:07,359 --> 00:50:08,319
that

1340
00:50:08,319 --> 00:50:09,520
uh

1341
00:50:09,520 --> 00:50:11,040
the messages are also end to end

1342
00:50:11,040 --> 00:50:13,520
encrypted this in particular means that

1343
00:50:13,520 --> 00:50:14,480
uh

1344
00:50:14,480 --> 00:50:16,160
secret chat message each entered

1345
00:50:16,160 --> 00:50:18,480
encrypted message is encrypted first

1346
00:50:18,480 --> 00:50:21,119
to the key

1347
00:50:22,800 --> 00:50:24,960
and then on top of that it's again

1348
00:50:24,960 --> 00:50:27,359
double encrypted

1349
00:50:27,359 --> 00:50:30,480
you to the key of the server

1350
00:50:30,480 --> 00:50:33,200
encryption going on here

1351
00:50:33,200 --> 00:50:36,960
uh so the empty protocol

1352
00:50:37,280 --> 00:50:39,760
the telegram was launched with version

1353
00:50:39,760 --> 00:50:42,640
one of the protocol in 2013

1354
00:50:42,640 --> 00:50:46,400
in 2016 uh

1355
00:50:46,880 --> 00:50:48,240
a cca

1356
00:50:48,240 --> 00:50:50,720
attack against empty proto version one

1357
00:50:50,720 --> 00:50:54,720
in 2017 telegram updated the protocol

1358
00:50:54,720 --> 00:50:57,359
to release version 2.

1359
00:50:57,359 --> 00:51:00,079
in 2017 and 18 uh

1360
00:51:00,079 --> 00:51:02,720
there were two works

1361
00:51:02,720 --> 00:51:03,920
that

1362
00:51:03,920 --> 00:51:06,839
reported some words with the protocol in

1363
00:51:06,839 --> 00:51:10,720
2020 a paper uh proved empty

1364
00:51:10,720 --> 00:51:11,920
secure

1365
00:51:11,920 --> 00:51:14,000
in the symbolic model

1366
00:51:14,000 --> 00:51:16,160
assuming i feel building blocks and

1367
00:51:16,160 --> 00:51:18,160
obstructing away all implementation and

1368
00:51:18,160 --> 00:51:20,720
primitive details

1369
00:51:20,720 --> 00:51:23,680
and so uh the focus is literature this

1370
00:51:23,680 --> 00:51:25,440
part has actually been on the secret

1371
00:51:25,440 --> 00:51:28,000
shots whereas as discussed uh

1372
00:51:28,000 --> 00:51:30,000
in relation to the protests in hong kong

1373
00:51:30,000 --> 00:51:32,319
we do want to mostly study the cloud

1374
00:51:32,319 --> 00:51:34,160
charts meaning we will study the client

1375
00:51:34,160 --> 00:51:36,400
server

1376
00:51:36,400 --> 00:51:38,319
and at this point i guess the reasonable

1377
00:51:38,319 --> 00:51:40,400
question would be why you just not used

1378
00:51:40,400 --> 00:51:42,800
to instead of md proto

1379
00:51:42,800 --> 00:51:45,520
and uh there is no

1380
00:51:45,520 --> 00:51:46,319
uh

1381
00:51:46,319 --> 00:51:47,920
well

1382
00:51:47,920 --> 00:51:50,000
well basically the telegram development

1383
00:51:50,000 --> 00:51:51,839
team insists that they do prefer empty

1384
00:51:51,839 --> 00:51:53,680
proto and that it's good enough for

1385
00:51:53,680 --> 00:51:55,040
their purpose

1386
00:51:55,040 --> 00:51:57,359
so there's no sort of deeper razor than

1387
00:51:57,359 --> 00:51:59,440
that

1388
00:51:59,440 --> 00:52:01,680
okay uh so let me

1389
00:52:01,680 --> 00:52:04,400
explain uh how empty proto

1390
00:52:04,400 --> 00:52:05,920
is designed

1391
00:52:05,920 --> 00:52:07,760
here i will start at a very high

1392
00:52:07,760 --> 00:52:09,440
abstraction level and i will gradually

1393
00:52:09,440 --> 00:52:12,720
add some more details however it's uh

1394
00:52:12,720 --> 00:52:14,880
it's so complicated that i will omit and

1395
00:52:14,880 --> 00:52:17,520
simplify some of the those that are not

1396
00:52:17,520 --> 00:52:20,400
relevant to this talk

1397
00:52:20,400 --> 00:52:22,160
okay so let's start by

1398
00:52:22,160 --> 00:52:24,240
sort of the overreaching idea is that

1399
00:52:24,240 --> 00:52:26,079
empty proto is designed as a variant of

1400
00:52:26,079 --> 00:52:28,480
the encrypted mac composition

1401
00:52:28,480 --> 00:52:31,440
here you have some payload that

1402
00:52:31,440 --> 00:52:34,800
gets hushed uh with the mac algorithm

1403
00:52:34,800 --> 00:52:37,359
that is keyed with some long term mackie

1404
00:52:37,359 --> 00:52:38,960
mk

1405
00:52:38,960 --> 00:52:41,200
and you get the tag

1406
00:52:41,200 --> 00:52:43,760
as the output which is called

1407
00:52:43,760 --> 00:52:45,280
in empty proto

1408
00:52:45,280 --> 00:52:47,280
and at the same time this payload is

1409
00:52:47,280 --> 00:52:48,319
also

1410
00:52:48,319 --> 00:52:50,240
encrypted with symmetric encryption

1411
00:52:50,240 --> 00:52:52,079
scheme with some key in iv we'll get to

1412
00:52:52,079 --> 00:52:54,000
this in a second

1413
00:52:54,000 --> 00:52:57,119
to produce a cyber text

1414
00:52:57,119 --> 00:52:58,880
okay so now uh

1415
00:52:58,880 --> 00:53:00,960
let's uh flash out more details so this

1416
00:53:00,960 --> 00:53:03,440
key in ib for somatic encryption scheme

1417
00:53:03,440 --> 00:53:04,720
is

1418
00:53:04,720 --> 00:53:06,800
using a key derivation algorithm that

1419
00:53:06,800 --> 00:53:08,000
takes uh

1420
00:53:08,000 --> 00:53:09,839
the tag

1421
00:53:09,839 --> 00:53:12,880
as input and uses some long term

1422
00:53:12,880 --> 00:53:15,119
the key derivation key

1423
00:53:15,119 --> 00:53:17,520
as well

1424
00:53:17,839 --> 00:53:18,720
so

1425
00:53:18,720 --> 00:53:21,359
okay so this this basically represents

1426
00:53:21,359 --> 00:53:22,079
the

1427
00:53:22,079 --> 00:53:24,400
encryption algorithm in the empty

1428
00:53:24,400 --> 00:53:26,160
protocol

1429
00:53:26,160 --> 00:53:27,760
you can now imagine basically that the

1430
00:53:27,760 --> 00:53:29,359
decryption algorithm would google

1431
00:53:29,359 --> 00:53:31,359
everything first it would take the cyber

1432
00:53:31,359 --> 00:53:32,319
text

1433
00:53:32,319 --> 00:53:34,400
and the message key it would derive the

1434
00:53:34,400 --> 00:53:37,119
symmetric key using the kdf from the

1435
00:53:37,119 --> 00:53:38,880
message key decrypt the ciphertext and

1436
00:53:38,880 --> 00:53:40,480
then it would have to do the

1437
00:53:40,480 --> 00:53:42,640
notification of the hash in order to

1438
00:53:42,640 --> 00:53:44,319
confirm that

1439
00:53:44,319 --> 00:53:48,000
the type of text was not tampered with

1440
00:53:48,240 --> 00:53:49,920
okay so now uh

1441
00:53:49,920 --> 00:53:52,079
i guess the most important detail here

1442
00:53:52,079 --> 00:53:53,680
is obviously that

1443
00:53:53,680 --> 00:53:56,319
uh in in genetic

1444
00:53:56,319 --> 00:53:58,160
script and mac constructions uh them

1445
00:53:58,160 --> 00:54:00,640
outwards reveals the quality of the site

1446
00:54:00,640 --> 00:54:03,599
of the blank text or playing paint modes

1447
00:54:03,599 --> 00:54:05,119
here this is not a problem because

1448
00:54:05,119 --> 00:54:07,200
payload is uh

1449
00:54:07,200 --> 00:54:08,960
uh

1450
00:54:08,960 --> 00:54:10,960
payload consists of a bunch of metadata

1451
00:54:10,960 --> 00:54:13,280
and it will guide that uh nautical

1452
00:54:13,280 --> 00:54:15,520
plaintext will be the same

1453
00:54:15,520 --> 00:54:18,160
uh so in particular the uh

1454
00:54:18,160 --> 00:54:19,920
the details of the payloads will be

1455
00:54:19,920 --> 00:54:21,599
important for our attacks so let us look

1456
00:54:21,599 --> 00:54:23,760
at each

1457
00:54:23,760 --> 00:54:25,960
so the payload starts with two

1458
00:54:25,960 --> 00:54:28,960
128-bit blocks of metadata uh followed

1459
00:54:28,960 --> 00:54:30,480
by an arbitrary number of blocks

1460
00:54:30,480 --> 00:54:31,839
containing the actual body of the

1461
00:54:31,839 --> 00:54:34,240
message

1462
00:54:34,559 --> 00:54:36,640
and then some random padding uh from

1463
00:54:36,640 --> 00:54:40,000
twelve to one thousand points

1464
00:54:40,000 --> 00:54:41,440
so in the first block you get server

1465
00:54:41,440 --> 00:54:43,359
salt and session id those are random

1466
00:54:43,359 --> 00:54:46,160
64-bit values uh the server result is

1467
00:54:46,160 --> 00:54:47,839
changed by the server roughly once per

1468
00:54:47,839 --> 00:54:48,880
hour

1469
00:54:48,880 --> 00:54:51,280
the session id value remains the same

1470
00:54:51,280 --> 00:54:54,960
until the long term keys are changed

1471
00:54:55,280 --> 00:54:56,319
block

1472
00:54:56,319 --> 00:54:59,200
you get the message sequence number

1473
00:54:59,200 --> 00:55:01,200
and message length the first

1474
00:55:01,200 --> 00:55:03,040
sequence number sends a distinct counter

1475
00:55:03,040 --> 00:55:06,319
to each message

1476
00:55:06,319 --> 00:55:07,920
the message length is basically the

1477
00:55:07,920 --> 00:55:09,760
length of the message

1478
00:55:09,760 --> 00:55:13,200
uh in bytes

1479
00:55:13,280 --> 00:55:15,520
um

1480
00:55:15,599 --> 00:55:16,880
yeah so

1481
00:55:16,880 --> 00:55:20,000
now uh let's continue with the

1482
00:55:20,000 --> 00:55:21,760
design of empty proto this metric

1483
00:55:21,760 --> 00:55:23,760
encryption scheme that is used here is

1484
00:55:23,760 --> 00:55:25,520
actually

1485
00:55:25,520 --> 00:55:26,799
an

1486
00:55:26,799 --> 00:55:29,599
infinite garbage extension mode

1487
00:55:29,599 --> 00:55:33,040
based on as256

1488
00:55:33,040 --> 00:55:35,440
the infinite garbage extension is not a

1489
00:55:35,440 --> 00:55:36,799
commonly used

1490
00:55:36,799 --> 00:55:38,400
operation and there is some prior work

1491
00:55:38,400 --> 00:55:40,799
showing that ige does not satisfy

1492
00:55:40,799 --> 00:55:43,440
certain security notions

1493
00:55:43,440 --> 00:55:45,520
however observe that when compared to

1494
00:55:45,520 --> 00:55:47,599
the cpc mode the ige mode in addition

1495
00:55:47,599 --> 00:55:50,720
make source each plaintext block the

1496
00:55:50,720 --> 00:55:52,640
next ciphertext block

1497
00:55:52,640 --> 00:55:54,640
this makes it rather straightforward

1498
00:55:54,640 --> 00:55:56,319
that if cbc provides cyber text

1499
00:55:56,319 --> 00:55:57,680
inductability

1500
00:55:57,680 --> 00:56:01,280
from uniformly random strings on a piece

1501
00:56:01,280 --> 00:56:03,119
and so does ige

1502
00:56:03,119 --> 00:56:05,280
and we will show well we show in our

1503
00:56:05,280 --> 00:56:07,359
work that this property is sufficient so

1504
00:56:07,359 --> 00:56:10,799
ig is fine for the purpose

1505
00:56:11,440 --> 00:56:13,920
uh now let's look at uh the construction

1506
00:56:13,920 --> 00:56:15,040
of the

1507
00:56:15,040 --> 00:56:17,040
message authentication code algorithm

1508
00:56:17,040 --> 00:56:19,200
and the kdf algorithm

1509
00:56:19,200 --> 00:56:20,559
most of them are actually based on

1510
00:56:20,559 --> 00:56:23,119
sha-256

1511
00:56:23,119 --> 00:56:25,839
the mac algorithm concatenates the

1512
00:56:25,839 --> 00:56:28,799
long-term message key with the payload

1513
00:56:28,799 --> 00:56:32,160
runs it through shuffle 256 and then

1514
00:56:32,160 --> 00:56:33,760
truncates out

1515
00:56:33,760 --> 00:56:38,079
the middle 128 uh bits of the output

1516
00:56:38,079 --> 00:56:40,960
that's the tag uh the kdm

1517
00:56:40,960 --> 00:56:44,799
splits the long term uh kdf keying helps

1518
00:56:44,799 --> 00:56:46,000
it's

1519
00:56:46,000 --> 00:56:47,920
two

1520
00:56:47,920 --> 00:56:50,799
evaluations of sha-256 function

1521
00:56:50,799 --> 00:56:52,480
one of them could get nice message key

1522
00:56:52,480 --> 00:56:53,599
with the

1523
00:56:53,599 --> 00:56:55,119
first half of

1524
00:56:55,119 --> 00:56:56,400
long-term key

1525
00:56:56,400 --> 00:56:58,960
the second concatenates the second half

1526
00:56:58,960 --> 00:57:01,440
of the kdf keys message key eight

1527
00:57:01,440 --> 00:57:04,000
outputs the concatenation of uh

1528
00:57:04,000 --> 00:57:06,559
cases that they derived

1529
00:57:06,559 --> 00:57:07,680
uh

1530
00:57:07,680 --> 00:57:09,599
finally it also turns out that different

1531
00:57:09,599 --> 00:57:11,839
but related mock and kdf keys are used

1532
00:57:11,839 --> 00:57:13,839
uh depending on whether a message never

1533
00:57:13,839 --> 00:57:16,400
be pro present from a client to a server

1534
00:57:16,400 --> 00:57:18,480
or in the opposite direction

1535
00:57:18,480 --> 00:57:20,480
here you can see a picture

1536
00:57:20,480 --> 00:57:23,200
that shows how to drive the kdf in my

1537
00:57:23,200 --> 00:57:24,160
keys

1538
00:57:24,160 --> 00:57:27,680
from a row g x y value that is uh

1539
00:57:27,680 --> 00:57:29,839
obtained as a result of dp harm and key

1540
00:57:29,839 --> 00:57:31,040
exchange

1541
00:57:31,040 --> 00:57:32,480
and you can see that

1542
00:57:32,480 --> 00:57:34,880
depending on which direction you send a

1543
00:57:34,880 --> 00:57:37,440
message from client or from server you

1544
00:57:37,440 --> 00:57:40,799
would use related keys

1545
00:57:40,799 --> 00:57:42,000
in order to

1546
00:57:42,000 --> 00:57:45,200
run kdf and mac

1547
00:57:50,240 --> 00:57:52,240
okay so

1548
00:57:52,240 --> 00:57:53,520
now

1549
00:57:53,520 --> 00:57:56,400
to finish the about the construction

1550
00:57:56,400 --> 00:57:58,720
uh in our work we managed to prove that

1551
00:57:58,720 --> 00:58:01,200
the variant of mt proto satisfies some

1552
00:58:01,200 --> 00:58:03,200
form authenticate of authenticated

1553
00:58:03,200 --> 00:58:04,480
information

1554
00:58:04,480 --> 00:58:07,200
but this comes with many caveats

1555
00:58:07,200 --> 00:58:08,599
our formal definition of empty

1556
00:58:08,599 --> 00:58:10,720
prototypes from the actual real world

1557
00:58:10,720 --> 00:58:11,920
construction

1558
00:58:11,920 --> 00:58:14,079
or simplifies it in several ways for

1559
00:58:14,079 --> 00:58:15,520
example

1560
00:58:15,520 --> 00:58:17,200
uh we have to assume that the output of

1561
00:58:17,200 --> 00:58:19,280
the dp helmet key exchange gx y is a

1562
00:58:19,280 --> 00:58:22,319
uniform bit string it's actually not

1563
00:58:22,319 --> 00:58:24,400
furthermore our proof relies on novel

1564
00:58:24,400 --> 00:58:26,400
assumptions about the block sniper

1565
00:58:26,400 --> 00:58:29,040
shackle 2 that is used in the davies

1566
00:58:29,040 --> 00:58:31,599
meyer construction of the shah 256

1567
00:58:31,599 --> 00:58:33,040
compression function

1568
00:58:33,040 --> 00:58:35,599
we need it to be perfect

1569
00:58:35,599 --> 00:58:38,319
different forms of related key

1570
00:58:38,319 --> 00:58:40,880
plated keys and key leakage

1571
00:58:40,880 --> 00:58:43,040
it seems that any proof here would help

1572
00:58:43,040 --> 00:58:45,680
to deal with such related keys questions

1573
00:58:45,680 --> 00:58:47,599
about chakaltu

1574
00:58:47,599 --> 00:58:50,480
to conclude the discussion about

1575
00:58:50,480 --> 00:58:52,480
probable security further analysis is

1576
00:58:52,480 --> 00:58:54,240
needed to reach any conclusions or

1577
00:58:54,240 --> 00:58:57,040
security of empty proto as the

1578
00:58:57,040 --> 00:59:00,480
uh actual real world

1579
00:59:00,559 --> 00:59:03,040
okay so now uh

1580
00:59:03,040 --> 00:59:05,119
now that we have uh disposed of the

1581
00:59:05,119 --> 00:59:07,200
proof let us simplify

1582
00:59:07,200 --> 00:59:08,559
uh

1583
00:59:08,559 --> 00:59:10,880
our picture for empty proto design again

1584
00:59:10,880 --> 00:59:13,119
so now we'll discuss attacks

1585
00:59:13,119 --> 00:59:15,599
psychopaths will only need this much

1586
00:59:15,599 --> 00:59:18,319
uh details in particular we will not

1587
00:59:18,319 --> 00:59:20,799
care how a mac and kdf algorithms are

1588
00:59:20,799 --> 00:59:22,960
constructed we only care about the

1589
00:59:22,960 --> 00:59:25,440
structure of the payload

1590
00:59:25,440 --> 00:59:26,799
and about uh

1591
00:59:26,799 --> 00:59:28,610
ig mode of operation

1592
00:59:28,610 --> 00:59:30,319
[Music]

1593
00:59:30,319 --> 00:59:33,520
so uh we found four weaknesses in empty

1594
00:59:33,520 --> 00:59:35,440
proto

1595
00:59:35,440 --> 00:59:36,799
and we reported them to telegram on

1596
00:59:36,799 --> 00:59:39,760
april 16 2021 uh telegram of knowledge

1597
00:59:39,760 --> 00:59:42,079
just soon after and they acknowledged

1598
00:59:42,079 --> 00:59:43,520
the behaviors

1599
00:59:43,520 --> 00:59:44,839
on june 8

1600
00:59:44,839 --> 00:59:50,240
2021. uh via disclosure on july 16 2021

1601
00:59:50,240 --> 00:59:52,559
uh telegram told us that they do no

1602
00:59:52,559 --> 00:59:54,319
security or bug fixed religions except

1603
00:59:54,319 --> 00:59:56,880
for immediate post-release cash fixes

1604
00:59:56,880 --> 00:59:57,680
they

1605
00:59:57,680 --> 00:59:59,680
wish to issue security advisories that i

1606
00:59:59,680 --> 01:00:00,880
was watching

1607
01:00:00,880 --> 01:00:03,040
and they did not commit to release

1608
01:00:03,040 --> 01:00:05,599
20 release dates for specific fixes

1609
01:00:05,599 --> 01:00:07,920
and so eventually they uh

1610
01:00:07,920 --> 01:00:09,760
brought the fixes as part of regular

1611
01:00:09,760 --> 01:00:11,440
updates in

1612
01:00:11,440 --> 01:00:14,640
version 781 for android 783 for ios and

1613
01:00:14,640 --> 01:00:17,440
284 desktop

1614
01:00:17,440 --> 01:00:20,400
now uh let's speak about our attacks

1615
01:00:20,400 --> 01:00:23,200
so we have four attacks um

1616
01:00:23,200 --> 01:00:25,760
we have an attack showing

1617
01:00:25,760 --> 01:00:28,079
empty proto is not idcpa secure this is

1618
01:00:28,079 --> 01:00:30,160
a purely theoretical attack with a

1619
01:00:30,160 --> 01:00:32,480
message reordering attack uh it is

1620
01:00:32,480 --> 01:00:35,200
trivial and easy exploits

1621
01:00:35,200 --> 01:00:37,359
obviously not very impactful we have

1622
01:00:37,359 --> 01:00:38,240
site

1623
01:00:38,240 --> 01:00:40,240
timing sectional attacks against client

1624
01:00:40,240 --> 01:00:43,520
and server uh the one against the client

1625
01:00:43,520 --> 01:00:45,440
does plaintext recovery against the

1626
01:00:45,440 --> 01:00:47,119
server that's men in the middle and key

1627
01:00:47,119 --> 01:00:50,319
exchange uh unfortunately they are not

1628
01:00:50,319 --> 01:00:52,559
rather fortunately they are not

1629
01:00:52,559 --> 01:00:54,040
feasible in

1630
01:00:54,040 --> 01:00:57,200
practice uh and yeah telegram awarded

1631
01:00:57,200 --> 01:00:59,040
the back bounty for situational attacks

1632
01:00:59,040 --> 01:01:02,240
and for the overall analysis with it

1633
01:01:02,240 --> 01:01:04,160
okay so i'm gonna scroll through these

1634
01:01:04,160 --> 01:01:05,760
first two attacks quickly because they

1635
01:01:05,760 --> 01:01:06,960
are trivial

1636
01:01:06,960 --> 01:01:08,319
uh for the id

1637
01:01:08,319 --> 01:01:10,319
attack uh

1638
01:01:10,319 --> 01:01:12,160
i'm not going to the details here but

1639
01:01:12,160 --> 01:01:15,040
basically what happens is that

1640
01:01:15,040 --> 01:01:17,680
uh if a payload is encrypted

1641
01:01:17,680 --> 01:01:19,839
and sent from a client to the server but

1642
01:01:19,839 --> 01:01:22,839
the client does not receive an

1643
01:01:22,839 --> 01:01:26,400
acknowledgement uh that

1644
01:01:26,400 --> 01:01:28,319
that the encrypted payload was received

1645
01:01:28,319 --> 01:01:29,119
then

1646
01:01:29,119 --> 01:01:30,960
uh the client would re-encrypt the

1647
01:01:30,960 --> 01:01:33,200
payloads again using all the same

1648
01:01:33,200 --> 01:01:36,640
metadata uh this message but a different

1649
01:01:36,640 --> 01:01:38,880
budding different random padding

1650
01:01:38,880 --> 01:01:42,559
so what it leads to is that uh

1651
01:01:42,640 --> 01:01:44,079
if there is a collision in pudding

1652
01:01:44,079 --> 01:01:45,920
across multiple encryptions of the

1653
01:01:45,920 --> 01:01:49,119
payloads with no acknowledge in between

1654
01:01:49,119 --> 01:01:51,839
then the birthday would give you a

1655
01:01:51,839 --> 01:01:54,319
collision message key collision key

1656
01:01:54,319 --> 01:01:56,240
would result in some blocks of the cyber

1657
01:01:56,240 --> 01:01:57,680
text being equal

1658
01:01:57,680 --> 01:01:59,920
so you would be able to tell whether

1659
01:01:59,920 --> 01:02:01,680
the ciphertext coming from the server to

1660
01:02:01,680 --> 01:02:05,119
the client do encrypt an acknowledgement

1661
01:02:05,119 --> 01:02:06,799
of the receipt

1662
01:02:06,799 --> 01:02:09,200
of your payloads or not

1663
01:02:09,200 --> 01:02:11,839
an idcp attacker

1664
01:02:11,839 --> 01:02:13,680
the second attack uh does message

1665
01:02:13,680 --> 01:02:15,680
reordering attack uh

1666
01:02:15,680 --> 01:02:17,039
so for the message reordering an

1667
01:02:17,039 --> 01:02:18,799
adversary sitting on a wire from a

1668
01:02:18,799 --> 01:02:21,200
client the server can simply reorder

1669
01:02:21,200 --> 01:02:23,200
it's encrypted messages

1670
01:02:23,200 --> 01:02:24,880
and uh

1671
01:02:24,880 --> 01:02:27,599
the server is uh it's a server actually

1672
01:02:27,599 --> 01:02:30,160
time stamps uh the cyber text it

1673
01:02:30,160 --> 01:02:31,440
receives

1674
01:02:31,440 --> 01:02:32,880
in the order that it receives them

1675
01:02:32,880 --> 01:02:34,319
rather than in the order they are sent

1676
01:02:34,319 --> 01:02:36,319
from the client

1677
01:02:36,319 --> 01:02:38,640
and so then eventually even the client

1678
01:02:38,640 --> 01:02:40,079
who were sending these messages

1679
01:02:40,079 --> 01:02:42,000
initially what's uh update is

1680
01:02:42,000 --> 01:02:44,319
transcripts to use the same order of

1681
01:02:44,319 --> 01:02:46,240
messages

1682
01:02:46,240 --> 01:02:47,680
okay so let's get to the interesting

1683
01:02:47,680 --> 01:02:49,359
attacks uh

1684
01:02:49,359 --> 01:02:51,440
uh first uh programming session will

1685
01:02:51,440 --> 01:02:53,520
attack against clients

1686
01:02:53,520 --> 01:02:56,640
here uh consider what happens when

1687
01:02:56,640 --> 01:02:58,400
you run the empty proto decryption

1688
01:02:58,400 --> 01:03:00,880
algorithm

1689
01:03:01,680 --> 01:03:03,440
so you run you take a separate text you

1690
01:03:03,440 --> 01:03:05,440
run it through ig

1691
01:03:05,440 --> 01:03:07,200
mode decryption

1692
01:03:07,200 --> 01:03:09,599
and as a result you get uh

1693
01:03:09,599 --> 01:03:11,200
the first two blocks of the payload

1694
01:03:11,200 --> 01:03:13,280
server sold session id

1695
01:03:13,280 --> 01:03:14,880
the message sequence number message

1696
01:03:14,880 --> 01:03:17,839
length and some message

1697
01:03:17,839 --> 01:03:19,520
so what happens in three of the what

1698
01:03:19,520 --> 01:03:20,799
happened before

1699
01:03:20,799 --> 01:03:22,000
it's fixed obviously in the three

1700
01:03:22,000 --> 01:03:24,079
official clients was that

1701
01:03:24,079 --> 01:03:25,920
the clients run some sanity checks and

1702
01:03:25,920 --> 01:03:28,720
decrypted payload prior to verifying the

1703
01:03:28,720 --> 01:03:31,720
hash

1704
01:03:32,160 --> 01:03:34,400
so in particular

1705
01:03:34,400 --> 01:03:36,960
here we see examples that uh

1706
01:03:36,960 --> 01:03:39,599
immediately after decrypting

1707
01:03:39,599 --> 01:03:41,680
uh the cyber text and according to

1708
01:03:41,680 --> 01:03:43,359
payloads the message length value is

1709
01:03:43,359 --> 01:03:44,799
compared to different values in

1710
01:03:44,799 --> 01:03:46,160
different clients

1711
01:03:46,160 --> 01:03:47,760
either both to allow you to supply the

1712
01:03:47,760 --> 01:03:50,319
attacker or to a value supply to or the

1713
01:03:50,319 --> 01:03:53,280
constant 2284 or some more complicated

1714
01:03:53,280 --> 01:03:55,839
check in either way if this

1715
01:03:55,839 --> 01:03:56,799
uh

1716
01:03:56,799 --> 01:03:58,400
sanity check of the message length

1717
01:03:58,400 --> 01:03:59,760
failed

1718
01:03:59,760 --> 01:04:00,720
uh

1719
01:04:00,720 --> 01:04:02,640
then in the worst case in the second

1720
01:04:02,640 --> 01:04:04,720
case in desktop client uh the

1721
01:04:04,720 --> 01:04:06,480
verification

1722
01:04:06,480 --> 01:04:08,960
of the hash was completely omitted this

1723
01:04:08,960 --> 01:04:11,039
obviously gives a

1724
01:04:11,039 --> 01:04:13,119
great opportunity to run

1725
01:04:13,119 --> 01:04:15,200
uh time exceptional

1726
01:04:15,200 --> 01:04:17,039
uh

1727
01:04:17,039 --> 01:04:18,480
igor we're running a little short on

1728
01:04:18,480 --> 01:04:19,920
time so if you could try and wrap up

1729
01:04:19,920 --> 01:04:21,200
please

1730
01:04:21,200 --> 01:04:22,559
yeah

1731
01:04:22,559 --> 01:04:24,319
okay so

1732
01:04:24,319 --> 01:04:27,599
uh what we do here is we use the

1733
01:04:27,599 --> 01:04:29,599
uh

1734
01:04:29,599 --> 01:04:31,680
we use the id from the

1735
01:04:31,680 --> 01:04:32,480
uh

1736
01:04:32,480 --> 01:04:36,559
ssh paper in 2009 against cbc

1737
01:04:36,559 --> 01:04:37,440
uh

1738
01:04:37,440 --> 01:04:40,400
assume that we know uh message m1

1739
01:04:40,400 --> 01:04:43,200
and message mi minus 1

1740
01:04:43,200 --> 01:04:46,799
we want to learn the contemi

1741
01:04:46,799 --> 01:04:49,599
what we do is we

1742
01:04:49,599 --> 01:04:52,079
take the value at the input of the block

1743
01:04:52,079 --> 01:04:53,839
cipher

1744
01:04:53,839 --> 01:04:55,359
function for the message you want to

1745
01:04:55,359 --> 01:04:58,640
learn and move it to the second block

1746
01:04:58,640 --> 01:04:59,839
so we

1747
01:04:59,839 --> 01:05:02,640
set c2 equals ci

1748
01:05:02,640 --> 01:05:05,119
i minus 1 xor

1749
01:05:05,119 --> 01:05:07,039
m1

1750
01:05:07,039 --> 01:05:08,960
we uh and we observed that at the

1751
01:05:08,960 --> 01:05:11,440
outputs of the second decryption

1752
01:05:11,440 --> 01:05:13,039
we get uh

1753
01:05:13,039 --> 01:05:15,920
m i x or c i minus one the same on the

1754
01:05:15,920 --> 01:05:17,839
blue dots here and here

1755
01:05:17,839 --> 01:05:20,839
so in the result we get

1756
01:05:20,839 --> 01:05:25,760
uh two equals this blue thing x or c one

1757
01:05:25,760 --> 01:05:28,000
now uh the central analytics that i just

1758
01:05:28,000 --> 01:05:30,880
explained allow us to infer some

1759
01:05:30,880 --> 01:05:33,119
uh some bits of m two

1760
01:05:33,119 --> 01:05:35,039
basis sectional attacks we also know c

1761
01:05:35,039 --> 01:05:36,720
one and c i minus one so we can learn

1762
01:05:36,720 --> 01:05:38,799
the bits of i

1763
01:05:38,799 --> 01:05:41,760
again in the similar way uh to the paper

1764
01:05:41,760 --> 01:05:44,640
from 2009

1765
01:05:44,640 --> 01:05:46,240
so unfortunately this attack fails

1766
01:05:46,240 --> 01:05:49,280
because we don't actually want

1767
01:05:49,280 --> 01:05:51,680
uh and one that one contains several

1768
01:05:51,680 --> 01:05:54,079
salt and session id it's not clear

1769
01:05:54,079 --> 01:05:55,680
whether these two values were intended

1770
01:05:55,680 --> 01:05:57,839
to be secret in empty proto but in

1771
01:05:57,839 --> 01:06:00,559
effect they are secrets

1772
01:06:00,559 --> 01:06:02,319
uh so

1773
01:06:02,319 --> 01:06:03,599
so still

1774
01:06:03,599 --> 01:06:05,359
this attack highlights that the empty

1775
01:06:05,359 --> 01:06:07,359
proto design is brittle

1776
01:06:07,359 --> 01:06:09,280
so as we discussed before empty proto

1777
01:06:09,280 --> 01:06:10,559
basically adopts the variant of the

1778
01:06:10,559 --> 01:06:12,640
ecliptin composition uh protecting the

1779
01:06:12,640 --> 01:06:14,559
integrity of plaintext

1780
01:06:14,559 --> 01:06:17,520
rather than the cyber text necessitates

1781
01:06:17,520 --> 01:06:18,960
operating with the decryption key and

1782
01:06:18,960 --> 01:06:21,039
untrusted data this opens up the

1783
01:06:21,039 --> 01:06:23,839
possibility of timing side channels

1784
01:06:23,839 --> 01:06:25,760
so we found three such side channels in

1785
01:06:25,760 --> 01:06:27,520
the pressure clients but empty proto

1786
01:06:27,520 --> 01:06:28,960
also encourages

1787
01:06:28,960 --> 01:06:31,039
the use of third party clients so there

1788
01:06:31,039 --> 01:06:32,640
is a possibility that more developers

1789
01:06:32,640 --> 01:06:34,240
got it wrong

1790
01:06:34,240 --> 01:06:36,079
it points at some ambiguity on whether

1791
01:06:36,079 --> 01:06:38,640
working uh

1792
01:06:38,640 --> 01:06:40,880
on new open source implementations of

1793
01:06:40,880 --> 01:06:43,680
this protocol introduces more security

1794
01:06:43,680 --> 01:06:46,079
to the ecosystem or other risks adding

1795
01:06:46,079 --> 01:06:47,920
new attack vectors

1796
01:06:47,920 --> 01:06:50,000
so all of these sort of devices could be

1797
01:06:50,000 --> 01:06:51,839
entirely intercept

1798
01:06:51,839 --> 01:06:53,440
by protecting the integrity of the

1799
01:06:53,440 --> 01:06:55,119
cybertex

1800
01:06:55,119 --> 01:06:57,440
the plaintext

1801
01:06:57,440 --> 01:06:58,960
so uh

1802
01:06:58,960 --> 01:07:00,720
quickly uh

1803
01:07:00,720 --> 01:07:02,960
uh so since we

1804
01:07:02,960 --> 01:07:03,920
so

1805
01:07:03,920 --> 01:07:05,760
so studying the telegrams exchange for

1806
01:07:05,760 --> 01:07:08,000
society scope will probably work but uh

1807
01:07:08,000 --> 01:07:10,400
since we knew that the server sold 1090

1808
01:07:10,400 --> 01:07:11,680
values for the attack on the previous

1809
01:07:11,680 --> 01:07:13,760
slide we went ahead and broke the key

1810
01:07:13,760 --> 01:07:16,240
exchange in order to play these values

1811
01:07:16,240 --> 01:07:18,240
so key exchange used uh textbook rsa

1812
01:07:18,240 --> 01:07:22,079
encryption it uh encrypted data uh that

1813
01:07:22,079 --> 01:07:24,319
was significant a good connection of the

1814
01:07:24,319 --> 01:07:26,720
actual thing to put it with a hash of

1815
01:07:26,720 --> 01:07:28,559
this date and reach some pudding

1816
01:07:28,559 --> 01:07:31,359
and again this goes to release similar

1817
01:07:31,359 --> 01:07:33,599
times uh time exceptional attackers in

1818
01:07:33,599 --> 01:07:35,280
the previous slide

1819
01:07:35,280 --> 01:07:37,520
and so we managed to recover the data by

1820
01:07:37,520 --> 01:07:39,280
solving noisy linear equations via

1821
01:07:39,280 --> 01:07:41,119
lattice reduction

1822
01:07:41,119 --> 01:07:42,480
we could use this data to recover

1823
01:07:42,480 --> 01:07:44,960
several stalls in session id uh fields

1824
01:07:44,960 --> 01:07:46,319
we could

1825
01:07:46,319 --> 01:07:48,480
theoretically use it for demand in the

1826
01:07:48,480 --> 01:07:51,119
middle attack against the you get the

1827
01:07:51,119 --> 01:07:53,520
change exportedly that's not feasible

1828
01:07:53,520 --> 01:07:55,039
because

1829
01:07:55,039 --> 01:07:57,599
the time excitation null is really small

1830
01:07:57,599 --> 01:07:59,520
recovering session id requires to

1831
01:07:59,520 --> 01:08:01,599
disperse for computations and key

1832
01:08:01,599 --> 01:08:03,440
exchange for timeout before

1833
01:08:03,440 --> 01:08:05,359
the middle can be completed

1834
01:08:05,359 --> 01:08:07,960
the problem here is that uh

1835
01:08:07,960 --> 01:08:11,200
telegrams uh server code is not open

1836
01:08:11,200 --> 01:08:14,000
source and they do not want to open

1837
01:08:14,000 --> 01:08:15,359
source

1838
01:08:15,359 --> 01:08:17,759
uh so we could not verify any of this

1839
01:08:17,759 --> 01:08:20,399
any of this ourselves we had to rely on

1840
01:08:20,399 --> 01:08:22,799
uh what telegram told it would or not

1841
01:08:22,799 --> 01:08:25,040
would not work as an attack

1842
01:08:25,040 --> 01:08:27,839
okay so finally uh let me conclude by

1843
01:08:27,839 --> 01:08:29,198
saying that

1844
01:08:29,198 --> 01:08:31,198
um

1845
01:08:31,198 --> 01:08:33,279
large parts of telegram remain uh

1846
01:08:33,279 --> 01:08:34,880
unsteadied

1847
01:08:34,880 --> 01:08:36,319
like secret shots key exchange

1848
01:08:36,319 --> 01:08:38,238
multi-user security forward security and

1849
01:08:38,238 --> 01:08:40,799
so on and so there is a lot of resting

1850
01:08:40,799 --> 01:08:43,359
topics for future work

1851
01:08:43,359 --> 01:08:46,238
i will conclude with that thank you and

1852
01:08:46,238 --> 01:08:49,939
you can find information at the link

1853
01:08:49,939 --> 01:08:53,120
[Applause]

1854
01:08:53,120 --> 01:08:55,839
okay so um

1855
01:08:55,839 --> 01:08:58,158
i think we are way over time sorry so

1856
01:08:58,158 --> 01:09:00,000
this this time we will not be taking

1857
01:09:00,000 --> 01:09:01,120
questions

1858
01:09:01,120 --> 01:09:03,759
uh and i propose we move directly to the

1859
01:09:03,759 --> 01:09:07,839
next speaker okay with you richard

1860
01:09:08,960 --> 01:09:10,719
yes thank you

1861
01:09:10,719 --> 01:09:12,719
and finally our last speaker will be

1862
01:09:12,719 --> 01:09:15,600
repeatedly who i believe is in person

1863
01:09:15,600 --> 01:09:18,000
don't see him at the podium though oh

1864
01:09:18,000 --> 01:09:18,839
there we

1865
01:09:18,839 --> 01:09:21,600
are great

1866
01:09:21,600 --> 01:09:22,960
uh so everyone's going to talk to us

1867
01:09:22,960 --> 01:09:25,198
about making signal postpones and secure

1868
01:09:25,198 --> 01:09:27,520
savior please take it away

1869
01:09:27,520 --> 01:09:30,240
hi everybody

1870
01:09:30,240 --> 01:09:35,839
[Applause]

1871
01:09:35,839 --> 01:09:37,679
hi my name is

1872
01:09:37,679 --> 01:09:39,279
and i'll talk about how to make signal

1873
01:09:39,279 --> 01:09:42,238
post quantum secure and we'll do this by

1874
01:09:42,238 --> 01:09:44,000
using a post quantum version of another

1875
01:09:44,000 --> 01:09:46,960
chronos in albuquerque exchange protocol

1876
01:09:46,960 --> 01:09:49,120
based on designated verifier signatures

1877
01:09:49,120 --> 01:09:51,520
and camps this is joint work with

1878
01:09:51,520 --> 01:09:53,279
jacqueline with jacqueline brendell

1879
01:09:53,279 --> 01:09:54,960
felix gunter kiss and jansson and

1880
01:09:54,960 --> 01:09:56,719
douglas stabila

1881
01:09:56,719 --> 01:09:58,640
so we're looking at the setting of

1882
01:09:58,640 --> 01:10:00,880
instant messaging where alice wants to

1883
01:10:00,880 --> 01:10:03,120
talk to bob you've probably seen this

1884
01:10:03,120 --> 01:10:04,080
before

1885
01:10:04,080 --> 01:10:07,280
so but what do we do if bob is offline

1886
01:10:07,280 --> 01:10:08,800
at the point in time when alice wants to

1887
01:10:08,800 --> 01:10:11,440
initiate the conversation for this case

1888
01:10:11,440 --> 01:10:14,159
bob needs to pre-upload his key material

1889
01:10:14,159 --> 01:10:16,480
to a key server so alice can fetch it

1890
01:10:16,480 --> 01:10:17,840
whenever she wants to initiate the

1891
01:10:17,840 --> 01:10:19,360
conversation

1892
01:10:19,360 --> 01:10:23,280
and this property we call asynchronicity

1893
01:10:23,280 --> 01:10:25,280
another property that we want is mutual

1894
01:10:25,280 --> 01:10:27,840
authentication meaning that alice should

1895
01:10:27,840 --> 01:10:30,000
be sure that she's talking to bob and

1896
01:10:30,000 --> 01:10:31,760
vice versa

1897
01:10:31,760 --> 01:10:33,199
and the third property that we're

1898
01:10:33,199 --> 01:10:35,440
looking for is offline deniability or

1899
01:10:35,440 --> 01:10:36,960
especially signal is looking for this

1900
01:10:36,960 --> 01:10:39,520
property intuitively this means that if

1901
01:10:39,520 --> 01:10:42,400
you have a protocol sorry a transcript

1902
01:10:42,400 --> 01:10:44,239
of a protocol execution then you can

1903
01:10:44,239 --> 01:10:46,320
deny that you were involved in producing

1904
01:10:46,320 --> 01:10:48,239
this transcript but i get into more

1905
01:10:48,239 --> 01:10:50,719
formal details on this later on

1906
01:10:50,719 --> 01:10:52,080
and with this

1907
01:10:52,080 --> 01:10:54,480
message flow this is actually split into

1908
01:10:54,480 --> 01:10:56,800
two protocols so the first one is the

1909
01:10:56,800 --> 01:10:58,320
initial handshake protocol extender

1910
01:10:58,320 --> 01:11:01,360
triple diffie-hellman or x3dh for short

1911
01:11:01,360 --> 01:11:02,880
and afterwards come the double wretched

1912
01:11:02,880 --> 01:11:04,800
protocol which you use to keep getting

1913
01:11:04,800 --> 01:11:09,080
new keys to encrypt your messages

1914
01:11:12,080 --> 01:11:14,080
and let's get into the details of the

1915
01:11:14,080 --> 01:11:17,280
initial handshake protocol x3dh

1916
01:11:17,280 --> 01:11:19,199
so in the beginning bob sends over his

1917
01:11:19,199 --> 01:11:21,360
pre-key bundle the key material from the

1918
01:11:21,360 --> 01:11:23,520
previous slide to alice

1919
01:11:23,520 --> 01:11:26,159
and this freaky material consists of

1920
01:11:26,159 --> 01:11:28,960
bob's public key so bob has three keys a

1921
01:11:28,960 --> 01:11:30,800
long term key medium

1922
01:11:30,800 --> 01:11:33,120
medium term key and an ephemera key

1923
01:11:33,120 --> 01:11:34,880
while alice is only using her long term

1924
01:11:34,880 --> 01:11:36,880
key and ephemera key

1925
01:11:36,880 --> 01:11:38,480
and then they doing lots of

1926
01:11:38,480 --> 01:11:40,320
diffie-hellman

1927
01:11:40,320 --> 01:11:41,679
so this is how they're pairing their

1928
01:11:41,679 --> 01:11:44,400
difi haman shares alice is using her own

1929
01:11:44,400 --> 01:11:47,120
long-term key paired with bob's medium

1930
01:11:47,120 --> 01:11:48,159
term key

1931
01:11:48,159 --> 01:11:50,239
and then alice is pairing her ephemera

1932
01:11:50,239 --> 01:11:52,400
key with all of bob's keys

1933
01:11:52,400 --> 01:11:54,239
and then alice will send over both of

1934
01:11:54,239 --> 01:11:56,560
her divi helmand shares to bob so bob

1935
01:11:56,560 --> 01:11:58,080
can recompute the same tiffi hammond

1936
01:11:58,080 --> 01:11:59,199
secrets

1937
01:11:59,199 --> 01:12:01,120
and now they have a shared secret the

1938
01:12:01,120 --> 01:12:02,560
problem with this approach is it's

1939
01:12:02,560 --> 01:12:04,480
relying on defend and as we all know

1940
01:12:04,480 --> 01:12:06,880
this is not post phantom secure and that

1941
01:12:06,880 --> 01:12:09,040
is the starting point of this work how

1942
01:12:09,040 --> 01:12:11,840
do we replace this because quantum

1943
01:12:11,840 --> 01:12:14,000
computers are a threat so we don't know

1944
01:12:14,000 --> 01:12:16,080
when they are coming but if they come

1945
01:12:16,080 --> 01:12:19,120
and we have a huge problem

1946
01:12:19,280 --> 01:12:20,880
right as we've seen the initial

1947
01:12:20,880 --> 01:12:23,199
handshake is vulnerable to to quantum

1948
01:12:23,199 --> 01:12:24,560
attackers

1949
01:12:24,560 --> 01:12:25,920
and then the other part the double

1950
01:12:25,920 --> 01:12:28,239
ratchet protocol this can be replaced

1951
01:12:28,239 --> 01:12:30,560
from key encapsulations mechanisms i was

1952
01:12:30,560 --> 01:12:33,920
shown by alvin at r in 2019 so the focus

1953
01:12:33,920 --> 01:12:36,080
of this talk will be how to replace the

1954
01:12:36,080 --> 01:12:39,280
initial handshake protocol

1955
01:12:39,679 --> 01:12:41,520
another candidate for this are key

1956
01:12:41,520 --> 01:12:43,440
encapsulation mechanisms because they

1957
01:12:43,440 --> 01:12:44,640
are a primitive that is being

1958
01:12:44,640 --> 01:12:47,040
standardized by nist currently so post

1959
01:12:47,040 --> 01:12:49,360
quantum secure versions so this is what

1960
01:12:49,360 --> 01:12:51,199
we are trying to use and let's see if

1961
01:12:51,199 --> 01:12:53,360
this works out first let's recap what

1962
01:12:53,360 --> 01:12:55,679
key encapsulation mechanisms are

1963
01:12:55,679 --> 01:12:57,760
so bob has a key pair consisting of a

1964
01:12:57,760 --> 01:13:00,000
public and a private key and he sends

1965
01:13:00,000 --> 01:13:02,239
over his public key to alice

1966
01:13:02,239 --> 01:13:04,960
alice can then encapsulate against bob's

1967
01:13:04,960 --> 01:13:07,679
public key resulting in a cipher text

1968
01:13:07,679 --> 01:13:10,239
and a key then ellis sends over the

1969
01:13:10,239 --> 01:13:12,640
cipher text to bob and bob can

1970
01:13:12,640 --> 01:13:14,719
decapulate the cipher text with the use

1971
01:13:14,719 --> 01:13:17,920
of his secret key now both of them have

1972
01:13:17,920 --> 01:13:20,080
the key which they can use to come well

1973
01:13:20,080 --> 01:13:23,280
which is their shared secret

1974
01:13:23,600 --> 01:13:25,760
this is what uh key encapsulation

1975
01:13:25,760 --> 01:13:27,600
mechanisms are right

1976
01:13:27,600 --> 01:13:29,199
so how can we build a post control

1977
01:13:29,199 --> 01:13:31,120
version of signal using just

1978
01:13:31,120 --> 01:13:33,360
encapsulation mechanisms a direct

1979
01:13:33,360 --> 01:13:36,880
construction could look as follows

1980
01:13:36,880 --> 01:13:39,360
bob has three chem key pairs a long-term

1981
01:13:39,360 --> 01:13:41,760
medium term and a family again and then

1982
01:13:41,760 --> 01:13:44,159
alice is encapsulating against each of

1983
01:13:44,159 --> 01:13:45,679
bob's keys

1984
01:13:45,679 --> 01:13:47,679
then alice can send over all of these

1985
01:13:47,679 --> 01:13:50,080
three cyphercam ciphertexts to bob who

1986
01:13:50,080 --> 01:13:52,239
can then decapsulate them the problem

1987
01:13:52,239 --> 01:13:54,239
with this approach is that there is no

1988
01:13:54,239 --> 01:13:56,320
ls to bob authentication from bob's

1989
01:13:56,320 --> 01:13:58,800
perspective anybody could have produced

1990
01:13:58,800 --> 01:14:01,120
these encapsulations

1991
01:14:01,120 --> 01:14:02,880
so what can we do to get some alice to

1992
01:14:02,880 --> 01:14:04,480
group authentication

1993
01:14:04,480 --> 01:14:06,800
maybe we can add a signature

1994
01:14:06,800 --> 01:14:08,560
the problem with the plain signature

1995
01:14:08,560 --> 01:14:11,280
though is that it breaks deniability

1996
01:14:11,280 --> 01:14:13,440
because only alice can create a

1997
01:14:13,440 --> 01:14:15,520
signature that verifies under her public

1998
01:14:15,520 --> 01:14:16,640
key

1999
01:14:16,640 --> 01:14:18,640
and as we've heard earlier deniability

2000
01:14:18,640 --> 01:14:21,679
is an important feature to signal

2001
01:14:21,679 --> 01:14:23,679
so this approach doesn't work

2002
01:14:23,679 --> 01:14:26,400
however let's keep this in mind

2003
01:14:26,400 --> 01:14:28,400
the idea of using key encapsulations to

2004
01:14:28,400 --> 01:14:29,760
build a post quantum version of the

2005
01:14:29,760 --> 01:14:31,520
initial handshake protocol has been

2006
01:14:31,520 --> 01:14:33,920
around for a bit though so there was um

2007
01:14:33,920 --> 01:14:35,840
this split cam paper by brendlat allen

2008
01:14:35,840 --> 01:14:39,280
2020 who proposed to use a new primitive

2009
01:14:39,280 --> 01:14:41,040
they called splitcamps

2010
01:14:41,040 --> 01:14:43,280
and it turned out though that this is

2011
01:14:43,280 --> 01:14:44,800
not instantiable

2012
01:14:44,800 --> 01:14:45,760
with

2013
01:14:45,760 --> 01:14:48,800
sufficient security parameters

2014
01:14:48,800 --> 01:14:50,400
but the design idea from the previous

2015
01:14:50,400 --> 01:14:52,159
slide is stuck around so using key

2016
01:14:52,159 --> 01:14:54,000
encapsulation mechanisms and not

2017
01:14:54,000 --> 01:14:56,239
signatures but some form of deniable

2018
01:14:56,239 --> 01:14:57,600
authentication

2019
01:14:57,600 --> 01:14:59,920
and we propose to use designated

2020
01:14:59,920 --> 01:15:01,679
verifier signatures for deniable

2021
01:15:01,679 --> 01:15:03,520
authentication

2022
01:15:03,520 --> 01:15:05,920
independently hashimoto came up with the

2023
01:15:05,920 --> 01:15:08,239
same idea and they've been using ring

2024
01:15:08,239 --> 01:15:11,839
signatures for deniable authentication

2025
01:15:11,920 --> 01:15:14,800
so next let's review how what designated

2026
01:15:14,800 --> 01:15:16,960
verifier signatures are

2027
01:15:16,960 --> 01:15:19,440
alice wants to deniably authenticate a

2028
01:15:19,440 --> 01:15:21,920
message m to bob

2029
01:15:21,920 --> 01:15:24,080
so how does she do this she's using the

2030
01:15:24,080 --> 01:15:26,000
signing algorithm which takes her own

2031
01:15:26,000 --> 01:15:28,960
secret key and bob's public key as in

2032
01:15:28,960 --> 01:15:30,960
alice is designating this signature to

2033
01:15:30,960 --> 01:15:31,840
bob

2034
01:15:31,840 --> 01:15:35,600
and this produces an ls to bob signature

2035
01:15:35,600 --> 01:15:37,040
and the

2036
01:15:37,040 --> 01:15:38,640
next algorithm which is the difference

2037
01:15:38,640 --> 01:15:40,719
to plane signatures is the simulate

2038
01:15:40,719 --> 01:15:43,600
algorithm which allows bob to simulate a

2039
01:15:43,600 --> 01:15:46,640
signature so this uses alice's public

2040
01:15:46,640 --> 01:15:49,679
key and bob's secret key and this also

2041
01:15:49,679 --> 01:15:52,000
produces an alice to bob signature and

2042
01:15:52,000 --> 01:15:54,800
the cool property of dvs schemes is the

2043
01:15:54,800 --> 01:15:56,719
source siding property which tells you

2044
01:15:56,719 --> 01:15:59,600
that it is indistinguishable if this is

2045
01:15:59,600 --> 01:16:01,360
a signature analyst to bob signature

2046
01:16:01,360 --> 01:16:03,360
that was produced by the sine algorithm

2047
01:16:03,360 --> 01:16:06,400
or by the simulate algorithm

2048
01:16:06,400 --> 01:16:08,080
spoiler this is where we're getting our

2049
01:16:08,080 --> 01:16:11,040
deniability from

2050
01:16:11,440 --> 01:16:13,679
right so what's the core idea of our

2051
01:16:13,679 --> 01:16:15,520
protocol and of the protocol from

2052
01:16:15,520 --> 01:16:16,870
hashimoto at al

2053
01:16:16,870 --> 01:16:18,640
[Music]

2054
01:16:18,640 --> 01:16:20,560
just the core idea so i'm skipping the

2055
01:16:20,560 --> 01:16:23,199
medium term keys for a bit

2056
01:16:23,199 --> 01:16:25,280
we have long term keys for both parties

2057
01:16:25,280 --> 01:16:27,840
which consists of a dvs key and for the

2058
01:16:27,840 --> 01:16:29,760
responder side we're also using a chem

2059
01:16:29,760 --> 01:16:30,560
key

2060
01:16:30,560 --> 01:16:32,239
so the responder is using a camke

2061
01:16:32,239 --> 01:16:33,679
actually for both long term and

2062
01:16:33,679 --> 01:16:35,440
ephemeral key

2063
01:16:35,440 --> 01:16:37,760
and then what does the initiator do

2064
01:16:37,760 --> 01:16:40,480
alice encapsulates against both of bob's

2065
01:16:40,480 --> 01:16:42,800
chem keys resulting in two

2066
01:16:42,800 --> 01:16:45,040
cam cipher texts

2067
01:16:45,040 --> 01:16:46,719
and next we still need this deniable

2068
01:16:46,719 --> 01:16:48,320
authentication which was a problem

2069
01:16:48,320 --> 01:16:51,040
earlier and we use the dvs signature for

2070
01:16:51,040 --> 01:16:52,480
this so

2071
01:16:52,480 --> 01:16:54,320
we have a designated verifier signature

2072
01:16:54,320 --> 01:16:56,880
designated from alice to bob and the

2073
01:16:56,880 --> 01:16:58,480
message we're signing are the two cam

2074
01:16:58,480 --> 01:17:00,480
cipher texts

2075
01:17:00,480 --> 01:17:04,640
this is the core idea of our protocol

2076
01:17:04,640 --> 01:17:06,000
and let me briefly mention that

2077
01:17:06,000 --> 01:17:07,679
hashimoto

2078
01:17:07,679 --> 01:17:09,280
follow the same approach however they're

2079
01:17:09,280 --> 01:17:10,880
using ring signatures here instead of

2080
01:17:10,880 --> 01:17:14,000
dbs but it turns out that dvs signatures

2081
01:17:14,000 --> 01:17:16,400
and ring signatures are equivalent for

2082
01:17:16,400 --> 01:17:18,400
rings of two users under some

2083
01:17:18,400 --> 01:17:20,960
constraints

2084
01:17:21,280 --> 01:17:22,239
right

2085
01:17:22,239 --> 01:17:23,920
now that we've looked at the protocol

2086
01:17:23,920 --> 01:17:26,400
what is this deniability property in

2087
01:17:26,400 --> 01:17:28,480
more detail that i've been talking about

2088
01:17:28,480 --> 01:17:30,880
so this is an excerpt from the signal

2089
01:17:30,880 --> 01:17:33,360
specification on the initial handshake

2090
01:17:33,360 --> 01:17:35,360
protocol and what they want is that

2091
01:17:35,360 --> 01:17:39,040
there is no cryptographic proof that

2092
01:17:39,040 --> 01:17:41,040
for it

2093
01:17:41,040 --> 01:17:42,400
okay the laser pointer doesn't seem to

2094
01:17:42,400 --> 01:17:44,480
be working so there's no cryptographic

2095
01:17:44,480 --> 01:17:46,719
proof that if you have a third party

2096
01:17:46,719 --> 01:17:49,360
who has access to who has compromised

2097
01:17:49,360 --> 01:17:52,480
the private keys of all parties and this

2098
01:17:52,480 --> 01:17:54,560
third party furthermore has access to a

2099
01:17:54,560 --> 01:17:56,960
conversation transcript then it has to

2100
01:17:56,960 --> 01:17:59,120
be the case that this transcript was

2101
01:17:59,120 --> 01:18:01,600
produced by some party with legitimate

2102
01:18:01,600 --> 01:18:03,360
private keys

2103
01:18:03,360 --> 01:18:05,679
okay this is a block of text how do we

2104
01:18:05,679 --> 01:18:07,600
parse this into a nice cryptographic

2105
01:18:07,600 --> 01:18:10,159
definition so first case

2106
01:18:10,159 --> 01:18:12,880
we have alice who has used the run

2107
01:18:12,880 --> 01:18:15,520
algorithm to produce the message using

2108
01:18:15,520 --> 01:18:17,280
her own secret key resulting in a

2109
01:18:17,280 --> 01:18:19,920
transcript and a session key

2110
01:18:19,920 --> 01:18:22,800
second case bob has faked a transcript

2111
01:18:22,800 --> 01:18:25,120
so the fake algorithm is something that

2112
01:18:25,120 --> 01:18:28,159
we've also included in our syntax

2113
01:18:28,159 --> 01:18:30,640
here bob uses his own secret key to also

2114
01:18:30,640 --> 01:18:32,640
come up with a transcript and a session

2115
01:18:32,640 --> 01:18:33,600
key

2116
01:18:33,600 --> 01:18:35,760
and next we have this third party the

2117
01:18:35,760 --> 01:18:38,640
judge and the judge cannot tell

2118
01:18:38,640 --> 01:18:40,640
if the transcript and session key was

2119
01:18:40,640 --> 01:18:42,719
produced by the run algorithm or by the

2120
01:18:42,719 --> 01:18:44,719
fake algorithm and that should be the

2121
01:18:44,719 --> 01:18:47,120
case even if the judge has access to all

2122
01:18:47,120 --> 01:18:50,760
of the secret keys

2123
01:18:54,640 --> 01:18:55,360
and

2124
01:18:55,360 --> 01:18:57,120
this is the new deniability definition

2125
01:18:57,120 --> 01:18:59,840
that we propose

2126
01:19:00,080 --> 01:19:02,080
so there's the prior definition

2127
01:19:02,080 --> 01:19:04,000
deniability definition by the remainder

2128
01:19:04,000 --> 01:19:07,600
at all but compared to their definition

2129
01:19:07,600 --> 01:19:10,320
our definition is weaker in the sense

2130
01:19:10,320 --> 01:19:12,880
that it gives the fake algorithm access

2131
01:19:12,880 --> 01:19:15,440
to the secret key of the responder

2132
01:19:15,440 --> 01:19:17,040
so they're

2133
01:19:17,040 --> 01:19:18,719
fake they basically have public

2134
01:19:18,719 --> 01:19:21,520
simulatability on the other hand our

2135
01:19:21,520 --> 01:19:24,000
definition is stronger in the sense that

2136
01:19:24,000 --> 01:19:24,800
our

2137
01:19:24,800 --> 01:19:26,960
judge gets all of the secret keys

2138
01:19:26,960 --> 01:19:28,080
and we believe this to be a very

2139
01:19:28,080 --> 01:19:30,400
important point to achieve deniability

2140
01:19:30,400 --> 01:19:32,159
against nation state adversaries or

2141
01:19:32,159 --> 01:19:34,239
other nation state judges

2142
01:19:34,239 --> 01:19:35,840
because they may somehow find out your

2143
01:19:35,840 --> 01:19:38,159
secret key by compromising your devices

2144
01:19:38,159 --> 01:19:40,159
by issuing a super ena for you to give

2145
01:19:40,159 --> 01:19:44,159
up your secret keys or whatever else

2146
01:19:44,159 --> 01:19:46,320
and lastly

2147
01:19:46,320 --> 01:19:48,560
our definition has the advantage that

2148
01:19:48,560 --> 01:19:50,560
you can build a proof with respect to

2149
01:19:50,560 --> 01:19:52,400
our definition without needing any

2150
01:19:52,400 --> 01:19:55,920
strong knowledge type assumptions

2151
01:19:56,400 --> 01:19:57,440
right

2152
01:19:57,440 --> 01:19:59,120
and this is not all there is to our

2153
01:19:59,120 --> 01:20:01,760
construction the full construction is

2154
01:20:01,760 --> 01:20:03,360
what we call signal in a post quantum

2155
01:20:03,360 --> 01:20:06,159
regime or spqr for short

2156
01:20:06,159 --> 01:20:08,080
and it includes the full scope of what

2157
01:20:08,080 --> 01:20:10,400
needs to be covered by signal what needs

2158
01:20:10,400 --> 01:20:12,239
to be covered by an initial handshake

2159
01:20:12,239 --> 01:20:15,199
protocol to be usable in the real world

2160
01:20:15,199 --> 01:20:17,600
and that is we also include medium-term

2161
01:20:17,600 --> 01:20:20,000
keys to protect against the case that

2162
01:20:20,000 --> 01:20:22,719
all of the ephemera keys are used up

2163
01:20:22,719 --> 01:20:24,000
this is also

2164
01:20:24,000 --> 01:20:26,239
the case for the currently used x3dh

2165
01:20:26,239 --> 01:20:29,360
protocol also we achieve security

2166
01:20:29,360 --> 01:20:30,239
against

2167
01:20:30,239 --> 01:20:32,560
randomness exposure by using a twisted

2168
01:20:32,560 --> 01:20:34,639
prf

2169
01:20:34,639 --> 01:20:36,400
and of course we show a security of our

2170
01:20:36,400 --> 01:20:38,880
protocol with respect to a security

2171
01:20:38,880 --> 01:20:40,480
model similar to the one from the

2172
01:20:40,480 --> 01:20:42,719
original signal analysis by cone gordnet

2173
01:20:42,719 --> 01:20:45,440
all from 2017 and of course we show a

2174
01:20:45,440 --> 01:20:48,080
deniability of our new protocol

2175
01:20:48,080 --> 01:20:50,080
with regard to the newly proposed

2176
01:20:50,080 --> 01:20:51,760
definition that i just talked about

2177
01:20:51,760 --> 01:20:54,159
earlier

2178
01:20:54,320 --> 01:20:55,199
okay

2179
01:20:55,199 --> 01:20:56,800
and there's as you can see on the right

2180
01:20:56,800 --> 01:20:58,800
hand side there's lots of details which

2181
01:20:58,800 --> 01:21:01,280
you can all find in the paper

2182
01:21:01,280 --> 01:21:02,400
right

2183
01:21:02,400 --> 01:21:03,920
then there's more concurrent work

2184
01:21:03,920 --> 01:21:06,239
because this is such a pressure crashing

2185
01:21:06,239 --> 01:21:07,120
issue

2186
01:21:07,120 --> 01:21:08,880
more people have looked at it lobster

2187
01:21:08,880 --> 01:21:11,760
and galbraith have proposed to lift the

2188
01:21:11,760 --> 01:21:13,920
x3dh protocol to the setting of super

2189
01:21:13,920 --> 01:21:16,159
singular isogenes and they've kept the

2190
01:21:16,159 --> 01:21:18,480
same message flow as for the original

2191
01:21:18,480 --> 01:21:21,760
x3h protocol but now we're over super

2192
01:21:21,760 --> 01:21:23,280
singular isogenes and that's where we

2193
01:21:23,280 --> 01:21:26,719
get the post quantum security

2194
01:21:26,719 --> 01:21:29,520
so all in all there's three um different

2195
01:21:29,520 --> 01:21:32,320
proposals for how we can get an initial

2196
01:21:32,320 --> 01:21:34,080
handshake protocol that is post quantum

2197
01:21:34,080 --> 01:21:36,800
secure sorry to be more precise s4 so

2198
01:21:36,800 --> 01:21:38,960
the baseline that we can measure against

2199
01:21:38,960 --> 01:21:41,600
would be the original or the x38

2200
01:21:41,600 --> 01:21:43,520
protocol which is currently in use but

2201
01:21:43,520 --> 01:21:46,000
it's not post quantum secure

2202
01:21:46,000 --> 01:21:47,600
and this was shown to be deniable with

2203
01:21:47,600 --> 01:21:49,520
respect to public simulator ability so

2204
01:21:49,520 --> 01:21:51,920
the definition from the remainder at al

2205
01:21:51,920 --> 01:21:53,760
and it filters the the full scope so

2206
01:21:53,760 --> 01:21:56,639
they have medium term keys and security

2207
01:21:56,639 --> 01:21:58,800
against randomness exposure

2208
01:21:58,800 --> 01:22:00,560
then there's two protocols suggested by

2209
01:22:00,560 --> 01:22:02,159
hashimoto's all

2210
01:22:02,159 --> 01:22:04,639
both of them are post quantum secure and

2211
01:22:04,639 --> 01:22:07,120
they are using cams and ring signatures

2212
01:22:07,120 --> 01:22:08,639
and their second protocol that they

2213
01:22:08,639 --> 01:22:11,360
suggest is using music on top and they

2214
01:22:11,360 --> 01:22:14,080
need the musics to get this deniability

2215
01:22:14,080 --> 01:22:16,960
with respect to public simulatability

2216
01:22:16,960 --> 01:22:19,199
however their protocols do not fulfill

2217
01:22:19,199 --> 01:22:20,560
the full scope they do not include

2218
01:22:20,560 --> 01:22:22,400
medium term keys or maximum exposure

2219
01:22:22,400 --> 01:22:25,199
security and next there's our protocol

2220
01:22:25,199 --> 01:22:27,120
spqr

2221
01:22:27,120 --> 01:22:29,040
which is based on cams and dvs and as

2222
01:22:29,040 --> 01:22:31,120
post quantum secure and shown to be

2223
01:22:31,120 --> 01:22:34,800
deniable with respect to strong judges

2224
01:22:34,800 --> 01:22:38,000
also our protocol prefers the full scope

2225
01:22:38,000 --> 01:22:40,080
and lastly there's the super singular

2226
01:22:40,080 --> 01:22:42,239
isogeny x3gh protocol from dobson

2227
01:22:42,239 --> 01:22:44,400
galbraith which is also also post

2228
01:22:44,400 --> 01:22:46,800
quantum secure and deniable with respect

2229
01:22:46,800 --> 01:22:49,440
to public simulatability

2230
01:22:49,440 --> 01:22:51,600
and for first the full scope let me also

2231
01:22:51,600 --> 01:22:54,000
point out that the

2232
01:22:54,000 --> 01:22:56,000
that the protocols by hashimoto as well

2233
01:22:56,000 --> 01:22:58,480
as ours are generic constructions so you

2234
01:22:58,480 --> 01:23:00,560
can plug in a cam and dvs or ring

2235
01:23:00,560 --> 01:23:02,480
signature based on whichever hardness

2236
01:23:02,480 --> 01:23:05,040
assumption you want while x3dh and super

2237
01:23:05,040 --> 01:23:08,239
singular isogeny at x3dh are fixed to

2238
01:23:08,239 --> 01:23:12,159
one problem which we assume to be hard

2239
01:23:12,159 --> 01:23:13,760
so to conclude

2240
01:23:13,760 --> 01:23:16,560
how do we get signal to be post quantum

2241
01:23:16,560 --> 01:23:18,880
we have several suggestions for how to

2242
01:23:18,880 --> 01:23:20,880
replace the initial handshake protocol

2243
01:23:20,880 --> 01:23:22,480
we can use the protocol from

2244
01:23:22,480 --> 01:23:26,159
hashimoto.al our spqr or the suggestion

2245
01:23:26,159 --> 01:23:28,320
from dobson galbraith

2246
01:23:28,320 --> 01:23:30,320
and for the double wretched protocol we

2247
01:23:30,320 --> 01:23:32,639
can use the for example the construction

2248
01:23:32,639 --> 01:23:34,239
from the encapsulation mechanisms by

2249
01:23:34,239 --> 01:23:36,080
avanadahl

2250
01:23:36,080 --> 01:23:38,000
so one question no actually two

2251
01:23:38,000 --> 01:23:39,600
questions for the audience for the

2252
01:23:39,600 --> 01:23:41,520
broader community so to say

2253
01:23:41,520 --> 01:23:44,239
which deniability notion do we want um

2254
01:23:44,239 --> 01:23:46,000
that the initial hashtag protocol

2255
01:23:46,000 --> 01:23:47,199
achieves

2256
01:23:47,199 --> 01:23:49,600
do we need deniability with respect to

2257
01:23:49,600 --> 01:23:51,199
strong judges do we want public

2258
01:23:51,199 --> 01:23:53,280
simulatability do we want a stronger

2259
01:23:53,280 --> 01:23:55,199
version of both of them what type do we

2260
01:23:55,199 --> 01:23:57,760
want and also how do we instantiate

2261
01:23:57,760 --> 01:23:59,600
these protocols

2262
01:23:59,600 --> 01:24:01,360
so which hardness problems do we want to

2263
01:24:01,360 --> 01:24:04,080
rely on or do we want to rely on always

2264
01:24:04,080 --> 01:24:06,239
on our misogynist

2265
01:24:06,239 --> 01:24:07,920
this these are my questions for you sir

2266
01:24:07,920 --> 01:24:09,520
to say thank you very much for your

2267
01:24:09,520 --> 01:24:11,040
attention and i'm happy to take

2268
01:24:11,040 --> 01:24:14,040
questions

2269
01:24:19,140 --> 01:24:22,299
[Applause]

2270
01:24:22,480 --> 01:24:24,320
thank you for that um i believe we have

2271
01:24:24,320 --> 01:24:26,080
someone in the audience for a question

2272
01:24:26,080 --> 01:24:28,320
please go ahead

2273
01:24:28,320 --> 01:24:29,600
thank you very much

2274
01:24:29,600 --> 01:24:31,360
did you have a look at the

2275
01:24:31,360 --> 01:24:33,679
signal group chats as well

2276
01:24:33,679 --> 01:24:35,920
no

2277
01:24:42,639 --> 01:24:45,679
all right easy enough question

2278
01:24:45,679 --> 01:24:48,560
thank you again for the presentation

2279
01:24:48,560 --> 01:24:51,779
[Applause]

2280
01:24:59,360 --> 01:25:01,120
and with that we are at the end of our

2281
01:25:01,120 --> 01:25:03,440
session and we are at the coffee break

2282
01:25:03,440 --> 01:25:07,599
for those of you there in person so

