1
00:00:00,160 --> 00:00:01,680
okay it looks like you restarted the

2
00:00:01,680 --> 00:00:03,439
stream are we are we ready

3
00:00:03,439 --> 00:00:06,960
ready to go great so um

4
00:00:06,960 --> 00:00:08,800
yeah well we're starting a session on

5
00:00:08,800 --> 00:00:11,679
formal analysis this session is about uh

6
00:00:11,679 --> 00:00:13,599
is about quality over quantity we got

7
00:00:13,599 --> 00:00:17,039
two excellent uh talks ready for you um

8
00:00:17,039 --> 00:00:19,439
as usual ask your questions here on on

9
00:00:19,439 --> 00:00:20,720
zoom chat or in zulip

10
00:00:20,720 --> 00:00:23,600
and if you ask in zulip maybe prefix

11
00:00:23,600 --> 00:00:24,960
your question with

12
00:00:24,960 --> 00:00:26,960
the target of your question but the

13
00:00:26,960 --> 00:00:29,840
first talk will be

14
00:00:29,840 --> 00:00:32,079
systematization of knowledge uh on

15
00:00:32,079 --> 00:00:33,520
computer aided cryptography

16
00:00:33,520 --> 00:00:35,760
and kevin yeah will be giving the talk

17
00:00:35,760 --> 00:00:37,520
go ahead kevin

18
00:00:37,520 --> 00:00:40,000
awesome thanks for the introduction so

19
00:00:40,000 --> 00:00:41,680
today i'll be telling you about how we

20
00:00:41,680 --> 00:00:43,520
can use computer-aided tools

21
00:00:43,520 --> 00:00:45,760
to develop cryptography and this talk is

22
00:00:45,760 --> 00:00:47,440
based on a systemization

23
00:00:47,440 --> 00:00:48,879
knowledge paper which was written with

24
00:00:48,879 --> 00:00:50,960
the many wonderful co-authors listed

25
00:00:50,960 --> 00:00:52,800
here

26
00:00:52,800 --> 00:00:54,239
so i think we're all familiar with how

27
00:00:54,239 --> 00:00:55,760
difficult it is to get cryptography

28
00:00:55,760 --> 00:00:56,480
right

29
00:00:56,480 --> 00:00:58,640
widely deployed protocols often have

30
00:00:58,640 --> 00:01:00,320
high profile design flaws

31
00:01:00,320 --> 00:01:02,000
heavily scrutinized libraries regularly

32
00:01:02,000 --> 00:01:03,520
have bugs and

33
00:01:03,520 --> 00:01:05,280
otherwise secure and correct code can

34
00:01:05,280 --> 00:01:08,159
still leak secrets through side channels

35
00:01:08,159 --> 00:01:10,000
so clearly the current way we do

36
00:01:10,000 --> 00:01:12,000
cryptography just isn't delivering

37
00:01:12,000 --> 00:01:13,439
the high level of assurance that we

38
00:01:13,439 --> 00:01:16,000
expect

39
00:01:16,479 --> 00:01:18,240
and this brings us to computer-aided

40
00:01:18,240 --> 00:01:20,479
cryptography which is an active area of

41
00:01:20,479 --> 00:01:21,920
research that aims to address these

42
00:01:21,920 --> 00:01:22,960
challenges

43
00:01:22,960 --> 00:01:24,720
but what exactly do we mean by computer

44
00:01:24,720 --> 00:01:26,240
aided you know we've long used

45
00:01:26,240 --> 00:01:28,799
computers to develop cryptography so by

46
00:01:28,799 --> 00:01:29,920
computer aided

47
00:01:29,920 --> 00:01:32,000
we're referring to formal machine

48
00:01:32,000 --> 00:01:33,600
checkable approaches

49
00:01:33,600 --> 00:01:35,680
to help in the design analysis and

50
00:01:35,680 --> 00:01:38,159
implementation of cryptography

51
00:01:38,159 --> 00:01:39,920
and one of the main goals of computer

52
00:01:39,920 --> 00:01:42,320
aided crypto is to improve security

53
00:01:42,320 --> 00:01:44,240
without sacrificing the things we care

54
00:01:44,240 --> 00:01:45,520
about such as

55
00:01:45,520 --> 00:01:49,360
interoperability and performance

56
00:01:50,399 --> 00:01:52,320
and so how exactly can computer aided

57
00:01:52,320 --> 00:01:53,439
crypto help

58
00:01:53,439 --> 00:01:55,600
well there are a variety of tools that

59
00:01:55,600 --> 00:01:57,119
address different parts of the problem

60
00:01:57,119 --> 00:01:57,920
space

61
00:01:57,920 --> 00:01:59,520
we've broken it down to the following

62
00:01:59,520 --> 00:02:02,399
three layers design level security

63
00:02:02,399 --> 00:02:04,000
functional correctness and

64
00:02:04,000 --> 00:02:07,360
implementation level security

65
00:02:07,600 --> 00:02:10,080
so for design level security today

66
00:02:10,080 --> 00:02:12,400
security analysis is primarily done on

67
00:02:12,400 --> 00:02:13,360
pen and paper

68
00:02:13,360 --> 00:02:15,120
which is highly error prone and makes

69
00:02:15,120 --> 00:02:17,120
double checking security analysis

70
00:02:17,120 --> 00:02:19,040
extremely tedious

71
00:02:19,040 --> 00:02:20,879
with computer aided tools we can

72
00:02:20,879 --> 00:02:22,560
formally specify designs

73
00:02:22,560 --> 00:02:24,879
and automatically check that they enjoy

74
00:02:24,879 --> 00:02:26,160
important invariants

75
00:02:26,160 --> 00:02:29,920
or otherwise discover new attacks

76
00:02:29,920 --> 00:02:32,640
so using tls as an example before

77
00:02:32,640 --> 00:02:34,080
version 1.3

78
00:02:34,080 --> 00:02:35,920
the protocols design phases didn't

79
00:02:35,920 --> 00:02:37,840
involve computer aided analysis

80
00:02:37,840 --> 00:02:39,519
and the process was highly reactive

81
00:02:39,519 --> 00:02:41,280
leading to an endless cycle

82
00:02:41,280 --> 00:02:44,400
of attacks and patches and given the

83
00:02:44,400 --> 00:02:45,920
complexity of the protocol

84
00:02:45,920 --> 00:02:47,760
early analyses considered only highly

85
00:02:47,760 --> 00:02:50,000
simplified cryptographic cores

86
00:02:50,000 --> 00:02:52,080
but once the academic community started

87
00:02:52,080 --> 00:02:53,360
considering more

88
00:02:53,360 --> 00:02:55,120
detailed aspects of the protocol many

89
00:02:55,120 --> 00:02:58,319
many new attacks were discovered

90
00:02:58,319 --> 00:03:00,239
and this dynamic really changed during

91
00:03:00,239 --> 00:03:02,239
the proactive design process

92
00:03:02,239 --> 00:03:05,440
of tls 1.3 the academic community

93
00:03:05,440 --> 00:03:06,879
provided analysis throughout

94
00:03:06,879 --> 00:03:09,200
developing multiple drafts and in

95
00:03:09,200 --> 00:03:11,040
studies using symbolic analysis tools

96
00:03:11,040 --> 00:03:11,760
such as

97
00:03:11,760 --> 00:03:14,400
provera and tamarind the process of

98
00:03:14,400 --> 00:03:16,239
verifying tls and actually even just

99
00:03:16,239 --> 00:03:17,760
formally specifying it

100
00:03:17,760 --> 00:03:19,360
revealed flaws led to protocol

101
00:03:19,360 --> 00:03:21,200
improvements and otherwise

102
00:03:21,200 --> 00:03:23,440
clarify the documentation of security

103
00:03:23,440 --> 00:03:26,000
guarantees

104
00:03:27,360 --> 00:03:29,920
for correctness today's solutions for

105
00:03:29,920 --> 00:03:31,519
avoiding implementation bugs include

106
00:03:31,519 --> 00:03:33,280
code testing and auditing

107
00:03:33,280 --> 00:03:34,879
but unfortunately code testing is

108
00:03:34,879 --> 00:03:36,560
incomplete and is pretty unlikely to

109
00:03:36,560 --> 00:03:38,400
catch the kinds of correctness issues we

110
00:03:38,400 --> 00:03:40,319
deal with today

111
00:03:40,319 --> 00:03:42,480
but with computer aided tools we can

112
00:03:42,480 --> 00:03:43,519
formally verify

113
00:03:43,519 --> 00:03:46,000
that code is free from memory errors and

114
00:03:46,000 --> 00:03:47,840
that it behaves according to some design

115
00:03:47,840 --> 00:03:48,720
specification

116
00:03:48,720 --> 00:03:52,000
on all possible inputs

117
00:03:53,120 --> 00:03:55,200
for example openssl has had a long

118
00:03:55,200 --> 00:03:56,640
history of bugs which

119
00:03:56,640 --> 00:03:58,159
probably isn't surprising given the

120
00:03:58,159 --> 00:04:00,720
demand for highly optimized code

121
00:04:00,720 --> 00:04:02,480
for performance developers are required

122
00:04:02,480 --> 00:04:04,959
to multiplex implementations by hand

123
00:04:04,959 --> 00:04:07,040
for each combination of algorithm

124
00:04:07,040 --> 00:04:09,280
parameter choices and hardware platform

125
00:04:09,280 --> 00:04:11,120
which increases the risk of introducing

126
00:04:11,120 --> 00:04:13,360
bugs

127
00:04:13,360 --> 00:04:14,640
fortunately things are starting to look

128
00:04:14,640 --> 00:04:16,560
different today for example

129
00:04:16,560 --> 00:04:18,399
recent work from the project evers team

130
00:04:18,399 --> 00:04:19,600
on hako m

131
00:04:19,600 --> 00:04:21,600
presents a new methodology in which

132
00:04:21,600 --> 00:04:22,880
developers can

133
00:04:22,880 --> 00:04:25,040
write generic code in a verification

134
00:04:25,040 --> 00:04:26,960
friendly language

135
00:04:26,960 --> 00:04:28,720
check that it enjoys properties such as

136
00:04:28,720 --> 00:04:30,400
memory safety correctness

137
00:04:30,400 --> 00:04:33,759
and constant time and then compile the

138
00:04:33,759 --> 00:04:35,280
code down to different platforms that

139
00:04:35,280 --> 00:04:37,280
support vector instructions

140
00:04:37,280 --> 00:04:39,360
and this significantly reduces the

141
00:04:39,360 --> 00:04:40,320
manual effort

142
00:04:40,320 --> 00:04:42,400
needed to add new implementations and

143
00:04:42,400 --> 00:04:43,600
also minimizes

144
00:04:43,600 --> 00:04:46,320
room for error

145
00:04:47,919 --> 00:04:49,440
and then finally for implementation

146
00:04:49,440 --> 00:04:51,680
level security today in order to protect

147
00:04:51,680 --> 00:04:53,759
against say timing side channels

148
00:04:53,759 --> 00:04:55,919
developers need to apply tricky constant

149
00:04:55,919 --> 00:04:57,280
time coding recipes

150
00:04:57,280 --> 00:04:58,800
and just hope that they haven't missed

151
00:04:58,800 --> 00:05:01,680
any vulnerable pieces of code

152
00:05:01,680 --> 00:05:04,080
and with computer aided tools developers

153
00:05:04,080 --> 00:05:05,199
can automatically check

154
00:05:05,199 --> 00:05:06,880
whether or not their code is constant

155
00:05:06,880 --> 00:05:09,199
time

156
00:05:09,680 --> 00:05:11,199
and it turns out that writing constant

157
00:05:11,199 --> 00:05:12,720
time code really is pretty

158
00:05:12,720 --> 00:05:15,840
unnatural and difficult to do a botched

159
00:05:15,840 --> 00:05:18,160
patch for a timely vulnerability in tls

160
00:05:18,160 --> 00:05:20,080
led to the lucky 13 timing vulnerability

161
00:05:20,080 --> 00:05:22,000
and open ssl

162
00:05:22,000 --> 00:05:23,840
and in turn the lucky 13 patch led to

163
00:05:23,840 --> 00:05:27,280
yet another timing vulnerability

164
00:05:27,280 --> 00:05:29,440
but fortunately today there are many

165
00:05:29,440 --> 00:05:30,800
tools that let developers

166
00:05:30,800 --> 00:05:32,880
annotate program inputs as either public

167
00:05:32,880 --> 00:05:34,960
or secret and then automatically check

168
00:05:34,960 --> 00:05:36,800
that the program has constant time and

169
00:05:36,800 --> 00:05:38,000
these have already been applied

170
00:05:38,000 --> 00:05:40,160
to many real world libraries including

171
00:05:40,160 --> 00:05:42,880
openssl

172
00:05:45,520 --> 00:05:46,720
at this point i think it's important to

173
00:05:46,720 --> 00:05:48,560
emphasize that computer aided crypto is

174
00:05:48,560 --> 00:05:49,199
not just

175
00:05:49,199 --> 00:05:51,360
academic crypto it really is real world

176
00:05:51,360 --> 00:05:53,600
crypto and i've already touched on tls

177
00:05:53,600 --> 00:05:54,720
1.3

178
00:05:54,720 --> 00:05:57,360
but aws's key management service also

179
00:05:57,360 --> 00:05:59,680
has machine checked proof of security

180
00:05:59,680 --> 00:06:01,280
and approvally secure and correct code

181
00:06:01,280 --> 00:06:03,039
is also being deployed at scale

182
00:06:03,039 --> 00:06:05,680
in firefox google's boring sound library

183
00:06:05,680 --> 00:06:09,520
and more recently in the linux kernel

184
00:06:11,520 --> 00:06:13,440
and even though these success stories

185
00:06:13,440 --> 00:06:15,840
are great in order to fully appreciate

186
00:06:15,840 --> 00:06:17,919
the benefits of computer-aided crypto

187
00:06:17,919 --> 00:06:19,680
it's also important to acknowledge that

188
00:06:19,680 --> 00:06:21,039
formal guarantees

189
00:06:21,039 --> 00:06:23,680
do come with limitations namely that to

190
00:06:23,680 --> 00:06:25,840
make formal analysis tractable

191
00:06:25,840 --> 00:06:27,520
formal models are almost always a

192
00:06:27,520 --> 00:06:29,919
simplification of the real world

193
00:06:29,919 --> 00:06:31,919
so for design level security this means

194
00:06:31,919 --> 00:06:33,520
that protocol models are often

195
00:06:33,520 --> 00:06:34,160
simplified

196
00:06:34,160 --> 00:06:36,639
into a cryptographic core that ignores

197
00:06:36,639 --> 00:06:37,919
many details about

198
00:06:37,919 --> 00:06:41,520
designs and attacker capabilities

199
00:06:41,520 --> 00:06:43,520
for correctness there may be gaps

200
00:06:43,520 --> 00:06:45,280
between what's being verified and the

201
00:06:45,280 --> 00:06:46,960
output machine code

202
00:06:46,960 --> 00:06:48,800
for example verification might be

203
00:06:48,800 --> 00:06:50,960
carried out on a verification friendly

204
00:06:50,960 --> 00:06:52,720
representation of the source code rather

205
00:06:52,720 --> 00:06:54,960
than on the source code itself

206
00:06:54,960 --> 00:06:56,960
or if verification is performed on c

207
00:06:56,960 --> 00:06:59,039
code we have to trust mainstream c

208
00:06:59,039 --> 00:06:59,919
compilers which

209
00:06:59,919 --> 00:07:02,400
frequently have bugs and even if the

210
00:07:02,400 --> 00:07:03,759
code that they produce is functionally

211
00:07:03,759 --> 00:07:04,400
correct

212
00:07:04,400 --> 00:07:05,919
they might introduce side channels that

213
00:07:05,919 --> 00:07:07,599
weren't present in the original source

214
00:07:07,599 --> 00:07:09,840
code

215
00:07:10,319 --> 00:07:12,479
and for implementation level security

216
00:07:12,479 --> 00:07:14,400
formal models just can't capture all the

217
00:07:14,400 --> 00:07:15,599
physically observable effects of

218
00:07:15,599 --> 00:07:16,319
hardware

219
00:07:16,319 --> 00:07:18,240
which leaves room for unaccounted side

220
00:07:18,240 --> 00:07:20,479
channels and even further side channel

221
00:07:20,479 --> 00:07:21,919
attacks such as spectre

222
00:07:21,919 --> 00:07:23,599
reveal gaps between what we think is

223
00:07:23,599 --> 00:07:24,960
being leaked and what's actually being

224
00:07:24,960 --> 00:07:27,680
leaked out in the real world

225
00:07:27,680 --> 00:07:29,360
on top of it all in order to carry

226
00:07:29,360 --> 00:07:30,800
formal guarantees all the way down the

227
00:07:30,800 --> 00:07:31,520
stack

228
00:07:31,520 --> 00:07:32,880
we have to make sure that we haven't

229
00:07:32,880 --> 00:07:34,800
left any gaps in our modeling between

230
00:07:34,800 --> 00:07:37,199
layers

231
00:07:38,720 --> 00:07:40,319
closing these gaps though does leave

232
00:07:40,319 --> 00:07:43,199
many exciting future research challenges

233
00:07:43,199 --> 00:07:44,560
this first one is more of a suggestion

234
00:07:44,560 --> 00:07:46,240
but an important lesson we learned

235
00:07:46,240 --> 00:07:48,800
from tls is that standardization

236
00:07:48,800 --> 00:07:49,440
processes

237
00:07:49,440 --> 00:07:52,160
can embrace design changes that simplify

238
00:07:52,160 --> 00:07:53,680
security arguments and help

239
00:07:53,680 --> 00:07:56,400
modular reasoning the tls 1.3 design

240
00:07:56,400 --> 00:07:57,360
incorporated many

241
00:07:57,360 --> 00:07:59,759
suggestions from the academic community

242
00:07:59,759 --> 00:08:00,560
from

243
00:08:00,560 --> 00:08:03,120
security fixes to fixes that simplified

244
00:08:03,120 --> 00:08:06,080
automated analysis

245
00:08:06,960 --> 00:08:08,800
to carry guarantees correctness

246
00:08:08,800 --> 00:08:10,479
guarantees down to machine code

247
00:08:10,479 --> 00:08:12,080
they can be established at source code

248
00:08:12,080 --> 00:08:14,000
level and then compiled using a verified

249
00:08:14,000 --> 00:08:16,080
compiler such as compsert

250
00:08:16,080 --> 00:08:17,919
but the problem is that today's verified

251
00:08:17,919 --> 00:08:19,919
compilers produce pretty slow code

252
00:08:19,919 --> 00:08:21,440
so important future work is to

253
00:08:21,440 --> 00:08:23,680
incorporate more optimizations including

254
00:08:23,680 --> 00:08:24,720
support for

255
00:08:24,720 --> 00:08:27,680
say cmd instructions alternatively

256
00:08:27,680 --> 00:08:28,960
there's a lot to be gained if we could

257
00:08:28,960 --> 00:08:30,479
focus more efforts on

258
00:08:30,479 --> 00:08:32,000
scalable verifying assembly code

259
00:08:32,000 --> 00:08:34,080
directly which currently requires quite

260
00:08:34,080 --> 00:08:35,760
a bit more work than verifying c

261
00:08:35,760 --> 00:08:38,080
code

262
00:08:39,679 --> 00:08:41,120
to achieve a sound formal treatment of

263
00:08:41,120 --> 00:08:42,958
protecting against side channel attacks

264
00:08:42,958 --> 00:08:44,640
guru jerome and heiser have argued the

265
00:08:44,640 --> 00:08:46,560
need for a new security oriented

266
00:08:46,560 --> 00:08:48,480
hardware software contract

267
00:08:48,480 --> 00:08:50,399
today's isas describe what a developer

268
00:08:50,399 --> 00:08:52,080
needs to know to write a functionally

269
00:08:52,080 --> 00:08:53,200
correct program

270
00:08:53,200 --> 00:08:54,480
but they're an insufficient

271
00:08:54,480 --> 00:08:56,080
specification when it comes to writing

272
00:08:56,080 --> 00:08:57,920
secure programs

273
00:08:57,920 --> 00:08:59,519
and so in order to carry sidechain

274
00:08:59,519 --> 00:09:01,519
countermeasures at the software level

275
00:09:01,519 --> 00:09:03,839
down to hardware we need isas that

276
00:09:03,839 --> 00:09:05,040
capture for example

277
00:09:05,040 --> 00:09:09,839
the temporal behavior of programs

278
00:09:09,839 --> 00:09:11,519
and finally to bridge any gaps between

279
00:09:11,519 --> 00:09:13,279
layers we encourage efforts on

280
00:09:13,279 --> 00:09:15,360
consolidating all of these guarantees

281
00:09:15,360 --> 00:09:17,040
so the holy grail of computer aided

282
00:09:17,040 --> 00:09:18,640
crypto would be to deliver

283
00:09:18,640 --> 00:09:20,959
guarantees on machine code that match

284
00:09:20,959 --> 00:09:22,880
the strength and elegance of guarantees

285
00:09:22,880 --> 00:09:26,080
on cryptographic designs

286
00:09:27,360 --> 00:09:28,800
so now that you're all a little bit more

287
00:09:28,800 --> 00:09:30,800
familiar with computer aided crypto

288
00:09:30,800 --> 00:09:32,720
let's think about what computer aided

289
00:09:32,720 --> 00:09:33,839
tools might change

290
00:09:33,839 --> 00:09:36,000
in the grand scheme of things so even

291
00:09:36,000 --> 00:09:37,600
though we've made some great strides i

292
00:09:37,600 --> 00:09:39,279
think the answer is that it's not

293
00:09:39,279 --> 00:09:41,519
totally clear yet you know will computer

294
00:09:41,519 --> 00:09:43,200
80 crypto fulfill its promises

295
00:09:43,200 --> 00:09:45,519
and put graphic designers out of work

296
00:09:45,519 --> 00:09:47,600
well it's only recently been deployed in

297
00:09:47,600 --> 00:09:49,120
the wild so i think it remains to be

298
00:09:49,120 --> 00:09:50,880
seen how well these formal guarantees

299
00:09:50,880 --> 00:09:52,880
actually hold up

300
00:09:52,880 --> 00:09:54,880
but it's important to remember that

301
00:09:54,880 --> 00:09:56,160
security isn't about

302
00:09:56,160 --> 00:09:58,480
being perfect but rather raising the bar

303
00:09:58,480 --> 00:09:59,600
for attackers

304
00:09:59,600 --> 00:10:01,279
so maybe we shouldn't expect a world

305
00:10:01,279 --> 00:10:02,880
without high profile crypto

306
00:10:02,880 --> 00:10:05,279
vulnerabilities but maybe just a few per

307
00:10:05,279 --> 00:10:07,519
year instead of like 10 per year

308
00:10:07,519 --> 00:10:09,040
what i do know for sure is that this

309
00:10:09,040 --> 00:10:10,800
will be a very exciting research area

310
00:10:10,800 --> 00:10:14,079
for many many years to come

311
00:10:14,079 --> 00:10:15,440
so with that i hope i piqued your

312
00:10:15,440 --> 00:10:17,519
interest in computer aided cryptography

313
00:10:17,519 --> 00:10:18,800
if you want to learn more i hope that

314
00:10:18,800 --> 00:10:20,720
you'll check out our slk paper

315
00:10:20,720 --> 00:10:22,079
and i'll be happy to take any of your

316
00:10:22,079 --> 00:10:25,040
questions thanks

317
00:10:25,440 --> 00:10:27,440
thanks for that talk kevin we're

318
00:10:27,440 --> 00:10:29,200
starting to get some questions

319
00:10:29,200 --> 00:10:31,440
on zulip thanks for that so the first

320
00:10:31,440 --> 00:10:33,600
question i'll ask is from watson

321
00:10:33,600 --> 00:10:36,640
um it's about open ssl

322
00:10:36,640 --> 00:10:40,160
um and specifically x509 verification is

323
00:10:40,160 --> 00:10:41,839
there any research on formalizing and

324
00:10:41,839 --> 00:10:42,959
verifying

325
00:10:42,959 --> 00:10:46,560
implementations of x509 verification

326
00:10:46,560 --> 00:10:49,600
um off the top of my head and from our

327
00:10:49,600 --> 00:10:54,480
literature search not that i'm aware of

328
00:10:56,079 --> 00:10:59,120
okay another question from paul grubbs

329
00:10:59,120 --> 00:11:00,720
do you think it's especially important

330
00:11:00,720 --> 00:11:02,480
to use formal methods for crypto or

331
00:11:02,480 --> 00:11:03,920
should all systems be designed and

332
00:11:03,920 --> 00:11:07,120
implemented using formal methods

333
00:11:07,120 --> 00:11:10,079
yeah that's a great question um i mean

334
00:11:10,079 --> 00:11:11,680
in an ideal world we would have you know

335
00:11:11,680 --> 00:11:13,680
formally verified system codes

336
00:11:13,680 --> 00:11:15,680
and all the way down the stack but i

337
00:11:15,680 --> 00:11:17,120
think for crypto

338
00:11:17,120 --> 00:11:18,240
i think we definitely should i think

339
00:11:18,240 --> 00:11:20,240
crypto is kind of the sweet spot where

340
00:11:20,240 --> 00:11:22,160
the volume of crypto code is not as

341
00:11:22,160 --> 00:11:23,839
large as say like an operating system or

342
00:11:23,839 --> 00:11:24,800
a compiler

343
00:11:24,800 --> 00:11:27,279
and so it really is possible to achieve

344
00:11:27,279 --> 00:11:28,800
best in class performance

345
00:11:28,800 --> 00:11:31,200
for the schemes we care about and so i

346
00:11:31,200 --> 00:11:31,839
think

347
00:11:31,839 --> 00:11:33,279
even though verification is quite

348
00:11:33,279 --> 00:11:34,800
expensive we're not losing much in terms

349
00:11:34,800 --> 00:11:35,680
of things we care about

350
00:11:35,680 --> 00:11:37,600
such as performance so i think there is

351
00:11:37,600 --> 00:11:39,440
um

352
00:11:39,440 --> 00:11:41,920
a huge motivation to have uh verified

353
00:11:41,920 --> 00:11:44,719
crypto code out there

354
00:11:45,680 --> 00:11:47,040
great wow the questions are really

355
00:11:47,040 --> 00:11:49,360
pouring in i'm gonna i'm gonna triage

356
00:11:49,360 --> 00:11:50,639
the question according to the number of

357
00:11:50,639 --> 00:11:52,160
thumbs up they're getting so the next

358
00:11:52,160 --> 00:11:55,200
question i'll ask is from uh frank davis

359
00:11:55,200 --> 00:11:57,760
um i don't know if this is an easy

360
00:11:57,760 --> 00:11:58,880
question

361
00:11:58,880 --> 00:12:01,600
to answer but um frank is wondering

362
00:12:01,600 --> 00:12:03,200
about the tools available

363
00:12:03,200 --> 00:12:06,800
um the current set of tools available

364
00:12:06,800 --> 00:12:08,000
and he's listing some that he's seen

365
00:12:08,000 --> 00:12:08,800
like kryptol

366
00:12:08,800 --> 00:12:11,839
and cpsa um

367
00:12:11,839 --> 00:12:14,160
i guess i guess you shouldn't just list

368
00:12:14,160 --> 00:12:16,399
all the tools you know but is there

369
00:12:16,399 --> 00:12:17,839
they're a good place to go to understand

370
00:12:17,839 --> 00:12:19,519
all the tools that are out there

371
00:12:19,519 --> 00:12:21,200
yes so definitely check out the so paper

372
00:12:21,200 --> 00:12:23,920
so the essay paper paper has um a

373
00:12:23,920 --> 00:12:25,279
comparative analysis of all the

374
00:12:25,279 --> 00:12:27,120
state-of-the-art tools that you would

375
00:12:27,120 --> 00:12:28,720
ever hear about i haven't talked about

376
00:12:28,720 --> 00:12:30,399
that much in this talk but you should

377
00:12:30,399 --> 00:12:31,920
definitely check out the slk paper for

378
00:12:31,920 --> 00:12:34,160
those

379
00:12:35,040 --> 00:12:38,079
okay great

380
00:12:38,079 --> 00:12:41,440
how much of uh so i assume this is a

381
00:12:41,440 --> 00:12:43,360
question from richard outer bridge

382
00:12:43,360 --> 00:12:45,360
um how much of this entire picture

383
00:12:45,360 --> 00:12:47,200
depends on invisible compiler

384
00:12:47,200 --> 00:12:49,839
optimizations

385
00:12:49,839 --> 00:12:53,440
invisible compiler optimizations um

386
00:12:53,440 --> 00:12:55,360
in terms of you know gaining assurance i

387
00:12:55,360 --> 00:12:56,720
suppose about the

388
00:12:56,720 --> 00:12:59,600
the result of the compiler relating the

389
00:12:59,600 --> 00:13:01,279
compiler's output to the

390
00:13:01,279 --> 00:13:03,760
to the source code right so i can speak

391
00:13:03,760 --> 00:13:04,480
to sort of like

392
00:13:04,480 --> 00:13:07,040
two strands of like verification method

393
00:13:07,040 --> 00:13:08,320
for this so obviously

394
00:13:08,320 --> 00:13:11,360
if you want to verify c code then you

395
00:13:11,360 --> 00:13:12,720
either trust the compiler or you use a

396
00:13:12,720 --> 00:13:13,839
verified one

397
00:13:13,839 --> 00:13:17,120
and there are verified compilers that do

398
00:13:17,120 --> 00:13:18,639
preserve side-channel kind of measures

399
00:13:18,639 --> 00:13:20,880
there's recent work from jill bartholo

400
00:13:20,880 --> 00:13:22,240
that does this

401
00:13:22,240 --> 00:13:23,360
and so i guess if you don't want to

402
00:13:23,360 --> 00:13:24,560
trust the compiler then you would have

403
00:13:24,560 --> 00:13:25,920
to go this route

404
00:13:25,920 --> 00:13:28,079
alternately there's a lot of work now on

405
00:13:28,079 --> 00:13:29,120
verifying

406
00:13:29,120 --> 00:13:31,680
um assembly code directly and so all the

407
00:13:31,680 --> 00:13:32,880
counter measures you would want such as

408
00:13:32,880 --> 00:13:34,880
correctness and side channel

409
00:13:34,880 --> 00:13:37,760
protections directly are established on

410
00:13:37,760 --> 00:13:40,639
the target level code

411
00:13:42,639 --> 00:13:45,839
okay great i think we maybe do one or

412
00:13:45,839 --> 00:13:47,360
two more questions depending on how long

413
00:13:47,360 --> 00:13:48,639
your answer is

414
00:13:48,639 --> 00:13:52,240
a question from ayla lee um how suitable

415
00:13:52,240 --> 00:13:53,199
are the current

416
00:13:53,199 --> 00:13:55,760
design level verification tools for

417
00:13:55,760 --> 00:13:59,360
lesser known crypto primitives

418
00:13:59,839 --> 00:14:01,600
i assume lesser known as anything other

419
00:14:01,600 --> 00:14:05,040
than encryption and signing maybe

420
00:14:05,040 --> 00:14:08,079
yeah i mean so so she asked about the

421
00:14:08,079 --> 00:14:11,199
symbolic tools was that right

422
00:14:11,199 --> 00:14:14,160
uh design level formal tools yeah i

423
00:14:14,160 --> 00:14:15,440
suppose symbolic

424
00:14:15,440 --> 00:14:17,440
yeah so so at the design level they're

425
00:14:17,440 --> 00:14:18,959
sort of like two camps there's either

426
00:14:18,959 --> 00:14:20,720
symbolic tools such as like pro verified

427
00:14:20,720 --> 00:14:21,680
tamarind which are

428
00:14:21,680 --> 00:14:25,519
better suited for um verifying protocols

429
00:14:25,519 --> 00:14:27,680
and then there's also tools like uh

430
00:14:27,680 --> 00:14:29,680
ezcrypt which are better suited to

431
00:14:29,680 --> 00:14:33,040
verifying uh primitives and

432
00:14:33,040 --> 00:14:34,399
at least as far as i know there

433
00:14:34,399 --> 00:14:36,480
shouldn't be any barriers when using

434
00:14:36,480 --> 00:14:39,360
like ezcrypt to verify

435
00:14:39,360 --> 00:14:42,639
any primitive that you would want to

436
00:14:42,839 --> 00:14:44,880
verify

437
00:14:44,880 --> 00:14:48,800
okay good uh we certainly have

438
00:14:48,800 --> 00:14:50,959
uh orders of magnitude more questions

439
00:14:50,959 --> 00:14:52,959
than can be answered live here um looks

440
00:14:52,959 --> 00:14:54,000
like people are pretty interested in

441
00:14:54,000 --> 00:14:55,839
this topic kevin so hopefully

442
00:14:55,839 --> 00:14:58,480
uh you and your co-authors can uh help

443
00:14:58,480 --> 00:14:59,760
answering these questions

444
00:14:59,760 --> 00:15:02,399
on zoolip afterwards but uh thanks again

445
00:15:02,399 --> 00:15:03,920
for your talk and for answering all the

446
00:15:03,920 --> 00:15:05,440
questions i think we'll move on though

447
00:15:05,440 --> 00:15:06,639
to the next

448
00:15:06,639 --> 00:15:08,639
talk in the session looks like it's the

449
00:15:08,639 --> 00:15:10,079
last talk of the day

450
00:15:10,079 --> 00:15:13,760
um this is a talk by nadim kobesie

451
00:15:13,760 --> 00:15:16,240
on verifpal cryptographic protocol

452
00:15:16,240 --> 00:15:16,959
analysis

453
00:15:16,959 --> 00:15:21,920
for the real world so nadeem go ahead

454
00:15:21,920 --> 00:15:27,839
all right one moment please

455
00:15:30,720 --> 00:15:34,480
is this working yes thank you

456
00:15:34,480 --> 00:15:36,399
hello everyone it's a pleasure to be

457
00:15:36,399 --> 00:15:38,399
giving this talk at real world crypto

458
00:15:38,399 --> 00:15:40,399
this is joint research between myself

459
00:15:40,399 --> 00:15:43,040
and george on ulla and mukesh tiwari

460
00:15:43,040 --> 00:15:44,800
this is verified cryptographic protocol

461
00:15:44,800 --> 00:15:48,399
analysis for the real world

462
00:15:48,399 --> 00:15:50,800
so the preceding talk gave an excellent

463
00:15:50,800 --> 00:15:52,240
overview of the state of formal

464
00:15:52,240 --> 00:15:53,600
verification today

465
00:15:53,600 --> 00:15:55,120
we have programming languages like

466
00:15:55,120 --> 00:15:57,680
f-star that tie an ml-like programming

467
00:15:57,680 --> 00:15:58,480
language with

468
00:15:58,480 --> 00:16:01,519
um set three theory improvers to get a

469
00:16:01,519 --> 00:16:03,519
state where types are proofs

470
00:16:03,519 --> 00:16:05,759
and there we can produce um functionally

471
00:16:05,759 --> 00:16:07,920
correct side-channel-resistant

472
00:16:07,920 --> 00:16:09,120
primitives such as

473
00:16:09,120 --> 00:16:11,759
the ones included in hackl n and also

474
00:16:11,759 --> 00:16:13,120
fully functionally correct protocol

475
00:16:13,120 --> 00:16:14,399
implementation such as

476
00:16:14,399 --> 00:16:15,759
the signal star implementation of the

477
00:16:15,759 --> 00:16:18,079
signal protocol and then if we look at

478
00:16:18,079 --> 00:16:21,360
modeling protocols we have

479
00:16:21,360 --> 00:16:23,199
tools such as proveref and tamarin and

480
00:16:23,199 --> 00:16:24,800
cryptoveriff that take

481
00:16:24,800 --> 00:16:26,880
models of protocols and then try to find

482
00:16:26,880 --> 00:16:28,320
contradictions to queries

483
00:16:28,320 --> 00:16:30,560
or in the case of cryptoverif produce

484
00:16:30,560 --> 00:16:32,079
full game-based proofs

485
00:16:32,079 --> 00:16:34,160
because you know tamarin and provereaf

486
00:16:34,160 --> 00:16:35,600
work in something called the symbolic

487
00:16:35,600 --> 00:16:36,560
model

488
00:16:36,560 --> 00:16:38,320
and then crypto vera forks in the

489
00:16:38,320 --> 00:16:39,600
computational model

490
00:16:39,600 --> 00:16:41,279
and the computational model is indeed

491
00:16:41,279 --> 00:16:43,040
more detailed allows for the production

492
00:16:43,040 --> 00:16:44,639
of proofs that can stand

493
00:16:44,639 --> 00:16:47,120
by themselves right whereas the symbolic

494
00:16:47,120 --> 00:16:48,720
model the proof is usually on the way

495
00:16:48,720 --> 00:16:49,680
that the tool works

496
00:16:49,680 --> 00:16:52,639
and the tool produces analysis results

497
00:16:52,639 --> 00:16:53,360
so

498
00:16:53,360 --> 00:16:54,560
we are going to be focusing on the

499
00:16:54,560 --> 00:16:56,320
symbolic model here because this talk

500
00:16:56,320 --> 00:16:56,959
and the whole

501
00:16:56,959 --> 00:16:59,759
point of this research is to focus on a

502
00:16:59,759 --> 00:17:01,279
simple and intuitive

503
00:17:01,279 --> 00:17:04,160
uh formal analysis of protocols and how

504
00:17:04,160 --> 00:17:06,079
simple can we go how big of a compromise

505
00:17:06,079 --> 00:17:07,199
can we make

506
00:17:07,199 --> 00:17:10,400
in terms of um soundness and

507
00:17:10,400 --> 00:17:12,240
completeness and still get results that

508
00:17:12,240 --> 00:17:14,079
actually mean something

509
00:17:14,079 --> 00:17:16,799
so an overview of symbolic verification

510
00:17:16,799 --> 00:17:18,400
you know the the big tools in the field

511
00:17:18,400 --> 00:17:20,000
right now are pro verifying tamarind and

512
00:17:20,000 --> 00:17:22,000
indeed they are being used more and more

513
00:17:22,000 --> 00:17:23,679
uh in these tools you write a model of

514
00:17:23,679 --> 00:17:24,880
the protocol so if you're modeling

515
00:17:24,880 --> 00:17:26,240
signal you just model a key exchange

516
00:17:26,240 --> 00:17:27,359
between alice and bob

517
00:17:27,359 --> 00:17:28,799
if you're doing tls you'd model a

518
00:17:28,799 --> 00:17:30,240
session between a server and a bunch of

519
00:17:30,240 --> 00:17:30,880
clients

520
00:17:30,880 --> 00:17:32,559
and then you ask questions essentially

521
00:17:32,559 --> 00:17:34,559
can someone impersonate the server

522
00:17:34,559 --> 00:17:36,880
what happens if my phone is hacked and

523
00:17:36,880 --> 00:17:38,880
my keys are stolen temporarily my state

524
00:17:38,880 --> 00:17:40,480
is hijacked temporarily do i get forward

525
00:17:40,480 --> 00:17:41,200
secrecy

526
00:17:41,200 --> 00:17:42,640
and then provera from tamara and try to

527
00:17:42,640 --> 00:17:44,320
find contradictions to these queries so

528
00:17:44,320 --> 00:17:45,520
if you look at the paper that was

529
00:17:45,520 --> 00:17:47,520
discussed in the previous talk the sok

530
00:17:47,520 --> 00:17:48,960
there was a list of these compara of

531
00:17:48,960 --> 00:17:51,200
these tools being compared and the hope

532
00:17:51,200 --> 00:17:53,679
here is to add a new uh tool called

533
00:17:53,679 --> 00:17:55,760
verve pal and to i hope to justify in

534
00:17:55,760 --> 00:17:56,320
this talk

535
00:17:56,320 --> 00:17:58,320
verify's novel novelties or

536
00:17:58,320 --> 00:18:00,799
contributions to the domain

537
00:18:00,799 --> 00:18:02,640
so i really believe in symbolic

538
00:18:02,640 --> 00:18:04,240
verification if you look at the research

539
00:18:04,240 --> 00:18:06,080
some of the research published recently

540
00:18:06,080 --> 00:18:08,799
it's quite uh inspiring how you can have

541
00:18:08,799 --> 00:18:10,320
things like small subgroup attacks and

542
00:18:10,320 --> 00:18:11,919
invalid curve attacks

543
00:18:11,919 --> 00:18:13,440
on protocols that use diffie-hellman

544
00:18:13,440 --> 00:18:14,640
that are able to be modeled in the

545
00:18:14,640 --> 00:18:16,480
symbolic model quite expressively and in

546
00:18:16,480 --> 00:18:17,919
an interesting way that can catch new

547
00:18:17,919 --> 00:18:18,640
attacks

548
00:18:18,640 --> 00:18:20,480
also attacks on signature schemes and

549
00:18:20,480 --> 00:18:23,200
protocols uh that use signature schemes

550
00:18:23,200 --> 00:18:25,280
uh research by cass crummers dennis

551
00:18:25,280 --> 00:18:27,600
jackson catriol cone gordon and

552
00:18:27,600 --> 00:18:29,360
is really showing that the symbolic

553
00:18:29,360 --> 00:18:30,880
model is far from

554
00:18:30,880 --> 00:18:34,160
boring and also um you have many papers

555
00:18:34,160 --> 00:18:35,520
published in the past four years that

556
00:18:35,520 --> 00:18:36,000
are just

557
00:18:36,000 --> 00:18:38,080
analyzing signal tls noise protocol

558
00:18:38,080 --> 00:18:39,840
frameworks cut about bluetooth 5g and so

559
00:18:39,840 --> 00:18:40,480
much more

560
00:18:40,480 --> 00:18:42,000
so this is a great way to work i really

561
00:18:42,000 --> 00:18:43,440
like the symbolic model because it's

562
00:18:43,440 --> 00:18:44,880
intuitive and it allows me to reason

563
00:18:44,880 --> 00:18:45,919
about protocols

564
00:18:45,919 --> 00:18:48,160
uh in a way that doesn't uh the return

565
00:18:48,160 --> 00:18:50,320
on investment i feel is quite good

566
00:18:50,320 --> 00:18:53,200
and so really the big elephant in the

567
00:18:53,200 --> 00:18:54,160
room so why

568
00:18:54,160 --> 00:18:56,240
isn't it used more if it's so great it's

569
00:18:56,240 --> 00:18:57,679
being used more a little bit these days

570
00:18:57,679 --> 00:18:59,679
but why is the progress so slow

571
00:18:59,679 --> 00:19:02,799
well so here is a

572
00:19:02,799 --> 00:19:04,559
quick example of tamarind and i have to

573
00:19:04,559 --> 00:19:06,880
admit when i first designed the slide

574
00:19:06,880 --> 00:19:08,559
i think i was being quite intellectually

575
00:19:08,559 --> 00:19:10,640
lazy here is a

576
00:19:10,640 --> 00:19:13,360
also proveref and the naive thing to do

577
00:19:13,360 --> 00:19:14,880
here would be to just look at these

578
00:19:14,880 --> 00:19:17,120
languages and say well haha they're so

579
00:19:17,120 --> 00:19:18,880
hard to learn and understand

580
00:19:18,880 --> 00:19:20,960
certainly we can do better as it turns

581
00:19:20,960 --> 00:19:22,799
out when you actually do due diligence

582
00:19:22,799 --> 00:19:23,120
and

583
00:19:23,120 --> 00:19:25,280
and try to understand things properly

584
00:19:25,280 --> 00:19:27,200
you realize that there is a good reason

585
00:19:27,200 --> 00:19:29,200
why these languages look like this and

586
00:19:29,200 --> 00:19:30,880
that there is a level of expressiveness

587
00:19:30,880 --> 00:19:31,120
and

588
00:19:31,120 --> 00:19:32,799
and sort of like the profundity of the

589
00:19:32,799 --> 00:19:34,400
analysis that you can actually get

590
00:19:34,400 --> 00:19:35,760
and the profundity of the queries that

591
00:19:35,760 --> 00:19:38,000
you can ask isn't does indeed benefit

592
00:19:38,000 --> 00:19:40,799
from this syntax so the reason why

593
00:19:40,799 --> 00:19:42,240
tamarind is like this and the reason why

594
00:19:42,240 --> 00:19:43,280
proverbs is like this

595
00:19:43,280 --> 00:19:45,520
there are very good legitimate reasons

596
00:19:45,520 --> 00:19:46,640
that benefit from

597
00:19:46,640 --> 00:19:49,520
some cases decades of research and i i

598
00:19:49,520 --> 00:19:51,039
want to make that very clear i want to

599
00:19:51,039 --> 00:19:52,880
state that clearly however

600
00:19:52,880 --> 00:19:54,799
that being said it's they still are hard

601
00:19:54,799 --> 00:19:56,400
to use right from the

602
00:19:56,400 --> 00:19:58,720
from the perspective of a student or a

603
00:19:58,720 --> 00:20:00,080
first-year perhaps student or an

604
00:20:00,080 --> 00:20:00,960
engineer

605
00:20:00,960 --> 00:20:04,559
and so um perhaps we can still

606
00:20:04,559 --> 00:20:07,200
try to cater to that space as well while

607
00:20:07,200 --> 00:20:08,240
respecting that

608
00:20:08,240 --> 00:20:10,080
these design decisions were not perhaps

609
00:20:10,080 --> 00:20:12,000
as misled as one might believe at the

610
00:20:12,000 --> 00:20:13,039
beginning

611
00:20:13,039 --> 00:20:15,440
so verifial is new protocol analysis

612
00:20:15,440 --> 00:20:17,600
software it has four main goals

613
00:20:17,600 --> 00:20:19,360
and one an intuitive language for

614
00:20:19,360 --> 00:20:20,720
modeling protocols

615
00:20:20,720 --> 00:20:23,360
two modeling that avoids user error

616
00:20:23,360 --> 00:20:24,000
three

617
00:20:24,000 --> 00:20:25,520
analysis output that's easy to

618
00:20:25,520 --> 00:20:27,520
understand and four

619
00:20:27,520 --> 00:20:29,840
it essentially tries to combine itself

620
00:20:29,840 --> 00:20:31,600
with the surrounding ecosystem

621
00:20:31,600 --> 00:20:33,360
you know integration into visual studio

622
00:20:33,360 --> 00:20:35,520
code translations to proveriff and

623
00:20:35,520 --> 00:20:36,960
and other stuff

624
00:20:36,960 --> 00:20:38,480
these are the four main goals that i

625
00:20:38,480 --> 00:20:40,240
just discussed you can see here on the

626
00:20:40,240 --> 00:20:40,799
left

627
00:20:40,799 --> 00:20:43,120
they provide a user-focused approach

628
00:20:43,120 --> 00:20:44,799
however hopefully without losing too

629
00:20:44,799 --> 00:20:45,679
much strength

630
00:20:45,679 --> 00:20:47,039
we can still reason about advanced

631
00:20:47,039 --> 00:20:49,679
protocols such as signal or dp3t

632
00:20:49,679 --> 00:20:51,760
out of the box we can analyze for post

633
00:20:51,760 --> 00:20:53,600
compromised security

634
00:20:53,600 --> 00:20:56,480
and so on out of the box we can model

635
00:20:56,480 --> 00:20:56,799
for

636
00:20:56,799 --> 00:20:58,799
fresh values and unbounded sessions and

637
00:20:58,799 --> 00:21:00,720
other cool symbolic model features

638
00:21:00,720 --> 00:21:02,480
i need to specify i think proveraf

639
00:21:02,480 --> 00:21:04,000
probably has a better grasp of unbounded

640
00:21:04,000 --> 00:21:05,600
sessions than we do at the moment but we

641
00:21:05,600 --> 00:21:07,039
are targeting these

642
00:21:07,039 --> 00:21:10,559
um these goals and so really

643
00:21:10,559 --> 00:21:12,400
this is not something that produces full

644
00:21:12,400 --> 00:21:15,039
game based proofs like crypto verif

645
00:21:15,039 --> 00:21:16,080
doesn't either

646
00:21:16,080 --> 00:21:18,159
but also it is not formally proven to

647
00:21:18,159 --> 00:21:19,360
not miss attacks

648
00:21:19,360 --> 00:21:21,520
uh the way that proverf is uh our work

649
00:21:21,520 --> 00:21:22,799
on um

650
00:21:22,799 --> 00:21:26,320
uh formalizing uh verve palincock really

651
00:21:26,320 --> 00:21:28,080
is pushing us towards getting more and

652
00:21:28,080 --> 00:21:29,679
more formalization on the soundness of

653
00:21:29,679 --> 00:21:31,520
the analysis logic but we are not quite

654
00:21:31,520 --> 00:21:32,400
there yet

655
00:21:32,400 --> 00:21:33,840
uh we are working on obtaining this

656
00:21:33,840 --> 00:21:35,919
higher confidence but we

657
00:21:35,919 --> 00:21:38,480
are conscious of the trade-offs that

658
00:21:38,480 --> 00:21:39,280
we're making

659
00:21:39,280 --> 00:21:41,280
to get this simple language and this

660
00:21:41,280 --> 00:21:42,640
analysis that allows you to really

661
00:21:42,640 --> 00:21:44,400
prototype and draft and like whiteboard

662
00:21:44,400 --> 00:21:46,159
protocols and immediately get feedback

663
00:21:46,159 --> 00:21:47,760
with little investment

664
00:21:47,760 --> 00:21:49,520
into what you're trying to say and i

665
00:21:49,520 --> 00:21:51,200
think this allows a lot of creativity

666
00:21:51,200 --> 00:21:52,320
and a lot of learning a lot of

667
00:21:52,320 --> 00:21:53,679
understanding to happen

668
00:21:53,679 --> 00:21:55,520
with students and engineers that i think

669
00:21:55,520 --> 00:21:56,720
is truly valuable

670
00:21:56,720 --> 00:21:58,640
so long as you understand and are sort

671
00:21:58,640 --> 00:21:59,919
of intellectually honest with what

672
00:21:59,919 --> 00:22:01,280
you're doing and the trade-offs and the

673
00:22:01,280 --> 00:22:02,960
responsibility and so on

674
00:22:02,960 --> 00:22:04,320
so here if you look on the left you'll

675
00:22:04,320 --> 00:22:06,400
see an example of a simple protocol

676
00:22:06,400 --> 00:22:07,760
model using verve pal

677
00:22:07,760 --> 00:22:09,600
and i really like how you can just say

678
00:22:09,600 --> 00:22:11,280
you know alice is sending a message to

679
00:22:11,280 --> 00:22:12,559
bob and bob is doing this and he's

680
00:22:12,559 --> 00:22:13,360
generating b

681
00:22:13,360 --> 00:22:15,280
and diffie-hellman looks very intuitive

682
00:22:15,280 --> 00:22:17,760
right and we can capture all of this

683
00:22:17,760 --> 00:22:20,559
uh and also give an intuitive experience

684
00:22:20,559 --> 00:22:20,960
and

685
00:22:20,960 --> 00:22:22,960
as you may recall the second priority

686
00:22:22,960 --> 00:22:24,720
was eliminating user error so in verb

687
00:22:24,720 --> 00:22:27,039
file you can't define new primitives

688
00:22:27,039 --> 00:22:29,440
and that's not because of you know of

689
00:22:29,440 --> 00:22:31,039
anything other than

690
00:22:31,039 --> 00:22:32,400
we don't want users to define new

691
00:22:32,400 --> 00:22:34,159
primitives we ship with

692
00:22:34,159 --> 00:22:36,480
hashing primitives mac hkdf password

693
00:22:36,480 --> 00:22:38,720
hashing such as script

694
00:22:38,720 --> 00:22:40,559
encryption authenticated encryption

695
00:22:40,559 --> 00:22:42,159
public key encryption

696
00:22:42,159 --> 00:22:44,720
uh signings ring signatures blind

697
00:22:44,720 --> 00:22:45,760
signatures

698
00:22:45,760 --> 00:22:48,559
shamir secret sharing and so on and so

699
00:22:48,559 --> 00:22:48,960
we

700
00:22:48,960 --> 00:22:50,799
want to give you primitives we know

701
00:22:50,799 --> 00:22:52,400
we've specified them according to a

702
00:22:52,400 --> 00:22:53,280
universal

703
00:22:53,280 --> 00:22:55,840
specification built into verve pal that

704
00:22:55,840 --> 00:22:57,600
is called primitive spec that is used to

705
00:22:57,600 --> 00:22:58,880
model any primitive

706
00:22:58,880 --> 00:23:00,559
and then we know that you're basically

707
00:23:00,559 --> 00:23:02,640
going to be able to understand what to

708
00:23:02,640 --> 00:23:03,919
expect from these primitives

709
00:23:03,919 --> 00:23:05,440
and we're not targeting users that want

710
00:23:05,440 --> 00:23:07,200
more if you want to specify your own

711
00:23:07,200 --> 00:23:08,159
primitive

712
00:23:08,159 --> 00:23:10,400
um pro verify and tamaran really do

713
00:23:10,400 --> 00:23:11,679
provide

714
00:23:11,679 --> 00:23:13,280
you you shouldn't be using verified you

715
00:23:13,280 --> 00:23:14,640
should be using tools that are more

716
00:23:14,640 --> 00:23:15,840
advanced really

717
00:23:15,840 --> 00:23:19,200
and so um a verifiable syntax is also

718
00:23:19,200 --> 00:23:20,960
fairly expressive for example if you add

719
00:23:20,960 --> 00:23:21,520
little

720
00:23:21,520 --> 00:23:24,000
uh brackets around the around the value

721
00:23:24,000 --> 00:23:25,440
as it's being sent on the network as you

722
00:23:25,440 --> 00:23:27,280
can see here in orange

723
00:23:27,280 --> 00:23:29,200
you'll see that this becomes a guarded

724
00:23:29,200 --> 00:23:31,679
constant and so it's basically

725
00:23:31,679 --> 00:23:34,480
not mutatable by the active attacker and

726
00:23:34,480 --> 00:23:36,080
this can be used for example to model

727
00:23:36,080 --> 00:23:37,280
pre-shared keys

728
00:23:37,280 --> 00:23:38,799
and also if you had a little question

729
00:23:38,799 --> 00:23:40,799
mark this makes it such that

730
00:23:40,799 --> 00:23:43,360
a primitive is a checked primitive so if

731
00:23:43,360 --> 00:23:44,960
signature verification fails

732
00:23:44,960 --> 00:23:46,240
the client here will abort their

733
00:23:46,240 --> 00:23:48,159
execution of this particular execution

734
00:23:48,159 --> 00:23:49,120
of the protocol in which

735
00:23:49,120 --> 00:23:51,679
signature verification fails this is a

736
00:23:51,679 --> 00:23:52,960
giant thing that i shouldn't have

737
00:23:52,960 --> 00:23:54,480
included but basically

738
00:23:54,480 --> 00:23:56,400
uh there is a sort of formalism as to

739
00:23:56,400 --> 00:23:57,919
how verve pile works

740
00:23:57,919 --> 00:24:00,480
here's the primitive spec on the left i

741
00:24:00,480 --> 00:24:02,400
should use my time to talk about things

742
00:24:02,400 --> 00:24:04,000
that are more relevant since i only have

743
00:24:04,000 --> 00:24:05,039
10 minutes

744
00:24:05,039 --> 00:24:07,360
so we have advanced features we have

745
00:24:07,360 --> 00:24:09,279
protocol phases that allow for temporal

746
00:24:09,279 --> 00:24:11,039
logic and this allows you to model

747
00:24:11,039 --> 00:24:12,640
uh things that happen in different

748
00:24:12,640 --> 00:24:14,880
periods of time and this is necessary

749
00:24:14,880 --> 00:24:16,640
for modeling for poor secrecy post

750
00:24:16,640 --> 00:24:18,559
compromised security you can also leak

751
00:24:18,559 --> 00:24:19,760
values to an attacker

752
00:24:19,760 --> 00:24:21,440
recently we introduced unlinkability

753
00:24:21,440 --> 00:24:23,039
queries and freshness queries and these

754
00:24:23,039 --> 00:24:23,840
are quite

755
00:24:23,840 --> 00:24:25,279
important for modeling something like

756
00:24:25,279 --> 00:24:27,360
the dp3t contact tracing protocol

757
00:24:27,360 --> 00:24:30,240
and we also have password uh values that

758
00:24:30,240 --> 00:24:31,120
are crackable

759
00:24:31,120 --> 00:24:33,120
unless you first hash them i thought

760
00:24:33,120 --> 00:24:34,799
this was a fairly unique feature turns

761
00:24:34,799 --> 00:24:35,039
out

762
00:24:35,039 --> 00:24:38,080
proverev has a similar feature and also

763
00:24:38,080 --> 00:24:40,400
query preconditions uh which allow you

764
00:24:40,400 --> 00:24:42,400
to basically relate queries together

765
00:24:42,400 --> 00:24:44,559
and uh of course this is a feature that

766
00:24:44,559 --> 00:24:46,480
other this is a very common feature

767
00:24:46,480 --> 00:24:48,880
and so uh we also have verified for

768
00:24:48,880 --> 00:24:50,400
visual studio code it's a shame i can't

769
00:24:50,400 --> 00:24:51,919
talk more about this because it's really

770
00:24:51,919 --> 00:24:52,559
good

771
00:24:52,559 --> 00:24:53,919
you know like the integration into

772
00:24:53,919 --> 00:24:55,520
visual studio code you can run verified

773
00:24:55,520 --> 00:24:56,960
analysis from inside visual studio code

774
00:24:56,960 --> 00:24:58,159
generate graphs

775
00:24:58,159 --> 00:25:00,559
uh format your models upload them to

776
00:25:00,559 --> 00:25:01,200
verify

777
00:25:01,200 --> 00:25:02,720
oh we have a thing called verify i don't

778
00:25:02,720 --> 00:25:04,400
have a slide on it but there's like this

779
00:25:04,400 --> 00:25:06,480
like like github for verified models and

780
00:25:06,480 --> 00:25:07,840
you can upload your verify model there

781
00:25:07,840 --> 00:25:09,520
and share it more easily

782
00:25:09,520 --> 00:25:12,320
uh the translation to and proverf

783
00:25:12,320 --> 00:25:13,679
is really good it

784
00:25:13,679 --> 00:25:16,240
forced us to basically have a better

785
00:25:16,240 --> 00:25:18,320
understanding of the formal semantics

786
00:25:18,320 --> 00:25:20,159
uh and have lemmas and proofs on how

787
00:25:20,159 --> 00:25:22,080
everything works and also

788
00:25:22,080 --> 00:25:24,159
we're translating pro verified models

789
00:25:24,159 --> 00:25:25,919
automatically to provide models

790
00:25:25,919 --> 00:25:28,400
both of these things are need more work

791
00:25:28,400 --> 00:25:29,840
this stuff is really hard

792
00:25:29,840 --> 00:25:31,919
but it works kind of and we're getting

793
00:25:31,919 --> 00:25:34,080
it better uh it's it's under active

794
00:25:34,080 --> 00:25:34,960
development

795
00:25:34,960 --> 00:25:38,320
uh with my uh co-authors uh the

796
00:25:38,320 --> 00:25:40,400
analysis output is easier to read here

797
00:25:40,400 --> 00:25:41,440
on the left you can see

798
00:25:41,440 --> 00:25:44,159
what provera analysis output looks like

799
00:25:44,159 --> 00:25:44,880
on the right

800
00:25:44,880 --> 00:25:47,760
there's a verve pal attack trace and the

801
00:25:47,760 --> 00:25:49,600
vert pilot attack trace is colored also

802
00:25:49,600 --> 00:25:51,200
if you look at the terminal output

803
00:25:51,200 --> 00:25:53,039
which i'm sure is very important oh

804
00:25:53,039 --> 00:25:54,799
there you go there's one

805
00:25:54,799 --> 00:25:56,720
we've analyzed signals cuddle bud

806
00:25:56,720 --> 00:25:59,679
protonmail telegram dp3t using verve pal

807
00:25:59,679 --> 00:26:01,520
and we haven't found new attacks but

808
00:26:01,520 --> 00:26:03,279
every time the analysis has matched what

809
00:26:03,279 --> 00:26:04,880
we've expected and also other formal

810
00:26:04,880 --> 00:26:06,000
analyses using

811
00:26:06,000 --> 00:26:08,640
similar tools in the field uh people are

812
00:26:08,640 --> 00:26:10,320
using verifials so

813
00:26:10,320 --> 00:26:13,120
uh assa abloy makes uh locks and smart

814
00:26:13,120 --> 00:26:14,720
locks they've used verfpal

815
00:26:14,720 --> 00:26:16,880
uh i know some engineers at google have

816
00:26:16,880 --> 00:26:18,159
used verve pal but

817
00:26:18,159 --> 00:26:19,919
they just like sent bug fixes on the

818
00:26:19,919 --> 00:26:21,440
mailing list i don't know if you such as

819
00:26:21,440 --> 00:26:23,120
google is more important than that

820
00:26:23,120 --> 00:26:25,440
it most likely is not quarks lab uses

821
00:26:25,440 --> 00:26:26,960
verve pal a lot

822
00:26:26,960 --> 00:26:28,880
zoom has used verve pal in order to like

823
00:26:28,880 --> 00:26:31,120
just early sketching and prototyping

824
00:26:31,120 --> 00:26:33,440
of the zoom uh of ideas for the zoom

825
00:26:33,440 --> 00:26:35,360
protocol but it also led

826
00:26:35,360 --> 00:26:37,520
to finding an early flaw in one of those

827
00:26:37,520 --> 00:26:39,120
prototypes and i'm very proud of that i

828
00:26:39,120 --> 00:26:40,080
think verve pal

829
00:26:40,080 --> 00:26:41,600
so what's really interesting to keep in

830
00:26:41,600 --> 00:26:43,679
mind is that the zoom team

831
00:26:43,679 --> 00:26:45,120
you know like they they could have

832
00:26:45,120 --> 00:26:46,960
invested a lot of time in learning for

833
00:26:46,960 --> 00:26:48,640
example pro verify and tamarind getting

834
00:26:48,640 --> 00:26:49,760
better results more

835
00:26:49,760 --> 00:26:52,320
sort of elaborate and profound results

836
00:26:52,320 --> 00:26:53,919
but is that really a priority for an

837
00:26:53,919 --> 00:26:54,799
engineering team

838
00:26:54,799 --> 00:26:56,880
early in the design phase i don't think

839
00:26:56,880 --> 00:26:58,080
it even should be really

840
00:26:58,080 --> 00:26:59,679
i think in the early design phase you

841
00:26:59,679 --> 00:27:01,919
want to quickly sketch and whiteboard

842
00:27:01,919 --> 00:27:03,760
and get meaningful feedback but with

843
00:27:03,760 --> 00:27:05,760
little investment and verifial is

844
00:27:05,760 --> 00:27:07,440
excellent at that i'm really proud of

845
00:27:07,440 --> 00:27:08,159
that it was

846
00:27:08,159 --> 00:27:10,559
able to be used in these contexts uh the

847
00:27:10,559 --> 00:27:11,279
verve pile

848
00:27:11,279 --> 00:27:13,279
user manual also means that verified has

849
00:27:13,279 --> 00:27:14,720
been a huge success

850
00:27:14,720 --> 00:27:18,240
in uh teaching so uh i taught a class at

851
00:27:18,240 --> 00:27:18,880
nyu

852
00:27:18,880 --> 00:27:21,679
and verify was able to actually get 20

853
00:27:21,679 --> 00:27:23,520
year old undergraduate students with no

854
00:27:23,520 --> 00:27:25,279
background whatsoever in security these

855
00:27:25,279 --> 00:27:27,039
are first year second year students

856
00:27:27,039 --> 00:27:28,159
and they're modeling protocols and

857
00:27:28,159 --> 00:27:29,919
understanding security goals i also

858
00:27:29,919 --> 00:27:31,520
think this is a great success

859
00:27:31,520 --> 00:27:33,360
and so now we're working on something

860
00:27:33,360 --> 00:27:34,960
called verve pal heroes which is going

861
00:27:34,960 --> 00:27:35,520
to be a

862
00:27:35,520 --> 00:27:37,440
very long and elaborate hopefully

863
00:27:37,440 --> 00:27:38,720
illustrated guide to protocol

864
00:27:38,720 --> 00:27:39,679
verification

865
00:27:39,679 --> 00:27:41,600
and it uses verified as an introduction

866
00:27:41,600 --> 00:27:43,360
into the field but then from there it

867
00:27:43,360 --> 00:27:44,000
goes into

868
00:27:44,000 --> 00:27:46,559
proveref and tamarin and cryptoverif and

869
00:27:46,559 --> 00:27:48,720
easycrypt and f star and

870
00:27:48,720 --> 00:27:50,480
and as you can see we're sort of uh

871
00:27:50,480 --> 00:27:51,840
expanding the uh

872
00:27:51,840 --> 00:27:54,880
sort of almost uh ridiculously

873
00:27:54,880 --> 00:27:58,080
uh approachable uh uh sort of like uh

874
00:27:58,080 --> 00:28:00,159
style that verified has with the sort of

875
00:28:00,159 --> 00:28:01,360
illustrations and so on

876
00:28:01,360 --> 00:28:03,279
to cover all of these tools because we

877
00:28:03,279 --> 00:28:05,200
really want to focus on pedagogy as well

878
00:28:05,200 --> 00:28:06,880
as being something that is useful

879
00:28:06,880 --> 00:28:08,640
and sort of makes sense for engineers

880
00:28:08,640 --> 00:28:10,080
and students

881
00:28:10,080 --> 00:28:12,320
so good i was just getting so

882
00:28:12,320 --> 00:28:13,279
interrupted to

883
00:28:13,279 --> 00:28:16,080
to conclude uh my co-authors giorgio

884
00:28:16,080 --> 00:28:17,919
ulla and mukesh tewari i believe

885
00:28:17,919 --> 00:28:20,399
are at this conference giorgio is just

886
00:28:20,399 --> 00:28:21,120
finishing

887
00:28:21,120 --> 00:28:22,720
his undergraduate is going to start his

888
00:28:22,720 --> 00:28:24,480
masters he has done incredible work for

889
00:28:24,480 --> 00:28:25,919
an undergraduate student he

890
00:28:25,919 --> 00:28:28,000
worked so much on the aspect on

891
00:28:28,000 --> 00:28:30,559
formal semantics of verve pal i strongly

892
00:28:30,559 --> 00:28:33,279
encourage you to hire giorgio

893
00:28:33,279 --> 00:28:35,039
really he really deserves it i'm so

894
00:28:35,039 --> 00:28:37,600
grateful for uh the way

895
00:28:37,600 --> 00:28:38,960
georgio and mukesh have been able to

896
00:28:38,960 --> 00:28:40,240
help me out and contribute to this

897
00:28:40,240 --> 00:28:41,760
project so i just wanted to

898
00:28:41,760 --> 00:28:44,080
shout out that's it thank you so much

899
00:28:44,080 --> 00:28:46,000
great uh thank you nadeem for that

900
00:28:46,000 --> 00:28:48,480
uh exciting talk uh we have a couple

901
00:28:48,480 --> 00:28:49,200
questions

902
00:28:49,200 --> 00:28:52,320
on uh on zulip uh the first question

903
00:28:52,320 --> 00:28:54,080
i'll take is from nigel smart

904
00:28:54,080 --> 00:28:57,120
um you listed uh secret sharing very

905
00:28:57,120 --> 00:28:58,159
quickly and it

906
00:28:58,159 --> 00:28:59,840
looked like it might have just been uh

907
00:28:59,840 --> 00:29:02,000
one out of three shmear do you allow

908
00:29:02,000 --> 00:29:04,559
um you know arbitrary threshold secret

909
00:29:04,559 --> 00:29:05,919
sharing and also do you

910
00:29:05,919 --> 00:29:07,440
model the fact that secret sharing is

911
00:29:07,440 --> 00:29:09,440
linear like that's a common

912
00:29:09,440 --> 00:29:11,360
property used in npc protocols for

913
00:29:11,360 --> 00:29:13,039
example

914
00:29:13,039 --> 00:29:15,520
so for the first question we do not

915
00:29:15,520 --> 00:29:16,399
allow for

916
00:29:16,399 --> 00:29:19,039
more than three and uh this is for no

917
00:29:19,039 --> 00:29:20,720
good reason we could allow it i just i

918
00:29:20,720 --> 00:29:21,600
guess i haven't

919
00:29:21,600 --> 00:29:23,039
worked that in yet we could easily

920
00:29:23,039 --> 00:29:25,279
expand that for the second

921
00:29:25,279 --> 00:29:27,120
thing i don't think that really can be

922
00:29:27,120 --> 00:29:28,559
captured i might be wrong

923
00:29:28,559 --> 00:29:30,240
but uh as far as i understand i don't

924
00:29:30,240 --> 00:29:31,200
think that can be captured in the

925
00:29:31,200 --> 00:29:32,960
symbolic model

926
00:29:32,960 --> 00:29:34,960
okay well there was a there was an aside

927
00:29:34,960 --> 00:29:36,480
in nigel's question which i didn't read

928
00:29:36,480 --> 00:29:37,200
but he said

929
00:29:37,200 --> 00:29:38,960
similar to how you modeled biffy helman

930
00:29:38,960 --> 00:29:40,320
you have a group operation so there's

931
00:29:40,320 --> 00:29:40,960
some

932
00:29:40,960 --> 00:29:42,880
algebraic reasoning presumably in the

933
00:29:42,880 --> 00:29:44,080
model well

934
00:29:44,080 --> 00:29:45,279
the way that you model something like

935
00:29:45,279 --> 00:29:47,120
diffie-hellman so tools like tamarind

936
00:29:47,120 --> 00:29:48,559
have a more profound understanding of

937
00:29:48,559 --> 00:29:49,679
diffie-hellman but

938
00:29:49,679 --> 00:29:51,919
in verve pal is just a equation where

939
00:29:51,919 --> 00:29:53,039
you basically say

940
00:29:53,039 --> 00:29:54,960
and some uh sort of basic proverbial

941
00:29:54,960 --> 00:29:56,880
models you know g to the b to the a is

942
00:29:56,880 --> 00:29:58,480
equal to g to the a to the b

943
00:29:58,480 --> 00:30:00,320
and you're basically just satisfied with

944
00:30:00,320 --> 00:30:02,159
that and you could expand that

945
00:30:02,159 --> 00:30:04,320
but uh so far this is what we've stuck

946
00:30:04,320 --> 00:30:05,919
with

947
00:30:05,919 --> 00:30:08,320
great uh a question from jonathan

948
00:30:08,320 --> 00:30:09,279
hoyland

949
00:30:09,279 --> 00:30:12,000
what is the performance of verifial on

950
00:30:12,000 --> 00:30:13,679
massive protocols like tls

951
00:30:13,679 --> 00:30:15,279
you have to split it into pieces or can

952
00:30:15,279 --> 00:30:18,159
you analyze it monolithically oh man

953
00:30:18,159 --> 00:30:20,399
so right before real world crypto we did

954
00:30:20,399 --> 00:30:22,080
so much work on improving performance

955
00:30:22,080 --> 00:30:23,679
it's written in go and so we're able to

956
00:30:23,679 --> 00:30:25,440
like use multi-threading and

957
00:30:25,440 --> 00:30:27,760
we're kind of uh improving also the

958
00:30:27,760 --> 00:30:28,559
inner uh

959
00:30:28,559 --> 00:30:30,159
we did like a lot of graphing of the

960
00:30:30,159 --> 00:30:31,600
performance uh

961
00:30:31,600 --> 00:30:33,360
something like tls takes a very long

962
00:30:33,360 --> 00:30:34,880
time even something like signal

963
00:30:34,880 --> 00:30:36,240
takes a long time but at the same time i

964
00:30:36,240 --> 00:30:39,279
recall that when i modeled ikpsk2

965
00:30:39,279 --> 00:30:41,440
in uh proverif and this was with also

966
00:30:41,440 --> 00:30:42,480
assistance from

967
00:30:42,480 --> 00:30:44,640
people who were very expert in proverb

968
00:30:44,640 --> 00:30:46,480
and like giving me pointers on how to

969
00:30:46,480 --> 00:30:48,080
make the model go faster

970
00:30:48,080 --> 00:30:50,960
it still took 30 days to get the result

971
00:30:50,960 --> 00:30:52,480
it took 30 days to get that result in

972
00:30:52,480 --> 00:30:53,120
proverb

973
00:30:53,120 --> 00:30:54,559
and we it was in the winter which is

974
00:30:54,559 --> 00:30:56,320
great because i had free heating in my

975
00:30:56,320 --> 00:30:56,880
house

976
00:30:56,880 --> 00:30:59,200
and that was quite excellent really but

977
00:30:59,200 --> 00:31:00,480
tamarind also

978
00:31:00,480 --> 00:31:02,240
uh can take a very long time on certain

979
00:31:02,240 --> 00:31:03,840
protocols and this is just a thing that

980
00:31:03,840 --> 00:31:05,200
we have to deal with but we are working

981
00:31:05,200 --> 00:31:06,640
on making it fast and i think currently

982
00:31:06,640 --> 00:31:07,039
it is

983
00:31:07,039 --> 00:31:10,960
reasonably fast uh okay i think i'll

984
00:31:10,960 --> 00:31:13,039
i think i'll pass along one last

985
00:31:13,039 --> 00:31:14,399
question thanks everyone for staying a

986
00:31:14,399 --> 00:31:15,039
few minutes

987
00:31:15,039 --> 00:31:17,760
late um a question from sebastian very

988
00:31:17,760 --> 00:31:18,399
sure

989
00:31:18,399 --> 00:31:20,640
um given that verifpal might miss

990
00:31:20,640 --> 00:31:22,720
attacks are you not afraid that protocol

991
00:31:22,720 --> 00:31:24,080
designers might mistake

992
00:31:24,080 --> 00:31:28,000
the output for a proof of security

993
00:31:28,399 --> 00:31:30,720
you can miss attacks so easily by

994
00:31:30,720 --> 00:31:32,799
modeling the protocol

995
00:31:32,799 --> 00:31:35,279
so i have looked at many uh protocols

996
00:31:35,279 --> 00:31:37,039
written using tools that are decades old

997
00:31:37,039 --> 00:31:38,080
that have been under development for a

998
00:31:38,080 --> 00:31:38,880
long time

999
00:31:38,880 --> 00:31:41,039
and attacks are very frequently missed

1000
00:31:41,039 --> 00:31:42,080
just because the model is not

1001
00:31:42,080 --> 00:31:43,440
comprehensive enough and it's quite

1002
00:31:43,440 --> 00:31:45,440
difficult to have a comprehensive model

1003
00:31:45,440 --> 00:31:46,480
when you're working in the symbolic

1004
00:31:46,480 --> 00:31:47,760
model and even in the computational

1005
00:31:47,760 --> 00:31:49,200
model because you're always restricting

1006
00:31:49,200 --> 00:31:49,919
yourself

1007
00:31:49,919 --> 00:31:52,720
to a sort of like uh elegant

1008
00:31:52,720 --> 00:31:53,760
representation

1009
00:31:53,760 --> 00:31:56,640
uh model really of the protocol uh we

1010
00:31:56,640 --> 00:31:56,960
are

1011
00:31:56,960 --> 00:31:59,200
i think very clear about verifia's

1012
00:31:59,200 --> 00:32:00,159
capabilities

1013
00:32:00,159 --> 00:32:02,640
and i think that especially in the last

1014
00:32:02,640 --> 00:32:03,600
little while

1015
00:32:03,600 --> 00:32:06,000
it has become quite adept at finding the

1016
00:32:06,000 --> 00:32:07,200
attacks that uh

1017
00:32:07,200 --> 00:32:08,799
one could reasonably expect it to find

1018
00:32:08,799 --> 00:32:10,240
and a lot of times attacks that are

1019
00:32:10,240 --> 00:32:14,399
a bit surprising and unexpected uh

1020
00:32:14,399 --> 00:32:16,000
none of this stuff is perfect and i

1021
00:32:16,000 --> 00:32:17,519
think that ultimately whether even

1022
00:32:17,519 --> 00:32:18,960
you're using something that is

1023
00:32:18,960 --> 00:32:20,960
really truly quite impressive uh an

1024
00:32:20,960 --> 00:32:22,080
impressive feat of theory and

1025
00:32:22,080 --> 00:32:23,600
engineering like f-star

1026
00:32:23,600 --> 00:32:25,440
you know you still find bugs in f-star

1027
00:32:25,440 --> 00:32:29,840
that are quite uh simple sometimes

1028
00:32:29,840 --> 00:32:32,320
great well uh on behalf of all the

1029
00:32:32,320 --> 00:32:34,159
audience members i just want to thank

1030
00:32:34,159 --> 00:32:36,320
nadeem and kevin for their really

1031
00:32:36,320 --> 00:32:37,360
interesting talks

1032
00:32:37,360 --> 00:32:40,240
there's lots of lots of questions for

1033
00:32:40,240 --> 00:32:40,960
both

1034
00:32:40,960 --> 00:32:42,799
sets of authors on zoo i hope you'll

1035
00:32:42,799 --> 00:32:46,879
have a chance to to look through those

