1
00:00:00,560 --> 00:00:02,800
you're ready to go fantastic all right

2
00:00:02,800 --> 00:00:03,360
thank you

3
00:00:03,360 --> 00:00:05,279
all right so uh welcome everybody to the

4
00:00:05,279 --> 00:00:07,759
second session of the day on signatures

5
00:00:07,759 --> 00:00:10,240
we have three fantastic talks and the

6
00:00:10,240 --> 00:00:11,840
first talk is going to be about a really

7
00:00:11,840 --> 00:00:13,920
clever attack on ecdsa

8
00:00:13,920 --> 00:00:16,000
called the ladder leak breaking ecdsa

9
00:00:16,000 --> 00:00:18,400
with less than one bit of non-sleekage

10
00:00:18,400 --> 00:00:21,600
this is work by diego uh aranha philippe

11
00:00:21,600 --> 00:00:25,279
novelas akira takata takashi medi

12
00:00:25,279 --> 00:00:26,880
tabuchi and you value rome

13
00:00:26,880 --> 00:00:28,320
and akira is going to give the talk

14
00:00:28,320 --> 00:00:31,840
akira the floor is yours

15
00:00:35,520 --> 00:00:38,320
akira are you there so yeah thank you

16
00:00:38,320 --> 00:00:39,520
for the introduction

17
00:00:39,520 --> 00:00:44,320
and i hope my slide is visible yeah we

18
00:00:44,320 --> 00:00:45,520
can see it

19
00:00:45,520 --> 00:00:48,399
okay cool so thanks for the introduction

20
00:00:48,399 --> 00:00:49,680
so this is a joint work

21
00:00:49,680 --> 00:00:52,879
uh with a several different

22
00:00:52,879 --> 00:00:54,879
uh institutes including office

23
00:00:54,879 --> 00:00:55,920
university

24
00:00:55,920 --> 00:00:58,320
um unicamp the ndt university of

25
00:00:58,320 --> 00:01:00,480
adelaide and data61

26
00:01:00,480 --> 00:01:03,600
so the talk is about uh attack against

27
00:01:03,600 --> 00:01:05,360
ecgs and nones

28
00:01:05,360 --> 00:01:08,960
but what is unknowns so in general nonce

29
00:01:08,960 --> 00:01:11,760
simply means a number used only once and

30
00:01:11,760 --> 00:01:13,520
this is a commonly accepted notion in

31
00:01:13,520 --> 00:01:14,799
cryptology

32
00:01:14,799 --> 00:01:18,080
however in the context of a ecdsa

33
00:01:18,080 --> 00:01:20,720
or snow type signature schemes nouns

34
00:01:20,720 --> 00:01:22,720
actually means a different thing

35
00:01:22,720 --> 00:01:24,560
so here alice is a signer holding a

36
00:01:24,560 --> 00:01:27,200
secret key x and whenever alice wants to

37
00:01:27,200 --> 00:01:27,600
sign

38
00:01:27,600 --> 00:01:30,400
some message she always samples uh some

39
00:01:30,400 --> 00:01:31,280
noise k

40
00:01:31,280 --> 00:01:34,400
from integers modular group order

41
00:01:34,400 --> 00:01:36,159
and then importantly this non-scale

42
00:01:36,159 --> 00:01:38,640
satisfies these modular equations

43
00:01:38,640 --> 00:01:41,439
in which z and h are public values

44
00:01:41,439 --> 00:01:43,280
because they can be computed from the

45
00:01:43,280 --> 00:01:44,399
signature

46
00:01:44,399 --> 00:01:46,320
so of course as you can see here the

47
00:01:46,320 --> 00:01:47,680
noun scale should be

48
00:01:47,680 --> 00:01:49,360
should never be reused or exposed

49
00:01:49,360 --> 00:01:51,200
because otherwise it would be

50
00:01:51,200 --> 00:01:52,640
very straightforward to recover the

51
00:01:52,640 --> 00:01:54,799
secret signing key by observing a few

52
00:01:54,799 --> 00:01:55,360
different

53
00:01:55,360 --> 00:01:59,600
signatures however in ecgsa

54
00:01:59,600 --> 00:02:01,680
nonce is even more sensitive so for

55
00:02:01,680 --> 00:02:03,520
example what if north's case slightly

56
00:02:03,520 --> 00:02:04,399
biased

57
00:02:04,399 --> 00:02:06,960
or partially leaked actually even in

58
00:02:06,960 --> 00:02:08,399
such cases

59
00:02:08,399 --> 00:02:10,720
the attack is still feasible so more

60
00:02:10,720 --> 00:02:13,120
concretely the secret signing key x

61
00:02:13,120 --> 00:02:14,879
can be recovered by solving the

62
00:02:14,879 --> 00:02:17,680
so-called hidden of a problem

63
00:02:17,680 --> 00:02:20,959
so the attack against nons could happen

64
00:02:20,959 --> 00:02:22,000
in many different ways

65
00:02:22,000 --> 00:02:24,560
in the real world including for example

66
00:02:24,560 --> 00:02:26,480
a poorly designed random number

67
00:02:26,480 --> 00:02:27,280
generator

68
00:02:27,280 --> 00:02:29,040
as we have seen in the famous

69
00:02:29,040 --> 00:02:30,640
playstation 3

70
00:02:30,640 --> 00:02:33,280
incident about 10 years ago or predict

71
00:02:33,280 --> 00:02:34,080
of london

72
00:02:34,080 --> 00:02:36,480
seed or virtual matching resets and so

73
00:02:36,480 --> 00:02:37,920
on and so forth

74
00:02:37,920 --> 00:02:39,920
in this work we're going to focus on

75
00:02:39,920 --> 00:02:42,239
saturn leakage

76
00:02:42,239 --> 00:02:44,720
so first let's briefly go over the

77
00:02:44,720 --> 00:02:45,519
history

78
00:02:45,519 --> 00:02:47,440
because this year is actually the 25th

79
00:02:47,440 --> 00:02:48,879
anniversary

80
00:02:48,879 --> 00:02:50,959
of the proposal of hidden number problem

81
00:02:50,959 --> 00:02:52,239
which was originally

82
00:02:52,239 --> 00:02:54,800
defined by bonnie and ben carson and

83
00:02:54,800 --> 00:02:56,000
then so after that

84
00:02:56,000 --> 00:02:59,120
um two attack methods were proposed

85
00:02:59,120 --> 00:03:01,040
and since then uh there have been a

86
00:03:01,040 --> 00:03:04,000
bunch of uh railroad vulnerabilities

87
00:03:04,000 --> 00:03:06,000
that exploit the same hidden number

88
00:03:06,000 --> 00:03:07,040
problem

89
00:03:07,040 --> 00:03:09,040
and even looking at the last few years

90
00:03:09,040 --> 00:03:11,200
we have seen so many examples

91
00:03:11,200 --> 00:03:13,360
including the raccoon attack which was

92
00:03:13,360 --> 00:03:15,920
presented yesterday

93
00:03:15,920 --> 00:03:18,000
so as we see here uh the hidden number

94
00:03:18,000 --> 00:03:20,080
problem is still at the heart of many

95
00:03:20,080 --> 00:03:20,800
recent

96
00:03:20,800 --> 00:03:24,000
uh vulnerabilities in ecsa or even

97
00:03:24,000 --> 00:03:25,519
diffie-hellman key exchange

98
00:03:25,519 --> 00:03:27,840
implementations so this is why it's very

99
00:03:27,840 --> 00:03:29,200
important to study this

100
00:03:29,200 --> 00:03:31,519
problem and concretely evaluate the risk

101
00:03:31,519 --> 00:03:32,400
of

102
00:03:32,400 --> 00:03:36,480
random nonce bias

103
00:03:36,480 --> 00:03:39,120
so in this context our contribution is

104
00:03:39,120 --> 00:03:39,840
summarized

105
00:03:39,840 --> 00:03:42,400
as follows so first we gave an improved

106
00:03:42,400 --> 00:03:44,319
analysis of fourier analysis based

107
00:03:44,319 --> 00:03:45,360
attack

108
00:03:45,360 --> 00:03:47,360
originally due to blind baja in order to

109
00:03:47,360 --> 00:03:49,280
salvage the nava problem

110
00:03:49,280 --> 00:03:51,120
this allows us to exploit a very tiny

111
00:03:51,120 --> 00:03:52,560
amount of noise leakage

112
00:03:52,560 --> 00:03:55,280
per signature as a concrete application

113
00:03:55,280 --> 00:03:56,720
we discovered a normal

114
00:03:56,720 --> 00:03:58,400
class of cache timing attacks against

115
00:03:58,400 --> 00:03:59,519
the mongomery ladder scatter

116
00:03:59,519 --> 00:04:00,640
multiplication

117
00:04:00,640 --> 00:04:05,120
found in uh several versions of open ssl

118
00:04:05,120 --> 00:04:08,400
and the relic crypto toolkit finally we

119
00:04:08,400 --> 00:04:10,400
implemented a full secret key recovery

120
00:04:10,400 --> 00:04:12,080
attack

121
00:04:12,080 --> 00:04:14,560
against openness cell ecdsa instantiated

122
00:04:14,560 --> 00:04:17,440
over those two curves

123
00:04:17,440 --> 00:04:20,320
so how do we exploit the non-sleek age

124
00:04:20,320 --> 00:04:21,279
so as i mentioned

125
00:04:21,279 --> 00:04:22,960
uh there are essentially two different

126
00:04:22,960 --> 00:04:24,400
data approaches

127
00:04:24,400 --> 00:04:26,639
the first one which is more famous is

128
00:04:26,639 --> 00:04:28,400
the so-called lattice attack

129
00:04:28,400 --> 00:04:30,240
so the lattice attack is known to work

130
00:04:30,240 --> 00:04:31,680
very efficiently if you have a

131
00:04:31,680 --> 00:04:32,880
relatively

132
00:04:32,880 --> 00:04:34,400
large amount of bias or leakage

133
00:04:34,400 --> 00:04:36,800
information available and it works with

134
00:04:36,800 --> 00:04:37,360
very

135
00:04:37,360 --> 00:04:40,720
few signatures however if the

136
00:04:40,720 --> 00:04:42,720
bias information is really small like

137
00:04:42,720 --> 00:04:44,160
one bit or even less

138
00:04:44,160 --> 00:04:46,479
then essentially the required uh that

139
00:04:46,479 --> 00:04:48,479
this dimension gets large

140
00:04:48,479 --> 00:04:51,520
so in that situation actually the other

141
00:04:51,520 --> 00:04:54,880
approach for the analysis uh works more

142
00:04:54,880 --> 00:04:56,000
effectively

143
00:04:56,000 --> 00:04:57,759
however the major drawback of this

144
00:04:57,759 --> 00:05:00,320
approach is that it requires much larger

145
00:05:00,320 --> 00:05:02,080
data complexity compared to the lattice

146
00:05:02,080 --> 00:05:03,039
attack

147
00:05:03,039 --> 00:05:04,800
so of course the natural question is can

148
00:05:04,800 --> 00:05:07,280
we reduce the data complexity

149
00:05:07,280 --> 00:05:10,160
for fully analysis based attack work

150
00:05:10,160 --> 00:05:11,680
also we wanted to know how far we could

151
00:05:11,680 --> 00:05:12,479
go

152
00:05:12,479 --> 00:05:14,639
so concretely can we attack even less

153
00:05:14,639 --> 00:05:16,320
than one bit of noise leakage

154
00:05:16,320 --> 00:05:19,680
or signature so in this work

155
00:05:19,680 --> 00:05:21,199
we answer these questions in the

156
00:05:21,199 --> 00:05:23,039
positive

157
00:05:23,039 --> 00:05:24,880
so now uh here's the high level overview

158
00:05:24,880 --> 00:05:27,360
of blackham baja's attack framework

159
00:05:27,360 --> 00:05:29,120
so the first step is to quantify the

160
00:05:29,120 --> 00:05:30,560
bias of nonce

161
00:05:30,560 --> 00:05:34,240
uh by defining a suitable bias function

162
00:05:34,240 --> 00:05:36,240
here our first contribution is that we

163
00:05:36,240 --> 00:05:38,560
analyze the behavior of bias function

164
00:05:38,560 --> 00:05:40,400
when nouns case motion you can't beat

165
00:05:40,400 --> 00:05:42,479
the information a significant bit is

166
00:05:42,479 --> 00:05:45,280
biased with probability less than 1.

167
00:05:45,280 --> 00:05:47,120
then the second step is to find the

168
00:05:47,120 --> 00:05:48,479
candidate secret key

169
00:05:48,479 --> 00:05:50,240
which leads to the peak of this bias

170
00:05:50,240 --> 00:05:51,680
function

171
00:05:51,680 --> 00:05:53,280
then there's a critical intermediate

172
00:05:53,280 --> 00:05:55,360
step in which we have to find

173
00:05:55,360 --> 00:05:58,319
many small linear combinations of input

174
00:05:58,319 --> 00:05:59,360
signatures

175
00:05:59,360 --> 00:06:01,360
and this is important for detecting the

176
00:06:01,360 --> 00:06:04,479
bias peak correctly and efficiently

177
00:06:04,479 --> 00:06:07,039
here our second contribution is that we

178
00:06:07,039 --> 00:06:07,840
establish

179
00:06:07,840 --> 00:06:10,240
the unified time data trade-offs by

180
00:06:10,240 --> 00:06:11,039
applying

181
00:06:11,039 --> 00:06:13,280
algorithms for the generalized birthday

182
00:06:13,280 --> 00:06:14,080
program

183
00:06:14,080 --> 00:06:15,840
which often appears in symmetric key

184
00:06:15,840 --> 00:06:17,840
cryptology

185
00:06:17,840 --> 00:06:20,000
so in particular we employ the so-called

186
00:06:20,000 --> 00:06:21,280
kelly sum algorithm

187
00:06:21,280 --> 00:06:23,039
for solving the generalized birth step

188
00:06:23,039 --> 00:06:25,600
problem here's a high level overview

189
00:06:25,600 --> 00:06:27,759
so in this problem we are first given

190
00:06:27,759 --> 00:06:28,639
many uh

191
00:06:28,639 --> 00:06:31,039
integers and we divide them into four

192
00:06:31,039 --> 00:06:32,160
lists

193
00:06:32,160 --> 00:06:35,199
then as a first step now we first

194
00:06:35,199 --> 00:06:38,000
search for linear combinations of two

195
00:06:38,000 --> 00:06:38,479
which

196
00:06:38,479 --> 00:06:42,639
shares the most infant bits like this

197
00:06:42,639 --> 00:06:45,759
so now uh since now we know that most

198
00:06:45,759 --> 00:06:47,199
income beats are collided

199
00:06:47,199 --> 00:06:49,759
between those two lists if we take

200
00:06:49,759 --> 00:06:50,639
differences

201
00:06:50,639 --> 00:06:53,440
between them we can efficiently and with

202
00:06:53,440 --> 00:06:54,639
high probability

203
00:06:54,639 --> 00:06:57,360
uh can find a very small linear

204
00:06:57,360 --> 00:06:58,160
combinations

205
00:06:58,160 --> 00:07:01,280
four so we make use of this algorithm

206
00:07:01,280 --> 00:07:04,160
to solve the hidden number problem so

207
00:07:04,160 --> 00:07:05,440
actually

208
00:07:05,440 --> 00:07:08,160
thanks to the trade-off study of the

209
00:07:08,160 --> 00:07:10,319
kelly stem algorithm we can draw

210
00:07:10,319 --> 00:07:13,280
a similar trade of curves for each

211
00:07:13,280 --> 00:07:15,840
elliptic curve

212
00:07:15,840 --> 00:07:17,599
so these trade-off graphs essentially

213
00:07:17,599 --> 00:07:19,759
mean that if you can spend more time

214
00:07:19,759 --> 00:07:22,800
in black and bass attack side then you

215
00:07:22,800 --> 00:07:24,240
require much less

216
00:07:24,240 --> 00:07:27,520
data complexity and vice versa

217
00:07:27,520 --> 00:07:29,680
also in the paper we mostly focused on

218
00:07:29,680 --> 00:07:31,280
one bit leakage

219
00:07:31,280 --> 00:07:34,240
however if you are if you can make use

220
00:07:34,240 --> 00:07:35,039
of

221
00:07:35,039 --> 00:07:37,520
more than one bit leakage information

222
00:07:37,520 --> 00:07:38,160
actually

223
00:07:38,160 --> 00:07:39,520
it turned out that the further

224
00:07:39,520 --> 00:07:42,160
optimization is possible so in that case

225
00:07:42,160 --> 00:07:45,440
you can even amplify the input samples

226
00:07:45,440 --> 00:07:50,319
uh by exhaustive a kelly some search

227
00:07:50,800 --> 00:07:53,520
so then using this observation we

228
00:07:53,520 --> 00:07:54,720
implemented attack

229
00:07:54,720 --> 00:07:57,680
is a record so for example against uh

230
00:07:57,680 --> 00:07:59,039
p192

231
00:07:59,039 --> 00:08:01,759
curve with one bit bias we successfully

232
00:08:01,759 --> 00:08:02,560
recovered

233
00:08:02,560 --> 00:08:05,199
the secret signing key of ecdsa with

234
00:08:05,199 --> 00:08:07,120
only one bit bias

235
00:08:07,120 --> 00:08:10,240
and this was made possible by running

236
00:08:10,240 --> 00:08:12,400
our highly optimized parallel

237
00:08:12,400 --> 00:08:14,879
implementation on aws

238
00:08:14,879 --> 00:08:18,479
also the attack even worked with the

239
00:08:18,479 --> 00:08:21,599
presence of some errors

240
00:08:21,599 --> 00:08:23,039
also after we wrote the paper we

241
00:08:23,039 --> 00:08:25,120
conducted one additional experiment

242
00:08:25,120 --> 00:08:27,680
in which we assumed uh two bit bias is

243
00:08:27,680 --> 00:08:28,800
available

244
00:08:28,800 --> 00:08:31,039
so in this case it turned out that uh

245
00:08:31,039 --> 00:08:32,880
the blackhead bus attack works

246
00:08:32,880 --> 00:08:36,640
even as low as 1000 signatures as input

247
00:08:36,640 --> 00:08:38,320
so of course this attack parameter can

248
00:08:38,320 --> 00:08:39,679
be broken more efficiently

249
00:08:39,679 --> 00:08:42,080
with lattice attack which would require

250
00:08:42,080 --> 00:08:44,080
around 100 signatures

251
00:08:44,080 --> 00:08:45,920
but here the point is that the blah

252
00:08:45,920 --> 00:08:47,519
blast attack works

253
00:08:47,519 --> 00:08:50,880
and does not necessarily require

254
00:08:50,880 --> 00:08:52,800
as high as millions of billions of

255
00:08:52,800 --> 00:08:54,000
signatures it actually

256
00:08:54,000 --> 00:08:57,920
depends on the target attack parameter

257
00:08:57,920 --> 00:09:00,800
so a bit about solid channel leakage so

258
00:09:00,800 --> 00:09:02,560
ladder leak is a tiny

259
00:09:02,560 --> 00:09:04,959
tiny leakage from the montgomery ladder

260
00:09:04,959 --> 00:09:06,560
scatter multiplication

261
00:09:06,560 --> 00:09:08,399
i'm not going into the details but

262
00:09:08,399 --> 00:09:09,760
essentially in this work

263
00:09:09,760 --> 00:09:12,160
we identified a few different conditions

264
00:09:12,160 --> 00:09:12,959
such that

265
00:09:12,959 --> 00:09:15,200
the first iteration of mongomini ladder

266
00:09:15,200 --> 00:09:16,800
shows some more

267
00:09:16,800 --> 00:09:19,440
non-constant time behavior and which

268
00:09:19,440 --> 00:09:20,160
leads to

269
00:09:20,160 --> 00:09:22,000
the leakage of most unicorn beat

270
00:09:22,000 --> 00:09:23,519
information

271
00:09:23,519 --> 00:09:26,480
and we conducted experiments and by

272
00:09:26,480 --> 00:09:28,399
making use of flush and reload cache

273
00:09:28,399 --> 00:09:30,160
timing attack techniques

274
00:09:30,160 --> 00:09:32,720
and eventually we are able to recover

275
00:09:32,720 --> 00:09:34,240
the most incompetent information with

276
00:09:34,240 --> 00:09:35,440
high probability

277
00:09:35,440 --> 00:09:38,640
however it was not 100 percent so

278
00:09:38,640 --> 00:09:40,240
that's why we had to account for the

279
00:09:40,240 --> 00:09:42,000
effect of errors in the

280
00:09:42,000 --> 00:09:45,279
leakage trace and

281
00:09:45,279 --> 00:09:48,480
uh to count about the counter measure

282
00:09:48,480 --> 00:09:51,040
we reported the vulnerability uh in

283
00:09:51,040 --> 00:09:51,920
december

284
00:09:51,920 --> 00:09:55,279
2019 and this was already patched

285
00:09:55,279 --> 00:09:59,120
last year uh by kind of randomizing the

286
00:09:59,120 --> 00:10:00,160
z coordinate

287
00:10:00,160 --> 00:10:02,399
of the base point uh as an input to the

288
00:10:02,399 --> 00:10:05,839
scalar multiplication

289
00:10:06,160 --> 00:10:09,680
so to conclude uh in this work uh so of

290
00:10:09,680 --> 00:10:10,560
course

291
00:10:10,560 --> 00:10:13,200
i want to stress that ecds unknowns is

292
00:10:13,200 --> 00:10:14,560
extremely sensitive

293
00:10:14,560 --> 00:10:17,440
and as we show uh even less than one bit

294
00:10:17,440 --> 00:10:18,959
of noise leakage by signature is

295
00:10:18,959 --> 00:10:19,680
exploitable

296
00:10:19,680 --> 00:10:22,240
obvious uh quite a few signatures as

297
00:10:22,240 --> 00:10:23,680
input

298
00:10:23,680 --> 00:10:25,600
and of course it's not just because of

299
00:10:25,600 --> 00:10:27,680
later league in general

300
00:10:27,680 --> 00:10:29,600
this is really sensitive and it's

301
00:10:29,600 --> 00:10:31,200
important to study the hidden number

302
00:10:31,200 --> 00:10:32,959
problem because it's uh

303
00:10:32,959 --> 00:10:34,880
it appears in many different contexts

304
00:10:34,880 --> 00:10:37,120
nowadays

305
00:10:37,120 --> 00:10:39,519
also in this work we observe some

306
00:10:39,519 --> 00:10:40,800
interesting connection between the

307
00:10:40,800 --> 00:10:42,079
hidden number problem

308
00:10:42,079 --> 00:10:43,680
and the generalized prostate problem

309
00:10:43,680 --> 00:10:46,480
which helps us reducing the required

310
00:10:46,480 --> 00:10:50,320
signatures for blah blah attack to work

311
00:10:50,320 --> 00:10:51,600
okay so thank you very much for your

312
00:10:51,600 --> 00:10:53,360
attention if you have any questions i

313
00:10:53,360 --> 00:10:54,959
would be happy to answer

314
00:10:54,959 --> 00:10:56,640
yeah excellent thank you the excellent

315
00:10:56,640 --> 00:10:58,000
talk yeah we do have a couple of

316
00:10:58,000 --> 00:10:59,120
questions but i do want to ask a

317
00:10:59,120 --> 00:11:00,720
question first just to clarify

318
00:11:00,720 --> 00:11:02,560
you talked about ecdsa throughout your

319
00:11:02,560 --> 00:11:04,399
uh throughout the lecture but uh this

320
00:11:04,399 --> 00:11:06,079
presumably this equally applies to

321
00:11:06,079 --> 00:11:08,480
schnorr signatures

322
00:11:08,480 --> 00:11:11,120
exactly so basically the hidden number

323
00:11:11,120 --> 00:11:11,680
problem

324
00:11:11,680 --> 00:11:13,360
also applies to snow signatures so the

325
00:11:13,360 --> 00:11:14,800
same exact attack

326
00:11:14,800 --> 00:11:16,800
could apply to snow signature with the

327
00:11:16,800 --> 00:11:18,399
same amount of bias information

328
00:11:18,399 --> 00:11:20,320
and is there any any analysis to show to

329
00:11:20,320 --> 00:11:21,519
the defense actually

330
00:11:21,519 --> 00:11:23,279
the randomizing the z coordinate does

331
00:11:23,279 --> 00:11:25,360
that actually protect against the attack

332
00:11:25,360 --> 00:11:28,880
there'll be attacks on that uh yeah

333
00:11:28,880 --> 00:11:32,079
yeah so basically uh by randomizing the

334
00:11:32,079 --> 00:11:35,519
base point um the leakage information

335
00:11:35,519 --> 00:11:36,880
that we observed during the first

336
00:11:36,880 --> 00:11:37,839
iteration

337
00:11:37,839 --> 00:11:40,560
actually disappears so we experimentally

338
00:11:40,560 --> 00:11:41,600
confirm that

339
00:11:41,600 --> 00:11:44,240
this actually uh throats our ladder

340
00:11:44,240 --> 00:11:45,200
league attack

341
00:11:45,200 --> 00:11:47,200
oh wonderful okay so let's see so we

342
00:11:47,200 --> 00:11:48,560
have a couple of questions uh so

343
00:11:48,560 --> 00:11:51,839
leo asks uh does this apply to uh to

344
00:11:51,839 --> 00:11:54,800
lpn or lwe like like questions using by

345
00:11:54,800 --> 00:11:55,519
using the

346
00:11:55,519 --> 00:11:58,880
bkw algorithm

347
00:11:59,120 --> 00:12:00,880
um so that's actually interesting

348
00:12:00,880 --> 00:12:02,480
question so

349
00:12:02,480 --> 00:12:06,160
i'm not so familiar with uh bkw

350
00:12:06,160 --> 00:12:08,959
but at least on the side of some

351
00:12:08,959 --> 00:12:10,000
algorithm

352
00:12:10,000 --> 00:12:12,720
we mostly reuse the existing ksm

353
00:12:12,720 --> 00:12:14,240
algorithm due to

354
00:12:14,240 --> 00:12:17,600
how how great grammar draw so

355
00:12:17,600 --> 00:12:21,040
at least if that applies to

356
00:12:21,040 --> 00:12:25,279
lwd maybe you can use that but uh

357
00:12:25,279 --> 00:12:27,920
i'm not completely sure about uh yeah

358
00:12:27,920 --> 00:12:28,959
okay question

359
00:12:28,959 --> 00:12:30,079
i see there are some questions about

360
00:12:30,079 --> 00:12:31,760
whether blakenbacher's fury analysis

361
00:12:31,760 --> 00:12:33,200
method was ever published

362
00:12:33,200 --> 00:12:36,240
and uh looks like djb published uh

363
00:12:36,240 --> 00:12:37,200
posted a link

364
00:12:37,200 --> 00:12:40,560
on the in the in the chat

365
00:12:40,560 --> 00:12:43,440
so so we have that uh let's see any

366
00:12:43,440 --> 00:12:45,120
other questions

367
00:12:45,120 --> 00:12:47,839
on ladder league

368
00:12:48,959 --> 00:12:51,120
um yeah that was a very clear talk i

369
00:12:51,120 --> 00:12:53,120
don't see any other questions

370
00:12:53,120 --> 00:12:55,760
so yeah so thank you thank you very much

371
00:12:55,760 --> 00:12:56,160
uh

372
00:12:56,160 --> 00:12:58,240
and yeah very much yeah keep up the good

373
00:12:58,240 --> 00:13:00,800
work and uh we can move on to the next

374
00:13:00,800 --> 00:13:04,320
next talk okay so let's see so our next

375
00:13:04,320 --> 00:13:04,880
talk

376
00:13:04,880 --> 00:13:08,560
is on on music music two

377
00:13:08,560 --> 00:13:10,480
a simple two round schnoor multi

378
00:13:10,480 --> 00:13:12,560
signature by jonas nick

379
00:13:12,560 --> 00:13:15,279
team ruffing and janik siren and tim

380
00:13:15,279 --> 00:13:16,800
ruffing is going to give the talk

381
00:13:16,800 --> 00:13:19,760
i'm looking forward to the talk tim so

382
00:13:19,760 --> 00:13:21,920
the floor is yours

383
00:13:21,920 --> 00:13:23,839
hey can you hear me and see my slides

384
00:13:23,839 --> 00:13:25,279
yeah absolutely everything

385
00:13:25,279 --> 00:13:28,000
yeah great okay so let's get it started

386
00:13:28,000 --> 00:13:29,680
so this is about music too

387
00:13:29,680 --> 00:13:32,000
uh simple two rounds no multi signatures

388
00:13:32,000 --> 00:13:33,760
and this is joint work with jonas nick

389
00:13:33,760 --> 00:13:34,079
and

390
00:13:34,079 --> 00:13:36,240
yannick sarah and jonas will also be in

391
00:13:36,240 --> 00:13:38,880
sulup to answer questions as i will be

392
00:13:38,880 --> 00:13:40,320
of course

393
00:13:40,320 --> 00:13:44,320
um so the idea in multi-signatures is

394
00:13:44,320 --> 00:13:45,120
that

395
00:13:45,120 --> 00:13:46,959
enzymes can get together and produce a

396
00:13:46,959 --> 00:13:49,440
single signature on a single message

397
00:13:49,440 --> 00:13:51,040
and just to be clear for this talk when

398
00:13:51,040 --> 00:13:53,279
i talk about multi signatures what i

399
00:13:53,279 --> 00:13:55,839
mean is n of n signatures

400
00:13:55,839 --> 00:13:58,480
and not uh the more general setting of

401
00:13:58,480 --> 00:13:59,839
threshold signatures where you can have

402
00:13:59,839 --> 00:14:00,800
a threshold t

403
00:14:00,800 --> 00:14:02,560
that is smaller than n and have

404
00:14:02,560 --> 00:14:04,720
something like a t of n signatures

405
00:14:04,720 --> 00:14:09,040
so the focus of this talk is n of n

406
00:14:09,040 --> 00:14:11,199
and the motivation for our work is

407
00:14:11,199 --> 00:14:13,199
multi-signatures for use in bitcoin and

408
00:14:13,199 --> 00:14:14,320
cryptocurrencies

409
00:14:14,320 --> 00:14:16,079
because they make it very easy to

410
00:14:16,079 --> 00:14:19,120
organize shared ownership of bitcoin

411
00:14:19,120 --> 00:14:21,920
and this has applications in for example

412
00:14:21,920 --> 00:14:24,399
in the secure storage of coins but also

413
00:14:24,399 --> 00:14:26,480
in more sophisticated applications such

414
00:14:26,480 --> 00:14:27,839
as payment channels think of the

415
00:14:27,839 --> 00:14:29,040
lightning network

416
00:14:29,040 --> 00:14:32,240
or federated side chains and so on so as

417
00:14:32,240 --> 00:14:33,120
soon as you have

418
00:14:33,120 --> 00:14:35,440
multi-signatures in bitcoin you can

419
00:14:35,440 --> 00:14:37,120
build a lot of interesting applications

420
00:14:37,120 --> 00:14:39,600
on top of them

421
00:14:39,600 --> 00:14:42,399
and the context for our work is the

422
00:14:42,399 --> 00:14:44,079
hopefully upcoming introduction

423
00:14:44,079 --> 00:14:47,040
of signatures in bitcoin so the idea

424
00:14:47,040 --> 00:14:47,920
here is to have

425
00:14:47,920 --> 00:14:51,279
on-chain support for the verification of

426
00:14:51,279 --> 00:14:53,600
snore signatures so these are simple

427
00:14:53,600 --> 00:14:55,040
ordinary single

428
00:14:55,040 --> 00:15:00,320
signer signatures and one motivation to

429
00:15:00,320 --> 00:15:02,720
have signatures instead of easy dsa

430
00:15:02,720 --> 00:15:05,199
what's currently used in bitcoin

431
00:15:05,199 --> 00:15:06,959
is that they allow for easier

432
00:15:06,959 --> 00:15:08,880
construction of advanced signing

433
00:15:08,880 --> 00:15:10,240
protocols

434
00:15:10,240 --> 00:15:12,560
so once we have snow signatures we can

435
00:15:12,560 --> 00:15:14,560
build uh

436
00:15:14,560 --> 00:15:16,399
multi signatures and other interesting

437
00:15:16,399 --> 00:15:18,399
primitives for example blinds

438
00:15:18,399 --> 00:15:20,240
threshold signatures or even schnapp

439
00:15:20,240 --> 00:15:22,240
line signatures

440
00:15:22,240 --> 00:15:24,000
and on top of them and we can run those

441
00:15:24,000 --> 00:15:26,959
protocol in the off chain manner

442
00:15:26,959 --> 00:15:29,759
and this layer design is pretty nice

443
00:15:29,759 --> 00:15:30,480
because

444
00:15:30,480 --> 00:15:32,320
first of all we keep the consensus layer

445
00:15:32,320 --> 00:15:33,680
simple so the only thing we

446
00:15:33,680 --> 00:15:36,800
do there is introduce verification of

447
00:15:36,800 --> 00:15:38,399
snow signatures

448
00:15:38,399 --> 00:15:40,399
and remember that the consensus layer

449
00:15:40,399 --> 00:15:42,160
this is the hard thing

450
00:15:42,160 --> 00:15:45,199
um to change in bitcoin so um we only do

451
00:15:45,199 --> 00:15:46,560
a small change there but

452
00:15:46,560 --> 00:15:48,880
then we can run all of our uh

453
00:15:48,880 --> 00:15:50,480
interesting applications on top of this

454
00:15:50,480 --> 00:15:52,320
change

455
00:15:52,320 --> 00:15:55,440
and the second thing is if the only

456
00:15:55,440 --> 00:15:57,360
data that ends up on chain is a snore

457
00:15:57,360 --> 00:16:00,000
signature or a snow public key

458
00:16:00,000 --> 00:16:01,519
then this is also great for privacy

459
00:16:01,519 --> 00:16:03,600
because it hides the fact that we are

460
00:16:03,600 --> 00:16:04,320
running uh

461
00:16:04,320 --> 00:16:07,600
our advanced protocols so if you only

462
00:16:07,600 --> 00:16:08,480
see uh

463
00:16:08,480 --> 00:16:11,199
the signature in the end um you can't

464
00:16:11,199 --> 00:16:12,079
tell that

465
00:16:12,079 --> 00:16:14,880
uh i've been using a multi-signature

466
00:16:14,880 --> 00:16:16,240
scheme in the background so this is

467
00:16:16,240 --> 00:16:18,240
great for privacy too

468
00:16:18,240 --> 00:16:20,639
so in order to make that work what we

469
00:16:20,639 --> 00:16:22,959
need is a multi-signature scheme

470
00:16:22,959 --> 00:16:26,079
um that has the property that the output

471
00:16:26,079 --> 00:16:27,519
of the scheme looks like an ordinary

472
00:16:27,519 --> 00:16:29,040
schnaw signature

473
00:16:29,040 --> 00:16:31,120
and this has two parts to it the first

474
00:16:31,120 --> 00:16:32,320
part is

475
00:16:32,320 --> 00:16:34,240
of course creating the signature so here

476
00:16:34,240 --> 00:16:36,480
we need an interactive protocol

477
00:16:36,480 --> 00:16:38,959
that we can run with our set of end

478
00:16:38,959 --> 00:16:40,880
signers

479
00:16:40,880 --> 00:16:42,320
but we also need to care about the

480
00:16:42,320 --> 00:16:44,079
public key and here we need some method

481
00:16:44,079 --> 00:16:45,920
to

482
00:16:45,920 --> 00:16:49,120
be able to get a bunch of

483
00:16:49,120 --> 00:16:52,160
public keys of individual signers and be

484
00:16:52,160 --> 00:16:53,920
able to aggregate them into a single

485
00:16:53,920 --> 00:16:55,759
public key that again looks like a

486
00:16:55,759 --> 00:16:58,800
single normal snow public key

487
00:16:58,800 --> 00:17:00,480
and in order to be practical we also

488
00:17:00,480 --> 00:17:01,680
want this algorithm to be

489
00:17:01,680 --> 00:17:05,520
non-interactive and public

490
00:17:05,520 --> 00:17:08,640
so let's go let's try to construct this

491
00:17:08,640 --> 00:17:11,199
so first let's have a look at signatures

492
00:17:11,199 --> 00:17:12,959
again

493
00:17:12,959 --> 00:17:14,799
pretty quickly so we are in the discrete

494
00:17:14,799 --> 00:17:16,640
logarithm setting so the secret key is a

495
00:17:16,640 --> 00:17:18,079
scalar the public key is the

496
00:17:18,079 --> 00:17:21,119
corresponding group element g to the x

497
00:17:21,119 --> 00:17:23,439
what designer does it it draws the nonce

498
00:17:23,439 --> 00:17:24,240
so you

499
00:17:24,240 --> 00:17:25,919
probably now have learned what nonsense

500
00:17:25,919 --> 00:17:28,640
are from the last talk in ecdsa which is

501
00:17:28,640 --> 00:17:31,360
very similar here

502
00:17:31,360 --> 00:17:33,200
so so designer draws the secret nonce

503
00:17:33,200 --> 00:17:35,360
computes the public part

504
00:17:35,360 --> 00:17:38,000
um then uses this to compute the via

505
00:17:38,000 --> 00:17:39,600
journey style

506
00:17:39,600 --> 00:17:42,080
challenge by hashing the public key the

507
00:17:42,080 --> 00:17:43,679
public nonce and the message

508
00:17:43,679 --> 00:17:46,640
so this is a um signature of knowledge

509
00:17:46,640 --> 00:17:47,679
construction

510
00:17:47,679 --> 00:17:50,480
and then designer solves this challenge

511
00:17:50,480 --> 00:17:51,200
by giving

512
00:17:51,200 --> 00:17:54,080
the element s which is the secret key

513
00:17:54,080 --> 00:17:56,240
times the challenge blinded by

514
00:17:56,240 --> 00:17:58,640
the secret notes and then the signature

515
00:17:58,640 --> 00:17:59,280
is just

516
00:17:59,280 --> 00:18:03,120
r and s okay and revocation

517
00:18:03,120 --> 00:18:05,600
is very similar in a sense so it

518
00:18:05,600 --> 00:18:07,120
recomputes the hash

519
00:18:07,120 --> 00:18:08,880
as a challenge and then it checks this

520
00:18:08,880 --> 00:18:10,720
main equation here in terms of public

521
00:18:10,720 --> 00:18:12,720
elements

522
00:18:12,720 --> 00:18:14,799
and if you look at this uh at this main

523
00:18:14,799 --> 00:18:15,840
equation

524
00:18:15,840 --> 00:18:18,640
uh it's very nicely linear and you could

525
00:18:18,640 --> 00:18:20,640
say it's linear in s it's linear on x

526
00:18:20,640 --> 00:18:21,840
and linear and r

527
00:18:21,840 --> 00:18:24,080
and of course this holds for the public

528
00:18:24,080 --> 00:18:25,440
part as well as for the

529
00:18:25,440 --> 00:18:26,840
secret part because those are

530
00:18:26,840 --> 00:18:28,480
homomorphic

531
00:18:28,480 --> 00:18:30,880
and and this nice linearity forms the

532
00:18:30,880 --> 00:18:32,400
foundation of every

533
00:18:32,400 --> 00:18:34,880
advanced schnorr signature protocol so

534
00:18:34,880 --> 00:18:36,799
if we want to build

535
00:18:36,799 --> 00:18:38,799
multi-signatures from this idea we first

536
00:18:38,799 --> 00:18:40,559
need a key aggregation method so let's

537
00:18:40,559 --> 00:18:42,160
say we have we have two signers with

538
00:18:42,160 --> 00:18:43,440
public key pk1

539
00:18:43,440 --> 00:18:47,679
pk2 and uh the simple thing we can do

540
00:18:47,679 --> 00:18:49,280
for these public keys is to is to

541
00:18:49,280 --> 00:18:51,120
multiply them so let's let's do this for

542
00:18:51,120 --> 00:18:52,400
now

543
00:18:52,400 --> 00:18:54,080
we get the aggregate key which is the

544
00:18:54,080 --> 00:18:57,840
multiplication of those two keys

545
00:18:58,240 --> 00:18:59,520
and when it comes to the interactive

546
00:18:59,520 --> 00:19:01,200
signing protocol the idea is that both

547
00:19:01,200 --> 00:19:02,000
signers

548
00:19:02,000 --> 00:19:04,400
contribute their shares of the nons so

549
00:19:04,400 --> 00:19:06,000
both signers send their

550
00:19:06,000 --> 00:19:08,880
public nons and then we can again

551
00:19:08,880 --> 00:19:10,720
multiply those nonsenses together

552
00:19:10,720 --> 00:19:15,200
combined nouns are one or two

553
00:19:15,440 --> 00:19:18,000
we then can compute a single combined

554
00:19:18,000 --> 00:19:19,280
challenge and then

555
00:19:19,280 --> 00:19:21,360
every signer can solve this challenge on

556
00:19:21,360 --> 00:19:24,320
its own using his notes

557
00:19:24,320 --> 00:19:27,840
and in the end what we will get is

558
00:19:27,840 --> 00:19:31,280
a snow signature which looks like r1 r2

559
00:19:31,280 --> 00:19:34,400
and here we get s1 plus s2

560
00:19:34,400 --> 00:19:37,760
so um and this is a just an ordinary

561
00:19:37,760 --> 00:19:39,440
signature so the protocol as you see it

562
00:19:39,440 --> 00:19:41,440
here it's functionally perfectly correct

563
00:19:41,440 --> 00:19:43,440
it works it produces a snow signature

564
00:19:43,440 --> 00:19:45,360
but don't do this at home because it's

565
00:19:45,360 --> 00:19:47,440
not at all secure and there are multiple

566
00:19:47,440 --> 00:19:50,160
reasons why this is not secure

567
00:19:50,160 --> 00:19:52,559
the first reason is raw key attacks

568
00:19:52,559 --> 00:19:53,840
which have been known for

569
00:19:53,840 --> 00:19:57,360
uh for decades i think where one of the

570
00:19:57,360 --> 00:19:58,400
zionists

571
00:19:58,400 --> 00:20:01,280
choses his public key depending on the

572
00:20:01,280 --> 00:20:03,200
public key of the other signers

573
00:20:03,200 --> 00:20:05,280
and this has been dealt with in other

574
00:20:05,280 --> 00:20:07,280
works for example in

575
00:20:07,280 --> 00:20:10,559
music one or let's on music i call it

576
00:20:10,559 --> 00:20:11,919
music one here right to

577
00:20:11,919 --> 00:20:14,320
to make sure not to confuse it with our

578
00:20:14,320 --> 00:20:16,880
work music too

579
00:20:16,880 --> 00:20:20,320
and a very recent and neat defense

580
00:20:20,320 --> 00:20:22,320
defense against rookie attacks is just

581
00:20:22,320 --> 00:20:24,080
to instead of

582
00:20:24,080 --> 00:20:26,159
only multiply the public keys have some

583
00:20:26,159 --> 00:20:27,520
additional exponents

584
00:20:27,520 --> 00:20:30,720
um a here which are derived via a

585
00:20:30,720 --> 00:20:33,120
hash function this is already enough to

586
00:20:33,120 --> 00:20:34,400
um

587
00:20:34,400 --> 00:20:37,200
to defend against rookie attacks and we

588
00:20:37,200 --> 00:20:39,600
don't need to to care about this further

589
00:20:39,600 --> 00:20:42,240
but another thing that music one also

590
00:20:42,240 --> 00:20:43,520
needs to do is

591
00:20:43,520 --> 00:20:46,559
to introduce a third round and this is a

592
00:20:46,559 --> 00:20:48,000
pre-commitment round where

593
00:20:48,000 --> 00:20:51,280
the individual signers first

594
00:20:51,280 --> 00:20:52,880
send commitments to their announcers

595
00:20:52,880 --> 00:20:54,400
before they reveal the nonsense so this

596
00:20:54,400 --> 00:20:55,760
is basically a commit and revealed

597
00:20:55,760 --> 00:20:57,039
protocol

598
00:20:57,039 --> 00:21:00,080
and this is to to get security

599
00:21:00,080 --> 00:21:02,559
in parallel sessions whereas if you drop

600
00:21:02,559 --> 00:21:03,280
this round

601
00:21:03,280 --> 00:21:06,880
then the protocol becomes vulnerable to

602
00:21:06,880 --> 00:21:08,960
attacks based on based on wagner's

603
00:21:08,960 --> 00:21:10,480
algorithm

604
00:21:10,480 --> 00:21:12,159
and this pre-commitment round was

605
00:21:12,159 --> 00:21:15,200
already introduced in 2006

606
00:21:15,200 --> 00:21:18,240
by bellar and nevin at ccs and they have

607
00:21:18,240 --> 00:21:21,200
many uh attempts to get rid of this

608
00:21:21,200 --> 00:21:23,360
round and some protocols proposed but

609
00:21:23,360 --> 00:21:24,640
all of this

610
00:21:24,640 --> 00:21:26,080
all of these attempts have been shown to

611
00:21:26,080 --> 00:21:28,080
be broken by

612
00:21:28,080 --> 00:21:30,480
the excellent work by tries at all at

613
00:21:30,480 --> 00:21:32,000
oakland 19.

614
00:21:32,000 --> 00:21:33,679
um so it's basically it was an open

615
00:21:33,679 --> 00:21:35,360
problem um

616
00:21:35,360 --> 00:21:37,280
how to get rid of this round and in this

617
00:21:37,280 --> 00:21:38,799
work

618
00:21:38,799 --> 00:21:41,200
this is exactly the thing that we tackle

619
00:21:41,200 --> 00:21:42,400
so

620
00:21:42,400 --> 00:21:45,360
in our protocol music two so first of

621
00:21:45,360 --> 00:21:45,840
all the

622
00:21:45,840 --> 00:21:48,080
key aggregation uh looks exactly the

623
00:21:48,080 --> 00:21:50,000
same as in music one so we don't modify

624
00:21:50,000 --> 00:21:50,640
this

625
00:21:50,640 --> 00:21:51,840
but instead of having the spread

626
00:21:51,840 --> 00:21:54,080
commitment what we do instead is we let

627
00:21:54,080 --> 00:21:55,520
every signer send

628
00:21:55,520 --> 00:21:58,559
two nonces let's call them pre-nonces

629
00:21:58,559 --> 00:21:59,919
for now

630
00:21:59,919 --> 00:22:02,640
and then the actual nouns that the

631
00:22:02,640 --> 00:22:04,480
assigners will use is now a random

632
00:22:04,480 --> 00:22:06,080
linear combination of these two

633
00:22:06,080 --> 00:22:07,120
prenounces

634
00:22:07,120 --> 00:22:09,120
and the randomness here is again derived

635
00:22:09,120 --> 00:22:12,159
via a hash function so this is actually

636
00:22:12,159 --> 00:22:14,240
pretty similar to what we do above here

637
00:22:14,240 --> 00:22:15,760
it's not exactly the same but it's a

638
00:22:15,760 --> 00:22:17,520
similar idea

639
00:22:17,520 --> 00:22:18,960
and now the rest of the protocol is

640
00:22:18,960 --> 00:22:20,559
exactly the same so we can

641
00:22:20,559 --> 00:22:23,760
again compute the combined challenge

642
00:22:23,760 --> 00:22:27,200
and this designers can send their s

643
00:22:27,200 --> 00:22:29,760
values and then we get a signature

644
00:22:29,760 --> 00:22:31,679
and so as you can see this is a very

645
00:22:31,679 --> 00:22:33,760
simple protocol um the only thing

646
00:22:33,760 --> 00:22:36,320
or only changes as opposed to the music

647
00:22:36,320 --> 00:22:38,720
one protocol are in the blue text and

648
00:22:38,720 --> 00:22:40,559
yeah it's still simple right we just

649
00:22:40,559 --> 00:22:42,240
send one group element more

650
00:22:42,240 --> 00:22:45,280
and we have one exponentiation more here

651
00:22:45,280 --> 00:22:47,360
but this is a very very practical

652
00:22:47,360 --> 00:22:49,120
protocol and we get

653
00:22:49,120 --> 00:22:52,480
we still get concurrent security

654
00:22:52,480 --> 00:22:55,280
but now you can ask okay so but if you

655
00:22:55,280 --> 00:22:56,799
still need to run an interactive

656
00:22:56,799 --> 00:22:58,159
protocol is two rounds

657
00:22:58,159 --> 00:23:00,400
so much uh better than three rounds

658
00:23:00,400 --> 00:23:03,360
right i mean interactivity is bad so

659
00:23:03,360 --> 00:23:04,720
um it doesn't really matter if you have

660
00:23:04,720 --> 00:23:07,039
two or three rounds but my answer here

661
00:23:07,039 --> 00:23:08,880
is that

662
00:23:08,880 --> 00:23:10,799
actually music too is even nicer because

663
00:23:10,799 --> 00:23:12,559
it has the property that the first round

664
00:23:12,559 --> 00:23:14,159
can be performed without knowing the

665
00:23:14,159 --> 00:23:15,280
message to sign

666
00:23:15,280 --> 00:23:16,799
and this makes signing effectively

667
00:23:16,799 --> 00:23:18,320
non-interactive because you can

668
00:23:18,320 --> 00:23:19,520
pre-share the nonsense

669
00:23:19,520 --> 00:23:20,960
so for example if you have a lightning

670
00:23:20,960 --> 00:23:22,880
channel between two participants

671
00:23:22,880 --> 00:23:25,520
you can pre-share some prenounces when

672
00:23:25,520 --> 00:23:26,960
you set up the channel and then as soon

673
00:23:26,960 --> 00:23:28,159
as a message

674
00:23:28,159 --> 00:23:30,880
arrives that you want to sign signing is

675
00:23:30,880 --> 00:23:32,240
just an additional round

676
00:23:32,240 --> 00:23:33,679
in fact if you have two parties it's

677
00:23:33,679 --> 00:23:36,240
just one additional message and this

678
00:23:36,240 --> 00:23:38,559
property is a novel property in a

679
00:23:38,559 --> 00:23:40,000
discrete logarithm setting without

680
00:23:40,000 --> 00:23:41,679
pairings and

681
00:23:41,679 --> 00:23:43,919
i claim you probably can't do better

682
00:23:43,919 --> 00:23:45,760
than this so it would be very

683
00:23:45,760 --> 00:23:50,159
would be a major breakthrough to get a

684
00:23:50,159 --> 00:23:51,760
fully non-interactive scheme without

685
00:23:51,760 --> 00:23:53,440
pairings of course if you have pairings

686
00:23:53,440 --> 00:23:55,120
then you can use bls and everything is

687
00:23:55,120 --> 00:23:56,720
nice but this is not the setting that we

688
00:23:56,720 --> 00:23:58,480
work in

689
00:23:58,480 --> 00:24:00,640
okay so to wrap up our key technical

690
00:24:00,640 --> 00:24:02,320
idea is that every designer uses a

691
00:24:02,320 --> 00:24:04,320
random linear combination of multiple

692
00:24:04,320 --> 00:24:06,080
prenatals as a nonce

693
00:24:06,080 --> 00:24:07,679
and i think this is the right place to

694
00:24:07,679 --> 00:24:10,159
mention that in very interestingly this

695
00:24:10,159 --> 00:24:11,120
idea

696
00:24:11,120 --> 00:24:13,440
was discovered independently by three

697
00:24:13,440 --> 00:24:14,240
different

698
00:24:14,240 --> 00:24:16,880
groups for example there's also the

699
00:24:16,880 --> 00:24:18,720
frost paper by commonwealth and goldberg

700
00:24:18,720 --> 00:24:20,080
and as the

701
00:24:20,080 --> 00:24:21,679
there's a paper by alpha and purchased

702
00:24:21,679 --> 00:24:23,760
it

703
00:24:23,919 --> 00:24:26,000
all work in the in slightly different

704
00:24:26,000 --> 00:24:27,919
settings for example frost is in the

705
00:24:27,919 --> 00:24:29,360
more general threshold

706
00:24:29,360 --> 00:24:31,679
setting and they all have slightly

707
00:24:31,679 --> 00:24:33,440
different provable security guarantees

708
00:24:33,440 --> 00:24:35,840
but they all discovered the same

709
00:24:35,840 --> 00:24:39,760
key idea to use multiple pre-nances to

710
00:24:39,760 --> 00:24:42,879
obtain a two-round scheme

711
00:24:42,960 --> 00:24:45,360
so to conclude music 2 is a

712
00:24:45,360 --> 00:24:46,880
multi-signature schemes where

713
00:24:46,880 --> 00:24:48,720
a multi-signature scheme where

714
00:24:48,720 --> 00:24:49,760
signatures look like all the

715
00:24:49,760 --> 00:24:51,120
navigational signatures

716
00:24:51,120 --> 00:24:52,880
that makes them compact and the

717
00:24:52,880 --> 00:24:55,360
verification is fast

718
00:24:55,360 --> 00:24:57,440
it's a very practical protocol and it's

719
00:24:57,440 --> 00:24:59,679
simple it has two rounds

720
00:24:59,679 --> 00:25:02,240
and in fact you can pre-compute uh the

721
00:25:02,240 --> 00:25:03,840
first round without knowing the message

722
00:25:03,840 --> 00:25:05,039
which makes signing almost

723
00:25:05,039 --> 00:25:07,200
non-interactive

724
00:25:07,200 --> 00:25:10,159
and for provable security we prove the

725
00:25:10,159 --> 00:25:11,679
security of this protocol under

726
00:25:11,679 --> 00:25:13,360
concurrent sessions in the random oracle

727
00:25:13,360 --> 00:25:15,200
model plus algebraic group model under

728
00:25:15,200 --> 00:25:15,679
the

729
00:25:15,679 --> 00:25:18,080
one more discrete logarithm assumption

730
00:25:18,080 --> 00:25:19,520
and very interestingly so

731
00:25:19,520 --> 00:25:21,120
this what i what i mentioned here if you

732
00:25:21,120 --> 00:25:23,520
have this combination of rom

733
00:25:23,520 --> 00:25:26,559
plus agm plus omdl you can get the

734
00:25:26,559 --> 00:25:28,000
security proof for the version

735
00:25:28,000 --> 00:25:30,240
that i shown you with two pre-nonces

736
00:25:30,240 --> 00:25:32,159
interestingly if you want to drop the

737
00:25:32,159 --> 00:25:34,480
engine brake group model you can still

738
00:25:34,480 --> 00:25:35,679
get a security proof

739
00:25:35,679 --> 00:25:38,240
but then you need four pre-nonces

740
00:25:38,240 --> 00:25:39,760
there's a very interesting

741
00:25:39,760 --> 00:25:41,440
story to tell here but of course i don't

742
00:25:41,440 --> 00:25:42,960
have time to do this

743
00:25:42,960 --> 00:25:44,880
so if you're interested please have a

744
00:25:44,880 --> 00:25:46,159
look at our

745
00:25:46,159 --> 00:25:48,960
preprint well thanks for your attention

746
00:25:48,960 --> 00:25:49,440
i'm

747
00:25:49,440 --> 00:25:52,480
happy to answer your questions great

748
00:25:52,480 --> 00:25:53,120
thanks tim

749
00:25:53,120 --> 00:25:55,679
uh this is this is really cool um now

750
00:25:55,679 --> 00:25:57,120
i'm also very curious about the

751
00:25:57,120 --> 00:25:58,159
interesting story

752
00:25:58,159 --> 00:25:59,679
but let's see if there are any if there

753
00:25:59,679 --> 00:26:01,440
are any questions and then if if not

754
00:26:01,440 --> 00:26:02,480
then maybe you can tell us the

755
00:26:02,480 --> 00:26:03,840
interesting story

756
00:26:03,840 --> 00:26:06,240
uh so let's see so uh why do you call it

757
00:26:06,240 --> 00:26:07,600
multi-signature enough threshold

758
00:26:07,600 --> 00:26:08,400
signature

759
00:26:08,400 --> 00:26:10,000
for the threshold access structure with

760
00:26:10,000 --> 00:26:12,640
two parties

761
00:26:13,760 --> 00:26:17,039
um i'm not sure if i get the question

762
00:26:17,039 --> 00:26:19,200
um i think the question is what's the

763
00:26:19,200 --> 00:26:20,880
difference between multi-signature

764
00:26:20,880 --> 00:26:22,080
multi signatures and threshold

765
00:26:22,080 --> 00:26:23,760
signatures okay yeah i think this is

766
00:26:23,760 --> 00:26:25,520
what i what i basically mentioned on one

767
00:26:25,520 --> 00:26:27,279
of my my first slide so when

768
00:26:27,279 --> 00:26:29,120
in academia at least in the bitcoin

769
00:26:29,120 --> 00:26:30,720
space it's a little bit different but in

770
00:26:30,720 --> 00:26:32,640
in the academic space when you say

771
00:26:32,640 --> 00:26:34,320
multi-signature is

772
00:26:34,320 --> 00:26:36,480
this is what people call n of n so you

773
00:26:36,480 --> 00:26:38,320
have a group of n signers and all need

774
00:26:38,320 --> 00:26:39,200
to be present

775
00:26:39,200 --> 00:26:41,520
and willing to sign to obtain a

776
00:26:41,520 --> 00:26:42,640
signature

777
00:26:42,640 --> 00:26:44,320
where in threshold signatures you still

778
00:26:44,320 --> 00:26:46,240
have a group of enzymes but

779
00:26:46,240 --> 00:26:48,320
in order to produce the signature you

780
00:26:48,320 --> 00:26:49,520
only need

781
00:26:49,520 --> 00:26:52,559
a subset of size t of those enzymes

782
00:26:52,559 --> 00:26:54,080
i think the question was about the two

783
00:26:54,080 --> 00:26:56,000
user case if there are only two users

784
00:26:56,000 --> 00:26:58,000
is there a difference clearly when i

785
00:26:58,000 --> 00:26:59,120
have more than two users there's a

786
00:26:59,120 --> 00:27:00,000
difference

787
00:27:00,000 --> 00:27:03,520
okay if there are only two users um

788
00:27:03,520 --> 00:27:05,360
there's probably not a difference of

789
00:27:05,360 --> 00:27:07,520
course and you could have a

790
00:27:07,520 --> 00:27:09,360
weird scheme that is one of two scheme

791
00:27:09,360 --> 00:27:10,720
but

792
00:27:10,720 --> 00:27:12,480
i don't think this is particularly

793
00:27:12,480 --> 00:27:14,320
helpful um

794
00:27:14,320 --> 00:27:16,880
but just let me note that our our scheme

795
00:27:16,880 --> 00:27:17,440
actually

796
00:27:17,440 --> 00:27:20,320
works for uh arbitrary and just the

797
00:27:20,320 --> 00:27:22,000
example that i had on the slides for

798
00:27:22,000 --> 00:27:24,480
this was for two parties for yeah

799
00:27:24,480 --> 00:27:25,120
actually

800
00:27:25,120 --> 00:27:27,200
you did this for the presentation you

801
00:27:27,200 --> 00:27:28,799
just anticipated the next question

802
00:27:28,799 --> 00:27:30,480
whether uh this works for more than two

803
00:27:30,480 --> 00:27:31,279
users and

804
00:27:31,279 --> 00:27:34,799
yes yeah yeah it does yeah

805
00:27:34,799 --> 00:27:36,799
we'll still we'll still do uh n out of n

806
00:27:36,799 --> 00:27:38,480
so the n natural question is if you

807
00:27:38,480 --> 00:27:40,159
wanted to do t out of n

808
00:27:40,159 --> 00:27:41,760
this also generalizes pretty pretty

809
00:27:41,760 --> 00:27:44,640
naturally as long as small yes

810
00:27:44,640 --> 00:27:47,200
yeah so um in fact what i mentioned uh

811
00:27:47,200 --> 00:27:49,200
is

812
00:27:49,200 --> 00:27:52,320
here there is the

813
00:27:52,320 --> 00:27:56,080
uh concurrent paper by chelsea comlow

814
00:27:56,080 --> 00:27:57,600
and ian goldberg

815
00:27:57,600 --> 00:28:00,159
which proposed a frost scheme which is

816
00:28:00,159 --> 00:28:01,919
in this threshold setting so it has the

817
00:28:01,919 --> 00:28:03,360
same idea of

818
00:28:03,360 --> 00:28:06,559
of using uh multiple prenounces to get a

819
00:28:06,559 --> 00:28:07,840
two-down scheme and this is

820
00:28:07,840 --> 00:28:11,679
in the threshold scheme we think our

821
00:28:11,679 --> 00:28:13,279
provable security guarantees are a

822
00:28:13,279 --> 00:28:15,440
little bit better than this scheme but i

823
00:28:15,440 --> 00:28:17,440
it should be even possible to to marry

824
00:28:17,440 --> 00:28:20,080
these two papers together and get the

825
00:28:20,080 --> 00:28:23,679
um a multi signature yeah get a

826
00:28:23,679 --> 00:28:26,399
t out of an uh multisignature with our

827
00:28:26,399 --> 00:28:27,039
approval

828
00:28:27,039 --> 00:28:28,720
guarantees and with our key aggregation

829
00:28:28,720 --> 00:28:30,799
method so all of this should be

830
00:28:30,799 --> 00:28:33,039
should be possible there's a lot of

831
00:28:33,039 --> 00:28:34,080
possible design

832
00:28:34,080 --> 00:28:37,200
decisions you can make there um

833
00:28:37,200 --> 00:28:38,720
maybe it's also we're saying that if you

834
00:28:38,720 --> 00:28:42,240
have an inaudible scheme

835
00:28:42,240 --> 00:28:44,960
by looking at all and choose t subsets

836
00:28:44,960 --> 00:28:46,799
as long as n and three are small

837
00:28:46,799 --> 00:28:49,120
that could also work uh pretty well

838
00:28:49,120 --> 00:28:50,080
right right indeed

839
00:28:50,080 --> 00:28:52,320
is there any other uh any other

840
00:28:52,320 --> 00:28:53,200
questions

841
00:28:53,200 --> 00:28:56,320
um yeah no i think we covered

842
00:28:56,320 --> 00:28:58,080
i think we covered all the all the

843
00:28:58,080 --> 00:28:59,679
questions um

844
00:28:59,679 --> 00:29:01,279
so let me actually maybe ask one last

845
00:29:01,279 --> 00:29:02,880
question then we'll move on uh

846
00:29:02,880 --> 00:29:04,720
just to just to clarify this doesn't

847
00:29:04,720 --> 00:29:06,080
none of these techniques would apply to

848
00:29:06,080 --> 00:29:07,840
ecdsa right this is like a strict

849
00:29:07,840 --> 00:29:10,240
benefit of snore over ucdsa

850
00:29:10,240 --> 00:29:13,120
right so um this is true this really

851
00:29:13,120 --> 00:29:13,919
exploits the

852
00:29:13,919 --> 00:29:16,399
nice linearity of snow signatures and

853
00:29:16,399 --> 00:29:18,799
easy dsa

854
00:29:18,799 --> 00:29:20,320
is kind of designed to practice

855
00:29:20,320 --> 00:29:22,159
linearity so

856
00:29:22,159 --> 00:29:25,279
um yeah yeah so multisignature protocols

857
00:29:25,279 --> 00:29:28,080
for ecdsa can be pretty cumbersome

858
00:29:28,080 --> 00:29:30,240
so the move to the move to schnorr is uh

859
00:29:30,240 --> 00:29:32,320
in bitcoin is a very welcome development

860
00:29:32,320 --> 00:29:33,039
yeah

861
00:29:33,039 --> 00:29:36,640
right fantastic all right i think we're

862
00:29:36,640 --> 00:29:37,840
out of time so

863
00:29:37,840 --> 00:29:39,679
i guess we'll we'll have to read the

864
00:29:39,679 --> 00:29:41,120
paper to see the funny story the funny

865
00:29:41,120 --> 00:29:42,960
stories in the paper yes

866
00:29:42,960 --> 00:29:46,240
it is yeah i'm looking forward to

867
00:29:46,240 --> 00:29:47,440
reading the paper

868
00:29:47,440 --> 00:29:50,240
and then yeah let's move on to our final

869
00:29:50,240 --> 00:29:52,240
speaker of the session

870
00:29:52,240 --> 00:29:55,039
so the final speaker is uh is going to

871
00:29:55,039 --> 00:29:55,360
be

872
00:29:55,360 --> 00:29:57,200
emea lundberg who's going to talk about

873
00:29:57,200 --> 00:29:59,360
asynchronous remote key generation

874
00:29:59,360 --> 00:30:02,320
an analysis of ubiko's proposal for w3

875
00:30:02,320 --> 00:30:03,679
web authen so this is going to be an

876
00:30:03,679 --> 00:30:05,919
analysis of web authen which is really

877
00:30:05,919 --> 00:30:07,200
really interesting looking forward to

878
00:30:07,200 --> 00:30:09,840
the talk uh this is work by nick fryman

879
00:30:09,840 --> 00:30:13,360
danielle gartham uh franzi kuskafer emil

880
00:30:13,360 --> 00:30:14,000
lundberg

881
00:30:14,000 --> 00:30:17,039
mark manulis and uh dane nielsen

882
00:30:17,039 --> 00:30:19,039
and emile's gonna give it a talk and i'm

883
00:30:19,039 --> 00:30:20,399
looking forward to the talk and emile

884
00:30:20,399 --> 00:30:22,559
the floor is yours

885
00:30:22,559 --> 00:30:25,679
okay can you hear me fine

886
00:30:25,679 --> 00:30:27,039
uh yeah we can hear you and we can see

887
00:30:27,039 --> 00:30:29,440
the slides okay great

888
00:30:29,440 --> 00:30:32,159
so uh yeah welcome to this presentation

889
00:30:32,159 --> 00:30:32,480
like

890
00:30:32,480 --> 00:30:36,080
uh like dan said this is going to be

891
00:30:36,080 --> 00:30:36,480
about

892
00:30:36,480 --> 00:30:38,559
asynchronous remote key generation and

893
00:30:38,559 --> 00:30:39,679
uh this is an

894
00:30:39,679 --> 00:30:42,799
analysis of ubiquitous proposal for w3c

895
00:30:42,799 --> 00:30:45,200
web authentication and uh yeah my name

896
00:30:45,200 --> 00:30:46,480
is emily lindberry

897
00:30:46,480 --> 00:30:48,720
and uh this has been a joint work

898
00:30:48,720 --> 00:30:50,000
between the surrey center for

899
00:30:50,000 --> 00:30:54,000
cyber security and wire and ubico

900
00:30:54,000 --> 00:30:57,440
and uh yeah this will be arkg is a

901
00:30:57,440 --> 00:31:00,320
new cryptographic commemorative that

902
00:31:00,320 --> 00:31:01,840
allows for delegated

903
00:31:01,840 --> 00:31:04,480
asynchronous public key generation and

904
00:31:04,480 --> 00:31:06,240
the motivating application for this

905
00:31:06,240 --> 00:31:10,000
is a proposal by ubico for a backup key

906
00:31:10,000 --> 00:31:11,120
solution for

907
00:31:11,120 --> 00:31:14,159
the web authentication standard so i'll

908
00:31:14,159 --> 00:31:14,880
be

909
00:31:14,880 --> 00:31:16,720
i will begin with the background issue

910
00:31:16,720 --> 00:31:19,200
and you solution proposal for how to

911
00:31:19,200 --> 00:31:22,240
solve that and then go into

912
00:31:22,240 --> 00:31:24,480
the model of how we analyze that as a

913
00:31:24,480 --> 00:31:25,679
rkg

914
00:31:25,679 --> 00:31:28,159
and finally how this would all fit into

915
00:31:28,159 --> 00:31:29,760
the weapons and architecture

916
00:31:29,760 --> 00:31:31,840
so this talk will be a quick overview of

917
00:31:31,840 --> 00:31:34,000
both the theory and the practice

918
00:31:34,000 --> 00:31:36,240
but uh please see the the research paper

919
00:31:36,240 --> 00:31:38,159
for all the formal details and proofs

920
00:31:38,159 --> 00:31:38,880
and all that

921
00:31:38,880 --> 00:31:42,000
i'll link to that at the end so uh first

922
00:31:42,000 --> 00:31:42,480
a quick

923
00:31:42,480 --> 00:31:44,720
introduction to boba then if any of you

924
00:31:44,720 --> 00:31:46,480
are not familiar it's a

925
00:31:46,480 --> 00:31:50,240
2019 w3c standard for phishing resistant

926
00:31:50,240 --> 00:31:52,320
public key authentication and at its

927
00:31:52,320 --> 00:31:53,919
core it's a javascript api which

928
00:31:53,919 --> 00:31:55,919
web services can use to request user

929
00:31:55,919 --> 00:31:57,200
authentication

930
00:31:57,200 --> 00:31:59,360
and the api is backed by a variety of

931
00:31:59,360 --> 00:32:00,960
different hardware back-ends

932
00:32:00,960 --> 00:32:03,200
including dedicated hardware tokens

933
00:32:03,200 --> 00:32:05,200
which are often called security keys

934
00:32:05,200 --> 00:32:07,440
and many modern mobile phones and

935
00:32:07,440 --> 00:32:09,279
laptops also have built-in support for

936
00:32:09,279 --> 00:32:10,880
this

937
00:32:10,880 --> 00:32:12,880
so to use a web of then to use a website

938
00:32:12,880 --> 00:32:14,080
webassembly service

939
00:32:14,080 --> 00:32:16,399
which we call a relying party you will

940
00:32:16,399 --> 00:32:19,120
first perform a registration ceremony to

941
00:32:19,120 --> 00:32:21,440
create a new key pair for the service

942
00:32:21,440 --> 00:32:22,880
and after that the

943
00:32:22,880 --> 00:32:25,279
relying party can use an authentication

944
00:32:25,279 --> 00:32:26,240
ceremony

945
00:32:26,240 --> 00:32:27,919
to authenticate the user with the

946
00:32:27,919 --> 00:32:29,279
created public key

947
00:32:29,279 --> 00:32:31,679
and this shows a simplified view of the

948
00:32:31,679 --> 00:32:33,120
data flow for that

949
00:32:33,120 --> 00:32:37,360
um yeah so that's why we think in short

950
00:32:37,360 --> 00:32:39,279
and webathon has a couple of key

951
00:32:39,279 --> 00:32:40,559
properties that are especially

952
00:32:40,559 --> 00:32:42,960
irrelevant to this work

953
00:32:42,960 --> 00:32:45,200
first the the keys that are created

954
00:32:45,200 --> 00:32:46,399
during a registration

955
00:32:46,399 --> 00:32:49,120
registration ceremony are unlinkable

956
00:32:49,120 --> 00:32:50,640
meaning you cannot tell whether two

957
00:32:50,640 --> 00:32:52,320
public keys were created by the same

958
00:32:52,320 --> 00:32:53,440
authenticator

959
00:32:53,440 --> 00:32:55,760
which is important for user privacy and

960
00:32:55,760 --> 00:32:57,120
anonymity

961
00:32:57,120 --> 00:33:00,240
and weapon also has a feature called

962
00:33:00,240 --> 00:33:02,480
authenticate sorry authenticator

963
00:33:02,480 --> 00:33:04,399
attestation

964
00:33:04,399 --> 00:33:06,480
which means in short that authenticators

965
00:33:06,480 --> 00:33:08,240
can prove their make and model to

966
00:33:08,240 --> 00:33:11,440
the relying party most relying parties

967
00:33:11,440 --> 00:33:12,559
won't need this but

968
00:33:12,559 --> 00:33:14,880
it's important for some high security or

969
00:33:14,880 --> 00:33:16,799
regulated applications such as

970
00:33:16,799 --> 00:33:19,600
financial or government applications or

971
00:33:19,600 --> 00:33:22,399
institutions sorry

972
00:33:22,399 --> 00:33:25,039
most notably this enables a kind of

973
00:33:25,039 --> 00:33:27,120
passwordless multi-factor authentication

974
00:33:27,120 --> 00:33:28,559
which you can think of as

975
00:33:28,559 --> 00:33:30,320
kind of like smart cards for the modern

976
00:33:30,320 --> 00:33:31,760
web

977
00:33:31,760 --> 00:33:34,399
uh so a problem with webauthn is that if

978
00:33:34,399 --> 00:33:36,220
you lose your authenticator

979
00:33:36,220 --> 00:33:37,440
[Music]

980
00:33:37,440 --> 00:33:39,200
then you would either be locked out of

981
00:33:39,200 --> 00:33:41,279
your account or you would need to

982
00:33:41,279 --> 00:33:43,279
to downgrade to some less secure

983
00:33:43,279 --> 00:33:44,799
authentication method

984
00:33:44,799 --> 00:33:46,640
and most commonly that would be just a

985
00:33:46,640 --> 00:33:47,919
recovery email

986
00:33:47,919 --> 00:33:50,159
so the current recommended workaround to

987
00:33:50,159 --> 00:33:51,679
this is to use register two

988
00:33:51,679 --> 00:33:53,519
authenticators and put one of them away

989
00:33:53,519 --> 00:33:55,440
as a backup

990
00:33:55,440 --> 00:33:56,880
but the problem then is that the next

991
00:33:56,880 --> 00:33:58,640
time you've registered to a new service

992
00:33:58,640 --> 00:34:00,799
you would have to retrieve that backup

993
00:34:00,799 --> 00:34:03,440
from from where you're storing it and

994
00:34:03,440 --> 00:34:06,240
in order to register it and then put it

995
00:34:06,240 --> 00:34:07,279
back

996
00:34:07,279 --> 00:34:08,800
and you'll have to do this again and

997
00:34:08,800 --> 00:34:10,399
again for every new service that you

998
00:34:10,399 --> 00:34:12,079
register with

999
00:34:12,079 --> 00:34:15,280
so that is not ideal it's inconvenient

1000
00:34:15,280 --> 00:34:17,280
to have to retrieve the backup first

1001
00:34:17,280 --> 00:34:19,679
before you register somewhere but if you

1002
00:34:19,679 --> 00:34:20,719
don't you

1003
00:34:20,719 --> 00:34:23,760
instead risk losing or you instead risk

1004
00:34:23,760 --> 00:34:25,199
if

1005
00:34:25,199 --> 00:34:27,760
you would forget to register it later

1006
00:34:27,760 --> 00:34:28,399
and risk

1007
00:34:28,399 --> 00:34:30,159
losing your account if you lose the

1008
00:34:30,159 --> 00:34:32,000
primary authenticator

1009
00:34:32,000 --> 00:34:33,280
but on the other hand if you keep the

1010
00:34:33,280 --> 00:34:35,599
backup easily accessible you risk losing

1011
00:34:35,599 --> 00:34:37,040
the backup as you're

1012
00:34:37,040 --> 00:34:40,079
handling it so we want a better solution

1013
00:34:40,079 --> 00:34:40,480
to that

1014
00:34:40,480 --> 00:34:42,719
and those key properties that i

1015
00:34:42,719 --> 00:34:43,679
mentioned earlier

1016
00:34:43,679 --> 00:34:46,079
impose a few design constraints on such

1017
00:34:46,079 --> 00:34:47,359
a solution

1018
00:34:47,359 --> 00:34:49,280
we need the keys to remain unlinkable

1019
00:34:49,280 --> 00:34:50,560
for user privacy

1020
00:34:50,560 --> 00:34:53,040
and the solution also must not weaken

1021
00:34:53,040 --> 00:34:54,399
authenticator attestation

1022
00:34:54,399 --> 00:34:56,560
otherwise it will be unusable for any

1023
00:34:56,560 --> 00:34:59,280
application that needs attestation

1024
00:34:59,280 --> 00:35:00,800
also since we want this to be an

1025
00:35:00,800 --> 00:35:03,920
official extension to an open standard

1026
00:35:03,920 --> 00:35:05,839
it should allow for interoperability

1027
00:35:05,839 --> 00:35:09,200
between authenticator vendors as well

1028
00:35:09,200 --> 00:35:11,359
and ideally not introduce any new

1029
00:35:11,359 --> 00:35:13,440
third-party dependencies

1030
00:35:13,440 --> 00:35:17,520
so there have been some other proposals

1031
00:35:17,520 --> 00:35:20,400
that don't satisfy all these constraints

1032
00:35:20,400 --> 00:35:22,079
many of them ultimately come down to

1033
00:35:22,079 --> 00:35:23,599
some kind of

1034
00:35:23,599 --> 00:35:26,560
sharing private keys in some way and of

1035
00:35:26,560 --> 00:35:27,760
course we don't want that for all the

1036
00:35:27,760 --> 00:35:29,680
usual reasons but also more specifically

1037
00:35:29,680 --> 00:35:31,119
in this case

1038
00:35:31,119 --> 00:35:32,720
it makes at a station problematic

1039
00:35:32,720 --> 00:35:34,720
because it's hard to make any guarantees

1040
00:35:34,720 --> 00:35:36,400
about shared keys

1041
00:35:36,400 --> 00:35:38,320
and there are things you can do with

1042
00:35:38,320 --> 00:35:40,880
attestation between authenticators

1043
00:35:40,880 --> 00:35:42,839
but that would most likely not be vendor

1044
00:35:42,839 --> 00:35:44,800
interoperable

1045
00:35:44,800 --> 00:35:47,040
so instead you could have the backup

1046
00:35:47,040 --> 00:35:48,960
authenticator generate lots of key pairs

1047
00:35:48,960 --> 00:35:49,599
in advance

1048
00:35:49,599 --> 00:35:51,359
and transfer the public keys to the

1049
00:35:51,359 --> 00:35:52,880
primary authenticator

1050
00:35:52,880 --> 00:35:55,040
but that would require too much storage

1051
00:35:55,040 --> 00:35:58,079
space for small hardware tokens or

1052
00:35:58,079 --> 00:35:59,680
otherwise introduce

1053
00:35:59,680 --> 00:36:01,200
a dependency on some kind of remote

1054
00:36:01,200 --> 00:36:02,880
storage

1055
00:36:02,880 --> 00:36:05,599
so if you instead of generating lots of

1056
00:36:05,599 --> 00:36:08,480
keys just generate one backup key

1057
00:36:08,480 --> 00:36:10,400
that will break unlinkability since you

1058
00:36:10,400 --> 00:36:12,320
would be using the same backup key

1059
00:36:12,320 --> 00:36:14,640
everywhere

1060
00:36:14,800 --> 00:36:17,440
so your ghost proposal instead works

1061
00:36:17,440 --> 00:36:18,240
like this

1062
00:36:18,240 --> 00:36:19,920
you still have a backup and a primary

1063
00:36:19,920 --> 00:36:22,000
authenticator but you pair them with

1064
00:36:22,000 --> 00:36:24,240
each other first and then you can put

1065
00:36:24,240 --> 00:36:25,680
the backup away somewhere

1066
00:36:25,680 --> 00:36:27,119
and then you go ahead and use the

1067
00:36:27,119 --> 00:36:28,720
primary authenticator to register and

1068
00:36:28,720 --> 00:36:29,760
authenticate to

1069
00:36:29,760 --> 00:36:32,800
as many services as you like as usual

1070
00:36:32,800 --> 00:36:34,560
then if you lose a primary authenticator

1071
00:36:34,560 --> 00:36:36,000
you just retrieve the backup as

1072
00:36:36,000 --> 00:36:36,960
indicator and

1073
00:36:36,960 --> 00:36:39,200
just use that to authenticate and it

1074
00:36:39,200 --> 00:36:42,640
would just automatically work

1075
00:36:42,800 --> 00:36:44,240
and then the first time you use the

1076
00:36:44,240 --> 00:36:46,160
backup authenticator to authenticate

1077
00:36:46,160 --> 00:36:47,520
with each service

1078
00:36:47,520 --> 00:36:49,040
it becomes your new primary

1079
00:36:49,040 --> 00:36:51,040
authenticator for that service

1080
00:36:51,040 --> 00:36:52,800
and then if you like you can pair the

1081
00:36:52,800 --> 00:36:54,480
new primary with a new backup

1082
00:36:54,480 --> 00:36:57,040
and if you do the next time you

1083
00:36:57,040 --> 00:36:58,720
authenticate with each service

1084
00:36:58,720 --> 00:37:00,320
it will automatically detect and

1085
00:37:00,320 --> 00:37:02,670
register this new backup for you

1086
00:37:02,670 --> 00:37:04,640
[Music]

1087
00:37:04,640 --> 00:37:06,800
so the way that works is through some

1088
00:37:06,800 --> 00:37:08,079
cryptographic operations

1089
00:37:08,079 --> 00:37:11,280
and we model these as a new crypto

1090
00:37:11,280 --> 00:37:15,920
a new cryptograph sorry let me

1091
00:37:17,839 --> 00:37:20,160
so we model this as a new cryptographic

1092
00:37:20,160 --> 00:37:21,760
primitive that we call

1093
00:37:21,760 --> 00:37:24,079
asynchronous key asynchronous remote key

1094
00:37:24,079 --> 00:37:25,040
generation or

1095
00:37:25,040 --> 00:37:28,240
arkg the arkg

1096
00:37:28,240 --> 00:37:30,400
uses a cycle group for example an

1097
00:37:30,400 --> 00:37:32,480
elliptic curve and it has

1098
00:37:32,480 --> 00:37:34,960
three participants to scheme we have a

1099
00:37:34,960 --> 00:37:36,880
pa nba the primary and backup

1100
00:37:36,880 --> 00:37:38,000
authenticators

1101
00:37:38,000 --> 00:37:41,359
and uh rp the relying party and it works

1102
00:37:41,359 --> 00:37:43,440
in three phases we have the setup phase

1103
00:37:43,440 --> 00:37:45,119
where the primary authenticator

1104
00:37:45,119 --> 00:37:46,720
generates any number of

1105
00:37:46,720 --> 00:37:49,040
public keys on behalf of the backup

1106
00:37:49,040 --> 00:37:50,160
indicator

1107
00:37:50,160 --> 00:37:53,440
and then finally after we lose the

1108
00:37:53,440 --> 00:37:54,960
primaries indicator

1109
00:37:54,960 --> 00:37:57,359
we have the recovery phase in which the

1110
00:37:57,359 --> 00:37:58,640
backup is indicator can

1111
00:37:58,640 --> 00:38:00,960
derive the corresponding private keys

1112
00:38:00,960 --> 00:38:03,520
for those generated public keys

1113
00:38:03,520 --> 00:38:05,680
so in the setup step the the backup

1114
00:38:05,680 --> 00:38:07,920
generates a key pair and transmits

1115
00:38:07,920 --> 00:38:10,320
the public key to the primary and we

1116
00:38:10,320 --> 00:38:11,119
call this the

1117
00:38:11,119 --> 00:38:14,000
backup seed key pair then in the

1118
00:38:14,000 --> 00:38:15,040
registration phase

1119
00:38:15,040 --> 00:38:18,000
to generate a backup public key on

1120
00:38:18,000 --> 00:38:19,280
behalf of the bob

1121
00:38:19,280 --> 00:38:21,520
of the backup authenticator uh the

1122
00:38:21,520 --> 00:38:23,040
primary will use an

1123
00:38:23,040 --> 00:38:25,359
ephemeral dv helmet exchange to derive

1124
00:38:25,359 --> 00:38:26,720
two shared keys

1125
00:38:26,720 --> 00:38:29,839
a credential key and a mac key and

1126
00:38:29,839 --> 00:38:31,920
the credential key is combined with the

1127
00:38:31,920 --> 00:38:33,119
seed public key

1128
00:38:33,119 --> 00:38:36,000
to derive a new public key and then the

1129
00:38:36,000 --> 00:38:36,320
mac

1130
00:38:36,320 --> 00:38:38,480
key is used to derive what we call a key

1131
00:38:38,480 --> 00:38:40,720
handle which we call cred

1132
00:38:40,720 --> 00:38:43,520
here on the slide and the relying party

1133
00:38:43,520 --> 00:38:44,480
then stores

1134
00:38:44,480 --> 00:38:46,320
this public key and the key handle in

1135
00:38:46,320 --> 00:38:48,079
the user's account

1136
00:38:48,079 --> 00:38:50,800
and then later in the recovery phase the

1137
00:38:50,800 --> 00:38:52,880
backup authenticator can use this key

1138
00:38:52,880 --> 00:38:53,359
handle

1139
00:38:53,359 --> 00:38:56,560
to derive a private key so the backup

1140
00:38:56,560 --> 00:38:57,359
will receive

1141
00:38:57,359 --> 00:38:59,359
the key handle cred and extract the

1142
00:38:59,359 --> 00:39:00,960
ephemeral public key

1143
00:39:00,960 --> 00:39:03,280
and then use the seed private key to

1144
00:39:03,280 --> 00:39:05,200
perform the same diffie-hellman exchange

1145
00:39:05,200 --> 00:39:08,480
and derive the same shared keys then it

1146
00:39:08,480 --> 00:39:10,480
can verify the mac to make sure that the

1147
00:39:10,480 --> 00:39:11,440
key handle

1148
00:39:11,440 --> 00:39:14,079
is actually valid for this authenticator

1149
00:39:14,079 --> 00:39:14,800
and then

1150
00:39:14,800 --> 00:39:17,359
use the seed private key to derive the

1151
00:39:17,359 --> 00:39:19,040
private signing key

1152
00:39:19,040 --> 00:39:22,160
and use that to sign the challenge so

1153
00:39:22,160 --> 00:39:24,240
for the security analysis we

1154
00:39:24,240 --> 00:39:26,240
we define two security properties that a

1155
00:39:26,240 --> 00:39:27,599
scheme like this should have

1156
00:39:27,599 --> 00:39:30,720
we have public key unlinkability

1157
00:39:30,720 --> 00:39:32,480
meaning that if you have two public keys

1158
00:39:32,480 --> 00:39:34,320
generated by this scheme you can't tell

1159
00:39:34,320 --> 00:39:36,079
whether they were derived from the same

1160
00:39:36,079 --> 00:39:38,320
seed or not

1161
00:39:38,320 --> 00:39:40,560
and then a secret key security of course

1162
00:39:40,560 --> 00:39:42,320
if you have a public key you can't

1163
00:39:42,320 --> 00:39:44,240
just compute the secret key unless you

1164
00:39:44,240 --> 00:39:47,680
have the secret seed key

1165
00:39:48,880 --> 00:39:51,200
we then prove that arkg satisfies these

1166
00:39:51,200 --> 00:39:52,000
properties

1167
00:39:52,000 --> 00:39:54,160
under the discrete logarithm and the

1168
00:39:54,160 --> 00:39:55,920
pseudorandom function oracle different

1169
00:39:55,920 --> 00:39:57,280
helmet assumptions

1170
00:39:57,280 --> 00:40:00,240
and beyond that we also show that arkd

1171
00:40:00,240 --> 00:40:02,480
can be securely composed with

1172
00:40:02,480 --> 00:40:05,280
arbitrary asymmetric particles and these

1173
00:40:05,280 --> 00:40:06,800
results open up for

1174
00:40:06,800 --> 00:40:09,280
composing arkg with other protocols in

1175
00:40:09,280 --> 00:40:11,200
addition to webauthen also

1176
00:40:11,200 --> 00:40:12,960
and possibly for new instantiate

1177
00:40:12,960 --> 00:40:14,560
instantiations

1178
00:40:14,560 --> 00:40:17,680
beyond the elliptic curves

1179
00:40:17,920 --> 00:40:20,720
so finally ubico's proposal demonstrates

1180
00:40:20,720 --> 00:40:23,359
that this has practical applications

1181
00:40:23,359 --> 00:40:26,079
such as this backup scheme which would

1182
00:40:26,079 --> 00:40:27,280
readily fit into a

1183
00:40:27,280 --> 00:40:30,160
webathon's existing framework and

1184
00:40:30,160 --> 00:40:31,680
relying parties would need to implement

1185
00:40:31,680 --> 00:40:33,440
support but much of it can be

1186
00:40:33,440 --> 00:40:36,480
supported by software libraries and this

1187
00:40:36,480 --> 00:40:37,599
application maintains

1188
00:40:37,599 --> 00:40:39,760
attestation guarantees by not sharing

1189
00:40:39,760 --> 00:40:41,839
any private signing keys

1190
00:40:41,839 --> 00:40:43,760
which allows the relying party to check

1191
00:40:43,760 --> 00:40:45,280
at a station as usual

1192
00:40:45,280 --> 00:40:48,880
when the backup syndicator is first used

1193
00:40:48,880 --> 00:40:51,200
as for performance the arkg would

1194
00:40:51,200 --> 00:40:52,960
approximately double the runtime in a

1195
00:40:52,960 --> 00:40:54,640
typical scenario

1196
00:40:54,640 --> 00:40:55,920
which is currently about 100

1197
00:40:55,920 --> 00:40:57,760
milliseconds without it

1198
00:40:57,760 --> 00:41:00,640
but these operations would only rarely

1199
00:41:00,640 --> 00:41:02,720
be run so most ceremonies would see no

1200
00:41:02,720 --> 00:41:05,119
increase in runtime

1201
00:41:05,119 --> 00:41:07,920
so in summary uh we've introduced arkg

1202
00:41:07,920 --> 00:41:09,839
which is a new cryptographic primitive

1203
00:41:09,839 --> 00:41:12,160
and uh is used by this ubiquitous

1204
00:41:12,160 --> 00:41:14,880
proposal for webassign backup keys

1205
00:41:14,880 --> 00:41:16,800
we've proved the security of the scheme

1206
00:41:16,800 --> 00:41:17,920
using the

1207
00:41:17,920 --> 00:41:20,400
prfodh and discreet logarithm

1208
00:41:20,400 --> 00:41:21,599
assumptions

1209
00:41:21,599 --> 00:41:23,599
and prove that it is composable with

1210
00:41:23,599 --> 00:41:24,720
arbitrary

1211
00:41:24,720 --> 00:41:27,760
asymmetric protocols and yeah

1212
00:41:27,760 --> 00:41:30,000
if you want to know more you can see the

1213
00:41:30,000 --> 00:41:30,800
arkd

1214
00:41:30,800 --> 00:41:33,599
security analysis and ubiquitous blog

1215
00:41:33,599 --> 00:41:35,599
post and extension proposal

1216
00:41:35,599 --> 00:41:39,200
and the acm ccs presentation of arkg

1217
00:41:39,200 --> 00:41:42,240
at these links here and uh yeah thank

1218
00:41:42,240 --> 00:41:43,040
you

1219
00:41:43,040 --> 00:41:46,160
and i'm ready to take questions

1220
00:41:46,160 --> 00:41:47,599
thank you that was that was really cool

1221
00:41:47,599 --> 00:41:48,880
that's a really cool idea and really

1222
00:41:48,880 --> 00:41:50,079
really cool analysis

1223
00:41:50,079 --> 00:41:52,560
um so actually can i ask like how is

1224
00:41:52,560 --> 00:41:53,760
this compatible with

1225
00:41:53,760 --> 00:41:56,000
uh if you wanted to have like multiple

1226
00:41:56,000 --> 00:41:56,880
backup keys

1227
00:41:56,880 --> 00:42:00,400
would that would that work uh yes uh

1228
00:42:00,400 --> 00:42:04,000
that would of course uh consume

1229
00:42:04,000 --> 00:42:05,760
additional storage for each backup key

1230
00:42:05,760 --> 00:42:07,280
but yeah the the

1231
00:42:07,280 --> 00:42:10,319
the protocol that we've proposed uh

1232
00:42:10,319 --> 00:42:12,720
places no limit really on the number of

1233
00:42:12,720 --> 00:42:14,560
backup keys so you can have

1234
00:42:14,560 --> 00:42:17,280
uh a primary key associated with any

1235
00:42:17,280 --> 00:42:18,800
number of backup keys

1236
00:42:18,800 --> 00:42:20,800
and each of those backup keys in turn

1237
00:42:20,800 --> 00:42:22,079
can be associated with

1238
00:42:22,079 --> 00:42:24,640
any number of private keys or primary

1239
00:42:24,640 --> 00:42:25,119
keys

1240
00:42:25,119 --> 00:42:28,560
sorry so the protocol or the scheme

1241
00:42:28,560 --> 00:42:31,119
places no restrictions on that

1242
00:42:31,119 --> 00:42:32,800
and and each backup key would work

1243
00:42:32,800 --> 00:42:35,280
everywhere you like

1244
00:42:35,280 --> 00:42:37,040
because you you can find it a bit more

1245
00:42:37,040 --> 00:42:39,359
so that some backup keys work on some

1246
00:42:39,359 --> 00:42:41,520
uh some relying parties and not on

1247
00:42:41,520 --> 00:42:43,200
others

1248
00:42:43,200 --> 00:42:46,800
yes the the way it works is when you

1249
00:42:46,800 --> 00:42:50,160
uh when you authenticate to a relying

1250
00:42:50,160 --> 00:42:50,720
party you

1251
00:42:50,720 --> 00:42:54,000
you register the backup key

1252
00:42:54,000 --> 00:42:57,040
for that relying party so uh

1253
00:42:57,040 --> 00:42:58,800
you could choose to not do that for some

1254
00:42:58,800 --> 00:43:00,240
of the relying parties and then that

1255
00:43:00,240 --> 00:43:00,960
backup key

1256
00:43:00,960 --> 00:43:02,880
would not work for that relying party

1257
00:43:02,880 --> 00:43:04,079
yes ah

1258
00:43:04,079 --> 00:43:06,240
okay great and uh watsonlight has a good

1259
00:43:06,240 --> 00:43:08,079
good question which is how do we avoid

1260
00:43:08,079 --> 00:43:11,520
having the host malware take

1261
00:43:11,520 --> 00:43:14,400
backups and compromise the keys that way

1262
00:43:14,400 --> 00:43:15,040
oh

1263
00:43:15,040 --> 00:43:17,280
so i think okay i'll let you answer that

1264
00:43:17,280 --> 00:43:18,160
uh

1265
00:43:18,160 --> 00:43:21,680
so if you have like um

1266
00:43:21,680 --> 00:43:23,280
suppose you have malware on your system

1267
00:43:23,280 --> 00:43:25,839
and uh our new system tries to

1268
00:43:25,839 --> 00:43:28,079
tries to masquerade as a backup so it

1269
00:43:28,079 --> 00:43:28,880
tries to create

1270
00:43:28,880 --> 00:43:32,960
backup itself and uh compromise so

1271
00:43:32,960 --> 00:43:36,400
yeah um one of the details of the

1272
00:43:36,400 --> 00:43:39,359
practical protocol that we're proposing

1273
00:43:39,359 --> 00:43:41,680
is that you need to have

1274
00:43:41,680 --> 00:43:44,160
a pin set on your device before you set

1275
00:43:44,160 --> 00:43:44,800
this up

1276
00:43:44,800 --> 00:43:48,000
so uh i guess if you've already entered

1277
00:43:48,000 --> 00:43:48,560
the pin

1278
00:43:48,560 --> 00:43:51,440
on the on the client then there might be

1279
00:43:51,440 --> 00:43:53,280
a window for some malware to do some bad

1280
00:43:53,280 --> 00:43:54,319
things

1281
00:43:54,319 --> 00:43:56,720
i will also note that web authen on its

1282
00:43:56,720 --> 00:43:57,760
own

1283
00:43:57,760 --> 00:43:59,440
doesn't work at all if if you have

1284
00:43:59,440 --> 00:44:01,040
malware so

1285
00:44:01,040 --> 00:44:02,720
it kind of doesn't make things worse in

1286
00:44:02,720 --> 00:44:04,079
a way but yeah

1287
00:44:04,079 --> 00:44:06,079
we do have you need to enter the pin

1288
00:44:06,079 --> 00:44:08,800
before you can do any of these things so

1289
00:44:08,800 --> 00:44:10,240
the authenticator will authenticate you

1290
00:44:10,240 --> 00:44:12,079
first yeah uh and then

1291
00:44:12,079 --> 00:44:14,240
peter has a good question which is uh if

1292
00:44:14,240 --> 00:44:15,440
i have like five

1293
00:44:15,440 --> 00:44:18,800
five tokens five keys and um

1294
00:44:18,800 --> 00:44:20,720
do i need to create one backup for each

1295
00:44:20,720 --> 00:44:22,000
key or can i have like

1296
00:44:22,000 --> 00:44:25,440
one backup for all five keys yes you can

1297
00:44:25,440 --> 00:44:27,599
you can have one backup and associated

1298
00:44:27,599 --> 00:44:28,880
that as uh

1299
00:44:28,880 --> 00:44:30,960
as a backup for each of those five

1300
00:44:30,960 --> 00:44:32,400
primary keys

1301
00:44:32,400 --> 00:44:34,640
the way that will work is if you if you

1302
00:44:34,640 --> 00:44:36,480
have one service and you register all

1303
00:44:36,480 --> 00:44:38,160
five of your keys to that service

1304
00:44:38,160 --> 00:44:40,640
and have the same backup for all of them

1305
00:44:40,640 --> 00:44:42,000
then

1306
00:44:42,000 --> 00:44:45,359
by the protocol we we propose if you use

1307
00:44:45,359 --> 00:44:46,800
the backup key you would

1308
00:44:46,800 --> 00:44:50,079
automatically revoke all five of those

1309
00:44:50,079 --> 00:44:52,319
uh primary keys and replace them with

1310
00:44:52,319 --> 00:44:53,839
the backup

1311
00:44:53,839 --> 00:44:55,680
oh i see so you so once you start using

1312
00:44:55,680 --> 00:44:56,960
the backup the five will get

1313
00:44:56,960 --> 00:44:59,200
concentrated into a single key

1314
00:44:59,200 --> 00:45:02,480
yeah but that is not real that's not a

1315
00:45:02,480 --> 00:45:04,079
feature of the cryptography that's just

1316
00:45:04,079 --> 00:45:06,240
a feature of of the

1317
00:45:06,240 --> 00:45:09,599
the server side logic that we propose

1318
00:45:09,599 --> 00:45:12,960
yeah i see i see yeah anyhow uh

1319
00:45:12,960 --> 00:45:14,400
yeah this is really cool so it's a cool

1320
00:45:14,400 --> 00:45:16,480
idea a cool way for using for using the

1321
00:45:16,480 --> 00:45:18,880
the specific features of web of them to

1322
00:45:18,880 --> 00:45:19,920
to make this all work

1323
00:45:19,920 --> 00:45:23,839
so um nice work um so let's see so i

1324
00:45:23,839 --> 00:45:25,839
think we're actually on time so it's uh

1325
00:45:25,839 --> 00:45:27,839
time to move on to our second so

1326
00:45:27,839 --> 00:45:29,040
there are a couple more questions for

1327
00:45:29,040 --> 00:45:31,040
you so maybe you can kind of jump on the

1328
00:45:31,040 --> 00:45:31,680
chat and

1329
00:45:31,680 --> 00:45:34,240
answer the questions in the chat but i

1330
00:45:34,240 --> 00:45:35,839
think time for us to actually move to

1331
00:45:35,839 --> 00:45:37,280
our next session

1332
00:45:37,280 --> 00:45:41,839
which is uh let's see on human power

