1
00:00:00,160 --> 00:00:02,320
yes uh you're ready to go have a good

2
00:00:02,320 --> 00:00:03,360
session

3
00:00:03,360 --> 00:00:05,359
i'd like to also announce that we should

4
00:00:05,359 --> 00:00:08,080
obey the iacr code of conduct people

5
00:00:08,080 --> 00:00:09,840
should change their name to their

6
00:00:09,840 --> 00:00:11,679
full name as it would appear on a paper

7
00:00:11,679 --> 00:00:14,400
or professional

8
00:00:15,200 --> 00:00:17,119
thanks kevin yeah thanks thanks for

9
00:00:17,119 --> 00:00:18,640
mentioning um

10
00:00:18,640 --> 00:00:21,920
all right so welcome everyone to the uh

11
00:00:21,920 --> 00:00:23,279
second session of the day we're going to

12
00:00:23,279 --> 00:00:25,599
continue the same theme

13
00:00:25,599 --> 00:00:28,960
cryptocurrency um i want to invite um

14
00:00:28,960 --> 00:00:32,159
everyone to post questions on zulip

15
00:00:32,159 --> 00:00:34,559
so for your convenience also you can

16
00:00:34,559 --> 00:00:36,239
find the link on the chat

17
00:00:36,239 --> 00:00:38,399
please post your questions on zulip and

18
00:00:38,399 --> 00:00:39,760
not on the

19
00:00:39,760 --> 00:00:42,079
um and not on the chat not on the zoom

20
00:00:42,079 --> 00:00:42,800
chat

21
00:00:42,800 --> 00:00:45,039
so we have three talks uh in this

22
00:00:45,039 --> 00:00:46,000
session

23
00:00:46,000 --> 00:00:49,280
uh and the first one is uh

24
00:00:49,280 --> 00:00:52,000
on the topic of uh threshold wallets and

25
00:00:52,000 --> 00:00:53,360
how to attack them

26
00:00:53,360 --> 00:00:56,160
so the work is by zafilipo mason and

27
00:00:56,160 --> 00:00:57,520
omar shlomovitz

28
00:00:57,520 --> 00:01:00,559
and omer uh will be the one that gives

29
00:01:00,559 --> 00:01:01,039
the talk

30
00:01:01,039 --> 00:01:03,359
just a reminder every talks every slot

31
00:01:03,359 --> 00:01:05,280
is 15 minutes we have approximately 10

32
00:01:05,280 --> 00:01:06,720
minutes for presentation

33
00:01:06,720 --> 00:01:08,880
and then the remaining time for your

34
00:01:08,880 --> 00:01:12,159
question omer please go ahead

35
00:01:12,159 --> 00:01:15,119
okay do you see my slides or the maybe

36
00:01:15,119 --> 00:01:17,280
yes

37
00:01:18,640 --> 00:01:21,759
okay so i can see your slides here okay

38
00:01:21,759 --> 00:01:24,320
so this is a joint work with jp um in

39
00:01:24,320 --> 00:01:25,439
which we discuss

40
00:01:25,439 --> 00:01:28,560
um a bunch of actually two attacks i'm

41
00:01:28,560 --> 00:01:29,840
going to describe now

42
00:01:29,840 --> 00:01:32,159
that were found in the wild on threshold

43
00:01:32,159 --> 00:01:33,600
wallets which are

44
00:01:33,600 --> 00:01:38,400
basically um applications that are doing

45
00:01:38,400 --> 00:01:41,439
threshold signatures uh for transactions

46
00:01:41,439 --> 00:01:42,799
on the blockchain

47
00:01:42,799 --> 00:01:45,920
now to motivate uh a bit uh as you know

48
00:01:45,920 --> 00:01:48,159
npc is getting um

49
00:01:48,159 --> 00:01:51,119
nice adoption in the industry today and

50
00:01:51,119 --> 00:01:52,960
uh by looking at members of

51
00:01:52,960 --> 00:01:54,399
the this is a snapshot of members of the

52
00:01:54,399 --> 00:01:56,560
mbc alliance you can see that

53
00:01:56,560 --> 00:01:58,640
uh around half of them are doing

54
00:01:58,640 --> 00:02:00,159
something around key management and

55
00:02:00,159 --> 00:02:01,680
specifically key management

56
00:02:01,680 --> 00:02:04,240
with the application of blockchain which

57
00:02:04,240 --> 00:02:05,600
makes sense because

58
00:02:05,600 --> 00:02:07,200
this is an interesting application and

59
00:02:07,200 --> 00:02:09,038
probably one of the killer applications

60
00:02:09,038 --> 00:02:10,318
now in npc

61
00:02:10,318 --> 00:02:13,360
since keys are representing actual

62
00:02:13,360 --> 00:02:16,640
assets or money which is uh why it's not

63
00:02:16,640 --> 00:02:18,000
surprising that

64
00:02:18,000 --> 00:02:20,800
we see a surge in open source libraries

65
00:02:20,800 --> 00:02:22,959
that are geared toward providing this

66
00:02:22,959 --> 00:02:23,680
kind of

67
00:02:23,680 --> 00:02:27,120
uh capability of doing distributed key

68
00:02:27,120 --> 00:02:28,720
generation and then distributed signing

69
00:02:28,720 --> 00:02:30,400
so this is also the framework that we

70
00:02:30,400 --> 00:02:32,319
analyzed the attacks that we found

71
00:02:32,319 --> 00:02:35,040
which are again on open source libraries

72
00:02:35,040 --> 00:02:37,040
uh we try to see what the effect of them

73
00:02:37,040 --> 00:02:38,160
and i think this is one of the most

74
00:02:38,160 --> 00:02:38,720
interesting

75
00:02:38,720 --> 00:02:42,480
uh ways that uh we're gonna show now

76
00:02:42,480 --> 00:02:45,519
what's the uh uh to view how

77
00:02:45,519 --> 00:02:49,200
it affects the um the actual

78
00:02:49,200 --> 00:02:52,560
assets and then what effect should be

79
00:02:52,560 --> 00:02:54,160
so this is a short talk and i'm not

80
00:02:54,160 --> 00:02:56,400
going to cover um

81
00:02:56,400 --> 00:02:58,959
much of what i wanted to cover but i put

82
00:02:58,959 --> 00:03:00,000
a few links here if

83
00:03:00,000 --> 00:03:02,319
anyone wants to follow up or get more

84
00:03:02,319 --> 00:03:04,480
details there is a survey that i

85
00:03:04,480 --> 00:03:06,720
had co-authored uh there is more details

86
00:03:06,720 --> 00:03:07,760
about the attacks

87
00:03:07,760 --> 00:03:09,519
more attacks tomorrow there's the

88
00:03:09,519 --> 00:03:10,879
workshop affiliated with the reload

89
00:03:10,879 --> 00:03:12,480
crypto and i'm going to describe the tax

90
00:03:12,480 --> 00:03:12,800
on

91
00:03:12,800 --> 00:03:14,720
a different protocol and then there's

92
00:03:14,720 --> 00:03:16,159
the um

93
00:03:16,159 --> 00:03:18,319
uh maybe the learnings and the the

94
00:03:18,319 --> 00:03:19,680
inside sale that

95
00:03:19,680 --> 00:03:21,599
we presented last year to a different

96
00:03:21,599 --> 00:03:23,920
audience and put more emphasis on

97
00:03:23,920 --> 00:03:26,000
so i'm not gonna need much of a

98
00:03:26,000 --> 00:03:28,000
background uh for the attacks i'm gonna

99
00:03:28,000 --> 00:03:28,959
describe

100
00:03:28,959 --> 00:03:31,760
just gonna start by saying that um like

101
00:03:31,760 --> 00:03:33,840
our first security guarantee that we try

102
00:03:33,840 --> 00:03:35,360
to achieve it is to distribute the key

103
00:03:35,360 --> 00:03:36,799
so we want to avoid

104
00:03:36,799 --> 00:03:39,840
a single point of failure this is

105
00:03:39,840 --> 00:03:42,319
the main thing here and once we

106
00:03:42,319 --> 00:03:44,000
distribute the key we also can

107
00:03:44,000 --> 00:03:45,840
can think about how to uh do a

108
00:03:45,840 --> 00:03:47,519
distributed signing so

109
00:03:47,519 --> 00:03:50,000
i can introduce this parameter t and

110
00:03:50,000 --> 00:03:52,159
what i want to achieve here is that

111
00:03:52,159 --> 00:03:54,159
this is kind of a threshold meaning that

112
00:03:54,159 --> 00:03:55,599
only if i have uh

113
00:03:55,599 --> 00:03:57,760
t plus one shells i would be able to

114
00:03:57,760 --> 00:03:58,640
sign so

115
00:03:58,640 --> 00:04:01,360
it means that if i'm uh sending having a

116
00:04:01,360 --> 00:04:02,959
one share for a party so i need t

117
00:04:02,959 --> 00:04:06,000
plus one shares the plus one parties to

118
00:04:06,000 --> 00:04:09,040
uh produce a signature and without it uh

119
00:04:09,040 --> 00:04:12,319
t and less it's useless now in the same

120
00:04:12,319 --> 00:04:14,159
uh context we can also think about the

121
00:04:14,159 --> 00:04:16,639
newport another protocol for the um

122
00:04:16,639 --> 00:04:17,839
which is where i'm going to start with

123
00:04:17,839 --> 00:04:19,279
my first attack which is the resharing

124
00:04:19,279 --> 00:04:20,478
protocol

125
00:04:20,478 --> 00:04:23,919
or um a refresh protocol um

126
00:04:23,919 --> 00:04:26,080
kiriflex which uh basically what you

127
00:04:26,080 --> 00:04:27,440
want to achieve here

128
00:04:27,440 --> 00:04:29,600
is is very simple this is uh called

129
00:04:29,600 --> 00:04:31,840
proactive security and we want an

130
00:04:31,840 --> 00:04:33,040
attacker that uh

131
00:04:33,040 --> 00:04:35,759
takes one party try to attack one party

132
00:04:35,759 --> 00:04:37,440
at a time to not be able like to break

133
00:04:37,440 --> 00:04:39,120
the chain like to not be able to

134
00:04:39,120 --> 00:04:42,639
eventually uh attack t plus one parties

135
00:04:42,639 --> 00:04:44,560
uh and and therefore what what we need

136
00:04:44,560 --> 00:04:46,160
and this is in the terminology of the

137
00:04:46,160 --> 00:04:48,160
library that we attacked already

138
00:04:48,160 --> 00:04:50,800
so we have a secret key uh sk and each

139
00:04:50,800 --> 00:04:53,120
party or the signature of the secret key

140
00:04:53,120 --> 00:04:55,280
and the output of this protocol should

141
00:04:55,280 --> 00:04:56,479
be

142
00:04:56,479 --> 00:04:58,720
a new committee same secret key this

143
00:04:58,720 --> 00:05:00,400
should be invariant but

144
00:05:00,400 --> 00:05:03,520
a new secret share per third party such

145
00:05:03,520 --> 00:05:05,280
that they are

146
00:05:05,280 --> 00:05:06,800
they are not working together the secret

147
00:05:06,800 --> 00:05:08,080
shares from the old committee and the

148
00:05:08,080 --> 00:05:09,039
new committee

149
00:05:09,039 --> 00:05:11,199
so one way to do it is by a primitive

150
00:05:11,199 --> 00:05:13,199
called verifiable secret sharing this

151
00:05:13,199 --> 00:05:14,160
vss

152
00:05:14,160 --> 00:05:16,320
it's not really important what it does

153
00:05:16,320 --> 00:05:18,560
but like the high level idea is that

154
00:05:18,560 --> 00:05:20,639
the verifiable part is a way for the

155
00:05:20,639 --> 00:05:22,880
receiver to check that indeed receive

156
00:05:22,880 --> 00:05:24,960
a correct secret share so in this case

157
00:05:24,960 --> 00:05:26,080
the old committee

158
00:05:26,080 --> 00:05:28,560
each member would signature its own

159
00:05:28,560 --> 00:05:30,080
signature

160
00:05:30,080 --> 00:05:33,360
using this uh vss and then we do these

161
00:05:33,360 --> 00:05:34,800
checks and if

162
00:05:34,800 --> 00:05:37,199
everything is fine we update our

163
00:05:37,199 --> 00:05:38,320
signature or we

164
00:05:38,320 --> 00:05:40,479
just receive it so the issue i'm not

165
00:05:40,479 --> 00:05:41,680
going to argue about the security of

166
00:05:41,680 --> 00:05:42,160
this

167
00:05:42,160 --> 00:05:44,880
high-level protocol i'm just going to go

168
00:05:44,880 --> 00:05:46,479
to the issue and here i'm going to

169
00:05:46,479 --> 00:05:47,840
assume that the old committee and the

170
00:05:47,840 --> 00:05:49,360
new committee are the same which is

171
00:05:49,360 --> 00:05:51,680
a reasonable assumption here when you

172
00:05:51,680 --> 00:05:53,199
want to indeed do this kind of

173
00:05:53,199 --> 00:05:56,160
refreshing of the key and what happens

174
00:05:56,160 --> 00:05:57,440
is that we introduce this

175
00:05:57,440 --> 00:05:59,759
reversible operation so this is

176
00:05:59,759 --> 00:06:00,560
overwriting

177
00:06:00,560 --> 00:06:02,400
of the key and and we notice that

178
00:06:02,400 --> 00:06:04,960
there's a condition right so only if

179
00:06:04,960 --> 00:06:06,720
uh all the secret shells that are

180
00:06:06,720 --> 00:06:08,479
received by the

181
00:06:08,479 --> 00:06:11,680
party are valid will do this over over

182
00:06:11,680 --> 00:06:13,680
overwrite otherwise with the border

183
00:06:13,680 --> 00:06:14,800
protocol

184
00:06:14,800 --> 00:06:16,880
so it's very easy to see what an

185
00:06:16,880 --> 00:06:18,639
attacker can do he can divide the

186
00:06:18,639 --> 00:06:20,800
committee into two sub-communities by

187
00:06:20,800 --> 00:06:22,080
sending valley chairs to

188
00:06:22,080 --> 00:06:24,160
one subset and in value chairs to the

189
00:06:24,160 --> 00:06:26,240
other subset

190
00:06:26,240 --> 00:06:29,360
now uh

191
00:06:29,360 --> 00:06:31,199
interesting to note is that while the

192
00:06:31,199 --> 00:06:32,639
model here assumes that we

193
00:06:32,639 --> 00:06:34,880
allow for t corporate parties this kind

194
00:06:34,880 --> 00:06:36,560
of attack which is very simple

195
00:06:36,560 --> 00:06:38,479
can be mounted by a single party even by

196
00:06:38,479 --> 00:06:39,840
a network adversary that

197
00:06:39,840 --> 00:06:42,960
uh cleverly can uh find

198
00:06:42,960 --> 00:06:45,680
the specific messages to drop now what i

199
00:06:45,680 --> 00:06:47,120
think is most interesting is the the

200
00:06:47,120 --> 00:06:48,960
scenarios to exploit this so one thing

201
00:06:48,960 --> 00:06:50,400
is that if this can be

202
00:06:50,400 --> 00:06:52,639
uh triggered by the attacker and indeed

203
00:06:52,639 --> 00:06:53,919
in the library that

204
00:06:53,919 --> 00:06:55,520
we looked into this was the case each

205
00:06:55,520 --> 00:06:57,759
party can can trigger this refresh

206
00:06:57,759 --> 00:06:59,599
so we can get to a point where there is

207
00:06:59,599 --> 00:07:01,840
no threshold of parties to actually

208
00:07:01,840 --> 00:07:04,560
conduct this

209
00:07:05,199 --> 00:07:07,199
signing and therefore the money that is

210
00:07:07,199 --> 00:07:08,960
uh will be locked in a sense if there is

211
00:07:08,960 --> 00:07:09,759
no backup it

212
00:07:09,759 --> 00:07:11,680
can also lead to a loss of money but

213
00:07:11,680 --> 00:07:13,120
most importantly if the attacker is

214
00:07:13,120 --> 00:07:14,960
smart enough we can get to the point

215
00:07:14,960 --> 00:07:15,520
where

216
00:07:15,520 --> 00:07:17,919
the only way to achieve a threshold is

217
00:07:17,919 --> 00:07:19,680
by uh

218
00:07:19,680 --> 00:07:21,759
using one of the shares or the attacker

219
00:07:21,759 --> 00:07:22,880
holds

220
00:07:22,880 --> 00:07:24,560
so then the attacker can say look i

221
00:07:24,560 --> 00:07:25,919
would uh sign

222
00:07:25,919 --> 00:07:29,440
and help you take the money back only if

223
00:07:29,440 --> 00:07:31,039
uh in the transaction in the message you

224
00:07:31,039 --> 00:07:32,240
would say but only if let's say half of

225
00:07:32,240 --> 00:07:33,599
the money goes to me

226
00:07:33,599 --> 00:07:35,120
all right so this is a very interesting

227
00:07:35,120 --> 00:07:37,360
uh i think uh point of view

228
00:07:37,360 --> 00:07:40,639
the security fix is uh is very simple

229
00:07:40,639 --> 00:07:40,880
it's

230
00:07:40,880 --> 00:07:43,360
easy it's easy to do but it's a bit

231
00:07:43,360 --> 00:07:44,479
painful you need to add a round of

232
00:07:44,479 --> 00:07:46,560
communication to kind of acknowledge

233
00:07:46,560 --> 00:07:49,280
um that you received in only valid

234
00:07:49,280 --> 00:07:50,639
messages

235
00:07:50,639 --> 00:07:52,720
and only then uh you can actually do

236
00:07:52,720 --> 00:07:54,720
this reversible operation fighting to

237
00:07:54,720 --> 00:07:55,520
disk

238
00:07:55,520 --> 00:07:57,919
um there is also an issue that we still

239
00:07:57,919 --> 00:07:59,520
are not getting robustness because

240
00:07:59,520 --> 00:08:02,720
the conditions uh the step of the the

241
00:08:02,720 --> 00:08:05,280
um the library is dishonest majority but

242
00:08:05,280 --> 00:08:06,639
um

243
00:08:06,639 --> 00:08:09,199
but still okay now moving on to the

244
00:08:09,199 --> 00:08:11,199
second attack and here i'm gonna

245
00:08:11,199 --> 00:08:13,360
focus on threshold dc dsl in particular

246
00:08:13,360 --> 00:08:15,440
protocol very popular one by

247
00:08:15,440 --> 00:08:17,759
uh rosario and stephen confider and

248
00:08:17,759 --> 00:08:18,639
within it there is

249
00:08:18,639 --> 00:08:20,319
a sub protocol which is a two-party

250
00:08:20,319 --> 00:08:22,639
protocol a shell conversion

251
00:08:22,639 --> 00:08:24,800
also called multiplicative to additive

252
00:08:24,800 --> 00:08:26,000
and again explain it

253
00:08:26,000 --> 00:08:27,599
it's very simple there are two parties

254
00:08:27,599 --> 00:08:29,199
alice above the old multiplicative

255
00:08:29,199 --> 00:08:30,160
secret shell

256
00:08:30,160 --> 00:08:32,159
doesn't really matter what it means and

257
00:08:32,159 --> 00:08:33,599
as output we want to achieve

258
00:08:33,599 --> 00:08:35,519
additive sequentials alpha and beta such

259
00:08:35,519 --> 00:08:36,799
that uh

260
00:08:36,799 --> 00:08:38,240
alpha plus beta would be equal to a

261
00:08:38,240 --> 00:08:40,080
times b okay so

262
00:08:40,080 --> 00:08:41,760
there are several ways to do it this is

263
00:08:41,760 --> 00:08:44,080
by the way not a new protocol

264
00:08:44,080 --> 00:08:46,480
uh and but the way that they chose to

265
00:08:46,480 --> 00:08:48,240
the autos chose to instantiate it and

266
00:08:48,240 --> 00:08:49,680
this is what implemented in most

267
00:08:49,680 --> 00:08:51,839
libraries is by using the paleo crypto

268
00:08:51,839 --> 00:08:53,200
system so you can understand the

269
00:08:53,200 --> 00:08:54,240
mechanics of

270
00:08:54,240 --> 00:08:56,240
how this achieved right so it happens

271
00:08:56,240 --> 00:08:57,760
over the cypher text and paleo is

272
00:08:57,760 --> 00:08:59,040
additive homomorphic

273
00:08:59,040 --> 00:09:01,360
so this is how it works well because we

274
00:09:01,360 --> 00:09:03,279
assume malicious adversaries we do need

275
00:09:03,279 --> 00:09:04,880
to accompany each message that we send

276
00:09:04,880 --> 00:09:07,600
with the zero knowledge proof

277
00:09:07,600 --> 00:09:09,519
and i'm not gonna explain about the

278
00:09:09,519 --> 00:09:11,200
specific protocol all i care about is

279
00:09:11,200 --> 00:09:12,800
this in all the zero knowledge proofs in

280
00:09:12,800 --> 00:09:14,080
this sub protocol

281
00:09:14,080 --> 00:09:16,399
we do need some new group that should be

282
00:09:16,399 --> 00:09:17,760
used this rsa group

283
00:09:17,760 --> 00:09:20,880
and in particular uh what we need is uh

284
00:09:20,880 --> 00:09:23,120
nh1 and h2 two group elements and the

285
00:09:23,120 --> 00:09:24,640
modulus n

286
00:09:24,640 --> 00:09:28,160
so question is uh how can we get those

287
00:09:28,160 --> 00:09:31,200
uh parameters and in the literature

288
00:09:31,200 --> 00:09:32,959
there are two obvious way to do it

289
00:09:32,959 --> 00:09:34,880
one is by using a trusted party so this

290
00:09:34,880 --> 00:09:36,000
is something we cannot assume

291
00:09:36,000 --> 00:09:37,839
in the conditions of uh the libraries

292
00:09:37,839 --> 00:09:40,480
that we attack the other is uh letting

293
00:09:40,480 --> 00:09:42,240
the verifier to generate them so in a

294
00:09:42,240 --> 00:09:44,160
zero spoof the verifier would have

295
00:09:44,160 --> 00:09:46,240
a first step of actually generating

296
00:09:46,240 --> 00:09:47,519
those parameters and then he needs to

297
00:09:47,519 --> 00:09:48,720
prove it

298
00:09:48,720 --> 00:09:51,279
that there are valid parameters with

299
00:09:51,279 --> 00:09:53,040
with another zero knowledge proof

300
00:09:53,040 --> 00:09:55,440
so this is uh in our in in the attack

301
00:09:55,440 --> 00:09:56,959
this was uh

302
00:09:56,959 --> 00:09:59,120
missing this i mean the the very far

303
00:09:59,120 --> 00:10:00,880
indeed send those details but

304
00:10:00,880 --> 00:10:03,040
there was no proof to check that those

305
00:10:03,040 --> 00:10:04,720
are actually validators

306
00:10:04,720 --> 00:10:07,680
and um this is uh when you try to

307
00:10:07,680 --> 00:10:08,560
understand in the

308
00:10:08,560 --> 00:10:10,720
security definition and and proof what's

309
00:10:10,720 --> 00:10:12,079
go what's wrong so you

310
00:10:12,079 --> 00:10:14,079
you notice that this might affect the

311
00:10:14,079 --> 00:10:15,920
zero knowledge property of the

312
00:10:15,920 --> 00:10:17,440
actual zero knowledge proof we need in

313
00:10:17,440 --> 00:10:19,680
the m2a protocol in the shell conversion

314
00:10:19,680 --> 00:10:23,360
protocol now in the setting of the

315
00:10:23,360 --> 00:10:25,120
library what what happened is that

316
00:10:25,120 --> 00:10:26,720
those parameters are generated during a

317
00:10:26,720 --> 00:10:28,079
key generation distributed key

318
00:10:28,079 --> 00:10:29,680
generation so the verifier will just

319
00:10:29,680 --> 00:10:32,000
broadcast nh1 and h2 to all the other n

320
00:10:32,000 --> 00:10:33,440
minus one parties

321
00:10:33,440 --> 00:10:36,240
from that point uh they would simply use

322
00:10:36,240 --> 00:10:36,640
them

323
00:10:36,640 --> 00:10:39,680
throughout signing now doing uh let's

324
00:10:39,680 --> 00:10:40,399
look at

325
00:10:40,399 --> 00:10:42,720
one kind of zero knowledge proof that is

326
00:10:42,720 --> 00:10:44,079
part of the

327
00:10:44,079 --> 00:10:45,519
shell conversion protocol the first one

328
00:10:45,519 --> 00:10:47,200
and the most simple is the range move

329
00:10:47,200 --> 00:10:48,640
so it doesn't really matter what the

330
00:10:48,640 --> 00:10:50,560
range proof is doing

331
00:10:50,560 --> 00:10:51,920
all i want to focus is on the first

332
00:10:51,920 --> 00:10:54,240
message of the zero of the range move

333
00:10:54,240 --> 00:10:56,079
and here this uh this is a commitment in

334
00:10:56,079 --> 00:10:57,440
this sent from the prover to the

335
00:10:57,440 --> 00:10:58,240
verifier

336
00:10:58,240 --> 00:11:01,839
so as we'll see each pool each n minus

337
00:11:01,839 --> 00:11:03,680
one of the n of the n minus one parties

338
00:11:03,680 --> 00:11:06,000
would send it to the verifier

339
00:11:06,000 --> 00:11:08,240
and uh the x i unfortunately are the

340
00:11:08,240 --> 00:11:09,279
sacred shells of

341
00:11:09,279 --> 00:11:12,720
of each party so we can first get rid of

342
00:11:12,720 --> 00:11:14,000
h2 by by picking

343
00:11:14,000 --> 00:11:17,040
it to be one uh h1

344
00:11:17,040 --> 00:11:18,720
it can be a small number like two but

345
00:11:18,720 --> 00:11:20,640
most importantly n can be chosen to be a

346
00:11:20,640 --> 00:11:22,959
composite with small prime factor then

347
00:11:22,959 --> 00:11:25,519
it's very easy to attack and recover x i

348
00:11:25,519 --> 00:11:26,800
by just

349
00:11:26,800 --> 00:11:29,440
uh using your favorite discrete

350
00:11:29,440 --> 00:11:30,480
computation

351
00:11:30,480 --> 00:11:32,480
algorithm this is by the way the same as

352
00:11:32,480 --> 00:11:34,320
was done in the moscow voting system

353
00:11:34,320 --> 00:11:35,519
attack

354
00:11:35,519 --> 00:11:37,120
presented last year so this is option

355
00:11:37,120 --> 00:11:39,120
two so this is again an

356
00:11:39,120 --> 00:11:40,640
attack that can be mounted by a single

357
00:11:40,640 --> 00:11:42,399
party whatever but we

358
00:11:42,399 --> 00:11:44,079
do require that there is a persistence

359
00:11:44,079 --> 00:11:45,600
between the key generation and at least

360
00:11:45,600 --> 00:11:46,720
one signing now

361
00:11:46,720 --> 00:11:48,720
let's just uh go step by step on the

362
00:11:48,720 --> 00:11:50,399
attack during the distributed key

363
00:11:50,399 --> 00:11:51,839
generation the attacker

364
00:11:51,839 --> 00:11:54,000
would both have the parameters then we

365
00:11:54,000 --> 00:11:55,920
need only single signature and the other

366
00:11:55,920 --> 00:11:57,600
tea parties would send the corrupted

367
00:11:57,600 --> 00:11:59,279
range proofs to the attacker as part of

368
00:11:59,279 --> 00:11:59,839
this

369
00:11:59,839 --> 00:12:01,760
protocol the attacker will learn all the

370
00:12:01,760 --> 00:12:03,200
secret key shares and from that point he

371
00:12:03,200 --> 00:12:04,800
can just do whatever he wants and

372
00:12:04,800 --> 00:12:06,720
steal the money what's nice is that

373
00:12:06,720 --> 00:12:08,079
because we only affected the zero

374
00:12:08,079 --> 00:12:09,360
knowledge property signatures would

375
00:12:09,360 --> 00:12:10,800
still pass verification i mean nothing

376
00:12:10,800 --> 00:12:13,440
wrong and it goes undetected

377
00:12:13,440 --> 00:12:16,240
another mitigation is very simple uh so

378
00:12:16,240 --> 00:12:17,200
uh

379
00:12:17,200 --> 00:12:18,880
there are a few ways in the literature

380
00:12:18,880 --> 00:12:20,320
how to check correctness of these

381
00:12:20,320 --> 00:12:21,200
parameters

382
00:12:21,200 --> 00:12:23,839
and i would end up with uh i mean maybe

383
00:12:23,839 --> 00:12:24,880
one question is

384
00:12:24,880 --> 00:12:26,880
whether those protocols are mature

385
00:12:26,880 --> 00:12:28,079
enough

386
00:12:28,079 --> 00:12:29,920
and we should use them and i mean my

387
00:12:29,920 --> 00:12:31,360
personal opinion

388
00:12:31,360 --> 00:12:33,200
is that uh we should keep pushing them i

389
00:12:33,200 --> 00:12:35,120
mean it's fantastic to see finally

390
00:12:35,120 --> 00:12:38,959
mpc in in real world uh production

391
00:12:38,959 --> 00:12:40,000
systems

392
00:12:40,000 --> 00:12:42,800
and like every other uh crypto system

393
00:12:42,800 --> 00:12:44,800
and and big system there are

394
00:12:44,800 --> 00:12:48,000
issues and uh we should keep uh do our

395
00:12:48,000 --> 00:12:48,880
best to

396
00:12:48,880 --> 00:12:53,839
uncover those that's it

397
00:12:55,040 --> 00:12:57,360
all right so omar thank you thank you

398
00:12:57,360 --> 00:12:58,320
very much

399
00:12:58,320 --> 00:13:01,200
uh we do have time for a couple of

400
00:13:01,200 --> 00:13:02,240
questions

401
00:13:02,240 --> 00:13:05,440
so let me just end as

402
00:13:05,440 --> 00:13:07,360
as i said also at the beginning if you

403
00:13:07,360 --> 00:13:09,360
have questions for homer please post

404
00:13:09,360 --> 00:13:12,000
them on zulip you can find the link

405
00:13:12,000 --> 00:13:15,760
um on the chat um

406
00:13:15,760 --> 00:13:18,639
question by daniel shepherd um what

407
00:13:18,639 --> 00:13:19,279
happens

408
00:13:19,279 --> 00:13:22,800
um if the newly added act messages are

409
00:13:22,800 --> 00:13:26,079
blocked for some subset

410
00:13:27,200 --> 00:13:29,360
yeah that's uh that's a good point uh i

411
00:13:29,360 --> 00:13:30,560
mean this is uh

412
00:13:30,560 --> 00:13:33,360
i'm i'm not going to argue but also

413
00:13:33,360 --> 00:13:34,160
about the

414
00:13:34,160 --> 00:13:36,160
initial sharing protocol that it's

415
00:13:36,160 --> 00:13:37,360
secure might be

416
00:13:37,360 --> 00:13:39,839
other issues but but definitely i didn't

417
00:13:39,839 --> 00:13:41,600
look at the exact details of

418
00:13:41,600 --> 00:13:43,040
the we didn't look at the exact details

419
00:13:43,040 --> 00:13:45,120
of what happens of how they actually

420
00:13:45,120 --> 00:13:45,760
patched it

421
00:13:45,760 --> 00:13:48,320
uh in the library i do know that it

422
00:13:48,320 --> 00:13:50,320
involved eventually a lot of code and

423
00:13:50,320 --> 00:13:52,399
it's open i mean maybe there's uh more

424
00:13:52,399 --> 00:13:55,040
issues that yes

425
00:13:58,160 --> 00:14:01,199
um okay um maybe a more a more broader

426
00:14:01,199 --> 00:14:02,320
question over um

427
00:14:02,320 --> 00:14:06,320
so this this type of protocols are

428
00:14:06,320 --> 00:14:08,480
particularly also important for entities

429
00:14:08,480 --> 00:14:09,680
that

430
00:14:09,680 --> 00:14:11,279
manage a lot of assets for example

431
00:14:11,279 --> 00:14:12,959
exchanges is a

432
00:14:12,959 --> 00:14:16,000
is one of the typical scenario where

433
00:14:16,000 --> 00:14:17,519
someone would say

434
00:14:17,519 --> 00:14:19,440
uh it's extremely important to have a

435
00:14:19,440 --> 00:14:20,959
system like that not to mention

436
00:14:20,959 --> 00:14:23,040
you know other entities but here is a

437
00:14:23,040 --> 00:14:24,160
quick example

438
00:14:24,160 --> 00:14:27,120
so is there was there any impact from

439
00:14:27,120 --> 00:14:28,880
this particular attacks

440
00:14:28,880 --> 00:14:32,240
or was there anything else that was um

441
00:14:32,240 --> 00:14:34,880
you know directly impacted by uh you

442
00:14:34,880 --> 00:14:35,760
know finding these

443
00:14:35,760 --> 00:14:37,839
issues or were these any live

444
00:14:37,839 --> 00:14:39,680
implementations that were passed

445
00:14:39,680 --> 00:14:42,800
what was the real world aspect in terms

446
00:14:42,800 --> 00:14:43,199
of

447
00:14:43,199 --> 00:14:45,680
deployed systems that was affected by

448
00:14:45,680 --> 00:14:46,560
these

449
00:14:46,560 --> 00:14:49,680
these results yeah i like it a blackhead

450
00:14:49,680 --> 00:14:51,440
question so yes

451
00:14:51,440 --> 00:14:55,360
all of the attacks we found happened

452
00:14:55,360 --> 00:14:59,199
or affected production systems including

453
00:14:59,199 --> 00:15:01,440
very big exchanges probably the biggest

454
00:15:01,440 --> 00:15:03,279
exchanges

455
00:15:03,279 --> 00:15:08,880
and they they were disclosed

456
00:15:08,880 --> 00:15:12,480
in the right way and we done the process

457
00:15:12,480 --> 00:15:13,680
to to make the

458
00:15:13,680 --> 00:15:15,360
to make the changes and again as you can

459
00:15:15,360 --> 00:15:17,279
see for example in the first attack

460
00:15:17,279 --> 00:15:19,120
there was a big implication of adding a

461
00:15:19,120 --> 00:15:20,720
new round of communication this

462
00:15:20,720 --> 00:15:22,480
creates a pain to to for example in

463
00:15:22,480 --> 00:15:25,440
exchange it now needs to

464
00:15:25,440 --> 00:15:27,680
make all the parties go online for more

465
00:15:27,680 --> 00:15:29,519
time to to coordinate for different

466
00:15:29,519 --> 00:15:31,120
those are synchronous protocols

467
00:15:31,120 --> 00:15:34,480
so yeah it had the implication in

468
00:15:34,480 --> 00:15:37,920
uh efficient yeah just as a quick

469
00:15:37,920 --> 00:15:39,440
follow-up like

470
00:15:39,440 --> 00:15:41,360
perhaps because this this plays a role

471
00:15:41,360 --> 00:15:42,959
in some cases in terms of designing

472
00:15:42,959 --> 00:15:44,320
these protocols do you have like an

473
00:15:44,320 --> 00:15:45,440
estimate of the

474
00:15:45,440 --> 00:15:48,160
of the size of n let's say in in these

475
00:15:48,160 --> 00:15:49,440
actual instances

476
00:15:49,440 --> 00:15:51,839
so um you know it's like just a handful

477
00:15:51,839 --> 00:15:53,440
of parties like

478
00:15:53,440 --> 00:15:55,279
did you have any information like that

479
00:15:55,279 --> 00:15:57,120
and uh of course i understand that these

480
00:15:57,120 --> 00:15:59,199
protocols are designed for any end but

481
00:15:59,199 --> 00:16:00,880
taking into account the actual values

482
00:16:00,880 --> 00:16:02,480
you know might be interesting in some

483
00:16:02,480 --> 00:16:06,000
in in the design process perhaps

484
00:16:06,000 --> 00:16:08,399
yeah it's a it's a good question uh i

485
00:16:08,399 --> 00:16:09,199
mean

486
00:16:09,199 --> 00:16:12,720
i think that uh n equals 18

487
00:16:12,720 --> 00:16:16,880
is the largest that i encountered

488
00:16:16,880 --> 00:16:19,759
but it is usually much lower than that

489
00:16:19,759 --> 00:16:21,120
again there is a

490
00:16:21,120 --> 00:16:23,600
big penalty on using this in like you

491
00:16:23,600 --> 00:16:24,720
know in

492
00:16:24,720 --> 00:16:27,279
in live environments on communication

493
00:16:27,279 --> 00:16:27,839
and

494
00:16:27,839 --> 00:16:31,120
complexity makes it uh um

495
00:16:31,120 --> 00:16:34,320
very slow so usually you don't consider

496
00:16:34,320 --> 00:16:37,519
too many parties uh but uh

497
00:16:37,519 --> 00:16:39,839
we can i mean it depends like people are

498
00:16:39,839 --> 00:16:42,800
using different settings of tn and

499
00:16:42,800 --> 00:16:45,279
products

500
00:16:46,240 --> 00:16:49,279
okay um maybe one

501
00:16:49,279 --> 00:16:51,759
just maybe one final question um two

502
00:16:51,759 --> 00:16:53,440
more posted question by uh

503
00:16:53,440 --> 00:16:56,320
jake craig um what are your thoughts on

504
00:16:56,320 --> 00:16:57,680
stateful versus stateful

505
00:16:57,680 --> 00:16:59,920
stateless threshold protocols and how

506
00:16:59,920 --> 00:17:01,120
those might affect secure

507
00:17:01,120 --> 00:17:03,440
implementations e.g failing to delete

508
00:17:03,440 --> 00:17:06,880
overwrite shares reusing nonsense

509
00:17:06,880 --> 00:17:10,240
et cetera oh i think that

510
00:17:10,240 --> 00:17:12,559
at least for me stateless is the best we

511
00:17:12,559 --> 00:17:14,240
can get or non-interactive

512
00:17:14,240 --> 00:17:17,439
in a sense it eliminates many of the

513
00:17:17,439 --> 00:17:19,839
potential issues that might occur i mean

514
00:17:19,839 --> 00:17:21,119
just think about

515
00:17:21,119 --> 00:17:23,199
a round of communication around the

516
00:17:23,199 --> 00:17:25,039
commitment and then on the commitment

517
00:17:25,039 --> 00:17:25,839
when you

518
00:17:25,839 --> 00:17:27,919
try to explain it to a software engineer

519
00:17:27,919 --> 00:17:29,360
he doesn't see the point of it so he

520
00:17:29,360 --> 00:17:29,919
says

521
00:17:29,919 --> 00:17:31,440
why should i send something and then

522
00:17:31,440 --> 00:17:33,520
send the other thing and it gives me

523
00:17:33,520 --> 00:17:34,080
nothing

524
00:17:34,080 --> 00:17:37,200
let's just uh not do it at all so

525
00:17:37,200 --> 00:17:38,880
if you can manage to squeeze everything

526
00:17:38,880 --> 00:17:40,559
into i don't know if the example was

527
00:17:40,559 --> 00:17:42,880
was made sense but what i'm saying is

528
00:17:42,880 --> 00:17:45,120
that at least uh from my point of view

529
00:17:45,120 --> 00:17:47,120
being stateless there's a lot of uh

530
00:17:47,120 --> 00:17:48,559
there's also

531
00:17:48,559 --> 00:17:50,000
issues with how i mean there's a lot of

532
00:17:50,000 --> 00:17:51,440
benefits to go stateless so if it's

533
00:17:51,440 --> 00:17:52,880
possible but in this case in easy they

534
00:17:52,880 --> 00:17:54,320
say it was not

535
00:17:54,320 --> 00:17:57,039
um i mean there are some breakthroughs

536
00:17:57,039 --> 00:17:57,520
but

537
00:17:57,520 --> 00:17:59,280
there's no there's still not something

538
00:17:59,280 --> 00:18:02,320
production that is completely stateless

539
00:18:02,320 --> 00:18:04,880
okay um thanks so much um there's

540
00:18:04,880 --> 00:18:06,080
there's one more question but

541
00:18:06,080 --> 00:18:08,559
uh we have to wrap up now so we can move

542
00:18:08,559 --> 00:18:10,160
we can move to the next talk

543
00:18:10,160 --> 00:18:13,280
um i would also ask omar if you you may

544
00:18:13,280 --> 00:18:14,000
want to have a look

545
00:18:14,000 --> 00:18:16,720
directly at zulip and and take up any

546
00:18:16,720 --> 00:18:18,320
any further questions there be great

547
00:18:18,320 --> 00:18:19,919
thank you so much

548
00:18:19,919 --> 00:18:23,280
um so with this um i'm gonna move to the

549
00:18:23,280 --> 00:18:24,960
second talk

550
00:18:24,960 --> 00:18:27,200
um of this session from crypto paper to

551
00:18:27,200 --> 00:18:28,000
cryptocurrency

552
00:18:28,000 --> 00:18:30,559
the cardano consensus layer um and this

553
00:18:30,559 --> 00:18:32,799
is a presentation by christian badritzer

554
00:18:32,799 --> 00:18:34,720
dr cootson and philip cutt

555
00:18:34,720 --> 00:18:38,400
and i think i see christian and

556
00:18:38,400 --> 00:18:41,360
christian now just on to you thank you

557
00:18:41,360 --> 00:18:44,080
um so this is a joint talk as you said

558
00:18:44,080 --> 00:18:46,240
uh for the sake of this la of this uh

559
00:18:46,240 --> 00:18:47,120
live talk

560
00:18:47,120 --> 00:18:48,799
we just have one speaker transition from

561
00:18:48,799 --> 00:18:50,880
me to philip and we have a full version

562
00:18:50,880 --> 00:18:52,080
of this talk online

563
00:18:52,080 --> 00:18:54,840
where all of all the three of us uh are

564
00:18:54,840 --> 00:18:56,240
speaking

565
00:18:56,240 --> 00:19:00,000
so um the

566
00:19:00,000 --> 00:19:01,679
like a brief overview of this talk is

567
00:19:01,679 --> 00:19:03,679
that i will first cover some uh

568
00:19:03,679 --> 00:19:06,480
general aspects from theory to practice

569
00:19:06,480 --> 00:19:07,360
uh we then

570
00:19:07,360 --> 00:19:09,440
cover some aspects on the formal methods

571
00:19:09,440 --> 00:19:11,760
and the implementation correctness

572
00:19:11,760 --> 00:19:14,000
of the cardano consensus layer what

573
00:19:14,000 --> 00:19:15,600
could have gone wrong if we hadn't

574
00:19:15,600 --> 00:19:17,679
followed such a strict approach to its

575
00:19:17,679 --> 00:19:18,960
implementation

576
00:19:18,960 --> 00:19:21,200
and finally we also want to discuss some

577
00:19:21,200 --> 00:19:23,039
brief points about

578
00:19:23,039 --> 00:19:27,200
a safe transition to decentralization

579
00:19:27,200 --> 00:19:30,240
so the cardano consensus layer is at its

580
00:19:30,240 --> 00:19:30,880
core

581
00:19:30,880 --> 00:19:33,440
a distributed computation over a network

582
00:19:33,440 --> 00:19:35,200
and as such it's a cryptographic

583
00:19:35,200 --> 00:19:37,200
protocol and in theory papers

584
00:19:37,200 --> 00:19:39,520
we define a protocol execution model

585
00:19:39,520 --> 00:19:41,679
quite naturally so we model parties as

586
00:19:41,679 --> 00:19:44,320
interactive machines that execute the

587
00:19:44,320 --> 00:19:46,000
protocol instructions

588
00:19:46,000 --> 00:19:48,320
we formalize the assumed resources that

589
00:19:48,320 --> 00:19:50,000
the protocol can use like

590
00:19:50,000 --> 00:19:52,320
what type of network is there is there a

591
00:19:52,320 --> 00:19:54,080
clock is there a random oracle

592
00:19:54,080 --> 00:19:56,480
and we formalization i mean we abstract

593
00:19:56,480 --> 00:19:57,280
away

594
00:19:57,280 --> 00:20:00,000
the real-life object a bit and specified

595
00:20:00,000 --> 00:20:01,600
in a language that is more friendly for

596
00:20:01,600 --> 00:20:02,320
proofs

597
00:20:02,320 --> 00:20:04,799
such as pseudo code or any other formal

598
00:20:04,799 --> 00:20:07,039
or more formal language

599
00:20:07,039 --> 00:20:08,960
and here an important interplay already

600
00:20:08,960 --> 00:20:11,360
pops up between theory and engineering

601
00:20:11,360 --> 00:20:13,760
we must abstract all so we must keep all

602
00:20:13,760 --> 00:20:15,360
relevant properties and should only

603
00:20:15,360 --> 00:20:16,559
abstract the way

604
00:20:16,559 --> 00:20:18,799
if details that are not relevant so what

605
00:20:18,799 --> 00:20:20,559
should not happen is that we later deem

606
00:20:20,559 --> 00:20:21,760
something relevant

607
00:20:21,760 --> 00:20:24,000
and this is of course an interplay

608
00:20:24,000 --> 00:20:24,960
because you cannot

609
00:20:24,960 --> 00:20:28,799
always know everything in advance

610
00:20:28,799 --> 00:20:32,000
a theory paper also has a it's part of

611
00:20:32,000 --> 00:20:33,280
the model

612
00:20:33,280 --> 00:20:35,600
must consider that parties might behave

613
00:20:35,600 --> 00:20:36,799
in a byzantine way

614
00:20:36,799 --> 00:20:39,600
controlled by an attacker it must take

615
00:20:39,600 --> 00:20:41,200
into account that some people

616
00:20:41,200 --> 00:20:44,240
are rational they must be incentivized

617
00:20:44,240 --> 00:20:47,600
to contribute to the protocol and so a

618
00:20:47,600 --> 00:20:49,120
protocol must be aligned with an

619
00:20:49,120 --> 00:20:51,200
incentive mechanism

620
00:20:51,200 --> 00:20:53,120
finally we also have to deal with

621
00:20:53,120 --> 00:20:54,400
machine failures

622
00:20:54,400 --> 00:20:56,320
parties get disconnected and they have

623
00:20:56,320 --> 00:20:58,159
to join again later and this should be a

624
00:20:58,159 --> 00:20:59,440
smooth

625
00:20:59,440 --> 00:21:03,280
transition so overall

626
00:21:03,280 --> 00:21:05,360
we have fine-grained security models in

627
00:21:05,360 --> 00:21:07,120
the papers and coupled with a strong

628
00:21:07,120 --> 00:21:08,799
notion of security like security under

629
00:21:08,799 --> 00:21:09,679
composition

630
00:21:09,679 --> 00:21:11,840
you actually get a meaningful security

631
00:21:11,840 --> 00:21:14,240
proof that is meaningful for practice in

632
00:21:14,240 --> 00:21:15,200
particular

633
00:21:15,200 --> 00:21:17,520
why because if we assume we have

634
00:21:17,520 --> 00:21:18,799
captured all

635
00:21:18,799 --> 00:21:21,440
properties we need and we have a strict

636
00:21:21,440 --> 00:21:22,720
security notion

637
00:21:22,720 --> 00:21:25,919
then we are kind of worst case and real

638
00:21:25,919 --> 00:21:26,480
life is

639
00:21:26,480 --> 00:21:28,000
probably a bit more friendly to our

640
00:21:28,000 --> 00:21:30,080
protocol that what we assume in our

641
00:21:30,080 --> 00:21:33,840
model and this is the very important

642
00:21:33,840 --> 00:21:34,880
aspect of

643
00:21:34,880 --> 00:21:36,960
designing a from a theory point of view

644
00:21:36,960 --> 00:21:39,200
a model that makes sense

645
00:21:39,200 --> 00:21:40,799
from a theoretical point of view we know

646
00:21:40,799 --> 00:21:43,200
what the card consensus layer should

647
00:21:43,200 --> 00:21:45,520
achieve we should realize a lecture that

648
00:21:45,520 --> 00:21:47,360
is persistent in life

649
00:21:47,360 --> 00:21:49,760
so it should record transactions and

650
00:21:49,760 --> 00:21:51,600
this should be immutable or state

651
00:21:51,600 --> 00:21:53,600
transitions that are immutable

652
00:21:53,600 --> 00:21:55,600
it should be live so this develops over

653
00:21:55,600 --> 00:21:57,679
time and the system makes progress

654
00:21:57,679 --> 00:21:59,919
we also know that uroboros is a nakamoto

655
00:21:59,919 --> 00:22:01,200
style proof-of-stake

656
00:22:01,200 --> 00:22:03,360
blockchain protocol that realizes such a

657
00:22:03,360 --> 00:22:04,320
lecture

658
00:22:04,320 --> 00:22:06,080
just to recall nakamoto-style

659
00:22:06,080 --> 00:22:07,919
blockchains typically kick off the

660
00:22:07,919 --> 00:22:09,200
genesis block

661
00:22:09,200 --> 00:22:10,799
then we have a lottery on who is the

662
00:22:10,799 --> 00:22:12,799
next block proposers

663
00:22:12,799 --> 00:22:15,360
and proposers are elected proportional

664
00:22:15,360 --> 00:22:17,200
to the stake they have

665
00:22:17,200 --> 00:22:19,760
and this randomized process although it

666
00:22:19,760 --> 00:22:21,200
might be that we have such a fork

667
00:22:21,200 --> 00:22:22,799
structure and we might disagree on the

668
00:22:22,799 --> 00:22:23,760
most recent

669
00:22:23,760 --> 00:22:27,200
blocks whenever we every one of us takes

670
00:22:27,200 --> 00:22:29,280
uh from the local point of view the best

671
00:22:29,280 --> 00:22:30,480
chain

672
00:22:30,480 --> 00:22:32,240
what we have is we always share a common

673
00:22:32,240 --> 00:22:34,400
prefix of course you have to prove this

674
00:22:34,400 --> 00:22:36,960
the chain grows we have enough valve

675
00:22:36,960 --> 00:22:38,799
form blocks and

676
00:22:38,799 --> 00:22:40,559
this holds under the for example under

677
00:22:40,559 --> 00:22:44,159
the honest majority of stake consumption

678
00:22:44,159 --> 00:22:46,720
roboros has developed over a series of

679
00:22:46,720 --> 00:22:48,159
works

680
00:22:48,159 --> 00:22:50,080
to achieve this resilient design we have

681
00:22:50,080 --> 00:22:51,440
sketched and

682
00:22:51,440 --> 00:22:53,360
all these papers they of course live in

683
00:22:53,360 --> 00:22:55,440
an abstract and proof oriented world

684
00:22:55,440 --> 00:22:59,200
as we have seen and from a conceptual

685
00:22:59,200 --> 00:23:00,320
point of view

686
00:23:00,320 --> 00:23:03,520
this series also makes a lot of sense

687
00:23:03,520 --> 00:23:06,960
uh at crypto 17 it kicked off

688
00:23:06,960 --> 00:23:09,440
with assuming for example a synchronous

689
00:23:09,440 --> 00:23:12,159
model of computation static corruptions

690
00:23:12,159 --> 00:23:15,440
in prows we tolerated adaptive

691
00:23:15,440 --> 00:23:17,440
corruptions and removed this rigid

692
00:23:17,440 --> 00:23:20,159
message passing round structure

693
00:23:20,159 --> 00:23:23,200
we have so there is a design for a

694
00:23:23,200 --> 00:23:24,960
reward sharing scheme for stake pools

695
00:23:24,960 --> 00:23:26,320
there is also implemented

696
00:23:26,320 --> 00:23:27,919
that helps the system to establish an

697
00:23:27,919 --> 00:23:30,240
equilibrium to achieve a large number of

698
00:23:30,240 --> 00:23:30,880
pools

699
00:23:30,880 --> 00:23:33,919
with high commitment to the system

700
00:23:33,919 --> 00:23:37,280
um in further development steps we dealt

701
00:23:37,280 --> 00:23:37,919
with this

702
00:23:37,919 --> 00:23:39,919
uh joining after this connection in a

703
00:23:39,919 --> 00:23:41,520
decentralized manner

704
00:23:41,520 --> 00:23:44,159
we gained resilience by less dependency

705
00:23:44,159 --> 00:23:45,600
on external services

706
00:23:45,600 --> 00:23:48,960
we also have privacy designs well this

707
00:23:48,960 --> 00:23:49,679
all seems

708
00:23:49,679 --> 00:23:53,600
so ordered uh in theory at least but is

709
00:23:53,600 --> 00:23:54,799
this still the case

710
00:23:54,799 --> 00:23:57,919
when we move uh from theory to practice

711
00:23:57,919 --> 00:23:59,360
and with this question i would like to

712
00:23:59,360 --> 00:24:02,840
pass it on to philip

713
00:24:02,840 --> 00:24:05,840
please

714
00:24:08,960 --> 00:24:11,840
does it share my

715
00:24:12,159 --> 00:24:15,600
no looks good look ah

716
00:24:15,600 --> 00:24:18,640
looked good sorry

717
00:24:18,640 --> 00:24:23,840
um i can't find it here

718
00:24:23,840 --> 00:24:27,600
sorry screen too

719
00:24:30,840 --> 00:24:33,840
um

720
00:24:36,660 --> 00:24:39,200
[Music]

721
00:24:39,200 --> 00:24:42,400
this is the birds yeah

722
00:24:42,400 --> 00:24:47,840
this one

723
00:24:52,480 --> 00:24:55,760
do we see the screenshot now yes

724
00:24:55,760 --> 00:24:58,559
okay i i don't see but okay that's fine

725
00:24:58,559 --> 00:24:59,200
okay

726
00:24:59,200 --> 00:25:00,400
thank you for that question uh the

727
00:25:00,400 --> 00:25:01,600
answer is of course that it's much more

728
00:25:01,600 --> 00:25:03,520
interesting in practice than it is in

729
00:25:03,520 --> 00:25:04,880
theory

730
00:25:04,880 --> 00:25:07,039
so um in practice you have that

731
00:25:07,039 --> 00:25:08,000
interplay where you

732
00:25:08,000 --> 00:25:10,000
do some research and that's the basis

733
00:25:10,000 --> 00:25:11,760
the foundation for implementing

734
00:25:11,760 --> 00:25:12,320
something

735
00:25:12,320 --> 00:25:14,400
and then running that in production

736
00:25:14,400 --> 00:25:15,840
actually it tells you and guides the

737
00:25:15,840 --> 00:25:17,679
further questions that you have

738
00:25:17,679 --> 00:25:19,440
for your future research and so there's

739
00:25:19,440 --> 00:25:20,640
this interplay where you start with

740
00:25:20,640 --> 00:25:22,320
research implement something

741
00:25:22,320 --> 00:25:25,440
go back to research and

742
00:25:25,440 --> 00:25:27,520
refine your system and get an improved

743
00:25:27,520 --> 00:25:28,640
understanding of the coins as you go

744
00:25:28,640 --> 00:25:30,559
along and get better and better

745
00:25:30,559 --> 00:25:32,000
let's talk about how we make sure that

746
00:25:32,000 --> 00:25:34,159
actually what we have in the in the code

747
00:25:34,159 --> 00:25:36,080
matches what's in the papers

748
00:25:36,080 --> 00:25:37,760
so the first step is to look at your

749
00:25:37,760 --> 00:25:39,760
system as

750
00:25:39,760 --> 00:25:41,760
a number of components and decide which

751
00:25:41,760 --> 00:25:43,360
components are the crucial ones to get

752
00:25:43,360 --> 00:25:43,840
right

753
00:25:43,840 --> 00:25:45,120
where it's really expensive if you if

754
00:25:45,120 --> 00:25:47,120
you make mistakes and that is of course

755
00:25:47,120 --> 00:25:48,880
the consensus layer

756
00:25:48,880 --> 00:25:50,559
and it's also the transaction layer

757
00:25:50,559 --> 00:25:52,559
where all the transactions are kept

758
00:25:52,559 --> 00:25:55,919
and for the transactions we can get a

759
00:25:55,919 --> 00:25:57,200
formal specification

760
00:25:57,200 --> 00:25:59,360
in terms of transition rules where we

761
00:25:59,360 --> 00:26:01,039
have the state of the system

762
00:26:01,039 --> 00:26:02,720
and then some transactions are added to

763
00:26:02,720 --> 00:26:04,559
the ledger and we have a new state

764
00:26:04,559 --> 00:26:06,240
and we have certain conditions that need

765
00:26:06,240 --> 00:26:08,240
to be fulfilled in order for that

766
00:26:08,240 --> 00:26:09,760
transaction to be valid

767
00:26:09,760 --> 00:26:12,720
and we can formulate that in this this

768
00:26:12,720 --> 00:26:14,480
mathematical language which is basically

769
00:26:14,480 --> 00:26:15,679
just set theory

770
00:26:15,679 --> 00:26:17,760
which is very unambiguous and concise

771
00:26:17,760 --> 00:26:19,600
and that's a good way to to talk about

772
00:26:19,600 --> 00:26:21,760
the system and to converge to a to a

773
00:26:21,760 --> 00:26:22,559
design

774
00:26:22,559 --> 00:26:24,240
and it's also very good and it's very

775
00:26:24,240 --> 00:26:25,600
suitable to actually go to an

776
00:26:25,600 --> 00:26:27,039
implementation because the translation

777
00:26:27,039 --> 00:26:28,559
of that formal specification to hassle

778
00:26:28,559 --> 00:26:29,120
code

779
00:26:29,120 --> 00:26:31,760
is more as a word by word translation

780
00:26:31,760 --> 00:26:33,440
and then you end up with an executable

781
00:26:33,440 --> 00:26:35,120
version of that specification and you

782
00:26:35,120 --> 00:26:36,559
can audit just

783
00:26:36,559 --> 00:26:38,000
that it's that it's matching that

784
00:26:38,000 --> 00:26:39,679
specification of course that's not

785
00:26:39,679 --> 00:26:40,159
enough

786
00:26:40,159 --> 00:26:41,200
for an order for its system to be

787
00:26:41,200 --> 00:26:42,799
correct because what you're interested

788
00:26:42,799 --> 00:26:44,320
in is not those those small transition

789
00:26:44,320 --> 00:26:45,600
rules but it's like the

790
00:26:45,600 --> 00:26:47,279
it's the macroscopic probabilities of

791
00:26:47,279 --> 00:26:48,960
the system something

792
00:26:48,960 --> 00:26:51,279
like whatever i do what kind of

793
00:26:51,279 --> 00:26:52,559
transactions i apply

794
00:26:52,559 --> 00:26:54,640
value is conserved overall in the system

795
00:26:54,640 --> 00:26:55,919
and so what you do with that is that you

796
00:26:55,919 --> 00:26:57,360
write down those properties and you can

797
00:26:57,360 --> 00:26:58,960
prove them against the specification

798
00:26:58,960 --> 00:27:00,320
and you can also test them against your

799
00:27:00,320 --> 00:27:01,760
code using a technique called

800
00:27:01,760 --> 00:27:03,600
property-based testing where you

801
00:27:03,600 --> 00:27:06,480
encode those properties and you take

802
00:27:06,480 --> 00:27:08,080
your code and their properties and you

803
00:27:08,080 --> 00:27:08,880
generate

804
00:27:08,880 --> 00:27:12,320
randomized input data and

805
00:27:12,320 --> 00:27:13,919
then you can basically check that for

806
00:27:13,919 --> 00:27:15,520
all this random input data those

807
00:27:15,520 --> 00:27:17,120
properties are always fulfilled

808
00:27:17,120 --> 00:27:18,480
and that is very nice because in

809
00:27:18,480 --> 00:27:20,640
particular if you do get a test failure

810
00:27:20,640 --> 00:27:22,799
you can shrink that test data to get a

811
00:27:22,799 --> 00:27:24,480
minimal counter example and that tells

812
00:27:24,480 --> 00:27:25,039
you

813
00:27:25,039 --> 00:27:27,039
precisely what is going wrong in in your

814
00:27:27,039 --> 00:27:28,559
in your system

815
00:27:28,559 --> 00:27:30,159
for the consensus layer things are more

816
00:27:30,159 --> 00:27:32,039
complicated because that's

817
00:27:32,039 --> 00:27:34,960
inherently um it uses concurrency

818
00:27:34,960 --> 00:27:36,159
and concurrent systems are

819
00:27:36,159 --> 00:27:38,480
non-deterministic so they are harder to

820
00:27:38,480 --> 00:27:40,399
to formally specify and they are also

821
00:27:40,399 --> 00:27:41,840
harder to test

822
00:27:41,840 --> 00:27:45,279
in particular you can't you

823
00:27:45,279 --> 00:27:47,600
can't shrink those test cases because

824
00:27:47,600 --> 00:27:49,279
test cases that failed

825
00:27:49,279 --> 00:27:50,320
they might succeed in another run

826
00:27:50,320 --> 00:27:51,760
without any relevant change in the test

827
00:27:51,760 --> 00:27:52,320
data

828
00:27:52,320 --> 00:27:53,840
and so what we did in order to still

829
00:27:53,840 --> 00:27:55,520
have that that benefit from the

830
00:27:55,520 --> 00:27:56,960
property-based tests is that we wrote

831
00:27:56,960 --> 00:27:58,799
our code in a way

832
00:27:58,799 --> 00:28:01,200
that you um can either execute it in

833
00:28:01,200 --> 00:28:02,080
production

834
00:28:02,080 --> 00:28:04,240
or you can execute it with not the real

835
00:28:04,240 --> 00:28:05,600
concurrent primitives but with

836
00:28:05,600 --> 00:28:07,200
a simulation of those concurrency

837
00:28:07,200 --> 00:28:08,960
primitives that are actually

838
00:28:08,960 --> 00:28:10,320
deterministic

839
00:28:10,320 --> 00:28:12,399
and you you take the same code and just

840
00:28:12,399 --> 00:28:15,039
link it you use another instantiation of

841
00:28:15,039 --> 00:28:16,640
the library and then you can you can

842
00:28:16,640 --> 00:28:17,919
test basically um

843
00:28:17,919 --> 00:28:19,520
your concurrent code in the simulation

844
00:28:19,520 --> 00:28:20,960
of concurrency and that way you

845
00:28:20,960 --> 00:28:22,720
you still can get minimal counter

846
00:28:22,720 --> 00:28:24,880
examples which is very very useful

847
00:28:24,880 --> 00:28:27,279
now the connection to the papers of

848
00:28:27,279 --> 00:28:28,799
course the papers are the basis for the

849
00:28:28,799 --> 00:28:30,320
algorithm they specify the algorithm and

850
00:28:30,320 --> 00:28:31,760
the implementation is just

851
00:28:31,760 --> 00:28:33,919
refinements of that algorithm adding

852
00:28:33,919 --> 00:28:35,200
more details

853
00:28:35,200 --> 00:28:37,360
and they also give us the the properties

854
00:28:37,360 --> 00:28:39,200
that we want to test we want to test

855
00:28:39,200 --> 00:28:42,799
do we get consensus if we have certain

856
00:28:42,799 --> 00:28:44,320
assumptions about the stake fulfilled

857
00:28:44,320 --> 00:28:45,200
and so we can

858
00:28:45,200 --> 00:28:46,559
test in an environment with different

859
00:28:46,559 --> 00:28:48,799
adversarial behavior and

860
00:28:48,799 --> 00:28:50,559
and basically make sure that the

861
00:28:50,559 --> 00:28:51,760
properties that are specified

862
00:28:51,760 --> 00:28:53,600
improvement in the papers are also also

863
00:28:53,600 --> 00:28:54,880
hold for our code

864
00:28:54,880 --> 00:28:56,480
there's much more detail to that we

865
00:28:56,480 --> 00:28:57,919
touch on some of those details in the

866
00:28:57,919 --> 00:28:59,279
extended version of the presentation

867
00:28:59,279 --> 00:29:00,320
which is online

868
00:29:00,320 --> 00:29:02,399
but that's the general picture now in

869
00:29:02,399 --> 00:29:04,000
the rest of the presentation i want to

870
00:29:04,000 --> 00:29:05,120
talk about what could have gone wrong

871
00:29:05,120 --> 00:29:06,399
and what kind of precautions

872
00:29:06,399 --> 00:29:08,399
we did when we went to a decentralized

873
00:29:08,399 --> 00:29:10,399
system in order to make sure that

874
00:29:10,399 --> 00:29:12,720
things don't go wrong one thing of

875
00:29:12,720 --> 00:29:14,159
course is that you can have those subtle

876
00:29:14,159 --> 00:29:15,520
bugs and edge cases and we use

877
00:29:15,520 --> 00:29:17,440
property-based testing to to catch most

878
00:29:17,440 --> 00:29:18,559
of those or to catch

879
00:29:18,559 --> 00:29:20,720
those another thing that frequently

880
00:29:20,720 --> 00:29:22,320
happens in cryptocurrencies is that you

881
00:29:22,320 --> 00:29:23,279
get

882
00:29:23,279 --> 00:29:24,960
forks at the point where you change the

883
00:29:24,960 --> 00:29:26,960
consensus rules and um we

884
00:29:26,960 --> 00:29:28,880
wrote something a piece of software to

885
00:29:28,880 --> 00:29:30,399
to prevent that

886
00:29:30,399 --> 00:29:31,840
uh the the transition to

887
00:29:31,840 --> 00:29:33,679
decentralization is a crucial part where

888
00:29:33,679 --> 00:29:35,200
we are you have to be very careful that

889
00:29:35,200 --> 00:29:37,039
things go correctly and so we had the

890
00:29:37,039 --> 00:29:39,120
gradual transition of power from from a

891
00:29:39,120 --> 00:29:40,880
federated set of nodes to then

892
00:29:40,880 --> 00:29:43,200
gradually allowing other other parties

893
00:29:43,200 --> 00:29:45,200
in the system to also produce blocks

894
00:29:45,200 --> 00:29:46,960
and one thing that is particularly

895
00:29:46,960 --> 00:29:48,960
crucial and hard to get drop by

896
00:29:48,960 --> 00:29:51,919
is when you go from

897
00:29:52,559 --> 00:29:54,080
to an implementation the paper you have

898
00:29:54,080 --> 00:29:55,760
an abstract url but

899
00:29:55,760 --> 00:29:57,120
the program needs to run in the real

900
00:29:57,120 --> 00:29:58,720
world so you have to add details and by

901
00:29:58,720 --> 00:29:59,840
adding details

902
00:29:59,840 --> 00:30:01,679
you add ways to interact with the system

903
00:30:01,679 --> 00:30:03,360
and in particular you add ways for the

904
00:30:03,360 --> 00:30:04,880
adversary to interact with the system

905
00:30:04,880 --> 00:30:05,440
that is

906
00:30:05,440 --> 00:30:07,600
you're increasing the attack surface and

907
00:30:07,600 --> 00:30:08,960
you have to be very aware of that in

908
00:30:08,960 --> 00:30:10,880
your design and make sure that you that

909
00:30:10,880 --> 00:30:11,360
you

910
00:30:11,360 --> 00:30:14,000
that you um don't introduce possible

911
00:30:14,000 --> 00:30:15,200
attacks and that you um

912
00:30:15,200 --> 00:30:16,720
yeah that you're aware of that and

913
00:30:16,720 --> 00:30:18,399
design your system in a way that the

914
00:30:18,399 --> 00:30:19,520
attacker has not

915
00:30:19,520 --> 00:30:21,919
increased too much um one way in which

916
00:30:21,919 --> 00:30:23,840
shield tech surface is increased

917
00:30:23,840 --> 00:30:27,360
is um by resources because resources

918
00:30:27,360 --> 00:30:28,799
finite resources are not something that

919
00:30:28,799 --> 00:30:30,320
you worry about in the papers but it is

920
00:30:30,320 --> 00:30:31,520
something that you have to be worried

921
00:30:31,520 --> 00:30:32,720
about in the real world

922
00:30:32,720 --> 00:30:34,000
because you have an open network where

923
00:30:34,000 --> 00:30:35,919
anybody can send you data and so you

924
00:30:35,919 --> 00:30:37,039
have to be careful with

925
00:30:37,039 --> 00:30:39,200
what kind of data you accept because the

926
00:30:39,200 --> 00:30:41,120
attacker they can cheaply occupy honest

927
00:30:41,120 --> 00:30:42,159
resources

928
00:30:42,159 --> 00:30:44,480
and in particular when you design the

929
00:30:44,480 --> 00:30:45,679
system you need to always

930
00:30:45,679 --> 00:30:48,080
analyze the worst case behavior because

931
00:30:48,080 --> 00:30:48,799
the

932
00:30:48,799 --> 00:30:50,799
attacker can control what kind of data

933
00:30:50,799 --> 00:30:52,799
they send you and so they will always

934
00:30:52,799 --> 00:30:54,720
trick you into into worst case behavior

935
00:30:54,720 --> 00:30:55,120
so

936
00:30:55,120 --> 00:30:56,720
you can't just use some some of the

937
00:30:56,720 --> 00:30:58,159
child libraries because they're always

938
00:30:58,159 --> 00:30:59,519
optimized for

939
00:30:59,519 --> 00:31:02,640
for the common behavior

940
00:31:02,640 --> 00:31:04,399
and and not for for the worst case

941
00:31:04,399 --> 00:31:06,000
behavior you also need to do aggressive

942
00:31:06,000 --> 00:31:07,760
filtering don't download any data from

943
00:31:07,760 --> 00:31:09,039
other parties before you really know

944
00:31:09,039 --> 00:31:10,320
that you that you actually need it

945
00:31:10,320 --> 00:31:11,600
and so that's another design principle

946
00:31:11,600 --> 00:31:13,360
that that we followed

947
00:31:13,360 --> 00:31:15,440
this um other problem that i talked

948
00:31:15,440 --> 00:31:17,120
about those those

949
00:31:17,120 --> 00:31:18,720
forks and cryptocurrencies that you get

950
00:31:18,720 --> 00:31:20,799
when you when when you get disagreement

951
00:31:20,799 --> 00:31:22,159
about the rules of the game

952
00:31:22,159 --> 00:31:24,080
is something that that we had to design

953
00:31:24,080 --> 00:31:25,679
a mechanism for because we want to

954
00:31:25,679 --> 00:31:27,120
change the rules frequently we have all

955
00:31:27,120 --> 00:31:28,799
these new versions of roboros

956
00:31:28,799 --> 00:31:31,279
and so what we have implemented is a

957
00:31:31,279 --> 00:31:32,880
hardcore combinator

958
00:31:32,880 --> 00:31:34,720
that takes a number of protocols and

959
00:31:34,720 --> 00:31:36,559
then defines a new protocol as just the

960
00:31:36,559 --> 00:31:37,919
sequential composition of those

961
00:31:37,919 --> 00:31:39,200
protocols

962
00:31:39,200 --> 00:31:42,000
and it also allows you to to write onto

963
00:31:42,000 --> 00:31:43,440
the chain when that transition will

964
00:31:43,440 --> 00:31:44,159
happen

965
00:31:44,159 --> 00:31:46,880
so that you can decide and coordinate on

966
00:31:46,880 --> 00:31:48,480
that transition in a coordinated manner

967
00:31:48,480 --> 00:31:50,559
you don't get those change splits

968
00:31:50,559 --> 00:31:53,760
right um it's time for questions

969
00:31:53,760 --> 00:31:54,960
the extended version of the talk

970
00:31:54,960 --> 00:31:56,720
features more more details on all of

971
00:31:56,720 --> 00:31:58,480
those aspects that i touched on

972
00:31:58,480 --> 00:32:01,679
and thank you for attention okay uh

973
00:32:01,679 --> 00:32:04,880
thanks um christine

974
00:32:04,880 --> 00:32:08,480
let me see i i don't see any immediate

975
00:32:08,480 --> 00:32:10,960
questions um we only have time for a

976
00:32:10,960 --> 00:32:12,559
very quick question so perhaps um

977
00:32:12,559 --> 00:32:14,720
uh maybe i'll just ask you to say a few

978
00:32:14,720 --> 00:32:16,480
more things about property-based testing

979
00:32:16,480 --> 00:32:17,120
like you

980
00:32:17,120 --> 00:32:20,880
you mentioned that um you know this is

981
00:32:20,880 --> 00:32:22,720
you can imagine an example or you have

982
00:32:22,720 --> 00:32:23,919
anything that

983
00:32:23,919 --> 00:32:29,840
could illustrate how useful was that in

984
00:32:34,799 --> 00:32:38,320
so one example that comes to mind is it

985
00:32:38,320 --> 00:32:40,159
also has to do with that with that

986
00:32:40,159 --> 00:32:41,919
aggressive filtering of data that you

987
00:32:41,919 --> 00:32:42,559
accept

988
00:32:42,559 --> 00:32:44,559
so um one of the things that we do when

989
00:32:44,559 --> 00:32:46,240
we get presented with many alternative

990
00:32:46,240 --> 00:32:47,440
chains

991
00:32:47,440 --> 00:32:50,240
is that we try not to download any

992
00:32:50,240 --> 00:32:52,000
actual blocked data before we have

993
00:32:52,000 --> 00:32:54,159
decided which chain is the best

994
00:32:54,159 --> 00:32:55,760
based solely on the block headers which

995
00:32:55,760 --> 00:32:57,600
contain the signatures of the block

996
00:32:57,600 --> 00:32:58,720
producers

997
00:32:58,720 --> 00:33:01,519
and we can do that because um the right

998
00:33:01,519 --> 00:33:02,640
to produce a block

999
00:33:02,640 --> 00:33:05,760
is given by the stake of a party and

1000
00:33:05,760 --> 00:33:07,919
that stake is kept constant

1001
00:33:07,919 --> 00:33:10,480
in in an epoch in a period of time so we

1002
00:33:10,480 --> 00:33:12,000
have this range in the future in which

1003
00:33:12,000 --> 00:33:13,760
we can forecast what what the stake

1004
00:33:13,760 --> 00:33:15,120
distribution will be

1005
00:33:15,120 --> 00:33:16,720
and if we get a block within that range

1006
00:33:16,720 --> 00:33:18,320
we can just check whether it's valid by

1007
00:33:18,320 --> 00:33:19,360
checking the signature

1008
00:33:19,360 --> 00:33:22,000
and using our current state but it can

1009
00:33:22,000 --> 00:33:22,799
also happen that

1010
00:33:22,799 --> 00:33:24,480
for some reason block production stops

1011
00:33:24,480 --> 00:33:26,880
for for longer than the forecast range

1012
00:33:26,880 --> 00:33:28,159
and then we get a block and we don't

1013
00:33:28,159 --> 00:33:29,519
know whether it's valid just based on

1014
00:33:29,519 --> 00:33:30,559
its header

1015
00:33:30,559 --> 00:33:32,720
and in the simple case where it attack

1016
00:33:32,720 --> 00:33:34,559
whether it attaches directly to our

1017
00:33:34,559 --> 00:33:35,679
current chain tip

1018
00:33:35,679 --> 00:33:38,000
we can just use our current stake stake

1019
00:33:38,000 --> 00:33:39,760
distribution and our current state

1020
00:33:39,760 --> 00:33:41,279
because we know that there is no block

1021
00:33:41,279 --> 00:33:42,640
in between that could change that that

1022
00:33:42,640 --> 00:33:43,440
state

1023
00:33:43,440 --> 00:33:46,559
but in the the more general case where

1024
00:33:46,559 --> 00:33:48,080
that new chain

1025
00:33:48,080 --> 00:33:49,840
forks off somewhere in the in the in the

1026
00:33:49,840 --> 00:33:52,480
past we would need to download basically

1027
00:33:52,480 --> 00:33:53,519
this block

1028
00:33:53,519 --> 00:33:55,440
in order to know whether that block is

1029
00:33:55,440 --> 00:33:57,200
valid based on its header

1030
00:33:57,200 --> 00:33:59,120
and so then the question is what to do

1031
00:33:59,120 --> 00:34:00,399
with that and

1032
00:34:00,399 --> 00:34:03,120
the initial suggestion was that we only

1033
00:34:03,120 --> 00:34:03,760
ever

1034
00:34:03,760 --> 00:34:06,399
download blocked data from another chain

1035
00:34:06,399 --> 00:34:08,639
if that is the only way to make progress

1036
00:34:08,639 --> 00:34:10,000
on any of the chains that we're

1037
00:34:10,000 --> 00:34:11,520
presented with

1038
00:34:11,520 --> 00:34:14,159
and that that sounds that sounds

1039
00:34:14,159 --> 00:34:15,040
reasonable

1040
00:34:15,040 --> 00:34:17,760
but then our general property space test

1041
00:34:17,760 --> 00:34:18,480
that just

1042
00:34:18,480 --> 00:34:21,040
tested whether all the nodes get agreed

1043
00:34:21,040 --> 00:34:22,480
on get agreement on

1044
00:34:22,480 --> 00:34:25,440
one on one um history showed us that

1045
00:34:25,440 --> 00:34:26,960
they didn't do that anymore

1046
00:34:26,960 --> 00:34:30,399
and the reason of that if you

1047
00:34:30,399 --> 00:34:33,119
the example is really really obvious but

1048
00:34:33,119 --> 00:34:34,480
the sound is just that

1049
00:34:34,480 --> 00:34:36,719
you get two chains and both of them folk

1050
00:34:36,719 --> 00:34:38,000
off in the past

1051
00:34:38,000 --> 00:34:40,320
and then one note if it's presented

1052
00:34:40,320 --> 00:34:41,760
first with that with a green one it will

1053
00:34:41,760 --> 00:34:42,800
download that block

1054
00:34:42,800 --> 00:34:45,520
but once it has done that the condition

1055
00:34:45,520 --> 00:34:47,440
that it can't make progress on any chain

1056
00:34:47,440 --> 00:34:48,639
it's no longer fulfilled

1057
00:34:48,639 --> 00:34:50,079
so it will never download that blue

1058
00:34:50,079 --> 00:34:52,159
block and try to validate that sharing

1059
00:34:52,159 --> 00:34:54,159
and another node would download would be

1060
00:34:54,159 --> 00:34:55,679
presented first with that with that

1061
00:34:55,679 --> 00:34:57,599
other chain and download the blue block

1062
00:34:57,599 --> 00:34:59,760
and at that point the condition for

1063
00:34:59,760 --> 00:35:01,599
downloading blocks from another chain is

1064
00:35:01,599 --> 00:35:03,280
not no longer satisfied and so it would

1065
00:35:03,280 --> 00:35:04,480
not make progress on the other one and

1066
00:35:04,480 --> 00:35:05,760
be stuck with that other one

1067
00:35:05,760 --> 00:35:07,520
and so it's that that very general

1068
00:35:07,520 --> 00:35:09,520
property based test that showed us

1069
00:35:09,520 --> 00:35:11,280
exactly what was going wrong and that's

1070
00:35:11,280 --> 00:35:12,800
that's very useful because if you were

1071
00:35:12,800 --> 00:35:14,640
to write like a unit cast taste to check

1072
00:35:14,640 --> 00:35:16,960
whether that optimization was right

1073
00:35:16,960 --> 00:35:18,800
you would basically have to come up with

1074
00:35:18,800 --> 00:35:20,160
a counter example in order to write a

1075
00:35:20,160 --> 00:35:21,520
meaningful test

1076
00:35:21,520 --> 00:35:22,880
but the counter example is something

1077
00:35:22,880 --> 00:35:25,599
that you get for free if you do that

1078
00:35:25,599 --> 00:35:27,280
i mean for free you you have to invest

1079
00:35:27,280 --> 00:35:28,480
in setting up that property based

1080
00:35:28,480 --> 00:35:29,200
testing but

1081
00:35:29,200 --> 00:35:32,000
you get it from that very general test

1082
00:35:32,000 --> 00:35:35,119
and that is very very useful

1083
00:35:35,119 --> 00:35:37,920
right thanks i think also we're out of

1084
00:35:37,920 --> 00:35:38,720
time

1085
00:35:38,720 --> 00:35:41,760
um for this slot but thanks dr christine

1086
00:35:41,760 --> 00:35:43,599
and philip for the presentation thank

1087
00:35:43,599 --> 00:35:44,079
you

1088
00:35:44,079 --> 00:35:47,200
and uh with this let me just move to

1089
00:35:47,200 --> 00:35:50,400
the uh third talk on today's slot which

1090
00:35:50,400 --> 00:35:51,200
is

1091
00:35:51,200 --> 00:35:53,440
alice in random land how to build and

1092
00:35:53,440 --> 00:35:55,680
use distributed randomness beacons

1093
00:35:55,680 --> 00:35:58,720
and it talks about that works by ignacio

1094
00:35:58,720 --> 00:36:00,720
cascudo and bernardo david and bernardo

1095
00:36:00,720 --> 00:36:02,160
want to give him the talk

1096
00:36:02,160 --> 00:36:12,880
i hope bernardo

1097
00:36:12,880 --> 00:36:16,640
sorry when i shared my screen the the

1098
00:36:16,640 --> 00:36:19,760
i couldn't access my my controls

1099
00:36:19,760 --> 00:36:22,560
um let me re-share the screen now that

1100
00:36:22,560 --> 00:36:23,359
i'm in

1101
00:36:23,359 --> 00:36:27,839
muted um

1102
00:36:29,520 --> 00:36:33,599
okay great go ahead oh no this is

1103
00:36:33,599 --> 00:36:36,960
it's a bit annoying i have my slides on

1104
00:36:36,960 --> 00:36:40,400
here yeah i hope you can see that now

1105
00:36:40,400 --> 00:36:43,920
so yes but there's this uh

1106
00:36:43,920 --> 00:36:45,280
talk is joint work with the

1107
00:36:45,280 --> 00:36:47,760
international scudo and the goal here is

1108
00:36:47,760 --> 00:36:48,560
to present

1109
00:36:48,560 --> 00:36:51,040
a systematization of knowledge on

1110
00:36:51,040 --> 00:36:53,280
distributed randomness beacons

1111
00:36:53,280 --> 00:36:56,720
the agenda for this path through random

1112
00:36:56,720 --> 00:36:57,119
land

1113
00:36:57,119 --> 00:37:00,720
is to first introduce a bit about what

1114
00:37:00,720 --> 00:37:03,599
random randomness beacons are then some

1115
00:37:03,599 --> 00:37:05,599
important parameters we need to use

1116
00:37:05,599 --> 00:37:07,760
when analyzing the advantages and

1117
00:37:07,760 --> 00:37:10,240
disadvantages of different constructions

1118
00:37:10,240 --> 00:37:13,599
and then go over the main classes of

1119
00:37:13,599 --> 00:37:15,359
randomness beacon constructions that we

1120
00:37:15,359 --> 00:37:16,800
have right now

1121
00:37:16,800 --> 00:37:19,200
and then finally or present a summary

1122
00:37:19,200 --> 00:37:20,160
with the main

1123
00:37:20,160 --> 00:37:22,400
advantages and disadvantages of each of

1124
00:37:22,400 --> 00:37:24,880
these constructions

1125
00:37:24,880 --> 00:37:26,560
so first of all what are randomness

1126
00:37:26,560 --> 00:37:28,480
beacons we all know that randomness is

1127
00:37:28,480 --> 00:37:31,359
essential for most cryptographic tasks

1128
00:37:31,359 --> 00:37:34,079
and even when we have centralized

1129
00:37:34,079 --> 00:37:35,520
cryptographic tasks

1130
00:37:35,520 --> 00:37:37,599
it is already a little bit complicated

1131
00:37:37,599 --> 00:37:39,760
to obtain proper randomness from

1132
00:37:39,760 --> 00:37:40,880
computers

1133
00:37:40,880 --> 00:37:43,440
the problem gets more complicated when

1134
00:37:43,440 --> 00:37:46,000
we are in the decentralized setting

1135
00:37:46,000 --> 00:37:48,480
where you cannot trust a central

1136
00:37:48,480 --> 00:37:51,200
authority to generate randomness

1137
00:37:51,200 --> 00:37:53,760
randomness beacons will allow parties in

1138
00:37:53,760 --> 00:37:55,760
a decentralized system to generate

1139
00:37:55,760 --> 00:37:57,200
outputs that have the following

1140
00:37:57,200 --> 00:37:58,320
properties

1141
00:37:58,320 --> 00:37:59,440
first of all they should be

1142
00:37:59,440 --> 00:38:01,680
unpredictable meaning that the adversary

1143
00:38:01,680 --> 00:38:03,440
shouldn't be able to guess these

1144
00:38:03,440 --> 00:38:06,000
outputs they should be unbiasable

1145
00:38:06,000 --> 00:38:07,599
according to some notions so the

1146
00:38:07,599 --> 00:38:09,760
adversary should not be able to bias the

1147
00:38:09,760 --> 00:38:10,560
output

1148
00:38:10,560 --> 00:38:13,599
too much we'll get to that soon and

1149
00:38:13,599 --> 00:38:15,680
they should be publicly verifiable

1150
00:38:15,680 --> 00:38:17,760
meaning that everyone can check

1151
00:38:17,760 --> 00:38:19,440
that an output has been correctly

1152
00:38:19,440 --> 00:38:21,280
generated by an execution

1153
00:38:21,280 --> 00:38:24,240
of the beacon protocol and finally they

1154
00:38:24,240 --> 00:38:26,640
should have guaranteed output delivery

1155
00:38:26,640 --> 00:38:29,200
meaning that the output can always be

1156
00:38:29,200 --> 00:38:31,119
obtained no matter what

1157
00:38:31,119 --> 00:38:33,920
it's important to notice that when you

1158
00:38:33,920 --> 00:38:34,320
use

1159
00:38:34,320 --> 00:38:37,040
this beacons for applications such as

1160
00:38:37,040 --> 00:38:38,240
pos protocols

1161
00:38:38,240 --> 00:38:40,480
you cannot simply deal with an adversary

1162
00:38:40,480 --> 00:38:42,480
forcing you to abort an execution

1163
00:38:42,480 --> 00:38:44,560
because your protocol must keep keep

1164
00:38:44,560 --> 00:38:46,800
executing itself and also when you are

1165
00:38:46,800 --> 00:38:48,320
in decentralized systems

1166
00:38:48,320 --> 00:38:50,240
it is paramount that you have public

1167
00:38:50,240 --> 00:38:51,920
verifiability so you do not have to

1168
00:38:51,920 --> 00:38:52,560
trust

1169
00:38:52,560 --> 00:38:54,720
other parties when verifying the state

1170
00:38:54,720 --> 00:38:56,880
of the system

1171
00:38:56,880 --> 00:38:59,760
now as we're falling through this rabbit

1172
00:38:59,760 --> 00:39:00,320
hole

1173
00:39:00,320 --> 00:39:02,480
there are some important parameters that

1174
00:39:02,480 --> 00:39:03,680
we should observe

1175
00:39:03,680 --> 00:39:05,200
when analyzing different beacon

1176
00:39:05,200 --> 00:39:07,280
constructions first of all there's a

1177
00:39:07,280 --> 00:39:09,200
matter of setup that has been discussed

1178
00:39:09,200 --> 00:39:09,520
in

1179
00:39:09,520 --> 00:39:11,839
many other talks in the this conference

1180
00:39:11,839 --> 00:39:14,160
does the protocol require any setup such

1181
00:39:14,160 --> 00:39:16,640
as a structured crs or generation

1182
00:39:16,640 --> 00:39:19,760
of a threshold key or so on or

1183
00:39:19,760 --> 00:39:22,960
is it easy to set up um is there some

1184
00:39:22,960 --> 00:39:24,560
caveat in the way that the setup is

1185
00:39:24,560 --> 00:39:25,920
generated or not

1186
00:39:25,920 --> 00:39:29,119
then the output randomness

1187
00:39:29,119 --> 00:39:31,839
how random is that output can we

1188
00:39:31,839 --> 00:39:32,800
guarantee

1189
00:39:32,800 --> 00:39:36,079
uniform randomness for these outputs or

1190
00:39:36,079 --> 00:39:38,160
do we have to deal with a bias

1191
00:39:38,160 --> 00:39:40,640
possibly a bounded bias then the

1192
00:39:40,640 --> 00:39:42,079
communication and computational

1193
00:39:42,079 --> 00:39:43,200
complexities the

1194
00:39:43,200 --> 00:39:44,400
concrete efficiency of these

1195
00:39:44,400 --> 00:39:46,400
constructions of course and

1196
00:39:46,400 --> 00:39:49,040
finally and uh very importantly the

1197
00:39:49,040 --> 00:39:50,880
actual security guarantees

1198
00:39:50,880 --> 00:39:53,599
as many other talks have said already in

1199
00:39:53,599 --> 00:39:55,520
this conference it's not enough to just

1200
00:39:55,520 --> 00:39:56,079
have

1201
00:39:56,079 --> 00:39:58,800
intuition that your constructions work

1202
00:39:58,800 --> 00:40:01,040
you need full proofs for everything

1203
00:40:01,040 --> 00:40:03,520
and most importantly especially in this

1204
00:40:03,520 --> 00:40:05,280
decentralized applications where many

1205
00:40:05,280 --> 00:40:06,800
protocols are executed

1206
00:40:06,800 --> 00:40:08,240
in parallel with each other in

1207
00:40:08,240 --> 00:40:10,480
composition we need some

1208
00:40:10,480 --> 00:40:12,800
composition guarantee meaning that we

1209
00:40:12,800 --> 00:40:16,000
can actually run this in the real world

1210
00:40:16,000 --> 00:40:17,599
so first of all we have some of the

1211
00:40:17,599 --> 00:40:19,760
first constructions that were based on

1212
00:40:19,760 --> 00:40:22,480
publicly verifiable secret sharing

1213
00:40:22,480 --> 00:40:24,160
the setup for these constructions is

1214
00:40:24,160 --> 00:40:26,240
essentially a public infrastructure

1215
00:40:26,240 --> 00:40:28,960
you get all the parties to register a

1216
00:40:28,960 --> 00:40:30,640
public key

1217
00:40:30,640 --> 00:40:33,520
the output randomness is uniform you get

1218
00:40:33,520 --> 00:40:34,960
uniformly random

1219
00:40:34,960 --> 00:40:37,520
outputs perfect randomness the

1220
00:40:37,520 --> 00:40:38,880
communication and computational

1221
00:40:38,880 --> 00:40:40,000
complexity

1222
00:40:40,000 --> 00:40:41,760
are an issue they are quadratic in the

1223
00:40:41,760 --> 00:40:43,760
number of parties even though with

1224
00:40:43,760 --> 00:40:45,680
some of our latest results we can

1225
00:40:45,680 --> 00:40:46,880
actually get a

1226
00:40:46,880 --> 00:40:49,520
a batch of random outputs that is also

1227
00:40:49,520 --> 00:40:51,119
quadratic in a number of parties so you

1228
00:40:51,119 --> 00:40:52,000
can amortize

1229
00:40:52,000 --> 00:40:54,720
that cost however if you only need one

1230
00:40:54,720 --> 00:40:55,280
new

1231
00:40:55,280 --> 00:40:57,520
fresh value you might be in trouble if

1232
00:40:57,520 --> 00:40:59,280
you just use that

1233
00:40:59,280 --> 00:41:02,160
the security guarantees are pretty

1234
00:41:02,160 --> 00:41:03,119
interesting uh

1235
00:41:03,119 --> 00:41:04,880
we can get universal composibility with

1236
00:41:04,880 --> 00:41:06,400
the latest results so it

1237
00:41:06,400 --> 00:41:08,400
can work in composition with other

1238
00:41:08,400 --> 00:41:09,440
protocols

1239
00:41:09,440 --> 00:41:11,839
and this is our matte header this gives

1240
00:41:11,839 --> 00:41:12,480
you

1241
00:41:12,480 --> 00:41:14,480
perfect randomness that you can use for

1242
00:41:14,480 --> 00:41:16,240
any application that needs any kind of

1243
00:41:16,240 --> 00:41:16,960
randomness

1244
00:41:16,960 --> 00:41:18,800
since we know we can use uniform

1245
00:41:18,800 --> 00:41:20,319
randomness to sample

1246
00:41:20,319 --> 00:41:22,640
from other distributions so this is a

1247
00:41:22,640 --> 00:41:24,480
very um

1248
00:41:24,480 --> 00:41:27,119
versatile construction even though it

1249
00:41:27,119 --> 00:41:29,119
incurs a higher computational cost for

1250
00:41:29,119 --> 00:41:29,920
small

1251
00:41:29,920 --> 00:41:32,960
batches of random values some real world

1252
00:41:32,960 --> 00:41:34,079
examples are for example

1253
00:41:34,079 --> 00:41:35,680
the first year of the cardinal

1254
00:41:35,680 --> 00:41:37,280
cryptocurrency was just presented with

1255
00:41:37,280 --> 00:41:37,920
the

1256
00:41:37,920 --> 00:41:40,240
pbss beacon presented in the robotics

1257
00:41:40,240 --> 00:41:42,240
paper and then the

1258
00:41:42,240 --> 00:41:46,839
improvement in scrape now to the next

1259
00:41:46,839 --> 00:41:49,920
um beacon in our list

1260
00:41:49,920 --> 00:41:51,839
we go for verifiable random functions

1261
00:41:51,839 --> 00:41:53,119
where we want to reduce

1262
00:41:53,119 --> 00:41:56,480
the cost the setup is still a pki and a

1263
00:41:56,480 --> 00:41:57,760
random num so we

1264
00:41:57,760 --> 00:41:59,599
also need these random nums to be given

1265
00:41:59,599 --> 00:42:01,760
a setup however this is no structured

1266
00:42:01,760 --> 00:42:02,400
setup

1267
00:42:02,400 --> 00:42:05,440
that would be easy to backdoor uh i mean

1268
00:42:05,440 --> 00:42:06,319
the random not

1269
00:42:06,319 --> 00:42:09,599
the random nuns even though it seems to

1270
00:42:09,599 --> 00:42:10,160
work right

1271
00:42:10,160 --> 00:42:12,960
quite fine the output randomness though

1272
00:42:12,960 --> 00:42:13,760
can

1273
00:42:13,760 --> 00:42:17,280
be biased by the adversary the red queen

1274
00:42:17,280 --> 00:42:17,920
can come

1275
00:42:17,920 --> 00:42:20,400
and input a bounded amount of bias on

1276
00:42:20,400 --> 00:42:22,160
the output so this is not

1277
00:42:22,160 --> 00:42:25,280
perfectly random outputs

1278
00:42:25,280 --> 00:42:27,920
and that must be taken care of even

1279
00:42:27,920 --> 00:42:29,040
though this will

1280
00:42:29,040 --> 00:42:31,359
work for um certain applications as

1281
00:42:31,359 --> 00:42:32,240
we'll say soon

1282
00:42:32,240 --> 00:42:33,760
the interesting thing with these schemes

1283
00:42:33,760 --> 00:42:35,280
is that they have linear complexities so

1284
00:42:35,280 --> 00:42:35,839
they take

1285
00:42:35,839 --> 00:42:38,000
very little space on a blockchain and

1286
00:42:38,000 --> 00:42:39,280
very little computation they're

1287
00:42:39,280 --> 00:42:40,720
extremely efficient

1288
00:42:40,720 --> 00:42:43,359
and the security guarantees are also a

1289
00:42:43,359 --> 00:42:45,119
universal possibility as shown in the

1290
00:42:45,119 --> 00:42:47,119
autobot genesis paper analysis of the

1291
00:42:47,119 --> 00:42:48,720
prowess construction

1292
00:42:48,720 --> 00:42:50,640
the applications here even though this

1293
00:42:50,640 --> 00:42:53,440
is biased are on pos secret leader

1294
00:42:53,440 --> 00:42:55,040
election as was shown in the

1295
00:42:55,040 --> 00:42:58,240
pros this uh bounded bias source is

1296
00:42:58,240 --> 00:42:59,520
enough to do

1297
00:42:59,520 --> 00:43:01,359
literal action in pos protocols while

1298
00:43:01,359 --> 00:43:03,119
preserving security of these particles

1299
00:43:03,119 --> 00:43:05,119
so this has a nice application and

1300
00:43:05,119 --> 00:43:06,800
real-world examples are algorand in the

1301
00:43:06,800 --> 00:43:09,520
current cardano era

1302
00:43:09,520 --> 00:43:11,920
now we have a more recent proposal on

1303
00:43:11,920 --> 00:43:14,400
threshold verifiable random functions

1304
00:43:14,400 --> 00:43:17,119
and they're using in randomness beacons

1305
00:43:17,119 --> 00:43:18,319
the setup here is

1306
00:43:18,319 --> 00:43:20,400
arguably much more complicated since you

1307
00:43:20,400 --> 00:43:22,640
require distributed key generation

1308
00:43:22,640 --> 00:43:25,040
to generate a threshold key however you

1309
00:43:25,040 --> 00:43:27,599
can get uniformly pseudo-random

1310
00:43:27,599 --> 00:43:30,400
outputs like like like this was a

1311
00:43:30,400 --> 00:43:32,079
distributed prg

1312
00:43:32,079 --> 00:43:34,079
with linear communication so you

1313
00:43:34,079 --> 00:43:36,400
preserve basically the same efficiency

1314
00:43:36,400 --> 00:43:38,160
as the vrf based beacons

1315
00:43:38,160 --> 00:43:39,440
but now you get something that is

1316
00:43:39,440 --> 00:43:41,280
uniformly pseudorandom not perfectly

1317
00:43:41,280 --> 00:43:42,560
random but pseudo-random

1318
00:43:42,560 --> 00:43:44,000
computationally indistinguishable from

1319
00:43:44,000 --> 00:43:46,319
random the security guarantees

1320
00:43:46,319 --> 00:43:48,480
shown up to now are only standalone

1321
00:43:48,480 --> 00:43:49,839
security in the

1322
00:43:49,839 --> 00:43:52,880
paper by galindo and others and but this

1323
00:43:52,880 --> 00:43:54,480
has a caveat that

1324
00:43:54,480 --> 00:43:57,280
you have to periodically refresh a seat

1325
00:43:57,280 --> 00:43:57,839
as

1326
00:43:57,839 --> 00:44:00,000
in any other prg you cannot simply

1327
00:44:00,000 --> 00:44:01,200
execute the prg

1328
00:44:01,200 --> 00:44:03,119
with the same seat forever if you want

1329
00:44:03,119 --> 00:44:04,720
long-term security and if you want to

1330
00:44:04,720 --> 00:44:05,760
keep using this

1331
00:44:05,760 --> 00:44:07,920
you're going to need to refresh the

1332
00:44:07,920 --> 00:44:10,480
applications here most applications have

1333
00:44:10,480 --> 00:44:12,720
randomness however you cannot use this

1334
00:44:12,720 --> 00:44:13,760
for seeding

1335
00:44:13,760 --> 00:44:15,920
other generators because this is not

1336
00:44:15,920 --> 00:44:17,200
pure randomness this is pseudo

1337
00:44:17,200 --> 00:44:18,640
randomness

1338
00:44:18,640 --> 00:44:20,960
and some real world applications are

1339
00:44:20,960 --> 00:44:22,000
real-world examples

1340
00:44:22,000 --> 00:44:24,880
are galena reference implementation as

1341
00:44:24,880 --> 00:44:27,040
well this implementation by the d-rand

1342
00:44:27,040 --> 00:44:27,520
project

1343
00:44:27,520 --> 00:44:30,240
even though dram has has not been proven

1344
00:44:30,240 --> 00:44:30,800
secure

1345
00:44:30,800 --> 00:44:32,720
it implements a variation of the

1346
00:44:32,720 --> 00:44:34,240
protocols proven in galin

1347
00:44:34,240 --> 00:44:36,480
at all but that variation is uh

1348
00:44:36,480 --> 00:44:37,920
different enough that we don't know

1349
00:44:37,920 --> 00:44:38,640
whether

1350
00:44:38,640 --> 00:44:40,400
it has the same security guarantees or

1351
00:44:40,400 --> 00:44:42,560
not since there's no proof

1352
00:44:42,560 --> 00:44:45,599
um and finally there's the

1353
00:44:45,599 --> 00:44:47,520
much hyped time-based primitives

1354
00:44:47,520 --> 00:44:49,200
constructions based on time lock pulses

1355
00:44:49,200 --> 00:44:51,200
and verifiable delay functions

1356
00:44:51,200 --> 00:44:52,880
the setup is also a little bit

1357
00:44:52,880 --> 00:44:54,800
complicated you need public parameters

1358
00:44:54,800 --> 00:44:57,280
for vds and tlps that might be backward

1359
00:44:57,280 --> 00:44:59,680
and for that you need to do parameter

1360
00:44:59,680 --> 00:45:01,200
generation ceremonies

1361
00:45:01,200 --> 00:45:03,440
in the first day of this conference

1362
00:45:03,440 --> 00:45:04,640
omega

1363
00:45:04,640 --> 00:45:07,760
presented a talk describing

1364
00:45:07,760 --> 00:45:09,760
the dangers in doing the ceremonies and

1365
00:45:09,760 --> 00:45:10,960
how it can go wrong and how

1366
00:45:10,960 --> 00:45:13,119
designing this can be complicated so

1367
00:45:13,119 --> 00:45:14,640
this is a problem

1368
00:45:14,640 --> 00:45:16,960
but you can get uniformly random outputs

1369
00:45:16,960 --> 00:45:19,200
from this with linear

1370
00:45:19,200 --> 00:45:20,960
communication complexity so that's quite

1371
00:45:20,960 --> 00:45:22,800
nice on the other hand however

1372
00:45:22,800 --> 00:45:25,119
the worst case computational complexity

1373
00:45:25,119 --> 00:45:26,800
will depend on the worst case network

1374
00:45:26,800 --> 00:45:28,640
delay

1375
00:45:28,640 --> 00:45:30,240
though it's interesting that it will

1376
00:45:30,240 --> 00:45:32,400
save space on chain the security

1377
00:45:32,400 --> 00:45:34,160
guarantees that kenza that this can

1378
00:45:34,160 --> 00:45:35,040
obtain

1379
00:45:35,040 --> 00:45:37,200
are the universal composability as we

1380
00:45:37,200 --> 00:45:39,440
have shown in our craft paper

1381
00:45:39,440 --> 00:45:41,520
we have a universally composable

1382
00:45:41,520 --> 00:45:42,880
treatment of this kind of

1383
00:45:42,880 --> 00:45:46,480
primitives and randomness beacons one

1384
00:45:46,480 --> 00:45:48,480
big caveat here is that the concrete

1385
00:45:48,480 --> 00:45:50,560
parameters for these constructions

1386
00:45:50,560 --> 00:45:52,240
are not well understood at all even

1387
00:45:52,240 --> 00:45:54,000
though we have a sympathetic analysis

1388
00:45:54,000 --> 00:45:55,440
and theoretical analysis

1389
00:45:55,440 --> 00:45:57,200
before this can be really deployed or

1390
00:45:57,200 --> 00:45:58,800
there needs to be better estimation of

1391
00:45:58,800 --> 00:46:00,560
the concrete parameters

1392
00:46:00,560 --> 00:46:03,280
and concrete security guarantees so yeah

1393
00:46:03,280 --> 00:46:04,880
our understanding of that is as much as

1394
00:46:04,880 --> 00:46:05,280
of

1395
00:46:05,280 --> 00:46:08,480
absolem's in with his opium pipe

1396
00:46:08,480 --> 00:46:10,720
do we need more research on that

1397
00:46:10,720 --> 00:46:12,240
applications here are any application

1398
00:46:12,240 --> 00:46:13,520
that needs randomness

1399
00:46:13,520 --> 00:46:15,599
because it gives you uniform randomness

1400
00:46:15,599 --> 00:46:17,440
and some real-world examples of work in

1401
00:46:17,440 --> 00:46:19,200
this direction are is the work done by

1402
00:46:19,200 --> 00:46:20,480
the vdf alliance

1403
00:46:20,480 --> 00:46:22,480
with ethereum among others there is work

1404
00:46:22,480 --> 00:46:24,319
on implementing schemes based on

1405
00:46:24,319 --> 00:46:29,200
a number of previous works on uh on vdfs

1406
00:46:29,200 --> 00:46:31,040
well what can we get from this is

1407
00:46:31,040 --> 00:46:32,160
basically that each of these

1408
00:46:32,160 --> 00:46:34,160
constructions has an efficiency security

1409
00:46:34,160 --> 00:46:35,040
trade-off

1410
00:46:35,040 --> 00:46:37,200
and to summarize these trade-offs we

1411
00:46:37,200 --> 00:46:38,079
could say that

1412
00:46:38,079 --> 00:46:40,319
the pbss-based constructions can give

1413
00:46:40,319 --> 00:46:42,000
you large batches of very good

1414
00:46:42,000 --> 00:46:44,480
uniform randomness but at quadratic

1415
00:46:44,480 --> 00:46:45,599
complexity

1416
00:46:45,599 --> 00:46:48,319
even though you can amortize that vrs on

1417
00:46:48,319 --> 00:46:50,000
the other hand give you very very cheap

1418
00:46:50,000 --> 00:46:51,119
random mess with

1419
00:46:51,119 --> 00:46:53,280
basically a very simple setup but they

1420
00:46:53,280 --> 00:46:55,520
have this bounded bias

1421
00:46:55,520 --> 00:46:57,760
then we have threshold vrs that can give

1422
00:46:57,760 --> 00:46:59,839
us again uniform randomness as cheap as

1423
00:46:59,839 --> 00:47:01,599
a regular view as constructions but they

1424
00:47:01,599 --> 00:47:02,560
need a complex

1425
00:47:02,560 --> 00:47:04,880
setup and periodic receding where does

1426
00:47:04,880 --> 00:47:06,480
the receiving come from

1427
00:47:06,480 --> 00:47:09,359
and then we have the time-based beacons

1428
00:47:09,359 --> 00:47:11,040
that give you very cheap uniform

1429
00:47:11,040 --> 00:47:12,000
randomness

1430
00:47:12,000 --> 00:47:14,560
but they need complex setup again and

1431
00:47:14,560 --> 00:47:16,480
have concrete parameters that are still

1432
00:47:16,480 --> 00:47:18,160
unknown so we need some more work in

1433
00:47:18,160 --> 00:47:20,400
that direction

1434
00:47:20,400 --> 00:47:22,559
future feature perspectives on this

1435
00:47:22,559 --> 00:47:24,559
would be why don't we combine

1436
00:47:24,559 --> 00:47:26,079
different beacons in future

1437
00:47:26,079 --> 00:47:28,559
constructions you can recede with a pvss

1438
00:47:28,559 --> 00:47:29,200
beacon

1439
00:47:29,200 --> 00:47:31,040
generate cheap uniform randomness with

1440
00:47:31,040 --> 00:47:33,280
threshold vrfs and generate bounded

1441
00:47:33,280 --> 00:47:33,920
biased

1442
00:47:33,920 --> 00:47:37,200
randomness with vrfs and then when we

1443
00:47:37,200 --> 00:47:39,200
understand the vdf and tlp parameters

1444
00:47:39,200 --> 00:47:40,960
better we can have

1445
00:47:40,960 --> 00:47:43,119
very nice efficient cheap uniform

1446
00:47:43,119 --> 00:47:45,280
randomness without receding

1447
00:47:45,280 --> 00:47:47,359
thanks for your attention and stay tuned

1448
00:47:47,359 --> 00:47:49,520
for our upcoming survey paper

1449
00:47:49,520 --> 00:47:53,119
on this topic all right fernando thank

1450
00:47:53,119 --> 00:47:54,480
you so much that was a very nice

1451
00:47:54,480 --> 00:47:55,920
overview of

1452
00:47:55,920 --> 00:48:00,640
this public beacon space

1453
00:48:00,640 --> 00:48:03,920
um so i think we're a little bit over

1454
00:48:03,920 --> 00:48:04,319
time

1455
00:48:04,319 --> 00:48:06,319
so i would ask and i don't see any

1456
00:48:06,319 --> 00:48:07,920
specific question

1457
00:48:07,920 --> 00:48:11,280
uh supernatural please check the zulu

1458
00:48:11,280 --> 00:48:14,640
if there are questions coming and uh

1459
00:48:14,640 --> 00:48:16,800
with this i'll um wrap up the

1460
00:48:16,800 --> 00:48:17,839
cryptocurrency

1461
00:48:17,839 --> 00:48:21,839
session thanks everyone for

