1
00:00:00,560 --> 00:00:01,920
so we'll continue with the topic so

2
00:00:01,920 --> 00:00:03,679
we'll stand a topic of user privacy

3
00:00:03,679 --> 00:00:04,960
anonymity

4
00:00:04,960 --> 00:00:07,600
and have three more presentations on

5
00:00:07,600 --> 00:00:09,920
kind of exciting new work in that area

6
00:00:09,920 --> 00:00:11,360
and while probably all experts in

7
00:00:11,360 --> 00:00:13,040
virtual conferencing now just in case we

8
00:00:13,040 --> 00:00:14,400
have some new attendees

9
00:00:14,400 --> 00:00:16,079
if you have questions please post them

10
00:00:16,079 --> 00:00:17,920
through the zulub chat and tag or

11
00:00:17,920 --> 00:00:19,279
mention the speaker for whom the

12
00:00:19,279 --> 00:00:20,640
question is intended for and then i'll

13
00:00:20,640 --> 00:00:21,920
read them out at the

14
00:00:21,920 --> 00:00:24,400
q and a part after every talk

15
00:00:24,400 --> 00:00:25,439
conditioned on that you

16
00:00:25,439 --> 00:00:27,199
can kind of end your talk in the 10

17
00:00:27,199 --> 00:00:30,320
minutes which is assigned to you so

18
00:00:30,320 --> 00:00:33,680
um okay is it already ready for youtube

19
00:00:33,680 --> 00:00:36,719
oh it is yes okay great then uh yeah

20
00:00:36,719 --> 00:00:38,239
then i would like to hand over to zubot

21
00:00:38,239 --> 00:00:39,760
from facebook who's giving the first

22
00:00:39,760 --> 00:00:41,760
talk on anonymous authenticated logging

23
00:00:41,760 --> 00:00:44,239
at scale

24
00:00:44,239 --> 00:00:48,160
thank you share my screen

25
00:00:50,480 --> 00:00:54,559
could you my screen correctly yes

26
00:00:54,559 --> 00:00:55,760
yeah i'm going to talk about private

27
00:00:55,760 --> 00:00:58,079
stats in this uh talk

28
00:00:58,079 --> 00:00:59,680
private stats is a de-identified

29
00:00:59,680 --> 00:01:01,359
authenticated logging system we've been

30
00:01:01,359 --> 00:01:03,039
developing here at facebook

31
00:01:03,039 --> 00:01:04,400
and we started experimenting with

32
00:01:04,400 --> 00:01:06,720
private stats and whatsapp mobile apps

33
00:01:06,720 --> 00:01:09,119
as well as other products we have i

34
00:01:09,119 --> 00:01:10,159
wanted to share some interesting

35
00:01:10,159 --> 00:01:11,920
challenges we encountered in the process

36
00:01:11,920 --> 00:01:13,600
and some novel approaches we developed

37
00:01:13,600 --> 00:01:15,759
to deal with them

38
00:01:15,759 --> 00:01:17,360
i'll only have time just to touch

39
00:01:17,360 --> 00:01:19,520
briefly on motivation architecture

40
00:01:19,520 --> 00:01:21,119
challenges and novel constructions we've

41
00:01:21,119 --> 00:01:22,159
come up with

42
00:01:22,159 --> 00:01:23,600
but i'll link to the paper at the end of

43
00:01:23,600 --> 00:01:25,600
my presentation with a lot more details

44
00:01:25,600 --> 00:01:26,320
which i hope

45
00:01:26,320 --> 00:01:28,560
um people will find interesting to read

46
00:01:28,560 --> 00:01:31,360
and and discuss more

47
00:01:31,360 --> 00:01:33,439
so billions of users using our family of

48
00:01:33,439 --> 00:01:36,079
apps client-side telemetry from our apps

49
00:01:36,079 --> 00:01:38,079
is incredibly important

50
00:01:38,079 --> 00:01:40,400
so we use it to understand uh whether

51
00:01:40,400 --> 00:01:42,000
products are working correctly

52
00:01:42,000 --> 00:01:44,640
and in order to improve the performance

53
00:01:44,640 --> 00:01:46,000
and the reliability of the apps

54
00:01:46,000 --> 00:01:47,520
themselves

55
00:01:47,520 --> 00:01:49,439
we've always uh kind of looked to

56
00:01:49,439 --> 00:01:51,280
understand how we can improve the

57
00:01:51,280 --> 00:01:52,960
privacy of this client-side telemetry

58
00:01:52,960 --> 00:01:54,320
and logging

59
00:01:54,320 --> 00:01:56,000
and one of the approaches we started

60
00:01:56,000 --> 00:01:58,640
thinking about a few years ago is

61
00:01:58,640 --> 00:02:01,040
whether we could de-identify the log

62
00:02:01,040 --> 00:02:03,119
data directly of the client

63
00:02:03,119 --> 00:02:04,960
by not associating log data with the

64
00:02:04,960 --> 00:02:06,320
user's identity

65
00:02:06,320 --> 00:02:08,479
so we have uh several types of logs that

66
00:02:08,479 --> 00:02:09,840
are used um

67
00:02:09,840 --> 00:02:12,239
for aggregate analysis only so in these

68
00:02:12,239 --> 00:02:14,000
cases we might not actually need user

69
00:02:14,000 --> 00:02:15,760
identity to perform these analysis in

70
00:02:15,760 --> 00:02:17,440
the first place

71
00:02:17,440 --> 00:02:19,200
however like when we talked about this

72
00:02:19,200 --> 00:02:20,879
approach it resulted in having us

73
00:02:20,879 --> 00:02:22,640
having us having more questions in the

74
00:02:22,640 --> 00:02:24,640
first place for example like without

75
00:02:24,640 --> 00:02:25,680
user identity

76
00:02:25,680 --> 00:02:27,599
could we trust that these actual logs

77
00:02:27,599 --> 00:02:29,520
are legitimate logs

78
00:02:29,520 --> 00:02:31,040
and those analysis would also be

79
00:02:31,040 --> 00:02:33,760
legitimate uh subsequently

80
00:02:33,760 --> 00:02:36,720
um even so um even if we're able to

81
00:02:36,720 --> 00:02:38,720
trust these logs could these

82
00:02:38,720 --> 00:02:40,720
de-identified logs still be useful to

83
00:02:40,720 --> 00:02:42,480
debug issues

84
00:02:42,480 --> 00:02:45,040
uh like we're used to doing and provide

85
00:02:45,040 --> 00:02:46,800
good experience for users

86
00:02:46,800 --> 00:02:48,400
so to investigate these questions we

87
00:02:48,400 --> 00:02:49,680
actually started developing private

88
00:02:49,680 --> 00:02:53,120
stats and experimenting in production

89
00:02:53,120 --> 00:02:54,720
at a high level private stats is

90
00:02:54,720 --> 00:02:56,239
designed to be a privacy preserving

91
00:02:56,239 --> 00:02:57,760
logging system that aims to provide

92
00:02:57,760 --> 00:02:58,640
privacy

93
00:02:58,640 --> 00:03:00,720
by disassociating log data from the

94
00:03:00,720 --> 00:03:02,319
user's identity

95
00:03:02,319 --> 00:03:04,720
so it's inspired by privacy boss it uses

96
00:03:04,720 --> 00:03:05,599
a

97
00:03:05,599 --> 00:03:08,959
verifiable oblivious prf to add trust

98
00:03:08,959 --> 00:03:11,840
to de-identified logs it does this by

99
00:03:11,840 --> 00:03:13,680
validating the logs or from a legitimate

100
00:03:13,680 --> 00:03:15,599
user without actually revealing to the

101
00:03:15,599 --> 00:03:16,840
server where the user

102
00:03:16,840 --> 00:03:19,599
is there are three main entities

103
00:03:19,599 --> 00:03:21,440
involved in the private set architecture

104
00:03:21,440 --> 00:03:23,200
in the first place

105
00:03:23,200 --> 00:03:25,519
the mobile app which logs the telemetry

106
00:03:25,519 --> 00:03:26,959
data to the server

107
00:03:26,959 --> 00:03:30,239
the application server for example

108
00:03:30,239 --> 00:03:33,360
our php web front end uh we run in

109
00:03:33,360 --> 00:03:34,640
facebook php hack

110
00:03:34,640 --> 00:03:37,599
lying front end and a backend credential

111
00:03:37,599 --> 00:03:39,440
service we developed

112
00:03:39,440 --> 00:03:41,519
so the credential service is responsible

113
00:03:41,519 --> 00:03:42,720
for

114
00:03:42,720 --> 00:03:44,480
managing the private keys for a

115
00:03:44,480 --> 00:03:46,640
verifiable oblivious prfs

116
00:03:46,640 --> 00:03:48,959
and also limits the multiple uses of a

117
00:03:48,959 --> 00:03:52,000
voprf token in the first place

118
00:03:52,000 --> 00:03:53,760
we separated the credential service in

119
00:03:53,760 --> 00:03:55,280
the application service so that

120
00:03:55,280 --> 00:03:57,120
different applications inside facebook

121
00:03:57,120 --> 00:03:59,439
can use the same service

122
00:03:59,439 --> 00:04:01,680
we have an rpc interface called thrift

123
00:04:01,680 --> 00:04:03,760
that we use internally

124
00:04:03,760 --> 00:04:06,159
and it's also open source we currently

125
00:04:06,159 --> 00:04:07,680
have applications using the credential

126
00:04:07,680 --> 00:04:08,799
service for example

127
00:04:08,799 --> 00:04:11,599
in php hack as well as erlang and other

128
00:04:11,599 --> 00:04:13,760
languages

129
00:04:13,760 --> 00:04:15,120
so private stats as a whole the

130
00:04:15,120 --> 00:04:17,680
architecture operates in two phases

131
00:04:17,680 --> 00:04:20,720
in the first phase the client obtains a

132
00:04:20,720 --> 00:04:22,000
token from the server

133
00:04:22,000 --> 00:04:23,520
it does this by using a cryptographic

134
00:04:23,520 --> 00:04:26,080
mechanism called a verifiable oblivious

135
00:04:26,080 --> 00:04:29,680
pseudorandom function a voprf uses a

136
00:04:29,680 --> 00:04:31,680
client at a high level uses a client to

137
00:04:31,680 --> 00:04:33,919
evaluate a pseudo-random function

138
00:04:33,919 --> 00:04:36,080
without the server learning what the

139
00:04:36,080 --> 00:04:37,360
input of the client is

140
00:04:37,360 --> 00:04:38,960
and not the client learning the private

141
00:04:38,960 --> 00:04:42,000
key of the servant while it's happening

142
00:04:42,000 --> 00:04:44,560
we use the same vobr construction used

143
00:04:44,560 --> 00:04:45,759
by privacy pass

144
00:04:45,759 --> 00:04:49,120
in private stats to do this evaluation

145
00:04:49,120 --> 00:04:50,960
the client generates first a blinded

146
00:04:50,960 --> 00:04:51,440
nonce

147
00:04:51,440 --> 00:04:53,360
and sends it to the application server

148
00:04:53,360 --> 00:04:56,240
using the authenticated network request

149
00:04:56,240 --> 00:04:57,600
the application server first

150
00:04:57,600 --> 00:04:59,360
authenticates the user and if it finds

151
00:04:59,360 --> 00:05:01,120
that the user account is valid

152
00:05:01,120 --> 00:05:02,720
it forwards the blind nonce to the

153
00:05:02,720 --> 00:05:04,560
credential service

154
00:05:04,560 --> 00:05:06,320
the credential service then uses its

155
00:05:06,320 --> 00:05:08,560
private key to perform

156
00:05:08,560 --> 00:05:10,400
a multiplication on an elliptic curve to

157
00:05:10,400 --> 00:05:12,320
generate the prf output

158
00:05:12,320 --> 00:05:14,000
it then returns this output as well as

159
00:05:14,000 --> 00:05:15,759
zero knowledge proof that it generated

160
00:05:15,759 --> 00:05:18,000
the output correctly to the client

161
00:05:18,000 --> 00:05:20,080
the client can unblind the token and

162
00:05:20,080 --> 00:05:21,120
then it can store it

163
00:05:21,120 --> 00:05:23,520
for later use it can also verify that

164
00:05:23,520 --> 00:05:25,199
token is correctly generated by the

165
00:05:25,199 --> 00:05:28,080
server it's not using it to track it

166
00:05:28,080 --> 00:05:30,240
note that this is very similar to how

167
00:05:30,240 --> 00:05:31,840
the privacy pass architecture

168
00:05:31,840 --> 00:05:33,360
actually generates tokens in the first

169
00:05:33,360 --> 00:05:35,199
place

170
00:05:35,199 --> 00:05:37,840
one unique aspect of private stats

171
00:05:37,840 --> 00:05:39,440
architecture is how we redeem these

172
00:05:39,440 --> 00:05:41,039
tokens

173
00:05:41,039 --> 00:05:44,000
when the mobile app is ready to log data

174
00:05:44,000 --> 00:05:44,479
um

175
00:05:44,479 --> 00:05:46,240
it actually computes an hmac on the log

176
00:05:46,240 --> 00:05:48,240
message but it's using a secret key

177
00:05:48,240 --> 00:05:50,000
derived from the token it retrieved from

178
00:05:50,000 --> 00:05:52,160
the prior phase

179
00:05:52,160 --> 00:05:54,160
this process actually by what it does is

180
00:05:54,160 --> 00:05:55,840
it binds the token to the log data

181
00:05:55,840 --> 00:05:56,319
that's

182
00:05:56,319 --> 00:05:58,960
uh logged in the first place the app

183
00:05:58,960 --> 00:06:01,199
sends the log data along with the nonce

184
00:06:01,199 --> 00:06:02,080
in an hmac

185
00:06:02,080 --> 00:06:05,120
via an unauthenticated request to the

186
00:06:05,120 --> 00:06:07,039
application server

187
00:06:07,039 --> 00:06:08,319
this happens in a separate network

188
00:06:08,319 --> 00:06:10,240
connections that there's no traceability

189
00:06:10,240 --> 00:06:11,199
between the

190
00:06:11,199 --> 00:06:14,319
logged in and logged out requests the

191
00:06:14,319 --> 00:06:16,000
difference between private stats is in

192
00:06:16,000 --> 00:06:17,680
how we validate the log data has

193
00:06:17,680 --> 00:06:21,039
actually correctly bound the token

194
00:06:21,039 --> 00:06:23,759
of the server token this validation

195
00:06:23,759 --> 00:06:25,360
happens in two phases

196
00:06:25,360 --> 00:06:27,280
in the first phase we forward only the

197
00:06:27,280 --> 00:06:28,800
non-stick credential service from the

198
00:06:28,800 --> 00:06:30,560
application server

199
00:06:30,560 --> 00:06:32,080
so instead of doing a complete

200
00:06:32,080 --> 00:06:34,160
validation of the token at the

201
00:06:34,160 --> 00:06:36,479
credential service it kind of splits the

202
00:06:36,479 --> 00:06:38,160
validation in some way

203
00:06:38,160 --> 00:06:40,319
so it only this credential service only

204
00:06:40,319 --> 00:06:42,160
computes a shared secret key required

205
00:06:42,160 --> 00:06:44,319
for the voprf

206
00:06:44,319 --> 00:06:46,400
in the second phase the application

207
00:06:46,400 --> 00:06:48,000
server receives the shared secret

208
00:06:48,000 --> 00:06:49,520
key and performs the validation of the

209
00:06:49,520 --> 00:06:51,280
hmac as correct

210
00:06:51,280 --> 00:06:53,919
this proves that the client's token was

211
00:06:53,919 --> 00:06:55,599
actually valid

212
00:06:55,599 --> 00:06:57,039
additionally this two phase approach

213
00:06:57,039 --> 00:06:58,800
allows us to actually minimize the

214
00:06:58,800 --> 00:07:00,479
application data that the credentials

215
00:07:00,479 --> 00:07:02,639
service receives is there a lot of says

216
00:07:02,639 --> 00:07:04,400
to prevent accidents from happening

217
00:07:04,400 --> 00:07:06,080
for example like accidental logging or

218
00:07:06,080 --> 00:07:07,360
things like that from happening from the

219
00:07:07,360 --> 00:07:09,280
credential service

220
00:07:09,280 --> 00:07:12,560
so at scale we we at the present like we

221
00:07:12,560 --> 00:07:15,280
do about 200 000 credentials per second

222
00:07:15,280 --> 00:07:18,319
are redeemed by private stats

223
00:07:18,319 --> 00:07:21,759
at the moment we face several challenges

224
00:07:21,759 --> 00:07:23,199
while experimenting their private stats

225
00:07:23,199 --> 00:07:24,240
in production

226
00:07:24,240 --> 00:07:25,840
while i won't have time to talk through

227
00:07:25,840 --> 00:07:28,160
all of these please do take a look at

228
00:07:28,160 --> 00:07:29,599
our paper for more details

229
00:07:29,599 --> 00:07:32,000
very interesting cases we encountered in

230
00:07:32,000 --> 00:07:32,960
production and

231
00:07:32,960 --> 00:07:35,680
i'm sure you enjoy reading the one

232
00:07:35,680 --> 00:07:37,599
challenge i will be talking about today

233
00:07:37,599 --> 00:07:40,240
is that we faced was in performing rate

234
00:07:40,240 --> 00:07:42,800
limiting on the identified requests

235
00:07:42,800 --> 00:07:44,720
so we want to rate limit generally our

236
00:07:44,720 --> 00:07:46,479
logging endpoints to prevent threats

237
00:07:46,479 --> 00:07:48,479
like dos attacks on them

238
00:07:48,479 --> 00:07:50,800
a user or a group of users might be able

239
00:07:50,800 --> 00:07:52,400
to collect a lot of tokens

240
00:07:52,400 --> 00:07:54,479
and then flood the logging endpoint with

241
00:07:54,479 --> 00:07:55,440
them

242
00:07:55,440 --> 00:07:58,000
however since private stats does not

243
00:07:58,000 --> 00:07:59,599
have client identity during logging it's

244
00:07:59,599 --> 00:08:01,039
really challenging rate limit these

245
00:08:01,039 --> 00:08:02,479
requests

246
00:08:02,479 --> 00:08:04,319
we came up with a creative solution to

247
00:08:04,319 --> 00:08:06,800
rate limit by rate limiting the tokens

248
00:08:06,800 --> 00:08:09,759
at the time of issuance instead um and

249
00:08:09,759 --> 00:08:12,160
we rate limit these tokens so that

250
00:08:12,160 --> 00:08:15,199
each that the tokens are bound to a

251
00:08:15,199 --> 00:08:18,319
each user and each public key that

252
00:08:18,319 --> 00:08:21,120
that private that private stats uses we

253
00:08:21,120 --> 00:08:22,720
then rotate the public key very

254
00:08:22,720 --> 00:08:23,840
frequently

255
00:08:23,840 --> 00:08:26,080
so since the token is actually only

256
00:08:26,080 --> 00:08:28,879
valid as long as the public key is

257
00:08:28,879 --> 00:08:30,560
the rate limit is governed by the

258
00:08:30,560 --> 00:08:32,799
rotation interval of the bubble key

259
00:08:32,799 --> 00:08:36,240
as well we have more details about this

260
00:08:36,240 --> 00:08:37,599
in vapor

261
00:08:37,599 --> 00:08:40,640
however this mechanism while nice it

262
00:08:40,640 --> 00:08:42,000
creates another challenge

263
00:08:42,000 --> 00:08:45,360
uh in the vopr mechanism

264
00:08:45,360 --> 00:08:47,920
normally the ability to verify the vop

265
00:08:47,920 --> 00:08:48,880
rf token

266
00:08:48,880 --> 00:08:50,640
provides people confidence that token

267
00:08:50,640 --> 00:08:52,080
cannot be used to track them

268
00:08:52,080 --> 00:08:55,200
in the first place however um rotating

269
00:08:55,200 --> 00:08:57,120
in public key frequently breaks down the

270
00:08:57,120 --> 00:08:58,320
verify of the

271
00:08:58,320 --> 00:09:00,480
opera for several reasons one of these

272
00:09:00,480 --> 00:09:02,399
reasons is because it's very challenging

273
00:09:02,399 --> 00:09:04,080
for users to keep track

274
00:09:04,080 --> 00:09:06,160
of all the public keys necessary to

275
00:09:06,160 --> 00:09:08,240
verify the tokens um

276
00:09:08,240 --> 00:09:09,839
everywhere so you've got to keep this in

277
00:09:09,839 --> 00:09:11,360
the public right you can keep this but

278
00:09:11,360 --> 00:09:12,560
it's very challenging to keep track of

279
00:09:12,560 --> 00:09:14,160
which public key was

280
00:09:14,160 --> 00:09:16,720
used to issue these and keep them a

281
00:09:16,720 --> 00:09:18,160
client having to keep them as

282
00:09:18,160 --> 00:09:21,120
challenging for clients so to make it

283
00:09:21,120 --> 00:09:21,680
easier

284
00:09:21,680 --> 00:09:23,680
for the clients to manage verifiability

285
00:09:23,680 --> 00:09:25,600
of tokens while still rotating public

286
00:09:25,600 --> 00:09:26,320
keys pretty

287
00:09:26,320 --> 00:09:29,200
frequently we developed a novel approach

288
00:09:29,200 --> 00:09:30,640
to rotating keys

289
00:09:30,640 --> 00:09:33,839
using an attribute based eop rf

290
00:09:33,839 --> 00:09:36,080
so in an attribute based key system the

291
00:09:36,080 --> 00:09:37,279
server generates

292
00:09:37,279 --> 00:09:40,080
a main public private key pair and the

293
00:09:40,080 --> 00:09:40,640
client

294
00:09:40,640 --> 00:09:42,880
only has to keep track of one public key

295
00:09:42,880 --> 00:09:44,560
which is the main public key and no

296
00:09:44,560 --> 00:09:46,720
other public key

297
00:09:46,720 --> 00:09:48,560
we define an attribute in our system as

298
00:09:48,560 --> 00:09:50,640
a bit vector

299
00:09:50,640 --> 00:09:54,399
so for each attribute for example day

300
00:09:54,399 --> 00:09:57,200
let's say we encode it as a bit vector

301
00:09:57,200 --> 00:09:58,720
and then for each day we derive

302
00:09:58,720 --> 00:10:01,839
one distinct key pair from the attribute

303
00:10:01,839 --> 00:10:04,480
this itself is the rotation mechanism of

304
00:10:04,480 --> 00:10:06,399
the key

305
00:10:06,399 --> 00:10:08,880
so once the key pair is derived it can

306
00:10:08,880 --> 00:10:10,160
actually be used directly

307
00:10:10,160 --> 00:10:12,720
as the private key for the vop rf so it

308
00:10:12,720 --> 00:10:13,600
doesn't change

309
00:10:13,600 --> 00:10:15,680
the the vop rf mechanisms is actually

310
00:10:15,680 --> 00:10:17,040
used for example we can still use the

311
00:10:17,040 --> 00:10:18,000
vop rf mechanism

312
00:10:18,000 --> 00:10:20,880
to use by privacy pass in private stats

313
00:10:20,880 --> 00:10:22,720
for this reason

314
00:10:22,720 --> 00:10:25,360
in the abp opr system instead of the

315
00:10:25,360 --> 00:10:26,800
client having to remember

316
00:10:26,800 --> 00:10:29,200
all the key pairs for all the days that

317
00:10:29,200 --> 00:10:30,880
the server generated

318
00:10:30,880 --> 00:10:32,720
the client can actually use the main

319
00:10:32,720 --> 00:10:34,079
public key to ask the server the

320
00:10:34,079 --> 00:10:36,240
following question

321
00:10:36,240 --> 00:10:39,600
is for example the day one's public key

322
00:10:39,600 --> 00:10:42,079
is it correctly derived from the main

323
00:10:42,079 --> 00:10:43,680
public key

324
00:10:43,680 --> 00:10:45,519
the server then can respond with a

325
00:10:45,519 --> 00:10:47,760
sequence of zero knowledge proofs

326
00:10:47,760 --> 00:10:50,160
to show that the statement is true so

327
00:10:50,160 --> 00:10:52,320
the client can basically ask this

328
00:10:52,320 --> 00:10:54,959
afterwards or the client can ask this uh

329
00:10:54,959 --> 00:10:56,320
whenever it wants it can ask us

330
00:10:56,320 --> 00:10:58,079
optionally if it wants to verify that

331
00:10:58,079 --> 00:10:58,720
this

332
00:10:58,720 --> 00:11:01,040
statement is true and this these are

333
00:11:01,040 --> 00:11:02,800
cacheable as well

334
00:11:02,800 --> 00:11:04,399
for more details about the constructions

335
00:11:04,399 --> 00:11:05,920
as well as security posts be

336
00:11:05,920 --> 00:11:08,880
referred to our paper um we propose a

337
00:11:08,880 --> 00:11:10,640
bearing free construction of the

338
00:11:10,640 --> 00:11:13,680
attribute-based voprf avoiding bearings

339
00:11:13,680 --> 00:11:16,160
is really important to private stats

340
00:11:16,160 --> 00:11:18,959
so that we could keep our app size low

341
00:11:18,959 --> 00:11:19,279
uh

342
00:11:19,279 --> 00:11:20,560
on the client because we're running

343
00:11:20,560 --> 00:11:22,399
mobile apps um

344
00:11:22,399 --> 00:11:24,000
and so that we can use existing

345
00:11:24,000 --> 00:11:25,440
cryptographic libraries as much as

346
00:11:25,440 --> 00:11:26,959
possible

347
00:11:26,959 --> 00:11:29,360
um in brief our construction is actually

348
00:11:29,360 --> 00:11:31,200
based in the narrow rhine gold

349
00:11:31,200 --> 00:11:34,079
is inspired by the narrow rhine gold prf

350
00:11:34,079 --> 00:11:34,880
and

351
00:11:34,880 --> 00:11:37,279
the proofs are something like sequential

352
00:11:37,279 --> 00:11:39,360
discrete log proofs that can be cached

353
00:11:39,360 --> 00:11:41,200
over multiple uses

354
00:11:41,200 --> 00:11:43,200
it's also very efficient for example

355
00:11:43,200 --> 00:11:45,200
generating proofs for 16-bit attributes

356
00:11:45,200 --> 00:11:46,800
takes about

357
00:11:46,800 --> 00:11:50,399
1.6 milliseconds another

358
00:11:50,399 --> 00:11:52,240
advantage of this was that because of

359
00:11:52,240 --> 00:11:53,680
the way it's constructed we didn't need

360
00:11:53,680 --> 00:11:55,680
to change any client-side code

361
00:11:55,680 --> 00:11:58,639
in order to experiment with abv or prf

362
00:11:58,639 --> 00:11:59,279
and we could

363
00:11:59,279 --> 00:12:01,680
keep the uh the actual vopr mechanism

364
00:12:01,680 --> 00:12:02,720
the same as we

365
00:12:02,720 --> 00:12:05,760
were using before uh we're hoping that

366
00:12:05,760 --> 00:12:06,959
we could bring this mechanism to the

367
00:12:06,959 --> 00:12:08,639
privacy path standardization effort so

368
00:12:08,639 --> 00:12:09,360
it's adopted

369
00:12:09,360 --> 00:12:13,040
more widely as well and and see um

370
00:12:13,040 --> 00:12:16,320
and bring this to the community as well

371
00:12:16,320 --> 00:12:18,560
we're also exploring enhancing the

372
00:12:18,560 --> 00:12:20,399
private stats architecture by composing

373
00:12:20,399 --> 00:12:22,160
this with other methods as well

374
00:12:22,160 --> 00:12:24,880
for example um even though it's data is

375
00:12:24,880 --> 00:12:26,800
de-identified we're exploring

376
00:12:26,800 --> 00:12:29,519
uh improving the anonymity properties of

377
00:12:29,519 --> 00:12:32,320
the data by querying the stored data

378
00:12:32,320 --> 00:12:35,600
uh the via differential privacy into

379
00:12:35,600 --> 00:12:37,040
to provide stronger and non-related

380
00:12:37,040 --> 00:12:38,320
properties to the data in the first

381
00:12:38,320 --> 00:12:39,519
place

382
00:12:39,519 --> 00:12:41,519
we're also exploring using private stats

383
00:12:41,519 --> 00:12:44,000
for non-logging applications and

384
00:12:44,000 --> 00:12:47,040
products within facebook

385
00:12:48,480 --> 00:12:50,240
in summary i've attached a link to the

386
00:12:50,240 --> 00:12:52,000
paper with many more details about the

387
00:12:52,000 --> 00:12:52,560
challenges

388
00:12:52,560 --> 00:12:55,200
i've described in my talk i haven't had

389
00:12:55,200 --> 00:12:56,560
10 minutes i haven't had

390
00:12:56,560 --> 00:12:58,079
time to go through all of them but i

391
00:12:58,079 --> 00:13:00,160
hope you find the paper interesting

392
00:13:00,160 --> 00:13:01,839
uh we'd love for you to take a look at

393
00:13:01,839 --> 00:13:03,680
it and whether similar architectures

394
00:13:03,680 --> 00:13:05,360
could be adopted in your applications as

395
00:13:05,360 --> 00:13:06,480
well

396
00:13:06,480 --> 00:13:08,560
and at this point i'd love to take any

397
00:13:08,560 --> 00:13:10,240
questions you may have

398
00:13:10,240 --> 00:13:13,600
with stuff thank you

399
00:13:13,600 --> 00:13:14,959
thanks a lot there are actually quite a

400
00:13:14,959 --> 00:13:16,800
number of questions uh in the chat but

401
00:13:16,800 --> 00:13:17,279
i'm

402
00:13:17,279 --> 00:13:18,480
afraid we won't have time for all of

403
00:13:18,480 --> 00:13:20,720
them just maybe pick one or two so

404
00:13:20,720 --> 00:13:22,800
one question is how can a client be sure

405
00:13:22,800 --> 00:13:24,320
that they aren't the only one

406
00:13:24,320 --> 00:13:25,839
the only person showing a given public

407
00:13:25,839 --> 00:13:27,680
key so they can verify that the key is

408
00:13:27,680 --> 00:13:28,800
valid but they kind of

409
00:13:28,800 --> 00:13:31,360
verify it's also widely issued yeah this

410
00:13:31,360 --> 00:13:32,399
is a very

411
00:13:32,399 --> 00:13:35,600
very good question uh uh usually what uh

412
00:13:35,600 --> 00:13:35,920
the

413
00:13:35,920 --> 00:13:37,680
the ways we're approaching this is like

414
00:13:37,680 --> 00:13:39,519
we will eventually probably

415
00:13:39,519 --> 00:13:42,079
have some sort of public key registry uh

416
00:13:42,079 --> 00:13:44,000
for uploading these public keys

417
00:13:44,000 --> 00:13:46,079
and then a policy attached to these

418
00:13:46,079 --> 00:13:47,440
public keys as well so

419
00:13:47,440 --> 00:13:49,760
for example like uh policy might be

420
00:13:49,760 --> 00:13:51,519
saying that we rotate these keys every

421
00:13:51,519 --> 00:13:52,079
day

422
00:13:52,079 --> 00:13:54,800
or we repeat these keys every hour and

423
00:13:54,800 --> 00:13:55,279
what

424
00:13:55,279 --> 00:13:58,560
uh clients might be able to do is verify

425
00:13:58,560 --> 00:14:00,079
this policy is correct by using

426
00:14:00,079 --> 00:14:01,199
mechanisms like the

427
00:14:01,199 --> 00:14:03,519
like attribute-based pop-rf or other

428
00:14:03,519 --> 00:14:05,360
mechanisms in the first place

429
00:14:05,360 --> 00:14:07,360
and uh while we might disagree on

430
00:14:07,360 --> 00:14:08,880
whether the policy is correct or not

431
00:14:08,880 --> 00:14:10,160
like at least you could verify

432
00:14:10,160 --> 00:14:11,839
like if somebody says the policy is this

433
00:14:11,839 --> 00:14:13,199
that they're rotating

434
00:14:13,199 --> 00:14:15,199
the key according to the policy and the

435
00:14:15,199 --> 00:14:16,639
managing keys are bringing the policy

436
00:14:16,639 --> 00:14:17,199
for him

437
00:14:17,199 --> 00:14:20,480
yeah okay thanks i'm getting a bit poked

438
00:14:20,480 --> 00:14:22,639
to get back on time uh for the program

439
00:14:22,639 --> 00:14:24,079
so i said there are more questions for

440
00:14:24,079 --> 00:14:25,360
you in the chat so maybe you can have a

441
00:14:25,360 --> 00:14:27,920
look at them uh there so thanks again

442
00:14:27,920 --> 00:14:30,079
and with that let's move on to the

443
00:14:30,079 --> 00:14:31,360
second presentation

444
00:14:31,360 --> 00:14:34,320
of this session uh which is titled a

445
00:14:34,320 --> 00:14:34,959
candid

446
00:14:34,959 --> 00:14:36,880
can do decentralized identity with

447
00:14:36,880 --> 00:14:38,800
legacy compatibility civil resistance

448
00:14:38,800 --> 00:14:40,320
and accountability

449
00:14:40,320 --> 00:14:42,560
and the talk is given jointly by arie

450
00:14:42,560 --> 00:14:45,839
and deepak

451
00:14:49,680 --> 00:14:52,480
okay are my slides visible now yes they

452
00:14:52,480 --> 00:14:53,760
are

453
00:14:53,760 --> 00:14:56,959
great thank you i'm going to talk about

454
00:14:56,959 --> 00:15:00,000
candid a decentralized identity system

455
00:15:00,000 --> 00:15:03,040
we've designed in collaboration with

456
00:15:03,040 --> 00:15:05,360
our co-authors at university of illinois

457
00:15:05,360 --> 00:15:06,720
and cornell

458
00:15:06,720 --> 00:15:10,079
and jp morgan this is a joint talk

459
00:15:10,079 --> 00:15:13,040
i'm first going to talk about

460
00:15:13,040 --> 00:15:14,880
decentralized identity explain what it's

461
00:15:14,880 --> 00:15:15,519
all about

462
00:15:15,519 --> 00:15:17,760
and motivate some of the design features

463
00:15:17,760 --> 00:15:18,880
of candid

464
00:15:18,880 --> 00:15:20,560
and then i'll turn the talk over to

465
00:15:20,560 --> 00:15:22,800
deepak we'll talk about some of the

466
00:15:22,800 --> 00:15:26,160
architectural details

467
00:15:26,160 --> 00:15:29,279
first what is decentralized identity

468
00:15:29,279 --> 00:15:30,880
well nearly all of us have had the

469
00:15:30,880 --> 00:15:32,560
experience of opening a financial

470
00:15:32,560 --> 00:15:33,199
account

471
00:15:33,199 --> 00:15:36,079
online in many cases you need to

472
00:15:36,079 --> 00:15:37,519
validate your identity

473
00:15:37,519 --> 00:15:41,040
using a video so you show your face

474
00:15:41,040 --> 00:15:42,560
and then you present an identity

475
00:15:42,560 --> 00:15:45,360
document like a driver's license

476
00:15:45,360 --> 00:15:46,800
right but you don't do it like that

477
00:15:46,800 --> 00:15:48,560
because then your fingers are covering

478
00:15:48,560 --> 00:15:51,519
essential information on the document

479
00:15:51,519 --> 00:15:52,800
and you don't do it like that because

480
00:15:52,800 --> 00:15:54,560
then well you're covering your face with

481
00:15:54,560 --> 00:15:56,320
a driver's license

482
00:15:56,320 --> 00:15:59,040
so you do it like that yes exactly hold

483
00:15:59,040 --> 00:16:00,160
still

484
00:16:00,160 --> 00:16:03,920
or you might do it like this

485
00:16:04,079 --> 00:16:06,320
the point is simply that this process is

486
00:16:06,320 --> 00:16:10,720
cumbersome and it's also prone to fraud

487
00:16:10,720 --> 00:16:13,040
the idea behind decentralized identity

488
00:16:13,040 --> 00:16:14,720
is the following

489
00:16:14,720 --> 00:16:17,120
a user generates a key pair public

490
00:16:17,120 --> 00:16:18,959
private key pair

491
00:16:18,959 --> 00:16:22,079
and then goes to an authority could for

492
00:16:22,079 --> 00:16:23,600
instance be the department of

493
00:16:23,600 --> 00:16:27,440
motor vehicles known as an issuer

494
00:16:27,440 --> 00:16:30,240
the issuer provides the user with a

495
00:16:30,240 --> 00:16:32,320
digital version of an identity document

496
00:16:32,320 --> 00:16:34,480
like a driver's license

497
00:16:34,480 --> 00:16:39,199
which is bound to the user's public key

498
00:16:39,199 --> 00:16:42,320
with this setup the user now can go to a

499
00:16:42,320 --> 00:16:43,199
third party

500
00:16:43,199 --> 00:16:45,120
let's say alice for instance wants to

501
00:16:45,120 --> 00:16:46,399
take out a loan

502
00:16:46,399 --> 00:16:48,160
from a bank and needs to prove that

503
00:16:48,160 --> 00:16:50,079
she's of age to do so and maybe that she

504
00:16:50,079 --> 00:16:51,680
lives in a particular state like

505
00:16:51,680 --> 00:16:54,720
california and she can

506
00:16:54,720 --> 00:16:57,279
present her digital credential her

507
00:16:57,279 --> 00:16:58,720
driver's license

508
00:16:58,720 --> 00:17:01,680
to this third party and use her private

509
00:17:01,680 --> 00:17:02,639
key

510
00:17:02,639 --> 00:17:05,520
to prove that she's the legitimate owner

511
00:17:05,520 --> 00:17:07,839
of the credential

512
00:17:07,839 --> 00:17:11,520
she can also to preserve the her privacy

513
00:17:11,520 --> 00:17:13,439
with regard to sensitive information in

514
00:17:13,439 --> 00:17:14,400
the document

515
00:17:14,400 --> 00:17:16,799
disclose information selectively using

516
00:17:16,799 --> 00:17:18,400
for instance techniques we just heard

517
00:17:18,400 --> 00:17:19,280
about from

518
00:17:19,280 --> 00:17:23,599
on alyssia sky in the invited talk

519
00:17:24,319 --> 00:17:27,359
this notion that users should have

520
00:17:27,359 --> 00:17:30,480
strict control over digital versions

521
00:17:30,480 --> 00:17:33,520
of their important credentials has been

522
00:17:33,520 --> 00:17:34,480
embraced by

523
00:17:34,480 --> 00:17:36,240
enterprises across a number of

524
00:17:36,240 --> 00:17:39,440
industries you see dozens of examples

525
00:17:39,440 --> 00:17:42,640
here it's also being championed by

526
00:17:42,640 --> 00:17:44,480
several standards bodies

527
00:17:44,480 --> 00:17:46,400
and the banner's been taken up by a

528
00:17:46,400 --> 00:17:48,720
number of startups you see a few

529
00:17:48,720 --> 00:17:51,440
listed here

530
00:17:51,919 --> 00:17:54,960
the goals are several first to improve

531
00:17:54,960 --> 00:17:56,400
the user experience

532
00:17:56,400 --> 00:17:58,320
and reduce fraud in other words to

533
00:17:58,320 --> 00:18:00,000
address the two problems i mentioned a

534
00:18:00,000 --> 00:18:02,400
couple of minutes ago

535
00:18:02,400 --> 00:18:03,919
there's also an interest in empowering

536
00:18:03,919 --> 00:18:06,000
users to manage their own data more

537
00:18:06,000 --> 00:18:07,600
broadly beyond

538
00:18:07,600 --> 00:18:10,160
identity documents for instance to

539
00:18:10,160 --> 00:18:10,720
manage

540
00:18:10,720 --> 00:18:13,200
healthcare-related data within this

541
00:18:13,200 --> 00:18:15,360
framework

542
00:18:15,360 --> 00:18:16,720
there's an interest in providing

543
00:18:16,720 --> 00:18:18,240
credentials to those who may have

544
00:18:18,240 --> 00:18:20,160
difficulty getting them

545
00:18:20,160 --> 00:18:23,360
from standard governmental authorities

546
00:18:23,360 --> 00:18:25,200
for instance stateless persons

547
00:18:25,200 --> 00:18:27,039
it would be nice if non-governmental

548
00:18:27,039 --> 00:18:28,799
organizations can issue

549
00:18:28,799 --> 00:18:31,919
temporary credentials to these people

550
00:18:31,919 --> 00:18:35,919
who are otherwise disenfranchised

551
00:18:35,919 --> 00:18:38,720
there's also a direct benefit to

552
00:18:38,720 --> 00:18:40,320
enterprises

553
00:18:40,320 --> 00:18:42,480
if users are controlling their own

554
00:18:42,480 --> 00:18:43,520
sensitive data

555
00:18:43,520 --> 00:18:46,320
then enterprises don't have to and this

556
00:18:46,320 --> 00:18:48,080
means that enterprises

557
00:18:48,080 --> 00:18:51,360
are less vulnerable to breaches that

558
00:18:51,360 --> 00:18:52,960
disclose this sensitive information and

559
00:18:52,960 --> 00:18:57,120
this reduces their liability of course

560
00:18:57,120 --> 00:18:59,760
so the vision is pretty compelling but

561
00:18:59,760 --> 00:19:02,000
nearly all proposals sweep a few

562
00:19:02,000 --> 00:19:04,080
critical problems under the rug and i'm

563
00:19:04,080 --> 00:19:07,520
gonna mention two of those

564
00:19:07,520 --> 00:19:10,799
the first has to do with this entity

565
00:19:10,799 --> 00:19:14,160
called the issuer the question is

566
00:19:14,160 --> 00:19:17,760
where is this issuer going to come from

567
00:19:17,760 --> 00:19:20,240
entities like departments of motor

568
00:19:20,240 --> 00:19:20,799
vehicles

569
00:19:20,799 --> 00:19:22,960
are not going to start issuing digital

570
00:19:22,960 --> 00:19:24,799
credentials for decentralized

571
00:19:24,799 --> 00:19:27,200
identity ecosystems until these

572
00:19:27,200 --> 00:19:30,160
ecosystems have firmly taken root

573
00:19:30,160 --> 00:19:31,840
but conversely you can't have a

574
00:19:31,840 --> 00:19:34,000
decentralized identity ecosystem

575
00:19:34,000 --> 00:19:36,080
until you have a collection of

576
00:19:36,080 --> 00:19:38,080
supporting issuers

577
00:19:38,080 --> 00:19:39,679
so you end up with a kind of chicken in

578
00:19:39,679 --> 00:19:41,760
the egg problem or if you will a

579
00:19:41,760 --> 00:19:43,440
bootstrapping problem

580
00:19:43,440 --> 00:19:45,200
and this largely gets swept under the

581
00:19:45,200 --> 00:19:47,440
rug by existing standards and other

582
00:19:47,440 --> 00:19:50,320
proposals for decentralized identity

583
00:19:50,320 --> 00:19:52,720
a second problem that is neglected in

584
00:19:52,720 --> 00:19:53,760
this context

585
00:19:53,760 --> 00:19:56,559
and often in others like cryptocurrency

586
00:19:56,559 --> 00:19:57,679
wallets

587
00:19:57,679 --> 00:20:00,240
is the difficulty that key management

588
00:20:00,240 --> 00:20:02,400
poses for users

589
00:20:02,400 --> 00:20:05,120
we all know that users struggle to

590
00:20:05,120 --> 00:20:07,679
secure credentials like passwords

591
00:20:07,679 --> 00:20:10,640
they struggle even more with securing

592
00:20:10,640 --> 00:20:12,640
their private keys which after all is a

593
00:20:12,640 --> 00:20:13,360
somewhat more

594
00:20:13,360 --> 00:20:17,760
challenging and high-stakes endeavor

595
00:20:17,760 --> 00:20:21,039
just one data point reveals the extent

596
00:20:21,039 --> 00:20:21,840
of the problem

597
00:20:21,840 --> 00:20:24,480
it's estimated that some four million

598
00:20:24,480 --> 00:20:25,760
bitcoin

599
00:20:25,760 --> 00:20:28,559
which are worth when i last checked plus

600
00:20:28,559 --> 00:20:29,200
or minus

601
00:20:29,200 --> 00:20:31,280
40 billion say worth something on the

602
00:20:31,280 --> 00:20:33,440
order of 150 billion dollars that has

603
00:20:33,440 --> 00:20:35,120
all gone up in a puff of smoke

604
00:20:35,120 --> 00:20:37,760
because users have lost private keys

605
00:20:37,760 --> 00:20:39,120
this problem as i said

606
00:20:39,120 --> 00:20:41,120
also gets swept under the rug and of

607
00:20:41,120 --> 00:20:42,799
course is important in other

608
00:20:42,799 --> 00:20:45,360
systems as well we aim to address both

609
00:20:45,360 --> 00:20:46,799
of these problems and some others we

610
00:20:46,799 --> 00:20:48,400
unfortunately won't have time

611
00:20:48,400 --> 00:20:51,919
to talk about it great length today like

612
00:20:51,919 --> 00:20:54,480
achieving civil resistance we address

613
00:20:54,480 --> 00:20:55,760
both of these in

614
00:20:55,760 --> 00:20:59,039
candid and with that i'll turn the talk

615
00:20:59,039 --> 00:21:01,120
over to deepak who as i said will

616
00:21:01,120 --> 00:21:02,960
discuss some important details in the

617
00:21:02,960 --> 00:21:05,360
system

618
00:21:12,320 --> 00:21:17,840
we don't hear you um

619
00:21:20,480 --> 00:21:22,720
hello

620
00:21:24,799 --> 00:21:28,240
your microphone is barely working

621
00:21:28,240 --> 00:21:31,840
we can barely hear you

622
00:21:44,480 --> 00:21:48,880
um how is my audio now it's better

623
00:21:48,880 --> 00:21:51,120
okay

624
00:21:52,000 --> 00:21:54,159
yeah sorry about that uh okay so i'll

625
00:21:54,159 --> 00:21:55,919
take you to rest of the talk

626
00:21:55,919 --> 00:21:58,559
um so before i go into candid uh i'll

627
00:21:58,559 --> 00:22:00,320
first introduce a building block

628
00:22:00,320 --> 00:22:03,360
called deco and i'll motivate

629
00:22:03,360 --> 00:22:05,360
uh the use of deco through the following

630
00:22:05,360 --> 00:22:06,720
problem

631
00:22:06,720 --> 00:22:10,400
so suppose bob here uh wants to sell it

632
00:22:10,400 --> 00:22:12,400
wants to sell a token called the bubble

633
00:22:12,400 --> 00:22:13,600
token

634
00:22:13,600 --> 00:22:15,360
and alice is a user who wants to buy

635
00:22:15,360 --> 00:22:17,120
some of the bubble token

636
00:22:17,120 --> 00:22:19,440
now bob being a responsible person wants

637
00:22:19,440 --> 00:22:20,720
to ensure that

638
00:22:20,720 --> 00:22:23,200
all users that buy some bubble token

639
00:22:23,200 --> 00:22:24,159
have at least

640
00:22:24,159 --> 00:22:25,600
a minimum balance let's say five

641
00:22:25,600 --> 00:22:26,960
thousand dollars in their banks bank

642
00:22:26,960 --> 00:22:27,520
account

643
00:22:27,520 --> 00:22:31,039
so that's a requirement uh bob specifies

644
00:22:31,039 --> 00:22:32,799
now alice comes along alice has the

645
00:22:32,799 --> 00:22:34,640
required amount in her bank account

646
00:22:34,640 --> 00:22:36,720
great but how does alice prove that to

647
00:22:36,720 --> 00:22:38,799
bob

648
00:22:38,799 --> 00:22:40,559
now naive solutions like sending

649
00:22:40,559 --> 00:22:43,200
screenshots of bank uh bank balances

650
00:22:43,200 --> 00:22:44,960
simply don't work because as you all

651
00:22:44,960 --> 00:22:47,280
might know screenshots are easy enough

652
00:22:47,280 --> 00:22:49,520
to fake

653
00:22:49,520 --> 00:22:52,960
so we clearly need better solutions here

654
00:22:52,960 --> 00:22:54,880
now consider for a moment what happens

655
00:22:54,880 --> 00:22:56,960
when alice logs into her bank account to

656
00:22:56,960 --> 00:22:59,679
check her bank balance let's say

657
00:22:59,679 --> 00:23:01,919
quite likely alice is using a tls

658
00:23:01,919 --> 00:23:02,799
connection

659
00:23:02,799 --> 00:23:04,640
meaning all the data that alice is

660
00:23:04,640 --> 00:23:06,159
getting from the bank is sort of

661
00:23:06,159 --> 00:23:09,760
protected by tls

662
00:23:09,760 --> 00:23:12,480
now in particular in within tls the

663
00:23:12,480 --> 00:23:13,760
server proves that

664
00:23:13,760 --> 00:23:15,600
it is actually the server and not

665
00:23:15,600 --> 00:23:16,799
someone else by

666
00:23:16,799 --> 00:23:18,720
sending a certificate to alice so alice

667
00:23:18,720 --> 00:23:20,559
sort of checks that certificate

668
00:23:20,559 --> 00:23:23,039
and that's so sort of alice gets to

669
00:23:23,039 --> 00:23:24,720
guarantee that she's actually talking to

670
00:23:24,720 --> 00:23:26,559
the bank uh she's supposed to be talking

671
00:23:26,559 --> 00:23:27,280
to

672
00:23:27,280 --> 00:23:29,440
now digital signatures uh the mechanism

673
00:23:29,440 --> 00:23:31,840
used within the certificates

674
00:23:31,840 --> 00:23:34,400
has uh seems like something uh we want

675
00:23:34,400 --> 00:23:36,240
here in our goal of sort of proving

676
00:23:36,240 --> 00:23:37,919
a statement about the bank balance to a

677
00:23:37,919 --> 00:23:40,400
third party so for example if the bank

678
00:23:40,400 --> 00:23:41,200
would have signed

679
00:23:41,200 --> 00:23:43,440
uh signed the bank balance itself and

680
00:23:43,440 --> 00:23:45,919
given uh that blob of data to alice

681
00:23:45,919 --> 00:23:47,440
alice can show that to anybody and

682
00:23:47,440 --> 00:23:49,360
convince them that she has a certain

683
00:23:49,360 --> 00:23:51,279
bank balance

684
00:23:51,279 --> 00:23:53,600
but unfortunately unfortunately tls surf

685
00:23:53,600 --> 00:23:57,279
doesn't sign all the record layer data

686
00:23:57,279 --> 00:23:59,679
in particular digital signatures are

687
00:23:59,679 --> 00:24:01,520
only used for the key exchange phase

688
00:24:01,520 --> 00:24:03,919
and tls soon switches to using symmetric

689
00:24:03,919 --> 00:24:05,840
keys for the record layer

690
00:24:05,840 --> 00:24:07,600
and what this means is both alice and

691
00:24:07,600 --> 00:24:09,520
the server here have a shared key and

692
00:24:09,520 --> 00:24:11,520
this key is used to map the data

693
00:24:11,520 --> 00:24:13,600
and that gives a sort of signing sort of

694
00:24:13,600 --> 00:24:15,360
guarantee to alice

695
00:24:15,360 --> 00:24:17,039
so alice is convinced that the data is

696
00:24:17,039 --> 00:24:18,400
untampered

697
00:24:18,400 --> 00:24:20,640
but in our goal of proving the proving

698
00:24:20,640 --> 00:24:22,159
some statement about this data to a

699
00:24:22,159 --> 00:24:24,000
third party

700
00:24:24,000 --> 00:24:26,640
this doesn't help it at all because

701
00:24:26,640 --> 00:24:28,240
alice knows the key alice can

702
00:24:28,240 --> 00:24:28,880
essentially

703
00:24:28,880 --> 00:24:33,039
fake any valid looking transcript

704
00:24:33,039 --> 00:24:36,640
now the key idea in tekko uh sort of

705
00:24:36,640 --> 00:24:39,760
follows fairly logically uh we

706
00:24:39,760 --> 00:24:41,679
we change the tls handshake to what we

707
00:24:41,679 --> 00:24:43,279
call a three-party handshake

708
00:24:43,279 --> 00:24:46,080
as shown by the logo on top right and

709
00:24:46,080 --> 00:24:46,480
the

710
00:24:46,480 --> 00:24:48,720
and the central idea here is to share

711
00:24:48,720 --> 00:24:50,559
the session key between the prover

712
00:24:50,559 --> 00:24:53,919
alice and bob the verifier

713
00:24:53,919 --> 00:24:56,000
this ensures that alice doesn't know the

714
00:24:56,000 --> 00:24:57,600
full key and hence can't force the data

715
00:24:57,600 --> 00:24:59,679
from the server

716
00:24:59,679 --> 00:25:02,000
now at a later point alice will be

717
00:25:02,000 --> 00:25:04,159
revealed the full key and then alice can

718
00:25:04,159 --> 00:25:05,760
uh in particular after alice sort of

719
00:25:05,760 --> 00:25:07,279
commits to the transcript

720
00:25:07,279 --> 00:25:09,200
and then alice can prove things about

721
00:25:09,200 --> 00:25:11,279
this data to bob in zero knowledge

722
00:25:11,279 --> 00:25:15,039
now i won't go into the mechanics of the

723
00:25:15,039 --> 00:25:16,720
protocol details of deco here in the

724
00:25:16,720 --> 00:25:18,400
interest of time

725
00:25:18,400 --> 00:25:20,159
but at a high level uh this is sort of

726
00:25:20,159 --> 00:25:23,279
the key idea in deco

727
00:25:24,559 --> 00:25:28,720
now so uh in a nutshell deco allows

728
00:25:28,720 --> 00:25:30,000
alice the user here

729
00:25:30,000 --> 00:25:32,880
to prove uh to prove virtually any

730
00:25:32,880 --> 00:25:33,600
statement

731
00:25:33,600 --> 00:25:37,360
about uh web accessible data

732
00:25:37,360 --> 00:25:39,200
in this example here for example alice

733
00:25:39,200 --> 00:25:40,640
proves a statement that she has greater

734
00:25:40,640 --> 00:25:43,679
than 5000 dollars

735
00:25:43,679 --> 00:25:45,840
two key points to not about decor deco

736
00:25:45,840 --> 00:25:47,520
allows deco works with

737
00:25:47,520 --> 00:25:50,960
unmodified legacy tls servers so uh

738
00:25:50,960 --> 00:25:52,559
there is no need to change anything on

739
00:25:52,559 --> 00:25:54,480
server side in particular deco even

740
00:25:54,480 --> 00:25:56,159
works with modern tls versions

741
00:25:56,159 --> 00:25:59,120
such as 1.3

742
00:25:59,520 --> 00:26:01,440
now with this building block in mind

743
00:26:01,440 --> 00:26:05,039
let's let's go to candid

744
00:26:06,240 --> 00:26:08,240
the basic setup in candidate is that of

745
00:26:08,240 --> 00:26:09,600
a committee of nodes

746
00:26:09,600 --> 00:26:11,440
and we assume a certain amount of

747
00:26:11,440 --> 00:26:13,840
honesty among this committee

748
00:26:13,840 --> 00:26:15,600
credential issuance in candidate works

749
00:26:15,600 --> 00:26:18,080
as follows say alice wants to prove that

750
00:26:18,080 --> 00:26:19,520
she's above 18.

751
00:26:19,520 --> 00:26:22,080
alice picks several legacy providers

752
00:26:22,080 --> 00:26:23,679
that might provide her aids

753
00:26:23,679 --> 00:26:25,440
for example her identity provider like

754
00:26:25,440 --> 00:26:27,679
social security or her driver's license

755
00:26:27,679 --> 00:26:28,080
which

756
00:26:28,080 --> 00:26:31,279
sort of has her age now alice can then

757
00:26:31,279 --> 00:26:32,799
use decode to prove

758
00:26:32,799 --> 00:26:34,799
that she's above 18. the committee

759
00:26:34,799 --> 00:26:36,559
verifies the deco proofs and once the

760
00:26:36,559 --> 00:26:37,679
proofs are verified signs the

761
00:26:37,679 --> 00:26:41,440
credentials saying analysis of 18.

762
00:26:41,520 --> 00:26:43,039
now in this process we've essentially

763
00:26:43,039 --> 00:26:45,200
turned any virtually all any web server

764
00:26:45,200 --> 00:26:48,400
into a credential issuer

765
00:26:48,559 --> 00:26:50,480
other key credential issuance properties

766
00:26:50,480 --> 00:26:51,840
candid has

767
00:26:51,840 --> 00:26:53,760
include privacy so the committee nodes

768
00:26:53,760 --> 00:26:55,360
only learn the data

769
00:26:55,360 --> 00:26:59,039
as uh that they need to and nothing more

770
00:26:59,039 --> 00:27:01,840
legacy compatibility uh sort of coming

771
00:27:01,840 --> 00:27:02,880
from deco because

772
00:27:02,880 --> 00:27:05,679
um deco works with legacy tls servers

773
00:27:05,679 --> 00:27:06,559
and

774
00:27:06,559 --> 00:27:07,679
candidate can support virtually

775
00:27:07,679 --> 00:27:09,520
unlimited registration types over all

776
00:27:09,520 --> 00:27:12,240
sorts of data

777
00:27:13,200 --> 00:27:15,679
let's go to key management now the key

778
00:27:15,679 --> 00:27:16,559
ideas

779
00:27:16,559 --> 00:27:20,799
in our key management protocol is to

780
00:27:20,799 --> 00:27:23,279
make it make it fairly user friendly for

781
00:27:23,279 --> 00:27:25,200
users to backup their keys

782
00:27:25,200 --> 00:27:27,520
and we do so by allowing users to

783
00:27:27,520 --> 00:27:29,679
leverage existing legacy providers as

784
00:27:29,679 --> 00:27:32,240
authentication layers i'll explain that

785
00:27:32,240 --> 00:27:32,960
now

786
00:27:32,960 --> 00:27:34,720
so let's say alice here wants to back up

787
00:27:34,720 --> 00:27:36,799
her key alice gives the key to the

788
00:27:36,799 --> 00:27:37,760
company we use

789
00:27:37,760 --> 00:27:39,279
standard secret sharing techniques to

790
00:27:39,279 --> 00:27:41,120
ensure that no individual company

791
00:27:41,120 --> 00:27:44,320
knows the full key and so each node only

792
00:27:44,320 --> 00:27:47,039
knows a share of the key and if ever

793
00:27:47,039 --> 00:27:49,679
alice loses her key um what alice can do

794
00:27:49,679 --> 00:27:50,720
is alice can

795
00:27:50,720 --> 00:27:53,279
sell pre-select uh several providers

796
00:27:53,279 --> 00:27:55,120
let's say twitter facebook google but uh

797
00:27:55,120 --> 00:27:56,399
the providers are of a

798
00:27:56,399 --> 00:27:59,440
complete choice of the user and alice

799
00:27:59,440 --> 00:28:02,480
can generate a proof of login using deco

800
00:28:02,480 --> 00:28:04,880
once the committee verifies these proofs

801
00:28:04,880 --> 00:28:08,159
the key is written to alice

802
00:28:08,799 --> 00:28:10,960
one one key point to note here is our

803
00:28:10,960 --> 00:28:13,200
use of deco as a proof of login instead

804
00:28:13,200 --> 00:28:14,159
of using

805
00:28:14,159 --> 00:28:18,080
more traditional mechanisms like what uh

806
00:28:18,080 --> 00:28:19,039
which are sort of built for

807
00:28:19,039 --> 00:28:21,279
authentication and the reason for that

808
00:28:21,279 --> 00:28:21,600
is

809
00:28:21,600 --> 00:28:24,559
what the use of oauth leaks uh leaks uh

810
00:28:24,559 --> 00:28:26,159
personal identifiable information about

811
00:28:26,159 --> 00:28:27,679
alice to the company nodes and we want

812
00:28:27,679 --> 00:28:31,039
to avoid that leakage here

813
00:28:31,039 --> 00:28:32,399
now in the interest of time where i'm

814
00:28:32,399 --> 00:28:34,399
not going to cover uh

815
00:28:34,399 --> 00:28:36,960
about rest of uh the facets of candid

816
00:28:36,960 --> 00:28:38,159
and i'll sort of end the

817
00:28:38,159 --> 00:28:39,919
presentation here and we can take some

818
00:28:39,919 --> 00:28:42,159
questions now

819
00:28:42,159 --> 00:28:43,919
thanks arita thanks deepak we're

820
00:28:43,919 --> 00:28:45,600
actually running already over time so

821
00:28:45,600 --> 00:28:46,960
i'm afraid we won't have time for

822
00:28:46,960 --> 00:28:48,320
questions but there are a couple um

823
00:28:48,320 --> 00:28:50,320
in the chat so maybe you can answer them

824
00:28:50,320 --> 00:28:52,159
um over there

825
00:28:52,159 --> 00:28:55,840
sorry for that thank you okay and then

826
00:28:55,840 --> 00:28:58,080
we come to to the final talk of the

827
00:28:58,080 --> 00:28:59,440
session of the conference

828
00:28:59,440 --> 00:29:01,360
uh which shows i think some new

829
00:29:01,360 --> 00:29:03,120
construction use cases for anonymous

830
00:29:03,120 --> 00:29:04,799
credentials and will not mistake maybe

831
00:29:04,799 --> 00:29:06,159
even the first actual real world

832
00:29:06,159 --> 00:29:07,679
deployment of them

833
00:29:07,679 --> 00:29:09,200
in the context of private group

834
00:29:09,200 --> 00:29:11,120
messaging and signal

835
00:29:11,120 --> 00:29:13,200
and if the program is correct i think

836
00:29:13,200 --> 00:29:14,880
the talk will be jointly given by all

837
00:29:14,880 --> 00:29:19,200
authors so melissa trevor and greg

838
00:29:25,200 --> 00:29:27,600
so any of them here and can start

839
00:29:27,600 --> 00:29:28,960
sharing those lights because

840
00:29:28,960 --> 00:29:31,279
currently we can't hear any of you yeah

841
00:29:31,279 --> 00:29:34,640
trevor's here and i think he's gonna

842
00:29:38,840 --> 00:29:41,840
start

843
00:29:56,640 --> 00:30:00,640
uh hello is this visible yes

844
00:30:00,640 --> 00:30:03,840
okay awesome thanks sanya um so uh hello

845
00:30:03,840 --> 00:30:05,840
rwc i'm trevor i work with signal and

846
00:30:05,840 --> 00:30:07,279
i'm going to be talking today about the

847
00:30:07,279 --> 00:30:09,120
signal private group system this

848
00:30:09,120 --> 00:30:11,840
is joint work with melissa chase and

849
00:30:11,840 --> 00:30:14,720
greg zabarucha from microsoft research

850
00:30:14,720 --> 00:30:15,760
however i'm going to be doing the first

851
00:30:15,760 --> 00:30:17,600
half of the presentation and then i will

852
00:30:17,600 --> 00:30:19,120
hand it off to greg unfortunately we

853
00:30:19,120 --> 00:30:19,600
will have

854
00:30:19,600 --> 00:30:23,840
no melissa presenting today

855
00:30:24,000 --> 00:30:26,559
so um

856
00:30:28,000 --> 00:30:29,360
so for some background cinahl is a

857
00:30:29,360 --> 00:30:30,880
messaging app that encrypts everything

858
00:30:30,880 --> 00:30:32,559
it sends it has a notion of groups

859
00:30:32,559 --> 00:30:34,480
you can create a group and add people to

860
00:30:34,480 --> 00:30:36,480
that group everyone in the group can see

861
00:30:36,480 --> 00:30:37,679
everyone else in the group

862
00:30:37,679 --> 00:30:39,440
they can see all messages sent to the

863
00:30:39,440 --> 00:30:41,520
group and in some cases they can add and

864
00:30:41,520 --> 00:30:43,679
remove other members from the group

865
00:30:43,679 --> 00:30:45,279
now we're not going to say much about

866
00:30:45,279 --> 00:30:46,799
how clients send group messages in

867
00:30:46,799 --> 00:30:48,320
signal that's currently very simple you

868
00:30:48,320 --> 00:30:50,559
just send a one-to-one encrypted message

869
00:30:50,559 --> 00:30:53,520
to each member the problem we'll be

870
00:30:53,520 --> 00:30:54,880
discussing is how members know

871
00:30:54,880 --> 00:30:56,880
who to send messages to in other words

872
00:30:56,880 --> 00:30:58,960
how can we provide group members with a

873
00:30:58,960 --> 00:31:01,120
shared consistent view of the current

874
00:31:01,120 --> 00:31:02,840
membership list

875
00:31:02,840 --> 00:31:04,960
um similar private group system is our

876
00:31:04,960 --> 00:31:06,240
novel system for doing this

877
00:31:06,240 --> 00:31:08,559
in a privacy preserving way the system

878
00:31:08,559 --> 00:31:10,240
was deployed to signal a few months ago

879
00:31:10,240 --> 00:31:11,200
it has

880
00:31:11,200 --> 00:31:12,480
improved the reliability of signal

881
00:31:12,480 --> 00:31:14,080
groups and also given signal a platform

882
00:31:14,080 --> 00:31:15,679
on which we built some more advanced

883
00:31:15,679 --> 00:31:16,720
features

884
00:31:16,720 --> 00:31:18,159
and what follows i'll discuss the

885
00:31:18,159 --> 00:31:19,919
problem space of private group

886
00:31:19,919 --> 00:31:21,120
management a little bit more and how

887
00:31:21,120 --> 00:31:21,919
signal is handled

888
00:31:21,919 --> 00:31:23,760
in the past then i'll give an overview

889
00:31:23,760 --> 00:31:25,120
of our new system and finally turn it

890
00:31:25,120 --> 00:31:26,640
over to greg to say more about

891
00:31:26,640 --> 00:31:29,840
the crypto so let's talk about the

892
00:31:29,840 --> 00:31:30,559
problem space

893
00:31:30,559 --> 00:31:32,240
in most modern messaging systems group

894
00:31:32,240 --> 00:31:33,760
membership lists are simply stored

895
00:31:33,760 --> 00:31:36,000
in clear on a server users authenticate

896
00:31:36,000 --> 00:31:37,360
to the server to prove that they're a

897
00:31:37,360 --> 00:31:38,880
member of the group

898
00:31:38,880 --> 00:31:40,799
and then they can fetch the the latest

899
00:31:40,799 --> 00:31:42,720
membership list or modify the membership

900
00:31:42,720 --> 00:31:44,880
list with server enforced access control

901
00:31:44,880 --> 00:31:46,960
so for example members are typically

902
00:31:46,960 --> 00:31:48,559
allowed to add other members

903
00:31:48,559 --> 00:31:50,080
some members might also have an

904
00:31:50,080 --> 00:31:51,519
administrator role which allows them to

905
00:31:51,519 --> 00:31:52,960
remove other members

906
00:31:52,960 --> 00:31:54,799
manage the set of administrators change

907
00:31:54,799 --> 00:31:57,600
group settings etc

908
00:31:57,600 --> 00:32:00,000
functionality wise this is ideal but the

909
00:32:00,000 --> 00:32:01,519
security risk is obvious

910
00:32:01,519 --> 00:32:03,120
having all group memberships stored in

911
00:32:03,120 --> 00:32:05,279
clear on a server means the server has a

912
00:32:05,279 --> 00:32:06,080
detailed map

913
00:32:06,080 --> 00:32:08,720
of social relationships across the user

914
00:32:08,720 --> 00:32:09,760
base

915
00:32:09,760 --> 00:32:11,279
this information could be stolen from

916
00:32:11,279 --> 00:32:12,799
the server it could be abused by the

917
00:32:12,799 --> 00:32:14,240
server and not only could the server

918
00:32:14,240 --> 00:32:15,840
read this information it could modify

919
00:32:15,840 --> 00:32:18,240
group membership for example by adding

920
00:32:18,240 --> 00:32:21,600
unwanted malicious members into a group

921
00:32:21,600 --> 00:32:22,880
having clear text like this on our

922
00:32:22,880 --> 00:32:24,799
servers is unacceptable to signal

923
00:32:24,799 --> 00:32:27,039
so in signal added group support in 2014

924
00:32:27,039 --> 00:32:28,799
we took a distributed approach

925
00:32:28,799 --> 00:32:30,320
in this old approach each member

926
00:32:30,320 --> 00:32:31,919
maintains their own copy of the

927
00:32:31,919 --> 00:32:34,000
membership list

928
00:32:34,000 --> 00:32:35,279
when a new member is added they are

929
00:32:35,279 --> 00:32:36,880
given the membership list by an existing

930
00:32:36,880 --> 00:32:37,360
member

931
00:32:37,360 --> 00:32:39,279
and this new list is also sent to the

932
00:32:39,279 --> 00:32:40,799
other existing members

933
00:32:40,799 --> 00:32:42,240
this keeps the membership list off the

934
00:32:42,240 --> 00:32:44,000
server but having a distributed system

935
00:32:44,000 --> 00:32:47,760
here has turned out to be quite painful

936
00:32:47,760 --> 00:32:49,360
in particular consistency problems can

937
00:32:49,360 --> 00:32:51,200
arise if membership messages

938
00:32:51,200 --> 00:32:52,880
are lost or arrive in a different order

939
00:32:52,880 --> 00:32:54,960
to different users these situations can

940
00:32:54,960 --> 00:32:56,720
occur if users have network problems

941
00:32:56,720 --> 00:32:58,480
while sending or receiving messages

942
00:32:58,480 --> 00:33:00,640
or if users make simultaneous changes to

943
00:33:00,640 --> 00:33:02,320
the membership list

944
00:33:02,320 --> 00:33:04,399
in these cases clients often end up with

945
00:33:04,399 --> 00:33:06,159
inconsistent views of group membership

946
00:33:06,159 --> 00:33:08,840
subsequent messages that they send in

947
00:33:08,840 --> 00:33:11,840
the

948
00:33:17,760 --> 00:33:20,000
consistency of storing group membership

949
00:33:20,000 --> 00:33:21,600
on a server

950
00:33:21,600 --> 00:33:23,279
however we would like the membership

951
00:33:23,279 --> 00:33:24,799
entries to be encrypted

952
00:33:24,799 --> 00:33:27,200
so the server can't read the entries or

953
00:33:27,200 --> 00:33:30,159
forge new entries

954
00:33:35,120 --> 00:33:36,640
to achieve this in our new system the

955
00:33:36,640 --> 00:33:38,159
creator of a group generates a secret

956
00:33:38,159 --> 00:33:39,120
key that will be used

957
00:33:39,120 --> 00:33:40,720
to encrypt and decrypt entries for that

958
00:33:40,720 --> 00:33:44,799
group when a new member is added they

959
00:33:50,840 --> 00:33:53,840
are

960
00:33:54,159 --> 00:33:55,760
unfortunately your network seems to be

961
00:33:55,760 --> 00:33:58,399
cutting out

962
00:34:01,679 --> 00:34:07,840
or transition to dragon

963
00:34:09,119 --> 00:34:11,919
uh hello hello

964
00:34:12,560 --> 00:34:14,399
okay do i need to back up a slide or two

965
00:34:14,399 --> 00:34:18,078
or uh should i try to continue

966
00:34:18,960 --> 00:34:22,159
you sound okay now maybe just continue

967
00:34:22,159 --> 00:34:25,520
trevor maybe go to audio only

968
00:34:27,119 --> 00:34:28,399
yeah just turn off your camera that

969
00:34:28,399 --> 00:34:30,719
helps

970
00:34:32,839 --> 00:34:35,359
uh one thing

971
00:34:35,760 --> 00:34:38,079
um

972
00:34:42,000 --> 00:34:43,918
i'm not sure how to do that so let me

973
00:34:43,918 --> 00:34:45,839
just plow ahead and um

974
00:34:45,839 --> 00:34:51,599
tell me if oh yeah

975
00:34:52,560 --> 00:34:54,079
okay thanks i think i've been turned off

976
00:34:54,079 --> 00:34:55,760
anyways okay uh

977
00:34:55,760 --> 00:34:58,800
can you hear me now yeah yes

978
00:34:58,800 --> 00:35:01,440
so um okay so we're sending alice's

979
00:35:01,440 --> 00:35:03,359
sending bob an encrypted uh

980
00:35:03,359 --> 00:35:06,560
uh group key for for the group in an

981
00:35:06,560 --> 00:35:07,839
encrypted message

982
00:35:07,839 --> 00:35:11,040
um we have this problem of how uh

983
00:35:11,040 --> 00:35:13,280
they can use this key and authenticate

984
00:35:13,280 --> 00:35:15,520
to these encrypted entries on the server

985
00:35:15,520 --> 00:35:18,000
and so we are going to address that with

986
00:35:18,000 --> 00:35:19,440
a form of anonymous credentials the user

987
00:35:19,440 --> 00:35:20,880
will periodically authenticate to the

988
00:35:20,880 --> 00:35:22,400
server to receive a short-lived

989
00:35:22,400 --> 00:35:24,240
authentic anonymous credential

990
00:35:24,240 --> 00:35:26,480
for their user identity which is a uuid

991
00:35:26,480 --> 00:35:27,359
and signal

992
00:35:27,359 --> 00:35:28,880
and then they will contact the server

993
00:35:28,880 --> 00:35:30,800
over an unauthenticated connection and

994
00:35:30,800 --> 00:35:32,720
present a zero knowledge proof

995
00:35:32,720 --> 00:35:34,560
that they have a credential matching a

996
00:35:34,560 --> 00:35:37,119
specific ciphertext

997
00:35:37,119 --> 00:35:38,880
at this point the server will know it

998
00:35:38,880 --> 00:35:40,240
has a secure connection with a

999
00:35:40,240 --> 00:35:41,599
particular member of the group

1000
00:35:41,599 --> 00:35:43,599
represented by an encrypted entry

1001
00:35:43,599 --> 00:35:45,119
the user will be allowed to download the

1002
00:35:45,119 --> 00:35:46,720
group membership which they can decrypt

1003
00:35:46,720 --> 00:35:48,320
with their shared group key

1004
00:35:48,320 --> 00:35:50,000
and the server will allow the user to

1005
00:35:50,000 --> 00:35:51,440
modify the group membership

1006
00:35:51,440 --> 00:35:53,760
depending upon their role so that's the

1007
00:35:53,760 --> 00:35:55,280
high level summary

1008
00:35:55,280 --> 00:35:56,960
some security caveats which we believe

1009
00:35:56,960 --> 00:35:58,480
can be improved over time are that we

1010
00:35:58,480 --> 00:36:00,000
rely on the server to enforce access

1011
00:36:00,000 --> 00:36:01,599
control meaning the server has the power

1012
00:36:01,599 --> 00:36:03,920
to delete or reinstate deleted entries

1013
00:36:03,920 --> 00:36:05,520
additionally we don't rotate the shared

1014
00:36:05,520 --> 00:36:06,880
group key meaning that users who are

1015
00:36:06,880 --> 00:36:08,320
deleted from a group could collude with

1016
00:36:08,320 --> 00:36:08,960
the server

1017
00:36:08,960 --> 00:36:11,680
to decrypt or add entries finally we

1018
00:36:11,680 --> 00:36:13,040
don't do much currently to prevent

1019
00:36:13,040 --> 00:36:14,960
traffic analysis that might be able to

1020
00:36:14,960 --> 00:36:16,240
infer group membership

1021
00:36:16,240 --> 00:36:18,320
or user identities due to ip addresses

1022
00:36:18,320 --> 00:36:19,359
or timing

1023
00:36:19,359 --> 00:36:20,880
the main security goals that we do

1024
00:36:20,880 --> 00:36:22,960
achieve are that the server is not able

1025
00:36:22,960 --> 00:36:25,440
by itself to read or forge any of the

1026
00:36:25,440 --> 00:36:27,680
encrypted membership data it is storing

1027
00:36:27,680 --> 00:36:29,520
and despite this the server is capable

1028
00:36:29,520 --> 00:36:32,160
of enforcing access control rules

1029
00:36:32,160 --> 00:36:33,920
so before i hand things off to greg i'll

1030
00:36:33,920 --> 00:36:35,280
wrap up by just mentioning a few of the

1031
00:36:35,280 --> 00:36:36,800
new features we've been able to build on

1032
00:36:36,800 --> 00:36:38,640
top of this system

1033
00:36:38,640 --> 00:36:40,079
we've added a notion of administrators

1034
00:36:40,079 --> 00:36:41,520
who can remove users change group

1035
00:36:41,520 --> 00:36:42,960
settings etc

1036
00:36:42,960 --> 00:36:44,960
we've added a notion of group links that

1037
00:36:44,960 --> 00:36:46,320
users can

1038
00:36:46,320 --> 00:36:48,000
share a url with other users and allow

1039
00:36:48,000 --> 00:36:49,520
those other users to easily add

1040
00:36:49,520 --> 00:36:51,200
themselves into a group

1041
00:36:51,200 --> 00:36:52,880
and we've added a group video calling

1042
00:36:52,880 --> 00:36:55,040
features so you can easily

1043
00:36:55,040 --> 00:36:58,000
start a video call in a group and the

1044
00:36:58,000 --> 00:36:59,520
group members will use this anonymized

1045
00:36:59,520 --> 00:37:00,320
authentication

1046
00:37:00,320 --> 00:37:02,880
system to register with a server for

1047
00:37:02,880 --> 00:37:04,480
sending and receiving media streams

1048
00:37:04,480 --> 00:37:06,400
so with that i will turn it over to greg

1049
00:37:06,400 --> 00:37:08,160
and his hopefully more stable connection

1050
00:37:08,160 --> 00:37:11,040
to get into some of the crypto okay

1051
00:37:11,040 --> 00:37:12,560
thanks trevor

1052
00:37:12,560 --> 00:37:14,720
um so the components we need are an

1053
00:37:14,720 --> 00:37:16,000
encryption scheme

1054
00:37:16,000 --> 00:37:17,599
and an anonymous credential scheme

1055
00:37:17,599 --> 00:37:20,000
compatible with zero knowledge groups

1056
00:37:20,000 --> 00:37:21,119
there are some primitives in the

1057
00:37:21,119 --> 00:37:23,359
literature we could use uh built with

1058
00:37:23,359 --> 00:37:24,480
pairings or

1059
00:37:24,480 --> 00:37:26,720
rsa and paella groups but they're much

1060
00:37:26,720 --> 00:37:29,200
slower and have larger ciphertexts than

1061
00:37:29,200 --> 00:37:32,400
our new design for encryption

1062
00:37:32,400 --> 00:37:34,400
we want a symmetric key deterministic

1063
00:37:34,400 --> 00:37:36,079
authenticated encryption that is

1064
00:37:36,079 --> 00:37:38,160
compatible with zero knowledge proofs

1065
00:37:38,160 --> 00:37:39,920
so we want it to be symmetric key

1066
00:37:39,920 --> 00:37:41,200
because entries are encrypted and

1067
00:37:41,200 --> 00:37:43,119
decrypted by group members who all share

1068
00:37:43,119 --> 00:37:44,800
the same key

1069
00:37:44,800 --> 00:37:46,400
we want it to be authenticated so that

1070
00:37:46,400 --> 00:37:48,880
the server can't forge entries

1071
00:37:48,880 --> 00:37:50,560
and we want it to be deterministic so

1072
00:37:50,560 --> 00:37:52,400
that the server can enforce the groups

1073
00:37:52,400 --> 00:37:53,359
don't contain

1074
00:37:53,359 --> 00:37:56,480
duplicate entries but also because

1075
00:37:56,480 --> 00:37:58,400
users can't download ciphertext in a

1076
00:37:58,400 --> 00:38:01,599
group until after they've authenticated

1077
00:38:01,599 --> 00:38:03,599
but at the same time they first have to

1078
00:38:03,599 --> 00:38:05,839
authenticate

1079
00:38:06,560 --> 00:38:08,480
by proving that the group has a

1080
00:38:08,480 --> 00:38:11,280
ciphertext encrypting their uid

1081
00:38:11,280 --> 00:38:13,520
so with deterministic encryption the

1082
00:38:13,520 --> 00:38:15,200
user can just compute their ciphertext

1083
00:38:15,200 --> 00:38:16,400
locally

1084
00:38:16,400 --> 00:38:18,079
and avoid this kind of chicken and egg

1085
00:38:18,079 --> 00:38:19,920
situation

1086
00:38:19,920 --> 00:38:21,920
for zero knowledge proofs we use the

1087
00:38:21,920 --> 00:38:24,320
generalized snoreproofs which are simple

1088
00:38:24,320 --> 00:38:26,480
non-interactive and we can efficiently

1089
00:38:26,480 --> 00:38:28,880
prove knowledge of discrete logs

1090
00:38:28,880 --> 00:38:30,480
and finally we design a new keyed

1091
00:38:30,480 --> 00:38:32,800
verification anonymous credential system

1092
00:38:32,800 --> 00:38:35,119
based on a new algebraic mac that works

1093
00:38:35,119 --> 00:38:38,320
in the same group as encryption

1094
00:38:38,320 --> 00:38:39,920
so i'll explain our encryption scheme in

1095
00:38:39,920 --> 00:38:42,000
terms of rogway and shrimpton's siv

1096
00:38:42,000 --> 00:38:43,359
construction

1097
00:38:43,359 --> 00:38:45,359
first the prf is calculated on the

1098
00:38:45,359 --> 00:38:47,599
message then the output of the prf

1099
00:38:47,599 --> 00:38:49,440
is used as a nonce with a non-spaced

1100
00:38:49,440 --> 00:38:50,960
encryption scheme

1101
00:38:50,960 --> 00:38:52,400
during decryption the decrypter

1102
00:38:52,400 --> 00:38:56,240
recomputes the prf and checks the nonce

1103
00:38:56,240 --> 00:38:58,560
for the prf we use the fact that if we

1104
00:38:58,560 --> 00:39:00,079
hash to the elliptic curve group using a

1105
00:39:00,079 --> 00:39:01,119
random oracle

1106
00:39:01,119 --> 00:39:03,359
and exponentiate to a secret power this

1107
00:39:03,359 --> 00:39:04,400
gives a pr

1108
00:39:04,400 --> 00:39:06,800
a prf in the random oracle model under

1109
00:39:06,800 --> 00:39:09,200
the ddh assumption

1110
00:39:09,200 --> 00:39:10,880
here our encryption scheme encodes the

1111
00:39:10,880 --> 00:39:13,520
uid as an elliptic curve group element

1112
00:39:13,520 --> 00:39:16,640
and then encrypts using algamol

1113
00:39:16,640 --> 00:39:18,880
decryption as i mentioned before first

1114
00:39:18,880 --> 00:39:20,640
decrypts the ciphertext

1115
00:39:20,640 --> 00:39:23,200
then recomputes and verifies the nouns

1116
00:39:23,200 --> 00:39:24,640
the nice thing is that decryption is

1117
00:39:24,640 --> 00:39:25,599
very efficient

1118
00:39:25,599 --> 00:39:27,599
ciphertexts are just two elliptic curve

1119
00:39:27,599 --> 00:39:28,720
points

1120
00:39:28,720 --> 00:39:30,640
and because encryption uses only

1121
00:39:30,640 --> 00:39:32,000
exponentiation

1122
00:39:32,000 --> 00:39:33,680
it's easy to prove statements about

1123
00:39:33,680 --> 00:39:37,919
ciphertexts using schnorr type proofs

1124
00:39:38,240 --> 00:39:39,839
now what we need is a credential scheme

1125
00:39:39,839 --> 00:39:41,440
where alice can get a credential for her

1126
00:39:41,440 --> 00:39:42,400
uid

1127
00:39:42,400 --> 00:39:43,760
and later prove that she has a

1128
00:39:43,760 --> 00:39:45,440
credential for the uid in a given

1129
00:39:45,440 --> 00:39:47,040
ciphertext

1130
00:39:47,040 --> 00:39:48,800
we take advantage of the fact that we're

1131
00:39:48,800 --> 00:39:50,560
in the keyed verification setting

1132
00:39:50,560 --> 00:39:52,480
where the same party is both issuing

1133
00:39:52,480 --> 00:39:55,040
credentials and verifying the proofs

1134
00:39:55,040 --> 00:39:56,800
so we can use a mac instead of a public

1135
00:39:56,800 --> 00:39:59,119
key signature

1136
00:39:59,119 --> 00:40:00,560
macs are generally simpler than

1137
00:40:00,560 --> 00:40:02,640
signatures so this will help us with

1138
00:40:02,640 --> 00:40:04,720
efficiency

1139
00:40:04,720 --> 00:40:06,319
so in this setting the server has the

1140
00:40:06,319 --> 00:40:08,079
mac secret key for issuance and

1141
00:40:08,079 --> 00:40:09,280
verification

1142
00:40:09,280 --> 00:40:11,599
the user is issued a mac on her uid as a

1143
00:40:11,599 --> 00:40:12,640
credential

1144
00:40:12,640 --> 00:40:14,000
and then she can later prove that she

1145
00:40:14,000 --> 00:40:17,520
has a valid mac on her encrypted uid

1146
00:40:17,520 --> 00:40:21,119
since our encryption scheme supports

1147
00:40:21,520 --> 00:40:23,680
our scheme encrypts group elements we'll

1148
00:40:23,680 --> 00:40:25,280
need a max scheme that authenticates

1149
00:40:25,280 --> 00:40:26,480
group elements too

1150
00:40:26,480 --> 00:40:30,000
and has an efficient proof system

1151
00:40:30,480 --> 00:40:32,079
so as i mentioned before this has to be

1152
00:40:32,079 --> 00:40:34,319
algebraic in that verification is a

1153
00:40:34,319 --> 00:40:36,640
series of group operations

1154
00:40:36,640 --> 00:40:39,520
cmz 14 introduces this approach and gave

1155
00:40:39,520 --> 00:40:41,280
an efficient algebraic mac which can be

1156
00:40:41,280 --> 00:40:43,119
instantiated in prime order electric

1157
00:40:43,119 --> 00:40:44,720
curve groups

1158
00:40:44,720 --> 00:40:46,720
but it works for authenticating integers

1159
00:40:46,720 --> 00:40:48,319
and we need a mac for group element

1160
00:40:48,319 --> 00:40:50,000
messages

1161
00:40:50,000 --> 00:40:51,680
so we design a new mac for

1162
00:40:51,680 --> 00:40:53,119
authenticating group elements

1163
00:40:53,119 --> 00:40:55,040
which uses the same group we use for

1164
00:40:55,040 --> 00:40:56,960
encryption and is secure in the generic

1165
00:40:56,960 --> 00:40:58,480
group model

1166
00:40:58,480 --> 00:41:00,240
i don't have time to discuss this much

1167
00:41:00,240 --> 00:41:01,760
but i just want to briefly note that

1168
00:41:01,760 --> 00:41:02,960
verification here

1169
00:41:02,960 --> 00:41:05,119
involves just group operations so this

1170
00:41:05,119 --> 00:41:06,880
is algebraic and compatible with our

1171
00:41:06,880 --> 00:41:09,200
proof system

1172
00:41:09,200 --> 00:41:10,640
and before wrapping up i just want to

1173
00:41:10,640 --> 00:41:12,160
give an idea of the performance of the

1174
00:41:12,160 --> 00:41:13,359
system

1175
00:41:13,359 --> 00:41:15,119
so the amount of bandwidth required to

1176
00:41:15,119 --> 00:41:16,640
authenticate to a group

1177
00:41:16,640 --> 00:41:19,920
is just under 500 bytes and on a typical

1178
00:41:19,920 --> 00:41:22,000
laptop the time to create a presentation

1179
00:41:22,000 --> 00:41:24,079
proof is a couple milliseconds

1180
00:41:24,079 --> 00:41:25,280
and there are of course more complete

1181
00:41:25,280 --> 00:41:28,480
benchmarks in our paper

1182
00:41:28,560 --> 00:41:30,480
so that's all i'll have time for today

1183
00:41:30,480 --> 00:41:31,839
to summarize we prevent

1184
00:41:31,839 --> 00:41:33,680
we presented a private group management

1185
00:41:33,680 --> 00:41:35,760
system which allows for centralized

1186
00:41:35,760 --> 00:41:37,760
group management without revealing

1187
00:41:37,760 --> 00:41:39,119
the group members to the service

1188
00:41:39,119 --> 00:41:41,680
provider on the way we developed a new

1189
00:41:41,680 --> 00:41:43,440
efficient combination of encryptions

1190
00:41:43,440 --> 00:41:44,319
your knowledge

1191
00:41:44,319 --> 00:41:46,960
and anonymous credentials and since this

1192
00:41:46,960 --> 00:41:48,880
system went live in october

1193
00:41:48,880 --> 00:41:51,839
many of us are using it every day so for

1194
00:41:51,839 --> 00:41:53,280
more information please take a look at

1195
00:41:53,280 --> 00:41:55,280
the full version of our ccs paper

1196
00:41:55,280 --> 00:41:58,480
the explanatory blog posts or the source

1197
00:41:58,480 --> 00:41:59,119
code

1198
00:41:59,119 --> 00:42:01,040
thanks and we can take questions if

1199
00:42:01,040 --> 00:42:03,680
there's time

1200
00:42:03,680 --> 00:42:04,960
thanks for the interesting talk are

1201
00:42:04,960 --> 00:42:06,960
there a number of questions um in the

1202
00:42:06,960 --> 00:42:08,079
chat i'll just

1203
00:42:08,079 --> 00:42:10,400
take one or two given the little amount

1204
00:42:10,400 --> 00:42:11,920
of time so one question is

1205
00:42:11,920 --> 00:42:13,599
if someone is now added to the group

1206
00:42:13,599 --> 00:42:15,520
it's by kevin mccully um

1207
00:42:15,520 --> 00:42:17,760
do they even have to consent in order to

1208
00:42:17,760 --> 00:42:18,720
join or

1209
00:42:18,720 --> 00:42:20,480
even further are they notified i mean

1210
00:42:20,480 --> 00:42:21,760
given that the server doesn't know who

1211
00:42:21,760 --> 00:42:22,560
is in the group

1212
00:42:22,560 --> 00:42:25,040
can malicious ellis just try to get a

1213
00:42:25,040 --> 00:42:26,160
lot of her kind of

1214
00:42:26,160 --> 00:42:28,240
friends or former friends to claim that

1215
00:42:28,240 --> 00:42:29,440
they're in the group without them even

1216
00:42:29,440 --> 00:42:30,000
consenting

1217
00:42:30,000 --> 00:42:31,280
or wanting to be there or even being

1218
00:42:31,280 --> 00:42:33,839
aware of it yeah that's a good question

1219
00:42:33,839 --> 00:42:34,240
so

1220
00:42:34,240 --> 00:42:35,440
users are notified that they're in a

1221
00:42:35,440 --> 00:42:37,440
group by receiving a message sent by the

1222
00:42:37,440 --> 00:42:39,119
person who added them

1223
00:42:39,119 --> 00:42:40,960
um there is an additional component to

1224
00:42:40,960 --> 00:42:42,480
the system that did not make it into our

1225
00:42:42,480 --> 00:42:42,960
slide

1226
00:42:42,960 --> 00:42:44,319
where to add someone into a group you

1227
00:42:44,319 --> 00:42:46,720
have to have knowledge of

1228
00:42:46,720 --> 00:42:48,160
their profile key which means they have

1229
00:42:48,160 --> 00:42:50,640
to have consented to having communicated

1230
00:42:50,640 --> 00:42:51,760
with you at some point in time in the

1231
00:42:51,760 --> 00:42:52,640
past

1232
00:42:52,640 --> 00:42:54,960
and so that acts as a control which

1233
00:42:54,960 --> 00:42:55,680
would prevent

1234
00:42:55,680 --> 00:42:57,680
people from someone who has not

1235
00:42:57,680 --> 00:42:59,200
interacted with you from adding you into

1236
00:42:59,200 --> 00:43:00,720
a large number of groups

1237
00:43:00,720 --> 00:43:02,800
um so there is some degree of control on

1238
00:43:02,800 --> 00:43:04,160
that you know you have to have some

1239
00:43:04,160 --> 00:43:05,359
prior communication with someone and

1240
00:43:05,359 --> 00:43:06,560
consent it to that

1241
00:43:06,560 --> 00:43:08,560
before they can add you to a group

1242
00:43:08,560 --> 00:43:10,000
otherwise they can invite you to a group

1243
00:43:10,000 --> 00:43:11,040
and then you can

1244
00:43:11,040 --> 00:43:13,760
later on um accept that invitation and

1245
00:43:13,760 --> 00:43:14,480
then

1246
00:43:14,480 --> 00:43:15,920
add your own profile key into the group

1247
00:43:15,920 --> 00:43:17,920
so that le so there's a quite a bit more

1248
00:43:17,920 --> 00:43:19,200
complexity to this that is

1249
00:43:19,200 --> 00:43:23,040
present in in the paper okay thanks

1250
00:43:23,040 --> 00:43:24,800
one final question maybe a short answer

1251
00:43:24,800 --> 00:43:26,560
um by tyler

1252
00:43:26,560 --> 00:43:28,240
how does this relate or compare to what

1253
00:43:28,240 --> 00:43:30,560
happens in mls

1254
00:43:30,560 --> 00:43:32,000
um so this is really pretty independent

1255
00:43:32,000 --> 00:43:34,160
from how you send messages uh so i

1256
00:43:34,160 --> 00:43:35,119
imagine you know

1257
00:43:35,119 --> 00:43:37,200
uh you combine this with various ways of

1258
00:43:37,200 --> 00:43:38,640
sending messages in a group single

1259
00:43:38,640 --> 00:43:39,680
currently like i said there's something

1260
00:43:39,680 --> 00:43:40,960
very simplistic

1261
00:43:40,960 --> 00:43:41,839
certainly there's room for more

1262
00:43:41,839 --> 00:43:44,000
scalability uh whether tree based group

1263
00:43:44,000 --> 00:43:45,440
key governments are

1264
00:43:45,440 --> 00:43:47,760
a good direction for that uh is it a

1265
00:43:47,760 --> 00:43:48,880
good open question something i'm

1266
00:43:48,880 --> 00:43:50,240
skeptical about but a lot of people are

1267
00:43:50,240 --> 00:43:51,520
enthusiastic about

1268
00:43:51,520 --> 00:43:52,640
but i think that's it's somewhat

1269
00:43:52,640 --> 00:43:54,400
orthogonal since you know however you

1270
00:43:54,400 --> 00:43:55,680
send messages it's still good

1271
00:43:55,680 --> 00:43:56,960
you're still going to need to have a way

1272
00:43:56,960 --> 00:43:59,839
to know who's in the group

1273
00:43:59,839 --> 00:44:01,440
okay thanks a lot and i said there are

1274
00:44:01,440 --> 00:44:03,119
more questions for you in the chat um if

1275
00:44:03,119 --> 00:44:03,839
you could

1276
00:44:03,839 --> 00:44:05,839
look there and yeah with that i would

1277
00:44:05,839 --> 00:44:07,040
like to wrap up the session

1278
00:44:07,040 --> 00:44:08,560
and thank all the speakers again for

1279
00:44:08,560 --> 00:44:10,240
their great talks

1280
00:44:10,240 --> 00:44:13,599
and also hand over now to to kenny who

1281
00:44:13,599 --> 00:44:14,160
will give

1282
00:44:14,160 --> 00:44:23,839
the closing remarks for this conference

1283
00:44:26,400 --> 00:44:28,880
yes thank you very much um for sharing

1284
00:44:28,880 --> 00:44:30,800
that session anya remarks to

1285
00:44:30,800 --> 00:44:32,960
uh

1286
00:44:33,150 --> 00:44:34,960
[Music]

1287
00:44:34,960 --> 00:44:36,880
so i think this week we've all been part

1288
00:44:36,880 --> 00:44:38,240
of something of a huge

1289
00:44:38,240 --> 00:44:41,200
social experiment maybe it's a little

1290
00:44:41,200 --> 00:44:43,359
bit too soon to declare it as a success

1291
00:44:43,359 --> 00:44:45,040
um but what we've seen here as the

1292
00:44:45,040 --> 00:44:47,119
organizers is very strong engagement

1293
00:44:47,119 --> 00:44:50,240
on on zoom and also in the in zoop

1294
00:44:50,240 --> 00:44:53,119
and in the social app i think possibly

1295
00:44:53,119 --> 00:44:53,440
uh

1296
00:44:53,440 --> 00:44:55,359
much more so than normal iacr

1297
00:44:55,359 --> 00:44:56,720
conferences that have been held

1298
00:44:56,720 --> 00:44:58,480
virtually up until this point

1299
00:44:58,480 --> 00:45:00,800
and that's really a testament to the

1300
00:45:00,800 --> 00:45:02,240
engaging nature of the talks that we've

1301
00:45:02,240 --> 00:45:03,920
had both invited and contributed and

1302
00:45:03,920 --> 00:45:04,800
also

1303
00:45:04,800 --> 00:45:07,200
um you as a community joining us and

1304
00:45:07,200 --> 00:45:08,720
really getting involved and making a

1305
00:45:08,720 --> 00:45:10,880
very interactive activity so thank you

1306
00:45:10,880 --> 00:45:12,000
all

1307
00:45:12,000 --> 00:45:15,760
um i have to uh say thanks to our many

1308
00:45:15,760 --> 00:45:17,520
many sponsors you can find them on our

1309
00:45:17,520 --> 00:45:18,160
website

1310
00:45:18,160 --> 00:45:21,359
um they have not their money this year

1311
00:45:21,359 --> 00:45:22,800
hasn't been particularly spent because

1312
00:45:22,800 --> 00:45:24,240
we've been able to

1313
00:45:24,240 --> 00:45:26,079
run this on a bit of a shoestring thanks

1314
00:45:26,079 --> 00:45:28,160
to a lot of volunteer effort

1315
00:45:28,160 --> 00:45:29,680
but their money will be put to very very

1316
00:45:29,680 --> 00:45:32,560
good use in in future years

1317
00:45:32,560 --> 00:45:35,359
i'd like to thank very particularly k

1318
00:45:35,359 --> 00:45:38,079
mckelly and kevin mccurley

1319
00:45:38,079 --> 00:45:40,560
a daughter and father team who have

1320
00:45:40,560 --> 00:45:42,319
given us the rwc

1321
00:45:42,319 --> 00:45:43,520
steering committee and organizing

1322
00:45:43,520 --> 00:45:45,520
committee fantastic support over the

1323
00:45:45,520 --> 00:45:46,000
last few

1324
00:45:46,000 --> 00:45:48,400
weeks um despite some rather chaotic

1325
00:45:48,400 --> 00:45:50,319
behavior on our side

1326
00:45:50,319 --> 00:45:52,240
they always rose to the occasion and

1327
00:45:52,240 --> 00:45:53,599
took on board our feedback and

1328
00:45:53,599 --> 00:45:55,119
implemented many features at short

1329
00:45:55,119 --> 00:45:56,720
notice for particularly for the social

1330
00:45:56,720 --> 00:45:57,520
app

1331
00:45:57,520 --> 00:45:59,839
um i think i'd like to ask everyone to

1332
00:45:59,839 --> 00:46:01,280
join me in giving them a virtual round

1333
00:46:01,280 --> 00:46:03,520
of applause by clicking on the

1334
00:46:03,520 --> 00:46:06,480
uh the relevant reaction the the the

1335
00:46:06,480 --> 00:46:07,839
clapping reaction or you can turn on

1336
00:46:07,839 --> 00:46:09,839
your video and do it

1337
00:46:09,839 --> 00:46:13,200
they've been absolutely fantastic

1338
00:46:16,800 --> 00:46:18,319
i hope this has not put you up

1339
00:46:18,319 --> 00:46:20,319
organizing icr virtual conferences for

1340
00:46:20,319 --> 00:46:20,720
life

1341
00:46:20,720 --> 00:46:22,880
um i also hope you don't have to do this

1342
00:46:22,880 --> 00:46:24,160
for too much longer i hope that we'll

1343
00:46:24,160 --> 00:46:26,079
get back to some kind of normality

1344
00:46:26,079 --> 00:46:27,760
um i'd like to thank tom shrimpton it's

1345
00:46:27,760 --> 00:46:29,200
tom there tom

1346
00:46:29,200 --> 00:46:31,280
uh was the program chair this year and

1347
00:46:31,280 --> 00:46:32,400
had the

1348
00:46:32,400 --> 00:46:35,040
uh tough job along with his committee of

1349
00:46:35,040 --> 00:46:36,319
selecting which talks should be

1350
00:46:36,319 --> 00:46:36,880
presented

1351
00:46:36,880 --> 00:46:38,720
um the number of submissions has grown

1352
00:46:38,720 --> 00:46:40,560
has become more competitive

1353
00:46:40,560 --> 00:46:41,920
more and more people have figured out

1354
00:46:41,920 --> 00:46:44,800
the key to what makes a good rwbc talk

1355
00:46:44,800 --> 00:46:47,760
and so i think the task of selecting and

1356
00:46:47,760 --> 00:46:48,079
uh

1357
00:46:48,079 --> 00:46:50,319
invited contributed talks has got harder

1358
00:46:50,319 --> 00:46:52,240
and harder over the years

1359
00:46:52,240 --> 00:46:54,240
thank you to all of our speakers invited

1360
00:46:54,240 --> 00:46:56,079
and contributed i think we had six

1361
00:46:56,079 --> 00:46:57,520
invited talks this year and something

1362
00:46:57,520 --> 00:46:59,119
like 36

1363
00:46:59,119 --> 00:47:00,800
contributed talks so more talks than

1364
00:47:00,800 --> 00:47:02,560
ever unfortunately therefore a little

1365
00:47:02,560 --> 00:47:03,440
bit shorter

1366
00:47:03,440 --> 00:47:05,040
but that's just more opportunity to ask

1367
00:47:05,040 --> 00:47:07,040
questions on zulu right and get stuck in

1368
00:47:07,040 --> 00:47:08,160
there

1369
00:47:08,160 --> 00:47:11,200
um so and as i said already thank you

1370
00:47:11,200 --> 00:47:12,960
all to you for being part of our big

1371
00:47:12,960 --> 00:47:14,000
social experiment

1372
00:47:14,000 --> 00:47:16,720
and perhaps we should have done some uh

1373
00:47:16,720 --> 00:47:18,240
signed got you all to sign off on some

1374
00:47:18,240 --> 00:47:19,599
forms first before we started the

1375
00:47:19,599 --> 00:47:21,119
experiment but there we are

1376
00:47:21,119 --> 00:47:23,119
um we really want to know what you

1377
00:47:23,119 --> 00:47:24,800
thought of the event particularly in its

1378
00:47:24,800 --> 00:47:26,960
virtual format we will be sending out

1379
00:47:26,960 --> 00:47:29,359
a survey questionnaire or an email to

1380
00:47:29,359 --> 00:47:30,880
link to a survey questionnaire

1381
00:47:30,880 --> 00:47:33,280
in the next couple of days and we really

1382
00:47:33,280 --> 00:47:34,880
do take your feedback seriously

1383
00:47:34,880 --> 00:47:36,640
we act on it we use it to improve the

1384
00:47:36,640 --> 00:47:38,160
conference every single year

1385
00:47:38,160 --> 00:47:40,160
so please do complete that getting a

1386
00:47:40,160 --> 00:47:42,559
high return rate is important to us

1387
00:47:42,559 --> 00:47:45,280
so this is not quite the end of today so

1388
00:47:45,280 --> 00:47:47,119
we have the social app running and i

1389
00:47:47,119 --> 00:47:49,280
think you can now go into

1390
00:47:49,280 --> 00:47:51,520
meetings this evening i think we have

1391
00:47:51,520 --> 00:47:53,920
nigel smart uh is available as a host

1392
00:47:53,920 --> 00:47:56,319
and uh one other person whose name

1393
00:47:56,319 --> 00:47:57,760
escapes me right now maybe somebody can

1394
00:47:57,760 --> 00:47:58,400
remind me

1395
00:47:58,400 --> 00:48:01,040
matthew green ah matthew green great so

1396
00:48:01,040 --> 00:48:02,800
you can get to meet matthew green's dogs

1397
00:48:02,800 --> 00:48:05,119
and maybe smoke a cigar with matthew

1398
00:48:05,119 --> 00:48:07,119
that should be a lot of fun and uh and

1399
00:48:07,119 --> 00:48:08,880
join nigel in in london where maybe

1400
00:48:08,880 --> 00:48:10,240
he'll be drinking a nice beer

1401
00:48:10,240 --> 00:48:12,480
or a glass of wine um so we'll move over

1402
00:48:12,480 --> 00:48:13,839
to the social app now

1403
00:48:13,839 --> 00:48:15,520
uh that's just about everything i wanted

1404
00:48:15,520 --> 00:48:17,040
to say um

1405
00:48:17,040 --> 00:48:18,960
but i hope that we will meet each other

1406
00:48:18,960 --> 00:48:20,720
in person at rwc

1407
00:48:20,720 --> 00:48:23,920
2022 in amsterdam in person

1408
00:48:23,920 --> 00:48:26,640
and it would be fantastic to continue um

1409
00:48:26,640 --> 00:48:27,920
this community that we've been building

1410
00:48:27,920 --> 00:48:29,440
over the last few years

1411
00:48:29,440 --> 00:48:31,119
and actually get together and discuss

1412
00:48:31,119 --> 00:48:33,040
real world crypto thank you everybody

1413
00:48:33,040 --> 00:48:35,839
see you soon

