1
00:00:03,120 --> 00:00:04,000
all right

2
00:00:04,000 --> 00:00:06,960
we are live so hi everyone my name is

3
00:00:06,960 --> 00:00:08,880
martin i'm the chair of this session and

4
00:00:08,880 --> 00:00:09,519
the next

5
00:00:09,519 --> 00:00:12,960
um and the uh first so the next session

6
00:00:12,960 --> 00:00:14,880
is an invited talk uh to be given by

7
00:00:14,880 --> 00:00:16,720
dustin moody from nist and he's going to

8
00:00:16,720 --> 00:00:17,920
give us an update

9
00:00:17,920 --> 00:00:20,960
on the post quantum process

10
00:00:20,960 --> 00:00:25,279
um by uh nist thank you dustin

11
00:00:25,279 --> 00:00:29,599
thank you martin let me uh

12
00:00:29,599 --> 00:00:31,199
share the slides hopefully that's

13
00:00:31,199 --> 00:00:33,040
working and everybody can see that

14
00:00:33,040 --> 00:00:35,440
so on behalf of nist and the post

15
00:00:35,440 --> 00:00:36,079
quantum team

16
00:00:36,079 --> 00:00:38,160
like to thank real world crypto for

17
00:00:38,160 --> 00:00:40,320
inviting us to give an update on our

18
00:00:40,320 --> 00:00:44,160
competition um i'll rewind back two

19
00:00:44,160 --> 00:00:44,960
years ago

20
00:00:44,960 --> 00:00:47,840
uh real world crypto similarly invited

21
00:00:47,840 --> 00:00:48,239
us

22
00:00:48,239 --> 00:00:51,039
it was at the end of our first round and

23
00:00:51,039 --> 00:00:52,640
we were going to announce the candidates

24
00:00:52,640 --> 00:00:54,239
for the second round of our nist

25
00:00:54,239 --> 00:00:57,440
um post quantum competition

26
00:00:57,440 --> 00:00:59,120
and we were invited to come do that at

27
00:00:59,120 --> 00:01:00,960
real world crypto

28
00:01:00,960 --> 00:01:02,480
uh you may or may not remember but

29
00:01:02,480 --> 00:01:04,640
shortly before that happened uh the u.s

30
00:01:04,640 --> 00:01:06,640
government went into a shutdown

31
00:01:06,640 --> 00:01:08,560
so being a government employee we were

32
00:01:08,560 --> 00:01:10,240
not allowed to come

33
00:01:10,240 --> 00:01:13,119
and give that presentation so i'm glad

34
00:01:13,119 --> 00:01:15,040
here two years later i'm i'm able to

35
00:01:15,040 --> 00:01:16,320
participate even though there's a

36
00:01:16,320 --> 00:01:17,680
pandemic and it's virtual

37
00:01:17,680 --> 00:01:20,880
it's uh good to be here

38
00:01:20,880 --> 00:01:22,720
so of course everyone is probably aware

39
00:01:22,720 --> 00:01:25,200
of the the threat that quantum computers

40
00:01:25,200 --> 00:01:28,400
pose it nist we're most worried about it

41
00:01:28,400 --> 00:01:30,560
in regards to our our three public key

42
00:01:30,560 --> 00:01:32,479
crypto standards that we have

43
00:01:32,479 --> 00:01:33,920
we have two of them that deal with

44
00:01:33,920 --> 00:01:35,520
public key encryption

45
00:01:35,520 --> 00:01:38,079
or key establishment those are sp 800

46
00:01:38,079 --> 00:01:40,320
56a and 56b

47
00:01:40,320 --> 00:01:42,479
and then we also have a public key

48
00:01:42,479 --> 00:01:44,079
digital signature standard

49
00:01:44,079 --> 00:01:47,119
in fips 186. and these would be the ones

50
00:01:47,119 --> 00:01:47,920
that would be most

51
00:01:47,920 --> 00:01:49,840
vulnerable to attacks from a quantum

52
00:01:49,840 --> 00:01:51,759
computer namely schwarz

53
00:01:51,759 --> 00:01:54,240
algorithm which would break all the

54
00:01:54,240 --> 00:01:55,920
algorithms that we use today

55
00:01:55,920 --> 00:01:59,439
for public key name the rsa dsa ecdsa

56
00:01:59,439 --> 00:02:00,560
diffie-hellman olympic curve

57
00:02:00,560 --> 00:02:01,360
diffie-hellman

58
00:02:01,360 --> 00:02:03,840
and so forth and so we need to

59
00:02:03,840 --> 00:02:05,280
completely replace

60
00:02:05,280 --> 00:02:07,840
the algorithms in these standards we

61
00:02:07,840 --> 00:02:09,360
have many other crypto standards and

62
00:02:09,360 --> 00:02:10,878
there would be impacts from a quantum

63
00:02:10,878 --> 00:02:12,480
computer but the impact is

64
00:02:12,480 --> 00:02:14,720
less dramatic we would be able to use

65
00:02:14,720 --> 00:02:16,800
longer keys use longer hash function

66
00:02:16,800 --> 00:02:17,920
output

67
00:02:17,920 --> 00:02:19,840
etc which is easier to manage than

68
00:02:19,840 --> 00:02:21,280
having to select a

69
00:02:21,280 --> 00:02:24,319
a whole new algorithm

70
00:02:24,319 --> 00:02:26,959
so that's what this project is this post

71
00:02:26,959 --> 00:02:29,200
quantum cryptography project

72
00:02:29,200 --> 00:02:31,120
we want to ensure that the crypto we are

73
00:02:31,120 --> 00:02:32,720
using today will be

74
00:02:32,720 --> 00:02:35,040
secure from both classical computing

75
00:02:35,040 --> 00:02:36,720
technology as well as future quantum

76
00:02:36,720 --> 00:02:38,319
computers

77
00:02:38,319 --> 00:02:39,760
and even though we don't yet have a

78
00:02:39,760 --> 00:02:41,920
large scale working quantum computer

79
00:02:41,920 --> 00:02:44,400
uh we know that we need to begin working

80
00:02:44,400 --> 00:02:47,040
on this problem well in advance of that

81
00:02:47,040 --> 00:02:48,959
and that's best explained by uh this

82
00:02:48,959 --> 00:02:51,920
theorem from dr michele mosca that

83
00:02:51,920 --> 00:02:55,280
has been widely seen as well that helps

84
00:02:55,280 --> 00:02:55,599
us

85
00:02:55,599 --> 00:02:57,680
understand that even without a quantum

86
00:02:57,680 --> 00:02:59,120
computer here

87
00:02:59,120 --> 00:03:01,360
somebody could take your data which is

88
00:03:01,360 --> 00:03:03,519
encrypted and just hold on to it

89
00:03:03,519 --> 00:03:07,120
and wait until z years later when you

90
00:03:07,120 --> 00:03:09,040
when they a quantum computer comes out

91
00:03:09,040 --> 00:03:10,720
and then they'll be able to

92
00:03:10,720 --> 00:03:13,760
get access to your data well before the

93
00:03:13,760 --> 00:03:15,760
you know you want your information to be

94
00:03:15,760 --> 00:03:17,760
revealed

95
00:03:17,760 --> 00:03:20,560
and so it's displayed here in forms

96
00:03:20,560 --> 00:03:21,920
where you could put in numbers for

97
00:03:21,920 --> 00:03:25,120
x y and z for your organization

98
00:03:25,120 --> 00:03:27,040
and see you know do you have a problem

99
00:03:27,040 --> 00:03:28,159
now and

100
00:03:28,159 --> 00:03:29,760
if you want to protect your information

101
00:03:29,760 --> 00:03:31,840
for any length of time

102
00:03:31,840 --> 00:03:35,760
yeah we need to worry about this now

103
00:03:35,760 --> 00:03:38,640
now the big question is what is z how

104
00:03:38,640 --> 00:03:39,440
long until we

105
00:03:39,440 --> 00:03:43,040
have a quantum computer it's not exactly

106
00:03:43,040 --> 00:03:44,879
my field i'm not a physicist or in

107
00:03:44,879 --> 00:03:46,720
quantum mechanics or anything

108
00:03:46,720 --> 00:03:49,200
um so for that we have to turn to what

109
00:03:49,200 --> 00:03:51,840
the experts say

110
00:03:51,840 --> 00:03:54,239
and i'm copying here a chart from the

111
00:03:54,239 --> 00:03:56,080
publication of dr mosca and one of his

112
00:03:56,080 --> 00:03:56,959
co-authors

113
00:03:56,959 --> 00:04:00,000
peony from a little over a year ago

114
00:04:00,000 --> 00:04:03,840
they surveyed 22 experts in the field

115
00:04:03,840 --> 00:04:06,400
and asked them what what would be the

116
00:04:06,400 --> 00:04:07,200
their opinion

117
00:04:07,200 --> 00:04:09,439
of when we would have a quantum computer

118
00:04:09,439 --> 00:04:10,640
that's large enough

119
00:04:10,640 --> 00:04:13,519
that would threaten public key crypto

120
00:04:13,519 --> 00:04:15,040
and so if you look at this chart for a

121
00:04:15,040 --> 00:04:16,478
little bit the first row

122
00:04:16,478 --> 00:04:19,839
is they put odds on would we have one in

123
00:04:19,839 --> 00:04:20,639
five years

124
00:04:20,639 --> 00:04:23,120
and you can see that most of them

125
00:04:23,120 --> 00:04:24,000
thought it would be

126
00:04:24,000 --> 00:04:26,639
less than a one percent chance but as we

127
00:04:26,639 --> 00:04:28,960
go down a couple rows to 10 years 15

128
00:04:28,960 --> 00:04:30,240
years we see

129
00:04:30,240 --> 00:04:32,000
more of these experts believe that

130
00:04:32,000 --> 00:04:33,840
there's you know there's there's a

131
00:04:33,840 --> 00:04:35,040
there's a chance we could have a

132
00:04:35,040 --> 00:04:36,880
large-scale quantum computer

133
00:04:36,880 --> 00:04:39,919
that would be breaking cryptography of

134
00:04:39,919 --> 00:04:42,000
course nobody knows for sure this is all

135
00:04:42,000 --> 00:04:43,759
just speculation

136
00:04:43,759 --> 00:04:46,479
but it just goes to uh give you some

137
00:04:46,479 --> 00:04:48,800
estimates on a possible time frame of

138
00:04:48,800 --> 00:04:51,120
10 to 15 years is you know a rough time

139
00:04:51,120 --> 00:04:52,080
frame

140
00:04:52,080 --> 00:04:54,880
when this could could be something uh

141
00:04:54,880 --> 00:04:56,160
where we'd have a quantum computer

142
00:04:56,160 --> 00:04:58,960
around that time

143
00:04:59,759 --> 00:05:01,199
at nist we've been worried about this

144
00:05:01,199 --> 00:05:03,199
for quite some time well before

145
00:05:03,199 --> 00:05:07,919
2016 we held a workshop back in 2015 and

146
00:05:07,919 --> 00:05:11,440
had a survey paper we put put out back

147
00:05:11,440 --> 00:05:14,000
in i think 2010

148
00:05:14,000 --> 00:05:15,520
but in terms of our competition it

149
00:05:15,520 --> 00:05:18,080
really started five years ago in 2016.

150
00:05:18,080 --> 00:05:19,199
that's where we

151
00:05:19,199 --> 00:05:21,840
we first announced at uh pq crypto in

152
00:05:21,840 --> 00:05:23,840
japan that we would be doing this post

153
00:05:23,840 --> 00:05:24,800
quantum

154
00:05:24,800 --> 00:05:27,039
competition and we put out the

155
00:05:27,039 --> 00:05:29,120
requirements and the evaluation criteria

156
00:05:29,120 --> 00:05:31,520
we would be using

157
00:05:31,520 --> 00:05:34,560
since then we've had uh two rounds

158
00:05:34,560 --> 00:05:35,759
we received a large number of

159
00:05:35,759 --> 00:05:38,000
submissions and all in the

160
00:05:38,000 --> 00:05:39,919
slides coming up here i'll quickly

161
00:05:39,919 --> 00:05:41,919
summarize those first two rounds

162
00:05:41,919 --> 00:05:43,520
but right now where we are is we're in

163
00:05:43,520 --> 00:05:46,479
the the middle of the the third round

164
00:05:46,479 --> 00:05:48,560
where we have uh 15 algorithms that

165
00:05:48,560 --> 00:05:50,960
we're still considering

166
00:05:50,960 --> 00:05:52,639
um for each of the previous two rounds

167
00:05:52,639 --> 00:05:54,320
we've issued reports um

168
00:05:54,320 --> 00:05:56,479
the you can see them highlighted here if

169
00:05:56,479 --> 00:06:00,080
you just google mr 8240 or 8309

170
00:06:00,080 --> 00:06:02,240
you can see our report on each round and

171
00:06:02,240 --> 00:06:04,000
how we selected the algorithms to move

172
00:06:04,000 --> 00:06:04,400
on

173
00:06:04,400 --> 00:06:07,840
and and so forth

174
00:06:08,639 --> 00:06:10,880
so the evaluation criteria that we are

175
00:06:10,880 --> 00:06:12,400
using

176
00:06:12,400 --> 00:06:15,039
the the two main criteria are security

177
00:06:15,039 --> 00:06:16,319
and performance

178
00:06:16,319 --> 00:06:18,319
and again security we need to be secure

179
00:06:18,319 --> 00:06:19,840
against both classical and quantum

180
00:06:19,840 --> 00:06:20,880
attacks

181
00:06:20,880 --> 00:06:22,800
and for some algorithms setting your

182
00:06:22,800 --> 00:06:24,479
parameters to classical attacks are

183
00:06:24,479 --> 00:06:26,479
actually the ones that

184
00:06:26,479 --> 00:06:29,520
are most relevant we defined five

185
00:06:29,520 --> 00:06:32,160
security categories so that when

186
00:06:32,160 --> 00:06:34,000
submitters were creating their parameter

187
00:06:34,000 --> 00:06:36,880
sets and wanting to uh

188
00:06:36,880 --> 00:06:38,720
show how much security they offered that

189
00:06:38,720 --> 00:06:40,639
they would have a uniform framework to

190
00:06:40,639 --> 00:06:42,000
compare them against each other and we

191
00:06:42,000 --> 00:06:42,479
would

192
00:06:42,479 --> 00:06:45,840
have that as well level one means you're

193
00:06:45,840 --> 00:06:48,000
at least as hard to break as aes using

194
00:06:48,000 --> 00:06:50,800
an exhaustive key search and the other

195
00:06:50,800 --> 00:06:52,479
levels are similarly tied to

196
00:06:52,479 --> 00:06:54,080
some of the symmetric key crypto that we

197
00:06:54,080 --> 00:06:57,680
have standardized at nist already

198
00:06:57,919 --> 00:06:59,599
we think that levels one two and three

199
00:06:59,599 --> 00:07:00,880
will be enough for the next several

200
00:07:00,880 --> 00:07:02,080
decades

201
00:07:02,080 --> 00:07:03,599
and we also have levels four and five

202
00:07:03,599 --> 00:07:05,120
for applications that need very high

203
00:07:05,120 --> 00:07:06,319
security

204
00:07:06,319 --> 00:07:08,720
and to see how key sizes and so forth

205
00:07:08,720 --> 00:07:11,759
scale as you increase your parameters

206
00:07:11,759 --> 00:07:15,199
so security is always top priority for

207
00:07:15,199 --> 00:07:17,520
cryptography

208
00:07:17,520 --> 00:07:19,199
after security there's performance and

209
00:07:19,199 --> 00:07:21,120
that would be measured on a variety of

210
00:07:21,120 --> 00:07:23,840
of classical platforms both low-end and

211
00:07:23,840 --> 00:07:24,800
high-end

212
00:07:24,800 --> 00:07:28,160
software and hardware this includes both

213
00:07:28,160 --> 00:07:30,160
the efficiency like how fast you can

214
00:07:30,160 --> 00:07:31,440
encrypt and decrypt

215
00:07:31,440 --> 00:07:34,880
um as well as the size like what's the

216
00:07:34,880 --> 00:07:36,400
public key size what's the signature

217
00:07:36,400 --> 00:07:37,840
size cyber text size

218
00:07:37,840 --> 00:07:41,280
etc and then beyond these two main

219
00:07:41,280 --> 00:07:42,960
criteria there's a number of other

220
00:07:42,960 --> 00:07:44,960
properties that it would be nice to have

221
00:07:44,960 --> 00:07:46,560
you know as much as possible a drop in

222
00:07:46,560 --> 00:07:47,520
replacement

223
00:07:47,520 --> 00:07:50,000
provide perfect word secrecy beside

224
00:07:50,000 --> 00:07:51,360
channel resistant

225
00:07:51,360 --> 00:07:53,440
and so on and so forth so there's kind

226
00:07:53,440 --> 00:07:54,720
of a laundry list of

227
00:07:54,720 --> 00:07:56,560
desirable properties knowing that it's

228
00:07:56,560 --> 00:07:58,160
probably not possible to have you know

229
00:07:58,160 --> 00:07:59,520
absolutely everything here

230
00:07:59,520 --> 00:08:02,080
there's no silver bullet that solves all

231
00:08:02,080 --> 00:08:04,719
the problems

232
00:08:05,440 --> 00:08:08,479
so in the first round we had 82 schemes

233
00:08:08,479 --> 00:08:09,759
that were submitted to us

234
00:08:09,759 --> 00:08:13,039
69 of them met our requirements um five

235
00:08:13,039 --> 00:08:14,639
withdrew pretty quickly after they were

236
00:08:14,639 --> 00:08:15,840
broken so for

237
00:08:15,840 --> 00:08:17,360
most of the first round we were left

238
00:08:17,360 --> 00:08:21,199
with 64 algorithms in play

239
00:08:21,199 --> 00:08:22,879
you can see in the table in the bottom

240
00:08:22,879 --> 00:08:25,440
right for the most part they followed

241
00:08:25,440 --> 00:08:27,199
the established lines of research that

242
00:08:27,199 --> 00:08:29,440
the community was well aware of

243
00:08:29,440 --> 00:08:30,800
so there was a lot of lattice-based

244
00:08:30,800 --> 00:08:32,240
submissions a lot of code-based

245
00:08:32,240 --> 00:08:33,519
submissions

246
00:08:33,519 --> 00:08:36,080
and several multivariate signatures as

247
00:08:36,080 --> 00:08:37,519
well as some other uh

248
00:08:37,519 --> 00:08:40,240
ideas out there such as stateless hash

249
00:08:40,240 --> 00:08:41,200
isogenies

250
00:08:41,200 --> 00:08:44,240
and and so on i think it was a lot of

251
00:08:44,240 --> 00:08:45,839
fun for cryptographers right after we

252
00:08:45,839 --> 00:08:46,800
published this

253
00:08:46,800 --> 00:08:50,399
you know here's 60 some schemes to it to

254
00:08:50,399 --> 00:08:52,240
attack so cryptographers quickly went to

255
00:08:52,240 --> 00:08:53,519
work

256
00:08:53,519 --> 00:08:55,680
and just in the first i'd say a month or

257
00:08:55,680 --> 00:08:57,600
so you know they've broken

258
00:08:57,600 --> 00:09:00,560
probably about 20 of the the 69 that

259
00:09:00,560 --> 00:09:02,480
were out there

260
00:09:02,480 --> 00:09:05,680
so that was a lot of fun to see we held

261
00:09:05,680 --> 00:09:07,440
a workshop where we invited all

262
00:09:07,440 --> 00:09:10,000
the round one participants to come and

263
00:09:10,000 --> 00:09:10,959
to

264
00:09:10,959 --> 00:09:12,800
explain their their strengths of their

265
00:09:12,800 --> 00:09:14,800
algorithm so that had a large number of

266
00:09:14,800 --> 00:09:15,680
presentations

267
00:09:15,680 --> 00:09:19,519
it was held in florida very nice venue

268
00:09:19,519 --> 00:09:22,800
we established the the pqc forum and

269
00:09:22,800 --> 00:09:24,080
had a lot of discussion a lot of

270
00:09:24,080 --> 00:09:25,839
questions a lot of posting a lot of

271
00:09:25,839 --> 00:09:27,920
official comments on there

272
00:09:27,920 --> 00:09:29,760
and that's still very active today and

273
00:09:29,760 --> 00:09:31,600
you can look up those archives and see

274
00:09:31,600 --> 00:09:34,320
what people were talking about

275
00:09:34,320 --> 00:09:35,920
a lot of research a lot of performance

276
00:09:35,920 --> 00:09:38,160
numbers in the first round

277
00:09:38,160 --> 00:09:40,640
and after about a year um once our

278
00:09:40,640 --> 00:09:42,320
government shutdown ended

279
00:09:42,320 --> 00:09:45,760
we selected 26 of the most promising

280
00:09:45,760 --> 00:09:47,600
schemes to move on into the

281
00:09:47,600 --> 00:09:50,800
the second round that included

282
00:09:50,800 --> 00:09:52,720
four submissions that were mergers from

283
00:09:52,720 --> 00:09:54,080
the first round

284
00:09:54,080 --> 00:09:55,519
there had been a lot of very similar

285
00:09:55,519 --> 00:09:57,360
submissions particularly in the lattice

286
00:09:57,360 --> 00:09:57,839
chems

287
00:09:57,839 --> 00:09:59,680
so it was good to see that we had some

288
00:09:59,680 --> 00:10:01,600
mergers going on

289
00:10:01,600 --> 00:10:03,040
for the most part we maintain the

290
00:10:03,040 --> 00:10:04,640
diversity of the algorithms from the

291
00:10:04,640 --> 00:10:05,440
first round

292
00:10:05,440 --> 00:10:07,839
but we needed to choose smaller numbers

293
00:10:07,839 --> 00:10:11,360
so that people could focus on

294
00:10:11,440 --> 00:10:13,360
we held a workshop co-located with

295
00:10:13,360 --> 00:10:15,200
crypto out in california and that was a

296
00:10:15,200 --> 00:10:15,839
good workshop

297
00:10:15,839 --> 00:10:19,040
a lot of people attended that and as

298
00:10:19,040 --> 00:10:20,560
could be expected cryptanalysis

299
00:10:20,560 --> 00:10:22,480
continued even in the second round

300
00:10:22,480 --> 00:10:24,880
these were the 26 of the the more

301
00:10:24,880 --> 00:10:27,040
promising schemes but even

302
00:10:27,040 --> 00:10:29,680
even then seven of them were broken or

303
00:10:29,680 --> 00:10:31,040
significantly attacked

304
00:10:31,040 --> 00:10:34,640
in the second round and

305
00:10:34,640 --> 00:10:36,399
we're also glad to see even more bench

306
00:10:36,399 --> 00:10:38,240
work benchmarking more performance

307
00:10:38,240 --> 00:10:38,959
numbers

308
00:10:38,959 --> 00:10:41,839
um and and experiments that were being

309
00:10:41,839 --> 00:10:43,120
done where they were taking some of

310
00:10:43,120 --> 00:10:44,000
these algorithms

311
00:10:44,000 --> 00:10:45,760
and putting them into real world

312
00:10:45,760 --> 00:10:48,079
experiments into protocols and testing

313
00:10:48,079 --> 00:10:51,680
them out to see how would they perform

314
00:10:51,680 --> 00:10:54,320
after 18 months we selected 15

315
00:10:54,320 --> 00:10:55,600
submissions to move on

316
00:10:55,600 --> 00:10:57,920
into the third round and that was a

317
00:10:57,920 --> 00:10:59,279
really difficult

318
00:10:59,279 --> 00:11:01,519
decision process it took us a while to

319
00:11:01,519 --> 00:11:04,399
to settle on that

320
00:11:04,399 --> 00:11:05,920
so looking back at the first round

321
00:11:05,920 --> 00:11:08,320
candidates here are

322
00:11:08,320 --> 00:11:10,160
they all listed if you're involved in

323
00:11:10,160 --> 00:11:11,920
attacking some of them may see some

324
00:11:11,920 --> 00:11:13,519
familiar names among them

325
00:11:13,519 --> 00:11:15,519
it's kind of fun to see the names

326
00:11:15,519 --> 00:11:17,760
everybody chooses

327
00:11:17,760 --> 00:11:20,320
for the second round i crossed out the

328
00:11:20,320 --> 00:11:20,880
ones

329
00:11:20,880 --> 00:11:24,240
that did not make it the ones in orange

330
00:11:24,240 --> 00:11:26,320
were mergers they merged together

331
00:11:26,320 --> 00:11:27,920
to make it into the second round so i

332
00:11:27,920 --> 00:11:29,200
wanted to highlight that they did

333
00:11:29,200 --> 00:11:29,839
survive

334
00:11:29,839 --> 00:11:31,120
and the ones in green are the ones that

335
00:11:31,120 --> 00:11:33,150
made it into the the second round

336
00:11:33,150 --> 00:11:35,120
[Music]

337
00:11:35,120 --> 00:11:37,120
so some of those names hopefully look uh

338
00:11:37,120 --> 00:11:38,560
familiar as we've been

339
00:11:38,560 --> 00:11:43,120
studying them over the past while

340
00:11:43,120 --> 00:11:44,800
as i said it was a very difficult

341
00:11:44,800 --> 00:11:46,399
decision selecting the schemes to move

342
00:11:46,399 --> 00:11:48,480
on into the third round

343
00:11:48,480 --> 00:11:50,959
we we kept in mind our our evaluation

344
00:11:50,959 --> 00:11:52,240
criteria

345
00:11:52,240 --> 00:11:53,920
criteria in terms of security and

346
00:11:53,920 --> 00:11:55,360
performance

347
00:11:55,360 --> 00:11:56,800
as well as other issues as well

348
00:11:56,800 --> 00:11:59,279
implementation characteristics

349
00:11:59,279 --> 00:12:02,560
and so forth uh each round

350
00:12:02,560 --> 00:12:04,800
teams were allowed to make changes so we

351
00:12:04,800 --> 00:12:06,399
looked at what those changes were and

352
00:12:06,399 --> 00:12:08,079
were they improving the submission

353
00:12:08,079 --> 00:12:10,320
as well as again the discussion on the

354
00:12:10,320 --> 00:12:11,760
pqc forum

355
00:12:11,760 --> 00:12:13,920
and the research and performance numbers

356
00:12:13,920 --> 00:12:16,720
that were published

357
00:12:16,720 --> 00:12:18,399
and for the third round we decided to do

358
00:12:18,399 --> 00:12:19,839
something different than we've done in

359
00:12:19,839 --> 00:12:20,560
the past

360
00:12:20,560 --> 00:12:23,519
we just decided to use two different

361
00:12:23,519 --> 00:12:24,000
tracks

362
00:12:24,000 --> 00:12:27,680
of of algorithms moving on

363
00:12:27,680 --> 00:12:31,440
um and that was a

364
00:12:31,440 --> 00:12:33,200
not an easy decision even just doing

365
00:12:33,200 --> 00:12:34,880
that there there's tradeoffs to doing it

366
00:12:34,880 --> 00:12:35,600
this way

367
00:12:35,600 --> 00:12:38,160
but ultimately we needed to narrow down

368
00:12:38,160 --> 00:12:38,880
the number

369
00:12:38,880 --> 00:12:40,399
so that we could focus on the most

370
00:12:40,399 --> 00:12:42,160
promising algorithms

371
00:12:42,160 --> 00:12:43,680
but we also felt that there were a

372
00:12:43,680 --> 00:12:45,279
number of algorithms that still could

373
00:12:45,279 --> 00:12:46,399
potentially

374
00:12:46,399 --> 00:12:49,440
be standardized pqc

375
00:12:49,440 --> 00:12:51,279
is still a very much an active research

376
00:12:51,279 --> 00:12:53,360
area the science is not yet settled and

377
00:12:53,360 --> 00:12:54,880
we don't want to to rule anything out

378
00:12:54,880 --> 00:12:56,240
yet

379
00:12:56,240 --> 00:12:57,760
so we thought this was the best way to

380
00:12:57,760 --> 00:13:00,160
kind of balance those interests

381
00:13:00,160 --> 00:13:02,320
the first track we called finalists we

382
00:13:02,320 --> 00:13:03,760
thought that

383
00:13:03,760 --> 00:13:06,240
they were the algorithms that would be

384
00:13:06,240 --> 00:13:07,920
most likely to be ready at the end of

385
00:13:07,920 --> 00:13:10,240
the third round for standardization

386
00:13:10,240 --> 00:13:11,360
and that they would be the most

387
00:13:11,360 --> 00:13:13,360
promising ones to fit the majority of

388
00:13:13,360 --> 00:13:16,320
the use cases

389
00:13:16,560 --> 00:13:18,560
the algorithms that were not finalists

390
00:13:18,560 --> 00:13:20,240
we called alternates

391
00:13:20,240 --> 00:13:22,560
and the crucial point for us there was

392
00:13:22,560 --> 00:13:23,920
we didn't want to keep an algorithm

393
00:13:23,920 --> 00:13:25,440
around just because we thought it was

394
00:13:25,440 --> 00:13:26,079
interesting

395
00:13:26,079 --> 00:13:27,279
and we thought people should keep

396
00:13:27,279 --> 00:13:29,440
researching it we only wanted to keep it

397
00:13:29,440 --> 00:13:31,519
around if we saw a potential

398
00:13:31,519 --> 00:13:34,720
avenue for standardization that wasn't a

399
00:13:34,720 --> 00:13:36,240
promise that it would be standardized

400
00:13:36,240 --> 00:13:37,600
but just

401
00:13:37,600 --> 00:13:41,199
um we saw a path where where

402
00:13:41,199 --> 00:13:43,839
it could be

403
00:13:45,120 --> 00:13:47,120
so for the third round the seven

404
00:13:47,120 --> 00:13:48,639
finalists and eight alternates that

405
00:13:48,639 --> 00:13:49,040
we're

406
00:13:49,040 --> 00:13:51,360
still have in there the chem finalists

407
00:13:51,360 --> 00:13:53,279
are kyber and true and saber

408
00:13:53,279 --> 00:13:55,600
in classic mcleese the signature

409
00:13:55,600 --> 00:13:57,680
finalists are dilithium falcon and

410
00:13:57,680 --> 00:13:59,040
rainbow

411
00:13:59,040 --> 00:14:02,000
the chem alternets are bike frodo hqc

412
00:14:02,000 --> 00:14:03,680
entry prime and spike

413
00:14:03,680 --> 00:14:06,240
and the signature alternates are gems

414
00:14:06,240 --> 00:14:09,279
picnic and sphinx plus

415
00:14:09,279 --> 00:14:10,800
and again we we tried to maintain the

416
00:14:10,800 --> 00:14:12,320
diversity of the algorithms

417
00:14:12,320 --> 00:14:15,760
as well as reducing the number down

418
00:14:15,760 --> 00:14:17,360
but they were some some very difficult

419
00:14:17,360 --> 00:14:19,040
decisions and we had to eliminate some

420
00:14:19,040 --> 00:14:20,000
some good schemes

421
00:14:20,000 --> 00:14:23,440
in order to narrow things down

422
00:14:24,720 --> 00:14:27,839
just to kind of give a quick summary on

423
00:14:27,839 --> 00:14:29,600
these schemes these are the five

424
00:14:29,600 --> 00:14:31,040
lattice-based chems that are still

425
00:14:31,040 --> 00:14:32,880
around in the third round

426
00:14:32,880 --> 00:14:35,440
the finalists kyber saber and entro are

427
00:14:35,440 --> 00:14:38,079
all based on structured lattices

428
00:14:38,079 --> 00:14:39,760
as such they have pretty good all-around

429
00:14:39,760 --> 00:14:41,279
performance

430
00:14:41,279 --> 00:14:43,360
key sizes aren't too large they're

431
00:14:43,360 --> 00:14:45,199
pretty efficient

432
00:14:45,199 --> 00:14:47,040
entrus a little different than kyber and

433
00:14:47,040 --> 00:14:48,880
saber and that it's a little bit older

434
00:14:48,880 --> 00:14:50,560
has a clear ip situation is

435
00:14:50,560 --> 00:14:52,720
based on a different security problem so

436
00:14:52,720 --> 00:14:54,560
we do have some diversity among

437
00:14:54,560 --> 00:14:58,560
these three but uh as they're all

438
00:14:58,560 --> 00:15:00,560
structured lattice ones we expect to

439
00:15:00,560 --> 00:15:02,480
choose at most one of those three

440
00:15:02,480 --> 00:15:03,760
at the end of round three for

441
00:15:03,760 --> 00:15:06,240
standardization um

442
00:15:06,240 --> 00:15:08,079
we also had as alternates we had intro

443
00:15:08,079 --> 00:15:10,480
prime it is a structured lattice scheme

444
00:15:10,480 --> 00:15:11,839
that made kind of different design

445
00:15:11,839 --> 00:15:12,480
choices

446
00:15:12,480 --> 00:15:15,839
and it is interesting um but we did not

447
00:15:15,839 --> 00:15:17,680
put it as a finalist

448
00:15:17,680 --> 00:15:20,639
and then frodo chose uh some security

449
00:15:20,639 --> 00:15:22,079
performance trade-offs that

450
00:15:22,079 --> 00:15:24,079
perhaps is uh more conservative but it

451
00:15:24,079 --> 00:15:25,199
took a little bit of a hit in

452
00:15:25,199 --> 00:15:26,399
performance

453
00:15:26,399 --> 00:15:28,320
so we see it as a more conservative

454
00:15:28,320 --> 00:15:30,959
solution or is a backup

455
00:15:30,959 --> 00:15:34,880
which is available to us if we need

456
00:15:35,600 --> 00:15:38,079
the other cams three of them are code

457
00:15:38,079 --> 00:15:39,360
based

458
00:15:39,360 --> 00:15:40,959
classic mclease which we selected as a

459
00:15:40,959 --> 00:15:43,600
finalist it's been around a long time

460
00:15:43,600 --> 00:15:45,199
has very large public keys but the

461
00:15:45,199 --> 00:15:47,199
ciphertext are the smallest out of all

462
00:15:47,199 --> 00:15:47,759
cams

463
00:15:47,759 --> 00:15:49,680
so for some applications you know you

464
00:15:49,680 --> 00:15:50,800
might be able to manage the

465
00:15:50,800 --> 00:15:53,440
the keys and take advantage of the small

466
00:15:53,440 --> 00:15:55,360
ciphertexts

467
00:15:55,360 --> 00:15:58,320
um we really like bike and hqc but we've

468
00:15:58,320 --> 00:16:00,000
we thought they needed a little bit more

469
00:16:00,000 --> 00:16:02,079
time to iron out some of their

470
00:16:02,079 --> 00:16:03,519
the details that they're still working

471
00:16:03,519 --> 00:16:05,199
on so they're they're two good

472
00:16:05,199 --> 00:16:06,800
code-based uh

473
00:16:06,800 --> 00:16:09,600
schemes that will likely uh continue to

474
00:16:09,600 --> 00:16:11,759
be worked on and improved

475
00:16:11,759 --> 00:16:14,079
and then there's also psych we heard uh

476
00:16:14,079 --> 00:16:14,880
about it

477
00:16:14,880 --> 00:16:17,120
during luca's talk um it's based on

478
00:16:17,120 --> 00:16:19,279
isogeny's which is a newer problem

479
00:16:19,279 --> 00:16:22,079
it's a little bit slower in performance

480
00:16:22,079 --> 00:16:24,000
but it has the advantage of having small

481
00:16:24,000 --> 00:16:27,600
keys so you know for some applications

482
00:16:27,600 --> 00:16:28,800
that that could be a win

483
00:16:28,800 --> 00:16:30,639
and we have it there is an alternate to

484
00:16:30,639 --> 00:16:34,000
continue being looked at

485
00:16:34,959 --> 00:16:36,639
for our signatures we have six

486
00:16:36,639 --> 00:16:38,160
signatures still in

487
00:16:38,160 --> 00:16:41,680
dilithium and falcon are both uh

488
00:16:41,680 --> 00:16:43,680
lattice based based on structured

489
00:16:43,680 --> 00:16:45,360
lattices so similar to the chem

490
00:16:45,360 --> 00:16:46,720
situation

491
00:16:46,720 --> 00:16:48,800
their key sizes look pretty good they're

492
00:16:48,800 --> 00:16:50,560
both pretty efficient

493
00:16:50,560 --> 00:16:52,800
and we will select at most one of them

494
00:16:52,800 --> 00:16:54,880
to be uh standardized at the end of the

495
00:16:54,880 --> 00:16:56,880
third round

496
00:16:56,880 --> 00:16:59,279
uh we also have sphinx plus and picnic

497
00:16:59,279 --> 00:17:00,959
they're based on kind of different ideas

498
00:17:00,959 --> 00:17:01,839
sphynx plus

499
00:17:01,839 --> 00:17:04,880
is based on uh hash based signatures

500
00:17:04,880 --> 00:17:07,679
it's a very stable conservative design

501
00:17:07,679 --> 00:17:09,760
we understand the security well

502
00:17:09,760 --> 00:17:12,720
it's a bit larger and slower than some

503
00:17:12,720 --> 00:17:14,400
of its competitors

504
00:17:14,400 --> 00:17:16,160
so for that reason it was chosen as an

505
00:17:16,160 --> 00:17:17,679
alternate

506
00:17:17,679 --> 00:17:20,000
a picnic has a lot of potential but

507
00:17:20,000 --> 00:17:21,280
there's still a lot of work that needs

508
00:17:21,280 --> 00:17:23,119
to be done on it so we selected it as an

509
00:17:23,119 --> 00:17:24,880
alternate

510
00:17:24,880 --> 00:17:27,280
and then we had two multivariate schemes

511
00:17:27,280 --> 00:17:29,760
rainbow and gems

512
00:17:29,760 --> 00:17:31,039
based on different problems in

513
00:17:31,039 --> 00:17:32,799
multivariate but they have a similar

514
00:17:32,799 --> 00:17:34,640
profile and they have very large public

515
00:17:34,640 --> 00:17:35,200
keys

516
00:17:35,200 --> 00:17:38,640
and very small signatures in comparing

517
00:17:38,640 --> 00:17:40,160
the two we thought rainbow was a little

518
00:17:40,160 --> 00:17:41,120
bit better

519
00:17:41,120 --> 00:17:44,720
and that it's small signatures

520
00:17:44,720 --> 00:17:46,240
for some applications that could be

521
00:17:46,240 --> 00:17:48,240
useful and in order to have some

522
00:17:48,240 --> 00:17:50,000
diversity and not depend entirely on

523
00:17:50,000 --> 00:17:52,240
lattices we selected rainbow

524
00:17:52,240 --> 00:17:55,360
as a finalist

525
00:17:56,480 --> 00:17:58,400
now even in round three cryptanalysis is

526
00:17:58,400 --> 00:18:00,320
continuing uh particularly for uh the

527
00:18:00,320 --> 00:18:01,760
two multivariate signature schemes

528
00:18:01,760 --> 00:18:02,799
rainbow and gems

529
00:18:02,799 --> 00:18:04,960
uh they both have had some attacks from

530
00:18:04,960 --> 00:18:07,520
some new min ring style attacks

531
00:18:07,520 --> 00:18:09,760
due to uh buoyance and tau petzl and

532
00:18:09,760 --> 00:18:10,880
ding

533
00:18:10,880 --> 00:18:12,400
this all came after our end of the

534
00:18:12,400 --> 00:18:14,480
second round decision making

535
00:18:14,480 --> 00:18:17,360
but we're very much aware of what's

536
00:18:17,360 --> 00:18:18,960
going on now

537
00:18:18,960 --> 00:18:20,559
a rainbow seems to lose a little bit

538
00:18:20,559 --> 00:18:23,600
less security than jams

539
00:18:23,600 --> 00:18:25,280
and just last week the rainbow team

540
00:18:25,280 --> 00:18:27,440
responded with the new security analysis

541
00:18:27,440 --> 00:18:29,679
where they go into some more details

542
00:18:29,679 --> 00:18:31,679
about memory costs

543
00:18:31,679 --> 00:18:33,760
and explain that they still feel that

544
00:18:33,760 --> 00:18:35,360
they are still at their same security

545
00:18:35,360 --> 00:18:36,640
levels despite the

546
00:18:36,640 --> 00:18:38,559
the attack which which they did confirm

547
00:18:38,559 --> 00:18:40,080
is correct

548
00:18:40,080 --> 00:18:41,520
so that needs to be looked at and

549
00:18:41,520 --> 00:18:44,480
evaluated um

550
00:18:44,480 --> 00:18:46,240
but when we look at the the state of the

551
00:18:46,240 --> 00:18:48,080
signature schemes

552
00:18:48,080 --> 00:18:50,640
we have six signature schemes and uh two

553
00:18:50,640 --> 00:18:52,320
of them multivariate have had some

554
00:18:52,320 --> 00:18:53,360
attacks

555
00:18:53,360 --> 00:18:56,240
that gives us some concern at nest and

556
00:18:56,240 --> 00:18:58,720
probably to the crypto community as well

557
00:18:58,720 --> 00:19:00,160
you know we don't want to have all our

558
00:19:00,160 --> 00:19:03,919
eggs in just one basket

559
00:19:03,919 --> 00:19:06,640
so we want diversity for security

560
00:19:06,640 --> 00:19:08,799
problems as well as for for application

561
00:19:08,799 --> 00:19:12,160
reasons as well and we wanted to

562
00:19:12,160 --> 00:19:12,799
highlight

563
00:19:12,799 --> 00:19:15,120
two quotes from our second round report

564
00:19:15,120 --> 00:19:16,240
we're thinking a lot about this

565
00:19:16,240 --> 00:19:17,919
situation internally and we hope other

566
00:19:17,919 --> 00:19:19,679
people as well

567
00:19:19,679 --> 00:19:22,559
the first paragraph points out that

568
00:19:22,559 --> 00:19:24,480
sphinx is an extremely conservative

569
00:19:24,480 --> 00:19:25,200
choice

570
00:19:25,200 --> 00:19:28,240
and um if confidence in better

571
00:19:28,240 --> 00:19:29,679
performing signature algorithms is

572
00:19:29,679 --> 00:19:31,360
shaken you know sphinx potentially could

573
00:19:31,360 --> 00:19:32,880
be ready at the end of the third round

574
00:19:32,880 --> 00:19:33,760
as well even though

575
00:19:33,760 --> 00:19:37,200
it's an alternate so that's

576
00:19:37,200 --> 00:19:39,039
that's not saying we're necessarily

577
00:19:39,039 --> 00:19:40,799
going to do that we just wanted to point

578
00:19:40,799 --> 00:19:41,360
out that

579
00:19:41,360 --> 00:19:43,679
um that is a possibility and the second

580
00:19:43,679 --> 00:19:44,960
paragraph where we

581
00:19:44,960 --> 00:19:47,840
talked about um we may adopt in the

582
00:19:47,840 --> 00:19:49,679
future a mechanism to accept new

583
00:19:49,679 --> 00:19:51,440
proposals at a later date

584
00:19:51,440 --> 00:19:53,360
in particular we might be interested in

585
00:19:53,360 --> 00:19:55,360
general purpose digital signatures which

586
00:19:55,360 --> 00:19:58,240
are not based on structured lattices

587
00:19:58,240 --> 00:19:59,840
and again we're not promising or

588
00:19:59,840 --> 00:20:01,360
committing that we will

589
00:20:01,360 --> 00:20:03,760
be accepting more uh more signature

590
00:20:03,760 --> 00:20:04,640
schemes

591
00:20:04,640 --> 00:20:05,919
but this is something we're thinking

592
00:20:05,919 --> 00:20:07,840
about and we would appreciate getting

593
00:20:07,840 --> 00:20:11,120
input from the cryptographic community

594
00:20:11,120 --> 00:20:12,799
on the state of the signature schemes

595
00:20:12,799 --> 00:20:15,918
like i've talked about here

596
00:20:16,400 --> 00:20:19,280
so our timeline we've been going for uh

597
00:20:19,280 --> 00:20:20,080
almost six months

598
00:20:20,080 --> 00:20:21,840
in the third round and it's expected

599
00:20:21,840 --> 00:20:23,840
that it'll last a year to 18 months

600
00:20:23,840 --> 00:20:26,159
after which we'll select some of the

601
00:20:26,159 --> 00:20:28,320
algorithms to standardize

602
00:20:28,320 --> 00:20:30,320
we do expect to have a fourth round

603
00:20:30,320 --> 00:20:32,080
where we will continue to study some of

604
00:20:32,080 --> 00:20:33,200
the alternates

605
00:20:33,200 --> 00:20:35,120
and maybe after the fourth round they

606
00:20:35,120 --> 00:20:38,000
will be ready for standardization

607
00:20:38,000 --> 00:20:39,679
it would similarly be like the first

608
00:20:39,679 --> 00:20:41,600
three rounds it would be a 12 to 18

609
00:20:41,600 --> 00:20:44,080
months

610
00:20:45,360 --> 00:20:47,440
we are working on a workshop planning

611
00:20:47,440 --> 00:20:49,440
the logistics of it right now it'll be

612
00:20:49,440 --> 00:20:50,720
virtual and

613
00:20:50,720 --> 00:20:52,720
it's looking like it will be late may or

614
00:20:52,720 --> 00:20:53,760
early june

615
00:20:53,760 --> 00:20:56,640
and we hope pretty soon to have concrete

616
00:20:56,640 --> 00:20:58,640
dates for you

617
00:20:58,640 --> 00:21:00,799
overall our timeline we still expect to

618
00:21:00,799 --> 00:21:02,159
be what we've been saying from the

619
00:21:02,159 --> 00:21:03,600
beginning

620
00:21:03,600 --> 00:21:05,679
we expect to have the first draft

621
00:21:05,679 --> 00:21:08,000
standards ready for public comments

622
00:21:08,000 --> 00:21:11,200
in 2022 to 2023 it does take a little

623
00:21:11,200 --> 00:21:13,120
bit of time to write them

624
00:21:13,120 --> 00:21:15,280
and to get public feedback on it and to

625
00:21:15,280 --> 00:21:16,960
get it through the bureaucratic process

626
00:21:16,960 --> 00:21:18,880
which we need to go through

627
00:21:18,880 --> 00:21:21,039
but we we expect that the final standard

628
00:21:21,039 --> 00:21:22,640
should hopefully be

629
00:21:22,640 --> 00:21:24,880
or not the final the finalized standard

630
00:21:24,880 --> 00:21:28,799
would be ready by about 2024.

631
00:21:29,760 --> 00:21:32,080
so there's there are plenty of research

632
00:21:32,080 --> 00:21:33,600
challenges still open

633
00:21:33,600 --> 00:21:36,080
um i'm not going to go through these in

634
00:21:36,080 --> 00:21:37,120
detail or anything

635
00:21:37,120 --> 00:21:39,679
there's there's more general topics as

636
00:21:39,679 --> 00:21:40,799
well as

637
00:21:40,799 --> 00:21:43,039
questions specific for for certain of

638
00:21:43,039 --> 00:21:44,000
the round three

639
00:21:44,000 --> 00:21:47,600
algorithms um i'll uh

640
00:21:47,600 --> 00:21:49,760
let people just work on those as they

641
00:21:49,760 --> 00:21:53,200
will without going into detail right now

642
00:21:53,200 --> 00:21:56,159
as well there's other challenges besides

643
00:21:56,159 --> 00:21:57,280
research

644
00:21:57,280 --> 00:22:00,559
ip's a concern we share the the feeling

645
00:22:00,559 --> 00:22:01,679
which most of the

646
00:22:01,679 --> 00:22:03,440
community does as well that we want

647
00:22:03,440 --> 00:22:05,840
anything we standardize to be able to be

648
00:22:05,840 --> 00:22:08,400
freely used so we're actively working on

649
00:22:08,400 --> 00:22:09,280
that

650
00:22:09,280 --> 00:22:11,440
we want benchmarking to continue both in

651
00:22:11,440 --> 00:22:13,679
hardware and software

652
00:22:13,679 --> 00:22:15,520
we want people working on side channel

653
00:22:15,520 --> 00:22:17,280
resistant implementations

654
00:22:17,280 --> 00:22:20,640
of the algorithms and we like the real

655
00:22:20,640 --> 00:22:22,400
world experiments that we've seen so far

656
00:22:22,400 --> 00:22:23,200
so that we

657
00:22:23,200 --> 00:22:26,080
can see if they work our key size is too

658
00:22:26,080 --> 00:22:27,520
large are they too slow

659
00:22:27,520 --> 00:22:30,559
things like that we also want to

660
00:22:30,559 --> 00:22:32,320
continue to encourage as people are

661
00:22:32,320 --> 00:22:33,440
already doing to think about the

662
00:22:33,440 --> 00:22:34,720
transition and what they can do to

663
00:22:34,720 --> 00:22:36,480
prepare ahead of time

664
00:22:36,480 --> 00:22:38,559
one idea that is frequently mentioned is

665
00:22:38,559 --> 00:22:40,240
using hybrid solutions and that's the

666
00:22:40,240 --> 00:22:40,799
idea of

667
00:22:40,799 --> 00:22:43,360
combining a classical algorithm with a

668
00:22:43,360 --> 00:22:45,120
post quantum algorithm

669
00:22:45,120 --> 00:22:47,520
in such a way that you have to break

670
00:22:47,520 --> 00:22:48,240
both of them

671
00:22:48,240 --> 00:22:51,440
in order to break the hybrid a few

672
00:22:51,440 --> 00:22:52,640
months back we

673
00:22:52,640 --> 00:22:55,360
allowed this in one of our standards

674
00:22:55,360 --> 00:22:57,600
basically you can concatenate the shared

675
00:22:57,600 --> 00:22:58,799
secret that you obtain

676
00:22:58,799 --> 00:23:01,919
from a nist algorithm and

677
00:23:01,919 --> 00:23:04,080
a quantum resistant algorithm and then

678
00:23:04,080 --> 00:23:06,080
you run it through a kdf

679
00:23:06,080 --> 00:23:08,000
and we explain how to do that in such a

680
00:23:08,000 --> 00:23:10,159
way and and then the result can still be

681
00:23:10,159 --> 00:23:11,919
fixed validated

682
00:23:11,919 --> 00:23:13,679
um it's only validating the classical

683
00:23:13,679 --> 00:23:14,880
part because that's the only thing

684
00:23:14,880 --> 00:23:16,799
currently standardized but nonetheless

685
00:23:16,799 --> 00:23:17,200
uh

686
00:23:17,200 --> 00:23:18,880
you know it would allow input from a

687
00:23:18,880 --> 00:23:22,240
quantum resistant algorithm as well

688
00:23:22,240 --> 00:23:24,320
and of course we'll have more to say

689
00:23:24,320 --> 00:23:25,600
about the transition

690
00:23:25,600 --> 00:23:27,919
in in future years is as we start

691
00:23:27,919 --> 00:23:29,760
selecting algorithms

692
00:23:29,760 --> 00:23:30,960
and we've published transition

693
00:23:30,960 --> 00:23:32,720
guidelines in the past you know we've

694
00:23:32,720 --> 00:23:36,480
done this with triple q des for sha-1

695
00:23:36,480 --> 00:23:38,960
and so forth and we will of course do so

696
00:23:38,960 --> 00:23:41,039
for post-quantum standards in the next

697
00:23:41,039 --> 00:23:44,080
few years i want to point out

698
00:23:44,080 --> 00:23:47,200
the national cyber security of

699
00:23:47,200 --> 00:23:47,760
excellence

700
00:23:47,760 --> 00:23:51,120
recently hosted a workshop in october

701
00:23:51,120 --> 00:23:53,039
about some of these issues regarding the

702
00:23:53,039 --> 00:23:54,799
transition and hybrid and what we can be

703
00:23:54,799 --> 00:23:56,640
doing to better prepare

704
00:23:56,640 --> 00:23:58,080
and they're still actively working on

705
00:23:58,080 --> 00:23:59,840
this project so if you're interested

706
00:23:59,840 --> 00:24:02,240
um they're leading that we're working

707
00:24:02,240 --> 00:24:03,200
with them as well

708
00:24:03,200 --> 00:24:05,440
but i'd invite you to get involved with

709
00:24:05,440 --> 00:24:08,400
that project as well

710
00:24:09,120 --> 00:24:11,360
stateful hash based signatures were

711
00:24:11,360 --> 00:24:13,360
outside of the scope of our competition

712
00:24:13,360 --> 00:24:15,200
they have been standardized in the ietf

713
00:24:15,200 --> 00:24:17,760
with two rfcs which standardized xmss

714
00:24:17,760 --> 00:24:19,679
and lms signatures

715
00:24:19,679 --> 00:24:21,760
this recently also standardized the same

716
00:24:21,760 --> 00:24:22,799
two algorithms

717
00:24:22,799 --> 00:24:26,880
in sp 800 208 so there are

718
00:24:26,880 --> 00:24:28,799
stateful hash based signatures that are

719
00:24:28,799 --> 00:24:31,360
standardized and can be used

720
00:24:31,360 --> 00:24:33,679
we want to caution they are not general

721
00:24:33,679 --> 00:24:34,720
purpose

722
00:24:34,720 --> 00:24:36,240
digital signature algorithms and should

723
00:24:36,240 --> 00:24:37,840
only be used in applications where you

724
00:24:37,840 --> 00:24:40,240
can carefully manage the state

725
00:24:40,240 --> 00:24:41,360
otherwise you can have some pretty

726
00:24:41,360 --> 00:24:43,440
disastrous results

727
00:24:43,440 --> 00:24:45,360
so in the standard we point out some

728
00:24:45,360 --> 00:24:47,039
warnings on that but

729
00:24:47,039 --> 00:24:50,559
they are available there are some things

730
00:24:50,559 --> 00:24:53,200
that organizations can start to do now

731
00:24:53,200 --> 00:24:54,799
to prepare even though we have not yet

732
00:24:54,799 --> 00:24:56,799
selected the algorithms

733
00:24:56,799 --> 00:24:59,200
primarily you want to just start looking

734
00:24:59,200 --> 00:25:00,240
at what crypto

735
00:25:00,240 --> 00:25:01,919
you know you're actually using which

736
00:25:01,919 --> 00:25:03,760
which algorithms are your public key

737
00:25:03,760 --> 00:25:04,960
ones

738
00:25:04,960 --> 00:25:06,960
can you start doing things to prepare

739
00:25:06,960 --> 00:25:08,640
for a transition knowing that it's going

740
00:25:08,640 --> 00:25:10,240
to occur

741
00:25:10,240 --> 00:25:12,799
make sure the products you're using the

742
00:25:12,799 --> 00:25:14,799
you know that your vendors are aware

743
00:25:14,799 --> 00:25:18,400
of the coming transition and just be

744
00:25:18,400 --> 00:25:19,679
tracking what's going on with our

745
00:25:19,679 --> 00:25:20,880
project as well as

746
00:25:20,880 --> 00:25:22,400
in other areas with other standards

747
00:25:22,400 --> 00:25:25,360
organizations as well as

748
00:25:25,360 --> 00:25:26,880
developments of quantum computers to

749
00:25:26,880 --> 00:25:30,000
know how they're advancing and so on

750
00:25:30,000 --> 00:25:31,760
with the main goal being that the sooner

751
00:25:31,760 --> 00:25:33,840
you're aware and start

752
00:25:33,840 --> 00:25:36,080
doing your homework and preparing you

753
00:25:36,080 --> 00:25:38,240
know you're less likely to have mistakes

754
00:25:38,240 --> 00:25:40,799
in the future

755
00:25:41,279 --> 00:25:43,679
so with that i'll uh conclude we're not

756
00:25:43,679 --> 00:25:45,279
at the end of this but we can start to

757
00:25:45,279 --> 00:25:46,720
see some of the light at the end of the

758
00:25:46,720 --> 00:25:47,200
tunnel

759
00:25:47,200 --> 00:25:50,400
it's going to be a long tunnel but the

760
00:25:50,400 --> 00:25:52,880
third round is you know not too far off

761
00:25:52,880 --> 00:25:53,919
from ending

762
00:25:53,919 --> 00:25:55,679
nist is grateful for the efforts of

763
00:25:55,679 --> 00:25:57,520
everybody we certainly could not do this

764
00:25:57,520 --> 00:25:58,159
on our own

765
00:25:58,159 --> 00:25:59,840
and we appreciate all the the hard work

766
00:25:59,840 --> 00:26:02,080
and research that everybody does

767
00:26:02,080 --> 00:26:03,600
that includes other standards

768
00:26:03,600 --> 00:26:05,360
organizations who are working on this

769
00:26:05,360 --> 00:26:07,679
and collaborating and cooperating with

770
00:26:07,679 --> 00:26:09,279
us so that we have a great unified

771
00:26:09,279 --> 00:26:10,320
effort

772
00:26:10,320 --> 00:26:12,480
and i've got the info there for uh you

773
00:26:12,480 --> 00:26:14,000
know where to get more information

774
00:26:14,000 --> 00:26:15,919
and i'd recommend you sign up for the

775
00:26:15,919 --> 00:26:18,159
pqc form if you haven't to stay aware of

776
00:26:18,159 --> 00:26:19,679
announcements and discussion on that

777
00:26:19,679 --> 00:26:21,200
topic

778
00:26:21,200 --> 00:26:22,960
with that i'd be happy to take any

779
00:26:22,960 --> 00:26:25,600
questions in the time remaining

780
00:26:25,600 --> 00:26:28,480
all right thank you so much dustin for a

781
00:26:28,480 --> 00:26:30,880
fascinating talk uh there are indeed

782
00:26:30,880 --> 00:26:33,279
a bunch of questions uh in the chat and

783
00:26:33,279 --> 00:26:35,760
we have a whooping three minutes

784
00:26:35,760 --> 00:26:38,400
uh so in light of this i will prioritize

785
00:26:38,400 --> 00:26:39,840
those questions

786
00:26:39,840 --> 00:26:41,600
for just a moment i wanted to launch

787
00:26:41,600 --> 00:26:44,159
this poll that dustin had put up

788
00:26:44,159 --> 00:26:46,320
while you take the questions let's try

789
00:26:46,320 --> 00:26:47,520
to take that

790
00:26:47,520 --> 00:26:49,120
poll that dustin had put up at the

791
00:26:49,120 --> 00:26:51,919
beginning go ahead with the questions

792
00:26:51,919 --> 00:26:52,320
okay

793
00:26:52,320 --> 00:26:55,039
cool uh so i will i will prioritize the

794
00:26:55,039 --> 00:26:55,840
questions that

795
00:26:55,840 --> 00:26:58,559
uh daniel hasn't already uh uh engaged

796
00:26:58,559 --> 00:27:00,400
with on zulu

797
00:27:00,400 --> 00:27:02,720
kenny asks to what extent will this use

798
00:27:02,720 --> 00:27:05,279
secondary security criteria such as pke

799
00:27:05,279 --> 00:27:06,159
robustness

800
00:27:06,159 --> 00:27:09,760
to decide between the finalists

801
00:27:09,919 --> 00:27:12,880
um we try and consider everything when

802
00:27:12,880 --> 00:27:13,360
we

803
00:27:13,360 --> 00:27:16,799
weigh these factors so uh it's hard to

804
00:27:16,799 --> 00:27:17,840
put a

805
00:27:17,840 --> 00:27:20,480
you know concrete way as to how we weigh

806
00:27:20,480 --> 00:27:21,919
everything but yeah all these other

807
00:27:21,919 --> 00:27:23,600
secondary issues

808
00:27:23,600 --> 00:27:25,919
we're aware of them it's good if people

809
00:27:25,919 --> 00:27:27,840
talk to us and remind us of them but we

810
00:27:27,840 --> 00:27:28,720
do try and weigh

811
00:27:28,720 --> 00:27:31,600
everything yes

812
00:27:31,760 --> 00:27:35,279
then cass is asking uh so

813
00:27:35,279 --> 00:27:37,360
is you're requiring existential

814
00:27:37,360 --> 00:27:38,480
unforgeability

815
00:27:38,480 --> 00:27:40,320
well we've known for years that we can

816
00:27:40,320 --> 00:27:42,320
do better stronger watchability

817
00:27:42,320 --> 00:27:44,480
exclusive ownership and so on

818
00:27:44,480 --> 00:27:46,320
we know how this requirement came about

819
00:27:46,320 --> 00:27:48,640
historically was an explicit choice to

820
00:27:48,640 --> 00:27:50,080
require only a weekly

821
00:27:50,080 --> 00:27:54,080
graphic definition or just an accident

822
00:27:55,039 --> 00:27:57,279
um remembering back we made this

823
00:27:57,279 --> 00:27:58,880
requirement

824
00:27:58,880 --> 00:28:00,960
back in 2016 so it was five years ago

825
00:28:00,960 --> 00:28:02,399
and we debated

826
00:28:02,399 --> 00:28:05,600
which security models to use and then we

827
00:28:05,600 --> 00:28:07,919
put that out for public comment and we

828
00:28:07,919 --> 00:28:09,440
tried to uh

829
00:28:09,440 --> 00:28:10,880
respond to the public comments we

830
00:28:10,880 --> 00:28:12,640
received i don't remember a lot of the

831
00:28:12,640 --> 00:28:14,000
exact discussion

832
00:28:14,000 --> 00:28:17,039
but of course teams have been able to

833
00:28:17,039 --> 00:28:19,520
update their security proofs and provide

834
00:28:19,520 --> 00:28:20,720
the best

835
00:28:20,720 --> 00:28:23,760
security proofs and models that they can

836
00:28:23,760 --> 00:28:25,039
you know those were kind of the minimum

837
00:28:25,039 --> 00:28:26,799
definitions that we required in order to

838
00:28:26,799 --> 00:28:29,120
be accepted

839
00:28:29,120 --> 00:28:32,240
all right let me do one more question uh

840
00:28:32,240 --> 00:28:33,919
by fray but let me remind everyone

841
00:28:33,919 --> 00:28:36,000
there's more questions uh in the chat

842
00:28:36,000 --> 00:28:38,320
uh so does this provide a service to the

843
00:28:38,320 --> 00:28:39,360
community

844
00:28:39,360 --> 00:28:41,600
uh the advice of real patent lawyers to

845
00:28:41,600 --> 00:28:43,360
evaluate the potential problems ip

846
00:28:43,360 --> 00:28:46,879
issues for lattice paid schemes

847
00:28:47,039 --> 00:28:50,159
um all vip stuff i'm not a lawyer but

848
00:28:50,159 --> 00:28:51,760
we're working kind of behind the scenes

849
00:28:51,760 --> 00:28:54,000
to get some of these concerns

850
00:28:54,000 --> 00:28:56,960
um that we're aware of taken care of and

851
00:28:56,960 --> 00:28:58,640
we're confident that by the end of the

852
00:28:58,640 --> 00:29:00,399
third round

853
00:29:00,399 --> 00:29:03,039
anything we select we will have cleared

854
00:29:03,039 --> 00:29:04,320
up

855
00:29:04,320 --> 00:29:07,039
by that time

856
00:29:08,960 --> 00:29:11,679
all right um so i think at this point uh

857
00:29:11,679 --> 00:29:12,559
we should uh

858
00:29:12,559 --> 00:29:15,039
thank uh dustin again for a great talk

859
00:29:15,039 --> 00:29:16,960
and everybody please head to the chat to

860
00:29:16,960 --> 00:29:18,480
see kind of the other questions that i

861
00:29:18,480 --> 00:29:20,640
unfortunately had to skip over

862
00:29:20,640 --> 00:29:23,360
and i believe we are moving directly

863
00:29:23,360 --> 00:29:24,320
into

864
00:29:24,320 --> 00:29:27,760
uh the post quantum session so

865
00:29:27,760 --> 00:29:29,760
the first talk of which so we have three

866
00:29:29,760 --> 00:29:30,880
talks they're all

867
00:29:30,880 --> 00:29:33,840
focused on implementation in the broader

868
00:29:33,840 --> 00:29:34,320
sense

869
00:29:34,320 --> 00:29:36,320
um of course quantum cryptography

870
00:29:36,320 --> 00:29:38,240
exciting talks first talk is jointly

871
00:29:38,240 --> 00:29:40,399
given by daniel and james on the tax on

872
00:29:40,399 --> 00:29:41,120
the nist

873
00:29:41,120 --> 00:29:44,239
around three candidates

874
00:29:45,200 --> 00:29:47,679
okay great thank you um james are you

875
00:29:47,679 --> 00:29:49,440
here just checking in

876
00:29:49,440 --> 00:29:52,720
yep yep great all right um

877
00:29:52,720 --> 00:29:54,240
i'm gonna get started then thank you

878
00:29:54,240 --> 00:29:56,399
martin um this is a talk

879
00:29:56,399 --> 00:29:58,960
uh attacks on nist pqc third round

880
00:29:58,960 --> 00:29:59,919
candidates

881
00:29:59,919 --> 00:30:02,799
um i am daniel apon at nist on the pqc

882
00:30:02,799 --> 00:30:03,760
team

883
00:30:03,760 --> 00:30:06,080
um i'm the loudest guy i guess on the

884
00:30:06,080 --> 00:30:06,799
team

885
00:30:06,799 --> 00:30:08,480
um this is a joint talk with my

886
00:30:08,480 --> 00:30:11,279
colleague james howe at pq shield

887
00:30:11,279 --> 00:30:14,480
um so just as an introduction here

888
00:30:14,480 --> 00:30:15,760
you know first of all of course why do

889
00:30:15,760 --> 00:30:17,919
we care about attacks on pqc

890
00:30:17,919 --> 00:30:20,880
um so this is a talk primarily and in

891
00:30:20,880 --> 00:30:22,240
fact entirely about

892
00:30:22,240 --> 00:30:25,200
side channel attacks against nist post

893
00:30:25,200 --> 00:30:26,240
quantum crypto

894
00:30:26,240 --> 00:30:29,200
uh candidates um so you know we at nist

895
00:30:29,200 --> 00:30:29,600
have

896
00:30:29,600 --> 00:30:31,679
stated many times before you know going

897
00:30:31,679 --> 00:30:33,520
back to the initial call for proposals

898
00:30:33,520 --> 00:30:34,799
in 2016.

899
00:30:34,799 --> 00:30:37,200
and as recently as the uh second-round

900
00:30:37,200 --> 00:30:39,760
report nisteir 8309

901
00:30:39,760 --> 00:30:41,120
um that we're looking for more

902
00:30:41,120 --> 00:30:42,880
information more research more

903
00:30:42,880 --> 00:30:45,760
data on side channel attacks um so you

904
00:30:45,760 --> 00:30:46,159
know

905
00:30:46,159 --> 00:30:48,320
just just a quote here um we're looking

906
00:30:48,320 --> 00:30:50,159
for more performance data on

907
00:30:50,159 --> 00:30:52,080
implementations that protect against

908
00:30:52,080 --> 00:30:53,919
side channel attacks such as timing tax

909
00:30:53,919 --> 00:30:55,760
power monitoring attacks fault tax this

910
00:30:55,760 --> 00:30:57,760
type of thing

911
00:30:57,760 --> 00:30:59,679
and i should point out just for context

912
00:30:59,679 --> 00:31:01,120
on this talk

913
00:31:01,120 --> 00:31:02,799
why are we giving a talk about side

914
00:31:02,799 --> 00:31:04,399
channel attacks before there have been

915
00:31:04,399 --> 00:31:06,000
you know large scale implementations of

916
00:31:06,000 --> 00:31:08,159
post quantum crypto primarily we want to

917
00:31:08,159 --> 00:31:09,440
highlight this issue

918
00:31:09,440 --> 00:31:12,320
and point out for future implementers uh

919
00:31:12,320 --> 00:31:13,600
kind of the category

920
00:31:13,600 --> 00:31:15,200
of different issues they're going to be

921
00:31:15,200 --> 00:31:16,399
you know coming up when you're thinking

922
00:31:16,399 --> 00:31:16,960
about

923
00:31:16,960 --> 00:31:18,320
you know deploying this for your

924
00:31:18,320 --> 00:31:20,240
business um so with that

925
00:31:20,240 --> 00:31:23,600
uh we'll talk about a survey on

926
00:31:23,600 --> 00:31:25,440
uh attacks on mrs speaker c third on

927
00:31:25,440 --> 00:31:27,360
candidates

928
00:31:27,360 --> 00:31:29,279
yeah so this part of the talk is is sort

929
00:31:29,279 --> 00:31:31,360
of the main contribution really

930
00:31:31,360 --> 00:31:33,120
before we do that we just want to give a

931
00:31:33,120 --> 00:31:34,640
brief prelude

932
00:31:34,640 --> 00:31:36,480
firstly a quick overview of the attack

933
00:31:36,480 --> 00:31:38,080
types we consider

934
00:31:38,080 --> 00:31:40,080
these include classical cryptanalysis

935
00:31:40,080 --> 00:31:41,120
and fault attacks

936
00:31:41,120 --> 00:31:42,640
and then the typical side channel

937
00:31:42,640 --> 00:31:44,799
attacks that vary from

938
00:31:44,799 --> 00:31:46,960
timing analysis simple differential and

939
00:31:46,960 --> 00:31:48,640
correlation power analysis

940
00:31:48,640 --> 00:31:50,480
an electromagnetic template and called

941
00:31:50,480 --> 00:31:51,840
boot attacks

942
00:31:51,840 --> 00:31:53,760
we also provide any counter measures we

943
00:31:53,760 --> 00:31:56,320
found these can vary from masking

944
00:31:56,320 --> 00:31:58,799
techniques to hiding techniques

945
00:31:58,799 --> 00:32:00,720
for brevity we won't state the details

946
00:32:00,720 --> 00:32:02,480
of these but you can look at our slides

947
00:32:02,480 --> 00:32:04,559
or pause the video offline for this

948
00:32:04,559 --> 00:32:07,840
um and also a quick disclaimer

949
00:32:07,840 --> 00:32:09,840
we tried to be as unbiased and neutral

950
00:32:09,840 --> 00:32:11,200
as possible here

951
00:32:11,200 --> 00:32:12,880
and we only show attacks that target a

952
00:32:12,880 --> 00:32:15,039
specific candidate so that would be

953
00:32:15,039 --> 00:32:16,960
a key encapsulation mechanism or a

954
00:32:16,960 --> 00:32:18,559
signature scheme

955
00:32:18,559 --> 00:32:21,039
so this means attacks on a public key

956
00:32:21,039 --> 00:32:23,279
encryption or a key exchange version

957
00:32:23,279 --> 00:32:25,840
is out of scope and we don't speculate

958
00:32:25,840 --> 00:32:26,720
about whether

959
00:32:26,720 --> 00:32:28,640
an historical attack or a potential

960
00:32:28,640 --> 00:32:30,720
attack supply either

961
00:32:30,720 --> 00:32:32,559
we try to focus less on implementation

962
00:32:32,559 --> 00:32:34,640
foot guns as well

963
00:32:34,640 --> 00:32:36,000
trying to show more on novel

964
00:32:36,000 --> 00:32:37,840
vulnerabilities

965
00:32:37,840 --> 00:32:40,960
um so we assume um as we can tr we

966
00:32:40,960 --> 00:32:43,039
try to assume that uh secure code

967
00:32:43,039 --> 00:32:44,960
practices have been used

968
00:32:44,960 --> 00:32:47,519
so we don't really consider key reuse

969
00:32:47,519 --> 00:32:48,880
attacks or memory use attacks or

970
00:32:48,880 --> 00:32:50,720
anything like that

971
00:32:50,720 --> 00:32:52,799
so without further ado here is our main

972
00:32:52,799 --> 00:32:54,799
contribution

973
00:32:54,799 --> 00:32:56,399
we did a complete and comprehensive

974
00:32:56,399 --> 00:32:58,159
survey of the current state of the art

975
00:32:58,159 --> 00:33:01,279
on this pqc third round candidates

976
00:33:01,279 --> 00:33:03,279
summarized here on the table

977
00:33:03,279 --> 00:33:05,840
you can see the attacks um we mentioned

978
00:33:05,840 --> 00:33:07,600
earlier in the columns

979
00:33:07,600 --> 00:33:09,039
the rows make up the third round

980
00:33:09,039 --> 00:33:10,640
candidates a check

981
00:33:10,640 --> 00:33:12,399
mark in the row will refer to the

982
00:33:12,399 --> 00:33:14,159
corresponding attack

983
00:33:14,159 --> 00:33:16,559
and then ordered references are provided

984
00:33:16,559 --> 00:33:18,880
in the final column of the table

985
00:33:18,880 --> 00:33:21,200
any gaps we have any gaps we have here

986
00:33:21,200 --> 00:33:21,919
we we

987
00:33:21,919 --> 00:33:23,120
we haven't found an attack on a

988
00:33:23,120 --> 00:33:24,960
candidate

989
00:33:24,960 --> 00:33:26,720
in general most if not all of these

990
00:33:26,720 --> 00:33:28,559
attacks are academic

991
00:33:28,559 --> 00:33:30,080
mainly because we've yet to see

992
00:33:30,080 --> 00:33:32,640
real-world deployments of these schemes

993
00:33:32,640 --> 00:33:34,640
some vulnerabilities may have been fixed

994
00:33:34,640 --> 00:33:36,480
but we keep the attacks

995
00:33:36,480 --> 00:33:38,480
in the table for completeness and and so

996
00:33:38,480 --> 00:33:40,720
that known weaknesses are remembered and

997
00:33:40,720 --> 00:33:43,200
mistakes are not made again

998
00:33:43,200 --> 00:33:44,720
most if not all of these attacks are

999
00:33:44,720 --> 00:33:46,640
also single targets and we've yet to

1000
00:33:46,640 --> 00:33:48,480
really see the impact of multi-target

1001
00:33:48,480 --> 00:33:49,120
attacks

1002
00:33:49,120 --> 00:33:51,360
this is something you might see in for

1003
00:33:51,360 --> 00:33:54,960
example staple hash based signatures

1004
00:33:54,960 --> 00:33:56,960
lattices make up more than 50 of these

1005
00:33:56,960 --> 00:33:58,159
attacks

1006
00:33:58,159 --> 00:34:00,000
this is unsurprising since it's been the

1007
00:34:00,000 --> 00:34:02,320
case since the beginning of the project

1008
00:34:02,320 --> 00:34:04,840
for everything from software to hardware

1009
00:34:04,840 --> 00:34:06,080
implementations

1010
00:34:06,080 --> 00:34:07,600
although power analysis is the most

1011
00:34:07,600 --> 00:34:09,359
common attack there remains a lot of

1012
00:34:09,359 --> 00:34:10,800
gaps here

1013
00:34:10,800 --> 00:34:12,480
this could be due to some schemes being

1014
00:34:12,480 --> 00:34:14,239
infeasible to run on the typical

1015
00:34:14,239 --> 00:34:16,239
embedded devices used to evaluate these

1016
00:34:16,239 --> 00:34:17,440
side channel attacks

1017
00:34:17,440 --> 00:34:19,199
one of one example of this is classic

1018
00:34:19,199 --> 00:34:20,960
michaelis

1019
00:34:20,960 --> 00:34:23,119
also some schemes such as cycle sphinx

1020
00:34:23,119 --> 00:34:24,719
plus may also suffer from being

1021
00:34:24,719 --> 00:34:26,800
significantly slower or larger

1022
00:34:26,800 --> 00:34:29,040
in comparison to others which makes side

1023
00:34:29,040 --> 00:34:30,480
channel analysis significantly more

1024
00:34:30,480 --> 00:34:32,000
difficult

1025
00:34:32,000 --> 00:34:33,760
lattice based schemes generally don't

1026
00:34:33,760 --> 00:34:35,040
suffer in this regard

1027
00:34:35,040 --> 00:34:36,800
even though even the largest and slowest

1028
00:34:36,800 --> 00:34:38,800
of these um freddie kemp

1029
00:34:38,800 --> 00:34:40,879
actually has the the most attack focus

1030
00:34:40,879 --> 00:34:42,960
of all

1031
00:34:42,960 --> 00:34:44,639
and as is generally the case counter

1032
00:34:44,639 --> 00:34:46,159
measures are lacking

1033
00:34:46,159 --> 00:34:48,000
for chems saber is really the only

1034
00:34:48,000 --> 00:34:49,359
candidate that has shown a

1035
00:34:49,359 --> 00:34:51,918
full masking scheme although this was

1036
00:34:51,918 --> 00:34:53,119
first order masking

1037
00:34:53,119 --> 00:34:55,040
um and would not be enough to protect

1038
00:34:55,040 --> 00:34:56,560
against more advanced

1039
00:34:56,560 --> 00:34:59,119
uh power analysis it will be interesting

1040
00:34:59,119 --> 00:35:00,640
to see how this masking scheme scales

1041
00:35:00,640 --> 00:35:02,000
for higher orders

1042
00:35:02,000 --> 00:35:03,839
and for signatures the same is true for

1043
00:35:03,839 --> 00:35:05,119
dilithium

1044
00:35:05,119 --> 00:35:07,920
being the only mask candidates and this

1045
00:35:07,920 --> 00:35:09,359
mastery scheme covers higher order

1046
00:35:09,359 --> 00:35:11,440
masking levels

1047
00:35:11,440 --> 00:35:14,839
um so yeah now we go on to some recent

1048
00:35:14,839 --> 00:35:16,400
highlights all right so i'm going to

1049
00:35:16,400 --> 00:35:16,960
discuss

1050
00:35:16,960 --> 00:35:19,920
just a couple uh recent attack issues

1051
00:35:19,920 --> 00:35:21,359
and some analysis

1052
00:35:21,359 --> 00:35:24,640
just from the past few months um so the

1053
00:35:24,640 --> 00:35:25,760
first thing that i want to highlight

1054
00:35:25,760 --> 00:35:26,640
here is this

1055
00:35:26,640 --> 00:35:29,040
work lwb site information from crypto

1056
00:35:29,040 --> 00:35:31,280
20. um there was a

1057
00:35:31,280 --> 00:35:34,000
talk actually by uh ludicas on this i

1058
00:35:34,000 --> 00:35:35,599
think at the simons institute

1059
00:35:35,599 --> 00:35:37,440
it says when a side channel attack fails

1060
00:35:37,440 --> 00:35:39,440
what can you still do with it right

1061
00:35:39,440 --> 00:35:42,480
um so the point is that for a large

1062
00:35:42,480 --> 00:35:44,079
number of the especially the finalists

1063
00:35:44,079 --> 00:35:45,200
in this third round

1064
00:35:45,200 --> 00:35:46,320
we're looking at lattice schemes the

1065
00:35:46,320 --> 00:35:47,839
canonical attack here is a lattice

1066
00:35:47,839 --> 00:35:49,119
reduction attack

1067
00:35:49,119 --> 00:35:52,400
um this work proposes a new tool

1068
00:35:52,400 --> 00:35:54,240
with uh some kind of like script you can

1069
00:35:54,240 --> 00:35:55,440
run to estimate things

1070
00:35:55,440 --> 00:35:58,480
uh to integrate hints from side channels

1071
00:35:58,480 --> 00:35:59,040
to use

1072
00:35:59,040 --> 00:36:01,040
in the lattice reduction algorithm so

1073
00:36:01,040 --> 00:36:02,880
for example maybe you learn some partial

1074
00:36:02,880 --> 00:36:03,680
information

1075
00:36:03,680 --> 00:36:06,240
you know as on the slide here um about

1076
00:36:06,240 --> 00:36:07,839
some coordinate of the secret key

1077
00:36:07,839 --> 00:36:10,480
um they consider four types of uh of

1078
00:36:10,480 --> 00:36:12,240
hints perfect tense modular hints

1079
00:36:12,240 --> 00:36:14,079
approximate and short vector hints

1080
00:36:14,079 --> 00:36:17,200
um and the idea here uh really want to

1081
00:36:17,200 --> 00:36:18,320
you know have people look at this is

1082
00:36:18,320 --> 00:36:20,400
that these hints can reduce the bkc

1083
00:36:20,400 --> 00:36:21,520
block size

1084
00:36:21,520 --> 00:36:22,880
for your lattice reduction algorithm

1085
00:36:22,880 --> 00:36:25,200
making the attacks easier um

1086
00:36:25,200 --> 00:36:27,599
in terms of impacts in the future that

1087
00:36:27,599 --> 00:36:28,800
this work may have

1088
00:36:28,800 --> 00:36:30,400
um i want to highlight this can affect

1089
00:36:30,400 --> 00:36:32,720
certifications of cryptographic modules

1090
00:36:32,720 --> 00:36:35,200
um especially for certificate processes

1091
00:36:35,200 --> 00:36:36,640
such as common criteria

1092
00:36:36,640 --> 00:36:38,480
perhaps even fips related you know

1093
00:36:38,480 --> 00:36:41,280
material um some certifiers at least

1094
00:36:41,280 --> 00:36:43,359
historically for symmetrical crypto

1095
00:36:43,359 --> 00:36:45,200
require that you know some

1096
00:36:45,200 --> 00:36:47,200
number of remaining key candidates exist

1097
00:36:47,200 --> 00:36:48,880
to the 80 to 100

1098
00:36:48,880 --> 00:36:51,760
after a side channel attack is performed

1099
00:36:51,760 --> 00:36:52,720
and if you can't

1100
00:36:52,720 --> 00:36:54,560
show that as the case for all known side

1101
00:36:54,560 --> 00:36:55,760
channel attacks

1102
00:36:55,760 --> 00:36:58,480
you can't be certified so this work will

1103
00:36:58,480 --> 00:37:00,320
provide you with some mechanism

1104
00:37:00,320 --> 00:37:03,760
at least uh you know a framework for

1105
00:37:03,760 --> 00:37:06,000
a lattice you know kim or even a

1106
00:37:06,000 --> 00:37:07,359
signature scheme

1107
00:37:07,359 --> 00:37:09,040
for analyzing that kind of information

1108
00:37:09,040 --> 00:37:10,480
you can set your cryptographic

1109
00:37:10,480 --> 00:37:11,200
parameters

1110
00:37:11,200 --> 00:37:13,280
with those side channels in mind and

1111
00:37:13,280 --> 00:37:14,320
that's something we're thinking about at

1112
00:37:14,320 --> 00:37:15,359
nist

1113
00:37:15,359 --> 00:37:18,560
a separate issue is the difference

1114
00:37:18,560 --> 00:37:19,440
between

1115
00:37:19,440 --> 00:37:21,160
ntt based multiplication and

1116
00:37:21,160 --> 00:37:23,119
non-entity-based multiplication

1117
00:37:23,119 --> 00:37:25,920
in particular the cost of masking such

1118
00:37:25,920 --> 00:37:27,280
multiplication operations are for

1119
00:37:27,280 --> 00:37:29,440
polynomials

1120
00:37:29,440 --> 00:37:32,240
for lattice kim's here's the example the

1121
00:37:32,240 --> 00:37:33,440
one thing i really want to highlight if

1122
00:37:33,440 --> 00:37:34,800
you take nothing else from this talk

1123
00:37:34,800 --> 00:37:35,359
right

1124
00:37:35,359 --> 00:37:37,040
is that we want to highlight that the

1125
00:37:37,040 --> 00:37:38,400
the uh the

1126
00:37:38,400 --> 00:37:40,640
individual pairing choice between qyburn

1127
00:37:40,640 --> 00:37:42,320
sabre okay this is not like a

1128
00:37:42,320 --> 00:37:44,160
broad scale thing but just between kyber

1129
00:37:44,160 --> 00:37:46,560
and sabre they're so similar

1130
00:37:46,560 --> 00:37:49,680
that it may come down all else equal to

1131
00:37:49,680 --> 00:37:51,839
side channel attacks and masking

1132
00:37:51,839 --> 00:37:52,800
efficiency

1133
00:37:52,800 --> 00:37:55,839
and security um so in particular

1134
00:37:55,839 --> 00:37:57,280
you know there is a masked version of

1135
00:37:57,280 --> 00:37:59,040
saber at first order there's

1136
00:37:59,040 --> 00:38:02,079
not yet a masked version of kyber

1137
00:38:02,079 --> 00:38:03,599
and also i'm going to point out as well

1138
00:38:03,599 --> 00:38:05,119
that there was this recent nice work

1139
00:38:05,119 --> 00:38:06,960
that showed that sabre and intro

1140
00:38:06,960 --> 00:38:09,760
which do not use ntts can actually been

1141
00:38:09,760 --> 00:38:11,520
benefit from kind of embedding the uh

1142
00:38:11,520 --> 00:38:13,599
their algebra in a higher order ring and

1143
00:38:13,599 --> 00:38:13,920
then

1144
00:38:13,920 --> 00:38:15,440
they can perform an entity operation

1145
00:38:15,440 --> 00:38:17,119
this actually gives a performance speed

1146
00:38:17,119 --> 00:38:17,440
up

1147
00:38:17,440 --> 00:38:20,240
in the reference implementation however

1148
00:38:20,240 --> 00:38:23,040
you then have to specifically consider

1149
00:38:23,040 --> 00:38:25,680
at least you know i would suggest uh the

1150
00:38:25,680 --> 00:38:26,079
cost

1151
00:38:26,079 --> 00:38:28,160
of side channels um this is also the

1152
00:38:28,160 --> 00:38:29,680
case for signatures i won't talk too

1153
00:38:29,680 --> 00:38:31,760
much about this just for time's sake

1154
00:38:31,760 --> 00:38:33,440
i'll just move on and say specifically

1155
00:38:33,440 --> 00:38:34,960
that for falcon

1156
00:38:34,960 --> 00:38:37,119
masking floating point arithmetic is a

1157
00:38:37,119 --> 00:38:38,400
major open problem

1158
00:38:38,400 --> 00:38:39,920
um and finally in terms of recent

1159
00:38:39,920 --> 00:38:41,760
highlights uh just considering active

1160
00:38:41,760 --> 00:38:43,200
side channels there's this work

1161
00:38:43,200 --> 00:38:46,240
quantum hammer uh against luvio at ccs

1162
00:38:46,240 --> 00:38:47,760
2020 this didn't have

1163
00:38:47,760 --> 00:38:49,760
a major impact on our process because

1164
00:38:49,760 --> 00:38:51,760
there was uh kind of a concurrent

1165
00:38:51,760 --> 00:38:53,920
computational attack against celluv but

1166
00:38:53,920 --> 00:38:54,800
you might ask

1167
00:38:54,800 --> 00:38:56,720
whether uh such active side chill

1168
00:38:56,720 --> 00:38:58,400
attacks are more broadly applicable

1169
00:38:58,400 --> 00:39:00,320
against the nist pkc third round

1170
00:39:00,320 --> 00:39:02,240
finalists um and i will point out

1171
00:39:02,240 --> 00:39:03,520
there's an upcoming work uh

1172
00:39:03,520 --> 00:39:06,000
joint team with uh nist pkc members

1173
00:39:06,000 --> 00:39:07,599
along with the university of arkansas

1174
00:39:07,599 --> 00:39:09,119
that is going to attempt to do this

1175
00:39:09,119 --> 00:39:11,440
against lwe chems

1176
00:39:11,440 --> 00:39:12,720
um and finally we're just going to

1177
00:39:12,720 --> 00:39:13,680
conclude with some takeaways for the

1178
00:39:13,680 --> 00:39:15,680
future

1179
00:39:15,680 --> 00:39:18,560
yeah i think one thing we can say for

1180
00:39:18,560 --> 00:39:20,240
certain um in the future is that

1181
00:39:20,240 --> 00:39:21,920
implementation complexity of these

1182
00:39:21,920 --> 00:39:23,920
standards will significantly increase

1183
00:39:23,920 --> 00:39:26,800
compared to rsa and elliptic curves this

1184
00:39:26,800 --> 00:39:28,240
will in turn make simple

1185
00:39:28,240 --> 00:39:30,880
implementation bugs more likely near the

1186
00:39:30,880 --> 00:39:31,839
beginning of the project

1187
00:39:31,839 --> 00:39:33,119
nist asks for the focus of

1188
00:39:33,119 --> 00:39:35,200
implementations to be about to be around

1189
00:39:35,200 --> 00:39:36,240
the arm cortex and

1190
00:39:36,240 --> 00:39:38,040
for microcontroller and the xilinx

1191
00:39:38,040 --> 00:39:40,000
artix7fpga

1192
00:39:40,000 --> 00:39:42,079
just to make comparisons uh easier

1193
00:39:42,079 --> 00:39:43,920
however for side channels

1194
00:39:43,920 --> 00:39:45,280
all these attacks or counter measures

1195
00:39:45,280 --> 00:39:46,880
we've seen and these devices be as

1196
00:39:46,880 --> 00:39:48,720
effective on other platforms

1197
00:39:48,720 --> 00:39:50,560
will there be more attack vectors and

1198
00:39:50,560 --> 00:39:52,320
will we need more countermeasures this

1199
00:39:52,320 --> 00:39:52,560
is

1200
00:39:52,560 --> 00:39:55,839
an open question this complexity is also

1201
00:39:55,839 --> 00:39:56,560
highlighted

1202
00:39:56,560 --> 00:39:59,760
heightened by um the increase in these

1203
00:39:59,760 --> 00:40:01,599
fragile or sensitive operations that

1204
00:40:01,599 --> 00:40:02,160
have led

1205
00:40:02,160 --> 00:40:04,960
to a large proportion of these attacks

1206
00:40:04,960 --> 00:40:06,880
post quantum also makes it more apparent

1207
00:40:06,880 --> 00:40:08,400
how even simple

1208
00:40:08,400 --> 00:40:10,319
isochronous or constant random time

1209
00:40:10,319 --> 00:40:12,079
complexity increases

1210
00:40:12,079 --> 00:40:14,240
this is um this can be seen in a recent

1211
00:40:14,240 --> 00:40:16,400
timing attack on random oracles

1212
00:40:16,400 --> 00:40:19,359
um in photochem but of course some of

1213
00:40:19,359 --> 00:40:20,880
these attacks will only be relevant if

1214
00:40:20,880 --> 00:40:22,319
they fall into your use case

1215
00:40:22,319 --> 00:40:25,040
so be cautious of this tailor the real

1216
00:40:25,040 --> 00:40:26,720
the relevance

1217
00:40:26,720 --> 00:40:28,720
of these attacks for your use case and

1218
00:40:28,720 --> 00:40:31,920
obviously use secure coding practices

1219
00:40:31,920 --> 00:40:34,880
and to conclude our main objective was

1220
00:40:34,880 --> 00:40:36,560
to really motivate more attacks and

1221
00:40:36,560 --> 00:40:38,400
analysis of these candidates

1222
00:40:38,400 --> 00:40:41,119
this decision may be decided by attacks

1223
00:40:41,119 --> 00:40:43,520
or the performances of countermeasures

1224
00:40:43,520 --> 00:40:44,800
if your business is considering

1225
00:40:44,800 --> 00:40:46,400
transitioning to post-quantum it's

1226
00:40:46,400 --> 00:40:48,160
definitely prudent to start this process

1227
00:40:48,160 --> 00:40:50,160
now considering the difficulties it

1228
00:40:50,160 --> 00:40:52,160
brings the complexities of

1229
00:40:52,160 --> 00:40:53,839
the and the new attack vectors they may

1230
00:40:53,839 --> 00:40:55,440
include

1231
00:40:55,440 --> 00:40:58,000
uh thank you for listening we're happy

1232
00:40:58,000 --> 00:40:58,640
to take

1233
00:40:58,640 --> 00:41:02,079
any questions now and offline via email

1234
00:41:02,079 --> 00:41:04,800
right so there are a few questions uh on

1235
00:41:04,800 --> 00:41:05,440
the chat

1236
00:41:05,440 --> 00:41:08,640
so um the first one

1237
00:41:08,640 --> 00:41:12,400
is by daniel bernstein asking

1238
00:41:12,400 --> 00:41:14,319
i think it's more of a complaint or

1239
00:41:14,319 --> 00:41:16,400
critique of like equating attacks on

1240
00:41:16,400 --> 00:41:19,040
implementations with attacks on schemes

1241
00:41:19,040 --> 00:41:20,640
because it assumes that the reference

1242
00:41:20,640 --> 00:41:22,240
implementations were meant to be side

1243
00:41:22,240 --> 00:41:25,118
channels secure

1244
00:41:25,680 --> 00:41:28,480
i'm trying to find the the question of

1245
00:41:28,480 --> 00:41:29,359
the chat uh

1246
00:41:29,359 --> 00:41:30,720
james you can answer it while i look for

1247
00:41:30,720 --> 00:41:32,480
it if you want

1248
00:41:32,480 --> 00:41:34,240
uh yeah i'm trying to find this isn't

1249
00:41:34,240 --> 00:41:36,319
the post quantum crypto chat or indeed

1250
00:41:36,319 --> 00:41:38,640
yeah so let me read it out verbatim in

1251
00:41:38,640 --> 00:41:40,160
all seriousness i'm bothered by the way

1252
00:41:40,160 --> 00:41:41,920
the overview slide a moment ago it

1253
00:41:41,920 --> 00:41:43,760
created attacks against software x with

1254
00:41:43,760 --> 00:41:44,880
against against

1255
00:41:44,880 --> 00:41:46,880
primitive y of course follow chem could

1256
00:41:46,880 --> 00:41:49,839
be implemented better

1257
00:41:50,720 --> 00:41:53,839
right yeah

1258
00:41:55,040 --> 00:41:59,279
yeah right um go ahead okay

1259
00:41:59,359 --> 00:42:01,680
yeah i think that's a fair point um

1260
00:42:01,680 --> 00:42:03,359
they've obviously not been designed to

1261
00:42:03,359 --> 00:42:04,800
withstand certain attacks but

1262
00:42:04,800 --> 00:42:06,640
also a lot of these attacks we've found

1263
00:42:06,640 --> 00:42:08,319
are quite um

1264
00:42:08,319 --> 00:42:11,280
novel and sort of um they weren't

1265
00:42:11,280 --> 00:42:12,640
expected such as the

1266
00:42:12,640 --> 00:42:14,400
the timing attack on the on the random

1267
00:42:14,400 --> 00:42:16,000
oracle i think not many people are

1268
00:42:16,000 --> 00:42:18,000
expecting that so i think

1269
00:42:18,000 --> 00:42:20,640
it's yeah it's also like it's an easy

1270
00:42:20,640 --> 00:42:21,760
target but also

1271
00:42:21,760 --> 00:42:25,440
um i think some new vulnerabilities can

1272
00:42:25,440 --> 00:42:28,240
easily be found

1273
00:42:28,800 --> 00:42:30,960
then let me just do one more question

1274
00:42:30,960 --> 00:42:32,240
before we move on

1275
00:42:32,240 --> 00:42:35,200
uh so dmitry asks whether fault attacks

1276
00:42:35,200 --> 00:42:35,839
uh

1277
00:42:35,839 --> 00:42:37,760
the existence of a fault attack signals

1278
00:42:37,760 --> 00:42:39,200
anything uh

1279
00:42:39,200 --> 00:42:41,040
since he expects while attacks are so

1280
00:42:41,040 --> 00:42:42,480
powerful or they apply to almost

1281
00:42:42,480 --> 00:42:43,680
anything

1282
00:42:43,680 --> 00:42:45,200
right let me let me actually answer this

1283
00:42:45,200 --> 00:42:46,960
one here uh just to kind of wrap up

1284
00:42:46,960 --> 00:42:50,000
um so in terms of side channel attacks

1285
00:42:50,000 --> 00:42:51,599
um this has been kind of an issue that's

1286
00:42:51,599 --> 00:42:52,560
come up here and there and we've

1287
00:42:52,560 --> 00:42:54,480
highlighted it before it missed

1288
00:42:54,480 --> 00:42:57,119
um now if there's a category of attack

1289
00:42:57,119 --> 00:42:58,160
that is only

1290
00:42:58,160 --> 00:43:00,480
you know defensible in some completely

1291
00:43:00,480 --> 00:43:01,839
generic manner like you know

1292
00:43:01,839 --> 00:43:03,839
make sure your implementation's correct

1293
00:43:03,839 --> 00:43:05,839
you know add noise to your hardware

1294
00:43:05,839 --> 00:43:07,359
you know vary your clock speed that kind

1295
00:43:07,359 --> 00:43:09,280
of thing well that's that's really

1296
00:43:09,280 --> 00:43:12,720
outside the preview of nist however

1297
00:43:12,960 --> 00:43:16,079
it could still be the case that there

1298
00:43:16,079 --> 00:43:16,480
are

1299
00:43:16,480 --> 00:43:19,119
categories of side channel attacks that

1300
00:43:19,119 --> 00:43:21,440
exploit a particular property of the

1301
00:43:21,440 --> 00:43:22,720
algorithm

1302
00:43:22,720 --> 00:43:25,440
such that implementations of algorithm

1303
00:43:25,440 --> 00:43:26,160
x1

1304
00:43:26,160 --> 00:43:29,920
and implementations of algorithm x2 um

1305
00:43:29,920 --> 00:43:31,839
you you end up in a situation where uh

1306
00:43:31,839 --> 00:43:32,960
the implementation is

1307
00:43:32,960 --> 00:43:35,280
is it's more convenient to have side

1308
00:43:35,280 --> 00:43:36,400
channel resistant friendly

1309
00:43:36,400 --> 00:43:37,599
implementations

1310
00:43:37,599 --> 00:43:39,280
of the first rather than the latter

1311
00:43:39,280 --> 00:43:41,200
that's the most interesting thing i mean

1312
00:43:41,200 --> 00:43:42,480
of course research is going to continue

1313
00:43:42,480 --> 00:43:44,240
inside chill attacks and defenses

1314
00:43:44,240 --> 00:43:46,960
for you know days and years and decades

1315
00:43:46,960 --> 00:43:47,520
um

1316
00:43:47,520 --> 00:43:49,200
but that's particularly probably the

1317
00:43:49,200 --> 00:43:50,720
most important stuff

1318
00:43:50,720 --> 00:43:52,480
so that's what we wanted to highlight i

1319
00:43:52,480 --> 00:43:54,000
think from this is that if there is a

1320
00:43:54,000 --> 00:43:55,280
particular type of attack

1321
00:43:55,280 --> 00:43:57,359
that distinguishes between candidates

1322
00:43:57,359 --> 00:43:58,960
that are very similar

1323
00:43:58,960 --> 00:44:01,280
um that would be useful during this next

1324
00:44:01,280 --> 00:44:02,319
year uh

1325
00:44:02,319 --> 00:44:04,000
to provide you know that information

1326
00:44:04,000 --> 00:44:06,319
that research knowledge to nist

1327
00:44:06,319 --> 00:44:09,359
that could factor into our decisions all

1328
00:44:09,359 --> 00:44:09,760
right

1329
00:44:09,760 --> 00:44:13,520
so um at this point uh let's uh thank uh

1330
00:44:13,520 --> 00:44:16,160
daniel and james using virtual applause

1331
00:44:16,160 --> 00:44:17,200
of your choosing

1332
00:44:17,200 --> 00:44:19,359
and let's move on to the next talk and i

1333
00:44:19,359 --> 00:44:21,040
actually don't know who's giving the

1334
00:44:21,040 --> 00:44:22,480
next talk of the

1335
00:44:22,480 --> 00:44:25,599
authors me here hannah felix that would

1336
00:44:25,599 --> 00:44:26,560
be me hannah

1337
00:44:26,560 --> 00:44:29,359
hi hi hannah okay so hannah is going to

1338
00:44:29,359 --> 00:44:30,720
talk to us

1339
00:44:30,720 --> 00:44:32,880
about how to instantiate your random

1340
00:44:32,880 --> 00:44:34,000
oracles

1341
00:44:34,000 --> 00:44:36,240
securely or at least how to not do it

1342
00:44:36,240 --> 00:44:39,359
insecurely so thank you

1343
00:44:44,880 --> 00:44:51,839
all right

1344
00:44:54,880 --> 00:44:57,200
hi my name is hannah davis and i'm here

1345
00:44:57,200 --> 00:44:58,960
today to talk about my joint work with

1346
00:44:58,960 --> 00:45:01,440
me here bellari and felix gunther

1347
00:45:01,440 --> 00:45:04,480
on separating your domains miss pqc

1348
00:45:04,480 --> 00:45:06,480
chems and pitfalls in implementing

1349
00:45:06,480 --> 00:45:09,280
random oracles

1350
00:45:11,520 --> 00:45:13,440
in the face of growing fears about the

1351
00:45:13,440 --> 00:45:14,960
advent of quantum computing

1352
00:45:14,960 --> 00:45:17,520
nist in 2017 put forward a call for post

1353
00:45:17,520 --> 00:45:18,000
quantum

1354
00:45:18,000 --> 00:45:20,240
secure key encapsulation mechanisms or

1355
00:45:20,240 --> 00:45:21,680
chems

1356
00:45:21,680 --> 00:45:24,319
um a pem is a cryptographic protocol

1357
00:45:24,319 --> 00:45:26,400
used to establish a secret session key

1358
00:45:26,400 --> 00:45:27,599
between two parties

1359
00:45:27,599 --> 00:45:30,240
and this key will be used uh for with

1360
00:45:30,240 --> 00:45:32,640
some symmetric key crypto like aes

1361
00:45:32,640 --> 00:45:36,079
so it should be completely hidden

1362
00:45:36,079 --> 00:45:37,599
one or more of these chems will be the

1363
00:45:37,599 --> 00:45:39,280
basis of the next public key

1364
00:45:39,280 --> 00:45:40,720
encryption standards they've been the

1365
00:45:40,720 --> 00:45:42,560
subject of a lot of attention

1366
00:45:42,560 --> 00:45:44,240
and analysis by the cryptographic

1367
00:45:44,240 --> 00:45:46,079
community as we just heard

1368
00:45:46,079 --> 00:45:47,920
the process is now in round three but

1369
00:45:47,920 --> 00:45:49,440
even the round one candidates were

1370
00:45:49,440 --> 00:45:52,480
heavily studied for over a year

1371
00:45:52,480 --> 00:45:55,359
in our own study on one of on the nist

1372
00:45:55,359 --> 00:45:56,720
pqc chems

1373
00:45:56,720 --> 00:45:59,839
we noticed something strange about

1374
00:45:59,839 --> 00:46:03,359
a reference implementation of dags

1375
00:46:03,359 --> 00:46:05,839
we were looking at the ciphertext and

1376
00:46:05,839 --> 00:46:06,960
session key

1377
00:46:06,960 --> 00:46:08,960
and we noticed that they looked

1378
00:46:08,960 --> 00:46:10,800
surprisingly similar

1379
00:46:10,800 --> 00:46:13,280
as you can see with the highlighted bits

1380
00:46:13,280 --> 00:46:15,680
there's a lot of repeated information

1381
00:46:15,680 --> 00:46:17,839
and indeed this chem is actually leaking

1382
00:46:17,839 --> 00:46:19,200
over half of its session

1383
00:46:19,200 --> 00:46:23,118
key directly through the ciphertext

1384
00:46:27,200 --> 00:46:29,520
worse than that this wasn't just one

1385
00:46:29,520 --> 00:46:30,800
fluke in one

1386
00:46:30,800 --> 00:46:33,839
cam uh we found two other

1387
00:46:33,839 --> 00:46:35,839
chems that had vulnerabilities that were

1388
00:46:35,839 --> 00:46:37,680
extremely similar to this

1389
00:46:37,680 --> 00:46:39,760
and all of them were based on the same

1390
00:46:39,760 --> 00:46:41,440
problem with implementing

1391
00:46:41,440 --> 00:46:45,920
hash functions um the fact that

1392
00:46:45,920 --> 00:46:47,760
none of these are round three cams

1393
00:46:47,760 --> 00:46:49,440
they're all round one cams and none of

1394
00:46:49,440 --> 00:46:51,280
them made it to round two without being

1395
00:46:51,280 --> 00:46:52,720
updated

1396
00:46:52,720 --> 00:46:55,920
but uh none of these attacks were caught

1397
00:46:55,920 --> 00:46:57,839
during the entire year-long round one

1398
00:46:57,839 --> 00:46:59,200
scrutinization process

1399
00:46:59,200 --> 00:47:01,280
and we think that reflects a systematic

1400
00:47:01,280 --> 00:47:02,319
oversight

1401
00:47:02,319 --> 00:47:03,920
in the way that we're studying these

1402
00:47:03,920 --> 00:47:06,640
chems um we're not looking at the way

1403
00:47:06,640 --> 00:47:08,480
that they implement hash functions

1404
00:47:08,480 --> 00:47:12,319
and that's letting these attacks slip by

1405
00:47:13,920 --> 00:47:17,520
um so the reason that these attacks are

1406
00:47:17,520 --> 00:47:18,240
arising

1407
00:47:18,240 --> 00:47:21,200
is that many of the nist chems call for

1408
00:47:21,200 --> 00:47:22,720
multiple hash functions say

1409
00:47:22,720 --> 00:47:25,760
h1 h2 and h3 in practice it's

1410
00:47:25,760 --> 00:47:28,720
much easier for developers to use just

1411
00:47:28,720 --> 00:47:29,760
one hash function

1412
00:47:29,760 --> 00:47:32,160
everywhere this seems like it should be

1413
00:47:32,160 --> 00:47:32,960
fine

1414
00:47:32,960 --> 00:47:34,800
but it's actually a very common and

1415
00:47:34,800 --> 00:47:37,119
serious mistake

1416
00:47:37,119 --> 00:47:39,599
the security proofs for almost all of

1417
00:47:39,599 --> 00:47:40,640
the nist cams

1418
00:47:40,640 --> 00:47:44,240
assume that h1 h2 and h3 are distinct

1419
00:47:44,240 --> 00:47:45,359
hash functions

1420
00:47:45,359 --> 00:47:46,880
with outputs that are both random

1421
00:47:46,880 --> 00:47:50,079
looking and independent of one another

1422
00:47:50,079 --> 00:47:51,920
these assumptions are normal and we can

1423
00:47:51,920 --> 00:47:53,920
satisfy the random looking requirement

1424
00:47:53,920 --> 00:47:55,760
easily by using a cryptographic hash

1425
00:47:55,760 --> 00:47:57,760
function like sha-3

1426
00:47:57,760 --> 00:48:00,960
but when we use sha-3 one hash function

1427
00:48:00,960 --> 00:48:02,079
to implement

1428
00:48:02,079 --> 00:48:05,119
um three hash functions like h1 h2 and

1429
00:48:05,119 --> 00:48:08,640
h3 this clearly isn't independent

1430
00:48:08,640 --> 00:48:11,280
um the outputs are correlated and this

1431
00:48:11,280 --> 00:48:12,240
is what causes

1432
00:48:12,240 --> 00:48:15,520
attacks like the one on dx um in dags

1433
00:48:15,520 --> 00:48:17,839
the ciphertext and the session key were

1434
00:48:17,839 --> 00:48:19,680
supposed to be the outputs of two

1435
00:48:19,680 --> 00:48:21,440
distinct hash functions

1436
00:48:21,440 --> 00:48:24,319
whose outputs would be independent and

1437
00:48:24,319 --> 00:48:25,680
uncorrelated

1438
00:48:25,680 --> 00:48:28,160
instead the implementation used the same

1439
00:48:28,160 --> 00:48:28,960
hash function

1440
00:48:28,960 --> 00:48:32,079
in both places so the outputs were

1441
00:48:32,079 --> 00:48:34,240
highly related and information was

1442
00:48:34,240 --> 00:48:36,559
leaked

1443
00:48:36,559 --> 00:48:38,640
this surfaces a problem that we call

1444
00:48:38,640 --> 00:48:39,920
oracle cloning

1445
00:48:39,920 --> 00:48:42,400
we'd still like to use one hash function

1446
00:48:42,400 --> 00:48:43,119
everywhere

1447
00:48:43,119 --> 00:48:45,119
but since we can't substitute a hash

1448
00:48:45,119 --> 00:48:46,640
function directly

1449
00:48:46,640 --> 00:48:49,920
we need some more careful way to build

1450
00:48:49,920 --> 00:48:52,559
multiple hash functions that truly are

1451
00:48:52,559 --> 00:48:53,280
or at least

1452
00:48:53,280 --> 00:48:56,400
look independent

1453
00:48:58,319 --> 00:49:01,520
an immediate reaction to oracle cloning

1454
00:49:01,520 --> 00:49:04,800
is well we already know how to do that

1455
00:49:04,800 --> 00:49:07,119
um and indeed there are methods that

1456
00:49:07,119 --> 00:49:08,240
work well the most

1457
00:49:08,240 --> 00:49:10,720
well-known one is domain separation

1458
00:49:10,720 --> 00:49:11,839
where we assign

1459
00:49:11,839 --> 00:49:14,400
each hash function that we want to build

1460
00:49:14,400 --> 00:49:16,720
a unique label and then we use that

1461
00:49:16,720 --> 00:49:17,520
label

1462
00:49:17,520 --> 00:49:20,000
to prefix all of the inputs to the hash

1463
00:49:20,000 --> 00:49:20,720
function

1464
00:49:20,720 --> 00:49:22,880
this is simple it's efficient and it's

1465
00:49:22,880 --> 00:49:24,480
effective

1466
00:49:24,480 --> 00:49:26,079
but even though we theoretically know

1467
00:49:26,079 --> 00:49:28,079
how to do oracle cloning

1468
00:49:28,079 --> 00:49:30,079
in practice we still frequently

1469
00:49:30,079 --> 00:49:32,319
encounter both schemes that don't use

1470
00:49:32,319 --> 00:49:33,920
domain separation

1471
00:49:33,920 --> 00:49:36,640
and as we saw attacks that are arising

1472
00:49:36,640 --> 00:49:39,119
from poor oracle cloning choices

1473
00:49:39,119 --> 00:49:41,119
furthermore these attacks aren't being

1474
00:49:41,119 --> 00:49:43,440
caught during the evaluation process

1475
00:49:43,440 --> 00:49:45,760
because they violate this assumption in

1476
00:49:45,760 --> 00:49:47,040
our security model

1477
00:49:47,040 --> 00:49:49,440
that our hash functions are independent

1478
00:49:49,440 --> 00:49:50,640
of one another

1479
00:49:50,640 --> 00:49:52,800
all this says to us is that there needs

1480
00:49:52,800 --> 00:49:54,480
to be a bit more attention

1481
00:49:54,480 --> 00:49:58,400
paid to oracle cloning at this point we

1482
00:49:58,400 --> 00:50:00,319
have a number of questions about oracle

1483
00:50:00,319 --> 00:50:01,040
cloning

1484
00:50:01,040 --> 00:50:03,599
we know domain separation works but we

1485
00:50:03,599 --> 00:50:05,280
don't know what other methods are being

1486
00:50:05,280 --> 00:50:07,200
used in practice or how well those

1487
00:50:07,200 --> 00:50:08,240
methods work

1488
00:50:08,240 --> 00:50:10,800
we don't even have a rigorous definition

1489
00:50:10,800 --> 00:50:12,160
of what it means for an

1490
00:50:12,160 --> 00:50:14,640
oracle cloning method to work we'd like

1491
00:50:14,640 --> 00:50:16,880
to provide a toolbox of good methods

1492
00:50:16,880 --> 00:50:18,319
that we can be confident in

1493
00:50:18,319 --> 00:50:21,040
for use in any scheme and we'd like to

1494
00:50:21,040 --> 00:50:22,160
prove that schemes

1495
00:50:22,160 --> 00:50:25,280
using good methods are secure even after

1496
00:50:25,280 --> 00:50:28,720
the oracle cloning step takes place

1497
00:50:28,720 --> 00:50:30,800
this would extend our evaluation process

1498
00:50:30,800 --> 00:50:32,800
to cover oracle cloning and stop these

1499
00:50:32,800 --> 00:50:35,280
attacks from being missed

1500
00:50:35,280 --> 00:50:37,200
our work attempts to achieve this goal

1501
00:50:37,200 --> 00:50:40,480
in two steps

1502
00:50:40,480 --> 00:50:42,960
the first step is a catalog of the nist

1503
00:50:42,960 --> 00:50:43,680
cams

1504
00:50:43,680 --> 00:50:45,280
where we looked through both their

1505
00:50:45,280 --> 00:50:46,880
specifications and their

1506
00:50:46,880 --> 00:50:49,839
reference implementations and we

1507
00:50:49,839 --> 00:50:51,680
classified them into three groups

1508
00:50:51,680 --> 00:50:53,920
the schemes that we attacked the schemes

1509
00:50:53,920 --> 00:50:55,839
that use good

1510
00:50:55,839 --> 00:50:58,160
secure oracle cloning methods and an

1511
00:50:58,160 --> 00:51:00,160
in-between group that we call brittle

1512
00:51:00,160 --> 00:51:02,558
schemes

1513
00:51:03,839 --> 00:51:06,000
from this classification we extracted a

1514
00:51:06,000 --> 00:51:08,319
list of oracle cloning methods

1515
00:51:08,319 --> 00:51:11,119
that appear in practice in the second

1516
00:51:11,119 --> 00:51:11,760
part

1517
00:51:11,760 --> 00:51:13,920
of our paper we developed a theory of

1518
00:51:13,920 --> 00:51:16,000
what a secure oracle cloning method

1519
00:51:16,000 --> 00:51:16,559
should be

1520
00:51:16,559 --> 00:51:19,119
and we use this definition to validate

1521
00:51:19,119 --> 00:51:21,680
the oracle cloning methods in our list

1522
00:51:21,680 --> 00:51:24,079
by doing this we can prove security for

1523
00:51:24,079 --> 00:51:26,000
all of the nist pqc chems

1524
00:51:26,000 --> 00:51:28,800
except the ones that we attacked all of

1525
00:51:28,800 --> 00:51:31,839
the ones in the latter two groups

1526
00:51:31,839 --> 00:51:35,119
and we can build up a library of proven

1527
00:51:35,119 --> 00:51:36,880
safe oracle cloning methods that will

1528
00:51:36,880 --> 00:51:38,559
work for any scheme not just

1529
00:51:38,559 --> 00:51:40,960
chems any crypto protocol it may need to

1530
00:51:40,960 --> 00:51:43,040
use multiple hash functions

1531
00:51:43,040 --> 00:51:46,880
where we would like to use only one

1532
00:51:47,280 --> 00:51:50,079
we'll start by going through our

1533
00:51:50,079 --> 00:51:51,280
classification

1534
00:51:51,280 --> 00:51:53,280
the first group are those we attacked

1535
00:51:53,280 --> 00:51:54,559
bags big quake

1536
00:51:54,559 --> 00:51:57,200
and round two um i want to reiterate

1537
00:51:57,200 --> 00:51:58,160
once more

1538
00:51:58,160 --> 00:52:00,079
these aren't round three schemes they

1539
00:52:00,079 --> 00:52:02,559
were eliminated after round one or

1540
00:52:02,559 --> 00:52:05,280
updated after round one so none of them

1541
00:52:05,280 --> 00:52:07,680
are candidates for standardization

1542
00:52:07,680 --> 00:52:10,800
but all of the attacks that weren't

1543
00:52:10,800 --> 00:52:12,640
picked up during the process

1544
00:52:12,640 --> 00:52:14,800
are extremely fast the latter two

1545
00:52:14,800 --> 00:52:17,119
achieve full key recovery

1546
00:52:17,119 --> 00:52:18,880
and they go much further than breaking

1547
00:52:18,880 --> 00:52:20,640
the stated goal of

1548
00:52:20,640 --> 00:52:24,960
quantum indcca security

1549
00:52:26,000 --> 00:52:27,920
and furthermore all of these attacks are

1550
00:52:27,920 --> 00:52:30,400
easy to fix just by using a good oracle

1551
00:52:30,400 --> 00:52:31,440
cloning method

1552
00:52:31,440 --> 00:52:34,880
and that's what we want to provide

1553
00:52:38,400 --> 00:52:41,119
our second group of schemes are those

1554
00:52:41,119 --> 00:52:42,720
that use good oracle cloning

1555
00:52:42,720 --> 00:52:43,920
methods in their reference

1556
00:52:43,920 --> 00:52:45,680
implementations and we can prove their

1557
00:52:45,680 --> 00:52:46,480
security

1558
00:52:46,480 --> 00:52:47,920
we call them brittle though because

1559
00:52:47,920 --> 00:52:50,160
their specifications give ambiguous or

1560
00:52:50,160 --> 00:52:52,319
flawed oracle cloning methods

1561
00:52:52,319 --> 00:52:54,400
whichever algorithm becomes standardized

1562
00:52:54,400 --> 00:52:55,839
will likely be implemented

1563
00:52:55,839 --> 00:52:57,680
many times in various cryptographic

1564
00:52:57,680 --> 00:52:59,680
libraries sometimes by developers with

1565
00:52:59,680 --> 00:53:02,079
very little cryptographic experience

1566
00:53:02,079 --> 00:53:04,160
when the specification is unclear on

1567
00:53:04,160 --> 00:53:05,359
oracle cloning

1568
00:53:05,359 --> 00:53:07,839
we fear that such future implementations

1569
00:53:07,839 --> 00:53:10,480
may perform oracle cloning incorrectly

1570
00:53:10,480 --> 00:53:12,720
to improve clarity and prevent bugs in

1571
00:53:12,720 --> 00:53:14,079
future implementations

1572
00:53:14,079 --> 00:53:16,079
we recommend that these schemes update

1573
00:53:16,079 --> 00:53:18,000
their specifications to reflect their

1574
00:53:18,000 --> 00:53:20,000
own reference implementations

1575
00:53:20,000 --> 00:53:23,520
oracle cloning methods our last group of

1576
00:53:23,520 --> 00:53:24,319
schemes

1577
00:53:24,319 --> 00:53:26,000
are those that did well with regard to

1578
00:53:26,000 --> 00:53:28,000
oracle cloning i highlight the need for

1579
00:53:28,000 --> 00:53:29,839
good oracle cloning and discuss

1580
00:53:29,839 --> 00:53:31,920
in their specifications how developers

1581
00:53:31,920 --> 00:53:33,119
can accomplish it

1582
00:53:33,119 --> 00:53:35,119
from these submissions we identify three

1583
00:53:35,119 --> 00:53:36,960
good oracle cloning techniques and those

1584
00:53:36,960 --> 00:53:37,440
will

1585
00:53:37,440 --> 00:53:41,280
form our toolbox the first method in our

1586
00:53:41,280 --> 00:53:42,000
catalog

1587
00:53:42,000 --> 00:53:44,319
is output splitting output splitting

1588
00:53:44,319 --> 00:53:46,400
works by partitioning the output

1589
00:53:46,400 --> 00:53:48,240
of a hash function h into shorter

1590
00:53:48,240 --> 00:53:50,559
segments then each segment becomes the

1591
00:53:50,559 --> 00:53:52,319
output of one of the constructed hash

1592
00:53:52,319 --> 00:53:53,200
functions

1593
00:53:53,200 --> 00:53:55,440
to use this method the constructed hash

1594
00:53:55,440 --> 00:53:57,920
functions must have fixed output

1595
00:53:57,920 --> 00:54:01,599
in our example 32 bytes

1596
00:54:01,760 --> 00:54:03,359
we've already discussed the second

1597
00:54:03,359 --> 00:54:05,520
method in our toolbox prefixing

1598
00:54:05,520 --> 00:54:08,079
or classical domain separation this

1599
00:54:08,079 --> 00:54:10,000
works well in almost all situations

1600
00:54:10,000 --> 00:54:13,359
we highly recommend it the final method

1601
00:54:13,359 --> 00:54:15,920
is the identity method or just using the

1602
00:54:15,920 --> 00:54:16,880
same hash function

1603
00:54:16,880 --> 00:54:19,119
in all places it may seem odd to include

1604
00:54:19,119 --> 00:54:20,240
this in our toolbox

1605
00:54:20,240 --> 00:54:22,400
since this is the exact method we argued

1606
00:54:22,400 --> 00:54:24,160
earlier was insecure

1607
00:54:24,160 --> 00:54:27,040
we present it here because identity can

1608
00:54:27,040 --> 00:54:28,800
be used safely

1609
00:54:28,800 --> 00:54:31,200
if the constructed hash functions will

1610
00:54:31,200 --> 00:54:32,319
never

1611
00:54:32,319 --> 00:54:35,040
be called on the same input the most

1612
00:54:35,040 --> 00:54:36,079
common way to

1613
00:54:36,079 --> 00:54:38,240
ensure this is by restricting the

1614
00:54:38,240 --> 00:54:39,839
lengths of inputs to each of the

1615
00:54:39,839 --> 00:54:41,440
constructed hash functions

1616
00:54:41,440 --> 00:54:43,200
this is one to be careful with and it's

1617
00:54:43,200 --> 00:54:45,440
not one we recommend but it is used

1618
00:54:45,440 --> 00:54:49,280
appropriately by some of the nist chems

1619
00:54:49,280 --> 00:54:50,799
when we say these are good oracle

1620
00:54:50,799 --> 00:54:52,799
cloning methods what we really mean is

1621
00:54:52,799 --> 00:54:53,520
that they're read

1622
00:54:53,520 --> 00:54:56,160
only indifferentiable this is a security

1623
00:54:56,160 --> 00:54:58,000
definition that captures the ability of

1624
00:54:58,000 --> 00:54:59,839
the oracle cloning method to maintain

1625
00:54:59,839 --> 00:55:02,079
the security of a scheme

1626
00:55:02,079 --> 00:55:04,079
if an oracle cloning method is read only

1627
00:55:04,079 --> 00:55:05,280
indifferentiable

1628
00:55:05,280 --> 00:55:07,440
then the construction the constructed

1629
00:55:07,440 --> 00:55:09,520
hash functions can be used

1630
00:55:09,520 --> 00:55:12,640
anywhere that truly independent

1631
00:55:12,640 --> 00:55:15,920
hash functions could be used we use our

1632
00:55:15,920 --> 00:55:16,799
own definition

1633
00:55:16,799 --> 00:55:18,960
rather than the classical definition of

1634
00:55:18,960 --> 00:55:20,319
indifferentiability

1635
00:55:20,319 --> 00:55:23,359
in order to provide in order to apply

1636
00:55:23,359 --> 00:55:25,440
to a wider range of applications

1637
00:55:25,440 --> 00:55:27,520
including multi-stage games

1638
00:55:27,520 --> 00:55:31,040
i know one minute so

1639
00:55:31,040 --> 00:55:33,680
last slide the takeaway here is that the

1640
00:55:33,680 --> 00:55:34,559
main separation

1641
00:55:34,559 --> 00:55:36,319
is easy to get right it can be

1642
00:55:36,319 --> 00:55:38,640
catastrophic to get wrong

1643
00:55:38,640 --> 00:55:41,680
um but it's easy to fix

1644
00:55:41,680 --> 00:55:44,000
uh all we have to do is use a good

1645
00:55:44,000 --> 00:55:45,440
oracle cloning method

1646
00:55:45,440 --> 00:55:48,240
uh from our toolbox make it part of your

1647
00:55:48,240 --> 00:55:49,520
specification

1648
00:55:49,520 --> 00:55:51,200
if you don't see an oracle cloning

1649
00:55:51,200 --> 00:55:53,760
method use one from the toolbox that is

1650
00:55:53,760 --> 00:55:56,799
appropriate for your hash function usage

1651
00:55:56,799 --> 00:55:59,119
um we've already seen one scheme do this

1652
00:55:59,119 --> 00:56:00,640
the round two

1653
00:56:00,640 --> 00:56:03,839
chem new hope which you previously used

1654
00:56:03,839 --> 00:56:04,480
and not

1655
00:56:04,480 --> 00:56:06,880
a oracle cloning method that was not

1656
00:56:06,880 --> 00:56:08,640
read only and differentiable

1657
00:56:08,640 --> 00:56:11,440
um after we pointed out that we our

1658
00:56:11,440 --> 00:56:13,599
framework was not able to prove security

1659
00:56:13,599 --> 00:56:15,520
for a new hope after the oracle cloning

1660
00:56:15,520 --> 00:56:16,160
step

1661
00:56:16,160 --> 00:56:18,400
they changed to use classical domain

1662
00:56:18,400 --> 00:56:20,559
separation or prefixing

1663
00:56:20,559 --> 00:56:22,960
and we were now able to prove security

1664
00:56:22,960 --> 00:56:24,799
of their scheme without any additional

1665
00:56:24,799 --> 00:56:27,440
analysis necessary

1666
00:56:27,440 --> 00:56:29,440
thank you i'm happy to take questions

1667
00:56:29,440 --> 00:56:31,760
now or over email

1668
00:56:31,760 --> 00:56:33,920
right uh so thank you very much hannah

1669
00:56:33,920 --> 00:56:36,720
uh fascinating talk so first there was

1670
00:56:36,720 --> 00:56:38,480
some confusion on the chat about the

1671
00:56:38,480 --> 00:56:40,559
term oracle cloning on whether it's a

1672
00:56:40,559 --> 00:56:42,640
defense mechanism or an attack but i

1673
00:56:42,640 --> 00:56:44,960
think that has been cleared up

1674
00:56:44,960 --> 00:56:48,079
um can you say something about

1675
00:56:48,079 --> 00:56:51,520
uh how amenable you're kind of like

1676
00:56:51,520 --> 00:56:54,400
so if i want to do static analysis of

1677
00:56:54,400 --> 00:56:56,319
say a code base and see if i have this

1678
00:56:56,319 --> 00:56:57,920
problem in there like how easy would it

1679
00:56:57,920 --> 00:57:00,240
be to find it do i just need to grab for

1680
00:57:00,240 --> 00:57:01,520
all the calls to sha too

1681
00:57:01,520 --> 00:57:04,240
or like what's my approach to find out

1682
00:57:04,240 --> 00:57:04,640
um

1683
00:57:04,640 --> 00:57:06,559
if my code base on a higher level than a

1684
00:57:06,559 --> 00:57:09,920
primitive has the same problem

1685
00:57:10,160 --> 00:57:14,000
that's a really interesting question um

1686
00:57:14,000 --> 00:57:15,440
certainly searching for all of the

1687
00:57:15,440 --> 00:57:17,839
places where a hash function is used

1688
00:57:17,839 --> 00:57:21,119
um would help but

1689
00:57:21,119 --> 00:57:24,720
it isn't the problem

1690
00:57:24,720 --> 00:57:28,160
arises when a hash function is used in

1691
00:57:28,160 --> 00:57:29,520
two places

1692
00:57:29,520 --> 00:57:32,160
where the specification or the security

1693
00:57:32,160 --> 00:57:32,640
proof

1694
00:57:32,640 --> 00:57:34,960
expects to different hash functions to

1695
00:57:34,960 --> 00:57:36,400
be used

1696
00:57:36,400 --> 00:57:40,640
um so for example um

1697
00:57:40,640 --> 00:57:44,319
if you have as in dags three you have

1698
00:57:44,319 --> 00:57:46,160
a portion of the ciphertext that is the

1699
00:57:46,160 --> 00:57:49,119
output of say hash function h1

1700
00:57:49,119 --> 00:57:51,520
and the session key is the output of

1701
00:57:51,520 --> 00:57:53,359
hash function h2

1702
00:57:53,359 --> 00:57:55,760
you don't want h1 and h2 to be the same

1703
00:57:55,760 --> 00:57:56,400
function

1704
00:57:56,400 --> 00:57:59,599
or to be related in any way i don't

1705
00:57:59,599 --> 00:58:01,440
think that static analysis would

1706
00:58:01,440 --> 00:58:03,760
necessarily be able to catch

1707
00:58:03,760 --> 00:58:05,200
it would catch the first case where

1708
00:58:05,200 --> 00:58:07,200
they're the same function

1709
00:58:07,200 --> 00:58:10,160
but there are more complicated versions

1710
00:58:10,160 --> 00:58:11,440
where the output is

1711
00:58:11,440 --> 00:58:13,839
related in some predictable way but not

1712
00:58:13,839 --> 00:58:15,359
necessarily

1713
00:58:15,359 --> 00:58:17,680
equal

1714
00:58:18,960 --> 00:58:22,000
so i would say keep different

1715
00:58:22,000 --> 00:58:24,960
names for your different hash functions

1716
00:58:24,960 --> 00:58:26,319
and make sure you're implementing them

1717
00:58:26,319 --> 00:58:28,160
with proper domain separation

1718
00:58:28,160 --> 00:58:32,079
and then static analysis isn't necessary

1719
00:58:32,079 --> 00:58:34,880
carolyn asks is there any good reason to

1720
00:58:34,880 --> 00:58:36,000
leave the oracle cloning

1721
00:58:36,000 --> 00:58:37,520
to the implementer instead of just

1722
00:58:37,520 --> 00:58:41,040
mandating a specific scheme

1723
00:58:43,200 --> 00:58:45,119
it's common practice to leave it up to

1724
00:58:45,119 --> 00:58:46,559
the implementer but i don't think

1725
00:58:46,559 --> 00:58:48,799
there's a good reason to do it

1726
00:58:48,799 --> 00:58:52,160
i think our our hope is that people will

1727
00:58:52,160 --> 00:58:53,040
start putting

1728
00:58:53,040 --> 00:58:54,559
oracle cloning methods into

1729
00:58:54,559 --> 00:58:57,200
specifications and just making them a

1730
00:58:57,200 --> 00:59:00,000
part of the scheme

1731
00:59:00,640 --> 00:59:03,680
okay great so uh for more questions uh

1732
00:59:03,680 --> 00:59:06,160
kind of um please kind of ask them on

1733
00:59:06,160 --> 00:59:07,119
zulip

1734
00:59:07,119 --> 00:59:09,760
because we are now moving on to the

1735
00:59:09,760 --> 00:59:11,200
final talk of the session

1736
00:59:11,200 --> 00:59:14,400
thank you hannah so the final talk will

1737
00:59:14,400 --> 00:59:14,720
be

1738
00:59:14,720 --> 00:59:18,720
uh given by gopher um on the embedded

1739
00:59:18,720 --> 00:59:19,440
challenge

1740
00:59:19,440 --> 00:59:23,839
for post quantum crypto thank you

1741
00:59:24,480 --> 00:59:28,319
hi guys can you hear me yes

1742
00:59:28,319 --> 00:59:31,200
awesome yeah so thanks a lot my name is

1743
00:59:31,200 --> 00:59:32,400
uh yoko boss

1744
00:59:32,400 --> 00:59:34,319
and it's my really my pleasure to talk

1745
00:59:34,319 --> 00:59:35,760
at real world crypto and i hope

1746
00:59:35,760 --> 00:59:38,319
we can actually do this uh in real life

1747
00:59:38,319 --> 00:59:39,599
soon again

1748
00:59:39,599 --> 00:59:43,119
so the last two talks were more about

1749
00:59:43,119 --> 00:59:44,720
attacks on post quantum crypto and with

1750
00:59:44,720 --> 00:59:46,559
this talk i would really like to

1751
00:59:46,559 --> 00:59:48,960
highlight yeah a different view and and

1752
00:59:48,960 --> 00:59:50,400
what kind of work we have done in this

1753
00:59:50,400 --> 00:59:51,359
area

1754
00:59:51,359 --> 00:59:54,799
namely related to a embedded perspective

1755
00:59:54,799 --> 00:59:57,839
of post quantum crypto

1756
00:59:57,839 --> 01:00:00,880
so maybe let me try to um kick off

1757
01:00:00,880 --> 01:00:02,799
um yeah we saw from the very interesting

1758
01:00:02,799 --> 01:00:05,359
talk uh by nist and the poll which was

1759
01:00:05,359 --> 01:00:06,319
run

1760
01:00:06,319 --> 01:00:08,240
uh yeah when do we believe if there will

1761
01:00:08,240 --> 01:00:10,160
be a quantum computer or not

1762
01:00:10,160 --> 01:00:13,760
i think yeah from our perspective it's

1763
01:00:13,760 --> 01:00:16,880
really not that interesting um

1764
01:00:16,880 --> 01:00:18,880
when or if you believe that a quantum

1765
01:00:18,880 --> 01:00:21,119
computer will become a reality

1766
01:00:21,119 --> 01:00:22,559
because the post content crypto

1767
01:00:22,559 --> 01:00:24,319
standards are simply coming and if your

1768
01:00:24,319 --> 01:00:26,400
customers are asking for this

1769
01:00:26,400 --> 01:00:28,880
um yeah then you have to you have to

1770
01:00:28,880 --> 01:00:29,520
comply

1771
01:00:29,520 --> 01:00:31,520
um so you need to prepare yourself to

1772
01:00:31,520 --> 01:00:32,960
actually migrate

1773
01:00:32,960 --> 01:00:34,559
towards these new public key crypto

1774
01:00:34,559 --> 01:00:36,400
standards

1775
01:00:36,400 --> 01:00:39,920
and and that is the big motivation here

1776
01:00:40,240 --> 01:00:43,520
so when i say embedded devices what do i

1777
01:00:43,520 --> 01:00:44,640
exactly mean

1778
01:00:44,640 --> 01:00:47,839
um so for us at nxp we mainly look at

1779
01:00:47,839 --> 01:00:48,799
these four pillars

1780
01:00:48,799 --> 01:00:50,960
um which you can see on the screen here

1781
01:00:50,960 --> 01:00:53,119
so first of all there's automotive

1782
01:00:53,119 --> 01:00:56,400
so modern cars have a

1783
01:00:56,400 --> 01:00:58,400
hundred or even up to a thousand

1784
01:00:58,400 --> 01:00:59,440
different chips in them

1785
01:00:59,440 --> 01:01:01,280
and some of these chips need to securely

1786
01:01:01,280 --> 01:01:02,799
communicate to each other

1787
01:01:02,799 --> 01:01:04,720
then you even have vehicle-to-vehicle

1788
01:01:04,720 --> 01:01:06,480
communication where cars need to

1789
01:01:06,480 --> 01:01:07,760
communicate

1790
01:01:07,760 --> 01:01:09,119
between themselves and of course you

1791
01:01:09,119 --> 01:01:11,440
want to do this in a secure manner

1792
01:01:11,440 --> 01:01:14,000
then there's industrial iot many

1793
01:01:14,000 --> 01:01:15,359
embedded devices live there and of

1794
01:01:15,359 --> 01:01:15,839
course

1795
01:01:15,839 --> 01:01:18,160
they need public key crypto as well

1796
01:01:18,160 --> 01:01:19,760
there are mobile applications

1797
01:01:19,760 --> 01:01:23,040
so i think electronic payment or transit

1798
01:01:23,040 --> 01:01:24,079
applications

1799
01:01:24,079 --> 01:01:26,559
which need to be secured and then of

1800
01:01:26,559 --> 01:01:27,680
course there's our communication

1801
01:01:27,680 --> 01:01:28,880
infrastructure

1802
01:01:28,880 --> 01:01:31,839
and with all these embedded devices they

1803
01:01:31,839 --> 01:01:32,400
already

1804
01:01:32,400 --> 01:01:35,680
struggle to actually implement in a

1805
01:01:35,680 --> 01:01:36,799
timely manner

1806
01:01:36,799 --> 01:01:39,119
our current public key algorithms like

1807
01:01:39,119 --> 01:01:40,799
ecc and rsa

1808
01:01:40,799 --> 01:01:42,640
and now they need to migrate away to

1809
01:01:42,640 --> 01:01:44,160
more expensive

1810
01:01:44,160 --> 01:01:46,000
in for some definition of expensive

1811
01:01:46,000 --> 01:01:47,520
publicly crypto

1812
01:01:47,520 --> 01:01:50,079
so yeah the big question is what is the

1813
01:01:50,079 --> 01:01:51,440
impact and is this even

1814
01:01:51,440 --> 01:01:54,400
feasible in practice

1815
01:01:55,520 --> 01:01:57,599
so yeah i wanted to highlight two use

1816
01:01:57,599 --> 01:01:59,119
cases but since this talk

1817
01:01:59,119 --> 01:02:00,880
because it's virtual uh was a bit

1818
01:02:00,880 --> 01:02:02,160
shortened i will only talk

1819
01:02:02,160 --> 01:02:04,559
mainly about one about the second use

1820
01:02:04,559 --> 01:02:06,559
case but the first use case

1821
01:02:06,559 --> 01:02:08,319
i wanted to highlight digital signatures

1822
01:02:08,319 --> 01:02:10,079
and where this is used

1823
01:02:10,079 --> 01:02:13,359
um so for instance in the industrial iot

1824
01:02:13,359 --> 01:02:14,880
and in automotive

1825
01:02:14,880 --> 01:02:17,520
the first thing you might or makes a lot

1826
01:02:17,520 --> 01:02:18,160
of sense

1827
01:02:18,160 --> 01:02:20,799
to make this post quantum secure are

1828
01:02:20,799 --> 01:02:22,000
your secure boot

1829
01:02:22,000 --> 01:02:24,079
and your over the air update because if

1830
01:02:24,079 --> 01:02:25,520
these two components

1831
01:02:25,520 --> 01:02:28,240
are post quantum secure you can use this

1832
01:02:28,240 --> 01:02:29,760
as a vehicle to actually

1833
01:02:29,760 --> 01:02:32,000
uh upgrade the the remaining part of

1834
01:02:32,000 --> 01:02:33,119
your of your product

1835
01:02:33,119 --> 01:02:37,359
to post content security

1836
01:02:37,359 --> 01:02:39,839
and we actually looked into this and we

1837
01:02:39,839 --> 01:02:40,559
uh

1838
01:02:40,559 --> 01:02:43,039
yeah advanced on a time memory trade-off

1839
01:02:43,039 --> 01:02:44,400
technique which allowed on better

1840
01:02:44,400 --> 01:02:46,079
devices to actually make the signature

1841
01:02:46,079 --> 01:02:47,119
verification

1842
01:02:47,119 --> 01:02:48,160
which you need to compute on the

1843
01:02:48,160 --> 01:02:50,720
embedded device significantly faster

1844
01:02:50,720 --> 01:02:53,359
while still being compliant with these

1845
01:02:53,359 --> 01:02:56,240
stateful hashtag signature schemes

1846
01:02:56,240 --> 01:02:57,680
and what i want to highlight a bit more

1847
01:02:57,680 --> 01:02:59,520
is related to key exchange so

1848
01:02:59,520 --> 01:03:01,839
think again use cases related to

1849
01:03:01,839 --> 01:03:04,160
industrial and iot

1850
01:03:04,160 --> 01:03:06,160
in these end or edge devices you have a

1851
01:03:06,160 --> 01:03:07,680
secure element which might need to

1852
01:03:07,680 --> 01:03:08,400
communicate

1853
01:03:08,400 --> 01:03:09,680
with your regular core so your

1854
01:03:09,680 --> 01:03:12,000
unprotected core or

1855
01:03:12,000 --> 01:03:13,680
different iot devices need to talk to

1856
01:03:13,680 --> 01:03:16,640
each other and for this you need to uh

1857
01:03:16,640 --> 01:03:18,640
perform a key exchange and the big

1858
01:03:18,640 --> 01:03:20,319
question here is is this even possible

1859
01:03:20,319 --> 01:03:22,480
in practice and what exactly uh

1860
01:03:22,480 --> 01:03:25,599
yeah is the impact

1861
01:03:26,240 --> 01:03:28,400
so if we look at the yeah the nist

1862
01:03:28,400 --> 01:03:29,920
finalist i think they've been mentioned

1863
01:03:29,920 --> 01:03:32,000
in the last couple talks as well

1864
01:03:32,000 --> 01:03:35,200
for key exchange and you look at the

1865
01:03:35,200 --> 01:03:37,119
academic literature

1866
01:03:37,119 --> 01:03:39,920
about implementations on what's often

1867
01:03:39,920 --> 01:03:42,720
called an embedded platform of cortex m4

1868
01:03:42,720 --> 01:03:44,559
uploaded some numbers here in blue so

1869
01:03:44,559 --> 01:03:46,960
for saber and true and kyber

1870
01:03:46,960 --> 01:03:50,319
um and then in red i uh plotted the

1871
01:03:50,319 --> 01:03:51,680
numbers for an elliptic curve for

1872
01:03:51,680 --> 01:03:53,200
popular elliptic curve crypto scheme so

1873
01:03:53,200 --> 01:03:54,079
x 255

1874
01:03:54,079 --> 01:03:56,319
19 and you can see here that the

1875
01:03:56,319 --> 01:03:58,079
performance numbers

1876
01:03:58,079 --> 01:04:00,960
so there are two things to notice here

1877
01:04:00,960 --> 01:04:01,920
so first of all

1878
01:04:01,920 --> 01:04:04,559
the the fourth uh finalist classic

1879
01:04:04,559 --> 01:04:05,680
mcaleese

1880
01:04:05,680 --> 01:04:08,799
is not plotted here simply because yeah

1881
01:04:08,799 --> 01:04:11,359
i couldn't find any performance numbers

1882
01:04:11,359 --> 01:04:12,480
on the cortex and four

1883
01:04:12,480 --> 01:04:14,480
this is probably something to do with

1884
01:04:14,480 --> 01:04:16,319
that their public key

1885
01:04:16,319 --> 01:04:18,000
is massive as was already mentioned by

1886
01:04:18,000 --> 01:04:19,359
the talk by nist so it

1887
01:04:19,359 --> 01:04:21,200
for the larger parameter sets it's over

1888
01:04:21,200 --> 01:04:23,359
a megabyte which will simply not fit on

1889
01:04:23,359 --> 01:04:25,039
the device

1890
01:04:25,039 --> 01:04:27,039
um and the second thing to mention is

1891
01:04:27,039 --> 01:04:28,720
that from the remaining three letters

1892
01:04:28,720 --> 01:04:29,200
based

1893
01:04:29,200 --> 01:04:31,440
schemes you see here in blue the

1894
01:04:31,440 --> 01:04:33,119
performance is actually not that bad so

1895
01:04:33,119 --> 01:04:34,880
they're really in the same ballpark

1896
01:04:34,880 --> 01:04:37,760
as elliptic curve crypto which is kind

1897
01:04:37,760 --> 01:04:39,039
of good news

1898
01:04:39,039 --> 01:04:41,039
on the other hand it should really be

1899
01:04:41,039 --> 01:04:42,400
highlighted that

1900
01:04:42,400 --> 01:04:44,400
a cortex m4 although it's often

1901
01:04:44,400 --> 01:04:46,799
considered an embedded device

1902
01:04:46,799 --> 01:04:49,520
yeah for many of the applications which

1903
01:04:49,520 --> 01:04:50,160
i showed

1904
01:04:50,160 --> 01:04:52,079
in these four pillars a couple slides

1905
01:04:52,079 --> 01:04:53,520
back is really

1906
01:04:53,520 --> 01:04:57,039
considered high end and therefore the

1907
01:04:57,039 --> 01:04:59,119
main problem is not really related

1908
01:04:59,119 --> 01:05:00,720
per se with the performance but it's

1909
01:05:00,720 --> 01:05:02,640
really with the

1910
01:05:02,640 --> 01:05:04,880
with the memory or the stack consumption

1911
01:05:04,880 --> 01:05:06,240
so here you can see

1912
01:05:06,240 --> 01:05:08,559
so these same implementations which were

1913
01:05:08,559 --> 01:05:09,680
were

1914
01:05:09,680 --> 01:05:11,200
really fast i mean that's why they

1915
01:05:11,200 --> 01:05:13,359
advanced to the final

1916
01:05:13,359 --> 01:05:15,200
and again but now for not in performance

1917
01:05:15,200 --> 01:05:16,640
but for their memory and we see for

1918
01:05:16,640 --> 01:05:18,079
elliptic curve crypto

1919
01:05:18,079 --> 01:05:19,440
this is really convenient and that is

1920
01:05:19,440 --> 01:05:21,920
why elliptic curve cryptography is so

1921
01:05:21,920 --> 01:05:24,000
popular in embedded devices

1922
01:05:24,000 --> 01:05:24,799
if we look at these other

1923
01:05:24,799 --> 01:05:26,960
implementations they're much much bigger

1924
01:05:26,960 --> 01:05:28,319
so for instance you can see

1925
01:05:28,319 --> 01:05:31,280
one of these goes over 20 kilobytes of

1926
01:05:31,280 --> 01:05:32,319
stack

1927
01:05:32,319 --> 01:05:33,760
and here i also want to highlight this

1928
01:05:33,760 --> 01:05:36,000
is even without considering the storage

1929
01:05:36,000 --> 01:05:37,920
of the cryptographic keys which are also

1930
01:05:37,920 --> 01:05:38,720
much much bigger

1931
01:05:38,720 --> 01:05:42,160
than our current public key crypto

1932
01:05:42,160 --> 01:05:44,240
and of course there are many ways that

1933
01:05:44,240 --> 01:05:45,839
you can try to remedy this

1934
01:05:45,839 --> 01:05:47,920
you can make implementations which look

1935
01:05:47,920 --> 01:05:49,039
use much less

1936
01:05:49,039 --> 01:05:51,280
stack but then of course this comes at a

1937
01:05:51,280 --> 01:05:52,960
cost of performance

1938
01:05:52,960 --> 01:05:55,440
so in practice for these embedded

1939
01:05:55,440 --> 01:05:57,280
devices what are we considering so

1940
01:05:57,280 --> 01:05:59,280
often of course depending on your

1941
01:05:59,280 --> 01:06:01,200
product uh on your product line and your

1942
01:06:01,200 --> 01:06:02,160
use case

1943
01:06:02,160 --> 01:06:04,799
think about one two four kilobytes of

1944
01:06:04,799 --> 01:06:05,280
stack

1945
01:06:05,280 --> 01:06:07,119
and that includes the storage of your

1946
01:06:07,119 --> 01:06:08,400
keys uh

1947
01:06:08,400 --> 01:06:11,280
maybe eight if you're lucky but 20 and

1948
01:06:11,280 --> 01:06:13,039
is definitely a real stretch and uh will

1949
01:06:13,039 --> 01:06:15,520
be a massive problem

1950
01:06:15,520 --> 01:06:17,359
so now if we would find some sort of

1951
01:06:17,359 --> 01:06:18,960
trade-off that you can trade some of

1952
01:06:18,960 --> 01:06:19,359
your

1953
01:06:19,359 --> 01:06:21,440
uh consumed memory for performance we

1954
01:06:21,440 --> 01:06:23,119
again have the problem with how can we

1955
01:06:23,119 --> 01:06:23,440
get

1956
01:06:23,440 --> 01:06:26,400
faster uh in this in this case let's

1957
01:06:26,400 --> 01:06:28,079
base crypto

1958
01:06:28,079 --> 01:06:30,000
so of course this is a well-studied

1959
01:06:30,000 --> 01:06:31,280
problem for our

1960
01:06:31,280 --> 01:06:33,280
public key crypto deployed nowadays and

1961
01:06:33,280 --> 01:06:34,559
that's why lots of these embedded

1962
01:06:34,559 --> 01:06:37,200
devices have co-processors

1963
01:06:37,200 --> 01:06:38,799
and they compute the core of the public

1964
01:06:38,799 --> 01:06:40,880
key crypto as we know it

1965
01:06:40,880 --> 01:06:43,359
so for rsa and ecc this all boils down

1966
01:06:43,359 --> 01:06:45,359
to modular multiplications

1967
01:06:45,359 --> 01:06:47,839
so for rsa the modulus is a couple

1968
01:06:47,839 --> 01:06:48,960
thousand bit for

1969
01:06:48,960 --> 01:06:50,559
elliptic curve crypto this is a couple

1970
01:06:50,559 --> 01:06:53,039
hundred bit but for lettuce biscuit this

1971
01:06:53,039 --> 01:06:53,920
is completely different

1972
01:06:53,920 --> 01:06:57,599
so now we the core operation is

1973
01:06:57,599 --> 01:07:00,640
working with polynomials with integer

1974
01:07:00,640 --> 01:07:01,440
coefficients

1975
01:07:01,440 --> 01:07:02,960
where the coefficients are small they're

1976
01:07:02,960 --> 01:07:05,280
only 16 bits

1977
01:07:05,280 --> 01:07:07,359
so if we now want to use the power of

1978
01:07:07,359 --> 01:07:08,880
these arithmetic code processors how can

1979
01:07:08,880 --> 01:07:10,000
we proceed

1980
01:07:10,000 --> 01:07:11,599
so one idea of course and this has been

1981
01:07:11,599 --> 01:07:13,520
studied in 2019

1982
01:07:13,520 --> 01:07:16,400
is to use these large registers uh pack

1983
01:07:16,400 --> 01:07:17,039
multiple

1984
01:07:17,039 --> 01:07:19,760
of these 16 bit coefficients in there do

1985
01:07:19,760 --> 01:07:20,240
one

1986
01:07:20,240 --> 01:07:22,480
big large multiplications ensure that

1987
01:07:22,480 --> 01:07:24,160
the result doesn't overflow that

1988
01:07:24,160 --> 01:07:26,559
everything stays correct and then you

1989
01:07:26,559 --> 01:07:28,000
get a constant time speed up

1990
01:07:28,000 --> 01:07:31,200
by processing in a in a bit like a cmd

1991
01:07:31,200 --> 01:07:34,400
type fashion and if you do this

1992
01:07:34,400 --> 01:07:37,119
um actually when you think about it this

1993
01:07:37,119 --> 01:07:38,960
is just chronic or substitution so this

1994
01:07:38,960 --> 01:07:39,680
is

1995
01:07:39,680 --> 01:07:41,520
a way how you can convert polynomial

1996
01:07:41,520 --> 01:07:42,880
multiplication into integer

1997
01:07:42,880 --> 01:07:44,480
multiplication it's well known it's from

1998
01:07:44,480 --> 01:07:47,119
the 19th century

1999
01:07:47,119 --> 01:07:48,640
and with the team with nxp we had a

2000
01:07:48,640 --> 01:07:50,559
closer look at this

2001
01:07:50,559 --> 01:07:52,480
and we actually looked at it not from a

2002
01:07:52,480 --> 01:07:54,240
from a point of view that is any

2003
01:07:54,240 --> 01:07:55,760
polynomial multiplication but we

2004
01:07:55,760 --> 01:07:57,599
specifically looked at the rings

2005
01:07:57,599 --> 01:08:01,200
used in crypto so and the question was

2006
01:08:01,200 --> 01:08:02,160
can we do better

2007
01:08:02,160 --> 01:08:05,599
and the answer is yes so the idea here

2008
01:08:05,599 --> 01:08:06,000
is that

2009
01:08:06,000 --> 01:08:08,839
you would use the roots of unity in this

2010
01:08:08,839 --> 01:08:10,240
ring

2011
01:08:10,240 --> 01:08:12,640
and you build a symbolic numbered

2012
01:08:12,640 --> 01:08:14,480
theoretic transform similar

2013
01:08:14,480 --> 01:08:17,839
to bomber but different

2014
01:08:17,839 --> 01:08:20,319
and although this method is slower when

2015
01:08:20,319 --> 01:08:21,600
you would do it on polynomial

2016
01:08:21,600 --> 01:08:22,479
multiplication

2017
01:08:22,479 --> 01:08:24,319
if you combine it with this kronecker

2018
01:08:24,319 --> 01:08:26,479
substitution by converting it into

2019
01:08:26,479 --> 01:08:27,439
integers

2020
01:08:27,439 --> 01:08:29,839
you actually get a much faster method so

2021
01:08:29,839 --> 01:08:31,279
just to highlight

2022
01:08:31,279 --> 01:08:33,520
for kyber if you convert your polynomial

2023
01:08:33,520 --> 01:08:34,479
multiplication

2024
01:08:34,479 --> 01:08:37,600
in an integer multiplication it would

2025
01:08:37,600 --> 01:08:40,640
turn into one 8000 bit multiplication

2026
01:08:40,640 --> 01:08:42,158
and now assume you have an aromatic

2027
01:08:42,158 --> 01:08:45,439
co-processor which works on 128 bit

2028
01:08:45,439 --> 01:08:48,000
words you need roughly 4 000 calls to

2029
01:08:48,000 --> 01:08:49,759
your co-processor

2030
01:08:49,759 --> 01:08:52,880
now when you use this method

2031
01:08:52,880 --> 01:08:54,960
we proposed using the roots of unity and

2032
01:08:54,960 --> 01:08:56,399
the symbolic entity

2033
01:08:56,399 --> 01:08:58,799
it boils down to 16 512-bit

2034
01:08:58,799 --> 01:09:00,000
multiplications

2035
01:09:00,000 --> 01:09:03,359
which you can compute only with 256

2036
01:09:03,359 --> 01:09:05,198
calls to your co-processor so that's

2037
01:09:05,198 --> 01:09:09,278
already a very nice speed up in practice

2038
01:09:10,238 --> 01:09:13,359
so to conclude um yeah it doesn't really

2039
01:09:13,359 --> 01:09:14,158
matter if you think

2040
01:09:14,158 --> 01:09:16,158
quantum computers will be here soon or

2041
01:09:16,158 --> 01:09:18,080
not the post quantum crypto standards

2042
01:09:18,080 --> 01:09:19,279
which will replace

2043
01:09:19,279 --> 01:09:22,319
our pki infrastructure will come

2044
01:09:22,319 --> 01:09:25,439
and um yeah as industry we are already

2045
01:09:25,439 --> 01:09:26,960
preparing for this

2046
01:09:26,960 --> 01:09:28,399
um so we have this the short-term

2047
01:09:28,399 --> 01:09:30,000
standard as you saw stateful

2048
01:09:30,000 --> 01:09:31,839
has been signature schemes and then of

2049
01:09:31,839 --> 01:09:34,080
course the new standard

2050
01:09:34,080 --> 01:09:35,600
and then this standard will make it even

2051
01:09:35,600 --> 01:09:36,880
a bit more difficult because they will

2052
01:09:36,880 --> 01:09:38,158
select multiple winners

2053
01:09:38,158 --> 01:09:40,238
per category so it means lots of extra

2054
01:09:40,238 --> 01:09:41,279
work

2055
01:09:41,279 --> 01:09:43,279
and we didn't even talk about hardened

2056
01:09:43,279 --> 01:09:44,719
implementations but it's good

2057
01:09:44,719 --> 01:09:47,520
that daniel and james did this in two

2058
01:09:47,520 --> 01:09:47,839
talks

2059
01:09:47,839 --> 01:09:51,198
back that will be i think a major

2060
01:09:51,198 --> 01:09:52,158
challenge for these

2061
01:09:52,158 --> 01:09:53,679
embedded implementations where you need

2062
01:09:53,679 --> 01:09:55,360
to actually protect against these types

2063
01:09:55,360 --> 01:09:56,480
of attacks

2064
01:09:56,480 --> 01:09:58,400
and indeed there the table they showed

2065
01:09:58,400 --> 01:10:00,080
was very interesting

2066
01:10:00,080 --> 01:10:02,000
it showed what is done in academia but

2067
01:10:02,000 --> 01:10:03,679
of course it didn't show what can be

2068
01:10:03,679 --> 01:10:06,239
done per scheme so in that sense i think

2069
01:10:06,239 --> 01:10:08,239
any scheme can probably make secure in

2070
01:10:08,239 --> 01:10:10,960
this model the question is at what cost

2071
01:10:10,960 --> 01:10:12,320
so i think we have very interesting

2072
01:10:12,320 --> 01:10:15,199
times ahead um especially for the

2073
01:10:15,199 --> 01:10:18,000
yeah from this embedded perspective

2074
01:10:18,000 --> 01:10:19,120
thanks a lot and i will take any

2075
01:10:19,120 --> 01:10:20,320
questions

2076
01:10:20,320 --> 01:10:24,000
thanks for a great talk chris asks what

2077
01:10:24,000 --> 01:10:26,400
makes andrew sabre use so much stack

2078
01:10:26,400 --> 01:10:30,080
compared to kyber yeah that's a good

2079
01:10:30,080 --> 01:10:32,560
question so um this was not an

2080
01:10:32,560 --> 01:10:33,600
implementation

2081
01:10:33,600 --> 01:10:36,480
i i made so this was from the one of the

2082
01:10:36,480 --> 01:10:39,040
implementations submitted to pqm4

2083
01:10:39,040 --> 01:10:42,159
so you yeah you would want to ask um the

2084
01:10:42,159 --> 01:10:44,159
implementers of these schemes the big

2085
01:10:44,159 --> 01:10:46,000
question of course is

2086
01:10:46,000 --> 01:10:48,800
uh is this inherent to the scheme or was

2087
01:10:48,800 --> 01:10:50,960
this more memory used to achieve this

2088
01:10:50,960 --> 01:10:52,560
this high performance and and to me

2089
01:10:52,560 --> 01:10:55,280
that's not clear

2090
01:10:57,040 --> 01:10:59,760
and then uh thomas is pointing out that

2091
01:10:59,760 --> 01:11:00,080
uh

2092
01:11:00,080 --> 01:11:03,199
upon the x 2 5 5 19

2093
01:11:03,199 --> 01:11:07,120
uh listed as 0.9 cycles on the cortex m4

2094
01:11:07,120 --> 01:11:09,199
it can be done in 0.55

2095
01:11:09,199 --> 01:11:11,600
but this makes your point uh and it

2096
01:11:11,600 --> 01:11:13,600
doesn't change your point

2097
01:11:13,600 --> 01:11:15,760
and then james points out that classic

2098
01:11:15,760 --> 01:11:16,800
megalis was

2099
01:11:16,800 --> 01:11:20,480
indeed implementing the cortex and iv

2100
01:11:20,480 --> 01:11:23,600
uh i don't see any more questions at the

2101
01:11:23,600 --> 01:11:25,840
moment

2102
01:11:25,840 --> 01:11:28,080
so people want to jump in real quick in

2103
01:11:28,080 --> 01:11:31,519
the last minute that we have here

2104
01:11:32,080 --> 01:11:35,920
okay i don't see um

2105
01:11:36,880 --> 01:11:39,440
oh let me ask one one of the problems

2106
01:11:39,440 --> 01:11:41,040
that we had when we're kind of doing

2107
01:11:41,040 --> 01:11:42,320
just chronic

2108
01:11:42,320 --> 01:11:44,640
substitution was that schemes mandated

2109
01:11:44,640 --> 01:11:46,960
the use of the ntt

2110
01:11:46,960 --> 01:11:48,960
do you see that this is a long-term

2111
01:11:48,960 --> 01:11:50,719
problem and would you kind of ask

2112
01:11:50,719 --> 01:11:52,560
schemes to be neutral to the

2113
01:11:52,560 --> 01:11:54,159
implementation like

2114
01:11:54,159 --> 01:11:56,159
you know that yeah we actually it's a

2115
01:11:56,159 --> 01:11:57,840
very good remark so we encountered

2116
01:11:57,840 --> 01:12:00,640
the same uh issue yeah like we also

2117
01:12:00,640 --> 01:12:02,159
remarked in our paper

2118
01:12:02,159 --> 01:12:05,199
so some schemes they sample from the

2119
01:12:05,199 --> 01:12:06,640
entity domain

2120
01:12:06,640 --> 01:12:09,679
um so the entity domain so

2121
01:12:09,679 --> 01:12:11,120
typically that's a shown a strata

2122
01:12:11,120 --> 01:12:13,520
approach used um

2123
01:12:13,520 --> 01:12:15,520
on these polynomials directly and of

2124
01:12:15,520 --> 01:12:16,640
course then if you would

2125
01:12:16,640 --> 01:12:18,560
use kronecker substitution you need to

2126
01:12:18,560 --> 01:12:20,080
first invert this

2127
01:12:20,080 --> 01:12:23,520
uh in order to proceed so computing in

2128
01:12:23,520 --> 01:12:26,159
a backwards transformation and that

2129
01:12:26,159 --> 01:12:28,320
indeed gives a yeah significant overhead

2130
01:12:28,320 --> 01:12:28,960
so

2131
01:12:28,960 --> 01:12:31,199
indeed so in some sense for the embedded

2132
01:12:31,199 --> 01:12:32,880
devices which want to use this approach

2133
01:12:32,880 --> 01:12:34,159
that is a very in the

2134
01:12:34,159 --> 01:12:37,280
unfortunate design decision um and it

2135
01:12:37,280 --> 01:12:38,640
might have been better to just

2136
01:12:38,640 --> 01:12:42,640
sample uh yeah not in the entity domain

2137
01:12:42,640 --> 01:12:45,360
and make the high-end implementations

2138
01:12:45,360 --> 01:12:47,360
uh slightly slower but help them better

2139
01:12:47,360 --> 01:12:49,120
devices a bit more that's definitely

2140
01:12:49,120 --> 01:12:49,600
true

2141
01:12:49,600 --> 01:12:52,640
yes okay so then kevin asked the

2142
01:12:52,640 --> 01:12:53,520
question

2143
01:12:53,520 --> 01:12:55,520
given their ppc is looking perhaps many

2144
01:12:55,520 --> 01:12:57,360
years in the future do you think

2145
01:12:57,360 --> 01:12:59,040
this should change the economics of

2146
01:12:59,040 --> 01:13:00,719
embedded systems to choose a higher

2147
01:13:00,719 --> 01:13:03,360
capability core to handle the future

2148
01:13:03,360 --> 01:13:05,040
this is also consistent with auto

2149
01:13:05,040 --> 01:13:06,719
companies who want to make their cars

2150
01:13:06,719 --> 01:13:07,040
have

2151
01:13:07,040 --> 01:13:10,960
subscription servers for future revenue

2152
01:13:11,760 --> 01:13:13,440
so i'm not sure if i completely got the

2153
01:13:13,440 --> 01:13:14,480
question but yeah you're absolutely

2154
01:13:14,480 --> 01:13:15,120
right so

2155
01:13:15,120 --> 01:13:17,360
of course one one direction you should

2156
01:13:17,360 --> 01:13:19,120
go into is design new hardware

2157
01:13:19,120 --> 01:13:20,400
specifically

2158
01:13:20,400 --> 01:13:22,320
for uh yeah the winner of the nist

2159
01:13:22,320 --> 01:13:24,159
competition the downside is we don't

2160
01:13:24,159 --> 01:13:25,120
know

2161
01:13:25,120 --> 01:13:28,320
uh who will win we don't even know or it

2162
01:13:28,320 --> 01:13:30,239
might be a letterbase scheme might make

2163
01:13:30,239 --> 01:13:32,000
might be codebed scheme and they need

2164
01:13:32,000 --> 01:13:33,760
completely different hardware

2165
01:13:33,760 --> 01:13:35,280
accelerators so

2166
01:13:35,280 --> 01:13:37,280
on the and designing the water takes

2167
01:13:37,280 --> 01:13:38,880
time um

2168
01:13:38,880 --> 01:13:41,280
so for now to ensure that we have a

2169
01:13:41,280 --> 01:13:42,880
seamless transition

2170
01:13:42,880 --> 01:13:45,360
and that actually the currently deployed

2171
01:13:45,360 --> 01:13:46,880
embedded devices can run

2172
01:13:46,880 --> 01:13:48,640
post quantum crypto i think it's

2173
01:13:48,640 --> 01:13:49,920
important to look into

2174
01:13:49,920 --> 01:13:52,800
the existing yeah hardware we have and

2175
01:13:52,800 --> 01:13:55,679
how that can be utilized

2176
01:13:55,679 --> 01:13:58,480
all right thanks this brings us to the

2177
01:13:58,480 --> 01:14:00,800
end of the session so thank you yopa and

2178
01:14:00,800 --> 01:14:03,120
all speakers of the session

2179
01:14:03,120 --> 01:14:06,880
at this point i'm handing over

