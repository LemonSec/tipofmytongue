1
00:00:00,799 --> 00:00:03,360
good to go enjoy your session

2
00:00:03,360 --> 00:00:04,799
thank you and thanks everyone for

3
00:00:04,799 --> 00:00:06,640
joining the the group messaging session

4
00:00:06,640 --> 00:00:09,679
at real world crypto 2021 we have an

5
00:00:09,679 --> 00:00:11,280
interesting session today covering

6
00:00:11,280 --> 00:00:14,080
some pretty diverse aspects of uh group

7
00:00:14,080 --> 00:00:15,280
messaging and group

8
00:00:15,280 --> 00:00:17,199
encryption and authentication ranging

9
00:00:17,199 --> 00:00:19,520
from very ad hoc distribute

10
00:00:19,520 --> 00:00:20,640
decentralized groups

11
00:00:20,640 --> 00:00:22,720
um how we handle concurrency and how we

12
00:00:22,720 --> 00:00:24,800
do some real-time stuff as well

13
00:00:24,800 --> 00:00:26,800
uh so with that i will pass it over to

14
00:00:26,800 --> 00:00:28,400
our first speaker um

15
00:00:28,400 --> 00:00:31,599
lenka marikova to talk about

16
00:00:31,599 --> 00:00:33,440
mesh messaging and large-scale protests

17
00:00:33,440 --> 00:00:35,440
uh looking at breaking this bridge dry

18
00:00:35,440 --> 00:00:37,599
app

19
00:00:38,160 --> 00:00:41,839
thank you thank you for the introduction

20
00:00:42,079 --> 00:00:45,760
um so i will present a work that titles

21
00:00:45,760 --> 00:00:47,680
mesh messaging and large-scale protests

22
00:00:47,680 --> 00:00:49,200
breaking bridge phi

23
00:00:49,200 --> 00:00:50,960
that was done in collaboration with

24
00:00:50,960 --> 00:00:53,600
martin albrecht jorge blasko and ricky b

25
00:00:53,600 --> 00:00:56,000
against

26
00:00:56,239 --> 00:00:58,079
the story begins with the hong kong

27
00:00:58,079 --> 00:00:59,920
anti-extraction law amendment bill

28
00:00:59,920 --> 00:01:03,039
protests that started in 2019.

29
00:01:03,039 --> 00:01:04,640
organization of these large-scale

30
00:01:04,640 --> 00:01:06,720
protests has been described as mostly

31
00:01:06,720 --> 00:01:07,760
leaderless

32
00:01:07,760 --> 00:01:09,760
and it made heavy use of various online

33
00:01:09,760 --> 00:01:11,119
platforms

34
00:01:11,119 --> 00:01:12,799
given this there are fears that the

35
00:01:12,799 --> 00:01:14,560
government would use its emergency

36
00:01:14,560 --> 00:01:16,400
powers and block these platforms in

37
00:01:16,400 --> 00:01:18,240
order to prevent the protesters from

38
00:01:18,240 --> 00:01:20,400
communicating

39
00:01:20,400 --> 00:01:22,320
in this setting a number of articles

40
00:01:22,320 --> 00:01:23,920
reported on the apparent rise of

41
00:01:23,920 --> 00:01:26,479
messaging apps that enable communication

42
00:01:26,479 --> 00:01:28,479
in the face of such a potential internet

43
00:01:28,479 --> 00:01:30,880
shutdown by the government

44
00:01:30,880 --> 00:01:33,280
and these reports focused on one app in

45
00:01:33,280 --> 00:01:34,640
particular and that was

46
00:01:34,640 --> 00:01:37,119
bridge file it allows people to

47
00:01:37,119 --> 00:01:38,880
communicate without internet using a

48
00:01:38,880 --> 00:01:41,119
mesh network that is composed of mobile

49
00:01:41,119 --> 00:01:42,640
devices that are connected

50
00:01:42,640 --> 00:01:46,159
to each other via bluetooth now

51
00:01:46,159 --> 00:01:47,920
bridge file was first conceived as an

52
00:01:47,920 --> 00:01:50,000
app for music concerts and sports

53
00:01:50,000 --> 00:01:50,799
stadiums

54
00:01:50,799 --> 00:01:52,320
where mobile networks may become

55
00:01:52,320 --> 00:01:54,880
congested but which is still miles away

56
00:01:54,880 --> 00:01:57,040
from the potentially highly adversarial

57
00:01:57,040 --> 00:01:59,280
setting of a protest

58
00:01:59,280 --> 00:02:01,280
however even then it was being marketed

59
00:02:01,280 --> 00:02:02,320
as secure and

60
00:02:02,320 --> 00:02:04,960
end-to-end encrypted and once it started

61
00:02:04,960 --> 00:02:06,960
gaining traction in hong kong and other

62
00:02:06,960 --> 00:02:08,160
places experiencing

63
00:02:08,160 --> 00:02:10,639
protests the developers also began

64
00:02:10,639 --> 00:02:14,238
promoting it for this use case

65
00:02:15,760 --> 00:02:17,680
now an actual internet shutdown never

66
00:02:17,680 --> 00:02:19,360
materialized in hong kong but

67
00:02:19,360 --> 00:02:21,920
mobile networks did get congested which

68
00:02:21,920 --> 00:02:23,680
could have also contributed to the app's

69
00:02:23,680 --> 00:02:25,120
downloads

70
00:02:25,120 --> 00:02:27,440
however hong kong's role was to serve as

71
00:02:27,440 --> 00:02:29,840
inspiration for protesters in many other

72
00:02:29,840 --> 00:02:30,640
countries and

73
00:02:30,640 --> 00:02:33,680
indeed in vastly different contexts

74
00:02:33,680 --> 00:02:35,519
bridgeway started appearing as part of

75
00:02:35,519 --> 00:02:37,440
so-called hong kong tactics that were

76
00:02:37,440 --> 00:02:39,280
being adopted elsewhere

77
00:02:39,280 --> 00:02:42,560
and now just to name a few examples this

78
00:02:42,560 --> 00:02:44,720
included the citizenship amendment act

79
00:02:44,720 --> 00:02:46,720
protests in india that happened during

80
00:02:46,720 --> 00:02:48,480
december 2019

81
00:02:48,480 --> 00:02:50,239
when government mandated internet

82
00:02:50,239 --> 00:02:53,440
shutdowns actually did take place

83
00:02:53,440 --> 00:02:55,040
it was being promoted during the

84
00:02:55,040 --> 00:02:56,720
resurgence of the black lives matter

85
00:02:56,720 --> 00:02:59,200
protests in the u.s

86
00:02:59,200 --> 00:03:00,720
then fear of a government shutdown

87
00:03:00,720 --> 00:03:02,879
during protests in zimbabwe also urged

88
00:03:02,879 --> 00:03:06,239
protesters to install bridgeify

89
00:03:06,239 --> 00:03:08,319
during the presidential election in

90
00:03:08,319 --> 00:03:10,480
belarus and the days of protests that

91
00:03:10,480 --> 00:03:11,360
followed

92
00:03:11,360 --> 00:03:13,680
internet was again partially blocked

93
00:03:13,680 --> 00:03:16,640
which led some protesters to bridge fire

94
00:03:16,640 --> 00:03:18,720
and the latest country to join the list

95
00:03:18,720 --> 00:03:19,760
is thailand

96
00:03:19,760 --> 00:03:22,080
that moved to block certain independent

97
00:03:22,080 --> 00:03:24,239
media and also the messaging application

98
00:03:24,239 --> 00:03:25,920
telegram

99
00:03:25,920 --> 00:03:29,040
now of course given all these examples

100
00:03:29,040 --> 00:03:31,200
judging adoption on the ground purely

101
00:03:31,200 --> 00:03:33,040
from press reports and social media

102
00:03:33,040 --> 00:03:33,840
posts

103
00:03:33,840 --> 00:03:36,000
one could get an overblown picture of

104
00:03:36,000 --> 00:03:37,280
its actual use

105
00:03:37,280 --> 00:03:39,519
especially since for the mesh to work as

106
00:03:39,519 --> 00:03:40,319
advertised

107
00:03:40,319 --> 00:03:42,159
the app requires a certain critical

108
00:03:42,159 --> 00:03:43,920
number of users

109
00:03:43,920 --> 00:03:46,239
however there is sufficient evidence to

110
00:03:46,239 --> 00:03:47,040
suggest

111
00:03:47,040 --> 00:03:49,519
that whenever there was a new flareup of

112
00:03:49,519 --> 00:03:51,200
protest activity

113
00:03:51,200 --> 00:03:53,280
or a government move to limit internet

114
00:03:53,280 --> 00:03:55,120
access people downloaded and

115
00:03:55,120 --> 00:03:59,040
tried to use bridgevie in response

116
00:03:59,280 --> 00:04:02,000
so we took an interest and decided to

117
00:04:02,000 --> 00:04:04,560
investigate how secure this app was in

118
00:04:04,560 --> 00:04:06,879
reality

119
00:04:06,879 --> 00:04:08,799
since the source code was not available

120
00:04:08,799 --> 00:04:10,159
we reverse engineered

121
00:04:10,159 --> 00:04:12,720
the android app and this includes both

122
00:04:12,720 --> 00:04:13,280
the app

123
00:04:13,280 --> 00:04:16,000
and the software development kit that it

124
00:04:16,000 --> 00:04:17,199
ships with

125
00:04:17,199 --> 00:04:18,880
which is also available for other

126
00:04:18,880 --> 00:04:22,000
developers to build their mesh apps with

127
00:04:22,000 --> 00:04:26,000
so in short we focused on the case when

128
00:04:26,000 --> 00:04:28,479
internet is unavailable and so bluetooth

129
00:04:28,479 --> 00:04:29,199
is used

130
00:04:29,199 --> 00:04:30,960
and in particular focus just on

131
00:04:30,960 --> 00:04:34,160
bluetooth low energy

132
00:04:34,160 --> 00:04:36,400
the mesh that is composed of all devices

133
00:04:36,400 --> 00:04:37,840
with bridge fire installed

134
00:04:37,840 --> 00:04:40,000
is a managed flood-based network that

135
00:04:40,000 --> 00:04:42,080
uses time to lift counters that decrease

136
00:04:42,080 --> 00:04:45,280
on every hope and receipts that indicate

137
00:04:45,280 --> 00:04:46,479
that the mesh message has

138
00:04:46,479 --> 00:04:49,600
reached its destination

139
00:04:49,600 --> 00:04:51,520
the messages sent on this network are

140
00:04:51,520 --> 00:04:53,280
first compressed with gzip

141
00:04:53,280 --> 00:04:55,440
and then encrypted block by block using

142
00:04:55,440 --> 00:04:56,479
rsa

143
00:04:56,479 --> 00:05:00,639
using the deprecated pkcs1 version 1.5

144
00:05:00,639 --> 00:05:03,360
padding standard

145
00:05:03,360 --> 00:05:05,520
and without internet all devices that

146
00:05:05,520 --> 00:05:07,280
come into bluetooth range of each other

147
00:05:07,280 --> 00:05:09,360
automatically perform a handshake during

148
00:05:09,360 --> 00:05:11,039
which they exchange their

149
00:05:11,039 --> 00:05:14,160
public keys now

150
00:05:14,160 --> 00:05:16,880
in the setup we discovered a number of

151
00:05:16,880 --> 00:05:18,560
vulnerabilities

152
00:05:18,560 --> 00:05:21,520
so first an attacker with a physical

153
00:05:21,520 --> 00:05:23,759
presence can easily track bridge file

154
00:05:23,759 --> 00:05:26,479
users and reveal their social graphs

155
00:05:26,479 --> 00:05:29,600
just by passively observing the network

156
00:05:29,600 --> 00:05:31,360
further the handshake was not

157
00:05:31,360 --> 00:05:33,680
cryptographically authenticated it was

158
00:05:33,680 --> 00:05:34,800
only relying on

159
00:05:34,800 --> 00:05:36,960
user ids and bluetooth addresses to

160
00:05:36,960 --> 00:05:38,880
establish identity

161
00:05:38,880 --> 00:05:41,600
and as a result there was nothing

162
00:05:41,600 --> 00:05:43,120
stopping an attacker from

163
00:05:43,120 --> 00:05:46,639
impersonating any user as well as from

164
00:05:46,639 --> 00:05:47,280
performing

165
00:05:47,280 --> 00:05:49,360
a full attacker in the middle between

166
00:05:49,360 --> 00:05:50,560
any two users who

167
00:05:50,560 --> 00:05:53,840
are currently in range

168
00:05:54,000 --> 00:05:56,319
further while the use of pkcs1 version

169
00:05:56,319 --> 00:05:58,880
1.5 didn't immediately provide a padding

170
00:05:58,880 --> 00:05:59,919
oracle

171
00:05:59,919 --> 00:06:02,720
one could still be built thanks to the

172
00:06:02,720 --> 00:06:05,840
composition with gzip

173
00:06:05,840 --> 00:06:08,319
and so a new variant of blackenbacker's

174
00:06:08,319 --> 00:06:10,080
attack could be instantiated

175
00:06:10,080 --> 00:06:12,240
that could decrypt a message using on

176
00:06:12,240 --> 00:06:16,319
average to the 17 chosen ciphertext

177
00:06:16,319 --> 00:06:18,400
and finally it was possible to perform

178
00:06:18,400 --> 00:06:20,000
denial of service on the network

179
00:06:20,000 --> 00:06:22,319
by using a zip bomb which is just a

180
00:06:22,319 --> 00:06:24,479
small file that decompresses to a very

181
00:06:24,479 --> 00:06:26,800
large payload

182
00:06:26,800 --> 00:06:28,560
and we verified all these attacks in

183
00:06:28,560 --> 00:06:30,960
practice on android devices using

184
00:06:30,960 --> 00:06:33,840
frida which is a dynamic instrumentation

185
00:06:33,840 --> 00:06:35,120
toolkit that allows

186
00:06:35,120 --> 00:06:37,360
injecting scripts into running processes

187
00:06:37,360 --> 00:06:38,319
essentially in a

188
00:06:38,319 --> 00:06:41,199
blackbox manner

189
00:06:41,759 --> 00:06:43,520
i will now go through a short timeline

190
00:06:43,520 --> 00:06:45,680
of the disclosure process with bridgefy

191
00:06:45,680 --> 00:06:47,680
the company

192
00:06:47,680 --> 00:06:49,840
we first contacted them privately in

193
00:06:49,840 --> 00:06:51,360
april 2020

194
00:06:51,360 --> 00:06:53,599
initially offering the standard 90 days

195
00:06:53,599 --> 00:06:55,520
before public disclosure

196
00:06:55,520 --> 00:06:57,360
but after some back and forth this was

197
00:06:57,360 --> 00:07:00,000
moved to end of august

198
00:07:00,000 --> 00:07:02,240
however before the agreed date the

199
00:07:02,240 --> 00:07:04,240
company started partially informing its

200
00:07:04,240 --> 00:07:06,160
users about the existing issues

201
00:07:06,160 --> 00:07:09,759
in a somewhat non-standard manner

202
00:07:09,759 --> 00:07:11,520
they tweeted that they removed the

203
00:07:11,520 --> 00:07:13,280
encryption from the app

204
00:07:13,280 --> 00:07:16,400
so while this was not actually the case

205
00:07:16,400 --> 00:07:18,960
but the company said that this was their

206
00:07:18,960 --> 00:07:19,520
attempt

207
00:07:19,520 --> 00:07:22,160
to explain to users in a simple way that

208
00:07:22,160 --> 00:07:22,639
there

209
00:07:22,639 --> 00:07:25,199
are serious issues without having to say

210
00:07:25,199 --> 00:07:27,840
what exactly went wrong

211
00:07:27,840 --> 00:07:29,360
and they further announced that they

212
00:07:29,360 --> 00:07:32,319
were redoing their protocol from scratch

213
00:07:32,319 --> 00:07:34,400
however the app or its description on

214
00:07:34,400 --> 00:07:36,240
the app store didn't mention the issues

215
00:07:36,240 --> 00:07:38,400
and the app continued to be promoted in

216
00:07:38,400 --> 00:07:40,880
protest context

217
00:07:40,880 --> 00:07:42,880
now by the agreed date in august it

218
00:07:42,880 --> 00:07:44,400
wasn't clear what the timeline for the

219
00:07:44,400 --> 00:07:46,479
new protocols would be

220
00:07:46,479 --> 00:07:48,319
we considered moving the disclosure date

221
00:07:48,319 --> 00:07:50,240
forward but there was no assurance that

222
00:07:50,240 --> 00:07:51,919
this wouldn't happen again

223
00:07:51,919 --> 00:07:54,240
and also given the partial disclosures

224
00:07:54,240 --> 00:07:55,440
that already happened

225
00:07:55,440 --> 00:07:58,800
we decided to disclose as planned

226
00:07:58,800 --> 00:08:01,520
so we released an abridged version of

227
00:08:01,520 --> 00:08:02,319
our paper

228
00:08:02,319 --> 00:08:04,720
that came out alongside a media article

229
00:08:04,720 --> 00:08:06,560
informing about the dangers of

230
00:08:06,560 --> 00:08:09,440
using the app as it was then without

231
00:08:09,440 --> 00:08:11,120
actually giving away details of their

232
00:08:11,120 --> 00:08:13,520
implemented architecture

233
00:08:13,520 --> 00:08:15,440
and then bridge fire also published a

234
00:08:15,440 --> 00:08:16,639
statement of their own

235
00:08:16,639 --> 00:08:20,000
in which they confirmed the issues

236
00:08:20,000 --> 00:08:22,479
finally at the end of october the app

237
00:08:22,479 --> 00:08:23,360
was updated

238
00:08:23,360 --> 00:08:25,039
supposedly integrating the signal

239
00:08:25,039 --> 00:08:26,560
protocol

240
00:08:26,560 --> 00:08:28,319
however we have not reviewed these

241
00:08:28,319 --> 00:08:30,080
changes and so we cannot comment on

242
00:08:30,080 --> 00:08:30,879
whether the

243
00:08:30,879 --> 00:08:33,279
implementation is adequate and we

244
00:08:33,279 --> 00:08:34,640
recommend it to bridge file that they

245
00:08:34,640 --> 00:08:36,240
employ an independent audit

246
00:08:36,240 --> 00:08:39,519
if they can finally i would like to end

247
00:08:39,519 --> 00:08:41,360
with a couple of doubts

248
00:08:41,360 --> 00:08:43,039
so first of all you would be right to

249
00:08:43,039 --> 00:08:44,959
note that there was nothing particularly

250
00:08:44,959 --> 00:08:47,760
surprising about the attacks we found

251
00:08:47,760 --> 00:08:49,839
once the specification was extracted

252
00:08:49,839 --> 00:08:51,120
from the reverse engineered

253
00:08:51,120 --> 00:08:52,640
implementation it was kind of clear

254
00:08:52,640 --> 00:08:54,399
where it was going to go

255
00:08:54,399 --> 00:08:55,920
and one reason for that is of course

256
00:08:55,920 --> 00:08:58,240
that the app was not intended for the

257
00:08:58,240 --> 00:09:00,160
protest setting

258
00:09:00,160 --> 00:09:02,080
however we are kind of on thin ground

259
00:09:02,080 --> 00:09:04,080
here because once the trend picked up

260
00:09:04,080 --> 00:09:05,839
even the developers of bridge fight

261
00:09:05,839 --> 00:09:07,519
didn't shy away from explicitly

262
00:09:07,519 --> 00:09:08,000
promoting

263
00:09:08,000 --> 00:09:11,120
it as a protest app this brings me to

264
00:09:11,120 --> 00:09:11,920
another point

265
00:09:11,920 --> 00:09:13,839
and that is underscoring the need for

266
00:09:13,839 --> 00:09:15,839
applications to be evaluated under the

267
00:09:15,839 --> 00:09:17,680
conditions they are used in

268
00:09:17,680 --> 00:09:19,279
even if their designers have not

269
00:09:19,279 --> 00:09:22,080
imagined such use cases when they began

270
00:09:22,080 --> 00:09:23,920
and why do users turn to apps that are

271
00:09:23,920 --> 00:09:26,480
not really fit for purpose

272
00:09:26,480 --> 00:09:28,080
now here the simple answer is when

273
00:09:28,080 --> 00:09:30,160
nothing better can be found

274
00:09:30,160 --> 00:09:32,160
in the space of mobile mesh networking

275
00:09:32,160 --> 00:09:33,760
and that is without the need for

276
00:09:33,760 --> 00:09:35,040
additional hardware there are

277
00:09:35,040 --> 00:09:37,200
essentially no alternatives

278
00:09:37,200 --> 00:09:39,600
breyer gets mentioned here sometimes but

279
00:09:39,600 --> 00:09:41,440
it only allows direct connections

280
00:09:41,440 --> 00:09:43,360
without relaying private messages in the

281
00:09:43,360 --> 00:09:44,080
mesh

282
00:09:44,080 --> 00:09:46,480
so it's not really in the same category

283
00:09:46,480 --> 00:09:48,000
and so with this work we would also like

284
00:09:48,000 --> 00:09:49,600
to highlight the existing gap for

285
00:09:49,600 --> 00:09:51,920
technology designers

286
00:09:51,920 --> 00:09:53,600
and lastly we would also like to raise

287
00:09:53,600 --> 00:09:56,480
two open questions for security research

288
00:09:56,480 --> 00:09:58,640
first what security can even be achieved

289
00:09:58,640 --> 00:10:00,880
in the mesh setting in the first place

290
00:10:00,880 --> 00:10:02,399
well there is a lot of common ground

291
00:10:02,399 --> 00:10:04,240
with messaging protocols in general

292
00:10:04,240 --> 00:10:06,000
there are some features of this setting

293
00:10:06,000 --> 00:10:07,200
which mean that we may need to

294
00:10:07,200 --> 00:10:09,519
re-examine the notions that we deem to

295
00:10:09,519 --> 00:10:11,360
be ideal

296
00:10:11,360 --> 00:10:13,440
and second bringing back the focus to

297
00:10:13,440 --> 00:10:15,040
the users of these apps

298
00:10:15,040 --> 00:10:16,800
what security needs do protesters in

299
00:10:16,800 --> 00:10:18,720
these settings actually have

300
00:10:18,720 --> 00:10:20,480
we have somewhat glided over this in our

301
00:10:20,480 --> 00:10:22,480
analysis imagining scenarios and

302
00:10:22,480 --> 00:10:23,600
assuming that some

303
00:10:23,600 --> 00:10:25,680
basic properties are actually shared

304
00:10:25,680 --> 00:10:27,200
among many users

305
00:10:27,200 --> 00:10:28,800
whether or not they participate in a

306
00:10:28,800 --> 00:10:30,399
protest and whether or not that's in

307
00:10:30,399 --> 00:10:32,000
hong kong or one of the many other

308
00:10:32,000 --> 00:10:34,640
countries which included a vast range of

309
00:10:34,640 --> 00:10:37,279
regimes and potential threat models

310
00:10:37,279 --> 00:10:39,360
so therefore more fundamental research

311
00:10:39,360 --> 00:10:40,959
into this question is needed

312
00:10:40,959 --> 00:10:43,120
so that designers can avoid creating

313
00:10:43,120 --> 00:10:45,279
solutions that do not fit their users

314
00:10:45,279 --> 00:10:46,800
needs

315
00:10:46,800 --> 00:10:48,959
and thank you for listening and i'm

316
00:10:48,959 --> 00:10:52,479
happy to answer any questions

317
00:10:53,200 --> 00:10:55,600
great thank you for the presentation

318
00:10:55,600 --> 00:10:56,880
there's a question

319
00:10:56,880 --> 00:11:00,000
in the chat from james muir asking is

320
00:11:00,000 --> 00:11:04,079
there a place for pks cs1 v1.5 padding

321
00:11:04,079 --> 00:11:07,120
in modern crypto

322
00:11:07,120 --> 00:11:10,000
well it is a question to ask but i think

323
00:11:10,000 --> 00:11:10,399
that

324
00:11:10,399 --> 00:11:13,440
work like this shows that perhaps there

325
00:11:13,440 --> 00:11:14,880
isn't

326
00:11:14,880 --> 00:11:18,880
because i mean that would assume that

327
00:11:18,880 --> 00:11:19,440
there was

328
00:11:19,440 --> 00:11:22,880
there are attempts to make sure that it

329
00:11:22,880 --> 00:11:26,399
works fine but it shows that in general

330
00:11:26,399 --> 00:11:28,240
sometimes people may not be aware of

331
00:11:28,240 --> 00:11:30,480
these so as long as it's considered as

332
00:11:30,480 --> 00:11:30,880
an

333
00:11:30,880 --> 00:11:32,800
okay thing to use then people will

334
00:11:32,800 --> 00:11:34,720
probably keep using it and then we end

335
00:11:34,720 --> 00:11:35,200
up

336
00:11:35,200 --> 00:11:38,399
with attacks like these yeah i agree i

337
00:11:38,399 --> 00:11:39,279
think this

338
00:11:39,279 --> 00:11:40,720
is a good argument for removing these

339
00:11:40,720 --> 00:11:42,320
sort of things from the kind of code

340
00:11:42,320 --> 00:11:44,320
ecosystem that exists as a way to really

341
00:11:44,320 --> 00:11:46,000
explicitly deprecate them

342
00:11:46,000 --> 00:11:48,560
another question from watson lab are

343
00:11:48,560 --> 00:11:50,639
there physical or link layer issues that

344
00:11:50,639 --> 00:11:52,320
need to be considered in this context

345
00:11:52,320 --> 00:11:55,120
for anonymity

346
00:11:55,600 --> 00:11:58,800
um certainly there are

347
00:11:58,800 --> 00:12:02,560
but i am not an expert on the subject so

348
00:12:02,560 --> 00:12:05,040
i mean when we did this work we we

349
00:12:05,040 --> 00:12:06,560
weren't working on this

350
00:12:06,560 --> 00:12:08,399
layer at all so this is what this was

351
00:12:08,399 --> 00:12:10,320
all about um

352
00:12:10,320 --> 00:12:14,000
bluetooth but yes and in general

353
00:12:14,000 --> 00:12:16,720
there would be i don't know if that

354
00:12:16,720 --> 00:12:18,320
answers the question

355
00:12:18,320 --> 00:12:21,600
yeah i think it does um a question from

356
00:12:21,600 --> 00:12:21,920
jeff

357
00:12:21,920 --> 00:12:23,920
burgess um can you give an example of

358
00:12:23,920 --> 00:12:25,519
what you think the security goals for

359
00:12:25,519 --> 00:12:29,279
any particular mesh protocol should be

360
00:12:30,480 --> 00:12:33,839
um i think that's an open

361
00:12:33,839 --> 00:12:35,279
i mean we listed this as an open

362
00:12:35,279 --> 00:12:38,320
question for a reason so

363
00:12:38,320 --> 00:12:39,839
i think off the top of my head i would

364
00:12:39,839 --> 00:12:42,160
rather not speculate

365
00:12:42,160 --> 00:12:45,440
okay from kenny patterson um is there a

366
00:12:45,440 --> 00:12:46,560
big difference between

367
00:12:46,560 --> 00:12:48,880
ad hoc networks and mesh networks and

368
00:12:48,880 --> 00:12:50,399
security terms

369
00:12:50,399 --> 00:12:51,920
there's some literature on security and

370
00:12:51,920 --> 00:12:53,360
ad-hoc networks that could be drawn on

371
00:12:53,360 --> 00:12:56,639
from building better solutions

372
00:12:57,360 --> 00:13:00,320
i'm not entirely sure which part this is

373
00:13:00,320 --> 00:13:01,519
referring to

374
00:13:01,519 --> 00:13:03,839
whether this is ad hoc networks that are

375
00:13:03,839 --> 00:13:05,360
made up of

376
00:13:05,360 --> 00:13:08,320
still routers that serve users or is

377
00:13:08,320 --> 00:13:10,480
those networks that are

378
00:13:10,480 --> 00:13:12,720
um

379
00:13:13,519 --> 00:13:15,760
because usually even even when mesh

380
00:13:15,760 --> 00:13:17,360
comes up it's usually

381
00:13:17,360 --> 00:13:20,720
about not not really the users are not

382
00:13:20,720 --> 00:13:22,160
really part of the

383
00:13:22,160 --> 00:13:24,399
network as such they are only receivers

384
00:13:24,399 --> 00:13:25,519
still

385
00:13:25,519 --> 00:13:27,600
but this is a mesh network that is

386
00:13:27,600 --> 00:13:30,480
directly only between the mobile devices

387
00:13:30,480 --> 00:13:33,120
if that makes sense yeah i suppose the

388
00:13:33,120 --> 00:13:33,680
one way you

389
00:13:33,680 --> 00:13:35,200
might be able to read this is uh in

390
00:13:35,200 --> 00:13:36,639
terms of how much setup is done in

391
00:13:36,639 --> 00:13:38,160
advance for example with bridgewater i

392
00:13:38,160 --> 00:13:38,880
think

393
00:13:38,880 --> 00:13:42,079
the phones just show up in a context

394
00:13:42,079 --> 00:13:44,000
with no prior association and form a

395
00:13:44,000 --> 00:13:45,360
network entirely in their own whereas

396
00:13:45,360 --> 00:13:47,040
you can imagine a mesh network as

397
00:13:47,040 --> 00:13:48,560
say some more introductions among the

398
00:13:48,560 --> 00:13:49,519
nodes so you can have some more

399
00:13:49,519 --> 00:13:51,519
assurances between them

400
00:13:51,519 --> 00:13:55,839
yes finally one last question

401
00:13:55,839 --> 00:13:58,000
uh from cass cramer's do you have an

402
00:13:58,000 --> 00:14:00,000
intuition for how much the mesh network

403
00:14:00,000 --> 00:14:01,519
model differs from a more standard

404
00:14:01,519 --> 00:14:04,800
security model for signal

405
00:14:07,360 --> 00:14:10,160
i think the the biggest difference is

406
00:14:10,160 --> 00:14:11,279
just that

407
00:14:11,279 --> 00:14:12,720
in the signal model you can kind of

408
00:14:12,720 --> 00:14:14,800
forget where the participants are

409
00:14:14,800 --> 00:14:17,920
but here this is very much a part of the

410
00:14:17,920 --> 00:14:19,839
security model like are they

411
00:14:19,839 --> 00:14:22,000
physically together are they within you

412
00:14:22,000 --> 00:14:24,240
know four or five hops with it with

413
00:14:24,240 --> 00:14:28,000
of each other so um yeah i guess the

414
00:14:28,000 --> 00:14:32,720
the location is the part that's missing

415
00:14:32,959 --> 00:14:34,720
all right well thanks again for the

416
00:14:34,720 --> 00:14:36,240
presentation link this was

417
00:14:36,240 --> 00:14:39,600
interesting thank you

418
00:14:40,079 --> 00:14:43,519
next up i'd like to pass it over to um

419
00:14:43,519 --> 00:14:46,240
antonio martinez uh to talk about the

420
00:14:46,240 --> 00:14:47,920
work that his team at zoom has done uh

421
00:14:47,920 --> 00:14:48,240
on

422
00:14:48,240 --> 00:14:51,920
ends and encryption and identity there

423
00:14:54,079 --> 00:14:57,680
can you hear me yes please okay awesome

424
00:14:57,680 --> 00:14:59,120
hello everyone thanks for the

425
00:14:59,120 --> 00:15:01,680
introduction i am antonio mercedes

426
00:15:01,680 --> 00:15:03,600
a photography engineer working on

427
00:15:03,600 --> 00:15:06,480
end-to-end encryption at zoom

428
00:15:06,480 --> 00:15:09,680
so in may of last year our team

429
00:15:09,680 --> 00:15:11,519
published a white paper detailing

430
00:15:11,519 --> 00:15:13,600
a new design for end-to-end encryption

431
00:15:13,600 --> 00:15:14,639
or e2e

432
00:15:14,639 --> 00:15:16,320
and a strengthened notion of identity

433
00:15:16,320 --> 00:15:17,760
for zoom users

434
00:15:17,760 --> 00:15:19,519
we know that we opened our design up for

435
00:15:19,519 --> 00:15:21,760
public review and i've received a lot of

436
00:15:21,760 --> 00:15:24,079
useful feedback from the community

437
00:15:24,079 --> 00:15:26,480
since october just a few months after we

438
00:15:26,480 --> 00:15:27,360
started offering

439
00:15:27,360 --> 00:15:28,959
end-to-end encrypted meetings to all of

440
00:15:28,959 --> 00:15:30,560
our users

441
00:15:30,560 --> 00:15:32,480
in this quick talk i'll cover two main

442
00:15:32,480 --> 00:15:34,000
points first

443
00:15:34,000 --> 00:15:35,839
i'll describe a simplified version of

444
00:15:35,839 --> 00:15:37,759
the protocol which currently powers our

445
00:15:37,759 --> 00:15:39,600
e2e meetings

446
00:15:39,600 --> 00:15:41,600
then i'll give you a sneak peek at what

447
00:15:41,600 --> 00:15:43,440
we are currently working on

448
00:15:43,440 --> 00:15:45,040
i will argue that a strong notion of

449
00:15:45,040 --> 00:15:46,959
identity complements and improved the

450
00:15:46,959 --> 00:15:48,959
security provided by e2e

451
00:15:48,959 --> 00:15:50,720
and discuss how zoom is planning to

452
00:15:50,720 --> 00:15:52,560
build this identity

453
00:15:52,560 --> 00:15:54,079
note that for the sake of gravity i will

454
00:15:54,079 --> 00:15:55,759
be omitting some important details

455
00:15:55,759 --> 00:15:57,759
so please refer to our white paper to

456
00:15:57,759 --> 00:15:59,279
learn more

457
00:15:59,279 --> 00:16:01,600
let's start by looking at how we built

458
00:16:01,600 --> 00:16:02,560
e2e

459
00:16:02,560 --> 00:16:04,720
in a standard zoom meeting which uses

460
00:16:04,720 --> 00:16:06,720
what we call enhanced encryption

461
00:16:06,720 --> 00:16:08,959
the tomb server generates a symmetric

462
00:16:08,959 --> 00:16:10,800
meeting key and sends it to all the

463
00:16:10,800 --> 00:16:13,040
meeting participants

464
00:16:13,040 --> 00:16:14,959
this key is used to encrypt all the

465
00:16:14,959 --> 00:16:16,160
meeting streams

466
00:16:16,160 --> 00:16:18,399
and this ensures that any third parties

467
00:16:18,399 --> 00:16:20,160
and network attackers such as

468
00:16:20,160 --> 00:16:22,320
internet providers cannot eavesdrop on

469
00:16:22,320 --> 00:16:23,279
zoom meetings

470
00:16:23,279 --> 00:16:25,040
while allowing for features such as

471
00:16:25,040 --> 00:16:27,199
phone dialing and cloud recording

472
00:16:27,199 --> 00:16:29,120
which require the server to be able to

473
00:16:29,120 --> 00:16:31,600
decrypt the meeting streams

474
00:16:31,600 --> 00:16:33,279
on the other hand an end-to-end

475
00:16:33,279 --> 00:16:35,360
encryption meeting is one where only the

476
00:16:35,360 --> 00:16:36,959
communicating parties are able to

477
00:16:36,959 --> 00:16:38,639
decrypt the meeting streams

478
00:16:38,639 --> 00:16:40,720
this is really important as it protects

479
00:16:40,720 --> 00:16:43,279
the meeting against server compromise

480
00:16:43,279 --> 00:16:45,279
our protocol already supports meetings

481
00:16:45,279 --> 00:16:47,360
with up to a thousand participants

482
00:16:47,360 --> 00:16:49,120
and showcases an interesting trade-off

483
00:16:49,120 --> 00:16:51,120
between security performance and

484
00:16:51,120 --> 00:16:52,800
simplicity

485
00:16:52,800 --> 00:16:55,120
in our design since the server cannot

486
00:16:55,120 --> 00:16:56,720
generate generate the meeting here

487
00:16:56,720 --> 00:16:57,759
anymore we have

488
00:16:57,759 --> 00:17:00,240
one of the clients take that role we

489
00:17:00,240 --> 00:17:02,240
call such client the leader

490
00:17:02,240 --> 00:17:04,160
this is typically the meeting host which

491
00:17:04,160 --> 00:17:05,599
already has control of several

492
00:17:05,599 --> 00:17:07,039
administrative functions

493
00:17:07,039 --> 00:17:08,799
such as the ability to mute and kick

494
00:17:08,799 --> 00:17:11,599
participants out of the meeting

495
00:17:11,599 --> 00:17:13,760
before we get to how the meeting key is

496
00:17:13,760 --> 00:17:15,839
communicated to meeting participants we

497
00:17:15,839 --> 00:17:17,919
have to introduce a few more details

498
00:17:17,919 --> 00:17:18,559
first

499
00:17:18,559 --> 00:17:20,720
each zoom device keeps a long-term

500
00:17:20,720 --> 00:17:22,160
sign-in keeper

501
00:17:22,160 --> 00:17:24,000
the public key is advertised to all

502
00:17:24,000 --> 00:17:25,760
other participants during the meeting

503
00:17:25,760 --> 00:17:27,520
while the private key never leaves the

504
00:17:27,520 --> 00:17:29,200
device this key

505
00:17:29,200 --> 00:17:32,160
identifies the devices across meetings

506
00:17:32,160 --> 00:17:33,760
and will be the basis of the notion of

507
00:17:33,760 --> 00:17:35,600
user identity which we are currently

508
00:17:35,600 --> 00:17:38,000
working on

509
00:17:38,000 --> 00:17:40,160
so in addition to the long term signing

510
00:17:40,160 --> 00:17:42,720
key for each meeting each participant

511
00:17:42,720 --> 00:17:45,200
also generates an ephemeral defiant

512
00:17:45,200 --> 00:17:46,880
encryption keeper

513
00:17:46,880 --> 00:17:49,600
then it signs the public defeatment key

514
00:17:49,600 --> 00:17:51,200
with its device signing key

515
00:17:51,200 --> 00:17:53,039
and broadcasts it to the meeting through

516
00:17:53,039 --> 00:17:55,600
the server

517
00:17:56,080 --> 00:17:57,760
the leader can then compute a shared

518
00:17:57,760 --> 00:17:59,520
ephemeral defilement cigarette with each

519
00:17:59,520 --> 00:18:00,400
participant

520
00:18:00,400 --> 00:18:02,320
and use it to send them an authenticated

521
00:18:02,320 --> 00:18:05,760
encryption of the current meeting key

522
00:18:05,760 --> 00:18:07,919
when users join and leave the meeting

523
00:18:07,919 --> 00:18:09,679
they meet the meeting leader also

524
00:18:09,679 --> 00:18:11,280
rotates the midi key

525
00:18:11,280 --> 00:18:12,799
so that each participant can only

526
00:18:12,799 --> 00:18:14,480
decrypt the sections of a meeting in

527
00:18:14,480 --> 00:18:16,400
which they participated

528
00:18:16,400 --> 00:18:18,880
if there is too much churn key rotations

529
00:18:18,880 --> 00:18:21,360
are throttled for efficiency

530
00:18:21,360 --> 00:18:23,200
if the leader changes for example

531
00:18:23,200 --> 00:18:24,480
because the original leader

532
00:18:24,480 --> 00:18:27,039
lost connection or left the new leader

533
00:18:27,039 --> 00:18:28,000
picks a new key

534
00:18:28,000 --> 00:18:31,919
and sends it to other participants

535
00:18:32,240 --> 00:18:34,559
the leader also periodically broadcasts

536
00:18:34,559 --> 00:18:35,760
signed heartbeats

537
00:18:35,760 --> 00:18:37,760
which include the current key generation

538
00:18:37,760 --> 00:18:38,799
as well as the list

539
00:18:38,799 --> 00:18:40,320
of the meeting participants which have

540
00:18:40,320 --> 00:18:42,080
the current meeting key

541
00:18:42,080 --> 00:18:44,640
this list is used to render the ui and

542
00:18:44,640 --> 00:18:45,360
ensures that

543
00:18:45,360 --> 00:18:47,200
other participants know who else is in

544
00:18:47,200 --> 00:18:48,480
the meeting

545
00:18:48,480 --> 00:18:51,039
since participants expect these periodic

546
00:18:51,039 --> 00:18:51,760
heartbeats

547
00:18:51,760 --> 00:18:54,840
the server cannot withhold key rotation

548
00:18:54,840 --> 00:18:56,080
messages

549
00:18:56,080 --> 00:18:58,559
also note that in this phase the display

550
00:18:58,559 --> 00:19:00,080
names which are shown in the ui

551
00:19:00,080 --> 00:19:02,160
can be picked and changed arbitrarily

552
00:19:02,160 --> 00:19:03,679
and so they cannot be used for

553
00:19:03,679 --> 00:19:06,799
identification purposes

554
00:19:06,799 --> 00:19:08,880
the problem that we described so far

555
00:19:08,880 --> 00:19:11,039
provides security against ease droppers

556
00:19:11,039 --> 00:19:12,640
who monitor the communication

557
00:19:12,640 --> 00:19:14,960
without tampering with the messages

558
00:19:14,960 --> 00:19:15,679
however

559
00:19:15,679 --> 00:19:17,840
without a way to confidently associate

560
00:19:17,840 --> 00:19:20,080
each user with their own long term keys

561
00:19:20,080 --> 00:19:22,000
it is hard to prevent active meddler in

562
00:19:22,000 --> 00:19:23,679
the middle attacks and to know who

563
00:19:23,679 --> 00:19:25,760
really is in the meeting

564
00:19:25,760 --> 00:19:27,840
to prevent these attacks we currently

565
00:19:27,840 --> 00:19:30,240
offer the meeting leader security code

566
00:19:30,240 --> 00:19:32,640
a hash of the current leader's long-term

567
00:19:32,640 --> 00:19:33,520
public key

568
00:19:33,520 --> 00:19:35,280
which all the participants should verify

569
00:19:35,280 --> 00:19:37,760
on their screens either out of band

570
00:19:37,760 --> 00:19:40,400
or by reading it during the meeting

571
00:19:40,400 --> 00:19:42,320
checking this code is a really if port

572
00:19:42,320 --> 00:19:44,000
operation and it needs to be repeated

573
00:19:44,000 --> 00:19:45,440
for every new participant

574
00:19:45,440 --> 00:19:48,000
or when the leader changes it also does

575
00:19:48,000 --> 00:19:49,760
not offer protection against people

576
00:19:49,760 --> 00:19:51,440
posing as your colleagues to infiltrate

577
00:19:51,440 --> 00:19:53,200
your meetings

578
00:19:53,200 --> 00:19:56,240
this motivates our ongoing work to build

579
00:19:56,240 --> 00:19:59,360
an ocean of identity

580
00:19:59,360 --> 00:20:01,200
the identity that we're building will

581
00:20:01,200 --> 00:20:03,280
consist of two components

582
00:20:03,280 --> 00:20:05,280
first is a set of human friendly user

583
00:20:05,280 --> 00:20:07,280
identifiers which we can display

584
00:20:07,280 --> 00:20:08,799
during the meetings in the participant

585
00:20:08,799 --> 00:20:10,400
list we use

586
00:20:10,400 --> 00:20:12,880
a domain name to identify the account

587
00:20:12,880 --> 00:20:14,559
which a user is part of

588
00:20:14,559 --> 00:20:17,360
such as a company or school identifying

589
00:20:17,360 --> 00:20:18,880
the organization one works for

590
00:20:18,880 --> 00:20:20,320
is often the most important piece of a

591
00:20:20,320 --> 00:20:22,000
user's identity

592
00:20:22,000 --> 00:20:24,080
to identify individual users within an

593
00:20:24,080 --> 00:20:27,280
account we use the email address

594
00:20:27,280 --> 00:20:29,679
the second component of each identity is

595
00:20:29,679 --> 00:20:30,640
a list of names

596
00:20:30,640 --> 00:20:32,159
and signing public keys for all the

597
00:20:32,159 --> 00:20:35,120
user's devices

598
00:20:35,120 --> 00:20:37,360
some identities are mutable users can

599
00:20:37,360 --> 00:20:39,280
move between accounts can change their

600
00:20:39,280 --> 00:20:39,760
email

601
00:20:39,760 --> 00:20:42,400
and change their set of devices we store

602
00:20:42,400 --> 00:20:44,480
an identity as an append-only list of

603
00:20:44,480 --> 00:20:47,120
statements that describe these changes

604
00:20:47,120 --> 00:20:49,120
this makes the changes it is easily

605
00:20:49,120 --> 00:20:51,200
auditable and clients can show the user

606
00:20:51,200 --> 00:20:52,240
notifications

607
00:20:52,240 --> 00:20:55,440
when their own identity changes this

608
00:20:55,440 --> 00:20:56,640
notion of identity

609
00:20:56,640 --> 00:21:00,080
will enable several important features

610
00:21:00,080 --> 00:21:02,159
first clients will remember the

611
00:21:02,159 --> 00:21:04,320
identities of their meeting participants

612
00:21:04,320 --> 00:21:06,559
this way if one of the regular meeting

613
00:21:06,559 --> 00:21:08,080
partners is suddenly

614
00:21:08,080 --> 00:21:10,400
using a different device or public key a

615
00:21:10,400 --> 00:21:12,480
user can be shown a warning that invites

616
00:21:12,480 --> 00:21:14,480
them to check the security code

617
00:21:14,480 --> 00:21:16,159
this creates a trust on first use

618
00:21:16,159 --> 00:21:18,240
guarantee which is similar to what users

619
00:21:18,240 --> 00:21:19,679
get in signal or whatsapp

620
00:21:19,679 --> 00:21:21,360
when their conversation partners

621
00:21:21,360 --> 00:21:24,480
reinstall their app or switch phones

622
00:21:24,480 --> 00:21:27,200
however in our case these warnings take

623
00:21:27,200 --> 00:21:29,200
into account the multi-device nature of

624
00:21:29,200 --> 00:21:31,120
doom identities

625
00:21:31,120 --> 00:21:33,760
older devices can sign statements at

626
00:21:33,760 --> 00:21:35,120
proving newer ones

627
00:21:35,120 --> 00:21:36,640
so that clients who add meetings with

628
00:21:36,640 --> 00:21:38,640
their old device will not show warnings

629
00:21:38,640 --> 00:21:39,039
with

630
00:21:39,039 --> 00:21:42,000
when interacting with the newer devices

631
00:21:42,000 --> 00:21:42,720
moreover

632
00:21:42,720 --> 00:21:44,880
devices from the same user can share

633
00:21:44,880 --> 00:21:46,640
information about the identity of the

634
00:21:46,640 --> 00:21:48,000
users they met with

635
00:21:48,000 --> 00:21:49,919
which further minimizes unnecessary

636
00:21:49,919 --> 00:21:52,400
warnings

637
00:21:52,559 --> 00:21:55,440
we just described how clients keep track

638
00:21:55,440 --> 00:21:57,440
of their meeting partners identities

639
00:21:57,440 --> 00:21:59,280
we also want to ensure that the server

640
00:21:59,280 --> 00:22:01,120
cannot give different clients

641
00:22:01,120 --> 00:22:04,320
a different view of any user's identity

642
00:22:04,320 --> 00:22:06,799
to solve this problem zoom will deploy a

643
00:22:06,799 --> 00:22:08,799
transparency tree an authenticated data

644
00:22:08,799 --> 00:22:09,520
structure

645
00:22:09,520 --> 00:22:11,520
backed by a merkle tree which allows the

646
00:22:11,520 --> 00:22:13,440
server to commit to the identities of

647
00:22:13,440 --> 00:22:14,559
all the zoom users

648
00:22:14,559 --> 00:22:17,280
through a short digest two will open

649
00:22:17,280 --> 00:22:19,039
source code which will allow external

650
00:22:19,039 --> 00:22:19,760
auditors

651
00:22:19,760 --> 00:22:21,919
in a privacy preserving way to guarantee

652
00:22:21,919 --> 00:22:23,520
that identity statements cannot be

653
00:22:23,520 --> 00:22:25,440
removed from the tree

654
00:22:25,440 --> 00:22:27,039
clients will contact the auditors to

655
00:22:27,039 --> 00:22:28,720
efficiently check that their view of the

656
00:22:28,720 --> 00:22:32,240
data structure is consistent

657
00:22:32,400 --> 00:22:35,200
in practice that means that if zoom

658
00:22:35,200 --> 00:22:36,640
squares to add an extra device to

659
00:22:36,640 --> 00:22:37,760
alice's identity

660
00:22:37,760 --> 00:22:39,520
for example in order to impersonate them

661
00:22:39,520 --> 00:22:41,679
in a meeting evidence of this device

662
00:22:41,679 --> 00:22:43,919
cannot be erased and this action will be

663
00:22:43,919 --> 00:22:46,400
detected by alice

664
00:22:46,400 --> 00:22:48,400
a consistent notion of identity and the

665
00:22:48,400 --> 00:22:50,320
ability to detect impersonation attacks

666
00:22:50,320 --> 00:22:51,520
after fact

667
00:22:51,520 --> 00:22:54,000
reduces the need to check security codes

668
00:22:54,000 --> 00:22:56,960
but we want to go farther

669
00:22:56,960 --> 00:22:59,440
in particular many businesses already

670
00:22:59,440 --> 00:23:01,280
delegate their authentication and

671
00:23:01,280 --> 00:23:02,320
identity needs

672
00:23:02,320 --> 00:23:05,039
to external external identity providers

673
00:23:05,039 --> 00:23:05,840
which offer

674
00:23:05,840 --> 00:23:07,679
a centralized service to manage access

675
00:23:07,679 --> 00:23:10,400
control to several company resources

676
00:23:10,400 --> 00:23:12,159
and allow users to use a single set of

677
00:23:12,159 --> 00:23:13,520
credentials to access these

678
00:23:13,520 --> 00:23:16,720
resources we will partner with identity

679
00:23:16,720 --> 00:23:17,520
providers

680
00:23:17,520 --> 00:23:19,679
which would issue signed cryptographic

681
00:23:19,679 --> 00:23:20,720
attestations

682
00:23:20,720 --> 00:23:22,559
validating that a user belongs to a

683
00:23:22,559 --> 00:23:24,159
company's account

684
00:23:24,159 --> 00:23:26,480
this prevents a compromised boom server

685
00:23:26,480 --> 00:23:28,640
from impersonating any users in that

686
00:23:28,640 --> 00:23:30,240
account

687
00:23:30,240 --> 00:23:32,559
to generate this attestation we extend

688
00:23:32,559 --> 00:23:34,240
the open id connect

689
00:23:34,240 --> 00:23:37,440
connect protocol with a new attribute

690
00:23:37,440 --> 00:23:39,840
so first alice will authenticate to the

691
00:23:39,840 --> 00:23:41,279
identity provider using

692
00:23:41,279 --> 00:23:44,320
auth then alice can

693
00:23:44,320 --> 00:23:46,880
ask for a signed open id connect

694
00:23:46,880 --> 00:23:48,799
identity token which includes the hash

695
00:23:48,799 --> 00:23:50,960
of r2 identity

696
00:23:50,960 --> 00:23:53,039
and here we need to take special care so

697
00:23:53,039 --> 00:23:54,799
that the zoom server cannot request

698
00:23:54,799 --> 00:23:56,720
these tokens

699
00:23:56,720 --> 00:23:59,120
then the token can be presented can be

700
00:23:59,120 --> 00:24:01,200
presented to alice's meeting partners

701
00:24:01,200 --> 00:24:03,120
along with the rest of their identity so

702
00:24:03,120 --> 00:24:05,039
recipients can check that the identity

703
00:24:05,039 --> 00:24:05,840
provider is

704
00:24:05,840 --> 00:24:08,559
authorized for alice's account by

705
00:24:08,559 --> 00:24:10,480
retrieving a simple json file

706
00:24:10,480 --> 00:24:13,279
from the company's website over tls then

707
00:24:13,279 --> 00:24:15,279
they can validate the identity and the

708
00:24:15,279 --> 00:24:18,320
token signed by the identity provider

709
00:24:18,320 --> 00:24:20,799
in short rather than relying on the

710
00:24:20,799 --> 00:24:22,080
users to detect them

711
00:24:22,080 --> 00:24:24,400
identity provider attestations prevent

712
00:24:24,400 --> 00:24:25,919
impersonations from happening in the

713
00:24:25,919 --> 00:24:28,400
first place

714
00:24:28,480 --> 00:24:30,400
in conclusion zoom is pushing the

715
00:24:30,400 --> 00:24:32,720
boundary for secure end-to-end encrypted

716
00:24:32,720 --> 00:24:33,760
meanings

717
00:24:33,760 --> 00:24:35,600
we currently support up to a thousand

718
00:24:35,600 --> 00:24:38,080
participants and we believe that the

719
00:24:38,080 --> 00:24:40,159
novel identity notion we're building

720
00:24:40,159 --> 00:24:42,000
will provide the first italy meeting

721
00:24:42,000 --> 00:24:43,679
experience which is secure against

722
00:24:43,679 --> 00:24:44,159
active

723
00:24:44,159 --> 00:24:47,279
tax without relying on security codes

724
00:24:47,279 --> 00:24:48,960
that's all i had for you today thanks

725
00:24:48,960 --> 00:24:51,200
for your attention if you are interested

726
00:24:51,200 --> 00:24:52,159
please read our

727
00:24:52,159 --> 00:24:53,840
white paper we would love to hear your

728
00:24:53,840 --> 00:24:57,600
feedback and i take any questions

729
00:24:57,840 --> 00:24:59,919
thanks antonio we have a few questions

730
00:24:59,919 --> 00:25:01,200
queued up in the chat

731
00:25:01,200 --> 00:25:02,559
i'm going to take the the privilege of

732
00:25:02,559 --> 00:25:03,840
the session share and take the first

733
00:25:03,840 --> 00:25:05,039
question

734
00:25:05,039 --> 00:25:07,200
your description of the idp based

735
00:25:07,200 --> 00:25:09,120
identity has

736
00:25:09,120 --> 00:25:12,159
one participant sending an a token

737
00:25:12,159 --> 00:25:15,600
to another participant um which

738
00:25:15,600 --> 00:25:17,360
i find is a little surprising to me

739
00:25:17,360 --> 00:25:18,720
because those are often used as bearer

740
00:25:18,720 --> 00:25:20,400
tokens on so there's a risk of

741
00:25:20,400 --> 00:25:21,919
token replay is is there a way you're

742
00:25:21,919 --> 00:25:23,840
addressing that risk in this system

743
00:25:23,840 --> 00:25:26,960
yes so we're so the details of the

744
00:25:26,960 --> 00:25:29,840
um of the of this part of the world are

745
00:25:29,840 --> 00:25:30,320
still

746
00:25:30,320 --> 00:25:32,880
like you know being uh sorted out but

747
00:25:32,880 --> 00:25:33,440
essentially

748
00:25:33,440 --> 00:25:35,919
we we plan to use a different type of

749
00:25:35,919 --> 00:25:36,720
token

750
00:25:36,720 --> 00:25:40,000
uh to differentiate these kinds of um

751
00:25:40,000 --> 00:25:42,559
tokens that are supposed to uh convey

752
00:25:42,559 --> 00:25:43,120
the

753
00:25:43,120 --> 00:25:46,320
link between a user's identity uh and

754
00:25:46,320 --> 00:25:47,440
their public keys

755
00:25:47,440 --> 00:25:50,880
from like the other better tokens

756
00:25:50,880 --> 00:25:54,000
um okay great thank you let me get some

757
00:25:54,000 --> 00:25:55,360
some of the chat questions

758
00:25:55,360 --> 00:25:58,080
um question from kevin mccurley we don't

759
00:25:58,080 --> 00:26:00,000
require users right now to provide an

760
00:26:00,000 --> 00:26:01,840
email address to zoom in order to join a

761
00:26:01,840 --> 00:26:02,400
room

762
00:26:02,400 --> 00:26:03,840
does this mean that a user that doesn't

763
00:26:03,840 --> 00:26:05,520
provide an identity can't benefit from

764
00:26:05,520 --> 00:26:06,640
ede

765
00:26:06,640 --> 00:26:09,440
that's a great question so we we still

766
00:26:09,440 --> 00:26:10,000
offer

767
00:26:10,000 --> 00:26:12,960
we we plan to still offer the users the

768
00:26:12,960 --> 00:26:14,080
opportunity to

769
00:26:14,080 --> 00:26:17,200
join as guests um which will mean that

770
00:26:17,200 --> 00:26:19,039
they don't have to share neither an

771
00:26:19,039 --> 00:26:21,200
identity nor an account

772
00:26:21,200 --> 00:26:24,960
um and so in that case we will have

773
00:26:24,960 --> 00:26:26,400
people will have to rely more on

774
00:26:26,400 --> 00:26:28,240
security codes and the

775
00:26:28,240 --> 00:26:31,840
contact sync feature to to see if this

776
00:26:31,840 --> 00:26:32,960
is like the new

777
00:26:32,960 --> 00:26:34,320
the first time you're meeting like a

778
00:26:34,320 --> 00:26:36,080
specific with a specific device

779
00:26:36,080 --> 00:26:37,120
and it's the first time you see the

780
00:26:37,120 --> 00:26:40,000
public key or you know in case of uh

781
00:26:40,000 --> 00:26:42,799
of a guest that uses like a like a brand

782
00:26:42,799 --> 00:26:43,360
new

783
00:26:43,360 --> 00:26:44,799
device or a brand new key you would have

784
00:26:44,799 --> 00:26:46,480
to like check the security code in order

785
00:26:46,480 --> 00:26:47,919
to be sure that there are no

786
00:26:47,919 --> 00:26:50,080
man-in-the-middle attacks but of course

787
00:26:50,080 --> 00:26:52,400
there's like a trade-off there and

788
00:26:52,400 --> 00:26:56,240
you know even if you even if you um

789
00:26:56,240 --> 00:26:58,799
plan to disclose that you are part of a

790
00:26:58,799 --> 00:27:01,600
specific account we offer the option to

791
00:27:01,600 --> 00:27:04,640
hide your email um there as well so you

792
00:27:04,640 --> 00:27:05,039
can

793
00:27:05,039 --> 00:27:07,600
say i'm i can work for bank of america

794
00:27:07,600 --> 00:27:09,440
but i'm not disclosing what my email

795
00:27:09,440 --> 00:27:11,919
address is

796
00:27:12,240 --> 00:27:14,640
next question from nigel smart um if the

797
00:27:14,640 --> 00:27:16,480
streams are encrypted end to end

798
00:27:16,480 --> 00:27:18,480
how is audio merging done i'll add into

799
00:27:18,480 --> 00:27:20,080
that things like video

800
00:27:20,080 --> 00:27:23,520
layer selection or transcoding how is

801
00:27:23,520 --> 00:27:25,279
the video merged with the audio

802
00:27:25,279 --> 00:27:27,760
is that the question yeah so uh how is

803
00:27:27,760 --> 00:27:29,120
he says how's audio merging

804
00:27:29,120 --> 00:27:30,559
which i think he means um taking

805
00:27:30,559 --> 00:27:32,320
multiple audio streams and putting them

806
00:27:32,320 --> 00:27:34,320
into one for for a receiver

807
00:27:34,320 --> 00:27:36,720
so the the way that the zoom works is

808
00:27:36,720 --> 00:27:38,640
that the streams are not there's no

809
00:27:38,640 --> 00:27:39,919
processing by the server

810
00:27:39,919 --> 00:27:41,679
so the streams are all conveyed to the

811
00:27:41,679 --> 00:27:43,520
client like independently

812
00:27:43,520 --> 00:27:46,240
um and so that's of the solve the issue

813
00:27:46,240 --> 00:27:47,520
each participant

814
00:27:47,520 --> 00:27:49,760
uploads like different streams at

815
00:27:49,760 --> 00:27:51,279
different resolutions and there is some

816
00:27:51,279 --> 00:27:51,919
logic

817
00:27:51,919 --> 00:27:53,520
in the server that can deliver to each

818
00:27:53,520 --> 00:27:55,039
participant the streams that they're

819
00:27:55,039 --> 00:27:57,039
interested in

820
00:27:57,039 --> 00:27:59,440
but you know there's no merging done by

821
00:27:59,440 --> 00:28:02,080
the server

822
00:28:02,080 --> 00:28:04,240
next from watson lad um is this

823
00:28:04,240 --> 00:28:06,240
something that could be used for mls in

824
00:28:06,240 --> 00:28:09,120
a more open way

825
00:28:09,440 --> 00:28:12,399
so the our setting is different from the

826
00:28:12,399 --> 00:28:13,279
secting

827
00:28:13,279 --> 00:28:16,559
of mls mainly because uh our setting

828
00:28:16,559 --> 00:28:18,480
is uh synchronous so we assume that

829
00:28:18,480 --> 00:28:20,320
everybody's online at that time and the

830
00:28:20,320 --> 00:28:23,360
sessions are short-lived so we we we

831
00:28:23,360 --> 00:28:25,440
worry less about forward secrecy

832
00:28:25,440 --> 00:28:27,679
so we use ephemeral keys which means

833
00:28:27,679 --> 00:28:29,360
that that are generated at the beginning

834
00:28:29,360 --> 00:28:29,760
of

835
00:28:29,760 --> 00:28:32,960
a meeting um but for example

836
00:28:32,960 --> 00:28:35,039
uh we don't provide forward secrecy

837
00:28:35,039 --> 00:28:36,559
within the meeting we only provide

838
00:28:36,559 --> 00:28:37,600
forward secrecy

839
00:28:37,600 --> 00:28:39,279
like after the meeting is over which

840
00:28:39,279 --> 00:28:40,640
means that like essentially after the

841
00:28:40,640 --> 00:28:42,640
meeting is over every participant will

842
00:28:42,640 --> 00:28:46,159
delete their small secret keys um and so

843
00:28:46,159 --> 00:28:48,559
this product would not be like a good

844
00:28:48,559 --> 00:28:49,919
replacement for affecting

845
00:28:49,919 --> 00:28:53,840
like mls okay thank you

846
00:28:53,840 --> 00:28:56,559
um next from renee marhoffer how often

847
00:28:56,559 --> 00:28:57,360
do you expect

848
00:28:57,360 --> 00:28:59,360
device specific keys bound to the same

849
00:28:59,360 --> 00:29:01,120
user identity to change

850
00:29:01,120 --> 00:29:02,559
uh practical experience with things like

851
00:29:02,559 --> 00:29:04,000
wire shows that people are easily

852
00:29:04,000 --> 00:29:05,520
overloaded by tracking other people's

853
00:29:05,520 --> 00:29:07,600
device changes

854
00:29:07,600 --> 00:29:09,760
so

855
00:29:10,640 --> 00:29:13,679
we we are planning to offer uh

856
00:29:13,679 --> 00:29:15,600
people the opportunity to rotate their

857
00:29:15,600 --> 00:29:18,080
keys the their device keys

858
00:29:18,080 --> 00:29:20,000
uh but in practice we don't expect them

859
00:29:20,000 --> 00:29:21,520
to change very often

860
00:29:21,520 --> 00:29:23,520
and of course there is like a trade-off

861
00:29:23,520 --> 00:29:24,960
between like uh

862
00:29:24,960 --> 00:29:28,159
privacy and like

863
00:29:28,720 --> 00:29:32,000
compromise recovery essentially um

864
00:29:32,000 --> 00:29:34,880
but we don't expect these uh these

865
00:29:34,880 --> 00:29:35,840
changes to happen

866
00:29:35,840 --> 00:29:38,880
to us very often okay

867
00:29:38,880 --> 00:29:40,559
and finally one question from about

868
00:29:40,559 --> 00:29:42,240
omara

869
00:29:42,240 --> 00:29:46,080
how does zoom ede integrate with srtp

870
00:29:46,080 --> 00:29:48,480
um does it expose media metadata for the

871
00:29:48,480 --> 00:29:52,159
media server to route streams properly

872
00:29:52,320 --> 00:29:55,440
uh i'm not sure about the

873
00:29:55,440 --> 00:29:58,720
details of like the

874
00:29:58,720 --> 00:30:00,320
how the metadata for the streams is

875
00:30:00,320 --> 00:30:01,760
communicated but

876
00:30:01,760 --> 00:30:03,919
i can tell you that uh um as far as they

877
00:30:03,919 --> 00:30:04,799
know they

878
00:30:04,799 --> 00:30:06,320
they can't they call the messages that

879
00:30:06,320 --> 00:30:08,960
are like on the on the control channel

880
00:30:08,960 --> 00:30:11,520
so everything that's not actual streams

881
00:30:11,520 --> 00:30:13,440
travels over an encrypted tcp

882
00:30:13,440 --> 00:30:15,279
tls connection to the to the doom

883
00:30:15,279 --> 00:30:16,640
servers and then

884
00:30:16,640 --> 00:30:20,799
the the actual encrypted packets um

885
00:30:20,799 --> 00:30:23,440
that go over udp those are sent directly

886
00:30:23,440 --> 00:30:25,679
um on the network but

887
00:30:25,679 --> 00:30:28,159
so i imagine most of the metadata uh

888
00:30:28,159 --> 00:30:29,360
goes over there

889
00:30:29,360 --> 00:30:32,640
over tls but to be honest i haven't

890
00:30:32,640 --> 00:30:34,080
looked at the details of how

891
00:30:34,080 --> 00:30:37,440
that part is

892
00:30:37,440 --> 00:30:40,960
implemented okay thank you um

893
00:30:40,960 --> 00:30:42,159
and i think that's that's the end of the

894
00:30:42,159 --> 00:30:43,440
question time we had so thanks again for

895
00:30:43,440 --> 00:30:46,320
your presentation today

896
00:30:46,480 --> 00:30:47,919
and now we'll go for our last

897
00:30:47,919 --> 00:30:50,720
presentation of paul rosler

898
00:30:50,720 --> 00:30:53,120
talking about uh resolving concurrency

899
00:30:53,120 --> 00:30:55,200
issues and group graduating protocols

900
00:30:55,200 --> 00:30:58,399
so paul please yeah thank you very much

901
00:30:58,399 --> 00:31:00,720
uh richard uh this is joint work

902
00:31:00,720 --> 00:31:02,320
together with alexander beanstalk and

903
00:31:02,320 --> 00:31:03,519
you have guinea doris

904
00:31:03,519 --> 00:31:05,600
and we will start directly with the

905
00:31:05,600 --> 00:31:07,440
motivation so we are looking at group

906
00:31:07,440 --> 00:31:08,480
messaging

907
00:31:08,480 --> 00:31:10,240
and the motivating example that we look

908
00:31:10,240 --> 00:31:12,320
at is an activist group so we heard a

909
00:31:12,320 --> 00:31:13,279
lot about

910
00:31:13,279 --> 00:31:16,000
such protesting organizations and the

911
00:31:16,000 --> 00:31:17,279
threat that these

912
00:31:17,279 --> 00:31:20,399
users are faced with is potentially that

913
00:31:20,399 --> 00:31:22,080
some of the group members

914
00:31:22,080 --> 00:31:24,559
may be arrested by the police and the

915
00:31:24,559 --> 00:31:25,679
police then may

916
00:31:25,679 --> 00:31:28,799
obtain a copy of the key material if the

917
00:31:28,799 --> 00:31:29,679
users or

918
00:31:29,679 --> 00:31:32,000
the group members the activists have

919
00:31:32,000 --> 00:31:33,440
their phone with them when they are

920
00:31:33,440 --> 00:31:34,159
arrested

921
00:31:34,159 --> 00:31:36,240
and so the key material when being

922
00:31:36,240 --> 00:31:38,720
leaked to the adversary

923
00:31:38,720 --> 00:31:42,000
which is in this case the police leads

924
00:31:42,000 --> 00:31:42,880
to

925
00:31:42,880 --> 00:31:44,640
the breach of the confidentiality of the

926
00:31:44,640 --> 00:31:47,120
group messages so this is not good

927
00:31:47,120 --> 00:31:49,679
a trivial solution for bypassing this

928
00:31:49,679 --> 00:31:51,760
issue would be that the remaining

929
00:31:51,760 --> 00:31:54,080
group members just reopen another group

930
00:31:54,080 --> 00:31:55,919
and just starting there again without

931
00:31:55,919 --> 00:31:56,720
those who have been

932
00:31:56,720 --> 00:31:58,799
arrested but the problem is that

933
00:31:58,799 --> 00:32:00,240
sometimes such a

934
00:32:00,240 --> 00:32:02,720
exposure of the key material is not

935
00:32:02,720 --> 00:32:03,760
directly obvious

936
00:32:03,760 --> 00:32:06,080
to the users either because in this case

937
00:32:06,080 --> 00:32:07,279
they they've

938
00:32:07,279 --> 00:32:09,200
just mentioned far too late that he has

939
00:32:09,200 --> 00:32:10,880
been arrested as well

940
00:32:10,880 --> 00:32:13,360
but otherwise for example if the

941
00:32:13,360 --> 00:32:15,200
exposure of the key material is not a

942
00:32:15,200 --> 00:32:16,320
result of

943
00:32:16,320 --> 00:32:18,559
physical excess of an adversary

944
00:32:18,559 --> 00:32:19,840
adversary but rather

945
00:32:19,840 --> 00:32:23,039
for example a virus has been installed

946
00:32:23,039 --> 00:32:26,720
on one of the user's devices

947
00:32:26,720 --> 00:32:29,519
so in these cases the the group members

948
00:32:29,519 --> 00:32:30,399
cannot really

949
00:32:30,399 --> 00:32:33,600
protect against such an adversary but uh

950
00:32:33,600 --> 00:32:36,399
as what we want to have and this is what

951
00:32:36,399 --> 00:32:38,559
modern protocols do and what mls for

952
00:32:38,559 --> 00:32:40,240
example i will mention this in a couple

953
00:32:40,240 --> 00:32:41,600
of slides again

954
00:32:41,600 --> 00:32:43,279
what these protocols implement is a

955
00:32:43,279 --> 00:32:45,279
recovery mechanism that helps them to

956
00:32:45,279 --> 00:32:48,000
reach so-called post-compromise security

957
00:32:48,000 --> 00:32:51,200
so this property requires and

958
00:32:51,200 --> 00:32:52,960
the the technique that is implemented

959
00:32:52,960 --> 00:32:55,039
there gives these group members the

960
00:32:55,039 --> 00:32:56,000
ability

961
00:32:56,000 --> 00:32:59,279
to generate fresh new secrets after the

962
00:32:59,279 --> 00:33:02,159
adversary had access to their devices

963
00:33:02,159 --> 00:33:04,320
and then from these fresh secrets they

964
00:33:04,320 --> 00:33:06,080
derive public values that they then

965
00:33:06,080 --> 00:33:08,080
share and as soon as each member in the

966
00:33:08,080 --> 00:33:08,720
group

967
00:33:08,720 --> 00:33:11,519
has shared a new information to the

968
00:33:11,519 --> 00:33:12,159
group

969
00:33:12,159 --> 00:33:15,279
then they can communicate securely again

970
00:33:15,279 --> 00:33:18,480
so what you see here is however that if

971
00:33:18,480 --> 00:33:20,720
these users have to coordinate in a way

972
00:33:20,720 --> 00:33:21,360
that

973
00:33:21,360 --> 00:33:23,679
gives them the ability to recover

974
00:33:23,679 --> 00:33:24,799
sequentially

975
00:33:24,799 --> 00:33:27,120
this takes a very long time for them to

976
00:33:27,120 --> 00:33:29,440
have secure conversations again

977
00:33:29,440 --> 00:33:32,240
and also it's possibly inevitable that

978
00:33:32,240 --> 00:33:34,080
some users try to recover

979
00:33:34,080 --> 00:33:37,279
concurrently and this is what the issue

980
00:33:37,279 --> 00:33:41,200
here is so um what what we want to have

981
00:33:41,200 --> 00:33:43,919
on the one hand to help these users to

982
00:33:43,919 --> 00:33:44,480
recover

983
00:33:44,480 --> 00:33:46,720
quickly and also what is sometimes

984
00:33:46,720 --> 00:33:47,919
technic technically

985
00:33:47,919 --> 00:33:50,880
about inevitable is that we want that a

986
00:33:50,880 --> 00:33:51,600
protocol

987
00:33:51,600 --> 00:33:54,240
can handle concurrently initiated

988
00:33:54,240 --> 00:33:55,840
recovery attempts

989
00:33:55,840 --> 00:33:57,760
so an ideal protocol would help these

990
00:33:57,760 --> 00:34:00,159
users to quickly recover

991
00:34:00,159 --> 00:34:03,200
would require them that the shares that

992
00:34:03,200 --> 00:34:05,039
or the information that they share

993
00:34:05,039 --> 00:34:08,560
in the group is relatively small

994
00:34:08,560 --> 00:34:11,119
or small as possible and that these

995
00:34:11,119 --> 00:34:12,480
protocols can handle

996
00:34:12,480 --> 00:34:15,040
concurrently initiated recovery such

997
00:34:15,040 --> 00:34:17,440
that post-compromised security is

998
00:34:17,440 --> 00:34:20,560
reached and the most promising idea to

999
00:34:20,560 --> 00:34:22,320
realize this uh

1000
00:34:22,320 --> 00:34:25,679
this type of protocols is a tree based

1001
00:34:25,679 --> 00:34:28,960
uh key structure and this key structure

1002
00:34:28,960 --> 00:34:31,599
works as follows the group members are

1003
00:34:31,599 --> 00:34:33,839
technically arranged in the leaves of a

1004
00:34:33,839 --> 00:34:34,399
tree

1005
00:34:34,399 --> 00:34:38,000
and within that tree these users just

1006
00:34:38,000 --> 00:34:39,839
arrange all the key material that they

1007
00:34:39,839 --> 00:34:40,399
use for

1008
00:34:40,399 --> 00:34:43,760
encrypting their messages by storing

1009
00:34:43,760 --> 00:34:46,960
in the individual storage of each user

1010
00:34:46,960 --> 00:34:49,679
just those secrets that are linked to

1011
00:34:49,679 --> 00:34:50,159
the

1012
00:34:50,159 --> 00:34:52,800
direct notes on the path from each

1013
00:34:52,800 --> 00:34:53,440
user's

1014
00:34:53,440 --> 00:34:55,839
leaf to the root so in this case here

1015
00:34:55,839 --> 00:34:56,560
charlie

1016
00:34:56,560 --> 00:35:00,240
would for example just store on

1017
00:35:00,240 --> 00:35:03,520
his device the the secrets on the path

1018
00:35:03,520 --> 00:35:06,640
from the leaf to the room now since all

1019
00:35:06,640 --> 00:35:08,240
users with their paths

1020
00:35:08,240 --> 00:35:10,720
share uh the joint route in their

1021
00:35:10,720 --> 00:35:12,800
storage they can use the

1022
00:35:12,800 --> 00:35:15,839
secret that is attached to this root as

1023
00:35:15,839 --> 00:35:17,280
the group key

1024
00:35:17,280 --> 00:35:18,880
now in order to recover and reach

1025
00:35:18,880 --> 00:35:20,560
post-compromised security

1026
00:35:20,560 --> 00:35:22,400
charlie would just update the secrets

1027
00:35:22,400 --> 00:35:24,640
that are stored on his own device and

1028
00:35:24,640 --> 00:35:25,520
therefore

1029
00:35:25,520 --> 00:35:28,320
after charlie updated those secrets he

1030
00:35:28,320 --> 00:35:30,240
can securely communicate with the other

1031
00:35:30,240 --> 00:35:31,839
users again and we can reach

1032
00:35:31,839 --> 00:35:34,160
post-compromise security

1033
00:35:34,160 --> 00:35:37,200
this basic principle is the basic idea

1034
00:35:37,200 --> 00:35:39,119
behind almost all

1035
00:35:39,119 --> 00:35:41,440
papers and also all practical protocols

1036
00:35:41,440 --> 00:35:43,119
that have been deployed based on this

1037
00:35:43,119 --> 00:35:44,640
three-based structure

1038
00:35:44,640 --> 00:35:46,560
and as a result these all these

1039
00:35:46,560 --> 00:35:47,920
protocols share

1040
00:35:47,920 --> 00:35:50,000
similar properties namely they all do

1041
00:35:50,000 --> 00:35:52,160
reach post-compromise security

1042
00:35:52,160 --> 00:35:55,520
and they reach this with a relatively

1043
00:35:55,520 --> 00:35:57,520
little communication overhead namely

1044
00:35:57,520 --> 00:36:00,320
each user just has for a recovery

1045
00:36:00,320 --> 00:36:03,520
to send the secrets for their paths

1046
00:36:03,520 --> 00:36:05,520
which is information in the size

1047
00:36:05,520 --> 00:36:07,119
logarithmic of the number of group

1048
00:36:07,119 --> 00:36:08,079
members

1049
00:36:08,079 --> 00:36:11,119
but the issue is that if two users at

1050
00:36:11,119 --> 00:36:13,440
the same point in time try to recover

1051
00:36:13,440 --> 00:36:15,520
the paths that they propose cannot

1052
00:36:15,520 --> 00:36:17,280
really be merged and so concurrently

1053
00:36:17,280 --> 00:36:20,079
cannot be really handled by these ideas

1054
00:36:20,079 --> 00:36:23,040
there are some sidestepping ideas uh so

1055
00:36:23,040 --> 00:36:24,880
i will just list them all

1056
00:36:24,880 --> 00:36:27,599
directly on that slide i will talk about

1057
00:36:27,599 --> 00:36:30,640
the mls idea later in my talk but

1058
00:36:30,640 --> 00:36:33,920
you see here that that all these

1059
00:36:33,920 --> 00:36:34,960
protocols

1060
00:36:34,960 --> 00:36:37,359
share the same trade-off so either they

1061
00:36:37,359 --> 00:36:39,520
do reach post-compromise security

1062
00:36:39,520 --> 00:36:41,839
but then they can't handle concurrency

1063
00:36:41,839 --> 00:36:42,800
or

1064
00:36:42,800 --> 00:36:45,680
they have a large overhead in

1065
00:36:45,680 --> 00:36:47,200
communication for reaching

1066
00:36:47,200 --> 00:36:48,720
post-compromise security under

1067
00:36:48,720 --> 00:36:49,920
concurrency

1068
00:36:49,920 --> 00:36:51,920
and the question that we asked ourselves

1069
00:36:51,920 --> 00:36:54,960
was is this trade-off inherent

1070
00:36:54,960 --> 00:36:57,520
and we must specify this question even

1071
00:36:57,520 --> 00:36:58,960
further by asking

1072
00:36:58,960 --> 00:37:01,359
whether we can find a theoretical

1073
00:37:01,359 --> 00:37:02,640
fundamental minimum

1074
00:37:02,640 --> 00:37:05,599
of communication overhead if t users at

1075
00:37:05,599 --> 00:37:06,800
the same point in

1076
00:37:06,800 --> 00:37:10,160
time try to recover concurrently

1077
00:37:10,160 --> 00:37:12,000
on the other hand if there is a

1078
00:37:12,000 --> 00:37:13,839
foundational minimum

1079
00:37:13,839 --> 00:37:16,640
that we can find out is there a protocol

1080
00:37:16,640 --> 00:37:18,880
that we can come up with that solves the

1081
00:37:18,880 --> 00:37:19,839
issue of

1082
00:37:19,839 --> 00:37:23,200
concurrent recovery attempts with

1083
00:37:23,200 --> 00:37:26,560
a matching overhead and we answered this

1084
00:37:26,560 --> 00:37:28,240
question in a paper that we

1085
00:37:28,240 --> 00:37:30,000
published on a rather theoretic

1086
00:37:30,000 --> 00:37:31,359
conference last year

1087
00:37:31,359 --> 00:37:33,520
but i will show you that the results are

1088
00:37:33,520 --> 00:37:34,480
also

1089
00:37:34,480 --> 00:37:37,359
practical so we begin with a theoretic

1090
00:37:37,359 --> 00:37:38,400
minimum

1091
00:37:38,400 --> 00:37:41,119
that we found out and for analyzing this

1092
00:37:41,119 --> 00:37:43,359
we designed a model so an abstraction

1093
00:37:43,359 --> 00:37:46,000
and an idealization of the real world

1094
00:37:46,000 --> 00:37:48,560
that is both round based and symbolic so

1095
00:37:48,560 --> 00:37:50,720
round based means that users in that

1096
00:37:50,720 --> 00:37:51,920
model are fixed

1097
00:37:51,920 --> 00:37:54,640
to just send once in a round and receive

1098
00:37:54,640 --> 00:37:55,839
once in a round

1099
00:37:55,839 --> 00:37:57,520
but they can do so concurrently so

1100
00:37:57,520 --> 00:37:59,839
multiple senders can send at the

1101
00:37:59,839 --> 00:38:02,800
within the same round but this shows

1102
00:38:02,800 --> 00:38:03,280
that

1103
00:38:03,280 --> 00:38:05,440
if we have an overhead found out in that

1104
00:38:05,440 --> 00:38:07,280
round-based model of course the the

1105
00:38:07,280 --> 00:38:09,839
overhead will be at least as high

1106
00:38:09,839 --> 00:38:11,839
uh in a setting where we have full

1107
00:38:11,839 --> 00:38:13,280
asynchronicity

1108
00:38:13,280 --> 00:38:15,839
the symbolic model means that we define

1109
00:38:15,839 --> 00:38:18,320
fixed computation rules so there is no

1110
00:38:18,320 --> 00:38:20,480
real free mathematic algebraic

1111
00:38:20,480 --> 00:38:21,440
structures

1112
00:38:21,440 --> 00:38:23,440
that all the entities in that model can

1113
00:38:23,440 --> 00:38:25,119
use but rather a fixed set of

1114
00:38:25,119 --> 00:38:27,119
computation rules and these computation

1115
00:38:27,119 --> 00:38:27,920
rules

1116
00:38:27,920 --> 00:38:30,000
model all the building blocks that we

1117
00:38:30,000 --> 00:38:31,280
think are useful

1118
00:38:31,280 --> 00:38:34,000
for realizing group ratcheting and

1119
00:38:34,000 --> 00:38:35,680
essentially all the building blocks that

1120
00:38:35,680 --> 00:38:37,680
we define cover the tools that have been

1121
00:38:37,680 --> 00:38:39,760
used in previous protocols

1122
00:38:39,760 --> 00:38:41,839
we have to restrict the the set of

1123
00:38:41,839 --> 00:38:43,599
building blocks in order to

1124
00:38:43,599 --> 00:38:45,920
not allow exotic tools like multi-party

1125
00:38:45,920 --> 00:38:47,680
non-interactive key exchange for which

1126
00:38:47,680 --> 00:38:48,960
we don't know any efficient

1127
00:38:48,960 --> 00:38:50,160
implementations

1128
00:38:50,160 --> 00:38:52,240
but that would solve the idea or the

1129
00:38:52,240 --> 00:38:53,280
problem of

1130
00:38:53,280 --> 00:38:55,520
concurrent ratcheting group ratcheting

1131
00:38:55,520 --> 00:38:57,200
trivially

1132
00:38:57,200 --> 00:38:59,680
now what we prove is the following for

1133
00:38:59,680 --> 00:39:01,839
any protocol that can

1134
00:39:01,839 --> 00:39:04,160
use those building blocks that we define

1135
00:39:04,160 --> 00:39:06,160
in an arbitrary combination

1136
00:39:06,160 --> 00:39:08,880
and that tries to help its users to

1137
00:39:08,880 --> 00:39:09,440
handle

1138
00:39:09,440 --> 00:39:12,240
t concurrent recoveries so t users try

1139
00:39:12,240 --> 00:39:12,800
to

1140
00:39:12,800 --> 00:39:15,599
recover at the same time for every such

1141
00:39:15,599 --> 00:39:16,320
protocol

1142
00:39:16,320 --> 00:39:19,520
it the following holds every user when

1143
00:39:19,520 --> 00:39:21,760
trying to recover has to contain in

1144
00:39:21,760 --> 00:39:24,880
its message when it tries to recover

1145
00:39:24,880 --> 00:39:28,079
asymptotically t distinct shares at

1146
00:39:28,079 --> 00:39:29,119
least

1147
00:39:29,119 --> 00:39:31,760
so this means that the the overhead is

1148
00:39:31,760 --> 00:39:32,320
linear

1149
00:39:32,320 --> 00:39:35,920
in the number of concurrency the simple

1150
00:39:35,920 --> 00:39:37,839
proof idea behind this

1151
00:39:37,839 --> 00:39:40,320
is that if we have for example four

1152
00:39:40,320 --> 00:39:42,160
rounds and then the second round two

1153
00:39:42,160 --> 00:39:43,520
users send something

1154
00:39:43,520 --> 00:39:45,920
then in the third round each user has to

1155
00:39:45,920 --> 00:39:46,880
send at least

1156
00:39:46,880 --> 00:39:49,280
two bits of information and this shows

1157
00:39:49,280 --> 00:39:50,640
that preparing

1158
00:39:50,640 --> 00:39:53,599
something for a later recovery attempt

1159
00:39:53,599 --> 00:39:55,680
is useless and this makes our proof a

1160
00:39:55,680 --> 00:39:56,480
little bit

1161
00:39:56,480 --> 00:40:00,160
tricky or harder we

1162
00:40:00,160 --> 00:40:03,920
then give a protocol that

1163
00:40:04,400 --> 00:40:06,880
helps us to to realize concurrent

1164
00:40:06,880 --> 00:40:08,720
recovery attempts

1165
00:40:08,720 --> 00:40:10,720
by the following technique instead of

1166
00:40:10,720 --> 00:40:12,400
updating the entire path

1167
00:40:12,400 --> 00:40:15,280
when uh bob and charlie try to recover

1168
00:40:15,280 --> 00:40:15,839
they just

1169
00:40:15,839 --> 00:40:17,920
update their single leaves and then in

1170
00:40:17,920 --> 00:40:20,240
the next round the the other users when

1171
00:40:20,240 --> 00:40:22,000
they are sending help them

1172
00:40:22,000 --> 00:40:24,079
to update the remaining secrets in the

1173
00:40:24,079 --> 00:40:25,680
tree and this indeed

1174
00:40:25,680 --> 00:40:28,800
reaches concurrent recovery i just

1175
00:40:28,800 --> 00:40:31,200
want to mention that the yes this

1176
00:40:31,200 --> 00:40:33,119
trade-off is indeed inherent but it is

1177
00:40:33,119 --> 00:40:34,160
probably not as

1178
00:40:34,160 --> 00:40:36,800
as bad as we thought it would be some

1179
00:40:36,800 --> 00:40:39,280
final remarks on mls

1180
00:40:39,280 --> 00:40:41,280
i think it is a really great success

1181
00:40:41,280 --> 00:40:43,520
that we soon have a standardized group

1182
00:40:43,520 --> 00:40:45,599
ratcheting protocol and i think it's uh

1183
00:40:45,599 --> 00:40:47,680
really performant and reasonably secure

1184
00:40:47,680 --> 00:40:48,079
and

1185
00:40:48,079 --> 00:40:50,480
there are many other good aspects of it

1186
00:40:50,480 --> 00:40:51,119
but just

1187
00:40:51,119 --> 00:40:53,599
a few shortcomings for example the

1188
00:40:53,599 --> 00:40:56,640
current idea how recoveries are

1189
00:40:56,640 --> 00:40:59,760
implemented in mls are the

1190
00:40:59,760 --> 00:41:03,040
leaked metadata for example if i try to

1191
00:41:03,040 --> 00:41:03,680
recover

1192
00:41:03,680 --> 00:41:05,760
then the server knows in which group i

1193
00:41:05,760 --> 00:41:07,839
try to recover and also

1194
00:41:07,839 --> 00:41:11,040
um the the recovery process

1195
00:41:11,040 --> 00:41:13,119
requires that the central server kind of

1196
00:41:13,119 --> 00:41:14,480
coordinates who is

1197
00:41:14,480 --> 00:41:17,280
sending what i won't go into details and

1198
00:41:17,280 --> 00:41:19,440
this is not a real huge problem

1199
00:41:19,440 --> 00:41:21,839
but with our protocol on the one hand we

1200
00:41:21,839 --> 00:41:24,000
reduce the metadata that can

1201
00:41:24,000 --> 00:41:27,680
be seen by a server because all our

1202
00:41:27,680 --> 00:41:30,000
recovery messages look the same except

1203
00:41:30,000 --> 00:41:31,040
for the size

1204
00:41:31,040 --> 00:41:33,280
and also we reduce the assumptions that

1205
00:41:33,280 --> 00:41:34,480
we need to make

1206
00:41:34,480 --> 00:41:36,640
on the central server from a

1207
00:41:36,640 --> 00:41:38,960
coordinating server to just a clock

1208
00:41:38,960 --> 00:41:40,560
synchronization

1209
00:41:40,560 --> 00:41:42,640
open questions are of course how can we

1210
00:41:42,640 --> 00:41:44,560
get rid of the clock synchronization and

1211
00:41:44,560 --> 00:41:46,079
just have a normal

1212
00:41:46,079 --> 00:41:48,800
message delivery service and also equip

1213
00:41:48,800 --> 00:41:50,720
our protocol with practical features

1214
00:41:50,720 --> 00:41:51,839
that shuts

1215
00:41:51,839 --> 00:41:54,480
such that for example the next uh

1216
00:41:54,480 --> 00:41:57,599
version of mls can make use of our ideas

1217
00:41:57,599 --> 00:41:59,839
and finally i think there are many other

1218
00:41:59,839 --> 00:42:01,599
fundamental limits that we need to

1219
00:42:01,599 --> 00:42:02,160
analyze

1220
00:42:02,160 --> 00:42:04,560
for group ratcheting in the future so

1221
00:42:04,560 --> 00:42:06,480
what we show in our work is essentially

1222
00:42:06,480 --> 00:42:08,079
that this tradeoff exists

1223
00:42:08,079 --> 00:42:10,960
but it's not bad as i mentioned before

1224
00:42:10,960 --> 00:42:13,119
you can find the full details

1225
00:42:13,119 --> 00:42:15,520
on eprint and you can contact me here

1226
00:42:15,520 --> 00:42:17,200
via twitter or

1227
00:42:17,200 --> 00:42:18,800
in the chat or whatever thank you very

1228
00:42:18,800 --> 00:42:21,760
much for your attention

1229
00:42:22,880 --> 00:42:25,040
thank you paul um and people feel free

1230
00:42:25,040 --> 00:42:28,720
to drop any questions in the chat

1231
00:42:28,720 --> 00:42:31,839
i'll start with one um so i i agree that

1232
00:42:31,839 --> 00:42:33,119
um

1233
00:42:33,119 --> 00:42:36,000
your uh your your observations about mls

1234
00:42:36,000 --> 00:42:37,119
are correct i think there are some

1235
00:42:37,119 --> 00:42:38,000
opportunities

1236
00:42:38,000 --> 00:42:40,960
to um you know mls exposing certain

1237
00:42:40,960 --> 00:42:42,319
metadata right now then

1238
00:42:42,319 --> 00:42:43,359
there's some opportunities for some

1239
00:42:43,359 --> 00:42:45,680
further work to reduce that

1240
00:42:45,680 --> 00:42:48,800
um so it seems like

1241
00:42:48,800 --> 00:42:50,079
when i've um and maybe i'm

1242
00:42:50,079 --> 00:42:51,359
misunderstanding the details here but it

1243
00:42:51,359 --> 00:42:52,319
seems like this

1244
00:42:52,319 --> 00:42:54,560
protocol you described requires uh the

1245
00:42:54,560 --> 00:42:56,319
group to kind of maintain some coherence

1246
00:42:56,319 --> 00:42:58,400
for at least a couple steps

1247
00:42:58,400 --> 00:43:00,720
um which seems kind of at odds with the

1248
00:43:00,720 --> 00:43:01,680
idea of concurrency am i

1249
00:43:01,680 --> 00:43:02,880
misunderstanding that or

1250
00:43:02,880 --> 00:43:06,319
how did this country mesh uh i think

1251
00:43:06,319 --> 00:43:08,240
this was just a simplification in my

1252
00:43:08,240 --> 00:43:08,960
talk

1253
00:43:08,960 --> 00:43:11,680
in fact our protocol but though a good

1254
00:43:11,680 --> 00:43:12,160
question

1255
00:43:12,160 --> 00:43:15,680
to uh to make it clearer um

1256
00:43:15,680 --> 00:43:17,680
our protocol just reacts in the next

1257
00:43:17,680 --> 00:43:19,359
round on what happens before in our

1258
00:43:19,359 --> 00:43:20,480
proof indeed

1259
00:43:20,480 --> 00:43:23,599
we show uh that uh this

1260
00:43:23,599 --> 00:43:26,240
that this that this overhead is

1261
00:43:26,240 --> 00:43:27,280
necessary

1262
00:43:27,280 --> 00:43:30,319
even specific for each round and not for

1263
00:43:30,319 --> 00:43:31,200
the entire

1264
00:43:31,200 --> 00:43:34,319
uh for the entire conversation fix but

1265
00:43:34,319 --> 00:43:35,040
we can

1266
00:43:35,040 --> 00:43:37,119
do it specified for each round and also

1267
00:43:37,119 --> 00:43:38,640
our protocol can

1268
00:43:38,640 --> 00:43:41,119
adaptively react on what happened before

1269
00:43:41,119 --> 00:43:42,720
so the concurrency

1270
00:43:42,720 --> 00:43:45,680
is uh so far just uh for individual

1271
00:43:45,680 --> 00:43:48,000
rounds and not for the entire setting

1272
00:43:48,000 --> 00:43:51,280
but nevertheless i think there so if you

1273
00:43:51,280 --> 00:43:51,680
know

1274
00:43:51,680 --> 00:43:55,440
uh the the uh the concurrency that is

1275
00:43:55,440 --> 00:43:58,000
uh assumed in your network i think so we

1276
00:43:58,000 --> 00:43:59,280
didn't uh

1277
00:43:59,280 --> 00:44:01,440
specify this through our things with

1278
00:44:01,440 --> 00:44:03,200
through but we had some ideas

1279
00:44:03,200 --> 00:44:04,960
that you can arrange the tree a little

1280
00:44:04,960 --> 00:44:06,960
bit more efficient if you know

1281
00:44:06,960 --> 00:44:09,200
what the concurrency in your setting is

1282
00:44:09,200 --> 00:44:11,439
yeah

1283
00:44:11,520 --> 00:44:14,560
a question from kenny patterson if you

1284
00:44:14,560 --> 00:44:16,400
hide metadata do you need lots of trial

1285
00:44:16,400 --> 00:44:18,079
decryption do you run into efficiency

1286
00:44:18,079 --> 00:44:19,839
issues in large groups

1287
00:44:19,839 --> 00:44:21,920
uh which kind of encryption sorry i'm

1288
00:44:21,920 --> 00:44:24,319
sorry if if you're hiding metadata

1289
00:44:24,319 --> 00:44:26,640
do you have to do trial encryption to

1290
00:44:26,640 --> 00:44:27,440
figure out

1291
00:44:27,440 --> 00:44:31,200
um oh i know so still so

1292
00:44:31,200 --> 00:44:33,839
what i was referring there to is signal

1293
00:44:33,839 --> 00:44:35,280
for example

1294
00:44:35,280 --> 00:44:37,760
encrypts every message independent of

1295
00:44:37,760 --> 00:44:39,200
whether it's a group message to which

1296
00:44:39,200 --> 00:44:40,240
group it goes and

1297
00:44:40,240 --> 00:44:42,960
to whom you should send it the same way

1298
00:44:42,960 --> 00:44:43,920
yet you sh

1299
00:44:43,920 --> 00:44:46,240
you reveal to the server to whom this

1300
00:44:46,240 --> 00:44:47,839
message should be delivered

1301
00:44:47,839 --> 00:44:49,920
but in mls as far as i understood this

1302
00:44:49,920 --> 00:44:51,599
proposed and commit approach

1303
00:44:51,599 --> 00:44:53,920
the server has to know in which group

1304
00:44:53,920 --> 00:44:55,760
you want to propose something and in

1305
00:44:55,760 --> 00:44:57,920
which group you want to commit something

1306
00:44:57,920 --> 00:44:59,760
and this is some metadata that reveals

1307
00:44:59,760 --> 00:45:01,680
in which grupo you are sending something

1308
00:45:01,680 --> 00:45:02,319
to

1309
00:45:02,319 --> 00:45:05,599
but in our protocol all the recoveries

1310
00:45:05,599 --> 00:45:07,440
look the same and you can say okay this

1311
00:45:07,440 --> 00:45:08,880
message is meant for this

1312
00:45:08,880 --> 00:45:11,119
user and this is for this user

1313
00:45:11,119 --> 00:45:12,480
nevertheless of course

1314
00:45:12,480 --> 00:45:16,400
we reveal uh by uh when you observe the

1315
00:45:16,400 --> 00:45:17,520
patterns

1316
00:45:17,520 --> 00:45:18,880
in which groups we are you are

1317
00:45:18,880 --> 00:45:20,480
communicating but if you look at the

1318
00:45:20,480 --> 00:45:21,839
static

1319
00:45:21,839 --> 00:45:24,160
database in which messages are saved

1320
00:45:24,160 --> 00:45:27,200
then these messages can

1321
00:45:27,200 --> 00:45:28,800
do not reveal this information

1322
00:45:28,800 --> 00:45:31,440
immediately

1323
00:45:31,440 --> 00:45:32,960
all right thanks and there's a couple

1324
00:45:32,960 --> 00:45:34,720
more questions in the chat if you could

1325
00:45:34,720 --> 00:45:35,599
take a look and

1326
00:45:35,599 --> 00:45:37,680
follow up there um i think we're out of

1327
00:45:37,680 --> 00:45:39,359
time for this session um so

1328
00:45:39,359 --> 00:45:40,640
thanks to the presenters again and

1329
00:45:40,640 --> 00:45:46,879
thanks to everyone for uh participating

