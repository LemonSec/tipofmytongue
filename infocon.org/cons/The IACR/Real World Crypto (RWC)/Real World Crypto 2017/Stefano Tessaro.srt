1
00:00:00,000 --> 00:00:06,000
<font color="#CCCCCC">alright so yeah thank you so I'm going</font>

2
00:00:03,090 --> 00:00:08,160
to talk today<font color="#CCCCCC"> about a script and its</font>

3
00:00:06,000 --> 00:00:09,570
memory<font color="#E5E5E5"> harness and the stock have been</font>

4
00:00:08,160 --> 00:00:12,240
really seen as a continuation of

5
00:00:09,570 --> 00:00:13,879
Jeremiah stock in<font color="#E5E5E5"> a sense that I'm going</font>

6
00:00:12,240 --> 00:00:16,710
<font color="#E5E5E5">to tell you the</font><font color="#CCCCCC"> other half of the story</font>

7
00:00:13,880 --> 00:00:18,510
about memory heart<font color="#E5E5E5"> function and in</font>

8
00:00:16,710 --> 00:00:20,609
particular talk about<font color="#CCCCCC"> data dependent</font>

9
00:00:18,510 --> 00:00:22,740
memory heart functions and which SS code

10
00:00:20,609 --> 00:00:25,019
is one example so<font color="#E5E5E5"> unless you mention</font>

11
00:00:22,740 --> 00:00:27,750
this is joint work with a set of<font color="#CCCCCC"> amazing</font>

12
00:00:25,019 --> 00:00:30,179
quarters Joel Alvin my PhD student in

13
00:00:27,750 --> 00:00:32,488
each and<font color="#E5E5E5"> Chester piotrek and you're</font>

14
00:00:30,179 --> 00:00:34,290
raising Leo and Drella losing the

15
00:00:32,488 --> 00:00:37,620
audience you can also<font color="#E5E5E5"> certainly have</font>

16
00:00:34,290 --> 00:00:38,910
<font color="#E5E5E5">some questions about it so I don't</font><font color="#CCCCCC"> need</font>

17
00:00:37,620 --> 00:00:42,410
to<font color="#E5E5E5"> introduce the concept of a memory</font>

18
00:00:38,910 --> 00:00:44,660
hard function anymore so in particular

19
00:00:42,410 --> 00:00:46,709
Jeremiah has introduced the notion and

20
00:00:44,660 --> 00:00:50,788
let me<font color="#CCCCCC"> just one</font><font color="#E5E5E5"> thing here of a problem</font>

21
00:00:46,710 --> 00:00:52,170
<font color="#E5E5E5">with the screen all right so I don't</font>

22
00:00:50,789 --> 00:00:54,239
<font color="#E5E5E5">need to</font><font color="#CCCCCC"> introduce the</font><font color="#E5E5E5"> notion anymore</font>

23
00:00:52,170 --> 00:00:56,399
here but<font color="#CCCCCC"> for those of</font><font color="#E5E5E5"> you to meet the</font>

24
00:00:54,239 --> 00:00:58,649
talk or just came in just think of them

25
00:00:56,399 --> 00:01:00,750
<font color="#E5E5E5">as moderately hard hash functions to be</font>

26
00:00:58,649 --> 00:01:03,180
<font color="#E5E5E5">using the context of password hashing or</font>

27
00:01:00,750 --> 00:01:04,920
key derivation or proofs of work where

28
00:01:03,180 --> 00:01:07,110
moderates harness is in terms of both

29
00:01:04,920 --> 00:01:10,950
time and most importantly memory

30
00:01:07,110 --> 00:01:12,630
consumption and there's a beam numerous

31
00:01:10,950 --> 00:01:15,090
practical designs that have been just

32
00:01:12,630 --> 00:01:18,060
mentioned the targeted memory heart

33
00:01:15,090 --> 00:01:20,159
events<font color="#CCCCCC"> like a script</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> arvind 2d are</font>

34
00:01:18,060 --> 00:01:22,380
going to I<font color="#CCCCCC"> katana balloon hashing in</font>

35
00:01:20,159 --> 00:01:24,900
many more but the focus of<font color="#CCCCCC"> this talk is</font>

36
00:01:22,380 --> 00:01:28,320
going<font color="#E5E5E5"> to be on provable security once</font>

37
00:01:24,900 --> 00:01:30,720
again so in particular provable security

38
00:01:28,320 --> 00:01:32,939
has<font color="#E5E5E5"> been very effective in validating</font>

39
00:01:30,720 --> 00:01:35,070
<font color="#CCCCCC">real world cryptography because it helps</font>

40
00:01:32,939 --> 00:01:36,809
us in gaining extra confidence in

41
00:01:35,070 --> 00:01:39,990
particular against those attacks that we

42
00:01:36,810 --> 00:01:42,079
cannot envision yet but somehow in the

43
00:01:39,990 --> 00:01:44,339
context of memory heart functions and

44
00:01:42,079 --> 00:01:45,949
the password hashing competition where

45
00:01:44,340 --> 00:01:47,970
many such designs have been proposed

46
00:01:45,950 --> 00:01:49,259
things went a little bit differently

47
00:01:47,970 --> 00:01:50,789
mostly because we<font color="#E5E5E5"> were lacking a</font>

48
00:01:49,259 --> 00:01:53,820
proprietary at that point in time or at

49
00:01:50,790 --> 00:01:55,740
least was my assumption and validation

50
00:01:53,820 --> 00:01:57,839
there is mostly occurs in terms of

51
00:01:55,740 --> 00:02:01,500
cryptanalysis and often enough intuition

52
00:01:57,840 --> 00:02:03,990
and as you've just seen there is now

53
00:02:01,500 --> 00:02:06,869
better and better theory to validate

54
00:02:03,990 --> 00:02:08,459
memory heart functions but we're still

55
00:02:06,869 --> 00:02:10,560
some light on a quest to find practical

56
00:02:08,459 --> 00:02:12,210
designers are also probably memory hard

57
00:02:10,560 --> 00:02:14,160
in the strongest possible sense

58
00:02:12,210 --> 00:02:15,330
so<font color="#E5E5E5"> if you want to close this gap of</font>

59
00:02:14,160 --> 00:02:17,250
course these two things<font color="#E5E5E5"> you might try to</font>

60
00:02:15,330 --> 00:02:18,780
do so one of them is what was located in

61
00:02:17,250 --> 00:02:21,750
the previous talk so we have a

62
00:02:18,780 --> 00:02:23,190
well-defined theoretical framework to

63
00:02:21,750 --> 00:02:25,710
design provably secure memory<font color="#E5E5E5"> hard</font>

64
00:02:23,190 --> 00:02:27,120
functions and we want to find those that

65
00:02:25,710 --> 00:02:29,190
are practical enough in this framework

66
00:02:27,120 --> 00:02:30,600
and that can<font color="#E5E5E5"> be deployed but another</font>

67
00:02:29,190 --> 00:02:32,790
austerity which is what we do in<font color="#E5E5E5"> this</font>

68
00:02:30,600 --> 00:02:34,170
work is<font color="#CCCCCC"> that you can</font><font color="#E5E5E5"> look around for</font>

69
00:02:32,790 --> 00:02:36,450
designs that exist are<font color="#CCCCCC"> reading practice</font>

70
00:02:34,170 --> 00:02:38,309
<font color="#E5E5E5">but that are out of reach for current</font>

71
00:02:36,450 --> 00:02:39,720
techniques and but it resists attacks

72
00:02:38,310 --> 00:02:42,060
and maybe try<font color="#E5E5E5"> to come up with a valid</font>

73
00:02:39,720 --> 00:02:45,390
theory that<font color="#E5E5E5"> proves them secure and</font>

74
00:02:42,060 --> 00:02:47,160
memory hard and this is<font color="#CCCCCC"> exactly what we</font>

75
00:02:45,390 --> 00:02:48,359
<font color="#E5E5E5">did in this work and we targeted a</font>

76
00:02:47,160 --> 00:02:50,910
script and the main message here is

77
00:02:48,360 --> 00:02:53,610
positive so we provide the proof that

78
00:02:50,910 --> 00:02:55,049
<font color="#E5E5E5">the</font><font color="#CCCCCC"> SP function is optimally memory hard</font>

79
00:02:53,610 --> 00:02:57,150
or ideally memory hard<font color="#E5E5E5"> using the</font>

80
00:02:55,050 --> 00:02:58,620
language from<font color="#E5E5E5"> the previous talk and it</font>

81
00:02:57,150 --> 00:03:01,220
is particularly surprising at first

82
00:02:58,620 --> 00:03:03,240
because well a script was<font color="#E5E5E5"> the very first</font>

83
00:03:01,220 --> 00:03:04,830
candidate memory heart function it was

84
00:03:03,240 --> 00:03:06,750
introduced by calling first of all in

85
00:03:04,830 --> 00:03:08,160
the<font color="#E5E5E5"> very same paper in 2009 that</font>

86
00:03:06,750 --> 00:03:10,950
introduced the notion of memory heart

87
00:03:08,160 --> 00:03:13,140
functions as we know it now it has found

88
00:03:10,950 --> 00:03:16,019
usage so it is<font color="#E5E5E5"> the object of recently</font>

89
00:03:13,140 --> 00:03:17,579
published RFC it is also<font color="#E5E5E5"> used within</font>

90
00:03:16,020 --> 00:03:19,890
crypto currencies<font color="#CCCCCC"> for proofs of work</font>

91
00:03:17,580 --> 00:03:22,980
it's using<font color="#CCCCCC"> live coins and other let's</font>

92
00:03:19,890 --> 00:03:24,720
<font color="#CCCCCC">check of the crisis and also it expires</font>

93
00:03:22,980 --> 00:03:26,429
<font color="#CCCCCC">on your design so you can find ideas</font>

94
00:03:24,720 --> 00:03:28,200
from a script for example in argon 2d

95
00:03:26,430 --> 00:03:31,080
one of the two winners<font color="#E5E5E5"> of the password</font>

96
00:03:28,200 --> 00:03:33,600
hashing competition and let me stress

97
00:03:31,080 --> 00:03:34,740
<font color="#E5E5E5">really that I mean this is interesting</font>

98
00:03:33,600 --> 00:03:37,440
in practice but also from a theoretical

99
00:03:34,740 --> 00:03:39,780
standpoint this<font color="#E5E5E5"> is the first example</font><font color="#CCCCCC"> of</font>

100
00:03:37,440 --> 00:03:41,790
memory<font color="#CCCCCC"> card functions that we can prove</font>

101
00:03:39,780 --> 00:03:45,030
optimally memory<font color="#E5E5E5"> hajj so even in theory</font>

102
00:03:41,790 --> 00:03:46,200
not just in practice so let me<font color="#CCCCCC"> put this</font>

103
00:03:45,030 --> 00:03:47,640
<font color="#E5E5E5">a little bit in the context of the</font>

104
00:03:46,200 --> 00:03:49,320
previous talk a lot to be invested

105
00:03:47,640 --> 00:03:54,420
already so<font color="#CCCCCC"> i guess the</font><font color="#E5E5E5"> main point here</font>

106
00:03:49,320 --> 00:03:57,090
<font color="#E5E5E5">is that we distinguish between memory</font>

107
00:03:54,420 --> 00:03:58,500
heart functions that are data dependence

108
00:03:57,090 --> 00:04:00,480
in data independent right so data

109
00:03:58,500 --> 00:04:03,030
independent ones are those were the

110
00:04:00,480 --> 00:04:05,040
memory access patterns during the

111
00:04:03,030 --> 00:04:06,690
execution can depend on<font color="#E5E5E5"> the input worse</font>

112
00:04:05,040 --> 00:04:08,190
<font color="#CCCCCC">I cannot</font><font color="#E5E5E5"> depend on the universe for data</font>

113
00:04:06,690 --> 00:04:10,829
dependent<font color="#E5E5E5"> they can depend on the input</font>

114
00:04:08,190 --> 00:04:15,180
on a trip like argon<font color="#E5E5E5"> 2d is an example of</font>

115
00:04:10,830 --> 00:04:18,570
a data dependent one so so<font color="#E5E5E5"> far the</font>

116
00:04:15,180 --> 00:04:20,340
theory has<font color="#CCCCCC"> been really focusing on data</font>

117
00:04:18,570 --> 00:04:22,230
independent design so sure enough one

118
00:04:20,339 --> 00:04:23,280
reason is they<font color="#CCCCCC"> ask my practice features</font>

119
00:04:22,230 --> 00:04:25,710
that I'm going<font color="#E5E5E5"> to talk about the video</font>

120
00:04:23,280 --> 00:04:26,039
more later<font color="#CCCCCC"> resistance aside channels if</font>

121
00:04:25,710 --> 00:04:29,370
you can

122
00:04:26,040 --> 00:04:30,810
turn about that but a major point is

123
00:04:29,370 --> 00:04:32,670
also that from a theory standpoint

124
00:04:30,810 --> 00:04:34,530
there's a much cleaner connection to

125
00:04:32,670 --> 00:04:36,270
grass babbling the Jeremiah's just

126
00:04:34,530 --> 00:04:38,340
Illustrated that makes proving things

127
00:04:36,270 --> 00:04:39,750
much easier<font color="#E5E5E5"> on the other hand even</font>

128
00:04:38,340 --> 00:04:41,549
<font color="#CCCCCC">though we just</font><font color="#E5E5E5"> yeah we have this</font>

129
00:04:39,750 --> 00:04:43,530
framework in place coming up with

130
00:04:41,550 --> 00:04:45,840
practical designs as you<font color="#E5E5E5"> can see it's</font>

131
00:04:43,530 --> 00:04:47,340
working progress right and we<font color="#CCCCCC"> have even</font>

132
00:04:45,840 --> 00:04:49,739
<font color="#E5E5E5">go to the</font><font color="#CCCCCC"> object of some controversy but</font>

133
00:04:47,340 --> 00:04:51,690
we have attacks now that definitely show

134
00:04:49,740 --> 00:04:53,280
that there are structural weaknesses in

135
00:04:51,690 --> 00:04:55,560
practical design set that we already

136
00:04:53,280 --> 00:04:57,809
have on the other<font color="#CCCCCC"> hand</font><font color="#E5E5E5"> on the data</font>

137
00:04:55,560 --> 00:04:59,460
dependent sign of<font color="#E5E5E5"> things there's quite a</font>

138
00:04:57,810 --> 00:05:01,260
lot we don't understand so we have

139
00:04:59,460 --> 00:05:03,000
designed around like<font color="#CCCCCC"> a script and Argan</font>

140
00:05:01,260 --> 00:05:06,000
foodie that seem to resist non trigger

141
00:05:03,000 --> 00:05:07,860
to add any non-trivial attack and speed

142
00:05:06,000 --> 00:05:10,080
up on the<font color="#E5E5E5"> other hand we have substitute</font>

143
00:05:07,860 --> 00:05:11,490
lino theory to understand why that's<font color="#E5E5E5"> the</font>

144
00:05:10,080 --> 00:05:13,530
case and it seemed much harder to tackle

145
00:05:11,490 --> 00:05:16,740
and so that's<font color="#E5E5E5"> exactly what</font><font color="#CCCCCC"> we were</font>

146
00:05:13,530 --> 00:05:20,849
concerned with here so a little bit more

147
00:05:16,740 --> 00:05:22,500
concretely ah what we<font color="#CCCCCC"> target in when I</font>

148
00:05:20,850 --> 00:05:24,000
say we analyze a script we actually

149
00:05:22,500 --> 00:05:26,880
<font color="#E5E5E5">target an analysis of what is called</font>

150
00:05:24,000 --> 00:05:30,360
romics which is the core of the<font color="#CCCCCC"> SP</font>

151
00:05:26,880 --> 00:05:31,890
function and it's a it's a hash function

152
00:05:30,360 --> 00:05:33,750
which is<font color="#E5E5E5"> a mode of operation for a</font>

153
00:05:31,890 --> 00:05:35,640
simpler hash function she's not quite a

154
00:05:33,750 --> 00:05:37,980
hash function in the usual sense it's a

155
00:05:35,640 --> 00:05:40,500
build-out of salsa and its length

156
00:05:37,980 --> 00:05:43,740
reserving but i'm going<font color="#E5E5E5"> to abstract the</font>

157
00:05:40,500 --> 00:05:46,320
this is<font color="#E5E5E5"> just a hash function</font><font color="#CCCCCC"> H and the</font>

158
00:05:43,740 --> 00:05:49,080
<font color="#E5E5E5">structure is very simple so it starts</font>

159
00:05:46,320 --> 00:05:51,150
with a single iteration of a hash

160
00:05:49,080 --> 00:05:53,550
function of a function H so you have an

161
00:05:51,150 --> 00:05:55,650
input m it's going<font color="#E5E5E5"> to become your first</font>

162
00:05:53,550 --> 00:05:58,410
stage<font color="#CCCCCC"> X 0 then you're either ate the</font>

163
00:05:55,650 --> 00:06:00,539
hash<font color="#CCCCCC"> function to get n values x0 up to</font>

164
00:05:58,410 --> 00:06:02,460
xn minus 1<font color="#E5E5E5"> and then you apply the edge</font>

165
00:06:00,540 --> 00:06:04,710
function once more to<font color="#E5E5E5"> get what is the</font>

166
00:06:02,460 --> 00:06:06,150
initial<font color="#E5E5E5"> stage of the second stage the</font>

167
00:06:04,710 --> 00:06:08,299
<font color="#E5E5E5">second stage is where the interesting</font>

168
00:06:06,150 --> 00:06:11,190
things happen that ensure memory harness

169
00:06:08,300 --> 00:06:12,900
in<font color="#E5E5E5"> particular we start by looking at the</font>

170
00:06:11,190 --> 00:06:14,250
initial stage<font color="#CCCCCC"> at</font><font color="#E5E5E5"> zero maybe you can't</font>

171
00:06:12,900 --> 00:06:16,859
really from far is that it'll<font color="#E5E5E5"> be small</font>

172
00:06:14,250 --> 00:06:20,160
but what you do is you now want to

173
00:06:16,860 --> 00:06:22,620
<font color="#E5E5E5">derive an integer between 10 and n minus</font>

174
00:06:20,160 --> 00:06:24,450
1 from the state as<font color="#CCCCCC"> 0 you</font><font color="#E5E5E5"> can do that</font>

175
00:06:22,620 --> 00:06:26,190
for<font color="#E5E5E5"> example by interpreting as</font><font color="#CCCCCC"> zero as</font>

176
00:06:24,450 --> 00:06:28,440
an integer and then reducing it<font color="#E5E5E5"> more end</font>

177
00:06:26,190 --> 00:06:30,780
and you interpret this is an index which

178
00:06:28,440 --> 00:06:33,270
points to one of the n values x0 to xn

179
00:06:30,780 --> 00:06:35,070
minus<font color="#E5E5E5"> 1</font><font color="#CCCCCC"> they points21 you're going to</font>

180
00:06:33,270 --> 00:06:36,750
take<font color="#E5E5E5"> that value and now you're going to</font>

181
00:06:35,070 --> 00:06:38,790
<font color="#CCCCCC">X or 80 to the state apply the edge</font>

182
00:06:36,750 --> 00:06:39,720
function again and then you<font color="#E5E5E5"> get the next</font>

183
00:06:38,790 --> 00:06:41,610
stage

184
00:06:39,720 --> 00:06:42,690
and so you can go on like this so you're

185
00:06:41,610 --> 00:06:44,670
<font color="#E5E5E5">going to do the</font><font color="#CCCCCC"> same thing to the next</font>

186
00:06:42,690 --> 00:06:46,650
stage deriving index a this case by

187
00:06:44,670 --> 00:06:48,270
accident is the<font color="#E5E5E5"> last one take the value</font>

188
00:06:46,650 --> 00:06:50,640
X<font color="#CCCCCC"> or it into the space and go on and on</font>

189
00:06:48,270 --> 00:06:53,190
until you get the final out now you<font color="#E5E5E5"> have</font>

190
00:06:50,640 --> 00:06:54,390
some parameter n ears there's no clear

191
00:06:53,190 --> 00:06:55,800
discussion I think<font color="#CCCCCC"> what are the right</font>

192
00:06:54,390 --> 00:06:57,240
parameters for a script I think

193
00:06:55,800 --> 00:07:00,240
suggestion I've seen are things like n

194
00:06:57,240 --> 00:07:01,950
is equal<font color="#E5E5E5"> to the 14 w which will be the</font>

195
00:07:00,240 --> 00:07:03,990
length of the hashes so the size of the

196
00:07:01,950 --> 00:07:05,550
state should be something<font color="#E5E5E5"> like when</font>

197
00:07:03,990 --> 00:07:06,930
people bikes are larger but I think like

198
00:07:05,550 --> 00:07:10,770
today's standards you<font color="#CCCCCC"> might even</font><font color="#E5E5E5"> want to</font>

199
00:07:06,930 --> 00:07:12,060
have<font color="#E5E5E5"> larger parameters</font><font color="#CCCCCC"> all right so we</font>

200
00:07:10,770 --> 00:07:13,979
want to<font color="#E5E5E5"> analyze this we want to prove</font>

201
00:07:12,060 --> 00:07:15,570
<font color="#E5E5E5">with memory hard what that means is that</font>

202
00:07:13,980 --> 00:07:17,790
we would like<font color="#E5E5E5"> to prove a lower bound on</font>

203
00:07:15,570 --> 00:07:18,810
the cumulative memory complexity there

204
00:07:17,790 --> 00:07:21,120
<font color="#E5E5E5">was already introduced in the previous</font>

205
00:07:18,810 --> 00:07:22,080
talk so informally what<font color="#E5E5E5"> the means is</font>

206
00:07:21,120 --> 00:07:24,480
that we want<font color="#CCCCCC"> to show that</font><font color="#E5E5E5"> for every</font>

207
00:07:22,080 --> 00:07:26,250
adverse or even parallel<font color="#CCCCCC"> ones if we take</font>

208
00:07:24,480 --> 00:07:28,410
the integral of this curve so we look at

209
00:07:26,250 --> 00:07:31,620
the<font color="#E5E5E5"> memory consumption at every point in</font>

210
00:07:28,410 --> 00:07:35,000
time and we sound them up we want to

211
00:07:31,620 --> 00:07:39,450
show<font color="#CCCCCC"> that this is a large enough ok and</font>

212
00:07:35,000 --> 00:07:41,810
this<font color="#E5E5E5"> is a lower bound for another metric</font>

213
00:07:39,450 --> 00:07:44,340
we see less appropriate since it's less

214
00:07:41,810 --> 00:07:46,200
resilient to<font color="#E5E5E5"> amortization which is the</font>

215
00:07:44,340 --> 00:07:48,719
SD complexity we just looks at the

216
00:07:46,200 --> 00:07:52,020
maximum memory consumption times the

217
00:07:48,720 --> 00:07:54,780
time complexity so and we want to prove

218
00:07:52,020 --> 00:07:56,190
this and so<font color="#CCCCCC"> now we are very bad at</font>

219
00:07:54,780 --> 00:07:58,590
proving lower bounds usually in crypto

220
00:07:56,190 --> 00:08:00,419
so what we need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do in this case is or</font>

221
00:07:58,590 --> 00:08:01,950
the usual<font color="#E5E5E5"> way out is that</font><font color="#CCCCCC"> we are going</font>

222
00:08:00,419 --> 00:08:04,229
<font color="#E5E5E5">to make</font><font color="#CCCCCC"> some ideal assumption on the</font>

223
00:08:01,950 --> 00:08:05,789
underlying hash function H and we model

224
00:08:04,229 --> 00:08:07,289
is what we call a random Oracle so we

225
00:08:05,790 --> 00:08:09,150
model it as a<font color="#E5E5E5"> random hash function and</font>

226
00:08:07,290 --> 00:08:11,040
then we<font color="#E5E5E5"> just want to prove a lower bound</font>

227
00:08:09,150 --> 00:08:13,560
on any parallel adversary's that try to

228
00:08:11,040 --> 00:08:15,120
evaluate romics in this model that means

229
00:08:13,560 --> 00:08:16,860
we consider some adversary<font color="#CCCCCC"> that takes</font>

230
00:08:15,120 --> 00:08:19,050
this input a message on which you want

231
00:08:16,860 --> 00:08:21,600
<font color="#E5E5E5">to evaluate the function and then</font>

232
00:08:19,050 --> 00:08:23,550
proceeding steps were in each step what

233
00:08:21,600 --> 00:08:25,380
you can do is you can submit<font color="#E5E5E5"> a vector of</font>

234
00:08:23,550 --> 00:08:27,630
queries<font color="#CCCCCC"> from multiple</font><font color="#E5E5E5"> parallel queries</font>

235
00:08:25,380 --> 00:08:30,500
simultaneously to the random ideal hash

236
00:08:27,630 --> 00:08:33,059
function and<font color="#E5E5E5"> also can keep some states</font>

237
00:08:30,500 --> 00:08:34,260
for the<font color="#E5E5E5"> next</font><font color="#CCCCCC"> steps</font><font color="#E5E5E5"> and then in the next</font>

238
00:08:33,059 --> 00:08:35,699
step<font color="#E5E5E5"> your</font><font color="#CCCCCC"> versuri is going to get this</font>

239
00:08:34,260 --> 00:08:37,650
stage is going to get the responses to

240
00:08:35,700 --> 00:08:39,300
these queries and then this<font color="#CCCCCC"> over and</font>

241
00:08:37,650 --> 00:08:41,549
over again and then just output

242
00:08:39,299 --> 00:08:43,770
something which ideally should be if the

243
00:08:41,549 --> 00:08:44,849
verso is correct for evaluating this the

244
00:08:43,770 --> 00:08:47,220
function<font color="#CCCCCC"> should be</font><font color="#E5E5E5"> the output of the</font>

245
00:08:44,850 --> 00:08:49,950
<font color="#CCCCCC">function on in put em right and then we</font>

246
00:08:47,220 --> 00:08:51,890
want<font color="#E5E5E5"> to consider the cumulative memory</font>

247
00:08:49,950 --> 00:08:53,700
complexity of such an adversary which

248
00:08:51,890 --> 00:08:55,800
typically we're going to

249
00:08:53,700 --> 00:08:58,470
model the memory size of every set by

250
00:08:55,800 --> 00:09:02,189
considering the<font color="#CCCCCC"> size of us of a state as</font>

251
00:08:58,470 --> 00:09:04,290
I and plus we also going to consider the

252
00:09:02,190 --> 00:09:05,790
size of the answers that the adversity

253
00:09:04,290 --> 00:09:09,270
gets back from the edge function query

254
00:09:05,790 --> 00:09:10,439
this is very generous the adversary

255
00:09:09,270 --> 00:09:11,730
might need more memory but we're<font color="#E5E5E5"> going</font>

256
00:09:10,440 --> 00:09:13,740
<font color="#E5E5E5">to prove a positive results a lower</font>

257
00:09:11,730 --> 00:09:15,210
bound so it doesn't<font color="#CCCCCC"> matter</font><font color="#E5E5E5"> if the</font>

258
00:09:13,740 --> 00:09:19,560
adversity gives us even more memory than

259
00:09:15,210 --> 00:09:21,450
that's better for us<font color="#CCCCCC"> okay so if we think</font>

260
00:09:19,560 --> 00:09:26,579
<font color="#E5E5E5">about this metric now and we want to</font>

261
00:09:21,450 --> 00:09:30,540
evaluate romics now there<font color="#CCCCCC"> are too naive</font>

262
00:09:26,580 --> 00:09:33,660
approaches that you could take to

263
00:09:30,540 --> 00:09:35,790
evaluate the function<font color="#CCCCCC"> okay so the first</font>

264
00:09:33,660 --> 00:09:37,770
<font color="#E5E5E5">one is you can just consider a naive</font>

265
00:09:35,790 --> 00:09:40,110
sequential evaluation which is what you

266
00:09:37,770 --> 00:09:41,939
will do when you run your function on

267
00:09:40,110 --> 00:09:44,310
your<font color="#E5E5E5"> computer which</font><font color="#CCCCCC"> is you simply</font>

268
00:09:41,940 --> 00:09:47,790
compute the values in the first place

269
00:09:44,310 --> 00:09:50,310
and store them into memory and then when

270
00:09:47,790 --> 00:09:51,839
you<font color="#E5E5E5"> get into the second stage what</font>

271
00:09:50,310 --> 00:09:53,339
you're going to do is you're<font color="#CCCCCC"> just going</font>

272
00:09:51,840 --> 00:09:55,260
to take them<font color="#E5E5E5"> from memory whenever you</font>

273
00:09:53,340 --> 00:09:57,120
need them and they're going<font color="#E5E5E5"> to be there</font>

274
00:09:55,260 --> 00:09:59,069
and hence you can compute through the

275
00:09:57,120 --> 00:10:01,290
entire thing in linear time in a

276
00:09:59,070 --> 00:10:02,760
parameter N and the amount<font color="#E5E5E5"> of memory</font>

277
00:10:01,290 --> 00:10:05,219
that you<font color="#E5E5E5"> need well it's as much memory</font>

278
00:10:02,760 --> 00:10:07,620
as you<font color="#E5E5E5"> need to store these n values that</font>

279
00:10:05,220 --> 00:10:09,780
are<font color="#CCCCCC"> W bit large so if you think now</font>

280
00:10:07,620 --> 00:10:12,090
about our cumulative memory complexity

281
00:10:09,780 --> 00:10:14,400
you have a linear number of steps you

282
00:10:12,090 --> 00:10:15,960
can store up to n times<font color="#E5E5E5"> W bit so the</font>

283
00:10:14,400 --> 00:10:19,170
cumulative<font color="#E5E5E5"> memory complexity is going to</font>

284
00:10:15,960 --> 00:10:22,260
be n square times W bit right roughly

285
00:10:19,170 --> 00:10:24,479
I'm omitting constants here<font color="#CCCCCC"> ok now the</font>

286
00:10:22,260 --> 00:10:25,710
<font color="#E5E5E5">other alternative strategy is that you</font>

287
00:10:24,480 --> 00:10:27,270
say well I don't<font color="#E5E5E5"> want to waste any</font>

288
00:10:25,710 --> 00:10:30,060
memory now and I want<font color="#E5E5E5"> to do this with</font>

289
00:10:27,270 --> 00:10:31,890
almost memory less so what you<font color="#E5E5E5"> could do</font>

290
00:10:30,060 --> 00:10:33,479
here instead is say okay I'm just going

291
00:10:31,890 --> 00:10:35,520
through<font color="#E5E5E5"> the chain at the beginning and</font>

292
00:10:33,480 --> 00:10:37,260
don't remember anything get<font color="#E5E5E5"> to the</font>

293
00:10:35,520 --> 00:10:40,740
<font color="#E5E5E5">initial stage of the second phase and</font>

294
00:10:37,260 --> 00:10:42,900
now see which value I actually need say

295
00:10:40,740 --> 00:10:45,390
for<font color="#E5E5E5"> example now I see all from my 80 I</font>

296
00:10:42,900 --> 00:10:48,480
need the value x1 so now i'm going<font color="#CCCCCC"> to</font>

297
00:10:45,390 --> 00:10:49,860
recompute it starting<font color="#CCCCCC"> from X 0 and I'm</font>

298
00:10:48,480 --> 00:10:51,570
going to<font color="#E5E5E5"> get that value and then add it</font>

299
00:10:49,860 --> 00:10:53,940
into<font color="#CCCCCC"> the state and then forget</font><font color="#E5E5E5"> it and go</font>

300
00:10:51,570 --> 00:10:56,640
on<font color="#E5E5E5"> and then see what's the next value I</font>

301
00:10:53,940 --> 00:10:58,710
going<font color="#E5E5E5"> to recompute it and then just add</font>

302
00:10:56,640 --> 00:11:00,689
it to the state<font color="#E5E5E5"> and go on now these are</font>

303
00:10:58,710 --> 00:11:03,030
<font color="#E5E5E5">computation recomputing can be expensive</font>

304
00:11:00,690 --> 00:11:05,580
because we might<font color="#E5E5E5"> have to do up to linear</font>

305
00:11:03,030 --> 00:11:06,720
work to go through the chain again so an

306
00:11:05,580 --> 00:11:09,750
average<font color="#CCCCCC"> take n over 2</font>

307
00:11:06,720 --> 00:11:13,290
steps<font color="#E5E5E5"> okay so overall we make n square</font>

308
00:11:09,750 --> 00:11:15,180
steps and however the memory we keep is

309
00:11:13,290 --> 00:11:17,790
very small so if the order of W bit

310
00:11:15,180 --> 00:11:19,439
where<font color="#CCCCCC"> W</font><font color="#E5E5E5"> the size of the state remember</font>

311
00:11:17,790 --> 00:11:20,849
so again the cumulative memory

312
00:11:19,439 --> 00:11:24,689
complexity is something<font color="#E5E5E5"> like n square</font>

313
00:11:20,850 --> 00:11:26,459
times<font color="#E5E5E5"> W ok so now we can start making</font>

314
00:11:24,689 --> 00:11:28,860
some conjectures which is for people at

315
00:11:26,459 --> 00:11:30,810
conjecture for long which<font color="#E5E5E5"> is that we</font>

316
00:11:28,860 --> 00:11:32,639
have two extreme strategies one

317
00:11:30,810 --> 00:11:35,790
remembering everything sequential the

318
00:11:32,639 --> 00:11:37,620
<font color="#CCCCCC">over</font><font color="#E5E5E5"> one other one memory less so we</font>

319
00:11:35,790 --> 00:11:40,649
could conjecture that now every other

320
00:11:37,620 --> 00:11:42,449
strategy might be<font color="#E5E5E5"> at least as bad right</font>

321
00:11:40,649 --> 00:11:44,879
well of course<font color="#E5E5E5"> they're just a conjecture</font>

322
00:11:42,449 --> 00:11:46,199
and we really have no a priori we

323
00:11:44,879 --> 00:11:48,540
wouldn't have no evidence right it could

324
00:11:46,199 --> 00:11:50,279
<font color="#CCCCCC">be that</font><font color="#E5E5E5"> the real thing is like this</font><font color="#CCCCCC"> okay</font>

325
00:11:48,540 --> 00:11:51,779
so maybe there are some strategies that

326
00:11:50,279 --> 00:11:53,699
are much better than<font color="#E5E5E5"> N squared</font><font color="#CCCCCC"> times a</font>

327
00:11:51,779 --> 00:11:55,230
<font color="#CCCCCC">bleep okay I know the plot is a little</font>

328
00:11:53,699 --> 00:11:56,639
bit absurd but it was kind of a theory

329
00:11:55,230 --> 00:11:59,009
talk so I thought they should put some

330
00:11:56,639 --> 00:12:02,250
plot just to make it more real-world see

331
00:11:59,009 --> 00:12:05,850
<font color="#E5E5E5">I guess all right so so is</font><font color="#CCCCCC"> it conjecture</font>

332
00:12:02,250 --> 00:12:07,230
true or not and so that's exactly<font color="#E5E5E5"> what</font>

333
00:12:05,850 --> 00:12:09,420
we confirm so we confirm that a

334
00:12:07,230 --> 00:12:11,790
conjecture is true at least abscess on

335
00:12:09,420 --> 00:12:14,009
multiplicative factor so what we show is

336
00:12:11,790 --> 00:12:17,959
that roughly for every possible adverse

337
00:12:14,009 --> 00:12:21,899
are a strategy that wants to evaluate

338
00:12:17,959 --> 00:12:25,018
romics<font color="#CCCCCC"> its cumulative memory complexity</font>

339
00:12:21,899 --> 00:12:27,000
is going to be well roughly and spare

340
00:12:25,019 --> 00:12:29,579
time w times the constant which is<font color="#E5E5E5"> one</font>

341
00:12:27,000 --> 00:12:34,110
over 25 and could be up for optimization

342
00:12:29,579 --> 00:12:36,180
in our proof and also note that we don't

343
00:12:34,110 --> 00:12:39,540
quite<font color="#E5E5E5"> get</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> square time w we get n</font>

344
00:12:36,180 --> 00:12:41,160
square times<font color="#CCCCCC"> W minus some difference</font>

345
00:12:39,540 --> 00:12:42,629
which is forward times log n where<font color="#CCCCCC"> m is</font>

346
00:12:41,160 --> 00:12:45,930
the parameter that gives you the number

347
00:12:42,629 --> 00:12:48,300
of iteration this is somewhat inherent

348
00:12:45,930 --> 00:12:49,709
in our proof technique so there is<font color="#CCCCCC"> a</font>

349
00:12:48,300 --> 00:12:51,959
small loss even there even if you

350
00:12:49,709 --> 00:12:53,670
optimize the cut the concert in front so

351
00:12:51,959 --> 00:12:55,649
really<font color="#E5E5E5"> can't get rid of it but not that</font>

352
00:12:53,670 --> 00:12:56,939
it's not<font color="#E5E5E5"> a big problem if you're</font>

353
00:12:55,649 --> 00:12:58,680
concerned about the concrete parameter

354
00:12:56,939 --> 00:13:00,689
especially because typically w is quite

355
00:12:58,680 --> 00:13:03,209
huge so we like one kilobyte at least

356
00:13:00,689 --> 00:13:04,439
and log n should<font color="#CCCCCC"> be on most routine so</font>

357
00:13:03,209 --> 00:13:08,550
you should not really be concerned too

358
00:13:04,439 --> 00:13:10,230
much about that for log n<font color="#E5E5E5"> ok also note</font>

359
00:13:08,550 --> 00:13:12,269
that despite the simplicity of these

360
00:13:10,230 --> 00:13:14,160
results this is really not something

361
00:13:12,269 --> 00:13:16,589
easy to<font color="#E5E5E5"> get there have been numerous</font>

362
00:13:14,160 --> 00:13:18,719
numerous at least a few attempts to

363
00:13:16,589 --> 00:13:19,889
prove this result in the past for those

364
00:13:18,720 --> 00:13:20,550
of<font color="#CCCCCC"> you who actually read calling</font>

365
00:13:19,889 --> 00:13:22,950
<font color="#E5E5E5">Perceval say</font>

366
00:13:20,550 --> 00:13:24,510
I assume many of you introducing a

367
00:13:22,950 --> 00:13:27,149
script there is actually a proof thereof

368
00:13:24,510 --> 00:13:28,709
memory<font color="#E5E5E5"> arnis 4 4 s turret and it turns</font>

369
00:13:27,149 --> 00:13:30,420
out i<font color="#E5E5E5"> mean i'm not going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> go into it</font>

370
00:13:28,709 --> 00:13:32,250
we have<font color="#E5E5E5"> more evidence with more evidence</font>

371
00:13:30,420 --> 00:13:33,630
<font color="#CCCCCC">wheat in the</font><font color="#E5E5E5"> paper</font><font color="#CCCCCC"> but it's pretty</font><font color="#E5E5E5"> much</font>

372
00:13:32,250 --> 00:13:36,079
full glory by now<font color="#CCCCCC"> that the proof is</font>

373
00:13:33,630 --> 00:13:38,970
incorrect so there larissa back there

374
00:13:36,079 --> 00:13:41,760
and also it targets a weaker security

375
00:13:38,970 --> 00:13:43,640
property than a weaker harness measure

376
00:13:41,760 --> 00:13:45,689
than cumulative memory complexity and

377
00:13:43,640 --> 00:13:47,699
there's also some previous work by

378
00:13:45,690 --> 00:13:49,170
myself<font color="#E5E5E5"> and a partially overlapping set</font>

379
00:13:47,700 --> 00:13:51,480
of co-authors that appears<font color="#E5E5E5"> at your crib</font>

380
00:13:49,170 --> 00:13:55,319
last year where we proved a weaker bond

381
00:13:51,480 --> 00:13:57,300
and 4s rates and that's weaker both

382
00:13:55,320 --> 00:13:58,709
quantitatively<font color="#E5E5E5"> it's it does it fall</font>

383
00:13:57,300 --> 00:14:01,079
short of being optimal and also totally

384
00:13:58,709 --> 00:14:03,660
holds for restricted adversary's<font color="#CCCCCC"> I'm not</font>

385
00:14:01,079 --> 00:14:05,010
going<font color="#E5E5E5"> to go into it now the important</font>

386
00:14:03,660 --> 00:14:07,560
point here there was already addressed

387
00:14:05,010 --> 00:14:10,410
by Jeremiah is that this shows a<font color="#CCCCCC"> a</font>

388
00:14:07,560 --> 00:14:12,390
separation<font color="#CCCCCC"> between data dependent memory</font>

389
00:14:10,410 --> 00:14:16,680
heart function and data independent ones

390
00:14:12,390 --> 00:14:19,439
so by a result by<font color="#CCCCCC"> jeremih enjoy lovin we</font>

391
00:14:16,680 --> 00:14:20,609
know<font color="#CCCCCC"> that for</font><font color="#E5E5E5"> every data independent</font>

392
00:14:19,440 --> 00:14:23,190
memory heart function there exists a

393
00:14:20,610 --> 00:14:24,959
strategy that allow you to<font color="#E5E5E5"> evaluate it</font>

394
00:14:23,190 --> 00:14:27,020
with cumulative complexity we should

395
00:14:24,959 --> 00:14:29,069
wrap the ends first<font color="#E5E5E5"> MW over log n</font>

396
00:14:27,020 --> 00:14:31,260
whereas here we prove something of the

397
00:14:29,070 --> 00:14:32,790
other<font color="#CCCCCC"> end times W so there is a log n</font>

398
00:14:31,260 --> 00:14:35,100
gap that<font color="#CCCCCC"> is going to fall away of course</font>

399
00:14:32,790 --> 00:14:38,099
we have<font color="#CCCCCC"> to be honest here constant fear</font>

400
00:14:35,100 --> 00:14:40,140
matter and<font color="#CCCCCC"> a login and a constant factor</font>

401
00:14:38,100 --> 00:14:41,910
my end up being the same for reasonable

402
00:14:40,140 --> 00:14:42,839
ends but at least awesome to optical you

403
00:14:41,910 --> 00:14:44,399
see that the difference can be

404
00:14:42,839 --> 00:14:46,350
substantial and you know with the

405
00:14:44,399 --> 00:14:48,149
similar constant you have to be careful

406
00:14:46,350 --> 00:14:52,500
about that because log n can be very

407
00:14:48,149 --> 00:14:53,940
<font color="#E5E5E5">large for reasonable parameters so why</font>

408
00:14:52,500 --> 00:14:57,420
is proving something like this so

409
00:14:53,940 --> 00:14:59,550
difficult so the main reason is that we

410
00:14:57,420 --> 00:15:02,310
are<font color="#E5E5E5"> quite better dealing with bounded</font>

411
00:14:59,550 --> 00:15:04,620
memory improvable security and we have

412
00:15:02,310 --> 00:15:06,479
to address the fact that an adversary

413
00:15:04,620 --> 00:15:08,070
<font color="#E5E5E5">the my wall way dysfunction arbitrarily</font>

414
00:15:06,480 --> 00:15:10,230
we want to show that<font color="#E5E5E5"> it's hard for any</font>

415
00:15:08,070 --> 00:15:12,060
possible such adversary try to memorize

416
00:15:10,230 --> 00:15:13,620
partial information about the execution

417
00:15:12,060 --> 00:15:15,449
and could do whatever<font color="#E5E5E5"> it likes to do</font>

418
00:15:13,620 --> 00:15:16,740
that and so these states with

419
00:15:15,449 --> 00:15:18,149
intermediate<font color="#CCCCCC"> states will</font><font color="#E5E5E5"> be really</font>

420
00:15:16,740 --> 00:15:21,300
arbitrary and we have to<font color="#E5E5E5"> think about</font>

421
00:15:18,149 --> 00:15:23,880
that<font color="#E5E5E5"> in the IMA chest case the proof was</font>

422
00:15:21,300 --> 00:15:26,310
much simpler somehow because the very

423
00:15:23,880 --> 00:15:28,860
<font color="#E5E5E5">nice elegant reduction to grasp</font>

424
00:15:26,310 --> 00:15:32,160
everything works the problem is<font color="#CCCCCC"> that</font>

425
00:15:28,860 --> 00:15:33,870
this trick really requires you that the

426
00:15:32,160 --> 00:15:34,350
data dependencies in the computation are

427
00:15:33,870 --> 00:15:36,150
all know

428
00:15:34,350 --> 00:15:39,390
priori something which we don't have

429
00:15:36,150 --> 00:15:40,920
here in fact the security of something

430
00:15:39,390 --> 00:15:43,290
like romics or a<font color="#E5E5E5"> script that are going</font>

431
00:15:40,920 --> 00:15:45,479
<font color="#E5E5E5">to</font><font color="#CCCCCC"> D really depends on data dependencies</font>

432
00:15:43,290 --> 00:15:48,630
being unpredictable otherwise you cannot

433
00:15:45,480 --> 00:15:50,910
get us high security as we get the

434
00:15:48,630 --> 00:15:53,250
intuition indeed is that<font color="#E5E5E5"> the reason why</font>

435
00:15:50,910 --> 00:15:54,780
this thing<font color="#CCCCCC"> is memory hard is that once</font>

436
00:15:53,250 --> 00:15:56,970
you move to the second stage these

437
00:15:54,780 --> 00:15:58,170
indices<font color="#CCCCCC"> that you have to go fetch for</font>

438
00:15:56,970 --> 00:16:00,300
which you have<font color="#E5E5E5"> to go fetch values from</font>

439
00:15:58,170 --> 00:16:02,400
the first phase are unpredictable until

440
00:16:00,300 --> 00:16:04,260
you compute them and so in order to be

441
00:16:02,400 --> 00:16:05,610
ready to<font color="#E5E5E5"> proceed fast you need to have</font>

442
00:16:04,260 --> 00:16:07,290
many of<font color="#CCCCCC"> these</font><font color="#E5E5E5"> values stored in memory</font>

443
00:16:05,610 --> 00:16:09,930
already otherwise<font color="#CCCCCC"> you're going to</font><font color="#E5E5E5"> be</font>

444
00:16:07,290 --> 00:16:11,939
<font color="#CCCCCC">stuck and need</font><font color="#E5E5E5"> to recompute things</font><font color="#CCCCCC"> and</font>

445
00:16:09,930 --> 00:16:13,979
so that's why the intuition I just want

446
00:16:11,940 --> 00:16:16,440
<font color="#E5E5E5">to give you a four minutes five minute</font>

447
00:16:13,980 --> 00:16:18,570
intuition about why a script is memory

448
00:16:16,440 --> 00:16:19,920
heart is to really think about the

449
00:16:18,570 --> 00:16:22,080
<font color="#CCCCCC">following game where you're thinking</font>

450
00:16:19,920 --> 00:16:25,949
about<font color="#E5E5E5"> the evaluation of romics think</font>

451
00:16:22,080 --> 00:16:28,200
about having<font color="#E5E5E5"> a game between a challenger</font>

452
00:16:25,950 --> 00:16:30,840
and an adversary the adversary learns

453
00:16:28,200 --> 00:16:33,030
the initial value<font color="#E5E5E5"> X 0 can make queries</font>

454
00:16:30,840 --> 00:16:35,280
to the random hash function the random

455
00:16:33,030 --> 00:16:36,930
Oracle and now the Challenger in the

456
00:16:35,280 --> 00:16:39,569
game<font color="#E5E5E5"> proceeds in rounds and on each</font>

457
00:16:36,930 --> 00:16:41,099
round gives to the adversary a random

458
00:16:39,570 --> 00:16:43,710
challenge which is an integer between 0

459
00:16:41,100 --> 00:16:46,920
and n minus 1 and the goal of the

460
00:16:43,710 --> 00:16:50,220
adversary is to come up<font color="#CCCCCC"> with possible</font>

461
00:16:46,920 --> 00:16:52,829
using as a few memory bits as possible

462
00:16:50,220 --> 00:16:55,440
with<font color="#CCCCCC"> the value index by that challenge</font>

463
00:16:52,830 --> 00:16:57,180
in the initial chain ok so I'm

464
00:16:55,440 --> 00:17:00,150
extracting away completely the second

465
00:16:57,180 --> 00:17:01,469
phase of<font color="#CCCCCC"> romics with idea that</font><font color="#E5E5E5"> it's</font>

466
00:17:00,150 --> 00:17:03,870
<font color="#E5E5E5">really about getting these challenges</font>

467
00:17:01,470 --> 00:17:06,180
that are unpredictable and going and

468
00:17:03,870 --> 00:17:07,140
fetch a particular value<font color="#E5E5E5"> in our universe</font>

469
00:17:06,180 --> 00:17:10,830
<font color="#CCCCCC">so</font><font color="#E5E5E5"> you want to go through all</font><font color="#CCCCCC"> of the</font>

470
00:17:07,140 --> 00:17:12,690
challenges<font color="#E5E5E5"> and be able to compute so in</font>

471
00:17:10,829 --> 00:17:14,129
fact we can make an<font color="#E5E5E5"> extra step here just</font>

472
00:17:12,690 --> 00:17:16,530
for the purpose of<font color="#CCCCCC"> this sauce which is</font>

473
00:17:14,130 --> 00:17:17,730
very<font color="#E5E5E5"> intuitive and even model a simpler</font>

474
00:17:16,530 --> 00:17:19,260
version of this<font color="#CCCCCC"> game where the adverse</font>

475
00:17:17,730 --> 00:17:23,310
story only remember similar to the

476
00:17:19,260 --> 00:17:26,640
pebble in case just the values are just

477
00:17:23,310 --> 00:17:28,319
values x0 to xn minus 1 or a subset of

478
00:17:26,640 --> 00:17:30,300
them and so we can<font color="#E5E5E5"> really think of this</font>

479
00:17:28,319 --> 00:17:31,800
also as a special case of a<font color="#E5E5E5"> babbling</font>

480
00:17:30,300 --> 00:17:35,300
game or a variant of a babbling game

481
00:17:31,800 --> 00:17:37,860
where we look at the line simply and

482
00:17:35,300 --> 00:17:40,110
putting a pebble on a particular node on

483
00:17:37,860 --> 00:17:42,540
<font color="#CCCCCC">the line with note from 0 to n minus 1</font>

484
00:17:40,110 --> 00:17:44,490
indicates remember in the corresponding

485
00:17:42,540 --> 00:17:46,470
value X i if you<font color="#E5E5E5"> have a pebble or not I</font>

486
00:17:44,490 --> 00:17:47,650
and then you have the same rule as in

487
00:17:46,470 --> 00:17:50,590
the paddling game we had in the free

488
00:17:47,650 --> 00:17:52,210
the stock and in particular multiple

489
00:17:50,590 --> 00:17:54,010
moves can be done in parallel<font color="#E5E5E5"> so</font>

490
00:17:52,210 --> 00:17:55,480
something the adversary could do in

491
00:17:54,010 --> 00:17:56,800
trying to evaluate it will start by

492
00:17:55,480 --> 00:17:59,080
putting always a pebble on the first

493
00:17:56,800 --> 00:18:01,180
node then it will add pebbles equal move

494
00:17:59,080 --> 00:18:03,100
tables<font color="#E5E5E5"> Louis put a pebble next to a</font>

495
00:18:01,180 --> 00:18:05,280
pebble which is<font color="#E5E5E5"> already there and moving</font>

496
00:18:03,100 --> 00:18:08,110
parallel to support parallelism of

497
00:18:05,280 --> 00:18:10,180
strategy<font color="#CCCCCC"> light and so particular the</font>

498
00:18:08,110 --> 00:18:12,399
challenge<font color="#E5E5E5"> that the round game with</font>

499
00:18:10,180 --> 00:18:14,920
challenges in this setting will simply

500
00:18:12,400 --> 00:18:16,960
have now the adversary learning a

501
00:18:14,920 --> 00:18:19,510
challenge at every round say for example

502
00:18:16,960 --> 00:18:21,970
<font color="#E5E5E5">here for and now the goal is to put a</font>

503
00:18:19,510 --> 00:18:23,650
pebble on for for example now this will

504
00:18:21,970 --> 00:18:25,570
be done in four steps if you don't have

505
00:18:23,650 --> 00:18:27,070
anything on the line because<font color="#E5E5E5"> you have to</font>

506
00:18:25,570 --> 00:18:28,929
start by putting a pebble and then move

507
00:18:27,070 --> 00:18:31,360
step after<font color="#E5E5E5"> step let's say you get</font>

508
00:18:28,930 --> 00:18:32,950
another challenge now you have<font color="#E5E5E5"> to put</font>

509
00:18:31,360 --> 00:18:33,939
more another pebble move there in two

510
00:18:32,950 --> 00:18:35,440
steps but now if you get<font color="#E5E5E5"> another</font>

511
00:18:33,940 --> 00:18:37,090
challenge of six now you're lucky you

512
00:18:35,440 --> 00:18:39,490
have a table pebble nearby and four and

513
00:18:37,090 --> 00:18:41,740
you can move fairly quickly<font color="#E5E5E5"> to six right</font>

514
00:18:39,490 --> 00:18:43,690
and you're interested now in seeing

515
00:18:41,740 --> 00:18:45,730
what's the complexity of an adversary to

516
00:18:43,690 --> 00:18:47,620
go through this game and in particular

517
00:18:45,730 --> 00:18:49,510
note here that the memory complexity of

518
00:18:47,620 --> 00:18:51,610
the particular stage corresponds roughly

519
00:18:49,510 --> 00:18:55,660
to the number<font color="#E5E5E5"> of pebbles times the</font>

520
00:18:51,610 --> 00:18:57,459
number of bits<font color="#E5E5E5"> to store value and now we</font>

521
00:18:55,660 --> 00:18:59,140
want<font color="#E5E5E5"> to lower bound the complexity of</font>

522
00:18:57,460 --> 00:19:01,240
any strategy that successfully go

523
00:18:59,140 --> 00:19:02,680
through this game and again this is

524
00:19:01,240 --> 00:19:05,170
completely arbitrary the strategy could

525
00:19:02,680 --> 00:19:07,120
be any to do anything so it could have

526
00:19:05,170 --> 00:19:09,700
different amounts of Babel a different

527
00:19:07,120 --> 00:19:10,840
stage whenever he<font color="#E5E5E5"> gets a new challenge</font>

528
00:19:09,700 --> 00:19:12,550
you could<font color="#E5E5E5"> have a</font><font color="#CCCCCC"> different number</font><font color="#E5E5E5"> of</font>

529
00:19:10,840 --> 00:19:15,010
<font color="#E5E5E5">different subset of pebbles on</font><font color="#CCCCCC"> the line</font>

530
00:19:12,550 --> 00:19:17,320
and can take<font color="#E5E5E5"> different amounts of times</font>

531
00:19:15,010 --> 00:19:18,910
to answer the challenge and so we would

532
00:19:17,320 --> 00:19:20,980
like<font color="#CCCCCC"> to show that no matter what we do</font>

533
00:19:18,910 --> 00:19:24,070
there's a lower bound which is squared

534
00:19:20,980 --> 00:19:27,670
in n for the curve here which is defined

535
00:19:24,070 --> 00:19:30,970
by the red lines so this<font color="#CCCCCC"> is the core of</font>

536
00:19:27,670 --> 00:19:33,850
our proof and the basic<font color="#E5E5E5"> idea here is</font>

537
00:19:30,970 --> 00:19:35,230
that whenever you<font color="#E5E5E5"> have AB certain</font>

538
00:19:33,850 --> 00:19:38,409
<font color="#CCCCCC">traveling configuration and you learn</font>

539
00:19:35,230 --> 00:19:40,270
<font color="#CCCCCC">the challenge the time you need</font><font color="#E5E5E5"> to</font>

540
00:19:38,410 --> 00:19:42,010
answer the challenge is inversely

541
00:19:40,270 --> 00:19:44,320
proportional<font color="#CCCCCC"> to the pebbles you have on</font>

542
00:19:42,010 --> 00:19:46,300
the line this<font color="#E5E5E5"> is quite natural because</font>

543
00:19:44,320 --> 00:19:51,300
if you have a certain<font color="#E5E5E5"> set of pebbles of</font>

544
00:19:46,300 --> 00:19:53,790
<font color="#CCCCCC">so much time ok I'll</font><font color="#E5E5E5"> five</font><font color="#CCCCCC"> ok good so</font>

545
00:19:51,300 --> 00:19:56,409
<font color="#E5E5E5">yeah I think I'm going to be faster so</font>

546
00:19:53,790 --> 00:19:58,659
if you look at<font color="#CCCCCC"> the</font><font color="#E5E5E5"> set of pebbles that</font>

547
00:19:56,410 --> 00:20:01,180
you have here in the line there could be

548
00:19:58,660 --> 00:20:05,890
anything so<font color="#E5E5E5"> you're a fee of them and now</font>

549
00:20:01,180 --> 00:20:07,480
you want to see how<font color="#CCCCCC"> many challenges you</font>

550
00:20:05,890 --> 00:20:09,790
could answer within a certain amount of

551
00:20:07,480 --> 00:20:13,540
time steps a two time steps in fact Lee

552
00:20:09,790 --> 00:20:15,460
County the street in<font color="#CCCCCC"> the paper then</font>

553
00:20:13,540 --> 00:20:17,889
there are only so many challenges<font color="#CCCCCC"> so any</font>

554
00:20:15,460 --> 00:20:20,350
challenger land into this highlighted

555
00:20:17,890 --> 00:20:24,700
area could be answer within three steps

556
00:20:20,350 --> 00:20:27,760
anything else requires more<font color="#E5E5E5"> time and so</font>

557
00:20:24,700 --> 00:20:29,410
if you<font color="#E5E5E5"> do the math what you see is that</font>

558
00:20:27,760 --> 00:20:33,310
this gives<font color="#E5E5E5"> you a very nice for a</font>

559
00:20:29,410 --> 00:20:36,850
ballistic<font color="#CCCCCC"> trade-off where we see that</font>

560
00:20:33,310 --> 00:20:38,500
what least with probability<font color="#E5E5E5"> one half the</font>

561
00:20:36,850 --> 00:20:40,389
time that you<font color="#CCCCCC"> need to answer the</font>

562
00:20:38,500 --> 00:20:42,310
challenge the probabilities over the

563
00:20:40,390 --> 00:20:45,190
choice of<font color="#E5E5E5"> the challenge is at least n</font>

564
00:20:42,310 --> 00:20:47,950
over or larger than n over twice the

565
00:20:45,190 --> 00:20:49,420
number of pebbles you have or in<font color="#E5E5E5"> other</font>

566
00:20:47,950 --> 00:20:51,790
words what that means is that we

567
00:20:49,420 --> 00:20:53,920
probability one-half you have a

568
00:20:51,790 --> 00:20:56,649
trade-off in the form that the time you

569
00:20:53,920 --> 00:20:59,800
need to<font color="#E5E5E5"> answer the challenge times the</font>

570
00:20:56,650 --> 00:21:06,370
number of pebbles that you have on the

571
00:20:59,800 --> 00:21:09,340
line is at least n over 2 right so this

572
00:21:06,370 --> 00:21:11,919
<font color="#E5E5E5">takes us much closer to what we want but</font>

573
00:21:09,340 --> 00:21:14,409
<font color="#E5E5E5">we are not quite there yet in particular</font>

574
00:21:11,920 --> 00:21:15,820
what this means now assuming that is

575
00:21:14,410 --> 00:21:17,800
straight off just for the<font color="#E5E5E5"> simplicity of</font>

576
00:21:15,820 --> 00:21:20,379
my explanation to make it simpler hold

577
00:21:17,800 --> 00:21:22,300
for every challenge what it means<font color="#CCCCCC"> is</font>

578
00:21:20,380 --> 00:21:24,730
<font color="#E5E5E5">that if we look now at the amount of</font>

579
00:21:22,300 --> 00:21:26,680
pebbles that the adversary has on the

580
00:21:24,730 --> 00:21:29,380
line every time<font color="#CCCCCC"> a new challenge is</font>

581
00:21:26,680 --> 00:21:32,290
revealed and now we look<font color="#CCCCCC"> at the</font>

582
00:21:29,380 --> 00:21:34,360
rectangles that are defined by taking as

583
00:21:32,290 --> 00:21:35,860
a height this number of pebbles and the

584
00:21:34,360 --> 00:21:38,800
width of the rectangle is the time it

585
00:21:35,860 --> 00:21:41,199
takes to answer the challenge then what

586
00:21:38,800 --> 00:21:43,930
this train of tells us is that the<font color="#E5E5E5"> area</font>

587
00:21:41,200 --> 00:21:45,100
<font color="#E5E5E5">of these rectangles of all of them what</font>

588
00:21:43,930 --> 00:21:47,500
is all of<font color="#E5E5E5"> them for which is probably</font>

589
00:21:45,100 --> 00:21:50,080
stick trade of holes is at least a

590
00:21:47,500 --> 00:21:52,720
linear in n so if you have any

591
00:21:50,080 --> 00:21:56,070
challenges now<font color="#E5E5E5"> it's intuitive to think</font>

592
00:21:52,720 --> 00:21:58,300
that the overall area should be n square

593
00:21:56,070 --> 00:22:01,659
unfortunately that's<font color="#E5E5E5"> not quite what we</font>

594
00:21:58,300 --> 00:22:04,360
need because we need<font color="#CCCCCC"> to look at</font><font color="#E5E5E5"> this</font>

595
00:22:01,660 --> 00:22:06,370
curve which<font color="#CCCCCC"> is defined by the amount</font><font color="#E5E5E5"> of</font>

596
00:22:04,360 --> 00:22:07,990
pebbles we have it every time and we

597
00:22:06,370 --> 00:22:09,879
have no guarantee that after an

598
00:22:07,990 --> 00:22:11,740
adversary learns the challenge you might

599
00:22:09,880 --> 00:22:13,560
<font color="#E5E5E5">just not drop everything</font><font color="#CCCCCC"> gasps and</font><font color="#E5E5E5"> just</font>

600
00:22:11,740 --> 00:22:16,050
remember for<font color="#E5E5E5"> example the close</font>

601
00:22:13,560 --> 00:22:17,429
paddle to the challenge and forget about

602
00:22:16,050 --> 00:22:18,690
everything else in fact for<font color="#E5E5E5"> the last</font>

603
00:22:17,430 --> 00:22:20,280
challenge for example that's the most

604
00:22:18,690 --> 00:22:23,250
reasonable thing to do everything<font color="#E5E5E5"> else</font>

605
00:22:20,280 --> 00:22:24,930
will be rather stupid so which that

606
00:22:23,250 --> 00:22:27,090
means is that the area<font color="#E5E5E5"> which is the blue</font>

607
00:22:24,930 --> 00:22:31,560
area hearing is<font color="#E5E5E5"> N squared but we need to</font>

608
00:22:27,090 --> 00:22:34,740
lower bound the area which is defined by

609
00:22:31,560 --> 00:22:36,659
the red histograms now<font color="#E5E5E5"> I'm not going to</font>

610
00:22:34,740 --> 00:22:38,670
go into detail we do this but the basic

611
00:22:36,660 --> 00:22:41,250
idea and<font color="#E5E5E5"> that's one</font><font color="#CCCCCC"> of our two major</font>

612
00:22:38,670 --> 00:22:43,380
technical contributions here is to look

613
00:22:41,250 --> 00:22:45,900
not at the area that we have under<font color="#CCCCCC"> the</font>

614
00:22:43,380 --> 00:22:47,490
curve after the challenges reveals but

615
00:22:45,900 --> 00:22:49,580
to realize<font color="#CCCCCC"> that in order to have</font><font color="#E5E5E5"> a</font>

616
00:22:47,490 --> 00:22:52,500
number of pebbles which is fairly high

617
00:22:49,580 --> 00:22:53,790
then we need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> put</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> there and so</font>

618
00:22:52,500 --> 00:22:56,190
there is some work that we need<font color="#CCCCCC"> to do</font>

619
00:22:53,790 --> 00:22:58,440
and so what we look at is not at the

620
00:22:56,190 --> 00:23:00,180
drop or the behavior of the curve<font color="#E5E5E5"> after</font>

621
00:22:58,440 --> 00:23:01,680
we learn the challenge but we use a

622
00:23:00,180 --> 00:23:03,210
generalized version of the trade-off to

623
00:23:01,680 --> 00:23:05,490
look at what happens before we learn the

624
00:23:03,210 --> 00:23:06,990
challenge the other main challenge of

625
00:23:05,490 --> 00:23:09,270
course<font color="#E5E5E5"> that I</font><font color="#CCCCCC"> haven't talked about is</font>

626
00:23:06,990 --> 00:23:12,450
that Here I am looking<font color="#CCCCCC"> at the simplified</font>

627
00:23:09,270 --> 00:23:13,560
version in terms of traveling but

628
00:23:12,450 --> 00:23:15,000
obviously<font color="#CCCCCC"> we want to deal with</font>

629
00:23:13,560 --> 00:23:19,050
adversaries that can store any type of

630
00:23:15,000 --> 00:23:21,810
information about the previous states of

631
00:23:19,050 --> 00:23:23,340
the execution and<font color="#E5E5E5"> that requires some</font>

632
00:23:21,810 --> 00:23:25,050
more technical work which I'm<font color="#E5E5E5"> not going</font>

633
00:23:23,340 --> 00:23:27,090
to talk<font color="#E5E5E5"> about here but that's</font><font color="#CCCCCC"> very</font>

634
00:23:25,050 --> 00:23:29,159
important now I I some length your

635
00:23:27,090 --> 00:23:30,990
conclusions here that I<font color="#CCCCCC"> want to start</font>

636
00:23:29,160 --> 00:23:32,820
going<font color="#CCCCCC"> through so the first one is that I</font>

637
00:23:30,990 --> 00:23:34,700
<font color="#E5E5E5">think this</font><font color="#CCCCCC"> is very it's an important</font>

638
00:23:32,820 --> 00:23:37,139
result because it's a good example of an

639
00:23:34,700 --> 00:23:40,620
interesting<font color="#CCCCCC"> theory problem that however</font>

640
00:23:37,140 --> 00:23:41,880
validates a very practical design I just

641
00:23:40,620 --> 00:23:42,840
have a quote here from<font color="#E5E5E5"> Phil raga with</font>

642
00:23:41,880 --> 00:23:44,610
essay on the moral character

643
00:23:42,840 --> 00:23:46,709
cryptographic worker in fact<font color="#CCCCCC"> he</font>

644
00:23:44,610 --> 00:23:48,479
motivates this is one of an important

645
00:23:46,710 --> 00:23:51,900
line of work<font color="#E5E5E5"> to try</font><font color="#CCCCCC"> to understand this</font>

646
00:23:48,480 --> 00:23:55,380
mode but that's not the one the only<font color="#E5E5E5"> one</font>

647
00:23:51,900 --> 00:23:57,210
thing here so<font color="#CCCCCC"> it</font><font color="#E5E5E5"> is really it only gives</font>

648
00:23:55,380 --> 00:24:00,000
also a very good<font color="#CCCCCC"> example of a practical</font>

649
00:23:57,210 --> 00:24:03,270
design we strong provable memory harness

650
00:24:00,000 --> 00:24:04,410
guarantees and also the<font color="#CCCCCC"> first one which</font>

651
00:24:03,270 --> 00:24:06,510
<font color="#CCCCCC">is really practical in the search</font>

652
00:24:04,410 --> 00:24:07,920
probable guarantees and<font color="#E5E5E5"> also it's really</font>

653
00:24:06,510 --> 00:24:11,400
the first example even in theory of an

654
00:24:07,920 --> 00:24:13,500
optically memory<font color="#E5E5E5"> hard mhf now a question</font>

655
00:24:11,400 --> 00:24:15,060
<font color="#E5E5E5">you might ask because I've</font><font color="#CCCCCC"> been focusing</font>

656
00:24:13,500 --> 00:24:18,150
on a script and row makes<font color="#E5E5E5"> is what about</font>

657
00:24:15,060 --> 00:24:19,379
are going to<font color="#CCCCCC"> D so are going</font><font color="#E5E5E5"> to d for</font>

658
00:24:18,150 --> 00:24:21,840
those of you<font color="#E5E5E5"> who are familiar with it as</font>

659
00:24:19,380 --> 00:24:23,130
a very similar design to escalate the

660
00:24:21,840 --> 00:24:27,330
main<font color="#CCCCCC"> difference being that you don't</font>

661
00:24:23,130 --> 00:24:28,830
<font color="#E5E5E5">have such two phases of of execution but</font>

662
00:24:27,330 --> 00:24:31,500
you have a<font color="#E5E5E5"> sliding window of values that</font>

663
00:24:28,830 --> 00:24:33,120
<font color="#E5E5E5">you're going to</font><font color="#CCCCCC"> use and point back to to</font>

664
00:24:31,500 --> 00:24:34,380
inserting the execution now we don't

665
00:24:33,120 --> 00:24:36,330
have this written down in the<font color="#E5E5E5"> paper</font>

666
00:24:34,380 --> 00:24:37,620
<font color="#E5E5E5">that's why I have a star but</font><font color="#CCCCCC"> the same</font>

667
00:24:36,330 --> 00:24:40,320
technique should easily give the same

668
00:24:37,620 --> 00:24:44,010
lower bound but so we don't have<font color="#E5E5E5"> this in</font>

669
00:24:40,320 --> 00:24:46,470
recent yet ok now another thing that I

670
00:24:44,010 --> 00:24:48,840
wanted<font color="#E5E5E5"> to say is that that also came up</font>

671
00:24:46,470 --> 00:24:51,660
in the previous talk is about the issue

672
00:24:48,840 --> 00:24:53,340
of<font color="#E5E5E5"> vm h f versus IM hf so data dependent</font>

673
00:24:51,660 --> 00:24:56,550
memory heart function versus data

674
00:24:53,340 --> 00:24:59,580
independent memory heart function so at

675
00:24:56,550 --> 00:25:02,040
least from with respect to the goal of

676
00:24:59,580 --> 00:25:04,590
achieving high and optimal memory

677
00:25:02,040 --> 00:25:08,340
harness in a provable sense so the<font color="#E5E5E5"> m hf</font>

678
00:25:04,590 --> 00:25:10,980
seems to be easier to<font color="#E5E5E5"> get right and also</font>

679
00:25:08,340 --> 00:25:14,520
probably achieve higher memory harness

680
00:25:10,980 --> 00:25:17,640
as we seen asymptotic sense so the main

681
00:25:14,520 --> 00:25:19,160
problem here<font color="#E5E5E5"> that in my face despite the</font>

682
00:25:17,640 --> 00:25:21,840
fact that they<font color="#E5E5E5"> are also harder to prove</font>

683
00:25:19,160 --> 00:25:23,370
memory heart but other than<font color="#CCCCCC"> that</font><font color="#E5E5E5"> of</font>

684
00:25:21,840 --> 00:25:25,080
course<font color="#CCCCCC"> the main</font><font color="#E5E5E5"> concern of side channels</font>

685
00:25:23,370 --> 00:25:27,179
and this is something<font color="#CCCCCC"> that was</font><font color="#E5E5E5"> also</font>

686
00:25:25,080 --> 00:25:29,280
mentioned by<font color="#CCCCCC"> jeremih they</font><font color="#E5E5E5"> are a possible</font>

687
00:25:27,180 --> 00:25:32,910
<font color="#CCCCCC">concern</font><font color="#E5E5E5"> you memory access patterns do</font>

688
00:25:29,280 --> 00:25:34,110
depend on the input and so here the main

689
00:25:32,910 --> 00:25:36,420
<font color="#E5E5E5">point is</font><font color="#CCCCCC"> that you should be</font><font color="#E5E5E5"> really</font>

690
00:25:34,110 --> 00:25:38,310
assessing whether in the application

691
00:25:36,420 --> 00:25:40,830
you're looking at you're more concerned

692
00:25:38,310 --> 00:25:42,030
about memory harness<font color="#E5E5E5"> being strong or</font>

693
00:25:40,830 --> 00:25:43,500
whether<font color="#E5E5E5"> you're concerned about possible</font>

694
00:25:42,030 --> 00:25:46,680
side channels so there are<font color="#E5E5E5"> applications</font>

695
00:25:43,500 --> 00:25:48,840
like proofs of work work for sure side

696
00:25:46,680 --> 00:25:50,250
channels do not seem relevant at all for

697
00:25:48,840 --> 00:25:51,990
password hashing what you have to see

698
00:25:50,250 --> 00:25:53,460
but<font color="#E5E5E5"> if you're not concerned about that</font>

699
00:25:51,990 --> 00:25:55,770
then there's really no reason why you

700
00:25:53,460 --> 00:25:56,970
shouldn't be using data dependent memory

701
00:25:55,770 --> 00:26:00,629
heart function since the guarantees

702
00:25:56,970 --> 00:26:03,630
really seem to<font color="#E5E5E5"> be stronger</font><font color="#CCCCCC"> and finally</font>

703
00:26:00,630 --> 00:26:05,550
just a few words about proof so I really

704
00:26:03,630 --> 00:26:06,980
think that there's been some debate also

705
00:26:05,550 --> 00:26:10,320
for those of you that follows here<font color="#E5E5E5"> for G</font>

706
00:26:06,980 --> 00:26:12,390
on<font color="#E5E5E5"> the role of proofs in the context of</font>

707
00:26:10,320 --> 00:26:14,520
memory harness I really think they are

708
00:26:12,390 --> 00:26:17,130
important so if you have a mode that as

709
00:26:14,520 --> 00:26:18,510
a proof and is as efficient is one

710
00:26:17,130 --> 00:26:20,130
<font color="#E5E5E5">without other think there's any reason</font>

711
00:26:18,510 --> 00:26:23,580
<font color="#E5E5E5">to discard the one without with the</font>

712
00:26:20,130 --> 00:26:25,650
proof and of<font color="#CCCCCC"> course it's not the only</font>

713
00:26:23,580 --> 00:26:28,409
thing there's a<font color="#E5E5E5"> lot of interesting</font>

714
00:26:25,650 --> 00:26:30,600
questions related to how tight disproves

715
00:26:28,410 --> 00:26:33,150
are and what are the models are the best

716
00:26:30,600 --> 00:26:35,310
ones but still I think<font color="#E5E5E5"> the proof remains</font>

717
00:26:33,150 --> 00:26:37,620
an important component and of course

718
00:26:35,310 --> 00:26:39,810
<font color="#E5E5E5">when I say proofs I mean you have to</font>

719
00:26:37,620 --> 00:26:41,158
target concrete security and be as

720
00:26:39,810 --> 00:26:42,809
complete as possible s

721
00:26:41,159 --> 00:26:45,179
actually in<font color="#CCCCCC"> this domain we're speeding</font>

722
00:26:42,809 --> 00:26:47,399
up things by a constant factor really

723
00:26:45,179 --> 00:26:48,929
matter and makes an impact you have to

724
00:26:47,399 --> 00:26:50,879
<font color="#E5E5E5">really work and make an effort into</font>

725
00:26:48,929 --> 00:26:52,919
having bounce at our side as possible

726
00:26:50,879 --> 00:26:54,299
<font color="#CCCCCC">okay so that's actually everything I</font>

727
00:26:52,919 --> 00:26:56,820
wanted to<font color="#CCCCCC"> say so there's</font><font color="#E5E5E5"> a paper on</font>

728
00:26:54,299 --> 00:27:07,289
aprons on about the<font color="#CCCCCC"> results so feel free</font>

729
00:26:56,820 --> 00:27:09,029
<font color="#E5E5E5">to have a look a quick question so there</font>

730
00:27:07,289 --> 00:27:10,739
there was a constant in front of your

731
00:27:09,029 --> 00:27:12,359
bound right so does<font color="#CCCCCC"> that give any</font>

732
00:27:10,739 --> 00:27:14,840
inspiration for a new attack that would

733
00:27:12,359 --> 00:27:17,639
be a small constant factor speed up I

734
00:27:14,840 --> 00:27:21,749
don't<font color="#E5E5E5"> think this</font><font color="#CCCCCC"> is really tight I mean</font>

735
00:27:17,639 --> 00:27:24,090
if there are many ways of like relaxing

736
00:27:21,749 --> 00:27:26,669
things in the proof that<font color="#E5E5E5"> my make might</font>

737
00:27:24,090 --> 00:27:29,309
make things a little bit<font color="#E5E5E5"> better so for</font>

738
00:27:26,669 --> 00:27:30,450
example yes<font color="#E5E5E5"> just requiring that the</font>

739
00:27:29,309 --> 00:27:31,979
usage of memory is slightly higher

740
00:27:30,450 --> 00:27:33,599
throughout the crew so it's<font color="#E5E5E5"> not clear</font>

741
00:27:31,979 --> 00:27:35,609
really<font color="#E5E5E5"> and there's some work there</font><font color="#CCCCCC"> that</font>

742
00:27:33,599 --> 00:27:37,678
should be done and try to tighten the

743
00:27:35,609 --> 00:27:40,070
now so I don't<font color="#CCCCCC"> think one over 25 is the</font>

744
00:27:37,679 --> 00:27:40,070
final answer

745
00:27:42,650 --> 00:27:50,419
[Applause]

