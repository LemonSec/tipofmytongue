1
00:00:00,000 --> 00:00:05,160
it is<font color="#E5E5E5"> Islam thank you for the</font>

2
00:00:02,159 --> 00:00:08,039
<font color="#E5E5E5">introduction this is joint work together</font>

3
00:00:05,160 --> 00:00:10,800
with colleague Britta<font color="#E5E5E5"> Hale and Sebastian</font>

4
00:00:08,039 --> 00:00:14,129
lower both here as well as the<font color="#CCCCCC"> Tebow</font>

5
00:00:10,800 --> 00:00:16,470
yogurt and it's<font color="#E5E5E5"> about key exchange so</font>

6
00:00:14,130 --> 00:00:18,449
this nice<font color="#CCCCCC"> principal</font><font color="#E5E5E5"> this neat principle</font>

7
00:00:16,470 --> 00:00:21,119
that allows to remote parties to

8
00:00:18,449 --> 00:00:24,150
establish a shared symmetric<font color="#CCCCCC"> crypto key</font>

9
00:00:21,119 --> 00:00:26,189
over in secure connections now in

10
00:00:24,150 --> 00:00:29,490
<font color="#CCCCCC">practice turns out that this keychain</font>

11
00:00:26,189 --> 00:00:31,560
step can be quite a bottleneck so assume

12
00:00:29,490 --> 00:00:33,629
you have one message that needs to be

13
00:00:31,560 --> 00:00:36,629
sent back and<font color="#CCCCCC"> forth between the client</font>

14
00:00:33,630 --> 00:00:38,730
<font color="#E5E5E5">Alice and Bob the server and this means</font>

15
00:00:36,630 --> 00:00:40,620
that Ellis has to<font color="#E5E5E5"> wait for this one</font>

16
00:00:38,730 --> 00:00:44,669
round-trip time before she can actually

17
00:00:40,620 --> 00:00:46,530
<font color="#E5E5E5">send beta so now if you're on a high</font>

18
00:00:44,670 --> 00:00:48,899
latency for example a mobile networks

19
00:00:46,530 --> 00:00:51,570
this will incur quite an overhead quite

20
00:00:48,899 --> 00:00:55,440
a delay of potentially many<font color="#CCCCCC"> hundred</font>

21
00:00:51,570 --> 00:00:57,480
milliseconds<font color="#E5E5E5"> so</font><font color="#CCCCCC"> a solution to this is to</font>

22
00:00:55,440 --> 00:01:00,329
employ a zero round-trip time key

23
00:00:57,480 --> 00:01:02,730
exchange protocol a<font color="#CCCCCC"> keychain</font><font color="#E5E5E5"> protocol is</font>

24
00:01:00,329 --> 00:01:05,220
around your<font color="#E5E5E5"> time</font><font color="#CCCCCC"> it requires</font><font color="#E5E5E5"> only a</font>

25
00:01:02,730 --> 00:01:07,110
single message to be sent from<font color="#E5E5E5"> the</font>

26
00:01:05,220 --> 00:01:10,979
client<font color="#E5E5E5"> to the server in order to</font>

27
00:01:07,110 --> 00:01:13,350
establish a key this means that Ellis

28
00:01:10,979 --> 00:01:15,240
along<font color="#CCCCCC"> with</font><font color="#E5E5E5"> this key exchange message can</font>

29
00:01:13,350 --> 00:01:17,009
already use that key<font color="#CCCCCC"> to encrypt data</font>

30
00:01:15,240 --> 00:01:19,080
that shows travels along with<font color="#E5E5E5"> that</font>

31
00:01:17,009 --> 00:01:24,060
message he doesn't have to wait<font color="#CCCCCC"> for a</font>

32
00:01:19,080 --> 00:01:25,770
response from the server now they're on

33
00:01:24,060 --> 00:01:28,200
to time T exchanges theoretically not a

34
00:01:25,770 --> 00:01:30,960
new concept but has gained quite some

35
00:01:28,200 --> 00:01:33,450
practical attention over the last year's

36
00:01:30,960 --> 00:01:35,309
for being an explicit goal in Google's

37
00:01:33,450 --> 00:01:40,170
quick protocol as well as in the

38
00:01:35,310 --> 00:01:43,140
upcoming TLS version 1.3 they are

39
00:01:40,170 --> 00:01:45,899
however<font color="#CCCCCC"> two main security drawbacks with</font>

40
00:01:43,140 --> 00:01:47,729
0 at time T exchange they're<font color="#E5E5E5"> both kind</font>

41
00:01:45,899 --> 00:01:49,950
of stemming<font color="#E5E5E5"> from the fact that is that</font>

42
00:01:47,729 --> 00:01:53,189
the server cannot actively contribute to

43
00:01:49,950 --> 00:01:57,000
that exchange the first one is replay

44
00:01:53,189 --> 00:01:59,070
attacks adversary may simply go and copy

45
00:01:57,000 --> 00:02:01,890
the key exchange message and the

46
00:01:59,070 --> 00:02:05,119
accompanying message<font color="#E5E5E5"> the competing data</font>

47
00:02:01,890 --> 00:02:07,710
being sent and replay this to the server

48
00:02:05,119 --> 00:02:09,989
now the server doesn't take extra care

49
00:02:07,710 --> 00:02:11,790
who will just decrypt this data again

50
00:02:09,989 --> 00:02:13,020
and<font color="#E5E5E5"> basically what you</font><font color="#CCCCCC"> have is a</font>

51
00:02:11,790 --> 00:02:16,890
replayed message

52
00:02:13,020 --> 00:02:19,230
replate data in items now turns out in

53
00:02:16,890 --> 00:02:21,239
some settings this<font color="#E5E5E5"> is essentially</font>

54
00:02:19,230 --> 00:02:23,040
unavoidable as for example has been

55
00:02:21,240 --> 00:02:24,690
discussed by erik rhodes scholar and

56
00:02:23,040 --> 00:02:28,530
<font color="#E5E5E5">adam Langley at last year's</font><font color="#CCCCCC"> real-world</font>

57
00:02:24,690 --> 00:02:31,050
Krypton the second big issue with

58
00:02:28,530 --> 00:02:34,770
<font color="#E5E5E5">toronto time key exchange is forward</font>

59
00:02:31,050 --> 00:02:38,190
secrecy or<font color="#E5E5E5"> other the lack of it so the</font>

60
00:02:34,770 --> 00:02:40,920
server will use<font color="#CCCCCC"> some kind</font><font color="#E5E5E5"> of secret key</font>

61
00:02:38,190 --> 00:02:44,250
to authenticate and derive the session

62
00:02:40,920 --> 00:02:46,500
key for<font color="#CCCCCC"> that key exchange</font><font color="#E5E5E5"> nowadays</font>

63
00:02:44,250 --> 00:02:48,900
adversary later compromises that keys

64
00:02:46,500 --> 00:02:51,030
<font color="#E5E5E5">because there is no FML contribution</font>

65
00:02:48,900 --> 00:02:53,400
from<font color="#E5E5E5"> the server it has everything to</font>

66
00:02:51,030 --> 00:02:57,480
decrypt the data because it can derive

67
00:02:53,400 --> 00:03:00,120
the same key just simply again now as

68
00:02:57,480 --> 00:03:03,359
you<font color="#CCCCCC"> know forward secrecy is considered a</font>

69
00:03:00,120 --> 00:03:06,300
crucial institutional and very important

70
00:03:03,360 --> 00:03:09,030
security goal in particular to prevent

71
00:03:06,300 --> 00:03:10,760
mass surveillance but it means<font color="#E5E5E5"> the lack</font>

72
00:03:09,030 --> 00:03:13,470
of it here is particularly unfortunate

73
00:03:10,760 --> 00:03:15,450
but commonly considered an inherent

74
00:03:13,470 --> 00:03:18,870
limitation of the round-trip time key

75
00:03:15,450 --> 00:03:20,760
exchange in this work we are ever show

76
00:03:18,870 --> 00:03:23,700
that this common belief is actually

77
00:03:20,760 --> 00:03:25,769
false so we<font color="#E5E5E5"> build a 0 nship time key</font>

78
00:03:23,700 --> 00:03:30,540
exchange<font color="#CCCCCC"> protocol which achieves full</font>

79
00:03:25,770 --> 00:03:32,459
forward secrecy so to understand how

80
00:03:30,540 --> 00:03:34,709
this<font color="#E5E5E5"> works let's first have a look at a</font>

81
00:03:32,459 --> 00:03:38,730
somewhat<font color="#CCCCCC"> related scenario that of a</font>

82
00:03:34,709 --> 00:03:40,740
synchronous messaging so here Ellis

83
00:03:38,730 --> 00:03:44,700
wants to send some message over to<font color="#E5E5E5"> Bob</font>

84
00:03:40,740 --> 00:03:47,820
without any preceding communication well

85
00:03:44,700 --> 00:03:50,010
this can be solved of course by pure

86
00:03:47,820 --> 00:03:51,510
simple public key encryption you just

87
00:03:50,010 --> 00:03:54,690
encrypt this message under the public

88
00:03:51,510 --> 00:03:56,730
key<font color="#CCCCCC"> evolve in it what you want to do but</font>

89
00:03:54,690 --> 00:04:00,000
does leave you with the same<font color="#E5E5E5"> problem of</font>

90
00:03:56,730 --> 00:04:02,609
liking forward secrecy of course now

91
00:04:00,000 --> 00:04:05,430
<font color="#E5E5E5">already back in 2003 karate</font><font color="#CCCCCC"> halarian</font>

92
00:04:02,610 --> 00:04:08,340
<font color="#CCCCCC">taps showed how to achieve a chorus</font>

93
00:04:05,430 --> 00:04:09,930
notion of forward secrecy by employing a

94
00:04:08,340 --> 00:04:12,780
hierarchical identity based encryption

95
00:04:09,930 --> 00:04:14,880
scheme under settings so for this you

96
00:04:12,780 --> 00:04:17,548
would<font color="#CCCCCC"> divide time into some</font><font color="#E5E5E5"> course</font>

97
00:04:14,880 --> 00:04:20,070
intervals and then the secret key

98
00:04:17,548 --> 00:04:22,469
correspond stage of this interval now

99
00:04:20,070 --> 00:04:24,300
virtually comes and compromises some<font color="#CCCCCC"> it</font>

100
00:04:22,470 --> 00:04:25,620
<font color="#E5E5E5">some secret key this means you cannot</font>

101
00:04:24,300 --> 00:04:30,510
decrypt mess

102
00:04:25,620 --> 00:04:32,639
just from earlier intervals still within

103
00:04:30,510 --> 00:04:34,949
<font color="#E5E5E5">the same interval it can decrypt all</font>

104
00:04:32,639 --> 00:04:36,479
your messages being sent so it's just

105
00:04:34,949 --> 00:04:40,740
giving you some coarse<font color="#E5E5E5"> grained notion of</font>

106
00:04:36,479 --> 00:04:44,010
forward secrecy and this is why in 2015

107
00:04:40,740 --> 00:04:46,199
<font color="#CCCCCC">Green & Myers came up with a more</font>

108
00:04:44,010 --> 00:04:48,870
fine-grained approach to forward secrecy

109
00:04:46,199 --> 00:04:52,050
which they called punctual forward

110
00:04:48,870 --> 00:04:54,479
secret encryption and for this they

111
00:04:52,050 --> 00:04:56,100
fused this hive approach with an

112
00:04:54,479 --> 00:04:59,400
additional<font color="#E5E5E5"> attribute based encryption</font>

113
00:04:56,100 --> 00:05:02,100
scheme and it allows you to take the

114
00:04:59,400 --> 00:05:04,409
<font color="#E5E5E5">secret key of some interval and puncture</font>

115
00:05:02,100 --> 00:05:06,449
out the capability to decrypt specific

116
00:05:04,410 --> 00:05:08,789
ciphertext you've seen already and by

117
00:05:06,449 --> 00:05:11,479
<font color="#CCCCCC">this removing this capability you get</font>

118
00:05:08,789 --> 00:05:14,340
forward secrecy for these life<font color="#E5E5E5"> at X and</font>

119
00:05:11,479 --> 00:05:17,820
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is where our idea starts for this</font>

120
00:05:14,340 --> 00:05:19,650
work so our core observation is that

121
00:05:17,820 --> 00:05:21,960
<font color="#E5E5E5">this type of spunk sharable forward</font>

122
00:05:19,650 --> 00:05:24,750
secret encryption relatively directly

123
00:05:21,960 --> 00:05:27,960
yields forward seekers<font color="#E5E5E5"> around to time T</font>

124
00:05:24,750 --> 00:05:31,169
exchange our technical contribution is

125
00:05:27,960 --> 00:05:33,570
then twofold so the first thing is we

126
00:05:31,169 --> 00:05:36,299
establish<font color="#E5E5E5"> functionable forward secret</font>

127
00:05:33,570 --> 00:05:39,240
key encapsulation as the core building

128
00:05:36,300 --> 00:05:40,830
block for this protocol so here

129
00:05:39,240 --> 00:05:42,660
encapsulation simply means instead of

130
00:05:40,830 --> 00:05:46,560
encrypting a message we're encrypting a

131
00:05:42,660 --> 00:05:50,520
symmetric key we then show how to build

132
00:05:46,560 --> 00:05:53,310
such pls<font color="#E5E5E5"> camps in a</font><font color="#CCCCCC"> generic way from any</font>

133
00:05:50,520 --> 00:05:55,469
hierarchical identity base camp such

134
00:05:53,310 --> 00:05:57,449
that we achieve strong CCA security

135
00:05:55,470 --> 00:06:00,199
without relying on the random Oracle

136
00:05:57,449 --> 00:06:04,139
<font color="#CCCCCC">that way improving over the previous</font>

137
00:06:00,199 --> 00:06:06,720
designs the second step will then show

138
00:06:04,139 --> 00:06:09,449
again generically how to build<font color="#E5E5E5"> from any</font>

139
00:06:06,720 --> 00:06:12,599
such<font color="#E5E5E5"> PF s kem a forward secrecy around</font>

140
00:06:09,449 --> 00:06:14,970
to time key exchange protocol it's part

141
00:06:12,599 --> 00:06:17,039
of this we formalize what key exchange

142
00:06:14,970 --> 00:06:19,410
security means for forward secrecy

143
00:06:17,039 --> 00:06:21,930
around to time and proof<font color="#E5E5E5"> that our</font>

144
00:06:19,410 --> 00:06:26,580
protocol achieves the security you<font color="#CCCCCC"> want</font>

145
00:06:21,930 --> 00:06:28,889
to see them now l don't<font color="#CCCCCC"> have time to</font><font color="#E5E5E5"> go</font>

146
00:06:26,580 --> 00:06:30,930
into any real details let me give you an

147
00:06:28,889 --> 00:06:36,539
overview<font color="#E5E5E5"> a glimpse of how our protocol</font>

148
00:06:30,930 --> 00:06:39,000
works so we have<font color="#E5E5E5"> Alice and Bob Ellis</font>

149
00:06:36,539 --> 00:06:41,940
holding the public here Bob and Bob

150
00:06:39,000 --> 00:06:43,980
corresponding secret key now in order to

151
00:06:41,940 --> 00:06:46,530
run a session what Ellis will do is will

152
00:06:43,980 --> 00:06:48,900
substitute with simply encapsulate a

153
00:06:46,530 --> 00:06:51,030
symmetric key for Bob and tense over

154
00:06:48,900 --> 00:06:52,710
this encapsulating ciphertext at this

155
00:06:51,030 --> 00:06:54,419
<font color="#E5E5E5">point you can immediately use this key</font>

156
00:06:52,710 --> 00:06:58,919
as well<font color="#E5E5E5"> to encrypt the start encrypting</font>

157
00:06:54,420 --> 00:07:00,960
data on the other side what will then do

158
00:06:58,920 --> 00:07:02,820
two things first of all it will decap

159
00:07:00,960 --> 00:07:04,500
<font color="#CCCCCC">cyl eight the key and just find able to</font>

160
00:07:02,820 --> 00:07:08,520
decrypt the data that might be arriving

161
00:07:04,500 --> 00:07:10,830
from Ellis now the second<font color="#E5E5E5"> step is will</font>

162
00:07:08,520 --> 00:07:13,799
take its secret key and puncture out

163
00:07:10,830 --> 00:07:16,140
this remove the capability to derive

164
00:07:13,800 --> 00:07:19,140
this key again and<font color="#E5E5E5"> this is what gives</font>

165
00:07:16,140 --> 00:07:20,700
you this immediate forward secrecy so

166
00:07:19,140 --> 00:07:24,150
how<font color="#E5E5E5"> is this puncturing functionality</font>

167
00:07:20,700 --> 00:07:26,490
enable in the protocol in this design so

168
00:07:24,150 --> 00:07:30,000
essentially the secret keep up holes is

169
00:07:26,490 --> 00:07:33,090
a part of a hierarchical key structure

170
00:07:30,000 --> 00:07:35,970
in the<font color="#E5E5E5"> beginning but will hold the root</font>

171
00:07:33,090 --> 00:07:40,049
node in this tree now with a<font color="#E5E5E5"> hypertext</font>

172
00:07:35,970 --> 00:07:42,419
<font color="#E5E5E5">arrived let's say 01 but we'll use this</font>

173
00:07:40,050 --> 00:07:43,919
root node to derive the secret key

174
00:07:42,419 --> 00:07:46,740
corresponding to that cipher text in

175
00:07:43,919 --> 00:07:49,140
order<font color="#E5E5E5"> to D capsulate it will then</font>

176
00:07:46,740 --> 00:07:51,390
puncture this key embedded<font color="#E5E5E5"> which means</font>

177
00:07:49,140 --> 00:07:54,210
it removes all<font color="#CCCCCC"> the nodes on the way from</font>

178
00:07:51,390 --> 00:07:55,950
<font color="#E5E5E5">the root note to this leaf node in order</font>

179
00:07:54,210 --> 00:07:59,130
to not be able anymore to decrypt to

180
00:07:55,950 --> 00:08:01,469
derive this key again instead as the new

181
00:07:59,130 --> 00:08:03,680
secret key it<font color="#CCCCCC"> will store the siblings on</font>

182
00:08:01,470 --> 00:08:06,000
the path from the root to the leaf and

183
00:08:03,680 --> 00:08:08,970
this allows him to derive still all the

184
00:08:06,000 --> 00:08:11,520
other keys in the tree now this process

185
00:08:08,970 --> 00:08:13,620
is repeated<font color="#E5E5E5"> and when I knew the next</font>

186
00:08:11,520 --> 00:08:15,060
<font color="#CCCCCC">cybertek survives it first p calculate</font>

187
00:08:13,620 --> 00:08:17,460
the corresponding<font color="#E5E5E5"> with the corresponding</font>

188
00:08:15,060 --> 00:08:20,700
secret key and then punctures out this

189
00:08:17,460 --> 00:08:23,609
capability now<font color="#CCCCCC"> the spot we'll just</font>

190
00:08:20,700 --> 00:08:27,210
proceed like this the secret key size

191
00:08:23,610 --> 00:08:28,710
will grow rather quickly namely linear

192
00:08:27,210 --> 00:08:32,329
in the number of<font color="#E5E5E5"> sessions that Bob's</font>

193
00:08:28,710 --> 00:08:34,559
running so we need to do some more<font color="#E5E5E5"> here</font>

194
00:08:32,330 --> 00:08:37,320
and we do is we<font color="#CCCCCC"> need to add another</font>

195
00:08:34,559 --> 00:08:40,799
<font color="#CCCCCC">layer on top of this tree which</font>

196
00:08:37,320 --> 00:08:42,719
separates the which devices<font color="#E5E5E5"> three into</font>

197
00:08:40,799 --> 00:08:45,240
some course time intervals the two

198
00:08:42,719 --> 00:08:48,390
parties agree on and can be for example

199
00:08:45,240 --> 00:08:50,760
<font color="#CCCCCC">date now when one time interval is over</font>

200
00:08:48,390 --> 00:08:52,710
that can simply remove the<font color="#E5E5E5"> corresponding</font>

201
00:08:50,760 --> 00:08:54,360
<font color="#CCCCCC">subtree and by this reduced</font>

202
00:08:52,710 --> 00:08:58,370
size<font color="#E5E5E5"> of the secret key back to</font><font color="#CCCCCC"> a</font>

203
00:08:54,360 --> 00:08:58,370
logarithmic amount of data to<font color="#E5E5E5"> be storage</font>

204
00:08:59,420 --> 00:09:04,740
<font color="#E5E5E5">okay so what are</font><font color="#CCCCCC"> the properties of the</font>

205
00:09:01,920 --> 00:09:06,660
scheme<font color="#CCCCCC"> net of this protocol well first</font>

206
00:09:04,740 --> 00:09:09,270
of all it is<font color="#E5E5E5"> useful forward secrecy</font>

207
00:09:06,660 --> 00:09:11,750
through this puncturing approach<font color="#CCCCCC"> it is</font>

208
00:09:09,270 --> 00:09:14,819
as soon as<font color="#E5E5E5"> the key exchanges over</font>

209
00:09:11,750 --> 00:09:16,920
leaking compromising the public the

210
00:09:14,820 --> 00:09:19,520
secret key of Bob will not affect<font color="#E5E5E5"> the</font>

211
00:09:16,920 --> 00:09:21,810
security of this session anymore

212
00:09:19,520 --> 00:09:23,130
puncturing also gives you replay

213
00:09:21,810 --> 00:09:25,349
protection at least on the key exchange

214
00:09:23,130 --> 00:09:30,650
level because you simply can't<font color="#CCCCCC"> be</font>

215
00:09:25,350 --> 00:09:32,850
capsulate the same ciphertext twice for

216
00:09:30,650 --> 00:09:35,189
performance we did a rough

217
00:09:32,850 --> 00:09:37,860
implementation based on a hype scheme

218
00:09:35,190 --> 00:09:41,100
based Bible<font color="#E5E5E5"> ezekiel's and tom was</font>

219
00:09:37,860 --> 00:09:42,810
published at crypto 2014 as it turned

220
00:09:41,100 --> 00:09:44,790
out this was not the<font color="#CCCCCC"> optimal choice I'll</font>

221
00:09:42,810 --> 00:09:46,650
come to that in a second but we<font color="#E5E5E5"> still</font>

222
00:09:44,790 --> 00:09:49,650
<font color="#E5E5E5">want to share</font><font color="#CCCCCC"> this initial evaluation</font>

223
00:09:46,650 --> 00:09:51,449
with you here so first of all on the

224
00:09:49,650 --> 00:09:53,459
<font color="#E5E5E5">client side encapsulation is very</font>

225
00:09:51,450 --> 00:09:55,470
efficient taking only a few milliseconds

226
00:09:53,460 --> 00:09:59,250
like in<font color="#E5E5E5"> order of like 10 milliseconds on</font>

227
00:09:55,470 --> 00:10:01,500
a regular<font color="#E5E5E5"> laptop on the</font><font color="#CCCCCC"> server side the</font>

228
00:09:59,250 --> 00:10:03,510
<font color="#E5E5E5">purity capsulation of the key in order</font>

229
00:10:01,500 --> 00:10:06,750
to be able to decrypt takes the same

230
00:10:03,510 --> 00:10:09,240
amount of time but<font color="#E5E5E5"> arriving in the tree</font>

231
00:10:06,750 --> 00:10:11,280
the<font color="#E5E5E5"> corresponding secret key depending</font>

232
00:10:09,240 --> 00:10:13,080
<font color="#CCCCCC">on your hollow tree looks like maybe</font>

233
00:10:11,280 --> 00:10:16,410
<font color="#E5E5E5">relatively expensive and can take up to</font>

234
00:10:13,080 --> 00:10:18,120
roughly a second and this key

235
00:10:16,410 --> 00:10:20,760
allegations key derivation step is

236
00:10:18,120 --> 00:10:22,500
particularly expensive in this dkp

237
00:10:20,760 --> 00:10:25,050
scheme so this is why it was not an

238
00:10:22,500 --> 00:10:27,180
optimal choice and which means that

239
00:10:25,050 --> 00:10:29,640
puncturing in particular can<font color="#CCCCCC"> be very</font>

240
00:10:27,180 --> 00:10:31,530
costly or is very costly<font color="#E5E5E5"> because they</font>

241
00:10:29,640 --> 00:10:33,540
are potentially many intermediate nodes

242
00:10:31,530 --> 00:10:38,220
to be<font color="#E5E5E5"> derived in order to come</font><font color="#CCCCCC"> up with</font>

243
00:10:33,540 --> 00:10:39,270
<font color="#E5E5E5">the next punctured secret key still why</font>

244
00:10:38,220 --> 00:10:42,000
this is<font color="#CCCCCC"> now another practical</font>

245
00:10:39,270 --> 00:10:45,120
instantiation there is hope for two

246
00:10:42,000 --> 00:10:47,460
reasons first there<font color="#CCCCCC"> are other schemes</font>

247
00:10:45,120 --> 00:10:49,080
which have more efficient key delegation

248
00:10:47,460 --> 00:10:50,970
so that's not a particular focus on hype

249
00:10:49,080 --> 00:10:53,040
schemes but there are<font color="#CCCCCC"> other</font><font color="#E5E5E5"> schemes for</font>

250
00:10:50,970 --> 00:10:54,840
example by gender &<font color="#CCCCCC"> silverberg where</font>

251
00:10:53,040 --> 00:10:56,900
this step is more efficient and<font color="#E5E5E5"> it's not</font>

252
00:10:54,840 --> 00:10:59,880
this needs to be looking looked at

253
00:10:56,900 --> 00:11:02,160
second the<font color="#CCCCCC"> dkp scheme provides the</font>

254
00:10:59,880 --> 00:11:04,110
strong notion of adaptive security we're

255
00:11:02,160 --> 00:11:05,850
<font color="#E5E5E5">actually our scheme only requires the</font>

256
00:11:04,110 --> 00:11:06,590
weaker weaker notion and<font color="#CCCCCC"> they</font>

257
00:11:05,850 --> 00:11:09,300
<font color="#CCCCCC">selectively secure</font>

258
00:11:06,590 --> 00:11:11,040
<font color="#CCCCCC">t-that means</font><font color="#E5E5E5"> there are there's quite</font>

259
00:11:09,300 --> 00:11:13,319
some space for improvements both on the

260
00:11:11,040 --> 00:11:15,599
implementation side as well as for

261
00:11:13,320 --> 00:11:17,940
research in better suited hype schemes

262
00:11:15,600 --> 00:11:21,900
that can be then just<font color="#CCCCCC"> plucked</font><font color="#E5E5E5"> into this</font>

263
00:11:17,940 --> 00:11:24,960
generic construction<font color="#CCCCCC"> okay so to</font>

264
00:11:21,900 --> 00:11:26,670
summarize first of all fully forward

265
00:11:24,960 --> 00:11:30,540
secret the round-trip time key exchange

266
00:11:26,670 --> 00:11:32,069
exists so we show this way providing<font color="#CCCCCC"> a</font>

267
00:11:30,540 --> 00:11:34,829
simple protocol which is provably secure

268
00:11:32,070 --> 00:11:37,710
and where the core building block

269
00:11:34,830 --> 00:11:40,650
punctual forwards secret p encapsulation

270
00:11:37,710 --> 00:11:43,860
can be built<font color="#CCCCCC"> from any hierarchical</font>

271
00:11:40,650 --> 00:11:45,540
identity-based chem screen the<font color="#E5E5E5"> big open</font>

272
00:11:43,860 --> 00:11:47,730
<font color="#E5E5E5">question is how to make this practical</font>

273
00:11:45,540 --> 00:11:50,750
both through<font color="#E5E5E5"> optimized schemes and</font>

274
00:11:47,730 --> 00:11:53,580
optimized implementations of the scenes

275
00:11:50,750 --> 00:11:57,260
right this brings me<font color="#CCCCCC"> to the end of my</font>

276
00:11:53,580 --> 00:11:57,260
<font color="#E5E5E5">talk thank you very much</font><font color="#CCCCCC"> for you</font>

277
00:12:02,430 --> 00:12:08,140
so we have a couple<font color="#E5E5E5"> of minutes</font><font color="#CCCCCC"> for</font>

278
00:12:04,300 --> 00:12:11,050
questions go right ahead hi i'm

279
00:12:08,140 --> 00:12:13,449
interested in your thoughts on<font color="#E5E5E5"> denial of</font>

280
00:12:11,050 --> 00:12:15,760
<font color="#E5E5E5">service attacks against bed scheme i was</font>

281
00:12:13,450 --> 00:12:17,260
thinking if the initial size of the

282
00:12:15,760 --> 00:12:20,050
message<font color="#CCCCCC"> Alison's Bob's Heather</font>

283
00:12:17,260 --> 00:12:23,110
<font color="#E5E5E5">particularly small Mallory could for</font>

284
00:12:20,050 --> 00:12:25,060
example just send enough of her own to

285
00:12:23,110 --> 00:12:27,160
puncture out a large<font color="#E5E5E5"> portion that tree</font>

286
00:12:25,060 --> 00:12:29,199
or if its large enough that's not

287
00:12:27,160 --> 00:12:31,900
feasible just send enough the hopefully

288
00:12:29,200 --> 00:12:34,000
overwhelmed memory on Bob side trying to

289
00:12:31,900 --> 00:12:36,459
keep track of this tree before he needs

290
00:12:34,000 --> 00:12:38,830
to expire it yeah so so definitely<font color="#CCCCCC"> a</font>

291
00:12:36,460 --> 00:12:40,840
meanness and because there's some quite

292
00:12:38,830 --> 00:12:43,030
some heavy crypto involved on the

293
00:12:40,840 --> 00:12:44,320
service side does resilience<font color="#E5E5E5"> is</font>

294
00:12:43,030 --> 00:12:48,069
something to to be looked at in

295
00:12:44,320 --> 00:12:49,720
particular you want to add potentially

296
00:12:48,070 --> 00:12:51,340
if you're if you're under under attack

297
00:12:49,720 --> 00:12:53,470
you want to add some cookie mechanisms

298
00:12:51,340 --> 00:12:55,030
to be sure that at least the clients I

299
00:12:53,470 --> 00:12:56,650
want to talk to<font color="#CCCCCC"> you a legitimate and</font>

300
00:12:55,030 --> 00:12:58,870
really do want to talk to you and this

301
00:12:56,650 --> 00:13:03,240
<font color="#E5E5E5">kind of stuff but it's beyond what what</font>

302
00:12:58,870 --> 00:13:06,100
we look into here thank you<font color="#CCCCCC"> okay hello</font>

303
00:13:03,240 --> 00:13:08,770
can you<font color="#E5E5E5"> talk about how your scheme works</font>

304
00:13:06,100 --> 00:13:11,380
with a fleet of servers that don't share

305
00:13:08,770 --> 00:13:14,230
real-time state because that's what

306
00:13:11,380 --> 00:13:18,040
session<font color="#E5E5E5"> because sold for</font><font color="#CCCCCC"> us in TLS and</font>

307
00:13:14,230 --> 00:13:20,020
if we<font color="#CCCCCC"> didn't if</font><font color="#E5E5E5"> we had shared said we'll</font>

308
00:13:18,040 --> 00:13:22,300
probably just use essentially session I

309
00:13:20,020 --> 00:13:26,710
did so can you claim talk about that

310
00:13:22,300 --> 00:13:28,120
right<font color="#E5E5E5"> sure so the industry basically so</font>

311
00:13:26,710 --> 00:13:29,920
one thing is<font color="#E5E5E5"> like you have to</font><font color="#CCCCCC"> sit on the</font>

312
00:13:28,120 --> 00:13:32,500
cross the time and then within a time

313
00:13:29,920 --> 00:13:35,170
interval the the tree is basically

314
00:13:32,500 --> 00:13:37,000
formed along the ciphertext so what you

315
00:13:35,170 --> 00:13:40,209
could do for some<font color="#E5E5E5"> kind of load balancing</font>

316
00:13:37,000 --> 00:13:42,970
is that you would say<font color="#CCCCCC"> pile like I split</font>

317
00:13:40,210 --> 00:13:45,670
the rain or leave the space of these

318
00:13:42,970 --> 00:13:47,350
ciphertexts among my service that I have

319
00:13:45,670 --> 00:13:49,959
and then each<font color="#CCCCCC"> of the server has</font><font color="#E5E5E5"> to keep</font>

320
00:13:47,350 --> 00:13:52,390
consistent<font color="#E5E5E5"> stays within this share of</font>

321
00:13:49,960 --> 00:13:54,250
the of the type of texting i was

322
00:13:52,390 --> 00:13:56,230
thinking more about am geographically

323
00:13:54,250 --> 00:13:58,530
distributed<font color="#E5E5E5"> network like clouds or</font>

324
00:13:56,230 --> 00:14:03,550
assignee caps we have like one pop in

325
00:13:58,530 --> 00:14:05,980
Europe one in the US and we can't just

326
00:14:03,550 --> 00:14:10,569
look balance between the two based on

327
00:14:05,980 --> 00:14:12,520
ciphertext<font color="#E5E5E5"> okay and we would need to</font>

328
00:14:10,570 --> 00:14:14,880
look into this closer I don't<font color="#CCCCCC"> ever think</font>

329
00:14:12,520 --> 00:14:14,880
it absolutely

330
00:14:15,480 --> 00:14:19,920
execution<font color="#CCCCCC"> the puncturing step seems to</font>

331
00:14:17,679 --> 00:14:22,269
rely on<font color="#E5E5E5"> the message actually arriving</font>

332
00:14:19,920 --> 00:14:23,769
could the adversary attack forward

333
00:14:22,269 --> 00:14:25,689
secrecy properties of the system simply

334
00:14:23,769 --> 00:14:27,160
by dropping messages sorry<font color="#E5E5E5"> can you</font>

335
00:14:25,689 --> 00:14:29,049
repeat that love could be adversary

336
00:14:27,160 --> 00:14:32,699
attack<font color="#CCCCCC"> be forward secrecy properties of</font>

337
00:14:29,049 --> 00:14:32,699
the system simply by dropping messages

338
00:14:33,869 --> 00:14:38,410
in so the<font color="#E5E5E5"> point it's like you will get</font>

339
00:14:37,029 --> 00:14:40,989
you<font color="#CCCCCC"> will do the punishing assumes a</font>

340
00:14:38,410 --> 00:14:42,759
message arrived so in particular if you

341
00:14:40,989 --> 00:14:46,449
if you can if you hold the message<font color="#E5E5E5"> in</font>

342
00:14:42,759 --> 00:14:47,949
<font color="#CCCCCC">slide and like that you you compromise</font>

343
00:14:46,449 --> 00:14:50,410
in that sense you compromise basically

344
00:14:47,949 --> 00:14:52,719
the service key before he sees the

345
00:14:50,410 --> 00:14:55,209
message and can puncture you don't get

346
00:14:52,720 --> 00:14:57,970
forward secrecy guarantees yes so you

347
00:14:55,209 --> 00:14:59,618
need<font color="#E5E5E5"> to process yeah you need to need to</font>

348
00:14:57,970 --> 00:15:02,769
see the<font color="#E5E5E5"> messaging to process the message</font>

349
00:14:59,619 --> 00:15:05,499
in order to like say ok now<font color="#CCCCCC"> I I can't do</font>

350
00:15:02,769 --> 00:15:06,189
<font color="#CCCCCC">this again yeah but</font><font color="#E5E5E5"> dropping a message</font>

351
00:15:05,499 --> 00:15:07,779
doesn't have to be something

352
00:15:06,189 --> 00:15:09,549
deliberately performed by an adversary

353
00:15:07,779 --> 00:15:12,040
the<font color="#CCCCCC"> networking will do</font><font color="#E5E5E5"> that on its own</font>

354
00:15:09,549 --> 00:15:13,660
sure sure like but<font color="#E5E5E5"> if the messages</font><font color="#CCCCCC"> drop</font>

355
00:15:12,040 --> 00:15:16,719
<font color="#CCCCCC">then like in the same</font><font color="#E5E5E5"> time you don't you</font>

356
00:15:13,660 --> 00:15:20,230
<font color="#E5E5E5">don't</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> the key then yeah you sounded</font>

357
00:15:16,720 --> 00:15:22,959
secrecy there yeah<font color="#E5E5E5"> I was</font><font color="#CCCCCC"> just going to</font>

358
00:15:20,230 --> 00:15:24,730
ask it's kind<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> really basic thing</font>

359
00:15:22,959 --> 00:15:26,618
about implementing this this protocol

360
00:15:24,730 --> 00:15:28,749
seems to require<font color="#E5E5E5"> the ability to forget</font>

361
00:15:26,619 --> 00:15:30,220
data that and if you're doing this one

362
00:15:28,749 --> 00:15:32,259
like a<font color="#E5E5E5"> mobile device with flash drive</font>

363
00:15:30,220 --> 00:15:33,790
with standard flash memory that's not so

364
00:15:32,259 --> 00:15:36,639
easy have you thought at all about what

365
00:15:33,790 --> 00:15:38,230
you<font color="#E5E5E5"> need to do to to make sure that you</font>

366
00:15:36,639 --> 00:15:40,360
can actually forget the data or is that

367
00:15:38,230 --> 00:15:42,399
just something is outside the couple

368
00:15:40,360 --> 00:15:44,230
you're working on no so for now that<font color="#CCCCCC"> I</font>

369
00:15:42,399 --> 00:15:46,299
mean we didn't look into this but thanks

370
00:15:44,230 --> 00:15:48,009
for any type of secret or forward

371
00:15:46,299 --> 00:15:50,199
secrecy where you need to forget a key

372
00:15:48,009 --> 00:15:53,199
at<font color="#CCCCCC"> some point in time</font><font color="#E5E5E5"> in order to not</font>

373
00:15:50,199 --> 00:15:55,628
reveal it anymore you're<font color="#E5E5E5"> in</font><font color="#CCCCCC"> this trouble</font>

374
00:15:53,199 --> 00:15:58,719
of how to how to securely erase data yes

375
00:15:55,629 --> 00:16:02,649
that's like--that's wont to do so

376
00:15:58,720 --> 00:16:05,350
<font color="#E5E5E5">ultimately gos 1.3 decided not to do 0r</font>

377
00:16:02,649 --> 00:16:07,119
Kiki agreements but instead do<font color="#CCCCCC"> 0r TT</font>

378
00:16:05,350 --> 00:16:09,429
resumption with a shared symmetric

379
00:16:07,119 --> 00:16:11,319
secret and you can take it<font color="#CCCCCC"> along with it</font>

380
00:16:09,429 --> 00:16:13,988
<font color="#E5E5E5">I'm wondering</font><font color="#CCCCCC"> it seemly you can adapt</font>

381
00:16:11,319 --> 00:16:16,059
this method for<font color="#E5E5E5"> forward secrecy to</font><font color="#CCCCCC"> a</font>

382
00:16:13,989 --> 00:16:18,040
final eq servers used to decrypt the

383
00:16:16,059 --> 00:16:19,779
tickets where when you encrypt<font color="#E5E5E5"> the</font>

384
00:16:18,040 --> 00:16:21,789
ticket you don't<font color="#E5E5E5"> use a single key for</font>

385
00:16:19,779 --> 00:16:23,860
all the tickets<font color="#CCCCCC"> you are</font><font color="#E5E5E5"> encrypting but</font>

386
00:16:21,789 --> 00:16:24,819
you go walk down this tree and pick

387
00:16:23,860 --> 00:16:26,949
something<font color="#CCCCCC"> from the</font><font color="#E5E5E5"> root</font>

388
00:16:24,819 --> 00:16:30,459
encrypted and then when you receive<font color="#CCCCCC"> it</font>

389
00:16:26,949 --> 00:16:32,639
again later<font color="#E5E5E5"> times them you erase the</font>

390
00:16:30,459 --> 00:16:34,988
symmetric key you used along the path

391
00:16:32,639 --> 00:16:37,539
you mean<font color="#E5E5E5"> like using this together</font>

392
00:16:34,989 --> 00:16:39,639
instead of using this the leaf node as

393
00:16:37,539 --> 00:16:43,509
your secret key like<font color="#E5E5E5"> the appreciate key</font>

394
00:16:39,639 --> 00:16:45,189
in the TLS style design so this<font color="#E5E5E5"> is a</font>

395
00:16:43,509 --> 00:16:47,559
simplification<font color="#CCCCCC"> geez on the server where</font>

396
00:16:45,189 --> 00:16:49,179
you have keys encrypting tickets and the

397
00:16:47,559 --> 00:16:51,429
concern<font color="#CCCCCC"> is that the ticket encryption</font>

398
00:16:49,179 --> 00:16:53,470
keys has to be kept for long periods of

399
00:16:51,429 --> 00:16:56,108
comics 10 urgency to work over those

400
00:16:53,470 --> 00:16:57,639
periods of time and this idea<font color="#E5E5E5"> of going</font>

401
00:16:56,109 --> 00:17:01,209
down the tree and erasing might help

402
00:16:57,639 --> 00:17:06,429
ameliorate that maybe let's let's plug

403
00:17:01,209 --> 00:17:08,408
on it apply may be any<font color="#E5E5E5"> more questions</font><font color="#CCCCCC"> ok</font>

404
00:17:06,429 --> 00:17:09,280
we're out of time anyway so Alex thanks

405
00:17:08,409 --> 00:17:16,160
Alex thank you<font color="#E5E5E5"> very much</font>

406
00:17:09,280 --> 00:17:16,160
[Applause]

