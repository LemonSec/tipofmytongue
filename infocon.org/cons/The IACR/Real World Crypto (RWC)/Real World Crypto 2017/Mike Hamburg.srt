1
00:00:01,340 --> 00:00:08,309
so this<font color="#CCCCCC"> is a protocol framework that's</font>

2
00:00:03,899 --> 00:00:09,570
designed for embedded systems and the

3
00:00:08,309 --> 00:00:11,670
idea<font color="#E5E5E5"> is that if you</font><font color="#CCCCCC"> have an embedded</font>

4
00:00:09,570 --> 00:00:13,349
<font color="#CCCCCC">system like maybe an IOT device it's got</font>

5
00:00:11,670 --> 00:00:15,420
like some little cortex processor in

6
00:00:13,349 --> 00:00:21,020
there or something and you want<font color="#E5E5E5"> to be</font>

7
00:00:15,420 --> 00:00:25,650
<font color="#E5E5E5">able to do simple sort of key exchange</font>

8
00:00:21,020 --> 00:00:28,640
secure session protocols particularly

9
00:00:25,650 --> 00:00:30,929
<font color="#E5E5E5">like handshakes can be tricky you know</font>

10
00:00:28,640 --> 00:00:32,279
you do a handshake and then you'll send

11
00:00:30,929 --> 00:00:33,660
encrypted messages back and forth with

12
00:00:32,279 --> 00:00:37,649
your symmetric key but the handshake

13
00:00:33,660 --> 00:00:40,319
itself could be tricky and you want to

14
00:00:37,649 --> 00:00:43,469
<font color="#E5E5E5">be able to also do all sorts of basic</font>

15
00:00:40,320 --> 00:00:45,989
symmetric and asymmetric crypto

16
00:00:43,469 --> 00:00:49,559
primitives with it like you know signing

17
00:00:45,989 --> 00:00:52,250
<font color="#E5E5E5">or verifying your code and the goal of</font>

18
00:00:49,559 --> 00:00:54,690
the<font color="#CCCCCC"> framework is to be relatively simple</font>

19
00:00:52,250 --> 00:00:55,980
performance<font color="#E5E5E5"> is mostly a non goal I</font>

20
00:00:54,690 --> 00:00:59,309
wanted the performance<font color="#E5E5E5"> not to be</font>

21
00:00:55,980 --> 00:01:03,390
terrible but it's not designed for the

22
00:00:59,309 --> 00:01:05,700
highest<font color="#E5E5E5"> possible performance standards</font>

23
00:01:03,390 --> 00:01:06,780
compliance is sort of a<font color="#CCCCCC"> half way goal so</font>

24
00:01:05,700 --> 00:01:09,229
this is<font color="#E5E5E5"> designed so that you can</font>

25
00:01:06,780 --> 00:01:13,560
instantiate it as an instance of<font color="#E5E5E5"> Miss</font>

26
00:01:09,229 --> 00:01:18,020
see shake algorithm or you can use a

27
00:01:13,560 --> 00:01:20,250
smaller sponge construction for

28
00:01:18,020 --> 00:01:22,920
efficiency if you don't have the memory

29
00:01:20,250 --> 00:01:25,530
for something like<font color="#CCCCCC"> C shake so those the</font>

30
00:01:22,920 --> 00:01:28,080
primary motivation for this is<font color="#CCCCCC"> that as</font>

31
00:01:25,530 --> 00:01:30,299
since I've been doing some work as an

32
00:01:28,080 --> 00:01:33,329
embedded engineer I've seen a lot<font color="#E5E5E5"> of use</font>

33
00:01:30,299 --> 00:01:36,150
<font color="#E5E5E5">of custom one-off protocols both</font>

34
00:01:33,329 --> 00:01:39,449
designed by cryptography research and

35
00:01:36,150 --> 00:01:40,979
designed by<font color="#E5E5E5"> our clients so well of</font>

36
00:01:39,450 --> 00:01:45,250
course you would say why aren't you

37
00:01:40,979 --> 00:01:47,420
using TLS<font color="#E5E5E5"> oftentimes</font><font color="#CCCCCC"> like in the in the</font>

38
00:01:45,250 --> 00:01:50,880
[Music]

39
00:01:47,420 --> 00:01:52,860
<font color="#CCCCCC">NTP talk for example you see that like</font>

40
00:01:50,880 --> 00:01:56,729
sometimes pls or<font color="#CCCCCC"> DTLS or whether</font>

41
00:01:52,860 --> 00:01:57,990
whatever doesn't work for your scenario

42
00:01:56,729 --> 00:01:59,460
for some reason or<font color="#E5E5E5"> another you know you</font>

43
00:01:57,990 --> 00:02:01,880
want the messages to flow a certain way

44
00:01:59,460 --> 00:02:05,939
you want some party not to retain<font color="#CCCCCC"> state</font>

45
00:02:01,880 --> 00:02:10,318
maybe you want to mix pre quantum and

46
00:02:05,939 --> 00:02:12,049
post quantum algorithms or or simply pls

47
00:02:10,318 --> 00:02:15,049
doesn't fit you don't<font color="#E5E5E5"> have the code</font>

48
00:02:12,050 --> 00:02:16,910
sighs to support it and so the result is

49
00:02:15,050 --> 00:02:19,850
<font color="#CCCCCC">that everybody has their own</font><font color="#E5E5E5"> favorite</font>

50
00:02:16,910 --> 00:02:21,350
custom protocol and it's<font color="#CCCCCC"> kind of a pain</font>

51
00:02:19,850 --> 00:02:25,420
<font color="#CCCCCC">to design and analyze these protocols</font>

52
00:02:21,350 --> 00:02:28,460
it's a pain<font color="#E5E5E5"> to design them</font>

53
00:02:25,420 --> 00:02:31,429
mathematically for academic reasons it's

54
00:02:28,460 --> 00:02:33,260
also a pain to get the to not make

55
00:02:31,430 --> 00:02:34,430
<font color="#CCCCCC">mistakes in the design</font><font color="#E5E5E5"> and sometimes in</font>

56
00:02:33,260 --> 00:02:38,390
the end it's hard to know what

57
00:02:34,430 --> 00:02:39,980
properties your protocol has so for

58
00:02:38,390 --> 00:02:41,179
<font color="#E5E5E5">example you'll have two stages of</font>

59
00:02:39,980 --> 00:02:42,920
authentication<font color="#E5E5E5"> but maybe they're not</font>

60
00:02:41,180 --> 00:02:44,330
<font color="#E5E5E5">quite perfectly bound together and then</font>

61
00:02:42,920 --> 00:02:46,070
you wonder<font color="#E5E5E5"> well what happens if an</font>

62
00:02:44,330 --> 00:02:47,860
adversary substitutes<font color="#E5E5E5"> the message here</font>

63
00:02:46,070 --> 00:02:51,410
and maybe that's<font color="#E5E5E5"> not really an attack</font>

64
00:02:47,860 --> 00:02:53,840
maybe it is and the result of this<font color="#E5E5E5"> is</font>

65
00:02:51,410 --> 00:02:58,579
<font color="#CCCCCC">that you often end up with protocols</font>

66
00:02:53,840 --> 00:03:00,620
that are insecure from people who design

67
00:02:58,580 --> 00:03:03,260
their own now of<font color="#E5E5E5"> course you could go to</font>

68
00:03:00,620 --> 00:03:05,080
an academic protocol but there's some

69
00:03:03,260 --> 00:03:09,200
issues with academic protocols as well

70
00:03:05,080 --> 00:03:11,060
and this issue is<font color="#CCCCCC"> that you'll have some</font>

71
00:03:09,200 --> 00:03:12,769
idea of what you<font color="#CCCCCC"> want to do kind of</font>

72
00:03:11,060 --> 00:03:14,450
morally when you design an academic

73
00:03:12,770 --> 00:03:17,420
protocol and then you'll put it into

74
00:03:14,450 --> 00:03:20,390
mathematics in some terms that might or

75
00:03:17,420 --> 00:03:21,738
might not directly show what you want to

76
00:03:20,390 --> 00:03:24,350
do morally and then somebody has to

77
00:03:21,739 --> 00:03:27,200
implement it which will possibly require

78
00:03:24,350 --> 00:03:29,060
interpreting your mathematics so an

79
00:03:27,200 --> 00:03:31,459
example of<font color="#E5E5E5"> this is the same as mqv</font>

80
00:03:29,060 --> 00:03:34,580
protocol so if you<font color="#E5E5E5"> look at fhm QVC this</font>

81
00:03:31,459 --> 00:03:38,840
is a fully hash<font color="#E5E5E5"> minuscule and stone with</font>

82
00:03:34,580 --> 00:03:41,120
key confirmation so both parties they

83
00:03:38,840 --> 00:03:43,370
have a<font color="#E5E5E5"> long</font><font color="#CCCCCC"> term and</font><font color="#E5E5E5"> an ephemeral public</font>

84
00:03:41,120 --> 00:03:46,430
key and they want<font color="#E5E5E5"> to kind of hash these</font>

85
00:03:43,370 --> 00:03:49,520
<font color="#E5E5E5">to get two exponents that they'll use to</font>

86
00:03:46,430 --> 00:03:52,250
combine<font color="#CCCCCC"> the public keys together and</font>

87
00:03:49,520 --> 00:03:54,590
then<font color="#CCCCCC"> they want to extract a session key</font>

88
00:03:52,250 --> 00:03:57,739
and also some kind of key authenticators

89
00:03:54,590 --> 00:04:01,010
from this as you can see this is done

90
00:03:57,739 --> 00:04:02,950
using a hash and a hash of that is like

91
00:04:01,010 --> 00:04:06,649
the<font color="#E5E5E5"> same messages in a different order</font>

92
00:04:02,950 --> 00:04:09,589
and two<font color="#CCCCCC"> different kdf that have the same</font>

93
00:04:06,650 --> 00:04:11,090
properties and then some max functions

94
00:04:09,590 --> 00:04:12,350
and all of these except<font color="#E5E5E5"> maybe the max</font>

95
00:04:11,090 --> 00:04:16,850
functions are assumed to be random

96
00:04:12,350 --> 00:04:18,738
Oracle's and then when you go to

97
00:04:16,850 --> 00:04:20,229
implement<font color="#CCCCCC"> this you'll discover what wait</font>

98
00:04:18,738 --> 00:04:22,549
a minute I'm now

99
00:04:20,228 --> 00:04:24,260
hashing tuples of objects how do<font color="#CCCCCC"> I do</font>

100
00:04:22,550 --> 00:04:26,060
that<font color="#E5E5E5"> what</font><font color="#CCCCCC"> if the objects are not of a</font>

101
00:04:24,260 --> 00:04:27,560
fixed size I can't just concatenate them

102
00:04:26,060 --> 00:04:32,000
and then you have you know how do<font color="#E5E5E5"> I</font>

103
00:04:27,560 --> 00:04:33,650
separate<font color="#CCCCCC"> k</font><font color="#E5E5E5"> DF 1 and k DF 2 and so even</font>

104
00:04:32,000 --> 00:04:36,740
<font color="#CCCCCC">though this is a provably secure</font>

105
00:04:33,650 --> 00:04:38,239
protocol there are a lot of tricks both

106
00:04:36,740 --> 00:04:40,520
and how you design such a thing<font color="#E5E5E5"> and how</font>

107
00:04:38,240 --> 00:04:45,080
you implement it another motivation is

108
00:04:40,520 --> 00:04:47,960
TLS 1.2 and various similar protocols

109
00:04:45,080 --> 00:04:50,300
which if you<font color="#E5E5E5"> look at how they</font><font color="#CCCCCC"> actually</font>

110
00:04:47,960 --> 00:04:51,440
use their hash functions you get

111
00:04:50,300 --> 00:04:55,160
something<font color="#CCCCCC"> that looks a</font><font color="#E5E5E5"> little bit like a</font>

112
00:04:51,440 --> 00:04:57,680
rat's nest this is just the hash block

113
00:04:55,160 --> 00:05:04,400
calls in one<font color="#CCCCCC"> of the subroutines in</font><font color="#E5E5E5"> TLS</font>

114
00:04:57,680 --> 00:05:07,310
1.2 so the modern solution to this and

115
00:05:04,400 --> 00:05:09,440
by modern<font color="#E5E5E5"> I mean well maybe</font><font color="#CCCCCC"> twenty years</font>

116
00:05:07,310 --> 00:05:11,289
old but it's taken a long time to

117
00:05:09,440 --> 00:05:13,400
percolate through to actual<font color="#CCCCCC"> real-world</font>

118
00:05:11,289 --> 00:05:16,099
<font color="#E5E5E5">cryptography is that you</font><font color="#CCCCCC"> should just</font>

119
00:05:13,400 --> 00:05:17,719
hash all the everything<font color="#E5E5E5"> you know if you</font>

120
00:05:16,100 --> 00:05:19,100
know some data about the other party and

121
00:05:17,720 --> 00:05:21,020
they know it too you should hash it and

122
00:05:19,100 --> 00:05:22,340
if you send<font color="#E5E5E5"> them a method you should</font>

123
00:05:21,020 --> 00:05:23,780
hash it and you should also hash who

124
00:05:22,340 --> 00:05:26,539
sent the message and<font color="#E5E5E5"> the boundaries of</font>

125
00:05:23,780 --> 00:05:27,888
the message and<font color="#CCCCCC"> so on when you get a</font>

126
00:05:26,539 --> 00:05:30,560
<font color="#E5E5E5">public key you should hash it and you</font>

127
00:05:27,889 --> 00:05:33,050
should you should always you know there

128
00:05:30,560 --> 00:05:34,610
<font color="#CCCCCC">are some technical concerns about well</font>

129
00:05:33,050 --> 00:05:36,139
maybe you should<font color="#E5E5E5"> have to running hash</font>

130
00:05:34,610 --> 00:05:37,310
context<font color="#CCCCCC"> 14 keys and one for</font>

131
00:05:36,139 --> 00:05:38,419
authentication or something but

132
00:05:37,310 --> 00:05:41,539
basically you should<font color="#E5E5E5"> just</font><font color="#CCCCCC"> put everything</font>

133
00:05:38,419 --> 00:05:44,299
<font color="#E5E5E5">into a hash function and so more modern</font>

134
00:05:41,539 --> 00:05:47,990
like pls 1.3 does this<font color="#E5E5E5"> Trevor</font><font color="#CCCCCC"> Perrins</font>

135
00:05:44,300 --> 00:05:51,310
noise protocol does this and also<font color="#E5E5E5"> the</font>

136
00:05:47,990 --> 00:05:54,020
blinker protocol which is a part of the

137
00:05:51,310 --> 00:05:59,090
inspiration for a strobe as you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> tell</font>

138
00:05:54,020 --> 00:06:01,729
by<font color="#E5E5E5"> the name so consistent with this we</font>

139
00:05:59,090 --> 00:06:04,580
the protocol design for strobe is that

140
00:06:01,729 --> 00:06:06,620
all the messages in<font color="#E5E5E5"> the system pass</font>

141
00:06:04,580 --> 00:06:08,359
through strobe so<font color="#CCCCCC"> there so the</font>

142
00:06:06,620 --> 00:06:10,910
application will have some sort of

143
00:06:08,360 --> 00:06:13,460
strobe library that has an object that

144
00:06:10,910 --> 00:06:15,760
<font color="#E5E5E5">handles that acts as a bridge between</font>

145
00:06:13,460 --> 00:06:18,710
the application<font color="#E5E5E5"> and the network and</font>

146
00:06:15,760 --> 00:06:20,000
every time the application sends a

147
00:06:18,710 --> 00:06:22,159
message to the network it will be hashed

148
00:06:20,000 --> 00:06:24,199
every time receives a message<font color="#E5E5E5"> it'll be</font>

149
00:06:22,160 --> 00:06:26,990
hashed<font color="#E5E5E5"> and it can also send in you know</font>

150
00:06:24,199 --> 00:06:28,520
associated data or whatever and then the

151
00:06:26,990 --> 00:06:31,479
<font color="#E5E5E5">the strobe object also handles</font>

152
00:06:28,520 --> 00:06:33,710
encryption and decryption and macking

153
00:06:31,479 --> 00:06:36,179
and then the transport

154
00:06:33,710 --> 00:06:37,498
it's probably<font color="#E5E5E5"> the network but it could</font>

155
00:06:36,179 --> 00:06:38,849
also be something like<font color="#E5E5E5"> well I want to</font>

156
00:06:37,499 --> 00:06:40,979
encrypt a message<font color="#E5E5E5"> and send it to a file</font>

157
00:06:38,849 --> 00:06:42,990
and<font color="#E5E5E5"> then later I will retrieve it from</font>

158
00:06:40,979 --> 00:06:44,279
that file and decrypt it in which<font color="#CCCCCC"> case</font>

159
00:06:42,990 --> 00:06:48,959
the transport would sort of be your

160
00:06:44,279 --> 00:06:51,509
untrusted file system and a two-party

161
00:06:48,959 --> 00:06:53,039
protocol the way that this will work<font color="#E5E5E5"> is</font>

162
00:06:51,509 --> 00:06:58,860
that<font color="#CCCCCC"> Alice and Bob will have some kind</font>

163
00:06:53,039 --> 00:07:01,020
of strobe object with a state on either

164
00:06:58,860 --> 00:07:04,679
side and when when Alice sends a message

165
00:07:01,020 --> 00:07:06,869
to Bob it will advance<font color="#CCCCCC"> the state of her</font>

166
00:07:04,679 --> 00:07:09,119
object in the state of his object in the

167
00:07:06,869 --> 00:07:11,249
same way so they'll always match at<font color="#E5E5E5"> all</font>

168
00:07:09,119 --> 00:07:13,349
times and then if somebody tampers with

169
00:07:11,249 --> 00:07:14,939
a<font color="#E5E5E5"> message on the network or it gets</font>

170
00:07:13,349 --> 00:07:19,199
corrupted or something then they will

171
00:07:14,939 --> 00:07:21,869
notice and in strobe you just drop the

172
00:07:19,199 --> 00:07:23,399
connection so this is not you can still

173
00:07:21,869 --> 00:07:24,749
<font color="#CCCCCC">use it as a primitive like as a hash</font>

174
00:07:23,399 --> 00:07:26,550
function<font color="#CCCCCC"> and</font><font color="#E5E5E5"> cipher and so on to</font>

175
00:07:24,749 --> 00:07:30,089
implement something like<font color="#CCCCCC"> dtls but the</font>

176
00:07:26,550 --> 00:07:33,089
main usages in something like a

177
00:07:30,089 --> 00:07:34,469
handshake where if messages are getting

178
00:07:33,089 --> 00:07:35,759
corrupted and stuff you don't try<font color="#E5E5E5"> to</font>

179
00:07:34,469 --> 00:07:40,069
reconstruct the state you just<font color="#CCCCCC"> drop the</font>

180
00:07:35,759 --> 00:07:44,449
connection so how was this work as a

181
00:07:40,069 --> 00:07:47,969
more or less concrete example in fhm QVC

182
00:07:44,449 --> 00:07:49,319
so the way it works is that this looks

183
00:07:47,969 --> 00:07:55,399
complicated but bear with me for a

184
00:07:49,319 --> 00:07:55,399
moment so so both sides<font color="#E5E5E5"> will initialize</font>

185
00:07:55,669 --> 00:08:04,919
yeah well both sides will initialize

186
00:07:58,949 --> 00:08:07,169
there yeah they're strobe object and

187
00:08:04,919 --> 00:08:09,930
then they know each other's<font color="#E5E5E5"> long-term</font>

188
00:08:07,169 --> 00:08:11,279
keys so they'll detach those separately

189
00:08:09,930 --> 00:08:12,869
using two calls and rather than

190
00:08:11,279 --> 00:08:16,139
concatenated them because this way it's

191
00:08:12,869 --> 00:08:18,059
possible and then you know maybe Alice

192
00:08:16,139 --> 00:08:21,269
will send her ephemeral to Bob and<font color="#E5E5E5"> Bob</font>

193
00:08:18,059 --> 00:08:24,829
Wilson his<font color="#E5E5E5"> Alice and the framework</font>

194
00:08:21,269 --> 00:08:28,199
hashes that just took place and then

195
00:08:24,829 --> 00:08:31,259
when<font color="#CCCCCC"> they need</font><font color="#E5E5E5"> to get these exponents</font>

196
00:08:28,199 --> 00:08:33,688
out they call a sort of pseudo random

197
00:08:31,259 --> 00:08:36,149
function call from the library and it

198
00:08:33,688 --> 00:08:38,968
will<font color="#E5E5E5"> give them this this d and basically</font>

199
00:08:36,149 --> 00:08:42,539
d is then the hash of a and B and<font color="#E5E5E5"> G to</font>

200
00:08:38,969 --> 00:08:45,300
<font color="#E5E5E5">the X and G to the y and then separately</font>

201
00:08:42,539 --> 00:08:45,939
e which is<font color="#E5E5E5"> the hash of that buffy and</font>

202
00:08:45,300 --> 00:08:47,680
then

203
00:08:45,940 --> 00:08:50,320
they'll set the key and<font color="#E5E5E5"> then they'll</font>

204
00:08:47,680 --> 00:08:53,469
send the mac and the max will basically

205
00:08:50,320 --> 00:08:54,940
be this now<font color="#E5E5E5"> I still have commas in there</font>

206
00:08:53,470 --> 00:08:56,950
so<font color="#E5E5E5"> I'm still</font><font color="#CCCCCC"> talking about hashing at</font>

207
00:08:54,940 --> 00:08:58,990
uppal so I'm still lying to you but the

208
00:08:56,950 --> 00:09:03,010
the rest of the talk will will say how

209
00:08:58,990 --> 00:09:08,500
this<font color="#E5E5E5"> is done and so on and you'll see</font>

210
00:09:03,010 --> 00:09:11,020
that<font color="#E5E5E5"> like all of these what was trying</font>

211
00:09:08,500 --> 00:09:13,410
to what the fhm QVC protocol is sort of

212
00:09:11,020 --> 00:09:15,880
trying<font color="#E5E5E5"> to do morally which is that you</font>

213
00:09:13,410 --> 00:09:17,230
hash in what you know about the other

214
00:09:15,880 --> 00:09:19,660
party and all the messages<font color="#CCCCCC"> that were</font>

215
00:09:17,230 --> 00:09:21,640
exchanged now gets accomplished by this

216
00:09:19,660 --> 00:09:23,230
framework both in terms of the

217
00:09:21,640 --> 00:09:24,760
mathematics of it and in terms of how

218
00:09:23,230 --> 00:09:29,980
you implement it with bites and an

219
00:09:24,760 --> 00:09:31,390
actual<font color="#E5E5E5"> hash function so I showed a bunch</font>

220
00:09:29,980 --> 00:09:34,060
of operations on this slide so what

221
00:09:31,390 --> 00:09:36,819
operations are there in the framework so

222
00:09:34,060 --> 00:09:40,000
first of all<font color="#E5E5E5"> you can set a key or you</font>

223
00:09:36,820 --> 00:09:42,550
can you can also put in some data that's

224
00:09:40,000 --> 00:09:44,830
to be authenticated that you know<font color="#CCCCCC"> about</font>

225
00:09:42,550 --> 00:09:46,359
the other party<font color="#E5E5E5"> could be a nonce or it</font>

226
00:09:44,830 --> 00:09:50,260
could be there<font color="#CCCCCC"> or</font><font color="#E5E5E5"> their key or whatever</font>

227
00:09:46,360 --> 00:09:52,420
and<font color="#E5E5E5"> that will be hashed you can extract</font>

228
00:09:50,260 --> 00:09:53,980
data from this<font color="#E5E5E5"> that is pseudo-random</font>

229
00:09:52,420 --> 00:09:56,680
it's basically like a hash of all the

230
00:09:53,980 --> 00:09:58,360
<font color="#E5E5E5">things you put in you can send a</font><font color="#CCCCCC"> message</font>

231
00:09:56,680 --> 00:10:01,989
to<font color="#E5E5E5"> the other side or receive one</font><font color="#CCCCCC"> in the</font>

232
00:09:58,360 --> 00:10:04,090
clear or encrypted and if<font color="#E5E5E5"> it's encrypted</font>

233
00:10:01,990 --> 00:10:06,970
it'll be encrypted with a key to derive

234
00:10:04,090 --> 00:10:10,000
<font color="#CCCCCC">from everything that has been sent or</font>

235
00:10:06,970 --> 00:10:13,840
exchange dorky or whatever before you

236
00:10:10,000 --> 00:10:15,040
<font color="#CCCCCC">can send a mac which is very similar</font><font color="#E5E5E5"> to</font>

237
00:10:13,840 --> 00:10:18,310
sort of sending an encrypted message

238
00:10:15,040 --> 00:10:19,750
that's<font color="#CCCCCC"> zero that's known by both parties</font>

239
00:10:18,310 --> 00:10:21,339
to<font color="#CCCCCC"> be 0 but it looks a little bit</font>

240
00:10:19,750 --> 00:10:23,350
different in the transcript it's just a

241
00:10:21,340 --> 00:10:25,060
<font color="#E5E5E5">Mac function the application doesn't</font>

242
00:10:23,350 --> 00:10:29,740
have to supply a buffer full of<font color="#E5E5E5"> zeros or</font>

243
00:10:25,060 --> 00:10:31,989
anything and finally there's an

244
00:10:29,740 --> 00:10:34,690
operation to rekey the protocol in a way

245
00:10:31,990 --> 00:10:37,060
that is not<font color="#E5E5E5"> invertible which means that</font>

246
00:10:34,690 --> 00:10:41,380
<font color="#E5E5E5">if somebody should later compromise the</font>

247
00:10:37,060 --> 00:10:43,209
session state then it will they will<font color="#E5E5E5"> not</font>

248
00:10:41,380 --> 00:10:45,400
be<font color="#E5E5E5"> able to decrypt previous messages</font>

249
00:10:43,210 --> 00:10:46,600
that you have said unless of course they

250
00:10:45,400 --> 00:10:50,709
could brute force all<font color="#CCCCCC"> the keys that you</font>

251
00:10:46,600 --> 00:10:53,560
put in so<font color="#CCCCCC"> then the main insight or</font>

252
00:10:50,710 --> 00:10:56,650
development or innovation of strobe is

253
00:10:53,560 --> 00:10:58,119
that the way that these operations are

254
00:10:56,650 --> 00:10:59,900
described and also the way that<font color="#E5E5E5"> they're</font>

255
00:10:58,120 --> 00:11:02,660
performed can be determined from<font color="#E5E5E5"> Bay</font>

256
00:10:59,900 --> 00:11:04,579
<font color="#E5E5E5">ticularly just</font><font color="#CCCCCC"> four features so one of</font>

257
00:11:02,660 --> 00:11:08,959
them is the direction of<font color="#E5E5E5"> data flow so</font>

258
00:11:04,580 --> 00:11:10,970
which way to the arrows go and does any

259
00:11:08,960 --> 00:11:15,920
data go to or from the<font color="#E5E5E5"> sort of</font>

260
00:11:10,970 --> 00:11:20,120
<font color="#CCCCCC">application side of this setup does data</font>

261
00:11:15,920 --> 00:11:22,699
go tour from the<font color="#CCCCCC"> cypher like is the key</font>

262
00:11:20,120 --> 00:11:28,030
change or is it used to encrypt anything

263
00:11:22,700 --> 00:11:30,230
and this<font color="#E5E5E5"> data go</font><font color="#CCCCCC"> tour</font><font color="#E5E5E5"> from the transport</font>

264
00:11:28,030 --> 00:11:36,410
so that's sort of four features it's

265
00:11:30,230 --> 00:11:38,090
like four bits kind of and well<font color="#CCCCCC"> I'll</font>

266
00:11:36,410 --> 00:11:41,600
show you how this can be<font color="#E5E5E5"> used to</font>

267
00:11:38,090 --> 00:11:43,970
implement the operations according<font color="#CCCCCC"> to a</font>

268
00:11:41,600 --> 00:11:46,270
relatively simple pattern and so that

269
00:11:43,970 --> 00:11:50,750
pattern<font color="#E5E5E5"> is a is a sponge construction so</font>

270
00:11:46,270 --> 00:11:53,750
this<font color="#E5E5E5"> is based on the work by the</font>

271
00:11:50,750 --> 00:11:55,100
kettrick team mostly and other people

272
00:11:53,750 --> 00:11:57,410
who have worked<font color="#E5E5E5"> on these these sponge</font>

273
00:11:55,100 --> 00:11:58,970
constructions and in particular the

274
00:11:57,410 --> 00:12:01,640
duplexing sponge construction so

275
00:11:58,970 --> 00:12:04,400
<font color="#E5E5E5">basically the the state of the object in</font>

276
00:12:01,640 --> 00:12:07,760
a sponge construction is divided into

277
00:12:04,400 --> 00:12:09,290
two<font color="#CCCCCC"> parts one of them which all call the</font>

278
00:12:07,760 --> 00:12:12,830
rate although<font color="#E5E5E5"> it's actually rates to the</font>

279
00:12:09,290 --> 00:12:14,839
size of the the part is what interacts

280
00:12:12,830 --> 00:12:16,580
with the outside world so if you hatch

281
00:12:14,840 --> 00:12:18,710
something you'll<font color="#CCCCCC"> XOR it into that part</font>

282
00:12:16,580 --> 00:12:20,570
of the state<font color="#E5E5E5"> and if you want to encrypt</font>

283
00:12:18,710 --> 00:12:21,980
something you'll XOR with that part<font color="#E5E5E5"> of</font>

284
00:12:20,570 --> 00:12:26,060
the state<font color="#E5E5E5"> and then the</font><font color="#CCCCCC"> ciphertext will</font>

285
00:12:21,980 --> 00:12:27,350
<font color="#CCCCCC">be returned and so on and the other</font><font color="#E5E5E5"> part</font>

286
00:12:26,060 --> 00:12:29,359
is called the capacity which basically

287
00:12:27,350 --> 00:12:33,200
acts as some combination of a stream

288
00:12:29,360 --> 00:12:36,770
cipher key and a hash function chaining

289
00:12:33,200 --> 00:12:39,710
value that part is does<font color="#CCCCCC"> not interact</font>

290
00:12:36,770 --> 00:12:41,840
with the outside world and then every

291
00:12:39,710 --> 00:12:44,630
time<font color="#E5E5E5"> you do an operation or you run out</font>

292
00:12:41,840 --> 00:12:46,540
of you know you overrun the size of the

293
00:12:44,630 --> 00:12:49,970
the rate variable you overrun the rate

294
00:12:46,540 --> 00:12:51,709
you run some function f which in the

295
00:12:49,970 --> 00:12:53,810
security modeling of these things is

296
00:12:51,710 --> 00:12:56,390
assumed to be a random function or

297
00:12:53,810 --> 00:12:59,719
possibly a random permutation which

298
00:12:56,390 --> 00:13:02,449
completely changes the the rate and

299
00:12:59,720 --> 00:13:04,460
capacity variables so the update

300
00:13:02,450 --> 00:13:07,430
function is shown here that<font color="#E5E5E5"> the next</font>

301
00:13:04,460 --> 00:13:10,910
rate and capacity variables will be<font color="#CCCCCC"> F of</font>

302
00:13:07,430 --> 00:13:14,410
<font color="#E5E5E5">the previous ones X or the message on</font>

303
00:13:10,910 --> 00:13:16,819
the right side so

304
00:13:14,410 --> 00:13:22,790
you can see that<font color="#E5E5E5"> when</font><font color="#CCCCCC"> that basically</font>

305
00:13:16,819 --> 00:13:24,800
you're going to well if the if the

306
00:13:22,790 --> 00:13:25,579
application is providing the<font color="#E5E5E5"> message</font>

307
00:13:24,800 --> 00:13:27,019
you're going to take<font color="#E5E5E5"> it from the</font>

308
00:13:25,579 --> 00:13:30,739
application and otherwise you're going

309
00:13:27,019 --> 00:13:32,300
to<font color="#E5E5E5"> X or in sort of zeros you'll</font><font color="#CCCCCC"> xor it</font>

310
00:13:30,740 --> 00:13:37,459
into the state here and then you'll

311
00:13:32,300 --> 00:13:40,550
output either the input<font color="#CCCCCC"> XOR</font><font color="#E5E5E5"> the state or</font>

312
00:13:37,459 --> 00:13:43,189
just the input if it's<font color="#E5E5E5"> if you're sending</font>

313
00:13:40,550 --> 00:13:45,199
in the clear<font color="#E5E5E5"> and then you'll update</font>

314
00:13:43,189 --> 00:13:51,290
you'll replace the rate variable with

315
00:13:45,199 --> 00:13:54,889
either ours or em or just em in the case

316
00:13:51,290 --> 00:13:56,089
of decrypt and so on so<font color="#E5E5E5"> there's a you</font>

317
00:13:54,889 --> 00:14:00,379
know there's a simple<font color="#E5E5E5"> function for how</font>

318
00:13:56,089 --> 00:14:03,889
for whether it's<font color="#E5E5E5"> you know and RX or a</font>

319
00:14:00,379 --> 00:14:07,819
more<font color="#E5E5E5"> m and so on this is this details in</font>

320
00:14:03,889 --> 00:14:09,620
the paper so now<font color="#CCCCCC"> i said we're going to</font>

321
00:14:07,819 --> 00:14:11,839
sort of hash all the things so the goal

322
00:14:09,620 --> 00:14:14,449
is basically<font color="#CCCCCC"> that the output of strobe</font>

323
00:14:11,839 --> 00:14:15,620
should look<font color="#CCCCCC"> like a random Oracle and</font>

324
00:14:14,449 --> 00:14:17,839
<font color="#E5E5E5">this is sort of suitable to what you</font>

325
00:14:15,620 --> 00:14:19,189
<font color="#E5E5E5">want to do anyway because the idea is to</font>

326
00:14:17,839 --> 00:14:21,740
<font color="#CCCCCC">make the analysis of these protocols</font>

327
00:14:19,189 --> 00:14:23,180
simple for like a custom one-off

328
00:14:21,740 --> 00:14:24,680
protocol so you're<font color="#E5E5E5"> probably going to</font>

329
00:14:23,180 --> 00:14:30,638
analyze it in the random Oracle model

330
00:14:24,680 --> 00:14:32,779
anyway and but it's a random<font color="#E5E5E5"> Oracle</font>

331
00:14:30,639 --> 00:14:35,120
function of a<font color="#CCCCCC"> specific thing which is</font>

332
00:14:32,779 --> 00:14:37,870
<font color="#E5E5E5">supposed to be sort of the transcript of</font>

333
00:14:35,120 --> 00:14:40,579
all the previous operations that you did

334
00:14:37,870 --> 00:14:43,910
so you can't<font color="#CCCCCC"> just concatenate them</font>

335
00:14:40,579 --> 00:14:45,258
together and<font color="#CCCCCC"> also the previous things</font>

336
00:14:43,910 --> 00:14:47,899
you did is<font color="#E5E5E5"> not just the data but also</font>

337
00:14:45,259 --> 00:14:49,759
what operation was performed and<font color="#E5E5E5"> in fact</font>

338
00:14:47,899 --> 00:14:53,120
what operation am I going to perform

339
00:14:49,759 --> 00:14:56,149
<font color="#CCCCCC">with the output should also be part of</font>

340
00:14:53,120 --> 00:14:58,040
this function so that when I extract a

341
00:14:56,149 --> 00:15:00,470
value to be used as a hash it's not

342
00:14:58,040 --> 00:15:03,290
treated<font color="#E5E5E5"> the same way as if I extract the</font>

343
00:15:00,470 --> 00:15:07,970
value<font color="#E5E5E5"> to XR with a message to send it or</font>

344
00:15:03,290 --> 00:15:13,009
I extract a value to be used as a<font color="#CCCCCC"> Mac so</font>

345
00:15:07,970 --> 00:15:14,660
the duplex paper says that gives me the

346
00:15:13,009 --> 00:15:19,399
random Oracle part but what I<font color="#E5E5E5"> need is</font>

347
00:15:14,660 --> 00:15:20,779
still<font color="#E5E5E5"> this possibility and I want to</font><font color="#CCCCCC"> be</font>

348
00:15:19,399 --> 00:15:22,429
<font color="#CCCCCC">able two parts like I said the entire</font>

349
00:15:20,779 --> 00:15:23,990
previous transcript and what the output

350
00:15:22,429 --> 00:15:26,000
is going<font color="#E5E5E5"> to be used for</font>

351
00:15:23,990 --> 00:15:30,230
so to do that let's consider first an

352
00:15:26,000 --> 00:15:32,060
operation that doesn't use the<font color="#E5E5E5"> cipher</font>

353
00:15:30,230 --> 00:15:34,160
output doesn't encrypt the message so

354
00:15:32,060 --> 00:15:36,529
say I'm sending a message in the clear

355
00:15:34,160 --> 00:15:38,839
so to do that<font color="#E5E5E5"> remember that the</font>

356
00:15:36,529 --> 00:15:40,939
operation is determined by<font color="#CCCCCC"> four four</font>

357
00:15:38,839 --> 00:15:43,010
binary flags so I'm<font color="#CCCCCC"> going to put</font><font color="#E5E5E5"> those</font>

358
00:15:40,940 --> 00:15:45,320
into a bite and then there are four bits

359
00:15:43,010 --> 00:15:47,420
left over that are used possibly for

360
00:15:45,320 --> 00:15:48,649
future things a couple<font color="#E5E5E5"> of them are</font>

361
00:15:47,420 --> 00:15:52,579
described in the paper how they'll be

362
00:15:48,649 --> 00:15:55,399
used and then I'll put it<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> message</font>

363
00:15:52,580 --> 00:15:59,380
that's going<font color="#E5E5E5"> to be hashed and then</font>

364
00:15:55,399 --> 00:16:04,520
finally one more bite that points to the

365
00:15:59,380 --> 00:16:06,740
where this operation began and that way

366
00:16:04,520 --> 00:16:09,920
<font color="#E5E5E5">when I go to the next operation right</font>

367
00:16:06,740 --> 00:16:12,020
I'll be able<font color="#E5E5E5"> to sort of make a chain of</font>

368
00:16:09,920 --> 00:16:15,649
these pointing backwards and parse out

369
00:16:12,020 --> 00:16:17,300
where<font color="#CCCCCC"> all the operations began so</font>

370
00:16:15,649 --> 00:16:18,860
suppose that<font color="#CCCCCC"> the suppose now that you</font>

371
00:16:17,300 --> 00:16:22,040
have an<font color="#E5E5E5"> operation that does use the</font>

372
00:16:18,860 --> 00:16:24,290
cipher state so that the the output of

373
00:16:22,040 --> 00:16:27,069
this sponge is now going to have to

374
00:16:24,290 --> 00:16:29,000
depend<font color="#E5E5E5"> on all the previous operations</font>

375
00:16:27,070 --> 00:16:31,070
which means that I'm<font color="#E5E5E5"> going to have to</font>

376
00:16:29,000 --> 00:16:32,209
run this F function so that I can stir

377
00:16:31,070 --> 00:16:34,190
in<font color="#CCCCCC"> the state of all the previous</font>

378
00:16:32,209 --> 00:16:37,640
operations into the output of<font color="#E5E5E5"> the next</font>

379
00:16:34,190 --> 00:16:39,470
one which<font color="#CCCCCC"> means I sort of have to sort</font>

380
00:16:37,640 --> 00:16:42,380
of pad this the state out and end the

381
00:16:39,470 --> 00:16:46,730
block to do that I'm going to put in

382
00:16:42,380 --> 00:16:48,709
another begin bite which distinguishes

383
00:16:46,730 --> 00:16:50,240
this case from the case where for

384
00:16:48,709 --> 00:16:54,290
example we just ran out of space in the

385
00:16:50,240 --> 00:16:57,890
<font color="#E5E5E5">block and then and that's going to point</font>

386
00:16:54,290 --> 00:17:00,560
us to the<font color="#E5E5E5"> operation itself and then some</font>

387
00:16:57,890 --> 00:17:03,020
padding that satisfies the sponge

388
00:17:00,560 --> 00:17:04,669
construction requirements I chose the

389
00:17:03,020 --> 00:17:06,770
padding from<font color="#CCCCCC"> C shake because that way</font>

390
00:17:04,670 --> 00:17:08,300
you can<font color="#E5E5E5"> make a sort of quasi</font>

391
00:17:06,770 --> 00:17:11,839
<font color="#E5E5E5">standards-compliant version of this</font>

392
00:17:08,300 --> 00:17:13,909
protocol so you'll<font color="#E5E5E5"> take that and then</font>

393
00:17:11,839 --> 00:17:16,188
you'll run it into F and<font color="#E5E5E5"> then you'll</font>

394
00:17:13,910 --> 00:17:19,459
continue where you left off at the

395
00:17:16,189 --> 00:17:21,559
beginning<font color="#CCCCCC"> of the next block you know</font>

396
00:17:19,459 --> 00:17:24,230
using<font color="#E5E5E5"> the output of</font><font color="#CCCCCC"> the sponge to do</font>

397
00:17:21,559 --> 00:17:28,399
whatever encryption or macking you

398
00:17:24,230 --> 00:17:31,460
wanted to do with this operation so

399
00:17:28,400 --> 00:17:32,690
finally<font color="#E5E5E5"> I gave you parse ability but I</font>

400
00:17:31,460 --> 00:17:34,160
didn't actually quite give you parse

401
00:17:32,690 --> 00:17:36,290
ability because the higher level

402
00:17:34,160 --> 00:17:36,970
protocol has probably got operations

403
00:17:36,290 --> 00:17:39,789
that are not

404
00:17:36,970 --> 00:17:43,500
exactly encrypt<font color="#E5E5E5"> max and in the clear and</font>

405
00:17:39,789 --> 00:17:48,460
<font color="#E5E5E5">so on they might be send an encrypted</font>

406
00:17:43,500 --> 00:17:50,830
username or extract a hash for purposes

407
00:17:48,460 --> 00:17:53,919
of using an fhm QV or something like

408
00:17:50,830 --> 00:17:55,840
that<font color="#E5E5E5"> so when</font><font color="#CCCCCC"> I say</font><font color="#E5E5E5"> that the output</font><font color="#CCCCCC"> is</font>

409
00:17:53,919 --> 00:17:57,340
supposed to depend<font color="#E5E5E5"> on the intended usage</font>

410
00:17:55,840 --> 00:18:00,639
of a message and on the previous

411
00:17:57,340 --> 00:18:04,510
transcript may be the sort of strobe

412
00:18:00,640 --> 00:18:07,000
level operations are not quite enough so

413
00:18:04,510 --> 00:18:08,830
to disambiguate this there's direct

414
00:18:07,000 --> 00:18:10,179
support in the library and sort of<font color="#E5E5E5"> a</font>

415
00:18:08,830 --> 00:18:13,570
small amount of<font color="#E5E5E5"> direct support in the</font>

416
00:18:10,179 --> 00:18:16,929
protocol itself for metadata operations

417
00:18:13,570 --> 00:18:18,520
which work exactly the same as normal

418
00:18:16,929 --> 00:18:21,850
operations except that they're marked as

419
00:18:18,520 --> 00:18:24,580
metadata operations and therefore saying

420
00:18:21,850 --> 00:18:27,250
what the next real operation is supposed

421
00:18:24,580 --> 00:18:29,230
to do so for example if you want to hash

422
00:18:27,250 --> 00:18:31,330
in you send another<font color="#E5E5E5"> party</font><font color="#CCCCCC"> of public key</font>

423
00:18:29,230 --> 00:18:32,830
you put in two bites<font color="#CCCCCC"> it says this is a</font>

424
00:18:31,330 --> 00:18:34,689
public key or something<font color="#CCCCCC"> and that's</font>

425
00:18:32,830 --> 00:18:37,299
defined by your protocol spec you know

426
00:18:34,690 --> 00:18:39,820
in a unique way<font color="#CCCCCC"> okay this you know x 0 x</font>

427
00:18:37,299 --> 00:18:41,260
<font color="#CCCCCC">7 means public key and then</font><font color="#E5E5E5"> maybe you'll</font>

428
00:18:39,820 --> 00:18:43,149
put in the<font color="#CCCCCC"> links</font><font color="#E5E5E5"> of the public key or</font>

429
00:18:41,260 --> 00:18:46,419
maybe<font color="#E5E5E5"> not or whatever the</font><font color="#CCCCCC"> the messages</font>

430
00:18:43,150 --> 00:18:51,370
are self delimiting but you could put in

431
00:18:46,419 --> 00:18:52,570
the link and then you will<font color="#CCCCCC"> put in the</font>

432
00:18:51,370 --> 00:18:54,100
public key itself in a separate

433
00:18:52,570 --> 00:18:56,500
operation so you do the metadata and

434
00:18:54,100 --> 00:18:57,908
then the main operation the<font color="#E5E5E5"> interesting</font>

435
00:18:56,500 --> 00:19:00,669
<font color="#CCCCCC">thing about this is that actually you're</font>

436
00:18:57,909 --> 00:19:02,470
probably doing that anyway because you

437
00:19:00,669 --> 00:19:03,909
probably want<font color="#E5E5E5"> to send like tag link</font>

438
00:19:02,470 --> 00:19:05,620
value whenever you send something<font color="#CCCCCC"> to the</font>

439
00:19:03,909 --> 00:19:09,850
network so<font color="#E5E5E5"> that the other party can</font>

440
00:19:05,620 --> 00:19:11,500
parse it when they receive that packet

441
00:19:09,850 --> 00:19:13,120
they so<font color="#E5E5E5"> that they can parse it into</font>

442
00:19:11,500 --> 00:19:17,710
whatever sub parts of the packet are

443
00:19:13,120 --> 00:19:19,239
used for different purposes so this<font color="#CCCCCC"> is</font>

444
00:19:17,710 --> 00:19:20,890
also very cheap in the protocol design

445
00:19:19,240 --> 00:19:22,630
because it doesn't cause you to go to a

446
00:19:20,890 --> 00:19:25,870
new block because you probably won't be

447
00:19:22,630 --> 00:19:27,400
encrypting the metadata you<font color="#E5E5E5"> also the</font>

448
00:19:25,870 --> 00:19:29,320
<font color="#CCCCCC">other advantage of strobe actually is</font>

449
00:19:27,400 --> 00:19:32,049
that you can encrypt the metadata so if

450
00:19:29,320 --> 00:19:34,899
you want to<font color="#E5E5E5"> encrypt the lengths and</font>

451
00:19:32,049 --> 00:19:37,418
types of your packets to make<font color="#E5E5E5"> traffic</font>

452
00:19:34,900 --> 00:19:40,960
analysis harder the protocol framework

453
00:19:37,419 --> 00:19:44,470
directly supports that it works<font color="#E5E5E5"> exactly</font>

454
00:19:40,960 --> 00:19:46,690
the<font color="#E5E5E5"> same as encrypting anything else you</font>

455
00:19:44,470 --> 00:19:48,390
<font color="#CCCCCC">just use the sort of you know encrypted</font>

456
00:19:46,690 --> 00:19:49,790
metadata operation

457
00:19:48,390 --> 00:19:53,520
[Music]

458
00:19:49,790 --> 00:19:59,240
in the in the library so there's some

459
00:19:53,520 --> 00:20:03,960
prototype code on strobe source for Jo

460
00:19:59,240 --> 00:20:06,060
this is designed primarily for minimal

461
00:20:03,960 --> 00:20:08,970
size and embedded devices and for

462
00:20:06,060 --> 00:20:11,220
simplicity it has a little<font color="#E5E5E5"> i/o engine</font>

463
00:20:08,970 --> 00:20:14,180
that you know probably could stand to be

464
00:20:11,220 --> 00:20:16,920
improved but it does<font color="#E5E5E5"> io with callbacks</font>

465
00:20:14,180 --> 00:20:19,020
so that you can use<font color="#CCCCCC"> the same operation</font>

466
00:20:16,920 --> 00:20:21,240
to talk to a file system or a socket or

467
00:20:19,020 --> 00:20:25,920
whatever additionally there's some

468
00:20:21,240 --> 00:20:27,390
lightweight curve 255 19e<font color="#CCCCCC"> cdh and</font>

469
00:20:25,920 --> 00:20:29,550
signature and verification code that

470
00:20:27,390 --> 00:20:30,750
might be interesting i know somebody was

471
00:20:29,550 --> 00:20:33,570
looking at it<font color="#CCCCCC"> because it has a much</font>

472
00:20:30,750 --> 00:20:36,360
smaller stack footprint which my mentor

473
00:20:33,570 --> 00:20:39,169
in the kernel or something then then

474
00:20:36,360 --> 00:20:44,370
other implementations of curve 255 19

475
00:20:39,170 --> 00:20:46,530
and so the code total is less than<font color="#CCCCCC"> 4</font>

476
00:20:44,370 --> 00:20:48,659
kilobytes and it uses less<font color="#E5E5E5"> than 1</font>

477
00:20:46,530 --> 00:20:50,250
kilobyte of stack there's an unreleased

478
00:20:48,660 --> 00:20:52,710
version that uses some assembly to get

479
00:20:50,250 --> 00:20:56,400
this significantly smaller but this is

480
00:20:52,710 --> 00:20:57,750
<font color="#E5E5E5">just a sea version and that's on that's</font>

481
00:20:56,400 --> 00:21:00,480
on arm but it's a portable

482
00:20:57,750 --> 00:21:02,880
implementation so there's a lot<font color="#E5E5E5"> of work</font>

483
00:21:00,480 --> 00:21:04,680
to do in this area particularly in

484
00:21:02,880 --> 00:21:06,360
documentation because you know I claim

485
00:21:04,680 --> 00:21:08,700
this is simple and easy to use but it

486
00:21:06,360 --> 00:21:10,679
without documentation that's adequate

487
00:21:08,700 --> 00:21:12,240
and understandable to somebody who is

488
00:21:10,680 --> 00:21:15,650
only dabbling in cryptography it's

489
00:21:12,240 --> 00:21:18,120
definitely not simple and easy to use

490
00:21:15,650 --> 00:21:20,070
another interesting<font color="#CCCCCC"> thing is that the</font>

491
00:21:18,120 --> 00:21:22,050
way I define these operations you could

492
00:21:20,070 --> 00:21:23,250
<font color="#CCCCCC">of course</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> Shaw and AES to accomplish</font>

493
00:21:22,050 --> 00:21:24,480
the same things and I<font color="#CCCCCC"> think the</font>

494
00:21:23,250 --> 00:21:26,430
constructions would be relatively

495
00:21:24,480 --> 00:21:29,670
similar based on you know only<font color="#E5E5E5"> four</font>

496
00:21:26,430 --> 00:21:32,070
flags or whatever so it would be

497
00:21:29,670 --> 00:21:33,570
interesting to to try<font color="#E5E5E5"> to put together an</font>

498
00:21:32,070 --> 00:21:39,080
implementation like that for<font color="#E5E5E5"> people who</font>

499
00:21:33,570 --> 00:21:41,760
would rather have shot<font color="#CCCCCC"> to and asn shake</font>

500
00:21:39,080 --> 00:21:43,439
furthermore I would like to complete<font color="#E5E5E5"> a</font>

501
00:21:41,760 --> 00:21:45,060
formal analysis of this<font color="#E5E5E5"> almost all the</font>

502
00:21:43,440 --> 00:21:46,920
work is done by do the duplex paper

503
00:21:45,060 --> 00:21:49,649
anyway but it doesn't consider things

504
00:21:46,920 --> 00:21:51,810
like rollback resistance of the state or

505
00:21:49,650 --> 00:21:53,340
a post quantum analysis for which the

506
00:21:51,810 --> 00:21:59,030
random Oracle model suddenly gets a lot

507
00:21:53,340 --> 00:22:09,649
more complicated so that's<font color="#E5E5E5"> all</font>

508
00:21:59,030 --> 00:22:12,980
<font color="#E5E5E5">I see them coming we have time</font><font color="#CCCCCC"> for</font>

509
00:22:09,650 --> 00:22:14,270
<font color="#CCCCCC">questions okay three very quick</font>

510
00:22:12,980 --> 00:22:20,900
questions first could you comment on

511
00:22:14,270 --> 00:22:23,120
patents<font color="#CCCCCC"> something-something Kia + but we</font>

512
00:22:20,900 --> 00:22:26,150
don't have specific patents on this

513
00:22:23,120 --> 00:22:28,820
except<font color="#E5E5E5"> that the paper describes also a</font>

514
00:22:26,150 --> 00:22:30,560
variant of the DPA resistant<font color="#CCCCCC"> Kitri for</font>

515
00:22:28,820 --> 00:22:33,350
which I can neither confirm nor deny on

516
00:22:30,560 --> 00:22:36,889
CRI patents<font color="#E5E5E5"> but outside</font><font color="#CCCCCC"> of the key tree</font>

517
00:22:33,350 --> 00:22:40,280
stuff and whatever patents you may stomp

518
00:22:36,890 --> 00:22:42,020
on by implementing a protocol with it it

519
00:22:40,280 --> 00:22:44,149
is not specifically patented to my

520
00:22:42,020 --> 00:22:45,500
knowledge second question you were

521
00:22:44,150 --> 00:22:47,450
mentioning that you don't care so<font color="#CCCCCC"> much</font>

522
00:22:45,500 --> 00:22:49,400
about performance so why do you have the

523
00:22:47,450 --> 00:22:51,290
clear text options couldn't you simplify

524
00:22:49,400 --> 00:22:59,750
it and promote good practice by only

525
00:22:51,290 --> 00:23:04,000
allowing people to encrypt maybe well

526
00:22:59,750 --> 00:23:06,320
the particular issue is like metadata

527
00:23:04,000 --> 00:23:07,910
you know metadata might you might rather

528
00:23:06,320 --> 00:23:10,310
send it in the<font color="#E5E5E5"> clear so that the other</font>

529
00:23:07,910 --> 00:23:12,290
guy if he's got like if it's a security

530
00:23:10,310 --> 00:23:14,510
Enclave inside a<font color="#CCCCCC"> smartphone so</font><font color="#E5E5E5"> that the</font>

531
00:23:12,290 --> 00:23:18,230
smartphone can look at patent<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> I</font>

532
00:23:14,510 --> 00:23:20,030
can<font color="#E5E5E5"> look at packet headers or for like a</font>

533
00:23:18,230 --> 00:23:21,590
<font color="#E5E5E5">boot loader that has encrypted code you</font>

534
00:23:20,030 --> 00:23:24,350
might want to be able to see some kinds

535
00:23:21,590 --> 00:23:27,350
of headers I could remove that option

536
00:23:24,350 --> 00:23:29,570
though yes okay third thing<font color="#E5E5E5"> I was just</font>

537
00:23:27,350 --> 00:23:32,000
wondering as an academic you were

538
00:23:29,570 --> 00:23:37,129
criticizing fhm QV and labeling it as

539
00:23:32,000 --> 00:23:45,110
academic I<font color="#E5E5E5"> was just wondering why no</font>

540
00:23:37,130 --> 00:23:46,970
comment you've discuss a little bit

541
00:23:45,110 --> 00:23:49,429
about formal analysis of the<font color="#E5E5E5"> framework</font>

542
00:23:46,970 --> 00:23:51,080
in general have you<font color="#CCCCCC"> thought have</font><font color="#E5E5E5"> you</font>

543
00:23:49,430 --> 00:23:54,320
thought<font color="#E5E5E5"> about any work and Mead in the</font>

544
00:23:51,080 --> 00:23:57,080
direction of<font color="#E5E5E5"> allowing engineers to it to</font>

545
00:23:54,320 --> 00:23:58,610
implement a specific protocol on the

546
00:23:57,080 --> 00:24:01,100
strobe framework in such way that that

547
00:23:58,610 --> 00:24:03,770
such way that you could automate formal

548
00:24:01,100 --> 00:24:06,500
analysis so you write it up<font color="#CCCCCC"> they expect</font>

549
00:24:03,770 --> 00:24:08,720
the implementation and then also get get

550
00:24:06,500 --> 00:24:10,340
an automated checkout loss a<font color="#CCCCCC"> provari</font><font color="#E5E5E5"> for</font>

551
00:24:08,720 --> 00:24:11,779
crypto briefs as to

552
00:24:10,340 --> 00:24:13,908
whether the protocol is meeting the

553
00:24:11,779 --> 00:24:19,730
security goals you think it is yes but I

554
00:24:13,909 --> 00:24:21,559
haven't done<font color="#E5E5E5"> it yet well if you want to</font>

555
00:24:19,730 --> 00:24:24,230
<font color="#E5E5E5">if you want to do any collaboration in</font>

556
00:24:21,559 --> 00:24:26,418
that direction i'd be interested one of

557
00:24:24,230 --> 00:24:28,190
the most issues that we have<font color="#E5E5E5"> an embedded</font>

558
00:24:26,419 --> 00:24:29,720
system is the power consumption did you

559
00:24:28,190 --> 00:24:32,120
consider<font color="#CCCCCC"> that if you compare your</font>

560
00:24:29,720 --> 00:24:34,370
<font color="#E5E5E5">methods with others in powers can be</font>

561
00:24:32,120 --> 00:24:36,469
used this<font color="#E5E5E5"> bit for example if it's a or b</font>

562
00:24:34,370 --> 00:24:43,370
no boards<font color="#E5E5E5"> it's a battery did you</font>

563
00:24:36,470 --> 00:24:46,039
<font color="#E5E5E5">consider that</font><font color="#CCCCCC"> if you check it I don't I</font>

564
00:24:43,370 --> 00:24:49,620
didn't actually put<font color="#CCCCCC"> it on an Arduino</font>

565
00:24:46,039 --> 00:24:52,899
board I mean it runs fine on a photon

566
00:24:49,620 --> 00:24:55,459
[Music]

567
00:24:52,899 --> 00:24:57,260
yet did you compare your power

568
00:24:55,460 --> 00:25:02,590
consumption of your protocol with other

569
00:24:57,260 --> 00:25:02,590
protocols that we have now thank you

570
00:25:06,309 --> 00:25:14,649
<font color="#E5E5E5">thank Mike again</font>

571
00:25:08,160 --> 00:25:14,650
[Applause]

