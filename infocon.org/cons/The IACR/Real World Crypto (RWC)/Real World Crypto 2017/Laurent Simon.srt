1
00:00:00,000 --> 00:00:06,720
hi okay thanks so yeah i'm i'm lauren

2
00:00:04,319 --> 00:00:08,010
from the<font color="#E5E5E5"> university of cambridge and</font><font color="#CCCCCC"> i</font>

3
00:00:06,720 --> 00:00:13,530
want<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> to you about how we can</font>

4
00:00:08,010 --> 00:00:15,330
erase secrets from<font color="#E5E5E5"> ram so in the rest of</font>

5
00:00:13,530 --> 00:00:17,910
the talk i'll be considering a non

6
00:00:15,330 --> 00:00:20,509
malicious program p which uses some kind

7
00:00:17,910 --> 00:00:22,650
of secret password or cryptic keys and

8
00:00:20,510 --> 00:00:24,619
once the program is done using the

9
00:00:22,650 --> 00:00:26,970
<font color="#E5E5E5">secrets you try to erase them from run</font>

10
00:00:24,619 --> 00:00:30,119
now ideally we would like to guarantee

11
00:00:26,970 --> 00:00:32,729
is that if we then get give access to an

12
00:00:30,119 --> 00:00:35,010
attacker to the entire system volatile

13
00:00:32,729 --> 00:00:37,680
memory and<font color="#E5E5E5"> cpu states this</font><font color="#CCCCCC"> attacker I</font>

14
00:00:35,010 --> 00:00:39,750
still unable to recover the<font color="#E5E5E5"> secret in</font>

15
00:00:37,680 --> 00:00:42,180
practice this is really<font color="#E5E5E5"> challenging</font>

16
00:00:39,750 --> 00:00:44,579
because there's an enormous amount<font color="#CCCCCC"> of</font>

17
00:00:42,180 --> 00:00:46,530
code involved so it's not<font color="#CCCCCC"> just about the</font>

18
00:00:44,579 --> 00:00:50,850
program<font color="#CCCCCC"> p that we're</font><font color="#E5E5E5"> looking at it's</font>

19
00:00:46,530 --> 00:00:53,520
also kernel code libraries OS libraries

20
00:00:50,850 --> 00:00:55,590
codes running in theory<font color="#E5E5E5"> ferals and so on</font>

21
00:00:53,520 --> 00:00:57,059
<font color="#E5E5E5">and so forth so in the rest of this talk</font>

22
00:00:55,590 --> 00:00:58,859
I'm going to<font color="#E5E5E5"> relax the threat model a</font>

23
00:00:57,059 --> 00:01:00,629
little bit and<font color="#E5E5E5"> I'm going to give the</font>

24
00:00:58,859 --> 00:01:06,090
attacker only access<font color="#CCCCCC"> to the program</font>

25
00:01:00,629 --> 00:01:07,380
userspace memory and<font color="#CCCCCC"> CPU</font><font color="#E5E5E5"> state so in</font>

26
00:01:06,090 --> 00:01:09,900
practice the main concern<font color="#CCCCCC"> that people</font>

27
00:01:07,380 --> 00:01:12,869
have when it<font color="#CCCCCC"> comes to six sexually</font>

28
00:01:09,900 --> 00:01:15,420
deleting data from ram is compiler

29
00:01:12,869 --> 00:01:17,630
optimizations and there's a simple

30
00:01:15,420 --> 00:01:20,640
example on this slide so we have a

31
00:01:17,630 --> 00:01:22,619
sensitive functions which declares a

32
00:01:20,640 --> 00:01:24,600
sensitive butter on the stack and before

33
00:01:22,619 --> 00:01:27,720
the function returns the programmer is

34
00:01:24,600 --> 00:01:31,079
calling this<font color="#CCCCCC"> 0mm function which aims at</font>

35
00:01:27,720 --> 00:01:33,030
zero in<font color="#CCCCCC"> the buffer sensitive buffer and</font>

36
00:01:31,079 --> 00:01:34,589
the main concern<font color="#CCCCCC"> that people have is</font>

37
00:01:33,030 --> 00:01:37,009
that the compiler might might actually

38
00:01:34,590 --> 00:01:39,540
remove the call to the<font color="#E5E5E5"> German function</font>

39
00:01:37,009 --> 00:01:41,790
because as far as the compiler is

40
00:01:39,540 --> 00:01:43,560
concerned this sensitive<font color="#E5E5E5"> buzzer is going</font>

41
00:01:41,790 --> 00:01:46,439
out out<font color="#E5E5E5"> of scope when the function</font>

42
00:01:43,560 --> 00:01:48,540
returns so it's kind of wasteful to

43
00:01:46,439 --> 00:01:50,039
erase this this variable since it's

44
00:01:48,540 --> 00:01:52,799
never going to be accessed again in the

45
00:01:50,040 --> 00:01:54,079
context of the function and later in<font color="#E5E5E5"> the</font>

46
00:01:52,799 --> 00:01:56,520
talk<font color="#E5E5E5"> I'll give you some more examples</font>

47
00:01:54,079 --> 00:01:58,320
about problems that occur in practice

48
00:01:56,520 --> 00:02:01,979
which are actually<font color="#E5E5E5"> not related to</font>

49
00:01:58,320 --> 00:02:03,990
compiler optimization so what we

50
00:02:01,979 --> 00:02:06,060
realized early on in this project is

51
00:02:03,990 --> 00:02:08,609
there was no tool to actually help

52
00:02:06,060 --> 00:02:10,979
developers assess their program so we

53
00:02:08,610 --> 00:02:13,830
<font color="#E5E5E5">just decided to create a tool the first</font>

54
00:02:10,979 --> 00:02:16,260
<font color="#CCCCCC">approach is to use</font><font color="#E5E5E5"> static code analysis</font>

55
00:02:13,830 --> 00:02:18,540
which is based on analyzing the source

56
00:02:16,260 --> 00:02:20,040
code of the program<font color="#E5E5E5"> and because of this</font>

57
00:02:18,540 --> 00:02:22,799
it cannot account for compiler

58
00:02:20,040 --> 00:02:24,600
<font color="#CCCCCC">optimization neither can ii to cancel</font>

59
00:02:22,800 --> 00:02:28,680
memory accesses due to the application

60
00:02:24,600 --> 00:02:29,790
binary interface or register skills so

61
00:02:28,680 --> 00:02:32,000
for those<font color="#CCCCCC"> of you who haven't heard the</font>

62
00:02:29,790 --> 00:02:34,640
term register<font color="#CCCCCC"> spill before</font><font color="#E5E5E5"> edges</font>

63
00:02:32,000 --> 00:02:37,770
resource to<font color="#CCCCCC"> the fact that as a compiler</font>

64
00:02:34,640 --> 00:02:39,570
runs out of registers<font color="#E5E5E5"> views it will</font>

65
00:02:37,770 --> 00:02:41,130
basically peel the registers on<font color="#CCCCCC"> the</font>

66
00:02:39,570 --> 00:02:43,290
stack that is copy them over to the

67
00:02:41,130 --> 00:02:45,510
stacks temporarily to be able<font color="#E5E5E5"> to reuse</font>

68
00:02:43,290 --> 00:02:47,370
those registers so because of<font color="#E5E5E5"> the</font>

69
00:02:45,510 --> 00:02:49,769
problem of static code analysis we opted

70
00:02:47,370 --> 00:02:51,390
for dynamic code analysis which<font color="#E5E5E5"> run the</font>

71
00:02:49,770 --> 00:02:53,820
actual binary which is generated by<font color="#CCCCCC"> a</font>

72
00:02:51,390 --> 00:02:55,920
compiler<font color="#CCCCCC"> that in practice gives us</font>

73
00:02:53,820 --> 00:02:57,989
virtually no<font color="#CCCCCC"> false positive at the</font>

74
00:02:55,920 --> 00:03:00,799
expense of needing a comprehensive set

75
00:02:57,990 --> 00:03:03,300
of unit tests to have good code coverage

76
00:03:00,800 --> 00:03:05,070
so we use a simple technique well-known

77
00:03:03,300 --> 00:03:07,160
technique called<font color="#E5E5E5"> ten tracking so think</font>

78
00:03:05,070 --> 00:03:09,810
of the times as being a<font color="#CCCCCC"> zero or one and</font>

79
00:03:07,160 --> 00:03:12,329
when a memory location is marked with<font color="#CCCCCC"> a</font>

80
00:03:09,810 --> 00:03:14,540
<font color="#E5E5E5">tenth of one it just means that the this</font>

81
00:03:12,330 --> 00:03:16,980
<font color="#E5E5E5">memory location contain sensitive data</font>

82
00:03:14,540 --> 00:03:19,109
then we declare 10 sources from which

83
00:03:16,980 --> 00:03:20,040
the data becomes tainted so typically

84
00:03:19,110 --> 00:03:23,310
that<font color="#E5E5E5"> would be a file containing</font>

85
00:03:20,040 --> 00:03:25,679
sensitive data say your private key and

86
00:03:23,310 --> 00:03:27,540
every<font color="#E5E5E5"> time the program P reached from</font>

87
00:03:25,680 --> 00:03:29,370
this from this file we're going to taint

88
00:03:27,540 --> 00:03:33,959
the memory location where the data is

89
00:03:29,370 --> 00:03:35,670
being copied into and then as the

90
00:03:33,959 --> 00:03:37,650
program continues<font color="#CCCCCC"> at execution</font><font color="#E5E5E5"> we need</font>

91
00:03:35,670 --> 00:03:39,470
to be able<font color="#E5E5E5"> to propagate the</font><font color="#CCCCCC"> tenth</font>

92
00:03:37,650 --> 00:03:42,690
accordingly so we do<font color="#E5E5E5"> this in two ways</font>

93
00:03:39,470 --> 00:03:44,519
first<font color="#E5E5E5"> we do this during assignment so</font>

94
00:03:42,690 --> 00:03:46,709
typically if<font color="#E5E5E5"> you have a tainted variable</font>

95
00:03:44,519 --> 00:03:49,650
copied over to a new variable this new

96
00:03:46,709 --> 00:03:51,300
variable<font color="#E5E5E5"> also be contented and we also</font>

97
00:03:49,650 --> 00:03:54,150
propagate<font color="#CCCCCC"> sense based on pointer</font>

98
00:03:51,300 --> 00:03:56,640
<font color="#E5E5E5">arithmetic operations so think of this</font>

99
00:03:54,150 --> 00:03:59,040
<font color="#CCCCCC">as just being a table lookup where the</font>

100
00:03:56,640 --> 00:04:01,380
table itself is not tempted but but the

101
00:03:59,040 --> 00:04:04,230
index that you use for<font color="#E5E5E5"> lookup is tainted</font>

102
00:04:01,380 --> 00:04:06,480
and that's used a lot every time you do

103
00:04:04,230 --> 00:04:09,750
format conversion say between binary

104
00:04:06,480 --> 00:04:11,100
format and base64 for not because we're

105
00:04:09,750 --> 00:04:13,440
dealing with cryptography we also need a

106
00:04:11,100 --> 00:04:16,260
way to n taint memory locations that

107
00:04:13,440 --> 00:04:18,719
contain the results of<font color="#CCCCCC"> a function that</font>

108
00:04:16,260 --> 00:04:20,940
<font color="#E5E5E5">are considered one way so typically an</font>

109
00:04:18,720 --> 00:04:23,490
encryption function or<font color="#E5E5E5"> a hash wave</font>

110
00:04:20,940 --> 00:04:26,480
functions so long as the input to the

111
00:04:23,490 --> 00:04:28,880
hash wave function has high entropy

112
00:04:26,480 --> 00:04:30,830
so we implemented all those ideas in a

113
00:04:28,880 --> 00:04:33,080
new tool that<font color="#CCCCCC"> we call secret rhyme which</font>

114
00:04:30,830 --> 00:04:34,789
we make available in github and we've

115
00:04:33,080 --> 00:04:37,729
started evaluating three<font color="#CCCCCC"> crystal</font>

116
00:04:34,790 --> 00:04:40,910
libraries with it gpg openssl and embed

117
00:04:37,730 --> 00:04:43,490
<font color="#E5E5E5">TLS now surprisingly we haven't found</font>

118
00:04:40,910 --> 00:04:46,310
any problems because of compiler

119
00:04:43,490 --> 00:04:48,590
optimization now to be fair all those

120
00:04:46,310 --> 00:04:52,000
libraries have a hardened version of

121
00:04:48,590 --> 00:04:54,049
this 0mm function which is<font color="#E5E5E5"> precisely</font>

122
00:04:52,000 --> 00:04:56,780
implemented to avoid compiler

123
00:04:54,050 --> 00:04:58,040
optimizations however if you if you ask

124
00:04:56,780 --> 00:05:00,349
the compiler people they'll tell you

125
00:04:58,040 --> 00:05:02,720
that the this hardening is kind of<font color="#E5E5E5"> it's</font>

126
00:05:00,350 --> 00:05:05,000
kind of a hack and it's<font color="#E5E5E5"> actually not</font>

127
00:05:02,720 --> 00:05:06,950
bulletproof but it seems<font color="#CCCCCC"> that in</font>

128
00:05:05,000 --> 00:05:08,360
practice it's reassuring to see that the

129
00:05:06,950 --> 00:05:11,510
this hack is kind of working at the

130
00:05:08,360 --> 00:05:14,600
<font color="#E5E5E5">moment and in fact most of the problems</font>

131
00:05:11,510 --> 00:05:17,000
of data being left on left in in data in

132
00:05:14,600 --> 00:05:19,400
left in in<font color="#CCCCCC"> rum in practice actually boy</font>

133
00:05:17,000 --> 00:05:21,830
down to programmers mistake so for

134
00:05:19,400 --> 00:05:24,739
example forgetting to rise<font color="#E5E5E5"> above formed</font>

135
00:05:21,830 --> 00:05:26,960
on the<font color="#E5E5E5"> stack</font><font color="#CCCCCC"> o on the</font><font color="#E5E5E5"> heap more</font>

136
00:05:24,740 --> 00:05:30,110
interestingly we found that<font color="#E5E5E5"> the IO API</font>

137
00:05:26,960 --> 00:05:32,960
is tend to do caching and that leads to

138
00:05:30,110 --> 00:05:36,110
subtle problems in practice so let me

139
00:05:32,960 --> 00:05:38,090
<font color="#E5E5E5">give you an example the</font><font color="#CCCCCC"> gpg program when</font>

140
00:05:36,110 --> 00:05:40,370
it's trying to detect if<font color="#CCCCCC"> the file</font>

141
00:05:38,090 --> 00:05:42,320
sometimes private key or a public<font color="#E5E5E5"> key</font>

142
00:05:40,370 --> 00:05:44,270
what it does is<font color="#CCCCCC"> it tries to read the</font>

143
00:05:42,320 --> 00:05:45,530
first line of the file which typically

144
00:05:44,270 --> 00:05:48,109
if<font color="#E5E5E5"> you have if you're using the</font><font color="#CCCCCC"> ten</font>

145
00:05:45,530 --> 00:05:49,700
format will contain you know an<font color="#CCCCCC"> ASCII</font>

146
00:05:48,110 --> 00:05:52,490
string saying public key or private key

147
00:05:49,700 --> 00:05:54,710
so if you<font color="#E5E5E5"> had as a programmer what you</font>

148
00:05:52,490 --> 00:05:56,390
do is you you'd open a<font color="#E5E5E5"> five handle and</font>

149
00:05:54,710 --> 00:05:58,090
<font color="#E5E5E5">then you might call this afraid function</font>

150
00:05:56,390 --> 00:06:00,380
to read the first line of the file

151
00:05:58,090 --> 00:06:02,060
alternatively<font color="#CCCCCC"> you might pull this n map</font>

152
00:06:00,380 --> 00:06:03,860
function to map the first line of the

153
00:06:02,060 --> 00:06:06,560
file into memory and once you're done

154
00:06:03,860 --> 00:06:09,080
looking at the data you take<font color="#E5E5E5"> care of</font>

155
00:06:06,560 --> 00:06:10,520
during the the buffer I turns out<font color="#E5E5E5"> that</font>

156
00:06:09,080 --> 00:06:12,890
this<font color="#E5E5E5"> really simple piece</font><font color="#CCCCCC"> of code</font>

157
00:06:10,520 --> 00:06:15,919
actually<font color="#CCCCCC"> doesn't arise not memory</font>

158
00:06:12,890 --> 00:06:18,440
properly so the<font color="#CCCCCC"> N map function actually</font>

159
00:06:15,920 --> 00:06:20,270
works at the page at the<font color="#E5E5E5"> page level so</font>

160
00:06:18,440 --> 00:06:21,770
even though you've asked only the first

161
00:06:20,270 --> 00:06:24,200
line to be mapped into the file you

162
00:06:21,770 --> 00:06:25,880
actually get the<font color="#E5E5E5"> entire page an entire</font>

163
00:06:24,200 --> 00:06:28,969
pages worth of potentially sensitive

164
00:06:25,880 --> 00:06:30,950
data into your process and the F Reed

165
00:06:28,970 --> 00:06:33,110
function is also doing some caching in

166
00:06:30,950 --> 00:06:35,000
the hope that if you call<font color="#CCCCCC"> the fh</font>

167
00:06:33,110 --> 00:06:37,370
function again the data<font color="#E5E5E5"> is already</font>

168
00:06:35,000 --> 00:06:39,670
available in v you don't have to do a

169
00:06:37,370 --> 00:06:39,670
cisco

170
00:06:40,650 --> 00:06:45,549
other things<font color="#CCCCCC"> that we found is that we</font>

171
00:06:42,940 --> 00:06:47,290
identified set of functions that are

172
00:06:45,550 --> 00:06:49,150
really prone to leaving residual data on

173
00:06:47,290 --> 00:06:51,010
the sack so typically formatting

174
00:06:49,150 --> 00:06:54,280
functions such as the printf and scanf

175
00:06:51,010 --> 00:06:56,050
families fall into this category but

176
00:06:54,280 --> 00:06:58,090
more generally functions that are

177
00:06:56,050 --> 00:07:02,290
recursive tend to aggressively spill

178
00:06:58,090 --> 00:07:04,388
registers on<font color="#CCCCCC"> the stack so beyond these</font>

179
00:07:02,290 --> 00:07:06,430
functions most of the data you'll find

180
00:07:04,389 --> 00:07:08,650
on the stack actually is caused because

181
00:07:06,430 --> 00:07:11,050
of the ABI calling conventions and

182
00:07:08,650 --> 00:07:13,359
register skills so here's a challenge

183
00:07:11,050 --> 00:07:16,030
because as a programmer<font color="#E5E5E5"> you don't have</font>

184
00:07:13,360 --> 00:07:19,450
control over these however the compiler

185
00:07:16,030 --> 00:07:21,070
knows about the stack layout so<font color="#E5E5E5"> here's a</font>

186
00:07:19,450 --> 00:07:23,020
sweet spot<font color="#CCCCCC"> where</font><font color="#E5E5E5"> we could actually get a</font>

187
00:07:21,070 --> 00:07:26,110
compiler support to have the developer

188
00:07:23,020 --> 00:07:30,520
erase the sack<font color="#E5E5E5"> I'm going to elaborate on</font>

189
00:07:26,110 --> 00:07:32,860
this<font color="#E5E5E5"> idea in the rest of the talk so as</font>

190
00:07:30,520 --> 00:07:35,020
<font color="#E5E5E5">I suggested the idea is simple we'd like</font>

191
00:07:32,860 --> 00:07:36,340
<font color="#CCCCCC">to get compiler support and if actually</font>

192
00:07:35,020 --> 00:07:38,260
effectively would like to<font color="#E5E5E5"> get the</font>

193
00:07:36,340 --> 00:07:40,840
compiler to automatically raise the

194
00:07:38,260 --> 00:07:42,820
stack for us on functions that the

195
00:07:40,840 --> 00:07:45,909
programmer annotators being sensitive

196
00:07:42,820 --> 00:07:47,770
and we think<font color="#E5E5E5"> that having this annotation</font>

197
00:07:45,910 --> 00:07:49,210
based mechanism is a simple way that

198
00:07:47,770 --> 00:07:50,890
programmers can add this feature in

199
00:07:49,210 --> 00:07:55,030
their code which is<font color="#CCCCCC"> already available</font>

200
00:07:50,890 --> 00:07:57,130
today so we did is we implemented a a

201
00:07:55,030 --> 00:07:58,630
compiler<font color="#CCCCCC"> plugin in the klang llvm</font>

202
00:07:57,130 --> 00:08:02,650
framework which is a widely used

203
00:07:58,630 --> 00:08:04,659
compiler framework but before<font color="#CCCCCC"> I move on</font>

204
00:08:02,650 --> 00:08:06,520
to describing you know what we've

205
00:08:04,660 --> 00:08:08,410
actually implemented I'd like<font color="#E5E5E5"> to give</font>

206
00:08:06,520 --> 00:08:10,630
you<font color="#E5E5E5"> a feel for the number of problems</font>

207
00:08:08,410 --> 00:08:13,210
that arise in practice when<font color="#E5E5E5"> you try to</font>

208
00:08:10,630 --> 00:08:15,039
implement<font color="#E5E5E5"> the solution like this so</font>

209
00:08:13,210 --> 00:08:17,289
first of all<font color="#E5E5E5"> there's a large amount of</font>

210
00:08:15,039 --> 00:08:20,020
code which is<font color="#E5E5E5"> provided by the by the</font>

211
00:08:17,289 --> 00:08:22,930
platform where the code runs and this

212
00:08:20,020 --> 00:08:24,880
code is not we can't instrument it at

213
00:08:22,930 --> 00:08:28,450
the time that we compile our<font color="#E5E5E5"> users I use</font>

214
00:08:24,880 --> 00:08:29,830
a space program<font color="#CCCCCC"> okay so typically the</font>

215
00:08:28,450 --> 00:08:31,960
leap<font color="#E5E5E5"> see and the loader anchor falls</font>

216
00:08:29,830 --> 00:08:34,630
into this category though you also have

217
00:08:31,960 --> 00:08:36,880
code provided by the kernel small piece

218
00:08:34,630 --> 00:08:38,860
<font color="#E5E5E5">of code called the VDS 0 which is mapped</font>

219
00:08:36,880 --> 00:08:41,650
into user space program as a program

220
00:08:38,860 --> 00:08:43,930
start signal handlers can also be

221
00:08:41,650 --> 00:08:46,720
problematic so what happens here<font color="#CCCCCC"> is that</font>

222
00:08:43,929 --> 00:08:49,180
before<font color="#CCCCCC"> the colonel jumps into your</font>

223
00:08:46,720 --> 00:08:51,339
signal handler it pushes on user space

224
00:08:49,180 --> 00:08:51,790
tax the current cpu state of<font color="#E5E5E5"> your</font>

225
00:08:51,339 --> 00:08:53,290
program

226
00:08:51,790 --> 00:08:55,510
so if you're<font color="#E5E5E5"> in the middle of the</font>

227
00:08:53,290 --> 00:08:57,400
decryption<font color="#CCCCCC"> or routine what what is being</font>

228
00:08:55,510 --> 00:08:59,050
pushed on your own the user space tax is

229
00:08:57,400 --> 00:09:01,689
probably going to contain a lot of

230
00:08:59,050 --> 00:09:04,719
sensitive data we also need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

231
00:09:01,690 --> 00:09:07,930
<font color="#E5E5E5">careful about registers for example the</font>

232
00:09:04,720 --> 00:09:10,960
<font color="#CCCCCC">RDP register used originally was used to</font>

233
00:09:07,930 --> 00:09:14,920
store a frame pointer so the basically

234
00:09:10,960 --> 00:09:16,600
<font color="#E5E5E5">an address and in the new on X on 64-bit</font>

235
00:09:14,920 --> 00:09:18,400
machine it can also be used to store

236
00:09:16,600 --> 00:09:22,020
data so it might contain sensitive data

237
00:09:18,400 --> 00:09:24,490
and we have to be<font color="#CCCCCC"> careful about this</font>

238
00:09:22,020 --> 00:09:26,199
about<font color="#E5E5E5"> the compiler so I already talked</font>

239
00:09:24,490 --> 00:09:28,000
about this a little<font color="#E5E5E5"> bit most of the</font>

240
00:09:26,200 --> 00:09:30,460
problems or curb excessive compiler

241
00:09:28,000 --> 00:09:31,540
optimization because of time constrained

242
00:09:30,460 --> 00:09:33,460
I'm not going to give you more detail

243
00:09:31,540 --> 00:09:35,110
about<font color="#E5E5E5"> this I've put up the slide anyway</font>

244
00:09:33,460 --> 00:09:38,770
so if you're<font color="#CCCCCC"> interested in</font><font color="#E5E5E5"> this you can</font>

245
00:09:35,110 --> 00:09:40,810
you can look it up later and of course

246
00:09:38,770 --> 00:09:44,160
<font color="#E5E5E5">the</font><font color="#CCCCCC"> the programmers developer might also</font>

247
00:09:40,810 --> 00:09:48,339
get in the way of<font color="#E5E5E5"> proper deletion so</font>

248
00:09:44,160 --> 00:09:49,660
variable sized object<font color="#E5E5E5"> total the stack</font><font color="#CCCCCC"> is</font>

249
00:09:48,340 --> 00:09:51,490
something that we can't really support

250
00:09:49,660 --> 00:09:53,380
because it doesn't allow the compiler to

251
00:09:51,490 --> 00:09:55,860
determine the the size of the object

252
00:09:53,380 --> 00:09:57,820
compilation time and there's also some

253
00:09:55,860 --> 00:10:00,880
some functions that can be problematic

254
00:09:57,820 --> 00:10:02,920
<font color="#CCCCCC">to support for example this odd stack</font>

255
00:10:00,880 --> 00:10:05,680
function allows the programmer to change

256
00:10:02,920 --> 00:10:08,650
the location of the<font color="#E5E5E5"> stack for signal</font>

257
00:10:05,680 --> 00:10:10,780
handle so we've tried<font color="#CCCCCC"> to take care</font><font color="#E5E5E5"> of</font>

258
00:10:08,650 --> 00:10:13,360
all the problems that can arise in

259
00:10:10,780 --> 00:10:15,189
practice in order<font color="#CCCCCC"> of course to implement</font>

260
00:10:13,360 --> 00:10:18,070
our solution so the first<font color="#E5E5E5"> solution we</font>

261
00:10:15,190 --> 00:10:20,410
implemented is a native solution which

262
00:10:18,070 --> 00:10:22,900
works at the function<font color="#E5E5E5"> level so here the</font>

263
00:10:20,410 --> 00:10:24,790
idea is very simple we instrument every

264
00:10:22,900 --> 00:10:26,230
function in the program even if they are

265
00:10:24,790 --> 00:10:28,390
not<font color="#E5E5E5"> marked as sensitive by the</font>

266
00:10:26,230 --> 00:10:30,370
programmer and we<font color="#E5E5E5"> erase the facts and</font>

267
00:10:28,390 --> 00:10:32,920
<font color="#E5E5E5">the register used at the</font><font color="#CCCCCC"> time of the</font>

268
00:10:30,370 --> 00:10:35,590
function returns so this turns out to

269
00:10:32,920 --> 00:10:39,160
work to perform<font color="#E5E5E5"> really poorly in</font>

270
00:10:35,590 --> 00:10:40,990
practice on the<font color="#E5E5E5"> left side here this is</font>

271
00:10:39,160 --> 00:10:44,500
the case when you<font color="#E5E5E5"> want to support</font>

272
00:10:40,990 --> 00:10:46,030
signals and as you see it's about almost

273
00:10:44,500 --> 00:10:47,920
four times as slow as the original

274
00:10:46,030 --> 00:10:50,770
program and if you don't<font color="#E5E5E5"> care about</font>

275
00:10:47,920 --> 00:10:52,719
signals at all<font color="#CCCCCC"> you're still about twice</font>

276
00:10:50,770 --> 00:10:55,030
as slow as the original program which is

277
00:10:52,720 --> 00:10:58,080
fairly poor so we looked at another

278
00:10:55,030 --> 00:11:00,640
another approach and here the idea is

279
00:10:58,080 --> 00:11:02,800
again we instruments every function in

280
00:11:00,640 --> 00:11:05,230
the program<font color="#CCCCCC"> but this time in order</font><font color="#E5E5E5"> to</font>

281
00:11:02,800 --> 00:11:05,709
keep track of how much tax memory<font color="#E5E5E5"> is</font>

282
00:11:05,230 --> 00:11:07,830
being used

283
00:11:05,710 --> 00:11:10,060
<font color="#E5E5E5">runtime and we keep track we keep this</font>

284
00:11:07,830 --> 00:11:12,670
maximum memory usage in a global

285
00:11:10,060 --> 00:11:16,510
variable then in functions annotated by

286
00:11:12,670 --> 00:11:18,040
the programmer we erase the stack using

287
00:11:16,510 --> 00:11:20,170
the value that<font color="#E5E5E5"> we have in the global</font>

288
00:11:18,040 --> 00:11:22,150
variable and we also arise all the

289
00:11:20,170 --> 00:11:25,420
registers or platform registers at once

290
00:11:22,150 --> 00:11:26,650
in this in this annotated function and

291
00:11:25,420 --> 00:11:29,770
<font color="#E5E5E5">this turns out to actually give you a</font>

292
00:11:26,650 --> 00:11:32,530
significant<font color="#E5E5E5"> boost so it's about you only</font>

293
00:11:29,770 --> 00:11:37,449
get one<font color="#E5E5E5"> person performance overhead in</font>

294
00:11:32,530 --> 00:11:40,720
practice<font color="#CCCCCC"> with some outliers but i love</font>

295
00:11:37,450 --> 00:11:43,750
this for now so<font color="#CCCCCC"> connect can we actually</font>

296
00:11:40,720 --> 00:11:46,930
do better and it turns out that we sort

297
00:11:43,750 --> 00:11:50,350
<font color="#E5E5E5">of can with some caveats that's the</font>

298
00:11:46,930 --> 00:11:52,780
third solution so here the idea is we

299
00:11:50,350 --> 00:11:55,240
leverage the call graph which we know at

300
00:11:52,780 --> 00:11:57,339
compliation time in<font color="#E5E5E5"> order to compute</font><font color="#CCCCCC"> the</font>

301
00:11:55,240 --> 00:12:00,130
maximum stack usage that might ever be

302
00:11:57,340 --> 00:12:02,830
used by this function and once<font color="#E5E5E5"> we know</font>

303
00:12:00,130 --> 00:12:04,900
the maximum sack usage we can just erase

304
00:12:02,830 --> 00:12:08,560
it in the function annotated as being a

305
00:12:04,900 --> 00:12:10,180
sensitive and for the registers we

306
00:12:08,560 --> 00:12:11,920
<font color="#CCCCCC">erased all the registers are written to</font>

307
00:12:10,180 --> 00:12:16,089
in the entire call graph to be

308
00:12:11,920 --> 00:12:17,890
conservative so arguably this this

309
00:12:16,090 --> 00:12:19,210
approach is the best in terms of

310
00:12:17,890 --> 00:12:22,510
performance because we are not

311
00:12:19,210 --> 00:12:24,790
instrumenting any function besides the

312
00:12:22,510 --> 00:12:27,340
sensitive function but it comes<font color="#E5E5E5"> with two</font>

313
00:12:24,790 --> 00:12:28,900
major drawbacks the first is that it

314
00:12:27,340 --> 00:12:30,520
kind of kills the concept of a shared

315
00:12:28,900 --> 00:12:32,829
library because you need<font color="#CCCCCC"> to know a</font>

316
00:12:30,520 --> 00:12:34,510
compilation time in which function what

317
00:12:32,830 --> 00:12:36,190
<font color="#E5E5E5">version of the sanction and actually the</font>

318
00:12:34,510 --> 00:12:38,620
code of<font color="#CCCCCC"> the function that is being</font>

319
00:12:36,190 --> 00:12:40,840
called so this is<font color="#E5E5E5"> better suited for a</font>

320
00:12:38,620 --> 00:12:43,960
statically linked program or embedded

321
00:12:40,840 --> 00:12:45,610
system and second there's a bunch of

322
00:12:43,960 --> 00:12:48,520
features that<font color="#CCCCCC"> we cannot support so</font>

323
00:12:45,610 --> 00:12:50,650
typically recursive functions and more

324
00:12:48,520 --> 00:12:53,710
<font color="#CCCCCC">generally function that creates cycles</font>

325
00:12:50,650 --> 00:12:55,840
in the cool grass and even more

326
00:12:53,710 --> 00:12:59,770
generally<font color="#CCCCCC"> every feature which leads to a</font>

327
00:12:55,840 --> 00:13:01,900
non-deterministic call graph is hard to

328
00:12:59,770 --> 00:13:04,360
is how to support because we can't

329
00:13:01,900 --> 00:13:08,020
<font color="#CCCCCC">determine at compilation time what the</font>

330
00:13:04,360 --> 00:13:11,260
<font color="#E5E5E5">call graph is going to look like so to</font>

331
00:13:08,020 --> 00:13:14,439
conclude so<font color="#E5E5E5"> I presented</font><font color="#CCCCCC"> a new tool which</font>

332
00:13:11,260 --> 00:13:17,230
we hope<font color="#CCCCCC"> people will use and help help</font>

333
00:13:14,440 --> 00:13:19,480
<font color="#E5E5E5">you guys check your code I've presented</font>

334
00:13:17,230 --> 00:13:22,149
a the implementation of

335
00:13:19,480 --> 00:13:23,740
a clanger<font color="#CCCCCC"> llvm plug-in to automatically</font>

336
00:13:22,149 --> 00:13:26,620
raise the stack and<font color="#CCCCCC"> the registers of</font>

337
00:13:23,740 --> 00:13:28,720
sensitive functions so what I'd like to

338
00:13:26,620 --> 00:13:31,300
<font color="#E5E5E5">point out here</font><font color="#CCCCCC"> is that this plug-in is</font>

339
00:13:28,720 --> 00:13:32,980
kind of a hack unfortunately in the

340
00:13:31,300 --> 00:13:34,599
sense that it's really fragile because

341
00:13:32,980 --> 00:13:37,690
of the complexity of platforms and

342
00:13:34,600 --> 00:13:40,480
because<font color="#CCCCCC"> of the number of components that</font>

343
00:13:37,690 --> 00:13:43,540
we need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> consider</font><font color="#E5E5E5"> for the solution to</font>

344
00:13:40,480 --> 00:13:45,519
work reliably so that kind of raises the

345
00:13:43,540 --> 00:13:48,880
question of what is<font color="#CCCCCC"> the best way forward</font>

346
00:13:45,519 --> 00:13:51,130
do we actually need specific ABI for

347
00:13:48,880 --> 00:13:53,260
cryptography do we need what kind of

348
00:13:51,130 --> 00:13:54,670
support doing is from the colonel from

349
00:13:53,260 --> 00:13:56,709
the compiler from the programming

350
00:13:54,670 --> 00:13:58,269
languages and these are the sort of

351
00:13:56,709 --> 00:14:01,199
<font color="#E5E5E5">questions that we ought</font><font color="#CCCCCC"> to think about</font>

352
00:13:58,269 --> 00:14:10,779
if if we want to solve<font color="#E5E5E5"> this problem</font>

353
00:14:01,199 --> 00:14:14,649
thank you so we have<font color="#E5E5E5"> time for Dmitri and</font>

354
00:14:10,779 --> 00:14:16,630
then one more beer hi so I'll try<font color="#E5E5E5"> to</font>

355
00:14:14,649 --> 00:14:20,019
answer the very last question you might

356
00:14:16,630 --> 00:14:22,240
<font color="#CCCCCC">have mentioned that in the c11 language</font>

357
00:14:20,019 --> 00:14:25,089
there is<font color="#E5E5E5"> all the built-in support for</font>

358
00:14:22,240 --> 00:14:27,399
the version of memset it is guaranteed

359
00:14:25,089 --> 00:14:30,360
not to be optimized and all the problem

360
00:14:27,399 --> 00:14:34,449
is that<font color="#E5E5E5"> it's implemented in one of</font>

361
00:14:30,360 --> 00:14:37,300
possibly only<font color="#CCCCCC"> one compiler today is the</font>

362
00:14:34,449 --> 00:14:39,490
mac version<font color="#CCCCCC"> of</font><font color="#E5E5E5"> cylinder I think so what</font>

363
00:14:37,300 --> 00:14:41,529
we could do is to just<font color="#E5E5E5"> press on the</font>

364
00:14:39,490 --> 00:14:44,199
compile of the variables to finally

365
00:14:41,529 --> 00:14:46,360
implement<font color="#E5E5E5"> and XK functions from the CL</font>

366
00:14:44,199 --> 00:14:49,149
<font color="#E5E5E5">Evan and then we'll have the securement</font>

367
00:14:46,360 --> 00:14:52,329
set which is not optimized<font color="#CCCCCC"> to wait yeah</font>

368
00:14:49,149 --> 00:14:54,190
so I agree but memset is not the<font color="#CCCCCC"> only</font>

369
00:14:52,329 --> 00:14:55,810
problem<font color="#E5E5E5"> so it doesn't solve the stack</font>

370
00:14:54,190 --> 00:14:58,029
problem it is in fact<font color="#E5E5E5"> it doesn't solve</font>

371
00:14:55,810 --> 00:15:02,560
the problem<font color="#CCCCCC"> of programmers forgetting to</font>

372
00:14:58,029 --> 00:15:04,600
raise the the the buffer memory so

373
00:15:02,560 --> 00:15:11,829
that's only one side one part<font color="#CCCCCC"> of the</font>

374
00:15:04,600 --> 00:15:15,130
problem really<font color="#E5E5E5"> yeah I worried that</font>

375
00:15:11,829 --> 00:15:17,739
having support from the compiler and the

376
00:15:15,130 --> 00:15:20,139
kernel for this is not enough that there

377
00:15:17,740 --> 00:15:22,149
are probably a lot<font color="#E5E5E5"> of</font><font color="#CCCCCC"> kept a lot</font><font color="#E5E5E5"> of</font>

378
00:15:20,139 --> 00:15:25,000
<font color="#E5E5E5">caches that are not documenting we don't</font>

379
00:15:22,149 --> 00:15:26,860
know about in the in the pin that in the

380
00:15:25,000 --> 00:15:27,830
past from this from the cpu<font color="#CCCCCC"> the memory</font>

381
00:15:26,860 --> 00:15:30,830
through

382
00:15:27,830 --> 00:15:33,170
through the chipset and so forth<font color="#E5E5E5"> are you</font>

383
00:15:30,830 --> 00:15:36,020
aware of any concrete concerns in that

384
00:15:33,170 --> 00:15:38,270
area so as<font color="#E5E5E5"> I said earlier</font><font color="#CCCCCC"> this is a</font>

385
00:15:36,020 --> 00:15:41,000
challenging research topic and I've

386
00:15:38,270 --> 00:15:42,800
really just taken the first step to lay

387
00:15:41,000 --> 00:15:44,560
down<font color="#E5E5E5"> some kind of foundation and I'm</font>

388
00:15:42,800 --> 00:15:46,760
only looking at user space program and

389
00:15:44,560 --> 00:15:49,040
what you're mentioning is something that

390
00:15:46,760 --> 00:15:50,930
I kind<font color="#CCCCCC"> of alluded to in the I think the</font>

391
00:15:49,040 --> 00:15:52,610
second<font color="#E5E5E5"> slide where I said there's an</font>

392
00:15:50,930 --> 00:15:54,500
enormous<font color="#E5E5E5"> amount of code to to be</font>

393
00:15:52,610 --> 00:15:55,670
considered<font color="#E5E5E5"> and basically what you're</font>

394
00:15:54,500 --> 00:15:57,830
saying cannot falls into this category

395
00:15:55,670 --> 00:15:59,120
so so you need a lot<font color="#E5E5E5"> more research to</font>

396
00:15:57,830 --> 00:16:01,250
figure out<font color="#CCCCCC"> the you know what's happening</font>

397
00:15:59,120 --> 00:16:03,140
in the crown<font color="#E5E5E5"> on what's happening maybe</font>

398
00:16:01,250 --> 00:16:05,510
on the bus there's also some caching

399
00:16:03,140 --> 00:16:06,890
being done in the<font color="#E5E5E5"> RAM itself so there's</font>

400
00:16:05,510 --> 00:16:08,810
a<font color="#E5E5E5"> huge amount of code you need to</font>

401
00:16:06,890 --> 00:16:12,319
consider<font color="#E5E5E5"> yes so I don't have I don't</font>

402
00:16:08,810 --> 00:16:15,219
have an answer to this wait let's

403
00:16:12,320 --> 00:16:15,220
pectoral again

