1
00:00:01,639 --> 00:00:08,039
better great hi everyone I'm<font color="#CCCCCC"> Leo raisin</font>

2
00:00:06,810 --> 00:00:10,530
I'm<font color="#E5E5E5"> very excited to tell you about this</font>

3
00:00:08,039 --> 00:00:12,049
<font color="#E5E5E5">work it is hot off the press in the</font>

4
00:00:10,530 --> 00:00:17,130
sense that the code was just released

5
00:00:12,049 --> 00:00:18,210
yesterday so so you are seeing it for

6
00:00:17,130 --> 00:00:19,619
the first time<font color="#E5E5E5"> the</font><font color="#CCCCCC"> paper has been</font><font color="#E5E5E5"> on any</font>

7
00:00:18,210 --> 00:00:23,070
prints a little bit<font color="#E5E5E5"> but the code is just</font>

8
00:00:19,619 --> 00:00:25,259
out so this is joint work with<font color="#CCCCCC"> Dimitri</font>

9
00:00:23,070 --> 00:00:27,439
<font color="#E5E5E5">mishkov alexander chopra noi and Sasha</font>

10
00:00:25,260 --> 00:00:29,250
Ivanov and I'm going to<font color="#E5E5E5"> talk about</font>

11
00:00:27,439 --> 00:00:30,960
authenticated an allegation<font color="#CCCCCC"> Ares</font><font color="#E5E5E5"> I'll</font>

12
00:00:29,250 --> 00:00:32,189
explain what they<font color="#CCCCCC"> are and how we apply</font>

13
00:00:30,960 --> 00:00:35,460
them to crypto currencies I won't

14
00:00:32,189 --> 00:00:37,620
<font color="#E5E5E5">explain what those are</font><font color="#CCCCCC"> okay so here's</font>

15
00:00:35,460 --> 00:00:40,440
our motivation you've got palace who

16
00:00:37,620 --> 00:00:43,160
wants to<font color="#E5E5E5"> pay 14 bitcoins</font><font color="#CCCCCC"> to David</font><font color="#E5E5E5"> and</font>

17
00:00:40,440 --> 00:00:45,410
she writes a transaction about that and

18
00:00:43,160 --> 00:00:48,239
you want to validate a transaction<font color="#E5E5E5"> right</font>

19
00:00:45,410 --> 00:00:49,860
and so part<font color="#E5E5E5"> of the validation is</font>

20
00:00:48,239 --> 00:00:51,029
stateless you look at the<font color="#E5E5E5"> transaction</font>

21
00:00:49,860 --> 00:00:52,500
and<font color="#E5E5E5"> you say ok there's like the</font>

22
00:00:51,030 --> 00:00:54,390
transaction syntax the fields have been

23
00:00:52,500 --> 00:00:55,739
filled in right and and they'll match

24
00:00:54,390 --> 00:00:58,379
and there's a digital signature of

25
00:00:55,739 --> 00:00:59,309
Alice's public key and that<font color="#E5E5E5"> all you can</font>

26
00:00:58,379 --> 00:01:01,108
validate just by looking at the

27
00:00:59,309 --> 00:01:02,489
<font color="#E5E5E5">transaction but then the big piece</font>

28
00:01:01,109 --> 00:01:04,049
that's hard to validate is actually

29
00:01:02,489 --> 00:01:06,450
making sure that Alice<font color="#E5E5E5"> actually has</font>

30
00:01:04,049 --> 00:01:09,240
those 14 bitcoins or more to give<font color="#CCCCCC"> away</font>

31
00:01:06,450 --> 00:01:11,250
that part is stateful and that part<font color="#E5E5E5"> you</font>

32
00:01:09,240 --> 00:01:13,199
have to<font color="#E5E5E5"> know</font><font color="#CCCCCC"> how much else</font><font color="#E5E5E5"> has based on</font>

33
00:01:11,250 --> 00:01:14,580
prior transactions right so<font color="#E5E5E5"> maybe you</font>

34
00:01:13,200 --> 00:01:17,040
know that public key value section has

35
00:01:14,580 --> 00:01:18,119
36 bitcoins and that's good<font color="#CCCCCC"> enough but</font>

36
00:01:17,040 --> 00:01:20,100
of course you're<font color="#E5E5E5"> not just trying to</font>

37
00:01:18,119 --> 00:01:21,450
process transactions for Alice if you're

38
00:01:20,100 --> 00:01:22,830
really trying<font color="#E5E5E5"> to validate transactions</font>

39
00:01:21,450 --> 00:01:27,450
you're going to have to have this key

40
00:01:22,830 --> 00:01:29,039
value store of public keys maps to the

41
00:01:27,450 --> 00:01:30,270
<font color="#E5E5E5">current amounts that they have and</font>

42
00:01:29,040 --> 00:01:32,280
you're<font color="#E5E5E5"> going to have to look things up</font>

43
00:01:30,270 --> 00:01:36,240
in that key value store in order to

44
00:01:32,280 --> 00:01:37,619
validate transactions right and the

45
00:01:36,240 --> 00:01:39,000
problem<font color="#E5E5E5"> with this key value store the</font>

46
00:01:37,619 --> 00:01:41,820
dictionary data structure is that it's

47
00:01:39,000 --> 00:01:43,619
big and it's growing<font color="#E5E5E5"> so maybe today it's</font>

48
00:01:41,820 --> 00:01:45,929
<font color="#E5E5E5">not huge but it's going to grow if we if</font>

49
00:01:43,619 --> 00:01:48,390
this thing is going<font color="#E5E5E5"> to scale today it's</font>

50
00:01:45,930 --> 00:01:52,110
about I want to have gigs in Bitcoin if

51
00:01:48,390 --> 00:01:53,189
you serialize it and you<font color="#E5E5E5"> know things get</font>

52
00:01:52,110 --> 00:01:54,570
worse to get would lock you in so many

53
00:01:53,189 --> 00:01:56,039
<font color="#E5E5E5">assets because then you</font><font color="#CCCCCC"> have to have one</font>

54
00:01:54,570 --> 00:01:58,889
key value store for every asset that

55
00:01:56,040 --> 00:02:01,170
you're dealing with and this becomes a

56
00:01:58,890 --> 00:02:05,640
problem so that's<font color="#E5E5E5"> the problem we're</font>

57
00:02:01,170 --> 00:02:07,140
going<font color="#E5E5E5"> to try</font><font color="#CCCCCC"> to address so the question</font>

58
00:02:05,640 --> 00:02:09,598
is right so you have<font color="#E5E5E5"> this state word you</font>

59
00:02:07,140 --> 00:02:10,649
keep it you have this key value store

60
00:02:09,598 --> 00:02:13,079
where<font color="#CCCCCC"> G key button</font><font color="#E5E5E5"> there's kind of two</font>

61
00:02:10,649 --> 00:02:13,870
answers you keep it on disk and then<font color="#E5E5E5"> you</font>

62
00:02:13,080 --> 00:02:16,120
have slowed valide

63
00:02:13,870 --> 00:02:17,530
shin and that has actually<font color="#E5E5E5"> been used for</font>

64
00:02:16,120 --> 00:02:22,209
denial of service attacks forcing you to

65
00:02:17,530 --> 00:02:23,530
do disc seeks and so you know week

66
00:02:22,209 --> 00:02:25,120
laptop isn't going to be able to do this

67
00:02:23,530 --> 00:02:27,370
and the other answer is<font color="#E5E5E5"> that you keep it</font>

68
00:02:25,120 --> 00:02:29,260
in<font color="#E5E5E5"> RAM because you've bought a lot of</font>

69
00:02:27,370 --> 00:02:32,049
<font color="#E5E5E5">RAM in which case you kind of limiting</font>

70
00:02:29,260 --> 00:02:34,179
you know the<font color="#CCCCCC"> the ability of</font><font color="#E5E5E5"> weak devices</font>

71
00:02:32,049 --> 00:02:35,379
to<font color="#CCCCCC"> validated and you get</font><font color="#E5E5E5"> some more</font>

72
00:02:34,180 --> 00:02:38,129
central centralization of a

73
00:02:35,379 --> 00:02:39,609
<font color="#E5E5E5">cryptocurrency which sort of defeats the</font>

74
00:02:38,129 --> 00:02:41,018
<font color="#E5E5E5">democratization purpose of</font>

75
00:02:39,610 --> 00:02:42,970
cryptocurrencies at least to some

76
00:02:41,019 --> 00:02:46,230
envision it so we'd like<font color="#CCCCCC"> to be able to</font>

77
00:02:42,970 --> 00:02:49,530
enable validation of weak devices right

78
00:02:46,230 --> 00:02:53,200
so the observation that has been made

79
00:02:49,530 --> 00:02:54,640
before us is that you really<font color="#E5E5E5"> don't need</font>

80
00:02:53,200 --> 00:02:58,119
<font color="#CCCCCC">to store this huge data structure right</font>

81
00:02:54,640 --> 00:03:00,040
as a verifier orbit transaction by Alice

82
00:02:58,120 --> 00:03:02,230
you kind of are only interested at the

83
00:03:00,040 --> 00:03:03,879
moment in how much money<font color="#E5E5E5"> Alice has and</font>

84
00:03:02,230 --> 00:03:04,959
the rest of<font color="#E5E5E5"> the stuff yeah it's there</font>

85
00:03:03,879 --> 00:03:08,319
but at the moment you're not interested

86
00:03:04,959 --> 00:03:10,569
in it so you want to proof of<font color="#E5E5E5"> this one</font>

87
00:03:08,319 --> 00:03:12,518
single fact how much Alice has and and

88
00:03:10,569 --> 00:03:14,170
this<font color="#E5E5E5"> idea that's been kind</font><font color="#CCCCCC"> of floating</font>

89
00:03:12,519 --> 00:03:16,000
in various early versions and was<font color="#E5E5E5"> a</font>

90
00:03:14,170 --> 00:03:19,208
crystallized a bit<font color="#E5E5E5"> more precisely by</font>

91
00:03:16,000 --> 00:03:21,480
bill white is<font color="#E5E5E5"> that why don't</font><font color="#CCCCCC"> we actually</font>

92
00:03:19,209 --> 00:03:24,459
use authenticated data structures and

93
00:03:21,480 --> 00:03:25,660
Alice will prove as part of the

94
00:03:24,459 --> 00:03:27,190
transaction that she has the<font color="#E5E5E5"> right</font>

95
00:03:25,660 --> 00:03:28,329
amount<font color="#E5E5E5"> of money or somebody will prove</font>

96
00:03:27,190 --> 00:03:30,760
that Alice has the right amount<font color="#E5E5E5"> of money</font>

97
00:03:28,329 --> 00:03:34,329
right so we will authenticate this key

98
00:03:30,760 --> 00:03:36,790
value store and show that<font color="#CCCCCC"> the value</font>

99
00:03:34,329 --> 00:03:38,109
associated of PKA<font color="#E5E5E5"> is 36 and therefore</font>

100
00:03:36,790 --> 00:03:40,840
you can subtract 14 from<font color="#CCCCCC"> item still</font>

101
00:03:38,109 --> 00:03:44,109
remain positive so goings a little bit

102
00:03:40,840 --> 00:03:46,919
more<font color="#E5E5E5"> detail into how we're going to do</font>

103
00:03:44,109 --> 00:03:49,780
this so imagine that we just put

104
00:03:46,919 --> 00:03:52,449
alphabetically all the public keys at

105
00:03:49,780 --> 00:03:53,769
the<font color="#E5E5E5"> bottom of a tree and rehash things</font>

106
00:03:52,449 --> 00:03:54,819
pairwise and hash things up and hash

107
00:03:53,769 --> 00:03:56,109
things up that's called the miracle tree

108
00:03:54,819 --> 00:03:58,328
in case you haven't<font color="#E5E5E5"> seen this before and</font>

109
00:03:56,109 --> 00:04:02,739
the very root hash of that thing<font color="#E5E5E5"> is the</font>

110
00:03:58,329 --> 00:04:04,629
miracle root and we are going to<font color="#E5E5E5"> imagine</font>

111
00:04:02,739 --> 00:04:07,030
this is a blog header right and we're

112
00:04:04,629 --> 00:04:12,988
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> put that miracle route into the</font>

113
00:04:07,030 --> 00:04:15,069
blog header<font color="#E5E5E5"> ok and then you know if and</font>

114
00:04:12,989 --> 00:04:16,478
and for now assume that this miracle

115
00:04:15,069 --> 00:04:18,010
<font color="#E5E5E5">routes at least</font><font color="#CCCCCC"> can't be</font><font color="#E5E5E5"> trusted i will</font>

116
00:04:16,478 --> 00:04:19,570
explain later why it can be trusted ok

117
00:04:18,010 --> 00:04:20,738
so just live<font color="#CCCCCC"> with that assumption for a</font>

118
00:04:19,570 --> 00:04:23,080
moment assume it's it's a true

119
00:04:20,738 --> 00:04:27,510
indication of who has how much money the

120
00:04:23,080 --> 00:04:27,510
root hash of the<font color="#E5E5E5"> data structure ok</font>

121
00:04:27,550 --> 00:04:32,650
and then right if I want to<font color="#E5E5E5"> prove at the</font>

122
00:04:31,659 --> 00:04:34,569
moment that<font color="#E5E5E5"> I'm verifying the</font>

123
00:04:32,650 --> 00:04:37,239
transaction that I was actually sending

124
00:04:34,569 --> 00:04:38,979
14 bitcoins to David<font color="#CCCCCC"> that Alice really</font>

125
00:04:37,240 --> 00:04:40,419
has that money i'm going to send an

126
00:04:38,979 --> 00:04:41,919
ascending gating<font color="#CCCCCC"> pass it's the stuff</font>

127
00:04:40,419 --> 00:04:43,030
highlighted and how it was supposed<font color="#E5E5E5"> to</font>

128
00:04:41,919 --> 00:04:48,750
<font color="#CCCCCC">be red but I don't</font><font color="#E5E5E5"> know what you see</font>

129
00:04:43,030 --> 00:04:51,068
down there is a kind of red ish ok so

130
00:04:48,750 --> 00:04:53,319
right we're going<font color="#E5E5E5"> to send the miracle</font>

131
00:04:51,069 --> 00:04:55,780
pads which are the hashes of siblings on

132
00:04:53,319 --> 00:04:57,580
the past from<font color="#E5E5E5"> the leaf to to the root of</font>

133
00:04:55,780 --> 00:04:59,229
this miracle tree and then anybody

134
00:04:57,580 --> 00:05:02,948
validating the transaction will<font color="#E5E5E5"> be able</font>

135
00:04:59,229 --> 00:05:05,199
<font color="#E5E5E5">to see that you know that that is indeed</font>

136
00:05:02,949 --> 00:05:06,400
<font color="#E5E5E5">ELISA metaphorical tree and it is fairly</font>

137
00:05:05,199 --> 00:05:07,539
standard nautical stuff there's nothing

138
00:05:06,400 --> 00:05:09,878
you have said yet if you've seemed

139
00:05:07,539 --> 00:05:12,669
Merkel trees before but the<font color="#E5E5E5"> point is</font>

140
00:05:09,879 --> 00:05:14,800
<font color="#CCCCCC">that the lights verifier can check the</font>

141
00:05:12,669 --> 00:05:16,990
entire block of transactions without

142
00:05:14,800 --> 00:05:20,349
storing this huge key value store by

143
00:05:16,990 --> 00:05:22,389
just verifying there's no<font color="#CCCCCC"> pipes and and</font>

144
00:05:20,349 --> 00:05:24,759
sort<font color="#CCCCCC"> of you get the light very far with</font>

145
00:05:22,389 --> 00:05:25,840
full verify security guarantees right so

146
00:05:24,759 --> 00:05:27,460
which transaction will include the

147
00:05:25,840 --> 00:05:29,289
miracle<font color="#E5E5E5"> pass that proves that I always</font>

148
00:05:27,460 --> 00:05:31,330
<font color="#E5E5E5">have the correct amount so if you think</font>

149
00:05:29,289 --> 00:05:32,650
from<font color="#E5E5E5"> the very very fires point of view</font>

150
00:05:31,330 --> 00:05:34,719
the very power gets the blog header

151
00:05:32,650 --> 00:05:36,880
again I'm assuming that the suit hash

152
00:05:34,719 --> 00:05:39,969
can be trusted we'll figure<font color="#E5E5E5"> out why in a</font>

153
00:05:36,880 --> 00:05:42,069
little bit and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> the verifier will</font>

154
00:05:39,969 --> 00:05:43,659
you know take the route hash take the

155
00:05:42,069 --> 00:05:45,520
transactions and the<font color="#E5E5E5"> proofs for each one</font>

156
00:05:43,659 --> 00:05:47,770
do the<font color="#E5E5E5"> miracle verification and output</font>

157
00:05:45,520 --> 00:05:48,849
yes or no and this is<font color="#CCCCCC"> sort of importance</font>

158
00:05:47,770 --> 00:05:51,219
because we're trying to prevent denial

159
00:05:48,849 --> 00:05:52,960
of service attacks because<font color="#E5E5E5"> Merkel paths</font>

160
00:05:51,219 --> 00:05:55,000
are short<font color="#E5E5E5"> they're logarithmic in the</font>

161
00:05:52,960 --> 00:05:56,049
<font color="#E5E5E5">size of the key value store right the</font>

162
00:05:55,000 --> 00:05:57,250
very far<font color="#E5E5E5"> I should be able to do this</font>

163
00:05:56,050 --> 00:05:59,650
quickly and<font color="#E5E5E5"> so the denial of service</font>

164
00:05:57,250 --> 00:06:02,770
<font color="#E5E5E5">stock should not be an issue that's sort</font>

165
00:05:59,650 --> 00:06:04,599
of an important goal right go back<font color="#E5E5E5"> to</font>

166
00:06:02,770 --> 00:06:05,740
the<font color="#E5E5E5"> approval for a moment what happens</font>

167
00:06:04,599 --> 00:06:07,419
to the prove all<font color="#E5E5E5"> right the prover is a</font>

168
00:06:05,740 --> 00:06:09,610
improved<font color="#E5E5E5"> in this case as the minor the</font>

169
00:06:07,419 --> 00:06:13,150
<font color="#E5E5E5">one who's quitting transactions into the</font>

170
00:06:09,610 --> 00:06:16,900
block a transaction is going to modify

171
00:06:13,150 --> 00:06:19,989
values right so if Alice sends 14

172
00:06:16,900 --> 00:06:21,940
bitcoins to<font color="#E5E5E5"> David Alice's 36 will become</font>

173
00:06:19,990 --> 00:06:24,250
22 is it too late in the afternoon to

174
00:06:21,940 --> 00:06:27,009
this<font color="#E5E5E5"> map and then the hash</font><font color="#CCCCCC"> value is up</font>

175
00:06:24,250 --> 00:06:28,300
above will change all the way to the

176
00:06:27,009 --> 00:06:30,099
roots and then of course David will get

177
00:06:28,300 --> 00:06:33,669
this money<font color="#CCCCCC"> and the hash value is up from</font>

178
00:06:30,099 --> 00:06:35,050
David will will change and so write a

179
00:06:33,669 --> 00:06:36,250
bunch of more transactions will come in

180
00:06:35,050 --> 00:06:39,039
and<font color="#E5E5E5"> a bunch of stuff will change and so</font>

181
00:06:36,250 --> 00:06:40,780
there will<font color="#E5E5E5"> be a new route hash and this</font>

182
00:06:39,039 --> 00:06:43,270
is where included in the next block

183
00:06:40,780 --> 00:06:44,500
the<font color="#E5E5E5"> miner who puts the transaction so</font>

184
00:06:43,270 --> 00:06:47,710
the current block will also have to<font color="#E5E5E5"> put</font>

185
00:06:44,500 --> 00:06:52,510
<font color="#CCCCCC">the new route</font><font color="#E5E5E5"> hash and into it the into</font>

186
00:06:47,710 --> 00:06:54,520
the next<font color="#E5E5E5"> pumping and so this is where</font>

187
00:06:52,510 --> 00:06:56,139
things get interesting wear something

188
00:06:54,520 --> 00:06:57,789
you<font color="#E5E5E5"> have to come in the verifier</font>

189
00:06:56,139 --> 00:07:00,280
actually needs to check that<font color="#E5E5E5"> this new</font>

190
00:06:57,790 --> 00:07:03,250
route<font color="#E5E5E5"> hash is correct that is essential</font>

191
00:07:00,280 --> 00:07:06,638
to verifying the chain the next blocks

192
00:07:03,250 --> 00:07:08,080
<font color="#CCCCCC">route hash has to match what would</font>

193
00:07:06,639 --> 00:07:09,310
happen to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> route hash when the</font>

194
00:07:08,080 --> 00:07:11,200
transactions take place otherwise you

195
00:07:09,310 --> 00:07:13,419
don't<font color="#E5E5E5"> actually know</font><font color="#CCCCCC"> that the accounts</font>

196
00:07:11,200 --> 00:07:15,669
data structure is correct maybe the

197
00:07:13,419 --> 00:07:16,900
minor gave herself a ton<font color="#CCCCCC"> of money in the</font>

198
00:07:15,669 --> 00:07:19,390
process and<font color="#E5E5E5"> now has a route hash that</font>

199
00:07:16,900 --> 00:07:22,510
says I have a ton of money right<font color="#E5E5E5"> that's</font>

200
00:07:19,390 --> 00:07:24,280
<font color="#E5E5E5">not good so in addition to doing the</font>

201
00:07:22,510 --> 00:07:25,900
verification that we talked about the

202
00:07:24,280 --> 00:07:28,960
verifier also needs to compute<font color="#CCCCCC"> the new</font>

203
00:07:25,900 --> 00:07:33,280
route hash and match it up and make sure

204
00:07:28,960 --> 00:07:36,370
<font color="#E5E5E5">it's correct and it is really this</font>

205
00:07:33,280 --> 00:07:39,820
process that enables us to go for one

206
00:07:36,370 --> 00:07:41,410
block to<font color="#E5E5E5"> the next this is different from</font>

207
00:07:39,820 --> 00:07:43,479
the Merkel trees you've probably seen

208
00:07:41,410 --> 00:07:46,120
<font color="#E5E5E5">because what we need is we need to</font>

209
00:07:43,479 --> 00:07:48,729
<font color="#E5E5E5">support not only authentication but also</font>

210
00:07:46,120 --> 00:07:50,169
update of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> root hash by the verifier</font>

211
00:07:48,729 --> 00:07:52,539
who does not know the data structure the

212
00:07:50,169 --> 00:07:53,919
verifier doesn't have the Merkel tree of

213
00:07:52,540 --> 00:07:55,060
course the miner has the Merkel tree can

214
00:07:53,919 --> 00:07:57,130
update the root hash because that's

215
00:07:55,060 --> 00:07:58,360
standard binary tree stuff it's the

216
00:07:57,130 --> 00:07:59,440
verifier who doesn't have the whole

217
00:07:58,360 --> 00:08:01,930
thing but still needs to<font color="#E5E5E5"> be able to</font>

218
00:07:59,440 --> 00:08:03,669
recompute the retention and the things

219
00:08:01,930 --> 00:08:05,140
that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> need to support our okay the</font>

220
00:08:03,669 --> 00:08:06,219
easy one is update the value of the key

221
00:08:05,140 --> 00:08:07,180
that's essentially<font color="#E5E5E5"> the same</font><font color="#CCCCCC"> as</font>

222
00:08:06,220 --> 00:08:08,800
authenticating the key because the

223
00:08:07,180 --> 00:08:11,830
authenticating<font color="#E5E5E5"> pass will be enough to</font>

224
00:08:08,800 --> 00:08:14,530
update you know subtract when you

225
00:08:11,830 --> 00:08:16,150
subtract<font color="#CCCCCC"> 4914 that sort of thing the</font>

226
00:08:14,530 --> 00:08:17,950
more interesting thing is that you will

227
00:08:16,150 --> 00:08:19,719
also be inserting new keys because<font color="#E5E5E5"> new</font>

228
00:08:17,950 --> 00:08:22,570
accounts will come online<font color="#E5E5E5"> and you will</font>

229
00:08:19,720 --> 00:08:23,830
also be deleting keys when you get<font color="#E5E5E5"> zero</font>

230
00:08:22,570 --> 00:08:25,030
account let's say you want<font color="#E5E5E5"> to get it</font>

231
00:08:23,830 --> 00:08:26,320
maybe you don't maybe depends on your

232
00:08:25,030 --> 00:08:27,489
application right but you may<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to</font>

233
00:08:26,320 --> 00:08:29,710
get rid of<font color="#CCCCCC"> your balance accounts for</font>

234
00:08:27,490 --> 00:08:31,450
example and in binary trees these

235
00:08:29,710 --> 00:08:33,549
operations are interesting because

236
00:08:31,450 --> 00:08:34,900
insertions and deletions if you want a

237
00:08:33,549 --> 00:08:36,490
good binary tree that doesn't get

238
00:08:34,900 --> 00:08:39,579
unbalanced<font color="#CCCCCC"> right require you to</font>

239
00:08:36,490 --> 00:08:40,839
rebalance the tree which means you have

240
00:08:39,580 --> 00:08:42,099
<font color="#CCCCCC">to look</font><font color="#E5E5E5"> at a bunch of nodes and move</font>

241
00:08:40,839 --> 00:08:43,659
them around and<font color="#E5E5E5"> that</font><font color="#CCCCCC"> requires</font><font color="#E5E5E5"> thinking</font>

242
00:08:42,099 --> 00:08:45,490
<font color="#E5E5E5">about how are you going as a very far</font>

243
00:08:43,659 --> 00:08:48,640
without seeing those nodes how are<font color="#E5E5E5"> you</font>

244
00:08:45,490 --> 00:08:53,080
<font color="#E5E5E5">going to compute</font><font color="#CCCCCC"> the new route</font><font color="#E5E5E5"> hash so</font>

245
00:08:48,640 --> 00:08:54,790
that's where things get interesting but

246
00:08:53,080 --> 00:08:56,350
now<font color="#CCCCCC"> of course if we manage to do</font>

247
00:08:54,790 --> 00:08:58,120
that sort of thing then we can go all

248
00:08:56,350 --> 00:08:59,440
the<font color="#CCCCCC"> way back</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the Genesis block very</font>

249
00:08:58,120 --> 00:09:01,780
<font color="#E5E5E5">far from the beginning and that's how we</font>

250
00:08:59,440 --> 00:09:04,360
<font color="#E5E5E5">really know that</font><font color="#CCCCCC"> this route hash can be</font>

251
00:09:01,780 --> 00:09:05,829
trusted right we go back from the

252
00:09:04,360 --> 00:09:08,380
beginning<font color="#E5E5E5"> and we do this one one step at</font>

253
00:09:05,830 --> 00:09:10,330
a time so what you want to be able to

254
00:09:08,380 --> 00:09:11,800
trust<font color="#E5E5E5"> this accounts data structure that</font>

255
00:09:10,330 --> 00:09:13,930
<font color="#E5E5E5">is now authenticated and whose root</font>

256
00:09:11,800 --> 00:09:16,240
hashes in the block is to be able<font color="#E5E5E5"> to</font>

257
00:09:13,930 --> 00:09:18,459
compute the<font color="#E5E5E5"> next hash when changes take</font>

258
00:09:16,240 --> 00:09:19,930
place we know what the changes are they

259
00:09:18,460 --> 00:09:21,370
are the transactions that are<font color="#E5E5E5"> included</font>

260
00:09:19,930 --> 00:09:22,300
they see realized we know<font color="#CCCCCC"> exactly what</font>

261
00:09:21,370 --> 00:09:24,040
they are but we need to<font color="#E5E5E5"> be able to</font>

262
00:09:22,300 --> 00:09:25,780
perform them without<font color="#CCCCCC"> having the entire</font>

263
00:09:24,040 --> 00:09:27,760
miracle tree we need to be<font color="#E5E5E5"> able to</font>

264
00:09:25,780 --> 00:09:30,270
compute<font color="#E5E5E5"> the new hash without having the</font>

265
00:09:27,760 --> 00:09:35,860
Merkel tree that stores the key values

266
00:09:30,270 --> 00:09:37,329
<font color="#E5E5E5">okay and just</font><font color="#CCCCCC"> to emphasize</font><font color="#E5E5E5"> that this is</font>

267
00:09:35,860 --> 00:09:38,860
not a typical thing you've seen

268
00:09:37,330 --> 00:09:40,960
authenticated in structures before

269
00:09:38,860 --> 00:09:42,460
you've probably seen<font color="#E5E5E5"> dynamic identity</font>

270
00:09:40,960 --> 00:09:44,590
<font color="#E5E5E5">data structures where we change things</font>

271
00:09:42,460 --> 00:09:46,150
all the time in my certificate

272
00:09:44,590 --> 00:09:49,330
transparency and we record<font color="#E5E5E5"> the history</font>

273
00:09:46,150 --> 00:09:51,120
of changes in those systems the verifier

274
00:09:49,330 --> 00:09:54,580
is typically<font color="#CCCCCC"> not checking the new route</font>

275
00:09:51,120 --> 00:09:56,320
the new route is given by by by someone

276
00:09:54,580 --> 00:09:58,720
else here the very far is actually

277
00:09:56,320 --> 00:10:00,220
computing the new route so this model is

278
00:09:58,720 --> 00:10:01,600
<font color="#E5E5E5">called the two-party model we only have</font>

279
00:10:00,220 --> 00:10:03,250
<font color="#CCCCCC">proved earth and very fires in our model</font>

280
00:10:01,600 --> 00:10:04,420
as opposed to the more traditional model

281
00:10:03,250 --> 00:10:06,910
you've probably seen which is the

282
00:10:04,420 --> 00:10:08,050
three-party model the three-party model

283
00:10:06,910 --> 00:10:09,790
because there's a third party who gives

284
00:10:08,050 --> 00:10:11,109
you the new<font color="#CCCCCC"> route we don't</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> that we</font>

285
00:10:09,790 --> 00:10:13,900
have the only provers and verifies

286
00:10:11,110 --> 00:10:15,820
nobody's trusted that doesn't mean we're

287
00:10:13,900 --> 00:10:17,410
the first ones to do this there is prior

288
00:10:15,820 --> 00:10:20,740
work in this<font color="#E5E5E5"> model and actually now</font><font color="#CCCCCC"> I</font>

289
00:10:17,410 --> 00:10:22,480
want<font color="#E5E5E5"> to go over what's been done kind of</font>

290
00:10:20,740 --> 00:10:24,340
all relevant prior works<font color="#E5E5E5"> that's relevant</font>

291
00:10:22,480 --> 00:10:27,040
<font color="#E5E5E5">to</font><font color="#CCCCCC"> our story here is based on myrtle</font>

292
00:10:24,340 --> 00:10:29,020
trees some variants thereof the

293
00:10:27,040 --> 00:10:30,910
difference are the differences are only

294
00:10:29,020 --> 00:10:33,670
in how you structure and rebalance the

295
00:10:30,910 --> 00:10:35,230
underlying tree because binary trees if

296
00:10:33,670 --> 00:10:37,180
you remember your data structures 101

297
00:10:35,230 --> 00:10:39,280
come with different balancing algorithms

298
00:10:37,180 --> 00:10:42,849
and that's where things get different

299
00:10:39,280 --> 00:10:44,740
for them and of<font color="#E5E5E5"> course the better you</font>

300
00:10:42,850 --> 00:10:46,570
balance the binary tree the closer your

301
00:10:44,740 --> 00:10:48,670
leaves are to the root<font color="#E5E5E5"> and the closer</font>

302
00:10:46,570 --> 00:10:51,130
you leave that<font color="#E5E5E5"> to the root the shorter</font>

303
00:10:48,670 --> 00:10:52,479
your proofs are and that's the<font color="#CCCCCC"> only</font>

304
00:10:51,130 --> 00:10:54,550
thing that matters for us is the leg

305
00:10:52,480 --> 00:10:55,780
therefore the proof links so we're<font color="#E5E5E5"> going</font>

306
00:10:54,550 --> 00:10:59,530
to look at prior work in terms of<font color="#CCCCCC"> roof</font>

307
00:10:55,780 --> 00:11:01,540
<font color="#CCCCCC">link the first data structure that that</font>

308
00:10:59,530 --> 00:11:03,250
was explicitly working in the two-party

309
00:11:01,540 --> 00:11:06,339
model is by<font color="#E5E5E5"> Papa month or intimacy ax</font>

310
00:11:03,250 --> 00:11:07,780
from 2007 and it's a skip list skip list

311
00:11:06,340 --> 00:11:08,769
is essentially a variant of binary tree

312
00:11:07,780 --> 00:11:10,449
the way it was implemented

313
00:11:08,769 --> 00:11:12,369
<font color="#E5E5E5">they're so I'm not going to go into what</font>

314
00:11:10,449 --> 00:11:13,809
it<font color="#E5E5E5"> is let's look at this performance and</font>

315
00:11:12,369 --> 00:11:15,759
there are two things<font color="#E5E5E5"> we worry</font><font color="#CCCCCC"> about here</font>

316
00:11:13,809 --> 00:11:17,230
there's the<font color="#E5E5E5"> updating an existing value</font>

317
00:11:15,759 --> 00:11:21,189
which is essentially<font color="#E5E5E5"> just</font><font color="#CCCCCC"> the proof</font><font color="#E5E5E5"> of a</font>

318
00:11:17,230 --> 00:11:22,809
lookup and inserting a new<font color="#E5E5E5"> value and</font>

319
00:11:21,189 --> 00:11:25,779
those proof lengths is what are going to

320
00:11:22,809 --> 00:11:27,819
look<font color="#E5E5E5"> at they're both 1.5 times H times</font>

321
00:11:25,779 --> 00:11:31,179
log n probably a good idea to define

322
00:11:27,819 --> 00:11:32,199
what hm NR n is the number of things in

323
00:11:31,179 --> 00:11:33,819
your key value store the number of

324
00:11:32,199 --> 00:11:35,618
leaves the number from the keys<font color="#CCCCCC"> okay so</font>

325
00:11:33,819 --> 00:11:37,540
<font color="#E5E5E5">that's the number of people</font><font color="#CCCCCC"> in your</font>

326
00:11:35,619 --> 00:11:38,949
system and<font color="#E5E5E5"> H to the length of the hash</font>

327
00:11:37,540 --> 00:11:42,459
because we're giving hash values<font color="#E5E5E5"> after</font>

328
00:11:38,949 --> 00:11:43,868
all the best you can hope for is<font color="#CCCCCC"> h log n</font>

329
00:11:42,459 --> 00:11:46,209
simply because of binary trees are like

330
00:11:43,869 --> 00:11:47,410
<font color="#E5E5E5">that this is 50% worst it's not it's not</font>

331
00:11:46,209 --> 00:11:48,670
bad right it's only six percent worse

332
00:11:47,410 --> 00:11:51,129
than what you<font color="#CCCCCC"> could hope for in the best</font>

333
00:11:48,670 --> 00:11:53,049
best case scenario the problem with this

334
00:11:51,129 --> 00:11:56,170
approach for our purposes that requires

335
00:11:53,049 --> 00:11:58,720
trusted randomness if skip lists are

336
00:11:56,170 --> 00:12:00,759
inherently randomized if randomness is

337
00:11:58,720 --> 00:12:03,899
bad they didn't get an unbalanced tree

338
00:12:00,759 --> 00:12:06,399
and if you get an unbalanced tree then

339
00:12:03,899 --> 00:12:07,809
you get very<font color="#E5E5E5"> long proofs which defeats</font>

340
00:12:06,399 --> 00:12:09,369
the purpose because the verifier can get

341
00:12:07,809 --> 00:12:11,019
an answer so i can get linear length

342
00:12:09,369 --> 00:12:12,879
spruce as opposed to logarithmic that's

343
00:12:11,019 --> 00:12:14,139
bad and we don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> a source of</font>

344
00:12:12,879 --> 00:12:15,220
trusted randomness unless we come up

345
00:12:14,139 --> 00:12:16,689
with<font color="#E5E5E5"> something clever because the</font>

346
00:12:15,220 --> 00:12:18,759
provers who could be interested in

347
00:12:16,689 --> 00:12:19,689
making the very prior to be slow and

348
00:12:18,759 --> 00:12:21,910
approvers are the ones putting the

349
00:12:19,689 --> 00:12:23,740
transactions so that's kind of<font color="#E5E5E5"> the</font>

350
00:12:21,910 --> 00:12:26,049
problem with this approach for us there

351
00:12:23,740 --> 00:12:28,660
is<font color="#CCCCCC"> an approach by miller hacks</font><font color="#E5E5E5"> in miller</font>

352
00:12:26,049 --> 00:12:30,100
hicks<font color="#CCCCCC"> cats and she from 2014 which works</font>

353
00:12:28,660 --> 00:12:31,719
for generic data structures beautiful

354
00:12:30,100 --> 00:12:33,670
paper that concern any data structure

355
00:12:31,720 --> 00:12:35,110
into to party authenticated one the

356
00:12:33,670 --> 00:12:36,939
specific thing they implement his red

357
00:12:35,110 --> 00:12:38,110
black trees with a plus at<font color="#E5E5E5"> the end plus</font>

358
00:12:36,939 --> 00:12:39,279
means all the<font color="#E5E5E5"> things have been pushed to</font>

359
00:12:38,110 --> 00:12:41,980
the leaves<font color="#E5E5E5"> all the relevant stuff is of</font>

360
00:12:39,279 --> 00:12:45,519
the leaves and they achieve h plus<font color="#E5E5E5"> k log</font>

361
00:12:41,980 --> 00:12:47,290
n now what is<font color="#E5E5E5"> k k is the length of the</font>

362
00:12:45,519 --> 00:12:51,100
public key the thing that's at the

363
00:12:47,290 --> 00:12:52,480
bottom<font color="#E5E5E5"> so in our setting</font><font color="#CCCCCC"> it's roughly</font>

364
00:12:51,100 --> 00:12:55,509
about the same as length of a hatch is

365
00:12:52,480 --> 00:12:57,399
256 at least 44 128-bit security and so

366
00:12:55,509 --> 00:13:00,069
essentially have doubled<font color="#CCCCCC"> the optimum</font>

367
00:12:57,399 --> 00:13:02,889
it's a slightly worse then skip lists in

368
00:13:00,069 --> 00:13:04,449
terms of length the reason that is the

369
00:13:02,889 --> 00:13:07,299
case is because<font color="#E5E5E5"> it's generic it works</font>

370
00:13:04,449 --> 00:13:09,248
<font color="#E5E5E5">for any data structure but what is</font>

371
00:13:07,299 --> 00:13:11,860
considerably worse is the insertion<font color="#CCCCCC"> of</font>

372
00:13:09,249 --> 00:13:14,829
new things and it makes<font color="#CCCCCC"> it</font><font color="#E5E5E5"> source by a</font>

373
00:13:11,860 --> 00:13:16,449
factor of<font color="#CCCCCC"> three and</font><font color="#E5E5E5"> that's because of</font>

374
00:13:14,829 --> 00:13:18,008
<font color="#CCCCCC">the</font><font color="#E5E5E5"> red black tree algorithm state they</font>

375
00:13:16,449 --> 00:13:19,508
happen to require a lot more nodes so

376
00:13:18,009 --> 00:13:20,880
the verifier to perform the insertion

377
00:13:19,509 --> 00:13:25,560
needs in all these nodes

378
00:13:20,880 --> 00:13:26,910
and therefore the<font color="#E5E5E5"> proofs get long and</font>

379
00:13:25,560 --> 00:13:28,619
there's a ton of work on three party

380
00:13:26,910 --> 00:13:29,880
solutions going back to<font color="#CCCCCC"> now earn easton</font>

381
00:13:28,620 --> 00:13:32,430
but i'm not going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> go over because</font>

382
00:13:29,880 --> 00:13:33,689
well they don't work for us they don't

383
00:13:32,430 --> 00:13:37,650
<font color="#E5E5E5">allow the verifier to compute</font><font color="#CCCCCC"> the new</font>

384
00:13:33,690 --> 00:13:39,120
route so where do<font color="#E5E5E5"> we come in we tried</font>

385
00:13:37,650 --> 00:13:40,949
very hard to find the correct binary

386
00:13:39,120 --> 00:13:44,310
search trees that will work well for

387
00:13:40,950 --> 00:13:45,810
this problem and we settled on<font color="#CCCCCC"> a VL plus</font>

388
00:13:44,310 --> 00:13:47,579
trees what are they really is they've

389
00:13:45,810 --> 00:13:49,140
been desired they were the<font color="#E5E5E5"> first binary</font>

390
00:13:47,580 --> 00:13:53,040
trees that are balanced by<font color="#CCCCCC"> adults and</font>

391
00:13:49,140 --> 00:13:54,540
<font color="#CCCCCC">Elsie and Landis from 1960s and you</font>

392
00:13:53,040 --> 00:13:57,240
cover them in the operator structures

393
00:13:54,540 --> 00:13:58,589
101 perhaps the nice thing<font color="#CCCCCC"> is that for</font>

394
00:13:57,240 --> 00:14:00,660
both of these operations they give us

395
00:13:58,590 --> 00:14:02,780
exactly<font color="#CCCCCC"> h log n they are optimal there</font>

396
00:14:00,660 --> 00:14:05,180
as well they're as good<font color="#CCCCCC"> as you can do</font>

397
00:14:02,780 --> 00:14:07,410
they don't<font color="#E5E5E5"> require trusted randomness</font>

398
00:14:05,180 --> 00:14:09,510
they don't have this factor of 2 and

399
00:14:07,410 --> 00:14:11,520
factor of three they're<font color="#CCCCCC"> basically the</font>

400
00:14:09,510 --> 00:14:14,160
proofs are what they are the<font color="#E5E5E5"> source of</font>

401
00:14:11,520 --> 00:14:15,750
improvements given the time<font color="#E5E5E5"> I won't</font>

402
00:14:14,160 --> 00:14:20,520
exactly tell you what they are we all

403
00:14:15,750 --> 00:14:21,540
see the cool look in the paper but<font color="#E5E5E5"> I</font>

404
00:14:20,520 --> 00:14:22,680
want<font color="#E5E5E5"> to show you a little bit of</font>

405
00:14:21,540 --> 00:14:28,380
implementation results what do you get

406
00:14:22,680 --> 00:14:30,209
to the VLTs this is the proofs the upper

407
00:14:28,380 --> 00:14:33,990
line on<font color="#E5E5E5"> this axis is the proof length</font>

408
00:14:30,210 --> 00:14:36,510
for the cerium try the lower line is our

409
00:14:33,990 --> 00:14:38,730
proof links on the y-axis is the tree

410
00:14:36,510 --> 00:14:40,140
size on log scale from about a thousand

411
00:14:38,730 --> 00:14:41,460
to about a million<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you can see that</font>

412
00:14:40,140 --> 00:14:43,340
we're three times more efficient than a

413
00:14:41,460 --> 00:14:45,480
theory improves in terms of length and

414
00:14:43,340 --> 00:14:47,940
aphelion does not give you the ability

415
00:14:45,480 --> 00:14:50,760
to compute the<font color="#E5E5E5"> new route while we do</font>

416
00:14:47,940 --> 00:14:51,810
<font color="#CCCCCC">okay so that's one data point we didn't</font>

417
00:14:50,760 --> 00:14:52,830
just compared with the cerium we

418
00:14:51,810 --> 00:14:53,969
implemented a bunch<font color="#E5E5E5"> of other data</font>

419
00:14:52,830 --> 00:14:55,830
structures that one could hope for

420
00:14:53,970 --> 00:14:57,360
treats and skip lists and other things

421
00:14:55,830 --> 00:14:58,860
and you can see that<font color="#CCCCCC"> our line is our</font>

422
00:14:57,360 --> 00:15:00,660
line<font color="#CCCCCC"> is the bottom one it performs</font>

423
00:14:58,860 --> 00:15:03,420
better than all the others the upshot is

424
00:15:00,660 --> 00:15:06,449
if you've got about<font color="#E5E5E5"> a million keys in</font>

425
00:15:03,420 --> 00:15:09,120
your system your proof size is about 765

426
00:15:06,450 --> 00:15:11,280
bites at<font color="#E5E5E5"> high security value 128-bit</font>

427
00:15:09,120 --> 00:15:12,540
security deletion<font color="#CCCCCC"> folks are</font><font color="#E5E5E5"> about 50</font>

428
00:15:11,280 --> 00:15:17,160
bytes longer deletions are a bit harder

429
00:15:12,540 --> 00:15:18,689
but not<font color="#E5E5E5"> much</font><font color="#CCCCCC"> longer and this result also</font>

430
00:15:17,160 --> 00:15:20,189
improves many three-party papers if you

431
00:15:18,690 --> 00:15:21,180
<font color="#E5E5E5">know the cross you all with paper that</font>

432
00:15:20,190 --> 00:15:23,880
does a bunch of three party

433
00:15:21,180 --> 00:15:27,229
authenticated data structures this this

434
00:15:23,880 --> 00:15:29,370
improves it by by a<font color="#E5E5E5"> considerable amount</font>

435
00:15:27,230 --> 00:15:30,600
we have one more improvement and that's

436
00:15:29,370 --> 00:15:33,990
probably<font color="#E5E5E5"> all the time I'll have to tell</font>

437
00:15:30,600 --> 00:15:34,700
you imagine<font color="#CCCCCC"> that we have a bunch of</font>

438
00:15:33,990 --> 00:15:37,220
transactions

439
00:15:34,700 --> 00:15:39,440
<font color="#CCCCCC">lock right they</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to have to</font>

440
00:15:37,220 --> 00:15:40,730
share proofs because they're<font color="#E5E5E5"> going up</font>

441
00:15:39,440 --> 00:15:45,470
the tree you're sharing some hashes we

442
00:15:40,730 --> 00:15:47,360
can actually<font color="#CCCCCC"> improve the result bye bye</font>

443
00:15:45,470 --> 00:15:50,000
bye<font color="#CCCCCC"> say bye</font><font color="#E5E5E5"> combining these groups</font>

444
00:15:47,360 --> 00:15:51,560
together so for example<font color="#E5E5E5"> right what is</font>

445
00:15:50,000 --> 00:15:55,700
the<font color="#E5E5E5"> proof for</font><font color="#CCCCCC"> the value of Alice it's</font>

446
00:15:51,560 --> 00:15:57,979
the red stuff notice<font color="#CCCCCC"> that there is one</font>

447
00:15:55,700 --> 00:16:00,890
hash value at each level of<font color="#CCCCCC"> the tree</font>

448
00:15:57,980 --> 00:16:03,380
<font color="#CCCCCC">right and intuitive leaves what is the</font>

449
00:16:00,890 --> 00:16:05,449
proof<font color="#CCCCCC"> for the</font><font color="#E5E5E5"> for Bob it's the blue</font>

450
00:16:03,380 --> 00:16:07,640
stuff again one hash<font color="#CCCCCC"> rally edition</font><font color="#E5E5E5"> of</font>

451
00:16:05,450 --> 00:16:10,010
the tree but you don't need<font color="#E5E5E5"> to send both</font>

452
00:16:07,640 --> 00:16:12,319
the red and the blue the purple is kind

453
00:16:10,010 --> 00:16:14,660
of coming out purple the purple right

454
00:16:12,320 --> 00:16:17,660
the purple hash we save because we only

455
00:16:14,660 --> 00:16:19,069
found it once it's good for<font color="#CCCCCC"> both at the</font>

456
00:16:17,660 --> 00:16:20,360
next level we save again because it

457
00:16:19,070 --> 00:16:22,580
saves nothing instead of two values

458
00:16:20,360 --> 00:16:24,200
because both the<font color="#E5E5E5"> red what was what was</font>

459
00:16:22,580 --> 00:16:26,450
red in autos blue can now be computed

460
00:16:24,200 --> 00:16:28,970
from the leaves so you save in two ways

461
00:16:26,450 --> 00:16:30,110
by combining these proofs some things

462
00:16:28,970 --> 00:16:32,960
you<font color="#E5E5E5"> just don't need to send some things</font>

463
00:16:30,110 --> 00:16:34,580
you only sent once and as a result of

464
00:16:32,960 --> 00:16:36,710
<font color="#E5E5E5">this compression so what is this graph</font>

465
00:16:34,580 --> 00:16:39,020
showing the black line is no compression

466
00:16:36,710 --> 00:16:40,580
it's a straight line the red line if you

467
00:16:39,020 --> 00:16:42,910
just try<font color="#E5E5E5"> to apply gzip which should be</font>

468
00:16:40,580 --> 00:16:44,600
good at getting repeated values out

469
00:16:42,910 --> 00:16:46,699
because that's sort of what it's

470
00:16:44,600 --> 00:16:48,920
designed for the blue that's the red

471
00:16:46,700 --> 00:16:51,500
line<font color="#CCCCCC"> the blue line is ours what's on the</font>

472
00:16:48,920 --> 00:16:53,620
<font color="#CCCCCC">x-axis is</font><font color="#E5E5E5"> the log of the batch size how</font>

473
00:16:51,500 --> 00:16:56,600
many things are<font color="#E5E5E5"> you putting together</font>

474
00:16:53,620 --> 00:16:58,820
under<font color="#E5E5E5"> y-axis is the proof length per</font>

475
00:16:56,600 --> 00:17:00,020
operation of course so why don't<font color="#E5E5E5"> you</font>

476
00:16:58,820 --> 00:17:01,490
start putting a bunch of things together

477
00:17:00,020 --> 00:17:03,079
let's say you<font color="#E5E5E5"> put two thousand</font>

478
00:17:01,490 --> 00:17:04,250
operations together which is<font color="#E5E5E5"> what you</font>

479
00:17:03,080 --> 00:17:05,660
<font color="#E5E5E5">need for a thousand transactions because</font>

480
00:17:04,250 --> 00:17:08,660
it's two thousand things have changed

481
00:17:05,660 --> 00:17:10,880
right plus 1000 minus s 1000<font color="#CCCCCC"> pluses 2000</font>

482
00:17:08,660 --> 00:17:12,350
operation if that's your batch out of a

483
00:17:10,880 --> 00:17:16,459
million key is you save about a factor

484
00:17:12,349 --> 00:17:18,560
of Q in the in the proof links per

485
00:17:16,459 --> 00:17:21,860
operation so you get about 370 proof

486
00:17:18,560 --> 00:17:23,359
Jenna 70 bite-proof per operation on

487
00:17:21,859 --> 00:17:25,189
your dynamic conjugated data structure

488
00:17:23,359 --> 00:17:28,069
you've got<font color="#E5E5E5"> 2,000 operation together it's</font>

489
00:17:25,190 --> 00:17:31,760
a very nice curve<font color="#E5E5E5"> going down on on log</font>

490
00:17:28,069 --> 00:17:33,740
scale<font color="#E5E5E5"> going down linearly so I think I'm</font>

491
00:17:31,760 --> 00:17:38,660
out<font color="#E5E5E5"> of time to conclude you can actually</font>

492
00:17:33,740 --> 00:17:40,190
<font color="#CCCCCC">go down from you know expensive machines</font>

493
00:17:38,660 --> 00:17:41,360
down to<font color="#CCCCCC"> achieve</font><font color="#E5E5E5"> machines if you allow</font>

494
00:17:40,190 --> 00:17:43,700
yourself use acenta gated data

495
00:17:41,360 --> 00:17:44,770
structures we<font color="#CCCCCC"> have a in the paper</font>

496
00:17:43,700 --> 00:17:48,410
there's more detail of course a

497
00:17:44,770 --> 00:17:51,020
simulation the black line is the

498
00:17:48,410 --> 00:17:54,380
the time per block that you took to

499
00:17:51,020 --> 00:17:56,240
<font color="#CCCCCC">process a block the x-axis is is the</font>

500
00:17:54,380 --> 00:17:57,890
number of locks in your chain the black

501
00:17:56,240 --> 00:17:59,870
line is<font color="#E5E5E5"> what happens when you have to go</font>

502
00:17:57,890 --> 00:18:01,580
to the external<font color="#E5E5E5"> key value storage to</font><font color="#CCCCCC"> the</font>

503
00:17:59,870 --> 00:18:04,790
hard drive<font color="#E5E5E5"> the solid state drive to get</font>

504
00:18:01,580 --> 00:18:07,970
your key value associations and the red

505
00:18:04,790 --> 00:18:09,530
line is is what happens when you do

506
00:18:07,970 --> 00:18:13,760
hashes instead verifying myrtle trees

507
00:18:09,530 --> 00:18:15,530
verifying our proofs the papers are knee

508
00:18:13,760 --> 00:18:17,000
prints there's code its public domain

509
00:18:15,530 --> 00:18:20,629
cc-zero license do with it whatever you

510
00:18:17,000 --> 00:18:22,340
<font color="#E5E5E5">want and it will be incorporated into</font>

511
00:18:20,630 --> 00:18:23,930
the wave platform which is an actual

512
00:18:22,340 --> 00:18:25,740
crypto currency multi token

513
00:18:23,930 --> 00:18:34,799
cryptocurrency thank you

514
00:18:25,740 --> 00:18:34,799
[Applause]

