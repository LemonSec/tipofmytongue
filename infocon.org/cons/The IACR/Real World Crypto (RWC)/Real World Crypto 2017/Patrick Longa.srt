1
00:00:00,000 --> 00:00:07,830
okay thank<font color="#CCCCCC"> you it is my</font><font color="#E5E5E5"> pleasure to be</font>

2
00:00:02,610 --> 00:00:09,780
here and talk about<font color="#E5E5E5"> our</font><font color="#CCCCCC"> work on these</font>

3
00:00:07,830 --> 00:00:14,070
high-performance elliptical that we call

4
00:00:09,780 --> 00:00:17,789
for cube and<font color="#CCCCCC"> without</font><font color="#E5E5E5"> extra focus on the</font>

5
00:00:14,070 --> 00:00:18,900
analysis<font color="#E5E5E5"> of the hyperplane the analysis</font>

6
00:00:17,789 --> 00:00:22,680
<font color="#E5E5E5">of this curve on</font><font color="#CCCCCC"> high-performance</font>

7
00:00:18,900 --> 00:00:25,349
<font color="#E5E5E5">applications or applications such as in</font>

8
00:00:22,680 --> 00:00:28,289
IOT as an artist where you care about

9
00:00:25,350 --> 00:00:31,800
the power or<font color="#E5E5E5"> lower low energy</font>

10
00:00:28,289 --> 00:00:34,620
consumption and and following 12<font color="#E5E5E5"> the</font>

11
00:00:31,800 --> 00:00:37,260
<font color="#E5E5E5">vein that my culinary mentioned used to</font>

12
00:00:34,620 --> 00:00:42,300
highlight our from eccie continue to be

13
00:00:37,260 --> 00:00:46,160
and and we will show a few<font color="#E5E5E5"> written here</font>

14
00:00:42,300 --> 00:00:49,230
in the presentation so but before going

15
00:00:46,160 --> 00:00:52,940
<font color="#CCCCCC">to the main part of a presentation let</font>

16
00:00:49,230 --> 00:00:56,099
me give some context about our work

17
00:00:52,940 --> 00:00:58,890
probably<font color="#E5E5E5"> most of you are aware that was</font>

18
00:00:56,100 --> 00:01:01,829
a kind of<font color="#E5E5E5"> competition to select new</font>

19
00:00:58,890 --> 00:01:05,729
elliptic curve the<font color="#CCCCCC"> IITs finally selected</font>

20
00:01:01,829 --> 00:01:08,250
through the<font color="#CCCCCC"> CFR eq2 elliptic curves I</font>

21
00:01:05,729 --> 00:01:12,830
for a standardization done<font color="#E5E5E5"> bernstein</font>

22
00:01:08,250 --> 00:01:16,970
curve 2 519 and<font color="#E5E5E5"> mike Humber's Goldilocks</font>

23
00:01:12,830 --> 00:01:19,520
curves and there is already an RFC

24
00:01:16,970 --> 00:01:21,900
describing the curve giving the

25
00:01:19,520 --> 00:01:24,720
<font color="#CCCCCC">generation details for the curve and</font>

26
00:01:21,900 --> 00:01:27,869
then focusing on cryptographic skimp

27
00:01:24,720 --> 00:01:33,240
like in in the case of these are as RFC

28
00:01:27,869 --> 00:01:36,658
so here they show how to do the H key

29
00:01:33,240 --> 00:01:40,140
exchange for both course and then

30
00:01:36,659 --> 00:01:43,229
ongoing work is focusing on signal a on

31
00:01:40,140 --> 00:01:49,619
a signature scheme and it specifically

32
00:01:43,229 --> 00:01:54,539
they<font color="#E5E5E5"> help they are targeting ed DFA now</font>

33
00:01:49,619 --> 00:01:55,950
in the CFR<font color="#CCCCCC"> G discussion there was a</font>

34
00:01:54,540 --> 00:01:57,600
focus on what are the kind<font color="#E5E5E5"> of</font>

35
00:01:55,950 --> 00:01:59,070
requirement that should be important at

36
00:01:57,600 --> 00:02:02,369
the moment of selecting the curves and

37
00:01:59,070 --> 00:02:05,008
this is an awkward that I very are taken

38
00:02:02,369 --> 00:02:07,049
from the necessity workshop the real

39
00:02:05,009 --> 00:02:08,399
motivation for working<font color="#E5E5E5"> p4 is the better</font>

40
00:02:07,049 --> 00:02:11,250
performance and side channel resistance

41
00:02:08,399 --> 00:02:13,710
of sneakers developed<font color="#E5E5E5"> by a car</font>

42
00:02:11,250 --> 00:02:18,000
the photographer's of the last<font color="#E5E5E5"> decade so</font>

43
00:02:13,710 --> 00:02:19,710
there<font color="#CCCCCC"> is a there was</font><font color="#E5E5E5"> a real emphasis in</font>

44
00:02:18,000 --> 00:02:21,330
in performance and side channel

45
00:02:19,710 --> 00:02:23,880
resistance at<font color="#CCCCCC"> the moment of selecting</font>

46
00:02:21,330 --> 00:02:25,410
this course and<font color="#E5E5E5"> I can add other</font>

47
00:02:23,880 --> 00:02:27,990
requirements that are<font color="#E5E5E5"> very important at</font>

48
00:02:25,410 --> 00:02:30,959
the moment of the selection<font color="#CCCCCC"> I mentioned</font>

49
00:02:27,990 --> 00:02:33,390
too that I think are relevant the

50
00:02:30,959 --> 00:02:34,830
reheating curve generation and also the

51
00:02:33,390 --> 00:02:38,820
support for existing cryptographic

52
00:02:34,830 --> 00:02:42,930
algorithms such as easy th the femoral

53
00:02:38,820 --> 00:02:47,180
case especially and signature schemes so

54
00:02:42,930 --> 00:02:51,300
giving<font color="#E5E5E5"> these context with this with this</font>

55
00:02:47,180 --> 00:02:53,940
motivation in mind with Costello we kind

56
00:02:51,300 --> 00:02:57,840
of sit down one said<font color="#CCCCCC"> ok how fast we can</font>

57
00:02:53,940 --> 00:03:00,420
<font color="#E5E5E5">go with this is how how we can design a</font>

58
00:02:57,840 --> 00:03:03,570
curve<font color="#CCCCCC"> that is really very fishing at the</font>

59
00:03:00,420 --> 00:03:06,238
same time it's secure<font color="#E5E5E5"> and so we began to</font>

60
00:03:03,570 --> 00:03:09,030
put together the<font color="#CCCCCC"> best of ECC at the</font>

61
00:03:06,239 --> 00:03:13,620
moment<font color="#E5E5E5"> and we call what we came up</font><font color="#CCCCCC"> with</font>

62
00:03:09,030 --> 00:03:18,269
I for cube and that<font color="#E5E5E5"> really takes the</font>

63
00:03:13,620 --> 00:03:21,269
best out of the literature it combines

64
00:03:18,269 --> 00:03:25,080
<font color="#CCCCCC">two optimal in an optimal way to</font>

65
00:03:21,269 --> 00:03:28,410
endomorphisms discussing what that the

66
00:03:25,080 --> 00:03:30,870
gang activity began with the seminal

67
00:03:28,410 --> 00:03:34,320
work by a gallant number imbalance and

68
00:03:30,870 --> 00:03:37,260
continued<font color="#CCCCCC"> until very recently by bangus</font>

69
00:03:34,320 --> 00:03:41,640
<font color="#CCCCCC">miss de lyric and jana krause very</font>

70
00:03:37,260 --> 00:03:43,590
recently we also combine the use of

71
00:03:41,640 --> 00:03:46,260
<font color="#E5E5E5">Edward</font><font color="#CCCCCC"> Theodore formed with the</font><font color="#E5E5E5"> fission</font>

72
00:03:43,590 --> 00:03:49,380
a source coordinates and finally using

73
00:03:46,260 --> 00:03:53,870
the very compact<font color="#CCCCCC"> Mersenne prime 2 to the</font>

74
00:03:49,380 --> 00:03:56,150
1 25 minus<font color="#E5E5E5"> 1 now after</font><font color="#CCCCCC"> assessing and</font>

75
00:03:53,870 --> 00:03:58,590
implementing an efficient day the

76
00:03:56,150 --> 00:04:01,890
security<font color="#CCCCCC"> and performance of the curve we</font>

77
00:03:58,590 --> 00:04:04,650
actually observe that we these discs or

78
00:04:01,890 --> 00:04:06,809
really supported side channel secure

79
00:04:04,650 --> 00:04:09,180
secure implementations as we want it<font color="#E5E5E5"> and</font>

80
00:04:06,810 --> 00:04:13,200
also achieve top performance another

81
00:04:09,180 --> 00:04:16,500
very important requirement another very

82
00:04:13,200 --> 00:04:18,839
<font color="#E5E5E5">a nice feature</font><font color="#CCCCCC"> of this curve</font><font color="#E5E5E5"> is the</font>

83
00:04:16,500 --> 00:04:21,120
<font color="#E5E5E5">uniqueness this is actually</font><font color="#CCCCCC"> there are</font>

84
00:04:18,839 --> 00:04:23,549
only curve at a 100 or close to the

85
00:04:21,120 --> 00:04:25,949
<font color="#E5E5E5">128-bit security level with</font>

86
00:04:23,550 --> 00:04:29,030
the propellers<font color="#CCCCCC"> that are shown above so</font>

87
00:04:25,949 --> 00:04:33,569
this is<font color="#CCCCCC"> Nick give a very special</font>

88
00:04:29,030 --> 00:04:39,090
rigidity let's say<font color="#CCCCCC"> a characteristics to</font>

89
00:04:33,569 --> 00:04:42,509
<font color="#E5E5E5">these to this curve now let's focus for</font>

90
00:04:39,090 --> 00:04:44,818
a moment on the performance<font color="#E5E5E5"> side what</font>

91
00:04:42,509 --> 00:04:47,460
are<font color="#E5E5E5"> we talking about here is we were</font>

92
00:04:44,819 --> 00:04:50,180
analyzing on different kind of platforms

93
00:04:47,460 --> 00:04:53,609
they perform that we could achieve with

94
00:04:50,180 --> 00:04:56,129
<font color="#E5E5E5">4q in this case for example I show</font><font color="#CCCCCC"> the</font>

95
00:04:53,610 --> 00:04:59,159
speeding thousands of cycles to compute

96
00:04:56,129 --> 00:05:00,780
<font color="#E5E5E5">the main standard operation in EDC there</font>

97
00:04:59,159 --> 00:05:02,940
is called variable basic scalar

98
00:05:00,780 --> 00:05:04,799
multiplication and I show<font color="#CCCCCC"> four different</font>

99
00:05:02,940 --> 00:05:06,569
computer classes here the numbers that

100
00:05:04,800 --> 00:05:08,969
<font color="#E5E5E5">we obtained for example at an</font>

101
00:05:06,569 --> 00:05:11,699
intel-based of class and<font color="#E5E5E5"> Miss Martian</font>

102
00:05:08,969 --> 00:05:14,849
class such as an arm cortex a15

103
00:05:11,699 --> 00:05:18,719
processor and a microcontroller class

104
00:05:14,849 --> 00:05:21,330
class like cortex m4 a microcontroller

105
00:05:18,719 --> 00:05:24,419
and you can see compared with crew 250

106
00:05:21,330 --> 00:05:27,840
and 49 we<font color="#E5E5E5"> observe a significant speed</font>

107
00:05:24,419 --> 00:05:33,210
ratio well above two eggs and even close

108
00:05:27,840 --> 00:05:35,400
to<font color="#E5E5E5"> 3x in some cases so when we infer</font>

109
00:05:33,210 --> 00:05:38,370
<font color="#E5E5E5">from</font><font color="#CCCCCC"> certain perspective we can think</font><font color="#E5E5E5"> of</font>

110
00:05:35,400 --> 00:05:42,090
for<font color="#E5E5E5"> Q as the Road Runner of elliptic</font>

111
00:05:38,370 --> 00:05:44,069
curves or something like that so so this

112
00:05:42,090 --> 00:05:48,799
is<font color="#E5E5E5"> in terms of performance and we were</font>

113
00:05:44,069 --> 00:05:54,029
analyzing how the performance looks in

114
00:05:48,800 --> 00:05:58,169
very different platform and so the next

115
00:05:54,029 --> 00:06:00,240
step was well let's look at the c40 was

116
00:05:58,169 --> 00:06:04,099
doing and they obviously focused on

117
00:06:00,240 --> 00:06:07,440
trying to<font color="#E5E5E5"> make the coursework and basic</font>

118
00:06:04,099 --> 00:06:11,190
cryptographic x games specifically<font color="#CCCCCC"> ec d</font>

119
00:06:07,440 --> 00:06:14,310
<font color="#CCCCCC">h and signature skimp and now focus in</font>

120
00:06:11,190 --> 00:06:17,610
the some point of in the presentation on

121
00:06:14,310 --> 00:06:20,400
those first of all let me first give you

122
00:06:17,610 --> 00:06:25,440
some basics about 40<font color="#CCCCCC"> or what it is what</font>

123
00:06:20,400 --> 00:06:27,179
it is specifically and in and this<font color="#E5E5E5"> is a</font>

124
00:06:25,440 --> 00:06:31,710
curve that is a fine by the way on an

125
00:06:27,180 --> 00:06:34,860
quadratic extension field where of where

126
00:06:31,710 --> 00:06:36,719
the la de the characteristic is a large

127
00:06:34,860 --> 00:06:38,130
prime where p is

128
00:06:36,720 --> 00:06:40,230
<font color="#E5E5E5">mercian prime that</font><font color="#CCCCCC"> I mentioned</font><font color="#E5E5E5"> at the</font>

129
00:06:38,130 --> 00:06:46,100
beginning we have these specific

130
00:06:40,230 --> 00:06:48,690
parameters and<font color="#CCCCCC"> the most efficient</font>

131
00:06:46,100 --> 00:06:51,470
representation of<font color="#E5E5E5"> this curve is in the</font>

132
00:06:48,690 --> 00:06:57,090
<font color="#CCCCCC">twisted</font><font color="#E5E5E5"> or form with which is shown</font><font color="#CCCCCC"> here</font>

133
00:06:51,470 --> 00:06:59,040
the cardinality of of the group of the

134
00:06:57,090 --> 00:07:01,679
group of points<font color="#E5E5E5"> on this curve it's</font>

135
00:06:59,040 --> 00:07:06,330
actually<font color="#E5E5E5"> 392 times a very large</font><font color="#CCCCCC"> number</font>

136
00:07:01,680 --> 00:07:08,100
in this case 246 bit<font color="#CCCCCC"> prime and so you</font>

137
00:07:06,330 --> 00:07:11,130
can<font color="#E5E5E5"> see that there is a</font><font color="#CCCCCC"> co-starter that</font>

138
00:07:08,100 --> 00:07:15,300
is let's say relatively large and we

139
00:07:11,130 --> 00:07:18,870
have to deal<font color="#E5E5E5"> with it other important</font>

140
00:07:15,300 --> 00:07:21,360
facts<font color="#E5E5E5"> it supports the fastest addition</font>

141
00:07:18,870 --> 00:07:25,860
loss in elliptic curves that are also

142
00:07:21,360 --> 00:07:27,480
complete that means they are they allow

143
00:07:25,860 --> 00:07:30,000
very secure<font color="#CCCCCC"> side</font><font color="#E5E5E5"> channels with your</font>

144
00:07:27,480 --> 00:07:34,020
implementations and importantly<font color="#CCCCCC"> it comes</font>

145
00:07:30,000 --> 00:07:36,390
equipped with two endomorphisms and just

146
00:07:34,020 --> 00:07:39,659
to give<font color="#CCCCCC"> you a rough idea endomorphism</font>

147
00:07:36,390 --> 00:07:42,539
can be sold as a as a<font color="#E5E5E5"> shortcut when you</font>

148
00:07:39,660 --> 00:07:45,030
compute the scalar multiplication that

149
00:07:42,540 --> 00:07:50,100
maps are point on the curve two other

150
00:07:45,030 --> 00:07:52,919
points with the tail<font color="#CCCCCC"> and in the middle</font>

151
00:07:50,100 --> 00:07:54,720
or a quarter<font color="#CCCCCC"> of the of the of the whole</font>

152
00:07:52,919 --> 00:07:57,140
computation of a scalar multiplication

153
00:07:54,720 --> 00:08:02,010
so it's like<font color="#CCCCCC"> a shortcut to to to obtain</font>

154
00:07:57,140 --> 00:08:07,050
values on<font color="#E5E5E5"> on the curve and save a number</font>

155
00:08:02,010 --> 00:08:09,719
of point operations so this curve has

156
00:08:07,050 --> 00:08:11,510
optimally to endomorphism and so what

157
00:08:09,720 --> 00:08:15,660
you<font color="#E5E5E5"> can do with it is basically</font>

158
00:08:11,510 --> 00:08:18,030
transform your original classical scalar

159
00:08:15,660 --> 00:08:21,360
multiplication in this case at first<font color="#E5E5E5"> as</font>

160
00:08:18,030 --> 00:08:24,929
M times<font color="#E5E5E5"> p2</font><font color="#CCCCCC"> a multiscale multiplication</font>

161
00:08:21,360 --> 00:08:29,010
with these mini scalars a sub 1 to a 2

162
00:08:24,930 --> 00:08:34,589
for now we<font color="#CCCCCC"> described in</font><font color="#E5E5E5"> the main paper</font>

163
00:08:29,010 --> 00:08:37,979
that we are a a publishing<font color="#CCCCCC"> Asia trip</font>

164
00:08:34,589 --> 00:08:41,750
2015 a decomposition method<font color="#CCCCCC"> it's optimal</font>

165
00:08:37,979 --> 00:08:45,690
in the sense that you can input any any

166
00:08:41,750 --> 00:08:49,080
scalar<font color="#CCCCCC"> m that has 256 bits and you</font>

167
00:08:45,690 --> 00:08:53,100
<font color="#CCCCCC">become posed in exactly</font><font color="#E5E5E5"> 4 mini scale</font>

168
00:08:49,080 --> 00:08:56,070
asa by with a maximum size of 64 bit

169
00:08:53,100 --> 00:08:57,720
each so something like like the

170
00:08:56,070 --> 00:09:00,810
following<font color="#CCCCCC"> let's suppose we</font><font color="#E5E5E5"> have a scalar</font>

171
00:08:57,720 --> 00:09:05,300
<font color="#CCCCCC">m and then with the decomposition method</font>

172
00:09:00,810 --> 00:09:09,239
<font color="#E5E5E5">you can obtain this force a mini scalars</font>

173
00:09:05,300 --> 00:09:12,660
which are 64 bits maximum now each of

174
00:09:09,240 --> 00:09:15,690
the minion scalars will be attached to

175
00:09:12,660 --> 00:09:20,969
up either to a debate to the base point

176
00:09:15,690 --> 00:09:24,570
or to a value using the end of a the

177
00:09:20,970 --> 00:09:28,650
endomorphism not by using the

178
00:09:24,570 --> 00:09:30,720
endomorphism so let's take<font color="#E5E5E5"> a look at the</font>

179
00:09:28,650 --> 00:09:33,630
house a scalar multiplication works in

180
00:09:30,720 --> 00:09:35,910
<font color="#E5E5E5">this case before proceeding because we</font>

181
00:09:33,630 --> 00:09:38,280
want to<font color="#E5E5E5"> do it efficiently and in a side</font>

182
00:09:35,910 --> 00:09:40,740
channel resistant<font color="#E5E5E5"> way we have to recall</font>

183
00:09:38,280 --> 00:09:44,010
the mini<font color="#E5E5E5"> scalars so these are the</font><font color="#CCCCCC"> values</font>

184
00:09:40,740 --> 00:09:46,200
taking in binary form from there<font color="#E5E5E5"> from</font>

185
00:09:44,010 --> 00:09:48,569
the previous meaning scalars and we

186
00:09:46,200 --> 00:09:51,450
<font color="#E5E5E5">perform to a steps to convert them to</font>

187
00:09:48,570 --> 00:09:54,920
<font color="#E5E5E5">the representation design representation</font>

188
00:09:51,450 --> 00:09:59,700
below and if you<font color="#E5E5E5"> notice every column now</font>

189
00:09:54,920 --> 00:10:02,520
it's an it's<font color="#E5E5E5"> nonzero because the top the</font>

190
00:09:59,700 --> 00:10:04,290
top rope all of them all the values

191
00:10:02,520 --> 00:10:06,750
available here are now digits that are

192
00:10:04,290 --> 00:10:09,300
either 1 or minus 1 so if you look<font color="#E5E5E5"> at</font>

193
00:10:06,750 --> 00:10:13,500
them from<font color="#CCCCCC"> the accordion perspective you</font>

194
00:10:09,300 --> 00:10:16,160
can construct these these values these

195
00:10:13,500 --> 00:10:18,630
that are from<font color="#E5E5E5"> one to eight and</font>

196
00:10:16,160 --> 00:10:21,089
accompanied by by design in each case

197
00:10:18,630 --> 00:10:24,240
<font color="#CCCCCC">and the sign is determined by the by the</font>

198
00:10:21,090 --> 00:10:27,930
<font color="#CCCCCC">deed sunday on the top row that is the</font>

199
00:10:24,240 --> 00:10:29,880
first mini scalar now using these

200
00:10:27,930 --> 00:10:31,229
representation of the decomposing and

201
00:10:29,880 --> 00:10:33,330
<font color="#E5E5E5">recording you can proceed with the</font>

202
00:10:31,230 --> 00:10:36,930
scalar multiplication what you have<font color="#E5E5E5"> to</font>

203
00:10:33,330 --> 00:10:39,870
do first<font color="#E5E5E5"> is construct a table and with H</font>

204
00:10:36,930 --> 00:10:41,579
values combining<font color="#E5E5E5"> all the possible all</font>

205
00:10:39,870 --> 00:10:44,100
<font color="#E5E5E5">the possible values of the base point</font>

206
00:10:41,580 --> 00:10:47,010
plus the mappings of the using the end

207
00:10:44,100 --> 00:10:49,800
of morphisms the math values using the

208
00:10:47,010 --> 00:10:52,650
endomorphism and each entry will

209
00:10:49,800 --> 00:10:55,140
correspond to so each day it is will

210
00:10:52,650 --> 00:10:56,790
point to an entry in the in the table<font color="#E5E5E5"> so</font>

211
00:10:55,140 --> 00:10:59,670
if you did the computation from left to

212
00:10:56,790 --> 00:11:02,939
right first of all you take this pain

213
00:10:59,670 --> 00:11:07,500
six unloaded and then you proceed to

214
00:11:02,940 --> 00:11:09,690
perform exactly 60 for doubling sedition

215
00:11:07,500 --> 00:11:12,600
operations or subtractions depending on

216
00:11:09,690 --> 00:11:15,330
the sign of course each time doubling

217
00:11:12,600 --> 00:11:17,190
and performing a doubling an additional

218
00:11:15,330 --> 00:11:19,230
subtraction with one valid from the

219
00:11:17,190 --> 00:11:22,530
<font color="#CCCCCC">table</font><font color="#E5E5E5"> and the entries indicated by the</font>

220
00:11:19,230 --> 00:11:24,720
deed of course this is exactly<font color="#E5E5E5"> sixty</font>

221
00:11:22,530 --> 00:11:28,459
four times don't suitable<font color="#CCCCCC"> four times</font>

222
00:11:24,720 --> 00:11:31,380
that<font color="#CCCCCC"> means is a very regular execution I</font>

223
00:11:28,460 --> 00:11:33,030
containing exactly<font color="#E5E5E5"> 64 dublin 64</font>

224
00:11:31,380 --> 00:11:35,910
<font color="#CCCCCC">additions and that's what's in place</font>

225
00:11:33,030 --> 00:11:37,949
protection against timing and simple

226
00:11:35,910 --> 00:11:39,839
such an attack and also the<font color="#E5E5E5"> play will</font>

227
00:11:37,950 --> 00:11:43,290
only contain say points now evilly it

228
00:11:39,840 --> 00:11:45,870
would contain 16 after<font color="#E5E5E5"> recording we can</font>

229
00:11:43,290 --> 00:11:49,230
make<font color="#E5E5E5"> it more efficient only 68 points in</font>

230
00:11:45,870 --> 00:11:52,800
this case<font color="#CCCCCC"> okay so these are let's say</font>

231
00:11:49,230 --> 00:11:55,650
<font color="#CCCCCC">this is a very quick overview about</font><font color="#E5E5E5"> they</font>

232
00:11:52,800 --> 00:11:58,229
they the kind of computation that we

233
00:11:55,650 --> 00:11:59,730
need for the<font color="#E5E5E5"> high speed version of the</font>

234
00:11:58,230 --> 00:12:02,550
scheme of duplication juicing for Q and

235
00:11:59,730 --> 00:12:08,090
now what about doing some basic<font color="#E5E5E5"> stuffs</font>

236
00:12:02,550 --> 00:12:13,260
are in the cryptographic sense we

237
00:12:08,090 --> 00:12:14,970
recently wrote a<font color="#E5E5E5"> internal draft with in</font>

238
00:12:13,260 --> 00:12:18,750
collaboration with Watson<font color="#CCCCCC"> lab and</font>

239
00:12:14,970 --> 00:12:21,060
Richmond Richard<font color="#E5E5E5"> mark and it's</font><font color="#CCCCCC"> available</font>

240
00:12:18,750 --> 00:12:24,390
in<font color="#E5E5E5"> this link that is the title of the</font>

241
00:12:21,060 --> 00:12:27,000
draw this curve for 4q the current

242
00:12:24,390 --> 00:12:29,520
version describes the compressed version

243
00:12:27,000 --> 00:12:31,890
of take of flattery<font color="#CCCCCC"> cdh meaning that the</font>

244
00:12:29,520 --> 00:12:36,569
public apologies are compressed and they

245
00:12:31,890 --> 00:12:38,100
are 32 bytes in total in size inside the

246
00:12:36,570 --> 00:12:39,780
document we describe<font color="#E5E5E5"> the implementation</font>

247
00:12:38,100 --> 00:12:42,060
scalar multiplication the one that<font color="#E5E5E5"> I</font>

248
00:12:39,780 --> 00:12:44,610
described<font color="#E5E5E5"> the high-speed version using</font>

249
00:12:42,060 --> 00:12:47,790
endomorphisms but also we describe an<font color="#E5E5E5"> IE</font>

250
00:12:44,610 --> 00:12:50,760
version without endomorphism that could

251
00:12:47,790 --> 00:12:56,010
be suitable for a memory constraint

252
00:12:50,760 --> 00:12:59,630
application for example now let's look

253
00:12:56,010 --> 00:13:03,420
<font color="#E5E5E5">at very roughly this is a very basic</font>

254
00:12:59,630 --> 00:13:06,500
cock dr.e<font color="#CCCCCC"> cdh but but for completeness</font>

255
00:13:03,420 --> 00:13:10,920
let me go through it very quickly<font color="#CCCCCC"> both</font>

256
00:13:06,500 --> 00:13:12,790
in the case of these this game<font color="#CCCCCC"> youssef</font>

257
00:13:10,920 --> 00:13:17,860
Alice and Bob that wants to communicate

258
00:13:12,790 --> 00:13:19,660
a<font color="#CCCCCC"> established some some some secrets a</font>

259
00:13:17,860 --> 00:13:22,360
and<font color="#CCCCCC"> B and compute the scalar</font>

260
00:13:19,660 --> 00:13:24,730
multiplication with generator and then

261
00:13:22,360 --> 00:13:26,890
they proceeded to to compress the values

262
00:13:24,730 --> 00:13:29,260
that means that if<font color="#CCCCCC"> you have a point on</font>

263
00:13:26,890 --> 00:13:31,569
<font color="#CCCCCC">the curve that contains an XY coordinate</font>

264
00:13:29,260 --> 00:13:35,680
the compressed form is basically<font color="#E5E5E5"> there y</font>

265
00:13:31,570 --> 00:13:37,480
coordinate x up a plaza assigned it that

266
00:13:35,680 --> 00:13:41,050
is the<font color="#E5E5E5"> riff from the front the x</font>

267
00:13:37,480 --> 00:13:43,630
<font color="#E5E5E5">coordinate you pass the</font><font color="#CCCCCC"> volume you have</font>

268
00:13:41,050 --> 00:13:45,520
to decompress it you have to perform<font color="#CCCCCC"> al</font>

269
00:13:43,630 --> 00:13:48,250
<font color="#E5E5E5">validation to make sure that the values</font>

270
00:13:45,520 --> 00:13:52,569
on<font color="#CCCCCC"> the curve now here</font><font color="#E5E5E5"> is a cofactor part</font>

271
00:13:48,250 --> 00:13:56,110
you have to compute a 392 times the

272
00:13:52,570 --> 00:13:58,300
validated value and these values this

273
00:13:56,110 --> 00:14:01,330
computation is that<font color="#E5E5E5"> consists of actually</font>

274
00:13:58,300 --> 00:14:02,829
8mm some two<font color="#CCCCCC"> additions and then we the</font>

275
00:14:01,330 --> 00:14:05,410
final computation to get to the

276
00:14:02,830 --> 00:14:07,810
supposedly<font color="#CCCCCC"> shared secret on the other</font>

277
00:14:05,410 --> 00:14:11,560
<font color="#E5E5E5">side you perform roughly the same</font>

278
00:14:07,810 --> 00:14:15,250
operations and hopefully you<font color="#E5E5E5"> get to the</font>

279
00:14:11,560 --> 00:14:18,369
same share a valium now as I said<font color="#E5E5E5"> they</font>

280
00:14:15,250 --> 00:14:23,290
the these<font color="#CCCCCC"> are compressed public is of 32</font>

281
00:14:18,370 --> 00:14:27,150
bytes long in a and so that that that

282
00:14:23,290 --> 00:14:29,890
that similar for example of code to 5.9

283
00:14:27,150 --> 00:14:32,890
but you can also i proceed with an

284
00:14:29,890 --> 00:14:35,050
uncompressed version where you use 64

285
00:14:32,890 --> 00:14:37,030
bytes and it's a slightly faster and

286
00:14:35,050 --> 00:14:39,449
more power efficient so could be<font color="#E5E5E5"> more</font>

287
00:14:37,030 --> 00:14:41,170
suitable for for certain applications

288
00:14:39,450 --> 00:14:45,010
it's just a straightforward

289
00:14:41,170 --> 00:14:50,349
implementation of co fitori<font color="#CCCCCC"> cdh without</font>

290
00:14:45,010 --> 00:14:52,569
a compression part now the next<font color="#E5E5E5"> part is</font>

291
00:14:50,350 --> 00:14:56,830
that we wanted<font color="#E5E5E5"> to to do something about</font>

292
00:14:52,570 --> 00:14:59,110
<font color="#CCCCCC">signatures so</font><font color="#E5E5E5"> we look at the we came up</font>

293
00:14:56,830 --> 00:15:01,840
with a specification of<font color="#E5E5E5"> high speed high</font>

294
00:14:59,110 --> 00:15:04,000
security signature scheme and we call<font color="#CCCCCC"> it</font>

295
00:15:01,840 --> 00:15:06,880
the shin or<font color="#CCCCCC"> queue which is basically a</font>

296
00:15:04,000 --> 00:15:09,700
snort type signature scheme closely

297
00:15:06,880 --> 00:15:12,100
following the e dds a specification but

298
00:15:09,700 --> 00:15:17,170
in this case using for Q so we apply

299
00:15:12,100 --> 00:15:20,140
some some changes in some some cases as

300
00:15:17,170 --> 00:15:25,240
in the case of EDSA we have two versions

301
00:15:20,140 --> 00:15:27,290
so once you simply touching which is a

302
00:15:25,240 --> 00:15:30,380
efficient to support single<font color="#E5E5E5"> pass</font>

303
00:15:27,290 --> 00:15:34,759
interpret for signing in during signing

304
00:15:30,380 --> 00:15:37,100
you have to load the message twice at

305
00:15:34,759 --> 00:15:39,259
least and that could<font color="#CCCCCC"> be inefficient if</font>

306
00:15:37,100 --> 00:15:42,139
the<font color="#E5E5E5"> message for example is too long so</font>

307
00:15:39,259 --> 00:15:44,209
if you apply<font color="#E5E5E5"> procession that that could</font>

308
00:15:42,139 --> 00:15:47,810
make things<font color="#E5E5E5"> more efficient inserting</font>

309
00:15:44,209 --> 00:15:49,758
<font color="#CCCCCC">searching</font><font color="#E5E5E5"> and scenarios also the the</font>

310
00:15:47,810 --> 00:15:53,449
diversion without pre caching and in

311
00:15:49,759 --> 00:15:55,339
this case there we have the resilience

312
00:15:53,449 --> 00:15:59,000
against hash function collisions of

313
00:15:55,339 --> 00:16:03,589
course a for<font color="#CCCCCC"> this for the version</font>

314
00:15:59,000 --> 00:16:05,540
without the caching now this<font color="#CCCCCC"> is a snow</font>

315
00:16:03,589 --> 00:16:07,430
type signature scheme so you have a late

316
00:16:05,540 --> 00:16:12,139
deterministic generation you don't need

317
00:16:07,430 --> 00:16:16,219
a randomness /<font color="#E5E5E5"> signature for example is</font>

318
00:16:12,139 --> 00:16:20,120
the<font color="#E5E5E5"> case</font><font color="#CCCCCC"> of ecdsa and in as in the</font><font color="#E5E5E5"> case</font>

319
00:16:16,220 --> 00:16:22,519
of<font color="#CCCCCC"> Ed DSA we have a small signatures 64</font>

320
00:16:20,120 --> 00:16:25,190
bytes in size in size and it's more

321
00:16:22,519 --> 00:16:28,120
public keys 32 bytes in size but the

322
00:16:25,190 --> 00:16:31,130
relevant feature here that we have

323
00:16:28,120 --> 00:16:32,240
listed<font color="#E5E5E5"> my knowledge very efficient</font>

324
00:16:31,130 --> 00:16:35,660
probably the fastest<font color="#CCCCCC"> corps base</font>

325
00:16:32,240 --> 00:16:38,600
signature scheme add a 128-bit security

326
00:16:35,660 --> 00:16:40,639
level and to show<font color="#E5E5E5"> you the kind of</font>

327
00:16:38,600 --> 00:16:42,110
<font color="#E5E5E5">performance that we</font><font color="#CCCCCC"> achieved for example</font>

328
00:16:40,639 --> 00:16:44,750
these are numbers for an intel haswell

329
00:16:42,110 --> 00:16:48,230
processor<font color="#E5E5E5"> signing takes thirty nine</font>

330
00:16:44,750 --> 00:16:51,819
thousand cycles<font color="#CCCCCC"> compared against 61,000</font>

331
00:16:48,230 --> 00:16:55,569
cycles<font color="#E5E5E5"> achieved by at 255 19</font>

332
00:16:51,819 --> 00:17:00,740
verification is is even much faster

333
00:16:55,569 --> 00:17:05,859
64,000 cycles compared<font color="#CCCCCC"> to 185 thousand</font>

334
00:17:00,740 --> 00:17:08,839
<font color="#E5E5E5">cycles for ED to</font><font color="#CCCCCC"> 4018 so very high speed</font>

335
00:17:05,859 --> 00:17:12,438
which cuz it can be suitable for for

336
00:17:08,839 --> 00:17:13,908
high performance<font color="#E5E5E5"> application and here is</font>

337
00:17:12,439 --> 00:17:16,010
the link with the specifications<font color="#E5E5E5"> for</font>

338
00:17:13,909 --> 00:17:18,559
those are you of you that are curious

339
00:17:16,010 --> 00:17:24,379
about<font color="#E5E5E5"> the complete details for the</font>

340
00:17:18,559 --> 00:17:27,230
specification<font color="#CCCCCC"> of a snarf you now we are</font>

341
00:17:24,380 --> 00:17:28,700
putting together these schemes and we

342
00:17:27,230 --> 00:17:31,490
implemented them and now we are

343
00:17:28,700 --> 00:17:34,220
preparing the release of version 3.0 of

344
00:17:31,490 --> 00:17:37,130
our library the library that we wrote is

345
00:17:34,220 --> 00:17:38,049
called 4q lip the rainy<font color="#E5E5E5"> day the current</font>

346
00:17:37,130 --> 00:17:40,450
version is 2.0

347
00:17:38,049 --> 00:17:44,019
but we are releasing person a version of

348
00:17:40,450 --> 00:17:46,119
3.0 including consultora<font color="#CCCCCC"> cdh and the</font>

349
00:17:44,019 --> 00:17:48,820
<font color="#CCCCCC">signal</font><font color="#E5E5E5"> to these</font><font color="#CCCCCC"> dull signatures as I</font>

350
00:17:46,119 --> 00:17:51,908
<font color="#E5E5E5">described them</font><font color="#CCCCCC"> for to leave already</font>

351
00:17:48,820 --> 00:17:53,860
includes a bunch of implementations but

352
00:17:51,909 --> 00:17:56,080
the version of three pointer will

353
00:17:53,860 --> 00:17:58,840
include many more and for example<font color="#E5E5E5"> we</font>

354
00:17:56,080 --> 00:18:01,629
have sub portables implementation<font color="#E5E5E5"> Nexus</font>

355
00:17:58,840 --> 00:18:03,908
before<font color="#CCCCCC"> optimized implementation of the</font>

356
00:18:01,629 --> 00:18:06,309
mice implementation for 32-bit platforms

357
00:18:03,909 --> 00:18:09,549
optimized implementation<font color="#E5E5E5"> for arm using</font>

358
00:18:06,309 --> 00:18:12,820
neon and also for sounds 32-bit arm

359
00:18:09,549 --> 00:18:18,429
microcontrollers is such as cortex-m

360
00:18:12,820 --> 00:18:20,529
inform and<font color="#E5E5E5"> although the crypt operations</font>

361
00:18:18,429 --> 00:18:23,529
in in the library are protected against

362
00:18:20,529 --> 00:18:25,480
timing attacks attacks exception attacks

363
00:18:23,529 --> 00:18:29,379
invalid Korver taxonomy and small group

364
00:18:25,480 --> 00:18:33,869
attacks now for the next slide let me

365
00:18:29,379 --> 00:18:37,600
focus on the on the on these on these

366
00:18:33,869 --> 00:18:40,269
implementations we have been doing<font color="#E5E5E5"> some</font>

367
00:18:37,600 --> 00:18:43,379
work on a small devices embedded devices

368
00:18:40,269 --> 00:18:48,090
which is a<font color="#E5E5E5"> beat 16-bit and 32-bit</font>

369
00:18:43,379 --> 00:18:52,799
microcontrollers try to a what kind of

370
00:18:48,090 --> 00:18:55,570
performance<font color="#E5E5E5"> and and and retain and</font>

371
00:18:52,799 --> 00:18:59,379
memory and energy constraints you can

372
00:18:55,570 --> 00:19:02,439
achieve<font color="#E5E5E5"> with with</font><font color="#CCCCCC"> 4q so and this is a</font>

373
00:18:59,379 --> 00:19:05,498
joint work by the way with<font color="#E5E5E5"> cell you give</font>

374
00:19:02,440 --> 00:19:08,109
Andrew Pereira and<font color="#CCCCCC"> wash em co we</font>

375
00:19:05,499 --> 00:19:12,159
basically ported and specialized<font color="#CCCCCC"> the</font>

376
00:19:08,109 --> 00:19:14,799
library to various microcontrollers here

377
00:19:12,159 --> 00:19:16,090
to show you a very quick summary<font color="#E5E5E5"> of the</font>

378
00:19:14,799 --> 00:19:18,070
kind of performance<font color="#E5E5E5"> that we are</font>

379
00:19:16,090 --> 00:19:21,730
achieving this is these are preliminary

380
00:19:18,070 --> 00:19:23,850
results<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> showing for an abjad are at</font>

381
00:19:21,730 --> 00:19:27,100
made a microcontroller and also for a

382
00:19:23,850 --> 00:19:30,668
cortex m4 you can see comparing against

383
00:19:27,100 --> 00:19:34,330
cool 2 plus<font color="#E5E5E5"> 1 19 significant arguing and</font>

384
00:19:30,669 --> 00:19:39,700
significant in speed up in comparison

385
00:19:34,330 --> 00:19:41,769
with that with with<font color="#CCCCCC"> that a curve and</font><font color="#E5E5E5"> I</font>

386
00:19:39,700 --> 00:19:46,070
think we can still go further in the

387
00:19:41,769 --> 00:19:50,780
case of a br I think this<font color="#E5E5E5"> is still</font>

388
00:19:46,070 --> 00:19:53,270
lower bound so now let's<font color="#E5E5E5"> focus on the</font>

389
00:19:50,780 --> 00:19:55,820
<font color="#E5E5E5">AVR implementation we want to assess how</font>

390
00:19:53,270 --> 00:19:57,470
how much efficient also in<font color="#CCCCCC"> turn not</font><font color="#E5E5E5"> only</font>

391
00:19:55,820 --> 00:19:59,840
in<font color="#CCCCCC"> terms of performance but also in</font>

392
00:19:57,470 --> 00:20:01,970
terms of energy consumption with which

393
00:19:59,840 --> 00:20:05,870
can be relevant for IOT applications

394
00:20:01,970 --> 00:20:08,480
that care a lot about latency let's say

395
00:20:05,870 --> 00:20:12,820
a latency response but also energy

396
00:20:08,480 --> 00:20:14,600
consumption and he'll I customer

397
00:20:12,820 --> 00:20:16,939
preliminary<font color="#E5E5E5"> results showing the</font>

398
00:20:14,600 --> 00:20:20,360
computation in<font color="#E5E5E5"> seconds for example for a</font>

399
00:20:16,940 --> 00:20:23,720
bit AVR microcontrollers for crypto

400
00:20:20,360 --> 00:20:28,040
operations so<font color="#E5E5E5"> I'm showing here for ec th</font>

401
00:20:23,720 --> 00:20:31,670
and also for a<font color="#E5E5E5"> signatures comparing here</font>

402
00:20:28,040 --> 00:20:35,920
the numbers are for NIST be 256 which is

403
00:20:31,670 --> 00:20:42,860
shown<font color="#CCCCCC"> in green cool to fly over 9 and ed</font>

404
00:20:35,920 --> 00:20:46,250
2019 for in<font color="#E5E5E5"> grey and for qh North you in</font>

405
00:20:42,860 --> 00:20:49,250
in bloom and you can see in each case we

406
00:20:46,250 --> 00:20:52,760
achieve a much better performance<font color="#E5E5E5"> these</font>

407
00:20:49,250 --> 00:20:55,820
are in terms of<font color="#CCCCCC"> seconds in terms of</font>

408
00:20:52,760 --> 00:20:59,600
seconds on on<font color="#E5E5E5"> DC</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> bit AVR</font>

409
00:20:55,820 --> 00:21:02,230
microcontroller a these are more<font color="#CCCCCC"> details</font>

410
00:20:59,600 --> 00:21:04,879
about improvisation that are compared a

411
00:21:02,230 --> 00:21:06,800
basically a one thing that I want to

412
00:21:04,880 --> 00:21:11,420
<font color="#CCCCCC">point out is that for examples you can</font>

413
00:21:06,800 --> 00:21:13,850
see here a very very huge speed up in in

414
00:21:11,420 --> 00:21:17,210
the case of<font color="#E5E5E5"> tea generation that that's</font>

415
00:21:13,850 --> 00:21:19,639
because the state of they are<font color="#E5E5E5"> in do</font>

416
00:21:17,210 --> 00:21:22,190
entation so of<font color="#E5E5E5"> this other course don't</font>

417
00:21:19,640 --> 00:21:25,190
contain don't support fixed<font color="#E5E5E5"> basis scalar</font>

418
00:21:22,190 --> 00:21:26,690
multiplication so that that shows how

419
00:21:25,190 --> 00:21:32,410
much improvement you<font color="#CCCCCC"> can get if you</font>

420
00:21:26,690 --> 00:21:35,720
exploit<font color="#CCCCCC"> precomputed tables as we do and</font>

421
00:21:32,410 --> 00:21:39,920
envy general these this also shows house

422
00:21:35,720 --> 00:21:41,900
for<font color="#CCCCCC"> Q is</font><font color="#E5E5E5"> the only</font><font color="#CCCCCC"> option that computes</font>

423
00:21:39,920 --> 00:21:45,230
most of the stuff<font color="#CCCCCC"> in less than one</font>

424
00:21:41,900 --> 00:21:49,190
second and that kind of latency can be

425
00:21:45,230 --> 00:21:50,990
important<font color="#E5E5E5"> in some applications a so you</font>

426
00:21:49,190 --> 00:21:53,210
can see only here in verification is a

427
00:21:50,990 --> 00:21:56,150
slightly above but all other cases is

428
00:21:53,210 --> 00:21:58,590
below one second that can be an

429
00:21:56,150 --> 00:22:01,529
important factor

430
00:21:58,590 --> 00:22:04,678
<font color="#E5E5E5">in certain applications now let's look</font>

431
00:22:01,529 --> 00:22:09,570
at more closely to<font color="#E5E5E5"> the case of e</font><font color="#CCCCCC"> cdh</font>

432
00:22:04,679 --> 00:22:14,730
static<font color="#E5E5E5"> ec d h and a similarly</font><font color="#CCCCCC"> cdh again</font>

433
00:22:09,570 --> 00:22:20,370
nice be 256 results in green cool<font color="#E5E5E5"> 2019</font>

434
00:22:14,730 --> 00:22:23,250
in gray and for Q in in blue by the way

435
00:22:20,370 --> 00:22:25,229
the C means compress public keys and

436
00:22:23,250 --> 00:22:28,169
they you is the uncompressed<font color="#E5E5E5"> version</font>

437
00:22:25,230 --> 00:22:31,230
that I described in previous life again

438
00:22:28,169 --> 00:22:34,710
you can<font color="#CCCCCC"> see</font><font color="#E5E5E5"> the performance differences</font>

439
00:22:31,230 --> 00:22:38,909
are estimated energy consumption

440
00:22:34,710 --> 00:22:40,649
millijoules for on the AVR and these

441
00:22:38,909 --> 00:22:42,929
<font color="#CCCCCC">analyses corresponds to a wireless</font>

442
00:22:40,649 --> 00:22:46,549
sensor nodes that are popular wireless

443
00:22:42,929 --> 00:22:49,980
and for note that is called<font color="#E5E5E5"> mcafee at</font>

444
00:22:46,549 --> 00:22:52,740
7.37 megahertz so again you can<font color="#CCCCCC"> see that</font>

445
00:22:49,980 --> 00:22:57,029
<font color="#CCCCCC">the significant improvements in terms of</font>

446
00:22:52,740 --> 00:23:00,750
<font color="#CCCCCC">a energy significantly notorious in a</font>

447
00:22:57,029 --> 00:23:04,500
few<font color="#E5E5E5"> merle</font><font color="#CCCCCC"> ec d</font><font color="#E5E5E5"> h and that again it's</font>

448
00:23:00,750 --> 00:23:07,289
because most implementations of let's

449
00:23:04,500 --> 00:23:11,490
say cool 25 / 19 don't exploit pre

450
00:23:07,289 --> 00:23:13,770
computations for ec d h so for truly

451
00:23:11,490 --> 00:23:18,210
ephemeral computations our library

452
00:23:13,770 --> 00:23:20,668
<font color="#CCCCCC">performance much better and that could</font>

453
00:23:18,210 --> 00:23:27,299
be important for for us again for low

454
00:23:20,669 --> 00:23:30,029
energy applications now our

455
00:23:27,299 --> 00:23:34,049
implementation as<font color="#E5E5E5"> i'm showing a prior</font>

456
00:23:30,029 --> 00:23:39,240
prioritize<font color="#CCCCCC"> ur prioritizes speed and also</font>

457
00:23:34,049 --> 00:23:42,270
a low power consumption so there<font color="#CCCCCC"> is a</font>

458
00:23:39,240 --> 00:23:44,399
trade-off<font color="#CCCCCC"> of course we have higher</font>

459
00:23:42,270 --> 00:23:47,100
memory consumption and this is shown in

460
00:23:44,399 --> 00:23:48,629
<font color="#E5E5E5">the as an example here where variable</font>

461
00:23:47,100 --> 00:23:51,379
basic scalar multiplication requires

462
00:23:48,630 --> 00:23:54,080
almost twice the memory size for code

463
00:23:51,380 --> 00:23:56,640
compared<font color="#CCCCCC"> with the quarter part 119</font>

464
00:23:54,080 --> 00:23:59,158
implementation so depending<font color="#E5E5E5"> on the</font>

465
00:23:56,640 --> 00:24:02,250
application you can you can balance or

466
00:23:59,159 --> 00:24:04,559
decide on what is<font color="#E5E5E5"> best in the case of it</font>

467
00:24:02,250 --> 00:24:07,380
indicates that speed latency is

468
00:24:04,559 --> 00:24:08,440
important or low energies is more

469
00:24:07,380 --> 00:24:11,830
important than

470
00:24:08,440 --> 00:24:15,580
I<font color="#E5E5E5"> 4q if it's an edge a very important</font>

471
00:24:11,830 --> 00:24:17,350
edge but but<font color="#E5E5E5"> you have to balance</font>

472
00:24:15,580 --> 00:24:21,370
depending on the application on the

473
00:24:17,350 --> 00:24:24,520
<font color="#CCCCCC">other hand a for Q</font><font color="#E5E5E5"> is a very rich it</font>

474
00:24:21,370 --> 00:24:26,770
contains<font color="#E5E5E5"> their recharge medic so really</font>

475
00:24:24,520 --> 00:24:28,990
if your<font color="#E5E5E5"> project it's for your project is</font>

476
00:24:26,770 --> 00:24:31,389
more important memory consumption then

477
00:24:28,990 --> 00:24:34,990
you can even implement<font color="#CCCCCC"> for Q using a</font>

478
00:24:31,390 --> 00:24:37,240
Montgomery<font color="#E5E5E5"> ladder as core 2 519 and have</font>

479
00:24:34,990 --> 00:24:39,040
a very constrained implementation and

480
00:24:37,240 --> 00:24:41,230
still<font color="#CCCCCC"> this faster and more power</font>

481
00:24:39,040 --> 00:24:43,330
efficient so that's another advantage of

482
00:24:41,230 --> 00:24:48,190
4q the kind<font color="#E5E5E5"> of flexibility that you can</font>

483
00:24:43,330 --> 00:24:51,520
get out of<font color="#E5E5E5"> it now let me finish this</font>

484
00:24:48,190 --> 00:24:53,620
presentation but showing our work in

485
00:24:51,520 --> 00:24:56,290
progress we are<font color="#E5E5E5"> working on plugging in</font>

486
00:24:53,620 --> 00:24:59,290
4q into<font color="#CCCCCC"> open SSL and</font><font color="#E5E5E5"> this is showing</font>

487
00:24:56,290 --> 00:25:02,170
work with<font color="#CCCCCC"> brown bob bromley and Nicola</font>

488
00:24:59,290 --> 00:25:05,409
too very we have been working<font color="#E5E5E5"> on this</font>

489
00:25:02,170 --> 00:25:07,720
integration working with the current

490
00:25:05,410 --> 00:25:09,820
<font color="#CCCCCC">version of</font><font color="#E5E5E5"> 4q lip actually that</font>

491
00:25:07,720 --> 00:25:13,050
integration is complete version 2.0

492
00:25:09,820 --> 00:25:16,000
works with version 1.1<font color="#CCCCCC"> point zero</font>

493
00:25:13,050 --> 00:25:19,149
openssl so there is<font color="#CCCCCC"> a wide support of</font>

494
00:25:16,000 --> 00:25:22,810
any ECT protocol that is<font color="#E5E5E5"> out there come</font>

495
00:25:19,150 --> 00:25:28,500
right away<font color="#CCCCCC"> just for Q and we will be</font>

496
00:25:22,810 --> 00:25:32,320
releasing a touch of<font color="#CCCCCC"> for openssl assume</font>

497
00:25:28,500 --> 00:25:34,540
now one downside<font color="#E5E5E5"> of that approach of</font>

498
00:25:32,320 --> 00:25:36,700
supporting all the protocols available

499
00:25:34,540 --> 00:25:39,879
is that we can we have to use some of

500
00:25:36,700 --> 00:25:42,970
<font color="#CCCCCC">the is low parts of open itself and in</font>

501
00:25:39,880 --> 00:25:44,950
particular it hurts to use some of<font color="#CCCCCC"> the</font>

502
00:25:42,970 --> 00:25:48,460
multi partition operations as I will

503
00:25:44,950 --> 00:25:51,460
<font color="#CCCCCC">show in the</font><font color="#E5E5E5"> in the last two slides now</font>

504
00:25:48,460 --> 00:25:54,100
we have more work in progress to<font color="#E5E5E5"> address</font>

505
00:25:51,460 --> 00:25:58,090
<font color="#CCCCCC">these performance issues because we plan</font>

506
00:25:54,100 --> 00:26:00,969
to have an additional option using an

507
00:25:58,090 --> 00:26:02,770
external energy into to provide for<font color="#E5E5E5"> Q</font>

508
00:26:00,970 --> 00:26:04,720
that should solve most of the

509
00:26:02,770 --> 00:26:08,530
performance degradation issues and also

510
00:26:04,720 --> 00:26:11,560
we<font color="#E5E5E5"> are integrating</font><font color="#CCCCCC"> national q4 for</font>

511
00:26:08,530 --> 00:26:15,310
signatures let me show you the

512
00:26:11,560 --> 00:26:18,310
preliminary results in openssl in this

513
00:26:15,310 --> 00:26:19,810
case on a 64-bit in the skylake

514
00:26:18,310 --> 00:26:21,639
processor to show the kind of

515
00:26:19,810 --> 00:26:26,049
performance<font color="#E5E5E5"> that we at</font>

516
00:26:21,639 --> 00:26:28,299
when we<font color="#CCCCCC"> compare against nice be</font><font color="#E5E5E5"> 256 and</font>

517
00:26:26,049 --> 00:26:31,599
<font color="#CCCCCC">core</font><font color="#E5E5E5"> two fascinating against the 4q</font>

518
00:26:28,299 --> 00:26:35,799
implementation here we show the cases<font color="#CCCCCC"> of</font>

519
00:26:31,599 --> 00:26:38,019
static<font color="#E5E5E5"> ecd</font><font color="#CCCCCC"> H and also ecdsa not for the</font>

520
00:26:35,799 --> 00:26:42,999
case is the signal for the case of<font color="#E5E5E5"> code</font>

521
00:26:38,019 --> 00:26:46,529
2019 as far as i know this curve is less

522
00:26:42,999 --> 00:26:49,839
than being plug into ecdsa so i can show

523
00:26:46,529 --> 00:26:54,039
numbers for that in any case you can<font color="#E5E5E5"> see</font>

524
00:26:49,839 --> 00:26:58,599
up when you compare the performance of

525
00:26:54,039 --> 00:27:00,700
4q against the numbers of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> other two</font>

526
00:26:58,599 --> 00:27:02,950
curve there is a significant<font color="#CCCCCC"> improving</font>

527
00:27:00,700 --> 00:27:06,940
in the operations per second that are

528
00:27:02,950 --> 00:27:09,820
here<font color="#E5E5E5"> especially here the green value</font>

529
00:27:06,940 --> 00:27:11,289
that corresponds to e<font color="#CCCCCC"> cdh there's also a</font>

530
00:27:09,820 --> 00:27:14,379
significant speed up in the case of

531
00:27:11,289 --> 00:27:16,779
ecdsa verification and now we don't

532
00:27:14,379 --> 00:27:18,699
<font color="#E5E5E5">observe that much of a speed up in the</font>

533
00:27:16,779 --> 00:27:22,599
case of signing and that is related to

534
00:27:18,700 --> 00:27:24,579
the openssl performance issues and that

535
00:27:22,599 --> 00:27:26,739
will be obvious in the next

536
00:27:24,579 --> 00:27:29,769
implementation now<font color="#CCCCCC"> I have a comment here</font>

537
00:27:26,739 --> 00:27:31,659
the at least it did the implementing

538
00:27:29,769 --> 00:27:35,320
that we tested of<font color="#E5E5E5"> core two fascinating</font>

539
00:27:31,659 --> 00:27:37,779
<font color="#E5E5E5">in opensuse was kind of slow Nicola</font><font color="#CCCCCC"> two</font>

540
00:27:35,320 --> 00:27:40,839
very actually<font color="#E5E5E5"> plugging a new engine for</font>

541
00:27:37,779 --> 00:27:45,549
that curve I based on<font color="#CCCCCC"> one and 360 for</font>

542
00:27:40,839 --> 00:27:49,958
and that perform much better now here is

543
00:27:45,549 --> 00:27:53,679
a<font color="#E5E5E5"> breakout of of the timings on the same</font>

544
00:27:49,959 --> 00:27:59,229
skylake processor now focus<font color="#E5E5E5"> on p 256 and</font>

545
00:27:53,679 --> 00:28:00,999
for q4 ecdsa and<font color="#E5E5E5"> e cdh and here is to</font>

546
00:27:59,229 --> 00:28:03,099
show what are the kind<font color="#E5E5E5"> of operations</font>

547
00:28:00,999 --> 00:28:05,679
that are causing performance issues and

548
00:28:03,099 --> 00:28:08,079
as you can see the numbers in blue that

549
00:28:05,679 --> 00:28:10,329
corresponds to the scalar multiplication

550
00:28:08,079 --> 00:28:13,389
pretty much<font color="#E5E5E5"> makes sense in every case</font>

551
00:28:10,329 --> 00:28:17,440
you<font color="#CCCCCC"> see that for Q is much much faster</font>

552
00:28:13,389 --> 00:28:19,988
as it should be but you can see these

553
00:28:17,440 --> 00:28:22,269
<font color="#E5E5E5">this blocks in pink and orange they are</font>

554
00:28:19,989 --> 00:28:25,029
<font color="#E5E5E5">pretty expensive and those corresponds</font>

555
00:28:22,269 --> 00:28:26,769
<font color="#E5E5E5">to actually</font><font color="#CCCCCC"> two modular inversions and</font>

556
00:28:25,029 --> 00:28:29,799
what all the inversion shouldn't be that

557
00:28:26,769 --> 00:28:32,709
expensive but in openssl they are so

558
00:28:29,799 --> 00:28:33,650
when we use their functions we really

559
00:28:32,709 --> 00:28:36,530
get a hit

560
00:28:33,650 --> 00:28:38,990
here and so that's<font color="#E5E5E5"> one of the issues</font>

561
00:28:36,530 --> 00:28:41,720
that we<font color="#CCCCCC"> are solving with using the</font>

562
00:28:38,990 --> 00:28:44,690
external engine and using<font color="#E5E5E5"> our</font><font color="#CCCCCC"> own file</font>

563
00:28:41,720 --> 00:28:46,940
functions so we should<font color="#E5E5E5"> we will see</font>

564
00:28:44,690 --> 00:28:50,030
pretty soon you know most<font color="#E5E5E5"> of the costs</font>

565
00:28:46,940 --> 00:28:54,200
<font color="#E5E5E5">overhead in 4q going away and getting a</font>

566
00:28:50,030 --> 00:28:57,830
much better ratio in the<font color="#CCCCCC"> improvement so</font>

567
00:28:54,200 --> 00:28:59,870
with this<font color="#E5E5E5"> on finishing if anybody's</font>

568
00:28:57,830 --> 00:29:02,480
interested in getting more additional

569
00:28:59,870 --> 00:29:05,030
<font color="#CCCCCC">information about our project related to</font>

570
00:29:02,480 --> 00:29:09,170
fork you there is the paper out there

571
00:29:05,030 --> 00:29:11,510
<font color="#CCCCCC">the link to</font><font color="#E5E5E5"> the library the RFC draft</font>

572
00:29:09,170 --> 00:29:15,290
there is a reference implementation<font color="#E5E5E5"> in</font>

573
00:29:11,510 --> 00:29:19,430
python that comes<font color="#E5E5E5"> together with ars to</font>

574
00:29:15,290 --> 00:29:23,330
draft a post in github a snork you and

575
00:29:19,430 --> 00:29:27,860
so on and all the stuff that is coming

576
00:29:23,330 --> 00:29:30,020
<font color="#E5E5E5">soon and and will be released if</font><font color="#CCCCCC"> you</font>

577
00:29:27,860 --> 00:29:32,389
went out if the participant of this

578
00:29:30,020 --> 00:29:35,270
break you can do a lot of stuff there

579
00:29:32,390 --> 00:29:39,920
are a bunch of stuff<font color="#CCCCCC"> that</font><font color="#E5E5E5"> can be done so</font>

580
00:29:35,270 --> 00:29:42,860
talk<font color="#CCCCCC"> to us send us</font><font color="#E5E5E5"> an email and and and</font>

581
00:29:39,920 --> 00:29:44,950
that's all that<font color="#E5E5E5"> I wanted</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> say thank</font>

582
00:29:42,860 --> 00:29:44,949
<font color="#CCCCCC">you</font>

583
00:29:49,970 --> 00:29:55,320
make sure you're<font color="#CCCCCC"> talking so early on you</font>

584
00:29:52,500 --> 00:29:57,750
showed the the trick with the

585
00:29:55,320 --> 00:30:01,260
endomorphism then you had that table of

586
00:29:57,750 --> 00:30:04,050
eight<font color="#CCCCCC"> precomputed point so how did you</font>

587
00:30:01,260 --> 00:30:08,520
protect that table of eight against<font color="#CCCCCC"> the</font>

588
00:30:04,050 --> 00:30:10,830
cash<font color="#CCCCCC"> timings yeah so I've seen all other</font>

589
00:30:08,520 --> 00:30:12,900
ECT implementations when you have

590
00:30:10,830 --> 00:30:15,060
multiple points that you have to access

591
00:30:12,900 --> 00:30:17,400
you<font color="#CCCCCC"> have to do it in a constant way so</font>

592
00:30:15,060 --> 00:30:19,860
basically you go as you do a linear path

593
00:30:17,400 --> 00:30:21,930
through all the points and use logical

594
00:30:19,860 --> 00:30:23,240
operations<font color="#E5E5E5"> to access each point and take</font>

595
00:30:21,930 --> 00:30:26,370
the<font color="#E5E5E5"> date the one that you want</font>

596
00:30:23,240 --> 00:30:29,370
interesting so is that actually faster

597
00:30:26,370 --> 00:30:33,000
than because the the eight points there

598
00:30:29,370 --> 00:30:34,860
are just tons of three different points

599
00:30:33,000 --> 00:30:38,340
together yeah those that actually faster

600
00:30:34,860 --> 00:30:44,189
than going through it is yeah it is on a

601
00:30:38,340 --> 00:30:46,110
cluster yeah you mentioned you have a

602
00:30:44,190 --> 00:30:49,500
faster engine for modular<font color="#CCCCCC"> inversion for</font>

603
00:30:46,110 --> 00:30:50,939
openssl when I just contributed and not

604
00:30:49,500 --> 00:30:53,880
use the engine users don't really like

605
00:30:50,940 --> 00:30:57,690
using engines in a facility pain is it

606
00:30:53,880 --> 00:31:00,750
possible<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get that integrated well I'm</font>

607
00:30:57,690 --> 00:31:03,540
not the best one for that question i I

608
00:31:00,750 --> 00:31:05,160
don't know I'm available us so the

609
00:31:03,540 --> 00:31:09,030
<font color="#CCCCCC">question is yeah we are going to make it</font>

610
00:31:05,160 --> 00:31:12,270
<font color="#E5E5E5">available so</font><font color="#CCCCCC"> we are proud that was in we</font>

611
00:31:09,030 --> 00:31:15,180
I pass too fast on that but the release

612
00:31:12,270 --> 00:31:18,450
is coming soon for the<font color="#CCCCCC"> budget</font><font color="#E5E5E5"> to open</font>

613
00:31:15,180 --> 00:31:23,160
itself so the idea is<font color="#CCCCCC"> to publicly openly</font>

614
00:31:18,450 --> 00:31:24,840
<font color="#E5E5E5">l</font><font color="#CCCCCC"> alright but yeah pull requests welcome</font>

615
00:31:23,160 --> 00:31:31,170
if you have a faster modular inversion

616
00:31:24,840 --> 00:31:33,720
ok we're on github yeah<font color="#CCCCCC"> ok great you</font>

617
00:31:31,170 --> 00:31:37,830
provide some nice speed up as opposed to

618
00:31:33,720 --> 00:31:39,950
clear up to<font color="#E5E5E5"> 45 19</font><font color="#CCCCCC"> Ben Smith provided</font>

619
00:31:37,830 --> 00:31:42,750
some nice fit up with

620
00:31:39,950 --> 00:31:46,710
commercial place in a comparison to<font color="#E5E5E5"> this</font>

621
00:31:42,750 --> 00:31:48,929
high periodic<font color="#E5E5E5"> pictures yeah so if you go</font>

622
00:31:46,710 --> 00:31:51,179
to the<font color="#CCCCCC"> two-day to the papers you will</font>

623
00:31:48,929 --> 00:31:53,250
see comparison with other a curve

624
00:31:51,179 --> 00:31:57,529
available in good including Gina's to

625
00:31:53,250 --> 00:32:00,179
stuff like the<font color="#CCCCCC"> koomer and in every case</font>

626
00:31:57,529 --> 00:32:02,090
except with a few exceptions we see

627
00:32:00,179 --> 00:32:05,460
still a significant speed up in

628
00:32:02,090 --> 00:32:10,260
comparison with the<font color="#CCCCCC"> koomer but Coomer is</font>

629
00:32:05,460 --> 00:32:13,110
also an efficient alternative yep so

630
00:32:10,260 --> 00:32:16,350
just<font color="#E5E5E5"> out to buy patents I know that GRE</font>

631
00:32:13,110 --> 00:32:18,149
method was it<font color="#E5E5E5"> was patented is</font><font color="#CCCCCC"> Panda and</font>

632
00:32:16,350 --> 00:32:20,549
<font color="#E5E5E5">I'm not</font><font color="#CCCCCC"> sure my fax the problem you</font>

633
00:32:18,149 --> 00:32:27,479
could say is<font color="#E5E5E5"> already patent issues were</font>

634
00:32:20,549 --> 00:32:30,029
right I cannot comment on buttons a so

635
00:32:27,480 --> 00:32:33,000
they'd only thing that I can say from

636
00:32:30,029 --> 00:32:36,179
our side all our software is released on

637
00:32:33,000 --> 00:32:39,299
their MIT license<font color="#CCCCCC"> open-source completely</font>

638
00:32:36,179 --> 00:32:42,149
so we<font color="#CCCCCC"> are not applying not planning to</font>

639
00:32:39,299 --> 00:32:44,309
apply we having applied for any patents

640
00:32:42,149 --> 00:32:45,989
on on all the work that<font color="#CCCCCC"> you see if there</font>

641
00:32:44,309 --> 00:32:49,559
are companies with buttons I cannot

642
00:32:45,990 --> 00:32:55,080
comment on that what I will<font color="#CCCCCC"> say is that</font>

643
00:32:49,559 --> 00:32:57,029
a our library supports both kind of

644
00:32:55,080 --> 00:32:59,340
implementations exploiting endomorphisms

645
00:32:57,029 --> 00:33:01,679
and without endomorphisms if there are

646
00:32:59,340 --> 00:33:04,289
any kind of<font color="#E5E5E5"> concern you still can use</font>

647
00:33:01,679 --> 00:33:07,830
the case with all endomorphisms get a

648
00:33:04,289 --> 00:33:13,500
<font color="#CCCCCC">nicer speed up a</font><font color="#E5E5E5"> and that's an eternity</font>

649
00:33:07,830 --> 00:33:16,220
that we also provide thank you<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> thank</font>

650
00:33:13,500 --> 00:33:16,220
Patrick again

651
00:33:18,500 --> 00:33:21,500
and

