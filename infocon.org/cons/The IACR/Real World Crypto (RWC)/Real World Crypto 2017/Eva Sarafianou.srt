1
00:00:00,000 --> 00:00:04,259
I'm<font color="#E5E5E5"> really excited to be here and</font>

2
00:00:01,829 --> 00:00:06,779
<font color="#CCCCCC">present to</font><font color="#E5E5E5"> you our latest</font><font color="#CCCCCC"> improvements</font>

3
00:00:04,259 --> 00:00:09,630
<font color="#CCCCCC">in our tool our tools rapture is a</font>

4
00:00:06,779 --> 00:00:12,570
framework for conducting compression

5
00:00:09,630 --> 00:00:14,969
side-channel attacks justice crime time

6
00:00:12,570 --> 00:00:18,690
or<font color="#E5E5E5"> breach we have implemented it for a</font>

7
00:00:14,969 --> 00:00:21,590
bridge the objective of the bridge

8
00:00:18,690 --> 00:00:26,609
attack is that the an attacker can<font color="#E5E5E5"> steal</font>

9
00:00:21,590 --> 00:00:29,820
<font color="#CCCCCC">secret</font><font color="#E5E5E5"> from an https website and let's</font>

10
00:00:26,609 --> 00:00:32,850
look at the attack anatomy here in in

11
00:00:29,820 --> 00:00:34,559
the middle<font color="#CCCCCC"> have a</font><font color="#E5E5E5"> victim it's User</font>

12
00:00:32,850 --> 00:00:37,500
browsing the internet with seen a coffee

13
00:00:34,559 --> 00:00:39,660
shop and at the bottom we<font color="#CCCCCC"> have the</font>

14
00:00:37,500 --> 00:00:42,149
attacker we assume that<font color="#CCCCCC"> the attacker has</font>

15
00:00:39,660 --> 00:00:46,230
access to the victims network can

16
00:00:42,149 --> 00:00:49,800
measure things or inject things and at

17
00:00:46,230 --> 00:00:53,099
some<font color="#CCCCCC"> point the victim</font><font color="#E5E5E5"> browsers veriton</font>

18
00:00:49,800 --> 00:00:57,800
HTTP which site such an ass en el amazon

19
00:00:53,100 --> 00:01:00,989
and because<font color="#CCCCCC"> it's unauthenticated the</font>

20
00:00:57,800 --> 00:01:04,080
attacker can can alter the response and

21
00:01:00,989 --> 00:01:06,439
inject some<font color="#CCCCCC"> arctic JavaScript code this</font>

22
00:01:04,080 --> 00:01:09,929
code runs on the victims machine

23
00:01:06,439 --> 00:01:12,899
connects back to the attacker and open

24
00:01:09,930 --> 00:01:14,610
to<font color="#CCCCCC"> a command and control channel now the</font>

25
00:01:12,900 --> 00:01:16,530
attacker can use with the<font color="#E5E5E5"> monocle</font>

26
00:01:14,610 --> 00:01:19,500
control channel to issue multiple

27
00:01:16,530 --> 00:01:21,990
requests to another website which we

28
00:01:19,500 --> 00:01:25,680
call<font color="#E5E5E5"> target and point here is the gmail</font>

29
00:01:21,990 --> 00:01:29,039
and because of same words in policy and

30
00:01:25,680 --> 00:01:31,710
because the<font color="#E5E5E5"> JavaScript code run slits in</font>

31
00:01:29,040 --> 00:01:34,500
the scene and context the attacker

32
00:01:31,710 --> 00:01:36,320
cannot read the data but he can see them

33
00:01:34,500 --> 00:01:42,420
passing encrypted through the network

34
00:01:36,320 --> 00:01:44,158
and he can measure things now in order

35
00:01:42,420 --> 00:01:47,240
for an attacker to initiate an attack

36
00:01:44,159 --> 00:01:50,759
they you need to know part<font color="#E5E5E5"> of the secret</font>

37
00:01:47,240 --> 00:01:55,520
here we have a response of the<font color="#E5E5E5"> gmail</font>

38
00:01:50,759 --> 00:01:58,469
body our secret<font color="#E5E5E5"> is the gmail token and</font>

39
00:01:55,520 --> 00:02:01,229
if you if you<font color="#CCCCCC"> imagine the gmail web page</font>

40
00:01:58,469 --> 00:02:04,259
there<font color="#CCCCCC"> is a search field where the user</font>

41
00:02:01,229 --> 00:02:07,860
can can search for something<font color="#E5E5E5"> and what</font>

42
00:02:04,259 --> 00:02:10,979
the victim searches the user it really

43
00:02:07,860 --> 00:02:13,069
is is contained in the responsibility so

44
00:02:10,979 --> 00:02:15,859
if an attacker

45
00:02:13,069 --> 00:02:19,429
make the victim issue multiple queries

46
00:02:15,859 --> 00:02:21,829
for search we can understand that<font color="#E5E5E5"> the</font>

47
00:02:19,430 --> 00:02:24,079
attacker controlled the reflection and

48
00:02:21,829 --> 00:02:29,329
that controls part of the of the

49
00:02:24,079 --> 00:02:31,540
responsibility<font color="#CCCCCC"> and by using the the part</font>

50
00:02:29,329 --> 00:02:35,209
of the secret the attacker already know

51
00:02:31,540 --> 00:02:37,489
they can decrypt by byte by byte the

52
00:02:35,209 --> 00:02:39,859
rest of the secret so let's<font color="#E5E5E5"> say</font><font color="#CCCCCC"> that the</font>

53
00:02:37,489 --> 00:02:42,669
attacker already knows<font color="#CCCCCC"> the secret up to</font>

54
00:02:39,859 --> 00:02:47,719
the capital you<font color="#E5E5E5"> and wants to decrypt</font>

55
00:02:42,669 --> 00:02:51,049
before here when he a when the attacker

56
00:02:47,719 --> 00:02:54,680
puts the<font color="#CCCCCC"> four in the reflection he is</font>

57
00:02:51,049 --> 00:03:00,489
the this will resort result in shorter

58
00:02:54,680 --> 00:03:00,489
response as if he tried another letter

59
00:03:00,969 --> 00:03:08,150
now by<font color="#E5E5E5"> adopted with choosing reflections</font>

60
00:03:04,849 --> 00:03:10,969
we can we can<font color="#CCCCCC"> have full secret recovery</font>

61
00:03:08,150 --> 00:03:13,939
but this is not as easy<font color="#E5E5E5"> as it</font><font color="#CCCCCC"> may sound</font>

62
00:03:10,969 --> 00:03:17,629
and we have some challenges the first

63
00:03:13,939 --> 00:03:20,269
one is<font color="#E5E5E5"> noise and by noise we mean the</font>

64
00:03:17,629 --> 00:03:23,120
part of the of the response which is

65
00:03:20,269 --> 00:03:26,509
<font color="#CCCCCC">different per request and that we can</font>

66
00:03:23,120 --> 00:03:29,419
predict this the second is some

67
00:03:26,509 --> 00:03:31,638
compression method the attack how it

68
00:03:29,419 --> 00:03:34,909
really works is that it attacks the lv

69
00:03:31,639 --> 00:03:37,129
77 algorithm compression algorithm but

70
00:03:34,909 --> 00:03:42,888
most websites use gzip which is a

71
00:03:37,129 --> 00:03:46,519
combination of lv 77<font color="#E5E5E5"> half including so</font>

72
00:03:42,889 --> 00:03:49,729
the wake<font color="#E5E5E5"> how encoding works can alter</font>

73
00:03:46,519 --> 00:03:53,659
our predictions about the length of the

74
00:03:49,729 --> 00:03:57,319
response and the final one is that as

75
00:03:53,659 --> 00:03:59,929
the user obviously attacker issues

76
00:03:57,319 --> 00:04:03,310
<font color="#E5E5E5">requests for multiple different</font>

77
00:03:59,930 --> 00:04:06,469
characters to decrypt the next bite

78
00:04:03,310 --> 00:04:09,139
apart from the correct bite which will

79
00:04:06,469 --> 00:04:11,930
result in a shorter response there may

80
00:04:09,139 --> 00:04:14,259
be another one which will match with

81
00:04:11,930 --> 00:04:17,630
another part of the<font color="#E5E5E5"> response and</font>

82
00:04:14,259 --> 00:04:20,329
compress as well with the right one<font color="#E5E5E5"> and</font>

83
00:04:17,630 --> 00:04:22,820
we will have to two possible candidates

84
00:04:20,329 --> 00:04:24,560
letters for the<font color="#CCCCCC"> next bike to decrypt and</font>

85
00:04:22,820 --> 00:04:26,620
we will not<font color="#CCCCCC"> be sure which is</font><font color="#E5E5E5"> the right</font>

86
00:04:24,560 --> 00:04:26,620
one

87
00:04:26,720 --> 00:04:32,400
so with during the<font color="#E5E5E5"> last year we've</font>

88
00:04:29,669 --> 00:04:35,010
implemented the bridge attack and our

89
00:04:32,400 --> 00:04:38,340
framework is the rapture its production

90
00:04:35,010 --> 00:04:41,280
level and it's open source and I will

91
00:04:38,340 --> 00:04:44,070
describe you the different models it's

92
00:04:41,280 --> 00:04:47,729
pretty<font color="#E5E5E5"> much as the the attack Anatomy</font>

93
00:04:44,070 --> 00:04:51,870
showed<font color="#CCCCCC"> you</font><font color="#E5E5E5"> before the</font><font color="#CCCCCC"> first one is the</font>

94
00:04:47,729 --> 00:04:53,460
injector it's it's responsible for

95
00:04:51,870 --> 00:04:57,030
injecting the<font color="#E5E5E5"> JavaScript code to the</font>

96
00:04:53,460 --> 00:05:01,080
<font color="#E5E5E5">victims machine what it does is</font><font color="#CCCCCC"> that it</font>

97
00:04:57,030 --> 00:05:07,590
injects as the code in all the

98
00:05:01,080 --> 00:05:09,419
unauthenticated HTTP responses and it it

99
00:05:07,590 --> 00:05:12,060
works by us through from<font color="#CCCCCC"> the local</font>

100
00:05:09,419 --> 00:05:14,580
<font color="#CCCCCC">network and it forwarding the traffic in</font>

101
00:05:12,060 --> 00:05:17,340
the man in the middle manner it's just

102
00:05:14,580 --> 00:05:19,889
we<font color="#E5E5E5"> use better cup and it's just a series</font>

103
00:05:17,340 --> 00:05:23,880
<font color="#CCCCCC">of cell scripts with appropriate</font>

104
00:05:19,889 --> 00:05:26,580
<font color="#CCCCCC">buttercup modules to to inject</font><font color="#E5E5E5"> the code</font>

105
00:05:23,880 --> 00:05:29,490
and because we win Jake the code in

106
00:05:26,580 --> 00:05:32,070
every<font color="#E5E5E5"> CDP connection this increased</font>

107
00:05:29,490 --> 00:05:34,770
robustness even if the victim closes the

108
00:05:32,070 --> 00:05:37,200
tab opens another one or if he reboots

109
00:05:34,770 --> 00:05:39,750
<font color="#E5E5E5">their computer the attack still works</font>

110
00:05:37,200 --> 00:05:43,200
because we inject the code in average

111
00:05:39,750 --> 00:05:46,800
<font color="#CCCCCC">philippi connection the next module is</font>

112
00:05:43,200 --> 00:05:50,639
client client is the<font color="#CCCCCC"> JavaScript code we</font>

113
00:05:46,800 --> 00:05:53,729
inject it's quite minimal quite dump all

114
00:05:50,639 --> 00:05:56,610
it does<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that it waits for for work</font>

115
00:05:53,729 --> 00:06:02,460
from<font color="#E5E5E5"> the adversarial network and issues</font>

116
00:05:56,610 --> 00:06:05,400
the<font color="#CCCCCC"> requests we want to and the reason</font>

117
00:06:02,460 --> 00:06:08,070
it's garbage that if victim wants to

118
00:06:05,400 --> 00:06:09,960
reverse engineer the code<font color="#CCCCCC"> that is</font>

119
00:06:08,070 --> 00:06:13,760
injected in their machine they can't

120
00:06:09,960 --> 00:06:18,090
really<font color="#E5E5E5"> figure out what was going on the</font>

121
00:06:13,760 --> 00:06:19,860
next module is never a sniffer rates the

122
00:06:18,090 --> 00:06:22,380
encrypted data passing through<font color="#CCCCCC"> the</font>

123
00:06:19,860 --> 00:06:24,199
network and report them back to the to

124
00:06:22,380 --> 00:06:27,180
the parking for further analysis

125
00:06:24,199 --> 00:06:31,380
sniffing injector need to be in the

126
00:06:27,180 --> 00:06:33,030
victim network and let's say they could

127
00:06:31,380 --> 00:06:35,550
be in a small device such as the

128
00:06:33,030 --> 00:06:37,260
<font color="#E5E5E5">Raspberry Pi and all the rest could be</font>

129
00:06:35,550 --> 00:06:39,720
in a different network

130
00:06:37,260 --> 00:06:42,390
and now in the adversarial network we

131
00:06:39,720 --> 00:06:44,640
have real-time service it facilitates

132
00:06:42,390 --> 00:06:50,159
the communication between clients and

133
00:06:44,640 --> 00:06:52,110
the<font color="#CCCCCC"> the rest</font><font color="#E5E5E5"> of the buckland it it gets</font>

134
00:06:50,160 --> 00:06:54,360
worked from<font color="#CCCCCC"> the from the</font><font color="#E5E5E5"> back end and</font>

135
00:06:52,110 --> 00:06:56,370
four<font color="#CCCCCC"> would be to</font><font color="#E5E5E5"> the client and then</font>

136
00:06:54,360 --> 00:06:59,550
informs the back end whether the client

137
00:06:56,370 --> 00:07:02,790
has completed the work it was<font color="#E5E5E5"> given</font>

138
00:06:59,550 --> 00:07:05,550
successfully or not and the back in

139
00:07:02,790 --> 00:07:09,300
region in Django is if the core module

140
00:07:05,550 --> 00:07:12,660
of our framework it makes the analysis

141
00:07:09,300 --> 00:07:15,480
of<font color="#E5E5E5"> the of the data it stores</font><font color="#CCCCCC"> are data</font>

142
00:07:12,660 --> 00:07:20,130
and make the decisions about the next

143
00:07:15,480 --> 00:07:24,210
state of our attack now this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the the</font>

144
00:07:20,130 --> 00:07:25,950
end point<font color="#E5E5E5"> we're about to to attack as</font>

145
00:07:24,210 --> 00:07:27,989
you can see in the Ural endpoint the

146
00:07:25,950 --> 00:07:31,920
reflections are you are the asterisks

147
00:07:27,990 --> 00:07:33,960
and we can see<font color="#E5E5E5"> them there and our secret</font>

148
00:07:31,920 --> 00:07:37,830
is the<font color="#E5E5E5"> band room is just</font><font color="#CCCCCC"> a word from</font>

149
00:07:33,960 --> 00:07:39,780
<font color="#CCCCCC">their lorem ipsum text and the next</font><font color="#E5E5E5"> V</font>

150
00:07:37,830 --> 00:07:44,099
the rest of the context is are just

151
00:07:39,780 --> 00:07:48,109
numbers I chose this<font color="#CCCCCC"> to avoid noise and</font>

152
00:07:44,100 --> 00:07:52,500
and we<font color="#E5E5E5"> have to have better result and</font>

153
00:07:48,110 --> 00:07:57,270
our contributions is that we have a

154
00:07:52,500 --> 00:08:00,480
usable usable open source tool and we we

155
00:07:57,270 --> 00:08:03,359
created a web user interface and a

156
00:08:00,480 --> 00:08:07,200
restful api to make the attack easy and

157
00:08:03,360 --> 00:08:08,580
very practical we believe that the

158
00:08:07,200 --> 00:08:10,710
community doesn't pay as much attention

159
00:08:08,580 --> 00:08:14,330
that<font color="#CCCCCC"> they as</font><font color="#E5E5E5"> they should be two such</font>

160
00:08:10,710 --> 00:08:17,940
attacks we know it's very sophisticated

161
00:08:14,330 --> 00:08:19,560
but by with this work we want to show

162
00:08:17,940 --> 00:08:25,740
that<font color="#E5E5E5"> they could really happen in the</font>

163
00:08:19,560 --> 00:08:28,380
wild so let's move to our demo and it's

164
00:08:25,740 --> 00:08:33,330
a series of screenshots from an attack i

165
00:08:28,380 --> 00:08:37,860
performed yesterday the<font color="#E5E5E5"> first page is</font>

166
00:08:33,330 --> 00:08:40,169
this one<font color="#E5E5E5"> the rupture gives the</font>

167
00:08:37,860 --> 00:08:42,330
opportunity to perform multiple attacks

168
00:08:40,169 --> 00:08:44,610
at the<font color="#E5E5E5"> same time so here the attacker</font>

169
00:08:42,330 --> 00:08:47,110
can see the the talks that are already

170
00:08:44,610 --> 00:08:51,339
completed<font color="#E5E5E5"> in once running Oh</font>

171
00:08:47,110 --> 00:08:53,740
or the possible victims he can initiate

172
00:08:51,339 --> 00:08:56,860
a new attack and there are two<font color="#E5E5E5"> different</font>

173
00:08:53,740 --> 00:08:59,410
<font color="#CCCCCC">ways to</font><font color="#E5E5E5"> initiate attack the first is by</font>

174
00:08:56,860 --> 00:09:03,209
scanning the network it is common

175
00:08:59,410 --> 00:09:06,459
<font color="#CCCCCC">Network we use and mob it's clans report</font>

176
00:09:03,209 --> 00:09:09,069
finds the possible victims<font color="#CCCCCC"> jordans in</font>

177
00:09:06,459 --> 00:09:12,369
our database and presents them back to

178
00:09:09,070 --> 00:09:15,430
the attacker so that he can choose the

179
00:09:12,370 --> 00:09:18,100
victim and we<font color="#CCCCCC"> might know that the</font>

180
00:09:15,430 --> 00:09:23,890
attacker chooses a victim and he has to

181
00:09:18,100 --> 00:09:27,190
configure the target and after<font color="#CCCCCC"> that he</font>

182
00:09:23,890 --> 00:09:29,079
just clicks attack and the attack starts

183
00:09:27,190 --> 00:09:32,440
what the attack button does is that we

184
00:09:29,079 --> 00:09:35,229
create a specific client code for the

185
00:09:32,440 --> 00:09:37,540
specific victim as well as the an

186
00:09:35,230 --> 00:09:40,720
injector module for the specific victim

187
00:09:37,540 --> 00:09:44,110
as well and delicate<font color="#E5E5E5"> tiger waits for the</font>

188
00:09:40,720 --> 00:09:46,269
victim to visit an HTTP web site to

189
00:09:44,110 --> 00:09:49,300
inject so that the<font color="#CCCCCC"> JavaScript code is</font>

190
00:09:46,269 --> 00:09:53,470
injected another way of initiating the

191
00:09:49,300 --> 00:09:57,279
attack is by adding<font color="#E5E5E5"> a custom victim if</font>

192
00:09:53,470 --> 00:10:01,390
the if the attacker already knows the

193
00:09:57,279 --> 00:10:04,120
victim the<font color="#E5E5E5"> victims IP so he can just add</font>

194
00:10:01,390 --> 00:10:06,880
this in the field and of course<font color="#E5E5E5"> we can</font>

195
00:10:04,120 --> 00:10:08,769
add our own<font color="#E5E5E5"> targets so this needs some</font>

196
00:10:06,880 --> 00:10:12,000
configuration and they want to<font color="#E5E5E5"> explain</font>

197
00:10:08,769 --> 00:10:17,079
explain briefly what this is name is

198
00:10:12,000 --> 00:10:19,360
just something to<font color="#E5E5E5"> recognize the</font><font color="#CCCCCC"> target</font>

199
00:10:17,079 --> 00:10:22,329
URL is where the client<font color="#E5E5E5"> will make the</font>

200
00:10:19,360 --> 00:10:23,800
<font color="#CCCCCC">request</font><font color="#E5E5E5"> the prefix is the part of</font><font color="#CCCCCC"> the</font>

201
00:10:22,329 --> 00:10:26,560
secrets that<font color="#CCCCCC"> the attack you'll already</font>

202
00:10:23,800 --> 00:10:29,349
knows the<font color="#CCCCCC"> secret length we need this so</font>

203
00:10:26,560 --> 00:10:32,170
that our<font color="#E5E5E5"> bugging knows when we're in the</font>

204
00:10:29,350 --> 00:10:34,120
Atari completed the secret alphabet is

205
00:10:32,170 --> 00:10:37,750
the alphabet from which its bite of the

206
00:10:34,120 --> 00:10:40,089
secret is drawn from<font color="#E5E5E5"> a lying alphabet is</font>

207
00:10:37,750 --> 00:10:43,029
used for block alignment pretty much

208
00:10:40,089 --> 00:10:46,269
like the poodle attack does record

209
00:10:43,029 --> 00:10:48,279
analogy is a PLS parameter and we have

210
00:10:46,269 --> 00:10:51,060
<font color="#E5E5E5">to message Cyril and divide and conquer</font>

211
00:10:48,279 --> 00:10:54,339
Cyril is slower but gives better results

212
00:10:51,060 --> 00:10:57,640
whereas divide and conquer is faster but

213
00:10:54,339 --> 00:11:00,570
we we may need more we may may not

214
00:10:57,640 --> 00:11:05,020
result in as good as the<font color="#E5E5E5"> serial</font>

215
00:11:00,570 --> 00:11:07,810
and after a while the V attacker sees

216
00:11:05,020 --> 00:11:11,770
this these are the first result our

217
00:11:07,810 --> 00:11:14,349
attack is conducted in<font color="#E5E5E5"> rounds after when</font>

218
00:11:11,770 --> 00:11:16,060
<font color="#E5E5E5">around is completed we have a new state</font>

219
00:11:14,350 --> 00:11:18,280
<font color="#CCCCCC">of via track and something more is known</font>

220
00:11:16,060 --> 00:11:21,640
about the<font color="#E5E5E5"> secret for example in the</font>

221
00:11:18,280 --> 00:11:24,579
serial method after an attack<font color="#CCCCCC"> you come</font>

222
00:11:21,640 --> 00:11:29,100
<font color="#E5E5E5">after around is completed we have new by</font>

223
00:11:24,580 --> 00:11:32,830
decrypted and we may need more than one

224
00:11:29,100 --> 00:11:35,350
we may need multiple batches for around

225
00:11:32,830 --> 00:11:38,800
it what is a<font color="#CCCCCC"> but we may not have enough</font>

226
00:11:35,350 --> 00:11:41,530
data to to take a<font color="#E5E5E5"> decision with enough</font>

227
00:11:38,800 --> 00:11:44,439
confidence about which<font color="#CCCCCC"> is the next the</font>

228
00:11:41,530 --> 00:11:47,650
<font color="#E5E5E5">next byte decrypted so we may need to</font>

229
00:11:44,440 --> 00:11:50,830
reissue the same the same request

230
00:11:47,650 --> 00:11:54,060
multiple times in and get until we get

231
00:11:50,830 --> 00:11:57,370
the decision and as you can see the

232
00:11:54,060 --> 00:12:00,339
possible<font color="#CCCCCC"> non prefixes d this is what we</font>

233
00:11:57,370 --> 00:12:04,360
saw in our website it was the Ben dune

234
00:12:00,340 --> 00:12:09,160
and we decrypted d and the prefix we

235
00:12:04,360 --> 00:12:12,310
already knew was be Ben and this goes

236
00:12:09,160 --> 00:12:15,550
<font color="#CCCCCC">Donald it's how the attack evolves this</font>

237
00:12:12,310 --> 00:12:19,930
took about six minutes and you can see

238
00:12:15,550 --> 00:12:21,699
it's a real time attack and this is

239
00:12:19,930 --> 00:12:24,609
pretty<font color="#E5E5E5"> much over how to say this is our</font>

240
00:12:21,700 --> 00:12:26,910
<font color="#CCCCCC">wrapper and our website and thank you</font>

241
00:12:24,610 --> 00:12:34,660
<font color="#CCCCCC">very much for your attention</font>

242
00:12:26,910 --> 00:12:37,370
[Applause]

243
00:12:34,660 --> 00:12:39,740
so in one of your diagrams<font color="#CCCCCC"> your example</font>

244
00:12:37,370 --> 00:12:41,480
victim with gmail does your attack

245
00:12:39,740 --> 00:12:45,199
actually work against gmail or does our

246
00:12:41,480 --> 00:12:50,120
noise prevent it oh yeah i<font color="#E5E5E5"> forgot to to</font>

247
00:12:45,199 --> 00:12:52,540
talk about<font color="#E5E5E5"> this it is gmail and noise</font>

248
00:12:50,120 --> 00:12:55,940
make the attack much more difficult

249
00:12:52,540 --> 00:12:58,430
maybe if we first make a static analysis

250
00:12:55,940 --> 00:13:02,180
of the<font color="#CCCCCC"> web page with no reflection we</font>

251
00:12:58,430 --> 00:13:04,969
get a better idea of what of what to

252
00:13:02,180 --> 00:13:08,800
predict but for the time being the

253
00:13:04,970 --> 00:13:08,800
attack doesn't work in a gmail web page

254
00:13:10,839 --> 00:13:15,860
<font color="#CCCCCC">okay great why we take we have a break</font>

255
00:13:13,310 --> 00:13:21,649
<font color="#E5E5E5">now</font><font color="#CCCCCC"> thank you again</font><font color="#E5E5E5"> wonderful</font>

256
00:13:15,860 --> 00:13:21,649
[Applause]

