1
00:00:00,000 --> 00:00:06,089
thanks for the introduction so<font color="#E5E5E5"> Luke made</font>

2
00:00:03,330 --> 00:00:08,670
the case very early on and very

3
00:00:06,089 --> 00:00:10,710
convincingly why we need probably secure

4
00:00:08,670 --> 00:00:12,840
<font color="#E5E5E5">schemes or why we need to provide a</font>

5
00:00:10,710 --> 00:00:16,890
proof of security for the protocols that

6
00:00:12,840 --> 00:00:19,140
we introduced so in his case it was like

7
00:00:16,890 --> 00:00:21,869
about<font color="#E5E5E5"> three years right until the proof</font>

8
00:00:19,140 --> 00:00:23,789
came out 2013 or so the signal protocol

9
00:00:21,869 --> 00:00:29,849
was developed in this case we're<font color="#CCCCCC"> talking</font>

10
00:00:23,789 --> 00:00:33,239
about a proof that took 26 years so yeah

11
00:00:29,849 --> 00:00:35,309
<font color="#E5E5E5">I'm moving on so i am not going to go</font>

12
00:00:33,239 --> 00:00:36,959
very well into a<font color="#E5E5E5"> syndicated key exchange</font>

13
00:00:35,309 --> 00:00:40,709
because the previous speakers already

14
00:00:36,960 --> 00:00:42,600
did a great job of it so briefly what we

15
00:00:40,710 --> 00:00:46,020
want is secure communication between two

16
00:00:42,600 --> 00:00:48,739
parties<font color="#E5E5E5"> and we usually typically use</font>

17
00:00:46,020 --> 00:00:51,149
authenticated key exchange mechanisms so

18
00:00:48,739 --> 00:00:53,760
those are protocols that look a bit like

19
00:00:51,149 --> 00:00:57,899
this<font color="#E5E5E5"> between Alice and Bob or a client</font>

20
00:00:53,760 --> 00:01:00,120
in the server so usually authenticated

21
00:00:57,899 --> 00:01:02,670
key exchange schemes and secure

22
00:01:00,120 --> 00:01:04,619
messaging protocols they consist of two

23
00:01:02,670 --> 00:01:07,710
stages the<font color="#CCCCCC"> first one is the</font>

24
00:01:04,619 --> 00:01:10,080
authenticated and key exchange mechanism

25
00:01:07,710 --> 00:01:13,110
which we also call a handshake and in

26
00:01:10,080 --> 00:01:15,179
the second<font color="#CCCCCC"> step we use keys derived</font>

27
00:01:13,110 --> 00:01:16,290
during the<font color="#E5E5E5"> first step in order to secure</font>

28
00:01:15,180 --> 00:01:18,720
the communication<font color="#E5E5E5"> between the two</font>

29
00:01:16,290 --> 00:01:21,630
<font color="#E5E5E5">parties by usually authenticated</font>

30
00:01:18,720 --> 00:01:23,009
encryption mechanisms so in this talk

31
00:01:21,630 --> 00:01:27,979
I'm going to<font color="#CCCCCC"> focus only on the first</font>

32
00:01:23,009 --> 00:01:30,119
<font color="#E5E5E5">part so we we already saw that typically</font>

33
00:01:27,979 --> 00:01:31,920
when we define security and

34
00:01:30,119 --> 00:01:34,290
authenticated key exchange we<font color="#E5E5E5"> talk about</font>

35
00:01:31,920 --> 00:01:38,280
network attackers which are able to stop

36
00:01:34,290 --> 00:01:40,470
messages interact with parties in

37
00:01:38,280 --> 00:01:43,530
multiple sessions they can corrupt

38
00:01:40,470 --> 00:01:45,360
<font color="#CCCCCC">long-term secrets of parties and they</font>

39
00:01:43,530 --> 00:01:47,880
can reveal computed session Keys this is

40
00:01:45,360 --> 00:01:51,539
the<font color="#E5E5E5"> typical blurry rugged type of</font>

41
00:01:47,880 --> 00:01:53,850
methodology of defining security for a

42
00:01:51,540 --> 00:01:56,579
ke we're also talking about forward

43
00:01:53,850 --> 00:01:58,710
secrecy or<font color="#E5E5E5"> perfect forward secrecy which</font>

44
00:01:56,579 --> 00:02:00,630
is to say even<font color="#CCCCCC"> if the key has been</font>

45
00:01:58,710 --> 00:02:02,729
<font color="#E5E5E5">comped the</font><font color="#CCCCCC"> long term key of a party has</font>

46
00:02:00,630 --> 00:02:07,350
been compromised the security of past

47
00:02:02,729 --> 00:02:09,060
sessions is not compromised so<font color="#CCCCCC"> end of</font>

48
00:02:07,350 --> 00:02:11,220
talk we're going<font color="#E5E5E5"> to talk about a</font>

49
00:02:09,060 --> 00:02:13,470
<font color="#E5E5E5">different kind of authenticated he</font>

50
00:02:11,220 --> 00:02:16,710
change vertical namely

51
00:02:13,470 --> 00:02:20,700
security model and typical analysis of

52
00:02:16,710 --> 00:02:23,070
such security models such a security

53
00:02:20,700 --> 00:02:25,589
protocols they only depend<font color="#E5E5E5"> on the fact</font>

54
00:02:23,070 --> 00:02:28,350
that you have two parties<font color="#E5E5E5"> which you</font>

55
00:02:25,590 --> 00:02:31,320
typically both trust to some degree so

56
00:02:28,350 --> 00:02:33,660
you can secure<font color="#E5E5E5"> the key if the two</font>

57
00:02:31,320 --> 00:02:35,250
parties are<font color="#CCCCCC"> on it but in this talk we're</font>

58
00:02:33,660 --> 00:02:37,950
going to talk about a key exchange

59
00:02:35,250 --> 00:02:40,140
protocol which is executed by two

60
00:02:37,950 --> 00:02:42,359
parties but out of<font color="#E5E5E5"> which one of them is</font>

61
00:02:40,140 --> 00:02:44,519
untrusted or only<font color="#E5E5E5"> semi trusted so this</font>

62
00:02:42,360 --> 00:02:50,700
is<font color="#CCCCCC"> the case of the AKA protocol which is</font>

63
00:02:44,520 --> 00:02:53,790
used in 3g and 4g mobile networks so the

64
00:02:50,700 --> 00:02:56,489
AKA protocol is was developed in a bit

65
00:02:53,790 --> 00:02:59,250
of a stranger context than say people

66
00:02:56,490 --> 00:03:01,260
<font color="#E5E5E5">who are familiar with TLS know in the</font>

67
00:02:59,250 --> 00:03:03,660
case<font color="#CCCCCC"> of mobile communications you don't</font>

68
00:03:01,260 --> 00:03:06,690
<font color="#E5E5E5">just have two actors a client in the</font>

69
00:03:03,660 --> 00:03:10,859
server<font color="#E5E5E5"> you have typically three actors</font>

70
00:03:06,690 --> 00:03:12,959
or three main parties the first of which

71
00:03:10,860 --> 00:03:16,560
is the<font color="#CCCCCC"> client or</font><font color="#E5E5E5"> the user the mobile</font>

72
00:03:12,959 --> 00:03:18,989
user and then there are two parties to

73
00:03:16,560 --> 00:03:21,590
which this client gets affiliated at

74
00:03:18,989 --> 00:03:24,660
different<font color="#CCCCCC"> time</font><font color="#E5E5E5"> so a client usually</font>

75
00:03:21,590 --> 00:03:26,840
registers with a mobile operator so this

76
00:03:24,660 --> 00:03:30,000
can<font color="#CCCCCC"> be your Hajj if you're in France or</font>

77
00:03:26,840 --> 00:03:33,570
it can be<font color="#CCCCCC"> a Vodafone or can be any other</font>

78
00:03:30,000 --> 00:03:35,280
mobile operator the client is said to

79
00:03:33,570 --> 00:03:37,920
trust its operator now I don't<font color="#E5E5E5"> know if</font>

80
00:03:35,280 --> 00:03:43,350
<font color="#E5E5E5">we physically trust our operators but at</font>

81
00:03:37,920 --> 00:03:45,869
least our phones do so then then there's

82
00:03:43,350 --> 00:03:48,269
also the<font color="#E5E5E5"> third party whenever the client</font>

83
00:03:45,870 --> 00:03:51,090
actually requires mobile services such

84
00:03:48,269 --> 00:03:55,500
as<font color="#E5E5E5"> I know SMS privileges or Minister</font>

85
00:03:51,090 --> 00:03:57,959
talk or internet access the client has

86
00:03:55,500 --> 00:04:01,200
to<font color="#CCCCCC"> establish a secure channel to receive</font>

87
00:03:57,959 --> 00:04:03,780
those services with a third entity and

88
00:04:01,200 --> 00:04:06,540
this entity which<font color="#E5E5E5"> I call here a server</font>

89
00:04:03,780 --> 00:04:08,450
it's just so that we we<font color="#E5E5E5"> have some sort</font>

90
00:04:06,540 --> 00:04:11,850
of<font color="#E5E5E5"> backward compatibility with TLS</font>

91
00:04:08,450 --> 00:04:15,410
people these servers are called<font color="#CCCCCC"> actually</font>

92
00:04:11,850 --> 00:04:18,570
mobile management entities mmm eat and

93
00:04:15,410 --> 00:04:20,488
they are affiliated either with the

94
00:04:18,570 --> 00:04:23,190
clients own operator in the domestic

95
00:04:20,488 --> 00:04:24,299
network or and this is important in the

96
00:04:23,190 --> 00:04:26,699
case of roaming

97
00:04:24,300 --> 00:04:29,009
the server is a fit affiliated with

98
00:04:26,699 --> 00:04:31,560
another operator possibly an operator

99
00:04:29,009 --> 00:04:36,960
that the client and<font color="#CCCCCC"> the</font><font color="#E5E5E5"> client operators</font>

100
00:04:31,560 --> 00:04:39,180
do not fully trust so usually<font color="#E5E5E5"> the server</font>

101
00:04:36,960 --> 00:04:41,638
and operator may be<font color="#E5E5E5"> assumed to</font>

102
00:04:39,180 --> 00:04:43,409
communicate over a secure channel which

103
00:04:41,639 --> 00:04:46,379
is mutually<font color="#CCCCCC"> acenta</font><font color="#E5E5E5"> gated 10 to the 2</font>

104
00:04:43,409 --> 00:04:48,389
<font color="#E5E5E5">padlocks but the client and the</font><font color="#CCCCCC"> server</font>

105
00:04:46,379 --> 00:04:50,009
they communicate over in a secure

106
00:04:48,389 --> 00:04:53,039
<font color="#CCCCCC">channel</font><font color="#E5E5E5"> and it's that channel which the</font>

107
00:04:50,009 --> 00:04:57,360
AKA protocol aims to feature so to

108
00:04:53,039 --> 00:04:58,740
understand how this works there's in

109
00:04:57,360 --> 00:05:01,440
mobile communications there's a

110
00:04:58,740 --> 00:05:04,560
<font color="#E5E5E5">three-tier trust the operator is the</font>

111
00:05:01,440 --> 00:05:06,300
<font color="#E5E5E5">most trusted entity apparently so it is</font>

112
00:05:04,560 --> 00:05:08,009
trusted to know everything<font color="#E5E5E5"> about the</font>

113
00:05:06,300 --> 00:05:10,940
stateful protocol including long-term

114
00:05:08,009 --> 00:05:15,870
secret data of client and operator

115
00:05:10,940 --> 00:05:18,210
together the client is only trusted to

116
00:05:15,870 --> 00:05:22,370
know the client data which<font color="#CCCCCC"> is usually</font>

117
00:05:18,210 --> 00:05:26,008
stored in the sim card or you sim card

118
00:05:22,370 --> 00:05:28,830
and then there's the server which is not

119
00:05:26,009 --> 00:05:30,719
trusted to know<font color="#E5E5E5"> anything except the</font>

120
00:05:28,830 --> 00:05:32,279
current session data because it's the

121
00:05:30,719 --> 00:05:33,990
server that actually has to provide the

122
00:05:32,279 --> 00:05:36,810
service so it has<font color="#CCCCCC"> to know</font><font color="#E5E5E5"> the session</font>

123
00:05:33,990 --> 00:05:38,190
Keys there apart from the security of

124
00:05:36,810 --> 00:05:41,909
the keys and<font color="#E5E5E5"> the security of these</font>

125
00:05:38,190 --> 00:05:46,229
sessions we also<font color="#E5E5E5"> need to worry about</font>

126
00:05:41,909 --> 00:05:48,569
client privacy namely the access pattern

127
00:05:46,229 --> 00:05:50,729
of the client should be at least hidden

128
00:05:48,569 --> 00:05:52,500
from men<font color="#CCCCCC"> in the middle adversaries the</font>

129
00:05:50,729 --> 00:05:54,060
<font color="#E5E5E5">identity of the client should be hidden</font>

130
00:05:52,500 --> 00:05:56,940
from men<font color="#CCCCCC"> in the middle adversaries and</font>

131
00:05:54,060 --> 00:06:00,810
there there's what a convincing case of

132
00:05:56,940 --> 00:06:03,360
requirements done by 3gpp on how clients

133
00:06:00,810 --> 00:06:06,719
access pattern should be hidden with

134
00:06:03,360 --> 00:06:09,270
respect to men in the middle however our

135
00:06:06,719 --> 00:06:11,430
<font color="#E5E5E5">results showed that the AKA protocol</font>

136
00:06:09,270 --> 00:06:13,198
which was also standardized by 3gpp

137
00:06:11,430 --> 00:06:17,069
actually does not answer those

138
00:06:13,199 --> 00:06:18,960
requirements so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the AKA protocol</font>

139
00:06:17,069 --> 00:06:21,539
and you<font color="#E5E5E5"> don't need to</font><font color="#CCCCCC"> worry</font><font color="#E5E5E5"> about a lot</font>

140
00:06:18,960 --> 00:06:23,400
<font color="#CCCCCC">of the computations the important part</font>

141
00:06:21,539 --> 00:06:26,159
of it is that there are<font color="#E5E5E5"> these three</font>

142
00:06:23,400 --> 00:06:29,909
parties in this case we're just talking

143
00:06:26,159 --> 00:06:32,940
<font color="#CCCCCC">about the basic to party protocol which</font>

144
00:06:29,909 --> 00:06:35,370
is done<font color="#CCCCCC"> by the client and</font><font color="#E5E5E5"> the operator</font>

145
00:06:32,940 --> 00:06:36,169
as we will learn and in the real<font color="#E5E5E5"> life</font>

146
00:06:35,370 --> 00:06:38,360
this<font color="#CCCCCC"> is</font>

147
00:06:36,169 --> 00:06:41,479
the forwarded from one party to the

148
00:06:38,360 --> 00:06:43,550
other by the server so the basic to

149
00:06:41,479 --> 00:06:45,229
party protocol underlying the AKA

150
00:06:43,550 --> 00:06:47,689
protocol is that the client and<font color="#E5E5E5"> the</font>

151
00:06:45,229 --> 00:06:50,389
<font color="#CCCCCC">server have some stateful information</font>

152
00:06:47,689 --> 00:06:53,539
namely the<font color="#CCCCCC"> clients secret key which is</font>

153
00:06:50,389 --> 00:06:55,699
<font color="#E5E5E5">denoted</font><font color="#CCCCCC"> skc the operators secret key</font>

154
00:06:53,539 --> 00:06:58,818
which is<font color="#E5E5E5"> called a denoted</font><font color="#CCCCCC"> SK up and</font>

155
00:06:55,699 --> 00:07:01,610
sequel a sequence number called sunz

156
00:06:58,819 --> 00:07:04,669
this is the state the client state which

157
00:07:01,610 --> 00:07:06,469
is<font color="#CCCCCC"> also somewhat shared by the operator</font>

158
00:07:04,669 --> 00:07:08,389
as we will see and<font color="#CCCCCC"> there are some</font>

159
00:07:06,469 --> 00:07:10,610
identifying information which<font color="#E5E5E5"> I call</font>

160
00:07:08,389 --> 00:07:13,370
here just you ID which is user ID will

161
00:07:10,610 --> 00:07:15,680
find out<font color="#CCCCCC"> more about this identity a bit</font>

162
00:07:13,370 --> 00:07:17,990
later<font color="#E5E5E5"> so the operator has the same</font>

163
00:07:15,680 --> 00:07:20,900
information and what happens is the

164
00:07:17,990 --> 00:07:22,939
operator actually<font color="#E5E5E5"> generates both the</font>

165
00:07:20,900 --> 00:07:26,719
randomness for the session which is

166
00:07:22,939 --> 00:07:28,669
denoted as our and a number<font color="#CCCCCC"> of values</font>

167
00:07:26,719 --> 00:07:31,490
namely<font color="#E5E5E5"> an authentication information</font>

168
00:07:28,669 --> 00:07:34,789
match up which authenticates the

169
00:07:31,490 --> 00:07:38,089
operator to the client maxi which will

170
00:07:34,789 --> 00:07:41,419
have<font color="#E5E5E5"> to identify the client to the</font>

171
00:07:38,089 --> 00:07:44,300
operator as well as some some session

172
00:07:41,419 --> 00:07:46,279
key information the two keys<font color="#CCCCCC"> ack and IKR</font>

173
00:07:44,300 --> 00:07:48,349
used afterwards for integrity and

174
00:07:46,279 --> 00:07:51,279
confidentiality so those<font color="#E5E5E5"> are the</font>

175
00:07:48,349 --> 00:07:54,378
encryption and integrity check keys and

176
00:07:51,279 --> 00:07:56,979
then there is<font color="#E5E5E5"> the authentication p the</font>

177
00:07:54,379 --> 00:08:00,139
authentication is used to actually

178
00:07:56,979 --> 00:08:03,589
transport the sequence number that is

179
00:08:00,139 --> 00:08:05,599
used at every authentication session so

180
00:08:03,589 --> 00:08:08,240
what happens<font color="#CCCCCC"> here is</font><font color="#E5E5E5"> that the operator</font>

181
00:08:05,599 --> 00:08:11,149
generates the randomness<font color="#E5E5E5"> and as long as</font>

182
00:08:08,240 --> 00:08:13,759
the sequence number they are based on

183
00:08:11,149 --> 00:08:15,620
which this information has been computed

184
00:08:13,759 --> 00:08:18,050
is not too far<font color="#CCCCCC"> from the clients own</font>

185
00:08:15,620 --> 00:08:19,819
sequence number the client will accept

186
00:08:18,050 --> 00:08:22,610
the authentication and run the protocol

187
00:08:19,819 --> 00:08:25,939
the role of the sequence number is a

188
00:08:22,610 --> 00:08:28,550
little bit obscure but what it does is

189
00:08:25,939 --> 00:08:30,889
it<font color="#E5E5E5"> actually replaces somehow the</font>

190
00:08:28,550 --> 00:08:33,440
randomness on the client side now in the

191
00:08:30,889 --> 00:08:36,769
1990s the sim cards used by mobile

192
00:08:33,440 --> 00:08:38,779
phones did not produce randomness even

193
00:08:36,769 --> 00:08:40,698
current sim cards do not produce MIT

194
00:08:38,779 --> 00:08:42,860
randomness but next generation<font color="#CCCCCC"> SIM cards</font>

195
00:08:40,698 --> 00:08:43,669
will be able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> produce some randomness</font>

196
00:08:42,860 --> 00:08:46,010
and

197
00:08:43,669 --> 00:08:48,079
and do such computations the problem was

198
00:08:46,010 --> 00:08:50,930
there<font color="#E5E5E5"> that you had to ensure freshness</font>

199
00:08:48,080 --> 00:08:53,810
while<font color="#E5E5E5"> only providing randomness from one</font>

200
00:08:50,930 --> 00:08:56,390
party so and that's why the sequence

201
00:08:53,810 --> 00:08:58,250
number is used so what happens is the

202
00:08:56,390 --> 00:09:00,620
<font color="#E5E5E5">client checks that the values are</font>

203
00:08:58,250 --> 00:09:03,800
somewhat compatible with its own stored

204
00:09:00,620 --> 00:09:06,770
sqn and afterwards it sends<font color="#CCCCCC"> the response</font>

205
00:09:03,800 --> 00:09:09,979
which is hopefully equal to<font color="#CCCCCC"> maxi these</font>

206
00:09:06,770 --> 00:09:12,350
cryptographic functions f1 to f5 they're

207
00:09:09,980 --> 00:09:15,920
actually standardized as one of<font color="#CCCCCC"> two</font>

208
00:09:12,350 --> 00:09:22,640
<font color="#E5E5E5">types of cipher Suites either based on</font>

209
00:09:15,920 --> 00:09:25,010
<font color="#CCCCCC">millen edge or on track so in the in</font>

210
00:09:22,640 --> 00:09:26,810
case the two sequence numbers are not

211
00:09:25,010 --> 00:09:28,420
the same but the max of<font color="#CCCCCC"> the operator</font>

212
00:09:26,810 --> 00:09:31,000
checks out there is a resynchronization

213
00:09:28,420 --> 00:09:34,120
procedure so this can sometimes happen

214
00:09:31,000 --> 00:09:37,040
when when the sequence number of the

215
00:09:34,120 --> 00:09:38,930
operator was used for other processes

216
00:09:37,040 --> 00:09:42,140
not for the<font color="#E5E5E5"> aka process but for other</font>

217
00:09:38,930 --> 00:09:43,969
processes in the phone so this recent

218
00:09:42,140 --> 00:09:46,490
<font color="#E5E5E5">colonization basically reversed the</font>

219
00:09:43,970 --> 00:09:49,970
clients and<font color="#E5E5E5"> the operator roles in the</font>

220
00:09:46,490 --> 00:09:52,400
key exchange so the client encapsulates

221
00:09:49,970 --> 00:09:54,110
its own sequence number and forces the

222
00:09:52,400 --> 00:09:59,140
operator to go back a notch and

223
00:09:54,110 --> 00:10:01,580
resynchronize its own sequence number so

224
00:09:59,140 --> 00:10:04,160
now we introduce<font color="#CCCCCC"> the third party this</font>

225
00:10:01,580 --> 00:10:06,290
was<font color="#CCCCCC"> a basic to party protocol in which a</font>

226
00:10:04,160 --> 00:10:09,020
cave<font color="#E5E5E5"> space the problem is that</font><font color="#CCCCCC"> the</font>

227
00:10:06,290 --> 00:10:11,480
protocol is not run by<font color="#CCCCCC"> the operator and</font>

228
00:10:09,020 --> 00:10:13,699
the client which both know the symmetric

229
00:10:11,480 --> 00:10:15,530
values which are<font color="#CCCCCC"> required for this it's</font>

230
00:10:13,700 --> 00:10:17,930
<font color="#CCCCCC">run by the client and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> server and the</font>

231
00:10:15,530 --> 00:10:20,480
server<font color="#E5E5E5"> does not trust it to know the</font>

232
00:10:17,930 --> 00:10:23,390
clients key the operator screen or the

233
00:10:20,480 --> 00:10:25,490
sequence numbers so how can authenticate

234
00:10:23,390 --> 00:10:27,710
work without the server knowing the

235
00:10:25,490 --> 00:10:30,740
client secrets well essentially what

236
00:10:27,710 --> 00:10:33,460
happens is that the server is only used

237
00:10:30,740 --> 00:10:36,140
as an identity management tool it only

238
00:10:33,460 --> 00:10:38,810
basically figures out who the client is

239
00:10:36,140 --> 00:10:40,939
and then ask the operator for the rest

240
00:10:38,810 --> 00:10:43,630
of the protocol information it acts only

241
00:10:40,940 --> 00:10:48,390
as a proxy with some<font color="#E5E5E5"> identity management</font>

242
00:10:43,630 --> 00:10:51,510
ideas so in<font color="#CCCCCC"> 3G networks</font>

243
00:10:48,390 --> 00:10:54,210
the<font color="#CCCCCC"> identifier that is provided by the</font>

244
00:10:51,510 --> 00:10:55,950
client to the server is either an

245
00:10:54,210 --> 00:10:58,020
international mobile subscriber

246
00:10:55,950 --> 00:11:01,080
identifier MC which is a permanent

247
00:10:58,020 --> 00:11:03,480
identifier or a<font color="#E5E5E5"> temporary one now the</font>

248
00:11:01,080 --> 00:11:06,780
temporary identifier is unique is

249
00:11:03,480 --> 00:11:09,240
designed to be unique per server but<font color="#E5E5E5"> two</font>

250
00:11:06,780 --> 00:11:12,390
servers can assign the same value by

251
00:11:09,240 --> 00:11:13,890
some accident to the same to the same

252
00:11:12,390 --> 00:11:16,319
client and in order<font color="#E5E5E5"> to</font><font color="#CCCCCC"> make sure</font><font color="#E5E5E5"> that</font>

253
00:11:13,890 --> 00:11:18,810
these are unique you also<font color="#E5E5E5"> send your</font>

254
00:11:16,320 --> 00:11:22,860
location data with it so the location

255
00:11:18,810 --> 00:11:25,140
data tells the operator which server has

256
00:11:22,860 --> 00:11:28,200
issued the TMS I the temporary

257
00:11:25,140 --> 00:11:31,470
<font color="#E5E5E5">identifier and so you can you can find a</font>

258
00:11:28,200 --> 00:11:34,350
unique client to which this this

259
00:11:31,470 --> 00:11:37,680
temporary identifier was issued this<font color="#E5E5E5"> is</font>

260
00:11:34,350 --> 00:11:39,780
important for the privacy as for 4G<font color="#CCCCCC"> you</font>

261
00:11:37,680 --> 00:11:42,810
replace this by a different kind of

262
00:11:39,780 --> 00:11:45,120
<font color="#E5E5E5">identifier</font><font color="#CCCCCC"> which does not differ so very</font>

263
00:11:42,810 --> 00:11:47,790
much<font color="#E5E5E5"> in</font><font color="#CCCCCC"> its structure it also sends some</font>

264
00:11:45,120 --> 00:11:50,880
location data and some some identifiers

265
00:11:47,790 --> 00:11:54,870
data so the<font color="#CCCCCC"> three-party protocol looks</font>

266
00:11:50,880 --> 00:11:57,600
like this so you you start<font color="#CCCCCC"> with</font><font color="#E5E5E5"> a with</font>

267
00:11:54,870 --> 00:11:59,970
an identification procedure between the

268
00:11:57,600 --> 00:12:02,580
client and the<font color="#E5E5E5"> server whose only goal is</font>

269
00:11:59,970 --> 00:12:05,820
for the server to identify the permanent

270
00:12:02,580 --> 00:12:09,780
identifier of<font color="#E5E5E5"> the of the client and then</font>

271
00:12:05,820 --> 00:12:13,770
figure<font color="#CCCCCC"> out which operator to ask for</font>

272
00:12:09,780 --> 00:12:17,819
information in a second step the<font color="#E5E5E5"> server</font>

273
00:12:13,770 --> 00:12:19,620
will ask<font color="#CCCCCC"> for information for a batch of</font>

274
00:12:17,820 --> 00:12:21,780
authentication vectors these

275
00:12:19,620 --> 00:12:23,340
authentication vectors basically provide

276
00:12:21,780 --> 00:12:25,770
what<font color="#E5E5E5"> you saw a few slides ago which is</font>

277
00:12:23,340 --> 00:12:28,200
<font color="#E5E5E5">all</font><font color="#CCCCCC"> the results of the f1 to the f5</font>

278
00:12:25,770 --> 00:12:29,870
functions<font color="#E5E5E5"> an encapsulation of the</font>

279
00:12:28,200 --> 00:12:33,570
sequence number practically everything

280
00:12:29,870 --> 00:12:35,460
and it does this in batches so the

281
00:12:33,570 --> 00:12:38,190
operator will generate a number of

282
00:12:35,460 --> 00:12:40,460
random<font color="#E5E5E5"> numbers and update the</font><font color="#CCCCCC"> SQ n at</font>

283
00:12:38,190 --> 00:12:43,140
every every time before<font color="#E5E5E5"> it sends the</font>

284
00:12:40,460 --> 00:12:45,270
authentication vectors then there's the

285
00:12:43,140 --> 00:12:47,870
<font color="#E5E5E5">challenge response rate and finally</font>

286
00:12:45,270 --> 00:12:51,600
there's a TMS I reallocation so here I

287
00:12:47,870 --> 00:12:55,530
sort of put it between mutually

288
00:12:51,600 --> 00:12:57,450
authenticated padlocks but it's an

289
00:12:55,530 --> 00:12:58,740
insecure actually it's an insecure

290
00:12:57,450 --> 00:13:00,720
transmission it's encrypted

291
00:12:58,740 --> 00:13:04,980
it but it's not authenticated which is

292
00:13:00,720 --> 00:13:06,839
to say anybody can send it so there<font color="#E5E5E5"> are</font>

293
00:13:04,980 --> 00:13:08,910
some security weaknesses of the protocol

294
00:13:06,839 --> 00:13:11,790
that I want to highlight so first of all

295
00:13:08,910 --> 00:13:14,819
you have a weird kind of offline read a

296
00:13:11,790 --> 00:13:16,529
relay attack that works for server

297
00:13:14,820 --> 00:13:18,420
impersonation now this<font color="#CCCCCC"> is not a</font>

298
00:13:16,529 --> 00:13:20,040
disastrous<font color="#CCCCCC"> effect but it shows that</font>

299
00:13:18,420 --> 00:13:23,339
there<font color="#E5E5E5"> is a weakness in the protocol</font>

300
00:13:20,040 --> 00:13:26,160
namely the former part of the protocol

301
00:13:23,339 --> 00:13:29,310
which is the identification phase it can

302
00:13:26,160 --> 00:13:30,899
can be you can<font color="#E5E5E5"> spot that it's the same</font>

303
00:13:29,310 --> 00:13:33,239
client and<font color="#E5E5E5"> you can replay it so</font>

304
00:13:30,899 --> 00:13:35,399
basically<font color="#E5E5E5"> what you do as an attacker you</font>

305
00:13:33,240 --> 00:13:37,620
look at the first two messages you let

306
00:13:35,399 --> 00:13:39,450
<font color="#E5E5E5">them pass and for the third one you just</font>

307
00:13:37,620 --> 00:13:43,279
stop it so the<font color="#CCCCCC"> next time the client</font>

308
00:13:39,450 --> 00:13:45,570
actually is it's going to forward this

309
00:13:43,279 --> 00:13:47,820
identifier which is<font color="#E5E5E5"> going to be the same</font>

310
00:13:45,570 --> 00:13:50,339
between<font color="#E5E5E5"> the two knows the two</font><font color="#CCCCCC"> stations</font>

311
00:13:47,820 --> 00:13:52,529
so you're going<font color="#E5E5E5"> to see it you can just</font>

312
00:13:50,339 --> 00:13:55,140
replace authentication challenge and be

313
00:13:52,529 --> 00:13:57,330
<font color="#E5E5E5">identified by the client as the server</font>

314
00:13:55,140 --> 00:14:00,990
of course you won't be able to calculate

315
00:13:57,330 --> 00:14:05,220
the key so it's<font color="#E5E5E5"> just a it's a problem</font>

316
00:14:00,990 --> 00:14:08,970
with authentication but yes so it's

317
00:14:05,220 --> 00:14:12,300
still<font color="#E5E5E5"> a problem so there's some more</font>

318
00:14:08,970 --> 00:14:14,520
problems<font color="#E5E5E5"> with corruptions namely the</font>

319
00:14:12,300 --> 00:14:17,250
they're young and funk showed that

320
00:14:14,520 --> 00:14:20,130
corrupting servers can allow an attacker

321
00:14:17,250 --> 00:14:23,790
<font color="#E5E5E5">to reuse authentication vectors and</font>

322
00:14:20,130 --> 00:14:25,560
impersonate clients<font color="#E5E5E5"> a sorry person a</font>

323
00:14:23,790 --> 00:14:29,300
server to client which is to say<font color="#E5E5E5"> that if</font>

324
00:14:25,560 --> 00:14:34,109
<font color="#CCCCCC">you have a weak partner a</font><font color="#E5E5E5"> week</font><font color="#CCCCCC"> a week</font>

325
00:14:29,300 --> 00:14:37,140
roaming partner that partner can can

326
00:14:34,110 --> 00:14:39,209
have it<font color="#CCCCCC"> it's sessions corrupted and that</font>

327
00:14:37,140 --> 00:14:41,520
information<font color="#CCCCCC"> can</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> used later to extract</font>

328
00:14:39,209 --> 00:14:43,649
information<font color="#E5E5E5"> from the client what we</font>

329
00:14:41,520 --> 00:14:45,689
showed that<font color="#E5E5E5"> okeee guarantees is some</font>

330
00:14:43,649 --> 00:14:47,760
client impersonation security some

331
00:14:45,690 --> 00:14:50,820
server impersonation security and some

332
00:14:47,760 --> 00:14:54,720
<font color="#CCCCCC">security of the keys but where it fails</font>

333
00:14:50,820 --> 00:14:57,860
is that it<font color="#E5E5E5"> does</font><font color="#CCCCCC"> not it is not</font><font color="#E5E5E5"> robust</font>

334
00:14:54,720 --> 00:15:00,660
with respect to a server corruption and

335
00:14:57,860 --> 00:15:05,520
there's also<font color="#E5E5E5"> the problem with the</font>

336
00:15:00,660 --> 00:15:09,420
offline relate now<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> also the</font>

337
00:15:05,520 --> 00:15:11,079
point of privacy here so 3gpp requires

338
00:15:09,420 --> 00:15:13,900
three notions

339
00:15:11,080 --> 00:15:16,270
of privacy identity hiding location

340
00:15:13,900 --> 00:15:19,540
hiding and and traceability strobel and

341
00:15:16,270 --> 00:15:21,550
2007 showed a parallelizable MC catcher

342
00:15:19,540 --> 00:15:23,589
attack which shows<font color="#E5E5E5"> that basically was</font>

343
00:15:21,550 --> 00:15:25,750
just very little effort you can always

344
00:15:23,590 --> 00:15:27,970
find<font color="#CCCCCC"> the permanent identifier of every</font>

345
00:15:25,750 --> 00:15:30,010
<font color="#E5E5E5">single user in the whole network all you</font>

346
00:15:27,970 --> 00:15:33,640
have to do is we<font color="#CCCCCC"> randomized whatever the</font>

347
00:15:30,010 --> 00:15:35,680
the<font color="#E5E5E5"> temporary identifier comes out to be</font>

348
00:15:33,640 --> 00:15:38,620
from the client because in that case the

349
00:15:35,680 --> 00:15:40,359
<font color="#E5E5E5">backup alternative for AK is please can</font>

350
00:15:38,620 --> 00:15:41,680
you<font color="#CCCCCC"> give us your permanent identifier so</font>

351
00:15:40,360 --> 00:15:43,840
you can do this for<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the clients and</font>

352
00:15:41,680 --> 00:15:45,790
all the network is all the time now<font color="#CCCCCC"> I'm</font>

353
00:15:43,840 --> 00:15:47,710
<font color="#E5E5E5">not going to go over everything because</font>

354
00:15:45,790 --> 00:15:50,050
I'm running short on time the point is

355
00:15:47,710 --> 00:15:52,960
<font color="#CCCCCC">that even if you fix this as</font><font color="#E5E5E5"> funding</font>

356
00:15:50,050 --> 00:15:57,579
Brooke did at CVS I think two years<font color="#CCCCCC"> ago</font>

357
00:15:52,960 --> 00:15:58,960
<font color="#E5E5E5">you you're not going to solve this in in</font>

358
00:15:57,580 --> 00:16:03,280
addition<font color="#E5E5E5"> you have a problem</font><font color="#CCCCCC"> with</font>

359
00:15:58,960 --> 00:16:06,490
<font color="#CCCCCC">resynchronize ation namely you can you</font>

360
00:16:03,280 --> 00:16:08,650
can trace an<font color="#CCCCCC"> dich synchronized client</font>

361
00:16:06,490 --> 00:16:10,650
from a non distinct<font color="#CCCCCC"> reliant and you can</font>

362
00:16:08,650 --> 00:16:13,959
force this distinct realization to help

363
00:16:10,650 --> 00:16:15,640
so there's also a third one by TMS

364
00:16:13,960 --> 00:16:17,980
re-allocation but the whole point is

365
00:16:15,640 --> 00:16:21,580
<font color="#CCCCCC">there's no privacy</font><font color="#E5E5E5"> for the AKA protocol</font>

366
00:16:17,980 --> 00:16:23,470
our<font color="#E5E5E5"> counterproposals do fix it both the</font>

367
00:16:21,580 --> 00:16:25,690
security<font color="#E5E5E5"> and the privacy the privacy is</font>

368
00:16:23,470 --> 00:16:29,470
more<font color="#E5E5E5"> involved and it features a more</font>

369
00:16:25,690 --> 00:16:32,590
complex type of encryption for the TMS I

370
00:16:29,470 --> 00:16:35,320
sender sending but the<font color="#E5E5E5"> whole point of</font>

371
00:16:32,590 --> 00:16:38,040
this is is just sufficient for 5g

372
00:16:35,320 --> 00:16:41,310
networks there is the advent<font color="#E5E5E5"> of the 5g</font>

373
00:16:38,040 --> 00:16:44,380
the<font color="#CCCCCC"> fifth generation mobile networks and</font>

374
00:16:41,310 --> 00:16:47,709
those will also need<font color="#CCCCCC"> Daka protocol so</font>

375
00:16:44,380 --> 00:16:49,630
there<font color="#E5E5E5"> are some some more important AKA</font>

376
00:16:47,710 --> 00:16:52,870
problems than just security and privacy

377
00:16:49,630 --> 00:16:54,970
in this respect namely we<font color="#CCCCCC"> have some</font>

378
00:16:52,870 --> 00:16:56,710
problems with respect to end to end

379
00:16:54,970 --> 00:16:59,200
encryption it does not exist because

380
00:16:56,710 --> 00:17:00,460
everything goes through<font color="#CCCCCC"> the operator so</font>

381
00:16:59,200 --> 00:17:02,350
this<font color="#E5E5E5"> is something that we should think</font>

382
00:17:00,460 --> 00:17:04,630
<font color="#E5E5E5">about how do we get end-to-end</font>

383
00:17:02,350 --> 00:17:06,579
encryption for<font color="#E5E5E5"> friday networks how do we</font>

384
00:17:04,630 --> 00:17:08,380
get peer-to-peer communication on 5g

385
00:17:06,579 --> 00:17:12,458
networks this only works<font color="#CCCCCC"> for</font><font color="#E5E5E5"> through the</font>

386
00:17:08,380 --> 00:17:14,949
servers at the moment<font color="#E5E5E5"> so all of this has</font>

387
00:17:12,459 --> 00:17:18,310
<font color="#CCCCCC">to be solved for 5g networks so in</font>

388
00:17:14,949 --> 00:17:21,400
perspective the 3g and 4g AKA protocol

389
00:17:18,310 --> 00:17:23,500
has limited security has no privacy we

390
00:17:21,400 --> 00:17:24,089
can fix<font color="#CCCCCC"> this so that it has some</font>

391
00:17:23,500 --> 00:17:25,859
security

392
00:17:24,089 --> 00:17:28,319
and some privacy but this<font color="#E5E5E5"> is not</font>

393
00:17:25,859 --> 00:17:31,080
sufficient for 5g networks so I<font color="#CCCCCC"> think</font>

394
00:17:28,319 --> 00:17:34,139
just as we have done for TLS when we

395
00:17:31,080 --> 00:17:38,490
went from 1.2 1.3 what we actually need

396
00:17:34,140 --> 00:17:41,460
is the same<font color="#E5E5E5"> kind of leap from 3g 4g to</font>

397
00:17:38,490 --> 00:17:43,529
5g for a kak protocol taking<font color="#E5E5E5"> into</font>

398
00:17:41,460 --> 00:17:46,020
account speed because that's very

399
00:17:43,529 --> 00:17:47,909
important for<font color="#E5E5E5"> all operators taking into</font>

400
00:17:46,020 --> 00:17:50,400
account compliance with the law and

401
00:17:47,909 --> 00:17:52,559
taking into<font color="#CCCCCC"> account the new network</font>

402
00:17:50,400 --> 00:17:56,029
infrastructure that 5g networks are

403
00:17:52,559 --> 00:17:56,029
going to have thank you very much

