1
00:11:59,280 --> 00:12:04,419
all right

2
00:12:00,879 --> 00:12:07,119
let's all gather in the center of the

3
00:12:04,419 --> 00:12:10,350
room and two minutes or so we'll get

4
00:12:07,119 --> 00:12:10,350
started with the afternoon session

5
00:14:58,639 --> 00:15:04,949
okay as people stream in I'd like to

6
00:15:03,299 --> 00:15:07,649
welcome everybody to the afternoon

7
00:15:04,949 --> 00:15:10,709
session of the first day of real world

8
00:15:07,649 --> 00:15:14,209
cryptography this session will be

9
00:15:10,709 --> 00:15:17,040
focused on secure communications and

10
00:15:14,209 --> 00:15:20,309
there's some some great talks coming up

11
00:15:17,040 --> 00:15:21,238
so first let's see the doors are closed

12
00:15:20,309 --> 00:15:23,269
- closed

13
00:15:21,239 --> 00:15:26,489
I hear quiet going over the room all

14
00:15:23,269 --> 00:15:29,160
right now we're all ready okay so first

15
00:15:26,489 --> 00:15:31,290
I'd like to - it's my pleasure to

16
00:15:29,160 --> 00:15:45,959
welcome the diem kebaya see who's going

17
00:15:31,290 --> 00:15:49,309
to talk about noise explorer la la la

18
00:15:45,959 --> 00:15:51,660
okay well great great awesome

19
00:15:49,309 --> 00:15:54,360
well thank you very much for being here

20
00:15:51,660 --> 00:15:55,980
and thank you for giving me this great

21
00:15:54,360 --> 00:15:57,839
opportunity to talk about my research

22
00:15:55,980 --> 00:15:59,790
which I really care about and I really

23
00:15:57,839 --> 00:16:04,410
hope is useful to you all so thank you

24
00:15:59,790 --> 00:16:06,449
thank you very much this is a joint work

25
00:16:04,410 --> 00:16:08,610
with my thesis adviser Karthik peg devon

26
00:16:06,449 --> 00:16:09,868
who is here against here in the audience

27
00:16:08,610 --> 00:16:13,410
potentially against as well

28
00:16:09,869 --> 00:16:15,480
no one knows we'll find out it's called

29
00:16:13,410 --> 00:16:17,819
noise explorer the fully automated

30
00:16:15,480 --> 00:16:21,660
modeling analysis and verification for

31
00:16:17,819 --> 00:16:23,128
arbitrary noise protocols so noise

32
00:16:21,660 --> 00:16:25,049
protocols that's a bit misleading when

33
00:16:23,129 --> 00:16:27,629
you first hear that you'll think there

34
00:16:25,049 --> 00:16:29,850
are protocols called noise protocol but

35
00:16:27,629 --> 00:16:31,559
that's not necessarily true because

36
00:16:29,850 --> 00:16:33,779
noise is actually a protocol framework

37
00:16:31,559 --> 00:16:35,610
which is a framework for secure channel

38
00:16:33,779 --> 00:16:38,850
protocols not disk encryption protocols

39
00:16:35,610 --> 00:16:40,919
or anything like that so noise is

40
00:16:38,850 --> 00:16:43,499
actually a framework for designing

41
00:16:40,919 --> 00:16:45,149
crypto protocols they're based on

42
00:16:43,499 --> 00:16:46,499
difficult and key agreement that kinda

43
00:16:45,149 --> 00:16:48,329
maybe look a little bit like something

44
00:16:46,499 --> 00:16:51,119
like TLS like any other secure channel

45
00:16:48,329 --> 00:16:53,689
system but they're not tillis and the

46
00:16:51,119 --> 00:16:57,149
most interesting part of noise is

47
00:16:53,689 --> 00:16:58,589
actually the fact that the framework the

48
00:16:57,149 --> 00:17:00,179
noise protocol framework has a simple

49
00:16:58,589 --> 00:17:02,279
language for describing the messages

50
00:17:00,179 --> 00:17:05,039
within the noise protocol and from that

51
00:17:02,279 --> 00:17:07,289
language which looks by the way

52
00:17:05,039 --> 00:17:09,809
something like that see on the right so

53
00:17:07,289 --> 00:17:10,869
that's a full noise handshake pattern

54
00:17:09,809 --> 00:17:14,160
which is a

55
00:17:10,869 --> 00:17:17,530
a noise protocol from that description

56
00:17:14,160 --> 00:17:19,209
you have a you have the complex state

57
00:17:17,530 --> 00:17:23,020
transformations which are specified in

58
00:17:19,209 --> 00:17:25,000
the noise specification and they

59
00:17:23,020 --> 00:17:26,500
essentially say well this tokens here

60
00:17:25,000 --> 00:17:28,480
we're gonna have that transcript hash

61
00:17:26,500 --> 00:17:31,150
mixed in and so on so all of these rules

62
00:17:28,480 --> 00:17:33,220
contained in the noise spec K Ken and

63
00:17:31,150 --> 00:17:35,850
then you get a whole secure channel

64
00:17:33,220 --> 00:17:39,450
protocol thing which is really cool now

65
00:17:35,850 --> 00:17:43,689
the author of noise is Trevor Perrin

66
00:17:39,450 --> 00:17:46,600
this is Trevor pear and he gave an

67
00:17:43,690 --> 00:17:49,179
excellent talk about noise last year

68
00:17:46,600 --> 00:17:51,550
here at preload crypto 2018 it was held

69
00:17:49,179 --> 00:17:53,970
in Zurich so please check out his talk

70
00:17:51,550 --> 00:17:56,080
he created noise I did not make noise

71
00:17:53,970 --> 00:17:58,780
except for now I'm certainly making a

72
00:17:56,080 --> 00:18:00,730
lot of noise but thanks Ben it was a

73
00:17:58,780 --> 00:18:05,050
great joke my friend Ben told me this

74
00:18:00,730 --> 00:18:06,790
joke and so yeah it's on YouTube and the

75
00:18:05,050 --> 00:18:10,300
link is on the screen and it's no longer

76
00:18:06,790 --> 00:18:12,460
okay alright so let's try to understand

77
00:18:10,300 --> 00:18:18,428
the notation of noise so you have this

78
00:18:12,460 --> 00:18:21,130
thing on the right which says I K and if

79
00:18:18,429 --> 00:18:23,590
I can okay so this is like the name of

80
00:18:21,130 --> 00:18:25,090
it and then you have these tokens so if

81
00:18:23,590 --> 00:18:26,530
you have an arrow going from left to

82
00:18:25,090 --> 00:18:28,629
right it means that the initiator or

83
00:18:26,530 --> 00:18:30,970
alice is sending a message to Bob the

84
00:18:28,630 --> 00:18:32,080
responder if you have a arrow going from

85
00:18:30,970 --> 00:18:33,670
right to left it means that the

86
00:18:32,080 --> 00:18:35,439
responder Bob is replying to the

87
00:18:33,670 --> 00:18:38,559
initiator Alice and when you have these

88
00:18:35,440 --> 00:18:40,270
ellipses three dots it means that

89
00:18:38,559 --> 00:18:43,660
whatever happened before actually

90
00:18:40,270 --> 00:18:45,340
happened before the session started and

91
00:18:43,660 --> 00:18:47,610
people started talking and the protocol

92
00:18:45,340 --> 00:18:50,678
was live so if you have this thing here

93
00:18:47,610 --> 00:18:54,840
like an S token this is like a you know

94
00:18:50,679 --> 00:18:57,610
before the protocol started Bob sent his

95
00:18:54,840 --> 00:19:01,629
long term static pre key maybe for

96
00:18:57,610 --> 00:19:05,050
example to Alice and when the protocol

97
00:19:01,630 --> 00:19:08,590
started Alice sent a public ephemeral

98
00:19:05,050 --> 00:19:11,980
key to Bob and she also did for example

99
00:19:08,590 --> 00:19:15,399
a diffie-hellman shared secret

100
00:19:11,980 --> 00:19:17,919
derivation using her private

101
00:19:15,399 --> 00:19:20,110
ephemeral key and Bob's public static

102
00:19:17,919 --> 00:19:22,840
key and so on and so forth and so every

103
00:19:20,110 --> 00:19:24,580
one of these arrows especially after the

104
00:19:22,840 --> 00:19:26,590
only after the ellipses actually also

105
00:19:24,580 --> 00:19:27,939
could contain a payload and these Pitts

106
00:19:26,590 --> 00:19:29,379
which is a like a message of photo

107
00:19:27,940 --> 00:19:31,659
whatever and these payloads are

108
00:19:29,380 --> 00:19:33,220
opportunistically encrypted as well so

109
00:19:31,659 --> 00:19:36,340
once we have shared secret agreement

110
00:19:33,220 --> 00:19:40,570
encryption on certain payload elements

111
00:19:36,340 --> 00:19:41,980
kicks in automatically now as I said you

112
00:19:40,570 --> 00:19:46,629
know this is a really simple language

113
00:19:41,980 --> 00:19:49,269
right so noise tries to be secure by

114
00:19:46,630 --> 00:19:52,649
default it tries to be mistake proof and

115
00:19:49,269 --> 00:19:54,909
so a lot of the operations within noise

116
00:19:52,649 --> 00:19:57,879
the cryptographic operations like

117
00:19:54,909 --> 00:19:59,889
encrypt and hash or HK DF the state

118
00:19:57,879 --> 00:20:01,740
objects like cipher state symmetric

119
00:19:59,889 --> 00:20:03,908
state handshake state and by the way

120
00:20:01,740 --> 00:20:07,179
each of these is contained within the

121
00:20:03,909 --> 00:20:08,860
one coming after it or the actual state

122
00:20:07,179 --> 00:20:10,330
transformations are all defined in the

123
00:20:08,860 --> 00:20:12,610
spec and there's a bunch of rules that

124
00:20:10,330 --> 00:20:14,860
says well oh if a token comes after

125
00:20:12,610 --> 00:20:16,658
whatever token in that position well

126
00:20:14,860 --> 00:20:18,428
then you need to do a mix hash and and

127
00:20:16,659 --> 00:20:20,289
so if you actually implement things

128
00:20:18,429 --> 00:20:22,629
according to those rules you are

129
00:20:20,289 --> 00:20:26,200
supposed to end up with a secure channel

130
00:20:22,629 --> 00:20:28,000
protocol that does the best it can with

131
00:20:26,200 --> 00:20:30,039
the amount of keys available to it

132
00:20:28,000 --> 00:20:33,100
according to what you yourself wrote

133
00:20:30,039 --> 00:20:36,429
here right and so that is the goal of

134
00:20:33,100 --> 00:20:40,570
noise now noise is used in many cool

135
00:20:36,429 --> 00:20:43,690
applications such as whatsapp have you

136
00:20:40,570 --> 00:20:46,840
heard of it people use it and so it uses

137
00:20:43,690 --> 00:20:49,570
noise and also sorry also wire guard

138
00:20:46,840 --> 00:20:51,668
which is a cool new open-source project

139
00:20:49,570 --> 00:20:53,168
by Jason donenfeld you should check it

140
00:20:51,669 --> 00:20:58,379
out it's an open source project

141
00:20:53,169 --> 00:21:02,730
it's a VPN it also uses noise and so now

142
00:20:58,379 --> 00:21:04,750
noise as I said earlier in my talk is a

143
00:21:02,730 --> 00:21:06,070
protocol framework there's not like in

144
00:21:04,750 --> 00:21:07,779
TLS you have a single protocol it's

145
00:21:06,070 --> 00:21:09,100
called TLS and signal protocol you have

146
00:21:07,779 --> 00:21:11,049
a single protocol that's called a signal

147
00:21:09,100 --> 00:21:11,500
protocol and noise there is no such

148
00:21:11,049 --> 00:21:13,179
thing

149
00:21:11,500 --> 00:21:14,710
there's a million protocols there's an

150
00:21:13,179 --> 00:21:17,019
unbounded number of noise protocols and

151
00:21:14,710 --> 00:21:19,779
so the noise authors knew this of course

152
00:21:17,019 --> 00:21:22,149
and they developed a grade based system

153
00:21:19,779 --> 00:21:24,159
for trying to understand the security

154
00:21:22,149 --> 00:21:25,809
goals and what exactly each noise

155
00:21:24,159 --> 00:21:28,880
handshake pattern achieves at which

156
00:21:25,809 --> 00:21:30,530
potential message in terms of often

157
00:21:28,880 --> 00:21:32,180
occasion and also in terms of

158
00:21:30,530 --> 00:21:33,920
confidentiality so there's three

159
00:21:32,180 --> 00:21:35,810
authentication grades we expand them

160
00:21:33,920 --> 00:21:37,630
these two five in our analysis but

161
00:21:35,810 --> 00:21:39,679
that's not important and there's six

162
00:21:37,630 --> 00:21:41,240
confidentiality grades there's also

163
00:21:39,680 --> 00:21:44,650
something called identity hiding because

164
00:21:41,240 --> 00:21:47,140
noise actually will also encrypt your

165
00:21:44,650 --> 00:21:49,430
long-term identity key or static key

166
00:21:47,140 --> 00:21:51,400
opportunistically and so identity hiding

167
00:21:49,430 --> 00:21:53,510
is whether it will reveal to an observer

168
00:21:51,400 --> 00:21:54,950
your identity key or not we don't

169
00:21:53,510 --> 00:21:56,950
analyze that but it's important because

170
00:21:54,950 --> 00:22:00,140
the noise spec certainly talks about it

171
00:21:56,950 --> 00:22:02,150
so in terms of authentication grades you

172
00:22:00,140 --> 00:22:03,830
can start with level 0 which is just no

173
00:22:02,150 --> 00:22:05,360
authentication this payload may have

174
00:22:03,830 --> 00:22:07,490
been sent by any party including an

175
00:22:05,360 --> 00:22:10,429
active attacker and so here this message

176
00:22:07,490 --> 00:22:12,200
has a zero authentication grade and you

177
00:22:10,430 --> 00:22:13,730
can go all the way up to two which is

178
00:22:12,200 --> 00:22:15,170
that assuming the corresponding private

179
00:22:13,730 --> 00:22:18,470
keys are secure this authentication

180
00:22:15,170 --> 00:22:20,750
cannot be forged with confidentiality

181
00:22:18,470 --> 00:22:22,900
you can start with zero which means that

182
00:22:20,750 --> 00:22:25,730
this payload is sent in clear text and

183
00:22:22,900 --> 00:22:27,470
you can go all the way up to five which

184
00:22:25,730 --> 00:22:28,910
means strong forward secrecy assuming

185
00:22:27,470 --> 00:22:30,860
the ephemeral private keys are secure

186
00:22:28,910 --> 00:22:32,570
and that of course the recipient is not

187
00:22:30,860 --> 00:22:35,330
being actively impersonated in the

188
00:22:32,570 --> 00:22:36,800
middle of the session then this payload

189
00:22:35,330 --> 00:22:38,149
just simply could not be encrypted and

190
00:22:36,800 --> 00:22:40,399
you have a lot of weak forward secrecy

191
00:22:38,150 --> 00:22:42,020
stuff in between so for example this

192
00:22:40,400 --> 00:22:43,580
last message which by the way has no

193
00:22:42,020 --> 00:22:44,840
tokens which means it's just the payload

194
00:22:43,580 --> 00:22:48,020
message there's no fancy diffie-hellman

195
00:22:44,840 --> 00:22:49,250
stuff I just spotted mr. Whitfield

196
00:22:48,020 --> 00:22:52,850
Diffie while saying that what a

197
00:22:49,250 --> 00:22:54,260
coincidence sorry I I am very nervous at

198
00:22:52,850 --> 00:22:56,689
the moment and therefore saying things

199
00:22:54,260 --> 00:22:58,330
that I shouldn't be saying I don't know

200
00:22:56,690 --> 00:23:00,980
whether you've noticed that

201
00:22:58,330 --> 00:23:04,159
physiological effect that I'm exhibiting

202
00:23:00,980 --> 00:23:07,940
at them all right so there are there are

203
00:23:04,160 --> 00:23:11,450
so many security goals 50 plus handshake

204
00:23:07,940 --> 00:23:14,540
patterns in the spec alone so how do we

205
00:23:11,450 --> 00:23:16,730
verify all of these protocols against

206
00:23:14,540 --> 00:23:19,540
these security goals I mean if you if

207
00:23:16,730 --> 00:23:22,870
you just look at the noise spec alone

208
00:23:19,540 --> 00:23:25,280
you'll see that there's about 60 or 55

209
00:23:22,870 --> 00:23:28,790
noise handshake patterns defined in the

210
00:23:25,280 --> 00:23:30,139
spec so if we have a security query like

211
00:23:28,790 --> 00:23:32,090
trying to verify something based on

212
00:23:30,140 --> 00:23:33,530
every one of these then that's like 500

213
00:23:32,090 --> 00:23:35,149
security queries that we're gonna have

214
00:23:33,530 --> 00:23:36,560
to manually prove right because we're

215
00:23:35,150 --> 00:23:38,180
cryptographers want to be rigorous we

216
00:23:36,560 --> 00:23:39,409
want to prove everything and so that's a

217
00:23:38,180 --> 00:23:40,820
lot of them you're gonna spend a lot of

218
00:23:39,410 --> 00:23:42,410
time you're not going to see the world

219
00:23:40,820 --> 00:23:45,860
you're not going to visit Japan

220
00:23:42,410 --> 00:23:47,600
it's gonna be a problem and so noise

221
00:23:45,860 --> 00:23:48,860
also don't forget let's not forget one

222
00:23:47,600 --> 00:23:50,990
of the more important parts of noise

223
00:23:48,860 --> 00:23:52,070
which is that it allows for use case

224
00:23:50,990 --> 00:23:54,530
specific protocols

225
00:23:52,070 --> 00:23:56,000
so maybe TLS shouldn't be the answer for

226
00:23:54,530 --> 00:23:57,649
everything maybe have a use case where

227
00:23:56,000 --> 00:23:58,880
you can't really obtain the keys at the

228
00:23:57,650 --> 00:24:01,160
right time you can't obtain a

229
00:23:58,880 --> 00:24:02,690
certificate at all you can't do some of

230
00:24:01,160 --> 00:24:04,520
the stuff that TLS requires or you just

231
00:24:02,690 --> 00:24:06,080
want to something more streamlined and

232
00:24:04,520 --> 00:24:07,870
noise really allows you to do this

233
00:24:06,080 --> 00:24:10,040
because it allows you to design your own

234
00:24:07,870 --> 00:24:12,739
protocol that can really fit your use

235
00:24:10,040 --> 00:24:15,500
case so how can we ascertain in this

236
00:24:12,740 --> 00:24:18,080
even more interesting context which

237
00:24:15,500 --> 00:24:19,940
security promise any noise handshake

238
00:24:18,080 --> 00:24:22,730
pattern can give right especially if you

239
00:24:19,940 --> 00:24:23,660
want people to design their own what an

240
00:24:22,730 --> 00:24:28,160
interesting problem

241
00:24:23,660 --> 00:24:29,710
well introducing for the first time in

242
00:24:28,160 --> 00:24:33,650
the United States

243
00:24:29,710 --> 00:24:36,500
noise Explorer Wow it's amazing it

244
00:24:33,650 --> 00:24:38,360
allows you to verify any noise handshake

245
00:24:36,500 --> 00:24:41,060
pattern how does it do that

246
00:24:38,360 --> 00:24:43,580
there's an unbounded number of them well

247
00:24:41,060 --> 00:24:45,800
you can design noise protocols and

248
00:24:43,580 --> 00:24:47,560
immediately obtain to spec validity

249
00:24:45,800 --> 00:24:51,409
checks and helpful visualizations

250
00:24:47,560 --> 00:24:52,850
pictures everyone likes that you can

251
00:24:51,410 --> 00:24:55,280
generate models for form of verification

252
00:24:52,850 --> 00:24:57,350
now this is the more interesting part so

253
00:24:55,280 --> 00:24:59,780
you can obtain you can enter any

254
00:24:57,350 --> 00:25:02,899
description for any noise protocol

255
00:24:59,780 --> 00:25:05,330
pattern noise handshake pattern and you

256
00:25:02,900 --> 00:25:07,160
can immediately from there obtain a

257
00:25:05,330 --> 00:25:08,870
formal verification model and you can

258
00:25:07,160 --> 00:25:10,040
just get the security the answer to the

259
00:25:08,870 --> 00:25:12,889
securityq we're is you know does this

260
00:25:10,040 --> 00:25:14,570
achieve authentication security grade

261
00:25:12,890 --> 00:25:16,310
one two three four does this achieve

262
00:25:14,570 --> 00:25:17,840
confidentiality grade one two three four

263
00:25:16,310 --> 00:25:19,159
five immediately

264
00:25:17,840 --> 00:25:20,540
well after running the form of

265
00:25:19,160 --> 00:25:22,250
verification model which in many cases

266
00:25:20,540 --> 00:25:24,879
is not very immediate but you get the

267
00:25:22,250 --> 00:25:27,320
point and these are these are run with

268
00:25:24,880 --> 00:25:29,090
top-level processes with the security

269
00:25:27,320 --> 00:25:30,649
goals already generated and also in a

270
00:25:29,090 --> 00:25:33,080
very ambitious model that includes a

271
00:25:30,650 --> 00:25:35,420
compromise principle right I'll get to

272
00:25:33,080 --> 00:25:37,220
what that means in a bit and you also

273
00:25:35,420 --> 00:25:39,980
have because of these models take a very

274
00:25:37,220 --> 00:25:42,080
long and you have a noise Explorer

275
00:25:39,980 --> 00:25:43,490
compendium so I've already run a lot of

276
00:25:42,080 --> 00:25:46,090
these models and there's a compendium

277
00:25:43,490 --> 00:25:49,520
that shows you the results for the

278
00:25:46,090 --> 00:25:52,189
models that were run and this is very

279
00:25:49,520 --> 00:25:54,410
new new announcing today for the first

280
00:25:52,190 --> 00:25:55,740
time very soon you'll be able to

281
00:25:54,410 --> 00:25:57,360
generate implementation

282
00:25:55,740 --> 00:25:58,970
so you a noise explorer will also you

283
00:25:57,360 --> 00:26:00,689
just enter the noise protocol handshake

284
00:25:58,970 --> 00:26:02,550
description which is just the little

285
00:26:00,690 --> 00:26:06,980
things I put on the right earlier and

286
00:26:02,550 --> 00:26:10,620
from there you will immediately obtain a

287
00:26:06,980 --> 00:26:12,090
full implementation I'm almost done I'm

288
00:26:10,620 --> 00:26:14,010
just doing interrupts testing on the

289
00:26:12,090 --> 00:26:17,820
JavaScript part now but I'm also gonna

290
00:26:14,010 --> 00:26:19,379
do go and other languages could be there

291
00:26:17,820 --> 00:26:21,928
I didn't pick these two languages either

292
00:26:19,380 --> 00:26:24,990
for I just know them well and use them a

293
00:26:21,929 --> 00:26:27,330
lot but we can do C++ with Java it's

294
00:26:24,990 --> 00:26:28,590
fine any language really in the future

295
00:26:27,330 --> 00:26:30,570
if your this is all open-source software

296
00:26:28,590 --> 00:26:32,610
you can all contribute to it most

297
00:26:30,570 --> 00:26:36,540
welcome but what is formal verification

298
00:26:32,610 --> 00:26:38,189
with probe arif so I studied in Europe

299
00:26:36,540 --> 00:26:41,250
and in North America formal verification

300
00:26:38,190 --> 00:26:44,210
is maybe I'm wrong but it's not as

301
00:26:41,250 --> 00:26:45,950
well-known in my experience and so

302
00:26:44,210 --> 00:26:48,809
automated form of verification

303
00:26:45,950 --> 00:26:50,850
essentially is an approach to beat this

304
00:26:48,809 --> 00:26:53,160
thing that's happening a lot in applied

305
00:26:50,850 --> 00:26:56,730
crypto which is to code first and

306
00:26:53,160 --> 00:27:00,270
specify later if ever write you a lot of

307
00:26:56,730 --> 00:27:01,890
crypto systems that this is if you look

308
00:27:00,270 --> 00:27:07,950
at the history and evolution of TLS so

309
00:27:01,890 --> 00:27:09,480
TLS 1.0 1.2 1.1 people really were being

310
00:27:07,950 --> 00:27:10,950
very pragmatic about it and then one and

311
00:27:09,480 --> 00:27:15,870
then there were a lot of attacks drown

312
00:27:10,950 --> 00:27:18,210
smack free whatever and poodle and and

313
00:27:15,870 --> 00:27:21,600
and on all of those attacks and so in

314
00:27:18,210 --> 00:27:22,890
TLS 1.3 the form of verification and the

315
00:27:21,600 --> 00:27:24,360
there was a lot more academic

316
00:27:22,890 --> 00:27:26,640
involvement and so people are moving

317
00:27:24,360 --> 00:27:28,379
towards a specify first and code

318
00:27:26,640 --> 00:27:30,630
aftermath apology which maybe is more

319
00:27:28,380 --> 00:27:33,380
fruitful now there are two main models

320
00:27:30,630 --> 00:27:35,820
for formal verification you got the

321
00:27:33,380 --> 00:27:37,650
symbolic model and computational model

322
00:27:35,820 --> 00:27:39,809
I'm not going to get into those a lot

323
00:27:37,650 --> 00:27:42,179
other than to say that we're using the

324
00:27:39,809 --> 00:27:43,770
symbolic model where essentially it's

325
00:27:42,179 --> 00:27:45,540
fully automated the computational model

326
00:27:43,770 --> 00:27:48,059
acts as a proof assistant a lot of the

327
00:27:45,540 --> 00:27:50,190
time and we can model protocol flows and

328
00:27:48,059 --> 00:27:51,510
try to find contradictions to security

329
00:27:50,190 --> 00:27:55,260
queries so we model the flow of the

330
00:27:51,510 --> 00:27:56,850
protocol we say all right well the i ka

331
00:27:55,260 --> 00:27:58,679
noise pattern is going to be executed

332
00:27:56,850 --> 00:28:00,629
between Alice who's talking to Bob and

333
00:27:58,679 --> 00:28:02,700
Charlie Bob who's responding to Alice

334
00:28:00,630 --> 00:28:04,110
and charlie and by the way Charlie's

335
00:28:02,700 --> 00:28:06,600
fully compromised and controlled by the

336
00:28:04,110 --> 00:28:08,668
attacker what and there's an unbounded

337
00:28:06,600 --> 00:28:09,600
number of messages and an unbounded

338
00:28:08,669 --> 00:28:12,330
number of sessions

339
00:28:09,600 --> 00:28:13,889
so what are the security goals that are

340
00:28:12,330 --> 00:28:15,649
accomplished in that setting and then we

341
00:28:13,890 --> 00:28:17,460
ask well we formalize what

342
00:28:15,650 --> 00:28:19,350
authentication one means and what

343
00:28:17,460 --> 00:28:21,300
authentication four means and so on and

344
00:28:19,350 --> 00:28:23,730
we say well which one of these are going

345
00:28:21,300 --> 00:28:25,409
to be met so that's what we're trying to

346
00:28:23,730 --> 00:28:26,910
do and we're trying to do that with

347
00:28:25,410 --> 00:28:29,010
probe arif which is the tool for

348
00:28:26,910 --> 00:28:32,370
symbolic automated form of verification

349
00:28:29,010 --> 00:28:35,580
developed at inria in Paris where I did

350
00:28:32,370 --> 00:28:37,739
my PhD with it's developed by Bruno

351
00:28:35,580 --> 00:28:40,260
blonde Shea and his team you can check

352
00:28:37,740 --> 00:28:42,990
it out it's open source software at this

353
00:28:40,260 --> 00:28:45,210
URL there's a very comprehensive manual

354
00:28:42,990 --> 00:28:47,490
also if you're interested in getting

355
00:28:45,210 --> 00:28:50,190
into it and I strongly recommend you do

356
00:28:47,490 --> 00:28:52,080
it's really cool stuff so if you're

357
00:28:50,190 --> 00:28:54,870
looking for examples on how to use probe

358
00:28:52,080 --> 00:28:56,760
arif you can just generate a model using

359
00:28:54,870 --> 00:28:58,439
noise Explorer actually but also for

360
00:28:56,760 --> 00:29:00,629
other use cases I recently defended my

361
00:28:58,440 --> 00:29:02,340
PhD and there's many many many use cases

362
00:29:00,630 --> 00:29:03,630
on Pro verified did a lot of stuff with

363
00:29:02,340 --> 00:29:08,189
prover if you can download that and

364
00:29:03,630 --> 00:29:10,080
check it out so in prover actually

365
00:29:08,190 --> 00:29:14,100
what's interesting in the symbolic model

366
00:29:10,080 --> 00:29:17,280
is that many notions of having

367
00:29:14,100 --> 00:29:19,740
information inside cryptographic

368
00:29:17,280 --> 00:29:21,270
constructions are reduced to basically

369
00:29:19,740 --> 00:29:23,430
symbolic elements so essentially all

370
00:29:21,270 --> 00:29:25,740
cryptographic primitives are perfect

371
00:29:23,430 --> 00:29:26,970
primitives your hash function as a

372
00:29:25,740 --> 00:29:28,470
matter of fact is a perfect one-way

373
00:29:26,970 --> 00:29:30,180
function every time there's no such

374
00:29:28,470 --> 00:29:32,510
thing as a hash function with a that's

375
00:29:30,180 --> 00:29:34,740
vulnerable to a length extension attack

376
00:29:32,510 --> 00:29:36,330
at the same time so if you look at the

377
00:29:34,740 --> 00:29:38,010
right here you'll see that you know

378
00:29:36,330 --> 00:29:39,290
diffie-hellman expand initiation takes

379
00:29:38,010 --> 00:29:42,870
two keys and gives you a key and

380
00:29:39,290 --> 00:29:45,870
actually if you have G to the a to the B

381
00:29:42,870 --> 00:29:49,580
it is equal to G to the B to the a right

382
00:29:45,870 --> 00:29:51,389
and so this for this is a very naive

383
00:29:49,580 --> 00:29:54,060
encapsulation of diffie-hellman but you

384
00:29:51,390 --> 00:29:56,040
can kind of see how this is represented

385
00:29:54,060 --> 00:29:59,570
using the symbolic model and I hope this

386
00:29:56,040 --> 00:30:02,340
is useful so this is how we represent

387
00:29:59,570 --> 00:30:03,689
encryption so you get a key a nonce a

388
00:30:02,340 --> 00:30:05,370
bit string and a bit string and you get

389
00:30:03,690 --> 00:30:06,680
a bit string right since so this is for

390
00:30:05,370 --> 00:30:09,179
example the key the nonce the

391
00:30:06,680 --> 00:30:11,190
authenticated additional data associated

392
00:30:09,180 --> 00:30:13,290
data and then this is the plain text and

393
00:30:11,190 --> 00:30:15,510
you get free text right and decryption

394
00:30:13,290 --> 00:30:18,720
is actually a reduction of that to

395
00:30:15,510 --> 00:30:20,160
deconstruct it back to the plain text if

396
00:30:18,720 --> 00:30:21,690
if the key and the nonce and the

397
00:30:20,160 --> 00:30:23,340
associated data all match and then you

398
00:30:21,690 --> 00:30:25,140
get a boolean that says whether

399
00:30:23,340 --> 00:30:26,550
the decryption was valid or not and so

400
00:30:25,140 --> 00:30:30,990
for example this is a naive way to

401
00:30:26,550 --> 00:30:35,159
capture a s GCM or extra poly 1305 or

402
00:30:30,990 --> 00:30:37,080
any similar primitive right and then we

403
00:30:35,160 --> 00:30:38,940
essentially have a common state

404
00:30:37,080 --> 00:30:40,740
management library which is written by

405
00:30:38,940 --> 00:30:42,630
hand and not generated using res

406
00:30:40,740 --> 00:30:44,010
Explorer but that's it and the rest is

407
00:30:42,630 --> 00:30:48,330
fully generated using noise Explorer and

408
00:30:44,010 --> 00:30:51,090
so our findings were we analyzed more

409
00:30:48,330 --> 00:30:53,250
than 50 noise handshake patterns taken

410
00:30:51,090 --> 00:30:56,550
from the noise in itself and we

411
00:30:53,250 --> 00:30:58,620
confirmed that the so Trevor and his

412
00:30:56,550 --> 00:31:00,300
team already had numbers for many of

413
00:30:58,620 --> 00:31:01,500
these patterns not all of them but many

414
00:31:00,300 --> 00:31:03,840
of them and we confirmed that these

415
00:31:01,500 --> 00:31:05,940
numbers were correct so great we were

416
00:31:03,840 --> 00:31:07,649
able to say formally that these

417
00:31:05,940 --> 00:31:09,840
predictions were correct and we were

418
00:31:07,650 --> 00:31:12,500
able to offer a new verification for new

419
00:31:09,840 --> 00:31:16,110
patterns that are always increasing and

420
00:31:12,500 --> 00:31:18,690
we essentially also showed so noise has

421
00:31:16,110 --> 00:31:20,939
very intricate validity rules that can

422
00:31:18,690 --> 00:31:22,770
sometimes you can sometimes make subtle

423
00:31:20,940 --> 00:31:24,120
mistakes and this is being worked on but

424
00:31:22,770 --> 00:31:25,920
we showed that if you do make a mistake

425
00:31:24,120 --> 00:31:27,929
in the validity rules that are in the

426
00:31:25,920 --> 00:31:29,160
noise specification then some very

427
00:31:27,930 --> 00:31:32,070
subtle attacks can be found so you

428
00:31:29,160 --> 00:31:33,210
better have a way to follow those design

429
00:31:32,070 --> 00:31:36,060
rules so you don't come up with some

430
00:31:33,210 --> 00:31:38,970
broken or less secure noise handshake

431
00:31:36,060 --> 00:31:40,830
patterns secure channels so we also

432
00:31:38,970 --> 00:31:42,450
contributed some improvements to

433
00:31:40,830 --> 00:31:44,280
revision 34 which is currently the

434
00:31:42,450 --> 00:31:47,370
latest revision of the noise and the

435
00:31:44,280 --> 00:31:49,379
noise protocol framework and we defined

436
00:31:47,370 --> 00:31:51,090
what we have now we have more well

437
00:31:49,380 --> 00:31:54,690
defined pattern validity rules to help

438
00:31:51,090 --> 00:31:56,250
avoid misunderstandings and we also of

439
00:31:54,690 --> 00:31:57,960
course have higher assurance for

440
00:31:56,250 --> 00:31:59,250
fundamental pattern security grace based

441
00:31:57,960 --> 00:32:01,260
on the fact that we have all of these

442
00:31:59,250 --> 00:32:04,590
numbers all of these grades being

443
00:32:01,260 --> 00:32:07,830
assigned and that now unlike before they

444
00:32:04,590 --> 00:32:10,260
are related to actual form of

445
00:32:07,830 --> 00:32:12,810
verification not just you know Trevor

446
00:32:10,260 --> 00:32:14,970
and his team manually for every one of

447
00:32:12,810 --> 00:32:18,240
them determining what is the correct

448
00:32:14,970 --> 00:32:19,740
grade and we added up well I've had

449
00:32:18,240 --> 00:32:21,990
forgotten that number but we added 23

450
00:32:19,740 --> 00:32:23,940
different patterns security greats for

451
00:32:21,990 --> 00:32:24,870
23 different patterns but I want to talk

452
00:32:23,940 --> 00:32:26,370
about something else that's very

453
00:32:24,870 --> 00:32:28,379
interesting so I said that there's a new

454
00:32:26,370 --> 00:32:30,810
feature which is currently in beta which

455
00:32:28,380 --> 00:32:34,650
is giving these JavaScript generated

456
00:32:30,810 --> 00:32:36,629
noise patterns so let's look at the

457
00:32:34,650 --> 00:32:37,110
advantage of the advantages of that when

458
00:32:36,630 --> 00:32:40,110
commit

459
00:32:37,110 --> 00:32:43,110
DLS so boring SSL is the TLS library

460
00:32:40,110 --> 00:32:45,209
that's used by Google and as far and I

461
00:32:43,110 --> 00:32:47,969
hope this is a correct assessment please

462
00:32:45,210 --> 00:32:49,440
correct me if I'm wrong I think that if

463
00:32:47,970 --> 00:32:51,240
you look at the lines of code and

464
00:32:49,440 --> 00:32:54,270
consider only the protocol parts and the

465
00:32:51,240 --> 00:32:58,470
crypto parts it comes to around this so

466
00:32:54,270 --> 00:33:00,360
close to 250,000 lines of code so maybe

467
00:32:58,470 --> 00:33:02,820
you know boring SSL is not optimized

468
00:33:00,360 --> 00:33:05,370
maybe for ultra ultra can find small

469
00:33:02,820 --> 00:33:06,928
code stuff so let's look at bare SSL

470
00:33:05,370 --> 00:33:12,659
which is supposed to be optimized right

471
00:33:06,929 --> 00:33:16,290
so bare is around 50/50 less than I

472
00:33:12,660 --> 00:33:18,240
think 40 32 can't read the numbers here

473
00:33:16,290 --> 00:33:19,918
but yeah it's it's much smaller it's

474
00:33:18,240 --> 00:33:21,240
less than 50 thousand lines of code for

475
00:33:19,919 --> 00:33:23,429
the crypto and the protocol parts

476
00:33:21,240 --> 00:33:26,880
however if you look at I K which is

477
00:33:23,429 --> 00:33:30,230
actually one of the more elaborate hench

478
00:33:26,880 --> 00:33:30,230
noise handshake patterns in the spec

479
00:33:30,590 --> 00:33:37,530
there was supposed to be an expert but

480
00:33:33,000 --> 00:33:40,230
yeah hold on oh that it's supposed to

481
00:33:37,530 --> 00:33:43,260
work but it doesn't do that alright so

482
00:33:40,230 --> 00:33:45,120
yeah you as you can see and this is by

483
00:33:43,260 --> 00:33:46,470
the way a conservative estimate I think

484
00:33:45,120 --> 00:33:48,418
it's gonna be smaller than that but this

485
00:33:46,470 --> 00:33:50,040
is about four thousand lines of code if

486
00:33:48,419 --> 00:33:51,780
you include all the protocol stuff and

487
00:33:50,040 --> 00:33:55,020
all the crypto primitive stuff but I'm

488
00:33:51,780 --> 00:33:57,270
actually I'm giving I'm giving myself a

489
00:33:55,020 --> 00:33:58,500
fair bit of buffer in case it turns out

490
00:33:57,270 --> 00:34:00,179
to be more than it actually is right now

491
00:33:58,500 --> 00:34:02,190
which is smaller than this number and so

492
00:34:00,179 --> 00:34:05,070
you end up with less lines of code to

493
00:34:02,190 --> 00:34:06,630
audit less states that an attacker can

494
00:34:05,070 --> 00:34:08,310
jump to in case they find a state

495
00:34:06,630 --> 00:34:10,919
machine attack or a buffer overflow or

496
00:34:08,310 --> 00:34:12,899
similar and that is that is great

497
00:34:10,918 --> 00:34:15,839
because it means that we can build a

498
00:34:12,899 --> 00:34:19,129
system that takes less trust from us in

499
00:34:15,840 --> 00:34:24,720
order for us to trust it so that's good

500
00:34:19,129 --> 00:34:26,159
alright so let's do a demo so a lot

501
00:34:24,719 --> 00:34:27,779
about noise Explorer being a framework

502
00:34:26,159 --> 00:34:30,290
so that means that I can demo it so

503
00:34:27,780 --> 00:34:30,290
let's do that

504
00:34:39,600 --> 00:34:44,009
all right this is noise Explorer you can

505
00:34:42,449 --> 00:34:47,460
open it right now on your laptop's if

506
00:34:44,010 --> 00:34:49,590
you go to noise Explorer calm so please

507
00:34:47,460 --> 00:34:53,130
do that if you like and you can fully

508
00:34:49,590 --> 00:34:55,470
use it so noise Explorer is essentially

509
00:34:53,130 --> 00:34:57,750
this is the title page that you'll come

510
00:34:55,469 --> 00:34:59,220
to the pattern here that's already

511
00:34:57,750 --> 00:35:01,610
contained and you can just type own

512
00:34:59,220 --> 00:35:03,980
pattern you can type your own you know

513
00:35:01,610 --> 00:35:06,420
potato pattern and you can just say

514
00:35:03,980 --> 00:35:08,610
sends a static key and then in return

515
00:35:06,420 --> 00:35:10,920
there's static key and then you're doing

516
00:35:08,610 --> 00:35:12,420
a static static diffie-hellman aha it

517
00:35:10,920 --> 00:35:14,790
says that one of Bolivia rules was not

518
00:35:12,420 --> 00:35:17,550
matched so the validity error that it

519
00:35:14,790 --> 00:35:18,960
found after an SS token the initiator

520
00:35:17,550 --> 00:35:20,280
must not send a handshake payload or

521
00:35:18,960 --> 00:35:21,930
transport payload unless there has also

522
00:35:20,280 --> 00:35:23,430
been an es token this is one of the

523
00:35:21,930 --> 00:35:24,990
rules that was added to the noise

524
00:35:23,430 --> 00:35:26,910
specification to ensure that some

525
00:35:24,990 --> 00:35:28,799
properties are met and so we can say

526
00:35:26,910 --> 00:35:30,089
that all right well each of these is

527
00:35:28,800 --> 00:35:32,610
also sending an E and then we're gonna

528
00:35:30,090 --> 00:35:33,870
do a yes noise handshake patter should

529
00:35:32,610 --> 00:35:35,760
not contain key shares that are not

530
00:35:33,870 --> 00:35:40,080
subsequently used which ones am i oh

531
00:35:35,760 --> 00:35:41,610
yeah there we go and so there you get a

532
00:35:40,080 --> 00:35:43,440
nice illustration you're sure that this

533
00:35:41,610 --> 00:35:45,120
is valid to spec and alright I just

534
00:35:43,440 --> 00:35:46,590
designed my amazing protocol I can just

535
00:35:45,120 --> 00:35:48,690
click this button and it'll download a

536
00:35:46,590 --> 00:35:52,050
full formal verification model that I

537
00:35:48,690 --> 00:35:53,490
can then run using prover and it'll give

538
00:35:52,050 --> 00:35:55,170
me a result I'm not going to do that

539
00:35:53,490 --> 00:35:57,149
right now what I'm going to show you is

540
00:35:55,170 --> 00:35:59,520
the results in the compendium so if you

541
00:35:57,150 --> 00:36:00,660
open the noise pattern analysis results

542
00:35:59,520 --> 00:36:01,980
you can just type the name of a pattern

543
00:36:00,660 --> 00:36:03,450
if you've already seen it in the spec I

544
00:36:01,980 --> 00:36:08,850
want to see for example the results for

545
00:36:03,450 --> 00:36:11,339
X K alright so I just click here quick

546
00:36:08,850 --> 00:36:12,569
these are you can you can redownload the

547
00:36:11,340 --> 00:36:14,400
model here and we want it if you like

548
00:36:12,570 --> 00:36:17,340
but these are the results that were

549
00:36:14,400 --> 00:36:19,290
generated before and so for example I'm

550
00:36:17,340 --> 00:36:21,290
interested and you'll see that by the

551
00:36:19,290 --> 00:36:25,170
way you'll see that these results are

552
00:36:21,290 --> 00:36:27,000
explained using an accessible literal

553
00:36:25,170 --> 00:36:28,530
style which I really worked hard to

554
00:36:27,000 --> 00:36:30,600
ensure because I think that's important

555
00:36:28,530 --> 00:36:32,040
you can read it it's English the

556
00:36:30,600 --> 00:36:33,630
responder is initialize this is all

557
00:36:32,040 --> 00:36:34,860
generated I didn't write this the

558
00:36:33,630 --> 00:36:36,510
responder is initialized with a

559
00:36:34,860 --> 00:36:38,280
pre-shared long term static key which is

560
00:36:36,510 --> 00:36:40,080
assumed to be pre authenticated message

561
00:36:38,280 --> 00:36:41,610
a sent by an initiator does not benefit

562
00:36:40,080 --> 00:36:43,140
from sender and so you can actually read

563
00:36:41,610 --> 00:36:44,460
it in a literal style it flows well

564
00:36:43,140 --> 00:36:46,049
you're not reading math formulas the

565
00:36:44,460 --> 00:36:47,310
whole time but if you want to read matte

566
00:36:46,050 --> 00:36:48,810
formulas then be my guess because you

567
00:36:47,310 --> 00:36:50,940
can just click this button for message C

568
00:36:48,810 --> 00:36:53,070
you get the message over here in large

569
00:36:50,940 --> 00:36:56,040
numbers large letters

570
00:36:53,070 --> 00:36:57,930
and you see like okay well message thee

571
00:36:56,040 --> 00:36:59,490
and again this is all generated noise

572
00:36:57,930 --> 00:37:01,169
explore the tool will generate these

573
00:36:59,490 --> 00:37:03,000
reports for you straight out of the

574
00:37:01,170 --> 00:37:04,920
prover if models once you analyze them

575
00:37:03,000 --> 00:37:06,270
so none of this is written by hand and

576
00:37:04,920 --> 00:37:07,800
this is well I think for you to allow

577
00:37:06,270 --> 00:37:10,320
you to reason about this protocol that

578
00:37:07,800 --> 00:37:12,600
you're designing and so message C is the

579
00:37:10,320 --> 00:37:14,640
third message in xk1 it is sent from the

580
00:37:12,600 --> 00:37:16,680
initiator and so here you can see the

581
00:37:14,640 --> 00:37:18,150
actual syntax in the applied PI calculus

582
00:37:16,680 --> 00:37:20,069
for the message as it's being sent as

583
00:37:18,150 --> 00:37:23,670
it's represented in the prover if model

584
00:37:20,070 --> 00:37:25,050
you can see exactly how each token in

585
00:37:23,670 --> 00:37:27,150
the message is processed by the

586
00:37:25,050 --> 00:37:29,340
initiator so you can see that all right

587
00:37:27,150 --> 00:37:34,140
while he's calling or she is calling

588
00:37:29,340 --> 00:37:35,310
encrypted hash and there's if any prior

589
00:37:34,140 --> 00:37:36,359
diffie-hellman shared secret was

590
00:37:35,310 --> 00:37:37,680
established between the sender and the

591
00:37:36,360 --> 00:37:38,790
recipient this allows the initiator to

592
00:37:37,680 --> 00:37:40,440
communicate their long-term identity

593
00:37:38,790 --> 00:37:41,670
with some degree of confidentiality I'm

594
00:37:40,440 --> 00:37:45,270
referring to identity hiding here

595
00:37:41,670 --> 00:37:47,550
indirectly and so oh you got a C you got

596
00:37:45,270 --> 00:37:51,690
mix key you got all of these things that

597
00:37:47,550 --> 00:37:53,460
are being called here and then for

598
00:37:51,690 --> 00:37:56,430
receiving message see there's the same

599
00:37:53,460 --> 00:37:58,560
thing the same treatment and so you can

600
00:37:56,430 --> 00:38:00,660
also see exactly which authentication

601
00:37:58,560 --> 00:38:02,759
grades are being passed right so

602
00:38:00,660 --> 00:38:05,250
authentication grade one which here like

603
00:38:02,760 --> 00:38:07,200
okay well in the event that Bob sent

604
00:38:05,250 --> 00:38:10,350
received a message from Alice in this

605
00:38:07,200 --> 00:38:11,879
and this part of the session and that

606
00:38:10,350 --> 00:38:14,339
that was the message then it must be

607
00:38:11,880 --> 00:38:15,900
true that Alice must have sent a message

608
00:38:14,340 --> 00:38:18,120
to at least someone which could be Bob

609
00:38:15,900 --> 00:38:21,090
could be Charlie and then that someone

610
00:38:18,120 --> 00:38:22,920
is upgraded to in other stages of

611
00:38:21,090 --> 00:38:25,440
authentication to necessarily be Bob

612
00:38:22,920 --> 00:38:27,420
right and so that that makes it achieve

613
00:38:25,440 --> 00:38:29,220
a higher grade of authentication and you

614
00:38:27,420 --> 00:38:30,930
can see exactly what each query means

615
00:38:29,220 --> 00:38:32,580
how it is written in the form of

616
00:38:30,930 --> 00:38:35,759
verification model and whether it was

617
00:38:32,580 --> 00:38:37,529
passed or failed and for confidentiality

618
00:38:35,760 --> 00:38:39,360
you will also be able to see that well

619
00:38:37,530 --> 00:38:40,470
for demonstration purposes I want it to

620
00:38:39,360 --> 00:38:42,810
be optimistic and pick something that

621
00:38:40,470 --> 00:38:46,680
passed everything but you can just open

622
00:38:42,810 --> 00:38:48,299
it any other message that is less great

623
00:38:46,680 --> 00:38:49,350
like this one which is horrible because

624
00:38:48,300 --> 00:38:50,820
all we doing which is sending an

625
00:38:49,350 --> 00:38:54,870
ephemeral key that obviously there's no

626
00:38:50,820 --> 00:38:58,290
authentication so fail fail fail you'll

627
00:38:54,870 --> 00:39:01,670
see it also that there's no no no stuff

628
00:38:58,290 --> 00:39:04,320
no no good stuff here all right and

629
00:39:01,670 --> 00:39:06,220
that's it that's really noise Explorer

630
00:39:04,320 --> 00:39:14,380
I'm a bit over my time

631
00:39:06,220 --> 00:39:16,689
all right so great the future of noise

632
00:39:14,380 --> 00:39:18,820
very quickly so small use case specific

633
00:39:16,690 --> 00:39:21,490
protocols the entire standard library of

634
00:39:18,820 --> 00:39:23,230
noise is around 100 around a thousand

635
00:39:21,490 --> 00:39:24,669
lines of code and specific handshake

636
00:39:23,230 --> 00:39:25,990
patterns can be smaller as I said before

637
00:39:24,670 --> 00:39:27,700
I'm really giving myself a lot of leeway

638
00:39:25,990 --> 00:39:29,410
and also including some crypto primitive

639
00:39:27,700 --> 00:39:32,439
stuff there's a great post by David Wong

640
00:39:29,410 --> 00:39:33,970
that compares noise to existing work and

641
00:39:32,440 --> 00:39:35,080
it's really cool because it gives you an

642
00:39:33,970 --> 00:39:36,640
intuition of how the stuff can be used

643
00:39:35,080 --> 00:39:37,840
in the wild even here at real world

644
00:39:36,640 --> 00:39:39,220
crypto I've already met people who are

645
00:39:37,840 --> 00:39:41,830
used noise for stuff that I didn't know

646
00:39:39,220 --> 00:39:43,330
about which is great and it has the

647
00:39:41,830 --> 00:39:45,819
potential to be much smaller and nor use

648
00:39:43,330 --> 00:39:47,140
case specific have a more use case

649
00:39:45,820 --> 00:39:48,760
specific state machine than TLS or

650
00:39:47,140 --> 00:39:50,170
similar there's upcoming working noise

651
00:39:48,760 --> 00:39:51,250
their signatures being added that

652
00:39:50,170 --> 00:39:52,930
currently doesn't support signatures

653
00:39:51,250 --> 00:39:54,550
they're stateful hashing and symmetric

654
00:39:52,930 --> 00:39:56,500
crypto which is having an overhaul to

655
00:39:54,550 --> 00:39:58,300
include stateful hashing there's

656
00:39:56,500 --> 00:39:59,500
something called noise socket and NLS

657
00:39:58,300 --> 00:40:00,700
which is being worked on and to be

658
00:39:59,500 --> 00:40:02,170
honest I'm not particularly familiar

659
00:40:00,700 --> 00:40:05,560
with what that does but you can check it

660
00:40:02,170 --> 00:40:07,390
out it's related to noise and well that

661
00:40:05,560 --> 00:40:08,290
part is what is coming soon in Parden

662
00:40:07,390 --> 00:40:09,759
release floor it's essentially

663
00:40:08,290 --> 00:40:11,980
implementation of noise that generates

664
00:40:09,760 --> 00:40:13,300
implementations in JavaScript and go so

665
00:40:11,980 --> 00:40:14,800
I think that the real potential of noise

666
00:40:13,300 --> 00:40:17,050
Explorer is to be the ultimate online

667
00:40:14,800 --> 00:40:18,490
compendium for reasoning about designing

668
00:40:17,050 --> 00:40:20,980
studying implementing and verifying

669
00:40:18,490 --> 00:40:22,540
noise handshake patterns I want to

670
00:40:20,980 --> 00:40:25,180
present my special thanks to Bruno ball

671
00:40:22,540 --> 00:40:26,859
share the creator of probe Arif and

672
00:40:25,180 --> 00:40:28,000
Trevor Perrin the creator of noise for

673
00:40:26,859 --> 00:40:29,470
their assistance with this work

674
00:40:28,000 --> 00:40:31,359
there's also related work Benjamin lip

675
00:40:29,470 --> 00:40:31,660
also studying at the same lab I studied

676
00:40:31,359 --> 00:40:34,270
odd

677
00:40:31,660 --> 00:40:35,950
Prosecco in France is working on a wire

678
00:40:34,270 --> 00:40:36,820
guard very automatic verification using

679
00:40:35,950 --> 00:40:38,259
crypto var if which uses the

680
00:40:36,820 --> 00:40:40,420
computational model and I also want to

681
00:40:38,260 --> 00:40:41,290
thank my co-author Karthik Raghavan was

682
00:40:40,420 --> 00:40:42,609
here in the audience and was

683
00:40:41,290 --> 00:40:44,740
indispensable in the creation of this

684
00:40:42,609 --> 00:40:47,500
work in my general higher level

685
00:40:44,740 --> 00:40:50,470
education in general so please check out

686
00:40:47,500 --> 00:40:51,910
noise Explorer at this URL and this

687
00:40:50,470 --> 00:40:53,348
paper and don't forget to hit subscribe

688
00:40:51,910 --> 00:40:55,180
and click that like button for more

689
00:40:53,349 --> 00:40:57,940
videos and check and make sure to click

690
00:40:55,180 --> 00:41:01,578
the bell icon for all right

691
00:40:57,940 --> 00:41:03,230
[Applause]

692
00:41:01,579 --> 00:41:04,849
yeah

693
00:41:03,230 --> 00:41:06,869
[Applause]

694
00:41:04,849 --> 00:41:07,890
okay I think we have time for just one

695
00:41:06,869 --> 00:41:09,959
question

696
00:41:07,890 --> 00:41:14,910
so we're coming a little bit over one

697
00:41:09,959 --> 00:41:39,450
question anybody okay well alright an

698
00:41:14,910 --> 00:41:41,430
idiom thank you very much all right the

699
00:41:39,450 --> 00:41:43,680
next presentation is gonna be by CSR

700
00:41:41,430 --> 00:41:45,719
Khalif from Google who's gonna talk

701
00:41:43,680 --> 00:41:49,649
about application layer transport

702
00:41:45,719 --> 00:41:52,079
security which you may have heard of

703
00:41:49,650 --> 00:41:54,479
from previous talks by Google but this

704
00:41:52,079 --> 00:42:10,739
is this is gonna be a deep dive so thank

705
00:41:54,479 --> 00:42:21,749
you very much okay let me know if you

706
00:42:10,739 --> 00:42:23,999
need this one thank you

707
00:42:21,749 --> 00:42:25,948
hello everyone I'm very pleased to be

708
00:42:23,999 --> 00:42:29,848
here and present application layer

709
00:42:25,949 --> 00:42:35,069
transport security it's a system that

710
00:42:29,849 --> 00:42:37,709
was developed and is used at Google so

711
00:42:35,069 --> 00:42:40,219
to start with a lot of distributed

712
00:42:37,709 --> 00:42:43,069
systems and the current internet use

713
00:42:40,219 --> 00:42:45,630
secure communication protocols to

714
00:42:43,069 --> 00:42:47,400
basically protect the data that is that

715
00:42:45,630 --> 00:42:50,279
is in transit between all entities of

716
00:42:47,400 --> 00:42:51,690
the system at Google we use something

717
00:42:50,279 --> 00:42:55,589
called application layer transport

718
00:42:51,690 --> 00:42:58,289
security or LTS mainly to secure remote

719
00:42:55,589 --> 00:43:00,420
procedure calls or pcs why did we make

720
00:42:58,289 --> 00:43:02,729
this binding between alts and our pcs

721
00:43:00,420 --> 00:43:05,160
the reason is because our pcs are widely

722
00:43:02,729 --> 00:43:07,049
used at Google there's roughly a temple

723
00:43:05,160 --> 00:43:09,209
in our pcs every second in the

724
00:43:07,049 --> 00:43:12,859
production network so you can basically

725
00:43:09,209 --> 00:43:16,169
see the scale and why the reason for

726
00:43:12,859 --> 00:43:17,880
developing something that adopted the

727
00:43:16,170 --> 00:43:21,030
scale basically

728
00:43:17,880 --> 00:43:22,650
alts provides Transpo security with zero

729
00:43:21,030 --> 00:43:24,300
configuration basically nothing is

730
00:43:22,650 --> 00:43:26,970
needed from the application developer or

731
00:43:24,300 --> 00:43:30,090
the user to use alts it's enabled by

732
00:43:26,970 --> 00:43:31,859
default for for all our pcs it's all so

733
00:43:30,090 --> 00:43:34,170
friendly to service replications load

734
00:43:31,860 --> 00:43:38,040
balancing and rescheduling across

735
00:43:34,170 --> 00:43:41,430
production machines so why did we come

736
00:43:38,040 --> 00:43:43,110
up with alts and not use TLS for example

737
00:43:41,430 --> 00:43:47,370
which is very widely used everywhere

738
00:43:43,110 --> 00:43:51,530
else so to answer this question this

739
00:43:47,370 --> 00:43:53,819
goes back to 2007 where LTS was first

740
00:43:51,530 --> 00:43:56,520
where the development and design of

741
00:43:53,820 --> 00:43:58,650
failures began basically TLS back then

742
00:43:56,520 --> 00:44:02,960
did not fit the security model of Google

743
00:43:58,650 --> 00:44:07,440
nor the scale requirements and it was

744
00:44:02,960 --> 00:44:09,870
decided that using TLS it was as highly

745
00:44:07,440 --> 00:44:11,760
the TLS implementation is complicated

746
00:44:09,870 --> 00:44:13,170
for Google use especially because it

747
00:44:11,760 --> 00:44:16,620
supports a lot of legacy flows and

748
00:44:13,170 --> 00:44:18,870
protocols but theoretically if you think

749
00:44:16,620 --> 00:44:21,630
about it or as they thought about it

750
00:44:18,870 --> 00:44:23,370
back in 2007 TLS could actually have

751
00:44:21,630 --> 00:44:26,820
been modified and used instead of

752
00:44:23,370 --> 00:44:29,540
developing a new protocol but they

753
00:44:26,820 --> 00:44:32,610
realizes for the sake of simplicity and

754
00:44:29,540 --> 00:44:35,310
long term support creating something

755
00:44:32,610 --> 00:44:38,370
from from scratch had a lot of

756
00:44:35,310 --> 00:44:44,120
advantages some key differences between

757
00:44:38,370 --> 00:44:47,130
alts and TLS are and the list is not the

758
00:44:44,120 --> 00:44:49,170
the there are more things than what's on

759
00:44:47,130 --> 00:44:51,270
the list but basically the trust model

760
00:44:49,170 --> 00:44:54,750
is different and I'm gonna be talking

761
00:44:51,270 --> 00:44:55,920
about this trust model in few slides alt

762
00:44:54,750 --> 00:44:58,530
s is simpler and design and

763
00:44:55,920 --> 00:45:00,360
implementation which allowed for easier

764
00:44:58,530 --> 00:45:03,000
analysis of bugs and security

765
00:45:00,360 --> 00:45:07,280
vulnerabilities and last but not least

766
00:45:03,000 --> 00:45:10,470
alt s uses protocol buffers heavily

767
00:45:07,280 --> 00:45:12,660
which is widely using Google that's more

768
00:45:10,470 --> 00:45:19,319
it's it's more suitable for google

769
00:45:12,660 --> 00:45:22,529
production network al alt s design

770
00:45:19,320 --> 00:45:24,900
basically is built around this vision it

771
00:45:22,530 --> 00:45:27,540
one it was designed to be a highly

772
00:45:24,900 --> 00:45:29,130
reliable trusted system that allows for

773
00:45:27,540 --> 00:45:31,499
service to service authentication and

774
00:45:29,130 --> 00:45:35,430
security with minimal user

775
00:45:31,499 --> 00:45:37,529
so we materialize these this vision in

776
00:45:35,430 --> 00:45:41,249
the following guideline principles first

777
00:45:37,529 --> 00:45:43,140
alt s is transparent it's enabled by

778
00:45:41,249 --> 00:45:46,169
default for all our pcs that are issued

779
00:45:43,140 --> 00:45:49,230
in Google production network no need to

780
00:45:46,170 --> 00:45:51,390
worry about any key management rotations

781
00:45:49,230 --> 00:45:53,940
issuance of certificates all these kind

782
00:45:51,390 --> 00:45:56,038
of stuff and the peer authenticated pre

783
00:45:53,940 --> 00:45:57,769
information is propagated to the

784
00:45:56,039 --> 00:46:03,029
application at the end of any handshake

785
00:45:57,769 --> 00:46:04,769
in case applications want to use for

786
00:46:03,029 --> 00:46:07,200
example a final grade of that

787
00:46:04,769 --> 00:46:08,999
authorization alt s uses

788
00:46:07,200 --> 00:46:09,899
state-of-the-art cryptography and we try

789
00:46:08,999 --> 00:46:13,709
to keep it up to date

790
00:46:09,900 --> 00:46:17,190
for example AES GCM with Auto rekeying

791
00:46:13,710 --> 00:46:18,660
and since Google controls alts and

792
00:46:17,190 --> 00:46:24,089
controls all entities that are running

793
00:46:18,660 --> 00:46:27,629
LTS it's easier to basically roll out

794
00:46:24,089 --> 00:46:30,390
new crypto primitives our new crypto

795
00:46:27,630 --> 00:46:34,890
protocols and basically stop supporting

796
00:46:30,390 --> 00:46:37,859
old ones the LTS also authenticates

797
00:46:34,890 --> 00:46:39,900
identities and not hosts and one

798
00:46:37,859 --> 00:46:41,880
important thing is that mutual

799
00:46:39,900 --> 00:46:46,769
authentication is enabled by default

800
00:46:41,880 --> 00:46:49,739
it's not optional all identities in alt

801
00:46:46,769 --> 00:46:51,238
s are they have corresponding manage

802
00:46:49,739 --> 00:46:54,539
certificates that are deployed

803
00:46:51,239 --> 00:46:56,999
periodically to work load without the

804
00:46:54,539 --> 00:46:59,759
application they're deployed to workload

805
00:46:56,999 --> 00:47:01,379
by the workload scheduler and that

806
00:46:59,759 --> 00:47:04,739
doesn't involve the application or the

807
00:47:01,380 --> 00:47:06,749
developer of the application alt s

808
00:47:04,739 --> 00:47:09,269
supports efficient session resumption

809
00:47:06,749 --> 00:47:11,459
for better scalability and the sessions

810
00:47:09,269 --> 00:47:14,390
the connections in LTS are long-lived

811
00:47:11,460 --> 00:47:18,869
also to support the huge scale of Google

812
00:47:14,390 --> 00:47:20,489
and one last but not least alt s is

813
00:47:18,869 --> 00:47:21,960
simple in design it's specifically

814
00:47:20,489 --> 00:47:23,940
tailored for service to service

815
00:47:21,960 --> 00:47:27,509
communication patterns and does not

816
00:47:23,940 --> 00:47:31,819
support legacy protocols so how does the

817
00:47:27,509 --> 00:47:35,339
trust model of alt s look like as I said

818
00:47:31,819 --> 00:47:37,200
earlier alt s authenticates identities

819
00:47:35,339 --> 00:47:40,259
and not hosts everything is around

820
00:47:37,200 --> 00:47:43,710
identities every network entity a

821
00:47:40,259 --> 00:47:46,020
machine or a work load has an

822
00:47:43,710 --> 00:47:49,440
an identity with a corresponding

823
00:47:46,020 --> 00:47:53,369
certificate this identity along with the

824
00:47:49,440 --> 00:47:55,380
certificate is used in the bureau the

825
00:47:53,369 --> 00:47:57,420
model pursued here follows the this

826
00:47:55,380 --> 00:48:00,750
simple example major production services

827
00:47:57,420 --> 00:48:02,760
should be run as a sarees should be run

828
00:48:00,750 --> 00:48:04,470
as a disease managed by the saris while

829
00:48:02,760 --> 00:48:08,190
the development versions of deserve of

830
00:48:04,470 --> 00:48:10,500
these services should run as test

831
00:48:08,190 --> 00:48:11,190
identities managed by the saris and the

832
00:48:10,500 --> 00:48:12,900
developers

833
00:48:11,190 --> 00:48:14,670
similarly the authentication

834
00:48:12,900 --> 00:48:17,220
authorization policies are also written

835
00:48:14,670 --> 00:48:18,630
around identities an example of a

836
00:48:17,220 --> 00:48:21,180
nautical authentication policy

837
00:48:18,630 --> 00:48:24,119
production could be production services

838
00:48:21,180 --> 00:48:25,680
do not trust the development version of

839
00:48:24,119 --> 00:48:29,160
the same services which kinda makes

840
00:48:25,680 --> 00:48:31,319
sense there are three types of

841
00:48:29,160 --> 00:48:33,060
credentials an alts they're all

842
00:48:31,320 --> 00:48:35,339
expressed in protocol buffers

843
00:48:33,060 --> 00:48:37,080
specifically and these are master

844
00:48:35,339 --> 00:48:40,109
certificates hand-shaker certificates

845
00:48:37,080 --> 00:48:43,500
and resumption keys master certificates

846
00:48:40,109 --> 00:48:44,970
are signed by a remote signing services

847
00:48:43,500 --> 00:48:48,240
which is the root key with the root of

848
00:48:44,970 --> 00:48:50,490
trust they contain RSA keys and the

849
00:48:48,240 --> 00:48:55,140
associated private key of these master

850
00:48:50,490 --> 00:48:56,669
certificates is used to sign hand-shaker

851
00:48:55,140 --> 00:48:59,670
certificates which are the second type

852
00:48:56,670 --> 00:49:01,470
of certificates master certificates are

853
00:48:59,670 --> 00:49:03,480
usually issued to production machines

854
00:49:01,470 --> 00:49:07,080
and schedulers of content containerized

855
00:49:03,480 --> 00:49:07,740
workloads second type is hand-shaker

856
00:49:07,080 --> 00:49:11,279
certificates

857
00:49:07,740 --> 00:49:14,040
these are signed by the master private

858
00:49:11,280 --> 00:49:17,099
key they can be created locally for

859
00:49:14,040 --> 00:49:18,450
system services or they can be an

860
00:49:17,099 --> 00:49:21,630
provisioned by the schedule of

861
00:49:18,450 --> 00:49:23,759
containerized work loads they contain

862
00:49:21,630 --> 00:49:26,369
parameters used in the LTS handshake and

863
00:49:23,760 --> 00:49:28,560
they contain the master certificate that

864
00:49:26,369 --> 00:49:30,210
is used to verify them to simplify the

865
00:49:28,560 --> 00:49:34,320
verification process and make it more

866
00:49:30,210 --> 00:49:36,960
local so given these two certificates we

867
00:49:34,320 --> 00:49:39,720
can envision the certificate chain of

868
00:49:36,960 --> 00:49:43,260
alts the route of threat of trust on the

869
00:49:39,720 --> 00:49:46,319
left is the signing service verification

870
00:49:43,260 --> 00:49:48,570
key which is used to verify the master

871
00:49:46,320 --> 00:49:50,940
certificate which is used to verify the

872
00:49:48,570 --> 00:49:53,880
hand-shaker certificates that are

873
00:49:50,940 --> 00:49:57,079
eventually used in handshakes the last

874
00:49:53,880 --> 00:50:01,280
type of credentials are Assumption keys

875
00:49:57,079 --> 00:50:03,200
these are secrets used to encrypt

876
00:50:01,280 --> 00:50:05,930
resumption tickets they're identified by

877
00:50:03,200 --> 00:50:07,640
resumption ID that is a unique for all

878
00:50:05,930 --> 00:50:10,399
workloads running in the same data

879
00:50:07,640 --> 00:50:14,390
center as the same identity so basically

880
00:50:10,400 --> 00:50:15,710
if there are multiple servers that share

881
00:50:14,390 --> 00:50:17,828
the same identity and they run in the

882
00:50:15,710 --> 00:50:20,710
same cell of the of data center they all

883
00:50:17,829 --> 00:50:26,619
have access to the same tickets

884
00:50:20,710 --> 00:50:30,710
resumption tickets certificate issuance

885
00:50:26,619 --> 00:50:33,589
any entity that needs to use alts

886
00:50:30,710 --> 00:50:35,809
or perform an alts handshake it needs to

887
00:50:33,589 --> 00:50:38,150
have a handshake certificate basically

888
00:50:35,809 --> 00:50:39,710
and the first step is for the issuer of

889
00:50:38,150 --> 00:50:41,390
the certificate to have a master

890
00:50:39,710 --> 00:50:43,069
certificate because we need the private

891
00:50:41,390 --> 00:50:46,400
key of that master certificate to sign

892
00:50:43,069 --> 00:50:49,779
the handshake a certificate this is a

893
00:50:46,400 --> 00:50:53,200
simple process that involves talking

894
00:50:49,780 --> 00:50:56,390
certificate leasher talking to the

895
00:50:53,200 --> 00:50:58,520
signing service it sends basically a CSR

896
00:50:56,390 --> 00:51:02,058
with its identity the signing service

897
00:50:58,520 --> 00:51:05,000
would create the certificate sign it and

898
00:51:02,059 --> 00:51:06,049
send it back to do the issuer and now

899
00:51:05,000 --> 00:51:09,740
the issuer can start creating

900
00:51:06,049 --> 00:51:11,960
hand-shaker certificates before I

901
00:51:09,740 --> 00:51:15,439
continue with how certificates are

902
00:51:11,960 --> 00:51:17,059
created let's look at the three

903
00:51:15,440 --> 00:51:19,970
different categories of certificates and

904
00:51:17,059 --> 00:51:21,740
alts so I said that we have something

905
00:51:19,970 --> 00:51:23,598
called master certificates that are used

906
00:51:21,740 --> 00:51:25,609
to sign or verify handshake or

907
00:51:23,599 --> 00:51:27,799
certificate certificates these are types

908
00:51:25,609 --> 00:51:29,540
of certificates but now who are the

909
00:51:27,799 --> 00:51:31,670
certificates issued for they can be

910
00:51:29,540 --> 00:51:34,400
issued to humans so these are called

911
00:51:31,670 --> 00:51:36,859
human certificates and basically all to

912
00:51:34,400 --> 00:51:41,089
the issue to developers and they're and

913
00:51:36,859 --> 00:51:42,619
they're used to basically alts CQ or all

914
00:51:41,089 --> 00:51:45,020
our PCs that developers send to the

915
00:51:42,619 --> 00:51:46,880
production network these certificates

916
00:51:45,020 --> 00:51:50,230
are usually short-lived they last for

917
00:51:46,880 --> 00:51:52,940
less than a day the second category are

918
00:51:50,230 --> 00:51:55,069
machine certificates from the name

919
00:51:52,940 --> 00:51:56,599
they're issued to all machines all

920
00:51:55,069 --> 00:51:58,790
production machines these are master

921
00:51:56,599 --> 00:52:00,950
certificates so basically the

922
00:51:58,790 --> 00:52:04,220
corresponding private key can be used to

923
00:52:00,950 --> 00:52:06,230
sign hand-shaker certificate the master

924
00:52:04,220 --> 00:52:08,870
the machine masters and certificate are

925
00:52:06,230 --> 00:52:10,850
rotated every few months while the

926
00:52:08,870 --> 00:52:13,910
machine hand-shaker certificate are

927
00:52:10,850 --> 00:52:15,920
rotated every few hours so relatively

928
00:52:13,910 --> 00:52:18,830
the the they're both relatively

929
00:52:15,920 --> 00:52:20,870
short-lived as well the last category is

930
00:52:18,830 --> 00:52:23,360
the workload certificates these are

931
00:52:20,870 --> 00:52:25,520
basically handshake certificates they

932
00:52:23,360 --> 00:52:30,740
can be used to do to perform alts

933
00:52:25,520 --> 00:52:33,980
handshake they are issued to workloads

934
00:52:30,740 --> 00:52:37,669
in the production network and they're

935
00:52:33,980 --> 00:52:39,320
issued by borg borg is the they're

936
00:52:37,670 --> 00:52:41,540
basically issued by borg master but borg

937
00:52:39,320 --> 00:52:46,880
is this cluster management system that

938
00:52:41,540 --> 00:52:49,759
is used at google and these certificates

939
00:52:46,880 --> 00:52:51,530
are rotated every two days on average so

940
00:52:49,760 --> 00:52:53,390
going back to how certificates are

941
00:52:51,530 --> 00:52:57,110
generated I hope the font is not too

942
00:52:53,390 --> 00:52:59,600
small for the people in the back so the

943
00:52:57,110 --> 00:53:03,620
first step we as I said we need a master

944
00:52:59,600 --> 00:53:05,210
certificate and this is here so a left

945
00:53:03,620 --> 00:53:07,819
machine is the bork master machine and

946
00:53:05,210 --> 00:53:11,270
this is the flow of how a handshake or

947
00:53:07,820 --> 00:53:13,130
certificate ends up on on a workload so

948
00:53:11,270 --> 00:53:15,380
the first step the board master would

949
00:53:13,130 --> 00:53:17,750
get a master certificate machine a

950
00:53:15,380 --> 00:53:19,520
master machine machine certificate that

951
00:53:17,750 --> 00:53:22,610
is used to create a board master

952
00:53:19,520 --> 00:53:24,800
handshake certificate which the Borg

953
00:53:22,610 --> 00:53:27,470
master can use to talk to other services

954
00:53:24,800 --> 00:53:29,120
like the signing service and then the

955
00:53:27,470 --> 00:53:31,459
board master would create a board mess

956
00:53:29,120 --> 00:53:33,560
of work workload master certificate this

957
00:53:31,460 --> 00:53:35,990
is step number three gets it signed by

958
00:53:33,560 --> 00:53:38,210
the signing service and now this is that

959
00:53:35,990 --> 00:53:39,740
the master certificate that is used to

960
00:53:38,210 --> 00:53:43,160
create all handshake certificates for

961
00:53:39,740 --> 00:53:44,990
the workloads that are created by this

962
00:53:43,160 --> 00:53:47,140
board master board master is basically

963
00:53:44,990 --> 00:53:52,220
the centralized entity that creates all

964
00:53:47,140 --> 00:53:55,040
workloads in a specific cluster whenever

965
00:53:52,220 --> 00:53:56,899
a new workload needs to be scheduled the

966
00:53:55,040 --> 00:53:59,960
board master would create a new

967
00:53:56,900 --> 00:54:02,000
handshake or certificate signs it using

968
00:53:59,960 --> 00:54:05,300
the Borg workload master certificate

969
00:54:02,000 --> 00:54:09,050
private key master private key and push

970
00:54:05,300 --> 00:54:10,940
push that down to the Borg load sorry

971
00:54:09,050 --> 00:54:12,110
the Borg load and that handshake

972
00:54:10,940 --> 00:54:14,630
certificate can be used by the

973
00:54:12,110 --> 00:54:16,400
application of that workload to do

974
00:54:14,630 --> 00:54:18,760
hand-shaker to do was sorry alt

975
00:54:16,400 --> 00:54:18,760
eccentric

976
00:54:19,850 --> 00:54:24,710
the protocols that are used in LTS

977
00:54:23,120 --> 00:54:27,859
basically there are too many protocols

978
00:54:24,710 --> 00:54:29,690
the first one as you can tell so far as

979
00:54:27,860 --> 00:54:31,340
the handshake protocol which is

980
00:54:29,690 --> 00:54:32,750
basically a session key exchange

981
00:54:31,340 --> 00:54:34,520
protocol and the second one is the

982
00:54:32,750 --> 00:54:36,680
record protocol which comes after the

983
00:54:34,520 --> 00:54:39,230
handshake and basically it's used to

984
00:54:36,680 --> 00:54:41,540
provide can finish confidentiality and

985
00:54:39,230 --> 00:54:46,460
integrity for all data transmitted and

986
00:54:41,540 --> 00:54:48,320
it supports Auto regain the handshake

987
00:54:46,460 --> 00:54:53,560
protocol is a simple difficult and based

988
00:54:48,320 --> 00:54:56,210
protocol as I mentioned before all

989
00:54:53,560 --> 00:54:59,299
entities and Google production network

990
00:54:56,210 --> 00:55:01,280
that needs to use alts virtually all

991
00:54:59,300 --> 00:55:05,960
entities because they all be sure are

992
00:55:01,280 --> 00:55:07,960
pcs they have they have credentials they

993
00:55:05,960 --> 00:55:10,160
have credentials that have identities

994
00:55:07,960 --> 00:55:13,400
alts identities with some other

995
00:55:10,160 --> 00:55:17,420
parameters like ECD edge keys that are

996
00:55:13,400 --> 00:55:20,480
rotated frequently these are these are

997
00:55:17,420 --> 00:55:22,010
the parameters that are used in tantric

998
00:55:20,480 --> 00:55:23,810
the handshake protocol also support

999
00:55:22,010 --> 00:55:25,850
perfect forward secrecy with some

1000
00:55:23,810 --> 00:55:27,140
additional ephemeral keys and session

1001
00:55:25,850 --> 00:55:28,220
resumption x' and at the end of the

1002
00:55:27,140 --> 00:55:31,670
handshake the client and the server

1003
00:55:28,220 --> 00:55:33,680
would have negotiated a session key and

1004
00:55:31,670 --> 00:55:37,280
decided on what next protocol to use

1005
00:55:33,680 --> 00:55:38,839
from now on this is done using the for

1006
00:55:37,280 --> 00:55:40,610
the this is done using four messages

1007
00:55:38,840 --> 00:55:42,620
client and its server and server

1008
00:55:40,610 --> 00:55:44,600
finished and client finished so the

1009
00:55:42,620 --> 00:55:46,790
first step is for the client to send a

1010
00:55:44,600 --> 00:55:48,770
client init message that contains its

1011
00:55:46,790 --> 00:55:50,450
certificate its handshake certificates

1012
00:55:48,770 --> 00:55:52,700
which contains the identity of the

1013
00:55:50,450 --> 00:55:54,560
client a list of record protocols that

1014
00:55:52,700 --> 00:55:57,490
the client supports and optional

1015
00:55:54,560 --> 00:55:59,930
resumption ID and resumption tickets

1016
00:55:57,490 --> 00:56:02,990
once the server receives that it

1017
00:55:59,930 --> 00:56:06,890
verifies the the client certificate

1018
00:56:02,990 --> 00:56:09,890
checks the identity and choose one

1019
00:56:06,890 --> 00:56:11,359
choose one record protocol that is from

1020
00:56:09,890 --> 00:56:12,859
the list of protocols provided by the

1021
00:56:11,360 --> 00:56:15,110
client that is supported by the server

1022
00:56:12,860 --> 00:56:17,090
then it computes the Deborah Hellman

1023
00:56:15,110 --> 00:56:19,910
exchange resolved and derives the

1024
00:56:17,090 --> 00:56:21,620
following session keys or the following

1025
00:56:19,910 --> 00:56:23,720
secrets the first one is the session key

1026
00:56:21,620 --> 00:56:25,250
M that will be used by the record

1027
00:56:23,720 --> 00:56:28,549
protocol the second one is a resumption

1028
00:56:25,250 --> 00:56:31,910
secret that will be used to encrypt that

1029
00:56:28,550 --> 00:56:33,680
will be used to that that will be put in

1030
00:56:31,910 --> 00:56:35,480
the resumption ticket and

1031
00:56:33,680 --> 00:56:37,940
talk about assumption in few minutes and

1032
00:56:35,480 --> 00:56:40,299
the last one is an Authenticator secret

1033
00:56:37,940 --> 00:56:43,190
which will be used in the next message

1034
00:56:40,299 --> 00:56:45,470
after that the server would sends its

1035
00:56:43,190 --> 00:56:48,140
server and it message now which contains

1036
00:56:45,470 --> 00:56:50,629
a server identity the server

1037
00:56:48,140 --> 00:56:53,450
certificates which contains its identity

1038
00:56:50,630 --> 00:56:56,270
the chosen record protocol and optional

1039
00:56:53,450 --> 00:56:58,549
resumption tickets also the servers and

1040
00:56:56,270 --> 00:57:00,710
such it's finished it's part it will

1041
00:56:58,549 --> 00:57:02,900
send a server finished message

1042
00:57:00,710 --> 00:57:05,869
containing edge Mac over a predefined

1043
00:57:02,900 --> 00:57:08,029
bit string and it's this search Mac is

1044
00:57:05,869 --> 00:57:11,809
competed using the third secret that is

1045
00:57:08,029 --> 00:57:14,660
developed derived which is secretly once

1046
00:57:11,809 --> 00:57:15,829
the client received this they received

1047
00:57:14,660 --> 00:57:18,078
the first message the first of these two

1048
00:57:15,829 --> 00:57:19,819
messages the server end message it can

1049
00:57:18,079 --> 00:57:23,539
verify the certificate it derives the

1050
00:57:19,819 --> 00:57:25,130
same mr and a and and then when it

1051
00:57:23,539 --> 00:57:28,700
receives a server finished message it

1052
00:57:25,130 --> 00:57:30,950
uses the derived a to basically verify

1053
00:57:28,700 --> 00:57:32,960
the Authenticator on that message and at

1054
00:57:30,950 --> 00:57:34,939
this point the client has all the

1055
00:57:32,960 --> 00:57:36,260
information to start using the record

1056
00:57:34,940 --> 00:57:40,940
protocol basically can send encrypted

1057
00:57:36,260 --> 00:57:43,520
data using the secret name and the last

1058
00:57:40,940 --> 00:57:45,020
message is sent by the client which is

1059
00:57:43,520 --> 00:57:47,270
the client finished message which

1060
00:57:45,020 --> 00:57:49,670
terminates the basically it indicates

1061
00:57:47,270 --> 00:57:52,549
the at the end of the handshake protocol

1062
00:57:49,670 --> 00:57:55,010
it also contains an Authenticator that

1063
00:57:52,549 --> 00:57:57,020
is competed with the same secret once

1064
00:57:55,010 --> 00:57:59,210
the server and additional resumption

1065
00:57:57,020 --> 00:58:00,559
tickets once the server sees this it

1066
00:57:59,210 --> 00:58:04,609
verifies the Authenticator and now the

1067
00:58:00,559 --> 00:58:10,220
server can send or receive data

1068
00:58:04,609 --> 00:58:11,990
encrypted using the secret and the next

1069
00:58:10,220 --> 00:58:15,529
protocol is the record protocol it's

1070
00:58:11,990 --> 00:58:18,169
basically the one that kicks in after

1071
00:58:15,529 --> 00:58:20,000
the handshake finishes and it protects

1072
00:58:18,170 --> 00:58:22,970
the confidentiality and integrity of old

1073
00:58:20,000 --> 00:58:25,640
traffic after the handshake it's

1074
00:58:22,970 --> 00:58:28,098
basically a collection of encryption

1075
00:58:25,640 --> 00:58:29,868
schemes there's no one scheme that we

1076
00:58:28,099 --> 00:58:31,970
said that we support or that alts

1077
00:58:29,869 --> 00:58:34,490
support that provides support for

1078
00:58:31,970 --> 00:58:37,450
multiple schemes and with different key

1079
00:58:34,490 --> 00:58:41,390
sizes and features the client sends its

1080
00:58:37,450 --> 00:58:42,828
preferences in order and the server

1081
00:58:41,390 --> 00:58:44,600
would choose the first one that matches

1082
00:58:42,829 --> 00:58:47,000
this it's local

1083
00:58:44,600 --> 00:58:50,720
preference or local configuration the

1084
00:58:47,000 --> 00:58:52,280
reason for this for this exchange

1085
00:58:50,720 --> 00:58:55,879
between the client and server and have a

1086
00:58:52,280 --> 00:58:57,790
list on the client and the server is to

1087
00:58:55,880 --> 00:59:01,190
allow both of them to have different

1088
00:58:57,790 --> 00:59:04,610
preferences and it makes it easy for us

1089
00:59:01,190 --> 00:59:06,440
to roll out and deprecated roll out new

1090
00:59:04,610 --> 00:59:11,750
cryptic schemes and deprecated new

1091
00:59:06,440 --> 00:59:15,110
deprecated old ones session resumption

1092
00:59:11,750 --> 00:59:18,710
'z I mentioned this several times it's

1093
00:59:15,110 --> 00:59:22,120
used to resume connections without

1094
00:59:18,710 --> 00:59:26,240
expensive asymmetric crypto cryptography

1095
00:59:22,120 --> 00:59:27,950
alts handshake as we saw in the old and

1096
00:59:26,240 --> 00:59:30,439
the forum message is doing the handshake

1097
00:59:27,950 --> 00:59:33,919
during the handshake clients and servers

1098
00:59:30,440 --> 00:59:35,750
can exchange resumption tickets that are

1099
00:59:33,920 --> 00:59:38,630
stored here either on the client side or

1100
00:59:35,750 --> 00:59:40,820
on the server side and these have these

1101
00:59:38,630 --> 00:59:43,130
servers sorry these tickets are

1102
00:59:40,820 --> 00:59:44,990
identified by resumption ID which as I

1103
00:59:43,130 --> 00:59:46,900
mentioned earlier it's unique to all

1104
00:59:44,990 --> 00:59:51,470
workloads in the same data center

1105
00:59:46,900 --> 00:59:54,290
running as the same ID tickets are

1106
00:59:51,470 --> 00:59:56,240
encrypted with symmetric key so they can

1107
00:59:54,290 --> 01:00:00,050
only be decrypted by the entity that

1108
00:59:56,240 --> 01:00:02,029
generated the tickets these symmetric

1109
01:00:00,050 --> 01:00:03,650
keys are associated also with the same

1110
01:00:02,030 --> 01:00:07,070
resumption ID and they're also

1111
01:00:03,650 --> 01:00:07,520
distributed to workloads based on that

1112
01:00:07,070 --> 01:00:10,460
idea

1113
01:00:07,520 --> 01:00:14,330
along with all handshake certificates

1114
01:00:10,460 --> 01:00:18,230
during during workload setup there are

1115
01:00:14,330 --> 01:00:20,299
two types of of session assumptions the

1116
01:00:18,230 --> 01:00:22,280
first one is where the tickets are

1117
01:00:20,300 --> 01:00:23,570
stored on the client side and the other

1118
01:00:22,280 --> 01:00:25,070
one is whether the gates are stored on

1119
01:00:23,570 --> 01:00:27,170
the server side I'm not gonna go into

1120
01:00:25,070 --> 01:00:28,850
details for lack of time but I'll be

1121
01:00:27,170 --> 01:00:32,570
happy to talk about that offline

1122
01:00:28,850 --> 01:00:35,330
afterwards and last but not least

1123
01:00:32,570 --> 01:00:36,080
everything comes with trade-offs and of

1124
01:00:35,330 --> 01:00:38,390
course alts

1125
01:00:36,080 --> 01:00:40,250
is one of these things so there are

1126
01:00:38,390 --> 01:00:44,839
multiple trade-offs that were that were

1127
01:00:40,250 --> 01:00:50,090
made during the design of alts first one

1128
01:00:44,840 --> 01:00:53,600
is is KCI key compromise impersonation

1129
01:00:50,090 --> 01:00:57,440
alts is susceptible to KCI attacks so

1130
01:00:53,600 --> 01:01:00,170
basically a workload a compromised

1131
01:00:57,440 --> 01:01:02,270
workload private key or assumption key

1132
01:01:00,170 --> 01:01:04,340
would allow adversary to impersonate any

1133
01:01:02,270 --> 01:01:07,340
other workload to this workload but this

1134
01:01:04,340 --> 01:01:09,620
is part of this is not considered an

1135
01:01:07,340 --> 01:01:11,060
attack per se on alts because it's part

1136
01:01:09,620 --> 01:01:13,400
of their it's part of their assumption

1137
01:01:11,060 --> 01:01:16,040
threat threat model in fact there's a

1138
01:01:13,400 --> 01:01:19,310
variant of alts that this is that

1139
01:01:16,040 --> 01:01:20,890
protects against KCI attacks but it can

1140
01:01:19,310 --> 01:01:25,430
only be used in environment where

1141
01:01:20,890 --> 01:01:27,620
resumption is not supported alts is not

1142
01:01:25,430 --> 01:01:30,589
designed to hide the identities of the

1143
01:01:27,620 --> 01:01:33,759
peers therefore none of the none of the

1144
01:01:30,590 --> 01:01:38,030
handshake messages are encrypted and

1145
01:01:33,760 --> 01:01:42,830
that's by design what do we what did we

1146
01:01:38,030 --> 01:01:44,870
learn from alts during the years first

1147
01:01:42,830 --> 01:01:47,000
one is changing authentication system in

1148
01:01:44,870 --> 01:01:49,880
production is very hard without breaking

1149
01:01:47,000 --> 01:01:51,680
the production system what's even harder

1150
01:01:49,880 --> 01:01:53,330
is changing the trust model of a product

1151
01:01:51,680 --> 01:01:57,169
of a production system while keep it

1152
01:01:53,330 --> 01:01:59,750
running another another lesson learned

1153
01:01:57,170 --> 01:02:01,160
was diverging from stander is very

1154
01:01:59,750 --> 01:02:07,490
challenging and it's a very delicate

1155
01:02:01,160 --> 01:02:09,920
balance the questions are do we do hacks

1156
01:02:07,490 --> 01:02:11,299
to stay in standard or do we diverge

1157
01:02:09,920 --> 01:02:14,060
completely from the standard or we do

1158
01:02:11,300 --> 01:02:17,900
something in between where we do our own

1159
01:02:14,060 --> 01:02:21,350
things and we keep we stay compliant

1160
01:02:17,900 --> 01:02:23,810
with the standard and basically

1161
01:02:21,350 --> 01:02:27,830
complying with the standard and the last

1162
01:02:23,810 --> 01:02:29,390
one is key exchange and the record

1163
01:02:27,830 --> 01:02:31,340
protocol are the small part of the of

1164
01:02:29,390 --> 01:02:32,900
the entire system the challenging part

1165
01:02:31,340 --> 01:02:36,050
is identifying the security boundaries

1166
01:02:32,900 --> 01:02:38,150
and adversary models and also another

1167
01:02:36,050 --> 01:02:40,700
challenge is key management rotations

1168
01:02:38,150 --> 01:02:43,370
and refrigeration of certificates in a

1169
01:02:40,700 --> 01:02:44,870
way that does not involve users of the

1170
01:02:43,370 --> 01:02:49,130
application or the application

1171
01:02:44,870 --> 01:02:50,839
developers thank you and if you are

1172
01:02:49,130 --> 01:02:52,970
interested in more information you can

1173
01:02:50,840 --> 01:02:54,410
check out the white paper that was

1174
01:02:52,970 --> 01:02:57,680
published on google cloud security

1175
01:02:54,410 --> 01:03:08,009
website thank you

1176
01:02:57,680 --> 01:03:08,009
[Applause]

1177
01:03:11,490 --> 01:03:20,109
any questions the session key I'll call

1178
01:03:18,670 --> 01:03:23,170
it the session key

1179
01:03:20,110 --> 01:03:24,310
you said specifically in your slide that

1180
01:03:23,170 --> 01:03:27,160
from then on all the messages are

1181
01:03:24,310 --> 01:03:31,860
encrypted yes do you mean authenticated

1182
01:03:27,160 --> 01:03:35,200
and encrypted or just encrypted yeah so

1183
01:03:31,860 --> 01:03:37,690
they're authenticated and their

1184
01:03:35,200 --> 01:03:39,759
integrity is protected as well okay that

1185
01:03:37,690 --> 01:03:45,310
to me is more important yes yeah its

1186
01:03:39,760 --> 01:03:46,060
encryption integrity had two quick

1187
01:03:45,310 --> 01:03:49,000
questions

1188
01:03:46,060 --> 01:03:51,009
one is a the authenticated string that's

1189
01:03:49,000 --> 01:03:53,200
added at the end of the server in it and

1190
01:03:51,010 --> 01:03:55,150
the authenticated string added at the

1191
01:03:53,200 --> 01:03:57,339
end of the client in it all right is

1192
01:03:55,150 --> 01:04:01,570
that right or there's an Authenticator

1193
01:03:57,340 --> 01:04:05,830
is that used similar to what we are

1194
01:04:01,570 --> 01:04:08,590
doing in TLS 1.2 we're in to add context

1195
01:04:05,830 --> 01:04:11,940
to the handshake part of the protocol so

1196
01:04:08,590 --> 01:04:16,900
that it doesn't get replayed later so

1197
01:04:11,940 --> 01:04:21,220
the part that is protect against replay

1198
01:04:16,900 --> 01:04:23,320
attacks is the computation of the Deaf

1199
01:04:21,220 --> 01:04:26,560
ahem in exchange it because it involves

1200
01:04:23,320 --> 01:04:30,310
a transcript from this session and the

1201
01:04:26,560 --> 01:04:33,490
resulting a secret is used to compute

1202
01:04:30,310 --> 01:04:34,990
the H Mac so basically indirectly that H

1203
01:04:33,490 --> 01:04:38,350
Mac contains information from that

1204
01:04:34,990 --> 01:04:40,720
session specific ok and other session

1205
01:04:38,350 --> 01:04:43,299
tickets encrypted at the end you show

1206
01:04:40,720 --> 01:04:46,660
the session ticket yeah sorry well

1207
01:04:43,300 --> 01:04:48,010
special tickets are those encrypted the

1208
01:04:46,660 --> 01:04:50,290
resumption thing yes yes they're

1209
01:04:48,010 --> 01:04:52,030
encrypted with a different key that is

1210
01:04:50,290 --> 01:04:54,400
only available to the party that can

1211
01:04:52,030 --> 01:04:57,600
access these tickets okay thank you

1212
01:04:54,400 --> 01:04:57,600
problem thank you

1213
01:04:58,630 --> 01:05:05,559
thanks for the very nice talk did you do

1214
01:05:01,150 --> 01:05:07,329
any formal security analysis yes that

1215
01:05:05,559 --> 01:05:10,599
was done few years ago I don't have

1216
01:05:07,329 --> 01:05:14,729
access to it at the moment but yes but

1217
01:05:10,599 --> 01:05:14,729
it's secure yes hopefully

1218
01:05:18,479 --> 01:05:29,710
okay let's thanks SR again thank you and

1219
01:05:27,779 --> 01:05:32,739
right now there's going to be a short

1220
01:05:29,710 --> 01:05:35,130
break so come on back at 250 for the

1221
01:05:32,739 --> 01:05:35,130
next session

1222
01:06:22,440 --> 01:06:28,480
helloo helloo so despite the

1223
01:06:26,070 --> 01:06:32,950
advertisement contrary there is no break

1224
01:06:28,480 --> 01:06:35,550
I'm so sorry and you can be mad at Nick

1225
01:06:32,950 --> 01:06:38,200
for getting your hopes up

1226
01:06:35,550 --> 01:06:39,940
so we're powering right through to the

1227
01:06:38,200 --> 01:06:41,950
next set of talks we're gonna talk about

1228
01:06:39,940 --> 01:06:44,440
passwords and here we'll hear about

1229
01:06:41,950 --> 01:06:46,569
opaque a new client server passer

1230
01:06:44,440 --> 01:07:26,680
authentication standard from Google

1231
01:06:46,570 --> 01:07:31,200
please take away can you hear me okay so

1232
01:07:26,680 --> 01:07:33,220
this talk is about a password

1233
01:07:31,200 --> 01:07:37,299
authenticated key exchange protocol

1234
01:07:33,220 --> 01:07:39,490
called opaque it's something I want to

1235
01:07:37,300 --> 01:07:43,960
present because I think it's a good idea

1236
01:07:39,490 --> 01:07:46,470
to the rise on a strong protocol and

1237
01:07:43,960 --> 01:07:50,349
this one has some interesting properties

1238
01:07:46,470 --> 01:07:52,990
and represent a good candidate for for

1239
01:07:50,349 --> 01:07:57,069
Standardization his work joint with

1240
01:07:52,990 --> 01:08:00,129
Tasha etske and Xiao Shu we presented it

1241
01:07:57,069 --> 01:08:03,369
at last euro crypt and I also have an

1242
01:08:00,130 --> 01:08:06,700
internal draft on describing the

1243
01:08:03,369 --> 01:08:10,540
protocol first I want to introduce you

1244
01:08:06,700 --> 01:08:13,500
to Gao one of the co-authors Joe is

1245
01:08:10,540 --> 01:08:16,000
finishing his ph.d is here and will be

1246
01:08:13,500 --> 01:08:18,930
interested to hear about the job

1247
01:08:16,000 --> 01:08:18,930
opportunities

1248
01:08:19,710 --> 01:08:28,868
you know you run my job so easy ow and

1249
01:08:26,380 --> 01:08:31,900
the joke was if you don't see him well

1250
01:08:28,868 --> 01:08:39,839
you will have to decide which one in the

1251
01:08:31,899 --> 01:08:42,908
picture is Joe passwords passwords

1252
01:08:39,839 --> 01:08:45,359
passwords they have become an crucial

1253
01:08:42,908 --> 01:08:48,788
part of our information security and

1254
01:08:45,359 --> 01:08:51,489
love them or hate them you cannot ignore

1255
01:08:48,788 --> 01:08:54,488
them if you think that passwords are

1256
01:08:51,488 --> 01:08:56,738
about to disappear from the world then

1257
01:08:54,488 --> 01:09:01,268
this talk is not for you I was in that

1258
01:08:56,738 --> 01:09:05,379
cam 25 years all 25 years ago and I was

1259
01:09:01,269 --> 01:09:08,889
more than 25 years old and life and my

1260
01:09:05,380 --> 01:09:12,130
my white hair have taught me that no

1261
01:09:08,889 --> 01:09:13,929
they are not disappearing so let me

1262
01:09:12,130 --> 01:09:16,150
discuss some of the attacks against

1263
01:09:13,929 --> 01:09:18,578
password summer unavoidable summer

1264
01:09:16,149 --> 01:09:23,848
avoidable absolutely to main and avoid

1265
01:09:18,578 --> 01:09:27,578
blood tax due to the low entropy of

1266
01:09:23,849 --> 01:09:31,049
passwords are online guessing you know

1267
01:09:27,578 --> 01:09:34,509
if if I can guess a password and I can

1268
01:09:31,049 --> 01:09:36,250
impersonate the user the mitigation for

1269
01:09:34,509 --> 01:09:40,750
that is throttling limiting the number

1270
01:09:36,250 --> 01:09:43,089
of failed attempts in password

1271
01:09:40,750 --> 01:09:46,078
authentication and of course using also

1272
01:09:43,089 --> 01:09:48,939
second factors the other very very

1273
01:09:46,078 --> 01:09:52,929
relevant and effective attacks on

1274
01:09:48,939 --> 01:09:54,940
computer on passwords is offline

1275
01:09:52,929 --> 01:09:58,540
dictionary attacks that happened when an

1276
01:09:54,940 --> 01:10:03,460
attacker breaks into a server find the

1277
01:09:58,540 --> 01:10:07,110
the password file and now it says a set

1278
01:10:03,460 --> 01:10:10,420
of hashed passwords and now it can run a

1279
01:10:07,110 --> 01:10:15,000
offline dictionary attack on that list

1280
01:10:10,420 --> 01:10:17,920
that's that's unavoidable what will be

1281
01:10:15,000 --> 01:10:20,440
important is that the at this

1282
01:10:17,920 --> 01:10:23,290
unavoidable attack will start only at

1283
01:10:20,440 --> 01:10:25,179
the time in which after the attacker

1284
01:10:23,290 --> 01:10:28,630
breaks it to the server and not before

1285
01:10:25,180 --> 01:10:32,560
that like by building pre-computed

1286
01:10:28,630 --> 01:10:36,400
precomputed dictionaries so the the

1287
01:10:32,560 --> 01:10:38,470
mitigation here is salting there are a

1288
01:10:36,400 --> 01:10:42,099
bunch of avoidable attacks one of them

1289
01:10:38,470 --> 01:10:44,890
which we owe to the password over TLS

1290
01:10:42,100 --> 01:10:46,780
which is what the majority of us do what

1291
01:10:44,890 --> 01:10:49,780
for password encrypting passwords and

1292
01:10:46,780 --> 01:10:53,130
sending them over TLS is what I call

1293
01:10:49,780 --> 01:10:56,050
plaintext password visibility the server

1294
01:10:53,130 --> 01:10:59,200
when it gets the encrypted password the

1295
01:10:56,050 --> 01:11:02,020
creeps the TLS and can see the password

1296
01:10:59,200 --> 01:11:05,050
in the clear of course anyone in the way

1297
01:11:02,020 --> 01:11:09,850
that can somehow either break TLS or

1298
01:11:05,050 --> 01:11:12,390
just have a legal opening to to see

1299
01:11:09,850 --> 01:11:15,880
what's in the plain text such as

1300
01:11:12,390 --> 01:11:18,550
termination porn Citians middleboxes all

1301
01:11:15,880 --> 01:11:20,830
of these the password would be visible

1302
01:11:18,550 --> 01:11:25,510
to them in particular phishing is a

1303
01:11:20,830 --> 01:11:28,110
result of of these password visibility

1304
01:11:25,510 --> 01:11:30,100
the other thing that some

1305
01:11:28,110 --> 01:11:32,849
implementations don't avoid but are

1306
01:11:30,100 --> 01:11:34,690
avoidable is this pre-computation

1307
01:11:32,850 --> 01:11:38,410
dictionaries that I want mentioning

1308
01:11:34,690 --> 01:11:42,129
before again if you don't solve the

1309
01:11:38,410 --> 01:11:44,519
passwords that something that is a

1310
01:11:42,130 --> 01:11:47,170
weakness that definitely is avoidable

1311
01:11:44,520 --> 01:11:50,530
this brings us to the notion of a

1312
01:11:47,170 --> 01:11:53,020
symmetric tags or APEC and a symmetric

1313
01:11:50,530 --> 01:11:56,769
page is a page a password authenticated

1314
01:11:53,020 --> 01:11:59,230
key change in the client server setting

1315
01:11:56,770 --> 01:12:02,110
this is in contrast to symmetric pegs

1316
01:11:59,230 --> 01:12:04,450
which is between two peers where both of

1317
01:12:02,110 --> 01:12:07,450
them remember they all store the same

1318
01:12:04,450 --> 01:12:10,090
password in the client server the user

1319
01:12:07,450 --> 01:12:14,199
will have a password and the server will

1320
01:12:10,090 --> 01:12:19,630
a store some one-way image of the of the

1321
01:12:14,199 --> 01:12:23,469
password now to be an APEC we want some

1322
01:12:19,630 --> 01:12:26,830
security assurances so first one is no

1323
01:12:23,469 --> 01:12:29,560
pre-computation attacks it has to be it

1324
01:12:26,830 --> 01:12:31,739
will be open to offline dictionary

1325
01:12:29,560 --> 01:12:34,420
attacks upon server compromised but

1326
01:12:31,739 --> 01:12:37,150
nothing that can help that attack before

1327
01:12:34,420 --> 01:12:39,429
breaking into the server we will want

1328
01:12:37,150 --> 01:12:42,250
the the plaintext password to never be

1329
01:12:39,429 --> 01:12:44,590
visible to anyone outside the client

1330
01:12:42,250 --> 01:12:47,110
domain in particular not not to the

1331
01:12:44,590 --> 01:12:49,810
server and we also ask you to be PKI

1332
01:12:47,110 --> 01:12:52,360
free not depends on on PKI we want that

1333
01:12:49,810 --> 01:12:54,820
the only thing that the user has to take

1334
01:12:52,360 --> 01:12:58,059
with him and Trust is the password and

1335
01:12:54,820 --> 01:13:00,699
nothing else so these are the properties

1336
01:12:58,060 --> 01:13:03,610
that we want for an APEC opaque is a

1337
01:13:00,699 --> 01:13:07,169
protocol that are discussed here and

1338
01:13:03,610 --> 01:13:10,389
achieve these properties actually quite

1339
01:13:07,170 --> 01:13:14,050
surprisingly it is the first protocol to

1340
01:13:10,389 --> 01:13:16,150
achieve all these properties we we have

1341
01:13:14,050 --> 01:13:19,570
seen over the years many a symmetric

1342
01:13:16,150 --> 01:13:22,269
takes being presented both in theory and

1343
01:13:19,570 --> 01:13:24,940
in practice but none of these protocols

1344
01:13:22,270 --> 01:13:26,800
is actually secured against precomputed

1345
01:13:24,940 --> 01:13:29,049
dictionaries and the reason is that

1346
01:13:26,800 --> 01:13:31,719
these protocols either don't use salt at

1347
01:13:29,050 --> 01:13:33,550
all so they are trivially open or if the

1348
01:13:31,719 --> 01:13:35,770
use salt they transmit the salt in the

1349
01:13:33,550 --> 01:13:40,060
clear between the server and the client

1350
01:13:35,770 --> 01:13:42,690
therefore the attacker can learn they

1351
01:13:40,060 --> 01:13:46,510
take the salt and build a targeted

1352
01:13:42,690 --> 01:13:48,159
dictionary and again this is even true

1353
01:13:46,510 --> 01:13:50,050
for some protocols that were proven

1354
01:13:48,159 --> 01:13:51,759
secure but they were proven secure in a

1355
01:13:50,050 --> 01:13:54,550
weak model that allows for these attacks

1356
01:13:51,760 --> 01:13:57,040
and it is also the case for many of

1357
01:13:54,550 --> 01:14:02,530
these more practical protocols that have

1358
01:13:57,040 --> 01:14:05,380
been suggested as possible standards and

1359
01:14:02,530 --> 01:14:08,320
it's a PKI free protocol the only place

1360
01:14:05,380 --> 01:14:11,860
where you need to assume PKI or secure

1361
01:14:08,320 --> 01:14:13,840
channels is for the password

1362
01:14:11,860 --> 01:14:16,570
registration stage in which the user

1363
01:14:13,840 --> 01:14:18,519
needs to be able to identify the server

1364
01:14:16,570 --> 01:14:22,259
it is

1365
01:14:18,519 --> 01:14:25,269
storing the password related information

1366
01:14:22,260 --> 01:14:27,699
and the password will never be in the

1367
01:14:25,269 --> 01:14:30,010
clear outside the client domain not even

1368
01:14:27,699 --> 01:14:32,650
during password registration and in

1369
01:14:30,010 --> 01:14:37,659
particular this forest issue so these

1370
01:14:32,650 --> 01:14:41,289
are nice properties they they are also

1371
01:14:37,659 --> 01:14:43,210
proven I will talk about that and there

1372
01:14:41,289 --> 01:14:46,239
are some other interesting properties of

1373
01:14:43,210 --> 01:14:47,849
the protocol but first let me give you

1374
01:14:46,239 --> 01:14:51,098
an idea of how this works

1375
01:14:47,849 --> 01:14:53,920
so for that I need to first introduce

1376
01:14:51,099 --> 01:14:55,989
this notion of oblivious PRF that some

1377
01:14:53,920 --> 01:14:58,599
of you may be familiar with

1378
01:14:55,989 --> 01:15:01,799
anyway the PRF or pseudo-random function

1379
01:14:58,599 --> 01:15:04,059
is a key function that is

1380
01:15:01,800 --> 01:15:06,389
indistinguishable from a random function

1381
01:15:04,059 --> 01:15:09,519
for anyone that doesn't have the key an

1382
01:15:06,389 --> 01:15:13,090
oblivious PRF is a PRF that in addition

1383
01:15:09,519 --> 01:15:15,579
has a protocol that the user can run

1384
01:15:13,090 --> 01:15:18,699
with the server where the user has an

1385
01:15:15,579 --> 01:15:20,739
input the server has a key at the end of

1386
01:15:18,699 --> 01:15:23,138
the protocol the user learns the output

1387
01:15:20,739 --> 01:15:26,230
of the function on its input without the

1388
01:15:23,139 --> 01:15:28,510
server learning anything anything

1389
01:15:26,230 --> 01:15:30,759
meaning nothing about the input of the

1390
01:15:28,510 --> 01:15:34,170
function or nothing about the output of

1391
01:15:30,760 --> 01:15:37,929
the function okay so we with this

1392
01:15:34,170 --> 01:15:40,840
beautiful crypto primitive we can build

1393
01:15:37,929 --> 01:15:42,969
now opaque and I'll show you the basic

1394
01:15:40,840 --> 01:15:45,610
idea the basic idea is not new actually

1395
01:15:42,969 --> 01:15:49,119
this originates with the beautiful and

1396
01:15:45,610 --> 01:15:51,130
seminal work of third and cholesky and

1397
01:15:49,119 --> 01:15:54,429
the first implementation of this idea

1398
01:15:51,130 --> 01:15:56,530
into a take is due to Boyan there is

1399
01:15:54,429 --> 01:15:58,749
some other related work none of these

1400
01:15:56,530 --> 01:16:01,210
words actually have the generality of

1401
01:15:58,749 --> 01:16:04,239
opaque that I will show and none of the

1402
01:16:01,210 --> 01:16:09,010
those have any proofs of security or

1403
01:16:04,239 --> 01:16:12,459
even a formal model of Apex security so

1404
01:16:09,010 --> 01:16:14,440
okay so now we had the OPF so the idea

1405
01:16:12,460 --> 01:16:16,269
is really really simple once you have

1406
01:16:14,440 --> 01:16:19,150
the opra what we are going to do is the

1407
01:16:16,269 --> 01:16:20,920
user and the server will run an OPRS the

1408
01:16:19,150 --> 01:16:24,339
input of the user will be the password

1409
01:16:20,920 --> 01:16:27,309
the output will be an output of the PRF

1410
01:16:24,340 --> 01:16:29,820
which is a strong cryptographic key

1411
01:16:27,309 --> 01:16:33,030
because it's a pseudo-random

1412
01:16:29,820 --> 01:16:35,639
you so the user basically exchanged its

1413
01:16:33,030 --> 01:16:38,130
password for a strong cryptographic key

1414
01:16:35,639 --> 01:16:40,020
while in the process no one including

1415
01:16:38,130 --> 01:16:42,690
the server learns anything about the

1416
01:16:40,020 --> 01:16:45,150
password or anything about the key that

1417
01:16:42,690 --> 01:16:46,949
the user retrieved so now that the user

1418
01:16:45,150 --> 01:16:49,559
has a strong cryptographic key it can

1419
01:16:46,949 --> 01:16:53,219
use it as a private key in a key

1420
01:16:49,560 --> 01:16:56,310
exchange with the server okay so that's

1421
01:16:53,219 --> 01:17:00,659
everything is a key retrieval stage and

1422
01:16:56,310 --> 01:17:04,290
then using that key to bootstrap a key

1423
01:17:00,659 --> 01:17:09,179
exchange session in the case of a peg

1424
01:17:04,290 --> 01:17:11,820
fair we will build opaque and the basis

1425
01:17:09,179 --> 01:17:13,829
of any o PRF and any key exchange

1426
01:17:11,820 --> 01:17:15,690
protocol we'll be looking at key a

1427
01:17:13,829 --> 01:17:18,269
public data exchange protocols where the

1428
01:17:15,690 --> 01:17:20,669
user will have a public and private

1429
01:17:18,270 --> 01:17:23,760
paper the server would have a public and

1430
01:17:20,670 --> 01:17:26,670
private a pearl now instead of using the

1431
01:17:23,760 --> 01:17:29,460
retrieved key as a private key what we

1432
01:17:26,670 --> 01:17:32,570
do is during tassel registration the

1433
01:17:29,460 --> 01:17:36,329
user will encrypt its own private key

1434
01:17:32,570 --> 01:17:37,860
and store it at the server also will

1435
01:17:36,329 --> 01:17:40,739
authenticate the public key of the

1436
01:17:37,860 --> 01:17:43,739
server in the same envelope and during

1437
01:17:40,739 --> 01:17:46,079
login it will get back the envelope will

1438
01:17:43,739 --> 01:17:48,178
run the OPR F to get back the key that

1439
01:17:46,079 --> 01:17:50,730
encrypted that envelope decrypt the

1440
01:17:48,179 --> 01:17:52,590
envelope now it has its own private key

1441
01:17:50,730 --> 01:17:56,309
it has the public key of the server and

1442
01:17:52,590 --> 01:18:00,329
both can run a key exchange that's

1443
01:17:56,310 --> 01:18:04,590
that's basically all that is in the

1444
01:18:00,329 --> 01:18:06,090
protocol now it's about details and the

1445
01:18:04,590 --> 01:18:07,500
devil is in the details and definitely

1446
01:18:06,090 --> 01:18:09,690
there are details here that can change

1447
01:18:07,500 --> 01:18:13,550
this from secure to insecure but this is

1448
01:18:09,690 --> 01:18:16,320
the idea so basically you can see I

1449
01:18:13,550 --> 01:18:20,400
think of a pair of take as a compiler

1450
01:18:16,320 --> 01:18:24,420
basically from any one from any

1451
01:18:20,400 --> 01:18:26,909
oblivious PRF and the key exchange to a

1452
01:18:24,420 --> 01:18:29,010
page so when I say any case change

1453
01:18:26,909 --> 01:18:31,650
actually in this case change with the

1454
01:18:29,010 --> 01:18:33,630
KCI property that was mentioned in

1455
01:18:31,650 --> 01:18:35,610
previous talks I don't want to get into

1456
01:18:33,630 --> 01:18:38,070
the details but essentially what it

1457
01:18:35,610 --> 01:18:42,389
means is I mean it's the property that I

1458
01:18:38,070 --> 01:18:43,139
show that ensures that if you break into

1459
01:18:42,389 --> 01:18:44,610
the server

1460
01:18:43,139 --> 01:18:47,159
you will be able to impersonate the

1461
01:18:44,610 --> 01:18:52,500
server to the client to the user but not

1462
01:18:47,159 --> 01:18:55,920
vice versa okay so how do we actually

1463
01:18:52,500 --> 01:18:58,440
build a page we start with the

1464
01:18:55,920 --> 01:19:01,500
diffie-hellman OPR F which is the most

1465
01:18:58,440 --> 01:19:03,928
efficient implementation we have of OPRS

1466
01:19:01,500 --> 01:19:08,429
this is nothing other than blind

1467
01:19:03,929 --> 01:19:13,050
diffie-hellman so the PRF will consist

1468
01:19:08,429 --> 01:19:16,800
of the user will take its input will

1469
01:19:13,050 --> 01:19:20,909
compute on it a hash function H prime

1470
01:19:16,800 --> 01:19:23,369
which Maps that input which in our case

1471
01:19:20,909 --> 01:19:26,129
will be a password into a random group

1472
01:19:23,369 --> 01:19:29,400
element and that value will be raised to

1473
01:19:26,130 --> 01:19:32,310
the power of K where K is the PRF key

1474
01:19:29,400 --> 01:19:36,388
that in our case will be help will be

1475
01:19:32,310 --> 01:19:40,679
held by by the server now to compute the

1476
01:19:36,389 --> 01:19:43,020
function the the user will take this H

1477
01:19:40,679 --> 01:19:45,510
prime X the mapping of it password to

1478
01:19:43,020 --> 01:19:48,210
the group will multiply it by a random

1479
01:19:45,510 --> 01:19:51,840
group element G to the our will send

1480
01:19:48,210 --> 01:19:54,600
this to the server which will raise the

1481
01:19:51,840 --> 01:19:57,030
received value a to the power of K this

1482
01:19:54,600 --> 01:20:01,199
will go back to the with the client

1483
01:19:57,030 --> 01:20:03,420
which by the magic of diffie-hellman and

1484
01:20:01,199 --> 01:20:05,879
algebra all this stuff will be able to

1485
01:20:03,420 --> 01:20:09,179
actually deep line the value and get H

1486
01:20:05,880 --> 01:20:12,030
prime X as required doesn't matter if

1487
01:20:09,179 --> 01:20:14,159
you follow this or no the important

1488
01:20:12,030 --> 01:20:17,280
point here is to see that all the server

1489
01:20:14,159 --> 01:20:20,699
sees in this interaction is this value a

1490
01:20:17,280 --> 01:20:24,030
which is something times a random group

1491
01:20:20,699 --> 01:20:26,190
element okay so a is a random group

1492
01:20:24,030 --> 01:20:28,199
element and the server has learned

1493
01:20:26,190 --> 01:20:32,940
nothing nothing in the information

1494
01:20:28,199 --> 01:20:35,428
theoretic sense of nothing and so X and

1495
01:20:32,940 --> 01:20:37,710
the output of the function on X is

1496
01:20:35,429 --> 01:20:41,820
perfectly hidden from the server and

1497
01:20:37,710 --> 01:20:44,639
therefore from anyone else okay one

1498
01:20:41,820 --> 01:20:46,380
thing I want to say is about the the

1499
01:20:44,639 --> 01:20:48,810
complexity the performance of the thing

1500
01:20:46,380 --> 01:20:53,580
then the communication is just a single

1501
01:20:48,810 --> 01:20:56,440
round the computation is a one

1502
01:20:53,580 --> 01:20:58,650
exponentiation for the server - for the

1503
01:20:56,440 --> 01:21:03,900
client where one of them is with a fixed

1504
01:20:58,650 --> 01:21:07,230
generator and one hushing into the curve

1505
01:21:03,900 --> 01:21:11,559
so now we can build opaque opaque

1506
01:21:07,230 --> 01:21:13,959
consists of running the OPRS between the

1507
01:21:11,560 --> 01:21:15,700
user and the server as I mentioned

1508
01:21:13,960 --> 01:21:19,360
before in this case the diffie-hellman

1509
01:21:15,700 --> 01:21:22,389
OPRS in parallel the server will be

1510
01:21:19,360 --> 01:21:25,750
sending this envelope where the user has

1511
01:21:22,390 --> 01:21:27,790
these encrypted values and also in

1512
01:21:25,750 --> 01:21:30,580
parallel they will run it an ephemeral

1513
01:21:27,790 --> 01:21:34,480
diffie-hellman okay at the end of the

1514
01:21:30,580 --> 01:21:37,120
thing the user has learned the output of

1515
01:21:34,480 --> 01:21:40,089
the opre from the password it can use to

1516
01:21:37,120 --> 01:21:42,550
decrypt the envelope and now it have its

1517
01:21:40,090 --> 01:21:47,350
own private key the server public key

1518
01:21:42,550 --> 01:21:49,270
and with it it can compute a session key

1519
01:21:47,350 --> 01:21:51,430
depending on the specifics of the key

1520
01:21:49,270 --> 01:21:56,140
exchange protocol one same thing for

1521
01:21:51,430 --> 01:21:58,750
this server if for example we implement

1522
01:21:56,140 --> 01:22:01,360
this with the key change being h mq v

1523
01:21:58,750 --> 01:22:03,340
then you get this full protocol in a

1524
01:22:01,360 --> 01:22:05,920
single round with forward secrecy and

1525
01:22:03,340 --> 01:22:08,770
the other properties of h mq v and the

1526
01:22:05,920 --> 01:22:14,140
computational cost is about two and a

1527
01:22:08,770 --> 01:22:18,930
half variable base exponentiations for

1528
01:22:14,140 --> 01:22:23,290
both the client and server plus a map

1529
01:22:18,930 --> 01:22:26,590
hashing to the curve but for the client

1530
01:22:23,290 --> 01:22:28,630
so this is one instantiation we have

1531
01:22:26,590 --> 01:22:31,510
more instantiations by the way if you

1532
01:22:28,630 --> 01:22:34,210
use h mq v and you want to get explicit

1533
01:22:31,510 --> 01:22:37,090
user or client authentication you need

1534
01:22:34,210 --> 01:22:41,160
to add one more flow a message with the

1535
01:22:37,090 --> 01:22:43,240
mac from the client but under other

1536
01:22:41,160 --> 01:22:45,580
implicit authenticate the protocol

1537
01:22:43,240 --> 01:22:46,960
static use usually is a little bit more

1538
01:22:45,580 --> 01:22:49,510
of exponentiation

1539
01:22:46,960 --> 01:22:51,670
another instantiation is with signature

1540
01:22:49,510 --> 01:22:53,680
based protocols in particular if you do

1541
01:22:51,670 --> 01:22:55,930
it with Sigma then you will have the

1542
01:22:53,680 --> 01:22:59,830
private key of the client and the server

1543
01:22:55,930 --> 01:23:03,100
will be signing fries and you will need

1544
01:22:59,830 --> 01:23:06,639
three messages to exchange these these

1545
01:23:03,100 --> 01:23:09,459
signatures but the o PRF itself doesn't

1546
01:23:06,639 --> 01:23:13,349
any more messages that Sigma had in the

1547
01:23:09,459 --> 01:23:17,530
first place now very importantly is that

1548
01:23:13,349 --> 01:23:20,979
opaque can work well with the LS it

1549
01:23:17,530 --> 01:23:24,360
relatively blind blind smoothly with the

1550
01:23:20,979 --> 01:23:27,550
three flight exchange of TLS 1.3

1551
01:23:24,360 --> 01:23:32,679
actually what you're going to do is you

1552
01:23:27,550 --> 01:23:34,539
need to take TLS 1.3 as is plus some

1553
01:23:32,679 --> 01:23:39,309
extensions to accommodate the

1554
01:23:34,539 --> 01:23:40,630
diffie-hellman or PRF values and the

1555
01:23:39,309 --> 01:23:41,919
signatures that you will have a

1556
01:23:40,630 --> 01:23:44,800
signature from the server and a

1557
01:23:41,919 --> 01:23:47,169
signature from the client will instead

1558
01:23:44,800 --> 01:23:50,619
of being certificate based signatures as

1559
01:23:47,169 --> 01:23:53,949
in the regular TLS these will use the

1560
01:23:50,619 --> 01:23:56,018
keys that are being stored by opaque

1561
01:23:53,949 --> 01:23:59,829
itself but other than that is the same

1562
01:23:56,019 --> 01:24:01,749
exact logic of the protocol now in this

1563
01:23:59,829 --> 01:24:05,110
case I'm sending the account information

1564
01:24:01,749 --> 01:24:07,449
user ID in the first message unprotected

1565
01:24:05,110 --> 01:24:10,780
if we want to protect that then you

1566
01:24:07,449 --> 01:24:14,409
either need some keying material to run

1567
01:24:10,780 --> 01:24:16,449
a zero RTP or is a resumption key if you

1568
01:24:14,409 --> 01:24:18,789
have that then this protocol is perfect

1569
01:24:16,449 --> 01:24:21,188
if you don't have that and you want to

1570
01:24:18,789 --> 01:24:26,949
protect account information then you

1571
01:24:21,189 --> 01:24:30,039
will need to add a one RTP round-trip in

1572
01:24:26,949 --> 01:24:32,339
a two to the mid to the protocol where

1573
01:24:30,039 --> 01:24:34,478
you first do a regular TLS

1574
01:24:32,340 --> 01:24:37,869
authentication of the server to exchange

1575
01:24:34,479 --> 01:24:41,050
a key with which you protect the the

1576
01:24:37,869 --> 01:24:43,539
user account information here you will

1577
01:24:41,050 --> 01:24:46,149
be using a server certificate but you

1578
01:24:43,539 --> 01:24:48,340
will only be using it for the privacy of

1579
01:24:46,149 --> 01:24:51,939
account information not for security of

1580
01:24:48,340 --> 01:24:55,630
the key exchange protocol itself now if

1581
01:24:51,939 --> 01:24:58,749
you do that that you put both opaque and

1582
01:24:55,630 --> 01:25:00,579
one round of authentication of

1583
01:24:58,749 --> 01:25:02,739
certificate based authentication of the

1584
01:25:00,579 --> 01:25:06,789
server what you actually get is this

1585
01:25:02,739 --> 01:25:08,709
edging property of TLS which now your

1586
01:25:06,789 --> 01:25:11,349
product will be secure as long as either

1587
01:25:08,709 --> 01:25:14,679
the PKI or on TLS are functioning

1588
01:25:11,349 --> 01:25:16,989
correctly and or the password the

1589
01:25:14,679 --> 01:25:19,059
password is secure so even the pass very

1590
01:25:16,989 --> 01:25:20,049
secure and PK is dot you're still

1591
01:25:19,059 --> 01:25:22,660
getting secure

1592
01:25:20,050 --> 01:25:25,120
this is what I call from going from TLS

1593
01:25:22,660 --> 01:25:32,360
protected passwords which is what we use

1594
01:25:25,120 --> 01:25:35,519
today to password protected TLS this is

1595
01:25:32,360 --> 01:25:35,519
[Applause]

1596
01:25:37,260 --> 01:25:44,590
about topic security well we we proved

1597
01:25:40,510 --> 01:25:46,780
security in in a strong APEC model that

1598
01:25:44,590 --> 01:25:51,610
has ensures all the properties that I

1599
01:25:46,780 --> 01:25:53,830
discussed before by the way I was saying

1600
01:25:51,610 --> 01:25:56,259
that salting is necessary for the things

1601
01:25:53,830 --> 01:25:58,720
there is no salting in the traditional

1602
01:25:56,260 --> 01:26:01,780
sense but the OPR FTK function

1603
01:25:58,720 --> 01:26:04,180
essentially as a salt the proof is in a

1604
01:26:01,780 --> 01:26:09,160
universally composable model in this

1605
01:26:04,180 --> 01:26:13,570
paper with station show in its a strong

1606
01:26:09,160 --> 01:26:17,200
APEC model and the proof is generic

1607
01:26:13,570 --> 01:26:19,990
using any OPR F any key exchange with

1608
01:26:17,200 --> 01:26:22,510
KCI with some properties of a Fanta

1609
01:26:19,990 --> 01:26:28,570
kettle encryption but everything that

1610
01:26:22,510 --> 01:26:30,700
has efficient implementations and if you

1611
01:26:28,570 --> 01:26:32,440
use it with the fuel mono PRF then the

1612
01:26:30,700 --> 01:26:34,960
secretary security is in the random

1613
01:26:32,440 --> 01:26:38,410
Oracle model and there they one more

1614
01:26:34,960 --> 01:26:40,810
difficult - sumption the protocol is a

1615
01:26:38,410 --> 01:26:43,450
forward secure which is very important

1616
01:26:40,810 --> 01:26:45,520
for password protocols because if the

1617
01:26:43,450 --> 01:26:47,380
password leaks you still want the

1618
01:26:45,520 --> 01:26:50,380
security of the session keys that you

1619
01:26:47,380 --> 01:26:56,500
exchange and one thing that I didn't

1620
01:26:50,380 --> 01:26:59,470
mention is that this can also support

1621
01:26:56,500 --> 01:27:02,770
users side hardening so if you want to

1622
01:26:59,470 --> 01:27:08,350
do hush iterations so use a function

1623
01:27:02,770 --> 01:27:09,010
like script or Aragon - now this kind of

1624
01:27:08,350 --> 01:27:11,980
functions

1625
01:27:09,010 --> 01:27:15,250
this is offloaded to to the user and

1626
01:27:11,980 --> 01:27:18,190
that strengthened more the protocol

1627
01:27:15,250 --> 01:27:22,000
against dictionary attacks in the case

1628
01:27:18,190 --> 01:27:23,860
of server compromised there are some

1629
01:27:22,000 --> 01:27:25,690
nice extensions to the protocol one of

1630
01:27:23,860 --> 01:27:27,969
them which is quite obvious is

1631
01:27:25,690 --> 01:27:30,820
credential retrieval since you already

1632
01:27:27,970 --> 01:27:33,130
have this envelope that this the user

1633
01:27:30,820 --> 01:27:33,949
deposit on the server then that same

1634
01:27:33,130 --> 01:27:36,229
envelope

1635
01:27:33,949 --> 01:27:38,928
contain whatever in secrets you are

1636
01:27:36,229 --> 01:27:40,760
interested in or any information that

1637
01:27:38,929 --> 01:27:42,320
the user needs to have authenticated so

1638
01:27:40,760 --> 01:27:44,389
that's that's immediate from the

1639
01:27:42,320 --> 01:27:46,159
protocol another thing that is

1640
01:27:44,389 --> 01:27:49,159
interesting is that you can have a multi

1641
01:27:46,159 --> 01:27:51,679
server implementation where the instead

1642
01:27:49,159 --> 01:27:53,780
of implementing an open area or PRF you

1643
01:27:51,679 --> 01:27:58,070
implement a threshold or PRF and it

1644
01:27:53,780 --> 01:28:00,619
gives you the the property that in order

1645
01:27:58,070 --> 01:28:02,989
to break the system the this the

1646
01:28:00,619 --> 01:28:05,150
attacker needs to break into a threshold

1647
01:28:02,989 --> 01:28:07,369
of servers let's say three out of five

1648
01:28:05,150 --> 01:28:10,999
two out of three two out of two whatever

1649
01:28:07,369 --> 01:28:13,308
is your your design and even if it

1650
01:28:10,999 --> 01:28:15,920
breaks then it can but then it still has

1651
01:28:13,309 --> 01:28:21,050
to do an offline dictionary attack so

1652
01:28:15,920 --> 01:28:24,019
this is a very strong strong model and I

1653
01:28:21,050 --> 01:28:26,510
think people should use it more in in

1654
01:28:24,019 --> 01:28:29,090
practice anyway opaque is very friendly

1655
01:28:26,510 --> 01:28:30,800
to to this implementation and this

1656
01:28:29,090 --> 01:28:33,170
requires changing that server-side

1657
01:28:30,800 --> 01:28:40,820
doesn't require any change on the user

1658
01:28:33,170 --> 01:28:43,760
or client salt to summarize so opaque is

1659
01:28:40,820 --> 01:28:46,518
it's modular and flexible it allows

1660
01:28:43,760 --> 01:28:49,539
composition of different protocols with

1661
01:28:46,519 --> 01:28:52,880
different you know efficiency measures

1662
01:28:49,539 --> 01:28:54,949
you can do it three quantum post quantum

1663
01:28:52,880 --> 01:28:57,349
everything all combinations are possible

1664
01:28:54,949 --> 01:28:59,379
because they the proof is is generic

1665
01:28:57,349 --> 01:29:03,199
we've seen that there are efficient

1666
01:28:59,380 --> 01:29:06,530
instantiations its integration with TLS

1667
01:29:03,199 --> 01:29:09,400
is relatively easy nothing is too easy

1668
01:29:06,530 --> 01:29:13,159
when it comes to TLS but that if Lizzie

1669
01:29:09,400 --> 01:29:15,829
it very importantly gives a much more

1670
01:29:13,159 --> 01:29:18,320
secure alternative to our current

1671
01:29:15,829 --> 01:29:20,780
practice of encrypting encrypting

1672
01:29:18,320 --> 01:29:25,759
passwords over TLS and you can even have

1673
01:29:20,780 --> 01:29:29,320
this hedging property of protecting TLS

1674
01:29:25,760 --> 01:29:31,400
with password not the other way around

1675
01:29:29,320 --> 01:29:34,099
extensions I mentioned credential

1676
01:29:31,400 --> 01:29:37,388
retrieval and the user transparent multi

1677
01:29:34,099 --> 01:29:39,769
server implementation as for security

1678
01:29:37,389 --> 01:29:41,599
the protocol is secure against

1679
01:29:39,769 --> 01:29:44,150
pre-computation attacks actually the

1680
01:29:41,599 --> 01:29:46,550
first through a peg in that sense

1681
01:29:44,150 --> 01:29:47,940
previous protocols were not secure in

1682
01:29:46,550 --> 01:29:50,130
that strong

1683
01:29:47,940 --> 01:29:52,679
posture is Neven in the clear oxide

1684
01:29:50,130 --> 01:29:53,220
decline domain there's no reliance on

1685
01:29:52,680 --> 01:29:57,240
PKI

1686
01:29:53,220 --> 01:30:00,420
we get forward security client-side

1687
01:29:57,240 --> 01:30:04,110
hardening and a proof of all these

1688
01:30:00,420 --> 01:30:09,480
properties in a strong you see security

1689
01:30:04,110 --> 01:30:11,250
model to fight to finish basically the

1690
01:30:09,480 --> 01:30:14,280
reason I wanted to present this here is

1691
01:30:11,250 --> 01:30:17,280
because I want to advertise these giving

1692
01:30:14,280 --> 01:30:18,840
workers to the possibility of

1693
01:30:17,280 --> 01:30:20,219
standardizing or something like this I

1694
01:30:18,840 --> 01:30:21,960
think that if we are interesting to

1695
01:30:20,220 --> 01:30:23,880
standardize on a protocol that is better

1696
01:30:21,960 --> 01:30:28,050
than what we have today this is a very

1697
01:30:23,880 --> 01:30:29,850
good candidate to do so the idea will be

1698
01:30:28,050 --> 01:30:33,240
working on the CF RG antennas working

1699
01:30:29,850 --> 01:30:37,830
group for this and any help will be

1700
01:30:33,240 --> 01:30:42,059
welcome so thank you and here are two

1701
01:30:37,830 --> 01:30:45,440
point bit ly links to the paper and the

1702
01:30:42,060 --> 01:30:48,960
draft and a word of advertisement I

1703
01:30:45,440 --> 01:30:50,460
didn't mention anything about other ways

1704
01:30:48,960 --> 01:30:54,030
of protecting passwords that are

1705
01:30:50,460 --> 01:30:56,580
complementary to opaque and it is using

1706
01:30:54,030 --> 01:30:58,980
random independent passwords of course

1707
01:30:56,580 --> 01:31:01,200
that's not humanly possible but you can

1708
01:30:58,980 --> 01:31:02,309
do that with password managers if he and

1709
01:31:01,200 --> 01:31:05,280
if you want to build the password

1710
01:31:02,310 --> 01:31:08,010
manager the best idea I have is this

1711
01:31:05,280 --> 01:31:10,889
paper thinks that I present it actually

1712
01:31:08,010 --> 01:31:12,960
two years ago but I wanted to take the

1713
01:31:10,890 --> 01:31:16,020
opportunity to remind people about this

1714
01:31:12,960 --> 01:31:18,780
and see more use of this kind of stuff

1715
01:31:16,020 --> 01:31:23,310
which uses exactly the same technology

1716
01:31:18,780 --> 01:31:24,370
the same appearance as opaque uses thank

1717
01:31:23,310 --> 01:31:27,920
you

1718
01:31:24,370 --> 01:31:27,920
[Applause]

1719
01:31:29,570 --> 01:31:37,139
we have time time for one very quick

1720
01:31:33,809 --> 01:31:41,369
question and then we can sorry her can

1721
01:31:37,139 --> 01:31:44,760
the next speaker come up as well Hugo

1722
01:31:41,369 --> 01:31:49,228
can you bind back to the specification

1723
01:31:44,760 --> 01:31:51,030
you had I have a quick question how

1724
01:31:49,229 --> 01:31:53,159
quick is it it's our single super quick

1725
01:31:51,030 --> 01:31:55,889
super quick so it may only be a

1726
01:31:53,159 --> 01:31:58,438
technicality but on the or maybe the

1727
01:31:55,889 --> 01:32:00,809
site before where you have the OPR F so

1728
01:31:58,439 --> 01:32:03,479
you define the OPR F as applying a hash

1729
01:32:00,809 --> 01:32:04,949
twice if you look at the top line but

1730
01:32:03,479 --> 01:32:06,479
and in the protocol itself the client

1731
01:32:04,949 --> 01:32:09,419
learns more than that it learns the

1732
01:32:06,479 --> 01:32:10,979
actual difficult value so it seems like

1733
01:32:09,419 --> 01:32:14,599
there's a bit of a mismatch there maybe

1734
01:32:10,979 --> 01:32:17,879
that's just a presentational thing no no

1735
01:32:14,599 --> 01:32:20,219
the the hash has to be they were when I

1736
01:32:17,879 --> 01:32:24,899
explained it I I ignored this external

1737
01:32:20,219 --> 01:32:27,269
hash because you know ideal the idea

1738
01:32:24,899 --> 01:32:29,849
doesn't use that but yeah you need that

1739
01:32:27,269 --> 01:32:33,869
external Haj for security and the point

1740
01:32:29,849 --> 01:32:37,019
is that hash basically protects the key

1741
01:32:33,869 --> 01:32:39,898
that is being output and is not

1742
01:32:37,019 --> 01:32:41,159
protected from the client which actually

1743
01:32:39,899 --> 01:32:42,780
is going to learn the key but is

1744
01:32:41,159 --> 01:32:48,089
protected from the rest of the world

1745
01:32:42,780 --> 01:32:50,039
yeah so it is necessary in there okay

1746
01:32:48,090 --> 01:32:52,050
all right but yes

1747
01:32:50,039 --> 01:32:54,110
why don't you think you go again don't

1748
01:32:52,050 --> 01:33:01,160
thank you

1749
01:32:54,110 --> 01:33:01,160
[Applause]

1750
01:33:27,210 --> 01:33:33,130
want to say okay alright now we'll learn

1751
01:33:31,030 --> 01:33:38,219
how not to share passwords hopefully we

1752
01:33:33,130 --> 01:33:42,370
have more than blank slides let's see

1753
01:33:38,219 --> 01:33:42,550
all right great take it away okay thank

1754
01:33:42,370 --> 01:33:45,820
you

1755
01:33:42,550 --> 01:33:48,010
this is a joint work together with money

1756
01:33:45,820 --> 01:33:49,900
now in been DIPP in class new cell you

1757
01:33:48,010 --> 01:33:56,139
want to learn how to not share the

1758
01:33:49,900 --> 01:33:57,549
password so second yay it's working okay

1759
01:33:56,139 --> 01:33:59,260
so that's what has been a one for a

1760
01:33:57,550 --> 01:34:02,050
really long time to be known to be used

1761
01:33:59,260 --> 01:34:04,090
in the Roman Empire days and probably

1762
01:34:02,050 --> 01:34:06,969
even before that and but the first real

1763
01:34:04,090 --> 01:34:08,860
model news was probably in MIT s CT SS

1764
01:34:06,969 --> 01:34:11,670
which was a time-sharing operating

1765
01:34:08,860 --> 01:34:15,460
system and system it's been used quite

1766
01:34:11,670 --> 01:34:19,090
quite a lot with and causing quite a lot

1767
01:34:15,460 --> 01:34:21,250
of damage and noted that people always

1768
01:34:19,090 --> 01:34:23,440
want to kill passwords and they've been

1769
01:34:21,250 --> 01:34:25,030
talking about the death of best word for

1770
01:34:23,440 --> 01:34:28,480
many many years and many many times

1771
01:34:25,030 --> 01:34:30,550
however and it was previously mentioned

1772
01:34:28,480 --> 01:34:33,280
and password are not dead yet and

1773
01:34:30,550 --> 01:34:35,949
probably more ubiquitous than ever right

1774
01:34:33,280 --> 01:34:37,989
now and one of the many problems of

1775
01:34:35,949 --> 01:34:40,750
passwords is that users tend to choose

1776
01:34:37,989 --> 01:34:42,699
really bad passwords many passwords very

1777
01:34:40,750 --> 01:34:47,260
low mean on topi which are very easy to

1778
01:34:42,699 --> 01:34:48,790
guess ok so this problem has been around

1779
01:34:47,260 --> 01:34:50,679
for a really long time when asked what

1780
01:34:48,790 --> 01:34:54,010
is new about it and what I want to say

1781
01:34:50,679 --> 01:34:56,469
is that and there is a change in what

1782
01:34:54,010 --> 01:34:58,719
happens when people use bad passwords in

1783
01:34:56,469 --> 01:35:00,280
the past if someone would have used bad

1784
01:34:58,719 --> 01:35:03,880
password then you could read these

1785
01:35:00,280 --> 01:35:06,639
emails and compromised its privacy but

1786
01:35:03,880 --> 01:35:09,460
today bad passwords have a much worse

1787
01:35:06,639 --> 01:35:12,250
meaning the net they can actually try to

1788
01:35:09,460 --> 01:35:14,320
compromise and the entire ecosystem they

1789
01:35:12,250 --> 01:35:16,449
can be used for large scale attacks and

1790
01:35:14,320 --> 01:35:20,409
maybe the most well-known example was

1791
01:35:16,449 --> 01:35:22,120
the Malay attack which different

1792
01:35:20,409 --> 01:35:26,559
passwords will use to create a very very

1793
01:35:22,120 --> 01:35:29,469
loud botnet and can create the two then

1794
01:35:26,560 --> 01:35:31,480
the biggest DDoS attack in history and

1795
01:35:29,469 --> 01:35:34,150
it's really easy to find this kind of

1796
01:35:31,480 --> 01:35:35,200
IOT devices on the web and the main

1797
01:35:34,150 --> 01:35:37,570
point here is that

1798
01:35:35,200 --> 01:35:40,450
if someone uses a really weak password

1799
01:35:37,570 --> 01:35:42,610
like if I choose my kids birthdays then

1800
01:35:40,450 --> 01:35:44,410
it might be bad for me it will be easy

1801
01:35:42,610 --> 01:35:47,080
to guess it but it won't compromise the

1802
01:35:44,410 --> 01:35:48,910
ecosystem because this vessel will

1803
01:35:47,080 --> 01:35:50,650
probably not be very popular but if

1804
01:35:48,910 --> 01:35:53,380
someone choose a popular password let's

1805
01:35:50,650 --> 01:35:54,730
say one two three four or password then

1806
01:35:53,380 --> 01:35:56,620
this is something that can really be bad

1807
01:35:54,730 --> 01:35:59,650
this subject that many users going to

1808
01:35:56,620 --> 01:36:02,370
use and then it's easy to try to take

1809
01:35:59,650 --> 01:36:05,530
over a large percentage of their devices

1810
01:36:02,370 --> 01:36:08,200
okay and there is a question that to

1811
01:36:05,530 --> 01:36:10,210
make their eyes and whose fault is it is

1812
01:36:08,200 --> 01:36:12,670
it the users that choose those bad

1813
01:36:10,210 --> 01:36:14,800
passwords obviously several providers or

1814
01:36:12,670 --> 01:36:19,230
bae manufacturers the doesn't doesn't

1815
01:36:14,800 --> 01:36:22,690
give them the infrastructure to actually

1816
01:36:19,230 --> 01:36:25,419
choose good passwords and recently in

1817
01:36:22,690 --> 01:36:28,480
this state of california a bill was

1818
01:36:25,420 --> 01:36:31,690
passed that says that this is we're

1819
01:36:28,480 --> 01:36:33,459
going to move the liability to the

1820
01:36:31,690 --> 01:36:35,019
manufacturers to the service providers

1821
01:36:33,460 --> 01:36:36,910
and we're going to require them to do

1822
01:36:35,020 --> 01:36:39,550
something about these passwords many

1823
01:36:36,910 --> 01:36:41,980
they can they must force users to add

1824
01:36:39,550 --> 01:36:43,450
others use a pre-programmed unique

1825
01:36:41,980 --> 01:36:45,820
password which is something that users

1826
01:36:43,450 --> 01:36:48,880
tend to really really hate oh they're

1827
01:36:45,820 --> 01:36:50,320
going to cause users to choose a new

1828
01:36:48,880 --> 01:36:53,230
password before they start using this

1829
01:36:50,320 --> 01:36:55,540
device and what is the main question is

1830
01:36:53,230 --> 01:36:57,280
what password I've done this users going

1831
01:36:55,540 --> 01:36:59,200
to choose and we're talking about the

1832
01:36:57,280 --> 01:37:00,519
same users they wouldn't bother to

1833
01:36:59,200 --> 01:37:02,950
change different passwords and they're

1834
01:37:00,520 --> 01:37:04,990
not really security well so and there's

1835
01:37:02,950 --> 01:37:06,790
a large probability they're still going

1836
01:37:04,990 --> 01:37:11,740
to use one two three four password

1837
01:37:06,790 --> 01:37:13,630
because they don't really kill okay and

1838
01:37:11,740 --> 01:37:15,280
so what about the solutions we need to

1839
01:37:13,630 --> 01:37:16,960
give some guidelines to the users to how

1840
01:37:15,280 --> 01:37:19,090
to choose a password but this is

1841
01:37:16,960 --> 01:37:21,130
something that's very very hard I'm sure

1842
01:37:19,090 --> 01:37:23,560
that everybody here world of those pesky

1843
01:37:21,130 --> 01:37:26,050
nice guidelines that says you must have

1844
01:37:23,560 --> 01:37:27,640
a number in your password or in capital

1845
01:37:26,050 --> 01:37:30,010
letter or a symbol or something like

1846
01:37:27,640 --> 01:37:31,900
that and fortunately a few months ago

1847
01:37:30,010 --> 01:37:33,700
one is decide that this is a bad idea

1848
01:37:31,900 --> 01:37:36,370
and they actually revoke those

1849
01:37:33,700 --> 01:37:38,019
requirements I said just ask the users

1850
01:37:36,370 --> 01:37:39,519
to choose the longest password they're

1851
01:37:38,020 --> 01:37:40,000
willing to do and let's hope for the

1852
01:37:39,520 --> 01:37:41,530
best

1853
01:37:40,000 --> 01:37:44,770
was actually nobody really knows what to

1854
01:37:41,530 --> 01:37:47,650
do about this okay so let's try to find

1855
01:37:44,770 --> 01:37:49,130
other solutions so there is the

1856
01:37:47,650 --> 01:37:51,160
two-factor authentication that

1857
01:37:49,130 --> 01:37:53,900
might be able to solve everything

1858
01:37:51,160 --> 01:37:55,610
unfortunately this is not something that

1859
01:37:53,900 --> 01:37:57,290
really works in reality not going to do

1860
01:37:55,610 --> 01:37:59,660
go to the details there's a very good

1861
01:37:57,290 --> 01:38:02,360
blog post just a month ago from India

1862
01:37:59,660 --> 01:38:04,580
from Google saying that actually mm it

1863
01:38:02,360 --> 01:38:05,990
occasion is not something that's used

1864
01:38:04,580 --> 01:38:06,860
too much in practice which is

1865
01:38:05,990 --> 01:38:09,469
unfortunate

1866
01:38:06,860 --> 01:38:11,780
okay so let's do another thing let's

1867
01:38:09,470 --> 01:38:13,700
force the server to simply store all of

1868
01:38:11,780 --> 01:38:15,800
the users password then it will gather a

1869
01:38:13,700 --> 01:38:17,210
good statistics on you and see if there

1870
01:38:15,800 --> 01:38:19,010
are any popular password and then it

1871
01:38:17,210 --> 01:38:21,770
will just blacklist those popular

1872
01:38:19,010 --> 01:38:23,090
password and I think that in this for

1873
01:38:21,770 --> 01:38:24,650
this audience they don't really need to

1874
01:38:23,090 --> 01:38:28,190
explain why this is a really really bad

1875
01:38:24,650 --> 01:38:29,900
solution and we don't want to do this so

1876
01:38:28,190 --> 01:38:32,570
how can we blacklist those popular

1877
01:38:29,900 --> 01:38:34,460
passwords maybe we'll just blacklist

1878
01:38:32,570 --> 01:38:36,469
what we know to be popular password

1879
01:38:34,460 --> 01:38:39,200
there is some knowledge perform

1880
01:38:36,470 --> 01:38:40,850
previously data bleaches and some common

1881
01:38:39,200 --> 01:38:42,620
knowledge that I don't know came out out

1882
01:38:40,850 --> 01:38:44,480
of the air I think everybody here knows

1883
01:38:42,620 --> 01:38:45,950
that one two three four is a popular

1884
01:38:44,480 --> 01:38:47,690
password and password this popular

1885
01:38:45,950 --> 01:38:49,429
password I'm not sure if you know that

1886
01:38:47,690 --> 01:38:52,040
Superman is a very popular person there

1887
01:38:49,430 --> 01:38:55,250
now some others but okay we know so

1888
01:38:52,040 --> 01:38:56,420
let's just back list them and I want to

1889
01:38:55,250 --> 01:38:58,790
claim that this is not good enough

1890
01:38:56,420 --> 01:39:00,850
because that's what distribution might

1891
01:38:58,790 --> 01:39:03,560
change over time we'll give one example

1892
01:39:00,850 --> 01:39:05,870
and people want to use password and then

1893
01:39:03,560 --> 01:39:07,550
mist come in and I said no you have to

1894
01:39:05,870 --> 01:39:09,500
add numbers so they change their Oh to

1895
01:39:07,550 --> 01:39:10,940
zero and then they add the symbol but

1896
01:39:09,500 --> 01:39:12,920
now they don't need to do it anymore so

1897
01:39:10,940 --> 01:39:14,540
deal with go back to password

1898
01:39:12,920 --> 01:39:17,300
this is chances that we want to be able

1899
01:39:14,540 --> 01:39:19,100
to follow Superman as I said was a very

1900
01:39:17,300 --> 01:39:21,560
popular password but due to recent

1901
01:39:19,100 --> 01:39:23,090
cultural changes we might presume that

1902
01:39:21,560 --> 01:39:25,490
what the woman is going to be much more

1903
01:39:23,090 --> 01:39:26,900
popular in the near future we also have

1904
01:39:25,490 --> 01:39:28,400
we have different populations in the

1905
01:39:26,900 --> 01:39:30,049
world there are people with different

1906
01:39:28,400 --> 01:39:32,059
ages between different languages and

1907
01:39:30,050 --> 01:39:34,550
they probably choose different

1908
01:39:32,060 --> 01:39:36,380
distribution of passwords and all more

1909
01:39:34,550 --> 01:39:39,200
other there might be some very good

1910
01:39:36,380 --> 01:39:40,970
stuff that just pops out into the world

1911
01:39:39,200 --> 01:39:44,840
and you want to able to find this kind

1912
01:39:40,970 --> 01:39:47,630
of thing and actually block them okay so

1913
01:39:44,840 --> 01:39:49,340
the first will feel what to do we don't

1914
01:39:47,630 --> 01:39:51,110
want to cause any harm to the world we

1915
01:39:49,340 --> 01:39:53,270
are good people we want to do and u s--

1916
01:39:51,110 --> 01:39:55,940
cryptography for the common good and

1917
01:39:53,270 --> 01:39:57,530
actually publishing those blessed list

1918
01:39:55,940 --> 01:39:59,690
of s what might really help attackers

1919
01:39:57,530 --> 01:40:01,400
they then okay now they know which

1920
01:39:59,690 --> 01:40:02,949
attack which press was a popular and

1921
01:40:01,400 --> 01:40:05,739
they're going to try them

1922
01:40:02,949 --> 01:40:07,389
so first thing we say this is the day

1923
01:40:05,739 --> 01:40:08,889
job it tickles already know what the

1924
01:40:07,390 --> 01:40:11,350
popular passwords are we want to help

1925
01:40:08,890 --> 01:40:13,690
the people that want to defend us and

1926
01:40:11,350 --> 01:40:15,219
more importantly we feel that publishing

1927
01:40:13,690 --> 01:40:17,199
a blacklist is pretty much like

1928
01:40:15,219 --> 01:40:18,850
publishing some code vulnerability we're

1929
01:40:17,199 --> 01:40:20,410
going to notify the public we're going

1930
01:40:18,850 --> 01:40:21,880
to say you need to stop using the

1931
01:40:20,410 --> 01:40:23,860
special that we need to update your

1932
01:40:21,880 --> 01:40:25,960
software and if the people aren't after

1933
01:40:23,860 --> 01:40:27,400
doing this then okay they might still be

1934
01:40:25,960 --> 01:40:29,170
vulnerable but we're going to help to

1935
01:40:27,400 --> 01:40:31,780
protect the entire ecosystem which is

1936
01:40:29,170 --> 01:40:33,489
important enough another point that we

1937
01:40:31,780 --> 01:40:35,170
need to realize is that leaking and

1938
01:40:33,489 --> 01:40:36,639
information about users password is

1939
01:40:35,170 --> 01:40:39,400
something that might help the users

1940
01:40:36,640 --> 01:40:41,949
their health their privacy and to gather

1941
01:40:39,400 --> 01:40:43,690
some statistic out for password we need

1942
01:40:41,949 --> 01:40:45,849
to learn something about individual

1943
01:40:43,690 --> 01:40:48,219
users best would be some kind of

1944
01:40:45,850 --> 01:40:50,110
information so the first we want to

1945
01:40:48,219 --> 01:40:52,239
claim is we're going to try to prove it

1946
01:40:50,110 --> 01:40:54,040
is that one bit of leakage on password

1947
01:40:52,239 --> 01:40:56,468
is not something that's really going to

1948
01:40:54,040 --> 01:40:58,630
help users too much and moreover we can

1949
01:40:56,469 --> 01:41:00,100
show how to use differential privacy to

1950
01:40:58,630 --> 01:41:01,929
also help and reduce the amount of

1951
01:41:00,100 --> 01:41:05,500
leakage a new semester to study that and

1952
01:41:01,929 --> 01:41:07,270
can really preserve the privacy so I

1953
01:41:05,500 --> 01:41:08,770
first want to define something called a

1954
01:41:07,270 --> 01:41:10,390
that's what again in the first program

1955
01:41:08,770 --> 01:41:12,460
we have an attacker that wants to attack

1956
01:41:10,390 --> 01:41:14,440
some device and the attacker is going to

1957
01:41:12,460 --> 01:41:16,929
publish a list of link L of the L

1958
01:41:14,440 --> 01:41:19,299
passwords and this is its guest for the

1959
01:41:16,929 --> 01:41:21,640
password and it's going to win if one of

1960
01:41:19,300 --> 01:41:25,870
the password if the password of D is one

1961
01:41:21,640 --> 01:41:27,699
of those in the list so we can easily

1962
01:41:25,870 --> 01:41:31,390
show that the effect of one bit leakage

1963
01:41:27,699 --> 01:41:33,759
is at at most the attacker needs to do

1964
01:41:31,390 --> 01:41:36,070
two times as much work or too much two

1965
01:41:33,760 --> 01:41:38,500
times as much password glasses so it

1966
01:41:36,070 --> 01:41:40,540
doesn't help the attacker very much we

1967
01:41:38,500 --> 01:41:42,880
also have a similar property for

1968
01:41:40,540 --> 01:41:44,679
differential privacy to show that if we

1969
01:41:42,880 --> 01:41:46,989
protect it with differential privacy the

1970
01:41:44,679 --> 01:41:49,530
leakage then the attacker can't improve

1971
01:41:46,989 --> 01:41:53,139
its probability of success very much

1972
01:41:49,530 --> 01:41:56,110
okay so what we actually want to after

1973
01:41:53,140 --> 01:41:57,969
that we certify that this is OK we want

1974
01:41:56,110 --> 01:42:00,009
to be able to identify and blacklist and

1975
01:41:57,969 --> 01:42:02,080
popular passwords what we call heavy

1976
01:42:00,010 --> 01:42:04,360
hitters and those are the password that

1977
01:42:02,080 --> 01:42:07,059
are chosen by some fraction tau of the

1978
01:42:04,360 --> 01:42:09,489
users or more and the server should not

1979
01:42:07,060 --> 01:42:12,340
learn more than one bit of information

1980
01:42:09,489 --> 01:42:13,809
on any of the users password and this is

1981
01:42:12,340 --> 01:42:15,620
most help spinor helps the nav

1982
01:42:13,810 --> 01:42:17,630
northwestward guesses

1983
01:42:15,620 --> 01:42:18,980
and one field that reported to us

1984
01:42:17,630 --> 01:42:20,990
weren't the probability of false

1985
01:42:18,980 --> 01:42:22,820
negatives to be negligible that means

1986
01:42:20,990 --> 01:42:24,349
we're not going to miss any of the

1987
01:42:22,820 --> 01:42:24,830
popular passwords we want to catch them

1988
01:42:24,350 --> 01:42:27,620
all

1989
01:42:24,830 --> 01:42:30,080
however we can afford to have a small

1990
01:42:27,620 --> 01:42:32,559
non-linear negligible probability of

1991
01:42:30,080 --> 01:42:35,269
false positive which means a legitimate

1992
01:42:32,560 --> 01:42:37,190
password that users want to choose might

1993
01:42:35,270 --> 01:42:38,900
be rejected with a low probability as

1994
01:42:37,190 --> 01:42:42,919
long as it doesn't happen too much we

1995
01:42:38,900 --> 01:42:44,750
don't want to annoy our users there is

1996
01:42:42,920 --> 01:42:46,460
quite a lot of previous work in this

1997
01:42:44,750 --> 01:42:47,990
field of finding heavy hitters with

1998
01:42:46,460 --> 01:42:52,280
differential privacy and also trying to

1999
01:42:47,990 --> 01:42:53,840
find popular passwords and we think that

2000
01:42:52,280 --> 01:42:56,030
our work is a little bit different and

2001
01:42:53,840 --> 01:42:57,920
the main thing is that we are very very

2002
01:42:56,030 --> 01:43:00,139
pessimistic people we feel that the

2003
01:42:57,920 --> 01:43:02,330
world is a malicious world in this world

2004
01:43:00,140 --> 01:43:05,030
both the users and the server might be

2005
01:43:02,330 --> 01:43:07,370
malicious and most of the other worlds

2006
01:43:05,030 --> 01:43:09,170
are in the semi honest model and a

2007
01:43:07,370 --> 01:43:11,300
malicious server is a relatively simple

2008
01:43:09,170 --> 01:43:13,670
creature all it wants to do is to learn

2009
01:43:11,300 --> 01:43:16,010
as much as possible about about it the

2010
01:43:13,670 --> 01:43:17,750
users password however the malicious

2011
01:43:16,010 --> 01:43:20,120
user is suffered a little bit more

2012
01:43:17,750 --> 01:43:22,640
complex and the malicious user basically

2013
01:43:20,120 --> 01:43:25,130
will want to hide the popular passwords

2014
01:43:22,640 --> 01:43:27,020
that attorney if an adversary already

2015
01:43:25,130 --> 01:43:29,720
already controls a large coalition of

2016
01:43:27,020 --> 01:43:31,820
the user you want to hide this attorney

2017
01:43:29,720 --> 01:43:34,220
of popular passwords so the server want

2018
01:43:31,820 --> 01:43:36,790
to blacklisted and as much users as

2019
01:43:34,220 --> 01:43:39,440
possible we're going to choose them and

2020
01:43:36,790 --> 01:43:41,690
ok so what we'll have you is basically

2021
01:43:39,440 --> 01:43:43,940
what you call em PC meets differential

2022
01:43:41,690 --> 01:43:46,400
privacy in malicious world and then we

2023
01:43:43,940 --> 01:43:48,500
have an asymmetrical requirement for the

2024
01:43:46,400 --> 01:43:50,660
security of the protocol and it's

2025
01:43:48,500 --> 01:43:52,640
basically very relatively easy to

2026
01:43:50,660 --> 01:43:54,349
protect the users privacy from the

2027
01:43:52,640 --> 01:43:56,210
server although it's much harder to

2028
01:43:54,350 --> 01:43:58,130
protect against colluding malicious

2029
01:43:56,210 --> 01:44:02,450
users I'm going to try to give a simple

2030
01:43:58,130 --> 01:44:04,580
an example let's say I want to learn

2031
01:44:02,450 --> 01:44:06,559
what is the approval rating for Trump in

2032
01:44:04,580 --> 01:44:09,320
this room so I'm going to ask you all of

2033
01:44:06,560 --> 01:44:11,240
you to vote if your supporter but I want

2034
01:44:09,320 --> 01:44:14,179
to protect your privacy so I will tell

2035
01:44:11,240 --> 01:44:16,340
you that with probability one one-celled

2036
01:44:14,180 --> 01:44:19,220
you're going to flip your vote this is

2037
01:44:16,340 --> 01:44:21,560
proven to provide the differential

2038
01:44:19,220 --> 01:44:23,150
privacy and never finished good over

2039
01:44:21,560 --> 01:44:25,760
let's say the Trump supporters want to

2040
01:44:23,150 --> 01:44:27,589
increase is a popular wedding they will

2041
01:44:25,760 --> 01:44:29,420
try to cheat and they will not flip

2042
01:44:27,590 --> 01:44:32,150
their voice at the vote they all

2043
01:44:29,420 --> 01:44:34,190
they will always vote photon this will

2044
01:44:32,150 --> 01:44:37,429
causes approval approval rating to be

2045
01:44:34,190 --> 01:44:40,160
much higher than it's actually easy so

2046
01:44:37,429 --> 01:44:43,400
we need to have some kind of two-party

2047
01:44:40,160 --> 01:44:45,800
computation in order to protect the the

2048
01:44:43,400 --> 01:44:48,110
correctness of the results and well

2049
01:44:45,800 --> 01:44:52,070
someone that is tella to the requirement

2050
01:44:48,110 --> 01:44:53,480
that we have so if one to try to at

2051
01:44:52,070 --> 01:44:56,030
least semi formally define the

2052
01:44:53,480 --> 01:44:59,269
correctness is that we want to be able

2053
01:44:56,030 --> 01:45:01,130
to detect as a heavy hitter any password

2054
01:44:59,270 --> 01:45:03,469
that is used by more than one plus Delta

2055
01:45:01,130 --> 01:45:05,060
Tau a fraction of the users and this is

2056
01:45:03,469 --> 01:45:07,760
even in the presence of this malicious

2057
01:45:05,060 --> 01:45:10,460
user coalition and we wanted them to not

2058
01:45:07,760 --> 01:45:12,440
identify a password that are not popular

2059
01:45:10,460 --> 01:45:14,980
which is there are less than 1 minus

2060
01:45:12,440 --> 01:45:19,099
Delta Tau faction of users with a

2061
01:45:14,980 --> 01:45:21,919
relatively high probability so we have

2062
01:45:19,100 --> 01:45:25,040
this example of a blacklist actually we

2063
01:45:21,920 --> 01:45:27,110
have that the upper red line is 1 1 plus

2064
01:45:25,040 --> 01:45:28,699
Delta Tau want to be able to identify

2065
01:45:27,110 --> 01:45:30,679
all of the passwords that are more

2066
01:45:28,699 --> 01:45:32,780
popular than that we want to not and

2067
01:45:30,679 --> 01:45:35,120
then identify any password that is under

2068
01:45:32,780 --> 01:45:37,429
the Green Line and anything in the

2069
01:45:35,120 --> 01:45:38,679
middle we don't care we we can go either

2070
01:45:37,429 --> 01:45:42,199
way

2071
01:45:38,679 --> 01:45:44,420
ok so ever semi honest solution for this

2072
01:45:42,199 --> 01:45:47,660
problem it's very similar to the one by

2073
01:45:44,420 --> 01:45:49,130
basilia tunnel and in this we do a kind

2074
01:45:47,660 --> 01:45:53,599
of domain reduction we hash the password

2075
01:45:49,130 --> 01:45:56,390
into al bit hash values L might be 16 or

2076
01:45:53,600 --> 01:45:59,060
32 and we're going to actually ban all

2077
01:45:56,390 --> 01:46:01,550
of the password that will hash into this

2078
01:45:59,060 --> 01:46:04,160
hash values into popular hash values and

2079
01:46:01,550 --> 01:46:07,280
again we ever might have small

2080
01:46:04,160 --> 01:46:09,290
probability for collision we're not

2081
01:46:07,280 --> 01:46:11,059
popular password will Talia collide with

2082
01:46:09,290 --> 01:46:12,500
the hash of a popular password but this

2083
01:46:11,060 --> 01:46:16,160
is ok as long as it happens with low

2084
01:46:12,500 --> 01:46:19,429
probability so we the server is going to

2085
01:46:16,160 --> 01:46:21,679
save a counter is to 1 which says flew

2086
01:46:19,429 --> 01:46:23,870
to the hell 2 to 2 to the L and it's

2087
01:46:21,679 --> 01:46:25,880
going to initialize it with zero and the

2088
01:46:23,870 --> 01:46:28,640
protocol is very simple it looks like

2089
01:46:25,880 --> 01:46:31,190
this the server will choose a random bit

2090
01:46:28,640 --> 01:46:33,320
value for each user it will send to the

2091
01:46:31,190 --> 01:46:35,449
user user will hash its password and

2092
01:46:33,320 --> 01:46:38,719
calculate the inner product of the

2093
01:46:35,449 --> 01:46:41,299
password which is a Ella bit value and

2094
01:46:38,719 --> 01:46:43,099
will send the one bit result to the

2095
01:46:41,300 --> 01:46:44,420
server the server is going to

2096
01:46:43,099 --> 01:46:46,670
direct all over all of the possible

2097
01:46:44,420 --> 01:46:50,030
values it's not so much so it can be

2098
01:46:46,670 --> 01:46:53,510
relatively fast and if the inner product

2099
01:46:50,030 --> 01:46:55,429
of the of any hash value is correlated

2100
01:46:53,510 --> 01:46:56,599
to the one that was sent by the user it

2101
01:46:55,429 --> 01:46:58,369
will increase the counter by one

2102
01:46:56,599 --> 01:47:00,889
otherwise it will decrease the counter

2103
01:46:58,369 --> 01:47:02,570
by one which basically means that for

2104
01:47:00,889 --> 01:47:04,579
the specific hash the two and the user

2105
01:47:02,570 --> 01:47:06,889
chose their cutter will always be

2106
01:47:04,579 --> 01:47:08,750
increased by one for any other hash

2107
01:47:06,889 --> 01:47:11,989
value the country was going to in

2108
01:47:08,750 --> 01:47:13,880
expected remain this thing so we'll have

2109
01:47:11,989 --> 01:47:17,269
an example here this is a toy example

2110
01:47:13,880 --> 01:47:18,829
with l equals to c and let's assume that

2111
01:47:17,270 --> 01:47:21,920
everybody wants to choose the hash value

2112
01:47:18,829 --> 01:47:24,199
v so they start to run the protocol with

2113
01:47:21,920 --> 01:47:26,329
the first user the second user each time

2114
01:47:24,199 --> 01:47:28,339
the value and the value of v is

2115
01:47:26,329 --> 01:47:30,730
decreased by one and other values that

2116
01:47:28,340 --> 01:47:33,320
are doing this kind of random walk so

2117
01:47:30,730 --> 01:47:35,119
after the ten users you can see that the

2118
01:47:33,320 --> 01:47:37,570
value five is very high the rest of them

2119
01:47:35,119 --> 01:47:41,449
are much low and we can identify this

2120
01:47:37,570 --> 01:47:43,849
this high this value and we can actually

2121
01:47:41,449 --> 01:47:46,219
show that expected value of which kind

2122
01:47:43,849 --> 01:47:48,110
of is what we want to to learn we

2123
01:47:46,219 --> 01:47:51,860
blacklist any value that is larger than

2124
01:47:48,110 --> 01:47:54,170
tau where tau n n is the number of users

2125
01:47:51,860 --> 01:47:56,780
and we're going to dynamically choose

2126
01:47:54,170 --> 01:47:59,150
tau to be a large enough so that this

2127
01:47:56,780 --> 01:48:00,949
random noise that that will get from the

2128
01:47:59,150 --> 01:48:03,040
random walk will not break the

2129
01:48:00,949 --> 01:48:06,019
correctness requirements that we have

2130
01:48:03,040 --> 01:48:08,570
okay so this sounds perfectly insulated

2131
01:48:06,020 --> 01:48:10,520
be simple but and we have a problem

2132
01:48:08,570 --> 01:48:11,989
because we live in a malicious world and

2133
01:48:10,520 --> 01:48:14,300
we're what you call the undercount

2134
01:48:11,989 --> 01:48:16,909
attack this attack and the TECA wants to

2135
01:48:14,300 --> 01:48:19,159
hide this popular password and the

2136
01:48:16,909 --> 01:48:21,348
popular hash value and that is very

2137
01:48:19,159 --> 01:48:23,449
simple you will just follow the protocol

2138
01:48:21,349 --> 01:48:25,730
by choosing this password and we'll flip

2139
01:48:23,449 --> 01:48:27,769
the bit of the result and we can see

2140
01:48:25,730 --> 01:48:30,259
what what is the effect let's say we

2141
01:48:27,770 --> 01:48:32,030
have the current situation there are ten

2142
01:48:30,260 --> 01:48:34,429
users that's already voted for five and

2143
01:48:32,030 --> 01:48:38,110
now the use of time to under count no

2144
01:48:34,429 --> 01:48:42,530
simply and remove the value until we can

2145
01:48:38,110 --> 01:48:45,019
get 0 in in 5 and we the password is and

2146
01:48:42,530 --> 01:48:49,159
not identified which is bad

2147
01:48:45,020 --> 01:48:51,020
okay so now we want something that's in

2148
01:48:49,159 --> 01:48:53,058
a multi-party computation we have their

2149
01:48:51,020 --> 01:48:55,369
trusted third party this is the ideal

2150
01:48:53,059 --> 01:48:56,600
world in this ideal world where the user

2151
01:48:55,369 --> 01:48:58,730
would send the

2152
01:48:56,600 --> 01:49:00,560
of the password to this custody cell

2153
01:48:58,730 --> 01:49:04,580
party the server will change they will

2154
01:49:00,560 --> 01:49:06,140
send out random bit string and the

2155
01:49:04,580 --> 01:49:07,760
custard cell party will do the dinner

2156
01:49:06,140 --> 01:49:09,980
for the calculation and send the result

2157
01:49:07,760 --> 01:49:12,500
to the server the usual it doesn't know

2158
01:49:09,980 --> 01:49:14,299
how it doesn't know there is the result

2159
01:49:12,500 --> 01:49:16,460
of the inner product so it can't cheat

2160
01:49:14,300 --> 01:49:20,330
and their server doesn't learn anything

2161
01:49:16,460 --> 01:49:21,980
about the password okay so we have

2162
01:49:20,330 --> 01:49:24,500
actually have two approaches of how to

2163
01:49:21,980 --> 01:49:25,820
implement it one is based on QF product

2164
01:49:24,500 --> 01:49:27,560
you can see the city assumption and the

2165
01:49:25,820 --> 01:49:31,130
other is on the job itself head based

2166
01:49:27,560 --> 01:49:33,560
and we try to show their names QR best

2167
01:49:31,130 --> 01:49:35,660
solution and then it's based on the

2168
01:49:33,560 --> 01:49:38,090
ability of quadratic residue city

2169
01:49:35,660 --> 01:49:41,389
assumption and what we're going to do is

2170
01:49:38,090 --> 01:49:44,570
we're going to encrypt this a little bit

2171
01:49:41,390 --> 01:49:46,730
le bits in galveston Akali public

2172
01:49:44,570 --> 01:49:49,549
encryption and what we're going to do is

2173
01:49:46,730 --> 01:49:52,070
in v zero as a quadratic residue number

2174
01:49:49,550 --> 01:49:55,580
and one is none product occurs in number

2175
01:49:52,070 --> 01:49:58,099
and the stuff is going to generate our

2176
01:49:55,580 --> 01:50:00,350
say model for each user when it creates

2177
01:49:58,100 --> 01:50:02,450
bits and what the user is doing this

2178
01:50:00,350 --> 01:50:04,820
well it is simple it will just multiply

2179
01:50:02,450 --> 01:50:07,880
all of the encrypted values that

2180
01:50:04,820 --> 01:50:10,160
correspond to one values in there in the

2181
01:50:07,880 --> 01:50:13,700
hash and we'll blend this with some

2182
01:50:10,160 --> 01:50:15,440
random random number send it to the to

2183
01:50:13,700 --> 01:50:17,300
the server the details doesn't really

2184
01:50:15,440 --> 01:50:20,179
matter but the main point here is that

2185
01:50:17,300 --> 01:50:23,000
the user can't learn anything about the

2186
01:50:20,180 --> 01:50:25,430
our value so does it mean it can cheat

2187
01:50:23,000 --> 01:50:28,880
and unfortunately for us the answer is

2188
01:50:25,430 --> 01:50:31,160
no it can cheat and if it is able to

2189
01:50:28,880 --> 01:50:33,680
create a number which in those with high

2190
01:50:31,160 --> 01:50:37,880
probability is not a quadratic residue

2191
01:50:33,680 --> 01:50:40,100
number and so we have the NQ our

2192
01:50:37,880 --> 01:50:42,290
generation assumption we ask is it hard

2193
01:50:40,100 --> 01:50:44,360
to find such numbers and we'll go to the

2194
01:50:42,290 --> 01:50:46,400
Scriptures for the original goal the

2195
01:50:44,360 --> 01:50:48,889
same Akali a paper and they actually say

2196
01:50:46,400 --> 01:50:52,219
there they don't know and unfortunate

2197
01:50:48,890 --> 01:50:53,810
forced it is an answer of the problem we

2198
01:50:52,220 --> 01:50:56,090
have a simple reduction for the security

2199
01:50:53,810 --> 01:50:57,560
of the protocol but we were not bold

2200
01:50:56,090 --> 01:51:00,530
enough to use this kind of assumption

2201
01:50:57,560 --> 01:51:03,590
it's not proven so what we actually do

2202
01:51:00,530 --> 01:51:05,690
is we're going to use interactive zero

2203
01:51:03,590 --> 01:51:07,370
knowledge proof that a user can prove to

2204
01:51:05,690 --> 01:51:09,230
the server that they actually did the

2205
01:51:07,370 --> 01:51:10,340
dinner porter calculation is it was

2206
01:51:09,230 --> 01:51:13,070
intended

2207
01:51:10,340 --> 01:51:15,350
to be done we also have a non

2208
01:51:13,070 --> 01:51:17,840
interactive version based on the Fiat a

2209
01:51:15,350 --> 01:51:20,500
shamanistic which is something that very

2210
01:51:17,840 --> 01:51:23,030
nice because it simplifies the protocol

2211
01:51:20,500 --> 01:51:25,450
make it very easy to change your

2212
01:51:23,030 --> 01:51:27,920
password it's also required the proof

2213
01:51:25,450 --> 01:51:30,410
some other proofs that the details don't

2214
01:51:27,920 --> 01:51:32,930
really matter here and again we have the

2215
01:51:30,410 --> 01:51:35,690
solution based on garbage circuit and

2216
01:51:32,930 --> 01:51:38,690
what is basically maybe more important

2217
01:51:35,690 --> 01:51:42,160
is what is the bound on towel that we

2218
01:51:38,690 --> 01:51:44,419
can identify which means what is the

2219
01:51:42,160 --> 01:51:46,340
least popular password that you can

2220
01:51:44,420 --> 01:51:48,680
identify in a blacklist and this is a

2221
01:51:46,340 --> 01:51:50,300
function of the number of users if the

2222
01:51:48,680 --> 01:51:53,150
more users then we can find the password

2223
01:51:50,300 --> 01:51:56,540
that are less and less popular and what

2224
01:51:53,150 --> 01:51:58,849
we did was to check against the known

2225
01:51:56,540 --> 01:52:00,860
data breeches and we can actually say

2226
01:51:58,850 --> 01:52:03,650
that we can blacklist the top sleep

2227
01:52:00,860 --> 01:52:06,349
password that will lift in the Yannick

2228
01:52:03,650 --> 01:52:08,269
and the five top password from the hulex

2229
01:52:06,350 --> 01:52:11,390
so we feel that this can be actually

2230
01:52:08,270 --> 01:52:12,710
used in practice and to make sure that

2231
01:52:11,390 --> 01:52:14,810
this can actually be used in practice

2232
01:52:12,710 --> 01:52:17,390
and we are talking about them maybe IOT

2233
01:52:14,810 --> 01:52:20,150
devices which are very low resource well

2234
01:52:17,390 --> 01:52:22,610
we implemented the full malicious QR

2235
01:52:20,150 --> 01:52:27,290
protocol on a Raspberry Pi which is a

2236
01:52:22,610 --> 01:52:30,530
relatively low resource Louis also a

2237
01:52:27,290 --> 01:52:32,750
device and in it this very inefficient

2238
01:52:30,530 --> 01:52:34,519
implementation it takes about 50 seconds

2239
01:52:32,750 --> 01:52:36,740
to do the entire non interactive

2240
01:52:34,520 --> 01:52:38,570
calculation remember again this is only

2241
01:52:36,740 --> 01:52:41,780
done when the user changes this password

2242
01:52:38,570 --> 01:52:43,880
and it can be run in the background so I

2243
01:52:41,780 --> 01:52:46,099
think it's actually possible for a

2244
01:52:43,880 --> 01:52:48,230
server and by saying a server I mean

2245
01:52:46,100 --> 01:52:52,970
this laptop it takes about half a second

2246
01:52:48,230 --> 01:52:55,099
to verify the entire process and we also

2247
01:52:52,970 --> 01:52:56,930
feel that this simple solution can be

2248
01:52:55,100 --> 01:52:58,760
used in other places where we want to

2249
01:52:56,930 --> 01:53:01,100
gather statistics in what we think is a

2250
01:52:58,760 --> 01:53:05,120
malicious environment for example let's

2251
01:53:01,100 --> 01:53:07,310
say that some government wants to cause

2252
01:53:05,120 --> 01:53:09,530
people to stop using the Tor network of

2253
01:53:07,310 --> 01:53:12,650
stop helping it so they want to prove

2254
01:53:09,530 --> 01:53:15,200
that tor network is only used for for

2255
01:53:12,650 --> 01:53:18,139
drug trafficking so it's going to try to

2256
01:53:15,200 --> 01:53:20,660
influence the statistics of what IP

2257
01:53:18,140 --> 01:53:22,910
addresses the Tor network access to show

2258
01:53:20,660 --> 01:53:23,659
this kind of a result so what to maybe

2259
01:53:22,910 --> 01:53:25,760
try to put

2260
01:53:23,659 --> 01:53:27,860
this kind of statistics and we can also

2261
01:53:25,760 --> 01:53:30,619
use it in maybe trying to find out what

2262
01:53:27,860 --> 01:53:33,228
out a popular device spin of patterns

2263
01:53:30,619 --> 01:53:36,228
for smartphones and help a large service

2264
01:53:33,229 --> 01:53:38,749
provider to be able to learn the peso

2265
01:53:36,229 --> 01:53:43,130
distribution over their entire user base

2266
01:53:38,749 --> 01:53:46,699
all over the distinct populations okay

2267
01:53:43,130 --> 01:53:48,139
and we have some what we think at least

2268
01:53:46,699 --> 01:53:51,138
there are very interesting open

2269
01:53:48,139 --> 01:53:53,449
questions from the cryptographic side we

2270
01:53:51,139 --> 01:53:56,209
first we want to know is do we need

2271
01:53:53,449 --> 01:53:58,428
crypto we actually we know that for the

2272
01:53:56,209 --> 01:54:01,959
semi honest solution we don't need any

2273
01:53:58,429 --> 01:54:05,479
kind of crypto to to the dissolution but

2274
01:54:01,959 --> 01:54:08,090
in the malicious world we use quite

2275
01:54:05,479 --> 01:54:10,550
heavy crypto machinery without know if

2276
01:54:08,090 --> 01:54:13,639
we can't prove so far that it's needed

2277
01:54:10,550 --> 01:54:16,369
although we think it is we will have to

2278
01:54:13,639 --> 01:54:18,019
see some more research on the NQ our

2279
01:54:16,369 --> 01:54:19,610
assumption that we described here

2280
01:54:18,019 --> 01:54:24,070
because it will help to simplify a

2281
01:54:19,610 --> 01:54:27,380
protocol and in the more real-world

2282
01:54:24,070 --> 01:54:29,449
stuff then a very important question is

2283
01:54:27,380 --> 01:54:32,300
can we prove the bounds that we have on

2284
01:54:29,449 --> 01:54:35,739
Tao we want to be able to identify pest

2285
01:54:32,300 --> 01:54:38,829
was the term used by as little little

2286
01:54:35,739 --> 01:54:42,138
part of the population is possible and

2287
01:54:38,829 --> 01:54:44,239
blacklist it and and the main reason

2288
01:54:42,139 --> 01:54:45,709
that was important for for me to talk

2289
01:54:44,239 --> 01:54:47,780
here today we want to try to have

2290
01:54:45,709 --> 01:54:50,119
real-world implementations of this

2291
01:54:47,780 --> 01:54:53,630
protocol on real passwords and try to

2292
01:54:50,119 --> 01:54:57,499
see if we can get there any nice resort

2293
01:54:53,630 --> 01:54:59,959
sort of it that's it more question of

2294
01:54:57,499 --> 01:55:01,519
baby to and certain the more information

2295
01:54:59,959 --> 01:55:04,059
can be done from the scene on the full

2296
01:55:01,519 --> 01:55:04,059
paper or

2297
01:55:04,370 --> 01:55:07,580
[Applause]

2298
01:55:10,300 --> 01:55:17,690
we have time for one quick questions or

2299
01:55:13,820 --> 01:55:20,239
we can cut to break the aforementioned

2300
01:55:17,690 --> 01:55:22,219
elusive break all right why don't we

2301
01:55:20,239 --> 01:55:29,120
just do that so let's thank the speaker

2302
01:55:22,219 --> 01:55:31,820
again thank you very much and we'll be

2303
01:55:29,120 --> 01:55:33,969
back ten minutes after the a on top of

2304
01:55:31,820 --> 01:55:33,969
the hour

2305
01:56:26,140 --> 01:56:38,050
so we first of these are like

2306
01:56:41,270 --> 01:56:44,750
our fault not theirs

2307
01:57:44,430 --> 01:57:47,629
[Music]

2308
01:59:20,180 --> 01:59:23,270
[Music]

2309
01:59:34,300 --> 01:59:37,599
thank you

2310
01:59:37,610 --> 01:59:47,478
Wow it is okay what do you make of it so

2311
01:59:40,280 --> 01:59:55,369
far especially the politics session that

2312
01:59:47,479 --> 01:59:56,959
was good was a big fan it works both

2313
01:59:55,369 --> 01:59:59,558
talks in that session are great

2314
01:59:56,959 --> 02:00:03,340
yes I enjoyed that tremendously and

2315
01:59:59,559 --> 02:00:03,340
let's just make sure

2316
02:00:11,860 --> 02:00:15,000
[Music]

2317
02:00:17,429 --> 02:00:22,290
okay that looks good yeah oh yeah now

2318
02:00:21,120 --> 02:00:26,480
you've got your next slide being

2319
02:00:22,290 --> 02:00:26,480
anything I like that yes

2320
02:24:42,020 --> 02:24:45,979
you need to mic up I guess

2321
02:25:02,290 --> 02:25:06,580
if we have a navy person or not

2322
02:25:25,039 --> 02:25:28,270
I need to run somebody down

2323
02:26:08,770 --> 02:26:14,561
hello

2324
02:26:11,690 --> 02:26:14,561
and people here

2325
02:26:30,420 --> 02:26:33,080
hello

2326
02:26:33,650 --> 02:26:38,119
hello welcome back hopefully you're all

2327
02:26:36,410 --> 02:26:40,250
sufficiently caffeinated for the last

2328
02:26:38,120 --> 02:26:43,750
session of the day dan just let me know

2329
02:26:40,250 --> 02:26:46,880
that to garage tickets have been found

2330
02:26:43,750 --> 02:26:48,080
if you know what a garage ticket is now

2331
02:26:46,880 --> 02:26:49,820
I'm going to check your pocket to see if

2332
02:26:48,080 --> 02:26:50,900
you've lost yours to garage tickets have

2333
02:26:49,820 --> 02:26:53,990
been found and they are at the

2334
02:26:50,900 --> 02:26:56,150
registration desk if you're missing your

2335
02:26:53,990 --> 02:26:59,240
garage ticket we've seen some excellent

2336
02:26:56,150 --> 02:27:01,580
talks today and I have no doubt that our

2337
02:26:59,240 --> 02:27:04,610
last three speakers will continue that

2338
02:27:01,580 --> 02:27:07,490
trend no no pressure and the first

2339
02:27:04,610 --> 02:27:09,320
speaker of the last session today is

2340
02:27:07,490 --> 02:27:13,449
Josh Baron from DARPA

2341
02:27:09,320 --> 02:27:13,449
Josh all right hi everyone

2342
02:27:15,340 --> 02:27:20,300
why not

2343
02:27:17,710 --> 02:27:21,439
hi I'm Josh I'm a program manager at

2344
02:27:20,300 --> 02:27:23,090
DARPA have been there for about a year

2345
02:27:21,440 --> 02:27:23,540
and a half and today I want to talk to

2346
02:27:23,090 --> 02:27:25,970
you about

2347
02:27:23,540 --> 02:27:28,730
Dara's investments in real cryptography

2348
02:27:25,970 --> 02:27:31,670
I don't know this is creative as I could

2349
02:27:28,730 --> 02:27:33,170
really get with this title so let's talk

2350
02:27:31,670 --> 02:27:36,170
about the research that DARPA has been

2351
02:27:33,170 --> 02:27:38,120
doing in crypto so it you know in the

2352
02:27:36,170 --> 02:27:39,470
beginning there was pro Cee'd which was

2353
02:27:38,120 --> 02:27:41,601
really about computation on encrypt

2354
02:27:39,470 --> 02:27:43,400
information largely focusing on a fully

2355
02:27:41,601 --> 02:27:46,880
homomorphic encryption also looking at

2356
02:27:43,400 --> 02:27:48,859
MPC secure multi-party computation then

2357
02:27:46,880 --> 02:27:51,080
there was a safer which was looking

2358
02:27:48,860 --> 02:27:53,690
mainly at kind of resilient comps on the

2359
02:27:51,080 --> 02:27:55,760
internet some of the pluggable transport

2360
02:27:53,690 --> 02:27:57,771
work came out of that for tour again

2361
02:27:55,760 --> 02:27:59,510
pluggable transports decoy routing and

2362
02:27:57,771 --> 02:28:01,521
then actually even low party NPC there

2363
02:27:59,510 --> 02:28:03,290
was some work done there then there was

2364
02:28:01,521 --> 02:28:05,780
Brandeis which was looking at building

2365
02:28:03,290 --> 02:28:07,521
privacy where systems the focus there is

2366
02:28:05,780 --> 02:28:09,140
a little different so not just NPC but

2367
02:28:07,521 --> 02:28:13,130
also differential privacy and human

2368
02:28:09,140 --> 02:28:14,020
factors there's also safe we're looking

2369
02:28:13,130 --> 02:28:16,699
to do something called

2370
02:28:14,021 --> 02:28:19,370
indistinguishability obfuscation which

2371
02:28:16,700 --> 02:28:22,940
is a anyhow I'll leave it there and then

2372
02:28:19,370 --> 02:28:24,680
race which is doing secure distributed

2373
02:28:22,940 --> 02:28:27,860
messaging in contested network

2374
02:28:24,680 --> 02:28:29,510
environments largely focusing on NPC and

2375
02:28:27,860 --> 02:28:31,311
communicate and obfuscated

2376
02:28:29,510 --> 02:28:32,360
communications and then the question is

2377
02:28:31,311 --> 02:28:35,029
kind of where are we going

2378
02:28:32,360 --> 02:28:36,050
so today I'm going to talk about frankly

2379
02:28:35,030 --> 02:28:37,940
I'm gonna talk about those things for

2380
02:28:36,050 --> 02:28:39,710
which I am responsible for so I am the

2381
02:28:37,940 --> 02:28:41,780
program manager for Brandeis I'm the

2382
02:28:39,710 --> 02:28:43,009
program manager for race just in case

2383
02:28:41,780 --> 02:28:44,510
you're kind of unaware of those terms

2384
02:28:43,010 --> 02:28:46,490
that that means is I do nothing I just

2385
02:28:44,510 --> 02:28:47,240
pay people to do things so all the

2386
02:28:46,490 --> 02:28:48,699
really cool things are

2387
02:28:47,240 --> 02:28:50,480
done by you know the folks in this room

2388
02:28:48,700 --> 02:28:52,070
yeah okay

2389
02:28:50,480 --> 02:28:55,010
so let's talk a little bit about

2390
02:28:52,070 --> 02:28:56,931
Brandeis the idea for Brandeis is you

2391
02:28:55,010 --> 02:28:58,190
know typically speaking if you really

2392
02:28:56,931 --> 02:28:59,330
want to secure your data you encrypt it

2393
02:28:58,190 --> 02:29:02,000
but then when you encrypt it you can't

2394
02:28:59,330 --> 02:29:03,440
really do anything with it but then when

2395
02:29:02,000 --> 02:29:04,610
you decrypt it to do things with it then

2396
02:29:03,440 --> 02:29:06,471
of course it's vulnerable so like how

2397
02:29:04,610 --> 02:29:08,030
can you have your cake you needed to and

2398
02:29:06,471 --> 02:29:09,590
because this is a really real privacy I

2399
02:29:08,030 --> 02:29:11,780
should also mention that part of the

2400
02:29:09,590 --> 02:29:13,730
focus also is having the level it's not

2401
02:29:11,780 --> 02:29:16,130
just a confidentiality program how can I

2402
02:29:13,730 --> 02:29:17,779
have the security that I want no more no

2403
02:29:16,130 --> 02:29:19,550
less right so if I want to play Angry

2404
02:29:17,780 --> 02:29:20,721
Birds I know that it's going to sell my

2405
02:29:19,550 --> 02:29:22,939
location to people but that's what I

2406
02:29:20,721 --> 02:29:25,550
want to do okay fine you get to do that

2407
02:29:22,940 --> 02:29:27,500
you know okay so the way that we're

2408
02:29:25,550 --> 02:29:29,600
structured you know think of it as you

2409
02:29:27,500 --> 02:29:31,010
know we have a data owner we're focusing

2410
02:29:29,601 --> 02:29:32,570
a lot on kind of this human data

2411
02:29:31,010 --> 02:29:34,851
interaction how do i best communicate

2412
02:29:32,570 --> 02:29:36,681
about you know what I want so my

2413
02:29:34,851 --> 02:29:38,630
favorite example on this is that a lot

2414
02:29:36,681 --> 02:29:40,851
of friends who wouldn't download signal

2415
02:29:38,630 --> 02:29:42,471
on Android because it said that it

2416
02:29:40,851 --> 02:29:43,700
wanted especially initially because it

2417
02:29:42,471 --> 02:29:45,410
said that it wanted all your contacts

2418
02:29:43,700 --> 02:29:46,641
and they're like well these are privacy

2419
02:29:45,410 --> 02:29:47,780
you know we're people and like I don't

2420
02:29:46,641 --> 02:29:49,940
want to give you my contacts and of

2421
02:29:47,780 --> 02:29:51,710
course the reason that signal wants that

2422
02:29:49,940 --> 02:29:53,030
is so that it can easily say who of your

2423
02:29:51,710 --> 02:29:54,589
friends are using signal who your

2424
02:29:53,030 --> 02:29:56,420
contacts are but that communication was

2425
02:29:54,590 --> 02:29:58,101
was left out so wouldn't it be better if

2426
02:29:56,420 --> 02:29:59,660
when you're popped up with a do you want

2427
02:29:58,101 --> 02:30:01,340
to give an application approval you know

2428
02:29:59,660 --> 02:30:03,830
this is that privilege and actually told

2429
02:30:01,340 --> 02:30:04,940
you in an efficient manner you know in a

2430
02:30:03,830 --> 02:30:06,980
decision that you can make in like three

2431
02:30:04,940 --> 02:30:08,360
seconds or one second you know why it

2432
02:30:06,980 --> 02:30:09,260
wanted what it wanted so that's actually

2433
02:30:08,360 --> 02:30:10,851
some of the work we're funding under

2434
02:30:09,260 --> 02:30:11,931
Brandeis I'm actually not gonna be

2435
02:30:10,851 --> 02:30:14,030
talking about any of that today because

2436
02:30:11,931 --> 02:30:15,471
we're about crypto and so actually

2437
02:30:14,030 --> 02:30:18,010
Michelle whose fantastic will be

2438
02:30:15,471 --> 02:30:21,050
speaking was lovely about that but fine

2439
02:30:18,010 --> 02:30:22,311
we're also kind of we're on the flip

2440
02:30:21,050 --> 02:30:23,869
we're doing a lot of privacy preserving

2441
02:30:22,311 --> 02:30:25,971
technologies you kind of see in those

2442
02:30:23,870 --> 02:30:28,431
orange squares that's largely secure

2443
02:30:25,971 --> 02:30:29,930
multi-party computation and differential

2444
02:30:28,431 --> 02:30:32,150
privacy and then we're kind of wrapping

2445
02:30:29,931 --> 02:30:33,500
that all into these t3 integrators so

2446
02:30:32,150 --> 02:30:35,240
roughly speaking what we're doing is

2447
02:30:33,500 --> 02:30:38,450
we're taking three application areas

2448
02:30:35,240 --> 02:30:41,690
namely smart buildings coalition

2449
02:30:38,450 --> 02:30:44,811
information sharing and mobile phone

2450
02:30:41,690 --> 02:30:46,580
application stuff and so we're

2451
02:30:44,811 --> 02:30:48,260
specifically trying to push these kind

2452
02:30:46,580 --> 02:30:49,431
of prototype privacy aware systems in

2453
02:30:48,260 --> 02:30:51,561
those areas and we'll talk more about

2454
02:30:49,431 --> 02:30:53,601
that and finally and frankly the hardest

2455
02:30:51,561 --> 02:30:55,400
we're trying to measure privacy and

2456
02:30:53,601 --> 02:30:57,260
that's actually super hard mainly

2457
02:30:55,400 --> 02:30:59,029
because it's not entirely clear what we

2458
02:30:57,260 --> 02:31:00,061
mean by privacy so that's kind of hard

2459
02:30:59,030 --> 02:31:04,650
to measure that

2460
02:31:00,061 --> 02:31:07,561
among other things alrighty so here's

2461
02:31:04,650 --> 02:31:10,141
one thing that we're doing and again

2462
02:31:07,561 --> 02:31:11,460
it's not this isn't crypto but I just

2463
02:31:10,141 --> 02:31:12,690
think it's super cool so one of the

2464
02:31:11,460 --> 02:31:14,699
things that we're actually doing is

2465
02:31:12,690 --> 02:31:16,351
we're developing a set of extensions and

2466
02:31:14,700 --> 02:31:19,080
additional interfaces that are built on

2467
02:31:16,351 --> 02:31:20,910
top of an into the Android OS which is

2468
02:31:19,080 --> 02:31:23,340
actually roughly similar to how a Google

2469
02:31:20,910 --> 02:31:25,050
Play and se for Android work if you're

2470
02:31:23,340 --> 02:31:27,061
familiar with that and we're actually at

2471
02:31:25,050 --> 02:31:29,070
a pretty skirt state so we actually have

2472
02:31:27,061 --> 02:31:31,891
this running I think on a phone on

2473
02:31:29,070 --> 02:31:33,480
Android Oreo 8.1 right now and so what

2474
02:31:31,891 --> 02:31:36,090
this does is it's a principal separation

2475
02:31:33,480 --> 02:31:37,920
between applications a principle of

2476
02:31:36,090 --> 02:31:40,440
separation between applications and the

2477
02:31:37,920 --> 02:31:43,021
nd and your underlying private data via

2478
02:31:40,440 --> 02:31:45,181
these pals or privacy assurance

2479
02:31:43,021 --> 02:31:47,641
locations or something on that order and

2480
02:31:45,181 --> 02:31:49,110
of course you need to abstract some of

2481
02:31:47,641 --> 02:31:50,160
those you know really technical ways

2482
02:31:49,110 --> 02:31:51,960
we're doing this away from the people

2483
02:31:50,160 --> 02:31:53,940
who need to use these things and there's

2484
02:31:51,960 --> 02:31:55,949
a bunch of human factors elements baked

2485
02:31:53,940 --> 02:31:57,420
in so the example that discussion about

2486
02:31:55,950 --> 02:32:00,030
you know locations and stuff like that

2487
02:31:57,420 --> 02:32:01,830
or you know why you need contacts were

2488
02:32:00,030 --> 02:32:04,110
actually baking into DLS it's it's super

2489
02:32:01,830 --> 02:32:06,330
exciting work and I really hope it ends

2490
02:32:04,110 --> 02:32:08,761
up going somewhere so that's kind of fun

2491
02:32:06,330 --> 02:32:09,750
beyond that in terms of what I want to

2492
02:32:08,761 --> 02:32:11,761
talk about Brandeis I'm going to focus

2493
02:32:09,750 --> 02:32:14,580
specifically on some of the NPC work

2494
02:32:11,761 --> 02:32:16,110
that we're doing when I took over

2495
02:32:14,580 --> 02:32:18,511
Brandeis I was I kind of took it over

2496
02:32:16,110 --> 02:32:19,891
Midway and kind of the thesis for me is

2497
02:32:18,511 --> 02:32:21,391
that and I don't know if this is either

2498
02:32:19,891 --> 02:32:23,160
gonna be super controversial or not even

2499
02:32:21,391 --> 02:32:25,289
remotely controversial roughly speaking

2500
02:32:23,160 --> 02:32:27,630
I believe that MPC is completely

2501
02:32:25,290 --> 02:32:29,370
practical for some applications and it

2502
02:32:27,630 --> 02:32:31,859
just kind of confuses me why it's not

2503
02:32:29,370 --> 02:32:33,271
used and for some of you again you might

2504
02:32:31,860 --> 02:32:34,290
like me nodding your heads and for some

2505
02:32:33,271 --> 02:32:35,730
of you would be like that's completely

2506
02:32:34,290 --> 02:32:37,800
crazy but that's kind of where I'm

2507
02:32:35,730 --> 02:32:39,770
coming from and so what I've been trying

2508
02:32:37,800 --> 02:32:42,270
to do under Brandeis is actually show

2509
02:32:39,771 --> 02:32:44,431
some very specific applications that are

2510
02:32:42,271 --> 02:32:47,190
completely efficient now using MPC so

2511
02:32:44,431 --> 02:32:49,561
here's one specific example here you see

2512
02:32:47,190 --> 02:32:51,601
a map of Boston there are aid stations

2513
02:32:49,561 --> 02:32:53,070
and then you have an ailment and you

2514
02:32:51,601 --> 02:32:54,420
kind of you know pick one your ailments

2515
02:32:53,070 --> 02:32:56,610
and depending on that ailment it routes

2516
02:32:54,420 --> 02:32:59,101
you to the aid station and this is kind

2517
02:32:56,610 --> 02:33:00,710
of relatively intuitive this is things

2518
02:32:59,101 --> 02:33:02,670
like a year old in terms of that we have

2519
02:33:00,710 --> 02:33:05,100
the catch is is that this has actually

2520
02:33:02,670 --> 02:33:07,650
done via encryption which is to say that

2521
02:33:05,101 --> 02:33:09,000
the underlying the status and the

2522
02:33:07,650 --> 02:33:10,199
capabilities of the aid stations are

2523
02:33:09,000 --> 02:33:12,210
encrypted at all times the actual

2524
02:33:10,200 --> 02:33:13,720
ailment that you have is also encrypted

2525
02:33:12,210 --> 02:33:14,890
it just routes you if

2526
02:33:13,720 --> 02:33:17,170
figures out that route and where you're

2527
02:33:14,890 --> 02:33:18,220
going and why again purely by computing

2528
02:33:17,170 --> 02:33:19,450
on information while it remains

2529
02:33:18,220 --> 02:33:20,979
encrypted and this has a number of

2530
02:33:19,450 --> 02:33:22,120
applications right so don't just think

2531
02:33:20,979 --> 02:33:24,310
of it in terms of how do I get to an aid

2532
02:33:22,120 --> 02:33:26,920
station but all kinds of other resource

2533
02:33:24,310 --> 02:33:28,569
allocation as it were solutions that I

2534
02:33:26,920 --> 02:33:31,090
think especially in the low party

2535
02:33:28,569 --> 02:33:33,039
relatively low complexity cases can be

2536
02:33:31,090 --> 02:33:34,810
done basically now the homework

2537
02:33:33,040 --> 02:33:36,040
encryption partially homomorphic

2538
02:33:34,810 --> 02:33:38,800
encryption and secure multi-party

2539
02:33:36,040 --> 02:33:42,550
computation another one that I'm also

2540
02:33:38,800 --> 02:33:43,899
really excited about is so we're doing a

2541
02:33:42,550 --> 02:33:46,289
lot of work in the coalition information

2542
02:33:43,899 --> 02:33:48,399
sharing environment on disaster relief

2543
02:33:46,290 --> 02:33:51,580
humanitarian aid disaster relief so

2544
02:33:48,399 --> 02:33:53,800
suppose I have 10 countries with like 26

2545
02:33:51,580 --> 02:33:56,260
ships and I want to write them to 10

2546
02:33:53,800 --> 02:33:57,310
different ports to give aid but the

2547
02:33:56,260 --> 02:33:58,689
thing is is that I really don't want to

2548
02:33:57,310 --> 02:33:59,890
say where my ship is I really don't want

2549
02:33:58,689 --> 02:34:02,500
to say what its speed is what its

2550
02:33:59,890 --> 02:34:04,300
displacement is so could I upload you

2551
02:34:02,500 --> 02:34:05,979
know all of that stuff encrypted and

2552
02:34:04,300 --> 02:34:07,720
then what pops out is show up at this

2553
02:34:05,979 --> 02:34:10,050
you know be part of the port at this

2554
02:34:07,720 --> 02:34:12,580
time right so we're doing that right now

2555
02:34:10,050 --> 02:34:15,250
completely unauthorized in about seven

2556
02:34:12,580 --> 02:34:17,010
seconds so again this is and what you

2557
02:34:15,250 --> 02:34:19,569
can think again is this is kind of a

2558
02:34:17,010 --> 02:34:21,160
somewhat basic resource allocation

2559
02:34:19,569 --> 02:34:22,539
question on encrypted information and

2560
02:34:21,160 --> 02:34:24,729
again I think in this case it's it's

2561
02:34:22,540 --> 02:34:28,120
really quite doable it looks something

2562
02:34:24,729 --> 02:34:28,989
like this the underlying you know so

2563
02:34:28,120 --> 02:34:30,970
this is some of the stuff that we're

2564
02:34:28,989 --> 02:34:32,260
supporting scale momba which is some

2565
02:34:30,970 --> 02:34:36,399
fantastic working gonna be hearing about

2566
02:34:32,260 --> 02:34:39,609
later garbled Graham oblivious Ram SGX

2567
02:34:36,399 --> 02:34:41,680
and just in case SGX isn't secure we're

2568
02:34:39,609 --> 02:34:45,729
also supporting sanctum which is some

2569
02:34:41,680 --> 02:34:46,750
amazing open source work type thing I

2570
02:34:45,729 --> 02:34:50,260
think that surety we'll be talking about

2571
02:34:46,750 --> 02:34:52,239
later functional secret sharing so one

2572
02:34:50,260 --> 02:34:54,130
of the cool things there is we can today

2573
02:34:52,239 --> 02:34:57,039
so for those familiar with secret shared

2574
02:34:54,130 --> 02:34:58,539
databases we can upload so if you have a

2575
02:34:57,040 --> 02:35:00,910
two party sharing or a secret shared

2576
02:34:58,540 --> 02:35:02,859
database and these things could be vast

2577
02:35:00,910 --> 02:35:04,960
so how do you update the secret shared

2578
02:35:02,859 --> 02:35:06,460
database and not you know have to do a

2579
02:35:04,960 --> 02:35:08,080
secret chain for every single element in

2580
02:35:06,460 --> 02:35:09,399
that database so we can do that with

2581
02:35:08,080 --> 02:35:11,470
like a couple of AES encryption

2582
02:35:09,399 --> 02:35:16,090
I'm so uploading a giant secret shared

2583
02:35:11,470 --> 02:35:17,140
database and like nanoseconds so I'm not

2584
02:35:16,090 --> 02:35:18,760
talking about it but I just want to

2585
02:35:17,140 --> 02:35:20,019
mention some of the work we're doing in

2586
02:35:18,760 --> 02:35:22,569
differential privacy is incredibly

2587
02:35:20,020 --> 02:35:24,760
exciting that first one actually is

2588
02:35:22,569 --> 02:35:26,050
going to be basically talks about if you

2589
02:35:24,760 --> 02:35:27,400
have to ask a couple of complex

2590
02:35:26,050 --> 02:35:29,109
questions and want to balance

2591
02:35:27,400 --> 02:35:31,061
your underlying privacy and what you're

2592
02:35:29,110 --> 02:35:32,950
giving away the census will most likely

2593
02:35:31,061 --> 02:35:34,990
be using this for the 2020 census so I'm

2594
02:35:32,950 --> 02:35:36,550
really excited about that work and then

2595
02:35:34,990 --> 02:35:38,740
some other stuff which I don't think I

2596
02:35:36,550 --> 02:35:41,590
have time to talk about so I want to

2597
02:35:38,740 --> 02:35:43,750
talk briefly about race a resilient

2598
02:35:41,590 --> 02:35:46,030
anonymous communication for everyone so

2599
02:35:43,750 --> 02:35:47,740
the idea here is to use well so let's

2600
02:35:46,030 --> 02:35:50,230
just talk about the problem the problem

2601
02:35:47,740 --> 02:35:53,080
is tor is amazing that's not a problem

2602
02:35:50,230 --> 02:35:55,180
that's that's a fact the challenge was

2603
02:35:53,080 --> 02:35:56,080
something like tor is that you know the

2604
02:35:55,180 --> 02:35:57,940
way it has to work it has to be

2605
02:35:56,080 --> 02:35:59,590
distributed right and it gets a lot of

2606
02:35:57,940 --> 02:36:01,720
its resilience from being distributed

2607
02:35:59,590 --> 02:36:03,160
but when it's distributed it basically

2608
02:36:01,720 --> 02:36:05,109
has to announce where it lives and

2609
02:36:03,160 --> 02:36:08,140
because it announces where it lives it's

2610
02:36:05,110 --> 02:36:10,570
blockable in what we will call contested

2611
02:36:08,140 --> 02:36:14,350
Network environments you can think about

2612
02:36:10,570 --> 02:36:16,390
where so the idea is how do I build a

2613
02:36:14,351 --> 02:36:18,130
distributed system that knows enough to

2614
02:36:16,390 --> 02:36:20,470
be distributed but doesn't know enough

2615
02:36:18,130 --> 02:36:22,000
about itself that it's targetable right

2616
02:36:20,470 --> 02:36:23,561
and so what race is trying to do is

2617
02:36:22,000 --> 02:36:25,601
trying to solve that essentially using

2618
02:36:23,561 --> 02:36:26,830
secure multi-party computation as well

2619
02:36:25,601 --> 02:36:28,601
as hidden communication so if at all I

2620
02:36:26,830 --> 02:36:30,039
did was NPC that would be like cool

2621
02:36:28,601 --> 02:36:31,330
story you're running really weird crypto

2622
02:36:30,040 --> 02:36:33,190
in a distributed fashion I'm just gonna

2623
02:36:31,330 --> 02:36:35,910
block all of you so you have to do both

2624
02:36:33,190 --> 02:36:38,500
the kind of the NPC part as well as

2625
02:36:35,910 --> 02:36:39,730
we're funding a good amount of work in

2626
02:36:38,500 --> 02:36:41,830
how do you how do you hide

2627
02:36:39,730 --> 02:36:45,130
communications better and this work will

2628
02:36:41,830 --> 02:36:48,101
be kicking off in March or April as the

2629
02:36:45,130 --> 02:36:50,561
hope and the security guarantees are

2630
02:36:48,101 --> 02:36:52,601
actually pretty strong notably it's not

2631
02:36:50,561 --> 02:36:54,250
just about hiding your messages it's not

2632
02:36:52,601 --> 02:36:56,230
just about hiding your metadata which is

2633
02:36:54,250 --> 02:36:58,090
also important it's really also about

2634
02:36:56,230 --> 02:37:02,830
from I really love it to be unobservable

2635
02:36:58,090 --> 02:37:04,360
which is to say if I'm not sitting if I

2636
02:37:02,830 --> 02:37:05,620
am NOT sitting on a system running this

2637
02:37:04,360 --> 02:37:07,480
thing you shouldn't be able to infer

2638
02:37:05,620 --> 02:37:08,771
that it's actually running it and just

2639
02:37:07,480 --> 02:37:10,029
to be because I probably haven't said it

2640
02:37:08,771 --> 02:37:11,561
it's a mobile application with a

2641
02:37:10,030 --> 02:37:14,320
distributed back-end so that's basically

2642
02:37:11,561 --> 02:37:16,270
what we're doing I get that there are a

2643
02:37:14,320 --> 02:37:18,670
lot of mobile messaging applications out

2644
02:37:16,271 --> 02:37:20,561
there the goal of race is not to develop

2645
02:37:18,670 --> 02:37:22,450
our own messaging application that's the

2646
02:37:20,561 --> 02:37:23,860
most magic thing ever quite frankly my

2647
02:37:22,450 --> 02:37:25,450
goal is to open-source all of the

2648
02:37:23,860 --> 02:37:26,590
libraries associated with it and release

2649
02:37:25,450 --> 02:37:28,390
it to all of you to do really cool

2650
02:37:26,590 --> 02:37:30,101
things with it right so this is a

2651
02:37:28,390 --> 02:37:31,779
completely open our goal is to be as

2652
02:37:30,101 --> 02:37:33,101
open as possible to develop all this

2653
02:37:31,780 --> 02:37:34,840
open source to give it out and then

2654
02:37:33,101 --> 02:37:36,190
hopefully some of those really great

2655
02:37:34,840 --> 02:37:37,840
secure messaging applications could

2656
02:37:36,190 --> 02:37:40,200
implement this in some really hard to

2657
02:37:37,840 --> 02:37:40,200
reach places

2658
02:37:40,289 --> 02:37:44,639
okay I'm not going to talk about that or

2659
02:37:41,909 --> 02:37:46,559
that so what's the future you know why

2660
02:37:44,639 --> 02:37:49,708
not so I want to talk about two things

2661
02:37:46,559 --> 02:37:52,589
briefly one is zero knowledge it's

2662
02:37:49,709 --> 02:37:54,389
interesting to me that no one in darpur

2663
02:37:52,589 --> 02:37:55,949
ARPA has never done anything in zero

2664
02:37:54,389 --> 02:37:57,179
knowledge zero knowledge the ability to

2665
02:37:55,949 --> 02:37:58,559
prove to you something without actually

2666
02:37:57,179 --> 02:38:00,509
telling you you know the underlying

2667
02:37:58,559 --> 02:38:02,579
secret that seems like a canonical DoD

2668
02:38:00,509 --> 02:38:04,469
kind of thing and yet we really haven't

2669
02:38:02,579 --> 02:38:05,788
chased it I think with the one of the

2670
02:38:04,469 --> 02:38:08,788
things that the cryptocurrency community

2671
02:38:05,789 --> 02:38:10,770
has demonstrated is how is really the

2672
02:38:08,789 --> 02:38:12,689
efficiency of relatively low complexity

2673
02:38:10,770 --> 02:38:14,549
zero knowledge statements so my question

2674
02:38:12,689 --> 02:38:16,229
is what happens when I take really

2675
02:38:14,549 --> 02:38:18,329
complicated zero knowledge statements so

2676
02:38:16,229 --> 02:38:20,038
things like reasoning about the security

2677
02:38:18,329 --> 02:38:22,349
of software or reasoning about the

2678
02:38:20,039 --> 02:38:23,609
insecurities of software or other kinds

2679
02:38:22,349 --> 02:38:26,309
of interesting very complicated

2680
02:38:23,609 --> 02:38:29,399
statements how how far can i push that

2681
02:38:26,309 --> 02:38:31,288
and still have a somewhat you know like

2682
02:38:29,399 --> 02:38:33,208
computable in a day kind of zero

2683
02:38:31,289 --> 02:38:34,739
knowledge proof I think that's kind of

2684
02:38:33,209 --> 02:38:37,339
interesting personally I'd be curious to

2685
02:38:34,739 --> 02:38:40,829
hear your thoughts and then finally

2686
02:38:37,339 --> 02:38:44,609
consensus protocols some might call that

2687
02:38:40,829 --> 02:38:45,989
blockchain so we released a recent RFI

2688
02:38:44,609 --> 02:38:47,959
about applications and barriers to

2689
02:38:45,989 --> 02:38:51,989
consensus protocols this is kind of me

2690
02:38:47,959 --> 02:38:53,939
poking at consensus protocols to see how

2691
02:38:51,989 --> 02:38:56,579
relevant I think they are for the

2692
02:38:53,939 --> 02:38:58,259
Department of Defense so one is like

2693
02:38:56,579 --> 02:39:00,449
what you know what can we really do now

2694
02:38:58,259 --> 02:39:01,889
that we can't do before from that

2695
02:39:00,449 --> 02:39:03,629
perspective permission block chains are

2696
02:39:01,889 --> 02:39:05,128
distributed computing from the 80s I'm

2697
02:39:03,629 --> 02:39:06,389
not saying they're not cool I'm not

2698
02:39:05,129 --> 02:39:09,299
saying you can't do cool things with

2699
02:39:06,389 --> 02:39:11,278
them I'm just saying fighting words I

2700
02:39:09,299 --> 02:39:13,979
don't think they're new

2701
02:39:11,279 --> 02:39:15,629
I think permissionless is really kind of

2702
02:39:13,979 --> 02:39:16,919
where it's at and that's the thing that

2703
02:39:15,629 --> 02:39:18,749
was really not possible before

2704
02:39:16,919 --> 02:39:20,759
developing these highly highly

2705
02:39:18,749 --> 02:39:23,009
distributed consensus protocols so what

2706
02:39:20,759 --> 02:39:24,119
can we really do with them I think one

2707
02:39:23,009 --> 02:39:25,859
of the things that Bitcoin showed was

2708
02:39:24,119 --> 02:39:26,599
that economic analysis plus computer

2709
02:39:25,859 --> 02:39:29,729
security

2710
02:39:26,599 --> 02:39:31,559
means very new things so the idea that

2711
02:39:29,729 --> 02:39:33,628
it's suddenly not secure insecure but

2712
02:39:31,559 --> 02:39:35,549
I'm bribing you to do something and that

2713
02:39:33,629 --> 02:39:37,949
means that you're not necessarily good

2714
02:39:35,549 --> 02:39:40,020
or bad you're just getting paid how can

2715
02:39:37,949 --> 02:39:41,429
we take that and build better models of

2716
02:39:40,020 --> 02:39:44,549
permissionless distributing those

2717
02:39:41,429 --> 02:39:45,899
protocols and the other question quite

2718
02:39:44,549 --> 02:39:47,699
honestly is how secure are these

2719
02:39:45,899 --> 02:39:50,368
concentric halls really it's interesting

2720
02:39:47,699 --> 02:39:51,449
to me that people talk about consensus

2721
02:39:50,369 --> 02:39:52,889
protocols has they're secure because

2722
02:39:51,449 --> 02:39:54,149
they're distributed that's kind of like

2723
02:39:52,889 --> 02:39:57,269
saying my computer is on

2724
02:39:54,149 --> 02:39:58,590
acabou because it can do a yes it that's

2725
02:39:57,270 --> 02:40:00,510
not it's not like there are different

2726
02:39:58,590 --> 02:40:02,010
levels of abstraction and so when we

2727
02:40:00,510 --> 02:40:05,249
think about consensus protocols as

2728
02:40:02,010 --> 02:40:06,539
actual distributed systems my question

2729
02:40:05,249 --> 02:40:08,100
is what's the underlying security of

2730
02:40:06,539 --> 02:40:10,919
that system because we know that in some

2731
02:40:08,100 --> 02:40:12,479
ways some of these protocols are central

2732
02:40:10,919 --> 02:40:13,289
you know there are papers you know and

2733
02:40:12,479 --> 02:40:14,640
then I know there have been kind of

2734
02:40:13,289 --> 02:40:15,840
defenses but talking about at the AAS

2735
02:40:14,640 --> 02:40:18,390
level Bitcoin it's actually rather

2736
02:40:15,840 --> 02:40:20,369
centralized or supposing that if

2737
02:40:18,390 --> 02:40:21,868
everyone using your giant distributed

2738
02:40:20,369 --> 02:40:24,270
consensus protocol is running the exact

2739
02:40:21,869 --> 02:40:26,459
same software or developed by the same

2740
02:40:24,270 --> 02:40:27,840
five people that's a centrality so how

2741
02:40:26,459 --> 02:40:29,249
do we think about those centrality how

2742
02:40:27,840 --> 02:40:31,529
do we defend against those centrality x'

2743
02:40:29,249 --> 02:40:33,880
i think that would be interesting so

2744
02:40:31,529 --> 02:40:40,000
thank you that's my time

2745
02:40:33,880 --> 02:40:44,199
[Applause]

2746
02:40:40,000 --> 02:40:45,399
so we have time for one question maybe

2747
02:40:44,200 --> 02:40:52,479
somebody who wants to come and disagree

2748
02:40:45,399 --> 02:40:56,849
with Josh about UBC watch-chain we have

2749
02:40:52,479 --> 02:40:56,849
one yeah hi

2750
02:40:56,880 --> 02:41:01,269
so Philip broke away in the moral

2751
02:40:59,200 --> 02:41:03,100
character of cryptographic work spoke

2752
02:41:01,270 --> 02:41:05,260
against ARPA and accepting funding from

2753
02:41:03,100 --> 02:41:06,460
it and he wrote quote the military

2754
02:41:05,260 --> 02:41:08,200
funding of science in vertically

2755
02:41:06,460 --> 02:41:10,419
redirects it and creates moral hazards

2756
02:41:08,200 --> 02:41:13,270
and think twice and then again about

2757
02:41:10,420 --> 02:41:18,939
accepting military funding funding what

2758
02:41:13,270 --> 02:41:20,620
do you have to say about that I think

2759
02:41:18,939 --> 02:41:22,149
academics are absolutely free to make

2760
02:41:20,620 --> 02:41:24,310
their own decisions I think the things

2761
02:41:22,149 --> 02:41:25,960
that we're developing are important and

2762
02:41:24,310 --> 02:41:27,310
I think it is completely up to an

2763
02:41:25,960 --> 02:41:28,269
individual academic whether they want to

2764
02:41:27,310 --> 02:41:34,859
engage with us I think that's completely

2765
02:41:28,270 --> 02:41:34,859
fair excellent answer

2766
02:41:35,880 --> 02:41:46,149
what where are my next speakers both of

2767
02:41:40,180 --> 02:41:47,410
them so well while we're waiting for

2768
02:41:46,149 --> 02:41:50,939
them to set up I'll remind you all that

2769
02:41:47,410 --> 02:41:52,539
we have a reception tonight at 5:30

2770
02:41:50,939 --> 02:41:55,000
exactly should wait

2771
02:41:52,540 --> 02:41:57,790
Nigel's motioning to me yep something I

2772
02:41:55,000 --> 02:42:00,670
want to say are you sure you always won

2773
02:41:57,790 --> 02:42:04,899
softly okay there's a reception at 5:30

2774
02:42:00,670 --> 02:42:05,739
do you know where it is apparently no

2775
02:42:04,899 --> 02:42:07,149
one in the steering committee knows

2776
02:42:05,739 --> 02:42:11,170
where it is it's someplace and will be

2777
02:42:07,149 --> 02:42:11,560
at 5:30 are we ready are you guys miked

2778
02:42:11,170 --> 02:42:17,410
up

2779
02:42:11,560 --> 02:42:20,380
what do you want this mic okay

2780
02:42:17,410 --> 02:42:22,210
so happy to introduce our second talk of

2781
02:42:20,380 --> 02:42:24,550
the session completely switching topics

2782
02:42:22,210 --> 02:42:26,470
looking at when Theory meets practice

2783
02:42:24,550 --> 02:42:27,819
for journalists working with encrypted

2784
02:42:26,470 --> 02:42:29,349
documents and we have a joint

2785
02:42:27,819 --> 02:42:33,330
presentation by both the author's all

2786
02:42:29,350 --> 02:42:33,330
passes on thank you

2787
02:42:50,670 --> 02:42:58,330
hello so as I said we're gonna be

2788
02:42:56,620 --> 02:42:59,860
talking to you today about when theory

2789
02:42:58,330 --> 02:43:01,120
means practice for journalists working

2790
02:42:59,860 --> 02:43:02,590
with encrypted documents and

2791
02:43:01,120 --> 02:43:04,330
specifically what we're going to be

2792
02:43:02,590 --> 02:43:06,940
looking at is the use of threshold

2793
02:43:04,330 --> 02:43:08,470
schemes in this setting so for the most

2794
02:43:06,940 --> 02:43:09,880
just the majority of this talk we're

2795
02:43:08,470 --> 02:43:11,380
gonna be working with a specific example

2796
02:43:09,880 --> 02:43:13,119
just to kind of facilitate the

2797
02:43:11,380 --> 02:43:15,630
communication of it where there are

2798
02:43:13,120 --> 02:43:18,130
three participants within the scheme and

2799
02:43:15,630 --> 02:43:19,600
it requires at least two of them to

2800
02:43:18,130 --> 02:43:23,050
cooperate in order to recover their

2801
02:43:19,601 --> 02:43:26,170
secret information so each participant

2802
02:43:23,050 --> 02:43:29,859
is given some information that is not

2803
02:43:26,170 --> 02:43:31,330
the entirety of the secret and on their

2804
02:43:29,860 --> 02:43:35,620
owns they are now no longer able to

2805
02:43:31,330 --> 02:43:37,771
recover it by themselves and as a pair

2806
02:43:35,620 --> 02:43:40,061
they can for any pair within this game

2807
02:43:37,771 --> 02:43:42,040
so if we talk about this within the

2808
02:43:40,061 --> 02:43:43,660
sense of a journalist who has been

2809
02:43:42,040 --> 02:43:45,370
entrusted with a sensitive document and

2810
02:43:43,660 --> 02:43:48,220
they want to store in a secure way

2811
02:43:45,370 --> 02:43:51,190
perhaps encrypted on some device if that

2812
02:43:48,220 --> 02:43:52,811
device is compromised or destroyed then

2813
02:43:51,190 --> 02:43:54,760
the document itself can also be

2814
02:43:52,811 --> 02:43:56,289
eliminated so there's the single point

2815
02:43:54,760 --> 02:43:59,050
of failure if you want to prevent the

2816
02:43:56,290 --> 02:44:01,570
distribution of this information if we

2817
02:43:59,050 --> 02:44:04,150
instead move to a threshold scheme we

2818
02:44:01,570 --> 02:44:06,490
can have a some level of redundancy

2819
02:44:04,150 --> 02:44:08,650
added in and even if one of the

2820
02:44:06,490 --> 02:44:10,960
participants in this two-three setting

2821
02:44:08,650 --> 02:44:13,210
loses their device that had their

2822
02:44:10,960 --> 02:44:15,250
information necessary to recover the

2823
02:44:13,210 --> 02:44:17,320
sensitive data there still remains two

2824
02:44:15,250 --> 02:44:19,000
others and the secret information can be

2825
02:44:17,320 --> 02:44:22,660
recovered and then distributed at the

2826
02:44:19,000 --> 02:44:24,880
appropriate time to the public we also

2827
02:44:22,660 --> 02:44:27,789
through using a threshold scheme are

2828
02:44:24,880 --> 02:44:28,391
able to achieve a level of distribution

2829
02:44:27,790 --> 02:44:30,940
of trust

2830
02:44:28,391 --> 02:44:32,619
so no one person assuming your threshold

2831
02:44:30,940 --> 02:44:34,840
is greater than one is able to make a

2832
02:44:32,620 --> 02:44:36,280
unilateral decision about distributing

2833
02:44:34,840 --> 02:44:37,960
this information so if you're working

2834
02:44:36,280 --> 02:44:41,500
with information that should be

2835
02:44:37,960 --> 02:44:43,179
carefully process you're able to ensure

2836
02:44:41,500 --> 02:44:45,130
that there's some oversight by having

2837
02:44:43,180 --> 02:44:47,090
some consensus required for distribution

2838
02:44:45,130 --> 02:44:49,159
so recently freedom

2839
02:44:47,090 --> 02:44:51,140
freedom of the press foundation came out

2840
02:44:49,159 --> 02:44:54,050
with an alpha release of the tools under

2841
02:44:51,140 --> 02:44:56,840
which is a graphical interface that

2842
02:44:54,050 --> 02:44:59,239
enables the users for a secret that they

2843
02:44:56,840 --> 02:45:00,859
possess to choose their desire threshold

2844
02:44:59,239 --> 02:45:03,680
and there are a number of participants

2845
02:45:00,859 --> 02:45:05,960
and then proceeded to produce sufficient

2846
02:45:03,680 --> 02:45:08,569
shares that they can then recover the

2847
02:45:05,960 --> 02:45:10,310
secret ethical so we're going to work

2848
02:45:08,569 --> 02:45:12,050
with sundar 'but as a case study to

2849
02:45:10,310 --> 02:45:14,090
facilitate our talk of how to use

2850
02:45:12,050 --> 02:45:17,720
threshold schemes in a more practical

2851
02:45:14,090 --> 02:45:19,100
setting so looking at a basic kind of

2852
02:45:17,720 --> 02:45:21,979
approach or in a high level of the

2853
02:45:19,100 --> 02:45:23,359
protocol you're gonna have a person who

2854
02:45:21,979 --> 02:45:25,970
has been entrusted with this information

2855
02:45:23,359 --> 02:45:27,439
who is the dealer who chooses the

2856
02:45:25,970 --> 02:45:29,358
appropriate threshold and number of

2857
02:45:27,439 --> 02:45:30,859
participants depending on the threat

2858
02:45:29,359 --> 02:45:32,329
models they're facing and the level of

2859
02:45:30,859 --> 02:45:34,430
redundancy and distribution of trust

2860
02:45:32,329 --> 02:45:36,409
that they want they can then feed this

2861
02:45:34,430 --> 02:45:38,989
information into a tool such as sundar

2862
02:45:36,409 --> 02:45:42,590
that can perform the secret sharing for

2863
02:45:38,989 --> 02:45:44,720
them in the case of sundar it uses a

2864
02:45:42,590 --> 02:45:47,479
Shamir threshold scheme and good news is

2865
02:45:44,720 --> 02:45:49,460
that you can have any desired threshold

2866
02:45:47,479 --> 02:45:50,659
you want as long as the threshold is

2867
02:45:49,460 --> 02:45:53,179
less than or equal to the number of

2868
02:45:50,659 --> 02:45:54,590
participants within the scheme so once

2869
02:45:53,180 --> 02:45:56,899
you put it through the tool you get to

2870
02:45:54,590 --> 02:45:58,430
the desired shares as output and then

2871
02:45:56,899 --> 02:46:00,380
the dealer will keep one for themselves

2872
02:45:58,430 --> 02:46:02,119
and distribute the remaining shares out

2873
02:46:00,380 --> 02:46:04,849
to the other participants they've

2874
02:46:02,119 --> 02:46:06,739
selected to be valid for providing in

2875
02:46:04,850 --> 02:46:10,250
censuses to when to distribute this

2876
02:46:06,739 --> 02:46:11,989
information we have a second phase of

2877
02:46:10,250 --> 02:46:13,040
reconstruction which is simply for the

2878
02:46:11,989 --> 02:46:16,279
threshold number of participants

2879
02:46:13,040 --> 02:46:17,779
recombines and are able to recover the

2880
02:46:16,279 --> 02:46:19,850
secret by including their shares through

2881
02:46:17,779 --> 02:46:22,130
the tool and then this works quite

2882
02:46:19,850 --> 02:46:23,960
nicely if your secret you're dealing

2883
02:46:22,130 --> 02:46:25,880
with is only a few megabytes but perhaps

2884
02:46:23,960 --> 02:46:27,289
if you're working with larger data you

2885
02:46:25,880 --> 02:46:29,960
might want to consider an extended

2886
02:46:27,290 --> 02:46:32,090
setting where instead of just sharing

2887
02:46:29,960 --> 02:46:34,099
the sensitive information itself you

2888
02:46:32,090 --> 02:46:36,260
generate a key to serve as the secret

2889
02:46:34,100 --> 02:46:38,329
which you can then use for an

2890
02:46:36,260 --> 02:46:40,369
appropriate encryption algorithm to

2891
02:46:38,329 --> 02:46:41,750
encrypt your plaintext sensitive

2892
02:46:40,369 --> 02:46:43,399
information and produce the ciphertext

2893
02:46:41,750 --> 02:46:46,040
before proceeding as normal and

2894
02:46:43,399 --> 02:46:49,220
distributing the shares to your desired

2895
02:46:46,040 --> 02:46:51,710
participants the reconstruction stage

2896
02:46:49,220 --> 02:46:53,239
changes similarly with just adding this

2897
02:46:51,710 --> 02:46:54,919
extra step because when you recover the

2898
02:46:53,239 --> 02:46:57,109
secret you no longer have that sensitive

2899
02:46:54,920 --> 02:46:58,170
data until you apply your key and

2900
02:46:57,109 --> 02:47:02,130
recover

2901
02:46:58,170 --> 02:47:04,470
like so so what we wanted to focus on

2902
02:47:02,130 --> 02:47:07,619
was considering the security of a

2903
02:47:04,470 --> 02:47:10,260
complete threshold system not just at

2904
02:47:07,620 --> 02:47:12,360
the protocol level but also out who like

2905
02:47:10,260 --> 02:47:14,729
Ellison's ver term ceremony which

2906
02:47:12,360 --> 02:47:16,740
includes not just computers but also the

2907
02:47:14,729 --> 02:47:19,470
people interacting with the system so if

2908
02:47:16,740 --> 02:47:21,840
you talked with something like TLS which

2909
02:47:19,470 --> 02:47:23,729
is the protocol outside of it if you had

2910
02:47:21,840 --> 02:47:25,410
something like a pop-up in case with bad

2911
02:47:23,729 --> 02:47:26,699
certificate the users interaction and

2912
02:47:25,410 --> 02:47:29,189
what they should appropriately do when

2913
02:47:26,700 --> 02:47:30,479
you're seeing this pop up would be

2914
02:47:29,189 --> 02:47:32,610
something that's included in the

2915
02:47:30,479 --> 02:47:34,470
ceremony and is relevant for TLS to

2916
02:47:32,610 --> 02:47:37,680
actually be providing them with complete

2917
02:47:34,470 --> 02:47:39,900
security so what we're going to do is

2918
02:47:37,680 --> 02:47:41,939
treat sundar as a protocol but we also

2919
02:47:39,900 --> 02:47:43,920
have this external documentation that

2920
02:47:41,939 --> 02:47:45,330
specifies the actions that are

2921
02:47:43,920 --> 02:47:47,970
appropriate for the user to take and

2922
02:47:45,330 --> 02:47:49,680
what we're going to do is highlight both

2923
02:47:47,970 --> 02:47:53,070
of the protocol level and the ceremony

2924
02:47:49,680 --> 02:47:55,200
level where in these protocols I've kind

2925
02:47:53,070 --> 02:47:58,020
of outlined for you so far there are

2926
02:47:55,200 --> 02:47:59,250
gaps that can lead to security loss for

2927
02:47:58,020 --> 02:48:01,560
people youth working with this

2928
02:47:59,250 --> 02:48:03,450
information so in the last half of this

2929
02:48:01,560 --> 02:48:07,080
talk what we're going to highlight for

2930
02:48:03,450 --> 02:48:10,350
you is just a few of our select gaps

2931
02:48:07,080 --> 02:48:11,850
that we picked out for you today as well

2932
02:48:10,350 --> 02:48:14,939
as the improvements that we have

2933
02:48:11,850 --> 02:48:17,360
identified in our ongoing working on

2934
02:48:14,939 --> 02:48:17,360
implement

2935
02:48:19,890 --> 02:48:27,779
I don't think we should get too close to

2936
02:48:22,260 --> 02:48:30,870
each other okay so as Bailey mentioned

2937
02:48:27,780 --> 02:48:32,100
um sunder and secret training schemes

2938
02:48:30,870 --> 02:48:33,990
are being used in practice by

2939
02:48:32,100 --> 02:48:35,760
journalists and so we're gonna look at

2940
02:48:33,990 --> 02:48:38,460
the gaps and some improvements that can

2941
02:48:35,760 --> 02:48:42,690
be done in order to help them achieve

2942
02:48:38,460 --> 02:48:45,119
their intended security guarantees so

2943
02:48:42,690 --> 02:48:49,021
one obvious potential gap is that of

2944
02:48:45,120 --> 02:48:50,280
share loss so in the base scheme secret

2945
02:48:49,021 --> 02:48:53,160
sharing scheme is really useful because

2946
02:48:50,280 --> 02:48:53,670
you can lose up to a threshold number of

2947
02:48:53,160 --> 02:48:55,920
shares

2948
02:48:53,670 --> 02:48:57,630
however after you lose that threshold

2949
02:48:55,920 --> 02:49:00,271
number of shares the secret is no longer

2950
02:48:57,630 --> 02:49:03,570
recoverable and we know that humans are

2951
02:49:00,271 --> 02:49:05,760
fallible they lose things so that's

2952
02:49:03,570 --> 02:49:08,699
something we essentially like to improve

2953
02:49:05,760 --> 02:49:10,230
and attackers can also take advantage of

2954
02:49:08,700 --> 02:49:11,880
this because they can destroy or they

2955
02:49:10,230 --> 02:49:13,561
can perform it enough service attack

2956
02:49:11,880 --> 02:49:17,009
against these shares which would also

2957
02:49:13,561 --> 02:49:18,600
render the secret unrecoverable so one

2958
02:49:17,010 --> 02:49:20,610
way that we can improve upon this is by

2959
02:49:18,600 --> 02:49:22,110
adding a repairability algorithm and

2960
02:49:20,610 --> 02:49:23,790
these are pretty well known in the

2961
02:49:22,110 --> 02:49:25,980
literature essentially what they allow

2962
02:49:23,790 --> 02:49:28,880
you to do is if you have a threshold

2963
02:49:25,980 --> 02:49:30,779
number of shares or more you can recover

2964
02:49:28,880 --> 02:49:32,910
shares which have been lost

2965
02:49:30,780 --> 02:49:34,620
using the repairability algorithm and

2966
02:49:32,910 --> 02:49:37,950
we're not going to go too much into them

2967
02:49:34,620 --> 02:49:39,030
right now we wanted to cite some

2968
02:49:37,950 --> 02:49:40,890
literature where you can find more

2969
02:49:39,030 --> 02:49:43,110
information about them but there are

2970
02:49:40,890 --> 02:49:48,300
schemes which you can use immediately

2971
02:49:43,110 --> 02:49:50,460
with Shamir today so another gap that we

2972
02:49:48,300 --> 02:49:53,811
identified is that of organizational

2973
02:49:50,460 --> 02:49:56,699
turnover so when you are going about

2974
02:49:53,811 --> 02:49:58,470
sharing a secret you might want to

2975
02:49:56,700 --> 02:50:00,330
protect some kind of organizational

2976
02:49:58,470 --> 02:50:02,640
secret and at the beginning everyone

2977
02:50:00,330 --> 02:50:04,311
might be within the organization and

2978
02:50:02,640 --> 02:50:07,439
everyone might be immediately trusted

2979
02:50:04,311 --> 02:50:09,330
however what happens if one person goes

2980
02:50:07,440 --> 02:50:11,220
and leaves the organization later and

2981
02:50:09,330 --> 02:50:13,950
they take their share with them so in

2982
02:50:11,220 --> 02:50:16,561
this case they're moving from an trusted

2983
02:50:13,950 --> 02:50:19,380
state to an untrusted state and in the

2984
02:50:16,561 --> 02:50:21,090
current version of Shamir that actually

2985
02:50:19,380 --> 02:50:23,009
isn't protected against and so this

2986
02:50:21,090 --> 02:50:26,070
person who's moved from trustee to

2987
02:50:23,010 --> 02:50:27,540
untrusted can continue to collude with

2988
02:50:26,070 --> 02:50:29,220
someone who is potentially within the

2989
02:50:27,540 --> 02:50:30,780
organization or maybe even people who

2990
02:50:29,220 --> 02:50:33,090
have left so there's no sort of

2991
02:50:30,780 --> 02:50:34,920
differentiation between organiz

2992
02:50:33,090 --> 02:50:38,370
confidentiality and protocol

2993
02:50:34,920 --> 02:50:40,500
confidentiality and so one way that we

2994
02:50:38,370 --> 02:50:43,260
can improve upon that is by allowing

2995
02:50:40,500 --> 02:50:46,439
dynamic updates within the shares and so

2996
02:50:43,260 --> 02:50:49,080
essentially if someone who was trusted

2997
02:50:46,439 --> 02:50:50,550
before then leaves the organization the

2998
02:50:49,080 --> 02:50:52,800
remaining number of people can perform

2999
02:50:50,550 --> 02:50:55,199
an update on their shares such that

3000
02:50:52,800 --> 02:50:57,750
those updated shares only those together

3001
02:50:55,200 --> 02:51:00,359
can recover the secret but you can still

3002
02:50:57,750 --> 02:51:01,500
recover the original secret and this is

3003
02:51:00,359 --> 02:51:03,450
something that we are currently doing

3004
02:51:01,500 --> 02:51:07,010
the implementation of and rust and we

3005
02:51:03,450 --> 02:51:09,149
will detail more in our upcoming paper

3006
02:51:07,010 --> 02:51:12,890
so now we're going to look at some gaps

3007
02:51:09,149 --> 02:51:12,890
and improvements in the extended model

3008
02:51:15,500 --> 02:51:21,899
okay so one gap which is pretty simple

3009
02:51:18,899 --> 02:51:25,260
to fix but isn't defined in Shamir is

3010
02:51:21,899 --> 02:51:29,000
that of integrity so when you share a

3011
02:51:25,260 --> 02:51:32,040
secret if the secret is the key to some

3012
02:51:29,000 --> 02:51:34,020
ciphertext that original key you can be

3013
02:51:32,040 --> 02:51:36,720
sure of the integrity of it by Oceaneer

3014
02:51:34,020 --> 02:51:38,670
however it isn't actually defined about

3015
02:51:36,720 --> 02:51:41,130
how you verify the integrity of that end

3016
02:51:38,670 --> 02:51:43,170
ciphertext and so one really easy way to

3017
02:51:41,130 --> 02:51:45,210
improve upon this is by secret sharing

3018
02:51:43,170 --> 02:51:47,399
some integrity value so that might be a

3019
02:51:45,210 --> 02:51:49,769
Mac or a signature and so that and of

3020
02:51:47,399 --> 02:51:52,800
itself can also be fed into the Shamir

3021
02:51:49,770 --> 02:51:57,060
protocol and secret shared to the other

3022
02:51:52,800 --> 02:51:59,399
participants and so finally we'll look

3023
02:51:57,060 --> 02:52:01,800
at really quickly about redundancy and

3024
02:51:59,399 --> 02:52:03,960
so we talked about redundancy before if

3025
02:52:01,800 --> 02:52:07,438
you were to lose some shares if you were

3026
02:52:03,960 --> 02:52:09,479
to lose up to a threshold number sorry

3027
02:52:07,439 --> 02:52:11,160
if you were to retain a threshold number

3028
02:52:09,479 --> 02:52:14,429
of shares you can continue to recover

3029
02:52:11,160 --> 02:52:18,060
the secret so you can afford some loss

3030
02:52:14,430 --> 02:52:20,340
there however in a tool something like

3031
02:52:18,060 --> 02:52:22,050
sundar there's actually no definition

3032
02:52:20,340 --> 02:52:25,290
around how do you achieve redundancy

3033
02:52:22,050 --> 02:52:26,880
with the end ciphertext so that cyber

3034
02:52:25,290 --> 02:52:28,140
attacks could only be stored on the

3035
02:52:26,880 --> 02:52:30,420
dealer's machine and if that machine

3036
02:52:28,140 --> 02:52:31,858
goes away it doesn't matter whether or

3037
02:52:30,420 --> 02:52:34,530
not you can recover that key that

3038
02:52:31,859 --> 02:52:36,359
ciphertext your actual protected

3039
02:52:34,530 --> 02:52:38,729
document you can no longer recover and

3040
02:52:36,359 --> 02:52:41,609
so there's a lot of ways that you can go

3041
02:52:38,729 --> 02:52:43,979
about fixing this this is just one way

3042
02:52:41,609 --> 02:52:44,580
that we identified but surely there's

3043
02:52:43,979 --> 02:52:46,619
there's

3044
02:52:44,580 --> 02:52:48,330
there ways that this could be solved but

3045
02:52:46,620 --> 02:52:50,130
essentially one easy way to fix this is

3046
02:52:48,330 --> 02:52:52,800
you take that ciphertext and you copy it

3047
02:52:50,130 --> 02:52:54,750
to several different servers of which

3048
02:52:52,800 --> 02:52:57,240
you trust and they're all sort of

3049
02:52:54,750 --> 02:52:59,010
independently located and that is just a

3050
02:52:57,240 --> 02:53:03,061
cheap and easy way to ensure we're done

3051
02:52:59,010 --> 02:53:04,080
see for that end ciphertext so now we're

3052
02:53:03,061 --> 02:53:07,289
just going to quickly look at some

3053
02:53:04,080 --> 02:53:08,730
ongoing in future work so as Bailey

3054
02:53:07,290 --> 02:53:10,890
mentioned right now we are doing a

3055
02:53:08,730 --> 02:53:13,740
complete Ceremony analysis and our goal

3056
02:53:10,890 --> 02:53:16,140
is to essentially look at what is the

3057
02:53:13,740 --> 02:53:17,640
true intent path for a user who is using

3058
02:53:16,140 --> 02:53:18,990
a tool like sundar and what are the

3059
02:53:17,640 --> 02:53:20,939
different kind of decisions that they

3060
02:53:18,990 --> 02:53:23,640
need to make along the way and so we

3061
02:53:20,940 --> 02:53:27,090
want to define what that end-to-end path

3062
02:53:23,640 --> 02:53:28,380
looks like in a secure manner and also

3063
02:53:27,090 --> 02:53:29,940
what we're working on is that updating

3064
02:53:28,380 --> 02:53:32,279
shares functionality so you can have

3065
02:53:29,940 --> 02:53:34,650
some kind of dense dynamicism in the

3066
02:53:32,280 --> 02:53:37,860
protocol without having to rerun the

3067
02:53:34,650 --> 02:53:39,119
generation protocol all over again in a

3068
02:53:37,860 --> 02:53:41,670
few areas of future work that we

3069
02:53:39,120 --> 02:53:42,960
identified so repairing algorithms are

3070
02:53:41,670 --> 02:53:44,820
really useful and they're well defined

3071
02:53:42,960 --> 02:53:47,820
so adding an implementation of them for

3072
02:53:44,820 --> 02:53:51,029
law shares would be useful to existing

3073
02:53:47,820 --> 02:53:53,490
Shamir implementations and then finally

3074
02:53:51,030 --> 02:53:55,680
on a good area of research is designing

3075
02:53:53,490 --> 02:53:57,210
schemes to limit the dealer trust this

3076
02:53:55,680 --> 02:53:59,670
isn't something we've gone into in great

3077
02:53:57,210 --> 02:54:01,109
detail but obviously there is a lot of

3078
02:53:59,670 --> 02:54:03,540
trust placed in the dealer and so how

3079
02:54:01,110 --> 02:54:06,330
can we limit that and help provide some

3080
02:54:03,540 --> 02:54:08,820
kind of buffer and safeguard in that

3081
02:54:06,330 --> 02:54:11,130
case so overall what are some of the

3082
02:54:08,820 --> 02:54:13,289
takeaways that we want to emphasize from

3083
02:54:11,130 --> 02:54:14,820
this talk one is that secret sharing

3084
02:54:13,290 --> 02:54:18,240
scheme czar not suitable for real-world

3085
02:54:14,820 --> 02:54:22,260
use as is really there needs to be

3086
02:54:18,240 --> 02:54:24,199
additional things in place in order to

3087
02:54:22,260 --> 02:54:26,460
fill the gaps to ensure integrity

3088
02:54:24,200 --> 02:54:28,890
confidentiality authenticity and

3089
02:54:26,460 --> 02:54:31,199
availability and finally on ceremony

3090
02:54:28,890 --> 02:54:33,740
analysis helps identify the gaps between

3091
02:54:31,200 --> 02:54:35,970
what's expected of users and the end

3092
02:54:33,740 --> 02:54:38,580
security expectations that we have for

3093
02:54:35,970 --> 02:54:40,561
the system thank you at this time we

3094
02:54:38,580 --> 02:54:42,360
just like to sorry thanks for you to the

3095
02:54:40,561 --> 02:54:44,279
press foundation for talking to us about

3096
02:54:42,360 --> 02:54:46,771
the different use cases as well as thank

3097
02:54:44,280 --> 02:54:48,090
en Goldberg for his feedback leading up

3098
02:54:46,771 --> 02:54:50,670
to this presentation and his ongoing

3099
02:54:48,090 --> 02:54:53,150
involvement in our upcoming paper Thanks

3100
02:54:50,670 --> 02:54:53,150
thank you

3101
02:54:58,399 --> 02:55:09,710
they've time for one question is secured

3102
02:55:06,680 --> 02:55:11,450
deletion a part of your use case being

3103
02:55:09,710 --> 02:55:13,220
able to delete the data securely and

3104
02:55:11,450 --> 02:55:15,410
have assurance that you know all copies

3105
02:55:13,220 --> 02:55:18,858
are destroyed yeah so that is something

3106
02:55:15,410 --> 02:55:23,510
we assumed within this our mode of

3107
02:55:18,859 --> 02:55:26,149
analysis um ensuring secure deletion is

3108
02:55:23,510 --> 02:55:27,830
a hard problem but you can't so we have

3109
02:55:26,149 --> 02:55:29,119
to some level assume there's some way

3110
02:55:27,830 --> 02:55:30,800
for you delete it because otherwise

3111
02:55:29,120 --> 02:55:32,689
there's currently that problem where all

3112
02:55:30,800 --> 02:55:34,699
of that information is at one point on

3113
02:55:32,689 --> 02:55:37,550
one device and if you can't come up with

3114
02:55:34,700 --> 02:55:40,490
some mechanism to it reach some limit of

3115
02:55:37,550 --> 02:55:41,660
deletion you do have that one single

3116
02:55:40,490 --> 02:55:43,430
point of failure where if someone's able

3117
02:55:41,660 --> 02:55:49,430
to compromise that they could learn all

3118
02:55:43,430 --> 02:55:52,600
the information they want thank you okay

3119
02:55:49,430 --> 02:55:52,600
let's thank our speakers again please

3120
02:55:56,830 --> 02:56:01,640
and while Michele sets up some of you

3121
02:56:00,290 --> 02:56:03,620
weren't in the room when I announced at

3122
02:56:01,640 --> 02:56:06,108
the beginning that to garage tickets

3123
02:56:03,620 --> 02:56:14,000
have been found and they are at the

3124
02:56:06,109 --> 02:56:16,130
reception registration desk yeah yes and

3125
02:56:14,000 --> 02:56:18,920
Ken he's making a drinking motion to me

3126
02:56:16,130 --> 02:56:21,948
too should I have a drink is it

3127
02:56:18,920 --> 02:56:25,790
you want to go get drinks I'm ready

3128
02:56:21,949 --> 02:56:27,409
was there actually something drinks Oh

3129
02:56:25,790 --> 02:56:29,600
I'm also supposed to remind you again

3130
02:56:27,409 --> 02:56:31,640
that there's a reception of 5:30 that

3131
02:56:29,600 --> 02:56:33,229
none of the three of us know where it is

3132
02:56:31,640 --> 02:56:34,608
you know where it is it's apparently

3133
02:56:33,229 --> 02:56:48,528
it's just out here where we were meeting

3134
02:56:34,609 --> 02:56:51,140
yeah okay so reception 5:30 up there so

3135
02:56:48,529 --> 02:56:52,699
to bring us home today we have Michelle

3136
02:56:51,140 --> 02:56:57,069
Newark who is going to talk to us about

3137
02:56:52,699 --> 02:56:57,069
mistakes that developers make Michelle

3138
02:57:03,970 --> 02:57:10,640
all right how's that better okay hi so

3139
02:57:08,810 --> 02:57:12,109
as I mentioned I'm Michelle I'm an

3140
02:57:10,640 --> 02:57:13,550
assistant professor at the University of

3141
02:57:12,109 --> 02:57:15,739
Maryland and I'm going to talk to you

3142
02:57:13,550 --> 02:57:18,198
about some work we've been doing trying

3143
02:57:15,739 --> 02:57:21,560
to understand security mistakes that

3144
02:57:18,199 --> 02:57:23,779
developers make so many real-world

3145
02:57:21,560 --> 02:57:26,300
vulnerabilities arise from quote unquote

3146
02:57:23,779 --> 02:57:28,790
solved problems so I'm using solved

3147
02:57:26,300 --> 02:57:30,710
extremely advisedly here right obviously

3148
02:57:28,790 --> 02:57:33,080
they're not solved because they still

3149
02:57:30,710 --> 02:57:34,429
exist in many cases but these are things

3150
02:57:33,080 --> 02:57:36,080
that we at least you know on some level

3151
02:57:34,430 --> 02:57:38,870
understand the technical solution to you

3152
02:57:36,080 --> 02:57:40,760
this graph is uh is from the NIST

3153
02:57:38,870 --> 02:57:43,189
national vulnerability database showing

3154
02:57:40,760 --> 02:57:45,859
like the prevalence of buffer overflow

3155
02:57:43,189 --> 02:57:48,409
of all related vulnerabilities over the

3156
02:57:45,859 --> 02:57:51,050
past 20 years or so and we can see that

3157
02:57:48,409 --> 02:57:52,430
you know these even though we all sort

3158
02:57:51,050 --> 02:57:54,319
of understand what causes buffer

3159
02:57:52,430 --> 02:57:55,699
overflows they're just sort of not going

3160
02:57:54,319 --> 02:57:57,920
away right and there's plenty of other

3161
02:57:55,699 --> 02:57:59,420
examples of things that we understand

3162
02:57:57,920 --> 02:58:01,880
that but that turned out to be sort of

3163
02:57:59,420 --> 02:58:04,550
hard in practice this is an example from

3164
02:58:01,880 --> 02:58:06,009
for a great paper out of University of

3165
02:58:04,550 --> 02:58:08,300
Florida a couple of years ago about

3166
02:58:06,010 --> 02:58:11,239
Mobile Money applications and this is

3167
02:58:08,300 --> 02:58:12,948
sort of one example where they were the

3168
02:58:11,239 --> 02:58:15,380
company was sort of sending user data

3169
02:58:12,949 --> 02:58:16,880
and a key to a special encryption server

3170
02:58:15,380 --> 02:58:18,229
which was doing the encryption for them

3171
02:58:16,880 --> 02:58:22,159
and then sending back the encrypted

3172
02:58:18,229 --> 02:58:25,880
content all over HTTP yeah oops

3173
02:58:22,159 --> 02:58:27,920
all right turns out like even bad guys

3174
02:58:25,880 --> 02:58:29,179
have a lot of trouble getting their

3175
02:58:27,920 --> 02:58:30,800
crypto right like if you're writing

3176
02:58:29,180 --> 02:58:31,359
ransomware you have kind of one job

3177
02:58:30,800 --> 02:58:34,509
right

3178
02:58:31,359 --> 02:58:37,029
just to get your crypto right it turns

3179
02:58:34,510 --> 02:58:41,529
out like that that doesn't work maybe my

3180
02:58:37,029 --> 02:58:44,409
favorite sort of recent example came

3181
02:58:41,529 --> 02:58:46,260
from sort of this new Sony Playstation

3182
02:58:44,409 --> 02:58:48,579
device which is designed to let you play

3183
02:58:46,260 --> 02:58:51,609
classic games but only ones that have

3184
02:58:48,579 --> 02:58:52,659
been sort of properly authorized to play

3185
02:58:51,609 --> 02:58:54,430
on the device well

3186
02:58:52,659 --> 02:58:56,919
it turns out that the way that they

3187
02:58:54,430 --> 02:58:59,079
check for validation of these the

3188
02:58:56,919 --> 02:59:02,470
software that you load on this thing is

3189
02:58:59,079 --> 02:59:05,199
they actually use a authenticated

3190
02:59:02,470 --> 02:59:07,239
encryption done symmetrically and so

3191
02:59:05,199 --> 02:59:09,850
they shipped every single device with

3192
02:59:07,239 --> 02:59:13,479
the key for validating the software in a

3193
02:59:09,850 --> 02:59:18,430
file on the device that they shipped it

3194
02:59:13,479 --> 02:59:20,288
with so you know there's so which is I

3195
02:59:18,430 --> 02:59:23,109
guess to say that you know things that

3196
02:59:20,289 --> 02:59:25,810
we sort of know everybody in this room

3197
02:59:23,109 --> 02:59:28,329
maybe knows how to not do still happen a

3198
02:59:25,810 --> 02:59:29,739
whole lot sort of in practice right so

3199
02:59:28,329 --> 02:59:33,249
it can be kind of fun to sort of laugh

3200
02:59:29,739 --> 02:59:34,899
at these stories right it would be nice

3201
02:59:33,249 --> 02:59:36,189
if people didn't make these mistakes but

3202
02:59:34,899 --> 02:59:37,479
I'm here to sort of argue that we need

3203
02:59:36,189 --> 02:59:39,789
to change our mindset around this a

3204
02:59:37,479 --> 02:59:41,618
little bit instead of asking you know

3205
02:59:39,789 --> 02:59:43,289
what is wrong with our developers would

3206
02:59:41,619 --> 02:59:45,999
take more of a sort of usable security

3207
02:59:43,289 --> 02:59:47,859
lens on this thing and say what can we

3208
02:59:45,999 --> 02:59:50,739
do to sort of make secure programming

3209
02:59:47,859 --> 02:59:52,270
easier for people to try to you know

3210
02:59:50,739 --> 02:59:55,720
help avoid some of these kinds of

3211
02:59:52,270 --> 02:59:57,249
low-hanging fruit mistakes and of course

3212
02:59:55,720 --> 02:59:58,899
there's lots of possible things we can

3213
02:59:57,249 --> 03:00:01,539
do here right ranging from you know

3214
02:59:58,899 --> 03:00:03,159
better languages and api's to open

3215
03:00:01,539 --> 03:00:05,800
sourcing all of our code so that we can

3216
03:00:03,159 --> 03:00:07,989
check for for bugs after the fact and

3217
03:00:05,800 --> 03:00:09,310
many things in between but it'd be nice

3218
03:00:07,989 --> 03:00:11,680
to know sort of how are we going to

3219
03:00:09,310 --> 03:00:14,050
prioritize among these various kinds of

3220
03:00:11,680 --> 03:00:15,640
solutions and even within solutions how

3221
03:00:14,050 --> 03:00:17,108
can we sort of optimize them to try to

3222
03:00:15,640 --> 03:00:19,479
get the most bang for our buck in terms

3223
03:00:17,109 --> 03:00:21,879
of the actual mistakes that people are

3224
03:00:19,479 --> 03:00:23,349
making sort about in the real world so

3225
03:00:21,879 --> 03:00:25,479
it would be really nice to understand

3226
03:00:23,350 --> 03:00:27,220
sort of why these mistakes happen what

3227
03:00:25,479 --> 03:00:29,079
the root causes are so that we can

3228
03:00:27,220 --> 03:00:31,688
address them but it turns out this is

3229
03:00:29,079 --> 03:00:33,159
kind of hard there's a few different

3230
03:00:31,689 --> 03:00:35,199
ways we can try to do that right so we

3231
03:00:33,159 --> 03:00:37,029
could do some field studies we could go

3232
03:00:35,199 --> 03:00:39,249
visit real organizations that are making

3233
03:00:37,029 --> 03:00:40,899
software sort of embed ourselves in the

3234
03:00:39,249 --> 03:00:42,220
organization and watch what happens and

3235
03:00:40,899 --> 03:00:45,670
try to understand the way that the

3236
03:00:42,220 --> 03:00:47,710
mistakes get made this has lots of great

3237
03:00:45,670 --> 03:00:49,780
great pros right you get to really see

3238
03:00:47,710 --> 03:00:51,779
how this works in the real world on the

3239
03:00:49,780 --> 03:00:53,830
other hand this can be hard to do

3240
03:00:51,780 --> 03:00:55,330
organizations aren't always that

3241
03:00:53,830 --> 03:00:56,890
thrilled about like researchers wanting

3242
03:00:55,330 --> 03:00:58,810
to just come in and sort of watch how

3243
03:00:56,890 --> 03:01:00,880
the sausage gets made I do have some

3244
03:00:58,810 --> 03:01:03,250
awesome collaborating partners in that

3245
03:01:00,880 --> 03:01:05,080
respect too we'll shout out but can be

3246
03:01:03,250 --> 03:01:06,700
hard to do and it can be hard to sort of

3247
03:01:05,080 --> 03:01:08,859
generalize or Systema ties from what

3248
03:01:06,700 --> 03:01:11,590
happens in one organization sort of

3249
03:01:08,859 --> 03:01:13,540
outwards we could take some field

3250
03:01:11,590 --> 03:01:15,069
measurements so this is just a another

3251
03:01:13,540 --> 03:01:16,899
graph from the national vulnerability

3252
03:01:15,069 --> 03:01:19,060
database but we could you know look at

3253
03:01:16,899 --> 03:01:21,358
CBS and look at what types of

3254
03:01:19,060 --> 03:01:25,090
vulnerabilities exist over various years

3255
03:01:21,359 --> 03:01:27,340
we could also do things like for example

3256
03:01:25,090 --> 03:01:28,569
using the great crypto and paper from a

3257
03:01:27,340 --> 03:01:30,819
few years ago we could go look at some

3258
03:01:28,569 --> 03:01:33,970
code and figure out you know what kinds

3259
03:01:30,819 --> 03:01:36,130
of bugs occur in it naturally right

3260
03:01:33,970 --> 03:01:38,679
so this has also lots of nice positives

3261
03:01:36,130 --> 03:01:41,259
right maybe these things are in the CV

3262
03:01:38,680 --> 03:01:43,000
database already categorized for you you

3263
03:01:41,260 --> 03:01:44,319
know these are you can get some some

3264
03:01:43,000 --> 03:01:46,810
idea of what's going on out in the real

3265
03:01:44,319 --> 03:01:48,369
world on the other hand it can be pretty

3266
03:01:46,810 --> 03:01:49,720
hard to sort of draw conclusions from

3267
03:01:48,370 --> 03:01:51,970
this data right we're comparing

3268
03:01:49,720 --> 03:01:53,979
drastically different systems to each

3269
03:01:51,970 --> 03:01:56,140
other we don't really have any context

3270
03:01:53,979 --> 03:01:58,060
for what happened in developing these

3271
03:01:56,140 --> 03:02:00,160
the software to understand where bugs

3272
03:01:58,060 --> 03:02:02,080
came from and sometimes you can only

3273
03:02:00,160 --> 03:02:04,300
sort of find the bugs that you're

3274
03:02:02,080 --> 03:02:05,470
looking for right you can't sort of find

3275
03:02:04,300 --> 03:02:08,710
other ones that you don't sort of

3276
03:02:05,470 --> 03:02:10,630
already know about we can also do

3277
03:02:08,710 --> 03:02:12,009
something that um that I've done a fair

3278
03:02:10,630 --> 03:02:14,140
bit of with my collaborators recently

3279
03:02:12,010 --> 03:02:15,819
with lab studies right so these are nice

3280
03:02:14,140 --> 03:02:17,170
you bring people and you'd have a nice

3281
03:02:15,819 --> 03:02:19,510
controlled environment you ask them to

3282
03:02:17,170 --> 03:02:21,220
do some tasks you get to exactly what

3283
03:02:19,510 --> 03:02:22,479
goes wrong this is great because you

3284
03:02:21,220 --> 03:02:23,979
have all this control you can measure

3285
03:02:22,479 --> 03:02:25,960
like exactly the variable you want to

3286
03:02:23,979 --> 03:02:28,810
measure and of course bringing a

3287
03:02:25,960 --> 03:02:30,640
programmer in to you know work on a test

3288
03:02:28,810 --> 03:02:32,529
that you give them in 90 minutes or less

3289
03:02:30,640 --> 03:02:34,449
is exactly like how programming works in

3290
03:02:32,530 --> 03:02:36,100
real life and therefore there's no

3291
03:02:34,450 --> 03:02:37,750
problems with that right now so you know

3292
03:02:36,100 --> 03:02:39,460
clearly this also has some drawbacks all

3293
03:02:37,750 --> 03:02:41,140
right so all of these things are really

3294
03:02:39,460 --> 03:02:43,569
important and valuable but they all have

3295
03:02:41,140 --> 03:02:45,789
these trade-offs and so what something

3296
03:02:43,569 --> 03:02:47,740
that we've been doing at UMD recently is

3297
03:02:45,790 --> 03:02:49,870
trying to find another point in this

3298
03:02:47,740 --> 03:02:52,060
trade-off space it also has pros and

3299
03:02:49,870 --> 03:02:54,370
cons but we think it has some some nice

3300
03:02:52,060 --> 03:02:56,830
reasonable trade-offs and that's this

3301
03:02:54,370 --> 03:02:58,811
build it break it fix it contest so this

3302
03:02:56,830 --> 03:03:00,460
is a sort of secure development contest

3303
03:02:58,811 --> 03:03:03,101
some of my colleagues originally came up

3304
03:03:00,460 --> 03:03:05,859
with you can think of it almost as like

3305
03:03:03,101 --> 03:03:06,490
the weird the weird child of sort of top

3306
03:03:05,860 --> 03:03:09,790
coder and

3307
03:03:06,490 --> 03:03:11,170
Kappa flag competitions so our teams

3308
03:03:09,790 --> 03:03:13,360
come in and they get a couple of weeks

3309
03:03:11,170 --> 03:03:15,910
to sort of build some software according

3310
03:03:13,360 --> 03:03:17,860
to a spec they get lots of points if

3311
03:03:15,910 --> 03:03:20,351
it's performant if it goes fast if it

3312
03:03:17,860 --> 03:03:21,931
has optional features then everybody

3313
03:03:20,351 --> 03:03:24,070
gets to see everybody else's code and

3314
03:03:21,931 --> 03:03:26,380
basically hammer on it for a couple of

3315
03:03:24,070 --> 03:03:28,721
weeks and when people find bugs in your

3316
03:03:26,380 --> 03:03:30,070
code you lose points you can also get

3317
03:03:28,721 --> 03:03:32,590
points for finding bugs but that's sort

3318
03:03:30,070 --> 03:03:33,851
of a separate category of points so so

3319
03:03:32,590 --> 03:03:36,370
as people find bugs in your code you

3320
03:03:33,851 --> 03:03:37,660
lose points and then eventually you get

3321
03:03:36,370 --> 03:03:38,950
to sort of try to fix the bugs that

3322
03:03:37,660 --> 03:03:42,789
people find in your code to get

3323
03:03:38,950 --> 03:03:44,471
something back so you know without going

3324
03:03:42,790 --> 03:03:46,870
to find to detail the incentive design

3325
03:03:44,471 --> 03:03:48,100
for this thing is pretty important you

3326
03:03:46,870 --> 03:03:50,650
know we want to make sure that our

3327
03:03:48,101 --> 03:03:52,420
builders are actually trying really hard

3328
03:03:50,650 --> 03:03:54,130
both to make it performant and to make

3329
03:03:52,420 --> 03:03:57,280
it secure just try to capture some of

3330
03:03:54,130 --> 03:03:58,600
sort of the trade-offs that you see in

3331
03:03:57,280 --> 03:04:01,061
real life between people having

3332
03:03:58,601 --> 03:04:02,830
competing priorities we also want to

3333
03:04:01,061 --> 03:04:04,931
make sure that our breakers are sort of

3334
03:04:02,830 --> 03:04:06,910
looking for security bugs and not just

3335
03:04:04,931 --> 03:04:08,170
for correctness bugs we want to make

3336
03:04:06,910 --> 03:04:09,641
sure that they're attacking a nice

3337
03:04:08,170 --> 03:04:11,830
breadth of submission but we don't just

3338
03:04:09,641 --> 03:04:12,880
want you know oh this particular project

3339
03:04:11,830 --> 03:04:14,440
is pretty bad so I'm just going to

3340
03:04:12,880 --> 03:04:16,811
hammer on this project all day and never

3341
03:04:14,440 --> 03:04:18,811
look at anything else and we want to

3342
03:04:16,811 --> 03:04:20,529
incentivize people to try to find

3343
03:04:18,811 --> 03:04:22,360
vulnerabilities that nobody else has

3344
03:04:20,530 --> 03:04:23,891
found in the interests of hopefully

3345
03:04:22,360 --> 03:04:26,230
getting pretty good coverage over all

3346
03:04:23,891 --> 03:04:30,520
the programs that were working on and

3347
03:04:26,230 --> 03:04:31,990
the the paper from CCS in 2016 goes into

3348
03:04:30,521 --> 03:04:35,170
a lot of detail about how we tried to do

3349
03:04:31,990 --> 03:04:37,300
that it works up to a point not

3350
03:04:35,170 --> 03:04:39,820
perfectly but it works reasonably well

3351
03:04:37,300 --> 03:04:42,760
and as a result we end up with something

3352
03:04:39,820 --> 03:04:44,050
that has you know more control than some

3353
03:04:42,761 --> 03:04:46,360
of the field studies I was talking about

3354
03:04:44,050 --> 03:04:49,359
although not perfect control and more

3355
03:04:46,360 --> 03:04:50,561
realism than lab studies because these

3356
03:04:49,360 --> 03:04:52,210
are projects that you know they can be

3357
03:04:50,561 --> 03:04:54,070
bigger they can be harder problems that

3358
03:04:52,210 --> 03:04:56,199
people work on for a few weeks you know

3359
03:04:54,070 --> 03:04:58,330
less real than like real-world software

3360
03:04:56,200 --> 03:05:01,420
but another sort of interesting point in

3361
03:04:58,330 --> 03:05:03,670
this space what we've been doing

3362
03:05:01,420 --> 03:05:05,580
recently is really trying to in-depth

3363
03:05:03,670 --> 03:05:07,870
look at the mistakes that get made

3364
03:05:05,580 --> 03:05:10,050
having run this contest several times

3365
03:05:07,870 --> 03:05:12,940
over the past few years and having had

3366
03:05:10,050 --> 03:05:15,189
about a hundred teams participate over

3367
03:05:12,940 --> 03:05:17,260
so before I talk about the mistakes that

3368
03:05:15,190 --> 03:05:18,460
can get made let's talk a little bit

3369
03:05:17,260 --> 03:05:21,430
about the problems that we ask people

3370
03:05:18,460 --> 03:05:24,429
solve so the first one was the secure

3371
03:05:21,430 --> 03:05:27,311
log problem basically you know you had

3372
03:05:24,430 --> 03:05:29,650
to write a file you had to write two

3373
03:05:27,311 --> 03:05:32,320
programs one to add entries to a log and

3374
03:05:29,650 --> 03:05:33,970
one to read data out of the log the

3375
03:05:32,320 --> 03:05:35,740
setting for this was an art-gallery to

3376
03:05:33,970 --> 03:05:36,910
sort of keep track of all the people

3377
03:05:35,740 --> 03:05:39,521
coming and going in an art-gallery

3378
03:05:36,910 --> 03:05:41,080
security system so don't worry too much

3379
03:05:39,521 --> 03:05:43,811
about like the specifics of the command

3380
03:05:41,080 --> 03:05:46,330
line but you have to know the key to be

3381
03:05:43,811 --> 03:05:48,180
able to write to the log when you do

3382
03:05:46,330 --> 03:05:50,740
that it adds some entries to the log

3383
03:05:48,180 --> 03:05:53,260
just like that then eventually you can

3384
03:05:50,740 --> 03:05:54,970
read out and ask sort of where was Alice

3385
03:05:53,260 --> 03:05:56,830
today and it'll say Oh Alice was in the

3386
03:05:54,970 --> 03:05:58,800
office today right so the threat model

3387
03:05:56,830 --> 03:06:01,840
for this project is that the bad guy

3388
03:05:58,800 --> 03:06:05,561
does not get access to the key but they

3389
03:06:01,840 --> 03:06:08,351
do get access to the event log as it is

3390
03:06:05,561 --> 03:06:09,940
stored on disk right so as a strong man

3391
03:06:08,351 --> 03:06:12,340
example you could just like store your

3392
03:06:09,940 --> 03:06:14,530
log in plain text with no encryption or

3393
03:06:12,340 --> 03:06:17,980
encoding or anything else and then the

3394
03:06:14,530 --> 03:06:19,990
bad guys job is to either retrieve

3395
03:06:17,980 --> 03:06:22,510
information from the log about who was

3396
03:06:19,990 --> 03:06:24,610
where when or to edit the log in such a

3397
03:06:22,510 --> 03:06:26,680
way that the log reading program will

3398
03:06:24,610 --> 03:06:29,700
give back incorrect information right so

3399
03:06:26,680 --> 03:06:31,840
you can kind of see how that would work

3400
03:06:29,700 --> 03:06:34,030
the second one that we have is sort of a

3401
03:06:31,840 --> 03:06:36,610
secure communications problem modeled

3402
03:06:34,030 --> 03:06:38,710
after our bank talking to an ATM so you

3403
03:06:36,610 --> 03:06:41,050
create a bank it has this secure off

3404
03:06:38,710 --> 03:06:43,929
file which is basically just sort of the

3405
03:06:41,050 --> 03:06:47,679
the bootstrap secret key for the whole

3406
03:06:43,930 --> 03:06:50,021
thing you create an ATM write the ATM

3407
03:06:47,680 --> 03:06:52,510
makes cards you can do things like

3408
03:06:50,021 --> 03:06:55,510
create an account for Bob deposit some

3409
03:06:52,510 --> 03:06:57,340
money withdraw some money and so on the

3410
03:06:55,510 --> 03:06:58,630
attacker gets to sort of sit as a man in

3411
03:06:57,340 --> 03:07:01,150
the middle in between and has the

3412
03:06:58,630 --> 03:07:03,699
ability to read packets replay packets

3413
03:07:01,150 --> 03:07:05,650
drop packets things like that and also

3414
03:07:03,700 --> 03:07:10,110
potentially gets access to the card file

3415
03:07:05,650 --> 03:07:12,699
again sort of as storage on disk and

3416
03:07:10,110 --> 03:07:14,141
then the third problem that we did most

3417
03:07:12,700 --> 03:07:16,870
recently what sort of a secure data

3418
03:07:14,141 --> 03:07:18,940
server so it's basically an access

3419
03:07:16,870 --> 03:07:19,780
control delegation kind of a problem you

3420
03:07:18,940 --> 03:07:22,360
have principles

3421
03:07:19,780 --> 03:07:24,340
it's basically a key value store you can

3422
03:07:22,360 --> 03:07:26,410
create values you can delegate the

3423
03:07:24,340 --> 03:07:28,990
ability to read or write these values

3424
03:07:26,410 --> 03:07:31,271
principles and so on and in this case

3425
03:07:28,990 --> 03:07:34,630
the bad guy just has to try to either

3426
03:07:31,271 --> 03:07:36,311
read or write some data that he should

3427
03:07:34,630 --> 03:07:40,539
not have access to according to the

3428
03:07:36,311 --> 03:07:42,250
delegation okay so so what do we do with

3429
03:07:40,540 --> 03:07:44,771
all of these these projects that we have

3430
03:07:42,250 --> 03:07:47,021
well what what we've been doing and by

3431
03:07:44,771 --> 03:07:48,700
mostly mean my very patient and

3432
03:07:47,021 --> 03:07:51,070
long-suffering grad students have been

3433
03:07:48,700 --> 03:07:53,561
examining every project and each

3434
03:07:51,070 --> 03:07:54,970
identified vulnerability in detail this

3435
03:07:53,561 --> 03:07:57,279
includes all the vulnerabilities that

3436
03:07:54,970 --> 03:08:00,010
were found by other teams in the contest

3437
03:07:57,280 --> 03:08:02,680
as well as the research the grad

3438
03:08:00,010 --> 03:08:04,510
students themselves look in each program

3439
03:08:02,680 --> 03:08:06,730
for additional vulnerabilities that were

3440
03:08:04,510 --> 03:08:09,550
not found or not exploited in the

3441
03:08:06,730 --> 03:08:12,189
contest and they're doing a process of

3442
03:08:09,550 --> 03:08:14,679
rigorous qualitative coding so we're

3443
03:08:12,190 --> 03:08:16,391
doing open and axial coding to sort

3444
03:08:14,680 --> 03:08:18,940
these vulnerabilities into different

3445
03:08:16,391 --> 03:08:21,490
categories with two independent coders

3446
03:08:18,940 --> 03:08:23,771
so they've gone through 76 projects and

3447
03:08:21,490 --> 03:08:26,230
more than 800 total vulnerabilities to

3448
03:08:23,771 --> 03:08:27,400
try to understand what happened here and

3449
03:08:26,230 --> 03:08:30,490
what's kind of nice about this is that

3450
03:08:27,400 --> 03:08:32,680
there's only three sort of projects so

3451
03:08:30,490 --> 03:08:34,061
it's a little easier to sort of look at

3452
03:08:32,680 --> 03:08:35,590
these things holistically then trying to

3453
03:08:34,061 --> 03:08:37,990
look at like all the possible kinds of

3454
03:08:35,590 --> 03:08:39,250
software that they might get written and

3455
03:08:37,990 --> 03:08:42,280
then we're gonna we're doing some

3456
03:08:39,250 --> 03:08:44,021
analysis on the resulting categories so

3457
03:08:42,280 --> 03:08:46,061
we're measuring things like what is the

3458
03:08:44,021 --> 03:08:47,340
type of the vulnerability which I'll get

3459
03:08:46,061 --> 03:08:51,190
into more what that means in a minute

3460
03:08:47,340 --> 03:08:52,570
what is the severity whether it's

3461
03:08:51,190 --> 03:08:54,430
changed so whether you have to exploit

3462
03:08:52,570 --> 03:08:56,920
sort of two things in a row to actually

3463
03:08:54,430 --> 03:08:59,021
achieve your objective difficulty of

3464
03:08:56,920 --> 03:09:01,811
finding and exploiting the vulnerability

3465
03:08:59,021 --> 03:09:03,940
on a project level we're coding for

3466
03:09:01,811 --> 03:09:06,400
things like how modular is the code

3467
03:09:03,940 --> 03:09:08,980
design how small did they make their

3468
03:09:06,400 --> 03:09:11,410
trusted code base you know are they

3469
03:09:08,980 --> 03:09:14,010
doing a good job of commenting software

3470
03:09:11,410 --> 03:09:17,110
and things of this nature

3471
03:09:14,010 --> 03:09:19,300
so we came up with this sort of

3472
03:09:17,110 --> 03:09:21,430
approximate hierarchy of vulnerability

3473
03:09:19,300 --> 03:09:22,779
classes that were using for this coding

3474
03:09:21,430 --> 03:09:25,420
which has sort of three main categories

3475
03:09:22,780 --> 03:09:28,030
so the big cat the first big category is

3476
03:09:25,420 --> 03:09:30,940
sort of no implementation so they just

3477
03:09:28,030 --> 03:09:33,521
failed to sort of implement an important

3478
03:09:30,940 --> 03:09:35,230
security feature that you need and this

3479
03:09:33,521 --> 03:09:36,260
has some subcategories which I'll sort

3480
03:09:35,230 --> 03:09:37,520
of talk about in

3481
03:09:36,260 --> 03:09:39,050
in a minute then we have

3482
03:09:37,520 --> 03:09:41,180
misunderstandings so they tried to

3483
03:09:39,050 --> 03:09:43,250
implement this some kind of security

3484
03:09:41,180 --> 03:09:44,630
feature but they you know just

3485
03:09:43,250 --> 03:09:46,370
misunderstood what to do with it or how

3486
03:09:44,630 --> 03:09:48,259
to use it and it just didn't didn't work

3487
03:09:46,370 --> 03:09:51,439
and then we have mistakes which are more

3488
03:09:48,260 --> 03:09:54,200
in the class of like you know getting a

3489
03:09:51,439 --> 03:09:57,950
not wrong somewhere or other kinds of

3490
03:09:54,200 --> 03:09:59,470
sort of you know error type details not

3491
03:09:57,950 --> 03:10:03,830
conceptual errors but more

3492
03:09:59,470 --> 03:10:06,979
implementation years okay so so what do

3493
03:10:03,830 --> 03:10:08,149
we find out so so far I will add that

3494
03:10:06,979 --> 03:10:10,550
everything takes a little longer than

3495
03:10:08,149 --> 03:10:11,990
you expect so we we're not 100% done

3496
03:10:10,550 --> 03:10:16,759
with this analysis for we're getting

3497
03:10:11,990 --> 03:10:18,680
close so far we're finding that non

3498
03:10:16,760 --> 03:10:21,410
attempts are more common the mistakes

3499
03:10:18,680 --> 03:10:23,270
are and also that misunderstandings are

3500
03:10:21,410 --> 03:10:24,770
more common than mistakes are this was

3501
03:10:23,270 --> 03:10:27,819
sort of surprising to me I was expecting

3502
03:10:24,770 --> 03:10:31,100
mistakes to sort of be the overwhelming

3503
03:10:27,819 --> 03:10:32,590
majority of these problems within these

3504
03:10:31,100 --> 03:10:35,930
categories we're also finding that

3505
03:10:32,590 --> 03:10:38,630
implicit is is more common than obvious

3506
03:10:35,930 --> 03:10:41,240
so so what we mean here is we're

3507
03:10:38,630 --> 03:10:43,039
defining obvious as sort of it's called

3508
03:10:41,240 --> 03:10:45,319
out in the spec right it's called out in

3509
03:10:43,040 --> 03:10:47,359
the spec that the content of the log

3510
03:10:45,319 --> 03:10:48,890
file needs to be secret and therefore if

3511
03:10:47,359 --> 03:10:50,529
you don't even try to do any encryption

3512
03:10:48,890 --> 03:10:52,849
or encoding on it that's an obvious one

3513
03:10:50,529 --> 03:10:54,410
implicit are sort of not doing a

3514
03:10:52,850 --> 03:10:56,510
security features that you need but you

3515
03:10:54,410 --> 03:10:58,250
may it may be less clear that you need

3516
03:10:56,510 --> 03:11:00,590
it so if you're not authenticating the

3517
03:10:58,250 --> 03:11:01,910
log file such that people can sort of

3518
03:11:00,590 --> 03:11:02,450
overwrite parts of it without being

3519
03:11:01,910 --> 03:11:05,020
detected

3520
03:11:02,450 --> 03:11:07,250
then that's more of an implicit mistake

3521
03:11:05,020 --> 03:11:09,590
we're also finding that conceptual

3522
03:11:07,250 --> 03:11:11,660
errors are more common than bad choices

3523
03:11:09,590 --> 03:11:12,260
so bad choices here are sort of among

3524
03:11:11,660 --> 03:11:14,539
other things

3525
03:11:12,260 --> 03:11:16,609
choosing weak algorithm or just like

3526
03:11:14,540 --> 03:11:18,470
making a bad choice about what kind of

3527
03:11:16,609 --> 03:11:20,029
security primitives to use as opposed to

3528
03:11:18,470 --> 03:11:21,949
a conceptual error you know making a

3529
03:11:20,029 --> 03:11:23,660
good choice of a thing to use but then

3530
03:11:21,950 --> 03:11:28,550
making a mistake in sort of how to use

3531
03:11:23,660 --> 03:11:30,830
it across the problems we found that for

3532
03:11:28,550 --> 03:11:32,990
the secure server so the key value store

3533
03:11:30,830 --> 03:11:35,029
mistakes were most common and the ATM

3534
03:11:32,990 --> 03:11:36,920
mistakes were second most common and

3535
03:11:35,029 --> 03:11:39,260
this is sort of an order of the

3536
03:11:36,920 --> 03:11:40,700
complexity of the spec so the the key

3537
03:11:39,260 --> 03:11:43,100
value store has like a lot of little

3538
03:11:40,700 --> 03:11:46,040
nitpicky details to try to get right and

3539
03:11:43,100 --> 03:11:48,020
the ATM is sort of medium complexity we

3540
03:11:46,040 --> 03:11:49,311
also found lots of implicit issues and

3541
03:11:48,020 --> 03:11:51,711
conceptual errors in the

3542
03:11:49,311 --> 03:11:53,660
a TM problem which has sort of a lot of

3543
03:11:51,711 --> 03:11:55,131
unstated requirements in terms of secure

3544
03:11:53,660 --> 03:11:57,021
communication across the network there's

3545
03:11:55,131 --> 03:11:58,990
lots of things you might not realize you

3546
03:11:57,021 --> 03:12:02,570
have to do like protect against replay

3547
03:11:58,990 --> 03:12:04,011
and we found lots of bad choices in the

3548
03:12:02,570 --> 03:12:05,541
secure log problem I don't really have a

3549
03:12:04,011 --> 03:12:07,791
handy explanation for why that happened

3550
03:12:05,541 --> 03:12:10,189
but we'll look into it some more and see

3551
03:12:07,791 --> 03:12:14,801
what you come up with so let's look at

3552
03:12:10,190 --> 03:12:18,230
some examples so in the set of sort of

3553
03:12:14,801 --> 03:12:21,439
obvious mistakes we of course saw some

3554
03:12:18,230 --> 03:12:22,881
people just not do any encryption or in

3555
03:12:21,440 --> 03:12:24,711
the case of the key values or just

3556
03:12:22,881 --> 03:12:27,171
basically not implementing any access

3557
03:12:24,711 --> 03:12:28,971
control they're sort of not not a whole

3558
03:12:27,171 --> 03:12:30,381
lot to learn there I guess except that

3559
03:12:28,971 --> 03:12:33,320
you know if you don't try to have

3560
03:12:30,381 --> 03:12:35,421
security you're not going to have any on

3561
03:12:33,320 --> 03:12:38,061
the other hand the implicit ones which

3562
03:12:35,421 --> 03:12:39,681
were more common in this class we saw a

3563
03:12:38,061 --> 03:12:41,631
bunch of things like side channels in

3564
03:12:39,681 --> 03:12:44,271
terms of the length of the messages in

3565
03:12:41,631 --> 03:12:45,921
the ATM problem people not having any

3566
03:12:44,271 --> 03:12:48,681
any kind of Mac or any kind of

3567
03:12:45,921 --> 03:12:51,561
authentication code not having nonces in

3568
03:12:48,681 --> 03:12:54,471
the access control problem not checking

3569
03:12:51,561 --> 03:12:56,660
the entire chain of delegation so you

3570
03:12:54,471 --> 03:12:57,949
know if be delegated to C then we're

3571
03:12:56,660 --> 03:12:59,601
just going to allow us to access it

3572
03:12:57,950 --> 03:13:01,221
without checking whether B sort of had

3573
03:12:59,601 --> 03:13:01,641
permission to access it in the first

3574
03:13:01,221 --> 03:13:04,551
place

3575
03:13:01,641 --> 03:13:07,580
alright so kind of missing some of those

3576
03:13:04,551 --> 03:13:08,689
points there where I think this gets the

3577
03:13:07,580 --> 03:13:09,410
most interesting is where we start

3578
03:13:08,690 --> 03:13:12,501
getting into some of these

3579
03:13:09,410 --> 03:13:14,780
misunderstandings so we have bad choices

3580
03:13:12,501 --> 03:13:18,830
so we have weak encryption algorithms

3581
03:13:14,780 --> 03:13:20,271
right we had one team use WEP in 2016 I

3582
03:13:18,830 --> 03:13:22,480
don't have an explanation for that but

3583
03:13:20,271 --> 03:13:28,421
sure

3584
03:13:22,480 --> 03:13:31,820
we had people using sort of unconnect

3585
03:13:28,421 --> 03:13:35,061
essentially a non key hash to check the

3586
03:13:31,820 --> 03:13:37,279
validity of the log file before they

3587
03:13:35,061 --> 03:13:39,681
read it back you can easily see why this

3588
03:13:37,280 --> 03:13:41,450
is why this is not gonna work and we did

3589
03:13:39,681 --> 03:13:44,570
have sort of a few cases of people I'm

3590
03:13:41,450 --> 03:13:47,690
still using stir coffee so sad ok but

3591
03:13:44,570 --> 03:13:50,391
where this sort of is you know these

3592
03:13:47,690 --> 03:13:51,740
conceptual errors I think are much

3593
03:13:50,391 --> 03:13:54,440
washing so we had a bunch of people do

3594
03:13:51,740 --> 03:13:57,021
things like only macking a line at a

3595
03:13:54,440 --> 03:13:58,940
time in the log file so you can just

3596
03:13:57,021 --> 03:14:00,380
sort of reorder the lines in the log or

3597
03:13:58,940 --> 03:14:02,021
just delete one and

3598
03:14:00,380 --> 03:14:04,490
and tamper with it with nobody noticing

3599
03:14:02,021 --> 03:14:06,440
we had people doing things like macking

3600
03:14:04,490 --> 03:14:09,681
the key instead of the actual log data

3601
03:14:06,440 --> 03:14:11,721
itself we've had several instances

3602
03:14:09,681 --> 03:14:14,030
actually if people you trying to use TLS

3603
03:14:11,721 --> 03:14:15,801
so the only like the most successful

3604
03:14:14,030 --> 03:14:18,650
version of the ATM program we had used

3605
03:14:15,801 --> 03:14:20,029
TLS so use existing protocols don't

3606
03:14:18,650 --> 03:14:22,340
don't build your own turns out to

3607
03:14:20,030 --> 03:14:23,480
actually be good advice that we've sort

3608
03:14:22,340 --> 03:14:25,910
of been telling people for a long time

3609
03:14:23,480 --> 03:14:27,801
but we had a few people try to do this

3610
03:14:25,910 --> 03:14:30,170
but without using client authentication

3611
03:14:27,801 --> 03:14:32,119
so basically anybody who wanted to set

3612
03:14:30,170 --> 03:14:34,630
themselves up as an ATM was able to sort

3613
03:14:32,120 --> 03:14:39,410
of talk to the bank and and have

3614
03:14:34,630 --> 03:14:41,301
transactions go through so not great we

3615
03:14:39,410 --> 03:14:44,511
also saw lots of cases of sort of

3616
03:14:41,301 --> 03:14:46,699
mistakes using libraries so only one

3617
03:14:44,511 --> 03:14:48,500
team actually tried to use a library in

3618
03:14:46,700 --> 03:14:50,030
the access control problem there's not a

3619
03:14:48,500 --> 03:14:52,130
lot of libraries sort of out there to do

3620
03:14:50,030 --> 03:14:54,620
that and they found one that sort of did

3621
03:14:52,130 --> 03:14:56,449
the right thing except that it was not

3622
03:14:54,620 --> 03:14:58,670
able to handle loops in the delegation

3623
03:14:56,450 --> 03:14:59,870
list and they didn't realize I guess

3624
03:14:58,670 --> 03:15:01,280
that the library couldn't handle the

3625
03:14:59,870 --> 03:15:04,070
loops and so that sort of introduced a

3626
03:15:01,280 --> 03:15:06,320
vulnerability for them one that I think

3627
03:15:04,070 --> 03:15:08,150
is really interesting is in the log

3628
03:15:06,320 --> 03:15:10,851
problem this one team used something

3629
03:15:08,150 --> 03:15:12,590
called SQL cipher which is designed to

3630
03:15:10,851 --> 03:15:14,061
basically build in all of the encryption

3631
03:15:12,590 --> 03:15:16,551
and macking and everything else for you

3632
03:15:14,061 --> 03:15:19,160
to sort of store some stuff securely in

3633
03:15:16,551 --> 03:15:21,410
a database and if you just use it sort

3634
03:15:19,160 --> 03:15:23,660
of as default Lee setup it will do the

3635
03:15:21,410 --> 03:15:25,490
right thing however this team actually

3636
03:15:23,660 --> 03:15:28,340
explicitly went and set a flag to turn

3637
03:15:25,490 --> 03:15:29,721
off the Mac in using this library and

3638
03:15:28,340 --> 03:15:31,880
you're going why would they do that

3639
03:15:29,721 --> 03:15:33,350
right what on earth what would you know

3640
03:15:31,880 --> 03:15:34,760
motivate them to do that sort of thing

3641
03:15:33,351 --> 03:15:37,271
and as best we can tell from sort of

3642
03:15:34,761 --> 03:15:40,580
reconstructing their commits and like

3643
03:15:37,271 --> 03:15:42,561
doing some googling it appears that they

3644
03:15:40,580 --> 03:15:44,570
got a weird error message in trying to

3645
03:15:42,561 --> 03:15:46,490
make this thing work and in the

3646
03:15:44,570 --> 03:15:48,681
documentation it says you know this Mac

3647
03:15:46,490 --> 03:15:52,789
was sort of added as a feature in a in

3648
03:15:48,681 --> 03:15:54,230
some version of the sequel cipher thing

3649
03:15:52,790 --> 03:15:55,940
and so it says you know if you're using

3650
03:15:54,230 --> 03:15:58,189
this older version you can turn off this

3651
03:15:55,940 --> 03:15:59,660
thing in order to have backwards

3652
03:15:58,190 --> 03:16:01,790
compatibility basically and they got

3653
03:15:59,660 --> 03:16:03,380
this mysterious error message couldn't

3654
03:16:01,790 --> 03:16:05,690
figure out what to do with it found some

3655
03:16:03,380 --> 03:16:06,770
you know post on Stack Overflow or

3656
03:16:05,690 --> 03:16:08,030
something that said you can turn this

3657
03:16:06,771 --> 03:16:11,210
off and that's what they did

3658
03:16:08,030 --> 03:16:14,190
right so we will see this this sort of

3659
03:16:11,210 --> 03:16:16,439
theme come up again

3660
03:16:14,190 --> 03:16:19,080
we also saw lots of cases related to

3661
03:16:16,440 --> 03:16:21,320
randomness so we saw people using fixed

3662
03:16:19,080 --> 03:16:24,030
instead of random hard-coding aqui

3663
03:16:21,320 --> 03:16:26,039
hard-coding an IV when it's and

3664
03:16:24,030 --> 03:16:29,521
hard-coding a password these kinds of

3665
03:16:26,040 --> 03:16:31,830
things so one in one case we actually

3666
03:16:29,521 --> 03:16:34,080
let me zoom in on that a little bit had

3667
03:16:31,830 --> 03:16:36,811
one instance of a team using the this is

3668
03:16:34,080 --> 03:16:39,721
an IV four five six this comes directly

3669
03:16:36,811 --> 03:16:41,520
from the documentation and was also

3670
03:16:39,721 --> 03:16:44,039
copied from the documentation into a

3671
03:16:41,521 --> 03:16:46,740
stack overflow post about using the same

3672
03:16:44,040 --> 03:16:48,271
thing so this is a combination of sort

3673
03:16:46,740 --> 03:16:50,101
of the documentation not telling you

3674
03:16:48,271 --> 03:16:52,170
that this is not a thing that you should

3675
03:16:50,101 --> 03:16:53,641
use a static value for and then Stack

3676
03:16:52,170 --> 03:16:57,301
Overflow kind of exacerbating the

3677
03:16:53,641 --> 03:16:59,160
problem so so a couple of years ago some

3678
03:16:57,301 --> 03:17:01,740
some colleagues and I actually I think

3679
03:16:59,160 --> 03:17:03,721
he has been spoke about this maybe last

3680
03:17:01,740 --> 03:17:05,130
year did sort of a study on problems

3681
03:17:03,721 --> 03:17:06,570
with Stack Overflow related to security

3682
03:17:05,130 --> 03:17:07,619
so it's always nice to see these things

3683
03:17:06,570 --> 03:17:10,650
that you're doing sort of come back

3684
03:17:07,620 --> 03:17:13,920
again so so that doesn't work too well

3685
03:17:10,650 --> 03:17:15,721
we also saw some instances of people

3686
03:17:13,920 --> 03:17:17,700
trying to use randomness but like sort

3687
03:17:15,721 --> 03:17:19,341
of not quite having enough of it so

3688
03:17:17,700 --> 03:17:21,690
having a nonce that could overflow

3689
03:17:19,341 --> 03:17:23,761
having an IV that just sort of counts up

3690
03:17:21,690 --> 03:17:26,940
predictably you know not in a mode where

3691
03:17:23,761 --> 03:17:28,561
you're supposed to do that and having

3692
03:17:26,940 --> 03:17:30,391
things like a timestamp window too large

3693
03:17:28,561 --> 03:17:33,391
so sort of the extreme example of that

3694
03:17:30,391 --> 03:17:35,190
was was checking sort of the timestamp

3695
03:17:33,391 --> 03:17:36,811
that it was the same day so as long as

3696
03:17:35,190 --> 03:17:39,391
you replayed your message to the bank on

3697
03:17:36,811 --> 03:17:40,830
the same day then it would go through

3698
03:17:39,391 --> 03:17:42,000
but if you waited until tomorrow it

3699
03:17:40,830 --> 03:17:43,801
wasn't gonna work there were other

3700
03:17:42,000 --> 03:17:45,360
instances where the timestamp was

3701
03:17:43,801 --> 03:17:49,010
smaller but still sort of not small

3702
03:17:45,360 --> 03:17:54,960
enough all these kinds of concept errors

3703
03:17:49,011 --> 03:17:57,721
and then we had a bunch of instances of

3704
03:17:54,960 --> 03:18:00,359
mistakes so we saw things like a whole

3705
03:17:57,721 --> 03:18:02,250
bunch of nested conditionals and working

3706
03:18:00,360 --> 03:18:03,540
sort of the knot on one of them so that

3707
03:18:02,250 --> 03:18:05,431
the conditional sort of went the wrong

3708
03:18:03,540 --> 03:18:07,650
way we've seen that happen in sort of

3709
03:18:05,431 --> 03:18:10,141
real-world code plenty of times right

3710
03:18:07,650 --> 03:18:11,820
things like uncaught exceptions or

3711
03:18:10,141 --> 03:18:14,221
ignored errors so we had several cases

3712
03:18:11,820 --> 03:18:16,440
of people like very carefully checking

3713
03:18:14,221 --> 03:18:19,020
the nonce to see that there was a replay

3714
03:18:16,440 --> 03:18:20,521
and then detecting it and then just

3715
03:18:19,021 --> 03:18:23,160
nothing happening with the error so

3716
03:18:20,521 --> 03:18:24,450
everything just sort of kept on going as

3717
03:18:23,160 --> 03:18:27,000
though the error had sort of not

3718
03:18:24,450 --> 03:18:29,070
happened you know other common sorts of

3719
03:18:27,000 --> 03:18:31,530
things like null pointers and other you

3720
03:18:29,070 --> 03:18:35,340
know memory related issues that you

3721
03:18:31,530 --> 03:18:37,350
might find so these are sort of some of

3722
03:18:35,340 --> 03:18:41,010
the types of things that that we found

3723
03:18:37,350 --> 03:18:42,690
so in terms of you know okay so so these

3724
03:18:41,010 --> 03:18:43,950
are like fun stories but what can we

3725
03:18:42,690 --> 03:18:47,310
actually sort of do with this

3726
03:18:43,950 --> 03:18:48,990
information or what you do well this is

3727
03:18:47,310 --> 03:18:50,070
sort of a drum that I know lots of

3728
03:18:48,990 --> 03:18:52,770
people have been beating for awhile you

3729
03:18:50,070 --> 03:18:55,380
know improving the abstraction levels in

3730
03:18:52,770 --> 03:18:57,690
our api's and I know we've the community

3731
03:18:55,380 --> 03:19:00,300
is like making a lot of progress in this

3732
03:18:57,690 --> 03:19:02,370
area you know trying to get away from

3733
03:19:00,300 --> 03:19:03,960
asking the developer to make lots of

3734
03:19:02,370 --> 03:19:05,130
decisions about what encryption mode to

3735
03:19:03,960 --> 03:19:07,080
use and things like that

3736
03:19:05,130 --> 03:19:08,970
where they can make a lot of mistakes I

3737
03:19:07,080 --> 03:19:11,630
think we just have to go like even

3738
03:19:08,970 --> 03:19:14,880
further in this direction we have to go

3739
03:19:11,630 --> 03:19:18,449
to sort of semantic primitives so not

3740
03:19:14,880 --> 03:19:19,830
even like and and again some some

3741
03:19:18,450 --> 03:19:21,060
libraries are sort of going in this

3742
03:19:19,830 --> 03:19:23,100
direction already but we need to go you

3743
03:19:21,060 --> 03:19:24,480
know even further what are the sort of

3744
03:19:23,100 --> 03:19:26,340
semantic classes of things that you

3745
03:19:24,480 --> 03:19:27,960
might like to have well maybe a secure

3746
03:19:26,340 --> 03:19:29,310
log as an example of a semantic class

3747
03:19:27,960 --> 03:19:32,099
you might have and you would want to

3748
03:19:29,310 --> 03:19:34,439
just have a library or an API that does

3749
03:19:32,100 --> 03:19:37,590
that or semantics classes of like

3750
03:19:34,440 --> 03:19:39,900
sending secure messaging that might you

3751
03:19:37,590 --> 03:19:44,430
know remind you about things like

3752
03:19:39,900 --> 03:19:46,140
client-side authentication as well also

3753
03:19:44,430 --> 03:19:48,600
improving documentation right so

3754
03:19:46,140 --> 03:19:50,490
clarifying which parts of the example

3755
03:19:48,600 --> 03:19:52,530
you are and are not supposed to copy and

3756
03:19:50,490 --> 03:19:54,000
paste this will sort of only get you so

3757
03:19:52,530 --> 03:19:55,680
far because people will just paste it

3758
03:19:54,000 --> 03:19:57,930
anyway but it would be nice to at least

3759
03:19:55,680 --> 03:19:59,270
like include a note in there that that's

3760
03:19:57,930 --> 03:20:02,970
not a great idea

3761
03:19:59,270 --> 03:20:04,770
mysterious error messages you know when

3762
03:20:02,970 --> 03:20:05,880
you have these mysterious error messages

3763
03:20:04,770 --> 03:20:07,710
that people don't know how to cope with

3764
03:20:05,880 --> 03:20:09,689
this is when they end up at Stack

3765
03:20:07,710 --> 03:20:12,359
Overflow and then many more bad things

3766
03:20:09,690 --> 03:20:14,310
sort of happen from there and then other

3767
03:20:12,360 --> 03:20:16,350
kinds of sort of tools and automation so

3768
03:20:14,310 --> 03:20:18,330
there's some some cool work coming from

3769
03:20:16,350 --> 03:20:20,520
from Sarah Nadia and her colleagues

3770
03:20:18,330 --> 03:20:21,990
about sort of wizards right like what

3771
03:20:20,520 --> 03:20:24,000
are you trying to do oh I'm trying to

3772
03:20:21,990 --> 03:20:25,560
have secure communications do you need

3773
03:20:24,000 --> 03:20:26,730
to authenticate on the client-side you

3774
03:20:25,560 --> 03:20:28,230
need to authenticate on the server-side

3775
03:20:26,730 --> 03:20:30,000
right so sort of walking people

3776
03:20:28,230 --> 03:20:31,740
step-by-step through what are the so

3777
03:20:30,000 --> 03:20:34,590
this goes with this sort of semantic

3778
03:20:31,740 --> 03:20:35,880
primitives idea a similar idea coming

3779
03:20:34,590 --> 03:20:37,710
out of software engineering a sort of

3780
03:20:35,880 --> 03:20:39,839
API misuse detection sort of at a

3781
03:20:37,710 --> 03:20:41,789
semantic level right so

3782
03:20:39,840 --> 03:20:44,070
I mean which is not to say that we don't

3783
03:20:41,790 --> 03:20:45,601
still need analysis tools to like fine

3784
03:20:44,070 --> 03:20:47,880
buffer overflows and things but we need

3785
03:20:45,601 --> 03:20:51,540
to be able to find some of these kinds

3786
03:20:47,880 --> 03:20:53,880
of semantic errors as I mentioned we

3787
03:20:51,540 --> 03:20:56,221
have some more analysis coming soon so

3788
03:20:53,880 --> 03:20:57,600
we you'll notice I mentioned that we

3789
03:20:56,221 --> 03:20:59,609
coded a lot of other kinds of features

3790
03:20:57,601 --> 03:21:01,521
and then didn't talk about them so the

3791
03:20:59,610 --> 03:21:04,500
analysis relating things like modularity

3792
03:21:01,521 --> 03:21:06,450
quality of comments and language used to

3793
03:21:04,500 --> 03:21:10,380
the types of vulnerabilities that were

3794
03:21:06,450 --> 03:21:12,240
found is is coming soon also we're

3795
03:21:10,380 --> 03:21:13,859
looking at not just what caused the

3796
03:21:12,240 --> 03:21:16,351
vulnerabilities to happen but sort of

3797
03:21:13,860 --> 03:21:18,450
what made teams more likely to identify

3798
03:21:16,351 --> 03:21:21,570
the vulnerability is more teams more

3799
03:21:18,450 --> 03:21:23,490
frequently and we're also hoping that we

3800
03:21:21,570 --> 03:21:25,681
can get from this some additional

3801
03:21:23,490 --> 03:21:27,570
insights into how to continue fixing

3802
03:21:25,681 --> 03:21:29,820
sort of the design of the contest in the

3803
03:21:27,570 --> 03:21:32,610
incentives to keep pushing this thing a

3804
03:21:29,820 --> 03:21:34,351
little bit closer toward realism as we

3805
03:21:32,610 --> 03:21:36,150
go you know it's never going to be

3806
03:21:34,351 --> 03:21:42,960
completely real but trying to get it as

3807
03:21:36,150 --> 03:21:45,660
close as we can as we can get it and so

3808
03:21:42,960 --> 03:21:48,539
overall you know understanding developer

3809
03:21:45,660 --> 03:21:50,400
errors and sort of why they arise can be

3810
03:21:48,540 --> 03:21:51,931
pretty tricky there's not really any

3811
03:21:50,400 --> 03:21:53,160
perfect way to do it but there are a lot

3812
03:21:51,931 --> 03:21:55,320
of different ways to get sort of

3813
03:21:53,160 --> 03:21:57,360
different lenses on the problem we think

3814
03:21:55,320 --> 03:21:59,311
that the Builder break it fix it contest

3815
03:21:57,360 --> 03:22:01,050
is sort of one useful point in this

3816
03:21:59,311 --> 03:22:04,199
trade-off space for trying to understand

3817
03:22:01,050 --> 03:22:06,240
how these mistakes happen we found that

3818
03:22:04,200 --> 03:22:08,670
a lot of these vulnerabilities came from

3819
03:22:06,240 --> 03:22:10,860
sort of nuanced security properties so

3820
03:22:08,670 --> 03:22:12,450
we you know not as many mistakes not as

3821
03:22:10,860 --> 03:22:14,700
many people just ignoring security

3822
03:22:12,450 --> 03:22:16,830
entirely at least in the context Kondos

3823
03:22:14,700 --> 03:22:18,740
environment but lots of sort of

3824
03:22:16,830 --> 03:22:20,761
misunderstandings and conceptual errors

3825
03:22:18,740 --> 03:22:22,561
lots of non understanding how

3826
03:22:20,761 --> 03:22:23,790
authentication works speaking as a

3827
03:22:22,561 --> 03:22:27,630
person who teaches an undergraduate

3828
03:22:23,790 --> 03:22:29,610
security class the you know encryption

3829
03:22:27,630 --> 03:22:33,240
part everybody basically understands the

3830
03:22:29,610 --> 03:22:34,590
authentication part nope that's that's

3831
03:22:33,240 --> 03:22:38,580
pretty consistent so this is sort of

3832
03:22:34,590 --> 03:22:40,320
maybe not too surprising and you know

3833
03:22:38,580 --> 03:22:42,271
abstractions and documentation matters

3834
03:22:40,320 --> 03:22:43,681
so as I mentioned I guess Yasmin was

3835
03:22:42,271 --> 03:22:44,340
here last year talking about some of

3836
03:22:43,681 --> 03:22:47,040
this stuff

3837
03:22:44,340 --> 03:22:48,420
it's nice to see that some of the same

3838
03:22:47,040 --> 03:22:50,221
problems we've been finding in our lab

3839
03:22:48,420 --> 03:22:52,771
studies about abstraction levels and

3840
03:22:50,221 --> 03:22:54,660
documentation show up in this kind of

3841
03:22:52,771 --> 03:22:56,780
study as well which gives me some hope

3842
03:22:54,660 --> 03:22:59,011
that these lab studies are you know

3843
03:22:56,780 --> 03:23:01,251
actually reflecting at least some

3844
03:22:59,011 --> 03:23:04,650
realistic conditions which is nice

3845
03:23:01,251 --> 03:23:07,080
finally I have sort of one thing to plug

3846
03:23:04,650 --> 03:23:08,551
here my students you know we've been

3847
03:23:07,080 --> 03:23:10,110
doing a lot of work on this sort of

3848
03:23:08,551 --> 03:23:11,990
security for developers and

3849
03:23:10,110 --> 03:23:14,671
professionals and we're putting together

3850
03:23:11,990 --> 03:23:18,001
essentially a research panel so this is

3851
03:23:14,671 --> 03:23:19,830
people who work on either programming

3852
03:23:18,001 --> 03:23:21,841
our security in some capacity and agree

3853
03:23:19,830 --> 03:23:23,730
to sort of get an email from us maybe

3854
03:23:21,841 --> 03:23:26,280
once every three months and really not a

3855
03:23:23,730 --> 03:23:27,480
ton of them I promise at asking you if

3856
03:23:26,280 --> 03:23:29,820
you would like to be part of a study

3857
03:23:27,480 --> 03:23:32,369
that we're working on especially you

3858
03:23:29,820 --> 03:23:33,779
know people who sort of do security

3859
03:23:32,370 --> 03:23:36,540
stuff in the real world we would love to

3860
03:23:33,780 --> 03:23:39,570
have you in our panel so this is the

3861
03:23:36,540 --> 03:23:43,561
that's the the short website for it at

3862
03:23:39,570 --> 03:23:45,181
te RDS - to get some information to join

3863
03:23:43,561 --> 03:23:47,820
the panel or you can come find me

3864
03:23:45,181 --> 03:23:49,230
afterwards and I will you know stand you

3865
03:23:47,820 --> 03:23:52,020
in front of my laptop and watch you sign

3866
03:23:49,230 --> 03:23:56,580
up for it we can we can do that - we'd

3867
03:23:52,021 --> 03:23:59,311
love to have you for that and that is oh

3868
03:23:56,580 --> 03:24:01,711
and I should thank all of my fabulous

3869
03:23:59,311 --> 03:24:03,181
collaborators on this work especially as

3870
03:24:01,711 --> 03:24:04,410
I said the very patient grad students

3871
03:24:03,181 --> 03:24:08,280
who've been coming through all of this

3872
03:24:04,410 --> 03:24:10,351
code and also our our funding agencies

3873
03:24:08,280 --> 03:24:12,931
NSF and NIST and this has also been

3874
03:24:10,351 --> 03:24:15,061
supported by a research award from

3875
03:24:12,931 --> 03:24:15,820
Google so thanks a lot happy to take

3876
03:24:15,061 --> 03:24:19,649
questions

3877
03:24:15,820 --> 03:24:19,649
[Applause]

3878
03:24:23,601 --> 03:24:28,530
so we do actually have a few minutes for

3879
03:24:26,011 --> 03:24:31,381
questions dan you were first

3880
03:24:28,530 --> 03:24:33,391
are you finding any impact of Education

3881
03:24:31,381 --> 03:24:34,801
like if you split the group up into

3882
03:24:33,391 --> 03:24:36,961
people who have taken a crypto class

3883
03:24:34,801 --> 03:24:39,990
versus people who haven't so you finding

3884
03:24:36,961 --> 03:24:43,350
any differences so that is one of the

3885
03:24:39,990 --> 03:24:45,541
coming soon' items I we did a little bit

3886
03:24:43,351 --> 03:24:47,221
of that in the so in the CCS paper we

3887
03:24:45,541 --> 03:24:50,041
did some sort of initial high level

3888
03:24:47,221 --> 03:24:53,581
analysis and we didn't immediately find

3889
03:24:50,041 --> 03:24:54,090
it but we're gonna we're gonna try it

3890
03:24:53,581 --> 03:24:55,831
again

3891
03:24:54,091 --> 03:24:58,431
in some of the lab studies that that

3892
03:24:55,831 --> 03:25:01,801
I've done we sort of found it like

3893
03:24:58,431 --> 03:25:04,711
having more experience in programming in

3894
03:25:01,801 --> 03:25:07,410
general didn't help having more security

3895
03:25:04,711 --> 03:25:09,541
experience helped like a very tiny

3896
03:25:07,410 --> 03:25:11,851
amount like it didn't quite reach

3897
03:25:09,541 --> 03:25:14,250
physical significance amount we'll see

3898
03:25:11,851 --> 03:25:16,110
in in this case it's a little hard to

3899
03:25:14,251 --> 03:25:18,121
judge with the with the contest because

3900
03:25:16,110 --> 03:25:20,101
teams have like you know up to six

3901
03:25:18,121 --> 03:25:22,141
people on them and it's a little hard to

3902
03:25:20,101 --> 03:25:23,521
control for like on this team one guy

3903
03:25:22,141 --> 03:25:24,990
did all the stuff for us on that other

3904
03:25:23,521 --> 03:25:27,660
team they actually sort of split it up

3905
03:25:24,990 --> 03:25:30,030
evenly so it's it's one of the you know

3906
03:25:27,660 --> 03:25:31,200
less great parts of sort of the

3907
03:25:30,030 --> 03:25:38,190
trade-off in doing that measurement

3908
03:25:31,200 --> 03:25:40,950
thank you thanks thanks hello hi yes so

3909
03:25:38,190 --> 03:25:43,650
where are you classifying errors of this

3910
03:25:40,950 --> 03:25:45,900
type we're in now you mentioned one case

3911
03:25:43,650 --> 03:25:47,609
where if there is an error condition the

3912
03:25:45,900 --> 03:25:50,070
code is going via the wrong path but

3913
03:25:47,610 --> 03:25:53,341
that could leak some timing information

3914
03:25:50,070 --> 03:25:55,230
why don't we flag record the error right

3915
03:25:53,341 --> 03:25:57,121
junk information into the buffer and

3916
03:25:55,230 --> 03:25:58,859
allow the protocol to fall through and

3917
03:25:57,121 --> 03:26:02,400
eventually fail so that timing

3918
03:25:58,860 --> 03:26:04,291
information is mitigated where is this

3919
03:26:02,400 --> 03:26:10,081
kind of information classified in your

3920
03:26:04,291 --> 03:26:12,121
list so so are you asking like about

3921
03:26:10,081 --> 03:26:14,190
that as an example in terms of how we're

3922
03:26:12,121 --> 03:26:16,500
citing the classifications or about that

3923
03:26:14,190 --> 03:26:18,150
one specifically no just one examples

3924
03:26:16,501 --> 03:26:21,331
right so I mean I think there's no

3925
03:26:18,150 --> 03:26:23,820
perfect classification for this we came

3926
03:26:21,331 --> 03:26:25,711
up with a pretty detailed codebook so

3927
03:26:23,820 --> 03:26:27,391
the the qualitative sort of coding

3928
03:26:25,711 --> 03:26:30,001
standard process for this thing is that

3929
03:26:27,391 --> 03:26:31,591
you have several independent coders you

3930
03:26:30,001 --> 03:26:34,410
come up with a codebook you set sort of

3931
03:26:31,591 --> 03:26:36,660
boundary conditions which are sort of

3932
03:26:34,410 --> 03:26:37,980
well-defined so so in the paper that

3933
03:26:36,660 --> 03:26:39,240
eventually right they'll sort of be more

3934
03:26:37,980 --> 03:26:41,369
clearly defined than they were in the

3935
03:26:39,240 --> 03:26:43,949
talk and then you go through a bunch of

3936
03:26:41,370 --> 03:26:45,601
rounds of multiple coders sort of

3937
03:26:43,950 --> 03:26:48,180
independently grading the same thing and

3938
03:26:45,601 --> 03:26:50,641
coming to agreement and it took in this

3939
03:26:48,180 --> 03:26:52,170
case because these categories are pretty

3940
03:26:50,641 --> 03:26:55,109
hard to nail down so it took us many

3941
03:26:52,170 --> 03:26:56,430
rounds to find them but event and to

3942
03:26:55,110 --> 03:26:59,550
reach our agreement but eventually we

3943
03:26:56,430 --> 03:27:01,110
hit sort of very high levels of inter

3944
03:26:59,550 --> 03:27:02,460
coder agreement which is not to say that

3945
03:27:01,110 --> 03:27:03,750
there's not some other classification

3946
03:27:02,460 --> 03:27:06,000
you could also come up with but this is

3947
03:27:03,750 --> 03:27:09,021
the one that we sort of landed on okay

3948
03:27:06,000 --> 03:27:11,550
thank you thanks for the talk yeah oh

3949
03:27:09,021 --> 03:27:13,561
okay I was just wondering if there was

3950
03:27:11,550 --> 03:27:14,641
like a unified testing framework or

3951
03:27:13,561 --> 03:27:16,500
something that people used and if

3952
03:27:14,641 --> 03:27:20,940
there's any correlation between coverage

3953
03:27:16,500 --> 03:27:23,910
and security bugs right so so in terms

3954
03:27:20,940 --> 03:27:24,900
of the framework so so the way that this

3955
03:27:23,910 --> 03:27:26,910
works in the contest

3956
03:27:24,900 --> 03:27:29,490
is we have an Oracle implementation

3957
03:27:26,910 --> 03:27:32,190
which is sort of supposed to be

3958
03:27:29,490 --> 03:27:35,119
completely correct and so you sort of

3959
03:27:32,190 --> 03:27:38,190
submit a test case and the system runs

3960
03:27:35,120 --> 03:27:40,021
the offending code and then the Oracle

3961
03:27:38,190 --> 03:27:42,480
and checks sort of the outputs and and

3962
03:27:40,021 --> 03:27:43,710
sees are the same essentially yeah it's

3963
03:27:42,480 --> 03:27:44,910
a little sometimes a little more

3964
03:27:43,710 --> 03:27:47,759
complicated than that but that's sort of

3965
03:27:44,910 --> 03:27:49,619
the rough idea so that's kind of how we

3966
03:27:47,760 --> 03:27:52,410
test them at scale in terms of what the

3967
03:27:49,620 --> 03:27:56,220
teams were doing some of the teams built

3968
03:27:52,410 --> 03:27:57,811
out like it's pretty serious you know

3969
03:27:56,220 --> 03:27:59,520
testing things while they were trying to

3970
03:27:57,811 --> 03:28:02,340
build their own code other teams didn't

3971
03:27:59,521 --> 03:28:03,750
so that was sort of one of the one of

3972
03:28:02,340 --> 03:28:05,970
the categories that we quoted for was

3973
03:28:03,750 --> 03:28:10,021
like did they put together test cases

3974
03:28:05,970 --> 03:28:11,789
and if so how many of them and despite

3975
03:28:10,021 --> 03:28:13,320
valiant efforts my my grad student

3976
03:28:11,790 --> 03:28:15,271
didn't quite get that regression writing

3977
03:28:13,320 --> 03:28:17,311
yesterdays I don't know the answer to

3978
03:28:15,271 --> 03:28:19,410
that one yet but but I will soon and

3979
03:28:17,311 --> 03:28:22,380
hopefully coming to a paper near you

3980
03:28:19,410 --> 03:28:24,630
whether or not helped in the initial ccs

3981
03:28:22,380 --> 03:28:27,480
paper we checked for just at a high

3982
03:28:24,630 --> 03:28:29,789
level did they use any like automated

3983
03:28:27,480 --> 03:28:32,130
tools for static or dynamic analysis and

3984
03:28:29,790 --> 03:28:34,141
at that level it didn't make a

3985
03:28:32,130 --> 03:28:35,460
difference but it may matter when we're

3986
03:28:34,141 --> 03:28:39,330
able to sort of look at it in this more

3987
03:28:35,460 --> 03:28:42,391
granular way so two kind of interrelated

3988
03:28:39,330 --> 03:28:45,360
questions one is where the specs written

3989
03:28:42,391 --> 03:28:47,670
so as to like sort of limit error like

3990
03:28:45,360 --> 03:28:49,200
in a defensive way and also more Jen

3991
03:28:47,670 --> 03:28:53,670
have you looked at the relationship

3992
03:28:49,200 --> 03:28:58,920
between specs and the output yes so the

3993
03:28:53,670 --> 03:29:00,720
specs were written to be as clear as we

3994
03:28:58,920 --> 03:29:02,430
could make them I certainly think they

3995
03:29:00,720 --> 03:29:05,460
were probably far from perfect

3996
03:29:02,430 --> 03:29:08,010
especially the access control problem

3997
03:29:05,460 --> 03:29:09,599
that one was really complicated and I

3998
03:29:08,010 --> 03:29:11,100
think if we were going to do that one

3999
03:29:09,600 --> 03:29:12,360
again we would probably sort of revisit

4000
03:29:11,100 --> 03:29:15,840
the way the spec was written a little

4001
03:29:12,360 --> 03:29:19,400
bit so so to take one example in that

4002
03:29:15,840 --> 03:29:21,540
one for that problem we tried to support

4003
03:29:19,400 --> 03:29:23,939
availability errors so basically if you

4004
03:29:21,540 --> 03:29:25,650
could if you could create a situation

4005
03:29:23,939 --> 03:29:27,689
where the person who's authorized to

4006
03:29:25,650 --> 03:29:30,210
access the data can't get to it that was

4007
03:29:27,689 --> 03:29:31,350
graded as a security error but it turns

4008
03:29:30,210 --> 03:29:34,529
out that it was possible to sort of

4009
03:29:31,350 --> 03:29:36,600
upgrade some very basic like parsing the

4010
03:29:34,530 --> 03:29:37,979
input errors in to availability errors

4011
03:29:36,600 --> 03:29:40,050
and count them more than we originally

4012
03:29:37,979 --> 03:29:41,550
wanted to so it kind of messed up the

4013
03:29:40,050 --> 03:29:44,210
incentives of that version of the

4014
03:29:41,550 --> 03:29:46,529
contest a little bit so yeah there's a I

4015
03:29:44,210 --> 03:29:48,179
didn't go into it in this talk but like

4016
03:29:46,530 --> 03:29:49,560
trying to design the problems and then

4017
03:29:48,180 --> 03:29:51,570
put the specs together for the problems

4018
03:29:49,560 --> 03:29:54,060
is like is a huge amount of effort and

4019
03:29:51,570 --> 03:29:57,840
makes a big difference in the how well

4020
03:29:54,060 --> 03:29:59,340
the results turn out as someone who

4021
03:29:57,840 --> 03:30:01,380
teaches cryptography from time to time

4022
03:29:59,340 --> 03:30:03,780
yeah I sometimes feel like I'm fighting

4023
03:30:01,380 --> 03:30:05,640
a losing battle with Stack Overflow or

4024
03:30:03,780 --> 03:30:07,860
Stack Exchange

4025
03:30:05,640 --> 03:30:11,340
do you have any advice for me as an

4026
03:30:07,860 --> 03:30:15,780
educator yeah so I think we're probably

4027
03:30:11,340 --> 03:30:18,300
all fighting that battle but I think I

4028
03:30:15,780 --> 03:30:19,979
think it helps a little bit to sort of

4029
03:30:18,300 --> 03:30:21,599
point out that these things happen right

4030
03:30:19,979 --> 03:30:23,460
like maybe some of our especially some

4031
03:30:21,600 --> 03:30:26,670
of our students maybe it hasn't occurred

4032
03:30:23,460 --> 03:30:28,380
to them but like you know that that bad

4033
03:30:26,670 --> 03:30:29,729
things can happen if they sort of follow

4034
03:30:28,380 --> 03:30:32,820
the instructions that are in there but I

4035
03:30:29,729 --> 03:30:35,099
think really the the real answer is sort

4036
03:30:32,820 --> 03:30:37,110
of systemically we have to make the

4037
03:30:35,100 --> 03:30:40,320
documentation and the api's themselves

4038
03:30:37,110 --> 03:30:42,479
better because you're not going to stop

4039
03:30:40,320 --> 03:30:45,119
people from googling when they run into

4040
03:30:42,479 --> 03:30:47,970
a hard problem right and so what you

4041
03:30:45,120 --> 03:30:49,350
need is for like the error messages to

4042
03:30:47,970 --> 03:30:51,479
be more understandable and you need

4043
03:30:49,350 --> 03:30:53,160
things like when somebody Google's for a

4044
03:30:51,479 --> 03:30:55,890
specific weird error message you need to

4045
03:30:53,160 --> 03:30:57,720
get like the official documentation back

4046
03:30:55,890 --> 03:31:00,460
or something from a more authoritative

4047
03:30:57,720 --> 03:31:02,141
source instead of ending up

4048
03:31:00,460 --> 03:31:04,240
you know sort of at stackoverflow

4049
03:31:02,141 --> 03:31:05,471
instead all right so that's in the long

4050
03:31:04,240 --> 03:31:09,400
term that's the only thing that's gonna

4051
03:31:05,471 --> 03:31:12,279
fix it I think what Chris is sure is

4052
03:31:09,400 --> 03:31:14,859
your question will quick yeah okay thank

4053
03:31:12,280 --> 03:31:16,870
you that was cool how do you in how do

4054
03:31:14,860 --> 03:31:18,460
you what group of people are you after

4055
03:31:16,870 --> 03:31:21,580
for the study and how do you incentivize

4056
03:31:18,460 --> 03:31:25,510
that group to actually pert participate

4057
03:31:21,580 --> 03:31:28,721
for the contest yeah right so so the

4058
03:31:25,511 --> 03:31:30,670
first couple of rounds we did with in

4059
03:31:28,721 --> 03:31:32,561
two different ways so one of my

4060
03:31:30,670 --> 03:31:36,580
colleagues my kicks at Maryland was

4061
03:31:32,561 --> 03:31:38,801
teaching a Coursera class and the sort

4062
03:31:36,580 --> 03:31:41,440
of capstone of a security secrets in

4063
03:31:38,801 --> 03:31:44,500
Coursera was to basically participate in

4064
03:31:41,440 --> 03:31:46,900
this contest and so that was a nice

4065
03:31:44,500 --> 03:31:48,460
source of participants it had the nice

4066
03:31:46,900 --> 03:31:50,980
property of like most of those people

4067
03:31:48,460 --> 03:31:53,320
are sort of working programmers and not

4068
03:31:50,980 --> 03:31:54,430
like undergraduates we love them but

4069
03:31:53,320 --> 03:31:56,080
they're maybe not always the best

4070
03:31:54,431 --> 03:31:57,551
possible test case for this for this

4071
03:31:56,080 --> 03:31:59,320
kind of thing although we do actually

4072
03:31:57,551 --> 03:32:01,091
run this in our undergrad security class

4073
03:31:59,320 --> 03:32:02,561
a lot and so we haven't analyzed that

4074
03:32:01,091 --> 03:32:06,011
data but we we could look at that as

4075
03:32:02,561 --> 03:32:08,881
well we also sort of did an open contest

4076
03:32:06,011 --> 03:32:11,021
that we tried to advertise to sort of

4077
03:32:08,881 --> 03:32:12,580
everybody we could think of but we

4078
03:32:11,021 --> 03:32:15,280
didn't have a lot of great luck in

4079
03:32:12,580 --> 03:32:17,801
recruiting for that um so we're sort of

4080
03:32:15,280 --> 03:32:19,061
still revisiting if we're gonna do this

4081
03:32:17,801 --> 03:32:21,460
again where we're gonna get people from

4082
03:32:19,061 --> 03:32:22,811
so we've maybe been talking to you like

4083
03:32:21,460 --> 03:32:23,980
some companies about if they would like

4084
03:32:22,811 --> 03:32:26,080
to have some of their developers

4085
03:32:23,980 --> 03:32:27,210
participate as sort of a like a fun

4086
03:32:26,080 --> 03:32:30,011
exercise

4087
03:32:27,210 --> 03:32:31,061
yeah we've we're kicking around ways to

4088
03:32:30,011 --> 03:32:33,431
find more people because that's

4089
03:32:31,061 --> 03:32:35,770
definitely a weakness of the sort of

4090
03:32:33,431 --> 03:32:39,011
another point in sort of the trade-offs

4091
03:32:35,771 --> 03:32:40,650
basic yes thanks sorry we're out of time

4092
03:32:39,011 --> 03:32:43,181
aha so ask your ticket in the hallway

4093
03:32:40,650 --> 03:32:45,551
I'd like us to show our appreciation to

4094
03:32:43,181 --> 03:32:48,631
Michelle and Bailey and Chelsea and Josh

4095
03:32:45,551 --> 03:32:48,631
for an excellent session

4096
03:32:49,710 --> 03:32:53,480
and we'll see you all out there in a few

4097
03:32:52,780 --> 03:32:56,879
minutes for drinks

4098
03:32:53,480 --> 03:32:56,878
[Applause]

4099
03:34:38,540 --> 03:34:40,600
you

