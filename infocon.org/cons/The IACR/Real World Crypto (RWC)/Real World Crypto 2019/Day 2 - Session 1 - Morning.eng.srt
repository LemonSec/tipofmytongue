1
00:00:38,310 --> 00:00:42,540
and it's designed for 11 nines of

2
00:00:40,200 --> 00:00:44,970
durability and this is just one of a

3
00:00:42,540 --> 00:00:46,589
hundred of our services that when we

4
00:00:44,970 --> 00:00:49,050
think about building a key management

5
00:00:46,590 --> 00:00:51,930
service for how do customers encrypt

6
00:00:49,050 --> 00:00:55,080
their data within AWS

7
00:00:51,930 --> 00:00:58,440
that we take into effect of building it

8
00:00:55,080 --> 00:01:00,629
for scale so we designed kms to be the

9
00:00:58,440 --> 00:01:02,339
service that allows all our customers to

10
00:01:00,630 --> 00:01:06,120
control the encryption of their data

11
00:01:02,340 --> 00:01:08,790
within AWS and providing them with

12
00:01:06,120 --> 00:01:11,910
separate access control mechanisms from

13
00:01:08,790 --> 00:01:13,560
the data itself so in speaking to the

14
00:01:11,910 --> 00:01:16,170
customers what customers really want in

15
00:01:13,560 --> 00:01:18,330
the key management solution is they want

16
00:01:16,170 --> 00:01:22,970
to see they want to know that their keys

17
00:01:18,330 --> 00:01:22,970
are stored in FIPS certified hardware

18
00:01:28,740 --> 00:01:30,798
you

19
00:01:31,030 --> 00:01:37,090
records every time these keys are used

20
00:01:33,730 --> 00:01:40,300
to encrypt and decrypt data within AWS

21
00:01:37,090 --> 00:01:43,990
and they don't really want to manage all

22
00:01:40,300 --> 00:01:46,929
the decisions around IV generation key

23
00:01:43,990 --> 00:01:49,929
rotation and algorithm selection and kms

24
00:01:46,930 --> 00:01:52,950
sort of handles all that for you and I

25
00:01:49,930 --> 00:01:57,190
think when you look at trying to run

26
00:01:52,950 --> 00:02:00,220
just s3 all through a single service

27
00:01:57,190 --> 00:02:02,320
it's really not feasible to load to

28
00:02:00,220 --> 00:02:04,869
transmit all your data through another

29
00:02:02,320 --> 00:02:06,970
endpoint to encrypt it and send it back

30
00:02:04,869 --> 00:02:08,649
nor is it really useful in the sense

31
00:02:06,970 --> 00:02:10,869
that you're just going to send it over

32
00:02:08,649 --> 00:02:11,530
some transport protocol to encrypt it

33
00:02:10,869 --> 00:02:14,260
somewhere else

34
00:02:11,530 --> 00:02:17,650
and finally the system has to have

35
00:02:14,260 --> 00:02:20,019
durability that's comparable to the data

36
00:02:17,650 --> 00:02:23,800
the durability of the services in which

37
00:02:20,020 --> 00:02:25,870
we're trying to protect that data so

38
00:02:23,800 --> 00:02:28,720
when we built kms this is sort of like a

39
00:02:25,870 --> 00:02:31,990
micro view of the architecture from how

40
00:02:28,720 --> 00:02:34,390
a customer might interact with kms we

41
00:02:31,990 --> 00:02:37,480
have the AWS kms service that the

42
00:02:34,390 --> 00:02:39,309
customer interfaces with directly and

43
00:02:37,480 --> 00:02:41,470
they would make a call to sort of create

44
00:02:39,310 --> 00:02:44,110
a key and when they create a key they

45
00:02:41,470 --> 00:02:47,019
would set a policy on that key that

46
00:02:44,110 --> 00:02:50,500
would specify who or what services can

47
00:02:47,019 --> 00:02:53,080
use that key and what API is that can

48
00:02:50,500 --> 00:02:55,690
they call against that key like changing

49
00:02:53,080 --> 00:02:57,790
the policy on the key or encrypting

50
00:02:55,690 --> 00:03:01,209
under that key or decrypting under that

51
00:02:57,790 --> 00:03:05,380
key when that occurs the kms service

52
00:03:01,209 --> 00:03:09,220
speaks to an HSM that has sort of what

53
00:03:05,380 --> 00:03:11,620
we call a domain key and the HSM will

54
00:03:09,220 --> 00:03:15,040
generate a brand new customer master key

55
00:03:11,620 --> 00:03:18,010
a 256 R and a bit value and encrypted

56
00:03:15,040 --> 00:03:21,850
under the domain key and then transmit

57
00:03:18,010 --> 00:03:24,130
that token back to the kms service where

58
00:03:21,850 --> 00:03:28,780
it will manage the state distribute that

59
00:03:24,130 --> 00:03:30,190
across the fleet of kms servers later on

60
00:03:28,780 --> 00:03:32,680
when a customer wants to encrypt data

61
00:03:30,190 --> 00:03:35,769
they make a call to encrypt under the

62
00:03:32,680 --> 00:03:39,490
key ID that we returned them as a lookup

63
00:03:35,769 --> 00:03:41,099
to that database and no passing in the

64
00:03:39,490 --> 00:03:42,880
plain text and maybe some additional

65
00:03:41,099 --> 00:03:44,209
authenticated data that we call

66
00:03:42,880 --> 00:03:48,650
encryption context with

67
00:03:44,210 --> 00:03:53,180
km/s and the kms service will look up

68
00:03:48,650 --> 00:03:56,960
the the ekt the encrypted key token and

69
00:03:53,180 --> 00:03:59,750
passed that back into the HSM the HSM

70
00:03:56,960 --> 00:04:02,300
will just create a fresh will decrypt

71
00:03:59,750 --> 00:04:06,050
that customer master key generate a

72
00:04:02,300 --> 00:04:09,350
fresh random a unique identifier for

73
00:04:06,050 --> 00:04:12,850
this encryption derive a per encryption

74
00:04:09,350 --> 00:04:16,820
key and encrypt that data and return it

75
00:04:12,850 --> 00:04:19,100
using AES 256 GCM and return that back

76
00:04:16,820 --> 00:04:23,030
to the calling application to the

77
00:04:19,100 --> 00:04:25,580
customer and last year we we walked

78
00:04:23,030 --> 00:04:28,520
through this specific small portion of

79
00:04:25,580 --> 00:04:32,510
this that we called the kms derive key

80
00:04:28,520 --> 00:04:34,640
mode for GCM we presented that in detail

81
00:04:32,510 --> 00:04:38,060
here so you can see that presentation

82
00:04:34,640 --> 00:04:41,390
last year from Shah goron where when you

83
00:04:38,060 --> 00:04:44,560
look at AWS the kms service as a whole

84
00:04:41,390 --> 00:04:47,870
and you look at how its encrypting that

85
00:04:44,560 --> 00:04:51,230
across all the customer master keys and

86
00:04:47,870 --> 00:04:54,650
all the sort of derived key encryptions

87
00:04:51,230 --> 00:04:59,320
that the system can support up to 240

88
00:04:54,650 --> 00:05:01,909
master keys all doing 250 encryptions

89
00:04:59,320 --> 00:05:04,540
while ensuring that the probability of a

90
00:05:01,910 --> 00:05:07,070
key ivy collision and an adversaries

91
00:05:04,540 --> 00:05:09,710
pseudo-random permutation pseudo-random

92
00:05:07,070 --> 00:05:17,990
function distinguishability advantage

93
00:05:09,710 --> 00:05:19,489
stays below 1 over 2 to the 32 so this

94
00:05:17,990 --> 00:05:22,610
is a little bit looking through a rear

95
00:05:19,490 --> 00:05:23,990
view mirror this was designed in 2013

96
00:05:22,610 --> 00:05:25,670
and while we did have a Phipps

97
00:05:23,990 --> 00:05:28,640
requirement and there's certainly other

98
00:05:25,670 --> 00:05:30,650
methods that we could have used the

99
00:05:28,640 --> 00:05:33,560
modern method of like SIV

100
00:05:30,650 --> 00:05:36,140
was just not known to us at the time and

101
00:05:33,560 --> 00:05:38,420
this is the solution that we we

102
00:05:36,140 --> 00:05:42,289
developed internally and deployed for

103
00:05:38,420 --> 00:05:44,810
this system from a more macro

104
00:05:42,290 --> 00:05:47,450
perspective the service is a little more

105
00:05:44,810 --> 00:05:52,070
complicated and in particular we build

106
00:05:47,450 --> 00:05:55,610
our the AWS cloud is sort of built in

107
00:05:52,070 --> 00:05:58,060
geographical regions that we we refer to

108
00:05:55,610 --> 00:06:02,710
as regions and they consist of mold

109
00:05:58,060 --> 00:06:06,490
full availability zones so today we have

110
00:06:02,710 --> 00:06:08,200
20 regions worldwide man with 60

111
00:06:06,490 --> 00:06:10,630
different availability zones which are

112
00:06:08,200 --> 00:06:15,700
designed to be sort of our fault barrier

113
00:06:10,630 --> 00:06:19,510
for first services so the service is

114
00:06:15,700 --> 00:06:21,490
designed so that any of the state

115
00:06:19,510 --> 00:06:24,240
management sort of happens at the

116
00:06:21,490 --> 00:06:26,830
control plane level so things like

117
00:06:24,240 --> 00:06:29,260
creation of keys putting a key policy

118
00:06:26,830 --> 00:06:31,389
enabling a key or disabling a key all

119
00:06:29,260 --> 00:06:34,659
require sort of a state transition

120
00:06:31,389 --> 00:06:36,310
through the kms service and it's

121
00:06:34,660 --> 00:06:38,770
optimized so that the data plane

122
00:06:36,310 --> 00:06:42,040
operations don't require a state

123
00:06:38,770 --> 00:06:44,740
transition and this sort of desire not

124
00:06:42,040 --> 00:06:47,110
to have to distribute state or be able

125
00:06:44,740 --> 00:06:50,050
to handle simultaneous calls to encrypt

126
00:06:47,110 --> 00:06:52,570
sort of forces your hand not to use like

127
00:06:50,050 --> 00:06:56,020
a counter base IV which would be a

128
00:06:52,570 --> 00:07:01,990
logical way to extend the usage of the

129
00:06:56,020 --> 00:07:06,669
key using GCM and again the system is

130
00:07:01,990 --> 00:07:09,070
designed to handle failover so the HSMs

131
00:07:06,669 --> 00:07:11,080
go down the availability zones will

132
00:07:09,070 --> 00:07:13,060
communicate with each other and the

133
00:07:11,080 --> 00:07:16,840
service continues to run with the loss

134
00:07:13,060 --> 00:07:20,530
of availability zones so today

135
00:07:16,840 --> 00:07:22,810
AWS our kms is integrated into 48

136
00:07:20,530 --> 00:07:26,280
different services and we're continuing

137
00:07:22,810 --> 00:07:30,039
to integrate that into new services as

138
00:07:26,280 --> 00:07:31,630
it makes sense to that there's value in

139
00:07:30,039 --> 00:07:34,510
protecting the customer data that's

140
00:07:31,630 --> 00:07:36,729
transferring through those services but

141
00:07:34,510 --> 00:07:40,270
there are certainly natural limits on a

142
00:07:36,729 --> 00:07:43,060
centralized service like this and to

143
00:07:40,270 --> 00:07:44,889
avoid sort of all say design patterns

144
00:07:43,060 --> 00:07:47,830
where people are shipping all their all

145
00:07:44,889 --> 00:07:49,570
their data through kms there's a limit

146
00:07:47,830 --> 00:07:54,130
on the amount of data that you can

147
00:07:49,570 --> 00:07:55,930
encrypt in kms and that's 496 bytes so

148
00:07:54,130 --> 00:07:59,800
that immediately comes up with when

149
00:07:55,930 --> 00:08:02,889
we're doing all the these integrations

150
00:07:59,800 --> 00:08:05,979
different patterns kind of pop out and

151
00:08:02,889 --> 00:08:09,270
and one one clear pattern that pops out

152
00:08:05,979 --> 00:08:11,229
is envelope encryption

153
00:08:09,270 --> 00:08:13,719
so when we think about envelope

154
00:08:11,229 --> 00:08:15,818
encryption is sort of a natural

155
00:08:13,720 --> 00:08:19,169
integration pattern where a customer

156
00:08:15,819 --> 00:08:22,539
would call the generate data key and

157
00:08:19,169 --> 00:08:25,090
against their master key and get back

158
00:08:22,539 --> 00:08:27,878
both the encrypted data key and the data

159
00:08:25,090 --> 00:08:31,119
key itself and then they can use that to

160
00:08:27,879 --> 00:08:33,779
encrypt their plaintext throw away the

161
00:08:31,120 --> 00:08:36,729
data key and store the encrypted data

162
00:08:33,779 --> 00:08:39,490
pair the encrypted data key and the

163
00:08:36,729 --> 00:08:42,190
ciphertext value and that solves a large

164
00:08:39,490 --> 00:08:45,790
number of the use cases that both our

165
00:08:42,190 --> 00:08:49,180
customer sees see and our integration

166
00:08:45,790 --> 00:08:52,719
patterns internally but it doesn't solve

167
00:08:49,180 --> 00:08:55,660
all and in particular customers and

168
00:08:52,720 --> 00:08:58,690
applications have policies that look

169
00:08:55,660 --> 00:09:00,819
like this so this is sort of in looks

170
00:08:58,690 --> 00:09:03,670
like there could be two clauses on a key

171
00:09:00,820 --> 00:09:06,850
policy the first Clause basically says

172
00:09:03,670 --> 00:09:10,709
that Alice can generate a data key or

173
00:09:06,850 --> 00:09:16,089
encrypt and it says Bob and Charlie can

174
00:09:10,709 --> 00:09:22,000
decrypt so it looks pretty innocuous but

175
00:09:16,089 --> 00:09:25,779
what happens here is the policy on the

176
00:09:22,000 --> 00:09:28,300
raw encrypt expressed in in the key

177
00:09:25,779 --> 00:09:31,329
policy doesn't extend over the envelope

178
00:09:28,300 --> 00:09:34,000
encrypted portion of this data meaning

179
00:09:31,329 --> 00:09:36,750
that Bob can legitimately call decrypt

180
00:09:34,000 --> 00:09:39,100
get the data key create a second message

181
00:09:36,750 --> 00:09:42,010
and send it off to charlie and Charlie

182
00:09:39,100 --> 00:09:46,630
has no way to detect that this didn't

183
00:09:42,010 --> 00:09:50,850
come from Alice so putting all these

184
00:09:46,630 --> 00:09:54,430
sort of integration patterns edge cases

185
00:09:50,850 --> 00:09:57,190
selection of algorithms and i-iv

186
00:09:54,430 --> 00:09:59,109
generation into the hands of our

187
00:09:57,190 --> 00:10:01,510
customers you know just sets them up for

188
00:09:59,110 --> 00:10:04,810
having to spend a lot of extra time and

189
00:10:01,510 --> 00:10:06,670
effort to engineer these solutions and

190
00:10:04,810 --> 00:10:08,709
and they're ones that we've sort of seen

191
00:10:06,670 --> 00:10:11,020
in the wild either through speaking with

192
00:10:08,709 --> 00:10:12,609
our customers or doing these integration

193
00:10:11,020 --> 00:10:16,300
patterns that sort of set the

194
00:10:12,610 --> 00:10:19,690
requirements for us developing the AWS

195
00:10:16,300 --> 00:10:22,569
encryption SDK and it's fundamental goal

196
00:10:19,690 --> 00:10:24,490
is to sort of make it easy by default

197
00:10:22,570 --> 00:10:26,560
like if you just use it it does the

198
00:10:24,490 --> 00:10:27,400
right thing it thinks around these edge

199
00:10:26,560 --> 00:10:30,310
cases

200
00:10:27,400 --> 00:10:33,730
it handles envelope encryption for you

201
00:10:30,310 --> 00:10:37,780
so he can encrypt large data large data

202
00:10:33,730 --> 00:10:40,480
sets and extends the policy from the

203
00:10:37,780 --> 00:10:43,150
master key over the envelope encrypted

204
00:10:40,480 --> 00:10:46,720
data and finally it allows you to scale

205
00:10:43,150 --> 00:10:48,490
your calls to kms so like many cloud

206
00:10:46,720 --> 00:10:51,280
services you know it takes an outbound

207
00:10:48,490 --> 00:10:53,440
call to get a data key and that's going

208
00:10:51,280 --> 00:10:56,620
to add latency to high frequency

209
00:10:53,440 --> 00:10:58,990
encryption so we there has a caching

210
00:10:56,620 --> 00:11:01,450
layer built-in that will decrease that

211
00:10:58,990 --> 00:11:07,000
latency as well as decrease cost of

212
00:11:01,450 --> 00:11:09,370
using kms so the structure of the

213
00:11:07,000 --> 00:11:14,710
encryption SDK for doing client-side

214
00:11:09,370 --> 00:11:17,980
encryption so the lower right box is the

215
00:11:14,710 --> 00:11:20,560
encryption SDK that's processing a

216
00:11:17,980 --> 00:11:23,320
plaintext and the first thing it'll do

217
00:11:20,560 --> 00:11:27,670
is sort of generate an ephemeral signing

218
00:11:23,320 --> 00:11:30,040
key and then make a call to kms to

219
00:11:27,670 --> 00:11:32,709
generate a data key and in that call

220
00:11:30,040 --> 00:11:36,790
it'll bind that public key to the

221
00:11:32,710 --> 00:11:38,680
encryption of the data key by adding the

222
00:11:36,790 --> 00:11:41,110
The Associated public key into the

223
00:11:38,680 --> 00:11:45,010
additionally authenticated data that's

224
00:11:41,110 --> 00:11:47,470
encrypted used in the encryption of the

225
00:11:45,010 --> 00:11:50,650
data key and it can start building the

226
00:11:47,470 --> 00:11:54,280
cipher text structure it generates a

227
00:11:50,650 --> 00:11:56,500
fresh message ID derives a new

228
00:11:54,280 --> 00:11:59,290
encryption key for that message ID and

229
00:11:56,500 --> 00:12:01,600
as the parts of this plaintext comes in

230
00:11:59,290 --> 00:12:06,189
let's say it's a streaming application

231
00:12:01,600 --> 00:12:08,710
it will use a counter based IV AES GCM

232
00:12:06,190 --> 00:12:11,080
encrypt that and put the parts together

233
00:12:08,710 --> 00:12:13,030
and and just add the parts to either the

234
00:12:11,080 --> 00:12:15,760
stream or the structure of this cipher

235
00:12:13,030 --> 00:12:18,250
text it'll process all those parts and

236
00:12:15,760 --> 00:12:23,110
then add on a digital signature at the

237
00:12:18,250 --> 00:12:25,780
end and now and another recipient of

238
00:12:23,110 --> 00:12:27,910
this like Bob can no longer change the

239
00:12:25,780 --> 00:12:30,670
message without either being able to

240
00:12:27,910 --> 00:12:33,520
call generate data key or encrypt

241
00:12:30,670 --> 00:12:35,860
binding a new public key to the

242
00:12:33,520 --> 00:12:36,610
encryption context or the a ad or a

243
00:12:35,860 --> 00:12:40,720
learning

244
00:12:36,610 --> 00:12:44,589
the signing key D and then Alice can

245
00:12:40,720 --> 00:12:47,950
reuse this data key and signing key on

246
00:12:44,589 --> 00:12:49,870
subsequent messages so on the next

247
00:12:47,950 --> 00:12:52,420
message that comes in she generates a

248
00:12:49,870 --> 00:12:54,100
new message ID derives a second

249
00:12:52,420 --> 00:13:00,430
encryption key and encrypts all the

250
00:12:54,100 --> 00:13:03,459
parts and sin and sends it on its way so

251
00:13:00,430 --> 00:13:04,839
here of course is some of you know you

252
00:13:03,459 --> 00:13:07,810
have to think about are we gonna run

253
00:13:04,839 --> 00:13:09,640
into key IV collisions I should say this

254
00:13:07,810 --> 00:13:14,489
is sort of the default method that's

255
00:13:09,640 --> 00:13:17,680
being used by by the SDK and it uses

256
00:13:14,490 --> 00:13:19,959
256-bit keys and so when you look at the

257
00:13:17,680 --> 00:13:21,729
probability of a key ivy collision it

258
00:13:19,959 --> 00:13:25,209
really just comes down to because we're

259
00:13:21,730 --> 00:13:27,660
using a counter BAE statistic ivy on the

260
00:13:25,209 --> 00:13:32,079
parts just comes down to the key

261
00:13:27,660 --> 00:13:33,870
collision and the analysis on that if

262
00:13:32,079 --> 00:13:37,029
you look at just let's say you're doing

263
00:13:33,870 --> 00:13:41,260
an many cache keys each of which is

264
00:13:37,029 --> 00:13:44,230
doing Q many derivations the probability

265
00:13:41,260 --> 00:13:47,709
of a collision if you look at that just

266
00:13:44,230 --> 00:13:50,829
as random is is fairly negligible when N

267
00:13:47,709 --> 00:13:54,880
and Q are less than two to the 32 this

268
00:13:50,829 --> 00:13:57,310
is less than one over two to the 129 but

269
00:13:54,880 --> 00:14:00,189
within a particular data key because the

270
00:13:57,310 --> 00:14:03,699
message ID is relatively small that

271
00:14:00,190 --> 00:14:07,360
probability of a collision for one

272
00:14:03,700 --> 00:14:10,149
derived key for a fixed data key is

273
00:14:07,360 --> 00:14:12,399
roughly 1 over 2 to the 64 well it's

274
00:14:10,149 --> 00:14:14,560
less than 1 over 2 to the 64 as long as

275
00:14:12,399 --> 00:14:18,760
the number of encryptions are less than

276
00:14:14,560 --> 00:14:21,069
2 to the 32 so in general if you're

277
00:14:18,760 --> 00:14:25,390
doing in many cache keys you still

278
00:14:21,070 --> 00:14:28,720
maintain if you're doing 2 to the 32

279
00:14:25,390 --> 00:14:32,740
many cache keys each of which doing less

280
00:14:28,720 --> 00:14:34,660
than 2 to the 32 derivation x' you still

281
00:14:32,740 --> 00:14:38,800
retain the probability of being less

282
00:14:34,660 --> 00:14:41,980
than 1 over 2 to the 32 so you're really

283
00:14:38,800 --> 00:14:44,439
in this single multi-user single user

284
00:14:41,980 --> 00:14:46,540
multi cache key multi key encryption

285
00:14:44,440 --> 00:14:49,360
scenario but the fact that there are

286
00:14:46,540 --> 00:14:50,469
large keys and deterministic IVs make

287
00:14:49,360 --> 00:14:53,410
the probabilities of

288
00:14:50,470 --> 00:14:58,810
called bad events sufficiently small for

289
00:14:53,410 --> 00:15:02,760
the customer so the encryption SDK like

290
00:14:58,810 --> 00:15:08,109
I said it by default uses aes-256 GCM

291
00:15:02,760 --> 00:15:12,250
uses you see this ECDSA

292
00:15:08,110 --> 00:15:15,340
on sec t 384 r1 and it's an open source

293
00:15:12,250 --> 00:15:17,680
solution and on the last page i have

294
00:15:15,340 --> 00:15:21,070
some links to downloading the various

295
00:15:17,680 --> 00:15:23,439
versions of this or supported language

296
00:15:21,070 --> 00:15:26,530
for this but it supports message sizes

297
00:15:23,440 --> 00:15:30,280
up to 2 to the 63 bytes you can use it

298
00:15:26,530 --> 00:15:34,240
for framing of data for streaming it'll

299
00:15:30,280 --> 00:15:36,220
support caching of the data key under

300
00:15:34,240 --> 00:15:37,720
sort of a security context or an

301
00:15:36,220 --> 00:15:39,910
encryption context that you're doing

302
00:15:37,720 --> 00:15:42,520
encryption and then you can configure it

303
00:15:39,910 --> 00:15:46,630
based on time the number of derived keys

304
00:15:42,520 --> 00:15:48,430
or bytes and by default and by design it

305
00:15:46,630 --> 00:15:54,010
doesn't allow you to exceed two to the

306
00:15:48,430 --> 00:15:57,370
32 derived keys and finally the fact

307
00:15:54,010 --> 00:15:58,660
that it was designed to be extensible to

308
00:15:57,370 --> 00:16:01,360
additional key management

309
00:15:58,660 --> 00:16:02,920
infrastructures and there's practically

310
00:16:01,360 --> 00:16:05,380
what I would call a developing

311
00:16:02,920 --> 00:16:11,280
developers developer kit for how to

312
00:16:05,380 --> 00:16:16,060
extend this to additional key @km eyes

313
00:16:11,280 --> 00:16:18,280
so where this app where you might use

314
00:16:16,060 --> 00:16:20,920
the encryption SDK or in distributed

315
00:16:18,280 --> 00:16:22,930
applications like Kinesis so Amazon

316
00:16:20,920 --> 00:16:25,089
Kinesis data streams allow you to

317
00:16:22,930 --> 00:16:29,579
collect lara collect and process large

318
00:16:25,090 --> 00:16:32,560
streams of data records in real time and

319
00:16:29,580 --> 00:16:35,130
you'd have a set of consume or producing

320
00:16:32,560 --> 00:16:37,239
applications that might be taking sense

321
00:16:35,130 --> 00:16:39,250
readings from your network let's say

322
00:16:37,240 --> 00:16:40,930
it's a sensor network and it you want

323
00:16:39,250 --> 00:16:45,280
client you want end-to-end encryption

324
00:16:40,930 --> 00:16:47,500
you can use the AWS encryption SDK to

325
00:16:45,280 --> 00:16:49,209
sort of if you're taking a thousand

326
00:16:47,500 --> 00:16:52,150
readings a second you don't want to be

327
00:16:49,210 --> 00:16:53,740
making a thousand API calls to kms for

328
00:16:52,150 --> 00:16:56,949
every encryption so you can cache that

329
00:16:53,740 --> 00:16:59,140
data key and leverage the calls across

330
00:16:56,950 --> 00:17:01,390
and similarly on the consumer side

331
00:16:59,140 --> 00:17:02,980
reading in from the data stream you can

332
00:17:01,390 --> 00:17:04,349
leverage

333
00:17:02,980 --> 00:17:06,730
number of calls that you're making

334
00:17:04,349 --> 00:17:09,188
reducing not just the latency of your

335
00:17:06,730 --> 00:17:13,329
applications but your overall cost of

336
00:17:09,189 --> 00:17:16,299
running those applications so that

337
00:17:13,329 --> 00:17:20,829
brings us back to encrypting objects in

338
00:17:16,299 --> 00:17:23,109
s3 of course we're using TLS making TLS

339
00:17:20,829 --> 00:17:28,750
available to upload all your objects to

340
00:17:23,109 --> 00:17:31,178
s3 but you can use AWS encryption SDK to

341
00:17:28,750 --> 00:17:33,280
do client-side encryption or there's a

342
00:17:31,179 --> 00:17:35,020
additionally there's the s3 encryption

343
00:17:33,280 --> 00:17:38,980
client that's built into our standard

344
00:17:35,020 --> 00:17:42,940
AWS SDK but you can also configure it to

345
00:17:38,980 --> 00:17:45,580
do server side encryption which is an

346
00:17:42,940 --> 00:17:47,380
easier way you can just sort of say you

347
00:17:45,580 --> 00:17:50,678
know when you put the object specified

348
00:17:47,380 --> 00:17:55,330
the kms key ID and and encrypt it while

349
00:17:50,679 --> 00:17:58,840
at rest so when you put an object into

350
00:17:55,330 --> 00:18:01,360
s3 with server side encryption the first

351
00:17:58,840 --> 00:18:04,409
thing that happens is a call is made on

352
00:18:01,360 --> 00:18:08,590
behalf of the customer provided that the

353
00:18:04,410 --> 00:18:11,679
the master key allows you to encrypt

354
00:18:08,590 --> 00:18:14,290
under it it'll generate a data key and

355
00:18:11,679 --> 00:18:17,200
get an encrypted data key and that data

356
00:18:14,290 --> 00:18:20,320
key and store the encrypted data key in

357
00:18:17,200 --> 00:18:26,020
the object metadata will then break up

358
00:18:20,320 --> 00:18:27,939
that object into chunks and for each one

359
00:18:26,020 --> 00:18:32,970
of these chunks it will encrypt it using

360
00:18:27,940 --> 00:18:37,179
a s GCM and storing the IV and tag along

361
00:18:32,970 --> 00:18:40,600
with the chunk so this adds of course 12

362
00:18:37,179 --> 00:18:43,690
bytes of IV and 16 bytes of mac per

363
00:18:40,600 --> 00:18:46,629
chunk and and we're using a random IV

364
00:18:43,690 --> 00:18:49,299
here it's not clear in this picture why

365
00:18:46,630 --> 00:18:51,700
that's needed but in the parallel upload

366
00:18:49,299 --> 00:18:54,309
process when you're uploading the parts

367
00:18:51,700 --> 00:18:57,280
in parallel again you're left with this

368
00:18:54,309 --> 00:18:59,020
problem of managing the state or

369
00:18:57,280 --> 00:19:05,049
distributing the state of your counter

370
00:18:59,020 --> 00:19:08,168
across all your upload notes and the

371
00:19:05,049 --> 00:19:12,158
reason that we're doing encrypting sort

372
00:19:08,169 --> 00:19:14,620
of in chunks is predicated on the

373
00:19:12,159 --> 00:19:16,140
existing API s that allow you to do so

374
00:19:14,620 --> 00:19:17,969
called range gets

375
00:19:16,140 --> 00:19:20,220
so when you when you try to get an

376
00:19:17,970 --> 00:19:23,100
object if it's a five terabyte object

377
00:19:20,220 --> 00:19:24,630
and you only need 20 bytes of it you're

378
00:19:23,100 --> 00:19:27,899
not going to want to download the five

379
00:19:24,630 --> 00:19:31,080
terabytes and then seek through it to

380
00:19:27,900 --> 00:19:34,470
get the necessary bytes you can rely on

381
00:19:31,080 --> 00:19:39,120
the the api's to do that for you so when

382
00:19:34,470 --> 00:19:41,160
you call get object the the service will

383
00:19:39,120 --> 00:19:43,559
make a call back to kms on your behalf

384
00:19:41,160 --> 00:19:46,410
with the encrypted data key stored in

385
00:19:43,559 --> 00:19:48,600
the metadata get the necessary chunks

386
00:19:46,410 --> 00:19:50,220
processed those chunks and then

387
00:19:48,600 --> 00:19:53,610
reassemble the range and return them

388
00:19:50,220 --> 00:19:57,720
back to you of course that leaves you

389
00:19:53,610 --> 00:20:00,178
with a couple of design decisions in

390
00:19:57,720 --> 00:20:05,490
terms of how big are you going to make

391
00:20:00,179 --> 00:20:07,980
these chunks in practice so with a 5

392
00:20:05,490 --> 00:20:11,700
terabyte limit you have some some

393
00:20:07,980 --> 00:20:13,650
flexibility on how big 5 air bytes is

394
00:20:11,700 --> 00:20:17,580
the current limit for an object within

395
00:20:13,650 --> 00:20:20,549
s3 you have some options on how big

396
00:20:17,580 --> 00:20:23,610
these chunks are and so but if you make

397
00:20:20,549 --> 00:20:26,309
the chunk let's say small you're going

398
00:20:23,610 --> 00:20:29,299
to two effects of that is you're going

399
00:20:26,309 --> 00:20:32,309
to increase your overall storage

400
00:20:29,299 --> 00:20:34,970
overhead and and you're going to lower

401
00:20:32,309 --> 00:20:39,030
the amount of data that you can encrypt

402
00:20:34,970 --> 00:20:42,720
under a single key because you can still

403
00:20:39,030 --> 00:20:46,379
only do two to the 32 chunks before you

404
00:20:42,720 --> 00:20:49,070
sort of reached a bad probability so

405
00:20:46,380 --> 00:20:51,419
that limits a total like to 8 terabytes

406
00:20:49,070 --> 00:20:54,600
of course you can go with a larger chunk

407
00:20:51,419 --> 00:20:57,049
size that has the property that's

408
00:20:54,600 --> 00:20:59,790
certainly going to reduce your overhead

409
00:20:57,049 --> 00:21:02,610
and increase the maximum amount of data

410
00:20:59,790 --> 00:21:04,830
you can store but now you're increasing

411
00:21:02,610 --> 00:21:06,899
the latency on these range gets which

412
00:21:04,830 --> 00:21:14,760
are fairly common in in in how people

413
00:21:06,900 --> 00:21:17,270
are using s3 alright so in summary I

414
00:21:14,760 --> 00:21:19,670
think you know following up on sort of

415
00:21:17,270 --> 00:21:22,059
professor

416
00:21:19,670 --> 00:21:23,780
Mazurek from from yesterday from

417
00:21:22,059 --> 00:21:26,090
University of Maryland

418
00:21:23,780 --> 00:21:30,440
I think AWS is really trying to make

419
00:21:26,090 --> 00:21:32,480
encryption of customer data easy with

420
00:21:30,440 --> 00:21:35,330
secure default configurations so

421
00:21:32,480 --> 00:21:37,760
customers don't have to do the IV

422
00:21:35,330 --> 00:21:39,590
generation think about the difference

423
00:21:37,760 --> 00:21:41,510
between confidentiality and

424
00:21:39,590 --> 00:21:44,600
authentication what customers really

425
00:21:41,510 --> 00:21:47,150
want is to have their data secure know

426
00:21:44,600 --> 00:21:49,280
that it's secured using algorithms that

427
00:21:47,150 --> 00:21:51,650
are well established and standardized

428
00:21:49,280 --> 00:21:54,200
and meet their requirements and their

429
00:21:51,650 --> 00:21:56,270
auditors requirements that there's

430
00:21:54,200 --> 00:22:00,590
general tension between the one size

431
00:21:56,270 --> 00:22:03,799
fits all on and every application

432
00:22:00,590 --> 00:22:06,290
requires a custom solution when you're

433
00:22:03,799 --> 00:22:09,740
doing just 48 server-side integrations

434
00:22:06,290 --> 00:22:12,500
you're really trying to to get minimize

435
00:22:09,740 --> 00:22:14,720
the design patterns and the tools to

436
00:22:12,500 --> 00:22:18,080
implement those patterns so that you can

437
00:22:14,720 --> 00:22:21,080
make them higher assurance be more

438
00:22:18,080 --> 00:22:23,480
robust and easier to reason about long

439
00:22:21,080 --> 00:22:25,909
term as you're monitoring what's going

440
00:22:23,480 --> 00:22:27,830
on in the state of the art how many

441
00:22:25,910 --> 00:22:32,510
tools do you have to now go and update

442
00:22:27,830 --> 00:22:35,090
because there have been changes and I

443
00:22:32,510 --> 00:22:37,490
think in general I think probably not

444
00:22:35,090 --> 00:22:39,740
unique to cloud providers but managing

445
00:22:37,490 --> 00:22:42,470
state across distributed systems there's

446
00:22:39,740 --> 00:22:44,570
really performance inhibiting when when

447
00:22:42,470 --> 00:22:48,290
you're looking at being on the encrypt

448
00:22:44,570 --> 00:22:51,530
decrypt path and that really comes out

449
00:22:48,290 --> 00:22:53,540
when you're looking at IV collisions and

450
00:22:51,530 --> 00:22:56,510
you can't distribute sort of a counter

451
00:22:53,540 --> 00:22:58,149
across you know parallel systems to

452
00:22:56,510 --> 00:23:01,760
operate and you can't really rely on

453
00:22:58,150 --> 00:23:05,690
breaking up that counter a long term

454
00:23:01,760 --> 00:23:09,379
over the life lifetime of the service so

455
00:23:05,690 --> 00:23:12,200
I mean a lot of this work becomes a lot

456
00:23:09,380 --> 00:23:14,840
more simple if I had an efficient

457
00:23:12,200 --> 00:23:16,940
standardized and wide block encryption

458
00:23:14,840 --> 00:23:18,980
algorithm that would certainly simplify

459
00:23:16,940 --> 00:23:21,559
a lot of these tensions where we're

460
00:23:18,980 --> 00:23:25,549
really going out of our way to sort of

461
00:23:21,559 --> 00:23:28,879
stretch the IV's because we have 128 bit

462
00:23:25,549 --> 00:23:32,879
block cipher so

463
00:23:28,880 --> 00:23:36,510
so this is my last slide I have links to

464
00:23:32,880 --> 00:23:38,360
additional details for both the kms

465
00:23:36,510 --> 00:23:43,140
service client-side and server-side

466
00:23:38,360 --> 00:23:46,169
encryption for s3 as well as the open

467
00:23:43,140 --> 00:23:48,180
source links to the encryption SDK where

468
00:23:46,170 --> 00:23:59,790
you can also find the format in

469
00:23:48,180 --> 00:24:02,280
additional detail thank you we have time

470
00:23:59,790 --> 00:24:04,980
for questions so there are three

471
00:24:02,280 --> 00:24:07,620
microphones in the room if you want to

472
00:24:04,980 --> 00:24:11,430
make any questions or comments to Matt

473
00:24:07,620 --> 00:24:12,149
please show up and here we have the

474
00:24:11,430 --> 00:24:15,150
first question

475
00:24:12,150 --> 00:24:16,320
Robert very nice talk Serkis say a

476
00:24:15,150 --> 00:24:17,550
little bit more about one of their

477
00:24:16,320 --> 00:24:20,070
algorithms you looked at is it a

478
00:24:17,550 --> 00:24:22,169
standardization issue in terms of using

479
00:24:20,070 --> 00:24:24,270
science on yeah yes Yammer's at a

480
00:24:22,170 --> 00:24:24,780
performance thing so in the toolkit

481
00:24:24,270 --> 00:24:27,420
itself

482
00:24:24,780 --> 00:24:29,550
I'm the encryption SDK you certainly can

483
00:24:27,420 --> 00:24:31,050
specify additional algorithms and and

484
00:24:29,550 --> 00:24:33,060
implement you know because it's

485
00:24:31,050 --> 00:24:36,300
open-source you can implement your own

486
00:24:33,060 --> 00:24:39,240
in there pretty pretty freely within the

487
00:24:36,300 --> 00:24:42,480
kms service we certainly did labor over

488
00:24:39,240 --> 00:24:45,600
you know should we use a key wrap which

489
00:24:42,480 --> 00:24:47,430
left you know a big part of the

490
00:24:45,600 --> 00:24:49,830
efficiency of that data plan was making

491
00:24:47,430 --> 00:24:53,550
sure you know the going over that data

492
00:24:49,830 --> 00:24:57,179
path once using AES GCM was very

493
00:24:53,550 --> 00:25:01,409
attractive we did look at CTR like H Mac

494
00:24:57,180 --> 00:25:02,790
combination but ultimately GCM was you

495
00:25:01,410 --> 00:25:05,070
know it was the one that we saw was

496
00:25:02,790 --> 00:25:10,290
going to be giving us the highest

497
00:25:05,070 --> 00:25:11,399
throughput thanks for the talk I'm

498
00:25:10,290 --> 00:25:13,530
curious could you talk a little bit

499
00:25:11,400 --> 00:25:15,270
about how fault tolerance works so how

500
00:25:13,530 --> 00:25:20,280
how you recover say from the failure of

501
00:25:15,270 --> 00:25:23,040
an HSM and these things yeah so kind of

502
00:25:20,280 --> 00:25:26,629
hidden in there is there is with the

503
00:25:23,040 --> 00:25:31,320
domain key this notion of a domain

504
00:25:26,630 --> 00:25:35,070
within a kms region that consists of

505
00:25:31,320 --> 00:25:37,950
sort of credentials for all the HSM s as

506
00:25:35,070 --> 00:25:40,439
well as the kms servers that need to

507
00:25:37,950 --> 00:25:42,930
talk to them and we there is a state

508
00:25:40,440 --> 00:25:45,900
management across those H

509
00:25:42,930 --> 00:25:48,930
but that doesn't occur either in the

510
00:25:45,900 --> 00:25:53,310
control plane of the customer creating

511
00:25:48,930 --> 00:25:55,170
and changing keys or the data plane of

512
00:25:53,310 --> 00:25:58,370
encrypting and decrypting so that the

513
00:25:55,170 --> 00:26:00,810
backend services managed through another

514
00:25:58,370 --> 00:26:09,209
service to sort of maintain state

515
00:26:00,810 --> 00:26:13,740
consistent state across the HSN's any

516
00:26:09,210 --> 00:26:14,990
other questions comments ok

517
00:26:13,740 --> 00:26:24,240
let's thank the speaker again

518
00:26:14,990 --> 00:26:24,240
[Applause]

519
00:26:56,340 --> 00:27:03,639
okay you're ready at once so the next

520
00:27:00,519 --> 00:27:06,220
speaker is Ziva from visa research and

521
00:27:03,639 --> 00:27:09,519
he'll be talking to us about about

522
00:27:06,220 --> 00:27:28,600
applying proxy reaction Riaan Krypton to

523
00:27:09,519 --> 00:27:30,039
payments sorry for that today we talked

524
00:27:28,600 --> 00:27:31,809
about few problems in payments don't

525
00:27:30,039 --> 00:27:33,970
mind we are approximately encryption

526
00:27:31,809 --> 00:27:35,529
help address them effectively this is a

527
00:27:33,970 --> 00:27:37,769
joint effort between my colleague subtle

528
00:27:35,529 --> 00:27:37,769
Android

529
00:27:42,840 --> 00:27:49,499
that your employer's disclaimer it's

530
00:27:44,999 --> 00:27:53,340
basically trust but verify offering it

531
00:27:49,499 --> 00:27:56,100
all starts when consumer wants to pay a

532
00:27:53,340 --> 00:27:58,009
merchant distally today a consumer needs

533
00:27:56,100 --> 00:28:02,279
to have a relation with consumer bank

534
00:27:58,009 --> 00:28:03,769
gets his card and much similarly much in

535
00:28:02,279 --> 00:28:06,029
you civilization with much in bank and

536
00:28:03,769 --> 00:28:08,399
all these two entities are connected

537
00:28:06,029 --> 00:28:10,259
with payment network and merchant gets

538
00:28:08,399 --> 00:28:12,289
his point-of-sale terminal from the

539
00:28:10,259 --> 00:28:14,789
merchant bank

540
00:28:12,289 --> 00:28:15,960
moreover the merchant would talk to the

541
00:28:14,789 --> 00:28:17,279
merchant bank why are these two

542
00:28:15,960 --> 00:28:19,529
additional players called point-of-sale

543
00:28:17,279 --> 00:28:20,850
partner and the payment gateway the

544
00:28:19,529 --> 00:28:22,259
reason why these two players exist

545
00:28:20,850 --> 00:28:23,580
because let's say for example if you're

546
00:28:22,259 --> 00:28:25,769
really a big merchant and you want to go

547
00:28:23,580 --> 00:28:26,999
globally and you need a point-of-sale

548
00:28:25,769 --> 00:28:28,850
partner because you won't domain is

549
00:28:26,999 --> 00:28:31,980
heterogeneous a point-of-sale Hardware

550
00:28:28,850 --> 00:28:35,299
in case of payment gateway it basically

551
00:28:31,980 --> 00:28:37,559
helps you work with local merchant banks

552
00:28:35,299 --> 00:28:39,929
let's see how the transaction flow works

553
00:28:37,559 --> 00:28:41,850
at very high level and see each and what

554
00:28:39,929 --> 00:28:43,710
each and every actor does let's say when

555
00:28:41,850 --> 00:28:44,850
the consumer swipes a card the

556
00:28:43,710 --> 00:28:46,830
point-of-sale partner receives the

557
00:28:44,850 --> 00:28:48,689
transaction first and then senses to the

558
00:28:46,830 --> 00:28:50,730
payment gateway and then payment gateway

559
00:28:48,690 --> 00:28:53,159
simply forward to the right much in bank

560
00:28:50,730 --> 00:28:54,600
and then payment or much in bank would

561
00:28:53,159 --> 00:28:56,730
simply forward to the payment network

562
00:28:54,600 --> 00:28:59,399
and payment network does CC functions

563
00:28:56,730 --> 00:29:01,529
and then further send it to the consumer

564
00:28:59,399 --> 00:29:06,570
bank for authorization today we will

565
00:29:01,529 --> 00:29:09,210
focus on the these three functions as we

566
00:29:06,570 --> 00:29:10,740
seen previously the payment network

567
00:29:09,210 --> 00:29:13,200
receives the transaction from merchant

568
00:29:10,740 --> 00:29:15,119
bank and basically does three functions

569
00:29:13,200 --> 00:29:17,610
sequentially we're basically map is some

570
00:29:15,119 --> 00:29:19,168
kind of a stateful operation and then

571
00:29:17,610 --> 00:29:20,908
you see to the odd odd basically some

572
00:29:19,169 --> 00:29:22,710
perform some kind of a filter graphic

573
00:29:20,909 --> 00:29:24,629
operation and then gives you to the

574
00:29:22,710 --> 00:29:26,610
route and route basically or transform

575
00:29:24,629 --> 00:29:29,158
the message in such way that a new bank

576
00:29:26,610 --> 00:29:32,248
can understand it as we see here the

577
00:29:29,159 --> 00:29:33,840
main of the operation here auth box

578
00:29:32,249 --> 00:29:35,369
basically performs a lot of cryptic

579
00:29:33,840 --> 00:29:38,459
operations cryptographic operations

580
00:29:35,369 --> 00:29:41,158
which involve our see verification chip

581
00:29:38,460 --> 00:29:43,019
verification etc etc let's see if you

582
00:29:41,159 --> 00:29:45,869
sample or it's what we do

583
00:29:43,019 --> 00:29:48,990
on daily basis let's say when you swipe

584
00:29:45,869 --> 00:29:50,970
a credit card at point-of-sale the odd

585
00:29:48,990 --> 00:29:53,399
box our auth function receives the pan

586
00:29:50,970 --> 00:29:55,409
data and the CV as an input and then

587
00:29:53,399 --> 00:29:56,870
some kind of keys as an input to and

588
00:29:55,409 --> 00:30:01,790
then outputs 1 or 0

589
00:29:56,870 --> 00:30:01,790
rather than the chip-based transaction

590
00:30:02,420 --> 00:30:07,350
the point-of-sale gets the cryptogram

591
00:30:05,370 --> 00:30:10,169
from the chip and then pass it down to

592
00:30:07,350 --> 00:30:12,449
these odd function it also uses some

593
00:30:10,170 --> 00:30:14,280
additional new keys to verify this

594
00:30:12,450 --> 00:30:16,980
cryptogram and then outputs 1 or 0

595
00:30:14,280 --> 00:30:19,379
whereas in case of debit transaction the

596
00:30:16,980 --> 00:30:21,540
pin has to be ratified securely today

597
00:30:19,380 --> 00:30:23,370
the pin can be verified by their by the

598
00:30:21,540 --> 00:30:26,790
consumer bank or the payment network and

599
00:30:23,370 --> 00:30:29,310
use it the same function as we see here

600
00:30:26,790 --> 00:30:31,320
every transaction involves some type of

601
00:30:29,310 --> 00:30:33,570
cryptographic operation and we do at

602
00:30:31,320 --> 00:30:36,600
large scale like for example visa

603
00:30:33,570 --> 00:30:39,270
reported the last year last year last

604
00:30:36,600 --> 00:30:41,159
quarter like q4 we process like 5,000

605
00:30:39,270 --> 00:30:42,930
messages per second approximately and

606
00:30:41,160 --> 00:30:48,690
then which includes 2,000 debit and

607
00:30:42,930 --> 00:30:50,340
credit since each and every op since

608
00:30:48,690 --> 00:30:51,570
each and every since each and every

609
00:30:50,340 --> 00:30:53,340
transaction involves some kind of

610
00:30:51,570 --> 00:30:56,159
cryptography all the entities in the

611
00:30:53,340 --> 00:30:58,409
network has to use HSM to protect the

612
00:30:56,160 --> 00:31:00,750
sensitive key material securely today we

613
00:30:58,410 --> 00:31:02,340
focus and see if any at least one type

614
00:31:00,750 --> 00:31:04,170
of transaction we can reduce the HSM

615
00:31:02,340 --> 00:31:08,159
burden on the entire ecosystem not just

616
00:31:04,170 --> 00:31:09,750
one player as we see our previously

617
00:31:08,160 --> 00:31:11,640
thought function takes transaction input

618
00:31:09,750 --> 00:31:14,280
and outputs 1 are 0 by using this a

619
00:31:11,640 --> 00:31:16,050
bunch of HSM machines as we seen

620
00:31:14,280 --> 00:31:18,480
previously the top hitters are credit

621
00:31:16,050 --> 00:31:20,190
and debit which translates to the CV

622
00:31:18,480 --> 00:31:21,720
verification they are QC verification

623
00:31:20,190 --> 00:31:22,950
and the pin verification these are the

624
00:31:21,720 --> 00:31:25,770
top three headers in the sequential

625
00:31:22,950 --> 00:31:28,140
manner so we're going to focus on today

626
00:31:25,770 --> 00:31:29,910
because we believe basically we can

627
00:31:28,140 --> 00:31:32,460
actually help reduce HSM burden on this

628
00:31:29,910 --> 00:31:35,700
type of transaction today there are two

629
00:31:32,460 --> 00:31:37,140
pin verification modes exist a pin can

630
00:31:35,700 --> 00:31:38,760
be verified online what it means is that

631
00:31:37,140 --> 00:31:42,500
been asked to be sent securely to the

632
00:31:38,760 --> 00:31:45,540
consumer bank whereas in case of offline

633
00:31:42,500 --> 00:31:47,370
card can basically verify it obviously

634
00:31:45,540 --> 00:31:48,690
it seems risky right because most of the

635
00:31:47,370 --> 00:31:50,489
consumer banks don't want to do this

636
00:31:48,690 --> 00:31:53,220
they would like to verify the

637
00:31:50,490 --> 00:31:54,720
transaction online where today's the

638
00:31:53,220 --> 00:31:57,900
rest of the talk focused on online pin

639
00:31:54,720 --> 00:32:00,720
verification ok let's look at the chat

640
00:31:57,900 --> 00:32:02,250
as a simple debit transaction ok in

641
00:32:00,720 --> 00:32:03,570
order to do the debit transaction at

642
00:32:02,250 --> 00:32:06,180
least the chip card should have at least

643
00:32:03,570 --> 00:32:07,919
these three pieces of data a track data

644
00:32:06,180 --> 00:32:10,590
and a simple counter and some unit

645
00:32:07,920 --> 00:32:12,419
secret key let's say for example the

646
00:32:10,590 --> 00:32:14,789
come to be 16-bit you end up having a

647
00:32:12,419 --> 00:32:17,010
three years of validity our track data

648
00:32:14,789 --> 00:32:18,600
would have app and data and there is

649
00:32:17,010 --> 00:32:22,379
this one flag which says that this card

650
00:32:18,600 --> 00:32:24,209
supports online pin verification now now

651
00:32:22,380 --> 00:32:27,990
at the time of payment pass would

652
00:32:24,210 --> 00:32:29,730
basically sent a terminal data which has

653
00:32:27,990 --> 00:32:32,390
some random nonce to the chip card and

654
00:32:29,730 --> 00:32:34,650
chip card bar basically does these two

655
00:32:32,390 --> 00:32:37,710
sequentially it generates some session

656
00:32:34,650 --> 00:32:41,000
or key and then generates a cryptogram

657
00:32:37,710 --> 00:32:43,289
out of the point-of-sale data and some

658
00:32:41,000 --> 00:32:46,260
using that key and then send it to the

659
00:32:43,289 --> 00:32:47,879
point-of-sale terminal now the pass will

660
00:32:46,260 --> 00:32:51,419
ask the consumer to enter the pin since

661
00:32:47,880 --> 00:32:53,940
it the flag says to do so okay now the

662
00:32:51,419 --> 00:32:56,039
problem is that the pass has to send the

663
00:32:53,940 --> 00:32:58,200
spin securely to the consumer bank for

664
00:32:56,039 --> 00:33:01,110
authorization we are these many players

665
00:32:58,200 --> 00:33:02,250
in the network okay what pass does is at

666
00:33:01,110 --> 00:33:05,129
the moment it receives the pin

667
00:33:02,250 --> 00:33:07,020
immediately it encrypts the pin using

668
00:33:05,130 --> 00:33:09,059
the key fused on the hardware or get the

669
00:33:07,020 --> 00:33:10,320
key from the payment gateway and let's

670
00:33:09,059 --> 00:33:13,730
call it a the encrypted pin block and

671
00:33:10,320 --> 00:33:15,928
then send it to the other players and

672
00:33:13,730 --> 00:33:17,850
finally reaches the consumer bank and

673
00:33:15,929 --> 00:33:19,500
all other players in the network invoke

674
00:33:17,850 --> 00:33:22,289
a function called pin translation which

675
00:33:19,500 --> 00:33:24,570
involves adjacent to achieve to achieve

676
00:33:22,289 --> 00:33:26,700
pin confidentiality so let's define what

677
00:33:24,570 --> 00:33:28,260
a spin translation means pin translation

678
00:33:26,700 --> 00:33:30,090
basically takes ciphertext and input and

679
00:33:28,260 --> 00:33:33,529
outputs another ciphertext and it does a

680
00:33:30,090 --> 00:33:36,510
Triple DES decrypt and encrypt in metal

681
00:33:33,529 --> 00:33:38,580
okay in order to do this today what we

682
00:33:36,510 --> 00:33:41,879
do is that we basically share keys okay

683
00:33:38,580 --> 00:33:43,470
a priori so let's say let's say for

684
00:33:41,880 --> 00:33:45,149
example much in bank and consumer bank

685
00:33:43,470 --> 00:33:48,990
use payment network as a key custodian

686
00:33:45,149 --> 00:33:50,850
and and much in bank and point-of-sale

687
00:33:48,990 --> 00:33:53,990
partners you would use payment gateway

688
00:33:50,850 --> 00:33:56,520
as a key custodian and first at step one

689
00:33:53,990 --> 00:33:58,110
payment network would generate two

690
00:33:56,520 --> 00:33:59,700
unique keys and then give it to the

691
00:33:58,110 --> 00:34:02,100
merchant bank and consumer bank and

692
00:33:59,700 --> 00:34:04,080
similarly merchant bank would generate

693
00:34:02,100 --> 00:34:05,610
the fresh key and give it to the the

694
00:34:04,080 --> 00:34:07,020
payment gateway well now the

695
00:34:05,610 --> 00:34:08,098
point-of-sale partner comes to the

696
00:34:07,020 --> 00:34:09,750
payment gateway he would generate

697
00:34:08,099 --> 00:34:11,879
another key and give it to the

698
00:34:09,750 --> 00:34:12,929
point-of-sale partners he was English

699
00:34:11,879 --> 00:34:16,770
setup today we achieve that

700
00:34:12,929 --> 00:34:18,899
oh sorry because of this no payment

701
00:34:16,770 --> 00:34:20,310
network end up storing the key sequel

702
00:34:18,899 --> 00:34:22,529
into a number of much in banks plus name

703
00:34:20,310 --> 00:34:24,150
low consumer banks or in case of payment

704
00:34:22,530 --> 00:34:25,770
gateway we end up storing a number

705
00:34:24,150 --> 00:34:28,680
point-of-sale partners plus number of

706
00:34:25,770 --> 00:34:31,350
merchant van keys to achieve pain

707
00:34:28,679 --> 00:34:34,199
confidentiality pass would send the the

708
00:34:31,350 --> 00:34:35,730
pin to the partner and then partner

709
00:34:34,199 --> 00:34:37,500
would generates the encrypted pin block

710
00:34:35,730 --> 00:34:39,570
and send it to the payment gateway and

711
00:34:37,500 --> 00:34:41,969
then payment gateway decrypted encrypts

712
00:34:39,570 --> 00:34:43,320
again st much in banks key much in bank

713
00:34:41,969 --> 00:34:44,580
does the same thing again a ste payment

714
00:34:43,320 --> 00:34:45,990
network key payment network does the

715
00:34:44,580 --> 00:34:47,790
same thing again a snake on your hanky

716
00:34:45,989 --> 00:34:50,969
now the finally con un bank can get

717
00:34:47,790 --> 00:34:54,540
decrypted and then authorize the

718
00:34:50,969 --> 00:34:56,100
transaction father okay what what is the

719
00:34:54,540 --> 00:34:58,590
problem with the setup right so let's

720
00:34:56,100 --> 00:34:59,670
look into the problems so what happens

721
00:34:58,590 --> 00:35:01,260
is that since it's a symmetric key

722
00:34:59,670 --> 00:35:03,090
synthesize a business symmetric in

723
00:35:01,260 --> 00:35:05,790
nature the payment network would have to

724
00:35:03,090 --> 00:35:08,490
refresh the keys more often and these

725
00:35:05,790 --> 00:35:11,130
key changes without you refer further us

726
00:35:08,490 --> 00:35:14,250
sent across the downstream the problem

727
00:35:11,130 --> 00:35:16,560
is that for example if for some reason

728
00:35:14,250 --> 00:35:20,250
if the key refresh did not go as

729
00:35:16,560 --> 00:35:22,890
expected now now the key custodians

730
00:35:20,250 --> 00:35:24,480
would end up having would ever end up

731
00:35:22,890 --> 00:35:26,970
priming the problem whether to decline

732
00:35:24,480 --> 00:35:30,960
or whether to accept by using some kind

733
00:35:26,970 --> 00:35:33,899
of workarounds okay and moreover these

734
00:35:30,960 --> 00:35:35,790
are chips ins are out to a scale and it

735
00:35:33,900 --> 00:35:38,040
also increases a burden all the players

736
00:35:35,790 --> 00:35:39,810
in the ecosystem let's say for example

737
00:35:38,040 --> 00:35:42,930
how do we solve these problems right

738
00:35:39,810 --> 00:35:44,610
obviously it's it's it obviously we

739
00:35:42,930 --> 00:35:46,020
would go for the public key schemes

740
00:35:44,610 --> 00:35:48,120
whether see if they solve the problem

741
00:35:46,020 --> 00:35:49,830
let's say if there is a scheme exists

742
00:35:48,120 --> 00:35:51,150
okay and if it solves a problem what are

743
00:35:49,830 --> 00:35:53,850
the requirements we should meet

744
00:35:51,150 --> 00:35:55,290
so requirements are of the following it

745
00:35:53,850 --> 00:35:57,089
should support all types of payment

746
00:35:55,290 --> 00:36:01,259
types okay and it should also reduce

747
00:35:57,090 --> 00:36:02,790
some burden on HSN and also it should

748
00:36:01,260 --> 00:36:04,320
incur minimal changes ecosystem for

749
00:36:02,790 --> 00:36:06,870
successful deployment these are the main

750
00:36:04,320 --> 00:36:08,490
three requirements okay the main

751
00:36:06,870 --> 00:36:10,799
question is that can we use traditional

752
00:36:08,490 --> 00:36:12,629
PKI are available traditional PK to

753
00:36:10,800 --> 00:36:14,550
solve the problem okay given this

754
00:36:12,630 --> 00:36:16,290
setting let's say if let's say let's get

755
00:36:14,550 --> 00:36:17,850
ambitious and then kunjumon Bank

756
00:36:16,290 --> 00:36:19,350
generates the key pair and then send all

757
00:36:17,850 --> 00:36:21,810
the keys to the point-of-sale terminal

758
00:36:19,350 --> 00:36:23,040
but the problem is that the most of the

759
00:36:21,810 --> 00:36:25,110
point of sales do not have enough space

760
00:36:23,040 --> 00:36:26,640
to do this okay the other option is

761
00:36:25,110 --> 00:36:28,170
basically share this case with these two

762
00:36:26,640 --> 00:36:30,299
parties but the problem is that they

763
00:36:28,170 --> 00:36:32,250
don't know which key to use or they end

764
00:36:30,300 --> 00:36:34,230
up needing a map table from the payment

765
00:36:32,250 --> 00:36:35,610
network say their payment net will be

766
00:36:34,230 --> 00:36:36,880
able to share this map table to these

767
00:36:35,610 --> 00:36:38,619
players are they would have to

768
00:36:36,880 --> 00:36:40,329
the payment network would have to

769
00:36:38,619 --> 00:36:41,140
implement this online service or they

770
00:36:40,329 --> 00:36:43,089
would have to change the entire

771
00:36:41,140 --> 00:36:46,180
transaction flow other option is

772
00:36:43,089 --> 00:36:48,069
basically share the network keys to the

773
00:36:46,180 --> 00:36:50,618
postal mail directly but the problem

774
00:36:48,069 --> 00:36:53,109
here is that the payment networks still

775
00:36:50,619 --> 00:36:56,769
need an HSM and moreover much in may

776
00:36:53,109 --> 00:36:58,420
lose the flexibility and routing okay if

777
00:36:56,769 --> 00:37:00,519
you really want to go this route let's

778
00:36:58,420 --> 00:37:02,680
do more smarter approach let's you the

779
00:37:00,519 --> 00:37:04,868
chip card basically so anyway chip card

780
00:37:02,680 --> 00:37:07,899
comes from the consumer bank so what can

781
00:37:04,869 --> 00:37:09,339
we do is that let's let's the consumer

782
00:37:07,900 --> 00:37:10,299
bank burn the keys as part of the chip

783
00:37:09,339 --> 00:37:11,828
card okay

784
00:37:10,299 --> 00:37:12,999
there is unfortunately there is a

785
00:37:11,829 --> 00:37:14,739
setting called offline data

786
00:37:12,999 --> 00:37:17,049
authentication in the current eme spec

787
00:37:14,739 --> 00:37:18,670
so what it basically means is that when

788
00:37:17,049 --> 00:37:20,019
you when you basically swipes when you

789
00:37:18,670 --> 00:37:21,819
basically inserts the chip card in the

790
00:37:20,019 --> 00:37:23,709
in the in the past terminal pass

791
00:37:21,819 --> 00:37:25,269
basically verifies whether this card is

792
00:37:23,710 --> 00:37:26,440
coming from the right entity or not we

793
00:37:25,269 --> 00:37:29,890
could use that flow to solve this

794
00:37:26,440 --> 00:37:31,869
problem in order to do this basically

795
00:37:29,890 --> 00:37:33,308
the consumer Bank burn these extra keys

796
00:37:31,869 --> 00:37:35,979
which is basically the bank's public key

797
00:37:33,309 --> 00:37:37,539
in the certificate so and then at the

798
00:37:35,979 --> 00:37:39,430
time of payment basically the boss

799
00:37:37,539 --> 00:37:40,900
verifies the card whether it's coming

800
00:37:39,430 --> 00:37:42,549
from the right entity or not but the

801
00:37:40,900 --> 00:37:43,989
problem is that as we seen before our

802
00:37:42,549 --> 00:37:46,660
requirement is to support all types of

803
00:37:43,989 --> 00:37:48,130
payment types obviously the max type

804
00:37:46,660 --> 00:37:50,469
would not have this extra material and

805
00:37:48,130 --> 00:37:52,779
you end up breaking entire ecosystem if

806
00:37:50,469 --> 00:37:54,729
you go this route and moreover Oda is

807
00:37:52,779 --> 00:37:58,029
optional and increases the cost on the

808
00:37:54,729 --> 00:37:59,499
other consumer Bank since it's an

809
00:37:58,029 --> 00:38:00,849
optional and increases the cost you and

810
00:37:59,499 --> 00:38:02,169
you end up having even though our chip

811
00:38:00,849 --> 00:38:05,319
cards if they may not have this set up

812
00:38:02,170 --> 00:38:06,729
at all available okay what can we do

813
00:38:05,319 --> 00:38:08,799
about it so when we looked at this

814
00:38:06,729 --> 00:38:10,269
scheme we find the proxy encryption

815
00:38:08,799 --> 00:38:12,369
interesting and it solves a problem

816
00:38:10,269 --> 00:38:14,499
effectively and I will explain you why

817
00:38:12,369 --> 00:38:18,670
it solves a problem and what scheme we

818
00:38:14,499 --> 00:38:20,169
use it and why we use it see just for

819
00:38:18,670 --> 00:38:22,239
the just for this just in case if you

820
00:38:20,170 --> 00:38:24,400
don't know what's pyaari means similar

821
00:38:22,239 --> 00:38:25,839
to the PK e be a public key crypto you

822
00:38:24,400 --> 00:38:28,779
get these additional two methods called

823
00:38:25,839 --> 00:38:30,640
Riki's Sandri encryption keys the the

824
00:38:28,779 --> 00:38:32,319
traditional use case what outline and

825
00:38:30,640 --> 00:38:35,440
the research papers is that let's say if

826
00:38:32,319 --> 00:38:37,058
Alice wants to send lot of data Alice

827
00:38:35,440 --> 00:38:39,549
wants to send encrypted data to a lot of

828
00:38:37,059 --> 00:38:42,219
parties either Alice would have to

829
00:38:39,549 --> 00:38:45,219
encrypt data against all the public keys

830
00:38:42,219 --> 00:38:46,239
or shared the secret keys or instead she

831
00:38:45,219 --> 00:38:49,059
can basically delegate the

832
00:38:46,239 --> 00:38:50,289
responsibility some proxy to basically

833
00:38:49,059 --> 00:38:52,299
translate the ciphertext

834
00:38:50,289 --> 00:38:54,189
to someone else a ciphertext based on

835
00:38:52,299 --> 00:38:57,910
their public keys so the way it works is

836
00:38:54,189 --> 00:38:59,739
that Alice needs a proxy obviously it

837
00:38:57,910 --> 00:39:01,538
gets the public key of the Bob from the

838
00:38:59,739 --> 00:39:03,999
proxy and then gives the URI encryption

839
00:39:01,539 --> 00:39:06,339
keys and then gives the encrypted

840
00:39:03,999 --> 00:39:08,828
message and goes offline Bob can come

841
00:39:06,339 --> 00:39:11,049
later and basically request for the

842
00:39:08,829 --> 00:39:13,209
array encrypted cipher text and can

843
00:39:11,049 --> 00:39:15,219
basically decrypt after that so we need

844
00:39:13,209 --> 00:39:17,469
to understand the properties before we

845
00:39:15,219 --> 00:39:19,689
move on to the next slide so the most of

846
00:39:17,469 --> 00:39:21,160
the engender pyaari schemes comes over

847
00:39:19,689 --> 00:39:22,629
these properties let's say unique

848
00:39:21,160 --> 00:39:26,649
direction or bi-directional what does it

849
00:39:22,630 --> 00:39:28,390
mean is that proxy can try in case of

850
00:39:26,650 --> 00:39:30,099
any directional proxy can only translate

851
00:39:28,390 --> 00:39:32,140
ciphertext from Alice to Bob whereas in

852
00:39:30,099 --> 00:39:36,519
case of bi-directional proxy can

853
00:39:32,140 --> 00:39:38,049
translate from both ways what collision

854
00:39:36,519 --> 00:39:39,939
safe means is let's say Brock proxy and

855
00:39:38,049 --> 00:39:43,089
Bob can collude they should not be able

856
00:39:39,939 --> 00:39:44,379
to learn the Alice's thread key when

857
00:39:43,089 --> 00:39:46,959
non-interacting means let's say for

858
00:39:44,380 --> 00:39:48,549
example alice and bob should should not

859
00:39:46,959 --> 00:39:50,348
want to be online at the time of

860
00:39:48,549 --> 00:39:52,839
generating these re-encrypted keys which

861
00:39:50,349 --> 00:39:55,150
is a desired property right when it

862
00:39:52,839 --> 00:39:56,650
comes to the nan and it also have a non

863
00:39:55,150 --> 00:39:57,939
transitive properties what it means is

864
00:39:56,650 --> 00:40:00,849
that let expand the setting a little

865
00:39:57,939 --> 00:40:03,009
more let's say our a a as a as a

866
00:40:00,849 --> 00:40:06,429
relation with B by a proxy 1 and B as a

867
00:40:03,009 --> 00:40:08,259
relation with C with the proxy two let's

868
00:40:06,429 --> 00:40:10,299
say for example proxy 1 and proxy du-ha

869
00:40:08,259 --> 00:40:13,359
is able to translate ciphertext from A

870
00:40:10,299 --> 00:40:15,400
to B yre encryption keys using these

871
00:40:13,359 --> 00:40:17,288
keys proxy 1 and proxy T would not be

872
00:40:15,400 --> 00:40:18,969
able to divert the ciphertext to Charlie

873
00:40:17,289 --> 00:40:20,650
without a is concerned with Alice

874
00:40:18,969 --> 00:40:24,699
consent ok which is also desired

875
00:40:20,650 --> 00:40:27,369
property okay now now using the setting

876
00:40:24,699 --> 00:40:30,009
okay let's see how the at high level how

877
00:40:27,369 --> 00:40:31,900
the pin translation works okay we all

878
00:40:30,009 --> 00:40:34,150
replace this traditional Pinter

879
00:40:31,900 --> 00:40:36,609
oscillation boxes by invoking these

880
00:40:34,150 --> 00:40:39,609
functions point-of-sale partner would

881
00:40:36,609 --> 00:40:41,439
invoke a PR e dot and function payment

882
00:40:39,609 --> 00:40:43,419
gateway and the payment network simply

883
00:40:41,439 --> 00:40:45,279
do our encryption and merchant bank does

884
00:40:43,419 --> 00:40:47,109
no work at all it's simply forward safe

885
00:40:45,279 --> 00:40:48,549
and continue bang does one extra

886
00:40:47,109 --> 00:40:51,669
decryption operation and then base

887
00:40:48,549 --> 00:40:54,009
clathrate is a transaction okay okay

888
00:40:51,669 --> 00:40:56,229
which scheme we should use okay so the

889
00:40:54,009 --> 00:40:58,390
main important property is what do you

890
00:40:56,229 --> 00:41:00,459
want from a PR e scheme is that it

891
00:40:58,390 --> 00:41:02,618
should be transitive not non-transitive

892
00:41:00,459 --> 00:41:03,730
it should be transitive because we want

893
00:41:02,619 --> 00:41:06,390
we don't want the much in

894
00:41:03,730 --> 00:41:10,000
Bank to do any extra work and

895
00:41:06,390 --> 00:41:11,589
non-interactive so that means nobody

896
00:41:10,000 --> 00:41:14,020
should not know each other secret key

897
00:41:11,589 --> 00:41:17,078
okay if you look at the literature

898
00:41:14,020 --> 00:41:21,390
apparently it's it's kind of hard to get

899
00:41:17,079 --> 00:41:23,859
this these two properties together

900
00:41:21,390 --> 00:41:26,589
fortunately we were able to it be a

901
00:41:23,859 --> 00:41:27,520
scheme to address our to address our

902
00:41:26,589 --> 00:41:30,160
setting

903
00:41:27,520 --> 00:41:31,690
unfortunately the BBA scheme is not it's

904
00:41:30,160 --> 00:41:33,910
not non-interactive it's more of an

905
00:41:31,690 --> 00:41:36,160
interactive because of our thrust model

906
00:41:33,910 --> 00:41:38,319
we can actually realize this relax this

907
00:41:36,160 --> 00:41:39,910
requirement and moreover BBS has one

908
00:41:38,320 --> 00:41:42,010
more problem let's say for example a

909
00:41:39,910 --> 00:41:43,930
proxy and recipient can collude then

910
00:41:42,010 --> 00:41:45,849
source can basically get the ream get

911
00:41:43,930 --> 00:41:47,470
the secret key of the sorry if the

912
00:41:45,849 --> 00:41:50,260
project the proxy proxy and recipient

913
00:41:47,470 --> 00:41:52,000
can collude but now then they can they

914
00:41:50,260 --> 00:41:54,160
will be able to learn the sources secret

915
00:41:52,000 --> 00:41:57,010
key because of orders model we can also

916
00:41:54,160 --> 00:41:58,890
get our own with that let's look into

917
00:41:57,010 --> 00:42:01,180
the key setup using this scheme

918
00:41:58,890 --> 00:42:06,129
obviously we have this these many

919
00:42:01,180 --> 00:42:07,960
players we need to choose we need to see

920
00:42:06,130 --> 00:42:09,819
payment network and merchant bank needs

921
00:42:07,960 --> 00:42:12,250
to be trusted the reason is that much in

922
00:42:09,819 --> 00:42:14,079
bank does lot of work on certifying the

923
00:42:12,250 --> 00:42:15,160
point-of-sale terminals but why do we

924
00:42:14,079 --> 00:42:16,859
need to choose payment network as a

925
00:42:15,160 --> 00:42:19,270
trusted party let's say for example

926
00:42:16,859 --> 00:42:22,089
during the online phase consumer bank

927
00:42:19,270 --> 00:42:23,680
can go offline okay for them going

928
00:42:22,089 --> 00:42:25,720
offline means they were they have a

929
00:42:23,680 --> 00:42:27,700
problem right whether to what should we

930
00:42:25,720 --> 00:42:29,980
do and when they're comin their customer

931
00:42:27,700 --> 00:42:31,689
is basically making a payment right if

932
00:42:29,980 --> 00:42:32,829
the consumer bank goes offline now the

933
00:42:31,690 --> 00:42:34,869
option for the payment network could

934
00:42:32,829 --> 00:42:37,060
decline a transaction so declining a

935
00:42:34,869 --> 00:42:39,579
transaction is not a is not is not a is

936
00:42:37,060 --> 00:42:41,290
not an acceptable criteria in that case

937
00:42:39,579 --> 00:42:43,030
what they do is that they would end up

938
00:42:41,290 --> 00:42:44,680
sharing the secret keys with the payment

939
00:42:43,030 --> 00:42:46,210
network anyway because of the trust

940
00:42:44,680 --> 00:42:47,980
model what can we do in the scheme is

941
00:42:46,210 --> 00:42:50,710
that payment network can generate this

942
00:42:47,980 --> 00:42:52,839
keys for both of these parties and and

943
00:42:50,710 --> 00:42:55,060
then also and share these keys in

944
00:42:52,839 --> 00:42:56,650
secured shawols a queue to the both

945
00:42:55,060 --> 00:42:59,049
consumer bank and merchant bank and

946
00:42:56,650 --> 00:43:02,170
payment never can keep very encryption

947
00:42:59,050 --> 00:43:03,760
keys to itself okay now since the match

948
00:43:02,170 --> 00:43:05,349
in Bank is a trusted party now what he

949
00:43:03,760 --> 00:43:07,300
does is a generate the keys for the

950
00:43:05,349 --> 00:43:08,650
point-of-sale partner and gender 3

951
00:43:07,300 --> 00:43:11,440
encryption keys for the payment gateway

952
00:43:08,650 --> 00:43:14,140
and the only shared the public key to

953
00:43:11,440 --> 00:43:15,460
the point-of-sale partner okay and share

954
00:43:14,140 --> 00:43:17,200
Siri encryption keys to the payment

955
00:43:15,460 --> 00:43:18,910
gateway now in this case e

956
00:43:17,200 --> 00:43:20,618
no payment yet friend from point-of-sale

957
00:43:18,910 --> 00:43:22,569
Ponton can collude they would not be

958
00:43:20,619 --> 00:43:25,660
able only much in Bank secret key so we

959
00:43:22,570 --> 00:43:28,240
can keep the the left most parties

960
00:43:25,660 --> 00:43:30,040
remain say untrusted all the right most

961
00:43:28,240 --> 00:43:31,990
can stay trusted as you see here we have

962
00:43:30,040 --> 00:43:37,540
two we have two entities which are

963
00:43:31,990 --> 00:43:39,069
trusted and untrusted now we end up

964
00:43:37,540 --> 00:43:40,960
having storing more keys let's say for

965
00:43:39,070 --> 00:43:42,190
example payment networks storing the key

966
00:43:40,960 --> 00:43:44,800
sequel into number of merchant bank

967
00:43:42,190 --> 00:43:47,320
small x number of onion banks the

968
00:43:44,800 --> 00:43:49,030
payment gateway you'd a storing number

969
00:43:47,320 --> 00:43:51,640
of point-of-sale partners x number of

970
00:43:49,030 --> 00:43:53,440
much in banks let's see how the

971
00:43:51,640 --> 00:43:55,000
transaction flow works in case of a new

972
00:43:53,440 --> 00:43:56,680
setting now when you when the

973
00:43:55,000 --> 00:43:58,359
point-of-sale receives the pin he uses

974
00:43:56,680 --> 00:44:00,190
simply his public key to encrypt the pin

975
00:43:58,359 --> 00:44:01,029
and then sends the encrypted pin block

976
00:44:00,190 --> 00:44:03,310
to payment gateway

977
00:44:01,030 --> 00:44:05,200
now the payment gateway uses re-encrypt

978
00:44:03,310 --> 00:44:07,180
operation to translate to the how much

979
00:44:05,200 --> 00:44:09,490
in bank much in bank simply does forward

980
00:44:07,180 --> 00:44:11,078
payment network does one more en crypt

981
00:44:09,490 --> 00:44:12,848
and still give it to the consumer Bank

982
00:44:11,079 --> 00:44:13,990
Canara Bank does one extra decrypt

983
00:44:12,849 --> 00:44:16,750
operation and then perform the

984
00:44:13,990 --> 00:44:19,509
authorization as we clearly see the

985
00:44:16,750 --> 00:44:20,829
advantage here is that now the payment

986
00:44:19,510 --> 00:44:22,540
network and payment gateway no longer

987
00:44:20,829 --> 00:44:26,140
need to use HSM for this particular type

988
00:44:22,540 --> 00:44:29,040
of transaction and moreover much in bank

989
00:44:26,140 --> 00:44:31,328
does nothing he's just simple forward

990
00:44:29,040 --> 00:44:32,349
whereas in case of payment network they

991
00:44:31,329 --> 00:44:34,660
don't have to worry about the key

992
00:44:32,349 --> 00:44:37,510
refresh at all thereby processing

993
00:44:34,660 --> 00:44:39,520
transactions more efficiently and we get

994
00:44:37,510 --> 00:44:41,920
this we we got this weakness of BBS

995
00:44:39,520 --> 00:44:43,839
scheme around in our we got this

996
00:44:41,920 --> 00:44:46,329
workaround of the weakness of BBS scheme

997
00:44:43,839 --> 00:44:50,049
in order of smaller by making by making

998
00:44:46,329 --> 00:44:52,540
these two parties collusion safe okay so

999
00:44:50,050 --> 00:44:55,450
I'm presenting some experimental

1000
00:44:52,540 --> 00:44:57,720
benchmarks here so the main important

1001
00:44:55,450 --> 00:45:00,160
metric we care about is in - and latency

1002
00:44:57,720 --> 00:45:01,569
because of the scheme we we are going to

1003
00:45:00,160 --> 00:45:03,210
add extra warhead on each and every

1004
00:45:01,569 --> 00:45:05,050
party's let's say for example a

1005
00:45:03,210 --> 00:45:07,930
point-of-sale partner would end up

1006
00:45:05,050 --> 00:45:09,849
spending a close to milli second and

1007
00:45:07,930 --> 00:45:11,020
rest of the part is spent less than a

1008
00:45:09,849 --> 00:45:12,730
millisecond but if you look at the

1009
00:45:11,020 --> 00:45:14,380
overall line - and latency which is

1010
00:45:12,730 --> 00:45:16,660
insignificant compared to the total

1011
00:45:14,380 --> 00:45:19,000
transaction time you spend Winton when

1012
00:45:16,660 --> 00:45:20,529
it comes to the total payment okay so

1013
00:45:19,000 --> 00:45:23,380
throughput is easy to achieve we just

1014
00:45:20,530 --> 00:45:24,849
need a at least greater than 10k for the

1015
00:45:23,380 --> 00:45:26,589
pin translation which means for

1016
00:45:24,849 --> 00:45:28,240
basically the bunch of rien crypt

1017
00:45:26,589 --> 00:45:30,430
operations which easy to scale you just

1018
00:45:28,240 --> 00:45:32,229
were using four nodes when it comes to

1019
00:45:30,430 --> 00:45:34,899
the space over

1020
00:45:32,230 --> 00:45:37,840
as you see here payment network went

1021
00:45:34,900 --> 00:45:40,270
from a number of much in banks plus

1022
00:45:37,840 --> 00:45:41,410
number of canoeing bank keys to number

1023
00:45:40,270 --> 00:45:43,180
of much in banks times namely our

1024
00:45:41,410 --> 00:45:45,580
consumer banks it looks asymptotically

1025
00:45:43,180 --> 00:45:46,690
bad but in practice it's negligible I

1026
00:45:45,580 --> 00:45:51,520
mean we can actually fit into the

1027
00:45:46,690 --> 00:45:53,700
commodity Ram as you see here the PRI

1028
00:45:51,520 --> 00:45:55,840
Bassman confidentiality supports all the

1029
00:45:53,700 --> 00:45:57,580
supports all they post requirements

1030
00:45:55,840 --> 00:45:59,020
which basically supports all terms of

1031
00:45:57,580 --> 00:46:01,569
all types of payment types includes the

1032
00:45:59,020 --> 00:46:03,220
legacy and also reduces HSM Relenza

1033
00:46:01,570 --> 00:46:05,740
and the entire ecosystem for this

1034
00:46:03,220 --> 00:46:07,750
particular payment type okay so now the

1035
00:46:05,740 --> 00:46:09,160
biggest problem is that we claim that we

1036
00:46:07,750 --> 00:46:11,260
are going to incur minimal changes right

1037
00:46:09,160 --> 00:46:13,299
we cannot we cannot solve we cannot we

1038
00:46:11,260 --> 00:46:15,340
cannot deploy this scheme without adding

1039
00:46:13,300 --> 00:46:18,250
one extra field to the or to the message

1040
00:46:15,340 --> 00:46:19,870
that what we have obviously it may be it

1041
00:46:18,250 --> 00:46:22,690
may be expensive to deploy it right away

1042
00:46:19,870 --> 00:46:25,390
as part of the global payment but at

1043
00:46:22,690 --> 00:46:27,250
least the local domestic card processing

1044
00:46:25,390 --> 00:46:29,290
networks would see the immediate

1045
00:46:27,250 --> 00:46:31,300
advantage of this scheme because

1046
00:46:29,290 --> 00:46:33,040
basically the most of the payment

1047
00:46:31,300 --> 00:46:34,150
networks are global in nature whereas in

1048
00:46:33,040 --> 00:46:35,890
case of domestic card processing

1049
00:46:34,150 --> 00:46:38,050
networks will only deal with a in

1050
00:46:35,890 --> 00:46:39,910
country specific traffic there you would

1051
00:46:38,050 --> 00:46:41,770
not you would not see a big deal to

1052
00:46:39,910 --> 00:46:45,580
implement or to basically take it to the

1053
00:46:41,770 --> 00:46:49,330
next slow today I'm going to talk about

1054
00:46:45,580 --> 00:46:51,670
another problem at very high level today

1055
00:46:49,330 --> 00:46:53,319
merchants lose a lot of money because of

1056
00:46:51,670 --> 00:46:55,510
the court apartments general in general

1057
00:46:53,320 --> 00:46:57,700
consumers abandon the carts due to three

1058
00:46:55,510 --> 00:47:00,070
reasons mainly can be classified into

1059
00:46:57,700 --> 00:47:02,410
two categories the first and two are

1060
00:47:00,070 --> 00:47:03,700
basically the security because consumers

1061
00:47:02,410 --> 00:47:05,799
don't trust these merchants with their

1062
00:47:03,700 --> 00:47:07,299
credentials and the third one is much

1063
00:47:05,800 --> 00:47:09,670
more interesting because they they don't

1064
00:47:07,300 --> 00:47:12,550
find a lot of payment options available

1065
00:47:09,670 --> 00:47:13,990
in that much and website which is a very

1066
00:47:12,550 --> 00:47:15,370
difficult problem right the reason why

1067
00:47:13,990 --> 00:47:16,750
it doesn't exist because an unknown

1068
00:47:15,370 --> 00:47:18,819
payment a--when it's the unknown payment

1069
00:47:16,750 --> 00:47:20,530
type a payment I which is popular in

1070
00:47:18,820 --> 00:47:22,000
consumer doesn't mean a merchant should

1071
00:47:20,530 --> 00:47:23,500
accept it doesn't mean it's widely

1072
00:47:22,000 --> 00:47:26,470
acceptable right a payment system which

1073
00:47:23,500 --> 00:47:28,660
is not widely acceptable is not a is not

1074
00:47:26,470 --> 00:47:30,279
a payment system at all okay but still

1075
00:47:28,660 --> 00:47:32,589
some consumers wants to use a payment

1076
00:47:30,280 --> 00:47:34,990
system to pay right how do we how do we

1077
00:47:32,590 --> 00:47:37,870
support these kind of edge cases or

1078
00:47:34,990 --> 00:47:39,459
corner cases if you if you dig deeper in

1079
00:47:37,870 --> 00:47:41,109
this question you're gonna we're going

1080
00:47:39,460 --> 00:47:43,690
to get one interesting requirement right

1081
00:47:41,110 --> 00:47:44,590
how do we help merchants cross payment

1082
00:47:43,690 --> 00:47:48,100
types

1083
00:47:44,590 --> 00:47:49,800
right here here let's say for example

1084
00:47:48,100 --> 00:47:53,770
the way we solve this problem is that

1085
00:47:49,800 --> 00:47:54,970
let's say for example we need to turn we

1086
00:47:53,770 --> 00:47:57,310
need to turn this payment credentials

1087
00:47:54,970 --> 00:47:59,140
into some kind of a cipher ciphertext

1088
00:47:57,310 --> 00:48:00,910
and basically help merchants take the

1089
00:47:59,140 --> 00:48:02,980
ciphertext and process payments based on

1090
00:48:00,910 --> 00:48:04,600
that because of the ciphertext we can

1091
00:48:02,980 --> 00:48:06,760
actually help consumers to proliferate

1092
00:48:04,600 --> 00:48:09,790
decipher text to all the apps you would

1093
00:48:06,760 --> 00:48:12,010
like to use okay without compromising

1094
00:48:09,790 --> 00:48:13,840
the confidentiality now the problem is

1095
00:48:12,010 --> 00:48:16,240
that the payment gateway is a simple

1096
00:48:13,840 --> 00:48:18,280
abstraction of it takes an input of pan

1097
00:48:16,240 --> 00:48:20,259
data a plain pan date and then outputs 1

1098
00:48:18,280 --> 00:48:22,390
or 0 right but how do we help payment

1099
00:48:20,260 --> 00:48:24,550
gateway processes ciphertext right we

1100
00:48:22,390 --> 00:48:26,140
need to introduce the CT provider which

1101
00:48:24,550 --> 00:48:27,850
is a the one who provides the cipher

1102
00:48:26,140 --> 00:48:29,529
text in the first place so that payment

1103
00:48:27,850 --> 00:48:33,009
gateway can invoke this particular

1104
00:48:29,530 --> 00:48:35,230
entity to get the actual plain data and

1105
00:48:33,010 --> 00:48:38,740
then process a payment but the problem

1106
00:48:35,230 --> 00:48:41,140
is that you can't expect the providers

1107
00:48:38,740 --> 00:48:42,850
to be online all the time ok so because

1108
00:48:41,140 --> 00:48:44,529
of the pyaari they can initiate once

1109
00:48:42,850 --> 00:48:46,000
give it to the consumer and they can go

1110
00:48:44,530 --> 00:48:48,490
offline and they can delegate the

1111
00:48:46,000 --> 00:48:52,270
responsibility to one entity here ok now

1112
00:48:48,490 --> 00:48:56,350
but that one entity not only trusted not

1113
00:48:52,270 --> 00:48:58,540
only now the new entity is is trusted

1114
00:48:56,350 --> 00:49:00,970
for even enforcing the policies of rien

1115
00:48:58,540 --> 00:49:05,220
corruptions again is done so in that

1116
00:49:00,970 --> 00:49:08,080
case we we kind of envision a scheme

1117
00:49:05,220 --> 00:49:10,419
where we where we combine these three

1118
00:49:08,080 --> 00:49:11,560
primitives for which involves proxy

1119
00:49:10,420 --> 00:49:11,980
encryption interlace shakes and

1120
00:49:11,560 --> 00:49:14,080
blockchain

1121
00:49:11,980 --> 00:49:16,330
to address our problem which is

1122
00:49:14,080 --> 00:49:18,100
basically like a system which sits in

1123
00:49:16,330 --> 00:49:21,250
between two worlds which is under

1124
00:49:18,100 --> 00:49:25,870
servile and a trusted world like sucker

1125
00:49:21,250 --> 00:49:29,560
and Avengers movie ok thank you as we

1126
00:49:25,870 --> 00:49:33,009
see here we showed the pyaari scheme

1127
00:49:29,560 --> 00:49:36,730
helps he helps address the pin up in

1128
00:49:33,010 --> 00:49:38,620
confidentiality without without without

1129
00:49:36,730 --> 00:49:40,600
using hsn's at all and the in the throw

1130
00:49:38,620 --> 00:49:42,790
out in in the entire ecosystem when it

1131
00:49:40,600 --> 00:49:44,589
comes to e-commerce pyaari can help

1132
00:49:42,790 --> 00:49:48,990
consumers choose any preferred mobile

1133
00:49:44,590 --> 00:49:53,310
application for checkout thank you

1134
00:49:48,990 --> 00:49:53,310
[Applause]

1135
00:49:55,530 --> 00:50:02,970
we have time for questions do you want

1136
00:49:57,880 --> 00:50:02,970
to use the microphone that's the closest

1137
00:50:12,780 --> 00:50:19,170
just a quick question the proxy

1138
00:50:16,000 --> 00:50:23,590
encryption scheme you used BBS 98 is

1139
00:50:19,170 --> 00:50:26,170
only CPA secure exactly does it create

1140
00:50:23,590 --> 00:50:27,340
any problems for your solution so what

1141
00:50:26,170 --> 00:50:29,020
we do in this case is that we are going

1142
00:50:27,340 --> 00:50:30,520
to use it for we're gonna use it as a

1143
00:50:29,020 --> 00:50:32,170
hybrid encryption so the point-of-sale

1144
00:50:30,520 --> 00:50:33,790
body is gonna generate the fresh key

1145
00:50:32,170 --> 00:50:35,650
every time and then encrypts have been

1146
00:50:33,790 --> 00:50:44,860
using that and then we only wrap that

1147
00:50:35,650 --> 00:50:46,900
key every time using pyaari I have

1148
00:50:44,860 --> 00:50:49,090
question what is the state of this

1149
00:50:46,900 --> 00:50:51,040
implementation as a proof of concept do

1150
00:50:49,090 --> 00:50:55,330
you have any plans to implement it and

1151
00:50:51,040 --> 00:50:57,160
if you don't well this requires the

1152
00:50:55,330 --> 00:50:58,660
standardization of it we are working

1153
00:50:57,160 --> 00:51:01,330
with the local domestic card processing

1154
00:50:58,660 --> 00:51:03,069
teams to do that does I have any plans

1155
00:51:01,330 --> 00:51:04,779
or dates when this is going to be

1156
00:51:03,070 --> 00:51:10,630
implemented we are working with the

1157
00:51:04,780 --> 00:51:13,030
standardization right now okay hi um

1158
00:51:10,630 --> 00:51:15,010
earlier you showed a slide on the

1159
00:51:13,030 --> 00:51:17,080
latency of the new system and I was just

1160
00:51:15,010 --> 00:51:20,530
wondering how that compared to the hsm

1161
00:51:17,080 --> 00:51:22,509
based solution okay oh because in the

1162
00:51:20,530 --> 00:51:23,890
previous in today what what we use that

1163
00:51:22,510 --> 00:51:26,200
we use a lot of symmetric keys and use

1164
00:51:23,890 --> 00:51:29,290
HSMs to do the pin translation basically

1165
00:51:26,200 --> 00:51:31,000
HSM receives an input and then inside it

1166
00:51:29,290 --> 00:51:32,800
gives a decrypt using Triple DES and

1167
00:51:31,000 --> 00:51:35,290
then encrypts again is the res fence for

1168
00:51:32,800 --> 00:51:36,550
a receive and secret key in the PRI you

1169
00:51:35,290 --> 00:51:37,870
don't have these edges on at all since

1170
00:51:36,550 --> 00:51:39,310
already encryption key is a public key

1171
00:51:37,870 --> 00:51:41,500
you can do it in memory

1172
00:51:39,310 --> 00:51:45,970
you don't need HSM for that okay so is

1173
00:51:41,500 --> 00:51:48,340
this faster I know it would be slow but

1174
00:51:45,970 --> 00:51:49,720
you do be secure but but but the desired

1175
00:51:48,340 --> 00:51:55,720
scale we can actually achieve it even in

1176
00:51:49,720 --> 00:51:58,779
the new scheme - okay thanks hi did you

1177
00:51:55,720 --> 00:52:00,850
say that you since you used BBS 98 that

1178
00:51:58,780 --> 00:52:04,950
it's safe to assume that your current

1179
00:52:00,850 --> 00:52:07,270
scheme is not is currently interactive

1180
00:52:04,950 --> 00:52:09,370
no it's it's here what we do is that we

1181
00:52:07,270 --> 00:52:11,770
get around that requirement by like the

1182
00:52:09,370 --> 00:52:15,040
payment network does the key key

1183
00:52:11,770 --> 00:52:17,830
ceremony so if the but okay so the

1184
00:52:15,040 --> 00:52:20,470
payment network itself like for BBS 98

1185
00:52:17,830 --> 00:52:22,230
it's done by Alice's private key being

1186
00:52:20,470 --> 00:52:24,240
divided by Bob's private key

1187
00:52:22,230 --> 00:52:25,530
so how do you sell the payment network

1188
00:52:24,240 --> 00:52:27,479
computes this itself and then

1189
00:52:25,530 --> 00:52:28,980
distributes the exactly encryption key

1190
00:52:27,480 --> 00:52:30,420
yeah exactly

1191
00:52:28,980 --> 00:52:32,460
the reason they do it it because right

1192
00:52:30,420 --> 00:52:34,050
now the consumer bank can go offline in

1193
00:52:32,460 --> 00:52:35,580
that case they would have to share the

1194
00:52:34,050 --> 00:52:37,680
secret keys anyway to the payment

1195
00:52:35,580 --> 00:52:39,569
network here the the when it comes to

1196
00:52:37,680 --> 00:52:41,520
the when it comes to the processing

1197
00:52:39,570 --> 00:52:44,520
transaction for them the biggest goal is

1198
00:52:41,520 --> 00:52:45,900
to process the payment right so for that

1199
00:52:44,520 --> 00:52:47,160
that's the main priority so they would

1200
00:52:45,900 --> 00:52:52,040
end up sharing the key with the payment

1201
00:52:47,160 --> 00:52:53,960
network anyway okay thank you hello a

1202
00:52:52,040 --> 00:52:57,090
question here

1203
00:52:53,960 --> 00:52:59,400
so using HSM scheme you were using

1204
00:52:57,090 --> 00:53:01,170
Triple DES there HSM now in the new

1205
00:52:59,400 --> 00:53:02,550
scheme without HSM are we still

1206
00:53:01,170 --> 00:53:04,980
continuing with Triple DES so now we are

1207
00:53:02,550 --> 00:53:06,630
using AES with a EAD you know so like I

1208
00:53:04,980 --> 00:53:07,890
said so we are going to use hybrid

1209
00:53:06,630 --> 00:53:11,310
encryption we are going to wrap the

1210
00:53:07,890 --> 00:53:13,500
symmetric using pyaari okay so although

1211
00:53:11,310 --> 00:53:15,359
all the entities in ecosystem they use

1212
00:53:13,500 --> 00:53:16,740
they do the public key operations no

1213
00:53:15,359 --> 00:53:18,150
longer require a symmetric operation

1214
00:53:16,740 --> 00:53:21,000
thereby eliminating the need for each

1215
00:53:18,150 --> 00:53:23,340
essence in the online face in the online

1216
00:53:21,000 --> 00:53:25,050
phase visa still up sorry payment

1217
00:53:23,340 --> 00:53:27,109
networks still have to use a pair HSM

1218
00:53:25,050 --> 00:53:32,040
because it has to authorize the pin

1219
00:53:27,109 --> 00:53:34,020
Thank You Andrey no thanks yeah just one

1220
00:53:32,040 --> 00:53:35,759
more question so what do you do with

1221
00:53:34,020 --> 00:53:37,950
this proxy encryption falls to

1222
00:53:35,760 --> 00:53:40,940
transformational encryption category

1223
00:53:37,950 --> 00:53:44,520
rate and I've seen some skepticism in

1224
00:53:40,940 --> 00:53:46,770
Academical and industry about strength

1225
00:53:44,520 --> 00:53:49,650
so for transformational encryption in

1226
00:53:46,770 --> 00:53:51,330
general so probably it's the same no

1227
00:53:49,650 --> 00:53:53,190
problem as how it is have a morphic

1228
00:53:51,330 --> 00:53:55,020
encryption so did you doing like any

1229
00:53:53,190 --> 00:53:57,440
serious research with short party to

1230
00:53:55,020 --> 00:54:00,690
make sure that this concern as a result

1231
00:53:57,440 --> 00:54:02,430
okay so I'm not sure about any other

1232
00:54:00,690 --> 00:54:05,910
schemes which helps the salsas problem

1233
00:54:02,430 --> 00:54:11,069
but I'm happy to know offline okay thank

1234
00:54:05,910 --> 00:54:13,710
you back to the first question that once

1235
00:54:11,070 --> 00:54:16,500
was not clear for me because even if we

1236
00:54:13,710 --> 00:54:18,869
use a hybrid encryption if approach the

1237
00:54:16,500 --> 00:54:21,600
English showing is the CPA secure then I

1238
00:54:18,869 --> 00:54:24,600
don't think it it's it's a safe against

1239
00:54:21,600 --> 00:54:27,630
the CC attack like I mentioned

1240
00:54:24,600 --> 00:54:29,850
previously so what we do is VSS schema

1241
00:54:27,630 --> 00:54:30,119
is not see secure that is absolutely

1242
00:54:29,850 --> 00:54:33,140
true

1243
00:54:30,119 --> 00:54:35,970
yeah so what we do in this case is that

1244
00:54:33,140 --> 00:54:38,400
we let the point-of-sale partner

1245
00:54:35,970 --> 00:54:41,069
the fresh key every time and then

1246
00:54:38,400 --> 00:54:43,200
prepares the and EPB encrypted pin block

1247
00:54:41,070 --> 00:54:47,660
using their key and then use a PR e to

1248
00:54:43,200 --> 00:54:47,660
encrypt the key freshly generated key

1249
00:54:48,200 --> 00:54:56,879
okay so let's try okay I can explain it

1250
00:54:53,840 --> 00:54:58,320
and you might have already covered this

1251
00:54:56,880 --> 00:55:02,310
with some of your previous answers but

1252
00:54:58,320 --> 00:55:04,410
the the VBS scheme because why did you

1253
00:55:02,310 --> 00:55:06,480
go for the BBS 98 scheme as opposed to a

1254
00:55:04,410 --> 00:55:08,220
more recent scheme where to generate the

1255
00:55:06,480 --> 00:55:10,920
update token you need Bob's public key

1256
00:55:08,220 --> 00:55:11,279
instead of his private one can you say

1257
00:55:10,920 --> 00:55:13,770
that again

1258
00:55:11,280 --> 00:55:15,750
I'm sorry I didn't you consider any of

1259
00:55:13,770 --> 00:55:18,240
the more recent proxy encryption schemes

1260
00:55:15,750 --> 00:55:21,119
where you don't need both secret keys to

1261
00:55:18,240 --> 00:55:23,879
generate the update Oken where do I wait

1262
00:55:21,119 --> 00:55:25,770
wait I don't need what well in the BBS

1263
00:55:23,880 --> 00:55:27,390
98 scheme you need Alice's secret key

1264
00:55:25,770 --> 00:55:29,430
and Bob's secret key to create the

1265
00:55:27,390 --> 00:55:30,839
update token but there are more recent

1266
00:55:29,430 --> 00:55:34,980
schemes where you don't need it Bob's

1267
00:55:30,840 --> 00:55:36,869
public key so why yeah why using VBS 98

1268
00:55:34,980 --> 00:55:38,700
so the biggest problem here is that we

1269
00:55:36,869 --> 00:55:40,650
need a transitive property in it so if

1270
00:55:38,700 --> 00:55:42,868
any scheme which is non interactive and

1271
00:55:40,650 --> 00:55:44,310
Letran city which has a non which has a

1272
00:55:42,869 --> 00:55:47,430
transitive property that may be

1273
00:55:44,310 --> 00:55:48,990
interesting okay but most of the schemes

1274
00:55:47,430 --> 00:55:51,270
I looked at like for example afgh or

1275
00:55:48,990 --> 00:55:53,209
some other some other schemes they don't

1276
00:55:51,270 --> 00:55:56,160
have a transitive transitive property

1277
00:55:53,210 --> 00:55:57,570
available if I don't have a transitive

1278
00:55:56,160 --> 00:55:59,190
property then much in Bank has to do

1279
00:55:57,570 --> 00:56:03,960
extra work which they end up not

1280
00:55:59,190 --> 00:56:05,609
deploying the solution at all okay okay

1281
00:56:03,960 --> 00:56:07,330
no more questions this thank the speaker

1282
00:56:05,609 --> 00:56:07,410
again

1283
00:56:07,330 --> 00:56:09,790
[Applause]

1284
00:56:07,410 --> 00:56:10,710
[Music]

1285
00:56:09,790 --> 00:56:13,849
[Applause]

1286
00:56:10,710 --> 00:56:13,849
[Music]

1287
00:56:36,390 --> 00:56:39,900
the microphone

1288
00:56:53,620 --> 00:57:02,330
okay the last talk of this session is by

1289
00:56:59,000 --> 00:57:06,500
max from key base and he'll be talking

1290
00:57:02,330 --> 00:57:12,590
to us about managing teams and keys with

1291
00:57:06,500 --> 00:57:14,330
key base that I oh okay thanks

1292
00:57:12,590 --> 00:57:18,650
can you guys hear okay microphone okay

1293
00:57:14,330 --> 00:57:22,100
good so in preparing this talk I took a

1294
00:57:18,650 --> 00:57:24,710
couple minutes to sit down and write out

1295
00:57:22,100 --> 00:57:26,540
the apps I used the most on my phone and

1296
00:57:24,710 --> 00:57:27,560
on my desktop and I came up with this

1297
00:57:26,540 --> 00:57:29,060
list

1298
00:57:27,560 --> 00:57:31,190
you know there's email on there there's

1299
00:57:29,060 --> 00:57:33,020
a phone app there's slack there's SMS

1300
00:57:31,190 --> 00:57:35,180
github Dropbox

1301
00:57:33,020 --> 00:57:38,200
that's confluences it's a wiki product

1302
00:57:35,180 --> 00:57:39,980
and also something like Google Docs and

1303
00:57:38,200 --> 00:57:41,509
you know we've heard a lot about the

1304
00:57:39,980 --> 00:57:45,190
green ones so let's ignore them for now

1305
00:57:41,510 --> 00:57:47,480
I want to talk about everything else and

1306
00:57:45,190 --> 00:57:49,370
you know I think if we reflect upon

1307
00:57:47,480 --> 00:57:51,200
where we are right now in a lot of ways

1308
00:57:49,370 --> 00:57:53,299
you know we're almost worse off than we

1309
00:57:51,200 --> 00:57:55,189
were like 10 years ago because you know

1310
00:57:53,300 --> 00:57:57,110
right now we're encrypting and we're

1311
00:57:55,190 --> 00:57:58,850
uploading all of our unencrypted data to

1312
00:57:57,110 --> 00:58:01,160
like these centralized honey pots and

1313
00:57:58,850 --> 00:58:02,930
you know at least before we used to

1314
00:58:01,160 --> 00:58:04,640
manage those honey pots ourselves so

1315
00:58:02,930 --> 00:58:07,160
that this is me as a as a grad student

1316
00:58:04,640 --> 00:58:09,410
enough 15 years ago and I had a lot of

1317
00:58:07,160 --> 00:58:11,450
cool stuff going on on my server you see

1318
00:58:09,410 --> 00:58:14,270
I got a great CRT there but I ran my own

1319
00:58:11,450 --> 00:58:17,180
mail server my own you know CVS server

1320
00:58:14,270 --> 00:58:19,460
my own wiki you know if you needed a

1321
00:58:17,180 --> 00:58:22,220
file just SCP it from my machine so in

1322
00:58:19,460 --> 00:58:25,280
some ways we were better off then a lot

1323
00:58:22,220 --> 00:58:29,089
of great things going on at 18 26 dot 4

1324
00:58:25,280 --> 00:58:32,290
dot 239 and as a sign of the times MIT

1325
00:58:29,090 --> 00:58:35,570
actually sold that IP address to AWS so

1326
00:58:32,290 --> 00:58:36,470
literally and so so this is where we are

1327
00:58:35,570 --> 00:58:38,570
today

1328
00:58:36,470 --> 00:58:41,629
and you know we can look back at this

1329
00:58:38,570 --> 00:58:43,280
period with nostalgia but you know it

1330
00:58:41,630 --> 00:58:45,470
turns out that federated management the

1331
00:58:43,280 --> 00:58:48,470
better than what we have was never

1332
00:58:45,470 --> 00:58:50,990
really good enough and I was talking to

1333
00:58:48,470 --> 00:58:53,629
a head of security at a really big mega

1334
00:58:50,990 --> 00:58:55,669
sort of software corporation and you

1335
00:58:53,630 --> 00:58:58,220
know their conundrum is as follows if

1336
00:58:55,670 --> 00:59:00,410
they want to run slack internally that's

1337
00:58:58,220 --> 00:59:02,359
bad because you know all their secrets

1338
00:59:00,410 --> 00:59:04,040
are now just running out of the company

1339
00:59:02,360 --> 00:59:05,690
as fast as people can type

1340
00:59:04,040 --> 00:59:08,230
um and even something like let's say you

1341
00:59:05,690 --> 00:59:10,790
run like a HipChat server internally

1342
00:59:08,230 --> 00:59:12,680
that's almost just as bad because now

1343
00:59:10,790 --> 00:59:14,240
the sres have access to all the private

1344
00:59:12,680 --> 00:59:17,450
data going back and forth so that's not

1345
00:59:14,240 --> 00:59:19,399
really going to cut it and so you know

1346
00:59:17,450 --> 00:59:21,379
maybe we can say that you know this ship

1347
00:59:19,400 --> 00:59:23,360
has sailed that managed apps in the

1348
00:59:21,380 --> 00:59:25,370
cloud is kind of the the future and

1349
00:59:23,360 --> 00:59:27,920
because we're here and not of some other

1350
00:59:25,370 --> 00:59:30,770
conference arguing about block sizes and

1351
00:59:27,920 --> 00:59:32,600
51% attacks I think we all might might

1352
00:59:30,770 --> 00:59:34,340
be on board without assertion that you

1353
00:59:32,600 --> 00:59:37,009
know managed apps in the cloud might be

1354
00:59:34,340 --> 00:59:38,330
the way things are going but you know at

1355
00:59:37,010 --> 00:59:40,130
the very least can we please get

1356
00:59:38,330 --> 00:59:42,049
decentralized trust in key management

1357
00:59:40,130 --> 00:59:46,520
and that's something that we should all

1358
00:59:42,050 --> 00:59:47,780
answer resoundingly yes to so that's

1359
00:59:46,520 --> 00:59:50,360
what I'm going to talk about today and

1360
00:59:47,780 --> 00:59:51,920
um even though I feel like I could talk

1361
00:59:50,360 --> 00:59:53,900
about those other apps I'm gonna focus

1362
00:59:51,920 --> 00:59:58,040
on something like slack you know how do

1363
00:59:53,900 --> 00:59:59,270
we build an end-to-end secure slack so

1364
00:59:58,040 --> 01:00:00,680
the first thing we might want to talk

1365
00:59:59,270 --> 01:00:04,250
about are you know what are the basic

1366
01:00:00,680 --> 01:00:06,440
requirements and I think number one has

1367
01:00:04,250 --> 01:00:09,290
to be multi device support and it's not

1368
01:00:06,440 --> 01:00:10,730
like it's like really good multi device

1369
01:00:09,290 --> 01:00:12,920
support and what I mean by that is like

1370
01:00:10,730 --> 01:00:14,690
imagine somebody you know buys you a new

1371
01:00:12,920 --> 01:00:16,730
phone for Christmas you know which you

1372
01:00:14,690 --> 01:00:18,260
really expect in a slack life experience

1373
01:00:16,730 --> 01:00:20,450
is to enter your username and password

1374
01:00:18,260 --> 01:00:22,040
and to get instant access to all the

1375
01:00:20,450 --> 01:00:23,589
history you've ever had in that slack

1376
01:00:22,040 --> 01:00:25,670
channel right that's what people expect

1377
01:00:23,590 --> 01:00:28,640
so that's what I mean by multi device

1378
01:00:25,670 --> 01:00:30,260
support and moreover in addition you

1379
01:00:28,640 --> 01:00:32,720
might want things like nameable teams

1380
01:00:30,260 --> 01:00:34,550
with mutable membership and if anyone's

1381
01:00:32,720 --> 01:00:35,959
you know ever worked out in the real

1382
01:00:34,550 --> 01:00:38,240
world you know obviously people get

1383
01:00:35,960 --> 01:00:40,040
fired people get hired that type of

1384
01:00:38,240 --> 01:00:42,040
thing is a pretty common occurrence so

1385
01:00:40,040 --> 01:00:45,529
whatever we build it really ought to

1386
01:00:42,040 --> 01:00:47,090
accommodate that at that situation and

1387
01:00:45,530 --> 01:00:48,740
finally I don't know if anyone's

1388
01:00:47,090 --> 01:00:50,600
recently invited someone into a slack

1389
01:00:48,740 --> 01:00:52,910
team recently but the way that's done is

1390
01:00:50,600 --> 01:00:54,440
with email right and so you know that's

1391
01:00:52,910 --> 01:00:56,960
obviously very centrally managed

1392
01:00:54,440 --> 01:00:58,370
essentially authenticated and if you're

1393
01:00:56,960 --> 01:01:00,290
going to have an intense secure slack

1394
01:00:58,370 --> 01:01:02,299
where you're inviting new people in can

1395
01:01:00,290 --> 01:01:03,920
you come up with a better authentication

1396
01:01:02,300 --> 01:01:07,390
system that isn't this roughly

1397
01:01:03,920 --> 01:01:10,700
centralized trusted email authentication

1398
01:01:07,390 --> 01:01:13,850
and you know what threat model should we

1399
01:01:10,700 --> 01:01:15,319
consider I suggest we should consider

1400
01:01:13,850 --> 01:01:17,180
the real one which is that the bad guys

1401
01:01:15,320 --> 01:01:21,319
own the server infrastructure

1402
01:01:17,180 --> 01:01:22,879
and you know we know this is you know so

1403
01:01:21,319 --> 01:01:25,190
in other words not just like passive

1404
01:01:22,880 --> 01:01:26,660
adversaries but adversaries you get into

1405
01:01:25,190 --> 01:01:28,069
the whatever server-side stuff is

1406
01:01:26,660 --> 01:01:30,890
running and you could do whatever they

1407
01:01:28,069 --> 01:01:32,000
want and you know just last month there

1408
01:01:30,890 --> 01:01:35,180
was a big news article

1409
01:01:32,000 --> 01:01:37,069
GCHQ is considering a proposal you know

1410
01:01:35,180 --> 01:01:40,220
we saw this for like we've been saying

1411
01:01:37,069 --> 01:01:42,558
this since 2013 this is the problem it's

1412
01:01:40,220 --> 01:01:44,689
not just the Brist at Starbucks it's

1413
01:01:42,559 --> 01:01:49,480
that anything you run on the server

1414
01:01:44,690 --> 01:01:52,549
there's no reason for anyone to trust it

1415
01:01:49,480 --> 01:01:54,260
and given those requirements and that

1416
01:01:52,549 --> 01:01:57,109
attack model you know where the security

1417
01:01:54,260 --> 01:01:59,720
goals so in this talk I'm going to talk

1418
01:01:57,109 --> 01:02:02,630
about offering post compromised security

1419
01:01:59,720 --> 01:02:05,270
by default and I know forward secrecy is

1420
01:02:02,630 --> 01:02:07,760
a hot topic in our key-based product

1421
01:02:05,270 --> 01:02:09,920
it's opt-in so you don't and a lot of

1422
01:02:07,760 --> 01:02:11,450
things a lot of reasons I'm sorry a lot

1423
01:02:09,920 --> 01:02:15,440
of use cases you might not want forward

1424
01:02:11,450 --> 01:02:17,000
secrecy imagine just your slack channel

1425
01:02:15,440 --> 01:02:19,760
where you're talking about you know all

1426
01:02:17,000 --> 01:02:21,799
your development or you know some sort

1427
01:02:19,760 --> 01:02:23,510
of technical details you probably want

1428
01:02:21,799 --> 01:02:25,190
that to persist and be indexable and

1429
01:02:23,510 --> 01:02:27,680
searchable to even people who are just

1430
01:02:25,190 --> 01:02:28,940
joining the team so I'm it could be that

1431
01:02:27,680 --> 01:02:30,558
forward secrecy might make sense we're

1432
01:02:28,940 --> 01:02:32,240
talking about salary negotiations but

1433
01:02:30,559 --> 01:02:34,099
maybe for other things it doesn't really

1434
01:02:32,240 --> 01:02:36,140
make sense so um I'm not gonna really

1435
01:02:34,099 --> 01:02:37,970
touch it much in this talk but it's it's

1436
01:02:36,140 --> 01:02:41,629
it's layer you can layer it on top of

1437
01:02:37,970 --> 01:02:43,240
what I'm going to present all right it's

1438
01:02:41,630 --> 01:02:47,089
been a couple seconds talking about

1439
01:02:43,240 --> 01:02:49,788
insufficient solutions if you're an old

1440
01:02:47,089 --> 01:02:51,828
PGP user you probably have this kind of

1441
01:02:49,789 --> 01:02:54,230
model in your mind which is that you

1442
01:02:51,829 --> 01:02:56,690
just put your master key on a USB Drive

1443
01:02:54,230 --> 01:02:58,760
you just walk on down to your bank and

1444
01:02:56,690 --> 01:03:00,440
you put that USB key in the vault and

1445
01:02:58,760 --> 01:03:02,779
kind of use it every two years well when

1446
01:03:00,440 --> 01:03:05,180
you roll your you know your sub keys

1447
01:03:02,779 --> 01:03:07,220
that's not probably practical for a lot

1448
01:03:05,180 --> 01:03:09,169
of people something that's actually

1449
01:03:07,220 --> 01:03:11,149
catching on which is a great thing in a

1450
01:03:09,170 --> 01:03:13,190
lot of places is a UB key and so this is

1451
01:03:11,150 --> 01:03:14,420
actually my keychain and notice I've

1452
01:03:13,190 --> 01:03:16,309
redacted it so you guys don't let

1453
01:03:14,420 --> 01:03:20,990
yourself into my apartment and I know

1454
01:03:16,309 --> 01:03:22,819
this audience so yeah so the UB get UB

1455
01:03:20,990 --> 01:03:24,729
key is you know in a way is a lot better

1456
01:03:22,819 --> 01:03:26,869
than the previous slide or other

1457
01:03:24,730 --> 01:03:30,329
alternatives but you know raise your

1458
01:03:26,869 --> 01:03:33,929
hand if you've never lost your keys

1459
01:03:30,329 --> 01:03:36,959
a couple hints okay so not not a great

1460
01:03:33,929 --> 01:03:38,999
solution and you know I could be wrong

1461
01:03:36,959 --> 01:03:40,678
but I think this is the signal story now

1462
01:03:38,999 --> 01:03:42,899
where you have like one master device

1463
01:03:40,679 --> 01:03:44,579
and that's actually powering your other

1464
01:03:42,900 --> 01:03:46,529
devices that's like an another solution

1465
01:03:44,579 --> 01:03:50,339
I think it's accept it I think it's

1466
01:03:46,529 --> 01:03:51,749
better than the Yubikey example because

1467
01:03:50,339 --> 01:03:53,549
you could put some some layers of

1468
01:03:51,749 --> 01:03:55,828
security on top of the key which which

1469
01:03:53,549 --> 01:03:57,119
is hard to do with the key but even then

1470
01:03:55,829 --> 01:03:59,449
you could sell lose your phone and so

1471
01:03:57,119 --> 01:04:02,039
that's that's also not a great solution

1472
01:03:59,449 --> 01:04:03,809
as far as far as we you know we're

1473
01:04:02,039 --> 01:04:07,019
concerned okay

1474
01:04:03,809 --> 01:04:09,509
so key bases approach is as follows

1475
01:04:07,019 --> 01:04:11,609
so users need to start thinking a little

1476
01:04:09,509 --> 01:04:12,929
bit about keys but not in the way that

1477
01:04:11,609 --> 01:04:14,459
will make their eyes glaze over so we

1478
01:04:12,929 --> 01:04:16,769
say users you know you think about

1479
01:04:14,459 --> 01:04:18,058
devices and and there's more or less

1480
01:04:16,769 --> 01:04:22,218
like a one-to-one mapping between a

1481
01:04:18,059 --> 01:04:25,199
device and a key and so in that model so

1482
01:04:22,219 --> 01:04:27,449
each user can have multiple devices and

1483
01:04:25,199 --> 01:04:29,160
you know I have 10 and you probably have

1484
01:04:27,449 --> 01:04:30,479
something around that number when you

1485
01:04:29,160 --> 01:04:34,229
consider your work computer your laptop

1486
01:04:30,479 --> 01:04:35,339
your desktop your phones and in our

1487
01:04:34,229 --> 01:04:38,399
model are gonna say that each of these

1488
01:04:35,339 --> 01:04:40,519
devices is equally powerful and I think

1489
01:04:38,400 --> 01:04:42,989
there's a lot of good aspects of this

1490
01:04:40,519 --> 01:04:45,448
proposal first you know we've obviously

1491
01:04:42,989 --> 01:04:47,969
all lost phones individual devices -

1492
01:04:45,449 --> 01:04:50,160
very easy to lose but with this equally

1493
01:04:47,969 --> 01:04:51,599
powerful model now the more devices you

1494
01:04:50,160 --> 01:04:54,299
have the less likely you are to lose

1495
01:04:51,599 --> 01:04:56,999
your data and if you need a real key to

1496
01:04:54,299 --> 01:04:57,599
decrypt your data I totally do not want

1497
01:04:56,999 --> 01:04:59,669
to lose your data

1498
01:04:57,599 --> 01:05:01,410
that's like priority number one it's

1499
01:04:59,670 --> 01:05:03,150
even like more important than like you

1500
01:05:01,410 --> 01:05:06,390
know encryption it's just like people

1501
01:05:03,150 --> 01:05:07,949
hate losing their data and also I'll

1502
01:05:06,390 --> 01:05:09,660
mention that you're most likely to

1503
01:05:07,949 --> 01:05:11,670
discard your oldest device right that's

1504
01:05:09,660 --> 01:05:13,379
that's like the one you bought the

1505
01:05:11,670 --> 01:05:15,089
longest time ago that's the worst of

1506
01:05:13,380 --> 01:05:16,229
your devices and so we don't want to

1507
01:05:15,089 --> 01:05:18,089
build some system where like you're

1508
01:05:16,229 --> 01:05:21,359
required to keep your like first device

1509
01:05:18,089 --> 01:05:23,069
that would obviously not be practical so

1510
01:05:21,359 --> 01:05:26,819
we're gonna build up an abstraction

1511
01:05:23,069 --> 01:05:28,469
that's actually reusable in in in the

1512
01:05:26,819 --> 01:05:31,038
team setting so if we're gonna say that

1513
01:05:28,469 --> 01:05:33,900
a user is a collection of devices and

1514
01:05:31,039 --> 01:05:36,539
similarly a team is a collection of

1515
01:05:33,900 --> 01:05:37,949
users so this is almost like a concept

1516
01:05:36,539 --> 01:05:42,029
that we could use twice in the building

1517
01:05:37,949 --> 01:05:43,780
of the system and if you stitch these

1518
01:05:42,029 --> 01:05:45,400
ideas together

1519
01:05:43,780 --> 01:05:47,320
I'm claiming that you wind up with a

1520
01:05:45,400 --> 01:05:50,170
very usable interface that people can

1521
01:05:47,320 --> 01:05:51,670
actually understand and you know that's

1522
01:05:50,170 --> 01:05:53,950
a little preview this is you know what

1523
01:05:51,670 --> 01:05:56,650
it looks like right now in our live app

1524
01:05:53,950 --> 01:05:58,560
to on the left to manage your devices

1525
01:05:56,650 --> 01:06:00,640
and so there's a list of all my devices

1526
01:05:58,560 --> 01:06:03,040
including if I click on that button and

1527
01:06:00,640 --> 01:06:05,250
you see my revoke devices which I which

1528
01:06:03,040 --> 01:06:07,720
I've certainly done in the past and

1529
01:06:05,250 --> 01:06:10,270
managing users is almost just as simple

1530
01:06:07,720 --> 01:06:16,569
you have a nice user-friendly kind of

1531
01:06:10,270 --> 01:06:18,430
display of what a team looks like so how

1532
01:06:16,570 --> 01:06:24,550
should we make apps work on this model

1533
01:06:18,430 --> 01:06:26,649
and it's a pretty simple story so every

1534
01:06:24,550 --> 01:06:28,270
team in key base we're gonna build up to

1535
01:06:26,650 --> 01:06:29,920
it's going to have a rare a random

1536
01:06:28,270 --> 01:06:31,990
shared symmetric key and it's gonna

1537
01:06:29,920 --> 01:06:34,690
rotate whenever users are removed from

1538
01:06:31,990 --> 01:06:38,229
the team or when whenever anyone on the

1539
01:06:34,690 --> 01:06:40,119
the team revokes a device and so when

1540
01:06:38,230 --> 01:06:41,619
users actually write into a chat channel

1541
01:06:40,119 --> 01:06:43,510
or a git repository or a file system

1542
01:06:41,619 --> 01:06:45,970
really those updates are gonna be

1543
01:06:43,510 --> 01:06:48,339
encrypted for the current shared team

1544
01:06:45,970 --> 01:06:50,140
symmetric-key and then signed by the

1545
01:06:48,339 --> 01:06:53,049
device that made the update and that

1546
01:06:50,140 --> 01:06:55,299
this last thing is just to prevent Alice

1547
01:06:53,050 --> 01:06:58,089
and Bob from kind of putting words into

1548
01:06:55,300 --> 01:07:01,119
each other's now from miss attributing

1549
01:06:58,089 --> 01:07:02,980
updates um and you know with those very

1550
01:07:01,119 --> 01:07:05,290
simple primitives you can kind of fill

1551
01:07:02,980 --> 01:07:08,140
more or less a full-featured app so this

1552
01:07:05,290 --> 01:07:10,210
is a slack application it has unfurling

1553
01:07:08,140 --> 01:07:11,890
it has react jesus's channels it has

1554
01:07:10,210 --> 01:07:14,080
multiple teams you know all the stuff is

1555
01:07:11,890 --> 01:07:18,009
possible with just those very simple um

1556
01:07:14,080 --> 01:07:21,069
crypto primitives so I think what's left

1557
01:07:18,010 --> 01:07:22,960
to drill down a little bit deeper is you

1558
01:07:21,070 --> 01:07:26,109
know my initial claims you know how do

1559
01:07:22,960 --> 01:07:28,089
you devices come together to sign

1560
01:07:26,109 --> 01:07:29,920
statements to constitute a user and had

1561
01:07:28,089 --> 01:07:32,320
a user sign statements to constitute a

1562
01:07:29,920 --> 01:07:34,839
team and and we'll look into that with a

1563
01:07:32,320 --> 01:07:38,140
little bit more detail okay

1564
01:07:34,839 --> 01:07:40,359
how did define a user so let's say Alice

1565
01:07:38,140 --> 01:07:42,549
is signing up for this service and she's

1566
01:07:40,359 --> 01:07:45,160
creating her account so the first thing

1567
01:07:42,550 --> 01:07:46,690
she'll do is she'll pick a username and

1568
01:07:45,160 --> 01:07:49,720
then she'll start rolling a bunch of

1569
01:07:46,690 --> 01:07:51,790
keys on her device so she needs a

1570
01:07:49,720 --> 01:07:54,129
signing key pair which I'm going to just

1571
01:07:51,790 --> 01:07:56,720
use this notation where lowercase s is

1572
01:07:54,130 --> 01:07:59,360
the secret key and uppercase s is the

1573
01:07:56,720 --> 01:08:00,859
baki and she's going to need a diffi

1574
01:07:59,360 --> 01:08:03,770
humming keep here for that device so

1575
01:08:00,860 --> 01:08:07,400
that's lowercase T uppercase T and this

1576
01:08:03,770 --> 01:08:09,170
is potentially not not obvious we're

1577
01:08:07,400 --> 01:08:11,390
gonna build up for Alice something

1578
01:08:09,170 --> 01:08:13,370
called a per-user key and this is

1579
01:08:11,390 --> 01:08:14,839
another diffie-hellman key pair and it

1580
01:08:13,370 --> 01:08:17,090
has a property that the private key

1581
01:08:14,840 --> 01:08:20,510
lowercase u is going to be encrypted for

1582
01:08:17,090 --> 01:08:23,960
all of her devices so now she's going to

1583
01:08:20,510 --> 01:08:25,340
assign her you know device public key

1584
01:08:23,960 --> 01:08:27,890
with her signing key she's going to

1585
01:08:25,340 --> 01:08:30,560
encrypt that / user key for her device

1586
01:08:27,890 --> 01:08:33,170
and a crucial property here is that the

1587
01:08:30,560 --> 01:08:34,640
signing key and the device the

1588
01:08:33,170 --> 01:08:36,080
diffie-hellman key for that device never

1589
01:08:34,640 --> 01:08:38,450
leave the device they're always going to

1590
01:08:36,080 --> 01:08:40,130
see on the device and the encryption of

1591
01:08:38,450 --> 01:08:42,979
this per user key does leave the device

1592
01:08:40,130 --> 01:08:45,020
and when you roll this all up and post

1593
01:08:42,979 --> 01:08:48,139
it to the server we're gonna say alice

1594
01:08:45,020 --> 01:08:50,600
has posted 3c chain links to them to a

1595
01:08:48,140 --> 01:08:53,000
global Merkel tree and what do I mean by

1596
01:08:50,600 --> 01:08:56,360
that so this is a Merkel tree that we're

1597
01:08:53,000 --> 01:08:58,880
I'm keeping for everyone who has an

1598
01:08:56,359 --> 01:09:00,889
account on key base so when Alice signs

1599
01:08:58,880 --> 01:09:03,500
up she's gonna descend the tree to her

1600
01:09:00,890 --> 01:09:06,110
particularly fanned she's gonna post

1601
01:09:03,500 --> 01:09:08,240
three signs signature links and they're

1602
01:09:06,109 --> 01:09:11,000
gonna have this property where whenever

1603
01:09:08,240 --> 01:09:13,219
you add a new link you sign also the

1604
01:09:11,000 --> 01:09:15,500
hash of the previous link so her first

1605
01:09:13,220 --> 01:09:17,030
link is gonna say hi I'm Alice it's kind

1606
01:09:15,500 --> 01:09:19,180
of a self-signed link it's the first one

1607
01:09:17,029 --> 01:09:22,040
the second link is gonna say this is my

1608
01:09:19,180 --> 01:09:24,590
diffie-hellman a public key for from my

1609
01:09:22,040 --> 01:09:25,939
device and also I've made a per user key

1610
01:09:24,590 --> 01:09:28,040
because I'm just signing up that's the

1611
01:09:25,939 --> 01:09:29,419
third link the hash of that third link

1612
01:09:28,040 --> 01:09:32,840
is then bubbled up to the top of the

1613
01:09:29,420 --> 01:09:34,279
Merkel tree and that's now in more or

1614
01:09:32,840 --> 01:09:39,980
less the public domain for everyone to

1615
01:09:34,279 --> 01:09:42,410
see so what does a new device edition

1616
01:09:39,979 --> 01:09:45,200
look like well let's say Alice started

1617
01:09:42,410 --> 01:09:46,970
with her laptop she's going to now add a

1618
01:09:45,200 --> 01:09:51,950
phone on her phone she's going to

1619
01:09:46,970 --> 01:09:53,750
generate a new key pair s prime for for

1620
01:09:51,950 --> 01:09:56,150
signing a new key pair for

1621
01:09:53,750 --> 01:09:58,400
diffie-hellman she's going to sign both

1622
01:09:56,150 --> 01:10:00,860
devices with each other she's going to

1623
01:09:58,400 --> 01:10:04,400
encrypt her new diffie-hellman key with

1624
01:10:00,860 --> 01:10:05,990
her new signing key and the this is the

1625
01:10:04,400 --> 01:10:08,870
per user key thing again she's going to

1626
01:10:05,990 --> 01:10:10,250
she's going to take that the secret side

1627
01:10:08,870 --> 01:10:11,750
of her

1628
01:10:10,250 --> 01:10:14,690
user key and encrypted for her new

1629
01:10:11,750 --> 01:10:18,050
device and this yields two new signature

1630
01:10:14,690 --> 01:10:20,299
chain links into this Merkel tree link

1631
01:10:18,050 --> 01:10:22,340
number four is when she's signing both

1632
01:10:20,300 --> 01:10:24,050
devices with each other and link number

1633
01:10:22,340 --> 01:10:25,910
five is where she's introducing her new

1634
01:10:24,050 --> 01:10:28,880
diffie-hellman key for her new device

1635
01:10:25,910 --> 01:10:30,680
and what this looks like from the user's

1636
01:10:28,880 --> 01:10:32,750
perspective is one of these flows where

1637
01:10:30,680 --> 01:10:35,330
you take your new device you take your

1638
01:10:32,750 --> 01:10:37,280
old device you take a picture of one

1639
01:10:35,330 --> 01:10:39,980
with the other and what that's really

1640
01:10:37,280 --> 01:10:42,349
doing is it's sharing a strong secret

1641
01:10:39,980 --> 01:10:44,360
between the two devices as you can see

1642
01:10:42,350 --> 01:10:46,010
in that barcode and what that allows

1643
01:10:44,360 --> 01:10:47,690
them to do is open an authenticated

1644
01:10:46,010 --> 01:10:48,950
channel between each other you don't

1645
01:10:47,690 --> 01:10:51,230
really even need secrecy here you just

1646
01:10:48,950 --> 01:10:53,360
need to authenticate and and that just

1647
01:10:51,230 --> 01:10:55,309
means now the two devices know they're

1648
01:10:53,360 --> 01:11:02,000
signing the right keys and they're rien

1649
01:10:55,310 --> 01:11:05,360
crypting the the right / user key revoke

1650
01:11:02,000 --> 01:11:07,760
Ian's device is pretty straightforward

1651
01:11:05,360 --> 01:11:09,889
from here and as I said before all these

1652
01:11:07,760 --> 01:11:11,900
devices are equally powerful so any

1653
01:11:09,890 --> 01:11:14,270
device can revoke any other device so

1654
01:11:11,900 --> 01:11:16,370
her new let's say she just provisioned a

1655
01:11:14,270 --> 01:11:18,470
phone that phone can now revoke the

1656
01:11:16,370 --> 01:11:19,910
device provisioned it and so what that

1657
01:11:18,470 --> 01:11:21,710
looks like is just signing a statement

1658
01:11:19,910 --> 01:11:24,830
saying these these two keys are no

1659
01:11:21,710 --> 01:11:25,880
longer valid for for me the one thing

1660
01:11:24,830 --> 01:11:27,860
that she does need to do what she needs

1661
01:11:25,880 --> 01:11:30,290
to rotate that / user key

1662
01:11:27,860 --> 01:11:32,900
so the pessimal assumption is that the

1663
01:11:30,290 --> 01:11:34,580
revoked device now has a per user key

1664
01:11:32,900 --> 01:11:36,769
that's been compromised so going forward

1665
01:11:34,580 --> 01:11:39,650
she wants a new per user key on her

1666
01:11:36,770 --> 01:11:42,020
devices that hasn't been compromised and

1667
01:11:39,650 --> 01:11:43,400
this is this new you prime key that

1668
01:11:42,020 --> 01:11:46,790
she's going to re-encrypt for all her

1669
01:11:43,400 --> 01:11:48,230
non revoked devices so going back to the

1670
01:11:46,790 --> 01:11:51,950
Merkel tree what this looks like is you

1671
01:11:48,230 --> 01:11:54,049
have a link where she's saying I revoke

1672
01:11:51,950 --> 01:11:58,370
these two devices and a new link saying

1673
01:11:54,050 --> 01:12:00,170
I have this new per user key key and we

1674
01:11:58,370 --> 01:12:04,430
can expose this to the user and a pretty

1675
01:12:00,170 --> 01:12:05,570
easy to see interface it's just a more

1676
01:12:04,430 --> 01:12:08,060
or less a button you could press saying

1677
01:12:05,570 --> 01:12:11,090
revoke this device and this is from my

1678
01:12:08,060 --> 01:12:13,580
key base account my phone will tell me I

1679
01:12:11,090 --> 01:12:15,590
there's a computer that I introduced at

1680
01:12:13,580 --> 01:12:19,519
this date I last use at this date I push

1681
01:12:15,590 --> 01:12:21,020
this button to revoke it and there's one

1682
01:12:19,520 --> 01:12:22,670
more thing we can layer on top of it and

1683
01:12:21,020 --> 01:12:23,840
and this is where we got started as a

1684
01:12:22,670 --> 01:12:25,430
company and now

1685
01:12:23,840 --> 01:12:27,350
see we still feel strong about

1686
01:12:25,430 --> 01:12:29,840
supporting we just had Alice Caen in

1687
01:12:27,350 --> 01:12:31,820
addition to managing her devices she can

1688
01:12:29,840 --> 01:12:33,860
prove external corroboration of her

1689
01:12:31,820 --> 01:12:36,349
account so she can also make a signature

1690
01:12:33,860 --> 01:12:38,150
saying I'm Alice on key base but on

1691
01:12:36,350 --> 01:12:40,640
Twitter I'm known as the real Alice and

1692
01:12:38,150 --> 01:12:43,549
she can then post a hash of that

1693
01:12:40,640 --> 01:12:44,900
signature onto Twitter so what that

1694
01:12:43,550 --> 01:12:46,340
looks like from our Merkle trees

1695
01:12:44,900 --> 01:12:50,570
perspective is she's just making a new

1696
01:12:46,340 --> 01:12:56,060
signature link saying this is my it's my

1697
01:12:50,570 --> 01:12:58,700
Twitter handle so to review when Bob

1698
01:12:56,060 --> 01:13:01,520
goes and looks up Alice he's going to do

1699
01:12:58,700 --> 01:13:03,170
the following operations he's going to

1700
01:13:01,520 --> 01:13:06,290
descend the Merkel tree to find Alice's

1701
01:13:03,170 --> 01:13:09,170
leaf he's going to fetch the tale of her

1702
01:13:06,290 --> 01:13:10,670
chain of signatures and so that's that's

1703
01:13:09,170 --> 01:13:11,990
posted in the Merkel tree he's gonna

1704
01:13:10,670 --> 01:13:14,150
play that chain back from the very

1705
01:13:11,990 --> 01:13:15,700
beginning and so that's going to be the

1706
01:13:14,150 --> 01:13:17,660
first device introducing itself

1707
01:13:15,700 --> 01:13:19,460
provisioning the second device the

1708
01:13:17,660 --> 01:13:21,410
second device revoking the first device

1709
01:13:19,460 --> 01:13:24,020
it's going to be the sliding window of

1710
01:13:21,410 --> 01:13:25,639
devices that eventually result in a

1711
01:13:24,020 --> 01:13:27,920
picture of Alice that that we could use

1712
01:13:25,640 --> 01:13:29,750
today and that's um these are the set of

1713
01:13:27,920 --> 01:13:31,550
signing keys that represent Alice these

1714
01:13:29,750 --> 01:13:33,350
are the set of diffie-hellman keys that

1715
01:13:31,550 --> 01:13:35,990
you can encrypt to and this is her most

1716
01:13:33,350 --> 01:13:38,150
up-to-date per user key and in addition

1717
01:13:35,990 --> 01:13:41,480
she's also claimed these external

1718
01:13:38,150 --> 01:13:43,429
identities and so on our app when when

1719
01:13:41,480 --> 01:13:45,980
my client goes and looks up Alice in

1720
01:13:43,430 --> 01:13:48,950
this case the user Tammy what my app is

1721
01:13:45,980 --> 01:13:50,870
doing is it's doing those operations and

1722
01:13:48,950 --> 01:13:54,500
then once it's computed a cryptographic

1723
01:13:50,870 --> 01:13:56,330
picture of who Tammy is it then goes and

1724
01:13:54,500 --> 01:13:59,330
checks those third-party services and

1725
01:13:56,330 --> 01:14:02,030
corroborates that that she actually had

1726
01:13:59,330 --> 01:14:04,280
access to those services that she

1727
01:14:02,030 --> 01:14:05,330
claimed to have access to and so this is

1728
01:14:04,280 --> 01:14:07,429
all happening on your phone in your

1729
01:14:05,330 --> 01:14:08,930
desktop whenever you look somebody up

1730
01:14:07,430 --> 01:14:10,730
and this is the way we kind of solve

1731
01:14:08,930 --> 01:14:12,560
that problem where if you want to

1732
01:14:10,730 --> 01:14:14,299
introduce new people to your team's you

1733
01:14:12,560 --> 01:14:17,930
don't have to take the word of some

1734
01:14:14,300 --> 01:14:19,730
servers that did like an email based

1735
01:14:17,930 --> 01:14:21,560
token exchange you could actually at

1736
01:14:19,730 --> 01:14:23,480
your device can check for itself that

1737
01:14:21,560 --> 01:14:26,560
this is the right version of the person

1738
01:14:23,480 --> 01:14:26,559
you want and not some imposter

1739
01:14:27,680 --> 01:14:32,280
so that was users and what we're gonna

1740
01:14:30,210 --> 01:14:34,560
do is just build on top of that in a

1741
01:14:32,280 --> 01:14:37,590
pretty parallel way to define what's a

1742
01:14:34,560 --> 01:14:40,410
team so let's go with the example where

1743
01:14:37,590 --> 01:14:42,630
alice is now creating she wants to make

1744
01:14:40,410 --> 01:14:44,280
a new cryptocurrency and have an ICO so

1745
01:14:42,630 --> 01:14:45,960
she makes her team called coin Co and

1746
01:14:44,280 --> 01:14:49,019
it's gonna have two admins it's gonna be

1747
01:14:45,960 --> 01:14:50,880
her and Bob so the first thing Alice

1748
01:14:49,020 --> 01:14:53,280
does for Co Inc oh if she's gonna roll

1749
01:14:50,880 --> 01:14:57,480
but what we call a new team secret this

1750
01:14:53,280 --> 01:14:58,500
is um I'm calling this lowercase T and

1751
01:14:57,480 --> 01:15:00,660
I'm she's going to run a whole bunch of

1752
01:14:58,500 --> 01:15:03,870
key derivations to make other keys from

1753
01:15:00,660 --> 01:15:05,580
that T so she's gonna generate a signing

1754
01:15:03,870 --> 01:15:08,430
key for the team she's gonna generate a

1755
01:15:05,580 --> 01:15:10,500
diffie-hellman key for the team and also

1756
01:15:08,430 --> 01:15:12,720
just a symmetric key for encrypted

1757
01:15:10,500 --> 01:15:15,330
shared team data so does 32 bytes of

1758
01:15:12,720 --> 01:15:17,340
random data that everyone the team knows

1759
01:15:15,330 --> 01:15:19,350
that they can encrypt things for and

1760
01:15:17,340 --> 01:15:21,360
then she's going to take the seed T and

1761
01:15:19,350 --> 01:15:23,130
encrypt it for all the users on the team

1762
01:15:21,360 --> 01:15:25,380
so when she's starting this team it's

1763
01:15:23,130 --> 01:15:29,310
her and Bob so she's going to encrypt

1764
01:15:25,380 --> 01:15:33,510
that that seed for for the for the per

1765
01:15:29,310 --> 01:15:35,850
user keys of Alice and Bob and this is

1766
01:15:33,510 --> 01:15:37,590
again being put into the Merkel tree and

1767
01:15:35,850 --> 01:15:39,980
so obviously under a different path

1768
01:15:37,590 --> 01:15:42,600
that's given by the name of the company

1769
01:15:39,980 --> 01:15:44,969
in the signature is gonna be of the form

1770
01:15:42,600 --> 01:15:46,290
this is my company these are the admins

1771
01:15:44,970 --> 01:15:50,250
and these are the public keys that

1772
01:15:46,290 --> 01:15:53,130
correspond to my team so adding a user

1773
01:15:50,250 --> 01:15:55,230
to a team on top of that is is pretty

1774
01:15:53,130 --> 01:15:57,090
straightforward so either Alice or Bob

1775
01:15:55,230 --> 01:15:58,739
where we're signed in as admin so they

1776
01:15:57,090 --> 01:16:01,350
can now make additions or removals from

1777
01:15:58,739 --> 01:16:02,940
the team so they could add Chuck and so

1778
01:16:01,350 --> 01:16:05,550
there are basically two classes of users

1779
01:16:02,940 --> 01:16:06,989
there are those who are admins and those

1780
01:16:05,550 --> 01:16:08,730
who aren't and if you're not an admin

1781
01:16:06,989 --> 01:16:11,190
you get to see the secrets but not

1782
01:16:08,730 --> 01:16:13,349
change the membership and what this

1783
01:16:11,190 --> 01:16:15,929
looks like when Bob adds Chuck is he is

1784
01:16:13,350 --> 01:16:19,020
gonna add one more signature chain to

1785
01:16:15,930 --> 01:16:22,050
that to that link of signature link to

1786
01:16:19,020 --> 01:16:25,350
that chain of signatures and he's also

1787
01:16:22,050 --> 01:16:28,920
going to encrypt the per team secret key

1788
01:16:25,350 --> 01:16:30,750
for the new user Chuck so link to is

1789
01:16:28,920 --> 01:16:34,590
pretty similar as simple as just says

1790
01:16:30,750 --> 01:16:37,530
here's this admin chuck and finally how

1791
01:16:34,590 --> 01:16:39,510
do you remove a user and admins can

1792
01:16:37,530 --> 01:16:41,139
remove users but when they do save do so

1793
01:16:39,510 --> 01:16:42,850
they must reroll the team keys

1794
01:16:41,139 --> 01:16:45,239
and you know the assumption there is the

1795
01:16:42,850 --> 01:16:48,190
bad guy who got kicked out they're gonna

1796
01:16:45,239 --> 01:16:50,379
you don't want them to be able to access

1797
01:16:48,190 --> 01:16:52,330
the new information that people on the

1798
01:16:50,380 --> 01:16:55,780
team might add after they've been kicked

1799
01:16:52,330 --> 01:16:59,790
out so link number 3 in this case where

1800
01:16:55,780 --> 01:17:01,960
Chuck decides to remove alice is that

1801
01:16:59,790 --> 01:17:04,600
you're signing a link saying here's

1802
01:17:01,960 --> 01:17:07,119
removal of alice and here the new public

1803
01:17:04,600 --> 01:17:09,760
keys that correspond to this new secret

1804
01:17:07,119 --> 01:17:11,860
that i just rolled for this team and and

1805
01:17:09,760 --> 01:17:13,420
making a public statement and as far as

1806
01:17:11,860 --> 01:17:15,900
the team is concerned about the new

1807
01:17:13,420 --> 01:17:15,900
public keys

1808
01:17:16,560 --> 01:17:21,369
so given this you have to go back and

1809
01:17:19,420 --> 01:17:24,310
revisit a little bit what it looks like

1810
01:17:21,369 --> 01:17:27,909
when Bob or Alice revokes of device and

1811
01:17:24,310 --> 01:17:29,440
we said before when that happens Alice

1812
01:17:27,909 --> 01:17:34,360
and Bob and the Rubik device we're gonna

1813
01:17:29,440 --> 01:17:37,509
re-roll their per user key but it's got

1814
01:17:34,360 --> 01:17:40,269
a cascade up and so therefore whatever

1815
01:17:37,510 --> 01:17:42,460
teams they were on those teams also need

1816
01:17:40,270 --> 01:17:45,040
to reroll their keys using the same

1817
01:17:42,460 --> 01:17:46,780
using the same logic but we kind of came

1818
01:17:45,040 --> 01:17:49,510
up with a little bit of a insight into

1819
01:17:46,780 --> 01:17:51,849
this process this can be done lazily so

1820
01:17:49,510 --> 01:17:54,940
so imagine it just not to be eagerly

1821
01:17:51,850 --> 01:17:56,860
upon device revocation so so imagine Bob

1822
01:17:54,940 --> 01:17:58,989
is a member of you know a thousand teams

1823
01:17:56,860 --> 01:18:00,909
one he uses every day and another he

1824
01:17:58,989 --> 01:18:02,379
writes two months a year the one he

1825
01:18:00,909 --> 01:18:04,480
writes to once a year he doesn't have to

1826
01:18:02,380 --> 01:18:06,670
run out and rekey right away he just has

1827
01:18:04,480 --> 01:18:10,540
to rekey it before the next time he'll

1828
01:18:06,670 --> 01:18:13,050
make an update to it so this actually

1829
01:18:10,540 --> 01:18:15,280
really simplifies the implementation

1830
01:18:13,050 --> 01:18:17,650
because we wanna make it very easy for

1831
01:18:15,280 --> 01:18:19,840
people to revoke devices and don't want

1832
01:18:17,650 --> 01:18:26,469
to block that revocation on a lot of

1833
01:18:19,840 --> 01:18:28,060
background rekey operations so one of

1834
01:18:26,469 --> 01:18:30,130
the key learnings and building all of

1835
01:18:28,060 --> 01:18:32,290
this what's this notion of a per user

1836
01:18:30,130 --> 01:18:35,080
key and I say this is a key learning

1837
01:18:32,290 --> 01:18:38,380
because version one we built without it

1838
01:18:35,080 --> 01:18:39,820
and so what is this system look like

1839
01:18:38,380 --> 01:18:42,550
without a per user key

1840
01:18:39,820 --> 01:18:44,799
I think the key operation to consider is

1841
01:18:42,550 --> 01:18:47,020
what's it look like when Alice goes and

1842
01:18:44,800 --> 01:18:48,940
provisions a new laptop so imagine the

1843
01:18:47,020 --> 01:18:52,449
whole system I just described but where

1844
01:18:48,940 --> 01:18:54,579
the the team key is being encrypted for

1845
01:18:52,449 --> 01:18:56,980
the users devices to

1846
01:18:54,579 --> 01:18:59,320
and not the users per user key so what

1847
01:18:56,980 --> 01:19:01,659
that looks like is when Alice is pairing

1848
01:18:59,320 --> 01:19:03,070
her two devices together the one that

1849
01:19:01,659 --> 01:19:05,379
already knows all the secrets so it

1850
01:19:03,070 --> 01:19:07,690
called her phone has to run out and

1851
01:19:05,380 --> 01:19:10,599
re-encrypt all the secrets she knows for

1852
01:19:07,690 --> 01:19:12,820
her new machine the laptop and you know

1853
01:19:10,599 --> 01:19:14,079
imagine we had a case where several

1854
01:19:12,820 --> 01:19:15,909
cases in our system right now or

1855
01:19:14,079 --> 01:19:18,639
someone's a member of thirty thousand

1856
01:19:15,909 --> 01:19:19,750
teams and so that's actually a fair

1857
01:19:18,639 --> 01:19:21,699
amount of work that needs to be on the

1858
01:19:19,750 --> 01:19:23,290
critical path and what happens is if

1859
01:19:21,699 --> 01:19:24,669
Alice shuts our phone down our

1860
01:19:23,290 --> 01:19:26,650
backgrounds the app before that's done

1861
01:19:24,670 --> 01:19:29,170
it turns out the new device is only

1862
01:19:26,650 --> 01:19:30,670
partially keyed and that is a it is a

1863
01:19:29,170 --> 01:19:32,860
really bad situation to be in because

1864
01:19:30,670 --> 01:19:35,139
that device doesn't have access to all

1865
01:19:32,860 --> 01:19:37,679
the data that the phone had access to

1866
01:19:35,139 --> 01:19:39,670
and moreover this is like a viral

1867
01:19:37,679 --> 01:19:41,829
contagion that can spread across the new

1868
01:19:39,670 --> 01:19:43,900
devices and so imagine Alice has a

1869
01:19:41,829 --> 01:19:45,429
partially provisioned laptop and then

1870
01:19:43,900 --> 01:19:47,110
provisions another machine with that one

1871
01:19:45,429 --> 01:19:49,420
that new machine in turn is only going

1872
01:19:47,110 --> 01:19:50,860
to have access to some of the to some of

1873
01:19:49,420 --> 01:19:54,250
the data that the original phone had

1874
01:19:50,860 --> 01:19:56,199
access to so um that was more or less

1875
01:19:54,250 --> 01:19:57,909
where we were for the first couple years

1876
01:19:56,199 --> 01:20:01,449
in this project and we decided that this

1877
01:19:57,909 --> 01:20:03,820
interior level of keys as per user key

1878
01:20:01,449 --> 01:20:09,519
it was really the solution to this

1879
01:20:03,820 --> 01:20:11,590
problem there's a whole bunch of other

1880
01:20:09,520 --> 01:20:13,119
stuff that I'm happy to talk about

1881
01:20:11,590 --> 01:20:15,159
either you know it's part of question

1882
01:20:13,119 --> 01:20:15,880
and answer or offline about what's going

1883
01:20:15,159 --> 01:20:18,429
on in our system

1884
01:20:15,880 --> 01:20:20,530
one thing that's slightly interesting is

1885
01:20:18,429 --> 01:20:22,300
that I said everything in our in our

1886
01:20:20,530 --> 01:20:25,329
system kind of bubbles up to this Merkel

1887
01:20:22,300 --> 01:20:26,829
tree you know the the easiest attack you

1888
01:20:25,329 --> 01:20:28,808
could think of against that system is

1889
01:20:26,829 --> 01:20:31,540
you know our server becomes routed and

1890
01:20:28,809 --> 01:20:33,130
we start showing one version the Merkel

1891
01:20:31,540 --> 01:20:34,599
tree to this side of the room another

1892
01:20:33,130 --> 01:20:37,270
version to that side of the room this is

1893
01:20:34,599 --> 01:20:39,340
called a forking attack and one of the

1894
01:20:37,270 --> 01:20:41,949
easiest ways you can think about solving

1895
01:20:39,340 --> 01:20:44,320
that today is to just write that block -

1896
01:20:41,949 --> 01:20:46,119
or the Det route to some sort of global

1897
01:20:44,320 --> 01:20:48,280
place and we're using the Bitcoin

1898
01:20:46,119 --> 01:20:50,079
blockchain for that right now we would

1899
01:20:48,280 --> 01:20:52,929
be right or rook a route there and maybe

1900
01:20:50,079 --> 01:20:55,480
months every four hours six hours - six

1901
01:20:52,929 --> 01:20:57,820
hours to prevent these so-called forking

1902
01:20:55,480 --> 01:20:59,980
attacks something that's interesting is

1903
01:20:57,820 --> 01:21:01,900
that the the system I described you

1904
01:20:59,980 --> 01:21:03,459
could layer inside of it an ephemeral

1905
01:21:01,900 --> 01:21:05,679
messaging system that's currently

1906
01:21:03,460 --> 01:21:08,229
running and scales up to in the biggest

1907
01:21:05,679 --> 01:21:09,999
case in our system a 2,000 person

1908
01:21:08,229 --> 01:21:12,070
team and so they're able to use a

1909
01:21:09,999 --> 01:21:13,389
ephemeral messaging pretty effectively

1910
01:21:12,070 --> 01:21:17,199
and we think that could scale way beyond

1911
01:21:13,389 --> 01:21:19,570
that if it had to and something that

1912
01:21:17,199 --> 01:21:22,619
kind of we see on a daily basis is

1913
01:21:19,570 --> 01:21:25,630
though we're trying very hard to get

1914
01:21:22,619 --> 01:21:27,940
users to manage their own keys and we do

1915
01:21:25,630 --> 01:21:29,079
a lot of nudging so when you sign up the

1916
01:21:27,940 --> 01:21:31,209
first thing will tell you to do is hey

1917
01:21:29,079 --> 01:21:34,268
you have a laptop you know how about

1918
01:21:31,209 --> 01:21:35,829
provisioning a phone and that's not only

1919
01:21:34,269 --> 01:21:37,929
for their convenience it's also so

1920
01:21:35,829 --> 01:21:39,219
there's more ways for them to recover

1921
01:21:37,929 --> 01:21:42,969
their account if they lose one of their

1922
01:21:39,219 --> 01:21:44,590
devices but I this has been a slightly

1923
01:21:42,969 --> 01:21:47,229
challenging thing to educate users on

1924
01:21:44,590 --> 01:21:49,599
they just in some ways they don't get it

1925
01:21:47,229 --> 01:21:52,030
and you know they need a lot of

1926
01:21:49,599 --> 01:21:55,090
reinforcement as to how to manage their

1927
01:21:52,030 --> 01:21:55,889
keys here's an example email I got not

1928
01:21:55,090 --> 01:21:59,559
too long ago

1929
01:21:55,889 --> 01:22:04,090
hi max my server crashed and burned and

1930
01:21:59,559 --> 01:22:05,800
I lost my paper key in jalapeno and I

1931
01:22:04,090 --> 01:22:07,659
don't know if you guys I have no idea

1932
01:22:05,800 --> 01:22:10,090
what jalapeno means in this context it's

1933
01:22:07,659 --> 01:22:11,920
just the guy lost this jalapeno I know

1934
01:22:10,090 --> 01:22:14,050
is there any way I could provide some

1935
01:22:11,920 --> 01:22:14,979
sort of ID verification to get my key

1936
01:22:14,050 --> 01:22:19,030
base account back

1937
01:22:14,979 --> 01:22:20,650
Thanks so it's an ongoing process for us

1938
01:22:19,030 --> 01:22:22,360
to try to get people to manage their

1939
01:22:20,650 --> 01:22:26,190
Kia's properly and you know we're gonna

1940
01:22:22,360 --> 01:22:26,190
continue to work on it as we go forward

1941
01:22:26,639 --> 01:22:32,800
so in sum we think the key problem to

1942
01:22:30,699 --> 01:22:35,728
hone in on here is what multi device

1943
01:22:32,800 --> 01:22:37,869
access looks like and in particular

1944
01:22:35,729 --> 01:22:39,880
someone who's just bringing a new device

1945
01:22:37,869 --> 01:22:42,339
online do they have access to all the

1946
01:22:39,880 --> 01:22:44,280
things they need to have access to and

1947
01:22:42,340 --> 01:22:48,280
the solution we cooked up is called this

1948
01:22:44,280 --> 01:22:50,110
this thing per user keys but you know

1949
01:22:48,280 --> 01:22:51,550
whatever system you how you happen to be

1950
01:22:50,110 --> 01:22:54,429
working on this this is really something

1951
01:22:51,550 --> 01:22:55,900
that needs to be correct if you want

1952
01:22:54,429 --> 01:22:58,300
users to switch from their non secure

1953
01:22:55,900 --> 01:23:01,179
version of apps to to their m10 secure

1954
01:22:58,300 --> 01:23:05,110
version of to the N sense and to end

1955
01:23:01,179 --> 01:23:06,639
secure version that you were building in

1956
01:23:05,110 --> 01:23:09,249
addition to that I talked a lot about

1957
01:23:06,639 --> 01:23:11,380
how users are chains of device additions

1958
01:23:09,249 --> 01:23:13,570
removals and this notion where all

1959
01:23:11,380 --> 01:23:15,820
devices are equally powerful seems to be

1960
01:23:13,570 --> 01:23:18,639
easy to explain in the user interface

1961
01:23:15,820 --> 01:23:21,130
and also has has some nice properties in

1962
01:23:18,639 --> 01:23:22,030
terms of data durability and key

1963
01:23:21,130 --> 01:23:25,060
durability

1964
01:23:22,030 --> 01:23:28,179
and finally that same abstraction is

1965
01:23:25,060 --> 01:23:31,030
pretty useful for organizing teams to be

1966
01:23:28,180 --> 01:23:33,190
these chains of users the the admins of

1967
01:23:31,030 --> 01:23:35,160
which are equally powerful and then from

1968
01:23:33,190 --> 01:23:37,299
there you can build up the these other

1969
01:23:35,160 --> 01:23:39,250
this other abstraction which is having a

1970
01:23:37,300 --> 01:23:41,350
secret key that's rotated for a team in

1971
01:23:39,250 --> 01:23:43,150
the right way and that's really all you

1972
01:23:41,350 --> 01:23:47,140
need to build full-featured apps that

1973
01:23:43,150 --> 01:23:49,240
rival their insecure predecessors so

1974
01:23:47,140 --> 01:23:51,450
that's key base you could download this

1975
01:23:49,240 --> 01:23:55,450
app this app today on all five platforms

1976
01:23:51,450 --> 01:23:57,820
and we encourage you to do so and also

1977
01:23:55,450 --> 01:23:59,410
thank you for listening and happy to

1978
01:23:57,820 --> 01:24:04,349
take your questions

1979
01:23:59,410 --> 01:24:04,349
[Applause]

1980
01:24:06,820 --> 01:24:13,910
okay first question here hi thanks for

1981
01:24:10,310 --> 01:24:16,100
all your work I was wondering what about

1982
01:24:13,910 --> 01:24:18,440
the metadata in this miracle tree such

1983
01:24:16,100 --> 01:24:21,320
as team membership is this something

1984
01:24:18,440 --> 01:24:23,389
that your server knows and do you plan

1985
01:24:21,320 --> 01:24:25,219
to hide it somehow or do you want to

1986
01:24:23,390 --> 01:24:27,860
prevent your service from having access

1987
01:24:25,220 --> 01:24:32,000
to that or yeah that's a great question

1988
01:24:27,860 --> 01:24:34,309
so um our server knows it yes we we hide

1989
01:24:32,000 --> 01:24:37,130
it via access control right now so if

1990
01:24:34,310 --> 01:24:38,750
you have some secrets company you know

1991
01:24:37,130 --> 01:24:40,910
you've shared the membership with us but

1992
01:24:38,750 --> 01:24:43,490
not necessarily with anyone else use it

1993
01:24:40,910 --> 01:24:45,559
with system what does the system look

1994
01:24:43,490 --> 01:24:47,870
like where the the server doesn't know

1995
01:24:45,560 --> 01:24:50,510
that it's definitely a lot more

1996
01:24:47,870 --> 01:24:52,670
complicated in particular you know we

1997
01:24:50,510 --> 01:24:54,770
have to worry about badging and push

1998
01:24:52,670 --> 01:24:55,790
notifications and not fully certain how

1999
01:24:54,770 --> 01:24:57,890
that would work without the server

2000
01:24:55,790 --> 01:25:02,380
knowing about it so we just didn't

2001
01:24:57,890 --> 01:25:08,090
really go there but thanks good question

2002
01:25:02,380 --> 01:25:10,970
so if one of my devices is compromised

2003
01:25:08,090 --> 01:25:13,430
and they use that device to revoke all

2004
01:25:10,970 --> 01:25:15,230
of my other devices got screwed am i yes

2005
01:25:13,430 --> 01:25:19,430
you're screwed you're totally screwed

2006
01:25:15,230 --> 01:25:21,919
thank you our answer to that is is you

2007
01:25:19,430 --> 01:25:23,840
should have you know a good password and

2008
01:25:21,920 --> 01:25:25,130
and face unlock on your iPhone and a

2009
01:25:23,840 --> 01:25:34,310
good swipe pattern on your Android phone

2010
01:25:25,130 --> 01:25:36,350
and great question that's you got it so

2011
01:25:34,310 --> 01:25:38,180
let's let's take that like worst case

2012
01:25:36,350 --> 01:25:40,310
scenario down a notch and let's to say

2013
01:25:38,180 --> 01:25:43,370
an attacker is trying to perform either

2014
01:25:40,310 --> 01:25:45,260
espionage on the team so their goal

2015
01:25:43,370 --> 01:25:47,450
isn't to like grief you but they

2016
01:25:45,260 --> 01:25:50,360
compromised one of your devices and they

2017
01:25:47,450 --> 01:25:53,240
attempt to do a forking attack so I've

2018
01:25:50,360 --> 01:25:56,599
compromised maybe this person's a laptop

2019
01:25:53,240 --> 01:25:59,929
I've installed malware my goal is to

2020
01:25:56,600 --> 01:26:02,000
split Alice off from the group and then

2021
01:25:59,930 --> 01:26:04,400
maybe potentially like relay messages to

2022
01:26:02,000 --> 01:26:07,400
her so she still thinks that she's you

2023
01:26:04,400 --> 01:26:10,309
know talking to her team but the group

2024
01:26:07,400 --> 01:26:13,610
is now talking to Mallory you know or

2025
01:26:10,310 --> 01:26:15,650
Eve or somebody what prevents that is it

2026
01:26:13,610 --> 01:26:16,269
is it the merkel pinning into the

2027
01:26:15,650 --> 01:26:19,089
Bitcoin

2028
01:26:16,270 --> 01:26:20,980
blockchain or yeah what's what's there

2029
01:26:19,090 --> 01:26:24,550
what's their attack window there right

2030
01:26:20,980 --> 01:26:27,040
so the attack that attack is better

2031
01:26:24,550 --> 01:26:28,780
performed if you just take over our ec2

2032
01:26:27,040 --> 01:26:30,790
nodes right get like Alice's device

2033
01:26:28,780 --> 01:26:31,990
probably might not be as useful because

2034
01:26:30,790 --> 01:26:36,130
do you really need to broadcast at the

2035
01:26:31,990 --> 01:26:40,030
two separate groups separately so is it

2036
01:26:36,130 --> 01:26:42,580
basically that the per user key gets

2037
01:26:40,030 --> 01:26:44,320
rolled whenever I whenever I attack her

2038
01:26:42,580 --> 01:26:45,790
and then and then other people on the

2039
01:26:44,320 --> 01:26:48,099
team are gonna be encrypting to that

2040
01:26:45,790 --> 01:26:50,950
well no because I still have that key so

2041
01:26:48,100 --> 01:26:52,480
I don't understand that we'll talk about

2042
01:26:50,950 --> 01:26:54,610
alpha yeah but I did want me to answer

2043
01:26:52,480 --> 01:26:56,139
the lecture did the other question I

2044
01:26:54,610 --> 01:26:59,110
imagined Mallory controls our root

2045
01:26:56,140 --> 01:27:01,570
passwords and I'm sure yeah so I I think

2046
01:26:59,110 --> 01:27:05,139
the key data structure there is is the

2047
01:27:01,570 --> 01:27:07,059
Merkle tree which you know Alice if

2048
01:27:05,140 --> 01:27:08,230
Alice T is one copy and Bob sees another

2049
01:27:07,060 --> 01:27:10,660
copy that means they've been forked

2050
01:27:08,230 --> 01:27:12,580
right and and so the the adversary then

2051
01:27:10,660 --> 01:27:14,349
has to maintain that fork indefinitely

2052
01:27:12,580 --> 01:27:16,330
yeah and can never rejoin them again gia

2053
01:27:14,350 --> 01:27:18,550
and if you know if Alice or Bob has any

2054
01:27:16,330 --> 01:27:19,660
sort of you know offline gossip

2055
01:27:18,550 --> 01:27:21,370
mechanism or they're checking the

2056
01:27:19,660 --> 01:27:27,340
Bitcoin block and then they know they're

2057
01:27:21,370 --> 01:27:30,460
on opposite sides of the fork good

2058
01:27:27,340 --> 01:27:33,040
question so I guess your view of PCs is

2059
01:27:30,460 --> 01:27:34,870
some kind of best well active PCs in the

2060
01:27:33,040 --> 01:27:36,400
sense that if something really happens

2061
01:27:34,870 --> 01:27:38,260
so the key is aesthetic but if something

2062
01:27:36,400 --> 01:27:41,049
really happens that you know kids need

2063
01:27:38,260 --> 01:27:42,880
to change you change some kind of apps

2064
01:27:41,050 --> 01:27:45,430
like signal and songs I take like much

2065
01:27:42,880 --> 01:27:47,140
more OTR they take much more aggressive

2066
01:27:45,430 --> 01:27:49,240
approach they try to like Ricky whenever

2067
01:27:47,140 --> 01:27:50,920
they can in some sense I guess he you

2068
01:27:49,240 --> 01:27:52,510
can also do even if nothing changes you

2069
01:27:50,920 --> 01:27:54,160
can just kind of I device control a new

2070
01:27:52,510 --> 01:27:56,440
key yeah I'm just curious what's your

2071
01:27:54,160 --> 01:27:58,000
view of it are they paranoid or maybe

2072
01:27:56,440 --> 01:27:59,530
you're not but I know it enough what's

2073
01:27:58,000 --> 01:28:03,310
your view on like very aggressively the

2074
01:27:59,530 --> 01:28:06,309
king yeah um well I I guess our view is

2075
01:28:03,310 --> 01:28:08,590
you know we think the worst-case

2076
01:28:06,310 --> 01:28:11,410
scenario is that someone leaves a laptop

2077
01:28:08,590 --> 01:28:13,120
well you know a user leaves a laptop in

2078
01:28:11,410 --> 01:28:14,530
a cab or you know they lose the phone

2079
01:28:13,120 --> 01:28:16,210
right and then we think maybe the key

2080
01:28:14,530 --> 01:28:18,580
might be lost in which case they push

2081
01:28:16,210 --> 01:28:19,540
revoke and all the keys roll so you know

2082
01:28:18,580 --> 01:28:21,790
obviously there's like a lunchtime

2083
01:28:19,540 --> 01:28:23,140
attack maybe wherever someone is able to

2084
01:28:21,790 --> 01:28:25,460
go in and compromise the key and then

2085
01:28:23,140 --> 01:28:28,640
we're not recovering from that so

2086
01:28:25,460 --> 01:28:31,340
I think we're putting a lot of the onus

2087
01:28:28,640 --> 01:28:32,750
on the OS developers here and they've

2088
01:28:31,340 --> 01:28:35,659
done a really good job with local

2089
01:28:32,750 --> 01:28:37,250
security of you know of devices and

2090
01:28:35,659 --> 01:28:39,860
we're using that I think to prevent

2091
01:28:37,250 --> 01:28:41,060
against these types of you know more

2092
01:28:39,860 --> 01:28:42,860
subtle attacks where you still have the

2093
01:28:41,060 --> 01:28:44,420
device but it yet it's compromised so so

2094
01:28:42,860 --> 01:28:46,790
that's probably the answer we're taking

2095
01:28:44,420 --> 01:28:49,310
and in terms of try answer our forward

2096
01:28:46,790 --> 01:28:51,880
secrecy question to you or did you could

2097
01:28:49,310 --> 01:28:54,590
I mean it well I mean it's related but

2098
01:28:51,880 --> 01:28:56,390
yeah yeah so our forward secrecy is

2099
01:28:54,590 --> 01:28:58,699
certainly not as paranoid as signals I

2100
01:28:56,390 --> 01:28:59,780
think we're rotating are ephemeral keys

2101
01:28:58,699 --> 01:29:02,269
maybe once a day so they're definitely

2102
01:28:59,780 --> 01:29:03,620
linked since the attack window but it's

2103
01:29:02,270 --> 01:29:05,179
still you you should feel pretty good

2104
01:29:03,620 --> 01:29:07,760
about something you wrote you know month

2105
01:29:05,179 --> 01:29:09,230
oh not not being available um to someone

2106
01:29:07,760 --> 01:29:11,120
who compromises your keys today so I

2107
01:29:09,230 --> 01:29:12,790
think I think yeah we're a little bit

2108
01:29:11,120 --> 01:29:14,809
less paranoid than other people I and

2109
01:29:12,790 --> 01:29:16,640
what we care a lot about is I think

2110
01:29:14,810 --> 01:29:18,020
scalability so we want to scale to 10

2111
01:29:16,640 --> 01:29:19,580
thousand a hundred thousand person

2112
01:29:18,020 --> 01:29:20,929
groups and we think that you know we've

2113
01:29:19,580 --> 01:29:22,880
kind of made these trade-offs as a

2114
01:29:20,929 --> 01:29:23,989
result it just now's a good question

2115
01:29:22,880 --> 01:29:26,750
what about call cedar select

2116
01:29:23,989 --> 01:29:28,190
synchronization issues you know some of

2117
01:29:26,750 --> 01:29:29,900
the issues like you know one device

2118
01:29:28,190 --> 01:29:31,639
didn't update the key didn't get this

2119
01:29:29,900 --> 01:29:33,949
message but you know things in creative

2120
01:29:31,640 --> 01:29:36,080
his new keys maybe some message is lost

2121
01:29:33,949 --> 01:29:38,780
like some update message didn't reach

2122
01:29:36,080 --> 01:29:40,489
one device how do we deal with this or

2123
01:29:38,780 --> 01:29:44,719
you kind of assume reliable delivery of

2124
01:29:40,489 --> 01:29:48,049
everything kind of in order well in my

2125
01:29:44,719 --> 01:29:49,550
notion of you is up to date if I'm able

2126
01:29:48,050 --> 01:29:51,469
to look at the Merkel tree and and see

2127
01:29:49,550 --> 01:29:52,670
what what the last update you made into

2128
01:29:51,469 --> 01:29:54,890
the Merkel tree isn't and so in that

2129
01:29:52,670 --> 01:29:57,469
sense everyone is is serialized um I

2130
01:29:54,890 --> 01:29:59,600
think with the ephemeral messaging you

2131
01:29:57,469 --> 01:30:00,860
might wind up because that's another

2132
01:29:59,600 --> 01:30:02,929
layer on top of it and that's not

2133
01:30:00,860 --> 01:30:04,190
synchronize for the Merkel tree so you

2134
01:30:02,929 --> 01:30:05,540
definitely could wind up in some cases

2135
01:30:04,190 --> 01:30:07,099
where even though I ought to have been

2136
01:30:05,540 --> 01:30:08,210
able to decrypt something I can because

2137
01:30:07,100 --> 01:30:10,219
my device wasn't online

2138
01:30:08,210 --> 01:30:12,469
at the right time I think I think that's

2139
01:30:10,219 --> 01:30:14,120
you know hard to avoid in all cases and

2140
01:30:12,469 --> 01:30:16,520
sometimes it can be recovered I guess

2141
01:30:14,120 --> 01:30:18,739
you will just to keep looking can you

2142
01:30:16,520 --> 01:30:20,929
recover I think maybe there are some

2143
01:30:18,739 --> 01:30:23,360
cases where you can't recover a message

2144
01:30:20,929 --> 01:30:27,010
you should have seen I think I I'm not

2145
01:30:23,360 --> 01:30:27,009
not going to be a great answer to that

2146
01:30:27,880 --> 01:30:32,719
yeah to me it looks like I need to spend

2147
01:30:31,520 --> 01:30:37,790
some time taking a look at the design

2148
01:30:32,719 --> 01:30:39,140
but can you delete the revoke the device

2149
01:30:37,790 --> 01:30:42,260
from where you had sign

2150
01:30:39,140 --> 01:30:44,150
in as a first-time user because it's

2151
01:30:42,260 --> 01:30:46,490
easier use during a self-signed

2152
01:30:44,150 --> 01:30:49,009
operation there can you revoke the

2153
01:30:46,490 --> 01:30:52,240
device you're on that form from where

2154
01:30:49,010 --> 01:30:54,560
you have signed as a first-time user I

2155
01:30:52,240 --> 01:30:57,760
yes you can definitely revoke the device

2156
01:30:54,560 --> 01:31:00,350
you're on I think that's that's allowed

2157
01:30:57,760 --> 01:31:02,180
okay but that wasn't the question sorry

2158
01:31:00,350 --> 01:31:04,840
oh no the question was from where you

2159
01:31:02,180 --> 01:31:09,470
have signed up as a first-time user ever

2160
01:31:04,840 --> 01:31:12,800
for an in the the the topmost the the

2161
01:31:09,470 --> 01:31:14,450
bottom most element in the Merkle tree

2162
01:31:12,800 --> 01:31:14,870
or the first node in the merkel 3 down

2163
01:31:14,450 --> 01:31:17,240
there

2164
01:31:14,870 --> 01:31:19,880
okay well a self-signed operation was

2165
01:31:17,240 --> 01:31:22,099
done yes can you revoke that device oh

2166
01:31:19,880 --> 01:31:22,760
yes yes because it's self signed yes

2167
01:31:22,100 --> 01:31:24,290
absolutely

2168
01:31:22,760 --> 01:31:25,670
yes I think it's an important

2169
01:31:24,290 --> 01:31:26,870
requirement because that happens in

2170
01:31:25,670 --> 01:31:30,050
practice I and I think I probably

2171
01:31:26,870 --> 01:31:31,700
revoked my first device yeah it's you

2172
01:31:30,050 --> 01:31:34,160
have this sliding window devices that

2173
01:31:31,700 --> 01:31:35,960
always speaks for you and and as long as

2174
01:31:34,160 --> 01:31:37,610
it's a self-consistent sliding window

2175
01:31:35,960 --> 01:31:39,980
and then and then but it's it's fine in

2176
01:31:37,610 --> 01:31:44,480
our system okay thanks thank you I

2177
01:31:39,980 --> 01:31:46,129
understand diversity how many search

2178
01:31:44,480 --> 01:31:47,599
scheme has been promising enough for you

2179
01:31:46,130 --> 01:31:49,790
to look into implementing or is that not

2180
01:31:47,600 --> 01:31:51,470
something on the roadmap right that's a

2181
01:31:49,790 --> 01:31:52,670
great question we have search it works

2182
01:31:51,470 --> 01:31:54,740
on the command line and doesn't work in

2183
01:31:52,670 --> 01:31:57,470
the in the UI and it's doing the most

2184
01:31:54,740 --> 01:31:59,360
basic naive possible thing so the client

2185
01:31:57,470 --> 01:32:01,550
sucked down all the data they just index

2186
01:31:59,360 --> 01:32:03,019
it they they keep the index locally

2187
01:32:01,550 --> 01:32:06,080
we're not using any sophisticated

2188
01:32:03,020 --> 01:32:08,420
encrypted searches one optimization we

2189
01:32:06,080 --> 01:32:10,490
could make is that your desktop could

2190
01:32:08,420 --> 01:32:12,050
index your messages for you and sink it

2191
01:32:10,490 --> 01:32:13,130
over to your to your phones that what

2192
01:32:12,050 --> 01:32:14,780
your phone doesn't have to do it but we

2193
01:32:13,130 --> 01:32:16,640
haven't even done that optimization yet

2194
01:32:14,780 --> 01:32:18,320
we were a little bit scared of all the

2195
01:32:16,640 --> 01:32:20,420
encrypted search technology because you

2196
01:32:18,320 --> 01:32:22,549
know there's a lot of literature about

2197
01:32:20,420 --> 01:32:27,430
how it's not working exactly as intended

2198
01:32:22,550 --> 01:32:27,430
so we didn't want to go there thank you

2199
01:32:27,850 --> 01:32:32,470
let's thank the speaker thank you

2200
01:32:37,260 --> 01:32:48,840
okay so we'll break for coffee and the

2201
01:32:41,050 --> 01:32:48,840
next session starts at loving nice job

2202
01:58:48,440 --> 01:58:51,839
one one one

2203
01:58:50,160 --> 01:58:53,160
hi everybody if you could take your

2204
01:58:51,840 --> 01:59:03,540
seats please we're just about to begin

2205
01:58:53,160 --> 01:59:05,070
the next session okay we have a couple

2206
01:59:03,540 --> 01:59:06,390
of important announcements to make so if

2207
01:59:05,070 --> 01:59:08,990
you could take your seats quickly please

2208
01:59:06,390 --> 01:59:18,270
well we'll get started Thanks

2209
01:59:08,990 --> 01:59:21,030
yeah okay first of all I'm gonna give

2210
01:59:18,270 --> 01:59:23,850
the mic to Nigel who's gonna announce

2211
01:59:21,030 --> 01:59:24,509
how the lightning talk session is going

2212
01:59:23,850 --> 01:59:29,490
to work

2213
01:59:24,510 --> 01:59:31,200
okay so Nigel hello there right

2214
01:59:29,490 --> 01:59:33,330
this is I'm loud because I want

2215
01:59:31,200 --> 01:59:34,920
everybody outside to realize something's

2216
01:59:33,330 --> 01:59:37,019
going on so they can come in and listen

2217
01:59:34,920 --> 01:59:38,940
because this is important okay the

2218
01:59:37,020 --> 01:59:40,860
Lightning talks if you have not been to

2219
01:59:38,940 --> 01:59:42,870
real world trip so before you have no

2220
01:59:40,860 --> 01:59:45,269
idea what's going to happen so please

2221
01:59:42,870 --> 01:59:47,610
neither do i but let's come that's er

2222
01:59:45,270 --> 01:59:49,560
this is what's going to happen when the

2223
01:59:47,610 --> 01:59:52,200
session finishes there's going to be two

2224
01:59:49,560 --> 01:59:54,150
talks in the next session at the end of

2225
01:59:52,200 --> 01:59:56,010
that session which should be I think

2226
01:59:54,150 --> 01:59:58,740
sometimes I can't member to this I will

2227
01:59:56,010 --> 02:00:02,460
look up you 12 o'clock thank you right

2228
01:59:58,740 --> 02:00:05,870
so people will form an orderly queue I'm

2229
02:00:02,460 --> 02:00:09,180
English we queue right so you queue here

2230
02:00:05,870 --> 02:00:12,720
the amount of time you will have to

2231
02:00:09,180 --> 02:00:14,760
speak is the length of the queue were

2232
02:00:12,720 --> 02:00:17,310
sorry is the amount of time left in the

2233
02:00:14,760 --> 02:00:18,750
lightning talk session divided by the

2234
02:00:17,310 --> 02:00:21,420
length of the queue

2235
02:00:18,750 --> 02:00:24,270
therefore if the people at the front of

2236
02:00:21,420 --> 02:00:25,620
the queue speak fast then people in the

2237
02:00:24,270 --> 02:00:27,780
middle of the queue are going to get

2238
02:00:25,620 --> 02:00:29,730
longer to speak so there's a bit of a

2239
02:00:27,780 --> 02:00:33,179
game deciding where in the queue you

2240
02:00:29,730 --> 02:00:35,400
would like to be to get the maximum

2241
02:00:33,180 --> 02:00:38,850
amount of time to speak you are not

2242
02:00:35,400 --> 02:00:41,549
allowed to use any slights you just come

2243
02:00:38,850 --> 02:00:45,510
up you're given you're given yeah you're

2244
02:00:41,550 --> 02:00:47,370
given the microphone you speak I take

2245
02:00:45,510 --> 02:00:51,210
the microphone off you when your

2246
02:00:47,370 --> 02:00:53,309
allotted time has finished okay you give

2247
02:00:51,210 --> 02:00:56,160
the microphone up when I say the time

2248
02:00:53,310 --> 02:00:57,079
has finished that's very very important

2249
02:00:56,160 --> 02:00:59,929
and then

2250
02:00:57,079 --> 02:01:02,058
leave the stage that way so you don't

2251
02:00:59,929 --> 02:01:03,649
get in the way of the people queuing

2252
02:01:02,059 --> 02:01:06,679
this way otherwise she just goes like

2253
02:01:03,649 --> 02:01:08,809
mad so the speedier the better orderly

2254
02:01:06,679 --> 02:01:10,760
queue and we'll try and get through

2255
02:01:08,809 --> 02:01:12,320
everybody even if at the end everybody

2256
02:01:10,760 --> 02:01:15,889
who can only speak for a second or so

2257
02:01:12,320 --> 02:01:17,570
they're the rules and I hope you enjoy

2258
02:01:15,889 --> 02:01:21,169
it and you can do whatever you want you

2259
02:01:17,570 --> 02:01:24,228
specifically advertise jobs brilliant

2260
02:01:21,169 --> 02:01:26,030
ideas things you just want to say just

2261
02:01:24,229 --> 02:01:28,189
say hi I'm here if you just like what

2262
02:01:26,030 --> 02:01:30,648
you're really interested in but but try

2263
02:01:28,189 --> 02:01:33,530
make it interesting anyway I'll be over

2264
02:01:30,649 --> 02:01:35,239
the Kenny okay Thank You Nigel so that's

2265
02:01:33,530 --> 02:01:37,188
starting at 12 o'clock okay and it's

2266
02:01:35,239 --> 02:01:38,839
supposed to be light-hearted and fun and

2267
02:01:37,189 --> 02:01:41,389
also informative so we look forward to

2268
02:01:38,839 --> 02:01:43,129
your participation in that session we're

2269
02:01:41,389 --> 02:01:44,449
going to move on with the formal part of

2270
02:01:43,129 --> 02:01:46,070
the program now one quick announcement

2271
02:01:44,449 --> 02:01:47,388
before we do that and if you were

2272
02:01:46,070 --> 02:01:49,308
looking for seating yesterday at

2273
02:01:47,389 --> 02:01:50,839
lunchtime rather than standing up to eat

2274
02:01:49,309 --> 02:01:53,629
your sandwiches we now have available

2275
02:01:50,839 --> 02:01:54,979
behind this room the conference rooms on

2276
02:01:53,629 --> 02:01:56,329
this kind of row in the back of here

2277
02:01:54,979 --> 02:01:58,039
there'll be about a hundred seats there

2278
02:01:56,329 --> 02:01:59,299
so if you want to take your sandwiches

2279
02:01:58,039 --> 02:02:00,739
and go and sit down around there that

2280
02:01:59,300 --> 02:02:02,599
would be a nice place to have lunch

2281
02:02:00,739 --> 02:02:04,398
otherwise of course you can just

2282
02:02:02,599 --> 02:02:06,789
continue to use the rooms around here as

2283
02:02:04,399 --> 02:02:09,709
we did yesterday okay so that's lunch

2284
02:02:06,789 --> 02:02:10,849
later on now we have two talks and the

2285
02:02:09,709 --> 02:02:13,398
first talk is going to be given by

2286
02:02:10,849 --> 02:02:14,719
johann von Berg from rice secure and

2287
02:02:13,399 --> 02:02:17,179
he's gonna tell us about side-channel

2288
02:02:14,719 --> 02:02:19,939
attacks in practice and in theory I hope

2289
02:02:17,179 --> 02:02:21,079
maybe maybe I misread your title take it

2290
02:02:19,939 --> 02:02:23,119
away thank you very much well now in

2291
02:02:21,079 --> 02:02:25,759
half an hour all right thank you

2292
02:02:23,119 --> 02:02:28,188
everyone my name is Oscar from Alta Mira

2293
02:02:25,760 --> 02:02:31,249
and I'll talk about the practicing

2294
02:02:28,189 --> 02:02:34,219
side-channel attacks and fault attacks

2295
02:02:31,249 --> 02:02:36,489
in a lab situation now since we're a

2296
02:02:34,219 --> 02:02:39,109
research community here I also want to

2297
02:02:36,489 --> 02:02:40,728
project our future vision here and all

2298
02:02:39,109 --> 02:02:42,379
the research that we need to to get

2299
02:02:40,729 --> 02:02:45,649
there to make it at least more

2300
02:02:42,379 --> 02:02:47,929
interesting for me as well so our vision

2301
02:02:45,649 --> 02:02:49,899
obviously starts with with a connected

2302
02:02:47,929 --> 02:02:52,429
toothbrush as a whole vision student

2303
02:02:49,899 --> 02:02:55,789
actually this is my daughter's favorites

2304
02:02:52,429 --> 02:02:57,379
connected toothbrush but for now just

2305
02:02:55,789 --> 02:03:00,438
pretend that this is any kind of device

2306
02:02:57,379 --> 02:03:03,939
be it a following a smart card a set of

2307
02:03:00,439 --> 02:03:06,409
books anything that has security in it

2308
02:03:03,939 --> 02:03:09,170
we envision there's a big red button

2309
02:03:06,409 --> 02:03:12,290
although we're not like

2310
02:03:09,170 --> 02:03:15,560
hung up on the color yet and if we press

2311
02:03:12,290 --> 02:03:17,810
the button outcome three things either a

2312
02:03:15,560 --> 02:03:21,080
certificate that says this advice is

2313
02:03:17,810 --> 02:03:22,969
good or not maybe out comes a set of

2314
02:03:21,080 --> 02:03:24,460
recommendations let's say hey you should

2315
02:03:22,969 --> 02:03:26,420
do this and this and this to improve it

2316
02:03:24,460 --> 02:03:28,880
or even better it will just

2317
02:03:26,420 --> 02:03:32,480
automatically generates countermeasures

2318
02:03:28,880 --> 02:03:32,750
for the developers now we're not there

2319
02:03:32,480 --> 02:03:35,389
yet

2320
02:03:32,750 --> 02:03:38,750
and so let's have a look at where we are

2321
02:03:35,390 --> 02:03:43,070
today we have the toothbrush good start

2322
02:03:38,750 --> 02:03:47,210
and the first one we're looking at fault

2323
02:03:43,070 --> 02:03:49,790
attacks and side-channel attacks we need

2324
02:03:47,210 --> 02:03:52,040
to do some signal processing so we

2325
02:03:49,790 --> 02:03:54,110
obtain signals from this device while

2326
02:03:52,040 --> 02:03:56,929
it's processing keys or anything that

2327
02:03:54,110 --> 02:03:58,489
are interesting and we need to do some

2328
02:03:56,929 --> 02:04:00,560
leakage modeling which means that we

2329
02:03:58,489 --> 02:04:02,389
need to somehow relate these signals to

2330
02:04:00,560 --> 02:04:05,120
the actual secrets that are being

2331
02:04:02,390 --> 02:04:08,540
processed and this is all manual work

2332
02:04:05,120 --> 02:04:11,420
I'll go into the more details in a

2333
02:04:08,540 --> 02:04:13,580
second similarly when we're doing fault

2334
02:04:11,420 --> 02:04:17,449
attacks we're actually trying to make a

2335
02:04:13,580 --> 02:04:20,269
device misbehave in an insecure way that

2336
02:04:17,449 --> 02:04:22,580
can mean we hit it with laser beam or we

2337
02:04:20,270 --> 02:04:24,199
glitch the power supply or we temporary

2338
02:04:22,580 --> 02:04:26,150
overclock it it doesn't matter so much

2339
02:04:24,199 --> 02:04:28,160
as long as it makes some kind of

2340
02:04:26,150 --> 02:04:32,509
computational fault that we can exploit

2341
02:04:28,160 --> 02:04:35,780
and that can be during crypto willwerth

2342
02:04:32,510 --> 02:04:37,880
crypto or it can be during friends as an

2343
02:04:35,780 --> 02:04:39,469
access control check if it's checking a

2344
02:04:37,880 --> 02:04:41,630
pin code and at the end it makes a

2345
02:04:39,469 --> 02:04:43,489
binary decision yes/no it's correct and

2346
02:04:41,630 --> 02:04:44,989
if I can flip that then I'm also eating

2347
02:04:43,489 --> 02:04:49,968
so it doesn't necessarily have to deal

2348
02:04:44,989 --> 02:04:52,250
with crypto so this is a large part of

2349
02:04:49,969 --> 02:04:54,440
this is still art and by arts I mean

2350
02:04:52,250 --> 02:04:56,360
there's a human in the lab trying to

2351
02:04:54,440 --> 02:04:58,129
figure out how to do this there's not

2352
02:04:56,360 --> 02:04:59,509
really a script for how to do this

2353
02:04:58,130 --> 02:05:02,330
there's some tools that you used

2354
02:04:59,510 --> 02:05:04,280
obviously but it relies a lot in

2355
02:05:02,330 --> 02:05:10,460
intuition and experience on how to

2356
02:05:04,280 --> 02:05:12,590
really approach this we do have somewhat

2357
02:05:10,460 --> 02:05:14,000
of a button so once we've done this

2358
02:05:12,590 --> 02:05:16,100
signal processing there's a couple of

2359
02:05:14,000 --> 02:05:17,480
tools available to us that are kind of

2360
02:05:16,100 --> 02:05:20,510
well-defined they're written so

2361
02:05:17,480 --> 02:05:22,580
differential power analysis we also have

2362
02:05:20,510 --> 02:05:23,119
TV LA which is I'll get to that into a

2363
02:05:22,580 --> 02:05:24,949
second

2364
02:05:23,119 --> 02:05:27,799
it's another way of detecting leakage

2365
02:05:24,949 --> 02:05:29,419
and on the Fulton Jackson side we have

2366
02:05:27,800 --> 02:05:32,119
things like differential fault analysis

2367
02:05:29,420 --> 02:05:35,360
or just simply testing success rates of

2368
02:05:32,119 --> 02:05:37,759
how well does my fault work on the

2369
02:05:35,360 --> 02:05:41,570
device so I'm gonna bucket this is this

2370
02:05:37,760 --> 02:05:45,010
the science department now and on the

2371
02:05:41,570 --> 02:05:47,690
right hand side we have we still have

2372
02:05:45,010 --> 02:05:49,310
certificates that come out of our lab we

2373
02:05:47,690 --> 02:05:51,860
have recommendations that come out of

2374
02:05:49,310 --> 02:05:54,260
our lab and countermeasures and there's

2375
02:05:51,860 --> 02:05:59,030
some science some art it's a bit of a

2376
02:05:54,260 --> 02:06:01,159
mixed bag there one of the challenges

2377
02:05:59,030 --> 02:06:05,480
that we have with this is that this

2378
02:06:01,159 --> 02:06:07,790
whole process for a single algorithm

2379
02:06:05,480 --> 02:06:12,799
should take anywhere between two weeks

2380
02:06:07,790 --> 02:06:14,780
and two months or so so that's

2381
02:06:12,800 --> 02:06:18,560
especially known the two weeks and

2382
02:06:14,780 --> 02:06:20,750
that's that's pretty quick so this is

2383
02:06:18,560 --> 02:06:22,429
our motivation for researching this and

2384
02:06:20,750 --> 02:06:24,139
making it just more automated and making

2385
02:06:22,429 --> 02:06:25,940
this better so let's dive a little bit

2386
02:06:24,139 --> 02:06:29,090
more into the into the details here I

2387
02:06:25,940 --> 02:06:31,190
will first look at the power of side

2388
02:06:29,090 --> 02:06:34,460
channel analysis a fault injection and

2389
02:06:31,190 --> 02:06:37,178
let's look at the art part of it this is

2390
02:06:34,460 --> 02:06:42,830
the piece of art that I brought for you

2391
02:06:37,179 --> 02:06:44,510
stare at it and mired so it's it's a

2392
02:06:42,830 --> 02:06:46,250
basic set up that we have in our lab on

2393
02:06:44,510 --> 02:06:50,090
the left you see an oscilloscope which

2394
02:06:46,250 --> 02:06:52,940
we used to capture signals that big box

2395
02:06:50,090 --> 02:06:54,920
in the middle is it's a power supply and

2396
02:06:52,940 --> 02:06:57,049
on the right if you look carefully I'll

2397
02:06:54,920 --> 02:06:58,489
zoom in in a second you'll actually see

2398
02:06:57,050 --> 02:07:00,770
a target device with an electromagnetic

2399
02:06:58,489 --> 02:07:05,178
probe over it that we use to actually

2400
02:07:00,770 --> 02:07:06,980
send these signals and and the process

2401
02:07:05,179 --> 02:07:09,020
kind of looks as follows we take these

2402
02:07:06,980 --> 02:07:11,718
signals then we have to do a bunch of

2403
02:07:09,020 --> 02:07:14,420
signal processing we have to do the leek

2404
02:07:11,719 --> 02:07:19,869
it's modeling and then maybe out comes

2405
02:07:14,420 --> 02:07:23,719
the crypto key if it's leaky enough now

2406
02:07:19,869 --> 02:07:27,348
signal processing really boils down to a

2407
02:07:23,719 --> 02:07:29,659
number of tools again that we have that

2408
02:07:27,349 --> 02:07:32,179
where it's not necessarily defined up

2409
02:07:29,659 --> 02:07:35,179
front how to use those or when to use

2410
02:07:32,179 --> 02:07:36,739
these so this is really an art for

2411
02:07:35,179 --> 02:07:39,619
instance if you have the top trace

2412
02:07:36,739 --> 02:07:41,239
it looks pretty noisy and if you're an

2413
02:07:39,619 --> 02:07:43,518
analyst with some experience you can

2414
02:07:41,239 --> 02:07:47,629
figure out hey if I filter it according

2415
02:07:43,519 --> 02:07:49,519
to this bandpass filter and then I do an

2416
02:07:47,630 --> 02:07:51,499
envelope filter on top of this oh then

2417
02:07:49,519 --> 02:07:53,989
actually I get a trace out like the

2418
02:07:51,499 --> 02:07:55,820
bottom and at this point I don't even

2419
02:07:53,989 --> 02:07:57,650
know yet if these are the right steps

2420
02:07:55,820 --> 02:07:59,780
because I don't know the right steps

2421
02:07:57,650 --> 02:08:01,969
till I actually get the key out yes or

2422
02:07:59,780 --> 02:08:04,550
no and the problem is if I don't get the

2423
02:08:01,969 --> 02:08:07,969
key out then which of the steps that I

2424
02:08:04,550 --> 02:08:11,689
took is wrong I have no idea so there's

2425
02:08:07,969 --> 02:08:16,630
a lot of iterative processing going on

2426
02:08:11,689 --> 02:08:19,309
here similar problems happen when

2427
02:08:16,630 --> 02:08:22,579
misalignment occurs so if I take many

2428
02:08:19,309 --> 02:08:25,070
traces of a specific encryption

2429
02:08:22,579 --> 02:08:26,869
algorithm I see these traces but they're

2430
02:08:25,070 --> 02:08:30,469
never perfectly aligned meaning that

2431
02:08:26,869 --> 02:08:32,179
time axis isn't always the same now the

2432
02:08:30,469 --> 02:08:36,199
problem that you see here is very easily

2433
02:08:32,179 --> 02:08:38,119
solved by simple pattern match but there

2434
02:08:36,199 --> 02:08:40,579
can be complicating factors for instance

2435
02:08:38,119 --> 02:08:43,188
if they are misaligned because the clock

2436
02:08:40,579 --> 02:08:44,688
of the device isn't entirely stable then

2437
02:08:43,189 --> 02:08:46,340
I don't have sort of a static

2438
02:08:44,689 --> 02:08:50,059
misalignment but I have a cause of the

2439
02:08:46,340 --> 02:08:51,889
floating misalignment again this is a

2440
02:08:50,059 --> 02:08:55,249
problem that we know how to solve in

2441
02:08:51,889 --> 02:08:58,090
isolation but it gets trickier when we

2442
02:08:55,249 --> 02:09:00,889
have noise and misalignment together

2443
02:08:58,090 --> 02:09:02,659
because now we need to first filter and

2444
02:09:00,889 --> 02:09:06,469
only then we can figure out if we need

2445
02:09:02,659 --> 02:09:09,949
to realign so two problems on top of

2446
02:09:06,469 --> 02:09:11,989
each other then on top of that we get

2447
02:09:09,949 --> 02:09:16,009
something called points of interest

2448
02:09:11,989 --> 02:09:17,659
selection so if we have a huge trace we

2449
02:09:16,010 --> 02:09:21,709
can't always process the whole thing so

2450
02:09:17,659 --> 02:09:22,938
we kind of have to find out or guess at

2451
02:09:21,709 --> 02:09:25,699
what point in time the crypto is

2452
02:09:22,939 --> 02:09:28,099
happening again we have tools to solve

2453
02:09:25,699 --> 02:09:30,018
this in isolation but now we have the

2454
02:09:28,099 --> 02:09:31,880
problem of noise on top of misalignment

2455
02:09:30,019 --> 02:09:34,340
on top of points of interest selection

2456
02:09:31,880 --> 02:09:38,239
and these things are actually related to

2457
02:09:34,340 --> 02:09:41,059
each other because if I don't filter

2458
02:09:38,239 --> 02:09:44,869
then I really am NOT going to see where

2459
02:09:41,059 --> 02:09:46,999
my crypto is but in order to find the

2460
02:09:44,869 --> 02:09:49,280
crypto I do usually something called

2461
02:09:46,999 --> 02:09:49,980
correlation for which the traces need to

2462
02:09:49,280 --> 02:09:52,920
be aligned

2463
02:09:49,980 --> 02:09:56,610
in order to the alignments I need to

2464
02:09:52,920 --> 02:09:58,860
filter things so there's this weird like

2465
02:09:56,610 --> 02:10:01,740
mix of problems that individually are

2466
02:09:58,860 --> 02:10:05,880
fairly easily solved but solving these

2467
02:10:01,740 --> 02:10:08,460
in general is kind of hard and and yeah

2468
02:10:05,880 --> 02:10:14,180
I don't know a good push-button approach

2469
02:10:08,460 --> 02:10:16,620
yet but that's not it there's even more

2470
02:10:14,180 --> 02:10:21,000
so if we're doing this princess in the

2471
02:10:16,620 --> 02:10:25,920
e/m space what you're seeing here is a

2472
02:10:21,000 --> 02:10:29,640
couple of different heat maps of signals

2473
02:10:25,920 --> 02:10:33,180
that we acquired from a chip and on this

2474
02:10:29,640 --> 02:10:36,420
heat map you see on the top you see

2475
02:10:33,180 --> 02:10:38,520
actually sort of ground truth leakage so

2476
02:10:36,420 --> 02:10:40,170
this is where we know the key and we

2477
02:10:38,520 --> 02:10:43,620
actually start looking at each position

2478
02:10:40,170 --> 02:10:46,200
on the chip where it leaks and in the

2479
02:10:43,620 --> 02:10:50,430
bottom you see the kind of unknown U key

2480
02:10:46,200 --> 02:10:53,160
approaches for instance we can look at

2481
02:10:50,430 --> 02:10:56,280
the amplitude of the signal how strong

2482
02:10:53,160 --> 02:10:58,530
is it on the bottom left we can look at

2483
02:10:56,280 --> 02:11:00,870
input correlation which is basically

2484
02:10:58,530 --> 02:11:03,150
where the input data to the crypto

2485
02:11:00,870 --> 02:11:05,430
algorithm leaks the strongest or on the

2486
02:11:03,150 --> 02:11:08,099
bottom right the the output but you

2487
02:11:05,430 --> 02:11:09,360
actually see that these cheap ones where

2488
02:11:08,100 --> 02:11:12,030
we don't need to think where we don't

2489
02:11:09,360 --> 02:11:13,380
know the key don't really relate to

2490
02:11:12,030 --> 02:11:15,690
where actually the key ously kind of

2491
02:11:13,380 --> 02:11:17,640
leaking so now we're going we might be

2492
02:11:15,690 --> 02:11:19,139
going to the wrong spot we do all those

2493
02:11:17,640 --> 02:11:21,930
iterations of the couple of slides

2494
02:11:19,140 --> 02:11:23,610
before we find nothing so it could be

2495
02:11:21,930 --> 02:11:26,070
we're in the wrong spot within the line

2496
02:11:23,610 --> 02:11:27,330
correctly we didn't filter correctly we

2497
02:11:26,070 --> 02:11:30,929
didn't choose the right points of

2498
02:11:27,330 --> 02:11:33,720
interest it's a messy problem so there's

2499
02:11:30,930 --> 02:11:37,290
a there's a few open research questions

2500
02:11:33,720 --> 02:11:40,980
here so first of all how do you find

2501
02:11:37,290 --> 02:11:42,300
good eme spots without doing T testing

2502
02:11:40,980 --> 02:11:45,080
to teach this thing is that leakage

2503
02:11:42,300 --> 02:11:47,580
testing which is quite expensive and

2504
02:11:45,080 --> 02:11:49,650
specifically how do we automate that

2505
02:11:47,580 --> 02:11:51,300
whole combined problem of filtering and

2506
02:11:49,650 --> 02:11:55,400
alignment and points-of-interest

2507
02:11:51,300 --> 02:11:58,780
selection filtering non-trivial problems

2508
02:11:55,400 --> 02:12:02,589
are very interesting to research

2509
02:11:58,780 --> 02:12:04,719
so on the fault injection side well like

2510
02:12:02,590 --> 02:12:07,240
I mentioned there's a few different

2511
02:12:04,720 --> 02:12:08,860
modalities that we used I put up a

2512
02:12:07,240 --> 02:12:11,160
picture here of our electromagnetic

2513
02:12:08,860 --> 02:12:14,740
probe what it basically does is generate

2514
02:12:11,160 --> 02:12:16,990
a huge electromagnetic spike which

2515
02:12:14,740 --> 02:12:18,700
causes a small current on the chip that

2516
02:12:16,990 --> 02:12:21,070
currents it wasn't supposed to be there

2517
02:12:18,700 --> 02:12:23,830
so it corrupt some computation and then

2518
02:12:21,070 --> 02:12:25,900
hopefully you bypass a signature

2519
02:12:23,830 --> 02:12:31,750
verification algorithm or something like

2520
02:12:25,900 --> 02:12:36,099
that what we usually see in literature

2521
02:12:31,750 --> 02:12:38,710
is attacking crypto with this I would

2522
02:12:36,100 --> 02:12:41,170
say 90 to 95 percent of the time we're

2523
02:12:38,710 --> 02:12:44,290
not attacking crypto with this so we're

2524
02:12:41,170 --> 02:12:47,320
tacking things like secure boot or jtech

2525
02:12:44,290 --> 02:12:49,030
access because if you attack a secure

2526
02:12:47,320 --> 02:12:50,710
boot of a device you're in there early

2527
02:12:49,030 --> 02:12:52,360
enough that you don't only get the keys

2528
02:12:50,710 --> 02:12:55,750
you get full control over the entire

2529
02:12:52,360 --> 02:12:59,049
device similar with JTAG jtech is sort

2530
02:12:55,750 --> 02:13:00,700
of a hardware debugging facility which

2531
02:12:59,050 --> 02:13:03,160
is usually locked down so you use it

2532
02:13:00,700 --> 02:13:04,960
during production or sir manufacturing

2533
02:13:03,160 --> 02:13:07,330
you may use it during debugging but in

2534
02:13:04,960 --> 02:13:09,850
the field on proper devices it's fused

2535
02:13:07,330 --> 02:13:12,490
off but if you can glitch it back on

2536
02:13:09,850 --> 02:13:16,750
your in the device everything is yours

2537
02:13:12,490 --> 02:13:21,580
so a lot of times we don't actually do

2538
02:13:16,750 --> 02:13:23,380
DFA attacks in the lab now to show you a

2539
02:13:21,580 --> 02:13:25,900
little bit what what we stare at this

2540
02:13:23,380 --> 02:13:28,870
analyst initially usually these kind of

2541
02:13:25,900 --> 02:13:30,790
things so on the Left you'll see all

2542
02:13:28,870 --> 02:13:32,950
kinds of parameters that we can chew so

2543
02:13:30,790 --> 02:13:35,140
you can imagine them and what we're

2544
02:13:32,950 --> 02:13:36,880
doing a voltage glitch you can make the

2545
02:13:35,140 --> 02:13:39,580
glitch deeper you can make it longer you

2546
02:13:36,880 --> 02:13:42,340
can do multiple glitches with lasers you

2547
02:13:39,580 --> 02:13:44,920
get similar parameters but you'll to get

2548
02:13:42,340 --> 02:13:47,230
an XY plane to play with so there's a

2549
02:13:44,920 --> 02:13:51,430
lot of playing and tuning that happens

2550
02:13:47,230 --> 02:13:53,110
and yeah the output this is actually

2551
02:13:51,430 --> 02:13:55,390
quite a good but the red means that we

2552
02:13:53,110 --> 02:13:56,950
lit something green means that the

2553
02:13:55,390 --> 02:13:58,960
device is just operated as normal

2554
02:13:56,950 --> 02:14:01,900
normally you either started with all

2555
02:13:58,960 --> 02:14:05,070
green or all red now you actually

2556
02:14:01,900 --> 02:14:08,679
usually all yellow which means I crashed

2557
02:14:05,070 --> 02:14:11,190
and then you have to tune and it's again

2558
02:14:08,680 --> 02:14:13,650
it's a lot of yeah

2559
02:14:11,190 --> 02:14:19,589
we call it's a finger spit everybody

2560
02:14:13,650 --> 02:14:23,160
call it experience and and getting a

2561
02:14:19,590 --> 02:14:24,810
sense of how to do this on the device so

2562
02:14:23,160 --> 02:14:27,330
also here we have a number of

2563
02:14:24,810 --> 02:14:29,610
interesting open research questions and

2564
02:14:27,330 --> 02:14:32,850
the first one is kind of fundamental

2565
02:14:29,610 --> 02:14:34,980
because we're in a lab we don't like

2566
02:14:32,850 --> 02:14:37,290
make chips or anything like that we

2567
02:14:34,980 --> 02:14:39,299
actually have no idea what's going on in

2568
02:14:37,290 --> 02:14:41,220
that ship when we fault it we have some

2569
02:14:39,300 --> 02:14:44,790
idea we have some hypotheses and some

2570
02:14:41,220 --> 02:14:48,180
things match our observations but really

2571
02:14:44,790 --> 02:14:50,250
what happens if you if you pulse and I'm

2572
02:14:48,180 --> 02:14:53,580
talking about an electromagnetic coil if

2573
02:14:50,250 --> 02:14:57,230
it's about a millimeter in diameter so

2574
02:14:53,580 --> 02:14:59,460
I'm affecting a huge area of the chip I

2575
02:14:57,230 --> 02:15:01,740
don't know exactly what I'm doing I just

2576
02:14:59,460 --> 02:15:04,940
know I click button past the certain

2577
02:15:01,740 --> 02:15:07,920
instruction and then life went on so

2578
02:15:04,940 --> 02:15:09,660
going down to really understanding what

2579
02:15:07,920 --> 02:15:14,220
happens I think is really fundamental to

2580
02:15:09,660 --> 02:15:16,230
creating countermeasures as well yeah I

2581
02:15:14,220 --> 02:15:19,560
think one other aspect that's that's

2582
02:15:16,230 --> 02:15:21,870
quite important here is software

2583
02:15:19,560 --> 02:15:25,710
scalable full text so you might be

2584
02:15:21,870 --> 02:15:30,210
familiar with the clock screw work or

2585
02:15:25,710 --> 02:15:31,320
even the row hammer work row hammer a so

2586
02:15:30,210 --> 02:15:33,450
you know clock screw was I think

2587
02:15:31,320 --> 02:15:36,139
published one or two years ago they're

2588
02:15:33,450 --> 02:15:38,849
they basically were able to in software

2589
02:15:36,140 --> 02:15:42,570
overclock the CPU for a very short

2590
02:15:38,850 --> 02:15:44,910
amount of time cause a fault and then be

2591
02:15:42,570 --> 02:15:50,370
able to bypass I think they were

2592
02:15:44,910 --> 02:15:52,019
blitzing RSA operations but being able

2593
02:15:50,370 --> 02:15:55,140
to trigger this from software obviously

2594
02:15:52,020 --> 02:15:56,940
makes this a much more scalable attack I

2595
02:15:55,140 --> 02:15:59,190
don't have to go to a device with a

2596
02:15:56,940 --> 02:16:02,580
probe and start generating strong

2597
02:15:59,190 --> 02:16:06,000
electromagnetic pulses so I think that's

2598
02:16:02,580 --> 02:16:08,720
a really important area to study to make

2599
02:16:06,000 --> 02:16:13,350
sure that there's no more of these two

2600
02:16:08,720 --> 02:16:16,010
avenues so let's focus on the science

2601
02:16:13,350 --> 02:16:16,010
part a little bit

2602
02:16:16,330 --> 02:16:23,980
just to show you that we do know some

2603
02:16:18,130 --> 02:16:30,760
stuff so what you see here is a is an

2604
02:16:23,980 --> 02:16:33,340
overview of some statistics and what we

2605
02:16:30,760 --> 02:16:36,190
do is we take in this case NES

2606
02:16:33,340 --> 02:16:39,400
implementation and we send it specially

2607
02:16:36,190 --> 02:16:41,519
crafted input vectors and these input

2608
02:16:39,400 --> 02:16:45,820
vectors are crafted in such a way that's

2609
02:16:41,519 --> 02:16:47,740
by using a known key in round five the

2610
02:16:45,820 --> 02:16:49,570
entire state collapses to a very low

2611
02:16:47,740 --> 02:16:52,269
Hamming weight so a Hamming weight of

2612
02:16:49,570 --> 02:16:55,900
two three bits only set to 1 and the

2613
02:16:52,269 --> 02:16:57,610
rest of the state is all 0 and we use

2614
02:16:55,900 --> 02:17:02,859
that as an indication of whether the

2615
02:16:57,610 --> 02:17:05,260
device leaks or not if if such a state

2616
02:17:02,860 --> 02:17:07,809
has a very significantly different power

2617
02:17:05,260 --> 02:17:09,250
profile than a random state then we

2618
02:17:07,808 --> 02:17:12,910
conclude that there's some kind of

2619
02:17:09,250 --> 02:17:15,129
leakage going on so we set this Bess and

2620
02:17:12,910 --> 02:17:18,429
especially set of crafted vectors we

2621
02:17:15,129 --> 02:17:20,138
send a random set of input vectors we

2622
02:17:18,429 --> 02:17:22,750
basically take power measurements of

2623
02:17:20,138 --> 02:17:24,490
both groups average them and then or in

2624
02:17:22,750 --> 02:17:26,888
election average we perform a t-test on

2625
02:17:24,490 --> 02:17:28,900
them and what you'll see in a leaky

2626
02:17:26,888 --> 02:17:31,170
device that for instance it makes

2627
02:17:28,900 --> 02:17:33,490
columns in round 5 there's a significant

2628
02:17:31,170 --> 02:17:36,360
difference in the T statistic meaning

2629
02:17:33,490 --> 02:17:38,740
hey there's some leakage going on here

2630
02:17:36,360 --> 02:17:43,150
you see there's also propagate to other

2631
02:17:38,740 --> 02:17:43,840
parts of the hub of the site for

2632
02:17:43,150 --> 02:17:45,699
execution

2633
02:17:43,840 --> 02:17:48,790
and this is a really nice tool in the

2634
02:17:45,700 --> 02:17:51,910
sense that it's with we use it in

2635
02:17:48,790 --> 02:17:53,320
profiling a lot obviously thinking to be

2636
02:17:51,910 --> 02:17:56,679
aligned again because otherwise this

2637
02:17:53,320 --> 02:17:59,049
trick doesn't work but it gives us a

2638
02:17:56,679 --> 02:18:01,330
nice statistics of where things are

2639
02:17:59,049 --> 02:18:05,230
leaking and by the size who despite how

2640
02:18:01,330 --> 02:18:09,610
much it is leaking there's one big

2641
02:18:05,230 --> 02:18:13,179
question here how exploitable are the

2642
02:18:09,610 --> 02:18:14,800
leakages that we detect here so one of

2643
02:18:13,179 --> 02:18:16,510
the things I need to do is I need to

2644
02:18:14,799 --> 02:18:19,509
have a key in order to find this and I

2645
02:18:16,510 --> 02:18:22,269
find sort of arbitrary leakage whereas

2646
02:18:19,510 --> 02:18:24,370
when I look at differential power

2647
02:18:22,269 --> 02:18:27,429
analysis or correlation for enamels was

2648
02:18:24,370 --> 02:18:29,620
actually to specify a leakage model and

2649
02:18:27,429 --> 02:18:33,910
that leakage model allows me to

2650
02:18:29,620 --> 02:18:36,400
the key what we sometimes observe in the

2651
02:18:33,910 --> 02:18:39,100
lab is that we get this T spikes but we

2652
02:18:36,400 --> 02:18:40,539
are not able to exploit them and they're

2653
02:18:39,100 --> 02:18:44,740
pretty it can be pretty strong but it

2654
02:18:40,540 --> 02:18:47,320
just means either we haven't guessed the

2655
02:18:44,740 --> 02:18:49,030
leakage model correctly or maybe it's

2656
02:18:47,320 --> 02:18:50,650
some kind of false positive I don't know

2657
02:18:49,030 --> 02:18:54,670
so this is a really interesting topic to

2658
02:18:50,650 --> 02:18:58,420
to look at sometimes what you also get

2659
02:18:54,670 --> 02:19:00,160
in practice is that in an Aes engine as

2660
02:18:58,420 --> 02:19:01,870
an optimization only the first few

2661
02:19:00,160 --> 02:19:03,730
rounds are protected and the last few

2662
02:19:01,870 --> 02:19:06,490
rounds are protected and the middle

2663
02:19:03,730 --> 02:19:09,160
rounds aren't so I also see a lot of

2664
02:19:06,490 --> 02:19:10,718
leakage in the middle rounds but I

2665
02:19:09,160 --> 02:19:15,610
cannot attack the first few rounds which

2666
02:19:10,718 --> 02:19:22,750
is normally where DPA goes to so yeah

2667
02:19:15,610 --> 02:19:27,250
interesting food for thought when I say

2668
02:19:22,750 --> 02:19:29,230
DPA and and CP am mostly talking about

2669
02:19:27,250 --> 02:19:30,850
CPA actually which is correlation with

2670
02:19:29,230 --> 02:19:33,789
our analysis which is already over ten

2671
02:19:30,850 --> 02:19:35,920
years old and since then there's been a

2672
02:19:33,790 --> 02:19:38,830
lot of publications on different ways of

2673
02:19:35,920 --> 02:19:41,350
doing power analysis but we keep on

2674
02:19:38,830 --> 02:19:43,929
falling back to our old tools and that

2675
02:19:41,350 --> 02:19:46,500
has a lot to do with performance first

2676
02:19:43,929 --> 02:19:49,210
of all CPA is really cheap to calculate

2677
02:19:46,500 --> 02:19:52,240
and it also just seems to apply to so

2678
02:19:49,210 --> 02:19:55,779
many different devices so CPA has really

2679
02:19:52,240 --> 02:19:58,750
proven itself to be basically usable

2680
02:19:55,780 --> 02:20:01,290
across a lot of device classes whereas

2681
02:19:58,750 --> 02:20:03,490
often times when we see a new attack

2682
02:20:01,290 --> 02:20:06,970
obviously it's only tested or one or two

2683
02:20:03,490 --> 02:20:09,160
devices the improvements aren't always

2684
02:20:06,970 --> 02:20:11,140
enough for us to invest and the time to

2685
02:20:09,160 --> 02:20:13,660
go check whether the attack actually

2686
02:20:11,140 --> 02:20:16,000
works whether it goes over multiple

2687
02:20:13,660 --> 02:20:17,590
devices whether it's not too expensive

2688
02:20:16,000 --> 02:20:21,160
remember those two weeks that we have to

2689
02:20:17,590 --> 02:20:25,650
do this in so we keep on falling back to

2690
02:20:21,160 --> 02:20:28,570
the CPA so I think this is still a very

2691
02:20:25,650 --> 02:20:32,109
open question in the sense that it's

2692
02:20:28,570 --> 02:20:36,851
really hard to beat to beat CPA so can

2693
02:20:32,110 --> 02:20:40,410
we find anything new there specifically

2694
02:20:36,851 --> 02:20:40,410
with that plan constraining in mind

2695
02:20:40,950 --> 02:20:44,681
now when we're looking at the science

2696
02:20:43,210 --> 02:20:49,000
part of fault injection is usually

2697
02:20:44,681 --> 02:20:53,891
statistics and visualization so what you

2698
02:20:49,000 --> 02:20:56,141
see here is a visualization of a voltage

2699
02:20:53,891 --> 02:20:59,020
glitch so we temporarily drop the supply

2700
02:20:56,141 --> 02:21:02,020
voltage through a device and we plot the

2701
02:20:59,021 --> 02:21:04,271
response of the device in a color so

2702
02:21:02,021 --> 02:21:06,521
green means it's operated okay yellow

2703
02:21:04,271 --> 02:21:09,551
means it's somehow crashed and red means

2704
02:21:06,521 --> 02:21:11,710
we recall the corruption and you see

2705
02:21:09,551 --> 02:21:14,680
that there's a nice sort of sweet spot

2706
02:21:11,710 --> 02:21:19,381
there that we through group forcing have

2707
02:21:14,681 --> 02:21:22,181
found we've already developed a few more

2708
02:21:19,381 --> 02:21:24,189
means to find these kind of spots

2709
02:21:22,181 --> 02:21:26,170
besides brute-forcing because a lot of

2710
02:21:24,190 --> 02:21:28,120
devices have this sort of curve it's

2711
02:21:26,170 --> 02:21:30,790
trade-off between the length of the

2712
02:21:28,120 --> 02:21:32,801
glitch and the voltage of the glitch so

2713
02:21:30,790 --> 02:21:34,471
you could instead follow that curve on

2714
02:21:32,801 --> 02:21:37,270
the edge and sort of try to find that

2715
02:21:34,471 --> 02:21:39,460
although it's not a hundred percent

2716
02:21:37,271 --> 02:21:41,771
generic overall device so we've also

2717
02:21:39,460 --> 02:21:47,141
seen double curves and other funky

2718
02:21:41,771 --> 02:21:49,091
things going on yeah and this is almost

2719
02:21:47,141 --> 02:21:51,609
as I mentioned before almost exclusively

2720
02:21:49,091 --> 02:21:55,150
done on non crypto so on boot or on

2721
02:21:51,610 --> 02:21:58,120
jtech which also presents the question

2722
02:21:55,150 --> 02:22:01,359
of how do we protect this jtech and boot

2723
02:21:58,120 --> 02:22:04,120
from these kind of attacks for DFA

2724
02:22:01,360 --> 02:22:06,971
there's different ways to harden your

2725
02:22:04,120 --> 02:22:09,131
crypto but how do I harden conditional

2726
02:22:06,971 --> 02:22:11,680
branch we have some ideas and we have

2727
02:22:09,131 --> 02:22:14,230
some you know you can do double checking

2728
02:22:11,681 --> 02:22:16,750
you can amazing with timing but there's

2729
02:22:14,230 --> 02:22:19,029
not a whole lot of research in this area

2730
02:22:16,750 --> 02:22:27,730
I'm like how do we fundamentally protect

2731
02:22:19,030 --> 02:22:32,131
this then on the sort of output side we

2732
02:22:27,730 --> 02:22:34,199
have certifications that we do so

2733
02:22:32,131 --> 02:22:37,260
there's always some kind of pass/fail

2734
02:22:34,200 --> 02:22:39,480
criterion on certification and

2735
02:22:37,261 --> 02:22:43,061
interestingly if you look at the

2736
02:22:39,480 --> 02:22:46,631
practical schemes such as Common

2737
02:22:43,061 --> 02:22:48,520
Criteria in Vigo global platform none of

2738
02:22:46,631 --> 02:22:50,710
them say this is the number of traces

2739
02:22:48,521 --> 02:22:53,771
that you need to not leak your key or

2740
02:22:50,710 --> 02:22:56,260
none of them say this is the

2741
02:22:53,771 --> 02:23:01,631
Injection success rate that you need to

2742
02:22:56,261 --> 02:23:04,330
be below actually they go to more well I

2743
02:23:01,631 --> 02:23:05,801
might opinion it's it's an interesting

2744
02:23:04,330 --> 02:23:08,440
metric because it really goes to the

2745
02:23:05,801 --> 02:23:10,270
attacker cost like how much time does it

2746
02:23:08,440 --> 02:23:12,580
cost and what kind of expertise did you

2747
02:23:10,271 --> 02:23:14,110
need to throw at it how long does it

2748
02:23:12,580 --> 02:23:19,811
take how many samples that they use

2749
02:23:14,110 --> 02:23:21,851
etcetera etc and in a way that's sort of

2750
02:23:19,811 --> 02:23:23,561
as objective as we know how to make it

2751
02:23:21,851 --> 02:23:26,051
because number of traces sounds

2752
02:23:23,561 --> 02:23:29,770
objective but now think again about that

2753
02:23:26,051 --> 02:23:31,660
art piece so there's a lot of human

2754
02:23:29,771 --> 02:23:34,061
intervention that happens before you get

2755
02:23:31,660 --> 02:23:38,381
to the number of traces so it's not as

2756
02:23:34,061 --> 02:23:40,211
objective as it as it really sounds so

2757
02:23:38,381 --> 02:23:42,070
yeah I think that's the open question

2758
02:23:40,211 --> 02:23:44,199
what is really like an objective measure

2759
02:23:42,070 --> 02:23:45,490
because even if you look at time elapsed

2760
02:23:44,200 --> 02:23:49,110
and things like that there's still a

2761
02:23:45,490 --> 02:23:49,110
human component in there

2762
02:23:50,131 --> 02:23:55,029
the answer is improving products we we

2763
02:23:53,110 --> 02:23:57,101
can usually deduct some information from

2764
02:23:55,030 --> 02:24:00,251
our test like at what time this does the

2765
02:23:57,101 --> 02:24:02,171
leakage occur how much leakage is there

2766
02:24:00,251 --> 02:24:04,931
what's the full success rate what type

2767
02:24:02,171 --> 02:24:07,240
of leakage is there but that's about it

2768
02:24:04,931 --> 02:24:09,431
so a designer really have to go back to

2769
02:24:07,240 --> 02:24:11,381
the sort of the clock cycle sometimes

2770
02:24:09,431 --> 02:24:13,120
the sub clock cycle level to figure out

2771
02:24:11,381 --> 02:24:16,480
which part of his circuit is leaking and

2772
02:24:13,120 --> 02:24:18,341
it's it's a non-trivial task even more

2773
02:24:16,480 --> 02:24:21,039
non-trivial is is making it into

2774
02:24:18,341 --> 02:24:22,091
countermeasures because I regular see it

2775
02:24:21,040 --> 02:24:24,370
turns sort of into a game of

2776
02:24:22,091 --> 02:24:26,410
whack-a-mole if you push down one

2777
02:24:24,370 --> 02:24:28,271
leakage and then somewhere else it comes

2778
02:24:26,410 --> 02:24:33,700
back up when you're going like this a

2779
02:24:28,271 --> 02:24:35,561
lot so really how do we automatically

2780
02:24:33,700 --> 02:24:39,311
create countermeasures based on this

2781
02:24:35,561 --> 02:24:42,421
test I don't know but I think it's

2782
02:24:39,311 --> 02:24:45,251
definitely a worthwhile area of study

2783
02:24:42,421 --> 02:24:47,921
another side note is that a lot of

2784
02:24:45,251 --> 02:24:50,561
results in public are based on FPGAs or

2785
02:24:47,921 --> 02:24:52,931
non secure mic controllers and these

2786
02:24:50,561 --> 02:24:57,011
results don't always translate to secure

2787
02:24:52,931 --> 02:25:00,551
Microsoft controllers or SOC s these

2788
02:24:57,011 --> 02:25:01,931
beasts are really noisy and they have a

2789
02:25:00,551 --> 02:25:04,910
lot of countermeasures so it's it's

2790
02:25:01,931 --> 02:25:05,930
really non-trivial to to study so

2791
02:25:04,910 --> 02:25:10,580
it would be really nice to have more

2792
02:25:05,930 --> 02:25:12,590
results on that um but I also want to

2793
02:25:10,580 --> 02:25:15,920
share some of our current research that

2794
02:25:12,590 --> 02:25:18,350
we do internally we have multiple topics

2795
02:25:15,920 --> 02:25:20,840
but that can't fit them all in 30

2796
02:25:18,350 --> 02:25:23,660
minutes but this one is kind of kind of

2797
02:25:20,840 --> 02:25:25,820
nice and recent so you remember this

2798
02:25:23,660 --> 02:25:27,410
slide so we were doing signal analysis

2799
02:25:25,820 --> 02:25:28,939
and then we do some signal processing

2800
02:25:27,410 --> 02:25:31,130
and likud Smalling and then out comes

2801
02:25:28,939 --> 02:25:34,390
the key what we're actually doing is

2802
02:25:31,130 --> 02:25:37,580
replacing that by a neural network and

2803
02:25:34,390 --> 02:25:39,320
we don't just want to get the key out we

2804
02:25:37,580 --> 02:25:42,380
also want to get some leakage info out

2805
02:25:39,320 --> 02:25:45,979
and maybe some metrics on how well the

2806
02:25:42,380 --> 02:25:50,929
resistance is so we've been playing with

2807
02:25:45,979 --> 02:25:55,250
this for over a year now or so and so

2808
02:25:50,930 --> 02:25:57,200
far the the results are hopeful and one

2809
02:25:55,250 --> 02:26:00,399
of the interesting results that I picked

2810
02:25:57,200 --> 02:26:02,570
here is that we actually managed to

2811
02:26:00,399 --> 02:26:05,630
break slash

2812
02:26:02,570 --> 02:26:09,590
bypass a first order masking

2813
02:26:05,630 --> 02:26:11,929
implementation these are this is based

2814
02:26:09,590 --> 02:26:14,270
on publicly accessible traces from the

2815
02:26:11,930 --> 02:26:16,070
DPA contest and they have a

2816
02:26:14,270 --> 02:26:19,490
countermeasure which is called rotating

2817
02:26:16,070 --> 02:26:22,699
s box and masking and basically what you

2818
02:26:19,490 --> 02:26:25,340
do is you take an aes algorithm and you

2819
02:26:22,700 --> 02:26:27,020
start masking in other words exhorting

2820
02:26:25,340 --> 02:26:30,290
with a random beat some of the internal

2821
02:26:27,020 --> 02:26:32,060
states and that way an attacker cannot

2822
02:26:30,290 --> 02:26:34,960
make a prediction on the intermediates

2823
02:26:32,060 --> 02:26:39,170
anymore and that's supposed to foil DPA

2824
02:26:34,960 --> 02:26:40,729
now this rotating masking sorry masking

2825
02:26:39,170 --> 02:26:42,560
in general is expensive because you need

2826
02:26:40,729 --> 02:26:44,679
to recalculate your s boxes for every

2827
02:26:42,560 --> 02:26:48,080
mask

2828
02:26:44,680 --> 02:26:51,920
so what rotating s box masking does is

2829
02:26:48,080 --> 02:26:53,899
it has basically a preset calculation on

2830
02:26:51,920 --> 02:27:01,070
all the S boxes and then it just rotates

2831
02:26:53,899 --> 02:27:03,170
through them now what we find and this

2832
02:27:01,070 --> 02:27:04,970
is just the dazzle you dislike I won't

2833
02:27:03,170 --> 02:27:06,680
go into all the details but basically we

2834
02:27:04,970 --> 02:27:08,570
have a deep Learning Network and it

2835
02:27:06,680 --> 02:27:11,450
actually manages to find some first

2836
02:27:08,570 --> 02:27:13,399
order leakage so somehow this

2837
02:27:11,450 --> 02:27:18,260
implementation is actually leaking first

2838
02:27:13,399 --> 02:27:19,699
order but CPA does not find this first

2839
02:27:18,260 --> 02:27:24,670
or leakage nor does a templated attack

2840
02:27:19,700 --> 02:27:24,670
so we're a little bit intrigued by this

2841
02:27:25,630 --> 02:27:30,199
but then yeah the nice thing for us is

2842
02:27:28,310 --> 02:27:32,028
it was really a proof that this deep

2843
02:27:30,200 --> 02:27:34,189
learning approach worked we've also

2844
02:27:32,029 --> 02:27:36,800
tested on misaligned traces and slightly

2845
02:27:34,189 --> 02:27:38,510
noisy traces with the idea that

2846
02:27:36,800 --> 02:27:40,340
convolutional neural networks are

2847
02:27:38,510 --> 02:27:43,220
supposed to learn filters and are

2848
02:27:40,340 --> 02:27:47,149
supposed to be invariant to translations

2849
02:27:43,220 --> 02:27:52,490
so it's one step in the direction of

2850
02:27:47,149 --> 02:27:56,028
automation on another side note we

2851
02:27:52,490 --> 02:27:58,490
rarely perform second-order attacks not

2852
02:27:56,029 --> 02:28:02,899
because we can't but because you need to

2853
02:27:58,490 --> 02:28:05,119
combine several samples and usually

2854
02:28:02,899 --> 02:28:06,769
that's infeasible due to the noise that

2855
02:28:05,120 --> 02:28:08,270
we have in these system so we don't know

2856
02:28:06,770 --> 02:28:10,340
really know which samples to pick and

2857
02:28:08,270 --> 02:28:11,960
the limited time so there's really an

2858
02:28:10,340 --> 02:28:19,370
open question here also on how to find

2859
02:28:11,960 --> 02:28:21,800
those samples efficiently we don't just

2860
02:28:19,370 --> 02:28:24,560
want to break systems with deep learning

2861
02:28:21,800 --> 02:28:26,688
so we also are trying to analyze the

2862
02:28:24,560 --> 02:28:29,060
network to figure out what is actually

2863
02:28:26,689 --> 02:28:32,510
leaking and we do this by sort of

2864
02:28:29,060 --> 02:28:34,340
running the network and inverse where we

2865
02:28:32,510 --> 02:28:37,310
look at the specific Hamming weight

2866
02:28:34,340 --> 02:28:39,290
leakage and then we try to analyze which

2867
02:28:37,310 --> 02:28:41,899
sample contributed most to that leakage

2868
02:28:39,290 --> 02:28:45,109
and if we do that for a whole bunch of

2869
02:28:41,899 --> 02:28:48,080
traces we basically get a leakage

2870
02:28:45,109 --> 02:28:51,109
profile as you can see in in the bottom

2871
02:28:48,080 --> 02:28:52,819
trace here and the cool thing is it kind

2872
02:28:51,109 --> 02:28:56,510
of relates to this t-test that we've

2873
02:28:52,819 --> 02:29:00,140
also done there are some at least double

2874
02:28:56,510 --> 02:29:04,250
evidence that this is a nice way of

2875
02:29:00,140 --> 02:29:06,528
working our conclusions for deep

2876
02:29:04,250 --> 02:29:09,500
learning so far is it can exploit and

2877
02:29:06,529 --> 02:29:11,930
identify leakage it does part of the

2878
02:29:09,500 --> 02:29:15,760
artwork and part of the science and it's

2879
02:29:11,930 --> 02:29:19,100
at least it's scales at least in theory

2880
02:29:15,760 --> 02:29:20,979
two caveats at this point still hardware

2881
02:29:19,100 --> 02:29:23,359
crypto seems to present the challenge

2882
02:29:20,979 --> 02:29:26,390
it's not that we can break it but it's

2883
02:29:23,359 --> 02:29:28,010
not working as well and it still

2884
02:29:26,390 --> 02:29:30,560
requires a network that needs to be

2885
02:29:28,010 --> 02:29:31,260
tuned by a human which is arguably

2886
02:29:30,560 --> 02:29:33,479
easier than

2887
02:29:31,260 --> 02:29:37,229
side channel analysis but that's a beer

2888
02:29:33,479 --> 02:29:39,420
conversation so our areas that we're

2889
02:29:37,229 --> 02:29:41,670
active in is doing fault injection

2890
02:29:39,420 --> 02:29:45,120
outside of lab conditions to looking at

2891
02:29:41,670 --> 02:29:48,540
larger distances or less control over

2892
02:29:45,120 --> 02:29:50,880
the code on the device another really

2893
02:29:48,540 --> 02:29:53,760
important part is design time analysis

2894
02:29:50,880 --> 02:29:55,619
as we call it so we want to not do side

2895
02:29:53,760 --> 02:29:57,120
channel analysis on a system because

2896
02:29:55,620 --> 02:30:00,630
then you have silicon and you're way too

2897
02:29:57,120 --> 02:30:03,149
late you want to do this while the

2898
02:30:00,630 --> 02:30:05,970
designers are designing the circuits a

2899
02:30:03,149 --> 02:30:11,939
non-trivial problem similar with fault

2900
02:30:05,970 --> 02:30:13,920
injection so to wrap up I think

2901
02:30:11,939 --> 02:30:14,910
automation is needed for the scale of

2902
02:30:13,920 --> 02:30:18,569
the issues that we're seeing in the

2903
02:30:14,910 --> 02:30:21,990
world there's a lot of interesting

2904
02:30:18,569 --> 02:30:24,149
research questions on this and am I

2905
02:30:21,990 --> 02:30:26,160
still here yeah and yeah if you're

2906
02:30:24,149 --> 02:30:30,420
interested in collaborating on this

2907
02:30:26,160 --> 02:30:34,609
please come find me okay I think that

2908
02:30:30,420 --> 02:30:37,529
gives me how many minutes for questions

2909
02:30:34,609 --> 02:30:39,890
some questions some minutes for

2910
02:30:37,529 --> 02:30:39,890
questions

2911
02:30:45,460 --> 02:30:56,721
okay we do have some time for questions

2912
02:30:47,450 --> 02:30:59,301
so grab the - maybe I last one to get

2913
02:30:56,721 --> 02:31:01,670
things started so you presented the use

2914
02:30:59,301 --> 02:31:03,170
of neural networks and that's one

2915
02:31:01,670 --> 02:31:04,670
specific machine learning technique are

2916
02:31:03,170 --> 02:31:06,891
there are other techniques that might be

2917
02:31:04,670 --> 02:31:07,790
more broadly applicable or or maybe

2918
02:31:06,891 --> 02:31:09,529
these techniques would be themselves

2919
02:31:07,790 --> 02:31:12,290
more probably applicable to other kinds

2920
02:31:09,530 --> 02:31:15,801
of attacks yeah excuse me that's a

2921
02:31:12,290 --> 02:31:17,420
that's a good question so machine

2922
02:31:15,801 --> 02:31:18,830
learning really works or at least the

2923
02:31:17,420 --> 02:31:20,780
convolutional neural networks that we've

2924
02:31:18,830 --> 02:31:22,130
used really work nice on signals because

2925
02:31:20,780 --> 02:31:24,590
that's sort of their their natural

2926
02:31:22,130 --> 02:31:28,130
habitat one thing we've also thought

2927
02:31:24,590 --> 02:31:30,261
about is we have this process of taking

2928
02:31:28,130 --> 02:31:34,539
signals and having to decide whether we

2929
02:31:30,261 --> 02:31:39,110
do filtering or alignment or selection

2930
02:31:34,540 --> 02:31:41,480
maybe we can train a neural network sort

2931
02:31:39,110 --> 02:31:42,910
of as in an agent way where we decide

2932
02:31:41,480 --> 02:31:45,199
what's the next step should we now do

2933
02:31:42,910 --> 02:31:47,630
filtering or should we down to alignment

2934
02:31:45,200 --> 02:31:50,480
and then you can do reinforcement

2935
02:31:47,630 --> 02:31:52,699
learning based on T test at the end to

2936
02:31:50,480 --> 02:31:54,980
kind of make this clear for certain

2937
02:31:52,700 --> 02:31:56,271
steps but that's that's just a thought

2938
02:31:54,980 --> 02:31:58,039
at this point here we haven't actually

2939
02:31:56,271 --> 02:32:00,200
tried this out so it becomes like an

2940
02:31:58,040 --> 02:32:02,120
expert system or a second assistant or

2941
02:32:00,200 --> 02:32:02,840
something about Rufus system yeah okay

2942
02:32:02,120 --> 02:32:06,580
cool

2943
02:32:02,840 --> 02:32:09,051
any other questions or comments Nigel

2944
02:32:06,580 --> 02:32:10,580
can you use the neural network I mean

2945
02:32:09,051 --> 02:32:11,900
you you took that neural networks and he

2946
02:32:10,580 --> 02:32:13,789
said well we never do second order

2947
02:32:11,900 --> 02:32:16,580
analysis why can't use the neural

2948
02:32:13,790 --> 02:32:21,650
networks to do second order DPA so you

2949
02:32:16,580 --> 02:32:23,450
could so in the in the training phase

2950
02:32:21,650 --> 02:32:25,431
what you're basically doing is you're

2951
02:32:23,450 --> 02:32:27,110
you're giving it traces with a known key

2952
02:32:25,431 --> 02:32:29,000
and basically a known Hamming weight or

2953
02:32:27,110 --> 02:32:31,761
whatever it model is and you could

2954
02:32:29,000 --> 02:32:33,681
extend this for a second order where you

2955
02:32:31,761 --> 02:32:37,400
train it with the known hemingway

2956
02:32:33,681 --> 02:32:38,750
difference is two samples combined we

2957
02:32:37,400 --> 02:32:42,529
just hadn't done that and the key came

2958
02:32:38,750 --> 02:32:43,910
out anyway so that looks why we haven't

2959
02:32:42,530 --> 02:32:46,960
gone in that direction yet but but

2960
02:32:43,910 --> 02:32:46,960
theoretically yes you could

2961
02:32:50,640 --> 02:32:55,289
okay if there's no more questions then

2962
02:32:52,600 --> 02:32:59,859
let's thank the speaker again and move

2963
02:32:55,290 --> 02:32:59,859
[Music]

2964
02:33:01,410 --> 02:33:04,539
so just a reminder that after this

2965
02:33:03,550 --> 02:33:06,699
session we're going to have the

2966
02:33:04,540 --> 02:33:09,640
lightning talks and you have to form an

2967
02:33:06,700 --> 02:33:11,680
orderly queue on the other side of the

2968
02:33:09,640 --> 02:33:16,710
stage from where I'm standing and then

2969
02:33:11,680 --> 02:33:16,710
mayhem will happen but controlled mayhem

2970
02:33:24,420 --> 02:33:30,100
okay so next up we have a talk on tink

2971
02:33:27,340 --> 02:33:36,370
cryptographic library and the talk will

2972
02:33:30,100 --> 02:33:39,880
be given by by bartosh from cool and we

2973
02:33:36,370 --> 02:33:42,040
did test this do you have the mic yes

2974
02:33:39,880 --> 02:33:55,899
good okay great so thank you but I

2975
02:33:42,040 --> 02:33:58,200
should take it away no it's okay okay

2976
02:33:55,899 --> 02:33:58,199
thank you

2977
02:33:58,650 --> 02:34:04,170
okay my name is Walters pathetic and I

2978
02:34:02,820 --> 02:34:06,000
gonna talk about the cryptography

2979
02:34:04,170 --> 02:34:08,340
library called inconsistent work with a

2980
02:34:06,000 --> 02:34:11,150
dynamo action bar inside drunk and with

2981
02:34:08,340 --> 02:34:13,351
contributions by many other people so

2982
02:34:11,150 --> 02:34:15,600
before I started like to thank also the

2983
02:34:13,351 --> 02:34:18,990
organizers so giving me a chance to talk

2984
02:34:15,601 --> 02:34:22,260
about this work and one more slide maybe

2985
02:34:18,990 --> 02:34:25,080
soon keep the expectation law so I will

2986
02:34:22,260 --> 02:34:27,300
not present a new crypto sorry i

2987
02:34:25,080 --> 02:34:29,010
disappoint you I will talk about new API

2988
02:34:27,300 --> 02:34:34,189
so maybe don't leave yet

2989
02:34:29,010 --> 02:34:36,330
and yeah so why did we think that it's

2990
02:34:34,190 --> 02:34:38,670
would be useful to have a new crypto

2991
02:34:36,330 --> 02:34:40,650
library well we all know that

2992
02:34:38,670 --> 02:34:42,390
cryptography is useful but it's actually

2993
02:34:40,650 --> 02:34:44,850
difficult to use and especially if you

2994
02:34:42,390 --> 02:34:46,260
are a developer and wants to do

2995
02:34:44,851 --> 02:34:48,601
something dozen encrypted but needs some

2996
02:34:46,260 --> 02:34:50,700
cryptography tools it turns out that

2997
02:34:48,601 --> 02:34:52,920
actually you will have hard time using

2998
02:34:50,700 --> 02:34:56,450
and all the standard cryptographic

2999
02:34:52,920 --> 02:34:58,620
libraries you have to learn a lot of

3000
02:34:56,450 --> 02:35:01,311
background to use them correctly and

3001
02:34:58,620 --> 02:35:04,410
also the api's are complex so before you

3002
02:35:01,311 --> 02:35:07,980
can write an line of code you have to

3003
02:35:04,410 --> 02:35:09,601
read pages of documentation and if you

3004
02:35:07,980 --> 02:35:11,130
make mistakes and some some of them

3005
02:35:09,601 --> 02:35:12,690
you'll spot immediately some of them not

3006
02:35:11,130 --> 02:35:16,439
and the very can kind of pop up in the

3007
02:35:12,690 --> 02:35:19,890
future so so but yeah but yeah what I

3008
02:35:16,440 --> 02:35:22,170
mean by complex complex API is let's

3009
02:35:19,890 --> 02:35:23,850
take a look at the example of open SSL I

3010
02:35:22,170 --> 02:35:27,000
mean open SSL is great so it's nothing

3011
02:35:23,851 --> 02:35:28,771
nothing against open Caesar or any other

3012
02:35:27,000 --> 02:35:31,740
libraries that I gonna mention here it's

3013
02:35:28,771 --> 02:35:35,311
more about that they are not suitable

3014
02:35:31,740 --> 02:35:37,920
for the target audience of our library

3015
02:35:35,311 --> 02:35:39,690
so if you want to do encryption using

3016
02:35:37,920 --> 02:35:40,950
open SSL you probably encounter these

3017
02:35:39,690 --> 02:35:43,740
functions they have a bunch of

3018
02:35:40,950 --> 02:35:48,120
parameters some of them are obvious some

3019
02:35:43,740 --> 02:35:49,561
of them not so obvious and but keep in

3020
02:35:48,120 --> 02:35:51,450
mind that doing encryption system

3021
02:35:49,561 --> 02:35:53,580
cooperation you take was simple on the

3022
02:35:51,450 --> 02:35:56,160
high level you have some plain text

3023
02:35:53,580 --> 02:35:58,980
maybe if it's an authenticated

3024
02:35:56,160 --> 02:36:02,730
encryption with additional data you may

3025
02:35:58,980 --> 02:36:04,230
have some additional data and then and

3026
02:36:02,730 --> 02:36:05,250
you would like to have a cipher day and

3027
02:36:04,230 --> 02:36:07,859
that's it so there are not so many

3028
02:36:05,250 --> 02:36:10,470
parameters on the only high level still

3029
02:36:07,860 --> 02:36:11,170
yet if you want to do this using library

3030
02:36:10,470 --> 02:36:14,380
you have

3031
02:36:11,170 --> 02:36:16,300
to have a bunch of parameters and even

3032
02:36:14,380 --> 02:36:18,160
more some of them it's not clear what

3033
02:36:16,300 --> 02:36:21,070
they are if you are not a photographer

3034
02:36:18,160 --> 02:36:22,570
so like if you have an IV well what's an

3035
02:36:21,070 --> 02:36:24,369
IV you have to dig into it you have to

3036
02:36:22,570 --> 02:36:28,000
maybe some constraints on how you pick

3037
02:36:24,370 --> 02:36:30,939
the IV and also in this context you will

3038
02:36:28,000 --> 02:36:32,920
also specify the key here and in a clear

3039
02:36:30,939 --> 02:36:36,130
text and if you are debugging your code

3040
02:36:32,920 --> 02:36:39,070
it chances are that maybe you will print

3041
02:36:36,130 --> 02:36:41,410
some debugging info and your secret key

3042
02:36:39,070 --> 02:36:47,619
eventually might end up in the debug log

3043
02:36:41,410 --> 02:36:50,080
so yeah it can end badly for you it's

3044
02:36:47,620 --> 02:36:53,530
not only about open SSL so if you take

3045
02:36:50,080 --> 02:36:55,720
example another example of CNG we have

3046
02:36:53,530 --> 02:36:57,970
the same problem here as well a bunch of

3047
02:36:55,720 --> 02:37:00,210
parameters some of them are obvious some

3048
02:36:57,970 --> 02:37:04,590
of them not and it's really hard to

3049
02:37:00,210 --> 02:37:04,589
figure out how to use it correctly

3050
02:37:04,979 --> 02:37:12,179
Java so it don't like only C++ issues

3051
02:37:07,960 --> 02:37:15,550
Java has some nicer surface I would say

3052
02:37:12,180 --> 02:37:18,970
but so anyway I can write the all the

3053
02:37:15,550 --> 02:37:21,550
encryption code on one slide or two but

3054
02:37:18,970 --> 02:37:22,990
you still have again the the stuff that

3055
02:37:21,550 --> 02:37:25,240
you have to care about you have to know

3056
02:37:22,990 --> 02:37:28,000
how long it's going to be the key was

3057
02:37:25,240 --> 02:37:29,830
the IV with the size of it you have to

3058
02:37:28,000 --> 02:37:31,240
specify okay which encryption you're

3059
02:37:29,830 --> 02:37:33,010
gonna use and if you want to change the

3060
02:37:31,240 --> 02:37:35,500
encryption you have to change your code

3061
02:37:33,010 --> 02:37:39,580
because Molly you hard-coded your your

3062
02:37:35,500 --> 02:37:41,200
encryption mode in the code and also

3063
02:37:39,580 --> 02:37:42,820
yeah I said I can't in use the

3064
02:37:41,200 --> 02:37:46,060
encryption on two slides so here is at

3065
02:37:42,820 --> 02:37:47,890
the end of it so on the first light we

3066
02:37:46,060 --> 02:37:49,750
set up all the parameters and we can do

3067
02:37:47,890 --> 02:37:51,760
the actual encryption but still here you

3068
02:37:49,750 --> 02:37:52,900
again we have to be very careful and

3069
02:37:51,760 --> 02:37:55,060
know what

3070
02:37:52,900 --> 02:37:58,410
Colin's gonna be the Cypress for the

3071
02:37:55,060 --> 02:38:01,240
particular encryption that we are using

3072
02:37:58,410 --> 02:38:05,080
CSO so we could probably go over other

3073
02:38:01,240 --> 02:38:09,280
libraries and and spot some similarities

3074
02:38:05,080 --> 02:38:11,170
here but of course we are not the first

3075
02:38:09,280 --> 02:38:12,939
ones that are struggling with this

3076
02:38:11,170 --> 02:38:16,180
problem or the Nazis at all and so there

3077
02:38:12,939 --> 02:38:18,400
are many efforts of fixing this and one

3078
02:38:16,180 --> 02:38:22,600
of them I want to discuss here shot is

3079
02:38:18,400 --> 02:38:25,210
keytar so keytar tries to hide some of

3080
02:38:22,600 --> 02:38:28,920
this complexity be kinda more abstract

3081
02:38:25,210 --> 02:38:32,311
interface which is nice because then

3082
02:38:28,920 --> 02:38:35,561
yeah you don't deal with all this bit

3083
02:38:32,311 --> 02:38:37,029
but what it's doing is especially in

3084
02:38:35,561 --> 02:38:41,170
hindsight now it seems after years of

3085
02:38:37,030 --> 02:38:46,860
users of couture seems it's despite

3086
02:38:41,170 --> 02:38:49,210
being so abstract and doing things on a

3087
02:38:46,860 --> 02:38:51,460
smaller less abstract level a right

3088
02:38:49,210 --> 02:38:54,699
abstract level it's still not as

3089
02:38:51,460 --> 02:38:57,609
extensive as it could be so we in the

3090
02:38:54,700 --> 02:38:59,261
keytar we have this global or the object

3091
02:38:57,610 --> 02:39:00,940
which is called keytar and and depending

3092
02:38:59,261 --> 02:39:03,341
on the context how it was created it can

3093
02:39:00,940 --> 02:39:05,591
do some of the sub it can do signatures

3094
02:39:03,341 --> 02:39:09,521
or it can verify signatures you can

3095
02:39:05,591 --> 02:39:13,631
encrypt decrypt and if you have such an

3096
02:39:09,521 --> 02:39:15,551
object you can decide okay or you can

3097
02:39:13,631 --> 02:39:19,660
figure out to what the object is good

3098
02:39:15,551 --> 02:39:22,721
for by querying its purpose but say what

3099
02:39:19,660 --> 02:39:24,070
what happens if maybe the function eyes

3100
02:39:22,721 --> 02:39:26,020
that you want to equip the functionality

3101
02:39:24,070 --> 02:39:28,210
you want it's not present here in this

3102
02:39:26,021 --> 02:39:30,370
API in this mansion well you'd have to

3103
02:39:28,210 --> 02:39:33,820
change the class you have to add another

3104
02:39:30,370 --> 02:39:35,200
purpose there and then make this change

3105
02:39:33,820 --> 02:39:37,420
globally and then we compile your code

3106
02:39:35,200 --> 02:39:41,530
and I mean it will work it will work for

3107
02:39:37,420 --> 02:39:44,190
your system but not for the others in

3108
02:39:41,530 --> 02:39:46,690
Java key service in situation is a bit

3109
02:39:44,190 --> 02:39:48,851
better because we're now the Qatar is a

3110
02:39:46,690 --> 02:39:50,681
base class from which various

3111
02:39:48,851 --> 02:39:52,780
functionalities are derived so for

3112
02:39:50,681 --> 02:39:54,460
example there for encryption we'll have

3113
02:39:52,780 --> 02:39:56,650
something which is a derived class

3114
02:39:54,460 --> 02:40:00,070
called encrypter which has an encryption

3115
02:39:56,650 --> 02:40:03,400
function which includes input and gives

3116
02:40:00,070 --> 02:40:05,500
a ciphertext but still it but then it

3117
02:40:03,400 --> 02:40:07,210
blends in and in a way the abstraction

3118
02:40:05,500 --> 02:40:09,730
went here too far because it blends in

3119
02:40:07,210 --> 02:40:11,590
together and mixes various flavors of

3120
02:40:09,730 --> 02:40:13,391
encryption and then when you look at the

3121
02:40:11,591 --> 02:40:15,160
code and see okay is doing encryption

3122
02:40:13,391 --> 02:40:16,990
but then now you don't know or is it

3123
02:40:15,160 --> 02:40:19,511
doing public encryption it's a symmetric

3124
02:40:16,990 --> 02:40:21,101
key encryption and it might be important

3125
02:40:19,511 --> 02:40:22,420
from the point of view like what you

3126
02:40:21,101 --> 02:40:25,210
understand want to understand what the

3127
02:40:22,420 --> 02:40:29,051
code is doing to distinguish between

3128
02:40:25,210 --> 02:40:30,939
these issues and and still we have this

3129
02:40:29,051 --> 02:40:33,160
global key purpose in them so even if

3130
02:40:30,940 --> 02:40:35,681
you would like to extend I have another

3131
02:40:33,160 --> 02:40:37,510
derived class you still end up well you

3132
02:40:35,681 --> 02:40:40,730
have to have this

3133
02:40:37,510 --> 02:40:42,920
you have to accent also their whiskey

3134
02:40:40,730 --> 02:40:45,199
purposing on which well you can do it in

3135
02:40:42,920 --> 02:40:47,570
local in your distribution and recompile

3136
02:40:45,200 --> 02:40:52,630
the code but then you get

3137
02:40:47,570 --> 02:40:55,910
incompatibility between various systems

3138
02:40:52,630 --> 02:41:00,830
okay so yeah we probably could go off

3139
02:40:55,910 --> 02:41:03,650
with some other systems libraries but

3140
02:41:00,830 --> 02:41:07,880
instead of doing it maybe I just tell

3141
02:41:03,650 --> 02:41:09,740
what we are doing and try to convince

3142
02:41:07,880 --> 02:41:11,990
you that it's going in the right

3143
02:41:09,740 --> 02:41:15,021
direction so in the rest of the talk I

3144
02:41:11,990 --> 02:41:17,030
will first stay the design goal that we

3145
02:41:15,021 --> 02:41:19,910
had so some of them will addressing the

3146
02:41:17,030 --> 02:41:22,431
issues that I mentioned and then we

3147
02:41:19,910 --> 02:41:25,039
actually directly dive into using things

3148
02:41:22,431 --> 02:41:29,570
so I'll give you a show you real code

3149
02:41:25,040 --> 02:41:32,620
that how you can use think without much

3150
02:41:29,570 --> 02:41:36,020
reading and without much preparation

3151
02:41:32,620 --> 02:41:38,330
after that I will then go a bit more

3152
02:41:36,021 --> 02:41:42,970
deeper into like how how think is built

3153
02:41:38,330 --> 02:41:46,431
and go over some of the points worth of

3154
02:41:42,970 --> 02:41:49,130
our design goals and show you how how we

3155
02:41:46,431 --> 02:41:50,811
address them finally I will tell you

3156
02:41:49,130 --> 02:41:57,609
what the stats of Tinky's currently and

3157
02:41:50,811 --> 02:41:57,610
what we plan for the future okay so

3158
02:42:02,860 --> 02:42:12,730
so so pink is a cryptographic library so

3159
02:42:09,640 --> 02:42:15,789
our first goal is security they want to

3160
02:42:12,730 --> 02:42:18,550
provide API that is how to misuse so

3161
02:42:15,790 --> 02:42:21,190
it's hard to pick parameters or provide

3162
02:42:18,550 --> 02:42:23,740
parameters that would break the Sigma is

3163
02:42:21,190 --> 02:42:25,900
the system that you are using at the

3164
02:42:23,740 --> 02:42:27,910
same time while crypto is complex and

3165
02:42:25,900 --> 02:42:30,970
they're kind of building everything from

3166
02:42:27,910 --> 02:42:34,771
scratch would be a very ambitious goal

3167
02:42:30,970 --> 02:42:37,630
so rather than implementing all the

3168
02:42:34,771 --> 02:42:39,670
crypto from the base actually we are

3169
02:42:37,630 --> 02:42:41,500
building on top of proven and well

3170
02:42:39,670 --> 02:42:44,830
tested libraries okay and if we focus on

3171
02:42:41,500 --> 02:42:46,750
on the higher-level IP is the second go

3172
02:42:44,830 --> 02:42:49,450
to usability yes so we really want it to

3173
02:42:46,750 --> 02:42:52,990
be easy for for the user so they should

3174
02:42:49,450 --> 02:42:54,790
not study pages of documentation or have

3175
02:42:52,990 --> 02:42:58,510
some background in photography to really

3176
02:42:54,790 --> 02:43:01,210
use it because we want them to well to

3177
02:42:58,510 --> 02:43:03,250
do the job correctly and focus on the

3178
02:43:01,210 --> 02:43:08,529
actual functionality of the applications

3179
02:43:03,250 --> 02:43:11,740
are working on furthermore we want this

3180
02:43:08,530 --> 02:43:13,180
readability so when some security engine

3181
02:43:11,740 --> 02:43:15,369
or somebody will check the code that

3182
02:43:13,180 --> 02:43:18,430
somebody else has written it should be

3183
02:43:15,370 --> 02:43:19,900
clear what the code is doing without

3184
02:43:18,430 --> 02:43:21,640
digging too much into the context and

3185
02:43:19,900 --> 02:43:26,830
and/or asking the pen so are you doing

3186
02:43:21,640 --> 02:43:28,410
here the right or not and somebody

3187
02:43:26,830 --> 02:43:30,700
already mentioned yesterday and

3188
02:43:28,410 --> 02:43:32,771
predicting is hard especially for the

3189
02:43:30,700 --> 02:43:36,820
future we want it to be extensible so we

3190
02:43:32,771 --> 02:43:39,610
might some functionality currently but

3191
02:43:36,820 --> 02:43:42,070
we cannot foresee what what functionally

3192
02:43:39,610 --> 02:43:44,260
will be needed in a few years so we want

3193
02:43:42,070 --> 02:43:47,350
it to be easily extensible and without

3194
02:43:44,260 --> 02:43:51,220
any I mean global in us which are hard

3195
02:43:47,350 --> 02:43:53,500
to maintain in the long run and so that

3196
02:43:51,220 --> 02:43:55,539
if you want to have a local deployment

3197
02:43:53,500 --> 02:43:57,400
or thing you can have some

3198
02:43:55,540 --> 02:43:59,350
customizations that integrate with it

3199
02:43:57,400 --> 02:44:03,760
easily without recompiling think and

3200
02:43:59,350 --> 02:44:05,980
without changing its code finally we

3201
02:44:03,760 --> 02:44:07,450
want to also have some built-in features

3202
02:44:05,980 --> 02:44:10,180
which are common when you are using

3203
02:44:07,450 --> 02:44:11,650
crypto so crypto systems or crypto

3204
02:44:10,180 --> 02:44:13,750
schemes are being broken or being

3205
02:44:11,650 --> 02:44:15,881
deprecated so we won't have an easy way

3206
02:44:13,750 --> 02:44:19,650
to get rid of them

3207
02:44:15,881 --> 02:44:23,171
and also integration with external

3208
02:44:19,650 --> 02:44:26,681
systems and services is very important

3209
02:44:23,171 --> 02:44:27,811
to us because currents systems using

3210
02:44:26,681 --> 02:44:30,671
crypto are getting more and more

3211
02:44:27,811 --> 02:44:32,891
heterogeneous so you have many platforms

3212
02:44:30,671 --> 02:44:35,831
many languages which interoperate with

3213
02:44:32,891 --> 02:44:43,480
together so it so we want provide this

3214
02:44:35,831 --> 02:44:45,881
integration as well okay so how a user

3215
02:44:43,480 --> 02:44:48,131
of think will will perceive itself well

3216
02:44:45,881 --> 02:44:49,869
roughly as good talker for a specific

3217
02:44:48,131 --> 02:44:52,001
Prague rafi on high level through

3218
02:44:49,870 --> 02:44:53,200
primitive so what is a primitive is just

3219
02:44:52,001 --> 02:44:55,480
an abstract representation of some

3220
02:44:53,200 --> 02:44:56,610
functionality that we want to do so it

3221
02:44:55,480 --> 02:44:59,501
might be encryption might be

3222
02:44:56,610 --> 02:45:01,331
authentication some others so and the

3223
02:44:59,501 --> 02:45:03,431
primitives just a functional defined in

3224
02:45:01,331 --> 02:45:05,921
the form of the interface it's not bound

3225
02:45:03,431 --> 02:45:08,431
to any specific implementation or it

3226
02:45:05,921 --> 02:45:11,551
just an interface of the functionality

3227
02:45:08,431 --> 02:45:13,601
what is nice about this also that the

3228
02:45:11,551 --> 02:45:15,910
implementations and that we will provide

3229
02:45:13,601 --> 02:45:17,320
for these primitives will come with

3230
02:45:15,910 --> 02:45:19,721
security guarantees so then when you

3231
02:45:17,320 --> 02:45:24,311
look at the code you know what what's

3232
02:45:19,721 --> 02:45:26,801
happening in the code yeah so let me

3233
02:45:24,311 --> 02:45:30,011
give you some examples of primitives all

3234
02:45:26,801 --> 02:45:31,150
let's start with with a Mike well when

3235
02:45:30,011 --> 02:45:33,910
you want to have message authentication

3236
02:45:31,150 --> 02:45:36,341
codes what we want to have two two

3237
02:45:33,910 --> 02:45:36,700
functions or two functionalities first

3238
02:45:36,341 --> 02:45:39,370
one

3239
02:45:36,700 --> 02:45:42,120
well given some data compute the Mac for

3240
02:45:39,370 --> 02:45:44,471
this data and given a Mac and end and

3241
02:45:42,120 --> 02:45:46,511
some data I want to verify that make it

3242
02:45:44,471 --> 02:45:51,301
correct and that's it you don't need

3243
02:45:46,511 --> 02:45:55,450
anything else for IAD similarly you want

3244
02:45:51,301 --> 02:45:58,631
also two functions you want include some

3245
02:45:55,450 --> 02:46:01,030
data may be with associated data and the

3246
02:45:58,631 --> 02:46:04,061
quiver data well if you are given a

3247
02:46:01,030 --> 02:46:08,471
ciphertext and again there is nothing

3248
02:46:04,061 --> 02:46:13,240
more to add to here so we have also some

3249
02:46:08,471 --> 02:46:18,369
other more complex primitives like

3250
02:46:13,240 --> 02:46:20,051
swimming aad where for example you are

3251
02:46:18,370 --> 02:46:22,120
producing phone data and you would like

3252
02:46:20,051 --> 02:46:25,421
to write them in an encrypted form to

3253
02:46:22,120 --> 02:46:27,190
some destination so what we would like

3254
02:46:25,421 --> 02:46:28,700
to have a sharing of the stream to which

3255
02:46:27,190 --> 02:46:30,800
you can write the data and that they

3256
02:46:28,700 --> 02:46:34,820
will be automatically encrypted so you

3257
02:46:30,800 --> 02:46:36,020
provide here a parameter the cipher

3258
02:46:34,820 --> 02:46:37,431
technician with the cipher text should

3259
02:46:36,021 --> 02:46:39,470
go to and then you get a string to which

3260
02:46:37,431 --> 02:46:41,150
you can write its kind of the in cryptic

3261
02:46:39,470 --> 02:46:42,529
stream whatever you write into this

3262
02:46:41,150 --> 02:46:45,820
screen will be automatically encrypted

3263
02:46:42,530 --> 02:46:48,650
and vice versa if you want to decrypt

3264
02:46:45,820 --> 02:46:52,150
stream of cipher text read from some

3265
02:46:48,650 --> 02:46:58,850
source you get the decrypting stream and

3266
02:46:52,150 --> 02:47:02,000
there are some other primitives that we

3267
02:46:58,851 --> 02:47:04,910
provide I mentioned I'm waiting in it up

3268
02:47:02,000 --> 02:47:08,540
but let's take a look okay so how how we

3269
02:47:04,910 --> 02:47:11,900
gonna use it and this will code that

3270
02:47:08,540 --> 02:47:15,470
would work so basically when you want to

3271
02:47:11,900 --> 02:47:17,840
use crypto in some kamati graph so this

3272
02:47:15,470 --> 02:47:19,250
would be the first step here and it's

3273
02:47:17,840 --> 02:47:22,730
for now it's kind of abstract that

3274
02:47:19,250 --> 02:47:24,470
you'll just bear with me so they assume

3275
02:47:22,730 --> 02:47:27,289
that the key set handle has some key

3276
02:47:24,470 --> 02:47:30,770
material so once we have a key the key

3277
02:47:27,290 --> 02:47:33,470
event handler in this which contains a

3278
02:47:30,771 --> 02:47:35,540
key material we want now we want to do

3279
02:47:33,470 --> 02:47:37,910
something we want to get the primitive

3280
02:47:35,540 --> 02:47:39,860
so we will ask the key second okay

3281
02:47:37,910 --> 02:47:42,289
giving the primitive and we specify

3282
02:47:39,860 --> 02:47:44,271
which permit if you want so we say for

3283
02:47:42,290 --> 02:47:46,101
in this example we want to the AED

3284
02:47:44,271 --> 02:47:49,311
primitive and once we have very deep

3285
02:47:46,101 --> 02:47:51,351
primitive will we can use it so we can

3286
02:47:49,311 --> 02:47:53,270
encrypt the plaintext and get the cipher

3287
02:47:51,351 --> 02:47:54,740
text and that's it you don't have to

3288
02:47:53,271 --> 02:47:59,480
pick any nonsense you have to pick any

3289
02:47:54,740 --> 02:48:01,851
buffers and so on okay but okay so where

3290
02:47:59,480 --> 02:48:03,260
do we get the key from well it says well

3291
02:48:01,851 --> 02:48:07,190
you can generate or it will be so if you

3292
02:48:03,260 --> 02:48:09,021
want to generate it yeah we you can use

3293
02:48:07,190 --> 02:48:10,760
some templates that we provide but the

3294
02:48:09,021 --> 02:48:12,050
templates are not meaningful if I tell

3295
02:48:10,760 --> 02:48:16,101
you okay well what are we doing

3296
02:48:12,050 --> 02:48:19,699
or you can and what parameters you are

3297
02:48:16,101 --> 02:48:21,351
really using and or you can retrieve it

3298
02:48:19,700 --> 02:48:25,220
so you can receive it from a kms or

3299
02:48:21,351 --> 02:48:27,470
another system that stores the keys but

3300
02:48:25,220 --> 02:48:30,500
again very kind of the getting of the

3301
02:48:27,470 --> 02:48:32,840
keys is really simple so and it's kind

3302
02:48:30,500 --> 02:48:34,550
of decoupled from from from the usage of

3303
02:48:32,840 --> 02:48:36,320
the key so you get the key material from

3304
02:48:34,550 --> 02:48:42,980
somewhere and then you are ready to use

3305
02:48:36,320 --> 02:48:46,010
it so now that we've seen that it's

3306
02:48:42,980 --> 02:48:51,830
actually easy to use thing so let's take

3307
02:48:46,010 --> 02:48:57,740
a look a bit inside so I will explain

3308
02:48:51,830 --> 02:49:01,641
some some main structures that we use

3309
02:48:57,740 --> 02:49:02,449
internally in the in in thing so on the

3310
02:49:01,641 --> 02:49:04,490
previous slides you've seen that

3311
02:49:02,450 --> 02:49:08,480
actually I have a key material in a key

3312
02:49:04,490 --> 02:49:09,530
set or an exit handle and I come to it

3313
02:49:08,480 --> 02:49:12,260
in a moment but let me start with

3314
02:49:09,530 --> 02:49:14,240
something simple with just a key a key

3315
02:49:12,260 --> 02:49:17,750
is a container for a key material for a

3316
02:49:14,240 --> 02:49:21,470
specific scheme and each this container

3317
02:49:17,750 --> 02:49:23,300
is identified by a key type so we

3318
02:49:21,470 --> 02:49:25,910
sometimes called key type some time type

3319
02:49:23,300 --> 02:49:30,100
URL but it's just a string and we have

3320
02:49:25,910 --> 02:49:34,240
an example of a single slide and

3321
02:49:30,101 --> 02:49:37,101
implemented by the protocol buffer so

3322
02:49:34,240 --> 02:49:39,500
fear for this is DCM key we just have

3323
02:49:37,101 --> 02:49:43,370
some version bye-bye

3324
02:49:39,500 --> 02:49:46,040
which we use by convention and then we

3325
02:49:43,370 --> 02:49:50,300
have the key value that's it there's

3326
02:49:46,040 --> 02:49:52,280
nothing else in here it doesn't even say

3327
02:49:50,300 --> 02:49:58,311
that actually this is that the key will

3328
02:49:52,280 --> 02:50:00,170
be used for authenticated encryption so

3329
02:49:58,311 --> 02:50:02,110
so actually the key itself doesn't say

3330
02:50:00,170 --> 02:50:05,500
anything how it's going to be used

3331
02:50:02,110 --> 02:50:08,420
what does know how to use the key is a

3332
02:50:05,500 --> 02:50:12,080
associated structure which is a key

3333
02:50:08,420 --> 02:50:13,460
manager this is a canary which it's a

3334
02:50:12,080 --> 02:50:18,110
class it's an object that knows how to

3335
02:50:13,460 --> 02:50:19,699
manage the keys of a certain type and so

3336
02:50:18,110 --> 02:50:22,460
there is an interface for the common

3337
02:50:19,700 --> 02:50:23,840
error and in particular the key manager

3338
02:50:22,460 --> 02:50:25,880
will know all given the key of this

3339
02:50:23,840 --> 02:50:27,141
particular type or I can I can give the

3340
02:50:25,880 --> 02:50:28,490
primitive and it knows to which

3341
02:50:27,141 --> 02:50:33,170
primitive they have a particular key

3342
02:50:28,490 --> 02:50:35,391
belongs and also so today and is it also

3343
02:50:33,170 --> 02:50:37,641
how to generate the new keys given the

3344
02:50:35,391 --> 02:50:38,630
parameters for the for the generation so

3345
02:50:37,641 --> 02:50:40,520
so actually we should have this

3346
02:50:38,630 --> 02:50:41,811
container for their key we have various

3347
02:50:40,521 --> 02:50:45,320
the same here we have also the key

3348
02:50:41,811 --> 02:50:46,699
format which is a related structure we

3349
02:50:45,320 --> 02:50:49,210
just have the parameters for generation

3350
02:50:46,700 --> 02:50:49,210
of new keys

3351
02:50:49,239 --> 02:50:55,069
yeah so we have roughly this raksha's

3352
02:50:51,829 --> 02:50:56,239
also we have various key types and it

3353
02:50:55,069 --> 02:50:58,550
gets kind of one-to-one correspondence

3354
02:50:56,239 --> 02:51:02,569
between key types and the key managers

3355
02:50:58,550 --> 02:51:06,649
or is DCM we have the KLT cmp manager 3

3356
02:51:02,569 --> 02:51:09,499
SE x we have a corresponding one and for

3357
02:51:06,649 --> 02:51:11,479
others we have end-to-end as I said the

3358
02:51:09,499 --> 02:51:14,869
key manager knows what is the primitive

3359
02:51:11,479 --> 02:51:17,208
that particular key type corresponds so

3360
02:51:14,869 --> 02:51:19,520
in the last example we are given H Mac

3361
02:51:17,209 --> 02:51:20,869
key and the key corresponding to manage

3362
02:51:19,520 --> 02:51:25,699
we know that actually this key is for

3363
02:51:20,869 --> 02:51:28,459
for matching up for aad so yeah we have

3364
02:51:25,699 --> 02:51:30,890
keys and key managers so what are the

3365
02:51:28,459 --> 02:51:34,819
key sets been so key set just a

3366
02:51:30,890 --> 02:51:37,340
collection of keys and what is important

3367
02:51:34,819 --> 02:51:38,930
is all the keys in a in a key set chorus

3368
02:51:37,340 --> 02:51:40,939
a correspond to a single primitive and

3369
02:51:38,930 --> 02:51:43,939
the key city is a primary tool for the

3370
02:51:40,939 --> 02:51:46,430
cavitation and then the key Sikandar

3371
02:51:43,939 --> 02:51:48,079
that you've seen in the example code is

3372
02:51:46,430 --> 02:51:52,039
actually just a wrapper around the key

3373
02:51:48,079 --> 02:51:56,239
set so that we hide the sensitive data

3374
02:51:52,039 --> 02:52:00,560
so that kind of this accidental logging

3375
02:51:56,239 --> 02:52:03,669
to off sensitive data to some debug logs

3376
02:52:00,560 --> 02:52:03,669
or elsewhere doesn't happen

3377
02:52:09,761 --> 02:52:15,280
now so yes also how it looks I so given

3378
02:52:12,461 --> 02:52:19,320
a bunch of keys and all of them

3379
02:52:15,280 --> 02:52:22,961
correspond to the same primitive a5 it's

3380
02:52:19,320 --> 02:52:38,860
not it's still 10 paws

3381
02:52:22,961 --> 02:52:42,391
no sure okay okay okay and then so we

3382
02:52:38,860 --> 02:52:42,391
can pack them together into the key set

3383
02:52:42,870 --> 02:52:49,721
and and in the key set and then we can

3384
02:52:48,131 --> 02:52:56,561
wrap the cassette around in a cassette

3385
02:52:49,721 --> 02:52:58,150
handle okay so we have keys and key

3386
02:52:56,561 --> 02:53:00,341
managers we have kisser tongue kisses

3387
02:52:58,150 --> 02:53:04,181
handle I how we put these things all

3388
02:53:00,341 --> 02:53:06,160
together we for this we have an another

3389
02:53:04,181 --> 02:53:09,190
container which is the registry and

3390
02:53:06,160 --> 02:53:12,131
registry just a mapping from key type to

3391
02:53:09,190 --> 02:53:16,000
accumulator so that when we have a

3392
02:53:12,131 --> 02:53:18,010
particular key of some key type we can

3393
02:53:16,000 --> 02:53:19,391
ask the registry okay give me the

3394
02:53:18,011 --> 02:53:23,921
manager for this particular key and then

3395
02:53:19,391 --> 02:53:25,600
we can do some stuff with it and yeah we

3396
02:53:23,921 --> 02:53:27,400
can kind of reduce the disk image

3397
02:53:25,601 --> 02:53:30,431
manually or you can either that we also

3398
02:53:27,400 --> 02:53:33,039
provide tools to do it automatically and

3399
02:53:30,431 --> 02:53:35,141
this is really really the foundation of

3400
02:53:33,040 --> 02:53:37,360
how how they're getting primitives works

3401
02:53:35,141 --> 02:53:38,830
so you can do it manually so you can ask

3402
02:53:37,360 --> 02:53:40,240
a racially give me the key manager and

3403
02:53:38,830 --> 02:53:42,341
I'm from the canary you can get the

3404
02:53:40,240 --> 02:53:44,289
primitive or just when when you call

3405
02:53:42,341 --> 02:53:48,070
that from this key set handle get

3406
02:53:44,290 --> 02:53:49,601
primitive yeah behind the scenes what

3407
02:53:48,070 --> 02:53:51,721
happens is that the key set handle will

3408
02:53:49,601 --> 02:53:54,280
actually contact the registry and and

3409
02:53:51,721 --> 02:53:56,311
get the primitives for all the keys in

3410
02:53:54,280 --> 02:53:59,950
the kitchen

3411
02:53:56,311 --> 02:54:04,570
so so the registry is just really a

3412
02:53:59,950 --> 02:54:07,750
mapping from from key type to to to the

3413
02:54:04,570 --> 02:54:12,671
key managers and again it contains all

3414
02:54:07,750 --> 02:54:16,000
the cleaners for various primitives okay

3415
02:54:12,671 --> 02:54:17,561
and so now it's given all of this set up

3416
02:54:16,000 --> 02:54:21,690
it's clear how for example key rotation

3417
02:54:17,561 --> 02:54:23,921
will work in a key set we have this

3418
02:54:21,690 --> 02:54:26,261
bunch of

3419
02:54:23,921 --> 02:54:29,021
keys and one of them will be the primary

3420
02:54:26,261 --> 02:54:31,480
one the distinguished one which will be

3421
02:54:29,021 --> 02:54:33,131
used to create the new crypto later so

3422
02:54:31,480 --> 02:54:39,150
new ciphertext for encryption for

3423
02:54:33,131 --> 02:54:41,921
example or to generate new signatures so

3424
02:54:39,150 --> 02:54:43,660
when you have back the key sir to anyone

3425
02:54:41,921 --> 02:54:45,131
we can create some things this is where

3426
02:54:43,660 --> 02:54:47,561
the primary will kick in on the other

3427
02:54:45,131 --> 02:54:51,340
hand when you have some existing crypto

3428
02:54:47,561 --> 02:54:53,891
date and you want to decrypt it you will

3429
02:54:51,341 --> 02:54:55,570
use all the other keys or the primary as

3430
02:54:53,891 --> 02:54:58,150
well so there is our ultimate in

3431
02:54:55,570 --> 02:55:00,011
matching or between the program the

3432
02:54:58,150 --> 02:55:01,871
ciphertext and the matching key in the

3433
02:55:00,011 --> 02:55:06,910
key set and it is the one that matches

3434
02:55:01,871 --> 02:55:10,541
will be used to decrypt and also we

3435
02:55:06,910 --> 02:55:11,891
provide some tools to disable of disable

3436
02:55:10,541 --> 02:55:13,721
also in case of some sometimes actually

3437
02:55:11,891 --> 02:55:16,211
you want to prevent usage of some pizza

3438
02:55:13,721 --> 02:55:18,341
at all in tow Hawaii so you don't want

3439
02:55:16,211 --> 02:55:19,990
to even use them for decryption because

3440
02:55:18,341 --> 02:55:21,671
you want may maybe catch some keys that

3441
02:55:19,990 --> 02:55:28,001
you don't want to use so you can disable

3442
02:55:21,671 --> 02:55:31,631
them what is also nice about the key set

3443
02:55:28,001 --> 02:55:33,671
itself is that it provides a means of

3444
02:55:31,631 --> 02:55:35,980
uniform handing for for external keys so

3445
02:55:33,671 --> 02:55:37,811
I mentioned that the key itself is a

3446
02:55:35,980 --> 02:55:39,881
container for the key material but

3447
02:55:37,811 --> 02:55:41,320
sometimes you don't even have access to

3448
02:55:39,881 --> 02:55:45,340
the key material the key material might

3449
02:55:41,320 --> 02:55:47,440
be helped by kms in actually you cannot

3450
02:55:45,341 --> 02:55:51,761
download but you can only kind of query

3451
02:55:47,440 --> 02:55:53,230
you can use it or in an HSM but this can

3452
02:55:51,761 --> 02:55:55,150
handle it now uniform because the key

3453
02:55:53,230 --> 02:55:57,311
itself now will not have the key

3454
02:55:55,150 --> 02:55:59,109
material but just a reference to the HSN

3455
02:55:57,311 --> 02:56:01,061
but from the point of view of a sink

3456
02:55:59,110 --> 02:56:03,990
user it doesn't make a difference it's

3457
02:56:01,061 --> 02:56:05,949
just one of the keys in the key set and

3458
02:56:03,990 --> 02:56:08,591
it will work the same for the key

3459
02:56:05,950 --> 02:56:11,501
rotation for encryption decryption and

3460
02:56:08,591 --> 02:56:14,650
all what you can also do is use using

3461
02:56:11,501 --> 02:56:16,121
the register you can do this gradual

3462
02:56:14,650 --> 02:56:18,221
duplication of cryptographic scenes that

3463
02:56:16,121 --> 02:56:20,650
you want to get rid of you can for

3464
02:56:18,221 --> 02:56:22,660
example say that well you still want to

3465
02:56:20,650 --> 02:56:24,311
use it because you have some existing

3466
02:56:22,660 --> 02:56:26,021
keys and some existing data but you

3467
02:56:24,311 --> 02:56:27,371
don't want to create new keys and it's

3468
02:56:26,021 --> 02:56:29,671
also a kind of the full control over

3469
02:56:27,371 --> 02:56:29,670
them

3470
02:56:30,280 --> 02:56:35,610
okay so if you recall I was saying some

3471
02:56:34,240 --> 02:56:38,020
of the design goals one of them was

3472
02:56:35,610 --> 02:56:40,390
readability of disability so now when

3473
02:56:38,020 --> 02:56:44,290
you look at the code that is does use

3474
02:56:40,390 --> 02:56:45,580
thing then it's more apparent what is

3475
02:56:44,290 --> 02:56:48,100
happening in the code so if you see that

3476
02:56:45,580 --> 02:56:49,510
you have an AED and you call the ad

3477
02:56:48,100 --> 02:56:52,000
encrypt and you know okay this is

3478
02:56:49,510 --> 02:56:54,550
symmetric encryption without 10th

3479
02:56:52,000 --> 02:56:56,800
occation and then you kind of can say

3480
02:56:54,550 --> 02:56:58,029
beside oh is it is the right type of

3481
02:56:56,800 --> 02:57:00,660
encryption in this context or not

3482
02:56:58,030 --> 02:57:04,330
similarly if you see the hybrid encrypt

3483
02:57:00,660 --> 02:57:05,470
you can say that oh is this is the

3484
02:57:04,330 --> 02:57:08,289
public key encryption that we have in

3485
02:57:05,470 --> 02:57:11,890
here is this right 1 2 to be use here or

3486
02:57:08,290 --> 02:57:14,200
not and also there kind of the

3487
02:57:11,890 --> 02:57:16,150
concentration of all the key managers in

3488
02:57:14,200 --> 02:57:19,980
the registry gives you the power to to

3489
02:57:16,150 --> 02:57:25,900
decide or to audit to see what kind of

3490
02:57:19,980 --> 02:57:27,460
schemes your application is using and we

3491
02:57:25,900 --> 02:57:29,050
don't support it yet but we are planning

3492
02:57:27,460 --> 02:57:31,000
to add also like some to this statistics

3493
02:57:29,050 --> 02:57:35,170
because maybe you are your application

3494
02:57:31,000 --> 02:57:36,940
is and mostly using kind of the new

3495
02:57:35,170 --> 02:57:39,010
stuff but maybe there are still some

3496
02:57:36,940 --> 02:57:41,530
data around that okay Tina you need to

3497
02:57:39,010 --> 02:57:44,860
alt keys for so then then you can go do

3498
02:57:41,530 --> 02:57:46,930
the tracing and analysis okay haha how

3499
02:57:44,860 --> 02:57:49,350
important the old scheme is really still

3500
02:57:46,930 --> 02:57:49,350
keep it or not

3501
02:57:50,610 --> 02:57:58,540
okay so let me move on to the last part

3502
02:57:57,040 --> 02:58:01,980
that I wanted to highlight from from the

3503
02:57:58,540 --> 02:58:04,480
design of think is the extensibility so

3504
02:58:01,980 --> 02:58:07,090
course also we provide some primitives

3505
02:58:04,480 --> 02:58:09,400
as abstract interfaces but and some

3506
02:58:07,090 --> 02:58:11,740
implementations but it will not fit

3507
02:58:09,400 --> 02:58:14,050
everybody and like if the company has

3508
02:58:11,740 --> 02:58:16,840
some existing systems is using some kind

3509
02:58:14,050 --> 02:58:18,130
of encryption we will not be able to

3510
02:58:16,840 --> 02:58:21,010
provide but then you can do it on your

3511
02:58:18,130 --> 02:58:24,849
own and quite easily and looking more

3512
02:58:21,010 --> 02:58:26,950
into the future the well we as I said we

3513
02:58:24,850 --> 02:58:28,630
cannot foresee what kind of crypto

3514
02:58:26,950 --> 02:58:31,660
primitives you will need in the future

3515
02:58:28,630 --> 02:58:35,050
but again adding them to the two thing

3516
02:58:31,660 --> 02:58:37,030
is easy and you can then take advantage

3517
02:58:35,050 --> 02:58:40,300
of all the mechanisms that work for the

3518
02:58:37,030 --> 02:58:42,790
standard components of thing so like

3519
02:58:40,300 --> 02:58:44,460
just so let's see how you would add for

3520
02:58:42,790 --> 02:58:47,439
example

3521
02:58:44,460 --> 02:58:50,500
custom tremendous of a ad that would

3522
02:58:47,439 --> 02:58:53,050
work with thing so well you would have

3523
02:58:50,500 --> 02:58:53,819
to define the container for the key like

3524
02:58:53,050 --> 02:58:55,778
the key type

3525
02:58:53,819 --> 02:58:57,550
so actually you have to have these two

3526
02:58:55,779 --> 02:58:59,529
containers one with my custom key and

3527
02:58:57,550 --> 02:59:01,599
the other would be the custom key format

3528
02:58:59,529 --> 02:59:02,680
which will tell how to how the new keys

3529
02:59:01,600 --> 02:59:03,760
are generated what kind of parameters

3530
02:59:02,680 --> 02:59:07,330
you need for that

3531
02:59:03,760 --> 02:59:09,220
and once you define these containers you

3532
02:59:07,330 --> 02:59:11,229
have to implement the key manager for

3533
02:59:09,220 --> 02:59:13,539
the custom key type due to the

3534
02:59:11,229 --> 02:59:17,349
templating actually you won't have too

3535
02:59:13,540 --> 02:59:19,359
much work because many of things will

3536
02:59:17,350 --> 02:59:22,569
happen automatically but still you have

3537
02:59:19,359 --> 02:59:25,840
to do some things but we have to

3538
02:59:22,569 --> 02:59:27,729
implement a few methods but as you see

3539
02:59:25,840 --> 02:59:31,710
so here you say that okay that your

3540
02:59:27,729 --> 02:59:34,060
custom key manager well will output

3541
02:59:31,710 --> 02:59:38,380
instances of primitive aad and then it

3542
02:59:34,060 --> 02:59:39,880
will use this your custom key and then

3543
02:59:38,380 --> 02:59:41,710
yeah you have to say how how the key is

3544
02:59:39,880 --> 02:59:43,509
used and once you implement up this

3545
02:59:41,710 --> 02:59:46,390
custom header you can register at a

3546
02:59:43,510 --> 02:59:48,760
custom manager to the register or put it

3547
02:59:46,390 --> 02:59:51,000
into the registry and then from from now

3548
02:59:48,760 --> 02:59:55,420
on you can use it as any other

3549
02:59:51,000 --> 02:59:58,420
implementation of faad so then all the

3550
02:59:55,420 --> 03:00:01,510
key rotations of works as as for the

3551
02:59:58,420 --> 03:00:01,840
other side now whether this was really

3552
03:00:01,510 --> 03:00:05,830
easy

3553
03:00:01,840 --> 03:00:08,140
what about custom primitives so like if

3554
03:00:05,830 --> 03:00:11,850
you want to have some functionality

3555
03:00:08,140 --> 03:00:11,849
which about which we didn't think about

3556
03:00:17,320 --> 03:00:23,660
this will actually also happen in three

3557
03:00:20,780 --> 03:00:26,780
simple steps well you have to define

3558
03:00:23,660 --> 03:00:28,761
what what's your primitive so so well it

3559
03:00:26,780 --> 03:00:31,280
will do probably some crypto stuff so

3560
03:00:28,761 --> 03:00:34,070
you say your primitive has some method

3561
03:00:31,280 --> 03:00:36,021
one or two or more so in this example we

3562
03:00:34,070 --> 03:00:37,940
just won well it does some crypto

3563
03:00:36,021 --> 03:00:39,980
computation on the input end and give

3564
03:00:37,940 --> 03:00:44,421
some output so once you define the

3565
03:00:39,980 --> 03:00:46,301
primitive itself there's one more

3566
03:00:44,421 --> 03:00:48,530
structure that it you have to provide is

3567
03:00:46,301 --> 03:00:50,150
which I didn't mention before because

3568
03:00:48,530 --> 03:00:52,480
it's kind of internal detail but it's

3569
03:00:50,150 --> 03:00:55,581
still relevant in this context the

3570
03:00:52,480 --> 03:00:58,609
primitive wrapper what what is a rapper

3571
03:00:55,581 --> 03:01:00,620
a rapper is just enough container for

3572
03:00:58,610 --> 03:01:02,181
all the primitives that you have from a

3573
03:01:00,620 --> 03:01:05,211
cassette so if you have a cassette you

3574
03:01:02,181 --> 03:01:07,041
have several keys inside and when you

3575
03:01:05,211 --> 03:01:09,320
instantiate primitives from this keys

3576
03:01:07,041 --> 03:01:10,551
you will get a bunch of of the

3577
03:01:09,320 --> 03:01:12,711
primitives are going to have a bunch of

3578
03:01:10,551 --> 03:01:15,109
a 80s but a bunch of a a DS is not an

3579
03:01:12,711 --> 03:01:16,391
AED itself so you have to wrap this

3580
03:01:15,110 --> 03:01:20,030
thing so you have to kind of do this

3581
03:01:16,391 --> 03:01:24,529
selection of the primary like to create

3582
03:01:20,030 --> 03:01:28,041
new handing of the primary a primitive

3583
03:01:24,530 --> 03:01:30,171
to create new crypto content and use the

3584
03:01:28,041 --> 03:01:35,619
other primitives that you get from the

3585
03:01:30,171 --> 03:01:38,690
cassette to handle existing crypto later

3586
03:01:35,620 --> 03:01:42,891
but in most cases actually also pretty

3587
03:01:38,690 --> 03:01:44,480
simple and once you implement the

3588
03:01:42,891 --> 03:01:49,940
primitive proper and the register is

3589
03:01:44,480 --> 03:01:52,070
also then you implement the commander is

3590
03:01:49,940 --> 03:01:54,921
on a previous slide and then from now on

3591
03:01:52,070 --> 03:02:00,761
you can use everything as as previous or

3592
03:01:54,921 --> 03:02:03,171
a standard pink primitives okay so I

3593
03:02:00,761 --> 03:02:06,681
hope I convinced you that there are some

3594
03:02:03,171 --> 03:02:11,421
simplicity and SM is the use of of think

3595
03:02:06,681 --> 03:02:14,150
structure and anything as a tool so let

3596
03:02:11,421 --> 03:02:17,631
me tell you why we send far right now so

3597
03:02:14,150 --> 03:02:22,100
pink is open source on github for over a

3598
03:02:17,631 --> 03:02:23,811
year now and we do support a bunch of

3599
03:02:22,101 --> 03:02:27,141
primitives in addition to the ones I

3600
03:02:23,811 --> 03:02:28,850
discuss we also have the domestic IAD

3601
03:02:27,141 --> 03:02:30,920
and

3602
03:02:28,850 --> 03:02:35,420
I think I didn't talk about the digital

3603
03:02:30,920 --> 03:02:37,250
signatures and it's available in several

3604
03:02:35,420 --> 03:02:39,350
languages so for Safari we release it

3605
03:02:37,250 --> 03:02:42,380
for Java C++ and Objective C and it's

3606
03:02:39,350 --> 03:02:48,290
working on Linux it's working on Android

3607
03:02:42,380 --> 03:02:49,869
is working on iOS in preparation have go

3608
03:02:48,290 --> 03:02:52,670
JavaScript Python there is also a

3609
03:02:49,870 --> 03:02:55,400
community driven effort to provide

3610
03:02:52,670 --> 03:02:57,650
support in PHP and all of course all of

3611
03:02:55,400 --> 03:02:59,449
these implementations are kind of

3612
03:02:57,650 --> 03:03:00,859
compatible so you can do encryption one

3613
03:02:59,450 --> 03:03:06,100
decryption on the other and it just

3614
03:03:00,860 --> 03:03:08,960
worked and we have also encryption with

3615
03:03:06,100 --> 03:03:13,010
kms systems so for Java we have already

3616
03:03:08,960 --> 03:03:15,109
Latin for AWS for Google Cloud kms and

3617
03:03:13,010 --> 03:03:18,230
for Android key store for every 50 we

3618
03:03:15,110 --> 03:03:25,100
support Apple keychain for C++ will also

3619
03:03:18,230 --> 03:03:27,410
support the kms systems pretty soon and

3620
03:03:25,100 --> 03:03:29,090
maybe forever I should say one more

3621
03:03:27,410 --> 03:03:31,100
month also actually so that thing is

3622
03:03:29,090 --> 03:03:33,740
open-source but it's used by many

3623
03:03:31,100 --> 03:03:37,310
systems at Google and like and also by

3624
03:03:33,740 --> 03:03:38,780
third parties and it will be more in

3625
03:03:37,310 --> 03:03:40,820
luring you so I said it's used by

3626
03:03:38,780 --> 03:03:42,620
Android by many Android applications and

3627
03:03:40,820 --> 03:03:48,680
also vector on server-side and Google as

3628
03:03:42,620 --> 03:03:51,380
well yeah so I talked about the think as

3629
03:03:48,680 --> 03:03:53,930
a crypto tool actually for those who

3630
03:03:51,380 --> 03:03:58,039
don't want to do crypto anyway but have

3631
03:03:53,930 --> 03:04:00,260
to it's supported in multiple languages

3632
03:03:58,040 --> 03:04:02,240
multiple platforms it has many desirable

3633
03:04:00,260 --> 03:04:03,890
features there's actually many more

3634
03:04:02,240 --> 03:04:07,100
features that I didn't talk about due to

3635
03:04:03,890 --> 03:04:08,630
the time limitations like third safety

3636
03:04:07,100 --> 03:04:11,540
protections against an channel attacks

3637
03:04:08,630 --> 03:04:13,189
and personally and so on and last but

3638
03:04:11,540 --> 03:04:15,650
not least it's open source and we do

3639
03:04:13,190 --> 03:04:17,430
accept contributions from the outside

3640
03:04:15,650 --> 03:04:21,169
also thank you very much

3641
03:04:17,430 --> 03:04:21,169
[Applause]

3642
03:04:24,260 --> 03:04:29,040
thank you I'm my apologies about the

3643
03:04:26,910 --> 03:04:31,970
timing around and we have time for

3644
03:04:29,040 --> 03:04:36,181
questions so please come to the mics

3645
03:04:31,970 --> 03:04:39,029
hello in one of the first slides you

3646
03:04:36,181 --> 03:04:41,220
show that for AED you have a streaming

3647
03:04:39,030 --> 03:04:43,950
API there's a streaming and crypto and

3648
03:04:41,220 --> 03:04:46,891
screaming descriptor yes when you are

3649
03:04:43,950 --> 03:04:48,710
decrypting do you stream data as it

3650
03:04:46,891 --> 03:04:54,330
comes or do you prefer everything

3651
03:04:48,710 --> 03:04:56,490
because if you do before you have

3652
03:04:54,330 --> 03:04:59,400
verified the Mac you cannot be sure that

3653
03:04:56,490 --> 03:05:02,521
the data is correct and you have to read

3654
03:04:59,400 --> 03:05:05,369
every order ciphertext and remark to

3655
03:05:02,521 --> 03:05:08,280
verify it before beginning to return the

3656
03:05:05,370 --> 03:05:11,940
data to the application all the

3657
03:05:08,280 --> 03:05:14,311
application must take care to verify

3658
03:05:11,940 --> 03:05:16,860
ultimately with the flow that the mac

3659
03:05:14,311 --> 03:05:18,539
was correct and yeah well so what our

3660
03:05:16,860 --> 03:05:20,490
interface our implementation of the

3661
03:05:18,540 --> 03:05:23,400
interface actually yeah like when you

3662
03:05:20,490 --> 03:05:25,021
get the output it is authenticated so so

3663
03:05:23,400 --> 03:05:28,650
we do you don't have to kind of do on

3664
03:05:25,021 --> 03:05:31,230
top of this your manual check see okay

3665
03:05:28,650 --> 03:05:33,570
so it's just syntax exactly it buffers

3666
03:05:31,230 --> 03:05:39,891
everything and do everything right yeah

3667
03:05:33,570 --> 03:05:43,440
that's it okay what are the obstacles

3668
03:05:39,891 --> 03:05:45,630
for other language support for in

3669
03:05:43,440 --> 03:05:47,490
particular strong type languages and

3670
03:05:45,630 --> 03:05:50,039
more secure languages like you know go

3671
03:05:47,490 --> 03:05:51,660
rust etc I mean you that those haven't

3672
03:05:50,040 --> 03:05:53,400
been your target and I was just kind of

3673
03:05:51,660 --> 03:05:56,039
curious like what's keeping you from

3674
03:05:53,400 --> 03:05:57,359
having those be a target well so we are

3675
03:05:56,040 --> 03:06:00,660
working on going and some other

3676
03:05:57,360 --> 03:06:03,061
languages as well I mean it's more less

3677
03:06:00,660 --> 03:06:05,220
kind of we are demand driven so if you

3678
03:06:03,061 --> 03:06:07,320
have projects that need some support in

3679
03:06:05,220 --> 03:06:11,460
some particular language we do provide

3680
03:06:07,320 --> 03:06:13,220
this we have limited manpower so that's

3681
03:06:11,460 --> 03:06:15,930
why we have to kind of dig into so

3682
03:06:13,220 --> 03:06:19,080
ideally we would like to provide every

3683
03:06:15,931 --> 03:06:20,880
language the same extent so I think I

3684
03:06:19,080 --> 03:06:22,289
didn't mention but the support in

3685
03:06:20,880 --> 03:06:24,300
various languages differ so it's not

3686
03:06:22,290 --> 03:06:26,130
like that that we currently support all

3687
03:06:24,300 --> 03:06:27,660
of the implementations in all the

3688
03:06:26,130 --> 03:06:29,970
languages so the Java is not the most

3689
03:06:27,660 --> 03:06:33,390
advanced one but others are catching up

3690
03:06:29,970 --> 03:06:35,608
and yeah so there is no like intervene

3691
03:06:33,390 --> 03:06:40,739
the reason why we don't do it's just

3692
03:06:35,609 --> 03:06:42,479
kind of resource management yes so

3693
03:06:40,739 --> 03:06:44,340
related to your your your statements

3694
03:06:42,479 --> 03:06:45,630
about others other language support like

3695
03:06:44,340 --> 03:06:48,330
obviously there's limited resources

3696
03:06:45,630 --> 03:06:49,710
available to you there are many projects

3697
03:06:48,330 --> 03:06:52,470
that would be potentially interested in

3698
03:06:49,710 --> 03:06:54,810
integrating these sorts of constructions

3699
03:06:52,470 --> 03:06:56,399
as you call primitives right now those

3700
03:06:54,810 --> 03:06:59,069
primitives are described obviously in

3701
03:06:56,399 --> 03:07:00,930
high-level user like descriptions where

3702
03:06:59,069 --> 03:07:03,510
you say oh it's Oh a to and things like

3703
03:07:00,930 --> 03:07:04,979
that but the only information about how

3704
03:07:03,510 --> 03:07:07,319
it's actually like what the actual

3705
03:07:04,979 --> 03:07:09,300
format is is the implementation do you

3706
03:07:07,319 --> 03:07:10,979
guys have a plan on like building more

3707
03:07:09,300 --> 03:07:12,720
formalized specs with test vectors so

3708
03:07:10,979 --> 03:07:13,830
people who might want to build it

3709
03:07:12,720 --> 03:07:15,569
through their own languages and their

3710
03:07:13,830 --> 03:07:20,510
own libraries are able to interoperate

3711
03:07:15,569 --> 03:07:23,090
with you so I we don't have very like

3712
03:07:20,510 --> 03:07:27,540
the code is documentation in the way and

3713
03:07:23,090 --> 03:07:29,310
it's kind of stable so we will not

3714
03:07:27,540 --> 03:07:30,600
change the format now that you have for

3715
03:07:29,310 --> 03:07:32,670
carrying of many customers in German

3716
03:07:30,600 --> 03:07:34,470
supplies but either even if you would do

3717
03:07:32,670 --> 03:07:36,750
that like we have the versioning availa

3718
03:07:34,470 --> 03:07:39,358
mentioned so we could do that because

3719
03:07:36,750 --> 03:07:40,890
the key managers I would say that we

3720
03:07:39,359 --> 03:07:44,040
will require some commits some version

3721
03:07:40,890 --> 03:07:45,840
of the key manager and so we could

3722
03:07:44,040 --> 03:07:47,130
support the old one and the new one so

3723
03:07:45,840 --> 03:07:49,380
we could change the formatting as well

3724
03:07:47,130 --> 03:07:53,039
so so we don't have to abandon anything

3725
03:07:49,380 --> 03:07:54,989
so it's also extensible in this way but

3726
03:07:53,040 --> 03:07:58,470
you have a question whether we would

3727
03:07:54,989 --> 03:08:00,720
provide the specs yeah I think we could

3728
03:07:58,470 --> 03:08:02,310
kind of write down a few specification

3729
03:08:00,720 --> 03:08:05,369
if I can extract this from the code and

3730
03:08:02,310 --> 03:08:06,539
tell what was it is yeah talk talk to me

3731
03:08:05,370 --> 03:08:08,640
and III

3732
03:08:06,540 --> 03:08:10,620
well I mean if once we have it was when

3733
03:08:08,640 --> 03:08:12,300
we put it on github as well but if you

3734
03:08:10,620 --> 03:08:14,250
for among its close to intercept just

3735
03:08:12,300 --> 03:08:19,289
talk to me talk to tie who is sitting in

3736
03:08:14,250 --> 03:08:22,739
front like here thank you very much okay

3737
03:08:19,290 --> 03:08:26,330
any more questions okay and let's thank

3738
03:08:22,739 --> 03:08:26,330
the speaker again thank you very much

3739
03:08:29,320 --> 03:08:34,070
just before I Unleashed Nigel let me

3740
03:08:31,910 --> 03:08:37,460
just do a quick quick temperature check

3741
03:08:34,070 --> 03:08:39,340
is anybody else cold in here and is

3742
03:08:37,460 --> 03:08:41,900
anybody too warm

3743
03:08:39,340 --> 03:08:43,910
okay I think that I think they I think

3744
03:08:41,900 --> 03:08:45,561
the cold-blooded people have it so we'll

3745
03:08:43,910 --> 03:08:48,170
see if we can get the temperature turned

3746
03:08:45,561 --> 03:08:52,039
up and now it's over to Nigel the

3747
03:08:48,170 --> 03:08:56,620
warm-blooded Nigel so we have one person

3748
03:08:52,040 --> 03:08:56,620
in the queue you've got 50 minutes ah

3749
03:08:57,551 --> 03:09:03,619
okay right so there's some yeah okay so

3750
03:08:59,870 --> 03:09:05,240
we'll wait a bit want to go do some

3751
03:09:03,620 --> 03:09:11,360
maths this is I'm not very good list one

3752
03:09:05,240 --> 03:09:13,840
two three four five six twelve fourteen

3753
03:09:11,360 --> 03:09:13,840
fifteen

3754
03:09:24,960 --> 03:09:30,939
18:18 okay we're currently at about two

3755
03:09:28,391 --> 03:09:33,699
minutes to pop about two minutes to pop

3756
03:09:30,940 --> 03:09:40,470
I've got to my phone on and keeps gonna

3757
03:09:33,700 --> 03:09:40,470
die right now on your marks get set go

3758
03:09:41,250 --> 03:09:48,311
hi my name is Vivian Vivian bharathan I

3759
03:09:45,480 --> 03:09:52,270
have two points to make one is about

3760
03:09:48,311 --> 03:09:54,580
blockchain I heard some epic Ettore

3761
03:09:52,271 --> 03:09:57,190
remarks about blockchain I believe it's

3762
03:09:54,580 --> 03:09:59,710
because of incomplete understanding of

3763
03:09:57,190 --> 03:10:03,070
the abstraction rather than real

3764
03:09:59,710 --> 03:10:07,859
problems with it so I urge you guys to

3765
03:10:03,070 --> 03:10:11,220
look further into it before bashing it

3766
03:10:07,860 --> 03:10:14,590
okay that's the first thing second is I

3767
03:10:11,220 --> 03:10:17,980
work with a group called hyper ledger

3768
03:10:14,590 --> 03:10:21,280
which is we incubate like five or six

3769
03:10:17,980 --> 03:10:25,561
different DLTS and I'm a chair of the

3770
03:10:21,280 --> 03:10:28,510
identity working group so I would urge

3771
03:10:25,561 --> 03:10:31,330
any you know participation by the

3772
03:10:28,510 --> 03:10:35,400
cryptographers in that group because we

3773
03:10:31,330 --> 03:10:40,210
really lack that expertise there and

3774
03:10:35,400 --> 03:10:44,770
your contribution will make a big

3775
03:10:40,210 --> 03:10:47,169
difference so bang for the buck the

3776
03:10:44,771 --> 03:10:49,330
second thing is there is a library

3777
03:10:47,170 --> 03:10:53,740
called Ursa which is a cryptographic

3778
03:10:49,330 --> 03:10:58,120
library being constructed right now so

3779
03:10:53,740 --> 03:11:03,851
any contribution to that will also be

3780
03:10:58,120 --> 03:11:06,280
helpful brilliant very good that's the

3781
03:11:03,851 --> 03:11:10,000
kind of talk we need so give him a nice

3782
03:11:06,280 --> 03:11:14,320
round of applause whoa right okay so on

3783
03:11:10,000 --> 03:11:15,970
my house cassette go hi everyone first

3784
03:11:14,320 --> 03:11:17,740
of all two seconds to say thanks to the

3785
03:11:15,970 --> 03:11:21,789
organizers this is a truly great

3786
03:11:17,740 --> 03:11:23,351
conference and I'm just gonna say I'm my

3787
03:11:21,790 --> 03:11:25,391
name is Daniel Bennett I work at a

3788
03:11:23,351 --> 03:11:28,030
company called Kadett and I guess like a

3789
03:11:25,391 --> 03:11:30,190
year ago or something we realized that

3790
03:11:28,030 --> 03:11:32,141
the whole zero knowledge industry is

3791
03:11:30,190 --> 03:11:34,810
actually you know growing pretty fast

3792
03:11:32,141 --> 03:11:37,118
yeah related mainly to deal

3793
03:11:34,810 --> 03:11:39,880
teehee and blockchain space but not

3794
03:11:37,119 --> 03:11:41,619
necessarily and I essentially wanted to

3795
03:11:39,880 --> 03:11:44,858
talk to you about this initiative that

3796
03:11:41,619 --> 03:11:46,840
was started last year called ZK proof so

3797
03:11:44,859 --> 03:11:49,810
zero knowledge proves it's that Kate

3798
03:11:46,840 --> 03:11:52,270
proof org you can check it out and it's

3799
03:11:49,810 --> 03:11:53,890
essentially an open initiative of the

3800
03:11:52,270 --> 03:11:55,930
kadhi Mia and Industry to standardize

3801
03:11:53,890 --> 03:11:57,460
the use of zero knowledge proof so

3802
03:11:55,930 --> 03:11:59,710
standardization is very important in

3803
03:11:57,460 --> 03:12:01,679
cryptography we you know I guess we all

3804
03:11:59,710 --> 03:12:05,528
know about it we've heard about it here

3805
03:12:01,680 --> 03:12:09,159
and essentially we are at the point

3806
03:12:05,529 --> 03:12:11,739
where we were creating we want to create

3807
03:12:09,159 --> 03:12:13,210
a set of community standards that

3808
03:12:11,739 --> 03:12:15,159
essentially are going to be used as

3809
03:12:13,210 --> 03:12:17,649
guidelines for people that are joining

3810
03:12:15,159 --> 03:12:19,600
the industry from the theoretical level

3811
03:12:17,649 --> 03:12:25,390
all the way up to the practitioners and

3812
03:12:19,600 --> 03:12:27,279
the developers and essentially we have

3813
03:12:25,390 --> 03:12:30,278
we're planning a second workshop that is

3814
03:12:27,279 --> 03:12:33,760
going to happen in April in 2019 the

3815
03:12:30,279 --> 03:12:36,699
April 10 to 12 we welcome everybody to

3816
03:12:33,760 --> 03:12:39,460
you know register to come participate we

3817
03:12:36,699 --> 03:12:41,859
are open we have opened a submission

3818
03:12:39,460 --> 03:12:43,448
process for proposals related to zero

3819
03:12:41,859 --> 03:12:45,279
knowledge proves as well as for some

3820
03:12:43,449 --> 03:12:47,529
kind of contributed talks so if you have

3821
03:12:45,279 --> 03:12:50,859
work on zero knowledge definitely submit

3822
03:12:47,529 --> 03:12:53,140
this and propose a talk I'll just say

3823
03:12:50,859 --> 03:12:55,569
the steering committee today is composed

3824
03:12:53,140 --> 03:12:57,880
by Dan Bonet and Kennedy

3825
03:12:55,569 --> 03:13:01,930
Shafi Goldwasser alessandro casa y

3826
03:12:57,880 --> 03:13:04,028
alkali yen's goethe uvula shyamu - I

3827
03:13:01,930 --> 03:13:08,800
think link into Subramanian Elaine Shiva

3828
03:13:04,029 --> 03:13:14,140
weaves oh and I ran Tamil thank you very

3829
03:13:08,800 --> 03:13:15,489
much and god hi my name is Greg Rubin I

3830
03:13:14,140 --> 03:13:17,769
work for a tiny little company called

3831
03:13:15,489 --> 03:13:20,109
Amazon and have been there since 2005

3832
03:13:17,770 --> 03:13:22,119
the team I'm on is something called AWS

3833
03:13:20,109 --> 03:13:24,279
crypto tools our goal is to make crypto

3834
03:13:22,119 --> 03:13:25,779
make all of your crypto problems go away

3835
03:13:24,279 --> 03:13:27,130
so you don't need to worry about them or

3836
03:13:25,779 --> 03:13:28,899
your developers don't need to worry

3837
03:13:27,130 --> 03:13:30,970
about them and can focus on what

3838
03:13:28,899 --> 03:13:33,010
actually matters or as I like to say we

3839
03:13:30,970 --> 03:13:36,429
write crypto so you don't have to

3840
03:13:33,010 --> 03:13:38,290
we only AWS encryption SDK which mat

3841
03:13:36,430 --> 03:13:39,970
Campania talked about earlier today we

3842
03:13:38,290 --> 03:13:42,069
also own a bunch of client-side

3843
03:13:39,970 --> 03:13:44,319
libraries for encrypting data that

3844
03:13:42,069 --> 03:13:45,550
integrates with AWS services and we're

3845
03:13:44,319 --> 03:13:47,250
working on a lot of other things

3846
03:13:45,550 --> 03:13:50,220
including many generic

3847
03:13:47,250 --> 03:13:52,770
fools don't directly integrate interact

3848
03:13:50,220 --> 03:13:55,260
with AWS and plan on launching them in

3849
03:13:52,770 --> 03:13:56,220
the future so why am i up here we want

3850
03:13:55,260 --> 03:13:59,190
your help

3851
03:13:56,220 --> 03:14:00,840
we've got to get hub account we do pay

3852
03:13:59,190 --> 03:14:03,780
close attention to what's going on there

3853
03:14:00,840 --> 03:14:05,310
we want to know what you need we want to

3854
03:14:03,780 --> 03:14:07,710
know how we can help you what we should

3855
03:14:05,310 --> 03:14:09,810
be building for you we want your review

3856
03:14:07,710 --> 03:14:12,179
we do a lot of review we hire people to

3857
03:14:09,810 --> 03:14:13,769
do our code reviews we want extra eyes

3858
03:14:12,180 --> 03:14:16,490
to make sure we're doing this right and

3859
03:14:13,770 --> 03:14:19,500
not delivering sharp edges to developers

3860
03:14:16,490 --> 03:14:21,660
we also want plugins we want to support

3861
03:14:19,500 --> 03:14:23,880
different key management systems we want

3862
03:14:21,660 --> 03:14:26,190
our code to interoperate with other

3863
03:14:23,880 --> 03:14:28,679
systems that we don't even know about so

3864
03:14:26,190 --> 03:14:32,010
that they can use our systems and that

3865
03:14:28,680 --> 03:14:35,100
things just become easier in general so

3866
03:14:32,010 --> 03:14:37,050
please come talk to us please come help

3867
03:14:35,100 --> 03:14:39,150
us we'd love to chat with you I'll be

3868
03:14:37,050 --> 03:14:41,820
around most of my team is around too and

3869
03:14:39,150 --> 03:14:43,260
they're all amazing people and finally

3870
03:14:41,820 --> 03:14:45,090
because I think I'm technically required

3871
03:14:43,260 --> 03:14:51,210
to say this yes we're hiring thank you

3872
03:14:45,090 --> 03:14:52,440
very much thank you and thank you I just

3873
03:14:51,210 --> 03:14:54,750
want to make a couple of announcements

3874
03:14:52,440 --> 03:14:58,260
about some of the work I guess we've

3875
03:14:54,750 --> 03:15:00,480
been doing it in value about secure

3876
03:14:58,260 --> 03:15:02,160
messaging and random number generations

3877
03:15:00,480 --> 03:15:04,260
so definitely talk to me won't be able

3878
03:15:02,160 --> 03:15:08,130
to tell kind of any significant details

3879
03:15:04,260 --> 03:15:11,430
but in terms of secure messaging we give

3880
03:15:08,130 --> 03:15:13,830
I think the first you know analysis of

3881
03:15:11,430 --> 03:15:15,570
the signal protocol which is kind of

3882
03:15:13,830 --> 03:15:17,550
cryptographically sounds the definition

3883
03:15:15,570 --> 03:15:19,740
is clean as possible it applies to the

3884
03:15:17,550 --> 03:15:21,359
real signal protocol it formalizes

3885
03:15:19,740 --> 03:15:23,430
properties such an immediate decryption

3886
03:15:21,360 --> 03:15:25,590
hopefully it's understandable it's

3887
03:15:23,430 --> 03:15:26,940
modular risible so you can do post

3888
03:15:25,590 --> 03:15:29,820
quantum signal if you interested in

3889
03:15:26,940 --> 03:15:31,680
doing post content signal talk to me and

3890
03:15:29,820 --> 03:15:33,330
I feel like this kind of the definition

3891
03:15:31,680 --> 03:15:35,100
could be easily extendable to the MLS

3892
03:15:33,330 --> 03:15:37,440
group so I'm planning to attend MLS

3893
03:15:35,100 --> 03:15:39,210
meeting and hopefully I'm willing to

3894
03:15:37,440 --> 03:15:41,340
learn you know hopefully they'll learn a

3895
03:15:39,210 --> 03:15:42,900
lot of things from that and hopefully

3896
03:15:41,340 --> 03:15:44,370
also contribute so definitely token if

3897
03:15:42,900 --> 03:15:46,949
you're interested in aspects of secure

3898
03:15:44,370 --> 03:15:47,850
messaging how to define extended and so

3899
03:15:46,950 --> 03:15:49,530
on

3900
03:15:47,850 --> 03:15:52,470
and the second else I want to talk about

3901
03:15:49,530 --> 03:15:55,590
an upcoming work of mine that I'm very

3902
03:15:52,470 --> 03:15:57,000
excited on a random number generator so

3903
03:15:55,590 --> 03:15:58,929
far so far is kind of an embarrassing

3904
03:15:57,000 --> 03:16:00,579
situations that like

3905
03:15:58,929 --> 03:16:02,979
you know encryption authentications a

3906
03:16:00,579 --> 03:16:04,288
state of standardization initialization

3907
03:16:02,979 --> 03:16:07,989
of our energies is kind of embarrassing

3908
03:16:04,289 --> 03:16:09,069
so I think so now we finally have the

3909
03:16:07,989 --> 03:16:11,259
right kind of models that I

3910
03:16:09,069 --> 03:16:13,239
definitionally visualize practical kind

3911
03:16:11,259 --> 03:16:16,119
of RNG is built on cryptographic hashing

3912
03:16:13,239 --> 03:16:18,569
which don't have seeds and yet they

3913
03:16:16,119 --> 03:16:20,439
probably kind of accumulate and extract

3914
03:16:18,569 --> 03:16:21,310
randomness in a good way so if you

3915
03:16:20,439 --> 03:16:24,100
interested in the enjoying

3916
03:16:21,310 --> 03:16:26,679
centralization or build kind of a good

3917
03:16:24,100 --> 03:16:29,649
rng which is not only practically secure

3918
03:16:26,679 --> 03:16:35,770
but also theoretically sound please dr.

3919
03:16:29,649 --> 03:16:37,868
Ann and thank you all right god yes my

3920
03:16:35,770 --> 03:16:41,679
name is Christopher Allen I'm best known

3921
03:16:37,869 --> 03:16:43,869
as being the co-author of TLS 100 which

3922
03:16:41,679 --> 03:16:47,439
I hope everybody here knows you

3923
03:16:43,869 --> 03:16:49,629
shouldn't be using anymore I hope that

3924
03:16:47,439 --> 03:16:51,189
in the future I will be best known as

3925
03:16:49,629 --> 03:16:53,409
the architect of the decentralized

3926
03:16:51,189 --> 03:16:55,719
identifier what is the decentralized

3927
03:16:53,409 --> 03:16:57,520
identifier it's a new architecture to

3928
03:16:55,719 --> 03:16:59,049
address some of the fundamental problems

3929
03:16:57,520 --> 03:17:02,020
that we have as protocol and

3930
03:16:59,049 --> 03:17:03,909
cryptographic engineers I know a lot of

3931
03:17:02,020 --> 03:17:06,100
you may have heard about it in various

3932
03:17:03,909 --> 03:17:08,770
forums you associate it with block

3933
03:17:06,100 --> 03:17:10,479
chains not all decentralized identifiers

3934
03:17:08,770 --> 03:17:13,060
x' use blockchain technology but they

3935
03:17:10,479 --> 03:17:14,499
all use cryptography this has been

3936
03:17:13,060 --> 03:17:16,569
moving forward it's been incubated for

3937
03:17:14,499 --> 03:17:20,319
the last three years at rebooting web of

3938
03:17:16,569 --> 03:17:22,659
trust it's been in the last year at the

3939
03:17:20,319 --> 03:17:24,100
w3c credentials community group and it

3940
03:17:22,659 --> 03:17:27,929
looks like it's going to be formally

3941
03:17:24,100 --> 03:17:30,369
ratified as a working group at the w3c

3942
03:17:27,929 --> 03:17:32,499
sometime this spring so I really

3943
03:17:30,369 --> 03:17:34,270
encourage you to take a look at it if

3944
03:17:32,499 --> 03:17:36,419
you have skepticism because you've heard

3945
03:17:34,270 --> 03:17:40,389
of its association with block chains

3946
03:17:36,419 --> 03:17:44,770
take a deeper look at it the spec is up

3947
03:17:40,389 --> 03:17:46,358
in an early draft form there are over 20

3948
03:17:44,770 --> 03:17:48,969
companies I think at this point that

3949
03:17:46,359 --> 03:17:51,459
have implemented various versions of it

3950
03:17:48,969 --> 03:17:53,589
it's a very powerful architecture for

3951
03:17:51,459 --> 03:17:55,829
solving some problems it including

3952
03:17:53,589 --> 03:17:59,350
things like anti-correlation

3953
03:17:55,829 --> 03:18:02,469
pseudonymity and just the decentralize

3954
03:17:59,350 --> 03:18:04,949
problem so a credentials community group

3955
03:18:02,469 --> 03:18:08,618
at the w3c has the current spec

3956
03:18:04,949 --> 03:18:11,049
rebooting web of trust is March 1st

3957
03:18:08,619 --> 03:18:12,690
through 3rd in Barcelona if you want to

3958
03:18:11,049 --> 03:18:15,990
meet with other people to work on it

3959
03:18:12,690 --> 03:18:19,771
and I'm with blockchain Commons which is

3960
03:18:15,990 --> 03:18:21,811
trying to fund vendor-independent and

3961
03:18:19,771 --> 03:18:22,670
blockchain independent development thank

3962
03:18:21,811 --> 03:18:28,590
you

3963
03:18:22,670 --> 03:18:30,900
thank you very much and go hi my name is

3964
03:18:28,590 --> 03:18:34,311
Brent I work at Evernham and it's been

3965
03:18:30,900 --> 03:18:36,570
three days since I last used blockchain

3966
03:18:34,311 --> 03:18:38,970
my blockchain usage started pretty

3967
03:18:36,570 --> 03:18:41,880
innocently just some guys messing around

3968
03:18:38,970 --> 03:18:44,369
with hashing you know a little md5

3969
03:18:41,880 --> 03:18:46,350
little sha-1 and then cryptographer

3970
03:18:44,370 --> 03:18:49,530
turned us on to collision-resistant

3971
03:18:46,351 --> 03:18:51,271
cryptographically secure hashes and it

3972
03:18:49,530 --> 03:18:53,990
was a slippery slope from there we were

3973
03:18:51,271 --> 03:18:57,000
into Merkle trees and patricia trees and

3974
03:18:53,990 --> 03:18:59,699
we would proof set membership using you

3975
03:18:57,000 --> 03:19:03,450
know knowledge of the root hash somebody

3976
03:18:59,700 --> 03:19:06,180
brought in proof of work a little bit of

3977
03:19:03,450 --> 03:19:11,160
pbft and before I knew it we were doing

3978
03:19:06,180 --> 03:19:13,200
consensus we called it a distributed

3979
03:19:11,160 --> 03:19:18,690
ledger but we all knew what we were

3980
03:19:13,200 --> 03:19:21,630
doing I dabbled a little bit in secure

3981
03:19:18,690 --> 03:19:23,130
multi-party computation before my eyes

3982
03:19:21,630 --> 03:19:23,670
are opened I knew that if I wasn't

3983
03:19:23,130 --> 03:19:25,980
careful

3984
03:19:23,670 --> 03:19:30,990
I would find myself doing an IC o----

3985
03:19:25,980 --> 03:19:33,090
and it was a rough comedown I still use

3986
03:19:30,990 --> 03:19:37,440
blockchain but only because it's

3987
03:19:33,090 --> 03:19:39,210
prescribed by my use case and I'm proud

3988
03:19:37,440 --> 03:19:42,480
to say I haven't abused it in a long

3989
03:19:39,210 --> 03:19:44,189
time I want to thank the organizers of

3990
03:19:42,480 --> 03:19:46,830
this conference for creating a safe

3991
03:19:44,190 --> 03:19:49,730
place where crypto does mean

3992
03:19:46,830 --> 03:19:49,730
cryptography

3993
03:19:53,200 --> 03:20:06,141
[Music]

3994
03:20:01,181 --> 03:20:07,851
that wins the coolest talk so far so I

3995
03:20:06,141 --> 03:20:10,181
think I picked the best spot in the

3996
03:20:07,851 --> 03:20:14,061
queue because I'm about to deliver

3997
03:20:10,181 --> 03:20:16,011
DLT job and after that talk that's a lot

3998
03:20:14,061 --> 03:20:19,641
of fun so I work at a company called

3999
03:20:16,011 --> 03:20:22,790
digital asset we well we use crypto

4000
03:20:19,641 --> 03:20:25,940
since we are a DLT company we are

4001
03:20:22,790 --> 03:20:28,250
supposed to become real world by 2021

4002
03:20:25,940 --> 03:20:30,410
and latest because by then essentially

4003
03:20:28,250 --> 03:20:33,730
every stock trade in Australia I

4004
03:20:30,410 --> 03:20:37,221
supposed to be processed by our systems

4005
03:20:33,730 --> 03:20:38,721
so our take on BLT is I would say a

4006
03:20:37,221 --> 03:20:43,689
little bit different than other people

4007
03:20:38,721 --> 03:20:46,699
so our main product is a language for

4008
03:20:43,690 --> 03:20:51,471
modeling business workflows across

4009
03:20:46,700 --> 03:20:53,391
multiple parties and then on top of that

4010
03:20:51,471 --> 03:20:55,100
we have we build a platform that sort of

4011
03:20:53,391 --> 03:20:58,730
it's like a distributed runtime for the

4012
03:20:55,101 --> 03:21:02,030
language so the language is pretty high

4013
03:20:58,730 --> 03:21:06,051
level and the goals of the platform are

4014
03:21:02,030 --> 03:21:08,210
to secure its execution so we have pre

4015
03:21:06,051 --> 03:21:11,449
interesting problems such as assuring

4016
03:21:08,210 --> 03:21:14,840
integrity while preserving privacy and

4017
03:21:11,450 --> 03:21:17,900
we have to build crypto protocols to do

4018
03:21:14,841 --> 03:21:19,431
these things so if you are interested we

4019
03:21:17,900 --> 03:21:21,619
are looking for cryptographers you're

4020
03:21:19,431 --> 03:21:23,721
also looking for foreign methods people

4021
03:21:21,620 --> 03:21:25,160
so I'm one of them actually I have a

4022
03:21:23,721 --> 03:21:26,990
background in formal methods and there's

4023
03:21:25,160 --> 03:21:29,660
a few other such people in the company

4024
03:21:26,990 --> 03:21:32,631
if you're interested come and talk to me

4025
03:21:29,660 --> 03:21:35,240
we have locations in Zurich Europe

4026
03:21:32,631 --> 03:21:37,430
Switzerland we have London we have

4027
03:21:35,240 --> 03:21:40,641
Hungary here we have New York in the US

4028
03:21:37,431 --> 03:21:43,400
and we have Sydney as well so that's

4029
03:21:40,641 --> 03:21:48,681
pretty much thank you thank you very

4030
03:21:43,400 --> 03:21:50,750
much thank you hello my name is Sergey

4031
03:21:48,681 --> 03:21:52,431
gorbunov I work on cryptography I'll

4032
03:21:50,750 --> 03:21:54,650
grant and I'm a faculty at University of

4033
03:21:52,431 --> 03:21:57,200
Waterloo so today I just want to tell

4034
03:21:54,650 --> 03:22:00,170
you briefly about a BLS signature scheme

4035
03:21:57,200 --> 03:22:02,030
and our effort to standardize it so BLS

4036
03:22:00,170 --> 03:22:05,450
signature scheme was introduced by

4037
03:22:02,030 --> 03:22:07,460
Bonnie Linn and such him almost 15 years

4038
03:22:05,450 --> 03:22:10,490
ago it's a signature scheme that uses

4039
03:22:07,460 --> 03:22:11,789
pairings and it has very nice efficiency

4040
03:22:10,490 --> 03:22:14,039
properties and in

4041
03:22:11,790 --> 03:22:16,260
aggregation over the signatures and the

4042
03:22:14,040 --> 03:22:18,150
public keys so we think there is a big

4043
03:22:16,260 --> 03:22:20,280
need for the signature schema in

4044
03:22:18,150 --> 03:22:22,380
particular to help to optimize some of

4045
03:22:20,280 --> 03:22:25,320
the classical internet protocols such as

4046
03:22:22,380 --> 03:22:27,869
BGP as well as newer internet systems

4047
03:22:25,320 --> 03:22:30,420
such as your blockchain so together with

4048
03:22:27,870 --> 03:22:32,220
Dan Vinay and Ho Tech we who initiated

4049
03:22:30,420 --> 03:22:34,590
an effort trying to standardize this

4050
03:22:32,220 --> 03:22:36,449
signature scheme there aren't

4051
03:22:34,590 --> 03:22:38,220
particularly a few trade-offs that one

4052
03:22:36,450 --> 03:22:40,410
needs to make when instantiate in it and

4053
03:22:38,220 --> 03:22:42,869
we think it's important to make them

4054
03:22:40,410 --> 03:22:45,450
clear for developers so currently we're

4055
03:22:42,870 --> 03:22:47,880
planning to submit a standard to the CF

4056
03:22:45,450 --> 03:22:49,590
RG working group if you're interested in

4057
03:22:47,880 --> 03:22:52,020
working on this or contributing or

4058
03:22:49,590 --> 03:22:53,880
helping in any way please let me know or

4059
03:22:52,021 --> 03:22:56,900
send me an email we'll be happy to talk

4060
03:22:53,880 --> 03:23:02,699
with you about it thank you

4061
03:22:56,900 --> 03:23:05,520
pretty good hi my name is Jeremiah I'm

4062
03:23:02,700 --> 03:23:07,200
the founder at subspace labs and we are

4063
03:23:05,521 --> 03:23:09,120
building a decentralized database

4064
03:23:07,200 --> 03:23:11,550
protocol and we're trying to hire a

4065
03:23:09,120 --> 03:23:13,610
real-world cryptographer so we are

4066
03:23:11,550 --> 03:23:16,859
basically building a decentralized

4067
03:23:13,610 --> 03:23:18,570
database as a service that would be

4068
03:23:16,860 --> 03:23:20,910
equivalent to something like Google

4069
03:23:18,570 --> 03:23:25,140
firebase but has a decentralized

4070
03:23:20,910 --> 03:23:27,990
back-end so the point is to make it easy

4071
03:23:25,140 --> 03:23:30,990
for developers to build applications

4072
03:23:27,990 --> 03:23:33,030
where users can own their data so we

4073
03:23:30,990 --> 03:23:35,789
recently received a National Science

4074
03:23:33,030 --> 03:23:37,830
Foundation grant and the funding is

4075
03:23:35,790 --> 03:23:40,470
going towards hiring a cryptographer

4076
03:23:37,830 --> 03:23:43,500
full-time so if you have an interest in

4077
03:23:40,470 --> 03:23:46,590
proofs of space and time distributed

4078
03:23:43,500 --> 03:23:47,340
hash tables distributed databases and of

4079
03:23:46,590 --> 03:23:50,280
course blockchains

4080
03:23:47,340 --> 03:23:51,750
please come and talk to me again my name

4081
03:23:50,280 --> 03:23:55,200
is Jeremiah with subspace labs

4082
03:23:51,750 --> 03:23:58,500
our website is subspace network thank

4083
03:23:55,200 --> 03:24:02,400
you thank you thank you very much right

4084
03:23:58,500 --> 03:24:05,160
now Paco schedule hi my name is Jonas

4085
03:24:02,400 --> 03:24:07,680
Akers I'm here hoping someone here likes

4086
03:24:05,160 --> 03:24:10,650
to break things I work on a open source

4087
03:24:07,680 --> 03:24:12,600
project called easy safe easy safe is a

4088
03:24:10,650 --> 03:24:14,550
distributed encrypted file system that

4089
03:24:12,600 --> 03:24:16,950
you can mount from anywhere with zero

4090
03:24:14,550 --> 03:24:18,480
configuration just from a passphrase so

4091
03:24:16,950 --> 03:24:20,670
you type a passphrase on your work

4092
03:24:18,480 --> 03:24:22,830
freight workplace computer you've got an

4093
03:24:20,670 --> 03:24:24,600
encrypted file system you want that your

4094
03:24:22,830 --> 03:24:25,409
house you type in the same passphrase

4095
03:24:24,600 --> 03:24:26,909
you

4096
03:24:25,409 --> 03:24:28,409
don't need any IP addresses or anything

4097
03:24:26,909 --> 03:24:29,969
the data is only stored on your

4098
03:24:28,409 --> 03:24:32,249
computers but they find each other

4099
03:24:29,969 --> 03:24:34,560
anyway if you think you can break it go

4100
03:24:32,249 --> 03:24:36,499
to EZ safety oh and there's a full

4101
03:24:34,560 --> 03:24:38,669
write-up of all the cryptography and

4102
03:24:36,499 --> 03:24:40,049
relevant information and I'm hoping

4103
03:24:38,669 --> 03:24:42,329
maybe somebody could take a look at the

4104
03:24:40,049 --> 03:24:44,359
that information and try and attack

4105
03:24:42,329 --> 03:24:48,708
anyway thank you very much

4106
03:24:44,359 --> 03:24:53,520
excellent we are really motoring now so

4107
03:24:48,709 --> 03:24:55,799
hello I'm Robert Lee and I'm from crypto

4108
03:24:53,520 --> 03:24:58,829
Quantic we're a security company based

4109
03:24:55,799 --> 03:25:01,109
in London in the UK we've developed the

4110
03:24:58,829 --> 03:25:05,069
world's first quantum driven security

4111
03:25:01,109 --> 03:25:07,919
chip in silicon and it provides a large

4112
03:25:05,069 --> 03:25:09,810
unique and uncountable key space and

4113
03:25:07,919 --> 03:25:11,549
with this technology we're currently

4114
03:25:09,810 --> 03:25:14,249
trying to build security solutions and

4115
03:25:11,549 --> 03:25:16,939
products with which to security IOT and

4116
03:25:14,249 --> 03:25:19,199
I'm here to announce that we're hiring

4117
03:25:16,939 --> 03:25:21,390
so we're looking for people to join us

4118
03:25:19,199 --> 03:25:22,979
cryptographers developers and we're also

4119
03:25:21,390 --> 03:25:25,858
looking for a few more chip designers if

4120
03:25:22,979 --> 03:25:29,399
you know any so I'm going to be I'm

4121
03:25:25,859 --> 03:25:32,249
going to tweet the job descriptions on

4122
03:25:29,399 --> 03:25:34,439
the hashtag they're also up on our

4123
03:25:32,249 --> 03:25:36,329
website too cryptic wanti calm so if

4124
03:25:34,439 --> 03:25:40,140
you're interested in what we might be

4125
03:25:36,329 --> 03:25:41,399
doing or working for us just come and

4126
03:25:40,140 --> 03:25:41,819
find me I'll be around for the rest of

4127
03:25:41,399 --> 03:25:50,339
the conference

4128
03:25:41,819 --> 03:25:51,929
thank you thank you much and hi my name

4129
03:25:50,339 --> 03:25:54,299
is Scott I work for Paragon initiative

4130
03:25:51,929 --> 03:25:57,569
enterprises so I'm here to talk about

4131
03:25:54,299 --> 03:25:59,459
PHP now this is not a popular language

4132
03:25:57,569 --> 03:26:02,038
at conferences like this but despite

4133
03:25:59,459 --> 03:26:04,169
that according to w3 texts it powers

4134
03:26:02,039 --> 03:26:04,859
about 80% of the detectable web servers

4135
03:26:04,169 --> 03:26:06,929
on the Internet

4136
03:26:04,859 --> 03:26:08,399
and this is a little software written in

4137
03:26:06,929 --> 03:26:10,259
PHP called WordPress that powers

4138
03:26:08,399 --> 03:26:13,349
anywhere between a quarter and a third

4139
03:26:10,259 --> 03:26:15,209
of the Internet and despite these

4140
03:26:13,350 --> 03:26:16,819
statistics it doesn't get a lot of

4141
03:26:15,209 --> 03:26:18,629
review from the cryptographic community

4142
03:26:16,819 --> 03:26:20,609
WordPress has this feature called

4143
03:26:18,629 --> 03:26:21,959
automatic updates where they try to

4144
03:26:20,609 --> 03:26:23,419
release security updates and get them

4145
03:26:21,959 --> 03:26:26,999
applied across the entire ecosystem

4146
03:26:23,419 --> 03:26:28,619
immediately however it's protected from

4147
03:26:26,999 --> 03:26:33,719
the update server by a header called

4148
03:26:28,619 --> 03:26:35,009
content md5 so part of what my company

4149
03:26:33,719 --> 03:26:36,569
does is we work with open source

4150
03:26:35,009 --> 03:26:38,079
software projects to try to make them

4151
03:26:36,569 --> 03:26:39,698
more secure

4152
03:26:38,079 --> 03:26:41,170
we tend to focus on the PHP community

4153
03:26:39,699 --> 03:26:43,390
because that's like the punching bag of

4154
03:26:41,170 --> 03:26:45,760
the InfoSec community and work is

4155
03:26:43,390 --> 03:26:50,010
currently underway to get at 2:55 won

4156
03:26:45,760 --> 03:26:52,300
nine signatures to land in WordPress 5.2

4157
03:26:50,010 --> 03:26:55,300
beyond that effort I want to include

4158
03:26:52,300 --> 03:26:56,769
another initiative to add plugin signing

4159
03:26:55,300 --> 03:26:59,019
which adds another layer of complexity

4160
03:26:56,770 --> 03:27:00,760
however I have an implementation I call

4161
03:26:59,020 --> 03:27:02,979
hurt it stands for hash and shared

4162
03:27:00,760 --> 03:27:05,140
replicated database it's also reference

4163
03:27:02,979 --> 03:27:08,349
to herd immunity which is what automatic

4164
03:27:05,140 --> 03:27:10,840
updates provide for an ecosystem it

4165
03:27:08,350 --> 03:27:12,970
basically uses a local database

4166
03:27:10,840 --> 03:27:15,130
synchronized based on updates to a

4167
03:27:12,970 --> 03:27:17,920
cryptographic ledger it's not a

4168
03:27:15,130 --> 03:27:19,569
blockchain it uses Blake to be to in a

4169
03:27:17,920 --> 03:27:22,720
hashing structure so I call it Blake

4170
03:27:19,569 --> 03:27:24,368
chain so if anybody is interested in

4171
03:27:22,720 --> 03:27:26,409
this kind of open source collaboration

4172
03:27:24,369 --> 03:27:28,779
feel free to find me and tell me your

4173
03:27:26,409 --> 03:27:31,180
feedback look it up on github our

4174
03:27:28,779 --> 03:27:33,459
company's website is Paragon ie comm and

4175
03:27:31,180 --> 03:27:38,109
we are at github comm slash Paragon ie

4176
03:27:33,459 --> 03:27:41,979
thank you thank you very much over to

4177
03:27:38,109 --> 03:27:44,499
you hi everyone my name is Sam this is

4178
03:27:41,979 --> 03:27:46,028
my fourth world crypto three years now

4179
03:27:44,499 --> 03:27:49,329
from when I was on stage presenting our

4180
03:27:46,029 --> 03:27:52,239
formulas of TLS which means they turn

4181
03:27:49,329 --> 03:27:55,060
this TLS swag with a lot of loss of

4182
03:27:52,239 --> 03:27:56,439
sanity basically this is not my first

4183
03:27:55,060 --> 03:27:57,939
year from making the jump from a Kadir

4184
03:27:56,439 --> 03:27:59,439
into the real world I'm currently

4185
03:27:57,939 --> 03:28:01,090
working on building out to startup to

4186
03:27:59,439 --> 03:28:02,619
help train companies to secure their

4187
03:28:01,090 --> 03:28:04,449
infrastructure by providing like an

4188
03:28:02,619 --> 03:28:06,729
unified authentication authorization

4189
03:28:04,449 --> 03:28:08,109
layer if this is something as a company

4190
03:28:06,729 --> 03:28:09,880
you're kind of interested in improving

4191
03:28:08,109 --> 03:28:11,170
working on or you just have some

4192
03:28:09,880 --> 03:28:11,589
experience that you would like to share

4193
03:28:11,170 --> 03:28:13,959
with me

4194
03:28:11,590 --> 03:28:17,380
I'd love to hear from you you can get me

4195
03:28:13,959 --> 03:28:18,640
at sam at quiche ke e thought sh or i'll

4196
03:28:17,380 --> 03:28:20,970
tweet a link as well and you can come

4197
03:28:18,640 --> 03:28:22,720
find me at the conference thanks so much

4198
03:28:20,970 --> 03:28:28,269
thanks very much

4199
03:28:22,720 --> 03:28:30,999
I don't you hi my name is Abu - I -

4200
03:28:28,270 --> 03:28:33,939
Monday I'm a PhD student at Brown

4201
03:28:30,999 --> 03:28:35,979
University and today I want to briefly

4202
03:28:33,939 --> 03:28:39,729
talk to you about what I think is

4203
03:28:35,979 --> 03:28:42,159
exciting new work so cryptography has

4204
03:28:39,729 --> 03:28:45,220
always challenged the limits of what we

4205
03:28:42,159 --> 03:28:47,499
believe is possible with zero knowledge

4206
03:28:45,220 --> 03:28:49,929
rules we can prove that we know

4207
03:28:47,499 --> 03:28:51,511
something without revealing what it is

4208
03:28:49,930 --> 03:28:54,011
that we know

4209
03:28:51,511 --> 03:28:57,221
but what if we want to prove that we

4210
03:28:54,011 --> 03:28:59,320
don't know something that's a

4211
03:28:57,221 --> 03:29:01,391
paradoxical question what if we want to

4212
03:28:59,320 --> 03:29:05,141
prove that we are ignorant of something

4213
03:29:01,391 --> 03:29:08,020
so in recent work we have introduced the

4214
03:29:05,141 --> 03:29:10,711
notion of roofs of ignorance how to

4215
03:29:08,021 --> 03:29:14,070
prove that you don't know something we

4216
03:29:10,711 --> 03:29:16,621
give a formal definition of the same and

4217
03:29:14,070 --> 03:29:20,351
construct proofs of ignorance for

4218
03:29:16,621 --> 03:29:23,561
subclass of languages this is a joint

4219
03:29:20,351 --> 03:29:28,030
work with ya alkali at Microsoft

4220
03:29:23,561 --> 03:29:30,730
Research and MIT and the our manuscript

4221
03:29:28,030 --> 03:29:33,341
is up on ePrint so I want to briefly

4222
03:29:30,730 --> 03:29:37,421
briefly give you some intuition about

4223
03:29:33,341 --> 03:29:40,661
this let's say Alice has a locked box

4224
03:29:37,421 --> 03:29:42,811
and Alice wants to prove to Bob that she

4225
03:29:40,661 --> 03:29:46,030
doesn't know the contents of the box

4226
03:29:42,811 --> 03:29:51,431
right so bob has no reason to believe

4227
03:29:46,030 --> 03:29:53,860
Alice in general but if if Bob knows

4228
03:29:51,431 --> 03:29:57,221
that Charlie gives away locked boxes

4229
03:29:53,860 --> 03:30:00,251
then all alice has to prove is that she

4230
03:29:57,221 --> 03:30:03,311
got her box from Charlie so in some

4231
03:30:00,251 --> 03:30:06,461
sense not knowing something is a proof

4232
03:30:03,311 --> 03:30:08,740
of knowing something else so in context

4233
03:30:06,461 --> 03:30:11,051
of NP languages we want to be able to

4234
03:30:08,740 --> 03:30:16,451
sample an instance and prove that you

4235
03:30:11,051 --> 03:30:18,850
don't know the witness so this is new

4236
03:30:16,451 --> 03:30:25,320
work and the reason I am talking about

4237
03:30:18,851 --> 03:30:25,320
this there we go

4238
03:30:27,340 --> 03:30:32,810
hi my name is hunter fryer I'm the lead

4239
03:30:31,100 --> 03:30:34,159
on Google's cloud key management service

4240
03:30:32,810 --> 03:30:36,229
and I'm not going to talk about that I'm

4241
03:30:34,159 --> 03:30:37,669
going to talk about my passwords because

4242
03:30:36,229 --> 03:30:40,069
I actually have the password generation

4243
03:30:37,669 --> 03:30:42,590
scheme that I like and I want to plug so

4244
03:30:40,069 --> 03:30:44,510
the I think a lot of people are familiar

4245
03:30:42,590 --> 03:30:46,220
with the correct tourist battery staple

4246
03:30:44,510 --> 03:30:48,800
method of just coming up with a list of

4247
03:30:46,220 --> 03:30:50,149
words I think that works great the

4248
03:30:48,800 --> 03:30:52,159
problem with it is that they end up

4249
03:30:50,149 --> 03:30:53,630
being really long like I would sort of

4250
03:30:52,159 --> 03:30:54,618
sometimes have to type my password in

4251
03:30:53,630 --> 03:30:58,579
front of people and people would be like

4252
03:30:54,619 --> 03:30:59,959
Jesus is a really long password so to be

4253
03:30:58,579 --> 03:31:01,640
very pedantic about it like the entropy

4254
03:30:59,959 --> 03:31:04,220
is good but the entropy per character is

4255
03:31:01,640 --> 03:31:06,229
pretty bad there's this really nice word

4256
03:31:04,220 --> 03:31:09,050
list actually that's included in the

4257
03:31:06,229 --> 03:31:11,060
Bitcoin e improvement proposal number 39

4258
03:31:09,050 --> 03:31:14,300
which has this cool property that it's

4259
03:31:11,060 --> 03:31:17,180
24 1024 words that are common English

4260
03:31:14,300 --> 03:31:20,198
words that the first four characters are

4261
03:31:17,180 --> 03:31:22,130
unique among all the words so the

4262
03:31:20,199 --> 03:31:24,229
approach that I've been doing recently

4263
03:31:22,130 --> 03:31:26,089
is just pick five words off the list

4264
03:31:24,229 --> 03:31:27,260
take the first four characters if you

4265
03:31:26,090 --> 03:31:30,409
just stick them together and you

4266
03:31:27,260 --> 03:31:32,840
actually get good you know lower a lower

4267
03:31:30,409 --> 03:31:33,680
bound on the entropy and it works well I

4268
03:31:32,840 --> 03:31:35,689
just

4269
03:31:33,680 --> 03:31:38,270
during the last talk made classy

4270
03:31:35,689 --> 03:31:40,550
passwords calm which is a single page

4271
03:31:38,270 --> 03:31:42,350
HTML file which will generate a bunch of

4272
03:31:40,550 --> 03:31:43,669
these passwords for you if you go there

4273
03:31:42,350 --> 03:31:46,699
right now you'll see an SSL error

4274
03:31:43,669 --> 03:31:49,189
because I just set it up but after a

4275
03:31:46,699 --> 03:31:51,260
little while oh it's working now okay

4276
03:31:49,189 --> 03:31:52,520
cool and you'll see typos and stuff like

4277
03:31:51,260 --> 03:31:54,169
that so it's great so if you don't like

4278
03:31:52,520 --> 03:31:55,970
your passwords or you know somebody who

4279
03:31:54,169 --> 03:31:58,279
really should use better passwords and

4280
03:31:55,970 --> 03:32:01,368
you want to just say here do this please

4281
03:31:58,279 --> 03:32:06,890
consider doing that Thanks thank you

4282
03:32:01,369 --> 03:32:08,899
very much and god hi I'm Cu child from

4283
03:32:06,890 --> 03:32:11,930
Purdue University where I work with my

4284
03:32:08,899 --> 03:32:14,810
PhD advisors nearly and aniket karta

4285
03:32:11,930 --> 03:32:17,180
which i believe is in the audience and I

4286
03:32:14,810 --> 03:32:21,260
cannot quite find him which is a

4287
03:32:17,180 --> 03:32:23,449
textbook definition of SK anonymity so

4288
03:32:21,260 --> 03:32:24,770
in general I'm interested in PUC finding

4289
03:32:23,449 --> 03:32:27,409
and reasoning about software

4290
03:32:24,770 --> 03:32:30,319
implementation and this is my first time

4291
03:32:27,409 --> 03:32:31,970
attending other BC and by other busy I

4292
03:32:30,319 --> 03:32:32,359
mean we're we're crypto not the Rugby

4293
03:32:31,970 --> 03:32:36,319
World Cup

4294
03:32:32,359 --> 03:32:38,010
maybe one day I'll go there so I'm gonna

4295
03:32:36,319 --> 03:32:41,910
take this chance to do

4296
03:32:38,010 --> 03:32:45,300
- shameless self-promotion first one of

4297
03:32:41,910 --> 03:32:47,181
my recent work found that found surfer

4298
03:32:45,300 --> 03:32:51,210
bucks that enable new variance of

4299
03:32:47,181 --> 03:32:53,550
biomarkers low exponent RSA sanction

4300
03:32:51,210 --> 03:32:54,891
forgery which is amazing because it's

4301
03:32:53,550 --> 03:32:57,750
already more than the decade since

4302
03:32:54,891 --> 03:33:00,630
crypto OSX whereby Empire gave his

4303
03:32:57,750 --> 03:33:02,910
original attack anyway if you're

4304
03:33:00,630 --> 03:33:04,920
interested in this place try to go to

4305
03:33:02,910 --> 03:33:07,351
NDS s which I'll present this work and

4306
03:33:04,920 --> 03:33:09,210
if you cannot go to any SS appropriate

4307
03:33:07,351 --> 03:33:12,780
of my papers are already available on my

4308
03:33:09,210 --> 03:33:14,430
homepage and second I'm in the job

4309
03:33:12,780 --> 03:33:17,311
market this year so if you're hiring

4310
03:33:14,431 --> 03:33:24,420
please feel free to ping me and see what

4311
03:33:17,311 --> 03:33:25,740
we can do okay and the next one I feel

4312
03:33:24,420 --> 03:33:26,851
like we're going too fast through these

4313
03:33:25,740 --> 03:33:37,110
so let's just take a minute to think

4314
03:33:26,851 --> 03:33:38,970
about trees okay enough about trees I'm

4315
03:33:37,110 --> 03:33:39,990
cat Phil I work on MLS among other

4316
03:33:38,970 --> 03:33:43,020
things but I'm not here to talk about

4317
03:33:39,990 --> 03:33:45,119
MLS I'm organizing a London crypto day

4318
03:33:43,021 --> 03:33:47,610
which hopefully will have a feel a bit

4319
03:33:45,120 --> 03:33:50,851
like this but will be significantly

4320
03:33:47,610 --> 03:33:52,440
smaller formal announcement to come but

4321
03:33:50,851 --> 03:33:53,610
if you'd like to come oh if you don't

4322
03:33:52,440 --> 03:33:55,590
think you'll be on the mailing list

4323
03:33:53,610 --> 03:33:58,670
come find me it's gonna be on the 7th of

4324
03:33:55,590 --> 03:34:03,210
March it's gonna be in London thank you

4325
03:33:58,670 --> 03:34:04,440
that was super fast so alright I have a

4326
03:34:03,210 --> 03:34:06,869
question for the audience how many

4327
03:34:04,440 --> 03:34:10,050
people here have ever flown on United

4328
03:34:06,870 --> 03:34:11,851
Airlines let me see a show of hands how

4329
03:34:10,050 --> 03:34:15,960
many people of you would say you enjoyed

4330
03:34:11,851 --> 03:34:17,370
the experience yeah

4331
03:34:15,960 --> 03:34:21,359
one person raising their hand that's

4332
03:34:17,370 --> 03:34:24,030
clever yeah so so this is a little talk

4333
03:34:21,360 --> 03:34:25,410
about one small piece of the united

4334
03:34:24,030 --> 03:34:26,851
experience which is when you're crammed

4335
03:34:25,410 --> 03:34:30,300
into the seat and then you ask the

4336
03:34:26,851 --> 03:34:32,820
flight attendant for like some whiskey

4337
03:34:30,300 --> 03:34:34,410
to try to forget the rest of the united

4338
03:34:32,820 --> 03:34:36,330
experience and then they hand you this

4339
03:34:34,410 --> 03:34:39,630
tiny little bottle and say that'll be 10

4340
03:34:36,330 --> 03:34:42,420
bucks please if you are going to be

4341
03:34:39,630 --> 03:34:43,529
flying united this month and you're

4342
03:34:42,420 --> 03:34:45,181
worried about this part of the

4343
03:34:43,530 --> 03:34:47,580
experience then i have a little bit of

4344
03:34:45,181 --> 03:34:49,740
help for you Tanya and I have a bunch of

4345
03:34:47,580 --> 03:34:51,120
these little vouchers which are each

4346
03:34:49,740 --> 03:34:54,590
until the end of the month

4347
03:34:51,120 --> 03:34:58,050
on United Airlines worth one drink and

4348
03:34:54,590 --> 03:35:02,580
it's first-come first-served so I don't

4349
03:34:58,050 --> 03:35:04,858
ask us what they did to you know well

4350
03:35:02,580 --> 03:35:07,050
did to us to make us get these vouchers

4351
03:35:04,859 --> 03:35:09,120
but we got a whole bunch so come to me

4352
03:35:07,050 --> 03:35:12,050
I'm DJ B Tanya long also has some so

4353
03:35:09,120 --> 03:35:12,050
that's it thanks

4354
03:35:14,180 --> 03:35:19,890
that is an offer you cannot refuse go

4355
03:35:17,280 --> 03:35:21,120
yeah you'd want to buy you in 90 tickets

4356
03:35:19,890 --> 03:35:27,358
now just for that don't you

4357
03:35:21,120 --> 03:35:29,850
okay hi I'm Gary bobbin I am the

4358
03:35:27,359 --> 03:35:32,280
technology lead for key transparency at

4359
03:35:29,850 --> 03:35:35,130
Google key transparency provides

4360
03:35:32,280 --> 03:35:36,600
authenticated key discovery for

4361
03:35:35,130 --> 03:35:39,710
end-to-end encrypted applications

4362
03:35:36,600 --> 03:35:42,300
including google duo launching sometime

4363
03:35:39,710 --> 03:35:44,310
key transparency and its underlying

4364
03:35:42,300 --> 03:35:46,800
trillion technology are all open source

4365
03:35:44,310 --> 03:35:48,960
and easily composable into a variety of

4366
03:35:46,800 --> 03:35:51,119
authenticated data structures including

4367
03:35:48,960 --> 03:35:53,490
certificate transparency binary

4368
03:35:51,120 --> 03:35:55,500
transparency gossip and a number of

4369
03:35:53,490 --> 03:36:01,380
other things you can go find them all on

4370
03:35:55,500 --> 03:36:05,820
github or key transparency org thank you

4371
03:36:01,380 --> 03:36:07,949
very much and hello I'm Karl

4372
03:36:05,820 --> 03:36:10,470
and I work with chairman in the embassy

4373
03:36:07,950 --> 03:36:13,080
which secure multi-party computation

4374
03:36:10,470 --> 03:36:15,420
platform and these are they I was

4375
03:36:13,080 --> 03:36:17,700
talking with some people and I didn't

4376
03:36:15,420 --> 03:36:20,310
even know if I can reveal that but today

4377
03:36:17,700 --> 03:36:23,100
I got word that I can reveal and

4378
03:36:20,310 --> 03:36:26,580
announce it that we have put together a

4379
03:36:23,100 --> 03:36:30,479
set of documentation for German embassy

4380
03:36:26,580 --> 03:36:36,050
it's available at talks dot shear mind

4381
03:36:30,479 --> 03:36:36,050
that cyber dot e that's all thank you

4382
03:36:36,229 --> 03:36:40,199
don't let the states don't need the

4383
03:36:38,250 --> 03:36:42,600
stage don't leave the stage don't know

4384
03:36:40,200 --> 03:36:46,109
okay lead stage we want to thank Shem I

4385
03:36:42,600 --> 03:36:47,490
did all the other participant least of

4386
03:36:46,109 --> 03:36:48,780
actually sponsored to cut the conference

4387
03:36:47,490 --> 03:36:50,970
has been a number up here already to

4388
03:36:48,780 --> 03:36:52,560
have our grounded a ID quantity I blah

4389
03:36:50,970 --> 03:36:54,330
blah those who companies spots in the

4390
03:36:52,560 --> 03:36:57,560
conference I thank you to cybernetico

4391
03:36:54,330 --> 03:36:57,560
and all the other sponsors thank you

4392
03:36:58,551 --> 03:37:04,109
and if you are working for a company

4393
03:37:00,931 --> 03:37:09,811
come up to see me give me your money for

4394
03:37:04,110 --> 03:37:11,521
next year right hello my name is boto

4395
03:37:09,811 --> 03:37:14,541
static and you might know me from my

4396
03:37:11,521 --> 03:37:18,811
talk on cryptographic library counting

4397
03:37:14,541 --> 03:37:20,580
yeah I was advertised another open

4398
03:37:18,811 --> 03:37:22,711
source project that I've been working on

4399
03:37:20,580 --> 03:37:26,041
it's called small bird and it's about

4400
03:37:22,711 --> 03:37:27,721
backup of key so I guess this audience

4401
03:37:26,041 --> 03:37:30,689
has lots of keys a lot of secret keys

4402
03:37:27,721 --> 03:37:32,869
maybe Bitcoin keys and you probably want

4403
03:37:30,690 --> 03:37:34,891
or you do backup them properly but

4404
03:37:32,870 --> 03:37:36,931
because you know how to do this but I

4405
03:37:34,891 --> 03:37:38,279
think majority of people out there who

4406
03:37:36,931 --> 03:37:40,860
also have some maybe some secret keys

4407
03:37:38,280 --> 03:37:44,011
Bitcoin keys they don't know how to do

4408
03:37:40,860 --> 03:37:46,200
it so I fall board system is trying to

4409
03:37:44,011 --> 03:37:49,740
address this issue and it's on github

4410
03:37:46,200 --> 03:37:52,141
it's not ready application it's kind of

4411
03:37:49,740 --> 03:37:54,360
based libraries and it's kind of work in

4412
03:37:52,141 --> 03:37:56,791
progress but since it's open source I

4413
03:37:54,360 --> 03:37:58,830
would love to get some collaborations

4414
03:37:56,791 --> 03:38:01,801
that or criticism or whatever feedback

4415
03:37:58,830 --> 03:38:04,051
so it's on github slash Google slash

4416
03:38:01,801 --> 03:38:06,510
fall birth and spawn board for the

4417
03:38:04,051 --> 03:38:08,881
global seed vault that actually has also

4418
03:38:06,511 --> 03:38:12,450
long term backup of off of our

4419
03:38:08,881 --> 03:38:12,751
civilizations thank you very much thank

4420
03:38:12,450 --> 03:38:17,311
you

4421
03:38:12,751 --> 03:38:19,110
ah Nadia hello my name is Nadia

4422
03:38:17,311 --> 03:38:21,270
Henninger I like to break cryptography I

4423
03:38:19,110 --> 03:38:23,910
wanted to share a little bit of some of

4424
03:38:21,271 --> 03:38:27,030
that joy with you so some of you might

4425
03:38:23,910 --> 03:38:29,761
know that the DSA signature scheme you

4426
03:38:27,030 --> 03:38:32,011
see and also VCDs a are randomized and

4427
03:38:29,761 --> 03:38:39,360
it's very important to generate the

4428
03:38:32,011 --> 03:38:41,370
random values carefully and so in recent

4429
03:38:39,360 --> 03:38:43,291
work that is now on a print Y walking

4430
03:38:41,370 --> 03:38:46,351
brightener and I went and downloaded a

4431
03:38:43,291 --> 03:38:48,391
bunch of crypto currency block chains we

4432
03:38:46,351 --> 03:38:50,521
downloaded all of the signatures and

4433
03:38:48,391 --> 03:38:52,350
then we ran an attack which actually I

4434
03:38:50,521 --> 03:38:57,061
guess is partially due to Nigel's smart

4435
03:38:52,351 --> 03:38:59,011
here we basically use the lol algorithm

4436
03:38:57,061 --> 03:39:00,601
vlados basis reduction we ran it on all

4437
03:38:59,011 --> 03:39:02,070
of the signatures in all of the block

4438
03:39:00,601 --> 03:39:03,660
chains that we downloaded and we

4439
03:39:02,070 --> 03:39:05,461
computed a bunch of private private keys

4440
03:39:03,660 --> 03:39:06,811
it turns out that there's a bunch of

4441
03:39:05,461 --> 03:39:09,679
vulnerabilities

4442
03:39:06,811 --> 03:39:11,210
fun things like memory safety errors we

4443
03:39:09,680 --> 03:39:13,939
an attacker who had a memory safety

4444
03:39:11,210 --> 03:39:15,948
error in their nods generation we also

4445
03:39:13,939 --> 03:39:17,180
found people who had used the wrong hash

4446
03:39:15,949 --> 03:39:19,250
functions to generate their nonsense

4447
03:39:17,180 --> 03:39:21,260
things like that so if you if this kind

4448
03:39:19,250 --> 03:39:25,359
of thing is fun to you papers on ePrint

4449
03:39:21,260 --> 03:39:29,649
thanks a lot thank you

4450
03:39:25,359 --> 03:39:32,149
and oops not reset

4451
03:39:29,649 --> 03:39:35,180
hello my name is Jeff Burgess I work at

4452
03:39:32,149 --> 03:39:38,599
the web 3.0 foundation nothing to do

4453
03:39:35,180 --> 03:39:41,930
with w3c so we do various things and

4454
03:39:38,600 --> 03:39:44,989
we're hiring but the the thing I wanted

4455
03:39:41,930 --> 03:39:48,050
to say is we were organizing a sort of a

4456
03:39:44,989 --> 03:39:51,170
discussion on around meeting around mix

4457
03:39:48,050 --> 03:39:55,550
networking at the end of the month sort

4458
03:39:51,170 --> 03:39:56,810
of in proximity to FOSDEM in in Brussels

4459
03:39:55,550 --> 03:40:00,979
so if you're interested in mix

4460
03:39:56,810 --> 03:40:03,050
networking come chat with me brilliant

4461
03:40:00,979 --> 03:40:07,670
yeah a minute we've got three people

4462
03:40:03,050 --> 03:40:12,470
left we've got about 15 minutes now she

4463
03:40:07,670 --> 03:40:14,689
got five minutes each right okay well my

4464
03:40:12,470 --> 03:40:17,869
name is Armando fuss I'm working for

4465
03:40:14,689 --> 03:40:20,630
traveler right now I won't want try to

4466
03:40:17,870 --> 03:40:22,910
imagine who this standardization effort

4467
03:40:20,630 --> 03:40:24,528
about hashing to curve so we know that

4468
03:40:22,910 --> 03:40:27,890
many protocols are were too mad

4469
03:40:24,529 --> 03:40:30,770
arbitrarily strings to a elliptical

4470
03:40:27,890 --> 03:40:33,680
points so there's a lot of my pins that

4471
03:40:30,770 --> 03:40:37,660
are already published but not of then

4472
03:40:33,680 --> 03:40:41,529
I'll have like whether the proper is

4473
03:40:37,660 --> 03:40:45,109
mapping to use to this curves so we're

4474
03:40:41,529 --> 03:40:48,140
trying to do come back with what are the

4475
03:40:45,109 --> 03:40:50,270
better algorithms and we're happy to

4476
03:40:48,140 --> 03:40:53,989
receive input as hit but from the

4477
03:40:50,270 --> 03:40:58,550
community so I think it's much thanks

4478
03:40:53,989 --> 03:40:59,930
very much and God hi everybody my name

4479
03:40:58,550 --> 03:41:02,119
is Paul Grubbs I'm a fourth year PhD

4480
03:40:59,930 --> 03:41:03,500
student at Cornell Tech and I'd like to

4481
03:41:02,120 --> 03:41:05,420
take the opportunity to announce some

4482
03:41:03,500 --> 03:41:08,090
new results that just went up on ePrint

4483
03:41:05,420 --> 03:41:10,130
this is joint work with my co-authors

4484
03:41:08,090 --> 03:41:12,380
Marie Sarah lush are each a briefs man

4485
03:41:10,130 --> 03:41:15,229
oh and came Patterson and the subject of

4486
03:41:12,380 --> 03:41:16,970
this work is encrypted data bases so

4487
03:41:15,229 --> 03:41:18,410
encrypted database is basically are

4488
03:41:16,970 --> 03:41:20,470
useful if you want to outsource some

4489
03:41:18,410 --> 03:41:22,580
data to an untrusted server but still

4490
03:41:20,470 --> 03:41:23,240
maintain the ability to do some queries

4491
03:41:22,580 --> 03:41:26,900
and fetch

4492
03:41:23,240 --> 03:41:28,971
data and most efficient or all we know

4493
03:41:26,900 --> 03:41:31,130
and efficient encrypted database schemes

4494
03:41:28,971 --> 03:41:32,869
leaked some information about the the

4495
03:41:31,130 --> 03:41:35,630
underlying data and the queries that

4496
03:41:32,870 --> 03:41:37,880
you're making to make things more

4497
03:41:35,630 --> 03:41:39,949
efficient and in the academic community

4498
03:41:37,880 --> 03:41:41,089
a question that we've been asking in the

4499
03:41:39,950 --> 03:41:43,641
last few years is kind of what the

4500
03:41:41,090 --> 03:41:45,830
practical impact of this leakage is and

4501
03:41:43,641 --> 03:41:47,270
there as max kind of alluded to in his

4502
03:41:45,830 --> 03:41:49,910
talk earlier there have been some

4503
03:41:47,271 --> 03:41:53,120
attacks that target specific leakages

4504
03:41:49,910 --> 03:41:55,250
but a kind of understanding of what this

4505
03:41:53,120 --> 03:41:56,721
leakage is and what it can be used for

4506
03:41:55,250 --> 03:42:00,771
for different kinds of query classes as

4507
03:41:56,721 --> 03:42:02,930
thus far eluded researchers and in this

4508
03:42:00,771 --> 03:42:04,910
paper we start with the basic

4509
03:42:02,931 --> 03:42:06,471
observation that access pattern leakage

4510
03:42:04,910 --> 03:42:07,760
which is leaked by all efficient

4511
03:42:06,471 --> 03:42:08,721
encrypted database schemes can be

4512
03:42:07,760 --> 03:42:10,340
thought of as a kind of binary

4513
03:42:08,721 --> 03:42:12,561
classification of the elements of the

4514
03:42:10,340 --> 03:42:13,880
database and using this observation you

4515
03:42:12,561 --> 03:42:16,550
can start to bring in techniques from

4516
03:42:13,880 --> 03:42:18,820
learning theory like epsilon nets and VC

4517
03:42:16,550 --> 03:42:22,221
dimension to kind of get very

4518
03:42:18,820 --> 03:42:23,330
interesting build very interesting

4519
03:42:22,221 --> 03:42:25,250
theory that also lets you build

4520
03:42:23,330 --> 03:42:27,650
practical attacks against encrypted

4521
03:42:25,250 --> 03:42:29,240
databases so the attacks in this paper

4522
03:42:27,650 --> 03:42:31,699
are really cool and they're also very

4523
03:42:29,240 --> 03:42:32,780
practical require very few queries but

4524
03:42:31,700 --> 03:42:34,580
they're also interesting because they

4525
03:42:32,780 --> 03:42:37,190
kind of suggest a broader approach to

4526
03:42:34,580 --> 03:42:40,340
understanding the security of efficient

4527
03:42:37,190 --> 03:42:43,040
encrypted databases so this is on ePrint

4528
03:42:40,340 --> 03:42:45,080
now if you're interested in machine

4529
03:42:43,040 --> 03:42:47,120
learning learning theory applied

4530
03:42:45,080 --> 03:42:49,670
cryptography encrypted databases or any

4531
03:42:47,120 --> 03:42:52,431
of the intersections of those it's 2019

4532
03:42:49,670 --> 03:42:54,760
slash zero one one so I urge you to

4533
03:42:52,431 --> 03:42:54,760
check it out

4534
03:42:56,789 --> 03:43:01,749
just to drag the time out so you can't

4535
03:42:59,259 --> 03:43:04,419
get a speech right um it's a very

4536
03:43:01,749 --> 03:43:06,339
popular this is kind of amazing there's

4537
03:43:04,419 --> 03:43:08,439
so many people here if you put can you

4538
03:43:06,339 --> 03:43:10,239
put your hand up if you have an open job

4539
03:43:08,439 --> 03:43:14,140
at the moment that you're trying to

4540
03:43:10,239 --> 03:43:15,939
recruit for right so if you're a

4541
03:43:14,140 --> 03:43:18,729
youngster look how many jobs there are

4542
03:43:15,939 --> 03:43:26,379
it's amazing yeah so you are in you're

4543
03:43:18,729 --> 03:43:28,208
in a boom time so over to you hi I'm

4544
03:43:26,379 --> 03:43:30,520
Denise I'm a PhD student at the

4545
03:43:28,209 --> 03:43:32,049
University of Athens I want to briefly

4546
03:43:30,520 --> 03:43:34,959
announce on your result that we have

4547
03:43:32,049 --> 03:43:36,819
with my coffers my advisor aguilas KS

4548
03:43:34,959 --> 03:43:39,819
was here in the audience and Peter gaggy

4549
03:43:36,819 --> 03:43:42,310
from IO HK we've been exploring the

4550
03:43:39,819 --> 03:43:44,799
question of interoperability between

4551
03:43:42,310 --> 03:43:47,049
blockchains communicating information

4552
03:43:44,799 --> 03:43:50,529
from one block scene to another in a

4553
03:43:47,049 --> 03:43:51,640
decentralized way I know many many of

4554
03:43:50,529 --> 03:43:53,199
you may be interested in this question

4555
03:43:51,640 --> 03:43:54,788
or are exploring it from a different

4556
03:43:53,199 --> 03:43:57,789
point of view I just want to allude to

4557
03:43:54,789 --> 03:44:00,699
one specific part of our work which is

4558
03:43:57,789 --> 03:44:03,009
that we give a formal definition of what

4559
03:44:00,699 --> 03:44:06,939
it means for a sidechain protocol to be

4560
03:44:03,009 --> 03:44:08,859
secure this is work that just went up on

4561
03:44:06,939 --> 03:44:11,469
a print so I invite you to go ahead and

4562
03:44:08,859 --> 03:44:14,469
check it out and read it the title is

4563
03:44:11,469 --> 03:44:17,049
called proof of stake sidechains so you

4564
03:44:14,469 --> 03:44:19,719
can google that and if you're in the

4565
03:44:17,049 --> 03:44:21,399
oakland conference I'll be happy to have

4566
03:44:19,719 --> 03:44:25,060
you also in the presentation of that

4567
03:44:21,399 --> 03:44:30,099
paper there thank you oh thank you and

4568
03:44:25,060 --> 03:44:33,189
over to you hi I'm Kip on Radboud

4569
03:44:30,100 --> 03:44:35,949
University I'd PhD student there like

4570
03:44:33,189 --> 03:44:38,199
every year so organizing so we here here

4571
03:44:35,949 --> 03:44:40,930
are real or crypto so every year we

4572
03:44:38,199 --> 03:44:43,839
organizing a summer school on real-world

4573
03:44:40,930 --> 03:44:45,939
crypto on privacy so if you feel like

4574
03:44:43,839 --> 03:44:47,799
sending your students or spending nice

4575
03:44:45,939 --> 03:44:49,959
week in Croatia feel free to come it

4576
03:44:47,799 --> 03:44:54,459
will be from the 11th of June to the

4577
03:44:49,959 --> 03:44:56,649
15th I think that was the shortest talk

4578
03:44:54,459 --> 03:45:02,709
so far can you beat the surest talk so

4579
03:44:56,649 --> 03:45:04,810
far good afternoon or good morning I

4580
03:45:02,709 --> 03:45:06,909
don't know afternoon my name is Tyler

4581
03:45:04,810 --> 03:45:09,009
fandom alva I work for Mozilla in the

4582
03:45:06,909 --> 03:45:10,570
security engineering team I specifically

4583
03:45:09,009 --> 03:45:11,950
work on crypto engine

4584
03:45:10,570 --> 03:45:13,869
I've just been told that I should

4585
03:45:11,950 --> 03:45:15,820
announce that we have an open position

4586
03:45:13,870 --> 03:45:18,010
currently for a cryptography engineer

4587
03:45:15,820 --> 03:45:19,750
and we'll also be looking for someone in

4588
03:45:18,010 --> 03:45:21,370
the next six months or so so if you're

4589
03:45:19,750 --> 03:45:30,610
interested please come and talk to me

4590
03:45:21,370 --> 03:45:35,110
thank you a fall you head off for lunch

4591
03:45:30,610 --> 03:45:36,460
Brian wants to say something so I'm

4592
03:45:35,110 --> 03:45:38,650
chairing for the next session we're

4593
03:45:36,460 --> 03:45:40,539
gonna start at 2:10 so you guys had a

4594
03:45:38,650 --> 03:45:42,039
little bit extra time for lunch and with

4595
03:45:40,540 --> 03:45:43,510
the speakers in the next session please

4596
03:45:42,040 --> 03:45:47,560
come up and meet me here right now when

4597
03:45:43,510 --> 03:45:49,060
we break thanks and enjoy your lunch you

4598
03:45:47,560 --> 03:45:50,350
remember there's an extra room over

4599
03:45:49,060 --> 03:45:51,789
there if you want to sit down and do

4600
03:45:50,350 --> 03:45:53,800
some of stuff and a big round of

4601
03:45:51,790 --> 03:45:55,030
applause for everyone who gave up a bit

4602
03:45:53,800 --> 03:46:00,128
of time to give you a talk thank you

4603
03:45:55,030 --> 03:46:00,129
[Applause]

