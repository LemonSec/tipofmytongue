1
00:12:47,220 --> 00:12:50,970
we'll start in one minute

2
00:13:38,110 --> 00:13:42,970
okay let's get started come on in

3
00:13:57,850 --> 00:14:05,520
all right take your seats come on in

4
00:14:01,630 --> 00:14:05,520
everybody lunch is over

5
00:14:06,480 --> 00:14:10,170
yes I'm stalling for time

6
00:14:17,970 --> 00:14:22,470
all right so this is the start of the 2

7
00:14:20,560 --> 00:14:25,329
p.m. session on cryptographic

8
00:14:22,470 --> 00:14:26,770
standardization i'm brian LaMacchia I'm

9
00:14:25,330 --> 00:14:29,020
one of the steering committee members I

10
00:14:26,770 --> 00:14:30,939
do have a little bit of business from

11
00:14:29,020 --> 00:14:35,199
the last session to take care of first

12
00:14:30,940 --> 00:14:37,920
before we start so um is Brent sundel

13
00:14:35,200 --> 00:14:41,560
who gave one of the lightning talks here

14
00:14:37,920 --> 00:14:42,790
Brent Brent's the gentleman who got up

15
00:14:41,560 --> 00:14:45,750
and admitted that it was three days

16
00:14:42,790 --> 00:14:49,899
since his last used of blockchain

17
00:14:45,750 --> 00:14:52,170
does anyone see Brent I have something

18
00:14:49,899 --> 00:14:52,170
for you

19
00:14:53,670 --> 00:14:59,349
okay I don't see Brent anywhere so I

20
00:14:56,170 --> 00:15:00,969
will award this to Brent and hopefully

21
00:14:59,350 --> 00:15:03,700
he'll come find me later because he

22
00:15:00,970 --> 00:15:06,520
doesn't know this is coming okay so at

23
00:15:03,700 --> 00:15:10,060
Asia crypt this year during the rump

24
00:15:06,520 --> 00:15:12,189
session talk there were some prizes that

25
00:15:10,060 --> 00:15:16,180
were donated to the rump session

26
00:15:12,190 --> 00:15:22,470
committee by parties unknown they were

27
00:15:16,180 --> 00:15:22,469
sets of cards cards against cryptography

28
00:15:22,500 --> 00:15:28,120
now the sources for these are on github

29
00:15:26,560 --> 00:15:31,000
and I took the sources for these and I

30
00:15:28,120 --> 00:15:33,700
made some sets for my team and I brought

31
00:15:31,000 --> 00:15:35,830
a couple extra decks with me so an

32
00:15:33,700 --> 00:15:38,589
informal committee of the steering

33
00:15:35,830 --> 00:15:41,500
committee for RWC decided that Brent had

34
00:15:38,589 --> 00:15:42,940
the best lightning talk no one knew that

35
00:15:41,500 --> 00:15:44,200
there were but I think we can all agree

36
00:15:42,940 --> 00:15:44,630
that his talk was

37
00:15:44,200 --> 00:15:47,759
[Applause]

38
00:15:44,630 --> 00:15:47,759
[Music]

39
00:15:48,549 --> 00:15:53,809
so he is hereby awarded in a you know as

40
00:15:52,220 --> 00:15:55,609
close to official as any of these can be

41
00:15:53,809 --> 00:15:57,379
an official set of cards against

42
00:15:55,609 --> 00:15:58,939
cryptography and maybe you can get him

43
00:15:57,379 --> 00:16:00,199
to play a game with you later so I have

44
00:15:58,939 --> 00:16:01,488
that for Brent when he comes find me

45
00:16:00,199 --> 00:16:03,410
he's on his way

46
00:16:01,489 --> 00:16:05,689
excellent well if he gets here before I

47
00:16:03,410 --> 00:16:09,769
finished the rest of my intro then we

48
00:16:05,689 --> 00:16:12,759
can call him up I have another deck that

49
00:16:09,769 --> 00:16:16,759
I will be awarding at 4 o'clock today

50
00:16:12,759 --> 00:16:18,559
for another prize and you all can tweet

51
00:16:16,759 --> 00:16:20,059
now and try to guess what that one's

52
00:16:18,559 --> 00:16:23,089
gonna be for but I'm gonna hold that

53
00:16:20,059 --> 00:16:25,339
till 4 o'clock ok so now I'm gonna stall

54
00:16:23,089 --> 00:16:27,979
for time until Brent gets here or until

55
00:16:25,339 --> 00:16:30,109
I run out of time as you all know we

56
00:16:27,979 --> 00:16:33,379
were supposed to get an announcement

57
00:16:30,109 --> 00:16:35,919
from NIST now of round two candidates

58
00:16:33,379 --> 00:16:38,239
for the NIST post quantum competition

59
00:16:35,919 --> 00:16:40,220
let me tell you how that came about and

60
00:16:38,239 --> 00:16:43,689
why that's not going to happen for those

61
00:16:40,220 --> 00:16:46,699
of you who are not in the United States

62
00:16:43,689 --> 00:16:48,439
NIST publish to the mailing list that

63
00:16:46,699 --> 00:16:52,160
they were going to make their round to

64
00:16:48,439 --> 00:16:54,469
announcement sometime in January as soon

65
00:16:52,160 --> 00:16:57,829
as I saw that I contacted Dustin moody

66
00:16:54,470 --> 00:17:00,559
at NIST on behalf of the RWC steering

67
00:16:57,829 --> 00:17:01,998
committee and I said Dustin we would be

68
00:17:00,559 --> 00:17:04,128
honored if you would and we will make

69
00:17:01,999 --> 00:17:05,750
time for you in the schedule if NIST

70
00:17:04,128 --> 00:17:06,529
would like to make its announcement here

71
00:17:05,750 --> 00:17:09,529
at RWC

72
00:17:06,529 --> 00:17:11,240
we can't think of a better place to make

73
00:17:09,529 --> 00:17:14,480
a real-world cryptography announcement

74
00:17:11,240 --> 00:17:16,669
than RWC 2019 they looked at the dates

75
00:17:14,480 --> 00:17:17,990
they came back Dustin conferred and the

76
00:17:16,669 --> 00:17:20,120
rest they said yes we'd love to do that

77
00:17:17,990 --> 00:17:21,980
please can you get us 15 minutes of time

78
00:17:20,119 --> 00:17:23,029
and so we did that and we put that onto

79
00:17:21,980 --> 00:17:25,220
the schedule and that's why it was a

80
00:17:23,029 --> 00:17:27,888
late addition to the schedule and we

81
00:17:25,220 --> 00:17:31,010
were all set to hear today the round two

82
00:17:27,888 --> 00:17:33,019
candidates and then the government

83
00:17:31,010 --> 00:17:36,019
partially shut down now for those of you

84
00:17:33,019 --> 00:17:39,440
who are not US residents or aware of

85
00:17:36,019 --> 00:17:41,059
this the US government gets funded

86
00:17:39,440 --> 00:17:43,279
through a series of appropriation bills

87
00:17:41,059 --> 00:17:45,230
get passed by the house of the Senate

88
00:17:43,279 --> 00:17:46,850
and then signed by the President and

89
00:17:45,230 --> 00:17:49,190
they appropriate money on a department

90
00:17:46,850 --> 00:17:51,049
by Department basis and there are

91
00:17:49,190 --> 00:17:53,000
currently something like nine major

92
00:17:51,049 --> 00:17:54,168
cabinet departments including the

93
00:17:53,000 --> 00:17:55,669
Department of Agriculture the Department

94
00:17:54,169 --> 00:17:57,289
of Housing and Urban Development the

95
00:17:55,669 --> 00:17:58,940
Department of the Interior the

96
00:17:57,289 --> 00:18:00,520
Environmental Protection Agency and the

97
00:17:58,940 --> 00:18:05,150
Department of Commerce

98
00:18:00,520 --> 00:18:07,030
that are not funded right now NIST is an

99
00:18:05,150 --> 00:18:11,480
agency of the Department of Commerce

100
00:18:07,030 --> 00:18:14,059
when an agency is unfunded employees get

101
00:18:11,480 --> 00:18:17,600
segregated into two camps the essential

102
00:18:14,059 --> 00:18:20,270
and the not essential NIST is apparently

103
00:18:17,600 --> 00:18:22,340
non-essential or at least everybody

104
00:18:20,270 --> 00:18:24,320
dealing with anything that we all care

105
00:18:22,340 --> 00:18:25,850
about is deemed non-essential essential

106
00:18:24,320 --> 00:18:27,559
is you know preservation of life and

107
00:18:25,850 --> 00:18:29,600
property and things like that which is

108
00:18:27,559 --> 00:18:31,370
why the Transportation Security Agency

109
00:18:29,600 --> 00:18:32,899
which is part of DHS Department of

110
00:18:31,370 --> 00:18:35,270
Homeland Security which is also unfunded

111
00:18:32,900 --> 00:18:38,090
they're all working without paychecks so

112
00:18:35,270 --> 00:18:40,220
please when you talk to your TSA people

113
00:18:38,090 --> 00:18:42,500
when you leave thank them for working

114
00:18:40,220 --> 00:18:44,720
unfunded they're having a hard time

115
00:18:42,500 --> 00:18:47,390
right now everybody who is working for

116
00:18:44,720 --> 00:18:48,799
the government or as furloughed if

117
00:18:47,390 --> 00:18:49,880
you're essential you have to work

118
00:18:48,799 --> 00:18:51,110
without a paycheck and you will

119
00:18:49,880 --> 00:18:53,539
hopefully get paid at the end of this

120
00:18:51,110 --> 00:18:55,729
whole thing if you are non-essential you

121
00:18:53,539 --> 00:18:57,710
are furloughed you are not allowed to

122
00:18:55,730 --> 00:19:00,919
work and you are prohibited from doing

123
00:18:57,710 --> 00:19:02,690
any communication or any work you're not

124
00:19:00,919 --> 00:19:05,030
allowed to send mail you're not allowed

125
00:19:02,690 --> 00:19:06,740
to read mail you're not allowed to stand

126
00:19:05,030 --> 00:19:08,360
at a podium until who the round two

127
00:19:06,740 --> 00:19:12,470
candidates are in the NIST post quantum

128
00:19:08,360 --> 00:19:13,939
competition even if we pay for it right

129
00:19:12,470 --> 00:19:15,530
and we actually offered to fly everybody

130
00:19:13,940 --> 00:19:18,080
out there not a problem they're not

131
00:19:15,530 --> 00:19:18,770
allowed to work so NIST really wants to

132
00:19:18,080 --> 00:19:20,809
be here

133
00:19:18,770 --> 00:19:24,230
they're not allowed to be here because

134
00:19:20,809 --> 00:19:27,260
of the current situation in DC so I hope

135
00:19:24,230 --> 00:19:30,020
we all appreciate NISS efforts to date

136
00:19:27,260 --> 00:19:33,230
in the competition and we hope that the

137
00:19:30,020 --> 00:19:34,309
impasse in DC is resolved soon and that

138
00:19:33,230 --> 00:19:36,020
they're able to make their round two

139
00:19:34,309 --> 00:19:37,730
announcements so that's why we don't

140
00:19:36,020 --> 00:19:40,908
have an announcement here not through an

141
00:19:37,730 --> 00:19:42,200
any fault of anybody from NIST and has

142
00:19:40,909 --> 00:19:45,380
to do with some of the other people in

143
00:19:42,200 --> 00:19:52,630
DC and and I'll leave my commentary

144
00:19:45,380 --> 00:19:55,429
there okay ah and here is Brent you sir

145
00:19:52,630 --> 00:19:56,990
you don't know why you're here deal Dan

146
00:19:55,429 --> 00:20:01,340
Bonet told me I had to come to the stage

147
00:19:56,990 --> 00:20:06,990
yes yes yes okay so they know and you

148
00:20:01,340 --> 00:20:10,089
don't you had the best lightning talk

149
00:20:06,990 --> 00:20:10,089
[Applause]

150
00:20:11,830 --> 00:20:17,840
your prize is an efficient well as close

151
00:20:16,220 --> 00:20:21,669
to official can be a set of cards

152
00:20:17,840 --> 00:20:23,459
against cryptography yes congratulations

153
00:20:21,669 --> 00:20:27,580
well done

154
00:20:23,460 --> 00:20:30,289
[Music]

155
00:20:27,580 --> 00:20:32,570
all right so with that out of the way

156
00:20:30,289 --> 00:20:36,320
let's start with the first talk which

157
00:20:32,570 --> 00:20:42,500
will be Jordan White feeling right yes

158
00:20:36,320 --> 00:20:43,939
okay all right I ate into two minutes of

159
00:20:42,500 --> 00:20:48,250
your time so we'll make sure you get

160
00:20:43,940 --> 00:20:48,250
that back and there are mics there

161
00:21:16,960 --> 00:21:22,970
great is okay mockers working great so

162
00:21:21,050 --> 00:21:25,370
thank you for the opportunity for

163
00:21:22,970 --> 00:21:27,230
letting me talk to you today and today I

164
00:21:25,370 --> 00:21:29,360
want to speak briefly a bit about our

165
00:21:27,230 --> 00:21:34,520
work that we've done with DAA with

166
00:21:29,360 --> 00:21:36,560
myself and my co-authors so today I'm

167
00:21:34,520 --> 00:21:38,510
gonna speak a bit about DAA in theory a

168
00:21:36,560 --> 00:21:40,700
bit of the history how it came about to

169
00:21:38,510 --> 00:21:42,530
be and some of the formal analysis work

170
00:21:40,700 --> 00:21:45,070
that we've done on it so already this

171
00:21:42,530 --> 00:21:47,720
year we've heard MLS used Tamron and

172
00:21:45,070 --> 00:21:49,870
also we had the talk by noise Explorer

173
00:21:47,720 --> 00:21:52,010
which was also using probe eros and

174
00:21:49,870 --> 00:21:54,439
moving on from kind of the theory into

175
00:21:52,010 --> 00:21:56,300
the real world we're looking to see how

176
00:21:54,440 --> 00:21:57,770
we could apply it to DAA to something a

177
00:21:56,300 --> 00:22:00,409
bit more concrete that hasn't been done

178
00:21:57,770 --> 00:22:02,210
before so we proposed a vehicle use case

179
00:22:00,410 --> 00:22:03,650
and I'll speak a bit about the

180
00:22:02,210 --> 00:22:05,270
implementation be done and some of the

181
00:22:03,650 --> 00:22:09,860
various lessons and challenges that we

182
00:22:05,270 --> 00:22:11,300
faced so what is directed on a Sat

183
00:22:09,860 --> 00:22:14,000
station or DAA

184
00:22:11,300 --> 00:22:15,680
it's a anonymous digital group signature

185
00:22:14,000 --> 00:22:18,020
scheme that provides previously reserved

186
00:22:15,680 --> 00:22:22,190
event ocation standardized in the

187
00:22:18,020 --> 00:22:24,379
iso/iec to triple zero 8 in 2013 and

188
00:22:22,190 --> 00:22:25,910
this was a scheme that was originally

189
00:22:24,380 --> 00:22:28,910
designed for the trusted platform module

190
00:22:25,910 --> 00:22:31,010
or TPM which is a secure crypto

191
00:22:28,910 --> 00:22:33,590
processor that creates stores and uses

192
00:22:31,010 --> 00:22:35,000
keys and using the hardware we can

193
00:22:33,590 --> 00:22:37,189
actually make Hardware back to Atta

194
00:22:35,000 --> 00:22:40,340
stations to report something about the

195
00:22:37,190 --> 00:22:43,910
status or the state of a host and there

196
00:22:40,340 --> 00:22:45,830
are two ting properties for DAA so user

197
00:22:43,910 --> 00:22:48,590
controlled anonymity and user control

198
00:22:45,830 --> 00:22:51,139
traceability and since DEA is a split

199
00:22:48,590 --> 00:22:52,820
signing scheme the host or the computer

200
00:22:51,140 --> 00:22:54,560
has some kind of choice about whether

201
00:22:52,820 --> 00:23:00,399
they want to remain anonymous or whether

202
00:22:54,560 --> 00:23:03,409
they want to be linkable or not so DEA

203
00:23:00,400 --> 00:23:05,330
was originally developed with the

204
00:23:03,410 --> 00:23:09,170
trusted computing group and first came

205
00:23:05,330 --> 00:23:13,250
to be in 2004 and was introduced in the

206
00:23:09,170 --> 00:23:17,030
actual TPM 1.2 spec back in about 2000

207
00:23:13,250 --> 00:23:19,430
and something and we see this today

208
00:23:17,030 --> 00:23:23,030
still in the ISO triple zero eight two

209
00:23:19,430 --> 00:23:25,639
more specifically mechanism for and as

210
00:23:23,030 --> 00:23:28,099
daa itself has been developed over time

211
00:23:25,639 --> 00:23:30,978
and the TPN has had various updates

212
00:23:28,099 --> 00:23:33,468
regarding its ap API we're actually

213
00:23:30,979 --> 00:23:35,509
seeing TPM 2.0 become released which

214
00:23:33,469 --> 00:23:37,579
also introduced many different daa

215
00:23:35,509 --> 00:23:39,289
schemes but in particular i wanted to

216
00:23:37,579 --> 00:23:41,928
pick a pairing based schemes one based

217
00:23:39,289 --> 00:23:43,789
on elliptic curves and this also made it

218
00:23:41,929 --> 00:23:46,219
into the same iso standard a mechanism

219
00:23:43,789 --> 00:23:49,399
for but since other daa schemes are

220
00:23:46,219 --> 00:23:52,099
introduced new api's came out and the

221
00:23:49,399 --> 00:23:54,349
TPM command calls were made more

222
00:23:52,099 --> 00:23:56,799
flexible and also standardized in yet

223
00:23:54,349 --> 00:23:59,119
another iso standard one one eight nine

224
00:23:56,799 --> 00:24:02,329
the reason for this introduction while

225
00:23:59,119 --> 00:24:05,988
RSA is slow and uses bigger key sizes so

226
00:24:02,329 --> 00:24:08,059
ECC was meant to be or is more efficient

227
00:24:05,989 --> 00:24:10,999
using smaller keys and smaller

228
00:24:08,059 --> 00:24:16,418
signatures and beyond the TPM it's also

229
00:24:10,999 --> 00:24:20,479
been introduced for Fido 2.0 for ECC DAA

230
00:24:16,419 --> 00:24:24,169
and beyond TPM and also these Yubikey

231
00:24:20,479 --> 00:24:27,259
type devices we also see enhancer of CIT

232
00:24:24,169 --> 00:24:29,629
which is also being used in Intel's SGX

233
00:24:27,259 --> 00:24:30,859
technology and in comparison to the

234
00:24:29,629 --> 00:24:36,589
other schemes has improved to

235
00:24:30,859 --> 00:24:37,879
reification capabilities so some of the

236
00:24:36,589 --> 00:24:40,309
vulnerabilities that have occurred over

237
00:24:37,879 --> 00:24:42,978
time have more been in the model and the

238
00:24:40,309 --> 00:24:44,658
security models of DAA but one of the

239
00:24:42,979 --> 00:24:47,629
pieces of work I wanted to speak about

240
00:24:44,659 --> 00:24:51,079
particular today was the analysis done

241
00:24:47,629 --> 00:24:53,839
by a cartel in 2013 where essentially

242
00:24:51,079 --> 00:24:56,329
their analysis of the TPM 2.0 API

243
00:24:53,839 --> 00:25:00,708
actually allowed a static diffie-hellman

244
00:24:56,329 --> 00:25:03,049
Oracle which means over time da can be

245
00:25:00,709 --> 00:25:06,739
exploited to essentially recover the key

246
00:25:03,049 --> 00:25:08,179
after many different signing requests so

247
00:25:06,739 --> 00:25:08,629
obviously this isn't a good thing to

248
00:25:08,179 --> 00:25:10,159
have

249
00:25:08,629 --> 00:25:12,199
so this required a change in the

250
00:25:10,159 --> 00:25:15,109
protocol and also ultimately one or two

251
00:25:12,200 --> 00:25:16,849
commands from the TPM being removed but

252
00:25:15,109 --> 00:25:19,849
more generally a problem beyond the

253
00:25:16,849 --> 00:25:22,279
scope of DAA is obviously the BNP two

254
00:25:19,849 --> 00:25:24,918
five six curve which the da ECC da

255
00:25:22,279 --> 00:25:26,899
scheme relies on and cryptanalysis has

256
00:25:24,919 --> 00:25:29,719
shown this to be weak so we're looking

257
00:25:26,899 --> 00:25:32,508
to see 128 bits of security get reduced

258
00:25:29,719 --> 00:25:34,190
down to 85 bits so the fix to this is

259
00:25:32,509 --> 00:25:36,979
kind of trivial well you move to a large

260
00:25:34,190 --> 00:25:38,890
curve and lucky enough one's already

261
00:25:36,979 --> 00:25:47,050
been specified for DAA using the

262
00:25:38,890 --> 00:25:48,790
p68 curve so briefly daa aseye mentioned

263
00:25:47,050 --> 00:25:50,020
previously is a split signing role where

264
00:25:48,790 --> 00:25:52,240
the secured operations are done by the

265
00:25:50,020 --> 00:25:54,910
TPM and the host can perform more

266
00:25:52,240 --> 00:25:57,070
computationally intensive tasks and

267
00:25:54,910 --> 00:25:59,950
together they form what's known as the

268
00:25:57,070 --> 00:26:02,230
platform and this platform when it comes

269
00:25:59,950 --> 00:26:04,240
out of manufacturing phase typically

270
00:26:02,230 --> 00:26:06,250
comes endorsed with some type of key by

271
00:26:04,240 --> 00:26:10,030
Infineon or potentially the laptop

272
00:26:06,250 --> 00:26:12,220
manufacturer and to start off the da

273
00:26:10,030 --> 00:26:14,980
process the TPM first generates its own

274
00:26:12,220 --> 00:26:16,630
daa key and during this time it speaks

275
00:26:14,980 --> 00:26:20,500
with the issuer who is a trusted third

276
00:26:16,630 --> 00:26:22,510
party and make some kind of non

277
00:26:20,500 --> 00:26:25,210
anonymous attestation to it to prove

278
00:26:22,510 --> 00:26:27,879
that it's a valid TPM in some kind of

279
00:26:25,210 --> 00:26:30,040
state so with that the issuer sees that

280
00:26:27,880 --> 00:26:31,920
can verify that request and generate a

281
00:26:30,040 --> 00:26:33,909
credential to give to the platform and

282
00:26:31,920 --> 00:26:35,770
the platform will receive this

283
00:26:33,910 --> 00:26:41,230
credential which you can use to make

284
00:26:35,770 --> 00:26:42,820
later at a stations and then now using

285
00:26:41,230 --> 00:26:44,680
this credential it can make anonymous at

286
00:26:42,820 --> 00:26:46,659
stations with our verifier who is

287
00:26:44,680 --> 00:26:48,820
another entity so perhaps this is some

288
00:26:46,660 --> 00:26:51,760
form of data collector a bank some kind

289
00:26:48,820 --> 00:26:55,090
of activity tracker when it creates this

290
00:26:51,760 --> 00:26:57,250
message it signs some data with the DA a

291
00:26:55,090 --> 00:26:59,620
key and randomizes the credential each

292
00:26:57,250 --> 00:27:02,140
time meaning that if the user does want

293
00:26:59,620 --> 00:27:04,000
to be anonymous or does want to be

294
00:27:02,140 --> 00:27:09,070
linked then the host is going to

295
00:27:04,000 --> 00:27:11,230
complete control of this and the

296
00:27:09,070 --> 00:27:13,300
verifier then receives that message and

297
00:27:11,230 --> 00:27:15,190
checks with the issue of public key

298
00:27:13,300 --> 00:27:20,770
wherever this did in fact come from a

299
00:27:15,190 --> 00:27:22,210
valid attested TPM so some former now

300
00:27:20,770 --> 00:27:24,760
let's just work we've done using the

301
00:27:22,210 --> 00:27:27,640
tamron prover is we performed a symbolic

302
00:27:24,760 --> 00:27:30,070
security analysis of the ECC DAA scheme

303
00:27:27,640 --> 00:27:32,950
and we actually discovered that if the

304
00:27:30,070 --> 00:27:36,129
insecurity of a single TPM is affected

305
00:27:32,950 --> 00:27:39,310
then the security of all TPMS are

306
00:27:36,130 --> 00:27:42,220
actually compromised so what this means

307
00:27:39,310 --> 00:27:43,899
is that we found a theoretical attack on

308
00:27:42,220 --> 00:27:47,440
the authentication property of the join

309
00:27:43,900 --> 00:27:51,100
protocol and we using our analysis we

310
00:27:47,440 --> 00:27:52,559
identified a fix for this by including

311
00:27:51,100 --> 00:27:54,509
the TPM public and/or

312
00:27:52,559 --> 00:27:59,279
key in the proof of knowledge during a

313
00:27:54,509 --> 00:28:01,110
sign so we do have some work on this we

314
00:27:59,279 --> 00:28:02,999
currently have a paper under review and

315
00:28:01,110 --> 00:28:04,498
we hope to make this available soon but

316
00:28:02,999 --> 00:28:08,129
if anybody wants some more details then

317
00:28:04,499 --> 00:28:11,039
please do come and find me so now moving

318
00:28:08,129 --> 00:28:12,840
on to the implementation portion we

319
00:28:11,039 --> 00:28:14,700
actually looked and tried to consider a

320
00:28:12,840 --> 00:28:17,249
new novel use case where we haven't seen

321
00:28:14,700 --> 00:28:19,529
DA before and in particular we wanted to

322
00:28:17,249 --> 00:28:22,740
target vehicle to anything communication

323
00:28:19,529 --> 00:28:24,749
or veto excommunication and this is what

324
00:28:22,740 --> 00:28:25,950
we will see in future systems where cars

325
00:28:24,749 --> 00:28:28,769
will need to communicate with one

326
00:28:25,950 --> 00:28:30,840
another and some of the properties are

327
00:28:28,769 --> 00:28:32,669
security and privacy properties that are

328
00:28:30,840 --> 00:28:34,379
required in VTX communication are

329
00:28:32,669 --> 00:28:36,330
actually not too dissimilar from that of

330
00:28:34,379 --> 00:28:39,059
DAA so we fought our there was quite a

331
00:28:36,330 --> 00:28:41,158
nice fit there so let's see how how far

332
00:28:39,059 --> 00:28:42,690
we can take this and the current state

333
00:28:41,159 --> 00:28:44,549
of the art proposes choose public key

334
00:28:42,690 --> 00:28:45,629
infrastructure and various other

335
00:28:44,549 --> 00:28:47,129
literature has said that there's

336
00:28:45,629 --> 00:28:52,080
problems in terms of the scalar bitch

337
00:28:47,129 --> 00:28:55,289
invocation in these systems and the TCG

338
00:28:52,080 --> 00:28:57,360
also has announced in 2015 a oughta move

339
00:28:55,289 --> 00:28:59,249
to thin profile so they're very keen and

340
00:28:57,360 --> 00:29:01,320
they're pushing hard in industry to try

341
00:28:59,249 --> 00:29:03,779
and get TPM chips within cars

342
00:29:01,320 --> 00:29:05,460
so again picking the DAA algorithm there

343
00:29:03,779 --> 00:29:07,080
was originally designed and as present

344
00:29:05,460 --> 00:29:10,259
in the TPM seemed like quite a good

345
00:29:07,080 --> 00:29:12,330
choice in a natural fit and what we were

346
00:29:10,259 --> 00:29:14,279
wanting to do is have a shift of trust

347
00:29:12,330 --> 00:29:16,080
from the infrastructure to locally

348
00:29:14,279 --> 00:29:18,749
within vehicles which now have some kind

349
00:29:16,080 --> 00:29:20,460
of trusted hardware inside them so

350
00:29:18,749 --> 00:29:22,649
they'll be responsible to create their

351
00:29:20,460 --> 00:29:25,049
own credentials sign them with the DAA

352
00:29:22,649 --> 00:29:28,158
key such that all other vehicles or

353
00:29:25,049 --> 00:29:30,418
other entities can actually verify this

354
00:29:28,159 --> 00:29:33,360
so this just allows the shift to trust

355
00:29:30,419 --> 00:29:34,590
edge points in cars so hopefully trying

356
00:29:33,360 --> 00:29:39,029
to promote a more decentralized

357
00:29:34,590 --> 00:29:40,590
architecture so these implementation as

358
00:29:39,029 --> 00:29:43,019
I say we wanted to make it as real as

359
00:29:40,590 --> 00:29:46,769
possible so you can see on the picture

360
00:29:43,019 --> 00:29:48,899
there that there is a next com VTC in

361
00:29:46,769 --> 00:29:51,690
vehicle computer and this is actually

362
00:29:48,899 --> 00:29:54,330
computers that are in cars today they're

363
00:29:51,690 --> 00:29:57,539
heavily resource constrained they are

364
00:29:54,330 --> 00:30:00,240
about this one in particular had a Intel

365
00:29:57,539 --> 00:30:01,590
Atom dual-core 32-bit processor so this

366
00:30:00,240 --> 00:30:04,169
is the kind of level we're currently

367
00:30:01,590 --> 00:30:07,230
working with in cars at the moment

368
00:30:04,169 --> 00:30:09,090
obviously didn't have a TPM so we had to

369
00:30:07,230 --> 00:30:11,249
hook it up to a Raspberry Pi and we used

370
00:30:09,090 --> 00:30:13,949
a Infineon 2.0 developer module to do

371
00:30:11,249 --> 00:30:16,289
this the software is fairly standard but

372
00:30:13,950 --> 00:30:17,999
points of interest here are the Apache

373
00:30:16,289 --> 00:30:20,970
molecular crypto library which we found

374
00:30:17,999 --> 00:30:22,679
really useful and also use of the IBM

375
00:30:20,970 --> 00:30:24,720
trusted software stack we took that

376
00:30:22,679 --> 00:30:27,929
mainly because that's the stack that we

377
00:30:24,720 --> 00:30:30,509
knew so to give you an idea of the

378
00:30:27,929 --> 00:30:32,580
implementation we can see that the join

379
00:30:30,509 --> 00:30:34,200
operation takes around eight hundred and

380
00:30:32,580 --> 00:30:36,418
twenty milliseconds which is quite high

381
00:30:34,200 --> 00:30:39,119
but in reality this is an operation

382
00:30:36,419 --> 00:30:40,919
which may only be executed once but also

383
00:30:39,119 --> 00:30:43,168
the pairings operation on this resource

384
00:30:40,919 --> 00:30:45,210
constrained device taking around 200

385
00:30:43,169 --> 00:30:50,730
milliseconds which considering the

386
00:30:45,210 --> 00:30:53,159
capability that's not too bad so what

387
00:30:50,730 --> 00:30:54,989
was some of the challenges well first of

388
00:30:53,159 --> 00:30:56,759
all one of the more interesting ones is

389
00:30:54,989 --> 00:30:58,139
even though we brought all the TPMS at

390
00:30:56,759 --> 00:31:00,239
the same time and they all came out the

391
00:30:58,139 --> 00:31:02,279
same box they actually all had different

392
00:31:00,239 --> 00:31:05,609
versions on them which was quite

393
00:31:02,279 --> 00:31:08,220
interesting so over time as I said as da

394
00:31:05,609 --> 00:31:10,439
a has been developed in the TPM itself

395
00:31:08,220 --> 00:31:12,600
has all sorts of Virata versions of

396
00:31:10,440 --> 00:31:14,460
documentation comes out which means at

397
00:31:12,600 --> 00:31:16,889
various points in different operations

398
00:31:14,460 --> 00:31:19,529
we had to consider different ways of

399
00:31:16,889 --> 00:31:21,449
actually implementing the protocol so in

400
00:31:19,529 --> 00:31:23,429
this case we had a one point one six to

401
00:31:21,450 --> 00:31:25,710
one point one four router which demanded

402
00:31:23,429 --> 00:31:27,509
it be implemented in one way and so on

403
00:31:25,710 --> 00:31:29,299
and so forth so this just made the

404
00:31:27,509 --> 00:31:31,529
codebase much more complex and

405
00:31:29,299 --> 00:31:37,889
potentially much more difficult to

406
00:31:31,529 --> 00:31:39,419
maintain in the future and but on top of

407
00:31:37,889 --> 00:31:40,949
the errata version and all the different

408
00:31:39,419 --> 00:31:43,440
versions you have to be aware of and

409
00:31:40,950 --> 00:31:44,789
where the documentation differs there's

410
00:31:43,440 --> 00:31:47,429
also the complexity in the barrier of

411
00:31:44,789 --> 00:31:50,220
entry to developing TPM so if anybody's

412
00:31:47,429 --> 00:31:53,220
tried this before it's around 1,600

413
00:31:50,220 --> 00:31:58,230
pages of documentation so it's not easy

414
00:31:53,220 --> 00:32:00,600
to get to get into a tool and despite

415
00:31:58,230 --> 00:32:02,999
this also the insecure curves being

416
00:32:00,600 --> 00:32:06,539
announced on crypt analysis so that p25

417
00:32:02,999 --> 00:32:08,489
6curv has been found signal weaker so

418
00:32:06,539 --> 00:32:10,679
the p63 a curve we thought we would try

419
00:32:08,489 --> 00:32:13,109
that even though it's specified in a

420
00:32:10,679 --> 00:32:14,789
standard not a single TPM to this day do

421
00:32:13,109 --> 00:32:17,580
we actually are we aware of that

422
00:32:14,789 --> 00:32:18,119
implements this curve so we really need

423
00:32:17,580 --> 00:32:20,279
to be

424
00:32:18,119 --> 00:32:22,649
talking to each other the community and

425
00:32:20,279 --> 00:32:24,599
also to the TCG to try and update the

426
00:32:22,649 --> 00:32:27,059
standards to suggest some secure curves

427
00:32:24,599 --> 00:32:29,849
that can go in so anybody that is using

428
00:32:27,059 --> 00:32:32,999
this curve is no longer will no longer

429
00:32:29,849 --> 00:32:35,099
be affected and compatible crypto

430
00:32:32,999 --> 00:32:37,679
libraries it's slightly more exotic

431
00:32:35,099 --> 00:32:39,509
so the crypto wasn't widely implemented

432
00:32:37,679 --> 00:32:44,159
and the TPM has fixed points on the

433
00:32:39,509 --> 00:32:45,509
curve and generators I very briefly want

434
00:32:44,159 --> 00:32:47,129
to shamelessly plug one of the projects

435
00:32:45,509 --> 00:32:48,779
that we're working on at the University

436
00:32:47,129 --> 00:32:51,029
of Surrey so we're actually looking at

437
00:32:48,779 --> 00:32:53,939
the next future TPM and in particular

438
00:32:51,029 --> 00:32:55,349
making one that's quantum resistant so

439
00:32:53,939 --> 00:32:57,569
the DAA scheme has been developed

440
00:32:55,349 --> 00:33:00,149
further by some of my colleagues to make

441
00:32:57,569 --> 00:33:02,099
a lattice based daa but on top of this

442
00:33:00,149 --> 00:33:04,319
they're also doing security analysis of

443
00:33:02,099 --> 00:33:08,279
the TPM to make sure that the next TPM

444
00:33:04,319 --> 00:33:09,569
we a release is even better than now so

445
00:33:08,279 --> 00:33:10,949
if you're interested to find out more

446
00:33:09,569 --> 00:33:13,408
then you can visit their website future

447
00:33:10,949 --> 00:33:16,199
TPM zouri you or you can contact them

448
00:33:13,409 --> 00:33:18,149
directly on Twitter so to conclude my

449
00:33:16,199 --> 00:33:20,039
talk TPM for the development is hard

450
00:33:18,149 --> 00:33:21,958
just because of all the documentation

451
00:33:20,039 --> 00:33:23,759
it's not trivial when you need to be

452
00:33:21,959 --> 00:33:26,519
aware of absolutely every single small

453
00:33:23,759 --> 00:33:28,769
change we to consider other use cases

454
00:33:26,519 --> 00:33:30,359
for DAA because to this day we're not

455
00:33:28,769 --> 00:33:32,459
quite sure who's using it so we're

456
00:33:30,359 --> 00:33:35,458
really interested to find out if people

457
00:33:32,459 --> 00:33:38,669
want to use it but also the Fido to

458
00:33:35,459 --> 00:33:40,259
scheme ICI DAA because of some of our

459
00:33:38,669 --> 00:33:42,029
formal symbolic analysis we're also

460
00:33:40,259 --> 00:33:43,979
wanting to revisit that scheme to make

461
00:33:42,029 --> 00:33:47,759
sure that we can make that as good as

462
00:33:43,979 --> 00:33:51,100
possible so thank you if anybody has any

463
00:33:47,759 --> 00:33:54,619
questions or comments thank you

464
00:33:51,100 --> 00:33:54,619
[Applause]

465
00:33:56,700 --> 00:34:04,450
so we've got time for one or two quick

466
00:33:58,960 --> 00:34:07,630
questions if you imagine this being

467
00:34:04,450 --> 00:34:10,480
deployed in a v2v infrastructure about

468
00:34:07,630 --> 00:34:12,609
how pseudonymous and how on linkable do

469
00:34:10,480 --> 00:34:15,339
you think the vehicles would be as a

470
00:34:12,609 --> 00:34:16,989
practical matter so we only have kind of

471
00:34:15,339 --> 00:34:19,389
like a proof-of-concept implementation

472
00:34:16,989 --> 00:34:20,949
now so when vehicles do communicate with

473
00:34:19,389 --> 00:34:24,369
one another that credentials will change

474
00:34:20,949 --> 00:34:26,109
fairly frequently so DEA has been proved

475
00:34:24,369 --> 00:34:27,609
to show to provide these properties but

476
00:34:26,109 --> 00:34:29,290
actually when we have to consider the

477
00:34:27,609 --> 00:34:31,540
cyber physical world as well perhaps

478
00:34:29,290 --> 00:34:33,759
there's more work there where maybe

479
00:34:31,540 --> 00:34:40,418
crypto will help or maybe it word but

480
00:34:33,760 --> 00:34:45,940
we're not sure thank you all right let's

481
00:34:40,418 --> 00:34:48,699
thank the speaker again and our next

482
00:34:45,940 --> 00:34:52,440
speaker is Maarten Albrecht so how hard

483
00:34:48,699 --> 00:34:52,439
is solving lwe anyway

484
00:35:16,010 --> 00:35:21,310
I had the wrong way around goddamnit

485
00:35:34,680 --> 00:35:41,100
I promise you it did work when I tested

486
00:35:37,200 --> 00:35:43,279
it earlier computers nobody understands

487
00:35:41,100 --> 00:35:43,279
them

488
00:35:51,290 --> 00:36:09,950
I'm in the process of doing exactly that

489
00:35:53,120 --> 00:36:12,680
huh all right success okay thanks for

490
00:36:09,950 --> 00:36:14,600
having me and sorry for delay so the

491
00:36:12,680 --> 00:36:16,690
question I'm asking is how hard is it to

492
00:36:14,600 --> 00:36:19,580
solve elder b.e and entry based schemes

493
00:36:16,690 --> 00:36:22,520
this is based on joint work with many

494
00:36:19,580 --> 00:36:24,380
co-authors and also based on the work of

495
00:36:22,520 --> 00:36:28,009
many other people which I had nothing to

496
00:36:24,380 --> 00:36:31,190
do with all right so my opening gambit

497
00:36:28,010 --> 00:36:33,230
is this so these are five schemes that

498
00:36:31,190 --> 00:36:34,760
were submitted to the NIST a post

499
00:36:33,230 --> 00:36:38,750
quantum competition which is not a

500
00:36:34,760 --> 00:36:42,110
competition and so in the columns you

501
00:36:38,750 --> 00:36:46,040
see five different schemes and in the

502
00:36:42,110 --> 00:36:47,960
rows I give you the cost model or the

503
00:36:46,040 --> 00:36:50,360
assumptions how long does it take to

504
00:36:47,960 --> 00:36:52,880
break the underlying heart problem that

505
00:36:50,360 --> 00:36:54,470
these schemes rely on and what you see

506
00:36:52,880 --> 00:36:56,120
in this table are not necessarily the

507
00:36:54,470 --> 00:36:57,799
numbers that designers have in their own

508
00:36:56,120 --> 00:36:59,450
submissions but if you take the

509
00:36:57,800 --> 00:37:02,270
assumption that these designers have and

510
00:36:59,450 --> 00:37:03,980
then you run a standard attack under

511
00:37:02,270 --> 00:37:07,280
these assumptions this is the bit

512
00:37:03,980 --> 00:37:10,220
security that you get right so Kaiba's

513
00:37:07,280 --> 00:37:12,530
assumption lead to an estimate of 180

514
00:37:10,220 --> 00:37:14,180
bits of security for Kaiba and if you

515
00:37:12,530 --> 00:37:17,900
apply the same assumption to Lima

516
00:37:14,180 --> 00:37:20,210
another submission then you get 218 bits

517
00:37:17,900 --> 00:37:21,740
of security whereas if you take the

518
00:37:20,210 --> 00:37:23,870
assumptions that are made in the

519
00:37:21,740 --> 00:37:25,850
streamlined angel prime submission then

520
00:37:23,870 --> 00:37:29,029
you would get something like 500 bits of

521
00:37:25,850 --> 00:37:31,190
security for Kaiba so what this table is

522
00:37:29,030 --> 00:37:32,570
supposed to illustrate so it really

523
00:37:31,190 --> 00:37:34,160
doesn't matter to compare the schemes

524
00:37:32,570 --> 00:37:36,200
against each other I just picked random

525
00:37:34,160 --> 00:37:37,580
parameter choices well really what I

526
00:37:36,200 --> 00:37:39,770
want to highlight here that there's no

527
00:37:37,580 --> 00:37:41,630
agreement in the community about like

528
00:37:39,770 --> 00:37:43,670
how hard is it to solve this underlying

529
00:37:41,630 --> 00:37:45,770
heart problem and that's maybe something

530
00:37:43,670 --> 00:37:48,230
you want to address and I'm going to

531
00:37:45,770 --> 00:37:49,700
kind of like I added the word entry to

532
00:37:48,230 --> 00:37:52,430
the title because I was talking about

533
00:37:49,700 --> 00:37:54,020
some entry schemes and now somewhat

534
00:37:52,430 --> 00:37:56,359
shamelessly I'm going to sweep that back

535
00:37:54,020 --> 00:37:58,070
under the rock and talk about lwe but

536
00:37:56,360 --> 00:37:59,960
the same the logic that I'm discussing

537
00:37:58,070 --> 00:38:02,299
it applies to entry based schemes in the

538
00:37:59,960 --> 00:38:04,849
same way so fundamentally what the

539
00:38:02,299 --> 00:38:06,890
the disagreement about is the difficulty

540
00:38:04,849 --> 00:38:10,069
of solving this problem I give you a

541
00:38:06,890 --> 00:38:12,170
matrix mod Q which is public so I guess

542
00:38:10,069 --> 00:38:14,599
I give it to you how to set that and I

543
00:38:12,170 --> 00:38:16,609
give you a vector C and this vector C is

544
00:38:14,599 --> 00:38:18,890
computed by multiplying this public

545
00:38:16,609 --> 00:38:21,140
matrix a by some secret vector S which

546
00:38:18,890 --> 00:38:23,449
has small coefficients and then I add a

547
00:38:21,140 --> 00:38:25,549
small perturbation vector E and then

548
00:38:23,449 --> 00:38:28,609
given a and C your job as the attacker

549
00:38:25,549 --> 00:38:29,959
is it to find s all right so that's the

550
00:38:28,609 --> 00:38:32,630
hard problem that we're trying to solve

551
00:38:29,959 --> 00:38:35,058
here the learning with eros problem so

552
00:38:32,630 --> 00:38:38,059
straightforward attack on this would be

553
00:38:35,059 --> 00:38:39,799
called the primal attack and we can

554
00:38:38,059 --> 00:38:41,900
arrive at the primary attack by simply

555
00:38:39,799 --> 00:38:43,640
looking at the equation that I've just

556
00:38:41,900 --> 00:38:46,400
this plate but let's look at that over

557
00:38:43,640 --> 00:38:48,799
the integers so all that means is

558
00:38:46,400 --> 00:38:50,599
instead of having implicit modular

559
00:38:48,799 --> 00:38:52,819
reductions modulo Q we write them down

560
00:38:50,599 --> 00:38:54,739
explicitly right so I have to do some

561
00:38:52,819 --> 00:38:57,739
additions in some subtractions of

562
00:38:54,739 --> 00:38:59,689
multiples of Q to push everything in the

563
00:38:57,739 --> 00:39:01,400
right range and then I can write this

564
00:38:59,689 --> 00:39:04,219
down in matrix form and I end up with

565
00:39:01,400 --> 00:39:05,689
this basis B which has Q on the diagonal

566
00:39:04,219 --> 00:39:08,689
and then yet once on the diagonal you

567
00:39:05,689 --> 00:39:10,749
have minus a and C and we know if you

568
00:39:08,689 --> 00:39:13,819
multiply this from the right by the

569
00:39:10,749 --> 00:39:15,589
correctly chosen vector then you get a

570
00:39:13,819 --> 00:39:18,349
short vector that means you get the

571
00:39:15,589 --> 00:39:20,150
concatenation of ES and 1 and as I told

572
00:39:18,349 --> 00:39:22,160
you before the vector C has small

573
00:39:20,150 --> 00:39:24,859
entries the vector S has small entries

574
00:39:22,160 --> 00:39:26,899
and one certainly is a small integer so

575
00:39:24,859 --> 00:39:29,479
what this means in the column span of

576
00:39:26,900 --> 00:39:31,609
this basis if you do only integer linear

577
00:39:29,479 --> 00:39:33,288
combinations there is a very short

578
00:39:31,609 --> 00:39:35,328
vector there right so you can find a

579
00:39:33,289 --> 00:39:37,339
combination of the columns that sums to

580
00:39:35,329 --> 00:39:39,259
something that just very small and in

581
00:39:37,339 --> 00:39:41,209
fact it is unusually small there will be

582
00:39:39,259 --> 00:39:43,249
no other thing that is as small and

583
00:39:41,209 --> 00:39:45,678
that's why this is called a unique

584
00:39:43,249 --> 00:39:48,499
shortest vector problem approach because

585
00:39:45,679 --> 00:39:50,959
we have something uniquely short right

586
00:39:48,499 --> 00:39:52,939
and so this is the computational problem

587
00:39:50,959 --> 00:39:54,499
that we're actually looking at how hard

588
00:39:52,939 --> 00:39:56,660
is it to find this unique shortest

589
00:39:54,499 --> 00:40:00,558
vector in the basis of this form and

590
00:39:56,660 --> 00:40:04,069
this is what essentially these this

591
00:40:00,559 --> 00:40:05,390
table highlights a disagreement okay so

592
00:40:04,069 --> 00:40:07,849
how would we go about solving this

593
00:40:05,390 --> 00:40:09,949
problem we apply lattice reduction and

594
00:40:07,849 --> 00:40:11,779
when we want to talk about lattice

595
00:40:09,949 --> 00:40:13,369
reduction it will be useful to talk not

596
00:40:11,779 --> 00:40:15,700
only about the vectors which are the

597
00:40:13,369 --> 00:40:17,500
columns of our matrix B

598
00:40:15,700 --> 00:40:19,629
but also call talked about something

599
00:40:17,500 --> 00:40:22,020
called the gram-schmidt vectors so the

600
00:40:19,630 --> 00:40:25,240
gram-schmidt vector of a vector VI

601
00:40:22,020 --> 00:40:26,890
denoted VI star is that vector but I

602
00:40:25,240 --> 00:40:29,169
take away everything that was already

603
00:40:26,890 --> 00:40:30,730
covered by previous vectors right so I

604
00:40:29,170 --> 00:40:34,390
look at this vector and only look at

605
00:40:30,730 --> 00:40:36,730
what is new essentially and so so this

606
00:40:34,390 --> 00:40:39,279
means we speak of this as projecting

607
00:40:36,730 --> 00:40:41,049
orthogonal e and so for example here

608
00:40:39,280 --> 00:40:43,750
have two vectors on the slide V naught

609
00:40:41,049 --> 00:40:45,160
and V 1 and V naught is its own

610
00:40:43,750 --> 00:40:46,630
gram-schmidt vector because there's

611
00:40:45,160 --> 00:40:49,240
nothing previously that I need to take

612
00:40:46,630 --> 00:40:50,920
away but the vector B 1 well it also

613
00:40:49,240 --> 00:40:52,419
goes a little bit in the direction of V

614
00:40:50,920 --> 00:40:54,880
naught so how about we take that

615
00:40:52,420 --> 00:40:57,250
contribution away and then if we do that

616
00:40:54,880 --> 00:40:59,290
we end up with P 1 star which is V 1

617
00:40:57,250 --> 00:41:03,250
star but only the new stuff that is ends

618
00:40:59,290 --> 00:41:05,020
so to speak all right and if we have

619
00:41:03,250 --> 00:41:07,299
these gram-schmidt vectors right for all

620
00:41:05,020 --> 00:41:08,980
the columns of our matrix then we can

621
00:41:07,299 --> 00:41:10,359
look at their length and we can look at

622
00:41:08,980 --> 00:41:12,280
the lock of these lengths and we can

623
00:41:10,359 --> 00:41:14,078
plot them so all the gram-schmidt

624
00:41:12,280 --> 00:41:17,140
business was really to explain to you

625
00:41:14,079 --> 00:41:19,390
what this plot means and you can see if

626
00:41:17,140 --> 00:41:21,578
you take a matrix of the shape as the

627
00:41:19,390 --> 00:41:23,710
space is B that I mentioned earlier then

628
00:41:21,579 --> 00:41:25,420
you get the Z shape so you first have

629
00:41:23,710 --> 00:41:27,069
your cubes and then you have your wants

630
00:41:25,420 --> 00:41:28,780
and everything is already orthogonal

631
00:41:27,069 --> 00:41:30,750
which way everything looks nicely

632
00:41:28,780 --> 00:41:34,589
alright so that's the input that's the

633
00:41:30,750 --> 00:41:37,599
geometric shape of the our input problem

634
00:41:34,589 --> 00:41:40,630
now to show you what lattice reduction

635
00:41:37,599 --> 00:41:45,369
does I'm applying the famous lll

636
00:41:40,630 --> 00:41:47,170
algorithm so lll is the oldest lattice

637
00:41:45,369 --> 00:41:49,030
reduction algorithm it is efficient it's

638
00:41:47,170 --> 00:41:51,460
pulling on your time but it gives you

639
00:41:49,030 --> 00:41:52,720
only a lattice that is somewhat good

640
00:41:51,460 --> 00:41:53,859
right it doesn't give you something

641
00:41:52,720 --> 00:41:55,990
that's good enough that we can actually

642
00:41:53,859 --> 00:41:57,910
break these schemes but let's apply that

643
00:41:55,990 --> 00:41:59,439
and then look again at the lengths of

644
00:41:57,910 --> 00:42:01,180
these vectors or the locks of these

645
00:41:59,440 --> 00:42:04,990
lengths and as you can see we now get

646
00:42:01,180 --> 00:42:07,480
this line and essentially what we expect

647
00:42:04,990 --> 00:42:10,149
from also stronger lattice reduction is

648
00:42:07,480 --> 00:42:12,730
a line like that and our laps reduction

649
00:42:10,150 --> 00:42:14,410
is the better the flatter the slyness so

650
00:42:12,730 --> 00:42:16,869
the front comes down the back goes up

651
00:42:14,410 --> 00:42:19,299
right and the more resources you and

652
00:42:16,869 --> 00:42:21,369
investing the more you push the front

653
00:42:19,299 --> 00:42:23,530
down and the more the back comes up so

654
00:42:21,369 --> 00:42:25,059
that essentially lattice reduction and

655
00:42:23,530 --> 00:42:28,000
what people are arguing about is to make

656
00:42:25,059 --> 00:42:30,160
this line more parallel

657
00:42:28,000 --> 00:42:32,230
okay so why does this matter it matters

658
00:42:30,160 --> 00:42:33,759
because the slope tells you how

659
00:42:32,230 --> 00:42:36,190
expensive it is to find this unique

660
00:42:33,760 --> 00:42:37,720
shortest vector so this plot you have to

661
00:42:36,190 --> 00:42:39,550
read from the back and what we want is

662
00:42:37,720 --> 00:42:42,490
that this dashed line where the dotted

663
00:42:39,550 --> 00:42:44,440
line and the solid line intersect is as

664
00:42:42,490 --> 00:42:46,270
far to the back as possible because that

665
00:42:44,440 --> 00:42:47,830
gives me the work factor that I have to

666
00:42:46,270 --> 00:42:50,020
do to find this unique shortest vector

667
00:42:47,830 --> 00:42:52,060
and so if I have an algorithm that

668
00:42:50,020 --> 00:42:53,859
pushes the front down and the back up

669
00:42:52,060 --> 00:42:55,869
then I can move this dashed line further

670
00:42:53,859 --> 00:42:57,700
to the end which is where I want to be

671
00:42:55,869 --> 00:43:00,760
because then my algorithm is cheaper and

672
00:42:57,700 --> 00:43:02,560
this dotted line is essentially the same

673
00:43:00,760 --> 00:43:04,920
process that I've done for the Commish

674
00:43:02,560 --> 00:43:07,240
MIT vectors taking away all the previous

675
00:43:04,920 --> 00:43:09,010
contributions I'm applying the same

676
00:43:07,240 --> 00:43:10,598
process but to my target vector and

677
00:43:09,010 --> 00:43:13,359
that's how I arrived at this dotted line

678
00:43:10,599 --> 00:43:15,310
and that's the success condition that by

679
00:43:13,359 --> 00:43:16,810
the way everybody agrees on right that

680
00:43:15,310 --> 00:43:18,250
is the success condition you should

681
00:43:16,810 --> 00:43:20,920
consider so this is not a point of

682
00:43:18,250 --> 00:43:25,180
disagreement so far everything is nice

683
00:43:20,920 --> 00:43:27,430
we agree on everything okay next step is

684
00:43:25,180 --> 00:43:31,990
I told you lattice reduction what it

685
00:43:27,430 --> 00:43:34,629
does is it reduces the slope so how does

686
00:43:31,990 --> 00:43:36,129
it reduce the slope it depends on

687
00:43:34,630 --> 00:43:37,599
something called the block size which is

688
00:43:36,130 --> 00:43:39,820
the main parameter for our lattice

689
00:43:37,599 --> 00:43:40,990
reduction which then in turn determines

690
00:43:39,820 --> 00:43:42,990
something called the route how might

691
00:43:40,990 --> 00:43:46,560
factor Delta which then in turn

692
00:43:42,990 --> 00:43:48,879
determines the slope and again to

693
00:43:46,560 --> 00:43:51,160
translate from the block size to the

694
00:43:48,880 --> 00:43:52,960
expected slope is something that is not

695
00:43:51,160 --> 00:43:55,270
contested right that's something that we

696
00:43:52,960 --> 00:43:57,220
agree on you can compute fairly

697
00:43:55,270 --> 00:44:01,150
accurately the expected slope that you

698
00:43:57,220 --> 00:44:02,230
would expect from a given block size all

699
00:44:01,150 --> 00:44:05,140
right

700
00:44:02,230 --> 00:44:06,910
so I talked about block size let me

701
00:44:05,140 --> 00:44:10,420
briefly tell you why this matters and

702
00:44:06,910 --> 00:44:12,160
what this means so here I'm looking at

703
00:44:10,420 --> 00:44:13,599
the because that algorithm which is this

704
00:44:12,160 --> 00:44:14,859
algorithm that we are all considering

705
00:44:13,599 --> 00:44:17,740
when we talk about strong lattice

706
00:44:14,859 --> 00:44:20,680
reduction and my example I have block

707
00:44:17,740 --> 00:44:23,290
size 5 so what I what that means is I

708
00:44:20,680 --> 00:44:27,040
consider 5 up to 5 vectors at a time and

709
00:44:23,290 --> 00:44:29,200
I'm going to ask an Oracle hey Oracle

710
00:44:27,040 --> 00:44:30,609
you claim you a shortest vector Oracle

711
00:44:29,200 --> 00:44:32,439
could you please give me the shortest

712
00:44:30,609 --> 00:44:36,339
vector that is in the span of these five

713
00:44:32,440 --> 00:44:38,380
factors okay so I call out to my SVP or

714
00:44:36,339 --> 00:44:40,270
kill my ACP Oracle are they upset with

715
00:44:38,380 --> 00:44:41,440
me says like yes I'm an SVP Oracle of

716
00:44:40,270 --> 00:44:43,570
course here you go

717
00:44:41,440 --> 00:44:45,820
so it gives me back a shortest vector I

718
00:44:43,570 --> 00:44:47,290
insert it I hand with some linear

719
00:44:45,820 --> 00:44:49,930
dependencies and I'm done with this

720
00:44:47,290 --> 00:44:51,310
block all right then I move on to the

721
00:44:49,930 --> 00:44:53,799
next five vectors and I'm not

722
00:44:51,310 --> 00:44:55,779
technically touching those five vectors

723
00:44:53,800 --> 00:44:57,430
I'm looking at some projections of them

724
00:44:55,780 --> 00:44:59,650
but for now let's just assume I'm

725
00:44:57,430 --> 00:45:01,480
looking at the next five vectors and I'm

726
00:44:59,650 --> 00:45:03,520
playing the same game I say like hey

727
00:45:01,480 --> 00:45:05,170
dear short is Mac the Oracle would you

728
00:45:03,520 --> 00:45:07,420
be so kind to give me a shortest vector

729
00:45:05,170 --> 00:45:10,240
and I said sure Martin here you go I

730
00:45:07,420 --> 00:45:12,130
take it I insert it handle the near

731
00:45:10,240 --> 00:45:14,350
dependencies and move on and I keep on

732
00:45:12,130 --> 00:45:15,910
doing that until I hit the end and when

733
00:45:14,350 --> 00:45:18,190
I hit the end I simply start at the

734
00:45:15,910 --> 00:45:20,350
beginning and I keep on doing this and I

735
00:45:18,190 --> 00:45:22,150
keep on doing this right and I stop

736
00:45:20,350 --> 00:45:24,700
doing this when there is no more

737
00:45:22,150 --> 00:45:26,800
progress to be made right so I keep on

738
00:45:24,700 --> 00:45:28,810
going round and going round once is

739
00:45:26,800 --> 00:45:30,970
called a tour and I keep on doing these

740
00:45:28,810 --> 00:45:33,220
tours until my basis doesn't improve

741
00:45:30,970 --> 00:45:34,600
anymore and this process will eventually

742
00:45:33,220 --> 00:45:37,120
stabilize and then we say they have a

743
00:45:34,600 --> 00:45:38,980
big hazard reduced basis but in practice

744
00:45:37,120 --> 00:45:40,420
we just can stop after few tours because

745
00:45:38,980 --> 00:45:42,820
the improvements that you make they

746
00:45:40,420 --> 00:45:44,650
become smaller and smaller how much you

747
00:45:42,820 --> 00:45:46,990
may ask and so here's an example of

748
00:45:44,650 --> 00:45:49,600
running this algorithm on some lattice

749
00:45:46,990 --> 00:45:51,339
the blue line would be the output of lol

750
00:45:49,600 --> 00:45:53,500
reduction so similar to what I've showed

751
00:45:51,340 --> 00:45:55,900
you earlier and then the orange line is

752
00:45:53,500 --> 00:45:57,760
the output of Micah's at 60 so we have

753
00:45:55,900 --> 00:46:01,380
60 vectors at the time that we are

754
00:45:57,760 --> 00:46:03,970
considering and we we went through once

755
00:46:01,380 --> 00:46:05,770
right and then the green line is going

756
00:46:03,970 --> 00:46:07,209
through twice and the pink line going

757
00:46:05,770 --> 00:46:09,460
through three times and then the brown

758
00:46:07,210 --> 00:46:11,260
line as you can see these lines they're

759
00:46:09,460 --> 00:46:13,750
approaching this black line right which

760
00:46:11,260 --> 00:46:15,850
is what a theory tells us this is the

761
00:46:13,750 --> 00:46:17,860
shape that we expecting afterwards and

762
00:46:15,850 --> 00:46:19,870
it's not quite this line but the started

763
00:46:17,860 --> 00:46:21,100
line but you can pre-compute that in the

764
00:46:19,870 --> 00:46:24,339
simulation so that's also something

765
00:46:21,100 --> 00:46:26,529
that's easy to predict alright

766
00:46:24,340 --> 00:46:28,120
I'm finally in a position after this

767
00:46:26,530 --> 00:46:30,060
preload of telling you about like what

768
00:46:28,120 --> 00:46:32,819
are we actually arguing about to kind of

769
00:46:30,060 --> 00:46:35,410
discuss one of the first disagreements I

770
00:46:32,820 --> 00:46:38,710
just told you that after four to eight

771
00:46:35,410 --> 00:46:41,080
tours we are done right so you need at

772
00:46:38,710 --> 00:46:43,240
most as many and in each tool for each

773
00:46:41,080 --> 00:46:45,130
index you're calling us VP Oracle so

774
00:46:43,240 --> 00:46:48,069
that means you're calling us VP Oracle

775
00:46:45,130 --> 00:46:51,100
each tour D times you have up to eight

776
00:46:48,070 --> 00:46:53,080
tours so eight times D and whatever the

777
00:46:51,100 --> 00:46:54,950
cost of my is VP or occurs right so that

778
00:46:53,080 --> 00:46:57,109
would be some estimate for how

779
00:46:54,950 --> 00:46:59,149
much work we have to invest in order to

780
00:46:57,109 --> 00:47:01,369
compute the speakers at reduced basis on

781
00:46:59,150 --> 00:47:03,200
the other hand you can argue that well

782
00:47:01,369 --> 00:47:05,780
the basis keeps improving and maybe we

783
00:47:03,200 --> 00:47:07,910
can amortize some costs so how about we

784
00:47:05,780 --> 00:47:08,780
say well we have to call our SVP Oracle

785
00:47:07,910 --> 00:47:10,940
at least once

786
00:47:08,780 --> 00:47:12,680
right that's certainly true so how about

787
00:47:10,940 --> 00:47:14,869
we simply write one instead of eighty

788
00:47:12,680 --> 00:47:17,450
right and that would be a first

789
00:47:14,869 --> 00:47:19,550
disagreement amongst designers simply if

790
00:47:17,450 --> 00:47:21,859
you pick this lower bound and we have no

791
00:47:19,550 --> 00:47:25,520
algorithm that achieves that or if you

792
00:47:21,859 --> 00:47:27,500
pick the you know the estimate that is

793
00:47:25,520 --> 00:47:29,089
slightly slightly too conservative

794
00:47:27,500 --> 00:47:30,770
because we know we can do slightly

795
00:47:29,089 --> 00:47:32,990
better somewhere in between is the

796
00:47:30,770 --> 00:47:34,490
correct but on the other hand that gives

797
00:47:32,990 --> 00:47:36,319
you a difference of maybe fourteen bits

798
00:47:34,490 --> 00:47:37,790
and given how widely spread those

799
00:47:36,320 --> 00:47:40,910
numbers are maybe that's not the most

800
00:47:37,790 --> 00:47:43,070
important disagreement okay

801
00:47:40,910 --> 00:47:46,069
so essentially what this algorithm does

802
00:47:43,070 --> 00:47:48,170
it keeps on solving SVP over and over

803
00:47:46,070 --> 00:47:50,089
again right and so and the number of

804
00:47:48,170 --> 00:47:52,640
calls accounts for maybe fourteen bits

805
00:47:50,089 --> 00:47:54,619
of difference but the big disagreement

806
00:47:52,640 --> 00:47:56,299
of course is how expensive is it to

807
00:47:54,619 --> 00:47:58,730
solve the shorter specter problem right

808
00:47:56,300 --> 00:48:00,800
my Oracle that I call out to how

809
00:47:58,730 --> 00:48:04,099
expensive is it to call this Oracle and

810
00:48:00,800 --> 00:48:07,369
here is the big disagreement so the

811
00:48:04,099 --> 00:48:09,410
first three lines in my table they they

812
00:48:07,369 --> 00:48:11,720
are about in class of algorithms called

813
00:48:09,410 --> 00:48:13,490
sitting and the last two lines of my

814
00:48:11,720 --> 00:48:16,160
table are about an algorithm called

815
00:48:13,490 --> 00:48:19,040
lattice point enumeration so saving

816
00:48:16,160 --> 00:48:20,660
works by you produce many vectors so you

817
00:48:19,040 --> 00:48:22,069
do essentially random linear

818
00:48:20,660 --> 00:48:24,230
combinations of the columns of this

819
00:48:22,069 --> 00:48:26,480
matrix then you have a huge selection of

820
00:48:24,230 --> 00:48:28,640
vectors and then you pairwise check

821
00:48:26,480 --> 00:48:30,380
whether when you add or subtract the

822
00:48:28,640 --> 00:48:32,029
pair then you get something that's

823
00:48:30,380 --> 00:48:33,530
shorter than the inputs if you find

824
00:48:32,030 --> 00:48:35,089
something that's great you add it to

825
00:48:33,530 --> 00:48:36,800
your set of vectors and you keep on

826
00:48:35,089 --> 00:48:38,930
going and you keep on doing this process

827
00:48:36,800 --> 00:48:43,130
until eventually you have something

828
00:48:38,930 --> 00:48:44,509
which is short enough and the good news

829
00:48:43,130 --> 00:48:46,640
about this algorithm is there is a

830
00:48:44,510 --> 00:48:48,700
single exponential algorithm right so it

831
00:48:46,640 --> 00:48:51,049
only runs in single exponential time

832
00:48:48,700 --> 00:48:56,240
which as a Crypt analyst is very

833
00:48:51,050 --> 00:48:57,980
efficient on the other hand before you

834
00:48:56,240 --> 00:49:00,319
see these collisions right before you

835
00:48:57,980 --> 00:49:01,819
actually hope have any chance of seeing

836
00:49:00,319 --> 00:49:03,680
two things that sum to something which

837
00:49:01,819 --> 00:49:05,930
is shorter you actually need

838
00:49:03,680 --> 00:49:07,490
exponentially many vectors so this

839
00:49:05,930 --> 00:49:10,129
algorithm infinitely requires

840
00:49:07,490 --> 00:49:11,839
exponential memories

841
00:49:10,130 --> 00:49:13,940
enumeration on the other hand is

842
00:49:11,840 --> 00:49:15,920
essentially an exhaustive search within

843
00:49:13,940 --> 00:49:18,340
the given radius of trying to find or

844
00:49:15,920 --> 00:49:20,930
vectors that in this lattice and it uses

845
00:49:18,340 --> 00:49:22,580
properties of projections you project it

846
00:49:20,930 --> 00:49:24,560
down to one dimensional problem you try

847
00:49:22,580 --> 00:49:26,870
to solve it there you lift it up you see

848
00:49:24,560 --> 00:49:30,259
that how does it extend you lift it up

849
00:49:26,870 --> 00:49:31,370
and so on and the good news about this

850
00:49:30,260 --> 00:49:33,620
algorithm that it only requires

851
00:49:31,370 --> 00:49:35,450
polynomial memory so that's great

852
00:49:33,620 --> 00:49:37,670
the bad news is this is a super

853
00:49:35,450 --> 00:49:39,439
exponential algorithm and it depends on

854
00:49:37,670 --> 00:49:41,540
which class of enumeration algorithm

855
00:49:39,440 --> 00:49:43,580
you're looking at what are you

856
00:49:41,540 --> 00:49:45,200
considering it's either quasi linear and

857
00:49:43,580 --> 00:49:47,600
the exponent or it's quadratic in the

858
00:49:45,200 --> 00:49:49,609
exponent and as you can see the to our

859
00:49:47,600 --> 00:49:51,650
cost smallest that I picked one of them

860
00:49:49,610 --> 00:49:53,990
is quasi linear the other one is

861
00:49:51,650 --> 00:49:55,760
quadratic right and so it depends a bit

862
00:49:53,990 --> 00:49:57,919
on like how much pre-processing are you

863
00:49:55,760 --> 00:50:00,470
doing that tells you in which of the two

864
00:49:57,920 --> 00:50:03,380
regimes you are so let's look at these

865
00:50:00,470 --> 00:50:04,790
two estimates a little bit and so both

866
00:50:03,380 --> 00:50:07,970
of these estimates are actually based

867
00:50:04,790 --> 00:50:11,660
off the same data so in UN Machane

868
00:50:07,970 --> 00:50:13,970
thesis they have simulation results for

869
00:50:11,660 --> 00:50:17,089
how long it would take to run

870
00:50:13,970 --> 00:50:19,490
enumeration on lattices up to dimension

871
00:50:17,090 --> 00:50:21,800
250 so that's the green line I hope you

872
00:50:19,490 --> 00:50:23,629
can see this and then the difference

873
00:50:21,800 --> 00:50:26,810
between these two cost models is simply

874
00:50:23,630 --> 00:50:28,370
whether you fit across a linear function

875
00:50:26,810 --> 00:50:30,049
through this or your physical graphic

876
00:50:28,370 --> 00:50:31,819
function through this right and then

877
00:50:30,050 --> 00:50:33,350
using that fit you extrapolate and then

878
00:50:31,820 --> 00:50:35,360
that gives you the cost of the hole

879
00:50:33,350 --> 00:50:39,080
attack because we don't have any data

880
00:50:35,360 --> 00:50:40,790
for things that are larger than 250 okay

881
00:50:39,080 --> 00:50:42,950
and the problem is we didn't have any

882
00:50:40,790 --> 00:50:44,900
additional data and also no source code

883
00:50:42,950 --> 00:50:47,029
was published in the thesis that would

884
00:50:44,900 --> 00:50:50,000
allow us to extend this to see like you

885
00:50:47,030 --> 00:50:51,770
know how does this develop however

886
00:50:50,000 --> 00:50:53,270
things have changed since then and in

887
00:50:51,770 --> 00:50:54,850
particular public open source

888
00:50:53,270 --> 00:50:58,100
implementations of lattice reduction

889
00:50:54,850 --> 00:51:00,020
have improved a lot and so what I've

890
00:50:58,100 --> 00:51:02,870
done for this talk is I've extended the

891
00:51:00,020 --> 00:51:05,420
data of you on my chain so I've run

892
00:51:02,870 --> 00:51:08,810
essentially the same simulations as they

893
00:51:05,420 --> 00:51:10,670
did you but at this time I can the the

894
00:51:08,810 --> 00:51:12,200
source code of this will be made

895
00:51:10,670 --> 00:51:15,590
publicly available so you can verify

896
00:51:12,200 --> 00:51:17,319
that this was done correctly and so what

897
00:51:15,590 --> 00:51:20,450
I've done I've extended this data to

898
00:51:17,320 --> 00:51:22,680
dimension 330 or something like that and

899
00:51:20,450 --> 00:51:25,770
as you can see the quasi

900
00:51:22,680 --> 00:51:28,589
quasi-linear fit fits my simulation

901
00:51:25,770 --> 00:51:30,090
quite nicely but the quadratic fit is

902
00:51:28,590 --> 00:51:32,460
too pessimistic so it assumes that

903
00:51:30,090 --> 00:51:34,050
lattice reduction is more expensive than

904
00:51:32,460 --> 00:51:35,760
it really is right and here we're

905
00:51:34,050 --> 00:51:37,320
talking about lattice reduction not in

906
00:51:35,760 --> 00:51:39,060
theory but the lattice reduction is

907
00:51:37,320 --> 00:51:42,660
implemented in a public open source

908
00:51:39,060 --> 00:51:44,250
implementation namely FPL but of course

909
00:51:42,660 --> 00:51:46,290
these are simulation results so a

910
00:51:44,250 --> 00:51:48,960
natural comeback would be to say but

911
00:51:46,290 --> 00:51:50,580
maybe the implementation doesn't

912
00:51:48,960 --> 00:51:53,340
actually achieve what your simulation

913
00:51:50,580 --> 00:51:55,440
predicts so on this slide I give you in

914
00:51:53,340 --> 00:51:58,320
green this is the running time of actual

915
00:51:55,440 --> 00:52:00,510
FPL so the actual software and then just

916
00:51:58,320 --> 00:52:02,340
take seconds and translate that to the

917
00:52:00,510 --> 00:52:04,080
unit that we're considering here which

918
00:52:02,340 --> 00:52:08,010
is how many points in your exhaustive

919
00:52:04,080 --> 00:52:09,870
search are you visiting the blue dashed

920
00:52:08,010 --> 00:52:12,450
line would be the output of my

921
00:52:09,870 --> 00:52:15,690
simulation as previously and then the

922
00:52:12,450 --> 00:52:17,759
red dotted line is the I ask the FPL

923
00:52:15,690 --> 00:52:19,680
software so how many points if you

924
00:52:17,760 --> 00:52:21,930
actually visit and as you can see those

925
00:52:19,680 --> 00:52:24,089
three lines converge which suggests to

926
00:52:21,930 --> 00:52:26,690
me that indeed the simulation is fairly

927
00:52:24,090 --> 00:52:32,940
accurate in predicting the efficiency of

928
00:52:26,690 --> 00:52:35,690
FPL a last point I want to make about

929
00:52:32,940 --> 00:52:39,080
the quasi linear versus the quadratic

930
00:52:35,690 --> 00:52:43,110
estimate for enumeration is this also

931
00:52:39,080 --> 00:52:45,230
the quasi linear fit actually fits quite

932
00:52:43,110 --> 00:52:48,300
closely what theory would predict and

933
00:52:45,230 --> 00:52:50,700
that is a cannon simulation which is

934
00:52:48,300 --> 00:52:53,130
this family of enumeration that you know

935
00:52:50,700 --> 00:52:55,620
has quasi linear complexity in the

936
00:52:53,130 --> 00:52:59,520
exponent we know that the worst-case

937
00:52:55,620 --> 00:53:02,279
leading exponent the leading exponent is

938
00:52:59,520 --> 00:53:04,200
1 over 2 e and that is actually quite

939
00:53:02,280 --> 00:53:06,660
close what this numerical approximation

940
00:53:04,200 --> 00:53:09,330
gives us right so it seems we're

941
00:53:06,660 --> 00:53:11,640
actually achieving the complexity the

942
00:53:09,330 --> 00:53:14,250
worst case complexity that would be

943
00:53:11,640 --> 00:53:17,100
predicted for current enumeration and a

944
00:53:14,250 --> 00:53:18,930
natural question is if we are stuck in

945
00:53:17,100 --> 00:53:21,120
this worst case or whether inside

946
00:53:18,930 --> 00:53:23,370
because that we can maybe bring down

947
00:53:21,120 --> 00:53:26,160
this leading coefficient so that is

948
00:53:23,370 --> 00:53:28,470
something that is an open question all

949
00:53:26,160 --> 00:53:30,149
right but the the big question of course

950
00:53:28,470 --> 00:53:32,970
is the one in question is what is the

951
00:53:30,150 --> 00:53:35,160
right cost model for enumeration but the

952
00:53:32,970 --> 00:53:35,890
big question is of course sitting us in

953
00:53:35,160 --> 00:53:38,290
a more

954
00:53:35,890 --> 00:53:41,290
right so saving is asymptotically faster

955
00:53:38,290 --> 00:53:42,849
but maybe the asymptotics only kick in

956
00:53:41,290 --> 00:53:44,380
so late that we don't have to worry

957
00:53:42,849 --> 00:53:45,940
about this right so because the

958
00:53:44,380 --> 00:53:48,609
constants the hidden constants are so

959
00:53:45,940 --> 00:53:50,260
huge maybe there's just no way in hell

960
00:53:48,609 --> 00:53:52,359
that this will actually outperform

961
00:53:50,260 --> 00:53:55,420
enumeration for the parameters that we

962
00:53:52,359 --> 00:53:57,819
care about so to study this problem of

963
00:53:55,420 --> 00:53:59,410
kind of how low can we push the cross

964
00:53:57,820 --> 00:54:02,800
over between your numeration and saving

965
00:53:59,410 --> 00:54:05,020
we developed jessyca which is a Python

966
00:54:02,800 --> 00:54:07,000
in c++ framework for experimenting with

967
00:54:05,020 --> 00:54:09,520
saving algorithms inside and outside

968
00:54:07,000 --> 00:54:11,920
because it and in particular what we've

969
00:54:09,520 --> 00:54:13,630
done is we not we haven't taken this

970
00:54:11,920 --> 00:54:15,520
oracle view that I appealed to earlier

971
00:54:13,630 --> 00:54:17,680
but instead we're thinking of saving a

972
00:54:15,520 --> 00:54:19,450
stateful machines remember that we have

973
00:54:17,680 --> 00:54:21,190
these large databases of vectors that he

974
00:54:19,450 --> 00:54:23,109
carry around and instead of throwing

975
00:54:21,190 --> 00:54:25,240
them away after we give you a shortest

976
00:54:23,109 --> 00:54:27,400
vector we hold on to them to do some

977
00:54:25,240 --> 00:54:29,259
further computations with them and then

978
00:54:27,400 --> 00:54:30,880
we implemented several saving algorithms

979
00:54:29,260 --> 00:54:32,619
so it's a whole class of algorithms to

980
00:54:30,880 --> 00:54:34,359
be implemented some of them I want to

981
00:54:32,619 --> 00:54:36,430
stress that we did not implement the

982
00:54:34,359 --> 00:54:39,549
asymptotically fastest one that are used

983
00:54:36,430 --> 00:54:41,109
in these estimates and then we applied

984
00:54:39,550 --> 00:54:42,550
many recent tricks from the literature

985
00:54:41,109 --> 00:54:45,069
and came up with some new tricks to make

986
00:54:42,550 --> 00:54:47,680
serving faster and if you pull all of

987
00:54:45,070 --> 00:54:50,050
this together we can report that saving

988
00:54:47,680 --> 00:54:53,589
outperforms enumeration in block size 70

989
00:54:50,050 --> 00:54:54,910
so the green dots this would be the same

990
00:54:53,589 --> 00:54:56,109
thing that I've give you a showing you

991
00:54:54,910 --> 00:54:57,879
before when I showed you the

992
00:54:56,109 --> 00:55:00,660
experimental results so that's the same

993
00:54:57,880 --> 00:55:04,660
software again and the red dots is our

994
00:55:00,660 --> 00:55:06,069
SIF implementation for performing the

995
00:55:04,660 --> 00:55:09,220
same task of computing the shortest

996
00:55:06,070 --> 00:55:11,500
vector and as you can see it outperforms

997
00:55:09,220 --> 00:55:13,930
or the crossover is in blocks i-70 and

998
00:55:11,500 --> 00:55:15,580
to clarify blocks i-70 something takes

999
00:55:13,930 --> 00:55:18,040
less than ten seconds right so the cross

1000
00:55:15,580 --> 00:55:20,020
over on if you're running this on one

1001
00:55:18,040 --> 00:55:21,940
big machine that has enough RAM to fit

1002
00:55:20,020 --> 00:55:24,009
all these vectors in between saving

1003
00:55:21,940 --> 00:55:29,470
enumeration is actually very small it is

1004
00:55:24,010 --> 00:55:32,109
not very late the canonical benchmark

1005
00:55:29,470 --> 00:55:34,439
for lattice reduction algorithms would

1006
00:55:32,109 --> 00:55:37,060
be the Dom chef SVP challenges and

1007
00:55:34,440 --> 00:55:39,160
despite being called the Dom shut SCP

1008
00:55:37,060 --> 00:55:42,339
challenge the dancer FCP challenge does

1009
00:55:39,160 --> 00:55:44,230
not ask you to solve SVP because it's

1010
00:55:42,339 --> 00:55:46,060
actually really hard to verify that the

1011
00:55:44,230 --> 00:55:48,640
thing that somebody gives you is the

1012
00:55:46,060 --> 00:55:49,400
shortest vector so it asks you to solve

1013
00:55:48,640 --> 00:55:51,680
a slightly

1014
00:55:49,400 --> 00:55:53,990
your problem so the red dotted line will

1015
00:55:51,680 --> 00:55:56,660
be my simulation for enumeration for

1016
00:55:53,990 --> 00:55:58,459
solving SVP exactly the green line will

1017
00:55:56,660 --> 00:56:00,230
be using the same methodology the

1018
00:55:58,460 --> 00:56:02,180
simulation of solving the problem that

1019
00:56:00,230 --> 00:56:05,120
the damped STP challenge asks you to

1020
00:56:02,180 --> 00:56:06,919
solve and then the blue and the red dots

1021
00:56:05,120 --> 00:56:09,140
would be entries from the hall-of-fame

1022
00:56:06,920 --> 00:56:11,120
right so people who claimed World

1023
00:56:09,140 --> 00:56:14,120
Records in performing this computation

1024
00:56:11,120 --> 00:56:16,190
and the time that they reported how long

1025
00:56:14,120 --> 00:56:17,960
it took them to solve this problem and

1026
00:56:16,190 --> 00:56:20,570
as you can see my green line and these

1027
00:56:17,960 --> 00:56:22,250
dots they seem to somewhat agree at this

1028
00:56:20,570 --> 00:56:24,140
point I want to stress that my green

1029
00:56:22,250 --> 00:56:26,060
line going through these dots in no way

1030
00:56:24,140 --> 00:56:28,580
diminishes the achievement of these dots

1031
00:56:26,060 --> 00:56:31,130
because my line is just a simulation

1032
00:56:28,580 --> 00:56:33,980
right and it's a simulation that assumes

1033
00:56:31,130 --> 00:56:35,420
everything paralyzes perfectly right and

1034
00:56:33,980 --> 00:56:37,010
we know that this is not the case so

1035
00:56:35,420 --> 00:56:39,110
that these guys actually managed to

1036
00:56:37,010 --> 00:56:42,170
achieve this complexity is a huge

1037
00:56:39,110 --> 00:56:44,420
accomplishment right then finally the

1038
00:56:42,170 --> 00:56:45,860
green dots are our saving algorithm as

1039
00:56:44,420 --> 00:56:48,470
you can see we are significantly

1040
00:56:45,860 --> 00:56:51,800
outperforming prior art when it comes to

1041
00:56:48,470 --> 00:56:53,569
solving these these challenges and then

1042
00:56:51,800 --> 00:56:56,450
we were also able to claim some new

1043
00:56:53,570 --> 00:56:57,050
world records in computing short vectors

1044
00:56:56,450 --> 00:56:59,480
in the dam's

1045
00:56:57,050 --> 00:57:03,680
SVP challenge up to dimension hundred

1046
00:56:59,480 --> 00:57:06,050
fifty-five all right I want to stress

1047
00:57:03,680 --> 00:57:08,629
solace this is indicative of lab sitting

1048
00:57:06,050 --> 00:57:10,460
is practical but on the other hand what

1049
00:57:08,630 --> 00:57:12,020
we have not is an implementation that

1050
00:57:10,460 --> 00:57:13,670
actually paralyzed across different

1051
00:57:12,020 --> 00:57:16,400
machines right and then there it's not

1052
00:57:13,670 --> 00:57:17,840
quite clear how this exactly is supposed

1053
00:57:16,400 --> 00:57:19,520
to work because you have this

1054
00:57:17,840 --> 00:57:22,250
exponential memory and then you have

1055
00:57:19,520 --> 00:57:24,110
nodes that have to communicate so this

1056
00:57:22,250 --> 00:57:26,390
is future work

1057
00:57:24,110 --> 00:57:27,890
also what is not clear at the moment is

1058
00:57:26,390 --> 00:57:29,750
the practical performance of the

1059
00:57:27,890 --> 00:57:32,029
asymptotically faster surfs we didn't

1060
00:57:29,750 --> 00:57:33,710
implement those and there will be more

1061
00:57:32,030 --> 00:57:36,050
overhead certainly so it's not quite

1062
00:57:33,710 --> 00:57:37,880
clear when exactly those beat the sister

1063
00:57:36,050 --> 00:57:39,680
we actually did implement and then of

1064
00:57:37,880 --> 00:57:41,510
course a fun open question is what if

1065
00:57:39,680 --> 00:57:43,640
you have dedicated hardware right so far

1066
00:57:41,510 --> 00:57:46,640
everything was on commodity CPUs and

1067
00:57:43,640 --> 00:57:49,069
then if we have dedicated CPUs or

1068
00:57:46,640 --> 00:57:53,120
hardware then then maybe there's

1069
00:57:49,070 --> 00:57:56,030
something else possible right I'm almost

1070
00:57:53,120 --> 00:57:58,130
done three more points so the first one

1071
00:57:56,030 --> 00:57:59,630
is we're talking here about the post

1072
00:57:58,130 --> 00:58:00,530
quantum competition which is not a

1073
00:57:59,630 --> 00:58:03,170
competition

1074
00:58:00,530 --> 00:58:04,730
but so far I've only talked about class

1075
00:58:03,170 --> 00:58:06,859
six estimates right all the algorithms

1076
00:58:04,730 --> 00:58:08,450
that are talked about are on classical

1077
00:58:06,859 --> 00:58:10,848
computers which is why we could

1078
00:58:08,450 --> 00:58:12,500
implement them and test them and since

1079
00:58:10,849 --> 00:58:14,630
this is we were crypto let's talk about

1080
00:58:12,500 --> 00:58:19,280
a bunch of algorithms or computers that

1081
00:58:14,630 --> 00:58:21,440
do not exist so what I give you on this

1082
00:58:19,280 --> 00:58:24,920
slide would be the the best estimates

1083
00:58:21,440 --> 00:58:28,309
for a classical and quantum saving and

1084
00:58:24,920 --> 00:58:31,160
classical and quantum enumeration and as

1085
00:58:28,309 --> 00:58:32,630
you can seem for saving the improvement

1086
00:58:31,160 --> 00:58:35,899
that you're seeing is actually fairly

1087
00:58:32,630 --> 00:58:40,160
minimal so the leading coefficient goes

1088
00:58:35,900 --> 00:58:43,010
from 0.29 to two 0.265 right where is

1089
00:58:40,160 --> 00:58:44,598
for enumeration you see the Grover's

1090
00:58:43,010 --> 00:58:46,069
Peter but you have to 1/2 and the

1091
00:58:44,599 --> 00:58:48,589
exponent which means you're taking a

1092
00:58:46,069 --> 00:58:50,270
square root and both of these are

1093
00:58:48,589 --> 00:58:52,099
actually like the strategies fairly

1094
00:58:50,270 --> 00:58:53,390
similar you find the place where you

1095
00:58:52,099 --> 00:58:55,549
have an exhaustive search and your

1096
00:58:53,390 --> 00:58:59,029
algorithm you slap your grover on that

1097
00:58:55,549 --> 00:59:00,619
and you claim your 1/2 and in the case

1098
00:58:59,030 --> 00:59:01,970
of enumeration you can't quite do that

1099
00:59:00,619 --> 00:59:04,910
so you need a quantum backtracking

1100
00:59:01,970 --> 00:59:08,270
algorithm but Montanaro has has provided

1101
00:59:04,910 --> 00:59:11,299
one and then some people worked out kind

1102
00:59:08,270 --> 00:59:12,530
of how to apply it exactly alright so

1103
00:59:11,299 --> 00:59:16,040
but a question that you might ask

1104
00:59:12,530 --> 00:59:17,930
yourself is why is the performance of

1105
00:59:16,040 --> 00:59:21,380
quantum serving so poor compared to

1106
00:59:17,930 --> 00:59:23,529
classical serving and the the reasons

1107
00:59:21,380 --> 00:59:26,900
that I want to give you is firstly

1108
00:59:23,530 --> 00:59:28,400
remember that saving works by producing

1109
00:59:26,900 --> 00:59:30,740
this large set of vectors and then

1110
00:59:28,400 --> 00:59:32,660
looking for collisions essentially but

1111
00:59:30,740 --> 00:59:33,979
whatever you do like however efficient

1112
00:59:32,660 --> 00:59:35,540
you're doing your collision search you

1113
00:59:33,980 --> 00:59:37,490
have to write down this large list of

1114
00:59:35,540 --> 00:59:39,109
vectors first right there's nothing that

1115
00:59:37,490 --> 00:59:41,598
gets you around that at least as far as

1116
00:59:39,109 --> 00:59:43,250
we know so that's it's an inherent

1117
00:59:41,599 --> 00:59:45,710
limitation for how low you can go

1118
00:59:43,250 --> 00:59:47,299
the second and perhaps more important

1119
00:59:45,710 --> 00:59:49,579
point is that these asymptotically

1120
00:59:47,299 --> 00:59:51,920
faster sitting algorithms that we see in

1121
00:59:49,579 --> 00:59:53,210
the literature they're really exploiting

1122
00:59:51,920 --> 00:59:54,799
that the search space that you're

1123
00:59:53,210 --> 00:59:56,420
searching through is not unstructured

1124
00:59:54,799 --> 00:59:58,220
it's actually quite structured in

1125
00:59:56,420 --> 01:00:00,710
Grover's search really is for

1126
00:59:58,220 --> 01:00:02,779
unstructured search to illustrate this

1127
01:00:00,710 --> 01:00:05,510
consider the simple SIF algorithm called

1128
01:00:02,780 --> 01:00:07,280
the Gauss if and if you if you do that

1129
01:00:05,510 --> 01:00:09,410
and do you know you're most optimistic

1130
01:00:07,280 --> 01:00:11,000
estimate for a slapping growver on that

1131
01:00:09,410 --> 01:00:12,920
then you end up with a quantum

1132
01:00:11,000 --> 01:00:14,360
complexity where the leading coefficient

1133
01:00:12,920 --> 01:00:16,580
is 0.3 1 1

1134
01:00:14,360 --> 01:00:18,650
you can actually achieve the very same

1135
01:00:16,580 --> 01:00:21,049
complexity classically without any

1136
01:00:18,650 --> 01:00:22,880
increase in memory by implementing the

1137
01:00:21,050 --> 01:00:25,340
so-called BG jaysis which is the one

1138
01:00:22,880 --> 01:00:27,770
that we also implemented in Jessica and

1139
01:00:25,340 --> 01:00:30,530
this is simply using the fact that the

1140
01:00:27,770 --> 01:00:32,390
search space is quite structured and so

1141
01:00:30,530 --> 01:00:33,740
this asymptotically faster always what

1142
01:00:32,390 --> 01:00:35,120
they're doing is they're successfully

1143
01:00:33,740 --> 01:00:36,350
reducing the list that you need to

1144
01:00:35,120 --> 01:00:38,930
search through which makes them faster

1145
01:00:36,350 --> 01:00:40,940
but now if the lists that need to search

1146
01:00:38,930 --> 01:00:42,919
through a smaller the speed-up that you

1147
01:00:40,940 --> 01:00:45,200
can get from Grover becomes smaller as

1148
01:00:42,920 --> 01:00:47,720
well so there's less of a potential for

1149
01:00:45,200 --> 01:00:50,089
grover star algorithm to improve so if

1150
01:00:47,720 --> 01:00:52,609
you want to have more efficient

1151
01:00:50,090 --> 01:00:54,290
algorithms quantum algorithms in the

1152
01:00:52,610 --> 01:00:56,390
spirit of saving you really need new

1153
01:00:54,290 --> 01:00:58,250
ideas right because the better serving

1154
01:00:56,390 --> 01:01:02,060
algorithms they make Rover hard and

1155
01:00:58,250 --> 01:01:04,310
harder to shine then I want to make a

1156
01:01:02,060 --> 01:01:06,230
point about lower bounds because the the

1157
01:01:04,310 --> 01:01:08,060
table entries that I've shown you at the

1158
01:01:06,230 --> 01:01:10,280
beginning they were not necessarily of

1159
01:01:08,060 --> 01:01:11,660
the form we think there exists an

1160
01:01:10,280 --> 01:01:14,420
algorithm that can solve this problem

1161
01:01:11,660 --> 01:01:18,259
with this complexity they were rather of

1162
01:01:14,420 --> 01:01:21,530
the form we think any algorithm in this

1163
01:01:18,260 --> 01:01:23,600
family of algorithms so plausible we'll

1164
01:01:21,530 --> 01:01:26,060
have to do at least this many operations

1165
01:01:23,600 --> 01:01:28,339
right so they're explicit lower bounds

1166
01:01:26,060 --> 01:01:30,799
and so what this means is polynomial

1167
01:01:28,340 --> 01:01:33,230
factors are completely ignored the

1168
01:01:30,800 --> 01:01:35,270
maximum depth like how long you can run

1169
01:01:33,230 --> 01:01:37,670
a quantum computation it's completely

1170
01:01:35,270 --> 01:01:39,590
ignored and also when we compare

1171
01:01:37,670 --> 01:01:42,740
classical and quantum we're actually

1172
01:01:39,590 --> 01:01:45,260
comparing CPU cycles and grover

1173
01:01:42,740 --> 01:01:47,209
iterations and one grover iteration is

1174
01:01:45,260 --> 01:01:50,480
most definitely more expensive than one

1175
01:01:47,210 --> 01:01:52,760
CPU cycle so there's this huge overheads

1176
01:01:50,480 --> 01:01:55,100
that are simply being ignored and thus I

1177
01:01:52,760 --> 01:01:58,760
want to kind of issue a word of caution

1178
01:01:55,100 --> 01:02:00,440
in two regards firstly if somebody comes

1179
01:01:58,760 --> 01:02:02,480
up with a new lower bound and maybe

1180
01:02:00,440 --> 01:02:04,850
here's a new plausible lower bound and

1181
01:02:02,480 --> 01:02:06,770
this in no way implies that schemes need

1182
01:02:04,850 --> 01:02:08,450
to update their parameters right because

1183
01:02:06,770 --> 01:02:10,520
a new lower bound does not imply that

1184
01:02:08,450 --> 01:02:12,439
they've actually found an algorithm that

1185
01:02:10,520 --> 01:02:14,540
achieves anything like this lower bound

1186
01:02:12,440 --> 01:02:16,190
all they're claiming is here's a new

1187
01:02:14,540 --> 01:02:18,050
lower bound so you have to be very

1188
01:02:16,190 --> 01:02:20,420
careful about how to interpret some

1189
01:02:18,050 --> 01:02:21,980
results from the literature and secondly

1190
01:02:20,420 --> 01:02:23,870
you want to be very careful about how

1191
01:02:21,980 --> 01:02:26,450
you interpret results in these models

1192
01:02:23,870 --> 01:02:28,859
and that is if you assume the cost of

1193
01:02:26,450 --> 01:02:31,200
lattice reduction is indeed the

1194
01:02:28,859 --> 01:02:33,089
then some classes of attack simply do

1195
01:02:31,200 --> 01:02:35,250
not work you don't need to consider them

1196
01:02:33,089 --> 01:02:37,558
it's just like this strategy is just

1197
01:02:35,250 --> 01:02:39,270
that it's just not efficient but

1198
01:02:37,559 --> 01:02:41,220
whenever you plug in an actually

1199
01:02:39,270 --> 01:02:43,230
realistic cost model for how long that

1200
01:02:41,220 --> 01:02:46,410
reduction takes then these techniques

1201
01:02:43,230 --> 01:02:48,059
start to work and so what this means if

1202
01:02:46,410 --> 01:02:50,009
if you always consider only the lower

1203
01:02:48,059 --> 01:02:51,869
bounds you might rule out some classes

1204
01:02:50,010 --> 01:02:53,579
of attacks that are actually quite

1205
01:02:51,869 --> 01:02:55,410
promising that actually allow us to

1206
01:02:53,579 --> 01:02:56,760
learn something about the problem but

1207
01:02:55,410 --> 01:02:59,460
we're not studying them because we

1208
01:02:56,760 --> 01:03:01,049
assume that they don't they don't work

1209
01:02:59,460 --> 01:03:03,089
because like look in this lower bound

1210
01:03:01,049 --> 01:03:06,809
model they don't work so you have to be

1211
01:03:03,089 --> 01:03:09,359
really careful about that okay final

1212
01:03:06,809 --> 01:03:11,609
points it would be irresponsible to talk

1213
01:03:09,359 --> 01:03:13,290
about this without mentioning and

1214
01:03:11,609 --> 01:03:17,308
stressing all the things that I didn't

1215
01:03:13,290 --> 01:03:19,829
talk about so first of all I've only

1216
01:03:17,309 --> 01:03:22,290
talked about very vanilla lwe problem

1217
01:03:19,829 --> 01:03:24,420
but many of the submissions to the nist

1218
01:03:22,290 --> 01:03:26,130
process they actually use small and

1219
01:03:24,420 --> 01:03:28,260
sparse secrets so they deviate from this

1220
01:03:26,130 --> 01:03:30,420
vanilla formulation and they're a

1221
01:03:28,260 --> 01:03:32,010
different family of algorithms applies

1222
01:03:30,420 --> 01:03:34,349
essentially you're guessing some bits of

1223
01:03:32,010 --> 01:03:35,549
the secret and so on and here i think

1224
01:03:34,349 --> 01:03:39,750
there is still some room for improvement

1225
01:03:35,549 --> 01:03:41,339
so this needs further studying also I

1226
01:03:39,750 --> 01:03:44,010
completely swept under the rug

1227
01:03:41,339 --> 01:03:46,980
algebraic structure so to make these

1228
01:03:44,010 --> 01:03:49,500
schemes efficient we don't have actually

1229
01:03:46,980 --> 01:03:51,420
random matrices a but these matrices a

1230
01:03:49,500 --> 01:03:54,480
have some algebraic structure in there

1231
01:03:51,420 --> 01:03:57,180
and it's not clear if this algebraic

1232
01:03:54,480 --> 01:03:59,520
structure can't be exploited so for

1233
01:03:57,180 --> 01:04:01,589
example the ideal SVP problem or some

1234
01:03:59,520 --> 01:04:04,259
approximation of the ideal SVP problem

1235
01:04:01,589 --> 01:04:05,880
is easy on a quantum computer then the

1236
01:04:04,260 --> 01:04:09,119
general problem that I've discussed here

1237
01:04:05,880 --> 01:04:11,099
and ring lwe if you pick your parameters

1238
01:04:09,119 --> 01:04:12,630
right and so on but usually nobody does

1239
01:04:11,099 --> 01:04:16,049
that for the schemes used in practice

1240
01:04:12,630 --> 01:04:18,630
then we as known as at least as hard as

1241
01:04:16,049 --> 01:04:20,700
I do SVP but it's not really clear if

1242
01:04:18,630 --> 01:04:23,520
it's harder or not so do these attacks

1243
01:04:20,700 --> 01:04:25,290
on ideal SBP do they extend in some way

1244
01:04:23,520 --> 01:04:27,359
to ring a double yi right so and that is

1245
01:04:25,290 --> 01:04:29,819
a pressing question future research and

1246
01:04:27,359 --> 01:04:32,040
then lastly I've only talked about

1247
01:04:29,819 --> 01:04:34,109
passive adversaries right you see some

1248
01:04:32,040 --> 01:04:36,119
ciphertext on the wire you say like

1249
01:04:34,109 --> 01:04:37,619
here's an underlying hard problem let me

1250
01:04:36,119 --> 01:04:40,740
try to solve this underlying hard

1251
01:04:37,619 --> 01:04:41,790
problem what we care about is actually

1252
01:04:40,740 --> 01:04:44,098
activate

1253
01:04:41,790 --> 01:04:45,540
right and so these schemes because they

1254
01:04:44,099 --> 01:04:47,339
add this noise

1255
01:04:45,540 --> 01:04:49,170
they stick they're prone to have

1256
01:04:47,339 --> 01:04:50,790
decryption failures right and then you

1257
01:04:49,170 --> 01:04:52,530
need to bount them and then these

1258
01:04:50,790 --> 01:04:54,480
decryption failures that might teach you

1259
01:04:52,530 --> 01:04:56,670
something about the underlying secrets

1260
01:04:54,480 --> 01:04:58,680
so that might then lead to a break of

1261
01:04:56,670 --> 01:05:01,140
your scheme so some of the submissions

1262
01:04:58,680 --> 01:05:02,790
to the nist process they they explicitly

1263
01:05:01,140 --> 01:05:05,009
rule out this right so they pick

1264
01:05:02,790 --> 01:05:07,140
parameters that you have no decryption

1265
01:05:05,010 --> 01:05:08,730
failure whatsoever other scheme saying

1266
01:05:07,140 --> 01:05:10,680
we are accepting decryption failures

1267
01:05:08,730 --> 01:05:12,030
with a certain probability and then the

1268
01:05:10,680 --> 01:05:14,220
question is can you boost this

1269
01:05:12,030 --> 01:05:16,050
probability somehow but doing some pre

1270
01:05:14,220 --> 01:05:17,490
computation and how much does that

1271
01:05:16,050 --> 01:05:20,070
affect the security of these schemes

1272
01:05:17,490 --> 01:05:22,020
right I want just wanna stress like this

1273
01:05:20,070 --> 01:05:24,119
is only a small part of the questions

1274
01:05:22,020 --> 01:05:25,440
that we still need to answer all right

1275
01:05:24,119 --> 01:05:27,589
that's all I want to say thank you very

1276
01:05:25,440 --> 01:05:27,589
much

1277
01:05:34,070 --> 01:05:42,570
okay we've got a few minutes for

1278
01:05:36,060 --> 01:05:47,880
questions and I see people heading to

1279
01:05:42,570 --> 01:05:51,630
the mics so it seemed in your slides

1280
01:05:47,880 --> 01:05:53,490
that the circuit complexity penalty of

1281
01:05:51,630 --> 01:05:55,800
having a exponential amount memory

1282
01:05:53,490 --> 01:05:58,799
wasn't reflected in the bit hardness

1283
01:05:55,800 --> 01:06:00,930
estimates does this suggest in other

1284
01:05:58,800 --> 01:06:02,940
words the the fact that enumeration uses

1285
01:06:00,930 --> 01:06:05,430
a lot less memory hmm

1286
01:06:02,940 --> 01:06:07,109
didn't seem to show up in them in the

1287
01:06:05,430 --> 01:06:08,580
number like you have two different kinds

1288
01:06:07,109 --> 01:06:11,700
of numbers appearing in the top half of

1289
01:06:08,580 --> 01:06:14,640
the graph some are including the cert

1290
01:06:11,700 --> 01:06:16,319
the circuit size some are not how do you

1291
01:06:14,640 --> 01:06:19,950
mean including the circuit size

1292
01:06:16,320 --> 01:06:22,349
you mean like something like that yes

1293
01:06:19,950 --> 01:06:24,000
are these top numbers just times or are

1294
01:06:22,349 --> 01:06:25,560
they taking into account or is it time

1295
01:06:24,000 --> 01:06:28,050
times remember all of these at times

1296
01:06:25,560 --> 01:06:31,500
today not none of this is an area times

1297
01:06:28,050 --> 01:06:32,970
time model yes so and then that's the

1298
01:06:31,500 --> 01:06:35,220
question right so how does this behave

1299
01:06:32,970 --> 01:06:37,140
and then in a way we can give you some

1300
01:06:35,220 --> 01:06:39,299
partial answer by actually implementing

1301
01:06:37,140 --> 01:06:41,819
saving when you have huge amounts of RAM

1302
01:06:39,300 --> 01:06:43,710
but the really interesting bit is when

1303
01:06:41,820 --> 01:06:45,420
you paralyze it across like for

1304
01:06:43,710 --> 01:06:47,070
non-uniform memory access and then this

1305
01:06:45,420 --> 01:06:53,430
is future work yeah absolutely right

1306
01:06:47,070 --> 01:06:54,420
thank you other questions all right then

1307
01:06:53,430 --> 01:06:58,410
I'm gonna take the prerogative to ask

1308
01:06:54,420 --> 01:07:00,330
one so back in the dawn of history when

1309
01:06:58,410 --> 01:07:03,270
I did some work on lattice reduction

1310
01:07:00,330 --> 01:07:05,369
with knapsacks obviously we couldn't we

1311
01:07:03,270 --> 01:07:06,630
were going after 50 60 dimension

1312
01:07:05,369 --> 01:07:08,040
problems and that was what we're able to

1313
01:07:06,630 --> 01:07:09,810
do at the time and we noticed a

1314
01:07:08,040 --> 01:07:12,509
catastrophic drop-off in the

1315
01:07:09,810 --> 01:07:13,950
effectiveness of lll so when what we

1316
01:07:12,510 --> 01:07:15,420
could approximate versus and then the

1317
01:07:13,950 --> 01:07:16,890
quality of the shortest vector the

1318
01:07:15,420 --> 01:07:19,170
difference between the shortest vector

1319
01:07:16,890 --> 01:07:21,210
lll found and what was the actual short

1320
01:07:19,170 --> 01:07:23,070
vector mm-hmm when you go run out at

1321
01:07:21,210 --> 01:07:25,530
these dimensions mm-hmm

1322
01:07:23,070 --> 01:07:27,330
when you don't find the shortest vector

1323
01:07:25,530 --> 01:07:30,810
but you find something that is close to

1324
01:07:27,330 --> 01:07:32,609
you'd still notice that lll running say

1325
01:07:30,810 --> 01:07:35,040
running bkz that sort of thing do you

1326
01:07:32,609 --> 01:07:36,839
get a catastrophic drop off at some end

1327
01:07:35,040 --> 01:07:38,670
point in terms of the quality of the the

1328
01:07:36,839 --> 01:07:41,250
answer that comes out of it or do you

1329
01:07:38,670 --> 01:07:42,720
sort of see a more you know smoother

1330
01:07:41,250 --> 01:07:44,790
progression and the quality of the

1331
01:07:42,720 --> 01:07:45,319
answer that comes out I think the the

1332
01:07:44,790 --> 01:07:47,719
picture

1333
01:07:45,319 --> 01:07:49,489
change in the sense of now the lattice

1334
01:07:47,719 --> 01:07:50,900
dimension of it tackling a much bigger

1335
01:07:49,489 --> 01:07:53,660
and we have a whole continuum of

1336
01:07:50,900 --> 01:07:55,609
algorithms right so we don't have this

1337
01:07:53,660 --> 01:07:56,959
kind of like you run ll and afterwards

1338
01:07:55,609 --> 01:07:59,058
you're dead and then there's a drop off

1339
01:07:56,959 --> 01:08:00,890
so that's why we don't observe it that

1340
01:07:59,059 --> 01:08:03,079
much because we simply run them because

1341
01:08:00,890 --> 01:08:04,879
at twenty right which like takes almost

1342
01:08:03,079 --> 01:08:06,440
no more time now like with all the

1343
01:08:04,880 --> 01:08:08,209
improvements so that's why we don't

1344
01:08:06,440 --> 01:08:09,650
observe it but you can probably for each

1345
01:08:08,209 --> 01:08:11,868
of those algorithms you can probably

1346
01:08:09,650 --> 01:08:13,880
have a similar thing of like Oh actually

1347
01:08:11,869 --> 01:08:15,349
and then when you go beyond dimension

1348
01:08:13,880 --> 01:08:17,779
eighty or something I'm making all these

1349
01:08:15,349 --> 01:08:19,400
numbers up now then then maybe you still

1350
01:08:17,779 --> 01:08:21,079
see that but it's not so relevant now

1351
01:08:19,399 --> 01:08:22,278
because you simply increase your because

1352
01:08:21,078 --> 01:08:30,078
that dimensions slightly and then you're

1353
01:08:22,279 --> 01:08:34,329
done Nigel so these are for post

1354
01:08:30,078 --> 01:08:38,118
constant competition parameters yeah so

1355
01:08:34,328 --> 01:08:39,969
and so you see you say you say you can

1356
01:08:38,118 --> 01:08:42,170
think of Allah loves because he - yeah

1357
01:08:39,969 --> 01:08:44,270
and you can then say you're saying and

1358
01:08:42,170 --> 01:08:46,250
we have this drop catastrophic drop off

1359
01:08:44,270 --> 01:08:48,529
then you have Big Easy twenty and if you

1360
01:08:46,250 --> 01:08:50,929
make the parameters huge like fhe land

1361
01:08:48,529 --> 01:08:52,940
you'll have a catastrophic drop off what

1362
01:08:50,929 --> 01:08:55,279
happens if you down move the dimensions

1363
01:08:52,939 --> 01:08:59,059
up to fhe level parameters like all

1364
01:08:55,279 --> 01:09:01,190
dimensions 16,000 32,000 65,000 so

1365
01:08:59,060 --> 01:09:04,579
catastrophic drop off means you actually

1366
01:09:01,189 --> 01:09:07,729
achieve the the quality that we expect

1367
01:09:04,578 --> 01:09:09,618
so LOL behaves much better than you

1368
01:09:07,729 --> 01:09:11,118
expect in small dimensions and then the

1369
01:09:09,618 --> 01:09:13,158
kerrick's traffic drop off means that

1370
01:09:11,118 --> 01:09:14,960
and then you get what you expect so what

1371
01:09:13,158 --> 01:09:17,049
we will be looking at is like in

1372
01:09:14,960 --> 01:09:19,578
dimension 16,000 we would we would get

1373
01:09:17,049 --> 01:09:24,469
essentially what this graph is

1374
01:09:19,578 --> 01:09:25,849
predicting so this would be the quality

1375
01:09:24,469 --> 01:09:28,189
that you're getting out and that that

1376
01:09:25,849 --> 01:09:30,619
seems to be accurate I'm not aware like

1377
01:09:28,189 --> 01:09:32,358
like doing this on dimension 16,000 and

1378
01:09:30,618 --> 01:09:34,479
I know of your standing challenge of us

1379
01:09:32,359 --> 01:09:37,609
to run actually lol in that dimension

1380
01:09:34,479 --> 01:09:40,040
but like the the in terms of the output

1381
01:09:37,609 --> 01:09:41,569
quality that you expect so there's no

1382
01:09:40,040 --> 01:09:46,310
reason to expect it will be different

1383
01:09:41,569 --> 01:09:48,310
from what this graph implies again

1384
01:09:46,310 --> 01:09:49,160
there's like

1385
01:09:48,310 --> 01:09:51,960
you

1386
01:09:49,160 --> 01:09:51,960
[Applause]

