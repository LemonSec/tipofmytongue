1
00:07:48,070 --> 00:07:59,070
in San Jose how are you thank you right

2
00:07:55,930 --> 00:08:02,590
okay so welcome to real cryptic crypto

3
00:07:59,070 --> 00:08:05,980
2019 in San Jose I have the pleasure of

4
00:08:02,590 --> 00:08:08,619
welcoming in you here so welcome as you

5
00:08:05,980 --> 00:08:10,330
can see it's real crypto gets bigger and

6
00:08:08,620 --> 00:08:12,580
bigger you know a few years ago it would

7
00:08:10,330 --> 00:08:15,849
start there's only 80 people and now we

8
00:08:12,580 --> 00:08:18,580
have shed loads of you so big we have to

9
00:08:15,850 --> 00:08:21,220
have a shed to put you in anyway so um

10
00:08:18,580 --> 00:08:23,260
the Wi-Fi thing is there that's the only

11
00:08:21,220 --> 00:08:27,220
time you're going to see it so please

12
00:08:23,260 --> 00:08:32,049
write it down now and now good good good

13
00:08:27,220 --> 00:08:34,660
ok so we're going to carry on so 2019

14
00:08:32,049 --> 00:08:38,289
what do we have for you in 2019 well we

15
00:08:34,659 --> 00:08:39,939
are in San Jose if you think you're

16
00:08:38,289 --> 00:08:41,348
meant to be somewhere else that's

17
00:08:39,940 --> 00:08:45,240
because you've come for the Rugby World

18
00:08:41,349 --> 00:08:47,890
Cup and it's the wrong venue so you

19
00:08:45,240 --> 00:08:50,080
whether you'll see people strumming on

20
00:08:47,890 --> 00:08:52,300
the stage or I don't know that's

21
00:08:50,080 --> 00:08:55,120
something maybe that's what we have in

22
00:08:52,300 --> 00:08:56,650
the in the in the lightning talk section

23
00:08:55,120 --> 00:08:57,910
I like to introduce you to the

24
00:08:56,650 --> 00:09:00,310
organising committee they're all going

25
00:08:57,910 --> 00:09:01,140
to stand up one at a time so Dan please

26
00:09:00,310 --> 00:09:06,719
step up

27
00:09:01,140 --> 00:09:12,040
he's the local organizer well I guess

28
00:09:06,720 --> 00:09:14,500
he's he does stuff Brian best Brian

29
00:09:12,040 --> 00:09:16,839
Brian must yep can you stand up yep but

30
00:09:14,500 --> 00:09:19,919
um Kenny

31
00:09:16,840 --> 00:09:19,919
[Music]

32
00:09:20,230 --> 00:09:28,810
Tom who takes over as local chair next

33
00:09:23,680 --> 00:09:33,670
year kazoo where's kazoo stand up she's

34
00:09:28,810 --> 00:09:36,089
new so please welcome her great Tom who

35
00:09:33,670 --> 00:09:40,300
sorts out all the students it's tough

36
00:09:36,089 --> 00:09:42,670
and there's me who a lot of you have

37
00:09:40,300 --> 00:09:46,839
paid shed loads of money to thank you

38
00:09:42,670 --> 00:09:50,229
we're going to thank you all later okay

39
00:09:46,839 --> 00:09:52,810
if we'd like you to so shal conference

40
00:09:50,230 --> 00:09:54,100
so before we start um can you just turn

41
00:09:52,810 --> 00:09:58,089
out to the person next to you if you do

42
00:09:54,100 --> 00:10:07,480
not know them and say hello to them yeah

43
00:09:58,089 --> 00:10:08,680
what I'm hey dude oh yeah apparently you

44
00:10:07,480 --> 00:10:10,570
know each others don't know very social

45
00:10:08,680 --> 00:10:13,329
down here okay right so after after

46
00:10:10,570 --> 00:10:16,240
those quick introductions we have we

47
00:10:13,329 --> 00:10:19,089
have a Twitter now please use if you

48
00:10:16,240 --> 00:10:20,740
want to contact us please use at

49
00:10:19,089 --> 00:10:22,149
real-world crypt if there's something

50
00:10:20,740 --> 00:10:24,220
you want to point out to the organizers

51
00:10:22,149 --> 00:10:26,199
just go out real world crypto and we

52
00:10:24,220 --> 00:10:28,420
will pick that up because there's going

53
00:10:26,199 --> 00:10:31,899
to be shed loads of lots of shed loads

54
00:10:28,420 --> 00:10:33,790
of stuff tweeting please use hash real

55
00:10:31,899 --> 00:10:35,290
world crypto beautiful no so everyone

56
00:10:33,790 --> 00:10:38,949
can just search for what they're doing

57
00:10:35,290 --> 00:10:41,890
do not use our WC because some other

58
00:10:38,949 --> 00:10:44,410
organization got that we have that live

59
00:10:41,890 --> 00:10:47,230
streaming we didn't think we did but we

60
00:10:44,410 --> 00:10:51,160
do and the link is going to be posted to

61
00:10:47,230 --> 00:10:54,040
Twitter in five minutes okay so there we

62
00:10:51,160 --> 00:10:56,199
go so if you want to livestream loss

63
00:10:54,040 --> 00:10:57,430
watching it if you want to go back to

64
00:10:56,199 --> 00:11:01,269
your hotel room or do something better

65
00:10:57,430 --> 00:11:03,130
there we go okay we had a selection

66
00:11:01,269 --> 00:11:04,839
process the contributor talks as you

67
00:11:03,130 --> 00:11:08,470
know we have invited talks here we have

68
00:11:04,839 --> 00:11:11,440
contributed talks we had 60 submissions

69
00:11:08,470 --> 00:11:14,560
and we accepted 22 um thanks to the PC

70
00:11:11,440 --> 00:11:16,630
and the PC chair yeah and all those

71
00:11:14,560 --> 00:11:19,329
people work and remember we have a

72
00:11:16,630 --> 00:11:21,010
low-cost model here so the idea with

73
00:11:19,329 --> 00:11:23,319
real world crypto is to try to keep this

74
00:11:21,010 --> 00:11:25,000
as cheap and cheerful as possible so we

75
00:11:23,319 --> 00:11:27,370
don't give you banquets we don't give

76
00:11:25,000 --> 00:11:31,829
you t-shirts if you want a t-shirt of

77
00:11:27,370 --> 00:11:33,780
San Jose there are shops okay right

78
00:11:31,829 --> 00:11:35,699
that's it

79
00:11:33,780 --> 00:11:37,920
so we keep it cheap it's really hard to

80
00:11:35,700 --> 00:11:40,230
make it cheap for a 600-plus venue

81
00:11:37,920 --> 00:11:43,290
conference so that's why the the fees

82
00:11:40,230 --> 00:11:44,700
keep going up is is is simply the venue

83
00:11:43,290 --> 00:11:46,170
just get bigger and bigger we couldn't

84
00:11:44,700 --> 00:11:49,560
hold this at Stanford it's too many

85
00:11:46,170 --> 00:11:51,540
people now okay so that's the problem a

86
00:11:49,560 --> 00:11:54,119
note four speakers can you come up

87
00:11:51,540 --> 00:11:56,640
during the breaks to make sure you can

88
00:11:54,120 --> 00:12:05,220
connect your laptop's we would like your

89
00:11:56,640 --> 00:12:07,830
slides emailed to someone dan if you

90
00:12:05,220 --> 00:12:10,950
email down your slides we will put them

91
00:12:07,830 --> 00:12:12,210
on the web for posterity a safety

92
00:12:10,950 --> 00:12:14,040
briefing I've been told there's

93
00:12:12,210 --> 00:12:17,400
apparently exit signs and they're marked

94
00:12:14,040 --> 00:12:19,800
in exit okay so and there's escalators

95
00:12:17,400 --> 00:12:24,990
in the hallway near registrations and

96
00:12:19,800 --> 00:12:28,890
behind you okay Dumpty done okay as of 3

97
00:12:24,990 --> 00:12:31,050
a.m. in the morning I had jet lag we had

98
00:12:28,890 --> 00:12:33,720
six hundred and twenty six registrations

99
00:12:31,050 --> 00:12:36,599
we probably have more now five hundred

100
00:12:33,720 --> 00:12:41,190
and two were regular and 124 were the

101
00:12:36,600 --> 00:12:43,589
cheapest there the students 330 are new

102
00:12:41,190 --> 00:12:45,690
members of the IAC are since last year

103
00:12:43,589 --> 00:12:48,660
real world crypto is part of the IC our

104
00:12:45,690 --> 00:12:50,820
stable of conferences and so by coming

105
00:12:48,660 --> 00:12:55,829
here you automatically become a member

106
00:12:50,820 --> 00:12:58,740
for 2020 so this is 2019 you become a

107
00:12:55,830 --> 00:13:01,260
member for the next year so in the 2020

108
00:12:58,740 --> 00:13:04,589
elections you can vote for suitably real

109
00:13:01,260 --> 00:13:07,380
people at the the IC our elections as

110
00:13:04,589 --> 00:13:11,490
opposed to imaginary people or ideal

111
00:13:07,380 --> 00:13:12,839
people or whatever okay there's some the

112
00:13:11,490 --> 00:13:15,990
largest number of people were from the

113
00:13:12,839 --> 00:13:19,190
USA fifty-two from something called the

114
00:13:15,990 --> 00:13:21,480
UK and then there's some other countries

115
00:13:19,190 --> 00:13:23,339
not very many from Belgium this year

116
00:13:21,480 --> 00:13:25,800
which is a pity okay we have a record

117
00:13:23,339 --> 00:13:27,839
number of sponsors which allows us to

118
00:13:25,800 --> 00:13:29,520
give out a large number of stipends so

119
00:13:27,839 --> 00:13:31,830
we're supporting how many they work out

120
00:13:29,520 --> 00:13:34,860
sixtieths type ends of which 20 are

121
00:13:31,830 --> 00:13:36,950
funded by NSF money so we want to thank

122
00:13:34,860 --> 00:13:39,450
the NSF and we also want to thank a

123
00:13:36,950 --> 00:13:42,900
marvelous list of sponsors which no

124
00:13:39,450 --> 00:13:45,000
longer fit on one slide so we have Al

125
00:13:42,900 --> 00:13:47,319
Gore and Thank You Al Gore and thank you

126
00:13:45,000 --> 00:13:49,840
Amazon round of applause block

127
00:13:47,320 --> 00:13:52,540
stream baffle Cisco cloud fair crypto

128
00:13:49,840 --> 00:13:56,260
expert crypto map virtuality n Val

129
00:13:52,540 --> 00:13:59,920
Facebook Galois Google infer I sorrow I

130
00:13:56,260 --> 00:14:03,700
ohk MongoDB Mozilla NCC Group new cipher

131
00:13:59,920 --> 00:14:05,319
nxp QE t th but the CPI settle share

132
00:14:03,700 --> 00:14:10,480
mine symbolic software Thunder core

133
00:14:05,320 --> 00:14:12,940
unbound visa research and said cash as I

134
00:14:10,480 --> 00:14:15,640
said shed loads lots of you give me shed

135
00:14:12,940 --> 00:14:16,480
loads of money ok if you want to know

136
00:14:15,640 --> 00:14:19,420
what's coming up

137
00:14:16,480 --> 00:14:21,940
we have 2020 is in Colombia not the

138
00:14:19,420 --> 00:14:24,130
country but the University if I spell

139
00:14:21,940 --> 00:14:25,930
that right I can't remember in 2021

140
00:14:24,130 --> 00:14:29,020
we're going to be in Amsterdam in the

141
00:14:25,930 --> 00:14:33,099
Netherlands and 2022 we are looking for

142
00:14:29,020 --> 00:14:37,660
venues so if you would like to yeah I

143
00:14:33,100 --> 00:14:38,770
know I I just yeah I just it was 3:30

144
00:14:37,660 --> 00:14:42,579
it's 3 o'clock in the morning what you

145
00:14:38,770 --> 00:14:43,810
expect anyway so I have only one

146
00:14:42,580 --> 00:14:46,360
spelling mistake on this flight that's

147
00:14:43,810 --> 00:14:49,900
pretty good for me ok so if you want to

148
00:14:46,360 --> 00:14:52,600
host 2022 or later please come and talk

149
00:14:49,900 --> 00:14:54,699
to us it's really easy to host one of

150
00:14:52,600 --> 00:14:56,980
the real world crypto conference venues

151
00:14:54,700 --> 00:14:59,860
as you can see this is not very big

152
00:14:56,980 --> 00:15:01,890
thing to organize and yeah and there's

153
00:14:59,860 --> 00:15:05,200
lots of sponsors so this is quite easy

154
00:15:01,890 --> 00:15:07,510
and let the show begin

155
00:15:05,200 --> 00:15:11,430
and I going to pass on to our accession

156
00:15:07,510 --> 00:15:11,430
chair who's going to be done

157
00:15:17,650 --> 00:15:22,550
all right thanks Nigel this is fantastic

158
00:15:20,630 --> 00:15:24,010
always fun to host this conference I'm

159
00:15:22,550 --> 00:15:26,089
really glad to see so many of you here

160
00:15:24,010 --> 00:15:28,730
two more things I want to just to add

161
00:15:26,090 --> 00:15:30,680
first is tomorrow just before lunch

162
00:15:28,730 --> 00:15:32,840
we're gonna have our usual lightening

163
00:15:30,680 --> 00:15:34,579
session talk so this is where everybody

164
00:15:32,840 --> 00:15:36,530
gets to come up to the mic not everybody

165
00:15:34,580 --> 00:15:38,780
anyone who wants to gets to come up to

166
00:15:36,530 --> 00:15:40,550
the mic and speak for two three four

167
00:15:38,780 --> 00:15:43,010
five minutes

168
00:15:40,550 --> 00:15:44,270
possibly so think if you want to have if

169
00:15:43,010 --> 00:15:46,069
you have anything interesting to say if

170
00:15:44,270 --> 00:15:47,540
you'd like to propose a new problem if

171
00:15:46,070 --> 00:15:50,090
you want to just say what you're working

172
00:15:47,540 --> 00:15:52,219
on just come up to the mic and you'll be

173
00:15:50,090 --> 00:15:53,450
you'll have time to present so that'll

174
00:15:52,220 --> 00:15:55,460
take place tomorrow just before lunch

175
00:15:53,450 --> 00:15:57,830
and I guess I do have to say that we're

176
00:15:55,460 --> 00:15:59,060
in downtown San Jose there if you have

177
00:15:57,830 --> 00:16:00,830
some free time they're a bunch of

178
00:15:59,060 --> 00:16:02,510
museums around here so I'll go explore

179
00:16:00,830 --> 00:16:02,960
downtown it's kind of a nice place to

180
00:16:02,510 --> 00:16:07,850
visit

181
00:16:02,960 --> 00:16:08,540
so enjoy good alright so with that let's

182
00:16:07,850 --> 00:16:11,390
get started

183
00:16:08,540 --> 00:16:13,250
so our first session is on message

184
00:16:11,390 --> 00:16:14,990
security and our first messaging

185
00:16:13,250 --> 00:16:16,970
security and our first talk is about

186
00:16:14,990 --> 00:16:19,040
this new exciting effort on message

187
00:16:16,970 --> 00:16:22,870
layer security and Richard Barnes is

188
00:16:19,040 --> 00:16:22,870
gonna give the talk so Richard all yours

189
00:16:23,550 --> 00:16:31,279
[Applause]

190
00:16:32,740 --> 00:16:36,650
all right here we go thanks for the

191
00:16:35,240 --> 00:16:38,030
intro again thanks to all of you for

192
00:16:36,650 --> 00:16:39,439
waking up on this first morning of the

193
00:16:38,030 --> 00:16:42,110
conference from whatever time zone

194
00:16:39,440 --> 00:16:43,490
you've arrived from I want to open up

195
00:16:42,110 --> 00:16:45,020
and say right off the bat that there's a

196
00:16:43,490 --> 00:16:46,700
list of folks on the front page of this

197
00:16:45,020 --> 00:16:47,990
slide that are the guys who put this

198
00:16:46,700 --> 00:16:50,510
together who put together the

199
00:16:47,990 --> 00:16:51,950
presentation but the community of folks

200
00:16:50,510 --> 00:16:54,350
working on this project is really much

201
00:16:51,950 --> 00:16:56,630
much larger like any IETF effort this is

202
00:16:54,350 --> 00:16:59,330
an open development project it's totally

203
00:16:56,630 --> 00:17:00,650
open and all of these folks folks

204
00:16:59,330 --> 00:17:02,780
represent on the slide have already

205
00:17:00,650 --> 00:17:04,250
contributed to date haven't made some

206
00:17:02,780 --> 00:17:05,750
kind concrete contribution to the

207
00:17:04,250 --> 00:17:07,520
protocol and notice the thing at the

208
00:17:05,750 --> 00:17:08,720
bottom where it says your name here part

209
00:17:07,520 --> 00:17:10,520
of the reason we're at we're making this

210
00:17:08,720 --> 00:17:11,750
presentation is to get more community

211
00:17:10,520 --> 00:17:13,220
awareness around this and get more

212
00:17:11,750 --> 00:17:15,230
involvement so we can make the protocol

213
00:17:13,220 --> 00:17:17,780
better so let me dive into what we're

214
00:17:15,230 --> 00:17:20,360
doing here the high-level context for

215
00:17:17,780 --> 00:17:22,339
this work is decoherence in the securing

216
00:17:20,359 --> 00:17:23,958
messaging space so I'm willing to bet

217
00:17:22,339 --> 00:17:25,490
that at pretty much everyone in this

218
00:17:23,959 --> 00:17:28,640
room has at least one of these apps on

219
00:17:25,490 --> 00:17:29,960
your phone or your laptop or some device

220
00:17:28,640 --> 00:17:31,490
that you carry around with you

221
00:17:29,960 --> 00:17:32,960
that lets you communicate securely with

222
00:17:31,490 --> 00:17:35,600
other people being protected from the

223
00:17:32,960 --> 00:17:38,480
network that's transmitting the messages

224
00:17:35,600 --> 00:17:40,580
a lot of these you know each one of

225
00:17:38,480 --> 00:17:43,039
these needs some protocol to do the the

226
00:17:40,580 --> 00:17:44,629
crypto that protects its messages and so

227
00:17:43,039 --> 00:17:45,379
they're all doing pretty much similar

228
00:17:44,629 --> 00:17:46,850
things

229
00:17:45,379 --> 00:17:49,330
some of them do them in similar ways

230
00:17:46,850 --> 00:17:51,498
some of them in super different ways

231
00:17:49,330 --> 00:17:53,240
there's there's kind of various tribes

232
00:17:51,499 --> 00:17:55,879
around these but they're all kind of

233
00:17:53,240 --> 00:17:57,740
solving the same problem so we have this

234
00:17:55,879 --> 00:17:59,570
fragmentation situation which results in

235
00:17:57,740 --> 00:18:00,799
a situation where there's wildly

236
00:17:59,570 --> 00:18:02,149
different levels of analyses on these

237
00:18:00,799 --> 00:18:03,889
different protocols some of them are

238
00:18:02,149 --> 00:18:05,959
very thoroughly vetted a lot of the

239
00:18:03,889 --> 00:18:07,789
double ratchet based variants have had a

240
00:18:05,960 --> 00:18:09,169
lot of research put into them but others

241
00:18:07,789 --> 00:18:10,970
are completely unvented its diverges

242
00:18:09,169 --> 00:18:12,799
going on what the vendor says there's a

243
00:18:10,970 --> 00:18:14,690
lot of wasted effort here because even

244
00:18:12,799 --> 00:18:16,700
in cases where the protocols are similar

245
00:18:14,690 --> 00:18:19,009
people are using Forks to do slightly

246
00:18:16,700 --> 00:18:20,330
different things and having to do

247
00:18:19,009 --> 00:18:22,190
maintenance on their own libraries

248
00:18:20,330 --> 00:18:23,809
there's a lot of wasted effort here so

249
00:18:22,190 --> 00:18:26,210
the overall goal here is to share more

250
00:18:23,809 --> 00:18:28,279
and the way we kind of know how to share

251
00:18:26,210 --> 00:18:29,629
in this industry is by specifying things

252
00:18:28,279 --> 00:18:32,570
and doing interrupts so that people can

253
00:18:29,629 --> 00:18:35,178
develop independently and and share the

254
00:18:32,570 --> 00:18:36,799
code they built so the overall

255
00:18:35,179 --> 00:18:38,029
deliverable for this working group that

256
00:18:36,799 --> 00:18:40,009
we're did this work that we're doing is

257
00:18:38,029 --> 00:18:41,690
a set of detailed specifications for

258
00:18:40,009 --> 00:18:43,940
what for I've got three critical

259
00:18:41,690 --> 00:18:46,940
properties here we haven't mean an async

260
00:18:43,940 --> 00:18:48,950
group messaging security protocol when

261
00:18:46,940 --> 00:18:50,210
we say async the critical property there

262
00:18:48,950 --> 00:18:52,399
is that we need to be able to have a

263
00:18:50,210 --> 00:18:54,499
session a secure messaging session where

264
00:18:52,399 --> 00:18:56,239
we're protected where no two

265
00:18:54,499 --> 00:18:58,309
participants are online at the same time

266
00:18:56,240 --> 00:19:00,440
so I can fire up my device and start a

267
00:18:58,309 --> 00:19:01,940
conversation with catriel while his

268
00:19:00,440 --> 00:19:03,649
phone is powered off then he can power

269
00:19:01,940 --> 00:19:05,389
up and sync up his state and receive

270
00:19:03,649 --> 00:19:07,549
messages without anyone else being able

271
00:19:05,389 --> 00:19:10,789
to see that stuff we need to support

272
00:19:07,549 --> 00:19:12,168
groups um lots of messaging today if you

273
00:19:10,789 --> 00:19:14,809
look at the stats of telemetry these

274
00:19:12,169 --> 00:19:16,460
apps get a lot of messaging is done in

275
00:19:14,809 --> 00:19:19,639
groups and a lot of the pain we feel

276
00:19:16,460 --> 00:19:22,129
with current protocols is with those

277
00:19:19,639 --> 00:19:23,508
group settings so these groups need we

278
00:19:22,129 --> 00:19:25,389
need support groups we need support

279
00:19:23,509 --> 00:19:27,740
large groups because you see groups of

280
00:19:25,389 --> 00:19:31,248
thousands even up to tens of thousands

281
00:19:27,740 --> 00:19:32,779
of participants in a lot of these

282
00:19:31,249 --> 00:19:33,919
settings so we need support large groups

283
00:19:32,779 --> 00:19:35,090
and we need support groups where people

284
00:19:33,919 --> 00:19:36,259
come and go because if you have a

285
00:19:35,090 --> 00:19:37,789
thousand people and you're in your

286
00:19:36,259 --> 00:19:40,940
organization you're going to have people

287
00:19:37,789 --> 00:19:42,980
coming and going overtime and finally we

288
00:19:40,940 --> 00:19:44,470
need to do all this stuff with modern

289
00:19:42,980 --> 00:19:46,430
security

290
00:19:44,470 --> 00:19:49,130
protocols I've put on the site I mean

291
00:19:46,430 --> 00:19:50,300
properties things like forward security

292
00:19:49,130 --> 00:19:52,010
and post compromised security I'll talk

293
00:19:50,300 --> 00:19:53,419
about more in a minute so the overall

294
00:19:52,010 --> 00:19:55,010
goal of all this like I said is to get

295
00:19:53,420 --> 00:19:57,380
sharing to have code that we can reuse

296
00:19:55,010 --> 00:19:58,640
in multiple contexts and when we need to

297
00:19:57,380 --> 00:20:00,800
write different code for different

298
00:19:58,640 --> 00:20:02,900
contexts to make sure that code can

299
00:20:00,800 --> 00:20:05,000
interoperate so if I write one stack for

300
00:20:02,900 --> 00:20:06,950
my iOS app and one stack for my web app

301
00:20:05,000 --> 00:20:08,090
I know that they can work together and I

302
00:20:06,950 --> 00:20:09,230
don't have to do a lot of intense

303
00:20:08,090 --> 00:20:11,919
coordination and make them make sure

304
00:20:09,230 --> 00:20:14,030
that they work together having a shared

305
00:20:11,920 --> 00:20:16,370
implementation target also gives us a

306
00:20:14,030 --> 00:20:17,600
shared analysis target so largely we're

307
00:20:16,370 --> 00:20:19,580
following the pattern we did with TLS

308
00:20:17,600 --> 00:20:21,320
one three here so with TLS one three we

309
00:20:19,580 --> 00:20:23,240
had this coordination between the spec

310
00:20:21,320 --> 00:20:25,790
writing the implementation and the

311
00:20:23,240 --> 00:20:27,560
academic security analysis and

312
00:20:25,790 --> 00:20:30,649
verification so we're trying to get that

313
00:20:27,560 --> 00:20:32,240
same dynamic here where we have a single

314
00:20:30,650 --> 00:20:34,190
common target for analysis and

315
00:20:32,240 --> 00:20:36,200
verification so that we can build a lot

316
00:20:34,190 --> 00:20:38,230
of confidence and and have much more

317
00:20:36,200 --> 00:20:41,210
wider deployment of these protocols

318
00:20:38,230 --> 00:20:42,710
there's a very top level goals now

319
00:20:41,210 --> 00:20:44,480
what's the context room which we're

320
00:20:42,710 --> 00:20:46,400
building this so it's pretty much you'd

321
00:20:44,480 --> 00:20:47,870
expect so you have a bunch of devices

322
00:20:46,400 --> 00:20:50,240
your client you imagine like a phone or

323
00:20:47,870 --> 00:20:51,919
a laptop or something each user has one

324
00:20:50,240 --> 00:20:53,540
or more devices and users come together

325
00:20:51,920 --> 00:20:55,520
in a group where they want to mess with

326
00:20:53,540 --> 00:20:57,470
securely and they're interacting via

327
00:20:55,520 --> 00:20:59,180
some what we call a delivery service and

328
00:20:57,470 --> 00:21:01,160
when you think about that you think of

329
00:20:59,180 --> 00:21:02,570
like the server's up in the cloud there

330
00:21:01,160 --> 00:21:03,860
I didn't take a message that someone

331
00:21:02,570 --> 00:21:05,780
sends and route it to all the other

332
00:21:03,860 --> 00:21:07,189
people in the group and the overall goal

333
00:21:05,780 --> 00:21:08,510
of this protocol is pretty much utak

334
00:21:07,190 --> 00:21:10,310
what you'd expect it's protect you from

335
00:21:08,510 --> 00:21:11,360
that delivery service so you want to

336
00:21:10,310 --> 00:21:13,040
make sure the delivery service can't

337
00:21:11,360 --> 00:21:14,479
read your messages can't tamper with

338
00:21:13,040 --> 00:21:16,220
your messages and you want to make sure

339
00:21:14,480 --> 00:21:17,930
that you can authenticate who have sent

340
00:21:16,220 --> 00:21:19,730
a message and authenticate that they're

341
00:21:17,930 --> 00:21:22,610
a member of the group so typical you

342
00:21:19,730 --> 00:21:23,810
know trio of things with and also some

343
00:21:22,610 --> 00:21:26,090
of those modern properties I'll get to

344
00:21:23,810 --> 00:21:27,649
in a second I want to highlight two kind

345
00:21:26,090 --> 00:21:29,330
of differences from what you might

346
00:21:27,650 --> 00:21:30,860
expect in terms of deployed reality with

347
00:21:29,330 --> 00:21:32,060
this one is the delivery service we

348
00:21:30,860 --> 00:21:34,790
represent here is kind of an abstract

349
00:21:32,060 --> 00:21:37,970
thing now usually in deployed reality

350
00:21:34,790 --> 00:21:39,950
today that's a single service operated

351
00:21:37,970 --> 00:21:42,230
by a single provider who also sells you

352
00:21:39,950 --> 00:21:43,850
it also gives you the app but you could

353
00:21:42,230 --> 00:21:45,890
also imagine running this over something

354
00:21:43,850 --> 00:21:47,030
like a DHT or over vuvuzela something it

355
00:21:45,890 --> 00:21:47,870
would give you more protection so the

356
00:21:47,030 --> 00:21:49,460
delivery service is kind of this

357
00:21:47,870 --> 00:21:51,530
abstract function you can imagine

358
00:21:49,460 --> 00:21:53,300
delivering different ways we've also

359
00:21:51,530 --> 00:21:55,340
split out the authentication service

360
00:21:53,300 --> 00:21:56,330
from the delivery service which is

361
00:21:55,340 --> 00:21:57,620
different from a lot of things today

362
00:21:56,330 --> 00:21:59,840
it's a lot of things today

363
00:21:57,620 --> 00:22:02,120
the app tells you which keys belong to

364
00:21:59,840 --> 00:22:04,340
whom and you trust that the absent to

365
00:22:02,120 --> 00:22:06,620
provide you that binding but with things

366
00:22:04,340 --> 00:22:07,879
like key transparency and external

367
00:22:06,620 --> 00:22:10,520
authentication services we're seeing

368
00:22:07,880 --> 00:22:12,620
it's already authentication to split off

369
00:22:10,520 --> 00:22:13,668
from the delivery function itself so we

370
00:22:12,620 --> 00:22:16,520
wanted to accommodate that in our

371
00:22:13,669 --> 00:22:17,900
architecture another way to look at this

372
00:22:16,520 --> 00:22:19,639
is it kind of in terms of layering kind

373
00:22:17,900 --> 00:22:21,380
of the slice of the stack we're trying

374
00:22:19,640 --> 00:22:23,390
to get to I have made an analogy to TLS

375
00:22:21,380 --> 00:22:25,370
here when you look at how tos works in

376
00:22:23,390 --> 00:22:26,990
the real world it gets transported over

377
00:22:25,370 --> 00:22:28,340
a bunch of different protocols and it

378
00:22:26,990 --> 00:22:29,779
gets used to carry a bunch of different

379
00:22:28,340 --> 00:22:31,220
protocols and gets embedded into

380
00:22:29,779 --> 00:22:32,630
different applications in different ways

381
00:22:31,220 --> 00:22:34,309
and that's sort of what we're

382
00:22:32,630 --> 00:22:36,770
envisioning here we're not trying to

383
00:22:34,309 --> 00:22:38,870
make it so that whatsapp can communicate

384
00:22:36,770 --> 00:22:40,730
with wire we're not trying to solve the

385
00:22:38,870 --> 00:22:42,620
whole stack problem like that we're

386
00:22:40,730 --> 00:22:44,450
trying to make a crypto protocol that

387
00:22:42,620 --> 00:22:46,610
each of those can integrate into its app

388
00:22:44,450 --> 00:22:49,279
over its own transport carrying messages

389
00:22:46,610 --> 00:22:52,520
and its format but getting a common set

390
00:22:49,279 --> 00:22:55,370
of security guarantees and that kind of

391
00:22:52,520 --> 00:22:57,350
effects the set of security issues we're

392
00:22:55,370 --> 00:22:58,639
trying to attack here so for example

393
00:22:57,350 --> 00:23:00,500
there's issues at the application live

394
00:22:58,640 --> 00:23:02,870
in the HTTP case you have things like h2

395
00:23:00,500 --> 00:23:04,100
exits us and phishing you have issues of

396
00:23:02,870 --> 00:23:05,870
the transport layer like traffic

397
00:23:04,100 --> 00:23:06,969
analysis those are not really what we're

398
00:23:05,870 --> 00:23:09,080
targeting here we're really targeting

399
00:23:06,970 --> 00:23:10,940
protection against this delivery service

400
00:23:09,080 --> 00:23:13,549
getting those properties I mentioned I'm

401
00:23:10,940 --> 00:23:15,080
going to go now we made an analogy to

402
00:23:13,549 --> 00:23:17,809
TLS let's look at what's different from

403
00:23:15,080 --> 00:23:19,760
TLS what makes MLS different from TLS is

404
00:23:17,809 --> 00:23:21,740
a couple things one is as I've already

405
00:23:19,760 --> 00:23:23,360
Highland we're looking at groups TLS is

406
00:23:21,740 --> 00:23:24,649
explicitly a point-to-point protocol you

407
00:23:23,360 --> 00:23:27,799
have a client you have a server you have

408
00:23:24,649 --> 00:23:30,320
two actors and MLS you've got lots of

409
00:23:27,799 --> 00:23:32,870
them like I said we have rooms and Cisco

410
00:23:30,320 --> 00:23:34,279
spark that I work on that have 1500

411
00:23:32,870 --> 00:23:36,860
people pretty regularly it's pretty

412
00:23:34,279 --> 00:23:39,890
common so you've got lots more points of

413
00:23:36,860 --> 00:23:41,479
compromise in a given a session moreover

414
00:23:39,890 --> 00:23:43,039
when you have a session messaging

415
00:23:41,480 --> 00:23:44,779
session you know TLS session might list

416
00:23:43,039 --> 00:23:46,580
lasts a few seconds maybe hours if

417
00:23:44,779 --> 00:23:47,870
you're really really lucky messaging

418
00:23:46,580 --> 00:23:49,279
sessions like you know if you had a

419
00:23:47,870 --> 00:23:50,510
messaging session with your mom like how

420
00:23:49,279 --> 00:23:53,630
long is that going to last it's like

421
00:23:50,510 --> 00:23:55,399
months years forever right and all of

422
00:23:53,630 --> 00:23:57,830
that is compromised window right so

423
00:23:55,399 --> 00:23:59,090
you've got big compromised surface here

424
00:23:57,830 --> 00:24:01,010
you've got lots of people you got lots

425
00:23:59,090 --> 00:24:02,149
of time and the upshot is especially

426
00:24:01,010 --> 00:24:04,399
when you have the fact that a lot of

427
00:24:02,149 --> 00:24:07,280
these devices are mobile you have a high

428
00:24:04,399 --> 00:24:08,870
degree of certainty that sometime in all

429
00:24:07,280 --> 00:24:09,918
that space of this this messaging

430
00:24:08,870 --> 00:24:11,239
session someone's going to get

431
00:24:09,919 --> 00:24:11,720
compromised and something's going to

432
00:24:11,240 --> 00:24:12,950
leak and so

433
00:24:11,720 --> 00:24:15,110
things gonna go bad and what that means

434
00:24:12,950 --> 00:24:16,460
is we need to be robust with regard to

435
00:24:15,110 --> 00:24:17,570
those things and so here's where we

436
00:24:16,460 --> 00:24:19,789
really get to the importance of those

437
00:24:17,570 --> 00:24:22,460
forward security and post compromised

438
00:24:19,789 --> 00:24:23,720
security properties so these are terms

439
00:24:22,460 --> 00:24:24,980
that are probably pretty familiar to

440
00:24:23,720 --> 00:24:28,280
people by now especially forward

441
00:24:24,980 --> 00:24:30,080
security but they kind of acquire extra

442
00:24:28,280 --> 00:24:32,178
significance in this messaging context

443
00:24:30,080 --> 00:24:34,730
because you have that large compromised

444
00:24:32,179 --> 00:24:37,309
surface over the session so the point of

445
00:24:34,730 --> 00:24:39,500
both of these is to effectively limit

446
00:24:37,309 --> 00:24:42,080
blast radius so someone's compromised as

447
00:24:39,500 --> 00:24:44,090
a point in time for when security says

448
00:24:42,080 --> 00:24:46,490
you know they don't get things that

449
00:24:44,090 --> 00:24:49,340
happened before the compromise that

450
00:24:46,490 --> 00:24:51,530
happened and post compromised security

451
00:24:49,340 --> 00:24:53,149
says that we can take some action once

452
00:24:51,530 --> 00:24:54,918
the compromise is over and we're know

453
00:24:53,150 --> 00:24:57,260
we're in a better state we can take some

454
00:24:54,919 --> 00:25:00,350
action to restore that session to a good

455
00:24:57,260 --> 00:25:01,700
state and lock the personnel so we we

456
00:25:00,350 --> 00:25:03,168
have these kind of ceremonies I've done

457
00:25:01,700 --> 00:25:05,900
it noted by the dotted lines here

458
00:25:03,169 --> 00:25:08,840
actions we can take in the protocol that

459
00:25:05,900 --> 00:25:10,720
lock someone out of the history and lock

460
00:25:08,840 --> 00:25:12,350
someone out of future messages and that

461
00:25:10,720 --> 00:25:15,890
kind of what we're trying to achieve

462
00:25:12,350 --> 00:25:18,139
there a lot of the crypto here so want

463
00:25:15,890 --> 00:25:20,120
to recognize some of the prior art here

464
00:25:18,140 --> 00:25:21,260
in light of these properties and the

465
00:25:20,120 --> 00:25:24,678
light of some of the scaling things were

466
00:25:21,260 --> 00:25:25,850
after basically the the things that are

467
00:25:24,679 --> 00:25:27,320
closest to what we're doing here these

468
00:25:25,850 --> 00:25:28,879
client fan-out and send your keys which

469
00:25:27,320 --> 00:25:31,879
are both widely deployed in those apps

470
00:25:28,880 --> 00:25:34,190
I've pointed out earlier and the what we

471
00:25:31,880 --> 00:25:36,620
see here is we've had a challenge in

472
00:25:34,190 --> 00:25:39,169
Prior work in terms of achieving these

473
00:25:36,620 --> 00:25:40,668
good security properties in terms of

474
00:25:39,169 --> 00:25:43,250
forward secrecy and post compromised

475
00:25:40,669 --> 00:25:44,720
security while also being able to scale

476
00:25:43,250 --> 00:25:46,429
well to groups and so that's that's

477
00:25:44,720 --> 00:25:48,320
really kind of the one-line summary of

478
00:25:46,429 --> 00:25:50,659
what we're after with MLS is to get

479
00:25:48,320 --> 00:25:53,090
these modern properties for groups but

480
00:25:50,659 --> 00:25:54,890
with good scaling and I kind of tried to

481
00:25:53,090 --> 00:25:58,970
draw this in a picture in terms of to

482
00:25:54,890 --> 00:25:59,900
compare how things prior are to what

483
00:25:58,970 --> 00:26:01,490
we're working on here and this is

484
00:25:59,900 --> 00:26:04,010
admittedly super hand wavy there's no

485
00:26:01,490 --> 00:26:06,110
know you know there's fades in the graph

486
00:26:04,010 --> 00:26:08,780
there's no units on the axes but the

487
00:26:06,110 --> 00:26:10,250
idea is that you know the top of each

488
00:26:08,780 --> 00:26:11,750
bar where it fades out is kind of the

489
00:26:10,250 --> 00:26:14,570
worst case in the common cases wherever

490
00:26:11,750 --> 00:26:15,950
it's solid but you can see here with

491
00:26:14,570 --> 00:26:17,149
client fan-out which is the thing to

492
00:26:15,950 --> 00:26:18,980
have in mind there's things like s/mime

493
00:26:17,150 --> 00:26:21,260
and PGP which get reflected and some

494
00:26:18,980 --> 00:26:22,789
more modern stuff as well with that it's

495
00:26:21,260 --> 00:26:24,710
it's all linear all the time you just

496
00:26:22,789 --> 00:26:26,389
encrypt to everybody in parallel

497
00:26:24,710 --> 00:26:28,509
it's it's very simple it's very easy to

498
00:26:26,389 --> 00:26:31,428
think about but you have a very

499
00:26:28,509 --> 00:26:33,740
straightforward very bad pert well not

500
00:26:31,429 --> 00:26:36,350
great performance the slightly more

501
00:26:33,740 --> 00:26:38,059
modern stuff with sender keys does

502
00:26:36,350 --> 00:26:40,070
trades a little bit it trades some bad

503
00:26:38,059 --> 00:26:41,570
performance in some rare cases so you're

504
00:26:40,070 --> 00:26:42,769
going to create a group once and you're

505
00:26:41,570 --> 00:26:45,379
going to add more than you remove

506
00:26:42,769 --> 00:26:46,639
probably so it trades off some bad

507
00:26:45,379 --> 00:26:48,980
performance in those cases in exchange

508
00:26:46,639 --> 00:26:50,360
for constant time messaging and so what

509
00:26:48,980 --> 00:26:52,730
I'll talk about in terms of the protocol

510
00:26:50,360 --> 00:26:55,490
we did with we're doing for MLS is to

511
00:26:52,730 --> 00:26:57,200
try and bring those sometimes quadratic

512
00:26:55,490 --> 00:26:58,610
things down to worst-case linear and

513
00:26:57,200 --> 00:27:00,499
then bring some of the things that are

514
00:26:58,610 --> 00:27:02,840
linear down to log or constant time so

515
00:27:00,499 --> 00:27:04,369
that that's kind of the state as of the

516
00:27:02,840 --> 00:27:08,178
current draft of the protocol obviously

517
00:27:04,369 --> 00:27:09,590
we're hoping to do better if we can so

518
00:27:08,179 --> 00:27:11,269
wanted to briefly review the history of

519
00:27:09,590 --> 00:27:12,889
this because it touches actually on on

520
00:27:11,269 --> 00:27:14,629
real-world crypto we have kind of a

521
00:27:12,889 --> 00:27:16,610
pulse here around real-world cryptos so

522
00:27:14,629 --> 00:27:18,139
the the deep history goes back to 2015

523
00:27:16,610 --> 00:27:19,908
when John Milliken from face book and I

524
00:27:18,139 --> 00:27:21,350
were first introduced and what was

525
00:27:19,909 --> 00:27:22,490
interesting was we didn't know it at the

526
00:27:21,350 --> 00:27:23,959
time we were both working on this

527
00:27:22,490 --> 00:27:27,169
problem in parallel from separate

528
00:27:23,960 --> 00:27:28,820
threads and in 2017 John working with

529
00:27:27,169 --> 00:27:31,490
some folks at Oxford published this this

530
00:27:28,820 --> 00:27:33,230
ePrint on ends two N's encryption which

531
00:27:31,490 --> 00:27:35,690
got assigned the number 666 and the

532
00:27:33,230 --> 00:27:37,519
register put that that graphic but that

533
00:27:35,690 --> 00:27:38,749
when they printed it but what that

534
00:27:37,519 --> 00:27:40,429
caused it we had this kind of like

535
00:27:38,749 --> 00:27:42,919
crossing the streams sparks start to fly

536
00:27:40,429 --> 00:27:44,600
it's kind of neat to kind of memorialize

537
00:27:42,919 --> 00:27:46,730
that moment so I pinged John on Facebook

538
00:27:44,600 --> 00:27:48,619
and said hey um maybe we should do

539
00:27:46,730 --> 00:27:50,419
something about this messaging thing and

540
00:27:48,619 --> 00:27:51,740
so at that point things started to come

541
00:27:50,419 --> 00:27:52,970
together occur and I've been working on

542
00:27:51,740 --> 00:27:54,830
finding people who are interested in

543
00:27:52,970 --> 00:27:55,820
working on this and John had kind of

544
00:27:54,830 --> 00:27:57,470
some connections in the academic

545
00:27:55,820 --> 00:27:58,879
community and so we started to come

546
00:27:57,470 --> 00:28:01,279
together we had some workshops among

547
00:27:58,879 --> 00:28:02,389
these folks to discuss what problem we

548
00:28:01,279 --> 00:28:04,669
were gonna try to address and how we

549
00:28:02,389 --> 00:28:07,549
might try to address it and then by the

550
00:28:04,669 --> 00:28:09,350
time we got to about mid 2018 we had

551
00:28:07,549 --> 00:28:11,690
enough that we thought we could pitch in

552
00:28:09,350 --> 00:28:13,248
working groups the MLS and got to the

553
00:28:11,690 --> 00:28:15,799
IETF and got a working group established

554
00:28:13,249 --> 00:28:17,179
and so now we're kind of up to today

555
00:28:15,799 --> 00:28:19,070
we've had a few meetings we're actually

556
00:28:17,179 --> 00:28:20,450
making progress we're on that I think

557
00:28:19,070 --> 00:28:22,428
the fourth or fifth draft of the

558
00:28:20,450 --> 00:28:24,590
protocol and it actually has some

559
00:28:22,429 --> 00:28:26,480
compelling secure security properties I

560
00:28:24,590 --> 00:28:28,189
think we'll get some verification later

561
00:28:26,480 --> 00:28:31,639
but it has some some good looking

562
00:28:28,190 --> 00:28:34,789
performance properties at least so

563
00:28:31,639 --> 00:28:37,248
they'll slip into the protocol so this

564
00:28:34,789 --> 00:28:38,480
is kind of the the playschool high level

565
00:28:37,249 --> 00:28:40,340
conceptual

566
00:28:38,480 --> 00:28:42,770
all to have in mind for how the protocol

567
00:28:40,340 --> 00:28:45,080
is gonna work so let's start on the top

568
00:28:42,770 --> 00:28:46,668
left we have this tree that encapsulates

569
00:28:45,080 --> 00:28:48,678
the state of a group in a given time

570
00:28:46,669 --> 00:28:50,540
I'll talk about what is in the tree in a

571
00:28:48,679 --> 00:28:52,669
minute but kind of think how do you go

572
00:28:50,540 --> 00:28:55,790
from linear to log you arrange things in

573
00:28:52,669 --> 00:28:56,929
a tree that's computer science 101 so

574
00:28:55,790 --> 00:28:59,840
we're going to represent the state at a

575
00:28:56,929 --> 00:29:01,160
given time by a tree and that tree we're

576
00:28:59,840 --> 00:29:02,780
going to derive from that tree what

577
00:29:01,160 --> 00:29:04,610
we'll call an epic secret which is going

578
00:29:02,780 --> 00:29:06,770
to be a secret that is shared by the

579
00:29:04,610 --> 00:29:07,760
group at a given time and that's what

580
00:29:06,770 --> 00:29:09,410
we're going to do how we're going to get

581
00:29:07,760 --> 00:29:10,610
this the application secret so that

582
00:29:09,410 --> 00:29:12,590
we'll use for things like message

583
00:29:10,610 --> 00:29:14,449
encryption or authentication the actual

584
00:29:12,590 --> 00:29:15,709
stuff we want to do with this most of

585
00:29:14,450 --> 00:29:17,390
the work we're going to do here is to

586
00:29:15,710 --> 00:29:20,809
just focus on the key exchange and we'll

587
00:29:17,390 --> 00:29:22,250
punt the the actual work of getting the

588
00:29:20,809 --> 00:29:25,190
security and applying the keys to

589
00:29:22,250 --> 00:29:26,570
someone to other stuff so we've got this

590
00:29:25,190 --> 00:29:28,730
tree and the epic secret and the

591
00:29:26,570 --> 00:29:30,649
application secret that are in operation

592
00:29:28,730 --> 00:29:32,480
at a given time but like we said we want

593
00:29:30,650 --> 00:29:34,280
to support dynamic groups and so

594
00:29:32,480 --> 00:29:35,929
periodically I want to make a change on

595
00:29:34,280 --> 00:29:37,940
so when you're joined and you have that

596
00:29:35,929 --> 00:29:40,010
epic secret you're part of the group you

597
00:29:37,940 --> 00:29:42,230
can generate protocol messages that will

598
00:29:40,010 --> 00:29:43,549
then update the tree and change the tree

599
00:29:42,230 --> 00:29:46,309
change the state of the group add

600
00:29:43,549 --> 00:29:47,960
someone remove someone etc that will

601
00:29:46,309 --> 00:29:49,580
then get reflected in the EPOXI cuts and

602
00:29:47,960 --> 00:29:50,510
update you know the secrets the group

603
00:29:49,580 --> 00:29:53,960
hold so that's that's kind of the

604
00:29:50,510 --> 00:29:57,650
overall big picture flow here let's take

605
00:29:53,960 --> 00:29:59,600
a moment moment of Zen like it get

606
00:29:57,650 --> 00:30:01,010
friendly with trees like think about how

607
00:29:59,600 --> 00:30:02,540
lovely trees can be because there's

608
00:30:01,010 --> 00:30:06,020
going to be a lot on the next few slides

609
00:30:02,540 --> 00:30:07,639
so just get prepared so like I said how

610
00:30:06,020 --> 00:30:09,350
you might turn something from your log

611
00:30:07,640 --> 00:30:11,419
you make it into a tree so they're the

612
00:30:09,350 --> 00:30:14,540
core kind of real crypto we've got going

613
00:30:11,419 --> 00:30:17,600
on here as we arrange a key a tree of

614
00:30:14,540 --> 00:30:19,280
key pairs and we arrange it so that we

615
00:30:17,600 --> 00:30:22,129
have this invariance I call the tree

616
00:30:19,280 --> 00:30:24,168
invariance which is that the private key

617
00:30:22,130 --> 00:30:30,440
for a given intermediate node in the

618
00:30:24,169 --> 00:30:32,030
tree is is known hello the private key

619
00:30:30,440 --> 00:30:35,600
for an intermediate node is known to a

620
00:30:32,030 --> 00:30:38,030
leaf node if and only if that leaf node

621
00:30:35,600 --> 00:30:40,070
is an is descendants of the intermediate

622
00:30:38,030 --> 00:30:41,809
node so I should say as well we're

623
00:30:40,070 --> 00:30:43,460
putting our members of the group I'm

624
00:30:41,809 --> 00:30:48,270
getting some feedback here can we drop

625
00:30:43,460 --> 00:30:53,200
that back a little bit AV folks oh well

626
00:30:48,270 --> 00:30:55,180
John's right so let me go you drop back

627
00:30:53,200 --> 00:30:58,900
a little bit so we've got the members of

628
00:30:55,180 --> 00:31:00,760
the group of the leaves here and then

629
00:30:58,900 --> 00:31:01,750
the intermediate nodes kind of represent

630
00:31:00,760 --> 00:31:04,450
collectivities

631
00:31:01,750 --> 00:31:06,820
subgroups of the overall group and we do

632
00:31:04,450 --> 00:31:09,310
that by having this tree invariance so

633
00:31:06,820 --> 00:31:12,280
that the private key say for J in this

634
00:31:09,310 --> 00:31:14,860
diagram is known to a B C and D but not

635
00:31:12,280 --> 00:31:17,560
en F and this is kind of a neat property

636
00:31:14,860 --> 00:31:19,209
it enables us to basically use these key

637
00:31:17,560 --> 00:31:20,830
pairs that are at intermediate points in

638
00:31:19,210 --> 00:31:23,170
the tree to represent these sub groups

639
00:31:20,830 --> 00:31:24,790
and then you can use those key pairs to

640
00:31:23,170 --> 00:31:27,310
do diffie-hellman or to do things like

641
00:31:24,790 --> 00:31:30,330
ec IES to do encryption that is

642
00:31:27,310 --> 00:31:32,710
accessible only to that sub group

643
00:31:30,330 --> 00:31:35,409
another property is that the root of

644
00:31:32,710 --> 00:31:37,510
that because it's the root which is an

645
00:31:35,410 --> 00:31:39,370
ancestor of everything is known to the

646
00:31:37,510 --> 00:31:41,560
whole group and so you can use that as a

647
00:31:39,370 --> 00:31:43,780
shared secret that everyone is in the

648
00:31:41,560 --> 00:31:45,370
group knows at a given point in time and

649
00:31:43,780 --> 00:31:47,590
so the whole point of the protocol like

650
00:31:45,370 --> 00:31:50,020
I said the protocol messages update this

651
00:31:47,590 --> 00:31:52,330
tree and so the protocol maintains this

652
00:31:50,020 --> 00:31:54,010
tree as an accurate representation of

653
00:31:52,330 --> 00:31:56,590
the group while maintaining that tree

654
00:31:54,010 --> 00:31:59,410
invariant so the first step we took at

655
00:31:56,590 --> 00:32:02,409
this was due to crime Catriona cameras

656
00:31:59,410 --> 00:32:04,030
at all from from oxford what's called

657
00:32:02,410 --> 00:32:07,090
asynchronous or actual trees or art and

658
00:32:04,030 --> 00:32:08,740
the way that construct works is you take

659
00:32:07,090 --> 00:32:11,199
the you generate the intermediate nodes

660
00:32:08,740 --> 00:32:12,970
from their children so in this case you

661
00:32:11,200 --> 00:32:14,890
you take a and B and you do a

662
00:32:12,970 --> 00:32:17,080
diffie-hellman exchange between them to

663
00:32:14,890 --> 00:32:20,740
generate the private key for that parent

664
00:32:17,080 --> 00:32:23,620
node E and so you can see if a se knows

665
00:32:20,740 --> 00:32:25,210
the public keys for B and F it can do

666
00:32:23,620 --> 00:32:27,520
the diffie-hellman exchanges to generate

667
00:32:25,210 --> 00:32:29,710
the private keys up to the root this

668
00:32:27,520 --> 00:32:31,450
this when you write it down yinz it's

669
00:32:29,710 --> 00:32:33,100
very easy to see how this leads to a log

670
00:32:31,450 --> 00:32:36,190
depth update if you want to change a

671
00:32:33,100 --> 00:32:38,679
leaf key you can send a log number of

672
00:32:36,190 --> 00:32:41,020
things to update them the nodes along

673
00:32:38,680 --> 00:32:42,910
paths of the route and so that that was

674
00:32:41,020 --> 00:32:45,520
what it was discussed in this original

675
00:32:42,910 --> 00:32:48,460
paper and and kind of the inspiration

676
00:32:45,520 --> 00:32:49,780
for this whole thing unfortunately when

677
00:32:48,460 --> 00:32:51,670
we sat down to try and figure out how to

678
00:32:49,780 --> 00:32:53,800
do adds and removes and kind of make the

679
00:32:51,670 --> 00:32:55,600
tree dynamic in that way we discovered

680
00:32:53,800 --> 00:32:58,540
that we couldn't do it without what we

681
00:32:55,600 --> 00:33:00,159
call a double join property basically no

682
00:32:58,540 --> 00:33:01,418
matter how you arrange it you end up

683
00:33:00,160 --> 00:33:03,639
violating this tree in there

684
00:33:01,419 --> 00:33:06,459
so you end up with some member of the

685
00:33:03,639 --> 00:33:08,918
group holding a private key for the tree

686
00:33:06,459 --> 00:33:10,929
node that it shouldn't have and it comes

687
00:33:08,919 --> 00:33:12,669
down to the oh you can't add someone and

688
00:33:10,929 --> 00:33:14,200
unpopulated nodes above them without

689
00:33:12,669 --> 00:33:16,149
also finding out those nodes you can't

690
00:33:14,200 --> 00:33:17,489
kind of obliviously do it at least we

691
00:33:16,149 --> 00:33:20,109
haven't figured out two anyway so

692
00:33:17,489 --> 00:33:21,789
suggestions welcome but we then took a

693
00:33:20,109 --> 00:33:25,119
second just have at this kind of

694
00:33:21,789 --> 00:33:27,039
swapping out dh4 tree cam and no longer

695
00:33:25,119 --> 00:33:29,589
generating an intermediate node from

696
00:33:27,039 --> 00:33:31,149
both of its children but setting the

697
00:33:29,589 --> 00:33:33,759
value of an intermediate node when one

698
00:33:31,149 --> 00:33:35,829
of those children updates so if when we

699
00:33:33,759 --> 00:33:38,440
update a leaf word up lighting updating

700
00:33:35,829 --> 00:33:41,320
D here what we do is we generate the

701
00:33:38,440 --> 00:33:44,619
private the secrets for the parent nodes

702
00:33:41,320 --> 00:33:46,389
by just hashing up the tree so each the

703
00:33:44,619 --> 00:33:48,488
secret value for each parent is the hash

704
00:33:46,389 --> 00:33:49,869
of the child that's updating so it's not

705
00:33:48,489 --> 00:33:51,219
that has nothing to do with the other

706
00:33:49,869 --> 00:33:53,559
child it's just set by the latest

707
00:33:51,219 --> 00:33:55,929
updated child but what we can do then to

708
00:33:53,559 --> 00:33:57,759
make the rest of the tree aware of this

709
00:33:55,929 --> 00:34:00,039
since they can't compute it via via

710
00:33:57,759 --> 00:34:02,049
something like th is we take that new

711
00:34:00,039 --> 00:34:03,519
secret that's been hashed and we encrypt

712
00:34:02,049 --> 00:34:07,239
it to the other folks who are supposed

713
00:34:03,519 --> 00:34:09,579
to have it so you know nodes see here is

714
00:34:07,239 --> 00:34:13,329
supposed to have the secret for node F

715
00:34:09,579 --> 00:34:15,309
because it's a child and so when D does

716
00:34:13,329 --> 00:34:19,389
this update it takes that secret F and

717
00:34:15,309 --> 00:34:21,759
encrypts it to node C what's nice is it

718
00:34:19,389 --> 00:34:23,230
so if you do this up repeatedly up the

719
00:34:21,759 --> 00:34:25,210
tree you end up with with an overall

720
00:34:23,230 --> 00:34:28,089
operation that does two things it

721
00:34:25,210 --> 00:34:30,609
encrypts some new entropy to everybody

722
00:34:28,089 --> 00:34:33,129
in the tree except the old version of

723
00:34:30,609 --> 00:34:36,429
the leaf that's updating so if D was

724
00:34:33,129 --> 00:34:40,750
some value X before X is no longer part

725
00:34:36,429 --> 00:34:42,759
of the tree D is so you've encrypted

726
00:34:40,750 --> 00:34:45,309
some new entropy to everyone except the

727
00:34:42,759 --> 00:34:47,230
old value and you've also updated those

728
00:34:45,309 --> 00:34:49,450
people's you have the tree so that it

729
00:34:47,230 --> 00:34:51,879
reflects the new value and they can do

730
00:34:49,449 --> 00:34:53,980
operations with it now as well so it's

731
00:34:51,879 --> 00:34:56,078
kind of a nice combination fact which

732
00:34:53,980 --> 00:34:57,339
gives us exactly what we it turns out to

733
00:34:56,079 --> 00:35:01,990
give us exactly what we need for updates

734
00:34:57,339 --> 00:35:04,328
and removes etc so another nice property

735
00:35:01,990 --> 00:35:06,308
of this which gets us out of this double

736
00:35:04,329 --> 00:35:08,470
joint problem is that because you're

737
00:35:06,309 --> 00:35:11,319
doing encryption instead of D H and

738
00:35:08,470 --> 00:35:13,689
you're not incorporating both children

739
00:35:11,319 --> 00:35:14,860
into the parents value you can have one

740
00:35:13,690 --> 00:35:18,370
of the children one or

741
00:35:14,860 --> 00:35:20,440
both really be blank and you accommodate

742
00:35:18,370 --> 00:35:22,960
that by just falling through so if in

743
00:35:20,440 --> 00:35:26,200
this case D was supposed to encrypt H

744
00:35:22,960 --> 00:35:29,170
the root node to the node that's blank

745
00:35:26,200 --> 00:35:32,080
here but that's not there and so instead

746
00:35:29,170 --> 00:35:34,240
it can encrypt to the leaf nodes a and B

747
00:35:32,080 --> 00:35:37,299
that we're supposed to know and so what

748
00:35:34,240 --> 00:35:39,009
this lets you do is say you know in if I

749
00:35:37,300 --> 00:35:41,110
arrive in a scenario where I would have

750
00:35:39,010 --> 00:35:42,610
to double join where I would instantiate

751
00:35:41,110 --> 00:35:44,560
a node where someone knows the secret

752
00:35:42,610 --> 00:35:46,540
who's not supposed to I just don't set

753
00:35:44,560 --> 00:35:48,490
it I just set it to a blank and so you

754
00:35:46,540 --> 00:35:49,990
can do an ad just by shoving a note on

755
00:35:48,490 --> 00:35:52,540
shoving a leaf onto the end of the tree

756
00:35:49,990 --> 00:35:54,279
and leaving everything else blank and it

757
00:35:52,540 --> 00:35:56,259
you lose some efficiency that way talk

758
00:35:54,280 --> 00:35:57,550
about trade-offs in a moment but the

759
00:35:56,260 --> 00:35:59,110
protocol works and I think we get the

760
00:35:57,550 --> 00:36:00,730
properties we want there are some other

761
00:35:59,110 --> 00:36:02,440
benefits here in terms of performance

762
00:36:00,730 --> 00:36:04,210
and maybe some some better postpone and

763
00:36:02,440 --> 00:36:05,730
properties but tree canvas is kind of

764
00:36:04,210 --> 00:36:08,980
the the mode we're working in right now

765
00:36:05,730 --> 00:36:10,300
so just to give I don't have space don't

766
00:36:08,980 --> 00:36:12,160
have time to go into details but this

767
00:36:10,300 --> 00:36:13,510
kind of gives you the flavor of how you

768
00:36:12,160 --> 00:36:16,660
do updates to this so when you want to

769
00:36:13,510 --> 00:36:19,240
add someone basically you you slam their

770
00:36:16,660 --> 00:36:20,620
pre published public key onto the end of

771
00:36:19,240 --> 00:36:23,529
the tree it's a new leaf don't worry

772
00:36:20,620 --> 00:36:26,859
about the the parents because you can't

773
00:36:23,530 --> 00:36:29,530
set them so just something the blanks so

774
00:36:26,860 --> 00:36:31,930
you add that on and you send the new guy

775
00:36:29,530 --> 00:36:33,310
this a secret that can be used to

776
00:36:31,930 --> 00:36:35,770
compute the next state of the group and

777
00:36:33,310 --> 00:36:37,360
so I hinted before that this gives us a

778
00:36:35,770 --> 00:36:40,420
constant time add you can see there's no

779
00:36:37,360 --> 00:36:42,700
real tree interactions you're just doing

780
00:36:40,420 --> 00:36:44,230
a constant time add a leaf and one

781
00:36:42,700 --> 00:36:46,450
encryption to send the new guy the stuff

782
00:36:44,230 --> 00:36:48,850
so that's it's kind of a cool efficiency

783
00:36:46,450 --> 00:36:51,520
thing at the cost of some some lower

784
00:36:48,850 --> 00:36:55,120
efficiency later like I said a moment

785
00:36:51,520 --> 00:36:57,870
ago this double action of sending some

786
00:36:55,120 --> 00:36:59,770
new entropy to everyone but the updater

787
00:36:57,870 --> 00:37:02,319
kind of gives us exactly what we need

788
00:36:59,770 --> 00:37:03,940
for updates so when you that lets you

789
00:37:02,320 --> 00:37:05,530
update the contribution of that leaf

790
00:37:03,940 --> 00:37:08,350
which gives you post compromised

791
00:37:05,530 --> 00:37:09,610
security hand-wave hand-wave but that's

792
00:37:08,350 --> 00:37:11,440
that is our approach to getting post

793
00:37:09,610 --> 00:37:13,060
compromised security with regard to that

794
00:37:11,440 --> 00:37:14,830
participant so that's that's sufficient

795
00:37:13,060 --> 00:37:16,720
for update and then the only extra thing

796
00:37:14,830 --> 00:37:19,060
you need to do remove is you take the

797
00:37:16,720 --> 00:37:21,339
person you want to remove you send some

798
00:37:19,060 --> 00:37:23,860
extra some new entropy to everyone but

799
00:37:21,340 --> 00:37:25,390
that note and then you blank out that

800
00:37:23,860 --> 00:37:28,180
notes paths of the Ruth and he's now

801
00:37:25,390 --> 00:37:29,140
gone from the group state so high-level

802
00:37:28,180 --> 00:37:30,910
hand-wavy over

803
00:37:29,140 --> 00:37:34,359
you of the protocol because this is a

804
00:37:30,910 --> 00:37:36,129
limited time slot now remember we we in

805
00:37:34,359 --> 00:37:38,828
the big diagram we took the tree we've

806
00:37:36,130 --> 00:37:41,440
made epic secrets out of it that became

807
00:37:38,829 --> 00:37:42,700
the application secrets and this is what

808
00:37:41,440 --> 00:37:44,470
we want to kind of do is do that in a

809
00:37:42,700 --> 00:37:46,538
way that we have a consistent history of

810
00:37:44,470 --> 00:37:48,368
the group so the tree represents the

811
00:37:46,539 --> 00:37:50,980
state of the group at a point in time

812
00:37:48,369 --> 00:37:52,269
and so we take those roots of the tree

813
00:37:50,980 --> 00:37:54,789
which are common which are known to

814
00:37:52,269 --> 00:37:56,828
everybody in the group we use those as

815
00:37:54,789 --> 00:38:00,400
what we call update secrets to feed into

816
00:37:56,829 --> 00:38:02,589
a chain a KDF chain that represents the

817
00:38:00,400 --> 00:38:04,269
history of the group so at each moment

818
00:38:02,589 --> 00:38:06,788
in time where the group has a consistent

819
00:38:04,269 --> 00:38:08,348
state we call that an epoch the tree

820
00:38:06,789 --> 00:38:10,329
contributes to the history and gives us

821
00:38:08,349 --> 00:38:12,279
an epic secret which is also known to

822
00:38:10,329 --> 00:38:13,359
everyone in the group and again which we

823
00:38:12,279 --> 00:38:15,970
use to generate the stuff that we're

824
00:38:13,359 --> 00:38:19,420
going to do real work with and then we

825
00:38:15,970 --> 00:38:21,700
use that to evolve you as we evolved

826
00:38:19,420 --> 00:38:23,410
forward we update the tree and we feed

827
00:38:21,700 --> 00:38:25,439
that in with the prior history of the

828
00:38:23,410 --> 00:38:27,339
group to get the new state of the group

829
00:38:25,440 --> 00:38:29,650
form for what we're going to do the real

830
00:38:27,339 --> 00:38:31,509
work with so that's that's kind of the

831
00:38:29,650 --> 00:38:34,269
overall shape and that's that's kind of

832
00:38:31,510 --> 00:38:35,829
the unauthenticated key exchange part of

833
00:38:34,269 --> 00:38:37,450
it so it has a lot of protocols did we

834
00:38:35,829 --> 00:38:39,519
start with an authentic use exchange and

835
00:38:37,450 --> 00:38:41,529
we add authentication around it this is

836
00:38:39,519 --> 00:38:44,529
pretty serious hardhat area it's the

837
00:38:41,529 --> 00:38:45,910
brand may be like a couple months old in

838
00:38:44,529 --> 00:38:48,279
terms of how long we've been looking at

839
00:38:45,910 --> 00:38:50,140
it hasn't gotten looked at real hard but

840
00:38:48,279 --> 00:38:52,029
the basic idea is we do kind of a sign

841
00:38:50,140 --> 00:38:55,118
plus Mac thing kind of like Sigma kind

842
00:38:52,029 --> 00:38:56,470
of like TLS where we when you send a

843
00:38:55,119 --> 00:38:58,869
message that's going to update the group

844
00:38:56,470 --> 00:39:01,269
state the sender signs that message to

845
00:38:58,869 --> 00:39:03,910
prove it's from him and then we have a

846
00:39:01,269 --> 00:39:05,558
Mac that folds in the new group state to

847
00:39:03,910 --> 00:39:07,029
demonstrate that everyone to confirm

848
00:39:05,559 --> 00:39:09,940
that everyone's end up ended up with the

849
00:39:07,029 --> 00:39:12,519
same group state my lots of similarities

850
00:39:09,940 --> 00:39:13,359
here to TLS and Sigma as as all

851
00:39:12,519 --> 00:39:15,339
mentioned when I get some verification

852
00:39:13,359 --> 00:39:17,109
portion later so that's kind of the

853
00:39:15,339 --> 00:39:19,109
outline of the protocol how do you know

854
00:39:17,109 --> 00:39:22,089
in time I think we're pretty good

855
00:39:19,109 --> 00:39:24,220
excellent exactly I wanted to be so is

856
00:39:22,089 --> 00:39:25,359
it actually secure so like I said before

857
00:39:24,220 --> 00:39:26,769
we're trying to do this thing like we

858
00:39:25,359 --> 00:39:28,598
did with TLS where we have spec

859
00:39:26,769 --> 00:39:30,459
implementation and verification all

860
00:39:28,599 --> 00:39:33,730
going and informing each other as we go

861
00:39:30,460 --> 00:39:36,279
through this and we're still working on

862
00:39:33,730 --> 00:39:38,049
the verification part so we're trying to

863
00:39:36,279 --> 00:39:40,119
follow a lot of precedents where we do

864
00:39:38,049 --> 00:39:41,710
have a lot of results so TLS there's

865
00:39:40,119 --> 00:39:42,760
been a lot of good research verifying it

866
00:39:41,710 --> 00:39:45,070
security properties

867
00:39:42,760 --> 00:39:47,530
art the first version of the tree stuff

868
00:39:45,070 --> 00:39:49,560
had some some work in the paper there

869
00:39:47,530 --> 00:39:52,540
but we're still working on kind of

870
00:39:49,560 --> 00:39:54,190
adapting those findings to tree cam

871
00:39:52,540 --> 00:39:55,779
so whatever authentication we end up

872
00:39:54,190 --> 00:39:57,280
coming up with from that drafty stuff I

873
00:39:55,780 --> 00:39:58,300
just presented and then of course we

874
00:39:57,280 --> 00:40:00,520
need to fit the whole system together

875
00:39:58,300 --> 00:40:02,380
now there's there's some kind of

876
00:40:00,520 --> 00:40:03,460
scientific challenges here when you look

877
00:40:02,380 --> 00:40:05,350
at the tools that are out there for

878
00:40:03,460 --> 00:40:07,480
doing formal verification we've got

879
00:40:05,350 --> 00:40:08,650
these forward secrecy inputs compromised

880
00:40:07,480 --> 00:40:10,869
security that you're trying to get with

881
00:40:08,650 --> 00:40:13,060
regard to end points regard to things

882
00:40:10,869 --> 00:40:14,560
over time and we've got dynamic groups

883
00:40:13,060 --> 00:40:15,820
of arbitrary size so whatever

884
00:40:14,560 --> 00:40:17,230
verification tools you're doing like

885
00:40:15,820 --> 00:40:19,869
better be really good at induction

886
00:40:17,230 --> 00:40:21,760
because they need to be able to verify

887
00:40:19,869 --> 00:40:23,410
properties that could apply to two

888
00:40:21,760 --> 00:40:24,850
people could apply to two thousand

889
00:40:23,410 --> 00:40:27,368
people could apply to twenty million

890
00:40:24,850 --> 00:40:28,299
people so there there's some challenges

891
00:40:27,369 --> 00:40:30,400
here for the community that's kind of

892
00:40:28,300 --> 00:40:32,650
getting toward future directions things

893
00:40:30,400 --> 00:40:34,210
where we could really use some help so

894
00:40:32,650 --> 00:40:36,040
where are we going I've hit it a couple

895
00:40:34,210 --> 00:40:38,380
times that we've we've taken some

896
00:40:36,040 --> 00:40:40,930
trade-offs here as we've tried to come

897
00:40:38,380 --> 00:40:43,119
up with a protocol one major step we

898
00:40:40,930 --> 00:40:44,470
took was to have shared group state so

899
00:40:43,119 --> 00:40:46,330
if you look at something like client

900
00:40:44,470 --> 00:40:48,910
fan-out where you're just parallel

901
00:40:46,330 --> 00:40:50,380
encrypting to each different recipient

902
00:40:48,910 --> 00:40:52,270
there's no common state to the group and

903
00:40:50,380 --> 00:40:54,550
as a result you get linear performance

904
00:40:52,270 --> 00:40:56,259
everywhere so we have the shared group

905
00:40:54,550 --> 00:40:59,140
state which is this tree that everyone

906
00:40:56,260 --> 00:41:01,270
has a slice of and we evolve that as

907
00:40:59,140 --> 00:41:03,100
everybody that involves that state in

908
00:41:01,270 --> 00:41:04,930
time in parallel but what that means is

909
00:41:03,100 --> 00:41:06,310
you know we get lots of good performance

910
00:41:04,930 --> 00:41:07,690
out of that all these green things on

911
00:41:06,310 --> 00:41:09,790
the left-hand side we get log size

912
00:41:07,690 --> 00:41:12,550
things for some things we had constant

913
00:41:09,790 --> 00:41:14,710
time stuff in other cases but what it

914
00:41:12,550 --> 00:41:17,140
means if we have some really challenging

915
00:41:14,710 --> 00:41:18,790
things for deployment like the key

916
00:41:17,140 --> 00:41:20,770
exchange messages needs to have to be

917
00:41:18,790 --> 00:41:22,690
received by all recipients in the same

918
00:41:20,770 --> 00:41:24,100
order which might not seem challenging

919
00:41:22,690 --> 00:41:25,750
but in the real world where you've got

920
00:41:24,100 --> 00:41:28,118
you know a diverse set of participants

921
00:41:25,750 --> 00:41:30,570
all receiving messages asynchronously it

922
00:41:28,119 --> 00:41:32,530
can be challenging to assure an

923
00:41:30,570 --> 00:41:34,210
interesting cryptographic problem we

924
00:41:32,530 --> 00:41:35,950
have is that we have this complicated

925
00:41:34,210 --> 00:41:38,890
tree state which we're doing updates to

926
00:41:35,950 --> 00:41:41,109
over as the group changes and it's

927
00:41:38,890 --> 00:41:43,900
totally possible to construct updates

928
00:41:41,109 --> 00:41:45,910
things that look valid that look like

929
00:41:43,900 --> 00:41:47,859
valid updates to the tree which are

930
00:41:45,910 --> 00:41:49,779
valid kind of from one point up and lock

931
00:41:47,859 --> 00:41:52,270
out everyone on this side so a malicious

932
00:41:49,780 --> 00:41:52,840
insider can totally screw up the state

933
00:41:52,270 --> 00:41:54,160
of the group

934
00:41:52,840 --> 00:41:55,840
I mean ways that are really hard to

935
00:41:54,160 --> 00:41:56,529
recover from so I think there's some

936
00:41:55,840 --> 00:41:58,750
opportunity

937
00:41:56,530 --> 00:42:00,100
you know applying zero-knowledge roots

938
00:41:58,750 --> 00:42:01,570
or something like that to enable the

939
00:42:00,100 --> 00:42:04,480
group to verify that what looks like a

940
00:42:01,570 --> 00:42:06,430
valid update actually is similar we've

941
00:42:04,480 --> 00:42:08,470
taken this tree cam approach with blank

942
00:42:06,430 --> 00:42:09,940
nodes to avoid the double join problem

943
00:42:08,470 --> 00:42:12,850
and to get this constant time add thing

944
00:42:09,940 --> 00:42:15,670
which is pretty slick but the cost there

945
00:42:12,850 --> 00:42:17,200
is that the clients have to maintain the

946
00:42:15,670 --> 00:42:18,790
whole tree they don't have they can't

947
00:42:17,200 --> 00:42:21,490
maintain just a slice of it they really

948
00:42:18,790 --> 00:42:24,190
have to maintain a whole view and um if

949
00:42:21,490 --> 00:42:25,779
you create with just the leaves you end

950
00:42:24,190 --> 00:42:27,850
up with what we've been calling warm-up

951
00:42:25,780 --> 00:42:29,380
time so things basically the the first

952
00:42:27,850 --> 00:42:31,299
few things you do with your group are

953
00:42:29,380 --> 00:42:34,860
linear time and gradually they converge

954
00:42:31,300 --> 00:42:38,110
down to log or constant time and so

955
00:42:34,860 --> 00:42:40,020
we've got if you think back to that bar

956
00:42:38,110 --> 00:42:42,280
chart I have wherever these fades like

957
00:42:40,020 --> 00:42:44,050
login the constant common case and

958
00:42:42,280 --> 00:42:45,640
linear in the worst case that's the kind

959
00:42:44,050 --> 00:42:47,320
of things we're trying to figure out how

960
00:42:45,640 --> 00:42:49,569
to address can't we really force it down

961
00:42:47,320 --> 00:42:51,010
to the log case in all cases so really

962
00:42:49,570 --> 00:42:53,260
that that whole right-hand column is

963
00:42:51,010 --> 00:42:54,460
like help-wanted you know those are

964
00:42:53,260 --> 00:42:55,930
those are some good good research

965
00:42:54,460 --> 00:42:58,240
problems to chew on we'd be glad to have

966
00:42:55,930 --> 00:42:59,859
contributions there to kind of get the

967
00:42:58,240 --> 00:43:02,140
benefits we want on the left hand side

968
00:42:59,860 --> 00:43:06,340
while not having to accept you know the

969
00:43:02,140 --> 00:43:08,080
drawbacks on the right hand side so kind

970
00:43:06,340 --> 00:43:10,210
of getting to the end here where we are

971
00:43:08,080 --> 00:43:12,130
in terms of kind of concrete stuff we've

972
00:43:10,210 --> 00:43:14,680
got a bunch of documents in progress in

973
00:43:12,130 --> 00:43:16,240
the IETF that describe the architecture

974
00:43:14,680 --> 00:43:17,980
for how we're doing this and the

975
00:43:16,240 --> 00:43:19,810
specification for the protocol for you

976
00:43:17,980 --> 00:43:21,960
know concretely how you do the crypto

977
00:43:19,810 --> 00:43:25,330
math and how you arrange things how you

978
00:43:21,960 --> 00:43:27,370
format the messages etc those are still

979
00:43:25,330 --> 00:43:30,220
like we're on the like I said the fourth

980
00:43:27,370 --> 00:43:32,259
or fifth draft which means we've got

981
00:43:30,220 --> 00:43:33,609
kind of a pretty good baseline we kind

982
00:43:32,260 --> 00:43:35,860
of have our feet under us but there's a

983
00:43:33,610 --> 00:43:37,660
lot of to dues here there's all those

984
00:43:35,860 --> 00:43:38,950
red boxes on the previous slide and a

985
00:43:37,660 --> 00:43:40,750
bunch of features that we haven't

986
00:43:38,950 --> 00:43:43,000
figured out how to add yet as well so if

987
00:43:40,750 --> 00:43:44,910
you're a specification inclined you know

988
00:43:43,000 --> 00:43:47,140
like to build protocols like there's

989
00:43:44,910 --> 00:43:49,029
lots of contributions to be made here

990
00:43:47,140 --> 00:43:51,069
we'd be glad to have them likewise if

991
00:43:49,030 --> 00:43:53,050
your code inclined we have a few stacks

992
00:43:51,070 --> 00:43:55,240
that people have started on in a variety

993
00:43:53,050 --> 00:43:58,600
of languages ranging from you know

994
00:43:55,240 --> 00:44:00,640
ancient stuff like C++ it's a modern

995
00:43:58,600 --> 00:44:03,390
stuff like rust and F star I'm not sure

996
00:44:00,640 --> 00:44:05,500
where to put JavaScript in that taxonomy

997
00:44:03,390 --> 00:44:07,270
but we've got a variety of stacks out

998
00:44:05,500 --> 00:44:09,760
there that are starting to mature we're

999
00:44:07,270 --> 00:44:10,310
starting to do Interop testing so if you

1000
00:44:09,760 --> 00:44:12,350
wanted to come

1001
00:44:10,310 --> 00:44:13,430
to those or startup new ones or you know

1002
00:44:12,350 --> 00:44:15,319
even help us figure out how to do

1003
00:44:13,430 --> 00:44:16,910
interrupt testing or you know put it

1004
00:44:15,320 --> 00:44:18,680
into practice in some case be glad to

1005
00:44:16,910 --> 00:44:21,049
have contributions there so that we can

1006
00:44:18,680 --> 00:44:23,680
help learn from that as we develop the

1007
00:44:21,050 --> 00:44:27,050
protocol and do the verifications better

1008
00:44:23,680 --> 00:44:29,240
so that's what I have here's the links

1009
00:44:27,050 --> 00:44:31,790
to documents cash flow register there

1010
00:44:29,240 --> 00:44:33,379
are dot Rox domains so you can easily

1011
00:44:31,790 --> 00:44:36,410
get to the protocol in the architecture

1012
00:44:33,380 --> 00:44:48,440
that way but I'm glad to have questions

1013
00:44:36,410 --> 00:44:55,730
comments contributions thank you their

1014
00:44:48,440 --> 00:45:02,060
mics along the corridor so don't think

1015
00:44:55,730 --> 00:45:03,950
the mics on the side might go yeah I'm

1016
00:45:02,060 --> 00:45:05,450
not sure the linear size state on the

1017
00:45:03,950 --> 00:45:08,689
clients is actually a problem because

1018
00:45:05,450 --> 00:45:10,399
you have a there's another I mean a lot

1019
00:45:08,690 --> 00:45:12,260
of what you're trying to prevent with

1020
00:45:10,400 --> 00:45:14,180
forward security is these ghosts use

1021
00:45:12,260 --> 00:45:15,680
their problems like somebody gets a

1022
00:45:14,180 --> 00:45:17,720
phone and adds somebody and this is

1023
00:45:15,680 --> 00:45:19,310
something that nobody's nobody really is

1024
00:45:17,720 --> 00:45:21,220
a good solution to but if we do it for

1025
00:45:19,310 --> 00:45:26,450
good we need a good solution to it and

1026
00:45:21,220 --> 00:45:28,399
at that point at that point you're going

1027
00:45:26,450 --> 00:45:30,919
to probably need this linear time state

1028
00:45:28,400 --> 00:45:34,270
anyway or maybe not I don't know but the

1029
00:45:30,920 --> 00:45:36,890
real question I wanted to ask is so in

1030
00:45:34,270 --> 00:45:38,420
the asynchronous ratcheting trees paper

1031
00:45:36,890 --> 00:45:40,009
made me a little bit nervous about these

1032
00:45:38,420 --> 00:45:44,870
ghost users because people could just

1033
00:45:40,010 --> 00:45:49,100
have their own sub trees in in in this

1034
00:45:44,870 --> 00:45:51,020
design will so it sounds like the entire

1035
00:45:49,100 --> 00:45:53,660
tree will actually be verifiable to the

1036
00:45:51,020 --> 00:45:55,460
participants which should eliminate sort

1037
00:45:53,660 --> 00:45:58,339
which should be makes solving the ghost

1038
00:45:55,460 --> 00:45:59,510
user problem at least possible yeah so

1039
00:45:58,340 --> 00:46:00,980
there's a one aspect of the state I'd

1040
00:45:59,510 --> 00:46:04,040
really talk about is that the the

1041
00:46:00,980 --> 00:46:06,410
clients also maintain an idea of who is

1042
00:46:04,040 --> 00:46:08,330
the identities of the parties who are at

1043
00:46:06,410 --> 00:46:10,040
those leaves and the idea is that

1044
00:46:08,330 --> 00:46:11,660
there's some sort of authentication at

1045
00:46:10,040 --> 00:46:14,600
that leaf point so you have

1046
00:46:11,660 --> 00:46:16,819
authentication of the leaves and we've

1047
00:46:14,600 --> 00:46:19,370
got that's that's kind of the layer at

1048
00:46:16,820 --> 00:46:20,990
which the authentication attaches so you

1049
00:46:19,370 --> 00:46:22,310
still can't prevent someone from you

1050
00:46:20,990 --> 00:46:23,279
know sharing the secret that goes with

1051
00:46:22,310 --> 00:46:25,110
that and managing that how

1052
00:46:23,280 --> 00:46:26,400
they want they can create a subtree but

1053
00:46:25,110 --> 00:46:28,290
at least you have that authentication

1054
00:46:26,400 --> 00:46:29,130
boundary so if they do that you know

1055
00:46:28,290 --> 00:46:31,529
who's doing it

1056
00:46:29,130 --> 00:46:33,570
yeah the point more be at some point

1057
00:46:31,530 --> 00:46:35,520
whenever we figure out a nice way to

1058
00:46:33,570 --> 00:46:36,900
start excluding people's devices because

1059
00:46:35,520 --> 00:46:38,970
we haven't seen anything from them

1060
00:46:36,900 --> 00:46:40,050
recently or whatever yeah I think that

1061
00:46:38,970 --> 00:46:41,580
that was one of the things that came up

1062
00:46:40,050 --> 00:46:43,440
when we had the workshops with the

1063
00:46:41,580 --> 00:46:45,440
developers and love if you love to hear

1064
00:46:43,440 --> 00:46:49,290
it if you have thoughts on that

1065
00:46:45,440 --> 00:46:51,570
questions can you say that like who's

1066
00:46:49,290 --> 00:46:53,970
there buy-in from the existing messaging

1067
00:46:51,570 --> 00:46:56,010
app signal you know whatsapp iMessage

1068
00:46:53,970 --> 00:46:56,640
are they gonna use what comes out of

1069
00:46:56,010 --> 00:46:59,430
this efforts

1070
00:46:56,640 --> 00:47:04,759
I mean forward-looking statements are

1071
00:46:59,430 --> 00:47:07,919
hard but what we've tried to do is

1072
00:47:04,760 --> 00:47:09,150
exactly the form of the future the

1073
00:47:07,920 --> 00:47:13,140
predictions are hard especially about

1074
00:47:09,150 --> 00:47:15,120
the future what we've tried to do is get

1075
00:47:13,140 --> 00:47:17,460
those vendors involved from the early

1076
00:47:15,120 --> 00:47:19,680
stages and understand their requirements

1077
00:47:17,460 --> 00:47:22,170
and try and have create a product here a

1078
00:47:19,680 --> 00:47:24,029
protocol that can be deployed more or

1079
00:47:22,170 --> 00:47:24,300
less as is in the systems that exists

1080
00:47:24,030 --> 00:47:27,630
today

1081
00:47:24,300 --> 00:47:30,960
so these workshops we had in timeline I

1082
00:47:27,630 --> 00:47:34,380
had involved me from Cisco occur from

1083
00:47:30,960 --> 00:47:36,720
Mozilla Google the Google alo team the

1084
00:47:34,380 --> 00:47:38,700
facebook messenger team wire has been

1085
00:47:36,720 --> 00:47:41,669
very actively contributing so we've got

1086
00:47:38,700 --> 00:47:43,740
at least a set of these these vendors

1087
00:47:41,670 --> 00:47:46,830
who are there and you know hopefully

1088
00:47:43,740 --> 00:47:48,120
that will help the protocol we come up

1089
00:47:46,830 --> 00:47:50,960
with be something that's viable and

1090
00:47:48,120 --> 00:47:55,370
could be adopted easily by other folks

1091
00:47:50,960 --> 00:47:55,370
awesome tastic work thank you thank you

1092
00:47:59,700 --> 00:48:03,848
all right so we're gonna continue on

1093
00:48:01,809 --> 00:48:07,750
with messaging security and we're going

1094
00:48:03,849 --> 00:48:09,339
to move on to issues with message

1095
00:48:07,750 --> 00:48:22,150
franking and Johanna would she's gonna

1096
00:48:09,339 --> 00:48:24,190
give the next talk all yours oh yeah you

1097
00:48:22,150 --> 00:49:04,869
need Richard you moved you walked away

1098
00:48:24,190 --> 00:49:09,400
with a shirt Mike we need you Mike all

1099
00:49:04,869 --> 00:49:13,079
right yes

1100
00:49:09,400 --> 00:49:13,079
speakers let's not walk off with the mic

1101
00:49:13,710 --> 00:49:19,029
okay great thank you very much okay so

1102
00:49:16,809 --> 00:49:21,670
today I'm going to be talking about the

1103
00:49:19,029 --> 00:49:24,009
problem of verifiable abuse reporting

1104
00:49:21,670 --> 00:49:26,319
and encrypted messaging applications I'm

1105
00:49:24,009 --> 00:49:28,180
going to give an overview of some recent

1106
00:49:26,319 --> 00:49:30,549
work that I've done with my co-authors

1107
00:49:28,180 --> 00:49:33,399
Yevgeniy DotA's Paul Grubbs and Tom

1108
00:49:30,549 --> 00:49:38,440
Mison part on building fast and secure

1109
00:49:33,400 --> 00:49:40,150
solutions to this problem okay so the

1110
00:49:38,440 --> 00:49:43,029
idea of an end-to-end encrypted

1111
00:49:40,150 --> 00:49:45,130
messaging application is that all the

1112
00:49:43,029 --> 00:49:48,130
messages exchanged can be read only by

1113
00:49:45,130 --> 00:49:50,259
the sender and the receiver and so this

1114
00:49:48,130 --> 00:49:52,390
is achieved by having all such messages

1115
00:49:50,259 --> 00:49:56,049
encrypted under a key shared only by

1116
00:49:52,390 --> 00:49:58,509
these parties now the effect of this is

1117
00:49:56,049 --> 00:50:00,519
that nobody else including a service

1118
00:49:58,509 --> 00:50:04,240
provider can learn anything about the

1119
00:50:00,519 --> 00:50:06,220
content of these messages now encrypted

1120
00:50:04,240 --> 00:50:08,589
messaging applications that becoming

1121
00:50:06,220 --> 00:50:10,359
increasingly widespread we have whatsapp

1122
00:50:08,589 --> 00:50:11,680
Facebook and signal among

1123
00:50:10,360 --> 00:50:14,590
many others now offering these services

1124
00:50:11,680 --> 00:50:19,060
and so it's fair to say that billions of

1125
00:50:14,590 --> 00:50:20,920
users now rely on these for security now

1126
00:50:19,060 --> 00:50:23,170
this is certainly great news in terms of

1127
00:50:20,920 --> 00:50:25,540
privacy especially in light of fears

1128
00:50:23,170 --> 00:50:28,210
post Snowden that service providers may

1129
00:50:25,540 --> 00:50:31,720
clewd with law enforcement agencies to

1130
00:50:28,210 --> 00:50:33,700
hand over their users data however one

1131
00:50:31,720 --> 00:50:36,459
thing that encrypted messaging does

1132
00:50:33,700 --> 00:50:40,120
complicate and it's verifiable abuse

1133
00:50:36,460 --> 00:50:42,730
reporting so it's well known that people

1134
00:50:40,120 --> 00:50:45,910
use messaging applications to send

1135
00:50:42,730 --> 00:50:48,190
abusive content and service providers

1136
00:50:45,910 --> 00:50:50,620
want to help users by enabling them to

1137
00:50:48,190 --> 00:50:54,490
report this abuse so appropriate

1138
00:50:50,620 --> 00:50:56,470
sanctions can be taken now in an

1139
00:50:54,490 --> 00:50:59,500
encrypted messaging application a

1140
00:50:56,470 --> 00:51:00,939
receiver certainly can report an abusive

1141
00:50:59,500 --> 00:51:04,000
message that they've been sent

1142
00:51:00,940 --> 00:51:06,400
however since everything's encrypted

1143
00:51:04,000 --> 00:51:08,710
the service provider has no way of

1144
00:51:06,400 --> 00:51:13,090
verifying if the claimed message was the

1145
00:51:08,710 --> 00:51:15,430
one that was actually sent now at the

1146
00:51:13,090 --> 00:51:17,050
same time you can equally imagine

1147
00:51:15,430 --> 00:51:20,169
someone sending a perfectly innocuous

1148
00:51:17,050 --> 00:51:21,760
message to a malicious receiver who then

1149
00:51:20,170 --> 00:51:23,650
tries to pretend that this message was

1150
00:51:21,760 --> 00:51:26,740
something abusive in order to get the

1151
00:51:23,650 --> 00:51:28,510
sender into trouble and again since

1152
00:51:26,740 --> 00:51:30,759
everything's encrypted the service

1153
00:51:28,510 --> 00:51:36,100
provider has no way of establishing who

1154
00:51:30,760 --> 00:51:39,490
is telling the truth so to navigate this

1155
00:51:36,100 --> 00:51:41,380
tension in 2016 Facebook introduced a

1156
00:51:39,490 --> 00:51:43,689
technique called message ranking into

1157
00:51:41,380 --> 00:51:46,990
their secret conversations when the name

1158
00:51:43,690 --> 00:51:49,600
here comes from speaking frankly now the

1159
00:51:46,990 --> 00:51:51,850
idea of s message franking is to provide

1160
00:51:49,600 --> 00:51:54,520
a cryptographic proof of the contents of

1161
00:51:51,850 --> 00:51:56,200
a message which can later be verified by

1162
00:51:54,520 --> 00:51:59,470
the service provider in order to

1163
00:51:56,200 --> 00:52:00,939
facilitate abuse reporting and Facebook

1164
00:51:59,470 --> 00:52:02,890
technique was actually the Tor the

1165
00:52:00,940 --> 00:52:08,500
subject of a talk by John Milliken right

1166
00:52:02,890 --> 00:52:10,540
here at RWC back in 2017 okay so in this

1167
00:52:08,500 --> 00:52:13,630
talk I'm going to begin by talking about

1168
00:52:10,540 --> 00:52:15,250
what message franking is and then going

1169
00:52:13,630 --> 00:52:17,140
to talk about Facebook's approach to

1170
00:52:15,250 --> 00:52:19,120
message franking and this is where we're

1171
00:52:17,140 --> 00:52:21,330
going to meet the invisible salamanders

1172
00:52:19,120 --> 00:52:23,950
which are hinted at in the title and

1173
00:52:21,330 --> 00:52:26,470
finally I'm going to give an overview of

1174
00:52:23,950 --> 00:52:29,828
our solution for fast and secure message

1175
00:52:26,470 --> 00:52:32,709
banking okay so what is message banking

1176
00:52:29,829 --> 00:52:35,650
so inspired by what Facebook we're doing

1177
00:52:32,710 --> 00:52:37,390
in 2017 grubbs lu and vista part

1178
00:52:35,650 --> 00:52:39,400
formalized the notion of a message

1179
00:52:37,390 --> 00:52:40,960
ranking scheme as a primitive in its own

1180
00:52:39,400 --> 00:52:44,440
right so I'm going to begin by recalling

1181
00:52:40,960 --> 00:52:46,810
their definition here so essentially a

1182
00:52:44,440 --> 00:52:49,270
message franklin scheme is an encryption

1183
00:52:46,810 --> 00:52:54,070
scheme with an added verification

1184
00:52:49,270 --> 00:52:55,900
algorithm now the ciphertext produced by

1185
00:52:54,070 --> 00:52:59,619
these schemes are going to consist of

1186
00:52:55,900 --> 00:53:02,349
two components c1 and c2 and we want

1187
00:52:59,619 --> 00:53:04,390
this to be such that taken together c1

1188
00:53:02,349 --> 00:53:08,260
and c2 constitute an encryption of the

1189
00:53:04,390 --> 00:53:10,210
message m however taken by itself this

1190
00:53:08,260 --> 00:53:13,210
component c2 which we're going to call

1191
00:53:10,210 --> 00:53:15,510
the binding tag constitute a commitment

1192
00:53:13,210 --> 00:53:18,520
to that message M so more formally a

1193
00:53:15,510 --> 00:53:20,440
commitment and commits to a message in

1194
00:53:18,520 --> 00:53:22,690
such a way that if we user knows a

1195
00:53:20,440 --> 00:53:24,339
special verification key they can check

1196
00:53:22,690 --> 00:53:26,829
whether some claimed message really

1197
00:53:24,339 --> 00:53:28,240
doesn't a lie that commitment but if

1198
00:53:26,829 --> 00:53:29,800
they don't know the key then the

1199
00:53:28,240 --> 00:53:33,310
commitment reveals nothing about the

1200
00:53:29,800 --> 00:53:35,050
message contents okay so back to message

1201
00:53:33,310 --> 00:53:37,750
franking how this is going to work is

1202
00:53:35,050 --> 00:53:39,700
that when we decrypt c1 and c2 this is

1203
00:53:37,750 --> 00:53:41,710
going to uncover both the underlying

1204
00:53:39,700 --> 00:53:44,200
message and also this special

1205
00:53:41,710 --> 00:53:46,359
verification key and then this

1206
00:53:44,200 --> 00:53:48,578
verification key can then be used with

1207
00:53:46,359 --> 00:53:50,290
this added verification algorithm to

1208
00:53:48,579 --> 00:53:54,750
check whether some message m prime

1209
00:53:50,290 --> 00:53:57,369
really underlies that binding taxi to

1210
00:53:54,750 --> 00:54:01,270
okay so in terms of message Franklin

1211
00:53:57,369 --> 00:54:03,339
security we have three key properties -

1212
00:54:01,270 --> 00:54:04,750
the first is that we want to make sure

1213
00:54:03,339 --> 00:54:07,270
that encryption with our scheme

1214
00:54:04,750 --> 00:54:09,339
satisfies the usual confidentiality and

1215
00:54:07,270 --> 00:54:10,599
integrity guarantees that we'd expect

1216
00:54:09,339 --> 00:54:12,880
from any good or sent occation

1217
00:54:10,599 --> 00:54:15,010
encryption scheme with some adaptation

1218
00:54:12,880 --> 00:54:17,260
here to the message flanking setting so

1219
00:54:15,010 --> 00:54:18,460
more precisely we want to make sure that

1220
00:54:17,260 --> 00:54:20,530
these properties hold

1221
00:54:18,460 --> 00:54:22,359
even if an attacker can learn the

1222
00:54:20,530 --> 00:54:26,470
verification key is corresponding to

1223
00:54:22,359 --> 00:54:28,328
some of these ciphertexts secondly and

1224
00:54:26,470 --> 00:54:31,060
we want the binding tag and the

1225
00:54:28,329 --> 00:54:33,160
verification algorithm to be such that

1226
00:54:31,060 --> 00:54:35,200
if the ciphertext decrypts correctly

1227
00:54:33,160 --> 00:54:37,720
then there's no way that a sender can

1228
00:54:35,200 --> 00:54:39,430
later deny its contents

1229
00:54:37,720 --> 00:54:41,470
and at the same time we want it to be

1230
00:54:39,430 --> 00:54:43,450
that a receiver can never pretend there

1231
00:54:41,470 --> 00:54:45,250
any other message underlies a given

1232
00:54:43,450 --> 00:54:47,830
binding tag than the one that we share

1233
00:54:45,250 --> 00:54:49,119
which was actually sent and hopefully

1234
00:54:47,830 --> 00:54:51,609
you can see how these two latter

1235
00:54:49,119 --> 00:54:53,590
properties prevent me the buspar porting

1236
00:54:51,609 --> 00:54:57,190
attacks that I mentioned at the start of

1237
00:54:53,590 --> 00:54:58,990
the talk finally we have an additional

1238
00:54:57,190 --> 00:55:01,030
compactness requirement which is for

1239
00:54:58,990 --> 00:55:07,000
efficiency reasons we want this binding

1240
00:55:01,030 --> 00:55:08,740
tag c2 to be short okay so this is what

1241
00:55:07,000 --> 00:55:10,540
message franking is and you'll recall

1242
00:55:08,740 --> 00:55:12,490
that the whole reason we're interested

1243
00:55:10,540 --> 00:55:14,290
in this in the first place is in a

1244
00:55:12,490 --> 00:55:16,629
response to a technique already being

1245
00:55:14,290 --> 00:55:18,400
deployed by Facebook so we're now gonna

1246
00:55:16,630 --> 00:55:22,840
take a look at Facebook's approach to

1247
00:55:18,400 --> 00:55:24,790
message franking okay so first Facebook

1248
00:55:22,840 --> 00:55:25,900
employer message Franklin scheme which

1249
00:55:24,790 --> 00:55:29,230
works as follows

1250
00:55:25,900 --> 00:55:32,619
so to encrypt a message the sender first

1251
00:55:29,230 --> 00:55:35,619
chooses a random verification key KF and

1252
00:55:32,619 --> 00:55:37,480
they use this key to compute an age

1253
00:55:35,619 --> 00:55:40,000
mac-based commitment to the message m

1254
00:55:37,480 --> 00:55:42,700
and this commitment is going to form the

1255
00:55:40,000 --> 00:55:46,420
binding tag for I'm off ranking scheme C

1256
00:55:42,700 --> 00:55:48,250
- so the sender then encrypt both the

1257
00:55:46,420 --> 00:55:50,680
message and the verification key

1258
00:55:48,250 --> 00:55:52,960
together using an encrypt the Mac or

1259
00:55:50,680 --> 00:55:56,310
Center cated encryption scheme and since

1260
00:55:52,960 --> 00:55:58,869
both these components over to Facebook

1261
00:55:56,310 --> 00:56:01,450
Facebook then compute their own Mac tag

1262
00:55:58,869 --> 00:56:04,570
over the binding tag C - and all this

1263
00:56:01,450 --> 00:56:07,060
thing gets sent to the receiver so to

1264
00:56:04,570 --> 00:56:09,609
decrypt the receiver simply decrypt civ

1265
00:56:07,060 --> 00:56:11,529
component c1 and c2 together to recover

1266
00:56:09,609 --> 00:56:14,140
both the underlying message and the

1267
00:56:11,530 --> 00:56:16,420
verification key and they then use this

1268
00:56:14,140 --> 00:56:18,009
key to verify the H map based commitment

1269
00:56:16,420 --> 00:56:19,740
and they'll return an error if either

1270
00:56:18,010 --> 00:56:22,270
these steps fail

1271
00:56:19,740 --> 00:56:25,209
ok so to see how abuse reporting works

1272
00:56:22,270 --> 00:56:27,160
if a receiver receives an abusive

1273
00:56:25,210 --> 00:56:28,720
message and they can report this to

1274
00:56:27,160 --> 00:56:32,020
Facebook as follows so basically they

1275
00:56:28,720 --> 00:56:35,140
send Facebook the message along with The

1276
00:56:32,020 --> 00:56:38,650
Associated binding tag verification key

1277
00:56:35,140 --> 00:56:40,598
on Facebook tagged Facebook can then

1278
00:56:38,650 --> 00:56:42,099
verify this binding tag commitment

1279
00:56:40,599 --> 00:56:43,599
themselves this is this added

1280
00:56:42,099 --> 00:56:46,480
verification step we were talking about

1281
00:56:43,599 --> 00:56:48,550
and if this checks out then it proves to

1282
00:56:46,480 --> 00:56:52,410
Facebook that that abusive message

1283
00:56:48,550 --> 00:56:55,599
really does underlie that binding tag

1284
00:56:52,410 --> 00:56:57,578
Facebook then verify their own tag which

1285
00:56:55,599 --> 00:56:59,799
proved to them that the binding tag was

1286
00:56:57,579 --> 00:57:01,210
the one that was really sent and then if

1287
00:56:59,799 --> 00:57:03,190
all this checks out Facebook er

1288
00:57:01,210 --> 00:57:05,589
convinced it was a receiver really did

1289
00:57:03,190 --> 00:57:10,030
receive that abusive message and they

1290
00:57:05,589 --> 00:57:12,730
can act accordingly so in terms of

1291
00:57:10,030 --> 00:57:14,619
security and grubs at our prove that

1292
00:57:12,730 --> 00:57:16,180
this does indeed give a secure message

1293
00:57:14,619 --> 00:57:18,869
ranking scheme with respect to their

1294
00:57:16,180 --> 00:57:21,669
definition which is certainly great news

1295
00:57:18,869 --> 00:57:23,589
however was not so good is that this

1296
00:57:21,670 --> 00:57:25,720
scheme is really quite slow compared to

1297
00:57:23,589 --> 00:57:27,490
regular authentication encryption so in

1298
00:57:25,720 --> 00:57:29,290
particular it requires three

1299
00:57:27,490 --> 00:57:32,649
cryptographic passes over the data to

1300
00:57:29,290 --> 00:57:34,690
compute and that's one to compute the H

1301
00:57:32,650 --> 00:57:37,059
Mac based commitment and then two more

1302
00:57:34,690 --> 00:57:40,390
to compute the encrypt and then Mac AAG

1303
00:57:37,059 --> 00:57:42,160
scheme and when you think that the

1304
00:57:40,390 --> 00:57:43,839
fastest authenticated encryption schemes

1305
00:57:42,160 --> 00:57:45,879
and compute the full encryption with

1306
00:57:43,839 --> 00:57:49,240
just a single pass this is quite a

1307
00:57:45,880 --> 00:57:51,190
slowdown so because of this lack of

1308
00:57:49,240 --> 00:57:53,259
efficiency it turns out that Facebook

1309
00:57:51,190 --> 00:57:55,089
handle message ranking for attachment

1310
00:57:53,260 --> 00:57:59,049
files which are typically going to be

1311
00:57:55,089 --> 00:58:00,910
quite large a bit differently okay so

1312
00:57:59,049 --> 00:58:02,980
because it is a fairly short talk I'm

1313
00:58:00,910 --> 00:58:05,680
omitting quite a lot of details but the

1314
00:58:02,980 --> 00:58:08,049
kind of key idea is that rather than

1315
00:58:05,680 --> 00:58:10,299
encrypting the attachment file directly

1316
00:58:08,049 --> 00:58:12,329
with this secure but slow message

1317
00:58:10,299 --> 00:58:15,700
ranking scheme that we've just seen

1318
00:58:12,329 --> 00:58:18,430
instead the sender chooses a one-time

1319
00:58:15,700 --> 00:58:19,839
file encryption key K file and they're

1320
00:58:18,430 --> 00:58:22,089
going to use this to encrypt the file

1321
00:58:19,839 --> 00:58:24,910
using just a regular authenticated

1322
00:58:22,089 --> 00:58:29,380
encryption scheme AS GCM which in

1323
00:58:24,910 --> 00:58:31,180
particular is very fast so the sender

1324
00:58:29,380 --> 00:58:33,490
then takes this one-time file encryption

1325
00:58:31,180 --> 00:58:35,589
key and it is this key that they are

1326
00:58:33,490 --> 00:58:37,930
then going to commit and encrypt you

1327
00:58:35,589 --> 00:58:40,990
using the secure franking scheme that we

1328
00:58:37,930 --> 00:58:43,450
just saw and of course because it's file

1329
00:58:40,990 --> 00:58:45,729
encryption key is likely to be much

1330
00:58:43,450 --> 00:58:50,078
smaller than the file this is going to

1331
00:58:45,730 --> 00:58:53,380
be much less effort to Frank okay so to

1332
00:58:50,079 --> 00:58:55,450
decrypt the receiver simply decrypt c1

1333
00:58:53,380 --> 00:58:57,579
and c2 to Chara's to recover the

1334
00:58:55,450 --> 00:58:58,990
one-time file encryption key and they

1335
00:58:57,579 --> 00:59:02,160
can then use this to decrypt the

1336
00:58:58,990 --> 00:59:02,160
attachment ciphertext

1337
00:59:02,380 --> 00:59:07,510
so and our first glance this looks like

1338
00:59:04,780 --> 00:59:10,660
a pretty reasonable approach however it

1339
00:59:07,510 --> 00:59:13,300
turns out that a subtle floor allows an

1340
00:59:10,660 --> 00:59:16,270
attacker to send an abusive attachment

1341
00:59:13,300 --> 00:59:18,400
such that all attempts by the receiver

1342
00:59:16,270 --> 00:59:22,810
to report this to Facebook are going to

1343
00:59:18,400 --> 00:59:25,620
fail now there are two key properties of

1344
00:59:22,810 --> 00:59:28,420
the scheme which enable the attack

1345
00:59:25,620 --> 00:59:31,210
so the first such property is that it

1346
00:59:28,420 --> 00:59:32,860
turns out that GCM which you'll recall

1347
00:59:31,210 --> 00:59:35,050
is what is being used to actually

1348
00:59:32,860 --> 00:59:37,900
encrypt the file is not a secure message

1349
00:59:35,050 --> 00:59:40,210
ranking scheme in fact more than that

1350
00:59:37,900 --> 00:59:42,220
and GCM has this property where it's

1351
00:59:40,210 --> 00:59:44,800
really quite easy to construct a cipher

1352
00:59:42,220 --> 00:59:47,740
text which decrypt two different valid

1353
00:59:44,800 --> 00:59:48,940
messages under different keys and for

1354
00:59:47,740 --> 00:59:51,250
those of you who are familiar the term

1355
00:59:48,940 --> 00:59:56,250
and this basically means that GCM is not

1356
00:59:51,250 --> 00:59:59,830
robust now the second property is that

1357
00:59:56,250 --> 01:00:02,890
when a user reports and abusive

1358
00:59:59,830 --> 01:00:05,200
attachment to Facebook Facebook take all

1359
01:00:02,890 --> 01:00:07,150
attachment ciphertext which the user has

1360
01:00:05,200 --> 01:00:10,029
recently received and performed this

1361
01:00:07,150 --> 01:00:12,640
verification procedure on these now

1362
01:00:10,030 --> 01:00:15,430
during this process if Facebook's see

1363
01:00:12,640 --> 01:00:17,950
the same attachment size to the same GCM

1364
01:00:15,430 --> 01:00:19,960
cipher text more than once they assume

1365
01:00:17,950 --> 01:00:23,759
that is a duplicate and they don't add

1366
01:00:19,960 --> 01:00:23,760
anything about this to the abuse report

1367
01:00:23,790 --> 01:00:28,750
so taken by itself this kind of

1368
01:00:26,440 --> 01:00:31,090
deduplication behavior doesn't really

1369
01:00:28,750 --> 01:00:33,720
cause a problem however as we're going

1370
01:00:31,090 --> 01:00:35,950
to see this deduplication behavior

1371
01:00:33,720 --> 01:00:41,470
combined with the lack of robustness of

1372
01:00:35,950 --> 01:00:44,589
GCM is what allows our attack okay so

1373
01:00:41,470 --> 01:00:46,870
the attack works as follows the first

1374
01:00:44,590 --> 01:00:48,850
step of the attack in June the first

1375
01:00:46,870 --> 01:00:52,180
step the attacker constructs a special

1376
01:00:48,850 --> 01:00:54,730
GCM ciphertext C star such that this

1377
01:00:52,180 --> 01:00:56,859
ciphertext decrypts to a perfectly

1378
01:00:54,730 --> 01:00:59,350
innocuous attachment under one key and

1379
01:00:56,860 --> 01:01:01,780
to an abusive attachment under the other

1380
01:00:59,350 --> 01:01:03,670
key and we know that this is easy to do

1381
01:01:01,780 --> 01:01:07,570
by this first property that we've just

1382
01:01:03,670 --> 01:01:09,970
discussed now in the second stage of the

1383
01:01:07,570 --> 01:01:12,640
attack the attack is going to send this

1384
01:01:09,970 --> 01:01:15,370
special ciphertext C star to the victim

1385
01:01:12,640 --> 01:01:16,180
twice the first time accompanied by the

1386
01:01:15,370 --> 01:01:18,700
innocuous key

1387
01:01:16,180 --> 01:01:22,450
and the second time accompanied by the

1388
01:01:18,700 --> 01:01:24,250
abusive key so the receiver decrypts

1389
01:01:22,450 --> 01:01:26,410
both of these recovering first the

1390
01:01:24,250 --> 01:01:30,339
harmless attachment and the second time

1391
01:01:26,410 --> 01:01:33,640
the abusive attachment okay so the

1392
01:01:30,339 --> 01:01:37,119
receiver tries to report this abusive

1393
01:01:33,640 --> 01:01:39,640
attachment to Facebook however and you

1394
01:01:37,119 --> 01:01:43,329
will notice here that since the same GCM

1395
01:01:39,640 --> 01:01:45,779
ciphertext C star is sent both times the

1396
01:01:43,329 --> 01:01:47,890
due to this deduplication behavior and

1397
01:01:45,779 --> 01:01:49,660
Facebook and I'm just going to assume

1398
01:01:47,890 --> 01:01:51,670
that the second ciphertext stone is a

1399
01:01:49,660 --> 01:01:54,190
duplicate and they're not going to log

1400
01:01:51,670 --> 01:01:56,260
anything about it in the abuse report so

1401
01:01:54,190 --> 01:01:58,599
the kind of upshot of this is that the

1402
01:01:56,260 --> 01:02:00,910
abusive attachment will never make it

1403
01:01:58,599 --> 01:02:02,289
into the abuse report and so all the

1404
01:02:00,910 --> 01:02:06,279
times by the user to report this to

1405
01:02:02,289 --> 01:02:08,200
Facebook are going to fail now it might

1406
01:02:06,279 --> 01:02:10,480
seem kind of strange that were able to

1407
01:02:08,200 --> 01:02:13,240
construct this special GCM ciphertext in

1408
01:02:10,480 --> 01:02:15,549
the first place because isn't GCM secure

1409
01:02:13,240 --> 01:02:17,109
authenticated encryption scheme and of

1410
01:02:15,549 --> 01:02:20,079
course it is but it's worth noting that

1411
01:02:17,109 --> 01:02:22,569
we are not in the standard aad setting

1412
01:02:20,079 --> 01:02:24,490
here in particular the attacker is able

1413
01:02:22,569 --> 01:02:27,579
to choose both of the keys that he uses

1414
01:02:24,490 --> 01:02:29,680
in the attack himself so boys all boils

1415
01:02:27,579 --> 01:02:31,720
down to is that the attack exploits of

1416
01:02:29,680 --> 01:02:34,058
fact that GCM is not robust and

1417
01:02:31,720 --> 01:02:35,828
interestingly as far as we know this is

1418
01:02:34,059 --> 01:02:37,510
the first real-world attack that

1419
01:02:35,829 --> 01:02:38,829
exploits the fact that an encryption

1420
01:02:37,510 --> 01:02:44,079
scheme doesn't have this property of

1421
01:02:38,829 --> 01:02:47,079
robustness okay so as a proof of concept

1422
01:02:44,079 --> 01:02:48,760
we showed that you can use Facebook

1423
01:02:47,079 --> 01:02:52,210
secret conversations to send this

1424
01:02:48,760 --> 01:02:53,710
abusive image on the left however when

1425
01:02:52,210 --> 01:02:56,020
the receiver tries to report this to

1426
01:02:53,710 --> 01:02:58,210
Facebook all Facebook are going to see

1427
01:02:56,020 --> 01:03:01,059
in the abuse report is this picture of a

1428
01:02:58,210 --> 01:03:02,529
cute kitten and these are the actual

1429
01:03:01,059 --> 01:03:07,390
images that we use in the proof of

1430
01:03:02,529 --> 01:03:09,839
concept now a facebook messenger source

1431
01:03:07,390 --> 01:03:13,118
code refers to encrypted messages as

1432
01:03:09,839 --> 01:03:14,619
Salamanders and because an art attack

1433
01:03:13,119 --> 01:03:16,900
these encrypted messages seem to

1434
01:03:14,619 --> 01:03:18,819
disappear you can think of this as an

1435
01:03:16,900 --> 01:03:21,819
invisible salamander which is where the

1436
01:03:18,819 --> 01:03:24,279
title of our talk came from and this

1437
01:03:21,819 --> 01:03:26,589
little fellow here and is an axolotl

1438
01:03:24,279 --> 01:03:28,539
which is an endangered and really cute

1439
01:03:26,589 --> 01:03:29,460
and kind of salamander which is why we

1440
01:03:28,539 --> 01:03:33,660
chose to use him

1441
01:03:29,460 --> 01:03:35,760
the proof of concept so Facebook

1442
01:03:33,660 --> 01:03:38,009
remediated the vulnerability and awarded

1443
01:03:35,760 --> 01:03:39,390
a bug bounty and many thanks to John

1444
01:03:38,010 --> 01:03:41,220
Milliken for answering lots of questions

1445
01:03:39,390 --> 01:03:45,210
and helping us understand how everything

1446
01:03:41,220 --> 01:03:46,649
works now needless to say there's a lot

1447
01:03:45,210 --> 01:03:48,690
more detail that goes into the attacks

1448
01:03:46,650 --> 01:03:50,609
and I've had time to talk about him so

1449
01:03:48,690 --> 01:03:55,920
if anyone's interested the food details

1450
01:03:50,609 --> 01:03:58,200
have given in the paper okay so we see

1451
01:03:55,920 --> 01:04:00,839
what message Frankie is and we've also

1452
01:03:58,200 --> 01:04:02,790
seen how existing solutions for message

1453
01:04:00,839 --> 01:04:05,130
Frankie are quite slow and how

1454
01:04:02,790 --> 01:04:07,349
Facebook's workaround to this is what

1455
01:04:05,130 --> 01:04:09,540
enabled this invisible salamander attack

1456
01:04:07,349 --> 01:04:11,070
it's in the final section of a talk I'm

1457
01:04:09,540 --> 01:04:13,529
going to give you an overview for our

1458
01:04:11,070 --> 01:04:16,950
solution for fast and secure message

1459
01:04:13,530 --> 01:04:19,200
ranking so I guess the kind of key

1460
01:04:16,950 --> 01:04:21,210
question here is can we build a secure

1461
01:04:19,200 --> 01:04:24,210
message franking scheme which matches

1462
01:04:21,210 --> 01:04:28,380
the efficiency of the fastest a ad

1463
01:04:24,210 --> 01:04:30,390
schemes such as GCM and OCB now in

1464
01:04:28,380 --> 01:04:32,910
particular these schemes are single pass

1465
01:04:30,390 --> 01:04:34,680
and they only have to make one block

1466
01:04:32,910 --> 01:04:39,598
cipher call per block of input data

1467
01:04:34,680 --> 01:04:41,399
processed now interestingly it turns out

1468
01:04:39,599 --> 01:04:43,859
that both the answer to this question

1469
01:04:41,400 --> 01:04:47,369
and the idea behind our construction

1470
01:04:43,859 --> 01:04:50,009
lies in collision resistant hash in the

1471
01:04:47,369 --> 01:04:53,339
kind of observation that enables this is

1472
01:04:50,010 --> 01:04:54,900
that whatever function our franking

1473
01:04:53,339 --> 01:04:57,060
scheme is going to use to compute this

1474
01:04:54,900 --> 01:04:59,040
binding tag commitment it's got to be

1475
01:04:57,060 --> 01:05:00,540
collision resistant in the sense that it

1476
01:04:59,040 --> 01:05:02,849
should be infeasible to find two

1477
01:05:00,540 --> 01:05:05,009
messages Eminem prime which both produce

1478
01:05:02,849 --> 01:05:06,359
the same binding tag hopefully

1479
01:05:05,010 --> 01:05:08,310
intuitively you can kind of see that

1480
01:05:06,359 --> 01:05:10,170
we're easy to find these kind of

1481
01:05:08,310 --> 01:05:12,089
collisions we're going to lose this nice

1482
01:05:10,170 --> 01:05:13,859
binding property that allows us to prove

1483
01:05:12,089 --> 01:05:17,700
to a service provider that some message

1484
01:05:13,859 --> 01:05:19,710
correspondence that binding tag so the

1485
01:05:17,700 --> 01:05:22,500
cool thing about this is that it allows

1486
01:05:19,710 --> 01:05:24,480
us to tap into the whole wealth of

1487
01:05:22,500 --> 01:05:28,500
literature on collision resistant hash

1488
01:05:24,480 --> 01:05:30,780
inge so firstly the bad news is that

1489
01:05:28,500 --> 01:05:33,180
known impossibility results about

1490
01:05:30,780 --> 01:05:35,550
collision resistant hash functions rule

1491
01:05:33,180 --> 01:05:37,230
out a wide class of efficient block

1492
01:05:35,550 --> 01:05:40,170
cipher based message Franklin schemes

1493
01:05:37,230 --> 01:05:42,180
which match the efficiency of ocbn GCM

1494
01:05:40,170 --> 01:05:43,380
in terms of block cipher pools per

1495
01:05:42,180 --> 01:05:45,600
message block

1496
01:05:43,380 --> 01:05:47,520
so essentially what these results show

1497
01:05:45,600 --> 01:05:49,170
is that to achieve collision resistance

1498
01:05:47,520 --> 01:05:51,450
you've got to do a certain amount of

1499
01:05:49,170 --> 01:05:52,710
work per block processed and that amount

1500
01:05:51,450 --> 01:05:55,589
of work is greater than what is

1501
01:05:52,710 --> 01:05:58,650
performed by these schemes however the

1502
01:05:55,590 --> 01:06:01,140
good news is that we can and use the

1503
01:05:58,650 --> 01:06:03,270
classic merkle-damgard hash function and

1504
01:06:01,140 --> 01:06:05,400
adapt this to build the very first

1505
01:06:03,270 --> 01:06:09,000
single pass secure message ranking

1506
01:06:05,400 --> 01:06:10,770
scheme so our scheme is called hash

1507
01:06:09,000 --> 01:06:12,450
function change in chaining and we're

1508
01:06:10,770 --> 01:06:15,570
going to try and give like a flavor of

1509
01:06:12,450 --> 01:06:18,149
our approach now okay so the

1510
01:06:15,570 --> 01:06:19,620
merkle-damgard construction allows us to

1511
01:06:18,150 --> 01:06:21,930
build a collision resistant hash

1512
01:06:19,620 --> 01:06:23,460
function from a collision resistant

1513
01:06:21,930 --> 01:06:25,890
compression function and a suitable

1514
01:06:23,460 --> 01:06:28,050
padding scheme now this works is

1515
01:06:25,890 --> 01:06:30,540
basically you pad up your message data

1516
01:06:28,050 --> 01:06:32,810
chop it into blocks and then iteratively

1517
01:06:30,540 --> 01:06:35,070
hash it using a compression function and

1518
01:06:32,810 --> 01:06:36,509
it's well known that this gives a

1519
01:06:35,070 --> 01:06:39,170
collision resistant hash function

1520
01:06:36,510 --> 01:06:41,700
provided that the underlying compress

1521
01:06:39,170 --> 01:06:44,910
collision resistant and a suitable

1522
01:06:41,700 --> 01:06:46,890
padding scheme is used so we're going to

1523
01:06:44,910 --> 01:06:50,190
use it the basis for our message ranking

1524
01:06:46,890 --> 01:06:53,220
scheme so the first adaptation we make

1525
01:06:50,190 --> 01:06:54,300
is we construct a sort of keyed version

1526
01:06:53,220 --> 01:06:57,240
of merkle-damgard

1527
01:06:54,300 --> 01:06:58,890
by ignoring a secret key into each block

1528
01:06:57,240 --> 01:07:00,419
of message data that we process and

1529
01:06:58,890 --> 01:07:02,129
hopefully you can kind of see

1530
01:07:00,420 --> 01:07:03,720
intuitively why we're going to need some

1531
01:07:02,130 --> 01:07:07,560
kind of keyed function to have a secure

1532
01:07:03,720 --> 01:07:09,480
ranking scheme we also add an additional

1533
01:07:07,560 --> 01:07:11,340
keyed compression function cool to start

1534
01:07:09,480 --> 01:07:12,840
this process for technical reasons that

1535
01:07:11,340 --> 01:07:15,720
I'm not really going to go into here but

1536
01:07:12,840 --> 01:07:17,040
basically we need it for the proof so

1537
01:07:15,720 --> 01:07:18,839
now it's this function that we're going

1538
01:07:17,040 --> 01:07:23,190
to use to compute the binding tag for

1539
01:07:18,840 --> 01:07:25,170
ciphertex our ranking scheme c2 now the

1540
01:07:23,190 --> 01:07:26,820
clever trick which it allows us to

1541
01:07:25,170 --> 01:07:28,590
perform the full message franking

1542
01:07:26,820 --> 01:07:30,180
encryption with just a single pass over

1543
01:07:28,590 --> 01:07:32,130
the data yes sir

1544
01:07:30,180 --> 01:07:33,990
rather than just discarding the

1545
01:07:32,130 --> 01:07:35,430
intermediate chaining variables we pass

1546
01:07:33,990 --> 01:07:37,680
through while computing this function

1547
01:07:35,430 --> 01:07:39,180
we're instead going to use these as

1548
01:07:37,680 --> 01:07:41,850
random pads to encrypt the message

1549
01:07:39,180 --> 01:07:44,370
blocks and so the upshot of this is that

1550
01:07:41,850 --> 01:07:46,080
we get to and compute both the binding

1551
01:07:44,370 --> 01:07:48,870
tag and the cipher text which is a

1552
01:07:46,080 --> 01:07:50,700
single pass over the message data and in

1553
01:07:48,870 --> 01:07:53,009
fact for certain parameter settings and

1554
01:07:50,700 --> 01:07:55,379
this Inc has no overhead over just

1555
01:07:53,010 --> 01:07:57,650
computing and that binding tag hash

1556
01:07:55,380 --> 01:08:01,020
function

1557
01:07:57,650 --> 01:08:02,670
so in the paper we prove that this

1558
01:08:01,020 --> 01:08:04,650
construction is essentially a sort of

1559
01:08:02,670 --> 01:08:06,869
one-time secure variant of message

1560
01:08:04,650 --> 01:08:08,880
franking under the assumption that the

1561
01:08:06,869 --> 01:08:11,099
underlying compression function is

1562
01:08:08,880 --> 01:08:15,150
collision resistant and satisfies a weak

1563
01:08:11,099 --> 01:08:16,739
form of RK APRs security this gives us

1564
01:08:15,150 --> 01:08:18,179
kind of one-time secure message ranking

1565
01:08:16,738 --> 01:08:20,068
and then we show in the paper and

1566
01:08:18,179 --> 01:08:22,109
examples of simple and efficient

1567
01:08:20,069 --> 01:08:24,480
transforms that allow us to lift this

1568
01:08:22,109 --> 01:08:26,969
one-time secure scheme into fully Frege

1569
01:08:24,479 --> 01:08:28,830
flow to multi use secure message ranking

1570
01:08:26,969 --> 01:08:32,609
and for those who are interested for

1571
01:08:28,830 --> 01:08:34,109
details and proof in the paper so just

1572
01:08:32,609 --> 01:08:36,870
to wrap up we have talked about what

1573
01:08:34,109 --> 01:08:38,790
message Franklin is we've seen how

1574
01:08:36,870 --> 01:08:40,830
Facebook's approach to message banking

1575
01:08:38,790 --> 01:08:42,960
and met the invisible salamanders and

1576
01:08:40,830 --> 01:08:46,229
finally I've talked about our solution

1577
01:08:42,960 --> 01:08:48,719
for fast message franking so and this

1578
01:08:46,229 --> 01:08:51,269
work was presented at crypto 2018 and

1579
01:08:48,719 --> 01:08:52,890
there is a paper on apron and a full

1580
01:08:51,270 --> 01:08:55,109
version with all the proofs and details

1581
01:08:52,890 --> 01:08:56,699
should be coming any day now and and

1582
01:08:55,109 --> 01:08:57,120
that's all from me so thank you very

1583
01:08:56,698 --> 01:09:02,000
much

1584
01:08:57,120 --> 01:09:02,000
[Applause]

1585
01:09:02,490 --> 01:09:06,559
[Music]

1586
01:09:04,479 --> 01:09:07,219
great thanks John so we have time for

1587
01:09:06,560 --> 01:09:10,160
questions

1588
01:09:07,220 --> 01:09:11,980
so if they had used OCD instead of GCM

1589
01:09:10,160 --> 01:09:17,000
would this would the attack still work

1590
01:09:11,979 --> 01:09:18,889
oh gosh and yes it would so OCP is not a

1591
01:09:17,000 --> 01:09:21,830
secure message Frankie scheme either and

1592
01:09:18,890 --> 01:09:23,839
no scheme that I see being GCM oppose

1593
01:09:21,830 --> 01:09:25,519
rate one and neither of these have this

1594
01:09:23,839 --> 01:09:27,710
kind of collision majority that we need

1595
01:09:25,520 --> 01:09:32,920
so yes and it would be possible for OCP

1596
01:09:27,710 --> 01:09:35,089
also question please thanks for the talk

1597
01:09:32,920 --> 01:09:36,350
this might be outside the scope of this

1598
01:09:35,089 --> 01:09:38,229
work but I'm just wondering in the

1599
01:09:36,350 --> 01:09:41,509
context of secure messaging sometimes

1600
01:09:38,229 --> 01:09:42,858
abusive conversations can occur more

1601
01:09:41,509 --> 01:09:44,750
contextual e so there could be for

1602
01:09:42,859 --> 01:09:46,220
example no smoking gun there couldn't be

1603
01:09:44,750 --> 01:09:48,049
a single message that I could identify

1604
01:09:46,220 --> 01:09:49,940
or it could be the opposite I could

1605
01:09:48,049 --> 01:09:52,609
identify a message that in context makes

1606
01:09:49,939 --> 01:09:55,460
a lot of sense so maybe for future work

1607
01:09:52,609 --> 01:09:57,290
how can we look at whether we report

1608
01:09:55,460 --> 01:09:59,300
entire conversations as abusive or

1609
01:09:57,290 --> 01:10:01,670
contextualize messages within

1610
01:09:59,300 --> 01:10:03,740
conversations without having to send the

1611
01:10:01,670 --> 01:10:05,840
entire conversation to to Facebook for

1612
01:10:03,740 --> 01:10:07,429
decryption or repetition oh that's a

1613
01:10:05,840 --> 01:10:09,290
good question that was kind of outside

1614
01:10:07,430 --> 01:10:12,200
the scope of this work so I guess and

1615
01:10:09,290 --> 01:10:14,269
there has been some follow-up work done

1616
01:10:12,200 --> 01:10:16,429
by other authors and that kind of look

1617
01:10:14,270 --> 01:10:17,720
at more fine-grained it approaches to

1618
01:10:16,430 --> 01:10:18,800
abuse reporting because maybe you

1619
01:10:17,720 --> 01:10:20,060
wouldn't want to reveal the whole

1620
01:10:18,800 --> 01:10:24,080
conversation you just want to feel

1621
01:10:20,060 --> 01:10:27,560
certain parts and so yeah I think so

1622
01:10:24,080 --> 01:10:28,910
also Facebook do you check multiple they

1623
01:10:27,560 --> 01:10:29,930
were check multiple attachments and

1624
01:10:28,910 --> 01:10:31,940
stuff so you would be able to see

1625
01:10:29,930 --> 01:10:34,160
context coming over messages but I think

1626
01:10:31,940 --> 01:10:35,450
yeah it's definitely interesting work to

1627
01:10:34,160 --> 01:10:41,090
be done or more kind of fine-grained

1628
01:10:35,450 --> 01:10:44,980
approaches to this thanks very much all

1629
01:10:41,090 --> 01:10:49,510
right thanks for the talk this is on

1630
01:10:44,980 --> 01:10:52,129
your solution with this merkle-damgard

1631
01:10:49,510 --> 01:10:53,390
simultaneously outputting pads to XOR

1632
01:10:52,130 --> 01:10:56,950
with the message looks a lot like a

1633
01:10:53,390 --> 01:11:00,530
sponge duplexing sponge construction

1634
01:10:56,950 --> 01:11:02,470
what can you tell us what the difference

1635
01:11:00,530 --> 01:11:05,090
is between this and a duplexing sponge

1636
01:11:02,470 --> 01:11:07,040
okay no it's a really good point so and

1637
01:11:05,090 --> 01:11:09,830
that yeah there definitely are natural

1638
01:11:07,040 --> 01:11:12,260
similarities in the paper we also kind

1639
01:11:09,830 --> 01:11:13,880
of show how to build a sponge based

1640
01:11:12,260 --> 01:11:16,280
version of this message ranking scheme

1641
01:11:13,880 --> 01:11:16,770
and using the duplexing construction I

1642
01:11:16,280 --> 01:11:18,809
think

1643
01:11:16,770 --> 01:11:20,460
kind of the kind of cubism we were

1644
01:11:18,810 --> 01:11:21,990
interested in doing it just using a

1645
01:11:20,460 --> 01:11:24,240
compression function if he wanted it to

1646
01:11:21,990 --> 01:11:26,340
be really simple to implement and to be

1647
01:11:24,240 --> 01:11:28,380
really fast so at the moment that seemed

1648
01:11:26,340 --> 01:11:29,760
like the best approach to do it but yeah

1649
01:11:28,380 --> 01:11:30,930
we do give it another sponge base

1650
01:11:29,760 --> 01:11:32,310
construction and that would definitely

1651
01:11:30,930 --> 01:11:38,850
be something interesting to explore as

1652
01:11:32,310 --> 01:11:40,890
well thank you and oh gosh though this

1653
01:11:38,850 --> 01:11:42,570
isn't really my strong suit but I think

1654
01:11:40,890 --> 01:11:43,440
I think we just felt that like the kind

1655
01:11:42,570 --> 01:11:44,910
we were just using really simple

1656
01:11:43,440 --> 01:11:46,799
primitives that were very easy to

1657
01:11:44,910 --> 01:11:48,300
implement and stuff and so yeah where's

1658
01:11:46,800 --> 01:11:52,380
sponge things maybe aren't quite that

1659
01:11:48,300 --> 01:11:56,190
yet okay in certain end-to-end encrypted

1660
01:11:52,380 --> 01:11:57,810
protocols like MPI OCR or OTR there is

1661
01:11:56,190 --> 01:12:00,269
the property of deniability that is

1662
01:11:57,810 --> 01:12:03,360
desired and it seems to be in contrast

1663
01:12:00,270 --> 01:12:04,740
with your desired property here what do

1664
01:12:03,360 --> 01:12:06,929
you have to say about that can they be

1665
01:12:04,740 --> 01:12:09,090
combined or are they mutually exclusive

1666
01:12:06,930 --> 01:12:14,460
oh gosh that's a really interesting

1667
01:12:09,090 --> 01:12:16,140
question and which I haven't it seems to

1668
01:12:14,460 --> 01:12:18,270
me like yeah there seems to be like they

1669
01:12:16,140 --> 01:12:21,360
are mutually exclusive at almost like a

1670
01:12:18,270 --> 01:12:22,530
odds with each other and like the whole

1671
01:12:21,360 --> 01:12:24,000
yeah we really want this to make

1672
01:12:22,530 --> 01:12:26,750
everything verifiable so that's going to

1673
01:12:24,000 --> 01:12:30,180
be at odds with the kind of deniability

1674
01:12:26,750 --> 01:12:31,440
so yeah I'd whether I don't yeah I would

1675
01:12:30,180 --> 01:12:33,210
say that they are all through each other

1676
01:12:31,440 --> 01:12:34,740
but I haven't could structure any formal

1677
01:12:33,210 --> 01:12:36,990
proof of looked into this more formally

1678
01:12:34,740 --> 01:12:41,099
yet thank you that sounds like sending

1679
01:12:36,990 --> 01:12:44,880
denial you sending abusive messages yeah

1680
01:12:41,100 --> 01:12:47,210
yeah exactly yes awesome all right thank

1681
01:12:44,880 --> 01:12:47,210
you very much

1682
01:12:51,880 --> 01:12:56,150
yeah really cool work all right so our

1683
01:12:54,290 --> 01:12:58,640
last talk of the session is about

1684
01:12:56,150 --> 01:13:01,420
security for snapshot messages and it's

1685
01:12:58,640 --> 01:13:01,420
gonna be given by

1686
01:13:44,580 --> 01:13:48,000
mr. stage

1687
01:14:15,320 --> 01:14:20,380
why is it offline

1688
01:14:17,320 --> 01:14:20,380
[Music]

1689
01:14:25,269 --> 01:14:36,679
great sorry suppose I don't know why you

1690
01:14:30,380 --> 01:14:51,139
disconnected from the Wi-Fi oh it

1691
01:14:36,679 --> 01:14:53,440
doesn't it worked it there thank you all

1692
01:14:51,139 --> 01:14:53,440
lowercase

1693
01:14:56,160 --> 01:14:59,630
[Laughter]

1694
01:15:05,139 --> 01:15:10,239
all right great let's see if this is

1695
01:15:07,849 --> 01:15:10,239
better

1696
01:15:13,919 --> 01:15:21,139
okay Google great sorry for the snafu

1697
01:15:33,920 --> 01:15:38,170
the presentation gods are not with me

1698
01:15:46,499 --> 01:15:54,300
all right great finally we got this so

1699
01:15:50,960 --> 01:15:56,579
disappear to talk about how we enable

1700
01:15:54,300 --> 01:15:58,469
then turnin and protection for our users

1701
01:15:56,579 --> 01:16:00,440
primarily as a means of increasing the

1702
01:15:58,469 --> 01:16:04,170
security and privacy assurances for them

1703
01:16:00,440 --> 01:16:05,728
so obviously as one can imagine engine

1704
01:16:04,170 --> 01:16:07,590
encryption is probably point zero zero

1705
01:16:05,729 --> 01:16:09,599
zero one cryptography and everything is

1706
01:16:07,590 --> 01:16:11,340
a lot of like building systems and scale

1707
01:16:09,599 --> 01:16:14,610
so this is the team that actually built

1708
01:16:11,340 --> 01:16:15,749
it so what's a snap right like I'm sure

1709
01:16:14,610 --> 01:16:17,489
I don't know how many of you are

1710
01:16:15,749 --> 01:16:20,519
snapchat users so I'm gonna basically

1711
01:16:17,489 --> 01:16:22,799
give a little context about it so it's

1712
01:16:20,519 --> 01:16:25,860
most conversations if you look at it or

1713
01:16:22,800 --> 01:16:27,150
people think of them as as this text but

1714
01:16:25,860 --> 01:16:29,219
snaps are mostly it's all about

1715
01:16:27,150 --> 01:16:30,509
multimedia messages or as the previous

1716
01:16:29,219 --> 01:16:32,820
presenter said they're like attachments

1717
01:16:30,510 --> 01:16:34,199
for us that is the primary means of

1718
01:16:32,820 --> 01:16:37,320
communication with which our users

1719
01:16:34,199 --> 01:16:39,598
communicated snaps they've just a health

1720
01:16:37,320 --> 01:16:41,759
show but so a little bit of the company

1721
01:16:39,599 --> 01:16:43,889
it's about sort of like we get about to

1722
01:16:41,760 --> 01:16:45,630
talk about the scale we have a 186

1723
01:16:43,889 --> 01:16:47,999
million users that use the app on a

1724
01:16:45,630 --> 01:16:49,920
daily basis and a few billion snaps are

1725
01:16:47,999 --> 01:16:52,260
exchanged on a daily basis that we're

1726
01:16:49,920 --> 01:16:54,030
trying to protect so this is sort of how

1727
01:16:52,260 --> 01:16:56,099
the flow looks like so you take a

1728
01:16:54,030 --> 01:16:57,900
picture of the snapchat app you apply

1729
01:16:56,099 --> 01:16:59,940
whatever cool stickers or fun stuff you

1730
01:16:57,900 --> 01:17:02,969
want you click the blue button on the

1731
01:16:59,940 --> 01:17:04,739
bottom send and then when you you pick a

1732
01:17:02,969 --> 01:17:06,360
recipient from the list so one of the

1733
01:17:04,739 --> 01:17:08,449
caveats if you look at the screen is

1734
01:17:06,360 --> 01:17:10,650
very different from other engine and

1735
01:17:08,449 --> 01:17:12,119
protection protocols is you're not

1736
01:17:10,650 --> 01:17:13,530
typing in a text where you have the

1737
01:17:12,119 --> 01:17:15,690
opportunity to go fetch a key from

1738
01:17:13,530 --> 01:17:16,860
somewhere it's the user is created the

1739
01:17:15,690 --> 01:17:18,690
content and then they click a button

1740
01:17:16,860 --> 01:17:20,880
they're back on the app so there's very

1741
01:17:18,690 --> 01:17:24,058
little time to actually do key exchange

1742
01:17:20,880 --> 01:17:26,219
dances so we'll talk more about that so

1743
01:17:24,059 --> 01:17:27,719
snaps inherently are privacy protections

1744
01:17:26,219 --> 01:17:30,179
they're ephemeral so the moment you view

1745
01:17:27,719 --> 01:17:32,519
them they're gone there if you haven't

1746
01:17:30,179 --> 01:17:35,159
opened it in 30 days they're deleted and

1747
01:17:32,519 --> 01:17:37,469
if you try to replay a snap we get a

1748
01:17:35,159 --> 01:17:39,420
notification that the recipient has

1749
01:17:37,469 --> 01:17:41,699
replayed the snap same with screenshots

1750
01:17:39,420 --> 01:17:43,170
and part of it are actually the way we

1751
01:17:41,699 --> 01:17:45,598
have these protections built in is

1752
01:17:43,170 --> 01:17:46,949
actually contributing to a significant

1753
01:17:45,599 --> 01:17:48,389
current and identity we'll talk about

1754
01:17:46,949 --> 01:17:51,239
that a little bit later essentially a

1755
01:17:48,389 --> 01:17:53,969
privacy defense costing has a little bit

1756
01:17:51,239 --> 01:17:55,138
more on into an encryption so why enter

1757
01:17:53,969 --> 01:17:56,460
encryption it's a pretty much solved

1758
01:17:55,139 --> 01:17:58,170
problem as we've talked about it there's

1759
01:17:56,460 --> 01:18:00,330
like fantastic research where they're

1760
01:17:58,170 --> 01:18:02,220
talking about micro optimizing on

1761
01:18:00,330 --> 01:18:04,860
the optimizations and hearing are sort

1762
01:18:02,220 --> 01:18:07,440
of like probably even less than 101 so

1763
01:18:04,860 --> 01:18:08,790
why am I here so why did we want to do

1764
01:18:07,440 --> 01:18:10,440
it so one it's a difference in depth

1765
01:18:08,790 --> 01:18:12,570
mechanism so we wanted it on by default

1766
01:18:10,440 --> 01:18:14,519
and also sort of like increased

1767
01:18:12,570 --> 01:18:17,400
assurances around privacy to our users

1768
01:18:14,520 --> 01:18:17,970
and well it's essentially a solved

1769
01:18:17,400 --> 01:18:20,519
problem

1770
01:18:17,970 --> 01:18:21,690
so I'll just I'll go through this

1771
01:18:20,520 --> 01:18:24,660
quickly it's already been talked about

1772
01:18:21,690 --> 01:18:26,969
so Alice wants to send a message to Bob

1773
01:18:24,660 --> 01:18:29,430
to seal the message with a key that can

1774
01:18:26,970 --> 01:18:30,960
only be decrypted by Bob's device one of

1775
01:18:29,430 --> 01:18:32,460
the things that we have to deal with we

1776
01:18:30,960 --> 01:18:34,500
had to deal with as a first-class

1777
01:18:32,460 --> 01:18:36,600
citizen with the that fact that

1778
01:18:34,500 --> 01:18:39,060
what if Bob changes the devices right

1779
01:18:36,600 --> 01:18:41,280
like so the message actually goes to

1780
01:18:39,060 --> 01:18:44,310
Bob's device but Bob can't decrypt it so

1781
01:18:41,280 --> 01:18:48,389
it's essentially that you have to retry

1782
01:18:44,310 --> 01:18:50,580
the message or two to decrypt it now

1783
01:18:48,390 --> 01:18:53,580
what if Alice changes devices so now you

1784
01:18:50,580 --> 01:18:55,800
essentially have message loss so if you

1785
01:18:53,580 --> 01:18:57,450
think of like some of the key

1786
01:18:55,800 --> 01:18:59,640
requirements from this particularly look

1787
01:18:57,450 --> 01:19:01,860
at this right like if as things happen

1788
01:18:59,640 --> 01:19:03,780
like for example if the retry the amount

1789
01:19:01,860 --> 01:19:05,339
of time it takes to retry increases the

1790
01:19:03,780 --> 01:19:07,620
probability that the sender has changed

1791
01:19:05,340 --> 01:19:11,490
devices also increases which essentially

1792
01:19:07,620 --> 01:19:12,870
translates to message losses so what are

1793
01:19:11,490 --> 01:19:14,429
some of the key requirements that we

1794
01:19:12,870 --> 01:19:16,680
thought were going in right like as very

1795
01:19:14,430 --> 01:19:19,080
fast key distribution a very fast

1796
01:19:16,680 --> 01:19:21,150
mechanism to retry messages because

1797
01:19:19,080 --> 01:19:22,860
essentially any retry delay increases

1798
01:19:21,150 --> 01:19:25,440
the probability that the sender is

1799
01:19:22,860 --> 01:19:28,139
actually changing the device and there

1800
01:19:25,440 --> 01:19:29,490
will be content loss so status score I

1801
01:19:28,140 --> 01:19:31,920
think as I said before it's been

1802
01:19:29,490 --> 01:19:33,900
implemented but what are some of the key

1803
01:19:31,920 --> 01:19:35,670
differentiators from them with our

1804
01:19:33,900 --> 01:19:38,490
half-right like none of them actually

1805
01:19:35,670 --> 01:19:39,660
have a logout button iMessage hasman but

1806
01:19:38,490 --> 01:19:41,460
what is that when was the last time they

1807
01:19:39,660 --> 01:19:42,570
didn't even actually logged out of their

1808
01:19:41,460 --> 01:19:44,310
eye message unless they're actually

1809
01:19:42,570 --> 01:19:48,570
changing devices or something or getting

1810
01:19:44,310 --> 01:19:49,710
a new phone next is we actually couple

1811
01:19:48,570 --> 01:19:51,660
our app with like single session

1812
01:19:49,710 --> 01:19:54,060
restrictions because we have this notion

1813
01:19:51,660 --> 01:19:55,950
of let's try to enforce one-time Ness of

1814
01:19:54,060 --> 01:19:58,200
you can only play it certain piece of

1815
01:19:55,950 --> 01:19:59,610
content once imagine you have multiple

1816
01:19:58,200 --> 01:20:02,190
sessions and how you're going to enforce

1817
01:19:59,610 --> 01:20:04,170
this across multiple devices that are

1818
01:20:02,190 --> 01:20:07,530
varying degrees of connectivity it's

1819
01:20:04,170 --> 01:20:08,910
just a massively distributed DRM problem

1820
01:20:07,530 --> 01:20:10,590
which is very hard to solve the

1821
01:20:08,910 --> 01:20:12,099
simplistic way out was like to keep it a

1822
01:20:10,590 --> 01:20:14,980
single session so we can enforce one

1823
01:20:12,100 --> 01:20:16,510
tecna's their authentication model if

1824
01:20:14,980 --> 01:20:18,639
you really look at it relies on device

1825
01:20:16,510 --> 01:20:20,260
identity for example whatsapp signal or

1826
01:20:18,640 --> 01:20:22,180
hi message right like the authentication

1827
01:20:20,260 --> 01:20:24,760
is tied specifically to the device so

1828
01:20:22,180 --> 01:20:27,220
it's very hard for anyone to churn them

1829
01:20:24,760 --> 01:20:30,610
and sessions are extremely tightly

1830
01:20:27,220 --> 01:20:32,020
coupled to a particular device so we

1831
01:20:30,610 --> 01:20:33,940
introduced this notion of an account

1832
01:20:32,020 --> 01:20:35,590
based into enter an encryption so

1833
01:20:33,940 --> 01:20:37,719
private keys are still exclusively

1834
01:20:35,590 --> 01:20:39,940
present on a client device but we needed

1835
01:20:37,720 --> 01:20:43,030
a mechanism by which we could very

1836
01:20:39,940 --> 01:20:44,830
quickly change the private key to device

1837
01:20:43,030 --> 01:20:47,559
Association and propagate that change

1838
01:20:44,830 --> 01:20:49,570
very quickly to the social graph and

1839
01:20:47,560 --> 01:20:52,720
also make retry much faster I'll talk

1840
01:20:49,570 --> 01:20:55,480
about that and adding notions of

1841
01:20:52,720 --> 01:20:57,250
recipient level forward secrecy as as is

1842
01:20:55,480 --> 01:20:59,049
introduced by axel Dahl makes a retry

1843
01:20:57,250 --> 01:21:00,910
slower I'll talk about that a little bit

1844
01:20:59,050 --> 01:21:02,170
later and also our users we have this

1845
01:21:00,910 --> 01:21:05,019
concept of a streak like for example

1846
01:21:02,170 --> 01:21:06,490
every day users actually exchange snaps

1847
01:21:05,020 --> 01:21:08,860
with each other and every day they

1848
01:21:06,490 --> 01:21:10,179
exchange it this street count goes up

1849
01:21:08,860 --> 01:21:13,330
there are certain users that actually

1850
01:21:10,180 --> 01:21:15,460
have street counts in multiple years so

1851
01:21:13,330 --> 01:21:17,260
now if you go in and say oh uh sorry

1852
01:21:15,460 --> 01:21:18,550
this you change your device you're gonna

1853
01:21:17,260 --> 01:21:20,770
lose a streak that's gonna be a very

1854
01:21:18,550 --> 01:21:23,380
upsetting conversation with our users so

1855
01:21:20,770 --> 01:21:25,720
that's not something we can the business

1856
01:21:23,380 --> 01:21:29,110
would allow us to do so we had to relax

1857
01:21:25,720 --> 01:21:30,220
some of those constraints so what are

1858
01:21:29,110 --> 01:21:31,780
some of the building blocks we had

1859
01:21:30,220 --> 01:21:34,450
already like obviously first starts with

1860
01:21:31,780 --> 01:21:36,880
identity so we needed a database that

1861
01:21:34,450 --> 01:21:40,330
was secured in a post logout mechanism

1862
01:21:36,880 --> 01:21:43,030
so secrets can be stored in it only when

1863
01:21:40,330 --> 01:21:46,030
the user the to which those secrets

1864
01:21:43,030 --> 01:21:47,440
belong to are actually logged in so the

1865
01:21:46,030 --> 01:21:48,790
help of the server essentially have sort

1866
01:21:47,440 --> 01:21:50,679
of like a two by two secret shared

1867
01:21:48,790 --> 01:21:53,080
system so we created an encrypted

1868
01:21:50,680 --> 01:21:55,000
database on the client and the keys can

1869
01:21:53,080 --> 01:21:56,170
only be decrypted when the user logs in

1870
01:21:55,000 --> 01:21:58,570
the symmetric key with which the

1871
01:21:56,170 --> 01:21:59,530
database is encrypted is delivered back

1872
01:21:58,570 --> 01:22:03,370
to the client

1873
01:21:59,530 --> 01:22:05,200
and when the user logs in and we did not

1874
01:22:03,370 --> 01:22:07,240
want any information leakage about the

1875
01:22:05,200 --> 01:22:09,670
identity of the other user on in a post

1876
01:22:07,240 --> 01:22:11,260
logout state for example no user IDs can

1877
01:22:09,670 --> 01:22:14,050
be present or public keys or any of

1878
01:22:11,260 --> 01:22:16,570
those because we didn't want hey can I

1879
01:22:14,050 --> 01:22:18,400
use your if the user is logging in or

1880
01:22:16,570 --> 01:22:19,960
not on trust and device we wanted to

1881
01:22:18,400 --> 01:22:21,940
have zero information leakage even

1882
01:22:19,960 --> 01:22:25,710
public keys user IDs they're all they're

1883
01:22:21,940 --> 01:22:27,690
all can be tied back to users so

1884
01:22:25,710 --> 01:22:29,340
simple cryptographic techniques but sort

1885
01:22:27,690 --> 01:22:30,809
of which made our implementation much

1886
01:22:29,340 --> 01:22:33,540
harder but we wanted to add this defense

1887
01:22:30,810 --> 01:22:36,150
keyed h box that are keyed with sort of

1888
01:22:33,540 --> 01:22:38,310
like the user specific key instead of

1889
01:22:36,150 --> 01:22:41,490
like thinking using native ids or hashes

1890
01:22:38,310 --> 01:22:43,290
so how does login work in the system

1891
01:22:41,490 --> 01:22:45,210
right likes a client logs in from any

1892
01:22:43,290 --> 01:22:47,160
device generated key pair there's a

1893
01:22:45,210 --> 01:22:48,930
database encryption key and it all

1894
01:22:47,160 --> 01:22:50,730
obviously can have a list of other

1895
01:22:48,930 --> 01:22:53,130
public keys that are present on it so it

1896
01:22:50,730 --> 01:22:55,980
sends an H marked list of public keys if

1897
01:22:53,130 --> 01:22:58,170
any present sends obviously the current

1898
01:22:55,980 --> 01:22:59,730
public key along with the current login

1899
01:22:58,170 --> 01:23:01,650
credentials right click so that's as

1900
01:22:59,730 --> 01:23:03,450
part of login it's LV again if you look

1901
01:23:01,650 --> 01:23:06,059
at it we wanted to make retry as fast as

1902
01:23:03,450 --> 01:23:07,950
possible so the identity is generated as

1903
01:23:06,060 --> 01:23:10,370
part of login and goes to the server the

1904
01:23:07,950 --> 01:23:12,330
server checks if there is a a

1905
01:23:10,370 --> 01:23:14,940
retrievable identity with the

1906
01:23:12,330 --> 01:23:17,309
credentials as passed and the H max list

1907
01:23:14,940 --> 01:23:18,809
of public keys a descent so it says ok

1908
01:23:17,310 --> 01:23:20,580
so this is a user that is logging in

1909
01:23:18,810 --> 01:23:23,460
from the same device so I can actually

1910
01:23:20,580 --> 01:23:25,050
retrieve the identity if yes then it

1911
01:23:23,460 --> 01:23:28,680
sends back the database encryption key

1912
01:23:25,050 --> 01:23:30,420
if no then it basically associates a

1913
01:23:28,680 --> 01:23:32,700
this new public key to this particular

1914
01:23:30,420 --> 01:23:34,380
user and instantaneously does a fan-out

1915
01:23:32,700 --> 01:23:36,660
of this public key to the entire social

1916
01:23:34,380 --> 01:23:38,220
graph so this is sort of like this

1917
01:23:36,660 --> 01:23:40,559
notion of a current based identity which

1918
01:23:38,220 --> 01:23:42,930
makes a super fast fan-out

1919
01:23:40,560 --> 01:23:44,460
it's obviously now the server response

1920
01:23:42,930 --> 01:23:46,350
comes back if there's a database

1921
01:23:44,460 --> 01:23:47,880
encryption key the client will like oh

1922
01:23:46,350 --> 01:23:50,910
sure I can actually retrieve the

1923
01:23:47,880 --> 01:23:54,060
identity it decrypts it and then it can

1924
01:23:50,910 --> 01:23:56,309
open the database and everything's good

1925
01:23:54,060 --> 01:23:58,560
if it cannot then it says ok so this is

1926
01:23:56,310 --> 01:24:00,300
this is a the server couldn't retrieve

1927
01:23:58,560 --> 01:24:03,000
the identity this is an identity I need

1928
01:24:00,300 --> 01:24:05,340
to use so it commits the previously

1929
01:24:03,000 --> 01:24:08,610
generated key pair sort of like almost

1930
01:24:05,340 --> 01:24:10,260
like a two-phase commit I across the

1931
01:24:08,610 --> 01:24:11,759
client and the server and then it

1932
01:24:10,260 --> 01:24:13,320
started the client that said the server

1933
01:24:11,760 --> 01:24:15,150
is the one that's saying yes this is the

1934
01:24:13,320 --> 01:24:17,250
common message so you can start using

1935
01:24:15,150 --> 01:24:21,599
its and persisted and say this is my new

1936
01:24:17,250 --> 01:24:23,490
identity and uses it so sort of like if

1937
01:24:21,600 --> 01:24:25,560
we go back to the requirements check so

1938
01:24:23,490 --> 01:24:27,870
securely support multiple users on a

1939
01:24:25,560 --> 01:24:29,850
given device this this building block

1940
01:24:27,870 --> 01:24:31,530
gives us that and it also makes retry

1941
01:24:29,850 --> 01:24:35,160
super fast because you can very quickly

1942
01:24:31,530 --> 01:24:36,480
fan out the public key so next is sort

1943
01:24:35,160 --> 01:24:38,490
of like the how does content get

1944
01:24:36,480 --> 01:24:39,589
uploaded because it's not done offices

1945
01:24:38,490 --> 01:24:42,510
sort of text message

1946
01:24:39,590 --> 01:24:44,280
so anytime we need a piece of content or

1947
01:24:42,510 --> 01:24:45,870
an image or a snap is created we encrypt

1948
01:24:44,280 --> 01:24:48,059
it with the content encryption key

1949
01:24:45,870 --> 01:24:49,800
that's generated on the client to make

1950
01:24:48,060 --> 01:24:51,810
things faster because these are large

1951
01:24:49,800 --> 01:24:54,780
video files so we actually start

1952
01:24:51,810 --> 01:24:56,640
uploading the content right away but we

1953
01:24:54,780 --> 01:24:58,650
never sent the cek up so it's just the

1954
01:24:56,640 --> 01:25:00,030
content gets uploaded and when the user

1955
01:24:58,650 --> 01:25:02,070
chooses to share the content with

1956
01:25:00,030 --> 01:25:04,170
snapchat then the content encryption

1957
01:25:02,070 --> 01:25:05,880
keys upload the additional property you

1958
01:25:04,170 --> 01:25:07,770
sort of get for this is that if a user

1959
01:25:05,880 --> 01:25:10,170
chooses to discard the content then we

1960
01:25:07,770 --> 01:25:11,880
actually our servers cannot even decrypt

1961
01:25:10,170 --> 01:25:14,100
it so sorry you just don't we have a

1962
01:25:11,880 --> 01:25:15,750
bunch of garbage bytes then just get

1963
01:25:14,100 --> 01:25:17,450
deleted away by the garbage collector at

1964
01:25:15,750 --> 01:25:20,520
us after a certain period of time and

1965
01:25:17,450 --> 01:25:22,139
the interesting thing it's not as this

1966
01:25:20,520 --> 01:25:23,610
notion of franking but it's say the

1967
01:25:22,140 --> 01:25:25,350
abuse why is one of the things that

1968
01:25:23,610 --> 01:25:27,210
helps is the fact that there's a cek

1969
01:25:25,350 --> 01:25:29,670
what we do is sort of just if a

1970
01:25:27,210 --> 01:25:31,200
recipient uploads claims abuse we just

1971
01:25:29,670 --> 01:25:33,390
have to the recipient has to upload the

1972
01:25:31,200 --> 01:25:35,040
cek instead of the content it doesn't

1973
01:25:33,390 --> 01:25:37,020
have all the great properties that we

1974
01:25:35,040 --> 01:25:38,730
talked about but at the very least there

1975
01:25:37,020 --> 01:25:41,910
is a surance that it was indeed the

1976
01:25:38,730 --> 01:25:43,019
image that was sent by the sender so

1977
01:25:41,910 --> 01:25:44,700
what are the some of the changes for an

1978
01:25:43,020 --> 01:25:46,380
turn encryption obviously very trivial

1979
01:25:44,700 --> 01:25:49,110
just take that cek and wrap it in a

1980
01:25:46,380 --> 01:25:50,940
manner that send to encrypted so you

1981
01:25:49,110 --> 01:25:53,790
purse you have to persist the cek in the

1982
01:25:50,940 --> 01:25:55,830
client because you need the you need to

1983
01:25:53,790 --> 01:25:58,530
be ready for a retry message if you

1984
01:25:55,830 --> 01:26:00,600
don't persist it on the client it you

1985
01:25:58,530 --> 01:26:02,880
discard it then a retry is not possible

1986
01:26:00,600 --> 01:26:04,680
so we actually need to persist it in a

1987
01:26:02,880 --> 01:26:07,739
the same post logon secure database

1988
01:26:04,680 --> 01:26:09,390
until you receive an AK or we have

1989
01:26:07,739 --> 01:26:11,190
content expiry we actually have 30-day

1990
01:26:09,390 --> 01:26:12,989
content expire ease we have a cleaner

1991
01:26:11,190 --> 01:26:15,870
that cleans out everything in 30 days on

1992
01:26:12,989 --> 01:26:18,000
the client the crypto is pretty much the

1993
01:26:15,870 --> 01:26:19,800
easy part just use a KD after or a

1994
01:26:18,000 --> 01:26:22,290
secret from the pre-shared secret and

1995
01:26:19,800 --> 01:26:26,520
encrypt and market with any additional

1996
01:26:22,290 --> 01:26:28,290
authentication data the cdk sort of like

1997
01:26:26,520 --> 01:26:31,380
how does the picture look like so Alice

1998
01:26:28,290 --> 01:26:34,019
is on device d1 with a public identity a

1999
01:26:31,380 --> 01:26:36,239
d1 Bob is on these three three devices

2000
01:26:34,020 --> 01:26:39,270
there's a public key synchronization

2001
01:26:36,239 --> 01:26:43,080
protocol Alice creates a snap encrypts

2002
01:26:39,270 --> 01:26:45,840
it uploads encrypted encrypts it uploads

2003
01:26:43,080 --> 01:26:49,559
it to snapchat servers with the key k1

2004
01:26:45,840 --> 01:26:52,159
but k1 is not sent now you take their k1

2005
01:26:49,560 --> 01:26:54,860
and wrap it - Bob's three devices

2006
01:26:52,159 --> 01:26:57,110
and Bob can fetch the encrypt fetch the

2007
01:26:54,860 --> 01:26:59,870
encrypted snap unwrap Kalyan because the

2008
01:26:57,110 --> 01:27:02,120
he's on a device that has that can

2009
01:26:59,870 --> 01:27:04,780
unwrap it and take the snap it's pretty

2010
01:27:02,120 --> 01:27:07,580
straightforward this works fine for

2011
01:27:04,780 --> 01:27:09,620
99.9% of the time but the point one

2012
01:27:07,580 --> 01:27:12,260
percent is something we had to engineer

2013
01:27:09,620 --> 01:27:14,449
a whole lot for so obviously what it

2014
01:27:12,260 --> 01:27:16,460
does it supports multiple devices for a

2015
01:27:14,449 --> 01:27:19,190
given user this is the key requirement

2016
01:27:16,460 --> 01:27:20,270
that it meets so the other building

2017
01:27:19,190 --> 01:27:21,739
block that we had to build it sort of

2018
01:27:20,270 --> 01:27:23,989
like this fun notion of catch me if you

2019
01:27:21,739 --> 01:27:25,610
can on the sender side so if you look at

2020
01:27:23,989 --> 01:27:28,309
this picture again same thing as before

2021
01:27:25,610 --> 01:27:30,349
Alice has uploaded something a piece of

2022
01:27:28,310 --> 01:27:32,960
content that's encrypted

2023
01:27:30,350 --> 01:27:34,670
what if key the key Bob has on a new

2024
01:27:32,960 --> 01:27:36,620
device after the key sync phase is

2025
01:27:34,670 --> 01:27:38,300
completed so now what do you do so

2026
01:27:36,620 --> 01:27:41,510
essentially you can let that go through

2027
01:27:38,300 --> 01:27:44,630
and sort of initiate a retry or you

2028
01:27:41,510 --> 01:27:47,120
basically say no the server can say the

2029
01:27:44,630 --> 01:27:49,040
Bob is acting on a different device that

2030
01:27:47,120 --> 01:27:52,610
he cannot decrypt it so I'm gonna catch

2031
01:27:49,040 --> 01:27:55,130
the the synchronously catch that send a

2032
01:27:52,610 --> 01:27:56,570
message back to Alice's client saying

2033
01:27:55,130 --> 01:27:59,929
that hey Bob is on the new device you

2034
01:27:56,570 --> 01:28:02,900
got to rewrap this message and Alice's

2035
01:27:59,929 --> 01:28:06,110
client sends it back obviously security

2036
01:28:02,900 --> 01:28:07,489
wise snapchat is and is trusted to do

2037
01:28:06,110 --> 01:28:09,469
this and I have one of the additional

2038
01:28:07,489 --> 01:28:11,150
protections we wanted to add was the

2039
01:28:09,469 --> 01:28:12,860
fact that the our client can only talk

2040
01:28:11,150 --> 01:28:14,540
to her servers and we actually have

2041
01:28:12,860 --> 01:28:17,540
certificate pinning in our app so unless

2042
01:28:14,540 --> 01:28:20,030
you're actually able to convince digital

2043
01:28:17,540 --> 01:28:21,530
to issue a new search for apps now ENCOM

2044
01:28:20,030 --> 01:28:23,210
it's very hard to intercept that

2045
01:28:21,530 --> 01:28:25,610
communication chuckle so that's the

2046
01:28:23,210 --> 01:28:30,440
additional security benefit we have but

2047
01:28:25,610 --> 01:28:33,080
wit certificate pinning so now bob can

2048
01:28:30,440 --> 01:28:34,879
actually unwrap the Sandra and fetch the

2049
01:28:33,080 --> 01:28:36,769
encrypted snap uncropped unwrap Kalyan

2050
01:28:34,880 --> 01:28:39,560
because he's encrypted to Bob's device

2051
01:28:36,770 --> 01:28:41,480
before from a requirement standpoint

2052
01:28:39,560 --> 01:28:43,130
obviously in this case make retries

2053
01:28:41,480 --> 01:28:45,500
faster because we didn't even actually

2054
01:28:43,130 --> 01:28:47,060
haven't to even have to encrypt it sorry

2055
01:28:45,500 --> 01:28:49,880
and retry did sort of like get quick

2056
01:28:47,060 --> 01:28:51,230
half retry loop so what are the other

2057
01:28:49,880 --> 01:28:52,880
building blocks right like sits on the

2058
01:28:51,230 --> 01:28:53,599
recipient site like imagine Alice has

2059
01:28:52,880 --> 01:28:55,550
sent a snap

2060
01:28:53,600 --> 01:28:57,440
everything's Alice's received an act

2061
01:28:55,550 --> 01:28:59,600
that from snapchat servers that the

2062
01:28:57,440 --> 01:29:02,509
messages when you see now Bob's logging

2063
01:28:59,600 --> 01:29:04,219
in from a new device now obviously Bob

2064
01:29:02,510 --> 01:29:04,729
can't decrypt it too there's no point in

2065
01:29:04,219 --> 01:29:06,019
snapped

2066
01:29:04,729 --> 01:29:09,559
so we're sending that message to Bob's

2067
01:29:06,019 --> 01:29:14,749
client so we suppress it there and then

2068
01:29:09,559 --> 01:29:17,329
we kick off a retry process so how does

2069
01:29:14,749 --> 01:29:18,469
this retry work so if you look at it

2070
01:29:17,329 --> 01:29:20,478
this is sort of where we are

2071
01:29:18,469 --> 01:29:23,059
Bob logs in he's got pending snaps from

2072
01:29:20,479 --> 01:29:24,369
Alice Carol and Dave so what are we

2073
01:29:23,059 --> 01:29:27,440
doing at this point so if you basically

2074
01:29:24,369 --> 01:29:31,880
send retry requests that contains Bob

2075
01:29:27,440 --> 01:29:34,308
new key to all doing Alyce Caron Caron

2076
01:29:31,880 --> 01:29:36,260
Dave's mobile clients and say we

2077
01:29:34,309 --> 01:29:36,920
actually have a content that needs to be

2078
01:29:36,260 --> 01:29:38,510
rewrapped

2079
01:29:36,920 --> 01:29:42,499
please rewrapping this with this

2080
01:29:38,510 --> 01:29:44,179
particular with this neo key so and then

2081
01:29:42,499 --> 01:29:46,880
the snaps are delivered back to Bob in a

2082
01:29:44,179 --> 01:29:48,349
manner that it's asynchronous so what

2083
01:29:46,880 --> 01:29:49,820
are the retry mechanisms we could use

2084
01:29:48,349 --> 01:29:53,780
for it like one it's obviously a regular

2085
01:29:49,820 --> 01:29:56,509
message that is the each of Alice Carol

2086
01:29:53,780 --> 01:29:58,789
and Dave can retrieve it whenever they

2087
01:29:56,510 --> 01:30:00,110
open the app next time or actually a

2088
01:29:58,789 --> 01:30:02,179
push notification to make it more

2089
01:30:00,110 --> 01:30:04,159
instantaneous because you want to be you

2090
01:30:02,179 --> 01:30:06,920
want retries to be as fast as possible

2091
01:30:04,159 --> 01:30:08,629
greatly now with push notifications is

2092
01:30:06,920 --> 01:30:10,639
an interesting security problem because

2093
01:30:08,630 --> 01:30:12,769
push notifications are not completely in

2094
01:30:10,639 --> 01:30:14,900
our control there we first send their

2095
01:30:12,769 --> 01:30:16,429
message to Apple's essa to Amazon's SNS

2096
01:30:14,900 --> 01:30:18,228
servers from there it goes to Apple or

2097
01:30:16,429 --> 01:30:20,780
Google for ultimate delivery to the user

2098
01:30:18,229 --> 01:30:23,209
so the push notification actually

2099
01:30:20,780 --> 01:30:24,440
contains the public key to rewrap to so

2100
01:30:23,209 --> 01:30:25,969
the integrity of this message is

2101
01:30:24,440 --> 01:30:27,469
paramount because if someone can tamper

2102
01:30:25,969 --> 01:30:29,479
with it then they can basically say a

2103
01:30:27,469 --> 01:30:31,400
rewrap this message to this to this new

2104
01:30:29,479 --> 01:30:34,760
public key that and we have zero control

2105
01:30:31,400 --> 01:30:37,429
over that so what we did is sort of like

2106
01:30:34,760 --> 01:30:38,809
a a very simple thing we encrypted the

2107
01:30:37,429 --> 01:30:41,150
public key with the key that is only

2108
01:30:38,809 --> 01:30:42,619
known to the logged in user and snapchat

2109
01:30:41,150 --> 01:30:44,679
server sort of like this Google

2110
01:30:42,619 --> 01:30:47,869
introduces the notion of end-to-end

2111
01:30:44,679 --> 01:30:50,150
security of push notifications between

2112
01:30:47,869 --> 01:30:51,558
the sender and the devices so they

2113
01:30:50,150 --> 01:30:53,239
published a blog post sorry I forgot to

2114
01:30:51,559 --> 01:30:56,780
put a link to it but we kind of did the

2115
01:30:53,239 --> 01:30:59,690
similar thing on the year earlier across

2116
01:30:56,780 --> 01:31:02,179
both Android and iOS so from a

2117
01:30:59,690 --> 01:31:04,098
requirements standpoint status check so

2118
01:31:02,179 --> 01:31:09,139
publicly retries are super fast with

2119
01:31:04,099 --> 01:31:12,050
this very obviously we launched it 360

2120
01:31:09,139 --> 01:31:13,610
to do 62 days back so sort of we were

2121
01:31:12,050 --> 01:31:15,349
trying to time at the rail world crypto

2122
01:31:13,610 --> 01:31:18,530
20:18 last year but we ran into a bug

2123
01:31:15,349 --> 01:31:20,030
which took us three months to fix so

2124
01:31:18,530 --> 01:31:23,090
couldn't launch it in time for that so

2125
01:31:20,030 --> 01:31:25,580
here we are the retry rate is super low

2126
01:31:23,090 --> 01:31:27,290
like 0.1% so that was something we could

2127
01:31:25,580 --> 01:31:28,700
launch with and the more interesting

2128
01:31:27,290 --> 01:31:30,470
part is with us thanks to all of these

2129
01:31:28,700 --> 01:31:32,420
things right like 50% of those things

2130
01:31:30,470 --> 01:31:34,460
that need to be retried 100 3 and a half

2131
01:31:32,420 --> 01:31:36,920
seconds we were actually able to finish

2132
01:31:34,460 --> 01:31:38,630
the retry and within a minute right like

2133
01:31:36,920 --> 01:31:40,580
80 percent of all content that has been

2134
01:31:38,630 --> 01:31:42,290
surprised as a suppress has actually

2135
01:31:40,580 --> 01:31:43,700
been retried and the users are actually

2136
01:31:42,290 --> 01:31:45,710
able to receive the content so from a

2137
01:31:43,700 --> 01:31:47,570
product and a UX standpoint it's

2138
01:31:45,710 --> 01:31:50,300
completely seamless we could turn it on

2139
01:31:47,570 --> 01:31:52,160
by default because we have these the

2140
01:31:50,300 --> 01:31:55,670
users just don't even notice that this

2141
01:31:52,160 --> 01:31:58,040
is happening under the hoods so

2142
01:31:55,670 --> 01:32:01,520
obviously there is somebody something we

2143
01:31:58,040 --> 01:32:03,230
can do add some extensions to this so we

2144
01:32:01,520 --> 01:32:04,430
can have periodic forward secrecy and

2145
01:32:03,230 --> 01:32:06,950
these are all future we're trying to

2146
01:32:04,430 --> 01:32:08,660
implement this no commitments so you can

2147
01:32:06,950 --> 01:32:10,670
do periodic forward secrecy because you

2148
01:32:08,660 --> 01:32:12,380
can say that sage user rotates they're

2149
01:32:10,670 --> 01:32:14,360
keyed in a month or something so the

2150
01:32:12,380 --> 01:32:16,790
window of compromise is sort of reduced

2151
01:32:14,360 --> 01:32:18,679
and you can use sort of like this notion

2152
01:32:16,790 --> 01:32:20,060
of sender to send other senator so

2153
01:32:18,680 --> 01:32:22,640
basically you can reduce the message

2154
01:32:20,060 --> 01:32:24,740
loss obviously extended to other message

2155
01:32:22,640 --> 01:32:28,340
types like text and group chat and the

2156
01:32:24,740 --> 01:32:30,889
travel parent spectrum of ETA versus 8ee

2157
01:32:28,340 --> 01:32:33,920
we so far only happy so you obviously

2158
01:32:30,890 --> 01:32:37,460
have to add EA I appear at 10 to city or

2159
01:32:33,920 --> 01:32:38,960
some protocol like onyx and summary I'm

2160
01:32:37,460 --> 01:32:40,880
just gonna skip over it in the interest

2161
01:32:38,960 --> 01:32:42,090
of leaving time for questions thank you

2162
01:32:40,880 --> 01:32:45,209
very much

2163
01:32:42,090 --> 01:32:45,209
[Applause]

2164
01:32:49,260 --> 01:32:53,999
so are there any kind of interesting

2165
01:32:52,389 --> 01:32:55,869
open problems that you would like to

2166
01:32:53,999 --> 01:32:57,010
present to the community here like

2167
01:32:55,869 --> 01:33:00,568
things you'd like to do that you can't

2168
01:32:57,010 --> 01:33:02,739
do already huh I'm sorry could you like

2169
01:33:00,569 --> 01:33:04,149
you describe the complete system is

2170
01:33:02,739 --> 01:33:06,159
there more work to be done here it's

2171
01:33:04,149 --> 01:33:09,639
like yes so obviously what we want to do

2172
01:33:06,159 --> 01:33:11,499
is we do as I talked about in this like

2173
01:33:09,639 --> 01:33:13,089
periodic forward secrecy we want to be

2174
01:33:11,499 --> 01:33:16,749
able to do like ratcheting in a periodic

2175
01:33:13,089 --> 01:33:18,579
basis like we have other message types

2176
01:33:16,749 --> 01:33:19,989
so those are all things that we're

2177
01:33:18,579 --> 01:33:22,358
planning on working cool

2178
01:33:19,989 --> 01:33:24,848
any other questions yes please X will

2179
01:33:22,359 --> 01:33:27,069
talk those interesting I see you do fan

2180
01:33:24,849 --> 01:33:29,760
out to all the devices have you run into

2181
01:33:27,069 --> 01:33:32,439
performance limitations there if you had

2182
01:33:29,760 --> 01:33:34,089
no I think but the advantage is the fact

2183
01:33:32,439 --> 01:33:36,369
that because you have one key that is

2184
01:33:34,089 --> 01:33:38,050
being massively found out there are

2185
01:33:36,369 --> 01:33:40,239
advantages we can use some different

2186
01:33:38,050 --> 01:33:41,769
kinds of fire architectures to actually

2187
01:33:40,239 --> 01:33:44,138
help but that on the other hand for

2188
01:33:41,769 --> 01:33:45,519
example if you have like the whatsapp

2189
01:33:44,139 --> 01:33:47,619
style of encryption where you have this

2190
01:33:45,519 --> 01:33:49,689
bag of keys each of those bag needs to

2191
01:33:47,619 --> 01:33:51,518
go to so you have multiple public

2192
01:33:49,689 --> 01:33:53,199
messages being published and multiple

2193
01:33:51,519 --> 01:33:55,510
things that subscribers so at the very

2194
01:33:53,199 --> 01:33:57,280
least you have one single publish a

2195
01:33:55,510 --> 01:33:58,989
message that is being published and then

2196
01:33:57,280 --> 01:34:06,129
the fan out so that made it easier for

2197
01:33:58,989 --> 01:34:06,848
us okay yeah thanks for the talk that's

2198
01:34:06,129 --> 01:34:08,800
really cool

2199
01:34:06,849 --> 01:34:12,429
I was just wondering when when you

2200
01:34:08,800 --> 01:34:15,249
encrypt the k1 to Bob's different

2201
01:34:12,429 --> 01:34:16,269
devices is there any kind of consistency

2202
01:34:15,249 --> 01:34:19,449
check between those different

2203
01:34:16,269 --> 01:34:22,689
encryptions what one thinking is that

2204
01:34:19,449 --> 01:34:25,329
Alice could encrypt different keys to

2205
01:34:22,689 --> 01:34:29,139
cause Bob to decrypt a snap to different

2206
01:34:25,329 --> 01:34:31,419
images on different devices so does Bob

2207
01:34:29,139 --> 01:34:33,550
actually check that exactly the key that

2208
01:34:31,419 --> 01:34:35,108
the key that he's using to decrypt the

2209
01:34:33,550 --> 01:34:38,260
message is the same one that was kind of

2210
01:34:35,109 --> 01:34:40,629
committed to yes so basically because

2211
01:34:38,260 --> 01:34:42,339
what Lapidus like Wendy it's there is

2212
01:34:40,629 --> 01:34:44,619
sort of like this cat notion of caching

2213
01:34:42,339 --> 01:34:46,869
everywhere so Bob's device looks at it

2214
01:34:44,619 --> 01:34:48,699
looks at the snap and before the even a

2215
01:34:46,869 --> 01:34:51,669
push notification gets shown to the user

2216
01:34:48,699 --> 01:34:54,219
we actually check it is this a is this

2217
01:34:51,669 --> 01:34:56,260
passage actually can it be decrypted by

2218
01:34:54,219 --> 01:34:56,560
this particular Bob's device so we do

2219
01:34:56,260 --> 01:34:58,750
have

2220
01:34:56,560 --> 01:34:59,710
additional check does that answer your

2221
01:34:58,750 --> 01:35:00,160
question I'm answering a different

2222
01:34:59,710 --> 01:35:02,500
question

2223
01:35:00,160 --> 01:35:03,970
um I think that's a different question

2224
01:35:02,500 --> 01:35:05,350
but we can we could take it offline I

2225
01:35:03,970 --> 01:35:07,420
think he's asking about consistency can

2226
01:35:05,350 --> 01:35:10,030
you make sure that all by shows all the

2227
01:35:07,420 --> 01:35:12,160
devices get the same message okay that's

2228
01:35:10,030 --> 01:35:14,620
just because the message is one the same

2229
01:35:12,160 --> 01:35:17,110
there's none so it's just a message and

2230
01:35:14,620 --> 01:35:19,780
it's got a a envelope off key wrapping

2231
01:35:17,110 --> 01:35:21,820
around top of it well but maybe this

2232
01:35:19,780 --> 01:35:24,370
isn't a real threat in practice but if

2233
01:35:21,820 --> 01:35:28,030
Alice intentionally encrypted different

2234
01:35:24,370 --> 01:35:29,200
keys then Bob could decrypt on different

2235
01:35:28,030 --> 01:35:31,210
devices could decrypt that snap

2236
01:35:29,200 --> 01:35:33,220
differently but the snap that the

2237
01:35:31,210 --> 01:35:34,900
content is one so if you look at it the

2238
01:35:33,220 --> 01:35:37,270
content is already be generated and it's

2239
01:35:34,900 --> 01:35:38,920
already been uploaded once so even if

2240
01:35:37,270 --> 01:35:40,720
you use different keys and it won't

2241
01:35:38,920 --> 01:35:43,180
decrypt because the content was already

2242
01:35:40,720 --> 01:35:44,800
a priori uploaded there's only one piece

2243
01:35:43,180 --> 01:35:46,870
of content and you're just wrapping that

2244
01:35:44,800 --> 01:35:49,120
content encryption key with different

2245
01:35:46,870 --> 01:35:50,500
public keys is fine I'm thanked it but

2246
01:35:49,120 --> 01:35:51,550
in the last talk we saw how you

2247
01:35:50,500 --> 01:35:53,080
yeah I think there's a deeper question

2248
01:35:51,550 --> 01:35:54,340
here so maybe we should take that

2249
01:35:53,080 --> 01:35:57,880
offline okay that's a good it's a good

2250
01:35:54,340 --> 01:35:58,930
it's a good topic yeah um thank you very

2251
01:35:57,880 --> 01:36:02,140
much for the talk it was very

2252
01:35:58,930 --> 01:36:04,540
interesting enlightening the Terms of

2253
01:36:02,140 --> 01:36:05,980
Service for snapchat says that you can

2254
01:36:04,540 --> 01:36:10,600
respond to warrants

2255
01:36:05,980 --> 01:36:13,089
how do you do that with this protocol so

2256
01:36:10,600 --> 01:36:16,780
that's how I can talk about what we do

2257
01:36:13,090 --> 01:36:18,670
today so we basically respond to a

2258
01:36:16,780 --> 01:36:20,530
warrants with what we have in our

2259
01:36:18,670 --> 01:36:24,450
systems and what we have in our systems

2260
01:36:20,530 --> 01:36:24,450
is bytes we can't decrypt

2261
01:36:24,810 --> 01:36:37,300
Wow good answer um thanks for the

2262
01:36:35,020 --> 01:36:39,340
talking thanks for doing this just to

2263
01:36:37,300 --> 01:36:41,680
maybe follow up on that but to

2264
01:36:39,340 --> 01:36:44,140
understand your last point about the EE

2265
01:36:41,680 --> 01:36:47,020
but no a does that mean that in your

2266
01:36:44,140 --> 01:36:49,450
currently deployed system if you told

2267
01:36:47,020 --> 01:36:51,610
the Alice to rewrap something saying hey

2268
01:36:49,450 --> 01:36:52,900
bob has this new device that Alice will

2269
01:36:51,610 --> 01:36:54,910
basically believe you and do it

2270
01:36:52,900 --> 01:36:56,769
absolutely and Alice doesn't currently

2271
01:36:54,910 --> 01:36:58,570
have a way to check whether that device

2272
01:36:56,770 --> 01:37:01,090
in fact belongs to Bob absolutely yeah

2273
01:36:58,570 --> 01:37:02,230
our system today but the a would be you

2274
01:37:01,090 --> 01:37:05,350
might have a way to change that in a

2275
01:37:02,230 --> 01:37:07,719
future yes--that's conics is one

2276
01:37:05,350 --> 01:37:10,060
approach you want to take are the more

2277
01:37:07,720 --> 01:37:11,620
simpler just pyramid identity

2278
01:37:10,060 --> 01:37:13,420
verification but the interesting thing

2279
01:37:11,620 --> 01:37:16,780
for us is because the device churn is so

2280
01:37:13,420 --> 01:37:19,240
high like it just how do you surface

2281
01:37:16,780 --> 01:37:20,620
that so that's very there's a few

2282
01:37:19,240 --> 01:37:22,120
challenges we're not sure how to solve

2283
01:37:20,620 --> 01:37:23,440
that problem yet because you just don't

2284
01:37:22,120 --> 01:37:25,240
want to bombard the users it's sort of

2285
01:37:23,440 --> 01:37:26,620
like a device change device change and

2286
01:37:25,240 --> 01:37:33,130
then everyone is just gonna ignore those

2287
01:37:26,620 --> 01:37:35,320
messages so thanks hi this is kind of a

2288
01:37:33,130 --> 01:37:36,790
follow up to his question if you add the

2289
01:37:35,320 --> 01:37:38,590
authentication layer will you change

2290
01:37:36,790 --> 01:37:43,090
your threat model to allow clients other

2291
01:37:38,590 --> 01:37:46,120
than the ones you will trust basically

2292
01:37:43,090 --> 01:37:48,100
the is it my hunch is we're always gonna

2293
01:37:46,120 --> 01:37:52,180
be sort of in this model of Eden a and

2294
01:37:48,100 --> 01:37:54,070
not a the knee so it's where the use we

2295
01:37:52,180 --> 01:37:57,850
can surface to the user that there isn't

2296
01:37:54,070 --> 01:37:59,679
a potential device change but again

2297
01:37:57,850 --> 01:38:01,420
these are very future looking the way we

2298
01:37:59,680 --> 01:38:04,690
implemented if I were to implement it

2299
01:38:01,420 --> 01:38:06,730
and if what I can get our product guys

2300
01:38:04,690 --> 01:38:08,740
to sign off on as an Eden a model and

2301
01:38:06,730 --> 01:38:13,110
not the inverse you're not gonna stop

2302
01:38:08,740 --> 01:38:15,700
messages from being sent just because oh

2303
01:38:13,110 --> 01:38:18,009
this user has changed their device

2304
01:38:15,700 --> 01:38:21,670
identity now go to that and verify them

2305
01:38:18,010 --> 01:38:23,560
with it okay um my I was asking because

2306
01:38:21,670 --> 01:38:25,870
you said that your threat model implies

2307
01:38:23,560 --> 01:38:27,640
that you're using snapshot servers and

2308
01:38:25,870 --> 01:38:29,440
chapters and snapshots client software

2309
01:38:27,640 --> 01:38:31,480
not a third party developed

2310
01:38:29,440 --> 01:38:33,040
implementation that's great would that

2311
01:38:31,480 --> 01:38:34,389
ever change if you managed to make

2312
01:38:33,040 --> 01:38:37,120
something like key transparency

2313
01:38:34,390 --> 01:38:38,469
implemented swear any kind of

2314
01:38:37,120 --> 01:38:40,559
cryptographic abuse

2315
01:38:38,469 --> 01:38:44,199
sending an authorized keys was not

2316
01:38:40,560 --> 01:38:46,750
really practical so if you think of like

2317
01:38:44,199 --> 01:38:48,610
protocols like onyx right like if we we

2318
01:38:46,750 --> 01:38:50,440
prototype it we had an intern look at it

2319
01:38:48,610 --> 01:38:52,870
what what you would do is sort of like

2320
01:38:50,440 --> 01:38:54,580
the root key right like the the root

2321
01:38:52,870 --> 01:38:57,640
will be transmitted to say someone like

2322
01:38:54,580 --> 01:39:00,010
the conex dot Princeton dot edu or some

2323
01:38:57,640 --> 01:39:01,600
other entity like the FFF the client

2324
01:39:00,010 --> 01:39:03,489
would make two calls to this and the

2325
01:39:01,600 --> 01:39:06,340
other server so that way you can say

2326
01:39:03,489 --> 01:39:10,269
that there is a route that is more

2327
01:39:06,340 --> 01:39:11,949
trusted and that's but the client

2328
01:39:10,270 --> 01:39:13,810
software in itself I don't think if

2329
01:39:11,949 --> 01:39:16,000
you're asking are we planning on open

2330
01:39:13,810 --> 01:39:18,190
sourcing that or putting the crypto

2331
01:39:16,000 --> 01:39:20,140
components of it up for review it's a

2332
01:39:18,190 --> 01:39:23,110
conversation we can have but I as far as

2333
01:39:20,140 --> 01:39:25,449
and we have done a independent security

2334
01:39:23,110 --> 01:39:27,610
review of it but not we not I don't

2335
01:39:25,449 --> 01:39:29,290
think I'm open source that we I don't

2336
01:39:27,610 --> 01:39:34,239
know where your what your questions okay

2337
01:39:29,290 --> 01:39:36,010
well thank you okay so what a quick

2338
01:39:34,239 --> 01:39:38,410
questions a very personal stuff maybe

2339
01:39:36,010 --> 01:39:41,739
not everything good one could get from

2340
01:39:38,410 --> 01:39:43,210
slides is a white paper at least and

2341
01:39:41,739 --> 01:39:45,629
hopefully ideally something is like

2342
01:39:43,210 --> 01:39:47,620
formulas like in you know like you know

2343
01:39:45,630 --> 01:39:49,390
requirements at members of cryptic

2344
01:39:47,620 --> 01:39:52,210
community can kind of read critique

2345
01:39:49,390 --> 01:39:53,949
improve because it's very hard when it's

2346
01:39:52,210 --> 01:39:55,690
just kind of among slides anything

2347
01:39:53,949 --> 01:39:57,219
formal we can study from yes we will

2348
01:39:55,690 --> 01:40:00,250
we're working on it we're hoping to

2349
01:39:57,219 --> 01:40:01,150
release it in about 30 to 45 days that's

2350
01:40:00,250 --> 01:40:02,890
sort of where you're at

2351
01:40:01,150 --> 01:40:04,809
the first draft is done it just takes

2352
01:40:02,890 --> 01:40:08,350
time we wanna be absolutely certain that

2353
01:40:04,810 --> 01:40:11,219
we are like every dot is every hired or

2354
01:40:08,350 --> 01:40:15,780
incorrectly yes it's in the works yeah

2355
01:40:11,219 --> 01:40:15,780
cool very good thank you very much okay

2356
01:40:15,820 --> 01:40:21,130
[Music]

2357
01:40:18,630 --> 01:40:23,230
so we have a breakdown until 11:00 and

2358
01:40:21,130 --> 01:40:25,620
we'll start at 11:00 with more Krypton

2359
01:40:23,230 --> 01:40:25,620
politics

2360
01:40:59,170 --> 01:41:01,230
you

