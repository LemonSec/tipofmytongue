1
00:14:52,640 --> 00:14:55,850
all right

2
00:15:07,590 --> 00:15:15,250
all right so I think it's time to get

3
00:15:11,020 --> 00:15:17,380
started so if you're hereby I declare

4
00:15:15,250 --> 00:15:20,350
that the remaining of real world crypto

5
00:15:17,380 --> 00:15:24,820
is only about blockchain how about that

6
00:15:20,350 --> 00:15:26,650
all right so first session we will have

7
00:15:24,820 --> 00:15:28,690
a little detail full crypto currency

8
00:15:26,650 --> 00:15:29,829
custody solution based on MPC and fiscal

9
00:15:28,690 --> 00:15:32,110
visit ECDSA

10
00:15:29,830 --> 00:15:34,870
thank you very much I won't say the B

11
00:15:32,110 --> 00:15:37,390
word in my talk though this is a joint

12
00:15:34,870 --> 00:15:40,420
work with Ariel northen from bar-ilan

13
00:15:37,390 --> 00:15:43,569
University and Samuel Rena Lucci from

14
00:15:40,420 --> 00:15:47,229
unbound tech the motivation is very

15
00:15:43,570 --> 00:15:50,800
clear a lot of people have invested real

16
00:15:47,230 --> 00:15:54,160
money in digital currency in crypto

17
00:15:50,800 --> 00:15:57,130
currencies and that money that they've

18
00:15:54,160 --> 00:15:59,260
had ever invested or putting is actually

19
00:15:57,130 --> 00:16:01,840
at a great risk it's not a theoretical

20
00:15:59,260 --> 00:16:04,260
risk if you do a quick Google search

21
00:16:01,840 --> 00:16:09,000
you'll see a large amount of theft of

22
00:16:04,260 --> 00:16:12,130
money from exchanges from wallets over

23
00:16:09,000 --> 00:16:13,750
time getting worse and worse and it's a

24
00:16:12,130 --> 00:16:16,570
real problem that we have to solve and

25
00:16:13,750 --> 00:16:18,760
if we want to solve this solution there

26
00:16:16,570 --> 00:16:22,230
are actually three different scenarios

27
00:16:18,760 --> 00:16:24,610
that with that we need to address and

28
00:16:22,230 --> 00:16:26,050
and we'd like to build a platform when

29
00:16:24,610 --> 00:16:29,080
we have built a platform which actually

30
00:16:26,050 --> 00:16:30,969
addresses all of those three in terms of

31
00:16:29,080 --> 00:16:34,810
its flexibility the first is exchanges

32
00:16:30,970 --> 00:16:37,180
so exchanges are a way of enabling you

33
00:16:34,810 --> 00:16:39,280
to buy crypto currencies so crypto

34
00:16:37,180 --> 00:16:43,449
currencies in exchange also between

35
00:16:39,280 --> 00:16:45,310
different currencies as a way of I guess

36
00:16:43,450 --> 00:16:47,110
managing your portfolio there's a

37
00:16:45,310 --> 00:16:49,630
relatively high turnover there's a

38
00:16:47,110 --> 00:16:52,240
necessity to be able to transfer funds

39
00:16:49,630 --> 00:16:54,460
at high frequency and they actually have

40
00:16:52,240 --> 00:16:56,950
a real need to speed up their

41
00:16:54,460 --> 00:16:58,630
transaction rates the problem is that

42
00:16:56,950 --> 00:17:01,450
because of the threat of theft

43
00:16:58,630 --> 00:17:04,150
most of these exchanges have different

44
00:17:01,450 --> 00:17:05,860
size vaults and they have a small amount

45
00:17:04,150 --> 00:17:07,750
of currency in small vaults that are

46
00:17:05,859 --> 00:17:10,389
connected and you can transfer funds

47
00:17:07,750 --> 00:17:12,010
relatively easily but they have the

48
00:17:10,390 --> 00:17:14,199
larger vaults from completely

49
00:17:12,010 --> 00:17:15,879
disconnected from the network and then

50
00:17:14,199 --> 00:17:17,170
when you want to transfer a large amount

51
00:17:15,880 --> 00:17:19,000
of funds they have to transfer from the

52
00:17:17,170 --> 00:17:19,750
larger vault to a medium or smaller

53
00:17:19,000 --> 00:17:22,089
vault

54
00:17:19,750 --> 00:17:25,510
and that takes time in fact the largest

55
00:17:22,089 --> 00:17:27,339
exchanges can take days and actually

56
00:17:25,510 --> 00:17:30,790
sometimes only promise you two weeks to

57
00:17:27,339 --> 00:17:33,550
get your money back which is a very big

58
00:17:30,790 --> 00:17:35,800
pain point obviously and so you like to

59
00:17:33,550 --> 00:17:37,480
improve that and for this you need to

60
00:17:35,800 --> 00:17:39,610
have a separation of vaults of different

61
00:17:37,480 --> 00:17:42,250
levels of security and of usability of

62
00:17:39,610 --> 00:17:43,750
speed around that a second scenario

63
00:17:42,250 --> 00:17:46,480
that's of great interest is that of

64
00:17:43,750 --> 00:17:50,830
custody large financial organizations

65
00:17:46,480 --> 00:17:53,320
and banks manage or provide custody

66
00:17:50,830 --> 00:17:57,100
solutions for general assets and they're

67
00:17:53,320 --> 00:17:59,470
interested in providing also custody for

68
00:17:57,100 --> 00:18:01,540
crypto assets and here we're talking a

69
00:17:59,470 --> 00:18:03,430
very small turnover so the situation is

70
00:18:01,540 --> 00:18:05,590
I have a billion dollars that I want to

71
00:18:03,430 --> 00:18:07,300
invest in cryptocurrency and what I want

72
00:18:05,590 --> 00:18:08,889
is I want this bank or financial

73
00:18:07,300 --> 00:18:11,590
organization to give very very strong

74
00:18:08,890 --> 00:18:13,660
protection so they won't get stolen I

75
00:18:11,590 --> 00:18:15,610
don't need to transfer lots of funds in

76
00:18:13,660 --> 00:18:17,350
and out very often however I do need to

77
00:18:15,610 --> 00:18:19,540
get my money back reasonably fast

78
00:18:17,350 --> 00:18:20,980
because if the whole market is crashing

79
00:18:19,540 --> 00:18:24,399
and it takes two weeks to get your

80
00:18:20,980 --> 00:18:26,080
friends back then it's already much much

81
00:18:24,400 --> 00:18:28,660
too late and this is a solution that's

82
00:18:26,080 --> 00:18:30,610
offered to high-end customers and the

83
00:18:28,660 --> 00:18:32,890
final scenario is that of a wallet this

84
00:18:30,610 --> 00:18:35,530
is something that holds a small amount

85
00:18:32,890 --> 00:18:39,490
of currency typically used by individual

86
00:18:35,530 --> 00:18:42,550
people and possibly is used actually for

87
00:18:39,490 --> 00:18:44,380
carrying out transactions although that

88
00:18:42,550 --> 00:18:47,020
how much that will happen is yet to be

89
00:18:44,380 --> 00:18:49,570
seen so what are the requirements on

90
00:18:47,020 --> 00:18:51,430
such a platform the most obvious is that

91
00:18:49,570 --> 00:18:52,780
of security but I want to stress

92
00:18:51,430 --> 00:18:55,390
something that's often missed in this

93
00:18:52,780 --> 00:18:57,700
space when we think about security so we

94
00:18:55,390 --> 00:19:00,190
all know that the what protects

95
00:18:57,700 --> 00:19:01,810
cryptocurrency is a signing key and so

96
00:19:00,190 --> 00:19:04,270
you think about the possibility of

97
00:19:01,810 --> 00:19:05,740
stealing someone's signing key but in

98
00:19:04,270 --> 00:19:07,840
this setting that we're talking about

99
00:19:05,740 --> 00:19:09,550
that actually isn't really the threat

100
00:19:07,840 --> 00:19:13,060
the thread is actually fraudulent key

101
00:19:09,550 --> 00:19:15,580
usage if I can use your key once then I

102
00:19:13,060 --> 00:19:18,010
can generate a signature that transfers

103
00:19:15,580 --> 00:19:19,870
all of your funds and I'm done

104
00:19:18,010 --> 00:19:22,360
so I don't need to steal the key if I

105
00:19:19,870 --> 00:19:24,310
can use it so if I give you the most the

106
00:19:22,360 --> 00:19:27,340
strongest hardware that protects your

107
00:19:24,310 --> 00:19:28,540
key but I can access that Hardware and

108
00:19:27,340 --> 00:19:30,428
generate a signature then I actually

109
00:19:28,540 --> 00:19:32,320
haven't solved the problem at all so of

110
00:19:30,429 --> 00:19:33,190
course we want to prevent key theft but

111
00:19:32,320 --> 00:19:35,639
primarily the

112
00:19:33,190 --> 00:19:37,840
problem is that a fortune on key usage

113
00:19:35,640 --> 00:19:39,670
there's also issues of backup and

114
00:19:37,840 --> 00:19:45,490
disaster recovery from putting a billion

115
00:19:39,670 --> 00:19:47,470
dollars into a crypto currency custody

116
00:19:45,490 --> 00:19:49,420
solution I want to make sure that the

117
00:19:47,470 --> 00:19:51,250
key is not lost even with very small

118
00:19:49,420 --> 00:19:53,470
probability because a very small

119
00:19:51,250 --> 00:19:56,380
probability on a very very large amount

120
00:19:53,470 --> 00:19:58,840
of money equals quite a high expectation

121
00:19:56,380 --> 00:20:01,150
of loss and we all know of stories of

122
00:19:58,840 --> 00:20:03,340
people losing their keys and losing the

123
00:20:01,150 --> 00:20:05,200
crypto currency but a bank cannot take

124
00:20:03,340 --> 00:20:06,760
that risk and likewise in exchange and

125
00:20:05,200 --> 00:20:08,350
therefore we need to make sure that's

126
00:20:06,760 --> 00:20:11,410
built in there also needs to be

127
00:20:08,350 --> 00:20:14,379
flexibility find truly usability or

128
00:20:11,410 --> 00:20:16,300
speed of transaction with security as in

129
00:20:14,380 --> 00:20:18,490
the exchange example of different vaults

130
00:20:16,300 --> 00:20:20,680
of different sizes needs to support

131
00:20:18,490 --> 00:20:23,200
different coins and systems different

132
00:20:20,680 --> 00:20:26,290
signing algorithms different standards

133
00:20:23,200 --> 00:20:28,210
like bid 30 to 44 for key derivation and

134
00:20:26,290 --> 00:20:31,780
all that needs to be provided in order

135
00:20:28,210 --> 00:20:34,390
to have a really a full platform to

136
00:20:31,780 --> 00:20:36,340
secure these assets so the cryptographic

137
00:20:34,390 --> 00:20:38,740
core of our solution is a threshold

138
00:20:36,340 --> 00:20:40,810
signing protocol or actually a suite of

139
00:20:38,740 --> 00:20:44,050
threshold signing protocols so we

140
00:20:40,810 --> 00:20:46,600
support ECDSA EDD SI and snore ez

141
00:20:44,050 --> 00:20:48,520
dissension or I won't talk about today

142
00:20:46,600 --> 00:20:51,639
because they're actually relatively easy

143
00:20:48,520 --> 00:20:54,790
in the sense that they're MPC or we call

144
00:20:51,640 --> 00:20:58,540
em PC friendly signing algorithms it's a

145
00:20:54,790 --> 00:21:00,940
linear computation which could be made

146
00:20:58,540 --> 00:21:03,129
very efficient with MPC ECDSA on the

147
00:21:00,940 --> 00:21:04,900
other hand is much more difficult our

148
00:21:03,130 --> 00:21:06,520
protocol support distributed key

149
00:21:04,900 --> 00:21:08,800
generation because you don't want to

150
00:21:06,520 --> 00:21:11,260
have the key present at any specific

151
00:21:08,800 --> 00:21:13,240
time and if you think in your mind okay

152
00:21:11,260 --> 00:21:14,650
but I only generated key once anyway so

153
00:21:13,240 --> 00:21:17,410
maybe it's not such a problem I'll do it

154
00:21:14,650 --> 00:21:19,300
disconnected in this space it's not true

155
00:21:17,410 --> 00:21:21,370
very often you're generating keys all

156
00:21:19,300 --> 00:21:23,379
the time and a lot of people essentially

157
00:21:21,370 --> 00:21:24,820
the best that the common practice is to

158
00:21:23,380 --> 00:21:27,730
generate a new key for every transaction

159
00:21:24,820 --> 00:21:29,500
essentially but even if not it makes it

160
00:21:27,730 --> 00:21:31,390
much more difficult to really have a

161
00:21:29,500 --> 00:21:33,370
disconnected secure platform so we need

162
00:21:31,390 --> 00:21:35,500
to tribute key generation it achieves

163
00:21:33,370 --> 00:21:38,560
also proactive security which what I

164
00:21:35,500 --> 00:21:40,450
heard people call here in previous talks

165
00:21:38,560 --> 00:21:42,790
post compromised security so even if

166
00:21:40,450 --> 00:21:44,920
some of the machines holding shares of

167
00:21:42,790 --> 00:21:45,980
the key are compromised we want to make

168
00:21:44,920 --> 00:21:48,860
sure that we recover

169
00:21:45,980 --> 00:21:53,000
that so that an attacker has to breach a

170
00:21:48,860 --> 00:21:55,309
full quorum of signing parties in a

171
00:21:53,000 --> 00:21:58,130
single period in order to be able to

172
00:21:55,309 --> 00:22:00,350
attack anything we support reach access

173
00:21:58,130 --> 00:22:03,049
structures so that means that you can

174
00:22:00,350 --> 00:22:04,789
have a different number of sets of

175
00:22:03,049 --> 00:22:06,679
parties with different thresholds in

176
00:22:04,789 --> 00:22:08,120
each sets and and and or between them

177
00:22:06,679 --> 00:22:10,429
why would you want that

178
00:22:08,120 --> 00:22:12,860
think of a crypto custody solution

179
00:22:10,429 --> 00:22:15,080
offered by a bank then the bank would

180
00:22:12,860 --> 00:22:17,240
want to say that I need both parties at

181
00:22:15,080 --> 00:22:19,010
the customer and at the bank to carry

182
00:22:17,240 --> 00:22:20,750
out the signing transaction in

183
00:22:19,010 --> 00:22:22,220
particular the bank would like to be

184
00:22:20,750 --> 00:22:23,960
able to go to a court of law

185
00:22:22,220 --> 00:22:27,049
and have a cryptographer come and

186
00:22:23,960 --> 00:22:28,429
testify that there's no way the bank by

187
00:22:27,049 --> 00:22:31,460
themselves could have transferred the

188
00:22:28,429 --> 00:22:33,049
money out and and then I would also like

189
00:22:31,460 --> 00:22:34,789
to say that at the customer you'll have

190
00:22:33,049 --> 00:22:37,879
three out of five priorities from one

191
00:22:34,789 --> 00:22:39,889
business unit and two out of four from

192
00:22:37,880 --> 00:22:41,840
the management to carry this transaction

193
00:22:39,889 --> 00:22:44,899
at the bank they'll be also possible

194
00:22:41,840 --> 00:22:47,720
different subsets that can approve the

195
00:22:44,899 --> 00:22:49,729
transaction we also support two two

196
00:22:47,720 --> 00:22:51,799
types of parties and this is a quite

197
00:22:49,730 --> 00:22:53,750
unique to our solution we have both

198
00:22:51,799 --> 00:22:56,389
online signing parties and offline

199
00:22:53,750 --> 00:22:57,919
authorization parties online signing

200
00:22:56,389 --> 00:23:00,408
parties are what you would think of in a

201
00:22:57,919 --> 00:23:02,559
threshold signing scenario you have set

202
00:23:00,409 --> 00:23:04,760
the set of parties and they have to

203
00:23:02,559 --> 00:23:07,158
participate in the computation or to

204
00:23:04,760 --> 00:23:10,639
carry out the to generate the signature

205
00:23:07,159 --> 00:23:12,590
the offline parties are only only

206
00:23:10,639 --> 00:23:14,389
authorized the computation only

207
00:23:12,590 --> 00:23:16,399
authorized the signature but don't

208
00:23:14,389 --> 00:23:18,830
actually participate actively in the

209
00:23:16,399 --> 00:23:22,189
protocol and the reason we want that is

210
00:23:18,830 --> 00:23:24,500
because you can imagine a case where you

211
00:23:22,190 --> 00:23:26,600
have a number of offline power and other

212
00:23:24,500 --> 00:23:28,039
parties you have to authorize the

213
00:23:26,600 --> 00:23:30,230
operation they want to do it from their

214
00:23:28,039 --> 00:23:32,059
mobile wherever they are and they won't

215
00:23:30,230 --> 00:23:33,679
necessarily be online all at the same

216
00:23:32,059 --> 00:23:36,350
time so it's like an asynchronous

217
00:23:33,679 --> 00:23:39,320
authorization that the signature can

218
00:23:36,350 --> 00:23:41,149
take place and forcing all of them to be

219
00:23:39,320 --> 00:23:44,389
online at the same time can be difficult

220
00:23:41,149 --> 00:23:47,090
and what we do is we have shares of the

221
00:23:44,389 --> 00:23:49,399
secret key also at these offline parties

222
00:23:47,090 --> 00:23:51,590
who reshare them to the online parties

223
00:23:49,399 --> 00:23:54,168
and the security model that you get is

224
00:23:51,590 --> 00:23:57,049
that during signing an attacker has to

225
00:23:54,169 --> 00:23:59,540
corrupt a full quorum of signing parties

226
00:23:57,049 --> 00:24:01,430
in order to cheat but not

227
00:23:59,540 --> 00:24:03,139
signing operations even if you corrupt

228
00:24:01,430 --> 00:24:05,120
all of the online parties you still

229
00:24:03,140 --> 00:24:06,710
can't learn anything because the shares

230
00:24:05,120 --> 00:24:09,110
are also the offline part is you have to

231
00:24:06,710 --> 00:24:10,520
corrupt also a quorum there so that's

232
00:24:09,110 --> 00:24:12,709
the property that we would get from that

233
00:24:10,520 --> 00:24:14,000
so this is just an example of maybe you

234
00:24:12,710 --> 00:24:15,920
have a custody setting you have a

235
00:24:14,000 --> 00:24:18,560
service provider you have a even

236
00:24:15,920 --> 00:24:20,540
additional third-party trustee you have

237
00:24:18,560 --> 00:24:23,810
the customer they will hold shares of

238
00:24:20,540 --> 00:24:25,760
the key and they have to participate no

239
00:24:23,810 --> 00:24:27,530
to generate any signature and this is

240
00:24:25,760 --> 00:24:30,200
what gives you the strong protection

241
00:24:27,530 --> 00:24:32,600
against fraudulent key usage okay

242
00:24:30,200 --> 00:24:33,950
there's no because you need so many

243
00:24:32,600 --> 00:24:35,810
different parties from different places

244
00:24:33,950 --> 00:24:38,000
and you have strong separation between

245
00:24:35,810 --> 00:24:40,190
them and use them all to participate in

246
00:24:38,000 --> 00:24:42,800
generating a signature it's not possible

247
00:24:40,190 --> 00:24:44,450
to for example breach the machine that's

248
00:24:42,800 --> 00:24:46,550
connected to secure hardware and

249
00:24:44,450 --> 00:24:50,990
generate a signature because it just

250
00:24:46,550 --> 00:24:53,060
isn't any single place like that I'll

251
00:24:50,990 --> 00:24:54,470
come back to the protocol later on in

252
00:24:53,060 --> 00:24:56,240
the talk but what I want to stress now

253
00:24:54,470 --> 00:24:59,290
is that there's a difference to the

254
00:24:56,240 --> 00:25:01,720
protocol in a platform the threshold

255
00:24:59,290 --> 00:25:04,250
cryptography the threshold signing

256
00:25:01,720 --> 00:25:06,470
protocol that we have at the core is of

257
00:25:04,250 --> 00:25:07,970
course central to the solution but there

258
00:25:06,470 --> 00:25:09,050
are many other elements that are needed

259
00:25:07,970 --> 00:25:10,820
and I'm talking about about

260
00:25:09,050 --> 00:25:12,970
cryptographic elements and not just

261
00:25:10,820 --> 00:25:15,260
obviously these systems and engineering

262
00:25:12,970 --> 00:25:17,210
elements which are which are important

263
00:25:15,260 --> 00:25:19,190
but not related to what I'll talk about

264
00:25:17,210 --> 00:25:20,900
so the things that I mentioned

265
00:25:19,190 --> 00:25:24,530
beforehand like secure backup and

266
00:25:20,900 --> 00:25:26,240
disaster recovery supporting standard

267
00:25:24,530 --> 00:25:28,910
key derivation like this key derivation

268
00:25:26,240 --> 00:25:31,490
that's done from a master key proactive

269
00:25:28,910 --> 00:25:33,020
security party administration all of

270
00:25:31,490 --> 00:25:35,570
these things have to be done in a way

271
00:25:33,020 --> 00:25:39,550
that connect up to the threshold signing

272
00:25:35,570 --> 00:25:44,120
protocol so if I'm deriving a key via

273
00:25:39,550 --> 00:25:49,430
sha-512 on to the Sun on to them a

274
00:25:44,120 --> 00:25:51,739
master key with some path string then

275
00:25:49,430 --> 00:25:53,840
the result of that NPC to do that

276
00:25:51,740 --> 00:25:56,210
operation has to be shares that will

277
00:25:53,840 --> 00:25:58,610
then feed into the threshold signing

278
00:25:56,210 --> 00:26:00,530
protocol and if I'm doing backup then I

279
00:25:58,610 --> 00:26:02,060
have I don't not doing backup of a key

280
00:26:00,530 --> 00:26:04,160
that I hold which is were used to doing

281
00:26:02,060 --> 00:26:05,720
I'm doing backup of shares of keys and

282
00:26:04,160 --> 00:26:07,370
I'll show in a moment why that's

283
00:26:05,720 --> 00:26:09,620
actually not so trivial and all of that

284
00:26:07,370 --> 00:26:11,330
is needed on to get this platform let's

285
00:26:09,620 --> 00:26:12,830
talk for a moment about this about the

286
00:26:11,330 --> 00:26:15,439
backup in

287
00:26:12,830 --> 00:26:16,699
typically you think of so what's what's

288
00:26:15,440 --> 00:26:19,549
the probably wanna so want to make sure

289
00:26:16,700 --> 00:26:22,580
that the bank or the exchange will

290
00:26:19,549 --> 00:26:24,559
always be able to get back the key and

291
00:26:22,580 --> 00:26:26,570
there won't be any danger that it's lost

292
00:26:24,559 --> 00:26:29,000
so the scenario we're thinking of is you

293
00:26:26,570 --> 00:26:31,668
have some standard key like an RSA key

294
00:26:29,000 --> 00:26:34,789
pair and the private keys and an HSM

295
00:26:31,669 --> 00:26:36,799
sitting in a bunker somewhere deep below

296
00:26:34,789 --> 00:26:39,500
the earth that requires five people to

297
00:26:36,799 --> 00:26:41,960
come and open a safe and also to me to

298
00:26:39,500 --> 00:26:43,190
input physically some password no to

299
00:26:41,960 --> 00:26:44,480
open it and if you think I'm talking

300
00:26:43,190 --> 00:26:48,889
about something imaginary I'm actually

301
00:26:44,480 --> 00:26:50,630
not banks do have such systems for other

302
00:26:48,889 --> 00:26:52,279
uses and they're interested in using

303
00:26:50,630 --> 00:26:53,419
that also for this scenario so that's

304
00:26:52,279 --> 00:26:55,580
not an imaginary think that's actually

305
00:26:53,419 --> 00:26:56,840
actually what they want to do and what

306
00:26:55,580 --> 00:27:00,439
you would think is I take the private

307
00:26:56,840 --> 00:27:02,269
key in and and encrypted with the this

308
00:27:00,440 --> 00:27:04,490
RSA key and then you store that

309
00:27:02,269 --> 00:27:04,909
replicated many places and and you're

310
00:27:04,490 --> 00:27:07,039
done

311
00:27:04,909 --> 00:27:09,080
the problem is that we don't hold the

312
00:27:07,039 --> 00:27:11,090
key we only hold shares of the key so

313
00:27:09,080 --> 00:27:13,580
that's fine it's very easy each party

314
00:27:11,090 --> 00:27:15,500
will just encrypt their share of the key

315
00:27:13,580 --> 00:27:17,809
and and that's all that you need to do

316
00:27:15,500 --> 00:27:21,440
the problem is that what happens if one

317
00:27:17,809 --> 00:27:24,470
of the parties is corrupted and encrypts

318
00:27:21,440 --> 00:27:26,029
an incorrect share it's not something

319
00:27:24,470 --> 00:27:28,279
that you can detect because you just get

320
00:27:26,029 --> 00:27:31,190
an RSA encryption and now your entire

321
00:27:28,279 --> 00:27:33,500
disaster recovery and backup is made

322
00:27:31,190 --> 00:27:35,210
completely useless and since we're

323
00:27:33,500 --> 00:27:37,279
talking about protecting millions and

324
00:27:35,210 --> 00:27:39,139
possibly billions of dollars of assets

325
00:27:37,279 --> 00:27:40,940
that's not something which we can afford

326
00:27:39,139 --> 00:27:43,279
to have and therefore we need to have

327
00:27:40,940 --> 00:27:46,340
some zero knowledge proof that each

328
00:27:43,279 --> 00:27:48,139
party will prepare to show that they've

329
00:27:46,340 --> 00:27:52,279
actually backed up the correct share and

330
00:27:48,139 --> 00:27:54,860
only after we verified these backups are

331
00:27:52,279 --> 00:27:57,769
we willing to actually transfer funds

332
00:27:54,860 --> 00:28:00,620
into the system okay that's the idea and

333
00:27:57,769 --> 00:28:03,110
what we do is we have a cut and choose

334
00:28:00,620 --> 00:28:06,289
type zero knowledge proof where

335
00:28:03,110 --> 00:28:08,000
essentially you encrypt either a random

336
00:28:06,289 --> 00:28:09,980
value or the difference between a random

337
00:28:08,000 --> 00:28:11,929
value and your share and then you open

338
00:28:09,980 --> 00:28:14,929
one of them and you should and you

339
00:28:11,929 --> 00:28:16,370
verified these values all match up it's

340
00:28:14,929 --> 00:28:19,429
not difficult to do it's just something

341
00:28:16,370 --> 00:28:21,408
which is crucial by applying Faramir you

342
00:28:19,429 --> 00:28:24,200
get a non-interactive proof that's

343
00:28:21,409 --> 00:28:26,570
publicly verifiable so each party after

344
00:28:24,200 --> 00:28:28,190
key generation of the

345
00:28:26,570 --> 00:28:30,230
you say or whatever the threshold

346
00:28:28,190 --> 00:28:32,419
protocol you're doing will generate an

347
00:28:30,230 --> 00:28:35,750
encryption of its share this will all be

348
00:28:32,419 --> 00:28:39,620
verified and only then will the key be

349
00:28:35,750 --> 00:28:42,350
declared as one that can be used another

350
00:28:39,620 --> 00:28:44,389
component that we need is key derivation

351
00:28:42,350 --> 00:28:46,789
so there are standards called bit 32 and

352
00:28:44,389 --> 00:28:48,678
44 for those of you don't know the idea

353
00:28:46,789 --> 00:28:51,679
is that in many cases especially when

354
00:28:48,679 --> 00:28:53,960
you have wallets you have a master key

355
00:28:51,679 --> 00:28:56,539
that you want to backup and you will

356
00:28:53,960 --> 00:28:59,360
derive all keys in the future from that

357
00:28:56,539 --> 00:29:02,570
master key by applying sha derivation to

358
00:28:59,360 --> 00:29:04,309
some path and the master key in a case

359
00:29:02,570 --> 00:29:06,168
like a custody solution or exchange

360
00:29:04,309 --> 00:29:08,720
solution you don't mind generating

361
00:29:06,169 --> 00:29:11,600
backup everytime you generate the key

362
00:29:08,720 --> 00:29:15,230
but in like a wallet scenario that's not

363
00:29:11,600 --> 00:29:17,870
something that's viable now in a similar

364
00:29:15,230 --> 00:29:19,490
problem arises here like beforehand what

365
00:29:17,870 --> 00:29:21,590
happens if when we want to do this

366
00:29:19,490 --> 00:29:22,759
derivation which we're doing an npc so

367
00:29:21,590 --> 00:29:24,559
because obviously we're not going to

368
00:29:22,759 --> 00:29:27,200
hold in the key in any place so we're

369
00:29:24,559 --> 00:29:29,269
doing some NPC vie garbled circuit or

370
00:29:27,200 --> 00:29:33,169
something else in order to generate the

371
00:29:29,269 --> 00:29:37,100
 generate the derived key the result

372
00:29:33,169 --> 00:29:39,950
of that is shares that are then input by

373
00:29:37,100 --> 00:29:42,769
the parties into the ECDSA protocol now

374
00:29:39,950 --> 00:29:45,860
you have to make sure that the parties

375
00:29:42,769 --> 00:29:48,470
input the correct results from that NPC

376
00:29:45,860 --> 00:29:49,789
into the protocol otherwise again you're

377
00:29:48,470 --> 00:29:52,850
getting something which will not be a

378
00:29:49,789 --> 00:29:54,799
valid key more more importantly or more

379
00:29:52,850 --> 00:29:57,529
interestingly you have to make sure the

380
00:29:54,799 --> 00:29:59,929
parties input the correct share of the

381
00:29:57,529 --> 00:30:01,639
master key because if they don't then

382
00:29:59,929 --> 00:30:05,149
what will happen is will generate a

383
00:30:01,639 --> 00:30:09,709
valid ECDSA key and everything will be

384
00:30:05,149 --> 00:30:11,479
fine but if you want to reconstruct that

385
00:30:09,710 --> 00:30:12,679
private key from the master key you

386
00:30:11,480 --> 00:30:15,169
won't be able to because one of the

387
00:30:12,679 --> 00:30:16,700
parties input an incorrect value and the

388
00:30:15,169 --> 00:30:19,759
crucial point you have to understand is

389
00:30:16,700 --> 00:30:22,340
that NPC protects the process of

390
00:30:19,759 --> 00:30:25,220
computations but not that you input the

391
00:30:22,340 --> 00:30:27,049
correct value NPC doesn't say anything

392
00:30:25,220 --> 00:30:28,370
that using correct values but only that

393
00:30:27,049 --> 00:30:30,440
from your that the only thing that's

394
00:30:28,370 --> 00:30:33,320
learned is the output if I input some

395
00:30:30,440 --> 00:30:36,230
incorrect value that's not inside the

396
00:30:33,320 --> 00:30:38,840
scope of NPC so we have an NPC protocol

397
00:30:36,230 --> 00:30:40,190
that actually enables you to do this in

398
00:30:38,840 --> 00:30:42,320
a verified way

399
00:30:40,190 --> 00:30:45,559
I won't go into details but the idea is

400
00:30:42,320 --> 00:30:48,049
that you generate shares of the new key

401
00:30:45,559 --> 00:30:49,700
and of the old key and the parties don't

402
00:30:48,049 --> 00:30:52,908
know which shares that they've got and

403
00:30:49,700 --> 00:30:54,679
therefore they're unable to cheat and

404
00:30:52,909 --> 00:30:57,139
you can verify that the shares of the

405
00:30:54,679 --> 00:30:59,090
old key indeed are the old key and then

406
00:30:57,139 --> 00:31:03,019
the new key is the one that is actually

407
00:30:59,090 --> 00:31:04,908
used afterwards as I mentioned we also

408
00:31:03,019 --> 00:31:09,309
have proactive or post compromised

409
00:31:04,909 --> 00:31:12,379
security and this is achieved by

410
00:31:09,309 --> 00:31:14,840
essentially adding a random polynomial

411
00:31:12,379 --> 00:31:17,360
if you using shimmy or sharing a random

412
00:31:14,840 --> 00:31:19,730
polynomial with a zero constant term and

413
00:31:17,360 --> 00:31:21,320
we also have party administration I want

414
00:31:19,730 --> 00:31:22,850
to note that one of the important

415
00:31:21,320 --> 00:31:25,309
aspects that you get here the junket

416
00:31:22,850 --> 00:31:26,750
with multi sync type solutions beyond

417
00:31:25,309 --> 00:31:28,610
the fact that multisig is much more

418
00:31:26,750 --> 00:31:31,879
limited and doesn't exist on all

419
00:31:28,610 --> 00:31:34,250
platforms is that if a custom if if an

420
00:31:31,879 --> 00:31:38,209
employee leaves the company then you

421
00:31:34,250 --> 00:31:39,950
need to make their share of the KB being

422
00:31:38,210 --> 00:31:41,059
valid otherwise they're walking around

423
00:31:39,950 --> 00:31:43,370
with a valid share and they shouldn't

424
00:31:41,059 --> 00:31:45,259
have that guy really really capability

425
00:31:43,370 --> 00:31:47,239
anymore in multi-sig you would actually

426
00:31:45,259 --> 00:31:49,909
have to transfer the funds now because

427
00:31:47,240 --> 00:31:53,240
there's no way of invalidating that key

428
00:31:49,909 --> 00:31:55,549
but here it's easy you can re share and

429
00:31:53,240 --> 00:31:58,309
then that that share becomes completely

430
00:31:55,549 --> 00:32:01,340
invalid okay now back to the threshold

431
00:31:58,309 --> 00:32:03,080
ECDSA which is the core of our solution

432
00:32:01,340 --> 00:32:05,240
so it's actually been a long-standing

433
00:32:03,080 --> 00:32:07,879
problem to simultaneously achieve the

434
00:32:05,240 --> 00:32:11,440
following two properties first what we

435
00:32:07,879 --> 00:32:14,240
call full threshold and that means that

436
00:32:11,440 --> 00:32:16,730
you need a quorum to sign and and

437
00:32:14,240 --> 00:32:18,639
anything below that poram any subset

438
00:32:16,730 --> 00:32:21,049
below that core means are unable to

439
00:32:18,639 --> 00:32:23,570
generate any signature or cheat in any

440
00:32:21,049 --> 00:32:26,059
way and to get that simultaneously with

441
00:32:23,570 --> 00:32:27,200
a fish efficient key generation in the

442
00:32:26,059 --> 00:32:29,090
multi-party case has been a

443
00:32:27,200 --> 00:32:31,610
long-standing open problem so for the

444
00:32:29,090 --> 00:32:33,549
two-party case we have solutions very

445
00:32:31,610 --> 00:32:36,168
recently have very efficient solutions

446
00:32:33,549 --> 00:32:38,450
and for the multi-party case there was

447
00:32:36,169 --> 00:32:41,269
work going back to the late 90s of

448
00:32:38,450 --> 00:32:44,090
general Thailand who go who's he who's

449
00:32:41,269 --> 00:32:45,769
here and but they don't get full

450
00:32:44,090 --> 00:32:47,539
threshold and for any number of

451
00:32:45,769 --> 00:32:50,500
corrupted so with full threshold doesn't

452
00:32:47,539 --> 00:32:53,690
work for by gennaro al from 2016

453
00:32:50,500 --> 00:32:56,779
but that

454
00:32:53,690 --> 00:32:59,509
requires the parties to generate in a

455
00:32:56,779 --> 00:33:02,059
distributed way a multi-year key a

456
00:32:59,509 --> 00:33:03,529
shared pyar ki and there's no practical

457
00:33:02,059 --> 00:33:05,658
way of doing that we can do this

458
00:33:03,529 --> 00:33:07,700
practically with two parties the best

459
00:33:05,659 --> 00:33:09,440
result was from crypto last year takes

460
00:33:07,700 --> 00:33:13,549
40 seconds for two parties so it's an

461
00:33:09,440 --> 00:33:15,529
expensive operation for multi parties we

462
00:33:13,549 --> 00:33:16,639
don't even have any protocol that's been

463
00:33:15,529 --> 00:33:18,919
implemented there are theoretical

464
00:33:16,639 --> 00:33:20,199
protocols it's unclear at all that this

465
00:33:18,919 --> 00:33:23,419
is practical

466
00:33:20,200 --> 00:33:26,269
so we present in a new protocol for

467
00:33:23,419 --> 00:33:29,049
ECDSA at CCS last year relies on the

468
00:33:26,269 --> 00:33:31,789
hardness of PI indeed eh and in parallel

469
00:33:29,049 --> 00:33:34,279
general golfer also presented a protocol

470
00:33:31,789 --> 00:33:37,070
that has similar performance but works

471
00:33:34,279 --> 00:33:38,779
in a different way to explain our

472
00:33:37,070 --> 00:33:41,299
protocol at least the high-level idea

473
00:33:38,779 --> 00:33:43,789
behind it just just review briefly what

474
00:33:41,299 --> 00:33:46,279
ECDSA signatures are so we have G which

475
00:33:43,789 --> 00:33:47,960
is a generator of an EC group we have

476
00:33:46,279 --> 00:33:51,080
the message m to be signed and we have

477
00:33:47,960 --> 00:33:56,179
to generate this equation where X here

478
00:33:51,080 --> 00:33:59,960
is the private key K is a random value

479
00:33:56,179 --> 00:34:01,909
and R is generated by computing K times

480
00:33:59,960 --> 00:34:05,750
G you get a point and then you take the

481
00:34:01,909 --> 00:34:08,389
X part of that point modulo Q and then

482
00:34:05,750 --> 00:34:13,219
the signature is our an S now what makes

483
00:34:08,389 --> 00:34:16,099
ECDSA annoying for MPC people is this K

484
00:34:13,219 --> 00:34:17,689
inverse and our over here which is

485
00:34:16,099 --> 00:34:20,720
derived from care you have to get

486
00:34:17,690 --> 00:34:22,879
generate this capital R and this K

487
00:34:20,719 --> 00:34:25,158
inverse in a distributed way and that's

488
00:34:22,879 --> 00:34:27,980
a nonlinear operation that's actually

489
00:34:25,159 --> 00:34:29,569
difficult to do in MPC ok and that's

490
00:34:27,980 --> 00:34:32,240
what makes it different different from

491
00:34:29,569 --> 00:34:34,489
snore or EDD si that don't have this

492
00:34:32,239 --> 00:34:36,649
inverse type thing and therefore they

493
00:34:34,489 --> 00:34:39,949
are much easier much more friendly to

494
00:34:36,649 --> 00:34:42,020
MPC than ECDSA s so that's the main

495
00:34:39,949 --> 00:34:44,359
challenge and the solution that Gennaro

496
00:34:42,020 --> 00:34:47,179
I'll provide in 2016 to do this is as

497
00:34:44,359 --> 00:34:50,750
follows the parties generate shares

498
00:34:47,179 --> 00:34:52,550
random shares ki and row I ki is the

499
00:34:50,750 --> 00:34:56,960
shares of that K value I mentioned

500
00:34:52,550 --> 00:34:59,690
Andrew I are random shares of a random

501
00:34:56,960 --> 00:35:01,880
mask and then they use we use additive

502
00:34:59,690 --> 00:35:03,230
sharing so we just define K to be the

503
00:35:01,880 --> 00:35:06,700
salmon roe to be the sum of those values

504
00:35:03,230 --> 00:35:09,400
and then each party can send ki times G

505
00:35:06,700 --> 00:35:11,140
so the kr there is protected because of

506
00:35:09,400 --> 00:35:13,690
the discrete log assumption and they

507
00:35:11,140 --> 00:35:16,328
send an encryption of Rho I under some

508
00:35:13,690 --> 00:35:18,069
additive u hormone encryption and this

509
00:35:16,329 --> 00:35:18,670
also requires your knowledge proves to

510
00:35:18,069 --> 00:35:20,770
make sure you're doing everything

511
00:35:18,670 --> 00:35:22,180
correctly that's actually difficult and

512
00:35:20,770 --> 00:35:24,790
expensive but I won't go into the

513
00:35:22,180 --> 00:35:27,399
details of that after the parties get

514
00:35:24,790 --> 00:35:30,490
these values they can add all the ki ki

515
00:35:27,400 --> 00:35:32,380
x ji together to get capital R and they

516
00:35:30,490 --> 00:35:34,270
can use the additive homomorphism to get

517
00:35:32,380 --> 00:35:35,710
an encryption of Rho so receiving an

518
00:35:34,270 --> 00:35:37,990
additive e homomorphic encryption scheme

519
00:35:35,710 --> 00:35:41,140
so we just add those and get Rho and

520
00:35:37,990 --> 00:35:44,919
then each party can multiply their

521
00:35:41,140 --> 00:35:47,589
scalar ki into the ciphertext to get ki

522
00:35:44,920 --> 00:35:49,240
times Rho and once again we send that to

523
00:35:47,589 --> 00:35:50,980
everyone you add them all together and

524
00:35:49,240 --> 00:35:53,259
what you what you actually have now is K

525
00:35:50,980 --> 00:35:56,410
times Rho so you have any question of K

526
00:35:53,260 --> 00:35:58,960
times Rho and note that Rho is random

527
00:35:56,410 --> 00:36:01,270
and perfectly masks K I want to stress

528
00:35:58,960 --> 00:36:03,670
that an easy do you say if you learn K

529
00:36:01,270 --> 00:36:05,020
you can get the secret P out okay so we

530
00:36:03,670 --> 00:36:07,750
have to make sure that K is not revealed

531
00:36:05,020 --> 00:36:09,819
but it's K times Rho and once we have

532
00:36:07,750 --> 00:36:12,339
that you can just run distributed

533
00:36:09,819 --> 00:36:14,049
decryption to get that value and when

534
00:36:12,339 --> 00:36:15,910
you have K times R on the clear you can

535
00:36:14,049 --> 00:36:18,009
invert it and now you have K inverse

536
00:36:15,910 --> 00:36:21,640
times Rho inverse and that's actually

537
00:36:18,010 --> 00:36:23,650
enough to complete the other process I

538
00:36:21,640 --> 00:36:25,779
won't go into details of the rest but

539
00:36:23,650 --> 00:36:27,490
that's really the main difficulty in

540
00:36:25,780 --> 00:36:29,710
doing what we're doing and as I

541
00:36:27,490 --> 00:36:32,200
mentioned Gennaro I'll used per year

542
00:36:29,710 --> 00:36:33,730
which is the only additively amorphic

543
00:36:32,200 --> 00:36:36,399
encryption scheme that we have and

544
00:36:33,730 --> 00:36:37,900
that's why they get stuck because it

545
00:36:36,400 --> 00:36:39,309
means you have to have distributed key

546
00:36:37,900 --> 00:36:41,680
generation of that and we don't have

547
00:36:39,309 --> 00:36:43,780
that efficiently so what we do is

548
00:36:41,680 --> 00:36:45,578
something different we use what's called

549
00:36:43,780 --> 00:36:49,000
added to the home Orphic elgamal and the

550
00:36:45,579 --> 00:36:50,470
exponent what what is this encryption

551
00:36:49,000 --> 00:36:54,430
scheme encryption scheme is exactly like

552
00:36:50,470 --> 00:36:57,609
elgamal except that instead of adding a

553
00:36:54,430 --> 00:36:59,980
here you add a times G okay so you're

554
00:36:57,609 --> 00:37:02,020
you're encrypting a by adding a times G

555
00:36:59,980 --> 00:37:04,390
and this is added to the whole morphic

556
00:37:02,020 --> 00:37:08,079
because if I give you two encryptions UV

557
00:37:04,390 --> 00:37:10,029
and XY then you have an encryption of a

558
00:37:08,079 --> 00:37:11,520
times G here and B times G here and if

559
00:37:10,030 --> 00:37:14,710
you just add all these points together

560
00:37:11,520 --> 00:37:17,740
then everything comes out to be a valid

561
00:37:14,710 --> 00:37:18,910
encryption of a plus B time times G so

562
00:37:17,740 --> 00:37:20,500
it's an encryption of a plus B that's

563
00:37:18,910 --> 00:37:22,839
trivially added with your horrible

564
00:37:20,500 --> 00:37:25,270
you can also multiply this by a scalar

565
00:37:22,840 --> 00:37:27,910
in a similarly simple way and this has

566
00:37:25,270 --> 00:37:29,860
fantastic advantages firstly the

567
00:37:27,910 --> 00:37:31,750
encryption that we're using now is in

568
00:37:29,860 --> 00:37:33,370
the same group as the signature we're

569
00:37:31,750 --> 00:37:35,260
generating now didn't go into the

570
00:37:33,370 --> 00:37:37,870
details of what's difficult here but in

571
00:37:35,260 --> 00:37:40,180
when you're working in pierre and in

572
00:37:37,870 --> 00:37:42,250
some some smaller group then you have

573
00:37:40,180 --> 00:37:44,230
lots of problems of leakage because of

574
00:37:42,250 --> 00:37:46,060
different group sizes and possible

575
00:37:44,230 --> 00:37:48,970
cheating because the modular are not the

576
00:37:46,060 --> 00:37:51,250
same and we this is all solved by

577
00:37:48,970 --> 00:37:52,509
working in the same group secondly zero

578
00:37:51,250 --> 00:37:54,610
knowledge proof so now all really

579
00:37:52,510 --> 00:37:57,400
efficient they're all the standard

580
00:37:54,610 --> 00:37:58,930
differing Hellman discrete log signal

581
00:37:57,400 --> 00:38:01,570
protocols that we know and love they're

582
00:37:58,930 --> 00:38:04,299
all simple and key generation is highly

583
00:38:01,570 --> 00:38:06,070
efficient simple and also a distributed

584
00:38:04,300 --> 00:38:06,640
decryption there's only one small

585
00:38:06,070 --> 00:38:09,190
problem

586
00:38:06,640 --> 00:38:12,040
you can't decrypt this is not a valid

587
00:38:09,190 --> 00:38:13,510
encryption scheme because exactly I know

588
00:38:12,040 --> 00:38:15,009
it's funny that will solve the problem

589
00:38:13,510 --> 00:38:17,620
it's not that we're leaving it at that

590
00:38:15,010 --> 00:38:19,180
so you can't decrypt it if you run the

591
00:38:17,620 --> 00:38:23,170
general decryption what you get back is

592
00:38:19,180 --> 00:38:25,210
a times G but a times G requires you to

593
00:38:23,170 --> 00:38:28,270
solve the discrete log problem to get a

594
00:38:25,210 --> 00:38:31,420
now if you use these on small values

595
00:38:28,270 --> 00:38:33,160
which was the original use of this

596
00:38:31,420 --> 00:38:34,870
scheme then you can you can actually

597
00:38:33,160 --> 00:38:37,390
solve the screen log but in our setting

598
00:38:34,870 --> 00:38:38,770
what we're going to get is this signal

599
00:38:37,390 --> 00:38:40,330
encryption of the signature that's what

600
00:38:38,770 --> 00:38:42,910
we get at the end and that steady that

601
00:38:40,330 --> 00:38:44,860
signature is essentially that s value is

602
00:38:42,910 --> 00:38:47,319
like or is a random element in the group

603
00:38:44,860 --> 00:38:50,650
so you're unable to decrypt and so our

604
00:38:47,320 --> 00:38:52,300
entire idea seemingly falls apart the

605
00:38:50,650 --> 00:38:54,130
the solution to this is actually a

606
00:38:52,300 --> 00:38:57,550
general idea that I think can be used

607
00:38:54,130 --> 00:38:58,930
elsewhere to enable the use of elgamal

608
00:38:57,550 --> 00:39:00,820
and the exponent when you want

609
00:38:58,930 --> 00:39:03,040
additively homomorphic encryption in an

610
00:39:00,820 --> 00:39:05,110
interactive scenario the idea is that in

611
00:39:03,040 --> 00:39:07,150
parallel to working in el-gamal the

612
00:39:05,110 --> 00:39:12,400
priorities hold additive shares of the

613
00:39:07,150 --> 00:39:14,560
values and use direct addition and

614
00:39:12,400 --> 00:39:17,530
multiplication protocols to generate

615
00:39:14,560 --> 00:39:20,170
shares of the results but in a not

616
00:39:17,530 --> 00:39:21,610
necessarily correct way so if we have

617
00:39:20,170 --> 00:39:23,530
additive shares you want to add them

618
00:39:21,610 --> 00:39:25,480
that's easy we just locally add if you

619
00:39:23,530 --> 00:39:27,850
want to multiply there are pair wise

620
00:39:25,480 --> 00:39:30,130
multiplication protocols that are

621
00:39:27,850 --> 00:39:32,860
reasonably efficient are in fact quite

622
00:39:30,130 --> 00:39:34,270
efficient but are that unguaranteed

623
00:39:32,860 --> 00:39:35,920
correctness that aren't Karin

624
00:39:34,270 --> 00:39:38,470
t-that anniversary could not cheat and

625
00:39:35,920 --> 00:39:40,480
correct us here is a problem because if

626
00:39:38,470 --> 00:39:42,930
you cheat and do something incorrect you

627
00:39:40,480 --> 00:39:47,470
can actually cause a breach of privacy

628
00:39:42,930 --> 00:39:49,390
so what we do is we run in parallel

629
00:39:47,470 --> 00:39:52,080
everything inside L governed exponent we

630
00:39:49,390 --> 00:39:54,640
prove correctness and and we run this

631
00:39:52,080 --> 00:39:56,440
private multiplication protocol and

632
00:39:54,640 --> 00:39:59,850
private operations without any

633
00:39:56,440 --> 00:40:02,650
correctness and at the end we have a or

634
00:39:59,850 --> 00:40:03,850
whatever value of might be an encryption

635
00:40:02,650 --> 00:40:06,010
of eight times gene we just have to

636
00:40:03,850 --> 00:40:07,779
check that there that they match and

637
00:40:06,010 --> 00:40:09,970
that's easy to do because proving things

638
00:40:07,780 --> 00:40:12,220
inside these groups is very easy and if

639
00:40:09,970 --> 00:40:14,259
they match then you can reveal and we're

640
00:40:12,220 --> 00:40:16,779
finished and you can instantiate these

641
00:40:14,260 --> 00:40:18,820
private multiplications either using pi

642
00:40:16,780 --> 00:40:20,530
err or using oblivious trance we're

643
00:40:18,820 --> 00:40:22,180
oblivious transfer is very very

644
00:40:20,530 --> 00:40:24,010
efficient there are very efficient

645
00:40:22,180 --> 00:40:26,319
private multiplications but it's a lot

646
00:40:24,010 --> 00:40:29,260
of bandwidth and since we're thinking of

647
00:40:26,320 --> 00:40:32,740
scenarios where you might have a mobile

648
00:40:29,260 --> 00:40:34,690
or a very different types of machines

649
00:40:32,740 --> 00:40:36,879
all over the world we want to make sure

650
00:40:34,690 --> 00:40:40,450
we have low bandwidth and so we're using

651
00:40:36,880 --> 00:40:42,640
a PI air based multiplication that's

652
00:40:40,450 --> 00:40:44,500
more expensive computationally but has

653
00:40:42,640 --> 00:40:46,509
very low bandwidth but I want to stress

654
00:40:44,500 --> 00:40:49,150
that each party has their own local PI

655
00:40:46,510 --> 00:40:51,570
Araki and so you don't actually have to

656
00:40:49,150 --> 00:40:55,390
do distributed key generation we ran

657
00:40:51,570 --> 00:41:00,250
experiments on on this protocol in AWS

658
00:40:55,390 --> 00:41:03,400
with very basic not powerful machines we

659
00:41:00,250 --> 00:41:04,570
ran between two and twenty parties we

660
00:41:03,400 --> 00:41:07,090
use the PI air based private

661
00:41:04,570 --> 00:41:08,800
multiplication the oblivious treacherous

662
00:41:07,090 --> 00:41:10,330
it is much faster and we have open

663
00:41:08,800 --> 00:41:12,310
conjectures or making the PI air

664
00:41:10,330 --> 00:41:14,200
protocol faster but currently these are

665
00:41:12,310 --> 00:41:16,330
the times that we have for key

666
00:41:14,200 --> 00:41:18,549
generation it's between 10 seconds and

667
00:41:16,330 --> 00:41:20,950
30 seconds but actually the majority

668
00:41:18,550 --> 00:41:23,260
that time is each party generating safe

669
00:41:20,950 --> 00:41:26,410
primes so when you want to generate

670
00:41:23,260 --> 00:41:27,850
multiple T multiple keys you only have

671
00:41:26,410 --> 00:41:29,200
to do that once in the second and third

672
00:41:27,850 --> 00:41:31,240
and fourth and hundreds of keys are

673
00:41:29,200 --> 00:41:33,040
actually very very fast in terms of

674
00:41:31,240 --> 00:41:34,899
signing it's a few hundred milliseconds

675
00:41:33,040 --> 00:41:37,450
for a few parties up to about five

676
00:41:34,900 --> 00:41:39,790
seconds for twenty parties it's not as

677
00:41:37,450 --> 00:41:41,169
fast as we'd like in many scenarios but

678
00:41:39,790 --> 00:41:44,110
let's think about what we took now it's

679
00:41:41,170 --> 00:41:47,560
only a crypto custody scenario a large

680
00:41:44,110 --> 00:41:48,250
number of signers will only be used for

681
00:41:47,560 --> 00:41:50,799
these very

682
00:41:48,250 --> 00:41:52,390
large amounts when the rate is low and

683
00:41:50,800 --> 00:41:53,530
therefore this actually solves all the

684
00:41:52,390 --> 00:41:54,310
problems that we need for our

685
00:41:53,530 --> 00:41:56,740
application

686
00:41:54,310 --> 00:41:58,690
so in summary presented a new threshold

687
00:41:56,740 --> 00:42:00,490
ECG set protocol

688
00:41:58,690 --> 00:42:03,430
it supports practical key generation

689
00:42:00,490 --> 00:42:05,500
signing proactive security there's a new

690
00:42:03,430 --> 00:42:07,000
paradigm therefore using additively

691
00:42:05,500 --> 00:42:10,000
homework encryption MPC which may be

692
00:42:07,000 --> 00:42:13,090
interesting elsewhere and it's a full

693
00:42:10,000 --> 00:42:15,670
platform that provides the functionality

694
00:42:13,090 --> 00:42:18,190
you need for exchanges or wallets or

695
00:42:15,670 --> 00:42:19,870
custodian solutions it's also suitable

696
00:42:18,190 --> 00:42:21,550
for other scenarios where you where

697
00:42:19,870 --> 00:42:24,640
fraudulent key usage is very problematic

698
00:42:21,550 --> 00:42:26,320
like for example a root CA such a system

699
00:42:24,640 --> 00:42:28,509
might also be very useful there and

700
00:42:26,320 --> 00:42:30,630
includes things like backup key

701
00:42:28,510 --> 00:42:33,490
derivation and this online offline

702
00:42:30,630 --> 00:42:35,320
separation and the security is based on

703
00:42:33,490 --> 00:42:37,419
a model of separation which is which

704
00:42:35,320 --> 00:42:40,110
basically means as long as you can have

705
00:42:37,420 --> 00:42:43,150
enough parties in separate environments

706
00:42:40,110 --> 00:42:45,670
and different with different defenses

707
00:42:43,150 --> 00:42:47,380
that it's hard or almost impossible to

708
00:42:45,670 --> 00:42:49,420
get to the mall then you're guaranteed

709
00:42:47,380 --> 00:42:51,780
security so thank you very much I just

710
00:42:49,420 --> 00:42:54,370
want to note that the two-party solution

711
00:42:51,780 --> 00:42:55,630
for wallets is actually open source and

712
00:42:54,370 --> 00:42:56,200
you can have a look at it there thank

713
00:42:55,630 --> 00:43:00,290
you

714
00:42:56,200 --> 00:43:00,290
[Applause]

715
00:43:01,890 --> 00:43:06,029
so we have time for one or two questions

716
00:43:06,630 --> 00:43:14,440
maybe I'll take it okay so so usually in

717
00:43:12,550 --> 00:43:16,420
the cryptocurrency setting they use

718
00:43:14,440 --> 00:43:19,180
multi signatures to solve similar

719
00:43:16,420 --> 00:43:20,800
problems so there's clear advantages in

720
00:43:19,180 --> 00:43:22,810
doing this but also disadvantages so I

721
00:43:20,800 --> 00:43:26,260
guess maybe will be worth saying a few

722
00:43:22,810 --> 00:43:28,750
words about you can always use a multi

723
00:43:26,260 --> 00:43:31,080
seek and have some of those multi stick

724
00:43:28,750 --> 00:43:33,820
signatures generated using such a system

725
00:43:31,080 --> 00:43:36,520
multi-sig has this has the disadvantages

726
00:43:33,820 --> 00:43:39,040
of you can't replace parties in and out

727
00:43:36,520 --> 00:43:40,300
it's not supported by all of the

728
00:43:39,040 --> 00:43:41,830
currencies many currents that you don't

729
00:43:40,300 --> 00:43:43,690
support them and even though they do

730
00:43:41,830 --> 00:43:46,569
support them there is a cost for using

731
00:43:43,690 --> 00:43:48,910
it transaction costs and also limit to

732
00:43:46,570 --> 00:43:52,650
the generic access structure you can get

733
00:43:48,910 --> 00:43:52,649
so this is a much more powerful solution

734
00:43:52,920 --> 00:43:58,660
Neera near the beginning of the talk you

735
00:43:55,660 --> 00:44:00,700
mentioned doing like 32 derivations in

736
00:43:58,660 --> 00:44:02,830
like a garbled circuit or something but

737
00:44:00,700 --> 00:44:04,330
a bit 32 derivation is like on the order

738
00:44:02,830 --> 00:44:09,640
of a million gates or something that's

739
00:44:04,330 --> 00:44:10,240
quite non-trivial have you know is not a

740
00:44:09,640 --> 00:44:12,819
lot anymore

741
00:44:10,240 --> 00:44:15,129
NPC is really come a long way it's not a

742
00:44:12,820 --> 00:44:16,330
million gates by the way it's shaft 512

743
00:44:15,130 --> 00:44:18,520
which if I remember correctly is about

744
00:44:16,330 --> 00:44:21,880
50,000 gates yeah but then you've got to

745
00:44:18,520 --> 00:44:24,100
do of an H mark at each Dave I said hmx

746
00:44:21,880 --> 00:44:25,690
it's actually it's about a hundred

747
00:44:24,100 --> 00:44:26,950
thousand yeah till one hundred thousand

748
00:44:25,690 --> 00:44:29,010
times the number of level of you know

749
00:44:26,950 --> 00:44:32,230
you don't need to do what you do is that

750
00:44:29,010 --> 00:44:36,040
for each each time you derive you store

751
00:44:32,230 --> 00:44:38,440
you store the shares of H nodes that you

752
00:44:36,040 --> 00:44:41,710
derive so you only need to go down the

753
00:44:38,440 --> 00:44:43,530
path YC can you give like a slag of what

754
00:44:41,710 --> 00:44:45,580
your performance looks like for that

755
00:44:43,530 --> 00:44:48,430
it's in the open source so you can play

756
00:44:45,580 --> 00:44:50,380
around with it but it's things in the

757
00:44:48,430 --> 00:44:55,089
round of a hundred thousand gates is in

758
00:44:50,380 --> 00:44:56,410
like the hundreds of milliseconds not

759
00:44:55,090 --> 00:44:58,119
more than that I think less than that

760
00:44:56,410 --> 00:45:01,200
even ten cool thanks to hundreds of

761
00:44:58,119 --> 00:45:01,200
milliseconds yeah thanks

762
00:45:03,410 --> 00:45:10,190
I was curious for for a lot of these

763
00:45:08,440 --> 00:45:14,089
institutions something that's really

764
00:45:10,190 --> 00:45:16,849
important is proving ongoing possession

765
00:45:14,089 --> 00:45:20,119
of the keys and that thing with it's

766
00:45:16,849 --> 00:45:22,640
like that for audit purposes is there a

767
00:45:20,119 --> 00:45:24,710
further leveraging of zkp that you could

768
00:45:22,640 --> 00:45:26,990
use for that in an ongoing way or is

769
00:45:24,710 --> 00:45:29,390
that open for the moment I think that

770
00:45:26,990 --> 00:45:30,859
the the backup is what you have to make

771
00:45:29,390 --> 00:45:33,049
sure that you can't ever lose what you

772
00:45:30,859 --> 00:45:34,279
have in general with these subs if you

773
00:45:33,049 --> 00:45:36,230
don't want to check that we actually

774
00:45:34,279 --> 00:45:39,170
have the the key shares you can always

775
00:45:36,230 --> 00:45:41,420
ask us as the sign on some special audit

776
00:45:39,170 --> 00:45:42,710
message and if we can sign them we

777
00:45:41,420 --> 00:45:44,390
obviously have the shares so that would

778
00:45:42,710 --> 00:45:46,279
be easier to solve in that way on an

779
00:45:44,390 --> 00:45:51,279
application at the application layer

780
00:45:46,279 --> 00:45:51,279
rather than the crypto there thank you

781
00:45:51,789 --> 00:46:10,250
thank you again thank you very much now

782
00:46:07,400 --> 00:46:13,759
we have a microphone change and we're

783
00:46:10,250 --> 00:46:17,750
gonna go from a case of good custody to

784
00:46:13,759 --> 00:46:20,359
a case of bad custody I guess so it's

785
00:46:17,750 --> 00:46:22,039
gonna be a tangled Carol cryptanalysis

786
00:46:20,359 --> 00:46:25,369
of Carol P and other attacks and i

787
00:46:22,039 --> 00:46:26,660
aughtta cryptocurrency and the talk will

788
00:46:25,369 --> 00:46:31,119
be buying a her Narula

789
00:46:26,660 --> 00:46:31,118
who is making up right now okay

790
00:46:33,339 --> 00:46:42,319
hello great thank you so my name is

791
00:46:39,400 --> 00:46:43,730
Nehru la I lead a group at the MIT Media

792
00:46:42,319 --> 00:46:45,769
Lab called the digital currency

793
00:46:43,730 --> 00:46:48,920
initiative we focus on cryptocurrency

794
00:46:45,769 --> 00:46:50,990
and blockchain technology research I'm

795
00:46:48,920 --> 00:46:53,779
here to tell you today about how we

796
00:46:50,990 --> 00:46:55,038
Forge significant forged signatures in a

797
00:46:53,779 --> 00:46:58,039
cryptocurrency called

798
00:46:55,039 --> 00:47:02,059
iota and this is joint work with ethan

799
00:46:58,039 --> 00:47:04,160
Heilmann I cannot read the actual all

800
00:47:02,059 --> 00:47:04,789
the names here but Garrett Tanzer James

801
00:47:04,160 --> 00:47:07,339
Lovejoy

802
00:47:04,789 --> 00:47:11,509
Michael Colavito Medeiros Piazza and tad

803
00:47:07,339 --> 00:47:13,849
driger okay so let's start

804
00:47:11,509 --> 00:47:15,920
Yoda for those of you who don't know is

805
00:47:13,849 --> 00:47:19,369
a crypto currency that is designed for

806
00:47:15,920 --> 00:47:22,190
the Internet of Things it has roughly a

807
00:47:19,369 --> 00:47:24,200
1 billion dollar market cap as of a few

808
00:47:22,190 --> 00:47:26,599
days ago I think today it's down to 900

809
00:47:24,200 --> 00:47:29,390
million at one point in time it peaked

810
00:47:26,599 --> 00:47:31,789
at 12 billion and there are a few

811
00:47:29,390 --> 00:47:34,220
notable things about iota

812
00:47:31,789 --> 00:47:36,650
so most crypto currencies use blockchain

813
00:47:34,220 --> 00:47:38,598
technology which is sort of as it sounds

814
00:47:36,650 --> 00:47:41,299
a chain of blocks a linear chain of

815
00:47:38,599 --> 00:47:44,210
blocks iota however uses what's called a

816
00:47:41,299 --> 00:47:47,299
dag a directed acyclic graph they call

817
00:47:44,210 --> 00:47:50,390
it at angle iota has partnerships with

818
00:47:47,299 --> 00:47:52,759
several large companies Bosh for example

819
00:47:50,390 --> 00:47:55,118
has in their own words purchased a

820
00:47:52,759 --> 00:47:56,960
significant amount of iota tokens

821
00:47:55,119 --> 00:47:59,750
Volkswagen has said that they are

822
00:47:56,960 --> 00:48:03,410
releasing an iota related product in

823
00:47:59,750 --> 00:48:06,259
2019 so important for this talk

824
00:48:03,410 --> 00:48:11,450
iota has their own hash function which

825
00:48:06,259 --> 00:48:13,190
has been referred to as curl so

826
00:48:11,450 --> 00:48:15,290
I think first for the purposes of the

827
00:48:13,190 --> 00:48:17,510
talk I want to define a bit of

828
00:48:15,290 --> 00:48:19,490
terminology so if you're familiar with

829
00:48:17,510 --> 00:48:21,770
the crypto currency like Bitcoin iota

830
00:48:19,490 --> 00:48:24,049
uses slightly different words so a

831
00:48:21,770 --> 00:48:26,000
payment in Bitcoin is usually called a

832
00:48:24,050 --> 00:48:28,520
transaction this is how you send Bitcoin

833
00:48:26,000 --> 00:48:31,190
from one or many people to one or many

834
00:48:28,520 --> 00:48:33,680
people in iota this is called a bundle

835
00:48:31,190 --> 00:48:36,650
they actually use the word transaction

836
00:48:33,680 --> 00:48:38,720
to mean something else the currency in

837
00:48:36,650 --> 00:48:40,970
Bitcoin is also called Bitcoin right now

838
00:48:38,720 --> 00:48:42,950
one Bitcoin is worth about three and a

839
00:48:40,970 --> 00:48:45,109
half thousand dollars the currency in

840
00:48:42,950 --> 00:48:48,200
iota is called iota but usually you're

841
00:48:45,110 --> 00:48:52,660
you refer to millions of iota 1 million

842
00:48:48,200 --> 00:48:52,660
iota right now is about 32 cents

843
00:48:52,720 --> 00:48:57,740
importantly most crypto currencies in

844
00:48:55,460 --> 00:49:02,210
fact I think all of them except iota use

845
00:48:57,740 --> 00:49:05,720
binary so they use bits and bytes iota

846
00:49:02,210 --> 00:49:10,070
uses ternary so instead of just 0 and 1

847
00:49:05,720 --> 00:49:12,859
they use 0 1 negative 1 at right is 3

848
00:49:10,070 --> 00:49:15,530
tricks and often times you will see

849
00:49:12,860 --> 00:49:18,080
Trites represented as letters capital

850
00:49:15,530 --> 00:49:20,660
letters from A through Z along with the

851
00:49:18,080 --> 00:49:25,880
integer number 9 which is 0 which

852
00:49:20,660 --> 00:49:27,700
represents all 0 trips so why did we

853
00:49:25,880 --> 00:49:31,660
even look at this cryptocurrency iota

854
00:49:27,700 --> 00:49:34,250
well at the time it was in the top 10

855
00:49:31,660 --> 00:49:36,470
list of crypto currencies by market cap

856
00:49:34,250 --> 00:49:37,790
so as I said I lead a group called the

857
00:49:36,470 --> 00:49:39,680
digital currency initiative and we

858
00:49:37,790 --> 00:49:42,770
frequently get contacted about crypto

859
00:49:39,680 --> 00:49:44,540
currencies and about new technology the

860
00:49:42,770 --> 00:49:46,340
person on the on the left is Michael

861
00:49:44,540 --> 00:49:48,020
Casey he's the author of a book about

862
00:49:46,340 --> 00:49:50,180
crypto currencies he's a journalist and

863
00:49:48,020 --> 00:49:51,950
he got very excited one day he came to

864
00:49:50,180 --> 00:49:54,140
us and he said nah huh there's this new

865
00:49:51,950 --> 00:49:56,419
cryptocurrency that appears to solve all

866
00:49:54,140 --> 00:49:59,089
of the problems currently present in

867
00:49:56,420 --> 00:50:02,150
crypto currencies notoriously crypto

868
00:49:59,090 --> 00:50:03,710
currencies don't scale very well they at

869
00:50:02,150 --> 00:50:05,420
the time Bitcoin fees I think were

870
00:50:03,710 --> 00:50:08,000
pretty high so you know fees were high

871
00:50:05,420 --> 00:50:10,610
and and to boot it was also

872
00:50:08,000 --> 00:50:12,740
decentralized which I've always taken to

873
00:50:10,610 --> 00:50:15,020
mean there's no single or small set of

874
00:50:12,740 --> 00:50:16,700
trusted third parties so Michael came to

875
00:50:15,020 --> 00:50:18,650
us very excited about this crypto

876
00:50:16,700 --> 00:50:21,589
currency iota the person in the middle

877
00:50:18,650 --> 00:50:24,200
is my colleague tagged Raja who worked

878
00:50:21,590 --> 00:50:25,010
on the Lightning Network for Bitcoin he

879
00:50:24,200 --> 00:50:27,649
just immediately

880
00:50:25,010 --> 00:50:29,720
flatout said no now the problem is is

881
00:50:27,650 --> 00:50:32,180
that tag says no to pretty much

882
00:50:29,720 --> 00:50:33,980
everything and so I was a bit fed up

883
00:50:32,180 --> 00:50:36,799
with this and I said tad you have you

884
00:50:33,980 --> 00:50:38,900
can't just say that everything sucks you

885
00:50:36,800 --> 00:50:41,720
actually have to explain why it sucks

886
00:50:38,900 --> 00:50:44,930
and so in this particular instance

887
00:50:41,720 --> 00:50:47,060
Tadgh actually agreed to do this and so

888
00:50:44,930 --> 00:50:49,399
he started looking at the code and he

889
00:50:47,060 --> 00:50:51,230
noticed immediately the the hash

890
00:50:49,400 --> 00:50:53,270
function curl and he thought it looked

891
00:50:51,230 --> 00:50:55,520
pretty interesting at this point

892
00:50:53,270 --> 00:50:58,340
Tadgh brought in our other colleague

893
00:50:55,520 --> 00:51:00,980
Ethan Heilmann Ethan enjoys working on

894
00:50:58,340 --> 00:51:04,100
hash functions for fun so Todd showed

895
00:51:00,980 --> 00:51:06,470
ethan curl and then ethan proceeded to

896
00:51:04,100 --> 00:51:09,140
spend the next entire weekend even

897
00:51:06,470 --> 00:51:11,180
skipping a party to to try to break curl

898
00:51:09,140 --> 00:51:14,540
so that's how we ended up starting to

899
00:51:11,180 --> 00:51:16,370
look at iota so what is the nature of

900
00:51:14,540 --> 00:51:19,700
the attack that i'm going to talk to you

901
00:51:16,370 --> 00:51:22,609
about today so the idea here is that bob

902
00:51:19,700 --> 00:51:25,009
will sign a payment again in iota this

903
00:51:22,610 --> 00:51:28,130
is called a bundle where he gets two

904
00:51:25,010 --> 00:51:32,000
million dollars roughly and eve gets

905
00:51:28,130 --> 00:51:34,460
almost nothing eve will then use this to

906
00:51:32,000 --> 00:51:37,340
forge Bob's signature and instead

907
00:51:34,460 --> 00:51:40,430
broadcast a payment in which she gets

908
00:51:37,340 --> 00:51:43,580
two million dollars and Bob gets almost

909
00:51:40,430 --> 00:51:45,259
nothing importantly we are operating our

910
00:51:43,580 --> 00:51:47,990
tax operate in the chosen message

911
00:51:45,260 --> 00:51:51,920
setting so Eve gets to create the

912
00:51:47,990 --> 00:51:54,109
payment that Bob signs a note on impact

913
00:51:51,920 --> 00:51:55,640
and disclosure the signature forgery

914
00:51:54,110 --> 00:51:58,100
attacks that we present here were

915
00:51:55,640 --> 00:52:00,109
disclosed to the iota developers the

916
00:51:58,100 --> 00:52:02,990
they then very quickly deployed

917
00:52:00,110 --> 00:52:05,990
mitigations for them so to be clear

918
00:52:02,990 --> 00:52:09,169
these attacks no longer impact iota

919
00:52:05,990 --> 00:52:11,540
security and in the course of creating

920
00:52:09,170 --> 00:52:15,040
these attacks we never interfered with

921
00:52:11,540 --> 00:52:18,170
or sent anything to the iota network

922
00:52:15,040 --> 00:52:20,000
okay so let's talk about the general

923
00:52:18,170 --> 00:52:23,840
sketch of the attack then I'll explain

924
00:52:20,000 --> 00:52:25,760
exactly how we we broke the hash

925
00:52:23,840 --> 00:52:28,160
function curl and then I'll conclude

926
00:52:25,760 --> 00:52:31,850
with a bit of discussion so first of all

927
00:52:28,160 --> 00:52:33,920
what exactly is multi-sig multi-sig in

928
00:52:31,850 --> 00:52:36,140
crypto currencies are very similar to

929
00:52:33,920 --> 00:52:38,570
the two-person rule that requires two

930
00:52:36,140 --> 00:52:41,720
people to agree to perform a nuclear

931
00:52:38,570 --> 00:52:43,370
launched the idea here is that both keys

932
00:52:41,720 --> 00:52:45,350
have to be present you have to turn both

933
00:52:43,370 --> 00:52:47,330
keys in order to launch the nuclear

934
00:52:45,350 --> 00:52:49,370
weapon one person with one key cannot

935
00:52:47,330 --> 00:52:51,650
launch the nuclear weapon by themselves

936
00:52:49,370 --> 00:52:54,859
now you might imagine why this is useful

937
00:52:51,650 --> 00:52:58,040
it adds an extra level of security and

938
00:52:54,860 --> 00:53:01,820
if one key is compromised your funds are

939
00:52:58,040 --> 00:53:03,890
still secured so multi-sig payments and

940
00:53:01,820 --> 00:53:06,800
crypto currencies generalize to require

941
00:53:03,890 --> 00:53:09,259
k out of n participants here's an

942
00:53:06,800 --> 00:53:11,960
example of a two of two multi-sig so

943
00:53:09,260 --> 00:53:14,600
what I'm showing you here is two coins

944
00:53:11,960 --> 00:53:17,150
locked up in such a way that it requires

945
00:53:14,600 --> 00:53:19,850
two signatures in order to spend these

946
00:53:17,150 --> 00:53:23,600
coins so someone has spent coins to a

947
00:53:19,850 --> 00:53:25,610
multi-sig address in order to spend the

948
00:53:23,600 --> 00:53:27,350
coins from the multisig address it

949
00:53:25,610 --> 00:53:29,840
requires the presence of two different

950
00:53:27,350 --> 00:53:32,750
signatures in this case Alice and Bob

951
00:53:29,840 --> 00:53:35,120
and note here that Alice and Bob are

952
00:53:32,750 --> 00:53:37,040
then spending the coins to a single

953
00:53:35,120 --> 00:53:39,350
address so you can go back and forth

954
00:53:37,040 --> 00:53:42,200
between multi-sig addresses and payments

955
00:53:39,350 --> 00:53:45,290
so why multi-sig multi-sig provides

956
00:53:42,200 --> 00:53:48,529
added security an attacker has to

957
00:53:45,290 --> 00:53:51,290
compromise both keys and we can store

958
00:53:48,530 --> 00:53:53,240
keys in isolated locations for example

959
00:53:51,290 --> 00:53:55,610
you can keep one key on your hard drive

960
00:53:53,240 --> 00:53:58,209
and one key perhaps printed out on paper

961
00:53:55,610 --> 00:54:00,980
and stored in a bank vault somewhere

962
00:53:58,210 --> 00:54:05,690
this is a technique that's used by many

963
00:54:00,980 --> 00:54:06,950
cryptocurrency exchanges so a little bit

964
00:54:05,690 --> 00:54:08,930
more that you need to understand about

965
00:54:06,950 --> 00:54:11,839
iota to understand the nature of the

966
00:54:08,930 --> 00:54:14,060
attack iota uses a signature scheme

967
00:54:11,840 --> 00:54:15,010
called winter nets one time signatures

968
00:54:14,060 --> 00:54:18,590
or watts

969
00:54:15,010 --> 00:54:22,670
however iota modifies watts in a very

970
00:54:18,590 --> 00:54:25,280
important way first the IATA code hashes

971
00:54:22,670 --> 00:54:27,380
the message with curl P 27 I'll explain

972
00:54:25,280 --> 00:54:29,960
exactly what all those pieces mean prior

973
00:54:27,380 --> 00:54:31,190
to invoking the signature scheme so the

974
00:54:29,960 --> 00:54:33,980
signature scheme looks something like

975
00:54:31,190 --> 00:54:37,010
this first you take a hash of a message

976
00:54:33,980 --> 00:54:40,550
and then you use watts to sign the the

977
00:54:37,010 --> 00:54:42,290
message hash so importantly the

978
00:54:40,550 --> 00:54:44,780
signature scheme details here don't

979
00:54:42,290 --> 00:54:46,430
really matter for our attack because an

980
00:54:44,780 --> 00:54:48,770
iota payments are hashed before they're

981
00:54:46,430 --> 00:54:51,890
signed so if you can break the hash

982
00:54:48,770 --> 00:54:54,330
function then you can Forge signatures

983
00:54:51,890 --> 00:54:58,319
let me show you exactly what this looks

984
00:54:54,330 --> 00:55:00,569
like so this is how we exploit messages

985
00:54:58,320 --> 00:55:03,270
that hash to the same value in order to

986
00:55:00,570 --> 00:55:05,040
create unauthorized payments so imagine

987
00:55:03,270 --> 00:55:06,720
that you have funds that are locked in a

988
00:55:05,040 --> 00:55:11,490
multi sing address and they're locked by

989
00:55:06,720 --> 00:55:13,620
two users Eve and Bob so Eve who's

990
00:55:11,490 --> 00:55:15,509
conducting the attack will create two

991
00:55:13,620 --> 00:55:19,890
different bundles two very special

992
00:55:15,510 --> 00:55:21,900
bundles that have the same hash she then

993
00:55:19,890 --> 00:55:25,109
give one of the bundles the benign

994
00:55:21,900 --> 00:55:27,150
looking bundle to Bob Bob can inspect

995
00:55:25,110 --> 00:55:29,100
the bundle note that it pays him the

996
00:55:27,150 --> 00:55:31,350
appropriate amount perhaps Bob is

997
00:55:29,100 --> 00:55:33,089
transacting in some way with Eve and so

998
00:55:31,350 --> 00:55:35,040
Bob examining the bundle and deciding

999
00:55:33,090 --> 00:55:38,370
that everything looks fine then signs

1000
00:55:35,040 --> 00:55:42,450
the bundle and sends this sign bundle

1001
00:55:38,370 --> 00:55:44,670
back to Eve Eve can then copy Bob

1002
00:55:42,450 --> 00:55:48,089
signature from the benign bundle onto

1003
00:55:44,670 --> 00:55:50,370
the evil bundle and then broadcast the

1004
00:55:48,090 --> 00:55:52,080
evil signed the end broadcast the evil

1005
00:55:50,370 --> 00:55:55,680
bundle now what's important to note here

1006
00:55:52,080 --> 00:55:59,310
is that Bob never saw or authorized this

1007
00:55:55,680 --> 00:56:00,960
version of the payment and the reason

1008
00:55:59,310 --> 00:56:02,910
that we can do this again the reason

1009
00:56:00,960 --> 00:56:04,590
that Bob signature is valid on this

1010
00:56:02,910 --> 00:56:08,009
bundle is because they have the same

1011
00:56:04,590 --> 00:56:10,020
hash now I also want to point out here

1012
00:56:08,010 --> 00:56:12,240
that there's no racing here in the

1013
00:56:10,020 --> 00:56:15,390
example that I've just described Bob

1014
00:56:12,240 --> 00:56:18,029
can't transmit or broadcast anything he

1015
00:56:15,390 --> 00:56:19,529
doesn't have Eve signature yet so Eve

1016
00:56:18,030 --> 00:56:21,420
really is the only one who can broadcast

1017
00:56:19,530 --> 00:56:24,270
the bundle and she chooses which one she

1018
00:56:21,420 --> 00:56:26,430
wants to broadcast broadcast so this is

1019
00:56:24,270 --> 00:56:28,290
the general outline of the attack but

1020
00:56:26,430 --> 00:56:30,779
the question is how we actually go about

1021
00:56:28,290 --> 00:56:32,820
creating these two bundles which have

1022
00:56:30,780 --> 00:56:36,290
the same hash but paid different amounts

1023
00:56:32,820 --> 00:56:39,720
to different users we do this by very

1024
00:56:36,290 --> 00:56:43,140
carefully placing collisions in certain

1025
00:56:39,720 --> 00:56:45,509
fields of the bundle so this is a bundle

1026
00:56:43,140 --> 00:56:48,720
this bundle is paying out to four

1027
00:56:45,510 --> 00:56:50,910
different users and what I'm showing

1028
00:56:48,720 --> 00:56:53,040
here is I'm showing the the users the

1029
00:56:50,910 --> 00:56:55,920
addresses where the bundle pays and I'm

1030
00:56:53,040 --> 00:56:57,570
also showing the values in an iota that

1031
00:56:55,920 --> 00:56:59,130
are being paid to each of these users so

1032
00:56:57,570 --> 00:57:03,210
this is an example we're paying for

1033
00:56:59,130 --> 00:57:05,220
users now let's take a look at this in

1034
00:57:03,210 --> 00:57:09,089
ternary represent a

1035
00:57:05,220 --> 00:57:10,348
so this is a sequence of tricks what

1036
00:57:09,089 --> 00:57:12,808
we're going to do the nature of our

1037
00:57:10,349 --> 00:57:17,579
attack is to look at very specific

1038
00:57:12,809 --> 00:57:19,710
tricks and and create colliding bundles

1039
00:57:17,579 --> 00:57:21,420
which vary in those very specific places

1040
00:57:19,710 --> 00:57:23,430
so here we're looking at the tricks that

1041
00:57:21,420 --> 00:57:26,009
correspond to the value fields in the

1042
00:57:23,430 --> 00:57:27,598
bundle and in particular in the example

1043
00:57:26,009 --> 00:57:29,999
that I'm describing we are working with

1044
00:57:27,599 --> 00:57:32,910
the 26th trip and the message block and

1045
00:57:29,999 --> 00:57:35,759
so here the 26th trip for the value that

1046
00:57:32,910 --> 00:57:38,879
is paid to Eve is a 0 and for Bob it is

1047
00:57:35,759 --> 00:57:42,359
1 what we're going to do is we are going

1048
00:57:38,880 --> 00:57:45,059
to create a copy of this that is exactly

1049
00:57:42,359 --> 00:57:47,150
the same except for the fact that the

1050
00:57:45,059 --> 00:57:49,499
one in the zero are going to be switched

1051
00:57:47,150 --> 00:57:51,480
so what this does is this serves to

1052
00:57:49,499 --> 00:57:53,279
create an exact copy of the bundle

1053
00:57:51,480 --> 00:57:54,930
except for the fact that Eve gets the

1054
00:57:53,279 --> 00:57:56,279
amount of money Bob was supposed to get

1055
00:57:54,930 --> 00:57:58,799
and Bob gets the amount of money that

1056
00:57:56,279 --> 00:58:01,650
Eve was supposed to get so to be clear

1057
00:57:58,799 --> 00:58:03,930
the technique that we apply here works

1058
00:58:01,650 --> 00:58:05,849
for more than just multi signature

1059
00:58:03,930 --> 00:58:08,220
payments it also works for single

1060
00:58:05,849 --> 00:58:11,119
signature payments but the multi-sig

1061
00:58:08,220 --> 00:58:17,700
scenario fits our chosen message attack

1062
00:58:11,119 --> 00:58:20,579
scenario really well and also just to be

1063
00:58:17,700 --> 00:58:22,140
clear the blue one is the one that Bob

1064
00:58:20,579 --> 00:58:23,880
sees where he's getting all of the money

1065
00:58:22,140 --> 00:58:25,828
the red one is the one that Alice sees

1066
00:58:23,880 --> 00:58:28,170
sorry the red one is the one that Eve

1067
00:58:25,829 --> 00:58:30,660
broadcasts where she is getting all of

1068
00:58:28,170 --> 00:58:33,059
the money now there are a lot of

1069
00:58:30,660 --> 00:58:34,288
limitations with this technique and I'll

1070
00:58:33,059 --> 00:58:35,789
explain a little bit more about that we

1071
00:58:34,289 --> 00:58:37,349
can only play this trick in very

1072
00:58:35,789 --> 00:58:40,319
specific places so we can't really

1073
00:58:37,349 --> 00:58:42,890
create arbitrary bundles that that have

1074
00:58:40,319 --> 00:58:45,569
the same signature or have the same hash

1075
00:58:42,890 --> 00:58:47,460
so that was a sketch sort of of how the

1076
00:58:45,569 --> 00:58:50,279
attack works but how do we actually

1077
00:58:47,460 --> 00:58:52,589
create collisions so let me tell you a

1078
00:58:50,279 --> 00:58:55,049
little bit about curl p27

1079
00:58:52,589 --> 00:58:57,299
so curl is the way that this hash

1080
00:58:55,049 --> 00:59:00,569
function was referred to on the internet

1081
00:58:57,299 --> 00:59:01,288
I think it's it's named after something

1082
00:59:00,569 --> 00:59:04,859
to do with hair

1083
00:59:01,289 --> 00:59:07,619
P stands for prototype and 27 is the

1084
00:59:04,859 --> 00:59:09,538
number of rounds that a transformation

1085
00:59:07,619 --> 00:59:12,690
function is applied inside this hash

1086
00:59:09,539 --> 00:59:14,640
function so to forge signatures we need

1087
00:59:12,690 --> 00:59:16,800
to be able to create colliding messages

1088
00:59:14,640 --> 00:59:20,129
under curl P 27

1089
00:59:16,800 --> 00:59:22,020
and here's what crow p27 looks like it

1090
00:59:20,130 --> 00:59:25,020
uses what's known as a sponge-like

1091
00:59:22,020 --> 00:59:27,360
construction to be clear sponge

1092
00:59:25,020 --> 00:59:29,250
constructions are quite often used in

1093
00:59:27,360 --> 00:59:32,490
practice and they are secure when

1094
00:59:29,250 --> 00:59:34,110
properly implemented but sponge

1095
00:59:32,490 --> 00:59:36,990
constructions use this transformation

1096
00:59:34,110 --> 00:59:39,690
function T and their security really

1097
00:59:36,990 --> 00:59:44,520
depends on this transformation function

1098
00:59:39,690 --> 00:59:47,040
T curl p27 s transformation function is

1099
00:59:44,520 --> 00:59:49,530
very simple it's the repeated

1100
00:59:47,040 --> 00:59:52,110
application of a permutation and a

1101
00:59:49,530 --> 00:59:55,830
simple s box so how simple is the S box

1102
00:59:52,110 --> 00:59:59,880
well here's the s box for AES and here

1103
00:59:55,830 --> 01:00:01,619
is the S box for curl P 27 now AES only

1104
00:59:59,880 --> 01:00:05,640
uses you know ten to fourteen rounds

1105
01:00:01,619 --> 01:00:09,900
curl PU 27 uses 27 rounds but it's it's

1106
01:00:05,640 --> 01:00:12,060
not that complicated so let's talk about

1107
01:00:09,900 --> 01:00:15,300
how we reduced collision resistance in

1108
01:00:12,060 --> 01:00:18,810
curl P 27 so if you were to just choose

1109
01:00:15,300 --> 01:00:21,840
any random message a random bundle a

1110
01:00:18,810 --> 01:00:24,210
sequence of tricks then pick one of the

1111
01:00:21,840 --> 01:00:29,670
tricks and flip it then you would have a

1112
01:00:24,210 --> 01:00:32,640
1 out of 2 to the 42.4 chance of of

1113
01:00:29,670 --> 01:00:35,310
creating a collision so this in

1114
01:00:32,640 --> 01:00:37,830
particular is the 26th trick so that's

1115
01:00:35,310 --> 01:00:40,799
roughly you know 42 bit collision

1116
01:00:37,830 --> 01:00:43,500
resistance if we're very clever about

1117
01:00:40,800 --> 01:00:46,109
the actual message we choose so instead

1118
01:00:43,500 --> 01:00:47,670
of just choosing random messages we were

1119
01:00:46,109 --> 01:00:50,190
a little bit more clever about it then

1120
01:00:47,670 --> 01:00:51,900
we can get it down to one out of two to

1121
01:00:50,190 --> 01:00:53,640
the twenty two point eight seven which

1122
01:00:51,900 --> 01:00:56,670
is one out of seven point six million

1123
01:00:53,640 --> 01:00:58,710
and in cryptographic terms in in binary

1124
01:00:56,670 --> 01:01:02,280
cryptographic terms this is 23 bit

1125
01:00:58,710 --> 01:01:05,520
cryptic collision resistance which isn't

1126
01:01:02,280 --> 01:01:07,109
really enough so again remember the

1127
01:01:05,520 --> 01:01:09,570
transformation function is very simple

1128
01:01:07,109 --> 01:01:11,340
we're able to solve a series of

1129
01:01:09,570 --> 01:01:13,530
equations and constraints in order to

1130
01:01:11,340 --> 01:01:15,750
get down to one out of seven point six

1131
01:01:13,530 --> 01:01:19,109
million that still means that we have to

1132
01:01:15,750 --> 01:01:22,830
try a lot of messages before we can find

1133
01:01:19,109 --> 01:01:24,690
two that collide however luckily bundles

1134
01:01:22,830 --> 01:01:26,160
in iota have an additional field that I

1135
01:01:24,690 --> 01:01:30,420
haven't told you about yet called the

1136
01:01:26,160 --> 01:01:32,848
tag field the tag field is 81 tricks

1137
01:01:30,420 --> 01:01:35,369
and it has no impact on transaction

1138
01:01:32,849 --> 01:01:37,799
validity so it's 81 tricks that you can

1139
01:01:35,369 --> 01:01:40,710
vary however you would like and you

1140
01:01:37,799 --> 01:01:43,109
don't impact whether or not the the

1141
01:01:40,710 --> 01:01:45,869
transaction is valid so in in what I'm

1142
01:01:43,109 --> 01:01:48,000
showing you right now the tag field is

1143
01:01:45,869 --> 01:01:51,539
sort of its default of all nines which

1144
01:01:48,000 --> 01:01:53,039
is corresponds to all zero tricks but

1145
01:01:51,539 --> 01:01:55,140
what we can do is we can play with the

1146
01:01:53,039 --> 01:01:57,930
tag field we can try many different tags

1147
01:01:55,140 --> 01:02:00,049
and we can create you can use that to

1148
01:01:57,930 --> 01:02:05,368
create colliding bundles

1149
01:02:00,049 --> 01:02:08,460
so recall curl p27 is built on the

1150
01:02:05,369 --> 01:02:10,200
sponge construction and the way that

1151
01:02:08,460 --> 01:02:13,260
this works is that you break the message

1152
01:02:10,200 --> 01:02:17,189
up into message blocks each message

1153
01:02:13,260 --> 01:02:19,319
block in croupy 27 is 243 tricks and

1154
01:02:17,190 --> 01:02:20,849
what we do is you've copied the message

1155
01:02:19,319 --> 01:02:22,829
blocks into the state apply the

1156
01:02:20,849 --> 01:02:24,480
transformation function then copy the

1157
01:02:22,829 --> 01:02:28,250
next message block into the state and so

1158
01:02:24,480 --> 01:02:31,140
on so what this means is that

1159
01:02:28,250 --> 01:02:34,829
differences after the transformation

1160
01:02:31,140 --> 01:02:37,890
function is applied in the first third

1161
01:02:34,829 --> 01:02:40,049
of the state are erased as new message

1162
01:02:37,890 --> 01:02:44,240
blocks are copied in and so we can take

1163
01:02:40,049 --> 01:02:46,529
advantage of this as well so to explain

1164
01:02:44,240 --> 01:02:48,689
to kind of show and figures exactly how

1165
01:02:46,529 --> 01:02:51,450
this works what we're going to do is we

1166
01:02:48,690 --> 01:02:55,049
are going to choose bundles such that

1167
01:02:51,450 --> 01:02:56,460
the differences between two different

1168
01:02:55,049 --> 01:02:57,900
bundles which vary in the trick that

1169
01:02:56,460 --> 01:03:01,410
we're trying to vary where the value is

1170
01:02:57,900 --> 01:03:03,690
is all in the first third of the state

1171
01:03:01,410 --> 01:03:06,269
so we have two different messages here a

1172
01:03:03,690 --> 01:03:09,000
message 0 and message 1 they are the

1173
01:03:06,269 --> 01:03:11,129
same except for the second message block

1174
01:03:09,000 --> 01:03:13,920
where they vary by one trick this is

1175
01:03:11,130 --> 01:03:16,019
where the value field is and so if we

1176
01:03:13,920 --> 01:03:18,240
start to apply curl p27

1177
01:03:16,019 --> 01:03:20,279
copy and message block 0 apply the

1178
01:03:18,240 --> 01:03:23,279
transformation function at this point in

1179
01:03:20,279 --> 01:03:25,230
time the state the intermediate state is

1180
01:03:23,279 --> 01:03:27,259
the same for both messages because we've

1181
01:03:25,230 --> 01:03:29,549
applied the same exact message block

1182
01:03:27,259 --> 01:03:33,509
then we apply the second message block

1183
01:03:29,549 --> 01:03:35,369
message block 1 and we've very carefully

1184
01:03:33,509 --> 01:03:37,829
chosen the contents of the tag field

1185
01:03:35,369 --> 01:03:40,559
such that when you apply the

1186
01:03:37,829 --> 01:03:42,960
transformation function here all of the

1187
01:03:40,559 --> 01:03:43,900
differences are constrained to the first

1188
01:03:42,960 --> 01:03:46,599
third of the state

1189
01:03:43,900 --> 01:03:48,400
and so what that means is that when we

1190
01:03:46,599 --> 01:03:50,230
copy in message block 2 which is again

1191
01:03:48,400 --> 01:03:52,329
the same between the two different

1192
01:03:50,230 --> 01:03:54,160
messages again when we apply this

1193
01:03:52,329 --> 01:03:56,890
transformation function we end up with

1194
01:03:54,160 --> 01:03:58,960
the same state and thus when we take the

1195
01:03:56,890 --> 01:04:01,210
when we take the first third which is

1196
01:03:58,960 --> 01:04:06,220
the output of the hash function they're

1197
01:04:01,210 --> 01:04:09,520
the same okay now I have here a screen

1198
01:04:06,220 --> 01:04:12,038
capture which shows which shows exactly

1199
01:04:09,520 --> 01:04:15,700
it shows a demo of our tool that we use

1200
01:04:12,039 --> 01:04:19,059
to do this so what this tool does is it

1201
01:04:15,700 --> 01:04:21,368
generates it takes this input sort of a

1202
01:04:19,059 --> 01:04:23,490
format a template of a bundle you can

1203
01:04:21,369 --> 01:04:27,609
specify the addresses you can specify

1204
01:04:23,490 --> 01:04:29,919
the amounts in most of the places and it

1205
01:04:27,609 --> 01:04:33,490
creates messages that collide in two

1206
01:04:29,920 --> 01:04:34,990
different places in the value field so

1207
01:04:33,490 --> 01:04:37,598
exactly the example that I was showing

1208
01:04:34,990 --> 01:04:40,299
you the tool is not really very heavily

1209
01:04:37,599 --> 01:04:42,670
optimized it has two parts we have a

1210
01:04:40,299 --> 01:04:44,170
paper which you can read to learn more

1211
01:04:42,670 --> 01:04:45,640
about the two different sort of parts

1212
01:04:44,170 --> 01:04:49,000
one is constraint solving and the other

1213
01:04:45,640 --> 01:04:51,640
is brute force the first part is written

1214
01:04:49,000 --> 01:04:53,380
in Python it linear linearly solves the

1215
01:04:51,640 --> 01:04:56,529
constraints and the second part is

1216
01:04:53,380 --> 01:04:58,960
written in go and it it is written to

1217
01:04:56,529 --> 01:05:02,079
run in parallel I'm running this I'm

1218
01:04:58,960 --> 01:05:05,260
demoing this on an ad core machine so

1219
01:05:02,079 --> 01:05:08,920
here we go and so we're running our tool

1220
01:05:05,260 --> 01:05:11,020
and it's trying to find collisions in

1221
01:05:08,920 --> 01:05:13,210
the third and seventh message blocks so

1222
01:05:11,020 --> 01:05:15,849
it's using all 80 cores founded it found

1223
01:05:13,210 --> 01:05:18,160
the first collision that single core is

1224
01:05:15,849 --> 01:05:21,339
the Python constraint solving part

1225
01:05:18,160 --> 01:05:24,520
running and it's about to find the

1226
01:05:21,339 --> 01:05:26,920
second collision in a few sections in a

1227
01:05:24,520 --> 01:05:30,640
few seconds and so it takes I think

1228
01:05:26,920 --> 01:05:33,190
roughly 30 seconds on 80 cores for us to

1229
01:05:30,640 --> 01:05:34,920
generate collisions colliding bundles

1230
01:05:33,190 --> 01:05:38,079
which collide in two different places

1231
01:05:34,920 --> 01:05:39,400
and so on a laptop this would probably

1232
01:05:38,079 --> 01:05:42,670
be in the order of minutes if you don't

1233
01:05:39,400 --> 01:05:45,099
have 80 cores and then here we have a

1234
01:05:42,670 --> 01:05:46,390
validation tool and what this does is

1235
01:05:45,099 --> 01:05:48,490
that looks at the different bundles

1236
01:05:46,390 --> 01:05:50,618
confirms that the two different bundles

1237
01:05:48,490 --> 01:05:53,319
have the same hash but they differ in

1238
01:05:50,619 --> 01:05:56,859
two different places particularly the

1239
01:05:53,319 --> 01:05:59,769
value fields so

1240
01:05:56,859 --> 01:06:02,380
that is how we created colliding bundles

1241
01:05:59,769 --> 01:06:04,359
under the curl p27 hash function so a

1242
01:06:02,380 --> 01:06:08,980
little bit of discussion about what

1243
01:06:04,359 --> 01:06:11,828
happened after this so in July 2017 we

1244
01:06:08,980 --> 01:06:14,470
disclose this to the iota developers and

1245
01:06:11,829 --> 01:06:17,799
in response the i/o developers replaced

1246
01:06:14,470 --> 01:06:20,910
curl P 27 with a hash function called

1247
01:06:17,799 --> 01:06:23,680
curl with a k' that is based on catch AK

1248
01:06:20,910 --> 01:06:26,499
however it's important to note that and

1249
01:06:23,680 --> 01:06:29,319
I think still to this day that curl P is

1250
01:06:26,499 --> 01:06:32,319
used in iota in a few different places

1251
01:06:29,319 --> 01:06:35,829
so curl P 81 which is the curl P

1252
01:06:32,319 --> 01:06:37,359
function with 81 rounds is still used

1253
01:06:35,829 --> 01:06:40,299
for their proof-of-work algorithm and

1254
01:06:37,359 --> 01:06:43,869
it's used to hash transactions and then

1255
01:06:40,299 --> 01:06:46,150
curl P 27 itself is also still used in a

1256
01:06:43,869 --> 01:06:48,700
place in iota called milestone

1257
01:06:46,150 --> 01:06:51,910
verification so in iota as it's

1258
01:06:48,700 --> 01:06:54,069
currently deployed a bundle must also be

1259
01:06:51,910 --> 01:06:56,618
approved by an energy called the

1260
01:06:54,069 --> 01:06:59,170
coordinator in order to be accepted the

1261
01:06:56,619 --> 01:07:01,299
coordinator is a trusted party run by

1262
01:06:59,170 --> 01:07:04,239
the iota developers that approves and

1263
01:07:01,299 --> 01:07:06,609
checkpoints the state of the iota tangle

1264
01:07:04,239 --> 01:07:08,470
by signing it the source code of the

1265
01:07:06,609 --> 01:07:10,420
coordinator is not publicly available

1266
01:07:08,470 --> 01:07:12,609
and since we didn't interact with the

1267
01:07:10,420 --> 01:07:15,039
iota network in any way we can't really

1268
01:07:12,609 --> 01:07:17,288
confirm how the coordinator would impact

1269
01:07:15,039 --> 01:07:19,720
our proposed attacks but we're not aware

1270
01:07:17,289 --> 01:07:21,130
of any mechanism in the coordinator that

1271
01:07:19,720 --> 01:07:23,410
would have prevented any of the attacks

1272
01:07:21,130 --> 01:07:24,910
present in this paper in addition

1273
01:07:23,410 --> 01:07:26,019
because the coordinator is not open

1274
01:07:24,910 --> 01:07:27,940
source and we didn't interact with the

1275
01:07:26,019 --> 01:07:30,788
network we're not sure if it's still

1276
01:07:27,940 --> 01:07:32,230
vulnerable to any sort of adaptations to

1277
01:07:30,789 --> 01:07:36,789
this attack based on the fact that it

1278
01:07:32,230 --> 01:07:38,589
still uses curl P 27 so something really

1279
01:07:36,789 --> 01:07:40,210
interesting that happened after all of

1280
01:07:38,589 --> 01:07:42,900
this was that iota claimed that this was

1281
01:07:40,210 --> 01:07:45,099
intentional and that it was a backdoor

1282
01:07:42,900 --> 01:07:47,680
so this is a quote from a night of the

1283
01:07:45,099 --> 01:07:49,900
developer curl P was indeed deployed in

1284
01:07:47,680 --> 01:07:52,660
the open source iota protocol code as a

1285
01:07:49,900 --> 01:07:54,640
copy protection mechanism to prevent bad

1286
01:07:52,660 --> 01:07:55,660
actors cloning the protocol and using it

1287
01:07:54,640 --> 01:07:57,940
for nefarious purposes

1288
01:07:55,660 --> 01:07:59,769
once the practical collisions were

1289
01:07:57,940 --> 01:08:01,239
uncovered its purpose as a copy

1290
01:07:59,769 --> 01:08:02,410
protection mechanism was of course

1291
01:08:01,239 --> 01:08:05,769
rendered obsolete

1292
01:08:02,410 --> 01:08:08,259
so I interpret this as meaning that they

1293
01:08:05,769 --> 01:08:08,819
purposefully put a broken hash function

1294
01:08:08,259 --> 01:08:10,380
in

1295
01:08:08,820 --> 01:08:13,500
their codebase into their OpenSocial

1296
01:08:10,380 --> 01:08:16,560
codebase in case another project copied

1297
01:08:13,500 --> 01:08:19,410
their code they would be able to have

1298
01:08:16,560 --> 01:08:21,180
the option of doing something with the

1299
01:08:19,410 --> 01:08:24,269
fact that this hash function was broken

1300
01:08:21,180 --> 01:08:26,670
so my colleague Ethan asked them did we

1301
01:08:24,270 --> 01:08:29,060
discover a copy protection backdoor in

1302
01:08:26,670 --> 01:08:32,220
iota and they said yes the answer is yes

1303
01:08:29,060 --> 01:08:36,540
you can read the full statement at the

1304
01:08:32,220 --> 01:08:39,060
link at the bottom of that page so let

1305
01:08:36,540 --> 01:08:43,019
me sort of go over a few takeaways from

1306
01:08:39,060 --> 01:08:44,940
this work so first of all in summary we

1307
01:08:43,020 --> 01:08:46,650
exploited weaknesses in a hash function

1308
01:08:44,939 --> 01:08:48,660
called curl p27

1309
01:08:46,649 --> 01:08:52,589
to create chosen message signature

1310
01:08:48,660 --> 01:08:54,180
forgery attacks second I think probably

1311
01:08:52,589 --> 01:08:57,390
a lesson you might learn from this is

1312
01:08:54,180 --> 01:08:59,730
don't roll your own crypto I personally

1313
01:08:57,390 --> 01:09:02,730
am NOT a cryptographer but I can tell

1314
01:08:59,729 --> 01:09:04,108
it's pretty hard to get right but the

1315
01:09:02,729 --> 01:09:06,029
third thing the third takeaway is that

1316
01:09:04,109 --> 01:09:07,859
crypto currencies have many interesting

1317
01:09:06,029 --> 01:09:09,960
security and cryptographic challenges

1318
01:09:07,859 --> 01:09:12,150
there's really a lot of low-hanging

1319
01:09:09,960 --> 01:09:13,380
fruit here and so if you haven't started

1320
01:09:12,149 --> 01:09:14,639
looking at them yet

1321
01:09:13,380 --> 01:09:16,160
you know you might find it kind of

1322
01:09:14,640 --> 01:09:18,780
interesting and you might find a lot of

1323
01:09:16,160 --> 01:09:21,180
cool stuff to uncover my colleague Ethan

1324
01:09:18,779 --> 01:09:24,330
was really excited to see a version of

1325
01:09:21,180 --> 01:09:26,160
what's implemented in the wild and if

1326
01:09:24,330 --> 01:09:28,439
you would like to read the original

1327
01:09:26,160 --> 01:09:30,990
vulnerability report that we sent to the

1328
01:09:28,439 --> 01:09:32,939
iota developers check out our code or

1329
01:09:30,990 --> 01:09:35,370
read the paper that we presented at

1330
01:09:32,939 --> 01:09:39,750
blackhat in August you can find it all

1331
01:09:35,370 --> 01:09:43,620
there on our github but that's not quite

1332
01:09:39,750 --> 01:09:46,109
it so it turns out a few weeks ago that

1333
01:09:43,620 --> 01:09:49,950
iota created another ternary hash

1334
01:09:46,109 --> 01:09:51,450
function called troika so on in December

1335
01:09:49,950 --> 01:09:53,429
just last month

1336
01:09:51,450 --> 01:09:56,040
iota announced the creation of a new

1337
01:09:53,430 --> 01:10:00,390
ternary hash function that was designed

1338
01:09:56,040 --> 01:10:02,730
by a company called cyber crypt now the

1339
01:10:00,390 --> 01:10:04,890
way that this has been announced there's

1340
01:10:02,730 --> 01:10:07,769
a two hundred thousand euro prize pool

1341
01:10:04,890 --> 01:10:09,660
if you can break ground reduced variants

1342
01:10:07,770 --> 01:10:12,060
of troika so this is an interesting

1343
01:10:09,660 --> 01:10:15,360
challenge I think one and two round

1344
01:10:12,060 --> 01:10:17,760
variants have already been broken so I

1345
01:10:15,360 --> 01:10:21,719
mean to me this really there's the

1346
01:10:17,760 --> 01:10:22,500
obvious question is why ternary why do

1347
01:10:21,720 --> 01:10:26,070
you want

1348
01:10:22,500 --> 01:10:27,690
a hash function for ternary so so here

1349
01:10:26,070 --> 01:10:30,990
are some quotes I think which start to

1350
01:10:27,690 --> 01:10:33,059
to talk about that so currently iota

1351
01:10:30,990 --> 01:10:36,240
uses the relatively Hardware intensive

1352
01:10:33,060 --> 01:10:39,120
NIST standard sha-3 catch hack this is

1353
01:10:36,240 --> 01:10:42,240
curl with a k4 crucial operations for

1354
01:10:39,120 --> 01:10:44,070
maximal security we started tackling the

1355
01:10:42,240 --> 01:10:46,559
hardware side with new thinking and

1356
01:10:44,070 --> 01:10:48,120
computational processing a next

1357
01:10:46,560 --> 01:10:51,120
generation of microprocessor

1358
01:10:48,120 --> 01:10:53,370
architecture based on ternary logic for

1359
01:10:51,120 --> 01:10:55,860
ultimate efficiency in IOT is the result

1360
01:10:53,370 --> 01:10:58,200
a deep dive blog post on trinary

1361
01:10:55,860 --> 01:11:01,410
superiority over binary will come soon

1362
01:10:58,200 --> 01:11:04,019
so I haven't seen this yet I don't I

1363
01:11:01,410 --> 01:11:05,639
don't I can't really speak to why why

1364
01:11:04,020 --> 01:11:08,340
ternary is a good idea if it will turn

1365
01:11:05,640 --> 01:11:09,450
out to be a good idea I think it's a bit

1366
01:11:08,340 --> 01:11:11,550
worrisome because most of the

1367
01:11:09,450 --> 01:11:14,040
cryptographic and security tools I know

1368
01:11:11,550 --> 01:11:16,470
operate in binary so you're kind of

1369
01:11:14,040 --> 01:11:20,460
missing out on a lot of a lot of a lot

1370
01:11:16,470 --> 01:11:24,090
of work there so so really quickly just

1371
01:11:20,460 --> 01:11:27,090
to to conclude I wanted to talk a little

1372
01:11:24,090 --> 01:11:28,920
bit about cryptocurrency security so

1373
01:11:27,090 --> 01:11:31,320
this is something that my group at MIT

1374
01:11:28,920 --> 01:11:33,330
has gotten pretty interested in not only

1375
01:11:31,320 --> 01:11:35,340
did we go through this disclosure with

1376
01:11:33,330 --> 01:11:37,530
iota we also went through one with

1377
01:11:35,340 --> 01:11:40,590
Bitcoin cache we went through a much

1378
01:11:37,530 --> 01:11:42,090
smaller one with IMG and you know it's

1379
01:11:40,590 --> 01:11:44,160
been really interesting finding out

1380
01:11:42,090 --> 01:11:46,020
about vulnerabilities and disclosures

1381
01:11:44,160 --> 01:11:47,639
and sort of seeing how bugs are dealt

1382
01:11:46,020 --> 01:11:49,860
with in the cryptocurrency world in

1383
01:11:47,640 --> 01:11:53,760
particular there's an increasing number

1384
01:11:49,860 --> 01:11:56,849
of crypto currencies and code bases and

1385
01:11:53,760 --> 01:11:59,700
it's a it's a scenario where attackers

1386
01:11:56,850 --> 01:12:02,880
can very easily and anonymously exploit

1387
01:11:59,700 --> 01:12:04,950
bugs for financial gain it's a very

1388
01:12:02,880 --> 01:12:07,080
challenging space to determine best

1389
01:12:04,950 --> 01:12:10,290
practices for reporting disclosure

1390
01:12:07,080 --> 01:12:12,240
deploying fixes and communication I

1391
01:12:10,290 --> 01:12:14,280
really do think that this space is is

1392
01:12:12,240 --> 01:12:16,019
quite different than browser security or

1393
01:12:14,280 --> 01:12:17,580
operating system security and if you'd

1394
01:12:16,020 --> 01:12:20,580
like to talk about why I'm happy to do

1395
01:12:17,580 --> 01:12:22,830
that we are working and we're interested

1396
01:12:20,580 --> 01:12:25,080
in creating a nexus where security

1397
01:12:22,830 --> 01:12:27,120
researchers can work together across

1398
01:12:25,080 --> 01:12:28,769
different cryptocurrencies to help

1399
01:12:27,120 --> 01:12:30,300
figure out some of these best practices

1400
01:12:28,770 --> 01:12:32,280
and to help figure out how to think

1401
01:12:30,300 --> 01:12:34,380
about deploying fixes and communication

1402
01:12:32,280 --> 01:12:35,130
and if this is something that interests

1403
01:12:34,380 --> 01:12:35,870
you

1404
01:12:35,130 --> 01:12:37,550
I'd be real

1405
01:12:35,870 --> 01:12:39,760
excited to talk to you after this talk

1406
01:12:37,550 --> 01:12:46,149
so thank you very much

1407
01:12:39,760 --> 01:12:46,149
[Applause]

1408
01:12:47,140 --> 01:12:54,500
okay so we have time for questions yes

1409
01:12:51,440 --> 01:12:57,259
go ahead you told us that they're still

1410
01:12:54,500 --> 01:13:01,160
using Carole and not only 27 but the

1411
01:12:57,260 --> 01:13:03,080
version with men much more rounds but

1412
01:13:01,160 --> 01:13:04,460
from your description of the attack your

1413
01:13:03,080 --> 01:13:05,210
attack still works for the many rounds

1414
01:13:04,460 --> 01:13:08,900
is it right

1415
01:13:05,210 --> 01:13:10,280
we haven't evaluated the time we haven't

1416
01:13:08,900 --> 01:13:11,960
we haven't implemented an attack from

1417
01:13:10,280 --> 01:13:13,370
any rounds so I wouldn't feel

1418
01:13:11,960 --> 01:13:19,820
comfortable saying it works for many

1419
01:13:13,370 --> 01:13:22,370
rounds things it was I I read the

1420
01:13:19,820 --> 01:13:24,500
correspondence between you and the EOD

1421
01:13:22,370 --> 01:13:27,500
team and there was a threat to sue you

1422
01:13:24,500 --> 01:13:30,710
by the your team for these disclosures

1423
01:13:27,500 --> 01:13:34,520
so they don't seem very receptive in

1424
01:13:30,710 --> 01:13:36,020
this so what is your take in interacting

1425
01:13:34,520 --> 01:13:37,730
with such communities that are not

1426
01:13:36,020 --> 01:13:39,500
receptive to security researchers and

1427
01:13:37,730 --> 01:13:41,269
what do you think we should do a script

1428
01:13:39,500 --> 01:13:43,520
ographers to discourage the community to

1429
01:13:41,270 --> 01:13:46,670
use tools that are broken and don't

1430
01:13:43,520 --> 01:13:48,380
accept this kind of criticism yes so

1431
01:13:46,670 --> 01:13:51,590
there was some Twitter back-and-forth

1432
01:13:48,380 --> 01:13:54,410
about a lawsuit with my colleague Ethan

1433
01:13:51,590 --> 01:13:56,660
Hellman we did end up getting a lawyer

1434
01:13:54,410 --> 01:13:58,639
I'm working with a lawyer for after

1435
01:13:56,660 --> 01:14:00,950
pretty soon after we we started all of

1436
01:13:58,640 --> 01:14:03,860
this it's kind of worrisome because I

1437
01:14:00,950 --> 01:14:07,010
know that not everyone has can can

1438
01:14:03,860 --> 01:14:08,690
afford a lawyer quite frankly so so it

1439
01:14:07,010 --> 01:14:11,239
was we were lucky to be able to do that

1440
01:14:08,690 --> 01:14:13,759
I think one thing that I was most struck

1441
01:14:11,239 --> 01:14:15,709
by was just how different these

1442
01:14:13,760 --> 01:14:17,600
communities really were the people

1443
01:14:15,710 --> 01:14:19,580
working on these cryptocurrencies and

1444
01:14:17,600 --> 01:14:23,450
sort of the more traditional security

1445
01:14:19,580 --> 01:14:25,610
cryptographer communities you know there

1446
01:14:23,450 --> 01:14:28,519
wasn't as much cross-pollination there

1447
01:14:25,610 --> 01:14:30,320
as I would have expected and I think

1448
01:14:28,520 --> 01:14:32,170
it's really really important I think

1449
01:14:30,320 --> 01:14:34,370
that there might be a tendency for

1450
01:14:32,170 --> 01:14:38,239
security researchers and cryptographers

1451
01:14:34,370 --> 01:14:40,880
to dismiss all cryptocurrency and that's

1452
01:14:38,239 --> 01:14:42,799
not what I want to intend that's not my

1453
01:14:40,880 --> 01:14:44,510
intention with this talk I think that

1454
01:14:42,800 --> 01:14:46,340
there really is a wide variety of

1455
01:14:44,510 --> 01:14:48,230
expertise across different crypto

1456
01:14:46,340 --> 01:14:50,300
currencies some crypto currencies take

1457
01:14:48,230 --> 01:14:52,160
security extremely seriously they have

1458
01:14:50,300 --> 01:14:54,530
very good best part they have very good

1459
01:14:52,160 --> 01:14:56,059
practices they're very paranoid they

1460
01:14:54,530 --> 01:14:58,949
think very carefully about what they're

1461
01:14:56,060 --> 01:15:00,929
doing and then others do not so

1462
01:14:58,949 --> 01:15:03,329
I would say don't don't treat all

1463
01:15:00,929 --> 01:15:04,769
cryptocurrencies the same and please get

1464
01:15:03,329 --> 01:15:10,289
involved please start looking at this

1465
01:15:04,769 --> 01:15:14,339
thank you I think that it would be fair

1466
01:15:10,289 --> 01:15:17,249
to say that you and your team were

1467
01:15:14,339 --> 01:15:19,439
received in bad faith and that the iota

1468
01:15:17,249 --> 01:15:22,829
team effectively continues to work in

1469
01:15:19,439 --> 01:15:24,419
bad faith with you in light of that do

1470
01:15:22,829 --> 01:15:26,728
you think that it is reasonable for a

1471
01:15:24,419 --> 01:15:32,339
security researcher to participate in

1472
01:15:26,729 --> 01:15:33,899
this new contest that they have going I

1473
01:15:32,339 --> 01:15:35,999
think I think that's very challenging

1474
01:15:33,899 --> 01:15:38,459
and that depends on your own values and

1475
01:15:35,999 --> 01:15:40,289
morals I wouldn't I wouldn't hold it

1476
01:15:38,459 --> 01:15:42,929
against anyone to participate in this

1477
01:15:40,289 --> 01:15:45,119
contest part of the reason that we did

1478
01:15:42,929 --> 01:15:49,619
what we did was I was worried about the

1479
01:15:45,119 --> 01:15:51,509
users of iota and so I think that if if

1480
01:15:49,619 --> 01:15:52,679
if that's a concern for you as well then

1481
01:15:51,510 --> 01:15:54,479
you might be interested in lending your

1482
01:15:52,679 --> 01:15:55,859
talents you might have better places

1483
01:15:54,479 --> 01:16:06,300
you'd like to use your talents I think

1484
01:15:55,859 --> 01:16:10,169
that's up to you yes good do we know why

1485
01:16:06,300 --> 01:16:15,970
they choose 1 0 and negative 1 as

1486
01:16:10,169 --> 01:16:18,169
opposed to 0 1 & 2 for the third ring I

1487
01:16:15,970 --> 01:16:21,510
[Music]

1488
01:16:18,169 --> 01:16:24,329
don't know but I will I will tell you it

1489
01:16:21,510 --> 01:16:26,639
made it really hard to debug our code so

1490
01:16:24,329 --> 01:16:27,989
yeah and to read the values so I was

1491
01:16:26,639 --> 01:16:30,030
guessing they may have done it for the

1492
01:16:27,989 --> 01:16:33,509
purpose of some balanced criteria that

1493
01:16:30,030 --> 01:16:37,228
is used to the design valence criteria

1494
01:16:33,510 --> 01:16:38,609
you know balancing 1 0 negative 1 that's

1495
01:16:37,229 --> 01:16:40,949
those are the criteria that are used for

1496
01:16:38,609 --> 01:16:42,749
sbox design typically I'm wondering

1497
01:16:40,949 --> 01:16:43,669
that's a good question I don't know the

1498
01:16:42,749 --> 01:16:47,309
answer yeah

1499
01:16:43,669 --> 01:16:47,639
thank you great doc all right next

1500
01:16:47,309 --> 01:16:50,159
question

1501
01:16:47,639 --> 01:16:51,809
did they ever happen to make any kind of

1502
01:16:50,159 --> 01:16:53,789
statement to you or anybody else as to

1503
01:16:51,809 --> 01:16:57,109
whether they have any other copy

1504
01:16:53,789 --> 01:16:57,108
protection backdoors

1505
01:16:58,340 --> 01:17:05,810
yeah III don't I don't recall I don't

1506
01:17:03,590 --> 01:17:08,060
recall asking or getting an answer to

1507
01:17:05,810 --> 01:17:15,440
that question so yeah and perhaps they

1508
01:17:08,060 --> 01:17:19,369
don't recall if they do I got into an

1509
01:17:15,440 --> 01:17:22,400
exchange on Twitter with come from

1510
01:17:19,369 --> 01:17:24,920
beyond and I'm wondering if you also

1511
01:17:22,400 --> 01:17:27,469
came into any other similar criticism

1512
01:17:24,920 --> 01:17:31,270
when we posed the question of kerckhoffs

1513
01:17:27,469 --> 01:17:33,949
principle he said that it was not

1514
01:17:31,270 --> 01:17:35,929
necessary to apply it because banks also

1515
01:17:33,949 --> 01:17:37,669
didn't follow this principle I'm

1516
01:17:35,929 --> 01:17:39,949
wondering if they posed any similar

1517
01:17:37,670 --> 01:17:41,329
criticism to you and your team privately

1518
01:17:39,949 --> 01:17:47,269
as well and if you're willing to comment

1519
01:17:41,329 --> 01:17:49,130
on that at all there I think all of the

1520
01:17:47,270 --> 01:17:50,780
communication most at least 90% of the

1521
01:17:49,130 --> 01:17:52,909
communication between them and my team

1522
01:17:50,780 --> 01:17:58,699
is now published on the internet so you

1523
01:17:52,909 --> 01:18:00,739
can go read that hi if anybody

1524
01:17:58,699 --> 01:18:02,509
participates in breaking troika should

1525
01:18:00,739 --> 01:18:04,098
we report the security reduction and bet

1526
01:18:02,510 --> 01:18:07,909
your trips if you want to be received by

1527
01:18:04,099 --> 01:18:09,800
them sorry I didn't hear you should we

1528
01:18:07,909 --> 01:18:11,809
report a security reduction in troika in

1529
01:18:09,800 --> 01:18:16,880
terms of bits or tricks if we wanted to

1530
01:18:11,810 --> 01:18:18,619
allow receive by their team thank you

1531
01:18:16,880 --> 01:18:23,989
for your work this was really good talk

1532
01:18:18,619 --> 01:18:27,079
to watch thank you next question given

1533
01:18:23,989 --> 01:18:29,928
all the exchange and all the context is

1534
01:18:27,079 --> 01:18:31,759
there any iota of truthfulness to their

1535
01:18:29,929 --> 01:18:34,849
claim that this was an intentional Becca

1536
01:18:31,760 --> 01:18:37,280
door I mean it's really hard to evaluate

1537
01:18:34,849 --> 01:18:40,219
as an outsider I know I don't think that

1538
01:18:37,280 --> 01:18:42,050
at least I don't have I don't really

1539
01:18:40,219 --> 01:18:42,699
have enough information to prove one way

1540
01:18:42,050 --> 01:18:46,670
or the other

1541
01:18:42,699 --> 01:18:48,860
because if I any any problem in any

1542
01:18:46,670 --> 01:18:51,639
product can be claimed to be an

1543
01:18:48,860 --> 01:18:57,920
intentional backdoor that's the ultimate

1544
01:18:51,639 --> 01:19:00,170
cryptographers protection yeah next

1545
01:18:57,920 --> 01:19:02,210
question it sounds like you were very

1546
01:19:00,170 --> 01:19:04,130
careful not to interact with the iota

1547
01:19:02,210 --> 01:19:06,409
network for the duration of your

1548
01:19:04,130 --> 01:19:09,199
research it also sounded like that held

1549
01:19:06,409 --> 01:19:10,159
you back toward the end you discussed

1550
01:19:09,199 --> 01:19:11,329
how curl p2

1551
01:19:10,159 --> 01:19:13,489
seven is still in use in there

1552
01:19:11,329 --> 01:19:16,459
coordinator and without interacting with

1553
01:19:13,489 --> 01:19:18,079
the network you can't evaluate it do you

1554
01:19:16,459 --> 01:19:19,610
think that all of your future research

1555
01:19:18,079 --> 01:19:22,099
into iota and other cryptocurrencies

1556
01:19:19,610 --> 01:19:25,299
you'll also stay off the network even if

1557
01:19:22,099 --> 01:19:28,760
you run into that kind of limitation I

1558
01:19:25,300 --> 01:19:31,669
so I we don't have any plans right now

1559
01:19:28,760 --> 01:19:36,979
to continue doing any research with iota

1560
01:19:31,669 --> 01:19:38,929
so let me make that clear second you

1561
01:19:36,979 --> 01:19:43,039
know perhaps this was paranoia on my

1562
01:19:38,929 --> 01:19:44,769
part but we we were worried about you

1563
01:19:43,039 --> 01:19:48,110
know interacting with their network

1564
01:19:44,769 --> 01:19:50,840
especially in light of the fact that

1565
01:19:48,110 --> 01:19:52,789
they eventually became to be seem to be

1566
01:19:50,840 --> 01:19:54,380
a little bit almost litigious we were

1567
01:19:52,789 --> 01:19:57,079
really worried about the way that they

1568
01:19:54,380 --> 01:19:59,689
would react so so we were very very very

1569
01:19:57,079 --> 01:20:02,509
careful to sort of stay on one side of

1570
01:19:59,689 --> 01:20:06,229
the line of only looking at published

1571
01:20:02,510 --> 01:20:08,239
code only you know running things on our

1572
01:20:06,229 --> 01:20:09,919
own machines not sending any messages to

1573
01:20:08,239 --> 01:20:13,129
any of their servers we were really

1574
01:20:09,919 --> 01:20:14,570
really worried about that did this hold

1575
01:20:13,130 --> 01:20:16,159
us back from research perspective I mean

1576
01:20:14,570 --> 01:20:17,808
certainly there's I think there's a lot

1577
01:20:16,159 --> 01:20:19,999
of really interesting work that could be

1578
01:20:17,809 --> 01:20:22,579
done analyzing many different parts of

1579
01:20:19,999 --> 01:20:24,889
iota the tangle the consensus mechanism

1580
01:20:22,579 --> 01:20:28,280
and I think that that type of work would

1581
01:20:24,889 --> 01:20:31,400
require probably interacting with the

1582
01:20:28,280 --> 01:20:34,130
i/o to network and so certainly it does

1583
01:20:31,400 --> 01:20:35,478
it does hold researchers back and do you

1584
01:20:34,130 --> 01:20:39,079
think you'll stay off the network for

1585
01:20:35,479 --> 01:20:42,139
other cryptocurrencies as well that's a

1586
01:20:39,079 --> 01:20:45,438
good question I think at this point in

1587
01:20:42,139 --> 01:20:47,530
time yes that is our strategy yes thank

1588
01:20:45,439 --> 01:20:47,530
you

1589
01:20:48,239 --> 01:20:52,150
all right so let's thank the Hagan

1590
01:20:51,490 --> 01:20:56,228
[Applause]

1591
01:20:52,150 --> 01:20:56,228
[Music]

1592
01:20:56,330 --> 01:21:04,790
and now we are on to a coffee break and

1593
01:21:00,210 --> 01:21:04,790
we reconvene again at 3:45

1594
01:58:50,139 --> 01:58:55,459
all right so it's time to get started

1595
01:58:52,429 --> 01:58:59,379
again the very very last session of the

1596
01:58:55,459 --> 01:58:59,379
conference saves the best for last

1597
01:58:59,419 --> 01:59:04,099
great so we're looking looking forward

1598
01:59:02,329 --> 01:59:05,389
to the talks in this session so this is

1599
01:59:04,099 --> 01:59:07,760
going to be our second blockchain

1600
01:59:05,389 --> 01:59:11,089
session and we're going to start with a

1601
01:59:07,760 --> 01:59:13,429
wonderful results and Greg is gonna give

1602
01:59:11,089 --> 01:59:16,089
the talk now to round multi signatures

1603
01:59:13,429 --> 01:59:16,089
all yours

1604
01:59:32,540 --> 01:59:39,420
very good good yeah thank you very much

1605
01:59:37,230 --> 01:59:41,489
welcome to the the last session I always

1606
01:59:39,420 --> 01:59:43,230
say that it's probably like at a rock

1607
01:59:41,489 --> 01:59:44,190
concert where the best bands are kept in

1608
01:59:43,230 --> 01:59:45,870
the last and if the end there's

1609
01:59:44,190 --> 01:59:48,059
fireworks and stuff so I take it that

1610
01:59:45,870 --> 01:59:52,349
that's the reason why these two talks

1611
01:59:48,060 --> 01:59:55,679
are programmed here so I'll talk a bit

1612
01:59:52,350 --> 01:59:57,270
about multi signatures in multi

1613
01:59:55,679 --> 01:59:58,920
signatures there's actually a bit of a

1614
01:59:57,270 --> 02:00:00,870
confusion going on between the

1615
01:59:58,920 --> 02:00:03,900
cryptocurrency world and the crypto

1616
02:00:00,870 --> 02:00:05,550
meaning cryptography world but so in the

1617
02:00:03,900 --> 02:00:08,699
cryptography world multi signatures

1618
02:00:05,550 --> 02:00:11,550
usually mean essentially an out of n

1619
02:00:08,699 --> 02:00:14,280
threshold signatures where a lot of

1620
02:00:11,550 --> 02:00:16,949
signers together each of them generating

1621
02:00:14,280 --> 02:00:19,380
their own keys sign the same message and

1622
02:00:16,949 --> 02:00:22,169
come up with one joint signature for

1623
02:00:19,380 --> 02:00:23,909
that one message so it's like a special

1624
02:00:22,170 --> 02:00:25,380
case of the T out of n signatures but

1625
02:00:23,909 --> 02:00:27,540
the great thing is that in multi

1626
02:00:25,380 --> 02:00:29,100
signatures the signers do not have to

1627
02:00:27,540 --> 02:00:32,130
engage in a distributed key generation

1628
02:00:29,100 --> 02:00:36,000
to get to get their keys in place so

1629
02:00:32,130 --> 02:00:37,860
they they sign this message possibly

1630
02:00:36,000 --> 02:00:39,690
through some interaction I'll be

1631
02:00:37,860 --> 02:00:41,730
focusing mainly on discrete logarithm

1632
02:00:39,690 --> 02:00:43,440
based schemes here so non pairing based

1633
02:00:41,730 --> 02:00:45,178
and these schemes will require

1634
02:00:43,440 --> 02:00:46,500
interaction between the signers there

1635
02:00:45,179 --> 02:00:48,570
are pairing based schemes that do not

1636
02:00:46,500 --> 02:00:50,460
require that interaction I'll mention

1637
02:00:48,570 --> 02:00:53,809
them but this the focus here is mainly

1638
02:00:50,460 --> 02:00:56,310
on the discrete logarithm based ones so

1639
02:00:53,810 --> 02:00:58,380
they construct this one signature and

1640
02:00:56,310 --> 02:01:01,560
the whole point of this one signature is

1641
02:00:58,380 --> 02:01:03,900
that it is shorter than just simply n

1642
02:01:01,560 --> 02:01:06,210
signatures connected concatenated with

1643
02:01:03,900 --> 02:01:08,070
one another and also that you can verify

1644
02:01:06,210 --> 02:01:10,380
it much more efficiently than you would

1645
02:01:08,070 --> 02:01:12,179
be verifying and separate signatures so

1646
02:01:10,380 --> 02:01:14,580
it's all about saving space on the one

1647
02:01:12,179 --> 02:01:17,400
hand and saving computation on the other

1648
02:01:14,580 --> 02:01:19,050
hand on top of that there are some

1649
02:01:17,400 --> 02:01:21,449
schemes that have a nice property that

1650
02:01:19,050 --> 02:01:24,330
is called key aggregation where you can

1651
02:01:21,449 --> 02:01:27,659
take these these public keys of all the

1652
02:01:24,330 --> 02:01:30,000
signers and pre-compute and aggregate a

1653
02:01:27,659 --> 02:01:31,409
public key from this so that you can do

1654
02:01:30,000 --> 02:01:33,719
the verification of the signature

1655
02:01:31,409 --> 02:01:35,639
against this aggregated public key

1656
02:01:33,719 --> 02:01:37,469
rather than the individual public keys

1657
02:01:35,640 --> 02:01:39,090
of course a trivial solution is again

1658
02:01:37,469 --> 02:01:40,710
just concatenating all the public keys

1659
02:01:39,090 --> 02:01:45,230
but we want something that would be

1660
02:01:40,710 --> 02:01:45,230
shorter and more efficient to to verify

1661
02:01:45,330 --> 02:01:50,010
this being real-world crypto maybe I

1662
02:01:48,510 --> 02:01:51,989
should say something about the

1663
02:01:50,010 --> 02:01:55,620
applications of these multi signatures

1664
02:01:51,989 --> 02:01:57,419
in in the real world and for that it

1665
02:01:55,620 --> 02:02:01,500
could be useful to go a bit into detail

1666
02:01:57,420 --> 02:02:03,180
on how Bitcoin works and its blockchain

1667
02:02:01,500 --> 02:02:05,489
and transactions in there so a Bitcoin

1668
02:02:03,180 --> 02:02:08,360
block consists of a list of transactions

1669
02:02:05,489 --> 02:02:10,500
each of those transactions has

1670
02:02:08,360 --> 02:02:13,710
input/output and a witness this is a

1671
02:02:10,500 --> 02:02:15,600
simplified picture of it but essentially

1672
02:02:13,710 --> 02:02:18,660
what what happens there like an output

1673
02:02:15,600 --> 02:02:20,940
is essentially the hash of a public key

1674
02:02:18,660 --> 02:02:23,910
of the recipient of the money in this

1675
02:02:20,940 --> 02:02:27,389
transaction and the amount that is given

1676
02:02:23,910 --> 02:02:30,150
with it an input is a pointer to a

1677
02:02:27,390 --> 02:02:32,730
previously unspent output so each input

1678
02:02:30,150 --> 02:02:35,460
refers to an amp output somewhere else

1679
02:02:32,730 --> 02:02:38,218
in the blockchain and transfers the

1680
02:02:35,460 --> 02:02:39,780
amounts in the previous outputs with the

1681
02:02:38,219 --> 02:02:41,700
same public key that was connected to

1682
02:02:39,780 --> 02:02:43,500
that output previously in in the

1683
02:02:41,700 --> 02:02:45,870
blockchain and the way that this is

1684
02:02:43,500 --> 02:02:49,440
proven to be correct is that you add as

1685
02:02:45,870 --> 02:02:53,180
a witness signature under that public

1686
02:02:49,440 --> 02:02:55,919
key of the input already input refers to

1687
02:02:53,180 --> 02:02:58,590
now this would would not work very well

1688
02:02:55,920 --> 02:03:00,120
for all transactions because the the

1689
02:02:58,590 --> 02:03:02,070
amount spent in this transaction would

1690
02:03:00,120 --> 02:03:03,960
have to be the same exactly the same as

1691
02:03:02,070 --> 02:03:06,059
the output of the previous transaction

1692
02:03:03,960 --> 02:03:08,580
so it doesn't work very well for for

1693
02:03:06,060 --> 02:03:10,350
doing payments for example if you would

1694
02:03:08,580 --> 02:03:11,870
have to pay a sum of twelve bitcoins or

1695
02:03:10,350 --> 02:03:14,280
it's actually quite a lot of money but

1696
02:03:11,870 --> 02:03:16,260
so suppose you have to pay 12 bit coin

1697
02:03:14,280 --> 02:03:18,360
and you happen to have three

1698
02:03:16,260 --> 02:03:20,070
transactions from three different with

1699
02:03:18,360 --> 02:03:21,960
three different outputs one of them with

1700
02:03:20,070 --> 02:03:24,960
5 bitcoins one with six and one with

1701
02:03:21,960 --> 02:03:27,150
three then you would have to combine

1702
02:03:24,960 --> 02:03:28,739
those to do that one payment and so

1703
02:03:27,150 --> 02:03:31,679
that's why you have multi input multi

1704
02:03:28,739 --> 02:03:34,530
output transactions you have 5 + X 6 + 3

1705
02:03:31,680 --> 02:03:37,170
which is 1412 bitcoins so you can keep

1706
02:03:34,530 --> 02:03:39,269
two Bitcoin as a change in your own

1707
02:03:37,170 --> 02:03:41,940
wallet so typically you would put the

1708
02:03:39,270 --> 02:03:44,910
merchant as one output and change as as

1709
02:03:41,940 --> 02:03:47,009
another output and the way that you

1710
02:03:44,910 --> 02:03:48,510
would authenticate this this transaction

1711
02:03:47,010 --> 02:03:50,730
would be that you would provide

1712
02:03:48,510 --> 02:03:54,390
signatures under those different public

1713
02:03:50,730 --> 02:03:55,919
keys of this of this transaction you

1714
02:03:54,390 --> 02:03:57,960
could use the same public key of course

1715
02:03:55,920 --> 02:03:59,190
for all those inputs but for anonymity

1716
02:03:57,960 --> 02:04:00,960
purposes of

1717
02:03:59,190 --> 02:04:02,639
people would use different public keys

1718
02:04:00,960 --> 02:04:04,230
for their different transactions so that

1719
02:04:02,640 --> 02:04:08,010
they're not linkable until at some point

1720
02:04:04,230 --> 02:04:09,929
it would be spent together now what you

1721
02:04:08,010 --> 02:04:11,580
can do with multi signatures is that

1722
02:04:09,930 --> 02:04:13,140
instead of having separate signatures on

1723
02:04:11,580 --> 02:04:15,449
all those public key you can actually

1724
02:04:13,140 --> 02:04:16,560
just do one multi signature under all of

1725
02:04:15,449 --> 02:04:18,960
those keys so that you have one

1726
02:04:16,560 --> 02:04:20,460
signature and a list of three public

1727
02:04:18,960 --> 02:04:22,350
keys that you can verify it's more

1728
02:04:20,460 --> 02:04:24,810
efficient in verification but also it

1729
02:04:22,350 --> 02:04:27,120
saves on network and storage space on on

1730
02:04:24,810 --> 02:04:29,310
the blockchain blocks are constant in

1731
02:04:27,120 --> 02:04:31,500
size so saving space is important to

1732
02:04:29,310 --> 02:04:33,719
squeeze more transactions into a single

1733
02:04:31,500 --> 02:04:35,489
block and even just in total space over

1734
02:04:33,719 --> 02:04:37,110
the blockchain it's important to not to

1735
02:04:35,489 --> 02:04:38,849
be too wasteful with that because

1736
02:04:37,110 --> 02:04:42,480
currently you're already at around 200

1737
02:04:38,850 --> 02:04:46,260
gigabytes and so saving is important

1738
02:04:42,480 --> 02:04:48,030
there another application where multi

1739
02:04:46,260 --> 02:04:49,140
signatures can be useful is it has

1740
02:04:48,030 --> 02:04:52,440
already been mentioned in a previous

1741
02:04:49,140 --> 02:04:57,300
talks is multi-sig addresses so multisig

1742
02:04:52,440 --> 02:05:00,599
addresses are addresses where the where

1743
02:04:57,300 --> 02:05:03,360
the output or the input where an address

1744
02:05:00,600 --> 02:05:06,120
is a hash of a list of public keys and a

1745
02:05:03,360 --> 02:05:08,519
threshold T of those are needed to

1746
02:05:06,120 --> 02:05:10,590
authenticate a transaction for it to go

1747
02:05:08,520 --> 02:05:12,150
through to go through so the witness

1748
02:05:10,590 --> 02:05:15,060
contains a list of all the public keys

1749
02:05:12,150 --> 02:05:16,710
and a threshold of the signatures reason

1750
02:05:15,060 --> 02:05:18,239
why you want to do this is joint

1751
02:05:16,710 --> 02:05:19,949
accounts like if your multiple people

1752
02:05:18,239 --> 02:05:21,540
owning an account but mainly also for

1753
02:05:19,949 --> 02:05:24,000
additional security if you want to have

1754
02:05:21,540 --> 02:05:27,630
one key just on your laptop and one key

1755
02:05:24,000 --> 02:05:29,370
in cold storage or even in a in a Swiss

1756
02:05:27,630 --> 02:05:31,739
bunker in a mountain I'm not even

1757
02:05:29,370 --> 02:05:33,599
kidding that that is being done so you

1758
02:05:31,739 --> 02:05:36,419
can do that with with these type of

1759
02:05:33,600 --> 02:05:38,460
multi-sig addresses if you would use

1760
02:05:36,420 --> 02:05:41,790
multi signatures here you can actually

1761
02:05:38,460 --> 02:05:44,100
instead of using the list of public keys

1762
02:05:41,790 --> 02:05:47,070
and a list of signatures you can

1763
02:05:44,100 --> 02:05:49,020
actually just I can't put the aggregated

1764
02:05:47,070 --> 02:05:50,549
public key as the address or the hash of

1765
02:05:49,020 --> 02:05:53,610
the aggregate of public key as the

1766
02:05:50,550 --> 02:05:55,530
address of the wallet and use one

1767
02:05:53,610 --> 02:05:57,839
signature to verify it it's even and

1768
02:05:55,530 --> 02:05:59,820
this way you can actually have multisig

1769
02:05:57,840 --> 02:06:01,710
addresses without that it's visible to

1770
02:05:59,820 --> 02:06:03,809
the outside world that there's multisig

1771
02:06:01,710 --> 02:06:08,370
address behind it if the multi signature

1772
02:06:03,810 --> 02:06:10,440
looks like an ordinary signature there

1773
02:06:08,370 --> 02:06:11,769
are applications beyond Bitcoin if you

1774
02:06:10,440 --> 02:06:13,719
were wondering

1775
02:06:11,770 --> 02:06:16,800
there are applications for example if

1776
02:06:13,720 --> 02:06:19,390
you want have a group of servers who are

1777
02:06:16,800 --> 02:06:22,630
authorizing or authenticating something

1778
02:06:19,390 --> 02:06:24,520
together and they were called cthe or DS

1779
02:06:22,630 --> 02:06:27,040
in a paper that presented the cosy

1780
02:06:24,520 --> 02:06:29,050
scheme then you can they can do this in

1781
02:06:27,040 --> 02:06:31,780
a compact way and efficiently verifiable

1782
02:06:29,050 --> 02:06:33,880
way using multi signatures you can also

1783
02:06:31,780 --> 02:06:35,080
have a distributed random beacons based

1784
02:06:33,880 --> 02:06:37,330
on this where a number of servers

1785
02:06:35,080 --> 02:06:39,519
authenticate that there's a common

1786
02:06:37,330 --> 02:06:41,980
random value being signed and this is

1787
02:06:39,520 --> 02:06:44,440
really the random value and this at this

1788
02:06:41,980 --> 02:06:46,150
point or for example in in block chains

1789
02:06:44,440 --> 02:06:48,429
in general when you have notarization

1790
02:06:46,150 --> 02:06:52,660
and authorization is where the community

1791
02:06:48,430 --> 02:06:55,660
of nodes they confirm what the next

1792
02:06:52,660 --> 02:06:57,849
block will be you can have all of the

1793
02:06:55,660 --> 02:06:59,500
nodes doing this or a random subset of

1794
02:06:57,850 --> 02:07:01,210
them but anywhere there will be a lot of

1795
02:06:59,500 --> 02:07:02,560
signatures flying around to make that

1796
02:07:01,210 --> 02:07:04,300
more efficient they can do a multi

1797
02:07:02,560 --> 02:07:06,730
signature to have a compact signature

1798
02:07:04,300 --> 02:07:08,860
and possibly even a compact key of it

1799
02:07:06,730 --> 02:07:10,929
this is used in in various

1800
02:07:08,860 --> 02:07:12,429
cryptocurrencies and in other

1801
02:07:10,930 --> 02:07:14,830
distributed Ledger's that are not

1802
02:07:12,430 --> 02:07:17,140
necessarily cryptocurrencies but so

1803
02:07:14,830 --> 02:07:18,430
these these kind of schemes and the

1804
02:07:17,140 --> 02:07:22,570
multi signature schemes are actually

1805
02:07:18,430 --> 02:07:25,720
being used there okay so in this talk

1806
02:07:22,570 --> 02:07:28,059
I'm going to present some of our recent

1807
02:07:25,720 --> 02:07:30,160
results I'm first gonna have to talk a

1808
02:07:28,060 --> 02:07:32,440
bit of the recent history of multi

1809
02:07:30,160 --> 02:07:34,269
signature schemes just to give you a bit

1810
02:07:32,440 --> 02:07:35,889
of an idea of the field I will not be

1811
02:07:34,270 --> 02:07:39,640
able to go into details there but just

1812
02:07:35,890 --> 02:07:41,590
to give an idea and then our results

1813
02:07:39,640 --> 02:07:44,290
where we realize that there are actually

1814
02:07:41,590 --> 02:07:45,910
attacks on existing two rounds multi

1815
02:07:44,290 --> 02:07:48,460
signature schemes based on discrete

1816
02:07:45,910 --> 02:07:50,200
logarithms fortunately there is a

1817
02:07:48,460 --> 02:07:52,300
recovery from the attack we can actually

1818
02:07:50,200 --> 02:07:56,679
build secure schemes and then we'll be

1819
02:07:52,300 --> 02:07:59,140
ready to compete to conclude so brief

1820
02:07:56,680 --> 02:08:01,750
history on these these multi signature

1821
02:07:59,140 --> 02:08:03,760
schemes so I'm gonna explain here a

1822
02:08:01,750 --> 02:08:08,170
basic variant of Schnoor multi

1823
02:08:03,760 --> 02:08:09,760
signatures this basic variant we'll see

1824
02:08:08,170 --> 02:08:11,680
you will be insecure but this will be

1825
02:08:09,760 --> 02:08:13,060
illustrative for seeing what the

1826
02:08:11,680 --> 02:08:15,010
problems and the difficulty is of

1827
02:08:13,060 --> 02:08:18,460
getting multi signatures right so

1828
02:08:15,010 --> 02:08:21,310
suppose that you have three signers here

1829
02:08:18,460 --> 02:08:22,910
each with around your public key the way

1830
02:08:21,310 --> 02:08:26,630
that you would normally do

1831
02:08:22,910 --> 02:08:28,130
or multi signatures is that each of them

1832
02:08:26,630 --> 02:08:30,380
would go through their first round they

1833
02:08:28,130 --> 02:08:33,500
generate a random R they compute T as G

1834
02:08:30,380 --> 02:08:35,540
to the R and exchange their T values

1835
02:08:33,500 --> 02:08:37,520
with each other and take as a final T

1836
02:08:35,540 --> 02:08:39,820
value to be used in the in a signature

1837
02:08:37,520 --> 02:08:42,770
the product of all of these T values

1838
02:08:39,820 --> 02:08:44,179
that T value goes into the hash you

1839
02:08:42,770 --> 02:08:45,890
compute the hash like that and then you

1840
02:08:44,180 --> 02:08:47,990
compute each of the signers compute

1841
02:08:45,890 --> 02:08:50,510
their own response as there are value

1842
02:08:47,990 --> 02:08:53,120
plus C times their secret key modulo Q

1843
02:08:50,510 --> 02:08:55,190
they exchange these s values with each

1844
02:08:53,120 --> 02:08:57,380
other and the final signature will

1845
02:08:55,190 --> 02:08:58,910
contain and contain the sum of these s

1846
02:08:57,380 --> 02:09:00,560
values and you can check the algebra

1847
02:08:58,910 --> 02:09:02,990
that if you do it like that then you can

1848
02:09:00,560 --> 02:09:05,450
check the signature verify the signature

1849
02:09:02,990 --> 02:09:07,370
by checking the equations right there

1850
02:09:05,450 --> 02:09:09,380
you can even do that in a very compact

1851
02:09:07,370 --> 02:09:10,790
way because you can simply multiply all

1852
02:09:09,380 --> 02:09:12,470
the public keys together to get one

1853
02:09:10,790 --> 02:09:14,000
aggregate a public key and this is a

1854
02:09:12,470 --> 02:09:16,490
verification equation that you would end

1855
02:09:14,000 --> 02:09:17,930
up with now that scheme if you just use

1856
02:09:16,490 --> 02:09:20,150
it like that has a couple of problems

1857
02:09:17,930 --> 02:09:22,910
and let me sketch what these problems

1858
02:09:20,150 --> 02:09:25,610
are so one problem is Rokia attacks if

1859
02:09:22,910 --> 02:09:28,550
there's one on a signer with public key

1860
02:09:25,610 --> 02:09:31,790
pick a one then a second corrupt signer

1861
02:09:28,550 --> 02:09:33,410
could change his public key so that he

1862
02:09:31,790 --> 02:09:35,269
actually knows the discrete logarithm of

1863
02:09:33,410 --> 02:09:37,160
the product of the two keys rather than

1864
02:09:35,270 --> 02:09:39,940
of his own key so that he can create

1865
02:09:37,160 --> 02:09:42,920
signatures under both keys together

1866
02:09:39,940 --> 02:09:44,660
seemingly claiming that the the honest

1867
02:09:42,920 --> 02:09:47,120
signer has also signed this message

1868
02:09:44,660 --> 02:09:49,340
which is not what we want to do there's

1869
02:09:47,120 --> 02:09:52,370
multiple ways out of this in the

1870
02:09:49,340 --> 02:09:54,710
literature there's one assumption made

1871
02:09:52,370 --> 02:09:57,559
that just assumes the problem away just

1872
02:09:54,710 --> 02:09:59,210
assume that all of the adversaries know

1873
02:09:57,560 --> 02:10:00,980
the secret key corresponding to their

1874
02:09:59,210 --> 02:10:02,990
public key and a security model by

1875
02:10:00,980 --> 02:10:05,299
having the adversary handover the secret

1876
02:10:02,990 --> 02:10:08,210
key of all signers that are involved in

1877
02:10:05,300 --> 02:10:09,740
the forgery that assumption could kind

1878
02:10:08,210 --> 02:10:12,980
of work if for example you're a

1879
02:10:09,740 --> 02:10:14,780
manufacturer of devices and in the on

1880
02:10:12,980 --> 02:10:16,280
the premises you do the key generation

1881
02:10:14,780 --> 02:10:18,050
so you know that your devices go out

1882
02:10:16,280 --> 02:10:20,059
there into the world with well generated

1883
02:10:18,050 --> 02:10:21,860
keys then it could work any other

1884
02:10:20,060 --> 02:10:23,300
setting really decentralized settings

1885
02:10:21,860 --> 02:10:26,660
this is probably not a good assumption

1886
02:10:23,300 --> 02:10:28,670
to to work with other solutions are

1887
02:10:26,660 --> 02:10:30,769
using interactive key generation where

1888
02:10:28,670 --> 02:10:32,560
all signers go together in one big joint

1889
02:10:30,770 --> 02:10:34,640
protocol and generator keys

1890
02:10:32,560 --> 02:10:36,030
interactively of course with the

1891
02:10:34,640 --> 02:10:38,400
disadvantages of doing

1892
02:10:36,030 --> 02:10:41,909
that protocol at the same time then

1893
02:10:38,400 --> 02:10:44,460
there was a paper by mahir buleria

1894
02:10:41,909 --> 02:10:46,409
myself in 2006 where we had a different

1895
02:10:44,460 --> 02:10:48,000
trick where we use instead of using the

1896
02:10:46,409 --> 02:10:49,920
same challenge on all of the public keys

1897
02:10:48,000 --> 02:10:51,869
or use per sign or challenge with the

1898
02:10:49,920 --> 02:10:53,460
challenge I mean the hash value with

1899
02:10:51,869 --> 02:10:55,139
that you can actually get security as

1900
02:10:53,460 --> 02:10:58,110
well but it goes at the cost of

1901
02:10:55,139 --> 02:11:01,440
efficiency in verification and then in

1902
02:10:58,110 --> 02:11:03,299
in 2007 there was a recent party like a

1903
02:11:01,440 --> 02:11:05,460
paper where they observed that you can

1904
02:11:03,300 --> 02:11:07,349
do actually proofs of possession added

1905
02:11:05,460 --> 02:11:09,809
to a public key essentially a self

1906
02:11:07,349 --> 02:11:11,309
signed as a certificate on your public

1907
02:11:09,809 --> 02:11:13,110
key will suffice to get provable

1908
02:11:11,309 --> 02:11:16,500
security depends on the scheme where

1909
02:11:13,110 --> 02:11:17,909
this works but BLS is one of the pairing

1910
02:11:16,500 --> 02:11:20,520
des scheme but also Schnoor is actually

1911
02:11:17,909 --> 02:11:23,429
one where you can do this and then

1912
02:11:20,520 --> 02:11:26,969
recently last year there was a pretty

1913
02:11:23,429 --> 02:11:28,860
cool trick by Maxwell Adele music key

1914
02:11:26,969 --> 02:11:30,599
aggression key aggregation music was the

1915
02:11:28,860 --> 02:11:32,250
name of the scheme and they realized

1916
02:11:30,599 --> 02:11:33,630
that if you take an aggregate public key

1917
02:11:32,250 --> 02:11:36,360
which is the product of the public key

1918
02:11:33,630 --> 02:11:38,849
raised to different hashes that actually

1919
02:11:36,360 --> 02:11:40,860
you can prove you can prove this secure

1920
02:11:38,849 --> 02:11:45,719
so actually these these attacks are are

1921
02:11:40,860 --> 02:11:47,670
thwarted so that's one problem this roki

1922
02:11:45,719 --> 02:11:49,199
aggregate a row key problem second

1923
02:11:47,670 --> 02:11:51,570
problem is when you want to do the

1924
02:11:49,199 --> 02:11:53,460
security proof of Schnoor signatures so

1925
02:11:51,570 --> 02:11:54,840
it's a bit more technical here typically

1926
02:11:53,460 --> 02:11:57,030
if you want to prove the security of

1927
02:11:54,840 --> 02:12:00,059
your signatures what you do is you

1928
02:11:57,030 --> 02:12:03,119
choose as a simulator the the seed the

1929
02:12:00,059 --> 02:12:05,760
hash value and the response as upfront

1930
02:12:03,119 --> 02:12:07,739
and you computed the T value that should

1931
02:12:05,760 --> 02:12:10,050
correspond to that and you program the

1932
02:12:07,739 --> 02:12:11,610
random Oracle so that the C is indeed

1933
02:12:10,050 --> 02:12:13,679
the output of that random Oracle query

1934
02:12:11,610 --> 02:12:16,440
now the problem in multi signatures is

1935
02:12:13,679 --> 02:12:18,929
that it's not this t1 value that will be

1936
02:12:16,440 --> 02:12:20,940
the argument of the hash function it's

1937
02:12:18,929 --> 02:12:23,130
the product of the t1 value with the T

1938
02:12:20,940 --> 02:12:25,019
values of the other signers so the

1939
02:12:23,130 --> 02:12:27,090
simulators isn't a simulator is not the

1940
02:12:25,020 --> 02:12:29,460
one who determines the value of the T

1941
02:12:27,090 --> 02:12:31,230
value himself meaning the adversary may

1942
02:12:29,460 --> 02:12:33,960
know it before the simulator does and

1943
02:12:31,230 --> 02:12:35,968
make a query on the hash function before

1944
02:12:33,960 --> 02:12:37,619
the simulator has a chance to program it

1945
02:12:35,969 --> 02:12:40,020
so this whole simulation technique

1946
02:12:37,619 --> 02:12:44,039
doesn't doesn't work anymore and that's

1947
02:12:40,020 --> 02:12:45,840
a problem for provable security ok so a

1948
02:12:44,039 --> 02:12:47,159
brief history on on the multi signature

1949
02:12:45,840 --> 02:12:49,409
schemes essentially can go over the

1950
02:12:47,159 --> 02:12:49,830
whole history to an check like how did

1951
02:12:49,409 --> 02:12:51,870
they saw

1952
02:12:49,830 --> 02:12:53,910
these two problems there was a scheme by

1953
02:12:51,870 --> 02:12:57,450
Macaulay at all there was a two round

1954
02:12:53,910 --> 02:12:59,309
scheme where for the key row key problem

1955
02:12:57,450 --> 02:13:01,260
they had interactive Kiera Gatien and

1956
02:12:59,310 --> 02:13:03,210
for signature simulation they just went

1957
02:13:01,260 --> 02:13:05,430
to a weaker model where they only allow

1958
02:13:03,210 --> 02:13:08,040
sequential attacks so there's only

1959
02:13:05,430 --> 02:13:09,540
sequential queries that you can make to

1960
02:13:08,040 --> 02:13:11,310
the signing Oracle which were a very

1961
02:13:09,540 --> 02:13:14,640
distributed selling is maybe not what

1962
02:13:11,310 --> 02:13:17,280
you would like to use then there was in

1963
02:13:14,640 --> 02:13:20,370
2006 that the end paper with a three

1964
02:13:17,280 --> 02:13:22,920
round scheme we added an extra round

1965
02:13:20,370 --> 02:13:25,260
before the interaction where every

1966
02:13:22,920 --> 02:13:27,060
signer has to commit using a hash to

1967
02:13:25,260 --> 02:13:29,130
their first round so that the simulator

1968
02:13:27,060 --> 02:13:31,350
can filter out these things and and

1969
02:13:29,130 --> 02:13:33,390
check which is gonna be the final value

1970
02:13:31,350 --> 02:13:35,280
so this was a different trick but it

1971
02:13:33,390 --> 02:13:39,120
adds a new round to the signature scheme

1972
02:13:35,280 --> 02:13:41,190
and then there were a number of schemes

1973
02:13:39,120 --> 02:13:43,260
that managed to do it in two rounds

1974
02:13:41,190 --> 02:13:45,120
there was a scheme by buggers and the

1975
02:13:43,260 --> 02:13:47,700
arrow that was too round and that used

1976
02:13:45,120 --> 02:13:48,870
homomorphic equal equivocal commitments

1977
02:13:47,700 --> 02:13:50,639
we don't have time to go into the

1978
02:13:48,870 --> 02:13:52,470
details but you could blend things

1979
02:13:50,640 --> 02:13:53,940
together blender rounds together and you

1980
02:13:52,470 --> 02:13:55,920
get a two round scheme out of that at

1981
02:13:53,940 --> 02:13:56,820
price of some efficiency but at least

1982
02:13:55,920 --> 02:14:00,030
you have two rounds

1983
02:13:56,820 --> 02:14:01,710
there was a scheme by model that went

1984
02:14:00,030 --> 02:14:03,840
around the signature problem in a

1985
02:14:01,710 --> 02:14:05,340
different way they use an accommodation

1986
02:14:03,840 --> 02:14:07,050
or technique with witness

1987
02:14:05,340 --> 02:14:09,270
indistinguishable keys so that the

1988
02:14:07,050 --> 02:14:11,100
simulator knows one witness for the

1989
02:14:09,270 --> 02:14:12,780
signing key and hopes to extract a

1990
02:14:11,100 --> 02:14:15,420
different one at the end of the game

1991
02:14:12,780 --> 02:14:17,550
from from the forgery so that way we can

1992
02:14:15,420 --> 02:14:18,300
you can simulate signatures without

1993
02:14:17,550 --> 02:14:21,930
getting in trouble

1994
02:14:18,300 --> 02:14:26,160
there was the cosy scheme proposed in

1995
02:14:21,930 --> 02:14:28,830
2016 that had no security proof so had

1996
02:14:26,160 --> 02:14:30,930
no no incentive to and to get around the

1997
02:14:28,830 --> 02:14:33,420
signature simulation problem and then

1998
02:14:30,930 --> 02:14:36,150
there was the first version of the music

1999
02:14:33,420 --> 02:14:37,770
scheme that uses the music key

2000
02:14:36,150 --> 02:14:39,929
aggregation that I just talked about and

2001
02:14:37,770 --> 02:14:42,210
got around the signature simulation

2002
02:14:39,930 --> 02:14:44,400
problem by proving security not under

2003
02:14:42,210 --> 02:14:45,780
the discrete logarithm assumption but

2004
02:14:44,400 --> 02:14:48,330
the one more discrete logarithm

2005
02:14:45,780 --> 02:14:51,929
assumption where you have a discrete

2006
02:14:48,330 --> 02:14:54,210
logarithm Oracle and so to sign messages

2007
02:14:51,930 --> 02:14:55,980
you would make a query to that discrete

2008
02:14:54,210 --> 02:14:59,580
logarithm Oracle to be able to compute

2009
02:14:55,980 --> 02:15:02,009
the response now in this work we found

2010
02:14:59,580 --> 02:15:03,210
that actually all of these two round

2011
02:15:02,010 --> 02:15:04,830
schemes or at least

2012
02:15:03,210 --> 02:15:07,020
fully secured one so not argument

2013
02:15:04,830 --> 02:15:09,120
sequential attacks all of those are

2014
02:15:07,020 --> 02:15:11,219
actually insecure in the sense that

2015
02:15:09,120 --> 02:15:14,280
there are sub-exponential attacks on

2016
02:15:11,219 --> 02:15:16,980
them and that there is an impossibility

2017
02:15:14,280 --> 02:15:19,739
proof of getting any polynomial security

2018
02:15:16,980 --> 02:15:21,540
proof out of them which which raises the

2019
02:15:19,739 --> 02:15:23,549
question is it even possible at all to

2020
02:15:21,540 --> 02:15:25,410
get secured fully secured multi

2021
02:15:23,550 --> 02:15:27,960
signatures from from discrete logarithms

2022
02:15:25,410 --> 02:15:29,820
we propose a scheme that is actually

2023
02:15:27,960 --> 02:15:34,620
variation on the burgers and the adult

2024
02:15:29,820 --> 02:15:36,660
scheme that uses per message homomorphic

2025
02:15:34,620 --> 02:15:39,080
equal homomorphic equivocal commitments

2026
02:15:36,660 --> 02:15:42,440
that actually can do it in two rounds so

2027
02:15:39,080 --> 02:15:45,330
there is a way out other ways out is

2028
02:15:42,440 --> 02:15:48,179
going back to three rounds this is what

2029
02:15:45,330 --> 02:15:50,940
the second version of the music scheme

2030
02:15:48,180 --> 02:15:52,830
and and also a paper by member name

2031
02:15:50,940 --> 02:15:55,200
under the drivers and myself that we did

2032
02:15:52,830 --> 02:15:56,790
independently that combines the

2033
02:15:55,200 --> 02:15:58,800
technique of the music key aggregation

2034
02:15:56,790 --> 02:16:01,710
and the preliminary hash round of B and

2035
02:15:58,800 --> 02:16:04,050
0-6 and you can do that also with proofs

2036
02:16:01,710 --> 02:16:06,660
of possession if you want or of course

2037
02:16:04,050 --> 02:16:11,160
switch to the pairing based multi

2038
02:16:06,660 --> 02:16:14,670
signatures then our non-interactive okay

2039
02:16:11,160 --> 02:16:17,030
so on the attacks the attacks are based

2040
02:16:14,670 --> 02:16:20,010
on Wagner's generalized birthday attack

2041
02:16:17,030 --> 02:16:23,150
what partners generalize birthday attack

2042
02:16:20,010 --> 02:16:27,180
it does is given a list of random values

2043
02:16:23,150 --> 02:16:29,549
it has an algorithm for finding one

2044
02:16:27,180 --> 02:16:32,130
value in each of those Kahless so that

2045
02:16:29,550 --> 02:16:33,599
they sum up to zero it's not obvious how

2046
02:16:32,129 --> 02:16:35,218
to do that efficiently but in the paper

2047
02:16:33,599 --> 02:16:37,320
there's a method that is sub-exponential

2048
02:16:35,218 --> 02:16:39,928
and can I can actually do this somewhat

2049
02:16:37,320 --> 02:16:42,900
efficiently if you want to apply this to

2050
02:16:39,929 --> 02:16:45,690
plain Schnoor signatures you can

2051
02:16:42,900 --> 02:16:49,019
actually make lists of hash queries for

2052
02:16:45,690 --> 02:16:52,219
K minus 1 on a signing query so you open

2053
02:16:49,019 --> 02:16:54,660
K minus 1 parallel signing queries and

2054
02:16:52,218 --> 02:16:57,150
for those are on assigning queries you

2055
02:16:54,660 --> 02:16:58,978
start generating a whole list of random

2056
02:16:57,150 --> 02:17:00,420
Oracle queries for different values of T

2057
02:16:58,978 --> 02:17:02,519
there you don't have to know anything

2058
02:17:00,420 --> 02:17:04,260
about that but there's like a case

2059
02:17:02,519 --> 02:17:07,139
signature on the right here on the slide

2060
02:17:04,260 --> 02:17:09,540
that you can compute by taking this the

2061
02:17:07,138 --> 02:17:11,699
T value of it to be the product of the K

2062
02:17:09,540 --> 02:17:14,700
minus 1 other T values and also

2063
02:17:11,700 --> 02:17:16,800
generating a list of hash values negated

2064
02:17:14,700 --> 02:17:19,529
so that there's some when you

2065
02:17:16,799 --> 02:17:22,259
play Wagner's attack is going to be the

2066
02:17:19,529 --> 02:17:24,300
sum so the sum of the c12 CK minus one

2067
02:17:22,260 --> 02:17:27,300
is going to be one of the C star values

2068
02:17:24,299 --> 02:17:30,179
on the right if you use the algebra to

2069
02:17:27,299 --> 02:17:32,489
sum up the s values of the K minus 1

2070
02:17:30,179 --> 02:17:34,888
signatures you actually get an extra

2071
02:17:32,489 --> 02:17:36,808
signature on the right for the forgery

2072
02:17:34,888 --> 02:17:38,818
so you can see that this algebra works

2073
02:17:36,808 --> 02:17:40,379
out and you get a forgery there this is

2074
02:17:38,818 --> 02:17:42,448
a simplified version of the attack but

2075
02:17:40,379 --> 02:17:43,108
this is essentially what what it comes

2076
02:17:42,449 --> 02:17:44,969
down to

2077
02:17:43,109 --> 02:17:47,460
it's a Sawbuck spinel attack so it's

2078
02:17:44,968 --> 02:17:50,098
it's not polynomial time but practical

2079
02:17:47,459 --> 02:17:51,898
enough to be scary for 15 parallel

2080
02:17:50,099 --> 02:17:53,010
signing queries you can do attacks into

2081
02:17:51,898 --> 02:17:56,068
the 62 steps

2082
02:17:53,010 --> 02:17:58,050
127 parallel signing queries already

2083
02:17:56,068 --> 02:18:00,420
into 2 to 45 steps so this is something

2084
02:17:58,049 --> 02:18:01,978
to really think okay let's not use this

2085
02:18:00,420 --> 02:18:04,829
in practice because this can actually go

2086
02:18:01,978 --> 02:18:06,840
wrong you could in theory avoid these

2087
02:18:04,829 --> 02:18:08,369
attacks but increase the size of the

2088
02:18:06,840 --> 02:18:11,039
security parameter by increase the size

2089
02:18:08,369 --> 02:18:13,079
of your modulus so is there any hope for

2090
02:18:11,039 --> 02:18:15,059
provable security in our paper we show

2091
02:18:13,079 --> 02:18:16,939
through a metal reduction no there's no

2092
02:18:15,058 --> 02:18:19,709
hope for that because we can prove that

2093
02:18:16,939 --> 02:18:22,079
if the one more discrete logarithm

2094
02:18:19,709 --> 02:18:24,778
problem is hard then there cannot be a

2095
02:18:22,079 --> 02:18:26,538
security proof for any of those schemes

2096
02:18:24,779 --> 02:18:29,159
under the one more discrete logarithm

2097
02:18:26,539 --> 02:18:31,500
assumption there are some technicalities

2098
02:18:29,159 --> 02:18:33,718
here but essentially it means that all

2099
02:18:31,500 --> 02:18:35,369
known currently known proof techniques

2100
02:18:33,718 --> 02:18:37,500
under the most likely assumptions where

2101
02:18:35,369 --> 02:18:40,469
you would prove it under this will this

2102
02:18:37,500 --> 02:18:42,359
will not be will not be possible to

2103
02:18:40,468 --> 02:18:43,648
prove which is kind of remarkable given

2104
02:18:42,359 --> 02:18:48,000
that some of these schemes actually have

2105
02:18:43,648 --> 02:18:49,829
security proofs so these schemes had

2106
02:18:48,000 --> 02:18:53,159
subtle flaws in their proof and they

2107
02:18:49,829 --> 02:18:55,409
were definitely very very subtle so as

2108
02:18:53,159 --> 02:18:57,299
in secure schemes I'm just gonna show it

2109
02:18:55,409 --> 02:19:00,449
on the slide we have the modified bcj

2110
02:18:57,299 --> 02:19:01,799
scheme you see at the bottom left that

2111
02:19:00,449 --> 02:19:04,349
the signature is slightly longer than

2112
02:19:01,799 --> 02:19:06,358
what you get from normal nor signature

2113
02:19:04,349 --> 02:19:09,179
verification and the middle-right

2114
02:19:06,359 --> 02:19:11,099
is also a bit more complicated but we

2115
02:19:09,179 --> 02:19:15,808
did some large-scale simulations on it

2116
02:19:11,099 --> 02:19:17,279
and so for for 16,000 signers in a

2117
02:19:15,808 --> 02:19:18,519
distributed network we could generate

2118
02:19:17,279 --> 02:19:21,730
and

2119
02:19:18,520 --> 02:19:24,160
a signature within two seconds bandwidth

2120
02:19:21,730 --> 02:19:25,750
increase in this setup was about 20%

2121
02:19:24,160 --> 02:19:28,930
this was in the cosy framework for the

2122
02:19:25,750 --> 02:19:30,490
cosy signature scheme the increase you

2123
02:19:28,930 --> 02:19:31,900
would think that it would be more but

2124
02:19:30,490 --> 02:19:34,480
essentially like all the headers of

2125
02:19:31,900 --> 02:19:36,580
packets and stuff they start counting

2126
02:19:34,480 --> 02:19:37,719
more than then than just the crypto

2127
02:19:36,580 --> 02:19:41,969
material that is in there and

2128
02:19:37,719 --> 02:19:45,039
computation is increased with with 75%

2129
02:19:41,969 --> 02:19:47,230
now other secure schemes of course you

2130
02:19:45,040 --> 02:19:48,670
don't have to use our modified scheme

2131
02:19:47,230 --> 02:19:50,830
because of the increased signature

2132
02:19:48,670 --> 02:19:52,750
length a bit of the point of using multi

2133
02:19:50,830 --> 02:19:54,311
signals of compressing things goes loss

2134
02:19:52,750 --> 02:19:57,040
because your individual signatures will

2135
02:19:54,311 --> 02:19:58,840
get longer other secure schemes are the

2136
02:19:57,040 --> 02:20:01,090
three round schemes that and that I

2137
02:19:58,840 --> 02:20:02,860
mentioned previously this is actually

2138
02:20:01,090 --> 02:20:05,230
the most likely fix for the Bitcoin

2139
02:20:02,860 --> 02:20:08,021
candidates that and that we talked about

2140
02:20:05,230 --> 02:20:10,300
previously and then there's of course

2141
02:20:08,021 --> 02:20:12,221
not in non interactive schemes from BLS

2142
02:20:10,300 --> 02:20:14,859
signatures pairings this is actually the

2143
02:20:12,221 --> 02:20:17,740
chosen fix for ram found omni ledger

2144
02:20:14,860 --> 02:20:19,570
some Ledger's based on the cosy

2145
02:20:17,740 --> 02:20:21,820
signature scheme and Harmy harmony and

2146
02:20:19,570 --> 02:20:26,410
other ledger that was using nor based

2147
02:20:21,820 --> 02:20:30,431
multi signatures so lessons learned of

2148
02:20:26,410 --> 02:20:33,101
of this whole story as someone who spent

2149
02:20:30,431 --> 02:20:34,540
most of his career in provable security

2150
02:20:33,101 --> 02:20:36,490
I would love that this was like just

2151
02:20:34,540 --> 02:20:38,170
approval security could have solved with

2152
02:20:36,490 --> 02:20:41,289
all this and everybody should do it and

2153
02:20:38,170 --> 02:20:43,420
don't look around when when you when you

2154
02:20:41,290 --> 02:20:45,400
see in a scheme that doesn't use it but

2155
02:20:43,420 --> 02:20:48,431
the problem is okay so cozy did not have

2156
02:20:45,400 --> 02:20:51,400
a security proof and and that is bad but

2157
02:20:48,431 --> 02:20:53,800
other schemes did so it's not quite such

2158
02:20:51,400 --> 02:20:56,529
a clean picture here so one could make

2159
02:20:53,800 --> 02:20:58,480
this a message about in verifying proofs

2160
02:20:56,530 --> 02:21:00,670
is very important and yes that is

2161
02:20:58,480 --> 02:21:03,010
important but then even when knowing

2162
02:21:00,670 --> 02:21:04,510
that some of these proofs had flaws for

2163
02:21:03,010 --> 02:21:06,521
some of the schemes it was easy to spot

2164
02:21:04,510 --> 02:21:08,891
some other schemes it's really not that

2165
02:21:06,521 --> 02:21:11,380
easy to spot so even reviewing security

2166
02:21:08,891 --> 02:21:13,990
proofs it's not that easy

2167
02:21:11,380 --> 02:21:15,820
we actually somewhat embarrassing

2168
02:21:13,990 --> 02:21:17,920
embarassingly in a previous version of

2169
02:21:15,820 --> 02:21:19,960
this paper had a different scheme as a

2170
02:21:17,920 --> 02:21:21,580
fix which actually also made a mistake

2171
02:21:19,960 --> 02:21:23,199
and I was spectacular reviewing by an

2172
02:21:21,580 --> 02:21:25,990
anonymous reviewer to whom we're very

2173
02:21:23,200 --> 02:21:28,360
grateful of spotting that flaw but it is

2174
02:21:25,990 --> 02:21:29,860
extremely subtle so what are are the

2175
02:21:28,360 --> 02:21:32,021
lessons that we learn here well proofs

2176
02:21:29,860 --> 02:21:34,091
are so low especially 4k

2177
02:21:32,021 --> 02:21:35,921
llamas that have rewinding arguments in

2178
02:21:34,091 --> 02:21:37,721
them they can get pretty damn subtle so

2179
02:21:35,921 --> 02:21:39,521
you have to be careful with those and

2180
02:21:37,721 --> 02:21:41,770
try to write out the proofs in a lot of

2181
02:21:39,521 --> 02:21:43,480
detail so you can get it right but but

2182
02:21:41,771 --> 02:21:45,700
in some way we're all were all just

2183
02:21:43,480 --> 02:21:47,591
humans so what we would actually like to

2184
02:21:45,700 --> 02:21:49,211
have is some some more tools support for

2185
02:21:47,591 --> 02:21:51,131
at least verifying these proofs maybe

2186
02:21:49,211 --> 02:21:52,660
even creating them but verifying these

2187
02:21:51,131 --> 02:21:55,061
proofs for their correctness with some

2188
02:21:52,660 --> 02:21:58,450
mechanical support would would actually

2189
02:21:55,061 --> 02:22:00,461
be be great one piece of advice is also

2190
02:21:58,450 --> 02:22:02,440
so this is this pre round of hashes that

2191
02:22:00,461 --> 02:22:04,119
wasn't a B and 0/6 scheme seemed pretty

2192
02:22:02,440 --> 02:22:06,400
useless and because I was an author of

2193
02:22:04,120 --> 02:22:08,051
that paper as well I remember that we

2194
02:22:06,400 --> 02:22:09,100
introduced that round just because we

2195
02:22:08,051 --> 02:22:11,199
couldn't see how we would otherwise

2196
02:22:09,101 --> 02:22:13,211
prove it secure so we just introduced it

2197
02:22:11,200 --> 02:22:15,790
just dropping that round because it

2198
02:22:13,211 --> 02:22:17,350
seems pretty useless is dangerous there

2199
02:22:15,790 --> 02:22:19,421
could be a tax hiding beneath the

2200
02:22:17,351 --> 02:22:21,280
surface so don't just drop things that

2201
02:22:19,421 --> 02:22:25,211
you don't see the immediate use of in a

2202
02:22:21,280 --> 02:22:26,471
cryptographic scheme and so yeah it's

2203
02:22:25,211 --> 02:22:28,660
not a clean picture for provable

2204
02:22:26,471 --> 02:22:30,730
security but it's it's not a perfect

2205
02:22:28,660 --> 02:22:33,789
tool it is the best tool that we have at

2206
02:22:30,730 --> 02:22:35,261
the moment so maybe approval security is

2207
02:22:33,790 --> 02:22:37,351
not going to save the world but the

2208
02:22:35,261 --> 02:22:38,560
world is definitely lost without it

2209
02:22:37,351 --> 02:22:42,530
thank you

2210
02:22:38,560 --> 02:22:42,529
[Applause]

2211
02:22:45,400 --> 02:22:50,260
great that was really cool so we have

2212
02:22:47,410 --> 02:22:57,460
time for questions must be some

2213
02:22:50,260 --> 02:22:59,320
questions on this it's what we have one

2214
02:22:57,460 --> 02:23:01,300
well we still have one one time for our

2215
02:22:59,320 --> 02:23:04,330
question should you have a sense of this

2216
02:23:01,300 --> 02:23:06,279
this new the the two round scheme that

2217
02:23:04,330 --> 02:23:09,730
you have it sounds like it's not the one

2218
02:23:06,280 --> 02:23:11,561
your comb and using because it's so

2219
02:23:09,730 --> 02:23:13,840
indeed for because of efficiency reasons

2220
02:23:11,561 --> 02:23:15,520
it will not be the one that for many

2221
02:23:13,840 --> 02:23:18,040
applications will be the one that will

2222
02:23:15,521 --> 02:23:20,380
be very useful and we see it mainly as a

2223
02:23:18,040 --> 02:23:22,090
proof of concept of like it is you have

2224
02:23:20,380 --> 02:23:23,230
it can be done it can be done maybe

2225
02:23:22,090 --> 02:23:24,640
there are applications where this

2226
02:23:23,230 --> 02:23:25,630
actually makes sense but I think in

2227
02:23:24,640 --> 02:23:27,010
applications where there's a lot of

2228
02:23:25,630 --> 02:23:28,630
single signers signatures

2229
02:23:27,010 --> 02:23:30,880
showing up then of course he added

2230
02:23:28,630 --> 02:23:33,220
signature length will not make mix it

2231
02:23:30,880 --> 02:23:35,500
also increases verification time exactly

2232
02:23:33,220 --> 02:23:36,939
also that why that's around probably

2233
02:23:35,500 --> 02:23:39,790
someone is gonna get used absolutely

2234
02:23:36,940 --> 02:23:43,490
awesome alright so with that blintz

2235
02:23:39,790 --> 02:23:46,160
think Greg again and once the next talk

2236
02:23:43,490 --> 02:23:49,140
[Music]

2237
02:23:46,160 --> 02:23:50,700
all right so with that we're gonna move

2238
02:23:49,140 --> 02:23:52,470
on to the next the last talk of the

2239
02:23:50,700 --> 02:23:54,800
conference so I'm very excited to

2240
02:23:52,470 --> 02:23:58,319
introduce Zuko who's gonna tell us about

2241
02:23:54,800 --> 02:24:00,210
an amazing deployment of very advanced

2242
02:23:58,319 --> 02:24:03,479
cryptography the system called

2243
02:24:00,210 --> 02:24:05,130
Z cache and looking forward to the talk

2244
02:24:03,479 --> 02:24:14,960
as soon as we get all the adapters

2245
02:24:05,130 --> 02:24:14,960
adapted good awesome alright all yours

2246
02:24:16,310 --> 02:24:21,630
well I don't know if that's working and

2247
02:24:18,420 --> 02:24:25,640
do I get a clicker or do I just hit the

2248
02:24:21,630 --> 02:24:31,979
arrow keys okay that'll work but so far

2249
02:24:25,640 --> 02:24:33,750
it's not working well that talk was

2250
02:24:31,979 --> 02:24:34,108
awesome this talk is going to be very

2251
02:24:33,750 --> 02:24:39,239
different

2252
02:24:34,109 --> 02:24:41,760
do I have 20 minutes I have 30 minutes

2253
02:24:39,239 --> 02:24:43,830
so I'm gonna take 20 I'm gonna aim for

2254
02:24:41,760 --> 02:24:47,489
20 because I want lots and lots of

2255
02:24:43,830 --> 02:24:49,439
questions okay although I didn't want to

2256
02:24:47,489 --> 02:24:53,029
show this slicing that's not true I do I

2257
02:24:49,439 --> 02:24:55,819
do in to slow this show the slides but

2258
02:24:53,029 --> 02:25:01,319
last talk thank you all for being here

2259
02:24:55,819 --> 02:25:07,439
my name is Zuko and this is about Z cash

2260
02:25:01,319 --> 02:25:08,880
which is one of those cyber coins so

2261
02:25:07,439 --> 02:25:10,950
yeah there are called crypto currencies

2262
02:25:08,880 --> 02:25:12,358
and when you say things more times per

2263
02:25:10,950 --> 02:25:13,319
day you have to shorten them and shorten

2264
02:25:12,359 --> 02:25:15,300
them so they started getting called

2265
02:25:13,319 --> 02:25:17,460
Kryptos so then there was a backlash

2266
02:25:15,300 --> 02:25:18,929
where people started you know wearing

2267
02:25:17,460 --> 02:25:21,028
shirts and carrying signs that said

2268
02:25:18,930 --> 02:25:22,680
crypto means cryptography so I've

2269
02:25:21,029 --> 02:25:29,580
decided to fix this by renaming them to

2270
02:25:22,680 --> 02:25:31,050
cyber coins yeah so this lock some you

2271
02:25:29,580 --> 02:25:32,609
very different from the last one because

2272
02:25:31,050 --> 02:25:35,160
I was asked to talk about government

2273
02:25:32,609 --> 02:25:37,200
regulation and so there's almost no

2274
02:25:35,160 --> 02:25:40,170
cryptography in my talk oh yeah I have

2275
02:25:37,200 --> 02:25:44,010
slides I want to talk about ancient

2276
02:25:40,170 --> 02:25:47,040
history morality key management love

2277
02:25:44,010 --> 02:25:50,100
notes and government regulation first of

2278
02:25:47,040 --> 02:25:52,050
all the reason why me and as far as I

2279
02:25:50,100 --> 02:25:54,510
can tell everyone else who's doing Z

2280
02:25:52,050 --> 02:25:56,550
cash is doing it is because we feel like

2281
02:25:54,510 --> 02:25:57,359
it's important for basic human rights

2282
02:25:56,550 --> 02:26:01,079
and

2283
02:25:57,359 --> 02:26:04,919
for protecting our society which seems

2284
02:26:01,079 --> 02:26:07,199
to be hurtling into a previously untried

2285
02:26:04,919 --> 02:26:09,720
dangerous situation in which you require

2286
02:26:07,199 --> 02:26:11,909
the continuous permission of some

2287
02:26:09,720 --> 02:26:14,159
centralized third party to communicate

2288
02:26:11,909 --> 02:26:17,279
and to participate in the economy and

2289
02:26:14,159 --> 02:26:22,470
that's dangerous and wrong and we're

2290
02:26:17,279 --> 02:26:27,810
trying to provide an alternative Z cash

2291
02:26:22,470 --> 02:26:29,310
came out of cryptography the whole idea

2292
02:26:27,810 --> 02:26:31,198
was originally invented by these

2293
02:26:29,310 --> 02:26:33,140
scientists at the bottom Christine and

2294
02:26:31,199 --> 02:26:36,119
Garmin are on TRO more Alessandra key

2295
02:26:33,140 --> 02:26:37,739
elements asan matt green ian meyers

2296
02:26:36,119 --> 02:26:43,470
Menards mirza many of whom were here at

2297
02:26:37,739 --> 02:26:44,189
this conference last year at RWC ian

2298
02:26:43,470 --> 02:26:45,958
gave a talk

2299
02:26:44,189 --> 02:26:48,239
ian myers gave a talk about the actual

2300
02:26:45,959 --> 02:26:50,489
cryptography of z cache so i hope you

2301
02:26:48,239 --> 02:26:58,890
saw that and if you didn't maybe you

2302
02:26:50,489 --> 02:27:00,628
should go look it up after this all

2303
02:26:58,890 --> 02:27:02,368
right very simply bitcoin is actually

2304
02:27:00,629 --> 02:27:04,919
just an excel spreadsheet it turns out

2305
02:27:02,369 --> 02:27:06,359
with some kind of magic layer that makes

2306
02:27:04,919 --> 02:27:08,039
it so everyone around the world is

2307
02:27:06,359 --> 02:27:09,359
looking at the same version of the excel

2308
02:27:08,039 --> 02:27:09,959
spreadsheet at the same time as each

2309
02:27:09,359 --> 02:27:12,810
other

2310
02:27:09,959 --> 02:27:14,789
and once you have that magic layer then

2311
02:27:12,810 --> 02:27:17,729
if you want to make money in it you just

2312
02:27:14,789 --> 02:27:20,669
put random identifiers x' and then

2313
02:27:17,729 --> 02:27:23,489
everyone who's maintaining the shared

2314
02:27:20,669 --> 02:27:25,350
global excel spreadsheet inspects

2315
02:27:23,489 --> 02:27:27,329
everyone else's transactions to make

2316
02:27:25,350 --> 02:27:30,300
sure that the integrity constraints are

2317
02:27:27,329 --> 02:27:32,010
met such as that there's if if if

2318
02:27:30,300 --> 02:27:33,448
somebody spent the money to one person

2319
02:27:32,010 --> 02:27:34,919
they can't also spend the money to a

2320
02:27:33,449 --> 02:27:37,560
second person or invent money out of

2321
02:27:34,919 --> 02:27:40,229
thin air or whatever the obvious problem

2322
02:27:37,560 --> 02:27:42,448
with this is that now if you use this

2323
02:27:40,229 --> 02:27:44,458
kind of system and you go buy coffee now

2324
02:27:42,449 --> 02:27:45,869
North Korean hackers know your net worth

2325
02:27:44,459 --> 02:27:47,819
and what you just did

2326
02:27:45,869 --> 02:27:51,060
and so does everyone else so it's a

2327
02:27:47,819 --> 02:27:55,528
total non-starter for commercial

2328
02:27:51,060 --> 02:27:59,278
security national infrastructure mass

2329
02:27:55,529 --> 02:28:02,489
market adoption and satoshi and health

2330
02:27:59,279 --> 02:28:03,930
any presumably kind of thought the same

2331
02:28:02,489 --> 02:28:08,100
way because they tried to fix it in

2332
02:28:03,930 --> 02:28:09,891
about in early 2009 but in early 2009

2333
02:28:08,100 --> 02:28:12,771
there was no known way

2334
02:28:09,891 --> 02:28:14,330
to fix it and the way that those

2335
02:28:12,771 --> 02:28:19,790
scientists came up with on that previous

2336
02:28:14,330 --> 02:28:24,080
slide in about 2013-2014 was to use ZK

2337
02:28:19,790 --> 02:28:25,521
snarks so instead of posting the clear

2338
02:28:24,080 --> 02:28:28,101
text of all your transactions to the

2339
02:28:25,521 --> 02:28:30,380
Excel spreadsheet this is very

2340
02:28:28,101 --> 02:28:32,650
oversimplified but the oversimplified

2341
02:28:30,380 --> 02:28:34,939
cryptography version is instead of

2342
02:28:32,650 --> 02:28:36,980
posting the clear text transactions you

2343
02:28:34,940 --> 02:28:39,891
post encrypted transactions in which the

2344
02:28:36,980 --> 02:28:41,960
random unique identifier of the sender

2345
02:28:39,891 --> 02:28:45,080
and that of the receiver and the amount

2346
02:28:41,960 --> 02:28:47,391
transferred are all hidden from the rest

2347
02:28:45,080 --> 02:28:49,130
of the users of the ledger but you have

2348
02:28:47,391 --> 02:28:51,681
a zero knowledge proof appended to each

2349
02:28:49,130 --> 02:28:53,270
one which satisfies all of the

2350
02:28:51,681 --> 02:28:55,011
maintainer x' of the system that this

2351
02:28:53,271 --> 02:29:03,471
encrypted transaction doesn't violate

2352
02:28:55,011 --> 02:29:06,170
any of the integrity constraints now now

2353
02:29:03,471 --> 02:29:07,730
we did something so that this is called

2354
02:29:06,170 --> 02:29:10,521
I was asked to talk about lessons

2355
02:29:07,730 --> 02:29:11,869
learned and so now I'm going to tell you

2356
02:29:10,521 --> 02:29:12,980
a whole bunch of details which could

2357
02:29:11,870 --> 02:29:14,540
have been different in an alternate

2358
02:29:12,980 --> 02:29:17,091
universe but this is what did happen and

2359
02:29:14,540 --> 02:29:19,250
so let's try to learn from that two

2360
02:29:17,091 --> 02:29:21,110
three four years ago when those

2361
02:29:19,250 --> 02:29:25,221
aforementioned scientists and I set out

2362
02:29:21,110 --> 02:29:28,040
to make this into a real-world product

2363
02:29:25,221 --> 02:29:31,460
for everyone to use we decided to

2364
02:29:28,040 --> 02:29:36,500
include backwards-compatible clear text

2365
02:29:31,460 --> 02:29:40,699
version clear text option and frankly

2366
02:29:36,500 --> 02:29:43,580
this was surely a go to market and

2367
02:29:40,700 --> 02:29:46,011
engineering hack to make it the reason

2368
02:29:43,580 --> 02:29:48,380
we did it was just to make it easy for

2369
02:29:46,011 --> 02:29:51,261
third parties to onboard z cache by

2370
02:29:48,380 --> 02:29:52,641
using the old-fashioned unencrypted

2371
02:29:51,261 --> 02:29:54,650
version that they were already familiar

2372
02:29:52,641 --> 02:29:58,160
with and that totally worked we've got

2373
02:29:54,650 --> 02:30:01,160
all kinds of wallets and exchanges and

2374
02:29:58,160 --> 02:30:03,200
third party services and products of all

2375
02:30:01,160 --> 02:30:05,511
kinds that use the cache now because

2376
02:30:03,200 --> 02:30:07,070
they can just use the clear text version

2377
02:30:05,511 --> 02:30:08,690
but now this leaves us with this

2378
02:30:07,070 --> 02:30:11,841
complication which is there are two

2379
02:30:08,690 --> 02:30:15,410
flavors of Z cache addresses which we

2380
02:30:11,841 --> 02:30:18,530
call transparent addresses and shielded

2381
02:30:15,410 --> 02:30:19,910
addresses and when you say something too

2382
02:30:18,530 --> 02:30:21,710
many times a day you have to shorten it

2383
02:30:19,910 --> 02:30:23,660
so we started calling them T adders and

2384
02:30:21,710 --> 02:30:23,949
Z adders and now we've started calling

2385
02:30:23,660 --> 02:30:30,521
them

2386
02:30:23,950 --> 02:30:33,580
and satyrs in our cyber coin now this is

2387
02:30:30,521 --> 02:30:37,181
what it actually looks like if you load

2388
02:30:33,580 --> 02:30:40,900
up any one of the many public blockchain

2389
02:30:37,181 --> 02:30:42,970
explorers on the web and ask them what's

2390
02:30:40,900 --> 02:30:45,070
the current in recent and historical

2391
02:30:42,970 --> 02:30:46,930
state of the Z cache blockchain you can

2392
02:30:45,070 --> 02:30:48,730
find something that looks like this

2393
02:30:46,931 --> 02:30:51,130
where some of the transactions have a

2394
02:30:48,730 --> 02:30:54,039
tatter from the sender and the receiver

2395
02:30:51,130 --> 02:30:56,199
and you can see how much they sent if

2396
02:30:54,040 --> 02:30:57,851
there are multiple such transactions you

2397
02:30:56,200 --> 02:30:59,530
can start linking them together and

2398
02:30:57,851 --> 02:31:01,570
realizing that there's a pattern of

2399
02:30:59,530 --> 02:31:03,490
money going from one to the other from

2400
02:31:01,570 --> 02:31:05,949
one to many different recipients and so

2401
02:31:03,490 --> 02:31:09,030
on others of the transactions have

2402
02:31:05,950 --> 02:31:11,260
satyrs and those ones you can't see

2403
02:31:09,030 --> 02:31:15,760
anything that we were able to encrypt

2404
02:31:11,260 --> 02:31:17,710
with those starting keys we did and then

2405
02:31:15,760 --> 02:31:20,050
there are some transactions that don't

2406
02:31:17,710 --> 02:31:21,520
reveal anything except for the timestamp

2407
02:31:20,050 --> 02:31:26,380
because all you know is that some

2408
02:31:21,521 --> 02:31:27,610
unknown shielded addresses since some

2409
02:31:26,380 --> 02:31:29,529
unknown amount to some other unknown

2410
02:31:27,610 --> 02:31:34,720
shoulders dress that's what it looks

2411
02:31:29,530 --> 02:31:36,431
like today now this that was the

2412
02:31:34,720 --> 02:31:38,561
oversimplified cryptography this is the

2413
02:31:36,431 --> 02:31:41,320
oversimplified international cyber coins

2414
02:31:38,561 --> 02:31:44,080
regulation map there's basically three

2415
02:31:41,320 --> 02:31:48,760
important things so far all of the gray

2416
02:31:44,080 --> 02:31:50,891
area is confusion and dismay because the

2417
02:31:48,760 --> 02:31:53,170
laws are written making assumptions

2418
02:31:50,891 --> 02:31:55,300
about what money is and how things work

2419
02:31:53,170 --> 02:31:58,450
which assumptions are no longer true and

2420
02:31:55,300 --> 02:32:01,811
no one knows how the laws would apply if

2421
02:31:58,450 --> 02:32:02,980
you were using cyber coins and so people

2422
02:32:01,811 --> 02:32:05,110
are using them anyway in all those

2423
02:32:02,980 --> 02:32:07,510
countries but but no one knows what the

2424
02:32:05,110 --> 02:32:09,970
laws are in India in China they've

2425
02:32:07,510 --> 02:32:11,771
effectively pushed out exchanges so

2426
02:32:09,970 --> 02:32:15,730
exchange those are just cyber coin banks

2427
02:32:11,771 --> 02:32:19,150
right those are effectively banned in

2428
02:32:15,730 --> 02:32:23,680
India and China and then in the United

2429
02:32:19,150 --> 02:32:26,080
States the United States the regulatory

2430
02:32:23,681 --> 02:32:29,880
regime is extremely complicated because

2431
02:32:26,080 --> 02:32:32,561
they're literally an uncounted number of

2432
02:32:29,880 --> 02:32:34,029
agencies that might or might not have

2433
02:32:32,561 --> 02:32:36,670
jurisdiction over different parts of

2434
02:32:34,030 --> 02:32:38,200
regulation including state and federal

2435
02:32:36,670 --> 02:32:40,270
but

2436
02:32:38,200 --> 02:32:41,500
but despite that dave at the united

2437
02:32:40,270 --> 02:32:43,660
states has actually made pretty good

2438
02:32:41,500 --> 02:32:46,330
progress about clarifying how the

2439
02:32:43,660 --> 02:32:50,050
existing laws should be interpreted to

2440
02:32:46,330 --> 02:32:51,760
apply to cyber coins so one of the

2441
02:32:50,050 --> 02:32:54,460
interesting things that happened is this

2442
02:32:51,760 --> 02:32:56,260
logo stamped on this map as the New York

2443
02:32:54,460 --> 02:33:00,640
Department of Financial Services and

2444
02:32:56,260 --> 02:33:02,620
they they did something that was pretty

2445
02:33:00,640 --> 02:33:07,000
remarkable several years ago so a

2446
02:33:02,620 --> 02:33:08,859
typical regulatory rule would say here's

2447
02:33:07,000 --> 02:33:11,080
a bunch of rules that you have to abide

2448
02:33:08,859 --> 02:33:11,439
by and if you violate these rules you're

2449
02:33:11,080 --> 02:33:14,020
in trouble

2450
02:33:11,439 --> 02:33:15,760
and then another typical thing is we're

2451
02:33:14,020 --> 02:33:17,290
gonna be watching you may be it coming

2452
02:33:15,760 --> 02:33:19,149
and inspecting and testing or whatever

2453
02:33:17,290 --> 02:33:20,380
and if we've decided that you're doing

2454
02:33:19,149 --> 02:33:22,149
something wrong you're gonna hear about

2455
02:33:20,380 --> 02:33:24,580
it and you're gonna be forced to change

2456
02:33:22,149 --> 02:33:25,990
or you might even be punished so those

2457
02:33:24,580 --> 02:33:27,729
are those are standard like a set of

2458
02:33:25,990 --> 02:33:29,949
rules in advance or you're gonna be

2459
02:33:27,729 --> 02:33:30,910
supervised it's another way to do it the

2460
02:33:29,950 --> 02:33:33,490
New York Department of Financial

2461
02:33:30,910 --> 02:33:35,590
Services went for yet a third idea which

2462
02:33:33,490 --> 02:33:38,770
is anything you want to do you have to

2463
02:33:35,590 --> 02:33:42,670
come ask us for permission first it was

2464
02:33:38,770 --> 02:33:44,710
a very forward-leaning regulator and so

2465
02:33:42,670 --> 02:33:46,779
a couple of cyber coin companies said

2466
02:33:44,710 --> 02:33:48,759
well find then I'm just not gonna let

2467
02:33:46,779 --> 02:33:49,930
any New Yorkers use my product but

2468
02:33:48,760 --> 02:33:53,350
that's a question of how you achieve

2469
02:33:49,930 --> 02:33:54,880
that but almost all the other cyber coin

2470
02:33:53,350 --> 02:34:01,060
companies lined up and started asking

2471
02:33:54,880 --> 02:34:03,369
for permission to do stuff so the

2472
02:34:01,060 --> 02:34:04,539
companies in question are what I call

2473
02:34:03,370 --> 02:34:06,609
exchange it what everyone calls

2474
02:34:04,540 --> 02:34:10,740
exchanges which are financial

2475
02:34:06,609 --> 02:34:12,760
intermediaries are just like banks and

2476
02:34:10,740 --> 02:34:22,330
they're the ones that need permission to

2477
02:34:12,760 --> 02:34:24,399
do stuff so I and and my my team at the

2478
02:34:22,330 --> 02:34:26,850
at the company I didn't explain this but

2479
02:34:24,399 --> 02:34:29,769
in addition to being a scientific

2480
02:34:26,850 --> 02:34:31,960
discovery and in addition to being an

2481
02:34:29,770 --> 02:34:34,240
open-source decentralized network there

2482
02:34:31,960 --> 02:34:38,919
is also a for-profit company that I'm

2483
02:34:34,240 --> 02:34:40,779
the CEO of and I and my team from the

2484
02:34:38,920 --> 02:34:43,300
company flew to New York a few times and

2485
02:34:40,779 --> 02:34:45,189
met with these regulators to try to

2486
02:34:43,300 --> 02:34:48,009
persuade them to give permission to the

2487
02:34:45,189 --> 02:34:49,420
exchanges who are not me but I wanted

2488
02:34:48,010 --> 02:34:51,370
them to give permission to the exchanges

2489
02:34:49,420 --> 02:34:53,140
and so I offer to come

2490
02:34:51,370 --> 02:34:55,870
give them like free tutorials in

2491
02:34:53,140 --> 02:34:57,250
cryptography and like the slide you've

2492
02:34:55,870 --> 02:35:01,290
been seeing are basically the same

2493
02:34:57,250 --> 02:35:04,450
things I was showing them and the the

2494
02:35:01,290 --> 02:35:06,070
the arguments I put forth were first of

2495
02:35:04,450 --> 02:35:07,899
all just here's how it works because

2496
02:35:06,070 --> 02:35:14,289
knowledge is the best antidote to fear

2497
02:35:07,899 --> 02:35:16,000
and second of all this is compatible

2498
02:35:14,290 --> 02:35:18,370
with the way we do regulation in the

2499
02:35:16,000 --> 02:35:20,260
United States so financial regulation in

2500
02:35:18,370 --> 02:35:22,540
the United States is all focused on the

2501
02:35:20,260 --> 02:35:24,550
financial intermediaries like banks

2502
02:35:22,540 --> 02:35:26,310
there's a whole bunch of different rules

2503
02:35:24,550 --> 02:35:29,410
and they all have three-letter acronyms

2504
02:35:26,310 --> 02:35:31,840
about how you have to identify your

2505
02:35:29,410 --> 02:35:33,550
customer and keep copies of scans of

2506
02:35:31,840 --> 02:35:35,649
their driver's license and you have to

2507
02:35:33,550 --> 02:35:37,960
report certain kinds of behaviors to

2508
02:35:35,649 --> 02:35:39,519
other people and there's a whole suite

2509
02:35:37,960 --> 02:35:40,509
of regulations for consumer protection

2510
02:35:39,520 --> 02:35:44,170
and a whole different suite of

2511
02:35:40,510 --> 02:35:48,189
regulations for financial systems

2512
02:35:44,170 --> 02:35:50,109
stability and anti-terrorism and drug

2513
02:35:48,189 --> 02:35:52,990
money track tracking and all that but

2514
02:35:50,109 --> 02:35:55,990
all of those are rules for the financial

2515
02:35:52,990 --> 02:35:58,600
intermediary to take like if you if you

2516
02:35:55,990 --> 02:35:59,979
get some cash from an ATM and you go buy

2517
02:35:58,600 --> 02:36:02,770
something none of those rules apply to

2518
02:35:59,979 --> 02:36:07,720
you as an individual they all apply to

2519
02:36:02,770 --> 02:36:11,170
the bank so we said this was the first

2520
02:36:07,720 --> 02:36:16,539
the first argument are the this argument

2521
02:36:11,170 --> 02:36:19,859
was the exchanges can abide by all the

2522
02:36:16,540 --> 02:36:23,290
same rules while they're using this

2523
02:36:19,859 --> 02:36:29,080
encrypted blockchain as the as the the

2524
02:36:23,290 --> 02:36:33,010
transport layer and the third argument

2525
02:36:29,080 --> 02:36:38,590
we made was a historical analogy which

2526
02:36:33,010 --> 02:36:41,320
is that I was there in 1990s when HTTPS

2527
02:36:38,590 --> 02:36:43,899
was being invented and it was new and

2528
02:36:41,320 --> 02:36:46,359
strange and to some people it was scary

2529
02:36:43,899 --> 02:36:48,070
so the young people in this room might

2530
02:36:46,359 --> 02:36:50,320
think I'm exaggerating but the old

2531
02:36:48,070 --> 02:36:53,529
timers in this room many of whom were a

2532
02:36:50,320 --> 02:36:55,869
part of this struggle know this isn't an

2533
02:36:53,530 --> 02:36:59,530
exaggeration there it really was the

2534
02:36:55,870 --> 02:37:01,060
case that a lot of sincere intelligent

2535
02:36:59,530 --> 02:37:04,430
people thought that the development of

2536
02:37:01,060 --> 02:37:06,470
HTTPS would undermine society and allow

2537
02:37:04,430 --> 02:37:09,380
crime to run rampant and there was a

2538
02:37:06,470 --> 02:37:12,080
small but powerful faction in the United

2539
02:37:09,380 --> 02:37:15,979
States government that tried to prevent

2540
02:37:12,080 --> 02:37:18,770
it with a lot of bad policy and bad

2541
02:37:15,979 --> 02:37:24,289
technology and dirty tricks and so on

2542
02:37:18,770 --> 02:37:26,120
and what I emphasize when talking when I

2543
02:37:24,290 --> 02:37:28,340
generally emphasize when talking to

2544
02:37:26,120 --> 02:37:31,100
regulators like this is and then look

2545
02:37:28,340 --> 02:37:32,960
what happened they delayed progress for

2546
02:37:31,100 --> 02:37:34,399
a long time they almost managed to drive

2547
02:37:32,960 --> 02:37:39,108
Silicon Valley into a different country

2548
02:37:34,399 --> 02:37:40,760
and but then they failed and the world

2549
02:37:39,109 --> 02:37:42,770
wide web got encryption the rest of the

2550
02:37:40,760 --> 02:37:45,680
internet got encryption eventually and

2551
02:37:42,770 --> 02:37:47,779
now look those same government agencies

2552
02:37:45,680 --> 02:37:49,609
that tried to prevent it now require it

2553
02:37:47,779 --> 02:37:52,580
right they require it for their own

2554
02:37:49,609 --> 02:37:55,069
protection and they require companies to

2555
02:37:52,580 --> 02:37:59,420
use it for the protection of their users

2556
02:37:55,069 --> 02:38:04,970
and fourthly

2557
02:37:59,420 --> 02:38:07,819
I said to them we have a lot of shared

2558
02:38:04,970 --> 02:38:12,010
values we want a safe society we want

2559
02:38:07,819 --> 02:38:14,720
low crime we want democracy and

2560
02:38:12,010 --> 02:38:19,330
encryption is just part of the fabric of

2561
02:38:14,720 --> 02:38:24,130
an open safe society it's not dangerous

2562
02:38:19,330 --> 02:38:28,010
so much to my surprise they then

2563
02:38:24,130 --> 02:38:30,979
announced that Z cache including the

2564
02:38:28,010 --> 02:38:34,220
encrypted transactions are now one of

2565
02:38:30,979 --> 02:38:36,849
the half a dozen coins that you're

2566
02:38:34,220 --> 02:38:39,890
allowed to use for New Yorkers

2567
02:38:36,850 --> 02:38:44,270
so that was an amazing success in

2568
02:38:39,890 --> 02:38:50,090
regulation in my opinion now to explain

2569
02:38:44,270 --> 02:38:50,720
oh good I'm only like 13 minutes and

2570
02:38:50,090 --> 02:38:51,890
this is great

2571
02:38:50,720 --> 02:39:00,500
you better be storing up a lot of

2572
02:38:51,890 --> 02:39:02,180
questions one consequence of that is

2573
02:39:00,500 --> 02:39:04,160
this is a map of all those exchanges

2574
02:39:02,180 --> 02:39:06,529
that support C cache around the world

2575
02:39:04,160 --> 02:39:08,270
and one consequence of that is that Jim

2576
02:39:06,529 --> 02:39:11,080
and I which is located in New York and

2577
02:39:08,270 --> 02:39:15,170
is widely considered to be the most

2578
02:39:11,080 --> 02:39:18,050
regulatory upstanding of exchanges and

2579
02:39:15,170 --> 02:39:19,930
coin based in San Francisco which is by

2580
02:39:18,050 --> 02:39:24,039
far the biggest and most influential

2581
02:39:19,930 --> 02:39:28,330
cyber coin exchange in the u.s. now

2582
02:39:24,040 --> 02:39:30,859
provides e cache services to their users

2583
02:39:28,330 --> 02:39:34,550
okay now I'm going to go one layer down

2584
02:39:30,859 --> 02:39:36,080
into the technology which is all about

2585
02:39:34,550 --> 02:39:37,369
key management so this is one of the

2586
02:39:36,080 --> 02:39:41,420
things that I had to explain to the

2587
02:39:37,370 --> 02:39:43,279
regulators there's this thing called

2588
02:39:41,420 --> 02:39:44,750
viewing keys and as cryptographers

2589
02:39:43,279 --> 02:39:48,890
viewing keys are very simple because

2590
02:39:44,750 --> 02:39:51,260
viewing keys are decryption keys there's

2591
02:39:48,890 --> 02:39:53,420
a the way the Z cache is structured you

2592
02:39:51,260 --> 02:39:57,080
can share a key which will allow someone

2593
02:39:53,420 --> 02:39:58,899
to decrypt that some subset of the

2594
02:39:57,080 --> 02:40:03,920
blockchain but not to spend the money

2595
02:39:58,899 --> 02:40:08,090
makes sense and in Z cache a viewing key

2596
02:40:03,920 --> 02:40:12,649
is always and only available to the

2597
02:40:08,090 --> 02:40:16,640
parties to the transaction that's my

2598
02:40:12,649 --> 02:40:19,760
number one lesson learned from this

2599
02:40:16,640 --> 02:40:24,080
story so far the first two years when we

2600
02:40:19,760 --> 02:40:25,699
set out it was widely believed that you

2601
02:40:24,080 --> 02:40:28,789
would have to either build in some kind

2602
02:40:25,699 --> 02:40:30,920
of backdoor or have weak cryptography or

2603
02:40:28,790 --> 02:40:34,010
just be in the clear or something if you

2604
02:40:30,920 --> 02:40:35,569
wanted to be accepted by governments and

2605
02:40:34,010 --> 02:40:37,640
be integrated into the mainstream

2606
02:40:35,569 --> 02:40:39,439
financial system and that's the main

2607
02:40:37,640 --> 02:40:42,260
lesson learned so far is we didn't do

2608
02:40:39,439 --> 02:40:44,060
that we made the strongest cryptographic

2609
02:40:42,260 --> 02:40:47,630
structure we could think of to protect

2610
02:40:44,060 --> 02:40:50,810
the users and then we just argued for

2611
02:40:47,630 --> 02:40:53,179
that and pitched it as a good idea and

2612
02:40:50,810 --> 02:40:55,819
compatible with the law and that works

2613
02:40:53,180 --> 02:40:58,489
so that disproved so far for the first

2614
02:40:55,819 --> 02:41:01,250
two years that disprove this widely held

2615
02:40:58,489 --> 02:41:06,529
belief that government and cryptography

2616
02:41:01,250 --> 02:41:08,390
are incompatible so the important fact

2617
02:41:06,529 --> 02:41:09,141
why I'm emphasizing that is that viewing

2618
02:41:08,390 --> 02:41:11,359
keys are

2619
02:41:09,141 --> 02:41:13,190
not a backdoor they are just the keys

2620
02:41:11,360 --> 02:41:16,780
which you have to have in order to see

2621
02:41:13,190 --> 02:41:16,780
your own transactions in the blockchain

2622
02:41:16,811 --> 02:41:23,931
so Z cache combines the immutable of

2623
02:41:21,261 --> 02:41:26,001
Hinda only blockchain properties with

2624
02:41:23,931 --> 02:41:28,431
the encryption properties and the

2625
02:41:26,001 --> 02:41:30,440
encryption properties are third parties

2626
02:41:28,431 --> 02:41:34,521
unauthorized third parties can't see it

2627
02:41:30,440 --> 02:41:36,110
and you can delegate your decryption key

2628
02:41:34,521 --> 02:41:38,061
to someone and if you do they'll be able

2629
02:41:36,110 --> 02:41:45,761
to see it that's just a consequence of

2630
02:41:38,061 --> 02:41:50,480
math so those those eyeglasses are on Z

2631
02:41:45,761 --> 02:41:52,641
sbz there Z SBC's magic eyeglasses when

2632
02:41:50,480 --> 02:41:54,949
he looks through them he can see his

2633
02:41:52,641 --> 02:41:57,081
transaction in the blockchain but nobody

2634
02:41:54,950 --> 02:41:59,480
else's he can see that somebody sent him

2635
02:41:57,081 --> 02:42:01,940
and that recipient is the SBC there

2636
02:41:59,480 --> 02:42:04,609
somebody sent him point one for Zack

2637
02:42:01,940 --> 02:42:07,400
which is much less than 13 bitcoins and

2638
02:42:04,610 --> 02:42:10,041
enriched in the there's an encrypted

2639
02:42:07,400 --> 02:42:15,261
memo field and all the all the encrypted

2640
02:42:10,041 --> 02:42:17,331
Z cash transactions where you can put

2641
02:42:15,261 --> 02:42:18,521
you know whatever your invoice number or

2642
02:42:17,331 --> 02:42:24,320
whatever you need

2643
02:42:18,521 --> 02:42:25,761
now if Z sbz lends his eyeglasses to

2644
02:42:24,320 --> 02:42:27,410
someone else they can see his

2645
02:42:25,761 --> 02:42:30,621
transaction in the blockchain but no one

2646
02:42:27,410 --> 02:42:36,371
else's right and here's someone else's

2647
02:42:30,621 --> 02:42:36,371
transactions with different eyeglasses

2648
02:42:38,621 --> 02:42:43,189
and one of those transactions is a very

2649
02:42:41,480 --> 02:42:46,971
small number of Zek and it says I love

2650
02:42:43,190 --> 02:42:48,200
you because just like the the nuclear

2651
02:42:46,971 --> 02:42:50,421
bunkers under the mountains in

2652
02:42:48,200 --> 02:42:52,070
Switzerland being a real thing encrypted

2653
02:42:50,421 --> 02:42:55,881
love notes in the blockchain or a real

2654
02:42:52,070 --> 02:42:59,391
thing two years ago just after Z Cash

2655
02:42:55,881 --> 02:43:01,371
launched a young lady I know said that

2656
02:42:59,391 --> 02:43:04,940
she received a very small amount of Z

2657
02:43:01,371 --> 02:43:08,359
cash and in the memo field there was a

2658
02:43:04,940 --> 02:43:11,511
link to IP FS which is a decentralized

2659
02:43:08,360 --> 02:43:15,650
data storage thing and so when she

2660
02:43:11,511 --> 02:43:19,221
pasted the link or the hash into ipfs it

2661
02:43:15,650 --> 02:43:20,511
showed her tickets to a an overseas

2662
02:43:19,221 --> 02:43:21,980
event that she and her boyfriend had

2663
02:43:20,511 --> 02:43:22,790
been talking about going to so it was an

2664
02:43:21,980 --> 02:43:25,699
encrypted love

2665
02:43:22,790 --> 02:43:27,380
in the blockchain and I'm just taking

2666
02:43:25,700 --> 02:43:29,779
her word for that because since I was

2667
02:43:27,380 --> 02:43:31,819
not the center recipient I it's

2668
02:43:29,779 --> 02:43:33,140
invisible to me but it's in this

2669
02:43:31,819 --> 02:43:34,369
immutable it's kind of like carving your

2670
02:43:33,140 --> 02:43:36,619
initials in a tree because it's

2671
02:43:34,370 --> 02:43:38,090
long-term thing so you can't get it out

2672
02:43:36,620 --> 02:43:39,800
of the blockchain anymore but it's

2673
02:43:38,090 --> 02:43:42,800
private it's only between the two of you

2674
02:43:39,800 --> 02:43:44,509
and I've heard about more than one of

2675
02:43:42,800 --> 02:43:48,199
those actually so encrypted love notes

2676
02:43:44,510 --> 02:43:55,640
in the blockchain or an actual thing so

2677
02:43:48,200 --> 02:43:57,950
this is this is pretty much I wanted to

2678
02:43:55,640 --> 02:43:59,689
focus on like backward-looking empirical

2679
02:43:57,950 --> 02:44:01,550
factual things to learn from as much as

2680
02:43:59,689 --> 02:44:03,680
possible I think we're to the transition

2681
02:44:01,550 --> 02:44:06,800
point where I tell you sort of my hopes

2682
02:44:03,680 --> 02:44:12,950
and dreams and fears for the future this

2683
02:44:06,800 --> 02:44:15,380
is as far as we've gotten the cash

2684
02:44:12,950 --> 02:44:17,899
exists and out there it's used in a lot

2685
02:44:15,380 --> 02:44:22,810
of these exchanges and it currently has

2686
02:44:17,899 --> 02:44:22,810
its on the white list in New York

2687
02:44:23,920 --> 02:44:40,580
however yeah again there's one oh the

2688
02:44:35,120 --> 02:44:46,310
sender so the recipient of the I love

2689
02:44:40,580 --> 02:44:48,460
you is Z SSB and in this slide we're

2690
02:44:46,310 --> 02:44:51,649
looking with Z SSB cyclases

2691
02:44:48,460 --> 02:44:55,608
in the previous slide we're looking with

2692
02:44:51,649 --> 02:44:57,858
z SW fours eyeglasses z SW 4 is the

2693
02:44:55,609 --> 02:44:59,779
sender so when you when you use the view

2694
02:44:57,859 --> 02:45:01,160
key you can tell all the things that you

2695
02:44:59,779 --> 02:45:04,370
sent and all the things that you

2696
02:45:01,160 --> 02:45:05,660
received but you can't see the identity

2697
02:45:04,370 --> 02:45:08,120
of the sender of the things that you

2698
02:45:05,660 --> 02:45:11,840
received unless they choose to reveal

2699
02:45:08,120 --> 02:45:15,109
that to you because of course keys are

2700
02:45:11,840 --> 02:45:16,850
you can selectively disclose keys to

2701
02:45:15,109 --> 02:45:17,840
specific people so if you want if you

2702
02:45:16,850 --> 02:45:19,670
want someone to see you that you're the

2703
02:45:17,840 --> 02:45:22,069
sender you can prove it to them by

2704
02:45:19,670 --> 02:45:23,180
revealing your view key which doesn't

2705
02:45:22,069 --> 02:45:27,490
give them the ability to spend your

2706
02:45:23,180 --> 02:45:30,310
money okay

2707
02:45:27,490 --> 02:45:32,680
so frankly I'm very proud of this I

2708
02:45:30,310 --> 02:45:35,320
think we did very well on multiple

2709
02:45:32,680 --> 02:45:38,080
levels so far but are you all aware of

2710
02:45:35,320 --> 02:45:41,229
how there's a new law in Australia that

2711
02:45:38,080 --> 02:45:43,060
any software that is provided to

2712
02:45:41,229 --> 02:45:45,760
Australians has to come with a back door

2713
02:45:43,060 --> 02:45:49,390
for the Australian government any

2714
02:45:45,760 --> 02:45:52,960
software made anywhere on the planet so

2715
02:45:49,390 --> 02:45:56,830
I'm not sure that progress can't be

2716
02:45:52,960 --> 02:46:01,060
rolled back and also it needs to be

2717
02:45:56,830 --> 02:46:02,530
rolled forward more so here's the pitch

2718
02:46:01,060 --> 02:46:03,670
that I'm now this is now we're shifting

2719
02:46:02,530 --> 02:46:05,050
into the forward-looking thing now I'm

2720
02:46:03,670 --> 02:46:08,950
going around to a bunch of governments

2721
02:46:05,050 --> 02:46:11,410
and I'm arguing for them I'm arguing to

2722
02:46:08,950 --> 02:46:13,750
them that they need to require strong

2723
02:46:11,410 --> 02:46:16,750
encryption in their cyber coins from now

2724
02:46:13,750 --> 02:46:19,390
on here's why it's because once you

2725
02:46:16,750 --> 02:46:21,940
understand their technology then you

2726
02:46:19,390 --> 02:46:23,019
think what if the citizens of my current

2727
02:46:21,940 --> 02:46:25,570
are you you're the government of

2728
02:46:23,020 --> 02:46:28,660
Singapore what if the citizens of

2729
02:46:25,570 --> 02:46:30,039
Singapore are using cyber coins most of

2730
02:46:28,660 --> 02:46:32,770
them almost all of them were gonna use

2731
02:46:30,040 --> 02:46:34,990
it by logging on to an exchange just

2732
02:46:32,770 --> 02:46:39,460
like most people prefer banks over cash

2733
02:46:34,990 --> 02:46:41,590
that's for most things well if you're

2734
02:46:39,460 --> 02:46:44,740
using a purely clear-text cyber coin

2735
02:46:41,590 --> 02:46:46,030
like Bitcoin then you the government of

2736
02:46:44,740 --> 02:46:49,840
Singapore will be able to tell what the

2737
02:46:46,030 --> 02:46:51,729
Singaporeans are doing and also the

2738
02:46:49,840 --> 02:46:52,990
Government of Japan and Russia will also

2739
02:46:51,729 --> 02:46:54,760
be able to tell what the Singaporeans

2740
02:46:52,990 --> 02:46:56,170
are doing and also everyone else on the

2741
02:46:54,760 --> 02:47:00,490
whole internet will be able to tell

2742
02:46:56,170 --> 02:47:03,610
everything about it what if instead they

2743
02:47:00,490 --> 02:47:06,340
log on to an exchange in Japan that uses

2744
02:47:03,610 --> 02:47:08,740
Z cash they uses adders specifically

2745
02:47:06,340 --> 02:47:13,500
let's forget all about tatters to

2746
02:47:08,740 --> 02:47:15,550
transparent addresses in that case

2747
02:47:13,500 --> 02:47:17,710
you're not going to be able to see

2748
02:47:15,550 --> 02:47:19,840
anymore what the Singaporeans are doing

2749
02:47:17,710 --> 02:47:22,869
when they log on over HTTPS to the

2750
02:47:19,840 --> 02:47:24,640
Japanese exchange and initiate encrypted

2751
02:47:22,870 --> 02:47:28,180
transactions in the Z cash blockchain

2752
02:47:24,640 --> 02:47:29,740
all of that is out of your view but the

2753
02:47:28,180 --> 02:47:31,240
Japanese regulators in law enforcement

2754
02:47:29,740 --> 02:47:32,820
in government will be able to see what

2755
02:47:31,240 --> 02:47:34,869
the Singaporeans are doing no problem

2756
02:47:32,820 --> 02:47:37,029
but fortunately the rest of the world

2757
02:47:34,870 --> 02:47:39,670
won't what if instead there's an

2758
02:47:37,030 --> 02:47:41,200
exchange located in Singapore and the

2759
02:47:39,670 --> 02:47:43,030
Singaporeans log on to that

2760
02:47:41,200 --> 02:47:46,150
which empirically people prefer to do

2761
02:47:43,030 --> 02:47:49,840
they prefer to use local financial

2762
02:47:46,150 --> 02:47:51,220
institutions in that case you the

2763
02:47:49,840 --> 02:47:53,800
government of Singapore will know what

2764
02:47:51,220 --> 02:47:56,590
the Singaporeans are doing the

2765
02:47:53,800 --> 02:47:59,830
government of Russia and Japan won't and

2766
02:47:56,590 --> 02:48:03,910
all of the random hackers and griefers

2767
02:47:59,830 --> 02:48:06,100
on the net won't so now a government of

2768
02:48:03,910 --> 02:48:16,390
Singapore think through which of these

2769
02:48:06,100 --> 02:48:17,380
rows you most like that's my next

2770
02:48:16,390 --> 02:48:21,490
argument and I don't know if this is

2771
02:48:17,380 --> 02:48:28,000
gonna work and like I say I don't know

2772
02:48:21,490 --> 02:48:31,270
if how far we've gotten is gonna if if

2773
02:48:28,000 --> 02:48:34,150
the tides not starting to roll back but

2774
02:48:31,270 --> 02:48:38,020
it doesn't matter necessarily to us in

2775
02:48:34,150 --> 02:48:40,240
one sense because we're doing this

2776
02:48:38,020 --> 02:48:42,729
because we think it's fundamentally

2777
02:48:40,240 --> 02:48:45,189
necessary for human rights what we just

2778
02:48:42,729 --> 02:48:47,830
just the right thing to do and it's

2779
02:48:45,189 --> 02:48:51,370
fundamentally dangerous to allow

2780
02:48:47,830 --> 02:48:54,280
anything else in our societies and so

2781
02:48:51,370 --> 02:48:56,710
whichever way that political struggle

2782
02:48:54,280 --> 02:49:00,640
goes we're gonna keep going with what we

2783
02:48:56,710 --> 02:49:03,188
think is right and it's a very open

2784
02:49:00,640 --> 02:49:04,449
systems e-cash and mini but not all of

2785
02:49:03,189 --> 02:49:06,960
the other cyber coins as we heard

2786
02:49:04,450 --> 02:49:10,360
earlier are very open systems where

2787
02:49:06,960 --> 02:49:13,449
everyone can understand see all the

2788
02:49:10,360 --> 02:49:17,290
pieces and can contribute and you're all

2789
02:49:13,450 --> 02:49:20,950
invited help the good guys one last time

2790
02:49:17,290 --> 02:49:23,890
around thanks in part to some risks and

2791
02:49:20,950 --> 02:49:27,910
some creativity in some struggle from

2792
02:49:23,890 --> 02:49:33,890
many people who are in this room but the

2793
02:49:27,910 --> 02:49:35,630
victory of good is never complete Thanks

2794
02:49:33,890 --> 02:49:38,769
[Applause]

2795
02:49:35,630 --> 02:49:38,769
[Music]

2796
02:49:39,290 --> 02:49:43,560
so thank you for doing all this work

2797
02:49:41,880 --> 02:49:44,789
it's really quite remarkable for me it's

2798
02:49:43,560 --> 02:49:47,070
also amazing to see this wonderful

2799
02:49:44,790 --> 02:49:49,140
crypto technology being put to good use

2800
02:49:47,070 --> 02:49:51,990
thank you yes so we have time for

2801
02:49:49,140 --> 02:49:54,119
questions I see actually I'm gonna take

2802
02:49:51,990 --> 02:49:55,439
the chairs prerogative and to ask the

2803
02:49:54,120 --> 02:49:59,430
first question

2804
02:49:55,439 --> 02:50:01,590
so could you there are other something

2805
02:49:59,430 --> 02:50:04,859
called the cyber coins we're trying to

2806
02:50:01,590 --> 02:50:07,800
provide privacy Oh er Oh - could maybe

2807
02:50:04,859 --> 02:50:10,080
even grin because you may be compared a

2808
02:50:07,800 --> 02:50:11,640
little bit the security and privacy oh I

2809
02:50:10,080 --> 02:50:13,820
couldn't maybe barrel you real quick

2810
02:50:11,640 --> 02:50:16,920
that's a really deep question basically

2811
02:50:13,820 --> 02:50:20,580
the approach in the zero cash design is

2812
02:50:16,920 --> 02:50:22,260
by far the best and for a very

2813
02:50:20,580 --> 02:50:24,780
straightforward reason which is that

2814
02:50:22,260 --> 02:50:26,670
minimal information is disclosed like

2815
02:50:24,780 --> 02:50:28,530
everybody asked this question in

2816
02:50:26,670 --> 02:50:29,820
audiences where they can't understand

2817
02:50:28,530 --> 02:50:31,229
the answer and I don't know what to do

2818
02:50:29,820 --> 02:50:35,189
about that but you guys can understand

2819
02:50:31,229 --> 02:50:39,000
the answer this zero knowledge approach

2820
02:50:35,189 --> 02:50:40,740
here exposes almost no information I

2821
02:50:39,000 --> 02:50:42,120
have to say almost there's timestamps

2822
02:50:40,740 --> 02:50:43,920
there's the number of transactions the

2823
02:50:42,120 --> 02:50:45,270
timing of transactions there's a little

2824
02:50:43,920 --> 02:50:48,060
bit of other metadata which is not

2825
02:50:45,270 --> 02:50:53,070
really which is very small amount okay

2826
02:50:48,060 --> 02:50:58,649
and all the other approaches what you

2827
02:50:53,070 --> 02:51:01,260
just named more narrow grin - they

2828
02:50:58,649 --> 02:51:03,930
expose a great deal more information is

2829
02:51:01,260 --> 02:51:06,810
based on mixing yeah it's basically like

2830
02:51:03,930 --> 02:51:08,160
instead of instead of yeah he says it's

2831
02:51:06,810 --> 02:51:10,590
based on mixing not near-zero not

2832
02:51:08,160 --> 02:51:13,080
knowledge instead of saying the cinder

2833
02:51:10,590 --> 02:51:14,939
is like you know nothing more about the

2834
02:51:13,080 --> 02:51:16,350
cinder after seeing this ledger then you

2835
02:51:14,939 --> 02:51:18,720
knew about the identity of this cinder

2836
02:51:16,350 --> 02:51:21,450
before basically with this that's why we

2837
02:51:18,720 --> 02:51:22,979
call it zero knowledge with all those

2838
02:51:21,450 --> 02:51:24,780
other ones it's like the cinder is one

2839
02:51:22,979 --> 02:51:27,210
of these ten or one of these hundred or

2840
02:51:24,780 --> 02:51:28,979
one of these thousand out of all

2841
02:51:27,210 --> 02:51:31,949
possible cinders and that's a huge

2842
02:51:28,979 --> 02:51:34,740
difference which I think historically

2843
02:51:31,950 --> 02:51:40,430
that kind of thing often proves to be

2844
02:51:34,740 --> 02:51:42,539
you know the penetrable by more

2845
02:51:40,430 --> 02:51:44,130
sophisticated techniques especially if

2846
02:51:42,540 --> 02:51:46,560
you include active attacks which changes

2847
02:51:44,130 --> 02:51:47,938
everything so is that good enough like

2848
02:51:46,560 --> 02:51:53,448
those other ones aren't just

2849
02:51:47,939 --> 02:51:56,699
good enough yeah let's start with you hi

2850
02:51:53,449 --> 02:51:59,879
sorry and thanks for the talk so I was

2851
02:51:56,699 --> 02:52:02,909
intrigued by your comparison with HTTP

2852
02:51:59,879 --> 02:52:05,219
and anonymous cache so when I try to

2853
02:52:02,909 --> 02:52:07,799
think about this I think about fill

2854
02:52:05,219 --> 02:52:10,649
Rockaways quote that cryptography

2855
02:52:07,799 --> 02:52:13,199
distributes power cryptographers - what

2856
02:52:10,649 --> 02:52:16,999
no cryptography or distributes power ah

2857
02:52:13,199 --> 02:52:18,600
right so and in terms of communication

2858
02:52:16,999 --> 02:52:20,939
cryptography you only protect

2859
02:52:18,600 --> 02:52:23,999
communication you're distributing power

2860
02:52:20,939 --> 02:52:26,249
from and powerful entities like

2861
02:52:23,999 --> 02:52:28,589
governments and giving it to people who

2862
02:52:26,249 --> 02:52:30,659
don't have that power but would cache

2863
02:52:28,589 --> 02:52:32,520
you're giving more power to the people

2864
02:52:30,659 --> 02:52:34,350
who have money and the people who don't

2865
02:52:32,520 --> 02:52:37,589
have money don't have more power yeah I

2866
02:52:34,350 --> 02:52:38,219
like that objection so yeah thank you

2867
02:52:37,589 --> 02:52:42,299
for bringing that up

2868
02:52:38,219 --> 02:52:44,339
what's your view on that again people

2869
02:52:42,299 --> 02:52:51,379
have different intuitions about that

2870
02:52:44,339 --> 02:52:54,119
whether making money safer to use in a

2871
02:52:51,379 --> 02:52:58,009
decentralized way increases power for

2872
02:52:54,119 --> 02:53:02,549
the powerful or power for the powerless

2873
02:52:58,009 --> 02:53:05,819
and my intuition is to the opposite side

2874
02:53:02,549 --> 02:53:08,159
that there's more benefit to more people

2875
02:53:05,819 --> 02:53:10,439
from having economic inclusion and

2876
02:53:08,159 --> 02:53:12,839
opportunity basically only put it like

2877
02:53:10,439 --> 02:53:14,219
this powerful rich people already have

2878
02:53:12,839 --> 02:53:16,439
all the anonymous money transmission

2879
02:53:14,219 --> 02:53:18,509
they want right they don't need to go

2880
02:53:16,439 --> 02:53:22,289
ask for permission from Visa whenever

2881
02:53:18,509 --> 02:53:25,649
they want to fill up on gas and they

2882
02:53:22,289 --> 02:53:32,009
don't need to work it's this kind of

2883
02:53:25,649 --> 02:53:34,890
technology is its mass market technology

2884
02:53:32,009 --> 02:53:37,079
that everyone can use that make sense

2885
02:53:34,890 --> 02:53:39,538
that's that's my intuition about that

2886
02:53:37,079 --> 02:53:41,631
trade-off at the same time there is cash

2887
02:53:39,539 --> 02:53:44,030
rise which is pretty anonymous

2888
02:53:41,631 --> 02:53:54,921
so for everyday use you still have cash

2889
02:53:44,030 --> 02:53:57,740
which yeah cash not everywhere hi

2890
02:53:54,921 --> 02:53:59,870
so thanks for the talk first of all you

2891
02:53:57,740 --> 02:54:02,001
did mention at the beginning that one of

2892
02:53:59,870 --> 02:54:04,521
the reasons that you have transparent

2893
02:54:02,001 --> 02:54:07,671
addresses versus I guess encrypted

2894
02:54:04,521 --> 02:54:09,351
addresses it was in order to like help

2895
02:54:07,671 --> 02:54:13,041
with adoption right especially in the

2896
02:54:09,351 --> 02:54:15,501
side of exchanges and so on but today I

2897
02:54:13,041 --> 02:54:17,240
guess you the use of transparent

2898
02:54:15,501 --> 02:54:18,921
addresses in zika's has become one of

2899
02:54:17,240 --> 02:54:19,699
the main points of criticism firstly

2900
02:54:18,921 --> 02:54:22,700
cash yeah

2901
02:54:19,700 --> 02:54:25,101
given that you know not most of the

2902
02:54:22,700 --> 02:54:27,351
usage into transactions is you guys are

2903
02:54:25,101 --> 02:54:29,240
not actually anonymous so the anonymity

2904
02:54:27,351 --> 02:54:30,681
pool kind of decreases and there is a

2905
02:54:29,240 --> 02:54:32,480
whole analysis that was done and so on

2906
02:54:30,681 --> 02:54:35,541
so I'm wondering what's your take on

2907
02:54:32,480 --> 02:54:38,359
that and like do you guys plan at some

2908
02:54:35,541 --> 02:54:40,070
point of removing transparent races well

2909
02:54:38,360 --> 02:54:41,360
answer your your real question but

2910
02:54:40,070 --> 02:54:43,221
there's a little tangents this is a

2911
02:54:41,360 --> 02:54:46,870
technical audience there's a common

2912
02:54:43,221 --> 02:54:49,581
misunderstanding that because the

2913
02:54:46,870 --> 02:54:53,240
transparent addresses are so frequently

2914
02:54:49,581 --> 02:54:55,841
used that the effective anonymity pool

2915
02:54:53,240 --> 02:54:58,910
is small

2916
02:54:55,841 --> 02:55:01,101
but for an apples-to-apples comparison

2917
02:54:58,910 --> 02:55:03,711
the effective anonymity pool if you make

2918
02:55:01,101 --> 02:55:06,021
a Z cash transaction is probably on the

2919
02:55:03,711 --> 02:55:07,760
order of a million sort of possible

2920
02:55:06,021 --> 02:55:09,530
other things that happen previously in

2921
02:55:07,761 --> 02:55:11,240
the blockchain that you could be equally

2922
02:55:09,530 --> 02:55:13,221
linked to any of the million of them

2923
02:55:11,240 --> 02:55:14,780
whereas with those other lesser

2924
02:55:13,221 --> 02:55:16,699
technologies that we talked about the

2925
02:55:14,780 --> 02:55:18,291
anonymity pool tends to be ten to a

2926
02:55:16,700 --> 02:55:20,511
thousand depending on a whole bunch of

2927
02:55:18,291 --> 02:55:23,480
questions about the attackers behavior

2928
02:55:20,511 --> 02:55:24,921
okay so I just just it's a little tiny

2929
02:55:23,480 --> 02:55:26,480
little detail that annoys me because

2930
02:55:24,921 --> 02:55:29,541
usually I'm talking to people who can't

2931
02:55:26,480 --> 02:55:31,461
understand the difference it's true the

2932
02:55:29,541 --> 02:55:33,561
nm and like the slice of the privacy

2933
02:55:31,461 --> 02:55:35,900
said in Z cache is much smaller than it

2934
02:55:33,561 --> 02:55:37,671
would be if everyone we're using satyrs

2935
02:55:35,900 --> 02:55:39,410
all the time and yet at the same time

2936
02:55:37,671 --> 02:55:42,581
it's much bigger than those other

2937
02:55:39,410 --> 02:55:45,619
options currently but your question was

2938
02:55:42,581 --> 02:55:47,570
what shall we do about this what

2939
02:55:45,620 --> 02:55:51,351
everyone involved in Z cache really

2940
02:55:47,570 --> 02:55:52,400
wants to just deprecated and phase out

2941
02:55:51,351 --> 02:55:54,080
tatters

2942
02:55:52,400 --> 02:55:56,580
entirely

2943
02:55:54,080 --> 02:55:59,150
to my mind they've mostly served their

2944
02:55:56,580 --> 02:56:01,830
purpose which was you know to sort of

2945
02:55:59,150 --> 02:56:05,181
get the camels nose under the tent and

2946
02:56:01,830 --> 02:56:07,170
get Zee cash into all these systems

2947
02:56:05,181 --> 02:56:08,851
there's basically only two more

2948
02:56:07,170 --> 02:56:11,280
exchanges in the world that aren't on

2949
02:56:08,851 --> 02:56:13,860
this list yet and maybe I'll just

2950
02:56:11,280 --> 02:56:17,851
sacrifice them and move on

2951
02:56:13,860 --> 02:56:19,710
I'm afraid that might trigger the

2952
02:56:17,851 --> 02:56:22,320
regulator's they because they don't

2953
02:56:19,710 --> 02:56:23,760
understand that because they're one of

2954
02:56:22,320 --> 02:56:25,740
those audiences that can't understand

2955
02:56:23,761 --> 02:56:27,690
these subtleties that they might think

2956
02:56:25,740 --> 02:56:30,391
that that somehow fundamentally changes

2957
02:56:27,690 --> 02:56:32,420
the calculus from their perspective but

2958
02:56:30,391 --> 02:56:34,410
I think it'll probably happen because

2959
02:56:32,420 --> 02:56:41,851
everyone in the Z Kashi community is

2960
02:56:34,410 --> 02:56:44,011
pretty enthusiastic about it thanks an

2961
02:56:41,851 --> 02:56:46,410
observation first and then a then a real

2962
02:56:44,011 --> 02:56:50,610
question the observation is that I'm

2963
02:56:46,410 --> 02:56:52,650
embarrassed to be Australian but having

2964
02:56:50,610 --> 02:56:54,601
said that and everybody giggles the

2965
02:56:52,650 --> 02:56:57,600
reason they did that stupid stupid

2966
02:56:54,601 --> 02:57:00,000
stupid law in Australia is as a trial

2967
02:56:57,601 --> 02:57:02,400
balloon for the five eyes yeah it's

2968
02:57:00,000 --> 02:57:04,230
coming for you well most of you it's

2969
02:57:02,400 --> 02:57:05,641
only that they thought that would they

2970
02:57:04,230 --> 02:57:12,180
could get that one through the easiest

2971
02:57:05,641 --> 02:57:14,130
yeah cheap near a mini sheep so and we

2972
02:57:12,181 --> 02:57:16,021
as technologists know that the only way

2973
02:57:14,130 --> 02:57:18,630
they can even attempt to enforce this is

2974
02:57:16,021 --> 02:57:19,980
very selectively right because it's in

2975
02:57:18,630 --> 02:57:22,800
you know Kryptos in every browser

2976
02:57:19,980 --> 02:57:24,960
without any backdoor keys you know we

2977
02:57:22,800 --> 02:57:27,061
can download signal without any backdoor

2978
02:57:24,960 --> 02:57:28,500
Keys blah blah blah so the only way they

2979
02:57:27,061 --> 02:57:30,029
can actually enforce this is to wait

2980
02:57:28,500 --> 02:57:31,950
until somebody does something they don't

2981
02:57:30,030 --> 02:57:36,090
like and then land on them with a cement

2982
02:57:31,950 --> 02:57:38,820
mixer you know so so this is a really

2983
02:57:36,090 --> 02:57:41,070
nasty law much nastier than a lot of

2984
02:57:38,820 --> 02:57:42,869
people give it credit for but what I

2985
02:57:41,070 --> 02:57:44,190
really want to stress is yeah this was a

2986
02:57:42,870 --> 02:57:47,400
place where they could actually try out

2987
02:57:44,190 --> 02:57:50,101
this law because it was never going to

2988
02:57:47,400 --> 02:57:51,811
happen in even New Zealand a let alone

2989
02:57:50,101 --> 02:57:55,170
in the u.s. in the current environment

2990
02:57:51,811 --> 02:57:56,789
but you know watch out just watch out be

2991
02:57:55,170 --> 02:57:58,351
diligent we do have a social

2992
02:57:56,790 --> 02:58:00,391
responsibility as professional

2993
02:57:58,351 --> 02:58:01,131
cryptographers to fight against this

2994
02:58:00,391 --> 02:58:03,141
stuff

2995
02:58:01,131 --> 02:58:06,770
now the question if you could go to the

2996
02:58:03,141 --> 02:58:09,171
slide that was mostly Xander's like

2997
02:58:06,771 --> 02:58:11,091
that's kind mhm that one yeah

2998
02:58:09,171 --> 02:58:14,660
lots of detail on that slide I like it

2999
02:58:11,091 --> 02:58:16,341
Thanks so I have limited understanding

3000
02:58:14,660 --> 02:58:17,690
I've never played with Bitcoin or

3001
02:58:16,341 --> 02:58:19,910
whatever but I thought the way you

3002
02:58:17,690 --> 02:58:22,190
tracked transactions through the Bitcoin

3003
02:58:19,910 --> 02:58:23,811
Ledger was to say okay well Satoshi

3004
02:58:22,190 --> 02:58:27,141
started off with this Bitcoin and

3005
02:58:23,811 --> 02:58:29,270
there's somebody how do you get that

3006
02:58:27,141 --> 02:58:31,160
when it's all Zetas how does how does a

3007
02:58:29,271 --> 02:58:32,570
third party verify that you still have a

3008
02:58:31,160 --> 02:58:34,820
cache that you just gave way

3009
02:58:32,570 --> 02:58:36,610
yeah that's that's the fundamental idea

3010
02:58:34,820 --> 02:58:38,480
of the zero cash invention which

3011
02:58:36,610 --> 02:58:40,070
everyone should go watching and Meyers

3012
02:58:38,480 --> 02:58:43,641
has talked to them last year at RWC

3013
02:58:40,070 --> 02:58:45,980
which is that they're in NZ cash there's

3014
02:58:43,641 --> 02:58:47,690
Azure knowledge proof which says nobody

3015
02:58:45,980 --> 02:58:51,199
could have come up with this ciphertext

3016
02:58:47,690 --> 02:58:53,751
unless they knew a spending key that

3017
02:58:51,200 --> 02:58:55,400
spent some money and hasn't previously

3018
02:58:53,751 --> 02:58:57,351
spent the same money to anyone else and

3019
02:58:55,400 --> 02:58:59,061
the amount of money matches the

3020
02:58:57,351 --> 02:59:01,461
requirement the limits on how much money

3021
02:58:59,061 --> 02:59:04,011
they can spend okay so it's the zero

3022
02:59:01,461 --> 02:59:06,740
knowledge proof of exactly the integrity

3023
02:59:04,011 --> 02:59:09,801
constraints you need to prevent the

3024
02:59:06,740 --> 02:59:11,601
money from being wrong okay so I guess a

3025
02:59:09,801 --> 02:59:13,251
follow-up question that seems to me that

3026
02:59:11,601 --> 02:59:16,011
it would be a performance improvement

3027
02:59:13,251 --> 02:59:17,780
because you can actually be you can look

3028
02:59:16,011 --> 02:59:19,251
at the one transaction and say okay I'm

3029
02:59:17,780 --> 02:59:20,721
sure that that transaction is valid

3030
02:59:19,251 --> 02:59:23,511
without having to go back through the

3031
02:59:20,721 --> 02:59:25,251
entire block ah yeah but no there's a

3032
02:59:23,511 --> 02:59:27,561
damn yeah

3033
02:59:25,251 --> 02:59:31,551
no it's because you've got to prove that

3034
02:59:27,561 --> 02:59:33,381
the money that you're spending hasn't

3035
02:59:31,551 --> 02:59:36,199
previously been spent so you have to

3036
02:59:33,381 --> 02:59:37,939
refer to a global state of all the money

3037
02:59:36,200 --> 02:59:39,530
that's ever been spent and you have to

3038
02:59:37,940 --> 02:59:40,581
update that continuously is one of the

3039
02:59:39,530 --> 02:59:43,251
problems okay

3040
02:59:40,581 --> 02:59:46,341
thanks very much so that question has a

3041
02:59:43,251 --> 02:59:48,110
long answer yeah yeah we'll take one

3042
02:59:46,341 --> 02:59:49,940
more question yeah it's probably a very

3043
02:59:48,110 --> 02:59:52,581
naive question I guess I mean I myself

3044
02:59:49,940 --> 02:59:54,921
don't use bitcoins nothing I know about

3045
02:59:52,581 --> 02:59:57,230
really mostly my concerns were with

3046
02:59:54,921 --> 03:00:00,440
cryptography nest boxes but coming to

3047
02:59:57,230 --> 03:00:03,381
this one so it looks like the Z cache

3048
03:00:00,440 --> 03:00:05,990
does not seem to be the only one form of

3049
03:00:03,381 --> 03:00:08,119
these coins there may be others and if

3050
03:00:05,990 --> 03:00:10,851
there are those others what are your

3051
03:00:08,120 --> 03:00:13,360
thoughts about interoperability issues

3052
03:00:10,851 --> 03:00:15,101
with those because

3053
03:00:13,360 --> 03:00:16,690
and disappearance maybe having different

3054
03:00:15,101 --> 03:00:19,391
kinds of coins and they might be

3055
03:00:16,690 --> 03:00:20,891
registered with the same exchange so if

3056
03:00:19,391 --> 03:00:22,931
the senator wants to use more than one

3057
03:00:20,891 --> 03:00:24,551
type of campaign there are lots of

3058
03:00:22,931 --> 03:00:26,561
different kinds of coins you shouldn't

3059
03:00:24,551 --> 03:00:30,130
use iota but all the other one well many

3060
03:00:26,561 --> 03:00:31,690
of the other ones are good even the ones

3061
03:00:30,130 --> 03:00:36,160
that I was saying aren't good enough are

3062
03:00:31,690 --> 03:00:37,811
actually pretty good and the current way

3063
03:00:36,160 --> 03:00:39,070
that you interoperate between different

3064
03:00:37,811 --> 03:00:41,529
coins is by going to one of those

3065
03:00:39,070 --> 03:00:43,990
centralized exchanges and asking them to

3066
03:00:41,530 --> 03:00:45,851
trade or do some kind of contract for

3067
03:00:43,990 --> 03:00:47,080
you and hope that they're like still

3068
03:00:45,851 --> 03:00:50,230
there a few minutes later when the

3069
03:00:47,080 --> 03:00:51,880
contract is done there's a lot of fun

3070
03:00:50,230 --> 03:00:55,471
research in the space because the cyber

3071
03:00:51,880 --> 03:00:57,250
coin space is absolutely the most fun

3072
03:00:55,471 --> 03:00:59,380
explosion of research in all directions

3073
03:00:57,250 --> 03:01:01,721
much of which is really kind of weird

3074
03:00:59,380 --> 03:01:03,580
like I mean I think trinary is pretty

3075
03:01:01,721 --> 03:01:07,180
cool there's some really interesting

3076
03:01:03,580 --> 03:01:08,950
arithmetic it's in theory could be more

3077
03:01:07,181 --> 03:01:12,460
efficient because it's closer to the

3078
03:01:08,950 --> 03:01:14,320
natural ie but there's a lot of more

3079
03:01:12,460 --> 03:01:17,169
interesting stuff than that and includes

3080
03:01:14,320 --> 03:01:20,261
decentralized inter operation between

3081
03:01:17,170 --> 03:01:22,870
different coins but it's not yet really

3082
03:01:20,261 --> 03:01:26,290
gotten into full-scale production but it

3083
03:01:22,870 --> 03:01:28,480
might soon thank you so great doc thanks

3084
03:01:26,290 --> 03:01:30,130
thanks all right so without I think

3085
03:01:28,480 --> 03:01:33,779
we're out of time actually so thank you

3086
03:01:30,130 --> 03:01:33,779
very much okay thank you sir

3087
03:01:36,729 --> 03:01:41,778
all right so this actually brings us to

3088
03:01:39,109 --> 03:01:43,100
the end of the conference so first I

3089
03:01:41,779 --> 03:01:44,869
want to have another round of applause

3090
03:01:43,100 --> 03:01:45,660
for all the speakers for all the three

3091
03:01:44,869 --> 03:01:48,540
days

3092
03:01:45,660 --> 03:01:51,649
[Applause]

3093
03:01:48,540 --> 03:01:54,540
[Music]

3094
03:01:51,649 --> 03:01:56,490
this is like my favorite conference I

3095
03:01:54,540 --> 03:01:58,050
hope you I hope everybody enjoyed it so

3096
03:01:56,490 --> 03:02:00,630
I learned a lot I hope you guys learned

3097
03:01:58,050 --> 03:02:01,858
a lot from all these talks obviously you

3098
03:02:00,630 --> 03:02:04,560
know we're gonna be running this every

3099
03:02:01,859 --> 03:02:08,330
year so you know yeah we hope to see all

3100
03:02:04,560 --> 03:02:10,170
of you next year so to help us improve

3101
03:02:08,330 --> 03:02:12,060
actually we're gonna be sending out a

3102
03:02:10,170 --> 03:02:14,010
survey to all the attendees so please

3103
03:02:12,060 --> 03:02:15,330
fill out the survey tell us your

3104
03:02:14,010 --> 03:02:17,040
opinions tell us what you liked what you

3105
03:02:15,330 --> 03:02:19,229
didn't like there's actually the survey

3106
03:02:17,040 --> 03:02:21,930
actually has a text field at the bottom

3107
03:02:19,229 --> 03:02:23,970
where you can kind of enter comments

3108
03:02:21,930 --> 03:02:25,380
that are not actually questions on the

3109
03:02:23,970 --> 03:02:27,599
survey so you know feel free to use

3110
03:02:25,380 --> 03:02:29,759
those we really look at all the feedback

3111
03:02:27,600 --> 03:02:31,560
you send and it really helps us actually

3112
03:02:29,760 --> 03:02:33,930
design the conference for the coming

3113
03:02:31,560 --> 03:02:35,310
years so again thank you very much and

3114
03:02:33,930 --> 03:02:40,850
we are looking forward to seeing

3115
03:02:35,310 --> 03:02:40,850
everybody next year in Columbia New York

3116
03:02:41,000 --> 03:02:45,030
there's one person who actually deserves

3117
03:02:43,439 --> 03:02:47,070
more things than anyone and that's this

3118
03:02:45,030 --> 03:02:55,140
guy Dan Bonnie let's thank time thank

3119
03:02:47,070 --> 03:02:57,539
you okay and I'm contractually obliged

3120
03:02:55,140 --> 03:02:57,880
to say that's all folks see you next

3121
03:02:57,540 --> 03:03:01,310
time

3122
03:02:57,880 --> 03:03:01,310
[Applause]

