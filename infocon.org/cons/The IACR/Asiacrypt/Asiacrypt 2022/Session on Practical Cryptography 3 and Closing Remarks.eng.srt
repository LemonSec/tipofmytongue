1
00:00:00,000 --> 00:00:03,740
basically do what one always does in

2
00:00:03,740 --> 00:00:06,720
in Secure messaging so we need building

3
00:00:06,720 --> 00:00:09,900
blocks like chemist stateful cams staple

4
00:00:09,900 --> 00:00:12,059
signatures and so on which need to

5
00:00:12,059 --> 00:00:14,160
support context dependent key update

6
00:00:14,160 --> 00:00:16,020
what I mean by that is that you can

7
00:00:16,020 --> 00:00:18,539
create a session state for these scams

8
00:00:18,539 --> 00:00:20,460
or 40 signatures and then you can feed

9
00:00:20,460 --> 00:00:24,119
information to them in arbitrary strings

10
00:00:24,119 --> 00:00:25,859
and then this will go kind of be

11
00:00:25,859 --> 00:00:27,660
massaged into the state so that the

12
00:00:27,660 --> 00:00:30,180
state corruption will not be able to

13
00:00:30,180 --> 00:00:33,800
roll this concept back and we need

14
00:00:33,800 --> 00:00:35,880
resilience against State Corruptions of

15
00:00:35,880 --> 00:00:38,340
these Primitives as well I pick out two

16
00:00:38,340 --> 00:00:39,899
of these Primitives the two State four

17
00:00:39,899 --> 00:00:41,340
common types that we have we call them

18
00:00:41,340 --> 00:00:44,219
tcam and qcam I'm not sure we can claim

19
00:00:44,219 --> 00:00:45,780
novelty at this point anymore because

20
00:00:45,780 --> 00:00:48,360
every paper in Secure messaging does

21
00:00:48,360 --> 00:00:49,980
something similar they all have

22
00:00:49,980 --> 00:00:51,480
different variants of these Primitives

23
00:00:51,480 --> 00:00:54,300
so I'm not sure that anybody uses

24
00:00:54,300 --> 00:00:56,399
precisely what we do here but ours is

25
00:00:56,399 --> 00:00:57,960
also not better than what other people's

26
00:00:57,960 --> 00:00:59,039
do I think they are pairwise

27
00:00:59,039 --> 00:01:01,500
incomparable so let me just give you a

28
00:01:01,500 --> 00:01:04,019
quick idea of what this is so the keycam

29
00:01:04,019 --> 00:01:06,720
is the key evolving Cam that is like

30
00:01:06,720 --> 00:01:08,520
forward Secure Public encryption so

31
00:01:08,520 --> 00:01:10,619
there's a state and it can be progressed

32
00:01:10,619 --> 00:01:12,240
one at a time so there's the next

33
00:01:12,240 --> 00:01:14,280
algorithm or we call it evolve that will

34
00:01:14,280 --> 00:01:16,799
just increase the time counter by one so

35
00:01:16,799 --> 00:01:18,900
there's an erroring linear sequence and

36
00:01:18,900 --> 00:01:21,119
then constructions use hibe or something

37
00:01:21,119 --> 00:01:22,320
similar

38
00:01:22,320 --> 00:01:25,140
and then Q chems are similar but instead

39
00:01:25,140 --> 00:01:26,820
of just having a next algorithm that

40
00:01:26,820 --> 00:01:29,100
takes no input we have now an update

41
00:01:29,100 --> 00:01:31,080
algorithm that takes input it's a string

42
00:01:31,080 --> 00:01:33,659
and so kind of it records in its state a

43
00:01:33,659 --> 00:01:36,360
linear sequence of of uh of these

44
00:01:36,360 --> 00:01:38,340
strings obviously they are several

45
00:01:38,340 --> 00:01:40,200
related but it seems that this doesn't

46
00:01:40,200 --> 00:01:42,299
apply this one both of them will

47
00:01:42,299 --> 00:01:44,759
construct as HIV for

48
00:01:44,759 --> 00:01:48,119
um in our proof of concept and then we

49
00:01:48,119 --> 00:01:49,979
have a stateful signature scheme which

50
00:01:49,979 --> 00:01:51,540
can be built from one-time signatures

51
00:01:51,540 --> 00:01:53,520
and it's kind of In The Same Spirit just

52
00:01:53,520 --> 00:01:55,560
the same phone signature schemes and

53
00:01:55,560 --> 00:01:57,060
then we can put all this together so

54
00:01:57,060 --> 00:01:58,500
this is our scheme don't look at this

55
00:01:58,500 --> 00:02:01,259
don't get distracted uh what we do is we

56
00:02:01,259 --> 00:02:03,720
have a keycare mcqam and a stateful

57
00:02:03,720 --> 00:02:06,659
signature scheme and it's instructive to

58
00:02:06,659 --> 00:02:07,920
see

59
00:02:07,920 --> 00:02:09,598
um how we use them so the keycare was

60
00:02:09,598 --> 00:02:11,280
the one with the linear evolution of

61
00:02:11,280 --> 00:02:13,020
time without inputs that is what we use

62
00:02:13,020 --> 00:02:16,500
to track physical time so these we

63
00:02:16,500 --> 00:02:18,840
switch to the next Epoch when 10 seconds

64
00:02:18,840 --> 00:02:21,599
pass or something the qca was the stage

65
00:02:21,599 --> 00:02:24,180
where which kind of reprocess the

66
00:02:24,180 --> 00:02:26,580
strings would be used for logical time

67
00:02:26,580 --> 00:02:28,319
logical time is what comes from the

68
00:02:28,319 --> 00:02:30,420
protocol messages that are exchanged so

69
00:02:30,420 --> 00:02:32,160
for example each ciphertext is

70
00:02:32,160 --> 00:02:35,940
triggering a qcom update and the hardest

71
00:02:35,940 --> 00:02:37,680
part of providing of Designing this

72
00:02:37,680 --> 00:02:40,560
protocol is actually just to to juggle

73
00:02:40,560 --> 00:02:42,599
with the sub states of the key cabin the

74
00:02:42,599 --> 00:02:44,099
Q Cam and the signature scheme to

75
00:02:44,099 --> 00:02:46,019
understand which one came when race and

76
00:02:46,019 --> 00:02:47,819
has to raise it which one one has to

77
00:02:47,819 --> 00:02:49,620
keep so this is mostly about data

78
00:02:49,620 --> 00:02:51,959
structures in the end so but most of

79
00:02:51,959 --> 00:02:53,819
this is just managing data structures

80
00:02:53,819 --> 00:02:56,060
here

81
00:02:56,099 --> 00:03:00,480
um a size performance on a comment on

82
00:03:00,480 --> 00:03:02,220
the Cyber text overhead that we have

83
00:03:02,220 --> 00:03:05,459
namely we our psychotics grow linearly

84
00:03:05,459 --> 00:03:07,980
in the size of unconfirmed messages so

85
00:03:07,980 --> 00:03:09,900
if Ella sends three ciphertext to Bob

86
00:03:09,900 --> 00:03:12,599
and he never answers to this then Alice

87
00:03:12,599 --> 00:03:15,360
is a search cycle text has like three

88
00:03:15,360 --> 00:03:17,340
while her first ciphertext is legs one

89
00:03:17,340 --> 00:03:19,319
it's it's not really a factor of three

90
00:03:19,319 --> 00:03:21,840
it's just full of O of n which where n

91
00:03:21,840 --> 00:03:23,099
is the number of unacknowledged

92
00:03:23,099 --> 00:03:25,680
hypertexts and this is because the queue

93
00:03:25,680 --> 00:03:28,620
cam when it needs its update from the

94
00:03:28,620 --> 00:03:32,340
ciphertext it needs to do this also of

95
00:03:32,340 --> 00:03:34,379
past cytics if it's not clear that they

96
00:03:34,379 --> 00:03:36,480
actually arrived so that means that

97
00:03:36,480 --> 00:03:39,900
every ciphertext contains in it a mini

98
00:03:39,900 --> 00:03:42,659
history of the past cypertext that we're

99
00:03:42,659 --> 00:03:44,519
not yet confirmed and this is what is

100
00:03:44,519 --> 00:03:47,700
this growth of linear growth come from

101
00:03:47,700 --> 00:03:50,040
for the keycam however this is the one

102
00:03:50,040 --> 00:03:52,319
link to a physical time we don't have

103
00:03:52,319 --> 00:03:54,840
that because resynchronization is not

104
00:03:54,840 --> 00:03:55,980
necessary

105
00:03:55,980 --> 00:03:57,959
so that brings me to the conclusion of

106
00:03:57,959 --> 00:04:00,659
this presentation our contributions are

107
00:04:00,659 --> 00:04:03,120
that we point out some limitations in a

108
00:04:03,120 --> 00:04:06,060
prior s model or ID model

109
00:04:06,060 --> 00:04:08,459
um for this type of communication

110
00:04:08,459 --> 00:04:10,680
we introduced to the scene the notion of

111
00:04:10,680 --> 00:04:12,480
physical climb and how we can use it as

112
00:04:12,480 --> 00:04:13,980
a security resource how we can

113
00:04:13,980 --> 00:04:17,579
strengthen our Primitives based on time

114
00:04:17,579 --> 00:04:19,680
um then we refine the essence ID model

115
00:04:19,680 --> 00:04:22,400
and give a proof of concept construction

116
00:04:22,400 --> 00:04:25,380
the what's why I always say it's group

117
00:04:25,380 --> 00:04:27,360
of concept because maybe the protocol is

118
00:04:27,360 --> 00:04:30,840
not really practical coming from two uh

119
00:04:30,840 --> 00:04:33,060
different observations the ones the

120
00:04:33,060 --> 00:04:36,240
linear growth of cyber text in the

121
00:04:36,240 --> 00:04:37,979
number of unconfirmed messages and the

122
00:04:37,979 --> 00:04:40,139
second is because of the use of iqibe

123
00:04:40,139 --> 00:04:44,580
both cases look possibly worse than they

124
00:04:44,580 --> 00:04:46,740
are because if you have ping-pong

125
00:04:46,740 --> 00:04:48,960
communication this linear growth goes

126
00:04:48,960 --> 00:04:52,440
back to O of one and uh under the

127
00:04:52,440 --> 00:04:54,540
assumption that it rarely happens that

128
00:04:54,540 --> 00:04:56,699
Alice sends really 1000 messages in a

129
00:04:56,699 --> 00:04:59,180
shot maybe this is not really a problem

130
00:04:59,180 --> 00:05:01,500
but I'm not the right person to decide

131
00:05:01,500 --> 00:05:03,660
that

132
00:05:03,660 --> 00:05:05,580
um for future work relief to make

133
00:05:05,580 --> 00:05:08,880
stronger Pro sorry to make more compact

134
00:05:08,880 --> 00:05:11,220
more efficient protocols that are better

135
00:05:11,220 --> 00:05:13,860
at least to to regards I personally

136
00:05:13,860 --> 00:05:16,020
would expect they are also not that

137
00:05:16,020 --> 00:05:17,940
secure they have a weaker security an

138
00:05:17,940 --> 00:05:19,380
example would be the signal protocol

139
00:05:19,380 --> 00:05:22,080
which is weak as weaker security and

140
00:05:22,080 --> 00:05:23,400
then when asked the cap fully understand

141
00:05:23,400 --> 00:05:26,580
how much weaker is this uh toleratable

142
00:05:26,580 --> 00:05:28,800
level of of

143
00:05:28,800 --> 00:05:31,440
um missing strength and this concludes

144
00:05:31,440 --> 00:05:35,180
my talk and I'm happy to take questions

145
00:05:39,560 --> 00:05:42,300
Spectrum we're almost out of time but

146
00:05:42,300 --> 00:05:44,520
we'll have time for one quick question

147
00:05:44,520 --> 00:05:47,419
if there is one

148
00:05:50,539 --> 00:05:53,580
hi um this is Matilda from eth thanks

149
00:05:53,580 --> 00:05:55,080
Bertram for your talk

150
00:05:55,080 --> 00:05:56,880
um I was wondering about the forward

151
00:05:56,880 --> 00:05:58,380
security guarantees of your construction

152
00:05:58,380 --> 00:06:00,419
so you said that

153
00:06:00,419 --> 00:06:02,039
um you get sort of Epic based forward

154
00:06:02,039 --> 00:06:05,100
security for the expired cyber test is

155
00:06:05,100 --> 00:06:06,360
that correct

156
00:06:06,360 --> 00:06:07,320
um but I was wondering if your

157
00:06:07,320 --> 00:06:09,000
construction also provides stronger

158
00:06:09,000 --> 00:06:10,800
forward Security in the sense that you

159
00:06:10,800 --> 00:06:12,419
also have sort of fine-grained forward

160
00:06:12,419 --> 00:06:16,139
security for delivered ciphertexts

161
00:06:16,139 --> 00:06:18,780
um that have not yet expired so not for

162
00:06:18,780 --> 00:06:20,280
the non-delivered ones but for the ones

163
00:06:20,280 --> 00:06:21,840
that actually the recipient actually

164
00:06:21,840 --> 00:06:24,380
received

165
00:06:26,580 --> 00:06:28,979
so you say um so the question is about

166
00:06:28,979 --> 00:06:31,319
the ciphertext that are fresh by the

167
00:06:31,319 --> 00:06:33,419
time definition but not necessarily

168
00:06:33,419 --> 00:06:34,860
fresh anymore because they were already

169
00:06:34,860 --> 00:06:37,259
processed yes for those exactly we have

170
00:06:37,259 --> 00:06:38,819
hope yes they are covered by forward

171
00:06:38,819 --> 00:06:42,840
security so the the only case

172
00:06:42,840 --> 00:06:43,500
um

173
00:06:43,500 --> 00:06:46,199
well so so the model protects you where

174
00:06:46,199 --> 00:06:49,500
it can and by this claim this this would

175
00:06:49,500 --> 00:06:51,600
already answer your question uh but yes

176
00:06:51,600 --> 00:06:54,180
if you if you decrypt a ciphertext and

177
00:06:54,180 --> 00:06:56,400
you get the message back then that

178
00:06:56,400 --> 00:06:58,020
ciphertext will not be decryptable

179
00:06:58,020 --> 00:07:00,600
anymore not by the real Bob and not by

180
00:07:00,600 --> 00:07:03,120
an adversary corrupting bot and then

181
00:07:03,120 --> 00:07:06,120
doing what an adversary does

182
00:07:06,120 --> 00:07:08,639
okay you decrypted ciphertext and then

183
00:07:08,639 --> 00:07:10,440
the message is there and the cycle text

184
00:07:10,440 --> 00:07:12,000
has no validity anymore

185
00:07:12,000 --> 00:07:15,300
to nobody great thanks

186
00:07:15,300 --> 00:07:19,520
all right let's thank bedroom again then

187
00:07:22,199 --> 00:07:26,539
and we can switch to the second talk

188
00:07:29,639 --> 00:07:31,620
so the second talk is on strongly

189
00:07:31,620 --> 00:07:34,259
Anonymous ratcheted key exchange the

190
00:07:34,259 --> 00:07:36,120
idea was that Edward would give the talk

191
00:07:36,120 --> 00:07:37,500
but unfortunately he can't give it in

192
00:07:37,500 --> 00:07:39,300
person he's not feeling well so get well

193
00:07:39,300 --> 00:07:41,940
soon Edward uh and Paul Russell was so

194
00:07:41,940 --> 00:07:44,699
kind to step in actually uh Professor

195
00:07:44,699 --> 00:07:46,380
Paula Rose live I'm not mistaken since

196
00:07:46,380 --> 00:07:49,199
last week so I hope I will hear you and

197
00:07:49,199 --> 00:07:51,180
take it away

198
00:07:51,180 --> 00:07:53,340
yeah thank you very much I hope you can

199
00:07:53,340 --> 00:07:55,500
hear me uh too but uh yeah this is

200
00:07:55,500 --> 00:07:57,000
George work together with Benjamin

201
00:07:57,000 --> 00:08:00,060
Doreen and as Felix already said Edward

202
00:08:00,060 --> 00:08:02,039
uh get well soon and best wishes to

203
00:08:02,039 --> 00:08:03,599
Taiwan

204
00:08:03,599 --> 00:08:05,400
um the talk or the title is strongly

205
00:08:05,400 --> 00:08:07,620
Anonymous graduated key exchange and as

206
00:08:07,620 --> 00:08:09,479
Bertram already mentioned what gradually

207
00:08:09,479 --> 00:08:11,940
key exchange is used for uh the main use

208
00:08:11,940 --> 00:08:15,060
case is messaging so we broadly talk

209
00:08:15,060 --> 00:08:17,699
about which anonymity guarantees we can

210
00:08:17,699 --> 00:08:20,280
achieve for messaging I quickly repeat a

211
00:08:20,280 --> 00:08:21,900
couple of things that Bertram already

212
00:08:21,900 --> 00:08:22,979
mentioned

213
00:08:22,979 --> 00:08:25,500
uh but I think some concepts are

214
00:08:25,500 --> 00:08:28,259
slightly new so the messaging setting

215
00:08:28,259 --> 00:08:30,720
that I'm considering uh has multiple

216
00:08:30,720 --> 00:08:32,820
wait a second I will quickly close these

217
00:08:32,820 --> 00:08:35,640
windows here yeah uh has multiple users

218
00:08:35,640 --> 00:08:37,620
communicating and each of these users

219
00:08:37,620 --> 00:08:40,860
may have multiple sessions and we have a

220
00:08:40,860 --> 00:08:43,860
slightly simplified variant of messaging

221
00:08:43,860 --> 00:08:45,420
compared to what Bertram was talking

222
00:08:45,420 --> 00:08:48,060
about namely we have unidirectional

223
00:08:48,060 --> 00:08:50,580
communication so a sender always stays a

224
00:08:50,580 --> 00:08:53,580
standard and a receiver always stays a

225
00:08:53,580 --> 00:08:55,620
receiver and the receiver never responds

226
00:08:55,620 --> 00:08:57,540
so there is no information flowing from

227
00:08:57,540 --> 00:09:00,180
receivers to senders and this simplifies

228
00:09:00,180 --> 00:09:02,160
some of the complexity that many

229
00:09:02,160 --> 00:09:04,860
messaging papers have in particular also

230
00:09:04,860 --> 00:09:07,620
ours is already complicated enough but I

231
00:09:07,620 --> 00:09:10,260
highly encourage people for future work

232
00:09:10,260 --> 00:09:13,380
to extend our ideas and check whether

233
00:09:13,380 --> 00:09:15,360
they are actually extendable I guess

234
00:09:15,360 --> 00:09:17,820
non-trivially to a bi-directional

235
00:09:17,820 --> 00:09:19,459
communication setting

236
00:09:19,459 --> 00:09:22,440
a fourth remark that I want to make is

237
00:09:22,440 --> 00:09:24,660
that we strictly look at the client to

238
00:09:24,660 --> 00:09:26,700
client communication which means that we

239
00:09:26,700 --> 00:09:28,320
ignore that there might be servers

240
00:09:28,320 --> 00:09:30,060
involved that forward the ciphertext

241
00:09:30,060 --> 00:09:33,360
from one user to another and that there

242
00:09:33,360 --> 00:09:35,820
might be further anonymity protocols

243
00:09:35,820 --> 00:09:40,440
being employed such that uh TCP TLS or

244
00:09:40,440 --> 00:09:42,959
whatever information from all these

245
00:09:42,959 --> 00:09:45,300
other layer protocols uh reveal

246
00:09:45,300 --> 00:09:47,040
information on the sender or on the

247
00:09:47,040 --> 00:09:49,200
receiver so we purely look at the

248
00:09:49,200 --> 00:09:50,820
messaging protocol and check whether

249
00:09:50,820 --> 00:09:54,140
those protocols provide anonymity or not

250
00:09:54,140 --> 00:09:57,360
and that means that an adversary in our

251
00:09:57,360 --> 00:09:59,279
setting can see the traffic that is on

252
00:09:59,279 --> 00:10:01,200
the network but in addition to that as

253
00:10:01,200 --> 00:10:03,839
Bertram already mentioned it's a common

254
00:10:03,839 --> 00:10:06,660
uh assumption that we think that

255
00:10:06,660 --> 00:10:08,580
adversaries can corrupt the state of

256
00:10:08,580 --> 00:10:11,459
senders and of receivers and as Berger

257
00:10:11,459 --> 00:10:14,459
mentioned um if a corruption happens

258
00:10:14,459 --> 00:10:16,620
then this means that the entire key

259
00:10:16,620 --> 00:10:19,260
material on a device

260
00:10:19,260 --> 00:10:21,180
um that is stored on a device

261
00:10:21,180 --> 00:10:23,640
temporarily is leaked to the adversary

262
00:10:23,640 --> 00:10:26,100
and with respect to such a corruption

263
00:10:26,100 --> 00:10:28,380
model we require forward secrecy meaning

264
00:10:28,380 --> 00:10:30,959
that past communication remains secure

265
00:10:30,959 --> 00:10:33,300
even if at some point a corruption

266
00:10:33,300 --> 00:10:35,339
happens on a sender or on a receiver

267
00:10:35,339 --> 00:10:38,339
device and the opposite property that we

268
00:10:38,339 --> 00:10:40,560
usually want to have is post compromised

269
00:10:40,560 --> 00:10:42,540
security which means that even after

270
00:10:42,540 --> 00:10:45,420
corruption we at some point have secure

271
00:10:45,420 --> 00:10:47,700
communication again so there is somewhat

272
00:10:47,700 --> 00:10:50,880
a recovery mechanism implemented such

273
00:10:50,880 --> 00:10:53,540
that keys are updated and eventually

274
00:10:53,540 --> 00:10:56,820
communication is secure again and if I

275
00:10:56,820 --> 00:10:58,940
say

276
00:10:59,640 --> 00:11:01,620
if you're then usually we think of

277
00:11:01,620 --> 00:11:03,240
traditional security guarantees like

278
00:11:03,240 --> 00:11:05,760
confidentiality and in confidentiality

279
00:11:05,760 --> 00:11:07,620
especially in our unidirectional

280
00:11:07,620 --> 00:11:09,660
communication setting just a reminder a

281
00:11:09,660 --> 00:11:11,399
sender always sends but never receives

282
00:11:11,399 --> 00:11:13,079
something from the receiver and the

283
00:11:13,079 --> 00:11:14,459
receiver already receives and never

284
00:11:14,459 --> 00:11:16,800
responds back to a sender so in this

285
00:11:16,800 --> 00:11:18,839
setting we know that sender Corruptions

286
00:11:18,839 --> 00:11:20,160
are more or less harmless for

287
00:11:20,160 --> 00:11:22,200
confidentiality because we know that

288
00:11:22,200 --> 00:11:23,700
there is public key encryption and

289
00:11:23,700 --> 00:11:25,560
public key encryption requires us only

290
00:11:25,560 --> 00:11:28,019
to place a public key on the sender side

291
00:11:28,019 --> 00:11:30,060
and the public key being compromised or

292
00:11:30,060 --> 00:11:32,220
corrupted doesn't leak any information

293
00:11:32,220 --> 00:11:34,500
on the messages or on the keys that are

294
00:11:34,500 --> 00:11:36,360
established from the sender to the

295
00:11:36,360 --> 00:11:37,800
receiver

296
00:11:37,800 --> 00:11:40,560
but as soon as the receiver is corrupted

297
00:11:40,560 --> 00:11:43,200
that means that for future communication

298
00:11:43,200 --> 00:11:45,600
everything will be broken we can't hope

299
00:11:45,600 --> 00:11:47,220
for any security guarantees anymore

300
00:11:47,220 --> 00:11:49,500
because as I said the receiver can't

301
00:11:49,500 --> 00:11:51,300
respond with anything the receiver

302
00:11:51,300 --> 00:11:53,459
basically just deterministically

303
00:11:53,459 --> 00:11:55,800
processes all the ciphertext received

304
00:11:55,800 --> 00:11:58,200
from the sender and since the key

305
00:11:58,200 --> 00:11:59,940
material stored on the receiver device

306
00:11:59,940 --> 00:12:02,820
basically is leaked at a corruption to

307
00:12:02,820 --> 00:12:05,339
the adversary then the adversary can

308
00:12:05,339 --> 00:12:07,440
comprehend and process all the same

309
00:12:07,440 --> 00:12:09,380
information that the receiver can do

310
00:12:09,380 --> 00:12:11,640
nevertheless we want that all previous

311
00:12:11,640 --> 00:12:14,579
communication remains secure after a

312
00:12:14,579 --> 00:12:17,100
compromise of the receiver and that

313
00:12:17,100 --> 00:12:18,899
basically means that we have full post

314
00:12:18,899 --> 00:12:20,220
compromised security and forward

315
00:12:20,220 --> 00:12:22,140
security with respect to Sender

316
00:12:22,140 --> 00:12:24,540
Corruptions so nothing's leaked on the

317
00:12:24,540 --> 00:12:27,000
due to Sender Corruptions but for

318
00:12:27,000 --> 00:12:29,339
receiver Corruptions we can we can't

319
00:12:29,339 --> 00:12:31,740
hope for anything better than only

320
00:12:31,740 --> 00:12:33,540
forward security with respect to

321
00:12:33,540 --> 00:12:35,940
confidentiality the second traditional

322
00:12:35,940 --> 00:12:37,620
security

323
00:12:37,620 --> 00:12:39,779
uh property that we want to have in that

324
00:12:39,779 --> 00:12:42,300
setting of authenticity and for

325
00:12:42,300 --> 00:12:44,880
authenticity the situation is somewhat

326
00:12:44,880 --> 00:12:47,820
flipped receiver Corruptions uh don't

327
00:12:47,820 --> 00:12:50,100
have any impact on authenticity because

328
00:12:50,100 --> 00:12:52,200
we know we have digital signatures and a

329
00:12:52,200 --> 00:12:55,139
verification key put into the state on

330
00:12:55,139 --> 00:12:57,180
the receiver side doesn't allow

331
00:12:57,180 --> 00:12:59,100
anniversary to trivially forge

332
00:12:59,100 --> 00:13:03,000
ciphertext towards the receiver but in

333
00:13:03,000 --> 00:13:04,200
contrast

334
00:13:04,200 --> 00:13:06,899
if the signing key probably placed in

335
00:13:06,899 --> 00:13:09,600
the sender state is leaked to the

336
00:13:09,600 --> 00:13:11,639
adversary then the adversary can

337
00:13:11,639 --> 00:13:14,279
basically Forge ciphertext that look

338
00:13:14,279 --> 00:13:15,720
honest and the receiver can't

339
00:13:15,720 --> 00:13:17,880
distinguish them from the real

340
00:13:17,880 --> 00:13:20,160
ciphertexts being sent from the sender

341
00:13:20,160 --> 00:13:22,339
and as a result

342
00:13:22,339 --> 00:13:25,079
directly or immediately after a sender

343
00:13:25,079 --> 00:13:26,519
corruption

344
00:13:26,519 --> 00:13:28,560
um there is the possibility that an

345
00:13:28,560 --> 00:13:31,740
anniversary can forge ciphertexts and so

346
00:13:31,740 --> 00:13:33,779
diverge the sender and the receiver

347
00:13:33,779 --> 00:13:36,540
communication somewhat but if the

348
00:13:36,540 --> 00:13:38,339
adversary doesn't take the opportunity

349
00:13:38,339 --> 00:13:41,220
of immediately using the state that is

350
00:13:41,220 --> 00:13:42,860
corrupted on the sender side to

351
00:13:42,860 --> 00:13:45,660
implement an impersonation of the sender

352
00:13:45,660 --> 00:13:48,300
towards the receiver then there is a

353
00:13:48,300 --> 00:13:51,120
there might be an implementation of a of

354
00:13:51,120 --> 00:13:53,579
a key update of a signing key update on

355
00:13:53,579 --> 00:13:56,100
the sender side and so authenticity is

356
00:13:56,100 --> 00:13:58,139
somewhat recovered so in this case for

357
00:13:58,139 --> 00:14:00,660
authenticity we have a strong forward

358
00:14:00,660 --> 00:14:02,399
secrecy and post compromise security

359
00:14:02,399 --> 00:14:05,519
basically for receiver Corruptions but

360
00:14:05,519 --> 00:14:07,860
for Center Corruptions we have this one

361
00:14:07,860 --> 00:14:09,720
exception that immediately after

362
00:14:09,720 --> 00:14:13,399
corruption we can't hope for uh

363
00:14:13,399 --> 00:14:16,079
the possibility that forgeries are

364
00:14:16,079 --> 00:14:19,079
impossible basically this is not new

365
00:14:19,079 --> 00:14:21,060
these traditional security guarantees

366
00:14:21,060 --> 00:14:22,920
have been considered in previous work

367
00:14:22,920 --> 00:14:24,959
and we also know from previous work that

368
00:14:24,959 --> 00:14:26,579
there are efficient constructions for

369
00:14:26,579 --> 00:14:29,600
this unidirectional ratcheting

370
00:14:29,600 --> 00:14:32,760
setting basically relying on public key

371
00:14:32,760 --> 00:14:36,120
encryption and one-time signatures these

372
00:14:36,120 --> 00:14:37,260
constructions at least for the

373
00:14:37,260 --> 00:14:39,120
unidirectional case are extremely

374
00:14:39,120 --> 00:14:43,260
efficient they have an overhead constant

375
00:14:43,260 --> 00:14:46,320
overhead for communication from Alice to

376
00:14:46,320 --> 00:14:47,339
Bob

377
00:14:47,339 --> 00:14:49,380
also the computation is pretty simple

378
00:14:49,380 --> 00:14:52,380
and as you see here as I mentioned also

379
00:14:52,380 --> 00:14:55,920
um the the assumptions are pretty mild

380
00:14:55,920 --> 00:14:58,860
but now as I said what our focus is uh

381
00:14:58,860 --> 00:15:00,720
in this talk here

382
00:15:00,720 --> 00:15:03,540
is that we consider anonymity as a new

383
00:15:03,540 --> 00:15:05,519
goal and before I look at constructions

384
00:15:05,519 --> 00:15:08,100
let's briefly think about which type of

385
00:15:08,100 --> 00:15:10,139
properties or which type of adversary

386
00:15:10,139 --> 00:15:12,899
model we have here so as I mentioned

387
00:15:12,899 --> 00:15:14,880
before the adversary sees all the

388
00:15:14,880 --> 00:15:17,519
traffic but we restrict the adversary to

389
00:15:17,519 --> 00:15:19,500
just see the packets that flow on the

390
00:15:19,500 --> 00:15:22,260
network the adversary cannot see where

391
00:15:22,260 --> 00:15:24,120
these packets come from or where they go

392
00:15:24,120 --> 00:15:24,899
to

393
00:15:24,899 --> 00:15:27,420
that somewhat implicitly assumes that

394
00:15:27,420 --> 00:15:29,459
there is somewhat a mechanism that

395
00:15:29,459 --> 00:15:32,760
routes these uh ciphertexts

396
00:15:32,760 --> 00:15:35,579
um hidden from the adversary from the

397
00:15:35,579 --> 00:15:37,380
sender to the adversary and from the

398
00:15:37,380 --> 00:15:40,019
adversary to the receivers such that

399
00:15:40,019 --> 00:15:42,120
basically as I mentioned the adversary

400
00:15:42,120 --> 00:15:43,380
doesn't know where these packets come

401
00:15:43,380 --> 00:15:45,839
from or where they go to the focus here

402
00:15:45,839 --> 00:15:48,360
is that these packets do not reveal

403
00:15:48,360 --> 00:15:50,160
themselves where they are coming from or

404
00:15:50,160 --> 00:15:51,839
where they are going to so basically

405
00:15:51,839 --> 00:15:53,760
this is the first property we want that

406
00:15:53,760 --> 00:15:56,760
the packets that the messaging Protocols

407
00:15:56,760 --> 00:15:58,620
are sending and receiving they look

408
00:15:58,620 --> 00:16:00,899
random that means that they don't tell

409
00:16:00,899 --> 00:16:03,300
the adversary where they come from where

410
00:16:03,300 --> 00:16:05,519
they go to to which session they belong

411
00:16:05,519 --> 00:16:10,019
or in which place within a session they

412
00:16:10,019 --> 00:16:13,320
are placed so as I said these packets

413
00:16:13,320 --> 00:16:15,420
that these messaging protocols send and

414
00:16:15,420 --> 00:16:17,579
receive they don't tell them that they

415
00:16:17,579 --> 00:16:19,500
don't tell the adversary anything about

416
00:16:19,500 --> 00:16:22,199
their context and so basically they are

417
00:16:22,199 --> 00:16:25,339
required to look random

418
00:16:25,560 --> 00:16:27,839
um as we already know in this messaging

419
00:16:27,839 --> 00:16:30,480
setting corruption uh is realistic or

420
00:16:30,480 --> 00:16:33,240
considered realistic and so

421
00:16:33,240 --> 00:16:35,339
um an adversary may be able to corrupt

422
00:16:35,339 --> 00:16:37,440
senders and receivers

423
00:16:37,440 --> 00:16:39,720
and as a result the adversary sees all

424
00:16:39,720 --> 00:16:41,820
the key material that is stored on a

425
00:16:41,820 --> 00:16:44,160
device but now the problem is that the

426
00:16:44,160 --> 00:16:46,740
scheme material May leak information on

427
00:16:46,740 --> 00:16:49,259
which packets were sent from whom to

428
00:16:49,259 --> 00:16:51,959
whom to which session these packets

429
00:16:51,959 --> 00:16:54,180
belong to and so what we require and

430
00:16:54,180 --> 00:16:55,920
that's basically the second requirement

431
00:16:55,920 --> 00:16:58,800
is that these keys that are stored on a

432
00:16:58,800 --> 00:17:01,320
sender device they look random they

433
00:17:01,320 --> 00:17:02,699
don't tell the adversary to which

434
00:17:02,699 --> 00:17:04,619
session they are or for which session

435
00:17:04,619 --> 00:17:06,720
they are useful they don't tell the

436
00:17:06,720 --> 00:17:08,819
adversary how often this uh the state

437
00:17:08,819 --> 00:17:11,000
material was used so how many

438
00:17:11,000 --> 00:17:13,380
ciphertexts have been sent in a session

439
00:17:13,380 --> 00:17:15,119
between Alice and Bob or how many

440
00:17:15,119 --> 00:17:16,859
ciphertexts have been sent in a session

441
00:17:16,859 --> 00:17:19,140
between Alice and Charlie and so on and

442
00:17:19,140 --> 00:17:21,660
so forth and in addition to that we want

443
00:17:21,660 --> 00:17:24,240
that the sender can create dummy States

444
00:17:24,240 --> 00:17:27,119
because the pure information how many

445
00:17:27,119 --> 00:17:29,100
states or how many how much key material

446
00:17:29,100 --> 00:17:31,380
is stored on a sender device May leak

447
00:17:31,380 --> 00:17:34,080
how many sessions that the user has so

448
00:17:34,080 --> 00:17:36,120
basically the sender should be able to

449
00:17:36,120 --> 00:17:37,980
create new States

450
00:17:37,980 --> 00:17:41,760
that look just the same as the real

451
00:17:41,760 --> 00:17:45,120
States and so we can fill and Pad all

452
00:17:45,120 --> 00:17:47,039
the key materials stored on one device

453
00:17:47,039 --> 00:17:49,799
such that the adversary can basically

454
00:17:49,799 --> 00:17:52,500
deny or hide how many sessions are

455
00:17:52,500 --> 00:17:55,140
running on that device a second proper

456
00:17:55,140 --> 00:17:57,120
or a final property that we want to have

457
00:17:57,120 --> 00:17:59,039
is that the key material on the sender

458
00:17:59,039 --> 00:18:01,980
device is updatable and the motivation

459
00:18:01,980 --> 00:18:04,860
for this is that of course whenever a

460
00:18:04,860 --> 00:18:07,260
session is used so whenever Alice sends

461
00:18:07,260 --> 00:18:09,780
a message to Bob then the key material

462
00:18:09,780 --> 00:18:12,179
for that particular session is updated

463
00:18:12,179 --> 00:18:15,000
but we want that also all the remaining

464
00:18:15,000 --> 00:18:18,059
session States also the dummy States can

465
00:18:18,059 --> 00:18:20,400
be updated such that whenever the

466
00:18:20,400 --> 00:18:22,980
adversary looks once on the state and

467
00:18:22,980 --> 00:18:26,520
there is there is one session State used

468
00:18:26,520 --> 00:18:29,160
for sending real information but the

469
00:18:29,160 --> 00:18:31,400
other session states are just randomly

470
00:18:31,400 --> 00:18:34,679
updated then the advisor shouldn't know

471
00:18:34,679 --> 00:18:36,660
which of these states were used for real

472
00:18:36,660 --> 00:18:38,700
sending and which of them were used for

473
00:18:38,700 --> 00:18:41,640
updating such that the adversary doesn't

474
00:18:41,640 --> 00:18:44,460
know how many ciphertexts have been sent

475
00:18:44,460 --> 00:18:46,860
in the session and in which sessions of

476
00:18:46,860 --> 00:18:49,140
a sender these ciphertexts have been

477
00:18:49,140 --> 00:18:50,160
sent

478
00:18:50,160 --> 00:18:52,140
and for all of these properties we want

479
00:18:52,140 --> 00:18:53,520
to have forward secrecy and post

480
00:18:53,520 --> 00:18:55,440
compromise security

481
00:18:55,440 --> 00:18:57,660
which means that we want to have that

482
00:18:57,660 --> 00:18:59,580
the traffic looks random that the

483
00:18:59,580 --> 00:19:01,679
secrets look random that we have

484
00:19:01,679 --> 00:19:04,260
randomizable dummy States on a sender

485
00:19:04,260 --> 00:19:07,020
device and that the secrets and the

486
00:19:07,020 --> 00:19:09,840
traffic are independent of each other as

487
00:19:09,840 --> 00:19:12,240
strong as we can go with corruption and

488
00:19:12,240 --> 00:19:14,340
with uh letting the adversary see all

489
00:19:14,340 --> 00:19:17,640
that information so as a result we want

490
00:19:17,640 --> 00:19:19,340
to have strongest security

491
00:19:19,340 --> 00:19:22,080
so everything that can heal on the

492
00:19:22,080 --> 00:19:24,360
sender side should heal everything that

493
00:19:24,360 --> 00:19:26,580
can heal on the receiver side should

494
00:19:26,580 --> 00:19:29,039
heal I won't be able to give you the

495
00:19:29,039 --> 00:19:30,380
details

496
00:19:30,380 --> 00:19:33,960
how how the how how trivial attacks look

497
00:19:33,960 --> 00:19:38,400
in that setting and how uh how precisely

498
00:19:38,400 --> 00:19:41,340
we can recover from Corruptions on the

499
00:19:41,340 --> 00:19:43,320
sender or receiver side but what we

500
00:19:43,320 --> 00:19:45,059
basically do in our paper and you have

501
00:19:45,059 --> 00:19:47,760
to look into the details for that is we

502
00:19:47,760 --> 00:19:49,380
look for the strongest corruption model

503
00:19:49,380 --> 00:19:52,380
we look for the strongest adversary

504
00:19:52,380 --> 00:19:54,720
model in that sense that whenever it is

505
00:19:54,720 --> 00:19:56,820
possible trap traffic Secrets look

506
00:19:56,820 --> 00:19:58,919
random and are independent of each other

507
00:19:58,919 --> 00:20:01,440
okay so this is

508
00:20:01,440 --> 00:20:03,720
everything that I want to say about the

509
00:20:03,720 --> 00:20:06,780
the security setting let me briefly give

510
00:20:06,780 --> 00:20:09,600
you some ideas of our construction

511
00:20:09,600 --> 00:20:11,340
um I won't go into the details how the

512
00:20:11,340 --> 00:20:13,799
construction looks like but we have two

513
00:20:13,799 --> 00:20:16,620
uh building blocks that I think are

514
00:20:16,620 --> 00:20:18,660
somewhat interesting the first building

515
00:20:18,660 --> 00:20:21,179
block is public key encryption and for

516
00:20:21,179 --> 00:20:22,860
the public key encryption we have the

517
00:20:22,860 --> 00:20:24,480
encryption key stored on the sender

518
00:20:24,480 --> 00:20:26,700
device and the decryption key stored on

519
00:20:26,700 --> 00:20:29,580
the receiver device and so since we want

520
00:20:29,580 --> 00:20:31,500
to have that the state the sender state

521
00:20:31,500 --> 00:20:33,539
is re-randomizable our public key

522
00:20:33,539 --> 00:20:35,820
encryption scheme should allow us to

523
00:20:35,820 --> 00:20:39,600
update the encryption key such that two

524
00:20:39,600 --> 00:20:42,360
encryption keys are cannot be put into

525
00:20:42,360 --> 00:20:44,820
relation so basically whenever we update

526
00:20:44,820 --> 00:20:46,679
them it's unclear whether this is a

527
00:20:46,679 --> 00:20:48,360
fresh key whether this is an independent

528
00:20:48,360 --> 00:20:50,100
key or whether this is just an updated

529
00:20:50,100 --> 00:20:52,740
key from a priority

530
00:20:52,740 --> 00:20:55,200
for this the keys look as follows an

531
00:20:55,200 --> 00:20:57,299
encryption key consists of two

532
00:20:57,299 --> 00:20:59,039
components the first component is the

533
00:20:59,039 --> 00:21:01,020
generator raised to a random exponent

534
00:21:01,020 --> 00:21:02,820
and the second component is the same

535
00:21:02,820 --> 00:21:04,980
generator raised to the same random

536
00:21:04,980 --> 00:21:07,799
exponent and at times the um the

537
00:21:07,799 --> 00:21:10,020
decryption key which is the the exponent

538
00:21:10,020 --> 00:21:11,520
x

539
00:21:11,520 --> 00:21:14,460
whenever we want to update the

540
00:21:14,460 --> 00:21:16,140
encryption key we take the two

541
00:21:16,140 --> 00:21:19,679
components and reg erase each of them to

542
00:21:19,679 --> 00:21:22,440
the power of the same random exponent

543
00:21:22,440 --> 00:21:25,559
which means that basically after a

544
00:21:25,559 --> 00:21:29,240
couple of key updates the encryption key

545
00:21:29,240 --> 00:21:32,700
is the generator raised to a large

546
00:21:32,700 --> 00:21:36,600
product of exponents R and the second

547
00:21:36,600 --> 00:21:38,880
component is the same generator raised

548
00:21:38,880 --> 00:21:42,179
to the same large product of random

549
00:21:42,179 --> 00:21:46,940
exponents times the decryption key X

550
00:21:46,940 --> 00:21:49,740
encryption and decryption are somewhat

551
00:21:49,740 --> 00:21:52,860
simple the ciphertext consists also of

552
00:21:52,860 --> 00:21:54,900
two components the first component is

553
00:21:54,900 --> 00:21:56,760
the first encryption key component

554
00:21:56,760 --> 00:21:59,580
raised to a random exponent s and the

555
00:21:59,580 --> 00:22:01,620
second component is the message xoid

556
00:22:01,620 --> 00:22:03,600
with a hash function which is a random

557
00:22:03,600 --> 00:22:05,280
Oracle in our setting

558
00:22:05,280 --> 00:22:08,220
which is feeded by the first encryption

559
00:22:08,220 --> 00:22:10,740
component raised to a random exponent

560
00:22:10,740 --> 00:22:14,159
and the second encryption key component

561
00:22:14,159 --> 00:22:17,760
raised to the same exponent as

562
00:22:17,760 --> 00:22:20,700
okay so for decryption we have to remind

563
00:22:20,700 --> 00:22:22,620
ourselves that these are the two

564
00:22:22,620 --> 00:22:24,840
components of the ciphertext

565
00:22:24,840 --> 00:22:26,820
now in order to obtain the message back

566
00:22:26,820 --> 00:22:28,799
we take the second component of the

567
00:22:28,799 --> 00:22:30,780
ciphertext and X or it with the hash

568
00:22:30,780 --> 00:22:33,960
function evaluated on the first

569
00:22:33,960 --> 00:22:36,840
component of the cipher text first input

570
00:22:36,840 --> 00:22:38,940
to the hash function plainly and then

571
00:22:38,940 --> 00:22:42,059
second input to the hash function is the

572
00:22:42,059 --> 00:22:43,980
first component of the ciphertext Rays

573
00:22:43,980 --> 00:22:45,600
to the decryption key

574
00:22:45,600 --> 00:22:49,740
and due to the computations we just did

575
00:22:49,740 --> 00:22:52,799
we have the hash function uh evaluated

576
00:22:52,799 --> 00:22:55,140
twice in that formula and the two

577
00:22:55,140 --> 00:22:57,419
evaluations basically erase each other

578
00:22:57,419 --> 00:23:00,900
such that the result is the message

579
00:23:00,900 --> 00:23:03,900
okay this is the simple idea of the

580
00:23:03,900 --> 00:23:05,580
public key encryption scheme that relies

581
00:23:05,580 --> 00:23:08,100
on ddh is super simple

582
00:23:08,100 --> 00:23:10,679
and very efficient there are some

583
00:23:10,679 --> 00:23:13,140
slightly more evolved public key

584
00:23:13,140 --> 00:23:15,299
encryption components in our scheme but

585
00:23:15,299 --> 00:23:17,760
all of them are rather efficient the

586
00:23:17,760 --> 00:23:19,260
second component is slightly more

587
00:23:19,260 --> 00:23:21,659
evolved this is the digital signature

588
00:23:21,659 --> 00:23:24,840
scheme and again uh we have that there

589
00:23:24,840 --> 00:23:27,659
is a chat question I just quickly erased

590
00:23:27,659 --> 00:23:29,760
that thank you

591
00:23:29,760 --> 00:23:30,419
um

592
00:23:30,419 --> 00:23:33,419
there is uh the the digital signature

593
00:23:33,419 --> 00:23:36,120
scheme and as I mentioned in that

594
00:23:36,120 --> 00:23:37,679
setting where we have unidirectional

595
00:23:37,679 --> 00:23:39,539
communication from the sender to the

596
00:23:39,539 --> 00:23:42,539
receiver the sender usually stores the

597
00:23:42,539 --> 00:23:44,340
signing key as we do it in our

598
00:23:44,340 --> 00:23:46,020
construction and the receiver stores the

599
00:23:46,020 --> 00:23:48,360
verification key but we wanted to have

600
00:23:48,360 --> 00:23:49,860
that the sender State can be

601
00:23:49,860 --> 00:23:52,140
re-randomized and so what we want to

602
00:23:52,140 --> 00:23:55,500
have in that setting is that uh the the

603
00:23:55,500 --> 00:23:57,600
signing key can be updated

604
00:23:57,600 --> 00:23:59,400
and in order to understand how our

605
00:23:59,400 --> 00:24:01,559
signing key looks uh signing a signature

606
00:24:01,559 --> 00:24:02,940
scheme looks like

607
00:24:02,940 --> 00:24:06,360
we uh first take a look at the Lampard

608
00:24:06,360 --> 00:24:08,159
signature scheme the Lampard signature

609
00:24:08,159 --> 00:24:10,740
scheme consists of a bunch of random

610
00:24:10,740 --> 00:24:13,260
values that are that together compose

611
00:24:13,260 --> 00:24:16,440
the signing key so it's basically two

612
00:24:16,440 --> 00:24:19,860
vectors of random values uh that have

613
00:24:19,860 --> 00:24:22,620
the length l so basically we have 2

614
00:24:22,620 --> 00:24:25,620
times L random values stored as the

615
00:24:25,620 --> 00:24:28,380
signing key and the verification key is

616
00:24:28,380 --> 00:24:31,380
composed of each of these random values

617
00:24:31,380 --> 00:24:33,780
evaluated with a one-time uh with a one

618
00:24:33,780 --> 00:24:37,200
wave function and that's a pretty simple

619
00:24:37,200 --> 00:24:40,320
we slightly changed that Lampard

620
00:24:40,320 --> 00:24:42,539
signature scheme to make it an encrypted

621
00:24:42,539 --> 00:24:45,059
Lampard scheme in which we basically

622
00:24:45,059 --> 00:24:47,520
encrypt all the components of the

623
00:24:47,520 --> 00:24:50,280
signing key with one encryption key

624
00:24:50,280 --> 00:24:53,159
such that all of these random values are

625
00:24:53,159 --> 00:24:55,020
encrypted to a ciphertext and now the

626
00:24:55,020 --> 00:24:57,900
new signing key is just the composition

627
00:24:57,900 --> 00:25:00,659
of or the collection of all of these uh

628
00:25:00,659 --> 00:25:02,640
encrypted random values which are

629
00:25:02,640 --> 00:25:04,080
ciphertexts

630
00:25:04,080 --> 00:25:06,059
the verification key is also slightly

631
00:25:06,059 --> 00:25:08,760
adapted it consists of the Lampard

632
00:25:08,760 --> 00:25:11,580
verification key plus the decryption key

633
00:25:11,580 --> 00:25:13,919
that fits to the encryption key with

634
00:25:13,919 --> 00:25:18,419
which we encrypted the random values for

635
00:25:18,419 --> 00:25:21,960
um uh for the for the signing key

636
00:25:21,960 --> 00:25:24,179
okay at the top of the slide nothing

637
00:25:24,179 --> 00:25:26,279
changed it's just a repetition from the

638
00:25:26,279 --> 00:25:29,100
last slide that we have now the signing

639
00:25:29,100 --> 00:25:31,620
key being consistent consisting of the

640
00:25:31,620 --> 00:25:34,740
ciphertexts that are encryptions of the

641
00:25:34,740 --> 00:25:36,480
random values and the verification keys

642
00:25:36,480 --> 00:25:39,720
that just uh all of these components uh

643
00:25:39,720 --> 00:25:41,760
all of these random values component

644
00:25:41,760 --> 00:25:43,500
wise being evaluated with a one-way

645
00:25:43,500 --> 00:25:46,039
function now in order to sign a message

646
00:25:46,039 --> 00:25:49,679
that consists of a bit Vector of L bits

647
00:25:49,679 --> 00:25:52,559
we take all of these bits and use them

648
00:25:52,559 --> 00:25:55,080
for choosing the right ciphertext

649
00:25:55,080 --> 00:25:57,900
components from the signing key this is

650
00:25:57,900 --> 00:26:00,840
just purely an evaluation of the Lampard

651
00:26:00,840 --> 00:26:03,919
signature scheme just that we don't have

652
00:26:03,919 --> 00:26:06,600
plain random values but encrypted random

653
00:26:06,600 --> 00:26:11,059
values now only we have to note that

654
00:26:11,059 --> 00:26:14,580
these components of this the signature

655
00:26:14,580 --> 00:26:16,740
Vector are the encryptions of these

656
00:26:16,740 --> 00:26:18,120
random values

657
00:26:18,120 --> 00:26:20,960
and now for verification we simply

658
00:26:20,960 --> 00:26:24,179
component wise check whether the

659
00:26:24,179 --> 00:26:28,260
decryption of a of each ciphertext value

660
00:26:28,260 --> 00:26:31,320
of the signature Vector evaluated with

661
00:26:31,320 --> 00:26:33,720
the one one-way function equals the

662
00:26:33,720 --> 00:26:35,520
component of the corresponding

663
00:26:35,520 --> 00:26:38,340
verification key based on which message

664
00:26:38,340 --> 00:26:42,779
uh bits we are evaluating so it's more

665
00:26:42,779 --> 00:26:45,059
or less the same as Lampard signatures

666
00:26:45,059 --> 00:26:48,360
only that we encrypt the components in

667
00:26:48,360 --> 00:26:49,620
the signing key

668
00:26:49,620 --> 00:26:51,960
but as I mentioned before for our

669
00:26:51,960 --> 00:26:54,120
setting we want that the signing key can

670
00:26:54,120 --> 00:26:57,120
be re-randomized so what we simply do is

671
00:26:57,120 --> 00:26:59,120
we take a

672
00:26:59,120 --> 00:27:01,620
re-randomizable encryption scheme again

673
00:27:01,620 --> 00:27:04,080
that encryption scheme relies on dgh and

674
00:27:04,080 --> 00:27:07,020
is super efficient and we component wise

675
00:27:07,020 --> 00:27:09,840
we randomize all the cipher texts that

676
00:27:09,840 --> 00:27:12,659
are stored in the signing key Matrix and

677
00:27:12,659 --> 00:27:14,580
then due to or after such a

678
00:27:14,580 --> 00:27:17,220
re-randomization we compose uh the new

679
00:27:17,220 --> 00:27:19,020
signing key the re-randomized signing

680
00:27:19,020 --> 00:27:21,539
key basically again component wise with

681
00:27:21,539 --> 00:27:24,360
the re-randomized ciphertexts that is

682
00:27:24,360 --> 00:27:27,120
super simple but as you see here the

683
00:27:27,120 --> 00:27:28,679
signing key is pretty large the

684
00:27:28,679 --> 00:27:30,900
verification key is pretty large and

685
00:27:30,900 --> 00:27:34,140
also the signature is rather large

686
00:27:34,140 --> 00:27:36,539
so ideally we want to have compact

687
00:27:36,539 --> 00:27:38,880
signatures and indeed we can obtain this

688
00:27:38,880 --> 00:27:41,760
by somewhat aggregating the ciphertexts

689
00:27:41,760 --> 00:27:44,279
from the vector of this uh of the

690
00:27:44,279 --> 00:27:46,799
signature and the basic idea that is

691
00:27:46,799 --> 00:27:49,260
underlying to this aggregation is that

692
00:27:49,260 --> 00:27:52,740
we use com Concepts from BLS signatures

693
00:27:52,740 --> 00:27:55,320
and use the aggregation trick that is

694
00:27:55,320 --> 00:27:59,940
used for BLS signatures and also uh what

695
00:27:59,940 --> 00:28:01,679
we need to do then is for verification

696
00:28:01,679 --> 00:28:03,419
we need to make sure that the

697
00:28:03,419 --> 00:28:06,299
verification still works so the receiver

698
00:28:06,299 --> 00:28:09,440
in order to verify only now obtains one

699
00:28:09,440 --> 00:28:13,020
signing or one signature component and

700
00:28:13,020 --> 00:28:15,240
now when we decrypt that signature

701
00:28:15,240 --> 00:28:17,159
component evaluated with the one-way

702
00:28:17,159 --> 00:28:20,340
function uh then also the aggregation of

703
00:28:20,340 --> 00:28:22,260
the ramification keys on the other side

704
00:28:22,260 --> 00:28:23,400
should work

705
00:28:23,400 --> 00:28:26,580
and this again uses the same BLS

706
00:28:26,580 --> 00:28:28,679
aggregation trick but as you see here

707
00:28:28,679 --> 00:28:31,500
also as you probably know BLS signatures

708
00:28:31,500 --> 00:28:34,200
rely on pairings and so our compact

709
00:28:34,200 --> 00:28:38,279
signature or the the slightly adapted uh

710
00:28:38,279 --> 00:28:40,320
aggregated variant of our encrypted

711
00:28:40,320 --> 00:28:43,679
landport scheme relies on pairings

712
00:28:43,679 --> 00:28:46,980
I quickly summarize the performance of

713
00:28:46,980 --> 00:28:49,559
our scheme which is dominated by the

714
00:28:49,559 --> 00:28:51,840
performance of the signature scheme so

715
00:28:51,840 --> 00:28:54,600
for sending between Alice and Bob in our

716
00:28:54,600 --> 00:28:57,120
big messaging scheme unidirectional from

717
00:28:57,120 --> 00:29:00,299
Alice to Bob the performance for

718
00:29:00,299 --> 00:29:03,720
computation is dominated by the signing

719
00:29:03,720 --> 00:29:07,380
algorithm which consists of 4L group

720
00:29:07,380 --> 00:29:09,799
operations and

721
00:29:09,799 --> 00:29:12,840
the ciphertext that is sent from Alice

722
00:29:12,840 --> 00:29:16,100
to Bob is basically dominated

723
00:29:16,100 --> 00:29:19,799
asymptotically by the size of the the

724
00:29:19,799 --> 00:29:22,200
verification key that is updated with

725
00:29:22,200 --> 00:29:24,120
every sending from sender to receiver

726
00:29:24,120 --> 00:29:27,240
and these verification Keys consist of

727
00:29:27,240 --> 00:29:30,380
two L group elements and for receiving

728
00:29:30,380 --> 00:29:32,580
the basic

729
00:29:32,580 --> 00:29:35,700
um or the the the dominating performance

730
00:29:35,700 --> 00:29:39,059
value is the group operations performed

731
00:29:39,059 --> 00:29:41,460
for verify verifying the signature and

732
00:29:41,460 --> 00:29:44,279
that requires 2L group of operations

733
00:29:44,279 --> 00:29:47,640
where L is basically linear in the in

734
00:29:47,640 --> 00:29:49,980
the security parameter all the details

735
00:29:49,980 --> 00:29:52,679
are on ePrint of course and uh yeah

736
00:29:52,679 --> 00:29:55,260
extending work may look at how to extend

737
00:29:55,260 --> 00:29:57,120
that to a bi-directional communication

738
00:29:57,120 --> 00:30:00,000
setting and also how to consider all the

739
00:30:00,000 --> 00:30:01,919
remaining protocols that are involved in

740
00:30:01,919 --> 00:30:04,559
such a messaging case but I think for

741
00:30:04,559 --> 00:30:08,220
strict or strong security we provide a

742
00:30:08,220 --> 00:30:10,080
first perspective on how strong

743
00:30:10,080 --> 00:30:12,899
anonymity that uses the strength of key

744
00:30:12,899 --> 00:30:16,080
updates in messaging may look like thank

745
00:30:16,080 --> 00:30:17,820
you very much for your attention and I'm

746
00:30:17,820 --> 00:30:19,919
happy to take question also Edward is

747
00:30:19,919 --> 00:30:22,679
maybe in the chat and can support me in

748
00:30:22,679 --> 00:30:25,520
answering your questions

749
00:30:29,960 --> 00:30:32,700
hey thanks Paula

750
00:30:32,700 --> 00:30:34,500
um again we only have like a couple of

751
00:30:34,500 --> 00:30:36,600
seconds for a quick question if someone

752
00:30:36,600 --> 00:30:39,080
has one

753
00:30:40,559 --> 00:30:41,820
it's definitely I'm even asking for

754
00:30:41,820 --> 00:30:44,100
quick questions uh I have what I've uh

755
00:30:44,100 --> 00:30:45,360
very short one maybe

756
00:30:45,360 --> 00:30:47,820
um so the the rear randomization step uh

757
00:30:47,820 --> 00:30:49,440
or the reorganization of the state you

758
00:30:49,440 --> 00:30:52,740
need uh to get anonymity could you

759
00:30:52,740 --> 00:30:54,539
comment on how that would look like in

760
00:30:54,539 --> 00:30:56,220
practice would that happen with like

761
00:30:56,220 --> 00:30:58,919
every operation you do or

762
00:30:58,919 --> 00:31:01,080
so we basically do it with every

763
00:31:01,080 --> 00:31:04,260
operation just for ascending but that

764
00:31:04,260 --> 00:31:07,799
only then looks at the particular state

765
00:31:07,799 --> 00:31:09,299
that is used for sending in that

766
00:31:09,299 --> 00:31:11,640
particular session but also since we

767
00:31:11,640 --> 00:31:13,500
probably want to hide how often we send

768
00:31:13,500 --> 00:31:15,360
in one session or which sessions we

769
00:31:15,360 --> 00:31:16,740
actually use and maybe which other

770
00:31:16,740 --> 00:31:18,960
sessions uh we didn't use for a long

771
00:31:18,960 --> 00:31:21,600
time there might be something like a

772
00:31:21,600 --> 00:31:24,240
time-based re-randomization algorithm

773
00:31:24,240 --> 00:31:26,279
that runs on all of the states or maybe

774
00:31:26,279 --> 00:31:29,640
a randomized algorithm that uh sometimes

775
00:31:29,640 --> 00:31:33,539
or irregularly updates some of the

776
00:31:33,539 --> 00:31:34,980
session states that haven't been used

777
00:31:34,980 --> 00:31:37,740
for a long time but since none of these

778
00:31:37,740 --> 00:31:39,960
session States reveals how often these

779
00:31:39,960 --> 00:31:41,940
states were used but just the pure fact

780
00:31:41,940 --> 00:31:44,580
that they look different from the time

781
00:31:44,580 --> 00:31:47,340
that they haven't been used before

782
00:31:47,340 --> 00:31:50,460
um uh generally our states hide already

783
00:31:50,460 --> 00:31:51,960
how often they have been used that's

784
00:31:51,960 --> 00:31:55,500
repetitive sorry but uh since we want to

785
00:31:55,500 --> 00:31:58,380
hide uh also yeah how many how often all

786
00:31:58,380 --> 00:32:00,360
the other states have been used there

787
00:32:00,360 --> 00:32:01,980
might be different algorithms or

788
00:32:01,980 --> 00:32:03,659
different procedures how often you want

789
00:32:03,659 --> 00:32:06,480
to want to do that but yeah that's up to

790
00:32:06,480 --> 00:32:07,679
the developer

791
00:32:07,679 --> 00:32:09,480
okay thanks

792
00:32:09,480 --> 00:32:11,279
okay thank you very much let's thank

793
00:32:11,279 --> 00:32:12,419
Paul again

794
00:32:12,419 --> 00:32:14,539
um

795
00:32:17,940 --> 00:32:22,159
and let's proceed to the third talk

796
00:32:27,960 --> 00:32:30,480
right so the third talk is on encryption

797
00:32:30,480 --> 00:32:34,020
to the Future and understanding is going

798
00:32:34,020 --> 00:32:36,600
to talk uh where we see him on my laptop

799
00:32:36,600 --> 00:32:40,340
so under uh take it away

800
00:32:40,740 --> 00:32:42,899
thank you Felix

801
00:32:42,899 --> 00:32:45,600
I hope you all can hear me so I'm here

802
00:32:45,600 --> 00:32:47,159
to present the paper encryption to the

803
00:32:47,159 --> 00:32:49,020
Future um on behalf of me and Mike

804
00:32:49,020 --> 00:32:51,440
authors

805
00:33:01,980 --> 00:33:04,760
I think you're breaking up actually

806
00:33:04,760 --> 00:33:07,320
connection seems

807
00:33:07,320 --> 00:33:10,279
seems to be breaking up

808
00:33:13,500 --> 00:33:16,860
can we try one more time

809
00:33:16,860 --> 00:33:18,899
okay we we hear you again maybe switch

810
00:33:18,899 --> 00:33:20,399
off the video for now because that seems

811
00:33:20,399 --> 00:33:22,559
to be freezing um and try on the audio

812
00:33:22,559 --> 00:33:24,240
alone

813
00:33:24,240 --> 00:33:26,899
cool

814
00:33:27,120 --> 00:33:29,159
I'll try again please interrupt me if

815
00:33:29,159 --> 00:33:32,539
there's something okay

816
00:33:34,380 --> 00:33:35,760
So In traditional and you see there's

817
00:33:35,760 --> 00:33:37,380
often this underlying assumption that we

818
00:33:37,380 --> 00:33:39,299
have access to this sort of reliable

819
00:33:39,299 --> 00:33:42,419
nodes and we have a network that can be

820
00:33:42,419 --> 00:33:45,480
represented by a fully connected graph

821
00:33:45,480 --> 00:33:48,299
when orienting the images are almost

822
00:33:48,299 --> 00:33:50,460
always different so we have access to

823
00:33:50,460 --> 00:33:52,279
this heterogeneous

824
00:33:52,279 --> 00:33:55,080
networks that are composed of nodes that

825
00:33:55,080 --> 00:33:57,240
join and leave all the time

826
00:33:57,240 --> 00:33:59,940
and can be subject to Ted's attacks or

827
00:33:59,940 --> 00:34:03,539
even more powerful adversary strategies

828
00:34:03,539 --> 00:34:05,940
so with the Abundant blockchains without

829
00:34:05,940 --> 00:34:09,540
only any digital currencies and nfts but

830
00:34:09,540 --> 00:34:11,540
we also

831
00:34:11,540 --> 00:34:14,280
coordination platforms for minors and

832
00:34:14,280 --> 00:34:16,080
stakeholders that can be used to tame

833
00:34:16,080 --> 00:34:17,639
these selection Networks

834
00:34:17,639 --> 00:34:21,239
so blockchains are these PHP networks

835
00:34:21,239 --> 00:34:22,800
with continuous layer that has some nice

836
00:34:22,800 --> 00:34:25,859
properties what is the lottery mechanism

837
00:34:25,859 --> 00:34:27,960
that is often used to select the party

838
00:34:27,960 --> 00:34:31,699
who's going to propose the next block

839
00:34:35,879 --> 00:34:38,418
on network

840
00:34:42,060 --> 00:34:44,940
s we use this or repurpose this

841
00:34:44,940 --> 00:34:46,619
blockchain infrastructure to orchestrate

842
00:34:46,619 --> 00:34:48,839
MPC and the sequence of web starting

843
00:34:48,839 --> 00:34:50,699
with the caliber chain Cube secret and

844
00:34:50,699 --> 00:34:53,820
going through the eoso paper and even

845
00:34:53,820 --> 00:34:55,980
the fluid Embassy paper has answered

846
00:34:55,980 --> 00:34:57,660
this question with the yes that we can

847
00:34:57,660 --> 00:34:59,940
conduct some kind of SQL sharing or MC

848
00:34:59,940 --> 00:35:03,180
on top of these

849
00:35:03,180 --> 00:35:06,180
uh

850
00:35:11,579 --> 00:35:14,520
I think your audio is if you're using a

851
00:35:14,520 --> 00:35:17,300
Bluetooth microphone try without it

852
00:35:17,300 --> 00:35:20,480
thank you

853
00:35:32,220 --> 00:35:35,640
I'm trying again can you hear me

854
00:35:35,640 --> 00:35:38,460
yes we hear you again

855
00:35:38,460 --> 00:35:40,140
okay

856
00:35:40,140 --> 00:35:42,980
I'll try again

857
00:35:48,300 --> 00:35:50,160
so in particular in the in the use of

858
00:35:50,160 --> 00:35:52,740
paper there is this uh they're trying to

859
00:35:52,740 --> 00:35:54,359
conduct Embassy in the presence of a

860
00:35:54,359 --> 00:35:57,599
mobile adversary and this is in

861
00:35:57,599 --> 00:36:00,240
protocol so in particular there's has to

862
00:36:00,240 --> 00:36:02,040
be some limited interaction pattern and

863
00:36:02,040 --> 00:36:03,839
the party can only speak once otherwise

864
00:36:03,839 --> 00:36:05,400
it would be subject to immediate

865
00:36:05,400 --> 00:36:08,040
corruption after it spoke

866
00:36:08,040 --> 00:36:10,140
um another thing is that the adversary

867
00:36:10,140 --> 00:36:13,940
cannot know when

868
00:36:17,339 --> 00:36:19,200
they make it at random and has to be

869
00:36:19,200 --> 00:36:21,000
anonymous until they speak

870
00:36:21,000 --> 00:36:23,520
so this gives us also some interesting

871
00:36:23,520 --> 00:36:26,460
side effects uh this design

872
00:36:26,460 --> 00:36:29,579
um in particular that these networks

873
00:36:29,579 --> 00:36:33,560
have the support for

874
00:36:35,640 --> 00:36:38,820
nodes at any time and also there are

875
00:36:38,820 --> 00:36:40,680
some scalability benefits because these

876
00:36:40,680 --> 00:36:42,720
large networks allows for sampling small

877
00:36:42,720 --> 00:36:44,579
companies with the right distribution

878
00:36:44,579 --> 00:36:46,920
with high probability such that we can

879
00:36:46,920 --> 00:36:49,700
conduct a SQL sharing or NPC

880
00:36:49,700 --> 00:36:53,040
with small countries that are popular in

881
00:36:53,040 --> 00:36:55,880
size of the whole network

882
00:36:55,920 --> 00:36:57,540
so in the also you see they also

883
00:36:57,540 --> 00:36:59,160
distinguish between some called role

884
00:36:59,160 --> 00:37:01,380
execution and roll assign

885
00:37:01,380 --> 00:37:03,720
ment so rolling execution in just having

886
00:37:03,720 --> 00:37:07,280
machines executing the role

887
00:37:07,280 --> 00:37:10,200
protocol specifies basically

888
00:37:10,200 --> 00:37:12,180
the role assignment is associating a

889
00:37:12,180 --> 00:37:14,880
machine on the network the slash network

890
00:37:14,880 --> 00:37:17,460
with the role in the protocol but also

891
00:37:17,460 --> 00:37:19,680
establishing a receiver Anonymous

892
00:37:19,680 --> 00:37:22,220
Channel Through The Machine

893
00:37:22,220 --> 00:37:24,960
we don't want to rely on full witness

894
00:37:24,960 --> 00:37:27,180
encryption to establish this receiver

895
00:37:27,180 --> 00:37:29,180
Anonymous channels because that would

896
00:37:29,180 --> 00:37:32,640
entail using a heavy cryptographic tools

897
00:37:32,640 --> 00:37:35,820
such as military linear Maps also we

898
00:37:35,820 --> 00:37:37,680
don't want to use China Apostles because

899
00:37:37,680 --> 00:37:40,740
if an adversary puts in enough resources

900
00:37:40,740 --> 00:37:44,040
then it would also be able to receive

901
00:37:44,040 --> 00:37:46,320
whatever is in the in the channel and we

902
00:37:46,320 --> 00:37:47,700
might not want that

903
00:37:47,700 --> 00:37:49,380
so

904
00:37:49,380 --> 00:37:50,420
um our

905
00:37:50,420 --> 00:37:53,040
work can actually be seen as a

906
00:37:53,040 --> 00:37:55,200
generalization of Road assignment so

907
00:37:55,200 --> 00:37:56,700
we're much about it motivated by this

908
00:37:56,700 --> 00:37:58,680
question of transforming secret state to

909
00:37:58,680 --> 00:38:00,180
Future communities

910
00:38:00,180 --> 00:38:02,780
so we both consider Anonymous

911
00:38:02,780 --> 00:38:06,119
and transparent Community selection we

912
00:38:06,119 --> 00:38:07,859
also receive and look at the difference

913
00:38:07,859 --> 00:38:10,200
between sending state to the near future

914
00:38:10,200 --> 00:38:12,900
versus the far future and we investigate

915
00:38:12,900 --> 00:38:15,480
the need for auxiliary committees when

916
00:38:15,480 --> 00:38:18,680
we carry the state into the future

917
00:38:18,680 --> 00:38:21,240
so our main contributions can be listed

918
00:38:21,240 --> 00:38:22,380
as follows

919
00:38:22,380 --> 00:38:24,359
we have building questions in the near

920
00:38:24,359 --> 00:38:26,820
future where we have a known stake

921
00:38:26,820 --> 00:38:28,260
distribution

922
00:38:28,260 --> 00:38:30,780
um we can we surely instantiate yourself

923
00:38:30,780 --> 00:38:32,700
using our encryption to the near future

924
00:38:32,700 --> 00:38:36,660
and with an underlying anonymous lottery

925
00:38:36,660 --> 00:38:40,320
we also introduce a relaxed version of

926
00:38:40,320 --> 00:38:42,240
wooden subscription that we call witness

927
00:38:42,240 --> 00:38:44,579
encryption over commitments and we use

928
00:38:44,579 --> 00:38:47,540
this witness encryption over commitments

929
00:38:47,540 --> 00:38:49,400
to

930
00:38:49,400 --> 00:38:51,960
obtain our equations in the future this

931
00:38:51,960 --> 00:38:53,280
weakness encryptional commitments can

932
00:38:53,280 --> 00:38:54,180
then enter

933
00:38:54,180 --> 00:38:55,800
[Music]

934
00:38:55,800 --> 00:38:58,140
and only a previous transfer in couple

935
00:38:58,140 --> 00:38:59,400
circuits

936
00:38:59,400 --> 00:39:02,400
for the encryption to the far future if

937
00:39:02,400 --> 00:39:04,740
you don't outsell allow ourselves to use

938
00:39:04,740 --> 00:39:07,200
auxiliary committees then we show that

939
00:39:07,200 --> 00:39:08,579
we have something equivalent to

940
00:39:08,579 --> 00:39:10,079
blockchain witness encryption which is

941
00:39:10,079 --> 00:39:11,640
the premise of that we described in the

942
00:39:11,640 --> 00:39:16,160
paper but it's introduced by goyal

943
00:39:16,500 --> 00:39:17,900
um

944
00:39:17,900 --> 00:39:21,060
our search to have an interaction with

945
00:39:21,060 --> 00:39:23,940
auxiliary cavities then we show that we

946
00:39:23,940 --> 00:39:26,880
have a construction based on encryption

947
00:39:26,880 --> 00:39:29,160
to the near future and threshold

948
00:39:29,160 --> 00:39:31,040
identity based encryption

949
00:39:31,040 --> 00:39:33,300
importantly this construction that we

950
00:39:33,300 --> 00:39:36,900
have here is has a

951
00:39:36,900 --> 00:39:39,180
it's basically the communication that

952
00:39:39,180 --> 00:39:40,800
needs to or the state that needs to be

953
00:39:40,800 --> 00:39:42,000
transferred from one committee to

954
00:39:42,000 --> 00:39:44,339
another Committee in this construction

955
00:39:44,339 --> 00:39:46,520
is independent of the number of messages

956
00:39:46,520 --> 00:39:50,280
and the size of the messages so I will

957
00:39:50,280 --> 00:39:51,420
focus on these two points and you're

958
00:39:51,420 --> 00:39:53,700
welcome and to look at the other points

959
00:39:53,700 --> 00:39:56,060
in the paper

960
00:39:56,400 --> 00:39:59,339
so what is a blockchain

961
00:39:59,339 --> 00:40:02,220
um so approaching in our lens is a

962
00:40:02,220 --> 00:40:04,440
sequence of block blocks where each

963
00:40:04,440 --> 00:40:07,079
block is associated with a time slot

964
00:40:07,079 --> 00:40:09,960
so blockchain dollar is this

965
00:40:09,960 --> 00:40:11,880
self-selection we can mentioned that

966
00:40:11,880 --> 00:40:15,540
gives the winner the variety of player

967
00:40:15,540 --> 00:40:19,220
role so a role

968
00:40:19,320 --> 00:40:21,960
to propose a new block for the chain for

969
00:40:21,960 --> 00:40:23,940
a specific slot I could be introducing

970
00:40:23,940 --> 00:40:25,980
the randomness or become a member of a

971
00:40:25,980 --> 00:40:27,480
YouTube committee

972
00:40:27,480 --> 00:40:30,000
so we Define our blotter predicate like

973
00:40:30,000 --> 00:40:33,480
this so we have a blockchain state b a

974
00:40:33,480 --> 00:40:36,420
slot a rule and a lottery secret key

975
00:40:36,420 --> 00:40:40,079
and we say that this Lottery secret key

976
00:40:40,079 --> 00:40:41,579
wins the lottery if the lottery

977
00:40:41,579 --> 00:40:44,099
predicate evaluates to one

978
00:40:44,099 --> 00:40:46,079
so we distinguish between Anonymous

979
00:40:46,079 --> 00:40:50,160
lotteries which are these uh like vrf

980
00:40:50,160 --> 00:40:52,380
based or proof of stake arteries also

981
00:40:52,380 --> 00:40:54,960
the nagamoto proof of work is anonymous

982
00:40:54,960 --> 00:40:57,420
lottery but we all

983
00:40:57,420 --> 00:41:00,079
also have

984
00:41:05,040 --> 00:41:07,260
a specific distribution in the network

985
00:41:07,260 --> 00:41:09,540
and who owns that saturation is the

986
00:41:09,540 --> 00:41:10,859
winner of the lottery

987
00:41:10,859 --> 00:41:14,220
this is supposed to a 500 Bitcoin proof

988
00:41:14,220 --> 00:41:17,579
of work where nobody

989
00:41:17,579 --> 00:41:19,220
where nobody

990
00:41:19,220 --> 00:41:21,839
knows who actually won the lottery until

991
00:41:21,839 --> 00:41:23,700
the lottery winner announces themselves

992
00:41:23,700 --> 00:41:25,680
by proposing the block

993
00:41:25,680 --> 00:41:27,420
so in Christians to the future we Define

994
00:41:27,420 --> 00:41:28,980
it as follows we have an encryption

995
00:41:28,980 --> 00:41:30,480
algorithm that takes in the blockchain

996
00:41:30,480 --> 00:41:33,599
state a slot a role and a message and

997
00:41:33,599 --> 00:41:35,760
outputs aside for sixth we have a

998
00:41:35,760 --> 00:41:37,680
decryption algorithm that takes in a

999
00:41:37,680 --> 00:41:40,740
potentially different game State a

1000
00:41:40,740 --> 00:41:43,440
cipher text and a lot of reciprocy and

1001
00:41:43,440 --> 00:41:47,339
it outputs a message we say that it

1002
00:41:47,339 --> 00:41:50,400
outputs a message even only if this

1003
00:41:50,400 --> 00:41:52,140
Lottery super key in fact won the

1004
00:41:52,140 --> 00:41:54,599
lottery for that particular blockchain

1005
00:41:54,599 --> 00:41:56,820
state in slot enroll

1006
00:41:56,820 --> 00:41:58,619
so we distinguish between the near

1007
00:41:58,619 --> 00:42:00,240
future where the two blockchain states

1008
00:42:00,240 --> 00:42:02,220
are the same

1009
00:42:02,220 --> 00:42:04,260
um there we have a known stake

1010
00:42:04,260 --> 00:42:07,020
distribution and we have the fixed set

1011
00:42:07,020 --> 00:42:10,500
of parties in the system basically

1012
00:42:10,500 --> 00:42:13,200
this is supposed to the far future case

1013
00:42:13,200 --> 00:42:16,140
where the two blockchain states are

1014
00:42:16,140 --> 00:42:18,839
different and here we have the

1015
00:42:18,839 --> 00:42:22,460
distribution is unknown so parties can

1016
00:42:22,460 --> 00:42:25,640
join and leave after encryption time

1017
00:42:25,640 --> 00:42:30,780
until the lottery winners decided

1018
00:42:30,780 --> 00:42:33,440
um and this is

1019
00:42:43,400 --> 00:42:46,200
encryption time because this makes sure

1020
00:42:46,200 --> 00:42:48,240
that an adversary cannot just mine its

1021
00:42:48,240 --> 00:42:50,040
own blockchain and

1022
00:42:50,040 --> 00:42:52,200
use that to make itself the winner of

1023
00:42:52,200 --> 00:42:55,819
the lottery and use that for decryption

1024
00:42:56,040 --> 00:42:58,560
so we start by

1025
00:42:58,560 --> 00:43:00,540
at the vegan notion which is the

1026
00:43:00,540 --> 00:43:02,099
encryption to the near future where the

1027
00:43:02,099 --> 00:43:04,440
blockchain states these others

1028
00:43:04,440 --> 00:43:06,500
um we can

1029
00:43:06,500 --> 00:43:08,640
this encryption over commitments to

1030
00:43:08,640 --> 00:43:10,200
construct this equation to the near

1031
00:43:10,200 --> 00:43:11,940
future so let's start by looking at

1032
00:43:11,940 --> 00:43:13,819
witness encryption or commitments

1033
00:43:13,819 --> 00:43:16,800
and start by looking at plain old

1034
00:43:16,800 --> 00:43:20,760
witness encryption where we have Alice

1035
00:43:20,760 --> 00:43:23,220
that wants to send a message to Bob so

1036
00:43:23,220 --> 00:43:26,520
she can encrypt this message under an NP

1037
00:43:26,520 --> 00:43:28,500
statement X

1038
00:43:28,500 --> 00:43:30,720
um sentence having sex to pop and pop

1039
00:43:30,720 --> 00:43:32,819
can deferred if he knows a witness to

1040
00:43:32,819 --> 00:43:35,940
the specific relation

1041
00:43:35,940 --> 00:43:39,180
and this is the standard Windows

1042
00:43:39,180 --> 00:43:41,339
encryption description

1043
00:43:41,339 --> 00:43:44,880
I will skip this and go to our relaxed

1044
00:43:44,880 --> 00:43:47,220
version of witness encryption this is a

1045
00:43:47,220 --> 00:43:50,640
two-phase protocol where Bob starts out

1046
00:43:50,640 --> 00:43:52,859
in the first phase committing to some

1047
00:43:52,859 --> 00:43:55,260
secret input using some Randomness row

1048
00:43:55,260 --> 00:43:57,900
and then publishing this commitment now

1049
00:43:57,900 --> 00:44:01,619
Alice can use this commitment basically

1050
00:44:01,619 --> 00:44:04,440
she creates a statement incorporating

1051
00:44:04,440 --> 00:44:07,740
Bob's commitment as circuit C and an

1052
00:44:07,740 --> 00:44:09,660
expected output y

1053
00:44:09,660 --> 00:44:12,000
and then to encrypt the message using

1054
00:44:12,000 --> 00:44:15,900
the statement now Bob can decrypt if he

1055
00:44:15,900 --> 00:44:17,460
knows a witness which is the secret

1056
00:44:17,460 --> 00:44:19,740
input and the randomness row used for

1057
00:44:19,740 --> 00:44:20,819
the commitment

1058
00:44:20,819 --> 00:44:23,160
and then the circuit has to when

1059
00:44:23,160 --> 00:44:25,500
evaluate it on the secret input has to

1060
00:44:25,500 --> 00:44:28,319
evaluate through this uh the expected

1061
00:44:28,319 --> 00:44:30,839
output Y and the buff also node has to

1062
00:44:30,839 --> 00:44:34,160
know the opening to the commitment

1063
00:44:35,040 --> 00:44:37,500
so this is how it is in writing so we

1064
00:44:37,500 --> 00:44:38,940
have

1065
00:44:38,940 --> 00:44:41,940
little

1066
00:44:46,260 --> 00:44:48,800
and

1067
00:44:50,579 --> 00:44:53,599
and then

1068
00:44:54,599 --> 00:44:57,000
from normal written and just make sure

1069
00:44:57,000 --> 00:45:00,180
that even though buff sees uh some

1070
00:45:00,180 --> 00:45:01,920
messages that are included on the true

1071
00:45:01,920 --> 00:45:03,000
statements

1072
00:45:03,000 --> 00:45:05,099
um then he doesn't learn anything if he

1073
00:45:05,099 --> 00:45:07,740
doesn't know the actual opening uh to

1074
00:45:07,740 --> 00:45:10,020
the underlying commitment you can read

1075
00:45:10,020 --> 00:45:12,540
more about this specific property in the

1076
00:45:12,540 --> 00:45:14,280
in the paper

1077
00:45:14,280 --> 00:45:17,099
so how do we use this Witness

1078
00:45:17,099 --> 00:45:19,140
in Christian old commitments to obtain

1079
00:45:19,140 --> 00:45:21,119
or witness our encryption to the near

1080
00:45:21,119 --> 00:45:24,000
future so it's quite simple in the setup

1081
00:45:24,000 --> 00:45:27,119
we just sit allow all parties to commit

1082
00:45:27,119 --> 00:45:29,780
to their Lottery key

1083
00:45:29,780 --> 00:45:33,599
then we can encrypt by making circuit

1084
00:45:33,599 --> 00:45:36,420
encode the lottery predicate for that

1085
00:45:36,420 --> 00:45:39,300
specific blockchain slot and role and

1086
00:45:39,300 --> 00:45:41,280
then we use the statement or encryption

1087
00:45:41,280 --> 00:45:44,280
now for decryption the lottery winning

1088
00:45:44,280 --> 00:45:47,160
party has a lottery winning secret key

1089
00:45:47,160 --> 00:45:51,180
and it can successfully decrypt because

1090
00:45:51,180 --> 00:45:53,400
when evaluate the circuit evaluate on

1091
00:45:53,400 --> 00:45:55,859
the secret key it will output the

1092
00:45:55,859 --> 00:45:57,480
expected output

1093
00:45:57,480 --> 00:46:01,920
so here we first roll assignment

1094
00:46:01,920 --> 00:46:04,319
protocol that doesn't use any auxiliary

1095
00:46:04,319 --> 00:46:06,660
communities the only downside is that

1096
00:46:06,660 --> 00:46:09,319
Alice has to encrypt to what every

1097
00:46:09,319 --> 00:46:12,960
single commitment in the system

1098
00:46:12,960 --> 00:46:15,740
um and basically she has to commit to

1099
00:46:15,740 --> 00:46:19,079
encrypt your inwards any every potential

1100
00:46:19,079 --> 00:46:21,180
lottery winner in the system and that

1101
00:46:21,180 --> 00:46:24,420
makes the type of sex grow linearly in

1102
00:46:24,420 --> 00:46:26,040
the number of participants in the

1103
00:46:26,040 --> 00:46:28,260
network and we have additional candidate

1104
00:46:28,260 --> 00:46:29,700
constructions in the paper so we welcome

1105
00:46:29,700 --> 00:46:32,040
to to read that they have different

1106
00:46:32,040 --> 00:46:34,079
trade-offs

1107
00:46:34,079 --> 00:46:37,859
so now we look at the far future case

1108
00:46:37,859 --> 00:46:38,520
um

1109
00:46:38,520 --> 00:46:41,460
and here we have a construction if we

1110
00:46:41,460 --> 00:46:43,500
use our allows us to use auxiliary

1111
00:46:43,500 --> 00:46:44,940
committees

1112
00:46:44,940 --> 00:46:46,200
um that is based on our near future

1113
00:46:46,200 --> 00:46:47,880
encryption into the future and the

1114
00:46:47,880 --> 00:46:51,060
threshold area phase encryption scheme

1115
00:46:51,060 --> 00:46:53,099
so what is an add-in-based encryption

1116
00:46:53,099 --> 00:46:55,200
scheme so basically we have a dealer

1117
00:46:55,200 --> 00:46:57,920
that

1118
00:46:57,920 --> 00:47:00,180
samples a master secret key and master

1119
00:47:00,180 --> 00:47:02,040
public key and publishes the master

1120
00:47:02,040 --> 00:47:05,640
public key now Alice has a plain text

1121
00:47:05,640 --> 00:47:08,819
want to encrypt under the master public

1122
00:47:08,819 --> 00:47:14,040
key and some label or ID of Pop as you

1123
00:47:14,040 --> 00:47:16,980
can set this Cyrus X to Bob and Bob can

1124
00:47:16,980 --> 00:47:18,960
now retrieve the secret key for a

1125
00:47:18,960 --> 00:47:23,220
specific ID or label and then use that

1126
00:47:23,220 --> 00:47:26,040
for decrypting

1127
00:47:26,040 --> 00:47:29,760
so how are we going to use this um in

1128
00:47:29,760 --> 00:47:32,040
our encryption to the file future

1129
00:47:32,040 --> 00:47:35,220
so it's important to note that we have

1130
00:47:35,220 --> 00:47:37,619
this setup for the whole encryption

1131
00:47:37,619 --> 00:47:41,280
scheme which is basically a yoso APC

1132
00:47:41,280 --> 00:47:43,319
um that has a set of responsibilities

1133
00:47:43,319 --> 00:47:45,720
and it's always ongoing and it's

1134
00:47:45,720 --> 00:47:47,460
basically the infrastructure of the

1135
00:47:47,460 --> 00:47:49,859
whole encryption scheme

1136
00:47:49,859 --> 00:47:51,839
um and it starts by constructing this

1137
00:47:51,839 --> 00:47:53,460
threshold identity based encryption

1138
00:47:53,460 --> 00:47:56,099
setup which is a master public key and a

1139
00:47:56,099 --> 00:47:57,420
master secret key

1140
00:47:57,420 --> 00:48:00,540
but then it's secret shares this master

1141
00:48:00,540 --> 00:48:03,540
secret key and proactively research it

1142
00:48:03,540 --> 00:48:05,160
through the blockchain execution

1143
00:48:05,160 --> 00:48:07,980
basically the Committees is communities

1144
00:48:07,980 --> 00:48:10,079
are holding this master security through

1145
00:48:10,079 --> 00:48:12,599
the execution

1146
00:48:12,599 --> 00:48:14,000
then

1147
00:48:14,000 --> 00:48:16,920
another responsibility that it has is

1148
00:48:16,920 --> 00:48:19,079
that it has to check for any ETF cyber

1149
00:48:19,079 --> 00:48:21,300
text in the system and see if it has a

1150
00:48:21,300 --> 00:48:24,000
destination uh slot and role that has

1151
00:48:24,000 --> 00:48:25,440
just been decided

1152
00:48:25,440 --> 00:48:28,079
and if that is true then it needs to act

1153
00:48:28,079 --> 00:48:31,260
it needs to deliver this

1154
00:48:31,260 --> 00:48:33,660
the ciphertext

1155
00:48:33,660 --> 00:48:36,740
um so it samples this ibe key

1156
00:48:36,740 --> 00:48:39,240
shared each Community member samples the

1157
00:48:39,240 --> 00:48:41,400
share of the ID key for the slot and the

1158
00:48:41,400 --> 00:48:42,720
role

1159
00:48:42,720 --> 00:48:44,579
um and it then can use the EGF

1160
00:48:44,579 --> 00:48:47,640
encryption to the near future

1161
00:48:47,640 --> 00:48:48,680
to

1162
00:48:48,680 --> 00:48:52,560
send this share of IB key to the lottery

1163
00:48:52,560 --> 00:48:55,140
winner for the specific slot enrollment

1164
00:48:55,140 --> 00:48:57,119
so all this infrastructure makes the

1165
00:48:57,119 --> 00:49:00,920
encryption easy basically we have the

1166
00:49:00,920 --> 00:49:03,660
party just publishing the database

1167
00:49:03,660 --> 00:49:06,420
encryption for the specific

1168
00:49:06,420 --> 00:49:09,960
big ID which is the slide in the role

1169
00:49:09,960 --> 00:49:12,480
and then for the description uh the

1170
00:49:12,480 --> 00:49:14,160
lottery winner for the slot enroll can

1171
00:49:14,160 --> 00:49:16,640
decrypt all the

1172
00:49:16,640 --> 00:49:19,280
encryption to the near future ciphertext

1173
00:49:19,280 --> 00:49:22,260
it didn't combine the shares such that

1174
00:49:22,260 --> 00:49:25,079
it obtains the secret key for for that

1175
00:49:25,079 --> 00:49:27,000
specific slot and rule the ipe secret

1176
00:49:27,000 --> 00:49:28,020
key

1177
00:49:28,020 --> 00:49:31,880
and then you can use that for decryption

1178
00:49:31,880 --> 00:49:34,500
so from another perspective it looks

1179
00:49:34,500 --> 00:49:37,380
like this we want to transfer or encrypt

1180
00:49:37,380 --> 00:49:40,800
from 18 to slot 21.

1181
00:49:40,800 --> 00:49:43,800
uh to what the role are

1182
00:49:43,800 --> 00:49:46,560
so we start by doing encryption of the

1183
00:49:46,560 --> 00:49:50,460
message under the label r

1184
00:49:50,460 --> 00:49:52,800
then we know that we have this master

1185
00:49:52,800 --> 00:49:57,300
secret key we shared food the currencies

1186
00:49:57,300 --> 00:49:59,520
in the specific slots

1187
00:49:59,520 --> 00:50:01,800
then at some point

1188
00:50:01,800 --> 00:50:02,520
um

1189
00:50:02,520 --> 00:50:04,740
these committees need to act because it

1190
00:50:04,740 --> 00:50:06,839
has to deliver the message

1191
00:50:06,839 --> 00:50:07,560
um

1192
00:50:07,560 --> 00:50:12,440
so what it does it is that it samples a

1193
00:50:12,440 --> 00:50:15,839
secret key shares and then it uses

1194
00:50:15,839 --> 00:50:17,460
encryption to the near future to send

1195
00:50:17,460 --> 00:50:19,260
these uh

1196
00:50:19,260 --> 00:50:22,560
the secret key shares for the specific

1197
00:50:22,560 --> 00:50:25,380
role and then whoever wins the role are

1198
00:50:25,380 --> 00:50:28,099
in the specific start can decrypt these

1199
00:50:28,099 --> 00:50:30,540
encryption to the near future cyber text

1200
00:50:30,540 --> 00:50:32,760
and then also decrypt the original

1201
00:50:32,760 --> 00:50:35,099
ciphertext

1202
00:50:35,099 --> 00:50:39,300
so to compare with uh with other works

1203
00:50:39,300 --> 00:50:42,180
um to summarize we have encryption to

1204
00:50:42,180 --> 00:50:44,099
the near future where we have this

1205
00:50:44,099 --> 00:50:45,780
committed witness encryption

1206
00:50:45,780 --> 00:50:48,240
construction that can be based in turn

1207
00:50:48,240 --> 00:50:50,760
on global circuits and oblivious

1208
00:50:50,760 --> 00:50:51,900
transfer

1209
00:50:51,900 --> 00:50:54,300
uh here we don't use any communities

1210
00:50:54,300 --> 00:50:57,300
auxiliary communities but we do have a

1211
00:50:57,300 --> 00:50:59,400
cyber text that is linear in the size of

1212
00:50:59,400 --> 00:51:01,380
the number of parties in the system

1213
00:51:01,380 --> 00:51:03,540
we also have this

1214
00:51:03,540 --> 00:51:04,319
um

1215
00:51:04,319 --> 00:51:07,619
initial phase where each party is in the

1216
00:51:07,619 --> 00:51:09,119
system has to commit to the lottery

1217
00:51:09,119 --> 00:51:12,359
second key and publish that but the

1218
00:51:12,359 --> 00:51:15,059
encryption to the far future

1219
00:51:15,059 --> 00:51:17,940
we cannot compete with fully fetched

1220
00:51:17,940 --> 00:51:19,740
witness encryption basically but we have

1221
00:51:19,740 --> 00:51:23,220
a construction that I just showed which

1222
00:51:23,220 --> 00:51:25,440
is based on identity based encryption

1223
00:51:25,440 --> 00:51:26,300
um

1224
00:51:26,300 --> 00:51:29,940
importantly here the

1225
00:51:29,940 --> 00:51:31,800
basically the state that needs to be

1226
00:51:31,800 --> 00:51:34,260
transferred from one committee to the

1227
00:51:34,260 --> 00:51:36,960
next committee that state is independent

1228
00:51:36,960 --> 00:51:39,240
of the number of messages and the size

1229
00:51:39,240 --> 00:51:41,520
of the messages because we only have to

1230
00:51:41,520 --> 00:51:43,740
carry the master secret key of the

1231
00:51:43,740 --> 00:51:45,720
identity-based encryption scheme and

1232
00:51:45,720 --> 00:51:47,700
that makes it a big Improvement compared

1233
00:51:47,700 --> 00:51:50,220
to other other schemes out there

1234
00:51:50,220 --> 00:51:52,380
so with that I will just say thank you

1235
00:51:52,380 --> 00:51:57,319
and please read our paper on on ePrint

1236
00:52:03,140 --> 00:52:06,839
all right thanks Anders is there any

1237
00:52:06,839 --> 00:52:11,058
question Founders in the audience

1238
00:52:13,619 --> 00:52:16,079
so my short question would maybe be um I

1239
00:52:16,079 --> 00:52:17,339
understand that one of the motivation

1240
00:52:17,339 --> 00:52:20,280
for your work is that um uh because it's

1241
00:52:20,280 --> 00:52:22,559
an unknown future committee there is

1242
00:52:22,559 --> 00:52:23,940
some benefits in terms of corruption

1243
00:52:23,940 --> 00:52:26,220
like you don't know whom to corrupt uh

1244
00:52:26,220 --> 00:52:27,960
in the future

1245
00:52:27,960 --> 00:52:29,520
um does that imply that the committee

1246
00:52:29,520 --> 00:52:31,920
needs to be reasonably large to begin

1247
00:52:31,920 --> 00:52:34,220
with

1248
00:52:36,920 --> 00:52:41,040
uh I think it's relatably

1249
00:52:41,040 --> 00:52:42,660
um so the community just had to carry

1250
00:52:42,660 --> 00:52:43,380
out

1251
00:52:43,380 --> 00:52:47,220
um whatever's uh whatever the the MPC

1252
00:52:47,220 --> 00:52:50,040
protocol uh prescribes basically

1253
00:52:50,040 --> 00:52:51,660
um maybe I'm misunderstanding the

1254
00:52:51,660 --> 00:52:52,859
question

1255
00:52:52,859 --> 00:52:55,020
that noise I can take it off and but I

1256
00:52:55,020 --> 00:52:57,780
guess the question was if if you

1257
00:52:57,780 --> 00:53:00,839
um yeah if you want to corrupt uh you

1258
00:53:00,839 --> 00:53:02,040
want to prevent Corruption of future

1259
00:53:02,040 --> 00:53:04,319
committee members then uh it should be a

1260
00:53:04,319 --> 00:53:05,579
large crowd so that you can't just like

1261
00:53:05,579 --> 00:53:08,040
corrupt them all uh to begin with yeah

1262
00:53:08,040 --> 00:53:10,500
yeah definitely it's probabilistic

1263
00:53:10,500 --> 00:53:13,020
production corruption right so

1264
00:53:13,020 --> 00:53:15,599
um yeah so we have to make make it hard

1265
00:53:15,599 --> 00:53:16,920
for the adversary to corrupt the right

1266
00:53:16,920 --> 00:53:19,740
parties okay I see

1267
00:53:19,740 --> 00:53:21,839
right thanks so let's thank andesh again

1268
00:53:21,839 --> 00:53:24,660
and all the speakers of that session

1269
00:53:24,660 --> 00:53:27,319
thank you

1270
00:53:29,640 --> 00:53:31,680
this concludes the session and I think

1271
00:53:31,680 --> 00:53:33,420
we're almost at the end

1272
00:53:33,420 --> 00:53:37,280
um I'll hand over to the general chairs

1273
00:53:37,339 --> 00:53:40,559
hi ladies and gentlemen

1274
00:53:40,559 --> 00:53:44,460
and we are here to conclude in the

1275
00:53:44,460 --> 00:53:50,280
program of uh Asia Crypt 2022 and it's

1276
00:53:50,280 --> 00:53:55,319
been a very gruesome five days uh I'm

1277
00:53:55,319 --> 00:53:58,040
great that you are all here in person

1278
00:53:58,040 --> 00:54:02,640
and I hope you all had fun and enjoyed

1279
00:54:02,640 --> 00:54:05,400
the experience and please come back to

1280
00:54:05,400 --> 00:54:09,780
Taiwan again maybe for TCC 2023

1281
00:54:09,780 --> 00:54:14,099
uh we are before breaking up the meeting

1282
00:54:14,099 --> 00:54:18,660
and one or two things to say and please

1283
00:54:18,660 --> 00:54:23,160
clear out of here by 1650

1284
00:54:23,160 --> 00:54:24,359
and

1285
00:54:24,359 --> 00:54:27,000
because uh I mean they went this place

1286
00:54:27,000 --> 00:54:28,920
at five o'clock

1287
00:54:28,920 --> 00:54:33,180
and also we are going to ask Professor

1288
00:54:33,180 --> 00:54:34,880
Fango Zhang

1289
00:54:34,880 --> 00:54:38,640
to present to us I mean and he is not

1290
00:54:38,640 --> 00:54:42,359
able to represent physically but we will

1291
00:54:42,359 --> 00:54:45,240
first play a short video by him

1292
00:54:45,240 --> 00:54:49,640
welcoming everyone to Guangzhou

1293
00:54:57,960 --> 00:55:00,960
23

1294
00:55:01,920 --> 00:55:03,720
hello Aaron

1295
00:55:03,720 --> 00:55:07,319
this is a fungal drum and gm1

1296
00:55:07,319 --> 00:55:11,460
Asia corrupt 2023 will be held at

1297
00:55:11,460 --> 00:55:15,119
Guangzhou China one year later

1298
00:55:15,119 --> 00:55:19,819
we would like to invite you to Guangzhou

1299
00:55:19,819 --> 00:55:23,220
Guangzhou is located in the south of

1300
00:55:23,220 --> 00:55:24,300
China

1301
00:55:24,300 --> 00:55:28,319
and this Covenant transportation

1302
00:55:28,319 --> 00:55:31,319
Guangzhou is close to Hong Kong and

1303
00:55:31,319 --> 00:55:32,460
Marco

1304
00:55:32,460 --> 00:55:34,680
and can be reached from Hong Kong and

1305
00:55:34,680 --> 00:55:40,220
Marco by highs of the real in one hour

1306
00:55:40,380 --> 00:55:43,200
one go is a capital of Guangdong

1307
00:55:43,200 --> 00:55:44,400
Paradise

1308
00:55:44,400 --> 00:55:47,640
the third largest city in China after

1309
00:55:47,640 --> 00:55:50,579
Beijing and Shanghai

1310
00:55:50,579 --> 00:55:53,520
the winter of Guangzhou is the furry of

1311
00:55:53,520 --> 00:55:54,780
snow

1312
00:55:54,780 --> 00:55:56,640
the temperature

1313
00:55:56,640 --> 00:56:02,058
in December is about 16 degrees

1314
00:56:03,079 --> 00:56:07,500
has more than 200 years history

1315
00:56:07,500 --> 00:56:10,980
there are many famous old buildings and

1316
00:56:10,980 --> 00:56:14,280
new buildings in here

1317
00:56:14,280 --> 00:56:18,680
Guangdong food is also very famous

1318
00:56:19,440 --> 00:56:22,440
for the information of conference venue

1319
00:56:22,440 --> 00:56:27,680
we will publish it on the website later

1320
00:56:27,859 --> 00:56:32,280
Guangzhou is also called city of flowers

1321
00:56:32,280 --> 00:56:35,880
it is a very beautiful city

1322
00:56:35,880 --> 00:56:38,099
welcome to Guangzhou

1323
00:56:38,099 --> 00:56:41,180
thank you very much

1324
00:56:49,140 --> 00:56:53,640
so Professor Zhang I think you are

1325
00:56:53,640 --> 00:56:56,940
online and do you have anything further

1326
00:56:56,940 --> 00:56:58,099
to add

1327
00:56:58,099 --> 00:57:02,760
fungal hey I'm here oh thank you

1328
00:57:02,760 --> 00:57:05,940
thank you very much for the play the

1329
00:57:05,940 --> 00:57:08,040
video and

1330
00:57:08,040 --> 00:57:11,460
I'm very sorry I cannot uh to change the

1331
00:57:11,460 --> 00:57:15,240
conference but maybe next year

1332
00:57:15,240 --> 00:57:17,119
they can

1333
00:57:17,119 --> 00:57:20,180
attend the Asia cup

1334
00:57:20,180 --> 00:57:25,380
2023 so we will set up a website our

1335
00:57:25,380 --> 00:57:28,260
Asia crypto 2023

1336
00:57:28,260 --> 00:57:31,619
so for more information you can visit

1337
00:57:31,619 --> 00:57:35,400
the website later so anyway Guangzhou is

1338
00:57:35,400 --> 00:57:38,280
a very very beautiful city so

1339
00:57:38,280 --> 00:57:40,559
welcome to Guangzhou

1340
00:57:40,559 --> 00:57:45,020
thank you Professor young okay thank you

1341
00:57:50,700 --> 00:57:56,579
all right so uh with that Whitaker Asia

1342
00:57:56,579 --> 00:58:01,319
crypto 2022 meeting adjourned the

1343
00:58:01,319 --> 00:58:05,460
uh Wi-Fi will go out of business in

1344
00:58:05,460 --> 00:58:08,420
about four minutes

1345
00:58:09,119 --> 00:58:12,140
see you everybody

