1
00:00:01,140 --> 00:00:03,240
and our talk we'll present new

2
00:00:03,240 --> 00:00:05,339
algorithms and Analysis for the problem

3
00:00:05,339 --> 00:00:07,799
of some preserving encryption this is

4
00:00:07,799 --> 00:00:10,080
Joint work between myself and Dr Scott

5
00:00:10,080 --> 00:00:11,940
yellick

6
00:00:11,940 --> 00:00:13,679
the problem of some preserving

7
00:00:13,679 --> 00:00:15,480
encryption and creating some preserving

8
00:00:15,480 --> 00:00:17,820
encryption schemes was first introduced

9
00:00:17,820 --> 00:00:20,760
by to Jake at all in 2019.

10
00:00:20,760 --> 00:00:24,840
the idea is you want to encrypt vectors

11
00:00:24,840 --> 00:00:27,359
so that they have the same sum so you

12
00:00:27,359 --> 00:00:29,160
start with a vector of integers and you

13
00:00:29,160 --> 00:00:31,920
want to encrypt it also as a vector of

14
00:00:31,920 --> 00:00:34,140
integers but with the same sum as the

15
00:00:34,140 --> 00:00:36,480
original vector in addition to

16
00:00:36,480 --> 00:00:38,579
preserving the sum we'll also typically

17
00:00:38,579 --> 00:00:40,559
have a bound on the components of the

18
00:00:40,559 --> 00:00:42,899
vector so both the plain text and the

19
00:00:42,899 --> 00:00:45,899
cipher text each point in the vector is

20
00:00:45,899 --> 00:00:48,300
going to be bounded between 0 and a

21
00:00:48,300 --> 00:00:51,559
component bound of d

22
00:00:51,719 --> 00:00:53,879
tajik at all presented this problem

23
00:00:53,879 --> 00:00:56,160
along with an application so the

24
00:00:56,160 --> 00:00:58,199
application was the problem of thumbnail

25
00:00:58,199 --> 00:01:01,320
preserving encryption the idea is that

26
00:01:01,320 --> 00:01:03,840
you want to encrypt an image so that the

27
00:01:03,840 --> 00:01:06,479
thumbnail of the image is preserved so

28
00:01:06,479 --> 00:01:08,040
both the original image and the

29
00:01:08,040 --> 00:01:10,380
encrypted image have the same thumbnail

30
00:01:10,380 --> 00:01:13,200
the thumbnail is created by dividing an

31
00:01:13,200 --> 00:01:16,740
image into B by B blocks of pixels each

32
00:01:16,740 --> 00:01:20,340
block of pixels is replaced by a single

33
00:01:20,340 --> 00:01:23,759
Pixel whose value is the mean of the

34
00:01:23,759 --> 00:01:26,759
original pixels in the block

35
00:01:26,759 --> 00:01:28,799
so if we take each block in the image

36
00:01:28,799 --> 00:01:31,799
and we imply some preserving encryption

37
00:01:31,799 --> 00:01:34,500
scheme so we encrypt each block with

38
00:01:34,500 --> 00:01:37,020
some preserving encryption then each

39
00:01:37,020 --> 00:01:39,060
block in the original image and the

40
00:01:39,060 --> 00:01:40,920
encrypted image will have the same thumb

41
00:01:40,920 --> 00:01:43,920
sum thus the same mean and we'll end up

42
00:01:43,920 --> 00:01:45,479
with both an original image and an

43
00:01:45,479 --> 00:01:47,460
encrypted image that have the exact same

44
00:01:47,460 --> 00:01:49,740
thumbnail in addition to preserving the

45
00:01:49,740 --> 00:01:52,560
sum we'll also bound each pixel between

46
00:01:52,560 --> 00:01:56,299
0 and 255.

47
00:01:57,240 --> 00:02:00,240
tajik at all present this problem and an

48
00:02:00,240 --> 00:02:01,799
encryption scheme

49
00:02:01,799 --> 00:02:04,320
the idea is that we're going to again we

50
00:02:04,320 --> 00:02:06,479
start from a vector of integers you're

51
00:02:06,479 --> 00:02:09,000
going to shuffle this Vector of integers

52
00:02:09,000 --> 00:02:12,180
until we get a random shuffling

53
00:02:12,180 --> 00:02:15,360
then we're going to pair adjacent points

54
00:02:15,360 --> 00:02:17,220
in the vector to create a perfect

55
00:02:17,220 --> 00:02:19,860
matching so we're just going to pair

56
00:02:19,860 --> 00:02:21,840
points that are next to each other to

57
00:02:21,840 --> 00:02:23,640
create a perfect matching

58
00:02:23,640 --> 00:02:27,660
then independently for each pair in the

59
00:02:27,660 --> 00:02:29,720
matching we're going to replace it

60
00:02:29,720 --> 00:02:32,580
uniformly at random from one of the

61
00:02:32,580 --> 00:02:35,040
valid pairs of integers that we could

62
00:02:35,040 --> 00:02:36,360
replace it with so we're going to look

63
00:02:36,360 --> 00:02:38,400
at all pairs of integers with the same

64
00:02:38,400 --> 00:02:40,860
sum and that respect to the component

65
00:02:40,860 --> 00:02:42,180
bound and we're going to choose

66
00:02:42,180 --> 00:02:45,180
uniformly at random leave from each of

67
00:02:45,180 --> 00:02:48,000
these pairs of points all right so we

68
00:02:48,000 --> 00:02:50,280
look at all pairs with the same sum and

69
00:02:50,280 --> 00:02:53,340
we choose uniformly at random

70
00:02:53,340 --> 00:02:55,920
if you repeat this algorithm enough

71
00:02:55,920 --> 00:02:58,800
times you'll end up with some preserving

72
00:02:58,800 --> 00:03:01,760
encryption scheme

73
00:03:02,879 --> 00:03:05,040
in our talk we'll go into more detail in

74
00:03:05,040 --> 00:03:06,480
the background of this problem and

75
00:03:06,480 --> 00:03:08,580
previous work and we'll present our work

76
00:03:08,580 --> 00:03:09,720
our results

77
00:03:09,720 --> 00:03:12,780
so we we give three main results the

78
00:03:12,780 --> 00:03:16,920
first is a formal mixing time bound so

79
00:03:16,920 --> 00:03:19,200
essentially an upper bound on the number

80
00:03:19,200 --> 00:03:22,739
of times we need to repeat the algorithm

81
00:03:22,739 --> 00:03:25,019
given by tajik at all so how many times

82
00:03:25,019 --> 00:03:26,879
do we need to repeat this how many times

83
00:03:26,879 --> 00:03:29,280
is sufficient we give an upper bound on

84
00:03:29,280 --> 00:03:33,060
that this formal proof uses a path

85
00:03:33,060 --> 00:03:34,980
coupling technique with which we'll also

86
00:03:34,980 --> 00:03:37,080
discuss at a high level in The Talk

87
00:03:37,080 --> 00:03:39,659
in addition we'll present two algorithms

88
00:03:39,659 --> 00:03:42,239
for ranking and unranking

89
00:03:42,239 --> 00:03:44,640
um these integers with a given sum so

90
00:03:44,640 --> 00:03:47,159
these are practical algorithms that we

91
00:03:47,159 --> 00:03:49,140
can use we can take the rank and unrank

92
00:03:49,140 --> 00:03:51,480
algorithms and combine them in a rank in

93
00:03:51,480 --> 00:03:53,819
Cipher unranked approach

94
00:03:53,819 --> 00:03:55,860
um to come up with new some preserving

95
00:03:55,860 --> 00:03:58,080
encryption schemes in addition we'll

96
00:03:58,080 --> 00:04:00,659
give performance results comparing

97
00:04:00,659 --> 00:04:02,780
um all three of these algorithms both

98
00:04:02,780 --> 00:04:06,060
the shuffling based algorithm and the

99
00:04:06,060 --> 00:04:09,560
rank in Cipher unrank

