1
00:00:01,439 --> 00:00:04,680
ho ho ho Merry Christmas my name is

2
00:00:04,680 --> 00:00:06,600
Bernardo David and I'm here today to

3
00:00:06,600 --> 00:00:08,460
present to you a little taste of our

4
00:00:08,460 --> 00:00:10,920
paper called YOLO yoso fast and simple

5
00:00:10,920 --> 00:00:12,540
encryption and secret sharing in the

6
00:00:12,540 --> 00:00:14,580
yoso model which is joint work with

7
00:00:14,580 --> 00:00:16,859
Ignacio cast and

8
00:00:16,859 --> 00:00:17,940
Ernest Counting

9
00:00:17,940 --> 00:00:20,400
the whole inspiration of this paper is

10
00:00:20,400 --> 00:00:23,460
the so-called yoso model of computation

11
00:00:23,460 --> 00:00:26,220
I mean secure computation in this model

12
00:00:26,220 --> 00:00:28,320
we go from the traditional multi-party

13
00:00:28,320 --> 00:00:30,060
computation model with a fixed set of

14
00:00:30,060 --> 00:00:32,340
parties and several rounds where each of

15
00:00:32,340 --> 00:00:33,600
these parties interacts with each other

16
00:00:33,600 --> 00:00:37,260
to a more flexible model in a way and

17
00:00:37,260 --> 00:00:38,880
inflexible in a completely different way

18
00:00:38,880 --> 00:00:42,480
where each party can only speak once in

19
00:00:42,480 --> 00:00:45,000
the yosa model you only speak once you

20
00:00:45,000 --> 00:00:46,920
have a huge pool of parties and then

21
00:00:46,920 --> 00:00:50,039
sample smaller subsets of his parties in

22
00:00:50,039 --> 00:00:53,579
order to perform your MPC protocol each

23
00:00:53,579 --> 00:00:55,079
of these subsets of parties each of

24
00:00:55,079 --> 00:00:56,940
these committees will be responsible for

25
00:00:56,940 --> 00:00:59,940
computing one round of this protocol and

26
00:00:59,940 --> 00:01:01,559
after they speak after they send their

27
00:01:01,559 --> 00:01:03,780
message to the next set of parties they

28
00:01:03,780 --> 00:01:06,780
have to stay silent most importantly

29
00:01:06,780 --> 00:01:09,299
this committee stays Anonymous until the

30
00:01:09,299 --> 00:01:10,979
point where they actually perform an

31
00:01:10,979 --> 00:01:12,240
action where they send their message

32
00:01:12,240 --> 00:01:15,180
which gives us security against adaptive

33
00:01:15,180 --> 00:01:17,460
Corruptions also the point that you're

34
00:01:17,460 --> 00:01:19,439
able to example small committees from a

35
00:01:19,439 --> 00:01:21,240
huge set of parties helps us with a

36
00:01:21,240 --> 00:01:22,920
scalability problem

37
00:01:22,920 --> 00:01:26,400
however when you work in this model you

38
00:01:26,400 --> 00:01:28,200
have to worry about the problem of going

39
00:01:28,200 --> 00:01:30,900
from constructing secure Channels with a

40
00:01:30,900 --> 00:01:32,400
public infrastructure and traditional

41
00:01:32,400 --> 00:01:35,159
public encryption which we do in

42
00:01:35,159 --> 00:01:38,460
standard MPC protocols and you need to

43
00:01:38,460 --> 00:01:40,200
actually figure out how to construct

44
00:01:40,200 --> 00:01:42,479
secure channels among parties who do not

45
00:01:42,479 --> 00:01:44,460
know each other you need to be able to

46
00:01:44,460 --> 00:01:47,220
allow one committee who is executing a

47
00:01:47,220 --> 00:01:49,200
given round of the MPC protocol to

48
00:01:49,200 --> 00:01:51,299
communicate its state to the next

49
00:01:51,299 --> 00:01:54,000
committee whose identity isn't known

50
00:01:54,000 --> 00:01:56,100
until they speak themselves

51
00:01:56,100 --> 00:01:58,560
obviously here we cannot simply rely on

52
00:01:58,560 --> 00:02:00,960
our traditional uh public encryption

53
00:02:00,960 --> 00:02:03,060
schemes and our traditional public key

54
00:02:03,060 --> 00:02:04,860
cryptography techniques we need

55
00:02:04,860 --> 00:02:06,240
something else we need to be able to

56
00:02:06,240 --> 00:02:08,758
encrypt towards an unknown party who is

57
00:02:08,758 --> 00:02:11,400
executing a certain role in the next

58
00:02:11,400 --> 00:02:13,920
round of this MPC protocol

59
00:02:13,920 --> 00:02:15,599
several previous approaches have been

60
00:02:15,599 --> 00:02:17,879
proposed to solve this problem uh the

61
00:02:17,879 --> 00:02:20,459
main the start of this line of work was

62
00:02:20,459 --> 00:02:21,900
this paper called can a blockchain keep

63
00:02:21,900 --> 00:02:24,120
a secret by Ben Hamida and others where

64
00:02:24,120 --> 00:02:25,860
they construct a protocol that allows

65
00:02:25,860 --> 00:02:29,280
the uh evolving committee protocol to

66
00:02:29,280 --> 00:02:31,500
transfer a secret that is proactively

67
00:02:31,500 --> 00:02:33,239
secret shared from one committee to the

68
00:02:33,239 --> 00:02:34,440
next committee to the next committee

69
00:02:34,440 --> 00:02:36,840
however they only tolerate less than a

70
00:02:36,840 --> 00:02:38,819
quarter of the parties being corrupted

71
00:02:38,819 --> 00:02:41,760
then the also NPC paper itself that

72
00:02:41,760 --> 00:02:43,560
built on this idea in order to create

73
00:02:43,560 --> 00:02:45,420
this sort of NPC where each round is

74
00:02:45,420 --> 00:02:48,780
executed by a different committee use an

75
00:02:48,780 --> 00:02:51,120
idealized model where you get an ideal

76
00:02:51,120 --> 00:02:53,519
channel that allows you to communicate

77
00:02:53,519 --> 00:02:56,879
some secret States sue a committee that

78
00:02:56,879 --> 00:02:58,860
will be acting in the next round however

79
00:02:58,860 --> 00:03:01,019
they don't show any construction of

80
00:03:01,019 --> 00:03:02,580
their idealized model although they

81
00:03:02,580 --> 00:03:04,379
needed to be secure against less than

82
00:03:04,379 --> 00:03:07,080
half corrupted parties finally the same

83
00:03:07,080 --> 00:03:10,140
authors uh of the usmpc proposed the

84
00:03:10,140 --> 00:03:13,080
idea of a random index PIR which is a

85
00:03:13,080 --> 00:03:14,580
private information retrieval protocol

86
00:03:14,580 --> 00:03:17,400
where parties are able to retrieve some

87
00:03:17,400 --> 00:03:20,459
uh data from a random index without

88
00:03:20,459 --> 00:03:22,140
revealing that to the servers and they

89
00:03:22,140 --> 00:03:23,879
use that plus some techniques like NPC

90
00:03:23,879 --> 00:03:26,819
in the Hat to implement a way to

91
00:03:26,819 --> 00:03:29,040
retrieve random public Keys Associated

92
00:03:29,040 --> 00:03:30,480
to random identity so they can actually

93
00:03:30,480 --> 00:03:32,819
encrypt data towards someone whose

94
00:03:32,819 --> 00:03:34,500
actual identity they don't know

95
00:03:34,500 --> 00:03:36,540
the problem we're trying to address here

96
00:03:36,540 --> 00:03:40,260
is how to construct a efficient channel

97
00:03:40,260 --> 00:03:42,780
from one Committee in yosempc to the

98
00:03:42,780 --> 00:03:46,500
next committee while also achieving a

99
00:03:46,500 --> 00:03:48,900
publicly verifiable secretary scheme

100
00:03:48,900 --> 00:03:51,780
that is compatible with this efficient

101
00:03:51,780 --> 00:03:53,760
secure channels the approach we take is

102
00:03:53,760 --> 00:03:54,720
a little bit different from this

103
00:03:54,720 --> 00:03:55,799
previous approaches we're actually

104
00:03:55,799 --> 00:03:57,060
building on the work that is being

105
00:03:57,060 --> 00:03:58,620
presented also in nature crypto and it

106
00:03:58,620 --> 00:04:00,659
is here called encryption to the Future

107
00:04:00,659 --> 00:04:03,299
that defines a primitive that allows you

108
00:04:03,299 --> 00:04:06,540
to encrypt data towards a role rather

109
00:04:06,540 --> 00:04:09,720
than a party a role is assigned to a

110
00:04:09,720 --> 00:04:12,560
party according to a lottery predicate

111
00:04:12,560 --> 00:04:16,019
that tells you whether a given party has

112
00:04:16,019 --> 00:04:17,760
been assigned a given role at some point

113
00:04:17,760 --> 00:04:19,680
in time so you can have a role

114
00:04:19,680 --> 00:04:21,180
identifier a string that uniquely

115
00:04:21,180 --> 00:04:23,460
identifies a role and then you have time

116
00:04:23,460 --> 00:04:25,139
divided in slots according to a

117
00:04:25,139 --> 00:04:27,060
blockchain protocol when a certain block

118
00:04:27,060 --> 00:04:29,220
is produced in a given's law that block

119
00:04:29,220 --> 00:04:32,100
will allow you to determine which party

120
00:04:32,100 --> 00:04:34,199
will be performing a given role at that

121
00:04:34,199 --> 00:04:37,860
slot and so encryption to the Future

122
00:04:37,860 --> 00:04:39,360
ciphertext that have been generated

123
00:04:39,360 --> 00:04:41,940
towards that row can be decrypted by the

124
00:04:41,940 --> 00:04:44,340
party who has been selected According to

125
00:04:44,340 --> 00:04:45,960
some Lottery procedure that can be

126
00:04:45,960 --> 00:04:48,780
checked by this Lottery predicates while

127
00:04:48,780 --> 00:04:51,000
this work by company and others in the

128
00:04:51,000 --> 00:04:53,040
Asia Crypt this year actually

129
00:04:53,040 --> 00:04:55,199
produces the first definition for this

130
00:04:55,199 --> 00:04:57,180
primitive and introduces a number of

131
00:04:57,180 --> 00:04:58,740
different ways of constructing it it

132
00:04:58,740 --> 00:05:00,419
still suffers from some drawbacks in

133
00:05:00,419 --> 00:05:02,520
terms of concrete efficiency and also in

134
00:05:02,520 --> 00:05:04,400
terms of compatibility with existing

135
00:05:04,400 --> 00:05:06,479
publicly verifiable secret sharing

136
00:05:06,479 --> 00:05:09,479
sleeves in this paper we will construct

137
00:05:09,479 --> 00:05:11,040
what we call encryption to the current

138
00:05:11,040 --> 00:05:13,680
wiener which allows you to encrypt a

139
00:05:13,680 --> 00:05:16,440
message towards a party who executes a

140
00:05:16,440 --> 00:05:19,500
role according to the lottery predicate

141
00:05:19,500 --> 00:05:21,360
when given the current state of the

142
00:05:21,360 --> 00:05:22,500
blockchain so there's already enough

143
00:05:22,500 --> 00:05:24,000
Randomness on the blockchain to

144
00:05:24,000 --> 00:05:26,400
determine the identity of the current

145
00:05:26,400 --> 00:05:28,440
winner of this role although that

146
00:05:28,440 --> 00:05:30,240
identity remains hidden until that party

147
00:05:30,240 --> 00:05:35,160
acts we do that uh using the an idea

148
00:05:35,160 --> 00:05:37,860
based on shuffling which gives us

149
00:05:37,860 --> 00:05:40,320
constant sized for the ciphertext as

150
00:05:40,320 --> 00:05:42,720
opposed to ciphertext with the same

151
00:05:42,720 --> 00:05:45,840
number with the same size as the total

152
00:05:45,840 --> 00:05:49,620
number of parties and then we use the

153
00:05:49,620 --> 00:05:52,800
idea of the ETF paper to show that it

154
00:05:52,800 --> 00:05:54,419
can actually take this encryption of the

155
00:05:54,419 --> 00:05:56,400
current winner and realize you also NPC

156
00:05:56,400 --> 00:05:58,740
or even get full-blown encryption to the

157
00:05:58,740 --> 00:06:00,419
Future towards people who might be

158
00:06:00,419 --> 00:06:02,120
elected far in the future by using IDE

159
00:06:02,120 --> 00:06:05,340
and a committee that has communication

160
00:06:05,340 --> 00:06:06,780
independent from the number of messages

161
00:06:06,780 --> 00:06:08,520
or the length of messages

162
00:06:08,520 --> 00:06:10,740
our contributions here apart from this

163
00:06:10,740 --> 00:06:12,539
construction of encryption return winner

164
00:06:12,539 --> 00:06:16,320
using shuffling are a publicly

165
00:06:16,320 --> 00:06:18,060
verifiable secret sharing scheme that is

166
00:06:18,060 --> 00:06:21,539
compatible with our pcw scheme in a way

167
00:06:21,539 --> 00:06:25,560
that we have proofs that the given set

168
00:06:25,560 --> 00:06:27,180
of shares has been correctly generated

169
00:06:27,180 --> 00:06:29,520
there are of size independent from the

170
00:06:29,520 --> 00:06:31,979
number of parties and that can give us

171
00:06:31,979 --> 00:06:33,960
actually a very efficient implementation

172
00:06:33,960 --> 00:06:36,000
of ppss more efficient than our previous

173
00:06:36,000 --> 00:06:38,340
words such as Albatross or screen

174
00:06:38,340 --> 00:06:40,500
we also show how to efficiently do

175
00:06:40,500 --> 00:06:42,240
re-sharing with public verification for

176
00:06:42,240 --> 00:06:45,539
this PVSS protocol and we finalize here

177
00:06:45,539 --> 00:06:48,240
with some constructions uh our

178
00:06:48,240 --> 00:06:50,039
constructions are based on ddh and as

179
00:06:50,039 --> 00:06:51,600
well as a

180
00:06:51,600 --> 00:06:54,000
generic linearly homomorphic encryption

181
00:06:54,000 --> 00:06:56,759
scheme and we believe that as far as we

182
00:06:56,759 --> 00:06:58,919
know this is the most efficient PVSS

183
00:06:58,919 --> 00:07:01,080
scheme uh constructed today even

184
00:07:01,080 --> 00:07:03,300
independently from our yoso application

185
00:07:03,300 --> 00:07:05,340
as future words we would like to

186
00:07:05,340 --> 00:07:07,500
instantiate our framework under

187
00:07:07,500 --> 00:07:09,120
different assumptions rather than this

188
00:07:09,120 --> 00:07:11,940
ddh instantiation we show a promising

189
00:07:11,940 --> 00:07:14,580
approach is using the customers like ume

190
00:07:14,580 --> 00:07:16,080
approach for linearly homomorphic

191
00:07:16,080 --> 00:07:18,419
encryption and we would also like to get

192
00:07:18,419 --> 00:07:20,639
better concrete constants and parameters

193
00:07:20,639 --> 00:07:23,039
for the full-blown ppss on top of the CW

194
00:07:23,039 --> 00:07:25,680
implementation thanks for attention and

195
00:07:25,680 --> 00:07:28,080
I hope you enjoy this conference and

196
00:07:28,080 --> 00:07:31,280
Merry Christmas to all of you

