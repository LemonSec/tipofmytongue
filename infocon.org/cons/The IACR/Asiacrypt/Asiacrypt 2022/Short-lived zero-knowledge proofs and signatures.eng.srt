1
00:00:00,780 --> 00:00:03,000
in this work we designed two new types

2
00:00:03,000 --> 00:00:04,740
of Primitives called short-lived zero

3
00:00:04,740 --> 00:00:06,060
knowledge proofs and short-lived

4
00:00:06,060 --> 00:00:07,379
signatures

5
00:00:07,379 --> 00:00:09,300
imagine you signed something on a piece

6
00:00:09,300 --> 00:00:11,639
of paper with disappearing ink whatever

7
00:00:11,639 --> 00:00:14,160
you signed would vanish after some time

8
00:00:14,160 --> 00:00:16,260
what's the cryptographic equivalent of

9
00:00:16,260 --> 00:00:18,660
this in other words what does it mean to

10
00:00:18,660 --> 00:00:21,300
make a digital signature vanish

11
00:00:21,300 --> 00:00:23,100
one way to do this is to have the

12
00:00:23,100 --> 00:00:26,820
signature lose its soundness over time

13
00:00:26,820 --> 00:00:29,580
say Alice sign something at time 0

14
00:00:29,580 --> 00:00:31,920
up to time T we want her signature to be

15
00:00:31,920 --> 00:00:34,920
sound but after time T the signature

16
00:00:34,920 --> 00:00:37,320
should no longer be convincing

17
00:00:37,320 --> 00:00:39,600
this gives us a notion of deniability

18
00:00:39,600 --> 00:00:42,540
too that is after time T Alex could

19
00:00:42,540 --> 00:00:44,100
claimed that anyone could have made this

20
00:00:44,100 --> 00:00:46,020
unsound signature without her private

21
00:00:46,020 --> 00:00:46,980
key

22
00:00:46,980 --> 00:00:49,320
so how do we achieve this

23
00:00:49,320 --> 00:00:51,960
we allow signatures to be forged after

24
00:00:51,960 --> 00:00:53,219
some time

25
00:00:53,219 --> 00:00:55,440
that is there's a forger here who can

26
00:00:55,440 --> 00:00:57,840
perform a slow computation that takes

27
00:00:57,840 --> 00:01:00,719
time T and finally produces a forgery

28
00:01:00,719 --> 00:01:03,059
Alice's real signature and this forgery

29
00:01:03,059 --> 00:01:04,739
should be indistinguishable

30
00:01:04,739 --> 00:01:07,020
and anyone should be able to create a

31
00:01:07,020 --> 00:01:10,560
forgery for any key and any message

32
00:01:10,560 --> 00:01:13,979
all of this requires a notion of time we

33
00:01:13,979 --> 00:01:15,659
don't have a global clock but we need to

34
00:01:15,659 --> 00:01:18,240
tell we need some way to tell how fresh

35
00:01:18,240 --> 00:01:20,939
a signature is that is if it was made

36
00:01:20,939 --> 00:01:24,299
within time T upon receiving the

37
00:01:24,299 --> 00:01:25,979
signature or not

38
00:01:25,979 --> 00:01:28,560
and we do this using beacons

39
00:01:28,560 --> 00:01:30,720
we assume all parties in our protocols

40
00:01:30,720 --> 00:01:33,119
have access to a beacon that

41
00:01:33,119 --> 00:01:36,000
periodically emits Randomness here in

42
00:01:36,000 --> 00:01:38,420
this diagram we have a beacon that emits

43
00:01:38,420 --> 00:01:42,360
256 bits of Randomness every Delta time

44
00:01:42,360 --> 00:01:44,400
uh beacons have been constructed using

45
00:01:44,400 --> 00:01:46,560
Randomness from stock prices blockchain

46
00:01:46,560 --> 00:01:48,900
block hashes and from distributed

47
00:01:48,900 --> 00:01:52,799
multi-party protocols like drank

48
00:01:52,799 --> 00:01:54,479
in our paper we described three

49
00:01:54,479 --> 00:01:56,939
applications of our New Primitives for

50
00:01:56,939 --> 00:01:59,100
short-lived signatures we use them in

51
00:01:59,100 --> 00:02:01,740
deniable messaging emails and in in

52
00:02:01,740 --> 00:02:03,479
validating email leaks

53
00:02:03,479 --> 00:02:05,040
short-lived zero knowledge groups can be

54
00:02:05,040 --> 00:02:06,899
used in electronic voting systems to get

55
00:02:06,899 --> 00:02:08,459
an interesting property called receipt

56
00:02:08,459 --> 00:02:10,940
freeness

57
00:02:11,099 --> 00:02:13,080
we construct short Loop proofs and

58
00:02:13,080 --> 00:02:15,780
signatures by transforming generic nizik

59
00:02:15,780 --> 00:02:17,520
and sigma protocols into their

60
00:02:17,520 --> 00:02:19,200
short-lived variations

61
00:02:19,200 --> 00:02:21,780
are proofs in our in our paper we have

62
00:02:21,780 --> 00:02:23,580
four Transformations for proofs and two

63
00:02:23,580 --> 00:02:25,500
more for signatures and they each have

64
00:02:25,500 --> 00:02:27,780
different complexities and properties

65
00:02:27,780 --> 00:02:30,000
our constructions all use verifiable

66
00:02:30,000 --> 00:02:32,879
delay functions as a key tool

67
00:02:32,879 --> 00:02:35,280
a vdf is a function that takes a fixed

68
00:02:35,280 --> 00:02:37,020
number of sequential steps to compute

69
00:02:37,020 --> 00:02:39,720
but once this computation is done it's

70
00:02:39,720 --> 00:02:42,120
easy for other parties to verify that it

71
00:02:42,120 --> 00:02:44,280
was done correctly these are the eval

72
00:02:44,280 --> 00:02:47,459
and verify functions respectively

73
00:02:47,459 --> 00:02:50,280
in our work we formalize the notion of

74
00:02:50,280 --> 00:02:53,400
re-randomizable PDFs and we Define and

75
00:02:53,400 --> 00:02:56,220
construct zero knowledge vdfs uh which

76
00:02:56,220 --> 00:02:59,700
are vdfs where y isn't revealed but the

77
00:02:59,700 --> 00:03:01,800
verifier is given a proof convincing

78
00:03:01,800 --> 00:03:04,019
them that the prover has indeed computed

79
00:03:04,019 --> 00:03:06,420
why or has knowledge of why

80
00:03:06,420 --> 00:03:09,180
these variants of vdfs will give us

81
00:03:09,180 --> 00:03:11,099
interesting properties for our shortly

82
00:03:11,099 --> 00:03:13,019
proofs and signatures

83
00:03:13,019 --> 00:03:15,000
one such property is the notion of

84
00:03:15,000 --> 00:03:18,080
reusable forageability

85
00:03:18,120 --> 00:03:20,519
here forging something with a beacon

86
00:03:20,519 --> 00:03:22,739
value produces an extra advice string

87
00:03:22,739 --> 00:03:25,620
and this advice string can help speed up

88
00:03:25,620 --> 00:03:28,680
further forgeries under that Beacon this

89
00:03:28,680 --> 00:03:30,900
enhances deniability as every Beacon

90
00:03:30,900 --> 00:03:32,879
value now requires just one long

91
00:03:32,879 --> 00:03:35,519
computation that helps produce forgeries

92
00:03:35,519 --> 00:03:37,739
for all other keys and statements for

93
00:03:37,739 --> 00:03:40,580
that Beacon value

94
00:03:41,640 --> 00:03:43,680
when formalizing shortlist proofs we

95
00:03:43,680 --> 00:03:46,319
need a new notion of soundness which we

96
00:03:46,319 --> 00:03:48,299
call T soundness

97
00:03:48,299 --> 00:03:50,159
T soundness stipulates that you should

98
00:03:50,159 --> 00:03:51,959
be able to extract a witness from a

99
00:03:51,959 --> 00:03:54,299
prover that produces proofs in time less

100
00:03:54,299 --> 00:03:56,879
than T since the beacon was submitted

101
00:03:56,879 --> 00:04:00,120
but after time T has passed we lose this

102
00:04:00,120 --> 00:04:02,819
guarantee about witness extraction

103
00:04:02,819 --> 00:04:05,099
and note that the time here starts when

104
00:04:05,099 --> 00:04:06,900
the beacon value is given not when the

105
00:04:06,900 --> 00:04:10,799
input statement or message is designed

106
00:04:10,799 --> 00:04:12,540
we Implement our constructions using

107
00:04:12,540 --> 00:04:16,440
bezelowski vdfs using the rsa2048 group

108
00:04:16,440 --> 00:04:17,940
our constructions are actually quite

109
00:04:17,940 --> 00:04:19,858
practical adding just about half a

110
00:04:19,858 --> 00:04:22,380
kilobyte of size overhead to our Sigma

111
00:04:22,380 --> 00:04:23,580
proof versions

112
00:04:23,580 --> 00:04:26,460
our construction using ZK vdfs notably

113
00:04:26,460 --> 00:04:28,919
has reusable forgeability and induces a

114
00:04:28,919 --> 00:04:30,419
fraction of a second overhead for the

115
00:04:30,419 --> 00:04:33,479
proverb 120 milliseconds here we design

116
00:04:33,479 --> 00:04:35,340
more efficient constructions particular

117
00:04:35,340 --> 00:04:38,340
to signatures and Implement them on RSA

118
00:04:38,340 --> 00:04:39,960
signatures to get similarly low

119
00:04:39,960 --> 00:04:42,300
overheads for poorer time and the size

120
00:04:42,300 --> 00:04:45,080
of the signatures

