1
00:00:00,780 --> 00:00:03,060
the subject of this paper is the

2
00:00:03,060 --> 00:00:04,740
Improvement of linear key recovery

3
00:00:04,740 --> 00:00:06,480
attacks using another pruning technique

4
00:00:06,480 --> 00:00:10,099
for the fast Wireless transform

5
00:00:10,380 --> 00:00:12,840
Yankee recovery attack we express the

6
00:00:12,840 --> 00:00:14,460
value of a linear approximation as a

7
00:00:14,460 --> 00:00:16,320
function parts parts of the plain text

8
00:00:16,320 --> 00:00:18,840
the safer text and the key

9
00:00:18,840 --> 00:00:21,119
in this paper we assume that part of the

10
00:00:21,119 --> 00:00:23,340
key is stored directly to the plain text

11
00:00:23,340 --> 00:00:25,260
and the ciphertext

12
00:00:25,260 --> 00:00:27,420
so the aim of the attacker is to compute

13
00:00:27,420 --> 00:00:29,519
the experimental correlation of this

14
00:00:29,519 --> 00:00:31,080
linear approximation for each possible

15
00:00:31,080 --> 00:00:33,480
key with the hopes of distinguishing the

16
00:00:33,480 --> 00:00:36,000
correct guess from the wrong ones

17
00:00:36,000 --> 00:00:37,980
one popular way of computing this

18
00:00:37,980 --> 00:00:39,719
experimental correlations is the

19
00:00:39,719 --> 00:00:41,579
so-called walls transform or fft

20
00:00:41,579 --> 00:00:44,040
technique

21
00:00:44,040 --> 00:00:47,640
broadly speaking this technique

22
00:00:47,640 --> 00:00:49,860
first we count the number of occurrences

23
00:00:49,860 --> 00:00:51,660
in the data for each possible value of

24
00:00:51,660 --> 00:00:54,300
the plain text and ciphertext segments

25
00:00:54,300 --> 00:00:57,180
next we apply the first was transform on

26
00:00:57,180 --> 00:00:59,879
this Vector then we multiply the vector

27
00:00:59,879 --> 00:01:01,980
by the wall spectrum of the key recovery

28
00:01:01,980 --> 00:01:02,879
map

29
00:01:02,879 --> 00:01:05,280
and finally we apply the fast towards

30
00:01:05,280 --> 00:01:07,080
transform again to obtain the desired

31
00:01:07,080 --> 00:01:09,060
experimental correlations

32
00:01:09,060 --> 00:01:11,280
the total complexity of this version of

33
00:01:11,280 --> 00:01:13,020
the attack depends on the data

34
00:01:13,020 --> 00:01:15,299
complexity as well as the length of the

35
00:01:15,299 --> 00:01:19,220
inputs to the key recovery map

36
00:01:20,100 --> 00:01:22,560
however we may want to improve this

37
00:01:22,560 --> 00:01:24,540
complexity by exploiting specific

38
00:01:24,540 --> 00:01:27,060
details about the target Cipher for

39
00:01:27,060 --> 00:01:29,220
example we may want to acknowledge the

40
00:01:29,220 --> 00:01:31,020
fact that in some cases the initial

41
00:01:31,020 --> 00:01:33,720
Vector will be very Spas we also want to

42
00:01:33,720 --> 00:01:36,540
make use of any relations on the gigas

43
00:01:36,540 --> 00:01:38,520
which are induced by the key schedule

44
00:01:38,520 --> 00:01:40,979
and finally we want to take into account

45
00:01:40,979 --> 00:01:43,200
the structure of the key recovery map

46
00:01:43,200 --> 00:01:46,979
which depends on the cipher Construction

47
00:01:46,979 --> 00:01:49,200
we can express all of these properties

48
00:01:49,200 --> 00:01:51,720
as zeros in the input and the output

49
00:01:51,720 --> 00:01:54,119
vectors to the ones transform steps of

50
00:01:54,119 --> 00:01:56,880
the attack however in order to exploit

51
00:01:56,880 --> 00:01:58,320
this opacity

52
00:01:58,320 --> 00:02:00,659
we must modify the first was transform

53
00:02:00,659 --> 00:02:03,259
algorithm

54
00:02:06,659 --> 00:02:08,399
introduce a new pruning technique for

55
00:02:08,399 --> 00:02:10,380
the for the first World's transform

56
00:02:10,380 --> 00:02:12,840
we consider that all the non-zero inputs

57
00:02:12,840 --> 00:02:16,319
will lie in some known affine Subspace X

58
00:02:16,319 --> 00:02:19,020
and we also assume that we only wish to

59
00:02:19,020 --> 00:02:21,360
compute the outputs which lie on another

60
00:02:21,360 --> 00:02:23,819
affine Subspace U

61
00:02:23,819 --> 00:02:25,920
we describe an algorithm which can

62
00:02:25,920 --> 00:02:29,340
reduce the complexity of computing such

63
00:02:29,340 --> 00:02:32,220
a wealth transform to one of smaller

64
00:02:32,220 --> 00:02:35,879
Dimension 230 where this parameter T is

65
00:02:35,879 --> 00:02:39,120
smaller than the dimensions of X and u

66
00:02:39,120 --> 00:02:41,040
this means that the final complexity

67
00:02:41,040 --> 00:02:42,480
will only depend on the number of

68
00:02:42,480 --> 00:02:45,000
non-zero inputs the number of desired

69
00:02:45,000 --> 00:02:48,360
outputs and the parameter t

70
00:02:48,360 --> 00:02:50,160
in particular

71
00:02:50,160 --> 00:02:52,500
the complexity is not dependent on the

72
00:02:52,500 --> 00:02:55,819
size of the full transform

73
00:02:56,099 --> 00:02:58,440
this algorithm can be applied to linear

74
00:02:58,440 --> 00:03:00,120
key recovery attacks

75
00:03:00,120 --> 00:03:03,000
when we can restrict the inputs and the

76
00:03:03,000 --> 00:03:04,860
outputs of some of these words

77
00:03:04,860 --> 00:03:09,239
Transformer steps to assign subspaces

78
00:03:09,239 --> 00:03:11,640
this means that we can obtain a

79
00:03:11,640 --> 00:03:14,519
particularly large complexity gains

80
00:03:14,519 --> 00:03:16,980
when the support of the word spectrum of

81
00:03:16,980 --> 00:03:19,860
the key recovery map lies on some Union

82
00:03:19,860 --> 00:03:24,500
of small dimension affine subspaces

83
00:03:25,140 --> 00:03:27,180
we study this type of property for

84
00:03:27,180 --> 00:03:29,280
ciphers using bit permutations as linear

85
00:03:29,280 --> 00:03:31,680
layers and find that such structures

86
00:03:31,680 --> 00:03:33,599
appear when certain words coefficients

87
00:03:33,599 --> 00:03:36,540
of the s-box are equal to zero we also

88
00:03:36,540 --> 00:03:38,340
show that we can effectively set this

89
00:03:38,340 --> 00:03:41,040
was coefficient to Zero by rejecting a

90
00:03:41,040 --> 00:03:42,420
small fraction of the plaintext

91
00:03:42,420 --> 00:03:45,440
ciphertext pairs

92
00:03:45,540 --> 00:03:47,879
we describe two application examples for

93
00:03:47,879 --> 00:03:50,819
this improved attack algorithm first we

94
00:03:50,819 --> 00:03:52,500
provide an improved version of mattress

95
00:03:52,500 --> 00:03:54,540
attack on the full Des

96
00:03:54,540 --> 00:03:56,220
and we achieve the best known data

97
00:03:56,220 --> 00:03:57,420
complexity

98
00:03:57,420 --> 00:03:59,819
second we construct the first attack on

99
00:03:59,819 --> 00:04:03,360
29 rounds of the 128 bit key variant of

100
00:04:03,360 --> 00:04:04,440
preset

101
00:04:04,440 --> 00:04:06,060
there are several open problems

102
00:04:06,060 --> 00:04:08,099
regarding this technique but we think

103
00:04:08,099 --> 00:04:09,780
that the main one is studying its

104
00:04:09,780 --> 00:04:11,580
applicability to more General linear

105
00:04:11,580 --> 00:04:13,939
layers

