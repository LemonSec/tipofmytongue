1
00:00:01,680 --> 00:00:04,019
time for snacks welcome everybody I'm

2
00:00:04,019 --> 00:00:06,779
Hamza abusala this work is done jointly

3
00:00:06,779 --> 00:00:09,900
with geography and Karen Klein

4
00:00:09,900 --> 00:00:11,820
I'll start up by talking about light

5
00:00:11,820 --> 00:00:13,920
client blockchain with striping as a

6
00:00:13,920 --> 00:00:16,440
problem then Define snacks succinct an

7
00:00:16,440 --> 00:00:18,480
interactive arguments of chain knowledge

8
00:00:18,480 --> 00:00:19,740
and then show you how to construct

9
00:00:19,740 --> 00:00:21,900
snacks from proof of sequential work

10
00:00:21,900 --> 00:00:24,480
schemes and then show you how to use

11
00:00:24,480 --> 00:00:26,580
snacks to to solve the problem of

12
00:00:26,580 --> 00:00:29,099
bootstrapping generically

13
00:00:29,099 --> 00:00:31,199
in like client blockchain protocols you

14
00:00:31,199 --> 00:00:34,140
have a full node proof analyze client

15
00:00:34,140 --> 00:00:36,480
Miner and approver stores the entirety

16
00:00:36,480 --> 00:00:38,280
of the blockchain the light client has

17
00:00:38,280 --> 00:00:40,200
minimal information about the chain says

18
00:00:40,200 --> 00:00:42,480
Genesis block the protocol will be

19
00:00:42,480 --> 00:00:44,280
required to satisfy a few properties

20
00:00:44,280 --> 00:00:46,620
that the effort of the verifier is

21
00:00:46,620 --> 00:00:48,719
sublinear the communication is sublinear

22
00:00:48,719 --> 00:00:51,180
and the protocol isn't interactive if it

23
00:00:51,180 --> 00:00:53,280
additionally satisfies the approvers

24
00:00:53,280 --> 00:00:55,559
effort is sublinear and there are no set

25
00:00:55,559 --> 00:00:57,600
of assumptions then that's even better

26
00:00:57,600 --> 00:00:59,760
our protocol achieves all of these

27
00:00:59,760 --> 00:01:00,739
properties

28
00:01:00,739 --> 00:01:04,319
in a bootstrapping protocol the very

29
00:01:04,319 --> 00:01:06,840
fire having the the Genesis block here

30
00:01:06,840 --> 00:01:08,000
b0

31
00:01:08,000 --> 00:01:11,460
after potentially took a reading a bunch

32
00:01:11,460 --> 00:01:13,740
of proofs from different provers its

33
00:01:13,740 --> 00:01:15,659
ultimate goal is to Output a commitment

34
00:01:15,659 --> 00:01:18,479
to the stable prefix of the blockchain

35
00:01:18,479 --> 00:01:21,299
this is powerful if the approva ends up

36
00:01:21,299 --> 00:01:23,159
having the commitment to the same prefix

37
00:01:23,159 --> 00:01:25,580
of the blockchain it can also

38
00:01:25,580 --> 00:01:29,280
become a full node Miner itself but also

39
00:01:29,280 --> 00:01:32,640
it can verify different statements about

40
00:01:32,640 --> 00:01:36,420
transactions in the blockchain so in

41
00:01:36,420 --> 00:01:38,220
this example I'm having two blockchains

42
00:01:38,220 --> 00:01:40,380
Bitcoin and chia Bitcoin a proof of work

43
00:01:40,380 --> 00:01:42,180
blockchain Chia proof of space

44
00:01:42,180 --> 00:01:44,759
blockchain and we have our bootstrapped

45
00:01:44,759 --> 00:01:48,659
verifier then each any approver can do

46
00:01:48,659 --> 00:01:50,880
statements about say the ith block and

47
00:01:50,880 --> 00:01:54,360
in Bitcoin and the jth Block in in Gia

48
00:01:54,360 --> 00:01:58,140
by opening the respective blogs and

49
00:01:58,140 --> 00:02:00,960
providing their respective proofs

50
00:02:00,960 --> 00:02:03,840
so having a commitment to to the

51
00:02:03,840 --> 00:02:06,719
blockchain is is a powerful uh it's a

52
00:02:06,719 --> 00:02:08,880
powerful tool solutions to this problem

53
00:02:08,880 --> 00:02:11,340
exist you have snarks generic Solutions

54
00:02:11,340 --> 00:02:12,959
you have none interactive proofs of

55
00:02:12,959 --> 00:02:15,420
proofs of work you have fly client some

56
00:02:15,420 --> 00:02:17,459
limitations of this work exist either

57
00:02:17,459 --> 00:02:19,140
they have some setup assumptions or

58
00:02:19,140 --> 00:02:21,480
limited applicability apply for proof of

59
00:02:21,480 --> 00:02:23,220
work blockchains but not for proof of

60
00:02:23,220 --> 00:02:25,739
space blockchains for example or limited

61
00:02:25,739 --> 00:02:27,599
usefulness some of them do not even have

62
00:02:27,599 --> 00:02:30,180
the notion of a commitment but more

63
00:02:30,180 --> 00:02:33,120
interestingly a fly client and any Papa

64
00:02:33,120 --> 00:02:35,220
they work in a model where you have

65
00:02:35,220 --> 00:02:37,200
multiple proofers assuming one of them

66
00:02:37,200 --> 00:02:39,420
is honest this is the only case where

67
00:02:39,420 --> 00:02:41,879
the verifier has any guarantees if the

68
00:02:41,879 --> 00:02:44,459
vampire is talking to to a malicious

69
00:02:44,459 --> 00:02:45,780
prover there are no guarantees

70
00:02:45,780 --> 00:02:46,980
whatsoever

71
00:02:46,980 --> 00:02:49,319
in this work we Define a classical proof

72
00:02:49,319 --> 00:02:52,080
system that underlies bootstrapping and

73
00:02:52,080 --> 00:02:54,900
some other light client protocols

74
00:02:54,900 --> 00:02:57,180
we construct snacks from graph labeling

75
00:02:57,180 --> 00:02:59,160
professional work scheme and the web we

76
00:02:59,160 --> 00:03:00,780
unify and generalize these schemes and

77
00:03:00,780 --> 00:03:02,599
provide a new one

78
00:03:02,599 --> 00:03:06,360
and we we show how to use these snacks

79
00:03:06,360 --> 00:03:07,860
to generically solve the problem of

80
00:03:07,860 --> 00:03:10,500
bootstrapping the advantage of our work

81
00:03:10,500 --> 00:03:12,959
is it provides classical soundness

82
00:03:12,959 --> 00:03:15,500
guarantees you have classical soundness

83
00:03:15,500 --> 00:03:18,060
measurable guarantees for the verifier

84
00:03:18,060 --> 00:03:20,840
that reads malicious proof

85
00:03:20,840 --> 00:03:23,700
the work is simple generic and modular

86
00:03:23,700 --> 00:03:25,560
and it allows for exchange of ideas

87
00:03:25,560 --> 00:03:27,300
between the theory of proof of signature

88
00:03:27,300 --> 00:03:29,159
work schemes and unlike client

89
00:03:29,159 --> 00:03:31,860
blockchain applications

90
00:03:31,860 --> 00:03:34,260
in one slide the way we we do our

91
00:03:34,260 --> 00:03:36,780
construction we assume that we have a

92
00:03:36,780 --> 00:03:39,180
blockchain so this is the underlying

93
00:03:39,180 --> 00:03:41,760
graph of a blockchain it has a simple

94
00:03:41,760 --> 00:03:44,220
path but it could have additional edges

95
00:03:44,220 --> 00:03:47,040
in this case these dotted edges

96
00:03:47,040 --> 00:03:50,159
and if you have the graph the underlying

97
00:03:50,159 --> 00:03:51,900
graph of a proof of sequential work

98
00:03:51,900 --> 00:03:55,019
scheme I'm giving an example here for

99
00:03:55,019 --> 00:03:56,879
scheme that I will show in the in the

100
00:03:56,879 --> 00:03:59,220
paper and in the presentation then we

101
00:03:59,220 --> 00:04:00,840
can show how to intertwine the

102
00:04:00,840 --> 00:04:03,180
computation of the proof of the

103
00:04:03,180 --> 00:04:05,580
blockchain and

104
00:04:05,580 --> 00:04:07,560
and the proof of sequential work scheme

105
00:04:07,560 --> 00:04:10,080
by absorbing the blockchain computation

106
00:04:10,080 --> 00:04:12,420
into that of the proof of sequential

107
00:04:12,420 --> 00:04:15,239
work scheme such that we derive

108
00:04:15,239 --> 00:04:18,180
guarantees on the blockchain from the

109
00:04:18,180 --> 00:04:21,180
sequential guarantees on the proof

110
00:04:21,180 --> 00:04:23,360
sequential Works key

111
00:04:23,360 --> 00:04:26,639
this is in in picture like you have two

112
00:04:26,639 --> 00:04:29,460
graphs so you define one one augmented

113
00:04:29,460 --> 00:04:30,960
graph and you show how to label the

114
00:04:30,960 --> 00:04:33,360
graph and utilize the proof of verifier

115
00:04:33,360 --> 00:04:34,979
of the proof of sequential work scheme

116
00:04:34,979 --> 00:04:38,400
to build approver verifier for the the

117
00:04:38,400 --> 00:04:40,440
snack success and interactive argument

118
00:04:40,440 --> 00:04:42,000
of general knowledge if you're

119
00:04:42,000 --> 00:04:44,280
interested in like client applications

120
00:04:44,280 --> 00:04:46,800
like bootstrapping or in proof of

121
00:04:46,800 --> 00:04:48,780
sequential work schemes then hopefully

122
00:04:48,780 --> 00:04:52,520
see you in the full talk thank you

