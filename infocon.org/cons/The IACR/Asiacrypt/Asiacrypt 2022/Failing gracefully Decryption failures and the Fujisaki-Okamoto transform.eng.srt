1
00:00:00,719 --> 00:00:03,360
hi everyone and Welcome to our video

2
00:00:03,360 --> 00:00:05,700
abstract about decryption failures and

3
00:00:05,700 --> 00:00:08,340
the fujizaki okamoto transformation

4
00:00:08,340 --> 00:00:11,460
this was joint work with Andreas ruizing

5
00:00:11,460 --> 00:00:14,040
and Christian Mayans we were motivated

6
00:00:14,040 --> 00:00:16,619
by taking another look at how post

7
00:00:16,619 --> 00:00:18,420
Quantum key encapsulation mechanisms

8
00:00:18,420 --> 00:00:20,640
were built during the standardization

9
00:00:20,640 --> 00:00:24,000
process for post Quantum secure crypto

10
00:00:24,000 --> 00:00:26,640
what all of these key encapsulation

11
00:00:26,640 --> 00:00:29,340
approaches had in common was that they

12
00:00:29,340 --> 00:00:32,540
shared the same recipe how to turn

13
00:00:32,540 --> 00:00:34,920
passively Secure Public key encryption

14
00:00:34,920 --> 00:00:37,140
into actively secure key encapsulation

15
00:00:37,140 --> 00:00:38,399
mechanism

16
00:00:38,399 --> 00:00:40,559
this recipe by now is quite well known

17
00:00:40,559 --> 00:00:42,680
it's the fujizaki okamoto transformation

18
00:00:42,680 --> 00:00:46,320
that was recently Revisited at TCC in

19
00:00:46,320 --> 00:00:48,660
2017.

20
00:00:48,660 --> 00:00:53,160
and the revisiting happened to allow for

21
00:00:53,160 --> 00:00:56,000
um public encryption schemes where

22
00:00:56,000 --> 00:00:58,500
decryption sometimes fail which can

23
00:00:58,500 --> 00:01:01,140
happen for example for letters or

24
00:01:01,140 --> 00:01:04,799
code-based schemes and the revisiting

25
00:01:04,799 --> 00:01:06,600
also considered different rejection

26
00:01:06,600 --> 00:01:07,860
methods

27
00:01:07,860 --> 00:01:10,880
meaning methods of how to deal with

28
00:01:10,880 --> 00:01:14,520
ciphertexts that do not look well formed

29
00:01:14,520 --> 00:01:17,340
one approach is to Simply during the

30
00:01:17,340 --> 00:01:19,320
encapsulation answer with a dedicated

31
00:01:19,320 --> 00:01:21,780
rejection symbol like bottom the other

32
00:01:21,780 --> 00:01:24,420
approach is to hide and that the

33
00:01:24,420 --> 00:01:27,600
ciphertext was not accepted by replying

34
00:01:27,600 --> 00:01:31,140
with an absolute random value

35
00:01:31,140 --> 00:01:33,840
of course by now the Fuji Zaki okamoto

36
00:01:33,840 --> 00:01:35,700
transform has also been Revisited in the

37
00:01:35,700 --> 00:01:37,439
quantum random Oracle model because we

38
00:01:37,439 --> 00:01:40,320
are now interested in post Quantum

39
00:01:40,320 --> 00:01:41,880
secure schemes

40
00:01:41,880 --> 00:01:46,439
and if you take a look at the Quantum

41
00:01:46,439 --> 00:01:48,060
random Oracle Model results we've seen

42
00:01:48,060 --> 00:01:50,520
so far there are some things that at

43
00:01:50,520 --> 00:01:53,579
least we found kind of intriguing

44
00:01:53,579 --> 00:01:56,460
the first thing is that while random

45
00:01:56,460 --> 00:01:59,040
Oracle Model results are kind of

46
00:01:59,040 --> 00:02:01,680
agnostic to the rejection method meaning

47
00:02:01,680 --> 00:02:05,340
regardless of whether you return bottom

48
00:02:05,340 --> 00:02:07,259
or absolute random value

49
00:02:07,259 --> 00:02:10,679
the security bound does not change

50
00:02:10,679 --> 00:02:12,680
in the quantum random Oracle model

51
00:02:12,680 --> 00:02:15,660
implicitly rejecting variance had vastly

52
00:02:15,660 --> 00:02:18,239
better security bounds than explicitly

53
00:02:18,239 --> 00:02:21,000
rejecting variance

54
00:02:21,000 --> 00:02:23,400
another thing we found kind of

55
00:02:23,400 --> 00:02:26,160
surprising was that all security bounds

56
00:02:26,160 --> 00:02:29,640
so far contained a grover-like search

57
00:02:29,640 --> 00:02:32,280
term that was relative to Delta the

58
00:02:32,280 --> 00:02:34,980
error probability even though it is not

59
00:02:34,980 --> 00:02:37,620
clear how an attacker could do a full

60
00:02:37,620 --> 00:02:39,720
Quantum search because

61
00:02:39,720 --> 00:02:42,300
a decryption failure usually depends on

62
00:02:42,300 --> 00:02:45,480
the secret key to which the attacker has

63
00:02:45,480 --> 00:02:47,040
no access

64
00:02:47,040 --> 00:02:49,379
so all in all we were wondering whether

65
00:02:49,379 --> 00:02:51,300
the bounce we've seen so far might be

66
00:02:51,300 --> 00:02:53,160
sub-optimal

67
00:02:53,160 --> 00:02:55,319
a more interesting

68
00:02:55,319 --> 00:02:57,959
part of our observations probably is

69
00:02:57,959 --> 00:03:01,980
that we encountered an applicability

70
00:03:01,980 --> 00:03:03,180
issue

71
00:03:03,180 --> 00:03:06,780
by that I mean that the definition of

72
00:03:06,780 --> 00:03:09,780
the error probability data that we

73
00:03:09,780 --> 00:03:13,680
require for our security proofs does not

74
00:03:13,680 --> 00:03:18,060
match the estimations of data that were

75
00:03:18,060 --> 00:03:20,220
given for concrete schemes like Khyber

76
00:03:20,220 --> 00:03:22,319
and I'll be talking a bit more about

77
00:03:22,319 --> 00:03:24,599
this in the full talk

78
00:03:24,599 --> 00:03:27,840
so what this work does is that it aims

79
00:03:27,840 --> 00:03:30,060
to deal with all of these weird things

80
00:03:30,060 --> 00:03:33,180
and problems to achieve more optimal

81
00:03:33,180 --> 00:03:37,080
bounds and also to give a security proof

82
00:03:37,080 --> 00:03:39,780
that is actually applicable to the

83
00:03:39,780 --> 00:03:43,200
estimations of data we have seen so far

84
00:03:43,200 --> 00:03:46,379
and on the way we also pick up some cool

85
00:03:46,379 --> 00:03:48,780
new Quran techniques that allow you to

86
00:03:48,780 --> 00:03:51,420
lift certain types of random Oracle

87
00:03:51,420 --> 00:03:55,099
model proofs into the queue run

88
00:03:55,500 --> 00:03:57,900
the technical side we were faced with a

89
00:03:57,900 --> 00:03:59,879
problem that we had two existing

90
00:03:59,879 --> 00:04:03,000
techniques and extractable Quantum

91
00:04:03,000 --> 00:04:06,000
random Oracle model simulator and the

92
00:04:06,000 --> 00:04:08,040
so-called one-way to hide in Lemma but

93
00:04:08,040 --> 00:04:10,500
naively they cannot be combined in the

94
00:04:10,500 --> 00:04:13,200
way we want it to combine them so we

95
00:04:13,200 --> 00:04:15,659
opened the black boxes and proved a new

96
00:04:15,659 --> 00:04:17,940
one-way to hiding Lemma for the

97
00:04:17,940 --> 00:04:20,820
extractable quantum random Oracle model

98
00:04:20,820 --> 00:04:23,280
in addition when we wanted to

99
00:04:23,280 --> 00:04:25,919
characterize the behavior of public key

100
00:04:25,919 --> 00:04:27,479
encryption schemes with decryption

101
00:04:27,479 --> 00:04:30,960
errors under the randomization we needed

102
00:04:30,960 --> 00:04:33,540
query lower bounds for a task that is

103
00:04:33,540 --> 00:04:35,280
related to search but is not exactly

104
00:04:35,280 --> 00:04:38,220
search it's the task of finding input

105
00:04:38,220 --> 00:04:42,000
output values of the random Oracle that

106
00:04:42,000 --> 00:04:44,220
evaluate to large values under some

107
00:04:44,220 --> 00:04:45,720
predicate function

108
00:04:45,720 --> 00:04:48,240
so we generalized some proof techniques

109
00:04:48,240 --> 00:04:50,820
to improve that square lower bonds

110
00:04:50,820 --> 00:04:53,040
if this sort of teaser made you curious

111
00:04:53,040 --> 00:04:55,199
then I recommend you come to our talk

112
00:04:55,199 --> 00:04:57,000
and we will be given by Caspian

113
00:04:57,000 --> 00:04:58,620
hervemance here you can see when and

114
00:04:58,620 --> 00:05:02,240
where it will take place thanks

