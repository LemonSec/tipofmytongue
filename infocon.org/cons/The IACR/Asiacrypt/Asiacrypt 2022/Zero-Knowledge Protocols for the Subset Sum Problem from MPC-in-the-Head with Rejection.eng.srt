1
00:00:03,319 --> 00:00:06,180
I'm going to present you a joint work

2
00:00:06,180 --> 00:00:09,360
entitled zero knowledge protocols for

3
00:00:09,360 --> 00:00:12,719
the subsection program from MP3 with

4
00:00:12,719 --> 00:00:14,460
rejection

5
00:00:14,460 --> 00:00:16,980
in this world we propose a new technique

6
00:00:16,980 --> 00:00:19,560
to share small values in the indexing Z

7
00:00:19,560 --> 00:00:22,859
Paradigm and we apply it to build

8
00:00:22,859 --> 00:00:25,019
efficient zero knowledge proofs of

9
00:00:25,019 --> 00:00:28,099
knowledge for the subsection problem

10
00:00:28,099 --> 00:00:31,859
given a weight Vector W and scalar T the

11
00:00:31,859 --> 00:00:34,620
subset sum program consists to find a

12
00:00:34,620 --> 00:00:38,219
binary Vector X so that we have this

13
00:00:38,219 --> 00:00:42,059
linear relation modulusum value Q

14
00:00:42,059 --> 00:00:45,600
in practice two is very large for

15
00:00:45,600 --> 00:00:51,480
example it can be a 256 bit value

16
00:00:51,480 --> 00:00:53,940
to design zero knowledge process of

17
00:00:53,940 --> 00:00:55,920
knowledge for this problem which shows

18
00:00:55,920 --> 00:01:00,800
to rely on the npcincere aerodynamic

19
00:01:01,920 --> 00:01:04,500
when applying this Paradigm we need to

20
00:01:04,500 --> 00:01:07,380
share the secret information

21
00:01:07,380 --> 00:01:09,600
in the case of the subsection program

22
00:01:09,600 --> 00:01:12,900
the secret is a binary Vector so we must

23
00:01:12,900 --> 00:01:15,420
share bits

24
00:01:15,420 --> 00:01:18,420
the standard way to share is to use the

25
00:01:18,420 --> 00:01:21,960
additive sharing modular queue

26
00:01:21,960 --> 00:01:24,900
implying that each share uniformly

27
00:01:24,900 --> 00:01:27,060
sample would you like you

28
00:01:27,060 --> 00:01:29,640
and that the sharing offset is deduced

29
00:01:29,640 --> 00:01:33,439
to have the wanted equality

30
00:01:34,560 --> 00:01:35,939
however

31
00:01:35,939 --> 00:01:38,939
since the sharing offset is included in

32
00:01:38,939 --> 00:01:41,939
the proof transcript when using this

33
00:01:41,939 --> 00:01:45,299
sharing the communication cost of the

34
00:01:45,299 --> 00:01:49,140
protocol would be already more than 128

35
00:01:49,140 --> 00:01:52,320
kilobytes for the source sharing of the

36
00:01:52,320 --> 00:01:56,159
secret when using standard values

37
00:01:56,159 --> 00:01:59,159
in this world we propose to use another

38
00:01:59,159 --> 00:02:02,460
sharing schema the additive sharing on

39
00:02:02,460 --> 00:02:04,320
integers

40
00:02:04,320 --> 00:02:07,500
each share is uniformly sampled between

41
00:02:07,500 --> 00:02:11,220
0 and some upper bound a and the sharing

42
00:02:11,220 --> 00:02:13,739
of set is computed with the same

43
00:02:13,739 --> 00:02:16,980
equality as before but without the

44
00:02:16,980 --> 00:02:19,739
modulo queue

45
00:02:19,739 --> 00:02:23,300
however such sharing leaks information

46
00:02:23,300 --> 00:02:26,280
the distribution of the sharing of that

47
00:02:26,280 --> 00:02:29,220
only the same depending on the value or

48
00:02:29,220 --> 00:02:31,080
the shared bit

49
00:02:31,080 --> 00:02:33,300
but in this work

50
00:02:33,300 --> 00:02:36,480
we show that we can add simple rejection

51
00:02:36,480 --> 00:02:42,079
rules to avoid this information decade

52
00:02:43,319 --> 00:02:45,780
when sharing a binary Vector the

53
00:02:45,780 --> 00:02:48,599
rejection rate of our proposal is given

54
00:02:48,599 --> 00:02:51,300
by this formula

55
00:02:51,300 --> 00:02:53,760
moreover the communication cost due to

56
00:02:53,760 --> 00:02:57,780
this sharing is given by by n Times log

57
00:02:57,780 --> 00:02:59,400
of am

58
00:02:59,400 --> 00:03:05,900
bids instead of n Times log of 2 bits

59
00:03:06,000 --> 00:03:08,940
using this sharing we can decrease a lot

60
00:03:08,940 --> 00:03:12,180
the communication cost while having a

61
00:03:12,180 --> 00:03:15,019
quality to about when

62
00:03:15,019 --> 00:03:18,680
performing the proof

63
00:03:19,620 --> 00:03:22,560
now that we know how we will share the

64
00:03:22,560 --> 00:03:26,159
secret we can Define the MPC protocol we

65
00:03:26,159 --> 00:03:29,400
will use in the NPC engineer or lagging

66
00:03:29,400 --> 00:03:32,879
in our work we propose two protocols

67
00:03:32,879 --> 00:03:35,940
the first one uses sacrificing strategy

68
00:03:35,940 --> 00:03:39,599
of boom and love while the second one

69
00:03:39,599 --> 00:03:43,940
use a cut and choose strategy

70
00:03:43,940 --> 00:03:46,980
the only switching protocols can achieve

71
00:03:46,980 --> 00:03:50,280
communication cost below 20 kilobytes

72
00:03:50,280 --> 00:03:52,620
while the firmware proposals have

73
00:03:52,620 --> 00:03:55,980
communication and costs larger than 100

74
00:03:55,980 --> 00:03:58,879
kilobytes

75
00:03:59,700 --> 00:04:02,879
in how walk we apply our sharing

76
00:04:02,879 --> 00:04:06,060
technique to other applications

77
00:04:06,060 --> 00:04:08,760
first it can be applied to the short

78
00:04:08,760 --> 00:04:11,760
integer solution problem but which

79
00:04:11,760 --> 00:04:14,879
provides beneficial alternative when the

80
00:04:14,879 --> 00:04:18,418
underlying ring is not small and entity

81
00:04:18,418 --> 00:04:20,579
friendly

82
00:04:20,579 --> 00:04:23,520
suddenly it can be applied

83
00:04:23,520 --> 00:04:25,500
to build efficient zero knowledge

84
00:04:25,500 --> 00:04:27,780
arguments of key knowledge

85
00:04:27,780 --> 00:04:30,300
in the context of fully homomorphic

86
00:04:30,300 --> 00:04:32,580
encryption

87
00:04:32,580 --> 00:04:36,000
finally it can be used to build an

88
00:04:36,000 --> 00:04:38,759
efficient signature schema from burning

89
00:04:38,759 --> 00:04:42,300
and house prf

90
00:04:43,500 --> 00:04:45,840
to conclude we're proposing this work a

91
00:04:45,840 --> 00:04:49,139
new Mp3 technique to share small values

92
00:04:49,139 --> 00:04:50,639
as means

93
00:04:50,639 --> 00:04:54,000
and we describe several applications of

94
00:04:54,000 --> 00:04:55,800
this technique

95
00:04:55,800 --> 00:04:58,139
thank you for your attention and see you

96
00:04:58,139 --> 00:05:01,139
on the 7th of December for the complete

97
00:05:01,139 --> 00:05:03,320
talk

