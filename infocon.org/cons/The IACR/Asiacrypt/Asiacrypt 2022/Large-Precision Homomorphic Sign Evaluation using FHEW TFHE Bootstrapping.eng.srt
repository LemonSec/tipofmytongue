1
00:00:01,380 --> 00:00:03,780
hello everyone this is toy Elio today

2
00:00:03,780 --> 00:00:05,400
I'm going to talk about large Precision

3
00:00:05,400 --> 00:00:09,240
homomorphic sign evaluation using few TV

4
00:00:09,240 --> 00:00:10,920
it's a joint work with Daniella

5
00:00:10,920 --> 00:00:14,300
michancho and you report account

6
00:00:14,880 --> 00:00:18,180
so for some background information uh

7
00:00:18,180 --> 00:00:21,119
we in this paper we use a functional or

8
00:00:21,119 --> 00:00:23,039
programmable bootstrapping what that

9
00:00:23,039 --> 00:00:24,539
means is that it basically we can

10
00:00:24,539 --> 00:00:26,580
evaluate an arbitrary Mega cyclic

11
00:00:26,580 --> 00:00:28,980
function basis for free while also

12
00:00:28,980 --> 00:00:30,359
performing some bootstrapping over

13
00:00:30,359 --> 00:00:33,239
elderbs affects this is first introduced

14
00:00:33,239 --> 00:00:36,000
in dm15 and it has two constraints the

15
00:00:36,000 --> 00:00:37,800
first one is that it requires the next

16
00:00:37,800 --> 00:00:40,739
cyclic function uh exactly basically

17
00:00:40,739 --> 00:00:43,680
means that for some input X and zq you

18
00:00:43,680 --> 00:00:46,200
need to satisfy that f of x equals to

19
00:00:46,200 --> 00:00:49,559
negative of f of x plus Q over T you can

20
00:00:49,559 --> 00:00:50,879
see this is a relatively strong

21
00:00:50,879 --> 00:00:53,520
restriction and the second restrictions

22
00:00:53,520 --> 00:00:55,379
that they can only evaluate functions

23
00:00:55,379 --> 00:00:56,879
for messages app to keep this a

24
00:00:56,879 --> 00:00:59,879
precision and usually case equal to 506.

25
00:00:59,879 --> 00:01:02,520
uh basically the runtime exponential is

26
00:01:02,520 --> 00:01:05,339
exponential in the in the number of bits

27
00:01:05,339 --> 00:01:08,340
so for more than five or six bits the

28
00:01:08,340 --> 00:01:12,560
runtime will be relatively impractical

29
00:01:13,080 --> 00:01:15,659
and there are two uh bootstrapping

30
00:01:15,659 --> 00:01:17,460
methods discussed in the paper the first

31
00:01:17,460 --> 00:01:20,700
one is few uh introducing dm15 it can

32
00:01:20,700 --> 00:01:23,400
efficiently support uh arbitrary Secrets

33
00:01:23,400 --> 00:01:24,840
but the bootstrapping key size is

34
00:01:24,840 --> 00:01:26,820
relatively large and the second method

35
00:01:26,820 --> 00:01:30,360
is tfvg it it's introduced in cgg i60

36
00:01:30,360 --> 00:01:32,939
and provides better runtime performance

37
00:01:32,939 --> 00:01:34,799
for small Secrets like binary ternary

38
00:01:34,799 --> 00:01:36,780
and the shopping key size is much

39
00:01:36,780 --> 00:01:40,860
smaller to see MP top 21 for detail

40
00:01:40,860 --> 00:01:43,020
comparison and see uh this new paper for

41
00:01:43,020 --> 00:01:45,479
third method uh this is comes after our

42
00:01:45,479 --> 00:01:47,220
previous published so it's not included

43
00:01:47,220 --> 00:01:48,299
in people

44
00:01:48,299 --> 00:01:50,220
in this paper we use a functional

45
00:01:50,220 --> 00:01:53,100
bootstrapping as a black box so any of

46
00:01:53,100 --> 00:01:57,180
these methods will work for us

47
00:01:57,180 --> 00:01:59,460
and the main result of this work is that

48
00:01:59,460 --> 00:02:02,220
we added some uh new powerful tools to

49
00:02:02,220 --> 00:02:04,820
the kvg a few

50
00:02:04,820 --> 00:02:07,520
skips and and

51
00:02:07,520 --> 00:02:10,679
the mentors are the following the first

52
00:02:10,679 --> 00:02:13,200
one is large Precision comparisons and

53
00:02:13,200 --> 00:02:15,660
one comparison first because comparisons

54
00:02:15,660 --> 00:02:18,540
are widely used in ml vaccine inference

55
00:02:18,540 --> 00:02:21,239
or DPC training and data science and

56
00:02:21,239 --> 00:02:24,060
comparisons are also considered hard to

57
00:02:24,060 --> 00:02:28,080
be used uh via homophic encryption

58
00:02:28,080 --> 00:02:29,940
as you know the current runtime

59
00:02:29,940 --> 00:02:32,819
exponential with the number of bits and

60
00:02:32,819 --> 00:02:34,739
we want them to make the runtime linear

61
00:02:34,739 --> 00:02:37,280
scaling

62
00:02:37,560 --> 00:02:39,840
and second tool we provide is the logic

63
00:02:39,840 --> 00:02:41,640
Precision arbitrary function evaluation

64
00:02:41,640 --> 00:02:44,040
Now it only supports negative cyclic

65
00:02:44,040 --> 00:02:45,720
function and supports only small

66
00:02:45,720 --> 00:02:48,080
precision

67
00:02:48,120 --> 00:02:50,280
we have implemented our schemes and the

68
00:02:50,280 --> 00:02:52,260
implementations open sourced and open

69
00:02:52,260 --> 00:02:55,940
fhg and passive libraries

70
00:02:56,580 --> 00:02:58,920
let me conclude this abstract talk by

71
00:02:58,920 --> 00:03:01,500
describe our very very high level idea

72
00:03:01,500 --> 00:03:05,160
and is that our first observations that

73
00:03:05,160 --> 00:03:07,560
the comparison is equivalent to assigned

74
00:03:07,560 --> 00:03:09,660
valuation so to compare A and B we just

75
00:03:09,660 --> 00:03:11,879
need to find the sign of a minus B

76
00:03:11,879 --> 00:03:14,040
and the psy evolution is equivalent to

77
00:03:14,040 --> 00:03:16,620
Computing the most significant bits and

78
00:03:16,620 --> 00:03:18,720
the Computing the MSP is the central

79
00:03:18,720 --> 00:03:21,680
part of UTV

80
00:03:22,800 --> 00:03:25,860
to evaluated for large Precision our

81
00:03:25,860 --> 00:03:28,260
method is to remove the large number of

82
00:03:28,260 --> 00:03:30,120
stitches gradually

83
00:03:30,120 --> 00:03:32,760
for example we have this 18 bits we

84
00:03:32,760 --> 00:03:35,220
first removed the last six bits and then

85
00:03:35,220 --> 00:03:38,400
remove the central six bit the metal

86
00:03:38,400 --> 00:03:40,680
sticks bits and then we have only six

87
00:03:40,680 --> 00:03:42,920
bits left we can use a few per shopping

88
00:03:42,920 --> 00:03:47,340
to directly extract the most significant

89
00:03:47,340 --> 00:03:50,340
however uh directly remove these bits by

90
00:03:50,340 --> 00:03:52,500
things like emotional switching is not

91
00:03:52,500 --> 00:03:54,239
acceptable because there are they will

92
00:03:54,239 --> 00:03:56,400
introduce some errors to know what

93
00:03:56,400 --> 00:03:58,379
technique what is exact the technique we

94
00:03:58,379 --> 00:04:00,420
used and introduced in the paper uh

95
00:04:00,420 --> 00:04:02,220
please come to the flue talk it will be

96
00:04:02,220 --> 00:04:05,239
on Tuesday December 6th uh five to

97
00:04:05,239 --> 00:04:09,180
five twenty five and um it will be uh

98
00:04:09,180 --> 00:04:12,060
GMT plus eight uh time zone uh thank you

99
00:04:12,060 --> 00:04:14,659
for listening

