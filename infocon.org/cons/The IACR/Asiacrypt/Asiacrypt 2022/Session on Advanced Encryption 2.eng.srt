1
00:01:54,659 --> 00:01:57,320
foreign

2
00:01:58,380 --> 00:02:00,840
hello

3
00:02:00,840 --> 00:02:04,100
hello perfect

4
00:02:05,399 --> 00:02:07,320
all right everybody uh it's about time

5
00:02:07,320 --> 00:02:09,360
to get started thank you all for coming

6
00:02:09,360 --> 00:02:12,300
this morning uh to the second Advanced

7
00:02:12,300 --> 00:02:13,560
encryption session we have a great

8
00:02:13,560 --> 00:02:15,120
lineup of talks today

9
00:02:15,120 --> 00:02:17,099
uh starting with uh runji who's going to

10
00:02:17,099 --> 00:02:18,840
tell us about Compact and tightly

11
00:02:18,840 --> 00:02:20,340
selective opening Secure Public key

12
00:02:20,340 --> 00:02:22,319
encryption schemes

13
00:02:22,319 --> 00:02:25,020
thank you for your introduction and I'm

14
00:02:25,020 --> 00:02:27,959
ranjitson and I will introduce my work

15
00:02:27,959 --> 00:02:30,300
our new paper Compact and title the

16
00:02:30,300 --> 00:02:32,040
selected opening skill public key in

17
00:02:32,040 --> 00:02:34,440
question schemes and this is join work

18
00:02:34,440 --> 00:02:38,099
with my supervisor joshing Pine so let's

19
00:02:38,099 --> 00:02:39,620
start

20
00:02:39,620 --> 00:02:41,519
and

21
00:02:41,519 --> 00:02:44,280
and okay so in the public key setting

22
00:02:44,280 --> 00:02:46,440
the we have a receiver and the receiver

23
00:02:46,440 --> 00:02:48,900
have a public key and secret key and we

24
00:02:48,900 --> 00:02:51,420
also get a bunch of senders the senders

25
00:02:51,420 --> 00:02:54,120
can increase some messages using some

26
00:02:54,120 --> 00:02:56,519
Randomness and send them cyber text to

27
00:02:56,519 --> 00:02:59,459
the receivers receiver

28
00:02:59,459 --> 00:03:02,340
and now we consider a stronger setting

29
00:03:02,340 --> 00:03:06,120
that the message is some senders message

30
00:03:06,120 --> 00:03:08,400
and Randomness are revealed to some

31
00:03:08,400 --> 00:03:09,720
adversary

32
00:03:09,720 --> 00:03:10,980
and

33
00:03:10,980 --> 00:03:13,140
and we say

34
00:03:13,140 --> 00:03:15,959
we say what ciphertext is open if it's

35
00:03:15,959 --> 00:03:19,319
message and Randomness is I revealed to

36
00:03:19,319 --> 00:03:23,099
the adversary and so because if the if

37
00:03:23,099 --> 00:03:25,680
the Cyber day is open its security is

38
00:03:25,680 --> 00:03:28,440
totally broken because uh this is all

39
00:03:28,440 --> 00:03:29,879
the secret information about the

40
00:03:29,879 --> 00:03:33,840
cybertech so now we asked so some side

41
00:03:33,840 --> 00:03:35,580
open a cipher that is no longer a skill

42
00:03:35,580 --> 00:03:38,280
but how about the unopened cyber text to

43
00:03:38,280 --> 00:03:40,680
the Anova subtest remain secure

44
00:03:40,680 --> 00:03:43,379
and so the sender selected opponent

45
00:03:43,379 --> 00:03:46,140
security comes to the such setting in

46
00:03:46,140 --> 00:03:49,379
the so setting the adversary can get a

47
00:03:49,379 --> 00:03:52,019
bunch of Chinese subjects and it can

48
00:03:52,019 --> 00:03:54,120
also open some of the child inside the

49
00:03:54,120 --> 00:03:54,780
text

50
00:03:54,780 --> 00:03:57,540
and the so security requires that an

51
00:03:57,540 --> 00:03:59,220
open challenge cyber test remains

52
00:03:59,220 --> 00:04:02,220
skilled and the so security is a

53
00:04:02,220 --> 00:04:04,140
practical note it's very practical

54
00:04:04,140 --> 00:04:05,220
because

55
00:04:05,220 --> 00:04:08,580
in the real world setting the sender the

56
00:04:08,580 --> 00:04:10,860
sender's computer may be corrupted by

57
00:04:10,860 --> 00:04:12,900
some hacker and he could get anything

58
00:04:12,900 --> 00:04:15,000
any information about the sender

59
00:04:15,000 --> 00:04:17,699
including messages and the randomness

60
00:04:17,699 --> 00:04:20,279
and also sometimes the sender will use

61
00:04:20,279 --> 00:04:23,280
some insecure Randomness generator and

62
00:04:23,280 --> 00:04:24,840
so the adversary can recover the

63
00:04:24,840 --> 00:04:27,300
renderness

64
00:04:27,300 --> 00:04:29,880
and the selected

65
00:04:29,880 --> 00:04:34,440
SL security has a long study history and

66
00:04:34,440 --> 00:04:36,540
it can be dated back to the

67
00:04:36,540 --> 00:04:37,699
the

68
00:04:37,699 --> 00:04:41,699
paper in 1999 a metric function

69
00:04:41,699 --> 00:04:43,320
and

70
00:04:43,320 --> 00:04:45,900
there's also a lot of works I've been

71
00:04:45,900 --> 00:04:48,900
done in starting the starting in the

72
00:04:48,900 --> 00:04:51,960
right definitions for SEO security and

73
00:04:51,960 --> 00:04:54,060
the relations between the so security

74
00:04:54,060 --> 00:04:56,360
definitions

75
00:04:56,360 --> 00:05:00,560
and there are two flavors of uh so

76
00:05:00,560 --> 00:05:03,780
security notion we just consider the CCA

77
00:05:03,780 --> 00:05:06,060
setting uh the first one is the

78
00:05:06,060 --> 00:05:08,460
indistinguish ability based so security

79
00:05:08,460 --> 00:05:10,080
and the second one is the simulation

80
00:05:10,080 --> 00:05:12,720
based one

81
00:05:12,720 --> 00:05:15,600
it turns out that the Sim so implies a

82
00:05:15,600 --> 00:05:19,020
weak notion of the imdso so here we just

83
00:05:19,020 --> 00:05:22,940
focus on the Sim so security

84
00:05:23,220 --> 00:05:25,560
so let's see how to define the railgun

85
00:05:25,560 --> 00:05:28,199
and the so in the simulation based so

86
00:05:28,199 --> 00:05:30,360
security we need to Define real gun and

87
00:05:30,360 --> 00:05:33,060
ID again in the real game plays with the

88
00:05:33,060 --> 00:05:35,340
adversary and the adversary in the real

89
00:05:35,340 --> 00:05:36,120
game

90
00:05:36,120 --> 00:05:38,460
mode of the river scenario for the

91
00:05:38,460 --> 00:05:41,639
anniversary and the idea again plays

92
00:05:41,639 --> 00:05:44,520
with a simulator s and the S can just

93
00:05:44,520 --> 00:05:46,979
learn trivial information in the ideal

94
00:05:46,979 --> 00:05:48,479
camp

95
00:05:48,479 --> 00:05:50,820
so let's see how to define the real game

96
00:05:50,820 --> 00:05:53,039
in the real game we generate a publicly

97
00:05:53,039 --> 00:05:55,020
and secretly and send the public key to

98
00:05:55,020 --> 00:05:57,360
the adversary and that also anniversary

99
00:05:57,360 --> 00:06:00,419
need to choose some distribution B and

100
00:06:00,419 --> 00:06:02,880
get back to the game of course because

101
00:06:02,880 --> 00:06:04,800
we consider assistance security the

102
00:06:04,800 --> 00:06:07,259
adversary can also cure is the

103
00:06:07,259 --> 00:06:09,419
depression Oracle

104
00:06:09,419 --> 00:06:10,860
and

105
00:06:10,860 --> 00:06:13,199
after receiving the distribution the

106
00:06:13,199 --> 00:06:16,139
game will samples and messages from the

107
00:06:16,139 --> 00:06:18,900
distribution and Randomness from the

108
00:06:18,900 --> 00:06:21,660
from some Randomness space and then they

109
00:06:21,660 --> 00:06:24,000
use these messages and Randomness to

110
00:06:24,000 --> 00:06:27,300
generate uncharged cyber text and then

111
00:06:27,300 --> 00:06:31,020
send back such an instant cyber text to

112
00:06:31,020 --> 00:06:32,880
the adversary a

113
00:06:32,880 --> 00:06:35,460
and after receiving the Chinese cyber

114
00:06:35,460 --> 00:06:38,460
text the adversary can choose some

115
00:06:38,460 --> 00:06:41,580
Cipher choose some Chinese cyber test to

116
00:06:41,580 --> 00:06:44,460
be open normally it just send a index

117
00:06:44,460 --> 00:06:47,160
and then the again need to return the Mi

118
00:06:47,160 --> 00:06:50,280
the messages and the renderness of the

119
00:06:50,280 --> 00:06:52,680
if Chinese cyber text

120
00:06:52,680 --> 00:06:56,039
and again also record what what cybers

121
00:06:56,039 --> 00:06:58,740
have been opened by the adversary using

122
00:06:58,740 --> 00:07:01,020
the least I

123
00:07:01,020 --> 00:07:02,940
and finally the adversary need to

124
00:07:02,940 --> 00:07:06,180
produce some output of the A and the

125
00:07:06,180 --> 00:07:08,759
real gain will record the distribution

126
00:07:08,759 --> 00:07:11,460
output by a and then sample the message

127
00:07:11,460 --> 00:07:15,180
from the distribution and the open index

128
00:07:15,180 --> 00:07:18,479
output by adversary and the final output

129
00:07:18,479 --> 00:07:19,740
of adversary

130
00:07:19,740 --> 00:07:22,080
and they just output all of this same

131
00:07:22,080 --> 00:07:25,139
thing as the when the games and when the

132
00:07:25,139 --> 00:07:28,080
scan uh end

133
00:07:28,080 --> 00:07:31,139
so to Define to define the idea again we

134
00:07:31,139 --> 00:07:33,180
just delete all the non-trivial

135
00:07:33,180 --> 00:07:35,460
information in the ideal game we do not

136
00:07:35,460 --> 00:07:36,720
have public key we do not have

137
00:07:36,720 --> 00:07:38,400
challenges cyber text we do not have

138
00:07:38,400 --> 00:07:40,020
equation Oracle

139
00:07:40,020 --> 00:07:44,160
and so so in the ideal case the

140
00:07:44,160 --> 00:07:46,319
simulator and the simulator still needs

141
00:07:46,319 --> 00:07:48,840
to Output some distribution and

142
00:07:48,840 --> 00:07:51,060
everything is similar to the real game

143
00:07:51,060 --> 00:07:52,319
except that we delete all the

144
00:07:52,319 --> 00:07:53,940
non-trivial information

145
00:07:53,940 --> 00:07:56,360
and note that the idea again need to

146
00:07:56,360 --> 00:07:59,160
return the length of the message to the

147
00:07:59,160 --> 00:08:00,960
simulator because the length of the

148
00:08:00,960 --> 00:08:03,479
message is is almost the minimal

149
00:08:03,479 --> 00:08:07,199
information the cyber test can review

150
00:08:07,199 --> 00:08:10,440
and so

151
00:08:10,440 --> 00:08:12,960
so the proof of skin is Slim socs secure

152
00:08:12,960 --> 00:08:16,500
we just show that for any adversary uh

153
00:08:16,500 --> 00:08:18,539
attacking this skin that exists a

154
00:08:18,539 --> 00:08:21,780
simulator as both activity such that

155
00:08:21,780 --> 00:08:23,940
um the district the output distribution

156
00:08:23,940 --> 00:08:26,639
produced by these two games are

157
00:08:26,639 --> 00:08:28,860
indistinguishment computationally

158
00:08:28,860 --> 00:08:30,780
indistinguishable

159
00:08:30,780 --> 00:08:32,880
and namely the

160
00:08:32,880 --> 00:08:35,458
it just just enamel it it just proved

161
00:08:35,458 --> 00:08:37,740
that there is this a simulator as that

162
00:08:37,740 --> 00:08:39,958
it can simulate the behavior of the

163
00:08:39,958 --> 00:08:41,458
adversary

164
00:08:41,458 --> 00:08:43,200
for example they choose the same message

165
00:08:43,200 --> 00:08:45,600
distribution or sending cyber text and

166
00:08:45,600 --> 00:08:48,660
the produce send output

167
00:08:48,660 --> 00:08:51,120
and it turns out that the Sim SOC

168
00:08:51,120 --> 00:08:53,940
security is a strictly strong stronger

169
00:08:53,940 --> 00:08:56,459
than some stronger than the normal uh

170
00:08:56,459 --> 00:08:59,880
normal security like the indcca

171
00:08:59,880 --> 00:09:01,980
and it's a non-tribute to achieve Sim

172
00:09:01,980 --> 00:09:05,700
Society security because uh to normally

173
00:09:05,700 --> 00:09:07,620
we if we want to prove the security we

174
00:09:07,620 --> 00:09:09,480
need to invest some problem instance

175
00:09:09,480 --> 00:09:12,120
into the Cyber test but if you input if

176
00:09:12,120 --> 00:09:13,680
you embed some

177
00:09:13,680 --> 00:09:16,200
instant to the Cyber test then we can

178
00:09:16,200 --> 00:09:17,880
then decide that is not under our

179
00:09:17,880 --> 00:09:19,500
control so we cannot return the

180
00:09:19,500 --> 00:09:20,519
randomness

181
00:09:20,519 --> 00:09:22,680
for example one may wonder if we can use

182
00:09:22,680 --> 00:09:24,959
the hybrid argument plus the inbcc

183
00:09:24,959 --> 00:09:28,080
scheme to achieve since OCC security and

184
00:09:28,080 --> 00:09:30,300
such such method does not work because

185
00:09:30,300 --> 00:09:32,640
in the hybrid argument we want to we

186
00:09:32,640 --> 00:09:34,860
want to switch all the chart inside to

187
00:09:34,860 --> 00:09:38,160
render switch them one by one but if we

188
00:09:38,160 --> 00:09:40,140
switch the cyber attacks to be to random

189
00:09:40,140 --> 00:09:43,500
then we cannot open C1 the random cyber

190
00:09:43,500 --> 00:09:45,300
test because it's not it's not under our

191
00:09:45,300 --> 00:09:48,660
not under the reductions control

192
00:09:48,660 --> 00:09:51,720
so one may also wonder if you can use

193
00:09:51,720 --> 00:09:53,940
some use a guest technique to deal with

194
00:09:53,940 --> 00:09:55,800
such a problem guest technique means

195
00:09:55,800 --> 00:09:57,839
that we just guess which Chinese cyber

196
00:09:57,839 --> 00:09:59,519
tests will not open by the anniversary

197
00:09:59,519 --> 00:10:02,760
and this technique will make make work

198
00:10:02,760 --> 00:10:06,120
in some cases but we because it gets

199
00:10:06,120 --> 00:10:07,740
Rich cyber tests will be will not be

200
00:10:07,740 --> 00:10:09,899
open by the anniversary and it could it

201
00:10:09,899 --> 00:10:11,100
may get strong

202
00:10:11,100 --> 00:10:12,839
and then there is a failing probability

203
00:10:12,839 --> 00:10:15,660
and then so it leads to some non-type

204
00:10:15,660 --> 00:10:16,680
reduction

205
00:10:16,680 --> 00:10:18,480
so here I would like to introduce

206
00:10:18,480 --> 00:10:20,880
something about the tightness so

207
00:10:20,880 --> 00:10:23,399
normally to prove the security to prove

208
00:10:23,399 --> 00:10:25,620
security we need to construct establish

209
00:10:25,620 --> 00:10:28,440
some relations like if we can if there

210
00:10:28,440 --> 00:10:30,360
is an adversary to break the skin then

211
00:10:30,360 --> 00:10:32,220
we then we can also have another

212
00:10:32,220 --> 00:10:34,620
adversary to break the some underlying

213
00:10:34,620 --> 00:10:35,339
problem

214
00:10:35,339 --> 00:10:38,060
so here in the equation the Epsilon a

215
00:10:38,060 --> 00:10:41,279
capture the schedule the security of the

216
00:10:41,279 --> 00:10:43,740
skin and the epsonp capture the hardness

217
00:10:43,740 --> 00:10:46,800
of the the heart problem

218
00:10:46,800 --> 00:10:49,140
and we also have a sometimes we will

219
00:10:49,140 --> 00:10:51,480
have some Vector L and L we call this L

220
00:10:51,480 --> 00:10:54,300
as a security loss and we save the

221
00:10:54,300 --> 00:10:56,940
security reduction has is tied if the L

222
00:10:56,940 --> 00:10:58,800
is some constant

223
00:10:58,800 --> 00:11:01,680
and if it does then we also if we say

224
00:11:01,680 --> 00:11:03,300
the reduction is not time if the L is

225
00:11:03,300 --> 00:11:06,779
depends on some other resource of the

226
00:11:06,779 --> 00:11:08,640
adversary like the number of Chinese

227
00:11:08,640 --> 00:11:11,399
cyber attacks or number of power queries

228
00:11:11,399 --> 00:11:13,440
from the adversary

229
00:11:13,440 --> 00:11:16,500
so why we care about tightness because

230
00:11:16,500 --> 00:11:18,540
sometimes we if we want to choose the

231
00:11:18,540 --> 00:11:20,640
pro about secure parameter we need to

232
00:11:20,640 --> 00:11:22,980
choose the appropriate security

233
00:11:22,980 --> 00:11:25,260
parameters such that the Epsilon p is

234
00:11:25,260 --> 00:11:27,779
very small so that the S1 a is also

235
00:11:27,779 --> 00:11:30,720
small but if the L is very large then we

236
00:11:30,720 --> 00:11:32,160
need to choose the largest security

237
00:11:32,160 --> 00:11:34,380
parameter to make the Epsilon piece more

238
00:11:34,380 --> 00:11:37,620
small enough and larger larger sacral

239
00:11:37,620 --> 00:11:39,720
parameter will lead to some higher

240
00:11:39,720 --> 00:11:42,779
commutation overhead or the

241
00:11:42,779 --> 00:11:45,540
communication overhead

242
00:11:45,540 --> 00:11:49,380
and so can we have seen socs again with

243
00:11:49,380 --> 00:11:54,000
high security and answers yes

244
00:11:54,000 --> 00:11:56,640
but it's not very satisfactory and there

245
00:11:56,640 --> 00:11:59,459
are some good based so Pickers with Thai

246
00:11:59,459 --> 00:12:02,040
security but these games they are all

247
00:12:02,040 --> 00:12:04,019
either have a long side effects or the

248
00:12:04,019 --> 00:12:06,120
long public key long public key means

249
00:12:06,120 --> 00:12:07,800
that the number of

250
00:12:07,800 --> 00:12:10,079
because we here we just care about the

251
00:12:10,079 --> 00:12:12,720
group based scheme the loan public key

252
00:12:12,720 --> 00:12:14,640
means that the number of group elements

253
00:12:14,640 --> 00:12:17,820
in the public key is is not constant it

254
00:12:17,820 --> 00:12:20,279
depends on like depends on the lens of

255
00:12:20,279 --> 00:12:21,660
message

256
00:12:21,660 --> 00:12:25,560
and the drawback of the not sorry the

257
00:12:25,560 --> 00:12:27,200
job of the non-compass security

258
00:12:27,200 --> 00:12:30,180
non-compact scheme is that we will have

259
00:12:30,180 --> 00:12:33,600
the high communication overhead

260
00:12:33,600 --> 00:12:36,480
so in our work we want to solve this

261
00:12:36,480 --> 00:12:39,120
problem can we have a SIM SOC schemes

262
00:12:39,120 --> 00:12:41,519
achieves high security compact publicly

263
00:12:41,519 --> 00:12:43,500
and the compact cyber text at the same

264
00:12:43,500 --> 00:12:44,579
time

265
00:12:44,579 --> 00:12:47,100
and we also we observe that this

266
00:12:47,100 --> 00:12:49,440
question is very hard in a standard

267
00:12:49,440 --> 00:12:51,300
model because if we want to achieve

268
00:12:51,300 --> 00:12:54,000
tight security we need to push the

269
00:12:54,000 --> 00:12:56,639
non-tightness to the size of the public

270
00:12:56,639 --> 00:12:59,040
key or the size of the Cyber attack and

271
00:12:59,040 --> 00:13:00,720
that's why the construction in the

272
00:13:00,720 --> 00:13:03,000
standard model are not compact

273
00:13:03,000 --> 00:13:05,940
so and we also observe that such skin No

274
00:13:05,940 --> 00:13:08,220
Such Thing exists in the render Oracle

275
00:13:08,220 --> 00:13:10,980
model so now we try to now we want to

276
00:13:10,980 --> 00:13:13,260
relax the requirements can we have such

277
00:13:13,260 --> 00:13:15,480
skin in the Renault Oracle model

278
00:13:15,480 --> 00:13:19,740
and this word gives a positive answer in

279
00:13:19,740 --> 00:13:21,660
our paper we propose three direct

280
00:13:21,660 --> 00:13:24,540
constructions and a general construction

281
00:13:24,540 --> 00:13:27,180
the direct constructions are based on

282
00:13:27,180 --> 00:13:31,079
some BH BH different assumptions

283
00:13:31,079 --> 00:13:33,360
and the generic construction is based on

284
00:13:33,360 --> 00:13:34,680
the future psychic or Commodore

285
00:13:34,680 --> 00:13:36,839
transformation and we just require the

286
00:13:36,839 --> 00:13:40,519
underlying pke to be lost in question

287
00:13:40,519 --> 00:13:43,320
and in this talk I just briefly

288
00:13:43,320 --> 00:13:45,899
introduced the key idea of our first

289
00:13:45,899 --> 00:13:47,940
direct Construction

290
00:13:47,940 --> 00:13:50,820
so let's start by considering the dhis

291
00:13:50,820 --> 00:13:54,660
skin in hjks 15. so the public key is g

292
00:13:54,660 --> 00:13:57,899
to the X and secretary is a small X

293
00:13:57,899 --> 00:14:00,839
and to increase the plan text and we

294
00:14:00,839 --> 00:14:03,300
just samples and Randomness so exponent

295
00:14:03,300 --> 00:14:05,100
R and compute the group element Big R

296
00:14:05,100 --> 00:14:06,839
and compute the share different element

297
00:14:06,839 --> 00:14:10,560
value Z and use D to derive some derived

298
00:14:10,560 --> 00:14:11,700
two keys

299
00:14:11,700 --> 00:14:14,519
and use or we use the first key to to

300
00:14:14,519 --> 00:14:16,680
encryption and use the second key to do

301
00:14:16,680 --> 00:14:18,839
the message code and then the message

302
00:14:18,839 --> 00:14:21,000
authentication code

303
00:14:21,000 --> 00:14:23,820
so in the BH is scheme the Cyber test

304
00:14:23,820 --> 00:14:26,459
has this form and the renderness is just

305
00:14:26,459 --> 00:14:29,399
the exponent small r

306
00:14:29,399 --> 00:14:32,279
so how they prove the Sim app store

307
00:14:32,279 --> 00:14:36,079
security of this game they just use the

308
00:14:36,079 --> 00:14:37,980
multi-charged strong development

309
00:14:37,980 --> 00:14:39,139
assumption

310
00:14:39,139 --> 00:14:42,240
and they because in Sims OCC security

311
00:14:42,240 --> 00:14:46,079
they are uncharged cyber attacks so they

312
00:14:46,079 --> 00:14:49,380
just directly impact the problem instant

313
00:14:49,380 --> 00:14:51,660
into the current cycle text

314
00:14:51,660 --> 00:14:54,600
but as I said if they just invite the

315
00:14:54,600 --> 00:14:56,579
challenge I challenge the problem it

316
00:14:56,579 --> 00:14:58,800
just embedded proper instance into the

317
00:14:58,800 --> 00:15:01,199
Chinese cyber test then it cannot open

318
00:15:01,199 --> 00:15:05,160
because the small RI is the small I are

319
00:15:05,160 --> 00:15:06,480
unknown

320
00:15:06,480 --> 00:15:08,339
so this is why the reduction is Norm

321
00:15:08,339 --> 00:15:10,019
tight because that you they need to use

322
00:15:10,019 --> 00:15:13,519
the gas technique to

323
00:15:14,540 --> 00:15:17,100
just guess which cyber test will not be

324
00:15:17,100 --> 00:15:19,079
open so they have the security laws

325
00:15:19,079 --> 00:15:20,040
speak over

326
00:15:20,040 --> 00:15:21,959
and here the out does not help for

327
00:15:21,959 --> 00:15:23,760
tightness

328
00:15:23,760 --> 00:15:25,320
and

329
00:15:25,320 --> 00:15:27,899
so how we solve this problem

330
00:15:27,899 --> 00:15:31,260
so our approach is to use the what we

331
00:15:31,260 --> 00:15:33,300
call do an immune technique

332
00:15:33,300 --> 00:15:36,480
and here the dhis has the Cyber test as

333
00:15:36,480 --> 00:15:37,980
this form

334
00:15:37,980 --> 00:15:41,040
and we just slightly modify the

335
00:15:41,040 --> 00:15:43,320
simultaneous the form of cyber text now

336
00:15:43,320 --> 00:15:45,899
in our skin the Cyber test we have two

337
00:15:45,899 --> 00:15:48,180
group elements and of course we have two

338
00:15:48,180 --> 00:15:50,579
we have two exponents

339
00:15:50,579 --> 00:15:53,479
so

340
00:15:54,360 --> 00:15:58,260
so now the and in our skin the key the

341
00:15:58,260 --> 00:16:01,260
two keys are derived from one of the cbh

342
00:16:01,260 --> 00:16:02,699
values

343
00:16:02,699 --> 00:16:06,420
so the key is computed by the HB and r0

344
00:16:06,420 --> 00:16:09,779
R1 and PK and the CDH value of PK and

345
00:16:09,779 --> 00:16:11,940
the BRB

346
00:16:11,940 --> 00:16:15,420
here the B is a random bit

347
00:16:15,420 --> 00:16:16,920
so

348
00:16:16,920 --> 00:16:19,860
but uh if we but this is not enough

349
00:16:19,860 --> 00:16:20,940
because

350
00:16:20,940 --> 00:16:23,220
even if you modify the cyphatus to have

351
00:16:23,220 --> 00:16:25,139
this strong with still wrong we will

352
00:16:25,139 --> 00:16:27,360
still run into a similar problem with

353
00:16:27,360 --> 00:16:29,279
the dhis skin

354
00:16:29,279 --> 00:16:31,740
so here we need to Fork at the D Lock we

355
00:16:31,740 --> 00:16:33,240
forget the Delux

356
00:16:33,240 --> 00:16:36,300
because of forget d log means that if we

357
00:16:36,300 --> 00:16:38,880
can simulate the reduction without in

358
00:16:38,880 --> 00:16:41,699
the t-lock then we can do reduction

359
00:16:41,699 --> 00:16:43,380
because in reduction we will not have

360
00:16:43,380 --> 00:16:44,459
the D log

361
00:16:44,459 --> 00:16:47,420
so here we just use the

362
00:16:47,420 --> 00:16:51,120
oblivious randomness oblivious Runners

363
00:16:51,120 --> 00:16:54,060
namely uh for example if you want to if

364
00:16:54,060 --> 00:16:56,639
you want to sample the random group

365
00:16:56,639 --> 00:16:59,040
element we can just compute the exponent

366
00:16:59,040 --> 00:17:00,959
and then compute the generator to the

367
00:17:00,959 --> 00:17:02,040
exponent

368
00:17:02,040 --> 00:17:04,740
but if the group is sample it's

369
00:17:04,740 --> 00:17:06,780
efficiently sample then we can just

370
00:17:06,780 --> 00:17:09,480
sample the group element from this group

371
00:17:09,480 --> 00:17:11,339
so this is what we call oblivious

372
00:17:11,339 --> 00:17:13,859
Runners and these two method is uh is

373
00:17:13,859 --> 00:17:15,900
indistinguishable

374
00:17:15,900 --> 00:17:19,020
so the randomness now that Randomness in

375
00:17:19,020 --> 00:17:21,119
our Cipher test has this from a random

376
00:17:21,119 --> 00:17:25,140
bit B and the exponent RB small RB and

377
00:17:25,140 --> 00:17:28,199
the good element they are one minus B

378
00:17:28,199 --> 00:17:31,200
and why the advantage of using oblivious

379
00:17:31,200 --> 00:17:35,240
Runners Randomness is that we can use

380
00:17:38,240 --> 00:17:41,039
so let's see how it works

381
00:17:41,039 --> 00:17:43,980
and for example if other if you do not

382
00:17:43,980 --> 00:17:46,740
know the D log of the big r0 we just

383
00:17:46,740 --> 00:17:51,120
return the one small r y and big r0 it

384
00:17:51,120 --> 00:17:53,100
means that if you do not know the

385
00:17:53,100 --> 00:17:55,919
exponent of the RB the prb we just

386
00:17:55,919 --> 00:17:58,740
return we just viewed it as oblivious

387
00:17:58,740 --> 00:18:02,000
Randomness and return it

388
00:18:02,280 --> 00:18:07,200
so to prove our so the proof of our skin

389
00:18:07,200 --> 00:18:09,840
works as follow we just use we also use

390
00:18:09,840 --> 00:18:11,880
the multi-charge the strong Department

391
00:18:11,880 --> 00:18:13,919
assumption and we impact the challenge

392
00:18:13,919 --> 00:18:16,679
into r0 or R1

393
00:18:16,679 --> 00:18:20,760
and now we can open any Chinese cyber

394
00:18:20,760 --> 00:18:23,940
text for example you just returned the E

395
00:18:23,940 --> 00:18:27,059
Prime and small r b Prime and pr1 minus

396
00:18:27,059 --> 00:18:30,000
B Prime if the small one minus P sorry

397
00:18:30,000 --> 00:18:35,780
yes if the small R1 minus B price um no

398
00:18:35,880 --> 00:18:38,160
and of course uh we our reduction

399
00:18:38,160 --> 00:18:39,960
involves some

400
00:18:39,960 --> 00:18:43,260
reprogram the Rory program because we

401
00:18:43,260 --> 00:18:44,880
need to we need to make sure that the

402
00:18:44,880 --> 00:18:47,400
returning Randomness is consistent with

403
00:18:47,400 --> 00:18:49,020
the ciphertext

404
00:18:49,020 --> 00:18:52,260
so our skills based on dhis and I use

405
00:18:52,260 --> 00:18:54,120
them to use the Dual immune technique

406
00:18:54,120 --> 00:18:56,400
and use also use the oblivious Runners

407
00:18:56,400 --> 00:18:58,679
to forget the p-lock so now they can

408
00:18:58,679 --> 00:19:01,140
open any Chinese server text and it did

409
00:19:01,140 --> 00:19:03,240
not need to guess and so it can have a

410
00:19:03,240 --> 00:19:05,220
tire reduction

411
00:19:05,220 --> 00:19:07,980
and here's a comparison with some group

412
00:19:07,980 --> 00:19:11,760
by socs apke and our schemes will have

413
00:19:11,760 --> 00:19:13,559
achieved the tight security compact

414
00:19:13,559 --> 00:19:15,480
cyber test and compatibility in the

415
00:19:15,480 --> 00:19:18,059
render Oracle model at the same time

416
00:19:18,059 --> 00:19:20,220
so finally let's get back to the problem

417
00:19:20,220 --> 00:19:23,520
so now we give a positive answer of this

418
00:19:23,520 --> 00:19:26,400
problem in the render Oracle model but

419
00:19:26,400 --> 00:19:28,980
both empowerment still remain because in

420
00:19:28,980 --> 00:19:31,679
we still do not have the such skin in a

421
00:19:31,679 --> 00:19:33,480
standard model and we hope that our work

422
00:19:33,480 --> 00:19:34,380
can

423
00:19:34,380 --> 00:19:37,860
helpful to the future study of this

424
00:19:37,860 --> 00:19:39,179
problem

425
00:19:39,179 --> 00:19:42,080
thank you very much

426
00:19:46,200 --> 00:19:48,299
thanks a lot ranji are there any

427
00:19:48,299 --> 00:19:51,500
questions for our speaker

428
00:19:53,940 --> 00:19:55,679
all right well if there are no questions

429
00:19:55,679 --> 00:19:58,380
then I'll ask a quick question do you

430
00:19:58,380 --> 00:19:59,760
think we could get a similarly tight

431
00:19:59,760 --> 00:20:01,380
construction from lattice assumptions

432
00:20:01,380 --> 00:20:04,740
yeah I think so in fact we have some

433
00:20:04,740 --> 00:20:06,960
progress in moving our technique to the

434
00:20:06,960 --> 00:20:09,360
latest Space games but it's still render

435
00:20:09,360 --> 00:20:11,700
Oracle mode yeah

436
00:20:11,700 --> 00:20:15,840
awesome well thanks a lot uh any

437
00:20:15,840 --> 00:20:19,100
last chance at questions

438
00:20:21,000 --> 00:20:22,860
okay well let's thank the speaker again

439
00:20:22,860 --> 00:20:25,100
please

440
00:21:05,760 --> 00:21:07,940
thank you

441
00:21:23,100 --> 00:21:25,559
can you see my screen

442
00:21:25,559 --> 00:21:28,679
yep I think you're good uh are you all

443
00:21:28,679 --> 00:21:30,720
set and ready to go

444
00:21:30,720 --> 00:21:33,740
oh okay

445
00:21:35,220 --> 00:21:38,820
awesome uh well our next talk

446
00:21:38,820 --> 00:21:41,400
uh is identity based matchmaking

447
00:21:41,400 --> 00:21:44,100
encryption from standard assumptions uh

448
00:21:44,100 --> 00:21:46,559
and Yuli will be giving the talk uh

449
00:21:46,559 --> 00:21:49,158
please go ahead

450
00:21:50,400 --> 00:21:53,640
okay thanks for the introduction

451
00:21:53,640 --> 00:21:57,059
hello everyone my name is Julie and in

452
00:21:57,059 --> 00:21:59,520
this talk I will show you our work on

453
00:21:59,520 --> 00:22:01,860
building identity based matchmaking

454
00:22:01,860 --> 00:22:04,740
encryption scheme under the standard

455
00:22:04,740 --> 00:22:07,260
assumptions in the standard model this

456
00:22:07,260 --> 00:22:10,980
is a joint work with ghn minwon and

457
00:22:10,980 --> 00:22:13,580
Jiang Wong

458
00:22:13,919 --> 00:22:16,320
let's start with the introduction of

459
00:22:16,320 --> 00:22:18,840
identity based matchmaking encryption

460
00:22:18,840 --> 00:22:23,280
short for an IBM mean it was proposed by

461
00:22:23,280 --> 00:22:28,260
a Chinese set or in crypto 2019.

462
00:22:28,440 --> 00:22:31,980
here are an authority a sender and a

463
00:22:31,980 --> 00:22:32,880
receiver

464
00:22:32,880 --> 00:22:35,820
The Authority First initializes the

465
00:22:35,820 --> 00:22:39,000
system and produces the most popular key

466
00:22:39,000 --> 00:22:42,659
mtk and the master security msk

467
00:22:42,659 --> 00:22:46,740
it uses the msk to generate generate the

468
00:22:46,740 --> 00:22:49,980
senders and receivers secret keys with

469
00:22:49,980 --> 00:22:51,780
their attributes or identities

470
00:22:51,780 --> 00:22:53,520
respectively

471
00:22:53,520 --> 00:22:56,940
then the center will specify an identity

472
00:22:56,940 --> 00:23:00,120
of the receiver on the Fly and equip the

473
00:23:00,120 --> 00:23:02,760
message with his own secret key and the

474
00:23:02,760 --> 00:23:05,100
receiver's identity

475
00:23:05,100 --> 00:23:07,919
after receiving the ciphertext the

476
00:23:07,919 --> 00:23:10,980
receiver will also specify an identity

477
00:23:10,980 --> 00:23:14,159
of the sender he wants to receive from

478
00:23:14,159 --> 00:23:17,400
decryption algorithm will test if the

479
00:23:17,400 --> 00:23:20,880
four identity is satisfied each other

480
00:23:20,880 --> 00:23:23,700
if yes the receiver will get the correct

481
00:23:23,700 --> 00:23:26,940
message this is the identity based

482
00:23:26,940 --> 00:23:29,520
matchmaking encryption where both the

483
00:23:29,520 --> 00:23:31,740
center and receiver with their own

484
00:23:31,740 --> 00:23:34,799
attributes can specify fine Grant access

485
00:23:34,799 --> 00:23:38,820
policies the other party must satisfy in

486
00:23:38,820 --> 00:23:42,740
order for the message to be reviewed

487
00:23:43,440 --> 00:23:46,559
formally speaking the identity based

488
00:23:46,559 --> 00:23:49,500
matchmaking encryption consists of five

489
00:23:49,500 --> 00:23:52,919
algorithms the setup algorithm generates

490
00:23:52,919 --> 00:23:54,900
the most popular key and the master

491
00:23:54,900 --> 00:23:56,700
secret key

492
00:23:56,700 --> 00:23:59,100
escaping algorithm generates the

493
00:23:59,100 --> 00:24:02,039
encryption key EK Sigma for the sender

494
00:24:02,039 --> 00:24:04,440
with its identity Sigma

495
00:24:04,440 --> 00:24:06,000
and

496
00:24:06,000 --> 00:24:09,360
arcade archanging algorithm generates

497
00:24:09,360 --> 00:24:12,179
the decryption key EK Row for the

498
00:24:12,179 --> 00:24:14,880
receiver which gives identity row

499
00:24:14,880 --> 00:24:17,940
decryption key EK Sigma are receiver's

500
00:24:17,940 --> 00:24:21,059
identity RCV and a message M will be

501
00:24:21,059 --> 00:24:23,580
used in the equipped algorithm and

502
00:24:23,580 --> 00:24:25,919
output the cipher text

503
00:24:25,919 --> 00:24:28,980
decryption key detail and the sender's

504
00:24:28,980 --> 00:24:32,100
identity snd which gives cybercax the

505
00:24:32,100 --> 00:24:35,280
city are used in decryption algorithm to

506
00:24:35,280 --> 00:24:38,780
get the message or not

507
00:24:39,000 --> 00:24:43,340
then we reveal the related work of ibme

508
00:24:43,340 --> 00:24:46,740
the two typical concerns on the security

509
00:24:46,740 --> 00:24:49,919
of matchmaking encryption are the

510
00:24:49,919 --> 00:24:51,900
security model and the underlying

511
00:24:51,900 --> 00:24:54,780
assumption for the security model there

512
00:24:54,780 --> 00:24:57,299
are two important models random Oracle

513
00:24:57,299 --> 00:25:00,419
model and standard model

514
00:25:00,419 --> 00:25:03,480
the two kinds of assumptions that in use

515
00:25:03,480 --> 00:25:07,559
are Dynamic and static assumption

516
00:25:07,559 --> 00:25:10,140
generally speaking the static assumption

517
00:25:10,140 --> 00:25:13,020
is weaker and less complex than the Q

518
00:25:13,020 --> 00:25:16,020
type assumption we pursue schemes under

519
00:25:16,020 --> 00:25:19,080
static assumptions and only for security

520
00:25:19,080 --> 00:25:22,080
if would it would be better to have a

521
00:25:22,080 --> 00:25:25,740
scheme group or in the standard model

522
00:25:25,740 --> 00:25:27,559
the concept of

523
00:25:27,559 --> 00:25:31,320
ibmu was proposed by Attorneys at all in

524
00:25:31,320 --> 00:25:34,200
2019 and they give the first work under

525
00:25:34,200 --> 00:25:38,779
pth assumption but in the random world

526
00:25:40,340 --> 00:25:43,140
proposed the first Construction in the

527
00:25:43,140 --> 00:25:45,659
plan model but under q-type assumption

528
00:25:45,659 --> 00:25:47,700
in 2021

529
00:25:47,700 --> 00:25:50,520
so it should Remains the problem can we

530
00:25:50,520 --> 00:25:53,220
build an IBM system under the standard

531
00:25:53,220 --> 00:25:55,679
assumptions in the standard model

532
00:25:55,679 --> 00:25:58,740
in this work we solve it and give the

533
00:25:58,740 --> 00:26:01,200
first construction under the sxph

534
00:26:01,200 --> 00:26:03,779
assumption in the standard model we

535
00:26:03,779 --> 00:26:06,600
propose a new technique for Designing

536
00:26:06,600 --> 00:26:09,659
ipme scheme our construction is the

537
00:26:09,659 --> 00:26:12,000
director and does not rely on other

538
00:26:12,000 --> 00:26:15,140
crypto tools

539
00:26:15,539 --> 00:26:18,299
we start our idea with the security

540
00:26:18,299 --> 00:26:22,380
definition of ibme it is combined with

541
00:26:22,380 --> 00:26:24,779
the privacy and authenticity

542
00:26:24,779 --> 00:26:27,539
we will discuss these two definitions

543
00:26:27,539 --> 00:26:30,140
separately

544
00:26:30,659 --> 00:26:34,080
for those who are very familiar with the

545
00:26:34,080 --> 00:26:37,260
anonymous identity based decryption if

546
00:26:37,260 --> 00:26:40,260
there is no Escape in the game based

547
00:26:40,260 --> 00:26:42,840
definition of probability

548
00:26:42,840 --> 00:26:46,140
this property is almost the same as that

549
00:26:46,140 --> 00:26:50,159
of anonymity aib

550
00:26:50,159 --> 00:26:53,400
there are too many differences between

551
00:26:53,400 --> 00:26:56,460
them first the adversary output two

552
00:26:56,460 --> 00:27:00,120
troubles in ibme while two identities in

553
00:27:00,120 --> 00:27:02,700
IBA during the child interface

554
00:27:02,700 --> 00:27:06,020
we can view this as two sets of

555
00:27:06,020 --> 00:27:08,820
identities are changed

556
00:27:08,820 --> 00:27:12,000
during the challenge interface then this

557
00:27:12,000 --> 00:27:16,440
has a little or has no effect

558
00:27:16,440 --> 00:27:20,039
second there is an additional stage in

559
00:27:20,039 --> 00:27:23,340
ibme but not in IB

560
00:27:23,340 --> 00:27:27,419
since it is uh run by the ipme system

561
00:27:27,419 --> 00:27:30,539
and Returns the results back to the

562
00:27:30,539 --> 00:27:35,120
adversary it also has almost no effect

563
00:27:36,059 --> 00:27:39,720
as for authenticity we think of it as

564
00:27:39,720 --> 00:27:43,620
similar to unfortability in signatures

565
00:27:43,620 --> 00:27:46,679
for those who are very familiar with the

566
00:27:46,679 --> 00:27:49,919
public signatures there are also many

567
00:27:49,919 --> 00:27:52,080
similarities between those two

568
00:27:52,080 --> 00:27:54,678
definitions

569
00:27:54,720 --> 00:27:57,900
we have the same setup phase and the

570
00:27:57,900 --> 00:27:59,820
same challenge troubles

571
00:27:59,820 --> 00:28:03,240
we don't give M and the city concrete

572
00:28:03,240 --> 00:28:05,580
meanings just consider it has two

573
00:28:05,580 --> 00:28:07,380
strings so the challenge trouble

574
00:28:07,380 --> 00:28:10,200
consists of the same kinds of identities

575
00:28:10,200 --> 00:28:12,240
and streams

576
00:28:12,240 --> 00:28:14,580
and they all have the same verification

577
00:28:14,580 --> 00:28:17,059
phase

578
00:28:18,960 --> 00:28:22,620
so we know that Anonymous IV and

579
00:28:22,620 --> 00:28:25,980
signature can be used to build IBM's

580
00:28:25,980 --> 00:28:30,059
team and we have known that an IB scheme

581
00:28:30,059 --> 00:28:32,700
can be immediately can be converted into

582
00:28:32,700 --> 00:28:36,059
a public signature scheme with these two

583
00:28:36,059 --> 00:28:39,179
strong connections we can use a q level

584
00:28:39,179 --> 00:28:42,059
IBU with unlimited to form our

585
00:28:42,059 --> 00:28:44,340
Construction

586
00:28:44,340 --> 00:28:48,659
we present a variant of Q level ibe to

587
00:28:48,659 --> 00:28:52,380
satisfy the same functionality of ivme

588
00:28:52,380 --> 00:28:55,440
the algorithm packaging and equipped

589
00:28:55,440 --> 00:28:59,279
Associated by identities draw and RCV

590
00:28:59,279 --> 00:29:01,980
are the first level while the second

591
00:29:01,980 --> 00:29:04,440
level consists of the algorithm as

592
00:29:04,440 --> 00:29:07,200
teaching and decrypt Associated by

593
00:29:07,200 --> 00:29:11,659
identities Sigma and snd

594
00:29:12,600 --> 00:29:16,559
these two level aib corresponds to the

595
00:29:16,559 --> 00:29:19,500
two security requirements of IBM

596
00:29:19,500 --> 00:29:22,559
respectively for obviously property of

597
00:29:22,559 --> 00:29:25,980
ibme relies on the anonymity of these

598
00:29:25,980 --> 00:29:28,980
two level ibe via the authenticity is

599
00:29:28,980 --> 00:29:31,380
corresponding to the unfortability in

600
00:29:31,380 --> 00:29:33,980
the second level

601
00:29:34,559 --> 00:29:36,480
when building these two level

602
00:29:36,480 --> 00:29:39,960
construction we choose change the aib as

603
00:29:39,960 --> 00:29:42,659
our foundation

604
00:29:42,659 --> 00:29:45,679
this specific construction relies on

605
00:29:45,679 --> 00:29:49,500
automotive and taximasu in Virtual

606
00:29:49,500 --> 00:29:53,520
spaces and both security reductions rely

607
00:29:53,520 --> 00:29:57,440
on Waters to system encryption

608
00:29:59,039 --> 00:30:01,440
we need to make some modification

609
00:30:01,440 --> 00:30:04,500
modifications to change IP and signature

610
00:30:04,500 --> 00:30:08,039
scheme first and we will know mpk and

611
00:30:08,039 --> 00:30:11,159
msk afterwards

612
00:30:11,159 --> 00:30:15,000
first we cannot use the same parameters

613
00:30:15,000 --> 00:30:18,720
in IBN signatures so we need to replace

614
00:30:18,720 --> 00:30:20,760
the alpha with

615
00:30:20,760 --> 00:30:23,840
ETA and replace

616
00:30:28,860 --> 00:30:32,039
at the same time instead of signing

617
00:30:32,039 --> 00:30:35,220
message M with PSI identity RT in the

618
00:30:35,220 --> 00:30:37,700
second level

619
00:30:37,740 --> 00:30:41,720
this is after the change

620
00:30:42,779 --> 00:30:46,440
next we have to decide where to put our

621
00:30:46,440 --> 00:30:49,200
four identities according to this two

622
00:30:49,200 --> 00:30:50,820
level Construction

623
00:30:50,820 --> 00:30:55,080
low and RCV must be embedded in SK and

624
00:30:55,080 --> 00:30:58,380
CT respectively in aib

625
00:30:58,380 --> 00:31:03,659
and sigma and snd must be embedded in

626
00:31:03,659 --> 00:31:08,059
sign and verify in the signature

627
00:31:08,880 --> 00:31:12,600
so we consider as paging and Inc in IB

628
00:31:12,600 --> 00:31:16,559
as our archanging and in IBM mean sign a

629
00:31:16,559 --> 00:31:20,100
signature as a stage in IBM and decrypt

630
00:31:20,100 --> 00:31:23,640
in aib and verify in signature together

631
00:31:23,640 --> 00:31:28,460
as the decryption algorithm in ibme

632
00:31:29,460 --> 00:31:32,880
finally we noticed that the sigma needs

633
00:31:32,880 --> 00:31:36,299
to be used in equipped and row is a

634
00:31:36,299 --> 00:31:38,520
parameter of decryption

635
00:31:38,520 --> 00:31:41,880
so we need to keep the elements in

636
00:31:41,880 --> 00:31:44,159
equipped and stitching from the same

637
00:31:44,159 --> 00:31:46,559
group and the same as elements in

638
00:31:46,559 --> 00:31:49,559
arcaging and decrypt

639
00:31:49,559 --> 00:31:52,919
we modify the group and the vector in

640
00:31:52,919 --> 00:31:54,360
the signature to the address

641
00:31:54,360 --> 00:31:56,399
respectively

642
00:31:56,399 --> 00:31:59,880
by now our preparations have been

643
00:31:59,880 --> 00:32:02,940
completed and we need to combine these

644
00:32:02,940 --> 00:32:05,580
two separate schemes together and apply

645
00:32:05,580 --> 00:32:09,120
them in the context of IBM as mentioned

646
00:32:09,120 --> 00:32:11,399
above

647
00:32:11,399 --> 00:32:14,640
but they are used still a problem

648
00:32:14,640 --> 00:32:17,700
how do we use snd to verify the

649
00:32:17,700 --> 00:32:22,220
signature in the second level for Sigma

650
00:32:22,860 --> 00:32:27,120
we noticed that it is the DK row and snd

651
00:32:27,120 --> 00:32:30,600
used in the decryption algorithm

652
00:32:30,600 --> 00:32:34,020
and we can embed the verify algorithm in

653
00:32:34,020 --> 00:32:37,760
arcade in with tkro

654
00:32:38,520 --> 00:32:40,200
and uh

655
00:32:40,200 --> 00:32:44,100
identity snd is giving in decrypt

656
00:32:44,100 --> 00:32:46,679
algorithm we should split the

657
00:32:46,679 --> 00:32:50,039
verification part into two segments by

658
00:32:50,039 --> 00:32:54,899
snd and we have tried that merge G2 this

659
00:32:54,899 --> 00:32:57,899
restart into the formal and leave G2 D4

660
00:32:57,899 --> 00:32:59,159
star alone

661
00:32:59,159 --> 00:33:01,620
but the random numbers during the

662
00:33:01,620 --> 00:33:03,779
security proof are not enough to cover

663
00:33:03,779 --> 00:33:07,740
these four victories so we have to copy

664
00:33:07,740 --> 00:33:10,980
a slice of the vector T1 star and a D2

665
00:33:10,980 --> 00:33:14,340
star and let snd be something like a

666
00:33:14,340 --> 00:33:17,519
delegation element element

667
00:33:17,519 --> 00:33:20,640
after being delegated in the decryption

668
00:33:20,640 --> 00:33:22,200
algorithm

669
00:33:22,200 --> 00:33:26,179
the two parts of here can merge together

670
00:33:26,179 --> 00:33:29,760
in the decryption algorithm so in

671
00:33:29,760 --> 00:33:31,740
archanging these three star and the

672
00:33:31,740 --> 00:33:34,380
default star looks like two independent

673
00:33:34,380 --> 00:33:37,580
keys of trees

674
00:33:37,919 --> 00:33:42,559
here are our decryption key detail

675
00:33:43,519 --> 00:33:46,559
finally we sort of sort out the

676
00:33:46,559 --> 00:33:48,960
parameters plus the public security

677
00:33:48,960 --> 00:33:52,200
Pairs and form our completed the

678
00:33:52,200 --> 00:33:54,440
construction

679
00:33:56,340 --> 00:33:59,399
next we prove this team satisfies the

680
00:33:59,399 --> 00:34:02,399
two security requirements of an IBM at

681
00:34:02,399 --> 00:34:04,679
the same time and we're starting with

682
00:34:04,679 --> 00:34:06,720
the privacy

683
00:34:06,720 --> 00:34:10,020
after the previous analysis of security

684
00:34:10,020 --> 00:34:13,560
we can almost prove the Privacy property

685
00:34:13,560 --> 00:34:16,320
of IBM mean as well as we approve the

686
00:34:16,320 --> 00:34:19,500
aib following what is the system

687
00:34:19,500 --> 00:34:22,020
encryption method we can easily prove

688
00:34:22,020 --> 00:34:25,020
our scheme satisfies precisely with a

689
00:34:25,020 --> 00:34:26,760
little multiplication

690
00:34:26,760 --> 00:34:30,239
we first give semi-functional ciphertax

691
00:34:30,239 --> 00:34:32,639
the generation algorithm

692
00:34:32,639 --> 00:34:35,280
and then process the decryption key

693
00:34:35,280 --> 00:34:39,540
since we have considered K1 and K2 in TK

694
00:34:39,540 --> 00:34:42,300
row as two independent Keys we will

695
00:34:42,300 --> 00:34:45,659
generate semi-function secret keys for

696
00:34:45,659 --> 00:34:48,379
them separately

697
00:34:48,780 --> 00:34:51,780
we and in this case we introduce the

698
00:34:51,780 --> 00:34:55,280
concept of inter semi-function security

699
00:34:55,280 --> 00:34:59,400
where only K1 is semi-functional and K2

700
00:34:59,400 --> 00:35:02,060
remains normal

701
00:35:02,160 --> 00:35:04,680
then we generate the semi-functional

702
00:35:04,680 --> 00:35:08,580
keys of K2 and now both K1 and K2 are

703
00:35:08,580 --> 00:35:11,900
are all semi-function

704
00:35:12,240 --> 00:35:15,660
then we present a sequence of games to

705
00:35:15,660 --> 00:35:18,839
prove our scheme satisfy privacy game

706
00:35:18,839 --> 00:35:22,260
rule is the real game and we transfer

707
00:35:22,260 --> 00:35:25,020
ciphertext into semi-functional income

708
00:35:25,020 --> 00:35:27,000
zero

709
00:35:27,000 --> 00:35:30,240
K1 are changed into semi-functional in

710
00:35:30,240 --> 00:35:32,160
them half hour

711
00:35:32,160 --> 00:35:34,440
and the K2 are turned into

712
00:35:34,440 --> 00:35:37,680
semi-functional in-game cover 2. and

713
00:35:37,680 --> 00:35:40,140
then final we use a semi-functional

714
00:35:40,140 --> 00:35:43,020
decryption of a random message under two

715
00:35:43,020 --> 00:35:45,780
random identities we will prove that

716
00:35:45,780 --> 00:35:48,599
these games are indistinguishable from

717
00:35:48,599 --> 00:35:51,680
each other by a series of levels as

718
00:35:51,680 --> 00:35:55,339
water's energy blue

719
00:35:56,640 --> 00:35:59,760
as for authenticity since we have known

720
00:35:59,760 --> 00:36:03,240
that the affordability of signatures can

721
00:36:03,240 --> 00:36:06,599
be reducted to the security of IDE we

722
00:36:06,599 --> 00:36:09,660
can follow the same method

723
00:36:09,660 --> 00:36:14,099
with Builder and IBS team and assume

724
00:36:14,099 --> 00:36:16,560
that there is a activity adversary a

725
00:36:16,560 --> 00:36:18,960
that breaks the authenticity property

726
00:36:18,960 --> 00:36:22,680
with a non-neglectable advantages

727
00:36:22,680 --> 00:36:26,339
so we can employ another adversary B to

728
00:36:26,339 --> 00:36:30,000
break this secure ibe after initiating

729
00:36:30,000 --> 00:36:34,079
the system b stands identities to idea

730
00:36:34,079 --> 00:36:36,960
for querying Securities at the same time

731
00:36:36,960 --> 00:36:39,900
a sends the same identities to Oracle

732
00:36:39,900 --> 00:36:44,400
web Oracle 1 is escaped in Oracle for

733
00:36:44,400 --> 00:36:47,640
querying encryption keys in ibme

734
00:36:47,640 --> 00:36:51,300
then it can output a trouble with his

735
00:36:51,300 --> 00:36:54,359
advantages of breaking authenticity of

736
00:36:54,359 --> 00:36:58,859
ibme this identity Sigma is not the same

737
00:36:58,859 --> 00:37:02,040
as all the identities created

738
00:37:02,040 --> 00:37:05,579
a is and sigma 2p and continues to

739
00:37:05,579 --> 00:37:08,760
create our local one for EK Sigma

740
00:37:08,760 --> 00:37:12,480
then B gives the sigma energy message to

741
00:37:12,480 --> 00:37:14,820
IB for challenge

742
00:37:14,820 --> 00:37:18,599
we can win this IP exam easily by

743
00:37:18,599 --> 00:37:22,339
getting EK Sigma from a

744
00:37:22,500 --> 00:37:25,320
uh we have that we can win this game

745
00:37:25,320 --> 00:37:29,780
with a non-neutilator for advantages

746
00:37:30,859 --> 00:37:35,160
we use this identity Sigma to reduce the

747
00:37:35,160 --> 00:37:38,579
authenticity of ibme to the security of

748
00:37:38,579 --> 00:37:41,820
this ibe system which can be found in

749
00:37:41,820 --> 00:37:44,280
the full version of our paper that the

750
00:37:44,280 --> 00:37:47,640
IB is secure meaning that the advantages

751
00:37:47,640 --> 00:37:51,420
of B we need the IP game is neglectable

752
00:37:51,420 --> 00:37:54,660
so we have proved the authenticity

753
00:37:54,660 --> 00:37:58,700
property of ibming

754
00:37:59,280 --> 00:38:00,420
okay

755
00:38:00,420 --> 00:38:04,800
so in this work we built the first IBM

756
00:38:04,800 --> 00:38:07,619
scheme under the standard assumptions in

757
00:38:07,619 --> 00:38:10,200
the standard model by giving a variety

758
00:38:10,200 --> 00:38:13,859
of two level Anonymous ID

759
00:38:13,859 --> 00:38:17,220
we mainly employ to pairing Vector

760
00:38:17,220 --> 00:38:20,160
species and do system encryption during

761
00:38:20,160 --> 00:38:24,440
construction and the security proof

762
00:38:25,079 --> 00:38:28,380
some improvements and open questions can

763
00:38:28,380 --> 00:38:31,260
be done on this topic first the size of

764
00:38:31,260 --> 00:38:33,839
parameters in our scheme should be

765
00:38:33,839 --> 00:38:36,000
shorter and the numbers of pairing of

766
00:38:36,000 --> 00:38:39,119
decryption should be reduced to improve

767
00:38:39,119 --> 00:38:41,839
efficiency second the Practical

768
00:38:41,839 --> 00:38:45,660
extensions such as the work ability and

769
00:38:45,660 --> 00:38:48,720
retraceability maybe Future Works third

770
00:38:48,720 --> 00:38:52,560
black space realization based on LW can

771
00:38:52,560 --> 00:38:55,380
be done in the future

772
00:38:55,380 --> 00:38:57,599
uh that's all thank you for your

773
00:38:57,599 --> 00:38:59,640
attention and the full version of this

774
00:38:59,640 --> 00:39:04,279
paper can be found at the imprint thanks

775
00:39:08,760 --> 00:39:10,560
um thanks a lot you does anybody have

776
00:39:10,560 --> 00:39:13,700
any questions for you

777
00:39:16,260 --> 00:39:17,880
all right well if no one has a question

778
00:39:17,880 --> 00:39:20,579
then I'll ask another question then uh

779
00:39:20,579 --> 00:39:22,260
do you think there are practical

780
00:39:22,260 --> 00:39:24,060
applications of identity based

781
00:39:24,060 --> 00:39:27,240
matchmaking encryption uh and if you do

782
00:39:27,240 --> 00:39:30,799
can you elaborate a little bit

783
00:39:36,180 --> 00:39:37,980
uh

784
00:39:37,980 --> 00:39:41,300
the the first uh construction of ibme

785
00:39:41,300 --> 00:39:47,820
and proposed in crypto 2019 uh he has a

786
00:39:47,820 --> 00:39:51,000
supply and uh he has a supply several

787
00:39:51,000 --> 00:39:54,119
applications of IBM all matchmaking

788
00:39:54,119 --> 00:39:56,000
namely me

789
00:39:56,000 --> 00:40:00,720
uh this uh notion is mainly for

790
00:40:00,720 --> 00:40:06,200
the the context of

791
00:40:06,660 --> 00:40:08,660
um

792
00:40:10,079 --> 00:40:12,060
uh

793
00:40:12,060 --> 00:40:14,460
needs a strong privacy and the

794
00:40:14,460 --> 00:40:16,200
authenticity

795
00:40:16,200 --> 00:40:17,040
um

796
00:40:17,040 --> 00:40:22,980
so uh and in our and in our work uh

797
00:40:22,980 --> 00:40:26,940
it's actually uh don't have

798
00:40:26,940 --> 00:40:30,920
high efficiency so we don't

799
00:40:30,920 --> 00:40:34,140
focus on this

800
00:40:34,140 --> 00:40:37,040
construction to melee and we will

801
00:40:37,040 --> 00:40:41,960
transferred to Electric space the IBM

802
00:40:41,960 --> 00:40:46,040
realizations in IBM

803
00:40:46,680 --> 00:40:48,780
awesome thanks a lot for your question

804
00:40:48,780 --> 00:40:53,119
does anyone else have any more questions

805
00:40:54,720 --> 00:40:57,420
okay if not let's thank you again thanks

806
00:40:57,420 --> 00:40:59,040
a lot you

807
00:40:59,040 --> 00:41:02,060
all right thanks

808
00:41:24,300 --> 00:41:27,420
hello can you hear me uh yes I can see

809
00:41:27,420 --> 00:41:29,099
your slides on the zoom but I can't okay

810
00:41:29,099 --> 00:41:31,859
I'm on the big screen yet

811
00:41:31,859 --> 00:41:33,540
there we go

812
00:41:33,540 --> 00:41:36,180
can you hear us

813
00:41:36,180 --> 00:41:38,040
yes yes

814
00:41:38,040 --> 00:41:40,339
awesome

815
00:41:40,339 --> 00:41:42,780
can you see the slice

816
00:41:42,780 --> 00:41:45,359
we can I think we're all set now okay

817
00:41:45,359 --> 00:41:47,040
okay awesome that's good

818
00:41:47,040 --> 00:41:49,460
great well let's get started

819
00:41:49,460 --> 00:41:52,560
our next speaker is uh zhengen Wong and

820
00:41:52,560 --> 00:41:55,880
he's going to talk about anonymous

821
00:42:00,180 --> 00:42:02,660
hello

822
00:42:03,240 --> 00:42:06,480
we we can hear you okay okay good

823
00:42:06,480 --> 00:42:09,359
hello I'm from Lab today I will talk

824
00:42:09,359 --> 00:42:11,099
about Anonymous public key encryption

825
00:42:11,099 --> 00:42:13,079
and descriptions this is a junk work

826
00:42:13,079 --> 00:42:16,220
with ginger like

827
00:42:18,619 --> 00:42:20,640
fortunately I've introduced some

828
00:42:20,640 --> 00:42:22,980
background information for public key

829
00:42:22,980 --> 00:42:25,140
encryption and encryptions both the

830
00:42:25,140 --> 00:42:29,040
secret keys and messages could be leaked

831
00:42:29,040 --> 00:42:31,200
as far as we know the first notion of

832
00:42:31,200 --> 00:42:33,720
anonymity for pke and the Corruptions is

833
00:42:33,720 --> 00:42:37,320
proposed by the Hamilton in 2020 in

834
00:42:37,320 --> 00:42:40,020
their work Anonymous CEO are secure and

835
00:42:40,020 --> 00:42:43,200
ISO secure pke is employed to build an

836
00:42:43,200 --> 00:42:44,880
involving Community proactive secret

837
00:42:44,880 --> 00:42:47,900
sharing scheme

838
00:42:49,200 --> 00:42:52,320
unfortunately there is some Pro there

839
00:42:52,320 --> 00:42:54,480
are some problems left no no pke

840
00:42:54,480 --> 00:42:57,780
achieves Anonymous CLR Security in the

841
00:42:57,780 --> 00:42:59,880
in the game defining their security the

842
00:42:59,880 --> 00:43:01,800
adversary is not allowed to obtain any

843
00:43:01,800 --> 00:43:04,020
secret key before seeing several texts

844
00:43:04,020 --> 00:43:06,839
and each public key is used to encrypt a

845
00:43:06,839 --> 00:43:09,380
single message

846
00:43:10,319 --> 00:43:12,900
moreover both confidential post

847
00:43:12,900 --> 00:43:14,819
confidentiality and anonymity under

848
00:43:14,819 --> 00:43:18,000
Corruptions are needed to build an ECP

849
00:43:18,000 --> 00:43:21,119
double s game but we notice that for ISO

850
00:43:21,119 --> 00:43:23,400
security their diversary is able to open

851
00:43:23,400 --> 00:43:25,500
a specified subset of the challenge

852
00:43:25,500 --> 00:43:27,960
yourself text and for anonymous CR

853
00:43:27,960 --> 00:43:30,119
security the adversary does not have

854
00:43:30,119 --> 00:43:33,660
this kind of ability

855
00:43:33,660 --> 00:43:36,420
so these two security Notions are

856
00:43:36,420 --> 00:43:38,160
formalized under different types of

857
00:43:38,160 --> 00:43:40,640
Corruptions

858
00:43:42,480 --> 00:43:44,760
focusing on this problem we Define

859
00:43:44,760 --> 00:43:48,900
Anonymous ISO KNC security for pke which

860
00:43:48,900 --> 00:43:50,940
stands for anonymity under receiver

861
00:43:50,940 --> 00:43:53,160
selective opening attacks in the K

862
00:43:53,160 --> 00:43:55,140
challenging setting and adaptive user

863
00:43:55,140 --> 00:43:58,140
Corruptions and then we Define a

864
00:43:58,140 --> 00:44:00,119
confidentiality notion under the same

865
00:44:00,119 --> 00:44:03,300
types of Corruptions finally we show a

866
00:44:03,300 --> 00:44:05,700
framework of constructing pke achieving

867
00:44:05,700 --> 00:44:08,400
both Anonymous and confidential ISO K

868
00:44:08,400 --> 00:44:11,420
and CCA security

869
00:44:12,060 --> 00:44:14,660
foreign

870
00:44:15,859 --> 00:44:18,960
to the definition of anonymous ISO K and

871
00:44:18,960 --> 00:44:21,660
C security this is a simulation based

872
00:44:21,660 --> 00:44:24,300
Security in the real game in the real

873
00:44:24,300 --> 00:44:27,359
game there are totally n public Keys the

874
00:44:27,359 --> 00:44:29,700
adversary specifies a public heat

875
00:44:29,700 --> 00:44:33,300
distribution and TK challenge messages

876
00:44:33,300 --> 00:44:35,940
the public key distribution samples T of

877
00:44:35,940 --> 00:44:39,060
DN public keys and each public key will

878
00:44:39,060 --> 00:44:42,000
be used to encrypt K messages

879
00:44:42,000 --> 00:44:44,339
the anniversary knows all the encrypted

880
00:44:44,339 --> 00:44:46,079
messages but he does not know which

881
00:44:46,079 --> 00:44:47,940
public keys are used for encryption

882
00:44:47,940 --> 00:44:50,040
exactly

883
00:44:50,040 --> 00:44:52,260
the adversary can make two kinds of

884
00:44:52,260 --> 00:44:54,960
Oracle queries the user corrupting query

885
00:44:54,960 --> 00:44:57,300
and the selective opening query for the

886
00:44:57,300 --> 00:44:58,980
user crops and query the adversary

887
00:44:58,980 --> 00:45:02,579
queries on eye and receive ski for the

888
00:45:02,579 --> 00:45:04,920
selective opening query the adversary

889
00:45:04,920 --> 00:45:07,440
queries will enjoy and received skij

890
00:45:07,440 --> 00:45:11,460
which means that he asked to open the

891
00:45:11,460 --> 00:45:14,460
js7 text table

892
00:45:14,460 --> 00:45:17,040
in the ideal game there are no

893
00:45:17,040 --> 00:45:19,980
encryptions here so the public Keys here

894
00:45:19,980 --> 00:45:22,740
are useless and we use the indices of

895
00:45:22,740 --> 00:45:25,319
the public keys to replace to replace

896
00:45:25,319 --> 00:45:28,079
the public keys the simulator does not

897
00:45:28,079 --> 00:45:31,500
have any sales tax as input so

898
00:45:31,500 --> 00:45:34,380
so he has no information about the

899
00:45:34,380 --> 00:45:36,420
indices of the public Keys corresponding

900
00:45:36,420 --> 00:45:39,839
to the unopened and uncrafted users

901
00:45:39,839 --> 00:45:42,420
we require that this Temple and this

902
00:45:42,420 --> 00:45:44,880
Tuple are indistinguishable that's how

903
00:45:44,880 --> 00:45:47,640
we formalize the notion of anonymous ISO

904
00:45:47,640 --> 00:45:50,480
K and C security

905
00:45:51,240 --> 00:45:54,240
well uh confidentiality notion under the

906
00:45:54,240 --> 00:45:56,160
same types of Corruptions are similarly

907
00:45:56,160 --> 00:45:59,040
defined the main difference here is that

908
00:45:59,040 --> 00:46:01,740
we replace

909
00:46:01,740 --> 00:46:04,319
we replace the public distribution with

910
00:46:04,319 --> 00:46:06,960
a message distribution and all the other

911
00:46:06,960 --> 00:46:10,859
details are modified accordingly in this

912
00:46:10,859 --> 00:46:13,680
talk I will only focus on anonymity and

913
00:46:13,680 --> 00:46:15,300
skip over the results about

914
00:46:15,300 --> 00:46:18,140
computational energy

915
00:46:18,660 --> 00:46:21,720
for relations among security Notions we

916
00:46:21,720 --> 00:46:24,560
show that Anonymous ISO KNC CPA security

917
00:46:24,560 --> 00:46:27,780
CPA security implies Anonymous CR

918
00:46:27,780 --> 00:46:29,940
security and the corresponding

919
00:46:29,940 --> 00:46:33,240
confidentiality implies the standard ISO

920
00:46:33,240 --> 00:46:35,779
case security

921
00:46:35,900 --> 00:46:40,140
for constructions our goal is to show a

922
00:46:40,140 --> 00:46:43,260
pke scheme achieving both anonymous

923
00:46:43,260 --> 00:46:45,540
anonymous ISO K and ccca security and

924
00:46:45,540 --> 00:46:49,020
confidential ISO KNC CCA security to

925
00:46:49,020 --> 00:46:51,420
achieve this goal we

926
00:46:51,420 --> 00:46:53,940
propose a new primitive called key and

927
00:46:53,940 --> 00:46:56,599
message non-committing encryption kmnce

928
00:46:56,599 --> 00:47:00,720
and use this primitive to show a pke

929
00:47:00,720 --> 00:47:02,220
achieving these two security

930
00:47:02,220 --> 00:47:04,380
requirements

931
00:47:04,380 --> 00:47:07,380
and then we introduce and we use a new

932
00:47:07,380 --> 00:47:09,540
primitive key openable hash Pro system

933
00:47:09,540 --> 00:47:11,940
to construct kmace

934
00:47:11,940 --> 00:47:14,339
this is the technical overview of our

935
00:47:14,339 --> 00:47:16,260
Construction

936
00:47:16,260 --> 00:47:18,780
now let me introduce the Primitive of

937
00:47:18,780 --> 00:47:20,819
kmnce

938
00:47:20,819 --> 00:47:23,819
uh traditional pke consists of three PPT

939
00:47:23,819 --> 00:47:26,040
algorithms

940
00:47:26,040 --> 00:47:28,920
for a km and CE scheme in the K20

941
00:47:28,920 --> 00:47:31,560
setting the key generation algorithm

942
00:47:31,560 --> 00:47:34,500
will additionally generate a chapter T

943
00:47:34,500 --> 00:47:37,440
TK and there are two additional PPT

944
00:47:37,440 --> 00:47:39,960
algorithms the fake algorithm and the

945
00:47:39,960 --> 00:47:41,339
open algorithm

946
00:47:41,339 --> 00:47:43,920
the fake algorithm without taking any

947
00:47:43,920 --> 00:47:46,800
public key as input I'll put the fake

948
00:47:46,800 --> 00:47:48,780
server a fixed server text and its

949
00:47:48,780 --> 00:47:50,339
corresponding chapter

950
00:47:50,339 --> 00:47:53,040
the open algorithm takes a public key a

951
00:47:53,040 --> 00:47:55,680
secret here chapter key and they fix

952
00:47:55,680 --> 00:47:57,480
several texts and their corresponding

953
00:47:57,480 --> 00:48:01,079
chapters and K messages as input and

954
00:48:01,079 --> 00:48:03,660
output a new secret key

955
00:48:03,660 --> 00:48:06,780
we want to we want to use the open

956
00:48:06,780 --> 00:48:10,200
algorithm to open k fixed server text to

957
00:48:10,200 --> 00:48:12,300
any K messages

958
00:48:12,300 --> 00:48:15,300
this property will be will be guaranteed

959
00:48:15,300 --> 00:48:17,760
by the by the following security

960
00:48:17,760 --> 00:48:20,280
requirements

961
00:48:20,280 --> 00:48:22,319
we Define two kinds of security

962
00:48:22,319 --> 00:48:25,140
requirements for km and CE the first one

963
00:48:25,140 --> 00:48:28,740
is kmnc CPA or CCA security and the

964
00:48:28,740 --> 00:48:31,319
second one is robustness

965
00:48:31,319 --> 00:48:34,260
here we call the secret key is generated

966
00:48:34,260 --> 00:48:36,780
with the key generation algorithm as the

967
00:48:36,780 --> 00:48:39,599
as the original secret key and call the

968
00:48:39,599 --> 00:48:41,400
server text generated with the

969
00:48:41,400 --> 00:48:43,560
encryption algorithm as as the real

970
00:48:43,560 --> 00:48:45,960
server text and code several text with

971
00:48:45,960 --> 00:48:48,420
generating with the fake algorithm as as

972
00:48:48,420 --> 00:48:50,240
the fake server text

973
00:48:50,240 --> 00:48:54,359
kmnc CPA security request that for any K

974
00:48:54,359 --> 00:48:55,500
messages

975
00:48:55,500 --> 00:48:57,839
the original secret key and create real

976
00:48:57,839 --> 00:49:00,240
server texts are indistinguishable from

977
00:49:00,240 --> 00:49:03,000
an Open Secret Key and K fake server

978
00:49:03,000 --> 00:49:04,500
texts

979
00:49:04,500 --> 00:49:07,859
the km and cccs security is similarly

980
00:49:07,859 --> 00:49:09,599
defined

981
00:49:09,599 --> 00:49:12,359
robustness requires that decrypting a

982
00:49:12,359 --> 00:49:14,220
fixed server text with the original

983
00:49:14,220 --> 00:49:17,400
secret key will lead to an error with

984
00:49:17,400 --> 00:49:19,619
overwhelming probability

985
00:49:19,619 --> 00:49:22,260
well that that this is the security

986
00:49:22,260 --> 00:49:26,280
requirement we formulas for kmnc

987
00:49:26,280 --> 00:49:28,079
now we turn to the construction of

988
00:49:28,079 --> 00:49:30,660
anonymous and confidential ISO KNC

989
00:49:30,660 --> 00:49:33,780
secure pke from km and CE

990
00:49:33,780 --> 00:49:36,540
for a kmsc scheme the first three

991
00:49:36,540 --> 00:49:39,180
algorithms form a pke scheme

992
00:49:39,180 --> 00:49:42,000
well formally we have this theorem

993
00:49:42,000 --> 00:49:47,099
if km is kmnc CPA secure then this pke

994
00:49:47,099 --> 00:49:50,099
scheme is anonymous ISO K and CCP secure

995
00:49:50,099 --> 00:49:53,880
and confidential ISO K and CPA secure if

996
00:49:53,880 --> 00:49:57,540
km and CE is CCA secure and robust

997
00:49:57,540 --> 00:50:00,180
then the PK scheme is anonymous and

998
00:50:00,180 --> 00:50:02,579
confidential CCA secure

999
00:50:02,579 --> 00:50:06,240
in this talk I will introduce the proof

1000
00:50:06,240 --> 00:50:09,240
about the approve of the anonymous rsok

1001
00:50:09,240 --> 00:50:12,140
and CCTA security

1002
00:50:12,180 --> 00:50:14,359
foreign

1003
00:50:16,940 --> 00:50:19,500
CCP security

1004
00:50:19,500 --> 00:50:22,260
note that here all the challenges of

1005
00:50:22,260 --> 00:50:23,940
attacks are real server text because

1006
00:50:23,940 --> 00:50:25,440
they are all generated with the

1007
00:50:25,440 --> 00:50:27,780
encryption algorithm and all the secret

1008
00:50:27,780 --> 00:50:30,900
keys and all the retensive keys via the

1009
00:50:30,900 --> 00:50:33,599
Oracle queries are the original secret

1010
00:50:33,599 --> 00:50:36,140
keys

1011
00:50:36,359 --> 00:50:38,700
this is the ideal game

1012
00:50:38,700 --> 00:50:41,460
and this is the construction of the

1013
00:50:41,460 --> 00:50:42,540
simulator

1014
00:50:42,540 --> 00:50:44,940
the main idea of the construction of the

1015
00:50:44,940 --> 00:50:47,640
simulator is that when generating the

1016
00:50:47,640 --> 00:50:50,040
challenging server text

1017
00:50:50,040 --> 00:50:54,480
for HJ if i j if i j has been crafted

1018
00:50:54,480 --> 00:50:57,180
here if IJ has been corrupted then

1019
00:50:57,180 --> 00:50:58,980
generate the server text with the

1020
00:50:58,980 --> 00:51:01,920
encryption algorithm if IJ has never

1021
00:51:01,920 --> 00:51:04,140
been crafted then generate the server

1022
00:51:04,140 --> 00:51:06,780
text with the fake algorithm

1023
00:51:06,780 --> 00:51:10,020
when ensuring the adversaries use the

1024
00:51:10,020 --> 00:51:11,760
question query or selective opening

1025
00:51:11,760 --> 00:51:13,020
query

1026
00:51:13,020 --> 00:51:16,440
if the received if the receive impacts i

1027
00:51:16,440 --> 00:51:19,260
j prime or IJ corresponds to real server

1028
00:51:19,260 --> 00:51:22,500
text then return the secret the return

1029
00:51:22,500 --> 00:51:25,140
the original secret key as a response

1030
00:51:25,140 --> 00:51:28,319
after receiving text corresponds to fix

1031
00:51:28,319 --> 00:51:31,020
server text then return the Open Secret

1032
00:51:31,020 --> 00:51:32,160
Key

1033
00:51:32,160 --> 00:51:34,200
return the security generative is the

1034
00:51:34,200 --> 00:51:36,900
open algorithm as a response

1035
00:51:36,900 --> 00:51:38,700
that is the main idea of the

1036
00:51:38,700 --> 00:51:40,980
construction of the simulator

1037
00:51:40,980 --> 00:51:44,339
we note that in the real game all the

1038
00:51:44,339 --> 00:51:45,900
challenges of attacks are real server

1039
00:51:45,900 --> 00:51:48,660
text and all the retensive keys are the

1040
00:51:48,660 --> 00:51:51,960
original CP keys in the ideal game some

1041
00:51:51,960 --> 00:51:53,700
of the challenges of attacks are

1042
00:51:53,700 --> 00:51:56,520
modified to fix several tests and some

1043
00:51:56,520 --> 00:51:58,980
of the written secret keys are modified

1044
00:51:58,980 --> 00:52:01,079
to open ones

1045
00:52:01,079 --> 00:52:02,579
and

1046
00:52:02,579 --> 00:52:06,059
we have saw that KMC kmnc CPA security

1047
00:52:06,059 --> 00:52:08,400
request that the fake server text and

1048
00:52:08,400 --> 00:52:10,380
the real server text are distinguishable

1049
00:52:10,380 --> 00:52:12,540
and the open security key and the real

1050
00:52:12,540 --> 00:52:14,880
Civic security are indistinguishable

1051
00:52:14,880 --> 00:52:19,079
so we have that the km and CCB Security

1052
00:52:19,079 --> 00:52:22,200
will guarantee the ideal game and the

1053
00:52:22,200 --> 00:52:24,900
real game are also indistinguishable so

1054
00:52:24,900 --> 00:52:28,380
we obtain the anonymous ISO KNC CPA

1055
00:52:28,380 --> 00:52:30,619
security

1056
00:52:33,839 --> 00:52:37,619
next to construct kmnc to construct

1057
00:52:37,619 --> 00:52:40,440
kmnce we need a new formative called key

1058
00:52:40,440 --> 00:52:42,480
openable hash boosted term now we tend

1059
00:52:42,480 --> 00:52:46,640
to introduce this primitive

1060
00:52:47,240 --> 00:52:49,920
personally I will record the traditional

1061
00:52:49,920 --> 00:52:51,599
hash Pro system

1062
00:52:51,599 --> 00:52:54,079
a substant membership problem as MP

1063
00:52:54,079 --> 00:52:57,300
requires that two elements sample from

1064
00:52:57,300 --> 00:52:59,220
the subset and the universal set

1065
00:52:59,220 --> 00:53:02,760
respectively are indistinguishable

1066
00:53:02,760 --> 00:53:06,859
Hydro flow system for SMP has a private

1067
00:53:06,859 --> 00:53:09,599
has a private evaluation algorithm and a

1068
00:53:09,599 --> 00:53:12,300
public evaluation algorithm both both

1069
00:53:12,300 --> 00:53:14,280
these evaluation algorithms are used to

1070
00:53:14,280 --> 00:53:18,000
encrypt used to compute a h value

1071
00:53:18,000 --> 00:53:21,540
the projectivity requires that a public

1072
00:53:21,540 --> 00:53:23,819
key can uniquely determine the hash

1073
00:53:23,819 --> 00:53:28,339
value of any element inside the subset

1074
00:53:28,980 --> 00:53:31,859
now we extend the key open mode sorry

1075
00:53:31,859 --> 00:53:35,280
now we extend the SMP to multiple SMP

1076
00:53:35,280 --> 00:53:38,040
multiple SMP requests that K element

1077
00:53:38,040 --> 00:53:41,160
sample from the subset are

1078
00:53:41,160 --> 00:53:43,440
indistinguishable from K elements sample

1079
00:53:43,440 --> 00:53:46,520
from the universal set

1080
00:53:47,300 --> 00:53:51,000
system has a chapter and there is a new

1081
00:53:51,000 --> 00:53:52,980
algorithm called age open algorithm

1082
00:53:52,980 --> 00:53:56,940
which takes a publicly a secret key and

1083
00:53:56,940 --> 00:54:00,720
key purpose of pre-energy and H value as

1084
00:54:00,720 --> 00:54:03,359
input and outputs are new

1085
00:54:03,359 --> 00:54:05,900
a musical key

1086
00:54:05,900 --> 00:54:08,339
we introduced a new property called

1087
00:54:08,339 --> 00:54:10,260
openability for key open well actually

1088
00:54:10,260 --> 00:54:12,020
process term

1089
00:54:12,020 --> 00:54:14,520
Let's ignore the details here first

1090
00:54:14,520 --> 00:54:18,359
which I put here just for reference

1091
00:54:18,359 --> 00:54:20,839
I want to stress that openability

1092
00:54:20,839 --> 00:54:23,640
openability are used to guarantee that

1093
00:54:23,640 --> 00:54:26,640
the edge open algorithm can open k

1094
00:54:26,640 --> 00:54:29,520
uniformly sample H values to K uniformly

1095
00:54:29,520 --> 00:54:32,540
sample pre-images

1096
00:54:33,599 --> 00:54:35,880
okay

1097
00:54:35,880 --> 00:54:39,240
well another property is also needed we

1098
00:54:39,240 --> 00:54:41,579
require that there is a PBT resample

1099
00:54:41,579 --> 00:54:44,460
algorithm such that for uniformly sample

1100
00:54:44,460 --> 00:54:46,680
hash value it can recover the

1101
00:54:46,680 --> 00:54:49,879
corresponding randomness

1102
00:54:51,780 --> 00:54:55,020
we propose a mtdhg-based instantiation

1103
00:54:55,020 --> 00:54:57,780
of key openable HD Pro system which can

1104
00:54:57,780 --> 00:55:00,240
be seen as a general generalization of

1105
00:55:00,240 --> 00:55:02,660
the ddac based HD Pro system

1106
00:55:02,660 --> 00:55:06,480
and for the details please refer to our

1107
00:55:06,480 --> 00:55:08,700
full version

1108
00:55:08,700 --> 00:55:10,940
foreign

1109
00:55:10,940 --> 00:55:13,800
to the construction of a kmac from

1110
00:55:13,800 --> 00:55:17,099
Keyhole hash proof system

1111
00:55:17,099 --> 00:55:19,559
this is the detail Construction

1112
00:55:19,559 --> 00:55:22,380
for key generation for key Generation

1113
00:55:22,380 --> 00:55:24,720
all the secret key public key and

1114
00:55:24,720 --> 00:55:26,880
chapter key are directly from that of

1115
00:55:26,880 --> 00:55:28,800
the hash proof system

1116
00:55:28,800 --> 00:55:32,160
for encryption firstly sample X from the

1117
00:55:32,160 --> 00:55:35,400
subset and then use the public key to

1118
00:55:35,400 --> 00:55:37,559
compute the hash value and use the hash

1119
00:55:37,559 --> 00:55:40,680
value to hide the message the save tag

1120
00:55:40,680 --> 00:55:44,700
sorry the self text is the SX and type

1121
00:55:44,700 --> 00:55:47,339
to generate to generate a fake server

1122
00:55:47,339 --> 00:55:49,920
text the fake algorithm uniformly sample

1123
00:55:49,920 --> 00:55:52,559
X and pi and let the chapter be the

1124
00:55:52,559 --> 00:55:55,020
corresponding Randomness RX

1125
00:55:55,020 --> 00:55:58,140
we know that here the this x is a sample

1126
00:55:58,140 --> 00:56:01,098
from the universal set

1127
00:56:01,140 --> 00:56:03,180
the open algorithm is the mostly

1128
00:56:03,180 --> 00:56:05,579
communicated algorithm

1129
00:56:05,579 --> 00:56:08,460
for each gamma firstly compare e as Pi

1130
00:56:08,460 --> 00:56:10,500
minus M and then use the resample

1131
00:56:10,500 --> 00:56:13,500
algorithm of the https to compute the

1132
00:56:13,500 --> 00:56:15,660
randomness and then use the edge open

1133
00:56:15,660 --> 00:56:18,960
algorithm of the https to generate a

1134
00:56:18,960 --> 00:56:21,059
musical key and return the new secret

1135
00:56:21,059 --> 00:56:22,500
key

1136
00:56:22,500 --> 00:56:25,200
now we want to prove that we want to

1137
00:56:25,200 --> 00:56:29,160
prove this kmnc scheme achieves kmnc CPA

1138
00:56:29,160 --> 00:56:30,059
security

1139
00:56:30,059 --> 00:56:33,420
which recorded at KMC CPA security

1140
00:56:33,420 --> 00:56:37,559
require that the original secret key and

1141
00:56:37,559 --> 00:56:39,540
K real server texts are

1142
00:56:39,540 --> 00:56:41,940
indistinguishable from an open security

1143
00:56:41,940 --> 00:56:44,760
and K fixed server texts

1144
00:56:44,760 --> 00:56:47,220
now we call this as the real Tuple and

1145
00:56:47,220 --> 00:56:50,040
quotas as the fake title

1146
00:56:50,040 --> 00:56:53,819
income zero this is the real Tuple note

1147
00:56:53,819 --> 00:56:55,020
that the secret key is the original

1148
00:56:55,020 --> 00:56:57,599
secret key and all the K7 texts are the

1149
00:56:57,599 --> 00:56:59,099
real server text

1150
00:56:59,099 --> 00:57:01,680
both as an example from the subset and

1151
00:57:01,680 --> 00:57:03,839
Pi is computed with the public key

1152
00:57:03,839 --> 00:57:07,020
and in game one each Pi is computed with

1153
00:57:07,020 --> 00:57:09,119
the secret key so the projectivity of

1154
00:57:09,119 --> 00:57:11,280
https will guarantee that these two

1155
00:57:11,280 --> 00:57:13,140
games are indistinguishable

1156
00:57:13,140 --> 00:57:16,980
in game 2 each X is a sample from the

1157
00:57:16,980 --> 00:57:20,220
universal set so the multiple SMP

1158
00:57:20,220 --> 00:57:21,960
guarantee that these two games are also

1159
00:57:21,960 --> 00:57:23,520
indistinguishable

1160
00:57:23,520 --> 00:57:25,800
in game stream

1161
00:57:25,800 --> 00:57:28,920
firstly sample pie from the hash value

1162
00:57:28,920 --> 00:57:32,099
space and then compute e as Pi minus M

1163
00:57:32,099 --> 00:57:34,500
and use the sample algorithm of the

1164
00:57:34,500 --> 00:57:37,680
https to compute a Randomness and use

1165
00:57:37,680 --> 00:57:41,160
these open algorithm to compute a new

1166
00:57:41,160 --> 00:57:42,839
secret key and put the new secret key

1167
00:57:42,839 --> 00:57:43,980
here

1168
00:57:43,980 --> 00:57:46,619
well notice that this is the open

1169
00:57:46,619 --> 00:57:48,180
algorithm

1170
00:57:48,180 --> 00:57:50,700
this part is totally the same as the

1171
00:57:50,700 --> 00:57:52,800
open algorithm here

1172
00:57:52,800 --> 00:57:56,339
so the secret key in chemistry is the

1173
00:57:56,339 --> 00:57:59,099
Open Secret Key and all the all the K7

1174
00:57:59,099 --> 00:58:01,079
texts here are the fixed level tests

1175
00:58:01,079 --> 00:58:03,599
because both X and Pi are uniformly

1176
00:58:03,599 --> 00:58:07,020
sample so these are fixed subtext and so

1177
00:58:07,020 --> 00:58:09,660
in chemistry this is the fake title and

1178
00:58:09,660 --> 00:58:11,640
the openability will guarantee that game

1179
00:58:11,640 --> 00:58:14,160
2 and game three are extinguishable so

1180
00:58:14,160 --> 00:58:16,680
give zero incomes are existinguishable

1181
00:58:16,680 --> 00:58:19,680
and as a result we obtain that real and

1182
00:58:19,680 --> 00:58:22,079
the real type of infectable are also in

1183
00:58:22,079 --> 00:58:24,900
Singapore that's how we obtain the kmnc

1184
00:58:24,900 --> 00:58:27,619
CPA security

1185
00:58:28,440 --> 00:58:30,839
well for the CCA secure kmnc

1186
00:58:30,839 --> 00:58:34,280
construction please refer to our paper

1187
00:58:34,280 --> 00:58:37,559
to summarize we formulas the notion of

1188
00:58:37,559 --> 00:58:41,040
anonymous ISO KNC security for pke and

1189
00:58:41,040 --> 00:58:44,400
the CPA security implies Anonymous CLR

1190
00:58:44,400 --> 00:58:45,540
security

1191
00:58:45,540 --> 00:58:48,660
and we also formalized the confidential

1192
00:58:48,660 --> 00:58:52,140
confidential entity notion of a concept

1193
00:58:52,140 --> 00:58:53,700
confidentiality notion under the same

1194
00:58:53,700 --> 00:58:56,040
types of Corruptions and show that this

1195
00:58:56,040 --> 00:58:58,680
notion implies the standard ISO case

1196
00:58:58,680 --> 00:58:59,640
security

1197
00:58:59,640 --> 00:59:02,220
for constructions we show a framework of

1198
00:59:02,220 --> 00:59:04,559
pke achieving both Anonymous and

1199
00:59:04,559 --> 00:59:08,579
confidential ISO KNC CCA security

1200
00:59:08,579 --> 00:59:11,880
the the obtained mtdh based scheme has

1201
00:59:11,880 --> 00:59:13,799
complex server text and time security

1202
00:59:13,799 --> 00:59:16,440
reduction and it's the first pk scheme

1203
00:59:16,440 --> 00:59:19,680
achieving Anonymous CLR security

1204
00:59:19,680 --> 00:59:21,240
well that's all thanks for your

1205
00:59:21,240 --> 00:59:23,540
attention

1206
00:59:28,920 --> 00:59:31,020
thanks a lot for your talk does anyone

1207
00:59:31,020 --> 00:59:33,680
have any questions

1208
00:59:35,299 --> 00:59:38,299
foreign

1209
00:59:39,200 --> 00:59:41,400
thanks for your talk

1210
00:59:41,400 --> 00:59:43,140
um I have a question about your security

1211
00:59:43,140 --> 00:59:47,040
definition for anonymous RSO I was just

1212
00:59:47,040 --> 00:59:48,240
curious if you can provide some

1213
00:59:48,240 --> 00:59:51,599
intuition for why you give the adversary

1214
00:59:51,599 --> 00:59:55,440
corruption Oracle before the um the

1215
00:59:55,440 --> 00:59:58,380
ciphertext generation happens

1216
00:59:58,380 --> 01:00:00,420
but what's the Practical uh reasoning

1217
01:00:00,420 --> 01:00:02,280
and what's the implications for the

1218
01:00:02,280 --> 01:00:04,559
strength of the security notion

1219
01:00:04,559 --> 01:00:06,660
but you mean why I give this auto

1220
01:00:06,660 --> 01:00:08,940
correct exactly

1221
01:00:08,940 --> 01:00:11,760
well I think we think keeping his local

1222
01:00:11,760 --> 01:00:14,160
is much natural uh in applications

1223
01:00:14,160 --> 01:00:15,799
because

1224
01:00:15,799 --> 01:00:19,680
in application in practice the adversary

1225
01:00:19,680 --> 01:00:22,500
it's possible to to craft the users

1226
01:00:22,500 --> 01:00:27,240
before can corrupt the users at any time

1227
01:00:27,240 --> 01:00:28,980
before or after seeing the training

1228
01:00:28,980 --> 01:00:31,400
yourself text

1229
01:00:32,220 --> 01:00:34,079
um so the cipher takes might also be

1230
01:00:34,079 --> 01:00:35,940
generated from the public Keys

1231
01:00:35,940 --> 01:00:37,500
corresponding to the secret Keys which

1232
01:00:37,500 --> 01:00:39,299
the adversary already corrupted is that

1233
01:00:39,299 --> 01:00:40,619
correct

1234
01:00:40,619 --> 01:00:42,359
sorry

1235
01:00:42,359 --> 01:00:44,460
so so when the when the cipher texts are

1236
01:00:44,460 --> 01:00:45,900
generated the public keys that are

1237
01:00:45,900 --> 01:00:47,819
sampled could also include the the

1238
01:00:47,819 --> 01:00:49,319
public Keys corresponding to the side

1239
01:00:49,319 --> 01:00:51,299
sorry the secret Keys which the

1240
01:00:51,299 --> 01:00:55,500
adversary already crafted uh yes okay

1241
01:00:55,500 --> 01:00:59,240
thank you oh thank you

1242
01:00:59,520 --> 01:01:00,839
thanks a lot are there any other

1243
01:01:00,839 --> 01:01:03,140
questions

1244
01:01:04,680 --> 01:01:06,900
right well if not let's thank Jenkin

1245
01:01:06,900 --> 01:01:07,799
again

1246
01:01:07,799 --> 01:01:10,520
oh thank you

1247
01:01:29,220 --> 01:01:32,220
foreign

1248
01:01:55,579 --> 01:01:58,020
thank you all for the final Talk of the

1249
01:01:58,020 --> 01:02:00,240
session akshaya is going to tell us

1250
01:02:00,240 --> 01:02:02,040
about memory type multi-challenge

1251
01:02:02,040 --> 01:02:04,500
security of public key encryption so

1252
01:02:04,500 --> 01:02:06,119
please take it away

1253
01:02:06,119 --> 01:02:08,220
thank you for the introduction

1254
01:02:08,220 --> 01:02:11,220
hi um I'm akshayo and this is Joint work

1255
01:02:11,220 --> 01:02:13,980
with my advisor Joseph dragger in this

1256
01:02:13,980 --> 01:02:16,319
work we give CCA secure encryption

1257
01:02:16,319 --> 01:02:18,359
schemes with proofs in the multi-user

1258
01:02:18,359 --> 01:02:20,400
multi-challenge setting that are tight

1259
01:02:20,400 --> 01:02:22,920
with respect to time advantage and

1260
01:02:22,920 --> 01:02:24,000
memory

1261
01:02:24,000 --> 01:02:26,700
to give ourselves some context let us

1262
01:02:26,700 --> 01:02:29,040
start by recalling how we cryptographers

1263
01:02:29,040 --> 01:02:33,200
like to analyze the security of a scheme

1264
01:02:33,200 --> 01:02:36,780
we express the security of a scheme as

1265
01:02:36,780 --> 01:02:38,640
the adversary in terms of the

1266
01:02:38,640 --> 01:02:41,400
adversity's advantage roughly speaking

1267
01:02:41,400 --> 01:02:43,740
the advantage can be viewed as the

1268
01:02:43,740 --> 01:02:45,839
probability with which the adversary is

1269
01:02:45,839 --> 01:02:48,599
successful in breaking a scheme

1270
01:02:48,599 --> 01:02:51,599
our perspective in analyzing the

1271
01:02:51,599 --> 01:02:54,240
advantage function can be asymptotic or

1272
01:02:54,240 --> 01:02:55,500
concrete

1273
01:02:55,500 --> 01:02:57,660
an asymptotic security guarantee looks

1274
01:02:57,660 --> 01:03:00,660
like this where both the scheme and the

1275
01:03:00,660 --> 01:03:02,280
adversity are parameterized by a

1276
01:03:02,280 --> 01:03:05,040
security parameter and the scheme is

1277
01:03:05,040 --> 01:03:06,839
called secure if all polytime

1278
01:03:06,839 --> 01:03:09,059
adversaries have negligible advantage

1279
01:03:09,059 --> 01:03:11,640
against the scheme

1280
01:03:11,640 --> 01:03:13,440
um such a notion of security raises

1281
01:03:13,440 --> 01:03:15,660
ambiguity about the security guarantees

1282
01:03:15,660 --> 01:03:16,799
of this team who are actually

1283
01:03:16,799 --> 01:03:19,680
instantiating it to avoid this ambiguity

1284
01:03:19,680 --> 01:03:22,799
we use concrete security where we fix an

1285
01:03:22,799 --> 01:03:25,440
instance of a scheme and then Express

1286
01:03:25,440 --> 01:03:27,839
the adversity's advantage in terms of

1287
01:03:27,839 --> 01:03:29,760
its resources

1288
01:03:29,760 --> 01:03:32,640
this allows us to visualize the

1289
01:03:32,640 --> 01:03:33,960
trade-off between the amount of

1290
01:03:33,960 --> 01:03:35,640
resources that an adversity is willing

1291
01:03:35,640 --> 01:03:37,920
to throw at a problem and its likelihood

1292
01:03:37,920 --> 01:03:40,260
in succeeding and breaking up

1293
01:03:40,260 --> 01:03:42,540
this is shown by this resource versus

1294
01:03:42,540 --> 01:03:45,720
Advantage plot for some adversity a we

1295
01:03:45,720 --> 01:03:47,819
are then able to express the security of

1296
01:03:47,819 --> 01:03:50,520
a scheme as the amount of resources that

1297
01:03:50,520 --> 01:03:52,380
an adversity needs to have Advantage

1298
01:03:52,380 --> 01:03:54,359
close to one

1299
01:03:54,359 --> 01:03:56,400
traditionally the most commonly

1300
01:03:56,400 --> 01:03:58,619
considered resource in concrete security

1301
01:03:58,619 --> 01:04:01,619
analysis is computational time

1302
01:04:01,619 --> 01:04:03,420
but in practice there are other

1303
01:04:03,420 --> 01:04:06,240
resources that are also important

1304
01:04:06,240 --> 01:04:09,540
as shown by this very subtle hint in

1305
01:04:09,540 --> 01:04:11,579
this talk we will be talking about why

1306
01:04:11,579 --> 01:04:13,440
memory is important in the concrete

1307
01:04:13,440 --> 01:04:16,020
security analysis of schemes and how we

1308
01:04:16,020 --> 01:04:18,180
can incorporate it

1309
01:04:18,180 --> 01:04:20,280
such analysis is often based on

1310
01:04:20,280 --> 01:04:21,960
cryptographic reductions

1311
01:04:21,960 --> 01:04:25,020
a reduction turns in adversity attacking

1312
01:04:25,020 --> 01:04:28,740
a scheme s into an algorithm that solves

1313
01:04:28,740 --> 01:04:30,780
a problem a better understood hard

1314
01:04:30,780 --> 01:04:32,099
problem key

1315
01:04:32,099 --> 01:04:34,500
to do this the reduction runs the

1316
01:04:34,500 --> 01:04:37,799
adversary as a subroutine and simulates

1317
01:04:37,799 --> 01:04:40,260
um the scheme to the adversary

1318
01:04:40,260 --> 01:04:42,599
the reduction then uses the responses

1319
01:04:42,599 --> 01:04:45,000
and outputs of the adversary to solve

1320
01:04:45,000 --> 01:04:46,200
the problem p

1321
01:04:46,200 --> 01:04:49,260
ultimately our goal is to

1322
01:04:49,260 --> 01:04:51,720
derive bounds that relate the advantage

1323
01:04:51,720 --> 01:04:54,839
and resources of

1324
01:04:54,839 --> 01:04:57,240
of the reduction to that of the

1325
01:04:57,240 --> 01:04:59,700
adversary

1326
01:04:59,700 --> 01:05:02,099
the tightness of a reduction measures

1327
01:05:02,099 --> 01:05:05,220
how good or efficient the deduction is

1328
01:05:05,220 --> 01:05:07,619
roughly speaking a reduction is called

1329
01:05:07,619 --> 01:05:10,440
height if it is able to preserve the

1330
01:05:10,440 --> 01:05:12,240
advantage and resource consumption of

1331
01:05:12,240 --> 01:05:14,339
the original adversary

1332
01:05:14,339 --> 01:05:16,559
to see why tightness is important in

1333
01:05:16,559 --> 01:05:19,020
concrete security analysis let us look

1334
01:05:19,020 --> 01:05:20,760
at this resource versus success

1335
01:05:20,760 --> 01:05:23,400
probability plot for some hard problem

1336
01:05:23,400 --> 01:05:24,480
key

1337
01:05:24,480 --> 01:05:27,599
we broke the we separate

1338
01:05:27,599 --> 01:05:29,520
um the plot into regions that we call

1339
01:05:29,520 --> 01:05:32,520
broken and unbroken for the problem e if

1340
01:05:32,520 --> 01:05:34,980
a point lies in The Unbroken region it

1341
01:05:34,980 --> 01:05:37,200
means that currently we do not have any

1342
01:05:37,200 --> 01:05:39,480
any algorithms that can efficiently

1343
01:05:39,480 --> 01:05:41,520
solve the problem p with corresponding

1344
01:05:41,520 --> 01:05:43,319
resources

1345
01:05:43,319 --> 01:05:45,240
let's say we want a scheme that is

1346
01:05:45,240 --> 01:05:46,680
secure against all adversities

1347
01:05:46,680 --> 01:05:49,859
constrained in Resources by this point a

1348
01:05:49,859 --> 01:05:52,020
if we have a reduction that uses

1349
01:05:52,020 --> 01:05:54,599
significantly greater resources we end

1350
01:05:54,599 --> 01:05:56,520
up with an algorithm whose resources

1351
01:05:56,520 --> 01:05:58,500
suffice to break the problem

1352
01:05:58,500 --> 01:06:00,720
this means that we cannot derive any

1353
01:06:00,720 --> 01:06:02,339
meaningful conclusions about the

1354
01:06:02,339 --> 01:06:04,920
security of our scheme

1355
01:06:04,920 --> 01:06:07,980
If instead we have a tight reduction we

1356
01:06:07,980 --> 01:06:09,780
see that we get an algorithm that is

1357
01:06:09,780 --> 01:06:11,339
still in The Unbroken region for problem

1358
01:06:11,339 --> 01:06:14,040
e and now we can derive meaningful

1359
01:06:14,040 --> 01:06:15,780
conclusions about the security of our

1360
01:06:15,780 --> 01:06:20,480
scheme based on the problem's hardness

1361
01:06:21,839 --> 01:06:25,079
specifically in our work we consider

1362
01:06:25,079 --> 01:06:27,420
um as we pointed out earlier the most

1363
01:06:27,420 --> 01:06:28,740
commonly considered resource is

1364
01:06:28,740 --> 01:06:31,200
computational time and in our work we

1365
01:06:31,200 --> 01:06:33,119
also consider memory

1366
01:06:33,119 --> 01:06:35,760
this is important specifically for

1367
01:06:35,760 --> 01:06:38,280
memory sensitive problems or problems

1368
01:06:38,280 --> 01:06:40,440
that are believed to be easier to solve

1369
01:06:40,440 --> 01:06:42,059
with more memory

1370
01:06:42,059 --> 01:06:44,280
a concrete example is the discrete

1371
01:06:44,280 --> 01:06:47,760
logarithm problem in time fields

1372
01:06:47,760 --> 01:06:50,099
here is a memory time plot for the

1373
01:06:50,099 --> 01:06:51,960
discrete log problem in Prime Fields

1374
01:06:51,960 --> 01:06:53,460
where the time and memory are in log

1375
01:06:53,460 --> 01:06:54,359
scale

1376
01:06:54,359 --> 01:06:57,599
as we can see the problem becomes easier

1377
01:06:57,599 --> 01:07:00,420
to solve for with sufficient memory

1378
01:07:00,420 --> 01:07:03,119
let us say again that we want a scheme

1379
01:07:03,119 --> 01:07:05,099
that is secured against all adversaries

1380
01:07:05,099 --> 01:07:07,140
constrained in time and memory by this

1381
01:07:07,140 --> 01:07:08,700
point a

1382
01:07:08,700 --> 01:07:11,760
if our reduction now uses significantly

1383
01:07:11,760 --> 01:07:14,940
more memory than um a we end up with an

1384
01:07:14,940 --> 01:07:17,220
algorithm whose resources suffice to

1385
01:07:17,220 --> 01:07:19,020
break the discrete log problem

1386
01:07:19,020 --> 01:07:21,180
again this does not lead any meaningful

1387
01:07:21,180 --> 01:07:22,920
conclusions about the security of our

1388
01:07:22,920 --> 01:07:25,079
scheme

1389
01:07:25,079 --> 01:07:28,559
in cryptos 17 our Bach cache first

1390
01:07:28,559 --> 01:07:31,440
encodes introduced the notion of memory

1391
01:07:31,440 --> 01:07:34,260
type deductions where they Advocate that

1392
01:07:34,260 --> 01:07:36,780
on top of a reduction being tight in

1393
01:07:36,780 --> 01:07:38,339
terms of advantage and computational

1394
01:07:38,339 --> 01:07:41,099
time it is also important that the

1395
01:07:41,099 --> 01:07:43,500
reduction be tight with respect to

1396
01:07:43,500 --> 01:07:44,700
memory

1397
01:07:44,700 --> 01:07:47,579
going back to our previous example if we

1398
01:07:47,579 --> 01:07:50,579
have a memory type reduction then we end

1399
01:07:50,579 --> 01:07:52,319
up with an algorithm that's in a secure

1400
01:07:52,319 --> 01:07:54,660
region of the problem P even for a

1401
01:07:54,660 --> 01:07:57,240
massively larger computational time

1402
01:07:57,240 --> 01:07:59,160
our work is motivated by this

1403
01:07:59,160 --> 01:08:02,940
observation and we aim to

1404
01:08:02,940 --> 01:08:03,660
um

1405
01:08:03,660 --> 01:08:05,760
give proofs that are tight with respect

1406
01:08:05,760 --> 01:08:08,520
to time advantage and memory

1407
01:08:08,520 --> 01:08:10,680
we refer to such proofs as stem type

1408
01:08:10,680 --> 01:08:12,599
proofs

1409
01:08:12,599 --> 01:08:15,119
we focus particularly on the time

1410
01:08:15,119 --> 01:08:16,738
tightness of public key encryption

1411
01:08:16,738 --> 01:08:19,319
schemes in the Camden paradigm

1412
01:08:19,319 --> 01:08:22,439
to recall to encrypt a message M with an

1413
01:08:22,439 --> 01:08:24,839
encryption key EK in the Camden Paradigm

1414
01:08:24,839 --> 01:08:28,380
we first run the chem to spit out a

1415
01:08:28,380 --> 01:08:32,160
symmetric key K and its encapsulation C1

1416
01:08:32,160 --> 01:08:34,859
we then use this symmetric key and the

1417
01:08:34,859 --> 01:08:36,839
Dem to encrypt the message M and get

1418
01:08:36,839 --> 01:08:40,020
ciphertext C2 the 2. C1 C2 is then

1419
01:08:40,020 --> 01:08:42,179
returned as the ciphy text

1420
01:08:42,179 --> 01:08:45,238
this construction can be analyzed as

1421
01:08:45,238 --> 01:08:47,160
three separate components

1422
01:08:47,160 --> 01:08:48,960
the first being the key encapsulation

1423
01:08:48,960 --> 01:08:50,580
mechanism

1424
01:08:50,580 --> 01:08:52,799
various key encapsulation mechanisms

1425
01:08:52,799 --> 01:08:54,899
were studied by bhattacharya in Asia

1426
01:08:54,899 --> 01:08:56,279
Crypt 2020

1427
01:08:56,279 --> 01:08:58,439
in the memory aware setting where they

1428
01:08:58,439 --> 01:09:01,140
give memory type groups for two flavors

1429
01:09:01,140 --> 01:09:04,439
of the hashtagamal camps and also for

1430
01:09:04,439 --> 01:09:06,479
fujizaki Fujisaki okomoto

1431
01:09:06,479 --> 01:09:08,460
Transformations which are used to

1432
01:09:08,460 --> 01:09:11,580
instantiate cans from PKA schemes

1433
01:09:11,580 --> 01:09:14,219
however these groups were in a single

1434
01:09:14,219 --> 01:09:17,339
challenge setting in our work we

1435
01:09:17,339 --> 01:09:20,279
aggregate the study of

1436
01:09:20,279 --> 01:09:22,259
CCA security of schemes in the

1437
01:09:22,259 --> 01:09:24,299
multi-challenge setting this is

1438
01:09:24,299 --> 01:09:26,460
motivated by the simple fact that

1439
01:09:26,460 --> 01:09:29,100
schemes get deployed across multiple

1440
01:09:29,100 --> 01:09:31,198
users each of whom use the scheme

1441
01:09:31,198 --> 01:09:34,080
multiple times and the expectation is

1442
01:09:34,080 --> 01:09:36,420
that the security does not degrade with

1443
01:09:36,420 --> 01:09:39,359
users or queries

1444
01:09:39,359 --> 01:09:41,100
the second component of this

1445
01:09:41,100 --> 01:09:42,839
construction is the symmetric key

1446
01:09:42,839 --> 01:09:45,359
encryption scheme or the Dem

1447
01:09:45,359 --> 01:09:47,939
o this has not yet been analyzed in the

1448
01:09:47,939 --> 01:09:49,979
light of memory tightness and remains to

1449
01:09:49,979 --> 01:09:52,198
be an interesting open question

1450
01:09:52,198 --> 01:09:54,540
for our work we focus on the public key

1451
01:09:54,540 --> 01:09:56,820
components of this construction and

1452
01:09:56,820 --> 01:09:58,160
assume that

1453
01:09:58,160 --> 01:10:00,360
asymmetric key encryption scheme of

1454
01:10:00,360 --> 01:10:03,480
sufficient security is available to us

1455
01:10:03,480 --> 01:10:05,880
the third and final component of this

1456
01:10:05,880 --> 01:10:07,800
construction is the composition in the

1457
01:10:07,800 --> 01:10:10,080
Camden Paradigm which was studied by

1458
01:10:10,080 --> 01:10:12,420
kosher Coastal J green tasero in Europe

1459
01:10:12,420 --> 01:10:13,980
2022.

1460
01:10:13,980 --> 01:10:15,719
where they use the message encoding

1461
01:10:15,719 --> 01:10:18,780
technique to term tightly proof the

1462
01:10:18,780 --> 01:10:20,580
security of pke schemes and such

1463
01:10:20,580 --> 01:10:23,699
constructions and reduce it to the CCA

1464
01:10:23,699 --> 01:10:26,940
security of the underlying components

1465
01:10:26,940 --> 01:10:31,679
however this reduction relies on the on

1466
01:10:31,679 --> 01:10:33,179
a specific instruction for the

1467
01:10:33,179 --> 01:10:36,300
underlying chem we extend this work and

1468
01:10:36,300 --> 01:10:38,340
give proofs for the composition which

1469
01:10:38,340 --> 01:10:42,120
are independent of the underlying chem

1470
01:10:42,120 --> 01:10:44,760
as we said earlier we Advocate the study

1471
01:10:44,760 --> 01:10:46,199
of schemes in the multi-challenge

1472
01:10:46,199 --> 01:10:47,219
setting

1473
01:10:47,219 --> 01:10:49,800
the extension of results from the single

1474
01:10:49,800 --> 01:10:51,420
challenge setting to the multi-challenge

1475
01:10:51,420 --> 01:10:53,820
setting is non-trivial

1476
01:10:53,820 --> 01:10:56,219
to see why let us consider CCA security

1477
01:10:56,219 --> 01:10:58,260
which is considered the gold standard in

1478
01:10:58,260 --> 01:11:01,199
concrete security analysis

1479
01:11:01,199 --> 01:11:03,719
here's the CCA security game for some

1480
01:11:03,719 --> 01:11:05,760
key encapsulation mechanism in the

1481
01:11:05,760 --> 01:11:07,440
random Oracle model

1482
01:11:07,440 --> 01:11:09,360
in a single challenge setting the

1483
01:11:09,360 --> 01:11:10,920
adversity is given access to three

1484
01:11:10,920 --> 01:11:14,940
oracles Inc DAC and O when they are when

1485
01:11:14,940 --> 01:11:17,460
the adversary queries The Encore she

1486
01:11:17,460 --> 01:11:19,800
gets back a special ciphertext keeper

1487
01:11:19,800 --> 01:11:22,020
that we refer to as the child and safety

1488
01:11:22,020 --> 01:11:23,820
X key pair

1489
01:11:23,820 --> 01:11:25,440
we call that in a single challenge

1490
01:11:25,440 --> 01:11:27,600
setting the adversary is only allowed to

1491
01:11:27,600 --> 01:11:29,640
query Inc once

1492
01:11:29,640 --> 01:11:31,980
subsequently when the adversary queries

1493
01:11:31,980 --> 01:11:34,020
deck on a cipher text

1494
01:11:34,020 --> 01:11:35,940
the deck article checks if this

1495
01:11:35,940 --> 01:11:37,800
ciphertext equals the child inside for

1496
01:11:37,800 --> 01:11:40,140
text and if so Returns the underlying

1497
01:11:40,140 --> 01:11:42,540
challenge key and otherwise this turns

1498
01:11:42,540 --> 01:11:44,880
on SD capsulations

1499
01:11:44,880 --> 01:11:48,480
to simulate to improve the security of

1500
01:11:48,480 --> 01:11:49,920
this game we need to write out a

1501
01:11:49,920 --> 01:11:52,260
reduction that simulates these oracles

1502
01:11:52,260 --> 01:11:55,440
for the adversary when we extend this to

1503
01:11:55,440 --> 01:11:57,540
the multi-chargement setting note that

1504
01:11:57,540 --> 01:11:59,100
there are multiple challenge ciphertext

1505
01:11:59,100 --> 01:12:02,300
Keepers this means that to accurately

1506
01:12:02,300 --> 01:12:05,040
simulate the deck Oracle

1507
01:12:05,040 --> 01:12:07,080
the reduction now needs to remember all

1508
01:12:07,080 --> 01:12:08,760
these challenge ciphertext key pairs

1509
01:12:08,760 --> 01:12:10,860
which inherently makes it not memory

1510
01:12:10,860 --> 01:12:11,880
tight

1511
01:12:11,880 --> 01:12:13,500
additionally

1512
01:12:13,500 --> 01:12:15,540
um the reduction also needs to identify

1513
01:12:15,540 --> 01:12:17,940
challenge secrets in a random Oracle

1514
01:12:17,940 --> 01:12:21,179
simulation we will shortly get to what

1515
01:12:21,179 --> 01:12:23,640
we mean by challenge secrets

1516
01:12:23,640 --> 01:12:26,280
finally the reduction needs to ensure

1517
01:12:26,280 --> 01:12:29,699
that the outputs from deck and O are

1518
01:12:29,699 --> 01:12:31,739
consistent

1519
01:12:31,739 --> 01:12:33,900
before we get into the technicalities of

1520
01:12:33,900 --> 01:12:35,520
fireproof techniques I would like to

1521
01:12:35,520 --> 01:12:37,500
highlight our contributions

1522
01:12:37,500 --> 01:12:40,260
first we give 10 type proofs for

1523
01:12:40,260 --> 01:12:43,320
augmented versions of various chems in

1524
01:12:43,320 --> 01:12:46,800
the multi-user multi-challenge setting

1525
01:12:46,800 --> 01:12:49,080
specifically we study variants of the

1526
01:12:49,080 --> 01:12:51,480
hashtag amalgia and reduce its security

1527
01:12:51,480 --> 01:12:54,060
time tightly to the CDH problem of the

1528
01:12:54,060 --> 01:12:55,739
underlying group

1529
01:12:55,739 --> 01:12:57,900
we also studied the Fujisaki okamoto

1530
01:12:57,900 --> 01:12:59,880
transformation and reduce the security

1531
01:12:59,880 --> 01:13:03,120
of these skills to the ncpa security of

1532
01:13:03,120 --> 01:13:06,320
the underlying public encryption scheme

1533
01:13:06,320 --> 01:13:09,300
for our proof of the ecies variant of

1534
01:13:09,300 --> 01:13:12,840
hashtagamal we use a new to introduce a

1535
01:13:12,840 --> 01:13:15,540
new CDH variant that we refer to as pair

1536
01:13:15,540 --> 01:13:16,920
CDH

1537
01:13:16,920 --> 01:13:18,480
finally

1538
01:13:18,480 --> 01:13:21,300
um we left our results for the camp the

1539
01:13:21,300 --> 01:13:24,540
time tightly prove the security of pke

1540
01:13:24,540 --> 01:13:28,140
schemes in the Camden paradigm

1541
01:13:28,140 --> 01:13:30,540
here I will briefly introduce hashtag

1542
01:13:30,540 --> 01:13:32,820
Americans because in the interest of

1543
01:13:32,820 --> 01:13:34,620
time for this talk we will only be

1544
01:13:34,620 --> 01:13:37,020
covering two variants of hashtag

1545
01:13:37,020 --> 01:13:40,380
amalgams and Associated proof techniques

1546
01:13:40,380 --> 01:13:41,880
here are the two versions we'll be

1547
01:13:41,880 --> 01:13:44,760
talking about today namely ecies and

1548
01:13:44,760 --> 01:13:46,800
Kramer shoe

1549
01:13:46,800 --> 01:13:49,620
as we can notice these schemes are very

1550
01:13:49,620 --> 01:13:51,420
similar in the turkey generation

1551
01:13:51,420 --> 01:13:53,219
algorithms are the same

1552
01:13:53,219 --> 01:13:56,100
poet schemes sample a uniformly random

1553
01:13:56,100 --> 01:13:58,140
group element and assign it as the

1554
01:13:58,140 --> 01:13:59,820
ciphertext Y

1555
01:13:59,820 --> 01:14:02,159
both schemes also compute a special

1556
01:14:02,159 --> 01:14:04,739
value that we refer to as the secret and

1557
01:14:04,739 --> 01:14:07,020
denote by Z which is computed as e k to

1558
01:14:07,020 --> 01:14:08,400
the Y

1559
01:14:08,400 --> 01:14:10,260
the difference between these two schemes

1560
01:14:10,260 --> 01:14:12,360
lies in how they derive the symmetric

1561
01:14:12,360 --> 01:14:13,800
encryption key

1562
01:14:13,800 --> 01:14:16,080
while ecis derives the symmetric

1563
01:14:16,080 --> 01:14:18,600
encryption key as the hash of the secret

1564
01:14:18,600 --> 01:14:21,020
Z

1565
01:14:21,440 --> 01:14:24,060
encryption key as the hash of both the

1566
01:14:24,060 --> 01:14:27,320
ciphertext and the secret scene

1567
01:14:27,320 --> 01:14:30,659
notice that the security of both these

1568
01:14:30,659 --> 01:14:33,179
schemes reduces to the adversary's

1569
01:14:33,179 --> 01:14:36,600
ability to query the random Oracle on

1570
01:14:36,600 --> 01:14:39,540
the secret Z this is a very CDH light

1571
01:14:39,540 --> 01:14:40,620
challenge

1572
01:14:40,620 --> 01:14:43,500
naturally we reduce the security of

1573
01:14:43,500 --> 01:14:45,600
these schemes to the CDH security of the

1574
01:14:45,600 --> 01:14:47,340
underlying group

1575
01:14:47,340 --> 01:14:50,100
if we recall in a CDH again the

1576
01:14:50,100 --> 01:14:52,980
reduction is given inputs X and Y and is

1577
01:14:52,980 --> 01:14:56,040
tasked with finding G to the X Y

1578
01:14:56,040 --> 01:14:57,960
in the multi-challenged version of this

1579
01:14:57,960 --> 01:15:00,719
game the reduction is given X and a set

1580
01:15:00,719 --> 01:15:03,420
of Y I's and wins the multi-challenge

1581
01:15:03,420 --> 01:15:05,280
version of the game if it outputs G to

1582
01:15:05,280 --> 01:15:08,699
the x y i for any y i

1583
01:15:08,699 --> 01:15:11,040
using diffie-halmanji randomization

1584
01:15:11,040 --> 01:15:13,920
techniques we are able to time tightly

1585
01:15:13,920 --> 01:15:15,960
prove that the multi-challenge version

1586
01:15:15,960 --> 01:15:17,760
is implied by the single challenge

1587
01:15:17,760 --> 01:15:20,120
version

1588
01:15:20,340 --> 01:15:22,260
let's go back to

1589
01:15:22,260 --> 01:15:26,880
the CCA security game for ecies again

1590
01:15:26,880 --> 01:15:29,040
our adversary is given access to three

1591
01:15:29,040 --> 01:15:31,679
oracles Inc Tech and age

1592
01:15:31,679 --> 01:15:33,719
when the adversary makes the ith query

1593
01:15:33,719 --> 01:15:36,480
to Inc she gets back the ielt challenge

1594
01:15:36,480 --> 01:15:40,500
ciphertext key pair yiki where Ki is

1595
01:15:40,500 --> 01:15:43,199
computed as the hash of the challenge

1596
01:15:43,199 --> 01:15:46,739
secret Z which is why I to the x

1597
01:15:46,739 --> 01:15:48,900
when she quarries deck on the ciphertext

1598
01:15:48,900 --> 01:15:52,199
why she gets back on SD capsulations and

1599
01:15:52,199 --> 01:15:54,120
on querying the hash Oracle on an input

1600
01:15:54,120 --> 01:15:56,280
C she gets back h of C

1601
01:15:56,280 --> 01:15:58,620
let us attempt to write out a reduction

1602
01:15:58,620 --> 01:16:00,900
for this game

1603
01:16:00,900 --> 01:16:03,120
if we recall a deduction gets his input

1604
01:16:03,120 --> 01:16:05,340
X in a set of Y eyes

1605
01:16:05,340 --> 01:16:07,800
to simulate the encapsulation key the

1606
01:16:07,800 --> 01:16:10,800
reduction simply returns its input X

1607
01:16:10,800 --> 01:16:13,500
to simulate the ielt Inc query the

1608
01:16:13,500 --> 01:16:16,080
reduction now returns its ith input y i

1609
01:16:16,080 --> 01:16:19,860
and simulates k i as H Prime of y i but

1610
01:16:19,860 --> 01:16:24,440
H Prime is some other random function

1611
01:16:24,500 --> 01:16:27,239
the reduction simply returns H Prime of

1612
01:16:27,239 --> 01:16:28,260
Y

1613
01:16:28,260 --> 01:16:31,320
and to simulate the random Oracle the

1614
01:16:31,320 --> 01:16:33,360
reduction can return a to z

1615
01:16:33,360 --> 01:16:35,340
if we recall the goals of a reduction

1616
01:16:35,340 --> 01:16:37,320
from earlier we see that in this

1617
01:16:37,320 --> 01:16:39,480
reduction we do not need to remember

1618
01:16:39,480 --> 01:16:42,420
challenge if we text Keepers anymore

1619
01:16:42,420 --> 01:16:45,600
however this reduction fails to identify

1620
01:16:45,600 --> 01:16:48,060
challenge secrets in the simulated

1621
01:16:48,060 --> 01:16:50,760
random Oracle and it also fails to

1622
01:16:50,760 --> 01:16:52,679
maintain consistency of outputs between

1623
01:16:52,679 --> 01:16:57,320
the simulated random Oracle and sim deck

1624
01:16:57,480 --> 01:17:00,600
a standard proof would approach these

1625
01:17:00,600 --> 01:17:03,900
challenges by reducing to a variant of

1626
01:17:03,900 --> 01:17:07,620
CDH that is called the strong CDH which

1627
01:17:07,620 --> 01:17:10,080
is the same as CDH except that the

1628
01:17:10,080 --> 01:17:13,620
reduction is also given Oracle axis

1629
01:17:13,620 --> 01:17:15,960
um to this Oracle straw which returns

1630
01:17:15,960 --> 01:17:20,100
true if x y z form a valid difficult and

1631
01:17:20,100 --> 01:17:22,520
Falls otherwise

1632
01:17:22,520 --> 01:17:26,340
now to identify challenge Secrets inside

1633
01:17:26,340 --> 01:17:29,940
Sim H the reduction invokes the strong

1634
01:17:29,940 --> 01:17:34,380
Oracle for all challenge cyphy texts if

1635
01:17:34,380 --> 01:17:37,739
strong of y i z holds for any y i the

1636
01:17:37,739 --> 01:17:39,960
reduction can output the corresponding Z

1637
01:17:39,960 --> 01:17:43,560
and win the underlying strong CDH game

1638
01:17:43,560 --> 01:17:46,080
notice that now the reduction needs to

1639
01:17:46,080 --> 01:17:48,179
invoke the strong Oracle for each

1640
01:17:48,179 --> 01:17:51,480
Challenge ciphertext on each Sim H query

1641
01:17:51,480 --> 01:17:53,820
that make this makes the reduction not

1642
01:17:53,820 --> 01:17:56,699
tight in terms of memory

1643
01:17:56,699 --> 01:17:58,679
now to maintain consistent outputs

1644
01:17:58,679 --> 01:18:01,980
between sim deck and Sim Age We maintain

1645
01:18:01,980 --> 01:18:05,940
tables that store queries to syndac and

1646
01:18:05,940 --> 01:18:08,460
Sim H now each time the adversary

1647
01:18:08,460 --> 01:18:11,400
queries sim deck on an input y the

1648
01:18:11,400 --> 01:18:13,500
reduction check if there was a previous

1649
01:18:13,500 --> 01:18:16,260
query to sim H that corresponds to this

1650
01:18:16,260 --> 01:18:17,640
input y

1651
01:18:17,640 --> 01:18:19,920
this is checked by invoking the strong

1652
01:18:19,920 --> 01:18:23,280
article again if strong of y z holds it

1653
01:18:23,280 --> 01:18:25,080
means that y corresponds to a previous

1654
01:18:25,080 --> 01:18:28,500
query C made this image and in that case

1655
01:18:28,500 --> 01:18:30,480
we return the same value that we

1656
01:18:30,480 --> 01:18:33,719
returned earlier from simh as h of C

1657
01:18:33,719 --> 01:18:36,659
a similar check is also performed inside

1658
01:18:36,659 --> 01:18:38,100
of simh

1659
01:18:38,100 --> 01:18:40,080
now we're able to maintain consistent

1660
01:18:40,080 --> 01:18:42,960
outputs between these two oracles

1661
01:18:42,960 --> 01:18:44,520
we don't change the construction of

1662
01:18:44,520 --> 01:18:46,880
cement

1663
01:18:47,100 --> 01:18:49,500
a vehicle the cause of a reduction again

1664
01:18:49,500 --> 01:18:52,560
we see that this standard proof allows

1665
01:18:52,560 --> 01:18:54,840
us to attain all goals that we outlined

1666
01:18:54,840 --> 01:18:56,060
earlier

1667
01:18:56,060 --> 01:18:59,340
unfortunately this reduction is not time

1668
01:18:59,340 --> 01:19:01,860
or memory type

1669
01:19:01,860 --> 01:19:04,739
but ataria presented an improvement to

1670
01:19:04,739 --> 01:19:08,040
this standard proof in Asia Crypt 2020

1671
01:19:08,040 --> 01:19:10,380
and they call this technique mapped in

1672
01:19:10,380 --> 01:19:11,760
hash

1673
01:19:11,760 --> 01:19:14,340
this technique assumes the existence of

1674
01:19:14,340 --> 01:19:16,080
efficient pairings in the underlying

1675
01:19:16,080 --> 01:19:17,699
group

1676
01:19:17,699 --> 01:19:21,420
in this technique inside Sim H We Now

1677
01:19:21,420 --> 01:19:23,520
respond to Hash queries by first

1678
01:19:23,520 --> 01:19:25,800
applying a pairing to the input C and

1679
01:19:25,800 --> 01:19:27,719
the generator of the group G

1680
01:19:27,719 --> 01:19:31,199
we then output the hash of this value

1681
01:19:31,199 --> 01:19:33,719
notice that this is the same as directly

1682
01:19:33,719 --> 01:19:35,820
Computing the hash because the

1683
01:19:35,820 --> 01:19:38,159
composition of an injection and a random

1684
01:19:38,159 --> 01:19:41,520
function is a random function

1685
01:19:41,520 --> 01:19:43,980
to maintain consistency between all

1686
01:19:43,980 --> 01:19:47,820
oracles inside Sim Inc and sim deck we

1687
01:19:47,820 --> 01:19:50,580
Define H Prime as H applied to the pair

1688
01:19:50,580 --> 01:19:52,140
of X and Y

1689
01:19:52,140 --> 01:19:53,880
this allows us to maintain perfect

1690
01:19:53,880 --> 01:19:56,040
consistency between H Prime and H

1691
01:19:56,040 --> 01:20:00,239
because pair of X Y equals para g z if

1692
01:20:00,239 --> 01:20:03,480
and only if strong of y z holes so if

1693
01:20:03,480 --> 01:20:05,219
we're able to maintain consistency for

1694
01:20:05,219 --> 01:20:07,140
free by Computing the hash in such a

1695
01:20:07,140 --> 01:20:09,000
backdoid manner

1696
01:20:09,000 --> 01:20:11,159
however the reduction still needs to

1697
01:20:11,159 --> 01:20:13,320
check against each child in ciphertext

1698
01:20:13,320 --> 01:20:15,900
to identify challenge Secrets within the

1699
01:20:15,900 --> 01:20:18,780
same age this makes a reduction not

1700
01:20:18,780 --> 01:20:21,000
tight in terms of time

1701
01:20:21,000 --> 01:20:23,940
also this reduction assumes the

1702
01:20:23,940 --> 01:20:26,219
existence of efficient pairings in the

1703
01:20:26,219 --> 01:20:27,540
underlying group

1704
01:20:27,540 --> 01:20:31,560
and such groups are slower in practice

1705
01:20:31,560 --> 01:20:34,380
in our work we give techniques that

1706
01:20:34,380 --> 01:20:37,699
avoid both these challenges

1707
01:20:38,100 --> 01:20:40,500
first we address how we can avoid

1708
01:20:40,500 --> 01:20:42,540
checking against each challenge Cipher

1709
01:20:42,540 --> 01:20:45,719
text in Sim age for this we augment the

1710
01:20:45,719 --> 01:20:48,719
scheme with uniformly random strings

1711
01:20:48,719 --> 01:20:51,000
these uniformly random strings are now

1712
01:20:51,000 --> 01:20:53,940
included as part of each ciphertext and

1713
01:20:53,940 --> 01:20:57,000
also as part of each hash query

1714
01:20:57,000 --> 01:20:59,100
we can then use the message encoding

1715
01:20:59,100 --> 01:21:03,000
technique of ggjt in the proof

1716
01:21:03,000 --> 01:21:04,560
to do this

1717
01:21:04,560 --> 01:21:07,980
we program the random string a for the

1718
01:21:07,980 --> 01:21:11,940
ith Inc query as an encoding of I

1719
01:21:11,940 --> 01:21:16,739
now in Sim H we can decode a to obtain I

1720
01:21:16,739 --> 01:21:19,020
and instead of checking against each

1721
01:21:19,020 --> 01:21:20,940
challenge ciphertext we only check

1722
01:21:20,940 --> 01:21:23,100
Against One Challenge Cipher text

1723
01:21:23,100 --> 01:21:25,980
this year is a Time type proof in the

1724
01:21:25,980 --> 01:21:28,020
multi-challenge setting but still

1725
01:21:28,020 --> 01:21:29,880
assumes the existence of an efficient

1726
01:21:29,880 --> 01:21:33,140
pairing in the underlying group

1727
01:21:33,659 --> 01:21:35,820
it's interesting to note that the

1728
01:21:35,820 --> 01:21:37,980
pairing is only used in a security proof

1729
01:21:37,980 --> 01:21:40,800
and is never really used in the actual

1730
01:21:40,800 --> 01:21:42,800
construction of the protocol

1731
01:21:42,800 --> 01:21:47,100
this motivated us to define a new

1732
01:21:47,100 --> 01:21:50,820
variant of CDH which we call very CDH it

1733
01:21:50,820 --> 01:21:53,460
is quite similar to CDH except that it

1734
01:21:53,460 --> 01:21:56,100
also gives the reduction Oracle access

1735
01:21:56,100 --> 01:21:59,340
to a pairing to a random group

1736
01:21:59,340 --> 01:22:03,300
for um a kind of Sanity check we prove

1737
01:22:03,300 --> 01:22:05,880
that per CDH is secure in the algebraic

1738
01:22:05,880 --> 01:22:08,360
and generic group models

1739
01:22:08,360 --> 01:22:12,900
the study of the security of pair CDH is

1740
01:22:12,900 --> 01:22:15,840
also an interesting future work

1741
01:22:15,840 --> 01:22:17,780
foreign

1742
01:22:17,780 --> 01:22:20,580
ly in this talk we have only addressed

1743
01:22:20,580 --> 01:22:22,860
the multi-challenge setting

1744
01:22:22,860 --> 01:22:25,020
to extend our work to the multi-user

1745
01:22:25,020 --> 01:22:28,739
setting m is a fairly easy

1746
01:22:28,739 --> 01:22:31,620
extension we can now program the random

1747
01:22:31,620 --> 01:22:33,960
string a i as an encoding of both the

1748
01:22:33,960 --> 01:22:35,880
user identifier and the challenge

1749
01:22:35,880 --> 01:22:38,640
counter instead of it being the encoding

1750
01:22:38,640 --> 01:22:40,920
of just the challenge counter

1751
01:22:40,920 --> 01:22:43,320
with that we move on to the next scheme

1752
01:22:43,320 --> 01:22:45,960
Kramer shoe which as we discussed is

1753
01:22:45,960 --> 01:22:49,260
super similar to ecies except in a way

1754
01:22:49,260 --> 01:22:51,600
that it derives the symmetric encryption

1755
01:22:51,600 --> 01:22:53,239
key

1756
01:22:53,239 --> 01:22:55,679
it derives the symmetric encryption key

1757
01:22:55,679 --> 01:22:57,840
as the hash of both the challenge selfie

1758
01:22:57,840 --> 01:23:00,260
text and the challenge Secret

1759
01:23:00,260 --> 01:23:02,640
unsurprisingly we start motivating all

1760
01:23:02,640 --> 01:23:05,760
proof comparably to ecies we start with

1761
01:23:05,760 --> 01:23:07,500
the same incorrect reduction which is

1762
01:23:07,500 --> 01:23:09,300
unable to maintain consistency between

1763
01:23:09,300 --> 01:23:11,699
deck and Edge and is also unable to

1764
01:23:11,699 --> 01:23:14,159
identify challenge Secrets inside this

1765
01:23:14,159 --> 01:23:16,519
image

1766
01:23:16,620 --> 01:23:18,780
the standard proof again is almost

1767
01:23:18,780 --> 01:23:21,179
exactly similar to that we discussed for

1768
01:23:21,179 --> 01:23:24,360
ecies and unfortunately again this is

1769
01:23:24,360 --> 01:23:26,219
neither term type this is neither time

1770
01:23:26,219 --> 01:23:28,940
nor memory type

1771
01:23:28,940 --> 01:23:31,020
again we are able to apply

1772
01:23:31,020 --> 01:23:33,060
bhattacharya's mapped in hash technique

1773
01:23:33,060 --> 01:23:34,140
here

1774
01:23:34,140 --> 01:23:36,239
it's nice to note that we no longer

1775
01:23:36,239 --> 01:23:38,159
require efficient pairings in the

1776
01:23:38,159 --> 01:23:40,800
underlying group because Sim H receives

1777
01:23:40,800 --> 01:23:43,679
this input both y and z

1778
01:23:43,679 --> 01:23:46,800
and we Define our injection now such

1779
01:23:46,800 --> 01:23:50,340
that h of y z is computed as h of Y in a

1780
01:23:50,340 --> 01:23:53,100
special symbol star if strong of y z

1781
01:23:53,100 --> 01:23:56,100
holds and is computed as a h of y z

1782
01:23:56,100 --> 01:23:57,480
otherwise

1783
01:23:57,480 --> 01:23:59,940
again the composition of this injection

1784
01:23:59,940 --> 01:24:02,820
and random function yields a random

1785
01:24:02,820 --> 01:24:03,840
function

1786
01:24:03,840 --> 01:24:06,380
foreign

1787
01:24:06,380 --> 01:24:09,300
still needs to check against each sci-fi

1788
01:24:09,300 --> 01:24:12,239
text to be able to identify challenge

1789
01:24:12,239 --> 01:24:14,580
Secrets within same age and this makes

1790
01:24:14,580 --> 01:24:17,900
it not time tied

1791
01:24:18,480 --> 01:24:21,020
the same augmentation as before

1792
01:24:21,020 --> 01:24:24,420
yields us a term type proof in the multi

1793
01:24:24,420 --> 01:24:26,040
challenge setting

1794
01:24:26,040 --> 01:24:28,320
the difference lies in the fact that now

1795
01:24:28,320 --> 01:24:31,260
extension to the multi-user setting does

1796
01:24:31,260 --> 01:24:33,120
not come from programming the random

1797
01:24:33,120 --> 01:24:35,219
string as an encoding of both the user

1798
01:24:35,219 --> 01:24:37,679
identifier and the challenge counter

1799
01:24:37,679 --> 01:24:40,560
instead we need the doubly augment our

1800
01:24:40,560 --> 01:24:41,520
scheme

1801
01:24:41,520 --> 01:24:44,040
we also augment the encapsulation key

1802
01:24:44,040 --> 01:24:47,219
with a random string Alpha and included

1803
01:24:47,219 --> 01:24:49,560
in all hash queries

1804
01:24:49,560 --> 01:24:52,560
in the proof we can program alpha or the

1805
01:24:52,560 --> 01:24:55,560
per user random string as an encoding of

1806
01:24:55,560 --> 01:24:58,860
view and we can program a I or the word

1807
01:24:58,860 --> 01:25:00,659
ciphertext

1808
01:25:00,659 --> 01:25:03,900
random string as an encoding of I

1809
01:25:03,900 --> 01:25:05,460
with that

1810
01:25:05,460 --> 01:25:06,300
um

1811
01:25:06,300 --> 01:25:09,199
I would like to conclude the talk by

1812
01:25:09,199 --> 01:25:11,400
recapturing our contributions in this

1813
01:25:11,400 --> 01:25:13,260
work and highlighting the proofs that we

1814
01:25:13,260 --> 01:25:14,820
discussed today

1815
01:25:14,820 --> 01:25:17,219
and that's it thank you I'm happy to

1816
01:25:17,219 --> 01:25:18,020
take any questions

1817
01:25:18,020 --> 01:25:19,260
[Music]

1818
01:25:19,260 --> 01:25:22,479
[Applause]

1819
01:25:25,140 --> 01:25:27,360
thanks a lot for your talk does anybody

1820
01:25:27,360 --> 01:25:29,960
have any questions

1821
01:25:32,340 --> 01:25:35,760
um hi I I have a stupid question so you

1822
01:25:35,760 --> 01:25:40,560
said you have a memory tied and time and

1823
01:25:40,560 --> 01:25:42,600
memory tie the reduction from a single

1824
01:25:42,600 --> 01:25:44,340
Chinese strong development to the

1825
01:25:44,340 --> 01:25:47,460
multichoice to Australia helmet

1826
01:25:47,460 --> 01:25:51,060
but I just confused um for the in the

1827
01:25:51,060 --> 01:25:52,739
multi-children The Strand development

1828
01:25:52,739 --> 01:25:54,060
the

1829
01:25:54,060 --> 01:25:57,000
it would take UNS and pieces of memory

1830
01:25:57,000 --> 01:26:01,260
right how can it be tight memory tight

1831
01:26:01,260 --> 01:26:03,120
because it extend a single challenge to

1832
01:26:03,120 --> 01:26:05,340
multi-charge a multi-change will takes

1833
01:26:05,340 --> 01:26:07,260
more memory

1834
01:26:07,260 --> 01:26:08,639
right

1835
01:26:08,639 --> 01:26:10,440
um

1836
01:26:10,440 --> 01:26:13,620
so the idea is to use re-randomization

1837
01:26:13,620 --> 01:26:17,760
that allows us to capture exactly what

1838
01:26:17,760 --> 01:26:22,139
challenge y i the adversary is trying to

1839
01:26:22,139 --> 01:26:25,380
give back queries to so that we don't

1840
01:26:25,380 --> 01:26:28,139
need a table of sorts to store all

1841
01:26:28,139 --> 01:26:29,940
challenge ciphertexts the reduction

1842
01:26:29,940 --> 01:26:34,638
already has it oh okay thank you foreign

1843
01:26:36,920 --> 01:26:39,600
thanks for the nice talk I was a bit

1844
01:26:39,600 --> 01:26:42,360
confused you give an encryption Oracle

1845
01:26:42,360 --> 01:26:44,760
to a public key primitive

1846
01:26:44,760 --> 01:26:46,739
so usually I mean the adversary knows

1847
01:26:46,739 --> 01:26:48,960
the public key so they can just encrypt

1848
01:26:48,960 --> 01:26:51,000
themselves

1849
01:26:51,000 --> 01:26:53,460
and it seems a bit as if this is crucial

1850
01:26:53,460 --> 01:26:57,600
to embed the message encoding

1851
01:26:57,600 --> 01:27:01,080
um I think that extends from the

1852
01:27:01,080 --> 01:27:04,199
standard CCA game where the adversity is

1853
01:27:04,199 --> 01:27:08,040
given a real random choice of a real or

1854
01:27:08,040 --> 01:27:09,840
random ciphertext that needs to identify

1855
01:27:09,840 --> 01:27:12,239
which one of those it's playing

1856
01:27:12,239 --> 01:27:14,940
so it it still receives a cipher text

1857
01:27:14,940 --> 01:27:17,219
which is what we capture using the

1858
01:27:17,219 --> 01:27:20,400
encorkle so that is the challenge Oracle

1859
01:27:20,400 --> 01:27:22,879
yeah yeah

1860
01:27:26,760 --> 01:27:30,199
uh great are there

1861
01:27:31,260 --> 01:27:32,760
thanks for the talk

1862
01:27:32,760 --> 01:27:34,380
um I was wondering so did I understand

1863
01:27:34,380 --> 01:27:36,239
it correctly that in order to give these

1864
01:27:36,239 --> 01:27:38,639
time type reductions you augmented the

1865
01:27:38,639 --> 01:27:40,920
scheme slightly yes yes if you have a

1866
01:27:40,920 --> 01:27:43,139
feeling for if it would be possible to

1867
01:27:43,139 --> 01:27:45,060
give thumb tight reductions for the

1868
01:27:45,060 --> 01:27:47,699
non-augmented schemes or

1869
01:27:47,699 --> 01:27:49,679
um no no we were not able to give them

1870
01:27:49,679 --> 01:27:51,900
type proofs for the non-augmented

1871
01:27:51,900 --> 01:27:53,940
schemes an interesting result for

1872
01:27:53,940 --> 01:27:56,880
non-augmented schemes is that we can

1873
01:27:56,880 --> 01:28:00,300
pick and choose any two out of Tam so we

1874
01:28:00,300 --> 01:28:02,400
can either have a time and Advantage

1875
01:28:02,400 --> 01:28:05,040
type or advantage in memory type or time

1876
01:28:05,040 --> 01:28:07,139
and memory type but we cannot have all

1877
01:28:07,139 --> 01:28:08,940
three unless we augment the scheme

1878
01:28:08,940 --> 01:28:11,900
thanks

1879
01:28:12,320 --> 01:28:14,580
awesome uh thanks a lot are there any

1880
01:28:14,580 --> 01:28:17,059
other questions

1881
01:28:18,480 --> 01:28:21,720
if not let's think xia again and uh

1882
01:28:21,720 --> 01:28:24,859
[Applause]

1883
01:28:26,159 --> 01:28:28,020
that concludes the session thank you all

1884
01:28:28,020 --> 01:28:30,380
for coming

1885
01:28:32,400 --> 01:28:35,059
foreign

