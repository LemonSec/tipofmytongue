1
00:00:00,480 --> 00:00:02,520
hi I'm Yash and this is the

2
00:00:02,520 --> 00:00:04,140
advertisement for my talk on improved

3
00:00:04,140 --> 00:00:05,400
straight and extraction in the random

4
00:00:05,400 --> 00:00:06,960
molecule model with applications to

5
00:00:06,960 --> 00:00:08,400
Signature application

6
00:00:08,400 --> 00:00:11,040
this is a joint work with abhishalat

7
00:00:11,040 --> 00:00:12,599
so the call that is Sigma protocol

8
00:00:12,599 --> 00:00:14,700
consists of a commitment a challenge and

9
00:00:14,700 --> 00:00:16,079
a response that's exchanged between

10
00:00:16,079 --> 00:00:19,320
approver and a verifier the chme

11
00:00:19,320 --> 00:00:21,060
transformation gives a simple way to

12
00:00:21,060 --> 00:00:22,800
compile a sigma protocol to a

13
00:00:22,800 --> 00:00:24,660
non-interactive roof with the suitably

14
00:00:24,660 --> 00:00:27,119
chosen hash function intuitively the

15
00:00:27,119 --> 00:00:29,160
bluebird simply hashes the statement

16
00:00:29,160 --> 00:00:30,720
along with its first message to replace

17
00:00:30,720 --> 00:00:32,899
the verifiers challenge

18
00:00:32,899 --> 00:00:35,399
the security of the Vietnamese

19
00:00:35,399 --> 00:00:37,559
transformation is proven in the land of

20
00:00:37,559 --> 00:00:39,899
molecule model with a so-called forking

21
00:00:39,899 --> 00:00:42,480
strategy which involves running the

22
00:00:42,480 --> 00:00:45,239
approver twice and choosing the random

23
00:00:45,239 --> 00:00:47,460
point in its queries to the random

24
00:00:47,460 --> 00:00:50,280
molecule to work its execution in some

25
00:00:50,280 --> 00:00:52,379
sense

26
00:00:52,379 --> 00:00:54,780
the feature me transform has a number of

27
00:00:54,780 --> 00:00:57,480
advantages it is simple to describe and

28
00:00:57,480 --> 00:00:59,520
Implement and it's also very efficient

29
00:00:59,520 --> 00:01:01,800
it costs roughly the same as the input

30
00:01:01,800 --> 00:01:04,199
Sigma protocol to proven modify on the

31
00:01:04,199 --> 00:01:06,060
other hand the working strategy that I

32
00:01:06,060 --> 00:01:07,619
just showed doesn't compose and it's

33
00:01:07,619 --> 00:01:08,760
unclear how to prove the current

34
00:01:08,760 --> 00:01:10,920
security when using the pH me transform

35
00:01:10,920 --> 00:01:12,960
and also there's this quadratic security

36
00:01:12,960 --> 00:01:14,700
loss that comes from having to run the

37
00:01:14,700 --> 00:01:17,100
proof or twice

38
00:01:17,100 --> 00:01:19,080
State Line exception on the other hand

39
00:01:19,080 --> 00:01:20,700
which was formalized by past in the

40
00:01:20,700 --> 00:01:22,500
random multiple model involves running

41
00:01:22,500 --> 00:01:24,240
approval just once and having the

42
00:01:24,240 --> 00:01:26,159
extractor simply read the queries to the

43
00:01:26,159 --> 00:01:28,020
random article to deduce the witness to

44
00:01:28,020 --> 00:01:29,580
the statement

45
00:01:29,580 --> 00:01:32,880
and pass showed that this this sort of

46
00:01:32,880 --> 00:01:35,100
extraction strategy is available to

47
00:01:35,100 --> 00:01:36,900
concurrent composition and in the same

48
00:01:36,900 --> 00:01:38,520
paper he gave a simple cotton juice

49
00:01:38,520 --> 00:01:40,380
construction to achieve straight and

50
00:01:40,380 --> 00:01:42,140
extraction

51
00:01:42,140 --> 00:01:44,880
especially in a subsequent work gave a

52
00:01:44,880 --> 00:01:46,439
state an extractable compiler that

53
00:01:46,439 --> 00:01:48,299
avoided the cut and choose Logistics of

54
00:01:48,299 --> 00:01:50,759
pass through a clever proof of work that

55
00:01:50,759 --> 00:01:53,220
idea intuitively the plural sends over

56
00:01:53,220 --> 00:01:55,680
transcripts of the form aec to the

57
00:01:55,680 --> 00:01:59,399
verifier such that the transcript hashed

58
00:01:59,399 --> 00:02:01,380
the all zero string again for the

59
00:02:01,380 --> 00:02:04,460
suitably chosen hash function

60
00:02:04,560 --> 00:02:06,719
in this work we explore two dimensions

61
00:02:06,719 --> 00:02:08,758
of questions compiler that's computation

62
00:02:08,758 --> 00:02:11,220
cost and its applicability in particular

63
00:02:11,220 --> 00:02:13,200
the computation costs ends up being the

64
00:02:13,200 --> 00:02:14,160
bottleneck and the number of

65
00:02:14,160 --> 00:02:15,959
applications and so we ask if we can

66
00:02:15,959 --> 00:02:18,379
improve on it in terms of applicability

67
00:02:18,379 --> 00:02:21,599
question only proved that his compiler

68
00:02:21,599 --> 00:02:23,340
applies to it is a restricted class of

69
00:02:23,340 --> 00:02:25,440
segment protocols that satisfy a notion

70
00:02:25,440 --> 00:02:27,540
of Quasi unique responses and this

71
00:02:27,540 --> 00:02:29,640
doesn't for example include The Logical

72
00:02:29,640 --> 00:02:32,340
all composition Sigma protocol or

73
00:02:32,340 --> 00:02:34,260
Peterson's a proof of knowledge of

74
00:02:34,260 --> 00:02:36,780
appearance and commitment and so forth

75
00:02:36,780 --> 00:02:39,480
delicious folklore that Christian's

76
00:02:39,480 --> 00:02:41,160
transform works right away anyway and

77
00:02:41,160 --> 00:02:42,660
it's just a matter of writing down the

78
00:02:42,660 --> 00:02:46,019
proof and we explore this in our work

79
00:02:46,019 --> 00:02:48,319
so to begin with we give a lower bound

80
00:02:48,319 --> 00:02:50,400
that explains the lack of progress

81
00:02:50,400 --> 00:02:52,200
especially into original work showing

82
00:02:52,200 --> 00:02:53,519
that fresh lens

83
00:02:53,519 --> 00:02:55,379
protocol is optimal up to a small

84
00:02:55,379 --> 00:02:57,660
constant in terms of computation

85
00:02:57,660 --> 00:02:59,640
but on the other hand we do show that

86
00:02:59,640 --> 00:03:01,620
application specific optimization is

87
00:03:01,620 --> 00:03:04,080
possible in particular we show up to a

88
00:03:04,080 --> 00:03:05,760
factor 200 Improvement for the

89
00:03:05,760 --> 00:03:07,440
application of fdsa signature

90
00:03:07,440 --> 00:03:09,300
application

91
00:03:09,300 --> 00:03:11,580
Anita and with regards to applicability

92
00:03:11,580 --> 00:03:13,560
we show that the folklore is actually

93
00:03:13,560 --> 00:03:14,760
wrong

94
00:03:14,760 --> 00:03:17,640
we give a new attack on witness and

95
00:03:17,640 --> 00:03:19,260
distinguishability officials transform

96
00:03:19,260 --> 00:03:21,659
in certain contexts and we show that

97
00:03:21,659 --> 00:03:23,580
this attack can be fixed by a simple

98
00:03:23,580 --> 00:03:26,099
randomization mechanism

99
00:03:26,099 --> 00:03:28,739
so I hope to see you at the talk and you

100
00:03:28,739 --> 00:03:31,920
can also find our work online or people

101
00:03:31,920 --> 00:03:35,540
into this link thanks

