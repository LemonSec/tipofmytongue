1
00:00:00,179 --> 00:00:02,220
hello everyone welcome to the short

2
00:00:02,220 --> 00:00:04,500
video abstract on the paper privacy

3
00:00:04,500 --> 00:00:07,020
preserving authenticated key change in

4
00:00:07,020 --> 00:00:09,660
the standard model M yulu from Shanghai

5
00:00:09,660 --> 00:00:12,660
University this is a joint work with

6
00:00:12,660 --> 00:00:16,139
shanglilu treyha and taugu

7
00:00:16,139 --> 00:00:18,359
we recall the authenticated case change

8
00:00:18,359 --> 00:00:21,060
first AKA allows two parties to

9
00:00:21,060 --> 00:00:23,220
authenticate each other and securely

10
00:00:23,220 --> 00:00:25,680
share a session key it has been widely

11
00:00:25,680 --> 00:00:27,539
used in data sharing electronic

12
00:00:27,539 --> 00:00:29,279
notebooks

13
00:00:29,279 --> 00:00:32,040
in some cases the interacting parties

14
00:00:32,040 --> 00:00:34,500
may want their identities kept secret

15
00:00:34,500 --> 00:00:37,500
from others however their transcripts

16
00:00:37,500 --> 00:00:39,239
sent in the channel may contain

17
00:00:39,239 --> 00:00:42,059
information about their identities thus

18
00:00:42,059 --> 00:00:45,360
the concept of privacy preserving ake is

19
00:00:45,360 --> 00:00:48,480
proposed it requires anonymity which

20
00:00:48,480 --> 00:00:51,239
means the adversary cannot identify the

21
00:00:51,239 --> 00:00:53,820
users who are communicating

22
00:00:53,820 --> 00:00:56,579
most ake protes are not privacy

23
00:00:56,579 --> 00:00:59,280
preserving for example the well-known

24
00:00:59,280 --> 00:01:03,600
signed DH protocol is not ppak inside DH

25
00:01:03,600 --> 00:01:06,540
each party uses a different human key

26
00:01:06,540 --> 00:01:09,240
exchange to agree on key and use its

27
00:01:09,240 --> 00:01:11,640
signatures to authenticate each other

28
00:01:11,640 --> 00:01:14,100
the signature elix the identity of both

29
00:01:14,100 --> 00:01:17,100
initiator and responder

30
00:01:17,100 --> 00:01:18,860
to solve this problem

31
00:01:18,860 --> 00:01:21,900
ssl20 proposed a way to protect the

32
00:01:21,900 --> 00:01:24,659
identity of users with ppake

33
00:01:24,659 --> 00:01:27,360
it considers the server to server

34
00:01:27,360 --> 00:01:28,500
scenario

35
00:01:28,500 --> 00:01:31,020
both the initiator and responder are

36
00:01:31,020 --> 00:01:33,420
agent servers and behind each agent

37
00:01:33,420 --> 00:01:36,240
server there says many users

38
00:01:36,240 --> 00:01:38,700
the adversary controls the server to

39
00:01:38,700 --> 00:01:40,979
server Channel but does not control the

40
00:01:40,979 --> 00:01:44,640
user to server Channel anonymity in this

41
00:01:44,640 --> 00:01:46,920
scenario requires the adversary cannot

42
00:01:46,920 --> 00:01:49,259
distinguish which user says behind the

43
00:01:49,259 --> 00:01:50,640
agent server

44
00:01:50,640 --> 00:01:53,520
however their approach cannot apply to

45
00:01:53,520 --> 00:01:56,159
the user to user scenario

46
00:01:56,159 --> 00:01:59,100
hence a question is how to design a PPA

47
00:01:59,100 --> 00:02:01,200
ke protocol for the user to user

48
00:02:01,200 --> 00:02:02,880
scenario

49
00:02:02,880 --> 00:02:05,640
in the user to user scenario there are

50
00:02:05,640 --> 00:02:08,340
no agent servers we also consider the

51
00:02:08,340 --> 00:02:10,679
broadcast channel just like the scenario

52
00:02:10,679 --> 00:02:13,200
of Bluetooth wireless and Apple's

53
00:02:13,200 --> 00:02:16,080
airdrop the adversary can see the

54
00:02:16,080 --> 00:02:19,500
message and you in the broadcast channel

55
00:02:19,500 --> 00:02:22,500
the key idea of our construction is to

56
00:02:22,500 --> 00:02:26,099
make PPA ke robust we see a PPA ke

57
00:02:26,099 --> 00:02:28,739
protocol is robust if each user can make

58
00:02:28,739 --> 00:02:30,959
sure that the first run message is for

59
00:02:30,959 --> 00:02:32,520
him or her

60
00:02:32,520 --> 00:02:35,160
with robustness the communication and

61
00:02:35,160 --> 00:02:38,459
computation complexity can be reduced

62
00:02:38,459 --> 00:02:41,459
we propose a generic construction from a

63
00:02:41,459 --> 00:02:44,819
signature scan a cam a Mac and symmetric

64
00:02:44,819 --> 00:02:46,379
encryption

65
00:02:46,379 --> 00:02:49,319
in particular we require the cam for two

66
00:02:49,319 --> 00:02:52,620
more properties one is anonymity the

67
00:02:52,620 --> 00:02:54,239
other is robustness

68
00:02:54,239 --> 00:02:57,000
anonymity for cam means given a server

69
00:02:57,000 --> 00:02:59,940
test C and two public Keys the adversary

70
00:02:59,940 --> 00:03:02,459
cannot determine the server test is

71
00:03:02,459 --> 00:03:05,160
generated by which public key

72
00:03:05,160 --> 00:03:07,620
robustness forecast means if a software

73
00:03:07,620 --> 00:03:10,200
test is generated by one public key then

74
00:03:10,200 --> 00:03:12,659
using another secret key to decrypt it

75
00:03:12,659 --> 00:03:14,519
with output failure

76
00:03:14,519 --> 00:03:18,060
here is our construction suppose user UI

77
00:03:18,060 --> 00:03:19,980
is the initiator and its Target

78
00:03:19,980 --> 00:03:23,400
recipients is user ug2 it will first

79
00:03:23,400 --> 00:03:26,640
encrypt a key K1 using the public key of

80
00:03:26,640 --> 00:03:29,819
ug2 then it will broadcast G to the

81
00:03:29,819 --> 00:03:33,000
power of a and the server test C

82
00:03:33,000 --> 00:03:35,700
after receiving the first message each

83
00:03:35,700 --> 00:03:37,980
user tries to decrypt the server test C

84
00:03:37,980 --> 00:03:40,440
using its own secret key

85
00:03:40,440 --> 00:03:43,980
only user ug2 will get keyword other

86
00:03:43,980 --> 00:03:46,260
users will get a failure due to the

87
00:03:46,260 --> 00:03:48,239
robustness of Cam

88
00:03:48,239 --> 00:03:50,819
next user ug2 computes a different

89
00:03:50,819 --> 00:03:53,220
element key and uses keyword to also

90
00:03:53,220 --> 00:03:55,260
indicate the message it receives and the

91
00:03:55,260 --> 00:03:57,060
message it sends

92
00:03:57,060 --> 00:03:59,280
the other users will keep silence during

93
00:03:59,280 --> 00:04:01,379
the process since they are not the

94
00:04:01,379 --> 00:04:03,239
target recipient

95
00:04:03,239 --> 00:04:05,700
so in the third round user UI computes

96
00:04:05,700 --> 00:04:07,560
the same different element key and uses

97
00:04:07,560 --> 00:04:10,680
K2 to encrypt its signature finally they

98
00:04:10,680 --> 00:04:13,140
share the same session key K3

99
00:04:13,140 --> 00:04:16,380
now we discussed the anonymity of our

100
00:04:16,380 --> 00:04:17,579
Construction

101
00:04:17,579 --> 00:04:19,858
the initiator's identity is only

102
00:04:19,858 --> 00:04:21,540
contained in the third round message

103
00:04:21,540 --> 00:04:24,479
this message is encrypted by the default

104
00:04:24,479 --> 00:04:27,300
Helmet Key so it is protected well

105
00:04:27,300 --> 00:04:29,340
the responder's identity is only

106
00:04:29,340 --> 00:04:31,979
contained in the first run message due

107
00:04:31,979 --> 00:04:34,440
to the anonymity of Cam the adversary

108
00:04:34,440 --> 00:04:36,780
cannot know the server test C is

109
00:04:36,780 --> 00:04:39,120
encrypted by which public key

110
00:04:39,120 --> 00:04:41,699
at last we compile our work with other

111
00:04:41,699 --> 00:04:44,400
related works as drawing the table the

112
00:04:44,400 --> 00:04:46,320
communication and commutation complexity

113
00:04:46,320 --> 00:04:48,720
are independent of number of users due

114
00:04:48,720 --> 00:04:50,220
to the robustness

115
00:04:50,220 --> 00:04:53,100
to conclude we propose our PBA ke scheme

116
00:04:53,100 --> 00:04:55,380
especially for the broadcast channel for

117
00:04:55,380 --> 00:04:57,540
more details on our work please come and

118
00:04:57,540 --> 00:04:59,820
watch our presentation in the conference

119
00:04:59,820 --> 00:05:02,479
thank you

