1
00:00:02,100 --> 00:00:04,920
hello everyone so this is a teaser to my

2
00:00:04,920 --> 00:00:06,779
talk non-interactive secure computation

3
00:00:06,779 --> 00:00:09,720
of inner product from LPN and lwe this

4
00:00:09,720 --> 00:00:12,840
is a joint work with Mariam sarasade

5
00:00:12,840 --> 00:00:15,960
so non-interactive key exchange is well

6
00:00:15,960 --> 00:00:17,340
known in cryptography it has a very

7
00:00:17,340 --> 00:00:18,840
appealing interaction pattern and

8
00:00:18,840 --> 00:00:21,000
parties simultaneously broadcast a

9
00:00:21,000 --> 00:00:23,460
single message there are public key and

10
00:00:23,460 --> 00:00:25,859
given the simultaneous broadcast each

11
00:00:25,859 --> 00:00:27,840
pair of party can locally compute its

12
00:00:27,840 --> 00:00:31,140
shared key and the nice way of this

13
00:00:31,140 --> 00:00:33,480
interaction pattern is that it avoids

14
00:00:33,480 --> 00:00:36,180
the n-square overhead of a naive

15
00:00:36,180 --> 00:00:38,100
pairwise key exchange so it's a very

16
00:00:38,100 --> 00:00:41,219
appealing interaction pattern

17
00:00:41,219 --> 00:00:43,860
and so something which would be quite

18
00:00:43,860 --> 00:00:46,260
desirable would be to achieve a similar

19
00:00:46,260 --> 00:00:48,780
interaction pattern for some secure

20
00:00:48,780 --> 00:00:50,640
computation functionalities right key

21
00:00:50,640 --> 00:00:52,800
exchange is one goal but secure

22
00:00:52,800 --> 00:00:55,199
computation offers us many other

23
00:00:55,199 --> 00:00:57,300
interesting goals so in Secure

24
00:00:57,300 --> 00:00:59,219
computation we will want n parties to

25
00:00:59,219 --> 00:01:02,399
broadcast an encoding of their input and

26
00:01:02,399 --> 00:01:04,440
then each pair of parties should be able

27
00:01:04,440 --> 00:01:07,020
to retrieve its output without any

28
00:01:07,020 --> 00:01:09,540
further interaction just by Computing

29
00:01:09,540 --> 00:01:11,760
some output function on its local state

30
00:01:11,760 --> 00:01:15,540
and the encoding of the other party

31
00:01:15,540 --> 00:01:17,220
and again this will have the very

32
00:01:17,220 --> 00:01:19,500
appealing effect of avoiding the

33
00:01:19,500 --> 00:01:21,840
quadratic overhead of doing pairwise

34
00:01:21,840 --> 00:01:23,820
secure computation

35
00:01:23,820 --> 00:01:25,560
in this work we will describe

36
00:01:25,560 --> 00:01:27,540
non-interactive secure computation for

37
00:01:27,540 --> 00:01:29,460
computing shares of the inner product

38
00:01:29,460 --> 00:01:31,320
functionality

39
00:01:31,320 --> 00:01:33,600
and this is very useful it has many

40
00:01:33,600 --> 00:01:35,340
applications and in particular if you

41
00:01:35,340 --> 00:01:37,140
want to compute multi-party inner

42
00:01:37,140 --> 00:01:38,880
products so not just shares of the inner

43
00:01:38,880 --> 00:01:41,100
product you just need to broadcast a

44
00:01:41,100 --> 00:01:43,259
single element of the field at the end

45
00:01:43,259 --> 00:01:47,340
of the protocol so it's quite efficient

46
00:01:47,340 --> 00:01:49,259
non-interactive inner products have many

47
00:01:49,259 --> 00:01:51,360
natural applications I'm listing a few

48
00:01:51,360 --> 00:01:54,299
here it includes among other things

49
00:01:54,299 --> 00:01:55,979
biometric authentication pattern

50
00:01:55,979 --> 00:01:58,799
matching and many more so to for example

51
00:01:58,799 --> 00:02:00,540
with biometric authentication you could

52
00:02:00,540 --> 00:02:02,939
have end client and M servers each has a

53
00:02:02,939 --> 00:02:05,700
fingerprint stalled so all parties will

54
00:02:05,700 --> 00:02:07,799
first broadcast an anchoring of their

55
00:02:07,799 --> 00:02:10,440
fingerprint and then at any time a

56
00:02:10,440 --> 00:02:12,599
server and a client could locally

57
00:02:12,599 --> 00:02:14,220
compute the Hamming distance between the

58
00:02:14,220 --> 00:02:16,020
two fingerprints having distance can be

59
00:02:16,020 --> 00:02:18,000
reduced to commuting an inner product

60
00:02:18,000 --> 00:02:20,280
without further interaction

61
00:02:20,280 --> 00:02:23,340
and afterwards the client and the server

62
00:02:23,340 --> 00:02:24,900
will have shares of this Hamming

63
00:02:24,900 --> 00:02:26,160
distance and the client will just have

64
00:02:26,160 --> 00:02:28,800
to broadcast a single element from which

65
00:02:28,800 --> 00:02:30,540
the server Could reconstruct the Hamming

66
00:02:30,540 --> 00:02:31,920
distance between the two and check

67
00:02:31,920 --> 00:02:33,720
whether it's below the acceptance

68
00:02:33,720 --> 00:02:36,360
threshold so that will lead to a very

69
00:02:36,360 --> 00:02:38,879
efficient multi-party authentication

70
00:02:38,879 --> 00:02:40,620
mechanism biometric authentication

71
00:02:40,620 --> 00:02:43,160
mechanism

72
00:02:43,200 --> 00:02:45,000
so how do we do that I'll give more

73
00:02:45,000 --> 00:02:47,040
details in the talk but the key ID is

74
00:02:47,040 --> 00:02:49,140
that we start from aleknovich exchange

75
00:02:49,140 --> 00:02:52,099
right so it's a well-known way to

76
00:02:52,099 --> 00:02:54,360
non-interactive K trans protocol based

77
00:02:54,360 --> 00:02:55,739
on the learning parity with noise

78
00:02:55,739 --> 00:02:57,959
assumption and we show that since

79
00:02:57,959 --> 00:03:00,480
Computing the shared key inovich

80
00:03:00,480 --> 00:03:03,840
exchange natively includes doing some

81
00:03:03,840 --> 00:03:07,200
local inner products we can actually use

82
00:03:07,200 --> 00:03:09,120
this homomorphic property of alejnovich

83
00:03:09,120 --> 00:03:11,760
and embed some inner product computation

84
00:03:11,760 --> 00:03:14,580
inside of the Alex key exchange

85
00:03:14,580 --> 00:03:17,700
computation so by embedding in the right

86
00:03:17,700 --> 00:03:19,920
way some input input Vector X and some

87
00:03:19,920 --> 00:03:23,720
input Vector y inside this exchange

88
00:03:23,720 --> 00:03:27,120
Computing the shared key actually boils

89
00:03:27,120 --> 00:03:30,060
down to Computing additive shares so

90
00:03:30,060 --> 00:03:33,239
that we see here minus K and K of the

91
00:03:33,239 --> 00:03:35,459
inner product between X and Y plus some

92
00:03:35,459 --> 00:03:36,540
noise term

93
00:03:36,540 --> 00:03:38,819
and the communication we show is very

94
00:03:38,819 --> 00:03:40,980
efficient so for standard parameters it

95
00:03:40,980 --> 00:03:43,680
will be 6m where m is the length of the

96
00:03:43,680 --> 00:03:45,780
vectors so really a small constant

97
00:03:45,780 --> 00:03:48,299
factor of our head and asymptotically it

98
00:03:48,299 --> 00:03:50,940
becomes uh very close to just sending

99
00:03:50,940 --> 00:03:53,099
the inputs in the clear so optimal

100
00:03:53,099 --> 00:03:56,700
and the computation is quasi linear

101
00:03:56,700 --> 00:03:59,519
using standard variants of LPN based on

102
00:03:59,519 --> 00:04:01,260
quasi-cyclic codes and can even be made

103
00:04:01,260 --> 00:04:03,840
strictly linear using more exotic

104
00:04:03,840 --> 00:04:06,659
assumptions variance of LPN

105
00:04:06,659 --> 00:04:09,060
so this solution has some leakage

106
00:04:09,060 --> 00:04:10,680
because there is an error and when you

107
00:04:10,680 --> 00:04:12,780
use this in a multi-party setting this

108
00:04:12,780 --> 00:04:14,700
error translates into some leakage of

109
00:04:14,700 --> 00:04:16,500
information about the noise that for

110
00:04:16,500 --> 00:04:18,660
example the servers could obtain if you

111
00:04:18,660 --> 00:04:20,100
want to remove the leakage we describe

112
00:04:20,100 --> 00:04:22,680
two violence one based on lwe which

113
00:04:22,680 --> 00:04:25,860
achieves negligible errors directly at

114
00:04:25,860 --> 00:04:28,800
the cost of larger communication and we

115
00:04:28,800 --> 00:04:30,780
also describe a very nice way to do

116
00:04:30,780 --> 00:04:33,000
pre-processing to remove the errors so

117
00:04:33,000 --> 00:04:34,259
it uses interaction but this

118
00:04:34,259 --> 00:04:36,060
pre-processing is input independent and

119
00:04:36,060 --> 00:04:38,040
has communication sublinear in the size

120
00:04:38,040 --> 00:04:40,259
of the vector so it really has adds only

121
00:04:40,259 --> 00:04:42,840
a minimal overhead and we also describe

122
00:04:42,840 --> 00:04:44,580
some new zero knowledge proof to enhance

123
00:04:44,580 --> 00:04:46,740
the security of our protocols in the

124
00:04:46,740 --> 00:04:49,139
malicious setting the new zero knowledge

125
00:04:49,139 --> 00:04:50,400
proof might be of independent interest

126
00:04:50,400 --> 00:04:53,340
but for that you will have to see the

127
00:04:53,340 --> 00:04:57,080
talk I'll be happy to see you online

