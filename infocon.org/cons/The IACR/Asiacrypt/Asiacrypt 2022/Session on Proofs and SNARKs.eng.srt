1
00:00:05,819 --> 00:00:09,240
session of the day this is about proofs

2
00:00:09,240 --> 00:00:10,460
and snacks

3
00:00:10,460 --> 00:00:14,340
I will introduce the first Speaker who

4
00:00:14,340 --> 00:00:16,400
is the Nan Wang and he will talk about

5
00:00:16,400 --> 00:00:19,260
Flash proofs efficient zero knowledge

6
00:00:19,260 --> 00:00:21,539
arguments of range and polynomial

7
00:00:21,539 --> 00:00:24,240
evaluation with transparent setup this

8
00:00:24,240 --> 00:00:27,359
will work from Nan Wang and Seed child

9
00:00:27,359 --> 00:00:30,660
and nanwang is online and it will give

10
00:00:30,660 --> 00:00:32,340
the talk

11
00:00:32,340 --> 00:00:35,460
if you can share the screen

12
00:00:35,460 --> 00:00:38,460
maybe we'll see it yeah

13
00:00:38,460 --> 00:00:41,100
we see the slides and we hear you well

14
00:00:41,100 --> 00:00:44,280
so I leave the

15
00:00:44,280 --> 00:00:46,620
yeah I leave you to present

16
00:00:46,620 --> 00:00:49,579
okay thank you

17
00:00:51,600 --> 00:00:54,480
hi uh this is Namo from the Australian

18
00:00:54,480 --> 00:00:56,940
National University uh thanks for having

19
00:00:56,940 --> 00:00:59,879
me uh today I'm going to present our

20
00:00:59,879 --> 00:01:02,579
paper flash proofs efficient zero

21
00:01:02,579 --> 00:01:04,500
knowledge arguments of range and the

22
00:01:04,500 --> 00:01:06,659
polynomial evaluation with a transparent

23
00:01:06,659 --> 00:01:09,360
setup we use flashproof because our

24
00:01:09,360 --> 00:01:13,220
arguments runs fast in verification

25
00:01:13,680 --> 00:01:16,320
let me briefly provide some Notions of

26
00:01:16,320 --> 00:01:17,880
that zero knowledge arguments and

27
00:01:17,880 --> 00:01:18,840
knowledge

28
00:01:18,840 --> 00:01:21,299
azero knowledge proof allows the Uber to

29
00:01:21,299 --> 00:01:23,520
convince a very part of the truth of a

30
00:01:23,520 --> 00:01:25,799
statement without revealing any secret

31
00:01:25,799 --> 00:01:27,299
information

32
00:01:27,299 --> 00:01:29,939
an argument is computational is some

33
00:01:29,939 --> 00:01:32,520
proof that no probabilistic polynomial

34
00:01:32,520 --> 00:01:34,979
time Ubers are able to deceive the

35
00:01:34,979 --> 00:01:38,159
verifier into mostly accepting it more

36
00:01:38,159 --> 00:01:40,439
formally given an empty language L

37
00:01:40,439 --> 00:01:43,259
approver aims to convince a verifier of

38
00:01:43,259 --> 00:01:44,520
knowing a witness

39
00:01:44,520 --> 00:01:47,640
Omega for statements new belongs to l

40
00:01:47,640 --> 00:01:49,680
uh zero knowledge arguments should

41
00:01:49,680 --> 00:01:52,320
satisfy three properties completeness

42
00:01:52,320 --> 00:01:55,140
softness and zero knowledge

43
00:01:55,140 --> 00:01:57,299
completeness means that approval can

44
00:01:57,299 --> 00:01:59,220
convince the verifier if the statement

45
00:01:59,220 --> 00:02:00,540
is true

46
00:02:00,540 --> 00:02:03,420
suntonese means approver cannot convince

47
00:02:03,420 --> 00:02:06,180
a verifier if the statement is false

48
00:02:06,180 --> 00:02:08,880
zero knowledge means the argument does

49
00:02:08,880 --> 00:02:11,400
not review any other information except

50
00:02:11,400 --> 00:02:14,360
the statement is true

51
00:02:14,360 --> 00:02:17,340
uh flash proofs are three-round Sigma

52
00:02:17,340 --> 00:02:20,160
protocols under the discrete logarithm

53
00:02:20,160 --> 00:02:23,040
assumption with a transparent setup they

54
00:02:23,040 --> 00:02:24,720
do not require any computational

55
00:02:24,720 --> 00:02:28,140
expensive carrying operations uh flash

56
00:02:28,140 --> 00:02:30,720
proof consists of two types of arguments

57
00:02:30,720 --> 00:02:33,360
a range argument and the polynomial

58
00:02:33,360 --> 00:02:35,220
evaluation argument

59
00:02:35,220 --> 00:02:37,379
the range argument tends to prove that

60
00:02:37,379 --> 00:02:39,959
documented value adds to lies in a

61
00:02:39,959 --> 00:02:41,519
specific range

62
00:02:41,519 --> 00:02:44,580
for example we can prove X in a range

63
00:02:44,580 --> 00:02:49,099
between 0 to 0 and 2 powers 32-1

64
00:02:49,099 --> 00:02:54,239
or 0 between 0 and 2 power 64 minus one

65
00:02:54,239 --> 00:02:57,120
without revealing what x is

66
00:02:57,120 --> 00:02:59,340
uh the polynomial evaluation argument

67
00:02:59,340 --> 00:03:01,680
that needs to prove that two committed

68
00:03:01,680 --> 00:03:04,680
values X and one satisfy a public

69
00:03:04,680 --> 00:03:06,660
polynomial relation without speak

70
00:03:06,660 --> 00:03:10,200
disclosing what axis and R are what uh

71
00:03:10,200 --> 00:03:13,319
what X and Y are for example uh we can

72
00:03:13,319 --> 00:03:16,560
prove a polynomial relation Y equals X

73
00:03:16,560 --> 00:03:20,099
power 64 plus one and sometimes we only

74
00:03:20,099 --> 00:03:23,159
want to divide X so we can prove that X

75
00:03:23,159 --> 00:03:25,500
is a root of a public polynomial

76
00:03:25,500 --> 00:03:28,220
equation

77
00:03:28,379 --> 00:03:30,540
a sigma protocol is an efficient

78
00:03:30,540 --> 00:03:33,200
approach for constructing only several

79
00:03:33,200 --> 00:03:37,140
groups it is a three-round interactive

80
00:03:37,140 --> 00:03:39,780
protocol between uh Uber and a verifier

81
00:03:39,780 --> 00:03:42,540
before the protocol uh both parties

82
00:03:42,540 --> 00:03:45,120
share a problem input view the prover

83
00:03:45,120 --> 00:03:47,519
sends an initial message and in the

84
00:03:47,519 --> 00:03:49,940
first round

85
00:03:52,080 --> 00:03:56,519
sorry okay oh can you repeat the last

86
00:03:56,519 --> 00:03:58,620
30 seconds maybe

87
00:03:58,620 --> 00:04:01,860
hello can you hear me

88
00:04:01,860 --> 00:04:04,500
yes now we hear you we don't see your

89
00:04:04,500 --> 00:04:05,879
screen anymore

90
00:04:05,879 --> 00:04:08,420
okay

91
00:04:08,519 --> 00:04:10,799
sorry

92
00:04:10,799 --> 00:04:12,239
okay

93
00:04:12,239 --> 00:04:14,340
uh Sigma protocol is an efficient

94
00:04:14,340 --> 00:04:16,500
approach for constructing only spare

95
00:04:16,500 --> 00:04:19,139
parts and only proofs it is a three-run

96
00:04:19,139 --> 00:04:21,540
interactive procode between approver and

97
00:04:21,540 --> 00:04:24,300
the verifier uh before the protocol both

98
00:04:24,300 --> 00:04:26,880
bloody share come introduce you the

99
00:04:26,880 --> 00:04:29,220
prover sends the initial message and in

100
00:04:29,220 --> 00:04:31,259
the first round and the verifier replies

101
00:04:31,259 --> 00:04:33,360
with a random challenge e in the second

102
00:04:33,360 --> 00:04:34,259
round

103
00:04:34,259 --> 00:04:36,720
uh the approval response to the verifier

104
00:04:36,720 --> 00:04:39,360
with the message Z and finally the

105
00:04:39,360 --> 00:04:41,639
verifier can choose to accept or reject

106
00:04:41,639 --> 00:04:44,580
the proof based on the transcript U and

107
00:04:44,580 --> 00:04:46,139
e z

108
00:04:46,139 --> 00:04:48,500
moreover the protocol can be made

109
00:04:48,500 --> 00:04:51,060
non-interactive and secure in a random

110
00:04:51,060 --> 00:04:54,360
Oracle model via the uh via shamier

111
00:04:54,360 --> 00:04:56,580
transform which allows the approver to

112
00:04:56,580 --> 00:04:58,860
generate the challenge e by hashing the

113
00:04:58,860 --> 00:05:01,560
message and in the first round using a

114
00:05:01,560 --> 00:05:05,419
collision resistant harsh function

115
00:05:05,759 --> 00:05:08,820
first we present a new type of zero node

116
00:05:08,820 --> 00:05:11,880
range argument we devise a new variant

117
00:05:11,880 --> 00:05:14,580
of a bit decomposition approach to prove

118
00:05:14,580 --> 00:05:17,160
that the committed value is in the range

119
00:05:17,160 --> 00:05:21,000
between 0 and 2 power n minus one where

120
00:05:21,000 --> 00:05:23,880
indicates the base length of the range

121
00:05:23,880 --> 00:05:26,580
uh our rage argument is tailored to

122
00:05:26,580 --> 00:05:28,800
confidential transactions on blockchain

123
00:05:28,800 --> 00:05:31,740
platforms by default blockchain does not

124
00:05:31,740 --> 00:05:34,320
provide privacy and confidential

125
00:05:34,320 --> 00:05:37,020
transactions can protect privacy by

126
00:05:37,020 --> 00:05:38,699
hiding transaction and the balance

127
00:05:38,699 --> 00:05:41,160
values in created forms such as

128
00:05:41,160 --> 00:05:43,320
commitment schemes

129
00:05:43,320 --> 00:05:45,479
so zero knowledge rate proofs are

130
00:05:45,479 --> 00:05:47,880
necessary to prevent malicious parties

131
00:05:47,880 --> 00:05:50,220
from creating values out of thin air on

132
00:05:50,220 --> 00:05:52,919
blockchain platforms for example for

133
00:05:52,919 --> 00:05:55,139
computational transactions on ethereum

134
00:05:55,139 --> 00:05:57,960
blockchain the transaction initiators

135
00:05:57,960 --> 00:06:00,000
are required to prove the transfer

136
00:06:00,000 --> 00:06:03,419
amount is non-active and their encrypted

137
00:06:03,419 --> 00:06:05,699
balance has sufficient bounds for the

138
00:06:05,699 --> 00:06:07,500
transfer amount

139
00:06:07,500 --> 00:06:09,900
we just go the two crucial performance

140
00:06:09,900 --> 00:06:12,060
parameters of zero knowledge proof in

141
00:06:12,060 --> 00:06:14,820
our range argument the communication and

142
00:06:14,820 --> 00:06:16,800
the verification efficiency

143
00:06:16,800 --> 00:06:19,800
uh zero knowledge proofs communication

144
00:06:19,800 --> 00:06:23,580
cost affects the transaction size as

145
00:06:23,580 --> 00:06:25,680
they dominate the whole transaction size

146
00:06:25,680 --> 00:06:28,680
the verification efficiency has a great

147
00:06:28,680 --> 00:06:31,680
impact on how fast a transaction can be

148
00:06:31,680 --> 00:06:33,900
validated by miners on blockchain

149
00:06:33,900 --> 00:06:35,460
platforms

150
00:06:35,460 --> 00:06:38,000
our argument achieves earned power

151
00:06:38,000 --> 00:06:40,919
two-thirds sub-linear efficiency in both

152
00:06:40,919 --> 00:06:43,860
communication and the verification our

153
00:06:43,860 --> 00:06:46,979
main contribution is that our range

154
00:06:46,979 --> 00:06:49,380
argument consumes a comparable amount of

155
00:06:49,380 --> 00:06:51,660
guest costs so that they can start

156
00:06:51,660 --> 00:06:54,840
growth 16 without resorting to any

157
00:06:54,840 --> 00:06:58,199
trusted setup zika snark is called the

158
00:06:58,199 --> 00:07:00,419
succinct no interactive argument of

159
00:07:00,419 --> 00:07:03,720
knowledge uh growth 16 benefits a trust

160
00:07:03,720 --> 00:07:05,940
is set up to achieve constant

161
00:07:05,940 --> 00:07:07,500
communication and verification

162
00:07:07,500 --> 00:07:10,620
efficiency and it is a motivation as it

163
00:07:10,620 --> 00:07:13,139
started so far which only require three

164
00:07:13,139 --> 00:07:15,539
pairing operations for any arithmetic

165
00:07:15,539 --> 00:07:16,740
circuits

166
00:07:16,740 --> 00:07:19,500
our argument also supports the

167
00:07:19,500 --> 00:07:21,720
aggregation of multiple Arguments for

168
00:07:21,720 --> 00:07:24,180
other improvement improvement in

169
00:07:24,180 --> 00:07:26,639
efficiency

170
00:07:26,639 --> 00:07:28,919
let me give a quick overview of the page

171
00:07:28,919 --> 00:07:31,740
decomposition approach the intuition is

172
00:07:31,740 --> 00:07:33,000
that that

173
00:07:33,000 --> 00:07:35,940
if a value can be represented in binary

174
00:07:35,940 --> 00:07:38,819
format of a land n then it is in the

175
00:07:38,819 --> 00:07:41,220
range between 0 and the two power minus

176
00:07:41,220 --> 00:07:43,520
two power n minus one

177
00:07:43,520 --> 00:07:46,500
bulletproof is a popular general purpose

178
00:07:46,500 --> 00:07:48,780
zero knowledge argument in the discrete

179
00:07:48,780 --> 00:07:51,539
logarithm setting for arithmetic circuit

180
00:07:51,539 --> 00:07:53,400
satisfiability

181
00:07:53,400 --> 00:07:55,680
and the bulletproof can instantiate the

182
00:07:55,680 --> 00:07:58,620
range arguments it employs a variant of

183
00:07:58,620 --> 00:08:00,840
the bit decomposition approach to

184
00:08:00,840 --> 00:08:03,840
achieve login communication complexity

185
00:08:03,840 --> 00:08:05,400
and

186
00:08:05,400 --> 00:08:07,560
linear proving and verification

187
00:08:07,560 --> 00:08:10,340
complexity

188
00:08:10,620 --> 00:08:14,580
now let me describe our techniques uh we

189
00:08:14,580 --> 00:08:17,639
express the committed value Y in binary

190
00:08:17,639 --> 00:08:20,759
format of 10 terms with each term being

191
00:08:20,759 --> 00:08:22,860
two power I

192
00:08:22,860 --> 00:08:28,080
times bi where bi is either 0 or 1. uh

193
00:08:28,080 --> 00:08:30,360
we can arrange these terms in a matrix

194
00:08:30,360 --> 00:08:35,099
with L rows and K columns we use W to

195
00:08:35,099 --> 00:08:37,440
indicate the term for gravity

196
00:08:37,440 --> 00:08:40,380
in the third round after obtaining a

197
00:08:40,380 --> 00:08:44,039
random challenging Vector e0 to e k

198
00:08:44,039 --> 00:08:47,480
minus 1 from the wirefire the prover

199
00:08:47,480 --> 00:08:51,540
generates a vector of random numbers r0

200
00:08:51,540 --> 00:08:56,339
to r l minus one to compute a vector v 0

201
00:08:56,339 --> 00:09:01,860
to v l minus 1. the values base 0 to be

202
00:09:01,860 --> 00:09:04,200
L minus one do not review any

203
00:09:04,200 --> 00:09:07,500
information due to the random vector r0

204
00:09:07,500 --> 00:09:12,300
to r l minus one uh with VL the verifier

205
00:09:12,300 --> 00:09:16,440
can compute and FL are subtracting the L

206
00:09:16,440 --> 00:09:20,040
from the sum of two power l k plus K

207
00:09:20,040 --> 00:09:24,120
times e k which is equals in red print

208
00:09:24,120 --> 00:09:27,420
and we can further extend I file on the

209
00:09:27,420 --> 00:09:29,399
right hand side of the equation such

210
00:09:29,399 --> 00:09:32,399
that the coefficient of the e k is 2

211
00:09:32,399 --> 00:09:35,360
power l k plus K minus

212
00:09:35,360 --> 00:09:39,240
wlk plus a

213
00:09:39,240 --> 00:09:42,540
for verification uh the verifier needs

214
00:09:42,540 --> 00:09:44,279
to check with equations

215
00:09:44,279 --> 00:09:48,839
first the verifier computes FL times VL

216
00:09:48,839 --> 00:09:51,839
it generates a series of cross terms in

217
00:09:51,839 --> 00:09:53,820
the challenges on the right hand side of

218
00:09:53,820 --> 00:09:54,839
the equation

219
00:09:54,839 --> 00:09:57,120
the verifier needs to ensure the

220
00:09:57,120 --> 00:09:59,459
quadratic terms in the challenges are

221
00:09:59,459 --> 00:10:02,160
cancel out which mean that they're equal

222
00:10:02,160 --> 00:10:03,720
to zero

223
00:10:03,720 --> 00:10:06,120
the prover must provide the commitments

224
00:10:06,120 --> 00:10:08,220
to the coefficient to the remaining

225
00:10:08,220 --> 00:10:12,000
terms tkj and qk in the first round then

226
00:10:12,000 --> 00:10:14,839
we can conclude that each coefficient

227
00:10:14,839 --> 00:10:19,380
wlk plus a is either 0 or 2 to the power

228
00:10:19,380 --> 00:10:22,860
of LK plus k and secondly uh the

229
00:10:22,860 --> 00:10:25,500
verifier sums all the VL

230
00:10:25,500 --> 00:10:28,560
the prover must also provide the

231
00:10:28,560 --> 00:10:31,019
commitments to the isk on the right hand

232
00:10:31,019 --> 00:10:33,839
side of the equation in the first round

233
00:10:33,839 --> 00:10:37,320
uh the SK is the sum of the values in

234
00:10:37,320 --> 00:10:39,720
the case column in The Matrix

235
00:10:39,720 --> 00:10:43,320
and finally the verifier checks if Y is

236
00:10:43,320 --> 00:10:46,740
the sum of old ice K with indices from 0

237
00:10:46,740 --> 00:10:48,540
to A minus 1.

238
00:10:48,540 --> 00:10:51,120
and at the bottom uh the formula showed

239
00:10:51,120 --> 00:10:53,579
the number of required elements for our

240
00:10:53,579 --> 00:10:54,959
reach argument

241
00:10:54,959 --> 00:10:57,660
the number of group exponentiations of

242
00:10:57,660 --> 00:11:01,860
verification is pi minus one so 1K is a

243
00:11:01,860 --> 00:11:04,680
cubic root of n both communication and

244
00:11:04,680 --> 00:11:06,899
the verification costs achieve the

245
00:11:06,899 --> 00:11:09,260
minimum

246
00:11:09,260 --> 00:11:11,940
we also provide an optimization

247
00:11:11,940 --> 00:11:14,040
technique to further improve

248
00:11:14,040 --> 00:11:15,420
communication and verification

249
00:11:15,420 --> 00:11:18,300
efficiency we can use one challenge e

250
00:11:18,300 --> 00:11:20,220
and generate a series of other

251
00:11:20,220 --> 00:11:23,040
challenges based on ink considering the

252
00:11:23,040 --> 00:11:25,860
64-bit argument uh when we use the

253
00:11:25,860 --> 00:11:30,060
challenges e minus 1 iD power minus 1 E

254
00:11:30,060 --> 00:11:33,839
E power 4 and E power five the verifier

255
00:11:33,839 --> 00:11:36,000
just needs to ensure that none of the

256
00:11:36,000 --> 00:11:39,959
projected term challenges B power 10 e

257
00:11:39,959 --> 00:11:43,320
Power 8 e power 2 and the E power minus

258
00:11:43,320 --> 00:11:45,420
two would appear on the right hand side

259
00:11:45,420 --> 00:11:50,040
when Computing FL times b l the benefit

260
00:11:50,040 --> 00:11:52,320
of this optimization technique is that

261
00:11:52,320 --> 00:11:56,040
some terms would be merged together uh

262
00:11:56,040 --> 00:11:58,680
for example E power four times e can be

263
00:11:58,680 --> 00:12:01,260
merged to E power five E power five

264
00:12:01,260 --> 00:12:04,079
times E power minus one can be merged to

265
00:12:04,079 --> 00:12:07,260
E power four and E times E power minus

266
00:12:07,260 --> 00:12:10,019
one can be merged to the constant term

267
00:12:10,019 --> 00:12:12,360
and the bottom uh the lab table shows

268
00:12:12,360 --> 00:12:15,540
the values are okay to achieve the best

269
00:12:15,540 --> 00:12:17,880
performance for different ridges

270
00:12:17,880 --> 00:12:20,640
and the right table shows a comparison

271
00:12:20,640 --> 00:12:23,220
of our origin argument and optimized

272
00:12:23,220 --> 00:12:26,160
argument and our optimized argument can

273
00:12:26,160 --> 00:12:29,760
save 51 and three group exponentiations

274
00:12:29,760 --> 00:12:32,899
for proving verification we started with

275
00:12:32,899 --> 00:12:37,860
and it also saves 96 bytes improved

276
00:12:37,860 --> 00:12:39,980
science

277
00:12:40,440 --> 00:12:43,260
in this page the table shows a detailed

278
00:12:43,260 --> 00:12:45,779
efficiency comparison of our range

279
00:12:45,779 --> 00:12:48,300
argument with the Bulletproof our

280
00:12:48,300 --> 00:12:50,760
argument greatly helped performs fully

281
00:12:50,760 --> 00:12:52,680
proof in both proving and the

282
00:12:52,680 --> 00:12:53,760
verification

283
00:12:53,760 --> 00:12:56,700
our range argument has shorter proof

284
00:12:56,700 --> 00:12:59,459
size when the beta lamp n is no more

285
00:12:59,459 --> 00:13:01,079
than 22.

286
00:13:01,079 --> 00:13:04,320
the chart graph at the bottom show the

287
00:13:04,320 --> 00:13:07,860
proofs size comparison of 684-bit

288
00:13:07,860 --> 00:13:10,560
aggregate argument with increased

289
00:13:10,560 --> 00:13:12,120
aggregation size

290
00:13:12,120 --> 00:13:15,240
for aggregate argument uh bulletproof

291
00:13:15,240 --> 00:13:19,279
performs better than our range argument

292
00:13:19,320 --> 00:13:22,560
the table shows the verification gas

293
00:13:22,560 --> 00:13:24,839
cost comparison of the state-of-the-art

294
00:13:24,839 --> 00:13:27,959
technology range groups on ethereum at

295
00:13:27,959 --> 00:13:30,420
the same level of sun is errors

296
00:13:30,420 --> 00:13:32,940
the gas costs reflect the number of

297
00:13:32,940 --> 00:13:35,820
computational operations required to

298
00:13:35,820 --> 00:13:37,860
verify synonyms

299
00:13:37,860 --> 00:13:41,339
our 32-bit range argument achieves a

300
00:13:41,339 --> 00:13:43,560
comparable amount of gas to the most

301
00:13:43,560 --> 00:13:47,279
efficient if it's not growth 16. and

302
00:13:47,279 --> 00:13:50,519
there's only a gap of around 13k guests

303
00:13:50,519 --> 00:13:54,360
13 13 kilogas between our 32 range

304
00:13:54,360 --> 00:13:58,220
arguments and pro 60 and besides our

305
00:13:58,220 --> 00:14:00,959
64-bit range argument does not fall much

306
00:14:00,959 --> 00:14:01,980
behind

307
00:14:01,980 --> 00:14:04,200
and the bulletproof consumer runs in

308
00:14:04,200 --> 00:14:08,000
times the gas cost of hours

309
00:14:09,000 --> 00:14:11,700
and next uh we introduce the polynomial

310
00:14:11,700 --> 00:14:13,579
evaluation argument

311
00:14:13,579 --> 00:14:17,220
our argument views on the work of buyer

312
00:14:17,220 --> 00:14:19,500
and growth in Europe Creek 13 and we

313
00:14:19,500 --> 00:14:23,040
call it bg-13 uh we provide two zero

314
00:14:23,040 --> 00:14:24,720
knowledge arguments uh which are

315
00:14:24,720 --> 00:14:26,880
optimized for the polynomials of lower

316
00:14:26,880 --> 00:14:28,440
degree and the higher degree

317
00:14:28,440 --> 00:14:31,380
respectively uh the two arguments are

318
00:14:31,380 --> 00:14:33,779
essentially distinguished based on the

319
00:14:33,779 --> 00:14:36,779
proof size uh the higher degree one not

320
00:14:36,779 --> 00:14:38,940
performs the lower degree one when the

321
00:14:38,940 --> 00:14:41,760
degree exceeds to power 9.

322
00:14:41,760 --> 00:14:44,459
our argument can instantiate the

323
00:14:44,459 --> 00:14:46,980
membership argument to prove that a

324
00:14:46,980 --> 00:14:49,440
committed value belongs to a public list

325
00:14:49,440 --> 00:14:50,579
of values

326
00:14:50,579 --> 00:14:52,980
we can construct the polynomial such

327
00:14:52,980 --> 00:14:56,279
that Y is zero and the elements of the

328
00:14:56,279 --> 00:14:58,740
public list are the roots of the

329
00:14:58,740 --> 00:14:59,880
polynomial

330
00:14:59,880 --> 00:15:02,519
and the polynomial evaluation argument

331
00:15:02,519 --> 00:15:05,459
can also be used in conjunction with our

332
00:15:05,459 --> 00:15:08,240
range argument to satisfy complex

333
00:15:08,240 --> 00:15:10,920
mathematical relations by using the

334
00:15:10,920 --> 00:15:13,980
magulari series such as trigger

335
00:15:13,980 --> 00:15:17,820
trigonometric and exponential functions

336
00:15:17,820 --> 00:15:20,940
and the range argument aids to combine

337
00:15:20,940 --> 00:15:23,459
the input X in a small range to make

338
00:15:23,459 --> 00:15:28,160
sure y does not overflow the finite View

339
00:15:28,920 --> 00:15:31,860
under forbase argument uh I will not go

340
00:15:31,860 --> 00:15:34,019
into the technical details due to the

341
00:15:34,019 --> 00:15:36,420
time limits please refer to our paper

342
00:15:36,420 --> 00:15:40,139
for cool details uh briefly we leverage

343
00:15:40,139 --> 00:15:42,600
the quadratic term cancellation

344
00:15:42,600 --> 00:15:44,459
technique to make a non-trivial

345
00:15:44,459 --> 00:15:47,399
Improvement on the bg13 and the table

346
00:15:47,399 --> 00:15:49,800
shows an efficient efficiency comparison

347
00:15:49,800 --> 00:15:53,459
of bulletproof PG-13 and our work

348
00:15:53,459 --> 00:15:55,800
the approver and verifier inefficiency

349
00:15:55,800 --> 00:15:59,519
is in terms of group exponentiations

350
00:15:59,519 --> 00:16:01,620
our two arguments achieve better

351
00:16:01,620 --> 00:16:03,480
communication dependency than public

352
00:16:03,480 --> 00:16:06,600
proofs but only use a logarithmic number

353
00:16:06,600 --> 00:16:09,839
of group exponentiations of the line

354
00:16:09,839 --> 00:16:12,060
chat gravity shows the running time

355
00:16:12,060 --> 00:16:15,120
comparison between Pages 13 and our

356
00:16:15,120 --> 00:16:18,120
arguments we can see that our arguments

357
00:16:18,120 --> 00:16:22,079
present contribute improvements and I

358
00:16:22,079 --> 00:16:24,060
will also point out that our higher

359
00:16:24,060 --> 00:16:27,079
degree arguments enable significant

360
00:16:27,079 --> 00:16:29,519
Improvement in efficiency of

361
00:16:29,519 --> 00:16:31,620
communication and verification from how

362
00:16:31,620 --> 00:16:32,940
Logan to

363
00:16:32,940 --> 00:16:34,740
square root login where multiple

364
00:16:34,740 --> 00:16:36,300
arguments satisfying different

365
00:16:36,300 --> 00:16:38,699
polynomial relations and sharing the

366
00:16:38,699 --> 00:16:40,740
same inputs are aggregated

367
00:16:40,740 --> 00:16:43,019
and our higher degree argument to use

368
00:16:43,019 --> 00:16:45,420
One login field element to mask the

369
00:16:45,420 --> 00:16:47,820
input X which is enclosed in the red

370
00:16:47,820 --> 00:16:50,279
frame thus we can combine multiple

371
00:16:50,279 --> 00:16:52,019
single arguments with a different

372
00:16:52,019 --> 00:16:54,600
polynomial relations and sharing the

373
00:16:54,600 --> 00:16:57,300
same inputs so these build elements will

374
00:16:57,300 --> 00:16:59,880
be shared by multiple arguments but the

375
00:16:59,880 --> 00:17:01,800
aggregation size increases the

376
00:17:01,800 --> 00:17:04,260
communication cost we asymptotically

377
00:17:04,260 --> 00:17:07,439
approach square root log n so the same

378
00:17:07,439 --> 00:17:09,299
also applies to the verification

379
00:17:09,299 --> 00:17:10,740
deficiency

380
00:17:10,740 --> 00:17:12,839
okay thank you

381
00:17:12,839 --> 00:17:16,579
uh do you have any questions

382
00:17:41,100 --> 00:17:43,580
hello

383
00:17:48,240 --> 00:17:52,100
I'm sorry I cannot hear anything

384
00:17:55,880 --> 00:17:58,880
yeah yeah

385
00:17:59,050 --> 00:18:01,980
[Music]

386
00:18:01,980 --> 00:18:04,980
so okay we can take it offline thank you

387
00:18:04,980 --> 00:18:07,280
so much let's thank the speaker again

388
00:18:07,280 --> 00:18:10,700
okay thank you

389
00:18:12,120 --> 00:18:16,039
okay next speaker is in person

390
00:18:16,740 --> 00:18:17,940
um and

391
00:18:17,940 --> 00:18:20,280
we'll talk about improved straight line

392
00:18:20,280 --> 00:18:22,679
extraction in random molecule model with

393
00:18:22,679 --> 00:18:25,559
application to Signature aggregation

394
00:18:25,559 --> 00:18:30,059
a work by Yash kondi and ABI shalat and

395
00:18:30,059 --> 00:18:33,440
yeah Shia will give the talk

396
00:18:47,640 --> 00:18:49,980
thanks Franca for the introduction

397
00:18:49,980 --> 00:18:52,440
uh I'm Yash this is Joint work with

398
00:18:52,440 --> 00:18:54,780
abhishalat

399
00:18:54,780 --> 00:18:57,240
okay so in this talk I'm going to

400
00:18:57,240 --> 00:18:58,919
explore two dimensions of vigilance

401
00:18:58,919 --> 00:19:01,080
transformation from Sigma protocol to an

402
00:19:01,080 --> 00:19:02,400
as a proof of knowledge

403
00:19:02,400 --> 00:19:03,840
I'm going to look at applicability and

404
00:19:03,840 --> 00:19:05,940
I'm going to look at computation cost

405
00:19:05,940 --> 00:19:07,919
so in terms of applicability first and

406
00:19:07,919 --> 00:19:09,539
only proved his transformation to work

407
00:19:09,539 --> 00:19:12,059
to certain Sigma protocols that satisfy

408
00:19:12,059 --> 00:19:14,220
a certain quasi-unique responses

409
00:19:14,220 --> 00:19:17,700
property and this rules out a number of

410
00:19:17,700 --> 00:19:20,340
useful protocols including um

411
00:19:20,340 --> 00:19:22,080
you know like logical all composition

412
00:19:22,080 --> 00:19:23,700
and

413
00:19:23,700 --> 00:19:26,039
uh yeah a logical or composition a proof

414
00:19:26,039 --> 00:19:27,120
of knowledge of parents and commitment

415
00:19:27,120 --> 00:19:28,860
and so on

416
00:19:28,860 --> 00:19:31,140
there's this sort of folklore intuition

417
00:19:31,140 --> 00:19:33,600
that despite the lack of a proof the

418
00:19:33,600 --> 00:19:34,919
transformation this works out of the box

419
00:19:34,919 --> 00:19:36,720
anyway and that's something that I'll

420
00:19:36,720 --> 00:19:38,580
address in this talk

421
00:19:38,580 --> 00:19:40,320
specifically you find that contrary to

422
00:19:40,320 --> 00:19:42,360
this folklore there is an attack on

423
00:19:42,360 --> 00:19:44,100
witness indistinguishability if the

424
00:19:44,100 --> 00:19:47,039
transform is applied in some uh bad

425
00:19:47,039 --> 00:19:48,299
context

426
00:19:48,299 --> 00:19:50,280
and we also showed that

427
00:19:50,280 --> 00:19:51,900
um through some simple randomization

428
00:19:51,900 --> 00:19:54,299
mechanism we can fix this problem

429
00:19:54,299 --> 00:19:55,799
the other dimension that I'm going to

430
00:19:55,799 --> 00:19:58,200
explore is computation cost which tends

431
00:19:58,200 --> 00:19:59,340
to be the bottleneck in a lot of

432
00:19:59,340 --> 00:20:01,260
applications for state and extractable

433
00:20:01,260 --> 00:20:03,720
proofs and there hasn't been a lot of

434
00:20:03,720 --> 00:20:05,280
progress since freshman's original work

435
00:20:05,280 --> 00:20:07,020
in 2005.

436
00:20:07,020 --> 00:20:08,460
um we give a lower bound that to some

437
00:20:08,460 --> 00:20:10,580
extent explains this lack of progress

438
00:20:10,580 --> 00:20:13,260
specifically uh lower bound shows that

439
00:20:13,260 --> 00:20:15,419
fish 10 is within the con small constant

440
00:20:15,419 --> 00:20:18,299
factor of the Optimal Performance

441
00:20:18,299 --> 00:20:20,820
and we do give some modest improvements

442
00:20:20,820 --> 00:20:22,200
in the general case but we also look at

443
00:20:22,200 --> 00:20:23,640
a specific application in which to

444
00:20:23,640 --> 00:20:25,919
optimize Fashions technique specifically

445
00:20:25,919 --> 00:20:27,960
we consider a DSA signature application

446
00:20:27,960 --> 00:20:29,940
and show that we can get improvements of

447
00:20:29,940 --> 00:20:31,320
up to a couple of orders of magnitude

448
00:20:31,320 --> 00:20:32,880
for parameters that are interesting in

449
00:20:32,880 --> 00:20:34,580
practice

450
00:20:34,580 --> 00:20:37,020
so as a quick recap for the sigma

451
00:20:37,020 --> 00:20:38,220
protocol is

452
00:20:38,220 --> 00:20:39,660
there's first a commitment from the

453
00:20:39,660 --> 00:20:41,940
prover to the verifier a challenge from

454
00:20:41,940 --> 00:20:43,980
the verifier to the broker and finally a

455
00:20:43,980 --> 00:20:45,840
response from the proverb

456
00:20:45,840 --> 00:20:49,440
two special soundness says that given

457
00:20:49,440 --> 00:20:51,720
a fixed commitment and two different

458
00:20:51,720 --> 00:20:53,520
transcripts where the challenges and

459
00:20:53,520 --> 00:20:55,919
responses vary across them an extractor

460
00:20:55,919 --> 00:20:57,419
should be able to deduce a witness for

461
00:20:57,419 --> 00:20:59,400
the statement

462
00:20:59,400 --> 00:21:01,320
so the feature me transform is this

463
00:21:01,320 --> 00:21:02,760
really elegant way to go from a sigma

464
00:21:02,760 --> 00:21:04,440
protocol to a non-attractive roof

465
00:21:04,440 --> 00:21:06,960
basically the proverb instead of asking

466
00:21:06,960 --> 00:21:08,720
the verifier for the for the challenge

467
00:21:08,720 --> 00:21:11,400
hashes the statement and the first

468
00:21:11,400 --> 00:21:13,620
message

469
00:21:13,620 --> 00:21:15,960
the proof of security for the vhme

470
00:21:15,960 --> 00:21:18,179
transform comes from the so-called

471
00:21:18,179 --> 00:21:21,600
forking strategy at a very high level it

472
00:21:21,600 --> 00:21:23,820
means that um we sort of fork the

473
00:21:23,820 --> 00:21:25,200
execution of the proverb We Run The

474
00:21:25,200 --> 00:21:27,179
proverb twice or a certain number of

475
00:21:27,179 --> 00:21:29,580
times and pick a random query that the

476
00:21:29,580 --> 00:21:31,500
proverb made and change the response and

477
00:21:31,500 --> 00:21:33,600
hope that the prover still gives us an

478
00:21:33,600 --> 00:21:36,360
accepting transcript and yeah this works

479
00:21:36,360 --> 00:21:38,539
with decent probability

480
00:21:38,539 --> 00:21:41,039
there are a number of notable advantages

481
00:21:41,039 --> 00:21:43,320
for the vhme transform one is that it's

482
00:21:43,320 --> 00:21:44,700
pretty simple to describe and Implement

483
00:21:44,700 --> 00:21:47,159
and it's also very efficient which makes

484
00:21:47,159 --> 00:21:48,500
it very attractive in practice

485
00:21:48,500 --> 00:21:50,580
specifically proving and verifying of

486
00:21:50,580 --> 00:21:53,039
the hme compiled proof is basically the

487
00:21:53,039 --> 00:21:55,020
same as proving and verifying for the

488
00:21:55,020 --> 00:21:57,059
underlying Sigma protocol

489
00:21:57,059 --> 00:21:59,039
it also comes with a couple of downsides

490
00:21:59,039 --> 00:22:01,260
which we focus on in this work

491
00:22:01,260 --> 00:22:03,600
specifically the forking strategy

492
00:22:03,600 --> 00:22:05,640
doesn't compose concurrently

493
00:22:05,640 --> 00:22:07,200
so if you want the audio current

494
00:22:07,200 --> 00:22:09,659
security of a music that's compiled the

495
00:22:09,659 --> 00:22:11,940
vhme transform may not work

496
00:22:11,940 --> 00:22:13,320
and there is also this quadratic

497
00:22:13,320 --> 00:22:14,760
security loss that comes from having to

498
00:22:14,760 --> 00:22:17,900
learn the program multiple times

499
00:22:18,000 --> 00:22:19,440
straight line extraction on the other

500
00:22:19,440 --> 00:22:20,820
hand is

501
00:22:20,820 --> 00:22:22,740
an extraction strategy that follows it

502
00:22:22,740 --> 00:22:25,740
off this sort of rough Paradigm which is

503
00:22:25,740 --> 00:22:27,840
in the random Oracle model we just run

504
00:22:27,840 --> 00:22:30,360
the proverb once take a look at all the

505
00:22:30,360 --> 00:22:31,620
queries that the Brewer made to the

506
00:22:31,620 --> 00:22:33,960
random Oracle and just this information

507
00:22:33,960 --> 00:22:35,820
should be sufficient to extract a

508
00:22:35,820 --> 00:22:38,580
witness to the statement

509
00:22:38,580 --> 00:22:41,400
so this one short straight line method

510
00:22:41,400 --> 00:22:42,960
of extracting was proven to support

511
00:22:42,960 --> 00:22:45,780
concurrent composition and passes work

512
00:22:45,780 --> 00:22:47,520
and pass also gave a simple cut and

513
00:22:47,520 --> 00:22:50,100
choose construction that did achieve the

514
00:22:50,100 --> 00:22:53,039
straight line notion in his work

515
00:22:53,039 --> 00:22:55,080
in subsequent work fishing gave us later

516
00:22:55,080 --> 00:22:57,120
an extractable compiler that avoided

517
00:22:57,120 --> 00:22:58,679
some of the cut and choose logistical

518
00:22:58,679 --> 00:23:00,960
costs that came and passes work through

519
00:23:00,960 --> 00:23:03,780
this really nice proof of work type idea

520
00:23:03,780 --> 00:23:07,200
very roughly this involves sending

521
00:23:07,200 --> 00:23:09,720
this transcript aez of the sigma

522
00:23:09,720 --> 00:23:12,960
protocol subject to this constraint that

523
00:23:12,960 --> 00:23:15,179
the hash of aez should be equal to the

524
00:23:15,179 --> 00:23:16,740
all zero string

525
00:23:16,740 --> 00:23:18,600
in a little more detail sessions

526
00:23:18,600 --> 00:23:21,659
transform Works something like this

527
00:23:21,659 --> 00:23:24,000
the prover as usual Begins by sampling a

528
00:23:24,000 --> 00:23:26,640
second protocol first message okay

529
00:23:26,640 --> 00:23:29,280
then it computes in its head a response

530
00:23:29,280 --> 00:23:32,400
to the challenge zero it's called Z zero

531
00:23:32,400 --> 00:23:34,260
it feeds it to the random Oracle and

532
00:23:34,260 --> 00:23:36,120
checks the output if it's something if

533
00:23:36,120 --> 00:23:38,220
anything but the non-z the all zero

534
00:23:38,220 --> 00:23:40,559
string this is a rejection

535
00:23:40,559 --> 00:23:42,720
and so the grower must try again

536
00:23:42,720 --> 00:23:44,640
the proofer in its head keeps

537
00:23:44,640 --> 00:23:46,860
incrementing the challenges and

538
00:23:46,860 --> 00:23:48,960
correspondingly answering them

539
00:23:48,960 --> 00:23:50,640
feeding them to the random article and

540
00:23:50,640 --> 00:23:53,159
checking if it's the all zero string

541
00:23:53,159 --> 00:23:54,720
and basically the proverb keeps going

542
00:23:54,720 --> 00:23:57,120
until it finds one it finds an AEG

543
00:23:57,120 --> 00:23:58,679
transcript that does hash to the all

544
00:23:58,679 --> 00:24:00,900
zero string and once such a transcript

545
00:24:00,900 --> 00:24:03,600
is found this is the output

546
00:24:03,600 --> 00:24:05,760
so soundness comes from the fact that

547
00:24:05,760 --> 00:24:07,620
except with probability one over the

548
00:24:07,620 --> 00:24:09,600
size of the hash function the proofer

549
00:24:09,600 --> 00:24:11,100
must try more than one except in

550
00:24:11,100 --> 00:24:12,120
transcript

551
00:24:12,120 --> 00:24:13,860
and so with more than one accepting

552
00:24:13,860 --> 00:24:16,320
transcript we're able to extract

553
00:24:16,320 --> 00:24:18,299
completeness follows when the hash

554
00:24:18,299 --> 00:24:20,159
function size is small

555
00:24:20,159 --> 00:24:22,020
and so the blue work can terminate

556
00:24:22,020 --> 00:24:23,640
efficiently

557
00:24:23,640 --> 00:24:25,320
because these two things are at odds we

558
00:24:25,320 --> 00:24:27,059
need a small hash function for

559
00:24:27,059 --> 00:24:29,280
completeness and we need a large output

560
00:24:29,280 --> 00:24:31,320
for soundness and so

561
00:24:31,320 --> 00:24:32,520
um there's a simple way to get around

562
00:24:32,520 --> 00:24:33,840
this which is just by repeating this

563
00:24:33,840 --> 00:24:35,280
protocol in parallel a number of times

564
00:24:35,280 --> 00:24:37,440
I'm not going to talk about these

565
00:24:37,440 --> 00:24:39,960
repetitions because for the context of

566
00:24:39,960 --> 00:24:41,100
this talk it's going to be enough to

567
00:24:41,100 --> 00:24:43,080
look at a single instance proficient

568
00:24:43,080 --> 00:24:45,620
platform

569
00:24:45,960 --> 00:24:49,020
really quick if we compare questions

570
00:24:49,020 --> 00:24:50,520
um professional transformation to pass

571
00:24:50,520 --> 00:24:52,980
setting all the parameters so that we're

572
00:24:52,980 --> 00:24:54,900
comparing Apples to Apples with the same

573
00:24:54,900 --> 00:24:57,179
computation cost in both cases the

574
00:24:57,179 --> 00:24:59,580
dominant asymptotic term in fastest

575
00:24:59,580 --> 00:25:01,740
transform comes from some extra

576
00:25:01,740 --> 00:25:03,120
Logistics that had to do with the

577
00:25:03,120 --> 00:25:05,220
cartoon shows basically think of this as

578
00:25:05,220 --> 00:25:06,980
some like Merkle tree revealing thing

579
00:25:06,980 --> 00:25:10,320
and uh this extra logistical cost is

580
00:25:10,320 --> 00:25:12,659
like a logarithmic Factor worse than the

581
00:25:12,659 --> 00:25:14,940
underlying Sigma protocol itself and so

582
00:25:14,940 --> 00:25:16,559
fashion transform is nice because we

583
00:25:16,559 --> 00:25:18,720
avoid this extra logistical this like

584
00:25:18,720 --> 00:25:21,900
cotton choose logistical cost altogether

585
00:25:21,900 --> 00:25:23,640
that's the Computing that's the like

586
00:25:23,640 --> 00:25:25,500
quantitative part and now let's look at

587
00:25:25,500 --> 00:25:27,480
the qualitative aspect of it

588
00:25:27,480 --> 00:25:29,580
so passes compiler is shown to work for

589
00:25:29,580 --> 00:25:31,200
any Sigma protocol

590
00:25:31,200 --> 00:25:33,659
specialist compiler on the other hand

591
00:25:33,659 --> 00:25:35,460
um the security proof relies on this

592
00:25:35,460 --> 00:25:38,400
property called quasi-unique responses

593
00:25:38,400 --> 00:25:40,380
so many standard similar protocols do

594
00:25:40,380 --> 00:25:42,059
support this think of proof of knowledge

595
00:25:42,059 --> 00:25:43,919
of discrete log for example but there

596
00:25:43,919 --> 00:25:45,240
are many other interesting ones that

597
00:25:45,240 --> 00:25:47,039
don't like

598
00:25:47,039 --> 00:25:48,120
um proof of knowledge of Peterson

599
00:25:48,120 --> 00:25:50,700
commitment opening and uh proving

600
00:25:50,700 --> 00:25:51,960
knowledge of one out of two witnesses

601
00:25:51,960 --> 00:25:53,820
and so on

602
00:25:53,820 --> 00:25:56,159
very at a very high level the

603
00:25:56,159 --> 00:25:59,159
quasi-unique response property um

604
00:25:59,159 --> 00:26:01,799
is something like this if we were to fix

605
00:26:01,799 --> 00:26:03,240
the commitment and the challenge they

606
00:26:03,240 --> 00:26:05,220
should also implicitly fix the response

607
00:26:05,220 --> 00:26:06,900
Z that is it should be hard

608
00:26:06,900 --> 00:26:09,360
computationally for approver to come up

609
00:26:09,360 --> 00:26:11,940
with a challenge sorry a commitment a

610
00:26:11,940 --> 00:26:14,340
challenge and two responses such that

611
00:26:14,340 --> 00:26:17,460
they're both accepting transcripts

612
00:26:17,460 --> 00:26:19,380
so it's kind of easy to see why this is

613
00:26:19,380 --> 00:26:20,940
necessary for soundness infections

614
00:26:20,940 --> 00:26:22,080
compiler

615
00:26:22,080 --> 00:26:24,120
specifically approval who's able to

616
00:26:24,120 --> 00:26:26,039
violate this property can fix the

617
00:26:26,039 --> 00:26:28,020
commitment fix the challenge and just

618
00:26:28,020 --> 00:26:29,279
keep brute forcing on the third

619
00:26:29,279 --> 00:26:31,620
component the response until it finds

620
00:26:31,620 --> 00:26:34,440
one that accepts with the random Oracle

621
00:26:34,440 --> 00:26:37,440
and recall that in the extractor for a

622
00:26:37,440 --> 00:26:39,960
sigma protocol we need the challenge to

623
00:26:39,960 --> 00:26:40,740
change

624
00:26:40,740 --> 00:26:42,539
that is we need the same commitment in

625
00:26:42,539 --> 00:26:44,400
different challenges but in this case we

626
00:26:44,400 --> 00:26:45,720
have approver who's

627
00:26:45,720 --> 00:26:49,279
uh keeping the challenge fixed

628
00:26:49,620 --> 00:26:52,140
there's this folklore understanding that

629
00:26:52,140 --> 00:26:54,299
this is not because of Any like inherent

630
00:26:54,299 --> 00:26:57,059
underlying issue as much as just um the

631
00:26:57,059 --> 00:26:58,559
sigma protocol abstraction kind of

632
00:26:58,559 --> 00:27:01,020
getting in the way if you were to just

633
00:27:01,020 --> 00:27:04,559
adjust the syntax of second protocols

634
00:27:04,559 --> 00:27:06,360
and how the transformation works we can

635
00:27:06,360 --> 00:27:08,460
kind of get around this

636
00:27:08,460 --> 00:27:09,900
um I'd have some discussion about this

637
00:27:09,900 --> 00:27:11,940
in the paper specifically with the proof

638
00:27:11,940 --> 00:27:13,200
of knowledge of one out of two discrete

639
00:27:13,200 --> 00:27:15,659
logarithms as an example

640
00:27:15,659 --> 00:27:17,760
um at a very high level the intuition is

641
00:27:17,760 --> 00:27:20,159
that for a lot of protocols many natural

642
00:27:20,159 --> 00:27:23,100
ones if you were to fix a and e the

643
00:27:23,100 --> 00:27:25,080
commitment and challenge even if you

644
00:27:25,080 --> 00:27:26,520
have two different responses for the

645
00:27:26,520 --> 00:27:27,779
same challenge you can still extract

646
00:27:27,779 --> 00:27:29,279
like there is still meaningful

647
00:27:29,279 --> 00:27:30,779
information that you get by looking at

648
00:27:30,779 --> 00:27:32,039
two different responses when the

649
00:27:32,039 --> 00:27:34,020
challenge is the same

650
00:27:34,020 --> 00:27:36,360
so we um in our work we like formalized

651
00:27:36,360 --> 00:27:38,400
this folklore

652
00:27:38,400 --> 00:27:40,919
um we add this notion of strong to two

653
00:27:40,919 --> 00:27:43,500
special Summers which in addition to the

654
00:27:43,500 --> 00:27:45,779
original two special soundness also

655
00:27:45,779 --> 00:27:47,940
gives the extractor challenges so it's

656
00:27:47,940 --> 00:27:49,799
transcripts of this form where the

657
00:27:49,799 --> 00:27:51,960
challenge is different but either the

658
00:27:51,960 --> 00:27:53,580
challenge can vary all the response can

659
00:27:53,580 --> 00:27:56,460
vary the second all part is what's new

660
00:27:56,460 --> 00:28:00,059
right so that looks like we fixed it

661
00:28:00,059 --> 00:28:02,100
but it turns out that question's proof

662
00:28:02,100 --> 00:28:03,659
of zero knowledge also depends on

663
00:28:03,659 --> 00:28:05,100
quality unique responses which is not

664
00:28:05,100 --> 00:28:07,500
very intuitive we can't see an explicit

665
00:28:07,500 --> 00:28:09,659
attack right away

666
00:28:09,659 --> 00:28:12,960
and in this work we show that it turns

667
00:28:12,960 --> 00:28:14,279
out that it's actually quite strongly

668
00:28:14,279 --> 00:28:16,799
dependent on this property in particular

669
00:28:16,799 --> 00:28:18,659
in the absence of this unique responses

670
00:28:18,659 --> 00:28:20,700
property we can construct an explicit

671
00:28:20,700 --> 00:28:24,140
attack on witness and distinguishability

672
00:28:24,779 --> 00:28:27,000
so we rely on the following two facts

673
00:28:27,000 --> 00:28:30,419
one is that in some Sigma protocols if

674
00:28:30,419 --> 00:28:32,220
you have the witness that the prover

675
00:28:32,220 --> 00:28:35,159
used to compute the proof we can simply

676
00:28:35,159 --> 00:28:37,740
work backwards and get the entire random

677
00:28:37,740 --> 00:28:39,600
state of the proverb think of schnell's

678
00:28:39,600 --> 00:28:42,120
proof of knowledge where a response is

679
00:28:42,120 --> 00:28:43,620
just a linear combination of the witness

680
00:28:43,620 --> 00:28:45,600
and some Randomness so if you have the

681
00:28:45,600 --> 00:28:46,740
witness you can just solve for the

682
00:28:46,740 --> 00:28:48,299
randomness

683
00:28:48,299 --> 00:28:50,460
the second fact is that once you fix the

684
00:28:50,460 --> 00:28:52,679
commitment questions compiler is

685
00:28:52,679 --> 00:28:55,080
deterministic

686
00:28:55,080 --> 00:28:57,299
so this lets us

687
00:28:57,299 --> 00:28:59,220
construct some interesting algorithms

688
00:28:59,220 --> 00:29:01,620
specifically we can consider

689
00:29:01,620 --> 00:29:03,360
consider this following a tax strategy

690
00:29:03,360 --> 00:29:06,539
given efficient and compiled proof Pi we

691
00:29:06,539 --> 00:29:08,880
can use Fact one to get the internal

692
00:29:08,880 --> 00:29:12,120
state of the sigma protocol uh approver

693
00:29:12,120 --> 00:29:14,640
and by fat too we know that freshlin's

694
00:29:14,640 --> 00:29:16,679
compiler doesn't add any extra State on

695
00:29:16,679 --> 00:29:18,720
top of the server protocol and so now we

696
00:29:18,720 --> 00:29:20,580
have the entire state of the entire

697
00:29:20,580 --> 00:29:22,559
internal state of the proverb

698
00:29:22,559 --> 00:29:24,659
and now we can sort of recompute the

699
00:29:24,659 --> 00:29:26,220
proof because we have everything we need

700
00:29:26,220 --> 00:29:28,380
to compute the proof

701
00:29:28,380 --> 00:29:31,320
and by completeness the Computing the

702
00:29:31,320 --> 00:29:33,000
proof should give me back the same pie

703
00:29:33,000 --> 00:29:36,679
that I started out with

704
00:29:36,899 --> 00:29:38,220
now let's

705
00:29:38,220 --> 00:29:39,720
look at what happens if we use a

706
00:29:39,720 --> 00:29:41,279
different Witness

707
00:29:41,279 --> 00:29:42,899
that in particular there are some simple

708
00:29:42,899 --> 00:29:44,640
protocols where for the same Challenge

709
00:29:44,640 --> 00:29:46,200
and commitment

710
00:29:46,200 --> 00:29:48,059
sorry for the same commitment challenge

711
00:29:48,059 --> 00:29:50,700
the response Z will depend on which

712
00:29:50,700 --> 00:29:53,460
witness is being used so think of the

713
00:29:53,460 --> 00:29:55,140
proof of knowledge of one out of two

714
00:29:55,140 --> 00:29:57,539
witnesses for example if you fix a and e

715
00:29:57,539 --> 00:29:59,460
the third response Z is going to be

716
00:29:59,460 --> 00:30:03,559
different whether you use w0 or W1

717
00:30:03,960 --> 00:30:07,020
so this lets us analyze the second case

718
00:30:07,020 --> 00:30:09,840
so over here what I've highlighted is by

719
00:30:09,840 --> 00:30:11,220
completeness if you use the same witness

720
00:30:11,220 --> 00:30:12,899
that the prover did you get back the

721
00:30:12,899 --> 00:30:15,419
same proof what fact three tells us is

722
00:30:15,419 --> 00:30:17,580
if if you use a different witness than

723
00:30:17,580 --> 00:30:19,320
what the prover did you get a different

724
00:30:19,320 --> 00:30:21,179
proof with some high probability or with

725
00:30:21,179 --> 00:30:22,679
some noticeable probability

726
00:30:22,679 --> 00:30:24,299
suggestion for proof Pi Prime so this

727
00:30:24,299 --> 00:30:26,399
creates a distinguishing event you can

728
00:30:26,399 --> 00:30:28,740
basically now test if a given witness

729
00:30:28,740 --> 00:30:31,380
was used to compute a given proof and

730
00:30:31,380 --> 00:30:33,419
that breaks Witness indistinguishability

731
00:30:33,419 --> 00:30:36,980
because the details are all in the paper

732
00:30:37,020 --> 00:30:39,480
so um two out of those three facts that

733
00:30:39,480 --> 00:30:40,799
I just showed you are inherent

734
00:30:40,799 --> 00:30:42,240
properties is a sigma protocol and we

735
00:30:42,240 --> 00:30:43,740
can't do anything about them

736
00:30:43,740 --> 00:30:46,440
one the second the second fact which is

737
00:30:46,440 --> 00:30:48,120
that fashion compiler is deterministic

738
00:30:48,120 --> 00:30:49,620
we can fix this because this is a

739
00:30:49,620 --> 00:30:50,940
compiler level thing not a sigma

740
00:30:50,940 --> 00:30:52,380
protocol thing

741
00:30:52,380 --> 00:30:54,240
so basically instead of incrementally

742
00:30:54,240 --> 00:30:55,799
stepping through the challenges until

743
00:30:55,799 --> 00:30:57,840
you find a proof the proof on our can

744
00:30:57,840 --> 00:30:58,980
randomly step through the challenge

745
00:30:58,980 --> 00:31:01,440
space until the proof that hashes to the

746
00:31:01,440 --> 00:31:03,059
all zero string is fund

747
00:31:03,059 --> 00:31:06,419
there are some subtleties of course but

748
00:31:06,419 --> 00:31:09,059
um yeah the idea of doing the idea

749
00:31:09,059 --> 00:31:10,380
behind doing this is that even if you

750
00:31:10,380 --> 00:31:11,880
retrieve the sigma protocol Randomness

751
00:31:11,880 --> 00:31:14,100
there's some extra state that comes from

752
00:31:14,100 --> 00:31:16,679
the compiler that you can't uh get back

753
00:31:16,679 --> 00:31:19,020
yourself to execute this like retracing

754
00:31:19,020 --> 00:31:21,740
kind of algorithm

755
00:31:22,260 --> 00:31:23,520
okay so that's what I wanted to say

756
00:31:23,520 --> 00:31:26,279
about applicability

757
00:31:26,279 --> 00:31:28,740
moving on we sort of zoom out a bit and

758
00:31:28,740 --> 00:31:30,960
take a look at how

759
00:31:30,960 --> 00:31:33,179
this take a look at how the literature

760
00:31:33,179 --> 00:31:34,620
has progressed for straight line

761
00:31:34,620 --> 00:31:36,059
extraction and the random Oracle model

762
00:31:36,059 --> 00:31:38,279
that's passive feasibility result fish

763
00:31:38,279 --> 00:31:40,320
lens technique which we just covered and

764
00:31:40,320 --> 00:31:41,820
as of now these are basically the only

765
00:31:41,820 --> 00:31:44,100
techniques we have

766
00:31:44,100 --> 00:31:47,779
and it's natural to ask why

767
00:31:48,419 --> 00:31:50,580
so in this work we phrased this problem

768
00:31:50,580 --> 00:31:53,279
of random Oracle query complexity that

769
00:31:53,279 --> 00:31:54,840
is how many queries how many queries did

770
00:31:54,840 --> 00:31:55,980
the random Oracle does it take to

771
00:31:55,980 --> 00:31:57,659
produce a proof

772
00:31:57,659 --> 00:32:01,260
so we showed that if we tighten this

773
00:32:01,260 --> 00:32:03,240
lower bound asymptotic lower bound that

774
00:32:03,240 --> 00:32:04,860
question gave in his own paper

775
00:32:04,860 --> 00:32:07,200
we can derive a concrete bound that

776
00:32:07,200 --> 00:32:09,020
explains some interesting things

777
00:32:09,020 --> 00:32:11,220
specifically if we have approver who

778
00:32:11,220 --> 00:32:13,380
makes p queries of which a verifier

779
00:32:13,380 --> 00:32:15,600
checks V of them so this is p this is V

780
00:32:15,600 --> 00:32:18,480
then P choose V should it be at least 2

781
00:32:18,480 --> 00:32:19,919
to the K where K is the security

782
00:32:19,919 --> 00:32:21,419
parameter

783
00:32:21,419 --> 00:32:23,279
okay better security so this is very

784
00:32:23,279 --> 00:32:25,380
concrete

785
00:32:25,380 --> 00:32:26,940
and it turns out that freshness

786
00:32:26,940 --> 00:32:28,860
technique is nearly optimal if we

787
00:32:28,860 --> 00:32:31,020
consider this method of measuring things

788
00:32:31,020 --> 00:32:33,059
to be a metric

789
00:32:33,059 --> 00:32:34,440
and

790
00:32:34,440 --> 00:32:36,960
um yeah when I say nearly this presents

791
00:32:36,960 --> 00:32:38,520
some opportunities for more questions so

792
00:32:38,520 --> 00:32:40,559
either to lose bound or there is some

793
00:32:40,559 --> 00:32:42,600
room for more improvements and it turns

794
00:32:42,600 --> 00:32:45,299
out we're kind of in the latter case

795
00:32:45,299 --> 00:32:47,940
um so the way that one way to view

796
00:32:47,940 --> 00:32:49,380
Fashions technique is that we make the

797
00:32:49,380 --> 00:32:51,000
Proverbs solve a sort of proof of work

798
00:32:51,000 --> 00:32:52,980
problem which is inverting a hash

799
00:32:52,980 --> 00:32:55,620
function uh using this Sigma protocol

800
00:32:55,620 --> 00:32:57,840
transcripts so instead of inverting a

801
00:32:57,840 --> 00:32:59,460
hash function we give it different we

802
00:32:59,460 --> 00:33:01,440
considered a different proof of work

803
00:33:01,440 --> 00:33:02,880
problem which is funny collisions with a

804
00:33:02,880 --> 00:33:04,620
hash function and it turns out that this

805
00:33:04,620 --> 00:33:06,120
has some nice combinatorial properties

806
00:33:06,120 --> 00:33:07,860
that lets you get some general

807
00:33:07,860 --> 00:33:10,559
improvements so empirically we get like

808
00:33:10,559 --> 00:33:13,019
10 to 15 for interesting parameters um

809
00:33:13,019 --> 00:33:14,820
10 to 15 faster

810
00:33:14,820 --> 00:33:16,740
to solve the same proof of work for the

811
00:33:16,740 --> 00:33:19,799
same difficulty level

812
00:33:19,799 --> 00:33:21,600
but rather than the general case I want

813
00:33:21,600 --> 00:33:23,039
to talk about an application specific

814
00:33:23,039 --> 00:33:24,360
optimization

815
00:33:24,360 --> 00:33:26,580
which is signature aggregation

816
00:33:26,580 --> 00:33:29,340
right so we consider schnod at DSA

817
00:33:29,340 --> 00:33:32,159
signature application in this paper

818
00:33:32,159 --> 00:33:34,320
um there was a previous book by chakias

819
00:33:34,320 --> 00:33:37,200
galio myself and nicolenko which sort of

820
00:33:37,200 --> 00:33:39,000
did a naive application efficients

821
00:33:39,000 --> 00:33:40,799
transformed to aggregate at the sa

822
00:33:40,799 --> 00:33:42,720
signatures

823
00:33:42,720 --> 00:33:44,399
um signature aggregation there's a quick

824
00:33:44,399 --> 00:33:46,500
introduction is a fairly intuitive

825
00:33:46,500 --> 00:33:47,399
concept

826
00:33:47,399 --> 00:33:49,080
if you start with a bunch of plane

827
00:33:49,080 --> 00:33:50,279
signatures and run it through some

828
00:33:50,279 --> 00:33:52,200
aggregation Machinery you're able to get

829
00:33:52,200 --> 00:33:54,179
an aggregate object that captures the

830
00:33:54,179 --> 00:33:55,919
effect of all of these signatures but is

831
00:33:55,919 --> 00:33:58,019
lighter in some sense usually bandwidth

832
00:33:58,019 --> 00:34:00,179
in this case the cost of transmitting

833
00:34:00,179 --> 00:34:01,500
this aggregate signature is going to be

834
00:34:01,500 --> 00:34:02,640
less than the cost of a naive

835
00:34:02,640 --> 00:34:05,580
concatenation of these things

836
00:34:05,580 --> 00:34:08,219
so let's break down exactly what the

837
00:34:08,219 --> 00:34:12,918
dimensions of this transformation are

838
00:34:13,500 --> 00:34:17,239
maybe I'll gather the questions later so

839
00:34:17,239 --> 00:34:20,639
can I remove this somehow

840
00:34:20,639 --> 00:34:22,320
never mind

841
00:34:22,320 --> 00:34:24,300
so I'm not going to get into the details

842
00:34:24,300 --> 00:34:26,760
of the application protocol itself I'm

843
00:34:26,760 --> 00:34:28,080
just going to talk at a very high level

844
00:34:28,080 --> 00:34:30,418
of how efficient transform is applied

845
00:34:30,418 --> 00:34:31,859
so there are two dimensions in

846
00:34:31,859 --> 00:34:34,440
fishland's transform one is the number

847
00:34:34,440 --> 00:34:36,179
of queries which I'm going to call T AG

848
00:34:36,179 --> 00:34:38,699
for the time to Aggregate and the other

849
00:34:38,699 --> 00:34:40,260
which is kind of obscured over here is

850
00:34:40,260 --> 00:34:41,699
the cost per query

851
00:34:41,699 --> 00:34:43,800
so the number of queries and the costs

852
00:34:43,800 --> 00:34:45,359
that it takes to compute each query it's

853
00:34:45,359 --> 00:34:47,040
a pretty intuitive way to characterize

854
00:34:47,040 --> 00:34:49,080
computation and they show how to improve

855
00:34:49,080 --> 00:34:51,599
both dimensions

856
00:34:51,599 --> 00:34:53,760
so very roughly the query complexity

857
00:34:53,760 --> 00:34:56,099
that's the AG corresponds to the

858
00:34:56,099 --> 00:34:57,780
expected running time of finding a

859
00:34:57,780 --> 00:35:00,060
certain number of collisions of an l-bit

860
00:35:00,060 --> 00:35:02,099
hash function and our Insight is that

861
00:35:02,099 --> 00:35:03,839
for the same number of collisions so for

862
00:35:03,839 --> 00:35:05,220
the same number of

863
00:35:05,220 --> 00:35:07,619
um instances if we change the problem to

864
00:35:07,619 --> 00:35:09,660
finding an R Collision rather than an R

865
00:35:09,660 --> 00:35:12,240
inversion of a slightly modified hash

866
00:35:12,240 --> 00:35:13,920
function to make sure we respect the

867
00:35:13,920 --> 00:35:15,839
same security constraint then the

868
00:35:15,839 --> 00:35:17,940
resulting thing is slightly faster to

869
00:35:17,940 --> 00:35:19,500
compute

870
00:35:19,500 --> 00:35:20,940
um I mean it could be significant enough

871
00:35:20,940 --> 00:35:22,859
in practice but it's not a huge um it's

872
00:35:22,859 --> 00:35:24,119
not necessarily an asymptotic

873
00:35:24,119 --> 00:35:25,920
improvement this follows from some nice

874
00:35:25,920 --> 00:35:27,599
combinatorial analyzes by one major

875
00:35:27,599 --> 00:35:29,220
Symphony

876
00:35:29,220 --> 00:35:31,079
and it turns out that this same idea

877
00:35:31,079 --> 00:35:32,520
translates to the nizzix setting as well

878
00:35:32,520 --> 00:35:35,099
it's not just for the application

879
00:35:35,099 --> 00:35:36,839
uh yeah

880
00:35:36,839 --> 00:35:39,960
and as for the cost of computing each uh

881
00:35:39,960 --> 00:35:41,579
thing like the cost of producing each

882
00:35:41,579 --> 00:35:43,320
query

883
00:35:43,320 --> 00:35:45,119
um this very roughly the second protocol

884
00:35:45,119 --> 00:35:47,520
has this kind of structure the prover

885
00:35:47,520 --> 00:35:49,740
has a polynomial F that encodes all the

886
00:35:49,740 --> 00:35:52,260
signatures the ith coefficient of f is

887
00:35:52,260 --> 00:35:54,599
the ith signature and so if you're

888
00:35:54,599 --> 00:35:56,220
aggregating n signatures you have a

889
00:35:56,220 --> 00:35:59,160
degree n polynomial

890
00:35:59,160 --> 00:36:01,140
um the verifiers and the challenge e and

891
00:36:01,140 --> 00:36:02,940
the proverb basically has to reveal F

892
00:36:02,940 --> 00:36:05,900
evaluated at e

893
00:36:06,480 --> 00:36:08,579
now we know

894
00:36:08,579 --> 00:36:09,599
um through different parts of the

895
00:36:09,599 --> 00:36:11,339
literature that like evaluating a degree

896
00:36:11,339 --> 00:36:13,079
n polynomial is inherently going to cost

897
00:36:13,079 --> 00:36:15,300
10 multiplications in zq

898
00:36:15,300 --> 00:36:16,859
but in the context if fish lens

899
00:36:16,859 --> 00:36:17,820
transform

900
00:36:17,820 --> 00:36:19,500
we're going to be evaluating the same

901
00:36:19,500 --> 00:36:21,480
polynomial multiple times and finding

902
00:36:21,480 --> 00:36:23,640
some polynomial evaluation that hashes

903
00:36:23,640 --> 00:36:25,920
to the all zero string or that satisfies

904
00:36:25,920 --> 00:36:28,020
the random article in some way and so we

905
00:36:28,020 --> 00:36:29,579
can think about amortizing across the

906
00:36:29,579 --> 00:36:32,960
evaluations of this polynomial

907
00:36:33,060 --> 00:36:34,560
um this is a well-studied problem it's

908
00:36:34,560 --> 00:36:36,900
polynomial multi-point evaluation

909
00:36:36,900 --> 00:36:37,920
um it turns out that we can't use

910
00:36:37,920 --> 00:36:39,180
techniques from the literature out of

911
00:36:39,180 --> 00:36:40,619
the box to optimize polynomial

912
00:36:40,619 --> 00:36:42,420
evaluation because either they're not

913
00:36:42,420 --> 00:36:44,220
very good concretely or the concretely

914
00:36:44,220 --> 00:36:45,540
efficient ones like the fast Fourier

915
00:36:45,540 --> 00:36:47,900
transform are not compatible with

916
00:36:47,900 --> 00:36:49,980
ellipticals that we use for common

917
00:36:49,980 --> 00:36:52,020
signature schemes like at DSA for

918
00:36:52,020 --> 00:36:52,980
example

919
00:36:52,980 --> 00:36:54,480
so in this work we have a custom

920
00:36:54,480 --> 00:36:57,480
polynomial evaluation algorithm which um

921
00:36:57,480 --> 00:36:59,099
is not brilliant asymptotically it is

922
00:36:59,099 --> 00:37:00,780
sublinear but nowhere comparable there

923
00:37:00,780 --> 00:37:02,700
for free or whatever but it does work

924
00:37:02,700 --> 00:37:04,140
quite well for the concrete parameters

925
00:37:04,140 --> 00:37:07,578
that is interesting for aggregation

926
00:37:07,980 --> 00:37:09,900
right so in summary in our work we

927
00:37:09,900 --> 00:37:12,359
explore this notion of British in this

928
00:37:12,359 --> 00:37:14,099
Turkish ability and how it's not

929
00:37:14,099 --> 00:37:15,480
preserved by efficient transform in

930
00:37:15,480 --> 00:37:17,220
general and we show how to get around

931
00:37:17,220 --> 00:37:18,960
this problem by this like randomization

932
00:37:18,960 --> 00:37:20,880
mechanism then we also gave a lower

933
00:37:20,880 --> 00:37:23,579
bound that explains the lack of progress

934
00:37:23,579 --> 00:37:26,220
in this particular domain we showed that

935
00:37:26,220 --> 00:37:27,720
we can get some modest General

936
00:37:27,720 --> 00:37:29,339
improvements and if we look at a

937
00:37:29,339 --> 00:37:31,859
specific application we can of course

938
00:37:31,859 --> 00:37:34,140
um speed it up quite a bit and you can

939
00:37:34,140 --> 00:37:36,240
find my work on eplint and thanks for

940
00:37:36,240 --> 00:37:38,598
your attention

941
00:37:42,839 --> 00:37:46,160
are there any questions

942
00:37:46,859 --> 00:37:49,520
yes

943
00:37:51,980 --> 00:37:55,500
hi uh thanks for your talk uh I have one

944
00:37:55,500 --> 00:37:57,119
question could you please show the the

945
00:37:57,119 --> 00:38:01,040
slide with the with the timeline

946
00:38:07,339 --> 00:38:10,920
oh okay so just uh just a quick question

947
00:38:10,920 --> 00:38:13,740
uh are you aware of this uh tatsumata

948
00:38:13,740 --> 00:38:17,040
transform from crypto last year which

949
00:38:17,040 --> 00:38:20,099
uh which proposes like a seems like a

950
00:38:20,099 --> 00:38:21,780
different way to achieve straight line

951
00:38:21,780 --> 00:38:25,380
extractability in in Rome uh was that a

952
00:38:25,380 --> 00:38:27,619
very fabric encryption one

953
00:38:27,619 --> 00:38:30,180
I mean yeah some kind of encryption to

954
00:38:30,180 --> 00:38:32,099
the sky yeah

955
00:38:32,099 --> 00:38:34,920
um so that is an alternative Paradigm

956
00:38:34,920 --> 00:38:35,700
um

957
00:38:35,700 --> 00:38:37,680
as far as okay I guess that's a

958
00:38:37,680 --> 00:38:39,240
different I mean in theory you could

959
00:38:39,240 --> 00:38:42,660
also have like genetic uh like there are

960
00:38:42,660 --> 00:38:43,859
genetic proofs in the random Oracle

961
00:38:43,859 --> 00:38:45,780
model alone but I guess I was more

962
00:38:45,780 --> 00:38:47,040
looking at compilers from Sigma

963
00:38:47,040 --> 00:38:50,640
protocols to uh music uh so ideally we

964
00:38:50,640 --> 00:38:52,140
wouldn't want to for example depend on

965
00:38:52,140 --> 00:38:53,400
the circuit representation of the

966
00:38:53,400 --> 00:38:54,780
exponentiation function if you want to

967
00:38:54,780 --> 00:38:57,300
look at schnot like if we want to avoid

968
00:38:57,300 --> 00:38:59,400
expressing things as circuits and then

969
00:38:59,400 --> 00:39:01,020
like applying another transform on that

970
00:39:01,020 --> 00:39:02,820
uh I'm not too familiar about the

971
00:39:02,820 --> 00:39:04,440
details of that work though but does

972
00:39:04,440 --> 00:39:09,540
that yeah I see I see thanks sure

973
00:39:09,540 --> 00:39:10,820
yeah

974
00:39:10,820 --> 00:39:12,359
uh

975
00:39:12,359 --> 00:39:15,780
yes there is also a question online but

976
00:39:15,780 --> 00:39:17,400
yeah let's take it

977
00:39:17,400 --> 00:39:20,940
uh thank you for the talk uh sorry when

978
00:39:20,940 --> 00:39:22,320
uh for instance

979
00:39:22,320 --> 00:39:24,900
you are claiming these accelerations uh

980
00:39:24,900 --> 00:39:27,839
which units uh are you using for saying

981
00:39:27,839 --> 00:39:30,599
that is for instance 1.5 faster and like

982
00:39:30,599 --> 00:39:32,880
that is uh in the number of

983
00:39:32,880 --> 00:39:35,579
multiplications or did you implement the

984
00:39:35,579 --> 00:39:38,220
protocol can you elaborate on that

985
00:39:38,220 --> 00:39:40,140
please yeah thank you that was an

986
00:39:40,140 --> 00:39:42,180
analytical cost so

987
00:39:42,180 --> 00:39:43,680
um with the expected running time of

988
00:39:43,680 --> 00:39:45,300
finding a certain number of inversions

989
00:39:45,300 --> 00:39:46,800
versus the expected running time for

990
00:39:46,800 --> 00:39:49,800
finding like so many conditions so that

991
00:39:49,800 --> 00:39:52,140
1.5 is like the ratio between how long

992
00:39:52,140 --> 00:39:53,880
it takes to find inversions versus how

993
00:39:53,880 --> 00:39:56,940
long it takes to find collisions

994
00:39:56,940 --> 00:39:59,640
and uh that part so that claim was

995
00:39:59,640 --> 00:40:02,160
analytical and then the like 200x stuff

996
00:40:02,160 --> 00:40:04,560
was implemented

997
00:40:04,560 --> 00:40:07,500
implementation can you give more details

998
00:40:07,500 --> 00:40:11,280
that was in last uh there was a so there

999
00:40:11,280 --> 00:40:13,500
is a public library for the application

1000
00:40:13,500 --> 00:40:15,359
scheme that we built on and

1001
00:40:15,359 --> 00:40:16,920
yeah so we just sort of tweaked that

1002
00:40:16,920 --> 00:40:20,780
implementation to get this thank you

1003
00:40:24,660 --> 00:40:26,579
since we're already on this slide I was

1004
00:40:26,579 --> 00:40:29,220
wondering why the unho transform is not

1005
00:40:29,220 --> 00:40:31,920
uh is it not straight line extractable

1006
00:40:31,920 --> 00:40:33,599
according to your definition it is but

1007
00:40:33,599 --> 00:40:35,820
it's basically just passes transform

1008
00:40:35,820 --> 00:40:38,480
um yeah

1009
00:40:40,079 --> 00:40:43,380
question online are there instantiation

1010
00:40:43,380 --> 00:40:45,420
of fish lens technique in the standard

1011
00:40:45,420 --> 00:40:46,560
model

1012
00:40:46,560 --> 00:40:47,720
uh

1013
00:40:47,720 --> 00:40:50,760
no not that I'm a web because I mean I

1014
00:40:50,760 --> 00:40:52,380
guess feature me itself is very recent

1015
00:40:52,380 --> 00:40:54,839
so I I don't know how you do efficient

1016
00:40:54,839 --> 00:40:57,300
in the standard model

1017
00:40:57,300 --> 00:40:58,920
okay

1018
00:40:58,920 --> 00:41:01,940
any other questions

1019
00:41:03,780 --> 00:41:07,760
then let's thank the speaker again

1020
00:41:11,640 --> 00:41:14,240
foreign

1021
00:41:18,160 --> 00:41:21,250
[Music]

1022
00:41:36,140 --> 00:41:39,960
will give the talk online

1023
00:41:39,960 --> 00:41:42,060
thank you for the introduction I hope

1024
00:41:42,060 --> 00:41:44,040
you can hear me well and you can see the

1025
00:41:44,040 --> 00:41:45,000
screen

1026
00:41:45,000 --> 00:41:48,359
yes all is fine very good

1027
00:41:48,359 --> 00:41:50,040
um so yes

1028
00:41:50,040 --> 00:41:51,420
um

1029
00:41:51,420 --> 00:41:53,099
let's start with a bit of motivation

1030
00:41:53,099 --> 00:41:54,960
which

1031
00:41:54,960 --> 00:41:56,820
I guess you've heard quite a bit already

1032
00:41:56,820 --> 00:41:58,619
so this talk is about depression

1033
00:41:58,619 --> 00:42:01,680
ceremonies humans as all dogs in this

1034
00:42:01,680 --> 00:42:04,500
session and uh

1035
00:42:04,500 --> 00:42:07,020
basically what one wants to do in this

1036
00:42:07,020 --> 00:42:09,119
scenario is that we want to prove

1037
00:42:09,119 --> 00:42:11,280
something but we don't want to leak any

1038
00:42:11,280 --> 00:42:13,440
information and there are numerous

1039
00:42:13,440 --> 00:42:16,040
applications for this um

1040
00:42:16,040 --> 00:42:18,240
in the world like private

1041
00:42:18,240 --> 00:42:20,820
cryptocurrencies electronic voting where

1042
00:42:20,820 --> 00:42:22,800
you might want to prove the correctness

1043
00:42:22,800 --> 00:42:25,460
of tally without leading the votes

1044
00:42:25,460 --> 00:42:28,200
delegation of computation and so on and

1045
00:42:28,200 --> 00:42:29,880
so on

1046
00:42:29,880 --> 00:42:31,859
and the model that we will be using in

1047
00:42:31,859 --> 00:42:34,380
this work will be something like this we

1048
00:42:34,380 --> 00:42:37,140
have a proverb we have verifier and we

1049
00:42:37,140 --> 00:42:39,780
have a trusted third party

1050
00:42:39,780 --> 00:42:42,300
and prover knows a statement X which is

1051
00:42:42,300 --> 00:42:44,460
public and witness W which is private

1052
00:42:44,460 --> 00:42:47,040
and verifier knows only the statement

1053
00:42:47,040 --> 00:42:48,240
tags

1054
00:42:48,240 --> 00:42:51,119
and then the trusted party generates

1055
00:42:51,119 --> 00:42:53,160
something called a structured reference

1056
00:42:53,160 --> 00:42:55,020
string so this is some setup key and

1057
00:42:55,020 --> 00:42:57,599
gives it the program verifier and prover

1058
00:42:57,599 --> 00:43:00,480
can then use this structured

1059
00:43:00,480 --> 00:43:02,160
representing to generate the proof right

1060
00:43:02,160 --> 00:43:05,640
verified the receptor group or rejected

1061
00:43:05,640 --> 00:43:08,220
uh in more particular we will

1062
00:43:08,220 --> 00:43:10,560
focus on seek as an artist in this work

1063
00:43:10,560 --> 00:43:12,900
this stands for zero knowledge succinct

1064
00:43:12,900 --> 00:43:15,960
non-interactive argument of knowledge

1065
00:43:15,960 --> 00:43:18,060
um and basically here

1066
00:43:18,060 --> 00:43:20,400
there is some relation and Broad grains

1067
00:43:20,400 --> 00:43:24,359
that X and W status by this relation

1068
00:43:24,359 --> 00:43:27,359
and we require that the argument system

1069
00:43:27,359 --> 00:43:29,160
has knowledge soundness which means that

1070
00:43:29,160 --> 00:43:33,960
Uber must know the witness W to succeed

1071
00:43:33,960 --> 00:43:36,300
and we request zero knowledge which

1072
00:43:36,300 --> 00:43:38,880
means that only information that is

1073
00:43:38,880 --> 00:43:42,300
leaked is that X and W satisfy the

1074
00:43:42,300 --> 00:43:44,760
relation but we will not leak for

1075
00:43:44,760 --> 00:43:46,200
example the w

1076
00:43:46,200 --> 00:43:48,420
and it also requires extinctions which

1077
00:43:48,420 --> 00:43:50,099
means that the proof size itself linear

1078
00:43:50,099 --> 00:43:51,660
and the size of the statement and the

1079
00:43:51,660 --> 00:43:53,220
witness

1080
00:43:53,220 --> 00:43:56,520
however there's a big problem with this

1081
00:43:56,520 --> 00:43:59,040
structured reference string namely in

1082
00:43:59,040 --> 00:44:00,599
most applications you don't have a

1083
00:44:00,599 --> 00:44:02,400
trusted party

1084
00:44:02,400 --> 00:44:03,180
um

1085
00:44:03,180 --> 00:44:04,980
and typically

1086
00:44:04,980 --> 00:44:07,020
this structured reference string also

1087
00:44:07,020 --> 00:44:09,000
encodes a secret key so it looks

1088
00:44:09,000 --> 00:44:10,140
something like this

1089
00:44:10,140 --> 00:44:12,660
trusted party picks the secret key

1090
00:44:12,660 --> 00:44:14,339
then it applies some function to the

1091
00:44:14,339 --> 00:44:17,220
secret key and out comes the SRS however

1092
00:44:17,220 --> 00:44:18,540
if the trusted party is actually

1093
00:44:18,540 --> 00:44:22,680
malicious then it's very easy to break

1094
00:44:22,680 --> 00:44:24,000
the system

1095
00:44:24,000 --> 00:44:26,339
by using the secret key

1096
00:44:26,339 --> 00:44:28,619
so ideally you want some sort of a

1097
00:44:28,619 --> 00:44:31,619
distributed SRS generation

1098
00:44:31,619 --> 00:44:35,620
but this is quite cumbersome in practice

1099
00:44:35,620 --> 00:44:37,800
[Music]

1100
00:44:37,800 --> 00:44:40,020
so yes so SRS generation is quite

1101
00:44:40,020 --> 00:44:42,180
fragile

1102
00:44:42,180 --> 00:44:44,339
um there it is possible to have it

1103
00:44:44,339 --> 00:44:46,619
transparent SRS but then typically you

1104
00:44:46,619 --> 00:44:49,859
also give up something in efficiency

1105
00:44:49,859 --> 00:44:51,420
so we still would like to have a

1106
00:44:51,420 --> 00:44:54,420
distributed SRS generation but

1107
00:44:54,420 --> 00:44:56,640
there's some ways how to make it a bit

1108
00:44:56,640 --> 00:44:58,980
more nicer in practice

1109
00:44:58,980 --> 00:45:02,400
um one notion is universal SRS

1110
00:45:02,400 --> 00:45:05,220
this basically means that we can use the

1111
00:45:05,220 --> 00:45:09,300
same SRS for many different relations at

1112
00:45:09,300 --> 00:45:11,880
least up to some size of the relation

1113
00:45:11,880 --> 00:45:13,859
and secondly we have the notion of

1114
00:45:13,859 --> 00:45:16,920
updateability for SRS which means that

1115
00:45:16,920 --> 00:45:19,560
the SRS comes with a very nice

1116
00:45:19,560 --> 00:45:21,420
distributed necessary generation

1117
00:45:21,420 --> 00:45:23,520
protocol namely the first part you can

1118
00:45:23,520 --> 00:45:26,040
generate the initial SRS and then the

1119
00:45:26,040 --> 00:45:28,380
subsequent parties can update it

1120
00:45:28,380 --> 00:45:32,099
and the final SRS will be secure the use

1121
00:45:32,099 --> 00:45:34,980
at least as long as one of the updators

1122
00:45:34,980 --> 00:45:37,680
was honest

1123
00:45:37,680 --> 00:45:39,960
so these are basically ways how to make

1124
00:45:39,960 --> 00:45:43,079
desserts generation a bit more or quite

1125
00:45:43,079 --> 00:45:45,839
a bit more usable in practice

1126
00:45:45,839 --> 00:45:49,140
so now let's go to our result in this

1127
00:45:49,140 --> 00:45:51,800
work we constructed the shortest

1128
00:45:51,800 --> 00:45:55,079
Universal and updatable sync that is not

1129
00:45:55,079 --> 00:45:56,339
so far

1130
00:45:56,339 --> 00:46:00,000
so here is a table comparing them as you

1131
00:46:00,000 --> 00:46:02,460
can see from here the only secret snark

1132
00:46:02,460 --> 00:46:07,280
which is molar is crotch 16.

1133
00:46:07,280 --> 00:46:09,960
however that one is non-universal and

1134
00:46:09,960 --> 00:46:11,579
non-updatable so it's a lot more

1135
00:46:11,579 --> 00:46:13,980
difficult to use in practice

1136
00:46:13,980 --> 00:46:16,859
uh but we're also competitive improver

1137
00:46:16,859 --> 00:46:19,800
and verified runtime

1138
00:46:19,800 --> 00:46:22,800
maybe not the absolute best but

1139
00:46:22,800 --> 00:46:25,079
we think we're quite comparable

1140
00:46:25,079 --> 00:46:28,260
however our SRS is more complicated than

1141
00:46:28,260 --> 00:46:30,359
in the previous works but still

1142
00:46:30,359 --> 00:46:33,660
updatable and Universal

1143
00:46:33,660 --> 00:46:36,780
so let's go to techniques uh how we

1144
00:46:36,780 --> 00:46:39,780
construct our sequence vampire

1145
00:46:39,780 --> 00:46:42,660
um we take two previous secret snacks

1146
00:46:42,660 --> 00:46:44,460
Marlin and lunar

1147
00:46:44,460 --> 00:46:47,220
and then we construct a new subject

1148
00:46:47,220 --> 00:46:50,040
argument that we call count and I'll

1149
00:46:50,040 --> 00:46:52,079
explain in a moment with some check

1150
00:46:52,079 --> 00:46:53,460
argument

1151
00:46:53,460 --> 00:46:55,760
then we use some quite aggressive

1152
00:46:55,760 --> 00:46:57,920
polynomial

1153
00:46:57,920 --> 00:47:00,660
touching techniques

1154
00:47:00,660 --> 00:47:03,540
to further reduce the proof size and

1155
00:47:03,540 --> 00:47:04,440
then there are lots of small

1156
00:47:04,440 --> 00:47:06,780
optimizations and with most of these

1157
00:47:06,780 --> 00:47:08,339
small optimizations we also see that

1158
00:47:08,339 --> 00:47:10,200
there's a trade-off between the proof

1159
00:47:10,200 --> 00:47:12,379
size

1160
00:47:12,440 --> 00:47:15,480
computation time and SRS size so in many

1161
00:47:15,480 --> 00:47:16,980
cases you can even

1162
00:47:16,980 --> 00:47:20,339
turn off some of these optimizations and

1163
00:47:20,339 --> 00:47:23,099
get slightly larger proof but then

1164
00:47:23,099 --> 00:47:25,740
either small and SRS or progress

1165
00:47:25,740 --> 00:47:28,319
computation time

1166
00:47:28,319 --> 00:47:31,560
I will mostly focus on this new subject

1167
00:47:31,560 --> 00:47:34,319
argument in the stock because this is

1168
00:47:34,319 --> 00:47:37,859
technically the maybe the most new thing

1169
00:47:37,859 --> 00:47:40,920
however in reality many of the small

1170
00:47:40,920 --> 00:47:43,319
optimizations accumulate and they

1171
00:47:43,319 --> 00:47:44,220
actually

1172
00:47:44,220 --> 00:47:45,720
uh

1173
00:47:45,720 --> 00:47:50,240
give a quite a significant difference

1174
00:47:50,359 --> 00:47:54,119
uh we use r1cs light constraint system

1175
00:47:54,119 --> 00:47:57,480
so this was first proposed in lunar

1176
00:47:57,480 --> 00:47:59,940
uh in more particular let's imagine you

1177
00:47:59,940 --> 00:48:01,859
have some relation you have some public

1178
00:48:01,859 --> 00:48:05,400
input X1 X2 and some with this W then

1179
00:48:05,400 --> 00:48:06,720
you first

1180
00:48:06,720 --> 00:48:10,020
you can write your relation as a circuit

1181
00:48:10,020 --> 00:48:12,060
and then typically what you would do

1182
00:48:12,060 --> 00:48:13,800
next

1183
00:48:13,800 --> 00:48:17,220
um is that you would use r1cs

1184
00:48:17,220 --> 00:48:20,400
and this is basically here just uh

1185
00:48:20,400 --> 00:48:23,940
uh Circle represents

1186
00:48:23,940 --> 00:48:25,859
pointwise multiplication

1187
00:48:25,859 --> 00:48:28,859
so here you basically have some matrices

1188
00:48:28,859 --> 00:48:31,680
ABC which represent the circuit and then

1189
00:48:31,680 --> 00:48:35,540
you have the vector Z which some way

1190
00:48:35,540 --> 00:48:37,680
represents the wires

1191
00:48:37,680 --> 00:48:39,900
and basically it says that relation is

1192
00:48:39,900 --> 00:48:42,300
satisfied with these this Matrix

1193
00:48:42,300 --> 00:48:43,980
equation is satisfied

1194
00:48:43,980 --> 00:48:46,500
but in our case we use R16 light and

1195
00:48:46,500 --> 00:48:49,380
this is somewhat simplified version of

1196
00:48:49,380 --> 00:48:52,319
this you have only two matrices which

1197
00:48:52,319 --> 00:48:55,380
are represented that circuit and the Z

1198
00:48:55,380 --> 00:48:57,900
still in some way represents the wires

1199
00:48:57,900 --> 00:49:00,180
of the circuit

1200
00:49:00,180 --> 00:49:04,440
now how do you uh go from r1cs light to

1201
00:49:04,440 --> 00:49:06,359
a subject argument

1202
00:49:06,359 --> 00:49:09,480
so again we start with this r1cs slide

1203
00:49:09,480 --> 00:49:11,220
equation

1204
00:49:11,220 --> 00:49:13,200
then we split

1205
00:49:13,200 --> 00:49:15,960
and this this step actually

1206
00:49:15,960 --> 00:49:17,819
that I explained right now this is

1207
00:49:17,819 --> 00:49:21,000
mostly done in Marlin and lunar we did

1208
00:49:21,000 --> 00:49:23,339
our own modification but this is just to

1209
00:49:23,339 --> 00:49:26,640
give you some context so we split this Z

1210
00:49:26,640 --> 00:49:30,780
into two halves set L and ZR

1211
00:49:30,780 --> 00:49:33,000
and then if you write

1212
00:49:33,000 --> 00:49:37,200
m in this nice way and you in this nice

1213
00:49:37,200 --> 00:49:37,980
way

1214
00:49:37,980 --> 00:49:40,339
then you can actually represent

1215
00:49:40,339 --> 00:49:43,319
this whole relation R1 says like

1216
00:49:43,319 --> 00:49:45,480
relation as simply a matrix

1217
00:49:45,480 --> 00:49:47,280
multiplication where you have some

1218
00:49:47,280 --> 00:49:50,460
Matrix n times a vector U is equal to

1219
00:49:50,460 --> 00:49:52,619
zero

1220
00:49:52,619 --> 00:49:55,740
now if we index the rows and columns by

1221
00:49:55,740 --> 00:49:59,000
some at set h

1222
00:49:59,339 --> 00:50:01,020
and

1223
00:50:01,020 --> 00:50:03,420
then you can interpolate

1224
00:50:03,420 --> 00:50:05,280
and module

1225
00:50:05,280 --> 00:50:08,040
over the set H such that you get two

1226
00:50:08,040 --> 00:50:12,980
polynomials mxy and ux

1227
00:50:13,319 --> 00:50:16,040
and then

1228
00:50:16,079 --> 00:50:18,780
we can represent this Matrix Vector

1229
00:50:18,780 --> 00:50:20,339
product

1230
00:50:20,339 --> 00:50:23,579
in a polynomial form as follows

1231
00:50:23,579 --> 00:50:25,800
and what we do in the protocol is that

1232
00:50:25,800 --> 00:50:28,740
we substitute this variable X for some

1233
00:50:28,740 --> 00:50:31,260
random value in Alpha

1234
00:50:31,260 --> 00:50:33,780
and then this what is inside the sum you

1235
00:50:33,780 --> 00:50:36,660
can actually write this POI some

1236
00:50:36,660 --> 00:50:38,160
polynomial

1237
00:50:38,160 --> 00:50:41,640
and then you accidentally just check the

1238
00:50:41,640 --> 00:50:43,040
arrances like

1239
00:50:43,040 --> 00:50:46,020
constraints you get into this sum Check

1240
00:50:46,020 --> 00:50:48,300
formula so basically you have some

1241
00:50:48,300 --> 00:50:49,800
polynomial

1242
00:50:49,800 --> 00:50:51,720
evaluated

1243
00:50:51,720 --> 00:50:55,619
uh at points in some set H and these are

1244
00:50:55,619 --> 00:50:58,440
some together and they are equal to zero

1245
00:50:58,440 --> 00:51:00,780
so this maybe if you even didn't follow

1246
00:51:00,780 --> 00:51:02,240
all the details in this transformation

1247
00:51:02,240 --> 00:51:05,160
it's important to note that we can go

1248
00:51:05,160 --> 00:51:08,880
from r1c slide to this subject form so

1249
00:51:08,880 --> 00:51:11,460
if we can do the stock checking then we

1250
00:51:11,460 --> 00:51:13,040
can

1251
00:51:13,040 --> 00:51:18,300
verify as that some circuit is satisfied

1252
00:51:18,300 --> 00:51:21,720
uh okay let's go to some background

1253
00:51:21,720 --> 00:51:24,599
first uh

1254
00:51:24,599 --> 00:51:26,640
we will be using bilinear groups in this

1255
00:51:26,640 --> 00:51:29,579
work so here we have three groups G1 G2

1256
00:51:29,579 --> 00:51:33,720
and GT of some prime size G P and

1257
00:51:33,720 --> 00:51:36,240
generates B1 B2 and PT and we're using

1258
00:51:36,240 --> 00:51:37,680
type 3 bearings

1259
00:51:37,680 --> 00:51:39,180
uh

1260
00:51:39,180 --> 00:51:40,880
so this means that there's no

1261
00:51:40,880 --> 00:51:44,579
isomorphism between groups G1 and G2

1262
00:51:44,579 --> 00:51:47,160
we will be using additive notation and

1263
00:51:47,160 --> 00:51:49,800
we will be using bracket notation namely

1264
00:51:49,800 --> 00:51:52,319
it means that when we want to write a

1265
00:51:52,319 --> 00:51:56,460
times B1 then that's actually equal to a

1266
00:51:56,460 --> 00:51:59,700
in bracket with sub index 1 where a is

1267
00:51:59,700 --> 00:52:01,319
some integer

1268
00:52:01,319 --> 00:52:04,619
and similarly we do for groups G2 and

1269
00:52:04,619 --> 00:52:08,040
and the target group GT

1270
00:52:08,040 --> 00:52:10,500
and very importantly we also have a

1271
00:52:10,500 --> 00:52:13,680
bilinear map so this means that although

1272
00:52:13,680 --> 00:52:15,599
we have additive groups

1273
00:52:15,599 --> 00:52:18,059
we can actually multiply it together in

1274
00:52:18,059 --> 00:52:20,040
some sense elements from different

1275
00:52:20,040 --> 00:52:25,800
groups so we have a uh one here and P2

1276
00:52:25,800 --> 00:52:28,260
then we can use bearing operation to get

1277
00:52:28,260 --> 00:52:31,880
a times B in the Target group

1278
00:52:32,460 --> 00:52:35,099
uh we will also be using polynomial

1279
00:52:35,099 --> 00:52:36,599
commitment schemes

1280
00:52:36,599 --> 00:52:38,520
so what is the polynomial commitment

1281
00:52:38,520 --> 00:52:41,300
here the committer

1282
00:52:41,300 --> 00:52:43,680
sends some representation of a

1283
00:52:43,680 --> 00:52:45,619
polynomial f of x

1284
00:52:45,619 --> 00:52:49,380
which is succinct so it's a smaller than

1285
00:52:49,380 --> 00:52:52,740
size of the polynomial itself then very

1286
00:52:52,740 --> 00:52:56,220
far can pick any integer Alpha

1287
00:52:56,220 --> 00:52:59,280
and the committer will send F of Alpha

1288
00:52:59,280 --> 00:53:02,400
and he claims that this is equal to some

1289
00:53:02,400 --> 00:53:03,359
y

1290
00:53:03,359 --> 00:53:05,819
together with the proof

1291
00:53:05,819 --> 00:53:07,200
and the properties that you write

1292
00:53:07,200 --> 00:53:10,020
require is binding which means that Y is

1293
00:53:10,020 --> 00:53:13,579
correct committer can cheat

1294
00:53:13,579 --> 00:53:16,800
succinctness which means that for the

1295
00:53:16,800 --> 00:53:19,200
commitment size and the proof size are

1296
00:53:19,200 --> 00:53:22,040
much smaller than the representation

1297
00:53:22,040 --> 00:53:24,780
of the polynomial

1298
00:53:24,780 --> 00:53:26,660
and we also require

1299
00:53:26,660 --> 00:53:29,099
homomorphism which simply means that if

1300
00:53:29,099 --> 00:53:30,839
we have commitment to f of x and

1301
00:53:30,839 --> 00:53:33,240
commitment to G of x and you add them

1302
00:53:33,240 --> 00:53:35,940
together then you get a commitment to f

1303
00:53:35,940 --> 00:53:39,079
of x plus G of x

1304
00:53:40,079 --> 00:53:42,660
now what is a soundtrack argument we

1305
00:53:42,660 --> 00:53:46,380
already briefly saw it so again we have

1306
00:53:46,380 --> 00:53:49,140
a program verifier

1307
00:53:49,140 --> 00:53:52,920
prover knows a polynomial f of x

1308
00:53:52,920 --> 00:53:56,400
some value s and the set h

1309
00:53:56,400 --> 00:53:59,400
foreign

1310
00:54:00,000 --> 00:54:03,000
against integer S and H

1311
00:54:03,000 --> 00:54:06,000
and now Brewery claims that

1312
00:54:06,000 --> 00:54:10,380
if you evaluate F on

1313
00:54:10,380 --> 00:54:12,540
elements of H

1314
00:54:12,540 --> 00:54:14,520
and acting together then that's equal to

1315
00:54:14,520 --> 00:54:16,440
s

1316
00:54:16,440 --> 00:54:18,720
so that is what a subject argument is

1317
00:54:18,720 --> 00:54:22,920
and this is what we need

1318
00:54:22,920 --> 00:54:27,300
based on the previous scheme to get uh

1319
00:54:27,300 --> 00:54:30,720
seek a snark for r1cs light constraint

1320
00:54:30,720 --> 00:54:32,959
system

1321
00:54:33,900 --> 00:54:37,859
um so firstly we noticed a nice very

1322
00:54:37,859 --> 00:54:40,619
simple and nice glamor so let HPM

1323
00:54:40,619 --> 00:54:43,079
multiplicate this out group of some

1324
00:54:43,079 --> 00:54:44,819
build f

1325
00:54:44,819 --> 00:54:49,380
Ile and let's denote the size of H by m

1326
00:54:49,380 --> 00:54:53,400
and that our polynomial f of x

1327
00:54:53,400 --> 00:54:57,059
be some degree d

1328
00:54:57,059 --> 00:54:59,700
then the following relationals

1329
00:54:59,700 --> 00:55:03,720
so you if you have this thumb over it

1330
00:55:03,720 --> 00:55:06,660
then that is actually equal

1331
00:55:06,660 --> 00:55:11,760
to end the size of the subgroup times

1332
00:55:11,760 --> 00:55:14,640
the following some you have fsis so

1333
00:55:14,640 --> 00:55:17,040
coefficients of f of x

1334
00:55:17,040 --> 00:55:20,280
and you add together those coefficients

1335
00:55:20,280 --> 00:55:23,460
where n divides I

1336
00:55:23,460 --> 00:55:26,940
and that is actually equal to this whole

1337
00:55:26,940 --> 00:55:27,839
sum

1338
00:55:27,839 --> 00:55:30,780
so this is a not a very complicated

1339
00:55:30,780 --> 00:55:33,599
lemon to probe I think our vapor took

1340
00:55:33,599 --> 00:55:35,579
maybe four or five lines

1341
00:55:35,579 --> 00:55:39,599
but it's mostly to observe this thing

1342
00:55:39,599 --> 00:55:41,040
so now

1343
00:55:41,040 --> 00:55:42,900
Let's uh

1344
00:55:42,900 --> 00:55:46,020
keep this landline in mind

1345
00:55:46,020 --> 00:55:49,020
and think what we can do with this

1346
00:55:49,020 --> 00:55:53,059
so okay this is our polynomial f of x

1347
00:55:53,059 --> 00:55:55,740
we want to add together based on this

1348
00:55:55,740 --> 00:55:58,980
formula all the coefficients where the

1349
00:55:58,980 --> 00:56:02,339
index divides by n so this is F0 FN F2

1350
00:56:02,339 --> 00:56:05,720
and f3n and so on

1351
00:56:05,720 --> 00:56:09,839
uh let's fix some uh D gap which is

1352
00:56:09,839 --> 00:56:13,140
larger than the degree of the polynomial

1353
00:56:13,140 --> 00:56:15,359
and then we want to do the following

1354
00:56:15,359 --> 00:56:19,200
we want to multiply f of x by some

1355
00:56:19,200 --> 00:56:21,540
polynomial s of x

1356
00:56:21,540 --> 00:56:24,780
and we'll see in a moment what this is

1357
00:56:24,780 --> 00:56:28,140
so I said the result is

1358
00:56:28,140 --> 00:56:31,440
those the sum of the coefficients

1359
00:56:31,440 --> 00:56:33,660
uh

1360
00:56:33,660 --> 00:56:36,960
where the index divided by n

1361
00:56:36,960 --> 00:56:40,740
so this is the coefficient of XD Gap

1362
00:56:40,740 --> 00:56:43,260
namely if you look at this formula then

1363
00:56:43,260 --> 00:56:45,839
this is actually equal to the

1364
00:56:45,839 --> 00:56:49,740
this sum divided by n n is the size of

1365
00:56:49,740 --> 00:56:50,880
the group

1366
00:56:50,880 --> 00:56:52,740
and then for the rest of the

1367
00:56:52,740 --> 00:56:55,140
cooperations uh we don't really care

1368
00:56:55,140 --> 00:56:56,880
when there are regions does nothing by G

1369
00:56:56,880 --> 00:56:58,020
of X and

1370
00:56:58,020 --> 00:57:00,180
let them be

1371
00:57:00,180 --> 00:57:03,300
so how do we make this s of x

1372
00:57:03,300 --> 00:57:06,119
we can fix it fixed as well first you

1373
00:57:06,119 --> 00:57:08,280
have x to the power of D Gap provide

1374
00:57:08,280 --> 00:57:10,339
this because if you take this value

1375
00:57:10,339 --> 00:57:13,079
multiply it by F 0

1376
00:57:13,079 --> 00:57:16,619
then it will have

1377
00:57:16,619 --> 00:57:19,859
get the monomial XD Gap similarly for

1378
00:57:19,859 --> 00:57:22,319
the next one XD get minus one if you

1379
00:57:22,319 --> 00:57:24,480
multiply by this by

1380
00:57:24,480 --> 00:57:28,140
FN X to then then again you get that

1381
00:57:28,140 --> 00:57:30,720
this will become part of this XD Gap and

1382
00:57:30,720 --> 00:57:33,020
so on

1383
00:57:33,180 --> 00:57:34,380
okay

1384
00:57:34,380 --> 00:57:37,079
so we got this nice formula f of x times

1385
00:57:37,079 --> 00:57:41,579
s of x equals s over n x d Gap and then

1386
00:57:41,579 --> 00:57:43,680
some G of X which we don't really care

1387
00:57:43,680 --> 00:57:45,859
about

1388
00:57:46,260 --> 00:57:49,079
and now based on this uh intuition we

1389
00:57:49,079 --> 00:57:52,440
can construct a new subject argument

1390
00:57:52,440 --> 00:57:55,079
that we call count because well it

1391
00:57:55,079 --> 00:57:56,700
counts

1392
00:57:56,700 --> 00:57:59,460
uh firstly here is the structured

1393
00:57:59,460 --> 00:58:00,900
reference string

1394
00:58:00,900 --> 00:58:04,619
so we pick some random Sigma

1395
00:58:04,619 --> 00:58:07,920
and especially if you take a look at

1396
00:58:07,920 --> 00:58:10,859
this burst uh elements in the first

1397
00:58:10,859 --> 00:58:12,180
group

1398
00:58:12,180 --> 00:58:15,059
then these are just powers of Sigma

1399
00:58:15,059 --> 00:58:15,780
um

1400
00:58:15,780 --> 00:58:19,319
but we are punctured at the point D Gap

1401
00:58:19,319 --> 00:58:22,740
so Brewer essentially cannot use Sigma

1402
00:58:22,740 --> 00:58:24,960
to the power of D Gap so this is very

1403
00:58:24,960 --> 00:58:26,880
important

1404
00:58:26,880 --> 00:58:31,079
so again Brewery knows f of x s and the

1405
00:58:31,079 --> 00:58:32,400
set h

1406
00:58:32,400 --> 00:58:35,700
verified knows a commitment and

1407
00:58:35,700 --> 00:58:37,400
so he knows

1408
00:58:37,400 --> 00:58:40,980
F of Sigma in group one

1409
00:58:40,980 --> 00:58:43,920
and the claimed sum and the set H and

1410
00:58:43,920 --> 00:58:46,220
set H here again is this

1411
00:58:46,220 --> 00:58:49,500
multiplicative subgroup of some finite

1412
00:58:49,500 --> 00:58:51,240
field at

1413
00:58:51,240 --> 00:58:53,819
so proverb computes the polynomial just

1414
00:58:53,819 --> 00:58:57,000
as we saw in the previous slide this G

1415
00:58:57,000 --> 00:58:59,359
of x

1416
00:58:59,460 --> 00:59:01,559
then you will just send this one value

1417
00:59:01,559 --> 00:59:04,980
in group one so he can compute this

1418
00:59:04,980 --> 00:59:08,940
because G of X is missing uh

1419
00:59:08,940 --> 00:59:13,559
this one monomial Sigma to the D Gap so

1420
00:59:13,559 --> 00:59:15,960
you can compute it

1421
00:59:15,960 --> 00:59:17,940
and now verify

1422
00:59:17,940 --> 00:59:22,140
checks this very same equation

1423
00:59:22,140 --> 00:59:25,440
and this is actually so here we get a

1424
00:59:25,440 --> 00:59:28,559
subject argument which contains only one

1425
00:59:28,559 --> 00:59:30,420
group element so it's

1426
00:59:30,420 --> 00:59:32,880
essentially or optimal at least the

1427
00:59:32,880 --> 00:59:35,839
number of group elements

1428
00:59:36,780 --> 00:59:38,579
so we proved the security of this

1429
00:59:38,579 --> 00:59:40,880
argument in algebraic group model

1430
00:59:40,880 --> 00:59:43,819
the previous best uh

1431
00:59:43,819 --> 00:59:45,859
subject argument

1432
00:59:45,859 --> 00:59:51,020
was by from Aurora's um

1433
00:59:51,599 --> 00:59:54,420
um so here is the rough comparison in

1434
00:59:54,420 --> 00:59:56,819
the S3 size we are worse we are about

1435
00:59:56,819 --> 00:59:58,740
double

1436
00:59:58,740 --> 00:59:59,339
um

1437
00:59:59,339 --> 01:00:01,440
Brewer's complexity is somewhat hard to

1438
01:00:01,440 --> 01:00:03,660
compare without an implementation

1439
01:00:03,660 --> 01:00:06,420
uh verifiers complexity is the same and

1440
01:00:06,420 --> 01:00:09,359
improved size we improved

1441
01:00:09,359 --> 01:00:10,559
but

1442
01:00:10,559 --> 01:00:13,859
two group m is the one group

1443
01:00:13,859 --> 01:00:15,960
okay so how

1444
01:00:15,960 --> 01:00:19,020
what do we in the industry so we have

1445
01:00:19,020 --> 01:00:21,240
now a subject argument

1446
01:00:21,240 --> 01:00:24,480
from this based on the scheme that I

1447
01:00:24,480 --> 01:00:25,980
showed you before we can get an

1448
01:00:25,980 --> 01:00:27,260
interactive

1449
01:00:27,260 --> 01:00:30,420
serial knowledge argument

1450
01:00:30,420 --> 01:00:32,579
then on top we will use some very

1451
01:00:32,579 --> 01:00:34,880
aggressive batching techniques

1452
01:00:34,880 --> 01:00:38,460
to reduce the actually the opening

1453
01:00:38,460 --> 01:00:39,660
proves

1454
01:00:39,660 --> 01:00:42,359
used for commitments

1455
01:00:42,359 --> 01:00:44,460
and then we prove knowledge service

1456
01:00:44,460 --> 01:00:48,260
again in the algebraic group model

1457
01:00:53,940 --> 01:00:58,140
and finally to get the zika snark we use

1458
01:00:58,140 --> 01:01:00,619
pH me realistic because

1459
01:01:00,619 --> 01:01:05,180
our interactive protocol is public

1460
01:01:05,880 --> 01:01:08,960
thank you for listening

1461
01:01:12,180 --> 01:01:14,899
question

1462
01:01:33,000 --> 01:01:35,220
there are no questions so let's thank

1463
01:01:35,220 --> 01:01:38,480
the speaker again

1464
01:01:38,480 --> 01:01:41,480
thank you

1465
01:01:42,140 --> 01:01:44,579
and next talk

1466
01:01:44,579 --> 01:01:49,500
uh it's about sidh proof of knowledge

1467
01:01:49,500 --> 01:01:54,059
a work by Luca defero Samuel Dobson uh

1468
01:01:54,059 --> 01:01:58,619
St Stephen Galway and Lucas to Albany

1469
01:01:58,619 --> 01:02:02,640
and look at the Pearl should give the

1470
01:02:02,640 --> 01:02:04,260
talk online

1471
01:02:04,260 --> 01:02:06,020
look are you ready

1472
01:02:06,020 --> 01:02:09,240
I think I am can you see my screen yes

1473
01:02:09,240 --> 01:02:11,460
great we can hear you well so okay

1474
01:02:11,460 --> 01:02:12,720
that's great

1475
01:02:12,720 --> 01:02:15,599
so uh thank you very much and let's get

1476
01:02:15,599 --> 01:02:17,220
started

1477
01:02:17,220 --> 01:02:18,900
um so as you said this is a joint work

1478
01:02:18,900 --> 01:02:20,880
with a bunch of nice people from

1479
01:02:20,880 --> 01:02:24,359
University of Auckland and we are all

1480
01:02:24,359 --> 01:02:26,700
very sorry that no one could could come

1481
01:02:26,700 --> 01:02:29,040
to the conference so we apologize for

1482
01:02:29,040 --> 01:02:31,140
that would have been a pleasure to be

1483
01:02:31,140 --> 01:02:33,119
there with you

1484
01:02:33,119 --> 01:02:33,900
um

1485
01:02:33,900 --> 01:02:35,640
so don't get don't be scared by the

1486
01:02:35,640 --> 01:02:38,280
title this is titled sidh proof of

1487
01:02:38,280 --> 01:02:41,760
knowledge uh but still uh there is

1488
01:02:41,760 --> 01:02:43,260
something interesting in it it's not

1489
01:02:43,260 --> 01:02:46,920
broken not everything is broken at least

1490
01:02:46,920 --> 01:02:47,460
um

1491
01:02:47,460 --> 01:02:51,119
and I'm going to explain what our goal

1492
01:02:51,119 --> 01:02:54,599
is and uh What uh what we can save after

1493
01:02:54,599 --> 01:02:57,119
this terrible summer

1494
01:02:57,119 --> 01:02:58,380
so

1495
01:02:58,380 --> 01:02:59,880
um this is about proving knowledge of an

1496
01:02:59,880 --> 01:03:01,260
isogeny

1497
01:03:01,260 --> 01:03:03,480
so uh in this talk and as originally

1498
01:03:03,480 --> 01:03:06,119
will be an arrow between two letters e

1499
01:03:06,119 --> 01:03:10,140
okay e01 represent two LED curves and

1500
01:03:10,140 --> 01:03:12,900
Phi which is the name I like to give to

1501
01:03:12,900 --> 01:03:15,720
the exogeny is an Exogen between the

1502
01:03:15,720 --> 01:03:18,180
disability curves

1503
01:03:18,180 --> 01:03:20,220
Buddhism misogyny of course it's a group

1504
01:03:20,220 --> 01:03:23,579
morphism it is an ultrabragmorphism all

1505
01:03:23,579 --> 01:03:26,760
these definitions uh that you may know

1506
01:03:26,760 --> 01:03:29,520
or not I will try to keep things simple

1507
01:03:29,520 --> 01:03:33,359
and just do everything by uh Push by

1508
01:03:33,359 --> 01:03:34,440
picture

1509
01:03:34,440 --> 01:03:36,119
so why do we want to prove knowledge of

1510
01:03:36,119 --> 01:03:38,700
another Journey as you know uh given two

1511
01:03:38,700 --> 01:03:40,859
super Singularity curve or more

1512
01:03:40,859 --> 01:03:43,440
generally given two reality curves it is

1513
01:03:43,440 --> 01:03:46,559
difficult to uh compute an exogeny

1514
01:03:46,559 --> 01:03:49,920
between them in general then depends how

1515
01:03:49,920 --> 01:03:51,420
you state exactly the problem there are

1516
01:03:51,420 --> 01:03:53,700
some easy instances and some harder but

1517
01:03:53,700 --> 01:03:55,559
the generic problems they give you two

1518
01:03:55,559 --> 01:03:57,420
LED curves find an exogeny it's

1519
01:03:57,420 --> 01:03:59,339
difficult and so of course if you can

1520
01:03:59,339 --> 01:04:01,319
prove knowledge organization between

1521
01:04:01,319 --> 01:04:02,520
toiletic curves you are proving an

1522
01:04:02,520 --> 01:04:04,020
entrepreneurial statement from that you

1523
01:04:04,020 --> 01:04:06,960
can produce signatures you can produce

1524
01:04:06,960 --> 01:04:10,020
verifiable whatever kind of primitive

1525
01:04:10,020 --> 01:04:13,920
you can think of prfs Etc

1526
01:04:13,920 --> 01:04:17,160
um our goal our main motivation when we

1527
01:04:17,160 --> 01:04:20,160
started this work was to uh provide

1528
01:04:20,160 --> 01:04:21,960
non-interactive case change based on

1529
01:04:21,960 --> 01:04:24,059
sidh now this of course is something

1530
01:04:24,059 --> 01:04:26,520
that's broken because sidhp in broken

1531
01:04:26,520 --> 01:04:28,680
you can hold you can't really hope for

1532
01:04:28,680 --> 01:04:31,079
the non-interactive case change to uh to

1533
01:04:31,079 --> 01:04:32,940
be safe

1534
01:04:32,940 --> 01:04:35,160
um but

1535
01:04:35,160 --> 01:04:37,140
uh this is just one of the possible

1536
01:04:37,140 --> 01:04:39,180
applications and the protocols that we

1537
01:04:39,180 --> 01:04:42,000
that I'm going to describe still uh work

1538
01:04:42,000 --> 01:04:44,040
can be useful for for other applications

1539
01:04:44,040 --> 01:04:45,599
and more generally of course the

1540
01:04:45,599 --> 01:04:46,859
question why proving knowledge of

1541
01:04:46,859 --> 01:04:52,740
exogenes uh why not right you uh

1542
01:04:52,740 --> 01:04:55,799
you uh you definitely this is definitely

1543
01:04:55,799 --> 01:04:58,140
a primitive that you need to use in many

1544
01:04:58,140 --> 01:05:00,540
many different locations

1545
01:05:00,540 --> 01:05:02,940
so uh

1546
01:05:02,940 --> 01:05:05,520
again here is my problem I have two LED

1547
01:05:05,520 --> 01:05:09,119
curves e01 and isogeny uh Phi between

1548
01:05:09,119 --> 01:05:12,900
them which uh I will draw as Dash to

1549
01:05:12,900 --> 01:05:15,720
signify that this exogeny is a secret

1550
01:05:15,720 --> 01:05:19,859
it's the witness to uh to uh to my uh to

1551
01:05:19,859 --> 01:05:23,339
my NP relation and my goal is to provide

1552
01:05:23,339 --> 01:05:25,740
a proof of knowledge of this exogeny

1553
01:05:25,740 --> 01:05:27,119
um everything I'm going to describe are

1554
01:05:27,119 --> 01:05:29,040
going to be Sigma protocols so I guess I

1555
01:05:29,040 --> 01:05:31,799
don't need to uh Define details there

1556
01:05:31,799 --> 01:05:33,720
will be approver a verifier and they

1557
01:05:33,720 --> 01:05:37,380
will exchange uh uh a few messages and

1558
01:05:37,380 --> 01:05:38,940
in the end the verifier will be

1559
01:05:38,940 --> 01:05:41,599
convinced or not

1560
01:05:41,640 --> 01:05:43,680
um when I say

1561
01:05:43,680 --> 01:05:46,319
witness when I say proving knowledge of

1562
01:05:46,319 --> 01:05:48,480
an exogeny I need to be slightly more

1563
01:05:48,480 --> 01:05:49,859
precise because what does it mean to

1564
01:05:49,859 --> 01:05:52,140
provide a to no one exogeny if you've

1565
01:05:52,140 --> 01:05:54,960
seen isogeny talks you uh you may have

1566
01:05:54,960 --> 01:05:56,940
noticed that people use different ways

1567
01:05:56,940 --> 01:05:58,500
to represent exogenes sometimes they

1568
01:05:58,500 --> 01:06:00,240
talk about kernels I will be talking

1569
01:06:00,240 --> 01:06:02,160
about kernels

1570
01:06:02,160 --> 01:06:04,559
um sometimes they talk about group

1571
01:06:04,559 --> 01:06:07,500
actions or strange words

1572
01:06:07,500 --> 01:06:10,920
um but let's keep it simple uh so our

1573
01:06:10,920 --> 01:06:12,720
language is the language of super

1574
01:06:12,720 --> 01:06:14,819
Singularity curves so I will give you

1575
01:06:14,819 --> 01:06:16,619
two super similarity curves defined over

1576
01:06:16,619 --> 01:06:19,559
some finite fields and to suppressing

1577
01:06:19,559 --> 01:06:22,160
your LED curves are by definition

1578
01:06:22,160 --> 01:06:24,240
isogenous there is always going to be

1579
01:06:24,240 --> 01:06:26,579
some misogyny between them

1580
01:06:26,579 --> 01:06:28,319
um so proving knowledge of anisogyny

1581
01:06:28,319 --> 01:06:30,839
will amount to uh prove knowledge of

1582
01:06:30,839 --> 01:06:34,859
some weakness which uh typically will

1583
01:06:34,859 --> 01:06:38,160
represent as an exogenic walk

1584
01:06:38,160 --> 01:06:40,440
um so you can picture this as our genify

1585
01:06:40,440 --> 01:06:43,380
that goes from E to zero to E1 as a

1586
01:06:43,380 --> 01:06:45,960
sequence of elite curves that are along

1587
01:06:45,960 --> 01:06:51,240
the way from e031. and uh the steps

1588
01:06:51,240 --> 01:06:53,039
between these alliti curves are you can

1589
01:06:53,039 --> 01:06:55,859
think them as small steps and the the

1590
01:06:55,859 --> 01:06:58,680
long walk from e0 to uh to E1 will be

1591
01:06:58,680 --> 01:07:01,740
somewhat longer a few hundred steps uh

1592
01:07:01,740 --> 01:07:02,880
and of course

1593
01:07:02,880 --> 01:07:05,760
each single step is very easy to do but

1594
01:07:05,760 --> 01:07:08,700
doing the Long Walk becomes very messy

1595
01:07:08,700 --> 01:07:13,020
so this uh just a picture to give you a

1596
01:07:13,020 --> 01:07:15,240
visual realization of what we're talking

1597
01:07:15,240 --> 01:07:18,000
about here the dots represent some super

1598
01:07:18,000 --> 01:07:20,760
Singularity Curves in some small finite

1599
01:07:20,760 --> 01:07:22,319
Fields not the cryptographic size of

1600
01:07:22,319 --> 01:07:26,339
course and uh the the black path uh

1601
01:07:26,339 --> 01:07:28,680
shows a

1602
01:07:28,680 --> 01:07:31,200
a walk between these two entity groups

1603
01:07:31,200 --> 01:07:34,319
so ah stop moving

1604
01:07:34,319 --> 01:07:39,240
so you can uh you can picture uh some

1605
01:07:39,240 --> 01:07:41,880
notes to be closer and then to other

1606
01:07:41,880 --> 01:07:44,039
notes and these are the small steps in

1607
01:07:44,039 --> 01:07:48,420
the graphs and um and then you have

1608
01:07:48,420 --> 01:07:51,900
um some lengths that may be uh as long

1609
01:07:51,900 --> 01:07:54,180
as a generic walk in the graph we'll see

1610
01:07:54,180 --> 01:07:57,000
that how long the work is plays a role

1611
01:07:57,000 --> 01:07:58,799
in these protocols

1612
01:07:58,799 --> 01:07:59,640
um

1613
01:07:59,640 --> 01:08:01,799
the important thing is that this is a

1614
01:08:01,799 --> 01:08:03,960
representation that clearly takes

1615
01:08:03,960 --> 01:08:06,240
polynomial space to uh to write down

1616
01:08:06,240 --> 01:08:07,799
right because you just need to write the

1617
01:08:07,799 --> 01:08:09,900
listability curves now in practice when

1618
01:08:09,900 --> 01:08:11,520
we Implement these protocols we don't

1619
01:08:11,520 --> 01:08:13,380
really write down the listability curves

1620
01:08:13,380 --> 01:08:15,539
that's not to the most efficient way but

1621
01:08:15,539 --> 01:08:17,640
for understanding the theory that's

1622
01:08:17,640 --> 01:08:19,698
that's definitely sufficient

1623
01:08:19,698 --> 01:08:22,738
so uh let's start with a protocol that

1624
01:08:22,738 --> 01:08:24,899
sounds obvious but doesn't really work

1625
01:08:24,899 --> 01:08:27,540
in general so I have my two LT curbs 01

1626
01:08:27,540 --> 01:08:28,920
I want to prove knowledge of the other

1627
01:08:28,920 --> 01:08:32,040
genify I can start by taking a random

1628
01:08:32,040 --> 01:08:33,600
mesogenic side to some other entity

1629
01:08:33,600 --> 01:08:36,000
curve and I will use the arrival curve

1630
01:08:36,000 --> 01:08:38,339
E2 as a commitment

1631
01:08:38,339 --> 01:08:40,979
and then I can imagine a binary

1632
01:08:40,979 --> 01:08:43,620
challenge a sigma protocol where I get

1633
01:08:43,620 --> 01:08:46,020
challenged with the bit to zero one if

1634
01:08:46,020 --> 01:08:48,359
the bit is zero I will reveal PSI so

1635
01:08:48,359 --> 01:08:49,738
this of course is unrelated to the

1636
01:08:49,738 --> 01:08:52,020
secret test origin doesn't reveal

1637
01:08:52,020 --> 01:08:54,359
doesn't reveal much but of course if the

1638
01:08:54,359 --> 01:08:55,859
bit is one I will reveal something

1639
01:08:55,859 --> 01:08:57,839
that's correlated to the secret and it

1640
01:08:57,839 --> 01:09:00,120
will be the composition of PSI compose

1641
01:09:00,120 --> 01:09:03,920
uh Phi the opposite way the other way

1642
01:09:03,920 --> 01:09:07,198
now this sounds like a reasonable way to

1643
01:09:07,198 --> 01:09:09,600
do uh things it's it's very similar to

1644
01:09:09,600 --> 01:09:11,939
uh the classic rough isomorphism proof

1645
01:09:11,939 --> 01:09:13,679
of Sigma protocol

1646
01:09:13,679 --> 01:09:16,319
um it also kind of works in some cases

1647
01:09:16,319 --> 01:09:19,679
it works for Seaside it works for

1648
01:09:19,679 --> 01:09:21,660
ordinary curves more generally works for

1649
01:09:21,660 --> 01:09:23,759
the whole framework of cryptographic

1650
01:09:23,759 --> 01:09:26,279
group actions and this is how isogeny

1651
01:09:26,279 --> 01:09:27,899
based signature schemes based on C side

1652
01:09:27,899 --> 01:09:30,000
are made so you may know about Seaside

1653
01:09:30,000 --> 01:09:31,500
and sea fish

1654
01:09:31,500 --> 01:09:33,839
it even works more generally for General

1655
01:09:33,839 --> 01:09:36,060
super singular curves

1656
01:09:36,060 --> 01:09:37,859
um and now Seaside are suppressing your

1657
01:09:37,859 --> 01:09:39,719
curse but they're not General and we're

1658
01:09:39,719 --> 01:09:41,160
looking for something that works in

1659
01:09:41,160 --> 01:09:43,040
general this is the catch

1660
01:09:43,040 --> 01:09:45,839
gabrapathy and Silva showed that if you

1661
01:09:45,839 --> 01:09:47,939
know the anomorphism Ring of is zero

1662
01:09:47,939 --> 01:09:49,679
then you can do this kind of protocol

1663
01:09:49,679 --> 01:09:51,540
with a binary Challenge and like

1664
01:09:51,540 --> 01:09:53,520
essentially drawing a commutative

1665
01:09:53,520 --> 01:09:55,020
triangle

1666
01:09:55,020 --> 01:09:57,239
um but again knowing the anomorphism

1667
01:09:57,239 --> 01:09:58,860
Ring of v0 is not General Plus

1668
01:09:58,860 --> 01:10:01,620
gulprivity silver it's not the most

1669
01:10:01,620 --> 01:10:03,600
efficient protocol on Earth and we're

1670
01:10:03,600 --> 01:10:05,580
more interested in having something that

1671
01:10:05,580 --> 01:10:08,940
works all the time and can run on a

1672
01:10:08,940 --> 01:10:10,860
computer in a reasonable time and this

1673
01:10:10,860 --> 01:10:14,520
is something that's not known uh we

1674
01:10:14,520 --> 01:10:16,080
don't know how to make this kind of a

1675
01:10:16,080 --> 01:10:18,060
commutative triangle in general for

1676
01:10:18,060 --> 01:10:20,400
subversing your curves accepting ways

1677
01:10:20,400 --> 01:10:22,560
that are trivial and that are not zero

1678
01:10:22,560 --> 01:10:23,699
knowledge which of course wouldn't be

1679
01:10:23,699 --> 01:10:26,178
very useful

1680
01:10:26,340 --> 01:10:27,900
um so there is one technical ingredient

1681
01:10:27,900 --> 01:10:32,520
and this is uh what's uh left of sidh I

1682
01:10:32,520 --> 01:10:35,400
guess uh at least in spirit sidh still

1683
01:10:35,400 --> 01:10:37,980
lives in this uh Community diagrams that

1684
01:10:37,980 --> 01:10:40,199
we could that we could push outs so

1685
01:10:40,199 --> 01:10:42,000
instead of drawing commutative triangles

1686
01:10:42,000 --> 01:10:43,679
which are a bit complicated to make we

1687
01:10:43,679 --> 01:10:45,480
will draw commodity squares which are

1688
01:10:45,480 --> 01:10:46,980
very easy to construct using a direct

1689
01:10:46,980 --> 01:10:49,500
construction that's called a push out so

1690
01:10:49,500 --> 01:10:51,480
if I have an exogenify it could be my

1691
01:10:51,480 --> 01:10:53,400
Securities Agony and another resolution

1692
01:10:53,400 --> 01:10:56,640
PSI which could be my commitment asogeny

1693
01:10:56,640 --> 01:10:59,880
um I can push one exogeny through the

1694
01:10:59,880 --> 01:11:01,860
other so for example I can push 5

1695
01:11:01,860 --> 01:11:05,239
through through PSI to compute some

1696
01:11:05,239 --> 01:11:07,440
isogenify prime which I will call

1697
01:11:07,440 --> 01:11:10,260
parallel to Phi so beam parallel is not

1698
01:11:10,260 --> 01:11:12,719
like it's something that's respective to

1699
01:11:12,719 --> 01:11:15,719
uh to a third desert right so Phi is

1700
01:11:15,719 --> 01:11:17,520
parallel to Phi Prime with respect to

1701
01:11:17,520 --> 01:11:19,860
psi and this in Practical terms in

1702
01:11:19,860 --> 01:11:22,380
algebraic terms means that the kernel of

1703
01:11:22,380 --> 01:11:25,140
Phi Prime is the image through PSI or of

1704
01:11:25,140 --> 01:11:26,900
the granola fight

1705
01:11:26,900 --> 01:11:30,000
when you do this then you can also push

1706
01:11:30,000 --> 01:11:32,940
the other way you can push PSI through 5

1707
01:11:32,940 --> 01:11:35,460
and what you get is an isogen of PSI

1708
01:11:35,460 --> 01:11:37,140
Prime which is parallel to psi and the

1709
01:11:37,140 --> 01:11:39,060
diagram commutes so this is the generic

1710
01:11:39,060 --> 01:11:41,400
construction of a push shot and the case

1711
01:11:41,400 --> 01:11:42,960
where it's most useful and most

1712
01:11:42,960 --> 01:11:44,699
interesting for crypto and that's the

1713
01:11:44,699 --> 01:11:47,580
case that was used in sidh is where the

1714
01:11:47,580 --> 01:11:49,800
degrees of Phi M PSI are co-prime so I

1715
01:11:49,800 --> 01:11:52,020
can call them capital A and capital B

1716
01:11:52,020 --> 01:11:54,719
you can think of them as being a power

1717
01:11:54,719 --> 01:11:56,840
or two and power three like exactly

1718
01:11:56,840 --> 01:11:59,400
there's a typo there doesn't have to be

1719
01:11:59,400 --> 01:12:01,440
the same power two and three could be

1720
01:12:01,440 --> 01:12:04,020
two power n three power M but so you can

1721
01:12:04,020 --> 01:12:06,120
think them as being powers or some small

1722
01:12:06,120 --> 01:12:07,500
Prime but all that I'm going to say

1723
01:12:07,500 --> 01:12:09,600
Works more generally at least the basic

1724
01:12:09,600 --> 01:12:11,280
principle then implementing is a bit

1725
01:12:11,280 --> 01:12:13,440
different maybe as long as the degrees A

1726
01:12:13,440 --> 01:12:16,679
and B are co-prime everything works

1727
01:12:16,679 --> 01:12:19,980
uh now here's a protocol that

1728
01:12:19,980 --> 01:12:21,960
intuitively should work and that's a

1729
01:12:21,960 --> 01:12:24,000
protocol that uh with daily jao Andrew

1730
01:12:24,000 --> 01:12:26,699
improved we proposed back in 2012 when

1731
01:12:26,699 --> 01:12:29,219
we first introduced sidh and the idea is

1732
01:12:29,219 --> 01:12:31,800
well let's do the same and same thing as

1733
01:12:31,800 --> 01:12:33,659
the commutative triangle as the graph

1734
01:12:33,659 --> 01:12:37,020
isomorphism but instead of revealing uh

1735
01:12:37,020 --> 01:12:40,620
one out of two possible answers we will

1736
01:12:40,620 --> 01:12:42,780
reveal one out of three possible answers

1737
01:12:42,780 --> 01:12:45,420
so I can construct so let's say Phi is

1738
01:12:45,420 --> 01:12:47,580
my secret that I want to prove knowledge

1739
01:12:47,580 --> 01:12:50,219
of and I can construct the push out on

1740
01:12:50,219 --> 01:12:52,800
top of some random misogynypsi and Phi

1741
01:12:52,800 --> 01:12:55,620
and then I will get challenged with one

1742
01:12:55,620 --> 01:12:58,020
of three possible challenges so if I get

1743
01:12:58,020 --> 01:13:00,840
challenged with bit well tricked zero I

1744
01:13:00,840 --> 01:13:03,179
would reveal PSI if I get challenged

1745
01:13:03,179 --> 01:13:04,980
with three to one I would really be

1746
01:13:04,980 --> 01:13:06,840
outside Prime and if I get challenged

1747
01:13:06,840 --> 01:13:11,219
with it too uh I will reveal Phi Prime

1748
01:13:11,219 --> 01:13:13,020
um this is almost the way it's described

1749
01:13:13,020 --> 01:13:15,300
in the field gel group

1750
01:13:15,300 --> 01:13:18,239
um now the field job clue explains how

1751
01:13:18,239 --> 01:13:21,179
um use binary challenges instead of

1752
01:13:21,179 --> 01:13:23,400
eternally challenges which made a lot of

1753
01:13:23,400 --> 01:13:26,040
sense in the sij setting but doesn't

1754
01:13:26,040 --> 01:13:28,500
make much sense anymore so let's stick

1755
01:13:28,500 --> 01:13:30,960
to uh to this example here let's stick

1756
01:13:30,960 --> 01:13:34,080
to uh one out of three three challenges

1757
01:13:34,080 --> 01:13:36,960
and now I mean this protocol seems

1758
01:13:36,960 --> 01:13:39,480
reasonable uh it's clearly correct like

1759
01:13:39,480 --> 01:13:41,159
if you know the isogenify you can

1760
01:13:41,159 --> 01:13:42,840
clearly construct the push out so there

1761
01:13:42,840 --> 01:13:44,940
is no problem and now we need to prove a

1762
01:13:44,940 --> 01:13:46,920
course knowledge soundness and zero

1763
01:13:46,920 --> 01:13:50,820
knowledge and this is one uh where I

1764
01:13:50,820 --> 01:13:55,500
things are a bit uh nasty so this is the

1765
01:13:55,500 --> 01:13:59,520
way that back in uh 2012 not 2011 we

1766
01:13:59,520 --> 01:14:03,179
proved uh the the special Summoners of

1767
01:14:03,179 --> 01:14:04,920
this protocol we said okay let's say

1768
01:14:04,920 --> 01:14:08,120
that the resale misogyny Phi from e031

1769
01:14:08,120 --> 01:14:11,340
uh it it is enough to know two sides of

1770
01:14:11,340 --> 01:14:13,920
the square so I can know for example the

1771
01:14:13,920 --> 01:14:16,500
the the sides the two sides in blue here

1772
01:14:16,500 --> 01:14:19,020
and then I can of course pull back the

1773
01:14:19,020 --> 01:14:21,900
exogeny from e233 along the azogeny from

1774
01:14:21,900 --> 01:14:24,300
me 032 and then I will recompute the

1775
01:14:24,300 --> 01:14:25,860
secretes alternating so I can clearly

1776
01:14:25,860 --> 01:14:29,340
extract uh from just two answers to

1777
01:14:29,340 --> 01:14:31,679
correct answers I can clearly extract

1778
01:14:31,679 --> 01:14:34,620
the secret isogeny the same would work

1779
01:14:34,620 --> 01:14:36,960
if instead of If instead of the one from

1780
01:14:36,960 --> 01:14:39,659
zero to two I had the energy from uh E1

1781
01:14:39,659 --> 01:14:41,640
to E3 the only one that doesn't work is

1782
01:14:41,640 --> 01:14:43,440
having the two parallelogenes that go

1783
01:14:43,440 --> 01:14:46,199
from e01 to E2

1784
01:14:46,199 --> 01:14:48,179
now this seems reasonable but it's of

1785
01:14:48,179 --> 01:14:50,219
course wrong because when you prove

1786
01:14:50,219 --> 01:14:51,960
knowledge soundness you need to assume

1787
01:14:51,960 --> 01:14:53,940
that you have a cheat improver another

1788
01:14:53,940 --> 01:14:55,560
cheat improver

1789
01:14:55,560 --> 01:14:59,219
um does not necessarily even give you a

1790
01:14:59,219 --> 01:15:02,280
pair 01 which is in the language it is

1791
01:15:02,280 --> 01:15:05,040
totally possible it happens and it has

1792
01:15:05,040 --> 01:15:07,800
been remarked a couple of times just

1793
01:15:07,800 --> 01:15:10,380
this past year that

1794
01:15:10,380 --> 01:15:11,400
um

1795
01:15:11,400 --> 01:15:14,340
given the sidh parameters it is not

1796
01:15:14,340 --> 01:15:15,719
obvious that the reason is alternated

1797
01:15:15,719 --> 01:15:18,600
from e0 to 1 of the right length and

1798
01:15:18,600 --> 01:15:20,040
it's actually work the of the right

1799
01:15:20,040 --> 01:15:22,140
light so we may be in a case like this

1800
01:15:22,140 --> 01:15:24,659
where the sides are not really parallel

1801
01:15:24,659 --> 01:15:27,840
and then uh like you have no way to of

1802
01:15:27,840 --> 01:15:29,520
knowing whether there is a witness so if

1803
01:15:29,520 --> 01:15:31,920
there is not even a witness how can you

1804
01:15:31,920 --> 01:15:35,460
even extract it so um there was a flow

1805
01:15:35,460 --> 01:15:38,040
in the in the proof we were making some

1806
01:15:38,040 --> 01:15:39,900
wrong assumption

1807
01:15:39,900 --> 01:15:41,699
um and

1808
01:15:41,699 --> 01:15:44,640
um this was only noticed very recently

1809
01:15:44,640 --> 01:15:47,280
um and so what we did in this paper is

1810
01:15:47,280 --> 01:15:49,920
essentially fix the soundness issue and

1811
01:15:49,920 --> 01:15:52,640
now I'm going to explain what our fix

1812
01:15:52,640 --> 01:15:55,860
which you may think of of it as being

1813
01:15:55,860 --> 01:15:57,780
elegant or not elegant depending on your

1814
01:15:57,780 --> 01:15:59,460
testis

1815
01:15:59,460 --> 01:16:01,440
um how our fix works

1816
01:16:01,440 --> 01:16:04,920
so the idea is to uh again get some sidh

1817
01:16:04,920 --> 01:16:07,080
flavor and use some torsion Point

1818
01:16:07,080 --> 01:16:10,140
information to force the diagram to uh

1819
01:16:10,140 --> 01:16:12,300
to exist to force the sides of the

1820
01:16:12,300 --> 01:16:14,640
square to be parallel so to to really

1821
01:16:14,640 --> 01:16:15,719
have a square

1822
01:16:15,719 --> 01:16:17,820
so the idea is that instead of

1823
01:16:17,820 --> 01:16:19,980
committing just two LED curves we will

1824
01:16:19,980 --> 01:16:24,060
commit to some uh torsion bases uh or

1825
01:16:24,060 --> 01:16:26,100
some level structure if you like so

1826
01:16:26,100 --> 01:16:28,980
we'll take random torsion base basis P2

1827
01:16:28,980 --> 01:16:32,880
Q2 of the beat option so this B is the

1828
01:16:32,880 --> 01:16:34,620
same as the degree of the exogeny that

1829
01:16:34,620 --> 01:16:37,080
goes from e0 to E2 and so this will be

1830
01:16:37,080 --> 01:16:39,120
useful to describe the kernel of the

1831
01:16:39,120 --> 01:16:42,480
exogenes of the vertical isojis Psi Psi

1832
01:16:42,480 --> 01:16:44,219
and type

1833
01:16:44,219 --> 01:16:45,840
um we need another to commit to

1834
01:16:45,840 --> 01:16:47,460
something else we need to commit to a

1835
01:16:47,460 --> 01:16:50,159
pair of integers A and B whose rule is

1836
01:16:50,159 --> 01:16:53,460
going to be clear uh in just immediately

1837
01:16:53,460 --> 01:16:55,140
now

1838
01:16:55,140 --> 01:16:58,020
Let's uh let's construct the community

1839
01:16:58,020 --> 01:17:00,179
the usual commutative Square on top of

1840
01:17:00,179 --> 01:17:02,520
this uh of this

1841
01:17:02,520 --> 01:17:06,540
um easy way to a One E3 and now let's

1842
01:17:06,540 --> 01:17:07,860
let's describe the protocol the product

1843
01:17:07,860 --> 01:17:09,900
is is again going to be a three

1844
01:17:09,900 --> 01:17:12,300
challenges protocol zero one or two and

1845
01:17:12,300 --> 01:17:14,699
depending on what uh treat I receive I

1846
01:17:14,699 --> 01:17:16,320
will leave one answer so the first

1847
01:17:16,320 --> 01:17:19,020
answer I can give uh let's start for

1848
01:17:19,020 --> 01:17:22,320
example from a challenge uh from being

1849
01:17:22,320 --> 01:17:24,780
challenged to reveal the bottom as OJ so

1850
01:17:24,780 --> 01:17:28,320
in this case I can open the lower uh

1851
01:17:28,320 --> 01:17:30,719
side of the triangle I can reveal Phi

1852
01:17:30,719 --> 01:17:31,980
Prime

1853
01:17:31,980 --> 01:17:34,260
um but I will also open my my commitment

1854
01:17:34,260 --> 01:17:37,380
so the gray boxes here represent some

1855
01:17:37,380 --> 01:17:39,780
um statistically hiding commitments so

1856
01:17:39,780 --> 01:17:41,880
that I can see what's in the gray boxes

1857
01:17:41,880 --> 01:17:44,850
only when when I open them

1858
01:17:44,850 --> 01:17:45,300
[Music]

1859
01:17:45,300 --> 01:17:46,080
um

1860
01:17:46,080 --> 01:17:49,199
and so now what what I have in red in

1861
01:17:49,199 --> 01:17:51,000
the bottom is the equation that the

1862
01:17:51,000 --> 01:17:53,159
verifier needs to check so the verifier

1863
01:17:53,159 --> 01:17:56,159
will check that the basis P2 the basis

1864
01:17:56,159 --> 01:17:59,219
P3 Q3 is the image of the basis P2 Q2

1865
01:17:59,219 --> 01:18:01,500
under the the isogeneous Phi Prime that

1866
01:18:01,500 --> 01:18:04,380
I just revealed let's look at the other

1867
01:18:04,380 --> 01:18:07,560
two uh openings when I get challenged

1868
01:18:07,560 --> 01:18:10,140
with uh revealing the left side of the

1869
01:18:10,140 --> 01:18:13,260
square I will reveal uh the dualizer

1870
01:18:13,260 --> 01:18:14,640
journey rather than the exogenia we

1871
01:18:14,640 --> 01:18:15,960
revealed there's actually that from E2

1872
01:18:15,960 --> 01:18:18,060
goes to a zero so anyway when you have

1873
01:18:18,060 --> 01:18:19,560
an assertion you can always think of it

1874
01:18:19,560 --> 01:18:21,960
as going both ways it's computationally

1875
01:18:21,960 --> 01:18:23,940
the same thing

1876
01:18:23,940 --> 01:18:26,880
um and so in this case what we'll do is

1877
01:18:26,880 --> 01:18:29,280
that I will open the the commitment to

1878
01:18:29,280 --> 01:18:32,040
the torsion basis p2q2 and I will also

1879
01:18:32,040 --> 01:18:33,840
open the commitment to the pair of

1880
01:18:33,840 --> 01:18:36,600
integers a b and what the verifier will

1881
01:18:36,600 --> 01:18:39,420
check is that the kernel of PSI uh had

1882
01:18:39,420 --> 01:18:42,239
the kernel of the jewel of PSI is the

1883
01:18:42,239 --> 01:18:44,699
linear combination of p2q2 described by

1884
01:18:44,699 --> 01:18:47,100
the coefficients A and B

1885
01:18:47,100 --> 01:18:47,880
um

1886
01:18:47,880 --> 01:18:51,300
and finally for the third opening uh

1887
01:18:51,300 --> 01:18:53,040
when I get the the challenge with the

1888
01:18:53,040 --> 01:18:54,360
third possibility revealing the right

1889
01:18:54,360 --> 01:18:56,640
side I will do exactly the same as the

1890
01:18:56,640 --> 01:18:59,100
left side I will open the pair a B I

1891
01:18:59,100 --> 01:19:01,199
will open the torsion mazes and I will

1892
01:19:01,199 --> 01:19:05,280
check that a times p 3 plus b times Q3

1893
01:19:05,280 --> 01:19:07,739
is the current law of PSI Prime halves

1894
01:19:07,739 --> 01:19:09,600
now

1895
01:19:09,600 --> 01:19:12,239
from this it is pretty easy file it is

1896
01:19:12,239 --> 01:19:14,460
finally easy to prove extraction we can

1897
01:19:14,460 --> 01:19:16,380
prove knowledge soundness how do we do

1898
01:19:16,380 --> 01:19:18,480
it well it's again about pushing

1899
01:19:18,480 --> 01:19:20,340
exogenism pulling exogenes through other

1900
01:19:20,340 --> 01:19:22,860
exogenes so if you have these three

1901
01:19:22,860 --> 01:19:25,199
conditions that I have in the bottom the

1902
01:19:25,199 --> 01:19:26,940
first thing you can do is that you can

1903
01:19:26,940 --> 01:19:30,900
pull back Phi Prime hat through Phi

1904
01:19:30,900 --> 01:19:31,679
Prime

1905
01:19:31,679 --> 01:19:35,219
which will be exactly equal to Phi hat

1906
01:19:35,219 --> 01:19:37,920
so having these stronger constraints on

1907
01:19:37,920 --> 01:19:39,780
the torsion having Distortion basis P

1908
01:19:39,780 --> 01:19:43,380
two Q two Q2 P3 Q3 and the fact that the

1909
01:19:43,380 --> 01:19:45,659
kernels are the same linear combination

1910
01:19:45,659 --> 01:19:49,440
of uh the the torsion bases this forces

1911
01:19:49,440 --> 01:19:52,080
the isogenes the verticalization is

1912
01:19:52,080 --> 01:19:55,920
psi-hat and psi-hat Prime to be parallel

1913
01:19:55,920 --> 01:19:58,620
and so this means that the kernels are

1914
01:19:58,620 --> 01:20:00,179
the push forward one of the other and

1915
01:20:00,179 --> 01:20:01,679
this means that because of the general

1916
01:20:01,679 --> 01:20:03,659
theorem once you have two parallel sides

1917
01:20:03,659 --> 01:20:06,000
the other two sides also are parallel so

1918
01:20:06,000 --> 01:20:07,800
this means that you can pull a push

1919
01:20:07,800 --> 01:20:10,140
forward the Phi Prime through uh PSI Hot

1920
01:20:10,140 --> 01:20:12,060
For example and you will finally extract

1921
01:20:12,060 --> 01:20:14,640
the weakness that you were looking for

1922
01:20:14,640 --> 01:20:16,800
so by redefine a little bit the

1923
01:20:16,800 --> 01:20:18,179
structure using distortional basis

1924
01:20:18,179 --> 01:20:21,060
finally we have what we want we have a

1925
01:20:21,060 --> 01:20:24,300
an extractor for our weakness so problem

1926
01:20:24,300 --> 01:20:27,300
solved uh this protocol is knowledge

1927
01:20:27,300 --> 01:20:30,480
sound uh and it proves knowledge of an

1928
01:20:30,480 --> 01:20:33,000
isogeny walk of some length now we need

1929
01:20:33,000 --> 01:20:34,860
to look at zero knowledge well this is

1930
01:20:34,860 --> 01:20:37,080
pretty easy simulating the two vertical

1931
01:20:37,080 --> 01:20:39,179
sides that's uh that's so

1932
01:20:39,179 --> 01:20:42,000
straightforward because to simulate the

1933
01:20:42,000 --> 01:20:44,280
left side for example I can just pick a

1934
01:20:44,280 --> 01:20:47,280
randomized PSI of the right degree a

1935
01:20:47,280 --> 01:20:49,860
random torsion basis P2 Q2 and then I

1936
01:20:49,860 --> 01:20:51,659
will compute the linear combination a b

1937
01:20:51,659 --> 01:20:55,500
that makes a times P2 plus b times Q2

1938
01:20:55,500 --> 01:20:58,020
the kernel of PSI hat so this is

1939
01:20:58,020 --> 01:21:00,780
straightforward same for the right hand

1940
01:21:00,780 --> 01:21:03,840
side and well here is where we have a

1941
01:21:03,840 --> 01:21:04,920
problem

1942
01:21:04,920 --> 01:21:07,320
um because this is actually quite hard

1943
01:21:07,320 --> 01:21:09,360
to simulate the exogenic Phi Prime

1944
01:21:09,360 --> 01:21:11,640
parallel to Phi

1945
01:21:11,640 --> 01:21:13,080
um it's uh it's something that's

1946
01:21:13,080 --> 01:21:15,300
non-obvious if you don't if you don't

1947
01:21:15,300 --> 01:21:17,460
have access to the weakness and actually

1948
01:21:17,460 --> 01:21:19,380
this is an assumption so what we do for

1949
01:21:19,380 --> 01:21:21,120
stimulating this is just that we pick

1950
01:21:21,120 --> 01:21:23,580
random super Singularity curve E2 and

1951
01:21:23,580 --> 01:21:25,440
then we pick a random pisogyny of the

1952
01:21:25,440 --> 01:21:27,239
right degree 5 Prime which is not

1953
01:21:27,239 --> 01:21:30,480
necessarily parallel to Phi and we make

1954
01:21:30,480 --> 01:21:31,920
an assumption which was already an

1955
01:21:31,920 --> 01:21:33,719
assumption back in the Theo JavaScript

1956
01:21:33,719 --> 01:21:36,780
paper that this distribution is already

1957
01:21:36,780 --> 01:21:38,520
distinguished from the right

1958
01:21:38,520 --> 01:21:40,380
distribution the distribution of pairs

1959
01:21:40,380 --> 01:21:42,480
Phi and Phi and Phi Prime of

1960
01:21:42,480 --> 01:21:44,219
parallelized objects and this is called

1961
01:21:44,219 --> 01:21:46,140
the dssp problem and it's a strange

1962
01:21:46,140 --> 01:21:48,480
problem because there's a sort of sidh

1963
01:21:48,480 --> 01:21:50,340
flavor so you feel it may maybe be

1964
01:21:50,340 --> 01:21:51,960
broken but actually it's right at the

1965
01:21:51,960 --> 01:21:53,880
limit where we don't know how to break

1966
01:21:53,880 --> 01:21:56,640
this assumption

1967
01:21:56,640 --> 01:21:58,739
um just a word on reason progress that's

1968
01:21:58,739 --> 01:22:00,360
not in the paper that's appeared

1969
01:22:00,360 --> 01:22:02,280
recently on the print

1970
01:22:02,280 --> 01:22:04,440
um there is a way to get rid of this the

1971
01:22:04,440 --> 01:22:07,800
SSP uh assumption so the problem is I

1972
01:22:07,800 --> 01:22:10,080
want to distinguish between the right

1973
01:22:10,080 --> 01:22:11,880
distribution the correct distribution

1974
01:22:11,880 --> 01:22:13,560
that's on the left that's the

1975
01:22:13,560 --> 01:22:15,600
distribution of parallel isogenes Phi

1976
01:22:15,600 --> 01:22:18,239
and Phi Prime from the distribution of

1977
01:22:18,239 --> 01:22:20,880
random pairs of exogenes which may not

1978
01:22:20,880 --> 01:22:23,520
be parallel and the trick in this paper

1979
01:22:23,520 --> 01:22:25,679
with a list of others which doesn't fit

1980
01:22:25,679 --> 01:22:29,340
in a slide is to just walk a little bit

1981
01:22:29,340 --> 01:22:32,400
longer a longer and longer because of

1982
01:22:32,400 --> 01:22:35,219
the properties of ramanujan graphs of

1983
01:22:35,219 --> 01:22:37,620
surfacing rhizogenes it turns out that

1984
01:22:37,620 --> 01:22:39,480
the longer you walk the more this

1985
01:22:39,480 --> 01:22:41,280
distribution will converge to the same

1986
01:22:41,280 --> 01:22:44,280
distribution so the way you can do it in

1987
01:22:44,280 --> 01:22:46,080
practice requires lots of algorithmic

1988
01:22:46,080 --> 01:22:48,900
Tricks but if we want we can get

1989
01:22:48,900 --> 01:22:50,460
statistical serenology instead of

1990
01:22:50,460 --> 01:22:53,040
relying on the dssp assumption

1991
01:22:53,040 --> 01:22:55,860
however when we do this uh we cannot do

1992
01:22:55,860 --> 01:22:57,120
any more the trick with the torsion

1993
01:22:57,120 --> 01:22:59,520
basis so our knowledge soundness is not

1994
01:22:59,520 --> 01:23:02,699
as good as anymore so we still are in a

1995
01:23:02,699 --> 01:23:07,140
uh kind of uh uh space where we don't

1996
01:23:07,140 --> 01:23:08,760
know how to get all that we would like

1997
01:23:08,760 --> 01:23:11,400
to get okay so just to conclude what we

1998
01:23:11,400 --> 01:23:13,020
managed to do here is a knowledge sound

1999
01:23:13,020 --> 01:23:15,840
computational ZK protocol for proving

2000
01:23:15,840 --> 01:23:17,400
knowledge of an isogeny of some fixed

2001
01:23:17,400 --> 01:23:20,159
degree or some fixed walk length if you

2002
01:23:20,159 --> 01:23:22,920
like in the paper we also have a variant

2003
01:23:22,920 --> 01:23:25,679
to prove knowledge of an sidh secret key

2004
01:23:25,679 --> 01:23:27,960
which today is not any more of that

2005
01:23:27,960 --> 01:23:30,540
interesting but I mean could be useful

2006
01:23:30,540 --> 01:23:34,020
someday who knows uh for the future if

2007
01:23:34,020 --> 01:23:35,460
you have ideas how to prove statistical

2008
01:23:35,460 --> 01:23:36,900
zero knowledge with strong knowledge

2009
01:23:36,900 --> 01:23:39,179
someone has guarantees that would be a

2010
01:23:39,179 --> 01:23:41,100
very nice results also if you know how

2011
01:23:41,100 --> 01:23:42,900
to make these things efficient that they

2012
01:23:42,900 --> 01:23:46,860
were still at uh not so good and finally

2013
01:23:46,860 --> 01:23:48,780
I showed something that works for the

2014
01:23:48,780 --> 01:23:51,360
general super senior case and which is

2015
01:23:51,360 --> 01:23:53,460
not super efficient but you can run on a

2016
01:23:53,460 --> 01:23:55,860
computer but something that still we

2017
01:23:55,860 --> 01:23:57,840
don't know how to scale really well and

2018
01:23:57,840 --> 01:23:59,640
to make really well is the seaside case

2019
01:23:59,640 --> 01:24:01,320
because I said for the CSI case you have

2020
01:24:01,320 --> 01:24:02,940
the easy protocol but that's actually

2021
01:24:02,940 --> 01:24:05,340
not very efficient like if you to see

2022
01:24:05,340 --> 01:24:07,860
fish is cool but you cannot really

2023
01:24:07,860 --> 01:24:10,739
instantiate it for many parameters and C

2024
01:24:10,739 --> 01:24:14,100
sign Works in general but kind of sucks

2025
01:24:14,100 --> 01:24:16,860
so we're still in a space where it's a

2026
01:24:16,860 --> 01:24:18,120
bit difficult to prove knowledge over

2027
01:24:18,120 --> 01:24:20,340
all kinds of assumptions okay thank you

2028
01:24:20,340 --> 01:24:24,020
very much ready for your questions

2029
01:24:29,460 --> 01:24:33,920
thank you Luca are there any questions

2030
01:24:43,679 --> 01:24:46,860
no it seems there are no questions thank

2031
01:24:46,860 --> 01:24:49,140
you again for the talk

2032
01:24:49,140 --> 01:24:52,140
session

