1
00:00:00,000 --> 00:00:03,000
okay good afternoon and welcome to the

2
00:00:03,000 --> 00:00:05,400
today's last section it's Quantum

3
00:00:05,400 --> 00:00:08,220
algorithm section and I'm someone Hong

4
00:00:08,220 --> 00:00:10,580
and I'll be sharing this session so

5
00:00:10,580 --> 00:00:13,860
there will be three talks today and two

6
00:00:13,860 --> 00:00:17,039
in person and one online so let's start

7
00:00:17,039 --> 00:00:19,220
with the first talk with fighter

8
00:00:19,220 --> 00:00:22,619
Nostradamus goes quantum which will be

9
00:00:22,619 --> 00:00:26,880
presented by Barbara affinity

10
00:00:34,620 --> 00:00:37,699
hello everybody

11
00:00:37,980 --> 00:00:40,680
um my name is Barbara and today I'm

12
00:00:40,680 --> 00:00:43,140
talking about our paper Nostradamus

13
00:00:43,140 --> 00:00:46,500
those commentum but first I want to say

14
00:00:46,500 --> 00:00:48,660
thank you for the introduction and thank

15
00:00:48,660 --> 00:00:51,600
you for you all being here after such a

16
00:00:51,600 --> 00:00:53,640
long day

17
00:00:53,640 --> 00:00:57,059
um our paper Nostradamus girls plant him

18
00:00:57,059 --> 00:00:59,699
um analyzes the Nostradamus attack on

19
00:00:59,699 --> 00:01:02,579
hash functions in the quantum setting

20
00:01:02,579 --> 00:01:05,159
and this paper is a giant work together

21
00:01:05,159 --> 00:01:07,920
with smack fish name and move it support

22
00:01:07,920 --> 00:01:11,159
originally Nostradamus was the name of a

23
00:01:11,159 --> 00:01:13,979
well-known pharmacist of the 16th

24
00:01:13,979 --> 00:01:16,619
century who published poems in order to

25
00:01:16,619 --> 00:01:19,020
predict the future

26
00:01:19,020 --> 00:01:23,520
in 2006 calte and Kuno they introduced a

27
00:01:23,520 --> 00:01:26,820
modern Nostradamus who wants to prove

28
00:01:26,820 --> 00:01:28,500
his prior knowledge about a specific

29
00:01:28,500 --> 00:01:31,680
event for example the lottery draw next

30
00:01:31,680 --> 00:01:33,119
Saturday

31
00:01:33,119 --> 00:01:35,759
So This Modern Nostradamus wants to use

32
00:01:35,759 --> 00:01:38,820
cryptography instead of poetry

33
00:01:38,820 --> 00:01:42,119
and therefore he commits to a hash value

34
00:01:42,119 --> 00:01:45,119
by Target before the event and

35
00:01:45,119 --> 00:01:47,640
afterwards he Partners a document

36
00:01:47,640 --> 00:01:50,520
containing the correct prediction and

37
00:01:50,520 --> 00:01:53,399
having this hash value by Target so you

38
00:01:53,399 --> 00:01:56,820
can imagine someone who says hey

39
00:01:56,820 --> 00:02:00,180
I'm kind of a prophet and I know the

40
00:02:00,180 --> 00:02:02,520
lottery numbers but I cannot tell you

41
00:02:02,520 --> 00:02:05,280
them because then he could cheat at the

42
00:02:05,280 --> 00:02:08,220
lottery but what I can tell you is the

43
00:02:08,220 --> 00:02:10,500
hash value of my prediction which I

44
00:02:10,500 --> 00:02:13,319
would send you afterwards and you also

45
00:02:13,319 --> 00:02:15,420
don't need to try to guess the lottery

46
00:02:15,420 --> 00:02:18,120
numbers based on this value by Target

47
00:02:18,120 --> 00:02:20,340
because I add

48
00:02:20,340 --> 00:02:23,220
yes somehow a kind of a secret signature

49
00:02:23,220 --> 00:02:24,900
at the end

50
00:02:24,900 --> 00:02:27,840
and um yeah of course this is just a

51
00:02:27,840 --> 00:02:29,940
picture you can't keep in mind of this

52
00:02:29,940 --> 00:02:32,700
modern Nostradamus but nonetheless that

53
00:02:32,700 --> 00:02:35,280
is a desirable security property for

54
00:02:35,280 --> 00:02:38,099
hash functions that this can only

55
00:02:38,099 --> 00:02:40,920
um yeah be possible if someone really

56
00:02:40,920 --> 00:02:43,260
knows the lottery number so this is kind

57
00:02:43,260 --> 00:02:46,260
of a pre-image resistance

58
00:02:46,260 --> 00:02:49,980
and everyone else who does not know the

59
00:02:49,980 --> 00:02:53,760
lottery numbers but try to uh

60
00:02:53,760 --> 00:02:55,280
yeah public

61
00:02:55,280 --> 00:02:58,680
health value we call him the Nostradamus

62
00:02:58,680 --> 00:03:00,060
attacker

63
00:03:00,060 --> 00:03:03,599
in case that the hash function fulfills

64
00:03:03,599 --> 00:03:06,120
an iterative property which I want to

65
00:03:06,120 --> 00:03:09,599
explain later we can specify the time

66
00:03:09,599 --> 00:03:12,200
complexity of such a Nostradamus attack

67
00:03:12,200 --> 00:03:15,840
so someone who's not a prophet or a

68
00:03:15,840 --> 00:03:18,300
magician and only wants to protect his

69
00:03:18,300 --> 00:03:19,980
prior knowledge

70
00:03:19,980 --> 00:03:23,099
our contribution is the development of

71
00:03:23,099 --> 00:03:25,860
the quantum Nostradamus attack which

72
00:03:25,860 --> 00:03:29,340
proves that the time complexity can be

73
00:03:29,340 --> 00:03:32,159
reduced significantly you can see it if

74
00:03:32,159 --> 00:03:34,980
you compare the picture before n it

75
00:03:34,980 --> 00:03:36,959
decreases from two over three in the

76
00:03:36,959 --> 00:03:40,200
classical setting to three over seven in

77
00:03:40,200 --> 00:03:42,060
the quantum setting

78
00:03:42,060 --> 00:03:44,519
and moreover we have found the lower

79
00:03:44,519 --> 00:03:48,000
bound which proves that our attack is

80
00:03:48,000 --> 00:03:50,700
essentially optimal and this is what I

81
00:03:50,700 --> 00:03:53,280
want to do today first I want to explain

82
00:03:53,280 --> 00:03:56,580
our Quantum attack and then I will show

83
00:03:56,580 --> 00:04:01,379
you the proof idea of our lower branch

84
00:04:01,379 --> 00:04:04,739
okay so as I said

85
00:04:04,739 --> 00:04:06,900
um the Nostradamus attack is only

86
00:04:06,900 --> 00:04:09,299
applicable to a special class of hash

87
00:04:09,299 --> 00:04:13,080
functions the iterated has function

88
00:04:13,080 --> 00:04:15,900
these are functions which process the

89
00:04:15,900 --> 00:04:18,959
input message block by Block in order to

90
00:04:18,959 --> 00:04:21,000
compute the hash value

91
00:04:21,000 --> 00:04:24,540
as a simplification I only will consider

92
00:04:24,540 --> 00:04:28,560
for my talk welcome card constructions

93
00:04:28,560 --> 00:04:31,380
without padding like it is shown here on

94
00:04:31,380 --> 00:04:33,840
this slide

95
00:04:33,840 --> 00:04:34,740
um

96
00:04:34,740 --> 00:04:37,380
nonetheless our attack is also

97
00:04:37,380 --> 00:04:39,780
applicable in case of padding like

98
00:04:39,780 --> 00:04:44,280
tattoo or to sponge-based test functions

99
00:04:44,280 --> 00:04:47,100
like shelf 3 or shake and if you are

100
00:04:47,100 --> 00:04:48,419
interested how we deal with this

101
00:04:48,419 --> 00:04:50,699
functions I would like to invite you to

102
00:04:50,699 --> 00:04:52,860
read our full version which can be found

103
00:04:52,860 --> 00:04:54,740
on ePrint

104
00:04:54,740 --> 00:04:58,500
and um also what I want to mention on

105
00:04:58,500 --> 00:05:01,800
this slide is that we do not need

106
00:05:01,800 --> 00:05:03,919
further properties of the hash functions

107
00:05:03,919 --> 00:05:06,720
besides some regularity assumptions

108
00:05:06,720 --> 00:05:09,960
because the attack is the generic taxes

109
00:05:09,960 --> 00:05:12,900
means we do not concrete exploit any

110
00:05:12,900 --> 00:05:17,040
country details like a bit flip at the a

111
00:05:17,040 --> 00:05:19,860
specific position of the function

112
00:05:19,860 --> 00:05:22,500
and this is also the reason why our

113
00:05:22,500 --> 00:05:25,580
attack is applicable to random

114
00:05:25,580 --> 00:05:28,979
compression function so this age in this

115
00:05:28,979 --> 00:05:32,280
box we also call compression function

116
00:05:32,280 --> 00:05:35,359
um with high probability

117
00:05:35,940 --> 00:05:38,880
now I want to introduce some Notions by

118
00:05:38,880 --> 00:05:41,220
showing you the formal definition of the

119
00:05:41,220 --> 00:05:42,960
nusratama city

120
00:05:42,960 --> 00:05:44,880
as you have seen in my introduction

121
00:05:44,880 --> 00:05:48,000
there are mainly two attack faces one

122
00:05:48,000 --> 00:05:52,199
before the event and one afterwards

123
00:05:52,199 --> 00:05:55,800
um these spaces are represented by the

124
00:05:55,800 --> 00:05:59,160
algorithms A1 and A2

125
00:05:59,160 --> 00:06:02,460
A1 outputs the target value which he

126
00:06:02,460 --> 00:06:04,380
sends to the Challenger

127
00:06:04,380 --> 00:06:07,560
and a state which then can be used by

128
00:06:07,560 --> 00:06:10,740
algorithm A2 to compute the final

129
00:06:10,740 --> 00:06:12,360
document

130
00:06:12,360 --> 00:06:15,479
the event itself is represented by a

131
00:06:15,479 --> 00:06:18,600
message P which is sampled uniformly at

132
00:06:18,600 --> 00:06:21,300
random by the Challenger

133
00:06:21,300 --> 00:06:23,940
because this message P also prefixed

134
00:06:23,940 --> 00:06:26,160
since the final document should start

135
00:06:26,160 --> 00:06:28,979
with this message

136
00:06:28,979 --> 00:06:32,880
in the second phase A2 outputs a message

137
00:06:32,880 --> 00:06:36,300
as based on the state the target value

138
00:06:36,300 --> 00:06:39,300
and the prefix

139
00:06:39,300 --> 00:06:42,300
um and this message we also call topics

140
00:06:42,300 --> 00:06:45,840
and the algorithm or the adversary wins

141
00:06:45,840 --> 00:06:48,600
this game if the document containing

142
00:06:48,600 --> 00:06:51,000
prefix and suffix

143
00:06:51,000 --> 00:06:55,759
um has the uh has value by Target

144
00:06:56,639 --> 00:07:00,500
in the classical attack of Calvin Kuno

145
00:07:00,500 --> 00:07:03,539
this state is the so-called Diamond

146
00:07:03,539 --> 00:07:05,100
structure

147
00:07:05,100 --> 00:07:07,560
and this diamond structure we also want

148
00:07:07,560 --> 00:07:10,639
to construct an argument in the text so

149
00:07:10,639 --> 00:07:15,180
I will explain this in more details

150
00:07:15,180 --> 00:07:18,600
um this diamond is a binary directed

151
00:07:18,600 --> 00:07:20,220
tree

152
00:07:20,220 --> 00:07:23,599
and each note is a

153
00:07:23,599 --> 00:07:26,880
representing a half State and each add a

154
00:07:26,880 --> 00:07:28,080
message plot

155
00:07:28,080 --> 00:07:30,539
and this class fulfills a special

156
00:07:30,539 --> 00:07:34,199
property if one adds directs from one

157
00:07:34,199 --> 00:07:36,300
node to another this means that we can

158
00:07:36,300 --> 00:07:39,440
get from the first state to the other

159
00:07:39,440 --> 00:07:43,220
via the message block so this m

160
00:07:43,220 --> 00:07:46,259
which is represented by the connecting

161
00:07:46,259 --> 00:07:47,759
Edge

162
00:07:47,759 --> 00:07:51,060
and the algorithm A1 outputs then the

163
00:07:51,060 --> 00:07:54,840
root of the diamond as a Target value

164
00:07:54,840 --> 00:07:57,419
in the second phase the algorithm A2

165
00:07:57,419 --> 00:08:01,380
uses the diamond structure to compute

166
00:08:01,380 --> 00:08:02,819
this topics

167
00:08:02,819 --> 00:08:04,919
so this is the same picture as before

168
00:08:04,919 --> 00:08:08,819
but we rotate the craft the diamond and

169
00:08:08,819 --> 00:08:11,160
90 degrees

170
00:08:11,160 --> 00:08:13,919
and what the algorithmism is doing for

171
00:08:13,919 --> 00:08:16,979
this is first it computes the final hash

172
00:08:16,979 --> 00:08:19,080
value hash of B

173
00:08:19,080 --> 00:08:21,599
web p is the prefix given by the

174
00:08:21,599 --> 00:08:23,220
Challenger

175
00:08:23,220 --> 00:08:25,560
and then he searched for so-called

176
00:08:25,560 --> 00:08:28,259
linking message which connects hash of p

177
00:08:28,259 --> 00:08:30,180
with one of the leaf notes of the

178
00:08:30,180 --> 00:08:31,680
diamond

179
00:08:31,680 --> 00:08:34,440
and then the suffix is simply this

180
00:08:34,440 --> 00:08:36,919
message M link this linking message

181
00:08:36,919 --> 00:08:39,839
concatenated with all message blocks

182
00:08:39,839 --> 00:08:43,500
along the path from the leaf node to the

183
00:08:43,500 --> 00:08:44,640
root

184
00:08:44,640 --> 00:08:48,060
and note that um yeah every other path

185
00:08:48,060 --> 00:08:50,480
with the corresponding linking message

186
00:08:50,480 --> 00:08:55,279
would be a valid suffix as well

187
00:08:55,560 --> 00:08:59,760
and um yeah as I already mentioned our

188
00:08:59,760 --> 00:09:01,920
expansion attack

189
00:09:01,920 --> 00:09:04,800
um basically works in the same way but

190
00:09:04,800 --> 00:09:07,320
we want to use quantum algorithm instead

191
00:09:07,320 --> 00:09:09,959
of classical one

192
00:09:09,959 --> 00:09:11,700
um in order to construct this diet

193
00:09:11,700 --> 00:09:13,980
instruction also to find this linking

194
00:09:13,980 --> 00:09:15,540
message

195
00:09:15,540 --> 00:09:19,019
and basically this both tasks are about

196
00:09:19,019 --> 00:09:22,740
timing special message blocks and for

197
00:09:22,740 --> 00:09:24,959
this Provost algorithm is very very

198
00:09:24,959 --> 00:09:27,060
useful

199
00:09:27,060 --> 00:09:30,120
um in case that we can define a set of

200
00:09:30,120 --> 00:09:31,620
message block

201
00:09:31,620 --> 00:09:34,860
we call them the suitable one so these

202
00:09:34,860 --> 00:09:36,600
are the message plugs what we are

203
00:09:36,600 --> 00:09:38,640
looking for

204
00:09:38,640 --> 00:09:41,700
um then we can use crowbar's algorithm

205
00:09:41,700 --> 00:09:44,940
and it outputs one of the suitable

206
00:09:44,940 --> 00:09:48,420
message blocks after all of square root

207
00:09:48,420 --> 00:09:53,040
of P to the minus 1 valuations and P is

208
00:09:53,040 --> 00:09:56,640
the probability that if I have a random

209
00:09:56,640 --> 00:09:59,339
message block that this is suitable as

210
00:09:59,339 --> 00:10:00,600
well

211
00:10:00,600 --> 00:10:02,040
so

212
00:10:02,040 --> 00:10:04,500
um in case that there are a lot of

213
00:10:04,500 --> 00:10:07,740
suitable method blocks we can time them

214
00:10:07,740 --> 00:10:10,620
faster because then the value P the

215
00:10:10,620 --> 00:10:13,200
probability is bigger

216
00:10:13,200 --> 00:10:15,240
and um

217
00:10:15,240 --> 00:10:18,240
in this context valuation means the

218
00:10:18,240 --> 00:10:21,300
check of the message plug if it is a

219
00:10:21,300 --> 00:10:23,580
suitable one or not

220
00:10:23,580 --> 00:10:25,920
and in the context of the of the

221
00:10:25,920 --> 00:10:28,860
Nostradamus attack it's a evaluation of

222
00:10:28,860 --> 00:10:31,680
the compression function

223
00:10:31,680 --> 00:10:34,920
so how can we apply it um

224
00:10:34,920 --> 00:10:37,920
in order to do the Nostradamus attack

225
00:10:37,920 --> 00:10:42,000
first I want to show you how we can

226
00:10:42,000 --> 00:10:44,040
use crowbar's algorithm to find the

227
00:10:44,040 --> 00:10:45,899
linking message

228
00:10:45,899 --> 00:10:49,140
because this is the easier case since

229
00:10:49,140 --> 00:10:51,480
um when we have this diamond structure

230
00:10:51,480 --> 00:10:52,500
given

231
00:10:52,500 --> 00:10:55,260
so then we know the leaf nodes and it's

232
00:10:55,260 --> 00:10:58,260
very easy to define the suitable method

233
00:10:58,260 --> 00:11:00,720
like so every message flux which

234
00:11:00,720 --> 00:11:02,880
connects hash of P was one of the leaf

235
00:11:02,880 --> 00:11:04,440
nodes

236
00:11:04,440 --> 00:11:07,740
and um then it's obvious that in case we

237
00:11:07,740 --> 00:11:10,200
have more Leaf notes there are more

238
00:11:10,200 --> 00:11:12,600
suitable messed up

239
00:11:12,600 --> 00:11:16,260
and the effort which is connected with

240
00:11:16,260 --> 00:11:17,040
this

241
00:11:17,040 --> 00:11:19,740
task of finding this linking message is

242
00:11:19,740 --> 00:11:23,279
directly related with the size or the

243
00:11:23,279 --> 00:11:26,600
height of this diamond

244
00:11:27,600 --> 00:11:29,579
um now I want to show you how we can

245
00:11:29,579 --> 00:11:33,620
construct the diamond itself

246
00:11:34,019 --> 00:11:36,540
um the construction starts with sampling

247
00:11:36,540 --> 00:11:39,779
the leaf notes uniformly at random and

248
00:11:39,779 --> 00:11:41,640
then we

249
00:11:41,640 --> 00:11:44,339
built the diamond level by level sir

250
00:11:44,339 --> 00:11:48,360
it's enough to consider how we can build

251
00:11:48,360 --> 00:11:50,880
one of the level because it works uh the

252
00:11:50,880 --> 00:11:53,399
same for the others

253
00:11:53,399 --> 00:11:56,519
and um the knife approach to do this

254
00:11:56,519 --> 00:12:00,360
would be to take all the leaf notes

255
00:12:00,360 --> 00:12:03,060
and divide them in pairs and then use

256
00:12:03,060 --> 00:12:05,459
the Collision finding algorithm of

257
00:12:05,459 --> 00:12:07,620
cross-site I

258
00:12:07,620 --> 00:12:09,480
therefore

259
00:12:09,480 --> 00:12:12,779
um we try a lot of message blocks for

260
00:12:12,779 --> 00:12:15,240
one note per pair

261
00:12:15,240 --> 00:12:17,700
so that we have a lot of certain message

262
00:12:17,700 --> 00:12:20,100
blocks how we can

263
00:12:20,100 --> 00:12:22,500
connect this first pair

264
00:12:22,500 --> 00:12:25,320
this allows us to use crowbar's

265
00:12:25,320 --> 00:12:27,959
algorithm in an efficient way to connect

266
00:12:27,959 --> 00:12:29,519
the first pair

267
00:12:29,519 --> 00:12:32,399
and in this manner we would process with

268
00:12:32,399 --> 00:12:34,560
each pair

269
00:12:34,560 --> 00:12:38,220
but this approach has a big disadvantage

270
00:12:38,220 --> 00:12:40,800
because we need a lot of evaluation

271
00:12:40,800 --> 00:12:42,660
proof here

272
00:12:42,660 --> 00:12:44,519
and um

273
00:12:44,519 --> 00:12:47,399
this observation leads us directly to

274
00:12:47,399 --> 00:12:49,560
our enhanced approach

275
00:12:49,560 --> 00:12:52,519
where we can reuse the pre-computed

276
00:12:52,519 --> 00:12:56,279
values across the connection steps

277
00:12:56,279 --> 00:12:59,579
so as before we doing this

278
00:12:59,579 --> 00:13:01,560
pre-computation we try a lot of message

279
00:13:01,560 --> 00:13:06,360
blocks but this time we don't divide the

280
00:13:06,360 --> 00:13:08,940
leaf nodes and pairs we divide them in

281
00:13:08,940 --> 00:13:11,459
the upper and the lower half and the

282
00:13:11,459 --> 00:13:14,279
pre-computations we spread them equally

283
00:13:14,279 --> 00:13:16,740
over the upper half

284
00:13:16,740 --> 00:13:19,740
and after each application of clover to

285
00:13:19,740 --> 00:13:23,579
find this pairs we will free compute new

286
00:13:23,579 --> 00:13:26,760
values in order to have the same amount

287
00:13:26,760 --> 00:13:30,240
of suitable method blocks as before

288
00:13:30,240 --> 00:13:33,360
and so um in this picture the new tree

289
00:13:33,360 --> 00:13:35,940
computed values are the one which is

290
00:13:35,940 --> 00:13:38,040
which are represented by the dashed

291
00:13:38,040 --> 00:13:40,440
arrows

292
00:13:40,440 --> 00:13:44,100
and this strategy has a big Advantage

293
00:13:44,100 --> 00:13:47,639
because it needs fewer evaluations on

294
00:13:47,639 --> 00:13:51,060
average for each pair because most of

295
00:13:51,060 --> 00:13:55,500
the precomputations we can reuse

296
00:13:55,500 --> 00:13:59,279
and um yeah you used to find more than

297
00:13:59,279 --> 00:14:01,820
one pair

298
00:14:02,519 --> 00:14:05,100
and this table shows the time

299
00:14:05,100 --> 00:14:10,200
complexities of the algorithms A1 A2 and

300
00:14:10,200 --> 00:14:12,959
also the complete attack with um the

301
00:14:12,959 --> 00:14:16,399
optimized Diamond size

302
00:14:16,680 --> 00:14:19,260
um and this table shows it in the

303
00:14:19,260 --> 00:14:21,720
classical setting and the quantum

304
00:14:21,720 --> 00:14:23,519
setting as well

305
00:14:23,519 --> 00:14:28,320
so the second and the third M columns

306
00:14:28,320 --> 00:14:31,320
are the one in the quantum setting

307
00:14:31,320 --> 00:14:34,440
and if we compare the first and the

308
00:14:34,440 --> 00:14:36,180
second column

309
00:14:36,180 --> 00:14:38,579
we can see that our knife approach

310
00:14:38,579 --> 00:14:42,240
already achieves a

311
00:14:42,240 --> 00:14:45,480
yeah a significant Improvement

312
00:14:45,480 --> 00:14:49,320
if we look um into the algorithm A1 and

313
00:14:49,320 --> 00:14:52,019
look into the picture before n then it

314
00:14:52,019 --> 00:14:55,019
decreases from one over two to one over

315
00:14:55,019 --> 00:14:56,639
three

316
00:14:56,639 --> 00:15:00,720
and um for A2 we can also observe

317
00:15:00,720 --> 00:15:03,060
something similar The Factor before n

318
00:15:03,060 --> 00:15:06,899
decreases from one to one over two

319
00:15:06,899 --> 00:15:09,060
and the main difference between the

320
00:15:09,060 --> 00:15:12,120
knife and the enhanced approach is uh

321
00:15:12,120 --> 00:15:15,260
when we look in the first

322
00:15:15,260 --> 00:15:16,920
line

323
00:15:16,920 --> 00:15:21,540
M for A1 that the Factor before the K

324
00:15:21,540 --> 00:15:25,440
decreases from one to two over three

325
00:15:25,440 --> 00:15:29,220
but um yeah gives us a significantly

326
00:15:29,220 --> 00:15:31,380
Improvement of the complete attack so

327
00:15:31,380 --> 00:15:35,579
the factor decreases from four over n to

328
00:15:35,579 --> 00:15:39,079
3 over 7.

329
00:15:39,660 --> 00:15:43,079
and um what is also Worth to note at

330
00:15:43,079 --> 00:15:45,480
this point is that we have done some

331
00:15:45,480 --> 00:15:48,959
kiss good experiments and we succeeded

332
00:15:48,959 --> 00:15:52,440
in showing this feedback between naive

333
00:15:52,440 --> 00:15:55,320
and enhanced approach

334
00:15:55,320 --> 00:15:58,380
but now I want to show you why our

335
00:15:58,380 --> 00:16:01,440
enhanced attack is essentially optimal

336
00:16:01,440 --> 00:16:05,220
and when I say optimal what I mean with

337
00:16:05,220 --> 00:16:08,760
this is that there is no

338
00:16:08,760 --> 00:16:12,300
way to do the Nostradamus better if you

339
00:16:12,300 --> 00:16:15,180
want to use these Diamond structures and

340
00:16:15,180 --> 00:16:18,060
in case we want to get faster we need

341
00:16:18,060 --> 00:16:21,018
other strategies

342
00:16:21,060 --> 00:16:23,880
and um

343
00:16:23,880 --> 00:16:25,500
yeah

344
00:16:25,500 --> 00:16:28,519
to um

345
00:16:29,579 --> 00:16:30,139
to

346
00:16:30,139 --> 00:16:33,060
prove our lower band we need a result of

347
00:16:33,060 --> 00:16:36,660
Neo and xandri and please don't be

348
00:16:36,660 --> 00:16:39,899
afraid of this formula we are only

349
00:16:39,899 --> 00:16:42,660
interested in the case where C equals

350
00:16:42,660 --> 00:16:45,839
three and then the exponent is just

351
00:16:45,839 --> 00:16:49,199
three over seven times n

352
00:16:49,199 --> 00:16:53,100
and the theorem says the following

353
00:16:53,100 --> 00:16:56,399
in case we have given a random function

354
00:16:56,399 --> 00:16:57,420
f

355
00:16:57,420 --> 00:17:00,740
there is a minimum number of evaluations

356
00:17:00,740 --> 00:17:04,319
which are needed to find the C Collision

357
00:17:04,319 --> 00:17:07,559
and the C Collision is defined as a

358
00:17:07,559 --> 00:17:11,400
tuple which consists of C different

359
00:17:11,400 --> 00:17:14,099
elements which all maps to the same

360
00:17:14,099 --> 00:17:16,679
value under the function is

361
00:17:16,679 --> 00:17:19,859
and why this result is interesting

362
00:17:19,859 --> 00:17:23,459
the reason is that we can

363
00:17:23,459 --> 00:17:26,459
use the Nostradamus attacker A1 and A2

364
00:17:26,459 --> 00:17:29,220
to find the three Collision

365
00:17:29,220 --> 00:17:32,220
and to understand this proof it is first

366
00:17:32,220 --> 00:17:34,799
important to note when we go back to the

367
00:17:34,799 --> 00:17:36,780
time complexities

368
00:17:36,780 --> 00:17:41,580
that it doesn't matter if we use A1 to

369
00:17:41,580 --> 00:17:44,820
construct Diamond structure of height K

370
00:17:44,820 --> 00:17:46,860
or K plus 1.

371
00:17:46,860 --> 00:17:51,299
so we can extract A1 to construct the

372
00:17:51,299 --> 00:17:53,700
bigger diamond and

373
00:17:53,700 --> 00:17:57,179
Etude find the collision with level K

374
00:17:57,179 --> 00:17:58,980
so that we have found this free

375
00:17:58,980 --> 00:18:02,580
Collision and then Leon's entry tell us

376
00:18:02,580 --> 00:18:06,419
that this cannot be done faster than 2

377
00:18:06,419 --> 00:18:09,299
to the three n over seven

378
00:18:09,299 --> 00:18:12,200
so we cannot do our Nostradamus attacker

379
00:18:12,200 --> 00:18:16,200
tester than this bound

380
00:18:16,200 --> 00:18:19,320
and this shows that our attack is

381
00:18:19,320 --> 00:18:23,220
optimal since it is essentially achieved

382
00:18:23,220 --> 00:18:24,900
this bound

383
00:18:24,900 --> 00:18:27,840
and in case we want to get faster and

384
00:18:27,840 --> 00:18:29,580
get Beyond this bound we need other

385
00:18:29,580 --> 00:18:31,260
strategies

386
00:18:31,260 --> 00:18:34,080
we will leave it as an open question if

387
00:18:34,080 --> 00:18:36,720
the strategies exist or how they might

388
00:18:36,720 --> 00:18:39,360
look like but what we can tell you is

389
00:18:39,360 --> 00:18:42,000
that there is about as well

390
00:18:42,000 --> 00:18:45,419
in our paper we show that any muscle

391
00:18:45,419 --> 00:18:47,160
damage attacker so

392
00:18:47,160 --> 00:18:50,100
possibly someone who is not using this

393
00:18:50,100 --> 00:18:51,660
diamond structure

394
00:18:51,660 --> 00:18:54,840
needs at least two to the three n over

395
00:18:54,840 --> 00:18:58,200
seven minus s evaluations of the

396
00:18:58,200 --> 00:18:59,820
conversion function

397
00:18:59,820 --> 00:19:03,840
and S is a maximum plot length of the

398
00:19:03,840 --> 00:19:05,520
suffix s

399
00:19:05,520 --> 00:19:08,160
and this is a very interesting result

400
00:19:08,160 --> 00:19:10,440
since it means that

401
00:19:10,440 --> 00:19:14,400
cannot get tested if our suffixes are

402
00:19:14,400 --> 00:19:15,539
short

403
00:19:15,539 --> 00:19:19,500
and we need to look for longer packages

404
00:19:19,500 --> 00:19:21,780
instead of Scotland

405
00:19:21,780 --> 00:19:24,179
and this brings me to the end of my talk

406
00:19:24,179 --> 00:19:26,720
where I want to sum up everything

407
00:19:26,720 --> 00:19:30,240
quickly so we have seen the quantum

408
00:19:30,240 --> 00:19:33,780
Phantom Nostradamus that's right as well

409
00:19:33,780 --> 00:19:37,320
as a Time complexity

410
00:19:37,320 --> 00:19:40,440
and its lower bounds in the case of

411
00:19:40,440 --> 00:19:42,840
using the diamond structure and also in

412
00:19:42,840 --> 00:19:44,580
the general case

413
00:19:44,580 --> 00:19:48,080
thank you for the attention

414
00:19:52,919 --> 00:19:56,340
okay thank you for the good presentation

415
00:19:56,340 --> 00:19:58,970
so does anybody have a question

416
00:19:58,970 --> 00:20:02,059
[Music]

417
00:20:05,720 --> 00:20:08,940
okay thanks again for the presentation

418
00:20:08,940 --> 00:20:13,700
and yeah let's move on to the next talk

419
00:20:13,740 --> 00:20:15,720
yeah

420
00:20:15,720 --> 00:20:19,620
yeah okay the next speaker is uh Jenny

421
00:20:19,620 --> 00:20:21,600
Huang who will give the presentation

422
00:20:21,600 --> 00:20:24,179
with tighter synthesizing Quantum

423
00:20:24,179 --> 00:20:28,200
circuits of AES with lower Tdap and less

424
00:20:28,200 --> 00:20:30,020
qubits

425
00:20:30,020 --> 00:20:31,919
hello

426
00:20:31,919 --> 00:20:34,679
can you see my screen

427
00:20:34,679 --> 00:20:35,820
yes

428
00:20:35,820 --> 00:20:39,080
okay hello everyone

429
00:20:39,080 --> 00:20:42,059
the title of this talk is since the

430
00:20:42,059 --> 00:20:45,660
sourcing content circuit case of AES

431
00:20:45,660 --> 00:20:48,900
with lower T depth and less Cubase this

432
00:20:48,900 --> 00:20:52,400
is a joint work with solution

433
00:20:52,679 --> 00:20:55,320
this stock has five parts the motivation

434
00:20:55,320 --> 00:20:57,480
some new general structures and

435
00:20:57,480 --> 00:21:00,740
techniques for design

436
00:21:00,860 --> 00:21:04,020
for design compact content circuits and

437
00:21:04,020 --> 00:21:07,440
their applications in a yes first let me

438
00:21:07,440 --> 00:21:10,740
introduce the motivation of our work

439
00:21:10,740 --> 00:21:12,919
in content critical analysis of

440
00:21:12,919 --> 00:21:15,419
symmetric ciphers to apply Quantum

441
00:21:15,419 --> 00:21:17,880
attack the attacker needs to construct

442
00:21:17,880 --> 00:21:20,340
an attack circuit based on content gates

443
00:21:20,340 --> 00:21:23,220
for example if the attacker wants to

444
00:21:23,220 --> 00:21:25,500
apply a Content research attack by

445
00:21:25,500 --> 00:21:27,000
Grover's algorithm

446
00:21:27,000 --> 00:21:29,280
the attacker needs to construct a group

447
00:21:29,280 --> 00:21:32,220
of Oracle if the attacker wants to apply

448
00:21:32,220 --> 00:21:34,980
attackers attacks based on assignments

449
00:21:34,980 --> 00:21:37,679
algorithm or offline assignments as an a

450
00:21:37,679 --> 00:21:40,260
Quantum encryption Oracle is needed

451
00:21:40,260 --> 00:21:42,299
the content circuit for the incubation

452
00:21:42,299 --> 00:21:44,940
process is a part of the Google Oracle

453
00:21:44,940 --> 00:21:47,760
or the content inclusion work

454
00:21:47,760 --> 00:21:51,179
moreover in this score for proposals of

455
00:21:51,179 --> 00:21:54,120
pqc the complexity of content key search

456
00:21:54,120 --> 00:21:57,600
circuit for AES is used as a baseline to

457
00:21:57,600 --> 00:21:59,940
categorize the post content part key

458
00:21:59,940 --> 00:22:00,960
schemes

459
00:22:00,960 --> 00:22:04,020
so these reasons accurately estimating

460
00:22:04,020 --> 00:22:06,720
the lowest cost of content circuits for

461
00:22:06,720 --> 00:22:09,299
the encryption process is important for

462
00:22:09,299 --> 00:22:11,760
both Quantum attacker and post content

463
00:22:11,760 --> 00:22:12,780
design

464
00:22:12,780 --> 00:22:15,240
as our work is focused on reducing the

465
00:22:15,240 --> 00:22:17,400
cost of this encryption circuits

466
00:22:17,400 --> 00:22:21,419
especially the cost of a yes circuit

467
00:22:21,419 --> 00:22:23,820
to implement a classical function by a

468
00:22:23,820 --> 00:22:25,799
Content circuit one can follow the

469
00:22:25,799 --> 00:22:29,159
following two steps first convert a

470
00:22:29,159 --> 00:22:31,740
classical circuit with that consists of

471
00:22:31,740 --> 00:22:35,340
X or naught and N gaze into a reversible

472
00:22:35,340 --> 00:22:39,780
circuit that consists of CNT Gates which

473
00:22:39,780 --> 00:22:41,940
are synop gauge not gate which is

474
00:22:41,940 --> 00:22:44,460
equivalent to poly X gate and the topic

475
00:22:44,460 --> 00:22:47,700
gate then decompose propagates into

476
00:22:47,700 --> 00:22:50,700
creative plus TKS and finally again a

477
00:22:50,700 --> 00:22:53,340
Quick Fix Plus T invitation

478
00:22:53,340 --> 00:22:55,620
then we are trying to optimize different

479
00:22:55,620 --> 00:22:58,200
Matrix the width which is the number of

480
00:22:58,200 --> 00:23:01,260
cubists the gate count and the depth

481
00:23:01,260 --> 00:23:05,039
here depth means the number of layers of

482
00:23:05,039 --> 00:23:06,419
circuit

483
00:23:06,419 --> 00:23:09,120
when we assume Gates acting on this

484
00:23:09,120 --> 00:23:11,340
joint set of qubits can be applied in

485
00:23:11,340 --> 00:23:14,580
parallel moreover in most further and

486
00:23:14,580 --> 00:23:17,280
content computation the cost of a t-gate

487
00:23:17,280 --> 00:23:19,559
is greatly higher than that of a credit

488
00:23:19,559 --> 00:23:22,200
gate and the running time of a circuit

489
00:23:22,200 --> 00:23:26,039
is donated by the TD depth

490
00:23:26,039 --> 00:23:28,980
now let me introduce my first our first

491
00:23:28,980 --> 00:23:31,200
contribution which is a generic

492
00:23:31,200 --> 00:23:32,880
structure for constructing the

493
00:23:32,880 --> 00:23:35,159
encryption Circuit of iterative

494
00:23:35,159 --> 00:23:37,500
Primitives

495
00:23:37,500 --> 00:23:40,260
first of all let's review two structures

496
00:23:40,260 --> 00:23:42,360
used in previous works the pipeline

497
00:23:42,360 --> 00:23:44,940
structure and the zigzag structure

498
00:23:44,940 --> 00:23:48,059
these two structures both use autoplay

499
00:23:48,059 --> 00:23:50,880
circuits of wrong Transformations as Sub

500
00:23:50,880 --> 00:23:52,380
sub circuits

501
00:23:52,380 --> 00:23:55,200
Here auto place means the output of the

502
00:23:55,200 --> 00:23:58,260
wrong function Ori is stored in some

503
00:23:58,260 --> 00:24:00,659
different qubits in the input

504
00:24:00,659 --> 00:24:03,240
due to the use of this auto play circuit

505
00:24:03,240 --> 00:24:05,220
the pipeline structure has redundant

506
00:24:05,220 --> 00:24:08,100
outputs after each run this figure this

507
00:24:08,100 --> 00:24:10,440
redundant outputs are labeled by the red

508
00:24:10,440 --> 00:24:12,299
color

509
00:24:12,299 --> 00:24:15,480
then the exact structure was proposed to

510
00:24:15,480 --> 00:24:17,580
reduce the number of previous by

511
00:24:17,580 --> 00:24:19,980
cleaning some redundant outputs with a

512
00:24:19,980 --> 00:24:22,620
reverse Circuit of some wrongs here are

513
00:24:22,620 --> 00:24:25,799
the others of this reverse circuit

514
00:24:25,799 --> 00:24:28,080
however there are still some redundant

515
00:24:28,080 --> 00:24:31,200
outputs in the exact structure and the

516
00:24:31,200 --> 00:24:34,020
width of the circuit still increase as

517
00:24:34,020 --> 00:24:37,140
the number of runs increases

518
00:24:37,140 --> 00:24:39,659
actually for symmetric ciphers each

519
00:24:39,659 --> 00:24:43,500
round is invertible so directly there is

520
00:24:43,500 --> 00:24:45,480
an In-Place component circuit for each

521
00:24:45,480 --> 00:24:46,260
run

522
00:24:46,260 --> 00:24:48,659
here in place means the output of the

523
00:24:48,659 --> 00:24:51,120
Run function stored in the qubits which

524
00:24:51,120 --> 00:24:53,640
were used by the input

525
00:24:53,640 --> 00:24:56,400
however directly abandons a such in

526
00:24:56,400 --> 00:24:59,220
place circuit is very hard

527
00:24:59,220 --> 00:25:02,280
here we present a method to construct an

528
00:25:02,280 --> 00:25:04,559
implex round circuit from two auto play

529
00:25:04,559 --> 00:25:07,919
sub circles this is all structure in

530
00:25:07,919 --> 00:25:10,380
this figure u r is a circuit for the

531
00:25:10,380 --> 00:25:13,200
wrong transmission R which continues t e

532
00:25:13,200 --> 00:25:17,580
x k then this is a slap gauge here you

533
00:25:17,580 --> 00:25:19,860
are inverse is a circuit for tbrand

534
00:25:19,860 --> 00:25:22,380
which is reverse of t

535
00:25:22,380 --> 00:25:25,020
it's obvious that by this structure we

536
00:25:25,020 --> 00:25:28,140
can Implement each round in place

537
00:25:28,140 --> 00:25:30,299
then we have the following structure for

538
00:25:30,299 --> 00:25:32,039
the whole encryption circuit we call

539
00:25:32,039 --> 00:25:34,620
this structure the op based Brown in

540
00:25:34,620 --> 00:25:36,600
place structure here okay based is short

541
00:25:36,600 --> 00:25:39,179
for auto place based

542
00:25:39,179 --> 00:25:41,520
it's easy to see that in this structure

543
00:25:41,520 --> 00:25:43,559
the width of the circuit does not

544
00:25:43,559 --> 00:25:46,080
increase after each round

545
00:25:46,080 --> 00:25:48,059
here is a comparison of our new

546
00:25:48,059 --> 00:25:49,799
structure with what with other

547
00:25:49,799 --> 00:25:51,120
structures

548
00:25:51,120 --> 00:25:54,480
we assume that they use the same Auto

549
00:25:54,480 --> 00:25:56,580
Place Round circuits as their main

550
00:25:56,580 --> 00:25:59,039
components then we can see that the

551
00:25:59,039 --> 00:26:01,740
width of our circuit is lowest

552
00:26:01,740 --> 00:26:04,679
and four different Oracles the depth

553
00:26:04,679 --> 00:26:06,960
results are different for encryption

554
00:26:06,960 --> 00:26:09,720
oracles the depth of our structure is

555
00:26:09,720 --> 00:26:12,480
same as the parascript structure and is

556
00:26:12,480 --> 00:26:14,580
lower than that of the digital structure

557
00:26:14,580 --> 00:26:18,360
and for the DW cost which is the depth

558
00:26:18,360 --> 00:26:20,400
times with cost

559
00:26:20,400 --> 00:26:23,159
our structure is lowest

560
00:26:23,159 --> 00:26:28,100
if the number of runs is not very small

561
00:26:28,320 --> 00:26:31,080
okay let's move to the next part in this

562
00:26:31,080 --> 00:26:33,179
part we will introduce some new generic

563
00:26:33,179 --> 00:26:35,580
techniques for implementing linear and

564
00:26:35,580 --> 00:26:37,679
nonlinear transformations

565
00:26:37,679 --> 00:26:40,380
first we consider the problem of

566
00:26:40,380 --> 00:26:42,240
implementing invertible linear

567
00:26:42,240 --> 00:26:43,559
transformations

568
00:26:43,559 --> 00:26:45,720
in multiple linear transformation Maps

569
00:26:45,720 --> 00:26:49,740
the computational basis X1 to XL into

570
00:26:49,740 --> 00:26:53,760
a linear expressions l12 and

571
00:26:53,760 --> 00:26:56,220
and it's well known that invertible

572
00:26:56,220 --> 00:26:58,380
linear transformation with variables can

573
00:26:58,380 --> 00:27:00,659
be implemented in place by RC North

574
00:27:00,659 --> 00:27:03,299
circuit Within qubits

575
00:27:03,299 --> 00:27:06,360
since a c naught gate can be seen as a

576
00:27:06,360 --> 00:27:09,179
row addition inventory Matrix we can

577
00:27:09,179 --> 00:27:12,659
achieve such C naught circuits by PLU

578
00:27:12,659 --> 00:27:15,539
decomposition but by this way number of

579
00:27:15,539 --> 00:27:18,240
K's is large we could use some heuristic

580
00:27:18,240 --> 00:27:20,940
ozone to reduce the number of gates but

581
00:27:20,940 --> 00:27:24,120
the result is still not optimal

582
00:27:24,120 --> 00:27:27,240
in this paper we propose a new set-based

583
00:27:27,240 --> 00:27:29,340
method for implementing linear

584
00:27:29,340 --> 00:27:31,559
transformation with the minimal number

585
00:27:31,559 --> 00:27:33,900
of C naught Gates

586
00:27:33,900 --> 00:27:36,659
the idea of a method is encoding the

587
00:27:36,659 --> 00:27:38,820
problem of finding a circuit with kkas

588
00:27:38,820 --> 00:27:41,820
into a set problem then solve it by a

589
00:27:41,820 --> 00:27:44,400
set solver for example the crypto new

590
00:27:44,400 --> 00:27:45,360
set

591
00:27:45,360 --> 00:27:48,240
then if the problem for K minus 1 is

592
00:27:48,240 --> 00:27:51,419
unsatisfiable and the problem for K is

593
00:27:51,419 --> 00:27:54,240
satisfiable we can know that using K

594
00:27:54,240 --> 00:27:58,320
Gates is optimal and then we can obey a

595
00:27:58,320 --> 00:28:03,240
optimal circuit from the set result

596
00:28:03,240 --> 00:28:05,880
so the key problem is how to encoding

597
00:28:05,880 --> 00:28:08,580
the circuit problem into a set property

598
00:28:08,580 --> 00:28:11,700
here we sketch our way of encoding

599
00:28:11,700 --> 00:28:16,320
we generate some variables as BCF inside

600
00:28:16,320 --> 00:28:19,080
here B and C is used to describe the

601
00:28:19,080 --> 00:28:22,620
control wire and Target y of HC not gate

602
00:28:22,620 --> 00:28:25,620
and F is used to describe order of the

603
00:28:25,620 --> 00:28:28,919
outputs and song is used to describe the

604
00:28:28,919 --> 00:28:31,200
only expression that is the electron

605
00:28:31,200 --> 00:28:33,419
normal form of each wires after each

606
00:28:33,419 --> 00:28:35,779
gate

607
00:28:35,820 --> 00:28:39,480
here is how these equations look like

608
00:28:39,480 --> 00:28:42,840
and our experiments show that by our

609
00:28:42,840 --> 00:28:45,659
method problems we say that the knights

610
00:28:45,659 --> 00:28:49,520
can be solved in a reasonable time

611
00:28:49,620 --> 00:28:51,419
okay that's all for the linear problem

612
00:28:51,419 --> 00:28:53,520
our next problem is implementing

613
00:28:53,520 --> 00:28:55,919
nonlinear transformations in place

614
00:28:55,919 --> 00:28:58,140
first of all we need to do some new

615
00:28:58,140 --> 00:28:59,820
terminologies

616
00:28:59,820 --> 00:29:02,760
even an out-of-play Circuit of function

617
00:29:02,760 --> 00:29:05,820
f we call it a c0 circuit if it works

618
00:29:05,820 --> 00:29:08,159
when output wires are initialized to

619
00:29:08,159 --> 00:29:09,419
zero

620
00:29:09,419 --> 00:29:12,600
while we call it a c star circuit if it

621
00:29:12,600 --> 00:29:14,100
works when the output wires are

622
00:29:14,100 --> 00:29:17,240
initialized to anywhere

623
00:29:17,700 --> 00:29:20,340
it is easy to see that a c star circuit

624
00:29:20,340 --> 00:29:24,240
is always a c0 circuit and building a c0

625
00:29:24,240 --> 00:29:26,340
circuit is much easier than building a

626
00:29:26,340 --> 00:29:28,440
six star circuit since there are fewer

627
00:29:28,440 --> 00:29:31,559
constraints for the input and output

628
00:29:31,559 --> 00:29:34,500
to save the course of qvs some circuits

629
00:29:34,500 --> 00:29:37,140
may use the output wires as temporary

630
00:29:37,140 --> 00:29:40,200
storage space and in this case this

631
00:29:40,200 --> 00:29:43,679
circuits are C zeros okay but may not be

632
00:29:43,679 --> 00:29:46,140
C star circuits for example

633
00:29:46,140 --> 00:29:49,559
the as-box circuit proposed in some

634
00:29:49,559 --> 00:29:52,320
previous works are all c0 circuits but

635
00:29:52,320 --> 00:29:55,320
not C Star Circle

636
00:29:55,320 --> 00:29:57,840
now we show how to construct employee

637
00:29:57,840 --> 00:29:59,700
circuits for non-linear Transmissions

638
00:29:59,700 --> 00:30:02,820
based on these two kinds of autoplay

639
00:30:02,820 --> 00:30:05,340
circuits first we classify the

640
00:30:05,340 --> 00:30:07,500
non-linear Transmissions into two coins

641
00:30:07,500 --> 00:30:09,360
the first one is the best like

642
00:30:09,360 --> 00:30:12,179
transformation which frequently appears

643
00:30:12,179 --> 00:30:15,120
in Vestal ciphers and FSR based designs

644
00:30:15,120 --> 00:30:17,760
and key schedule algorithm of peroxide

645
00:30:17,760 --> 00:30:18,840
first

646
00:30:18,840 --> 00:30:21,960
it is easy to see that to it it will

647
00:30:21,960 --> 00:30:24,960
implement the transmission T in place we

648
00:30:24,960 --> 00:30:27,659
only need to design a c star Circuit of

649
00:30:27,659 --> 00:30:29,899
f

650
00:30:29,940 --> 00:30:32,399
the second one is the substitution like

651
00:30:32,399 --> 00:30:34,620
transformation similar as the wrong

652
00:30:34,620 --> 00:30:36,840
transformation discussed before it can

653
00:30:36,840 --> 00:30:39,960
be implemented in place by the op-based

654
00:30:39,960 --> 00:30:41,880
impact structure we introduced before

655
00:30:41,880 --> 00:30:45,840
and this is the structure

656
00:30:45,840 --> 00:30:49,260
so to implement you'd see apparently we

657
00:30:49,260 --> 00:30:52,620
need a c0 circuit of s

658
00:30:52,620 --> 00:30:56,940
and to implement UT inverse it seems

659
00:30:56,940 --> 00:30:59,100
that the output of the wires are

660
00:30:59,100 --> 00:31:01,320
initialized to non-zero here they are

661
00:31:01,320 --> 00:31:04,020
initialized to X so maybe we should need

662
00:31:04,020 --> 00:31:06,960
a six star Circuit of S Prime but

663
00:31:06,960 --> 00:31:09,720
actually this is an overshoot

664
00:31:09,720 --> 00:31:14,039
if we denote s x y by Z then you keep

665
00:31:14,039 --> 00:31:19,080
inverse Maps c y s Prime to z y zero

666
00:31:19,080 --> 00:31:23,340
and this is the reverse Circuit of a c0

667
00:31:23,340 --> 00:31:26,220
circuit for S Prime so we only need to

668
00:31:26,220 --> 00:31:28,620
design a zero Circuit of S Prime which

669
00:31:28,620 --> 00:31:31,740
costs less on the resource then we can

670
00:31:31,740 --> 00:31:34,399
use its reverse circuit

671
00:31:34,399 --> 00:31:36,960
now we can focus on the problem of

672
00:31:36,960 --> 00:31:39,240
Designing this autoplay circuits in this

673
00:31:39,240 --> 00:31:41,399
paper we propose some criteria for

674
00:31:41,399 --> 00:31:43,020
efficiently designed in the star

675
00:31:43,020 --> 00:31:45,659
circuits and under this criteria a

676
00:31:45,659 --> 00:31:48,240
c-star circuit can be constructed from a

677
00:31:48,240 --> 00:31:51,240
special c0 circuit called Simplex c0

678
00:31:51,240 --> 00:31:52,740
circuit

679
00:31:52,740 --> 00:31:55,919
a Simplicity zero circuit is your c0

680
00:31:55,919 --> 00:31:58,940
circuit and if the output wise it is

681
00:31:58,940 --> 00:32:01,620
initialized to Y then the output will be

682
00:32:01,620 --> 00:32:07,320
a y plus FX here a is a linear function

683
00:32:07,320 --> 00:32:10,799
so by adding a c naught circuit for a

684
00:32:10,799 --> 00:32:12,659
inverse at the beginning we can

685
00:32:12,659 --> 00:32:15,659
construct a c star circuit from a

686
00:32:15,659 --> 00:32:17,820
Simplex c0 circuit as shown in this

687
00:32:17,820 --> 00:32:18,899
figure

688
00:32:18,899 --> 00:32:21,720
and in most time this C North circuit

689
00:32:21,720 --> 00:32:25,380
uses no more than eight cubic s can be

690
00:32:25,380 --> 00:32:27,899
optimized by our surface element

691
00:32:27,899 --> 00:32:30,419
introduced before

692
00:32:30,419 --> 00:32:33,299
so by this method we can construct a c

693
00:32:33,299 --> 00:32:36,659
star Circuit of as box which is used in

694
00:32:36,659 --> 00:32:39,779
the key schedule from the c0 circuit

695
00:32:39,779 --> 00:32:41,820
proposed in previous Works without

696
00:32:41,820 --> 00:32:44,399
increasing the number of qubs and top

697
00:32:44,399 --> 00:32:47,520
case this table shows the comparison of

698
00:32:47,520 --> 00:32:50,220
our C star circuit with the one proposed

699
00:32:50,220 --> 00:32:53,159
in Azure 2020 we can see that our

700
00:32:53,159 --> 00:32:57,059
circuit has lower values for all Matrix

701
00:32:57,059 --> 00:33:00,720
okay let's go to the next part our next

702
00:33:00,720 --> 00:33:03,419
problem is constructing low depth

703
00:33:03,419 --> 00:33:05,399
circuits especially we want to reduce

704
00:33:05,399 --> 00:33:07,980
the T depth of nonlinear components

705
00:33:07,980 --> 00:33:12,059
since tdaps determines their only time

706
00:33:12,059 --> 00:33:15,480
for our problem TK is only appeal in the

707
00:33:15,480 --> 00:33:18,120
decomposition of topic AIDS content and

708
00:33:18,120 --> 00:33:20,880
Gates and their adjoins your content

709
00:33:20,880 --> 00:33:24,000
case is proposed in your quick 2020 it

710
00:33:24,000 --> 00:33:28,440
is a c0 certificate of the end operation

711
00:33:28,440 --> 00:33:31,679
for this case they have t depth 1

712
00:33:31,679 --> 00:33:32,940
implementations

713
00:33:32,940 --> 00:33:34,740
then we can see the the following

714
00:33:34,740 --> 00:33:35,700
question

715
00:33:35,700 --> 00:33:38,700
given a classical circuit with endex K

716
00:33:38,700 --> 00:33:41,399
to our classical circuit is in-depth or

717
00:33:41,399 --> 00:33:44,399
sometimes or this multiplicative deaths

718
00:33:44,399 --> 00:33:48,299
is the largest number of n gates in all

719
00:33:48,299 --> 00:33:50,039
its parts

720
00:33:50,039 --> 00:33:52,559
in this classical circuit if we simply

721
00:33:52,559 --> 00:33:54,840
replace each and gate with the topic

722
00:33:54,840 --> 00:33:57,360
gauge or a continent gate then we can

723
00:33:57,360 --> 00:33:58,679
always

724
00:33:58,679 --> 00:34:00,190
implementation

725
00:34:00,190 --> 00:34:01,799
[Music]

726
00:34:01,799 --> 00:34:04,080
the answer is no

727
00:34:04,080 --> 00:34:06,720
these speakers use choose a simple

728
00:34:06,720 --> 00:34:09,239
example from n-depth one classical

729
00:34:09,239 --> 00:34:11,820
circuit we may obtain a t depth 2

730
00:34:11,820 --> 00:34:14,820
content circuit another example is the

731
00:34:14,820 --> 00:34:19,139
nas Xbox circuit proposed in your 2020

732
00:34:19,139 --> 00:34:21,599
this content circuit is derived from a

733
00:34:21,599 --> 00:34:24,359
classical circuit with n depth 4 but it

734
00:34:24,359 --> 00:34:27,000
has t depth six

735
00:34:27,000 --> 00:34:28,859
this paper will prove the following

736
00:34:28,859 --> 00:34:31,980
result given a classical circuit with

737
00:34:31,980 --> 00:34:35,339
n-depth s the T depth of the content

738
00:34:35,339 --> 00:34:37,859
circuit implementing all the nodes of

739
00:34:37,859 --> 00:34:40,080
the classical circuit is not smaller

740
00:34:40,080 --> 00:34:43,139
than S moreover with sufficiently

741
00:34:43,139 --> 00:34:45,359
Manning acidia we can construct a

742
00:34:45,359 --> 00:34:47,460
Content circuit implementing all the

743
00:34:47,460 --> 00:34:50,460
nodes of the character SQL circuit with

744
00:34:50,460 --> 00:34:52,800
t depths as

745
00:34:52,800 --> 00:34:55,199
and the constructive proof of this

746
00:34:55,199 --> 00:34:57,839
theorem gives us a way to achieve this

747
00:34:57,839 --> 00:35:00,300
lowest t-def circuit

748
00:35:00,300 --> 00:35:03,300
so by this way based on Boya and the

749
00:35:03,300 --> 00:35:07,380
apparatus classical circuit for ass box

750
00:35:07,380 --> 00:35:11,460
we achieve a tdaps 4 content circuit for

751
00:35:11,460 --> 00:35:14,400
as box furthermore in this paper we

752
00:35:14,400 --> 00:35:16,320
construct a new improved classical

753
00:35:16,320 --> 00:35:20,700
circuit for a s s box with n dabs 3 and

754
00:35:20,700 --> 00:35:23,220
then we can then a theta3 Content

755
00:35:23,220 --> 00:35:25,140
circuit

756
00:35:25,140 --> 00:35:28,440
know that the output of a USS box has

757
00:35:28,440 --> 00:35:31,980
algebraic degree 7 hence we need at

758
00:35:31,980 --> 00:35:34,380
least three multiplication layers to

759
00:35:34,380 --> 00:35:37,140
generate a polynomial with degree 7.

760
00:35:37,140 --> 00:35:40,079
this can be explained simply since the

761
00:35:40,079 --> 00:35:42,780
input has degree 1 then after one

762
00:35:42,780 --> 00:35:45,180
multiplication layer we have polynomials

763
00:35:45,180 --> 00:35:47,660
with degree 2 then after the second

764
00:35:47,660 --> 00:35:50,280
multiplication layer we have polynomials

765
00:35:50,280 --> 00:35:53,339
with degree at most four hence we need

766
00:35:53,339 --> 00:35:55,320
at least three multiplication layers

767
00:35:55,320 --> 00:35:59,220
this means T depth 3 is optimal if we

768
00:35:59,220 --> 00:36:01,260
follow the way that's design content

769
00:36:01,260 --> 00:36:05,119
circuits from classical circuits

770
00:36:05,220 --> 00:36:07,619
in the last part we show the

771
00:36:07,619 --> 00:36:11,960
applications of our techniques in as

772
00:36:12,119 --> 00:36:14,579
first we show how to construct a loop

773
00:36:14,579 --> 00:36:17,820
with circuits for as this is the circuit

774
00:36:17,820 --> 00:36:20,880
for the key schedule since it's a

775
00:36:20,880 --> 00:36:22,920
festival like transformation it can be

776
00:36:22,920 --> 00:36:26,040
implemented by using a c star Circuit of

777
00:36:26,040 --> 00:36:29,300
soft byte which consists of four Xboxes

778
00:36:29,300 --> 00:36:32,579
and this is the Run circuit here we use

779
00:36:32,579 --> 00:36:35,579
op based in base structure

780
00:36:35,579 --> 00:36:39,359
if we want to implement a global Oracle

781
00:36:39,359 --> 00:36:42,359
run 0 and round one can be implemented

782
00:36:42,359 --> 00:36:46,220
together as showing this paper

783
00:36:47,099 --> 00:36:49,460
then by changing the number of Xbox

784
00:36:49,460 --> 00:36:52,440
applied in parallel we can aband

785
00:36:52,440 --> 00:36:55,740
different AES circuits here we compare

786
00:36:55,740 --> 00:36:57,780
some of them with the one proposed

787
00:36:57,780 --> 00:37:00,180
initial group of 2020. we can see that

788
00:37:00,180 --> 00:37:03,300
for all Matrix our circuits has lower

789
00:37:03,300 --> 00:37:05,900
values

790
00:37:06,240 --> 00:37:08,700
our second application is constructing

791
00:37:08,700 --> 00:37:11,820
low depth circuits for as for this

792
00:37:11,820 --> 00:37:14,220
problem we can apply our tdaps for

793
00:37:14,220 --> 00:37:17,280
anti-depth three Xbox circuits in the

794
00:37:17,280 --> 00:37:18,780
pipeline structure

795
00:37:18,780 --> 00:37:21,540
this paper shows the circuit for each

796
00:37:21,540 --> 00:37:22,619
round

797
00:37:22,619 --> 00:37:25,680
we can see that comparing to the Circuit

798
00:37:25,680 --> 00:37:29,579
proposed in your group 2020 or circuit

799
00:37:29,579 --> 00:37:32,520
circuits has lower Tdap and lower foot

800
00:37:32,520 --> 00:37:34,020
depth

801
00:37:34,020 --> 00:37:36,180
and

802
00:37:36,180 --> 00:37:37,980
note that these values are for

803
00:37:37,980 --> 00:37:41,220
implementing AES and a yes dagger if we

804
00:37:41,220 --> 00:37:43,619
only implement the forward circuit for

805
00:37:43,619 --> 00:37:46,079
as study the circuit which computes the

806
00:37:46,079 --> 00:37:47,880
cycle test without cleaning the

807
00:37:47,880 --> 00:37:51,780
Redundant outputs these tdaps will be 16

808
00:37:51,780 --> 00:37:54,720
14 and 30 respectively

809
00:37:54,720 --> 00:37:58,020
since tdap3 is a minimum value for Xbox

810
00:37:58,020 --> 00:38:01,680
hence we conjecture that's Theta 30 is a

811
00:38:01,680 --> 00:38:04,619
minimum value for 10 rounds of AES

812
00:38:04,619 --> 00:38:07,260
if we don't across the hierarchical

813
00:38:07,260 --> 00:38:11,579
boundaries formed by the wrong function

814
00:38:11,579 --> 00:38:13,800
the last by combining different Xbox

815
00:38:13,800 --> 00:38:16,160
circuits with different General

816
00:38:16,160 --> 00:38:19,500
structures we have six design strategies

817
00:38:19,500 --> 00:38:22,619
then by changing the number of Xboxes

818
00:38:22,619 --> 00:38:25,440
applied in parallel we can burn some T

819
00:38:25,440 --> 00:38:28,680
depth and with trade-off curves as shown

820
00:38:28,680 --> 00:38:31,859
in this figure and this colored points

821
00:38:31,859 --> 00:38:35,300
are the results in previous works

822
00:38:35,300 --> 00:38:38,280
okay that's all for my talk thank you

823
00:38:38,280 --> 00:38:40,940
for your attention

824
00:38:47,160 --> 00:38:50,899
any questions from the audience

825
00:38:55,200 --> 00:38:58,680
okay thank you for the good presentation

826
00:38:58,680 --> 00:39:00,560
yeah so

827
00:39:00,560 --> 00:39:04,460
our last presentation is uh exploring

828
00:39:04,460 --> 00:39:08,160
sat for quick analysis Quantum Collision

829
00:39:08,160 --> 00:39:11,099
attacks against six rounds chapter three

830
00:39:11,099 --> 00:39:15,859
the speaker is Project View

831
00:39:44,359 --> 00:39:47,359
thank you

832
00:39:51,599 --> 00:39:54,260
foreign

833
00:40:11,940 --> 00:40:14,640
sorry there is a missing figure

834
00:40:14,640 --> 00:40:16,920
let's have a look at the top three

835
00:40:16,920 --> 00:40:18,300
husbandry

836
00:40:18,300 --> 00:40:21,839
yeah I think instances which is based on

837
00:40:21,839 --> 00:40:24,300
the sponge Construction

838
00:40:24,300 --> 00:40:27,420
and the underlying competition is

839
00:40:27,420 --> 00:40:30,180
Patrick F the catching app is famous for

840
00:40:30,180 --> 00:40:33,060
its huge step size and the wrong

841
00:40:33,060 --> 00:40:36,780
functions are for linear operations and

842
00:40:36,780 --> 00:40:40,520
the one non-linear operations

843
00:40:42,359 --> 00:40:44,880
so in all those years the Collision

844
00:40:44,880 --> 00:40:48,240
attacks cover at most five rounds it's

845
00:40:48,240 --> 00:40:50,820
the first time that seeks run the

846
00:40:50,820 --> 00:40:54,440
completions are presented

847
00:40:54,800 --> 00:40:58,980
the traditional text take a three-step

848
00:40:58,980 --> 00:41:02,060
framework we first generate the

849
00:41:02,060 --> 00:41:04,920
translated differential trails with the

850
00:41:04,920 --> 00:41:08,880
D beta digest equation and we call such

851
00:41:08,880 --> 00:41:12,240
Trails the sliding Trail and based on

852
00:41:12,240 --> 00:41:14,820
which we can connect construct the

853
00:41:14,820 --> 00:41:17,099
connectors that link to the sponge

854
00:41:17,099 --> 00:41:20,099
construction and the colliding Trail the

855
00:41:20,099 --> 00:41:22,740
cloud trails in the connector has

856
00:41:22,740 --> 00:41:27,200
connecting trails and the last step is

857
00:41:27,200 --> 00:41:30,480
exhaustive search to search for client

858
00:41:30,480 --> 00:41:32,160
message pairs

859
00:41:32,160 --> 00:41:35,460
and one may ask is it possible to extend

860
00:41:35,460 --> 00:41:38,520
the five round attacks to more rounds or

861
00:41:38,520 --> 00:41:41,400
at least by one round so we can answer

862
00:41:41,400 --> 00:41:45,300
this question from two aspects in the

863
00:41:45,300 --> 00:41:47,940
gliding Trail search the strategy is

864
00:41:47,940 --> 00:41:51,720
directed it's a naive exhaustive search

865
00:41:51,720 --> 00:41:54,540
method with the translated differential

866
00:41:54,540 --> 00:41:57,900
trails at hand they simply extend the

867
00:41:57,900 --> 00:42:01,619
trails record and forward by one round

868
00:42:01,619 --> 00:42:05,760
to search for the possible digest

869
00:42:05,760 --> 00:42:08,280
nutrition and the better connected

870
00:42:08,280 --> 00:42:09,240
difference

871
00:42:09,240 --> 00:42:11,400
so there are two problems in this

872
00:42:11,400 --> 00:42:15,599
strategy one is that we do not have that

873
00:42:15,599 --> 00:42:18,540
much Computing resources to do the

874
00:42:18,540 --> 00:42:21,119
exhaustive search and the other is that

875
00:42:21,119 --> 00:42:25,859
it's a highly dependent on the

876
00:42:25,859 --> 00:42:29,099
uh on the general truncated differential

877
00:42:29,099 --> 00:42:32,160
trial search which is a difficult

878
00:42:32,160 --> 00:42:36,060
problem itself so with this strategy

879
00:42:36,060 --> 00:42:40,500
it's difficult to search cladding trails

880
00:42:40,500 --> 00:42:43,560
with better probability or covering more

881
00:42:43,560 --> 00:42:46,260
round and in the connector instruction

882
00:42:46,260 --> 00:42:50,220
phase but one problem is that with the

883
00:42:50,220 --> 00:42:52,680
target difference algorithm it's

884
00:42:52,680 --> 00:42:54,900
difficult to generate

885
00:42:54,900 --> 00:42:58,020
connecting trails that hover more run

886
00:42:58,020 --> 00:43:01,260
because the rate of freedom of the

887
00:43:01,260 --> 00:43:04,920
difference decreases significantly

888
00:43:04,920 --> 00:43:07,980
and with the same reason

889
00:43:07,980 --> 00:43:10,680
uh even with even we generate the

890
00:43:10,680 --> 00:43:12,960
connecting Trail it's difficult to

891
00:43:12,960 --> 00:43:16,079
connect to construct the connector

892
00:43:16,079 --> 00:43:19,020
successfully because the degree of

893
00:43:19,020 --> 00:43:21,740
freedom of values also decrease

894
00:43:21,740 --> 00:43:26,819
significantly so the man of circle lies

895
00:43:26,819 --> 00:43:28,980
in the fact that we do not have

896
00:43:28,980 --> 00:43:32,460
efficient Trail search strategy

897
00:43:32,460 --> 00:43:37,140
so in this work we propose a set best

898
00:43:37,140 --> 00:43:39,780
Trail search strategy

899
00:43:39,780 --> 00:43:43,079
that will overcome the impatience we

900
00:43:43,079 --> 00:43:46,859
have discussed and with the automatic

901
00:43:46,859 --> 00:43:50,099
Trail search toolkit we can generate a

902
00:43:50,099 --> 00:43:51,960
better colliding Trail and the

903
00:43:51,960 --> 00:43:54,599
connecting Trail and based on which we

904
00:43:54,599 --> 00:43:56,760
can extend the

905
00:43:56,760 --> 00:44:02,540
five-run pollution attack to sixth round

906
00:44:03,200 --> 00:44:06,900
the set implementation is similar to

907
00:44:06,900 --> 00:44:10,579
other two best automatic power search

908
00:44:10,579 --> 00:44:15,780
method like milp we first need to model

909
00:44:15,780 --> 00:44:18,780
the payroll search problem to the

910
00:44:18,780 --> 00:44:20,880
mathematical problem and then we

911
00:44:20,880 --> 00:44:23,400
translate the mathematical problem

912
00:44:23,400 --> 00:44:25,619
to the languages that the software can

913
00:44:25,619 --> 00:44:28,200
understand and the server will do all

914
00:44:28,200 --> 00:44:30,599
the work for us and give us the

915
00:44:30,599 --> 00:44:32,400
solutions we expect

916
00:44:32,400 --> 00:44:35,700
so the sales server can understand the

917
00:44:35,700 --> 00:44:38,400
same apps and they generally try several

918
00:44:38,400 --> 00:44:41,400
servers to select one with the best

919
00:44:41,400 --> 00:44:44,720
search efficiency

920
00:44:44,760 --> 00:44:48,180
in this set implementation we choose a

921
00:44:48,180 --> 00:44:51,839
crypto mini set as the underlying server

922
00:44:51,839 --> 00:44:55,319
it's not only efficient but also except

923
00:44:55,319 --> 00:44:58,380
the XO Clauses and that allow us to

924
00:44:58,380 --> 00:45:01,619
concentrate on the Collision attack

925
00:45:01,619 --> 00:45:04,920
so the set implementation include the

926
00:45:04,920 --> 00:45:09,540
describing the uh propagation of the

927
00:45:09,540 --> 00:45:13,680
differential cell 2 and the objective

928
00:45:13,680 --> 00:45:17,220
function to the same apps and then add

929
00:45:17,220 --> 00:45:19,319
to the server

930
00:45:19,319 --> 00:45:21,960
so this is a difference propagation

931
00:45:21,960 --> 00:45:24,839
model of one wrong the input difference

932
00:45:24,839 --> 00:45:28,680
Alpha is propagated to Beta R and the

933
00:45:28,680 --> 00:45:33,480
alpha R plus 1 through the Run function

934
00:45:33,480 --> 00:45:37,619
and the different speed is represented

935
00:45:37,619 --> 00:45:39,900
with variables

936
00:45:39,900 --> 00:45:42,780
to the linear operations are simply

937
00:45:42,780 --> 00:45:46,740
described with adding the x or Clauses

938
00:45:46,740 --> 00:45:49,560
to the server and both the non-linear

939
00:45:49,560 --> 00:45:50,460
kind

940
00:45:50,460 --> 00:45:54,300
we use a logical provider tool to

941
00:45:54,300 --> 00:45:58,440
translate the DDT of each box to syn X

942
00:45:58,440 --> 00:46:01,020
and then we add those same apps to the

943
00:46:01,020 --> 00:46:02,700
server

944
00:46:02,700 --> 00:46:05,180
for the

945
00:46:05,180 --> 00:46:08,760
objective function we use the sequential

946
00:46:08,760 --> 00:46:11,520
encoding method to translate the

947
00:46:11,520 --> 00:46:15,000
terminality constraint with same as this

948
00:46:15,000 --> 00:46:18,660
will introduce a little variables and

949
00:46:18,660 --> 00:46:22,260
also add the bigger number of Clauses to

950
00:46:22,260 --> 00:46:25,260
the the objective function of the set

951
00:46:25,260 --> 00:46:28,260
implementation could be either the

952
00:46:28,260 --> 00:46:31,099
constraint on the number of active Xbox

953
00:46:31,099 --> 00:46:34,380
or the constraints on the propagation

954
00:46:34,380 --> 00:46:36,839
rate of the differential Trail for

955
00:46:36,839 --> 00:46:39,599
either objective function before we add

956
00:46:39,599 --> 00:46:41,940
the synapse of the cardinality

957
00:46:41,940 --> 00:46:44,640
constraint to the server we should also

958
00:46:44,640 --> 00:46:47,040
describe the relation between the

959
00:46:47,040 --> 00:46:49,140
difference and the variables that's done

960
00:46:49,140 --> 00:46:52,460
for the constraint

961
00:46:52,800 --> 00:46:54,540
and

962
00:46:54,540 --> 00:46:57,900
here we use a ball around the

963
00:46:57,900 --> 00:47:00,900
differential Trail to demonstrate the

964
00:47:00,900 --> 00:47:03,839
set implementation of the competitive

965
00:47:03,839 --> 00:47:05,579
differential tile search

966
00:47:05,579 --> 00:47:07,980
so we use the trail call to represent

967
00:47:07,980 --> 00:47:09,720
the forearm Trail

968
00:47:09,720 --> 00:47:13,819
and the set implementation includes the

969
00:47:13,819 --> 00:47:18,660
first we add the description of the

970
00:47:18,660 --> 00:47:21,720
differential trail to the server and

971
00:47:21,720 --> 00:47:24,440
then we add the description of the

972
00:47:24,440 --> 00:47:27,060
constraint on propagation wides to the

973
00:47:27,060 --> 00:47:30,920
solver and the search efficiency of a

974
00:47:30,920 --> 00:47:34,260
translated differential Trail is quite

975
00:47:34,260 --> 00:47:37,140
satisfying considering the huge test

976
00:47:37,140 --> 00:47:38,160
size

977
00:47:38,160 --> 00:47:41,000
we have uh we have consistent

978
00:47:41,000 --> 00:47:43,500
three-rounded trial search results with

979
00:47:43,500 --> 00:47:47,099
the dedicated algorithm and we also get

980
00:47:47,099 --> 00:47:50,599
two foreign

981
00:47:54,960 --> 00:47:57,560
wait

982
00:47:59,880 --> 00:48:02,460
oh sorry

983
00:48:02,460 --> 00:48:05,700
the set implementation of the cladding

984
00:48:05,700 --> 00:48:08,700
Trail search is similar only that before

985
00:48:08,700 --> 00:48:11,819
we adding the description of the gliding

986
00:48:11,819 --> 00:48:14,460
Trail and the constraint on propagation

987
00:48:14,460 --> 00:48:17,640
weight we should also add the

988
00:48:17,640 --> 00:48:21,960
constraint on the digester Collision we

989
00:48:21,960 --> 00:48:25,280
use the same logical Friday to translate

990
00:48:25,280 --> 00:48:29,880
those conditions with same as and add to

991
00:48:29,880 --> 00:48:33,540
the server this pebble choose the

992
00:48:33,540 --> 00:48:37,560
comparison of the efficiency

993
00:48:37,560 --> 00:48:40,380
and we can see there is greater

994
00:48:40,380 --> 00:48:42,920
Improvement

995
00:48:44,700 --> 00:48:47,839
so the first round of the

996
00:48:47,839 --> 00:48:50,640
foreground colliding Trail is not a

997
00:48:50,640 --> 00:48:53,640
determined yet and we fix it in the

998
00:48:53,640 --> 00:48:56,460
connecting Trail search

999
00:48:56,460 --> 00:48:57,780
uh

1000
00:48:57,780 --> 00:49:01,440
to generate the three Tower and the beta

1001
00:49:01,440 --> 00:49:05,460
2 trail of Simply add the description of

1002
00:49:05,460 --> 00:49:07,020
the

1003
00:49:07,020 --> 00:49:09,780
Trail and the description of the

1004
00:49:09,780 --> 00:49:12,180
constraint to the server and to

1005
00:49:12,180 --> 00:49:15,240
determine beta0 except for the

1006
00:49:15,240 --> 00:49:18,000
description of the propagation and the

1007
00:49:18,000 --> 00:49:19,859
constraint we will also need to

1008
00:49:19,859 --> 00:49:23,160
introduce more variables and clauses to

1009
00:49:23,160 --> 00:49:26,400
make sure that beta0 is a valid

1010
00:49:26,400 --> 00:49:28,440
connector

1011
00:49:28,440 --> 00:49:32,579
and that's how we implement the setbacks

1012
00:49:32,579 --> 00:49:35,760
the trail search toolkit so with this

1013
00:49:35,760 --> 00:49:39,180
set took it we can generate a foreign

1014
00:49:39,180 --> 00:49:42,560
sliding trail with the propagation rate

1015
00:49:42,560 --> 00:49:47,579
equal of greater than 141

1016
00:49:47,579 --> 00:49:50,640
and we can also generate the connecting

1017
00:49:50,640 --> 00:49:54,480
trails that provide a significant on the

1018
00:49:54,480 --> 00:49:57,420
degree of freedom and that will make us

1019
00:49:57,420 --> 00:49:58,380
to

1020
00:49:58,380 --> 00:50:00,780
that will allow us to construct the

1021
00:50:00,780 --> 00:50:01,619
better

1022
00:50:01,619 --> 00:50:04,619
connectors

1023
00:50:05,700 --> 00:50:08,180
sorry

1024
00:50:11,220 --> 00:50:14,220
so in the connector construction phase

1025
00:50:14,220 --> 00:50:15,960
uh

1026
00:50:15,960 --> 00:50:18,900
we need to construct either two or three

1027
00:50:18,900 --> 00:50:21,420
round connectors to construct a

1028
00:50:21,420 --> 00:50:24,540
connector means to describe the

1029
00:50:24,540 --> 00:50:26,940
propagation of messages through those

1030
00:50:26,940 --> 00:50:29,760
connecting Trails meaning that we should

1031
00:50:29,760 --> 00:50:33,060
list the linear equations on the

1032
00:50:33,060 --> 00:50:36,060
messages let's take the two run

1033
00:50:36,060 --> 00:50:39,420
connector as an example to explain the

1034
00:50:39,420 --> 00:50:41,160
idea

1035
00:50:41,160 --> 00:50:44,400
so for this two round connector the

1036
00:50:44,400 --> 00:50:48,359
first in the first round we should fix

1037
00:50:48,359 --> 00:50:51,420
the equations on the condition on

1038
00:50:51,420 --> 00:50:55,700
capacity and the padding and also on the

1039
00:50:55,700 --> 00:50:59,760
chi zero propagation and we get a system

1040
00:50:59,760 --> 00:51:00,839
of

1041
00:51:00,839 --> 00:51:05,160
linear equations on y0 and that is ey0

1042
00:51:05,160 --> 00:51:08,760
and to bypass the first round and link

1043
00:51:08,760 --> 00:51:11,579
to the second round we need to fully

1044
00:51:11,579 --> 00:51:15,000
linearize Chi 0 and then transport ey0

1045
00:51:15,000 --> 00:51:17,839
to ey1

1046
00:51:18,059 --> 00:51:21,059
and for the second round Chi one we do

1047
00:51:21,059 --> 00:51:23,640
not have that much degree of Freedom so

1048
00:51:23,640 --> 00:51:26,579
we use a grading algorithm to choose

1049
00:51:26,579 --> 00:51:30,660
part of the pi one condition and add the

1050
00:51:30,660 --> 00:51:34,500
equations to ey1 and in that case we

1051
00:51:34,500 --> 00:51:38,760
have a greater UI one that can describe

1052
00:51:38,760 --> 00:51:41,579
the propagation of the first run and the

1053
00:51:41,579 --> 00:51:44,460
partial propagation of the second ground

1054
00:51:44,460 --> 00:51:48,480
so uh that is how we construct the two

1055
00:51:48,480 --> 00:51:51,119
round connector the splashing the

1056
00:51:51,119 --> 00:51:56,280
solution space of ey1 uh then we'll uh

1057
00:51:56,280 --> 00:52:00,300
let us get message pairs that will

1058
00:52:00,300 --> 00:52:03,540
follow the first run propagation and the

1059
00:52:03,540 --> 00:52:06,660
part of the second run propagation so

1060
00:52:06,660 --> 00:52:10,500
the techniques use the to linearize a

1061
00:52:10,500 --> 00:52:12,480
fully linearized kind of partial

1062
00:52:12,480 --> 00:52:15,720
linearized directly taken from previous

1063
00:52:15,720 --> 00:52:18,319
works

1064
00:52:19,319 --> 00:52:23,640
so this is a concrete six round fishing

1065
00:52:23,640 --> 00:52:26,819
attack on Shake one to eight

1066
00:52:26,819 --> 00:52:29,400
so the first round of the four round

1067
00:52:29,400 --> 00:52:32,099
hiding Trail is transferred to the

1068
00:52:32,099 --> 00:52:34,319
connecting Trail so we have a three

1069
00:52:34,319 --> 00:52:36,800
round connector to

1070
00:52:36,800 --> 00:52:40,020
construct the surround connector okay

1071
00:52:40,020 --> 00:52:43,200
first the least equations for the first

1072
00:52:43,200 --> 00:52:45,599
round that is similar to the two run

1073
00:52:45,599 --> 00:52:49,260
connector we need the equations of the

1074
00:52:49,260 --> 00:52:52,020
capacity and the padding and the chi

1075
00:52:52,020 --> 00:52:55,559
zero propagation and two transfer ey02

1076
00:52:55,559 --> 00:52:56,940
ey1

1077
00:52:56,940 --> 00:53:00,839
the fully linearized Chi 0.

1078
00:53:00,839 --> 00:53:04,200
and for the second one Chi 1 we add

1079
00:53:04,200 --> 00:53:09,180
those equations to ey1 and for the third

1080
00:53:09,180 --> 00:53:11,520
round High two we do not we do not have

1081
00:53:11,520 --> 00:53:14,339
that much degree of Freedom so we also

1082
00:53:14,339 --> 00:53:17,460
partially choose uh

1083
00:53:17,460 --> 00:53:22,040
30 32 conditions out of the

1084
00:53:22,040 --> 00:53:25,920
116 conditions and add those equations

1085
00:53:25,920 --> 00:53:30,119
to ui2 and then we partially linearize

1086
00:53:30,119 --> 00:53:34,020
Taiwan according to to the chi-2

1087
00:53:34,020 --> 00:53:36,240
condition selected and then they

1088
00:53:36,240 --> 00:53:41,640
transfer ey2 to ey1 so now we have a

1089
00:53:41,640 --> 00:53:45,960
brighter ey1 system and this is a hobby

1090
00:53:45,960 --> 00:53:49,680
Constructor the three round connector

1091
00:53:49,680 --> 00:53:52,500
so the solution space of the surround

1092
00:53:52,500 --> 00:53:56,819
connector is of the size 2 to 27 and the

1093
00:53:56,819 --> 00:53:59,099
message pairs generated from the

1094
00:53:59,099 --> 00:54:02,460
solution space will follow we will fully

1095
00:54:02,460 --> 00:54:04,800
follow the first two run and partially

1096
00:54:04,800 --> 00:54:08,460
follow the third round so we have seen

1097
00:54:08,460 --> 00:54:11,099
that the third round of the connector

1098
00:54:11,099 --> 00:54:14,880
there are still 80 conditions that are

1099
00:54:14,880 --> 00:54:18,300
not treated and underway

1100
00:54:18,300 --> 00:54:21,240
move this condition with the gliding

1101
00:54:21,240 --> 00:54:24,059
Trail and twist them with exhaustive

1102
00:54:24,059 --> 00:54:25,440
search

1103
00:54:25,440 --> 00:54:29,579
so theoretically the time complexity of

1104
00:54:29,579 --> 00:54:33,200
the exhaustive search should be 2 to

1105
00:54:33,200 --> 00:54:36,720
132 and that is bigger than the first

1106
00:54:36,720 --> 00:54:38,099
step on

1107
00:54:38,099 --> 00:54:40,319
so we need to

1108
00:54:40,319 --> 00:54:43,260
use the earlier about technique and

1109
00:54:43,260 --> 00:54:47,819
reduce the Practical time complexity to

1110
00:54:47,819 --> 00:54:51,540
2 to 123.2

1111
00:54:52,579 --> 00:54:55,980
uh has both the complexity of the

1112
00:54:55,980 --> 00:54:59,400
connector construction phase we feel the

1113
00:54:59,400 --> 00:55:01,880
construct 2 to

1114
00:55:01,880 --> 00:55:04,319
1005 connectors

1115
00:55:04,319 --> 00:55:07,339
and we use this equivalent

1116
00:55:07,339 --> 00:55:10,440
conversion method to represent the

1117
00:55:10,440 --> 00:55:13,040
complexity of the connected construction

1118
00:55:13,040 --> 00:55:16,619
with the complexity of the shape

1119
00:55:16,619 --> 00:55:20,059
computation and we get 2 to

1120
00:55:20,059 --> 00:55:23,640
121.2 time complexity for the nectar

1121
00:55:23,640 --> 00:55:26,460
construction so in total for the six run

1122
00:55:26,460 --> 00:55:29,520
Collision attack on check one two eight

1123
00:55:29,520 --> 00:55:34,400
we have a Time complexity of 2 to

1124
00:55:34,400 --> 00:55:38,520
123.5 that is uh only per slide only

1125
00:55:38,520 --> 00:55:41,040
slightly smaller than the first step on

1126
00:55:41,040 --> 00:55:45,800
but anyway it's a very depression attack

1127
00:55:46,680 --> 00:55:50,220
so for the quantum cliching attack be

1128
00:55:50,220 --> 00:55:52,619
consider it with the time space

1129
00:55:52,619 --> 00:55:56,700
trade-off margin that means any Quantum

1130
00:55:56,700 --> 00:55:59,000
Collision attack with time complexity

1131
00:55:59,000 --> 00:56:01,500
smaller than the margin could be

1132
00:56:01,500 --> 00:56:05,160
considered a valid Quantum attack in

1133
00:56:05,160 --> 00:56:08,839
this work we assume that all the related

1134
00:56:08,839 --> 00:56:12,900
Quantum circuits exist already so we can

1135
00:56:12,900 --> 00:56:14,640
concentrate only

1136
00:56:14,640 --> 00:56:18,599
time complexity evaluation

1137
00:56:18,599 --> 00:56:23,940
therefore the quantum implementation is

1138
00:56:23,940 --> 00:56:26,880
quite easy we first prepare message

1139
00:56:26,880 --> 00:56:30,540
pairs with the connector circuit and for

1140
00:56:30,540 --> 00:56:33,480
each message pair we will check whether

1141
00:56:33,480 --> 00:56:37,099
they are digest are equal with the

1142
00:56:37,099 --> 00:56:40,200
JavaScript circuit and then we repeat

1143
00:56:40,200 --> 00:56:42,780
those process until our Collision is

1144
00:56:42,780 --> 00:56:44,119
found

1145
00:56:44,119 --> 00:56:47,760
the data complexity in The Brute Force

1146
00:56:47,760 --> 00:56:50,599
Base is 2 to

1147
00:56:50,599 --> 00:56:56,099
206 six run just recomputation and we

1148
00:56:56,099 --> 00:56:58,200
need to construct

1149
00:56:58,200 --> 00:57:02,940
to to 2001 connectors

1150
00:57:02,940 --> 00:57:06,900
so we use this uh formula to evaluate

1151
00:57:06,900 --> 00:57:10,380
the complexity of the quantum creation

1152
00:57:10,380 --> 00:57:11,480
attack

1153
00:57:11,480 --> 00:57:16,140
their ta and the essay denote the depth

1154
00:57:16,140 --> 00:57:20,280
and width of the overall Quantum circuit

1155
00:57:20,280 --> 00:57:24,660
and we Define the depth and width of the

1156
00:57:24,660 --> 00:57:29,400
three circuit as the identity depth and

1157
00:57:29,400 --> 00:57:32,880
the identity which in any that TS and

1158
00:57:32,880 --> 00:57:35,640
the SS are one

1159
00:57:35,640 --> 00:57:39,440
so the overall steps ta

1160
00:57:39,440 --> 00:57:43,200
equals to the depth of the uh sorry

1161
00:57:43,200 --> 00:57:46,460
circuit because uh comparing to the

1162
00:57:46,460 --> 00:57:49,859
accessory circuit the connector circuit

1163
00:57:49,859 --> 00:57:53,760
cloning consists of linear operations so

1164
00:57:53,760 --> 00:57:58,440
it steps is negligible

1165
00:57:58,440 --> 00:58:02,040
and the overall width of the

1166
00:58:02,040 --> 00:58:06,380
Quantum circuit is a

1167
00:58:06,380 --> 00:58:09,980
742 and we use this method to

1168
00:58:09,980 --> 00:58:13,619
represent the width of connector circuit

1169
00:58:13,619 --> 00:58:17,099
circuit with the Juicery circuit and

1170
00:58:17,099 --> 00:58:20,520
then we get the total time complexity of

1171
00:58:20,520 --> 00:58:21,420
the

1172
00:58:21,420 --> 00:58:25,140
Quantum Collision attack this value and

1173
00:58:25,140 --> 00:58:27,300
it is smaller than the

1174
00:58:27,300 --> 00:58:29,940
time space trend of margin we have

1175
00:58:29,940 --> 00:58:33,780
mentioned so it's a value the quantum

1176
00:58:33,780 --> 00:58:39,359
cliching attack on just 3 255

1177
00:58:40,319 --> 00:58:43,920
and the Collision attacks on charge 324

1178
00:58:43,920 --> 00:58:47,339
is similar with only slice a difference

1179
00:58:47,339 --> 00:58:51,240
on the connecting Trail and this time

1180
00:58:51,240 --> 00:58:55,279
complexity is this value

1181
00:58:56,040 --> 00:58:59,940
so in conclusion uh they propose a

1182
00:58:59,940 --> 00:59:02,460
setbacks the automatic Trail search

1183
00:59:02,460 --> 00:59:03,599
toolkit

1184
00:59:03,599 --> 00:59:07,200
and the generated by the colliding and

1185
00:59:07,200 --> 00:59:09,720
the connecting trails

1186
00:59:09,720 --> 00:59:13,140
and then we

1187
00:59:13,140 --> 00:59:16,740
we can improve the previous work style

1188
00:59:16,740 --> 00:59:19,200
went wrong and present the first six

1189
00:59:19,200 --> 00:59:21,000
round Collision attacks in both

1190
00:59:21,000 --> 00:59:23,760
classical and the quantum settings thank

1191
00:59:23,760 --> 00:59:25,940
you

1192
00:59:32,460 --> 00:59:35,180
for this talk

1193
00:59:45,900 --> 00:59:49,200
so I have one question for the thumb

1194
00:59:49,200 --> 00:59:51,839
complexity for the sixth round cleaning

1195
00:59:51,839 --> 00:59:56,280
attack on Shake okay yeah not the

1196
00:59:56,280 --> 00:59:58,440
classical

1197
00:59:58,440 --> 01:00:00,480
oh yeah so here

1198
01:00:00,480 --> 01:00:03,480
you compare that in terms of beat

1199
01:00:03,480 --> 01:00:04,920
operations

1200
01:00:04,920 --> 01:00:08,819
and you calculate the I mean so

1201
01:00:08,819 --> 01:00:12,599
you say for six round Shake uh you need

1202
01:00:12,599 --> 01:00:15,720
so many bit operations but indeed

1203
01:00:15,720 --> 01:00:19,260
so we can it can be implemented in a

1204
01:00:19,260 --> 01:00:22,559
much efficient way so do you think it's

1205
01:00:22,559 --> 01:00:25,260
fair because we do not need to do

1206
01:00:25,260 --> 01:00:29,640
bit by bit when doing the check a

1207
01:00:29,640 --> 01:00:33,599
compression but for this attack you need

1208
01:00:33,599 --> 01:00:36,240
to use algebraic technique so we need to

1209
01:00:36,240 --> 01:00:38,520
do it bit by bit so do you think it's

1210
01:00:38,520 --> 01:00:42,540
fair or should you compare it with the

1211
01:00:42,540 --> 01:00:46,700
you need time to perform the kitchen

1212
01:00:46,700 --> 01:00:50,640
sixth round kitchen permutation uh the

1213
01:00:50,640 --> 01:00:53,040
real time and then compared with the

1214
01:00:53,040 --> 01:00:55,980
real-time for solving the equation

1215
01:00:55,980 --> 01:00:58,140
system

1216
01:00:58,140 --> 01:01:01,740
uh so in our understanding we think uh

1217
01:01:01,740 --> 01:01:06,059
the implementation differs uh it depends

1218
01:01:06,059 --> 01:01:09,540
on who implements the algorithm

1219
01:01:09,540 --> 01:01:12,839
so it's possible that uh

1220
01:01:12,839 --> 01:01:16,799
in E1 environment the implementation is

1221
01:01:16,799 --> 01:01:18,839
better and the other environment the

1222
01:01:18,839 --> 01:01:22,640
implementation is worse so so we do not

1223
01:01:22,640 --> 01:01:27,900
compare them with a exact implementation

1224
01:01:27,900 --> 01:01:32,700
but but uh so I think SPS think is not

1225
01:01:32,700 --> 01:01:35,040
fair comparison because we did not need

1226
01:01:35,040 --> 01:01:37,859
to perform the one function B5 gig so

1227
01:01:37,859 --> 01:01:43,020
because we can do the it is a 60 uh

1228
01:01:43,020 --> 01:01:47,220
maybe both 64 bit so we can impair a

1229
01:01:47,220 --> 01:01:48,059
little way

1230
01:01:48,059 --> 01:01:51,119
we have such a

1231
01:01:51,119 --> 01:01:53,099
command

1232
01:01:53,099 --> 01:01:54,240
yeah

1233
01:01:54,240 --> 01:01:58,260
yeah I get the point so I think

1234
01:01:58,260 --> 01:01:59,940
yeah

1235
01:01:59,940 --> 01:02:01,799
yeah that would be it should refine

1236
01:02:01,799 --> 01:02:04,579
something and I have one more question

1237
01:02:04,579 --> 01:02:08,819
for the uh maybe for the in the quantum

1238
01:02:08,819 --> 01:02:10,440
setting

1239
01:02:10,440 --> 01:02:13,319
um maybe uh do you uh

1240
01:02:13,319 --> 01:02:15,960
so according to my understanding you

1241
01:02:15,960 --> 01:02:17,520
will

1242
01:02:17,520 --> 01:02:20,520
also involve the

1243
01:02:20,520 --> 01:02:25,680
uh the face to build the connector in

1244
01:02:25,680 --> 01:02:27,660
maybe you will also use a Quantum

1245
01:02:27,660 --> 01:02:30,180
circuit to build the connector right yes

1246
01:02:30,180 --> 01:02:32,460
so do you think

1247
01:02:32,460 --> 01:02:35,819
uh and then you also

1248
01:02:35,819 --> 01:02:37,680
uh

1249
01:02:37,680 --> 01:02:41,579
do you think it is easy to do this

1250
01:02:41,579 --> 01:02:46,200
uh yeah as I have studied in the in the

1251
01:02:46,200 --> 01:02:50,180
presentation we did not consider the uh

1252
01:02:50,180 --> 01:02:53,040
the quantum implementation the quantum

1253
01:02:53,040 --> 01:02:55,859
Circuit of the connector of the gesture

1254
01:02:55,859 --> 01:02:57,480
computation

1255
01:02:57,480 --> 01:03:00,540
we just assume we have those uh circuit

1256
01:03:00,540 --> 01:03:03,900
and we concentrate on the time

1257
01:03:03,900 --> 01:03:05,940
complexity

1258
01:03:05,940 --> 01:03:09,540
okay thank you thank you

1259
01:03:09,540 --> 01:03:12,558
any other questions

1260
01:03:15,839 --> 01:03:18,420
okay okay thank you again for the good

1261
01:03:18,420 --> 01:03:20,900
presentation

1262
01:03:23,460 --> 01:03:25,559
yeah

1263
01:03:25,559 --> 01:03:29,400
and this is the end of this section and

1264
01:03:29,400 --> 01:03:33,660
so thank you all of your attentions and

1265
01:03:33,660 --> 01:03:35,760
so please enjoy your rest of the days

1266
01:03:35,760 --> 01:03:38,660
thank you

