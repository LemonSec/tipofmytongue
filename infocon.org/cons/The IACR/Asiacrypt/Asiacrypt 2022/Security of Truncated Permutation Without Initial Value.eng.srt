1
00:00:00,599 --> 00:00:03,419
hello everyone I'm Lorenzo Gracie and

2
00:00:03,419 --> 00:00:04,980
I'm going to briefly present this paper

3
00:00:04,980 --> 00:00:06,540
about the security of truncated

4
00:00:06,540 --> 00:00:09,780
permutation without initial vacuum

5
00:00:09,780 --> 00:00:12,660
so a very brief motivation and overview

6
00:00:12,660 --> 00:00:15,900
of this work it is well known that the

7
00:00:15,900 --> 00:00:17,640
authentic permutation applied to the

8
00:00:17,640 --> 00:00:19,800
concatenation of an input value with a

9
00:00:19,800 --> 00:00:21,960
fixed initial value using differentiable

10
00:00:21,960 --> 00:00:23,939
from a random function up to a certain

11
00:00:23,939 --> 00:00:25,140
pound

12
00:00:25,140 --> 00:00:27,840
in this paper we proved that almost the

13
00:00:27,840 --> 00:00:29,939
same bound holds if the fixed value is

14
00:00:29,939 --> 00:00:33,059
replaced by a randomized value and based

15
00:00:33,059 --> 00:00:34,680
on this we propose some concrete

16
00:00:34,680 --> 00:00:36,780
application in the context of parallel

17
00:00:36,780 --> 00:00:40,680
Bible languages generation

18
00:00:40,680 --> 00:00:43,020
um so in a bit more details our goal is

19
00:00:43,020 --> 00:00:44,820
to set up a construction that allows for

20
00:00:44,820 --> 00:00:47,280
a efficient parallel digest generation

21
00:00:47,280 --> 00:00:49,579
and the reason of this is that

22
00:00:49,579 --> 00:00:51,420
evaluating several permutations

23
00:00:51,420 --> 00:00:54,059
simultaneously in modern CPU is faster

24
00:00:54,059 --> 00:00:57,059
than ever within time in sequence

25
00:00:57,059 --> 00:00:59,699
now in the case of prf this goal can be

26
00:00:59,699 --> 00:01:01,260
achieved by making use for example of

27
00:01:01,260 --> 00:01:03,660
the farfallic construction proposed by

28
00:01:03,660 --> 00:01:07,740
Berto Nieto in 2017. in the case of

29
00:01:07,740 --> 00:01:10,380
esching this goal can be achieved by

30
00:01:10,380 --> 00:01:11,939
making use of the master generation

31
00:01:11,939 --> 00:01:13,320
functions

32
00:01:13,320 --> 00:01:16,619
for example here we have the chain MGF

33
00:01:16,619 --> 00:01:18,900
construction which is defined in this

34
00:01:18,900 --> 00:01:21,360
way so we have a function H function H

35
00:01:21,360 --> 00:01:24,659
we return an output of a fixed output

36
00:01:24,659 --> 00:01:26,220
length

37
00:01:26,220 --> 00:01:28,799
um and the construction is defined as a

38
00:01:28,799 --> 00:01:31,080
one-way function applied to the

39
00:01:31,080 --> 00:01:32,880
concatenation of the output of these H

40
00:01:32,880 --> 00:01:36,900
function with an index I

41
00:01:36,900 --> 00:01:38,520
um so there are several ways to set up

42
00:01:38,520 --> 00:01:40,860
these one-way function and one

43
00:01:40,860 --> 00:01:43,860
possibility is making use of donkey of

44
00:01:43,860 --> 00:01:45,900
donated function

45
00:01:45,900 --> 00:01:47,520
um so they don't get the duplication

46
00:01:47,520 --> 00:01:50,939
function takes an input B minus M bits

47
00:01:50,939 --> 00:01:53,100
and return and speed and this is defined

48
00:01:53,100 --> 00:01:55,020
in the following way

49
00:01:55,020 --> 00:01:57,600
um so we take an initial value of M bits

50
00:01:57,600 --> 00:02:00,360
and we concatenate it with the input X

51
00:02:00,360 --> 00:02:03,420
of this location function then we apply

52
00:02:03,420 --> 00:02:06,060
a permutation to this concatenation that

53
00:02:06,060 --> 00:02:08,639
is defined by B bits and finally we

54
00:02:08,639 --> 00:02:10,160
truncate the

55
00:02:10,160 --> 00:02:12,900
output of this permutation so we just

56
00:02:12,900 --> 00:02:16,760
returned the N left nose bits

57
00:02:16,760 --> 00:02:19,980
uh at teacher Crypt 2019

58
00:02:19,980 --> 00:02:22,020
um try to prove that this construction

59
00:02:22,020 --> 00:02:24,120
is indifferentiable from a random

60
00:02:24,120 --> 00:02:26,220
function up to a certain number of

61
00:02:26,220 --> 00:02:30,840
queries which is given by this bound

62
00:02:30,840 --> 00:02:33,300
so I'm not going into the details I just

63
00:02:33,300 --> 00:02:35,819
would like to point out this Vector to

64
00:02:35,819 --> 00:02:38,640
the power of M where m is the size of

65
00:02:38,640 --> 00:02:40,800
the initial value

66
00:02:40,800 --> 00:02:43,620
for example if m is equal to 0 then this

67
00:02:43,620 --> 00:02:45,239
number is equal to 1 which means that

68
00:02:45,239 --> 00:02:49,280
this construction is easily

69
00:02:49,280 --> 00:02:51,660
you can easily differentiate this

70
00:02:51,660 --> 00:02:55,580
function from a random function

71
00:02:55,580 --> 00:02:58,680
so the initial value is crucial for the

72
00:02:58,680 --> 00:03:00,540
indifferentiability but at the same time

73
00:03:00,540 --> 00:03:02,360
it is overkilled because

74
00:03:02,360 --> 00:03:06,780
there are some uh scenario where we can

75
00:03:06,780 --> 00:03:09,360
prove that um this construction is

76
00:03:09,360 --> 00:03:12,360
secure even if even without this fixed

77
00:03:12,360 --> 00:03:14,580
initial value and this is exactly what

78
00:03:14,580 --> 00:03:17,340
we do in this paper so we consider a

79
00:03:17,340 --> 00:03:19,440
modified version of this truncation

80
00:03:19,440 --> 00:03:22,019
function where we replace the fixed

81
00:03:22,019 --> 00:03:24,840
initial value with a randomized one so

82
00:03:24,840 --> 00:03:27,900
we defined these randomized truncation

83
00:03:27,900 --> 00:03:30,180
construction that takes in input to

84
00:03:30,180 --> 00:03:33,780
element and MX and and which is defined

85
00:03:33,780 --> 00:03:36,000
in this way so first of all we apply the

86
00:03:36,000 --> 00:03:39,420
ash function H to M we concatenate the

87
00:03:39,420 --> 00:03:42,959
output of these H function with the

88
00:03:42,959 --> 00:03:45,120
other input X we apply the permutation

89
00:03:45,120 --> 00:03:47,220
predefined is before and then we finally

90
00:03:47,220 --> 00:03:49,560
drink it

91
00:03:49,560 --> 00:03:51,599
so in the paper we proved that this

92
00:03:51,599 --> 00:03:53,700
construction is indifferentiable from a

93
00:03:53,700 --> 00:03:55,260
random Oracle up to a certain number of

94
00:03:55,260 --> 00:03:58,200
ways and interesting this number is very

95
00:03:58,200 --> 00:04:00,420
similar to the one proposed by Charlie

96
00:04:00,420 --> 00:04:02,700
Target 2019

97
00:04:02,700 --> 00:04:04,860
um the main difference regard is last

98
00:04:04,860 --> 00:04:07,379
Vector that as you can see is uh to the

99
00:04:07,379 --> 00:04:09,840
power of m alpha in this case and the

100
00:04:09,840 --> 00:04:13,019
reason is that uh since we since this

101
00:04:13,019 --> 00:04:15,239
value is not fixed we can potentially

102
00:04:15,239 --> 00:04:17,519
have a collision at the output of Dash

103
00:04:17,519 --> 00:04:19,260
function so that's the reason of this

104
00:04:19,260 --> 00:04:21,418
fraction

105
00:04:21,418 --> 00:04:25,020
now based on these we propose a new MGF

106
00:04:25,020 --> 00:04:27,060
construction the Cascade MGF

107
00:04:27,060 --> 00:04:28,919
construction which is defined in this

108
00:04:28,919 --> 00:04:30,120
way

109
00:04:30,120 --> 00:04:32,580
um so we basically concatenate the

110
00:04:32,580 --> 00:04:34,280
output of several

111
00:04:34,280 --> 00:04:37,220
randomized location

112
00:04:37,220 --> 00:04:41,820
we shall apply uh on a message and on an

113
00:04:41,820 --> 00:04:43,860
index I

114
00:04:43,860 --> 00:04:45,780
whereas before the randomized solution

115
00:04:45,780 --> 00:04:48,300
construction depends on a public land of

116
00:04:48,300 --> 00:04:50,940
limitation fee and on a fixed output

117
00:04:50,940 --> 00:04:54,560
length H function h

118
00:04:54,560 --> 00:04:57,720
uh my surprise so discus faction behave

119
00:04:57,720 --> 00:05:00,419
has a variable output length and Oracle

120
00:05:00,419 --> 00:05:03,060
if each behave has a fixed output length

121
00:05:03,060 --> 00:05:06,240
and Oracle and more interesting in the

122
00:05:06,240 --> 00:05:07,560
paper we proved that this construction

123
00:05:07,560 --> 00:05:09,960
has concrete practical advantages with

124
00:05:09,960 --> 00:05:11,780
respect to other MGF construction

125
00:05:11,780 --> 00:05:16,500
including container MGF and chain MGF

126
00:05:16,500 --> 00:05:18,419
thank you very much for your attention

127
00:05:18,419 --> 00:05:20,639
if you are interested I invite you to

128
00:05:20,639 --> 00:05:23,580
eat our paper or to attend my

129
00:05:23,580 --> 00:05:25,740
presentation at Asia Crypt

130
00:05:25,740 --> 00:05:28,460
thank you again

