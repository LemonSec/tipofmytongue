1
00:00:03,000 --> 00:00:04,920
hello everyone I will be talking about

2
00:00:04,920 --> 00:00:07,500
rotatable zero knowledge sets an audible

3
00:00:07,500 --> 00:00:09,480
dictionary with privacy post compromise

4
00:00:09,480 --> 00:00:11,460
security this joint work between Zoom

5
00:00:11,460 --> 00:00:13,139
NYU and Microsoft research at the full

6
00:00:13,139 --> 00:00:16,379
list of authors listed on the title side

7
00:00:16,379 --> 00:00:17,940
let me begin with the motivating

8
00:00:17,940 --> 00:00:19,980
application and Technical communication

9
00:00:19,980 --> 00:00:21,000
systems

10
00:00:21,000 --> 00:00:23,160
the scenario is that parties wish to

11
00:00:23,160 --> 00:00:24,480
send messages to each other all

12
00:00:24,480 --> 00:00:25,859
communication must go through some

13
00:00:25,859 --> 00:00:27,300
Central server

14
00:00:27,300 --> 00:00:29,220
intended encrypted communication systems

15
00:00:29,220 --> 00:00:30,779
allow parties to communicate securely

16
00:00:30,779 --> 00:00:32,399
without the server being able to read

17
00:00:32,399 --> 00:00:34,320
the messages it forwards

18
00:00:34,320 --> 00:00:36,180
it's used for all sorts of messaging

19
00:00:36,180 --> 00:00:40,200
such as Zoom WhatsApp teams and the most

20
00:00:40,200 --> 00:00:41,760
common solution is to use public key

21
00:00:41,760 --> 00:00:45,420
encryption however to use PKA users need

22
00:00:45,420 --> 00:00:47,760
to know each other's public keys

23
00:00:47,760 --> 00:00:49,500
if the server were to Simply host a

24
00:00:49,500 --> 00:00:51,539
database of public keys that opens up

25
00:00:51,539 --> 00:00:52,920
the possibility of man the middle of

26
00:00:52,920 --> 00:00:54,420
attacks where the server would respond

27
00:00:54,420 --> 00:00:56,280
with a compromised bullet key

28
00:00:56,280 --> 00:00:58,260
a common solution to this is to have

29
00:00:58,260 --> 00:01:00,719
security codes where users directly

30
00:01:00,719 --> 00:01:02,579
share a short code for example the hash

31
00:01:02,579 --> 00:01:04,319
of the Republican which can be checked

32
00:01:04,319 --> 00:01:06,600
manually by other users

33
00:01:06,600 --> 00:01:09,659
however this is you know tedious and

34
00:01:09,659 --> 00:01:11,340
inefficient and so we may want to

35
00:01:11,340 --> 00:01:13,080
automate this process which we can do

36
00:01:13,080 --> 00:01:14,520
using a key transparency system

37
00:01:14,520 --> 00:01:16,140
otherwise known as a knowledgeable

38
00:01:16,140 --> 00:01:18,240
dictionary

39
00:01:18,240 --> 00:01:20,340
in a key transparency system the server

40
00:01:20,340 --> 00:01:21,600
provides a commitment to the database

41
00:01:21,600 --> 00:01:24,600
and to prove Pi for each query that the

42
00:01:24,600 --> 00:01:27,119
identity public key pair returned is in

43
00:01:27,119 --> 00:01:29,460
fact stored in the committed database as

44
00:01:29,460 --> 00:01:30,720
long as all users agree on the

45
00:01:30,720 --> 00:01:32,580
commitment man the middle attacks are

46
00:01:32,580 --> 00:01:34,439
detectable light users checking that

47
00:01:34,439 --> 00:01:35,759
their own public key has been stored

48
00:01:35,759 --> 00:01:37,740
correctly

49
00:01:37,740 --> 00:01:39,600
the database may also change over time

50
00:01:39,600 --> 00:01:41,040
and we don't want users to have to check

51
00:01:41,040 --> 00:01:42,540
the public key stored correctly after

52
00:01:42,540 --> 00:01:43,979
each update

53
00:01:43,979 --> 00:01:47,040
and so therefore after every update uh

54
00:01:47,040 --> 00:01:48,659
the key transparency system will provide

55
00:01:48,659 --> 00:01:50,340
a proof that nothing has been deleted or

56
00:01:50,340 --> 00:01:52,079
changed which can be checked by others

57
00:01:52,079 --> 00:01:54,240
not by the interesting cells

58
00:01:54,240 --> 00:01:56,220
key transparency systems by default do

59
00:01:56,220 --> 00:01:57,899
not preserve privacy and in fact

60
00:01:57,899 --> 00:01:59,460
querying the server without Alice's

61
00:01:59,460 --> 00:02:02,159
publicate me May reveal files publicly

62
00:02:02,159 --> 00:02:03,360
as well

63
00:02:03,360 --> 00:02:05,460
however there are privacy preserving key

64
00:02:05,460 --> 00:02:07,320
transparency systems out there for

65
00:02:07,320 --> 00:02:09,139
example seamless in comics

66
00:02:09,139 --> 00:02:12,180
but these Solutions do not satisfy post

67
00:02:12,180 --> 00:02:13,680
compromise security

68
00:02:13,680 --> 00:02:15,959
in fact when the server is compromised

69
00:02:15,959 --> 00:02:17,459
it is clear that the full database at

70
00:02:17,459 --> 00:02:19,500
that time must be leaked but it is not

71
00:02:19,500 --> 00:02:21,599
necessarily the case that all new public

72
00:02:21,599 --> 00:02:24,420
Keys added later on must also be linked

73
00:02:24,420 --> 00:02:26,099
and the existing Solutions if the

74
00:02:26,099 --> 00:02:27,780
service tape for say commandment 1 has

75
00:02:27,780 --> 00:02:29,400
been leaked then privacy is also lost

76
00:02:29,400 --> 00:02:31,860
for all future commitments

77
00:02:31,860 --> 00:02:34,379
our contribution is to prevent this we

78
00:02:34,379 --> 00:02:36,480
provide a post compromise secure private

79
00:02:36,480 --> 00:02:38,099
key transmission system which we

80
00:02:38,099 --> 00:02:39,920
abstract out into a primitive we call

81
00:02:39,920 --> 00:02:43,379
rzks or rotatable zero knowledge stats

82
00:02:43,379 --> 00:02:45,900
the ZK here refers to the Privacy aspect

83
00:02:45,900 --> 00:02:47,940
and the rotatable here refers to the

84
00:02:47,940 --> 00:02:49,680
post compromised security

85
00:02:49,680 --> 00:02:51,599
our construction will rely on a new

86
00:02:51,599 --> 00:02:52,800
primitive of independent interest

87
00:02:52,800 --> 00:02:55,200
rotatable verifiable random functions or

88
00:02:55,200 --> 00:02:57,480
rvrf

89
00:02:57,480 --> 00:03:01,019
in short an rvrf is a verifiable random

90
00:03:01,019 --> 00:03:02,760
function with the additional ability to

91
00:03:02,760 --> 00:03:04,739
update the public key

92
00:03:04,739 --> 00:03:06,780
when the public key is updated for every

93
00:03:06,780 --> 00:03:08,760
previously queried output the rotatable

94
00:03:08,760 --> 00:03:10,620
verifiable random function provides a

95
00:03:10,620 --> 00:03:13,260
new output and a proof that both outputs

96
00:03:13,260 --> 00:03:15,000
came from the same input

97
00:03:15,000 --> 00:03:17,640
notably the rotation proof must not leak

98
00:03:17,640 --> 00:03:19,140
any information about the inputs

99
00:03:19,140 --> 00:03:20,280
themselves

100
00:03:20,280 --> 00:03:22,739
for full details reader paper or come to

101
00:03:22,739 --> 00:03:25,200
my talk Wednesday December 7th at 1203

102
00:03:25,200 --> 00:03:27,379
pm

