1
00:00:00,000 --> 00:00:02,220
you please rate your hand so that I know

2
00:00:02,220 --> 00:00:05,040
you so you are anchor and the other okay

3
00:00:05,040 --> 00:00:07,819
thank you

4
00:00:13,219 --> 00:00:17,000
I will just start

5
00:00:19,619 --> 00:00:21,980
okay

6
00:00:21,980 --> 00:00:25,619
excuse me uh can you can we wait one

7
00:00:25,619 --> 00:00:29,660
more minute oh yes yes of course

8
00:00:31,980 --> 00:00:34,700
yeah so uh

9
00:00:34,700 --> 00:00:37,320
we would like to make a few quick

10
00:00:37,320 --> 00:00:40,440
announcements about the discussion and

11
00:00:40,440 --> 00:00:42,719
also the banquet tonight

12
00:00:42,719 --> 00:00:47,640
so for the discussion uh we will meet uh

13
00:00:47,640 --> 00:00:51,480
for those who join the discussion we

14
00:00:51,480 --> 00:00:52,440
will meet

15
00:00:52,440 --> 00:00:54,660
at 1 30.

16
00:00:54,660 --> 00:00:57,660
uh just outside the ballroom so in front

17
00:00:57,660 --> 00:00:59,760
of the registration desk

18
00:00:59,760 --> 00:01:04,819
and uh the bus will come to pick you up

19
00:01:04,819 --> 00:01:09,119
and the bus will pick people up for

20
00:01:09,119 --> 00:01:11,520
every like 27 people so if you come

21
00:01:11,520 --> 00:01:14,220
early you will be able to live early as

22
00:01:14,220 --> 00:01:16,260
well and then have more time for the

23
00:01:16,260 --> 00:01:18,799
discussion so please try to

24
00:01:18,799 --> 00:01:21,240
be here on time

25
00:01:21,240 --> 00:01:23,159
and for the

26
00:01:23,159 --> 00:01:26,220
um banquet tonight uh the banker will be

27
00:01:26,220 --> 00:01:29,520
here just in this Ballroom we'll open

28
00:01:29,520 --> 00:01:33,240
the space and the location is here start

29
00:01:33,240 --> 00:01:35,220
at 7 25

30
00:01:35,220 --> 00:01:40,320
and if you are a vegetarian uh please uh

31
00:01:40,320 --> 00:01:43,020
go to the wrong desk

32
00:01:43,020 --> 00:01:46,500
at 5 PM before the banquet and we will

33
00:01:46,500 --> 00:01:50,700
give you a a vegetarian marker and you

34
00:01:50,700 --> 00:01:54,540
will get a good vegetarian set for for

35
00:01:54,540 --> 00:01:55,619
the banquet

36
00:01:55,619 --> 00:01:58,079
and finally we are looking for some

37
00:01:58,079 --> 00:02:02,759
people so if you uh try to look at the

38
00:02:02,759 --> 00:02:05,159
Whiteboard outside as you see if there's

39
00:02:05,159 --> 00:02:07,860
your name and if there is then please

40
00:02:07,860 --> 00:02:10,459
talk to our staff in a registration desk

41
00:02:10,459 --> 00:02:13,500
and all the I mean the Ebola banquet and

42
00:02:13,500 --> 00:02:16,440
the uh the discussion the information is

43
00:02:16,440 --> 00:02:18,000
also on the Whiteboard so you can also

44
00:02:18,000 --> 00:02:21,300
take a look yeah thank you

45
00:02:21,300 --> 00:02:24,000
thank you Kylie for the uh quick

46
00:02:24,000 --> 00:02:27,540
announcement okay so this session we

47
00:02:27,540 --> 00:02:30,180
will start with the first Talk Juicy

48
00:02:30,180 --> 00:02:33,120
secure commitment violent oracles new

49
00:02:33,120 --> 00:02:36,720
impossibility and feasibility so uh the

50
00:02:36,720 --> 00:02:39,360
lateral will be giving the talk

51
00:02:39,360 --> 00:02:41,040
um please

52
00:02:41,040 --> 00:02:42,959
okay thank you

53
00:02:42,959 --> 00:02:46,680
uh hi everyone this is a jelly Joe a PhD

54
00:02:46,680 --> 00:02:48,720
student from Children University the

55
00:02:48,720 --> 00:02:50,700
topic I want to share today is geoc

56
00:02:50,700 --> 00:02:53,220
secure commitments we are an oracles no

57
00:02:53,220 --> 00:02:55,620
impossibility and the feasibility it is

58
00:02:55,620 --> 00:02:57,780
a joint work with being shenzhang and

59
00:02:57,780 --> 00:03:00,840
Aquarium 400 University and hongchangjo

60
00:03:00,840 --> 00:03:04,080
from Virginia Commonwealth University

61
00:03:04,080 --> 00:03:07,140
in this work we will focus on COC

62
00:03:07,140 --> 00:03:08,879
security commitments in the global

63
00:03:08,879 --> 00:03:12,540
Renault models we explore the lower

64
00:03:12,540 --> 00:03:14,580
bound On The Run complexity of the

65
00:03:14,580 --> 00:03:16,560
geosc's Care commitment in the global

66
00:03:16,560 --> 00:03:19,440
and Oracle models and furthermore we aim

67
00:03:19,440 --> 00:03:22,080
to give a random optimal constructions

68
00:03:22,080 --> 00:03:24,239
under minimal assumptions before

69
00:03:24,239 --> 00:03:26,640
introducing our work we will explain the

70
00:03:26,640 --> 00:03:29,280
motivations of our work namely someone

71
00:03:29,280 --> 00:03:31,680
may wonder why we studied the global

72
00:03:31,680 --> 00:03:34,800
Renault model and while we study in the

73
00:03:34,800 --> 00:03:38,040
UC framework if Global run Oracle is a

74
00:03:38,040 --> 00:03:40,440
really interesting setup to study then

75
00:03:40,440 --> 00:03:42,000
what's the difference between the local

76
00:03:42,000 --> 00:03:44,040
and Oracle and the global an oracle

77
00:03:44,040 --> 00:03:46,799
after explaining the motivations will

78
00:03:46,799 --> 00:03:49,019
introduce our research questions and our

79
00:03:49,019 --> 00:03:51,360
results finally we will leave two

80
00:03:51,360 --> 00:03:53,099
interesting open questions for the

81
00:03:53,099 --> 00:03:54,239
future work

82
00:03:54,239 --> 00:03:56,459
okay let us stand now

83
00:03:56,459 --> 00:03:58,860
random oracles are important in

84
00:03:58,860 --> 00:04:01,140
cryptography they enable highly

85
00:04:01,140 --> 00:04:03,360
efficient protocols for example there

86
00:04:03,360 --> 00:04:05,640
are some Financial heuristic based zero

87
00:04:05,640 --> 00:04:07,860
knowledge proof and there are also some

88
00:04:07,860 --> 00:04:10,019
are based OT protocol

89
00:04:10,019 --> 00:04:13,920
Renault is idealized setup in real life

90
00:04:13,920 --> 00:04:16,199
applications people always use hash

91
00:04:16,199 --> 00:04:18,298
functions to instantiate the Rhino

92
00:04:18,298 --> 00:04:21,139
records the hash functions such as extra

93
00:04:21,139 --> 00:04:24,840
256 are predefined and can be obtained

94
00:04:24,840 --> 00:04:27,000
by people from anywhere

95
00:04:27,000 --> 00:04:29,460
that means there might be a group of

96
00:04:29,460 --> 00:04:31,919
people using it to execute their

97
00:04:31,919 --> 00:04:34,620
knowledge proof at the same time there

98
00:04:34,620 --> 00:04:36,660
might be another group of people using

99
00:04:36,660 --> 00:04:39,360
the same hash function to execute the

100
00:04:39,360 --> 00:04:41,820
OT particle that means in real life

101
00:04:41,820 --> 00:04:44,520
applications the Renault record can be

102
00:04:44,520 --> 00:04:46,800
seen as a global setup which is

103
00:04:46,800 --> 00:04:48,360
available for different protocol

104
00:04:48,360 --> 00:04:52,020
instance however the famous UC framework

105
00:04:52,020 --> 00:04:55,320
only choose run Oracle as a local setup

106
00:04:55,320 --> 00:04:58,620
the UC framework proposed by rank Neti

107
00:04:58,620 --> 00:05:00,259
is very important in the area of

108
00:05:00,259 --> 00:05:03,120
cryptographic protocols since it can be

109
00:05:03,120 --> 00:05:05,400
used to analyze the security protocols

110
00:05:05,400 --> 00:05:07,680
on the concurrent executions and it

111
00:05:07,680 --> 00:05:09,840
enables modular design of the protocols

112
00:05:09,840 --> 00:05:12,840
however in the UC filmlock the

113
00:05:12,840 --> 00:05:14,580
environment cannot have the direct

114
00:05:14,580 --> 00:05:17,100
access to the Rhino record in other

115
00:05:17,100 --> 00:05:19,560
words this run Oracle is only local to

116
00:05:19,560 --> 00:05:22,020
the protocol this protocol instance and

117
00:05:22,020 --> 00:05:23,880
is not available for the parties from

118
00:05:23,880 --> 00:05:26,460
other protocol instance that's why we

119
00:05:26,460 --> 00:05:28,800
see that UC framework only since random

120
00:05:28,800 --> 00:05:31,500
Oracle as a local setup therefore that

121
00:05:31,500 --> 00:05:33,600
might be so inconsistency between the

122
00:05:33,600 --> 00:05:36,380
theory and the practice

123
00:05:36,380 --> 00:05:38,940
let us Suppose there is again named

124
00:05:38,940 --> 00:05:41,100
Alice who wants to compose a zero

125
00:05:41,100 --> 00:05:43,139
knowledge proof and an OT protocol and

126
00:05:43,139 --> 00:05:45,180
both of the protocol use the Renault

127
00:05:45,180 --> 00:05:48,180
record as the setup in practice at least

128
00:05:48,180 --> 00:05:50,639
may wish to instantiate the Renault

129
00:05:50,639 --> 00:05:52,620
records in both particles with the SIM

130
00:05:52,620 --> 00:05:56,820
hash function such as the share 256. in

131
00:05:56,820 --> 00:05:58,860
this case there might be some shared

132
00:05:58,860 --> 00:06:00,900
States between these two particles since

133
00:06:00,900 --> 00:06:03,600
they use the same hash functions however

134
00:06:03,600 --> 00:06:07,080
in theorem if Alice choose to design the

135
00:06:07,080 --> 00:06:09,180
underlying their knowledge proof and the

136
00:06:09,180 --> 00:06:11,940
OT protocol in the UC framework then

137
00:06:11,940 --> 00:06:13,440
there might be some inconsistency

138
00:06:13,440 --> 00:06:16,380
because UC framework only shows Renault

139
00:06:16,380 --> 00:06:19,080
record as a local setup so there are no

140
00:06:19,080 --> 00:06:20,340
shutter States between these two

141
00:06:20,340 --> 00:06:23,699
protocols then how to remove this

142
00:06:23,699 --> 00:06:25,440
inconsistency

143
00:06:25,440 --> 00:06:28,680
to the justice issue Canada's past and

144
00:06:28,680 --> 00:06:31,319
the voltage proposes a generalized usage

145
00:06:31,319 --> 00:06:35,039
using intuitive mode the environment can

146
00:06:35,039 --> 00:06:37,400
directly assess the Rhino record

147
00:06:37,400 --> 00:06:40,199
so the simulator can no longer simulate

148
00:06:40,199 --> 00:06:42,840
the rhetorical in the ideal World

149
00:06:42,840 --> 00:06:45,360
execution anymore and the Rhino record

150
00:06:45,360 --> 00:06:47,699
becomes Global and is available for

151
00:06:47,699 --> 00:06:50,940
different protocol instances and we

152
00:06:50,940 --> 00:06:54,060
should still study in the COC framework

153
00:06:54,060 --> 00:06:57,539
a natural question to ask is what's the

154
00:06:57,539 --> 00:06:59,160
difference between the local Rhino

155
00:06:59,160 --> 00:07:02,400
record and the global analytical and as

156
00:07:02,400 --> 00:07:04,259
first books on the local Rhino record

157
00:07:04,259 --> 00:07:06,600
since the simulator can simulate the

158
00:07:06,600 --> 00:07:09,240
local Renault record it provides the

159
00:07:09,240 --> 00:07:12,000
simulator with two advantages that is

160
00:07:12,000 --> 00:07:14,960
the observability and programmability

161
00:07:14,960 --> 00:07:17,280
observability means that the simulator

162
00:07:17,280 --> 00:07:20,280
can see the queries sent by anyone and

163
00:07:20,280 --> 00:07:22,259
the programmability means that the

164
00:07:22,259 --> 00:07:24,840
simulator can determine the answer of

165
00:07:24,840 --> 00:07:27,259
the queries sent by anyone

166
00:07:27,259 --> 00:07:30,120
however this is no longer hosting the

167
00:07:30,120 --> 00:07:33,120
guc7 since the geosystem later is

168
00:07:33,120 --> 00:07:35,240
external to the global Rhino record

169
00:07:35,240 --> 00:07:38,220
therefore the simulator can obtain

170
00:07:38,220 --> 00:07:40,800
neither the observability in order

171
00:07:40,800 --> 00:07:43,080
programmability by simulating the global

172
00:07:43,080 --> 00:07:45,360
an oracle then hushed we model the

173
00:07:45,360 --> 00:07:46,979
global random Oracle

174
00:07:46,979 --> 00:07:49,319
here we list four famous Global run

175
00:07:49,319 --> 00:07:51,539
Oracles in the literature the first

176
00:07:51,539 --> 00:07:54,060
Global Oracle is global stricter and

177
00:07:54,060 --> 00:07:57,660
Oracle should afford CSL in terms of GSL

178
00:07:57,660 --> 00:08:00,419
the simulator has no extra power at all

179
00:08:00,419 --> 00:08:04,080
the simulator can only require the gso

180
00:08:04,080 --> 00:08:06,960
and obtain a random value as the output

181
00:08:06,960 --> 00:08:10,319
just like other parties obviously this

182
00:08:10,319 --> 00:08:13,520
setup is so weak and it is proven in

183
00:08:13,520 --> 00:08:16,380
cdp007 that COC security commitment is

184
00:08:16,380 --> 00:08:19,379
impossible to achieve in the GSL model

185
00:08:19,379 --> 00:08:21,660
the intonation behind this impossibility

186
00:08:21,660 --> 00:08:24,599
is that the simulator has no advantages

187
00:08:24,599 --> 00:08:27,599
over the real world adversary in the CSR

188
00:08:27,599 --> 00:08:30,419
model therefore launchable two-party

189
00:08:30,419 --> 00:08:32,580
computer functionalities cannot be

190
00:08:32,580 --> 00:08:33,958
realized

191
00:08:33,958 --> 00:08:37,679
later a stressing version of gsro is

192
00:08:37,679 --> 00:08:40,320
proposed namely Global restricted

193
00:08:40,320 --> 00:08:43,339
observable role should 40 on

194
00:08:43,339 --> 00:08:47,040
CR model the simulator is granted of

195
00:08:47,040 --> 00:08:50,220
restricted obserability namely the

196
00:08:50,220 --> 00:08:52,200
simulator can see that versus

197
00:08:52,200 --> 00:08:55,140
requirements now the simulator has

198
00:08:55,140 --> 00:08:57,480
advantage over the adversary and the

199
00:08:57,480 --> 00:09:00,240
coc's care commitment is possible in

200
00:09:00,240 --> 00:09:03,060
fact in such as support team the authors

201
00:09:03,060 --> 00:09:05,339
give a fair run constructions on the

202
00:09:05,339 --> 00:09:08,240
dialog assumptions in the CR model

203
00:09:08,240 --> 00:09:11,580
after that another stressing version of

204
00:09:11,580 --> 00:09:15,060
GSL is proposed namely the global

205
00:09:15,060 --> 00:09:18,120
restricted programmable should force the

206
00:09:18,120 --> 00:09:22,320
RPL in crpr the simulator is granted as

207
00:09:22,320 --> 00:09:25,680
a restricted programmability that is the

208
00:09:25,680 --> 00:09:28,260
simulator can program the uncired points

209
00:09:28,260 --> 00:09:31,260
without being detected and Surround

210
00:09:31,260 --> 00:09:34,200
constructions was given but on the CDH

211
00:09:34,200 --> 00:09:37,560
assumption at the same time the global

212
00:09:37,560 --> 00:09:40,440
restricted program for an observable are

213
00:09:40,440 --> 00:09:44,339
should afford trporo is proposed it is

214
00:09:44,339 --> 00:09:46,560
the most powerful Global and Oracle in

215
00:09:46,560 --> 00:09:48,899
the literature and it is so powerful

216
00:09:48,899 --> 00:09:51,540
that the two rounds uses calculate with

217
00:09:51,540 --> 00:09:55,320
unconditional security is possible

218
00:09:55,320 --> 00:09:58,080
with above background knowledge we can

219
00:09:58,080 --> 00:10:00,240
finally introduce our work our work

220
00:10:00,240 --> 00:10:03,480
focus on the commitment in the TR model

221
00:10:03,480 --> 00:10:06,180
which is to study commitment because it

222
00:10:06,180 --> 00:10:08,779
is a fundamental crypto primitive having

223
00:10:08,779 --> 00:10:10,860
commitment in hand that we can build

224
00:10:10,860 --> 00:10:12,060
anything else

225
00:10:12,060 --> 00:10:15,180
and we choose to study the GRL model

226
00:10:15,180 --> 00:10:18,360
because the other Global render records

227
00:10:18,360 --> 00:10:20,279
is either too weak or too strong

228
00:10:20,279 --> 00:10:23,240
furthermore

229
00:10:23,660 --> 00:10:27,660
do not captured inability since it is

230
00:10:27,660 --> 00:10:30,240
remarked in past zero seven and such as

231
00:10:30,240 --> 00:10:33,720
protein that deniability deniability is

232
00:10:33,720 --> 00:10:35,880
impossible to achieve in the program for

233
00:10:35,880 --> 00:10:38,519
our model and because deniability is

234
00:10:38,519 --> 00:10:40,560
very hard to formalize and it is

235
00:10:40,560 --> 00:10:44,040
autoscope so we automated here to sum up

236
00:10:44,040 --> 00:10:47,459
we believe that CR model is a reasonable

237
00:10:47,459 --> 00:10:50,880
Global setup to study and there are many

238
00:10:50,880 --> 00:10:52,980
fellow apps since the original work of

239
00:10:52,980 --> 00:10:55,200
the gluc security commitment in the CR

240
00:10:55,200 --> 00:10:58,079
model among them others chips the

241
00:10:58,079 --> 00:11:00,540
minimal run complexity and requests the

242
00:11:00,540 --> 00:11:03,740
weakest computational assumptions

243
00:11:03,740 --> 00:11:07,140
it is well known that in the local hour

244
00:11:07,140 --> 00:11:09,600
model uses care commitment can be

245
00:11:09,600 --> 00:11:12,120
constructed in only two rounds however

246
00:11:12,120 --> 00:11:14,820
as you can see in this Slide the minimum

247
00:11:14,820 --> 00:11:17,820
round complexity of the previous work in

248
00:11:17,820 --> 00:11:20,360
the CR model is three

249
00:11:20,360 --> 00:11:23,160
therefore it is natural for us to ask

250
00:11:23,160 --> 00:11:25,680
her what is the lower bound on the

251
00:11:25,680 --> 00:11:27,720
random complexity of the juices care

252
00:11:27,720 --> 00:11:30,480
committment in the tlr model

253
00:11:30,480 --> 00:11:33,600
and furthermore if if there exists

254
00:11:33,600 --> 00:11:35,399
essential law bound we are also

255
00:11:35,399 --> 00:11:37,560
wondering if we can give a run optimal

256
00:11:37,560 --> 00:11:39,480
constructions on the only minimal

257
00:11:39,480 --> 00:11:42,660
assumptions note that in this work we do

258
00:11:42,660 --> 00:11:45,620
not consider the simultaneous runs

259
00:11:45,620 --> 00:11:48,660
to answer the first question we prove

260
00:11:48,660 --> 00:11:50,940
that the lower bound on round complexity

261
00:11:50,940 --> 00:11:54,120
for COC security commitment in the TRL

262
00:11:54,120 --> 00:11:56,160
model is to to answer the second

263
00:11:56,160 --> 00:11:58,380
questions we give a three round

264
00:11:58,380 --> 00:12:00,180
constructions on the minimal assumptions

265
00:12:00,180 --> 00:12:03,779
in the gr model and with just that it is

266
00:12:03,779 --> 00:12:06,000
run optimal

267
00:12:06,000 --> 00:12:08,820
now I will give a brief descriptions

268
00:12:08,820 --> 00:12:11,459
about the security proof of the lower

269
00:12:11,459 --> 00:12:15,000
bound we provide by contradiction this

270
00:12:15,000 --> 00:12:17,279
proof approach was the first introduced

271
00:12:17,279 --> 00:12:19,500
by Canadian defense Chile and was later

272
00:12:19,500 --> 00:12:22,459
Taken in cdp007 and

273
00:12:22,459 --> 00:12:25,980
dsw08 in the GOC setting the proof

274
00:12:25,980 --> 00:12:28,320
approach can be summarized in two steps

275
00:12:28,320 --> 00:12:31,079
first we just assume such a protocol

276
00:12:31,079 --> 00:12:33,540
exists then we will review a

277
00:12:33,540 --> 00:12:36,540
contradiction so let us just assume

278
00:12:36,540 --> 00:12:39,420
there exists to run the glc's secure

279
00:12:39,420 --> 00:12:42,420
commitment in the tiao model and let us

280
00:12:42,420 --> 00:12:45,300
consider the case where the receiver is

281
00:12:45,300 --> 00:12:49,139
a static statically crafted in this case

282
00:12:49,139 --> 00:12:51,060
the simulator should generate the

283
00:12:51,060 --> 00:12:52,980
commitment without knowing the plane

284
00:12:52,980 --> 00:12:55,440
test in the committing phase and later

285
00:12:55,440 --> 00:12:57,720
in the opening phase the simulator will

286
00:12:57,720 --> 00:12:59,820
receive the plane test and it should be

287
00:12:59,820 --> 00:13:02,579
able to equivocate the commitment to the

288
00:13:02,579 --> 00:13:04,760
plane test he received

289
00:13:04,760 --> 00:13:07,500
uh Records after the simulator's

290
00:13:07,500 --> 00:13:10,680
advantages in the TRL model is that the

291
00:13:10,680 --> 00:13:12,779
simulator can see that versus queries

292
00:13:12,779 --> 00:13:16,260
our main observation is that the

293
00:13:16,260 --> 00:13:18,779
receiver does not to does not need to

294
00:13:18,779 --> 00:13:21,360
send anything in such a two round

295
00:13:21,360 --> 00:13:25,019
protocol so the crafted receiver can

296
00:13:25,019 --> 00:13:27,060
delay its queries to the random Oracle

297
00:13:27,060 --> 00:13:30,180
until the commuter has sent all his

298
00:13:30,180 --> 00:13:32,000
messages

299
00:13:32,000 --> 00:13:35,100
in this case the simulator cannot know

300
00:13:35,100 --> 00:13:37,380
the adverse risk queries before

301
00:13:37,380 --> 00:13:40,260
Computing and sending its messages in

302
00:13:40,260 --> 00:13:42,240
other words the simulator has no

303
00:13:42,240 --> 00:13:45,779
advantages of others at all however in

304
00:13:45,779 --> 00:13:48,360
order to guarantee that use security the

305
00:13:48,360 --> 00:13:50,820
simulator should be should be still

306
00:13:50,820 --> 00:13:54,120
should be able to handle this malicious

307
00:13:54,120 --> 00:13:56,839
behavior so somehow the simulator

308
00:13:56,839 --> 00:14:00,240
generates the commitment without knowing

309
00:14:00,240 --> 00:14:03,180
plane test in the committing phase and

310
00:14:03,180 --> 00:14:05,279
later in the opening phase by by the

311
00:14:05,279 --> 00:14:08,459
simulator receives the plane test B he

312
00:14:08,459 --> 00:14:10,260
should be able to equivocate the

313
00:14:10,260 --> 00:14:12,899
community to the plane test B and adjust

314
00:14:12,899 --> 00:14:15,200
the reveal the opening to the receiver

315
00:14:15,200 --> 00:14:18,000
notice that the simulator has no

316
00:14:18,000 --> 00:14:20,820
advantages over others at all so this

317
00:14:20,820 --> 00:14:22,620
simulated algorithm can be run by

318
00:14:22,620 --> 00:14:25,800
anywhere therefore if such a simulator

319
00:14:25,800 --> 00:14:29,279
exists then it will evaluate The Binding

320
00:14:29,279 --> 00:14:31,680
property of the underlying inducing

321
00:14:31,680 --> 00:14:34,019
secure commitment so that's a

322
00:14:34,019 --> 00:14:37,079
contradiction it is just an informal

323
00:14:37,079 --> 00:14:39,779
description of our proof the formal

324
00:14:39,779 --> 00:14:42,240
proof is a little bit more complex and

325
00:14:42,240 --> 00:14:44,100
if you are really interested you can see

326
00:14:44,100 --> 00:14:46,160
it in our paper

327
00:14:46,160 --> 00:14:49,500
now we know that two runs uses static

328
00:14:49,500 --> 00:14:51,420
scale commitment is impossible to

329
00:14:51,420 --> 00:14:54,540
achieve in the GL model to complete the

330
00:14:54,540 --> 00:14:57,360
picture we give a serum constructions

331
00:14:57,360 --> 00:15:00,180
which is the Run Optimum we first come

332
00:15:00,180 --> 00:15:02,399
up with the general framework and then

333
00:15:02,399 --> 00:15:04,500
how that understands show how to

334
00:15:04,500 --> 00:15:07,320
instantiate the building blocks on the

335
00:15:07,320 --> 00:15:09,839
minimal assumptions in our framework

336
00:15:09,839 --> 00:15:11,699
which is very similar to the one

337
00:15:11,699 --> 00:15:14,519
proposed in mis-17 these two building

338
00:15:14,519 --> 00:15:16,620
blocks that is a straight line

339
00:15:16,620 --> 00:15:18,959
extractable non-interactive within its

340
00:15:18,959 --> 00:15:21,540
hiding arguments should for niwh

341
00:15:21,540 --> 00:15:24,199
arguments and the equivalent

342
00:15:24,199 --> 00:15:28,019
in our framework the receiver will first

343
00:15:28,019 --> 00:15:31,320
sample a trapdoor and then use it to

344
00:15:31,320 --> 00:15:33,720
generate the commitment key of the

345
00:15:33,720 --> 00:15:36,959
equivalent then the receiver will use

346
00:15:36,959 --> 00:15:39,480
the capital as the witness and use the

347
00:15:39,480 --> 00:15:41,760
minimum key as the statement to generate

348
00:15:41,760 --> 00:15:44,220
the straight line extractable and wh

349
00:15:44,220 --> 00:15:47,579
proof pack and sends community and the

350
00:15:47,579 --> 00:15:50,100
proof pad to the commuter the commuter

351
00:15:50,100 --> 00:15:52,800
will first check if the proof was

352
00:15:52,800 --> 00:15:57,240
correct and then he will commit to his

353
00:15:57,240 --> 00:16:00,300
plain text using the commitment key he

354
00:16:00,300 --> 00:16:03,600
received and waited by C and it is the

355
00:16:03,600 --> 00:16:05,880
commitment generated and the

356
00:16:05,880 --> 00:16:09,420
corresponding opening after that the

357
00:16:09,420 --> 00:16:12,360
committer will sample a Randomness R and

358
00:16:12,360 --> 00:16:15,240
stands m d and r to the render Oracle

359
00:16:15,240 --> 00:16:18,959
and receives H as the output and finally

360
00:16:18,959 --> 00:16:21,899
the commuter will commit to the output H

361
00:16:21,899 --> 00:16:25,920
and sends C and C Prime to the receiver

362
00:16:25,920 --> 00:16:28,980
and later in the opening phase the

363
00:16:28,980 --> 00:16:32,459
commit adjuster reveal and D Prime and R

364
00:16:32,459 --> 00:16:34,920
to the receiver and the receiver will

365
00:16:34,920 --> 00:16:37,560
perform some checks to determine whether

366
00:16:37,560 --> 00:16:41,279
to accept or not and it is easy to see

367
00:16:41,279 --> 00:16:44,220
why this protocol is Juicy secure and we

368
00:16:44,220 --> 00:16:46,800
automate the security proof here if you

369
00:16:46,800 --> 00:16:48,600
are interested you can see that in our

370
00:16:48,600 --> 00:16:50,060
paper

371
00:16:50,060 --> 00:16:53,459
now we have a general framework then how

372
00:16:53,459 --> 00:16:55,199
to essentiate the building blocks on the

373
00:16:55,199 --> 00:16:57,720
minimal assumption here is our attack in

374
00:16:57,720 --> 00:17:00,420
the roadmap as you can see both of our

375
00:17:00,420 --> 00:17:02,940
building blocks can be constructed from

376
00:17:02,940 --> 00:17:06,240
two special protocols now the only thing

377
00:17:06,240 --> 00:17:09,359
left is how to construct efficient to

378
00:17:09,359 --> 00:17:11,579
special sound Sigma protocols on the

379
00:17:11,579 --> 00:17:12,900
minimal assumptions

380
00:17:12,900 --> 00:17:15,660
one possible solution is to employ the

381
00:17:15,660 --> 00:17:19,260
NPCs head Paradigm which converts MPC

382
00:17:19,260 --> 00:17:22,919
particles to Decay particles however to

383
00:17:22,919 --> 00:17:25,500
the best of our knowledge there are no

384
00:17:25,500 --> 00:17:28,020
MP scenes ahead with the sigma protocols

385
00:17:28,020 --> 00:17:30,600
that achieves the special two special

386
00:17:30,600 --> 00:17:33,179
sound on the minimal assumptions for

387
00:17:33,179 --> 00:17:35,280
example the famous Suzuki blue and

388
00:17:35,280 --> 00:17:37,799
executable plus are three special sound

389
00:17:37,799 --> 00:17:40,799
and we found that the

390
00:17:40,799 --> 00:17:44,039
stigma particles proposed in kkwa team

391
00:17:44,039 --> 00:17:46,740
can never be too special sound our

392
00:17:46,740 --> 00:17:50,340
solution is to based on kkw18 and

393
00:17:50,340 --> 00:17:53,520
propose the first two special sounds and

394
00:17:53,520 --> 00:17:55,260
piecing the head with the sigma

395
00:17:55,260 --> 00:17:59,220
protocols under minimal assumptions

396
00:17:59,220 --> 00:18:02,280
to sum up well in this work we prove

397
00:18:02,280 --> 00:18:05,280
that two runs uses secure commitment is

398
00:18:05,280 --> 00:18:08,460
impossible in the CR model furthermore

399
00:18:08,460 --> 00:18:11,760
we constructed the first round Optimus

400
00:18:11,760 --> 00:18:13,980
uses static skill commitment on the

401
00:18:13,980 --> 00:18:16,280
minimal assumptions in the CR model

402
00:18:16,280 --> 00:18:19,620
among other known work hours achieves

403
00:18:19,620 --> 00:18:21,720
the round optimal and requests the

404
00:18:21,720 --> 00:18:23,940
weakest computational assumptions

405
00:18:23,940 --> 00:18:26,600
foreign

406
00:18:34,700 --> 00:18:37,919
model actually we already have some

407
00:18:37,919 --> 00:18:41,340
possibility results we prove that two

408
00:18:41,340 --> 00:18:43,559
rounds using static skill commitment

409
00:18:43,559 --> 00:18:46,320
it's impossible to achieve in the grpl

410
00:18:46,320 --> 00:18:48,960
model you can see that in the appendix

411
00:18:48,960 --> 00:18:52,020
of our full version paper however we

412
00:18:52,020 --> 00:18:55,020
found we found it extremely hard to give

413
00:18:55,020 --> 00:18:57,120
instructions on the only minimal

414
00:18:57,120 --> 00:18:59,880
assumptions so we leave it as an open

415
00:18:59,880 --> 00:19:03,240
question furthermore in this work we do

416
00:19:03,240 --> 00:19:05,280
not consider the simultaneous rounds

417
00:19:05,280 --> 00:19:07,559
what if we consider the simultaneous

418
00:19:07,559 --> 00:19:11,600
runs we actually already have some

419
00:19:11,600 --> 00:19:15,660
feasibility we constructed the first two

420
00:19:15,660 --> 00:19:18,240
rounds using static skill commitment on

421
00:19:18,240 --> 00:19:20,700
the CDH assumptions in the TRL model

422
00:19:20,700 --> 00:19:24,240
assuming simultaneous runs and it is in

423
00:19:24,240 --> 00:19:26,700
submission but you can find it in the

424
00:19:26,700 --> 00:19:27,660
imprint

425
00:19:27,660 --> 00:19:30,960
but we found it is extremely hard to

426
00:19:30,960 --> 00:19:33,419
give two round constructions on the

427
00:19:33,419 --> 00:19:36,840
minimal assumptions rather in CR mode or

428
00:19:36,840 --> 00:19:40,200
the RPL model so we leave it as another

429
00:19:40,200 --> 00:19:43,860
open questions and that is all thanks

430
00:19:43,860 --> 00:19:46,639
for your listening

431
00:19:48,660 --> 00:19:51,900
um audience any questions

432
00:19:51,900 --> 00:19:54,500
please

433
00:19:58,380 --> 00:20:00,660
foreign

434
00:20:00,660 --> 00:20:03,320
foreign

435
00:20:06,679 --> 00:20:08,760
thanks for the talk

436
00:20:08,760 --> 00:20:09,480
um

437
00:20:09,480 --> 00:20:11,700
so I noticed that you say that you

438
00:20:11,700 --> 00:20:12,780
achieve

439
00:20:12,780 --> 00:20:13,380
um

440
00:20:13,380 --> 00:20:14,700
you got three young commitments under

441
00:20:14,700 --> 00:20:16,320
minimal assumptions

442
00:20:16,320 --> 00:20:18,480
uh that's nice but I'm just curious is

443
00:20:18,480 --> 00:20:21,120
it um obvious

444
00:20:21,120 --> 00:20:23,100
these minimal assumptions that you say

445
00:20:23,100 --> 00:20:26,039
is is it one way functions okay yes yes

446
00:20:26,039 --> 00:20:27,419
one way function

447
00:20:27,419 --> 00:20:30,179
actually it is one function

448
00:20:30,179 --> 00:20:32,640
okay so I'm just curious if

449
00:20:32,640 --> 00:20:36,419
um it's necessarily

450
00:20:36,419 --> 00:20:38,280
or if there's any result that says that

451
00:20:38,280 --> 00:20:39,900
you necessarily need one-way functions

452
00:20:39,900 --> 00:20:40,799
to get

453
00:20:40,799 --> 00:20:43,740
uh commitments

454
00:20:43,740 --> 00:20:46,919
uh okay uh this is a very good questions

455
00:20:46,919 --> 00:20:50,220
actually uh we already consider it

456
00:20:50,220 --> 00:20:54,000
before the submissions but we found that

457
00:20:54,000 --> 00:20:57,620
it is extremely hard to uh

458
00:20:57,620 --> 00:21:01,980
to remove all the assumptions that is it

459
00:21:01,980 --> 00:21:04,200
is extremely hard to give information

460
00:21:04,200 --> 00:21:06,780
theoretical commitment in the an oracle

461
00:21:06,780 --> 00:21:10,799
model so uh Western height is another

462
00:21:10,799 --> 00:21:15,299
interesting open questions yes so the

463
00:21:15,299 --> 00:21:17,400
answer is I don't know just where the

464
00:21:17,400 --> 00:21:19,980
information theoretical commitment can

465
00:21:19,980 --> 00:21:22,140
be constructed in the global an Oracle

466
00:21:22,140 --> 00:21:25,500
and it achieves juices security

467
00:21:25,500 --> 00:21:28,919
I see interesting yeah

468
00:21:28,919 --> 00:21:31,140
oh okay you have another question oh no

469
00:21:31,140 --> 00:21:33,000
I mean just kind of following up like

470
00:21:33,000 --> 00:21:34,620
did you see if it's if you could maybe

471
00:21:34,620 --> 00:21:36,179
use a three down commitment scheme to

472
00:21:36,179 --> 00:21:37,380
construct a one-way function or

473
00:21:37,380 --> 00:21:39,799
something like

474
00:21:41,400 --> 00:21:45,299
uh sorry I didn't follow you oh as in

475
00:21:45,299 --> 00:21:46,980
given a three round scheme in the random

476
00:21:46,980 --> 00:21:49,679
Oracle model if can you construct a

477
00:21:49,679 --> 00:21:51,659
one-way function well it is I was just

478
00:21:51,659 --> 00:21:52,620
wondering if you looked at that

479
00:21:52,620 --> 00:21:54,799
direction

480
00:21:57,740 --> 00:22:00,960
so this is this is to show that the

481
00:22:00,960 --> 00:22:02,880
one-way function is minimal so suppose

482
00:22:02,880 --> 00:22:05,039
your there exists like your construction

483
00:22:05,039 --> 00:22:07,980
then this implies one-way functions then

484
00:22:07,980 --> 00:22:10,380
if this is true then one-way function is

485
00:22:10,380 --> 00:22:12,179
really required

486
00:22:12,179 --> 00:22:14,460
or

487
00:22:14,460 --> 00:22:17,340
um okay the question is have you

488
00:22:17,340 --> 00:22:20,240
explored this direction

489
00:22:20,240 --> 00:22:23,539
uh we didn't explore these directions

490
00:22:23,539 --> 00:22:28,679
and thanks for for your comment I I

491
00:22:28,679 --> 00:22:32,039
think I will after this meeting I will

492
00:22:32,039 --> 00:22:34,679
think about it and

493
00:22:34,679 --> 00:22:37,559
and we didn't think about it before the

494
00:22:37,559 --> 00:22:39,600
submissions and thanks for your

495
00:22:39,600 --> 00:22:42,960
questions and I will really be able to

496
00:22:42,960 --> 00:22:45,720
think about it after the meeting

497
00:22:45,720 --> 00:22:51,260
thank you okay uh any further question

498
00:22:51,419 --> 00:22:53,400
um I have a quick one can you go to your

499
00:22:53,400 --> 00:22:58,440
open Direction okay yeah so

500
00:22:58,440 --> 00:23:01,260
um in your open question one uh you are

501
00:23:01,260 --> 00:23:02,640
exploring

502
00:23:02,640 --> 00:23:05,159
um so I I'm just curious is there a

503
00:23:05,159 --> 00:23:08,460
three runs a secure commitment under uh

504
00:23:08,460 --> 00:23:10,740
some concrete assumptions not minimal

505
00:23:10,740 --> 00:23:13,260
assumptions so uh is there such a

506
00:23:13,260 --> 00:23:14,760
construction

507
00:23:14,760 --> 00:23:20,480
uh yes it is proposed in cdgl and a team

508
00:23:20,480 --> 00:23:23,280
that uh three rounds use this account

509
00:23:23,280 --> 00:23:25,799
commitment on the citiative assumption

510
00:23:25,799 --> 00:23:29,880
is possible in the grpr model uh yes it

511
00:23:29,880 --> 00:23:32,760
already exists one constructions and it

512
00:23:32,760 --> 00:23:36,360
is three round however they need the CDH

513
00:23:36,360 --> 00:23:40,440
summations so we think that it is

514
00:23:40,440 --> 00:23:43,919
interesting if we can uh explore whether

515
00:23:43,919 --> 00:23:45,900
it is possible to give a constraint

516
00:23:45,900 --> 00:23:47,640
constructions on the minimal assumptions

517
00:23:47,640 --> 00:23:52,700
in the grpro model okay thank you

518
00:23:53,100 --> 00:23:56,280
all right um if that there is no more

519
00:23:56,280 --> 00:23:59,900
question let's thank the speaker again

520
00:23:59,900 --> 00:24:03,000
so now we are moving to our next talk

521
00:24:03,000 --> 00:24:07,559
let me take a quick look so the clock is

522
00:24:07,559 --> 00:24:09,299
additive homomorphic functional

523
00:24:09,299 --> 00:24:11,299
commitments and application to

524
00:24:11,299 --> 00:24:14,760
homomorphic signatures and diarrhea will

525
00:24:14,760 --> 00:24:18,539
be given the the talk but that recorded

526
00:24:18,539 --> 00:24:22,158
talk so please

527
00:24:41,940 --> 00:24:43,820
hello everyone

528
00:24:43,820 --> 00:24:46,679
there and I'd like to present you our

529
00:24:46,679 --> 00:24:49,200
research on anti-divamorphic functional

530
00:24:49,200 --> 00:24:51,360
commitments and applications geomorphic

531
00:24:51,360 --> 00:24:53,580
signatures uh which is a joint work with

532
00:24:53,580 --> 00:24:55,400
direct alarm in that attack

533
00:24:55,400 --> 00:24:57,780
so this is a work about functional

534
00:24:57,780 --> 00:24:59,940
commitments um which is a notion

535
00:24:59,940 --> 00:25:03,000
introduced by liberaman and Jung in 2016

536
00:25:03,000 --> 00:25:05,159
as a generalization of the more popular

537
00:25:05,159 --> 00:25:07,080
Notions of vector commitments and

538
00:25:07,080 --> 00:25:08,880
polynomial commitments

539
00:25:08,880 --> 00:25:11,880
so the idea of functional commitments is

540
00:25:11,880 --> 00:25:13,740
that there are two parties uh so a

541
00:25:13,740 --> 00:25:16,799
sender and the receiver the sender we

542
00:25:16,799 --> 00:25:18,679
can think of it as a

543
00:25:18,679 --> 00:25:21,539
large party that can hold a large Vector

544
00:25:21,539 --> 00:25:23,760
X and the receiver instead is of some

545
00:25:23,760 --> 00:25:25,740
little uh resources

546
00:25:25,740 --> 00:25:28,799
and uh then the sender wants to commit

547
00:25:28,799 --> 00:25:30,299
to this large vector and give the

548
00:25:30,299 --> 00:25:31,980
commitment to the receiver

549
00:25:31,980 --> 00:25:34,860
but then at later points in time the

550
00:25:34,860 --> 00:25:37,260
sender wants to compute on the commit uh

551
00:25:37,260 --> 00:25:39,900
Vector um like you run some function f

552
00:25:39,900 --> 00:25:42,840
gives the result to the receiver but

553
00:25:42,840 --> 00:25:44,760
also wants to convince the receiver that

554
00:25:44,760 --> 00:25:46,740
uh if you open the commitment and you

555
00:25:46,740 --> 00:25:48,600
run this computation you obtain this y

556
00:25:48,600 --> 00:25:50,220
as f of x

557
00:25:50,220 --> 00:25:53,039
so the main property that makes

558
00:25:53,039 --> 00:25:55,559
functional commitments uh an interesting

559
00:25:55,559 --> 00:25:58,440
and non-trivial primitive is succeedness

560
00:25:58,440 --> 00:26:01,080
this says the informally that openings

561
00:26:01,080 --> 00:26:03,240
and commitments should be short with

562
00:26:03,240 --> 00:26:05,880
respect to input sides but for example

563
00:26:05,880 --> 00:26:08,400
they may grow with the number of outputs

564
00:26:08,400 --> 00:26:11,580
and um of the function but and for this

565
00:26:11,580 --> 00:26:15,000
reason in uh 2019 La malabolta proposed

566
00:26:15,000 --> 00:26:17,700
a stronger notion uh for bonding the

567
00:26:17,700 --> 00:26:19,679
size of opening that says that opening

568
00:26:19,679 --> 00:26:21,240
should be short with respect to the

569
00:26:21,240 --> 00:26:23,700
input and output sides so ideally we

570
00:26:23,700 --> 00:26:26,700
would actually would like uh have uh

571
00:26:26,700 --> 00:26:29,100
both of commitments openings of constant

572
00:26:29,100 --> 00:26:30,059
sites

573
00:26:30,059 --> 00:26:32,820
so in terms of security functional

574
00:26:32,820 --> 00:26:34,740
commitments are supposed to be Evolution

575
00:26:34,740 --> 00:26:37,340
binding which informally means that

576
00:26:37,340 --> 00:26:39,539
computationally speaking and malicious

577
00:26:39,539 --> 00:26:43,140
sender cannot create a commitment uh and

578
00:26:43,140 --> 00:26:45,240
open it to two different outputs for the

579
00:26:45,240 --> 00:26:46,980
same function f

580
00:26:46,980 --> 00:26:49,740
um and uh in this sense if you look at

581
00:26:49,740 --> 00:26:51,960
the functionality functional commitments

582
00:26:51,960 --> 00:26:53,700
can be seen as a weaker version of

583
00:26:53,700 --> 00:26:55,860
commit improve succinun interactive

584
00:26:55,860 --> 00:26:59,039
arguments in which the strong soundness

585
00:26:59,039 --> 00:27:00,960
notion of Nars in which there is a

586
00:27:00,960 --> 00:27:03,240
single proof or a false statement is

587
00:27:03,240 --> 00:27:05,580
replaced by the evolution binding notion

588
00:27:05,580 --> 00:27:06,900
in which the approver is supposed to

589
00:27:06,900 --> 00:27:08,760
give you two proofs for disagreeing

590
00:27:08,760 --> 00:27:12,299
statements so given this observation uh

591
00:27:12,299 --> 00:27:14,880
potentially we can think that functional

592
00:27:14,880 --> 00:27:16,500
commitments could be a replacement those

593
00:27:16,500 --> 00:27:18,120
nuts in some applications where

594
00:27:18,120 --> 00:27:20,400
Evolution binding is sufficient

595
00:27:20,400 --> 00:27:22,679
there are also additional properties for

596
00:27:22,679 --> 00:27:24,419
functional commitments such as adding

597
00:27:24,419 --> 00:27:26,640
and zero knowledge that we Define and

598
00:27:26,640 --> 00:27:29,039
realize in our paper but I will not

599
00:27:29,039 --> 00:27:31,080
focus on on this for the rest of this

600
00:27:31,080 --> 00:27:32,539
talk

601
00:27:32,539 --> 00:27:35,700
so let me describe what was the state of

602
00:27:35,700 --> 00:27:37,679
the art of functional commitment prior

603
00:27:37,679 --> 00:27:39,779
to uh to our work

604
00:27:39,779 --> 00:27:41,279
um so first of all I would like to

605
00:27:41,279 --> 00:27:43,080
mention that there is a forklore

606
00:27:43,080 --> 00:27:44,760
construction of functional commitments

607
00:27:44,760 --> 00:27:47,700
uh that consists into combining snarks

608
00:27:47,700 --> 00:27:50,039
for MP and a succin commitment and this

609
00:27:50,039 --> 00:27:51,480
gives you a functional commitment for

610
00:27:51,480 --> 00:27:54,659
any polynomial time computation

611
00:27:54,659 --> 00:27:56,640
the drawback of this construction is

612
00:27:56,640 --> 00:27:59,340
that however that it does rely on a

613
00:27:59,340 --> 00:28:00,900
non-participable assumption due to the

614
00:28:00,900 --> 00:28:02,580
use of snarks and non-impostibility

615
00:28:02,580 --> 00:28:03,779
results

616
00:28:03,779 --> 00:28:06,600
so it is uh therefore like

617
00:28:06,600 --> 00:28:09,299
um the interesting problem the one of

618
00:28:09,299 --> 00:28:11,159
realizing functional commitment from

619
00:28:11,159 --> 00:28:13,020
falsifiable assumptions

620
00:28:13,020 --> 00:28:15,900
so in this space we actually have a few

621
00:28:15,900 --> 00:28:17,700
constructions in the state of the art

622
00:28:17,700 --> 00:28:20,400
first we have the Skins by Liberty all

623
00:28:20,400 --> 00:28:22,860
and by lion malabolta that can support

624
00:28:22,860 --> 00:28:25,080
uh linear the execution of linear

625
00:28:25,080 --> 00:28:27,299
functionalities and then more recently

626
00:28:27,299 --> 00:28:29,880
libma and public proposed a scheme in

627
00:28:29,880 --> 00:28:32,940
2020 that can support the evaluation of

628
00:28:32,940 --> 00:28:34,980
semisperse polynomials

629
00:28:34,980 --> 00:28:37,799
so um what we do in this work is to

630
00:28:37,799 --> 00:28:40,320
first start from the questioning of in

631
00:28:40,320 --> 00:28:42,179
which application we can use functional

632
00:28:42,179 --> 00:28:44,880
commitments and with evaluation binding

633
00:28:44,880 --> 00:28:47,880
and our initial motivating result is an

634
00:28:47,880 --> 00:28:50,039
observation that uh if you have a

635
00:28:50,039 --> 00:28:52,200
functional commitment and will sign the

636
00:28:52,200 --> 00:28:53,580
commitment

637
00:28:53,580 --> 00:28:55,860
um this idea heals a very basic form of

638
00:28:55,860 --> 00:28:58,559
amorphic signature but we push this idea

639
00:28:58,559 --> 00:29:01,080
further in our work and show that if the

640
00:29:01,080 --> 00:29:03,360
commitment is additive or fake and you

641
00:29:03,360 --> 00:29:05,159
pair it with the linear leomorphic

642
00:29:05,159 --> 00:29:07,380
signature then you can build a

643
00:29:07,380 --> 00:29:09,059
multi-input or more fixed signatures

644
00:29:09,059 --> 00:29:11,039
that is a more powerful

645
00:29:11,039 --> 00:29:12,020
um

646
00:29:12,020 --> 00:29:14,039
notionomorphic signature in which the

647
00:29:14,039 --> 00:29:16,559
signer can sign the elements of the

648
00:29:16,559 --> 00:29:19,320
large data one by one instead of all at

649
00:29:19,320 --> 00:29:21,720
once and this has for example more

650
00:29:21,720 --> 00:29:23,520
applications such as verifiable

651
00:29:23,520 --> 00:29:25,500
computational data streams

652
00:29:25,500 --> 00:29:28,440
so um you know this uh construction

653
00:29:28,440 --> 00:29:30,360
yields a new paradigm for uh

654
00:29:30,360 --> 00:29:31,860
constructing or more fixed signatures

655
00:29:31,860 --> 00:29:33,600
and the interesting part of it is that

656
00:29:33,600 --> 00:29:36,299
uh the class of functions supported by

657
00:29:36,299 --> 00:29:38,340
the amorphic signatures is the same as

658
00:29:38,340 --> 00:29:40,919
the class of functions as supported by

659
00:29:40,919 --> 00:29:43,020
the functional commitments and finally

660
00:29:43,020 --> 00:29:46,500
we also show that given an additromorphi

661
00:29:46,500 --> 00:29:47,940
functional commitment this is also

662
00:29:47,940 --> 00:29:49,500
updatable in this application to

663
00:29:49,500 --> 00:29:52,820
verifiable databases

664
00:29:53,840 --> 00:29:56,340
functional commitment is uh are

665
00:29:56,340 --> 00:29:58,380
interesting then we ask you know what do

666
00:29:58,380 --> 00:30:00,299
we know about them and can we construct

667
00:30:00,299 --> 00:30:01,080
them

668
00:30:01,080 --> 00:30:03,720
so we observe that in the the

669
00:30:03,720 --> 00:30:05,520
um only commitments in the state of the

670
00:30:05,520 --> 00:30:07,500
art that are added diplomorphic are the

671
00:30:07,500 --> 00:30:10,020
ones by for linear functionalities

672
00:30:10,020 --> 00:30:11,820
so the main results

673
00:30:11,820 --> 00:30:15,120
um in this work in our world is are two

674
00:30:15,120 --> 00:30:16,559
new constructions of functional

675
00:30:16,559 --> 00:30:18,840
commitments that uh

676
00:30:18,840 --> 00:30:20,880
support more than linear functions that

677
00:30:20,880 --> 00:30:22,679
are the development

678
00:30:22,679 --> 00:30:25,260
so we add a scheme for that supports

679
00:30:25,260 --> 00:30:26,880
constant degree polynomials and another

680
00:30:26,880 --> 00:30:28,679
scheme that supports circus in the class

681
00:30:28,679 --> 00:30:31,559
nc1 and both our schemes have new

682
00:30:31,559 --> 00:30:33,659
implications for uh padding basal

683
00:30:33,659 --> 00:30:35,880
morphic signatures

684
00:30:35,880 --> 00:30:39,059
okay so that's the roadmap of uh of the

685
00:30:39,059 --> 00:30:39,960
talk

686
00:30:39,960 --> 00:30:41,820
um I gave you already an overview of our

687
00:30:41,820 --> 00:30:44,520
results now I want to spend uh most of

688
00:30:44,520 --> 00:30:47,520
the remaining time uh by uh give you an

689
00:30:47,520 --> 00:30:49,860
idea of how we construct our functional

690
00:30:49,860 --> 00:30:51,059
commitment for constant degree

691
00:30:51,059 --> 00:30:54,059
polynomials I will briefly mention uh

692
00:30:54,059 --> 00:30:56,700
our FC for nc1 and then I'll move two

693
00:30:56,700 --> 00:30:58,220
conclusions

694
00:30:58,220 --> 00:31:01,380
okay so as a warm up let's see how we

695
00:31:01,380 --> 00:31:03,600
can build an FC for a constant degree

696
00:31:03,600 --> 00:31:07,440
polynomials by a linearization technique

697
00:31:07,440 --> 00:31:10,020
we have a homogeneous polynomial of

698
00:31:10,020 --> 00:31:13,380
degree D and um then we can see that

699
00:31:13,380 --> 00:31:16,200
this can be expressed uh as the inner

700
00:31:16,200 --> 00:31:18,720
product of a vector of coefficients and

701
00:31:18,720 --> 00:31:20,580
a vector of of monomials that are

702
00:31:20,580 --> 00:31:22,980
products of the uh of the variables

703
00:31:22,980 --> 00:31:24,659
right

704
00:31:24,659 --> 00:31:26,940
um and this product of the variables

705
00:31:26,940 --> 00:31:29,279
which we call the vector X Delta is

706
00:31:29,279 --> 00:31:33,179
actually the um Now kronecker power of x

707
00:31:33,179 --> 00:31:34,980
uh

708
00:31:34,980 --> 00:31:37,799
with respect to the tensoring so what

709
00:31:37,799 --> 00:31:39,419
does it mean is in the sense that X

710
00:31:39,419 --> 00:31:42,000
Delta is obtained by uh 10 storing

711
00:31:42,000 --> 00:31:44,279
except x with itself and then you take

712
00:31:44,279 --> 00:31:45,659
the result you tend to read it with

713
00:31:45,659 --> 00:31:47,760
itself and so on and so forth and you do

714
00:31:47,760 --> 00:31:49,679
it uh Delta times where Delta is the

715
00:31:49,679 --> 00:31:53,000
logarithm of the degree d

716
00:31:53,399 --> 00:31:55,679
then um if you have a functional

717
00:31:55,679 --> 00:31:58,080
commitment for linear forms then we can

718
00:31:58,080 --> 00:31:59,640
build a functional commitment for degree

719
00:31:59,640 --> 00:32:02,580
D polynomials as follows so when we have

720
00:32:02,580 --> 00:32:04,620
to commit to x what we actually do is to

721
00:32:04,620 --> 00:32:07,500
use the underlying functional commitment

722
00:32:07,500 --> 00:32:10,740
to commit to this Vector X Delta and

723
00:32:10,740 --> 00:32:12,899
then like when we want to open for a

724
00:32:12,899 --> 00:32:15,360
polynomial F we actually open to the

725
00:32:15,360 --> 00:32:17,700
linear form that expressed the

726
00:32:17,700 --> 00:32:18,240
um

727
00:32:18,240 --> 00:32:20,279
the evaluation of the polynomial is an

728
00:32:20,279 --> 00:32:21,299
inner product

729
00:32:21,299 --> 00:32:24,240
now the um unfortunately this

730
00:32:24,240 --> 00:32:27,179
construction although it is uh correct

731
00:32:27,179 --> 00:32:29,220
and evaluation binding it's not

732
00:32:29,220 --> 00:32:32,100
homomorphic even if the underlying

733
00:32:32,100 --> 00:32:33,779
functional commitment mesomorphic and

734
00:32:33,779 --> 00:32:36,059
this is the case because the what we are

735
00:32:36,059 --> 00:32:38,399
committing are actually like products of

736
00:32:38,399 --> 00:32:40,260
uh of

737
00:32:40,260 --> 00:32:40,980
um

738
00:32:40,980 --> 00:32:43,380
uh all values in X so for example the

739
00:32:43,380 --> 00:32:46,200
value X I may appear in several places

740
00:32:46,200 --> 00:32:48,539
of the committed vector and in product

741
00:32:48,539 --> 00:32:50,640
with other elements

742
00:32:50,640 --> 00:32:54,419
so um to solve this problem like uh our

743
00:32:54,419 --> 00:32:56,640
Construction in a you know very very

744
00:32:56,640 --> 00:32:59,159
high level uh

745
00:32:59,159 --> 00:33:01,559
sense worked as follows so we start with

746
00:33:01,559 --> 00:33:03,659
an additivomorphic function commitments

747
00:33:03,659 --> 00:33:06,120
for linear Maps over a vector space of

748
00:33:06,120 --> 00:33:09,179
Science of sides n to the D when we want

749
00:33:09,179 --> 00:33:11,760
to commit to Vector X we actually do

750
00:33:11,760 --> 00:33:14,220
commit uh to X using the underlying

751
00:33:14,220 --> 00:33:17,159
commitment but then what we do in the

752
00:33:17,159 --> 00:33:20,360
opening is to first uh let the

753
00:33:20,360 --> 00:33:23,220
proverb create a commitment to this

754
00:33:23,220 --> 00:33:25,620
Vector X Delta so now we create this at

755
00:33:25,620 --> 00:33:28,380
opening time we create an open a linear

756
00:33:28,380 --> 00:33:30,539
map of an improve with respect to X

757
00:33:30,539 --> 00:33:31,620
Delta

758
00:33:31,620 --> 00:33:34,860
but then in order to link this x Delta

759
00:33:34,860 --> 00:33:37,380
with the original commitment to X we

760
00:33:37,380 --> 00:33:39,720
create a dedicated proof to show that

761
00:33:39,720 --> 00:33:41,460
extent actually commits to the

762
00:33:41,460 --> 00:33:44,279
chronograph product of uh of X committed

763
00:33:44,279 --> 00:33:46,559
in CX

764
00:33:46,559 --> 00:33:48,659
now that's if the eye level approach

765
00:33:48,659 --> 00:33:50,820
concretely what we do is to open the box

766
00:33:50,820 --> 00:33:53,100
of the linear map functional commitment

767
00:33:53,100 --> 00:33:55,080
of line Mala voltage in order to realize

768
00:33:55,080 --> 00:33:57,840
this functionality in particular this uh

769
00:33:57,840 --> 00:34:00,899
proof or linking the the commitments

770
00:34:00,899 --> 00:34:03,299
okay so let me now go more into the

771
00:34:03,299 --> 00:34:05,640
details so our construction relies on by

772
00:34:05,640 --> 00:34:08,280
linear pairings and here I'm using the

773
00:34:08,280 --> 00:34:10,139
the bracket notation

774
00:34:10,139 --> 00:34:10,859
um

775
00:34:10,859 --> 00:34:15,060
so what we do in setup uh is to create a

776
00:34:15,060 --> 00:34:18,000
commitment key that includes the uh the

777
00:34:18,000 --> 00:34:20,219
powers of a secret Point Alpha from one

778
00:34:20,219 --> 00:34:22,619
up to n to the D and there are some more

779
00:34:22,619 --> 00:34:25,020
elements uh in the commitment key but

780
00:34:25,020 --> 00:34:27,119
for the sake of this explanation there

781
00:34:27,119 --> 00:34:30,000
they are not needed and um

782
00:34:30,000 --> 00:34:32,639
now in this slide I want to give you an

783
00:34:32,639 --> 00:34:34,679
expression how we can open to a function

784
00:34:34,679 --> 00:34:37,260
of degree two uh to begin with

785
00:34:37,260 --> 00:34:39,839
okay so in order to commit to the vector

786
00:34:39,839 --> 00:34:42,020
X we actually encode X as the

787
00:34:42,020 --> 00:34:44,280
coefficients of a polynomial

788
00:34:44,280 --> 00:34:47,159
um in this polynomial we call it px0 and

789
00:34:47,159 --> 00:34:50,639
this is the sound for J uh of x j times

790
00:34:50,639 --> 00:34:52,859
Alpha to the J and you know this is in

791
00:34:52,859 --> 00:34:54,599
in Brackets right so it's a group

792
00:34:54,599 --> 00:34:55,679
element

793
00:34:55,679 --> 00:34:58,020
so we call this group element x0 now

794
00:34:58,020 --> 00:34:59,760
let's say that we want to open to a

795
00:34:59,760 --> 00:35:02,160
function f of degree two

796
00:35:02,160 --> 00:35:04,320
uh if we follow the the blueprint of the

797
00:35:04,320 --> 00:35:06,480
previous approach so the prover commits

798
00:35:06,480 --> 00:35:09,599
to the tensor uh the tensoring of X with

799
00:35:09,599 --> 00:35:12,839
itself which is uh and again using this

800
00:35:12,839 --> 00:35:15,060
polynomial encoding um

801
00:35:15,060 --> 00:35:17,579
and we call the results in polynomial PX

802
00:35:17,579 --> 00:35:21,060
superscript 1. and then it creates an

803
00:35:21,060 --> 00:35:23,640
opening uh proof for this uh with

804
00:35:23,640 --> 00:35:26,220
respect to X1 so that the verifier can

805
00:35:26,220 --> 00:35:28,320
check so this is more or less like the

806
00:35:28,320 --> 00:35:31,680
alignment level approved now however you

807
00:35:31,680 --> 00:35:33,420
know what the verifier is missing is a

808
00:35:33,420 --> 00:35:35,700
link between X1 and x0

809
00:35:35,700 --> 00:35:39,060
so uh to establish this link we use this

810
00:35:39,060 --> 00:35:42,240
uh key fact that the polynomial px1

811
00:35:42,240 --> 00:35:44,220
which is encoded in in the group element

812
00:35:44,220 --> 00:35:45,420
X1

813
00:35:45,420 --> 00:35:48,180
actually factors in two polynomials uh

814
00:35:48,180 --> 00:35:50,099
and both of these polynomials are linear

815
00:35:50,099 --> 00:35:51,119
units

816
00:35:51,119 --> 00:35:53,280
so one of these polynomials is the one

817
00:35:53,280 --> 00:35:54,780
that is already in the commitment which

818
00:35:54,780 --> 00:35:58,920
is px0 and the other one is uh px0

819
00:35:58,920 --> 00:36:01,380
evaluated on Alpha to the N divided by

820
00:36:01,380 --> 00:36:03,240
Alpha to DNA and you know if you want to

821
00:36:03,240 --> 00:36:07,320
verify this claim this is in this line

822
00:36:07,320 --> 00:36:09,599
now what is good about the fact that

823
00:36:09,599 --> 00:36:12,180
both polynomials are linear in X

824
00:36:12,180 --> 00:36:14,820
um this is good because it means that if

825
00:36:14,820 --> 00:36:17,640
we include this additional polynomial in

826
00:36:17,640 --> 00:36:19,980
the commitment the commitment is still

827
00:36:19,980 --> 00:36:23,040
homomorphic because essentially it's a

828
00:36:23,040 --> 00:36:25,980
it's a linear combination of OPEC with

829
00:36:25,980 --> 00:36:28,320
respect to some different bases

830
00:36:28,320 --> 00:36:30,540
and the fact that it factors in two

831
00:36:30,540 --> 00:36:32,460
polynomials uh it's good because this

832
00:36:32,460 --> 00:36:34,260
can be checked by the verifier using the

833
00:36:34,260 --> 00:36:35,880
pairing function so it can essentially

834
00:36:35,880 --> 00:36:37,980
take the elements from the commit and

835
00:36:37,980 --> 00:36:41,099
pair them uh by themselves uh and uh

836
00:36:41,099 --> 00:36:43,980
check that these yields uh X1

837
00:36:43,980 --> 00:36:45,960
and this essentially convinces him that

838
00:36:45,960 --> 00:36:49,619
X1 encodes a tensor product of the

839
00:36:49,619 --> 00:36:53,880
vectors encoded in the in the commitment

840
00:36:53,880 --> 00:36:56,820
okay so the generalization two functions

841
00:36:56,820 --> 00:36:59,280
of degree D is uh you know a bit more

842
00:36:59,280 --> 00:37:01,920
complex uh but I'll give you a high

843
00:37:01,920 --> 00:37:05,040
level idea so the first of all uh we

844
00:37:05,040 --> 00:37:07,140
keep in the commitment what I told you

845
00:37:07,140 --> 00:37:10,859
before and now uh in the opening we give

846
00:37:10,859 --> 00:37:12,900
X Delta which is the encoding of the

847
00:37:12,900 --> 00:37:15,980
vector X Delta so that Delta power

848
00:37:15,980 --> 00:37:19,980
of X and then also

849
00:37:19,980 --> 00:37:22,440
uh we give all the intermediate powers

850
00:37:22,440 --> 00:37:25,079
from 1 to Delta minus one so these are

851
00:37:25,079 --> 00:37:29,160
encoded in x k and Sk8 so the what is in

852
00:37:29,160 --> 00:37:30,960
the verification here essentially it's

853
00:37:30,960 --> 00:37:32,520
the um

854
00:37:32,520 --> 00:37:34,619
the generalization of the what was

855
00:37:34,619 --> 00:37:37,320
happening before uh so we checked X1

856
00:37:37,320 --> 00:37:39,060
against the elements in the commitment

857
00:37:39,060 --> 00:37:41,880
then we check every x k plus 1 with

858
00:37:41,880 --> 00:37:44,220
respect to the previous pair but here

859
00:37:44,220 --> 00:37:45,839
there is a challenge

860
00:37:45,839 --> 00:37:48,599
um while in the case of x0 both elements

861
00:37:48,599 --> 00:37:50,160
were in the commitment so in some sense

862
00:37:50,160 --> 00:37:53,520
there were sort of uh trusted now the

863
00:37:53,520 --> 00:37:56,520
elements XK one of them is not is not

864
00:37:56,520 --> 00:37:59,820
checked so when x k is uh actually let's

865
00:37:59,820 --> 00:38:01,380
say could be checked from the previous

866
00:38:01,380 --> 00:38:04,079
equation XK8 is not

867
00:38:04,079 --> 00:38:06,359
so um

868
00:38:06,359 --> 00:38:08,579
in order to establish the validity of SK

869
00:38:08,579 --> 00:38:11,400
we use again generalization of the fact

870
00:38:11,400 --> 00:38:14,099
that I mentioned before that these

871
00:38:14,099 --> 00:38:17,119
polynomial P at

872
00:38:17,119 --> 00:38:20,700
K uh actually factors into two Decay

873
00:38:20,700 --> 00:38:23,040
polynomials uh each of these polynomials

874
00:38:23,040 --> 00:38:24,839
is linear in x

875
00:38:24,839 --> 00:38:27,839
so the idea to let the verifier check

876
00:38:27,839 --> 00:38:30,060
this is to include the polynomials

877
00:38:30,060 --> 00:38:31,800
linear index in

878
00:38:31,800 --> 00:38:32,400
um

879
00:38:32,400 --> 00:38:34,440
in the commitment in total there are

880
00:38:34,440 --> 00:38:36,720
three of them where Dr call is a

881
00:38:36,720 --> 00:38:40,079
constant and then um in order to check

882
00:38:40,079 --> 00:38:41,900
these uh uh

883
00:38:41,900 --> 00:38:44,339
factorization of two in two to Decay

884
00:38:44,339 --> 00:38:46,500
polynomials we arrange the uh

885
00:38:46,500 --> 00:38:48,839
polynomials which are encoding the group

886
00:38:48,839 --> 00:38:50,640
elements of the commitments the leaves

887
00:38:50,640 --> 00:38:53,700
of uh some trees and observe that each

888
00:38:53,700 --> 00:38:56,220
of these polynomial in blue in blue like

889
00:38:56,220 --> 00:39:01,440
Piet X1 the X2 and the X uh X Delta

890
00:39:01,440 --> 00:39:04,320
minus one is the root of a three of

891
00:39:04,320 --> 00:39:06,300
multiplications that uh have these

892
00:39:06,300 --> 00:39:08,160
leaves and now

893
00:39:08,160 --> 00:39:11,160
um if the approver Reveals All the

894
00:39:11,160 --> 00:39:13,680
intermediate nodes of these trees then

895
00:39:13,680 --> 00:39:15,300
the verifier can check all these

896
00:39:15,300 --> 00:39:16,800
products

897
00:39:16,800 --> 00:39:18,720
using the pairing because it involves

898
00:39:18,720 --> 00:39:21,060
only one equation

899
00:39:21,060 --> 00:39:22,859
so um

900
00:39:22,859 --> 00:39:25,020
and okay this is another level uh

901
00:39:25,020 --> 00:39:26,880
explanation and I encourage you to look

902
00:39:26,880 --> 00:39:29,160
at the papers for more details

903
00:39:29,160 --> 00:39:31,320
so now before concluding I'd like to

904
00:39:31,320 --> 00:39:32,880
give you an overview of our functional

905
00:39:32,880 --> 00:39:34,800
commitment for nc1

906
00:39:34,800 --> 00:39:37,680
so we're playing this actually by using

907
00:39:37,680 --> 00:39:40,040
non-transformation in order to express

908
00:39:40,040 --> 00:39:42,960
satisfability of circuits in nc1 Via

909
00:39:42,960 --> 00:39:45,960
Monitor and spam programs and our FC

910
00:39:45,960 --> 00:39:48,660
actually uses a more General language

911
00:39:48,660 --> 00:39:50,520
called semi-quadratic arithmetic

912
00:39:50,520 --> 00:39:51,540
problems

913
00:39:51,540 --> 00:39:54,000
which is a definite follow so it's a

914
00:39:54,000 --> 00:39:56,640
language that takes as input to vectors

915
00:39:56,640 --> 00:39:59,460
um end up sets uh and also like it's

916
00:39:59,460 --> 00:40:02,760
defined by a matrix F and it accepts if

917
00:40:02,760 --> 00:40:05,579
there exists a vector W such that this

918
00:40:05,579 --> 00:40:08,880
system uh is satisfied so it's F uh

919
00:40:08,880 --> 00:40:10,560
product Vector which is entry-wise

920
00:40:10,560 --> 00:40:14,339
multiplication of wfz is equal to y

921
00:40:14,339 --> 00:40:16,800
now in order to um

922
00:40:16,800 --> 00:40:19,500
uh essentially prove uh with the

923
00:40:19,500 --> 00:40:21,300
functional commitment that

924
00:40:21,300 --> 00:40:23,700
um uh you know the uh the function f

925
00:40:23,700 --> 00:40:26,760
accepts the first idea is to that we

926
00:40:26,760 --> 00:40:29,040
linearize the system by merging f with

927
00:40:29,040 --> 00:40:30,780
the vector Z which is in the commitment

928
00:40:30,780 --> 00:40:33,720
and then after linearization what we

929
00:40:33,720 --> 00:40:36,540
have to do is to prove this is satisfied

930
00:40:36,540 --> 00:40:39,240
the satisfiability of the system F that

931
00:40:39,240 --> 00:40:41,520
y

932
00:40:41,520 --> 00:40:44,160
uh and then we adapt the linear map

933
00:40:44,160 --> 00:40:46,200
functional commitment of line malabault

934
00:40:46,200 --> 00:40:47,820
in order to prove satisfability of the

935
00:40:47,820 --> 00:40:49,920
system where the crucial differences in

936
00:40:49,920 --> 00:40:53,460
our case is that the input that is

937
00:40:53,460 --> 00:40:55,619
committed but also the output y of the

938
00:40:55,619 --> 00:40:59,599
system is uh is committed

939
00:40:59,760 --> 00:41:02,220
um and along the way uh it's challenged

940
00:41:02,220 --> 00:41:04,020
way to solve was to prove the strong

941
00:41:04,020 --> 00:41:06,839
evaluation binding of this uh linear map

942
00:41:06,839 --> 00:41:08,640
functional commitment from a falsifiable

943
00:41:08,640 --> 00:41:11,160
assumption and this was new because like

944
00:41:11,160 --> 00:41:12,540
in the previous work this was only

945
00:41:12,540 --> 00:41:14,160
proven in the generic group model

946
00:41:14,160 --> 00:41:16,619
whereas in our case we did care about uh

947
00:41:16,619 --> 00:41:18,240
getting approved from a fascifiable

948
00:41:18,240 --> 00:41:20,339
assumption

949
00:41:20,339 --> 00:41:23,400
okay so this is a summary of our schemes

950
00:41:23,400 --> 00:41:24,839
and how do they compare with previous

951
00:41:24,839 --> 00:41:25,859
work

952
00:41:25,859 --> 00:41:28,440
um I want to uh especially here

953
00:41:28,440 --> 00:41:30,839
highlights uh what are our new results

954
00:41:30,839 --> 00:41:33,420
with respect to amorphic signatures so

955
00:41:33,420 --> 00:41:35,220
we obtained the first amorphic signature

956
00:41:35,220 --> 00:41:38,460
with compact signature so uh which means

957
00:41:38,460 --> 00:41:40,619
that the signature are fsides constant

958
00:41:40,619 --> 00:41:42,359
even in the number of outputs of the

959
00:41:42,359 --> 00:41:45,180
function and this was uh not achieved by

960
00:41:45,180 --> 00:41:47,099
any of the previous skins in the

961
00:41:47,099 --> 00:41:49,440
literature and then we also obtained the

962
00:41:49,440 --> 00:41:51,660
first multi-inputomorphic signature for

963
00:41:51,660 --> 00:41:53,640
a circus in nc1 that is based on

964
00:41:53,640 --> 00:41:56,040
pairings and this includes our state of

965
00:41:56,040 --> 00:41:59,040
B of Dr because uh the only pure scheme

966
00:41:59,040 --> 00:42:01,560
for such expressive um

967
00:42:01,560 --> 00:42:03,420
circuits based on pairing was only

968
00:42:03,420 --> 00:42:05,099
single input

969
00:42:05,099 --> 00:42:08,099
so to conclude uh these are our main

970
00:42:08,099 --> 00:42:09,119
results

971
00:42:09,119 --> 00:42:10,859
um the first adiable multi-functional

972
00:42:10,859 --> 00:42:12,599
commitments for functions Beyond linear

973
00:42:12,599 --> 00:42:15,780
and new pairing basal morphic signatures

974
00:42:15,780 --> 00:42:18,240
um there has been a lot of uh recent

975
00:42:18,240 --> 00:42:20,280
Works about new functional commitment

976
00:42:20,280 --> 00:42:22,680
for circuits from possible assumptions

977
00:42:22,680 --> 00:42:25,320
including a follow-up by a subset of

978
00:42:25,320 --> 00:42:28,500
others of the of our paper

979
00:42:28,500 --> 00:42:32,040
um this a new scheme still uh leave a

980
00:42:32,040 --> 00:42:34,380
few interesting open problems such as

981
00:42:34,380 --> 00:42:37,320
for example uh the uh one is related

982
00:42:37,320 --> 00:42:38,940
with the fact that all the new skins for

983
00:42:38,940 --> 00:42:41,220
circuits have often includes linear in

984
00:42:41,220 --> 00:42:42,900
the depth of that circuit and it would

985
00:42:42,900 --> 00:42:45,180
be very interesting to obtain things

986
00:42:45,180 --> 00:42:48,180
that don't have such a growth and uh

987
00:42:48,180 --> 00:42:50,480
even if we consider for example the

988
00:42:50,480 --> 00:42:53,220
class of circuits in nc1 it would be

989
00:42:53,220 --> 00:42:54,839
interesting to have um

990
00:42:54,839 --> 00:42:58,079
like uh openings of constant sites and

991
00:42:58,079 --> 00:43:00,480
combat because uh our construction I

992
00:43:00,480 --> 00:43:03,300
didn't mention before but in C1 uh as it

993
00:43:03,300 --> 00:43:06,000
does not have uh compact proofs uh only

994
00:43:06,000 --> 00:43:08,160
succeed ones and finally would be

995
00:43:08,160 --> 00:43:11,040
interesting to find more applications of

996
00:43:11,040 --> 00:43:11,700
um

997
00:43:11,700 --> 00:43:13,619
functional commitment beyond the one

998
00:43:13,619 --> 00:43:16,200
that uh that we mentioned and with this

999
00:43:16,200 --> 00:43:18,720
I'd like to uh conclude my talk and I

1000
00:43:18,720 --> 00:43:22,339
will be happy to take questions

1001
00:43:24,180 --> 00:43:25,980
all right

1002
00:43:25,980 --> 00:43:28,560
um let's thanks the speaker and the

1003
00:43:28,560 --> 00:43:32,040
Dario will be online for uh questions so

1004
00:43:32,040 --> 00:43:34,200
if you have questions please feel free

1005
00:43:34,200 --> 00:43:36,060
to ask him

1006
00:43:36,060 --> 00:43:39,140
so any question

1007
00:43:41,579 --> 00:43:44,640
okay so if there is no question I will

1008
00:43:44,640 --> 00:43:48,920
we need to move to our third talk

1009
00:43:49,880 --> 00:43:54,240
sorry okay so the third talk is linear

1010
00:43:54,240 --> 00:43:56,880
map Vector commitments and there are

1011
00:43:56,880 --> 00:44:00,420
practical applications and Anka will be

1012
00:44:00,420 --> 00:44:03,020
giving the talk

1013
00:44:12,119 --> 00:44:15,119
foreign

1014
00:44:34,740 --> 00:44:37,740
commitments

1015
00:44:39,660 --> 00:44:42,599
um and I will briefly introduce the

1016
00:44:42,599 --> 00:44:45,060
notion of vector commitment so this was

1017
00:44:45,060 --> 00:44:47,579
introduced by Dario fionaire and Dario

1018
00:44:47,579 --> 00:44:49,260
catorano

1019
00:44:49,260 --> 00:44:51,960
um in this work and the consisting

1020
00:44:51,960 --> 00:44:54,180
committing to a vector yeah a long

1021
00:44:54,180 --> 00:44:55,680
Vector

1022
00:44:55,680 --> 00:44:58,319
um in a succinct way in a compact way so

1023
00:44:58,319 --> 00:45:01,079
I will be presented by boxes in such a

1024
00:45:01,079 --> 00:45:04,560
way that later on we can out we can open

1025
00:45:04,560 --> 00:45:07,500
some position values from the vectors so

1026
00:45:07,500 --> 00:45:10,560
for example here position 6 and prove

1027
00:45:10,560 --> 00:45:12,660
that the indeed this value was

1028
00:45:12,660 --> 00:45:14,700
containing the initial Vector committed

1029
00:45:14,700 --> 00:45:17,220
in this box

1030
00:45:17,220 --> 00:45:19,680
um so The Binding property we need is

1031
00:45:19,680 --> 00:45:22,800
that we cannot open two inconsistent

1032
00:45:22,800 --> 00:45:24,359
values with respect to the same position

1033
00:45:24,359 --> 00:45:27,660
so if D6 was in the vector originally we

1034
00:45:27,660 --> 00:45:30,240
cannot convince any verifier that W6

1035
00:45:30,240 --> 00:45:33,799
here was in the back

1036
00:45:33,960 --> 00:45:36,119
um the vector commitment notion was

1037
00:45:36,119 --> 00:45:39,780
extended uh during years like um to open

1038
00:45:39,780 --> 00:45:42,660
more expressive uh values like sub

1039
00:45:42,660 --> 00:45:45,200
vectors multiple values using the same

1040
00:45:45,200 --> 00:45:49,619
size of the proof uh and later on to a

1041
00:45:49,619 --> 00:45:51,359
functional Vector commitments which is

1042
00:45:51,359 --> 00:45:53,520
exactly the notion that Dario presented

1043
00:45:53,520 --> 00:45:57,480
before where we commit to the vector and

1044
00:45:57,480 --> 00:46:00,720
then we open a function of this we

1045
00:46:00,720 --> 00:46:02,880
evaluate the function of this vector and

1046
00:46:02,880 --> 00:46:05,640
show that the evaluation is in that in

1047
00:46:05,640 --> 00:46:09,740
the correct using this compact group

1048
00:46:09,839 --> 00:46:13,020
um okay so what we would um uh focus on

1049
00:46:13,020 --> 00:46:16,200
on this work is linear map functions and

1050
00:46:16,200 --> 00:46:17,760
this were first introduced by lion

1051
00:46:17,760 --> 00:46:20,520
malabolta in 2019

1052
00:46:20,520 --> 00:46:22,740
um and realized uh under a different

1053
00:46:22,740 --> 00:46:24,619
assumption and with the

1054
00:46:24,619 --> 00:46:27,960
longer public parameters so these

1055
00:46:27,960 --> 00:46:30,660
functions are defined from vectors of

1056
00:46:30,660 --> 00:46:33,660
length and two vectors of length L and

1057
00:46:33,660 --> 00:46:36,780
consist in a linear function in every

1058
00:46:36,780 --> 00:46:39,359
coefficient

1059
00:46:39,359 --> 00:46:40,020
um

1060
00:46:40,020 --> 00:46:42,000
okay what's the motivation for having

1061
00:46:42,000 --> 00:46:44,880
such uh Primitives uh the main

1062
00:46:44,880 --> 00:46:47,640
motivation is Polish storage delegation

1063
00:46:47,640 --> 00:46:50,400
so let's consider here Aladdin who is

1064
00:46:50,400 --> 00:46:53,400
the verifier who wants to Outsource the

1065
00:46:53,400 --> 00:46:56,640
storage of a long Vector to the genie

1066
00:46:56,640 --> 00:47:00,420
which is the approval uh so this is uh

1067
00:47:00,420 --> 00:47:03,540
in the context of untrusted Delegation

1068
00:47:03,540 --> 00:47:07,020
so Aladdin before also saying this to

1069
00:47:07,020 --> 00:47:10,079
the Antarctic Genie will first computers

1070
00:47:10,079 --> 00:47:11,579
show it commitment and keep the

1071
00:47:11,579 --> 00:47:13,740
commitment then send the vector to the

1072
00:47:13,740 --> 00:47:15,560
genie

1073
00:47:15,560 --> 00:47:17,099
and

1074
00:47:17,099 --> 00:47:20,700
um later on maybe they Aladdin wants to

1075
00:47:20,700 --> 00:47:25,260
query some function on the vector so the

1076
00:47:25,260 --> 00:47:27,960
genie has just to compute the value of

1077
00:47:27,960 --> 00:47:29,160
the function

1078
00:47:29,160 --> 00:47:31,740
on the vector and then convince Aladdin

1079
00:47:31,740 --> 00:47:34,140
by sending a proof that this is the

1080
00:47:34,140 --> 00:47:36,420
correct result

1081
00:47:36,420 --> 00:47:38,640
and the verification is done using the

1082
00:47:38,640 --> 00:47:41,579
initial commitment uh the claim value

1083
00:47:41,579 --> 00:47:44,760
and this short proof

1084
00:47:44,760 --> 00:47:47,280
okay this is the basic probability of

1085
00:47:47,280 --> 00:47:49,020
vector commitment but there are more

1086
00:47:49,020 --> 00:47:50,880
properties that we can ask for such

1087
00:47:50,880 --> 00:47:54,540
Primitives and one in one obvious

1088
00:47:54,540 --> 00:47:58,260
natural one is updates so what about uh

1089
00:47:58,260 --> 00:48:01,079
if Aladdin wants to change one of the

1090
00:48:01,079 --> 00:48:02,760
values in the vector

1091
00:48:02,760 --> 00:48:05,280
uh this will mean that he has to

1092
00:48:05,280 --> 00:48:07,440
re-compute the whole commitment for the

1093
00:48:07,440 --> 00:48:09,599
whole Vector but we can do it better in

1094
00:48:09,599 --> 00:48:11,880
if we have updates for such commitments

1095
00:48:11,880 --> 00:48:14,940
so just by using this change here we'll

1096
00:48:14,940 --> 00:48:17,099
be able to do it more efficiently and

1097
00:48:17,099 --> 00:48:19,020
compute the new commitment

1098
00:48:19,020 --> 00:48:21,240
for the new vector and in the same way

1099
00:48:21,240 --> 00:48:25,079
uh the genie if he has pre-computed uh

1100
00:48:25,079 --> 00:48:27,720
moves for the the function on the old

1101
00:48:27,720 --> 00:48:30,420
Vector will be able to update this

1102
00:48:30,420 --> 00:48:33,960
course to Value groups for the new back

1103
00:48:33,960 --> 00:48:36,060
in a more efficient way than recomputing

1104
00:48:36,060 --> 00:48:37,200
from sketch

1105
00:48:37,200 --> 00:48:39,480
and there are two different flavors of

1106
00:48:39,480 --> 00:48:42,420
updates one is the weak one where we in

1107
00:48:42,420 --> 00:48:44,880
order to update some Vector some

1108
00:48:44,880 --> 00:48:47,760
commitment or sample we need the

1109
00:48:47,760 --> 00:48:50,760
we need some hint that depends on the

1110
00:48:50,760 --> 00:48:54,900
value that changed in the vector and the

1111
00:48:54,900 --> 00:48:57,839
more strong notion just uses static keys

1112
00:48:57,839 --> 00:49:00,180
that don't depend on the concrete value

1113
00:49:00,180 --> 00:49:01,920
that change but only on the position

1114
00:49:01,920 --> 00:49:04,740
that we want to update in the back

1115
00:49:04,740 --> 00:49:07,500
okay that's one of the features we would

1116
00:49:07,500 --> 00:49:10,440
like but also uh aggregation is an

1117
00:49:10,440 --> 00:49:12,240
important property in Vector commitments

1118
00:49:12,240 --> 00:49:14,160
and this consists in

1119
00:49:14,160 --> 00:49:16,859
um putting together two different proofs

1120
00:49:16,859 --> 00:49:19,680
so for example if aladding queries two

1121
00:49:19,680 --> 00:49:22,319
functions at a time

1122
00:49:22,319 --> 00:49:24,960
um the genie will be able to compute one

1123
00:49:24,960 --> 00:49:27,060
single proof for both of them by

1124
00:49:27,060 --> 00:49:28,560
Computing first approves and then

1125
00:49:28,560 --> 00:49:32,339
aggregating them into a short same size

1126
00:49:32,339 --> 00:49:34,020
proof that

1127
00:49:34,020 --> 00:49:37,440
um that guarantees the the correctness

1128
00:49:37,440 --> 00:49:39,619
of both results

1129
00:49:39,619 --> 00:49:42,780
and this uh this aggregation comes in

1130
00:49:42,780 --> 00:49:44,400
also different

1131
00:49:44,400 --> 00:49:47,940
um flavors so we can aggregate proofs

1132
00:49:47,940 --> 00:49:49,560
for the same commitment for the same

1133
00:49:49,560 --> 00:49:52,560
vector or we can aggregate proofs for uh

1134
00:49:52,560 --> 00:49:54,839
different commitments so that's even

1135
00:49:54,839 --> 00:49:58,079
that's also possible it's stronger uh we

1136
00:49:58,079 --> 00:50:01,859
can do aggregating aggregation once and

1137
00:50:01,859 --> 00:50:04,380
then the aggregated proof cannot be used

1138
00:50:04,380 --> 00:50:06,000
to re-aggregate

1139
00:50:06,000 --> 00:50:08,760
so that's one hope in this paper we

1140
00:50:08,760 --> 00:50:10,800
introduce a new notion which is

1141
00:50:10,800 --> 00:50:13,319
unbounded aggregation that allows us to

1142
00:50:13,319 --> 00:50:15,420
reuse aggregated proofs in order to

1143
00:50:15,420 --> 00:50:17,760
aggregate them with new groups

1144
00:50:17,760 --> 00:50:20,579
and there is a stronger and different

1145
00:50:20,579 --> 00:50:22,920
kind of aggregation which is incremental

1146
00:50:22,920 --> 00:50:24,720
that also allows to desegregate

1147
00:50:24,720 --> 00:50:27,480
something we already put together into a

1148
00:50:27,480 --> 00:50:29,400
simple way

1149
00:50:29,400 --> 00:50:32,760
and I will also present the homomorphic

1150
00:50:32,760 --> 00:50:36,000
property for commitments so linearly

1151
00:50:36,000 --> 00:50:37,680
homomorphic commitments allowed to

1152
00:50:37,680 --> 00:50:39,540
compute linear combination of the

1153
00:50:39,540 --> 00:50:42,119
commitments and this results into a new

1154
00:50:42,119 --> 00:50:44,760
commitment that is with respect to the

1155
00:50:44,760 --> 00:50:46,920
linear combination of the originally

1156
00:50:46,920 --> 00:50:49,700
committed back

1157
00:50:49,980 --> 00:50:51,839
um we have homomorphic properties for

1158
00:50:51,839 --> 00:50:53,460
the openings as well

1159
00:50:53,460 --> 00:50:56,400
and this means that if we have two

1160
00:50:56,400 --> 00:50:59,520
different function uh proofs they prove

1161
00:50:59,520 --> 00:51:00,960
for two different functions for the same

1162
00:51:00,960 --> 00:51:03,359
committed Vector we can combine them

1163
00:51:03,359 --> 00:51:04,619
together

1164
00:51:04,619 --> 00:51:07,020
uh linearly with using the linear

1165
00:51:07,020 --> 00:51:09,000
homomorphic property in order to obtain

1166
00:51:09,000 --> 00:51:13,079
a proof uh for this new function linear

1167
00:51:13,079 --> 00:51:15,720
combination of the old two functions of

1168
00:51:15,720 --> 00:51:18,059
the same Vector that is committed here

1169
00:51:18,059 --> 00:51:20,420
and we have something that we call

1170
00:51:20,420 --> 00:51:23,579
homomorphic proofs which is kind of also

1171
00:51:23,579 --> 00:51:26,339
recombining homomorphically proofs but

1172
00:51:26,339 --> 00:51:28,740
with respect to different commitments so

1173
00:51:28,740 --> 00:51:30,240
if we have two proofs for the same

1174
00:51:30,240 --> 00:51:32,339
function but apply to two different

1175
00:51:32,339 --> 00:51:33,480
vectors

1176
00:51:33,480 --> 00:51:36,420
we can also do a linear combination of

1177
00:51:36,420 --> 00:51:38,760
them and obtain something that will be a

1178
00:51:38,760 --> 00:51:41,579
valid uh proof for the linear

1179
00:51:41,579 --> 00:51:44,460
combination of the two vectors that as I

1180
00:51:44,460 --> 00:51:46,200
showed before because the commitments

1181
00:51:46,200 --> 00:51:50,220
are linearly aromatic can be uh obtained

1182
00:51:50,220 --> 00:51:52,440
in this commitment by doing the same

1183
00:51:52,440 --> 00:51:54,119
combination

1184
00:51:54,119 --> 00:51:55,920
okay

1185
00:51:55,920 --> 00:51:59,280
so I presented a lot of nice properties

1186
00:51:59,280 --> 00:52:00,900
that we can achieve with Vector

1187
00:52:00,900 --> 00:52:03,180
commitments but there is a drawback and

1188
00:52:03,180 --> 00:52:05,940
the drawback is that the approval has um

1189
00:52:05,940 --> 00:52:08,099
to do a computation linear in the size

1190
00:52:08,099 --> 00:52:10,920
of the vector so all all the overhead

1191
00:52:10,920 --> 00:52:13,440
here is in the computation time of the

1192
00:52:13,440 --> 00:52:14,400
program

1193
00:52:14,400 --> 00:52:18,119
so to solve kind of this unconvenient in

1194
00:52:18,119 --> 00:52:21,660
practice we look at how to trade space

1195
00:52:21,660 --> 00:52:25,020
and time so how to do

1196
00:52:25,020 --> 00:52:27,420
um destroy some information in order to

1197
00:52:27,420 --> 00:52:28,440
save

1198
00:52:28,440 --> 00:52:30,599
um computation time for the program

1199
00:52:30,599 --> 00:52:34,619
and one simple idea will be to recompute

1200
00:52:34,619 --> 00:52:37,020
all the proofs for all the openings all

1201
00:52:37,020 --> 00:52:41,099
the individual openings here and in the

1202
00:52:41,099 --> 00:52:44,099
in the online page the Provo just has to

1203
00:52:44,099 --> 00:52:47,460
access the the queried proof and just

1204
00:52:47,460 --> 00:52:48,960
give the proof without doing any

1205
00:52:48,960 --> 00:52:50,940
computation

1206
00:52:50,940 --> 00:52:52,980
so that's nice

1207
00:52:52,980 --> 00:52:56,099
of course if we ask a linear map that

1208
00:52:56,099 --> 00:52:57,800
accesses position

1209
00:52:57,800 --> 00:53:01,079
vpv5 and V7 the online phase will

1210
00:53:01,079 --> 00:53:04,140
consist into combining this uh already

1211
00:53:04,140 --> 00:53:06,780
generated proofs into the resulting

1212
00:53:06,780 --> 00:53:08,339
proof using the automotive properties

1213
00:53:08,339 --> 00:53:10,380
into the resulting group for the

1214
00:53:10,380 --> 00:53:12,180
function

1215
00:53:12,180 --> 00:53:15,780
okay so for for the space uh this is

1216
00:53:15,780 --> 00:53:18,420
nice computation it's already sold

1217
00:53:18,420 --> 00:53:21,660
online and offline uh pre-processing is

1218
00:53:21,660 --> 00:53:24,240
smaller than Computing each group at the

1219
00:53:24,240 --> 00:53:26,160
time because we have an amortized cost

1220
00:53:26,160 --> 00:53:28,260
for computing all the groups together

1221
00:53:28,260 --> 00:53:31,079
so Genie is very proud

1222
00:53:31,079 --> 00:53:32,760
um but there are some problems so

1223
00:53:32,760 --> 00:53:34,619
storage may be expensive this doubles

1224
00:53:34,619 --> 00:53:36,980
the storage that the the gym has to

1225
00:53:36,980 --> 00:53:39,540
dedicate for the vector commitments by

1226
00:53:39,540 --> 00:53:41,880
storing all these books and for the

1227
00:53:41,880 --> 00:53:45,359
updates this is a problem because if one

1228
00:53:45,359 --> 00:53:48,180
value of the vector changes so the

1229
00:53:48,180 --> 00:53:50,280
initial commitment will be updated when

1230
00:53:50,280 --> 00:53:52,380
your commitment all these proofs were

1231
00:53:52,380 --> 00:53:55,140
valid with respect to the initial commit

1232
00:53:55,140 --> 00:53:58,200
so these proofs all become invalid

1233
00:53:58,200 --> 00:54:00,900
so Genie is not happy

1234
00:54:00,900 --> 00:54:03,839
um and we have to recompute new proofs

1235
00:54:03,839 --> 00:54:07,680
for all these Vector for the vector or

1236
00:54:07,680 --> 00:54:09,839
update each group individually so this

1237
00:54:09,839 --> 00:54:13,400
is linear in the size of the vector

1238
00:54:13,619 --> 00:54:16,440
um so what we ask also for Vector

1239
00:54:16,440 --> 00:54:18,240
commitments is this property of

1240
00:54:18,240 --> 00:54:22,140
maintainability that asks to be able to

1241
00:54:22,140 --> 00:54:25,319
update all these Crystal proofs in a way

1242
00:54:25,319 --> 00:54:27,119
that is more efficient significantly

1243
00:54:27,119 --> 00:54:29,220
more efficient that recomputing all

1244
00:54:29,220 --> 00:54:33,740
proofs or updating it one by one

1245
00:54:35,099 --> 00:54:36,960
so yeah like what we would like to

1246
00:54:36,960 --> 00:54:39,660
achieve is to have the best trade-off

1247
00:54:39,660 --> 00:54:42,440
between space and time for the progress

1248
00:54:42,440 --> 00:54:45,660
ideally we would like to have sublinear

1249
00:54:45,660 --> 00:54:48,540
space dedicated to stored approach but

1250
00:54:48,540 --> 00:54:52,260
with fast updates and to be flexible so

1251
00:54:52,260 --> 00:54:54,839
we can allow the approval to choose to

1252
00:54:54,839 --> 00:54:56,760
use more storage or more computation in

1253
00:54:56,760 --> 00:54:59,880
order to come to to make the proofs and

1254
00:54:59,880 --> 00:55:02,220
the time it should be some linear in the

1255
00:55:02,220 --> 00:55:04,740
size of the vectors again in computation

1256
00:55:04,740 --> 00:55:06,240
uh

1257
00:55:06,240 --> 00:55:10,079
um execution and ideally subbing also in

1258
00:55:10,079 --> 00:55:12,800
the opening size

1259
00:55:13,559 --> 00:55:15,540
so let's see our results that try to

1260
00:55:15,540 --> 00:55:17,160
solve all these problems and to achieve

1261
00:55:17,160 --> 00:55:19,619
these properties

1262
00:55:19,619 --> 00:55:21,900
um the the main contribution is first

1263
00:55:21,900 --> 00:55:24,359
one inner product Vector commitment so

1264
00:55:24,359 --> 00:55:26,520
this is a particular case of linear map

1265
00:55:26,520 --> 00:55:28,380
functions

1266
00:55:28,380 --> 00:55:31,440
um and we give a framework to come to

1267
00:55:31,440 --> 00:55:32,880
start from inner product like the

1268
00:55:32,880 --> 00:55:36,180
commitment and to compute any linear map

1269
00:55:36,180 --> 00:55:38,640
Vector commitment from it

1270
00:55:38,640 --> 00:55:41,339
um then we give this construction with

1271
00:55:41,339 --> 00:55:43,319
the unbounded aggregation and update

1272
00:55:43,319 --> 00:55:46,020
ability with static keys

1273
00:55:46,020 --> 00:55:48,480
it's working

1274
00:55:48,480 --> 00:55:49,680
no

1275
00:55:49,680 --> 00:55:50,880
okay

1276
00:55:50,880 --> 00:55:53,880
no I think it works I think yeah

1277
00:55:53,880 --> 00:55:54,660
yeah

1278
00:55:54,660 --> 00:55:58,680
um and updateability with static Keys uh

1279
00:55:58,680 --> 00:56:00,780
and then we give maintainable tree based

1280
00:56:00,780 --> 00:56:02,819
constructions

1281
00:56:02,819 --> 00:56:05,640
um that will achieve this uh update all

1282
00:56:05,640 --> 00:56:08,040
properties I was explaining before and

1283
00:56:08,040 --> 00:56:11,400
flexible trade-offs for the in space and

1284
00:56:11,400 --> 00:56:13,579
time

1285
00:56:13,619 --> 00:56:15,839
um okay so I will start with you know a

1286
00:56:15,839 --> 00:56:18,020
product

1287
00:56:18,059 --> 00:56:20,400
uh so what's an inner product is this

1288
00:56:20,400 --> 00:56:21,960
function

1289
00:56:21,960 --> 00:56:24,780
um which is defined by a vector B which

1290
00:56:24,780 --> 00:56:28,440
is public and computes uh the inner

1291
00:56:28,440 --> 00:56:30,839
product between a committed Vector a of

1292
00:56:30,839 --> 00:56:35,058
the same length uh together with this

1293
00:56:35,339 --> 00:56:37,680
so we have

1294
00:56:37,680 --> 00:56:40,619
um uh we have openings that give the

1295
00:56:40,619 --> 00:56:42,420
result of this function and allow us to

1296
00:56:42,420 --> 00:56:45,619
prove that the result is correct

1297
00:56:45,619 --> 00:56:48,900
so the idea behind how to realize such

1298
00:56:48,900 --> 00:56:51,720
primitive is to write a vector in a form

1299
00:56:51,720 --> 00:56:54,119
of a polynomial and then use nice

1300
00:56:54,119 --> 00:56:56,640
properties of polynomials in order to

1301
00:56:56,640 --> 00:56:59,640
open uh the inner product between a

1302
00:56:59,640 --> 00:57:02,400
known Vector b a public Vector B at this

1303
00:57:02,400 --> 00:57:04,440
committed Vector in a form of a

1304
00:57:04,440 --> 00:57:06,240
polynomial

1305
00:57:06,240 --> 00:57:08,520
so two ways to write a vector that

1306
00:57:08,520 --> 00:57:11,640
allows us to obtain these properties

1307
00:57:11,640 --> 00:57:14,520
um are using monomial bases and lag

1308
00:57:14,520 --> 00:57:19,140
angle bases so um in monomial basis we

1309
00:57:19,140 --> 00:57:21,300
we just write the vector as a polynomial

1310
00:57:21,300 --> 00:57:24,780
that has coefficients uh the exact

1311
00:57:24,780 --> 00:57:26,940
element in the vector

1312
00:57:26,940 --> 00:57:28,680
this is the polynomial of the same the

1313
00:57:28,680 --> 00:57:30,540
the degree n minus one for a vector of

1314
00:57:30,540 --> 00:57:32,460
size n

1315
00:57:32,460 --> 00:57:35,220
and in the lagrangian basis we have this

1316
00:57:35,220 --> 00:57:38,400
lagangian polynomials here that are

1317
00:57:38,400 --> 00:57:39,599
computed with respect to a

1318
00:57:39,599 --> 00:57:42,839
multiplicative group and we can define a

1319
00:57:42,839 --> 00:57:46,500
vector by just uh making a linear

1320
00:57:46,500 --> 00:57:48,780
combination out of this polynomials like

1321
00:57:48,780 --> 00:57:51,599
in an interpolation technique and we

1322
00:57:51,599 --> 00:57:54,240
have the nice properties also that when

1323
00:57:54,240 --> 00:57:57,660
we evaluate the vector at the position I

1324
00:57:57,660 --> 00:58:00,180
oh no when we evaluate the polynomial at

1325
00:58:00,180 --> 00:58:03,540
the position I we obtain the element uh

1326
00:58:03,540 --> 00:58:06,119
in the position I in the back

1327
00:58:06,119 --> 00:58:09,119
uh I will focus for this talk in

1328
00:58:09,119 --> 00:58:11,280
presenting our monomial basis uh

1329
00:58:11,280 --> 00:58:13,619
construction which doesn't have this

1330
00:58:13,619 --> 00:58:15,059
probability but it's easier to

1331
00:58:15,059 --> 00:58:19,079
understand and it has a very simple idea

1332
00:58:19,079 --> 00:58:21,000
uh so the background needed to

1333
00:58:21,000 --> 00:58:23,579
understand our construction is bilinear

1334
00:58:23,579 --> 00:58:26,180
groups and I will use the additive

1335
00:58:26,180 --> 00:58:28,740
notation for bilinear group so we have

1336
00:58:28,740 --> 00:58:31,680
here elements from one group G1 in

1337
00:58:31,680 --> 00:58:33,780
Brackets with one and in Brackets with

1338
00:58:33,780 --> 00:58:35,579
two elements from G2

1339
00:58:35,579 --> 00:58:39,299
and the bilinear map the pairing that

1340
00:58:39,299 --> 00:58:43,380
allows to compute this a B in the Target

1341
00:58:43,380 --> 00:58:45,299
group the product of the the two

1342
00:58:45,299 --> 00:58:48,000
elements in the Target group

1343
00:58:48,000 --> 00:58:50,579
and this is the the four algorithms for

1344
00:58:50,579 --> 00:58:53,280
the linear map Vector commitment which

1345
00:58:53,280 --> 00:58:56,400
is uh some uh generation algorithm for

1346
00:58:56,400 --> 00:58:59,040
the setup then committing uh then

1347
00:58:59,040 --> 00:59:01,140
proving an opening for the function and

1348
00:59:01,140 --> 00:59:02,880
then verifying and I will show you how

1349
00:59:02,880 --> 00:59:05,400
to realize it or in a product

1350
00:59:05,400 --> 00:59:09,420
so as I said we start formal vector and

1351
00:59:09,420 --> 00:59:11,400
we write it as a polynomial

1352
00:59:11,400 --> 00:59:14,540
and the polynomial is exactly the

1353
00:59:14,540 --> 00:59:16,619
polynomial width coefficients that

1354
00:59:16,619 --> 00:59:17,880
vector

1355
00:59:17,880 --> 00:59:20,520
and then we have these public parameters

1356
00:59:20,520 --> 00:59:22,380
the commitment key that allows us to

1357
00:59:22,380 --> 00:59:24,960
commit to the polynomial which was the

1358
00:59:24,960 --> 00:59:28,559
vector uh and then those are consecutive

1359
00:59:28,559 --> 00:59:31,140
powers of the size the degree of the

1360
00:59:31,140 --> 00:59:34,260
polynomial encoded in the first group so

1361
00:59:34,260 --> 00:59:36,240
this is powers of Tau some secret value

1362
00:59:36,240 --> 00:59:38,400
that is never revealed it is a trust

1363
00:59:38,400 --> 00:59:39,480
itself

1364
00:59:39,480 --> 00:59:43,079
uh to commit to the vector a we just

1365
00:59:43,079 --> 00:59:45,900
evaluate use the linear property linear

1366
00:59:45,900 --> 00:59:47,400
homomorphous property in the first group

1367
00:59:47,400 --> 00:59:50,880
here and we commit by evaluating the

1368
00:59:50,880 --> 00:59:52,680
polynomial associated with the value

1369
00:59:52,680 --> 00:59:56,760
this polynomial in the secret value term

1370
00:59:56,760 --> 00:59:58,680
we have all the powers in the setup so

1371
00:59:58,680 --> 01:00:01,920
in the community so we we know how to

1372
01:00:01,920 --> 01:00:05,160
uh later on to open uh the inner product

1373
01:00:05,160 --> 01:00:07,319
with a known Vector d

1374
01:00:07,319 --> 01:00:09,720
what we will do we'll compute this group

1375
01:00:09,720 --> 01:00:12,599
that consists in three polynomials uh

1376
01:00:12,599 --> 01:00:14,220
that have some meaning of course and I

1377
01:00:14,220 --> 01:00:17,099
will explain how we obtain them so we

1378
01:00:17,099 --> 01:00:20,400
encode B the vector b as the polynomial

1379
01:00:20,400 --> 01:00:21,780
that has

1380
01:00:21,780 --> 01:00:24,599
the coefficient of the elements of B but

1381
01:00:24,599 --> 01:00:26,579
in the reverse order so we start with

1382
01:00:26,579 --> 01:00:29,099
the free term kbn and we increase the

1383
01:00:29,099 --> 01:00:32,520
the monomial power here

1384
01:00:32,520 --> 01:00:36,119
okay so if we look at b and a

1385
01:00:36,119 --> 01:00:40,380
polynomials uh we can easily remark that

1386
01:00:40,380 --> 01:00:43,559
if we multiply them as polynomials

1387
01:00:43,559 --> 01:00:46,920
okay we obtain the inner product of A

1388
01:00:46,920 --> 01:00:50,460
and B so b n will be multiplied by a n

1389
01:00:50,460 --> 01:00:54,960
here uh and the resulting monomial power

1390
01:00:54,960 --> 01:00:57,359
here is X the factor the common factor

1391
01:00:57,359 --> 01:01:00,780
is X to n minus one for the value of the

1392
01:01:00,780 --> 01:01:02,160
inner product

1393
01:01:02,160 --> 01:01:03,359
okay

1394
01:01:03,359 --> 01:01:05,160
and of course there are a lot other

1395
01:01:05,160 --> 01:01:07,619
terms in this multiplication of the

1396
01:01:07,619 --> 01:01:10,319
polynomials and we can rewrite them

1397
01:01:10,319 --> 01:01:14,940
using some polynomial age of x times all

1398
01:01:14,940 --> 01:01:17,280
the terms these are representing all the

1399
01:01:17,280 --> 01:01:22,200
terms that have power x to n or mole

1400
01:01:22,200 --> 01:01:25,140
and this is the remaining polynomial

1401
01:01:25,140 --> 01:01:28,980
that has a degree is smaller than n

1402
01:01:28,980 --> 01:01:30,720
minus 1.

1403
01:01:30,720 --> 01:01:31,980
okay

1404
01:01:31,980 --> 01:01:34,680
so I think this is clear I hope

1405
01:01:34,680 --> 01:01:38,099
uh and we want to make sure that this is

1406
01:01:38,099 --> 01:01:40,619
a polynomial of Maximum degree uh n

1407
01:01:40,619 --> 01:01:44,160
minus one so here we have a lot of

1408
01:01:44,160 --> 01:01:46,619
powers up to n minus one in the so we

1409
01:01:46,619 --> 01:01:49,380
need to have a degree check polynomial

1410
01:01:49,380 --> 01:01:52,980
which is this a hat that is x times L

1411
01:01:52,980 --> 01:01:56,640
and as ensures that approval cannot

1412
01:01:56,640 --> 01:01:59,400
go further than n minus 1 and minus 2

1413
01:01:59,400 --> 01:02:01,920
for R because it cannot get fired up

1414
01:02:01,920 --> 01:02:04,380
then n minus 1 for I hat

1415
01:02:04,380 --> 01:02:07,260
okay so it's a degree check polynomial

1416
01:02:07,260 --> 01:02:11,099
so to verify this the okay I forgot to

1417
01:02:11,099 --> 01:02:14,040
remember that the proof needs to provide

1418
01:02:14,040 --> 01:02:17,460
to the verify this polynomial uh and

1419
01:02:17,460 --> 01:02:19,319
this polynomial h polynomial a

1420
01:02:19,319 --> 01:02:21,059
polynomial and the degree set polynomial

1421
01:02:21,059 --> 01:02:23,700
so a verifier having this proof will

1422
01:02:23,700 --> 01:02:27,839
just have to re-compute this uh uh

1423
01:02:27,839 --> 01:02:30,059
decomposition for the a times B

1424
01:02:30,059 --> 01:02:31,920
polynomials and make sure that this

1425
01:02:31,920 --> 01:02:33,780
relation polynomial regulation whole

1426
01:02:33,780 --> 01:02:36,540
here and this is done because we have

1427
01:02:36,540 --> 01:02:38,579
the bilinear map so we can pair together

1428
01:02:38,579 --> 01:02:41,040
the corresponding elements the

1429
01:02:41,040 --> 01:02:43,079
polynomial evaluation in the circuit uh

1430
01:02:43,079 --> 01:02:46,380
Power Tau and make sure that all these

1431
01:02:46,380 --> 01:02:47,280
uh

1432
01:02:47,280 --> 01:02:50,220
uh all this equation hold

1433
01:02:50,220 --> 01:02:52,440
and of course we need a verification key

1434
01:02:52,440 --> 01:02:55,799
with elements in the second group to be

1435
01:02:55,799 --> 01:02:57,720
able to compute these pairings with

1436
01:02:57,720 --> 01:02:59,280
elements from first we open the second

1437
01:02:59,280 --> 01:03:00,720
group here

1438
01:03:00,720 --> 01:03:03,480
great so this is the construction this

1439
01:03:03,480 --> 01:03:05,760
is the also the degree check same with

1440
01:03:05,760 --> 01:03:07,140
bearings

1441
01:03:07,140 --> 01:03:09,119
and let's see the properties that we

1442
01:03:09,119 --> 01:03:10,980
realize with this concept

1443
01:03:10,980 --> 01:03:13,740
so we have obviously homomorphic

1444
01:03:13,740 --> 01:03:15,420
commitments because polynomials are

1445
01:03:15,420 --> 01:03:17,880
almost linearly homomorphic so these are

1446
01:03:17,880 --> 01:03:19,619
just polynomial evaluating in the point

1447
01:03:19,619 --> 01:03:22,079
in the group so we can recombine them by

1448
01:03:22,079 --> 01:03:24,180
just adding commitments which are group

1449
01:03:24,180 --> 01:03:25,680
elements

1450
01:03:25,680 --> 01:03:27,599
um so this is obvious for the

1451
01:03:27,599 --> 01:03:29,160
commitments

1452
01:03:29,160 --> 01:03:32,040
um for the openings

1453
01:03:32,040 --> 01:03:36,299
um it's also easy to just check that the

1454
01:03:36,299 --> 01:03:39,359
way the openings are computed are still

1455
01:03:39,359 --> 01:03:41,040
some polynomial relations that are

1456
01:03:41,040 --> 01:03:43,559
linearly and the the openings in the

1457
01:03:43,559 --> 01:03:46,319
groups are still uh

1458
01:03:46,319 --> 01:03:48,180
okay

1459
01:03:48,180 --> 01:03:50,940
uh so then we have updateability for the

1460
01:03:50,940 --> 01:03:54,599
commitments and this is specific to our

1461
01:03:54,599 --> 01:03:56,579
construction but it's specific to any

1462
01:03:56,579 --> 01:03:58,980
construction we show that any

1463
01:03:58,980 --> 01:04:02,040
homomorphic commitments can be updatable

1464
01:04:02,040 --> 01:04:04,500
in the same way so if we modify one

1465
01:04:04,500 --> 01:04:07,559
value here by Delta then we use the

1466
01:04:07,559 --> 01:04:09,420
homomorphic property of two commitments

1467
01:04:09,420 --> 01:04:12,720
the commitment to Delta uh to the vector

1468
01:04:12,720 --> 01:04:14,460
that has only Delta in the I position

1469
01:04:14,460 --> 01:04:17,160
and we add them together and this is the

1470
01:04:17,160 --> 01:04:19,380
new commitment to the new vector

1471
01:04:19,380 --> 01:04:21,900
okay and same for the proof we can use

1472
01:04:21,900 --> 01:04:24,119
some nice properties of

1473
01:04:24,119 --> 01:04:29,180
of the the homomorphic proofs and just

1474
01:04:29,180 --> 01:04:33,900
add this proof of Delta and this inner

1475
01:04:33,900 --> 01:04:37,980
product with the unit Vector I and B

1476
01:04:37,980 --> 01:04:40,380
in order to compute a new proof for the

1477
01:04:40,380 --> 01:04:42,119
modify vector

1478
01:04:42,119 --> 01:04:45,900
and this is this is the

1479
01:04:45,900 --> 01:04:48,780
updated key that I computed for exactly

1480
01:04:48,780 --> 01:04:50,520
this construction but it's not that

1481
01:04:50,520 --> 01:04:51,540
important

1482
01:04:51,540 --> 01:04:53,940
and for the aggregation

1483
01:04:53,940 --> 01:04:56,160
so we have this nice idea to do

1484
01:04:56,160 --> 01:04:59,339
aggregation in an unbounded Way by here

1485
01:04:59,339 --> 01:05:02,940
our proofs and claim values for the for

1486
01:05:02,940 --> 01:05:04,859
the evaluation of the function so we can

1487
01:05:04,859 --> 01:05:06,660
combine them together by generating a

1488
01:05:06,660 --> 01:05:09,440
Randomness using a random molecular

1489
01:05:09,440 --> 01:05:13,079
angle Oracle that we call in these

1490
01:05:13,079 --> 01:05:14,520
values and

1491
01:05:14,520 --> 01:05:18,660
making a random linear combination out

1492
01:05:18,660 --> 01:05:20,760
of these proofs and because this is

1493
01:05:20,760 --> 01:05:23,339
homomorphic we can add them together so

1494
01:05:23,339 --> 01:05:25,079
this is a random linear combination that

1495
01:05:25,079 --> 01:05:29,160
results in a in a new proof for uh the

1496
01:05:29,160 --> 01:05:30,780
respective random linear combination of

1497
01:05:30,780 --> 01:05:32,040
the commitments

1498
01:05:32,040 --> 01:05:34,740
so we keep doing this

1499
01:05:34,740 --> 01:05:36,059
right

1500
01:05:36,059 --> 01:05:38,880
with new proofs we generate new

1501
01:05:38,880 --> 01:05:41,880
Randomness we recombine and we can keep

1502
01:05:41,880 --> 01:05:45,059
doing this in a in a sequential way

1503
01:05:45,059 --> 01:05:47,700
and in order for the verifier to keep

1504
01:05:47,700 --> 01:05:49,380
track of what operation and what

1505
01:05:49,380 --> 01:05:50,880
Randomness how the randomness were

1506
01:05:50,880 --> 01:05:52,440
generated there and to check the

1507
01:05:52,440 --> 01:05:54,420
operations we need to provide the

1508
01:05:54,420 --> 01:05:57,540
statement associated with the proof in

1509
01:05:57,540 --> 01:05:58,079
um

1510
01:05:58,079 --> 01:06:01,079
in a order manner so in this kind of

1511
01:06:01,079 --> 01:06:03,059
tree structure we need to remember the

1512
01:06:03,059 --> 01:06:05,400
history of the aggregation and that's

1513
01:06:05,400 --> 01:06:08,099
not not overloading the information we

1514
01:06:08,099 --> 01:06:09,420
have to transmit because we already

1515
01:06:09,420 --> 01:06:11,160
place with all the

1516
01:06:11,160 --> 01:06:13,680
all the the statements

1517
01:06:13,680 --> 01:06:17,339
okay so this is unbounded aggregation

1518
01:06:17,339 --> 01:06:19,200
um

1519
01:06:19,200 --> 01:06:23,880
so linear map Vector commitments from IP

1520
01:06:23,880 --> 01:06:27,119
is just using this aggregation in order

1521
01:06:27,119 --> 01:06:29,640
to we can see oh sorry

1522
01:06:29,640 --> 01:06:33,420
we can see a linear map functions as

1523
01:06:33,420 --> 01:06:35,640
multiple inner products right we can

1524
01:06:35,640 --> 01:06:38,339
write it as a product of a matrix and a

1525
01:06:38,339 --> 01:06:40,740
vector and this Matic is made of a lot

1526
01:06:40,740 --> 01:06:43,559
of vectors bi so we compute all the

1527
01:06:43,559 --> 01:06:46,559
inner product Vector commitment proofs

1528
01:06:46,559 --> 01:06:48,780
and then aggregate them together and

1529
01:06:48,780 --> 01:06:51,000
this results in a compact

1530
01:06:51,000 --> 01:06:53,940
uh linear map Vector like proof or

1531
01:06:53,940 --> 01:06:55,140
linear map

1532
01:06:55,140 --> 01:06:58,500
and what we can what's a good

1533
01:06:58,500 --> 01:07:01,559
observation here is that this loses all

1534
01:07:01,559 --> 01:07:04,319
normal probabilities unfortunate

1535
01:07:04,319 --> 01:07:06,980
okay

1536
01:07:07,079 --> 01:07:09,599
now I think I have a table that doesn't

1537
01:07:09,599 --> 01:07:11,900
charge

1538
01:07:14,039 --> 01:07:17,240
maybe later in the table

1539
01:07:17,339 --> 01:07:20,240
um if I have time

1540
01:07:21,480 --> 01:07:24,599
no yeah yeah okay

1541
01:07:24,599 --> 01:07:26,339
yeah I'm wrapping up with the

1542
01:07:26,339 --> 01:07:28,440
maintainable pre-construction and I

1543
01:07:28,440 --> 01:07:31,079
think there is a lag but I am paying so

1544
01:07:31,079 --> 01:07:33,480
the the main idea is like just to put

1545
01:07:33,480 --> 01:07:35,339
all the commitments in a tree

1546
01:07:35,339 --> 01:07:38,940
uh in a in a way that uh we have the

1547
01:07:38,940 --> 01:07:42,420
vector and we commit to uh each half in

1548
01:07:42,420 --> 01:07:45,180
in left and right sides and we continue

1549
01:07:45,180 --> 01:07:48,839
this process till the the leaves and in

1550
01:07:48,839 --> 01:07:51,420
order to opening approve for such a such

1551
01:07:51,420 --> 01:07:53,880
a commitment uh we first opened the

1552
01:07:53,880 --> 01:07:56,280
chunk here in the leaves and then show

1553
01:07:56,280 --> 01:07:58,740
that the correct relation between the

1554
01:07:58,740 --> 01:08:01,559
levels in the three holes with like some

1555
01:08:01,559 --> 01:08:03,960
proof of sub Vector here and this proof

1556
01:08:03,960 --> 01:08:06,119
of sub Vector can be computed in advance

1557
01:08:06,119 --> 01:08:08,760
so this makes

1558
01:08:08,760 --> 01:08:10,740
um this nice trade-offs that we can

1559
01:08:10,740 --> 01:08:13,200
decide what's the

1560
01:08:13,200 --> 01:08:16,140
um the depth of the tree and how how big

1561
01:08:16,140 --> 01:08:19,979
the chunks here are so any approval can

1562
01:08:19,979 --> 01:08:22,799
choose the right values in order to

1563
01:08:22,799 --> 01:08:25,319
stores these three and to open in a more

1564
01:08:25,319 --> 01:08:29,279
efficient way so the levels here it's to

1565
01:08:29,279 --> 01:08:32,939
uh to to end levels for two to the n

1566
01:08:32,939 --> 01:08:35,880
uh times 2 to the K the length of each

1567
01:08:35,880 --> 01:08:38,698
chunk here in the in the leaves

1568
01:08:38,698 --> 01:08:41,399
so this takes n

1569
01:08:41,399 --> 01:08:44,460
for the for the opening of the levels

1570
01:08:44,460 --> 01:08:47,520
and to the k for the opening of each

1571
01:08:47,520 --> 01:08:48,359
base

1572
01:08:48,359 --> 01:08:51,060
and some future directions we would like

1573
01:08:51,060 --> 01:08:53,279
to have maybe transparent setup Vector

1574
01:08:53,279 --> 01:08:55,460
commitments this one has trusted setup

1575
01:08:55,460 --> 01:08:58,799
uh we also explore what other larger

1576
01:08:58,799 --> 01:09:00,600
classes of function we can support with

1577
01:09:00,600 --> 01:09:03,238
Vector commitments uh of course any

1578
01:09:03,238 --> 01:09:05,339
construction that will be post Quantum

1579
01:09:05,339 --> 01:09:07,020
based on lattices or other assumption

1580
01:09:07,020 --> 01:09:09,179
would be nice to have

1581
01:09:09,179 --> 01:09:12,540
um and this aggregate these three base

1582
01:09:12,540 --> 01:09:14,640
Factor government doesn't have a really

1583
01:09:14,640 --> 01:09:16,560
efficient aggregation and that's also an

1584
01:09:16,560 --> 01:09:18,000
awful question

1585
01:09:18,000 --> 01:09:20,460
thank you for your attention and if you

1586
01:09:20,460 --> 01:09:23,460
want more details I'm I'm inviting you

1587
01:09:23,460 --> 01:09:26,060
to see the paper

1588
01:09:26,698 --> 01:09:28,140
okay

1589
01:09:28,140 --> 01:09:31,198
um thank you I'm covered the talk so

1590
01:09:31,198 --> 01:09:34,939
audience any questions

1591
01:09:36,839 --> 01:09:39,500
please

1592
01:09:42,540 --> 01:09:44,580
very nice presentation

1593
01:09:44,580 --> 01:09:47,339
um I have a question uh you as far as I

1594
01:09:47,339 --> 01:09:49,380
can see you treat the

1595
01:09:49,380 --> 01:09:52,920
the parent like a black box do you have

1596
01:09:52,920 --> 01:09:55,380
any comments about some properties that

1597
01:09:55,380 --> 01:09:59,160
you may want for that parent to have or

1598
01:09:59,160 --> 01:10:01,140
yeah some special like composite order

1599
01:10:01,140 --> 01:10:03,120
or something is that relevant it is

1600
01:10:03,120 --> 01:10:05,640
working I think the the best thing we

1601
01:10:05,640 --> 01:10:08,280
can use in order to save uh to have the

1602
01:10:08,280 --> 01:10:11,460
short proofs it's type 3 pairings

1603
01:10:11,460 --> 01:10:14,820
right to have all the elements in the in

1604
01:10:14,820 --> 01:10:17,760
the first group smaller

1605
01:10:17,760 --> 01:10:19,920
um also if you remark in this specific

1606
01:10:19,920 --> 01:10:21,960
construction the verifier needs a big

1607
01:10:21,960 --> 01:10:23,880
key in the second group and the verifier

1608
01:10:23,880 --> 01:10:26,219
has to to do some computation in the

1609
01:10:26,219 --> 01:10:29,699
second group which can be be computed in

1610
01:10:29,699 --> 01:10:31,620
some application if we reuse the same

1611
01:10:31,620 --> 01:10:34,860
function uh but yeah indeed like the the

1612
01:10:34,860 --> 01:10:36,659
paying should have like efficient

1613
01:10:36,659 --> 01:10:38,580
computation in the first group

1614
01:10:38,580 --> 01:10:42,199
and that's the focus yeah

1615
01:10:45,480 --> 01:10:50,178
all right any weather questions

1616
01:10:50,699 --> 01:10:51,300
um

1617
01:10:51,300 --> 01:10:54,420
so if we don't have question uh then

1618
01:10:54,420 --> 01:10:57,719
let's move to our last talk Point proofs

1619
01:10:57,719 --> 01:11:02,280
Revisited and uh mahashid will be giving

1620
01:11:02,280 --> 01:11:04,699
talk

1621
01:11:11,820 --> 01:11:14,719
foreign

1622
01:11:24,500 --> 01:11:27,560
[Music]

1623
01:11:31,040 --> 01:11:34,080
I already have a lot of definitions

1624
01:11:34,080 --> 01:11:37,560
covered so I'm gonna go pretty fast so

1625
01:11:37,560 --> 01:11:41,699
in Vector commitments we have Alice who

1626
01:11:41,699 --> 01:11:44,820
has a bunch of uh values and want to MN

1627
01:11:44,820 --> 01:11:47,520
and she wants to commit to all of them

1628
01:11:47,520 --> 01:11:50,340
at once using a single commitment and

1629
01:11:50,340 --> 01:11:52,080
later on at some point she wants to open

1630
01:11:52,080 --> 01:11:53,640
the commencement at some positions

1631
01:11:53,640 --> 01:11:56,640
between one to n so she generates a

1632
01:11:56,640 --> 01:11:57,540
proof

1633
01:11:57,540 --> 01:12:00,540
claiming that uh the underlying

1634
01:12:00,540 --> 01:12:02,280
committed Vector corresponds to some

1635
01:12:02,280 --> 01:12:04,199
value at this position and of course

1636
01:12:04,199 --> 01:12:05,760
there's a verification algorithm that

1637
01:12:05,760 --> 01:12:07,860
allows bot to verify if she's telling

1638
01:12:07,860 --> 01:12:09,600
the truth

1639
01:12:09,600 --> 01:12:12,420
so for their security requirements we

1640
01:12:12,420 --> 01:12:15,060
consider two uh properties position

1641
01:12:15,060 --> 01:12:17,219
binding and hiding

1642
01:12:17,219 --> 01:12:20,100
position binding states that okay you

1643
01:12:20,100 --> 01:12:22,080
should open to what you have committed

1644
01:12:22,080 --> 01:12:23,940
before so it should be impossible to

1645
01:12:23,940 --> 01:12:25,739
open to two different values at the same

1646
01:12:25,739 --> 01:12:26,699
position

1647
01:12:26,699 --> 01:12:29,340
and hiding simply states that okay if

1648
01:12:29,340 --> 01:12:31,560
you have multiple uh proofs for

1649
01:12:31,560 --> 01:12:33,000
different positions they should really

1650
01:12:33,000 --> 01:12:36,239
nothing about the unopened positions

1651
01:12:36,239 --> 01:12:39,480
uh now our work focuses on an

1652
01:12:39,480 --> 01:12:42,179
instantiation of this primitive and

1653
01:12:42,179 --> 01:12:46,140
interesting one which is uh introduced

1654
01:12:46,140 --> 01:12:50,640
by gorbanov raising re and Zhang in 2020

1655
01:12:50,640 --> 01:12:53,520
and it's a scheme that supports

1656
01:12:53,520 --> 01:12:55,500
non-attractive aggregations of roofs

1657
01:12:55,500 --> 01:12:58,380
again we know what it means but uh just

1658
01:12:58,380 --> 01:13:01,140
as a quick recall it allows different

1659
01:13:01,140 --> 01:13:03,600
proofs to be aggregated into a single

1660
01:13:03,600 --> 01:13:05,159
proof either for the same commitment or

1661
01:13:05,159 --> 01:13:07,620
for different commitments it also

1662
01:13:07,620 --> 01:13:10,320
supports commitment updates so if you

1663
01:13:10,320 --> 01:13:12,780
need to update uh your committed Vector

1664
01:13:12,780 --> 01:13:14,880
at some position at some point you don't

1665
01:13:14,880 --> 01:13:16,920
need to reevaluate it from the scratch

1666
01:13:16,920 --> 01:13:19,380
you just have to update it according to

1667
01:13:19,380 --> 01:13:21,060
some procedure

1668
01:13:21,060 --> 01:13:23,960
and since it has some very nice features

1669
01:13:23,960 --> 01:13:26,280
uh it's very efficient and it has

1670
01:13:26,280 --> 01:13:28,560
applications in particular in blockchain

1671
01:13:28,560 --> 01:13:30,780
smart contracts and the authors have

1672
01:13:30,780 --> 01:13:33,960
shown that using Point proofs instead of

1673
01:13:33,960 --> 01:13:36,600
the you know state-of-the-art Vector

1674
01:13:36,600 --> 01:13:38,880
commitment at that point will reduce the

1675
01:13:38,880 --> 01:13:42,060
storage and bandwidth up to 60 percent

1676
01:13:42,060 --> 01:13:44,760
uh the only small downside of this

1677
01:13:44,760 --> 01:13:49,020
scheme is its security so it's proved to

1678
01:13:49,020 --> 01:13:51,300
be perfectly hiding and computational

1679
01:13:51,300 --> 01:13:53,159
binding

1680
01:13:53,159 --> 01:13:55,140
so we are so happy with the perfectly

1681
01:13:55,140 --> 01:13:57,120
fine hiding because well it's the best

1682
01:13:57,120 --> 01:14:00,540
you can hope for but uh yeah there's a

1683
01:14:00,540 --> 01:14:02,040
small issue with the proof of The

1684
01:14:02,040 --> 01:14:04,739
computational Binding uh it's proved

1685
01:14:04,739 --> 01:14:08,699
under some assumption called nwvdhe

1686
01:14:08,699 --> 01:14:11,400
and it's in the algebraic group model

1687
01:14:11,400 --> 01:14:13,500
trust randomical model

1688
01:14:13,500 --> 01:14:15,900
so we'll see what's wrong with it but

1689
01:14:15,900 --> 01:14:18,360
for now our contribution is removing

1690
01:14:18,360 --> 01:14:19,860
this algebraic group models from the

1691
01:14:19,860 --> 01:14:22,739
proof and without changing the scheme at

1692
01:14:22,739 --> 01:14:25,140
all and we do it also from a weaker

1693
01:14:25,140 --> 01:14:27,000
assumption called ndhe which I will

1694
01:14:27,000 --> 01:14:29,520
describe later

1695
01:14:29,520 --> 01:14:32,940
uh so as I said uh Point Bruce uh

1696
01:14:32,940 --> 01:14:35,699
support nine track evaluations of proofs

1697
01:14:35,699 --> 01:14:38,580
and well it was covered before but uh

1698
01:14:38,580 --> 01:14:40,380
yeah it can catch it can be categorized

1699
01:14:40,380 --> 01:14:41,580
into two parts same commitment

1700
01:14:41,580 --> 01:14:43,500
delegations or cross-commitment

1701
01:14:43,500 --> 01:14:46,920
allegations here in our talk we focus on

1702
01:14:46,920 --> 01:14:49,020
the same commitment allegations uh

1703
01:14:49,020 --> 01:14:52,020
binding proof but well we did the cross

1704
01:14:52,020 --> 01:14:53,760
commencement delegation part in our

1705
01:14:53,760 --> 01:14:56,820
paper two uh so for the same content

1706
01:14:56,820 --> 01:14:59,640
navigation uh we need I mean what we

1707
01:14:59,640 --> 01:15:01,860
want is we have multiple proofs for

1708
01:15:01,860 --> 01:15:03,719
different positions for the same

1709
01:15:03,719 --> 01:15:05,159
commitment and we want to aggregate them

1710
01:15:05,159 --> 01:15:06,960
all together to get a single proof for

1711
01:15:06,960 --> 01:15:09,739
the sub vector

1712
01:15:09,840 --> 01:15:12,060
um yeah in other words yeah Alice again

1713
01:15:12,060 --> 01:15:14,400
has a bunch of values

1714
01:15:14,400 --> 01:15:17,640
and at the later points she chooses some

1715
01:15:17,640 --> 01:15:20,219
subset of indices like s from one to n

1716
01:15:20,219 --> 01:15:23,760
and she wants to open this commitment uh

1717
01:15:23,760 --> 01:15:25,920
to some values at all of these positions

1718
01:15:25,920 --> 01:15:27,780
all at once so what she does is

1719
01:15:27,780 --> 01:15:30,780
generating uh proofs for each of these

1720
01:15:30,780 --> 01:15:33,900
positions and then aggregate them all

1721
01:15:33,900 --> 01:15:37,020
together using a single proof and send

1722
01:15:37,020 --> 01:15:38,280
it to pop

1723
01:15:38,280 --> 01:15:40,320
and then yeah the verification algorithm

1724
01:15:40,320 --> 01:15:43,500
is extended accordingly

1725
01:15:43,500 --> 01:15:46,320
so here the security requirement is also

1726
01:15:46,320 --> 01:15:50,100
extended to you know uh cover this sub

1727
01:15:50,100 --> 01:15:53,219
Vector notion so we want it to be

1728
01:15:53,219 --> 01:15:57,179
impossible to be able to open uh some

1729
01:15:57,179 --> 01:16:00,239
committed Vector to two different uh sub

1730
01:16:00,239 --> 01:16:01,640
vectors

1731
01:16:01,640 --> 01:16:04,800
with an intersection on which they have

1732
01:16:04,800 --> 01:16:07,080
different values

1733
01:16:07,080 --> 01:16:10,140
okay uh yeah just to see why it's a

1734
01:16:10,140 --> 01:16:12,960
contradiction I will first introduce

1735
01:16:12,960 --> 01:16:16,679
this notation of in bracket s so for a

1736
01:16:16,679 --> 01:16:20,400
vector of values M1 to MN I end a subset

1737
01:16:20,400 --> 01:16:23,340
of indices from one to n like S I will

1738
01:16:23,340 --> 01:16:26,280
denote by m bracket s the sub Vector

1739
01:16:26,280 --> 01:16:27,900
obtained by choosing the values of the

1740
01:16:27,900 --> 01:16:31,080
vector on these positions

1741
01:16:31,080 --> 01:16:33,659
uh so let's assume that we have an

1742
01:16:33,659 --> 01:16:36,420
adversary that has committed to a vector

1743
01:16:36,420 --> 01:16:40,560
like M and at a later point it generates

1744
01:16:40,560 --> 01:16:43,679
two proofs pi and Pi Prime with respect

1745
01:16:43,679 --> 01:16:46,260
to two sub vectors M of S and M Prime of

1746
01:16:46,260 --> 01:16:47,520
S Prime

1747
01:16:47,520 --> 01:16:49,140
where these two sets have an

1748
01:16:49,140 --> 01:16:51,840
intersection like a star on which the

1749
01:16:51,840 --> 01:16:55,320
two values two open values don't agree

1750
01:16:55,320 --> 01:16:58,500
so what it means is basically proof Pi

1751
01:16:58,500 --> 01:17:01,800
opens the committed Vector to some you

1752
01:17:01,800 --> 01:17:04,739
know values on these positions and then

1753
01:17:04,739 --> 01:17:08,280
Pi Prime opens it on the values

1754
01:17:08,280 --> 01:17:11,219
in the subset S Prime to some I mean

1755
01:17:11,219 --> 01:17:14,100
values on these positions but there

1756
01:17:14,100 --> 01:17:17,880
there is some index I star uh in which

1757
01:17:17,880 --> 01:17:21,179
the two proofs open the same uh I mean

1758
01:17:21,179 --> 01:17:24,300
open the vector uh to different to two

1759
01:17:24,300 --> 01:17:26,400
different values so it's a contradiction

1760
01:17:26,400 --> 01:17:28,500
and we don't want this to happen

1761
01:17:28,500 --> 01:17:31,280
now as I said Yeah in our work we

1762
01:17:31,280 --> 01:17:34,199
introduce a new security proof for this

1763
01:17:34,199 --> 01:17:37,440
same commitment aggregations and for

1764
01:17:37,440 --> 01:17:40,380
this great scheme coin proofs in the

1765
01:17:40,380 --> 01:17:42,480
random Oracle model without relying on

1766
01:17:42,480 --> 01:17:44,219
the algebraic movement and from a weaker

1767
01:17:44,219 --> 01:17:46,860
assumption in our full version in the

1768
01:17:46,860 --> 01:17:49,020
full version of our paper uh which will

1769
01:17:49,020 --> 01:17:52,679
be on the apron soon we also show how

1770
01:17:52,679 --> 01:17:55,199
applying the techniques introducing the

1771
01:17:55,199 --> 01:17:57,300
point proofs will result in having

1772
01:17:57,300 --> 01:17:58,739
perfectly heightened polynomial

1773
01:17:58,739 --> 01:18:00,960
commitment with constant size by 12

1774
01:18:00,960 --> 01:18:02,280
minutes

1775
01:18:02,280 --> 01:18:04,199
uh now let's see what's wrong with this

1776
01:18:04,199 --> 01:18:06,540
algebraic group model so I will compare

1777
01:18:06,540 --> 01:18:08,400
it to the well-known generic gold model

1778
01:18:08,400 --> 01:18:10,340
which is an idealized security model

1779
01:18:10,340 --> 01:18:12,540
where we only consider generic

1780
01:18:12,540 --> 01:18:14,580
adversaries so this kind of adversaries

1781
01:18:14,580 --> 01:18:16,440
only have access to a random

1782
01:18:16,440 --> 01:18:18,480
representation of the group so they have

1783
01:18:18,480 --> 01:18:20,040
access to a meaningless representation

1784
01:18:20,040 --> 01:18:23,159
their computation don't I mean doesn't

1785
01:18:23,159 --> 01:18:26,340
rely on a representation of the group

1786
01:18:26,340 --> 01:18:29,219
and they compute group operations via

1787
01:18:29,219 --> 01:18:31,920
random by Oracle queries so in some

1788
01:18:31,920 --> 01:18:33,360
sense we can say that this kind of

1789
01:18:33,360 --> 01:18:35,400
adversaries have black box access to a

1790
01:18:35,400 --> 01:18:36,260
group

1791
01:18:36,260 --> 01:18:39,920
in the algebraic group model however uh

1792
01:18:39,920 --> 01:18:42,659
some I mean we we only consider

1793
01:18:42,659 --> 01:18:45,060
algebraic adversaries so this kind of

1794
01:18:45,060 --> 01:18:46,320
adversaries

1795
01:18:46,320 --> 01:18:46,980
um

1796
01:18:46,980 --> 01:18:49,080
don't have restriction regarding their

1797
01:18:49,080 --> 01:18:50,460
access to the representation of the

1798
01:18:50,460 --> 01:18:51,840
group so they can have the actual

1799
01:18:51,840 --> 01:18:53,219
representation

1800
01:18:53,219 --> 01:18:56,460
but the limitation is that if they

1801
01:18:56,460 --> 01:18:58,739
output something they need to tell you

1802
01:18:58,739 --> 01:19:01,020
how they have computed it from the known

1803
01:19:01,020 --> 01:19:03,719
group elements okay so they basically

1804
01:19:03,719 --> 01:19:05,820
give you a cheat sheet saying that yeah

1805
01:19:05,820 --> 01:19:09,120
this is the way I have what I have now

1806
01:19:09,120 --> 01:19:11,780
uh so these are all basically

1807
01:19:11,780 --> 01:19:14,040
unrealistic situations and we want to

1808
01:19:14,040 --> 01:19:16,080
avoid them as much as possible

1809
01:19:16,080 --> 01:19:19,380
and that's we do that's what we do and

1810
01:19:19,380 --> 01:19:22,199
now I will explain how our proof work

1811
01:19:22,199 --> 01:19:24,120
Works uh for the same commitment

1812
01:19:24,120 --> 01:19:26,580
delegation in the random Michael model

1813
01:19:26,580 --> 01:19:28,980
without algebraic group model but first

1814
01:19:28,980 --> 01:19:31,080
let's recall the construction of Point

1815
01:19:31,080 --> 01:19:32,460
proofs

1816
01:19:32,460 --> 01:19:35,820
and so in the construction for the

1817
01:19:35,820 --> 01:19:37,620
public parameters we have a slightly

1818
01:19:37,620 --> 01:19:40,260
Group G generated by this small G here

1819
01:19:40,260 --> 01:19:43,800
of parameter p and we have a vector of

1820
01:19:43,800 --> 01:19:46,199
values GG to the alpha or to G to the

1821
01:19:46,199 --> 01:19:47,820
alpha n

1822
01:19:47,820 --> 01:19:50,460
the elementary to the alpha n plus 1 is

1823
01:19:50,460 --> 01:19:51,420
missing

1824
01:19:51,420 --> 01:19:53,699
and then we continue from due to the

1825
01:19:53,699 --> 01:19:55,679
alpha n plus two up to G to Alpha two

1826
01:19:55,679 --> 01:19:58,800
one okay and in order to commit to a

1827
01:19:58,800 --> 01:20:01,020
vector of values like m

1828
01:20:01,020 --> 01:20:04,080
what we do is uh picking a random

1829
01:20:04,080 --> 01:20:06,840
element of the group order like gamma

1830
01:20:06,840 --> 01:20:10,320
and multiplying due to the gamma to some

1831
01:20:10,320 --> 01:20:12,420
product of due to the alpha J times NJ

1832
01:20:12,420 --> 01:20:14,880
for all the indices J from one time but

1833
01:20:14,880 --> 01:20:18,179
if we zoom in on what's happening in the

1834
01:20:18,179 --> 01:20:21,480
exponent of G here is basically we

1835
01:20:21,480 --> 01:20:23,940
consider a polynomial of alpha of degree

1836
01:20:23,940 --> 01:20:26,940
to n and then we set the coefficients of

1837
01:20:26,940 --> 01:20:30,120
alpha 0 Alpha 1 of the alpha n to be

1838
01:20:30,120 --> 01:20:32,820
respectively gamma and 1 to m

1839
01:20:32,820 --> 01:20:35,100
okay so it's pretty easy

1840
01:20:35,100 --> 01:20:37,620
and then when we want to open this

1841
01:20:37,620 --> 01:20:40,380
commitment on some position I what we do

1842
01:20:40,380 --> 01:20:42,840
is taking this you know blue sub Vector

1843
01:20:42,840 --> 01:20:45,060
then we shift it all the way to the

1844
01:20:45,060 --> 01:20:49,260
right until the coefficient Mi becomes

1845
01:20:49,260 --> 01:20:51,659
the coefficient of alpha n plus one

1846
01:20:51,659 --> 01:20:54,900
and then we remove it completely

1847
01:20:54,900 --> 01:20:58,739
okay and then the verification is done

1848
01:20:58,739 --> 01:21:02,460
again very simply so we use a pairing to

1849
01:21:02,460 --> 01:21:05,340
check some equation uh so we consider a

1850
01:21:05,340 --> 01:21:06,960
second group a Target group and we check

1851
01:21:06,960 --> 01:21:08,699
some equation in the circuit in the

1852
01:21:08,699 --> 01:21:09,840
Target group

1853
01:21:09,840 --> 01:21:14,159
and what it does is very easy so the

1854
01:21:14,159 --> 01:21:16,739
left hand side takes this blue sub

1855
01:21:16,739 --> 01:21:18,719
Vector in the exponent of the commitment

1856
01:21:18,719 --> 01:21:20,880
it shifts it all the way to the right

1857
01:21:20,880 --> 01:21:23,340
again until the committed value m i

1858
01:21:23,340 --> 01:21:26,760
becomes a coefficient of alpha plus one

1859
01:21:26,760 --> 01:21:29,420
and the right hand side first

1860
01:21:29,420 --> 01:21:32,880
puts this proof Pi I which misses the

1861
01:21:32,880 --> 01:21:35,820
coefficient of alpha plus one in the

1862
01:21:35,820 --> 01:21:37,920
Target group and then adds the value

1863
01:21:37,920 --> 01:21:40,620
that it wants the commitment to be open

1864
01:21:40,620 --> 01:21:43,679
to to this position okay

1865
01:21:43,679 --> 01:21:45,719
and yeah the verification is done by

1866
01:21:45,719 --> 01:21:48,719
just checking if the two polynomials are

1867
01:21:48,719 --> 01:21:51,480
basically equal or not which is reducing

1868
01:21:51,480 --> 01:21:53,520
into taking if these two coefficients

1869
01:21:53,520 --> 01:21:54,860
are equal

1870
01:21:54,860 --> 01:21:57,480
so yeah you can see that if you open to

1871
01:21:57,480 --> 01:21:59,040
what you have committed before at this

1872
01:21:59,040 --> 01:22:02,060
position then it's correct

1873
01:22:02,280 --> 01:22:06,540
uh now uh so at the end the schemes the

1874
01:22:06,540 --> 01:22:08,940
skin looks something like this we also

1875
01:22:08,940 --> 01:22:12,719
add the second group G hat the pairing

1876
01:22:12,719 --> 01:22:15,120
that we have and also a bunch of values

1877
01:22:15,120 --> 01:22:18,060
G hat to the alpha g h Alpha to the end

1878
01:22:18,060 --> 01:22:20,760
where this small G hat is generator of

1879
01:22:20,760 --> 01:22:22,340
the second group

1880
01:22:22,340 --> 01:22:24,900
and the hardness assumption based on

1881
01:22:24,900 --> 01:22:28,500
which we're gonna prove the security I

1882
01:22:28,500 --> 01:22:31,620
mean the binding and property is ndh

1883
01:22:31,620 --> 01:22:34,199
assumptions so it states that given all

1884
01:22:34,199 --> 01:22:36,659
of these elements that we have here it's

1885
01:22:36,659 --> 01:22:38,520
still hard to compute this meeting

1886
01:22:38,520 --> 01:22:41,280
elements due to the alpha n plus one

1887
01:22:41,280 --> 01:22:43,759
okay

1888
01:22:43,860 --> 01:22:47,699
so why is this binding so here I'm only

1889
01:22:47,699 --> 01:22:49,620
considering the proof for a single

1890
01:22:49,620 --> 01:22:50,880
position

1891
01:22:50,880 --> 01:22:53,580
so if you if you if you go back to the

1892
01:22:53,580 --> 01:22:55,679
verification equation the right hand

1893
01:22:55,679 --> 01:22:57,600
side what it does is you're taking the

1894
01:22:57,600 --> 01:23:00,380
proof taking the polynomial in the

1895
01:23:00,380 --> 01:23:03,540
exponent of the proof and then adding it

1896
01:23:03,540 --> 01:23:06,659
with uh at this coefficient of n plus

1897
01:23:06,659 --> 01:23:09,780
one with what you want to open to

1898
01:23:09,780 --> 01:23:13,500
so since our hardness assumption states

1899
01:23:13,500 --> 01:23:15,600
that due to the alpha n plus one remains

1900
01:23:15,600 --> 01:23:18,360
unknown then any proof even an

1901
01:23:18,360 --> 01:23:21,000
adversarially generated one should have

1902
01:23:21,000 --> 01:23:23,400
zero at as the quotient of Alpha and

1903
01:23:23,400 --> 01:23:25,920
plus one okay so in the end if you want

1904
01:23:25,920 --> 01:23:27,900
the verification to pass

1905
01:23:27,900 --> 01:23:30,540
you have to set this question to be the

1906
01:23:30,540 --> 01:23:32,699
exact value that you have committed to

1907
01:23:32,699 --> 01:23:36,420
before okay so it is indeed pointing and

1908
01:23:36,420 --> 01:23:38,640
in some sense we can consider mapping

1909
01:23:38,640 --> 01:23:42,120
between any polynomial and proof pair to

1910
01:23:42,120 --> 01:23:44,340
what makes this proof to pass in the

1911
01:23:44,340 --> 01:23:46,380
verification algorithm which is the

1912
01:23:46,380 --> 01:23:48,420
missing coefficient okay and which is

1913
01:23:48,420 --> 01:23:51,120
the I mean value that you have committed

1914
01:23:51,120 --> 01:23:53,820
before at this position that the proof

1915
01:23:53,820 --> 01:23:56,219
verse was

1916
01:23:56,219 --> 01:23:59,699
okay now let's see how the aggregation

1917
01:23:59,699 --> 01:24:00,960
works

1918
01:24:00,960 --> 01:24:02,940
so in order to aggregate a bunch of

1919
01:24:02,940 --> 01:24:04,800
proofs for different positions and some

1920
01:24:04,800 --> 01:24:07,199
sorts that are s what you do is

1921
01:24:07,199 --> 01:24:09,900
multiplying all of them together but

1922
01:24:09,900 --> 01:24:11,940
using some Randomness in the exponent

1923
01:24:11,940 --> 01:24:14,580
which is obtained from querying around

1924
01:24:14,580 --> 01:24:16,020
the market

1925
01:24:16,020 --> 01:24:19,199
and with giving the

1926
01:24:19,199 --> 01:24:22,739
position I the commitment and the set

1927
01:24:22,739 --> 01:24:24,540
and the sub Vector that you want to open

1928
01:24:24,540 --> 01:24:26,280
the commencement tool

1929
01:24:26,280 --> 01:24:28,620
as input

1930
01:24:28,620 --> 01:24:31,500
and yeah again if we zoom in on the

1931
01:24:31,500 --> 01:24:34,679
exponent of G here what we have is a

1932
01:24:34,679 --> 01:24:38,159
bunch of polynomials where in all of

1933
01:24:38,159 --> 01:24:40,320
them the exponent of Alpha and plus one

1934
01:24:40,320 --> 01:24:43,199
is missing we multiply each of them by

1935
01:24:43,199 --> 01:24:45,179
this random value that is obtained from

1936
01:24:45,179 --> 01:24:46,800
the random Oracle and we sum them up

1937
01:24:46,800 --> 01:24:48,659
together okay

1938
01:24:48,659 --> 01:24:52,080
and here the missing part of this

1939
01:24:52,080 --> 01:24:54,179
aggregated proof again is the

1940
01:24:54,179 --> 01:24:56,400
coefficient of alpha n plus 1 in this

1941
01:24:56,400 --> 01:24:57,480
summation

1942
01:24:57,480 --> 01:25:01,260
which is this sum of Mi times h i for

1943
01:25:01,260 --> 01:25:03,420
all of this in the indices that is in

1944
01:25:03,420 --> 01:25:05,219
this set s

1945
01:25:05,219 --> 01:25:08,219
so here the mapping that we can consider

1946
01:25:08,219 --> 01:25:11,100
for a commitment and and the proof to

1947
01:25:11,100 --> 01:25:13,560
what makes the proof to pass is this

1948
01:25:13,560 --> 01:25:16,560
missing summation again

1949
01:25:16,560 --> 01:25:18,420
so this is exactly what is done in the

1950
01:25:18,420 --> 01:25:19,739
verification

1951
01:25:19,739 --> 01:25:22,620
uh it's basically multiplying a bunch of

1952
01:25:22,620 --> 01:25:24,840
verification algorithm I mean equations

1953
01:25:24,840 --> 01:25:26,420
together

1954
01:25:26,420 --> 01:25:29,640
and yeah again the same way it's correct

1955
01:25:29,640 --> 01:25:31,140
it's pretty easy

1956
01:25:31,140 --> 01:25:34,679
so why it is why is it patch finding

1957
01:25:34,679 --> 01:25:37,620
uh yeah let's recall the batch binding

1958
01:25:37,620 --> 01:25:40,620
definition again so let's assume that we

1959
01:25:40,620 --> 01:25:42,540
have an adversary that outputs a single

1960
01:25:42,540 --> 01:25:45,600
commitment and two subsets and two sub

1961
01:25:45,600 --> 01:25:46,880
vectors

1962
01:25:46,880 --> 01:25:50,219
and two valid proofs by zero and Pi one

1963
01:25:50,219 --> 01:25:53,040
so they are both valid they both pass

1964
01:25:53,040 --> 01:25:55,020
the verification algorithm

1965
01:25:55,020 --> 01:25:58,679
and there's some problematic index I

1966
01:25:58,679 --> 01:26:01,679
store in the intersection of s0 and S1

1967
01:26:01,679 --> 01:26:05,159
such that the two open sub vectors

1968
01:26:05,159 --> 01:26:07,219
correspond to different value on this

1969
01:26:07,219 --> 01:26:11,040
index okay so this translates to you

1970
01:26:11,040 --> 01:26:13,380
know the mappings that I uh pointed to

1971
01:26:13,380 --> 01:26:14,900
before

1972
01:26:14,900 --> 01:26:17,639
two mappings from the same commitment C

1973
01:26:17,639 --> 01:26:21,900
and 0.0.1 to two missing uh sums that

1974
01:26:21,900 --> 01:26:25,199
make these proofs pass

1975
01:26:25,199 --> 01:26:29,100
and if we look at I mean both of these

1976
01:26:29,100 --> 01:26:31,620
subsets have this index oyster in

1977
01:26:31,620 --> 01:26:32,520
themselves

1978
01:26:32,520 --> 01:26:34,980
so if we look at this term that depends

1979
01:26:34,980 --> 01:26:39,300
only on the index I start then the idea

1980
01:26:39,300 --> 01:26:41,699
becomes a bit clear so the idea is

1981
01:26:41,699 --> 01:26:43,800
basically get rid of all the other

1982
01:26:43,800 --> 01:26:46,739
elements in each of these summations to

1983
01:26:46,739 --> 01:26:49,440
to find the conflicting proof for the

1984
01:26:49,440 --> 01:26:51,360
single position oyster

1985
01:26:51,360 --> 01:26:54,060
and this is done by controlling the

1986
01:26:54,060 --> 01:26:56,460
randomness in the random work a lot and

1987
01:26:56,460 --> 01:26:59,159
we'll see how so as promised I'm gonna

1988
01:26:59,159 --> 01:27:01,080
now show you the actual proof of the

1989
01:27:01,080 --> 01:27:04,500
batch binding and and using some Lemma

1990
01:27:04,500 --> 01:27:07,520
called Locus for human

1991
01:27:07,760 --> 01:27:12,000
uh so the way it works is uh yeah we

1992
01:27:12,000 --> 01:27:14,159
consider an adversary that outputs these

1993
01:27:14,159 --> 01:27:15,960
two conflicting batches

1994
01:27:15,960 --> 01:27:18,120
it's uns1

1995
01:27:18,120 --> 01:27:20,699
and we know that the adversary is

1996
01:27:20,699 --> 01:27:22,560
querying the random article to get some

1997
01:27:22,560 --> 01:27:24,500
you know Randomness that you want for

1998
01:27:24,500 --> 01:27:27,600
the aggregation of proofs and if we zoom

1999
01:27:27,600 --> 01:27:32,940
in on the uh query that includes this

2000
01:27:32,940 --> 01:27:35,219
problematic index I star and the first

2001
01:27:35,219 --> 01:27:37,980
set is zero

2002
01:27:37,980 --> 01:27:42,360
and we run the adversary a second time

2003
01:27:42,360 --> 01:27:46,260
while changing I mean only changing the

2004
01:27:46,260 --> 01:27:48,659
answer of the random Oracle query on

2005
01:27:48,659 --> 01:27:51,600
this specific query then what happens is

2006
01:27:51,600 --> 01:27:55,199
again this will I mean it will output uh

2007
01:27:55,199 --> 01:27:58,139
two conflicting matches but the thing is

2008
01:27:58,139 --> 01:28:01,520
that due to locals working them up

2009
01:28:01,520 --> 01:28:05,280
the components of this specific query

2010
01:28:05,280 --> 01:28:07,260
will stay the same in the output of the

2011
01:28:07,260 --> 01:28:10,260
adversary so we have again the exact

2012
01:28:10,260 --> 01:28:12,239
same set as zero which we considered

2013
01:28:12,239 --> 01:28:14,400
before in the output

2014
01:28:14,400 --> 01:28:18,239
so basically we have two summations uh

2015
01:28:18,239 --> 01:28:20,280
with respect to this set with respect to

2016
01:28:20,280 --> 01:28:23,580
two different proofs and again we

2017
01:28:23,580 --> 01:28:25,860
separate these problematic index I store

2018
01:28:25,860 --> 01:28:28,320
from the two summations and then we can

2019
01:28:28,320 --> 01:28:30,420
remove every other elements from the

2020
01:28:30,420 --> 01:28:31,980
summation because everything stays the

2021
01:28:31,980 --> 01:28:35,219
same we didn't change any uh query

2022
01:28:35,219 --> 01:28:38,699
answer on anything else

2023
01:28:38,699 --> 01:28:41,219
and then it can be translated to you

2024
01:28:41,219 --> 01:28:43,260
know the verification equations and if

2025
01:28:43,260 --> 01:28:46,139
you divide them together with I mean

2026
01:28:46,139 --> 01:28:48,540
verification equations for the subset s0

2027
01:28:48,540 --> 01:28:50,880
if we divide them together then we get a

2028
01:28:50,880 --> 01:28:52,620
single verification equation for this

2029
01:28:52,620 --> 01:28:55,320
special index istar

2030
01:28:55,320 --> 01:28:58,620
and we do the exact same thing for the

2031
01:28:58,620 --> 01:29:01,020
second set S1

2032
01:29:01,020 --> 01:29:03,739
so we get another verification equation

2033
01:29:03,739 --> 01:29:08,340
for this uh index I Star based on I mean

2034
01:29:08,340 --> 01:29:09,600
obtained by dividing the two

2035
01:29:09,600 --> 01:29:11,580
verification equations this time for the

2036
01:29:11,580 --> 01:29:13,199
second set

2037
01:29:13,199 --> 01:29:15,000
so in the end we have two verification

2038
01:29:15,000 --> 01:29:18,000
equations for this index special index

2039
01:29:18,000 --> 01:29:20,699
istar which contradicts the position

2040
01:29:20,699 --> 01:29:23,940
bindings I mean for the single position

2041
01:29:23,940 --> 01:29:27,000
which was not possible assuming the ndhg

2042
01:29:27,000 --> 01:29:28,340
assumption

2043
01:29:28,340 --> 01:29:32,520
so in the end we have the batch binding

2044
01:29:32,520 --> 01:29:36,780
uh to conclude my talk we provide a new

2045
01:29:36,780 --> 01:29:38,460
security proof for the point proofs in

2046
01:29:38,460 --> 01:29:40,860
the random Oracle model without relying

2047
01:29:40,860 --> 01:29:42,300
on the algebraic group model and without

2048
01:29:42,300 --> 01:29:44,900
the without changing the scheme

2049
01:29:44,900 --> 01:29:48,540
our proof is done for the both for both

2050
01:29:48,540 --> 01:29:50,760
the same commitment aggregations and

2051
01:29:50,760 --> 01:29:53,280
cross-continent negations in the case of

2052
01:29:53,280 --> 01:29:55,139
same competent delegations we also can

2053
01:29:55,139 --> 01:29:57,900
use the generalized generalized working

2054
01:29:57,900 --> 01:29:59,040
Lemma

2055
01:29:59,040 --> 01:30:01,679
which works a bit better in the term of

2056
01:30:01,679 --> 01:30:03,120
security loss

2057
01:30:03,120 --> 01:30:05,639
and in the case of cross commitment

2058
01:30:05,639 --> 01:30:09,239
allegations and we only could do it

2059
01:30:09,239 --> 01:30:11,719
using local foreign

2060
01:30:11,719 --> 01:30:15,239
and we also as I said proposed the first

2061
01:30:15,239 --> 01:30:17,159
perfectly hiding polynomial commitment

2062
01:30:17,159 --> 01:30:19,260
with optimal batch openings which

2063
01:30:19,260 --> 01:30:21,659
include one group element inspired by

2064
01:30:21,659 --> 01:30:23,520
techniques and point proofs

2065
01:30:23,520 --> 01:30:26,040
and this is based on inner product

2066
01:30:26,040 --> 01:30:28,560
functional commitment of liver Romana

2067
01:30:28,560 --> 01:30:31,920
and Jung under the same ndhs option

2068
01:30:31,920 --> 01:30:35,480
thank you very much for listening

2069
01:30:40,500 --> 01:30:42,719
um all right we have time for a couple

2070
01:30:42,719 --> 01:30:45,480
questions so uh audience do you have

2071
01:30:45,480 --> 01:30:47,780
questions

2072
01:30:52,139 --> 01:30:55,980
okay so uh is there if we don't have

2073
01:30:55,980 --> 01:30:58,380
questions Let's uh thanks the speaker

2074
01:30:58,380 --> 01:31:02,100
one more time and um I think uh lunch is

2075
01:31:02,100 --> 01:31:04,260
outside so yeah

2076
01:31:04,260 --> 01:31:06,659
okay so let's conclude this session

2077
01:31:06,659 --> 01:31:09,920
thank you for attending

