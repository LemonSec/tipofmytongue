1
00:00:00,000 --> 00:00:02,159
the first talk is concurrently

2
00:00:02,159 --> 00:00:04,560
composable non-interactive secure

3
00:00:04,560 --> 00:00:07,020
computation and Andrew Morgan will give

4
00:00:07,020 --> 00:00:08,700
the talk

5
00:00:08,700 --> 00:00:11,280
thank you for the introduction so yes

6
00:00:11,280 --> 00:00:12,960
this talk is based in work done jointly

7
00:00:12,960 --> 00:00:14,759
with my advisor Rafael pass we both

8
00:00:14,759 --> 00:00:16,199
regret that we're unable to make it to

9
00:00:16,199 --> 00:00:18,420
the conference in person but we're happy

10
00:00:18,420 --> 00:00:20,279
to have the opportunities to present our

11
00:00:20,279 --> 00:00:24,619
work remotely so to get right into it

12
00:00:25,019 --> 00:00:26,820
in the setting of two-party computation

13
00:00:26,820 --> 00:00:28,680
which we consider in this work we have a

14
00:00:28,680 --> 00:00:30,539
receiver in the center both with private

15
00:00:30,539 --> 00:00:32,640
inputs who wish to jointly compute some

16
00:00:32,640 --> 00:00:35,700
functionality F under respective inputs

17
00:00:35,700 --> 00:00:37,440
in such a way that a potentially

18
00:00:37,440 --> 00:00:39,120
malicious party participating in the

19
00:00:39,120 --> 00:00:40,860
protocol wouldn't learn anything about

20
00:00:40,860 --> 00:00:42,719
the other party's input besides what

21
00:00:42,719 --> 00:00:44,040
they could logically infer from the

22
00:00:44,040 --> 00:00:46,500
output of the protocol anyway

23
00:00:46,500 --> 00:00:48,840
so formally we call this notion

24
00:00:48,840 --> 00:00:50,820
simulation-based security where a

25
00:00:50,820 --> 00:00:52,500
computationally bounded adversary should

26
00:00:52,500 --> 00:00:54,059
be unable to distinguish between their

27
00:00:54,059 --> 00:00:55,379
view of the real execution of the

28
00:00:55,379 --> 00:00:57,300
protocol and their view of an idealized

29
00:00:57,300 --> 00:00:59,219
execution with a trusted third party and

30
00:00:59,219 --> 00:01:01,140
simulated messages which are independent

31
00:01:01,140 --> 00:01:03,120
of the honest party's input

32
00:01:03,120 --> 00:01:05,339
we note that secure computation was

33
00:01:05,339 --> 00:01:06,900
originally studied in an honest but

34
00:01:06,900 --> 00:01:08,700
curious or semi-honest setting where the

35
00:01:08,700 --> 00:01:10,260
adversary had to follow the protocol but

36
00:01:10,260 --> 00:01:11,460
could attempt to learn additional

37
00:01:11,460 --> 00:01:13,799
information but in this work we consider

38
00:01:13,799 --> 00:01:15,420
fully malicious adversaries which can

39
00:01:15,420 --> 00:01:18,680
deviate arbitrarily from the protocol

40
00:01:18,680 --> 00:01:21,420
if we consider one-sided functionality

41
00:01:21,420 --> 00:01:23,100
where only a single party needs to

42
00:01:23,100 --> 00:01:24,960
receive the output a minimum of two

43
00:01:24,960 --> 00:01:26,700
single message rounds of communication

44
00:01:26,700 --> 00:01:28,880
is necessary to avoid residual attacks

45
00:01:28,880 --> 00:01:30,960
protocols achieving this minimum are

46
00:01:30,960 --> 00:01:33,000
referred to as non-interactive secure

47
00:01:33,000 --> 00:01:35,220
computation or nisk

48
00:01:35,220 --> 00:01:37,320
nisk protocols with trusted setup are

49
00:01:37,320 --> 00:01:39,479
well known in the plane model it is just

50
00:01:39,479 --> 00:01:41,159
as well known that four single message

51
00:01:41,159 --> 00:01:43,079
rounds are both necessary and sufficient

52
00:01:43,079 --> 00:01:44,640
for maliciously secure two-party

53
00:01:44,640 --> 00:01:46,380
computation under Standard

54
00:01:46,380 --> 00:01:48,299
simulation-based Security

55
00:01:48,299 --> 00:01:50,520
so to construct nisk in the plane model

56
00:01:50,520 --> 00:01:52,200
it is necessary to use a standard

57
00:01:52,200 --> 00:01:54,240
relaxation of security known as super

58
00:01:54,240 --> 00:01:57,899
polynomial time simulation or SPS where

59
00:01:57,899 --> 00:01:59,520
the simulator is allowed to run in

60
00:01:59,520 --> 00:02:02,939
slightly super polynomial time

61
00:02:02,939 --> 00:02:04,740
if we relax our security definition to

62
00:02:04,740 --> 00:02:07,140
SPS it turns out that nisquish malicious

63
00:02:07,140 --> 00:02:09,000
SPS Security in a plane model is

64
00:02:09,000 --> 00:02:11,459
possible and can be constructed based on

65
00:02:11,459 --> 00:02:13,080
sub-exponential versions of standard

66
00:02:13,080 --> 00:02:14,760
assumptions such as decisional dippy

67
00:02:14,760 --> 00:02:17,160
Helmet residuosity or learning with

68
00:02:17,160 --> 00:02:18,840
errors

69
00:02:18,840 --> 00:02:20,520
however for a lot of potential

70
00:02:20,520 --> 00:02:22,680
applications of secure computation we

71
00:02:22,680 --> 00:02:24,420
need stronger security properties than

72
00:02:24,420 --> 00:02:25,620
are guaranteed by Standard

73
00:02:25,620 --> 00:02:28,160
simulation-based Security in practice

74
00:02:28,160 --> 00:02:30,480
protocols can be run concurrently with

75
00:02:30,480 --> 00:02:32,760
many simultaneously active instances and

76
00:02:32,760 --> 00:02:34,800
an adversary able to adaptively observe

77
00:02:34,800 --> 00:02:36,599
the results of certain interactions and

78
00:02:36,599 --> 00:02:38,520
use them to influence others

79
00:02:38,520 --> 00:02:40,739
and also protocols can be run as a sub

80
00:02:40,739 --> 00:02:42,720
protocol in a larger composition of

81
00:02:42,720 --> 00:02:44,400
protocols where we would intuitively

82
00:02:44,400 --> 00:02:46,680
wish to guarantee that a composition of

83
00:02:46,680 --> 00:02:48,720
provably secure protocols is likewise

84
00:02:48,720 --> 00:02:50,940
secure neither of these two properties

85
00:02:50,940 --> 00:02:52,260
are implied by the most basic

86
00:02:52,260 --> 00:02:54,000
definitions of simulation-based security

87
00:02:54,000 --> 00:02:55,980
which we henceforce refer to as

88
00:02:55,980 --> 00:02:58,739
Standalone security

89
00:02:58,739 --> 00:03:00,360
some of the classical definitions of

90
00:03:00,360 --> 00:03:02,400
simulation-based security did consider a

91
00:03:02,400 --> 00:03:04,200
composability property but the first

92
00:03:04,200 --> 00:03:06,000
framework to guarantee both concurrent

93
00:03:06,000 --> 00:03:07,500
and composable security is the

94
00:03:07,500 --> 00:03:09,120
well-known Universal composability

95
00:03:09,120 --> 00:03:12,120
framework or UC proposed by Kennedy in

96
00:03:12,120 --> 00:03:13,739
2001.

97
00:03:13,739 --> 00:03:16,319
to prove that a protocol is UC secure

98
00:03:16,319 --> 00:03:17,819
one needs to show an analog of

99
00:03:17,819 --> 00:03:19,560
simulation-based security but against a

100
00:03:19,560 --> 00:03:21,180
much stronger external party than a

101
00:03:21,180 --> 00:03:23,400
classical adversary an environment which

102
00:03:23,400 --> 00:03:25,200
can invoke many concurrent instances of

103
00:03:25,200 --> 00:03:26,640
a protocol corrupt potentially many

104
00:03:26,640 --> 00:03:28,319
parties and observe and control

105
00:03:28,319 --> 00:03:30,959
corrupted parties communication

106
00:03:30,959 --> 00:03:32,819
as such it's a strictly stronger notion

107
00:03:32,819 --> 00:03:34,260
and less more difficult to prove In

108
00:03:34,260 --> 00:03:36,120
classical simulation-based security but

109
00:03:36,120 --> 00:03:37,620
correspondingly provide stronger

110
00:03:37,620 --> 00:03:39,840
security guarantees of course because it

111
00:03:39,840 --> 00:03:42,000
is strictly stronger UC secure two-party

112
00:03:42,000 --> 00:03:43,500
computation with polynomial time

113
00:03:43,500 --> 00:03:45,480
simulation is subject to the same

114
00:03:45,480 --> 00:03:47,159
impossibilities in the plane model as

115
00:03:47,159 --> 00:03:49,500
Standalone security so to even consider

116
00:03:49,500 --> 00:03:51,239
building UC secure disk we need an

117
00:03:51,239 --> 00:03:53,819
analog of SPS security simply allowing

118
00:03:53,819 --> 00:03:56,040
superpolynomial time simulation in the

119
00:03:56,040 --> 00:03:57,540
standard definition of UC security

120
00:03:57,540 --> 00:04:00,120
doesn't preserve composability so

121
00:04:00,120 --> 00:04:01,680
instead in this work we consider a

122
00:04:01,680 --> 00:04:04,500
notion of angel-based or oracle-aded UC

123
00:04:04,500 --> 00:04:06,420
security where the environment and

124
00:04:06,420 --> 00:04:08,400
simulator both have access to a specific

125
00:04:08,400 --> 00:04:10,739
super polynomial time helper Oracle or

126
00:04:10,739 --> 00:04:13,920
Angel H but are are otherwise restricted

127
00:04:13,920 --> 00:04:15,900
to polynomial time

128
00:04:15,900 --> 00:04:18,298
the added strength of UC Security in

129
00:04:18,298 --> 00:04:20,279
comparison to Standalone security also

130
00:04:20,279 --> 00:04:21,779
means that historically we have a far

131
00:04:21,779 --> 00:04:24,060
more limited space of results for uc's

132
00:04:24,060 --> 00:04:25,500
secure two party computation than we

133
00:04:25,500 --> 00:04:27,960
have for Standalone security

134
00:04:27,960 --> 00:04:30,000
as I mentioned earlier Standalone SPS

135
00:04:30,000 --> 00:04:32,820
secure nisk is already a solved problem

136
00:04:32,820 --> 00:04:35,280
but even considering concurrent security

137
00:04:35,280 --> 00:04:37,860
without composability the most efficient

138
00:04:37,860 --> 00:04:39,900
two-party computation protocols prior to

139
00:04:39,900 --> 00:04:42,180
our work are protocols where all parties

140
00:04:42,180 --> 00:04:44,400
receive the output and thus and required

141
00:04:44,400 --> 00:04:46,500
two rounds of simultaneous broadcast for

142
00:04:46,500 --> 00:04:47,520
every party sends a message

143
00:04:47,520 --> 00:04:50,100
simultaneously and thus these protocols

144
00:04:50,100 --> 00:04:51,240
would require three single message

145
00:04:51,240 --> 00:04:53,280
rounds for two-party computation and a

146
00:04:53,280 --> 00:04:55,320
single message setting we consider

147
00:04:55,320 --> 00:04:57,780
furthermore if we want both concurrently

148
00:04:57,780 --> 00:04:59,940
and composably secure protocols the best

149
00:04:59,940 --> 00:05:01,440
known constructions prior to our work

150
00:05:01,440 --> 00:05:03,479
require an unspecified constant number

151
00:05:03,479 --> 00:05:05,699
of rounds of communication

152
00:05:05,699 --> 00:05:07,800
so it's remained an open question

153
00:05:07,800 --> 00:05:09,479
whether concurrently and composably

154
00:05:09,479 --> 00:05:11,220
secure nist or for that matter even

155
00:05:11,220 --> 00:05:12,780
concurrently secure nisk for General

156
00:05:12,780 --> 00:05:14,820
functionalities can be constructed with

157
00:05:14,820 --> 00:05:16,740
malicious SPS Security in the plane

158
00:05:16,740 --> 00:05:17,639
model

159
00:05:17,639 --> 00:05:19,979
so our work answers that question in the

160
00:05:19,979 --> 00:05:21,720
positive by providing a construction of

161
00:05:21,720 --> 00:05:23,699
disc that does achieve angel-based UC

162
00:05:23,699 --> 00:05:26,160
security and shows that the minimum of

163
00:05:26,160 --> 00:05:27,900
two single message rounds for two-party

164
00:05:27,900 --> 00:05:29,699
computation can be achieved for it is

165
00:05:29,699 --> 00:05:31,500
considerably strengthened definition of

166
00:05:31,500 --> 00:05:33,360
security

167
00:05:33,360 --> 00:05:35,460
specifically our construction of uc's

168
00:05:35,460 --> 00:05:36,780
securedness which we dedicate the

169
00:05:36,780 --> 00:05:38,520
majority of our paper to presenting and

170
00:05:38,520 --> 00:05:40,199
proving formally requires two key

171
00:05:40,199 --> 00:05:42,120
building blocks a standalone

172
00:05:42,120 --> 00:05:44,280
sub-exponentially SPS secure nisk and

173
00:05:44,280 --> 00:05:46,259
sub-exponentially secure non-interactive

174
00:05:46,259 --> 00:05:49,020
CCA secure commitments

175
00:05:49,020 --> 00:05:50,580
concerning the realizability of the

176
00:05:50,580 --> 00:05:52,500
assumptions the Standalone SPS

177
00:05:52,500 --> 00:05:54,539
securenisc is as I've mentioned well

178
00:05:54,539 --> 00:05:56,160
known from sub-exponential versions of

179
00:05:56,160 --> 00:05:58,740
standard assumptions non-interactive CCS

180
00:05:58,740 --> 00:06:00,180
secure commitments on the other hand are

181
00:06:00,180 --> 00:06:01,740
considerably more involved and I'll turn

182
00:06:01,740 --> 00:06:04,500
to a brief discussion of those now

183
00:06:04,500 --> 00:06:06,539
so these are tag-based commitments which

184
00:06:06,539 --> 00:06:08,220
are non-interactive in that committing

185
00:06:08,220 --> 00:06:09,600
to a value requires a single commitment

186
00:06:09,600 --> 00:06:11,160
algorithm rather than an interactive

187
00:06:11,160 --> 00:06:13,620
process and they satisfy a binding

188
00:06:13,620 --> 00:06:14,940
property that a commitment can't be

189
00:06:14,940 --> 00:06:17,100
opened to two distinct values and most

190
00:06:17,100 --> 00:06:19,259
notably a strengthened notion of chosen

191
00:06:19,259 --> 00:06:21,120
ciphertext hiding analogous to the

192
00:06:21,120 --> 00:06:23,340
notion of chosen ciphertext security for

193
00:06:23,340 --> 00:06:25,319
encryption which is defined by a

194
00:06:25,319 --> 00:06:27,300
security game where

195
00:06:27,300 --> 00:06:29,699
an adversary is allowed adaptive query

196
00:06:29,699 --> 00:06:31,740
access to a decommitment Oracle which we

197
00:06:31,740 --> 00:06:33,900
call ostar which on receiving a

198
00:06:33,900 --> 00:06:34,860
commitment

199
00:06:34,860 --> 00:06:36,840
Returns the corresponding value and

200
00:06:36,840 --> 00:06:38,460
Randomness usable to produce that

201
00:06:38,460 --> 00:06:39,539
commitment

202
00:06:39,539 --> 00:06:41,400
so the adversary will then interact with

203
00:06:41,400 --> 00:06:43,919
a challenger C giving it an adaptively

204
00:06:43,919 --> 00:06:46,020
chosen tag and two values to commit to

205
00:06:46,020 --> 00:06:48,419
and the Challenger c will respond with a

206
00:06:48,419 --> 00:06:49,740
commitment to a random one of the two

207
00:06:49,740 --> 00:06:50,819
values

208
00:06:50,819 --> 00:06:52,680
so the adversary then breaks security if

209
00:06:52,680 --> 00:06:54,780
it can correctly guess which value the

210
00:06:54,780 --> 00:06:56,160
challenge are committed with

211
00:06:56,160 --> 00:06:57,900
probabilities significantly greater than

212
00:06:57,900 --> 00:07:00,539
one-half and without having queried the

213
00:07:00,539 --> 00:07:02,280
decommitment Oracle and any commitment

214
00:07:02,280 --> 00:07:05,120
that has the same tag as the challenge

215
00:07:05,120 --> 00:07:07,620
in this work we also consider a

216
00:07:07,620 --> 00:07:09,780
relaxation of CCA security which we call

217
00:07:09,780 --> 00:07:12,660
weak CCA security where the Oracle in

218
00:07:12,660 --> 00:07:14,460
response to a query returns only the

219
00:07:14,460 --> 00:07:16,080
value committed rather than both the

220
00:07:16,080 --> 00:07:18,060
value and the randomness as it turns out

221
00:07:18,060 --> 00:07:19,740
this relaxation is sufficient for our

222
00:07:19,740 --> 00:07:22,400
nisk Construction

223
00:07:22,620 --> 00:07:24,539
unfortunately the known constructions of

224
00:07:24,539 --> 00:07:26,280
non-interactive CCA secure commitments

225
00:07:26,280 --> 00:07:28,139
thus far do require more sophisticated

226
00:07:28,139 --> 00:07:29,400
assumptions compared to our other

227
00:07:29,400 --> 00:07:31,199
building block Standalone secure nisk

228
00:07:31,199 --> 00:07:33,360
their original construction relied on

229
00:07:33,360 --> 00:07:35,460
adaptive one-way permutations a strong

230
00:07:35,460 --> 00:07:38,220
non-falsifiable assumption and or recent

231
00:07:38,220 --> 00:07:39,960
constructions have been proven based on

232
00:07:39,960 --> 00:07:41,880
sub-exponential security of a variety of

233
00:07:41,880 --> 00:07:44,340
sets of assumptions such as hinting

234
00:07:44,340 --> 00:07:46,080
pseudorandom generators keyless

235
00:07:46,080 --> 00:07:48,120
Collision resistant hash functions and

236
00:07:48,120 --> 00:07:50,340
time lock puzzles though the authors of

237
00:07:50,340 --> 00:07:51,900
this work remark that the former of

238
00:07:51,900 --> 00:07:53,759
these hinting prgs can be based in

239
00:07:53,759 --> 00:07:54,840
standard assumptions such as

240
00:07:54,840 --> 00:07:58,740
sub-exponential CDH and learning repairs

241
00:07:58,740 --> 00:08:00,300
given this it might be a natural

242
00:08:00,300 --> 00:08:01,800
question to ask whether we can

243
00:08:01,800 --> 00:08:03,720
potentially bypass the requirement for

244
00:08:03,720 --> 00:08:05,699
non-interactive CCA secure commitments

245
00:08:05,699 --> 00:08:07,919
and base concurrently composable SPS

246
00:08:07,919 --> 00:08:09,300
securedness on a weaker set of

247
00:08:09,300 --> 00:08:10,800
assumptions closer to the standard

248
00:08:10,800 --> 00:08:12,120
assumptions required for the base

249
00:08:12,120 --> 00:08:13,440
Standalone disk protocol under

250
00:08:13,440 --> 00:08:14,699
construction

251
00:08:14,699 --> 00:08:17,340
however in a second key theorem in our

252
00:08:17,340 --> 00:08:18,840
work we answer that question in the

253
00:08:18,840 --> 00:08:20,400
negative we showed the implication from

254
00:08:20,400 --> 00:08:21,900
our first construction is basically

255
00:08:21,900 --> 00:08:24,419
bi-directional and that non-interactive

256
00:08:24,419 --> 00:08:26,220
Weekly CCA secure commitments are

257
00:08:26,220 --> 00:08:28,020
actually are both sufficient and

258
00:08:28,020 --> 00:08:31,139
necessary to construct uc's secure nisk

259
00:08:31,139 --> 00:08:31,860
yeah

260
00:08:31,860 --> 00:08:33,779
specifically alongside our initial

261
00:08:33,779 --> 00:08:36,059
theorem constructing the nisk protocol

262
00:08:36,059 --> 00:08:38,458
we have a second theorem showing that

263
00:08:38,458 --> 00:08:40,440
given a UC secure disk protocol such as

264
00:08:40,440 --> 00:08:42,779
the one we construct we can build a

265
00:08:42,779 --> 00:08:44,640
non-interactive weekly CCA secure

266
00:08:44,640 --> 00:08:46,200
commitment scheme

267
00:08:46,200 --> 00:08:48,240
this combined with the fact that of

268
00:08:48,240 --> 00:08:50,519
course our oracleated UC securenisk is a

269
00:08:50,519 --> 00:08:52,080
strictly stronger definition trivially

270
00:08:52,080 --> 00:08:54,720
implies Standalone SPS secure nisk we'll

271
00:08:54,720 --> 00:08:56,100
imply that our construction the first

272
00:08:56,100 --> 00:08:58,019
theorem is based on nearly minimal

273
00:08:58,019 --> 00:09:00,300
assumptions there's a minor gap which is

274
00:09:00,300 --> 00:09:01,920
that our nisk construction requires sub

275
00:09:01,920 --> 00:09:03,480
exponentially secure Primitives while

276
00:09:03,480 --> 00:09:05,399
The Primitives implied by UC secure nisk

277
00:09:05,399 --> 00:09:08,519
only have polynomial time security

278
00:09:08,519 --> 00:09:10,620
for the sake of time I'll defer the

279
00:09:10,620 --> 00:09:12,060
details of our second theorem to our

280
00:09:12,060 --> 00:09:13,800
paper and I'll spend the rest of this

281
00:09:13,800 --> 00:09:15,899
presentation providing some insight into

282
00:09:15,899 --> 00:09:18,300
the into some of our ideas behind

283
00:09:18,300 --> 00:09:22,220
theorem one and our construction of nisk

284
00:09:22,220 --> 00:09:24,180
so

285
00:09:24,180 --> 00:09:26,220
We Begin by leveraging the properties of

286
00:09:26,220 --> 00:09:27,779
the underlyingness to perform the

287
00:09:27,779 --> 00:09:29,640
computation of the joint functionality f

288
00:09:29,640 --> 00:09:32,580
as might be expected of course we need

289
00:09:32,580 --> 00:09:35,279
to uh we need to guarantee UC security

290
00:09:35,279 --> 00:09:37,500
which is not provided by the underlying

291
00:09:37,500 --> 00:09:39,240
list and in technical terms this will

292
00:09:39,240 --> 00:09:41,040
require the simulator we construct for a

293
00:09:41,040 --> 00:09:42,600
definition of simulation-based security

294
00:09:42,600 --> 00:09:45,480
to be able to extract a corrupt party's

295
00:09:45,480 --> 00:09:47,100
input from the message they send in

296
00:09:47,100 --> 00:09:48,480
order to deliver it to the ideal

297
00:09:48,480 --> 00:09:50,640
functionality in our idealized

298
00:09:50,640 --> 00:09:51,959
interaction

299
00:09:51,959 --> 00:09:54,180
and of course because the simulator we

300
00:09:54,180 --> 00:09:56,040
construct for Oracle aided UC security

301
00:09:56,040 --> 00:09:57,779
is by definition restricted to

302
00:09:57,779 --> 00:09:59,279
polynomial time

303
00:09:59,279 --> 00:10:01,620
as might be expected we can't just

304
00:10:01,620 --> 00:10:03,120
leverage the super polynomial time

305
00:10:03,120 --> 00:10:05,040
simulator from the underlying nist to do

306
00:10:05,040 --> 00:10:06,420
our work for us since it's super

307
00:10:06,420 --> 00:10:08,700
polynomial time

308
00:10:08,700 --> 00:10:10,680
so instead we rely on the super

309
00:10:10,680 --> 00:10:12,899
polynomial time helper functionality H

310
00:10:12,899 --> 00:10:14,940
which we're given by our definition of

311
00:10:14,940 --> 00:10:18,060
oracleated UC Security in our case this

312
00:10:18,060 --> 00:10:19,920
helper will implement the CCA D

313
00:10:19,920 --> 00:10:22,260
commitment Oracle o star and it will

314
00:10:22,260 --> 00:10:23,880
extract inputs from commitments to

315
00:10:23,880 --> 00:10:25,920
messages that will be sent alongside the

316
00:10:25,920 --> 00:10:27,779
the internal misc

317
00:10:27,779 --> 00:10:30,240
the tag-based security of the CCA secure

318
00:10:30,240 --> 00:10:32,300
commitment scheme we require will

319
00:10:32,300 --> 00:10:34,140
effectively guarantee that we can

320
00:10:34,140 --> 00:10:35,820
implement this helper functionality to

321
00:10:35,820 --> 00:10:37,740
only decommit commitments with corrupted

322
00:10:37,740 --> 00:10:39,839
parties tags and this will ensure the

323
00:10:39,839 --> 00:10:41,760
adversary and environment which are also

324
00:10:41,760 --> 00:10:42,959
given access to this helper

325
00:10:42,959 --> 00:10:44,880
functionality can't just trivially break

326
00:10:44,880 --> 00:10:46,800
security by decommitting Honest party's

327
00:10:46,800 --> 00:10:48,180
commitments

328
00:10:48,180 --> 00:10:51,300
so starting with the underlyingness I'll

329
00:10:51,300 --> 00:10:52,680
build up our protocol on the right side

330
00:10:52,680 --> 00:10:54,420
of the slides while discussing at a high

331
00:10:54,420 --> 00:10:56,519
level the steps we take to implement UC

332
00:10:56,519 --> 00:10:58,680
security as we add them to the protocol

333
00:10:58,680 --> 00:11:00,420
so I'll start by considering considering

334
00:11:00,420 --> 00:11:03,360
the malicious receiver case

335
00:11:03,360 --> 00:11:05,459
as I just discussed

336
00:11:05,459 --> 00:11:07,560
we add the extractability necessary to

337
00:11:07,560 --> 00:11:09,480
provide simulation-based security by

338
00:11:09,480 --> 00:11:10,920
having the receiver commit to their

339
00:11:10,920 --> 00:11:13,140
input X and send it to the sender in the

340
00:11:13,140 --> 00:11:14,579
first round along with their internal

341
00:11:14,579 --> 00:11:16,019
risk message

342
00:11:16,019 --> 00:11:18,360
of course with that we need to guarantee

343
00:11:18,360 --> 00:11:20,100
that a malicious receiver commits to the

344
00:11:20,100 --> 00:11:22,740
same x-lay input to the underlying disk

345
00:11:22,740 --> 00:11:25,200
and so we add functionality to the nist

346
00:11:25,200 --> 00:11:26,700
to implement what can be thought of as

347
00:11:26,700 --> 00:11:28,980
interactive witness encryption so the

348
00:11:28,980 --> 00:11:30,540
receiver provides the randomness that

349
00:11:30,540 --> 00:11:32,880
they use to commit to X the sender

350
00:11:32,880 --> 00:11:34,260
provides the commitment they received

351
00:11:34,260 --> 00:11:36,540
from the receiver and then this verifies

352
00:11:36,540 --> 00:11:38,160
that the commitment is valid and rejects

353
00:11:38,160 --> 00:11:40,260
if not so this ensures that a malicious

354
00:11:40,260 --> 00:11:42,060
receiver can't receive the output from

355
00:11:42,060 --> 00:11:44,160
the functionality unless they sent a

356
00:11:44,160 --> 00:11:45,720
valid commitment to the sender in the

357
00:11:45,720 --> 00:11:47,399
first round

358
00:11:47,399 --> 00:11:49,740
well we now have extractability for the

359
00:11:49,740 --> 00:11:51,600
receiver's input there's another issue

360
00:11:51,600 --> 00:11:53,399
which is that the simulator in this case

361
00:11:53,399 --> 00:11:55,079
needs to be able to simulate the

362
00:11:55,079 --> 00:11:57,240
sender's message in the interaction to

363
00:11:57,240 --> 00:11:59,399
send it back to the corrupted receiver

364
00:11:59,399 --> 00:12:01,440
and what's more looking ahead to the

365
00:12:01,440 --> 00:12:03,480
corrupted sender case we'll also need a

366
00:12:03,480 --> 00:12:04,920
way to verify the correctness of the

367
00:12:04,920 --> 00:12:06,420
sender's input and to do that without

368
00:12:06,420 --> 00:12:08,339
requiring an additional round will

369
00:12:08,339 --> 00:12:10,200
require a super polynomial Time

370
00:12:10,200 --> 00:12:12,839
simulatable Zero knowledge argument to

371
00:12:12,839 --> 00:12:14,579
verify their descenders this message is

372
00:12:14,579 --> 00:12:16,500
generated properly with respect to some

373
00:12:16,500 --> 00:12:18,180
private witness which in this case is

374
00:12:18,180 --> 00:12:20,519
the input Y and the randomness Ascender

375
00:12:20,519 --> 00:12:23,640
uses this this will also need to be

376
00:12:23,640 --> 00:12:25,440
simulated in the corrupted receiver case

377
00:12:25,440 --> 00:12:28,019
which is why I'm bringing that up now

378
00:12:28,019 --> 00:12:30,480
and this is in fact non-trivial because

379
00:12:30,480 --> 00:12:32,279
the simulator doesn't know the sender's

380
00:12:32,279 --> 00:12:34,320
input y only the result output by the

381
00:12:34,320 --> 00:12:36,060
ideal functionality

382
00:12:36,060 --> 00:12:38,339
so in order to simulate both in this

383
00:12:38,339 --> 00:12:40,140
message and the zero knowledge argument

384
00:12:40,140 --> 00:12:42,660
independently of the sender's input

385
00:12:42,660 --> 00:12:44,279
what we'll do is We'll add a second

386
00:12:44,279 --> 00:12:46,320
track to the functionality of both the

387
00:12:46,320 --> 00:12:48,480
nisk and the zero knowledge argument so

388
00:12:48,480 --> 00:12:50,339
the receiver will now generate a random

389
00:12:50,339 --> 00:12:52,620
trapdoor T and commit to it alongside

390
00:12:52,620 --> 00:12:55,440
its input X and it'll verify it within

391
00:12:55,440 --> 00:12:58,459
the internal disk similarly to X

392
00:12:58,459 --> 00:13:01,139
the sender now has the option to input

393
00:13:01,139 --> 00:13:03,000
the trapdoor into the nisk as well as

394
00:13:03,000 --> 00:13:04,500
proving in zero knowledge that they did

395
00:13:04,500 --> 00:13:06,959
so rather than providing their input y

396
00:13:06,959 --> 00:13:09,060
and if I choose to do so if I choose the

397
00:13:09,060 --> 00:13:10,740
second track and provide the correct

398
00:13:10,740 --> 00:13:13,260
trapdoor they can input an additional

399
00:13:13,260 --> 00:13:16,019
value Z and program the output of the

400
00:13:16,019 --> 00:13:18,180
nisk by fixing it to Z

401
00:13:18,180 --> 00:13:20,160
so what does this accomplish for us well

402
00:13:20,160 --> 00:13:21,839
in the real execution of the protocol if

403
00:13:21,839 --> 00:13:23,339
an honest sender this doesn't make a

404
00:13:23,339 --> 00:13:24,720
difference the sender will just input Y

405
00:13:24,720 --> 00:13:26,519
into the nisk and a zero knowledge

406
00:13:26,519 --> 00:13:28,260
argument like they did before and

407
00:13:28,260 --> 00:13:30,779
complete the execution that way but now

408
00:13:30,779 --> 00:13:32,700
in our idealized interaction with the

409
00:13:32,700 --> 00:13:34,860
simulator and a malicious receiver the

410
00:13:34,860 --> 00:13:36,899
simulator can use the helper H to

411
00:13:36,899 --> 00:13:38,519
extract the trapdoor T from the

412
00:13:38,519 --> 00:13:40,380
receiver's message

413
00:13:40,380 --> 00:13:42,660
use the trapdoor instead of Y which they

414
00:13:42,660 --> 00:13:44,459
don't know to completely misconzer a

415
00:13:44,459 --> 00:13:45,600
knowledge argument

416
00:13:45,600 --> 00:13:47,700
and program the output of an isk to

417
00:13:47,700 --> 00:13:49,139
whatever is returned from the ideal

418
00:13:49,139 --> 00:13:50,459
functionality to complete the

419
00:13:50,459 --> 00:13:52,939
interaction

420
00:13:53,279 --> 00:13:54,899
that completes the case of a corrupted

421
00:13:54,899 --> 00:13:57,060
receiver in fact we're almost done with

422
00:13:57,060 --> 00:13:58,860
the corrupted sender case as well since

423
00:13:58,860 --> 00:14:00,480
we already added a zero knowledge

424
00:14:00,480 --> 00:14:02,700
argument to verify the sender's message

425
00:14:02,700 --> 00:14:04,800
there's one thing that remains which is

426
00:14:04,800 --> 00:14:06,779
to provide a commitment to the sender's

427
00:14:06,779 --> 00:14:08,700
input y so that we get the same

428
00:14:08,700 --> 00:14:10,440
extractability property as we added

429
00:14:10,440 --> 00:14:12,959
earlier for the receiver's input X

430
00:14:12,959 --> 00:14:15,660
and to do this we augment the zero

431
00:14:15,660 --> 00:14:17,399
knowledge argument by adding commitments

432
00:14:17,399 --> 00:14:19,079
to the respective Witnesses for each

433
00:14:19,079 --> 00:14:21,240
track and We additionally prove that

434
00:14:21,240 --> 00:14:22,920
those commitments are valid

435
00:14:22,920 --> 00:14:25,260
this serves a double purpose so first of

436
00:14:25,260 --> 00:14:26,959
all like we like I was just discussing

437
00:14:26,959 --> 00:14:29,880
this adds extractability for descenders

438
00:14:29,880 --> 00:14:32,579
input y in the corrupted sender case and

439
00:14:32,579 --> 00:14:35,100
what's more it adds an argument of

440
00:14:35,100 --> 00:14:36,899
knowledge property to the zero knowledge

441
00:14:36,899 --> 00:14:38,639
argument where the sender intuitively

442
00:14:38,639 --> 00:14:40,199
proves not only that their witness

443
00:14:40,199 --> 00:14:42,420
exists but also that they know it so

444
00:14:42,420 --> 00:14:43,980
what we get out of this is ensuring that

445
00:14:43,980 --> 00:14:45,540
the corrupted sender can't provide a

446
00:14:45,540 --> 00:14:47,220
valid witness to the second track of the

447
00:14:47,220 --> 00:14:49,079
functionality without having actually

448
00:14:49,079 --> 00:14:51,899
recovered the correct trapped or T and

449
00:14:51,899 --> 00:14:53,699
broken the CCA security of the

450
00:14:53,699 --> 00:14:55,620
commitments team since in this case the

451
00:14:55,620 --> 00:14:57,060
Trap where T was committed to by an

452
00:14:57,060 --> 00:14:58,740
honest party

453
00:14:58,740 --> 00:15:00,480
so actually at this point we now have

454
00:15:00,480 --> 00:15:02,639
the finished protocol and to recap and

455
00:15:02,639 --> 00:15:04,800
illustrate I'll briefly go over how we

456
00:15:04,800 --> 00:15:06,660
construct Constructor simulators for the

457
00:15:06,660 --> 00:15:09,120
proof of security

458
00:15:09,120 --> 00:15:11,100
so first recologists or simulator is

459
00:15:11,100 --> 00:15:12,959
restricted to helper aided polynomial

460
00:15:12,959 --> 00:15:14,519
time we'll have to avoid using the

461
00:15:14,519 --> 00:15:16,199
simulators for the underlying disk and

462
00:15:16,199 --> 00:15:17,519
zero knowledge argument because they

463
00:15:17,519 --> 00:15:19,380
specifically require super polynomial

464
00:15:19,380 --> 00:15:20,279
time

465
00:15:20,279 --> 00:15:22,260
instead we need to rely on the

466
00:15:22,260 --> 00:15:25,320
decommitment helper H to provide the

467
00:15:25,320 --> 00:15:27,420
extractability property so in the

468
00:15:27,420 --> 00:15:28,980
correct in the corrupted receiver case

469
00:15:28,980 --> 00:15:30,839
the simulator will Begin by receiving

470
00:15:30,839 --> 00:15:33,120
the first message from the adversary

471
00:15:33,120 --> 00:15:35,160
and it will use this helper

472
00:15:35,160 --> 00:15:37,560
functionality to decommit the

473
00:15:37,560 --> 00:15:39,540
commitments to x and t and retrieve the

474
00:15:39,540 --> 00:15:41,940
input X in chapter T and of course

475
00:15:41,940 --> 00:15:43,620
recall that if those commitments aren't

476
00:15:43,620 --> 00:15:45,720
generated properly and consistently with

477
00:15:45,720 --> 00:15:47,940
the receiver's inputs the internal list

478
00:15:47,940 --> 00:15:50,100
will just reject anyway

479
00:15:50,100 --> 00:15:52,079
so next it sends the extracted input x

480
00:15:52,079 --> 00:15:54,000
to the ideal functionality which will

481
00:15:54,000 --> 00:15:56,279
return the result Z star of f applied to

482
00:15:56,279 --> 00:15:59,639
X and the honest sender's input Y and

483
00:15:59,639 --> 00:16:00,660
then finally it'll complete the

484
00:16:00,660 --> 00:16:02,639
interaction using the second track of

485
00:16:02,639 --> 00:16:03,720
the nisk and zero knowledge

486
00:16:03,720 --> 00:16:06,300
functionality by inputting the extracted

487
00:16:06,300 --> 00:16:08,519
chapter T and hard coding the disk

488
00:16:08,519 --> 00:16:10,199
output to the result z-started I got

489
00:16:10,199 --> 00:16:12,240
back from the ideal functionality this

490
00:16:12,240 --> 00:16:13,560
ensures that the corrupted receiver

491
00:16:13,560 --> 00:16:15,420
receives a final message that opens to

492
00:16:15,420 --> 00:16:16,920
the correct output of the functionality

493
00:16:16,920 --> 00:16:19,260
while also ensuring via security of the

494
00:16:19,260 --> 00:16:20,760
nisk and zero knowledge argument that

495
00:16:20,760 --> 00:16:22,260
the adversary can't distinguish this

496
00:16:22,260 --> 00:16:24,300
final message from a message in the real

497
00:16:24,300 --> 00:16:26,160
interaction that would use the first

498
00:16:26,160 --> 00:16:27,540
track

499
00:16:27,540 --> 00:16:29,880
so in the corrupted sender case the

500
00:16:29,880 --> 00:16:31,380
simulator doesn't know the true

501
00:16:31,380 --> 00:16:34,980
receiver's input X and it it begins by

502
00:16:34,980 --> 00:16:36,779
sending a simulated first message which

503
00:16:36,779 --> 00:16:38,820
commits to a dummy value zero instead of

504
00:16:38,820 --> 00:16:40,980
X but as indistinguishable due to CCA

505
00:16:40,980 --> 00:16:43,500
security of our commitment scheme

506
00:16:43,500 --> 00:16:45,240
it then receives a response from the

507
00:16:45,240 --> 00:16:48,060
adversary and aborts of the nisker CK

508
00:16:48,060 --> 00:16:50,519
reject since the adversary is unable to

509
00:16:50,519 --> 00:16:52,320
retrieve the trapdoor T without breaking

510
00:16:52,320 --> 00:16:54,120
CCA security of the commitment scheme

511
00:16:54,120 --> 00:16:56,279
what that means is it's overwhelmingly

512
00:16:56,279 --> 00:16:57,540
likely that if it's submitted and

513
00:16:57,540 --> 00:16:59,459
accepting zero knowledge argument it

514
00:16:59,459 --> 00:17:00,959
must have used a valid witness and

515
00:17:00,959 --> 00:17:02,399
commitment to the first track which by

516
00:17:02,399 --> 00:17:04,079
definition must include an input y

517
00:17:04,079 --> 00:17:06,959
consistent with the sender's input so in

518
00:17:06,959 --> 00:17:08,760
that case the simulator will retrieve

519
00:17:08,760 --> 00:17:09,900
the commitment to the first track

520
00:17:09,900 --> 00:17:12,000
witness from the sender's message

521
00:17:12,000 --> 00:17:14,339
use the helper to receive to retrieve

522
00:17:14,339 --> 00:17:16,439
the sender's input y from that

523
00:17:16,439 --> 00:17:18,359
and in turn send it to the ideal

524
00:17:18,359 --> 00:17:20,819
functionality Which computes F and Y in

525
00:17:20,819 --> 00:17:23,160
the honest receiver's input X and

526
00:17:23,160 --> 00:17:24,959
Returns the correct result to the honest

527
00:17:24,959 --> 00:17:28,319
receiver to conclude the protocol

528
00:17:28,319 --> 00:17:29,880
so

529
00:17:29,880 --> 00:17:31,500
with my discussion of the protocol and

530
00:17:31,500 --> 00:17:33,540
simulators complete to summarize we

531
00:17:33,540 --> 00:17:35,700
present the first known round minimal or

532
00:17:35,700 --> 00:17:37,500
non-interactive two-party computation

533
00:17:37,500 --> 00:17:40,200
protocol which satisfies a strengthened

534
00:17:40,200 --> 00:17:42,059
definition of concurrent and composable

535
00:17:42,059 --> 00:17:43,140
security

536
00:17:43,140 --> 00:17:45,539
specifically it satisfies Oracle aided

537
00:17:45,539 --> 00:17:47,340
or angel-based UC security against

538
00:17:47,340 --> 00:17:50,220
malicious adversaries in the plane model

539
00:17:50,220 --> 00:17:51,900
and it's constructed based on

540
00:17:51,900 --> 00:17:54,419
stand-alone SPS secure nisk and CCA

541
00:17:54,419 --> 00:17:57,179
secure non-interactive commitments

542
00:17:57,179 --> 00:17:59,280
furthermore as as an additional result

543
00:17:59,280 --> 00:18:00,720
we showed that these assumptions are not

544
00:18:00,720 --> 00:18:03,059
only sufficient but also necessary to

545
00:18:03,059 --> 00:18:05,280
construct uc's secure nisk

546
00:18:05,280 --> 00:18:06,900
while the details of the second theorem

547
00:18:06,900 --> 00:18:08,340
were omitted from a stock due to time

548
00:18:08,340 --> 00:18:10,500
constraints we do formally present and

549
00:18:10,500 --> 00:18:12,000
prove that theorem in its respective

550
00:18:12,000 --> 00:18:13,919
Construction in the paper along with the

551
00:18:13,919 --> 00:18:15,600
details and formal proof of our main

552
00:18:15,600 --> 00:18:17,700
results and with that I'll conclude

553
00:18:17,700 --> 00:18:19,679
thanks for attending and I will take

554
00:18:19,679 --> 00:18:23,240
questions with what time we have left

555
00:18:27,020 --> 00:18:29,340
thank you Andrew do you have any

556
00:18:29,340 --> 00:18:31,440
questions from the audience here

557
00:18:31,440 --> 00:18:34,160
in the room

558
00:18:40,520 --> 00:18:42,600
okay I don't think we have questions

559
00:18:42,600 --> 00:18:44,039
from the room here and there's no

560
00:18:44,039 --> 00:18:46,080
question of Zoom chat I just had a quick

561
00:18:46,080 --> 00:18:48,299
question you mentioned that you needed

562
00:18:48,299 --> 00:18:49,440
this uh

563
00:18:49,440 --> 00:18:51,600
no interest zero knowledge functionality

564
00:18:51,600 --> 00:18:54,720
and it follows from the uh

565
00:18:54,720 --> 00:18:57,840
and I see protocol uh yes

566
00:18:57,840 --> 00:18:59,640
are you assuming that the underlying

567
00:18:59,640 --> 00:19:02,880
nisc is uh semi-owned security or uh

568
00:19:02,880 --> 00:19:04,320
malicious

569
00:19:04,320 --> 00:19:06,900
I see okay but in a standalone setting

570
00:19:06,900 --> 00:19:08,700
or uh

571
00:19:08,700 --> 00:19:11,940
yes so the underlying disc is Standalone

572
00:19:11,940 --> 00:19:13,740
maliciously super polynomial time

573
00:19:13,740 --> 00:19:15,860
simulatable secure

574
00:19:15,860 --> 00:19:18,059
the music you only needed to be

575
00:19:18,059 --> 00:19:19,559
Standalone secured and you don't need

576
00:19:19,559 --> 00:19:21,660
the music to be uh quite currently

577
00:19:21,660 --> 00:19:23,880
secure yeah it's it's just Standalone

578
00:19:23,880 --> 00:19:26,580
secure so we can implement it using

579
00:19:26,580 --> 00:19:28,620
we can we can implement it using the

580
00:19:28,620 --> 00:19:31,080
Standalone secureness that we assume for

581
00:19:31,080 --> 00:19:33,840
the basis of our Construction

582
00:19:33,840 --> 00:19:38,720
okay great thanks uh any questions uh

583
00:19:39,000 --> 00:19:41,460
okay um I think uh there's no other

584
00:19:41,460 --> 00:19:45,679
questions so uh let's thank the speaker

585
00:19:46,620 --> 00:19:48,840
thank you

586
00:19:48,840 --> 00:19:51,539
so our next talk

587
00:19:51,539 --> 00:19:53,539
is uh

588
00:19:53,539 --> 00:19:56,340
attaining guarantee output delivery

589
00:19:56,340 --> 00:19:58,919
Beyond honest majority with friends and

590
00:19:58,919 --> 00:20:03,600
foes and uh I think protect Paul might

591
00:20:03,600 --> 00:20:05,820
be giving the talk or or there might be

592
00:20:05,820 --> 00:20:09,020
some special Arrangements

593
00:20:17,460 --> 00:20:19,799
you know hey is it possible to play the

594
00:20:19,799 --> 00:20:22,639
recorded video

595
00:20:26,039 --> 00:20:28,520
hello

596
00:20:32,220 --> 00:20:34,880
thank you

597
00:20:58,380 --> 00:21:00,600
presenting our work attaining God Beyond

598
00:21:00,600 --> 00:21:02,280
honest majority with friends and forth

599
00:21:02,280 --> 00:21:06,080
this is a joint work with Aditya

600
00:21:06,140 --> 00:21:09,600
Arpita Patra and protein

601
00:21:09,600 --> 00:21:11,700
let me Begin by defining secure

602
00:21:11,700 --> 00:21:13,740
multi-party computation also known as

603
00:21:13,740 --> 00:21:14,940
MPC

604
00:21:14,940 --> 00:21:17,220
MPC allows a mutually distrusting

605
00:21:17,220 --> 00:21:20,280
parties say P1 to PN each holding a

606
00:21:20,280 --> 00:21:22,140
private input to compute a joint

607
00:21:22,140 --> 00:21:24,539
function of their inputs this distrust

608
00:21:24,539 --> 00:21:26,460
among parties is modeled as a

609
00:21:26,460 --> 00:21:28,320
centralized adversary which can corrupt

610
00:21:28,320 --> 00:21:30,960
up to T out of the end parties

611
00:21:30,960 --> 00:21:33,659
now any MPC protocol is required to

612
00:21:33,659 --> 00:21:35,179
satisfy the following properties

613
00:21:35,179 --> 00:21:37,980
correctness of the output computed

614
00:21:37,980 --> 00:21:40,559
and privacy that is nothing beyond the

615
00:21:40,559 --> 00:21:42,299
function output should be revealed to

616
00:21:42,299 --> 00:21:44,720
the adversity

617
00:21:44,720 --> 00:21:47,400
now although the classical definition of

618
00:21:47,400 --> 00:21:50,100
security for MPC does talk about what is

619
00:21:50,100 --> 00:21:52,320
revealed to the adversary it does not

620
00:21:52,320 --> 00:21:53,820
take into account the leakage of

621
00:21:53,820 --> 00:21:56,580
information towards the honest parties

622
00:21:56,580 --> 00:21:59,460
that is an adversary can actually leak

623
00:21:59,460 --> 00:22:01,620
information towards honest Parties by

624
00:22:01,620 --> 00:22:03,720
sending across its entire view to them

625
00:22:03,720 --> 00:22:05,460
and this wouldn't be considered as a

626
00:22:05,460 --> 00:22:07,380
breach of privacy

627
00:22:07,380 --> 00:22:09,600
in fact several protocols in the

628
00:22:09,600 --> 00:22:11,760
literature actually leverage the slope

629
00:22:11,760 --> 00:22:14,940
hole in the Privacy definition in order

630
00:22:14,940 --> 00:22:17,340
to achieve the strongest security of

631
00:22:17,340 --> 00:22:19,020
guaranteed output delivery or geology

632
00:22:19,020 --> 00:22:21,480
which allows the honest parties to

633
00:22:21,480 --> 00:22:23,700
receive their output irrespective of the

634
00:22:23,700 --> 00:22:25,440
adversary strategy

635
00:22:25,440 --> 00:22:28,200
the way these protocols achieve it is

636
00:22:28,200 --> 00:22:30,539
that they require all the parties to

637
00:22:30,539 --> 00:22:32,340
send their private inputs to a

638
00:22:32,340 --> 00:22:34,260
designated party which is identified to

639
00:22:34,260 --> 00:22:38,400
be honest or a trusted party treat y

640
00:22:38,400 --> 00:22:40,380
which computes the function and returns

641
00:22:40,380 --> 00:22:43,020
back the output to these parties

642
00:22:43,020 --> 00:22:46,020
now although this allows you to achieve

643
00:22:46,020 --> 00:22:49,860
got in Practical scenarios where the MPC

644
00:22:49,860 --> 00:22:52,679
protocol is deployed these parties will

645
00:22:52,679 --> 00:22:54,240
be actually servers owned by different

646
00:22:54,240 --> 00:22:57,480
companies in such a case even though the

647
00:22:57,480 --> 00:22:59,400
servers are honest leakage of

648
00:22:59,400 --> 00:23:01,620
information to each other may not be a

649
00:23:01,620 --> 00:23:04,919
feasible solution

650
00:23:04,919 --> 00:23:06,720
this is where the notion of friends and

651
00:23:06,720 --> 00:23:09,659
Force Security or Fe of security defined

652
00:23:09,659 --> 00:23:11,280
in the work of a loan at all comes into

653
00:23:11,280 --> 00:23:13,980
the picture here instead of modeling

654
00:23:13,980 --> 00:23:17,460
every party as purely honest it tries to

655
00:23:17,460 --> 00:23:20,880
model them to be at least semionist

656
00:23:20,880 --> 00:23:23,400
for this in addition to considering a

657
00:23:23,400 --> 00:23:25,559
malicious adversary which can corrupt up

658
00:23:25,559 --> 00:23:28,380
to tea of the parties it also considers

659
00:23:28,380 --> 00:23:30,480
an additional adversary which can

660
00:23:30,480 --> 00:23:32,400
corrupt up to its star of the remaining

661
00:23:32,400 --> 00:23:34,860
parties in a semi honest manner

662
00:23:34,860 --> 00:23:36,960
to capture the view leakage from an

663
00:23:36,960 --> 00:23:39,000
adversary it allows the malicious

664
00:23:39,000 --> 00:23:41,460
advisory to send its entire view to the

665
00:23:41,460 --> 00:23:44,159
semi honest one

666
00:23:44,159 --> 00:23:47,100
now the security is required to hold in

667
00:23:47,100 --> 00:23:49,380
the face of both these adversaries that

668
00:23:49,380 --> 00:23:53,220
is the private inputs of n minus C

669
00:23:53,220 --> 00:23:55,500
parties not under the control of the

670
00:23:55,500 --> 00:23:58,380
malicious adversary are required to be

671
00:23:58,380 --> 00:23:59,640
secure

672
00:23:59,640 --> 00:24:02,760
Additionally the inputs of the N minus t

673
00:24:02,760 --> 00:24:05,400
minus its star parties not under the

674
00:24:05,400 --> 00:24:07,200
control of either of these adversaries

675
00:24:07,200 --> 00:24:11,120
are also required to be private

676
00:24:11,400 --> 00:24:13,799
given that this friends and force notion

677
00:24:13,799 --> 00:24:16,140
is more practically relevant in this

678
00:24:16,140 --> 00:24:18,539
work we focus on constructing faf secure

679
00:24:18,539 --> 00:24:21,240
protocols our contribution here is

680
00:24:21,240 --> 00:24:24,000
twofold on the theoretical side we prove

681
00:24:24,000 --> 00:24:26,100
the necessity of oblivious transfer OT

682
00:24:26,100 --> 00:24:28,799
for constructing a generic P comma X

683
00:24:28,799 --> 00:24:31,620
star FF secure protocol when n is lesser

684
00:24:31,620 --> 00:24:34,260
than or equal to 2K plus 28 star

685
00:24:34,260 --> 00:24:36,720
this assumes the optimal corruption

686
00:24:36,720 --> 00:24:40,500
threshold of achieving fair or geod MPC

687
00:24:40,500 --> 00:24:42,900
in the in this model when n is lesser

688
00:24:42,900 --> 00:24:45,240
than 2 t plus h Star as defined in the

689
00:24:45,240 --> 00:24:46,799
work of Elon at all

690
00:24:46,799 --> 00:24:50,580
given this we focus our attention to the

691
00:24:50,580 --> 00:24:53,159
small population in PC protocols and

692
00:24:53,159 --> 00:24:55,440
construct our protocol Quad Squad which

693
00:24:55,440 --> 00:24:57,059
is a four-party protocol which can

694
00:24:57,059 --> 00:24:59,400
tackle one malicious and one semi honest

695
00:24:59,400 --> 00:25:01,799
corruption a protocol has two variants

696
00:25:01,799 --> 00:25:04,320
Fair as well as God

697
00:25:04,320 --> 00:25:06,659
note that in the four party setting this

698
00:25:06,659 --> 00:25:09,059
is the optimal corruption threshold as

699
00:25:09,059 --> 00:25:12,480
defined in the work of a monitor

700
00:25:12,480 --> 00:25:15,179
to ensure efficiency we operate in the

701
00:25:15,179 --> 00:25:17,400
pre-processing Paradigm which consists

702
00:25:17,400 --> 00:25:20,340
of two phases an input independent but a

703
00:25:20,340 --> 00:25:22,080
function dependent reprocessing phase

704
00:25:22,080 --> 00:25:23,760
where most of the computationally

705
00:25:23,760 --> 00:25:25,860
Intensive tasks are carried on

706
00:25:25,860 --> 00:25:28,260
and an online phase which is input

707
00:25:28,260 --> 00:25:30,600
dependent

708
00:25:30,600 --> 00:25:32,640
also we construct our protocol over

709
00:25:32,640 --> 00:25:35,039
rings in order to leverage the CPU

710
00:25:35,039 --> 00:25:36,539
architecture

711
00:25:36,539 --> 00:25:38,940
finally we show the applicability of our

712
00:25:38,940 --> 00:25:41,340
protocol in the domain of privacy

713
00:25:41,340 --> 00:25:43,620
preserving machine learning PPM to show

714
00:25:43,620 --> 00:25:46,699
its practical relevance

715
00:25:47,100 --> 00:25:49,380
coming to our theoretical result the

716
00:25:49,380 --> 00:25:51,960
necessity of OT we proved this by

717
00:25:51,960 --> 00:25:54,419
reducing a t comma X star FF protocol

718
00:25:54,419 --> 00:25:58,260
say Pi f to a two-party semi honest OT

719
00:25:58,260 --> 00:26:00,360
protocol by OT

720
00:26:00,360 --> 00:26:02,460
for the sake of this presentation I'll

721
00:26:02,460 --> 00:26:05,220
assume n equal to True t plus 2 H star

722
00:26:05,220 --> 00:26:07,559
however in the paper we show this

723
00:26:07,559 --> 00:26:09,299
reduction for all n lesser than or equal

724
00:26:09,299 --> 00:26:12,179
to 2T plus 2 x star

725
00:26:12,179 --> 00:26:14,640
so consider the protocol Pi for the

726
00:26:14,640 --> 00:26:16,740
following functionality

727
00:26:16,740 --> 00:26:20,279
party P1 has input as two messages say

728
00:26:20,279 --> 00:26:21,900
m0 and M1

729
00:26:21,900 --> 00:26:24,659
and party PN has an input bit p

730
00:26:24,659 --> 00:26:26,580
the remaining parties do not have any

731
00:26:26,580 --> 00:26:28,799
input to the functionality

732
00:26:28,799 --> 00:26:31,260
the output of the functionality is as

733
00:26:31,260 --> 00:26:34,380
follows all the parties excluding PN

734
00:26:34,380 --> 00:26:37,260
receiver bot whereas the party PN

735
00:26:37,260 --> 00:26:40,260
receives message MB

736
00:26:40,260 --> 00:26:42,960
now in order to reduce this protocol to

737
00:26:42,960 --> 00:26:44,940
an OT protocol consisting of a sender

738
00:26:44,940 --> 00:26:47,700
and receiver we do the following

739
00:26:47,700 --> 00:26:50,220
the first C plus its third parties are

740
00:26:50,220 --> 00:26:51,960
emulated by the sender of the OT

741
00:26:51,960 --> 00:26:53,940
protocol say PS

742
00:26:53,940 --> 00:26:56,159
and the remaining p plus X star parties

743
00:26:56,159 --> 00:26:58,860
are emulated by the receiver PR

744
00:26:58,860 --> 00:27:01,020
note that the sender and the OT protocol

745
00:27:01,020 --> 00:27:04,380
has an input of two messages which

746
00:27:04,380 --> 00:27:06,659
corresponds to the input of P1 in the

747
00:27:06,659 --> 00:27:09,900
protocol Pi f and similarly a receiver

748
00:27:09,900 --> 00:27:12,419
in an OT protocol has an output message

749
00:27:12,419 --> 00:27:16,080
CMD an input bit B which corresponds to

750
00:27:16,080 --> 00:27:20,279
the input and output of the party PN

751
00:27:20,279 --> 00:27:23,520
now we reduce we know that whenever a

752
00:27:23,520 --> 00:27:26,220
sender is corrupt it corresponds to a

753
00:27:26,220 --> 00:27:29,220
Corruption of t plus h star parties in

754
00:27:29,220 --> 00:27:32,400
the underlying FF secure protocol

755
00:27:32,400 --> 00:27:35,580
and given that this corruption is semi

756
00:27:35,580 --> 00:27:37,440
honest since we consider a semi honest

757
00:27:37,440 --> 00:27:40,020
Roti protocol the corruption and the

758
00:27:40,020 --> 00:27:42,900
corresponding protocol Pi f is also semi

759
00:27:42,900 --> 00:27:44,220
honest for these C plus it's third

760
00:27:44,220 --> 00:27:47,460
parties and this is exactly the idea

761
00:27:47,460 --> 00:27:49,559
that we use in order to prove the

762
00:27:49,559 --> 00:27:52,820
security of the OT protocol

763
00:27:53,700 --> 00:27:55,860
moving on to our practical results

764
00:27:55,860 --> 00:27:57,900
before actually going into the

765
00:27:57,900 --> 00:28:00,960
construction of our protocol I will go

766
00:28:00,960 --> 00:28:02,820
over the communication costs and its

767
00:28:02,820 --> 00:28:07,100
comparison with the existing works

768
00:28:07,140 --> 00:28:10,380
so in the paper we have compared our

769
00:28:10,380 --> 00:28:13,559
protocol Quad Squad to the state of the

770
00:28:13,559 --> 00:28:15,419
art food party protocols in the honest

771
00:28:15,419 --> 00:28:17,100
majority as well as the dishonest

772
00:28:17,100 --> 00:28:18,900
majority setting

773
00:28:18,900 --> 00:28:21,960
and here uh we have reported the

774
00:28:21,960 --> 00:28:24,419
communication cost in terms of field or

775
00:28:24,419 --> 00:28:27,059
ring elements depending on what is the

776
00:28:27,059 --> 00:28:28,679
underlying structure that the protocols

777
00:28:28,679 --> 00:28:29,760
use

778
00:28:29,760 --> 00:28:32,100
and also the cost is reported for for a

779
00:28:32,100 --> 00:28:34,380
multiplication gate

780
00:28:34,380 --> 00:28:37,200
and we note here that our Fair as well

781
00:28:37,200 --> 00:28:39,779
as geod protocol have a comparable

782
00:28:39,779 --> 00:28:42,240
online cost to that of the state of the

783
00:28:42,240 --> 00:28:45,000
art honest majority Protocols of tetrad

784
00:28:45,000 --> 00:28:46,980
and Fantastic Four

785
00:28:46,980 --> 00:28:49,140
although the pre-processing cost in our

786
00:28:49,140 --> 00:28:51,360
case is higher this is justified by the

787
00:28:51,360 --> 00:28:52,860
necessity of OT which we've already

788
00:28:52,860 --> 00:28:54,299
proven

789
00:28:54,299 --> 00:28:57,299
and additionally our protocol also

790
00:28:57,299 --> 00:28:59,039
tackles a stronger adversary compared to

791
00:28:59,039 --> 00:29:01,799
the honest majority that is it has one

792
00:29:01,799 --> 00:29:03,360
additional semi honest corruption which

793
00:29:03,360 --> 00:29:05,940
it can handle

794
00:29:05,940 --> 00:29:09,120
on the other hand a protocol completely

795
00:29:09,120 --> 00:29:11,640
outperforms the dishonest majority

796
00:29:11,640 --> 00:29:13,919
protocol of mascot both in the

797
00:29:13,919 --> 00:29:15,419
pre-processing as well as the online

798
00:29:15,419 --> 00:29:17,820
phase while improving the security

799
00:29:17,820 --> 00:29:21,659
guarantee from abort to fair and geod

800
00:29:21,659 --> 00:29:24,059
it is also important to note here that

801
00:29:24,059 --> 00:29:27,059
we achieve Our God protocol with the

802
00:29:27,059 --> 00:29:31,520
same online cost as our Fair protocol

803
00:29:33,179 --> 00:29:35,520
moving on to the approach that we take

804
00:29:35,520 --> 00:29:37,200
in our case

805
00:29:37,200 --> 00:29:39,179
so we view the function as a circuit

806
00:29:39,179 --> 00:29:41,399
which is evaluated in a topological

807
00:29:41,399 --> 00:29:42,360
order

808
00:29:42,360 --> 00:29:45,059
now at a very high level this evaluation

809
00:29:45,059 --> 00:29:48,360
occurs in three phases input sharing the

810
00:29:48,360 --> 00:29:50,100
actual evaluation of the addition and

811
00:29:50,100 --> 00:29:51,899
multiplication Gates and output

812
00:29:51,899 --> 00:29:53,460
reconstruction

813
00:29:53,460 --> 00:29:56,460
for the sake of the stock I will be

814
00:29:56,460 --> 00:29:58,860
focusing on only the evaluation phase

815
00:29:58,860 --> 00:30:01,740
where an addition happens locally so

816
00:30:01,740 --> 00:30:02,880
we'll be focusing more on the

817
00:30:02,880 --> 00:30:05,419
multiplication

818
00:30:05,520 --> 00:30:07,620
for every sub protocol that we design

819
00:30:07,620 --> 00:30:10,200
for each of these phases we follow the

820
00:30:10,200 --> 00:30:14,220
following idea high level idea

821
00:30:14,220 --> 00:30:17,100
so either it's a protocol will complete

822
00:30:17,100 --> 00:30:18,360
successfully

823
00:30:18,360 --> 00:30:21,419
or we identify in case of a malicious

824
00:30:21,419 --> 00:30:24,000
behavior we identify a dispute pair

825
00:30:24,000 --> 00:30:26,580
which is guaranteed to include the

826
00:30:26,580 --> 00:30:28,740
malicious party

827
00:30:28,740 --> 00:30:31,440
so if we stop at this phase of dispute

828
00:30:31,440 --> 00:30:34,080
identification then what we get is a

829
00:30:34,080 --> 00:30:36,000
fair variant of our protocol

830
00:30:36,000 --> 00:30:38,640
and to improve the security guarantee to

831
00:30:38,640 --> 00:30:39,899
God

832
00:30:39,899 --> 00:30:43,200
we run a semi honest to PC amongst the

833
00:30:43,200 --> 00:30:46,200
parties outside the dispute pair

834
00:30:46,200 --> 00:30:48,179
note that since the dispute pair already

835
00:30:48,179 --> 00:30:51,299
includes the corrupt party a semi honest

836
00:30:51,299 --> 00:30:54,799
two PC protocol is sufficient

837
00:30:54,960 --> 00:30:57,720
finally in order to maintain the same

838
00:30:57,720 --> 00:31:00,120
online cost from the fare to the god

839
00:31:00,120 --> 00:31:02,880
protocol we use the segmented evaluation

840
00:31:02,880 --> 00:31:05,100
approach wherein we break down the

841
00:31:05,100 --> 00:31:07,500
entire circuit into chunks of segments

842
00:31:07,500 --> 00:31:11,179
which are evaluated sequentially

843
00:31:11,940 --> 00:31:13,320
before going to the protocol

844
00:31:13,320 --> 00:31:15,419
construction itself I'll briefly

845
00:31:15,419 --> 00:31:17,220
describe the challenges involved in

846
00:31:17,220 --> 00:31:20,100
moving from fair to geod MPC

847
00:31:20,100 --> 00:31:24,059
so consider two segments sm-1 whose

848
00:31:24,059 --> 00:31:25,860
outputs are given as inputs to the

849
00:31:25,860 --> 00:31:27,179
segment SM

850
00:31:27,179 --> 00:31:29,159
now in the case when we are running the

851
00:31:29,159 --> 00:31:32,159
four PC protocol which we have designed

852
00:31:32,159 --> 00:31:35,279
both these outputs and the inputs are in

853
00:31:35,279 --> 00:31:38,399
the four PC sharing semantics

854
00:31:38,399 --> 00:31:40,320
now consider the case when the segment

855
00:31:40,320 --> 00:31:42,779
SM minus 1 completes a successful

856
00:31:42,779 --> 00:31:44,880
evaluation and its outputs are in the

857
00:31:44,880 --> 00:31:47,460
four PC sharing semantics

858
00:31:47,460 --> 00:31:50,640
however when we now come to segment SM

859
00:31:50,640 --> 00:31:52,799
some malicious behavior is detected here

860
00:31:52,799 --> 00:31:55,740
and we end up identifying a dispute pair

861
00:31:55,740 --> 00:31:58,320
this segment has to now be rerun with

862
00:31:58,320 --> 00:32:00,120
the two PC amongst the parties outside

863
00:32:00,120 --> 00:32:03,020
the dispute pair

864
00:32:03,240 --> 00:32:05,880
so what we have now is the segment SM

865
00:32:05,880 --> 00:32:08,460
minus 1 with its output in the four pce

866
00:32:08,460 --> 00:32:10,679
sharing semantics

867
00:32:10,679 --> 00:32:12,779
and we require the segment SM to be

868
00:32:12,779 --> 00:32:15,360
redone with the inputs being in the two

869
00:32:15,360 --> 00:32:17,100
PC sharing semantics

870
00:32:17,100 --> 00:32:19,919
this requires a share conversion to be

871
00:32:19,919 --> 00:32:22,740
in between these two phases

872
00:32:22,740 --> 00:32:25,679
now in the honest majority setting such

873
00:32:25,679 --> 00:32:28,140
a shared conversion can be done in a

874
00:32:28,140 --> 00:32:30,120
non-interactive manner due to the high

875
00:32:30,120 --> 00:32:32,399
redundancy involved in the sharing

876
00:32:32,399 --> 00:32:34,620
however in our case since we are

877
00:32:34,620 --> 00:32:36,720
tackling a stronger adversity our

878
00:32:36,720 --> 00:32:39,600
sharing semantics inherently have this

879
00:32:39,600 --> 00:32:41,700
higher threshold of sharing which we

880
00:32:41,700 --> 00:32:43,980
will see in the following slides due to

881
00:32:43,980 --> 00:32:45,840
which the redundancy is lower

882
00:32:45,840 --> 00:32:48,179
this requires a share conversion to be

883
00:32:48,179 --> 00:32:50,520
actually Interactive

884
00:32:50,520 --> 00:32:52,740
so note that once we execute the segment

885
00:32:52,740 --> 00:32:55,559
SM with two PC all the following

886
00:32:55,559 --> 00:32:58,440
segments will be run only with two PC so

887
00:32:58,440 --> 00:33:00,480
the only rerun that we have done here is

888
00:33:00,480 --> 00:33:02,580
for this particular segment SM which

889
00:33:02,580 --> 00:33:04,799
allows us to retain the cost from fare

890
00:33:04,799 --> 00:33:07,799
to God protocol

891
00:33:07,799 --> 00:33:09,539
let me begin describing our protocol

892
00:33:09,539 --> 00:33:11,279
Quad Squad starting with the sharing

893
00:33:11,279 --> 00:33:12,419
semantics

894
00:33:12,419 --> 00:33:15,179
to ensure efficiency by operating over

895
00:33:15,179 --> 00:33:16,260
rings

896
00:33:16,260 --> 00:33:18,419
we rely on replicator secret sharing

897
00:33:18,419 --> 00:33:20,880
also known as RSS

898
00:33:20,880 --> 00:33:23,640
here in order to tackle the corruption

899
00:33:23,640 --> 00:33:25,860
of one malicious and one semi honest

900
00:33:25,860 --> 00:33:28,019
with the view leakage which is possible

901
00:33:28,019 --> 00:33:30,720
we consider a threshold of Corruption of

902
00:33:30,720 --> 00:33:33,299
two which leads us to 4 comma 2 RSS

903
00:33:33,299 --> 00:33:34,620
sharing

904
00:33:34,620 --> 00:33:37,200
this implies that our secret is divided

905
00:33:37,200 --> 00:33:39,720
into six components in such a way that

906
00:33:39,720 --> 00:33:41,700
every pair of parties holds a common

907
00:33:41,700 --> 00:33:44,880
component say a party P1 and P2 for

908
00:33:44,880 --> 00:33:48,539
example hold the component S12

909
00:33:48,539 --> 00:33:50,700
in contrast to the honest and dishonest

910
00:33:50,700 --> 00:33:53,340
majority setting we have a higher number

911
00:33:53,340 --> 00:33:55,679
of share components which poses a

912
00:33:55,679 --> 00:33:57,539
challenge in ensuring efficiency in our

913
00:33:57,539 --> 00:33:59,840
protocol

914
00:34:00,000 --> 00:34:01,919
instead of considering a replicated

915
00:34:01,919 --> 00:34:03,899
secret sharing of a value directly as

916
00:34:03,899 --> 00:34:06,179
described between the sharing slightly

917
00:34:06,179 --> 00:34:07,980
in order to achieve a better efficiency

918
00:34:07,980 --> 00:34:10,560
in the pre-processing paradigm and for

919
00:34:10,560 --> 00:34:13,440
this to share a value we consider two

920
00:34:13,440 --> 00:34:16,800
components of sharing one is a mask say

921
00:34:16,800 --> 00:34:18,899
alpha x which is replicated secret

922
00:34:18,899 --> 00:34:21,179
shared as described before

923
00:34:21,179 --> 00:34:23,940
in addition we consider a masked value

924
00:34:23,940 --> 00:34:25,918
which forms the second component of the

925
00:34:25,918 --> 00:34:28,918
sharing say beta X which is equal to the

926
00:34:28,918 --> 00:34:32,940
actual value X plus the mask alpha x

927
00:34:32,940 --> 00:34:36,060
now this can actually be viewed as RSS

928
00:34:36,060 --> 00:34:39,119
sharing of the value X itself as follows

929
00:34:39,119 --> 00:34:41,760
the way this helps us is that the first

930
00:34:41,760 --> 00:34:44,040
component of the sharing alpha x can be

931
00:34:44,040 --> 00:34:46,099
computed during the pre-processing phase

932
00:34:46,099 --> 00:34:49,440
whereas the second component beta X can

933
00:34:49,440 --> 00:34:50,879
be made available during the online

934
00:34:50,879 --> 00:34:52,679
phase

935
00:34:52,679 --> 00:34:55,260
as mentioned I won't be describing the

936
00:34:55,260 --> 00:34:56,520
input sharing in the output

937
00:34:56,520 --> 00:34:58,560
reconstruction phase instead I'll

938
00:34:58,560 --> 00:34:59,940
directly go to the multiplication

939
00:34:59,940 --> 00:35:02,040
protocol in our case

940
00:35:02,040 --> 00:35:04,560
so consider a multiplication gate with

941
00:35:04,560 --> 00:35:06,960
inputs X and Y and output Z

942
00:35:06,960 --> 00:35:08,760
now the goal of a multiplication

943
00:35:08,760 --> 00:35:10,500
protocol is the following

944
00:35:10,500 --> 00:35:13,020
the sharing of the input wires X and Y

945
00:35:13,020 --> 00:35:15,119
which consists of the two components I

946
00:35:15,119 --> 00:35:16,500
described before

947
00:35:16,500 --> 00:35:18,540
the goal is to compute the sharing of

948
00:35:18,540 --> 00:35:20,760
the output virus is it

949
00:35:20,760 --> 00:35:23,040
Now using known techniques in the

950
00:35:23,040 --> 00:35:26,400
literature it is already known that this

951
00:35:26,400 --> 00:35:28,800
can be reduced to a reconstruction of

952
00:35:28,800 --> 00:35:31,619
one element which is beta Z in our case

953
00:35:31,619 --> 00:35:34,560
in the online phase

954
00:35:34,560 --> 00:35:36,780
and a computation of the multiplication

955
00:35:36,780 --> 00:35:39,359
triple which corresponds to alpha x

956
00:35:39,359 --> 00:35:41,760
alpha y and alpha x times alpha y in our

957
00:35:41,760 --> 00:35:44,579
case in the pre-processing phase so this

958
00:35:44,579 --> 00:35:46,200
is exactly what we do in our protocol

959
00:35:46,200 --> 00:35:49,380
and I'll detail these reconstruction and

960
00:35:49,380 --> 00:35:51,060
the triple generation and the subsequent

961
00:35:51,060 --> 00:35:53,160
slides

962
00:35:53,160 --> 00:35:55,980
coming to the restruction protocol

963
00:35:55,980 --> 00:35:58,320
we see that in the sharing of any value

964
00:35:58,320 --> 00:36:02,880
say Z for example any party misses three

965
00:36:02,880 --> 00:36:05,579
components of the sharing of the mask

966
00:36:05,579 --> 00:36:08,280
that is Alpha Z in this case for example

967
00:36:08,280 --> 00:36:11,400
consider party P1 it misses the shares

968
00:36:11,400 --> 00:36:15,839
Alpha Z 2 3 Alpha Z24 and Alpha z34 now

969
00:36:15,839 --> 00:36:17,820
each of these components is actually

970
00:36:17,820 --> 00:36:19,920
heard by two other parties

971
00:36:19,920 --> 00:36:23,160
for example Alpha z23 is held by part P2

972
00:36:23,160 --> 00:36:24,240
and P3

973
00:36:24,240 --> 00:36:27,060
however requiring the parties to Simply

974
00:36:27,060 --> 00:36:29,339
send across this value to P1 does not

975
00:36:29,339 --> 00:36:30,599
suffice

976
00:36:30,599 --> 00:36:32,339
consider the case when one of these

977
00:36:32,339 --> 00:36:34,380
parties is medicious it can send an

978
00:36:34,380 --> 00:36:36,960
incorrect value to P1 and P1 wouldn't be

979
00:36:36,960 --> 00:36:38,820
able to identify the correct value out

980
00:36:38,820 --> 00:36:40,380
of these two

981
00:36:40,380 --> 00:36:43,800
for this we use a primitive called as

982
00:36:43,800 --> 00:36:45,480
the joint message passing or jump

983
00:36:45,480 --> 00:36:47,579
primitive defined in the work of Cote

984
00:36:47,579 --> 00:36:50,520
atol this primitive allows

985
00:36:50,520 --> 00:36:53,460
two parties holding a common message to

986
00:36:53,460 --> 00:36:55,680
send the message to one or two other

987
00:36:55,680 --> 00:36:58,500
parties in such a way that either the

988
00:36:58,500 --> 00:37:00,180
send is successful and the parties

989
00:37:00,180 --> 00:37:03,060
receive the common message or a dispute

990
00:37:03,060 --> 00:37:05,400
pair is identified

991
00:37:05,400 --> 00:37:07,079
so the way we approach our

992
00:37:07,079 --> 00:37:09,599
reconstruction is US following every

993
00:37:09,599 --> 00:37:11,940
pair of parties holding the component

994
00:37:11,940 --> 00:37:15,720
which is uh Missing for party P1 sends

995
00:37:15,720 --> 00:37:18,180
it across to P1 using the joint message

996
00:37:18,180 --> 00:37:20,520
passing or jump primitive

997
00:37:20,520 --> 00:37:22,800
now the communication cost in this case

998
00:37:22,800 --> 00:37:26,040
for a jump primitive is one Element if

999
00:37:26,040 --> 00:37:27,540
you're trying to reconstruct a single

1000
00:37:27,540 --> 00:37:28,680
party

1001
00:37:28,680 --> 00:37:32,099
so reconstruction towards one party in

1002
00:37:32,099 --> 00:37:33,720
the following manner would require three

1003
00:37:33,720 --> 00:37:36,000
elements of communication

1004
00:37:36,000 --> 00:37:38,160
which corresponds to 12 elements of

1005
00:37:38,160 --> 00:37:39,420
communication when you are trying to

1006
00:37:39,420 --> 00:37:41,280
reconstruct the beta set towards every

1007
00:37:41,280 --> 00:37:43,380
party

1008
00:37:43,380 --> 00:37:46,859
so given this uh we reduce our

1009
00:37:46,859 --> 00:37:49,260
communication cost for multiplication

1010
00:37:49,260 --> 00:37:51,720
which indeed in turn requires this

1011
00:37:51,720 --> 00:37:54,839
Reconstruction from 12 elements to Seven

1012
00:37:54,839 --> 00:37:58,560
Elements using some optimization which

1013
00:37:58,560 --> 00:38:02,579
requires three rounds in total

1014
00:38:02,579 --> 00:38:04,619
moving on to the multiplication triple

1015
00:38:04,619 --> 00:38:05,579
generation

1016
00:38:05,579 --> 00:38:07,740
note here that we are trying to compute

1017
00:38:07,740 --> 00:38:09,660
the sharing of alpha x times alpha y

1018
00:38:09,660 --> 00:38:13,260
given the sharing of alpha x and alpha y

1019
00:38:13,260 --> 00:38:16,320
we note that writing alpha x alpha y in

1020
00:38:16,320 --> 00:38:18,540
terms of the shares of alpha x and alpha

1021
00:38:18,540 --> 00:38:21,540
y results in 36 summons

1022
00:38:21,540 --> 00:38:23,940
we categorize these 36 summons into

1023
00:38:23,940 --> 00:38:25,740
three types based on the number of

1024
00:38:25,740 --> 00:38:27,780
parties which can compute them locally

1025
00:38:27,780 --> 00:38:30,839
for example we have Summons of type S2

1026
00:38:30,839 --> 00:38:32,760
which can be computed by two parties

1027
00:38:32,760 --> 00:38:35,520
locally Summons of type S1 which can be

1028
00:38:35,520 --> 00:38:37,859
computed by a single party locally and

1029
00:38:37,859 --> 00:38:40,200
Summons of Type S 0 which cannot be

1030
00:38:40,200 --> 00:38:42,480
computed by any party locally

1031
00:38:42,480 --> 00:38:46,680
for Summons of type SEO we use OTS in

1032
00:38:46,680 --> 00:38:48,839
order to perform this computation

1033
00:38:48,839 --> 00:38:52,260
for Summons of type S2 parties compute

1034
00:38:52,260 --> 00:38:54,359
two parties compute these values locally

1035
00:38:54,359 --> 00:38:57,180
and complete the sharing

1036
00:38:57,180 --> 00:39:01,140
for Summons of type S1 we note that six

1037
00:39:01,140 --> 00:39:03,599
summons each can be computed by one

1038
00:39:03,599 --> 00:39:07,020
party so we make this party compute the

1039
00:39:07,020 --> 00:39:09,599
sharing of these summons and finally

1040
00:39:09,599 --> 00:39:11,339
give a zero knowledge proof that they

1041
00:39:11,339 --> 00:39:12,900
have indeed done this computation in a

1042
00:39:12,900 --> 00:39:14,160
correct manner

1043
00:39:14,160 --> 00:39:16,560
so this summarizes the two components of

1044
00:39:16,560 --> 00:39:19,380
our multiplication

1045
00:39:19,380 --> 00:39:21,240
summarizing the cost of our protocol

1046
00:39:21,240 --> 00:39:23,400
again we see that the online

1047
00:39:23,400 --> 00:39:26,339
communication of seven elements actually

1048
00:39:26,339 --> 00:39:28,140
corresponds to the several Elementary

1049
00:39:28,140 --> 00:39:31,020
construction which I just described

1050
00:39:31,020 --> 00:39:33,240
which happens in three rounds

1051
00:39:33,240 --> 00:39:35,880
and the retaining the cost from fair to

1052
00:39:35,880 --> 00:39:38,460
God protocol for the online case comes

1053
00:39:38,460 --> 00:39:41,579
from the segmented evaluation approach

1054
00:39:41,579 --> 00:39:44,460
finally coming to the ppml benchmarks we

1055
00:39:44,460 --> 00:39:45,660
have benchmarked the neural network

1056
00:39:45,660 --> 00:39:48,060
inference task over the in this data set

1057
00:39:48,060 --> 00:39:50,579
by instantiating servers across

1058
00:39:50,579 --> 00:39:52,380
different continents using Google Cloud

1059
00:39:52,380 --> 00:39:53,640
platform

1060
00:39:53,640 --> 00:39:55,619
now we know that although the total

1061
00:39:55,619 --> 00:39:58,260
communication cost of a protocol the

1062
00:39:58,260 --> 00:40:00,240
fare as well as the god variant is

1063
00:40:00,240 --> 00:40:02,520
comparatively higher than that of the

1064
00:40:02,520 --> 00:40:04,980
honest majority protocols the online

1065
00:40:04,980 --> 00:40:07,800
communication cost is indeed comparable

1066
00:40:07,800 --> 00:40:10,200
given that a protocol tackles a stronger

1067
00:40:10,200 --> 00:40:12,300
adversely a model which is practically

1068
00:40:12,300 --> 00:40:14,760
relevant it becomes a very much feasible

1069
00:40:14,760 --> 00:40:17,520
option to be used in practice

1070
00:40:17,520 --> 00:40:19,380
the code for our protocol is available

1071
00:40:19,380 --> 00:40:21,960
publicly at the link provided

1072
00:40:21,960 --> 00:40:24,240
thank you

1073
00:40:24,240 --> 00:40:27,599
hello everyone my name is I'm going to

1074
00:40:27,599 --> 00:40:29,880
introduce our paper in is equipped

1075
00:40:29,880 --> 00:40:32,119
through

1076
00:40:33,060 --> 00:40:35,900
foreign

1077
00:40:44,660 --> 00:40:47,460
talk so and I think the speaker's not in

1078
00:40:47,460 --> 00:40:48,780
the zoom rooms

1079
00:40:48,780 --> 00:40:51,480
but other questions for uh one of the

1080
00:40:51,480 --> 00:40:54,440
co-authors for the paper

1081
00:40:56,280 --> 00:40:57,420
um

1082
00:40:57,420 --> 00:40:58,920
all right I guess we should thank them

1083
00:40:58,920 --> 00:41:01,500
for the free record the talk uh maybe we

1084
00:41:01,500 --> 00:41:06,300
can move on to our next speaker then

1085
00:41:06,300 --> 00:41:09,660
okay um all right so our final talk for

1086
00:41:09,660 --> 00:41:12,720
the session is uh towards practical

1087
00:41:12,720 --> 00:41:16,819
topology hiding competition by social

1088
00:41:34,140 --> 00:41:37,879
oh oh all right

1089
00:41:38,160 --> 00:41:40,079
uh

1090
00:41:40,079 --> 00:41:43,220
okay over here my PPT

1091
00:41:43,220 --> 00:41:46,578
my PPT

1092
00:41:59,339 --> 00:42:02,359
oh hello everyone

1093
00:42:02,400 --> 00:42:05,180
can hear me

1094
00:42:11,400 --> 00:42:13,380
yes we can hear you

1095
00:42:13,380 --> 00:42:16,160
okay

1096
00:42:16,200 --> 00:42:19,879
I'm sorry I'm I'm

1097
00:42:33,720 --> 00:42:37,578
okay can you say my activity

1098
00:42:45,359 --> 00:42:47,220
okay hello everyone

1099
00:42:47,220 --> 00:42:49,920
my name is Ashley I'm going to introduce

1100
00:42:49,920 --> 00:42:54,180
our paper in excuse 2022 the title of

1101
00:42:54,180 --> 00:42:56,400
our paper is towards practical the body

1102
00:42:56,400 --> 00:42:58,280
hiding computation

1103
00:42:58,280 --> 00:43:00,900
secure multi-party computation allows

1104
00:43:00,900 --> 00:43:03,599
and parties to through securely compute

1105
00:43:03,599 --> 00:43:05,760
the same function without leaking

1106
00:43:05,760 --> 00:43:08,339
additional information about the inputs

1107
00:43:08,339 --> 00:43:10,980
classical MPS assumes that other two

1108
00:43:10,980 --> 00:43:14,520
parties can communicate directly

1109
00:43:14,520 --> 00:43:16,800
namely the communication graph is

1110
00:43:16,800 --> 00:43:17,940
complete

1111
00:43:17,940 --> 00:43:19,740
so what are you for the communication

1112
00:43:19,740 --> 00:43:23,700
graph is incomplete and even sensitive

1113
00:43:23,700 --> 00:43:26,940
moral Outlet chosen formulas the concept

1114
00:43:26,940 --> 00:43:29,339
of the body hiding computation

1115
00:43:29,339 --> 00:43:32,280
informally speaking a THC protocol is a

1116
00:43:32,280 --> 00:43:35,160
MPC protocol over in computer graph

1117
00:43:35,160 --> 00:43:37,619
which doesn't leak any information about

1118
00:43:37,619 --> 00:43:40,380
the communication graph

1119
00:43:40,380 --> 00:43:42,599
in the settings that others remove

1120
00:43:42,599 --> 00:43:45,060
statically passively corrupt any number

1121
00:43:45,060 --> 00:43:46,260
of parties

1122
00:43:46,260 --> 00:43:48,960
THC has been shown to be feasible on any

1123
00:43:48,960 --> 00:43:51,260
graph

1124
00:43:52,579 --> 00:43:56,099
is visible over General graft this

1125
00:43:56,099 --> 00:43:58,020
impressed that any function can be

1126
00:43:58,020 --> 00:44:01,319
supported highly computed or any graph

1127
00:44:01,319 --> 00:44:04,319
the reason is that if if there exists

1128
00:44:04,319 --> 00:44:06,839
that body hiding broadcaster for some

1129
00:44:06,839 --> 00:44:07,920
graph class

1130
00:44:07,920 --> 00:44:11,400
and a pke scheme then THC exists for the

1131
00:44:11,400 --> 00:44:13,319
same graph class

1132
00:44:13,319 --> 00:44:16,140
we know that MPC Computing any function

1133
00:44:16,140 --> 00:44:19,500
exists to construct a THC protocol for

1134
00:44:19,500 --> 00:44:22,440
computing some function f we just use

1135
00:44:22,440 --> 00:44:24,839
THB and pke to simulate the

1136
00:44:24,839 --> 00:44:27,720
pointer-to-point channels in MPC

1137
00:44:27,720 --> 00:44:30,480
protocol Computing effort uh some of the

1138
00:44:30,480 --> 00:44:33,480
API wants to send the X to PG need to do

1139
00:44:33,480 --> 00:44:34,859
the followings

1140
00:44:34,859 --> 00:44:38,640
firstly PJ uses tgb to broadcast its

1141
00:44:38,640 --> 00:44:42,079
public key then Pi encrypts the message

1142
00:44:42,079 --> 00:44:45,839
using the public key of PG and then uses

1143
00:44:45,839 --> 00:44:48,420
chb to broadcast the resulting server

1144
00:44:48,420 --> 00:44:49,260
text

1145
00:44:49,260 --> 00:44:50,400
finally

1146
00:44:50,400 --> 00:44:53,520
PG can decrypt this the let's save the

1147
00:44:53,520 --> 00:44:56,760
server text to get X other parties know

1148
00:44:56,760 --> 00:44:58,920
nothing about X because they do not know

1149
00:44:58,920 --> 00:45:01,140
the decoration key

1150
00:45:01,140 --> 00:45:04,140
foreign

1151
00:45:08,819 --> 00:45:12,240
with pkcr one can add or delete a public

1152
00:45:12,240 --> 00:45:15,060
public key layer to or from or save a

1153
00:45:15,060 --> 00:45:15,900
text

1154
00:45:15,900 --> 00:45:19,560
namely with PK and I inclusion of X and

1155
00:45:19,560 --> 00:45:23,579
key one can generate an increase of X

1156
00:45:23,579 --> 00:45:26,160
and the key terms P key and the

1157
00:45:26,160 --> 00:45:28,740
increasing of X and the K times the

1158
00:45:28,740 --> 00:45:32,160
inverse of PK in some of our protocols

1159
00:45:32,160 --> 00:45:34,680
which require the pkcr to be linearly

1160
00:45:34,680 --> 00:45:37,260
homomorphic Reserve to the paper for

1161
00:45:37,260 --> 00:45:39,240
more details

1162
00:45:39,240 --> 00:45:41,819
although the trsa has been shown to be

1163
00:45:41,819 --> 00:45:44,460
feasible existing TLC Protocols are not

1164
00:45:44,460 --> 00:45:47,520
practical in this paper our goal is to

1165
00:45:47,520 --> 00:45:50,339
improve the event senses of several

1166
00:45:50,339 --> 00:45:52,920
exciting PLC protocols on circles and

1167
00:45:52,920 --> 00:45:55,220
general graphs

1168
00:45:55,220 --> 00:45:58,020
firstly we consider the broadcaster

1169
00:45:58,020 --> 00:46:01,920
functionality the am protocol the am and

1170
00:46:01,920 --> 00:46:04,920
Alm Protocols are the threat of the art

1171
00:46:04,920 --> 00:46:07,980
tgb protocols on circles and general

1172
00:46:07,980 --> 00:46:11,099
graph graphs respectively

1173
00:46:11,099 --> 00:46:13,260
they are designed for broadcasting or

1174
00:46:13,260 --> 00:46:15,900
single bit and built by first presenting

1175
00:46:15,900 --> 00:46:19,140
of the body hiding or protocol and then

1176
00:46:19,140 --> 00:46:20,700
letting the broadcaster take the

1177
00:46:20,700 --> 00:46:23,339
broadcast bit as input and each other

1178
00:46:23,339 --> 00:46:26,700
party take 0 as inputs

1179
00:46:26,700 --> 00:46:29,460
the am and Alm protocols can be

1180
00:46:29,460 --> 00:46:31,680
described in the same framework

1181
00:46:31,680 --> 00:46:34,500
this framework contains two phases the

1182
00:46:34,500 --> 00:46:37,800
aggregate phase and the decrease phase

1183
00:46:37,800 --> 00:46:40,740
the aggregate fees take a tyrants T

1184
00:46:40,740 --> 00:46:44,640
equals n minus 1 am and eighth times the

1185
00:46:44,640 --> 00:46:48,420
third power of n times Kappa in Alm

1186
00:46:48,420 --> 00:46:51,300
as the first round for using party pi

1187
00:46:51,300 --> 00:46:54,900
and each of these neighbor DPI encrypts

1188
00:46:54,900 --> 00:46:57,720
is an input bit to C and the first

1189
00:46:57,720 --> 00:47:01,140
public key and since the PK and say to

1190
00:47:01,140 --> 00:47:03,859
its neighbor D at each following around

1191
00:47:03,859 --> 00:47:07,079
following around each party Pi choices a

1192
00:47:07,079 --> 00:47:09,839
permutation Sigma of the set of its

1193
00:47:09,839 --> 00:47:13,079
neighbors em uses the only non-in

1194
00:47:13,079 --> 00:47:15,960
identity permutation and Alm uses a

1195
00:47:15,960 --> 00:47:19,260
fresh random permutation then for each

1196
00:47:19,260 --> 00:47:23,099
subtext received from neighbor DPI as a

1197
00:47:23,099 --> 00:47:24,839
public public key layer and

1198
00:47:24,839 --> 00:47:28,020
homographically all is input bit to This

1199
00:47:28,020 --> 00:47:30,839
Server text and then since the resulting

1200
00:47:30,839 --> 00:47:34,020
ciphertext to neighbor Sigma d

1201
00:47:34,020 --> 00:47:36,599
the decrease the decrease phase also

1202
00:47:36,599 --> 00:47:38,760
takes three rounds at the end of the

1203
00:47:38,760 --> 00:47:40,859
aggregate phase each address if the

1204
00:47:40,859 --> 00:47:42,960
separate text has been all of all the

1205
00:47:42,960 --> 00:47:46,619
inputs to decrypt this several texts the

1206
00:47:46,619 --> 00:47:49,140
parties is several texts back through

1207
00:47:49,140 --> 00:47:51,599
the same work it traversed during the

1208
00:47:51,599 --> 00:47:54,359
aggregate phase and each party

1209
00:47:54,359 --> 00:47:57,960
leads its own Public public clear in the

1210
00:47:57,960 --> 00:48:00,180
reverse work

1211
00:48:00,180 --> 00:48:03,780
now with how to improve the am and Alm

1212
00:48:03,780 --> 00:48:06,500
protocols okay we are living animal

1213
00:48:06,500 --> 00:48:09,960
observed that Computing and inclusion of

1214
00:48:09,960 --> 00:48:13,740
aob from A and N Inc version of B does

1215
00:48:13,740 --> 00:48:16,200
not require any homological property of

1216
00:48:16,200 --> 00:48:17,700
pkcr

1217
00:48:17,700 --> 00:48:21,300
if a equals 1 then the com the Computing

1218
00:48:21,300 --> 00:48:24,240
party outputs ending the incubation of

1219
00:48:24,240 --> 00:48:27,599
one otherwise if the other question of B

1220
00:48:27,599 --> 00:48:30,780
our observation is that Computing all is

1221
00:48:30,780 --> 00:48:34,140
okay for broadcaster if we only consider

1222
00:48:34,140 --> 00:48:36,180
broadcaster then we let the parties

1223
00:48:36,180 --> 00:48:38,280
through the following if the Computing

1224
00:48:38,280 --> 00:48:41,160
part is the broadcaster output and

1225
00:48:41,160 --> 00:48:43,859
inclusion of 8 otherwise output the

1226
00:48:43,859 --> 00:48:46,740
engine version of B in this way the

1227
00:48:46,740 --> 00:48:48,720
broadcast value does not need to be a

1228
00:48:48,720 --> 00:48:51,420
bit namely any plain text can be

1229
00:48:51,420 --> 00:48:53,579
broadcasted

1230
00:48:53,579 --> 00:48:56,700
in the original am and Alm protocols

1231
00:48:56,700 --> 00:48:59,220
each party needs to send several text to

1232
00:48:59,220 --> 00:49:01,260
each neighbor and each round for

1233
00:49:01,260 --> 00:49:04,140
broadcasting such a single bit note that

1234
00:49:04,140 --> 00:49:06,839
a server text is Overland at least all

1235
00:49:06,839 --> 00:49:07,980
capabilities

1236
00:49:07,980 --> 00:49:10,920
with optimization if we instantiate the

1237
00:49:10,920 --> 00:49:14,160
pkcr with egg mouth scheme then we can

1238
00:49:14,160 --> 00:49:16,980
set the plain text length to capabiz and

1239
00:49:16,980 --> 00:49:19,680
the server text length to two times

1240
00:49:19,680 --> 00:49:22,380
catabits namely cover bits can be

1241
00:49:22,380 --> 00:49:24,540
broadcasted with each body sending a

1242
00:49:24,540 --> 00:49:27,000
self-text self-attacks of lens or

1243
00:49:27,000 --> 00:49:29,660
cannabis to each enable at each round

1244
00:49:29,660 --> 00:49:32,819
therefore the communication costs for

1245
00:49:32,819 --> 00:49:35,460
both the am and arm protocols for

1246
00:49:35,460 --> 00:49:38,460
broadcasting canopies are reduced by a

1247
00:49:38,460 --> 00:49:41,660
factor of all capital

1248
00:49:41,819 --> 00:49:44,220
now we consider the sum functionality

1249
00:49:44,220 --> 00:49:47,160
the only body hiding some protocol on

1250
00:49:47,160 --> 00:49:50,780
circles is compared from the am protocol

1251
00:49:50,780 --> 00:49:53,760
using additively homographic inclusion

1252
00:49:53,760 --> 00:49:56,040
or security protocol can be constructed

1253
00:49:56,040 --> 00:49:58,859
as follows firstly each party increase

1254
00:49:58,859 --> 00:50:01,680
its input and since the resulting server

1255
00:50:01,680 --> 00:50:05,040
text to P1 then pivot homomorphically

1256
00:50:05,040 --> 00:50:08,220
adds other self-tests finally the

1257
00:50:08,220 --> 00:50:11,160
party's distributedly decrypt the venous

1258
00:50:11,160 --> 00:50:13,020
effects

1259
00:50:13,020 --> 00:50:15,540
otherwise they did in our paper this

1260
00:50:15,540 --> 00:50:17,119
protocol has linear Community

1261
00:50:17,119 --> 00:50:20,520
communication cost open times database

1262
00:50:20,520 --> 00:50:23,280
you call that the body hiding listening

1263
00:50:23,280 --> 00:50:25,440
to a single bit using the am protocol

1264
00:50:25,440 --> 00:50:27,480
will cause the O and squared times

1265
00:50:27,480 --> 00:50:30,420
catabits by comparing this sum protocol

1266
00:50:30,420 --> 00:50:34,380
into a THC protocol we obtain a property

1267
00:50:34,380 --> 00:50:37,500
side in some protocol with communication

1268
00:50:37,500 --> 00:50:39,900
cost all the third power of n times

1269
00:50:39,900 --> 00:50:42,780
Capital squared bits

1270
00:50:42,780 --> 00:50:45,540
our our idea is that instead of

1271
00:50:45,540 --> 00:50:48,960
compiling Blackboard from THB we modify

1272
00:50:48,960 --> 00:50:51,540
the am protocol to build a body hiding

1273
00:50:51,540 --> 00:50:54,420
some protocol to achieve this we require

1274
00:50:54,420 --> 00:50:57,119
the parties to know the value of N and

1275
00:50:57,119 --> 00:50:59,599
the PK 0 to be additively homomorphic

1276
00:50:59,599 --> 00:51:02,819
note that the am protocol only assumes

1277
00:51:02,819 --> 00:51:05,940
that the part is not an upband and so

1278
00:51:05,940 --> 00:51:08,579
does the TGs protocol compared from the

1279
00:51:08,579 --> 00:51:11,300
am protocol

1280
00:51:11,700 --> 00:51:14,660
in the AM protocol is

1281
00:51:14,660 --> 00:51:17,339
input bit to each address if the server

1282
00:51:17,339 --> 00:51:19,740
text instead we let this party

1283
00:51:19,740 --> 00:51:22,140
homomorphically as its input value to

1284
00:51:22,140 --> 00:51:24,660
each address with several text now if

1285
00:51:24,660 --> 00:51:27,720
it's the efficiency of this ghs protocol

1286
00:51:27,720 --> 00:51:30,480
has the same asymptotic communication

1287
00:51:30,480 --> 00:51:33,599
cost either am protocol namely open

1288
00:51:33,599 --> 00:51:37,140
squared times cover bits

1289
00:51:37,140 --> 00:51:39,180
now let us consider the general

1290
00:51:39,180 --> 00:51:43,020
commutative computation functionality as

1291
00:51:43,020 --> 00:51:45,359
before the only General com the property

1292
00:51:45,359 --> 00:51:47,400
hiding computation protocol on circles

1293
00:51:47,400 --> 00:51:50,819
is compared from the am protocol which

1294
00:51:50,819 --> 00:51:52,980
is in the general computation protocol

1295
00:51:52,980 --> 00:51:55,920
based on additively secreted sharing

1296
00:51:55,920 --> 00:51:58,619
which contains three phases

1297
00:51:58,619 --> 00:52:00,900
in the import sharing with each party

1298
00:52:00,900 --> 00:52:04,140
additively shares its input which is

1299
00:52:04,140 --> 00:52:06,359
requests to send the own shares the

1300
00:52:06,359 --> 00:52:08,760
total communication cost of the input

1301
00:52:08,760 --> 00:52:11,460
sharing phase is open squared times

1302
00:52:11,460 --> 00:52:14,240
capability

1303
00:52:14,280 --> 00:52:16,680
in the circuit evaluation phase the

1304
00:52:16,680 --> 00:52:19,079
parties compute the circuit gate bucket

1305
00:52:19,079 --> 00:52:22,440
addition Gates can be computed locally

1306
00:52:22,440 --> 00:52:25,020
the parties can compute a multiplication

1307
00:52:25,020 --> 00:52:27,359
gate using linearly homomorphic

1308
00:52:27,359 --> 00:52:31,319
encryption resulting intense capabase

1309
00:52:31,319 --> 00:52:32,640
communication

1310
00:52:32,640 --> 00:52:35,339
the total communication causes of the of

1311
00:52:35,339 --> 00:52:37,740
the circuit evaluation phase is all c

1312
00:52:37,740 --> 00:52:39,960
times n times Cava bits

1313
00:52:39,960 --> 00:52:42,540
in the outputed recovery phase

1314
00:52:42,540 --> 00:52:46,140
each partition is share of 2p1 and then

1315
00:52:46,140 --> 00:52:48,480
P1 computes the sum of all the shares

1316
00:52:48,480 --> 00:52:51,359
the total communication cost of the

1317
00:52:51,359 --> 00:52:53,819
output requirement phase is o n times

1318
00:52:53,819 --> 00:52:55,200
capability

1319
00:52:55,200 --> 00:52:57,839
by comparing this MPC protocol into a

1320
00:52:57,839 --> 00:53:00,660
THC protocol we obtain a general

1321
00:53:00,660 --> 00:53:02,700
topology hiding computation protocol

1322
00:53:02,700 --> 00:53:05,520
with communication cost all the first

1323
00:53:05,520 --> 00:53:09,240
power of n times cap squared plus c

1324
00:53:09,240 --> 00:53:11,760
times the third power of n times Kappa

1325
00:53:11,760 --> 00:53:13,980
squared bits

1326
00:53:13,980 --> 00:53:16,680
now with how to share the input and

1327
00:53:16,680 --> 00:53:19,079
recall recover the output motivationally

1328
00:53:19,079 --> 00:53:21,540
using our TGs protocol

1329
00:53:21,540 --> 00:53:25,079
to share an input X the input owner Pi

1330
00:53:25,079 --> 00:53:28,260
samples a random value R and each other

1331
00:53:28,260 --> 00:53:32,460
party PD samples a random share HD

1332
00:53:32,460 --> 00:53:35,339
then the parties execute our thgs

1333
00:53:35,339 --> 00:53:39,780
protocol weap takes plus r as input and

1334
00:53:39,780 --> 00:53:42,660
each other party takes PD takes the

1335
00:53:42,660 --> 00:53:46,559
minus XG as input our parties will get

1336
00:53:46,559 --> 00:53:49,680
the output which equals X plus r minus

1337
00:53:49,680 --> 00:53:53,220
the sum of all other shares finally Pi

1338
00:53:53,220 --> 00:53:56,760
takes Z minus r as its share the total

1339
00:53:56,760 --> 00:53:59,819
communication costs of Serial n inputs

1340
00:53:59,819 --> 00:54:02,520
will be the third power of n times

1341
00:54:02,520 --> 00:54:05,640
Capital bits to recover the output the

1342
00:54:05,640 --> 00:54:09,000
parties execute our tjs protocol where

1343
00:54:09,000 --> 00:54:11,880
each party takes its share as input

1344
00:54:11,880 --> 00:54:14,700
the communication costs of recurring the

1345
00:54:14,700 --> 00:54:17,640
output will be all unscreened times cap

1346
00:54:17,640 --> 00:54:19,859
bits

1347
00:54:19,859 --> 00:54:22,380
now we consider the circuit evaluation

1348
00:54:22,380 --> 00:54:25,619
phase the key point of circuit

1349
00:54:25,619 --> 00:54:27,540
evaluation is to realize the

1350
00:54:27,540 --> 00:54:29,940
multiplication functionality

1351
00:54:29,940 --> 00:54:32,579
which receives additive settings of X

1352
00:54:32,579 --> 00:54:35,819
and Y and returns an attitude sharing of

1353
00:54:35,819 --> 00:54:37,380
x times y

1354
00:54:37,380 --> 00:54:40,319
our starting point is that a chain of x

1355
00:54:40,319 --> 00:54:42,980
times y can be computed as follows

1356
00:54:42,980 --> 00:54:46,380
firstly the part is generate a sharing

1357
00:54:46,380 --> 00:54:49,740
of a random value R then the part is X

1358
00:54:49,740 --> 00:54:52,619
execute a protocol to let all parties

1359
00:54:52,619 --> 00:54:57,240
securely get the value x times y minus r

1360
00:54:57,240 --> 00:54:59,760
finally the parties can locally compute

1361
00:54:59,760 --> 00:55:03,240
the sharing of x times y note that the

1362
00:55:03,240 --> 00:55:05,520
sharing of a random value R can be

1363
00:55:05,520 --> 00:55:08,040
generated locally by letting each party

1364
00:55:08,040 --> 00:55:10,559
sample or random value RI and the

1365
00:55:10,559 --> 00:55:13,920
setting R to be the sum of other RIS

1366
00:55:13,920 --> 00:55:17,040
the left goal is to publish the value x

1367
00:55:17,040 --> 00:55:21,119
times well minus ah

1368
00:55:21,119 --> 00:55:23,520
to achieve this we require the parties

1369
00:55:23,520 --> 00:55:26,940
to know the value and the peak 0 to be

1370
00:55:26,940 --> 00:55:29,339
linearly homomorphic to publish the

1371
00:55:29,339 --> 00:55:32,940
value x times y minus r we divide the

1372
00:55:32,940 --> 00:55:35,280
aggregate interface into two subfaces

1373
00:55:35,280 --> 00:55:38,700
where each takes n minus 1 rounds

1374
00:55:38,700 --> 00:55:41,099
in the first server phase each party

1375
00:55:41,099 --> 00:55:44,280
homomorphically adds its share of x to

1376
00:55:44,280 --> 00:55:46,559
each addressable several text

1377
00:55:46,559 --> 00:55:49,200
at the end of the first server base the

1378
00:55:49,200 --> 00:55:53,460
parties have increases of x

1379
00:55:53,460 --> 00:55:55,980
in the second surface each party Pi

1380
00:55:55,980 --> 00:55:59,720
first computes an encryption of X Times

1381
00:55:59,720 --> 00:56:04,859
Square minus RI as homomorphically at

1382
00:56:04,859 --> 00:56:07,079
least seven text to the receive the

1383
00:56:07,079 --> 00:56:08,339
server text

1384
00:56:08,339 --> 00:56:11,460
at the end of the second surface each

1385
00:56:11,460 --> 00:56:14,339
party has the increases of x times y

1386
00:56:14,339 --> 00:56:18,000
minus r finally the parties execute the

1387
00:56:18,000 --> 00:56:21,420
decrease phase as in the EM protocol the

1388
00:56:21,420 --> 00:56:23,880
event the efficiency of our topology

1389
00:56:23,880 --> 00:56:27,119
hiding multiplication protocol is O N

1390
00:56:27,119 --> 00:56:30,440
squared times capabits

1391
00:56:30,540 --> 00:56:33,839
our final result is an optimization for

1392
00:56:33,839 --> 00:56:37,020
the ldm 3T protocol of loving at all

1393
00:56:37,020 --> 00:56:40,920
this protocol is fhe based General party

1394
00:56:40,920 --> 00:56:42,839
hiding computation protocol on General

1395
00:56:42,839 --> 00:56:44,040
graphs

1396
00:56:44,040 --> 00:56:46,200
in the aggregate phase of this program

1397
00:56:46,200 --> 00:56:49,800
Circle each party Pi opens the surface

1398
00:56:49,800 --> 00:56:54,599
of its input XI and its ID IDI to each

1399
00:56:54,599 --> 00:56:57,720
addressable server text at the end of

1400
00:56:57,720 --> 00:57:00,000
the aggregate phase each party API will

1401
00:57:00,000 --> 00:57:03,540
receive three pairs of several tests the

1402
00:57:03,540 --> 00:57:06,119
corresponding print plane test can be

1403
00:57:06,119 --> 00:57:10,640
passed as inclusions of all the inputs

1404
00:57:10,880 --> 00:57:14,520
compute the given function

1405
00:57:14,520 --> 00:57:16,740
in the aggregate database of the

1406
00:57:16,740 --> 00:57:19,500
audience rating protocol each part is in

1407
00:57:19,500 --> 00:57:22,920
the several text Vector of length ot to

1408
00:57:22,920 --> 00:57:25,500
each neighbor at the T surround note

1409
00:57:25,500 --> 00:57:28,020
that the total number of rounds is all

1410
00:57:28,020 --> 00:57:31,020
the third power of n times Kappa hence

1411
00:57:31,020 --> 00:57:33,780
the name of the several texts sent by

1412
00:57:33,780 --> 00:57:36,720
the part is all the its power of n times

1413
00:57:36,720 --> 00:57:40,140
K squared during the I work interface

1414
00:57:40,140 --> 00:57:42,420
will give an optimization for the

1415
00:57:42,420 --> 00:57:44,040
aggregate phase to reduce the

1416
00:57:44,040 --> 00:57:46,759
communication

1417
00:57:47,099 --> 00:57:49,680
our idea is that in the aggregate phase

1418
00:57:49,680 --> 00:57:53,160
each partitions several text vectors of

1419
00:57:53,160 --> 00:57:55,740
lens and at each round and for the X

1420
00:57:55,740 --> 00:57:58,800
entry of the cell text vectors the

1421
00:57:58,800 --> 00:58:01,800
parties act exactly as in our optimized

1422
00:58:01,800 --> 00:58:05,700
Alm protocol with pi in the broadcaster

1423
00:58:05,700 --> 00:58:08,040
and the input of Pi beyond the broadcast

1424
00:58:08,040 --> 00:58:11,640
value this way at the end of the

1425
00:58:11,640 --> 00:58:13,980
aggregate phase the last part in each

1426
00:58:13,980 --> 00:58:16,099
work will get a server text Vector

1427
00:58:16,099 --> 00:58:19,619
continuing the increases of of all the

1428
00:58:19,619 --> 00:58:20,640
inputs

1429
00:58:20,640 --> 00:58:23,220
I'll optimize the aggregate phase only

1430
00:58:23,220 --> 00:58:26,099
requires the parties to send all the

1431
00:58:26,099 --> 00:58:29,460
sixth power of n times cap server tests

1432
00:58:29,460 --> 00:58:31,859
this is a presentation of our paper

1433
00:58:31,859 --> 00:58:35,240
thank you for listening

1434
00:58:46,260 --> 00:58:49,760
yeah audience in the room

1435
00:58:54,180 --> 00:58:56,280
oh yeah

1436
00:58:56,280 --> 00:58:57,940
sorry I had a voice

1437
00:58:57,940 --> 00:59:00,900
[Music]

1438
00:59:00,900 --> 00:59:03,500
questions

1439
00:59:53,520 --> 00:59:55,319
actually if there are no questions here

1440
00:59:55,319 --> 00:59:57,059
let's just stick all the questions

1441
00:59:57,059 --> 00:59:58,980
online and let's thank all the speakers

1442
00:59:58,980 --> 01:00:01,760
in the session

