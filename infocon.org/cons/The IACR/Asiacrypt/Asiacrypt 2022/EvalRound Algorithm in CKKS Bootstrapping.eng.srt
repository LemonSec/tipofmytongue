1
00:00:00,299 --> 00:00:03,480
my name is song Kim in this video I'm

2
00:00:03,480 --> 00:00:05,400
going to introduce the research of every

3
00:00:05,400 --> 00:00:09,799
round algorithm in cks bootstrapping

4
00:00:10,460 --> 00:00:13,679
ckks the topic of This research is a

5
00:00:13,679 --> 00:00:15,780
homographic ingredient scheme

6
00:00:15,780 --> 00:00:17,640
homophone inclusion scheme is an

7
00:00:17,640 --> 00:00:20,039
increasing scheme which supports

8
00:00:20,039 --> 00:00:21,779
computation on its cyber text without

9
00:00:21,779 --> 00:00:23,220
decrypting it

10
00:00:23,220 --> 00:00:26,039
consider a situation as follows the

11
00:00:26,039 --> 00:00:28,320
message is owned by a client and the

12
00:00:28,320 --> 00:00:30,180
computation method is provided by a

13
00:00:30,180 --> 00:00:33,180
service provider on a server how can the

14
00:00:33,180 --> 00:00:35,219
client get the result if without

15
00:00:35,219 --> 00:00:37,800
informing the message to the server

16
00:00:37,800 --> 00:00:40,160
foreign

17
00:00:40,160 --> 00:00:43,320
scheme addresses such as situation by

18
00:00:43,320 --> 00:00:45,180
supporting three operations

19
00:00:45,180 --> 00:00:48,120
increasing decryption and a message to

20
00:00:48,120 --> 00:00:50,039
evaluate their computation hormone

21
00:00:50,039 --> 00:00:52,140
frequently on the subtext given those

22
00:00:52,140 --> 00:00:54,960
the client may get the desired research

23
00:00:54,960 --> 00:00:57,600
by encrypting their message sending the

24
00:00:57,600 --> 00:01:00,360
Cyber text to the server and decrypting

25
00:01:00,360 --> 00:01:03,680
the result cyber text

26
00:01:03,680 --> 00:01:06,299
ckks is a representative hormone for

27
00:01:06,299 --> 00:01:08,040
increasing skin which is widely known

28
00:01:08,040 --> 00:01:09,840
for its ability to increase the real

29
00:01:09,840 --> 00:01:12,240
numbers and to perform approximate our

30
00:01:12,240 --> 00:01:13,740
arithmetics

31
00:01:13,740 --> 00:01:17,880
one challenge of the only ckks was that

32
00:01:17,880 --> 00:01:19,740
the adapter evaluation circuit is

33
00:01:19,740 --> 00:01:20,820
limited

34
00:01:20,820 --> 00:01:22,259
in detail

35
00:01:22,259 --> 00:01:24,780
uh ckksi protects belongs to a certain

36
00:01:24,780 --> 00:01:27,060
space called modulus and the size of

37
00:01:27,060 --> 00:01:29,759
this space diminishes for each

38
00:01:29,759 --> 00:01:31,200
multiplication

39
00:01:31,200 --> 00:01:33,119
after applying a fixed number of

40
00:01:33,119 --> 00:01:34,979
multiplication

41
00:01:34,979 --> 00:01:37,079
the Cyber test will be run out of the

42
00:01:37,079 --> 00:01:38,939
size of modulus so it could not be

43
00:01:38,939 --> 00:01:41,960
evaluated any further

44
00:01:41,960 --> 00:01:44,759
dkks bootstrapping is a technique which

45
00:01:44,759 --> 00:01:46,640
is invented to solve this problem

46
00:01:46,640 --> 00:01:48,659
bootstrapping is an operation which

47
00:01:48,659 --> 00:01:51,540
recovers the Cyber test modulus whenever

48
00:01:51,540 --> 00:01:54,420
the modulus is depleted we can

49
00:01:54,420 --> 00:01:57,600
bootstrapping the subtext and continue

50
00:01:57,600 --> 00:01:59,579
evaluating the circuit on the

51
00:01:59,579 --> 00:02:00,960
bootstrapped one

52
00:02:00,960 --> 00:02:03,659
this enables the kickass to allow

53
00:02:03,659 --> 00:02:06,960
evaluation of unlimited depths in other

54
00:02:06,960 --> 00:02:09,840
words CK can successfully becomes a

55
00:02:09,840 --> 00:02:12,900
fully homophy increasing scheme

56
00:02:12,900 --> 00:02:15,300
the problem is that this part of the

57
00:02:15,300 --> 00:02:17,160
fact that bootstrapping is an operation

58
00:02:17,160 --> 00:02:19,440
which recovers modulus it consumes

59
00:02:19,440 --> 00:02:21,599
modulus at the same time

60
00:02:21,599 --> 00:02:23,640
Bluetooth wrapping algorithm consists of

61
00:02:23,640 --> 00:02:26,520
few steps and the first step which is

62
00:02:26,520 --> 00:02:28,680
called the motor race the Cyber text

63
00:02:28,680 --> 00:02:31,739
against the original modulus already

64
00:02:31,739 --> 00:02:33,300
however

65
00:02:33,300 --> 00:02:35,819
as this cyber text does not increase the

66
00:02:35,819 --> 00:02:38,700
original message exactly the rest of the

67
00:02:38,700 --> 00:02:42,060
steps recovers the original message

68
00:02:42,060 --> 00:02:44,940
as those steps are big combinations of

69
00:02:44,940 --> 00:02:46,980
additions and multiplications

70
00:02:46,980 --> 00:02:49,739
the modulus is constant again

71
00:02:49,739 --> 00:02:52,080
therefore such modulus concession

72
00:02:52,080 --> 00:02:54,480
directly determines the available depth

73
00:02:54,480 --> 00:02:58,260
of a evaluation after bootstrapping in

74
00:02:58,260 --> 00:02:59,819
this research we are focusing on

75
00:02:59,819 --> 00:03:02,879
reducing it to maximize the efficiency

76
00:03:02,879 --> 00:03:05,879
of the bootstrapping algorithm

77
00:03:05,879 --> 00:03:08,280
the radius modulus consumption we

78
00:03:08,280 --> 00:03:10,260
suggest a new bootstrapping algorithm

79
00:03:10,260 --> 00:03:12,120
called eBay round

80
00:03:12,120 --> 00:03:14,340
even round algorithm can be constructed

81
00:03:14,340 --> 00:03:16,560
by giving two simple modifications on

82
00:03:16,560 --> 00:03:19,379
the conventional stripping algorithm the

83
00:03:19,379 --> 00:03:21,360
combustion algorithm contains four steps

84
00:03:21,360 --> 00:03:23,400
called board rates called the slot even

85
00:03:23,400 --> 00:03:25,379
mode and slot coiff

86
00:03:25,379 --> 00:03:27,599
to construct behavioral algorithm we're

87
00:03:27,599 --> 00:03:29,700
forced to modify cost to slot to its

88
00:03:29,700 --> 00:03:33,300
variant by just adjusting a parameter to

89
00:03:33,300 --> 00:03:35,519
be more specific we use lower scale

90
00:03:35,519 --> 00:03:36,540
factor

91
00:03:36,540 --> 00:03:39,840
this change make the step to consume

92
00:03:39,840 --> 00:03:41,819
much less modulus yet calculate the

93
00:03:41,819 --> 00:03:43,500
result imprecially with a

94
00:03:43,500 --> 00:03:45,540
non-nepaligible error second

95
00:03:45,540 --> 00:03:48,360
modification follows to deal with such

96
00:03:48,360 --> 00:03:52,140
error we alternate even more step to

97
00:03:52,140 --> 00:03:54,299
either round by simply performing two

98
00:03:54,299 --> 00:03:55,980
extra subtractions

99
00:03:55,980 --> 00:03:58,080
if around the step is simply to the

100
00:03:58,080 --> 00:04:01,140
original even more step but it has on

101
00:04:01,140 --> 00:04:03,360
its own Merit on being stable to the

102
00:04:03,360 --> 00:04:05,280
error

103
00:04:05,280 --> 00:04:07,500
the main motivation of the algorithm is

104
00:04:07,500 --> 00:04:09,260
follows

105
00:04:09,260 --> 00:04:11,519
eberron can be explained as the

106
00:04:11,519 --> 00:04:13,439
homorphic computation of modular

107
00:04:13,439 --> 00:04:15,659
rounding while even motor is a

108
00:04:15,659 --> 00:04:17,040
homographic computational motor

109
00:04:17,040 --> 00:04:19,500
reproduction the function of motor

110
00:04:19,500 --> 00:04:22,019
reduction and model Revenue can be drawn

111
00:04:22,019 --> 00:04:24,360
as on the figure

112
00:04:24,360 --> 00:04:26,160
as the relationship of those two

113
00:04:26,160 --> 00:04:28,560
functions distribute one can easily

114
00:04:28,560 --> 00:04:30,479
replace one another

115
00:04:30,479 --> 00:04:33,240
however we can observe that the modern

116
00:04:33,240 --> 00:04:35,880
rounding is stable to the input error or

117
00:04:35,880 --> 00:04:38,400
like motor reduction so our algorithm

118
00:04:38,400 --> 00:04:42,120
takes the advantages there so we can

119
00:04:42,120 --> 00:04:43,860
successfully reduce the modulus

120
00:04:43,860 --> 00:04:46,220
consumption

121
00:04:46,220 --> 00:04:49,380
I apply our algorithm describes so far

122
00:04:49,380 --> 00:04:52,500
we could obtain the result as shown we

123
00:04:52,500 --> 00:04:55,199
have implemented our own ckks code and

124
00:04:55,199 --> 00:04:57,000
tested the algorithm on a practical

125
00:04:57,000 --> 00:04:59,580
parameter we could reduce the modulus

126
00:04:59,580 --> 00:05:02,340
consumption by 84 bits which is some

127
00:05:02,340 --> 00:05:04,560
sufficient amount to gain one or two

128
00:05:04,560 --> 00:05:07,680
evaluation depths after bootstrapping

129
00:05:07,680 --> 00:05:10,919
this is more effective on the parameter

130
00:05:10,919 --> 00:05:13,560
which it has comparable disrupt circuits

131
00:05:13,560 --> 00:05:15,500
and thereby provides

132
00:05:15,500 --> 00:05:18,479
relatively low extra Evolution depths

133
00:05:18,479 --> 00:05:20,100
after bootstrapping

134
00:05:20,100 --> 00:05:22,020
another important point of this

135
00:05:22,020 --> 00:05:25,020
algorithm is its portability as the

136
00:05:25,020 --> 00:05:27,720
round is constructed by tweaking the

137
00:05:27,720 --> 00:05:30,240
conventional one this technique can be

138
00:05:30,240 --> 00:05:32,460
attached on every existing

139
00:05:32,460 --> 00:05:34,440
implementation of conventional

140
00:05:34,440 --> 00:05:38,400
bootstrapping with a negligible effort

141
00:05:38,400 --> 00:05:41,460
to sum up we have successfully reduced

142
00:05:41,460 --> 00:05:43,380
the modulus consumption of bootstrapping

143
00:05:43,380 --> 00:05:46,139
and improved its efficiency with a

144
00:05:46,139 --> 00:05:48,360
simple yet effective algorithm

145
00:05:48,360 --> 00:05:49,620
up

146
00:05:49,620 --> 00:05:51,600
please enter our video thank you for

147
00:05:51,600 --> 00:05:54,080
listening

