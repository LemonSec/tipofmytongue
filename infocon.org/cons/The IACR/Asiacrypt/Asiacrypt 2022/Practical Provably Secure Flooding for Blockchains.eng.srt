1
00:00:00,359 --> 00:00:03,360
hi my name is Thompson and at Asia Crypt

2
00:00:03,360 --> 00:00:05,040
I'll be presenting the work practical

3
00:00:05,040 --> 00:00:08,039
proven secure flooding for blockchains

4
00:00:08,039 --> 00:00:10,440
this is Joint work agenda Liu sang

5
00:00:10,440 --> 00:00:12,240
Christian Matt

6
00:00:12,240 --> 00:00:15,679
ulimawa and William Rito

7
00:00:17,820 --> 00:00:19,560
to motivate this work I would like to

8
00:00:19,560 --> 00:00:21,660
look at the example of blockchains

9
00:00:21,660 --> 00:00:23,580
so blockchain protocol is a protocol

10
00:00:23,580 --> 00:00:26,100
that group of parties in the act in

11
00:00:26,100 --> 00:00:30,300
order to build and extend a total order

12
00:00:30,300 --> 00:00:32,460
however it's not always guaranteed to

13
00:00:32,460 --> 00:00:35,100
this total oil will be built this is

14
00:00:35,100 --> 00:00:38,520
only guaranteed if each party owns some

15
00:00:38,520 --> 00:00:39,960
resource

16
00:00:39,960 --> 00:00:42,239
and a majority of these resources

17
00:00:42,239 --> 00:00:45,420
remains on the honest controller

18
00:00:45,420 --> 00:00:47,100
but this is not the only assumption

19
00:00:47,100 --> 00:00:49,559
needed for blockchain protocols to work

20
00:00:49,559 --> 00:00:51,600
in fact they also rely on a flooding

21
00:00:51,600 --> 00:00:52,800
Network

22
00:00:52,800 --> 00:00:54,719
so in order to build the total order

23
00:00:54,719 --> 00:00:56,760
both of these assumptions will need to

24
00:00:56,760 --> 00:00:57,899
hold

25
00:00:57,899 --> 00:00:59,520
let's have a closer look at this

26
00:00:59,520 --> 00:01:01,320
flooding Network assumption

27
00:01:01,320 --> 00:01:03,600
so flooding network is a very simple

28
00:01:03,600 --> 00:01:04,739
protocol

29
00:01:04,739 --> 00:01:08,280
where any party is allowed to input

30
00:01:08,280 --> 00:01:09,299
message

31
00:01:09,299 --> 00:01:12,119
and as a consequence all other parties

32
00:01:12,119 --> 00:01:13,799
will receive this message within some

33
00:01:13,799 --> 00:01:15,720
Delta time

34
00:01:15,720 --> 00:01:17,340
and this is the assumption that is used

35
00:01:17,340 --> 00:01:18,840
in order to prove security of

36
00:01:18,840 --> 00:01:22,939
blockchains in a wide range of work

37
00:01:24,840 --> 00:01:26,580
so let's look at how such flooding

38
00:01:26,580 --> 00:01:28,200
protocols actually implemented in

39
00:01:28,200 --> 00:01:29,640
practice

40
00:01:29,640 --> 00:01:31,380
if you want wishes to send a message

41
00:01:31,380 --> 00:01:32,880
then

42
00:01:32,880 --> 00:01:35,520
they will choose a random subset of the

43
00:01:35,520 --> 00:01:37,079
parties as their neighbor and forward

44
00:01:37,079 --> 00:01:40,020
the message only to these Neighbors

45
00:01:40,020 --> 00:01:42,000
this will continue on such as now when

46
00:01:42,000 --> 00:01:44,220
P2 p2e and P4 has received the messages

47
00:01:44,220 --> 00:01:46,680
well then they will forward the message

48
00:01:46,680 --> 00:01:49,799
to a random subset of the parties again

49
00:01:49,799 --> 00:01:52,380
this continues on onto all parties and

50
00:01:52,380 --> 00:01:54,659
received the message

51
00:01:54,659 --> 00:01:57,420
however it's not difficult to see that

52
00:01:57,420 --> 00:01:59,880
it's a large fraction of the parties are

53
00:01:59,880 --> 00:02:02,939
actually dishonest then either P1 has to

54
00:02:02,939 --> 00:02:07,020
send to really many parties or otherwise

55
00:02:07,020 --> 00:02:09,360
the protocol will not work right so in

56
00:02:09,360 --> 00:02:12,000
this case P5 and p7 will not receive the

57
00:02:12,000 --> 00:02:14,160
message

58
00:02:14,160 --> 00:02:16,200
with this in mind let's revisit our

59
00:02:16,200 --> 00:02:18,360
blockchain example from before

60
00:02:18,360 --> 00:02:20,760
we had blockchain or ultimate the total

61
00:02:20,760 --> 00:02:23,220
order relied on the majority of honest

62
00:02:23,220 --> 00:02:26,040
resources and on such flooding Network

63
00:02:26,040 --> 00:02:28,379
now if we instantiate such flooding

64
00:02:28,379 --> 00:02:30,060
network using the traditional approach

65
00:02:30,060 --> 00:02:33,120
then this in fact implies that we need

66
00:02:33,120 --> 00:02:35,099
an assumption on the number of honest

67
00:02:35,099 --> 00:02:36,239
parties

68
00:02:36,239 --> 00:02:39,420
and not only on the resources

69
00:02:39,420 --> 00:02:42,480
so it's naturally wondered that we could

70
00:02:42,480 --> 00:02:44,640
build a flooding protocol that will in

71
00:02:44,640 --> 00:02:46,739
turn build a total order only based on

72
00:02:46,739 --> 00:02:48,239
the majority of the honest resources

73
00:02:48,239 --> 00:02:50,280
behaving honesty

74
00:02:50,280 --> 00:02:52,980
so in this work we ask the patient can

75
00:02:52,980 --> 00:02:54,780
efficient flooding be realized assuming

76
00:02:54,780 --> 00:02:57,000
a constant traction around its weight

77
00:02:57,000 --> 00:03:00,599
the answers are sounding yes

78
00:03:00,599 --> 00:03:03,599
so our contributions are that we first

79
00:03:03,599 --> 00:03:06,000
provide the new floating protocol called

80
00:03:06,000 --> 00:03:07,739
weighted fan out flooding

81
00:03:07,739 --> 00:03:10,200
this has the properties that it's secure

82
00:03:10,200 --> 00:03:11,640
assuming any constant fraction of

83
00:03:11,640 --> 00:03:13,680
resources being honest

84
00:03:13,680 --> 00:03:15,900
it has a logarithmic diameter which

85
00:03:15,900 --> 00:03:18,300
means it delivers messages to all

86
00:03:18,300 --> 00:03:19,980
parties very fast

87
00:03:19,980 --> 00:03:22,019
and it has message complexity that is

88
00:03:22,019 --> 00:03:24,659
comparable to state-of-the-art that

89
00:03:24,659 --> 00:03:27,840
relies on a majority on some assumption

90
00:03:27,840 --> 00:03:30,180
on the number of others parties

91
00:03:30,180 --> 00:03:31,860
additionally we provide extensive

92
00:03:31,860 --> 00:03:33,720
simulations of the way to find out front

93
00:03:33,720 --> 00:03:35,459
in protocol and this confirms the

94
00:03:35,459 --> 00:03:37,680
practicality of our protocol

95
00:03:37,680 --> 00:03:40,879
thank you for your attention

