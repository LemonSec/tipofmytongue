1
00:00:02,340 --> 00:00:05,880
hello everyone welcome to this video

2
00:00:05,880 --> 00:00:09,240
abstract presentation on efficient

3
00:00:09,240 --> 00:00:11,580
adaptively secure Byzantine agreement

4
00:00:11,580 --> 00:00:13,460
for long messages

5
00:00:13,460 --> 00:00:16,980
my name is chenda and I'm at NTT

6
00:00:16,980 --> 00:00:19,980
research and this is Joint work with

7
00:00:19,980 --> 00:00:23,340
Amai from UC Riverside Julian Francisco

8
00:00:23,340 --> 00:00:28,220
and Karthik from Duke University

9
00:00:29,039 --> 00:00:31,920
so what is Byzantine agreement so

10
00:00:31,920 --> 00:00:34,020
Byzantine agreement is a distributed

11
00:00:34,020 --> 00:00:37,140
protocol among a bunch of parties which

12
00:00:37,140 --> 00:00:39,300
are connected via some communication

13
00:00:39,300 --> 00:00:40,559
Network

14
00:00:40,559 --> 00:00:43,620
and basically the setting is each party

15
00:00:43,620 --> 00:00:47,160
has their own input so Pi has x i as

16
00:00:47,160 --> 00:00:50,940
input and they need to compute an output

17
00:00:50,940 --> 00:00:54,840
that satisfies two security guarantees

18
00:00:54,840 --> 00:00:56,579
the first guarantee is called

19
00:00:56,579 --> 00:00:59,399
consistency meaning that all the honest

20
00:00:59,399 --> 00:01:03,600
part is output the same value

21
00:01:03,600 --> 00:01:06,299
and the second guarantee is validity

22
00:01:06,299 --> 00:01:10,500
meaning that if all honest parties have

23
00:01:10,500 --> 00:01:12,780
the same value as inputs

24
00:01:12,780 --> 00:01:17,040
X then this should be the the value that

25
00:01:17,040 --> 00:01:19,680
they output

26
00:01:19,680 --> 00:01:22,020
and of course the thing is that these

27
00:01:22,020 --> 00:01:24,060
two security guarantees must hold even

28
00:01:24,060 --> 00:01:26,939
when a subset of the parties is

29
00:01:26,939 --> 00:01:28,979
corrupted or becomes corrupted during

30
00:01:28,979 --> 00:01:32,240
the protocol execution

31
00:01:32,400 --> 00:01:34,320
so when we talk about Byzantine

32
00:01:34,320 --> 00:01:36,780
agreement protocols a main efficiency

33
00:01:36,780 --> 00:01:39,900
metric is what we call the communication

34
00:01:39,900 --> 00:01:42,619
complexity

35
00:01:42,720 --> 00:01:44,520
the communication complexity is

36
00:01:44,520 --> 00:01:47,040
basically the number of bits that honest

37
00:01:47,040 --> 00:01:48,540
part is

38
00:01:48,540 --> 00:01:49,259
um

39
00:01:49,259 --> 00:01:51,720
have to communicate during the protocol

40
00:01:51,720 --> 00:01:52,920
execution

41
00:01:52,920 --> 00:01:55,439
and ideally it's not hard to think that

42
00:01:55,439 --> 00:01:59,100
the base the best case scenario is if

43
00:01:59,100 --> 00:02:00,840
the communication complexity of the

44
00:02:00,840 --> 00:02:04,200
Byzantine agreement is something like n

45
00:02:04,200 --> 00:02:08,459
times n where L is the number of uh is

46
00:02:08,459 --> 00:02:11,879
is the input size in bits and N is the

47
00:02:11,879 --> 00:02:14,340
number of parties

48
00:02:14,340 --> 00:02:15,900
so

49
00:02:15,900 --> 00:02:16,620
um

50
00:02:16,620 --> 00:02:19,860
if we take the best the most

51
00:02:19,860 --> 00:02:21,020
communication

52
00:02:21,020 --> 00:02:24,300
efficient protocols that exist nowadays

53
00:02:24,300 --> 00:02:26,360
these are subreddited communication

54
00:02:26,360 --> 00:02:29,640
protocols starting from the works of

55
00:02:29,640 --> 00:02:32,420
algorithm and some follow-ups afterwards

56
00:02:32,420 --> 00:02:35,040
these protocols achieve

57
00:02:35,040 --> 00:02:37,739
a communication complexity that looks

58
00:02:37,739 --> 00:02:41,340
more like oh poly of Kappa n times L

59
00:02:41,340 --> 00:02:43,680
work up by some sort of security

60
00:02:43,680 --> 00:02:45,840
parameter

61
00:02:45,840 --> 00:02:48,480
so there is an overhead of poly of Kappa

62
00:02:48,480 --> 00:02:50,540
with respect to the

63
00:02:50,540 --> 00:02:53,280
ideal communication complexity that we

64
00:02:53,280 --> 00:02:55,140
would like to achieve

65
00:02:55,140 --> 00:02:58,200
so these Solutions don't quite give us

66
00:02:58,200 --> 00:03:00,300
what we want

67
00:03:00,300 --> 00:03:02,940
but there is another line of Works which

68
00:03:02,940 --> 00:03:05,819
is actually like a very traditional line

69
00:03:05,819 --> 00:03:08,459
of work starting from the 80s by tarpine

70
00:03:08,459 --> 00:03:10,920
and corn which are called extension

71
00:03:10,920 --> 00:03:12,659
protocols

72
00:03:12,659 --> 00:03:15,659
and these are protocols that assume like

73
00:03:15,659 --> 00:03:17,879
like a broadcast or or a Byzantine

74
00:03:17,879 --> 00:03:20,040
agreement protocol for for a short

75
00:03:20,040 --> 00:03:23,940
message and it kind of expands it to a

76
00:03:23,940 --> 00:03:25,920
protocol for Byzantine agreement for a

77
00:03:25,920 --> 00:03:29,340
long message with lbs and there is a

78
00:03:29,340 --> 00:03:32,340
long line of Works in this direction

79
00:03:32,340 --> 00:03:35,159
and the most efficient protocol or the

80
00:03:35,159 --> 00:03:37,980
previous most efficient was recently

81
00:03:37,980 --> 00:03:44,580
published a disk by Nayak Ren she by the

82
00:03:44,580 --> 00:03:48,379
ancient disc 2020 and their protocol

83
00:03:48,379 --> 00:03:51,299
achieves a communication of

84
00:03:51,299 --> 00:03:57,920
n times L plus N squared times Kappa

85
00:03:58,920 --> 00:04:02,340
it means that if the input size is long

86
00:04:02,340 --> 00:04:05,040
enough in particular if the input size

87
00:04:05,040 --> 00:04:09,180
is at least of size upper times n linear

88
00:04:09,180 --> 00:04:11,459
in the number of parties

89
00:04:11,459 --> 00:04:15,959
then the the protocol achieves a optimal

90
00:04:15,959 --> 00:04:19,738
communication n times L right

91
00:04:19,738 --> 00:04:22,280
so in this work we ask whether we can

92
00:04:22,280 --> 00:04:25,560
further improve the communication

93
00:04:25,560 --> 00:04:29,419
complexity of the protocols that we have

94
00:04:29,419 --> 00:04:32,580
nowadays and we answer in the

95
00:04:32,580 --> 00:04:33,660
affirmative

96
00:04:33,660 --> 00:04:36,660
so our protocol achieves communication n

97
00:04:36,660 --> 00:04:38,639
times L Plus

98
00:04:38,639 --> 00:04:41,460
n times poly of Kappa

99
00:04:41,460 --> 00:04:43,500
what does this mean this means that our

100
00:04:43,500 --> 00:04:47,520
protocol is optimal for an input range

101
00:04:47,520 --> 00:04:50,699
that is of size poly of Kappa in

102
00:04:50,699 --> 00:04:52,620
particular we can think about the input

103
00:04:52,620 --> 00:04:55,800
range as being sub-linear in the number

104
00:04:55,800 --> 00:04:58,460
of parties

105
00:04:58,500 --> 00:05:01,440
a little bit more formally what is our

106
00:05:01,440 --> 00:05:03,060
main contribution

107
00:05:03,060 --> 00:05:04,500
uh

108
00:05:04,500 --> 00:05:07,620
our paper basically says that there are

109
00:05:07,620 --> 00:05:09,660
Byzantine agreement protocols that

110
00:05:09,660 --> 00:05:12,180
achieve adaptive security this means

111
00:05:12,180 --> 00:05:15,259
that the parties can become corrupted

112
00:05:15,259 --> 00:05:18,360
during the protocol execution

113
00:05:18,360 --> 00:05:21,840
and the communication complexity is an L

114
00:05:21,840 --> 00:05:24,479
plus n times poly of Kappa as I said for

115
00:05:24,479 --> 00:05:28,220
l-bit inputs meaning the optimal

116
00:05:28,220 --> 00:05:32,100
communication is achieved for very

117
00:05:32,100 --> 00:05:35,460
um for sub-linear sized inputs and we

118
00:05:35,460 --> 00:05:37,740
give two protocols or protocols in two

119
00:05:37,740 --> 00:05:41,039
flavors the first protocol is a a

120
00:05:41,039 --> 00:05:43,560
synchronous protocol that tolerates up

121
00:05:43,560 --> 00:05:47,220
to n over 2 Corruptions and the second

122
00:05:47,220 --> 00:05:49,199
is an asynchronous protocol that

123
00:05:49,199 --> 00:05:53,120
tolerates up to any fraction

124
00:05:53,120 --> 00:05:56,280
up to n over three Corruptions

125
00:05:56,280 --> 00:05:58,320
so for more details

126
00:05:58,320 --> 00:06:01,139
I refer you to the eprints version of

127
00:06:01,139 --> 00:06:03,539
the paper or the long talk that will

128
00:06:03,539 --> 00:06:06,600
happen at the confidence thank you very

129
00:06:06,600 --> 00:06:08,720
much

