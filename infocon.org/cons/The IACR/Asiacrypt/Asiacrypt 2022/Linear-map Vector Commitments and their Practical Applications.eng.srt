1
00:00:01,879 --> 00:00:04,380
and in this video I will summarize the

2
00:00:04,380 --> 00:00:06,480
many results of our work on linear map

3
00:00:06,480 --> 00:00:07,980
Vector commitments and the Practical

4
00:00:07,980 --> 00:00:09,240
applications

5
00:00:09,240 --> 00:00:11,760
introduced by catalanavior in 2013

6
00:00:11,760 --> 00:00:14,099
medical mean schemes are cryptographic

7
00:00:14,099 --> 00:00:16,320
Primitives where some entity called the

8
00:00:16,320 --> 00:00:19,440
Brewer can commit to potentially huge

9
00:00:19,440 --> 00:00:22,140
pieces of data in a shrunk mode

10
00:00:22,140 --> 00:00:24,539
in a later step our program can go means

11
00:00:24,539 --> 00:00:26,640
other entities called the verifiers

12
00:00:26,640 --> 00:00:29,699
about some features on the vector as

13
00:00:29,699 --> 00:00:31,439
introducing the seminal work better

14
00:00:31,439 --> 00:00:33,180
commitments were aiming for position

15
00:00:33,180 --> 00:00:35,579
openings that means that the program can

16
00:00:35,579 --> 00:00:38,219
convince a verifier that some specific

17
00:00:38,219 --> 00:00:40,500
position in the vector stores a specific

18
00:00:40,500 --> 00:00:41,700
value

19
00:00:41,700 --> 00:00:44,100
the more we are using Vector commitments

20
00:00:44,100 --> 00:00:46,020
displays the more properties we want

21
00:00:46,020 --> 00:00:48,239
from them and in particular in our work

22
00:00:48,239 --> 00:00:50,640
we start with the concept of linear

23
00:00:50,640 --> 00:00:53,039
mapped by the commitments introduced by

24
00:00:53,039 --> 00:00:55,980
Laya Malawi in 2019 and in this kind of

25
00:00:55,980 --> 00:00:57,719
schemes instead of opening individual

26
00:00:57,719 --> 00:00:59,940
positions our program will open the

27
00:00:59,940 --> 00:01:03,600
vector to evaluations of this vector

28
00:01:03,600 --> 00:01:07,140
um sorry of linear maps in this vector

29
00:01:07,140 --> 00:01:09,720
when observation we make is that if we

30
00:01:09,720 --> 00:01:11,460
have linear map Vector commitments that

31
00:01:11,460 --> 00:01:13,740
have homomorphic broad commitments

32
00:01:13,740 --> 00:01:16,500
proofs and openings then they will also

33
00:01:16,500 --> 00:01:20,220
satisfy about the aggregation and update

34
00:01:20,220 --> 00:01:23,100
aeration is the ability it brought us to

35
00:01:23,100 --> 00:01:24,960
take some proofs that having already

36
00:01:24,960 --> 00:01:27,840
computed and create with them a new one

37
00:01:27,840 --> 00:01:30,960
that when having the same size can

38
00:01:30,960 --> 00:01:33,000
concom means any verified about all the

39
00:01:33,000 --> 00:01:35,159
three statements together in this case

40
00:01:35,159 --> 00:01:37,140
a number of the obligation as we Define

41
00:01:37,140 --> 00:01:39,299
it is the ability the program has to

42
00:01:39,299 --> 00:01:41,700
keep this process going by adding new

43
00:01:41,700 --> 00:01:44,939
proofs and aggregating in a potentially

44
00:01:44,939 --> 00:01:47,340
infinite process but it's important here

45
00:01:47,340 --> 00:01:49,259
that both program verifiers can keep

46
00:01:49,259 --> 00:01:51,479
track of the aggregation history or can

47
00:01:51,479 --> 00:01:54,140
access the creation history

48
00:01:54,140 --> 00:01:56,100
applicability

49
00:01:56,100 --> 00:01:58,619
captures the fact that we want our

50
00:01:58,619 --> 00:02:01,860
poorer to be able to change some things

51
00:02:01,860 --> 00:02:05,040
uh some positions or one position in the

52
00:02:05,040 --> 00:02:06,960
vector and then

53
00:02:06,960 --> 00:02:09,239
instead of having to create a new

54
00:02:09,239 --> 00:02:12,780
commitment and a new proof of opening of

55
00:02:12,780 --> 00:02:15,959
this vector or new proofs of

56
00:02:15,959 --> 00:02:19,080
um all the assignments our program has

57
00:02:19,080 --> 00:02:22,500
already proven uh on this Vector we want

58
00:02:22,500 --> 00:02:25,260
is that the product can

59
00:02:25,260 --> 00:02:27,959
um adapt or update both things the

60
00:02:27,959 --> 00:02:30,720
government and any proof involving this

61
00:02:30,720 --> 00:02:33,000
position in a process that is much

62
00:02:33,000 --> 00:02:36,980
cheaper than Computing them from scratch

63
00:02:37,620 --> 00:02:39,660
this is cool because we have two

64
00:02:39,660 --> 00:02:42,300
constructions and one in the monomial

65
00:02:42,300 --> 00:02:44,760
and one in LaGrange basis both aluminum

66
00:02:44,760 --> 00:02:47,340
map Vector commitments that have all

67
00:02:47,340 --> 00:02:49,260
thermomorphic properties that we defined

68
00:02:49,260 --> 00:02:50,340
before

69
00:02:50,340 --> 00:02:53,760
as they are they are in the independent

70
00:02:53,760 --> 00:02:56,640
setting they have sir proofs fast

71
00:02:56,640 --> 00:02:59,220
verification as I say before satisfying

72
00:02:59,220 --> 00:03:02,459
audio memory properties and those they

73
00:03:02,459 --> 00:03:04,080
are updateable and unbounded

74
00:03:04,080 --> 00:03:08,040
aggregatable but the bad thing with our

75
00:03:08,040 --> 00:03:09,780
proofs is that the Brewer is very slow

76
00:03:09,780 --> 00:03:12,840
it's linear on the size of the fact

77
00:03:12,840 --> 00:03:16,620
so when we do uh we have a bunch of

78
00:03:16,620 --> 00:03:19,019
results that offer different Brewers

79
00:03:19,019 --> 00:03:21,180
some memory space trade-offs depending

80
00:03:21,180 --> 00:03:24,239
on the vector scheme that they are used

81
00:03:24,239 --> 00:03:27,420
the rough idea the intuition is that the

82
00:03:27,420 --> 00:03:31,319
Brewer can store the vector in a tree

83
00:03:31,319 --> 00:03:34,080
um well store the vector in the in the

84
00:03:34,080 --> 00:03:36,959
root of a tree and then every node's

85
00:03:36,959 --> 00:03:39,840
children will consist on two vectors of

86
00:03:39,840 --> 00:03:41,940
hybrid size

87
00:03:41,940 --> 00:03:43,400
um

88
00:03:43,400 --> 00:03:45,840
containing the odd and the even

89
00:03:45,840 --> 00:03:48,299
positions respectively the Brewer can

90
00:03:48,299 --> 00:03:49,980
choose where to stop this process

91
00:03:49,980 --> 00:03:52,620
doesn't have to arrive to a tree that

92
00:03:52,620 --> 00:03:54,480
has only single elements in the leaves

93
00:03:54,480 --> 00:03:57,480
it can have just smaller vectors which

94
00:03:57,480 --> 00:04:00,659
are chunks of the original one and when

95
00:04:00,659 --> 00:04:02,459
the program wants to make a proof of

96
00:04:02,459 --> 00:04:04,680
opening let's say of an individual

97
00:04:04,680 --> 00:04:08,659
position it has to first open

98
00:04:08,659 --> 00:04:11,819
the position in the chunk it correspond

99
00:04:11,819 --> 00:04:14,580
to it so this is a process that will be

100
00:04:14,580 --> 00:04:16,918
linear on the size of our chunk and not

101
00:04:16,918 --> 00:04:19,380
on the size of our Vector anymore and

102
00:04:19,380 --> 00:04:20,639
then it will have to prove that this

103
00:04:20,639 --> 00:04:23,940
chunk is indeed the correct sub Vector

104
00:04:23,940 --> 00:04:25,979
of the original vector

105
00:04:25,979 --> 00:04:28,880
but this proves of subject or openings

106
00:04:28,880 --> 00:04:31,620
those can be pre-computed

107
00:04:31,620 --> 00:04:33,720
and then what we offer our Brewer is the

108
00:04:33,720 --> 00:04:36,960
following trade-offs take M as a power

109
00:04:36,960 --> 00:04:39,120
of 2 and choose

110
00:04:39,120 --> 00:04:42,900
new and Kappa such that two to the new

111
00:04:42,900 --> 00:04:45,960
plus Kappa equals m we enforce the that

112
00:04:45,960 --> 00:04:47,580
means a power of two

113
00:04:47,580 --> 00:04:52,440
and then if you compute your

114
00:04:52,440 --> 00:04:56,419
year three uh having deep

115
00:04:56,419 --> 00:05:00,300
you as a program we have to start a

116
00:05:00,300 --> 00:05:02,940
pre-compute and start to the new proofs

117
00:05:02,940 --> 00:05:06,060
uh that relate every level with the

118
00:05:06,060 --> 00:05:08,520
previous one and then when you have to

119
00:05:08,520 --> 00:05:12,479
perform a proof of opening you just go

120
00:05:12,479 --> 00:05:14,280
through a process that is linear on the

121
00:05:14,280 --> 00:05:16,080
size of your small chunks in this case

122
00:05:16,080 --> 00:05:18,240
due to the Kappa

123
00:05:18,240 --> 00:05:22,040
that's all for me thank you very much

