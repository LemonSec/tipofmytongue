1
00:00:01,439 --> 00:00:04,620
hi my name is mihail kudinov and I'm

2
00:00:04,620 --> 00:00:06,420
going to present a joint work with

3
00:00:06,420 --> 00:00:08,700
Andreas hulsing on recovering the tight

4
00:00:08,700 --> 00:00:12,500
security proof of swingsplus

5
00:00:13,019 --> 00:00:14,940
in the talk we are going to discuss

6
00:00:14,940 --> 00:00:17,220
Sphinx plus which is a hash based

7
00:00:17,220 --> 00:00:18,600
signature scheme

8
00:00:18,600 --> 00:00:20,880
the scheme was recently chosen by nist

9
00:00:20,880 --> 00:00:23,279
for standardization as a post-quantum

10
00:00:23,279 --> 00:00:25,080
alternative for signatures

11
00:00:25,080 --> 00:00:27,660
one of the arguments was the sphinxplus

12
00:00:27,660 --> 00:00:29,820
is a conservative and a safe choice

13
00:00:29,820 --> 00:00:32,220
during the knees process a flow in the

14
00:00:32,220 --> 00:00:34,440
proof of security was found so in this

15
00:00:34,440 --> 00:00:36,239
talk we will focus on recovering the

16
00:00:36,239 --> 00:00:39,860
security proof of sphinxplus

17
00:00:40,620 --> 00:00:43,020
the problem was in the part that proved

18
00:00:43,020 --> 00:00:45,480
what security what's is a one-time

19
00:00:45,480 --> 00:00:47,219
signature scheme that is used as a

20
00:00:47,219 --> 00:00:49,800
building block for Sphinx plus the flow

21
00:00:49,800 --> 00:00:52,200
didn't lead to an attack there was a

22
00:00:52,200 --> 00:00:53,520
non-tight proof that was still

23
00:00:53,520 --> 00:00:54,660
applicable

24
00:00:54,660 --> 00:00:56,820
using that proof would lead to less

25
00:00:56,820 --> 00:00:59,340
efficient scheme since around 60 bits of

26
00:00:59,340 --> 00:01:01,260
security would have been lost for the

27
00:01:01,260 --> 00:01:03,059
proposed set of parameters

28
00:01:03,059 --> 00:01:06,060
in syncsplus watch is used to sign some

29
00:01:06,060 --> 00:01:08,640
internal parts of the scheme so the key

30
00:01:08,640 --> 00:01:10,740
observation that helps to fix the proof

31
00:01:10,740 --> 00:01:12,600
is that the adversary has no control

32
00:01:12,600 --> 00:01:14,820
over those internal parts

33
00:01:14,820 --> 00:01:16,740
so we could prove the security of what

34
00:01:16,740 --> 00:01:19,799
in a weaker model this model forces the

35
00:01:19,799 --> 00:01:21,780
adversary to make signature queries

36
00:01:21,780 --> 00:01:25,280
before he gets the public key

37
00:01:25,500 --> 00:01:28,680
in our work we get a new proof for what

38
00:01:28,680 --> 00:01:30,420
signature scheme and show how to

39
00:01:30,420 --> 00:01:32,159
integrate this new proof in the security

40
00:01:32,159 --> 00:01:35,640
proof of swings plus this way we obtain

41
00:01:35,640 --> 00:01:37,619
a new diet proof of sphinx Plus without

42
00:01:37,619 --> 00:01:40,140
changing the scheme the proof for other

43
00:01:40,140 --> 00:01:44,420
parts of strings plus did not change

44
00:01:45,140 --> 00:01:48,119
instincts plus the hashing is done with

45
00:01:48,119 --> 00:01:50,640
so-called tweakable hash functions they

46
00:01:50,640 --> 00:01:53,399
take three inputs public parameter at

47
00:01:53,399 --> 00:01:56,340
week and the message and output that a

48
00:01:56,340 --> 00:01:57,240
Digest

49
00:01:57,240 --> 00:01:59,880
the public parameter is a b string that

50
00:01:59,880 --> 00:02:02,280
is a part of sphinx plus public key

51
00:02:02,280 --> 00:02:04,680
this input is the same for every

52
00:02:04,680 --> 00:02:06,540
tweakable hash function call in the

53
00:02:06,540 --> 00:02:08,940
scheme and helps to obtain multi-user

54
00:02:08,940 --> 00:02:10,020
security

55
00:02:10,020 --> 00:02:13,260
the second input tweak is different for

56
00:02:13,260 --> 00:02:15,480
every hash function call in the scheme

57
00:02:15,480 --> 00:02:17,700
anyone can determine the tweak that is

58
00:02:17,700 --> 00:02:18,900
needed for particular function

59
00:02:18,900 --> 00:02:21,180
evaluation but the main point is that

60
00:02:21,180 --> 00:02:24,300
all of all of the tweaks are different

61
00:02:24,300 --> 00:02:27,180
this can be viewed as the nonce this is

62
00:02:27,180 --> 00:02:29,819
done to mitigate multi-target attacks we

63
00:02:29,819 --> 00:02:31,440
have a lot of hash function calls in

64
00:02:31,440 --> 00:02:33,959
swings plus and if we did all of that

65
00:02:33,959 --> 00:02:36,420
with one function finding a pretty image

66
00:02:36,420 --> 00:02:38,459
for at least one target would be much

67
00:02:38,459 --> 00:02:41,459
easier in this case having tweaks allows

68
00:02:41,459 --> 00:02:43,680
us to separate these calls from each

69
00:02:43,680 --> 00:02:45,860
other

70
00:02:46,920 --> 00:02:49,500
in our paper we also update the status

71
00:02:49,500 --> 00:02:52,379
of two of two security properties of the

72
00:02:52,379 --> 00:02:55,260
tweakable hash functions to just to

73
00:02:55,260 --> 00:02:57,239
justify using non-standard properties

74
00:02:57,239 --> 00:02:59,760
one should analyze how hard would it be

75
00:02:59,760 --> 00:03:01,620
to break those properties for a random

76
00:03:01,620 --> 00:03:02,700
function

77
00:03:02,700 --> 00:03:04,980
we analyze this case against Quantum

78
00:03:04,980 --> 00:03:06,599
adversaries for multi-target Target

79
00:03:06,599 --> 00:03:09,120
Collision resistance and multi-target

80
00:03:09,120 --> 00:03:10,739
undetectability

81
00:03:10,739 --> 00:03:13,140
this is then used to evaluate concrete

82
00:03:13,140 --> 00:03:16,399
parameters for the scheme

83
00:03:16,620 --> 00:03:19,560
another important thing to look at is

84
00:03:19,560 --> 00:03:21,120
how to construct tweakable hash

85
00:03:21,120 --> 00:03:23,519
functions from the kit hash functions

86
00:03:23,519 --> 00:03:25,739
Sphinx was proposed two constructions

87
00:03:25,739 --> 00:03:27,840
which are presented on this slide

88
00:03:27,840 --> 00:03:30,360
and analyzed what are the requirements

89
00:03:30,360 --> 00:03:32,760
for the kit hash functions so that the

90
00:03:32,760 --> 00:03:34,860
resulting tweakable function will have

91
00:03:34,860 --> 00:03:37,260
the needed properties

92
00:03:37,260 --> 00:03:39,360
since Sphinx plus original proof didn't

93
00:03:39,360 --> 00:03:41,220
require pre-image resistance or

94
00:03:41,220 --> 00:03:43,620
undetectability we complete this part in

95
00:03:43,620 --> 00:03:46,159
our paper

96
00:03:46,680 --> 00:03:48,780
in the full talk we give a brief

97
00:03:48,780 --> 00:03:50,640
explanation of syncsplus signature

98
00:03:50,640 --> 00:03:52,620
scheme and provide more details about

99
00:03:52,620 --> 00:03:55,379
the flow and how we fixed it we also

100
00:03:55,379 --> 00:03:56,879
discussed the analysis of hedge function

101
00:03:56,879 --> 00:03:59,040
properties and state the possibilities

102
00:03:59,040 --> 00:04:01,200
for future research

103
00:04:01,200 --> 00:04:04,879
we will wait you at our talk

