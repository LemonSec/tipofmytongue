1
00:00:00,599 --> 00:00:03,240
hello everyone so this is a teaser to my

2
00:00:03,240 --> 00:00:04,980
talk random sources in Secure

3
00:00:04,980 --> 00:00:07,020
computation it's a joint work with Adie

4
00:00:07,020 --> 00:00:08,639
Rosanna

5
00:00:08,639 --> 00:00:10,380
so the model we look at is that of

6
00:00:10,380 --> 00:00:12,120
information theoretic secure computation

7
00:00:12,120 --> 00:00:15,059
and parties have inputs X1 to xn the

8
00:00:15,059 --> 00:00:16,440
adversary can corrupt at most tea

9
00:00:16,440 --> 00:00:18,240
parties and the goal is Computing some

10
00:00:18,240 --> 00:00:19,920
public function f without traveling

11
00:00:19,920 --> 00:00:21,539
anything more

12
00:00:21,539 --> 00:00:23,400
we know that secure computation cannot

13
00:00:23,400 --> 00:00:25,740
be done without Randomness we need the

14
00:00:25,740 --> 00:00:27,359
ability to toast coins to securely

15
00:00:27,359 --> 00:00:29,220
compute a function and a well-known

16
00:00:29,220 --> 00:00:31,199
natural question is to understand how

17
00:00:31,199 --> 00:00:32,820
much Randomness is needed to securely

18
00:00:32,820 --> 00:00:35,219
compute a function it has been studied

19
00:00:35,219 --> 00:00:37,020
in many previous work and the motivation

20
00:00:37,020 --> 00:00:39,660
for that is that producing high quality

21
00:00:39,660 --> 00:00:41,460
cryptographic Randomness is hard it

22
00:00:41,460 --> 00:00:44,280
should be treated as a scarce resource

23
00:00:44,280 --> 00:00:46,680
in this work we ask a related question

24
00:00:46,680 --> 00:00:48,420
which to our knowledge was never asked

25
00:00:48,420 --> 00:00:51,840
before and we ask how many parties need

26
00:00:51,840 --> 00:00:54,420
to have the ability to toast coins to be

27
00:00:54,420 --> 00:00:56,520
able to secretly compute a function

28
00:00:56,520 --> 00:00:59,280
the motivation is somewhat similar in in

29
00:00:59,280 --> 00:01:01,260
the real world it's not always easy to

30
00:01:01,260 --> 00:01:02,640
produce high quality Randomness because

31
00:01:02,640 --> 00:01:04,860
we might not have a proper device to do

32
00:01:04,860 --> 00:01:07,020
so right we might be using I don't know

33
00:01:07,020 --> 00:01:09,420
a phone that does not have a good way to

34
00:01:09,420 --> 00:01:11,700
produce high quality Randomness or maybe

35
00:01:11,700 --> 00:01:14,100
we're using some code which was not

36
00:01:14,100 --> 00:01:16,080
correctly written and does not use the

37
00:01:16,080 --> 00:01:17,760
correct libraries to generate

38
00:01:17,760 --> 00:01:20,159
cryptographic quality Randomness so it

39
00:01:20,159 --> 00:01:21,600
might be that in a secure computation

40
00:01:21,600 --> 00:01:24,600
protocol we might want to avoid relying

41
00:01:24,600 --> 00:01:26,820
on the ability of some clients that use

42
00:01:26,820 --> 00:01:30,299
weaker devices to toss coins correctly

43
00:01:30,299 --> 00:01:32,700
so for example here would it be possible

44
00:01:32,700 --> 00:01:34,320
to compute this five-party protocol

45
00:01:34,320 --> 00:01:36,900
without requiring the two holders of

46
00:01:36,900 --> 00:01:39,360
funds to use any random coins relying

47
00:01:39,360 --> 00:01:40,799
only on the ability to generate

48
00:01:40,799 --> 00:01:43,560
randomness of these more trusted servers

49
00:01:43,560 --> 00:01:45,119
trusted in in the sense that they

50
00:01:45,119 --> 00:01:48,680
generate high quality randomness

51
00:01:48,720 --> 00:01:50,159
there are several results the first

52
00:01:50,159 --> 00:01:52,799
result is a complete characterization of

53
00:01:52,799 --> 00:01:54,720
of the random Source complexity of T

54
00:01:54,720 --> 00:01:56,700
private computation a characterization

55
00:01:56,700 --> 00:01:58,320
of the number of parties who can toss

56
00:01:58,320 --> 00:01:59,640
random coins

57
00:01:59,640 --> 00:02:02,939
so previous work showed that at least

58
00:02:02,939 --> 00:02:05,460
two random sources are needed to

59
00:02:05,460 --> 00:02:07,380
securely compute functionality with t

60
00:02:07,380 --> 00:02:10,679
privacy we show that t plus one parties

61
00:02:10,679 --> 00:02:13,140
are needed if you want to compute a

62
00:02:13,140 --> 00:02:15,300
randomized functionality and that t plus

63
00:02:15,300 --> 00:02:17,099
one parties are sufficient and those

64
00:02:17,099 --> 00:02:18,720
turn out to be relatively easy results

65
00:02:18,720 --> 00:02:21,000
it's quite natural if tea parties are

66
00:02:21,000 --> 00:02:22,920
corrupted then you need to have at least

67
00:02:22,920 --> 00:02:25,319
one uncorrected parties that then can

68
00:02:25,319 --> 00:02:28,440
toss random coins hence the t plus one

69
00:02:28,440 --> 00:02:30,540
but the most surprising result and the

70
00:02:30,540 --> 00:02:32,819
core result of our work is that actually

71
00:02:32,819 --> 00:02:34,260
if you only want to compute

72
00:02:34,260 --> 00:02:36,120
deterministic functionalities which is

73
00:02:36,120 --> 00:02:38,580
still a very wide variety of

74
00:02:38,580 --> 00:02:41,340
functionalities it is sufficient that

75
00:02:41,340 --> 00:02:43,019
tea parties have the ability to those

76
00:02:43,019 --> 00:02:45,120
coins to T privately compute all

77
00:02:45,120 --> 00:02:47,040
deterministic functionalities

78
00:02:47,040 --> 00:02:48,780
and this is a quite surprising result

79
00:02:48,780 --> 00:02:51,060
because what this means is that even

80
00:02:51,060 --> 00:02:53,099
though secure computation is impossible

81
00:02:53,099 --> 00:02:55,860
deterministically it becomes possible to

82
00:02:55,860 --> 00:02:57,840
securely compute all deterministic

83
00:02:57,840 --> 00:03:00,480
functionalities even in a setting where

84
00:03:00,480 --> 00:03:02,640
the adversary could potentially corrupt

85
00:03:02,640 --> 00:03:04,860
all parties that can toss random coins

86
00:03:04,860 --> 00:03:06,900
and so in particular the adversary could

87
00:03:06,900 --> 00:03:09,599
be able to see all coins ever toast in

88
00:03:09,599 --> 00:03:11,519
the protocols a second result that we

89
00:03:11,519 --> 00:03:13,080
study is a relation between the

90
00:03:13,080 --> 00:03:14,940
randomness complexity and the random

91
00:03:14,940 --> 00:03:16,500
Source complexity for some simple

92
00:03:16,500 --> 00:03:18,659
functionalities more specifically we

93
00:03:18,659 --> 00:03:20,940
look at the end functionality in the

94
00:03:20,940 --> 00:03:23,700
setting of one privacy and we ask is it

95
00:03:23,700 --> 00:03:25,560
possible to match the best known

96
00:03:25,560 --> 00:03:28,080
protocol that uses 8 Bits and two

97
00:03:28,080 --> 00:03:29,879
sources using the minimum number of

98
00:03:29,879 --> 00:03:31,980
sources which by our previous result is

99
00:03:31,980 --> 00:03:33,420
a single source

100
00:03:33,420 --> 00:03:35,640
and surprisingly we managed to improve

101
00:03:35,640 --> 00:03:37,680
both the randomness complexity and the

102
00:03:37,680 --> 00:03:39,360
number of sources of this protocol and

103
00:03:39,360 --> 00:03:40,920
obtain a protocol that use only six

104
00:03:40,920 --> 00:03:43,200
random bits and a single source so it's

105
00:03:43,200 --> 00:03:45,420
a result of independent interest for the

106
00:03:45,420 --> 00:03:47,340
randomness complexity of end but also

107
00:03:47,340 --> 00:03:48,659
clarifies a bit the relation between

108
00:03:48,659 --> 00:03:50,640
Randomness complexity and random Source

109
00:03:50,640 --> 00:03:52,319
complexity

110
00:03:52,319 --> 00:03:54,780
so for our first result I'm giving here

111
00:03:54,780 --> 00:03:57,239
a high level summary of the protocol

112
00:03:57,239 --> 00:03:59,519
so the key ID is that we will find a way

113
00:03:59,519 --> 00:04:02,099
to make sure that the sources never see

114
00:04:02,099 --> 00:04:04,500
anything private during the protocol

115
00:04:04,500 --> 00:04:05,940
anything that depends on the private

116
00:04:05,940 --> 00:04:07,680
input so that when the adversary

117
00:04:07,680 --> 00:04:10,920
corrupts all the sources then he cannot

118
00:04:10,920 --> 00:04:13,140
see anything non-trivial about their

119
00:04:13,140 --> 00:04:15,239
inputs and if it corrupts someone else

120
00:04:15,239 --> 00:04:17,820
in the sources then one of the sources

121
00:04:17,820 --> 00:04:19,680
has to be honest and we can exploit the

122
00:04:19,680 --> 00:04:21,238
fact that one of the sources is honest

123
00:04:21,238 --> 00:04:24,120
to guarantee that the parties can have

124
00:04:24,120 --> 00:04:25,680
can produce high quality Randomness

125
00:04:25,680 --> 00:04:27,600
throughout the protocol

126
00:04:27,600 --> 00:04:30,180
and for the second result we maintain a

127
00:04:30,180 --> 00:04:32,220
very careful invariant throughout the

128
00:04:32,220 --> 00:04:34,800
protocol using only four random bits and

129
00:04:34,800 --> 00:04:37,080
we transmit in a line this invariant

130
00:04:37,080 --> 00:04:38,580
throughout the parties putting them in a

131
00:04:38,580 --> 00:04:41,040
line this way and then we use two more

132
00:04:41,040 --> 00:04:43,979
random bits to uh complete the end of

133
00:04:43,979 --> 00:04:45,479
the protocol we're using in a very

134
00:04:45,479 --> 00:04:47,520
careful way careful ways the sum of the

135
00:04:47,520 --> 00:04:49,080
bits that we used at the beginning of

136
00:04:49,080 --> 00:04:51,180
the protocol I'm not giving more details

137
00:04:51,180 --> 00:04:54,000
for now uh but uh I encourage you to

138
00:04:54,000 --> 00:04:56,580
come and see the online talk to hear

139
00:04:56,580 --> 00:04:58,560
more about that and I'll be happy to see

140
00:04:58,560 --> 00:05:01,699
you soon goodbye

