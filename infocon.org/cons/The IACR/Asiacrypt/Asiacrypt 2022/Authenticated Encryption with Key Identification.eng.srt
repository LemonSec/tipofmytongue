1
00:00:00,659 --> 00:00:03,178
my name is Julia Len and in this talk

2
00:00:03,179 --> 00:00:05,580
abstract I will present an overview of

3
00:00:05,580 --> 00:00:07,080
authenticated encryption with key

4
00:00:07,080 --> 00:00:09,660
identification this is Joint work with

5
00:00:09,660 --> 00:00:12,540
Paul Grubbs and Thomaston Park

6
00:00:12,540 --> 00:00:14,940
to begin we recall the definition of

7
00:00:14,940 --> 00:00:16,920
authenticated encryption with Associated

8
00:00:16,920 --> 00:00:19,740
data or aad

9
00:00:19,740 --> 00:00:21,720
this cryptographic primitive assumes

10
00:00:21,720 --> 00:00:24,420
that two parties share a secret key

11
00:00:24,420 --> 00:00:26,400
the sender chooses a nonce and

12
00:00:26,400 --> 00:00:28,500
Associated data and encrypts the

13
00:00:28,500 --> 00:00:32,460
plaintext message using their secret key

14
00:00:32,460 --> 00:00:34,860
they can then send the non-associated

15
00:00:34,860 --> 00:00:37,680
data and ciphertext to the recipient who

16
00:00:37,680 --> 00:00:39,899
can decrypt using the secret key to

17
00:00:39,899 --> 00:00:42,059
recover the plaintext message

18
00:00:42,059 --> 00:00:44,399
here we require that an attacker who

19
00:00:44,399 --> 00:00:46,440
does not know the secret key and sees

20
00:00:46,440 --> 00:00:48,660
the sniper text will not be able to

21
00:00:48,660 --> 00:00:50,460
recover the plain text

22
00:00:50,460 --> 00:00:52,500
however notice that there are a couple

23
00:00:52,500 --> 00:00:54,120
of assumptions being made with this

24
00:00:54,120 --> 00:00:55,680
model

25
00:00:55,680 --> 00:00:57,539
the first assumption is that the

26
00:00:57,539 --> 00:00:59,760
adversary has no way of knowing or even

27
00:00:59,760 --> 00:01:01,680
guessing the secret key

28
00:01:01,680 --> 00:01:04,260
moreover the second assumption is that

29
00:01:04,260 --> 00:01:06,659
decryption only ever gets a single

30
00:01:06,659 --> 00:01:08,700
secret key as input

31
00:01:08,700 --> 00:01:11,340
but looking at how aad is used in

32
00:01:11,340 --> 00:01:13,560
practice these assumptions do not

33
00:01:13,560 --> 00:01:15,420
actually always capture or fully model

34
00:01:15,420 --> 00:01:17,820
its use cases

35
00:01:17,820 --> 00:01:20,580
in particular the first assumption about

36
00:01:20,580 --> 00:01:22,680
the adversary not knowing the secret key

37
00:01:22,680 --> 00:01:24,960
does not capture the security goal of

38
00:01:24,960 --> 00:01:27,659
kiribusiness which was first introduced

39
00:01:27,659 --> 00:01:29,580
for the authenticated encryption setting

40
00:01:29,580 --> 00:01:33,540
by farsham Orlandi and roshi in 2017.

41
00:01:33,540 --> 00:01:36,360
at a high level an aad scheme that is

42
00:01:36,360 --> 00:01:39,420
not key robust or key committing means

43
00:01:39,420 --> 00:01:40,920
that an adversary can compute a

44
00:01:40,920 --> 00:01:42,900
ciphertext such that it can successfully

45
00:01:42,900 --> 00:01:45,600
decrypt under two different keys

46
00:01:45,600 --> 00:01:48,000
and recent work has shown that many aad

47
00:01:48,000 --> 00:01:50,460
schemes are not kiribust

48
00:01:50,460 --> 00:01:52,079
and that this can actually lead to

49
00:01:52,079 --> 00:01:55,320
vulnerabilities in practice

50
00:01:55,320 --> 00:01:56,820
as a quick summary of these

51
00:01:56,820 --> 00:01:59,340
vulnerabilities grubs at all and notice

52
00:01:59,340 --> 00:02:00,899
it all showed a tax on Facebook

53
00:02:00,899 --> 00:02:03,659
messenger's message ranking protocol

54
00:02:03,659 --> 00:02:06,119
in Prior work we described a new type of

55
00:02:06,119 --> 00:02:08,280
attack that we call partitioning Oracle

56
00:02:08,280 --> 00:02:09,360
attacks

57
00:02:09,360 --> 00:02:11,220
and showed how to use this attack to

58
00:02:11,220 --> 00:02:12,959
exploit key robustness vulnerabilities

59
00:02:12,959 --> 00:02:15,780
in Shadow socks proxy servers and early

60
00:02:15,780 --> 00:02:17,640
implementations of the opaque password

61
00:02:17,640 --> 00:02:20,340
authenticated key exchange protocol

62
00:02:20,340 --> 00:02:22,920
and finally albertini at all described

63
00:02:22,920 --> 00:02:25,020
vulnerabilities with envelope encryption

64
00:02:25,020 --> 00:02:27,060
and subscribed with Google when they

65
00:02:27,060 --> 00:02:31,280
used AED schemes that are not kiribust

66
00:02:31,500 --> 00:02:34,200
moreover when we look at the assumption

67
00:02:34,200 --> 00:02:36,300
that decryption only ever gets a single

68
00:02:36,300 --> 00:02:38,760
secret key we see this also does not

69
00:02:38,760 --> 00:02:41,280
model practice for instance the Google

70
00:02:41,280 --> 00:02:44,580
tank API gives decryption a set of keys

71
00:02:44,580 --> 00:02:46,440
and requires decryption to First

72
00:02:46,440 --> 00:02:48,420
determine which key is the correct one

73
00:02:48,420 --> 00:02:50,580
before decrypting

74
00:02:50,580 --> 00:02:52,739
furthermore we've seen systems in

75
00:02:52,739 --> 00:02:54,540
practice in which decryption must choose

76
00:02:54,540 --> 00:02:56,700
from a set of keys and does this

77
00:02:56,700 --> 00:03:00,000
insecurely in particular we previously

78
00:03:00,000 --> 00:03:01,739
showed this is an issue with multi-user

79
00:03:01,739 --> 00:03:03,120
Shadow socks

80
00:03:03,120 --> 00:03:05,220
and also albertinia I'll show this as an

81
00:03:05,220 --> 00:03:08,519
issue with Key Management Services

82
00:03:08,519 --> 00:03:10,860
all together while in practice we've

83
00:03:10,860 --> 00:03:12,659
seen various techniques for kid and a

84
00:03:12,659 --> 00:03:15,060
vacation during decryption it's unclear

85
00:03:15,060 --> 00:03:16,680
what security property some of these

86
00:03:16,680 --> 00:03:18,239
approaches achieve

87
00:03:18,239 --> 00:03:20,099
to date there has been no formal

88
00:03:20,099 --> 00:03:21,360
investigation of their security

89
00:03:21,360 --> 00:03:24,659
Properties or efficacy especially in the

90
00:03:24,659 --> 00:03:27,120
presence of adversarial keys

91
00:03:27,120 --> 00:03:29,400
the ad hoc solutions for identifying the

92
00:03:29,400 --> 00:03:31,379
intended key deployment practice can be

93
00:03:31,379 --> 00:03:33,780
inefficient and as we've seen in some

94
00:03:33,780 --> 00:03:38,340
cases vulnerable to practical attacks

95
00:03:38,340 --> 00:03:40,500
we therefore initiate the formal study

96
00:03:40,500 --> 00:03:42,780
of aad that supports key identification

97
00:03:42,780 --> 00:03:46,080
by extending non-spaced aad into this

98
00:03:46,080 --> 00:03:48,080
setting

99
00:03:48,080 --> 00:03:50,400
in this talk we'll go over our

100
00:03:50,400 --> 00:03:52,440
formalization of a new cryptographic

101
00:03:52,440 --> 00:03:54,299
primitive called aad with key

102
00:03:54,299 --> 00:03:58,080
identification or aadki

103
00:03:58,080 --> 00:04:00,360
decryption now takes in a vector of

104
00:04:00,360 --> 00:04:03,120
secret keys and a ciphertext and must

105
00:04:03,120 --> 00:04:05,040
both identify the correct secret key and

106
00:04:05,040 --> 00:04:08,239
decoup the ciphertext

107
00:04:08,879 --> 00:04:10,739
we'll next introduce new security

108
00:04:10,739 --> 00:04:13,760
definitions for the aadki setting

109
00:04:13,760 --> 00:04:16,320
notably our definitions allow an

110
00:04:16,320 --> 00:04:18,540
adversary to specify malicious keys to

111
00:04:18,540 --> 00:04:21,959
better model possible attacks

112
00:04:21,959 --> 00:04:24,660
and lastly we'll analyze the security of

113
00:04:24,660 --> 00:04:26,520
existing key identification approaches

114
00:04:26,520 --> 00:04:30,500
as well as suggest new ones

