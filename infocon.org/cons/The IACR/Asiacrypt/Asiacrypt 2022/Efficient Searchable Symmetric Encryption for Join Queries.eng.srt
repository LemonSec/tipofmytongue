1
00:00:00,659 --> 00:00:01,920
thank you

2
00:00:01,920 --> 00:00:04,440
hello and welcome to this talk on

3
00:00:04,440 --> 00:00:06,540
efficient searchable encryption for join

4
00:00:06,540 --> 00:00:08,519
queries this is Joint work with

5
00:00:08,519 --> 00:00:10,679
challenge it

6
00:00:10,679 --> 00:00:12,840
the Advent of cloud computing allows

7
00:00:12,840 --> 00:00:14,700
Outsourcing the storage and processing

8
00:00:14,700 --> 00:00:16,980
of extremely large databases to

9
00:00:16,980 --> 00:00:18,720
third-party cloud service providers

10
00:00:18,720 --> 00:00:21,300
while retaining the ability to process

11
00:00:21,300 --> 00:00:22,859
queries over them

12
00:00:22,859 --> 00:00:25,019
this is simple and efficient if the

13
00:00:25,019 --> 00:00:27,359
cloud service provider is trusted but

14
00:00:27,359 --> 00:00:29,880
this is not always the case

15
00:00:29,880 --> 00:00:32,880
in order to ensure data privacy a client

16
00:00:32,880 --> 00:00:34,800
might want to encrypt the data before

17
00:00:34,800 --> 00:00:37,500
Outsourcing it to the cloud this post is

18
00:00:37,500 --> 00:00:39,480
a challenge how do we query the

19
00:00:39,480 --> 00:00:41,460
encrypted database directly without

20
00:00:41,460 --> 00:00:43,739
detracting it first

21
00:00:43,739 --> 00:00:46,800
searchable symmetric encryption or SSE

22
00:00:46,800 --> 00:00:48,960
in short is a special class of

23
00:00:48,960 --> 00:00:51,120
encryption schemes that allow querying

24
00:00:51,120 --> 00:00:53,280
and updating symmetrically encrypted

25
00:00:53,280 --> 00:00:55,680
databases in an efficient manner while

26
00:00:55,680 --> 00:00:58,020
revealing very little information to an

27
00:00:58,020 --> 00:01:00,660
honest but curious server

28
00:01:00,660 --> 00:01:03,719
in this paper we propose joint crosstags

29
00:01:03,719 --> 00:01:06,420
or jxt in short a new practically

30
00:01:06,420 --> 00:01:08,880
efficient SSC scheme that supports

31
00:01:08,880 --> 00:01:11,280
equivalent queries over pairs of

32
00:01:11,280 --> 00:01:13,320
encrypted tables in an encrypted

33
00:01:13,320 --> 00:01:15,119
relational database

34
00:01:15,119 --> 00:01:17,220
here is a one slide example of an

35
00:01:17,220 --> 00:01:19,740
equation query we have two tables one

36
00:01:19,740 --> 00:01:21,720
for transactions and one for merchants

37
00:01:21,720 --> 00:01:24,420
with transaction ID serving as the joint

38
00:01:24,420 --> 00:01:26,700
attribute and we wish to find all

39
00:01:26,700 --> 00:01:28,920
records in the join of these two tables

40
00:01:28,920 --> 00:01:32,159
with date being January 2022 and Market

41
00:01:32,159 --> 00:01:34,500
name being Apple

42
00:01:34,500 --> 00:01:37,380
jxt supports such queries without any

43
00:01:37,380 --> 00:01:40,259
pre-processing of joins and with some

44
00:01:40,259 --> 00:01:42,299
additional storage overheads which are

45
00:01:42,299 --> 00:01:43,799
proportional to the number of join

46
00:01:43,799 --> 00:01:45,900
attributes this is typically small in

47
00:01:45,900 --> 00:01:46,860
practice

48
00:01:46,860 --> 00:01:49,680
jxt is a purely symmetric key primitive

49
00:01:49,680 --> 00:01:52,259
which makes it practically efficient and

50
00:01:52,259 --> 00:01:54,240
highly scalable to extremely large

51
00:01:54,240 --> 00:01:56,880
encrypted databases

52
00:01:56,880 --> 00:01:59,700
jxt is in fact the only SSC scheme

53
00:01:59,700 --> 00:02:02,100
tilted to support joined queries with no

54
00:02:02,100 --> 00:02:04,200
preprocessing of joints and while

55
00:02:04,200 --> 00:02:06,960
allowing flexible table updates

56
00:02:06,960 --> 00:02:10,258
in particular jxt avoids storage blow

57
00:02:10,258 --> 00:02:12,060
ups due to explicit joint computations

58
00:02:12,060 --> 00:02:14,760
while allowing tables to be set up and

59
00:02:14,760 --> 00:02:16,980
updated independently without any

60
00:02:16,980 --> 00:02:20,299
recomputation of jobs

61
00:02:20,340 --> 00:02:23,040
jxt incurs at default storage overhead

62
00:02:23,040 --> 00:02:25,200
where T is the number of designated join

63
00:02:25,200 --> 00:02:27,720
attributes T is typically small in

64
00:02:27,720 --> 00:02:29,940
practice as the join attribute would be

65
00:02:29,940 --> 00:02:32,700
the primary or secondary key of a table

66
00:02:32,700 --> 00:02:35,819
in terms of search overheads jxt incurs

67
00:02:35,819 --> 00:02:37,860
a linear communication overhead and

68
00:02:37,860 --> 00:02:39,599
linear computation overheads at the

69
00:02:39,599 --> 00:02:41,940
client while Outsourcing the heavy

70
00:02:41,940 --> 00:02:44,280
quadratic computational overheads to the

71
00:02:44,280 --> 00:02:45,300
server

72
00:02:45,300 --> 00:02:48,300
finally jxt is fully compatible with

73
00:02:48,300 --> 00:02:50,519
state-of-the-art SSE schemes for Boolean

74
00:02:50,519 --> 00:02:53,220
queries such as oblivious crosstags and

75
00:02:53,220 --> 00:02:55,080
can be used in conjunction with such

76
00:02:55,080 --> 00:02:57,599
schemes to support Rich Boolean queries

77
00:02:57,599 --> 00:02:59,879
over joints of encrypted tables in

78
00:02:59,879 --> 00:03:02,400
encrypted relational databases

79
00:03:02,400 --> 00:03:04,920
for more details on the construction and

80
00:03:04,920 --> 00:03:07,980
leakage of GXT do tune into our talk at

81
00:03:07,980 --> 00:03:10,860
Asia trip on Wednesday thank you and see

82
00:03:10,860 --> 00:03:14,720
you at Asia group 2022

