1
00:00:00,000 --> 00:00:01,979
yeah

2
00:00:01,979 --> 00:00:05,540
or focusing recession the first topics

3
00:00:05,540 --> 00:00:07,859
Universal link signature in the standard

4
00:00:07,859 --> 00:00:11,460
model by Pedro Branco Nico dot ring

5
00:00:11,460 --> 00:00:16,940
Sarah one and sterawin poke please

6
00:00:17,940 --> 00:00:20,699
okay hello good morning and thanks for

7
00:00:20,699 --> 00:00:23,160
coming to this very early session

8
00:00:23,160 --> 00:00:25,439
um I'm Stella and I'm presented in a

9
00:00:25,439 --> 00:00:27,420
joint work with Peter Bronco and Nico

10
00:00:27,420 --> 00:00:29,640
dudling and our paper is called

11
00:00:29,640 --> 00:00:31,320
Universal ring signatures in the

12
00:00:31,320 --> 00:00:32,880
standard model

13
00:00:32,880 --> 00:00:34,380
um to explain I will first get into

14
00:00:34,380 --> 00:00:37,640
water ring signatures

15
00:00:39,300 --> 00:00:42,300
okay

16
00:00:43,280 --> 00:00:45,899
so ring signatures are just regular

17
00:00:45,899 --> 00:00:48,000
signatures where instead of using one

18
00:00:48,000 --> 00:00:50,160
key and signing and verification you use

19
00:00:50,160 --> 00:00:52,860
a whole ring of keys and what you get

20
00:00:52,860 --> 00:00:55,079
from this is anonymity and unfortability

21
00:00:55,079 --> 00:00:57,960
so if you have a verifying signature you

22
00:00:57,960 --> 00:00:59,699
want to be sure that somebody in this

23
00:00:59,699 --> 00:01:02,940
ring has signed it but you should not be

24
00:01:02,940 --> 00:01:05,099
able to tell who exactly so this is the

25
00:01:05,099 --> 00:01:07,040
anonymity part

26
00:01:07,040 --> 00:01:10,200
where it's used nowadays this is used a

27
00:01:10,200 --> 00:01:12,600
lot in cryptocurrencies but today we

28
00:01:12,600 --> 00:01:14,820
want to go back to its first use case

29
00:01:14,820 --> 00:01:17,340
which was whistleblowing and the whole

30
00:01:17,340 --> 00:01:19,439
idea here is with this ring you can

31
00:01:19,439 --> 00:01:21,540
basically hide yourself in a crowd and

32
00:01:21,540 --> 00:01:24,119
it will not be clear who exactly

33
00:01:24,119 --> 00:01:26,460
um said something

34
00:01:26,460 --> 00:01:28,560
so governments don't really like

35
00:01:28,560 --> 00:01:31,080
whistleblowers and they want to protect

36
00:01:31,080 --> 00:01:35,220
themselves against it so

37
00:01:35,280 --> 00:01:38,100
um what is the setup for whistleblowing

38
00:01:38,100 --> 00:01:41,820
basically an employee wants to leak some

39
00:01:41,820 --> 00:01:45,600
data to a journalist and the whole

40
00:01:45,600 --> 00:01:47,579
reason why we want signatures here at

41
00:01:47,579 --> 00:01:49,740
all is for authenticity so the

42
00:01:49,740 --> 00:01:51,780
journalist wants to be sure that the

43
00:01:51,780 --> 00:01:54,360
leak that they receive is from somebody

44
00:01:54,360 --> 00:01:56,520
who actually has access to this type of

45
00:01:56,520 --> 00:01:58,320
data and it's not from a Reddit troll

46
00:01:58,320 --> 00:02:01,639
who's just making things up

47
00:02:01,860 --> 00:02:05,939
so how is this done we assume that the

48
00:02:05,939 --> 00:02:07,619
employee already has the public

49
00:02:07,619 --> 00:02:10,318
verification key for example for an RSA

50
00:02:10,318 --> 00:02:13,560
digital signature and in a first step

51
00:02:13,560 --> 00:02:16,200
they will pick people among which they

52
00:02:16,200 --> 00:02:18,840
want to be anonymous they choose their

53
00:02:18,840 --> 00:02:23,040
keys and they make a key ring

54
00:02:23,040 --> 00:02:26,340
in a second step they use this ring to

55
00:02:26,340 --> 00:02:29,400
sign their leak and they use a ring

56
00:02:29,400 --> 00:02:31,260
signature to do this so they can be

57
00:02:31,260 --> 00:02:33,120
anonymous but the journalists are sure

58
00:02:33,120 --> 00:02:34,739
that somebody from those people for

59
00:02:34,739 --> 00:02:36,480
example everybody working in the same

60
00:02:36,480 --> 00:02:37,520
department

61
00:02:37,520 --> 00:02:40,739
has actually signed this and the data is

62
00:02:40,739 --> 00:02:43,080
authentic

63
00:02:43,080 --> 00:02:46,500
but we can never have nice things so

64
00:02:46,500 --> 00:02:49,800
it's not really so easy nowadays because

65
00:02:49,800 --> 00:02:51,480
well

66
00:02:51,480 --> 00:02:54,540
we don't just have RSA so there's a lot

67
00:02:54,540 --> 00:02:56,580
of different schemes in place

68
00:02:56,580 --> 00:02:59,700
and not for all of them is it clear

69
00:02:59,700 --> 00:03:01,560
whether there are ring signatures or not

70
00:03:01,560 --> 00:03:04,200
and especially if you have to use

71
00:03:04,200 --> 00:03:06,980
different uh key signatures

72
00:03:06,980 --> 00:03:09,360
keys from different signature schemes

73
00:03:09,360 --> 00:03:11,400
because maybe not everybody in your

74
00:03:11,400 --> 00:03:13,800
department is using RSA

75
00:03:13,800 --> 00:03:16,440
it's not quite clear there are some

76
00:03:16,440 --> 00:03:19,440
previous results which do this for some

77
00:03:19,440 --> 00:03:22,860
types of schemes but there is no result

78
00:03:22,860 --> 00:03:25,019
yet that shows that for every type of

79
00:03:25,019 --> 00:03:27,680
scheme you can do this

80
00:03:27,680 --> 00:03:30,480
so a clever government might have the

81
00:03:30,480 --> 00:03:34,140
idea oh okay maybe if these signatures

82
00:03:34,140 --> 00:03:35,760
they all allow for ring signatures we

83
00:03:35,760 --> 00:03:37,200
just forbid all of them

84
00:03:37,200 --> 00:03:40,080
and we wanted to ask ourselves if this

85
00:03:40,080 --> 00:03:44,280
is actually possible and if there remain

86
00:03:44,280 --> 00:03:46,860
any schemes that you can use which do

87
00:03:46,860 --> 00:03:48,540
not allow to be used in such an

88
00:03:48,540 --> 00:03:50,459
unlimited ring

89
00:03:50,459 --> 00:03:53,400
and our result says

90
00:03:53,400 --> 00:03:54,720
no

91
00:03:54,720 --> 00:03:57,000
no there is no

92
00:03:57,000 --> 00:03:59,459
some terms and conditions to apply and

93
00:03:59,459 --> 00:04:02,700
we will get to this in our talk today

94
00:04:02,700 --> 00:04:03,799
so

95
00:04:03,799 --> 00:04:07,080
our proof is constructive so we actually

96
00:04:07,080 --> 00:04:09,180
give a new primitive called Universal

97
00:04:09,180 --> 00:04:11,700
ring signatures which solve precisely

98
00:04:11,700 --> 00:04:12,959
this problem

99
00:04:12,959 --> 00:04:14,939
so

100
00:04:14,939 --> 00:04:17,760
um if you get different keys from any

101
00:04:17,760 --> 00:04:20,639
type of signing schemes we allow you to

102
00:04:20,639 --> 00:04:22,860
make a ring and then a ring signature

103
00:04:22,860 --> 00:04:24,120
from it

104
00:04:24,120 --> 00:04:27,240
and the Syntax for this is as follows we

105
00:04:27,240 --> 00:04:29,940
do not have a key generation because the

106
00:04:29,940 --> 00:04:32,220
key generation needs to be inherited

107
00:04:32,220 --> 00:04:34,199
from the underlying signature skills

108
00:04:34,199 --> 00:04:36,120
like we want this to be fully compatible

109
00:04:36,120 --> 00:04:39,360
with already published keys

110
00:04:39,360 --> 00:04:41,280
and

111
00:04:41,280 --> 00:04:44,400
otherwise we only include an additional

112
00:04:44,400 --> 00:04:48,479
list of schemes that are allowed so this

113
00:04:48,479 --> 00:04:50,940
is really the only change so basically a

114
00:04:50,940 --> 00:04:53,400
verifying signature is now the signature

115
00:04:53,400 --> 00:04:56,280
that verifies for one of these keys

116
00:04:56,280 --> 00:05:00,198
under one of these schemes

117
00:05:00,900 --> 00:05:02,759
so

118
00:05:02,759 --> 00:05:05,460
there is a very very obvious solution to

119
00:05:05,460 --> 00:05:08,940
this which uses a trusted setup or the

120
00:05:08,940 --> 00:05:10,680
random Oracle model

121
00:05:10,680 --> 00:05:12,800
and

122
00:05:12,800 --> 00:05:16,380
we don't want to do this the question is

123
00:05:16,380 --> 00:05:19,560
why don't we do this

124
00:05:19,560 --> 00:05:22,020
would be so easy

125
00:05:22,020 --> 00:05:25,100
so for the CRS you have to note that

126
00:05:25,100 --> 00:05:27,780
whistleblowing is not a trusted scenario

127
00:05:27,780 --> 00:05:31,020
so whoever is used in the anonymity ring

128
00:05:31,020 --> 00:05:33,600
might later claim they do not trust the

129
00:05:33,600 --> 00:05:35,900
CRS used

130
00:05:35,900 --> 00:05:38,280
because this is kind of like an

131
00:05:38,280 --> 00:05:42,180
adversial setting where people get

132
00:05:42,180 --> 00:05:45,479
included without them agreeing

133
00:05:45,479 --> 00:05:48,660
so this is bad and for the random Oracle

134
00:05:48,660 --> 00:05:50,520
the problem is that it needs to be

135
00:05:50,520 --> 00:05:53,580
instantiated in practice and we show in

136
00:05:53,580 --> 00:05:55,440
our paper that there are some potential

137
00:05:55,440 --> 00:05:58,860
soundness issues with this

138
00:05:58,860 --> 00:06:02,580
so it is the standard model then why is

139
00:06:02,580 --> 00:06:04,199
this paper Worthy

140
00:06:04,199 --> 00:06:07,259
let's get into the challenge

141
00:06:07,259 --> 00:06:09,860
so

142
00:06:10,259 --> 00:06:12,120
um we have two properties first

143
00:06:12,120 --> 00:06:14,940
unfortability essentially what happens

144
00:06:14,940 --> 00:06:18,060
here is the adversary gets some ring of

145
00:06:18,060 --> 00:06:19,560
honest keys

146
00:06:19,560 --> 00:06:22,319
they can corrupt some keys they can ask

147
00:06:22,319 --> 00:06:24,240
for some signatures and also ring

148
00:06:24,240 --> 00:06:27,720
signatures and in the end essentially

149
00:06:27,720 --> 00:06:30,840
they do have to provide us with a porch

150
00:06:30,840 --> 00:06:33,539
that is a verifying signature a very

151
00:06:33,539 --> 00:06:36,419
fine ring signature for just another

152
00:06:36,419 --> 00:06:40,500
strings for just honest keys in the ring

153
00:06:40,500 --> 00:06:41,940
and

154
00:06:41,940 --> 00:06:44,039
since we know that we cannot change

155
00:06:44,039 --> 00:06:45,960
anything in the keys and we cannot

156
00:06:45,960 --> 00:06:50,460
really put any additional setup things

157
00:06:50,460 --> 00:06:52,560
um the only thing we realize that we can

158
00:06:52,560 --> 00:06:54,840
base unforgeability on is

159
00:06:54,840 --> 00:06:57,000
unfortunatability of the underlying

160
00:06:57,000 --> 00:06:58,460
schemes

161
00:06:58,460 --> 00:07:01,319
and therefore from this Forge we must be

162
00:07:01,319 --> 00:07:02,759
able to

163
00:07:02,759 --> 00:07:05,220
extract the signature for one of the

164
00:07:05,220 --> 00:07:08,280
underlying schemes okay let's keep that

165
00:07:08,280 --> 00:07:09,479
in mind

166
00:07:09,479 --> 00:07:12,300
on the other hand we have anonymity

167
00:07:12,300 --> 00:07:14,699
where also the adversary gets some

168
00:07:14,699 --> 00:07:16,259
honest keys

169
00:07:16,259 --> 00:07:19,319
and they can then pick two of these keys

170
00:07:19,319 --> 00:07:21,780
and we will sign with one of them and

171
00:07:21,780 --> 00:07:25,099
they have to guess which one signed

172
00:07:25,099 --> 00:07:28,979
and what we note here is that what they

173
00:07:28,979 --> 00:07:31,580
get here

174
00:07:31,740 --> 00:07:33,960
um it's very much shaped like what we

175
00:07:33,960 --> 00:07:35,819
get in their Forge

176
00:07:35,819 --> 00:07:39,300
so if the adversary here would be able

177
00:07:39,300 --> 00:07:44,340
to also extract the signature from Sigma

178
00:07:44,340 --> 00:07:47,460
star that would be very very bad because

179
00:07:47,460 --> 00:07:50,460
then they could infer which of the

180
00:07:50,460 --> 00:07:53,039
people actually signed

181
00:07:53,039 --> 00:07:57,360
so they must not be able to extract

182
00:07:57,360 --> 00:08:00,360
and now the question is really how can

183
00:08:00,360 --> 00:08:02,819
the reduction in unforgeability get an

184
00:08:02,819 --> 00:08:06,660
edge over the anonymity adversary

185
00:08:06,660 --> 00:08:09,060
without changing anything in the key

186
00:08:09,060 --> 00:08:11,099
structure or putting other additional

187
00:08:11,099 --> 00:08:13,139
elements because that's how it is

188
00:08:13,139 --> 00:08:15,120
usually done in pre-existing ring

189
00:08:15,120 --> 00:08:17,660
signatures

190
00:08:18,060 --> 00:08:20,039
so

191
00:08:20,039 --> 00:08:22,199
let's recap we need to hide a signature

192
00:08:22,199 --> 00:08:24,720
somewhere where only the reduction can

193
00:08:24,720 --> 00:08:26,360
find it

194
00:08:26,360 --> 00:08:29,340
and we found two different ways to do

195
00:08:29,340 --> 00:08:30,780
this

196
00:08:30,780 --> 00:08:33,419
one way is we give the reduction more

197
00:08:33,419 --> 00:08:35,219
runtime and then we use complexity

198
00:08:35,219 --> 00:08:37,440
leveraging but this is not the most

199
00:08:37,440 --> 00:08:39,179
elegant solution

200
00:08:39,179 --> 00:08:42,839
and so the second thing we did is we did

201
00:08:42,839 --> 00:08:45,839
find a way to give the reduction some

202
00:08:45,839 --> 00:08:48,660
more information and then use witness

203
00:08:48,660 --> 00:08:51,180
encryption based on it we will give a

204
00:08:51,180 --> 00:08:53,339
bit more information about both of these

205
00:08:53,339 --> 00:08:55,860
constructions in this talk but first a

206
00:08:55,860 --> 00:08:58,500
little bit of a comparison

207
00:08:58,500 --> 00:09:02,459
so there are these two previous works

208
00:09:02,459 --> 00:09:06,600
they do give ring signatures for a

209
00:09:06,600 --> 00:09:07,980
couple of

210
00:09:07,980 --> 00:09:10,440
signature schemes but they assume a

211
00:09:10,440 --> 00:09:12,540
certain structure on them and also they

212
00:09:12,540 --> 00:09:14,660
are not in the standard model

213
00:09:14,660 --> 00:09:19,279
our complexity leveraging scheme

214
00:09:19,560 --> 00:09:22,320
has the downside that we need the

215
00:09:22,320 --> 00:09:24,240
signatures to be super polynomial and

216
00:09:24,240 --> 00:09:28,140
secure so this is not truly Universal in

217
00:09:28,140 --> 00:09:30,360
that sense so that's why we decided to

218
00:09:30,360 --> 00:09:33,120
fix it with this witness encryption

219
00:09:33,120 --> 00:09:35,279
Construction

220
00:09:35,279 --> 00:09:38,820
however there are Forest results is only

221
00:09:38,820 --> 00:09:41,760
linear in the size of the Ring

222
00:09:41,760 --> 00:09:45,420
and we do Boost this by making a special

223
00:09:45,420 --> 00:09:48,380
witness encryption using IO

224
00:09:48,380 --> 00:09:50,880
and there is another caveat that we have

225
00:09:50,880 --> 00:09:54,120
to note so we do have to lower our

226
00:09:54,120 --> 00:09:56,700
anonymity guarantee a little bit

227
00:09:56,700 --> 00:09:58,860
so normally you're anonymous as I told

228
00:09:58,860 --> 00:10:00,600
you before where you have to have two

229
00:10:00,600 --> 00:10:05,100
honest keys and in this case we need a

230
00:10:05,100 --> 00:10:09,000
fixed higher number of keys usually this

231
00:10:09,000 --> 00:10:11,399
will be three or four honest keys in a

232
00:10:11,399 --> 00:10:14,519
ring for achieving anonymity

233
00:10:14,519 --> 00:10:16,800
okay

234
00:10:16,800 --> 00:10:19,440
so let's get into the first solution

235
00:10:19,440 --> 00:10:21,779
with complexity leveraging this is more

236
00:10:21,779 --> 00:10:25,980
of a warm-up it's pretty standard so

237
00:10:25,980 --> 00:10:26,519
um

238
00:10:26,519 --> 00:10:29,580
given a key and a message that you want

239
00:10:29,580 --> 00:10:33,060
to sign what we said is we want to be

240
00:10:33,060 --> 00:10:36,000
able to extract signature in the end so

241
00:10:36,000 --> 00:10:39,600
let's first make a regular signature

242
00:10:39,600 --> 00:10:42,420
and then we want to hide the signature

243
00:10:42,420 --> 00:10:45,600
and we decided to hide the signature in

244
00:10:45,600 --> 00:10:47,360
a commitment

245
00:10:47,360 --> 00:10:51,240
and we use a keyless commitment so that

246
00:10:51,240 --> 00:10:55,339
we can forego this changing of the keys

247
00:10:55,339 --> 00:10:58,200
and the Assumption here is really that

248
00:10:58,200 --> 00:11:00,660
this commitment can be broken in some

249
00:11:00,660 --> 00:11:02,519
super polynomial time T but the

250
00:11:02,519 --> 00:11:05,339
signature schemes cannot

251
00:11:05,339 --> 00:11:08,459
and additionally we add a Navy probe to

252
00:11:08,459 --> 00:11:10,079
show that everything is done correctly

253
00:11:10,079 --> 00:11:14,399
and this constitutes the ring signature

254
00:11:14,399 --> 00:11:16,560
this is

255
00:11:16,560 --> 00:11:18,200
unfortable

256
00:11:18,200 --> 00:11:21,660
simply by these assumptions so if the

257
00:11:21,660 --> 00:11:23,519
adversary could make a forge we could

258
00:11:23,519 --> 00:11:25,339
extract in time

259
00:11:25,339 --> 00:11:29,399
a team from it an underlying signature

260
00:11:29,399 --> 00:11:31,040
which

261
00:11:31,040 --> 00:11:33,660
violates the unforgeability that is

262
00:11:33,660 --> 00:11:35,100
assumed

263
00:11:35,100 --> 00:11:37,860
so this is an unfortable scheme for

264
00:11:37,860 --> 00:11:40,320
anonymity we do a bit of a standard

265
00:11:40,320 --> 00:11:41,940
trick so instead of doing this whole

266
00:11:41,940 --> 00:11:43,980
commitment once we do it twice and then

267
00:11:43,980 --> 00:11:47,459
also provide an or in the media proof

268
00:11:47,459 --> 00:11:50,760
and then we can basically switch

269
00:11:50,760 --> 00:11:53,220
the fulfilled statement from one side to

270
00:11:53,220 --> 00:11:56,640
the other and swap the signatures that I

271
00:11:56,640 --> 00:11:57,980
used around

272
00:11:57,980 --> 00:12:00,300
so that's also very

273
00:12:00,300 --> 00:12:02,120
clever

274
00:12:02,120 --> 00:12:07,200
and there is one problem here which is

275
00:12:07,200 --> 00:12:09,600
the size if you look closely here

276
00:12:09,600 --> 00:12:11,459
there's a really really really long or

277
00:12:11,459 --> 00:12:15,060
statement that says this must be a true

278
00:12:15,060 --> 00:12:17,880
for the first key and the first scheme

279
00:12:17,880 --> 00:12:19,680
or the second key and the first scheme

280
00:12:19,680 --> 00:12:21,540
or the seventh key and the 13th scheme

281
00:12:21,540 --> 00:12:24,120
and so forth so this will blow up really

282
00:12:24,120 --> 00:12:27,839
really badly and there is gladly a trick

283
00:12:27,839 --> 00:12:31,019
for this from the literature which uses

284
00:12:31,019 --> 00:12:34,560
somewhere perfectly binding hashing and

285
00:12:34,560 --> 00:12:39,720
we will omit this here for time reasons

286
00:12:39,720 --> 00:12:42,300
and the only thing that Still Remains is

287
00:12:42,300 --> 00:12:44,220
that we do not like the super polynomial

288
00:12:44,220 --> 00:12:45,480
assumption

289
00:12:45,480 --> 00:12:48,899
so how can we fix that

290
00:12:48,899 --> 00:12:53,160
so as I said this commitment thing was

291
00:12:53,160 --> 00:12:55,740
really used because we didn't need a key

292
00:12:55,740 --> 00:12:58,139
and what we thought was a good

293
00:12:58,139 --> 00:12:59,940
replacement would be witness encryption

294
00:12:59,940 --> 00:13:02,579
because there you can use a statement as

295
00:13:02,579 --> 00:13:06,079
a key that can be inferred from The

296
00:13:06,079 --> 00:13:10,700
Ring signature without changing keys

297
00:13:10,700 --> 00:13:14,639
and this can help us drop this uh super

298
00:13:14,639 --> 00:13:17,040
polynomial assumption

299
00:13:17,040 --> 00:13:18,300
and

300
00:13:18,300 --> 00:13:22,139
what are we using as a statement oh no

301
00:13:22,139 --> 00:13:24,480
first okay witness encryption

302
00:13:24,480 --> 00:13:27,480
encrypt to a statement and then it

303
00:13:27,480 --> 00:13:30,120
decrypts to witness for this statement

304
00:13:30,120 --> 00:13:32,399
if you have a correct witness then you

305
00:13:32,399 --> 00:13:35,579
get back what was encrypted if there is

306
00:13:35,579 --> 00:13:37,500
no correct witness namely if the

307
00:13:37,500 --> 00:13:39,600
statement is false then you get CPA

308
00:13:39,600 --> 00:13:42,240
security just as an overview

309
00:13:42,240 --> 00:13:44,880
so

310
00:13:44,880 --> 00:13:46,860
yes

311
00:13:46,860 --> 00:13:49,560
um in this uh challenge that I showed

312
00:13:49,560 --> 00:13:51,360
you before with these two uh different

313
00:13:51,360 --> 00:13:53,820
experiments we noticed that there is

314
00:13:53,820 --> 00:13:57,240
just one little little bit where we do

315
00:13:57,240 --> 00:13:59,880
have some

316
00:13:59,880 --> 00:14:01,579
um degree of freedom for the reduction

317
00:14:01,579 --> 00:14:03,600
and that is the choice of this

318
00:14:03,600 --> 00:14:05,519
Randomness here

319
00:14:05,519 --> 00:14:07,019
um really everything else is kind of

320
00:14:07,019 --> 00:14:09,240
fixed in handing out the keys

321
00:14:09,240 --> 00:14:11,579
but this we can do

322
00:14:11,579 --> 00:14:13,740
so what do we do with it

323
00:14:13,740 --> 00:14:15,600
basically normally you would have some

324
00:14:15,600 --> 00:14:18,899
independently chosen keys but we make a

325
00:14:18,899 --> 00:14:21,899
second mode where we have some mail form

326
00:14:21,899 --> 00:14:24,240
Keys you can think of this for now that

327
00:14:24,240 --> 00:14:26,360
you have some general key that would

328
00:14:26,360 --> 00:14:28,560
help you

329
00:14:28,560 --> 00:14:29,519
um

330
00:14:29,519 --> 00:14:32,279
to use instead of all of these Keys you

331
00:14:32,279 --> 00:14:34,880
can just use this one General key

332
00:14:34,880 --> 00:14:37,920
what is this General key in our qas it

333
00:14:37,920 --> 00:14:41,339
is a prf key which is used to make the

334
00:14:41,339 --> 00:14:45,680
seeds for the signing keys

335
00:14:45,680 --> 00:14:48,660
so we're using this one degree where we

336
00:14:48,660 --> 00:14:51,720
have Randomness really to choose

337
00:14:51,720 --> 00:14:53,699
so

338
00:14:53,699 --> 00:14:57,060
this is naturally a lot more sparse like

339
00:14:57,060 --> 00:14:59,220
for normal independently chosen teeth it

340
00:14:59,220 --> 00:15:01,680
is very unlikely that such a prf key

341
00:15:01,680 --> 00:15:04,320
exists that we can make all of their

342
00:15:04,320 --> 00:15:06,600
randomnesses from it

343
00:15:06,600 --> 00:15:09,180
and so these are indistinguishable

344
00:15:09,180 --> 00:15:10,680
website awareness these two

345
00:15:10,680 --> 00:15:12,839
distributions but they are also far

346
00:15:12,839 --> 00:15:14,639
apart

347
00:15:14,639 --> 00:15:16,820
and there is a witness

348
00:15:16,820 --> 00:15:20,160
for us having chosen a malformed key

349
00:15:20,160 --> 00:15:24,300
uh distribution namely this prf key

350
00:15:24,300 --> 00:15:26,339
so we basically have everything we need

351
00:15:26,339 --> 00:15:28,260
for witness encryption

352
00:15:28,260 --> 00:15:30,120
to do it a little bit more specifically

353
00:15:30,120 --> 00:15:33,660
so here you can see uh for standard Keys

354
00:15:33,660 --> 00:15:35,699
we have all these randomnesses so

355
00:15:35,699 --> 00:15:37,800
actually learn them and for malformed

356
00:15:37,800 --> 00:15:41,579
Keys we have them as a prf of 1p and

357
00:15:41,579 --> 00:15:43,680
their index

358
00:15:43,680 --> 00:15:45,120
and

359
00:15:45,120 --> 00:15:48,199
what we note now

360
00:15:50,100 --> 00:15:53,339
um we think about what precisely to pick

361
00:15:53,339 --> 00:15:55,800
as a statement so basically we only want

362
00:15:55,800 --> 00:15:57,480
to use these malform keys where we want

363
00:15:57,480 --> 00:15:59,399
the reduction to extract so in

364
00:15:59,399 --> 00:16:02,459
unfortability and there the reduction

365
00:16:02,459 --> 00:16:04,980
can control all but one key so one key

366
00:16:04,980 --> 00:16:06,660
they have to get from the underlying

367
00:16:06,660 --> 00:16:09,839
unfortability experiment

368
00:16:09,839 --> 00:16:10,920
um

369
00:16:10,920 --> 00:16:13,500
so naturally we just choose the

370
00:16:13,500 --> 00:16:15,540
statement the statement is a ring of

371
00:16:15,540 --> 00:16:18,420
keys and it is in the language if all

372
00:16:18,420 --> 00:16:19,980
but one of the keys are malformed in

373
00:16:19,980 --> 00:16:21,420
this way

374
00:16:21,420 --> 00:16:24,079
so

375
00:16:24,959 --> 00:16:26,639
um what does now hold in the anonymity

376
00:16:26,639 --> 00:16:28,079
like we already made sure in

377
00:16:28,079 --> 00:16:29,880
unforgeability that we can extract but

378
00:16:29,880 --> 00:16:32,639
in anonymity what happens so the

379
00:16:32,639 --> 00:16:36,360
adversary must use T honest keys

380
00:16:36,360 --> 00:16:38,519
um in RT anonymity this is potentially

381
00:16:38,519 --> 00:16:40,259
more than two this is where this comes

382
00:16:40,259 --> 00:16:41,839
from

383
00:16:41,839 --> 00:16:43,440
so

384
00:16:43,440 --> 00:16:46,440
um basically for them to succeed in

385
00:16:46,440 --> 00:16:49,199
opening the witness encryption they need

386
00:16:49,199 --> 00:16:51,300
that at least T minus one of them

387
00:16:51,300 --> 00:16:52,920
because they can choose their small male

388
00:16:52,920 --> 00:16:54,540
form but they cannot choose the honest

389
00:16:54,540 --> 00:16:57,240
ones to be essentially malformed and

390
00:16:57,240 --> 00:16:58,259
then

391
00:16:58,259 --> 00:17:02,940
um we show that this is unlikely

392
00:17:02,940 --> 00:17:05,400
by looking at the Min entropy

393
00:17:05,400 --> 00:17:07,619
so the main entropy of the malformed

394
00:17:07,619 --> 00:17:09,959
keys is always going to just be Lambda

395
00:17:09,959 --> 00:17:12,540
because we really only choose this one

396
00:17:12,540 --> 00:17:16,199
key but then on the other hand since for

397
00:17:16,199 --> 00:17:17,939
standard keys they are all independently

398
00:17:17,939 --> 00:17:20,220
chosen we have the number of keys times

399
00:17:20,220 --> 00:17:24,540
the lowest entropy of each of these key

400
00:17:24,540 --> 00:17:26,780
generation schemes

401
00:17:26,780 --> 00:17:30,960
as a lower bound on the entropy so if we

402
00:17:30,960 --> 00:17:33,900
pick T big enough then this will be

403
00:17:33,900 --> 00:17:36,919
considerably bigger

404
00:17:37,620 --> 00:17:40,520
so what do we need to pick

405
00:17:40,520 --> 00:17:43,740
so we can assume for a secure scheme

406
00:17:43,740 --> 00:17:45,660
that people would accept that this

407
00:17:45,660 --> 00:17:49,020
amount of entropy in the key generation

408
00:17:49,020 --> 00:17:51,960
is roughly in the order of the security

409
00:17:51,960 --> 00:17:55,080
parameter and so here for example if

410
00:17:55,080 --> 00:17:57,780
it's half the amount of bits as the

411
00:17:57,780 --> 00:18:00,419
security parameter so like out of every

412
00:18:00,419 --> 00:18:02,700
two bits of Randomness you get one bit

413
00:18:02,700 --> 00:18:04,380
of entropy in the key

414
00:18:04,380 --> 00:18:07,500
then uh ts4 is sufficient and we think

415
00:18:07,500 --> 00:18:09,960
that this will be a reasonable

416
00:18:09,960 --> 00:18:12,660
assumption for a lot of schemes

417
00:18:12,660 --> 00:18:15,360
so to put it together basically we

418
00:18:15,360 --> 00:18:17,400
dropped the commitment and put a witness

419
00:18:17,400 --> 00:18:19,020
encryption there

420
00:18:19,020 --> 00:18:20,700
but everything else stays as it was

421
00:18:20,700 --> 00:18:22,340
before

422
00:18:22,340 --> 00:18:25,500
and unfortability now holds

423
00:18:25,500 --> 00:18:28,380
as I just explained because the

424
00:18:28,380 --> 00:18:30,840
reduction can get one key from the

425
00:18:30,840 --> 00:18:34,020
underlying Challenge from

426
00:18:34,020 --> 00:18:35,700
the unfoldibility of the underlying

427
00:18:35,700 --> 00:18:38,520
scheme and the rest that picks malformed

428
00:18:38,520 --> 00:18:41,280
and then they can extract and anonymity

429
00:18:41,280 --> 00:18:43,679
it will take honest keys and as we just

430
00:18:43,679 --> 00:18:45,660
discussed then it's very unlikely that

431
00:18:45,660 --> 00:18:47,460
the adversary can extract

432
00:18:47,460 --> 00:18:49,640
foreign

433
00:18:50,940 --> 00:18:52,860
the size

434
00:18:52,860 --> 00:18:55,799
namely here the statements in the

435
00:18:55,799 --> 00:18:57,179
witness encryption they are very very

436
00:18:57,179 --> 00:18:58,860
long because they include all of the

437
00:18:58,860 --> 00:19:02,100
Rings so

438
00:19:02,160 --> 00:19:03,720
um I will quickly give you an overview

439
00:19:03,720 --> 00:19:05,880
of how we will fix this

440
00:19:05,880 --> 00:19:08,820
so instead of using one outputting one

441
00:19:08,820 --> 00:19:10,440
long witness encryption for all of the

442
00:19:10,440 --> 00:19:13,020
keys we split it into smaller witness

443
00:19:13,020 --> 00:19:15,120
encryptions for where we just say oh

444
00:19:15,120 --> 00:19:16,559
this key is now from this key is

445
00:19:16,559 --> 00:19:17,900
malformed

446
00:19:17,900 --> 00:19:24,860
and we sign we hide in them shares

447
00:19:24,960 --> 00:19:28,500
um which we pick such that a random

448
00:19:28,500 --> 00:19:30,840
um number gets out of the secret sharing

449
00:19:30,840 --> 00:19:33,419
if we get enough of them

450
00:19:33,419 --> 00:19:35,400
decrypted

451
00:19:35,400 --> 00:19:38,160
and we use this basically as a one-time

452
00:19:38,160 --> 00:19:40,020
pad encryption of the message that we

453
00:19:40,020 --> 00:19:43,919
want to transmit and now what we notice

454
00:19:43,919 --> 00:19:47,160
that a large part of this we can create

455
00:19:47,160 --> 00:19:50,760
via a program instead of sending all of

456
00:19:50,760 --> 00:19:52,919
these single ones we give a program that

457
00:19:52,919 --> 00:19:54,419
essentially has

458
00:19:54,419 --> 00:19:58,799
some information in a hash stored about

459
00:19:58,799 --> 00:20:00,419
the

460
00:20:00,419 --> 00:20:01,380
um

461
00:20:01,380 --> 00:20:04,860
keys and then you will input one of the

462
00:20:04,860 --> 00:20:06,960
keys and it will verify yeah this is the

463
00:20:06,960 --> 00:20:09,179
set probably and then it gives you the

464
00:20:09,179 --> 00:20:11,280
corresponding ciphertext instead of you

465
00:20:11,280 --> 00:20:12,840
getting all the ciphertext so this is

466
00:20:12,840 --> 00:20:15,539
what we do to reduce the size and this

467
00:20:15,539 --> 00:20:18,960
is where we need to use IO then

468
00:20:18,960 --> 00:20:22,260
okay so as an overview we have shown

469
00:20:22,260 --> 00:20:25,140
today that ring signature is accessed

470
00:20:25,140 --> 00:20:30,179
for any type of signing schemes and also

471
00:20:30,179 --> 00:20:32,400
for using multiple types of signing

472
00:20:32,400 --> 00:20:33,900
schemes together

473
00:20:33,900 --> 00:20:36,480
and we do not need collaboration of any

474
00:20:36,480 --> 00:20:39,419
kind we've given three constructions one

475
00:20:39,419 --> 00:20:42,179
with the complexity leveraging and two

476
00:20:42,179 --> 00:20:44,400
with correlated Keys one of them is

477
00:20:44,400 --> 00:20:46,320
linear in size the other one needs to

478
00:20:46,320 --> 00:20:48,660
use IO

479
00:20:48,660 --> 00:20:50,220
and

480
00:20:50,220 --> 00:20:52,860
thank you for listening this talk are

481
00:20:52,860 --> 00:20:54,600
there any questions

482
00:20:54,600 --> 00:20:57,260
okay

483
00:21:00,480 --> 00:21:03,380
any questions

484
00:21:11,780 --> 00:21:14,460
thank you for the great talk uh I didn't

485
00:21:14,460 --> 00:21:18,179
see why you don't want to use uh London

486
00:21:18,179 --> 00:21:20,100
Morocco model what I find something

487
00:21:20,100 --> 00:21:22,860
issue means that it's a theoretical

488
00:21:22,860 --> 00:21:27,780
uh in theoretical sense so if there is

489
00:21:27,780 --> 00:21:33,059
some uh artificial scheme that uh if we

490
00:21:33,059 --> 00:21:34,919
instantiate random Morocco with their

491
00:21:34,919 --> 00:21:37,620
hash function then it may be uh in

492
00:21:37,620 --> 00:21:40,679
insecure so what do you mean by yeah

493
00:21:40,679 --> 00:21:42,960
yeah it's pretty much in that sense so

494
00:21:42,960 --> 00:21:44,940
we show that for

495
00:21:44,940 --> 00:21:47,159
um a secure signature scheme we can

496
00:21:47,159 --> 00:21:51,179
embed like an obfuscated circuit that

497
00:21:51,179 --> 00:21:52,679
will give you a ring signature and then

498
00:21:52,679 --> 00:21:54,960
this would have to be

499
00:21:54,960 --> 00:21:55,740
um

500
00:21:55,740 --> 00:21:57,360
still secure

501
00:21:57,360 --> 00:22:00,059
in the random Oracle model if we had a

502
00:22:00,059 --> 00:22:02,760
proof there but it is not

503
00:22:02,760 --> 00:22:05,480
okay thanks

504
00:22:14,820 --> 00:22:17,658
a question

505
00:22:18,960 --> 00:22:21,260
no

506
00:22:21,419 --> 00:22:23,780
yeah

507
00:22:24,780 --> 00:22:28,140
I just uh super question what is the

508
00:22:28,140 --> 00:22:30,720
assumption that frequency encryption

509
00:22:30,720 --> 00:22:33,780
exists sorry but what is the Assumption

510
00:22:33,780 --> 00:22:36,659
weakness encryption exists

511
00:22:36,659 --> 00:22:40,159
what assumption foreign

512
00:22:44,500 --> 00:22:46,520
[Music]

513
00:22:46,520 --> 00:22:48,840
I think we just assumed that witness

514
00:22:48,840 --> 00:22:50,700
encryption exists I know that it exists

515
00:22:50,700 --> 00:22:53,280
from IO but potentially it could exist

516
00:22:53,280 --> 00:22:55,380
from less than IO so this is why we

517
00:22:55,380 --> 00:22:58,880
distinguish between these two cases

518
00:22:59,240 --> 00:23:04,340
I assume that are you all right

519
00:23:05,179 --> 00:23:09,059
yeah your first team also assumed are

520
00:23:09,059 --> 00:23:11,100
you all right yeah the third scheme

521
00:23:11,100 --> 00:23:13,080
assumes IO directly and for the second

522
00:23:13,080 --> 00:23:15,240
scheme it is not clear whether we need i

523
00:23:15,240 --> 00:23:17,400
o to have witness encryption

524
00:23:17,400 --> 00:23:19,740
and we just know it's sufficient so we

525
00:23:19,740 --> 00:23:21,120
wanted to make the distinction if

526
00:23:21,120 --> 00:23:23,820
witness encryption becomes easier

527
00:23:23,820 --> 00:23:25,740
at some point

528
00:23:25,740 --> 00:23:28,020
okay

529
00:23:28,020 --> 00:23:28,200
[Music]

530
00:23:28,200 --> 00:23:29,820
yeah

531
00:23:29,820 --> 00:23:33,200
thanks speaker again

532
00:23:41,640 --> 00:23:44,840
next stop is

533
00:23:50,520 --> 00:23:52,380
the next stop is uh

534
00:23:52,380 --> 00:23:58,860
uh the ability brain signatures by

535
00:23:58,860 --> 00:24:04,620
you're a customer Julian Ross Jian you

536
00:24:04,620 --> 00:24:07,620
and

537
00:24:24,659 --> 00:24:27,659
seriously

538
00:24:28,520 --> 00:24:32,120
all right are you ready

539
00:24:33,539 --> 00:24:36,000
I think Julia will talk

540
00:24:36,000 --> 00:24:39,360
okay uh thanks for the introduction

541
00:24:39,360 --> 00:24:41,400
um yeah this is the talk about the other

542
00:24:41,400 --> 00:24:43,200
okamoto partial live line signatures

543
00:24:43,200 --> 00:24:45,419
team we visited

544
00:24:45,419 --> 00:24:46,980
um this is Joint work with you young

545
00:24:46,980 --> 00:24:48,960
loss and Xiao

546
00:24:48,960 --> 00:24:50,640
microphone doesn't seem to be working

547
00:24:50,640 --> 00:24:53,100
that well

548
00:24:53,100 --> 00:24:54,960
um

549
00:24:54,960 --> 00:24:57,659
yeah so in this team in this work we

550
00:24:57,659 --> 00:24:59,640
talk about uh partially blind signatures

551
00:24:59,640 --> 00:25:01,500
so first I want to explain to you what

552
00:25:01,500 --> 00:25:03,059
those are

553
00:25:03,059 --> 00:25:04,440
um so in a partially blind signature

554
00:25:04,440 --> 00:25:07,980
scheme we have a signer here denoted by

555
00:25:07,980 --> 00:25:10,020
a scroll and the user here denoted by

556
00:25:10,020 --> 00:25:13,140
unicorn and the signer has a secret key

557
00:25:13,140 --> 00:25:15,240
and the user knows the corresponding

558
00:25:15,240 --> 00:25:17,820
public key and also a message that he

559
00:25:17,820 --> 00:25:21,600
wants signed by the signer and they also

560
00:25:21,600 --> 00:25:24,840
agree on a shared information info so

561
00:25:24,840 --> 00:25:26,640
this could be for example a monetary

562
00:25:26,640 --> 00:25:28,380
value that we assigned to the message

563
00:25:28,380 --> 00:25:31,559
signature pair or also it could be an

564
00:25:31,559 --> 00:25:33,419
expiration date for the message

565
00:25:33,419 --> 00:25:34,820
signature pair

566
00:25:34,820 --> 00:25:37,919
and we consider three move partially

567
00:25:37,919 --> 00:25:41,400
blind signatures so uh here there are

568
00:25:41,400 --> 00:25:43,380
three messages that are being sent back

569
00:25:43,380 --> 00:25:45,840
and forth between the signer and the

570
00:25:45,840 --> 00:25:48,900
user and in the end the user learns a

571
00:25:48,900 --> 00:25:51,419
signature on the message

572
00:25:51,419 --> 00:25:54,380
that he has

573
00:25:54,380 --> 00:25:57,480
to motivate the security properties that

574
00:25:57,480 --> 00:25:59,400
we want from this let's look at a

575
00:25:59,400 --> 00:26:01,440
potential application

576
00:26:01,440 --> 00:26:05,640
so uh in the case of electronic cash the

577
00:26:05,640 --> 00:26:08,700
signer will be the bank

578
00:26:08,700 --> 00:26:11,159
and then the users are people who have

579
00:26:11,159 --> 00:26:13,020
bank accounts and who might want to

580
00:26:13,020 --> 00:26:15,299
withdraw money that they can then spend

581
00:26:15,299 --> 00:26:17,159
somewhere

582
00:26:17,159 --> 00:26:19,679
um so in this case we have some users

583
00:26:19,679 --> 00:26:22,559
who have withdrawn one dollar and two

584
00:26:22,559 --> 00:26:25,320
users have withdrawn five dollars and

585
00:26:25,320 --> 00:26:28,340
now if one of the five dollar users

586
00:26:28,340 --> 00:26:31,260
spends their money we want that the bank

587
00:26:31,260 --> 00:26:33,720
cannot tell which is the person who

588
00:26:33,720 --> 00:26:36,120
bought something

589
00:26:36,120 --> 00:26:38,640
um and more formally this means we have

590
00:26:38,640 --> 00:26:41,220
the partial blindness so here we want to

591
00:26:41,220 --> 00:26:43,140
protect an honest user against a

592
00:26:43,140 --> 00:26:45,419
malicious signer and the malicious

593
00:26:45,419 --> 00:26:47,400
signer will be allowed to choose the

594
00:26:47,400 --> 00:26:50,159
public key two messages and attack info

595
00:26:50,159 --> 00:26:51,299
to attack

596
00:26:51,299 --> 00:26:54,840
and then the user chooses a bit which

597
00:26:54,840 --> 00:26:57,600
will determine uh when he uses which

598
00:26:57,600 --> 00:27:00,659
message so when they interact twice the

599
00:27:00,659 --> 00:27:02,220
user will want use one of the messages

600
00:27:02,220 --> 00:27:04,380
in one interaction and the other message

601
00:27:04,380 --> 00:27:06,299
in the other interaction

602
00:27:06,299 --> 00:27:07,679
and

603
00:27:07,679 --> 00:27:10,919
um in the end the user will either

604
00:27:10,919 --> 00:27:13,620
output both message signature pairs if

605
00:27:13,620 --> 00:27:17,580
both interactions were successful or it

606
00:27:17,580 --> 00:27:20,100
will output an error symbol if at least

607
00:27:20,100 --> 00:27:22,880
one of the interactions was unsuccessful

608
00:27:22,880 --> 00:27:26,820
and these values are given to the signer

609
00:27:26,820 --> 00:27:29,340
and the signer has then to determine

610
00:27:29,340 --> 00:27:31,679
which of the messages was used in which

611
00:27:31,679 --> 00:27:34,440
of the interactions

612
00:27:34,440 --> 00:27:36,419
on the other hand of course for

613
00:27:36,419 --> 00:27:39,120
electronic cash we would want that if a

614
00:27:39,120 --> 00:27:42,419
user withdrew some money uh he cannot

615
00:27:42,419 --> 00:27:44,820
spend more or he cannot use different

616
00:27:44,820 --> 00:27:46,980
coins than what he got

617
00:27:46,980 --> 00:27:50,640
so uh here the user again has two fives

618
00:27:50,640 --> 00:27:52,080
and one one

619
00:27:52,080 --> 00:27:54,779
and we would for example not want that

620
00:27:54,779 --> 00:27:56,940
this user can somehow output three fives

621
00:27:56,940 --> 00:27:58,799
in the end

622
00:27:58,799 --> 00:28:01,080
um so for this we want one more

623
00:28:01,080 --> 00:28:02,760
unfortunatability

624
00:28:02,760 --> 00:28:05,100
so here we protect an owner signer

625
00:28:05,100 --> 00:28:08,520
against a malicious user and uh here

626
00:28:08,520 --> 00:28:11,340
again the signer will output a public

627
00:28:11,340 --> 00:28:13,740
key for the user to use

628
00:28:13,740 --> 00:28:16,740
and then the user gets to interact with

629
00:28:16,740 --> 00:28:20,220
the signer multiple times so uh also for

630
00:28:20,220 --> 00:28:22,980
multiple tags that he chooses so here

631
00:28:22,980 --> 00:28:25,799
for a green tag uh red tag

632
00:28:25,799 --> 00:28:27,480
a blue tag

633
00:28:27,480 --> 00:28:29,520
and again for the green tag for example

634
00:28:29,520 --> 00:28:32,700
and now if he has interacted for some

635
00:28:32,700 --> 00:28:34,380
tag L times

636
00:28:34,380 --> 00:28:37,440
uh the user will win the game if he

637
00:28:37,440 --> 00:28:40,860
manages to Output more than L message

638
00:28:40,860 --> 00:28:43,860
signature pairs for this tag

639
00:28:43,860 --> 00:28:46,200
so here the user would win for example

640
00:28:46,200 --> 00:28:48,179
if he manages for the green tag to

641
00:28:48,179 --> 00:28:50,820
Output L plus one message signature

642
00:28:50,820 --> 00:28:53,178
pairs

643
00:28:54,000 --> 00:28:56,700
in this work we consider a partially

644
00:28:56,700 --> 00:28:59,480
blind signature scheme by Avon okabuto

645
00:28:59,480 --> 00:29:02,340
this is an efficient discrete logarithm

646
00:29:02,340 --> 00:29:04,080
based scheme

647
00:29:04,080 --> 00:29:07,140
and it has been a very influential work

648
00:29:07,140 --> 00:29:09,299
because it's an inspiration for other

649
00:29:09,299 --> 00:29:12,059
schemes that use a similar technique the

650
00:29:12,059 --> 00:29:14,880
all-proof technique so examples of other

651
00:29:14,880 --> 00:29:17,159
schemes that uses or proof technique are

652
00:29:17,159 --> 00:29:19,500
esteemed by others this is a fully blind

653
00:29:19,500 --> 00:29:22,320
signature scheme uh the anonymous

654
00:29:22,320 --> 00:29:25,200
Prudential slide scheme and also a very

655
00:29:25,200 --> 00:29:28,020
recent lattice based scheme called Blind

656
00:29:28,020 --> 00:29:29,039
ore

657
00:29:29,039 --> 00:29:32,100
and especially the proof strategy from

658
00:29:32,100 --> 00:29:35,220
the original work is of interest for

659
00:29:35,220 --> 00:29:37,679
other similar scheme that also uses or

660
00:29:37,679 --> 00:29:40,260
proof technique

661
00:29:40,260 --> 00:29:42,899
so in this work we were looking at the

662
00:29:42,899 --> 00:29:45,559
proof for the one more unfortunatability

663
00:29:45,559 --> 00:29:49,799
and we found a gap in the proof and we

664
00:29:49,799 --> 00:29:52,860
mended that Gap while achieving similar

665
00:29:52,860 --> 00:29:55,320
bounds in terms of reduction loss as the

666
00:29:55,320 --> 00:29:57,980
original work

667
00:29:58,260 --> 00:30:02,399
so let's look at how the scheme works

668
00:30:02,399 --> 00:30:05,520
so um it is a scheme that's based on

669
00:30:05,520 --> 00:30:08,520
groups so discrete logarithm so we have

670
00:30:08,520 --> 00:30:11,580
a secret key which is an exponent

671
00:30:11,580 --> 00:30:13,260
um and the public key is a group

672
00:30:13,260 --> 00:30:15,659
generator raised to that exponent

673
00:30:15,659 --> 00:30:19,740
and um then there's a second part to the

674
00:30:19,740 --> 00:30:21,539
key in the you know manner of speaking

675
00:30:21,539 --> 00:30:23,220
which is

676
00:30:23,220 --> 00:30:25,620
um this set which is a hash of the

677
00:30:25,620 --> 00:30:28,500
shared information info so recall this

678
00:30:28,500 --> 00:30:30,179
could be something like the monetary

679
00:30:30,179 --> 00:30:32,460
value so we would hash

680
00:30:32,460 --> 00:30:34,260
for example one dollar

681
00:30:34,260 --> 00:30:36,299
and um

682
00:30:36,299 --> 00:30:38,460
what's going to happen is on the sinus

683
00:30:38,460 --> 00:30:39,260
side

684
00:30:39,260 --> 00:30:42,120
there's an or proof that the signer

685
00:30:42,120 --> 00:30:45,899
knows either this secret key X or the

686
00:30:45,899 --> 00:30:49,679
discrete logarithm of this attack key

687
00:30:49,679 --> 00:30:50,820
set

688
00:30:50,820 --> 00:30:54,000
and this is done in a very similar way

689
00:30:54,000 --> 00:30:55,140
to

690
00:30:55,140 --> 00:30:57,299
um snow signatures for example or blind

691
00:30:57,299 --> 00:31:00,000
snore signatures so there's these two

692
00:31:00,000 --> 00:31:02,640
initial equivalents that are sent as a

693
00:31:02,640 --> 00:31:03,980
kind of commitment

694
00:31:03,980 --> 00:31:06,360
and then

695
00:31:06,360 --> 00:31:09,720
the user will blind these group elements

696
00:31:09,720 --> 00:31:11,640
into other group elements and hash them

697
00:31:11,640 --> 00:31:14,700
along with the message and the info

698
00:31:14,700 --> 00:31:18,480
to then blind into a challenge value e

699
00:31:18,480 --> 00:31:21,539
that he sends over to the signer

700
00:31:21,539 --> 00:31:23,580
and the signer does send the author of

701
00:31:23,580 --> 00:31:27,299
computation to respond with this two

702
00:31:27,299 --> 00:31:30,260
components the orange component

703
00:31:30,260 --> 00:31:32,460
corresponding to a proof of dialogue

704
00:31:32,460 --> 00:31:34,440
knowledge of the X and the green

705
00:31:34,440 --> 00:31:37,080
component corresponding to a proof of

706
00:31:37,080 --> 00:31:40,020
dialogue knowledge of the set

707
00:31:40,020 --> 00:31:40,559
um

708
00:31:40,559 --> 00:31:42,899
and then the user can again line these

709
00:31:42,899 --> 00:31:46,740
values to obtain the actual signature

710
00:31:46,740 --> 00:31:48,960
so the signature is going to consist of

711
00:31:48,960 --> 00:31:51,179
these four exponents

712
00:31:51,179 --> 00:31:54,120
the verification works like this so

713
00:31:54,120 --> 00:31:54,659
um

714
00:31:54,659 --> 00:31:57,539
in the verification we just add together

715
00:31:57,539 --> 00:32:00,000
this Omega and Delta value and check

716
00:32:00,000 --> 00:32:02,520
that is equal to the hash of these group

717
00:32:02,520 --> 00:32:04,740
elements that can be computed from the

718
00:32:04,740 --> 00:32:07,200
signature along with a message and the

719
00:32:07,200 --> 00:32:09,960
info and you don't need to remember the

720
00:32:09,960 --> 00:32:12,539
the details about which exponents are

721
00:32:12,539 --> 00:32:14,580
here you can just think of if you're

722
00:32:14,580 --> 00:32:16,860
familiar with snow signatures that this

723
00:32:16,860 --> 00:32:21,379
is an or proof of two small signatures

724
00:32:21,980 --> 00:32:25,260
so now I'm going to talk a bit about the

725
00:32:25,260 --> 00:32:28,919
approved strategy so the basic idea is

726
00:32:28,919 --> 00:32:32,399
that the reduction can either simulate

727
00:32:32,399 --> 00:32:35,580
the signing using this uh actual secret

728
00:32:35,580 --> 00:32:39,659
key X and extract the discrete logarithm

729
00:32:39,659 --> 00:32:42,179
of Z so it will program a random all

730
00:32:42,179 --> 00:32:44,580
code so that actually the discrete login

731
00:32:44,580 --> 00:32:46,700
challenge is embedded there

732
00:32:46,700 --> 00:32:51,360
or it could use the discrete logarithm

733
00:32:51,360 --> 00:32:54,059
offset Again by programming the random

734
00:32:54,059 --> 00:32:54,960
Oracle

735
00:32:54,960 --> 00:32:58,320
to generate signatures and then try to

736
00:32:58,320 --> 00:33:00,419
extract the discrete logarithm of the

737
00:33:00,419 --> 00:33:04,220
public key so the secret key X

738
00:33:04,559 --> 00:33:07,140
um in a bit more detail

739
00:33:07,140 --> 00:33:10,320
the reduction first is going to pick a

740
00:33:10,320 --> 00:33:12,000
secret key X

741
00:33:12,000 --> 00:33:15,360
or pick the D log set

742
00:33:15,360 --> 00:33:18,240
so it chooses which one it will use

743
00:33:18,240 --> 00:33:20,279
and then in the next step it will run

744
00:33:20,279 --> 00:33:23,360
the adversary once

745
00:33:23,519 --> 00:33:26,820
um to obtain L plus one message

746
00:33:26,820 --> 00:33:29,940
signature pairs from the adversary and

747
00:33:29,940 --> 00:33:32,100
then it will reprogram the random Oracle

748
00:33:32,100 --> 00:33:35,340
after a specific point

749
00:33:35,340 --> 00:33:37,320
and then it will run the adversary

750
00:33:37,320 --> 00:33:38,640
another time

751
00:33:38,640 --> 00:33:41,580
so this time it will use the same random

752
00:33:41,580 --> 00:33:44,220
coins for the adversary and also

753
00:33:44,220 --> 00:33:46,679
um all the random choices it makes

754
00:33:46,679 --> 00:33:48,720
itself during signing will be the same

755
00:33:48,720 --> 00:33:51,120
the only thing that changes is really

756
00:33:51,120 --> 00:33:53,220
the way it responds to these random

757
00:33:53,220 --> 00:33:55,620
Oracle queries

758
00:33:55,620 --> 00:33:58,500
and then it will hold to get the other

759
00:33:58,500 --> 00:34:01,440
key from the signatures that the

760
00:34:01,440 --> 00:34:05,039
adversary outputs so um

761
00:34:05,039 --> 00:34:08,280
this other key will then be the solution

762
00:34:08,280 --> 00:34:10,619
to the discrete logarithm problem

763
00:34:10,619 --> 00:34:13,800
and uh the most difficult part in the

764
00:34:13,800 --> 00:34:18,060
proof is this analysis of why we

765
00:34:18,060 --> 00:34:20,280
actually get this other key with a

766
00:34:20,280 --> 00:34:22,379
reasonable probability

767
00:34:22,379 --> 00:34:24,899
and this is also where the Gap in the

768
00:34:24,899 --> 00:34:27,300
original proof occurs

769
00:34:27,300 --> 00:34:29,699
so let's look into why this is difficult

770
00:34:29,699 --> 00:34:32,940
to see that we can actually get the

771
00:34:32,940 --> 00:34:35,820
other key so what happens in the proof

772
00:34:35,820 --> 00:34:38,820
is we use the forking technique

773
00:34:38,820 --> 00:34:39,418
um

774
00:34:39,418 --> 00:34:43,320
and the forking technique means we

775
00:34:43,320 --> 00:34:46,440
respond differently to the hash values

776
00:34:46,440 --> 00:34:48,060
but to the hash queries in the second

777
00:34:48,060 --> 00:34:49,020
round

778
00:34:49,020 --> 00:34:52,440
so we pick a place in the um

779
00:34:52,440 --> 00:34:54,540
in the hash queries where there was a

780
00:34:54,540 --> 00:34:55,980
signature before

781
00:34:55,980 --> 00:34:59,040
and now starting from that point

782
00:34:59,040 --> 00:35:02,720
uh different hash response will be given

783
00:35:02,720 --> 00:35:06,359
to Hash queries in the second round

784
00:35:06,359 --> 00:35:08,280
from that uh

785
00:35:08,280 --> 00:35:10,380
there will hopefully be two signatures

786
00:35:10,380 --> 00:35:13,680
that can then be used to compute at

787
00:35:13,680 --> 00:35:16,980
least one of the witnesses that was used

788
00:35:16,980 --> 00:35:20,900
to generate the signature

789
00:35:21,060 --> 00:35:24,720
but with an all-proof so what happens is

790
00:35:24,720 --> 00:35:26,220
either

791
00:35:26,220 --> 00:35:28,680
because we change the hash value and we

792
00:35:28,680 --> 00:35:30,300
know there's these two components that

793
00:35:30,300 --> 00:35:32,099
need to add up together to get the hash

794
00:35:32,099 --> 00:35:34,740
value so either the orange component

795
00:35:34,740 --> 00:35:37,320
changes in which case

796
00:35:37,320 --> 00:35:39,720
um from the two signatures at this

797
00:35:39,720 --> 00:35:42,540
forking point we can get this discrete

798
00:35:42,540 --> 00:35:45,599
logarithm X of the public key or the

799
00:35:45,599 --> 00:35:48,420
other thing that can happen is that this

800
00:35:48,420 --> 00:35:51,000
green component changes and in this case

801
00:35:51,000 --> 00:35:53,099
we would get the discrete logarithm

802
00:35:53,099 --> 00:35:56,579
offset of this hash uh hash of

803
00:35:56,579 --> 00:35:59,880
information info

804
00:35:59,880 --> 00:36:02,760
so as a reduction however what's going

805
00:36:02,760 --> 00:36:05,579
on is the reduction has this secret key

806
00:36:05,579 --> 00:36:09,000
which I've formally denoted in purple

807
00:36:09,000 --> 00:36:12,660
so the reduction will also potentially

808
00:36:12,660 --> 00:36:15,540
receive different queries uh as a

809
00:36:15,540 --> 00:36:18,240
challenge in the signing sessions and so

810
00:36:18,240 --> 00:36:20,099
it will also need to respond in a

811
00:36:20,099 --> 00:36:22,680
different way so the reductions behavior

812
00:36:22,680 --> 00:36:26,040
in a sense also Forks so the reduction

813
00:36:26,040 --> 00:36:30,119
will Fork According to which secret key

814
00:36:30,119 --> 00:36:32,220
it has so it will fork in this purple

815
00:36:32,220 --> 00:36:34,260
line

816
00:36:34,260 --> 00:36:37,020
but it's once from the adversary that

817
00:36:37,020 --> 00:36:39,060
the adversary will actually fork in the

818
00:36:39,060 --> 00:36:41,579
blue line so it will actually reveal

819
00:36:41,579 --> 00:36:43,500
this other key that the reduction does

820
00:36:43,500 --> 00:36:45,119
not have

821
00:36:45,119 --> 00:36:46,500
and

822
00:36:46,500 --> 00:36:47,160
um

823
00:36:47,160 --> 00:36:49,619
so here we have sort of a difference in

824
00:36:49,619 --> 00:36:51,660
behavior of the reduction and the

825
00:36:51,660 --> 00:36:55,560
adversary and we need to argue that

826
00:36:55,560 --> 00:36:58,740
this difference uh will occur often

827
00:36:58,740 --> 00:37:00,859
enough

828
00:37:01,260 --> 00:37:03,839
so now I'm going to stiff skip some

829
00:37:03,839 --> 00:37:07,320
technical details and uh we'll get into

830
00:37:07,320 --> 00:37:09,380
a more abstract

831
00:37:09,380 --> 00:37:12,180
a matter of speaking

832
00:37:12,180 --> 00:37:13,560
so

833
00:37:13,560 --> 00:37:17,820
um yeah let me explain this graph so we

834
00:37:17,820 --> 00:37:20,940
can uh kind of think of these

835
00:37:20,940 --> 00:37:23,880
hash Vector with like hash response

836
00:37:23,880 --> 00:37:27,900
vectors as a graph so uh the vertices in

837
00:37:27,900 --> 00:37:31,140
the graph are the vectors of hash values

838
00:37:31,140 --> 00:37:33,000
that we give as a response

839
00:37:33,000 --> 00:37:38,520
and the edges will exist like for each

840
00:37:38,520 --> 00:37:41,220
um index at which we could Fork there

841
00:37:41,220 --> 00:37:43,380
will be such a graph and there's an edge

842
00:37:43,380 --> 00:37:46,380
between two of these vectors if they

843
00:37:46,380 --> 00:37:49,260
fall from each other at this point

844
00:37:49,260 --> 00:37:52,859
and you can also see that depending on

845
00:37:52,859 --> 00:37:55,740
which witness the reduction uses to

846
00:37:55,740 --> 00:37:59,400
simulate actually we get two graphs

847
00:37:59,400 --> 00:38:02,400
and these graphs are not necessarily the

848
00:38:02,400 --> 00:38:05,280
same so they might be different

849
00:38:05,280 --> 00:38:06,720
and

850
00:38:06,720 --> 00:38:08,760
um what the reduction does essentially

851
00:38:08,760 --> 00:38:13,140
is it samples one of the edges from this

852
00:38:13,140 --> 00:38:15,660
graph so it samples two vectors that

853
00:38:15,660 --> 00:38:18,780
fork from each other at a specific point

854
00:38:18,780 --> 00:38:20,820
so in the original work

855
00:38:20,820 --> 00:38:24,180
um they came up with a clever primitive

856
00:38:24,180 --> 00:38:27,119
which is or like a clever technical tool

857
00:38:27,119 --> 00:38:30,119
which is uh these triangles

858
00:38:30,119 --> 00:38:33,720
and triangles here consist of two sides

859
00:38:33,720 --> 00:38:36,660
and a base so the base is a special type

860
00:38:36,660 --> 00:38:39,180
of edge in this graph which has very

861
00:38:39,180 --> 00:38:40,920
nice properties

862
00:38:40,920 --> 00:38:42,900
but it is hard to find for the reduction

863
00:38:42,900 --> 00:38:44,640
it's very unlikely that the reduction

864
00:38:44,640 --> 00:38:47,579
was Sample such a base

865
00:38:47,579 --> 00:38:48,180
um

866
00:38:48,180 --> 00:38:51,180
but it is more likely that the reduction

867
00:38:51,180 --> 00:38:54,240
will sample a side of a triangle and

868
00:38:54,240 --> 00:38:56,460
sides have potentially less nice

869
00:38:56,460 --> 00:38:59,460
properties but they are likely to sample

870
00:38:59,460 --> 00:39:03,240
and so the goal is to somehow transfer

871
00:39:03,240 --> 00:39:06,060
the nice properties that we get from the

872
00:39:06,060 --> 00:39:09,300
basis uh to the sides

873
00:39:09,300 --> 00:39:11,040
so

874
00:39:11,040 --> 00:39:13,260
um you can imagine these spaces

875
00:39:13,260 --> 00:39:15,900
uh to to explain kind of what this

876
00:39:15,900 --> 00:39:18,240
special property is

877
00:39:18,240 --> 00:39:19,020
um

878
00:39:19,020 --> 00:39:22,500
they are hash vectors that don't cause

879
00:39:22,500 --> 00:39:23,880
the

880
00:39:23,880 --> 00:39:26,579
adversary to ask different questions

881
00:39:26,579 --> 00:39:30,780
during the signing so for both of the uh

882
00:39:30,780 --> 00:39:32,940
for both of these um

883
00:39:32,940 --> 00:39:36,720
two uh hash vectors at the end of the

884
00:39:36,720 --> 00:39:39,180
base the queries that the adversary

885
00:39:39,180 --> 00:39:40,859
makes during signing will actually be

886
00:39:40,859 --> 00:39:42,780
the same

887
00:39:42,780 --> 00:39:45,619
and this can be used to achieve nice

888
00:39:45,619 --> 00:39:49,579
properties in the base

889
00:39:51,119 --> 00:39:54,380
so the key property of a triangle is

890
00:39:54,380 --> 00:39:58,140
that if we do not get the nice witness

891
00:39:58,140 --> 00:40:00,900
so the witness that the reduction needs

892
00:40:00,900 --> 00:40:03,960
from both of the sides then actually we

893
00:40:03,960 --> 00:40:06,000
can also not get it from the base

894
00:40:06,000 --> 00:40:09,240
so if both of the sites are marked red

895
00:40:09,240 --> 00:40:12,060
so they are bad for the reduction then

896
00:40:12,060 --> 00:40:14,520
also the base must be bad

897
00:40:14,520 --> 00:40:18,180
in turn this however means that if the

898
00:40:18,180 --> 00:40:20,160
base is good of the triangle so the base

899
00:40:20,160 --> 00:40:23,099
yields the nice witness actually at

900
00:40:23,099 --> 00:40:25,740
least one of the sites must also yield

901
00:40:25,740 --> 00:40:27,960
this nice witness so this is kind of

902
00:40:27,960 --> 00:40:30,839
this transferring property

903
00:40:30,839 --> 00:40:34,260
and now we get to uh the Gap in the

904
00:40:34,260 --> 00:40:37,020
original work which is this claim

905
00:40:37,020 --> 00:40:40,260
um which is that if four over five of

906
00:40:40,260 --> 00:40:42,240
the triangle sides yield a bad witness

907
00:40:42,240 --> 00:40:44,820
then three out of five of the triangle

908
00:40:44,820 --> 00:40:48,000
bases also yield the bad witness and so

909
00:40:48,000 --> 00:40:50,460
uh here's a little drawing as an example

910
00:40:50,460 --> 00:40:53,700
so we can see here there's eight out of

911
00:40:53,700 --> 00:40:56,940
10 of the triangle sides that are marked

912
00:40:56,940 --> 00:41:00,119
red and this implies that actually three

913
00:41:00,119 --> 00:41:02,880
out of five of the triangle bases are

914
00:41:02,880 --> 00:41:04,920
also migrate

915
00:41:04,920 --> 00:41:05,520
um

916
00:41:05,520 --> 00:41:07,500
however you can see here that in this

917
00:41:07,500 --> 00:41:10,220
example the triangles are all disjoint

918
00:41:10,220 --> 00:41:13,920
and uh this is where it becomes tricky

919
00:41:13,920 --> 00:41:16,320
because actually if they are

920
00:41:16,320 --> 00:41:17,640
um sharing

921
00:41:17,640 --> 00:41:21,119
components the triangles then

922
00:41:21,119 --> 00:41:21,780
um

923
00:41:21,780 --> 00:41:24,000
this claim does not hold anymore so here

924
00:41:24,000 --> 00:41:27,599
you can see we have some triangles again

925
00:41:27,599 --> 00:41:28,920
and

926
00:41:28,920 --> 00:41:29,579
um

927
00:41:29,579 --> 00:41:32,160
five out of six of the triangle sides

928
00:41:32,160 --> 00:41:34,740
are migrated but actually half of the

929
00:41:34,740 --> 00:41:38,940
triangle bases are not so here this

930
00:41:38,940 --> 00:41:40,920
claim does not hold anymore

931
00:41:40,920 --> 00:41:43,140
so what we need to do is to find some

932
00:41:43,140 --> 00:41:47,280
different argument for y actually we

933
00:41:47,280 --> 00:41:49,920
have enough good triangle sites in such

934
00:41:49,920 --> 00:41:51,060
a case

935
00:41:51,060 --> 00:41:53,339
and so let's go back to this graph that

936
00:41:53,339 --> 00:41:54,839
we saw earlier

937
00:41:54,839 --> 00:41:58,920
so here let's save we just like make the

938
00:41:58,920 --> 00:42:00,660
Assumption maybe this happens on the X

939
00:42:00,660 --> 00:42:03,540
side that there's this kind of triangle

940
00:42:03,540 --> 00:42:05,160
base that is applied in a lot of

941
00:42:05,160 --> 00:42:09,000
triangles with uh bad sides

942
00:42:09,000 --> 00:42:11,700
to this bad base

943
00:42:11,700 --> 00:42:15,660
um then actually we identify a set of

944
00:42:15,660 --> 00:42:18,440
such triangle bases

945
00:42:18,440 --> 00:42:21,180
that have a lot of corresponding

946
00:42:21,180 --> 00:42:23,640
triangle tops so our part in a lot of

947
00:42:23,640 --> 00:42:26,220
triangles on both of the sides so there

948
00:42:26,220 --> 00:42:28,800
is exists some kind of inefficient

949
00:42:28,800 --> 00:42:30,359
mapping

950
00:42:30,359 --> 00:42:32,760
that transports us to this parallel

951
00:42:32,760 --> 00:42:34,800
universe where we actually use the other

952
00:42:34,800 --> 00:42:38,460
witness to simulate and in this case uh

953
00:42:38,460 --> 00:42:41,400
this triangle base will be good because

954
00:42:41,400 --> 00:42:43,200
there it yields the witness that we

955
00:42:43,200 --> 00:42:44,460
actually want

956
00:42:44,460 --> 00:42:48,359
and now we remember kind of okay if a

957
00:42:48,359 --> 00:42:51,180
triangle base is good then actually

958
00:42:51,180 --> 00:42:53,640
at least one of the triangle sides of

959
00:42:53,640 --> 00:42:55,020
each of the triangles that it

960
00:42:55,020 --> 00:42:57,540
participates in must also be good so now

961
00:42:57,540 --> 00:43:00,440
we get some blue uh triangle sites here

962
00:43:00,440 --> 00:43:04,920
uh on this other side so uh this gives

963
00:43:04,920 --> 00:43:07,619
us some probability that we will

964
00:43:07,619 --> 00:43:09,300
actually succeed

965
00:43:09,300 --> 00:43:11,579
as a reduction

966
00:43:11,579 --> 00:43:15,060
uh but we're not quite done yet so the

967
00:43:15,060 --> 00:43:16,440
other thing that can happen is that

968
00:43:16,440 --> 00:43:20,460
triangle is somehow share sides and the

969
00:43:20,460 --> 00:43:23,460
problematic case here is that if they

970
00:43:23,460 --> 00:43:25,380
share the sites that are good so we know

971
00:43:25,380 --> 00:43:28,260
they have one good site but they might

972
00:43:28,260 --> 00:43:29,700
share that good side with another

973
00:43:29,700 --> 00:43:31,859
triangle which in the end would mean

974
00:43:31,859 --> 00:43:34,440
that it's less likely for us to actually

975
00:43:34,440 --> 00:43:38,280
as a reduction find uh that good side

976
00:43:38,280 --> 00:43:41,520
so here we have as an example this image

977
00:43:41,520 --> 00:43:43,380
where again

978
00:43:43,380 --> 00:43:46,380
um 8 out of 10 of the triangle sites are

979
00:43:46,380 --> 00:43:49,260
bad but actually the triangle bases have

980
00:43:49,260 --> 00:43:51,060
a very different distribution so here

981
00:43:51,060 --> 00:43:53,760
four of six of the triangle bases are

982
00:43:53,760 --> 00:43:56,220
good despite most of the triangle sides

983
00:43:56,220 --> 00:43:57,420
being bad

984
00:43:57,420 --> 00:44:00,300
and so we somehow need to deal with this

985
00:44:00,300 --> 00:44:04,200
case as well and basically we can find a

986
00:44:04,200 --> 00:44:06,119
combinatorial argument

987
00:44:06,119 --> 00:44:09,720
uh for why this cannot happen so you

988
00:44:09,720 --> 00:44:12,599
might see here that there is somehow a

989
00:44:12,599 --> 00:44:14,700
triangle base missing

990
00:44:14,700 --> 00:44:16,740
that would be red

991
00:44:16,740 --> 00:44:21,359
because uh this like dotted line

992
00:44:21,359 --> 00:44:24,359
is not in the picture

993
00:44:24,359 --> 00:44:27,000
and so basically what we argue is that

994
00:44:27,000 --> 00:44:28,500
this case where the dotted line is

995
00:44:28,500 --> 00:44:30,420
missing which would then actually give

996
00:44:30,420 --> 00:44:33,000
us potentially a good triangle base on

997
00:44:33,000 --> 00:44:35,099
the other side this cannot happen too

998
00:44:35,099 --> 00:44:37,460
often

999
00:44:37,500 --> 00:44:40,140
and now I'm going to summarize uh what

1000
00:44:40,140 --> 00:44:41,220
happened

1001
00:44:41,220 --> 00:44:43,500
so uh the original scheme by other

1002
00:44:43,500 --> 00:44:46,319
Camuto is an efficient partially blind

1003
00:44:46,319 --> 00:44:47,760
signature scheme

1004
00:44:47,760 --> 00:44:50,700
we mended some gaps that we found in the

1005
00:44:50,700 --> 00:44:51,720
proof

1006
00:44:51,720 --> 00:44:53,339
while still achieving a similar

1007
00:44:53,339 --> 00:44:55,800
reduction loss to the original work

1008
00:44:55,800 --> 00:44:58,859
unfortunate unfortunately this reduction

1009
00:44:58,859 --> 00:45:02,220
loss means that there's only a small

1010
00:45:02,220 --> 00:45:04,140
number of signing sessions that can be

1011
00:45:04,140 --> 00:45:06,660
open in parallel but this is actually

1012
00:45:06,660 --> 00:45:09,119
kind of inherent to this type of scheme

1013
00:45:09,119 --> 00:45:12,720
because there's this Ros attack

1014
00:45:12,720 --> 00:45:14,819
um on schemes of this type like online

1015
00:45:14,819 --> 00:45:17,579
snow signatures it works as well

1016
00:45:17,579 --> 00:45:20,220
um so this is uh this is an attack that

1017
00:45:20,220 --> 00:45:21,839
works when there's many signing sessions

1018
00:45:21,839 --> 00:45:23,940
open at the same time

1019
00:45:23,940 --> 00:45:26,700
and so an open question would be are

1020
00:45:26,700 --> 00:45:28,920
there schemes that maybe use this

1021
00:45:28,920 --> 00:45:30,119
technique

1022
00:45:30,119 --> 00:45:32,579
that allow for polynomial number of

1023
00:45:32,579 --> 00:45:34,920
signing sessions to be open at the same

1024
00:45:34,920 --> 00:45:37,200
time so this would mean that we need to

1025
00:45:37,200 --> 00:45:39,780
somehow overcome this loss which is

1026
00:45:39,780 --> 00:45:41,880
related to the number of signing

1027
00:45:41,880 --> 00:45:43,079
sessions

1028
00:45:43,079 --> 00:45:46,020
and one candidate for such a steam could

1029
00:45:46,020 --> 00:45:48,240
be this uh partial this fully blind

1030
00:45:48,240 --> 00:45:50,819
signature scheme by other

1031
00:45:50,819 --> 00:45:52,800
um which is believed to be immune

1032
00:45:52,800 --> 00:45:56,339
against this attack and uh shown to be

1033
00:45:56,339 --> 00:45:58,619
polynomially secure in the algebraic

1034
00:45:58,619 --> 00:46:01,380
group model but we do not yet have a

1035
00:46:01,380 --> 00:46:04,500
proof of polynomial security

1036
00:46:04,500 --> 00:46:05,040
um

1037
00:46:05,040 --> 00:46:08,220
in without the algebraic group model

1038
00:46:08,220 --> 00:46:11,700
so this concludes my talk uh I thank you

1039
00:46:11,700 --> 00:46:13,020
for your attention

1040
00:46:13,020 --> 00:46:16,640
and I'd be happy to take your questions

1041
00:46:36,480 --> 00:46:40,400
so uh I am the original inventor

1042
00:46:40,400 --> 00:46:44,460
and I have to say thanks so much for

1043
00:46:44,460 --> 00:46:47,280
analyzing that uh very complicated proof

1044
00:46:47,280 --> 00:46:50,400
in that depth and finding the bug in the

1045
00:46:50,400 --> 00:46:51,780
very deep point

1046
00:46:51,780 --> 00:46:56,040
and uh one uh one of my question is that

1047
00:46:56,040 --> 00:46:59,040
uh okay in the open questions you point

1048
00:46:59,040 --> 00:47:02,640
out that uh still that scheme is only

1049
00:47:02,640 --> 00:47:05,339
um or a secure only for a very small

1050
00:47:05,339 --> 00:47:07,800
number of signing but for these days

1051
00:47:07,800 --> 00:47:10,800
there are some bootstrapping uh

1052
00:47:10,800 --> 00:47:13,859
um Paradigm do you think that there is a

1053
00:47:13,859 --> 00:47:16,440
possibility that this one fits to that

1054
00:47:16,440 --> 00:47:19,680
boost bootstrapping Paradigm to upgrade

1055
00:47:19,680 --> 00:47:21,359
its security

1056
00:47:21,359 --> 00:47:23,280
um yeah so we actually were thinking

1057
00:47:23,280 --> 00:47:24,960
that this might work for the scheme

1058
00:47:24,960 --> 00:47:26,760
because it has this so I know these

1059
00:47:26,760 --> 00:47:28,079
bootstrapping techniques for these

1060
00:47:28,079 --> 00:47:30,599
schemes based on linear functions and I

1061
00:47:30,599 --> 00:47:33,839
think this scheme might fit into this

1062
00:47:33,839 --> 00:47:36,780
linear function thing

1063
00:47:36,780 --> 00:47:39,240
um but of course the the

1064
00:47:39,240 --> 00:47:41,520
um this this puts I think they puts

1065
00:47:41,520 --> 00:47:43,079
every technique would need to be adapted

1066
00:47:43,079 --> 00:47:45,119
but I think it is possible that it might

1067
00:47:45,119 --> 00:47:47,760
fit into this linear function uh

1068
00:47:47,760 --> 00:47:50,280
Paradigm somehow and then be able to be

1069
00:47:50,280 --> 00:47:52,020
bootstrapped

1070
00:47:52,020 --> 00:47:54,180
great thanks a lot

1071
00:47:54,180 --> 00:47:57,259
thanks for the question

1072
00:48:07,700 --> 00:48:11,540
it's nice to do again

1073
00:48:17,780 --> 00:48:22,140
next talk is online so I hope uh speaker

1074
00:48:22,140 --> 00:48:24,240
will show up

1075
00:48:24,240 --> 00:48:28,920
uh yes okay uh the next stop is

1076
00:48:28,920 --> 00:48:31,800
analysis of algebraic group model which

1077
00:48:31,800 --> 00:48:37,400
uh by Jonathan Katz Kong

1078
00:48:40,400 --> 00:48:43,760
in talk

1079
00:48:44,819 --> 00:48:47,520
and can you see this on my screen

1080
00:48:47,520 --> 00:48:51,420
yes yes okay cool thanks thanks for the

1081
00:48:51,420 --> 00:48:53,160
introduction

1082
00:48:53,160 --> 00:48:55,740
um yeah so this is a Channel with

1083
00:48:55,740 --> 00:48:59,940
Channel cards and Tonga so the title is

1084
00:48:59,940 --> 00:49:02,839
my voice okay

1085
00:49:05,040 --> 00:49:08,339
your slides are not in presentation View

1086
00:49:08,339 --> 00:49:10,500
yeah

1087
00:49:10,500 --> 00:49:14,300
it's a readable or not

1088
00:49:16,079 --> 00:49:17,520
that's better

1089
00:49:17,520 --> 00:49:20,060
okay

1090
00:49:21,060 --> 00:49:24,480
okay the title of the talk is an

1091
00:49:24,480 --> 00:49:28,020
analysis of the algebraic group model

1092
00:49:28,020 --> 00:49:30,680
so

1093
00:49:31,619 --> 00:49:34,280
oh

1094
00:49:34,740 --> 00:49:37,879
sorry give me a second

1095
00:49:42,960 --> 00:49:46,859
okay here's a plan so first I will talk

1096
00:49:46,859 --> 00:49:49,200
a little bit about the background

1097
00:49:49,200 --> 00:49:49,859
um

1098
00:49:49,859 --> 00:49:51,540
what is the general group model and

1099
00:49:51,540 --> 00:49:54,599
algebraic group model and then I will

1100
00:49:54,599 --> 00:49:57,839
present our main result which is our

1101
00:49:57,839 --> 00:50:02,119
analysis of the AGM model

1102
00:50:05,099 --> 00:50:07,859
um the group is the cryptography receive

1103
00:50:07,859 --> 00:50:09,420
a lot of attention since the beginning

1104
00:50:09,420 --> 00:50:12,359
of publicly cryptography so we have a

1105
00:50:12,359 --> 00:50:14,819
beautiful TV Hyman protocol I got my

1106
00:50:14,819 --> 00:50:18,420
encryption Shino signatures yeah and the

1107
00:50:18,420 --> 00:50:21,780
security of this photographical schemes

1108
00:50:21,780 --> 00:50:25,020
and curricular Protocols are based on

1109
00:50:25,020 --> 00:50:27,180
the Honey's assumptions

1110
00:50:27,180 --> 00:50:30,420
so which is relative to a group

1111
00:50:30,420 --> 00:50:32,940
right so we are following the approval

1112
00:50:32,940 --> 00:50:33,720
security

1113
00:50:33,720 --> 00:50:37,440
um approach so if

1114
00:50:37,440 --> 00:50:40,079
the underlying assumption

1115
00:50:40,079 --> 00:50:43,560
hold holds then

1116
00:50:43,560 --> 00:50:47,359
the designer scheme is secure

1117
00:50:47,359 --> 00:50:51,660
so even we do not make a ex seeing the

1118
00:50:51,660 --> 00:50:54,599
expression we must know that the

1119
00:50:54,599 --> 00:50:59,480
hardness assumption relative to uh

1120
00:50:59,940 --> 00:51:03,300
um a group so we use a conclude the

1121
00:51:03,300 --> 00:51:04,500
encoding

1122
00:51:04,500 --> 00:51:07,619
we often we do not like like make the

1123
00:51:07,619 --> 00:51:11,000
encoding explicit

1124
00:51:11,099 --> 00:51:14,760
so group encoding so here is a injective

1125
00:51:14,760 --> 00:51:19,260
map from Z sub P to zero one L so here L

1126
00:51:19,260 --> 00:51:21,960
is the lens

1127
00:51:21,960 --> 00:51:24,240
we can consider the trigger encoding

1128
00:51:24,240 --> 00:51:26,520
which is a binary integer and we

1129
00:51:26,520 --> 00:51:29,220
consider this addition

1130
00:51:29,220 --> 00:51:31,920
right we use this ID

1131
00:51:31,920 --> 00:51:35,040
and in the textbook right when we have a

1132
00:51:35,040 --> 00:51:38,760
learn cryptography we often said D log a

1133
00:51:38,760 --> 00:51:42,180
d log assumption is believed to be hard

1134
00:51:42,180 --> 00:51:45,900
but here we this is under the concluding

1135
00:51:45,900 --> 00:51:47,760
encoding so here

1136
00:51:47,760 --> 00:51:50,760
the underlying for example this is taken

1137
00:51:50,760 --> 00:51:53,040
from the textbook for example has an

1138
00:51:53,040 --> 00:51:55,980
inner textbook right

1139
00:51:55,980 --> 00:52:01,859
if um this is a subgroup of zq star and

1140
00:52:01,859 --> 00:52:04,980
the operator is the multiplication

1141
00:52:04,980 --> 00:52:09,359
so we can believe D log assumption is is

1142
00:52:09,359 --> 00:52:10,740
hard

1143
00:52:10,740 --> 00:52:12,780
and we know that

1144
00:52:12,780 --> 00:52:14,819
in some encoding for example the

1145
00:52:14,819 --> 00:52:18,000
retriever encoding D log is not a hard

1146
00:52:18,000 --> 00:52:21,380
it actually is drivable

1147
00:52:22,079 --> 00:52:23,520
so

1148
00:52:23,520 --> 00:52:27,020
um encoding the matter

1149
00:52:29,099 --> 00:52:31,079
um more background is that we in this

1150
00:52:31,079 --> 00:52:34,440
talk we will consider security cameras

1151
00:52:34,440 --> 00:52:37,680
okay so we follow the the famous epilera

1152
00:52:37,680 --> 00:52:38,819
Rockaway Style

1153
00:52:38,819 --> 00:52:41,839
and in a game so here is a famous

1154
00:52:41,839 --> 00:52:44,099
d-logger game

1155
00:52:44,099 --> 00:52:48,000
so we have a game and this is advisory

1156
00:52:48,000 --> 00:52:51,420
right and we have encoding advisory is

1157
00:52:51,420 --> 00:52:54,119
given like two group elements and

1158
00:52:54,119 --> 00:52:57,540
anniversary is supposed to figure out

1159
00:52:57,540 --> 00:52:59,099
um the D log

1160
00:52:59,099 --> 00:53:01,260
okay and I believe everyone knows it's

1161
00:53:01,260 --> 00:53:03,960
this game right and based on the game we

1162
00:53:03,960 --> 00:53:06,420
can Define the event that it would win

1163
00:53:06,420 --> 00:53:07,319
again

1164
00:53:07,319 --> 00:53:10,380
so then we can Define the winning

1165
00:53:10,380 --> 00:53:12,980
probability

1166
00:53:14,640 --> 00:53:16,380
based on the security camera we can

1167
00:53:16,380 --> 00:53:19,380
Define security reductions right we say

1168
00:53:19,380 --> 00:53:23,819
again H imply the game G

1169
00:53:23,819 --> 00:53:27,540
so that means we can actually

1170
00:53:27,540 --> 00:53:29,940
develop a reduction r

1171
00:53:29,940 --> 00:53:31,020
so

1172
00:53:31,020 --> 00:53:33,619
here

1173
00:53:36,180 --> 00:53:38,040
anniversary a

1174
00:53:38,040 --> 00:53:39,599
you got

1175
00:53:39,599 --> 00:53:43,500
break this game right this a here we can

1176
00:53:43,500 --> 00:53:45,000
use a

1177
00:53:45,000 --> 00:53:46,440
to construct

1178
00:53:46,440 --> 00:53:49,800
um another algorithm B

1179
00:53:49,800 --> 00:53:56,640
okay to pick and break this uh this game

1180
00:53:56,640 --> 00:53:58,859
right so this is actually also in the

1181
00:53:58,859 --> 00:53:59,760
textbook

1182
00:53:59,760 --> 00:54:01,319
so

1183
00:54:01,319 --> 00:54:03,119
um we can

1184
00:54:03,119 --> 00:54:06,119
um this is a security reduction

1185
00:54:06,119 --> 00:54:08,660
okay

1186
00:54:12,420 --> 00:54:17,099
so now this topic is about a

1187
00:54:17,099 --> 00:54:18,960
algebraic group model and a general

1188
00:54:18,960 --> 00:54:20,040
group model

1189
00:54:20,040 --> 00:54:23,099
so the reason is that when we talk about

1190
00:54:23,099 --> 00:54:25,440
the concluding encoding many things are

1191
00:54:25,440 --> 00:54:27,480
not unknown if for example we do not

1192
00:54:27,480 --> 00:54:32,040
know any unconditional hardness can be

1193
00:54:32,040 --> 00:54:33,480
established

1194
00:54:33,480 --> 00:54:36,599
in the uh with respect to any concluded

1195
00:54:36,599 --> 00:54:38,760
encoding

1196
00:54:38,760 --> 00:54:43,220
so shop back to like 19

1197
00:54:43,220 --> 00:54:46,140
1997 so it should developed the

1198
00:54:46,140 --> 00:54:47,880
following model

1199
00:54:47,880 --> 00:54:51,599
so here we have the game right and in

1200
00:54:51,599 --> 00:54:53,339
the game we have the adversary

1201
00:54:53,339 --> 00:54:58,559
so now the game advisory can make a

1202
00:54:58,559 --> 00:55:02,819
like Argo query to obtain the encoding

1203
00:55:02,819 --> 00:55:06,720
so here either a or the game can make a

1204
00:55:06,720 --> 00:55:10,680
like Curry eggs here is from z p we know

1205
00:55:10,680 --> 00:55:14,520
that the encoding is Sigma is zp

1206
00:55:14,520 --> 00:55:18,359
map to zero one right zero

1207
00:55:18,359 --> 00:55:21,420
okay so we can make this kind of query

1208
00:55:21,420 --> 00:55:24,359
this query called a labeling query

1209
00:55:24,359 --> 00:55:26,900
foreign

1210
00:55:28,040 --> 00:55:30,500
Sigma over X

1211
00:55:30,500 --> 00:55:33,780
there's another second type of interface

1212
00:55:33,780 --> 00:55:36,000
it's called a group operation in

1213
00:55:36,000 --> 00:55:39,240
interface so here we submitted two like

1214
00:55:39,240 --> 00:55:42,900
a group of elements or encoding

1215
00:55:42,900 --> 00:55:46,140
to the Oracle and Oracle will check

1216
00:55:46,140 --> 00:55:49,319
okay if these conditions satisfied

1217
00:55:49,319 --> 00:55:53,420
if this encode this group element is a

1218
00:55:53,420 --> 00:55:56,700
encoding of X and SGA is the encoding of

1219
00:55:56,700 --> 00:56:02,400
Y then we can add these two like X and Y

1220
00:56:02,400 --> 00:56:05,819
we obtain Z and then we send the sigma

1221
00:56:05,819 --> 00:56:09,660
over Z as the response

1222
00:56:09,660 --> 00:56:12,900
if this is not satisfied we then the

1223
00:56:12,900 --> 00:56:17,059
Oracle will return a part

1224
00:56:18,119 --> 00:56:23,280
so this is the the sugar model

1225
00:56:24,540 --> 00:56:26,220
sugars

1226
00:56:26,220 --> 00:56:27,960
General group model

1227
00:56:27,960 --> 00:56:31,319
and the malware has a different version

1228
00:56:31,319 --> 00:56:35,599
in this talk we mainly focus on shook

1229
00:56:38,119 --> 00:56:41,280
and the cool thing is that in the sugar

1230
00:56:41,280 --> 00:56:44,520
model we can establish a absolute low

1231
00:56:44,520 --> 00:56:47,819
bonds right you can in the in the shoes

1232
00:56:47,819 --> 00:56:50,880
paper so for example I got low balance

1233
00:56:50,880 --> 00:56:54,420
CDH and then many like hardness

1234
00:56:54,420 --> 00:56:57,599
absolutely hardness can be established

1235
00:56:57,599 --> 00:57:00,599
unconditionally

1236
00:57:02,819 --> 00:57:06,800
okay so this is one way to respect the

1237
00:57:06,800 --> 00:57:09,359
the power of the algorithm we consider

1238
00:57:09,359 --> 00:57:12,359
only consider generic algorithms so

1239
00:57:12,359 --> 00:57:13,500
later

1240
00:57:13,500 --> 00:57:16,680
so people consider algebraic algorithms

1241
00:57:16,680 --> 00:57:23,299
in a in a crypto 2018 paper

1242
00:57:24,359 --> 00:57:27,180
so we call the F okay our paper fko 18

1243
00:57:27,180 --> 00:57:30,420
paper so algebraic group model was

1244
00:57:30,420 --> 00:57:32,400
introduced

1245
00:57:32,400 --> 00:57:35,280
so here this is the game and this

1246
00:57:35,280 --> 00:57:37,920
adversary advisory will start with a

1247
00:57:37,920 --> 00:57:41,579
page set of elements group elements then

1248
00:57:41,579 --> 00:57:43,980
this advisory can produce like a new

1249
00:57:43,980 --> 00:57:45,839
group of elements for example here is a

1250
00:57:45,839 --> 00:57:47,579
sigma y

1251
00:57:47,579 --> 00:57:49,859
and this new group of elements is

1252
00:57:49,859 --> 00:57:52,200
produced along with the must be along

1253
00:57:52,200 --> 00:57:53,599
with the

1254
00:57:53,599 --> 00:57:56,640
representation here I'm using R1 to R

1255
00:57:56,640 --> 00:57:57,720
sub k

1256
00:57:57,720 --> 00:57:58,980
right

1257
00:57:58,980 --> 00:58:01,920
and this new group element

1258
00:58:01,920 --> 00:58:03,720
is based on

1259
00:58:03,720 --> 00:58:06,480
existing group elements in this space

1260
00:58:06,480 --> 00:58:08,780
set

1261
00:58:09,000 --> 00:58:11,760
okay remember so new group element can

1262
00:58:11,760 --> 00:58:15,440
be produced but will be based on

1263
00:58:15,440 --> 00:58:17,940
the group elements

1264
00:58:17,940 --> 00:58:20,460
in in the page set

1265
00:58:20,460 --> 00:58:23,040
and apparently this person can increase

1266
00:58:23,040 --> 00:58:26,819
right but the algebraic algorithm can

1267
00:58:26,819 --> 00:58:30,599
produce more and more new group elements

1268
00:58:30,599 --> 00:58:32,339
okay

1269
00:58:32,339 --> 00:58:35,460
and this model this agent model received

1270
00:58:35,460 --> 00:58:37,500
a lot of attention and like you can

1271
00:58:37,500 --> 00:58:39,960
check like many many like research

1272
00:58:39,960 --> 00:58:43,920
papers appeared in in crypto your crypto

1273
00:58:43,920 --> 00:58:47,220
GCC it's about this uh it's based on

1274
00:58:47,220 --> 00:58:48,059
this

1275
00:58:48,059 --> 00:58:51,599
this 2018 paper

1276
00:58:51,599 --> 00:58:53,900
okay

1277
00:58:54,059 --> 00:58:56,400
so in this AGM model

1278
00:58:56,400 --> 00:58:58,140
so the orders

1279
00:58:58,140 --> 00:59:01,319
the fkl 18 paper the order that also

1280
00:59:01,319 --> 00:59:04,559
show uh but claim they can show a

1281
00:59:04,559 --> 00:59:05,760
technical limit

1282
00:59:05,760 --> 00:59:08,880
so basically generic reduction

1283
00:59:08,880 --> 00:59:09,540
um

1284
00:59:09,540 --> 00:59:12,059
between games

1285
00:59:12,059 --> 00:59:15,180
between games in the agent model

1286
00:59:15,180 --> 00:59:16,859
implies

1287
00:59:16,859 --> 00:59:18,599
the reduction

1288
00:59:18,599 --> 00:59:22,079
generic reduction in the TGM model

1289
00:59:22,079 --> 00:59:24,480
okay so how to understand this

1290
00:59:24,480 --> 00:59:29,160
so so so let's say the game age

1291
00:59:29,160 --> 00:59:33,119
implies the kmg in the agent model

1292
00:59:33,119 --> 00:59:36,480
right and they they can say they say

1293
00:59:36,480 --> 00:59:38,099
these were implied

1294
00:59:38,099 --> 00:59:39,720
is H

1295
00:59:39,720 --> 00:59:44,899
MH implies is G in the TJ model

1296
00:59:45,180 --> 00:59:46,079
um

1297
00:59:46,079 --> 00:59:50,339
data says if H is hard

1298
00:59:50,339 --> 00:59:54,960
if H is hard in the GM then this game G

1299
00:59:54,960 --> 00:59:58,260
is also hard in the GM

1300
00:59:58,260 --> 01:00:00,720
right it's kind of like a lifting a

1301
01:00:00,720 --> 01:00:02,819
living Lemma

1302
01:00:02,819 --> 01:00:05,520
yeah and these Lemma actually

1303
01:00:05,520 --> 01:00:08,579
essentially used in their fko paper and

1304
01:00:08,579 --> 01:00:12,000
also in many follow-up pairs

1305
01:00:12,000 --> 01:00:13,559
um

1306
01:00:13,559 --> 01:00:16,619
that's the ATM model

1307
01:00:16,619 --> 01:00:20,339
so they have a a way to produce new

1308
01:00:20,339 --> 01:00:22,680
Global elements and they have uh they

1309
01:00:22,680 --> 01:00:25,200
claim they can show a pilemma okay

1310
01:00:25,200 --> 01:00:27,299
in our paper

1311
01:00:27,299 --> 01:00:29,819
we basically we we do a security

1312
01:00:29,819 --> 01:00:32,940
analysis of this model and we identify

1313
01:00:32,940 --> 01:00:34,619
um some issues

1314
01:00:34,619 --> 01:00:37,819
with the ATM model

1315
01:00:39,059 --> 01:00:40,260
um

1316
01:00:40,260 --> 01:00:42,180
for example

1317
01:00:42,180 --> 01:00:45,480
as I said new group elements right

1318
01:00:45,480 --> 01:00:47,339
there's the intuition okay new group

1319
01:00:47,339 --> 01:00:49,980
elements can be produced

1320
01:00:49,980 --> 01:00:51,780
but

1321
01:00:51,780 --> 01:00:53,700
these new group elements must be

1322
01:00:53,700 --> 01:00:55,020
produced

1323
01:00:55,020 --> 01:00:57,780
through like um the value that group

1324
01:00:57,780 --> 01:00:59,700
operations

1325
01:00:59,700 --> 01:01:01,920
and in their paper this is their

1326
01:01:01,920 --> 01:01:04,980
intuition the only way to produce

1327
01:01:04,980 --> 01:01:08,040
um for uh algebraic algorithm to produce

1328
01:01:08,040 --> 01:01:11,400
new group elements is this is through

1329
01:01:11,400 --> 01:01:14,240
like a value group operation

1330
01:01:14,240 --> 01:01:17,339
based on known in the business based on

1331
01:01:17,339 --> 01:01:19,079
known group elements right because

1332
01:01:19,079 --> 01:01:21,480
remember right in the previous slide so

1333
01:01:21,480 --> 01:01:23,339
here this is unknown

1334
01:01:23,339 --> 01:01:26,220
it's the known group elements

1335
01:01:26,220 --> 01:01:28,680
okay the only way for algebraic

1336
01:01:28,680 --> 01:01:30,660
algorithm to produce a new group element

1337
01:01:30,660 --> 01:01:33,180
is through like a group operator

1338
01:01:33,180 --> 01:01:36,119
through a valid collaboration to and

1339
01:01:36,119 --> 01:01:37,980
based on known government then you can

1340
01:01:37,980 --> 01:01:40,619
get a new government along with the

1341
01:01:40,619 --> 01:01:43,260
representation

1342
01:01:43,260 --> 01:01:46,859
so that's the that's the inclusion

1343
01:01:46,859 --> 01:01:50,819
and we we said we found like um these

1344
01:01:50,819 --> 01:01:53,880
are their intuition and their actual

1345
01:01:53,880 --> 01:01:56,400
definition there's a mismatch

1346
01:01:56,400 --> 01:01:59,220
and we can construct

1347
01:01:59,220 --> 01:02:00,299
um

1348
01:02:00,299 --> 01:02:05,099
we can derive new group elements

1349
01:02:05,099 --> 01:02:08,339
but using non-group operation

1350
01:02:08,339 --> 01:02:11,099
okay we didn't use like Google operation

1351
01:02:11,099 --> 01:02:13,500
we are still able to produce a new

1352
01:02:13,500 --> 01:02:14,579
government

1353
01:02:14,579 --> 01:02:17,760
but it was like a validator

1354
01:02:17,760 --> 01:02:21,780
uh representation so here this is our

1355
01:02:21,780 --> 01:02:23,700
example

1356
01:02:23,700 --> 01:02:26,160
so here we consider like retriever

1357
01:02:26,160 --> 01:02:28,980
encoding right remember here the the

1358
01:02:28,980 --> 01:02:29,819
base

1359
01:02:29,819 --> 01:02:31,140
here

1360
01:02:31,140 --> 01:02:33,540
the non-government is a is a one right

1361
01:02:33,540 --> 01:02:35,819
we consider this group okay another

1362
01:02:35,819 --> 01:02:39,119
group of operator is addition

1363
01:02:39,119 --> 01:02:43,140
so here we in a line two we were using

1364
01:02:43,140 --> 01:02:45,660
like nine group operations remember

1365
01:02:45,660 --> 01:02:48,000
when we talk about the trivial encoding

1366
01:02:48,000 --> 01:02:50,099
the group operation the value

1367
01:02:50,099 --> 01:02:53,400
collaboration is addition

1368
01:02:53,400 --> 01:02:55,559
okay remember right in many slides back

1369
01:02:55,559 --> 01:02:58,319
right it's addition but here we didn't

1370
01:02:58,319 --> 01:03:00,839
use a Very Good Vibration we were using

1371
01:03:00,839 --> 01:03:03,359
like multiplication which which is a

1372
01:03:03,359 --> 01:03:06,180
non-corporation we are still we are

1373
01:03:06,180 --> 01:03:09,119
still able to get a good uh element

1374
01:03:09,119 --> 01:03:11,520
right s is actually

1375
01:03:11,520 --> 01:03:14,700
s is equivalent it's in a zp right

1376
01:03:14,700 --> 01:03:16,880
and also this second is

1377
01:03:16,880 --> 01:03:19,079
the representation it's a value

1378
01:03:19,079 --> 01:03:22,140
representation okay right so how to

1379
01:03:22,140 --> 01:03:26,040
understand this we can add up

1380
01:03:26,040 --> 01:03:28,619
there's a number of like ones one one is

1381
01:03:28,619 --> 01:03:31,020
the best right we can obtain this group

1382
01:03:31,020 --> 01:03:32,640
element

1383
01:03:32,640 --> 01:03:34,380
okay

1384
01:03:34,380 --> 01:03:36,240
but you guys can

1385
01:03:36,240 --> 01:03:40,980
can follow what I said okay so the the I

1386
01:03:40,980 --> 01:03:43,680
just I mean that more detailing okay you

1387
01:03:43,680 --> 01:03:45,000
don't find in the paper but I want to

1388
01:03:45,000 --> 01:03:49,200
claim that we can have a alternative way

1389
01:03:49,200 --> 01:03:50,520
based on

1390
01:03:50,520 --> 01:03:52,940
a non-cooperation we are still able to

1391
01:03:52,940 --> 01:03:57,079
produce something like um uh a valid

1392
01:03:57,079 --> 01:03:59,280
element along with a valuable

1393
01:03:59,280 --> 01:04:01,980
representation but in the fkr paper

1394
01:04:01,980 --> 01:04:05,220
their intuition is to produce value the

1395
01:04:05,220 --> 01:04:06,960
group element along with the value that

1396
01:04:06,960 --> 01:04:09,960
representation in there the only way

1397
01:04:09,960 --> 01:04:12,780
is to use group operation and here we

1398
01:04:12,780 --> 01:04:15,059
show our account example we were using

1399
01:04:15,059 --> 01:04:16,920
like an angle vibration

1400
01:04:16,920 --> 01:04:18,780
okay

1401
01:04:18,780 --> 01:04:21,839
there are other issues okay

1402
01:04:21,839 --> 01:04:24,558
so

1403
01:04:25,020 --> 01:04:25,619
um

1404
01:04:25,619 --> 01:04:28,559
our second result is that we find their

1405
01:04:28,559 --> 01:04:31,140
key Lemma there's a big issue in the

1406
01:04:31,140 --> 01:04:32,640
Asian paper

1407
01:04:32,640 --> 01:04:35,460
the big issue is about you guys remember

1408
01:04:35,460 --> 01:04:36,359
the

1409
01:04:36,359 --> 01:04:41,579
this is their key calmer in 2018 paper

1410
01:04:41,579 --> 01:04:43,880
they claim they can show this uh

1411
01:04:43,880 --> 01:04:47,480
basically asset so

1412
01:04:47,480 --> 01:04:50,160
reduction between games in the agent

1413
01:04:50,160 --> 01:04:52,520
model can be

1414
01:04:52,520 --> 01:04:55,859
re implied the reduction in the TGM

1415
01:04:55,859 --> 01:04:57,240
model right

1416
01:04:57,240 --> 01:05:01,200
and we show this Lemma

1417
01:05:01,200 --> 01:05:02,940
in some scenarios the name I will not

1418
01:05:02,940 --> 01:05:03,960
hold

1419
01:05:03,960 --> 01:05:06,660
so we have a theorem so here more

1420
01:05:06,660 --> 01:05:11,040
extremely we show a account example okay

1421
01:05:11,040 --> 01:05:14,700
right so we call the BT is a binary

1422
01:05:14,700 --> 01:05:17,359
encoding game

1423
01:05:21,780 --> 01:05:25,880
and here we show this this theorem here

1424
01:05:25,880 --> 01:05:30,900
uh game G is the the counter example

1425
01:05:30,900 --> 01:05:34,260
game we design okay and each is a well

1426
01:05:34,260 --> 01:05:36,000
known like a deluxe right

1427
01:05:36,000 --> 01:05:38,940
and we show that

1428
01:05:38,940 --> 01:05:40,200
um

1429
01:05:40,200 --> 01:05:44,400
we show like three items okay so so let

1430
01:05:44,400 --> 01:05:48,540
me try to say age is hard in the TGM in

1431
01:05:48,540 --> 01:05:50,819
Showbox ggm right so we already know

1432
01:05:50,819 --> 01:05:54,799
that this is written in the super

1433
01:05:54,799 --> 01:05:58,859
1997 paper okay so this part is easy

1434
01:05:58,859 --> 01:05:59,760
okay

1435
01:05:59,760 --> 01:06:02,400
so the third item is that we can show

1436
01:06:02,400 --> 01:06:03,960
that

1437
01:06:03,960 --> 01:06:05,760
the

1438
01:06:05,760 --> 01:06:08,640
the kimchi

1439
01:06:08,640 --> 01:06:11,819
kmg is is this right it's BG game

1440
01:06:11,819 --> 01:06:14,760
chemji is easy

1441
01:06:14,760 --> 01:06:17,579
okay all right in the next slide I will

1442
01:06:17,579 --> 01:06:18,780
try to show that

1443
01:06:18,780 --> 01:06:21,900
so and finally we can show that

1444
01:06:21,900 --> 01:06:25,160
these will hold

1445
01:06:25,380 --> 01:06:27,960
we put like three items together

1446
01:06:27,960 --> 01:06:30,799
this is a this contradicts to the The

1447
01:06:30,799 --> 01:06:34,859
Dilemma in the fkr 18 paper

1448
01:06:34,859 --> 01:06:37,500
right remember in the label right so

1449
01:06:37,500 --> 01:06:40,680
says this is a assume this and assume H

1450
01:06:40,680 --> 01:06:43,559
is the typical it's hard in the ggm and

1451
01:06:43,559 --> 01:06:46,140
the NG is hard right but now in our

1452
01:06:46,140 --> 01:06:48,960
theorem we show that g is easy okay

1453
01:06:48,960 --> 01:06:51,599
that's a contribution

1454
01:06:51,599 --> 01:06:53,720
thank you

1455
01:06:54,539 --> 01:06:55,760
okay

1456
01:06:55,760 --> 01:07:01,640
so yeah so this second item is is done

1457
01:07:01,640 --> 01:07:05,339
19 paper has a result

1458
01:07:05,339 --> 01:07:09,119
and then yeah now we I I'm trying to say

1459
01:07:09,119 --> 01:07:12,420
a little bit about this thread item

1460
01:07:12,420 --> 01:07:15,240
right so this is the the game G we

1461
01:07:15,240 --> 01:07:17,339
design okay it's kind of a circle right

1462
01:07:17,339 --> 01:07:19,980
so if you draw pictures

1463
01:07:19,980 --> 01:07:23,460
we have this uh game this is BG game

1464
01:07:23,460 --> 01:07:27,440
okay this is adversary it's a

1465
01:07:27,539 --> 01:07:31,740
the encoding okay right

1466
01:07:31,740 --> 01:07:34,520
so

1467
01:07:34,740 --> 01:07:38,819
so here I I I wonder like uh go through

1468
01:07:38,819 --> 01:07:41,940
these details uh one by one just believe

1469
01:07:41,940 --> 01:07:46,039
me this is a rewriting of this uh

1470
01:07:46,039 --> 01:07:48,960
pseudocode okay

1471
01:07:48,960 --> 01:07:50,520
so

1472
01:07:50,520 --> 01:07:53,940
a is given like group elements capital x

1473
01:07:53,940 --> 01:07:58,319
capital uis right and then adversary a

1474
01:07:58,319 --> 01:08:00,599
is supposed to produce another

1475
01:08:00,599 --> 01:08:03,780
government let's say Z Prime

1476
01:08:03,780 --> 01:08:06,240
that was a win the game

1477
01:08:06,240 --> 01:08:10,140
in the BG game right if Z Prime is equal

1478
01:08:10,140 --> 01:08:12,420
to to Z right Z is here this is a

1479
01:08:12,420 --> 01:08:15,599
Capital C is a group element including

1480
01:08:15,599 --> 01:08:18,560
of the literacy

1481
01:08:19,020 --> 01:08:22,380
right so back to the previous Slide the

1482
01:08:22,380 --> 01:08:24,960
third item says basically says the game

1483
01:08:24,960 --> 01:08:29,100
G is easy so this game is easy in the

1484
01:08:29,100 --> 01:08:30,540
show model

1485
01:08:30,540 --> 01:08:31,979
right

1486
01:08:31,979 --> 01:08:34,439
kmg is used in the supermodel

1487
01:08:34,439 --> 01:08:37,620
so that means that Advantage a can win

1488
01:08:37,620 --> 01:08:40,738
the game with good probability right so

1489
01:08:40,738 --> 01:08:43,799
how can a win the figure out win the

1490
01:08:43,799 --> 01:08:47,399
game so a must produce some like a good

1491
01:08:47,399 --> 01:08:50,000
looking Z Prime right so how to do that

1492
01:08:50,000 --> 01:08:55,080
so A in a sugar model right so this is

1493
01:08:55,080 --> 01:08:57,060
known capital x is including of one

1494
01:08:57,060 --> 01:08:58,020
right

1495
01:08:58,020 --> 01:09:00,359
and the uis

1496
01:09:00,359 --> 01:09:03,479
right UI is supposed to uh encoding of Z

1497
01:09:03,479 --> 01:09:07,319
sub I letter Z sub I so now advisory a

1498
01:09:07,319 --> 01:09:10,319
I've seen this inputs input and filter

1499
01:09:10,319 --> 01:09:11,640
aware tests

1500
01:09:11,640 --> 01:09:15,600
if x equal to UI or not okay

1501
01:09:15,600 --> 01:09:18,679
right that was a contest right because

1502
01:09:18,679 --> 01:09:22,560
yeah this Oracle is given

1503
01:09:22,560 --> 01:09:25,080
so if they are equal

1504
01:09:25,080 --> 01:09:29,160
then the corresponding Z little Z are I

1505
01:09:29,160 --> 01:09:31,979
is designed it is it's a one it's a one

1506
01:09:31,979 --> 01:09:36,299
okay otherwise this is the I

1507
01:09:36,299 --> 01:09:38,339
is beta0

1508
01:09:38,339 --> 01:09:42,238
okay so edible a make anemia like a path

1509
01:09:42,238 --> 01:09:44,160
of this uis

1510
01:09:44,160 --> 01:09:47,160
and elevator a can recover all the I's

1511
01:09:47,160 --> 01:09:49,439
right all the eyes

1512
01:09:49,439 --> 01:09:53,759
okay so once adversary a can recover all

1513
01:09:53,759 --> 01:09:58,160
they are Z1 little Z1 little D2

1514
01:09:58,160 --> 01:10:00,660
little Z sub l

1515
01:10:00,660 --> 01:10:04,380
and then I'll go to a in a true model is

1516
01:10:04,380 --> 01:10:08,420
able to combine this

1517
01:10:09,920 --> 01:10:13,739
together and this piece together will

1518
01:10:13,739 --> 01:10:16,980
form a group element and the design is

1519
01:10:16,980 --> 01:10:20,760
Define this as the capital Z Prime

1520
01:10:20,760 --> 01:10:23,219
so this capital Z Prime group element is

1521
01:10:23,219 --> 01:10:24,060
a

1522
01:10:24,060 --> 01:10:27,060
you you magically kind of like it's able

1523
01:10:27,060 --> 01:10:30,600
to glue this zero one piece later zero

1524
01:10:30,600 --> 01:10:32,940
one little Z2 until a little CL together

1525
01:10:32,940 --> 01:10:35,340
can get a guru element

1526
01:10:35,340 --> 01:10:37,920
okay this is allowed in the initial

1527
01:10:37,920 --> 01:10:39,540
model

1528
01:10:39,540 --> 01:10:43,020
in this way another a is able to obtain

1529
01:10:43,020 --> 01:10:45,900
a group element Z Prime and ZZ Prime

1530
01:10:45,900 --> 01:10:48,000
must be equal to Z

1531
01:10:48,000 --> 01:10:51,179
okay remember this Z it's um we take the

1532
01:10:51,179 --> 01:10:54,060
opposite thing right we pass

1533
01:10:54,060 --> 01:10:56,219
decompose this is a group element into

1534
01:10:56,219 --> 01:11:01,500
like uh be the screen right Z1 Z2 ZL

1535
01:11:01,500 --> 01:11:03,120
so

1536
01:11:03,120 --> 01:11:06,600
so put it like in summary this a is able

1537
01:11:06,600 --> 01:11:10,560
to win the game the PG game

1538
01:11:10,560 --> 01:11:12,719
with the probability one

1539
01:11:12,719 --> 01:11:16,500
okay so that means BG game

1540
01:11:16,500 --> 01:11:18,360
PG

1541
01:11:18,360 --> 01:11:22,440
this game is easy

1542
01:11:22,440 --> 01:11:25,260
right so in that way I'll throw the item

1543
01:11:25,260 --> 01:11:27,300
has been proven

1544
01:11:27,300 --> 01:11:29,460
so this third item is proven G is easy

1545
01:11:29,460 --> 01:11:32,640
BG game is easy okay the second item is

1546
01:11:32,640 --> 01:11:34,739
proven right so now the remaining is

1547
01:11:34,739 --> 01:11:36,840
that we need to prove this this first

1548
01:11:36,840 --> 01:11:39,199
item

1549
01:11:41,280 --> 01:11:42,300
okay

1550
01:11:42,300 --> 01:11:45,840
the first item remember H is the D log G

1551
01:11:45,840 --> 01:11:49,580
is a new game BG game

1552
01:11:50,159 --> 01:11:55,320
okay in order to like um prove

1553
01:11:55,320 --> 01:11:58,260
age implies

1554
01:11:58,260 --> 01:11:59,699
T right

1555
01:11:59,699 --> 01:12:03,480
so as we said before we need to develop

1556
01:12:03,480 --> 01:12:06,659
a reduction right if there's a adversary

1557
01:12:06,659 --> 01:12:07,860
a

1558
01:12:07,860 --> 01:12:10,260
can break this g game

1559
01:12:10,260 --> 01:12:12,239
then we can construct another game

1560
01:12:12,239 --> 01:12:15,360
another episode P right based on

1561
01:12:15,360 --> 01:12:17,159
reduction

1562
01:12:17,159 --> 01:12:22,620
this p is able to break the H game right

1563
01:12:22,620 --> 01:12:26,580
so how to do so here's a reduction

1564
01:12:26,580 --> 01:12:29,640
right remember H3 is a d log

1565
01:12:29,640 --> 01:12:31,620
so the Box

1566
01:12:31,620 --> 01:12:34,860
the reduction so we have a this is the D

1567
01:12:34,860 --> 01:12:36,840
log right we are given like two group

1568
01:12:36,840 --> 01:12:39,360
elements capital x capital Z is supposed

1569
01:12:39,360 --> 01:12:44,420
to like recover like a leader Z right

1570
01:12:44,699 --> 01:12:47,159
so how to do

1571
01:12:47,159 --> 01:12:50,159
remember uh

1572
01:12:50,159 --> 01:12:52,679
the first item here is the algebraic

1573
01:12:52,679 --> 01:12:53,719
like

1574
01:12:53,719 --> 01:12:58,500
it's a a reduction in the AGM model

1575
01:12:58,500 --> 01:13:00,179
right

1576
01:13:00,179 --> 01:13:02,040
so now

1577
01:13:02,040 --> 01:13:06,120
this a is the algebraic algorithm

1578
01:13:06,120 --> 01:13:11,040
so this a break the PG game right so a

1579
01:13:11,040 --> 01:13:13,199
is supposed to return this is a group

1580
01:13:13,199 --> 01:13:15,900
element along with this like

1581
01:13:15,900 --> 01:13:17,880
representation

1582
01:13:17,880 --> 01:13:19,080
okay

1583
01:13:19,080 --> 01:13:24,300
so I'm using the fkr 18 model

1584
01:13:24,300 --> 01:13:28,560
right so algebraic algorithm a

1585
01:13:28,560 --> 01:13:33,360
is able to if everybody a win a PG game

1586
01:13:33,360 --> 01:13:35,640
a is able to produce a good valid

1587
01:13:35,640 --> 01:13:37,800
government along with the representation

1588
01:13:37,800 --> 01:13:41,699
I'm using X reader x0 leader X1 until

1589
01:13:41,699 --> 01:13:44,219
later x l

1590
01:13:44,219 --> 01:13:46,739
so

1591
01:13:46,739 --> 01:13:49,880
and then this a must

1592
01:13:49,880 --> 01:13:53,940
this condition must be satisfied

1593
01:13:53,940 --> 01:13:55,860
right

1594
01:13:55,860 --> 01:13:59,400
so now the reduction are

1595
01:13:59,400 --> 01:14:02,760
okay based on this outputs right capital

1596
01:14:02,760 --> 01:14:05,420
Z Prime and also the derivative

1597
01:14:05,420 --> 01:14:09,780
reduction R is able to uh

1598
01:14:09,780 --> 01:14:11,640
return a value

1599
01:14:11,640 --> 01:14:15,239
okay and then this value actually can be

1600
01:14:15,239 --> 01:14:19,519
defined as Z okay right

1601
01:14:19,679 --> 01:14:22,620
so

1602
01:14:22,620 --> 01:14:25,500
okay so the more details like like as

1603
01:14:25,500 --> 01:14:28,620
presented in on a screen so basically we

1604
01:14:28,620 --> 01:14:32,460
are able to uh develop a reduction okay

1605
01:14:32,460 --> 01:14:37,500
by using our algebraic uh uh attacker a

1606
01:14:37,500 --> 01:14:40,560
right this add a title A is able to

1607
01:14:40,560 --> 01:14:42,600
produce uh

1608
01:14:42,600 --> 01:14:45,480
a value equivalent Z Prime along with

1609
01:14:45,480 --> 01:14:48,320
the reubenation

1610
01:14:49,580 --> 01:14:53,340
uh maybe it's uh we are a bit behind

1611
01:14:53,340 --> 01:14:56,640
schedule so can you wrap up your talk oh

1612
01:14:56,640 --> 01:14:57,480
okay

1613
01:14:57,480 --> 01:14:59,940
I saw that I have I have okay yeah yeah

1614
01:14:59,940 --> 01:15:02,640
okay thank you so yeah that's actually

1615
01:15:02,640 --> 01:15:05,580
this is the last slide okay so in this

1616
01:15:05,580 --> 01:15:09,420
uh then we try to summarize so in this

1617
01:15:09,420 --> 01:15:11,520
zero we proved like we had a three steps

1618
01:15:11,520 --> 01:15:13,920
right and then

1619
01:15:13,920 --> 01:15:16,679
we prove that here

1620
01:15:16,679 --> 01:15:19,500
so the take-home message is that we in

1621
01:15:19,500 --> 01:15:21,360
our paper we give the analysis of the

1622
01:15:21,360 --> 01:15:25,980
AGM model and yeah they are key Lema

1623
01:15:25,980 --> 01:15:29,400
um does not hold in certain scenarios

1624
01:15:29,400 --> 01:15:34,520
okay so yeah so

1625
01:15:34,520 --> 01:15:37,260
obviously like Urban question is can we

1626
01:15:37,260 --> 01:15:40,260
fix the agent model right can we have a

1627
01:15:40,260 --> 01:15:42,780
restricted like a type of like

1628
01:15:42,780 --> 01:15:43,980
um

1629
01:15:43,980 --> 01:15:47,040
put some like conditions so that can we

1630
01:15:47,040 --> 01:15:50,659
fix their key level

1631
01:15:51,000 --> 01:15:53,640
okay thanks and the paper can be found

1632
01:15:53,640 --> 01:15:58,040
on the ePrint okay so yeah

1633
01:16:00,900 --> 01:16:03,420
any questions

1634
01:16:03,420 --> 01:16:05,960
foreign

1635
01:16:37,140 --> 01:16:42,320
and Paris in Hope

1636
01:17:11,699 --> 01:17:12,840
okay

1637
01:17:12,840 --> 01:17:15,239
um hi so today I'm going to be talking

1638
01:17:15,239 --> 01:17:16,380
about

1639
01:17:16,380 --> 01:17:17,880
um the instantiability of classical

1640
01:17:17,880 --> 01:17:19,679
random Oracle model encryption

1641
01:17:19,679 --> 01:17:22,800
transforms and so

1642
01:17:22,800 --> 01:17:27,179
uh first just some background on uh what

1643
01:17:27,179 --> 01:17:28,980
we're going to be talking about so

1644
01:17:28,980 --> 01:17:32,400
first the random Oracle model is an

1645
01:17:32,400 --> 01:17:35,460
idealized model and

1646
01:17:35,460 --> 01:17:36,239
um

1647
01:17:36,239 --> 01:17:39,239
So Random oracles uh output a random

1648
01:17:39,239 --> 01:17:41,219
value when queried so they have some

1649
01:17:41,219 --> 01:17:42,179
dice

1650
01:17:42,179 --> 01:17:44,699
and they also have consistent outputs

1651
01:17:44,699 --> 01:17:46,860
for the same inputs so

1652
01:17:46,860 --> 01:17:49,140
there's some scroll to write down the

1653
01:17:49,140 --> 01:17:52,080
outputs and it can only be evaluated on

1654
01:17:52,080 --> 01:17:54,239
in a black box way so

1655
01:17:54,239 --> 01:17:57,540
he won't tell you what he's doing

1656
01:17:57,540 --> 01:18:00,239
and so of course this does not exist in

1657
01:18:00,239 --> 01:18:02,760
the real world but proving a scheme is

1658
01:18:02,760 --> 01:18:04,679
secure in the random Oracle model shows

1659
01:18:04,679 --> 01:18:07,260
security against black box attacks which

1660
01:18:07,260 --> 01:18:09,540
can be useful

1661
01:18:09,540 --> 01:18:12,600
So instantiating Random oracles means

1662
01:18:12,600 --> 01:18:15,600
replacing them with a real function in a

1663
01:18:15,600 --> 01:18:17,520
way that allows the scheme to maintain

1664
01:18:17,520 --> 01:18:20,159
security so in practice random oracles

1665
01:18:20,159 --> 01:18:22,080
are instantiated with hash functions

1666
01:18:22,080 --> 01:18:24,239
like shot 256.

1667
01:18:24,239 --> 01:18:26,520
but unfortunately some

1668
01:18:26,520 --> 01:18:28,800
unsubstantiability results exist in

1669
01:18:28,800 --> 01:18:31,699
general so if a scheme is uninstantiable

1670
01:18:31,699 --> 01:18:35,340
then it means that it's secure in a

1671
01:18:35,340 --> 01:18:38,640
random Oracle model but there is no

1672
01:18:38,640 --> 01:18:41,340
standard model functions that can

1673
01:18:41,340 --> 01:18:43,020
replace the random oracles and allow the

1674
01:18:43,020 --> 01:18:45,960
student to maintain security

1675
01:18:45,960 --> 01:18:49,440
so in this paper we provide two

1676
01:18:49,440 --> 01:18:51,000
instantiations

1677
01:18:51,000 --> 01:18:54,360
for uh celebrated random Oracle model

1678
01:18:54,360 --> 01:18:57,659
Inception transforms so the first is low

1679
01:18:57,659 --> 01:19:01,320
exponent RSA OE oaep which is due to

1680
01:19:01,320 --> 01:19:05,580
belarian Rogue in 1994 and so this

1681
01:19:05,580 --> 01:19:08,100
transform takes a chapter function so in

1682
01:19:08,100 --> 01:19:11,640
this case RSA two random oracles and

1683
01:19:11,640 --> 01:19:15,060
upgrades that into an IND CCA to public

1684
01:19:15,060 --> 01:19:17,239
key encryption scheme so that's

1685
01:19:17,239 --> 01:19:19,980
indistinguishability under adaptive

1686
01:19:19,980 --> 01:19:23,340
chosen ciphertext attacks

1687
01:19:23,340 --> 01:19:26,159
and so this was uh standardized in pkcs

1688
01:19:26,159 --> 01:19:28,380
in 2002.

1689
01:19:28,380 --> 01:19:31,260
and the second transform we consider is

1690
01:19:31,260 --> 01:19:33,179
the fujisati yokomoto encryption

1691
01:19:33,179 --> 01:19:34,260
transform

1692
01:19:34,260 --> 01:19:37,199
which takes a one-way CPA public key

1693
01:19:37,199 --> 01:19:38,880
encryption scheme a private key

1694
01:19:38,880 --> 01:19:41,460
encryption scheme and again two random

1695
01:19:41,460 --> 01:19:44,460
oracles and upgrades that again into an

1696
01:19:44,460 --> 01:19:47,699
IND cca2 public key encryption scheme

1697
01:19:47,699 --> 01:19:49,800
and so this is used with modifications

1698
01:19:49,800 --> 01:19:54,060
in many of nist's post Quantum the

1699
01:19:54,060 --> 01:19:56,100
encapsulation mechanisms

1700
01:19:56,100 --> 01:19:59,000
in the competition

1701
01:19:59,040 --> 01:20:02,460
so I'm sure everybody knows this but

1702
01:20:02,460 --> 01:20:04,260
just to make sure that we're all on the

1703
01:20:04,260 --> 01:20:07,020
same page I wanted to go over the

1704
01:20:07,020 --> 01:20:11,580
security game for IND cca2 security

1705
01:20:11,580 --> 01:20:13,620
because it will be our goal in both

1706
01:20:13,620 --> 01:20:16,260
cases so first of all of course the

1707
01:20:16,260 --> 01:20:19,080
Challenger selects a random bit B and

1708
01:20:19,080 --> 01:20:21,659
samples the public key and the secret

1709
01:20:21,659 --> 01:20:23,880
key sending the public key to the

1710
01:20:23,880 --> 01:20:27,179
adversary who has access to a decryption

1711
01:20:27,179 --> 01:20:29,340
Oracle and based on that information

1712
01:20:29,340 --> 01:20:33,480
they select two messages m0 and M1

1713
01:20:33,480 --> 01:20:37,140
and the Challenger encrypts M sub B

1714
01:20:37,140 --> 01:20:39,480
corresponding to the random bit B to

1715
01:20:39,480 --> 01:20:42,120
create the challenge ciphertext D star

1716
01:20:42,120 --> 01:20:44,280
which is in turn sent back to the

1717
01:20:44,280 --> 01:20:47,100
adversary who again has access to a

1718
01:20:47,100 --> 01:20:48,960
decryption Oracle which of course does

1719
01:20:48,960 --> 01:20:50,460
not allow the decryption of the

1720
01:20:50,460 --> 01:20:53,159
challenge ciphertext and based on all

1721
01:20:53,159 --> 01:20:55,440
this information they try to guess which

1722
01:20:55,440 --> 01:21:00,840
bit the uh is so if it's one or zero

1723
01:21:00,840 --> 01:21:02,880
and if they guess correctly then they

1724
01:21:02,880 --> 01:21:03,840
win

1725
01:21:03,840 --> 01:21:06,600
and so we say a scheme is indcca to

1726
01:21:06,600 --> 01:21:09,060
secure if all polynomial time

1727
01:21:09,060 --> 01:21:11,280
adversaries have negligible Advantage

1728
01:21:11,280 --> 01:21:14,360
where the advantage is the probability

1729
01:21:14,360 --> 01:21:18,480
of being correct Beyond random guessing

1730
01:21:18,480 --> 01:21:22,140
Okay so now we're going to just look at

1731
01:21:22,140 --> 01:21:25,679
the preview of the result our result for

1732
01:21:25,679 --> 01:21:28,199
oaep and then we're going to go back and

1733
01:21:28,199 --> 01:21:30,360
Define all of the things mentioned in

1734
01:21:30,360 --> 01:21:31,620
the preview that haven't been defined

1735
01:21:31,620 --> 01:21:33,060
yet

1736
01:21:33,060 --> 01:21:34,320
so

1737
01:21:34,320 --> 01:21:38,520
here is the schematic for RSA oaep

1738
01:21:38,520 --> 01:21:41,580
and again we have the trapdoor function

1739
01:21:41,580 --> 01:21:44,159
which is RSA there at the bottom and two

1740
01:21:44,159 --> 01:21:46,440
random oracles and our input plain text

1741
01:21:46,440 --> 01:21:48,600
message with some zero padding and some

1742
01:21:48,600 --> 01:21:49,679
random salt

1743
01:21:49,679 --> 01:21:51,060
so these are put through the hash

1744
01:21:51,060 --> 01:21:53,219
functions the random oracles and xored

1745
01:21:53,219 --> 01:21:54,179
all together

1746
01:21:54,179 --> 01:21:56,159
and then concatenated and then run

1747
01:21:56,159 --> 01:22:00,420
through RSA so the details uh will

1748
01:22:00,420 --> 01:22:02,699
become clear later

1749
01:22:02,699 --> 01:22:07,320
um so this scheme is uh with random

1750
01:22:07,320 --> 01:22:12,120
oracles is idcca2 secure so

1751
01:22:12,120 --> 01:22:16,679
we proved that low exponent RSA oap is

1752
01:22:16,679 --> 01:22:18,600
secure in the standard model

1753
01:22:18,600 --> 01:22:21,480
with the following instantiations so for

1754
01:22:21,480 --> 01:22:24,480
the random Oracle G

1755
01:22:24,480 --> 01:22:27,960
first we have uh it's going to be a

1756
01:22:27,960 --> 01:22:29,940
composition of many Primitives and

1757
01:22:29,940 --> 01:22:31,520
around the whole thing is

1758
01:22:31,520 --> 01:22:34,440
indistinguishability obfuscation

1759
01:22:34,440 --> 01:22:36,179
then we start with a puncturable

1760
01:22:36,179 --> 01:22:38,760
pseudorandom function

1761
01:22:38,760 --> 01:22:43,020
followed by an extremely lossy function

1762
01:22:43,020 --> 01:22:46,260
followed by a pseudorandom generator

1763
01:22:46,260 --> 01:22:49,440
followed by a pairwise independent hash

1764
01:22:49,440 --> 01:22:51,960
and that will be the instantiation for G

1765
01:22:51,960 --> 01:22:53,760
and H

1766
01:22:53,760 --> 01:22:58,500
is a bit uh it is a universal hardcore

1767
01:22:58,500 --> 01:23:00,000
function

1768
01:23:00,000 --> 01:23:04,440
and the final thing we need is that we

1769
01:23:04,440 --> 01:23:06,900
require RSA to be sort of exponentially

1770
01:23:06,900 --> 01:23:08,940
one way which is

1771
01:23:08,940 --> 01:23:10,920
reasonable

1772
01:23:10,920 --> 01:23:14,219
so first uh we're going to Define all of

1773
01:23:14,219 --> 01:23:16,260
the things I just mentioned

1774
01:23:16,260 --> 01:23:18,600
so one of the most important things in

1775
01:23:18,600 --> 01:23:20,880
the construction is extremely lossy

1776
01:23:20,880 --> 01:23:22,440
functions which is a notion due to

1777
01:23:22,440 --> 01:23:24,900
xandry and so if you're familiar with

1778
01:23:24,900 --> 01:23:28,140
lossy functions it is similar in that we

1779
01:23:28,140 --> 01:23:30,659
have a key generation algorithm for

1780
01:23:30,659 --> 01:23:33,600
injective keys and then you can see on

1781
01:23:33,600 --> 01:23:36,360
the left side the injective mode is

1782
01:23:36,360 --> 01:23:38,340
exactly what it sounds like it induces

1783
01:23:38,340 --> 01:23:41,040
an injective function

1784
01:23:41,040 --> 01:23:42,420
and

1785
01:23:42,420 --> 01:23:44,880
like regular lossy functions we have a

1786
01:23:44,880 --> 01:23:47,400
lossy key generation function which

1787
01:23:47,400 --> 01:23:50,460
induces a non-injective function but the

1788
01:23:50,460 --> 01:23:52,920
difference between regular lossy

1789
01:23:52,920 --> 01:23:55,320
functions and extremely lossy functions

1790
01:23:55,320 --> 01:23:58,140
is that the key generation for the

1791
01:23:58,140 --> 01:24:01,620
velocity Keys is adversary dependent so

1792
01:24:01,620 --> 01:24:03,840
the key the velocity key generation

1793
01:24:03,840 --> 01:24:05,880
algorithm will actually take input that

1794
01:24:05,880 --> 01:24:10,460
depends on the adversary's run time

1795
01:24:10,980 --> 01:24:14,400
so if the polynomial time adversary runs

1796
01:24:14,400 --> 01:24:15,900
in say time t

1797
01:24:15,900 --> 01:24:20,219
then velocity is generated such that it

1798
01:24:20,219 --> 01:24:22,620
takes time t plus one to find a

1799
01:24:22,620 --> 01:24:26,159
collision in the Elf image so

1800
01:24:26,159 --> 01:24:29,699
this means that this will only these two

1801
01:24:29,699 --> 01:24:32,159
modes of operation will only be

1802
01:24:32,159 --> 01:24:34,440
indistinguishable to adversaries with

1803
01:24:34,440 --> 01:24:37,679
runtime t or less

1804
01:24:37,679 --> 01:24:41,340
but because T is a polynomial

1805
01:24:41,340 --> 01:24:44,159
running taking time t plus one to find a

1806
01:24:44,159 --> 01:24:46,800
collision is also a polynomial so this

1807
01:24:46,800 --> 01:24:50,580
means that the lossy mode image size can

1808
01:24:50,580 --> 01:24:52,800
be polynomial which is the big

1809
01:24:52,800 --> 01:24:55,260
difference between regular velocity

1810
01:24:55,260 --> 01:24:57,000
functions and extremely lossy functions

1811
01:24:57,000 --> 01:25:00,179
the polynomial image size

1812
01:25:00,179 --> 01:25:02,520
and zandry also provides a standard

1813
01:25:02,520 --> 01:25:03,980
model construction

1814
01:25:03,980 --> 01:25:09,199
based on the exponential ddh assumption

1815
01:25:10,020 --> 01:25:11,780
and the next thing is

1816
01:25:11,780 --> 01:25:14,100
indistinguishability obfuscation

1817
01:25:14,100 --> 01:25:15,600
so

1818
01:25:15,600 --> 01:25:18,659
this is just in fact two circuits C1 and

1819
01:25:18,659 --> 01:25:20,880
C2 have the same input output Behavior

1820
01:25:20,880 --> 01:25:23,520
and the same size for their circuit

1821
01:25:23,520 --> 01:25:27,179
description then I O of C1 and IO fc2

1822
01:25:27,179 --> 01:25:29,280
are computationally indistinguishable

1823
01:25:29,280 --> 01:25:31,980
and again there exists standard model

1824
01:25:31,980 --> 01:25:34,820
constructions

1825
01:25:35,219 --> 01:25:38,100
and the next thing we use which is not

1826
01:25:38,100 --> 01:25:41,280
actually a part of our construction for

1827
01:25:41,280 --> 01:25:43,860
the random oracles but is an important

1828
01:25:43,860 --> 01:25:46,500
part of the proof is point function

1829
01:25:46,500 --> 01:25:50,100
obfuscation uh with auxiliary input so

1830
01:25:50,100 --> 01:25:52,260
here we have a point function with input

1831
01:25:52,260 --> 01:25:56,100
point x and so that just means that

1832
01:25:56,100 --> 01:26:00,540
if the point function is evaluated on X

1833
01:26:00,540 --> 01:26:03,600
it will return one and if it's evaluated

1834
01:26:03,600 --> 01:26:05,880
on any other point in the domain it will

1835
01:26:05,880 --> 01:26:08,420
return by

1836
01:26:08,820 --> 01:26:11,639
and having auxiliary information means

1837
01:26:11,639 --> 01:26:14,280
that we have this Z which is jointly

1838
01:26:14,280 --> 01:26:16,800
sampled with the input point x from some

1839
01:26:16,800 --> 01:26:18,900
unpredictable distribution

1840
01:26:18,900 --> 01:26:21,960
and unpredictable distribution here we

1841
01:26:21,960 --> 01:26:24,719
mean that if the adversary is given the

1842
01:26:24,719 --> 01:26:26,760
auxiliary information Z

1843
01:26:26,760 --> 01:26:29,699
then they can only output x with

1844
01:26:29,699 --> 01:26:32,960
negligible probability

1845
01:26:33,540 --> 01:26:36,300
and our security goal for this type of

1846
01:26:36,300 --> 01:26:39,540
obfuscation is that given the auxiliary

1847
01:26:39,540 --> 01:26:40,679
information

1848
01:26:40,679 --> 01:26:42,900
a polynomial time adversary cannot

1849
01:26:42,900 --> 01:26:45,780
distinguish between the obfuscation of a

1850
01:26:45,780 --> 01:26:48,480
point function PX with input point x or

1851
01:26:48,480 --> 01:26:51,960
pu or a random U

1852
01:26:51,960 --> 01:26:55,260
so a real versus random input 0.8 can't

1853
01:26:55,260 --> 01:26:57,000
distinguish with um

1854
01:26:57,000 --> 01:26:59,219
Advantage greater than negligible

1855
01:26:59,219 --> 01:27:00,540
and

1856
01:27:00,540 --> 01:27:03,480
so taking this another step further we

1857
01:27:03,480 --> 01:27:06,300
actually use multi-bit Point function

1858
01:27:06,300 --> 01:27:10,380
obfus station which is uh very similar

1859
01:27:10,380 --> 01:27:13,440
except we have an input point and an

1860
01:27:13,440 --> 01:27:15,420
output point so instead of outputting

1861
01:27:15,420 --> 01:27:19,139
one on the unique input point it outputs

1862
01:27:19,139 --> 01:27:21,659
a multi-bit string y

1863
01:27:21,659 --> 01:27:24,000
and again we have our auxiliary

1864
01:27:24,000 --> 01:27:26,040
information Zed which is jointly sampled

1865
01:27:26,040 --> 01:27:27,900
with X and Y

1866
01:27:27,900 --> 01:27:30,420
from an unpredictable distribution

1867
01:27:30,420 --> 01:27:32,460
and the unpredictable distribution

1868
01:27:32,460 --> 01:27:35,699
definition is the same in that a is only

1869
01:27:35,699 --> 01:27:39,179
given the auxiliary information Z and is

1870
01:27:39,179 --> 01:27:43,139
only required to find X and it has to be

1871
01:27:43,139 --> 01:27:45,420
able to do that with negligible

1872
01:27:45,420 --> 01:27:47,040
probability

1873
01:27:47,040 --> 01:27:49,679
and again the security goal is that

1874
01:27:49,679 --> 01:27:52,679
given the auxiliary information the

1875
01:27:52,679 --> 01:27:55,020
adversary cannot distinguish between

1876
01:27:55,020 --> 01:27:57,900
the obfuscation of a point function with

1877
01:27:57,900 --> 01:28:00,960
input point x and output point Y and the

1878
01:28:00,960 --> 01:28:02,520
obfuscation of a point function with

1879
01:28:02,520 --> 01:28:05,880
input point x and output Point U for a

1880
01:28:05,880 --> 01:28:08,820
random U so now it's real versus random

1881
01:28:08,820 --> 01:28:12,440
output Point instead of input point

1882
01:28:13,020 --> 01:28:16,739
so the next tool we use in the

1883
01:28:16,739 --> 01:28:18,780
construction is a puncturable

1884
01:28:18,780 --> 01:28:22,679
pseudorandom function so this type of

1885
01:28:22,679 --> 01:28:26,699
pseudorandom function is uh it has a key

1886
01:28:26,699 --> 01:28:29,100
generation algorithm like normal and

1887
01:28:29,100 --> 01:28:31,739
it has when evaluated on a regular key

1888
01:28:31,739 --> 01:28:34,260
it just behaves like a pseudorandom

1889
01:28:34,260 --> 01:28:35,580
function

1890
01:28:35,580 --> 01:28:37,380
but you also have the ability to

1891
01:28:37,380 --> 01:28:41,040
puncture a key which means that when you

1892
01:28:41,040 --> 01:28:44,040
evaluate using the puncture key

1893
01:28:44,040 --> 01:28:46,560
it will evaluate like normal as long as

1894
01:28:46,560 --> 01:28:48,600
you're evaluating evaluating it on a

1895
01:28:48,600 --> 01:28:51,420
point x that is not punctured so here

1896
01:28:51,420 --> 01:28:55,199
you can see that if X is not equal to X

1897
01:28:55,199 --> 01:28:57,060
Prime where X Prime

1898
01:28:57,060 --> 01:28:59,820
is the location of the puncture then it

1899
01:28:59,820 --> 01:29:02,400
will evaluate like a normal PRS but if

1900
01:29:02,400 --> 01:29:04,080
you do try to evaluate it on the

1901
01:29:04,080 --> 01:29:07,639
puncture point it will just return bot

1902
01:29:08,520 --> 01:29:12,480
and the security guarantee for pprfs is

1903
01:29:12,480 --> 01:29:15,360
that given X Prime and the key punctured

1904
01:29:15,360 --> 01:29:17,340
at X Prime the adversary can't

1905
01:29:17,340 --> 01:29:19,800
distinguish between the output of the

1906
01:29:19,800 --> 01:29:23,580
prf on the non-punctured key at X and a

1907
01:29:23,580 --> 01:29:25,440
random point

1908
01:29:25,440 --> 01:29:27,480
and again we have standard model

1909
01:29:27,480 --> 01:29:29,639
constructions for

1910
01:29:29,639 --> 01:29:32,460
for this primitive

1911
01:29:32,460 --> 01:29:36,120
okay so next I'm going to talk about the

1912
01:29:36,120 --> 01:29:39,900
oaep half of the result

1913
01:29:39,900 --> 01:29:42,800
and there's a few properties we require

1914
01:29:42,800 --> 01:29:48,000
for our low exponent RSA oap proof and

1915
01:29:48,000 --> 01:29:50,880
the first two are

1916
01:29:50,880 --> 01:29:53,219
um properties of RSA and they're not

1917
01:29:53,219 --> 01:29:54,840
additional assumptions so the first one

1918
01:29:54,840 --> 01:29:58,139
is called second input extractability or

1919
01:29:58,139 --> 01:30:02,159
Sie and this says that given the RSA

1920
01:30:02,159 --> 01:30:04,679
function Black Box access to the RSA

1921
01:30:04,679 --> 01:30:08,940
function and some output Point RSA of x

1922
01:30:08,940 --> 01:30:11,580
and some portion of x

1923
01:30:11,580 --> 01:30:14,159
then there exists an efficient extractor

1924
01:30:14,159 --> 01:30:17,940
that can recover the entirety of x

1925
01:30:17,940 --> 01:30:19,560
and

1926
01:30:19,560 --> 01:30:22,199
the next thing is common inputs

1927
01:30:22,199 --> 01:30:24,360
extractability which says that again

1928
01:30:24,360 --> 01:30:26,460
given Black Box access to the RSA

1929
01:30:26,460 --> 01:30:29,699
function two image points RSA of X and

1930
01:30:29,699 --> 01:30:32,400
RSA of Y then there exists an efficient

1931
01:30:32,400 --> 01:30:35,940
extractor that can recover X and Y only

1932
01:30:35,940 --> 01:30:38,340
if some portion of both pre-images are

1933
01:30:38,340 --> 01:30:40,679
equal so if some portion of X and Y are

1934
01:30:40,679 --> 01:30:42,659
equal then it can recover the entirety

1935
01:30:42,659 --> 01:30:44,400
of X and Y

1936
01:30:44,400 --> 01:30:46,860
and finally as I mentioned before we

1937
01:30:46,860 --> 01:30:48,600
also require that RSA is

1938
01:30:48,600 --> 01:30:51,739
sub-exponentially one way

1939
01:30:52,739 --> 01:30:55,699
so again here we have the schematic for

1940
01:30:55,699 --> 01:31:00,239
RSA oap the two random oracles and the

1941
01:31:00,239 --> 01:31:02,520
trapdoor function and the final result

1942
01:31:02,520 --> 01:31:06,060
being IND cca2 secured and at the bottom

1943
01:31:06,060 --> 01:31:10,199
is the written out version where of the

1944
01:31:10,199 --> 01:31:12,420
final ciphertext where you can see the

1945
01:31:12,420 --> 01:31:17,780
xores and the inputs are and um

1946
01:31:18,000 --> 01:31:21,360
okay so this is what we saw before the

1947
01:31:21,360 --> 01:31:23,520
construction for the

1948
01:31:23,520 --> 01:31:27,179
um random Oracle G and so surrounding

1949
01:31:27,179 --> 01:31:29,820
all of these Primitives we have

1950
01:31:29,820 --> 01:31:32,460
indistinguishability obfus station

1951
01:31:32,460 --> 01:31:34,380
then first in the composition is

1952
01:31:34,380 --> 01:31:36,659
puncturable pseudorandom function

1953
01:31:36,659 --> 01:31:39,179
then we have an extremely lossy function

1954
01:31:39,179 --> 01:31:40,560
or an elf

1955
01:31:40,560 --> 01:31:44,520
and then a pseudorandom generator and

1956
01:31:44,520 --> 01:31:48,440
lastly a pairwise independent hash

1957
01:31:50,699 --> 01:31:54,420
so G is instantiated as I just said and

1958
01:31:54,420 --> 01:31:57,540
H is instantiated as a sub exponentially

1959
01:31:57,540 --> 01:32:00,360
secure Universal hardcore function which

1960
01:32:00,360 --> 01:32:03,900
can be constructed from standard model

1961
01:32:03,900 --> 01:32:07,199
Primitives uh from different inputs

1962
01:32:07,199 --> 01:32:10,260
obfuscation with pprx with short

1963
01:32:10,260 --> 01:32:13,460
auxiliary information

1964
01:32:14,340 --> 01:32:16,380
Okay so

1965
01:32:16,380 --> 01:32:17,760
the

1966
01:32:17,760 --> 01:32:19,940
we can uh

1967
01:32:19,940 --> 01:32:23,280
prove our instantiation if again we have

1968
01:32:23,280 --> 01:32:26,880
H as universal hardcore function G is

1969
01:32:26,880 --> 01:32:28,860
the composition

1970
01:32:28,860 --> 01:32:31,980
RSA sub exponentially one way and

1971
01:32:31,980 --> 01:32:34,560
finally that there exists multi-bit

1972
01:32:34,560 --> 01:32:36,480
Point function obfuscation with

1973
01:32:36,480 --> 01:32:38,520
auxiliary information for specific

1974
01:32:38,520 --> 01:32:40,139
sub-exponentially unpredictable

1975
01:32:40,139 --> 01:32:41,820
distributions

1976
01:32:41,820 --> 01:32:42,960
so

1977
01:32:42,960 --> 01:32:45,719
this final thing is needed again for the

1978
01:32:45,719 --> 01:32:48,860
proof and not the construction

1979
01:32:49,920 --> 01:32:52,440
so for the proof idea I'm just going to

1980
01:32:52,440 --> 01:32:56,280
go through the sequence of hybrids at a

1981
01:32:56,280 --> 01:32:59,960
very coarse grain level so recall the

1982
01:32:59,960 --> 01:33:03,060
indcca2 game so the starting point is we

1983
01:33:03,060 --> 01:33:04,139
have

1984
01:33:04,139 --> 01:33:06,659
the adversary is given the public key

1985
01:33:06,659 --> 01:33:08,219
which contains

1986
01:33:08,219 --> 01:33:12,719
this key for the hash G and so here I've

1987
01:33:12,719 --> 01:33:15,120
admitted the prg and the pairwise hash

1988
01:33:15,120 --> 01:33:18,780
just for clarity and so a has the

1989
01:33:18,780 --> 01:33:21,960
ability to compute this function

1990
01:33:21,960 --> 01:33:25,199
and a the adversary is also given the

1991
01:33:25,199 --> 01:33:27,060
challenge ciphertext

1992
01:33:27,060 --> 01:33:29,639
and we use stars to denote things that

1993
01:33:29,639 --> 01:33:32,940
involve the challenge ciphertext

1994
01:33:32,940 --> 01:33:36,300
okay so the first step of the the game

1995
01:33:36,300 --> 01:33:38,340
chain is we have that the challenge type

1996
01:33:38,340 --> 01:33:42,239
for text is unchanged and we change the

1997
01:33:42,239 --> 01:33:45,000
hash key for G

1998
01:33:45,000 --> 01:33:47,580
so we have done two things in this

1999
01:33:47,580 --> 01:33:49,080
change the first is that we have

2000
01:33:49,080 --> 01:33:51,540
punctured the puncturable pseudorandom

2001
01:33:51,540 --> 01:33:56,159
key at R star which is the randomness

2002
01:33:56,159 --> 01:33:58,860
used in oaep

2003
01:33:58,860 --> 01:34:02,940
and we've also introduced the mbaipo and

2004
01:34:02,940 --> 01:34:06,840
this MBE IPO has input point R star and

2005
01:34:06,840 --> 01:34:08,880
output Point Z star

2006
01:34:08,880 --> 01:34:12,840
so this change actually makes these two

2007
01:34:12,840 --> 01:34:14,880
versions of kg

2008
01:34:14,880 --> 01:34:18,000
um have the same input output Behavior

2009
01:34:18,000 --> 01:34:21,060
and the purpose of the MBA appeal here

2010
01:34:21,060 --> 01:34:22,920
is in part

2011
01:34:22,920 --> 01:34:26,820
um to hide the puncture point and it has

2012
01:34:26,820 --> 01:34:30,080
another purpose that we will see later

2013
01:34:30,360 --> 01:34:32,760
and since these two versions have the

2014
01:34:32,760 --> 01:34:35,520
same input output Behavior we can

2015
01:34:35,520 --> 01:34:38,000
determine that this change is

2016
01:34:38,000 --> 01:34:39,900
indistinguishable from the previous game

2017
01:34:39,900 --> 01:34:43,500
based on the security of i o

2018
01:34:43,500 --> 01:34:47,100
and so for the next game the this time

2019
01:34:47,100 --> 01:34:49,620
the construction for the hash stays the

2020
01:34:49,620 --> 01:34:51,719
same and we change the challenge

2021
01:34:51,719 --> 01:34:53,639
ciphertext

2022
01:34:53,639 --> 01:34:56,280
so in particular the output of the

2023
01:34:56,280 --> 01:34:59,400
function the hash function G is now just

2024
01:34:59,400 --> 01:35:02,639
changed to random so you can see before

2025
01:35:02,639 --> 01:35:06,600
it was like G of R star it but now it's

2026
01:35:06,600 --> 01:35:09,679
just random

2027
01:35:10,080 --> 01:35:12,780
and this change is undetectable by the

2028
01:35:12,780 --> 01:35:14,580
adversary because of the security of

2029
01:35:14,580 --> 01:35:17,960
punctual pseudorandom functions

2030
01:35:19,679 --> 01:35:21,840
and in the next game this time the town

2031
01:35:21,840 --> 01:35:23,400
of ciphertext is unchanged and we're

2032
01:35:23,400 --> 01:35:27,300
going to change the construction in the

2033
01:35:27,300 --> 01:35:30,120
public key for G

2034
01:35:30,120 --> 01:35:32,520
this time the elf is switched from

2035
01:35:32,520 --> 01:35:37,760
injective mode to extremely lossy mode

2036
01:35:38,880 --> 01:35:41,699
and of course this is indistinguishable

2037
01:35:41,699 --> 01:35:43,800
to the adversary because of the

2038
01:35:43,800 --> 01:35:45,900
indistinguishability of injective and

2039
01:35:45,900 --> 01:35:48,600
lossy mode else

2040
01:35:48,600 --> 01:35:50,340
so this

2041
01:35:50,340 --> 01:35:52,500
allows us to do something in the next

2042
01:35:52,500 --> 01:35:54,360
game it that

2043
01:35:54,360 --> 01:35:56,699
takes advantage of the polynomial image

2044
01:35:56,699 --> 01:35:59,880
size of elves

2045
01:35:59,880 --> 01:36:02,340
so in the next game we actually have the

2046
01:36:02,340 --> 01:36:04,620
decryption Oracle that the adversaries

2047
01:36:04,620 --> 01:36:08,100
have access to being simulated with only

2048
01:36:08,100 --> 01:36:10,860
the public key and in particular without

2049
01:36:10,860 --> 01:36:14,340
the secret key and this is done by

2050
01:36:14,340 --> 01:36:16,260
utilizing the two properties of RSA I

2051
01:36:16,260 --> 01:36:18,540
mentioned earlier second inputs

2052
01:36:18,540 --> 01:36:20,100
extractability and common inputs

2053
01:36:20,100 --> 01:36:23,219
extractability and the polynomial image

2054
01:36:23,219 --> 01:36:25,639
size for Elf so we can actually

2055
01:36:25,639 --> 01:36:28,500
exhaustively search and iterate over the

2056
01:36:28,500 --> 01:36:32,280
entire Elf image to decrypt

2057
01:36:32,280 --> 01:36:34,920
so in this final step

2058
01:36:34,920 --> 01:36:38,880
we change the description of G

2059
01:36:38,880 --> 01:36:42,840
and we have it so that the mbaipo

2060
01:36:42,840 --> 01:36:45,659
changes the output Point instead of

2061
01:36:45,659 --> 01:36:48,060
having Z Star being the output point

2062
01:36:48,060 --> 01:36:50,699
where Z star is in the challenge

2063
01:36:50,699 --> 01:36:53,820
ciphertext as you can see highlighted in

2064
01:36:53,820 --> 01:36:56,940
red now it's actually just independently

2065
01:36:56,940 --> 01:36:59,820
random Zed Bar

2066
01:36:59,820 --> 01:37:01,560
and because of the challenge that

2067
01:37:01,560 --> 01:37:05,460
protects is unchanged this z bar has is

2068
01:37:05,460 --> 01:37:06,900
completely independent of the challenge

2069
01:37:06,900 --> 01:37:09,540
ciphertext

2070
01:37:09,540 --> 01:37:12,780
and this is undetectable because of the

2071
01:37:12,780 --> 01:37:14,820
security of MBA IPOs the adversaries

2072
01:37:14,820 --> 01:37:16,679
should not be able to find the output

2073
01:37:16,679 --> 01:37:18,420
point so they won't be able to tell if

2074
01:37:18,420 --> 01:37:21,620
you've changed the output point

2075
01:37:21,960 --> 01:37:24,060
so the important part of this last step

2076
01:37:24,060 --> 01:37:26,639
is that Z star in the challenge site for

2077
01:37:26,639 --> 01:37:30,480
text is now random and independent of

2078
01:37:30,480 --> 01:37:34,199
the public key given to the adversary so

2079
01:37:34,199 --> 01:37:36,659
there's no information about Zed star in

2080
01:37:36,659 --> 01:37:37,980
the public key

2081
01:37:37,980 --> 01:37:39,540
which means that it's independently

2082
01:37:39,540 --> 01:37:42,659
random being xored with the message so

2083
01:37:42,659 --> 01:37:46,199
we have that the message is hidden by

2084
01:37:46,199 --> 01:37:49,820
the security of the one-time pad

2085
01:37:49,920 --> 01:37:52,620
so that was the overview for

2086
01:37:52,620 --> 01:37:55,800
our OA EP result for low exponent RSA

2087
01:37:55,800 --> 01:38:00,480
and next for fo we have

2088
01:38:00,480 --> 01:38:03,960
this is the schematic for the Fujisaki

2089
01:38:03,960 --> 01:38:06,060
yokomoto encryption transform

2090
01:38:06,060 --> 01:38:09,840
and the ingredients are first a one-way

2091
01:38:09,840 --> 01:38:12,780
CPA public key encryption scheme

2092
01:38:12,780 --> 01:38:17,040
then a symmetric key encryption scheme

2093
01:38:17,040 --> 01:38:20,179
again we have two random oracles G and H

2094
01:38:20,179 --> 01:38:23,340
and here H is acting as encrypt with

2095
01:38:23,340 --> 01:38:24,239
hash

2096
01:38:24,239 --> 01:38:27,360
so it is the random coins for the

2097
01:38:27,360 --> 01:38:29,940
encryption so we have R coming in being

2098
01:38:29,940 --> 01:38:32,400
his input Rand the randomness and it is

2099
01:38:32,400 --> 01:38:35,159
also the acting as sort of the plain

2100
01:38:35,159 --> 01:38:38,040
text for the public key encryption and

2101
01:38:38,040 --> 01:38:41,040
in it's also acting as the random coins

2102
01:38:41,040 --> 01:38:45,920
for the encryption through its hash

2103
01:38:46,320 --> 01:38:49,080
and the result is that this whole scheme

2104
01:38:49,080 --> 01:38:52,560
is IND cca2 secure

2105
01:38:52,560 --> 01:38:56,340
and it's used by as I mentioned before

2106
01:38:56,340 --> 01:38:59,280
the selection for this post Quantum

2107
01:38:59,280 --> 01:39:01,980
standardization for uh key encapsulation

2108
01:39:01,980 --> 01:39:03,360
mechanisms

2109
01:39:03,360 --> 01:39:06,000
but unfortunately this instantiation

2110
01:39:06,000 --> 01:39:08,820
that I will present is not post Quantum

2111
01:39:08,820 --> 01:39:11,520
secure because else the construction

2112
01:39:11,520 --> 01:39:14,400
provided for elves by xandry uses the

2113
01:39:14,400 --> 01:39:17,599
ddh assumption

2114
01:39:18,420 --> 01:39:20,760
so we've prove instantiation actually

2115
01:39:20,760 --> 01:39:23,460
for a slightly tweaked version of the fo

2116
01:39:23,460 --> 01:39:27,239
transform in particular the r Randomness

2117
01:39:27,239 --> 01:39:29,520
is additionally used as input for the

2118
01:39:29,520 --> 01:39:31,679
symmetric key encryption scheme where it

2119
01:39:31,679 --> 01:39:33,239
is not in the original

2120
01:39:33,239 --> 01:39:35,159
so

2121
01:39:35,159 --> 01:39:38,460
using this version We instantiate G as

2122
01:39:38,460 --> 01:39:41,699
the exact same thing as we did for oaep

2123
01:39:41,699 --> 01:39:44,400
in particular we have again

2124
01:39:44,400 --> 01:39:46,739
IO

2125
01:39:46,739 --> 01:39:48,440
and then we have a punctured

2126
01:39:48,440 --> 01:39:51,120
pseudorandom function followed by an

2127
01:39:51,120 --> 01:39:53,520
extremely lossy function followed by a

2128
01:39:53,520 --> 01:39:55,980
prg followed by a pairwise independent

2129
01:39:55,980 --> 01:39:57,420
hash

2130
01:39:57,420 --> 01:39:59,100
and we have

2131
01:39:59,100 --> 01:40:01,440
H being instantiated just as a pairwise

2132
01:40:01,440 --> 01:40:03,719
independent hash

2133
01:40:03,719 --> 01:40:05,760
and the base

2134
01:40:05,760 --> 01:40:08,280
uh public key encryption scheme is lost

2135
01:40:08,280 --> 01:40:09,540
the encryption

2136
01:40:09,540 --> 01:40:10,980
and

2137
01:40:10,980 --> 01:40:14,100
The Base secret key encryption is

2138
01:40:14,100 --> 01:40:17,400
authenticated encryption and again like

2139
01:40:17,400 --> 01:40:21,480
for RSA oap result we also need there to

2140
01:40:21,480 --> 01:40:22,620
exist

2141
01:40:22,620 --> 01:40:26,040
um MBA IPO for specific distributions

2142
01:40:26,040 --> 01:40:29,900
specific and predictable distributions

2143
01:40:31,020 --> 01:40:33,480
and so I won't go through the proof just

2144
01:40:33,480 --> 01:40:36,600
because uh time constraints but I wanted

2145
01:40:36,600 --> 01:40:39,780
to mention that we prove this result in

2146
01:40:39,780 --> 01:40:41,100
two steps

2147
01:40:41,100 --> 01:40:43,860
so following the observation of Paul

2148
01:40:43,860 --> 01:40:47,580
finds it out so the

2149
01:40:47,580 --> 01:40:50,400
fo scheme operates a base one-way CPA

2150
01:40:50,400 --> 01:40:53,280
scheme into an indcca to secure scheme

2151
01:40:53,280 --> 01:40:55,860
so this can be broken into two steps

2152
01:40:55,860 --> 01:40:58,980
first we start with the one-way

2153
01:40:58,980 --> 01:41:01,800
CPA scheme and then upgrade that into a

2154
01:41:01,800 --> 01:41:06,000
one-way PCA scheme where one way PCA is

2155
01:41:06,000 --> 01:41:08,940
one way under plain text checking

2156
01:41:08,940 --> 01:41:10,080
attacks

2157
01:41:10,080 --> 01:41:12,900
which is a it's a non-standard security

2158
01:41:12,900 --> 01:41:14,219
assumption

2159
01:41:14,219 --> 01:41:16,739
and it's between these two things so

2160
01:41:16,739 --> 01:41:18,600
then the next step is upgrading from

2161
01:41:18,600 --> 01:41:23,760
one-way PCA to IND cc82

2162
01:41:23,760 --> 01:41:25,320
okay

2163
01:41:25,320 --> 01:41:29,820
so in summary we provide

2164
01:41:29,820 --> 01:41:32,280
we so uh we provide full instantiations

2165
01:41:32,280 --> 01:41:34,260
of IND dca2 standard model

2166
01:41:34,260 --> 01:41:36,000
instantiations

2167
01:41:36,000 --> 01:41:38,639
for low exponent RSA

2168
01:41:38,639 --> 01:41:42,020
oaep and a tweaked version of the

2169
01:41:42,020 --> 01:41:43,980
fujisakiakamoto encryption transforms

2170
01:41:43,980 --> 01:41:46,500
and these two

2171
01:41:46,500 --> 01:41:49,080
have been long long these two

2172
01:41:49,080 --> 01:41:50,940
instantiations have been long-standing

2173
01:41:50,940 --> 01:41:53,580
open problems and

2174
01:41:53,580 --> 01:41:55,020
we provide

2175
01:41:55,020 --> 01:41:57,540
instantiation so

2176
01:41:57,540 --> 01:41:59,880
both of these instantiations use this

2177
01:41:59,880 --> 01:42:02,100
construction of

2178
01:42:02,100 --> 01:42:06,420
i o hash function prg elf and a

2179
01:42:06,420 --> 01:42:08,699
functionable pseudonym function

2180
01:42:08,699 --> 01:42:11,179
and in the paper we also provide

2181
01:42:11,179 --> 01:42:14,699
standard model constructions for mbaipo

2182
01:42:14,699 --> 01:42:16,860
the multi-bit point function obfuscation

2183
01:42:16,860 --> 01:42:21,060
with auxiliary info based on RSA and

2184
01:42:21,060 --> 01:42:22,560
elves

2185
01:42:22,560 --> 01:42:23,820
so

2186
01:42:23,820 --> 01:42:27,600
uh some open problems are to create a

2187
01:42:27,600 --> 01:42:30,420
version that is post Quantum secure and

2188
01:42:30,420 --> 01:42:33,420
another one is to find a way to abstract

2189
01:42:33,420 --> 01:42:35,760
the properties we need from this

2190
01:42:35,760 --> 01:42:39,300
composition of five things into some

2191
01:42:39,300 --> 01:42:40,739
uh

2192
01:42:40,739 --> 01:42:43,260
just simple descriptor for the

2193
01:42:43,260 --> 01:42:46,080
properties required

2194
01:42:46,080 --> 01:42:48,480
and you can see the paper for more

2195
01:42:48,480 --> 01:42:51,060
details about everything in particular

2196
01:42:51,060 --> 01:42:54,239
about the fo proof and the Ambi appeal

2197
01:42:54,239 --> 01:42:57,119
constructions so thank you

2198
01:42:57,119 --> 01:42:59,839
thank you

2199
01:43:01,260 --> 01:43:04,020
okay although we are just a weekly

2200
01:43:04,020 --> 01:43:06,060
behind schedule but do you have any

2201
01:43:06,060 --> 01:43:07,679
short question

2202
01:43:07,679 --> 01:43:10,159
of

2203
01:43:17,040 --> 01:43:19,500
thank you that's a great result

2204
01:43:19,500 --> 01:43:22,560
um can you comment a little bit on the

2205
01:43:22,560 --> 01:43:24,420
um second infant extractability and

2206
01:43:24,420 --> 01:43:26,659
common input extractability of RSA

2207
01:43:26,659 --> 01:43:28,860
specifically together with assuming

2208
01:43:28,860 --> 01:43:31,679
exponential hardness of RSA like it's I

2209
01:43:31,679 --> 01:43:33,780
think it's slide 18.

2210
01:43:33,780 --> 01:43:36,780
foreign

2211
01:43:40,880 --> 01:43:42,960
about these assumptions I'm not so

2212
01:43:42,960 --> 01:43:44,699
familiar with them

2213
01:43:44,699 --> 01:43:48,480
yeah um the first two things are

2214
01:43:48,480 --> 01:43:51,360
um not assumptions they could be shown

2215
01:43:51,360 --> 01:43:54,540
with the coppersmith algorithm and the

2216
01:43:54,540 --> 01:43:57,540
sub-exponentially one-way requirement is

2217
01:43:57,540 --> 01:44:02,040
an assumption but uh It is believed by

2218
01:44:02,040 --> 01:44:04,679
some people to be true about RSA but it

2219
01:44:04,679 --> 01:44:07,440
is um still an assumption all right

2220
01:44:07,440 --> 01:44:09,919
thanks

2221
01:44:13,139 --> 01:44:15,320
foreign

2222
01:44:28,380 --> 01:44:31,159
so some

