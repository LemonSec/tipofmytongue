1
00:00:00,979 --> 00:00:03,780
welcome to this teaser talk for our

2
00:00:03,780 --> 00:00:06,299
paper counting vampires from universe

3
00:00:06,299 --> 00:00:08,720
and some check to updatable secret snark

4
00:00:08,720 --> 00:00:11,519
my name is Jan Nasim and this is a joint

5
00:00:11,519 --> 00:00:15,360
work with helger lipma and mihal science

6
00:00:15,360 --> 00:00:18,380
uh let's start with a bit of motivation

7
00:00:18,380 --> 00:00:21,060
uh so in this work we will focus on

8
00:00:21,060 --> 00:00:23,720
efficient serial knowledge arguments

9
00:00:23,720 --> 00:00:26,939
so this means we want to prove something

10
00:00:26,939 --> 00:00:30,619
without clicking any other information

11
00:00:30,619 --> 00:00:33,960
applications for this are well known

12
00:00:33,960 --> 00:00:35,460
they're for example private

13
00:00:35,460 --> 00:00:36,960
cryptocurrencies which are very popular

14
00:00:36,960 --> 00:00:40,260
right now electronic voting when you try

15
00:00:40,260 --> 00:00:41,940
to prove that

16
00:00:41,940 --> 00:00:44,700
uh let's say Natalie is computed

17
00:00:44,700 --> 00:00:47,879
correctly delegation of computation and

18
00:00:47,879 --> 00:00:49,579
so on

19
00:00:49,579 --> 00:00:52,379
the model that we'll be using is the

20
00:00:52,379 --> 00:00:54,360
following we have a proverb we have a

21
00:00:54,360 --> 00:00:56,579
verifier and we have a trusted third

22
00:00:56,579 --> 00:00:58,020
party

23
00:00:58,020 --> 00:01:01,199
so a prover knows the statement which is

24
00:01:01,199 --> 00:01:03,660
public and some secret witness verified

25
00:01:03,660 --> 00:01:05,459
knows only the statement

26
00:01:05,459 --> 00:01:07,920
and then the trusted party generates a

27
00:01:07,920 --> 00:01:10,400
structured reference string

28
00:01:10,400 --> 00:01:14,159
verifier and using this it's possible to

29
00:01:14,159 --> 00:01:15,720
generate the proof

30
00:01:15,720 --> 00:01:18,360
uh and then we repair will either accept

31
00:01:18,360 --> 00:01:20,880
or reject the proof

32
00:01:20,880 --> 00:01:23,759
uh in particular we will look at zinc

33
00:01:23,759 --> 00:01:26,820
arcs these are zero knowledge succinct

34
00:01:26,820 --> 00:01:29,939
non-interactive arguments of knowledge

35
00:01:29,939 --> 00:01:33,900
hair prover has X and W which he claims

36
00:01:33,900 --> 00:01:37,740
isn't as some relation r x is public W

37
00:01:37,740 --> 00:01:40,740
is private and we require the following

38
00:01:40,740 --> 00:01:43,200
knowledge sounds meaning that

39
00:01:43,200 --> 00:01:46,740
uh proverb succeeds knows the witness

40
00:01:46,740 --> 00:01:49,860
and we have zero knowledge which means

41
00:01:49,860 --> 00:01:52,920
that only information that is leaked is

42
00:01:52,920 --> 00:01:55,920
that X and W satisfy the relation

43
00:01:55,920 --> 00:01:57,899
and finally we want to succinct this

44
00:01:57,899 --> 00:01:59,520
which means that the proof size is

45
00:01:59,520 --> 00:02:01,380
sub-linear in the size of the statement

46
00:02:01,380 --> 00:02:03,540
and the witness

47
00:02:03,540 --> 00:02:05,159
um

48
00:02:05,159 --> 00:02:08,399
there's a big problem however with the

49
00:02:08,399 --> 00:02:12,300
generation of the SRS because we cannot

50
00:02:12,300 --> 00:02:13,680
have a trusted party in most

51
00:02:13,680 --> 00:02:15,060
applications

52
00:02:15,060 --> 00:02:18,180
it is possible to have a transparent

53
00:02:18,180 --> 00:02:20,520
condom reference string

54
00:02:20,520 --> 00:02:23,640
which means that you don't have to put

55
00:02:23,640 --> 00:02:26,940
any trust in the setup

56
00:02:26,940 --> 00:02:30,120
but you also lose some efficiency by

57
00:02:30,120 --> 00:02:31,200
doing that

58
00:02:31,200 --> 00:02:33,780
so that's why

59
00:02:33,780 --> 00:02:36,959
um ideally you want a distributed SRS

60
00:02:36,959 --> 00:02:39,000
generation so that you only have to

61
00:02:39,000 --> 00:02:39,959
trust

62
00:02:39,959 --> 00:02:42,239
some of the generators of this service

63
00:02:42,239 --> 00:02:44,760
but not all of them

64
00:02:44,760 --> 00:02:47,599
there are two good Notions here one is

65
00:02:47,599 --> 00:02:50,700
universal SRS which means that

66
00:02:50,700 --> 00:02:53,580
the same SRS can be used for all

67
00:02:53,580 --> 00:02:56,340
relations at least up to some size

68
00:02:56,340 --> 00:02:58,800
and in that case we can use we can

69
00:02:58,800 --> 00:03:01,019
generate testers once and we can use it

70
00:03:01,019 --> 00:03:02,879
again and again

71
00:03:02,879 --> 00:03:04,739
and secondly we have a notion of

72
00:03:04,739 --> 00:03:06,019
updateability

73
00:03:06,019 --> 00:03:07,980
which means

74
00:03:07,980 --> 00:03:11,760
that we have a very nice SRS generation

75
00:03:11,760 --> 00:03:13,920
protocol where the first part you can

76
00:03:13,920 --> 00:03:15,720
generate SRS

77
00:03:15,720 --> 00:03:19,260
everyone else can verify this and then

78
00:03:19,260 --> 00:03:21,720
the second part again updated the third

79
00:03:21,720 --> 00:03:24,239
part you can updated and so on until we

80
00:03:24,239 --> 00:03:27,000
get the finalist arrest and this can now

81
00:03:27,000 --> 00:03:29,580
be securely used as long as one of the

82
00:03:29,580 --> 00:03:31,379
parties was honest

83
00:03:31,379 --> 00:03:33,959
uh so let's get to our result we

84
00:03:33,959 --> 00:03:35,940
construct the shortest Universal and

85
00:03:35,940 --> 00:03:38,070
updatable C guess Mark

86
00:03:38,070 --> 00:03:38,640
[Music]

87
00:03:38,640 --> 00:03:40,640
um

88
00:03:41,400 --> 00:03:45,060
so as we see from this table only seek a

89
00:03:45,060 --> 00:03:47,700
snark known so far which is more this

90
00:03:47,700 --> 00:03:50,700
has a shorter group is called six things

91
00:03:50,700 --> 00:03:53,580
I guess Mark but that is non-updatable

92
00:03:53,580 --> 00:03:56,780
and non-universal so it's a lot less

93
00:03:56,780 --> 00:04:00,840
inconvenient to use in practice

94
00:04:00,840 --> 00:04:01,799
um

95
00:04:01,799 --> 00:04:05,700
additionally we also achieve proverb and

96
00:04:05,700 --> 00:04:07,860
verifier which are competitive in

97
00:04:07,860 --> 00:04:08,819
runtime

98
00:04:08,819 --> 00:04:11,640
yeah to other updateable and Universal

99
00:04:11,640 --> 00:04:13,519
tickets marks

100
00:04:13,519 --> 00:04:16,399
but we have to have a more complicated

101
00:04:16,399 --> 00:04:19,019
structured reference string but still

102
00:04:19,019 --> 00:04:22,680
luckily is updatable and Universal

103
00:04:22,680 --> 00:04:26,160
uh so how do we achieve this uh we take

104
00:04:26,160 --> 00:04:29,160
two uh already known Seeker snarks lunar

105
00:04:29,160 --> 00:04:31,320
Marlin and take some of the ideas from

106
00:04:31,320 --> 00:04:33,900
there and then we had a new subject

107
00:04:33,900 --> 00:04:36,419
argument that we call count

108
00:04:36,419 --> 00:04:39,840
a new polynomial patching technique a

109
00:04:39,840 --> 00:04:42,540
lot of small optimization and with each

110
00:04:42,540 --> 00:04:44,520
optimization we will see that there's a

111
00:04:44,520 --> 00:04:46,860
trade-off between proof size and Pro

112
00:04:46,860 --> 00:04:48,900
versus computational and services

113
00:04:48,900 --> 00:04:52,199
thank you for listening uh I hope to see

114
00:04:52,199 --> 00:04:55,160
you in our product

