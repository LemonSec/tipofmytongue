1
00:00:00,120 --> 00:00:02,840
hello my name is

2
00:00:02,840 --> 00:00:05,220
I'm going to present the paper final

3
00:00:05,220 --> 00:00:06,960
faster full home of encryption

4
00:00:06,960 --> 00:00:10,320
instantiated within true and lwe this is

5
00:00:10,320 --> 00:00:12,120
a joint work with Charlotte Bonte

6
00:00:12,120 --> 00:00:14,639
ilechenko Jong Park and Professor Nigel

7
00:00:14,639 --> 00:00:15,719
smart

8
00:00:15,719 --> 00:00:18,539
the starting point of this work is the

9
00:00:18,539 --> 00:00:21,900
observation that most fhe schemes are

10
00:00:21,900 --> 00:00:24,420
based on the irw problem and what this

11
00:00:24,420 --> 00:00:26,840
problem allows us to do is to sample

12
00:00:26,840 --> 00:00:29,699
pairs of polynomials in some polynomial

13
00:00:29,699 --> 00:00:32,399
ring with integer polynomials of degree

14
00:00:32,399 --> 00:00:35,160
bounded by some parameter n and these

15
00:00:35,160 --> 00:00:38,340
pairs have a special structure but they

16
00:00:38,340 --> 00:00:42,000
look random modulus some integer Q

17
00:00:42,000 --> 00:00:44,820
but there is this kind of similar

18
00:00:44,820 --> 00:00:47,040
problem which is the end true that allow

19
00:00:47,040 --> 00:00:49,200
us to sample to sample one single

20
00:00:49,200 --> 00:00:51,719
polynomial also with a hidden structure

21
00:00:51,719 --> 00:00:55,680
and that also looks random module uh

22
00:00:55,680 --> 00:00:57,960
queue but now we have one single

23
00:00:57,960 --> 00:00:59,640
polynomial instead of one pair of

24
00:00:59,640 --> 00:01:03,059
polynomials so if we could somehow

25
00:01:03,059 --> 00:01:05,459
replace the ilw problem by the entry

26
00:01:05,459 --> 00:01:07,500
problem in these fhc schemes the

27
00:01:07,500 --> 00:01:10,320
intuition is that we should use half of

28
00:01:10,320 --> 00:01:12,240
the memory and maybe half of the running

29
00:01:12,240 --> 00:01:14,400
time right

30
00:01:14,400 --> 00:01:17,939
however the intro problem is a bit more

31
00:01:17,939 --> 00:01:20,520
complicated than the rlw problem because

32
00:01:20,520 --> 00:01:24,360
for the rlwe we have essentially this

33
00:01:24,360 --> 00:01:26,700
key recovery attacks that take

34
00:01:26,700 --> 00:01:29,700
exponential timing n but for the entry

35
00:01:29,700 --> 00:01:31,920
problem on top of that we also have this

36
00:01:31,920 --> 00:01:34,560
sublets attacks and the hardness of this

37
00:01:34,560 --> 00:01:38,340
problem varies very strongly On Queue

38
00:01:38,340 --> 00:01:40,979
right it depends very strongly on Cube

39
00:01:40,979 --> 00:01:42,900
so the picture we have is the following

40
00:01:42,900 --> 00:01:45,659
when Q is linearing n the sublets

41
00:01:45,659 --> 00:01:48,840
attacks are very expensive and then the

42
00:01:48,840 --> 00:01:51,899
entry problem is hard but as we start to

43
00:01:51,899 --> 00:01:54,960
increase Q the sublets attacks become

44
00:01:54,960 --> 00:01:58,860
very easy and then at some point it the

45
00:01:58,860 --> 00:02:01,380
sublets attack even takes a polynomial

46
00:02:01,380 --> 00:02:04,020
time so the intro problem becomes easy

47
00:02:04,020 --> 00:02:07,380
right so there is this turning point

48
00:02:07,380 --> 00:02:10,139
where the the sublets attacks cost

49
00:02:10,139 --> 00:02:11,879
essentially the same as the curry

50
00:02:11,879 --> 00:02:13,440
recovery attack and we call this the

51
00:02:13,440 --> 00:02:14,819
fatigue point so

52
00:02:14,819 --> 00:02:17,879
when we want to construct the schemes

53
00:02:17,879 --> 00:02:19,739
based on the untrue we have to choose

54
00:02:19,739 --> 00:02:22,500
the parameters on this version if we

55
00:02:22,500 --> 00:02:25,260
choose above the fatigue point we are in

56
00:02:25,260 --> 00:02:27,660
this over stretched regime and then the

57
00:02:27,660 --> 00:02:29,879
security of the intrue is not the same

58
00:02:29,879 --> 00:02:31,800
so this means that we are much more

59
00:02:31,800 --> 00:02:33,720
limited with the choice of parameters

60
00:02:33,720 --> 00:02:37,980
and when compared to the rlwe

61
00:02:37,980 --> 00:02:39,959
so the contributions of this paper are

62
00:02:39,959 --> 00:02:41,760
the following we use the intro problem

63
00:02:41,760 --> 00:02:45,180
to construct fhe with parameters that

64
00:02:45,180 --> 00:02:47,519
lie outside of the overstretch the

65
00:02:47,519 --> 00:02:51,000
regime so our parameters are always here

66
00:02:51,000 --> 00:02:52,680
and then

67
00:02:52,680 --> 00:02:54,480
um so we're using the end true we

68
00:02:54,480 --> 00:02:57,300
construct a scheme that is similar to to

69
00:02:57,300 --> 00:03:00,480
the GSW but has a faster external

70
00:03:00,480 --> 00:03:03,239
product we call this a scheme NGS and

71
00:03:03,239 --> 00:03:05,340
then we use the NGS to bootstrap a

72
00:03:05,340 --> 00:03:07,200
scheme that is based on the intro so

73
00:03:07,200 --> 00:03:09,599
because both NGS and this scheme are

74
00:03:09,599 --> 00:03:11,519
based on the untrue this means that we

75
00:03:11,519 --> 00:03:14,459
construct fhe based only on the entry

76
00:03:14,459 --> 00:03:15,239
problem

77
00:03:15,239 --> 00:03:18,080
we also used NGS

78
00:03:18,080 --> 00:03:22,019
to bootstrap a scheme based on the lwa

79
00:03:22,019 --> 00:03:26,459
problem and this combination of lwe with

80
00:03:26,459 --> 00:03:29,459
intrude give us a scheme that is about

81
00:03:29,459 --> 00:03:33,959
28 faster than tfhe and uses about half

82
00:03:33,959 --> 00:03:37,800
of the the memory that tfhg uses

83
00:03:37,800 --> 00:03:40,739
so the main source of gain is the

84
00:03:40,739 --> 00:03:43,200
following when we compare NGS with GSW

85
00:03:43,200 --> 00:03:46,019
we have a scalar Cipher texts in our

86
00:03:46,019 --> 00:03:47,819
case it's just one polynomial instead of

87
00:03:47,819 --> 00:03:50,580
the pair of polynomials either a full

88
00:03:50,580 --> 00:03:53,280
Cipher text in our case is a vector of

89
00:03:53,280 --> 00:03:55,680
polynomials with L polynomials and in

90
00:03:55,680 --> 00:03:59,640
the GSW we have a matrix with with four

91
00:03:59,640 --> 00:04:01,620
times L polynomials and because of this

92
00:04:01,620 --> 00:04:04,080
the external product costs only L

93
00:04:04,080 --> 00:04:06,420
multiplications in our case instead of 4

94
00:04:06,420 --> 00:04:08,220
times l

95
00:04:08,220 --> 00:04:10,260
we have a proof of concept

96
00:04:10,260 --> 00:04:12,659
implementation in C plus plus and you

97
00:04:12,659 --> 00:04:15,900
can find it in this GitHub repository

98
00:04:15,900 --> 00:04:21,238
so when we run the tfhe we in our

99
00:04:21,238 --> 00:04:24,060
experiments one bootstrapping takes

100
00:04:24,060 --> 00:04:26,940
about six six milliseconds

101
00:04:26,940 --> 00:04:30,540
and then the two last rows here are for

102
00:04:30,540 --> 00:04:33,900
our schemes so diff this second row is

103
00:04:33,900 --> 00:04:35,880
our scheme based only on the untrue

104
00:04:35,880 --> 00:04:37,860
problem and you can see that our run

105
00:04:37,860 --> 00:04:39,840
times are kind of similar but they are

106
00:04:39,840 --> 00:04:41,220
uh

107
00:04:41,220 --> 00:04:45,300
more expensive however when we when we

108
00:04:45,300 --> 00:04:49,380
combined the lwe with DN true we got a

109
00:04:49,380 --> 00:04:51,780
bootstrapping that is faster than tfhe's

110
00:04:51,780 --> 00:04:54,600
bootstrapping so essentially the key

111
00:04:54,600 --> 00:04:56,400
material here you can see that's about

112
00:04:56,400 --> 00:04:59,520
half of the key material of tfhe and the

113
00:04:59,520 --> 00:05:03,120
the bootstrapping is about 28 faster

114
00:05:03,120 --> 00:05:05,220
so if you want more information please

115
00:05:05,220 --> 00:05:07,440
you can check the the paper it's

116
00:05:07,440 --> 00:05:09,660
available in knee print and of course if

117
00:05:09,660 --> 00:05:12,180
I have any question you can contact me

118
00:05:12,180 --> 00:05:15,199
thank you very much

