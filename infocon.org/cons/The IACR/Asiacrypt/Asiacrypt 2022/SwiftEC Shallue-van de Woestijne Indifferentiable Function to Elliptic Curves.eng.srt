1
00:00:00,480 --> 00:00:02,639
hello my name is corca Chavez and I will

2
00:00:02,639 --> 00:00:04,019
be presenting an issue with the work

3
00:00:04,019 --> 00:00:06,000
shalu van devusthan in differentiable

4
00:00:06,000 --> 00:00:07,980
function to elliptic curves by myself

5
00:00:07,980 --> 00:00:11,280
Francisco Rodriguez and meditibushi this

6
00:00:11,280 --> 00:00:13,019
work represents a big leap for hashing

7
00:00:13,019 --> 00:00:14,759
into ordinary elliptic curves as it

8
00:00:14,759 --> 00:00:16,500
results in the first known constant time

9
00:00:16,500 --> 00:00:18,900
in differentiable hash function to a

10
00:00:18,900 --> 00:00:20,279
large set of chords that requires a

11
00:00:20,279 --> 00:00:22,560
single square root computation it also

12
00:00:22,560 --> 00:00:23,460
provides an efficient Point

13
00:00:23,460 --> 00:00:25,199
representation algorithm which is

14
00:00:25,199 --> 00:00:27,119
essentially the inverse of this hash and

15
00:00:27,119 --> 00:00:28,859
both of this constitutes what we call an

16
00:00:28,859 --> 00:00:30,599
admissible encoding

17
00:00:30,599 --> 00:00:32,460
so a quick word on the problem of

18
00:00:32,460 --> 00:00:34,380
hashing to elliptic curves a lot of

19
00:00:34,380 --> 00:00:35,880
applications require hashing to a

20
00:00:35,880 --> 00:00:37,380
cryptographic group and if this is a

21
00:00:37,380 --> 00:00:39,180
final field then it's as simple as just

22
00:00:39,180 --> 00:00:40,800
hashing to a long bit string and

23
00:00:40,800 --> 00:00:43,020
interpreting it mod queue but in the

24
00:00:43,020 --> 00:00:44,760
case of elliptical cryptography this is

25
00:00:44,760 --> 00:00:46,320
not trivial so the problem that we're

26
00:00:46,320 --> 00:00:48,600
faced with is how can we generate X and

27
00:00:48,600 --> 00:00:50,879
Y coordinates that look random while

28
00:00:50,879 --> 00:00:53,039
still satisfying the curve equations

29
00:00:53,039 --> 00:00:55,140
the basic idea is that we obtain a hash

30
00:00:55,140 --> 00:00:57,180
into the curve by first hashing to the

31
00:00:57,180 --> 00:00:59,100
field of definition and then composing

32
00:00:59,100 --> 00:01:01,140
with an encoding function which is a map

33
00:01:01,140 --> 00:01:02,940
from the finite field onto the elliptic

34
00:01:02,940 --> 00:01:04,920
core points so we have the forward

35
00:01:04,920 --> 00:01:06,600
direction from the field to the curve

36
00:01:06,600 --> 00:01:08,100
and then we also assume that we have a

37
00:01:08,100 --> 00:01:09,840
function in the inverse direction from

38
00:01:09,840 --> 00:01:11,939
the chord to the field and usually the

39
00:01:11,939 --> 00:01:13,439
function is not one to one so the

40
00:01:13,439 --> 00:01:15,240
inverse is allowed to return any one of

41
00:01:15,240 --> 00:01:18,000
the possible pre images at random

42
00:01:18,000 --> 00:01:20,159
we obtain a hash function by first

43
00:01:20,159 --> 00:01:22,439
hashing into the field and then encoding

44
00:01:22,439 --> 00:01:23,880
the field element to a point in the

45
00:01:23,880 --> 00:01:26,040
curve and it can be shown that this is a

46
00:01:26,040 --> 00:01:27,900
cryptographically secure hash as long as

47
00:01:27,900 --> 00:01:29,820
three conditions are met the encoding

48
00:01:29,820 --> 00:01:31,979
has to be efficiently computable it has

49
00:01:31,979 --> 00:01:33,420
to be regular meaning that the

50
00:01:33,420 --> 00:01:35,100
distribution of images is close to

51
00:01:35,100 --> 00:01:37,079
uniform and it has to be samplable

52
00:01:37,079 --> 00:01:38,640
meaning that there is an efficient

53
00:01:38,640 --> 00:01:40,920
algorithm to compute uniformly random

54
00:01:40,920 --> 00:01:43,500
for images if the encoding satisfies all

55
00:01:43,500 --> 00:01:45,360
three properties we say that it is an

56
00:01:45,360 --> 00:01:47,159
admissible encoding

57
00:01:47,159 --> 00:01:48,960
now the main ingredient in our

58
00:01:48,960 --> 00:01:50,579
construction is the shaluvan the

59
00:01:50,579 --> 00:01:52,500
bushtrain map which is actually a family

60
00:01:52,500 --> 00:01:54,899
of encodings so for each field element U

61
00:01:54,899 --> 00:01:58,320
we obtain an encoding fu this encodings

62
00:01:58,320 --> 00:02:00,180
are quite efficient as the main cost is

63
00:02:00,180 --> 00:02:02,340
a single square root computation however

64
00:02:02,340 --> 00:02:04,920
for any choice of U the encoding fu is

65
00:02:04,920 --> 00:02:06,119
not regular

66
00:02:06,119 --> 00:02:07,799
there is a construction which we call

67
00:02:07,799 --> 00:02:10,139
alligator square that solves this by

68
00:02:10,139 --> 00:02:11,940
taking two evaluations of a view and

69
00:02:11,940 --> 00:02:13,319
adding them together

70
00:02:13,319 --> 00:02:14,879
and it can be shown that this new

71
00:02:14,879 --> 00:02:16,860
construction with a domain twice as

72
00:02:16,860 --> 00:02:19,200
large is in fact admissible even though

73
00:02:19,200 --> 00:02:21,120
now it requires two evaluations of F and

74
00:02:21,120 --> 00:02:22,739
has two square roots and this

75
00:02:22,739 --> 00:02:24,959
represented the state of the art so far

76
00:02:24,959 --> 00:02:27,599
now our new Swift DC construction what

77
00:02:27,599 --> 00:02:29,459
it does is that it still uses a domain

78
00:02:29,459 --> 00:02:31,080
twice as large but now the second

79
00:02:31,080 --> 00:02:33,660
Android to the function is U itself so

80
00:02:33,660 --> 00:02:35,340
rather than being a fixed parameter it

81
00:02:35,340 --> 00:02:37,200
becomes a second variable and what we

82
00:02:37,200 --> 00:02:38,640
gain is that we're back to doing a

83
00:02:38,640 --> 00:02:39,959
single square root meaning that our

84
00:02:39,959 --> 00:02:41,700
reconstruction should be roughly twice

85
00:02:41,700 --> 00:02:43,920
as fast this change is quite simple to

86
00:02:43,920 --> 00:02:45,720
convey but it has very deep implications

87
00:02:45,720 --> 00:02:48,360
the SW maps are actually a composition

88
00:02:48,360 --> 00:02:49,800
of maps that go through various

89
00:02:49,800 --> 00:02:52,019
intermediate Spaces parameterized by you

90
00:02:52,019 --> 00:02:54,599
so now that U is a variable the geometry

91
00:02:54,599 --> 00:02:56,400
is completely different and we need a

92
00:02:56,400 --> 00:02:58,319
new proof of regularity which is one of

93
00:02:58,319 --> 00:02:59,879
the main theoretical contributions in

94
00:02:59,879 --> 00:03:00,840
the paper

95
00:03:00,840 --> 00:03:02,940
on the other hand we also have practical

96
00:03:02,940 --> 00:03:05,280
implications because before it was known

97
00:03:05,280 --> 00:03:07,379
how to evaluate a view efficiently as

98
00:03:07,379 --> 00:03:08,340
long as we allow for some

99
00:03:08,340 --> 00:03:11,099
pre-computation after learning U but now

100
00:03:11,099 --> 00:03:13,080
what we need is an algorithm that will

101
00:03:13,080 --> 00:03:15,239
evaluate Fu for any choice of you

102
00:03:15,239 --> 00:03:17,580
efficiently and we show that this is in

103
00:03:17,580 --> 00:03:19,379
fact still possible as long as the size

104
00:03:19,379 --> 00:03:21,480
of the field is one material the chord

105
00:03:21,480 --> 00:03:23,700
discriminant is a square plus one other

106
00:03:23,700 --> 00:03:26,459
condition that depends on the Curve

107
00:03:26,459 --> 00:03:28,560
unlikely that you're squared this means

108
00:03:28,560 --> 00:03:30,000
that our construction is not applicable

109
00:03:30,000 --> 00:03:32,400
to every single elliptic curve but it is

110
00:03:32,400 --> 00:03:33,800
applicable to a large set of them

111
00:03:33,800 --> 00:03:35,819
Additionally the conditions are not

112
00:03:35,819 --> 00:03:38,040
invariant under isogenes so as long as

113
00:03:38,040 --> 00:03:39,840
the Q equals one more three condition is

114
00:03:39,840 --> 00:03:41,760
met the other two conditions can be

115
00:03:41,760 --> 00:03:43,799
bypassed by just finding an exogenous

116
00:03:43,799 --> 00:03:46,019
curve that does satisfies them and then

117
00:03:46,019 --> 00:03:47,879
composing the Swifty Constitution to

118
00:03:47,879 --> 00:03:50,340
that curve with the exogenic

119
00:03:50,340 --> 00:03:52,739
and finally we also present uh the

120
00:03:52,739 --> 00:03:54,540
alligator Swift algorithm which is the

121
00:03:54,540 --> 00:03:56,220
one that computes a random frame image

122
00:03:56,220 --> 00:03:58,440
this is useful for representing points

123
00:03:58,440 --> 00:04:00,000
as uniform bit strings which was the

124
00:04:00,000 --> 00:04:01,500
main idea of the alligator construction

125
00:04:01,500 --> 00:04:03,840
and the way it works is just by picking

126
00:04:03,840 --> 00:04:06,299
a random U and trying to invert a few of

127
00:04:06,299 --> 00:04:09,000
X because the fuse are not regular it

128
00:04:09,000 --> 00:04:10,680
means that for any given U it may be

129
00:04:10,680 --> 00:04:13,319
that X has no pre-image so in that case

130
00:04:13,319 --> 00:04:15,000
you just have to restart and from there

131
00:04:15,000 --> 00:04:16,440
you just have to do a bit of rejection

132
00:04:16,440 --> 00:04:19,139
sampling to ensure uniformity you can

133
00:04:19,139 --> 00:04:21,060
actually reject by doing quadratic

134
00:04:21,060 --> 00:04:23,460
reciprocity tests before committing to

135
00:04:23,460 --> 00:04:26,100
any actual Square computations so in the

136
00:04:26,100 --> 00:04:28,139
end you always do at most two square

137
00:04:28,139 --> 00:04:29,940
roots which is a big improvement over

138
00:04:29,940 --> 00:04:33,120
the previous alligator squared variant

139
00:04:33,120 --> 00:04:35,340
so that is a short summary of our work

140
00:04:35,340 --> 00:04:36,840
and if you want to hear more about the

141
00:04:36,840 --> 00:04:38,400
details then we look forward to seeing

142
00:04:38,400 --> 00:04:41,719
you in Asia group thank you

