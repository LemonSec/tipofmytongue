1
00:00:00,120 --> 00:00:03,600
hello my name is Peter Hall I am a PhD

2
00:00:03,600 --> 00:00:06,359
student at New York University and in

3
00:00:06,359 --> 00:00:08,580
this this is the video abstract uh for

4
00:00:08,580 --> 00:00:10,800
my joint work with Daniel Apon Chloe

5
00:00:10,800 --> 00:00:13,219
cachet Benjamin Fuller and Fang hallelu

6
00:00:13,219 --> 00:00:16,560
on our work non-maleable digital lockers

7
00:00:16,560 --> 00:00:18,300
and robust fizzy extractors in the plane

8
00:00:18,300 --> 00:00:19,500
model

9
00:00:19,500 --> 00:00:22,800
now we're going to break down that title

10
00:00:22,800 --> 00:00:25,140
term by term first starting with Point

11
00:00:25,140 --> 00:00:26,939
obfuscation and then as an extension

12
00:00:26,939 --> 00:00:28,680
digital lockers

13
00:00:28,680 --> 00:00:32,238
Point obfuscation is essentially

14
00:00:32,238 --> 00:00:35,219
uh obfuscation of the underlying Point

15
00:00:35,219 --> 00:00:36,480
program that you see on your screen

16
00:00:36,480 --> 00:00:39,600
which is kind of instantiated with some

17
00:00:39,600 --> 00:00:41,820
point x and then should output one if

18
00:00:41,820 --> 00:00:44,820
and only if uh the testing point x Prime

19
00:00:44,820 --> 00:00:47,340
is exactly equal to X

20
00:00:47,340 --> 00:00:49,379
in this work we're considering and

21
00:00:49,379 --> 00:00:52,620
constructing vbb obfuscation uh and

22
00:00:52,620 --> 00:00:54,300
specifically we're trying to do this in

23
00:00:54,300 --> 00:00:55,379
the plane model

24
00:00:55,379 --> 00:00:58,500
we also want non-maleability which as we

25
00:00:58,500 --> 00:01:00,239
discussed in the full talk is actually

26
00:01:00,239 --> 00:01:02,640
pretty subtle to Define but abstractly

27
00:01:02,640 --> 00:01:05,700
means that given a point x uh or given

28
00:01:05,700 --> 00:01:07,860
an obfuscation of a point x is hard to

29
00:01:07,860 --> 00:01:09,479
get an obfuscation of a point x Prime

30
00:01:09,479 --> 00:01:13,200
that is some way related to that point x

31
00:01:13,200 --> 00:01:15,540
additionally we're interested in digital

32
00:01:15,540 --> 00:01:18,360
lockers also known as multi-bit Point

33
00:01:18,360 --> 00:01:21,060
function obfuscations which essentially

34
00:01:21,060 --> 00:01:23,400
instead of outputting one or zero output

35
00:01:23,400 --> 00:01:29,840
this multi-bit string uh or output per

36
00:01:30,180 --> 00:01:31,920
there's been much effort in recent years

37
00:01:31,920 --> 00:01:33,479
on play model now malleable Point

38
00:01:33,479 --> 00:01:35,820
obfuscation uh this line of work was

39
00:01:35,820 --> 00:01:38,579
initiated by komagotsky and yoga uh

40
00:01:38,579 --> 00:01:40,020
however none of these works are actually

41
00:01:40,020 --> 00:01:42,600
sufficient for constructing entirely

42
00:01:42,600 --> 00:01:45,060
non-maleable digital lockers I.E Point

43
00:01:45,060 --> 00:01:46,560
function obfuscations again with

44
00:01:46,560 --> 00:01:48,000
multi-bay output

45
00:01:48,000 --> 00:01:50,340
however we do use assumptions that are

46
00:01:50,340 --> 00:01:52,799
rooted in bardosec monsandries crypto

47
00:01:52,799 --> 00:01:55,439
2019 paper which they introduce and

48
00:01:55,439 --> 00:01:58,460
justify there

49
00:01:58,799 --> 00:02:00,899
digital lockers can be constructed from

50
00:02:00,899 --> 00:02:03,720
composable point obfuscations and you

51
00:02:03,720 --> 00:02:06,060
know useful in many settings in this

52
00:02:06,060 --> 00:02:07,500
work we're considering one application

53
00:02:07,500 --> 00:02:09,959
of them specifically uh robust fuzzy

54
00:02:09,959 --> 00:02:11,940
extractors

55
00:02:11,940 --> 00:02:14,160
um fuzzy extractors are initialized with

56
00:02:14,160 --> 00:02:16,500
an enrollment string from a kind of

57
00:02:16,500 --> 00:02:19,020
noisy source and they should return some

58
00:02:19,020 --> 00:02:21,959
stable random value when queried on

59
00:02:21,959 --> 00:02:24,060
other values that are close to this

60
00:02:24,060 --> 00:02:25,440
original enrollment

61
00:02:25,440 --> 00:02:29,220
the robustness guarantee in addition and

62
00:02:29,220 --> 00:02:31,980
shows that from being given a fuzzy

63
00:02:31,980 --> 00:02:35,099
extractor one cannot tamper that fuzzy

64
00:02:35,099 --> 00:02:36,660
extractor

65
00:02:36,660 --> 00:02:38,879
um to a new one that outputs a different

66
00:02:38,879 --> 00:02:40,739
random string instead of the original

67
00:02:40,739 --> 00:02:44,099
one that was produced at enrollment

68
00:02:44,099 --> 00:02:46,620
uh prior Works have constructed robust

69
00:02:46,620 --> 00:02:48,599
fuzzy extractors in a variety of ways as

70
00:02:48,599 --> 00:02:50,760
you can see from this table here but

71
00:02:50,760 --> 00:02:52,440
there's actually been no plane model

72
00:02:52,440 --> 00:02:54,540
constructions that can handle input

73
00:02:54,540 --> 00:02:56,700
sources with very low entropy in this

74
00:02:56,700 --> 00:03:00,018
case less than half their length

75
00:03:00,300 --> 00:03:02,459
our contributions are as follows we

76
00:03:02,459 --> 00:03:04,620
Define a new object called non-malleable

77
00:03:04,620 --> 00:03:06,120
Point function obfuscations with

78
00:03:06,120 --> 00:03:08,940
Associated data intuitively they try to

79
00:03:08,940 --> 00:03:10,680
Leverage The non-maleability of the

80
00:03:10,680 --> 00:03:12,840
point obfuscation to attest to the

81
00:03:12,840 --> 00:03:14,940
correctness of a CRS like string which

82
00:03:14,940 --> 00:03:18,000
we call the associated data we construct

83
00:03:18,000 --> 00:03:19,800
this above uh

84
00:03:19,800 --> 00:03:21,720
and then We additionally kind of

85
00:03:21,720 --> 00:03:23,700
achieved composability with some other

86
00:03:23,700 --> 00:03:27,060
obfuscation Primitives in particular uh

87
00:03:27,060 --> 00:03:29,760
regular Point function obfuscation

88
00:03:29,760 --> 00:03:32,220
we show how the associated data is

89
00:03:32,220 --> 00:03:33,900
sufficient to use alongside an

90
00:03:33,900 --> 00:03:35,580
appropriate non-interactive zero

91
00:03:35,580 --> 00:03:37,319
knowledge system to construct

92
00:03:37,319 --> 00:03:39,900
non-malieable digital lockers and

93
00:03:39,900 --> 00:03:42,000
finally we use syndrome decoding with

94
00:03:42,000 --> 00:03:43,920
all of the above to achieve more

95
00:03:43,920 --> 00:03:46,440
powerful robust fuzzy extractors in the

96
00:03:46,440 --> 00:03:49,440
plane model specifically that are able

97
00:03:49,440 --> 00:03:53,700
to remain secure over low entropy inputs

98
00:03:53,700 --> 00:03:56,099
this kind of represents a little diagram

99
00:03:56,099 --> 00:03:59,580
of the road map and you're welcome to

100
00:03:59,580 --> 00:04:01,620
come to the full talk if you want to see

101
00:04:01,620 --> 00:04:04,379
how we do this along the way

102
00:04:04,379 --> 00:04:07,200
uh finally just to once again bring it

103
00:04:07,200 --> 00:04:10,439
back around to robust fuzzy extractors

104
00:04:10,439 --> 00:04:12,599
um one application of these non-maluable

105
00:04:12,599 --> 00:04:14,099
Point function obfuscations with

106
00:04:14,099 --> 00:04:17,279
Associated data is we use them to

107
00:04:17,279 --> 00:04:19,858
achieve two constructions

108
00:04:19,858 --> 00:04:22,320
um of plane model robust fuzzy

109
00:04:22,320 --> 00:04:23,419
extractors

110
00:04:23,419 --> 00:04:28,620
that remain secure when enrolled with uh

111
00:04:28,620 --> 00:04:30,720
enrolled from sources with entropy less

112
00:04:30,720 --> 00:04:32,340
than half their length

113
00:04:32,340 --> 00:04:34,139
uh thank you and I hope to see you in

114
00:04:34,139 --> 00:04:36,620
the full talk

