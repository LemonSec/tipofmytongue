1
00:00:04,319 --> 00:00:06,799
hi everyone i'm erica and today i'm

2
00:00:06,799 --> 00:00:08,639
going to tell you about tardigrade which

3
00:00:08,639 --> 00:00:10,719
is an atomic broadcast protocol for

4
00:00:10,719 --> 00:00:12,960
arbitrary network conditions developed

5
00:00:12,960 --> 00:00:15,360
as part of joint work with jonathan katz

6
00:00:15,360 --> 00:00:17,680
and julian loss

7
00:00:17,680 --> 00:00:20,480
so first of all what is atomic broadcast

8
00:00:20,480 --> 00:00:22,240
atomic broadcast is a fundamental

9
00:00:22,240 --> 00:00:24,480
problem in distributed computing in

10
00:00:24,480 --> 00:00:26,800
which parties receive input values over

11
00:00:26,800 --> 00:00:29,439
time and need to agree on a growing

12
00:00:29,439 --> 00:00:32,000
ordered sequence of values

13
00:00:32,000 --> 00:00:34,399
and to complicate things some of those

14
00:00:34,399 --> 00:00:36,719
parties are byzantine or faulty and

15
00:00:36,719 --> 00:00:40,719
those parties may behave arbitrarily

16
00:00:41,120 --> 00:00:42,399
in our setting that we're going to

17
00:00:42,399 --> 00:00:43,520
consider

18
00:00:43,520 --> 00:00:45,360
we have point-to-point authenticated

19
00:00:45,360 --> 00:00:47,680
channels between all of the parties

20
00:00:47,680 --> 00:00:49,360
messages sent by an honest party

21
00:00:49,360 --> 00:00:50,800
eventually arrive

22
00:00:50,800 --> 00:00:53,440
meaning messages can't be dropped

23
00:00:53,440 --> 00:00:56,000
and we assume a trusted dealer performs

24
00:00:56,000 --> 00:00:58,719
setup for public key infrastructure pki

25
00:00:58,719 --> 00:00:59,760
for short

26
00:00:59,760 --> 00:01:01,520
threshold signatures and threshold

27
00:01:01,520 --> 00:01:04,000
encryption

28
00:01:06,640 --> 00:01:08,320
let's say that you're an engineer who's

29
00:01:08,320 --> 00:01:10,320
considering using an atomic broadcast

30
00:01:10,320 --> 00:01:12,799
protocol for some application

31
00:01:12,799 --> 00:01:14,240
you've done your research and know that

32
00:01:14,240 --> 00:01:16,159
two of the most widely studied models

33
00:01:16,159 --> 00:01:17,840
are the synchronous model and the

34
00:01:17,840 --> 00:01:20,000
asynchronous model there's also the

35
00:01:20,000 --> 00:01:21,759
partially synchronous model but we won't

36
00:01:21,759 --> 00:01:23,759
consider that in this talk

37
00:01:23,759 --> 00:01:25,680
in the synchronous model messages

38
00:01:25,680 --> 00:01:27,920
arrived within a fixed delay denoted by

39
00:01:27,920 --> 00:01:29,439
delta

40
00:01:29,439 --> 00:01:31,200
in the asynchronous model on the other

41
00:01:31,200 --> 00:01:33,439
hand there's no upper bound on message

42
00:01:33,439 --> 00:01:35,839
delay

43
00:01:38,400 --> 00:01:40,000
furthermore you know that the optimal

44
00:01:40,000 --> 00:01:43,200
fault tolerance assuming a pki is t less

45
00:01:43,200 --> 00:01:45,200
than n over 2 in the synchronous model

46
00:01:45,200 --> 00:01:47,360
and only t less than n over 3 in the

47
00:01:47,360 --> 00:01:49,040
asynchronous model

48
00:01:49,040 --> 00:01:50,560
how do you choose which one is right for

49
00:01:50,560 --> 00:01:52,799
your use case

50
00:01:52,799 --> 00:01:53,759
and

51
00:01:53,759 --> 00:01:55,680
maybe more importantly what happens if

52
00:01:55,680 --> 00:01:58,159
you're wrong

53
00:01:59,759 --> 00:02:01,600
if we take a protocol that is secure in

54
00:02:01,600 --> 00:02:03,520
an asynchronous network and stick it in

55
00:02:03,520 --> 00:02:05,280
a synchronous network it will be

56
00:02:05,280 --> 00:02:07,200
perfectly happy as long as there are no

57
00:02:07,200 --> 00:02:09,360
more than n over three faults but it

58
00:02:09,360 --> 00:02:11,200
can't be secure if there are more than n

59
00:02:11,200 --> 00:02:13,200
over three faults if we had guessed

60
00:02:13,200 --> 00:02:14,959
correctly and just used a synchronous

61
00:02:14,959 --> 00:02:16,640
protocol we would have been secure up to

62
00:02:16,640 --> 00:02:18,480
n over two faults

63
00:02:18,480 --> 00:02:20,000
on the other hand suppose we have a

64
00:02:20,000 --> 00:02:21,920
protocol that is secure in a synchronous

65
00:02:21,920 --> 00:02:23,040
network

66
00:02:23,040 --> 00:02:24,800
where the delay is at most some fixed

67
00:02:24,800 --> 00:02:26,640
delta and we run that protocol in a

68
00:02:26,640 --> 00:02:28,239
network where the message delay might

69
00:02:28,239 --> 00:02:31,120
exceed delta

70
00:02:32,480 --> 00:02:34,879
if the delay exceeds delta even by a

71
00:02:34,879 --> 00:02:36,720
tiny bit and even if the number of

72
00:02:36,720 --> 00:02:38,560
faults is less than n over three our

73
00:02:38,560 --> 00:02:40,480
proof of security doesn't hold anymore

74
00:02:40,480 --> 00:02:43,920
and it's not clear what will happen

75
00:02:45,840 --> 00:02:47,440
to give us an idea of what's been done

76
00:02:47,440 --> 00:02:49,280
before i'll just briefly mention a few

77
00:02:49,280 --> 00:02:50,560
related questions that have been

78
00:02:50,560 --> 00:02:52,959
considered in the literature this is by

79
00:02:52,959 --> 00:02:54,800
no means exhaustive but hopefully it

80
00:02:54,800 --> 00:02:56,800
provides a reference point

81
00:02:56,800 --> 00:02:58,720
there's been prior work looking at

82
00:02:58,720 --> 00:03:01,120
networks that might be synchronous or

83
00:03:01,120 --> 00:03:02,879
partially synchronous

84
00:03:02,879 --> 00:03:04,800
looking at temporary partitions or

85
00:03:04,800 --> 00:03:06,800
sluggish faults

86
00:03:06,800 --> 00:03:09,599
looking at tolerating up to n over two

87
00:03:09,599 --> 00:03:11,120
crash faults if the network is

88
00:03:11,120 --> 00:03:12,959
asynchronous

89
00:03:12,959 --> 00:03:16,000
and most closely related is our prior

90
00:03:16,000 --> 00:03:17,440
work on

91
00:03:17,440 --> 00:03:19,519
network agnostic protocols for byzantine

92
00:03:19,519 --> 00:03:21,840
agreement and also secure multi-party

93
00:03:21,840 --> 00:03:24,560
computation

94
00:03:27,680 --> 00:03:28,560
so

95
00:03:28,560 --> 00:03:32,920
thinking about these uh

96
00:03:33,120 --> 00:03:34,720
these different choices led us to the

97
00:03:34,720 --> 00:03:36,799
following question is it possible to

98
00:03:36,799 --> 00:03:38,400
design a protocol that tolerates

99
00:03:38,400 --> 00:03:40,239
strictly more than n over three faults

100
00:03:40,239 --> 00:03:42,080
if the network happens to be synchronous

101
00:03:42,080 --> 00:03:44,400
for a fixed value of delta and still

102
00:03:44,400 --> 00:03:46,400
tolerate some lower number of faults if

103
00:03:46,400 --> 00:03:49,840
the network is asynchronous

104
00:03:50,239 --> 00:03:52,159
we made three main contributions on this

105
00:03:52,159 --> 00:03:54,720
topic the first is a lower bound showing

106
00:03:54,720 --> 00:03:57,920
that for any ta and ts such that ta plus

107
00:03:57,920 --> 00:04:00,560
2ts is greater than or equal to n it's

108
00:04:00,560 --> 00:04:02,400
impossible to have an atomic broadcast

109
00:04:02,400 --> 00:04:04,239
protocol that is secure against ts

110
00:04:04,239 --> 00:04:06,560
faults in a synchronous network and also

111
00:04:06,560 --> 00:04:08,159
secure against ta faults in an

112
00:04:08,159 --> 00:04:11,280
asynchronous network

113
00:04:11,840 --> 00:04:14,000
our second contribution is tardigrade a

114
00:04:14,000 --> 00:04:15,760
protocol for atomic broadcast that

115
00:04:15,760 --> 00:04:17,839
achieves the optimal resilience i.e that

116
00:04:17,839 --> 00:04:20,079
gives us exactly those guarantees for

117
00:04:20,079 --> 00:04:23,520
any ta and ts such that ta plus 2ts is

118
00:04:23,520 --> 00:04:25,759
less than n we also discuss how to make

119
00:04:25,759 --> 00:04:29,120
tardigrade adaptively secure

120
00:04:29,120 --> 00:04:32,240
our third contribution is upgrade

121
00:04:32,240 --> 00:04:34,080
another atomic broadcast protocol with

122
00:04:34,080 --> 00:04:36,240
security guarantees in both synchronous

123
00:04:36,240 --> 00:04:38,160
and asynchronous networks

124
00:04:38,160 --> 00:04:39,919
compared to tardigrade upgrade has

125
00:04:39,919 --> 00:04:41,840
better communication complexity but

126
00:04:41,840 --> 00:04:44,080
tolerates an o of epsilon fraction fewer

127
00:04:44,080 --> 00:04:46,080
corruptions and is not secure against an

128
00:04:46,080 --> 00:04:47,759
adaptive adversary

129
00:04:47,759 --> 00:04:49,680
designing a protocol that is efficient

130
00:04:49,680 --> 00:04:51,680
and also achieves adaptive security for

131
00:04:51,680 --> 00:04:54,000
the optimum optimal number of faults is

132
00:04:54,000 --> 00:04:57,560
an open question

133
00:04:58,240 --> 00:05:00,320
before we continue let's formally define

134
00:05:00,320 --> 00:05:01,840
the problem we're trying to solve so

135
00:05:01,840 --> 00:05:04,000
we're all on the same page

136
00:05:04,000 --> 00:05:06,320
in atomic broadcast each party has a

137
00:05:06,320 --> 00:05:07,600
local value

138
00:05:07,600 --> 00:05:08,720
or

139
00:05:08,720 --> 00:05:10,560
local buffer of values called

140
00:05:10,560 --> 00:05:12,960
transactions and a write-once array of

141
00:05:12,960 --> 00:05:14,720
blocks

142
00:05:14,720 --> 00:05:16,560
for our purposes a block is just a set

143
00:05:16,560 --> 00:05:18,080
of transactions

144
00:05:18,080 --> 00:05:20,160
values are added to parties buffers over

145
00:05:20,160 --> 00:05:22,639
time via some external mechanism we

146
00:05:22,639 --> 00:05:24,320
don't assume that transactions are added

147
00:05:24,320 --> 00:05:26,240
to every party's buffer at the same time

148
00:05:26,240 --> 00:05:27,840
or even that every transaction is

149
00:05:27,840 --> 00:05:29,840
eventually added to every honest party's

150
00:05:29,840 --> 00:05:32,239
buffer

151
00:05:33,280 --> 00:05:36,479
so for example if we have five parties

152
00:05:36,479 --> 00:05:39,520
then perhaps p1 has a buffer with

153
00:05:39,520 --> 00:05:42,320
transaction one two and three meanwhile

154
00:05:42,320 --> 00:05:44,720
party two has seen transaction two and

155
00:05:44,720 --> 00:05:46,639
four and they're all going to get

156
00:05:46,639 --> 00:05:49,120
together and try to agree on a sequence

157
00:05:49,120 --> 00:05:51,120
of blocks

158
00:05:51,120 --> 00:05:54,800
that include those transactions

159
00:05:55,360 --> 00:05:57,120
the security properties that we care

160
00:05:57,120 --> 00:05:58,240
about

161
00:05:58,240 --> 00:06:01,199
are consistency which says that if two

162
00:06:01,199 --> 00:06:03,759
parties have both output a block then

163
00:06:03,759 --> 00:06:04,560
that

164
00:06:04,560 --> 00:06:06,800
at the same position in their array or

165
00:06:06,800 --> 00:06:07,680
chain

166
00:06:07,680 --> 00:06:10,400
then they should be the same block

167
00:06:10,400 --> 00:06:12,319
completeness says that each party

168
00:06:12,319 --> 00:06:14,400
eventually outputs a block at index k

169
00:06:14,400 --> 00:06:16,080
for all k

170
00:06:16,080 --> 00:06:18,000
and finally liveness says that if a

171
00:06:18,000 --> 00:06:19,199
transaction

172
00:06:19,199 --> 00:06:21,840
is in all honest parties buffers then

173
00:06:21,840 --> 00:06:23,680
each party should eventually output a

174
00:06:23,680 --> 00:06:27,360
block that contains that transaction

175
00:06:27,440 --> 00:06:28,639
sometimes you'll see blockchain

176
00:06:28,639 --> 00:06:30,080
protocols that achieve a stronger

177
00:06:30,080 --> 00:06:31,680
version of liveness especially in

178
00:06:31,680 --> 00:06:33,120
synchronous settings but this weak

179
00:06:33,120 --> 00:06:34,960
definition is fairly standard for

180
00:06:34,960 --> 00:06:36,800
settings that don't necessarily assume

181
00:06:36,800 --> 00:06:39,800
synchrony

182
00:06:48,319 --> 00:06:50,400
next i'm going to give an overview of

183
00:06:50,400 --> 00:06:52,639
the lower bound which states that there

184
00:06:52,639 --> 00:06:55,199
is no atomic broadcast protocol that is

185
00:06:55,199 --> 00:06:57,840
network agnostically secure

186
00:06:57,840 --> 00:07:00,240
meaning secure against ts faults in a

187
00:07:00,240 --> 00:07:02,400
synchronous network and against ta

188
00:07:02,400 --> 00:07:04,639
faults in an asynchronous network

189
00:07:04,639 --> 00:07:07,840
if ta plus 2ts is greater than or equal

190
00:07:07,840 --> 00:07:09,120
to n

191
00:07:09,120 --> 00:07:11,280
the proof follows from a generalization

192
00:07:11,280 --> 00:07:13,039
of toggs classical lower bound for

193
00:07:13,039 --> 00:07:15,360
randomized byzantine agreement

194
00:07:15,360 --> 00:07:17,520
the intuition is that when

195
00:07:17,520 --> 00:07:20,240
t a plus two t s is greater than or

196
00:07:20,240 --> 00:07:22,720
equal to n an honest party might not be

197
00:07:22,720 --> 00:07:24,720
able to distinguish between executions

198
00:07:24,720 --> 00:07:26,639
where the network is synchronous and a

199
00:07:26,639 --> 00:07:28,560
set of malicious parties are refusing to

200
00:07:28,560 --> 00:07:30,720
participate and executions where the

201
00:07:30,720 --> 00:07:32,960
network is asynchronous and messages

202
00:07:32,960 --> 00:07:34,800
from a set of honest parties are very

203
00:07:34,800 --> 00:07:36,080
delayed

204
00:07:36,080 --> 00:07:38,319
so just to talk things through with a

205
00:07:38,319 --> 00:07:40,560
bit of an example let's assume towards a

206
00:07:40,560 --> 00:07:42,479
contradiction that we do have a protocol

207
00:07:42,479 --> 00:07:44,240
that achieves these properties for n

208
00:07:44,240 --> 00:07:48,479
equals 5 ta equals 1 and ts equals 2.

209
00:07:48,479 --> 00:07:50,000
and suppose that

210
00:07:50,000 --> 00:07:51,280
p1

211
00:07:51,280 --> 00:07:54,400
is honest and hasn't heard from p4 and

212
00:07:54,400 --> 00:07:55,759
p5

213
00:07:55,759 --> 00:07:58,800
one explanation is that the network is

214
00:07:58,800 --> 00:08:02,080
asynchronous and p4 and p5 are honest

215
00:08:02,080 --> 00:08:04,479
their messages have just been delayed

216
00:08:04,479 --> 00:08:06,160
on the other hand it could be that we're

217
00:08:06,160 --> 00:08:08,639
in a synchronous network and p4 and p5

218
00:08:08,639 --> 00:08:10,840
are malicious and just refusing to

219
00:08:10,840 --> 00:08:13,759
participate if they're malicious then p1

220
00:08:13,759 --> 00:08:16,000
can't wait for them forever because this

221
00:08:16,000 --> 00:08:18,400
contradicts liveness on the other hand

222
00:08:18,400 --> 00:08:20,479
if they're actually honest and p1 moves

223
00:08:20,479 --> 00:08:22,080
on without them we might violate

224
00:08:22,080 --> 00:08:23,680
consistency

225
00:08:23,680 --> 00:08:25,440
so in the proof we formalize this

226
00:08:25,440 --> 00:08:27,199
intuition by proving that there is a

227
00:08:27,199 --> 00:08:30,000
synchronous execution with at most ts

228
00:08:30,000 --> 00:08:32,479
faults and an asynchronous execution

229
00:08:32,479 --> 00:08:34,719
with at most ta faults that are

230
00:08:34,719 --> 00:08:36,559
indistinguishable from the perspective

231
00:08:36,559 --> 00:08:39,200
of an honest party and then showing that

232
00:08:39,200 --> 00:08:41,360
in at least one of these executions

233
00:08:41,360 --> 00:08:44,880
security must be violated

234
00:08:48,880 --> 00:08:50,800
as a quick interlude before we learn

235
00:08:50,800 --> 00:08:52,959
about the protocol we named tardigrade

236
00:08:52,959 --> 00:08:54,480
i'd like to tell you a little bit about

237
00:08:54,480 --> 00:08:56,560
the animal by the same name

238
00:08:56,560 --> 00:08:58,399
this friendly microscopic fellow

239
00:08:58,399 --> 00:09:00,160
sometimes known as a water bear is

240
00:09:00,160 --> 00:09:03,120
capable of surviving extreme heat cold

241
00:09:03,120 --> 00:09:05,360
radiation and pressure by entering a

242
00:09:05,360 --> 00:09:07,760
state called cryptobiosis which is

243
00:09:07,760 --> 00:09:08,959
pretty apt

244
00:09:08,959 --> 00:09:11,839
in one experiment 68 of tardigrade

245
00:09:11,839 --> 00:09:13,760
subjects survived exposure to the hard

246
00:09:13,760 --> 00:09:16,160
vacuum of outer space

247
00:09:16,160 --> 00:09:18,160
not many animals or atomic broadcast

248
00:09:18,160 --> 00:09:20,839
protocols can say

249
00:09:20,839 --> 00:09:23,600
that so without further ado

250
00:09:23,600 --> 00:09:27,360
here's tardigrade the protocol

251
00:09:28,800 --> 00:09:31,040
a quick disclaimer before we get started

252
00:09:31,040 --> 00:09:32,959
in the paper we go into detail about the

253
00:09:32,959 --> 00:09:34,959
block size and ways to improve the

254
00:09:34,959 --> 00:09:36,880
throughput liveness and communication

255
00:09:36,880 --> 00:09:38,880
complexity using threshold signatures

256
00:09:38,880 --> 00:09:40,640
and threshold encryption for the

257
00:09:40,640 --> 00:09:42,160
purposes of this talk i'm going to

258
00:09:42,160 --> 00:09:44,480
present a simplified version assuming no

259
00:09:44,480 --> 00:09:46,480
upper bound on block size so we can just

260
00:09:46,480 --> 00:09:48,720
focus on the protocol flow

261
00:09:48,720 --> 00:09:50,160
with that out of the way let's get

262
00:09:50,160 --> 00:09:51,200
started

263
00:09:51,200 --> 00:09:53,200
the process for agreeing on a new block

264
00:09:53,200 --> 00:09:56,480
has four main stages an input stage

265
00:09:56,480 --> 00:09:59,360
two agreement stages and an output stage

266
00:09:59,360 --> 00:10:01,839
in the input stage each party signs

267
00:10:01,839 --> 00:10:04,720
their whole buffer and sends both their

268
00:10:04,720 --> 00:10:06,640
buffer and that signature to all other

269
00:10:06,640 --> 00:10:07,839
parties

270
00:10:07,839 --> 00:10:09,760
once a party has received buffers and

271
00:10:09,760 --> 00:10:12,079
signatures from enough different parties

272
00:10:12,079 --> 00:10:14,079
they bundle them together and input them

273
00:10:14,079 --> 00:10:16,320
to the agreement stages we call these

274
00:10:16,320 --> 00:10:18,959
bundles of signed buffers pre-blocks for

275
00:10:18,959 --> 00:10:21,279
short

276
00:10:21,440 --> 00:10:23,600
now in the two agreement stages we have

277
00:10:23,600 --> 00:10:25,519
the same goal to agree on a set of

278
00:10:25,519 --> 00:10:27,920
pre-blocks but each stage has different

279
00:10:27,920 --> 00:10:30,240
security properties i'll talk more about

280
00:10:30,240 --> 00:10:32,160
that in just a moment but for now let's

281
00:10:32,160 --> 00:10:33,920
fast forward

282
00:10:33,920 --> 00:10:36,079
eventually the second agreement stage

283
00:10:36,079 --> 00:10:38,399
outputs a set of pre-blocks at that

284
00:10:38,399 --> 00:10:40,160
point each party combines all of the

285
00:10:40,160 --> 00:10:42,560
transactions into a final block and

286
00:10:42,560 --> 00:10:46,518
outputs it to their array

287
00:10:48,640 --> 00:10:50,399
okay now we're ready to fill in some

288
00:10:50,399 --> 00:10:52,880
more details

289
00:10:52,880 --> 00:10:55,279
during the initial input sharing phase i

290
00:10:55,279 --> 00:10:57,760
have two timers running

291
00:10:57,760 --> 00:10:59,680
if i'm able to form a pre-block by the

292
00:10:59,680 --> 00:11:01,760
time the first timer goes off i'll input

293
00:11:01,760 --> 00:11:03,600
it to the first agreement sub protocol

294
00:11:03,600 --> 00:11:07,040
which we call block agreement

295
00:11:07,440 --> 00:11:08,560
then

296
00:11:08,560 --> 00:11:10,160
if i output a set of blocks from that

297
00:11:10,160 --> 00:11:12,160
phase before my second timer goes off

298
00:11:12,160 --> 00:11:13,839
i'll take that output and input it to

299
00:11:13,839 --> 00:11:16,399
the second agreement phase

300
00:11:16,399 --> 00:11:17,839
if the network is synchronous then

301
00:11:17,839 --> 00:11:19,760
everything works out i receive all the

302
00:11:19,760 --> 00:11:21,600
inputs i need before the first timer

303
00:11:21,600 --> 00:11:23,760
goes off and the first agreement phase

304
00:11:23,760 --> 00:11:25,440
completes before the second timer goes

305
00:11:25,440 --> 00:11:26,560
off

306
00:11:26,560 --> 00:11:28,399
of course the network might not be

307
00:11:28,399 --> 00:11:29,760
synchronous in which case i need a

308
00:11:29,760 --> 00:11:31,680
backup plan

309
00:11:31,680 --> 00:11:34,000
the backup plan is simple if the first

310
00:11:34,000 --> 00:11:35,519
timer goes off while i'm still waiting

311
00:11:35,519 --> 00:11:37,680
to receive enough inputs or if the

312
00:11:37,680 --> 00:11:39,279
second timer goes off while i'm waiting

313
00:11:39,279 --> 00:11:40,880
on an output from the first agreement

314
00:11:40,880 --> 00:11:42,959
stage i'm going to give up on the first

315
00:11:42,959 --> 00:11:45,120
agreement stage i'm just going to wait

316
00:11:45,120 --> 00:11:46,640
to gather a pre-block if i haven't

317
00:11:46,640 --> 00:11:49,040
already and then input it directly to

318
00:11:49,040 --> 00:11:51,440
the second agreement phase

319
00:11:51,440 --> 00:11:53,519
in either case whichever path we end up

320
00:11:53,519 --> 00:11:55,920
taking once i output a set of pre-blocks

321
00:11:55,920 --> 00:11:57,839
from the second agreement phase i

322
00:11:57,839 --> 00:11:59,680
combine them into a block and that

323
00:11:59,680 --> 00:12:02,160
completes one epoch of the protocol we

324
00:12:02,160 --> 00:12:04,160
keep repeating this process to agree on

325
00:12:04,160 --> 00:12:06,959
more and more new

326
00:12:08,839 --> 00:12:11,839
blocks so that's how it works but why

327
00:12:11,839 --> 00:12:14,079
does it work basically each agreement

328
00:12:14,079 --> 00:12:15,839
phase achieves stronger guarantees in

329
00:12:15,839 --> 00:12:17,760
one setting and achieves weaker

330
00:12:17,760 --> 00:12:19,519
guarantees in the other

331
00:12:19,519 --> 00:12:21,200
the first agreement phase which we call

332
00:12:21,200 --> 00:12:23,440
block agreement can be viewed as a form

333
00:12:23,440 --> 00:12:26,639
of validated multi-valued agreement

334
00:12:26,639 --> 00:12:28,399
if the block agreement protocol is run

335
00:12:28,399 --> 00:12:30,639
in a synchronous network with up to ts

336
00:12:30,639 --> 00:12:32,959
faults then all parties will agree on a

337
00:12:32,959 --> 00:12:35,200
set of pre-blocks before the timer runs

338
00:12:35,200 --> 00:12:36,079
out

339
00:12:36,079 --> 00:12:37,680
on the other hand if it's run in an

340
00:12:37,680 --> 00:12:39,440
asynchronous network then it might not

341
00:12:39,440 --> 00:12:41,200
terminate in time

342
00:12:41,200 --> 00:12:43,200
but if some honest party does receive

343
00:12:43,200 --> 00:12:44,880
output they still output a set of

344
00:12:44,880 --> 00:12:46,880
pre-blocks that satisfy some minimum

345
00:12:46,880 --> 00:12:49,920
validity property

346
00:12:49,920 --> 00:12:51,839
the second agreement phase meanwhile is

347
00:12:51,839 --> 00:12:54,000
similar to a standardised asynchronous

348
00:12:54,000 --> 00:12:56,240
common subset or acs

349
00:12:56,240 --> 00:12:57,519
sub protocol

350
00:12:57,519 --> 00:12:59,519
if it's run in a synchronous network

351
00:12:59,519 --> 00:13:02,399
with up to ts faults we only guarantee a

352
00:13:02,399 --> 00:13:04,240
weak validity property because that's

353
00:13:04,240 --> 00:13:06,399
not really what it's meant to do but if

354
00:13:06,399 --> 00:13:08,160
it's running an asynchronous network

355
00:13:08,160 --> 00:13:10,560
with at most ta faults we get full

356
00:13:10,560 --> 00:13:13,119
security

357
00:13:15,040 --> 00:13:16,959
so to review we offer three main

358
00:13:16,959 --> 00:13:19,360
contributions a lower bound showing that

359
00:13:19,360 --> 00:13:21,440
this notion of network agnostic security

360
00:13:21,440 --> 00:13:25,440
is impossible if ta plus 2ts is greater

361
00:13:25,440 --> 00:13:26,880
than or equal to n

362
00:13:26,880 --> 00:13:28,720
and two constructions

363
00:13:28,720 --> 00:13:31,519
one with optimal tats and one with

364
00:13:31,519 --> 00:13:34,399
better communication complexity and like

365
00:13:34,399 --> 00:13:35,839
our friend the tardigrade our

366
00:13:35,839 --> 00:13:37,600
constructions are able to survive in

367
00:13:37,600 --> 00:13:39,920
whatever environment they end up

368
00:13:39,920 --> 00:13:41,600
that concludes my talk

369
00:13:41,600 --> 00:13:45,079
thank you for watching

370
00:14:20,720 --> 00:14:22,800
you

