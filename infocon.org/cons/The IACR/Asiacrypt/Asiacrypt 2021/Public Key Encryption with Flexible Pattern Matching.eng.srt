1
00:00:02,480 --> 00:00:03,919
hello everyone

2
00:00:03,919 --> 00:00:06,799
my name is eli buscatier and i am a phd

3
00:00:06,799 --> 00:00:08,400
candidate working with guillaume

4
00:00:08,400 --> 00:00:11,200
castaneus at the university of bordeaux

5
00:00:11,200 --> 00:00:14,639
and olivier sanders at orange labs

6
00:00:14,639 --> 00:00:17,039
this is a presentation of our work on

7
00:00:17,039 --> 00:00:19,119
public key encryption with flexible

8
00:00:19,119 --> 00:00:22,000
pattern matching

9
00:00:24,800 --> 00:00:27,199
in classical public key encryption the

10
00:00:27,199 --> 00:00:30,240
receiver generates a pair of keys that

11
00:00:30,240 --> 00:00:32,399
allow others to send him private

12
00:00:32,399 --> 00:00:34,320
messages

13
00:00:34,320 --> 00:00:37,440
today most internet traffic is encrypted

14
00:00:37,440 --> 00:00:40,239
to ensure the privacy of users

15
00:00:40,239 --> 00:00:42,800
but this encryption is incompatible with

16
00:00:42,800 --> 00:00:44,399
functionalities like

17
00:00:44,399 --> 00:00:46,719
intrusion detection systems

18
00:00:46,719 --> 00:00:49,520
where a service provider searches the

19
00:00:49,520 --> 00:00:52,160
traffic for patterns that indicate

20
00:00:52,160 --> 00:00:55,360
malicious activity

21
00:00:55,600 --> 00:00:58,160
in a searchable encryption scheme the

22
00:00:58,160 --> 00:01:00,640
service provider can query the receiver

23
00:01:00,640 --> 00:01:03,600
with such a pattern and get a trapdoor

24
00:01:03,600 --> 00:01:06,640
that allows him to learn the presence of

25
00:01:06,640 --> 00:01:11,640
this pattern and know their information

26
00:01:12,000 --> 00:01:14,560
searchable encryption is a name that is

27
00:01:14,560 --> 00:01:17,119
used for very different schemes

28
00:01:17,119 --> 00:01:20,000
in the case of email routing the search

29
00:01:20,000 --> 00:01:23,040
is performed on encrypted keywords that

30
00:01:23,040 --> 00:01:25,600
are attached to the messages

31
00:01:25,600 --> 00:01:27,600
but in the case of deep packet

32
00:01:27,600 --> 00:01:30,240
inspection it is somewhere in the stream

33
00:01:30,240 --> 00:01:32,400
of the traffic that the pattern may

34
00:01:32,400 --> 00:01:34,320
appear

35
00:01:34,320 --> 00:01:36,640
another difference is that in the first

36
00:01:36,640 --> 00:01:39,920
case keywords are known in advance

37
00:01:39,920 --> 00:01:42,240
whereas in deep packet inspection the

38
00:01:42,240 --> 00:01:44,960
list of patterns is evolving in order to

39
00:01:44,960 --> 00:01:49,360
search new viruses for instance

40
00:01:49,680 --> 00:01:52,240
because of these differences

41
00:01:52,240 --> 00:01:54,079
we call the kind of scheme we are

42
00:01:54,079 --> 00:01:55,280
designing

43
00:01:55,280 --> 00:01:58,159
a stream encryption scheme supporting

44
00:01:58,159 --> 00:02:01,040
pattern matching

45
00:02:01,600 --> 00:02:03,920
if we take a look at the distribution of

46
00:02:03,920 --> 00:02:06,399
pattern lengths in the pattern list of

47
00:02:06,399 --> 00:02:10,318
snort which is a famous open source ids

48
00:02:10,318 --> 00:02:12,480
we find that there are many patterns of

49
00:02:12,480 --> 00:02:14,560
different lengths

50
00:02:14,560 --> 00:02:16,959
but they are all short

51
00:02:16,959 --> 00:02:20,640
so the task of an ids is to search many

52
00:02:20,640 --> 00:02:23,520
patterns of varying short lengths in

53
00:02:23,520 --> 00:02:26,400
long streams

54
00:02:29,920 --> 00:02:33,280
there exist generic solutions to process

55
00:02:33,280 --> 00:02:36,319
encrypted data such as fully homomorphic

56
00:02:36,319 --> 00:02:37,440
encryption

57
00:02:37,440 --> 00:02:40,080
and multi-party computation

58
00:02:40,080 --> 00:02:42,480
but their versatility comes with heavy

59
00:02:42,480 --> 00:02:46,400
costs in computation or in communication

60
00:02:46,400 --> 00:02:49,360
so we want to use specific scheme

61
00:02:49,360 --> 00:02:52,640
that are more efficient

62
00:02:53,040 --> 00:02:54,959
in 2015

63
00:02:54,959 --> 00:02:57,599
blind box showed that it was possible to

64
00:02:57,599 --> 00:03:00,400
search a string in a stream using

65
00:03:00,400 --> 00:03:02,400
pseudo-random functions

66
00:03:02,400 --> 00:03:06,239
but with a very strong limitation

67
00:03:06,239 --> 00:03:08,800
encryption is performed at a string

68
00:03:08,800 --> 00:03:11,200
level using a fixed length sliding

69
00:03:11,200 --> 00:03:12,239
window

70
00:03:12,239 --> 00:03:14,400
here for instance it is all the

71
00:03:14,400 --> 00:03:17,519
substrings of four consecutive letters

72
00:03:17,519 --> 00:03:19,519
that will be encrypted

73
00:03:19,519 --> 00:03:22,720
and this will only allow the receiver to

74
00:03:22,720 --> 00:03:26,319
give trapdoors for keywords of length 4

75
00:03:26,319 --> 00:03:28,560
like the keyword host

76
00:03:28,560 --> 00:03:32,760
but not the keyword hostile

77
00:03:35,680 --> 00:03:39,840
as such the expressivity is very limited

78
00:03:39,840 --> 00:03:42,000
one solution would be to encrypt the

79
00:03:42,000 --> 00:03:44,640
stream once for every possible pattern

80
00:03:44,640 --> 00:03:45,519
length

81
00:03:45,519 --> 00:03:47,280
but we have seen that there are many

82
00:03:47,280 --> 00:03:49,840
different lengths of patterns

83
00:03:49,840 --> 00:03:53,120
so this would be an efficient

84
00:03:53,120 --> 00:03:55,760
finally if we decide to split longer

85
00:03:55,760 --> 00:03:58,319
keywords into smaller strings

86
00:03:58,319 --> 00:04:00,959
the long list of snort with more than a

87
00:04:00,959 --> 00:04:03,439
thousand patterns shows us that the

88
00:04:03,439 --> 00:04:06,159
service provider can now learn a lot of

89
00:04:06,159 --> 00:04:09,280
extra information

90
00:04:09,920 --> 00:04:12,480
in order to encrypt with the granularity

91
00:04:12,480 --> 00:04:15,599
of one symbol instead of strings

92
00:04:15,599 --> 00:04:17,839
and still be able to perform pattern

93
00:04:17,839 --> 00:04:18,880
matching

94
00:04:18,880 --> 00:04:21,279
most recent solutions use bilinear

95
00:04:21,279 --> 00:04:23,040
pairings

96
00:04:23,040 --> 00:04:25,759
two papers have been published

97
00:04:25,759 --> 00:04:30,240
one at azercrypt in 2018 and one at azir

98
00:04:30,240 --> 00:04:32,560
crypt in 2020

99
00:04:32,560 --> 00:04:35,199
but their security is only proven under

100
00:04:35,199 --> 00:04:37,199
the same very strong interactive

101
00:04:37,199 --> 00:04:38,400
assumption

102
00:04:38,400 --> 00:04:41,440
and the size of their public key depends

103
00:04:41,440 --> 00:04:43,840
on the size of the alphabet which

104
00:04:43,840 --> 00:04:46,960
implies a factor 2 to the 8th as the

105
00:04:46,960 --> 00:04:50,719
patterns are by strings

106
00:04:54,639 --> 00:04:57,360
to see where these limitations come from

107
00:04:57,360 --> 00:05:00,080
and how we address them in our paper

108
00:05:00,080 --> 00:05:02,800
i will first show you some common ground

109
00:05:02,800 --> 00:05:06,000
to all these constructions

110
00:05:06,000 --> 00:05:08,639
then we will come back to a more precise

111
00:05:08,639 --> 00:05:10,720
description of these

112
00:05:10,720 --> 00:05:12,080
existing

113
00:05:12,080 --> 00:05:13,600
constructions

114
00:05:13,600 --> 00:05:15,440
and finally we will show our

115
00:05:15,440 --> 00:05:18,240
contributions

116
00:05:18,960 --> 00:05:21,840
bilateral groups are a setting where we

117
00:05:21,840 --> 00:05:25,280
have three groups g1 g2 and gt

118
00:05:25,280 --> 00:05:27,199
of prime order p

119
00:05:27,199 --> 00:05:31,039
and a map e that sends a pair from g1

120
00:05:31,039 --> 00:05:34,000
cross g2 in gt

121
00:05:34,000 --> 00:05:36,880
the bilinearity property of e

122
00:05:36,880 --> 00:05:39,600
written here shows that this map can be

123
00:05:39,600 --> 00:05:41,759
used to perform a multiplication in the

124
00:05:41,759 --> 00:05:44,000
exponents

125
00:05:44,000 --> 00:05:46,400
in the type 3 setting we assume that

126
00:05:46,400 --> 00:05:49,039
there is no isomorphism between g1 and

127
00:05:49,039 --> 00:05:50,639
g2

128
00:05:50,639 --> 00:05:53,680
as many modern schemes we use this type

129
00:05:53,680 --> 00:05:57,680
3 setting which is very efficient

130
00:05:57,680 --> 00:05:59,919
to see how we can build the trapdoor

131
00:05:59,919 --> 00:06:02,720
mechanism from this setting

132
00:06:02,720 --> 00:06:04,560
let's assume that there are public

133
00:06:04,560 --> 00:06:09,039
elements g and g tilde in g1 and g2

134
00:06:09,039 --> 00:06:11,199
and that we know g to the a

135
00:06:11,199 --> 00:06:15,680
and g to the x without knowing a and x

136
00:06:15,680 --> 00:06:18,319
then the decisional diffie-hellman

137
00:06:18,319 --> 00:06:21,360
assumption tell us that it is hard to

138
00:06:21,360 --> 00:06:24,240
distinguish g to the ax from a random

139
00:06:24,240 --> 00:06:26,880
element in g1

140
00:06:26,880 --> 00:06:28,639
now if we

141
00:06:28,639 --> 00:06:32,479
also know g tilde to the x

142
00:06:32,479 --> 00:06:35,039
we have a test because the pairing of g

143
00:06:35,039 --> 00:06:38,479
to the a and g tilde to the x gives us

144
00:06:38,479 --> 00:06:42,318
an a x exponent

145
00:06:42,639 --> 00:06:45,600
because of the time 3 setting it is not

146
00:06:45,600 --> 00:06:48,240
possible to compute this g2 element from

147
00:06:48,240 --> 00:06:50,000
the g1 element

148
00:06:50,000 --> 00:06:52,400
and it must be given by someone who

149
00:06:52,400 --> 00:06:54,960
knows x

150
00:06:55,520 --> 00:06:58,400
notice that we have room to add some

151
00:06:58,400 --> 00:07:00,160
randomness s

152
00:07:00,160 --> 00:07:03,039
on this top door by giving g tilde to

153
00:07:03,039 --> 00:07:06,000
the s and g tilde to the sx

154
00:07:06,000 --> 00:07:08,960
because then we can pair the g1 and g2

155
00:07:08,960 --> 00:07:12,000
elements to get a test

156
00:07:12,000 --> 00:07:13,840
and this will give trapdoor

157
00:07:13,840 --> 00:07:17,360
unforgeability properties

158
00:07:17,360 --> 00:07:19,680
from these features we show a first

159
00:07:19,680 --> 00:07:22,319
simple encryption scheme with pattern

160
00:07:22,319 --> 00:07:24,080
matching

161
00:07:24,080 --> 00:07:26,720
there is an upper bound n on the size of

162
00:07:26,720 --> 00:07:29,199
the messages that can be encrypted at

163
00:07:29,199 --> 00:07:33,520
once so it is not yet adapted to streams

164
00:07:33,520 --> 00:07:36,639
we first choose a secret encoding alpha

165
00:07:36,639 --> 00:07:39,120
that depends both on the symbol to be

166
00:07:39,120 --> 00:07:41,840
encrypted and on the posse on the

167
00:07:41,840 --> 00:07:45,919
position where it occurs in the message

168
00:07:45,919 --> 00:07:48,879
the public key is computed by elevating

169
00:07:48,879 --> 00:07:51,120
g to these values

170
00:07:51,120 --> 00:07:52,479
for example

171
00:07:52,479 --> 00:07:55,840
we take n equals 5 with the message

172
00:07:55,840 --> 00:07:58,319
steam

173
00:07:58,319 --> 00:08:00,720
first the sender chooses a random

174
00:08:00,720 --> 00:08:02,160
integer a

175
00:08:02,160 --> 00:08:04,720
and gives g to the a as the first

176
00:08:04,720 --> 00:08:06,960
ciphertext element

177
00:08:06,960 --> 00:08:09,440
then he uses the public key element for

178
00:08:09,440 --> 00:08:11,840
the letter s when it is in first

179
00:08:11,840 --> 00:08:16,720
position and masks it with with a

180
00:08:16,720 --> 00:08:20,879
it does the same with the other elements

181
00:08:21,759 --> 00:08:25,520
now we show a trapdoor for the pattern t

182
00:08:25,520 --> 00:08:27,680
the trap door contains one position

183
00:08:27,680 --> 00:08:30,560
trapdoor for each possible position of

184
00:08:30,560 --> 00:08:34,000
the pattern in the message

185
00:08:35,120 --> 00:08:37,360
to compute the element d prime the

186
00:08:37,360 --> 00:08:40,719
receiver sums the secret key elements

187
00:08:40,719 --> 00:08:42,799
corresponding to the pattern at this

188
00:08:42,799 --> 00:08:44,240
position

189
00:08:44,240 --> 00:08:47,040
elevates g tilde to this power

190
00:08:47,040 --> 00:08:51,680
and applies some randomness s

191
00:08:51,680 --> 00:08:54,399
we see that t prime is built as a mirror

192
00:08:54,399 --> 00:08:56,080
element to the product of the

193
00:08:56,080 --> 00:08:59,200
corresponding ciphertexts

194
00:08:59,200 --> 00:09:02,320
if we mix the randomness elements

195
00:09:02,320 --> 00:09:04,959
we can test the presence of the pattern

196
00:09:04,959 --> 00:09:08,359
at this position

197
00:09:12,080 --> 00:09:14,560
as we encrypt with the granularity of

198
00:09:14,560 --> 00:09:18,320
one symbol we can test patterns of any

199
00:09:18,320 --> 00:09:20,480
length under n

200
00:09:20,480 --> 00:09:22,399
even with wild cards

201
00:09:22,399 --> 00:09:25,040
inside the pattern

202
00:09:25,040 --> 00:09:27,760
one test at one position

203
00:09:27,760 --> 00:09:30,640
uses only two pairing evaluations

204
00:09:30,640 --> 00:09:34,080
whatever length the pattern is

205
00:09:34,080 --> 00:09:37,200
but the message cannot be arbitrary long

206
00:09:37,200 --> 00:09:40,000
and if we try to handle streams by

207
00:09:40,000 --> 00:09:43,279
taking a very large value of n

208
00:09:43,279 --> 00:09:46,560
then we get a very long public key and

209
00:09:46,560 --> 00:09:51,560
many possible offsets for the trapdoors

210
00:09:52,320 --> 00:09:55,040
now we look at the existing schemes with

211
00:09:55,040 --> 00:09:58,399
these ideas in mind

212
00:09:58,480 --> 00:10:01,200
the idea crypt 18 paper

213
00:10:01,200 --> 00:10:04,000
shows us that it is interesting not to

214
00:10:04,000 --> 00:10:06,480
choose our secret encoding completely at

215
00:10:06,480 --> 00:10:08,160
random

216
00:10:08,160 --> 00:10:11,440
instead this paper uses one encoding for

217
00:10:11,440 --> 00:10:12,800
the symbols

218
00:10:12,800 --> 00:10:16,640
and uses powers of some secret value z

219
00:10:16,640 --> 00:10:19,200
for position randomness

220
00:10:19,200 --> 00:10:21,760
so this encoding consists only in

221
00:10:21,760 --> 00:10:24,160
monomials in z

222
00:10:24,160 --> 00:10:26,880
let's see how this changes the simple

223
00:10:26,880 --> 00:10:29,279
scheme

224
00:10:31,600 --> 00:10:33,680
if we take a look at the position

225
00:10:33,680 --> 00:10:37,120
trapdoors we see the exponents

226
00:10:37,120 --> 00:10:39,920
are polynomials that only differ by a

227
00:10:39,920 --> 00:10:41,839
factor z

228
00:10:41,839 --> 00:10:42,720
so

229
00:10:42,720 --> 00:10:45,200
if we could multiply the exponents by

230
00:10:45,200 --> 00:10:46,640
power of z

231
00:10:46,640 --> 00:10:48,640
we would only need the first position

232
00:10:48,640 --> 00:10:50,959
trapdoor

233
00:10:50,959 --> 00:10:52,160
to do this

234
00:10:52,160 --> 00:10:55,920
we will use pairings so we add powers of

235
00:10:55,920 --> 00:11:00,959
the of zed elements in the public key

236
00:11:00,959 --> 00:11:04,320
we replace the randomness element by

237
00:11:04,320 --> 00:11:08,480
additional ciphertext elements

238
00:11:08,800 --> 00:11:11,279
and now we only keep the first position

239
00:11:11,279 --> 00:11:14,279
trapdoor

240
00:11:16,079 --> 00:11:18,320
on the right hand side member of the

241
00:11:18,320 --> 00:11:20,079
equation

242
00:11:20,079 --> 00:11:22,800
pairing t prime with the right power of

243
00:11:22,800 --> 00:11:23,600
z

244
00:11:23,600 --> 00:11:25,839
shifts the trapdoor to the correct

245
00:11:25,839 --> 00:11:28,800
expression

246
00:11:28,800 --> 00:11:31,360
but there is a forge ability issue

247
00:11:31,360 --> 00:11:34,240
because the shifted elements share the

248
00:11:34,240 --> 00:11:36,560
same randomness and so they can be

249
00:11:36,560 --> 00:11:38,560
combined

250
00:11:38,560 --> 00:11:41,519
this forces us to use one randomness

251
00:11:41,519 --> 00:11:42,640
element

252
00:11:42,640 --> 00:11:46,000
by term in the t prime exponent

253
00:11:46,000 --> 00:11:48,560
and this trapdoor now has more

254
00:11:48,560 --> 00:11:50,560
randomness element

255
00:11:50,560 --> 00:11:52,800
t i

256
00:11:52,800 --> 00:11:55,360
but the worst part of it is that in

257
00:11:55,360 --> 00:11:58,320
order to apply this randomness on the

258
00:11:58,320 --> 00:12:01,279
corresponding ciphertext elements

259
00:12:01,279 --> 00:12:02,959
the product symbol

260
00:12:02,959 --> 00:12:06,320
has to go out of the pairing making this

261
00:12:06,320 --> 00:12:09,360
test use a linear number of pairings in

262
00:12:09,360 --> 00:12:12,160
the length of the pattern instead of

263
00:12:12,160 --> 00:12:14,800
just two

264
00:12:16,240 --> 00:12:18,320
thanks to this shiftable trapdoor

265
00:12:18,320 --> 00:12:21,839
mechanism the size of trapdoors doesn't

266
00:12:21,839 --> 00:12:24,959
depend on the length n anymore

267
00:12:24,959 --> 00:12:27,680
but we keep the same other limitations

268
00:12:27,680 --> 00:12:32,239
and the cost for testing is higher

269
00:12:32,720 --> 00:12:35,200
the azir crypt 20 paper

270
00:12:35,200 --> 00:12:37,279
takes advantage of the pattern

271
00:12:37,279 --> 00:12:39,839
distribution to change the encryption

272
00:12:39,839 --> 00:12:41,600
strategy

273
00:12:41,600 --> 00:12:44,399
the stream is long but the patterns are

274
00:12:44,399 --> 00:12:45,760
short

275
00:12:45,760 --> 00:12:47,200
we have seen that

276
00:12:47,200 --> 00:12:49,600
if n is large

277
00:12:49,600 --> 00:12:50,399
so

278
00:12:50,399 --> 00:12:54,160
so is the size of the public key

279
00:12:54,160 --> 00:12:54,959
and

280
00:12:54,959 --> 00:12:57,680
anywhere this upper bound n

281
00:12:57,680 --> 00:13:01,760
is incompatible with streams

282
00:13:01,760 --> 00:13:04,560
instead it is possible to split the

283
00:13:04,560 --> 00:13:07,600
stream into fragments about the size of

284
00:13:07,600 --> 00:13:08,800
a pattern

285
00:13:08,800 --> 00:13:12,719
and encrypt each of them

286
00:13:13,279 --> 00:13:16,320
to encrypt each fragment we can picture

287
00:13:16,320 --> 00:13:19,760
that we use our simple scheme

288
00:13:19,760 --> 00:13:21,680
a naive way to split

289
00:13:21,680 --> 00:13:24,079
or stream is to make consecutive

290
00:13:24,079 --> 00:13:26,090
fragments and encrypt them

291
00:13:26,090 --> 00:13:28,959
[Music]

292
00:13:28,959 --> 00:13:31,519
if a pattern is contained in one

293
00:13:31,519 --> 00:13:35,920
fragment then we can test it

294
00:13:36,000 --> 00:13:38,079
but if the pattern straddles too

295
00:13:38,079 --> 00:13:41,279
fragment we cannot

296
00:13:41,279 --> 00:13:42,800
a good solution

297
00:13:42,800 --> 00:13:45,519
is to encrypt the message twice with

298
00:13:45,519 --> 00:13:47,360
some offset

299
00:13:47,360 --> 00:13:50,639
now if the pattern is there

300
00:13:50,639 --> 00:13:53,680
we can test it with the encryption above

301
00:13:53,680 --> 00:13:55,279
it

302
00:13:55,279 --> 00:13:58,480
and if it's there or there we can test

303
00:13:58,480 --> 00:14:03,399
it with the fragment below it

304
00:14:04,240 --> 00:14:06,639
we see that the fragment can be about

305
00:14:06,639 --> 00:14:08,959
the size of the patterns

306
00:14:08,959 --> 00:14:11,519
and that we can encrypt arbitrary long

307
00:14:11,519 --> 00:14:14,800
streams with this strategy

308
00:14:14,800 --> 00:14:15,760
also

309
00:14:15,760 --> 00:14:18,399
a position trap door can be used to

310
00:14:18,399 --> 00:14:20,079
perform a test

311
00:14:20,079 --> 00:14:23,199
at is its relative position in any

312
00:14:23,199 --> 00:14:24,639
fragment

313
00:14:24,639 --> 00:14:26,880
so we don't need shiftable trapdoors

314
00:14:26,880 --> 00:14:29,279
anymore

315
00:14:29,279 --> 00:14:32,880
this way the aziaquip 20 paper manages

316
00:14:32,880 --> 00:14:36,160
to remove at once all the limitations of

317
00:14:36,160 --> 00:14:39,040
the encryption of streams

318
00:14:39,040 --> 00:14:39,920
here

319
00:14:39,920 --> 00:14:42,839
l is the maximum pattern

320
00:14:42,839 --> 00:14:46,000
length but the public key depends on the

321
00:14:46,000 --> 00:14:48,800
size of the alphabet which is 2 to the

322
00:14:48,800 --> 00:14:52,079
8th in the ids applications

323
00:14:52,079 --> 00:14:54,959
and the security still rely on the same

324
00:14:54,959 --> 00:14:58,359
strong assumption

325
00:15:00,000 --> 00:15:04,079
now let's present our contributions

326
00:15:04,079 --> 00:15:06,720
the encryption used for fragments in the

327
00:15:06,720 --> 00:15:10,000
original paper was actually based on the

328
00:15:10,000 --> 00:15:12,480
shiftable trapdoor scheme

329
00:15:12,480 --> 00:15:15,120
but as the shifting mechanism is now

330
00:15:15,120 --> 00:15:18,240
useless and costs many pairings they

331
00:15:18,240 --> 00:15:20,639
break it by using even more

332
00:15:20,639 --> 00:15:23,440
sophisticated expressions

333
00:15:23,440 --> 00:15:25,519
this sophistication becomes a real

334
00:15:25,519 --> 00:15:27,600
problem when it comes to develop

335
00:15:27,600 --> 00:15:29,839
additional properties like a better

336
00:15:29,839 --> 00:15:32,399
security

337
00:15:32,399 --> 00:15:34,959
in the intuition of our paper we show

338
00:15:34,959 --> 00:15:37,839
that the simple scheme that we have seen

339
00:15:37,839 --> 00:15:40,560
can can advantageously replace the

340
00:15:40,560 --> 00:15:44,320
scheme they use to encrypt fragments

341
00:15:44,320 --> 00:15:47,279
we get the same properties but with a

342
00:15:47,279 --> 00:15:50,639
simpler scheme that uses half the number

343
00:15:50,639 --> 00:15:54,680
of ciphertext elements

344
00:15:55,759 --> 00:15:58,720
we can instantiate the secret encoding

345
00:15:58,720 --> 00:16:02,240
alpha to have a public key size that

346
00:16:02,240 --> 00:16:04,000
doesn't depend on the size of the

347
00:16:04,000 --> 00:16:05,839
alphabet

348
00:16:05,839 --> 00:16:08,720
here we assume that the alphabet is some

349
00:16:08,720 --> 00:16:11,680
publicly known subset of the integers

350
00:16:11,680 --> 00:16:13,759
modulo p

351
00:16:13,759 --> 00:16:16,639
this is always possible as p is very

352
00:16:16,639 --> 00:16:18,160
large

353
00:16:18,160 --> 00:16:21,519
and we only use secret randomness x i

354
00:16:21,519 --> 00:16:25,600
and y i to encode the position

355
00:16:25,600 --> 00:16:28,480
alpha now takes the form of one random

356
00:16:28,480 --> 00:16:31,040
linear function of the symbol

357
00:16:31,040 --> 00:16:34,480
at each position in the fragment

358
00:16:34,480 --> 00:16:37,199
note that the symbol is used directly

359
00:16:37,199 --> 00:16:40,399
instead of some secret encoding

360
00:16:40,399 --> 00:16:43,360
we then show that this choice of alpha

361
00:16:43,360 --> 00:16:45,680
gives a secure scheme under the same

362
00:16:45,680 --> 00:16:48,079
interactive assumption as the existing

363
00:16:48,079 --> 00:16:50,880
solutions

364
00:16:50,880 --> 00:16:54,480
again we have the same scheme structure

365
00:16:54,480 --> 00:16:56,399
but where the sender computes the

366
00:16:56,399 --> 00:17:00,079
ciphertext elements by using the symbols

367
00:17:00,079 --> 00:17:02,240
directly

368
00:17:02,240 --> 00:17:04,799
everything else works as in the simple

369
00:17:04,799 --> 00:17:07,199
scheme

370
00:17:09,280 --> 00:17:11,919
now before showing how our second scheme

371
00:17:11,919 --> 00:17:14,720
achieves a better security assumption

372
00:17:14,720 --> 00:17:17,119
let's see an intuition of the security

373
00:17:17,119 --> 00:17:19,760
definition for all these schemes

374
00:17:19,760 --> 00:17:22,319
it is the usual selective in cpa

375
00:17:22,319 --> 00:17:25,439
security but where the adversary has

376
00:17:25,439 --> 00:17:26,959
extra power

377
00:17:26,959 --> 00:17:29,360
he can query trapdoors with minimal

378
00:17:29,360 --> 00:17:30,880
restriction

379
00:17:30,880 --> 00:17:33,280
for example if the two committed

380
00:17:33,280 --> 00:17:36,160
challenge messages are killed by a

381
00:17:36,160 --> 00:17:39,039
blushing crow and killed by a crushing

382
00:17:39,039 --> 00:17:40,320
blow

383
00:17:40,320 --> 00:17:43,120
then the pattern blush is an invalid

384
00:17:43,120 --> 00:17:44,160
query

385
00:17:44,160 --> 00:17:46,320
because it appears in only one of the

386
00:17:46,320 --> 00:17:49,360
two messages and therefore a trapdoor

387
00:17:49,360 --> 00:17:51,360
could be used to distinguish which one

388
00:17:51,360 --> 00:17:53,520
is encrypted

389
00:17:53,520 --> 00:17:56,320
the pattern led by is a valid query

390
00:17:56,320 --> 00:17:57,919
because it matches

391
00:17:57,919 --> 00:18:01,600
both messages at the same position

392
00:18:01,600 --> 00:18:04,080
this implies that the ciphertext cannot

393
00:18:04,080 --> 00:18:06,320
be given at random

394
00:18:06,320 --> 00:18:08,640
for positions where the messages are

395
00:18:08,640 --> 00:18:10,400
identical

396
00:18:10,400 --> 00:18:12,559
and this is the main reason why

397
00:18:12,559 --> 00:18:16,000
adaptivity has not yet been achieved

398
00:18:16,000 --> 00:18:19,520
even in our second scheme

399
00:18:19,760 --> 00:18:22,799
finally the pattern blushed is a valid

400
00:18:22,799 --> 00:18:25,200
query because it doesn't appear in any

401
00:18:25,200 --> 00:18:27,760
of the messages

402
00:18:27,760 --> 00:18:29,600
in the security proof

403
00:18:29,600 --> 00:18:31,760
the simulator has to give some public

404
00:18:31,760 --> 00:18:34,559
key element for the letter b

405
00:18:34,559 --> 00:18:36,799
and this simulator must be able to

406
00:18:36,799 --> 00:18:38,799
produce a trapdoor for the pattern

407
00:18:38,799 --> 00:18:41,919
blushed that contains the mirror element

408
00:18:41,919 --> 00:18:45,120
of the public key one

409
00:18:45,120 --> 00:18:47,280
we see that a classical dfieldman

410
00:18:47,280 --> 00:18:49,919
assumption doesn't give elements in both

411
00:18:49,919 --> 00:18:51,440
groups

412
00:18:51,440 --> 00:18:54,840
therefore in our second scheme we use

413
00:18:54,840 --> 00:18:58,240
exdh which is a natural extension of the

414
00:18:58,240 --> 00:19:00,640
d-fieldman assumption

415
00:19:00,640 --> 00:19:04,640
this extension is static simple and it

416
00:19:04,640 --> 00:19:08,640
is used in existing ecash

417
00:19:08,840 --> 00:19:12,000
schemes to use all the elements of this

418
00:19:12,000 --> 00:19:13,200
assumption

419
00:19:13,200 --> 00:19:17,679
we need more elements in our scheme

420
00:19:19,120 --> 00:19:22,960
so we add some extra elements z i you

421
00:19:22,960 --> 00:19:26,880
know in the first scheme

422
00:19:27,440 --> 00:19:30,080
we add them to the public key

423
00:19:30,080 --> 00:19:31,120
and

424
00:19:31,120 --> 00:19:33,280
they are used to make additional

425
00:19:33,280 --> 00:19:36,160
ciphertext elements

426
00:19:36,160 --> 00:19:38,960
now the trapdoor can be randomized with

427
00:19:38,960 --> 00:19:40,960
exactly two

428
00:19:40,960 --> 00:19:42,320
values

429
00:19:42,320 --> 00:19:45,280
and the expression of t prime will have

430
00:19:45,280 --> 00:19:47,200
enough flexibility

431
00:19:47,200 --> 00:19:50,080
yet simplicity to show the security of

432
00:19:50,080 --> 00:19:54,918
this scheme based on exth

433
00:19:59,120 --> 00:20:01,440
this table is a summary of the

434
00:20:01,440 --> 00:20:04,400
improvements that we've achieved

435
00:20:04,400 --> 00:20:07,120
compared to the existing schemes our

436
00:20:07,120 --> 00:20:10,159
first scheme uses half the number of

437
00:20:10,159 --> 00:20:12,159
ciphertext elements

438
00:20:12,159 --> 00:20:15,039
and its public key is smaller

439
00:20:15,039 --> 00:20:16,240
by a two

440
00:20:16,240 --> 00:20:18,640
to the fourth factor

441
00:20:18,640 --> 00:20:20,960
and it is the best solution if one

442
00:20:20,960 --> 00:20:24,320
favors efficiency

443
00:20:24,320 --> 00:20:27,039
the security achieved for the first time

444
00:20:27,039 --> 00:20:29,120
by our second scheme

445
00:20:29,120 --> 00:20:32,159
comes at a minor price in complexity

446
00:20:32,159 --> 00:20:35,360
that keep him very efficient in regard

447
00:20:35,360 --> 00:20:38,639
of the existing schemes

448
00:20:39,919 --> 00:20:42,640
thank you for your attention and do not

449
00:20:42,640 --> 00:20:44,720
hesitate to send me an email if you have

450
00:20:44,720 --> 00:20:47,960
any questions

451
00:20:48,640 --> 00:20:50,720
you

