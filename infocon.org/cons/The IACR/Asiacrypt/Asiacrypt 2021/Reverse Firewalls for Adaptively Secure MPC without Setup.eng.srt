1
00:00:01,120 --> 00:00:03,840
hello i'm mark pancholi and today i'm

2
00:00:03,840 --> 00:00:05,759
going to talk about reverse firewalls

3
00:00:05,759 --> 00:00:08,880
for adaptively secure npc without setup

4
00:00:08,880 --> 00:00:10,480
this is a joint work with survativ

5
00:00:10,480 --> 00:00:12,799
chakravarti chaya ganesh and pratik

6
00:00:12,799 --> 00:00:14,719
sarkar

7
00:00:14,719 --> 00:00:17,520
suppose charlie and lucy want to compute

8
00:00:17,520 --> 00:00:20,400
a function f on their inputs x1 and x2

9
00:00:20,400 --> 00:00:23,600
securely by security we mean that lucy

10
00:00:23,600 --> 00:00:25,439
who is corrupt here should only learn

11
00:00:25,439 --> 00:00:27,519
about the output and nothing else about

12
00:00:27,519 --> 00:00:29,119
charlie's input

13
00:00:29,119 --> 00:00:31,119
in the classical setting charlie and

14
00:00:31,119 --> 00:00:33,760
lucy will run a 2pc protocol and

15
00:00:33,760 --> 00:00:36,239
exchange some round messages

16
00:00:36,239 --> 00:00:38,079
and towards the end both of these

17
00:00:38,079 --> 00:00:39,840
parties would be able to compute the

18
00:00:39,840 --> 00:00:43,440
function f of x1 and x2

19
00:00:43,440 --> 00:00:45,840
and in the process the guarantee is that

20
00:00:45,840 --> 00:00:47,840
lucy will not learn anything about

21
00:00:47,840 --> 00:00:50,160
charlie's input except for whatever is

22
00:00:50,160 --> 00:00:53,600
revealed from the function output itself

23
00:00:53,600 --> 00:00:55,760
it is important to note that the

24
00:00:55,760 --> 00:00:58,000
security guarantee crucially relies on

25
00:00:58,000 --> 00:01:00,719
the assumption that the honest parties

26
00:01:00,719 --> 00:01:03,199
execute the protocol honestly

27
00:01:03,199 --> 00:01:05,519
that is charlie's computer has the

28
00:01:05,519 --> 00:01:08,240
honest implementation of the protocol

29
00:01:08,240 --> 00:01:12,080
but what if this assumption is not valid

30
00:01:12,080 --> 00:01:14,640
it is possible that the party's

31
00:01:14,640 --> 00:01:16,479
implementation is tampered by the

32
00:01:16,479 --> 00:01:17,680
adversary

33
00:01:17,680 --> 00:01:19,920
so you have lucy who's corrupt and

34
00:01:19,920 --> 00:01:21,600
charlie who is honest

35
00:01:21,600 --> 00:01:23,280
but now charlie's

36
00:01:23,280 --> 00:01:25,200
machine is tempered

37
00:01:25,200 --> 00:01:27,119
in this case instead of standing the

38
00:01:27,119 --> 00:01:29,200
message prescribed by the protocol a

39
00:01:29,200 --> 00:01:31,520
tampered implementation can just output

40
00:01:31,520 --> 00:01:34,880
some secrets and so there is no privacy

41
00:01:34,880 --> 00:01:36,479
this type of leakage is called

42
00:01:36,479 --> 00:01:38,240
exfiltration

43
00:01:38,240 --> 00:01:40,159
note that a tampering is different from

44
00:01:40,159 --> 00:01:42,159
actual corruptions

45
00:01:42,159 --> 00:01:44,399
when an adversary corrupts a body it

46
00:01:44,399 --> 00:01:46,640
gets full control over it while in the

47
00:01:46,640 --> 00:01:48,960
case of tamperings the adversary tampers

48
00:01:48,960 --> 00:01:51,119
the machine in the beginning and once

49
00:01:51,119 --> 00:01:53,759
the machine is owned by charlie

50
00:01:53,759 --> 00:01:56,479
the adversary cannot arbitrarily control

51
00:01:56,479 --> 00:01:58,240
or see the internal state of this

52
00:01:58,240 --> 00:01:59,439
machine

53
00:01:59,439 --> 00:02:02,880
so the question that we ask in this work

54
00:02:02,880 --> 00:02:03,840
is

55
00:02:03,840 --> 00:02:07,119
can we design an npc protocol that has

56
00:02:07,119 --> 00:02:09,679
some meaningful notion of security even

57
00:02:09,679 --> 00:02:12,160
when the machines of the honest bodies

58
00:02:12,160 --> 00:02:15,680
are tampered by the adversary

59
00:02:15,680 --> 00:02:18,959
in general the answer is no

60
00:02:18,959 --> 00:02:21,440
for example consider a simple tampering

61
00:02:21,440 --> 00:02:23,760
that just sends the honest party's input

62
00:02:23,760 --> 00:02:25,760
in clear instead of sending a valid

63
00:02:25,760 --> 00:02:27,920
first round message

64
00:02:27,920 --> 00:02:30,000
but with slightly more assumptions and a

65
00:02:30,000 --> 00:02:32,000
weaker class of tamperings

66
00:02:32,000 --> 00:02:35,440
we can get positive results

67
00:02:35,440 --> 00:02:37,680
in this work we assume cryptographic

68
00:02:37,680 --> 00:02:40,879
reverse firewalls are an rf

69
00:02:40,879 --> 00:02:42,879
again charlie's implementation is

70
00:02:42,879 --> 00:02:44,800
tampered here

71
00:02:44,800 --> 00:02:46,959
but now a firewall sets in between the

72
00:02:46,959 --> 00:02:49,519
implementation and the outside world

73
00:02:49,519 --> 00:02:51,920
and its job is to sanitize all incoming

74
00:02:51,920 --> 00:02:54,000
and outgoing messages so that nothing

75
00:02:54,000 --> 00:02:56,000
important is leaked

76
00:02:56,000 --> 00:02:58,239
um so here charlie's implementation

77
00:02:58,239 --> 00:03:00,720
tries to leak some secrets but the rf

78
00:03:00,720 --> 00:03:02,879
sanitizes them into inocus looking

79
00:03:02,879 --> 00:03:07,040
messages before sending them to lucy

80
00:03:07,920 --> 00:03:09,840
you can think of a firewall

81
00:03:09,840 --> 00:03:12,560
as a software provided by an external

82
00:03:12,560 --> 00:03:15,760
party and its code can be trusted

83
00:03:15,760 --> 00:03:17,599
one of the objectives while designing an

84
00:03:17,599 --> 00:03:18,480
rf

85
00:03:18,480 --> 00:03:20,800
is to keep its operations very very

86
00:03:20,800 --> 00:03:23,200
simple so that the code can be tested

87
00:03:23,200 --> 00:03:26,080
and verified before using it

88
00:03:26,080 --> 00:03:28,640
um moreover it is not like we are

89
00:03:28,640 --> 00:03:31,040
shifting a trust to the rf as we do not

90
00:03:31,040 --> 00:03:32,959
allow the rf to hold any of charlie's

91
00:03:32,959 --> 00:03:34,000
secrets

92
00:03:34,000 --> 00:03:35,760
it is allowed to keep its own internal

93
00:03:35,760 --> 00:03:37,840
state and it only gets to act on the

94
00:03:37,840 --> 00:03:39,920
transcript messages

95
00:03:39,920 --> 00:03:42,080
the security properties that we want

96
00:03:42,080 --> 00:03:45,360
from an rf can be informally stated as

97
00:03:45,360 --> 00:03:46,560
follows

98
00:03:46,560 --> 00:03:48,000
we want it to be functionality

99
00:03:48,000 --> 00:03:50,799
preserving that is it must preserve the

100
00:03:50,799 --> 00:03:53,200
original protocol's functionality

101
00:03:53,200 --> 00:03:55,840
it should be exfiltration resistant

102
00:03:55,840 --> 00:03:57,439
which means that it should prevent the

103
00:03:57,439 --> 00:03:59,519
tampering from leaking or exfiltrating

104
00:03:59,519 --> 00:04:01,200
any secrets

105
00:04:01,200 --> 00:04:03,120
it should also preserve

106
00:04:03,120 --> 00:04:05,599
the security of the original uh

107
00:04:05,599 --> 00:04:08,400
underlying mpc protocol and this is

108
00:04:08,400 --> 00:04:10,720
called security preservation

109
00:04:10,720 --> 00:04:12,720
and finally it should be transparent

110
00:04:12,720 --> 00:04:15,040
which means that the transcript messages

111
00:04:15,040 --> 00:04:17,199
should look indistinguishable from the

112
00:04:17,199 --> 00:04:19,279
ones that would have been generated by

113
00:04:19,279 --> 00:04:21,519
an honest implementation of the original

114
00:04:21,519 --> 00:04:23,600
protocol

115
00:04:23,600 --> 00:04:25,919
i will talk a little bit about previous

116
00:04:25,919 --> 00:04:28,240
results before talking about our

117
00:04:28,240 --> 00:04:29,919
contributions

118
00:04:29,919 --> 00:04:32,400
so this notion was introduced by marinov

119
00:04:32,400 --> 00:04:34,320
and stephens davidovitz

120
00:04:34,320 --> 00:04:36,720
in eurocup 2015

121
00:04:36,720 --> 00:04:38,160
in their work

122
00:04:38,160 --> 00:04:40,320
they provided construction for 2pc

123
00:04:40,320 --> 00:04:43,600
protocol along with its rf

124
00:04:43,600 --> 00:04:45,600
and this is secure even in the face of

125
00:04:45,600 --> 00:04:46,960
tamperings

126
00:04:46,960 --> 00:04:49,120
however their construction only works

127
00:04:49,120 --> 00:04:51,520
for passive and static corruptions

128
00:04:51,520 --> 00:04:54,560
by passive corruptions we mean that

129
00:04:54,560 --> 00:04:56,080
the corrupted parties follow the

130
00:04:56,080 --> 00:04:58,720
protocol but try to learn secrets from

131
00:04:58,720 --> 00:05:00,479
transcript messages

132
00:05:00,479 --> 00:05:02,560
and a static corruption means that the

133
00:05:02,560 --> 00:05:04,720
adversary corrupts the parties at the

134
00:05:04,720 --> 00:05:07,840
start of protocol execution

135
00:05:07,840 --> 00:05:09,759
then chakrabarty at all

136
00:05:09,759 --> 00:05:11,840
extended this result to multi-party

137
00:05:11,840 --> 00:05:13,039
protocols

138
00:05:13,039 --> 00:05:14,880
and active corruptions

139
00:05:14,880 --> 00:05:17,440
here active corruptions means that the

140
00:05:17,440 --> 00:05:19,600
corrupted parties can now behave

141
00:05:19,600 --> 00:05:22,160
arbitrarily and may not follow the

142
00:05:22,160 --> 00:05:24,560
protocol steps

143
00:05:24,560 --> 00:05:26,160
but this result assumes a common

144
00:05:26,160 --> 00:05:29,360
reference string or a crs which is a

145
00:05:29,360 --> 00:05:31,759
trusted setup

146
00:05:31,759 --> 00:05:34,000
in this work we strengthen the result

147
00:05:34,000 --> 00:05:36,080
further to active and adaptive

148
00:05:36,080 --> 00:05:38,880
corruptions where adaptive corruptions

149
00:05:38,880 --> 00:05:40,639
means that the adversary can corrupt

150
00:05:40,639 --> 00:05:42,479
some of the honest bodies during

151
00:05:42,479 --> 00:05:44,479
protocol execution

152
00:05:44,479 --> 00:05:46,960
moreover our construction is in the

153
00:05:46,960 --> 00:05:49,039
plain model

154
00:05:49,039 --> 00:05:51,600
now let me talk about our contributions

155
00:05:51,600 --> 00:05:54,000
in this work we do the following

156
00:05:54,000 --> 00:05:56,000
we introduce new definitions for

157
00:05:56,000 --> 00:05:58,240
adaptive corruption case as the older

158
00:05:58,240 --> 00:06:00,479
definitions do not suffice

159
00:06:00,479 --> 00:06:02,720
we also prove an implication between

160
00:06:02,720 --> 00:06:04,880
exfiltration resistance and security

161
00:06:04,880 --> 00:06:07,600
preservation this result is particularly

162
00:06:07,600 --> 00:06:09,919
interesting as it was conjectured in the

163
00:06:09,919 --> 00:06:12,080
previous works that these two notions

164
00:06:12,080 --> 00:06:14,639
might not be equal or related

165
00:06:14,639 --> 00:06:16,880
thus in all the previous works one has

166
00:06:16,880 --> 00:06:18,400
to prove

167
00:06:18,400 --> 00:06:21,759
both sp and er for security

168
00:06:21,759 --> 00:06:23,919
moreover designing protocols is a bit

169
00:06:23,919 --> 00:06:25,840
more complicated as you need to keep

170
00:06:25,840 --> 00:06:28,080
both these properties in mind

171
00:06:28,080 --> 00:06:29,360
but we prove

172
00:06:29,360 --> 00:06:32,400
that exfiltration resistance implies

173
00:06:32,400 --> 00:06:34,720
uh security preservation

174
00:06:34,720 --> 00:06:37,280
this makes protocol design relatively

175
00:06:37,280 --> 00:06:38,319
simple

176
00:06:38,319 --> 00:06:40,479
and to argue security one must just

177
00:06:40,479 --> 00:06:43,440
prove year

178
00:06:43,440 --> 00:06:45,759
as mentioned we also give a new mpc

179
00:06:45,759 --> 00:06:47,520
construction that is secure against

180
00:06:47,520 --> 00:06:50,000
adaptive and active adversary

181
00:06:50,000 --> 00:06:51,840
our construction follows the general

182
00:06:51,840 --> 00:06:54,720
approach of the gmw compiler

183
00:06:54,720 --> 00:06:58,880
the gmw compiler has three steps

184
00:06:58,880 --> 00:07:01,440
first the bodies generate and commit to

185
00:07:01,440 --> 00:07:03,680
a random tape then they commit to their

186
00:07:03,680 --> 00:07:06,160
inputs and finally they execute a

187
00:07:06,160 --> 00:07:08,720
passively secure protocol and at each

188
00:07:08,720 --> 00:07:11,199
step prove the correctness using some

189
00:07:11,199 --> 00:07:14,080
zero-knowledge proof

190
00:07:14,479 --> 00:07:16,800
there are two problems with general gmw

191
00:07:16,800 --> 00:07:18,240
approach

192
00:07:18,240 --> 00:07:19,840
one should note that there is no

193
00:07:19,840 --> 00:07:21,840
guarantee of security if the random

194
00:07:21,840 --> 00:07:23,759
tapes are not random

195
00:07:23,759 --> 00:07:26,720
so in the gmw compiler construction each

196
00:07:26,720 --> 00:07:28,800
party contributes to the random tapes of

197
00:07:28,800 --> 00:07:31,280
every other party so that

198
00:07:31,280 --> 00:07:33,759
if at least one of the parties is honest

199
00:07:33,759 --> 00:07:36,080
then the tapes of all parties including

200
00:07:36,080 --> 00:07:37,520
the corrupt parties

201
00:07:37,520 --> 00:07:40,080
are guaranteed to be honest

202
00:07:40,080 --> 00:07:41,440
and random

203
00:07:41,440 --> 00:07:43,599
but we cannot assume this

204
00:07:43,599 --> 00:07:45,520
in our case the honest party's

205
00:07:45,520 --> 00:07:48,560
implementations are tampered and so even

206
00:07:48,560 --> 00:07:52,319
the honest parties pick biased coins

207
00:07:52,319 --> 00:07:54,240
the second problem is that the round

208
00:07:54,240 --> 00:07:56,000
messages themselves

209
00:07:56,000 --> 00:07:59,680
might leak some secrets

210
00:07:59,680 --> 00:08:04,400
so our approach here would be to make rf

211
00:08:04,400 --> 00:08:07,120
ensure that the

212
00:08:07,120 --> 00:08:09,520
random tapes are indeed random

213
00:08:09,520 --> 00:08:13,280
and the rf also must randomize and mod

214
00:08:13,280 --> 00:08:16,479
every outgoing and incoming message

215
00:08:16,479 --> 00:08:18,400
and therefore the challenge here is to

216
00:08:18,400 --> 00:08:21,840
design the underlying mpc protocol for

217
00:08:21,840 --> 00:08:23,840
which we can build such rfs

218
00:08:23,840 --> 00:08:26,160
that change trans transcript messages

219
00:08:26,160 --> 00:08:29,039
without breaking the correctness

220
00:08:29,039 --> 00:08:31,440
our construction at a high level can be

221
00:08:31,440 --> 00:08:33,279
seen as follows

222
00:08:33,279 --> 00:08:35,279
first there is the augmented coin

223
00:08:35,279 --> 00:08:37,440
tossing phase which allows the parties

224
00:08:37,440 --> 00:08:39,440
to commit to generate and commit to

225
00:08:39,440 --> 00:08:41,599
their random tapes

226
00:08:41,599 --> 00:08:44,800
then the parties can commit their inputs

227
00:08:44,800 --> 00:08:47,040
and execute a passively secure mpc

228
00:08:47,040 --> 00:08:50,080
protocol while proving each step using

229
00:08:50,080 --> 00:08:52,640
some zero knowledge proof

230
00:08:52,640 --> 00:08:53,760
this step

231
00:08:53,760 --> 00:08:54,399
can

232
00:08:54,399 --> 00:08:57,760
uh we can use any existing mpc protocol

233
00:08:57,760 --> 00:09:00,080
uh which is adaptively and passively

234
00:09:00,080 --> 00:09:02,480
secure

235
00:09:02,480 --> 00:09:04,800
and for these three steps

236
00:09:04,800 --> 00:09:06,320
we construct

237
00:09:06,320 --> 00:09:08,080
an augmented coin-housing protocol and

238
00:09:08,080 --> 00:09:10,880
aziki protocol which are adaptively and

239
00:09:10,880 --> 00:09:12,560
actively secure

240
00:09:12,560 --> 00:09:14,160
and they are constructed in a way that

241
00:09:14,160 --> 00:09:16,720
they admit an rf

242
00:09:16,720 --> 00:09:17,760
however

243
00:09:17,760 --> 00:09:20,560
these constructions assume a urs or

244
00:09:20,560 --> 00:09:22,640
uniform random string

245
00:09:22,640 --> 00:09:24,399
however we would like

246
00:09:24,399 --> 00:09:26,959
our constructions to have minimal trust

247
00:09:26,959 --> 00:09:28,080
assumptions

248
00:09:28,080 --> 00:09:29,120
and so

249
00:09:29,120 --> 00:09:31,600
we instantiate the urs

250
00:09:31,600 --> 00:09:35,040
by a coin tossing protocol which is also

251
00:09:35,040 --> 00:09:37,120
adaptively and actively secure and

252
00:09:37,120 --> 00:09:39,279
admits in rf

253
00:09:39,279 --> 00:09:41,200
in the rest of the talk i will talk

254
00:09:41,200 --> 00:09:42,640
briefly about

255
00:09:42,640 --> 00:09:44,800
the about our constructions and proof

256
00:09:44,800 --> 00:09:45,839
ideas

257
00:09:45,839 --> 00:09:48,240
for the augmented coin tossing

258
00:09:48,240 --> 00:09:51,040
as the zero knowledge proof and coin

259
00:09:51,040 --> 00:09:54,160
tossing in the plain model

260
00:09:55,680 --> 00:09:57,920
before explaining our constructions i

261
00:09:57,920 --> 00:09:59,279
would like to highlight some of the

262
00:09:59,279 --> 00:10:01,680
problems encountered while extending the

263
00:10:01,680 --> 00:10:04,320
previous work of chakrabarthy at all in

264
00:10:04,320 --> 00:10:06,480
their construction the rf acts on the

265
00:10:06,480 --> 00:10:08,560
messages from the augmented coin tossing

266
00:10:08,560 --> 00:10:11,839
protocol in such a way that each party

267
00:10:11,839 --> 00:10:13,600
has a different view of the commit

268
00:10:13,600 --> 00:10:16,000
commitment to the same coin

269
00:10:16,000 --> 00:10:18,399
that is the committer sees some

270
00:10:18,399 --> 00:10:20,880
commitment c and the rest of the parties

271
00:10:20,880 --> 00:10:23,200
see a commitment c prime to the same

272
00:10:23,200 --> 00:10:24,560
coin

273
00:10:24,560 --> 00:10:25,839
due to this

274
00:10:25,839 --> 00:10:27,839
during protocol execution

275
00:10:27,839 --> 00:10:30,160
the committer tries to prove a statement

276
00:10:30,160 --> 00:10:32,720
with respect to c while every other

277
00:10:32,720 --> 00:10:35,120
party expects a proof with respect to c

278
00:10:35,120 --> 00:10:36,399
prime

279
00:10:36,399 --> 00:10:38,720
to preserve functionality the rf must

280
00:10:38,720 --> 00:10:40,720
small every proof

281
00:10:40,720 --> 00:10:42,720
this requires a strong primitive called

282
00:10:42,720 --> 00:10:44,640
control malleable musics

283
00:10:44,640 --> 00:10:46,560
and these are not known to be adaptively

284
00:10:46,560 --> 00:10:47,920
secure

285
00:10:47,920 --> 00:10:50,240
but the crucial observation that helps

286
00:10:50,240 --> 00:10:52,640
us to give a much simpler protocol and

287
00:10:52,640 --> 00:10:54,720
with simpler assumptions

288
00:10:54,720 --> 00:10:56,000
is that

289
00:10:56,000 --> 00:10:57,440
um

290
00:10:57,440 --> 00:10:59,600
we can make each party have consistent

291
00:10:59,600 --> 00:11:00,959
view

292
00:11:00,959 --> 00:11:03,600
the augmented coin tossing functionality

293
00:11:03,600 --> 00:11:07,279
allows one party to get a random coin

294
00:11:07,279 --> 00:11:08,800
and every other party to get its

295
00:11:08,800 --> 00:11:10,160
commitment

296
00:11:10,160 --> 00:11:12,399
we start with each party having its own

297
00:11:12,399 --> 00:11:13,680
urs

298
00:11:13,680 --> 00:11:16,399
now charlie wants to generate a random

299
00:11:16,399 --> 00:11:17,920
string s

300
00:11:17,920 --> 00:11:18,959
and

301
00:11:18,959 --> 00:11:20,480
uh everyone

302
00:11:20,480 --> 00:11:22,800
wants a commitment on it

303
00:11:22,800 --> 00:11:24,880
our construction follows a commit and

304
00:11:24,880 --> 00:11:26,320
open approach

305
00:11:26,320 --> 00:11:29,839
first every party tosses a coin s-i and

306
00:11:29,839 --> 00:11:33,440
commits to it using ri under its own urs

307
00:11:33,440 --> 00:11:34,959
ursi

308
00:11:34,959 --> 00:11:37,200
for example charlie commits

309
00:11:37,200 --> 00:11:40,399
using urs 1 while snoopy commits under

310
00:11:40,399 --> 00:11:43,839
urs 4. the commitment scheme we use here

311
00:11:43,839 --> 00:11:46,160
has the following properties

312
00:11:46,160 --> 00:11:48,720
it is adaptively secure and actively

313
00:11:48,720 --> 00:11:51,920
secure and it is additively homomorphic

314
00:11:51,920 --> 00:11:56,079
under a particular urs

315
00:11:56,079 --> 00:11:58,720
then in the second round of the protocol

316
00:11:58,720 --> 00:12:01,680
each party except for charlie opens the

317
00:12:01,680 --> 00:12:06,560
commitment by broadcasting sienra

318
00:12:07,440 --> 00:12:08,800
finally

319
00:12:08,800 --> 00:12:10,800
each party checks if the openings were

320
00:12:10,800 --> 00:12:11,760
correct

321
00:12:11,760 --> 00:12:12,399
and

322
00:12:12,399 --> 00:12:13,519
valid

323
00:12:13,519 --> 00:12:15,760
and then computes a commitment of each

324
00:12:15,760 --> 00:12:17,600
si nri

325
00:12:17,600 --> 00:12:19,440
using charlie's

326
00:12:19,440 --> 00:12:21,279
urs

327
00:12:21,279 --> 00:12:22,959
now all the commitments are on the

328
00:12:22,959 --> 00:12:24,639
charlie's urs

329
00:12:24,639 --> 00:12:26,320
and thus all of them can be

330
00:12:26,320 --> 00:12:29,200
homomorphically added

331
00:12:29,200 --> 00:12:31,040
note that everyone has the same view of

332
00:12:31,040 --> 00:12:34,240
the commitment capital c here

333
00:12:34,240 --> 00:12:36,959
the proof idea is that if the commitment

334
00:12:36,959 --> 00:12:40,079
scheme is added adaptively secure

335
00:12:40,079 --> 00:12:42,560
then while simulating we can extract the

336
00:12:42,560 --> 00:12:44,880
adversary's coins in the first round and

337
00:12:44,880 --> 00:12:48,160
equivocate in the second

338
00:12:48,160 --> 00:12:50,639
however in our setting

339
00:12:50,639 --> 00:12:53,600
charlie's implementation is tampered

340
00:12:53,600 --> 00:12:56,399
this causes two problems

341
00:12:56,399 --> 00:12:57,600
first

342
00:12:57,600 --> 00:12:59,680
the coin s.i

343
00:12:59,680 --> 00:13:01,920
might not be picked uniformly at random

344
00:13:01,920 --> 00:13:03,680
and therefore the final coin is still

345
00:13:03,680 --> 00:13:05,120
not random

346
00:13:05,120 --> 00:13:07,279
and second the randomness ri might be

347
00:13:07,279 --> 00:13:09,760
biased in such a way that the commitment

348
00:13:09,760 --> 00:13:12,560
exfiltrates

349
00:13:12,720 --> 00:13:15,279
one easy way to fix this is that the

350
00:13:15,279 --> 00:13:17,760
reverse fireball would use the additive

351
00:13:17,760 --> 00:13:20,560
homomorphism of the commitment scheme

352
00:13:20,560 --> 00:13:23,120
to introduce fresh randomness in each

353
00:13:23,120 --> 00:13:25,600
commitment

354
00:13:25,600 --> 00:13:28,480
the final result that we get is that

355
00:13:28,480 --> 00:13:31,279
if the commitment scheme is adaptively

356
00:13:31,279 --> 00:13:34,160
secure and additively homomorphic in the

357
00:13:34,160 --> 00:13:37,680
urs model then there exists a protocol

358
00:13:37,680 --> 00:13:38,480
that

359
00:13:38,480 --> 00:13:40,720
securely implements the augmented coin

360
00:13:40,720 --> 00:13:43,839
tossing functionality against other

361
00:13:43,839 --> 00:13:45,680
adaptive corruptions of parties in the

362
00:13:45,680 --> 00:13:48,480
urs model

363
00:13:48,480 --> 00:13:50,800
for our zero knowledge protocol we build

364
00:13:50,800 --> 00:13:53,519
on the recent result of connection which

365
00:13:53,519 --> 00:13:55,600
itself is an extension of the fls

366
00:13:55,600 --> 00:13:58,560
protocol by making it adaptively secure

367
00:13:58,560 --> 00:14:00,480
here charlie is the prover and lucy is

368
00:14:00,480 --> 00:14:02,560
the verifier and the statement is a

369
00:14:02,560 --> 00:14:03,839
graph g

370
00:14:03,839 --> 00:14:04,720
and

371
00:14:04,720 --> 00:14:06,880
the urs for the commitment scheme

372
00:14:06,880 --> 00:14:09,440
along with the public key apk

373
00:14:09,440 --> 00:14:11,279
the public key encryption scheme allows

374
00:14:11,279 --> 00:14:13,120
oblivious ciphertext sampling which

375
00:14:13,120 --> 00:14:15,120
means that the ciphertext can be sampled

376
00:14:15,120 --> 00:14:17,760
oblivious of the plain text message

377
00:14:17,760 --> 00:14:19,760
charlie in addition knows a hamiltonian

378
00:14:19,760 --> 00:14:22,160
cycle in g

379
00:14:22,160 --> 00:14:24,160
in the first round charlie picks around

380
00:14:24,160 --> 00:14:27,040
the endnote cycle edge and commits to

381
00:14:27,040 --> 00:14:29,199
its adjacency matrix by committing to

382
00:14:29,199 --> 00:14:31,199
one if there is an edge otherwise he

383
00:14:31,199 --> 00:14:32,880
commits to zero

384
00:14:32,880 --> 00:14:35,040
in addition to this he also sends

385
00:14:35,040 --> 00:14:37,680
encryption of the commitment randomness

386
00:14:37,680 --> 00:14:40,880
suppose he committed to bit zero then he

387
00:14:40,880 --> 00:14:41,839
would

388
00:14:41,839 --> 00:14:44,399
encrypt encryption 0 honestly using the

389
00:14:44,399 --> 00:14:45,920
public key pk

390
00:14:45,920 --> 00:14:48,079
while encryption 1 will be obliviously

391
00:14:48,079 --> 00:14:49,519
sampled

392
00:14:49,519 --> 00:14:51,440
then in the next round lucy replies with

393
00:14:51,440 --> 00:14:52,959
the challenge e

394
00:14:52,959 --> 00:14:55,199
finally charlie responds to the

395
00:14:55,199 --> 00:14:58,800
challenge e as follows if he is one then

396
00:14:58,800 --> 00:15:00,959
he opens commitment to edge by sending

397
00:15:00,959 --> 00:15:02,959
the commitment randomness and the

398
00:15:02,959 --> 00:15:04,560
randomness

399
00:15:04,560 --> 00:15:06,079
used for encryption

400
00:15:06,079 --> 00:15:08,240
so for instance he is opening commitment

401
00:15:08,240 --> 00:15:11,040
to a bit zero then he sends the

402
00:15:11,040 --> 00:15:13,199
randomness for encryption zero while he

403
00:15:13,199 --> 00:15:15,360
claims that encryption one was done

404
00:15:15,360 --> 00:15:18,079
obliviously

405
00:15:18,240 --> 00:15:20,959
and if the challenge with e is one then

406
00:15:20,959 --> 00:15:25,199
he opens non-edges in piofet where pi is

407
00:15:25,199 --> 00:15:28,240
a random permutation of graph edge

408
00:15:28,240 --> 00:15:31,920
and also sends the permutation pi

409
00:15:32,000 --> 00:15:35,040
uh it notice that the rf can sanitize

410
00:15:35,040 --> 00:15:37,360
the first and the last round messages by

411
00:15:37,360 --> 00:15:39,680
permuting the graph h

412
00:15:39,680 --> 00:15:41,920
and similarly permuting the commitments

413
00:15:41,920 --> 00:15:44,160
and the encryptions

414
00:15:44,160 --> 00:15:46,560
and also randomizing the commitments and

415
00:15:46,560 --> 00:15:48,399
the ciphertext using additive

416
00:15:48,399 --> 00:15:50,399
homomorphism

417
00:15:50,399 --> 00:15:53,600
and then the rf adjusts the response

418
00:15:53,600 --> 00:15:55,759
according to the changes it made in the

419
00:15:55,759 --> 00:15:57,600
first round

420
00:15:57,600 --> 00:15:58,639
however

421
00:15:58,639 --> 00:16:01,680
the rf cannot change the challenge e

422
00:16:01,680 --> 00:16:03,680
without breaking correctness

423
00:16:03,680 --> 00:16:06,880
for example if lucy sends challenge e

424
00:16:06,880 --> 00:16:09,199
equals one and charlie

425
00:16:09,199 --> 00:16:12,560
charlie's rf changes it to equals zero

426
00:16:12,560 --> 00:16:14,480
then charlie would respond by opening

427
00:16:14,480 --> 00:16:17,920
graph edge but lucy would be expecting

428
00:16:17,920 --> 00:16:19,600
a different response

429
00:16:19,600 --> 00:16:21,360
the rf cannot generate the correct

430
00:16:21,360 --> 00:16:24,399
response for equals 1 without knowing

431
00:16:24,399 --> 00:16:26,959
the witness

432
00:16:27,759 --> 00:16:29,839
we fix this by splitting the challenge

433
00:16:29,839 --> 00:16:31,839
into two parts and making both the

434
00:16:31,839 --> 00:16:34,399
parties contribute to it

435
00:16:34,399 --> 00:16:37,040
now charlie sends an encryption ep in

436
00:16:37,040 --> 00:16:39,920
the first round and lucy replies with ev

437
00:16:39,920 --> 00:16:43,920
and the challenge is defined as epxor ev

438
00:16:43,920 --> 00:16:46,720
in the last round charlie also opens ep

439
00:16:46,720 --> 00:16:49,120
by sending ap and the encryption's

440
00:16:49,120 --> 00:16:50,880
randomness

441
00:16:50,880 --> 00:16:53,040
the rf can now introduce fresh

442
00:16:53,040 --> 00:16:55,360
randomness without breaking correctness

443
00:16:55,360 --> 00:16:58,480
as the rf can wall eevee

444
00:16:58,480 --> 00:16:59,680
and

445
00:16:59,680 --> 00:17:02,240
gets a chance to adjust the response by

446
00:17:02,240 --> 00:17:06,640
changing ep and opening of eb

447
00:17:10,640 --> 00:17:14,319
so our final result here is that

448
00:17:14,319 --> 00:17:16,079
if the commitment scheme is

449
00:17:16,079 --> 00:17:19,039
non-interactive equivocal commitment

450
00:17:19,039 --> 00:17:22,319
under the urs model and pke is a public

451
00:17:22,319 --> 00:17:24,480
key encryption scheme with oblivious

452
00:17:24,480 --> 00:17:27,039
ciphertext sample sampling

453
00:17:27,039 --> 00:17:28,640
then there exists a protocol that

454
00:17:28,640 --> 00:17:29,840
realizes

455
00:17:29,840 --> 00:17:32,880
zk functionality for all np relations

456
00:17:32,880 --> 00:17:34,960
against adaptive corruptions in the urs

457
00:17:34,960 --> 00:17:37,280
model

458
00:17:37,679 --> 00:17:40,320
we follow the commit and open paradigm

459
00:17:40,320 --> 00:17:42,559
for our coin tossing protocol

460
00:17:42,559 --> 00:17:43,840
in particular

461
00:17:43,840 --> 00:17:44,720
first

462
00:17:44,720 --> 00:17:47,360
each party commits to a coin in the

463
00:17:47,360 --> 00:17:49,440
commitment generation phase and then

464
00:17:49,440 --> 00:17:51,600
everybody opens their commitments and

465
00:17:51,600 --> 00:17:53,760
then all the uh openings are put

466
00:17:53,760 --> 00:17:57,360
together to evaluate the final output

467
00:17:57,360 --> 00:17:59,039
since we would like to remove any kind

468
00:17:59,039 --> 00:18:00,960
of setup assumption

469
00:18:00,960 --> 00:18:03,440
we also have to generate the com the

470
00:18:03,440 --> 00:18:04,799
parameter

471
00:18:04,799 --> 00:18:06,640
commitment parameters as a part of the

472
00:18:06,640 --> 00:18:08,160
protocol

473
00:18:08,160 --> 00:18:09,520
in more detail

474
00:18:09,520 --> 00:18:11,840
in the parameter generation phase each

475
00:18:11,840 --> 00:18:13,919
party first interacts with every other

476
00:18:13,919 --> 00:18:16,320
party to generate a pairwise peterson

477
00:18:16,320 --> 00:18:19,440
commitment parameters gi nhi

478
00:18:19,440 --> 00:18:21,760
they also generate a pairwise public key

479
00:18:21,760 --> 00:18:23,200
pk

480
00:18:23,200 --> 00:18:25,679
the public key encryption system

481
00:18:25,679 --> 00:18:28,400
supports oblivious ciphertext and public

482
00:18:28,400 --> 00:18:29,600
key sampling

483
00:18:29,600 --> 00:18:32,880
by oblivious public key sampling we mean

484
00:18:32,880 --> 00:18:35,120
that the party can sample a public key

485
00:18:35,120 --> 00:18:36,799
without knowing the corresponding secret

486
00:18:36,799 --> 00:18:37,520
key

487
00:18:37,520 --> 00:18:39,280
so here in the parameter generation

488
00:18:39,280 --> 00:18:40,559
phase

489
00:18:40,559 --> 00:18:43,039
a party who generates public pk would

490
00:18:43,039 --> 00:18:46,400
not know the corresponding secret key

491
00:18:46,400 --> 00:18:47,200
then

492
00:18:47,200 --> 00:18:48,480
each party

493
00:18:48,480 --> 00:18:51,200
uh tosses a coin and commits to it

494
00:18:51,200 --> 00:18:52,720
uh using the pitocin commitment

495
00:18:52,720 --> 00:18:55,120
parameters and it also encrypts the

496
00:18:55,120 --> 00:18:58,480
commitment randomness ri using the

497
00:18:58,480 --> 00:19:01,919
public key pique

498
00:19:02,160 --> 00:19:04,640
then they each open their commitments

499
00:19:04,640 --> 00:19:06,960
and finally the random coin is xor of

500
00:19:06,960 --> 00:19:09,679
all dsis

501
00:19:09,679 --> 00:19:12,240
in general the fruit proof strategy

502
00:19:12,240 --> 00:19:13,760
is as follows

503
00:19:13,760 --> 00:19:16,000
the simulator invokes a functionality to

504
00:19:16,000 --> 00:19:18,480
get a random coin and then the simulator

505
00:19:18,480 --> 00:19:20,720
interacts with the adversary

506
00:19:20,720 --> 00:19:23,280
uh and it should bias the output to the

507
00:19:23,280 --> 00:19:24,640
coin that it receives from the

508
00:19:24,640 --> 00:19:26,080
functionality

509
00:19:26,080 --> 00:19:28,880
to do this we want the simulator to be

510
00:19:28,880 --> 00:19:31,039
able to equivocate and extract

511
00:19:31,039 --> 00:19:32,880
commitments

512
00:19:32,880 --> 00:19:34,880
so in our construction we do it as

513
00:19:34,880 --> 00:19:37,280
follows

514
00:19:37,760 --> 00:19:40,080
using knowledge assumptions the

515
00:19:40,080 --> 00:19:41,919
simulator can extract peterson

516
00:19:41,919 --> 00:19:45,679
commitment parameter trapdoors

517
00:19:45,679 --> 00:19:48,000
and it can also set the public key such

518
00:19:48,000 --> 00:19:49,919
that it actually knows the corresponding

519
00:19:49,919 --> 00:19:51,600
secret key

520
00:19:51,600 --> 00:19:54,799
so equivocation is taken care of using

521
00:19:54,799 --> 00:19:58,080
the trapdoors and extraction

522
00:19:58,080 --> 00:20:02,960
is taken care of by using the secret key

523
00:20:02,960 --> 00:20:04,880
so in the next phase in the commitment

524
00:20:04,880 --> 00:20:07,840
generation phase when uh the simulator

525
00:20:07,840 --> 00:20:10,400
has to generate commitments on behalf of

526
00:20:10,400 --> 00:20:12,480
the honest parties it just commits to

527
00:20:12,480 --> 00:20:14,640
some random coins

528
00:20:14,640 --> 00:20:17,280
and it extracts the

529
00:20:17,280 --> 00:20:19,360
adversary's commitments

530
00:20:19,360 --> 00:20:22,479
by decrypting it

531
00:20:23,200 --> 00:20:26,799
then in the next phase it equivocates

532
00:20:26,799 --> 00:20:29,679
its own commitments using the commitment

533
00:20:29,679 --> 00:20:32,320
trap door

534
00:20:32,320 --> 00:20:36,320
and finally the result that we get is as

535
00:20:36,320 --> 00:20:38,159
follows

536
00:20:38,159 --> 00:20:39,840
assuming discrete log and knowledge

537
00:20:39,840 --> 00:20:41,600
assumption and a public key and

538
00:20:41,600 --> 00:20:43,120
christian scheme

539
00:20:43,120 --> 00:20:45,440
with oblivious cipher text and public

540
00:20:45,440 --> 00:20:48,400
key sampling and also

541
00:20:48,400 --> 00:20:50,640
which is additively homomorphic there

542
00:20:50,640 --> 00:20:52,720
exists a protocol that securely

543
00:20:52,720 --> 00:20:54,720
implements coin tossing functionality

544
00:20:54,720 --> 00:20:56,720
against adaptive corruptions

545
00:20:56,720 --> 00:20:59,679
in the plain model

546
00:21:00,159 --> 00:21:03,679
to conclude in this talk we talked about

547
00:21:03,679 --> 00:21:06,080
the cryptographic reverse firewall model

548
00:21:06,080 --> 00:21:08,000
and we also discussed the construction

549
00:21:08,000 --> 00:21:10,000
that is secure against adaptive and

550
00:21:10,000 --> 00:21:12,720
active adversary and is secure even when

551
00:21:12,720 --> 00:21:17,159
honest bodies machines are tempered

552
00:21:17,360 --> 00:21:20,520
thank you

