1
00:00:02,000 --> 00:00:05,279
hi everyone this is yuchan i'm very

2
00:00:05,279 --> 00:00:08,240
happy to present our paper entitled

3
00:00:08,240 --> 00:00:10,639
hierarchy integrity signature and

4
00:00:10,639 --> 00:00:11,920
encryption

5
00:00:11,920 --> 00:00:14,320
this is a joint work with chanthang and

6
00:00:14,320 --> 00:00:17,199
yuwan

7
00:00:17,199 --> 00:00:19,680
we will start with the background

8
00:00:19,680 --> 00:00:21,680
then introduce our new notion called

9
00:00:21,680 --> 00:00:23,600
hierarchy integrity signature and

10
00:00:23,600 --> 00:00:24,880
encryption

11
00:00:24,880 --> 00:00:27,680
then discuss its extension with global

12
00:00:27,680 --> 00:00:29,599
escrow property

13
00:00:29,599 --> 00:00:30,880
finally

14
00:00:30,880 --> 00:00:33,280
we make a comparison between

15
00:00:33,280 --> 00:00:36,399
related schemes

16
00:00:39,280 --> 00:00:42,399
pke and signature workhorse primitives

17
00:00:42,399 --> 00:00:45,200
that are typically used simultaneously

18
00:00:45,200 --> 00:00:47,360
to secure communication

19
00:00:47,360 --> 00:00:49,920
namely public encryption protects

20
00:00:49,920 --> 00:00:51,440
confidentiality

21
00:00:51,440 --> 00:00:54,960
while signature protects authenticity

22
00:00:54,960 --> 00:00:57,520
examples including secure communication

23
00:00:57,520 --> 00:00:59,120
software such as

24
00:00:59,120 --> 00:01:01,199
pgp and whatsapp

25
00:01:01,199 --> 00:01:04,479
and privacy preserving cryptocurrencies

26
00:01:04,479 --> 00:01:09,200
such as zcash visa and pgc

27
00:01:09,200 --> 00:01:12,240
a subtle insult is that when pke and

28
00:01:12,240 --> 00:01:15,119
signatures are used together we need to

29
00:01:15,119 --> 00:01:17,600
concede joint security

30
00:01:17,600 --> 00:01:20,560
more precisely we stipulate

31
00:01:20,560 --> 00:01:23,520
that euf cma security for the signature

32
00:01:23,520 --> 00:01:26,000
component still holds even in the

33
00:01:26,000 --> 00:01:28,320
presence of an additional decreasing

34
00:01:28,320 --> 00:01:29,520
oracle

35
00:01:29,520 --> 00:01:32,159
while the indcc security for the pke

36
00:01:32,159 --> 00:01:33,280
component

37
00:01:33,280 --> 00:01:37,280
still holds even in the presence of an

38
00:01:37,280 --> 00:01:41,400
additional signing oracle

39
00:01:41,680 --> 00:01:43,040
basically

40
00:01:43,040 --> 00:01:45,680
there are two principles when using pke

41
00:01:45,680 --> 00:01:48,799
and a signature together

42
00:01:49,680 --> 00:01:52,159
the key separation principle is best

43
00:01:52,159 --> 00:01:55,520
illustrated by the cartesia product

44
00:01:55,520 --> 00:01:57,600
combined public key scheme

45
00:01:57,600 --> 00:02:00,000
namely signature and public encryption

46
00:02:00,000 --> 00:02:03,680
use independent key pairs

47
00:02:03,759 --> 00:02:06,719
this is also a widely accepted

48
00:02:06,719 --> 00:02:08,479
engineering folklore

49
00:02:08,479 --> 00:02:10,720
using different key pairs for different

50
00:02:10,720 --> 00:02:13,440
cryptographic operations

51
00:02:13,440 --> 00:02:16,720
the advantages of key reuse is that

52
00:02:16,720 --> 00:02:19,760
the joint security is immediate

53
00:02:19,760 --> 00:02:22,720
the construction is off the shelf and it

54
00:02:22,720 --> 00:02:24,400
naturally admits

55
00:02:24,400 --> 00:02:27,120
individual key escrow which is a vital

56
00:02:27,120 --> 00:02:30,160
property that helps to achieve a balance

57
00:02:30,160 --> 00:02:32,800
between users authenticity requirement

58
00:02:32,800 --> 00:02:36,400
and societies auditing requirements

59
00:02:36,400 --> 00:02:39,280
the disadvantage of key reuse is it

60
00:02:39,280 --> 00:02:42,319
doubles key management complexity and a

61
00:02:42,319 --> 00:02:46,239
certificate cost and makes the design of

62
00:02:46,239 --> 00:02:49,360
high level protocol more sophisticated

63
00:02:49,360 --> 00:02:51,760
what highlights is that certificate

64
00:02:51,760 --> 00:02:54,160
costs include but not limited to

65
00:02:54,160 --> 00:02:57,280
registration ensuing storage

66
00:02:57,280 --> 00:02:58,560
transmission

67
00:02:58,560 --> 00:03:00,959
verification and building and recurring

68
00:03:00,959 --> 00:03:03,959
fees

69
00:03:08,159 --> 00:03:11,040
the key reuse principle stipulates that

70
00:03:11,040 --> 00:03:12,800
a significant public encryption

71
00:03:12,800 --> 00:03:14,000
components

72
00:03:14,000 --> 00:03:17,280
use the same key pair we refer to such

73
00:03:17,280 --> 00:03:19,360
scheme as integrity the signature

74
00:03:19,360 --> 00:03:23,280
encryption abbreviated as ise

75
00:03:23,280 --> 00:03:26,959
the advantage of key reuse is it reduce

76
00:03:26,959 --> 00:03:29,280
key measurement complexity certificate

77
00:03:29,280 --> 00:03:32,480
cost and a cryptographic footprint and

78
00:03:32,480 --> 00:03:34,640
simplifies the design of high level

79
00:03:34,640 --> 00:03:36,239
protocol

80
00:03:36,239 --> 00:03:40,239
the disadvantage of key reuse is that

81
00:03:40,239 --> 00:03:43,040
joint security is not immediate and thus

82
00:03:43,040 --> 00:03:45,120
require careful design

83
00:03:45,120 --> 00:03:47,920
and it does not admit individual key sql

84
00:03:47,920 --> 00:03:52,799
and classified protection of secret keys

85
00:03:52,799 --> 00:03:55,519
in the real world ise that adheres to

86
00:03:55,519 --> 00:03:59,200
key reuse principle has been deployed in

87
00:03:59,200 --> 00:04:02,239
emv standard pin identity and equipment

88
00:04:02,239 --> 00:04:06,239
currencies such as these and pgc

89
00:04:06,560 --> 00:04:08,720
as discussed above we are facing a

90
00:04:08,720 --> 00:04:12,080
dilemma between key reuse rings

91
00:04:12,080 --> 00:04:14,159
performance benefit and a key separation

92
00:04:14,159 --> 00:04:17,680
set of supports individual key escrow an

93
00:04:17,680 --> 00:04:20,320
intriguing question is

94
00:04:20,320 --> 00:04:22,560
can we enable individual key sql

95
00:04:22,560 --> 00:04:25,680
mechanism while retaining the merits of

96
00:04:25,680 --> 00:04:26,840
key

97
00:04:26,840 --> 00:04:29,840
reuse to address this question we

98
00:04:29,840 --> 00:04:32,639
propose a new cryptographic primitive

99
00:04:32,639 --> 00:04:35,840
called hierarchy integrated skin chain

100
00:04:35,840 --> 00:04:38,400
encryption

101
00:04:38,400 --> 00:04:41,440
in hise a single public key

102
00:04:41,440 --> 00:04:44,479
serves as verification and encryption

103
00:04:44,479 --> 00:04:45,440
key

104
00:04:45,440 --> 00:04:47,600
while there is a hierarchy between the

105
00:04:47,600 --> 00:04:50,400
signing key and the decryption key

106
00:04:50,400 --> 00:04:53,199
the signing key serves as the master

107
00:04:53,199 --> 00:04:55,440
secret key and can derive the decryption

108
00:04:55,440 --> 00:04:58,000
key used only for decryption in a

109
00:04:58,000 --> 00:05:00,800
one-way manner

110
00:05:01,120 --> 00:05:03,520
s2 security will require strong joint

111
00:05:03,520 --> 00:05:05,039
security

112
00:05:05,039 --> 00:05:07,759
we require the int cca security for the

113
00:05:07,759 --> 00:05:10,400
pk component remains even in the

114
00:05:10,400 --> 00:05:12,800
presence of a signing oracle

115
00:05:12,800 --> 00:05:14,960
while the ef cms security for the

116
00:05:14,960 --> 00:05:17,759
signature component remains even the

117
00:05:17,759 --> 00:05:19,680
adversary got to see the entire

118
00:05:19,680 --> 00:05:22,400
decryption key rather than merely access

119
00:05:22,400 --> 00:05:25,840
to decreasing oracle

120
00:05:26,880 --> 00:05:28,800
hrc

121
00:05:28,800 --> 00:05:32,320
enjoys compact public key size

122
00:05:32,320 --> 00:05:34,560
it helps to reduce key measurement

123
00:05:34,560 --> 00:05:37,440
complexity and simplifies the design

124
00:05:37,440 --> 00:05:40,400
analysis of high-level particles

125
00:05:40,400 --> 00:05:43,199
these merits make his suitable for

126
00:05:43,199 --> 00:05:46,400
scenarios that simultaneously require

127
00:05:46,400 --> 00:05:50,160
privacy authenticity and a key escrow

128
00:05:50,160 --> 00:05:54,320
for example in ziza and pgp

129
00:05:54,320 --> 00:05:56,319
individual user may need to delegate the

130
00:05:56,319 --> 00:05:58,400
decryption capability to a third party

131
00:05:58,400 --> 00:06:01,600
to outer source costly operation

132
00:06:01,600 --> 00:06:04,160
or for auditing purpose

133
00:06:04,160 --> 00:06:07,680
if using ise such degradation we also

134
00:06:07,680 --> 00:06:11,280
can promise the security of signature

135
00:06:11,280 --> 00:06:14,560
but if using hisc the strong journal

136
00:06:14,560 --> 00:06:16,400
security of hic

137
00:06:16,400 --> 00:06:18,560
ensures that one can safely delegate

138
00:06:18,560 --> 00:06:21,199
decreasing capability without breaching

139
00:06:21,199 --> 00:06:24,800
the security of signature

140
00:06:26,000 --> 00:06:28,319
next we present two generic

141
00:06:28,319 --> 00:06:31,919
constructions of hrc

142
00:06:31,919 --> 00:06:35,360
on azure crypto 2011 personality given

143
00:06:35,360 --> 00:06:39,199
elegant isc construction from ibe

144
00:06:39,199 --> 00:06:41,520
their main idea is to apply the north

145
00:06:41,520 --> 00:06:43,319
and the central transform to ib

146
00:06:43,319 --> 00:06:45,120
simultaneously

147
00:06:45,120 --> 00:06:47,680
to achieve joint security

148
00:06:47,680 --> 00:06:50,800
the usb prefix trick to partition the

149
00:06:50,800 --> 00:06:53,759
identity space used to encode a message

150
00:06:53,759 --> 00:06:57,199
and tag however ise from ib does not

151
00:06:57,199 --> 00:06:58,639
lend itself

152
00:06:58,639 --> 00:07:00,400
to ihic

153
00:07:00,400 --> 00:07:02,960
this is because the master secret key

154
00:07:02,960 --> 00:07:04,960
plays the role of both the secret

155
00:07:04,960 --> 00:07:07,039
signing key and the decryption key

156
00:07:07,039 --> 00:07:09,840
and thus does not satisfy strong joint

157
00:07:09,840 --> 00:07:12,479
security

158
00:07:13,199 --> 00:07:16,400
our first hisc construction is is

159
00:07:16,400 --> 00:07:19,120
largely inspired by the formation

160
00:07:19,120 --> 00:07:21,520
ise construction from ibe

161
00:07:21,520 --> 00:07:24,160
the main idea is still to apply the

162
00:07:24,160 --> 00:07:26,639
noise and saturated transform to ibe

163
00:07:26,639 --> 00:07:28,319
the difference is that

164
00:07:28,319 --> 00:07:30,880
we set the master secret key

165
00:07:30,880 --> 00:07:32,639
as the signing key

166
00:07:32,639 --> 00:07:35,680
while using secret keys for identities

167
00:07:35,680 --> 00:07:37,919
in space i1

168
00:07:37,919 --> 00:07:39,840
as decryption key

169
00:07:39,840 --> 00:07:41,440
a technical header is that the

170
00:07:41,440 --> 00:07:45,120
decryption key should be shot thus all

171
00:07:45,120 --> 00:07:47,840
secret keys for identities

172
00:07:47,840 --> 00:07:50,240
in space i1 must have a succinct

173
00:07:50,240 --> 00:07:51,680
representation

174
00:07:51,680 --> 00:07:54,000
to guarantee this

175
00:07:54,000 --> 00:07:56,479
we propose a new type of ib called

176
00:07:56,479 --> 00:07:59,280
constraint called constraint ib

177
00:07:59,280 --> 00:08:02,160
for prefix predicates as the underlying

178
00:08:02,160 --> 00:08:04,560
primitive which in turn can be built

179
00:08:04,560 --> 00:08:05,840
from

180
00:08:05,840 --> 00:08:08,400
binary tree encryption which keeps the

181
00:08:08,400 --> 00:08:13,039
rest technical details here

182
00:08:13,039 --> 00:08:15,039
the above generated construction from

183
00:08:15,039 --> 00:08:18,000
constrained ib enjoys strong joint

184
00:08:18,000 --> 00:08:21,759
security in the standard model

185
00:08:22,000 --> 00:08:23,919
but so far there is no efficient

186
00:08:23,919 --> 00:08:26,960
constructions of constrained ibe

187
00:08:26,960 --> 00:08:29,840
in applications we are int cpa security

188
00:08:29,840 --> 00:08:30,800
service

189
00:08:30,800 --> 00:08:33,679
hawaii is willing to accept ind

190
00:08:33,679 --> 00:08:35,279
cca security

191
00:08:35,279 --> 00:08:37,679
in the rain worker model we have a much

192
00:08:37,679 --> 00:08:40,640
simpler and more efficient constructions

193
00:08:40,640 --> 00:08:44,800
of hrac from any ibe

194
00:08:45,279 --> 00:08:47,760
as to instantiation we can choose the

195
00:08:47,760 --> 00:08:49,120
bonnet franklin

196
00:08:49,120 --> 00:08:51,600
identifies encryption as the starting

197
00:08:51,600 --> 00:08:54,600
point

198
00:08:55,040 --> 00:08:57,839
our second generic construction of hic

199
00:08:57,839 --> 00:09:00,959
is from pke and online zkpok

200
00:09:00,959 --> 00:09:02,880
the goal is to add standing

201
00:09:02,880 --> 00:09:05,920
functionality to pe in a general manner

202
00:09:05,920 --> 00:09:08,640
in this way we can bootstrap a pke in

203
00:09:08,640 --> 00:09:12,000
use to hisc in a seamless manner

204
00:09:12,000 --> 00:09:14,399
the idea is to create a hierarchy key

205
00:09:14,399 --> 00:09:15,920
structure

206
00:09:15,920 --> 00:09:18,240
by one way function as shown by this

207
00:09:18,240 --> 00:09:19,200
figure

208
00:09:19,200 --> 00:09:21,360
we first pick a random bit string as a

209
00:09:21,360 --> 00:09:22,560
sending key

210
00:09:22,560 --> 00:09:25,680
then maps it to the redmi's r via

211
00:09:25,680 --> 00:09:27,680
uniform one-way function

212
00:09:27,680 --> 00:09:30,399
finally runs pk's key generation

213
00:09:30,399 --> 00:09:32,800
algorithm with a red missile to generate

214
00:09:32,800 --> 00:09:37,719
the public key and the decretion key

215
00:09:38,560 --> 00:09:41,040
the encryption component of hrc is

216
00:09:41,040 --> 00:09:43,120
simple which is the same as the

217
00:09:43,120 --> 00:09:45,600
underlying

218
00:09:45,760 --> 00:09:48,080
which is the same as that of the online

219
00:09:48,080 --> 00:09:49,519
public encryption

220
00:09:49,519 --> 00:09:51,200
but we are facing the following

221
00:09:51,200 --> 00:09:53,440
technical hurdle when designing

222
00:09:53,440 --> 00:09:56,320
signature first note that the secret key

223
00:09:56,320 --> 00:09:58,640
is an unstructured bit screen

224
00:09:58,640 --> 00:10:01,519
how to create a sign-in functionality

225
00:10:01,519 --> 00:10:02,640
second

226
00:10:02,640 --> 00:10:05,440
to attach strong jointer security

227
00:10:05,440 --> 00:10:07,600
the signature should remain secure even

228
00:10:07,600 --> 00:10:09,920
in the presence of

229
00:10:09,920 --> 00:10:11,600
decreasing key

230
00:10:11,600 --> 00:10:13,279
our solution

231
00:10:13,279 --> 00:10:15,839
is using general purposes the general

232
00:10:15,839 --> 00:10:18,000
purpose public coin zqpk to prove

233
00:10:18,000 --> 00:10:20,800
knowledge of secret key

234
00:10:20,800 --> 00:10:24,640
with respect to public key

235
00:10:24,640 --> 00:10:27,920
to make the security proof go through

236
00:10:27,920 --> 00:10:30,800
we require relation r key

237
00:10:30,800 --> 00:10:33,519
to be leakage resilient one way given

238
00:10:33,519 --> 00:10:36,320
leakage r and thus certainly the

239
00:10:36,320 --> 00:10:37,839
decryption key

240
00:10:37,839 --> 00:10:41,920
the minimum requirement on g of pku pk's

241
00:10:41,920 --> 00:10:44,399
kitchen algorithm is targeted collision

242
00:10:44,399 --> 00:10:46,800
resistant

243
00:10:46,800 --> 00:10:50,800
now we can attain strong joint security

244
00:10:50,800 --> 00:10:52,320
the security

245
00:10:52,320 --> 00:10:54,880
of signature component is implied by

246
00:10:54,880 --> 00:10:57,120
sigma protocol for liquid resilient wire

247
00:10:57,120 --> 00:10:58,079
function

248
00:10:58,079 --> 00:10:59,519
the security of

249
00:10:59,519 --> 00:11:02,240
public encryption component is based on

250
00:11:02,240 --> 00:11:04,640
the fact that the additional signing

251
00:11:04,640 --> 00:11:08,000
oracle is useless and the uniformity of

252
00:11:08,000 --> 00:11:10,240
f admits security reduction to the

253
00:11:10,240 --> 00:11:13,519
underlying public encryption

254
00:11:13,519 --> 00:11:16,720
as to instantiation we can choose zika

255
00:11:16,720 --> 00:11:19,360
friend personal hash to realize uniform

256
00:11:19,360 --> 00:11:21,360
when we function choose elgama

257
00:11:21,360 --> 00:11:23,600
encryption to realize public

258
00:11:23,600 --> 00:11:26,720
public encryption and choose pattern to

259
00:11:26,720 --> 00:11:29,519
realize the compuk we noticed that above

260
00:11:29,519 --> 00:11:32,720
construction is still less critical for

261
00:11:32,720 --> 00:11:34,640
real-world applications

262
00:11:34,640 --> 00:11:37,680
the bottleneck lies at general purpose

263
00:11:37,680 --> 00:11:40,480
ckpok it left a more efficient

264
00:11:40,480 --> 00:11:42,880
instantiation as an interesting open

265
00:11:42,880 --> 00:11:45,279
problem

266
00:11:45,519 --> 00:11:48,000
that will describe an important

267
00:11:48,000 --> 00:11:51,519
extension of hise with global

268
00:11:51,519 --> 00:11:54,000
escrow property

269
00:11:54,000 --> 00:11:57,519
nowadays largest large-scale

270
00:11:57,519 --> 00:12:00,720
collaborative working apps such as slack

271
00:12:00,720 --> 00:12:02,880
is getting popular encrypted

272
00:12:02,880 --> 00:12:05,040
communication may contain

273
00:12:05,040 --> 00:12:07,680
prime priority information

274
00:12:07,680 --> 00:12:10,800
on one hand employers may have a right

275
00:12:10,800 --> 00:12:12,880
to get access to all private

276
00:12:12,880 --> 00:12:15,680
communication for various reasons a

277
00:12:15,680 --> 00:12:17,279
knife solution is to collect the

278
00:12:17,279 --> 00:12:20,079
individual decreasing key one by one

279
00:12:20,079 --> 00:12:22,320
clearly this is impractical and

280
00:12:22,320 --> 00:12:25,519
inefficient on the other hand employees

281
00:12:25,519 --> 00:12:27,519
need to be assured that even a malicious

282
00:12:27,519 --> 00:12:28,720
employer

283
00:12:28,720 --> 00:12:31,279
cannot slander them by forging

284
00:12:31,279 --> 00:12:34,720
signatures for fabricated communications

285
00:12:34,720 --> 00:12:37,120
refers the expected

286
00:12:37,120 --> 00:12:39,839
global sql property namely there is a

287
00:12:39,839 --> 00:12:43,120
super key that can decrypt any subtext

288
00:12:43,120 --> 00:12:46,480
encrypted on any public key

289
00:12:46,480 --> 00:12:48,880
while signature remains secure even in

290
00:12:48,880 --> 00:12:50,240
the presence of

291
00:12:50,240 --> 00:12:52,560
the super key

292
00:12:52,560 --> 00:12:55,279
to attend globe escrow property

293
00:12:55,279 --> 00:12:58,000
for hic in a general manner we first

294
00:12:58,000 --> 00:13:00,160
attacked the tour through

295
00:13:00,160 --> 00:13:02,880
to revisit the globe escrow public king

296
00:13:02,880 --> 00:13:05,880
encryption

297
00:13:06,160 --> 00:13:08,639
in global escrow public key encryption

298
00:13:08,639 --> 00:13:10,399
ascor engine

299
00:13:10,399 --> 00:13:11,760
holds

300
00:13:11,760 --> 00:13:13,839
a global escrow decryption key that can

301
00:13:13,839 --> 00:13:17,120
decrypt subtext encrypted and any public

302
00:13:17,120 --> 00:13:19,680
key global escrow public encryption is

303
00:13:19,680 --> 00:13:22,079
long overdue for formal definition and

304
00:13:22,079 --> 00:13:23,760
generic construction

305
00:13:23,760 --> 00:13:26,880
the only practical scheme

306
00:13:26,880 --> 00:13:30,000
is the sql gamma pk proposed by bonnet

307
00:13:30,000 --> 00:13:34,440
and franklin from bilinear maps

308
00:13:35,680 --> 00:13:37,600
here is the formal definition of global

309
00:13:37,600 --> 00:13:39,760
escrow public encryption that is

310
00:13:39,760 --> 00:13:41,760
basically the same as the ordinary

311
00:13:41,760 --> 00:13:42,880
public

312
00:13:42,880 --> 00:13:45,760
encryption except that there is an

313
00:13:45,760 --> 00:13:49,440
escrow agent to generate a key pair in

314
00:13:49,440 --> 00:13:50,480
which

315
00:13:50,480 --> 00:13:53,519
the sql public key is a part of a global

316
00:13:53,519 --> 00:13:54,320
par

317
00:13:54,320 --> 00:13:56,320
global public permits

318
00:13:56,320 --> 00:13:58,639
the escort decreasing key is the super

319
00:13:58,639 --> 00:13:59,519
key

320
00:13:59,519 --> 00:14:00,839
the correctness

321
00:14:00,839 --> 00:14:04,320
stipulates honestly generated subtext

322
00:14:04,320 --> 00:14:05,920
decrypting to

323
00:14:05,920 --> 00:14:09,440
the same plaintext

324
00:14:09,440 --> 00:14:12,000
on the decryption key of sql center and

325
00:14:12,000 --> 00:14:14,880
the real receiver we also require

326
00:14:14,880 --> 00:14:17,920
consistency which is stipulates no pvt

327
00:14:17,920 --> 00:14:19,920
adversaries can generate and uniform the

328
00:14:19,920 --> 00:14:21,920
soft texture decreasing to different

329
00:14:21,920 --> 00:14:23,040
plain text

330
00:14:23,040 --> 00:14:25,680
on the edk and skr

331
00:14:25,680 --> 00:14:27,839
one may think the construction of global

332
00:14:27,839 --> 00:14:30,320
escrow public encryption is trivial

333
00:14:30,320 --> 00:14:31,360
however

334
00:14:31,360 --> 00:14:34,639
several attempts fails for example ib

335
00:14:34,639 --> 00:14:37,839
does not directly land itself to global

336
00:14:37,839 --> 00:14:41,120
escrow pke since in public encryption

337
00:14:41,120 --> 00:14:42,800
users must be able to generate the

338
00:14:42,800 --> 00:14:44,720
keypairs themselves

339
00:14:44,720 --> 00:14:46,959
broadcast encryption also fails

340
00:14:46,959 --> 00:14:49,519
since in global scope pce

341
00:14:49,519 --> 00:14:51,760
standards could be malicious especially

342
00:14:51,760 --> 00:14:54,399
when it has incentive to invade

343
00:14:54,399 --> 00:14:57,040
oversight

344
00:14:57,600 --> 00:15:00,399
next we present two generic construction

345
00:15:00,399 --> 00:15:03,040
of global sql pke

346
00:15:03,040 --> 00:15:05,199
our first construction is from any

347
00:15:05,199 --> 00:15:07,680
public encryption on izk

348
00:15:07,680 --> 00:15:09,600
the ethical center simply generated a

349
00:15:09,600 --> 00:15:11,279
key pair himself

350
00:15:11,279 --> 00:15:12,720
to encrypt

351
00:15:12,720 --> 00:15:16,240
a plaintext name the sender encrypted

352
00:15:16,240 --> 00:15:18,800
under receiver's public key and esco

353
00:15:18,800 --> 00:15:21,120
sentence public key respectively

354
00:15:21,120 --> 00:15:23,920
then appended on isaac proved to prove

355
00:15:23,920 --> 00:15:27,040
that the two subtexts indeed encrypted

356
00:15:27,040 --> 00:15:28,880
the same plaintext the above

357
00:15:28,880 --> 00:15:30,480
construction is exactly a new

358
00:15:30,480 --> 00:15:32,480
application of the neural

359
00:15:32,480 --> 00:15:35,279
transform beyond cc security it gives a

360
00:15:35,279 --> 00:15:37,759
generic approach to compile

361
00:15:37,759 --> 00:15:38,720
any

362
00:15:38,720 --> 00:15:41,680
public encryption to global esco

363
00:15:41,680 --> 00:15:44,638
public encryption

364
00:15:45,360 --> 00:15:47,279
when it comes to instantiation we can

365
00:15:47,279 --> 00:15:50,079
realize speaking with the organization

366
00:15:50,079 --> 00:15:52,800
in easy groups and realize my the key

367
00:15:52,800 --> 00:15:53,680
with

368
00:15:53,680 --> 00:15:54,480
proof

369
00:15:54,480 --> 00:15:56,000
sigma proof

370
00:15:56,000 --> 00:15:58,720
particularly when pke satisfies the

371
00:15:58,720 --> 00:16:01,440
randomized fusion property we can safely

372
00:16:01,440 --> 00:16:04,160
reuse red mist and then

373
00:16:04,160 --> 00:16:06,079
apply twisted

374
00:16:06,079 --> 00:16:09,560
neuron transfer

375
00:16:10,160 --> 00:16:12,959
our second generic construction is from

376
00:16:12,959 --> 00:16:16,880
three party an ike namely non-intentive

377
00:16:16,880 --> 00:16:18,639
key exchange

378
00:16:18,639 --> 00:16:22,360
the esco center

379
00:16:23,759 --> 00:16:25,360
the escrow center

380
00:16:25,360 --> 00:16:27,920
simply generate a key pair himself to

381
00:16:27,920 --> 00:16:30,480
send a plaintext to receiver with pk

382
00:16:30,480 --> 00:16:31,519
beta

383
00:16:31,519 --> 00:16:34,720
the sender runs three party mike in his

384
00:16:34,720 --> 00:16:36,959
head namely first the generator

385
00:16:36,959 --> 00:16:40,720
temporary keeper pike alpha sk alpha

386
00:16:40,720 --> 00:16:43,040
then computes the shadow key among pk

387
00:16:43,040 --> 00:16:46,079
alpha pk beta pk gamma and finally

388
00:16:46,079 --> 00:16:49,360
encrypt the plaintext with the shell key

389
00:16:49,360 --> 00:16:52,079
upon receiving the subtext

390
00:16:52,079 --> 00:16:54,320
the receiver first recovers the shared

391
00:16:54,320 --> 00:16:57,440
key with his secret key

392
00:16:57,440 --> 00:17:01,199
sk beta then decrypter c with the shared

393
00:17:01,199 --> 00:17:03,279
key

394
00:17:03,279 --> 00:17:05,599
the semantic security of global escrow

395
00:17:05,599 --> 00:17:09,039
pke is implied by the security of ike

396
00:17:09,039 --> 00:17:11,760
the consistency is guaranteed if the

397
00:17:11,760 --> 00:17:13,599
public key space

398
00:17:13,599 --> 00:17:16,319
of the underlying ike is efficiently

399
00:17:16,319 --> 00:17:19,319
recognizable

400
00:17:19,839 --> 00:17:21,679
faithfully realized above generic

401
00:17:21,679 --> 00:17:23,679
construction with rook's three part and

402
00:17:23,679 --> 00:17:25,599
ike will recover

403
00:17:25,599 --> 00:17:27,599
the only non-priority scheme bernie

404
00:17:27,599 --> 00:17:29,760
franklin esco ergama

405
00:17:29,760 --> 00:17:32,720
this is nice because we can explain it

406
00:17:32,720 --> 00:17:35,840
in theory now however this scheme is

407
00:17:35,840 --> 00:17:37,919
rather efficient because symmetry

408
00:17:37,919 --> 00:17:41,120
pairing is too slow

409
00:17:42,160 --> 00:17:44,799
the original rx protocol inherently

410
00:17:44,799 --> 00:17:48,160
relies on symmetry pairing thus a second

411
00:17:48,160 --> 00:17:49,440
attempt

412
00:17:49,440 --> 00:17:52,559
to improve efficiency is adapting looks

413
00:17:52,559 --> 00:17:55,120
practical with asymmetrical pairing

414
00:17:55,120 --> 00:17:58,240
however in the resulting global esco

415
00:17:58,240 --> 00:18:00,799
public encryption key and the subtext

416
00:18:00,799 --> 00:18:03,679
size get doubled and the degreasion is

417
00:18:03,679 --> 00:18:06,720
very expensive

418
00:18:06,880 --> 00:18:09,120
our insight is that

419
00:18:09,120 --> 00:18:12,000
a relaxed version of ike surface for the

420
00:18:12,000 --> 00:18:14,640
construction of global pke

421
00:18:14,640 --> 00:18:18,480
that is the key pairs of iku could be

422
00:18:18,480 --> 00:18:20,240
of different types

423
00:18:20,240 --> 00:18:22,480
and the shared key could be agreed from

424
00:18:22,480 --> 00:18:25,600
different types keepers in light of this

425
00:18:25,600 --> 00:18:28,080
observation we obtain an efficient

426
00:18:28,080 --> 00:18:30,080
global scope piggy from asymmetry

427
00:18:30,080 --> 00:18:32,559
pairing

428
00:18:33,760 --> 00:18:36,400
this is a technology roadmap of global

429
00:18:36,400 --> 00:18:39,120
escrow hisc where can one can freely

430
00:18:39,120 --> 00:18:41,679
take any paths from lyft node to the

431
00:18:41,679 --> 00:18:44,320
root node

432
00:18:45,039 --> 00:18:47,200
combine previous result

433
00:18:47,200 --> 00:18:50,240
we presented two instantiations

434
00:18:50,240 --> 00:18:52,960
by applying twisted and ion transform to

435
00:18:52,960 --> 00:18:56,400
hise skin one we obtain global escrow

436
00:18:56,400 --> 00:18:58,240
high scheme 1

437
00:18:58,240 --> 00:19:00,960
by combining position hash and its

438
00:19:00,960 --> 00:19:04,559
pattern with global esco pk scheme 2 we

439
00:19:04,559 --> 00:19:06,960
obtain global sql hr

440
00:19:06,960 --> 00:19:10,919
his scheme 2.

441
00:19:13,200 --> 00:19:14,240
at last

442
00:19:14,240 --> 00:19:16,720
we make a comparison between combine the

443
00:19:16,720 --> 00:19:20,000
public key scheme ic and global

444
00:19:20,000 --> 00:19:21,600
sql hrc

445
00:19:21,600 --> 00:19:23,919
from the table we can see that global

446
00:19:23,919 --> 00:19:27,280
sql hrc not only enjoys the benefit of

447
00:19:27,280 --> 00:19:29,760
key reuse but also supports richer

448
00:19:29,760 --> 00:19:31,039
functionality

449
00:19:31,039 --> 00:19:35,520
such as individual and global key escrow

450
00:19:35,520 --> 00:19:38,080
we implement our concrete schemes in c

451
00:19:38,080 --> 00:19:39,360
plus plus

452
00:19:39,360 --> 00:19:42,480
the experimental results demonstrate our

453
00:19:42,480 --> 00:19:43,600
global

454
00:19:43,600 --> 00:19:46,240
escrow his scheme

455
00:19:46,240 --> 00:19:48,960
have comparable efficiency with the most

456
00:19:48,960 --> 00:19:51,840
efficient combined public key scheme and

457
00:19:51,840 --> 00:19:53,200
enjoy

458
00:19:53,200 --> 00:19:56,640
compact key size as well

459
00:19:56,640 --> 00:19:59,039
as the product we also obtain the most

460
00:19:59,039 --> 00:20:01,520
efficient global escrow pke scheme to

461
00:20:01,520 --> 00:20:04,720
date which beats the best previous known

462
00:20:04,720 --> 00:20:10,080
scheme with 12 to 13 times speed up

463
00:20:11,679 --> 00:20:14,320
let's summarize our talk in this work we

464
00:20:14,320 --> 00:20:16,799
put forward a new notion called hisc

465
00:20:16,799 --> 00:20:18,960
with formal definition and the generic

466
00:20:18,960 --> 00:20:22,159
constructions our notion hates

467
00:20:22,159 --> 00:20:25,520
a sweet balance and thus reconcile

468
00:20:25,520 --> 00:20:27,520
the apparent conflict between key

469
00:20:27,520 --> 00:20:30,320
separation and key reuse resolving open

470
00:20:30,320 --> 00:20:34,159
problem left open in euro crypto 2001 it

471
00:20:34,159 --> 00:20:36,720
can be used as the chopping replacement

472
00:20:36,720 --> 00:20:39,520
of pke plus signature in scenarios that

473
00:20:39,520 --> 00:20:42,400
require authenticity confidentiality

474
00:20:42,400 --> 00:20:45,440
and auditability simultaneously and both

475
00:20:45,440 --> 00:20:46,640
users

476
00:20:46,640 --> 00:20:49,120
and authorities have incentives to

477
00:20:49,120 --> 00:20:50,240
deploy

478
00:20:50,240 --> 00:20:53,200
we also extensively revisit global esco

479
00:20:53,200 --> 00:20:56,159
public encryption our result

480
00:20:56,159 --> 00:20:58,240
indicates a new application of the

481
00:20:58,240 --> 00:20:59,520
celebrate

482
00:20:59,520 --> 00:21:02,960
neuron paradigm and also establish

483
00:21:02,960 --> 00:21:05,200
another connection

484
00:21:05,200 --> 00:21:08,720
from three-part ike

485
00:21:09,520 --> 00:21:11,760
that's the end of our talk

486
00:21:11,760 --> 00:21:16,360
thanks for your attention any questions

