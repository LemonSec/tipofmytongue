1
00:00:00,560 --> 00:00:02,159
oh

2
00:00:02,159 --> 00:00:03,760
then please go ahead and have a good

3
00:00:03,760 --> 00:00:06,080
session

4
00:00:06,399 --> 00:00:07,440
thanks kate

5
00:00:07,440 --> 00:00:10,400
yeah okay so uh welcome to this uh

6
00:00:10,400 --> 00:00:12,960
session on symmetric key constructions

7
00:00:12,960 --> 00:00:15,839
and uh we have seven talks here

8
00:00:15,839 --> 00:00:18,320
and the first talk will be on loopy dark

9
00:00:18,320 --> 00:00:19,840
of backwards with

10
00:00:19,840 --> 00:00:22,720
more users and more security

11
00:00:22,720 --> 00:00:25,039
uh this by srimantu bhattacharya and mr

12
00:00:25,039 --> 00:00:29,800
nandi and mizul will give the talk

13
00:00:30,720 --> 00:00:32,238
uh thank you

14
00:00:32,238 --> 00:00:33,520
yeah

15
00:00:33,520 --> 00:00:35,280
so uh

16
00:00:35,280 --> 00:00:37,440
my talk is about the lubrica backward

17
00:00:37,440 --> 00:00:39,680
with more users and more security so

18
00:00:39,680 --> 00:00:42,480
this is a joint work with shimanto uh

19
00:00:42,480 --> 00:00:45,120
so this

20
00:00:45,120 --> 00:00:47,120
uh this is about the pseudonym function

21
00:00:47,120 --> 00:00:49,200
so you know that pseudo random function

22
00:00:49,200 --> 00:00:51,120
the prf is important cryptographic

23
00:00:51,120 --> 00:00:52,879
primitive which has been used in

24
00:00:52,879 --> 00:00:54,399
encryption authentication but the

25
00:00:54,399 --> 00:00:56,480
question is how do we get them

26
00:00:56,480 --> 00:00:58,559
okay so one natural choice is a good

27
00:00:58,559 --> 00:01:00,160
block cipher because there are pseudonym

28
00:01:00,160 --> 00:01:02,559
permutations that's what we model

29
00:01:02,559 --> 00:01:05,360
but the can we can you use them as a prf

30
00:01:05,360 --> 00:01:07,840
yes we know like a pippi are switching

31
00:01:07,840 --> 00:01:10,400
lemma using that up to birthday bound we

32
00:01:10,400 --> 00:01:14,000
can use the prp as a prf okay

33
00:01:14,000 --> 00:01:14,720
so

34
00:01:14,720 --> 00:01:16,880
that's okay but just just if you want to

35
00:01:16,880 --> 00:01:18,720
have a higher security can you go beyond

36
00:01:18,720 --> 00:01:21,280
birthday bound so then uh the question

37
00:01:21,280 --> 00:01:23,759
becomes little bit nontrivial and then

38
00:01:23,759 --> 00:01:24,840
there are lots

39
00:01:24,840 --> 00:01:29,040
of constructions uh came up uh which

40
00:01:29,040 --> 00:01:31,520
which can be promised to be a good uh

41
00:01:31,520 --> 00:01:34,000
beyond by the bound prf construction so

42
00:01:34,000 --> 00:01:35,759
that's what the motivation uh of the

43
00:01:35,759 --> 00:01:38,159
ruby aka backward which was first uh

44
00:01:38,159 --> 00:01:41,040
considered the belarus in 1998

45
00:01:41,040 --> 00:01:44,399
and the question is designing pr prf uh

46
00:01:44,399 --> 00:01:46,960
from uh prp because rubidakov is like

47
00:01:46,960 --> 00:01:49,119
designing prp from prf so it's like

48
00:01:49,119 --> 00:01:52,720
that's why you call it backward loop

49
00:01:52,720 --> 00:01:55,360
okay so uh we have a random permutation

50
00:01:55,360 --> 00:01:57,119
that's a basic building block and we

51
00:01:57,119 --> 00:01:59,200
want to design a random functions from a

52
00:01:59,200 --> 00:02:00,640
random permutation or pseudo-random

53
00:02:00,640 --> 00:02:02,719
function p r from a random formulation

54
00:02:02,719 --> 00:02:04,799
so one natural choice you just do xor

55
00:02:04,799 --> 00:02:06,320
and that's that's that is what we will

56
00:02:06,320 --> 00:02:08,959
study here in this talk so you just

57
00:02:08,959 --> 00:02:12,720
extort two random permutations uh uh the

58
00:02:12,720 --> 00:02:14,160
output of two random permission that

59
00:02:14,160 --> 00:02:16,239
actually behaves good random functions

60
00:02:16,239 --> 00:02:19,040
so that has been analyzed uh by belarus

61
00:02:19,040 --> 00:02:21,760
impact pl in 1999 and then later on in

62
00:02:21,760 --> 00:02:24,160
several papers uh particularly pathara

63
00:02:24,160 --> 00:02:28,160
in 2010 and 2008 and diapers recently

64
00:02:28,160 --> 00:02:30,160
actually have a proof by chi square

65
00:02:30,160 --> 00:02:31,440
method which is recently introduced

66
00:02:31,440 --> 00:02:33,440
method and it seems to be very powerful

67
00:02:33,440 --> 00:02:35,040
technique uh

68
00:02:35,040 --> 00:02:38,160
using that uh they have shown that xor

69
00:02:38,160 --> 00:02:40,720
permutation uh is secure up to two point

70
00:02:40,720 --> 00:02:42,000
n queries

71
00:02:42,000 --> 00:02:44,000
now the question how can you generalize

72
00:02:44,000 --> 00:02:45,680
so you say yes this natural generation

73
00:02:45,680 --> 00:02:47,599
is if we have sum of three permutation

74
00:02:47,599 --> 00:02:49,200
instead of two permutations

75
00:02:49,200 --> 00:02:51,440
and and and that that can be done so

76
00:02:51,440 --> 00:02:53,440
what what you have to ensure that if you

77
00:02:53,440 --> 00:02:54,959
have a more permutation the input should

78
00:02:54,959 --> 00:02:56,400
be different so you need some domain

79
00:02:56,400 --> 00:02:58,480
separations and that domains because of

80
00:02:58,480 --> 00:02:59,599
the domain separation you have to

81
00:02:59,599 --> 00:03:02,159
sacrifice few bits

82
00:03:02,159 --> 00:03:04,720
okay so that what uh

83
00:03:04,720 --> 00:03:07,360
the result we know until now before this

84
00:03:07,360 --> 00:03:10,000
is our paper is like by looks or many

85
00:03:10,000 --> 00:03:12,000
panel they have shown that the security

86
00:03:12,000 --> 00:03:15,120
is same as the xor part xor p which is a

87
00:03:15,120 --> 00:03:16,800
sum of two permutations that means you

88
00:03:16,800 --> 00:03:18,800
can get security up to order for n

89
00:03:18,800 --> 00:03:19,840
queries

90
00:03:19,840 --> 00:03:22,080
so can you get better so that's that is

91
00:03:22,080 --> 00:03:23,760
our motivation of the paperwork and

92
00:03:23,760 --> 00:03:25,200
moreover we can actually have a

93
00:03:25,200 --> 00:03:27,120
something like same type of design where

94
00:03:27,120 --> 00:03:29,360
you can reuse uh uh

95
00:03:29,360 --> 00:03:31,360
one permission output so you can see

96
00:03:31,360 --> 00:03:33,360
like here you have a random permission

97
00:03:33,360 --> 00:03:35,920
x0 which is used once again to generate

98
00:03:35,920 --> 00:03:38,720
the another n-bit output so in total you

99
00:03:38,720 --> 00:03:40,400
actually need five block cipher calls

100
00:03:40,400 --> 00:03:43,519
whereas if you use the xor p three two

101
00:03:43,519 --> 00:03:44,959
times then you need the six call so that

102
00:03:44,959 --> 00:03:47,040
saved one call and and i believe that

103
00:03:47,040 --> 00:03:48,640
this can be further generalized for

104
00:03:48,640 --> 00:03:51,040
general k but the analysis will be much

105
00:03:51,040 --> 00:03:53,280
harder to do that uh even for k equal to

106
00:03:53,280 --> 00:03:54,799
three this analysis is

107
00:03:54,799 --> 00:03:56,159
much complex

108
00:03:56,159 --> 00:03:58,239
okay so the application is like a c inc

109
00:03:58,239 --> 00:04:00,640
we already have done for k equal to two

110
00:04:00,640 --> 00:04:03,040
the p map plus z max so there are many

111
00:04:03,040 --> 00:04:05,120
designs where you can consider this uh

112
00:04:05,120 --> 00:04:08,799
type of three xor xor p can be used

113
00:04:08,799 --> 00:04:10,640
okay so the security here you consider

114
00:04:10,640 --> 00:04:12,560
the multi-user security very briefly

115
00:04:12,560 --> 00:04:14,239
speaking the adversary is interacting

116
00:04:14,239 --> 00:04:17,600
with uh uh the xor p uh

117
00:04:17,600 --> 00:04:19,040
uh and the

118
00:04:19,040 --> 00:04:20,560
that's the construction and the in the

119
00:04:20,560 --> 00:04:22,560
ideal level you is the random functions

120
00:04:22,560 --> 00:04:25,199
so what we can do in addition to the to

121
00:04:25,199 --> 00:04:28,560
the query x it can also query i that is

122
00:04:28,560 --> 00:04:30,240
a user number like every

123
00:04:30,240 --> 00:04:32,080
user it should have a kind of

124
00:04:32,080 --> 00:04:34,000
independent random functions so in the

125
00:04:34,000 --> 00:04:35,520
other side we have a random permutation

126
00:04:35,520 --> 00:04:37,360
for every user so the i represents the

127
00:04:37,360 --> 00:04:38,800
user number

128
00:04:38,800 --> 00:04:39,919
okay so

129
00:04:39,919 --> 00:04:41,520
and then adversary at the end tries to

130
00:04:41,520 --> 00:04:43,280
distinguish so in particular in the real

131
00:04:43,280 --> 00:04:44,240
world we have a sum of three

132
00:04:44,240 --> 00:04:46,479
permutations right and the advantage is

133
00:04:46,479 --> 00:04:48,080
usually defined in the same in the

134
00:04:48,080 --> 00:04:50,080
classical way like

135
00:04:50,080 --> 00:04:52,800
what adversary returns one uh in case of

136
00:04:52,800 --> 00:04:54,160
the real world and what is the

137
00:04:54,160 --> 00:04:55,600
probability that in case of the ideal

138
00:04:55,600 --> 00:04:57,840
one so this is a multi-user priori

139
00:04:57,840 --> 00:04:59,440
advantage it's a generation of the

140
00:04:59,440 --> 00:05:01,759
single user prf advantage so there is

141
00:05:01,759 --> 00:05:03,520
one concern in the multi-user purified

142
00:05:03,520 --> 00:05:05,360
vendor so one can actually prove from

143
00:05:05,360 --> 00:05:06,960
single user to multi-user by using

144
00:05:06,960 --> 00:05:09,120
standard hybrid reduction so the key of

145
00:05:09,120 --> 00:05:11,919
a k uh say we have several users and uh

146
00:05:11,919 --> 00:05:13,840
adversary interacting with one of them

147
00:05:13,840 --> 00:05:16,160
so it now there are two parameters like

148
00:05:16,160 --> 00:05:18,560
we have you many users and

149
00:05:18,560 --> 00:05:20,639
the adversary is making queries to each

150
00:05:20,639 --> 00:05:23,120
users and then you can one can buy one

151
00:05:23,120 --> 00:05:24,800
can so by using hybrid reduction that

152
00:05:24,800 --> 00:05:28,720
the boundaries of the form q q max

153
00:05:28,720 --> 00:05:30,639
so you have to multiply by sorry u

154
00:05:30,639 --> 00:05:32,880
whatever advantage you get uh in general

155
00:05:32,880 --> 00:05:34,400
if you get the advantage if a single

156
00:05:34,400 --> 00:05:36,720
user is q max over two for n then it

157
00:05:36,720 --> 00:05:40,320
will be u2 max over 2.8 so that means uh

158
00:05:40,320 --> 00:05:41,199
for

159
00:05:41,199 --> 00:05:43,600
known input security that u and q max

160
00:05:43,600 --> 00:05:45,440
can go up to birthday bound if you

161
00:05:45,440 --> 00:05:47,840
consider multi-user setup and that is

162
00:05:47,840 --> 00:05:50,080
not good so we have to make it better so

163
00:05:50,080 --> 00:05:52,720
our contribution of uh uh is that we can

164
00:05:52,720 --> 00:05:54,400
actually go higher so if the number of

165
00:05:54,400 --> 00:05:56,479
user can go as high as

166
00:05:56,479 --> 00:05:58,960
one in the number of queries can go as

167
00:05:58,960 --> 00:06:00,800
high as two point or order of two point

168
00:06:00,800 --> 00:06:03,120
n so that's like a sub uh a substantial

169
00:06:03,120 --> 00:06:05,440
improvement over the existing results

170
00:06:05,440 --> 00:06:08,000
okay so ah single user

171
00:06:08,000 --> 00:06:10,000
even if you look at that what what it

172
00:06:10,000 --> 00:06:12,000
means for even for single users okay if

173
00:06:12,000 --> 00:06:13,840
the u is one in that case also the

174
00:06:13,840 --> 00:06:16,800
advantage is becomes negligible even you

175
00:06:16,800 --> 00:06:18,960
query to quote n many uh order of two

176
00:06:18,960 --> 00:06:20,400
point many queries

177
00:06:20,400 --> 00:06:21,919
so in general what happens for sum of

178
00:06:21,919 --> 00:06:23,680
two permutations the advantage becomes

179
00:06:23,680 --> 00:06:25,759
close to half when you have order of two

180
00:06:25,759 --> 00:06:27,759
point queries but it is not happening

181
00:06:27,759 --> 00:06:29,039
here like if you have a sum of three

182
00:06:29,039 --> 00:06:31,280
permutation that one is still negligible

183
00:06:31,280 --> 00:06:33,520
even if you make us close to order of

184
00:06:33,520 --> 00:06:37,360
two points okay so uh very uh uh and

185
00:06:37,360 --> 00:06:38,639
this is my last slide so where we

186
00:06:38,639 --> 00:06:41,440
actually uh uh here i am showing the

187
00:06:41,440 --> 00:06:43,759
exact expression of the advantage uh so

188
00:06:43,759 --> 00:06:46,000
that you can see like why it is so that

189
00:06:46,000 --> 00:06:47,680
you can see the expression is like u q

190
00:06:47,680 --> 00:06:50,000
max square root of two power n so as

191
00:06:50,000 --> 00:06:52,319
long as q max is order of two power n

192
00:06:52,319 --> 00:06:54,319
that this and the q is order up to power

193
00:06:54,319 --> 00:06:56,560
n you can see that bound

194
00:06:56,560 --> 00:06:58,960
shows uh the advantage is order of one

195
00:06:58,960 --> 00:07:00,960
so that is what uh the first result and

196
00:07:00,960 --> 00:07:03,039
another result is similarly for the xor

197
00:07:03,039 --> 00:07:05,280
p3 which is a typical involved where you

198
00:07:05,280 --> 00:07:08,000
have a two in bit output from by making

199
00:07:08,000 --> 00:07:10,240
five calls and you can have a similar uh

200
00:07:10,240 --> 00:07:11,759
results

201
00:07:11,759 --> 00:07:12,639
okay

202
00:07:12,639 --> 00:07:14,240
and the applications like counter mode

203
00:07:14,240 --> 00:07:16,880
encryption using xrp 3 and there are

204
00:07:16,880 --> 00:07:18,720
many other applications you can consider

205
00:07:18,720 --> 00:07:20,639
in particular multi-user setup you can

206
00:07:20,639 --> 00:07:22,560
consider this type of construction so

207
00:07:22,560 --> 00:07:25,360
finally i conclude so what we have

208
00:07:25,360 --> 00:07:27,919
we have considered multi-user security

209
00:07:27,919 --> 00:07:29,599
even even for the single is a circuit we

210
00:07:29,599 --> 00:07:31,120
actually have a better result compared

211
00:07:31,120 --> 00:07:33,120
to the x uh

212
00:07:33,120 --> 00:07:36,240
known results and uh and that applies

213
00:07:36,240 --> 00:07:38,240
similarly uh uh conclusion is applied

214
00:07:38,240 --> 00:07:41,039
for the variant of construction xor p3

215
00:07:41,039 --> 00:07:42,880
uh x or p prime three where you have a

216
00:07:42,880 --> 00:07:45,360
similar results and and that's all thank

217
00:07:45,360 --> 00:07:47,440
you

218
00:07:47,440 --> 00:07:51,680
thank you uh middle for the talk uh

219
00:07:51,680 --> 00:07:55,199
i don't see any questions on zulip or

220
00:07:55,199 --> 00:07:57,599
the chat here so

221
00:07:57,599 --> 00:07:59,360
does anyone have any question please

222
00:07:59,360 --> 00:08:02,639
feel free to unmute yourself and

223
00:08:02,639 --> 00:08:05,639
ask

224
00:08:12,000 --> 00:08:14,879
okay if not then let's thank the speaker

225
00:08:14,879 --> 00:08:16,879
and uh

226
00:08:16,879 --> 00:08:20,639
okay thank you for the talk and

227
00:08:21,280 --> 00:08:22,560
okay

228
00:08:22,560 --> 00:08:25,680
let's move to the second talk

229
00:08:25,680 --> 00:08:27,919
entitled the double block lens hash

230
00:08:27,919 --> 00:08:31,120
function for minimum memory size

231
00:08:31,120 --> 00:08:32,159
so

232
00:08:32,159 --> 00:08:34,240
uh you suggest will give the

233
00:08:34,240 --> 00:08:35,679
presentation

234
00:08:35,679 --> 00:08:37,519
so okay

235
00:08:37,519 --> 00:08:38,958
thank you very much

236
00:08:38,958 --> 00:08:40,799
can see my slides

237
00:08:40,799 --> 00:08:41,760
yes

238
00:08:41,760 --> 00:08:43,039
thank you

239
00:08:43,039 --> 00:08:46,560
okay i'm going to talk about

240
00:08:46,880 --> 00:08:48,880
this title uh

241
00:08:48,880 --> 00:08:52,480
this is going to work with you subscribe

242
00:08:52,800 --> 00:08:55,600
so lightweight cryptography is a hot

243
00:08:55,600 --> 00:08:58,399
topic or cryptography for more than a

244
00:08:58,399 --> 00:09:01,440
decade and writeweight includes several

245
00:09:01,440 --> 00:09:03,519
meanings memory size power consumption

246
00:09:03,519 --> 00:09:05,360
latency and so on

247
00:09:05,360 --> 00:09:07,519
memory size determines about how the

248
00:09:07,519 --> 00:09:10,240
cost in lightweight implementation and

249
00:09:10,240 --> 00:09:13,200
minimizing the memory size is the topic

250
00:09:13,200 --> 00:09:15,040
of this stock

251
00:09:15,040 --> 00:09:16,399
now nist

252
00:09:16,399 --> 00:09:18,720
is holding a lightweight critical

253
00:09:18,720 --> 00:09:20,480
crystalline standardization process for

254
00:09:20,480 --> 00:09:22,320
authenticated encryption and hash

255
00:09:22,320 --> 00:09:23,519
function

256
00:09:23,519 --> 00:09:25,040
and recently a

257
00:09:25,040 --> 00:09:26,320
[Music]

258
00:09:26,320 --> 00:09:29,120
10 finalists were selected and five out

259
00:09:29,120 --> 00:09:32,480
of the finalists support hash function

260
00:09:32,480 --> 00:09:34,959
and need selected different types of

261
00:09:34,959 --> 00:09:38,959
primitive due to the design diversity

262
00:09:38,959 --> 00:09:40,880
and for hash function

263
00:09:40,880 --> 00:09:43,279
four finalists support our publication

264
00:09:43,279 --> 00:09:46,080
based scheme and the other is a

265
00:09:46,080 --> 00:09:48,000
rook cipher or zika block cipher-based

266
00:09:48,000 --> 00:09:49,440
scheme so

267
00:09:49,440 --> 00:09:51,440
this talk focuses on block cipher-based

268
00:09:51,440 --> 00:09:52,560
design

269
00:09:52,560 --> 00:09:55,440
and regarding the block cipher based

270
00:09:55,440 --> 00:09:58,640
uh hashing design block sizes are too

271
00:09:58,640 --> 00:10:01,600
short for hash functions so block sizes

272
00:10:01,600 --> 00:10:02,959
are mainly

273
00:10:02,959 --> 00:10:06,880
less than or equal to 128 bit but

274
00:10:06,880 --> 00:10:09,200
actually the hash size is greater than

275
00:10:09,200 --> 00:10:11,519
or equal to 256 bits

276
00:10:11,519 --> 00:10:12,399
so

277
00:10:12,399 --> 00:10:14,480
that program's design

278
00:10:14,480 --> 00:10:16,160
solve this problem

279
00:10:16,160 --> 00:10:20,480
the hash size is the block size

280
00:10:21,120 --> 00:10:23,920
so in double glance schemes uh block

281
00:10:23,920 --> 00:10:26,720
cipher is called twice so like this

282
00:10:26,720 --> 00:10:29,040
figure uh this is a helices double

283
00:10:29,040 --> 00:10:30,160
glance

284
00:10:30,160 --> 00:10:31,440
scheme

285
00:10:31,440 --> 00:10:34,800
so in this scheme block cipher is called

286
00:10:34,800 --> 00:10:38,640
upper and robot so we obtain the double

287
00:10:38,640 --> 00:10:41,040
block length output

288
00:10:41,040 --> 00:10:43,680
and so for seriously the program scheme

289
00:10:43,680 --> 00:10:45,279
has been proposed

290
00:10:45,279 --> 00:10:47,600
for example these schemes and this

291
00:10:47,600 --> 00:10:49,839
scheme that achieves a coordinate sense

292
00:10:49,839 --> 00:10:53,279
security up to 2 to n carry complexity

293
00:10:53,279 --> 00:10:55,600
and is a block size so this scheme

294
00:10:55,600 --> 00:10:56,560
achieves

295
00:10:56,560 --> 00:10:57,920
optimal quantum

296
00:10:57,920 --> 00:10:59,360
security

297
00:10:59,360 --> 00:11:02,000
and these schemes are fixed in ranks

298
00:11:02,000 --> 00:11:04,640
primitives so combining with the domain

299
00:11:04,640 --> 00:11:06,160
extender like

300
00:11:06,160 --> 00:11:08,959
macron got we have the variable input

301
00:11:08,959 --> 00:11:11,040
length hash functions

302
00:11:11,040 --> 00:11:13,760
and for memory size uh due to the

303
00:11:13,760 --> 00:11:15,279
underlying

304
00:11:15,279 --> 00:11:16,640
due to the input length of the

305
00:11:16,640 --> 00:11:18,560
underlying block cipher

306
00:11:18,560 --> 00:11:21,519
the minimum memory size is n plus k bits

307
00:11:21,519 --> 00:11:24,959
n is block size and key the k is a key

308
00:11:24,959 --> 00:11:26,640
size

309
00:11:26,640 --> 00:11:28,640
on the other hand existing uh double

310
00:11:28,640 --> 00:11:30,800
brooklyn's hash function require at

311
00:11:30,800 --> 00:11:33,360
least two and plus cabbage memories

312
00:11:33,360 --> 00:11:36,079
and existing schemes are categorized

313
00:11:36,079 --> 00:11:38,560
into these two types the first type uses

314
00:11:38,560 --> 00:11:41,839
the feed for operations like this figure

315
00:11:41,839 --> 00:11:45,120
so input is feedback to the outputs in

316
00:11:45,120 --> 00:11:47,120
the upper and lower parts

317
00:11:47,120 --> 00:11:47,920
and

318
00:11:47,920 --> 00:11:49,680
uh existing scheme

319
00:11:49,680 --> 00:11:52,480
require a memory to keep one output

320
00:11:52,480 --> 00:11:55,120
while calculating the other part

321
00:11:55,120 --> 00:11:58,560
and the first type require two end plus

322
00:11:58,560 --> 00:12:00,320
memory

323
00:12:00,320 --> 00:12:02,000
for this part

324
00:12:02,000 --> 00:12:05,200
which is the input length of the block

325
00:12:05,200 --> 00:12:06,720
cipher plus

326
00:12:06,720 --> 00:12:09,760
size of the feed part operation so the

327
00:12:09,760 --> 00:12:10,800
total

328
00:12:10,800 --> 00:12:14,079
size of the first type is at least three

329
00:12:14,079 --> 00:12:15,760
n plus cables

330
00:12:15,760 --> 00:12:17,680
and the other type he

331
00:12:17,680 --> 00:12:20,880
does not use the feed for the operation

332
00:12:20,880 --> 00:12:24,639
so the memory size is chosen by n-bit so

333
00:12:24,639 --> 00:12:28,240
the memory size is 2n plus k-bit

334
00:12:28,240 --> 00:12:31,600
but feed-forward operation is used to

335
00:12:31,600 --> 00:12:32,959
resist

336
00:12:32,959 --> 00:12:35,360
attack using the degradation function so

337
00:12:35,360 --> 00:12:38,240
removing this the feedback operation one

338
00:12:38,240 --> 00:12:40,399
can break the

339
00:12:40,399 --> 00:12:43,920
primary security of this scheme

340
00:12:43,920 --> 00:12:47,839
so business time shows that uh even when

341
00:12:47,839 --> 00:12:49,519
removing the

342
00:12:49,519 --> 00:12:53,120
speed of hard operation one can

343
00:12:53,120 --> 00:12:57,519
ensure the security by iterating the

344
00:12:58,720 --> 00:13:02,240
fixed input range principle

345
00:13:02,720 --> 00:13:04,480
but

346
00:13:04,480 --> 00:13:06,720
now all existing double programs hash

347
00:13:06,720 --> 00:13:10,000
function achieve the minimum size so we

348
00:13:10,000 --> 00:13:11,920
solve this problem

349
00:13:11,920 --> 00:13:14,639
so uh this is a

350
00:13:14,639 --> 00:13:17,200
component basic component of our double

351
00:13:17,200 --> 00:13:20,639
programs hash functions named xx xx

352
00:13:20,639 --> 00:13:23,040
achieve the minimum memory size and plus

353
00:13:23,040 --> 00:13:26,000
cabbage and idea behind this

354
00:13:26,000 --> 00:13:27,040
excess

355
00:13:27,040 --> 00:13:30,079
structure uh that block cipher is

356
00:13:30,079 --> 00:13:32,800
section sequentially processed

357
00:13:32,800 --> 00:13:36,000
so memory to keep the internal state is

358
00:13:36,000 --> 00:13:38,000
no bigger than the memory for plus

359
00:13:38,000 --> 00:13:40,639
cipher so as a result the internal state

360
00:13:40,639 --> 00:13:43,199
memory can be used in the block cipher

361
00:13:43,199 --> 00:13:46,639
so xx actually the minimum size

362
00:13:46,639 --> 00:13:49,600
for the statistical uh we design xx

363
00:13:49,600 --> 00:13:51,920
based uh hash functions

364
00:13:51,920 --> 00:13:52,959
so that

365
00:13:52,959 --> 00:13:55,279
this security level is achieved when

366
00:13:55,279 --> 00:13:58,079
using one 28-bit block cipher

367
00:13:58,079 --> 00:14:01,040
so this is the requirement of the nist

368
00:14:01,040 --> 00:14:03,199
standardization process and

369
00:14:03,199 --> 00:14:06,320
these security notions are satisfied

370
00:14:06,320 --> 00:14:11,680
and xx itself is not a secure function

371
00:14:11,680 --> 00:14:13,600
because

372
00:14:13,600 --> 00:14:16,560
one can easily break the spring section

373
00:14:16,560 --> 00:14:19,120
of xx function using the decryption

374
00:14:19,120 --> 00:14:21,760
function of the block cipher so we use

375
00:14:21,760 --> 00:14:25,360
the idea of using sum so we design hash

376
00:14:25,360 --> 00:14:28,480
functions by iterating the xx function

377
00:14:28,480 --> 00:14:31,199
so this is uh uh our schemes the first

378
00:14:31,199 --> 00:14:33,680
scheme xs ni uh

379
00:14:33,680 --> 00:14:35,360
it is designed to have the

380
00:14:35,360 --> 00:14:38,079
indifferentiability up to this security

381
00:14:38,079 --> 00:14:41,839
level so if ni rt uh behaves like a

382
00:14:41,839 --> 00:14:44,720
random work in the idle cyber model and

383
00:14:44,720 --> 00:14:48,399
when using uh 128-bit block cipher this

384
00:14:48,399 --> 00:14:50,880
security level is achieved

385
00:14:50,880 --> 00:14:54,560
um for the construction uh xs-ny

386
00:14:54,560 --> 00:14:56,720
iterates the excess function

387
00:14:56,720 --> 00:14:59,760
in this part but simple iteration

388
00:14:59,760 --> 00:15:02,160
is brutal to the ranks extension attack

389
00:15:02,160 --> 00:15:04,560
which breaks the indifferentiability so

390
00:15:04,560 --> 00:15:07,040
we make use of the nessy structure in

391
00:15:07,040 --> 00:15:10,560
spot for other result access in my first

392
00:15:10,560 --> 00:15:12,880
achieve the international bit

393
00:15:12,880 --> 00:15:15,440
and the second scheme is xsi the

394
00:15:15,440 --> 00:15:18,000
security goal is collision resistance so

395
00:15:18,000 --> 00:15:20,160
which is weaker 60 notions are

396
00:15:20,160 --> 00:15:22,639
indifferentiability so we don't need to

397
00:15:22,639 --> 00:15:25,440
consider the rank fixation attack so

398
00:15:25,440 --> 00:15:28,079
this golden reasons can be ensured by

399
00:15:28,079 --> 00:15:30,880
just iterating the excess function

400
00:15:30,880 --> 00:15:36,160
and xsi uh achieves this security label

401
00:15:36,160 --> 00:15:40,399
so compared with xsa xxi is faster

402
00:15:40,399 --> 00:15:43,680
by two processor core

403
00:15:43,680 --> 00:15:46,079
so this is the last right uh this tab

404
00:15:46,079 --> 00:15:47,199
compare

405
00:15:47,199 --> 00:15:50,000
our hash functions with existing schemes

406
00:15:50,000 --> 00:15:52,800
so this line shows the memory sizes our

407
00:15:52,800 --> 00:15:55,600
skins achieves a minimal memory size but

408
00:15:55,600 --> 00:15:58,000
in this instinct require at least 10

409
00:15:58,000 --> 00:16:00,320
plus capital memory

410
00:16:00,320 --> 00:16:02,480
we

411
00:16:02,480 --> 00:16:05,120
implemented our skin on romus age which

412
00:16:05,120 --> 00:16:06,959
is a finalist organist foundation

413
00:16:06,959 --> 00:16:10,320
process and rom's edge uses

414
00:16:10,320 --> 00:16:13,360
mdbh mode and since our skin achieves

415
00:16:13,360 --> 00:16:15,279
the minimal size

416
00:16:15,279 --> 00:16:17,040
excess iron

417
00:16:17,040 --> 00:16:19,199
and why reduces 30 percent or harder

418
00:16:19,199 --> 00:16:22,560
cost compared with loans h okay this is

419
00:16:22,560 --> 00:16:26,079
end of my talk thank you very much

420
00:16:26,800 --> 00:16:29,040
thank you

421
00:16:29,040 --> 00:16:31,839
any questions

422
00:16:32,959 --> 00:16:35,279
okay

423
00:16:40,560 --> 00:16:44,160
the xor in the middle of the exex

424
00:16:44,160 --> 00:16:46,720
interact with the

425
00:16:46,720 --> 00:16:48,560
okay addition

426
00:16:48,560 --> 00:16:54,000
the key addition will be xor to the

427
00:16:54,160 --> 00:16:55,199
input

428
00:16:55,199 --> 00:16:58,240
i mean the there is an xor in the middle

429
00:16:58,240 --> 00:16:59,199
of this

430
00:16:59,199 --> 00:17:01,279
exex

431
00:17:01,279 --> 00:17:04,319
and then it is

432
00:17:04,319 --> 00:17:07,280
extra back to the flux real later

433
00:17:07,280 --> 00:17:09,599
problem

434
00:17:09,599 --> 00:17:13,119
hopefully i i can't

435
00:17:13,359 --> 00:17:15,439
i mean there is a

436
00:17:15,439 --> 00:17:18,880
xor in the middle of yes

437
00:17:18,880 --> 00:17:21,439
and then it will be

438
00:17:21,439 --> 00:17:23,039
inserted to

439
00:17:23,039 --> 00:17:25,760
the block server again yes and

440
00:17:25,760 --> 00:17:29,440
it is xor to the first uh

441
00:17:29,440 --> 00:17:33,120
round of maybe just like a wedding

442
00:17:33,120 --> 00:17:34,559
will that be

443
00:17:34,559 --> 00:17:36,880
concealed

444
00:17:36,880 --> 00:17:39,200
maybe we can avoid

445
00:17:39,200 --> 00:17:42,960
the key addition in the first round

446
00:17:43,360 --> 00:17:46,799
uh so you mean that you mentioned that

447
00:17:46,799 --> 00:17:49,220
this xy is cancelled

448
00:17:49,220 --> 00:17:50,400
[Music]

449
00:17:50,400 --> 00:17:53,200
i'm going in the key of this by key

450
00:17:53,200 --> 00:17:55,679
attitude

451
00:17:55,679 --> 00:17:58,160
they are not

452
00:17:58,160 --> 00:18:00,000
uh

453
00:18:00,000 --> 00:18:01,280
this uh

454
00:18:01,280 --> 00:18:05,039
in intermediate value is xored to

455
00:18:05,039 --> 00:18:09,039
uh this key and this key is xor to the

456
00:18:09,039 --> 00:18:09,919
first

457
00:18:09,919 --> 00:18:13,039
uh in the first round

458
00:18:13,200 --> 00:18:16,960
uh so the intermediate key is spot

459
00:18:16,960 --> 00:18:17,919
right yeah

460
00:18:17,919 --> 00:18:18,640
yeah

461
00:18:18,640 --> 00:18:19,919
and

462
00:18:19,919 --> 00:18:22,960
and then it goes through the

463
00:18:22,960 --> 00:18:25,120
uh

464
00:18:25,120 --> 00:18:26,880
to the inter

465
00:18:26,880 --> 00:18:29,039
interstate

466
00:18:29,039 --> 00:18:31,520
international

467
00:18:31,520 --> 00:18:32,400
so

468
00:18:32,400 --> 00:18:34,799
this is become the key on the next

469
00:18:34,799 --> 00:18:37,520
interstate and

470
00:18:37,520 --> 00:18:39,840
that is export with

471
00:18:39,840 --> 00:18:42,840
esparry

472
00:18:44,480 --> 00:18:46,640
so

473
00:18:49,600 --> 00:18:50,559
i mean

474
00:18:50,559 --> 00:18:52,000
because

475
00:18:52,000 --> 00:18:54,080
through the key schedule of the message

476
00:18:54,080 --> 00:18:58,400
scale the material will insert

477
00:18:58,400 --> 00:19:01,360
add to the internal state

478
00:19:01,360 --> 00:19:03,918
we can

479
00:19:08,480 --> 00:19:10,720
maybe this you can

480
00:19:10,720 --> 00:19:13,520
easily avoid

481
00:19:13,520 --> 00:19:16,240
this problem

482
00:19:19,360 --> 00:19:21,840
uh sorry i i

483
00:19:21,840 --> 00:19:22,840
cannot

484
00:19:22,840 --> 00:19:25,280
understand yet

485
00:19:25,280 --> 00:19:26,240
really

486
00:19:26,240 --> 00:19:28,559
okay it doesn't matter maybe it can

487
00:19:28,559 --> 00:19:32,039
easily operate

488
00:19:44,080 --> 00:19:46,960
okay maybe we can uh take this uh

489
00:19:46,960 --> 00:19:48,400
offline and

490
00:19:48,400 --> 00:19:51,919
move to the next stock now thank you

491
00:19:51,919 --> 00:19:53,679
for the talk

492
00:19:53,679 --> 00:19:58,000
uh the next talk is uh on uh

493
00:19:58,000 --> 00:19:59,760
toward a fully secure authenticated

494
00:19:59,760 --> 00:20:01,679
encryption scheme from a pseudo-random

495
00:20:01,679 --> 00:20:07,559
permutation this is by onesie okay

496
00:20:12,640 --> 00:20:17,640
can you share your screen please

497
00:20:24,799 --> 00:20:27,440
uh you're mute right now

498
00:20:27,440 --> 00:20:28,400
oh

499
00:20:28,400 --> 00:20:30,640
hello

500
00:20:30,640 --> 00:20:31,840
does it work

501
00:20:31,840 --> 00:20:35,039
yes now we can hear it

502
00:20:35,039 --> 00:20:37,919
oh hello this is biancha and i'm going

503
00:20:37,919 --> 00:20:40,000
to talk about toward the fully secure

504
00:20:40,000 --> 00:20:41,679
authenticated encryption scheme from

505
00:20:41,679 --> 00:20:43,679
absolute random permutation

506
00:20:43,679 --> 00:20:45,679
this is joint work with one shot one

507
00:20:45,679 --> 00:20:48,880
though mean and true

508
00:20:48,880 --> 00:20:50,799
let's start with the introduction

509
00:20:50,799 --> 00:20:52,640
as everyone knows authenticated

510
00:20:52,640 --> 00:20:54,559
encryption is a symmetric algorithm that

511
00:20:54,559 --> 00:20:56,159
protects both integrity and

512
00:20:56,159 --> 00:20:58,240
confidentiality at once

513
00:20:58,240 --> 00:21:00,320
using nonc is a common way to guarantee

514
00:21:00,320 --> 00:21:02,400
the probability of ciphertext and we

515
00:21:02,400 --> 00:21:04,720
call them non-spaced authenticated

516
00:21:04,720 --> 00:21:07,360
encryption or nae in short

517
00:21:07,360 --> 00:21:10,159
in nae security is guaranteed only if a

518
00:21:10,159 --> 00:21:12,559
nonce is never repeated

519
00:21:12,559 --> 00:21:15,919
misused resistant ae or mra is another

520
00:21:15,919 --> 00:21:18,799
type of aid that still provides security

521
00:21:18,799 --> 00:21:20,880
even in environments where nonsense is

522
00:21:20,880 --> 00:21:22,640
repeated

523
00:21:22,640 --> 00:21:24,400
since it might be challenging to keep

524
00:21:24,400 --> 00:21:26,960
the uniqueness of the noise for example

525
00:21:26,960 --> 00:21:30,159
in lightweight devices the demand of mra

526
00:21:30,159 --> 00:21:32,880
is increasing

527
00:21:33,120 --> 00:21:35,440
i will introduce two constructions that

528
00:21:35,440 --> 00:21:37,440
motivated our work

529
00:21:37,440 --> 00:21:40,240
non-spaced enhanced hashtag mask is a

530
00:21:40,240 --> 00:21:42,320
message authentication code

531
00:21:42,320 --> 00:21:45,039
proposed by dutta nandi and tanika at

532
00:21:45,039 --> 00:21:47,120
2019

533
00:21:47,120 --> 00:21:49,360
it is secure up to 233 and world for

534
00:21:49,360 --> 00:21:51,440
authentication queries so provides

535
00:21:51,440 --> 00:21:53,679
beyond birthday bonus equity

536
00:21:53,679 --> 00:21:56,000
moreover its security gratefully

537
00:21:56,000 --> 00:21:57,840
degrades with respect to the number of

538
00:21:57,840 --> 00:21:59,760
alternatives which called

539
00:21:59,760 --> 00:22:02,799
faulty north model

540
00:22:03,559 --> 00:22:06,400
aes-gmsiv is a recently proposed

541
00:22:06,400 --> 00:22:08,720
non-species resistant ae

542
00:22:08,720 --> 00:22:10,159
which is secured up to two to the

543
00:22:10,159 --> 00:22:11,840
enquiries in the non-series pattern

544
00:22:11,840 --> 00:22:14,240
setting and secure up to 2 to the n 2

545
00:22:14,240 --> 00:22:17,039
queries in the non-species setting

546
00:22:17,039 --> 00:22:20,960
it can be seen as a variant of gmsiv and

547
00:22:20,960 --> 00:22:23,440
the core difference is to use non-space

548
00:22:23,440 --> 00:22:25,120
key derivation

549
00:22:25,120 --> 00:22:27,120
by using kdfs

550
00:22:27,120 --> 00:22:29,520
it generates independent inter internal

551
00:22:29,520 --> 00:22:31,679
keys from different nonsense and it

552
00:22:31,679 --> 00:22:34,159
could achieve full security in either

553
00:22:34,159 --> 00:22:36,799
circle model

554
00:22:36,960 --> 00:22:39,600
in this research we try to construct a

555
00:22:39,600 --> 00:22:41,679
block cipher based a which provides full

556
00:22:41,679 --> 00:22:44,480
security and we also wanted bone species

557
00:22:44,480 --> 00:22:46,080
resistant

558
00:22:46,080 --> 00:22:49,039
with grateful security degradation

559
00:22:49,039 --> 00:22:51,200
finally we targeted to have rate one

560
00:22:51,200 --> 00:22:54,000
over two and parallel eligibility

561
00:22:54,000 --> 00:22:56,000
which are the basic properties to be

562
00:22:56,000 --> 00:22:59,039
computed efficiently

563
00:22:59,039 --> 00:23:01,679
and this is our main result synthetic

564
00:23:01,679 --> 00:23:04,640
counter mode or sgm in short

565
00:23:04,640 --> 00:23:06,960
scm can be seen as another variant of

566
00:23:06,960 --> 00:23:10,080
gmsiv and estrogen follows nsiv

567
00:23:10,080 --> 00:23:12,320
structure which is proposed by perine

568
00:23:12,320 --> 00:23:14,960
and serine at 2017.

569
00:23:14,960 --> 00:23:16,640
it first encrypts the nouns and

570
00:23:16,640 --> 00:23:19,120
generates four nonspace masks delta

571
00:23:19,120 --> 00:23:22,480
delta prime and delta double prime

572
00:23:22,480 --> 00:23:25,280
then it computes tag in a similar way to

573
00:23:25,280 --> 00:23:28,480
an htm and by using this tag

574
00:23:28,480 --> 00:23:30,720
it generates key strings while following

575
00:23:30,720 --> 00:23:32,720
counter-like mode where inputs are

576
00:23:32,720 --> 00:23:35,039
generated by linear combination of tag

577
00:23:35,039 --> 00:23:37,679
and mask

578
00:23:37,679 --> 00:23:40,080
scm is the first block cipher-based mra

579
00:23:40,080 --> 00:23:42,159
which is rate 1 over 2 and

580
00:23:42,159 --> 00:23:45,200
parallelizable and it has ambi security

581
00:23:45,200 --> 00:23:47,279
up to query complexity

582
00:23:47,279 --> 00:23:48,880
and provides graceful security

583
00:23:48,880 --> 00:23:53,039
degradation in non-special setting

584
00:23:54,159 --> 00:23:56,720
here is our result on the security of

585
00:23:56,720 --> 00:24:00,559
sgm and because it is very complicated

586
00:24:00,559 --> 00:24:02,320
i'll present a brief summary of the

587
00:24:02,320 --> 00:24:04,880
security of sgm

588
00:24:04,880 --> 00:24:06,960
in the don't respecting model so if

589
00:24:06,960 --> 00:24:09,039
there is no faulty nonsense the

590
00:24:09,039 --> 00:24:11,279
advantage can be represented in the form

591
00:24:11,279 --> 00:24:14,799
of q times l square over two to the n

592
00:24:14,799 --> 00:24:17,279
also the secret its security gratefully

593
00:24:17,279 --> 00:24:19,840
falls to birthday bound in the false

594
00:24:19,840 --> 00:24:24,399
notes model as you can see in the graph

595
00:24:25,360 --> 00:24:28,640
and this is comparison of stem with

596
00:24:28,640 --> 00:24:32,720
existing emotes and you can see that s

597
00:24:32,720 --> 00:24:34,640
sgm outperforms previous block

598
00:24:34,640 --> 00:24:36,720
cipher-based a modes and

599
00:24:36,720 --> 00:24:38,320
also comparable to twicker blue

600
00:24:38,320 --> 00:24:41,279
cipher-based ones

601
00:24:42,559 --> 00:24:43,760
and

602
00:24:43,760 --> 00:24:46,480
here is the core ideas for the security

603
00:24:46,480 --> 00:24:47,520
proof

604
00:24:47,520 --> 00:24:50,080
since the cyber text should look random

605
00:24:50,080 --> 00:24:52,480
when constructing the ae from

606
00:24:52,480 --> 00:24:54,320
suddenly permutation we need to

607
00:24:54,320 --> 00:24:56,640
construct a surrounding function from

608
00:24:56,640 --> 00:24:59,520
pseudonym permutation and v and use it

609
00:24:59,520 --> 00:25:01,760
to generate a random string

610
00:25:01,760 --> 00:25:04,640
but if we use naive prp to pr switch the

611
00:25:04,640 --> 00:25:07,039
security cannot achieve a call beyond

612
00:25:07,039 --> 00:25:08,400
birthday bond

613
00:25:08,400 --> 00:25:10,720
therefore we decide to use xrp

614
00:25:10,720 --> 00:25:13,279
construction which can generate w minus

615
00:25:13,279 --> 00:25:15,760
one's random blocks using w block cipher

616
00:25:15,760 --> 00:25:18,240
encryption

617
00:25:19,200 --> 00:25:21,600
although there have been many studies on

618
00:25:21,600 --> 00:25:22,720
xrp

619
00:25:22,720 --> 00:25:25,120
there are two of the most outstanding

620
00:25:25,120 --> 00:25:26,240
results

621
00:25:26,240 --> 00:25:28,480
one is patterns mirror theory which is a

622
00:25:28,480 --> 00:25:30,799
theory to bound the number of solutions

623
00:25:30,799 --> 00:25:32,559
for certain systems of equations and

624
00:25:32,559 --> 00:25:34,000
non-equations

625
00:25:34,000 --> 00:25:35,760
in this research we use slightly

626
00:25:35,760 --> 00:25:37,919
modified version of the mineral theory

627
00:25:37,919 --> 00:25:42,360
in the paper from chai shadow

628
00:25:42,480 --> 00:25:44,640
is done with chi-square method proposed

629
00:25:44,640 --> 00:25:48,320
by dye at all at crypto 2017 and

630
00:25:48,320 --> 00:25:50,240
chi-square method is the recent method

631
00:25:50,240 --> 00:25:52,720
used to prove the pr security of x-ray

632
00:25:52,720 --> 00:25:54,400
p-like constructions

633
00:25:54,400 --> 00:25:56,559
and we use the generalized version of

634
00:25:56,559 --> 00:26:00,240
batacharia and dandish results

635
00:26:00,720 --> 00:26:03,360
to sum up the proposed scm synthetic

636
00:26:03,360 --> 00:26:05,600
contour with masking mode which is

637
00:26:05,600 --> 00:26:08,080
almost fully secured mriae

638
00:26:08,080 --> 00:26:10,400
it enjoys grief graceful security

639
00:26:10,400 --> 00:26:12,480
degradation degradation in faultino's

640
00:26:12,480 --> 00:26:13,760
model and

641
00:26:13,760 --> 00:26:16,400
it is fully secure in the non-respective

642
00:26:16,400 --> 00:26:18,799
model in terms of the threshold number

643
00:26:18,799 --> 00:26:20,960
of queries

644
00:26:20,960 --> 00:26:23,840
and this is end of my presentation and

645
00:26:23,840 --> 00:26:27,039
thank you for the listen

646
00:26:28,080 --> 00:26:30,400
thank you

647
00:26:30,400 --> 00:26:34,159
i don't see any questions

648
00:26:34,880 --> 00:26:38,760
any question for beyonce

649
00:26:41,360 --> 00:26:42,720
okay

650
00:26:42,720 --> 00:26:45,360
i have a question uh so

651
00:26:45,360 --> 00:26:47,200
could you go to the

652
00:26:47,200 --> 00:26:48,480
slide where

653
00:26:48,480 --> 00:26:52,159
you show the scheme sem

654
00:26:52,159 --> 00:26:52,960
yeah

655
00:26:52,960 --> 00:26:54,960
yeah

656
00:26:54,960 --> 00:26:56,799
so

657
00:26:56,799 --> 00:26:59,200
yes so basically uh

658
00:26:59,200 --> 00:27:01,200
this is for the key stream generation

659
00:27:01,200 --> 00:27:02,400
yeah so

660
00:27:02,400 --> 00:27:05,640
what if

661
00:27:06,080 --> 00:27:08,880
yeah so uh you have this uh delta delta

662
00:27:08,880 --> 00:27:12,960
prime and delta double prime so

663
00:27:14,960 --> 00:27:18,080
is this the like uh is this the optimal

664
00:27:18,080 --> 00:27:20,159
number of block cipher calls for

665
00:27:20,159 --> 00:27:23,039
generating these or can you uh

666
00:27:23,039 --> 00:27:26,240
have something uh

667
00:27:26,240 --> 00:27:29,440
something like the truncation and uh

668
00:27:29,440 --> 00:27:31,679
truncation and some kind of idea which

669
00:27:31,679 --> 00:27:34,399
was presented uh recently in a paper i

670
00:27:34,399 --> 00:27:35,410
think

671
00:27:35,410 --> 00:27:38,630
[Music]

672
00:27:39,840 --> 00:27:42,879
i think by meaning

673
00:27:43,279 --> 00:27:45,919
i cannot sure but uh

674
00:27:45,919 --> 00:27:49,039
as i know to generate three and bit

675
00:27:49,039 --> 00:27:50,480
random string

676
00:27:50,480 --> 00:27:52,640
four number of block cipher encryption

677
00:27:52,640 --> 00:27:54,799
is optimal

678
00:27:54,799 --> 00:27:57,279
but one can optimize the

679
00:27:57,279 --> 00:27:59,919
um some

680
00:27:59,919 --> 00:28:02,799
optimize it by reducing some that some

681
00:28:02,799 --> 00:28:04,399
bits like

682
00:28:04,399 --> 00:28:05,360
uh

683
00:28:05,360 --> 00:28:07,200
you can use

684
00:28:07,200 --> 00:28:09,760
smaller bits on delta instead of using

685
00:28:09,760 --> 00:28:12,559
full lambda stream

686
00:28:12,640 --> 00:28:14,399
then summation and

687
00:28:14,399 --> 00:28:18,799
summation truncation hybrid can work

688
00:28:19,200 --> 00:28:22,320
okay okay yeah

689
00:28:22,320 --> 00:28:23,520
uh may i

690
00:28:23,520 --> 00:28:26,159
uh make a comment here right

691
00:28:26,159 --> 00:28:27,520
yes little

692
00:28:27,520 --> 00:28:29,120
yeah so

693
00:28:29,120 --> 00:28:31,600
uh i think you need a three delta

694
00:28:31,600 --> 00:28:33,200
possibly because you are proving in a

695
00:28:33,200 --> 00:28:35,440
generic mode like uh but

696
00:28:35,440 --> 00:28:37,120
you have a generic composition that's

697
00:28:37,120 --> 00:28:38,480
why probably you want to have

698
00:28:38,480 --> 00:28:40,240
independent so

699
00:28:40,240 --> 00:28:42,880
in instead of if you have a dedicated

700
00:28:42,880 --> 00:28:45,600
combinations truthfully little complex

701
00:28:45,600 --> 00:28:48,000
but you may save some delta maybe you do

702
00:28:48,000 --> 00:28:49,919
not need three delta maybe two delta may

703
00:28:49,919 --> 00:28:52,720
work so just my case like have you seen

704
00:28:52,720 --> 00:28:54,559
have you thought of that direction like

705
00:28:54,559 --> 00:28:59,000
reducing the number of deltas

706
00:29:08,480 --> 00:29:11,720
is the question

707
00:29:12,559 --> 00:29:13,360
so

708
00:29:13,360 --> 00:29:15,520
you

709
00:29:16,240 --> 00:29:17,360
um

710
00:29:17,360 --> 00:29:20,480
you mean that there is a way to reduce

711
00:29:20,480 --> 00:29:21,760
use

712
00:29:21,760 --> 00:29:24,159
smaller number of masks

713
00:29:24,159 --> 00:29:26,640
yeah yeah means

714
00:29:26,640 --> 00:29:28,640
instead of having three delta can we do

715
00:29:28,640 --> 00:29:31,600
it with two delta save

716
00:29:31,600 --> 00:29:35,360
oh maybe if we use um if you define if i

717
00:29:35,360 --> 00:29:36,540
define

718
00:29:36,540 --> 00:29:37,919
[Music]

719
00:29:37,919 --> 00:29:39,360
that one

720
00:29:39,360 --> 00:29:42,480
is equal to zetton plus that two instead

721
00:29:42,480 --> 00:29:44,720
of not um

722
00:29:44,720 --> 00:29:46,240
i mean

723
00:29:46,240 --> 00:29:50,000
okay use that one as delta prime

724
00:29:50,399 --> 00:29:51,200
yeah

725
00:29:51,200 --> 00:29:53,039
okay then

726
00:29:53,039 --> 00:29:55,120
that that will not save one block cipher

727
00:29:55,120 --> 00:29:57,200
calls and then you have to pay one block

728
00:29:57,200 --> 00:30:00,320
cipher here there but anyway okay so but

729
00:30:00,320 --> 00:30:02,559
your proof is uh generic composition

730
00:30:02,559 --> 00:30:03,360
right

731
00:30:03,360 --> 00:30:05,120
yes

732
00:30:05,120 --> 00:30:06,880
so possibly

733
00:30:06,880 --> 00:30:09,600
uh if you reuse something and then you

734
00:30:09,600 --> 00:30:11,600
cannot apply generic composition then

735
00:30:11,600 --> 00:30:13,279
you may have to have a dedicated proof

736
00:30:13,279 --> 00:30:15,279
so

737
00:30:15,279 --> 00:30:17,600
oh yes yes

738
00:30:17,600 --> 00:30:19,360
that might be work

739
00:30:19,360 --> 00:30:23,080
yeah okay

740
00:30:25,520 --> 00:30:29,600
if uh any more questions

741
00:30:32,320 --> 00:30:34,880
if not then let's thank bianca for the

742
00:30:34,880 --> 00:30:37,120
talk

743
00:30:40,559 --> 00:30:44,480
the fourth talk is entitled the that

744
00:30:44,480 --> 00:30:47,360
security for key alternating servers

745
00:30:47,360 --> 00:30:50,960
with correlated sub keys so

746
00:30:50,960 --> 00:30:51,840
she

747
00:30:51,840 --> 00:30:54,320
will give the presentation

748
00:30:54,320 --> 00:30:56,559
so

749
00:30:57,679 --> 00:30:59,600
yeah can you see my snipe

750
00:30:59,600 --> 00:31:01,440
yes

751
00:31:01,440 --> 00:31:02,880
okay yeah

752
00:31:02,880 --> 00:31:03,760
so

753
00:31:03,760 --> 00:31:05,840
thanks for the introduction i'm shi

754
00:31:05,840 --> 00:31:07,600
hujang and

755
00:31:07,600 --> 00:31:09,200
i'm going to talk about high security

756
00:31:09,200 --> 00:31:11,120
for chaotic cyphers with coordinate

757
00:31:11,120 --> 00:31:13,840
sub-keys and this is joined to work with

758
00:31:13,840 --> 00:31:16,880
stefano tessarro

759
00:31:16,880 --> 00:31:18,640
so t round the key alternating cipher

760
00:31:18,640 --> 00:31:20,559
constructor as presented in the

761
00:31:20,559 --> 00:31:22,960
illustration is built on t puppet

762
00:31:22,960 --> 00:31:25,600
permutations pi 1 to pi t

763
00:31:25,600 --> 00:31:28,480
and consists of t plus 1 and bit sub

764
00:31:28,480 --> 00:31:30,840
keys s0 to

765
00:31:30,840 --> 00:31:34,640
sd the kfc has received considerable

766
00:31:34,640 --> 00:31:37,200
tensions because it captures the design

767
00:31:37,200 --> 00:31:39,840
of substitution permutation network

768
00:31:39,840 --> 00:31:42,080
with the most prominent candidate being

769
00:31:42,080 --> 00:31:44,559
aes

770
00:31:45,519 --> 00:31:47,840
previously the theoretical analysis of

771
00:31:47,840 --> 00:31:50,320
qr10cipher were on the two independence

772
00:31:50,320 --> 00:31:52,240
assumptions

773
00:31:52,240 --> 00:31:55,200
that is the sub keys s0 to st are

774
00:31:55,200 --> 00:31:57,279
independent and sampled uniformly at

775
00:31:57,279 --> 00:31:58,320
random

776
00:31:58,320 --> 00:32:00,320
and around the permutations taiwan to pi

777
00:32:00,320 --> 00:32:02,480
t are also independent and sampled

778
00:32:02,480 --> 00:32:05,279
uniformly at random

779
00:32:05,279 --> 00:32:07,679
after nine of works studying ksc

780
00:32:07,679 --> 00:32:10,000
it was proven that under the two

781
00:32:10,000 --> 00:32:12,320
independence assumptions

782
00:32:12,320 --> 00:32:14,960
kc achieves the optimal security

783
00:32:14,960 --> 00:32:17,039
tolerating any other survey that makes

784
00:32:17,039 --> 00:32:19,360
at most due to the nt over t plus one

785
00:32:19,360 --> 00:32:20,720
queries

786
00:32:20,720 --> 00:32:22,640
counting both the queries to the cipher

787
00:32:22,640 --> 00:32:23,840
construction

788
00:32:23,840 --> 00:32:25,360
and the queries to the public

789
00:32:25,360 --> 00:32:29,600
permutations i want to i t

790
00:32:29,600 --> 00:32:31,519
however the independence assumption is

791
00:32:31,519 --> 00:32:33,519
not necessarily realistic in a practical

792
00:32:33,519 --> 00:32:35,600
cipher constructions

793
00:32:35,600 --> 00:32:37,919
in particular practical ciphers generate

794
00:32:37,919 --> 00:32:41,360
also keys from a short master key

795
00:32:41,360 --> 00:32:43,120
and they use a single permutation for

796
00:32:43,120 --> 00:32:44,799
every round instead of independent

797
00:32:44,799 --> 00:32:46,799
permutations

798
00:32:46,799 --> 00:32:48,960
currently the kc security without

799
00:32:48,960 --> 00:32:51,200
independence assumptions still remains

800
00:32:51,200 --> 00:32:52,960
not well understood

801
00:32:52,960 --> 00:32:55,039
there is still a large gap between the

802
00:32:55,039 --> 00:32:57,440
theoretical study of kac

803
00:32:57,440 --> 00:33:01,279
and the practical cycle constructions

804
00:33:02,159 --> 00:33:04,799
regional gap turns out to be not easy

805
00:33:04,799 --> 00:33:06,960
since in the last decade limited

806
00:33:06,960 --> 00:33:09,200
progress has been made towards removing

807
00:33:09,200 --> 00:33:10,720
independence assumptions while

808
00:33:10,720 --> 00:33:13,679
maintaining optimal security

809
00:33:13,679 --> 00:33:16,480
the first result was by document r where

810
00:33:16,480 --> 00:33:18,399
they considered minimizing even mental

811
00:33:18,399 --> 00:33:19,360
cipher

812
00:33:19,360 --> 00:33:23,200
which is a one wrong case for kac

813
00:33:23,200 --> 00:33:25,679
later trent adolf successfully minimized

814
00:33:25,679 --> 00:33:28,880
the two-run ksc in both the keynes and

815
00:33:28,880 --> 00:33:32,399
the number of permutations used

816
00:33:32,559 --> 00:33:34,640
then until very recently the three-run

817
00:33:34,640 --> 00:33:36,880
case has been addressed by wuedor

818
00:33:36,880 --> 00:33:38,640
they reduce the number of permutations

819
00:33:38,640 --> 00:33:40,960
used by three-round ksc to a single

820
00:33:40,960 --> 00:33:43,200
permutation under the assumption that

821
00:33:43,200 --> 00:33:47,120
all sub-keys are independent and uniform

822
00:33:47,120 --> 00:33:49,600
however when you run the larger and 3

823
00:33:49,600 --> 00:33:51,679
nothing was understood in terms of

824
00:33:51,679 --> 00:33:54,640
either reducing the master keynes or the

825
00:33:54,640 --> 00:33:56,799
number of permutations

826
00:33:56,799 --> 00:33:58,799
while practical ciphers have large

827
00:33:58,799 --> 00:33:59,919
rounds

828
00:33:59,919 --> 00:34:03,200
for example aes has at least 10 rounds

829
00:34:03,200 --> 00:34:07,760
and the percent has up to 31 rounds

830
00:34:07,760 --> 00:34:09,599
in this work we focus on the key

831
00:34:09,599 --> 00:34:10,800
schedules

832
00:34:10,800 --> 00:34:12,800
in particular we make a first step

833
00:34:12,800 --> 00:34:15,280
towards reduce the master key length and

834
00:34:15,280 --> 00:34:17,040
outstanding security of ksc with

835
00:34:17,040 --> 00:34:19,760
coordinated sub keys for large runs

836
00:34:19,760 --> 00:34:21,119
under the assumption that the

837
00:34:21,119 --> 00:34:24,720
permutations are independent

838
00:34:25,520 --> 00:34:27,040
we focus on studying linear key

839
00:34:27,040 --> 00:34:30,399
schedules over field f2 to the n

840
00:34:30,399 --> 00:34:32,480
our first result provides a t minus one

841
00:34:32,480 --> 00:34:35,359
wise key schedule which generates t

842
00:34:35,359 --> 00:34:37,440
minus one wise independent and uniform

843
00:34:37,440 --> 00:34:41,040
sub keys and saves qm bit master key for

844
00:34:41,040 --> 00:34:43,918
arbitrary round t

845
00:34:43,918 --> 00:34:46,320
we also move one step further by showing

846
00:34:46,320 --> 00:34:48,639
a tmas qriski schedule

847
00:34:48,639 --> 00:34:51,119
that saves 3m bit master key

848
00:34:51,119 --> 00:34:54,159
for the kscs having at least 8 rounds

849
00:34:54,159 --> 00:34:57,919
while maintaining optimal security

850
00:34:58,480 --> 00:35:00,640
to prove the results we propose

851
00:35:00,640 --> 00:35:02,480
generalizations over the sum capture

852
00:35:02,480 --> 00:35:04,960
theory them by chain law

853
00:35:04,960 --> 00:35:06,880
we also improve sub-key dependency in a

854
00:35:06,880 --> 00:35:09,040
good transcript analysis

855
00:35:09,040 --> 00:35:10,960
by huang antisero

856
00:35:10,960 --> 00:35:16,440
from t y s to t minus two s

857
00:35:16,880 --> 00:35:18,480
however there are still many open

858
00:35:18,480 --> 00:35:20,480
problems in studying kc security with

859
00:35:20,480 --> 00:35:22,480
reduced independence

860
00:35:22,480 --> 00:35:24,560
one problem that remains open for now is

861
00:35:24,560 --> 00:35:27,040
to minimize the three-run ksc

862
00:35:27,040 --> 00:35:29,040
as our teammates two-wise key schedule

863
00:35:29,040 --> 00:35:31,599
tightness result does not apply to the

864
00:35:31,599 --> 00:35:34,800
case when t equals three

865
00:35:34,800 --> 00:35:36,480
and i'll ask packets to see whether

866
00:35:36,480 --> 00:35:38,560
tightness result can be extended to be

867
00:35:38,560 --> 00:35:40,960
on the t-mass two wise key schedule for

868
00:35:40,960 --> 00:35:43,440
large t

869
00:35:43,520 --> 00:35:45,680
and for more details please check our

870
00:35:45,680 --> 00:35:47,200
paper on the eprint

871
00:35:47,200 --> 00:35:48,960
and that's all for the short talk thank

872
00:35:48,960 --> 00:35:51,839
you for your attention

873
00:35:52,160 --> 00:35:54,560
thank you

874
00:35:54,720 --> 00:35:58,680
so any questions

875
00:36:01,200 --> 00:36:02,720
we haven't

876
00:36:02,720 --> 00:36:05,759
got any questions

877
00:36:10,800 --> 00:36:13,280
so um

878
00:36:13,280 --> 00:36:14,400
so you

879
00:36:14,400 --> 00:36:16,880
assume the underlying permutations are

880
00:36:16,880 --> 00:36:19,359
all independent

881
00:36:19,359 --> 00:36:22,880
so do you think it's possible to

882
00:36:22,880 --> 00:36:24,800
achieve the same

883
00:36:24,800 --> 00:36:26,640
type security funds

884
00:36:26,640 --> 00:36:29,680
using the same permutations

885
00:36:29,680 --> 00:36:32,880
uh i think actually

886
00:36:32,880 --> 00:36:35,040
now for the reducer permutation case i

887
00:36:35,040 --> 00:36:36,800
think actually back to weight loss

888
00:36:36,800 --> 00:36:38,000
results

889
00:36:38,000 --> 00:36:39,680
that you seem that should not have

890
00:36:39,680 --> 00:36:42,160
proposed a framework to address the

891
00:36:42,160 --> 00:36:44,640
permutations case and they solve the

892
00:36:44,640 --> 00:36:46,160
three rounds when they use a single

893
00:36:46,160 --> 00:36:48,560
permutation and the net conjecture that

894
00:36:48,560 --> 00:36:50,800
actually used in their framework would

895
00:36:50,800 --> 00:36:53,440
you know if one can solve some very hard

896
00:36:53,440 --> 00:36:55,599
combinatorial questions then actually

897
00:36:55,599 --> 00:36:57,839
maybe for arbitrary arbitrary rounds and

898
00:36:57,839 --> 00:36:59,520
they could use a single permutation to

899
00:36:59,520 --> 00:37:00,400
do it

900
00:37:00,400 --> 00:37:02,720
but uh that but for our work we are

901
00:37:02,720 --> 00:37:04,960
focusing on the key schedule here so

902
00:37:04,960 --> 00:37:06,880
we are just assuming the permutations

903
00:37:06,880 --> 00:37:08,880
are independent

904
00:37:08,880 --> 00:37:12,240
we it's hard to achieve both we reduce

905
00:37:12,240 --> 00:37:14,480
the master key and the number of

906
00:37:14,480 --> 00:37:16,640
permutations uh

907
00:37:16,640 --> 00:37:18,800
yeah i think i think it's substantially

908
00:37:18,800 --> 00:37:20,880
hard just like back to china at house

909
00:37:20,880 --> 00:37:23,599
work they reduce the number of keys and

910
00:37:23,599 --> 00:37:25,920
of course the permutations together get

911
00:37:25,920 --> 00:37:28,720
a two round but uh

912
00:37:28,720 --> 00:37:31,040
but starting from then actually until

913
00:37:31,040 --> 00:37:32,400
now we haven't

914
00:37:32,400 --> 00:37:34,560
minimized even from the three-round case

915
00:37:34,560 --> 00:37:36,400
with all made to use a single

916
00:37:36,400 --> 00:37:37,920
permutation but the key schedule is

917
00:37:37,920 --> 00:37:40,160
still independent and the best case we

918
00:37:40,160 --> 00:37:41,680
are hoping for is to say for three

919
00:37:41,680 --> 00:37:43,119
rounds we have

920
00:37:43,119 --> 00:37:45,520
a bitmaster key that generates all the

921
00:37:45,520 --> 00:37:46,720
sub keys

922
00:37:46,720 --> 00:37:48,560
and for the permutation we just use a

923
00:37:48,560 --> 00:37:50,560
single permutation and we still don't

924
00:37:50,560 --> 00:37:53,440
know how to achieve this

925
00:37:59,410 --> 00:38:02,549
[Music]

926
00:38:02,839 --> 00:38:08,240
okay yeah thanks you for the talk uh

927
00:38:08,240 --> 00:38:11,760
and uh the next talk is uh on

928
00:38:11,760 --> 00:38:13,839
fast secure and high performance

929
00:38:13,839 --> 00:38:15,760
formulas uh preserving encryption and

930
00:38:15,760 --> 00:38:17,440
tokenization

931
00:38:17,440 --> 00:38:21,040
this is by f beethoven brock henninghost

932
00:38:21,040 --> 00:38:23,839
michael good and

933
00:38:24,240 --> 00:38:27,759
serge will give the talk

934
00:38:28,720 --> 00:38:29,680
okay

935
00:38:29,680 --> 00:38:32,800
thank you very much do you hear me yes

936
00:38:32,800 --> 00:38:34,160
we can hear you right

937
00:38:34,160 --> 00:38:35,280
so thank you very much for the

938
00:38:35,280 --> 00:38:38,880
introduction so i'm going to present our

939
00:38:38,880 --> 00:38:40,640
proposal for format preserving

940
00:38:40,640 --> 00:38:41,920
encryption

941
00:38:41,920 --> 00:38:43,680
so you know that the format preserving

942
00:38:43,680 --> 00:38:46,079
encryption allows to encrypt a message

943
00:38:46,079 --> 00:38:48,079
which consists of a

944
00:38:48,079 --> 00:38:49,520
list of

945
00:38:49,520 --> 00:38:54,800
l symbols in an alphabet of size a

946
00:38:54,800 --> 00:38:58,160
in into a ciphertext which has the same

947
00:38:58,160 --> 00:39:00,480
format so you encrypt l symbols in an

948
00:39:00,480 --> 00:39:03,119
alphabet of size a into lc both of in an

949
00:39:03,119 --> 00:39:05,359
alphabet of size a for instance you can

950
00:39:05,359 --> 00:39:07,760
encrypt decimal digits

951
00:39:07,760 --> 00:39:10,160
and obtain decimal digits

952
00:39:10,160 --> 00:39:12,560
so there are standards for for that and

953
00:39:12,560 --> 00:39:14,320
there is a new standard which includes

954
00:39:14,320 --> 00:39:18,560
two algorithms called ff1 and ff3

955
00:39:18,560 --> 00:39:21,599
both are five style schemes which use

956
00:39:21,599 --> 00:39:24,320
aes inside the round function of the

957
00:39:24,320 --> 00:39:26,480
physical scheme

958
00:39:26,480 --> 00:39:27,920
there are a few restrictions on the

959
00:39:27,920 --> 00:39:29,920
choice of a and l

960
00:39:29,920 --> 00:39:33,359
and since aes is used inside the round

961
00:39:33,359 --> 00:39:35,520
function of the physics scheme

962
00:39:35,520 --> 00:39:37,040
we cannot

963
00:39:37,040 --> 00:39:40,240
we cannot run aes in parallel so we need

964
00:39:40,240 --> 00:39:41,200
to

965
00:39:41,200 --> 00:39:43,760
compute a yes in sequence

966
00:39:43,760 --> 00:39:46,000
so in this presentation we propose a new

967
00:39:46,000 --> 00:39:47,920
format preserve encryption that we call

968
00:39:47,920 --> 00:39:49,440
fast

969
00:39:49,440 --> 00:39:50,400
and

970
00:39:50,400 --> 00:39:53,839
for that we will make a few

971
00:39:53,839 --> 00:39:57,040
additions so first on the interface

972
00:39:57,040 --> 00:39:59,200
in addition to the

973
00:39:59,200 --> 00:40:01,520
secret key that we input and to the

974
00:40:01,520 --> 00:40:03,760
tweak so we need a tweak because we have

975
00:40:03,760 --> 00:40:07,040
a message domain which is very small

976
00:40:07,040 --> 00:40:09,599
so we have the plain text in z a to the

977
00:40:09,599 --> 00:40:12,319
l we also input the format the format

978
00:40:12,319 --> 00:40:14,960
consists of a and l a is the size of the

979
00:40:14,960 --> 00:40:18,560
alphabet l is the length of the message

980
00:40:18,560 --> 00:40:21,680
and we take it as an input of the format

981
00:40:21,680 --> 00:40:24,160
preserving encryption so because of this

982
00:40:24,160 --> 00:40:26,640
interface now we can think of a new kind

983
00:40:26,640 --> 00:40:29,040
of attack which is a chosen format

984
00:40:29,040 --> 00:40:31,440
attack where an adversary would be able

985
00:40:31,440 --> 00:40:33,040
to

986
00:40:33,040 --> 00:40:36,400
to to change the format and while

987
00:40:36,400 --> 00:40:38,640
maintaining the same key and the same

988
00:40:38,640 --> 00:40:40,160
tweet

989
00:40:40,160 --> 00:40:42,400
so this is our interface

990
00:40:42,400 --> 00:40:45,200
and in our construction so what we do is

991
00:40:45,200 --> 00:40:48,480
that we take all these inputs the key

992
00:40:48,480 --> 00:40:49,200
the

993
00:40:49,200 --> 00:40:52,240
alphabet size the length and a tweak and

994
00:40:52,240 --> 00:40:55,119
then we proceed through some pseudonym

995
00:40:55,119 --> 00:40:56,240
functions

996
00:40:56,240 --> 00:40:57,760
which are based on

997
00:40:57,760 --> 00:41:00,160
cmak with aes

998
00:41:00,160 --> 00:41:02,960
and after that we derive some keys which

999
00:41:02,960 --> 00:41:05,200
go which plays the role of a seed in

1000
00:41:05,200 --> 00:41:07,200
some certain pseudorandom number

1001
00:41:07,200 --> 00:41:08,720
generators

1002
00:41:08,720 --> 00:41:11,839
which are based on aes in counter mode

1003
00:41:11,839 --> 00:41:14,400
on one branch we will generate a

1004
00:41:14,400 --> 00:41:17,680
sequence of permutations of z a

1005
00:41:17,680 --> 00:41:19,119
see these are permutations of the

1006
00:41:19,119 --> 00:41:21,599
alphabet so we call these s boxes so we

1007
00:41:21,599 --> 00:41:25,520
will generate typically 256 s boxes uh

1008
00:41:25,520 --> 00:41:28,800
using the fischer nate's

1009
00:41:28,800 --> 00:41:30,160
algorithm

1010
00:41:30,160 --> 00:41:32,480
and on the other branch we will generate

1011
00:41:32,480 --> 00:41:35,359
a sequence of indices so each index will

1012
00:41:35,359 --> 00:41:37,920
refer to one s-box so we have this pool

1013
00:41:37,920 --> 00:41:40,480
of s-boxes and here we generate the

1014
00:41:40,480 --> 00:41:42,079
sequence

1015
00:41:42,079 --> 00:41:45,359
of uh s-box indices that we will be

1016
00:41:45,359 --> 00:41:47,680
using in order so we will have many

1017
00:41:47,680 --> 00:41:51,760
layers and each layer will use one s-box

1018
00:41:51,760 --> 00:41:54,560
so what is nice here is that the pull of

1019
00:41:54,560 --> 00:41:55,760
s-box

1020
00:41:55,760 --> 00:41:58,160
only depends on the key on the alphabet

1021
00:41:58,160 --> 00:42:00,880
so we we have to generate only when we

1022
00:42:00,880 --> 00:42:02,800
change the key or when we change the

1023
00:42:02,800 --> 00:42:04,640
alphabet size

1024
00:42:04,640 --> 00:42:06,079
and

1025
00:42:06,079 --> 00:42:07,200
and

1026
00:42:07,200 --> 00:42:09,599
so what is nice is that the aes can be

1027
00:42:09,599 --> 00:42:11,599
run in parallel

1028
00:42:11,599 --> 00:42:13,599
in this diagram what is in red is

1029
00:42:13,599 --> 00:42:15,680
supposed to be a

1030
00:42:15,680 --> 00:42:17,680
strictly confidential

1031
00:42:17,680 --> 00:42:18,880
and

1032
00:42:18,880 --> 00:42:21,599
in our model we also allow the s-boxes

1033
00:42:21,599 --> 00:42:24,400
to leak because of the fissure gates

1034
00:42:24,400 --> 00:42:26,079
which may

1035
00:42:26,079 --> 00:42:27,680
run in

1036
00:42:27,680 --> 00:42:28,839
variable

1037
00:42:28,839 --> 00:42:32,319
time complexity it may leak some

1038
00:42:32,319 --> 00:42:34,319
information and

1039
00:42:34,319 --> 00:42:35,920
we assume that

1040
00:42:35,920 --> 00:42:37,280
it will completely leak and the

1041
00:42:37,280 --> 00:42:41,040
adversary knows the pull of s-boxes

1042
00:42:41,040 --> 00:42:43,040
so after we generate this and we can

1043
00:42:43,040 --> 00:42:45,680
proceed with the encryption and for the

1044
00:42:45,680 --> 00:42:47,520
encryption we will proceed into some

1045
00:42:47,520 --> 00:42:49,440
layers so we have the plain text which

1046
00:42:49,440 --> 00:42:51,839
is split into l symbols

1047
00:42:51,839 --> 00:42:54,240
and each symbol will enter into a branch

1048
00:42:54,240 --> 00:42:56,000
of our design

1049
00:42:56,000 --> 00:42:56,720
and

1050
00:42:56,720 --> 00:42:59,599
we will change each branch one after the

1051
00:42:59,599 --> 00:43:02,000
other so these are called layers

1052
00:43:02,000 --> 00:43:04,800
and one one which consists of n layer so

1053
00:43:04,800 --> 00:43:07,119
it means that we will update all the all

1054
00:43:07,119 --> 00:43:09,839
the branches and in each layer we will

1055
00:43:09,839 --> 00:43:12,400
use one s box following the index that

1056
00:43:12,400 --> 00:43:14,800
we generated in sequence

1057
00:43:14,800 --> 00:43:18,400
so that's our core encryption

1058
00:43:18,400 --> 00:43:19,680
and uh

1059
00:43:19,680 --> 00:43:20,480
and

1060
00:43:20,480 --> 00:43:23,280
now we no longer need to evaluate aes

1061
00:43:23,280 --> 00:43:25,680
during encryption

1062
00:43:25,680 --> 00:43:28,480
so it's supposed to be very fast

1063
00:43:28,480 --> 00:43:31,040
so these are the number of rounds that

1064
00:43:31,040 --> 00:43:33,440
we need depending on the format so for

1065
00:43:33,440 --> 00:43:36,560
instance if we you want to encrypt 12

1066
00:43:36,560 --> 00:43:39,520
decimal digits so you have equal to 10

1067
00:43:39,520 --> 00:43:42,880
and a length 12 you will use

1068
00:43:42,880 --> 00:43:47,400
38 rounds 38 rounds it will it means

1069
00:43:47,400 --> 00:43:51,440
380 layers so we will evaluate 380s

1070
00:43:51,440 --> 00:43:52,480
boxes

1071
00:43:52,480 --> 00:43:54,960
in total and this number

1072
00:43:54,960 --> 00:43:57,680
380 it's pretty

1073
00:43:57,680 --> 00:43:59,839
small compared to the number of aes

1074
00:43:59,839 --> 00:44:01,599
s-box evaluations that we need for

1075
00:44:01,599 --> 00:44:04,000
instance

1076
00:44:04,960 --> 00:44:08,160
so the number of france or so is roughly

1077
00:44:08,160 --> 00:44:10,960
four times the square root of

1078
00:44:10,960 --> 00:44:13,920
the length of the message

1079
00:44:13,920 --> 00:44:16,160
for the security so what we did is that

1080
00:44:16,160 --> 00:44:18,800
we tried many kinds of attacks so we

1081
00:44:18,800 --> 00:44:20,640
took the largest number of rounds we

1082
00:44:20,640 --> 00:44:23,200
could break we essentially double it to

1083
00:44:23,200 --> 00:44:25,599
have a security margin and we assume

1084
00:44:25,599 --> 00:44:29,119
that uh it was enough to provide a weak

1085
00:44:29,119 --> 00:44:31,680
notion of security our weak notion of

1086
00:44:31,680 --> 00:44:34,079
security is essentially the super

1087
00:44:34,079 --> 00:44:36,400
southern permutation security with a

1088
00:44:36,400 --> 00:44:39,040
single key a single tweak and a single

1089
00:44:39,040 --> 00:44:40,480
format

1090
00:44:40,480 --> 00:44:42,800
and assuming that we have this weak

1091
00:44:42,800 --> 00:44:44,720
security for this number of fronts we

1092
00:44:44,720 --> 00:44:47,520
could prove strong security

1093
00:44:47,520 --> 00:44:49,680
uh in our reduction

1094
00:44:49,680 --> 00:44:51,440
which is pretty tight

1095
00:44:51,440 --> 00:44:53,280
with observer super sudden

1096
00:44:53,280 --> 00:44:55,200
implementation with multi-target chosen

1097
00:44:55,200 --> 00:44:57,839
tweak and children format

1098
00:44:57,839 --> 00:45:00,880
we have security even when the pool of

1099
00:45:00,880 --> 00:45:03,680
s-boxes is known or leaks

1100
00:45:03,680 --> 00:45:05,920
and we also adjusted the number of

1101
00:45:05,920 --> 00:45:09,359
rounds to offer security against

1102
00:45:09,359 --> 00:45:10,400
quantum

1103
00:45:10,400 --> 00:45:12,480
algorithms

1104
00:45:12,480 --> 00:45:13,920
here is a graph we obtained for the

1105
00:45:13,920 --> 00:45:16,400
performance so you can see on the

1106
00:45:16,400 --> 00:45:19,920
fastest curve it's the first algorithm

1107
00:45:19,920 --> 00:45:22,400
when we don't change a tweak so if we

1108
00:45:22,400 --> 00:45:25,760
encrypt so this is a the time for

1109
00:45:25,760 --> 00:45:30,240
encryption in in microsecond per symbol

1110
00:45:30,240 --> 00:45:34,880
so if we if we encrypt 10 digits we will

1111
00:45:34,880 --> 00:45:36,400
have 10 times this number of

1112
00:45:36,400 --> 00:45:38,720
microseconds to encrypt

1113
00:45:38,720 --> 00:45:41,520
if we need to change a tweak so we will

1114
00:45:41,520 --> 00:45:43,440
have to regenerate the sequence of

1115
00:45:43,440 --> 00:45:46,079
indices so it will be a bit slower so we

1116
00:45:46,079 --> 00:45:48,480
obtain the red curve

1117
00:45:48,480 --> 00:45:50,160
and on the same

1118
00:45:50,160 --> 00:45:53,520
same plot we we have the performance of

1119
00:45:53,520 --> 00:45:58,800
ff1 and ff3 which are based on aes

1120
00:45:59,440 --> 00:46:02,160
and so that's it for uh the presentation

1121
00:46:02,160 --> 00:46:03,920
if you're interested i encourage you to

1122
00:46:03,920 --> 00:46:06,240
watch uh the nice videos that we made

1123
00:46:06,240 --> 00:46:09,440
and to to look at our full version of

1124
00:46:09,440 --> 00:46:11,280
course we welcome

1125
00:46:11,280 --> 00:46:13,520
more analysis and we're looking forward

1126
00:46:13,520 --> 00:46:14,400
to have

1127
00:46:14,400 --> 00:46:15,760
your results thank you very much for

1128
00:46:15,760 --> 00:46:18,319
your attention

1129
00:46:18,560 --> 00:46:22,319
ah thank you search for the talk uh

1130
00:46:22,319 --> 00:46:24,960
i don't see any questions in this

1131
00:46:24,960 --> 00:46:26,640
zulip

1132
00:46:26,640 --> 00:46:27,839
yeah

1133
00:46:27,839 --> 00:46:31,440
are there any questions for search

1134
00:46:40,720 --> 00:46:43,359
i have one question uh

1135
00:46:43,359 --> 00:46:45,200
so in the

1136
00:46:45,200 --> 00:46:47,599
prf uh

1137
00:46:47,599 --> 00:46:50,000
component of uh the construction you use

1138
00:46:50,000 --> 00:46:52,160
cmac with aes

1139
00:46:52,160 --> 00:46:53,040
and

1140
00:46:53,040 --> 00:46:56,160
given that you uh

1141
00:46:56,160 --> 00:46:59,440
yeah here so given that you uh

1142
00:46:59,440 --> 00:47:00,240
like

1143
00:47:00,240 --> 00:47:02,720
want the construction to be faster

1144
00:47:02,720 --> 00:47:05,200
wouldn't it be uh

1145
00:47:05,200 --> 00:47:08,079
better to use say a

1146
00:47:08,079 --> 00:47:10,319
light mech kind of construction which is

1147
00:47:10,319 --> 00:47:12,960
which is a parallel construction

1148
00:47:12,960 --> 00:47:17,599
so then then your prf will also be uh

1149
00:47:17,599 --> 00:47:18,960
parallel

1150
00:47:18,960 --> 00:47:22,480
paralyzable basically yeah

1151
00:47:22,640 --> 00:47:25,359
so i i don't know about this uh

1152
00:47:25,359 --> 00:47:28,000
this marks that you suggest but

1153
00:47:28,000 --> 00:47:30,480
i think you can easily change the prf

1154
00:47:30,480 --> 00:47:32,960
into another prf we need prf security

1155
00:47:32,960 --> 00:47:36,160
for this component and we need some

1156
00:47:36,160 --> 00:47:39,680
pseudonym security for the prng so it's

1157
00:47:39,680 --> 00:47:42,319
easy to to replace with some other

1158
00:47:42,319 --> 00:47:44,880
algorithms

1159
00:47:45,040 --> 00:47:47,760
yeah i'm basically if if maybe you use

1160
00:47:47,760 --> 00:47:49,280
litemac then

1161
00:47:49,280 --> 00:47:50,640
yeah i guess

1162
00:47:50,640 --> 00:47:54,240
all the phases will be parallel

1163
00:48:00,240 --> 00:48:03,799
any other questions

1164
00:48:10,640 --> 00:48:13,040
if not then let's thank search for the

1165
00:48:13,040 --> 00:48:17,680
talk thank you search so very much

1166
00:48:18,000 --> 00:48:18,800
so

1167
00:48:18,800 --> 00:48:23,440
for six presentation view entitled fun

1168
00:48:23,440 --> 00:48:27,520
turning the iso iec standards lightmap

1169
00:48:27,520 --> 00:48:30,640
and so miya chatupati will give the

1170
00:48:30,640 --> 00:48:32,720
presentation

1171
00:48:32,720 --> 00:48:35,839
samia please

1172
00:48:50,240 --> 00:48:53,200
so we cannot hear you

1173
00:48:53,200 --> 00:48:54,800
hello

1174
00:48:54,800 --> 00:48:56,480
can you hear me

1175
00:48:56,480 --> 00:48:59,480
okay

1176
00:49:02,079 --> 00:49:05,119
yes we can hear you now

1177
00:49:05,920 --> 00:49:06,880
so

1178
00:49:06,880 --> 00:49:09,680
let's start with this talk uh i'll be

1179
00:49:09,680 --> 00:49:11,200
presenting uh

1180
00:49:11,200 --> 00:49:14,000
a short talk on the paper continuing the

1181
00:49:14,000 --> 00:49:17,839
iso ic standard light mac

1182
00:49:19,760 --> 00:49:21,210
in this paper

1183
00:49:21,210 --> 00:49:23,280
[Music]

1184
00:49:23,280 --> 00:49:24,160
uh

1185
00:49:24,160 --> 00:49:26,960
we already we already had a result on

1186
00:49:26,960 --> 00:49:28,880
light map construction light mac is a

1187
00:49:28,880 --> 00:49:30,800
parallelizable block cipher based uh

1188
00:49:30,800 --> 00:49:33,520
message authentication code uh which was

1189
00:49:33,520 --> 00:49:37,680
announced as iso ic standard on 2019 and

1190
00:49:37,680 --> 00:49:40,800
uh the its main properties are these

1191
00:49:40,800 --> 00:49:42,839
that it uses

1192
00:49:42,839 --> 00:49:46,880
uh two independent block cipher keys and

1193
00:49:46,880 --> 00:49:48,160
it's based on

1194
00:49:48,160 --> 00:49:52,160
parallel counter based encoding

1195
00:49:52,240 --> 00:49:55,359
this is the pictorial representation of

1196
00:49:55,359 --> 00:49:56,640
the litemac

1197
00:49:56,640 --> 00:49:59,760
and here if the key is same

1198
00:49:59,760 --> 00:50:02,079
uh then then it is called single key

1199
00:50:02,079 --> 00:50:07,200
light mac or it's denoted by 1k like mac

1200
00:50:07,920 --> 00:50:09,119
so uh

1201
00:50:09,119 --> 00:50:11,599
lightmap was preferred like is preferred

1202
00:50:11,599 --> 00:50:13,359
because of its simplicity of the

1203
00:50:13,359 --> 00:50:14,800
construction and

1204
00:50:14,800 --> 00:50:16,640
the low over it

1205
00:50:16,640 --> 00:50:19,040
and also it has a flexible kind of

1206
00:50:19,040 --> 00:50:21,839
implementations

1207
00:50:23,760 --> 00:50:27,119
and it was also proved uh uh birthday

1208
00:50:27,119 --> 00:50:28,720
bound secure

1209
00:50:28,720 --> 00:50:32,160
and the l free security was proved in

1210
00:50:32,160 --> 00:50:34,559
the paper that i mentioned here

1211
00:50:34,559 --> 00:50:36,319
uh by luke's

1212
00:50:36,319 --> 00:50:40,279
and others in 2016.

1213
00:50:41,040 --> 00:50:44,720
in the proof in the original proof

1214
00:50:44,720 --> 00:50:47,839
they exploited the hashtag prp nature of

1215
00:50:47,839 --> 00:50:49,440
the construction

1216
00:50:49,440 --> 00:50:51,680
uh in this way we can

1217
00:50:51,680 --> 00:50:53,920
see in the construction then that we can

1218
00:50:53,920 --> 00:50:56,720
separate a hash part and the prp part

1219
00:50:56,720 --> 00:50:57,920
and

1220
00:50:57,920 --> 00:51:00,480
we can see it as a has then prp

1221
00:51:00,480 --> 00:51:02,960
construction

1222
00:51:02,960 --> 00:51:06,079
so for has then being has then prp

1223
00:51:06,079 --> 00:51:07,760
construction and

1224
00:51:07,760 --> 00:51:09,680
the keys were since the keys were

1225
00:51:09,680 --> 00:51:12,400
different independent the for fresh

1226
00:51:12,400 --> 00:51:15,280
inputs we obtained

1227
00:51:15,280 --> 00:51:16,800
random outputs

1228
00:51:16,800 --> 00:51:19,359
but the difficulty of having this kind

1229
00:51:19,359 --> 00:51:22,000
of proof for 1k lightmap is that

1230
00:51:22,000 --> 00:51:25,760
the ski are no more independent

1231
00:51:25,760 --> 00:51:27,520
both key and

1232
00:51:27,520 --> 00:51:30,319
keys are same

1233
00:51:30,559 --> 00:51:33,440
so in this paper what we did

1234
00:51:33,440 --> 00:51:36,800
is that first of all we proved a length

1235
00:51:36,800 --> 00:51:38,880
free birthday bound for

1236
00:51:38,880 --> 00:51:41,760
1k lightmap and the second in second

1237
00:51:41,760 --> 00:51:43,839
part of our paper we

1238
00:51:43,839 --> 00:51:45,200
proposed a

1239
00:51:45,200 --> 00:51:47,760
single key variant of lightmap which we

1240
00:51:47,760 --> 00:51:50,800
denoted by lightmag ds and we proved

1241
00:51:50,800 --> 00:51:53,040
that to be also

1242
00:51:53,040 --> 00:51:54,559
length free

1243
00:51:54,559 --> 00:51:57,410
of bargain-bound order

1244
00:51:57,410 --> 00:51:59,119
[Music]

1245
00:51:59,119 --> 00:52:02,000
this is a comparative summary of all the

1246
00:52:02,000 --> 00:52:03,040
results

1247
00:52:03,040 --> 00:52:04,839
regarding

1248
00:52:04,839 --> 00:52:07,040
parallelizable max

1249
00:52:07,040 --> 00:52:10,000
and here we see that we have

1250
00:52:10,000 --> 00:52:11,680
did a

1251
00:52:11,680 --> 00:52:13,200
improvement

1252
00:52:13,200 --> 00:52:16,240
in terms of block cipher keys and also

1253
00:52:16,240 --> 00:52:18,720
in terms of prf bound

1254
00:52:18,720 --> 00:52:21,280
having length free bounds for both of

1255
00:52:21,280 --> 00:52:23,520
them

1256
00:52:25,520 --> 00:52:27,520
so for 1k light mech

1257
00:52:27,520 --> 00:52:29,839
proving the the main difficulty is

1258
00:52:29,839 --> 00:52:32,400
improving one for 1k light max we have

1259
00:52:32,400 --> 00:52:33,920
to understand this this kind of

1260
00:52:33,920 --> 00:52:35,599
collision these are called input

1261
00:52:35,599 --> 00:52:38,720
collision uh and these are called

1262
00:52:38,720 --> 00:52:41,440
this is uh output collision

1263
00:52:41,440 --> 00:52:43,839
and for uh

1264
00:52:43,839 --> 00:52:46,720
single for just like light mech

1265
00:52:46,720 --> 00:52:48,079
construction

1266
00:52:48,079 --> 00:52:50,160
we had no issue with

1267
00:52:50,160 --> 00:52:51,760
i call and occul

1268
00:52:51,760 --> 00:52:54,240
because this this

1269
00:52:54,240 --> 00:52:56,800
were instantiated by different case

1270
00:52:56,800 --> 00:53:00,559
independent keys so it may happen that i

1271
00:53:00,559 --> 00:53:02,079
call happens but

1272
00:53:02,079 --> 00:53:04,319
four call does not happen for the same

1273
00:53:04,319 --> 00:53:07,359
tuple but in case of 1k light mech this

1274
00:53:07,359 --> 00:53:11,680
there some problem arises we have to

1275
00:53:11,680 --> 00:53:13,440
have them we have to

1276
00:53:13,440 --> 00:53:15,839
it cannot happen that they one of them

1277
00:53:15,839 --> 00:53:18,319
don't happen but the other one happens

1278
00:53:18,319 --> 00:53:20,640
so how to avoid this

1279
00:53:20,640 --> 00:53:23,040
for avoiding this we can

1280
00:53:23,040 --> 00:53:25,040
consider a straightforward approach with

1281
00:53:25,040 --> 00:53:27,359
which gives us the q squared l many

1282
00:53:27,359 --> 00:53:28,640
terms in the

1283
00:53:28,640 --> 00:53:31,760
numerator which is a problem we don't

1284
00:53:31,760 --> 00:53:33,839
get rid of the l term

1285
00:53:33,839 --> 00:53:34,640
so

1286
00:53:34,640 --> 00:53:36,240
our uh

1287
00:53:36,240 --> 00:53:39,119
way out from this was a trick called

1288
00:53:39,119 --> 00:53:42,160
reset sampling in this

1289
00:53:42,160 --> 00:53:44,400
technique we

1290
00:53:44,400 --> 00:53:45,680
just

1291
00:53:45,680 --> 00:53:47,040
sampled the

1292
00:53:47,040 --> 00:53:48,720
output values in

1293
00:53:48,720 --> 00:53:51,680
in two stages first we sampled it just

1294
00:53:51,680 --> 00:53:53,760
imitating the real construction

1295
00:53:53,760 --> 00:53:55,760
and then we sampled it

1296
00:53:55,760 --> 00:53:58,559
considering whether uh

1297
00:53:58,559 --> 00:54:02,079
it is a full collision tuple or not for

1298
00:54:02,079 --> 00:54:04,720
full creation tuple is just the i called

1299
00:54:04,720 --> 00:54:07,680
tuple that we discussed before

1300
00:54:07,680 --> 00:54:10,000
so this is the pictorial representation

1301
00:54:10,000 --> 00:54:13,119
if this kind of collision happens for

1302
00:54:13,119 --> 00:54:15,359
ah

1303
00:54:15,680 --> 00:54:19,920
some iaj then we just reset the z values

1304
00:54:19,920 --> 00:54:22,240
to be y in this way

1305
00:54:22,240 --> 00:54:23,440
z is the

1306
00:54:23,440 --> 00:54:25,520
uh output

1307
00:54:25,520 --> 00:54:27,250
of this

1308
00:54:27,250 --> 00:54:29,680
[Music]

1309
00:54:29,680 --> 00:54:33,359
there is this output for

1310
00:54:33,839 --> 00:54:36,240
first step stage of sampling and then we

1311
00:54:36,240 --> 00:54:39,040
just reset it to i

1312
00:54:39,040 --> 00:54:41,279
so

1313
00:54:41,520 --> 00:54:44,319
the intuition was that we we will get

1314
00:54:44,319 --> 00:54:46,799
joint events which which might help us

1315
00:54:46,799 --> 00:54:49,680
in getting rid of the l factor in the

1316
00:54:49,680 --> 00:54:51,599
numerator

1317
00:54:51,599 --> 00:54:54,720
and this is the this actually helps us

1318
00:54:54,720 --> 00:54:57,520
and we get this advantage

1319
00:54:57,520 --> 00:55:01,200
in the last result and this is l free

1320
00:55:01,200 --> 00:55:03,839
for this range of l

1321
00:55:03,839 --> 00:55:06,400
and in the second part uh

1322
00:55:06,400 --> 00:55:07,280
we

1323
00:55:07,280 --> 00:55:09,920
this is our ds liteman this construction

1324
00:55:09,920 --> 00:55:12,559
here we use a fixed one function fix one

1325
00:55:12,559 --> 00:55:13,599
is just

1326
00:55:13,599 --> 00:55:16,640
what is does it it just fixes the

1327
00:55:16,640 --> 00:55:19,920
most significant bit of the final input

1328
00:55:19,920 --> 00:55:22,160
and here we see that we always

1329
00:55:22,160 --> 00:55:24,319
concatenate zero in the beginning

1330
00:55:24,319 --> 00:55:26,559
so there is no chance of collision

1331
00:55:26,559 --> 00:55:28,000
between these

1332
00:55:28,000 --> 00:55:30,079
things

1333
00:55:30,079 --> 00:55:32,799
so no way to handle eye color indices

1334
00:55:32,799 --> 00:55:33,520
and

1335
00:55:33,520 --> 00:55:36,319
reset sampling is also not required here

1336
00:55:36,319 --> 00:55:37,280
and we

1337
00:55:37,280 --> 00:55:40,079
obtain a easier proof than one key light

1338
00:55:40,079 --> 00:55:42,720
mech and this is the final result for

1339
00:55:42,720 --> 00:55:46,880
uh like mcds construction

1340
00:55:46,880 --> 00:55:49,839
thank you very much

1341
00:55:51,280 --> 00:55:53,599
thank you samia

1342
00:55:53,599 --> 00:55:55,680
uh we have a question

1343
00:55:55,680 --> 00:55:57,520
from julia

1344
00:55:57,520 --> 00:55:59,359
govindan

1345
00:55:59,359 --> 00:56:03,799
would you like to speak your question

1346
00:56:05,200 --> 00:56:07,520
okay i will speak

1347
00:56:07,520 --> 00:56:10,960
what is the advantage of using letmac ds

1348
00:56:10,960 --> 00:56:14,480
over one key lightmag how does their

1349
00:56:14,480 --> 00:56:18,720
performance and divisions compare

1350
00:56:20,000 --> 00:56:22,720
first of all it uses

1351
00:56:22,720 --> 00:56:26,880
one key that's an advantage obviously

1352
00:56:26,880 --> 00:56:28,240
so

1353
00:56:28,240 --> 00:56:31,680
we reduce the number of keys and

1354
00:56:31,680 --> 00:56:34,160
it is uh

1355
00:56:34,160 --> 00:56:36,319
one of the main advantages

1356
00:56:36,319 --> 00:56:38,558
here

1357
00:56:38,880 --> 00:56:40,880
yeah so maybe i can add so my question

1358
00:56:40,880 --> 00:56:42,319
was uh

1359
00:56:42,319 --> 00:56:44,880
what is the advantages between the two

1360
00:56:44,880 --> 00:56:46,880
uh

1361
00:56:46,880 --> 00:56:49,280
lost lines so one key light mark and

1362
00:56:49,280 --> 00:56:50,799
like my gs

1363
00:56:50,799 --> 00:56:52,799
which both use one key

1364
00:56:52,799 --> 00:56:53,839
right

1365
00:56:53,839 --> 00:56:55,119
okay okay

1366
00:56:55,119 --> 00:56:56,559
actually one key light mac is the

1367
00:56:56,559 --> 00:56:59,040
classical one single key variant of

1368
00:56:59,040 --> 00:57:01,760
flight mac and we started with this and

1369
00:57:01,760 --> 00:57:03,599
we also proposed

1370
00:57:03,599 --> 00:57:06,960
light magnus is our proposal it is

1371
00:57:06,960 --> 00:57:08,720
this construction is given in the paper

1372
00:57:08,720 --> 00:57:10,880
but it was not

1373
00:57:10,880 --> 00:57:14,559
the classical single key light mech

1374
00:57:14,559 --> 00:57:16,960
yeah so then my question is like if i

1375
00:57:16,960 --> 00:57:19,440
want to choose one of these between how

1376
00:57:19,440 --> 00:57:20,720
do i decide to

1377
00:57:20,720 --> 00:57:23,119
uh which one i will choose

1378
00:57:23,119 --> 00:57:27,640
for real world protocol for example

1379
00:57:29,280 --> 00:57:32,000
is one like faster

1380
00:57:32,000 --> 00:57:35,119
or have better

1381
00:57:39,280 --> 00:57:42,559
uh security the range of the

1382
00:57:42,559 --> 00:57:44,720
length the message length

1383
00:57:44,720 --> 00:57:48,000
then for uh 1k light mac we has a lower

1384
00:57:48,000 --> 00:57:50,880
bound but for light magnus we don't have

1385
00:57:50,880 --> 00:57:54,559
a lower bound but if we consider the

1386
00:57:54,559 --> 00:57:58,319
upper bound then we see that

1387
00:57:59,359 --> 00:58:00,960
it is

1388
00:58:00,960 --> 00:58:03,520
an achievement in case of 1k lightning

1389
00:58:03,520 --> 00:58:06,520
so

1390
00:58:09,920 --> 00:58:12,160
so

1391
00:58:14,160 --> 00:58:17,440
uh even in my opinion this two may be

1392
00:58:17,440 --> 00:58:20,160
similar performing

1393
00:58:20,160 --> 00:58:22,400
like

1394
00:58:22,400 --> 00:58:24,799
except that the pound on the length we

1395
00:58:24,799 --> 00:58:27,359
have for 1k light mag

1396
00:58:27,359 --> 00:58:29,119
light mag ds

1397
00:58:29,119 --> 00:58:31,599
actually is a better bound

1398
00:58:31,599 --> 00:58:34,240
you can have a better larger length

1399
00:58:34,240 --> 00:58:35,920
otherwise the performance and the

1400
00:58:35,920 --> 00:58:37,520
security they are very similar very

1401
00:58:37,520 --> 00:58:39,839
close

1402
00:58:42,319 --> 00:58:44,400
okay yeah that answer my question thank

1403
00:58:44,400 --> 00:58:46,559
you

1404
00:58:49,119 --> 00:58:51,760
okay we have no other questions thank

1405
00:58:51,760 --> 00:58:53,920
you so much

1406
00:58:53,920 --> 00:58:56,240
thank you

1407
00:59:00,720 --> 00:59:03,440
okay uh so the next talk is

1408
00:59:03,440 --> 00:59:05,599
on the categorization of faulty

1409
00:59:05,599 --> 00:59:07,280
non-misuse resistant message

1410
00:59:07,280 --> 00:59:09,359
authentication

1411
00:59:09,359 --> 00:59:12,000
this is by yulong shin bart minik and

1412
00:59:12,000 --> 00:59:13,359
bart penil

1413
00:59:13,359 --> 00:59:17,799
and yulong will give the talk

1414
00:59:19,359 --> 00:59:22,880
um so thank you for the introduction i

1415
00:59:22,880 --> 00:59:26,160
hope that you can see my slide here

1416
00:59:26,160 --> 00:59:28,160
yes we can see

1417
00:59:28,160 --> 00:59:30,720
yeah i will just start with the talk so

1418
00:59:30,720 --> 00:59:31,520
um

1419
00:59:31,520 --> 00:59:33,200
yeah the this

1420
00:59:33,200 --> 00:59:35,280
this paper there was about snow space

1421
00:59:35,280 --> 00:59:38,400
map algorithms so as you uh some of you

1422
00:59:38,400 --> 00:59:40,640
may know that's the story of non-space

1423
00:59:40,640 --> 00:59:43,440
mega algorithms start with the bay and

1424
00:59:43,440 --> 00:59:47,760
the work of fresh mines carter in 1981

1425
00:59:47,760 --> 00:59:50,880
so the construction is shown here

1426
00:59:50,880 --> 00:59:53,760
it's apparently this work is based on

1427
00:59:53,760 --> 00:59:56,319
the early work of gilbert mcvillan said

1428
00:59:56,319 --> 00:59:59,200
swollen in 1974

1429
00:59:59,200 --> 01:00:03,839
and if this f is um a security left then

1430
01:00:03,839 --> 01:00:06,160
the resulting construction achieves

1431
01:00:06,160 --> 01:00:07,920
empty security

1432
01:00:07,920 --> 01:00:10,480
but there are actually two limitations

1433
01:00:10,480 --> 01:00:13,440
about this type of mac

1434
01:00:13,440 --> 01:00:15,280
namely the first one is that there are

1435
01:00:15,280 --> 01:00:18,880
not so many well analyzed dedicated pifs

1436
01:00:18,880 --> 01:00:20,799
so we usually

1437
01:00:20,799 --> 01:00:23,359
mix after um block type then the

1438
01:00:23,359 --> 01:00:25,599
resulting construction is a human cotton

1439
01:00:25,599 --> 01:00:26,880
soup

1440
01:00:26,880 --> 01:00:29,359
and this construction issues and divided

1441
01:00:29,359 --> 01:00:31,839
by two bits per second security

1442
01:00:31,839 --> 01:00:34,079
and this uh the second limitation is

1443
01:00:34,079 --> 01:00:36,480
that's the constructions um uh

1444
01:00:36,480 --> 01:00:39,520
dependency on the input nodes it means

1445
01:00:39,520 --> 01:00:42,079
that in the case of nonce repetition the

1446
01:00:42,079 --> 01:00:44,799
resulting construction will be broken

1447
01:00:44,799 --> 01:00:48,400
so in order to solve those problems um

1448
01:00:48,400 --> 01:00:51,680
cochlear id and ceramic reduce in 2016

1449
01:00:51,680 --> 01:00:53,680
the encrypted swahili culture with the

1450
01:00:53,680 --> 01:00:56,720
hispanic section which is showed in this

1451
01:00:56,720 --> 01:00:57,760
slide

1452
01:00:57,760 --> 01:00:59,599
so the proof that the construction have

1453
01:00:59,599 --> 01:01:02,240
two and five by three bit security in

1454
01:01:02,240 --> 01:01:05,040
the case of most respecting setting

1455
01:01:05,040 --> 01:01:08,160
however uh still burst upon security can

1456
01:01:08,160 --> 01:01:10,960
be obtained in the case of monsters and

1457
01:01:10,960 --> 01:01:13,599
misuse setting so

1458
01:01:13,599 --> 01:01:17,040
but but then one year later many

1459
01:01:17,040 --> 01:01:19,280
neighbors show that actually ambit

1460
01:01:19,280 --> 01:01:21,040
security of the construction can be

1461
01:01:21,040 --> 01:01:23,440
achieved in the non-suspecting setting

1462
01:01:23,440 --> 01:01:26,160
but their proof is based on the unfair

1463
01:01:26,160 --> 01:01:29,599
fight version of endometrial theory

1464
01:01:29,599 --> 01:01:31,680
and again while you're later that title

1465
01:01:31,680 --> 01:01:32,799
shows that

1466
01:01:32,799 --> 01:01:35,119
and there are actually

1467
01:01:35,119 --> 01:01:37,760
some kind of cure variant of

1468
01:01:37,760 --> 01:01:39,520
protection dates

1469
01:01:39,520 --> 01:01:41,119
and wcdm

1470
01:01:41,119 --> 01:01:43,839
construction where instead of using a

1471
01:01:43,839 --> 01:01:46,400
block cipher with independent key k2

1472
01:01:46,400 --> 01:01:48,559
here they replaced by the inverse of the

1473
01:01:48,559 --> 01:01:50,839
box i ever use using the same

1474
01:01:50,839 --> 01:01:52,400
pek-1

1475
01:01:52,400 --> 01:01:54,799
and um

1476
01:01:54,799 --> 01:01:57,760
yeah so sorry so as we can see here

1477
01:01:57,760 --> 01:01:58,640
that's

1478
01:01:58,640 --> 01:02:01,359
from this slide both ewcdm and steel

1479
01:02:01,359 --> 01:02:04,720
wcdm only achieves first about security

1480
01:02:04,720 --> 01:02:08,000
once a single month is misused

1481
01:02:08,000 --> 01:02:10,720
so in order to solve this problem that

1482
01:02:10,720 --> 01:02:12,480
helped present this following

1483
01:02:12,480 --> 01:02:14,720
construction in 2019

1484
01:02:14,720 --> 01:02:16,319
this construction is actually a

1485
01:02:16,319 --> 01:02:18,839
non-space variant of the

1486
01:02:18,839 --> 01:02:22,799
ehtm by minimum 2 in 2010

1487
01:02:22,799 --> 01:02:24,960
and they also introduced something

1488
01:02:24,960 --> 01:02:27,520
that's called the 40 nodes model where

1489
01:02:27,520 --> 01:02:30,640
the um 40 norms means that the mac query

1490
01:02:30,640 --> 01:02:33,039
with repeated nodes so this construction

1491
01:02:33,039 --> 01:02:34,720
was also introduced in one of the

1492
01:02:34,720 --> 01:02:37,440
previous presentations and of course um

1493
01:02:37,440 --> 01:02:39,520
the construction achieves um graceful

1494
01:02:39,520 --> 01:02:42,400
security degradation as mentioned before

1495
01:02:42,400 --> 01:02:43,760
so that means that

1496
01:02:43,760 --> 01:02:46,559
in the case of most reuse the security

1497
01:02:46,559 --> 01:02:48,480
will not immediately

1498
01:02:48,480 --> 01:02:50,880
drop to the birthday months however it

1499
01:02:50,880 --> 01:02:52,880
will drop with and

1500
01:02:52,880 --> 01:02:55,920
with terms of um of the number of faulty

1501
01:02:55,920 --> 01:02:59,440
noses and at some moments it will be um

1502
01:02:59,440 --> 01:03:02,400
yeah to get into the birth amount

1503
01:03:02,400 --> 01:03:03,359
so

1504
01:03:03,359 --> 01:03:06,000
the other shows that two and three bit

1505
01:03:06,000 --> 01:03:07,440
security

1506
01:03:07,440 --> 01:03:09,359
and is obtained by the construction as

1507
01:03:09,359 --> 01:03:12,400
long as the number of 40 months is below

1508
01:03:12,400 --> 01:03:14,720
2 to the power md5 by 3

1509
01:03:14,720 --> 01:03:18,160
but um the result is improved one year

1510
01:03:18,160 --> 01:03:20,720
later by choice

1511
01:03:20,720 --> 01:03:23,039
and they show that three and divided by

1512
01:03:23,039 --> 01:03:25,039
four bit security can be obtained as

1513
01:03:25,039 --> 01:03:27,920
long as the number of 40 notes is below

1514
01:03:27,920 --> 01:03:31,200
2 to power 3 and five by eight

1515
01:03:31,200 --> 01:03:33,280
so as we can see from

1516
01:03:33,280 --> 01:03:34,960
those constructions they are all based

1517
01:03:34,960 --> 01:03:36,640
on two blocks five of course and one

1518
01:03:36,640 --> 01:03:39,920
universal hash evaluation so you may get

1519
01:03:39,920 --> 01:03:41,119
the question

1520
01:03:41,119 --> 01:03:43,359
uh whether we can build

1521
01:03:43,359 --> 01:03:47,440
constructions that's using the same um

1522
01:03:47,440 --> 01:03:50,799
same amount of costs while achieving

1523
01:03:50,799 --> 01:03:52,799
more or less the same amount of or

1524
01:03:52,799 --> 01:03:55,760
security or i forget the security

1525
01:03:55,760 --> 01:03:58,400
in order to do that we prefer exhaustive

1526
01:03:58,400 --> 01:04:01,440
search over all mac algorithms that can

1527
01:04:01,440 --> 01:04:03,599
be built from two block cipher calls and

1528
01:04:03,599 --> 01:04:06,000
one universal hashtag variations so i'm

1529
01:04:06,000 --> 01:04:07,920
going to ignore all the details here and

1530
01:04:07,920 --> 01:04:11,119
on the abouts i only talk about

1531
01:04:11,119 --> 01:04:13,680
the most interesting part of the results

1532
01:04:13,680 --> 01:04:16,240
it seems that there are photos such as

1533
01:04:16,240 --> 01:04:18,960
based on the edm if you don't know what

1534
01:04:18,960 --> 01:04:22,079
edm is then and maybe it's better to

1535
01:04:22,079 --> 01:04:24,640
look at the full version of this talk or

1536
01:04:24,640 --> 01:04:27,119
to look into the paper so the first one

1537
01:04:27,119 --> 01:04:29,520
is the ewcdm that's already mentioned

1538
01:04:29,520 --> 01:04:31,760
before and the second one is something

1539
01:04:31,760 --> 01:04:34,640
that's uh apparent of the ewtn and we

1540
01:04:34,640 --> 01:04:35,760
can show that

1541
01:04:35,760 --> 01:04:37,680
and they have three and different four

1542
01:04:37,680 --> 01:04:39,599
but security and

1543
01:04:39,599 --> 01:04:42,079
non-suspecting setting but this 3m

1544
01:04:42,079 --> 01:04:44,160
defined before the securities because of

1545
01:04:44,160 --> 01:04:46,799
the limitation of the proof technique

1546
01:04:46,799 --> 01:04:49,440
that were used namely mere theory so we

1547
01:04:49,440 --> 01:04:51,680
believe that's probably ended security

1548
01:04:51,680 --> 01:04:54,319
is possible if we can and yeah if we

1549
01:04:54,319 --> 01:04:56,400
have better proof

1550
01:04:56,400 --> 01:04:59,200
and unfortunately the two constructions

1551
01:04:59,200 --> 01:05:01,039
do not have graceful security

1552
01:05:01,039 --> 01:05:03,520
implementation means that um the

1553
01:05:03,520 --> 01:05:05,440
security drops through the bursar bonds

1554
01:05:05,440 --> 01:05:07,920
in the case of single-month repetition

1555
01:05:07,920 --> 01:05:09,920
and the another two is actually more

1556
01:05:09,920 --> 01:05:12,720
interesting one namely um instead of

1557
01:05:12,720 --> 01:05:14,000
using the

1558
01:05:14,000 --> 01:05:16,160
first hash function here we actually it

1559
01:05:16,160 --> 01:05:18,319
here and we can show that they have

1560
01:05:18,319 --> 01:05:20,400
three and four bit security if the

1561
01:05:20,400 --> 01:05:22,559
number of 40 grams is below 2 to the

1562
01:05:22,559 --> 01:05:24,640
power 85 by 2

1563
01:05:24,640 --> 01:05:26,960
it's the last two constructions is based

1564
01:05:26,960 --> 01:05:28,880
on the self permutation

1565
01:05:28,880 --> 01:05:29,839
and

1566
01:05:29,839 --> 01:05:32,240
this soft permutation thing was also

1567
01:05:32,240 --> 01:05:34,799
measured since the first targets and

1568
01:05:34,799 --> 01:05:37,119
this is the one proposed by the title

1569
01:05:37,119 --> 01:05:39,839
the non-space variant of an

1570
01:05:39,839 --> 01:05:42,000
e-htm

1571
01:05:42,000 --> 01:05:45,599
and um this is a variant of it since we

1572
01:05:45,599 --> 01:05:47,599
can show that uh three and the five by

1573
01:05:47,599 --> 01:05:49,680
four with security can be achieved in

1574
01:05:49,680 --> 01:05:52,000
the case um if us

1575
01:05:52,000 --> 01:05:54,559
for the virus is below

1576
01:05:54,559 --> 01:05:57,359
2.305.8

1577
01:05:57,359 --> 01:06:00,079
so um here in this slide you can see the

1578
01:06:00,079 --> 01:06:02,799
four constructions with um

1579
01:06:02,799 --> 01:06:04,559
keyboards for security gradation there

1580
01:06:04,559 --> 01:06:07,200
are also other constructions that's um

1581
01:06:07,200 --> 01:06:07,920
yeah

1582
01:06:07,920 --> 01:06:10,720
that we obtained but the result is less

1583
01:06:10,720 --> 01:06:13,039
interesting compared to the those six

1584
01:06:13,039 --> 01:06:14,720
constructions

1585
01:06:14,720 --> 01:06:16,240
um so this

1586
01:06:16,240 --> 01:06:18,559
maybe one comment before and

1587
01:06:18,559 --> 01:06:21,039
for presentation so as also uh

1588
01:06:21,039 --> 01:06:23,680
recommended by one of the reviewers at

1589
01:06:23,680 --> 01:06:25,839
asia crypts uh

1590
01:06:25,839 --> 01:06:27,359
it will be very interesting to look at

1591
01:06:27,359 --> 01:06:29,440
the max security of the construction

1592
01:06:29,440 --> 01:06:32,640
since we focus on the prf securities is

1593
01:06:32,640 --> 01:06:34,559
um in order to

1594
01:06:34,559 --> 01:06:37,680
affect confusions

1595
01:06:37,680 --> 01:06:39,920
so this is end of mind talk i want to

1596
01:06:39,920 --> 01:06:43,440
thank you for your attention

1597
01:06:43,920 --> 01:06:48,319
thanks you long any

1598
01:06:58,839 --> 01:07:02,640
questions okay so

1599
01:07:03,599 --> 01:07:07,039
yeah so i was actually going to uh

1600
01:07:07,039 --> 01:07:09,520
ask about the max security questionnaire

1601
01:07:09,520 --> 01:07:11,520
thing but you mentioned that at the end

1602
01:07:11,520 --> 01:07:13,440
of yours

1603
01:07:13,440 --> 01:07:16,400
so i think yeah the for the max security

1604
01:07:16,400 --> 01:07:19,520
the most um yeah there are a mere

1605
01:07:19,520 --> 01:07:22,480
theories with uh normal equations

1606
01:07:22,480 --> 01:07:23,920
but i think the

1607
01:07:23,920 --> 01:07:26,640
most um difficult part about that is

1608
01:07:26,640 --> 01:07:28,799
probably the new bad events that are

1609
01:07:28,799 --> 01:07:31,200
introduced in order to

1610
01:07:31,200 --> 01:07:34,400
um yeah to handle those snow equations

1611
01:07:34,400 --> 01:07:38,079
so um but i think um in the work of um

1612
01:07:38,079 --> 01:07:41,599
troy at all about um this construction

1613
01:07:41,599 --> 01:07:43,599
they prove it's that they prove the max

1614
01:07:43,599 --> 01:07:45,200
security of this construction and so i

1615
01:07:45,200 --> 01:07:48,079
think some of the results can be reused

1616
01:07:48,079 --> 01:07:50,480
to prove this uh maxitude of those three

1617
01:07:50,480 --> 01:07:51,839
consumptions

1618
01:07:51,839 --> 01:07:54,880
so but of course yeah yeah data analysis

1619
01:07:54,880 --> 01:07:56,960
need to be performed

1620
01:07:56,960 --> 01:07:58,480
yeah

1621
01:07:58,480 --> 01:08:00,880
probably and uh the thing is uh

1622
01:08:00,880 --> 01:08:02,799
probably the mirror theory part

1623
01:08:02,799 --> 01:08:05,200
can be reused from the joyetel work

1624
01:08:05,200 --> 01:08:07,839
right now the extended mirror theory

1625
01:08:07,839 --> 01:08:09,680
thing where you have to consider the

1626
01:08:09,680 --> 01:08:11,280
verification queries

1627
01:08:11,280 --> 01:08:13,039
yes

1628
01:08:13,039 --> 01:08:14,880
from there uh

1629
01:08:14,880 --> 01:08:17,600
or i mean you can apply here but uh i

1630
01:08:17,600 --> 01:08:19,520
what i was thinking is

1631
01:08:19,520 --> 01:08:22,480
you have given in caught

1632
01:08:22,839 --> 01:08:26,719
on uh on direct directly putting the mac

1633
01:08:26,719 --> 01:08:28,880
security for the construction so

1634
01:08:28,880 --> 01:08:30,960
what i think uh in the choir toilet

1635
01:08:30,960 --> 01:08:33,120
paper they prove the security with

1636
01:08:33,120 --> 01:08:35,198
considering an ideal oracle where tidal

1637
01:08:35,198 --> 01:08:37,439
or actually is a random function right

1638
01:08:37,439 --> 01:08:39,359
so ideal in the ideal world you have a

1639
01:08:39,359 --> 01:08:41,439
random function and uh

1640
01:08:41,439 --> 01:08:44,479
abort oracle that always rejects your

1641
01:08:44,479 --> 01:08:46,479
verification queries

1642
01:08:46,479 --> 01:08:47,198
so

1643
01:08:47,198 --> 01:08:49,040
what i was thinking is whether

1644
01:08:49,040 --> 01:08:51,359
you have given in thought on

1645
01:08:51,359 --> 01:08:53,439
proving the security directly

1646
01:08:53,439 --> 01:08:55,600
or whether it can give you better bound

1647
01:08:55,600 --> 01:08:58,000
or not

1648
01:08:59,120 --> 01:09:01,040
the intuition is that that's probably

1649
01:09:01,040 --> 01:09:04,000
the the research will be the same

1650
01:09:04,000 --> 01:09:05,120
yeah

1651
01:09:05,120 --> 01:09:08,479
um tif security because of the um

1652
01:09:08,479 --> 01:09:10,719
yeah the limitation of near theory but

1653
01:09:10,719 --> 01:09:14,000
it's just just the intuition so um

1654
01:09:14,000 --> 01:09:15,040
yeah so

1655
01:09:15,040 --> 01:09:16,880
um

1656
01:09:16,880 --> 01:09:18,560
yeah yeah actually that's not the only

1657
01:09:18,560 --> 01:09:20,238
thing that i can say at this moment

1658
01:09:20,238 --> 01:09:21,198
without

1659
01:09:21,198 --> 01:09:24,158
we study at details the max security of

1660
01:09:24,158 --> 01:09:26,158
the constructions

1661
01:09:26,158 --> 01:09:26,960
yeah

1662
01:09:26,960 --> 01:09:29,679
thank you thanks for the

1663
01:09:29,679 --> 01:09:31,439
okay uh

1664
01:09:31,439 --> 01:09:34,678
there is

1665
01:09:37,198 --> 01:09:39,040
yeah so

1666
01:09:39,040 --> 01:09:41,759
beyond has a question in the chat

1667
01:09:41,759 --> 01:09:43,679
so it says i wonder if there was a

1668
01:09:43,679 --> 01:09:45,520
structure with and without a tight

1669
01:09:45,520 --> 01:09:48,479
attack

1670
01:09:48,479 --> 01:09:50,640
so do you have any comments on that you

1671
01:09:50,640 --> 01:09:51,839
wrong

1672
01:09:51,839 --> 01:09:53,520
yeah that's actually a very good

1673
01:09:53,520 --> 01:09:56,159
question so as i mentioned before the

1674
01:09:56,159 --> 01:09:58,159
the one base um

1675
01:09:58,159 --> 01:09:59,520
um

1676
01:09:59,520 --> 01:10:00,640
the one

1677
01:10:00,640 --> 01:10:03,600
of an ewcdm and in the variants there i

1678
01:10:03,600 --> 01:10:05,679
believe that's probably and they have a

1679
01:10:05,679 --> 01:10:08,239
bit security but the other four is very

1680
01:10:08,239 --> 01:10:10,719
difficult to say the main reason is that

1681
01:10:10,719 --> 01:10:13,199
um if you look at mute theory you can

1682
01:10:13,199 --> 01:10:14,960
see that's um

1683
01:10:14,960 --> 01:10:17,920
alternating that alternating path of

1684
01:10:17,920 --> 01:10:20,239
longer length can be created for those

1685
01:10:20,239 --> 01:10:21,840
four constructions

1686
01:10:21,840 --> 01:10:25,679
so um there is a chance that we can um

1687
01:10:25,679 --> 01:10:28,960
yeah use this as a attack us

1688
01:10:28,960 --> 01:10:31,760
as the same result for the that's um

1689
01:10:31,760 --> 01:10:35,679
and yeah the two roms elder lrw thing

1690
01:10:35,679 --> 01:10:38,400
so and there might be a chance that's um

1691
01:10:38,400 --> 01:10:40,400
the three and five by four bit security

1692
01:10:40,400 --> 01:10:42,640
of the fork and

1693
01:10:42,640 --> 01:10:44,080
yeah the four

1694
01:10:44,080 --> 01:10:45,840
constructions with squeeze or security

1695
01:10:45,840 --> 01:10:49,040
deportation can be tight but um the one

1696
01:10:49,040 --> 01:10:52,880
of um that's non-space ehtm thing um i

1697
01:10:52,880 --> 01:10:54,960
think if you focus only on the

1698
01:10:54,960 --> 01:10:57,600
non-respecting setting then probably and

1699
01:10:57,600 --> 01:10:59,440
you can even get better security because

1700
01:10:59,440 --> 01:11:01,600
in that case the first block cipher

1701
01:11:01,600 --> 01:11:04,239
evaluation yeah is always fresh if the

1702
01:11:04,239 --> 01:11:06,080
noise is always

1703
01:11:06,080 --> 01:11:09,120
so that's my intuition

1704
01:11:09,120 --> 01:11:10,840
yeah and even for the other

1705
01:11:10,840 --> 01:11:13,360
constructions uh

1706
01:11:13,360 --> 01:11:15,199
we are proving through the

1707
01:11:15,199 --> 01:11:17,840
random function way

1708
01:11:17,840 --> 01:11:18,719
is

1709
01:11:18,719 --> 01:11:21,040
in a way slight uh

1710
01:11:21,040 --> 01:11:23,040
restricted right if you go directly for

1711
01:11:23,040 --> 01:11:24,719
the max security of the construction

1712
01:11:24,719 --> 01:11:25,760
like

1713
01:11:25,760 --> 01:11:27,920
then maybe you can even get better

1714
01:11:27,920 --> 01:11:29,920
security like

1715
01:11:29,920 --> 01:11:31,600
if uh

1716
01:11:31,600 --> 01:11:32,480
because

1717
01:11:32,480 --> 01:11:34,480
the goal will be just

1718
01:11:34,480 --> 01:11:36,560
4g there right of

1719
01:11:36,560 --> 01:11:39,520
4g security or unforgivability

1720
01:11:39,520 --> 01:11:41,920
but right now you are also

1721
01:11:41,920 --> 01:11:44,239
requiring the pseudo-randomness property

1722
01:11:44,239 --> 01:11:45,600
so

1723
01:11:45,600 --> 01:11:46,480
maybe

1724
01:11:46,480 --> 01:11:50,320
you can get slightly better security

1725
01:11:50,640 --> 01:11:52,560
yeah um

1726
01:11:52,560 --> 01:11:55,199
yeah i'm not sure about it

1727
01:11:55,199 --> 01:11:57,280
something that i need to think in detail

1728
01:11:57,280 --> 01:11:59,520
so i cannot just yeah say that at this

1729
01:11:59,520 --> 01:12:01,760
moment

1730
01:12:01,760 --> 01:12:05,560
uh any more questions

1731
01:12:15,120 --> 01:12:17,760
i don't think there is

1732
01:12:17,760 --> 01:12:20,239
if not then let's thank you long again

1733
01:12:20,239 --> 01:12:23,199
thank you yulong for the talk

1734
01:12:23,199 --> 01:12:28,080
uh and this ends the session here

1735
01:12:28,159 --> 01:12:30,000
thank you very much for attending the

1736
01:12:30,000 --> 01:12:33,440
session on symmetric constructions

1737
01:12:33,440 --> 01:12:35,600
and uh

1738
01:12:35,600 --> 01:12:38,719
is k there

