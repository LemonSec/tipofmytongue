1
00:00:01,360 --> 00:00:04,160
hi everyone i'm joanna from inaria and

2
00:00:04,160 --> 00:00:06,160
i'm going to talk about latest saving

3
00:00:06,160 --> 00:00:08,160
via quattro modern wars

4
00:00:08,160 --> 00:00:11,440
so first of all i will introduce some

5
00:00:11,440 --> 00:00:14,880
notions about latest lsf and quantum

6
00:00:14,880 --> 00:00:17,680
computing then i will explain how our

7
00:00:17,680 --> 00:00:20,000
algorithm works and give some results

8
00:00:20,000 --> 00:00:22,320
about the complexity

9
00:00:22,320 --> 00:00:25,359
so first of all a latest is defined that

10
00:00:25,359 --> 00:00:28,240
way so it is a set of all integral

11
00:00:28,240 --> 00:00:31,119
linear combination of a given a basis

12
00:00:31,119 --> 00:00:32,558
for vectors

13
00:00:32,558 --> 00:00:34,719
under from this we can define the

14
00:00:34,719 --> 00:00:37,760
shortest vector problem svp

15
00:00:37,760 --> 00:00:40,320
which is given a lattice we have to find

16
00:00:40,320 --> 00:00:42,879
the shortest non-zero vector in this

17
00:00:42,879 --> 00:00:46,239
latest so here in this example we have

18
00:00:46,239 --> 00:00:50,640
the bases p1 on b2 in blue and

19
00:00:50,640 --> 00:00:51,760
the

20
00:00:51,760 --> 00:00:54,800
the latest vectors are represented by

21
00:00:54,800 --> 00:00:56,079
black dots

22
00:00:56,079 --> 00:00:59,600
under the short adjective problem ask us

23
00:00:59,600 --> 00:01:01,920
to find the shortest vector of the

24
00:01:01,920 --> 00:01:05,040
ladies and gendered by br1 on beethoven

25
00:01:05,040 --> 00:01:08,880
which is a vector in red

26
00:01:08,880 --> 00:01:12,640
so why do we want to solve svp basically

27
00:01:12,640 --> 00:01:15,200
from a cryptography point of view it is

28
00:01:15,200 --> 00:01:17,840
a mp hard problem and it is hard in

29
00:01:17,840 --> 00:01:18,960
average

30
00:01:18,960 --> 00:01:21,680
under there are several problems with

31
00:01:21,680 --> 00:01:22,960
which derive

32
00:01:22,960 --> 00:01:28,400
from svp such as sis lwe or ntiu

33
00:01:28,400 --> 00:01:29,360
and

34
00:01:29,360 --> 00:01:31,520
their silver quantum resistance

35
00:01:31,520 --> 00:01:34,000
cryptosystems are would

36
00:01:34,000 --> 00:01:36,159
which are believed to be quantum

37
00:01:36,159 --> 00:01:39,119
resistant uh which are based onto the

38
00:01:39,119 --> 00:01:41,119
derived problems

39
00:01:41,119 --> 00:01:42,479
um

40
00:01:42,479 --> 00:01:45,439
so from a cryptanalysis point of view

41
00:01:45,439 --> 00:01:48,399
all of these cryptosystems are broken if

42
00:01:48,399 --> 00:01:50,799
we can find a reduced basis of the

43
00:01:50,799 --> 00:01:53,119
lattice which is used

44
00:01:53,119 --> 00:01:55,920
under the bkhz algorithm finds a

45
00:01:55,920 --> 00:01:58,719
religious basis on using a miracle that

46
00:01:58,719 --> 00:02:01,280
serves svp as a subroutine

47
00:02:01,280 --> 00:02:04,240
so in a nutshell the security of these

48
00:02:04,240 --> 00:02:06,880
cryptosystems directly relies on the

49
00:02:06,880 --> 00:02:10,800
complexity of solid beam svp

50
00:02:10,800 --> 00:02:12,959
so there are several methods to solve

51
00:02:12,959 --> 00:02:16,080
svp the two main practicals today are by

52
00:02:16,080 --> 00:02:18,319
enumeration on by sieving

53
00:02:18,319 --> 00:02:21,760
and today all of the methods we know

54
00:02:21,760 --> 00:02:26,239
to solve svp run in exponential time

55
00:02:26,239 --> 00:02:29,680
so in this presentation i focus on

56
00:02:29,680 --> 00:02:31,280
the saving method

57
00:02:31,280 --> 00:02:34,879
and it is a heuristic middle that means

58
00:02:34,879 --> 00:02:35,680
that

59
00:02:35,680 --> 00:02:39,120
we use heuristics and the main of them

60
00:02:39,120 --> 00:02:43,200
as is that the latest vectors acts as

61
00:02:43,200 --> 00:02:44,560
random vectors

62
00:02:44,560 --> 00:02:46,640
and cheese implies that vectors of

63
00:02:46,640 --> 00:02:49,519
non-atmosphere are lying on the border

64
00:02:49,519 --> 00:02:50,879
of the sphere

65
00:02:50,879 --> 00:02:54,319
of radius air on dimension d

66
00:02:54,319 --> 00:02:56,959
this heuristic has been validated by

67
00:02:56,959 --> 00:02:59,040
experiments so it is not

68
00:02:59,040 --> 00:03:01,280
far from the reality to consider that

69
00:03:01,280 --> 00:03:05,760
latest vectors acts as random vectors

70
00:03:05,760 --> 00:03:07,920
so

71
00:03:08,159 --> 00:03:11,760
this is the algorithm or for receiving

72
00:03:11,760 --> 00:03:13,040
so

73
00:03:13,040 --> 00:03:16,319
the idea is that we begin with a list of

74
00:03:16,319 --> 00:03:19,440
n latest vectors which are of norm

75
00:03:19,440 --> 00:03:21,440
at most a central air

76
00:03:21,440 --> 00:03:24,080
and we take a parameter gamma strictly

77
00:03:24,080 --> 00:03:27,040
in fact one on on the output the

78
00:03:27,040 --> 00:03:28,480
algorithm

79
00:03:28,480 --> 00:03:31,599
will return a list with n with the same

80
00:03:31,599 --> 00:03:32,879
n as before

81
00:03:32,879 --> 00:03:35,840
with n latest vectors of norm at most

82
00:03:35,840 --> 00:03:37,680
gamma r so

83
00:03:37,680 --> 00:03:40,799
the output vectors are shorter than the

84
00:03:40,799 --> 00:03:43,120
vectors in the input

85
00:03:43,120 --> 00:03:46,640
and to this we can simply check each

86
00:03:46,640 --> 00:03:49,760
pair of vector in the list so and we

87
00:03:49,760 --> 00:03:51,599
check if um

88
00:03:51,599 --> 00:03:54,159
the norm of the difference is invariant

89
00:03:54,159 --> 00:03:55,680
for gamma r

90
00:03:55,680 --> 00:03:58,159
if it is the case we add a v minus the

91
00:03:58,159 --> 00:04:00,720
value so the difference to the output

92
00:04:00,720 --> 00:04:01,840
list

93
00:04:01,840 --> 00:04:04,000
here we see

94
00:04:04,000 --> 00:04:07,040
the shear of dimension z and radius r we

95
00:04:07,040 --> 00:04:08,799
have our

96
00:04:08,799 --> 00:04:11,680
our vectors all over the sphere

97
00:04:11,680 --> 00:04:15,120
and we see that if we have v and w

98
00:04:15,120 --> 00:04:16,639
latest vectors

99
00:04:16,639 --> 00:04:19,839
then v minus the value is a combination

100
00:04:19,839 --> 00:04:22,880
of two latest vectors so it is also a

101
00:04:22,880 --> 00:04:26,560
latest vector and if we have v and w

102
00:04:26,560 --> 00:04:28,880
which are close at angle

103
00:04:28,880 --> 00:04:31,919
then v minus w can be shorter than v or

104
00:04:31,919 --> 00:04:33,280
w

105
00:04:33,280 --> 00:04:37,440
um the limit angle also that is true

106
00:04:37,440 --> 00:04:41,040
is when we have v on the w which forms

107
00:04:41,040 --> 00:04:43,520
an angle of p over three

108
00:04:43,520 --> 00:04:44,320
so

109
00:04:44,320 --> 00:04:46,000
if um

110
00:04:46,000 --> 00:04:47,199
if they are

111
00:04:47,199 --> 00:04:48,479
if they have

112
00:04:48,479 --> 00:04:54,000
a bigger angle then they will not reduce

113
00:04:54,479 --> 00:04:55,280
um

114
00:04:55,280 --> 00:04:58,880
so to serve svp using uh which is uh

115
00:04:58,880 --> 00:05:01,680
it says algorithm uh we begin with a

116
00:05:01,680 --> 00:05:04,320
latest so it is uh defined by

117
00:05:04,320 --> 00:05:06,800
a basis of vectors

118
00:05:06,800 --> 00:05:09,440
on on the output we want to have the

119
00:05:09,440 --> 00:05:13,039
shortest vector of the latest um it is a

120
00:05:13,039 --> 00:05:14,800
probabilistic

121
00:05:14,800 --> 00:05:16,960
algorithm so it will

122
00:05:16,960 --> 00:05:18,560
probably return

123
00:05:18,560 --> 00:05:20,639
the shortest vector

124
00:05:20,639 --> 00:05:24,000
um to this the first step is to generate

125
00:05:24,000 --> 00:05:26,560
a list of n latest vectors

126
00:05:26,560 --> 00:05:29,440
for example by plant's algorithm

127
00:05:29,440 --> 00:05:32,240
and here the value of n

128
00:05:32,240 --> 00:05:33,360
is the

129
00:05:33,360 --> 00:05:36,880
smallest value so such that we have

130
00:05:36,880 --> 00:05:38,479
at least

131
00:05:38,479 --> 00:05:40,479
one vector

132
00:05:40,479 --> 00:05:42,800
which reduce with another vector in the

133
00:05:42,800 --> 00:05:46,240
list of n vectors so it is the smallest

134
00:05:46,240 --> 00:05:50,560
values such that we can have n

135
00:05:50,720 --> 00:05:53,840
n vectors in input on n vectors in

136
00:05:53,840 --> 00:05:56,479
output

137
00:05:56,479 --> 00:06:00,160
so we have our lists uh y lattice d list

138
00:06:00,160 --> 00:06:02,160
does not concern containing a short

139
00:06:02,160 --> 00:06:05,360
vector then we apply a steve step

140
00:06:05,360 --> 00:06:06,560
on it

141
00:06:06,560 --> 00:06:10,720
with a parameter gamma be close to one

142
00:06:10,720 --> 00:06:12,560
then we return the shortest vector we

143
00:06:12,560 --> 00:06:14,880
have found with this method

144
00:06:14,880 --> 00:06:16,240
we see that

145
00:06:16,240 --> 00:06:17,680
at the beginning

146
00:06:17,680 --> 00:06:21,199
when we have just generated the list l

147
00:06:21,199 --> 00:06:24,639
as the num of the vectors are actually

148
00:06:24,639 --> 00:06:26,080
at most r

149
00:06:26,080 --> 00:06:28,479
of our certain r which is the maximum of

150
00:06:28,479 --> 00:06:29,600
the norm of

151
00:06:29,600 --> 00:06:31,039
the vectors

152
00:06:31,039 --> 00:06:33,600
so after the first iteration in the

153
00:06:33,600 --> 00:06:34,960
while loop

154
00:06:34,960 --> 00:06:37,680
the norm of the vector are at most gamma

155
00:06:37,680 --> 00:06:38,720
r

156
00:06:38,720 --> 00:06:42,080
after the second iteration we

157
00:06:42,080 --> 00:06:43,280
we

158
00:06:43,280 --> 00:06:44,479
win

159
00:06:44,479 --> 00:06:46,639
again a vector gamma so it is gamma

160
00:06:46,639 --> 00:06:49,599
square r and after only a polynomial

161
00:06:49,599 --> 00:06:50,960
time uh

162
00:06:50,960 --> 00:06:53,680
indeed the dimension of the lattice

163
00:06:53,680 --> 00:06:54,720
we

164
00:06:54,720 --> 00:06:56,479
we have a gamma

165
00:06:56,479 --> 00:06:59,520
power polynomial of d

166
00:06:59,520 --> 00:07:02,400
times r so it is exponentially

167
00:07:02,400 --> 00:07:05,759
lower than the first r we had

168
00:07:05,759 --> 00:07:09,039
so we can expect that there is a short

169
00:07:09,039 --> 00:07:11,280
vector in the sphere of

170
00:07:11,280 --> 00:07:13,360
these radius

171
00:07:13,360 --> 00:07:16,639
so the complexity of cis algorithm is in

172
00:07:16,639 --> 00:07:19,599
n square because we have n square pairs

173
00:07:19,599 --> 00:07:22,080
in the list of size l

174
00:07:22,080 --> 00:07:25,199
in size n to check so it is this

175
00:07:25,199 --> 00:07:27,520
complexity under for the space

176
00:07:27,520 --> 00:07:30,160
complexity it is just n because we have

177
00:07:30,160 --> 00:07:34,639
to store the n vectors of the list

178
00:07:35,199 --> 00:07:38,080
so this algorithm can be

179
00:07:38,080 --> 00:07:39,039
improved

180
00:07:39,039 --> 00:07:41,759
by using a filtering so the idea is that

181
00:07:41,759 --> 00:07:44,000
we only want to check pairs of clothes

182
00:07:44,000 --> 00:07:46,800
vectors because all of the vectors which

183
00:07:46,800 --> 00:07:50,080
are from more than pure3

184
00:07:50,080 --> 00:07:53,039
they are not interesting us because they

185
00:07:53,039 --> 00:07:55,120
are not reducing each other

186
00:07:55,120 --> 00:07:56,240
so

187
00:07:56,240 --> 00:07:58,720
to do this we use filters

188
00:07:58,720 --> 00:08:00,000
so

189
00:08:00,000 --> 00:08:02,560
a filter is characterized by a center s

190
00:08:02,560 --> 00:08:05,199
which is basically a vector over the

191
00:08:05,199 --> 00:08:06,240
sphere

192
00:08:06,240 --> 00:08:08,479
and an angle alpha

193
00:08:08,479 --> 00:08:10,720
so here we have

194
00:08:10,720 --> 00:08:12,479
the sphere

195
00:08:12,479 --> 00:08:13,759
um

196
00:08:13,759 --> 00:08:17,520
we have a filter of center s on angle

197
00:08:17,520 --> 00:08:20,879
alpha under here v if

198
00:08:20,879 --> 00:08:24,560
v is a fungal at most alpha with s so we

199
00:08:24,560 --> 00:08:28,080
can say that v is in the filter of

200
00:08:28,080 --> 00:08:30,479
center s and the angle alpha and the

201
00:08:30,479 --> 00:08:34,080
value is outside this filter

202
00:08:34,080 --> 00:08:34,958
so

203
00:08:34,958 --> 00:08:36,080
to improve

204
00:08:36,080 --> 00:08:38,320
the sieve using this

205
00:08:38,320 --> 00:08:40,399
the first step is to generate filters

206
00:08:40,399 --> 00:08:42,958
all over the sphere and through this we

207
00:08:42,958 --> 00:08:45,920
consider a code on region we consider

208
00:08:45,920 --> 00:08:49,120
that as code words are the centers of

209
00:08:49,120 --> 00:08:50,959
the filters

210
00:08:50,959 --> 00:08:53,200
then we add each vector to its nearest

211
00:08:53,200 --> 00:08:54,399
filters of

212
00:08:54,399 --> 00:08:56,560
atmos alpha with it

213
00:08:56,560 --> 00:08:57,360
so

214
00:08:57,360 --> 00:08:59,760
to do this we use

215
00:08:59,760 --> 00:09:01,519
list decoding algorithm which is

216
00:09:01,519 --> 00:09:04,320
provided by the code structure

217
00:09:04,320 --> 00:09:05,680
and then

218
00:09:05,680 --> 00:09:08,800
we search for reducing pairs so for each

219
00:09:08,800 --> 00:09:11,839
vector we search reducing one within its

220
00:09:11,839 --> 00:09:13,279
vector

221
00:09:13,279 --> 00:09:15,920
so it is instead of checking in the word

222
00:09:15,920 --> 00:09:19,040
list we only check in the filters

223
00:09:19,040 --> 00:09:20,240
so

224
00:09:20,240 --> 00:09:23,279
first is the third step we can do it

225
00:09:23,279 --> 00:09:25,760
classically by taking each vector one by

226
00:09:25,760 --> 00:09:28,320
one or we can do it conformally by a

227
00:09:28,320 --> 00:09:30,800
gravel search

228
00:09:30,800 --> 00:09:31,839
um

229
00:09:31,839 --> 00:09:34,560
so about the complexity

230
00:09:34,560 --> 00:09:35,519
for the

231
00:09:35,519 --> 00:09:38,080
original receiver it was that yes and we

232
00:09:38,080 --> 00:09:42,080
see that uh using lsf it reduces a lot

233
00:09:42,080 --> 00:09:45,920
the time experience so our goal was to

234
00:09:45,920 --> 00:09:48,839
reduce against his um this time

235
00:09:48,839 --> 00:09:51,600
experience so now for the quantum

236
00:09:51,600 --> 00:09:54,080
computing parts

237
00:09:54,080 --> 00:09:55,839
one of the most

238
00:09:55,839 --> 00:09:56,800
famous

239
00:09:56,800 --> 00:09:59,760
quantum algorithm is reverse algorithm

240
00:09:59,760 --> 00:10:02,399
so the idea is that we have

241
00:10:02,399 --> 00:10:05,600
n data on the a check function

242
00:10:05,600 --> 00:10:06,640
that uh

243
00:10:06,640 --> 00:10:08,000
take an

244
00:10:08,000 --> 00:10:10,079
x in um

245
00:10:10,079 --> 00:10:13,519
in input and return uh zero or one on

246
00:10:13,519 --> 00:10:14,320
the

247
00:10:14,320 --> 00:10:17,040
the output of gregor's algorithm is to

248
00:10:17,040 --> 00:10:20,800
return and next so that we have f of

249
00:10:20,800 --> 00:10:24,079
f of x or which value 1

250
00:10:24,079 --> 00:10:26,640
so reverse

251
00:10:26,640 --> 00:10:29,120
does this calculation in the square root

252
00:10:29,120 --> 00:10:31,760
of n steps

253
00:10:31,760 --> 00:10:34,800
where in a classic model we are

254
00:10:34,800 --> 00:10:38,320
we have to uh they to take n steps uh

255
00:10:38,320 --> 00:10:41,680
until we find the correct answer

256
00:10:41,680 --> 00:10:44,800
another very very useful algorithm

257
00:10:44,800 --> 00:10:47,920
controlling is a the control modem work

258
00:10:47,920 --> 00:10:49,440
so it takes in

259
00:10:49,440 --> 00:10:53,600
in its input a graph j on the function f

260
00:10:53,600 --> 00:10:54,880
as before

261
00:10:54,880 --> 00:10:58,000
um and we can choose f as a just we have

262
00:10:58,000 --> 00:11:01,279
a f of a vertex value in one

263
00:11:01,279 --> 00:11:04,160
as we want on the we call it a marked

264
00:11:04,160 --> 00:11:05,440
vertex

265
00:11:05,440 --> 00:11:08,560
under the control random world returns a

266
00:11:08,560 --> 00:11:11,120
mere vertex

267
00:11:11,120 --> 00:11:12,880
so i will explain

268
00:11:12,880 --> 00:11:15,440
further this is with an example to be

269
00:11:15,440 --> 00:11:17,680
more concrete

270
00:11:17,680 --> 00:11:18,640
so

271
00:11:18,640 --> 00:11:19,440
now

272
00:11:19,440 --> 00:11:22,079
our algorithm is a basically a sieve

273
00:11:22,079 --> 00:11:24,399
step so we begin with n like these

274
00:11:24,399 --> 00:11:28,720
vectors of norm atmosphere and air

275
00:11:29,519 --> 00:11:30,399
um

276
00:11:30,399 --> 00:11:32,800
a list of the same number of ladies

277
00:11:32,800 --> 00:11:35,120
exactly but they are shorter

278
00:11:35,120 --> 00:11:38,320
the main idea was to take the previous

279
00:11:38,320 --> 00:11:39,680
best

280
00:11:39,680 --> 00:11:42,079
quantum algorithm and to replace the

281
00:11:42,079 --> 00:11:44,399
grover's such step by a consume random

282
00:11:44,399 --> 00:11:46,320
work

283
00:11:46,320 --> 00:11:47,120
so

284
00:11:47,120 --> 00:11:48,720
for this first step

285
00:11:48,720 --> 00:11:50,800
we sample a code on the

286
00:11:50,800 --> 00:11:53,120
associated alpha filters so there are

287
00:11:53,120 --> 00:11:54,399
filters of

288
00:11:54,399 --> 00:11:57,680
angle alpha and then we insert each list

289
00:11:57,680 --> 00:12:00,079
vectors in its unique nearest alpha

290
00:12:00,079 --> 00:12:01,040
filter

291
00:12:01,040 --> 00:12:03,120
so basically it is

292
00:12:03,120 --> 00:12:04,480
separate

293
00:12:04,480 --> 00:12:07,519
these types separates the sphere into a

294
00:12:07,519 --> 00:12:11,920
large areas of angle alpha

295
00:12:11,920 --> 00:12:13,440
and we can choose

296
00:12:13,440 --> 00:12:15,760
with a test parameter c we're going to

297
00:12:15,760 --> 00:12:19,279
show the number of vectors there in each

298
00:12:19,279 --> 00:12:21,600
alpha area

299
00:12:21,600 --> 00:12:24,480
and we will optimize later the the

300
00:12:24,480 --> 00:12:26,240
parameter c

301
00:12:26,240 --> 00:12:27,360
so here

302
00:12:27,360 --> 00:12:30,639
we have a again our sphere of dimension

303
00:12:30,639 --> 00:12:31,519
d

304
00:12:31,519 --> 00:12:35,440
uh we have a filter of a center s on the

305
00:12:35,440 --> 00:12:39,040
other we we consider that latest vectors

306
00:12:39,040 --> 00:12:39,760
act

307
00:12:39,760 --> 00:12:42,320
as a random vectors uh in fact they are

308
00:12:42,320 --> 00:12:45,360
lying on the border of the shape of the

309
00:12:45,360 --> 00:12:48,160
filter so there are fungal alpha with

310
00:12:48,160 --> 00:12:49,680
the center s

311
00:12:49,680 --> 00:12:51,920
so we can consider that these vectors

312
00:12:51,920 --> 00:12:52,720
are

313
00:12:52,720 --> 00:12:54,880
d dimensional

314
00:12:54,880 --> 00:12:58,240
vectors so in fact if we

315
00:12:58,240 --> 00:13:00,160
take the difference between two of these

316
00:13:00,160 --> 00:13:01,279
vectors

317
00:13:01,279 --> 00:13:04,000
it is the same i have considering the

318
00:13:04,000 --> 00:13:06,720
residual vectors

319
00:13:06,720 --> 00:13:11,440
on the d minus one dimensional sphere

320
00:13:11,440 --> 00:13:14,800
and we can have

321
00:13:15,120 --> 00:13:17,120
an equivalence between the angle we are

322
00:13:17,120 --> 00:13:19,360
searching so we want to have reduced

323
00:13:19,360 --> 00:13:21,839
pairs on the d-dimensional sphere

324
00:13:21,839 --> 00:13:24,000
so pairs of vectors we

325
00:13:24,000 --> 00:13:26,480
are our fungal atmosphere of the tree

326
00:13:26,480 --> 00:13:29,120
under the corresponding angle

327
00:13:29,120 --> 00:13:30,880
between two

328
00:13:30,880 --> 00:13:33,760
residual vectors

329
00:13:33,760 --> 00:13:36,959
is a certain cita star alpha or which

330
00:13:36,959 --> 00:13:40,639
only depends on alpha

331
00:13:40,639 --> 00:13:42,639
so now um

332
00:13:42,639 --> 00:13:44,720
further steps 2

333
00:13:44,720 --> 00:13:46,720
we have our

334
00:13:46,720 --> 00:13:50,800
our areas of angle alpha and for each of

335
00:13:50,800 --> 00:13:52,320
these areas

336
00:13:52,320 --> 00:13:54,959
uh we check here in in the corresponding

337
00:13:54,959 --> 00:13:56,240
filter

338
00:13:56,240 --> 00:13:58,639
uh for forward

339
00:13:58,639 --> 00:13:59,920
for finding

340
00:13:59,920 --> 00:14:03,199
all of the solution in this area

341
00:14:03,199 --> 00:14:05,920
so to do this we start by constructing

342
00:14:05,920 --> 00:14:09,440
the vertex so to

343
00:14:09,440 --> 00:14:13,360
so we choose randomly empire c1

344
00:14:13,360 --> 00:14:15,600
it is another parameter

345
00:14:15,600 --> 00:14:18,560
we we choose n power c1 vectors from

346
00:14:18,560 --> 00:14:20,800
this current alpha filter

347
00:14:20,800 --> 00:14:23,040
then we sample a second

348
00:14:23,040 --> 00:14:25,680
layer of filtering so there are the beta

349
00:14:25,680 --> 00:14:28,079
filters of angle beta

350
00:14:28,079 --> 00:14:31,600
and we insert each vertex vector in its

351
00:14:31,600 --> 00:14:33,920
nearest beta filter

352
00:14:33,920 --> 00:14:36,720
and then we perform control random works

353
00:14:36,720 --> 00:14:39,920
in order to find all of the reducing

354
00:14:39,920 --> 00:14:45,040
pairs into the alpha filter

355
00:14:45,040 --> 00:14:45,839
so

356
00:14:45,839 --> 00:14:48,720
the graph we are using is a johnson

357
00:14:48,720 --> 00:14:49,600
graph

358
00:14:49,600 --> 00:14:51,839
so

359
00:14:52,560 --> 00:14:55,120
johnson graph here for parameter and

360
00:14:55,120 --> 00:14:57,600
power c on 84

361
00:14:57,600 --> 00:15:01,040
um it is control construction uh that

362
00:15:01,040 --> 00:15:02,800
way so we have

363
00:15:02,800 --> 00:15:05,839
uh for the vectors each vertex is a set

364
00:15:05,839 --> 00:15:07,680
of n power c one

365
00:15:07,680 --> 00:15:10,079
vectors which are chosen from the n

366
00:15:10,079 --> 00:15:12,560
power c vectors of the current alpha

367
00:15:12,560 --> 00:15:13,600
filter

368
00:15:13,600 --> 00:15:16,160
on the we consider this

369
00:15:16,160 --> 00:15:19,440
there is an edge between two vertexes uh

370
00:15:19,440 --> 00:15:21,839
if only if they differ exactly one

371
00:15:21,839 --> 00:15:22,800
vector

372
00:15:22,800 --> 00:15:25,199
so to see uh for

373
00:15:25,199 --> 00:15:26,480
more

374
00:15:26,480 --> 00:15:28,639
for a simpler example

375
00:15:28,639 --> 00:15:30,480
here we have the johnson graph of

376
00:15:30,480 --> 00:15:32,480
parameter five on two

377
00:15:32,480 --> 00:15:33,600
so

378
00:15:33,600 --> 00:15:36,800
we have five possible elements on the

379
00:15:36,800 --> 00:15:38,240
each vertex

380
00:15:38,240 --> 00:15:41,759
is a set of two elements um among these

381
00:15:41,759 --> 00:15:42,639
fives

382
00:15:42,639 --> 00:15:43,600
on the

383
00:15:43,600 --> 00:15:45,279
we say that there are

384
00:15:45,279 --> 00:15:48,079
um there is an edge between a two vector

385
00:15:48,079 --> 00:15:48,959
if

386
00:15:48,959 --> 00:15:50,000
uh

387
00:15:50,000 --> 00:15:52,000
there is an edge between two vertex if

388
00:15:52,000 --> 00:15:54,000
only if they differ by exactly one

389
00:15:54,000 --> 00:15:55,759
element

390
00:15:55,759 --> 00:15:56,639
so

391
00:15:56,639 --> 00:15:59,680
for the confirmed world we have our

392
00:15:59,680 --> 00:16:02,720
graph which is a well defined on the

393
00:16:02,720 --> 00:16:03,600
here

394
00:16:03,600 --> 00:16:06,959
we say that a vertex is not if only if

395
00:16:06,959 --> 00:16:10,560
it contains a pair of anger at most

396
00:16:10,560 --> 00:16:13,759
theta star alpha so if there are if

397
00:16:13,759 --> 00:16:18,320
there are residual vectors which are

398
00:16:18,320 --> 00:16:19,360
which are

399
00:16:19,360 --> 00:16:21,519
the residual vectors of the d

400
00:16:21,519 --> 00:16:23,440
dimensional vector

401
00:16:23,440 --> 00:16:25,839
which are reducing

402
00:16:25,839 --> 00:16:27,759
on the the control mode on work we

403
00:16:27,759 --> 00:16:28,959
return

404
00:16:28,959 --> 00:16:29,839
such

405
00:16:29,839 --> 00:16:32,800
mac vertex

406
00:16:32,800 --> 00:16:35,839
so now to explain how it is controlling

407
00:16:35,839 --> 00:16:37,440
the mold works

408
00:16:37,440 --> 00:16:40,560
uh here we have the graph which is a way

409
00:16:40,560 --> 00:16:43,600
of simplified and here we have the

410
00:16:43,600 --> 00:16:46,240
current vectors we are working in

411
00:16:46,240 --> 00:16:49,199
so at the beginning we have our n powers

412
00:16:49,199 --> 00:16:50,480
c1

413
00:16:50,480 --> 00:16:52,560
vectors

414
00:16:52,560 --> 00:16:53,519
um

415
00:16:53,519 --> 00:16:54,880
they are

416
00:16:54,880 --> 00:16:55,680
um

417
00:16:55,680 --> 00:16:58,079
so there are residual vectors on the we

418
00:16:58,079 --> 00:17:00,320
consider that they are lying on the

419
00:17:00,320 --> 00:17:02,839
sphere of the d minus one d

420
00:17:02,839 --> 00:17:06,079
motion then we

421
00:17:06,079 --> 00:17:08,720
regenerate the filters

422
00:17:08,720 --> 00:17:10,480
the beta filters

423
00:17:10,480 --> 00:17:14,240
and we add each vector in its newest

424
00:17:14,240 --> 00:17:16,799
filters

425
00:17:17,199 --> 00:17:19,039
now we begin the

426
00:17:19,039 --> 00:17:23,439
uh the work so on the graph we are here

427
00:17:23,439 --> 00:17:26,319
uh by adding this vector from the

428
00:17:26,319 --> 00:17:29,520
current alpha vector so venu

429
00:17:29,520 --> 00:17:32,160
we compute its

430
00:17:32,160 --> 00:17:34,880
its nearest filters

431
00:17:34,880 --> 00:17:38,160
and then we check in its new restrictors

432
00:17:38,160 --> 00:17:39,520
if there is

433
00:17:39,520 --> 00:17:40,480
a

434
00:17:40,480 --> 00:17:42,080
vector which

435
00:17:42,080 --> 00:17:44,400
which reduces wheels venue

436
00:17:44,400 --> 00:17:47,120
if it is the case we win and we return

437
00:17:47,120 --> 00:17:48,559
the result

438
00:17:48,559 --> 00:17:49,840
and if

439
00:17:49,840 --> 00:17:53,360
we don't find a reducing pair uh then we

440
00:17:53,360 --> 00:17:56,960
pass to the next vertex so to do this uh

441
00:17:56,960 --> 00:18:01,200
we delete one vector one only and we add

442
00:18:01,200 --> 00:18:02,720
another

443
00:18:02,720 --> 00:18:05,120
venue from the current half filter

444
00:18:05,120 --> 00:18:08,240
and we do this again on again until we

445
00:18:08,240 --> 00:18:09,840
find a close

446
00:18:09,840 --> 00:18:11,760
vector to the new so

447
00:18:11,760 --> 00:18:14,240
by taking the difference of just two

448
00:18:14,240 --> 00:18:18,000
vectors we find a shorter vector

449
00:18:18,000 --> 00:18:21,120
so here uh on this scheme i explain for

450
00:18:21,120 --> 00:18:23,120
classic random work by choosing a

451
00:18:23,120 --> 00:18:25,840
randomly a vector to be deleted on the

452
00:18:25,840 --> 00:18:28,880
backdoor to be added in fact for the

453
00:18:28,880 --> 00:18:30,880
country modern world the difference is

454
00:18:30,880 --> 00:18:32,480
that

455
00:18:32,480 --> 00:18:35,120
we do not choose randomly because we do

456
00:18:35,120 --> 00:18:37,600
a quantum super position of all the

457
00:18:37,600 --> 00:18:40,000
possible

458
00:18:40,000 --> 00:18:43,039
neighborhood sizes

459
00:18:43,039 --> 00:18:45,360
so for the complexity of one control

460
00:18:45,360 --> 00:18:46,640
mode than work

461
00:18:46,640 --> 00:18:50,000
we need to have these five values

462
00:18:50,000 --> 00:18:51,039
so

463
00:18:51,039 --> 00:18:52,480
for the setup

464
00:18:52,480 --> 00:18:55,440
s it is a cost to construct the first

465
00:18:55,440 --> 00:18:56,960
vertex

466
00:18:56,960 --> 00:18:59,120
onto computes their beta filters for

467
00:18:59,120 --> 00:19:01,840
each of each vectors

468
00:19:01,840 --> 00:19:03,360
then we have

469
00:19:03,360 --> 00:19:06,400
update costs so we construct the quantum

470
00:19:06,400 --> 00:19:08,799
superposition of all of the

471
00:19:08,799 --> 00:19:11,679
neighbors of the current vertex

472
00:19:11,679 --> 00:19:13,520
and

473
00:19:13,520 --> 00:19:17,200
we do during this step as a search of

474
00:19:17,200 --> 00:19:19,840
reducing vectors of venue

475
00:19:19,840 --> 00:19:22,160
within its beta filters

476
00:19:22,160 --> 00:19:24,960
by doing this step during the update

477
00:19:24,960 --> 00:19:27,760
step and factor the check step

478
00:19:27,760 --> 00:19:28,559
is

479
00:19:28,559 --> 00:19:30,720
immediate it is in a constant time

480
00:19:30,720 --> 00:19:33,840
because it is already down before

481
00:19:33,840 --> 00:19:36,160
then we also need

482
00:19:36,160 --> 00:19:38,960
epsilon the probability for a vertex to

483
00:19:38,960 --> 00:19:42,640
be mapped so for vectors to contain

484
00:19:42,640 --> 00:19:45,600
two vectors which which are reducing

485
00:19:45,600 --> 00:19:48,080
and finally delta which is the spectral

486
00:19:48,080 --> 00:19:50,480
gap of the graph

487
00:19:50,480 --> 00:19:53,520
so the overall complexity of a quantum

488
00:19:53,520 --> 00:19:56,480
random work is a teas

489
00:19:56,480 --> 00:19:58,240
formula so

490
00:19:58,240 --> 00:19:59,520
as

491
00:19:59,520 --> 00:20:02,000
the only difference with the quantum

492
00:20:02,000 --> 00:20:03,679
between a consumer number on the

493
00:20:03,679 --> 00:20:05,840
classical random work

494
00:20:05,840 --> 00:20:10,158
are the square roots over epsilon and

495
00:20:10,640 --> 00:20:11,440
so

496
00:20:11,440 --> 00:20:14,320
to summarize our algorithm

497
00:20:14,320 --> 00:20:17,840
we have a step one which separates the

498
00:20:17,840 --> 00:20:21,679
sphere into a large areas of alpha and

499
00:20:21,679 --> 00:20:22,559
then

500
00:20:22,559 --> 00:20:24,559
during the second step we are searching

501
00:20:24,559 --> 00:20:27,200
for all of the solutions

502
00:20:27,200 --> 00:20:30,080
inside of each of uh

503
00:20:30,080 --> 00:20:31,440
alpha areas

504
00:20:31,440 --> 00:20:33,039
so in fact

505
00:20:33,039 --> 00:20:35,120
doing this we are missing all of the

506
00:20:35,120 --> 00:20:37,840
solution for example where we have a

507
00:20:37,840 --> 00:20:40,080
registering pair v on the w

508
00:20:40,080 --> 00:20:40,960
and

509
00:20:40,960 --> 00:20:42,159
v is in

510
00:20:42,159 --> 00:20:45,360
an alpha area under the blue is in

511
00:20:45,360 --> 00:20:49,360
another alpha area so we have to

512
00:20:49,360 --> 00:20:51,039
run the step

513
00:20:51,039 --> 00:20:53,360
again and again until we get the n

514
00:20:53,360 --> 00:20:56,400
reduced vectors by changing the

515
00:20:56,400 --> 00:20:59,760
the alpha areas by uh changing the

516
00:20:59,760 --> 00:21:02,320
shelters

517
00:21:02,320 --> 00:21:06,240
so the complexity of this algorithm is

518
00:21:06,240 --> 00:21:08,880
uh in fact we are doing n a culture

519
00:21:08,880 --> 00:21:12,400
model works so the overall complexity is

520
00:21:12,400 --> 00:21:13,200
one

521
00:21:13,200 --> 00:21:14,159
and

522
00:21:14,159 --> 00:21:15,360
in fact the

523
00:21:15,360 --> 00:21:19,280
values of s epsilon delta and u are only

524
00:21:19,280 --> 00:21:22,080
depending on the three parameters we we

525
00:21:22,080 --> 00:21:25,120
can choose as we want so there are

526
00:21:25,120 --> 00:21:28,559
c so that we have c powers uh n's power

527
00:21:28,559 --> 00:21:31,840
c vectors their alpha filter

528
00:21:31,840 --> 00:21:34,320
we have n powers c1 vectors pair of

529
00:21:34,320 --> 00:21:37,760
vertex in the graph and then n bars c2

530
00:21:37,760 --> 00:21:41,120
vectors per beta filter

531
00:21:41,120 --> 00:21:44,559
so after a numerical optimization we get

532
00:21:44,559 --> 00:21:46,400
it is a three

533
00:21:46,400 --> 00:21:50,480
optimized parameter that gives

534
00:21:50,480 --> 00:21:53,919
a solution of svp in dimension d

535
00:21:53,919 --> 00:21:57,520
in time 2 power 0.

536
00:21:57,520 --> 00:21:58,880
25

537
00:21:58,880 --> 00:22:01,840
70 d

538
00:22:01,840 --> 00:22:06,639
on the we also have computed the

539
00:22:06,799 --> 00:22:10,320
the space complexities so we have um

540
00:22:10,320 --> 00:22:12,960
it is a three different uh types of

541
00:22:12,960 --> 00:22:14,080
memory

542
00:22:14,080 --> 00:22:14,799
so

543
00:22:14,799 --> 00:22:18,799
for the qram on contour memory um it's

544
00:22:18,799 --> 00:22:22,080
quite practical because it is um

545
00:22:22,080 --> 00:22:25,039
because we see that the space exponents

546
00:22:25,039 --> 00:22:29,679
are not as high as for the classical on

547
00:22:29,679 --> 00:22:31,200
the design

548
00:22:31,200 --> 00:22:32,960
for other

549
00:22:32,960 --> 00:22:35,760
for other saving algorithms it's much of

550
00:22:35,760 --> 00:22:37,280
the same

551
00:22:37,280 --> 00:22:39,919
number of order

552
00:22:39,919 --> 00:22:40,640
but

553
00:22:40,640 --> 00:22:43,280
it requires a model that allows crew

554
00:22:43,280 --> 00:22:46,399
among contour memory

555
00:22:47,360 --> 00:22:49,360
so finally we have

556
00:22:49,360 --> 00:22:53,120
trados so in fact if we have

557
00:22:53,120 --> 00:22:55,760
as much control memory as we want

558
00:22:55,760 --> 00:22:57,039
we can

559
00:22:57,039 --> 00:22:58,400
perform the

560
00:22:58,400 --> 00:23:00,320
the algorithm with the

561
00:23:00,320 --> 00:23:01,840
optimal time

562
00:23:01,840 --> 00:23:04,799
but if we do not have a

563
00:23:04,799 --> 00:23:08,720
if we have limited control memory we can

564
00:23:08,720 --> 00:23:11,120
still run the algorithm

565
00:23:11,120 --> 00:23:13,919
with a less control memory on the

566
00:23:13,919 --> 00:23:15,200
by choosing

567
00:23:15,200 --> 00:23:16,720
the

568
00:23:16,720 --> 00:23:19,520
majors in the right parameters

569
00:23:19,520 --> 00:23:23,679
we get a higher time but we can still um

570
00:23:23,679 --> 00:23:27,120
we can still get a solution

571
00:23:27,120 --> 00:23:30,400
so here it is the same of our qram

572
00:23:30,400 --> 00:23:31,600
limitation

573
00:23:31,600 --> 00:23:35,520
so we say that it is very close to

574
00:23:35,520 --> 00:23:38,559
two or fine curves

575
00:23:38,559 --> 00:23:39,840
uh so

576
00:23:39,840 --> 00:23:43,200
to do a synthesis uh of our test

577
00:23:43,200 --> 00:23:45,440
for the trade-offs uh in fact if we

578
00:23:45,440 --> 00:23:46,480
choose

579
00:23:46,480 --> 00:23:49,840
the best parameter for having a zero

580
00:23:49,840 --> 00:23:52,559
kilogram on zero control memory

581
00:23:52,559 --> 00:23:54,799
we recover the

582
00:23:54,799 --> 00:23:56,159
uh

583
00:23:56,159 --> 00:23:58,640
the time complexity of the actual best

584
00:23:58,640 --> 00:24:00,960
classical algorithm so the

585
00:24:00,960 --> 00:24:02,640
vp by receiving

586
00:24:02,640 --> 00:24:07,360
as then if we had some qm uh we recover

587
00:24:07,360 --> 00:24:08,799
here the

588
00:24:08,799 --> 00:24:10,720
uh complexity of the previous best

589
00:24:10,720 --> 00:24:13,760
quantum algorithm under here we add uh

590
00:24:13,760 --> 00:24:16,159
some qram on quantum memory and we have

591
00:24:16,159 --> 00:24:19,760
our optimal time

592
00:24:19,760 --> 00:24:23,679
um so to conclude uh in fact we

593
00:24:23,679 --> 00:24:25,760
uh we should with stage work that the

594
00:24:25,760 --> 00:24:28,400
time to break up to crypto system

595
00:24:28,400 --> 00:24:30,840
uh in fact it was lower than twisting

596
00:24:30,840 --> 00:24:34,640
before and concretely that means that

597
00:24:34,640 --> 00:24:39,200
before um if one acclaimed about having

598
00:24:39,200 --> 00:24:41,080
crypto stems with

599
00:24:41,080 --> 00:24:44,480
128 speeds of security in fact there are

600
00:24:44,480 --> 00:24:47,360
four bits of security or which are a lot

601
00:24:47,360 --> 00:24:49,279
and it is a

602
00:24:49,279 --> 00:24:51,760
requires fixed with a slight increase of

603
00:24:51,760 --> 00:24:54,000
the parameter

604
00:24:54,000 --> 00:24:55,440
so thank you very much for your

605
00:24:55,440 --> 00:24:58,440
attention

