1
00:00:00,960 --> 00:00:03,679
hi everyone my name is xiang ming and i

2
00:00:03,679 --> 00:00:06,480
will be presenting our work default

3
00:00:06,480 --> 00:00:07,839
cyber level

4
00:00:07,839 --> 00:00:09,920
resistance against differential for that

5
00:00:09,920 --> 00:00:12,160
tab

6
00:00:12,960 --> 00:00:15,920
this is the outline of my talk so we'll

7
00:00:15,920 --> 00:00:18,160
start with the introduction

8
00:00:18,160 --> 00:00:20,080
followed by our main contribution the

9
00:00:20,080 --> 00:00:22,560
dfa resistance framework

10
00:00:22,560 --> 00:00:23,600
and

11
00:00:23,600 --> 00:00:26,400
followed by the default which is an

12
00:00:26,400 --> 00:00:29,119
instantiation of the dfa resistance

13
00:00:29,119 --> 00:00:31,359
framework

14
00:00:31,359 --> 00:00:35,280
so first for the introduction

15
00:00:35,600 --> 00:00:37,520
before the attack is a form of sectional

16
00:00:37,520 --> 00:00:39,680
attack where the adversary will inject

17
00:00:39,680 --> 00:00:42,879
an external force to alter the internal

18
00:00:42,879 --> 00:00:46,000
computation of alcohol resulting in 40

19
00:00:46,000 --> 00:00:47,520
output

20
00:00:47,520 --> 00:00:49,760
and the differential for it

21
00:00:49,760 --> 00:00:51,039
is a

22
00:00:51,039 --> 00:00:53,600
subclass of for the attack that collects

23
00:00:53,600 --> 00:00:55,120
and compare

24
00:00:55,120 --> 00:00:58,160
the regular and 40 output from the same

25
00:00:58,160 --> 00:00:59,840
from a same input

26
00:00:59,840 --> 00:01:02,000
so for example

27
00:01:02,000 --> 00:01:02,719
the

28
00:01:02,719 --> 00:01:05,040
during the first computation we have the

29
00:01:05,040 --> 00:01:06,320
regular

30
00:01:06,320 --> 00:01:09,119
encryption from plaintext to ciphertext

31
00:01:09,119 --> 00:01:10,400
and

32
00:01:10,400 --> 00:01:13,040
during the second computation for the

33
00:01:13,040 --> 00:01:15,680
same plain text the attacker will inject

34
00:01:15,680 --> 00:01:16,640
some

35
00:01:16,640 --> 00:01:19,360
form to result in a different cipher

36
00:01:19,360 --> 00:01:22,000
text which is the 40 output

37
00:01:22,000 --> 00:01:25,439
and from this pair of cipher text

38
00:01:25,439 --> 00:01:26,400
they will

39
00:01:26,400 --> 00:01:30,640
try to recover the secret key k

40
00:01:31,119 --> 00:01:34,079
there are existing existing differential

41
00:01:34,079 --> 00:01:36,159
for attack counter measures

42
00:01:36,159 --> 00:01:38,720
one of it is the fault protection

43
00:01:38,720 --> 00:01:39,520
so

44
00:01:39,520 --> 00:01:41,600
given the

45
00:01:41,600 --> 00:01:44,240
block cipher circuit

46
00:01:44,240 --> 00:01:47,600
we can put a layer of physical shield

47
00:01:47,600 --> 00:01:51,040
or casing over it to protect against

48
00:01:51,040 --> 00:01:53,520
the for injection so during the

49
00:01:53,520 --> 00:01:55,280
computation even when the adversary

50
00:01:55,280 --> 00:01:56,880
tries to injure a fault

51
00:01:56,880 --> 00:01:59,119
this shoe will protect against

52
00:01:59,119 --> 00:02:00,719
altering of the

53
00:02:00,719 --> 00:02:02,320
computation

54
00:02:02,320 --> 00:02:05,119
but such a counter measure is usually

55
00:02:05,119 --> 00:02:05,840
the

56
00:02:05,840 --> 00:02:08,318
is a engineering solution and it is

57
00:02:08,318 --> 00:02:10,000
outside the scope of

58
00:02:10,000 --> 00:02:13,360
the cryptography design

59
00:02:14,000 --> 00:02:17,120
another way is through fault detection

60
00:02:17,120 --> 00:02:19,120
for example to have a duplicate

61
00:02:19,120 --> 00:02:23,120
computation so for the for given plain

62
00:02:23,120 --> 00:02:26,879
text you will be input to both the

63
00:02:26,879 --> 00:02:28,800
the encryption to

64
00:02:28,800 --> 00:02:31,040
compute the ciphertext and you will

65
00:02:31,040 --> 00:02:33,760
check if both ciphertexts are the same

66
00:02:33,760 --> 00:02:37,280
so if an adversary injects a fork in one

67
00:02:37,280 --> 00:02:38,400
of them

68
00:02:38,400 --> 00:02:40,560
then during the check of the ciphertext

69
00:02:40,560 --> 00:02:42,160
you will detect that

70
00:02:42,160 --> 00:02:43,120
there's a

71
00:02:43,120 --> 00:02:45,040
it's different and there's a fault and

72
00:02:45,040 --> 00:02:48,160
you will not produce an output

73
00:02:48,160 --> 00:02:50,560
another way is to

74
00:02:50,560 --> 00:02:53,280
incorporate some form of error detection

75
00:02:53,280 --> 00:02:55,440
code in the algorithm

76
00:02:55,440 --> 00:02:59,519
so so that when the photo is injected

77
00:02:59,519 --> 00:03:01,920
the error correction error detection

78
00:03:01,920 --> 00:03:03,920
code will be able to pick up that

79
00:03:03,920 --> 00:03:05,280
there's some

80
00:03:05,280 --> 00:03:08,080
error in it and then you will not give

81
00:03:08,080 --> 00:03:10,000
any output as well

82
00:03:10,000 --> 00:03:13,599
so this is another way to deter do to

83
00:03:13,599 --> 00:03:16,159
prevent the attacker from

84
00:03:16,159 --> 00:03:17,599
from getting the

85
00:03:17,599 --> 00:03:20,239
desired ciphertext to

86
00:03:20,239 --> 00:03:23,360
to recover the key

87
00:03:23,920 --> 00:03:24,959
however

88
00:03:24,959 --> 00:03:27,920
such method could also be defeated by

89
00:03:27,920 --> 00:03:30,000
more advanced adversary

90
00:03:30,000 --> 00:03:32,080
for example for the duplicate

91
00:03:32,080 --> 00:03:33,519
computation

92
00:03:33,519 --> 00:03:35,280
if the attacker can

93
00:03:35,280 --> 00:03:38,000
also do a duplicate form

94
00:03:38,000 --> 00:03:40,400
to have to inject the fault at the exact

95
00:03:40,400 --> 00:03:43,200
same position resulting in the

96
00:03:43,200 --> 00:03:45,360
exact same fault

97
00:03:45,360 --> 00:03:46,640
outputs

98
00:03:46,640 --> 00:03:47,680
then

99
00:03:47,680 --> 00:03:49,760
with the check you will still recognize

100
00:03:49,760 --> 00:03:52,239
it as the same result and

101
00:03:52,239 --> 00:03:55,200
continue to output the 40 result

102
00:03:55,200 --> 00:03:56,080
and

103
00:03:56,080 --> 00:03:58,560
for the exam for the case of the error

104
00:03:58,560 --> 00:04:01,840
detection code if the fault is

105
00:04:01,840 --> 00:04:03,760
large enough

106
00:04:03,760 --> 00:04:06,400
and beyond the detectable

107
00:04:06,400 --> 00:04:09,680
bound of the error detection code then

108
00:04:09,680 --> 00:04:11,599
you will not be able to

109
00:04:11,599 --> 00:04:13,519
pick up the

110
00:04:13,519 --> 00:04:16,639
error and it will also output the

111
00:04:16,639 --> 00:04:18,238
40 output

112
00:04:18,238 --> 00:04:18,959
so

113
00:04:18,959 --> 00:04:21,519
in both cases

114
00:04:21,519 --> 00:04:22,800
in both

115
00:04:22,800 --> 00:04:25,360
examples it could be overcome if the

116
00:04:25,360 --> 00:04:28,400
fault is beyond the detection capability

117
00:04:28,400 --> 00:04:29,520
of the

118
00:04:29,520 --> 00:04:32,320
quarter measure

119
00:04:32,880 --> 00:04:35,600
so our main contribution here is to

120
00:04:35,600 --> 00:04:39,040
propose a fault resilient

121
00:04:39,040 --> 00:04:40,160
method

122
00:04:40,160 --> 00:04:41,280
so

123
00:04:41,280 --> 00:04:44,240
and first thing it is a cipher level

124
00:04:44,240 --> 00:04:46,400
solution so we do not have to

125
00:04:46,400 --> 00:04:49,280
rely on engineering solution

126
00:04:49,280 --> 00:04:52,560
and it can be applied to existing block

127
00:04:52,560 --> 00:04:54,000
ciphers to

128
00:04:54,000 --> 00:04:57,840
protect against the dfa

129
00:04:57,840 --> 00:04:59,199
and

130
00:04:59,199 --> 00:05:01,440
the high-level idea is

131
00:05:01,440 --> 00:05:03,280
to impose a

132
00:05:03,280 --> 00:05:05,600
lower bound on the search complexity of

133
00:05:05,600 --> 00:05:07,199
the dfa

134
00:05:07,199 --> 00:05:10,479
so we do let the adversary to inject the

135
00:05:10,479 --> 00:05:12,320
phone and receive

136
00:05:12,320 --> 00:05:15,199
whatever cipher text they want but even

137
00:05:15,199 --> 00:05:17,360
with the set of ciphertexts

138
00:05:17,360 --> 00:05:19,680
they are going to have multiple

139
00:05:19,680 --> 00:05:21,520
key candidates

140
00:05:21,520 --> 00:05:23,280
and we are

141
00:05:23,280 --> 00:05:26,160
our main work is to load to give a lower

142
00:05:26,160 --> 00:05:28,000
bar on this

143
00:05:28,000 --> 00:05:31,680
uh key candidate space

144
00:05:32,639 --> 00:05:35,840
next i'll talk about the dfa resistance

145
00:05:35,840 --> 00:05:37,039
framework

146
00:05:37,039 --> 00:05:40,720
but before that i will give a quick

147
00:05:40,720 --> 00:05:43,120
recap on the

148
00:05:43,120 --> 00:05:45,600
xbox properties

149
00:05:45,600 --> 00:05:47,280
so

150
00:05:47,280 --> 00:05:50,080
and mbs box is a essentially a lookup

151
00:05:50,080 --> 00:05:51,759
table that maps

152
00:05:51,759 --> 00:05:54,800
some x value to another y value

153
00:05:54,800 --> 00:05:56,000
and

154
00:05:56,000 --> 00:05:57,199
given an

155
00:05:57,199 --> 00:05:59,759
input and output and a valid output

156
00:05:59,759 --> 00:06:01,039
difference

157
00:06:01,039 --> 00:06:03,759
say the small delta and the

158
00:06:03,759 --> 00:06:04,840
capital

159
00:06:04,840 --> 00:06:06,639
delta

160
00:06:06,639 --> 00:06:07,680
a

161
00:06:07,680 --> 00:06:10,080
x is a solution if

162
00:06:10,080 --> 00:06:13,919
you satisfy this equation over here

163
00:06:13,919 --> 00:06:14,639
so

164
00:06:14,639 --> 00:06:17,039
if you have a

165
00:06:17,039 --> 00:06:19,840
small difference delta and you get

166
00:06:19,840 --> 00:06:22,479
resultant

167
00:06:22,479 --> 00:06:24,720
large delta then

168
00:06:24,720 --> 00:06:26,000
x is a

169
00:06:26,000 --> 00:06:27,440
solution to it

170
00:06:27,440 --> 00:06:29,440
and here you can see that if x is a

171
00:06:29,440 --> 00:06:30,960
solution then

172
00:06:30,960 --> 00:06:33,919
x xor small delta is also a solution you

173
00:06:33,919 --> 00:06:37,199
simply just flip the

174
00:06:37,199 --> 00:06:38,880
computation here

175
00:06:38,880 --> 00:06:43,520
so solution will always come in pairs

176
00:06:43,520 --> 00:06:45,680
and

177
00:06:45,680 --> 00:06:47,759
for designer when

178
00:06:47,759 --> 00:06:49,360
design want to protect against the

179
00:06:49,360 --> 00:06:52,000
classical differential crit analysis

180
00:06:52,000 --> 00:06:53,440
usually we'll

181
00:06:53,440 --> 00:06:55,130
minimize the number of solution

182
00:06:55,130 --> 00:06:57,199
[Music]

183
00:06:57,199 --> 00:06:59,840
from this form of a

184
00:06:59,840 --> 00:07:03,318
differential property

185
00:07:04,639 --> 00:07:06,960
but minimizing the number of solutions

186
00:07:06,960 --> 00:07:09,840
actually makes the dfa easier

187
00:07:09,840 --> 00:07:13,919
so to give an example so if we zoom in

188
00:07:13,919 --> 00:07:17,680
to the last round of this

189
00:07:17,680 --> 00:07:20,479
block cipher and we zoom into one

190
00:07:20,479 --> 00:07:21,919
particular

191
00:07:21,919 --> 00:07:24,240
s-box position

192
00:07:24,240 --> 00:07:26,240
so

193
00:07:26,240 --> 00:07:28,319
the adversary can see the cipher text

194
00:07:28,319 --> 00:07:32,319
but because is some sub key xor to it so

195
00:07:32,319 --> 00:07:35,280
the output of the xbox is unknown

196
00:07:35,280 --> 00:07:37,440
similarly for the input the xbox is also

197
00:07:37,440 --> 00:07:39,599
unknown

198
00:07:39,599 --> 00:07:40,479
so

199
00:07:40,479 --> 00:07:42,880
what that adversary can do is to inject

200
00:07:42,880 --> 00:07:44,000
a fork

201
00:07:44,000 --> 00:07:45,120
at the

202
00:07:45,120 --> 00:07:48,319
x value here to produce some difference

203
00:07:48,319 --> 00:07:50,080
small delta

204
00:07:50,080 --> 00:07:50,400
and

205
00:07:50,400 --> 00:07:52,160
[Music]

206
00:07:52,160 --> 00:07:53,650
you can observe the

207
00:07:53,650 --> 00:07:55,520
[Music]

208
00:07:55,520 --> 00:07:58,080
output difference the big delta from the

209
00:07:58,080 --> 00:08:00,879
ciphertext here since the sub key

210
00:08:00,879 --> 00:08:03,120
addition is constant so the difference

211
00:08:03,120 --> 00:08:04,160
will

212
00:08:04,160 --> 00:08:06,080
be the same

213
00:08:06,080 --> 00:08:09,440
and through this small delta large delta

214
00:08:09,440 --> 00:08:11,120
differences

215
00:08:11,120 --> 00:08:13,039
and the property of the xbox the

216
00:08:13,039 --> 00:08:15,440
adversary can obtain the possible

217
00:08:15,440 --> 00:08:18,560
solution for x

218
00:08:18,560 --> 00:08:20,800
and from there he can compute the

219
00:08:20,800 --> 00:08:22,879
possible value for y

220
00:08:22,879 --> 00:08:27,120
and xoring the ciphertext you will get

221
00:08:27,120 --> 00:08:28,400
the possible

222
00:08:28,400 --> 00:08:31,520
sub key solutions

223
00:08:31,520 --> 00:08:32,640
and

224
00:08:32,640 --> 00:08:34,880
if the adversary were to repeat this

225
00:08:34,880 --> 00:08:36,880
process for different delta

226
00:08:36,880 --> 00:08:39,760
then they will you will get

227
00:08:39,760 --> 00:08:41,279
several different

228
00:08:41,279 --> 00:08:42,958
sub key candidates

229
00:08:42,958 --> 00:08:44,800
and

230
00:08:44,800 --> 00:08:46,480
the correct key

231
00:08:46,480 --> 00:08:47,279
the

232
00:08:47,279 --> 00:08:50,080
correct keys the correct sub key k

233
00:08:50,080 --> 00:08:52,959
will be an intersection of all these

234
00:08:52,959 --> 00:08:55,600
sub-key candidates

235
00:08:55,600 --> 00:08:57,680
so if the

236
00:08:57,680 --> 00:08:59,760
number of solution is small then

237
00:08:59,760 --> 00:09:02,240
with probably two or three

238
00:09:02,240 --> 00:09:04,320
set of sub-key candidates the adversary

239
00:09:04,320 --> 00:09:06,560
can recover the

240
00:09:06,560 --> 00:09:10,880
unique key unit sub key already

241
00:09:12,560 --> 00:09:15,360
our idea is to prevent the adversary

242
00:09:15,360 --> 00:09:19,200
from obtaining a unique sub key solution

243
00:09:19,200 --> 00:09:21,200
and we do that through

244
00:09:21,200 --> 00:09:23,760
the linear structure of s boxes

245
00:09:23,760 --> 00:09:24,640
so

246
00:09:24,640 --> 00:09:26,720
an element a is a

247
00:09:26,720 --> 00:09:29,360
linear structure of xbox s

248
00:09:29,360 --> 00:09:32,160
if for some constant b

249
00:09:32,160 --> 00:09:35,360
we have this formula holds for all

250
00:09:35,360 --> 00:09:37,120
possible

251
00:09:37,120 --> 00:09:39,760
z value

252
00:09:39,839 --> 00:09:40,170
and

253
00:09:40,170 --> 00:09:42,480
[Music]

254
00:09:42,480 --> 00:09:44,800
if x is a solution for

255
00:09:44,800 --> 00:09:46,880
some input output difference small delta

256
00:09:46,880 --> 00:09:48,560
and large delta

257
00:09:48,560 --> 00:09:49,760
then

258
00:09:49,760 --> 00:09:51,040
we know that

259
00:09:51,040 --> 00:09:54,640
x xor a will also be a solution as well

260
00:09:54,640 --> 00:09:56,800
so you can see that from the following

261
00:09:56,800 --> 00:09:58,720
formula

262
00:09:58,720 --> 00:10:00,160
sorry for the

263
00:10:00,160 --> 00:10:01,839
following equation

264
00:10:01,839 --> 00:10:03,600
so

265
00:10:03,600 --> 00:10:06,480
by the above definition

266
00:10:06,480 --> 00:10:08,000
the s

267
00:10:08,000 --> 00:10:13,040
x xor a can be rewritten as s x x of b

268
00:10:13,040 --> 00:10:15,040
similarly for the other one

269
00:10:15,040 --> 00:10:17,200
and the constant b can be cancelled off

270
00:10:17,200 --> 00:10:18,480
and we will get

271
00:10:18,480 --> 00:10:19,680
s x

272
00:10:19,680 --> 00:10:22,240
xor s x

273
00:10:22,240 --> 00:10:23,200
xor

274
00:10:23,200 --> 00:10:24,480
small delta

275
00:10:24,480 --> 00:10:27,279
and since we know small delta sorry

276
00:10:27,279 --> 00:10:29,440
since we know x is the

277
00:10:29,440 --> 00:10:32,720
solution for small delta dash delta then

278
00:10:32,720 --> 00:10:34,000
this will become

279
00:10:34,000 --> 00:10:36,000
this is equal to large data so it shows

280
00:10:36,000 --> 00:10:37,200
that

281
00:10:37,200 --> 00:10:41,279
xxl a is also a solution as well

282
00:10:41,279 --> 00:10:42,240
so

283
00:10:42,240 --> 00:10:44,800
if a is non-zero

284
00:10:44,800 --> 00:10:47,040
then the intersection of the key

285
00:10:47,040 --> 00:10:48,160
candidates

286
00:10:48,160 --> 00:10:50,079
will not give us a

287
00:10:50,079 --> 00:10:51,600
unique solution

288
00:10:51,600 --> 00:10:53,200
because for

289
00:10:53,200 --> 00:10:56,640
any input output difference

290
00:10:56,640 --> 00:10:58,800
when there is a solution x

291
00:10:58,800 --> 00:11:02,160
x xor a is also a solution as well

292
00:11:02,160 --> 00:11:03,519
so

293
00:11:03,519 --> 00:11:05,760
when you

294
00:11:05,760 --> 00:11:07,680
repeat the attack from before when you

295
00:11:07,680 --> 00:11:09,760
get a key candidate

296
00:11:09,760 --> 00:11:10,800
the

297
00:11:10,800 --> 00:11:11,760
thing can

298
00:11:11,760 --> 00:11:14,399
when you get a key candidate k

299
00:11:14,399 --> 00:11:16,959
k x or a is also another

300
00:11:16,959 --> 00:11:20,160
possible key candidate

301
00:11:21,360 --> 00:11:24,160
so that is for single xbox

302
00:11:24,160 --> 00:11:26,160
now if you consider the entire block

303
00:11:26,160 --> 00:11:28,560
cipher for 128 bit

304
00:11:28,560 --> 00:11:30,800
state size

305
00:11:30,800 --> 00:11:33,839
if we use 4 bit xbox then there will be

306
00:11:33,839 --> 00:11:35,360
32

307
00:11:35,360 --> 00:11:37,200
4bs boxes

308
00:11:37,200 --> 00:11:39,279
and for

309
00:11:39,279 --> 00:11:41,200
regular xbox

310
00:11:41,200 --> 00:11:43,680
regular xboxes there is only

311
00:11:43,680 --> 00:11:45,519
one linear structure which is the a

312
00:11:45,519 --> 00:11:47,920
equals to zero which is a trivial

313
00:11:47,920 --> 00:11:50,959
linear structure then

314
00:11:51,200 --> 00:11:53,760
it is possible for the adversary to

315
00:11:53,760 --> 00:11:56,880
find a unique solution and the key space

316
00:11:56,880 --> 00:11:58,720
is just one

317
00:11:58,720 --> 00:12:01,120
but if we have a

318
00:12:01,120 --> 00:12:02,720
as you see before if we have a linear

319
00:12:02,720 --> 00:12:03,920
structure a

320
00:12:03,920 --> 00:12:04,959
then

321
00:12:04,959 --> 00:12:06,959
there's guaranteed to have at least two

322
00:12:06,959 --> 00:12:09,600
solution per xbox no matter how many

323
00:12:09,600 --> 00:12:11,440
intersection you do

324
00:12:11,440 --> 00:12:16,000
then the key space is now 2 to the 32

325
00:12:16,000 --> 00:12:19,040
and if you have 4 linear structures then

326
00:12:19,040 --> 00:12:22,880
you can even achieve 2 to the 64

327
00:12:22,880 --> 00:12:24,480
key candidates

328
00:12:24,480 --> 00:12:25,839
so

329
00:12:25,839 --> 00:12:28,800
this increases the

330
00:12:28,800 --> 00:12:30,959
attack complexity for the adversary

331
00:12:30,959 --> 00:12:33,680
because no matter how many faults

332
00:12:33,680 --> 00:12:35,600
they inject how much no matter how many

333
00:12:35,600 --> 00:12:38,720
intersection they try to do they will

334
00:12:38,720 --> 00:12:41,279
always have

335
00:12:41,680 --> 00:12:44,480
a set of solutions

336
00:12:44,480 --> 00:12:47,600
and if we consider a bit as box

337
00:12:47,600 --> 00:12:48,720
because

338
00:12:48,720 --> 00:12:50,639
of the size we are able to have even

339
00:12:50,639 --> 00:12:52,639
more linear structures and

340
00:12:52,639 --> 00:12:54,639
hence potentially

341
00:12:54,639 --> 00:12:56,720
having an even larger

342
00:12:56,720 --> 00:12:59,360
key space

343
00:13:01,200 --> 00:13:04,480
so for our dfa resistance framework

344
00:13:04,480 --> 00:13:07,600
we propose a a health protection layer

345
00:13:07,600 --> 00:13:10,399
to protect existing block cipher against

346
00:13:10,399 --> 00:13:11,600
dfa

347
00:13:11,600 --> 00:13:14,800
so the layer work consists of rounds of

348
00:13:14,800 --> 00:13:18,839
s-boxes with linear structures

349
00:13:18,839 --> 00:13:22,560
and we will append it after the main

350
00:13:22,560 --> 00:13:25,119
cipher

351
00:13:25,200 --> 00:13:27,519
so when an adversary will inject fault

352
00:13:27,519 --> 00:13:30,160
at this protection layer

353
00:13:30,160 --> 00:13:31,839
the search complexity will be lower

354
00:13:31,839 --> 00:13:34,399
bound and as we discussed before for

355
00:13:34,399 --> 00:13:36,079
example is

356
00:13:36,079 --> 00:13:37,519
there'll be at least two to the x

357
00:13:37,519 --> 00:13:39,279
solutions

358
00:13:39,279 --> 00:13:42,399
that will do the x key solutions

359
00:13:42,399 --> 00:13:44,160
so another strategy that adversary could

360
00:13:44,160 --> 00:13:46,399
do is to inject the fork in the main

361
00:13:46,399 --> 00:13:47,600
cipher

362
00:13:47,600 --> 00:13:49,600
and hope that it will propagate through

363
00:13:49,600 --> 00:13:50,560
the

364
00:13:50,560 --> 00:13:52,320
this layer and then

365
00:13:52,320 --> 00:13:54,639
launch the same attack at the last round

366
00:13:54,639 --> 00:13:55,680
of the

367
00:13:55,680 --> 00:13:57,040
main cipher

368
00:13:57,040 --> 00:13:59,120
so to make this

369
00:13:59,120 --> 00:14:01,279
attack

370
00:14:01,279 --> 00:14:02,480
costly

371
00:14:02,480 --> 00:14:04,800
we want the

372
00:14:04,800 --> 00:14:05,760
the

373
00:14:05,760 --> 00:14:08,480
protection layer to have

374
00:14:08,480 --> 00:14:11,120
a differential upper bound of 2 to the

375
00:14:11,120 --> 00:14:12,800
minus x

376
00:14:12,800 --> 00:14:16,240
so if the attacker wants to propagate

377
00:14:16,240 --> 00:14:18,560
the difference through this layer they

378
00:14:18,560 --> 00:14:19,920
have to pay

379
00:14:19,920 --> 00:14:22,480
essentially the same course as

380
00:14:22,480 --> 00:14:24,480
guessing the

381
00:14:24,480 --> 00:14:27,920
all the possible key candidates

382
00:14:27,920 --> 00:14:28,639
and

383
00:14:28,639 --> 00:14:29,519
if the

384
00:14:29,519 --> 00:14:31,600
decryption oracle also requires some

385
00:14:31,600 --> 00:14:33,279
form of protection then

386
00:14:33,279 --> 00:14:36,480
we can prepend the layer as well so

387
00:14:36,480 --> 00:14:37,440
when

388
00:14:37,440 --> 00:14:39,279
the adversary do the

389
00:14:39,279 --> 00:14:40,800
decryption

390
00:14:40,800 --> 00:14:43,839
they can't do the foreign

391
00:14:43,839 --> 00:14:45,519
as well because we have a layer

392
00:14:45,519 --> 00:14:48,240
protecting it

393
00:14:51,600 --> 00:14:52,560
so

394
00:14:52,560 --> 00:14:56,399
next we will talk about default

395
00:14:56,959 --> 00:14:58,560
so default is a

396
00:14:58,560 --> 00:14:59,920
full-fledged

397
00:14:59,920 --> 00:15:02,880
dfa resistance cipher

398
00:15:02,880 --> 00:15:04,800
is comprised with

399
00:15:04,800 --> 00:15:06,160
with the two

400
00:15:06,160 --> 00:15:07,120
echo

401
00:15:07,120 --> 00:15:08,399
protection layer that we mentioned

402
00:15:08,399 --> 00:15:09,360
before

403
00:15:09,360 --> 00:15:10,839
sandwiching

404
00:15:10,839 --> 00:15:13,440
a a core

405
00:15:13,440 --> 00:15:16,560
layer here a core cipher here

406
00:15:16,560 --> 00:15:19,760
so the raw function is inspired by

407
00:15:19,760 --> 00:15:22,079
gif12a

408
00:15:22,079 --> 00:15:24,639
which for the

409
00:15:24,639 --> 00:15:26,560
default layer

410
00:15:26,560 --> 00:15:28,880
it is a 28 rounds

411
00:15:28,880 --> 00:15:29,839
with

412
00:15:29,839 --> 00:15:32,480
four bit s boxes that has four linear

413
00:15:32,480 --> 00:15:34,399
structures

414
00:15:34,399 --> 00:15:36,560
and for the default call

415
00:15:36,560 --> 00:15:39,120
it's a 24 round with

416
00:15:39,120 --> 00:15:42,480
4 bit xboxes but without

417
00:15:42,480 --> 00:15:44,320
the linear structure

418
00:15:44,320 --> 00:15:46,720
because

419
00:15:46,800 --> 00:15:48,480
with the linear structure it's actually

420
00:15:48,480 --> 00:15:50,560
very bad for

421
00:15:50,560 --> 00:15:52,480
it's very bad against

422
00:15:52,480 --> 00:15:54,079
differential uh the classical

423
00:15:54,079 --> 00:15:56,639
differential trim analysis

424
00:15:56,639 --> 00:15:59,360
so for the middle layer we want it to

425
00:15:59,360 --> 00:16:02,079
have some form of protection against the

426
00:16:02,079 --> 00:16:05,519
classical differential quick analysis

427
00:16:05,519 --> 00:16:06,399
so

428
00:16:06,399 --> 00:16:07,199
and

429
00:16:07,199 --> 00:16:10,560
for both layers the

430
00:16:10,560 --> 00:16:12,800
the permutation layer is

431
00:16:12,800 --> 00:16:13,839
the same

432
00:16:13,839 --> 00:16:15,040
same as the

433
00:16:15,040 --> 00:16:17,519
g128b permutation

434
00:16:17,519 --> 00:16:18,480
and

435
00:16:18,480 --> 00:16:20,800
for every round we also have a

436
00:16:20,800 --> 00:16:23,839
full state key addition

437
00:16:24,320 --> 00:16:27,680
so this default layer can be used for

438
00:16:27,680 --> 00:16:30,240
protecting any existing cipher as well

439
00:16:30,240 --> 00:16:33,199
so for example if you have

440
00:16:33,199 --> 00:16:36,399
gif or aes you can just

441
00:16:36,399 --> 00:16:38,320
put this

442
00:16:38,320 --> 00:16:41,040
default layer before and after the

443
00:16:41,040 --> 00:16:43,519
cipher

444
00:16:44,240 --> 00:16:45,600
and

445
00:16:45,600 --> 00:16:48,399
since we are using 4 bit xbox with four

446
00:16:48,399 --> 00:16:51,600
linear structures the our security goal

447
00:16:51,600 --> 00:16:52,720
against

448
00:16:52,720 --> 00:16:55,920
dfa is 64-bit security and

449
00:16:55,920 --> 00:16:56,759
for

450
00:16:56,759 --> 00:16:59,199
classical analysis we still want to

451
00:16:59,199 --> 00:17:04,119
achieve the standard 128b security

452
00:17:04,400 --> 00:17:05,919
next we talk about the hardware

453
00:17:05,919 --> 00:17:07,919
benchmarking results

454
00:17:07,919 --> 00:17:10,480
so we compare gif with

455
00:17:10,480 --> 00:17:12,079
we combat default we give because they

456
00:17:12,079 --> 00:17:13,599
have very similar

457
00:17:13,599 --> 00:17:15,199
structure

458
00:17:15,199 --> 00:17:17,199
and

459
00:17:17,199 --> 00:17:18,799
for

460
00:17:18,799 --> 00:17:22,160
if we put the uh the default layer

461
00:17:22,160 --> 00:17:23,520
over gives

462
00:17:23,520 --> 00:17:25,599
this is the

463
00:17:25,599 --> 00:17:29,280
benchmarking result alternatively we can

464
00:17:29,280 --> 00:17:30,640
use the

465
00:17:30,640 --> 00:17:32,480
existing duplicate

466
00:17:32,480 --> 00:17:34,240
computation method

467
00:17:34,240 --> 00:17:36,880
either we reuse the circuit

468
00:17:36,880 --> 00:17:39,840
and do the computation twice then

469
00:17:39,840 --> 00:17:42,000
in that case it will incur double the

470
00:17:42,000 --> 00:17:43,200
cycle

471
00:17:43,200 --> 00:17:46,320
or we can have two copies of the

472
00:17:46,320 --> 00:17:48,240
d circuit to do

473
00:17:48,240 --> 00:17:51,120
the duplicate computation in parallel

474
00:17:51,120 --> 00:17:53,120
so here you can see that

475
00:17:53,120 --> 00:17:55,120
if we were to put the

476
00:17:55,120 --> 00:17:58,000
to add the default layer

477
00:17:58,000 --> 00:18:00,160
on top of give

478
00:18:00,160 --> 00:18:01,760
the event agreement is actually very

479
00:18:01,760 --> 00:18:03,360
little

480
00:18:03,360 --> 00:18:04,480
very small

481
00:18:04,480 --> 00:18:04,800
and

482
00:18:04,800 --> 00:18:07,440
[Music]

483
00:18:07,440 --> 00:18:10,240
default is smaller than

484
00:18:10,240 --> 00:18:12,240
default has a smaller area compared to

485
00:18:12,240 --> 00:18:13,520
both

486
00:18:13,520 --> 00:18:16,799
the duplication method

487
00:18:18,559 --> 00:18:19,600
and for

488
00:18:19,600 --> 00:18:22,160
software benchmarking

489
00:18:22,160 --> 00:18:24,160
you can see that default

490
00:18:24,160 --> 00:18:26,840
we use give one to it as

491
00:18:26,840 --> 00:18:31,200
a as a reference so we can see that

492
00:18:31,200 --> 00:18:34,160
default is slightly faster than

493
00:18:34,160 --> 00:18:37,440
doing a give duplicate

494
00:18:37,440 --> 00:18:40,440
implementation

495
00:18:44,799 --> 00:18:48,080
and to conclude our work we propose the

496
00:18:48,080 --> 00:18:49,440
first

497
00:18:49,440 --> 00:18:53,440
cipher layer dfa resilient framework

498
00:18:53,440 --> 00:18:56,960
by using s-boxes with linear structure

499
00:18:56,960 --> 00:18:59,679
which is usually not used in

500
00:18:59,679 --> 00:19:01,919
normal cipher design because it is bad

501
00:19:01,919 --> 00:19:02,880
for

502
00:19:02,880 --> 00:19:06,080
a differential quick analysis

503
00:19:06,080 --> 00:19:08,880
and through that we can give a lower

504
00:19:08,880 --> 00:19:13,039
bound on the dfa key recovery complexity

505
00:19:13,039 --> 00:19:14,080
and

506
00:19:14,080 --> 00:19:16,880
our ad hoc protection layer can be

507
00:19:16,880 --> 00:19:19,200
applied to any existing

508
00:19:19,200 --> 00:19:23,440
loc ciphers to protect against dfa

509
00:19:23,440 --> 00:19:24,640
and

510
00:19:24,640 --> 00:19:25,600
for

511
00:19:25,600 --> 00:19:28,000
we instantiate with uh

512
00:19:28,000 --> 00:19:30,480
four bit xboxes with linear structures

513
00:19:30,480 --> 00:19:32,400
and we

514
00:19:32,400 --> 00:19:34,720
present propose a

515
00:19:34,720 --> 00:19:37,120
default layer which is the ad hoc

516
00:19:37,120 --> 00:19:40,720
with this dfa resistant layer that can

517
00:19:40,720 --> 00:19:43,360
be used to protect

518
00:19:43,360 --> 00:19:45,360
any block ciphers

519
00:19:45,360 --> 00:19:47,360
or and also we

520
00:19:47,360 --> 00:19:48,559
propose a

521
00:19:48,559 --> 00:19:51,039
default which is a full fledge

522
00:19:51,039 --> 00:19:52,400
cipher

523
00:19:52,400 --> 00:19:54,240
that has the

524
00:19:54,240 --> 00:19:56,880
default layer savaging a default core

525
00:19:56,880 --> 00:19:58,880
layer

526
00:19:58,880 --> 00:20:01,039
so that's all for my

527
00:20:01,039 --> 00:20:05,320
presentation thank you

