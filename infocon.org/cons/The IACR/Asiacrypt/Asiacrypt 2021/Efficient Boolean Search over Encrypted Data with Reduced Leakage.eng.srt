1
00:00:00,880 --> 00:00:03,919
hi my name is jun young song and i'm

2
00:00:03,919 --> 00:00:06,720
here to present our work titled

3
00:00:06,720 --> 00:00:09,120
efficient voice search over encrypted

4
00:00:09,120 --> 00:00:12,080
data with reduced leakage

5
00:00:12,080 --> 00:00:14,799
this is joint work with sarvar patel

6
00:00:14,799 --> 00:00:17,439
giuseppe

7
00:00:21,600 --> 00:00:23,760
these days uh millions of people use

8
00:00:23,760 --> 00:00:26,960
cloud services to upload their data on

9
00:00:26,960 --> 00:00:28,320
the cloud

10
00:00:28,320 --> 00:00:31,679
however uploading data in plain text may

11
00:00:31,679 --> 00:00:34,160
impose serious security and privacy

12
00:00:34,160 --> 00:00:35,120
risks

13
00:00:35,120 --> 00:00:37,840
as was shown in multiple data breaches

14
00:00:37,840 --> 00:00:40,879
that have happened over the years

15
00:00:40,879 --> 00:00:42,320
on the other hand

16
00:00:42,320 --> 00:00:44,480
naively uploading the data encrypted

17
00:00:44,480 --> 00:00:46,559
disable search functionality on this

18
00:00:46,559 --> 00:00:47,680
data

19
00:00:47,680 --> 00:00:50,800
and this motivates the study of

20
00:00:50,800 --> 00:00:53,760
encrypted search

21
00:00:56,239 --> 00:00:58,559
there have been extensive studies on

22
00:00:58,559 --> 00:01:00,960
encrypted search and many different

23
00:01:00,960 --> 00:01:02,879
approaches have been proposed with

24
00:01:02,879 --> 00:01:05,360
different trade-offs

25
00:01:05,360 --> 00:01:07,680
for example oblivious ram and fully

26
00:01:07,680 --> 00:01:09,439
homomorphic encryption support

27
00:01:09,439 --> 00:01:11,280
expressive queries

28
00:01:11,280 --> 00:01:13,439
and leaked no information about the

29
00:01:13,439 --> 00:01:16,000
underlying data or the executed

30
00:01:16,000 --> 00:01:17,360
algorithms

31
00:01:17,360 --> 00:01:18,560
however

32
00:01:18,560 --> 00:01:21,280
these primitives are very expensive and

33
00:01:21,280 --> 00:01:24,640
are not practical for large datasets

34
00:01:24,640 --> 00:01:27,280
on the other hand structured encryption

35
00:01:27,280 --> 00:01:29,360
considers a more relaxed privacy

36
00:01:29,360 --> 00:01:32,000
requirement with the hope of achieving

37
00:01:32,000 --> 00:01:35,360
small overhead necessary for practical

38
00:01:35,360 --> 00:01:37,680
applications

39
00:01:37,680 --> 00:01:41,280
our work is on structures encryption

40
00:01:41,280 --> 00:01:43,520
and more details on encrypted boolean

41
00:01:43,520 --> 00:01:46,320
multi-maps

42
00:01:49,840 --> 00:01:51,600
structured encryption which was

43
00:01:51,600 --> 00:01:54,880
introduced by jason camara is a general

44
00:01:54,880 --> 00:01:57,520
cryptographic primitive that considers a

45
00:01:57,520 --> 00:02:00,159
scenario where a data owner

46
00:02:00,159 --> 00:02:03,439
or commonly referred to as a client

47
00:02:03,439 --> 00:02:06,000
wishes to store encrypted data structure

48
00:02:06,000 --> 00:02:08,800
on a potentially untrusted server such

49
00:02:08,800 --> 00:02:11,520
as a cloud provider

50
00:02:11,520 --> 00:02:13,280
structured encryption schemes should

51
00:02:13,280 --> 00:02:16,080
ensure that clients are able to perform

52
00:02:16,080 --> 00:02:19,040
all necessary data structure operations

53
00:02:19,040 --> 00:02:21,040
a query or update

54
00:02:21,040 --> 00:02:23,040
correctly over the server stored

55
00:02:23,040 --> 00:02:25,599
encrypted data

56
00:02:25,599 --> 00:02:27,440
the privacy goal of a structured

57
00:02:27,440 --> 00:02:30,480
encryption scheme is to reveal as little

58
00:02:30,480 --> 00:02:32,720
information about the contents of the

59
00:02:32,720 --> 00:02:35,040
outsourced data structure

60
00:02:35,040 --> 00:02:36,959
as well as the operations that are

61
00:02:36,959 --> 00:02:39,840
performed on the data structure

62
00:02:39,840 --> 00:02:43,040
in particular structure encryption are

63
00:02:43,040 --> 00:02:45,360
defined by a leakage function that is an

64
00:02:45,360 --> 00:02:47,760
upper bound on the information that may

65
00:02:47,760 --> 00:02:50,239
be learned by the adversary and in this

66
00:02:50,239 --> 00:02:54,080
case the untrusted server

67
00:02:57,040 --> 00:03:00,000
multi-map data structure maintains a set

68
00:03:00,000 --> 00:03:03,280
of labels to value tuple pairs where

69
00:03:03,280 --> 00:03:05,599
each label comes from the label universe

70
00:03:05,599 --> 00:03:07,840
u and each value comes from the value

71
00:03:07,840 --> 00:03:09,599
universe v

72
00:03:09,599 --> 00:03:11,440
the multi-map data structure supports

73
00:03:11,440 --> 00:03:13,599
the query operation that receives a

74
00:03:13,599 --> 00:03:16,159
label from the label universe u

75
00:03:16,159 --> 00:03:18,400
and returns the value tuple associated

76
00:03:18,400 --> 00:03:20,400
with the given label

77
00:03:20,400 --> 00:03:21,840
in the example

78
00:03:21,840 --> 00:03:27,760
mm of l1 returns a tuple v1 v2 and v3

79
00:03:28,239 --> 00:03:30,319
for our purpose we consider the extended

80
00:03:30,319 --> 00:03:32,640
boolean multi-map that enables more

81
00:03:32,640 --> 00:03:35,200
complex query operations beyond simply

82
00:03:35,200 --> 00:03:37,760
retrieving the value tuple associated

83
00:03:37,760 --> 00:03:39,200
with the label

84
00:03:39,200 --> 00:03:41,280
a boolean multi-map is associated with

85
00:03:41,280 --> 00:03:44,560
the supported class of boolean formulae

86
00:03:44,560 --> 00:03:46,640
queries over labels

87
00:03:46,640 --> 00:03:48,799
for our purpose we only consider

88
00:03:48,799 --> 00:03:50,640
conjunctions and conjunctive normal

89
00:03:50,640 --> 00:03:51,920
forms

90
00:03:51,920 --> 00:03:54,159
loosely speaking logical

91
00:03:54,159 --> 00:03:57,040
and corresponds to set intersections

92
00:03:57,040 --> 00:03:59,040
while logical or corresponds to set

93
00:03:59,040 --> 00:04:01,599
union in the example

94
00:04:01,599 --> 00:04:05,680
mm of l1 and l2 returns v1 because the

95
00:04:05,680 --> 00:04:10,319
intersection of v1 v2 v3 and v1 and v4

96
00:04:10,319 --> 00:04:13,640
is v1

97
00:04:16,320 --> 00:04:18,478
now we define the notion of an encrypted

98
00:04:18,478 --> 00:04:20,399
boolean multi-map

99
00:04:20,399 --> 00:04:22,000
which is a structured encryption for

100
00:04:22,000 --> 00:04:24,000
boolean multi-maps

101
00:04:24,000 --> 00:04:26,160
encryptive boolean multi-map consists of

102
00:04:26,160 --> 00:04:30,080
four algorithms setup token search and

103
00:04:30,080 --> 00:04:31,759
resolve

104
00:04:31,759 --> 00:04:34,000
the setup algorithm is executed by the

105
00:04:34,000 --> 00:04:36,479
client and takes as input the security

106
00:04:36,479 --> 00:04:38,720
parameter and the boolean multi-map and

107
00:04:38,720 --> 00:04:40,720
outputs an encrypted boolean multi-map

108
00:04:40,720 --> 00:04:43,680
and the master secret key

109
00:04:43,680 --> 00:04:45,600
the token generation algorithm is

110
00:04:45,600 --> 00:04:48,080
executed by the client and takes as

111
00:04:48,080 --> 00:04:50,479
input the master secret key and the

112
00:04:50,479 --> 00:04:53,360
boolean formulae fee and outputs a token

113
00:04:53,360 --> 00:04:56,720
that is sent to the server

114
00:04:56,720 --> 00:04:58,880
the search algorithm is executed by the

115
00:04:58,880 --> 00:05:01,280
server and takes as input the encrypted

116
00:05:01,280 --> 00:05:02,720
boolean multi-map

117
00:05:02,720 --> 00:05:05,280
in the token and outputs an encrypted

118
00:05:05,280 --> 00:05:08,960
answer that is sent back to the client

119
00:05:09,039 --> 00:05:11,360
finally the result algorithm is executed

120
00:05:11,360 --> 00:05:13,840
by the client and takes as input the

121
00:05:13,840 --> 00:05:16,160
master secret key and the answer from

122
00:05:16,160 --> 00:05:19,600
the server and outputs mm of v the plain

123
00:05:19,600 --> 00:05:23,960
text elements in the multi-map

124
00:05:26,160 --> 00:05:26,960
for

125
00:05:26,960 --> 00:05:29,360
encrypted boolean multimaps we utilize

126
00:05:29,360 --> 00:05:31,680
the same security notions as typically

127
00:05:31,680 --> 00:05:34,160
done in structured encryption using

128
00:05:34,160 --> 00:05:36,400
leakage functions

129
00:05:36,400 --> 00:05:39,039
the adversaries leakage is upper bounded

130
00:05:39,039 --> 00:05:42,400
by a pair l setup and l quarry

131
00:05:42,400 --> 00:05:44,400
of leakage functions

132
00:05:44,400 --> 00:05:46,800
the leakage function l setup provides an

133
00:05:46,800 --> 00:05:48,800
upper bound on the knowledge gained by

134
00:05:48,800 --> 00:05:50,800
the adversarial server

135
00:05:50,800 --> 00:05:52,160
when given the encrypted boolean

136
00:05:52,160 --> 00:05:54,400
multi-map

137
00:05:54,400 --> 00:05:56,319
l-query is an upper bound on the

138
00:05:56,319 --> 00:05:58,080
information gained by the server when

139
00:05:58,080 --> 00:05:59,680
receiving a token from the client

140
00:05:59,680 --> 00:06:01,120
generated

141
00:06:01,120 --> 00:06:02,240
using the

142
00:06:02,240 --> 00:06:03,919
token algorithm

143
00:06:03,919 --> 00:06:05,440
and when applying the token on the

144
00:06:05,440 --> 00:06:06,960
included multi-map in the search

145
00:06:06,960 --> 00:06:09,199
algorithm

146
00:06:09,199 --> 00:06:11,199
we use a simulation based approach to

147
00:06:11,199 --> 00:06:14,800
formalize the security notions

148
00:06:17,440 --> 00:06:20,639
in the setup phase of a real experiment

149
00:06:20,639 --> 00:06:22,639
the adversary sends a multi-map to the

150
00:06:22,639 --> 00:06:24,160
challenger and the challenger will

151
00:06:24,160 --> 00:06:25,440
encrypt it and send it back to the

152
00:06:25,440 --> 00:06:28,080
adversary in the query phase the

153
00:06:28,080 --> 00:06:30,080
adversary sends a polynomial number of

154
00:06:30,080 --> 00:06:32,479
boolean formulae to the challenger

155
00:06:32,479 --> 00:06:34,160
and the challenger sends back the

156
00:06:34,160 --> 00:06:35,600
encrypted token

157
00:06:35,600 --> 00:06:37,680
we consider the adaptive setting where

158
00:06:37,680 --> 00:06:39,520
the adversary can observe previous

159
00:06:39,520 --> 00:06:41,759
tokens sent from the challenger before

160
00:06:41,759 --> 00:06:45,280
sending the next boolean formula

161
00:06:47,039 --> 00:06:49,199
in the set of phasma of an ideal

162
00:06:49,199 --> 00:06:51,360
experiment the adversary sends the

163
00:06:51,360 --> 00:06:53,120
multi-map to the challenger and the

164
00:06:53,120 --> 00:06:55,199
challenger sends a set of leakage of the

165
00:06:55,199 --> 00:06:57,680
multi-map to the simulator

166
00:06:57,680 --> 00:06:59,520
the simulator generates the encrypted

167
00:06:59,520 --> 00:07:02,160
boolean multi-map from the setup leakage

168
00:07:02,160 --> 00:07:04,560
and sends it back to the adversary

169
00:07:04,560 --> 00:07:06,240
in the query phase the adversary

170
00:07:06,240 --> 00:07:07,919
adaptively sends the boolean formula to

171
00:07:07,919 --> 00:07:09,919
the challenger and the challenger sends

172
00:07:09,919 --> 00:07:12,240
a query leakage to a simulator

173
00:07:12,240 --> 00:07:14,080
the simulator generates the token from

174
00:07:14,080 --> 00:07:15,759
the query leakage and sends it back to

175
00:07:15,759 --> 00:07:17,919
the adversary

176
00:07:17,919 --> 00:07:19,280
we say that the encrypted boolean

177
00:07:19,280 --> 00:07:21,360
multi-map is adaptably secure with

178
00:07:21,360 --> 00:07:22,639
respect

179
00:07:22,639 --> 00:07:25,039
to the setup and query leakages

180
00:07:25,039 --> 00:07:27,039
if the real experiment and the ideal

181
00:07:27,039 --> 00:07:28,840
experiment are in this

182
00:07:28,840 --> 00:07:32,880
indistinguishable to the other theory

183
00:07:34,560 --> 00:07:36,319
we now survey some of the existing

184
00:07:36,319 --> 00:07:37,919
constructions of encrypted boolean

185
00:07:37,919 --> 00:07:39,840
multi-maps

186
00:07:39,840 --> 00:07:42,960
cache at all present oxy protocol that

187
00:07:42,960 --> 00:07:45,440
is a non-interactive encrypted boolean

188
00:07:45,440 --> 00:07:48,720
multi-map oxt is able to handle all

189
00:07:48,720 --> 00:07:50,800
conjunctive queries and boolean queries

190
00:07:50,800 --> 00:07:53,039
in virtual normal form

191
00:07:53,039 --> 00:07:56,160
but for other queries it may end up in

192
00:07:56,160 --> 00:07:59,280
linear search time furthermore the core

193
00:07:59,280 --> 00:08:02,160
cryptographic operations in osc are

194
00:08:02,160 --> 00:08:06,000
expensive public key operations

195
00:08:06,000 --> 00:08:08,080
exponentiations in a diffie-hellman

196
00:08:08,080 --> 00:08:10,560
group and hence may end up being slow in

197
00:08:10,560 --> 00:08:13,560
practice

198
00:08:14,080 --> 00:08:16,400
pause it all present applies here that

199
00:08:16,400 --> 00:08:18,720
handles all arbitrary boolean queries

200
00:08:18,720 --> 00:08:20,720
with worst cases of linear search time

201
00:08:20,720 --> 00:08:22,639
unlike oxy

202
00:08:22,639 --> 00:08:24,960
also the majority of the core

203
00:08:24,960 --> 00:08:27,120
cryptographic operations in blind seer

204
00:08:27,120 --> 00:08:30,240
end up being symmetric key operations

205
00:08:30,240 --> 00:08:32,399
however the search algorithm still ends

206
00:08:32,399 --> 00:08:34,719
up being slower than oxt as a secure

207
00:08:34,719 --> 00:08:36,719
computation techniques require multiple

208
00:08:36,719 --> 00:08:40,799
rounds of client server interactions

209
00:08:40,799 --> 00:08:43,839
camera and wattage present bix that

210
00:08:43,839 --> 00:08:45,920
combines several good properties of both

211
00:08:45,920 --> 00:08:47,760
oxy and blindsir

212
00:08:47,760 --> 00:08:50,279
in particular bix is the first

213
00:08:50,279 --> 00:08:52,480
non-interactive encrypted boolean

214
00:08:52,480 --> 00:08:54,480
multi-map that is able to handle

215
00:08:54,480 --> 00:08:56,000
arbitrary boolean queries with

216
00:08:56,000 --> 00:08:58,640
worst-case sub-linear search times

217
00:08:58,640 --> 00:09:01,040
and non-trivial leakage

218
00:09:01,040 --> 00:09:03,360
furthermore the search algorithm of bix

219
00:09:03,360 --> 00:09:05,519
only utilizes symmetric key parameters

220
00:09:05,519 --> 00:09:08,080
and hence ends up being faster than

221
00:09:08,080 --> 00:09:11,839
those of oexc and blind seer

222
00:09:14,320 --> 00:09:16,800
in our work we present new encrypted

223
00:09:16,800 --> 00:09:18,880
boolean multi-maps which are adaptively

224
00:09:18,880 --> 00:09:19,920
secure

225
00:09:19,920 --> 00:09:22,560
non-interactive have similar or better

226
00:09:22,560 --> 00:09:24,880
efficiency and have reduced leakage

227
00:09:24,880 --> 00:09:26,959
compared to prior works

228
00:09:26,959 --> 00:09:28,480
in particular we obtain new

229
00:09:28,480 --> 00:09:30,320
constructions for handling conjunctions

230
00:09:30,320 --> 00:09:32,880
and cnf queries with reduced leakage and

231
00:09:32,880 --> 00:09:35,680
optimal communication complexity

232
00:09:35,680 --> 00:09:37,360
furthermore our scheme only uses

233
00:09:37,360 --> 00:09:39,839
symmetric key all primitives and ends up

234
00:09:39,839 --> 00:09:44,160
being more practical than fireworks

235
00:09:47,200 --> 00:09:49,279
to compare leakage we introduced the

236
00:09:49,279 --> 00:09:52,320
notion of a base query set of leakage

237
00:09:52,320 --> 00:09:55,040
informally based query center leakage is

238
00:09:55,040 --> 00:09:57,040
just a set of boolean formulae that the

239
00:09:57,040 --> 00:09:59,519
adversary can combine to learn volumes

240
00:09:59,519 --> 00:10:02,880
of more complex queries we define spent

241
00:10:02,880 --> 00:10:05,200
of the base query set of leakage as a

242
00:10:05,200 --> 00:10:06,959
set of all queries for which an

243
00:10:06,959 --> 00:10:09,440
adversary can construct the volume from

244
00:10:09,440 --> 00:10:11,760
the volumes of the queries in the base

245
00:10:11,760 --> 00:10:13,360
leakage set

246
00:10:13,360 --> 00:10:15,360
in particular if an encrypted boolean

247
00:10:15,360 --> 00:10:17,440
multi-map has a base query set of

248
00:10:17,440 --> 00:10:20,079
leakage b for some query fee

249
00:10:20,079 --> 00:10:22,079
it means that the adversary can learn

250
00:10:22,079 --> 00:10:24,720
volumes for all boolean formulae in span

251
00:10:24,720 --> 00:10:26,959
of b

252
00:10:26,959 --> 00:10:28,880
the notion of base query set of leakage

253
00:10:28,880 --> 00:10:32,079
is quite useful for comparing leakages

254
00:10:32,079 --> 00:10:34,399
in particular we can say that a scheme

255
00:10:34,399 --> 00:10:36,800
has better query leakage

256
00:10:36,800 --> 00:10:38,959
leakage than that of another scheme by

257
00:10:38,959 --> 00:10:41,920
comparing the spans of the base sets

258
00:10:41,920 --> 00:10:44,560
for example if the span of one scheme is

259
00:10:44,560 --> 00:10:46,399
a strict subset of that of another

260
00:10:46,399 --> 00:10:48,399
scheme we can say that the leakage is

261
00:10:48,399 --> 00:10:49,680
definitely better

262
00:10:49,680 --> 00:10:51,360
we will use the notion of a base query

263
00:10:51,360 --> 00:10:52,560
set of leakages throughout the

264
00:10:52,560 --> 00:10:55,199
presentation

265
00:10:57,680 --> 00:11:00,640
before we dive into our constructions we

266
00:11:00,640 --> 00:11:02,480
start by presenting the approach to

267
00:11:02,480 --> 00:11:04,399
handling conjunctive queries using

268
00:11:04,399 --> 00:11:06,160
private prior works

269
00:11:06,160 --> 00:11:08,720
such as km17

270
00:11:08,720 --> 00:11:12,640
consider the conjunctive query l1 and l2

271
00:11:12,640 --> 00:11:13,600
and

272
00:11:13,600 --> 00:11:15,680
all the way up to lq

273
00:11:15,680 --> 00:11:18,000
the main idea of prior works is to

274
00:11:18,000 --> 00:11:21,600
decompose the query into q minus one two

275
00:11:21,600 --> 00:11:22,880
conjunctions

276
00:11:22,880 --> 00:11:27,040
l1 l and l2 l1 and l3 and so on

277
00:11:27,040 --> 00:11:28,959
and each of the q minus one two

278
00:11:28,959 --> 00:11:30,880
conjunction queries are computed

279
00:11:30,880 --> 00:11:33,040
independently such that the resulting

280
00:11:33,040 --> 00:11:36,399
response sets are all prf evaluations

281
00:11:36,399 --> 00:11:37,600
under the key

282
00:11:37,600 --> 00:11:40,959
solely depending on the first label l1

283
00:11:40,959 --> 00:11:42,880
then the server returns the intersection

284
00:11:42,880 --> 00:11:45,120
of all q minus 1 sets

285
00:11:45,120 --> 00:11:47,279
it is easy to see that the response size

286
00:11:47,279 --> 00:11:50,240
is optimal this way

287
00:11:50,240 --> 00:11:52,560
however there are several drawbacks to

288
00:11:52,560 --> 00:11:54,320
using this approach

289
00:11:54,320 --> 00:11:56,800
first the scheme leaks the volumes of

290
00:11:56,800 --> 00:11:59,440
the q minus 1 to conjunctions

291
00:11:59,440 --> 00:12:01,680
since the response sets are prf

292
00:12:01,680 --> 00:12:04,320
evaluations under the same key the

293
00:12:04,320 --> 00:12:06,639
server can learn volumes of more complex

294
00:12:06,639 --> 00:12:07,760
queries

295
00:12:07,760 --> 00:12:09,920
in general the server can compute any

296
00:12:09,920 --> 00:12:12,240
boolean function over the response test

297
00:12:12,240 --> 00:12:15,680
that is the base query set of leakage is

298
00:12:15,680 --> 00:12:18,560
l1 and l2 l1 and l3

299
00:12:18,560 --> 00:12:21,519
and up to l1 and lq

300
00:12:21,519 --> 00:12:24,079
second in terms of this computation cost

301
00:12:24,079 --> 00:12:26,320
the server must perform computation on

302
00:12:26,320 --> 00:12:28,480
the order of the sum of the size of

303
00:12:28,480 --> 00:12:31,519
response sets from the two conjunctions

304
00:12:31,519 --> 00:12:33,120
this seems quite wasteful as the

305
00:12:33,120 --> 00:12:36,240
response set of mm of l1 and l2 is

306
00:12:36,240 --> 00:12:40,480
already a superset of the final response

307
00:12:43,600 --> 00:12:44,720
to address

308
00:12:44,720 --> 00:12:46,880
these drawbacks while keeping the size

309
00:12:46,880 --> 00:12:49,200
of the server's response optimal

310
00:12:49,200 --> 00:12:51,279
we present the new filtering algorithm

311
00:12:51,279 --> 00:12:52,639
that will be utilized by our

312
00:12:52,639 --> 00:12:54,160
construction

313
00:12:54,160 --> 00:12:57,040
the main idea is to only retrieve mm of

314
00:12:57,040 --> 00:13:00,240
l1 and l2 and do filtering on the set

315
00:13:00,240 --> 00:13:03,519
instead of retrieving all mm of l1 and

316
00:13:03,519 --> 00:13:07,360
l2 mml1 and l3 and so on like in the

317
00:13:07,360 --> 00:13:08,800
power works

318
00:13:08,800 --> 00:13:11,040
to do this we maintain an additional

319
00:13:11,040 --> 00:13:13,120
data structure that allows the server to

320
00:13:13,120 --> 00:13:15,279
check whether a value v

321
00:13:15,279 --> 00:13:19,200
in mm of l1 and l2 belongs to mm of l1

322
00:13:19,200 --> 00:13:20,399
and l3

323
00:13:20,399 --> 00:13:24,000
mm of l1 and l4 and so on

324
00:13:24,000 --> 00:13:27,519
without having to retrieve mm l1 and l3

325
00:13:27,519 --> 00:13:31,519
mmo l1 and l4 and etc

326
00:13:31,760 --> 00:13:34,399
at a high level the data structure is

327
00:13:34,399 --> 00:13:36,959
just a set of double pr evaluations of

328
00:13:36,959 --> 00:13:38,959
the multi-map values

329
00:13:38,959 --> 00:13:41,279
more concretely for each label pair and

330
00:13:41,279 --> 00:13:43,600
a value such that the value appears with

331
00:13:43,600 --> 00:13:45,040
the label pair

332
00:13:45,040 --> 00:13:47,519
in the encrypted multi-map the data

333
00:13:47,519 --> 00:13:48,800
structure

334
00:13:48,800 --> 00:13:51,600
x stores a double tag of v

335
00:13:51,600 --> 00:13:53,680
this double tag is computed by first

336
00:13:53,680 --> 00:13:56,000
applying a prf with this key solely

337
00:13:56,000 --> 00:13:58,079
depending on the first label

338
00:13:58,079 --> 00:14:00,079
and then applying another prf with the

339
00:14:00,079 --> 00:14:03,120
key depending on both labels

340
00:14:03,120 --> 00:14:05,440
in the first row of the above example we

341
00:14:05,440 --> 00:14:07,600
see that the data structure stores

342
00:14:07,600 --> 00:14:10,240
double tags with prf evaluation with the

343
00:14:10,240 --> 00:14:12,720
key depending on label l1 and then

344
00:14:12,720 --> 00:14:14,800
another prf evaluation with the key

345
00:14:14,800 --> 00:14:18,880
depending on label pairs l1 and l2

346
00:14:21,120 --> 00:14:23,279
now we will show by example how we can

347
00:14:23,279 --> 00:14:25,120
use the filtering algorithm to compute

348
00:14:25,120 --> 00:14:27,680
the response to the conjunctive query

349
00:14:27,680 --> 00:14:31,440
as an example to compute mm of l1 and l2

350
00:14:31,440 --> 00:14:35,600
and l3 and l4 we first retrieve mm of l1

351
00:14:35,600 --> 00:14:37,040
and l2

352
00:14:37,040 --> 00:14:38,880
right now the intermediate response that

353
00:14:38,880 --> 00:14:41,199
contains these values

354
00:14:41,199 --> 00:14:45,120
three values v1 v2 and v3

355
00:14:45,120 --> 00:14:48,079
we now check whether each of v1

356
00:14:48,079 --> 00:14:51,760
v2 and v3 are in mm of l1 and l3 by

357
00:14:51,760 --> 00:14:54,079
applying a prf with the key depending on

358
00:14:54,079 --> 00:14:55,760
label pairs

359
00:14:55,760 --> 00:14:59,279
l1 and l3 on the multi-map story

360
00:14:59,279 --> 00:15:00,720
evaluations

361
00:15:00,720 --> 00:15:02,240
and check whether this resulting

362
00:15:02,240 --> 00:15:04,959
evaluation is the is in the data

363
00:15:04,959 --> 00:15:07,760
structure x

364
00:15:07,760 --> 00:15:09,839
if it is this means that the value is an

365
00:15:09,839 --> 00:15:13,760
mm of l1 and l3 and we keep it otherwise

366
00:15:13,760 --> 00:15:16,480
we throw it away

367
00:15:16,480 --> 00:15:18,240
we can continue with this filtering

368
00:15:18,240 --> 00:15:21,519
screen for mm of l1 and l4 and finally

369
00:15:21,519 --> 00:15:23,360
obtain the final response set which

370
00:15:23,360 --> 00:15:25,839
ultimately contains a single value

371
00:15:25,839 --> 00:15:28,240
v1

372
00:15:30,639 --> 00:15:32,800
we now give a brief analysis of our

373
00:15:32,800 --> 00:15:34,720
conch filter scheme

374
00:15:34,720 --> 00:15:36,639
it is not too hard to see that the base

375
00:15:36,639 --> 00:15:38,800
query setup leakage of clone filter

376
00:15:38,800 --> 00:15:41,519
consists of one two conjunction with the

377
00:15:41,519 --> 00:15:43,759
rest being three conjunctions note that

378
00:15:43,759 --> 00:15:46,160
the scheme has smaller quarry leakage

379
00:15:46,160 --> 00:15:48,639
compared to prior works because it only

380
00:15:48,639 --> 00:15:52,560
leaks one to conjunction l1 and

381
00:15:52,839 --> 00:15:56,320
l2 compared to bi ex conf filter

382
00:15:56,320 --> 00:15:58,720
maintains an additional data structure

383
00:15:58,720 --> 00:16:01,360
x but this reveals nothing more than the

384
00:16:01,360 --> 00:16:03,600
size of x and hence the setup leakage

385
00:16:03,600 --> 00:16:06,880
stays identical to that of biex

386
00:16:06,880 --> 00:16:08,399
in terms of storage

387
00:16:08,399 --> 00:16:11,199
the encrypted multi-map stores values

388
00:16:11,199 --> 00:16:12,800
for each pair of labels in the label

389
00:16:12,800 --> 00:16:15,519
universe the size of the data structure

390
00:16:15,519 --> 00:16:17,519
x is asymptotically the same as that of

391
00:16:17,519 --> 00:16:20,720
the multi-map thus the storage of conch

392
00:16:20,720 --> 00:16:22,639
filter is asymptotically the same as

393
00:16:22,639 --> 00:16:24,800
that of bie-x

394
00:16:24,800 --> 00:16:27,279
the token size turns out to be

395
00:16:27,279 --> 00:16:29,920
a big-o of q where q is a total number

396
00:16:29,920 --> 00:16:33,120
of labels in the conjunction

397
00:16:33,120 --> 00:16:35,040
for the server computation

398
00:16:35,040 --> 00:16:37,040
the server first computes a response set

399
00:16:37,040 --> 00:16:40,079
for the query mm of l1 and l2

400
00:16:40,079 --> 00:16:43,680
afterwards the server filters out the

401
00:16:43,680 --> 00:16:46,399
set for each of the other labels

402
00:16:46,399 --> 00:16:49,040
l3 all the way up to lq

403
00:16:49,040 --> 00:16:51,120
as a result the server computation

404
00:16:51,120 --> 00:16:54,320
becomes o big o of q times the size of

405
00:16:54,320 --> 00:16:57,440
the response set of l1 and l2

406
00:16:57,440 --> 00:16:59,199
note that in practice con filter

407
00:16:59,199 --> 00:17:02,079
outperforms power works like bie-x since

408
00:17:02,079 --> 00:17:04,079
the size of the intermediate set becomes

409
00:17:04,079 --> 00:17:08,159
smaller after each round of filtering

410
00:17:10,799 --> 00:17:13,280
we now show how to support cnf queries

411
00:17:13,280 --> 00:17:14,880
using the filtering algorithm as a

412
00:17:14,880 --> 00:17:17,679
building block before that we start by

413
00:17:17,679 --> 00:17:20,160
reviewing the bix construction for cnf

414
00:17:20,160 --> 00:17:21,359
queries

415
00:17:21,359 --> 00:17:24,079
consider a sienna query of the form d1

416
00:17:24,079 --> 00:17:25,839
and d2 and

417
00:17:25,839 --> 00:17:28,160
all the way up to dm where each di

418
00:17:28,160 --> 00:17:31,200
consists of disjunctions of the labels

419
00:17:31,200 --> 00:17:34,640
in the first step bix computes mm of d1

420
00:17:34,640 --> 00:17:36,559
using iex

421
00:17:36,559 --> 00:17:39,200
a black box construction for

422
00:17:39,200 --> 00:17:41,039
disjunctive queries

423
00:17:41,039 --> 00:17:42,960
note that iex ends up leaking volumes

424
00:17:42,960 --> 00:17:46,080
for singleton labels in d1

425
00:17:46,080 --> 00:17:48,160
the problem here is that there is no

426
00:17:48,160 --> 00:17:50,240
known scheme supporting disjunctions

427
00:17:50,240 --> 00:17:52,080
that do not reveal singleton query

428
00:17:52,080 --> 00:17:53,679
volumes

429
00:17:53,679 --> 00:17:55,760
to avoid this leakage our construction

430
00:17:55,760 --> 00:17:58,160
combines the first two clauses of d1 and

431
00:17:58,160 --> 00:17:59,280
d2

432
00:17:59,280 --> 00:18:01,840
that may be rewritten as disjunction of

433
00:18:01,840 --> 00:18:03,679
two conjunctions

434
00:18:03,679 --> 00:18:05,520
then we can apply the algorithm for

435
00:18:05,520 --> 00:18:07,600
computing disjunctions

436
00:18:07,600 --> 00:18:11,039
for example iex scheme from km17

437
00:18:11,039 --> 00:18:13,280
over the two conjunction result sets to

438
00:18:13,280 --> 00:18:16,720
obtain mm of d1 and d2

439
00:18:16,720 --> 00:18:19,280
note that while the volumes of all two

440
00:18:19,280 --> 00:18:21,600
conjunction sets are revealed no volumes

441
00:18:21,600 --> 00:18:23,039
or singleton queries are leaked with

442
00:18:23,039 --> 00:18:26,000
this formulation

443
00:18:26,640 --> 00:18:28,720
we can now apply the filter filtering

444
00:18:28,720 --> 00:18:30,720
algorithm again to incorporate remaining

445
00:18:30,720 --> 00:18:33,120
clauses e3 d4

446
00:18:33,120 --> 00:18:35,440
uh all the way up to dm

447
00:18:35,440 --> 00:18:37,840
for example if we let

448
00:18:37,840 --> 00:18:39,520
s2

449
00:18:39,520 --> 00:18:42,799
be mm of d1 and d2 then we can see that

450
00:18:42,799 --> 00:18:43,919
s2

451
00:18:43,919 --> 00:18:45,280
intersection

452
00:18:45,280 --> 00:18:48,720
of mm of d3 can be written as a union of

453
00:18:48,720 --> 00:18:52,559
intersections of s2 and the responses to

454
00:18:52,559 --> 00:18:55,679
singleton labels in the d3 clause

455
00:18:55,679 --> 00:18:57,679
we claim that each intersection can be

456
00:18:57,679 --> 00:18:59,760
computed using the filtering algorithm

457
00:18:59,760 --> 00:19:02,080
and computing it this way avoids volume

458
00:19:02,080 --> 00:19:04,480
leakage for many queries

459
00:19:04,480 --> 00:19:06,160
there are some details omitted in this

460
00:19:06,160 --> 00:19:08,720
presentation for simplicity

461
00:19:08,720 --> 00:19:11,120
so please refer to full paper for more

462
00:19:11,120 --> 00:19:13,600
details

463
00:19:13,840 --> 00:19:16,240
and we can repeat this for other clauses

464
00:19:16,240 --> 00:19:20,280
to compute the final response

465
00:19:24,320 --> 00:19:26,799
we now give a brief analysis of our cnf

466
00:19:26,799 --> 00:19:28,240
filter scheme

467
00:19:28,240 --> 00:19:30,240
uh we claim here without proof that the

468
00:19:30,240 --> 00:19:32,720
span of this base set of quarry leakage

469
00:19:32,720 --> 00:19:36,000
of cn filter is a subset of the span of

470
00:19:36,000 --> 00:19:39,520
a base query set of leakage of biex

471
00:19:39,520 --> 00:19:41,600
this means that our scheme leaks no more

472
00:19:41,600 --> 00:19:43,120
than bis

473
00:19:43,120 --> 00:19:44,480
since the set of construction is

474
00:19:44,480 --> 00:19:47,840
identical to the conch filter scheme

475
00:19:47,840 --> 00:19:49,840
the setup leakage and

476
00:19:49,840 --> 00:19:52,640
and storage stays identical identical to

477
00:19:52,640 --> 00:19:54,400
those of a conch filter presented

478
00:19:54,400 --> 00:19:55,520
earlier

479
00:19:55,520 --> 00:19:57,360
in particular this means that the

480
00:19:57,360 --> 00:19:59,679
storage stays asymptotically the same as

481
00:19:59,679 --> 00:20:01,600
that of bix

482
00:20:01,600 --> 00:20:03,440
in our experiment we show that our

483
00:20:03,440 --> 00:20:05,919
scheme just incurs 20 percent more

484
00:20:05,919 --> 00:20:08,799
storage overhead compared to bi ex

485
00:20:08,799 --> 00:20:13,039
we can upper bound the token size um by

486
00:20:13,039 --> 00:20:16,320
order big o of q square where e where q

487
00:20:16,320 --> 00:20:18,320
is the total number of labels across the

488
00:20:18,320 --> 00:20:21,280
uh m disjunction clauses

489
00:20:21,280 --> 00:20:24,159
in terms of the server computation

490
00:20:24,159 --> 00:20:26,559
we can upper bounded as

491
00:20:26,559 --> 00:20:29,760
big o of q squared times

492
00:20:29,760 --> 00:20:32,159
the size of response from

493
00:20:32,159 --> 00:20:35,520
of mm of d1 and d2 where q is the total

494
00:20:35,520 --> 00:20:36,960
number of labels across the m

495
00:20:36,960 --> 00:20:38,960
disjunction clauses

496
00:20:38,960 --> 00:20:41,919
note that our scheme outperforms bix in

497
00:20:41,919 --> 00:20:44,080
practice because in many cases the size

498
00:20:44,080 --> 00:20:46,000
of the response set of conjunctions of

499
00:20:46,000 --> 00:20:48,240
the two clauses is much smaller than the

500
00:20:48,240 --> 00:20:50,080
size of the response set of a single

501
00:20:50,080 --> 00:20:52,399
clause

502
00:20:55,440 --> 00:20:57,440
we now present some of the results from

503
00:20:57,440 --> 00:20:59,200
our experiments

504
00:20:59,200 --> 00:21:02,880
bix and km17 is implemented in java

505
00:21:02,880 --> 00:21:05,440
while our schemes were implemented in c

506
00:21:05,440 --> 00:21:07,760
plus plus and in general

507
00:21:07,760 --> 00:21:10,720
c process is much faster than java so we

508
00:21:10,720 --> 00:21:13,120
implemented bix and c plus for fair

509
00:21:13,120 --> 00:21:15,760
comparison

510
00:21:15,760 --> 00:21:18,000
the table shows the micro benchmarks for

511
00:21:18,000 --> 00:21:21,760
the search time of cnn filter and bix on

512
00:21:21,760 --> 00:21:24,720
randomly chosen queries of the form d1

513
00:21:24,720 --> 00:21:26,720
and d2 and d3

514
00:21:26,720 --> 00:21:29,520
where each di is a four label

515
00:21:29,520 --> 00:21:30,960
disjunctions

516
00:21:30,960 --> 00:21:32,000
um

517
00:21:32,000 --> 00:21:34,559
the data set is on the

518
00:21:34,559 --> 00:21:37,559
um

519
00:21:48,640 --> 00:21:50,240
um

520
00:21:50,240 --> 00:21:53,039
on the lr

521
00:21:56,840 --> 00:22:00,400
yeah elon dsm

522
00:22:00,400 --> 00:22:03,360
the leftmost call okay going back um the

523
00:22:03,360 --> 00:22:06,480
leftmost column and the topmost row um

524
00:22:06,480 --> 00:22:08,320
uh denote the number of values

525
00:22:08,320 --> 00:22:10,159
associated with each label in the first

526
00:22:10,159 --> 00:22:12,640
and the second clause respectively

527
00:22:12,640 --> 00:22:14,799
the number of values associated with

528
00:22:14,799 --> 00:22:19,039
labels in d3 are fixed to 10 000

529
00:22:19,039 --> 00:22:21,360
and all search times were measured in

530
00:22:21,360 --> 00:22:23,919
milliseconds and from the table we can

531
00:22:23,919 --> 00:22:25,520
see that our cnf filters scheme

532
00:22:25,520 --> 00:22:28,320
outperforms bix in all scenarios

533
00:22:28,320 --> 00:22:30,559
and in some cases as much as a 20x

534
00:22:30,559 --> 00:22:32,960
master

535
00:22:35,600 --> 00:22:38,880
so the line chart here shows that the

536
00:22:38,880 --> 00:22:41,360
search token sizes of cnn filter and bix

537
00:22:41,360 --> 00:22:43,200
were three clause

538
00:22:43,200 --> 00:22:44,960
um cnfs

539
00:22:44,960 --> 00:22:48,720
d1 and d2 and d3 where

540
00:22:48,720 --> 00:22:51,120
where the d1 and d2 contain

541
00:22:51,120 --> 00:22:54,720
five labels and the x-axis indicates the

542
00:22:54,720 --> 00:22:57,520
number of labels in d3

543
00:22:57,520 --> 00:22:59,679
we see that the token size of cnn filter

544
00:22:59,679 --> 00:23:02,080
is almost twice as small as

545
00:23:02,080 --> 00:23:03,679
data bis

546
00:23:03,679 --> 00:23:07,440
so we can see that our cnn filter

547
00:23:07,440 --> 00:23:08,960
scheme

548
00:23:08,960 --> 00:23:11,520
has a better token size

549
00:23:11,520 --> 00:23:14,158
in practice

550
00:23:17,760 --> 00:23:18,559
so

551
00:23:18,559 --> 00:23:20,320
this table

552
00:23:20,320 --> 00:23:22,880
shows uh storage and setup time of cnn

553
00:23:22,880 --> 00:23:25,039
filter and bix

554
00:23:25,039 --> 00:23:27,440
since cnn filter maintains an additional

555
00:23:27,440 --> 00:23:29,600
data structure x we observe that the

556
00:23:29,600 --> 00:23:31,360
storage size and setup

557
00:23:31,360 --> 00:23:34,320
time are generally larger for cn filter

558
00:23:34,320 --> 00:23:36,480
however we see that the storage size is

559
00:23:36,480 --> 00:23:37,919
only um

560
00:23:37,919 --> 00:23:41,679
20 to 25 larger than the bix here

561
00:23:41,679 --> 00:23:44,080
and uh as for the

562
00:23:44,080 --> 00:23:46,159
set of time and the storage time we

563
00:23:46,159 --> 00:23:47,919
believe that the extra

564
00:23:47,919 --> 00:23:49,520
extra um

565
00:23:49,520 --> 00:23:51,760
i guess overhead is reasonable given the

566
00:23:51,760 --> 00:23:53,600
leakage communication and the survey

567
00:23:53,600 --> 00:23:55,520
computation improvements that

568
00:23:55,520 --> 00:23:58,480
are cnn filter

