1
00:00:01,199 --> 00:00:03,279
hi i am lerm and welcome to my

2
00:00:03,280 --> 00:00:05,200
presentation on giving an adversary

3
00:00:05,200 --> 00:00:07,839
guarantees or how to model designated

4
00:00:07,839 --> 00:00:09,599
verifier signatures in a composable

5
00:00:09,599 --> 00:00:11,200
framework

6
00:00:11,200 --> 00:00:13,200
this is joint work with willie marr and

7
00:00:13,200 --> 00:00:16,840
christopher portman

8
00:00:18,160 --> 00:00:20,720
security notions normally capture what

9
00:00:20,720 --> 00:00:23,039
dishonest parties cannot achieve

10
00:00:23,039 --> 00:00:25,199
for example let's consider an ideal

11
00:00:25,199 --> 00:00:27,760
resource capturing authenticity

12
00:00:27,760 --> 00:00:30,640
we consider a setting with 5 parties

13
00:00:30,640 --> 00:00:36,160
alice pop 1 pop 2 pop 3 and if

14
00:00:36,239 --> 00:00:38,480
authenticity is captured by an

15
00:00:38,480 --> 00:00:40,879
authenticated channel out

16
00:00:40,879 --> 00:00:43,280
to which alice can write and from which

17
00:00:43,280 --> 00:00:46,000
each of these bobs can read

18
00:00:46,000 --> 00:00:48,960
eve who is a dishonest party interacts

19
00:00:48,960 --> 00:00:50,879
with a simulator

20
00:00:50,879 --> 00:00:53,280
since we want to capture authenticity

21
00:00:53,280 --> 00:00:56,079
this simulator can only read from this

22
00:00:56,079 --> 00:00:59,840
authenticated channel

23
00:01:00,079 --> 00:01:02,320
this authenticated channel

24
00:01:02,320 --> 00:01:04,879
essentially is capturing a guarantee

25
00:01:04,879 --> 00:01:07,280
that if one of these bobs reads a

26
00:01:07,280 --> 00:01:12,439
message then alice wrote it

27
00:01:14,159 --> 00:01:16,880
however some security notions capture

28
00:01:16,880 --> 00:01:19,040
the exact opposite

29
00:01:19,040 --> 00:01:21,200
namely that dishonest parties must have

30
00:01:21,200 --> 00:01:23,520
some capability

31
00:01:23,520 --> 00:01:25,200
for example let's consider

32
00:01:25,200 --> 00:01:29,040
multi-designated verifier signatures

33
00:01:29,040 --> 00:01:31,840
for these signatures ali can designate

34
00:01:31,840 --> 00:01:34,720
the receivers of her messages

35
00:01:34,720 --> 00:01:36,400
let's say it's the three bobs from

36
00:01:36,400 --> 00:01:38,799
before

37
00:01:38,880 --> 00:01:42,399
then authenticity is given exclusively

38
00:01:42,399 --> 00:01:44,159
to these bobs

39
00:01:44,159 --> 00:01:47,520
so only one of these bobs can learn if

40
00:01:47,520 --> 00:01:51,280
alice is the one sending a message

41
00:01:51,360 --> 00:01:53,119
in particular

42
00:01:53,119 --> 00:01:56,799
if cannot tell if alice sent a message

43
00:01:56,799 --> 00:01:57,840
even if

44
00:01:57,840 --> 00:02:01,840
any subset of these bulbs is dishonest

45
00:02:01,840 --> 00:02:06,159
this property is called off the record

46
00:02:06,960 --> 00:02:09,440
let's see how this is possible

47
00:02:09,440 --> 00:02:12,400
so if all pops are honest then any

48
00:02:12,400 --> 00:02:14,640
dishonest party can pretend to be ali

49
00:02:14,640 --> 00:02:16,080
sending a message

50
00:02:16,080 --> 00:02:18,720
and if simply cannot tell if alice sent

51
00:02:18,720 --> 00:02:19,760
a message

52
00:02:19,760 --> 00:02:21,760
or if it is some dishonest party

53
00:02:21,760 --> 00:02:25,920
pretending that ali sending a message

54
00:02:26,800 --> 00:02:29,280
if some or even all of these bulbs are

55
00:02:29,280 --> 00:02:30,560
dishonest

56
00:02:30,560 --> 00:02:31,440
then

57
00:02:31,440 --> 00:02:33,120
well these dishonest pops can

58
00:02:33,120 --> 00:02:36,160
cooperatively simulate ali sending a

59
00:02:36,160 --> 00:02:37,760
message

60
00:02:37,760 --> 00:02:40,080
and again if cannot tell if ali is

61
00:02:40,080 --> 00:02:43,040
sending a message or if the dishonest

62
00:02:43,040 --> 00:02:45,599
popes are simulating ali sending a

63
00:02:45,599 --> 00:02:46,720
message

64
00:02:46,720 --> 00:02:50,560
and this must hold even if eve knows all

65
00:02:50,560 --> 00:02:54,720
of the dishonest bob's secrets

66
00:02:54,720 --> 00:02:57,599
so in any case if cannot tell if alice

67
00:02:57,599 --> 00:02:59,920
is sending a message or if someone is

68
00:02:59,920 --> 00:03:03,680
simulating ali sending a message

69
00:03:03,680 --> 00:03:05,760
i want to make a note here that off the

70
00:03:05,760 --> 00:03:09,120
record does not violate authenticity

71
00:03:09,120 --> 00:03:11,360
author record guarantees that eve who is

72
00:03:11,360 --> 00:03:14,480
not a designated receiver cannot tell if

73
00:03:14,480 --> 00:03:17,599
the sender sent a message

74
00:03:17,599 --> 00:03:20,480
authenticity guarantees that

75
00:03:20,480 --> 00:03:23,599
honest bulbs can

76
00:03:24,319 --> 00:03:27,200
let's see how can one model authenticity

77
00:03:27,200 --> 00:03:31,798
and of the record guarantees together

78
00:03:32,159 --> 00:03:34,239
so now let's consider again the same

79
00:03:34,239 --> 00:03:36,239
setting as before

80
00:03:36,239 --> 00:03:38,080
and let's have a look at the real world

81
00:03:38,080 --> 00:03:39,920
system

82
00:03:39,920 --> 00:03:40,879
so

83
00:03:40,879 --> 00:03:43,200
in the real world there are two assumed

84
00:03:43,200 --> 00:03:45,680
resources there is a key generation

85
00:03:45,680 --> 00:03:49,040
authority kga which is responsible for

86
00:03:49,040 --> 00:03:50,799
generating the

87
00:03:50,799 --> 00:03:52,879
key pairs of each party

88
00:03:52,879 --> 00:03:54,799
and there is also an insecure channel to

89
00:03:54,799 --> 00:03:57,040
which everyone can write and also from

90
00:03:57,040 --> 00:04:00,000
which everyone can read

91
00:04:00,000 --> 00:04:04,400
alice being honest runs converter send

92
00:04:04,400 --> 00:04:06,480
and this converter essentially gets the

93
00:04:06,480 --> 00:04:09,599
public keys of all parties so alice

94
00:04:09,599 --> 00:04:11,840
pogba unboxing both three illustrated

95
00:04:11,840 --> 00:04:13,680
here

96
00:04:13,680 --> 00:04:16,160
and also gets the secret key of alice

97
00:04:16,160 --> 00:04:18,160
for sending messages

98
00:04:18,160 --> 00:04:20,160
so whenever alice

99
00:04:20,160 --> 00:04:23,360
input some message m into this send

100
00:04:23,360 --> 00:04:24,639
converter

101
00:04:24,639 --> 00:04:26,880
this sam converter uses this public keys

102
00:04:26,880 --> 00:04:27,600
and

103
00:04:27,600 --> 00:04:29,440
secret key of alice

104
00:04:29,440 --> 00:04:32,639
to generate a signature on this message

105
00:04:32,639 --> 00:04:34,479
which it then writes

106
00:04:34,479 --> 00:04:36,560
together with a message into this

107
00:04:36,560 --> 00:04:39,520
insecure channel

108
00:04:40,720 --> 00:04:42,560
each of these bulbs runs a receive

109
00:04:42,560 --> 00:04:43,919
converter

110
00:04:43,919 --> 00:04:44,960
and

111
00:04:44,960 --> 00:04:47,120
these receive converters all get the

112
00:04:47,120 --> 00:04:50,160
public keys of every party

113
00:04:50,160 --> 00:04:52,320
in addition each of the receive

114
00:04:52,320 --> 00:04:55,360
converters get as input the secret key

115
00:04:55,360 --> 00:04:58,720
of the corresponding bob

116
00:04:59,199 --> 00:05:02,720
finally eve who is this is honest party

117
00:05:02,720 --> 00:05:04,800
can interact with the insecure channel

118
00:05:04,800 --> 00:05:07,360
and only has access to the public keys

119
00:05:07,360 --> 00:05:10,840
of all parties

120
00:05:10,960 --> 00:05:14,720
well what if both three is dishonest

121
00:05:14,720 --> 00:05:17,199
so in this case bob3 does not run a

122
00:05:17,199 --> 00:05:19,360
converter anymore

123
00:05:19,360 --> 00:05:22,400
but furthermore in addition to that now

124
00:05:22,400 --> 00:05:25,120
bob's three key the secret kill for

125
00:05:25,120 --> 00:05:28,720
three also leaks to eve

126
00:05:31,199 --> 00:05:34,400
now let's have a look at the ideal world

127
00:05:34,400 --> 00:05:37,120
as before we have an authenticated

128
00:05:37,120 --> 00:05:39,280
channel to which alice can write and

129
00:05:39,280 --> 00:05:42,320
from which the honest bobs can read

130
00:05:42,320 --> 00:05:44,400
even both three who are dishonest

131
00:05:44,400 --> 00:05:46,479
interact with the simulator

132
00:05:46,479 --> 00:05:48,400
and the simulator can read from the

133
00:05:48,400 --> 00:05:51,199
authenticated channel at if's interface

134
00:05:51,199 --> 00:05:53,520
and can both read and write

135
00:05:53,520 --> 00:05:56,560
from the authenticated channel at pop3's

136
00:05:56,560 --> 00:05:59,120
interface

137
00:05:59,280 --> 00:06:03,280
however notice that this ideal world

138
00:06:03,280 --> 00:06:05,440
does not actually capture this after

139
00:06:05,440 --> 00:06:07,600
record guarantee

140
00:06:07,600 --> 00:06:09,600
why is that well

141
00:06:09,600 --> 00:06:11,280
first notice that actually any

142
00:06:11,280 --> 00:06:13,600
unforgeable signature scheme satisfies

143
00:06:13,600 --> 00:06:16,720
his composable notion

144
00:06:16,960 --> 00:06:19,600
why because a simulator could simply

145
00:06:19,600 --> 00:06:21,360
not write into this authenticated

146
00:06:21,360 --> 00:06:24,080
channel and in this case eve would of

147
00:06:24,080 --> 00:06:26,400
course note that if something shows up

148
00:06:26,400 --> 00:06:28,800
in this authenticated channel then it

149
00:06:28,800 --> 00:06:32,400
must have been ali's writing

150
00:06:32,560 --> 00:06:35,039
so how can we guarantee

151
00:06:35,039 --> 00:06:35,919
that

152
00:06:35,919 --> 00:06:38,880
dishonest pop3 could have written

153
00:06:38,880 --> 00:06:40,880
or more generally

154
00:06:40,880 --> 00:06:42,560
how can we model

155
00:06:42,560 --> 00:06:45,039
that dishonest parties have some

156
00:06:45,039 --> 00:06:48,039
capability

157
00:06:49,360 --> 00:06:52,080
we model this by using the notion of

158
00:06:52,080 --> 00:06:55,120
specifications introduced by mower and

159
00:06:55,120 --> 00:06:57,520
runner

160
00:06:58,400 --> 00:07:00,840
recalled the authenticated channel from

161
00:07:00,840 --> 00:07:04,240
before so this resource

162
00:07:04,240 --> 00:07:06,880
consists of an authenticated channel and

163
00:07:06,880 --> 00:07:10,319
a fixed simulator attached to bob3 and

164
00:07:10,319 --> 00:07:12,720
divs interfaces of this authenticated

165
00:07:12,720 --> 00:07:14,560
channel

166
00:07:14,560 --> 00:07:15,680
usually

167
00:07:15,680 --> 00:07:17,599
one is actually not interested in a

168
00:07:17,599 --> 00:07:18,880
single

169
00:07:18,880 --> 00:07:20,080
system

170
00:07:20,080 --> 00:07:21,199
but actually

171
00:07:21,199 --> 00:07:23,199
any resource

172
00:07:23,199 --> 00:07:26,479
that gives some guarantee

173
00:07:26,880 --> 00:07:27,680
so

174
00:07:27,680 --> 00:07:30,560
we can consider instead the set

175
00:07:30,560 --> 00:07:33,520
of systems that give the guarantee that

176
00:07:33,520 --> 00:07:36,720
well if bob won or bob two so if any

177
00:07:36,720 --> 00:07:39,120
honest bob reads a message

178
00:07:39,120 --> 00:07:41,919
then alice wrote it

179
00:07:41,919 --> 00:07:44,560
a specification then allows to abstract

180
00:07:44,560 --> 00:07:46,960
away from what eve and both three might

181
00:07:46,960 --> 00:07:49,440
be doing at their interfaces

182
00:07:49,440 --> 00:07:52,800
and simply captures any resource giving

183
00:07:52,800 --> 00:07:55,599
this guarantee

184
00:07:56,000 --> 00:07:59,680
using this notion of specifications

185
00:07:59,680 --> 00:08:01,520
we can then capture

186
00:08:01,520 --> 00:08:03,680
the ideal world that we wanted before to

187
00:08:03,680 --> 00:08:05,039
capture

188
00:08:05,039 --> 00:08:05,840
so

189
00:08:05,840 --> 00:08:08,879
essentially we define one specification

190
00:08:08,879 --> 00:08:11,039
capturing authenticity

191
00:08:11,039 --> 00:08:13,680
so one specification is as usual

192
00:08:13,680 --> 00:08:15,199
restricting the

193
00:08:15,199 --> 00:08:18,080
capabilities of dishonest parties

194
00:08:18,080 --> 00:08:20,319
and the other specification

195
00:08:20,319 --> 00:08:22,720
captures the guarantees given to these

196
00:08:22,720 --> 00:08:24,080
honest parties

197
00:08:24,080 --> 00:08:25,599
so in this case

198
00:08:25,599 --> 00:08:27,520
the other specification will capture the

199
00:08:27,520 --> 00:08:29,680
after record guarantee namely that

200
00:08:29,680 --> 00:08:33,599
dishonest parties can write too

201
00:08:34,000 --> 00:08:37,519
the ideal specification then corresponds

202
00:08:37,519 --> 00:08:41,200
to an intersection of specifications

203
00:08:41,200 --> 00:08:43,039
essentially it then isn't a

204
00:08:43,039 --> 00:08:45,839
specification giving both guarantees

205
00:08:45,839 --> 00:08:49,839
authenticity and of the record

206
00:08:50,640 --> 00:08:54,240
so in this paper we show how to model

207
00:08:54,240 --> 00:08:56,959
guarantees given to dishonest parties in

208
00:08:56,959 --> 00:08:59,360
concertific cryptography and in

209
00:08:59,360 --> 00:09:01,519
particular we give the first composable

210
00:09:01,519 --> 00:09:03,600
notions capturing the security of

211
00:09:03,600 --> 00:09:05,519
multi-designated verifier signature

212
00:09:05,519 --> 00:09:08,399
schemes or mdvs for short

213
00:09:08,399 --> 00:09:10,800
finally we compare our composable

214
00:09:10,800 --> 00:09:13,120
notions against existing game-based

215
00:09:13,120 --> 00:09:16,560
security notions for mdvs and we find

216
00:09:16,560 --> 00:09:18,640
that only recently the notions

217
00:09:18,640 --> 00:09:20,959
introduced by damguard actually captured

218
00:09:20,959 --> 00:09:24,080
the security of mdvs

219
00:09:24,080 --> 00:09:26,640
furthermore these notions are still

220
00:09:26,640 --> 00:09:28,880
strictly stronger than our composable

221
00:09:28,880 --> 00:09:31,360
notions

222
00:09:34,560 --> 00:09:37,200
constructive cryptography is a research

223
00:09:37,200 --> 00:09:39,279
theory from the assumed resources you

224
00:09:39,279 --> 00:09:42,000
construct new ones

225
00:09:42,000 --> 00:09:43,920
recall the notion of specification which

226
00:09:43,920 --> 00:09:46,480
is just a set of resources satisfying

227
00:09:46,480 --> 00:09:49,360
some guarantee

228
00:09:49,519 --> 00:09:51,519
then the notion of construction just

229
00:09:51,519 --> 00:09:52,720
says that

230
00:09:52,720 --> 00:09:55,519
if you have an assumed specification r

231
00:09:55,519 --> 00:09:57,600
using a protocol pi you can now

232
00:09:57,600 --> 00:09:59,680
construct a new specification which

233
00:09:59,680 --> 00:10:04,079
gives you some desirable guarantee

234
00:10:04,079 --> 00:10:06,480
essentially if you take any resource in

235
00:10:06,480 --> 00:10:08,959
this specification r and you attach to

236
00:10:08,959 --> 00:10:11,839
this resource this protocol pi you end

237
00:10:11,839 --> 00:10:14,399
up with one resource which is in this

238
00:10:14,399 --> 00:10:16,640
new specification s which gives you this

239
00:10:16,640 --> 00:10:19,120
ideal guarantee so a construction

240
00:10:19,120 --> 00:10:21,440
statement holds if this subset relation

241
00:10:21,440 --> 00:10:23,839
holds

242
00:10:24,800 --> 00:10:27,040
let's now look at an example of a

243
00:10:27,040 --> 00:10:29,839
construction statement

244
00:10:29,839 --> 00:10:32,399
for instance consider

245
00:10:32,399 --> 00:10:33,839
two assumed

246
00:10:33,839 --> 00:10:35,680
specifications a key generation

247
00:10:35,680 --> 00:10:38,880
authority and an insecure channel

248
00:10:38,880 --> 00:10:41,040
the key generation authority generates

249
00:10:41,040 --> 00:10:44,079
alice's public secret key pair and sends

250
00:10:44,079 --> 00:10:46,720
the key pair to alice

251
00:10:46,720 --> 00:10:49,839
it also sends the public key of alice to

252
00:10:49,839 --> 00:10:53,120
pope's verification converter

253
00:10:53,120 --> 00:10:56,720
finally it links the public key to eve

254
00:10:56,720 --> 00:10:59,040
whenever alice writes a message into

255
00:10:59,040 --> 00:11:00,399
this sign converter

256
00:11:00,399 --> 00:11:02,160
the sign converter sends this message

257
00:11:02,160 --> 00:11:04,880
using the secret key of alice and sends

258
00:11:04,880 --> 00:11:06,880
the signature and the message to the

259
00:11:06,880 --> 00:11:09,120
insecure channel

260
00:11:09,120 --> 00:11:11,040
when bob's converter reads from the

261
00:11:11,040 --> 00:11:13,680
insecure channel

262
00:11:13,680 --> 00:11:16,880
it verifies if the message and the

263
00:11:16,880 --> 00:11:18,480
signature

264
00:11:18,480 --> 00:11:20,880
are valid so it verifies if the

265
00:11:20,880 --> 00:11:23,680
signature is valid for the corresponding

266
00:11:23,680 --> 00:11:26,320
message with respect to alice's public

267
00:11:26,320 --> 00:11:29,120
key if it is it outputs this message to

268
00:11:29,120 --> 00:11:31,440
bob

269
00:11:32,079 --> 00:11:35,040
regarding the ideal specification we

270
00:11:35,040 --> 00:11:36,640
have a

271
00:11:36,640 --> 00:11:40,320
authenticated channel from alice to bob

272
00:11:40,320 --> 00:11:42,480
essentially alice can write into this

273
00:11:42,480 --> 00:11:44,160
authentic

274
00:11:44,160 --> 00:11:46,240
channel and bob can read from this

275
00:11:46,240 --> 00:11:47,200
channel

276
00:11:47,200 --> 00:11:48,079
if

277
00:11:48,079 --> 00:11:49,680
being dishonest interacts with the

278
00:11:49,680 --> 00:11:51,680
simulator and can only read from this

279
00:11:51,680 --> 00:11:54,000
authenticated

280
00:11:54,000 --> 00:11:57,000
channel

281
00:11:58,000 --> 00:12:00,639
the construction statement holds if the

282
00:12:00,639 --> 00:12:03,760
real world specification is a subset

283
00:12:03,760 --> 00:12:07,440
of this ideal world specification

284
00:12:07,440 --> 00:12:11,839
now let's see what composition means

285
00:12:14,320 --> 00:12:16,160
in particular let's

286
00:12:16,160 --> 00:12:17,680
assume that

287
00:12:17,680 --> 00:12:19,120
we have two

288
00:12:19,120 --> 00:12:21,760
construction statements

289
00:12:21,760 --> 00:12:23,760
the first construction statement states

290
00:12:23,760 --> 00:12:24,560
that

291
00:12:24,560 --> 00:12:26,959
if you apply a protocol pi

292
00:12:26,959 --> 00:12:29,680
to a specification r

293
00:12:29,680 --> 00:12:33,360
you construct a specification s so

294
00:12:33,360 --> 00:12:34,720
essentially

295
00:12:34,720 --> 00:12:35,839
pi

296
00:12:35,839 --> 00:12:38,399
applied to specification r is a subset

297
00:12:38,399 --> 00:12:40,880
of specification s

298
00:12:40,880 --> 00:12:43,600
furthermore let's also assume that

299
00:12:43,600 --> 00:12:45,760
for some protocol pi prime

300
00:12:45,760 --> 00:12:47,279
if you attach pi prime to this

301
00:12:47,279 --> 00:12:49,600
specification s now you construct a

302
00:12:49,600 --> 00:12:52,320
specification d

303
00:12:52,320 --> 00:12:55,839
what composition says is that now if you

304
00:12:55,839 --> 00:12:57,839
apply pi prime

305
00:12:57,839 --> 00:13:01,760
and apply pi to r to specification r

306
00:13:01,760 --> 00:13:02,880
then

307
00:13:02,880 --> 00:13:04,240
you end up constructing the

308
00:13:04,240 --> 00:13:07,839
specification t

309
00:13:09,040 --> 00:13:11,920
so essentially

310
00:13:11,920 --> 00:13:14,079
the authenticated

311
00:13:14,079 --> 00:13:16,240
specification the authenticated channel

312
00:13:16,240 --> 00:13:19,120
specification we have contracted before

313
00:13:19,120 --> 00:13:22,240
here the simulator is not being shown

314
00:13:22,240 --> 00:13:24,399
for simplicity

315
00:13:24,399 --> 00:13:27,519
can now be used as

316
00:13:27,519 --> 00:13:30,399
an assumed specification for a further

317
00:13:30,399 --> 00:13:33,120
construction

318
00:13:33,360 --> 00:13:34,880
namely the construction of a

319
00:13:34,880 --> 00:13:37,120
confidential channel

320
00:13:37,120 --> 00:13:39,760
in this construction bob runs an

321
00:13:39,760 --> 00:13:41,839
encryption converter and alice runs a

322
00:13:41,839 --> 00:13:44,240
decryption converter

323
00:13:44,240 --> 00:13:46,320
alice's decryption converter first

324
00:13:46,320 --> 00:13:48,160
generates a keypair

325
00:13:48,160 --> 00:13:50,480
and sends the public key

326
00:13:50,480 --> 00:13:52,720
through this authenticated channel to

327
00:13:52,720 --> 00:13:54,639
bob

328
00:13:54,639 --> 00:13:56,639
bob's encryption converter then stores

329
00:13:56,639 --> 00:13:58,000
his public key

330
00:13:58,000 --> 00:13:59,440
and whenever

331
00:13:59,440 --> 00:14:02,240
bob wants to send a message

332
00:14:02,240 --> 00:14:04,320
bob's converter just uses this public

333
00:14:04,320 --> 00:14:06,480
key to encrypt the message

334
00:14:06,480 --> 00:14:08,560
and then writes the cipher text into

335
00:14:08,560 --> 00:14:11,199
this insecure channel

336
00:14:11,199 --> 00:14:13,360
alice's decryption converter then reads

337
00:14:13,360 --> 00:14:15,519
from this insecure channel

338
00:14:15,519 --> 00:14:18,079
decrypts the message and if it is a

339
00:14:18,079 --> 00:14:20,320
valid one simply outputs his message to

340
00:14:20,320 --> 00:14:22,320
alice

341
00:14:22,320 --> 00:14:24,399
of course if here

342
00:14:24,399 --> 00:14:27,120
still gets access to the public key of

343
00:14:27,120 --> 00:14:28,240
alice

344
00:14:28,240 --> 00:14:29,920
and can interact with this insecure

345
00:14:29,920 --> 00:14:32,240
channel

346
00:14:33,279 --> 00:14:35,839
regarding the ideal specification

347
00:14:35,839 --> 00:14:38,399
bob can write into this confidential

348
00:14:38,399 --> 00:14:40,399
channel and alice can read from this

349
00:14:40,399 --> 00:14:42,560
confidential channel

350
00:14:42,560 --> 00:14:44,880
here note that the only thing that is

351
00:14:44,880 --> 00:14:48,000
leaked to the simulator is actually the

352
00:14:48,000 --> 00:14:52,639
length of messages that bob inputs

353
00:14:54,160 --> 00:14:56,800
the simulator can for instance now

354
00:14:56,800 --> 00:14:59,199
inject new messages into this

355
00:14:59,199 --> 00:15:02,079
confidential channel however it cannot

356
00:15:02,079 --> 00:15:03,680
tamper with the ones that are already

357
00:15:03,680 --> 00:15:06,239
written there

358
00:15:07,120 --> 00:15:08,880
the construction statement would hold

359
00:15:08,880 --> 00:15:09,839
again

360
00:15:09,839 --> 00:15:12,720
if now the real world specification is

361
00:15:12,720 --> 00:15:15,279
proven to be a subset of this ideal

362
00:15:15,279 --> 00:15:16,800
world specification capturing

363
00:15:16,800 --> 00:15:19,800
confidentiality

364
00:15:21,920 --> 00:15:24,160
finally we introduce specification

365
00:15:24,160 --> 00:15:26,720
relaxations

366
00:15:26,720 --> 00:15:28,480
often constructions do not hold

367
00:15:28,480 --> 00:15:30,959
unconditionally when this happens one

368
00:15:30,959 --> 00:15:33,920
usually resorts to making assumptions

369
00:15:33,920 --> 00:15:36,160
for example one can make the discrete

370
00:15:36,160 --> 00:15:38,320
log assumption namely that computing

371
00:15:38,320 --> 00:15:40,880
discrete logarithms for certain groups

372
00:15:40,880 --> 00:15:42,800
is hard

373
00:15:42,800 --> 00:15:45,440
then construction make statements become

374
00:15:45,440 --> 00:15:47,759
bound to assumptions

375
00:15:47,759 --> 00:15:50,399
for example one would give a reduction

376
00:15:50,399 --> 00:15:52,480
cdl

377
00:15:52,480 --> 00:15:56,240
and show that for any distinguisher d

378
00:15:56,240 --> 00:15:59,519
and for any real world resource r in the

379
00:15:59,519 --> 00:16:02,320
real world specification r

380
00:16:02,320 --> 00:16:03,920
there is some

381
00:16:03,920 --> 00:16:06,320
ideal resource s in this ideal

382
00:16:06,320 --> 00:16:09,600
specification s such that

383
00:16:09,600 --> 00:16:11,279
if you apply

384
00:16:11,279 --> 00:16:14,800
the protocol pi to r

385
00:16:14,959 --> 00:16:16,800
a distinguisher that could distinguish

386
00:16:16,800 --> 00:16:17,759
this

387
00:16:17,759 --> 00:16:19,839
from this ideal

388
00:16:19,839 --> 00:16:20,959
ideal

389
00:16:20,959 --> 00:16:22,800
resource s

390
00:16:22,800 --> 00:16:25,440
would also be able to break

391
00:16:25,440 --> 00:16:28,399
the discrete log assumption

392
00:16:28,399 --> 00:16:29,839
more formally

393
00:16:29,839 --> 00:16:31,519
the advantage

394
00:16:31,519 --> 00:16:32,959
that the distinguisher could have in

395
00:16:32,959 --> 00:16:34,320
distinguishing

396
00:16:34,320 --> 00:16:37,120
pi attached to r and this system s

397
00:16:37,120 --> 00:16:40,079
is bounded by the advantage that this

398
00:16:40,079 --> 00:16:42,160
distinguisher would have

399
00:16:42,160 --> 00:16:43,759
together with this

400
00:16:43,759 --> 00:16:45,440
reduction cdl

401
00:16:45,440 --> 00:16:50,040
in breaking this discrete log assumption

402
00:16:50,959 --> 00:16:51,920
then

403
00:16:51,920 --> 00:16:54,800
the relaxation according to this to this

404
00:16:54,800 --> 00:16:56,720
function which

405
00:16:56,720 --> 00:16:58,560
into this function

406
00:16:58,560 --> 00:17:00,320
is defined as follows

407
00:17:00,320 --> 00:17:04,959
it is the union of systems are

408
00:17:04,959 --> 00:17:07,199
such that

409
00:17:07,199 --> 00:17:11,119
there is some ideal system s

410
00:17:11,119 --> 00:17:14,400
which no distinguisher can distinguish r

411
00:17:14,400 --> 00:17:15,760
from s

412
00:17:15,760 --> 00:17:18,400
unless it would be able to break this

413
00:17:18,400 --> 00:17:22,240
believe to be hard assumption

414
00:17:23,359 --> 00:17:25,679
the type of statement we then make is

415
00:17:25,679 --> 00:17:28,799
that if you attach pi to a real world

416
00:17:28,799 --> 00:17:33,120
resource or real world specification are

417
00:17:33,120 --> 00:17:36,880
this is a subset of the relaxation of

418
00:17:36,880 --> 00:17:41,600
this ideal world specification s

419
00:17:43,840 --> 00:17:46,400
more generally one can define an epsilon

420
00:17:46,400 --> 00:17:48,240
relaxation

421
00:17:48,240 --> 00:17:49,440
as

422
00:17:49,440 --> 00:17:52,080
the union for each

423
00:17:52,080 --> 00:17:53,679
system s

424
00:17:53,679 --> 00:17:54,880
in some

425
00:17:54,880 --> 00:17:56,000
ideal

426
00:17:56,000 --> 00:17:59,679
relax in this ideal specification

427
00:17:59,679 --> 00:18:02,000
of the system such that

428
00:18:02,000 --> 00:18:05,760
they are epsilon close to this ideal

429
00:18:05,760 --> 00:18:07,280
resource s

430
00:18:07,280 --> 00:18:08,960
so essentially

431
00:18:08,960 --> 00:18:13,520
if any distinguisher would

432
00:18:13,520 --> 00:18:15,679
for any distinguisher the distinguisher

433
00:18:15,679 --> 00:18:16,640
cannot

434
00:18:16,640 --> 00:18:18,480
uh cannot distinguish

435
00:18:18,480 --> 00:18:19,360
this

436
00:18:19,360 --> 00:18:20,799
resource r

437
00:18:20,799 --> 00:18:23,520
from this ideal resource s

438
00:18:23,520 --> 00:18:25,200
better than some function of this

439
00:18:25,200 --> 00:18:28,160
distinguisher

440
00:18:28,160 --> 00:18:30,080
okay and this function could for example

441
00:18:30,080 --> 00:18:32,320
be the advantage that

442
00:18:32,320 --> 00:18:34,799
a distinguisher together with this

443
00:18:34,799 --> 00:18:36,720
reduction would have in

444
00:18:36,720 --> 00:18:39,039
uh breaking or in solving some belief to

445
00:18:39,039 --> 00:18:43,000
be hard problem efficiently

446
00:18:44,480 --> 00:18:47,280
now we introduce repositories

447
00:18:47,280 --> 00:18:49,520
repositories are an abstract model for

448
00:18:49,520 --> 00:18:53,360
communication that we use in our paper

449
00:18:53,360 --> 00:18:54,720
essentially

450
00:18:54,720 --> 00:18:56,960
a repository has a set of writers

451
00:18:56,960 --> 00:18:59,039
readers and copiers

452
00:18:59,039 --> 00:19:00,799
each writer can write into this

453
00:19:00,799 --> 00:19:04,000
repository each reader can read and each

454
00:19:04,000 --> 00:19:07,600
copier can issue copy operations

455
00:19:07,600 --> 00:19:10,320
if you want to make these sets explicit

456
00:19:10,320 --> 00:19:12,960
in the notation for repositories

457
00:19:12,960 --> 00:19:15,200
we simply add superscripts and

458
00:19:15,200 --> 00:19:16,480
subscripts

459
00:19:16,480 --> 00:19:19,200
as we can see

460
00:19:20,720 --> 00:19:22,320
finally

461
00:19:22,320 --> 00:19:24,320
we start going into our composable

462
00:19:24,320 --> 00:19:26,799
notions

463
00:19:26,880 --> 00:19:30,880
first let's introduce some notation

464
00:19:30,880 --> 00:19:33,120
we denote a set of parties

465
00:19:33,120 --> 00:19:35,600
by p

466
00:19:35,600 --> 00:19:37,840
out of these parties we consider two

467
00:19:37,840 --> 00:19:40,080
partitions the honest parties and the

468
00:19:40,080 --> 00:19:43,199
dishonest parties

469
00:19:44,320 --> 00:19:47,280
we also consider two subsets of the

470
00:19:47,280 --> 00:19:48,640
parties p

471
00:19:48,640 --> 00:19:51,280
in particular we consider the set of

472
00:19:51,280 --> 00:19:53,039
senders s

473
00:19:53,039 --> 00:19:56,960
and the set of receivers are

474
00:19:57,520 --> 00:19:59,760
as for the set of parties we also

475
00:19:59,760 --> 00:20:02,720
consider the honest partitions of this

476
00:20:02,720 --> 00:20:04,480
set of senders and the honest and

477
00:20:04,480 --> 00:20:06,400
dishonest partitions of the set of

478
00:20:06,400 --> 00:20:09,039
receivers

479
00:20:12,240 --> 00:20:14,640
for the following notions we consider a

480
00:20:14,640 --> 00:20:17,600
setting with a fixed and single sender

481
00:20:17,600 --> 00:20:20,600
alice

482
00:20:20,720 --> 00:20:22,400
there is a fixed set of designated

483
00:20:22,400 --> 00:20:24,000
receivers r

484
00:20:24,000 --> 00:20:26,240
and there is also a non-designated

485
00:20:26,240 --> 00:20:30,880
receiver and dishonest party eve

486
00:20:30,880 --> 00:20:32,880
the set of parties then corresponds to

487
00:20:32,880 --> 00:20:35,360
alice if and this set of fixed

488
00:20:35,360 --> 00:20:38,640
designated receivers

489
00:20:38,640 --> 00:20:41,600
alice always sends messages to the same

490
00:20:41,600 --> 00:20:44,000
set r

491
00:20:44,000 --> 00:20:47,360
finally we consider static corruptions

492
00:20:47,360 --> 00:20:50,080
so we consider that the set of honest

493
00:20:50,080 --> 00:20:54,400
parties is fixed from the beginning

494
00:20:54,400 --> 00:20:57,120
the statements we will make will be

495
00:20:57,120 --> 00:20:58,559
of the form

496
00:20:58,559 --> 00:20:59,840
for each

497
00:20:59,840 --> 00:21:03,840
set of honest parties

498
00:21:04,000 --> 00:21:06,799
we define a specification a real world

499
00:21:06,799 --> 00:21:08,559
specification for the set of honest

500
00:21:08,559 --> 00:21:10,799
parties we define an ideal world

501
00:21:10,799 --> 00:21:13,039
specification also for the same set of

502
00:21:13,039 --> 00:21:15,200
honest parties and then we make

503
00:21:15,200 --> 00:21:17,520
statements of the form that

504
00:21:17,520 --> 00:21:19,760
the real world specification for the set

505
00:21:19,760 --> 00:21:23,039
of parties ph is a subset of the ideal

506
00:21:23,039 --> 00:21:25,520
world specification for the same set of

507
00:21:25,520 --> 00:21:29,000
honest parties

508
00:21:32,080 --> 00:21:33,840
now let's have a look at the real

509
00:21:33,840 --> 00:21:36,159
world's specification

510
00:21:36,159 --> 00:21:37,039
for

511
00:21:37,039 --> 00:21:39,679
the multi-designated verifier signature

512
00:21:39,679 --> 00:21:42,080
schemes

513
00:21:42,400 --> 00:21:43,280
so

514
00:21:43,280 --> 00:21:45,440
we assume again

515
00:21:45,440 --> 00:21:48,159
that we have three receivers but one bob

516
00:21:48,159 --> 00:21:49,840
two and both three

517
00:21:49,840 --> 00:21:52,960
all of them are honest

518
00:21:52,960 --> 00:21:56,080
there are two assumed specifications

519
00:21:56,080 --> 00:21:58,559
namely a key generation authority and an

520
00:21:58,559 --> 00:22:01,039
insecure channel

521
00:22:01,039 --> 00:22:03,760
alice who is honest gets her secret key

522
00:22:03,760 --> 00:22:06,159
from this key generation authority

523
00:22:06,159 --> 00:22:08,799
and whenever alice inputs a message into

524
00:22:08,799 --> 00:22:10,960
her converter sent

525
00:22:10,960 --> 00:22:13,840
this converter uses alice's secret key

526
00:22:13,840 --> 00:22:15,760
together with the public keys of each

527
00:22:15,760 --> 00:22:18,760
party so policy of alice publicly of

528
00:22:18,760 --> 00:22:21,039
pog1.2 and vote 3

529
00:22:21,039 --> 00:22:22,960
which are not shown in this picture for

530
00:22:22,960 --> 00:22:24,400
simplicity

531
00:22:24,400 --> 00:22:27,440
and uses this to generate a signature

532
00:22:27,440 --> 00:22:29,520
which it then writes to this insecure

533
00:22:29,520 --> 00:22:33,120
channel along with the message

534
00:22:33,280 --> 00:22:36,400
as i said each of these bulbs are honest

535
00:22:36,400 --> 00:22:38,559
so in this case each of them runs their

536
00:22:38,559 --> 00:22:41,360
own converter

537
00:22:41,360 --> 00:22:43,440
the converter of each bulb in addition

538
00:22:43,440 --> 00:22:46,159
to the public keys of every party also

539
00:22:46,159 --> 00:22:48,640
gets the secret key of the corresponding

540
00:22:48,640 --> 00:22:50,000
pop

541
00:22:50,000 --> 00:22:51,360
for example

542
00:22:51,360 --> 00:22:54,400
the converter of bob1 gets the secret

543
00:22:54,400 --> 00:22:57,200
key of bob1

544
00:22:57,200 --> 00:22:58,480
whenever

545
00:22:58,480 --> 00:23:01,200
the each of these bulbs reads from this

546
00:23:01,200 --> 00:23:04,080
insecure channel

547
00:23:04,080 --> 00:23:08,080
the receiver converter of this bulb just

548
00:23:08,080 --> 00:23:11,600
checks using its own secret key

549
00:23:11,600 --> 00:23:14,159
if the signature that comes together

550
00:23:14,159 --> 00:23:16,400
with a message which was written into

551
00:23:16,400 --> 00:23:19,039
this insecure channel

552
00:23:19,039 --> 00:23:21,200
is valid

553
00:23:21,200 --> 00:23:23,360
if it is then the message is simply

554
00:23:23,360 --> 00:23:25,679
output to bob

555
00:23:25,679 --> 00:23:28,400
if being a dishonest party only has

556
00:23:28,400 --> 00:23:31,039
access to the public keys

557
00:23:31,039 --> 00:23:32,960
furthermore it can also interact with

558
00:23:32,960 --> 00:23:36,240
this insecure channel

559
00:23:36,240 --> 00:23:39,039
for simplicity we'll drop the notation

560
00:23:39,039 --> 00:23:41,760
of these braces and from now on we'll

561
00:23:41,760 --> 00:23:43,440
simply write

562
00:23:43,440 --> 00:23:45,279
specifications without using these

563
00:23:45,279 --> 00:23:47,840
braces

564
00:23:49,039 --> 00:23:51,840
so from now on also we will consider

565
00:23:51,840 --> 00:23:53,360
that bob3

566
00:23:53,360 --> 00:23:55,840
is a dishonest party this means in

567
00:23:55,840 --> 00:23:59,200
particular that bob3 no longer runs its

568
00:23:59,200 --> 00:24:01,279
receive converter

569
00:24:01,279 --> 00:24:04,480
but furthermore it also means that if

570
00:24:04,480 --> 00:24:07,600
now has access to bob3's secret key

571
00:24:07,600 --> 00:24:10,480
which is leaked

572
00:24:13,279 --> 00:24:15,039
now let's have a look at the

573
00:24:15,039 --> 00:24:17,840
specification capturing correctness and

574
00:24:17,840 --> 00:24:20,400
authenticity

575
00:24:20,400 --> 00:24:22,880
so the specification consists of a

576
00:24:22,880 --> 00:24:24,480
repository

577
00:24:24,480 --> 00:24:27,200
with a simulator

578
00:24:27,200 --> 00:24:30,080
alice can write into this repository

579
00:24:30,080 --> 00:24:33,039
bob1 and botu the honest receivers can

580
00:24:33,039 --> 00:24:34,799
read

581
00:24:34,799 --> 00:24:36,720
even both three who are dishonest

582
00:24:36,720 --> 00:24:37,919
parties

583
00:24:37,919 --> 00:24:41,679
can interact with their simulator

584
00:24:41,679 --> 00:24:43,520
and now of course

585
00:24:43,520 --> 00:24:45,039
the only sender

586
00:24:45,039 --> 00:24:48,480
of this repository is alice

587
00:24:48,480 --> 00:24:51,279
the set of receivers is everyone but

588
00:24:51,279 --> 00:24:53,360
alice

589
00:24:53,360 --> 00:24:56,080
the set of parties who can copy values

590
00:24:56,080 --> 00:24:58,480
in this repository corresponds to the

591
00:24:58,480 --> 00:25:00,559
set of dishonest parties

592
00:25:00,559 --> 00:25:04,559
so the dishonest receivers and eve

593
00:25:08,000 --> 00:25:10,559
now let's see how to capture the off the

594
00:25:10,559 --> 00:25:12,720
record guarantee

595
00:25:12,720 --> 00:25:14,799
well what we want

596
00:25:14,799 --> 00:25:15,919
is

597
00:25:15,919 --> 00:25:18,320
an ideal resource

598
00:25:18,320 --> 00:25:22,159
an ideal repository

599
00:25:22,159 --> 00:25:24,960
from which eve can read

600
00:25:24,960 --> 00:25:27,600
and well if is dishonest so if interacts

601
00:25:27,600 --> 00:25:30,240
with her own simulator

602
00:25:30,240 --> 00:25:33,279
and to which both alice and bob three

603
00:25:33,279 --> 00:25:35,520
can write

604
00:25:35,520 --> 00:25:38,640
now if simulator does not learn who is

605
00:25:38,640 --> 00:25:39,919
the writer

606
00:25:39,919 --> 00:25:40,960
so

607
00:25:40,960 --> 00:25:43,039
this is actually capturing this after

608
00:25:43,039 --> 00:25:45,679
accurate guarantee because both three

609
00:25:45,679 --> 00:25:49,440
can very well simulate or can write

610
00:25:49,440 --> 00:25:52,720
just like alice would

611
00:25:53,120 --> 00:25:55,440
here we are not making a statement about

612
00:25:55,440 --> 00:25:57,279
bobon and bob 2

613
00:25:57,279 --> 00:25:58,240
so

614
00:25:58,240 --> 00:26:02,559
these parties simply don't do anything

615
00:26:02,799 --> 00:26:05,200
so now of course the set of writers to

616
00:26:05,200 --> 00:26:08,720
this repository is alice and bob3

617
00:26:08,720 --> 00:26:12,720
the set of readers is only if

618
00:26:13,919 --> 00:26:16,320
now let's consider the real world

619
00:26:16,320 --> 00:26:19,039
capturing of the record

620
00:26:19,039 --> 00:26:21,200
there is an issue here which is well

621
00:26:21,200 --> 00:26:23,919
bob3 is dishonest so it does not have a

622
00:26:23,919 --> 00:26:27,039
converter attached

623
00:26:27,679 --> 00:26:30,080
well but in this case we can actually

624
00:26:30,080 --> 00:26:34,240
make a statement about what bob3 can do

625
00:26:34,240 --> 00:26:38,720
for instance bob3 can run a protocol pi

626
00:26:38,720 --> 00:26:43,039
that simulates ali's writing

627
00:26:43,600 --> 00:26:46,320
okay let's see how this looks so

628
00:26:46,320 --> 00:26:48,559
essentially we again we have these

629
00:26:48,559 --> 00:26:50,480
assumed specifications the kg and

630
00:26:50,480 --> 00:26:53,120
insecure channel and alice

631
00:26:53,120 --> 00:26:56,799
being honest transfer send converter

632
00:26:56,799 --> 00:26:58,720
pop3 now

633
00:26:58,720 --> 00:26:59,760
can

634
00:26:59,760 --> 00:27:02,799
execute or can run this protocol pi

635
00:27:02,799 --> 00:27:04,480
which it can use to write into this

636
00:27:04,480 --> 00:27:07,039
insecure channel

637
00:27:07,039 --> 00:27:10,480
finally if being dishonest

638
00:27:10,480 --> 00:27:13,360
can only interact with this insecure

639
00:27:13,360 --> 00:27:15,120
channel and

640
00:27:15,120 --> 00:27:18,720
can also get the secret key of bob 3

641
00:27:18,720 --> 00:27:20,880
note here that both three is dishonest

642
00:27:20,880 --> 00:27:21,679
so

643
00:27:21,679 --> 00:27:23,840
the secret key of all three can actually

644
00:27:23,840 --> 00:27:25,840
leak to weave

645
00:27:25,840 --> 00:27:28,240
finally and again we do not make a

646
00:27:28,240 --> 00:27:31,279
statement about the honest receivers one

647
00:27:31,279 --> 00:27:33,840
and bob two so we simply attach a

648
00:27:33,840 --> 00:27:37,760
converter bottom to these parties

649
00:27:38,640 --> 00:27:41,520
so the specification catching that these

650
00:27:41,520 --> 00:27:44,480
honest receivers can write is this x hat

651
00:27:44,480 --> 00:27:47,360
as we saw before

652
00:27:47,360 --> 00:27:50,320
but now what we want is to consider only

653
00:27:50,320 --> 00:27:52,159
real-world systems

654
00:27:52,159 --> 00:27:54,320
that give the guarantee that dishonest

655
00:27:54,320 --> 00:27:57,439
receivers can write

656
00:27:57,760 --> 00:28:02,080
this is defined by a specification

657
00:28:02,080 --> 00:28:03,600
x pi

658
00:28:03,600 --> 00:28:06,640
which is defined as the set of systems

659
00:28:06,640 --> 00:28:07,919
such that

660
00:28:07,919 --> 00:28:10,880
if you would attach this protocol pi to

661
00:28:10,880 --> 00:28:13,600
the dishonest receivers

662
00:28:13,600 --> 00:28:16,799
and you'd cover up the

663
00:28:16,799 --> 00:28:18,799
and you would cover up the interfaces of

664
00:28:18,799 --> 00:28:20,880
the honest receivers so we are not

665
00:28:20,880 --> 00:28:23,039
making a statement about them

666
00:28:23,039 --> 00:28:25,200
and you would attach this resulting

667
00:28:25,200 --> 00:28:27,279
protocol into this

668
00:28:27,279 --> 00:28:28,640
system r

669
00:28:28,640 --> 00:28:31,200
you would end up with a system which is

670
00:28:31,200 --> 00:28:32,880
in the specification above in the

671
00:28:32,880 --> 00:28:36,399
specification x hat where by definition

672
00:28:36,399 --> 00:28:39,679
if does not learn who the sender is

673
00:28:39,679 --> 00:28:41,760
among alice or

674
00:28:41,760 --> 00:28:45,720
the dishonest receivers

675
00:28:47,840 --> 00:28:49,279
so

676
00:28:49,279 --> 00:28:51,760
we have defined a specification catching

677
00:28:51,760 --> 00:28:54,559
authenticity and correctness a and we

678
00:28:54,559 --> 00:28:57,039
also have defined the specification

679
00:28:57,039 --> 00:28:59,520
capturing after of the record

680
00:28:59,520 --> 00:29:01,760
this x specification

681
00:29:01,760 --> 00:29:04,399
so now the specification capturing both

682
00:29:04,399 --> 00:29:06,880
authenticity and of the record is the

683
00:29:06,880 --> 00:29:10,799
intersection of these two specifications

684
00:29:10,799 --> 00:29:12,960
the construction statement we make is

685
00:29:12,960 --> 00:29:14,000
that

686
00:29:14,000 --> 00:29:17,120
the real world specification is a subset

687
00:29:17,120 --> 00:29:20,399
of the intersection of the specification

688
00:29:20,399 --> 00:29:23,440
a and the specification x capturing of

689
00:29:23,440 --> 00:29:26,600
the record

690
00:29:28,799 --> 00:29:30,000
finally

691
00:29:30,000 --> 00:29:32,240
let's consider a case where alice is

692
00:29:32,240 --> 00:29:34,240
dishonest so

693
00:29:34,240 --> 00:29:36,880
in the real world if alice is dishonest

694
00:29:36,880 --> 00:29:41,679
it will no longer run a converter sent

695
00:29:41,679 --> 00:29:44,640
but actually furthermore

696
00:29:44,640 --> 00:29:48,320
now everyone every honest party also

697
00:29:48,320 --> 00:29:53,200
gets to learn alice's secret key ska

698
00:29:53,200 --> 00:29:55,360
this means in particular

699
00:29:55,360 --> 00:29:58,240
that both three now receives

700
00:29:58,240 --> 00:30:00,480
his own secret key and alice's secret

701
00:30:00,480 --> 00:30:01,440
key

702
00:30:01,440 --> 00:30:03,679
eve also receives both three secret key

703
00:30:03,679 --> 00:30:05,360
and ali's secret key

704
00:30:05,360 --> 00:30:07,919
and finally alice in addition to her own

705
00:30:07,919 --> 00:30:10,640
secret key also receives pop3's secret

706
00:30:10,640 --> 00:30:12,880
key

707
00:30:13,840 --> 00:30:17,600
why do we want to capture consistency

708
00:30:17,600 --> 00:30:21,240
consider the following

709
00:30:22,240 --> 00:30:23,840
so

710
00:30:23,840 --> 00:30:26,640
if we do not want to

711
00:30:26,640 --> 00:30:29,039
guarantee consistency

712
00:30:29,039 --> 00:30:33,840
then if then alice could simply

713
00:30:33,840 --> 00:30:34,720
run

714
00:30:34,720 --> 00:30:36,480
could simply

715
00:30:36,480 --> 00:30:38,960
use designated verifier signatures to

716
00:30:38,960 --> 00:30:41,120
which of the receivers to which it wants

717
00:30:41,120 --> 00:30:44,000
to send a message

718
00:30:45,039 --> 00:30:45,840
so

719
00:30:45,840 --> 00:30:47,679
having multi-designated verifier

720
00:30:47,679 --> 00:30:49,679
signatures only makes sense

721
00:30:49,679 --> 00:30:50,480
if

722
00:30:50,480 --> 00:30:51,520
alice

723
00:30:51,520 --> 00:30:54,480
or if the honest receivers are given the

724
00:30:54,480 --> 00:30:57,919
guarantee of consistency

725
00:30:58,080 --> 00:31:00,320
and this guarantee just says that

726
00:31:00,320 --> 00:31:03,200
if an honest receiver gets a message m

727
00:31:03,200 --> 00:31:07,919
then all honest receivers also get m

728
00:31:07,919 --> 00:31:09,519
let's see how this

729
00:31:09,519 --> 00:31:12,320
guarantee is captured

730
00:31:12,320 --> 00:31:13,200
again

731
00:31:13,200 --> 00:31:16,480
we have a repository

732
00:31:16,480 --> 00:31:18,559
and now we also have a simulator

733
00:31:18,559 --> 00:31:20,720
attached to this repository and the

734
00:31:20,720 --> 00:31:23,200
simulator is attached to alice's

735
00:31:23,200 --> 00:31:25,760
interface use interface in bob3's

736
00:31:25,760 --> 00:31:28,399
interface

737
00:31:28,720 --> 00:31:32,159
bob1 and bot2 the honest receivers can

738
00:31:32,159 --> 00:31:34,640
read from this repository

739
00:31:34,640 --> 00:31:38,159
and alice even bob3 interact all with

740
00:31:38,159 --> 00:31:40,559
the simulator

741
00:31:40,559 --> 00:31:43,760
here notice that the simulator can both

742
00:31:43,760 --> 00:31:48,480
read and write to this repository

743
00:31:49,919 --> 00:31:52,799
so the set of parties who can write into

744
00:31:52,799 --> 00:31:55,279
this repository is now all dishonest

745
00:31:55,279 --> 00:31:57,440
parties so alice if and the set of

746
00:31:57,440 --> 00:32:00,640
dishonest receivers

747
00:32:00,640 --> 00:32:02,880
on the other hand the set of parties who

748
00:32:02,880 --> 00:32:06,240
read from this

749
00:32:06,240 --> 00:32:09,200
who read from this repository

750
00:32:09,200 --> 00:32:11,679
are everyone so it is the set of

751
00:32:11,679 --> 00:32:12,960
receivers

752
00:32:12,960 --> 00:32:16,320
alice and eve

753
00:32:18,399 --> 00:32:20,000
so this

754
00:32:20,000 --> 00:32:23,200
concludes the capture of the basic

755
00:32:23,200 --> 00:32:25,760
guarantees that one would expect from

756
00:32:25,760 --> 00:32:29,840
multi-designated verifier signatures

757
00:32:30,799 --> 00:32:32,559
other contributions we make in this

758
00:32:32,559 --> 00:32:33,679
paper

759
00:32:33,679 --> 00:32:36,399
are for instance we consider further

760
00:32:36,399 --> 00:32:38,640
settings that

761
00:32:38,640 --> 00:32:41,120
yield stronger composable notions than

762
00:32:41,120 --> 00:32:43,600
the ones we just presented for instance

763
00:32:43,600 --> 00:32:45,200
you consider a setting where there are

764
00:32:45,200 --> 00:32:48,559
multiple centers multiple receivers

765
00:32:48,559 --> 00:32:52,559
and each sender can now choose which

766
00:32:52,559 --> 00:32:55,519
subset of receivers it wants to send a

767
00:32:55,519 --> 00:32:57,279
message each time

768
00:32:57,279 --> 00:32:59,440
so whenever a sender wants to send a

769
00:32:59,440 --> 00:33:02,960
message it now picks some subset of on

770
00:33:02,960 --> 00:33:05,440
off receivers and sends a message to

771
00:33:05,440 --> 00:33:09,039
this subset of receivers

772
00:33:09,360 --> 00:33:11,840
still there is this non-designated

773
00:33:11,840 --> 00:33:16,000
receiver and is a dishonest party if

774
00:33:16,000 --> 00:33:18,159
and so the set of parties now consists

775
00:33:18,159 --> 00:33:19,840
of the set of senders the set of

776
00:33:19,840 --> 00:33:22,480
receivers and eve

777
00:33:22,480 --> 00:33:25,600
finally and as before we consider static

778
00:33:25,600 --> 00:33:28,240
corruptions so the set of

779
00:33:28,240 --> 00:33:32,080
honest parties is fixed

780
00:33:34,399 --> 00:33:36,240
regarding this setting

781
00:33:36,240 --> 00:33:37,440
we give

782
00:33:37,440 --> 00:33:39,360
notions which are stronger than the ones

783
00:33:39,360 --> 00:33:41,519
we we just presented for the fixed

784
00:33:41,519 --> 00:33:43,840
center and set of receivers

785
00:33:43,840 --> 00:33:45,039
and

786
00:33:45,039 --> 00:33:46,640
we note that

787
00:33:46,640 --> 00:33:48,799
or we find that only the notions

788
00:33:48,799 --> 00:33:51,039
recently introduced by dumb guard they

789
00:33:51,039 --> 00:33:53,600
all actually captured the security of

790
00:33:53,600 --> 00:33:58,480
mdvs in this arbitrary party setting

791
00:33:58,480 --> 00:34:01,679
still our notions are strictly weaker

792
00:34:01,679 --> 00:34:06,360
than gamma damgard et als

793
00:34:07,039 --> 00:34:09,199
this is all for this presentation thank

794
00:34:09,199 --> 00:34:12,598
you for listening

