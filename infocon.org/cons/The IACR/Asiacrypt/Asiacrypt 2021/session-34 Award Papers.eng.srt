1
00:00:00,719 --> 00:00:02,320
live on youtube

2
00:00:02,320 --> 00:00:06,080
all right thank you very much um so um

3
00:00:06,080 --> 00:00:08,000
welcome everyone to the

4
00:00:08,000 --> 00:00:10,880
uh award session uh for this conference

5
00:00:10,880 --> 00:00:11,599
so

6
00:00:11,599 --> 00:00:13,920
what happened is that basically so the

7
00:00:13,920 --> 00:00:16,480
program committee selected

8
00:00:16,480 --> 00:00:17,840
among the

9
00:00:17,840 --> 00:00:19,760
accepted papers

10
00:00:19,760 --> 00:00:21,840
top three

11
00:00:21,840 --> 00:00:23,359
rated papers

12
00:00:23,359 --> 00:00:25,279
for

13
00:00:25,279 --> 00:00:27,439
invitation to the journal of cryptology

14
00:00:27,439 --> 00:00:31,039
so the best paper award the student the

15
00:00:31,039 --> 00:00:33,360
best student paper award

16
00:00:33,360 --> 00:00:37,440
authored by a single student and

17
00:00:37,760 --> 00:00:39,680
then another paper

18
00:00:39,680 --> 00:00:41,040
runner-up for

19
00:00:41,040 --> 00:00:42,719
invitation to

20
00:00:42,719 --> 00:00:45,760
joc um and so

21
00:00:45,760 --> 00:00:49,200
these papers um as a white paper are um

22
00:00:49,200 --> 00:00:50,960
given the benefit of a pres longer

23
00:00:50,960 --> 00:00:52,160
presentation

24
00:00:52,160 --> 00:00:55,120
um as a plenary session even even though

25
00:00:55,120 --> 00:00:56,320
the

26
00:00:56,320 --> 00:00:57,920
rest of the paper will be presented in

27
00:00:57,920 --> 00:01:00,079
parallel sessions

28
00:01:00,079 --> 00:01:02,719
um so we would like to start by

29
00:01:02,719 --> 00:01:04,959
introducing the best paper award

30
00:01:04,959 --> 00:01:06,000
um

31
00:01:06,000 --> 00:01:08,640
so the program committee of asia crypts

32
00:01:08,640 --> 00:01:11,520
2021 is glad to present the best paper

33
00:01:11,520 --> 00:01:14,159
award of the conference to alice pele

34
00:01:14,159 --> 00:01:16,479
marie and damian stelle for their

35
00:01:16,479 --> 00:01:18,479
contribution titled

36
00:01:18,479 --> 00:01:22,000
on the hardness of the and true problem

37
00:01:22,000 --> 00:01:23,759
so

38
00:01:23,759 --> 00:01:26,479
we welcome alice

39
00:01:26,479 --> 00:01:29,040
for the presentation and i will stop

40
00:01:29,040 --> 00:01:31,680
sharing for now

41
00:01:31,680 --> 00:01:33,439
thank you very much

42
00:01:33,439 --> 00:01:34,720
can i

43
00:01:34,720 --> 00:01:37,600
start sharing

44
00:01:39,439 --> 00:01:43,280
i hope this is okay for everyone

45
00:01:43,280 --> 00:01:45,520
yes we can hear you now and you can hear

46
00:01:45,520 --> 00:01:48,159
me and okay everything is good

47
00:01:48,159 --> 00:01:49,360
um

48
00:01:49,360 --> 00:01:51,360
so thank you very much and welcome

49
00:01:51,360 --> 00:01:54,880
everyone um so i'm going to present a

50
00:01:54,880 --> 00:01:56,640
joint work with damian steele from

51
00:01:56,640 --> 00:01:58,000
ernest liu

52
00:01:58,000 --> 00:02:00,799
on the harness of the anthro algorithmic

53
00:02:00,799 --> 00:02:01,920
problem

54
00:02:01,920 --> 00:02:04,399
so i'm planning to have this stock

55
00:02:04,399 --> 00:02:06,840
quite high level so that everybody can

56
00:02:06,840 --> 00:02:09,520
understand and if you are very familiar

57
00:02:09,520 --> 00:02:11,360
with ladies based crypto and want to

58
00:02:11,360 --> 00:02:13,599
have more details there is more details

59
00:02:13,599 --> 00:02:15,840
in the recorded talk on youtube

60
00:02:15,840 --> 00:02:18,160
so this talk is hopefully understandable

61
00:02:18,160 --> 00:02:19,040
by

62
00:02:19,040 --> 00:02:20,720
everyone

63
00:02:20,720 --> 00:02:23,680
and so let me start with context of n

64
00:02:23,680 --> 00:02:25,200
true because i guess

65
00:02:25,200 --> 00:02:27,920
uh not everyone is familiar with andrew

66
00:02:27,920 --> 00:02:29,760
maybe not everyone heard about ten

67
00:02:29,760 --> 00:02:31,360
through before

68
00:02:31,360 --> 00:02:34,480
so and true is an algorithmic problem

69
00:02:34,480 --> 00:02:37,040
that is based on lattices

70
00:02:37,040 --> 00:02:39,599
and that is believed to be hard to solve

71
00:02:39,599 --> 00:02:41,840
even if you have a quantum computer so

72
00:02:41,840 --> 00:02:43,680
you can use it to build post quantum

73
00:02:43,680 --> 00:02:45,360
cryptography

74
00:02:45,360 --> 00:02:48,080
and it's one of the characteristics of

75
00:02:48,080 --> 00:02:50,080
entry is also that it's quite efficient

76
00:02:50,080 --> 00:02:52,239
because it uses lattices with structure

77
00:02:52,239 --> 00:02:53,760
so it's usually more efficient than

78
00:02:53,760 --> 00:02:55,760
non-structured lattices

79
00:02:55,760 --> 00:02:58,239
it's been used a lot already

80
00:02:58,239 --> 00:03:01,680
so as an example i'm citing here three

81
00:03:01,680 --> 00:03:03,920
submissions to the nist both quantum

82
00:03:03,920 --> 00:03:05,599
standardization process that are based

83
00:03:05,599 --> 00:03:07,599
on and true and that made it to the

84
00:03:07,599 --> 00:03:09,519
third round

85
00:03:09,519 --> 00:03:11,840
so it's a big proportion of this cell

86
00:03:11,840 --> 00:03:14,720
drone submission based on and true

87
00:03:14,720 --> 00:03:16,159
and

88
00:03:16,159 --> 00:03:17,519
it's also

89
00:03:17,519 --> 00:03:21,440
more than no not more it's 25 years old

90
00:03:21,440 --> 00:03:24,000
so it's actually one of the oldest uh

91
00:03:24,000 --> 00:03:25,840
algorithmic problem based on lattices

92
00:03:25,840 --> 00:03:27,680
that was used for cryptography so it's

93
00:03:27,680 --> 00:03:31,120
quite old for latest base crypto

94
00:03:31,120 --> 00:03:34,400
so that's uh the context of the and true

95
00:03:34,400 --> 00:03:36,560
algorithmic problem

96
00:03:36,560 --> 00:03:37,519
and

97
00:03:37,519 --> 00:03:42,000
um before going any further i wanted to

98
00:03:42,000 --> 00:03:44,159
discuss a bit uh and

99
00:03:44,159 --> 00:03:46,720
compare it a bit with ring lwe ring

100
00:03:46,720 --> 00:03:48,959
learning with error because

101
00:03:48,959 --> 00:03:50,799
maybe even if you have never heard of

102
00:03:50,799 --> 00:03:52,720
intro maybe you have heard of ring

103
00:03:52,720 --> 00:03:55,280
learning with errors it's more famous

104
00:03:55,280 --> 00:03:57,519
one i would say and it shared a lot of

105
00:03:57,519 --> 00:04:00,959
similarities with andrew so i've changed

106
00:04:00,959 --> 00:04:03,120
the slide but almost nothing changed on

107
00:04:03,120 --> 00:04:04,400
the slide

108
00:04:04,400 --> 00:04:05,439
um

109
00:04:05,439 --> 00:04:07,599
so ring learning with error and module

110
00:04:07,599 --> 00:04:10,159
learning with the rs there are both

111
00:04:10,159 --> 00:04:12,879
algorithmic problem based on mathis also

112
00:04:12,879 --> 00:04:15,360
that are supposed to be post quantum and

113
00:04:15,360 --> 00:04:17,279
that use

114
00:04:17,279 --> 00:04:19,040
structure lattices so they are quite

115
00:04:19,040 --> 00:04:20,399
efficient

116
00:04:20,399 --> 00:04:22,320
um

117
00:04:22,320 --> 00:04:24,000
same as and truth have been used to

118
00:04:24,000 --> 00:04:26,160
construct a lot of things and in

119
00:04:26,160 --> 00:04:28,080
particular three of the submission to

120
00:04:28,080 --> 00:04:30,400
the list in the third round are based on

121
00:04:30,400 --> 00:04:32,800
module learning with error so module

122
00:04:32,800 --> 00:04:34,880
learning wizard is just a generalization

123
00:04:34,880 --> 00:04:37,600
of ring learning reserve

124
00:04:37,600 --> 00:04:40,000
and so this problem compared to entries

125
00:04:40,000 --> 00:04:42,560
a bit more recent so it's only a bit

126
00:04:42,560 --> 00:04:45,759
more than 10 years old

127
00:04:46,080 --> 00:04:48,719
so that's

128
00:04:48,960 --> 00:04:49,759
two

129
00:04:49,759 --> 00:04:51,919
of the most famous

130
00:04:51,919 --> 00:04:54,160
algorithmic problem based on lattices on

131
00:04:54,160 --> 00:04:56,080
structural lattices that are used in

132
00:04:56,080 --> 00:04:57,759
crypto

133
00:04:57,759 --> 00:04:58,560
and

134
00:04:58,560 --> 00:05:01,120
uh if we try to compare if you want to

135
00:05:01,120 --> 00:05:03,600
construct cryptographic primitive and

136
00:05:03,600 --> 00:05:06,880
want to decide which one you use

137
00:05:06,880 --> 00:05:09,680
so the time you will use the one it's

138
00:05:09,680 --> 00:05:11,440
compatible i mean the

139
00:05:11,440 --> 00:05:12,960
way of writing the problems are

140
00:05:12,960 --> 00:05:14,639
different and maybe one is more suited

141
00:05:14,639 --> 00:05:17,280
for some applications than another one

142
00:05:17,280 --> 00:05:19,440
but you may also have

143
00:05:19,440 --> 00:05:22,320
other i mean maybe both can be used and

144
00:05:22,320 --> 00:05:24,800
you want to know which one is best

145
00:05:24,800 --> 00:05:26,560
so

146
00:05:26,560 --> 00:05:28,639
they are both efficient they are both

147
00:05:28,639 --> 00:05:30,320
using structural lattices and quite

148
00:05:30,320 --> 00:05:32,320
efficient they are both

149
00:05:32,320 --> 00:05:34,560
quite versatile so they have been used

150
00:05:34,560 --> 00:05:37,039
for many many constructions

151
00:05:37,039 --> 00:05:39,919
so i cited like submissions to the nist

152
00:05:39,919 --> 00:05:41,440
standardization process so that's

153
00:05:41,440 --> 00:05:43,120
encryption and signature but you can

154
00:05:43,120 --> 00:05:45,680
also do fully automatic encryption uh

155
00:05:45,680 --> 00:05:47,840
the first candidate in disguisability of

156
00:05:47,840 --> 00:05:50,960
skaters they used problem similars to uh

157
00:05:50,960 --> 00:05:53,600
and through and ringling with error so

158
00:05:53,600 --> 00:05:57,120
it's been used for many different things

159
00:05:57,120 --> 00:05:59,840
uh one of the advantage of entry is that

160
00:05:59,840 --> 00:06:02,560
it's older than wrangled we

161
00:06:02,560 --> 00:06:05,280
so it's been around for more time and

162
00:06:05,280 --> 00:06:07,280
maybe you feel more confident because

163
00:06:07,280 --> 00:06:09,680
people have studied it for 25 years

164
00:06:09,680 --> 00:06:11,280
instead of

165
00:06:11,280 --> 00:06:16,160
10 12 years so it might feel safer

166
00:06:16,160 --> 00:06:17,680
but there is also one advantage of

167
00:06:17,680 --> 00:06:20,960
bringing away which is that we have some

168
00:06:20,960 --> 00:06:22,240
kind of

169
00:06:22,240 --> 00:06:25,360
security theoretical security guarantees

170
00:06:25,360 --> 00:06:28,560
that come in the form of predictions

171
00:06:28,560 --> 00:06:30,319
so what is a reduction that's going to

172
00:06:30,319 --> 00:06:32,160
be the topic of this talk

173
00:06:32,160 --> 00:06:34,880
so in this picture i i am plotting

174
00:06:34,880 --> 00:06:36,240
reductions

175
00:06:36,240 --> 00:06:37,120
um

176
00:06:37,120 --> 00:06:39,680
so the reduction are the arrows

177
00:06:39,680 --> 00:06:41,440
it's between problem and it says

178
00:06:41,440 --> 00:06:43,120
essentially if there is an error here

179
00:06:43,120 --> 00:06:45,039
between from decision and through to

180
00:06:45,039 --> 00:06:47,120
search and through it says that if you

181
00:06:47,120 --> 00:06:49,039
can solve search entry in polynomial

182
00:06:49,039 --> 00:06:51,120
time then you can solve decision and

183
00:06:51,120 --> 00:06:53,599
through also in polynomial time so it's

184
00:06:53,599 --> 00:06:54,960
um

185
00:06:54,960 --> 00:06:58,080
it can be used to give a lower bound on

186
00:06:58,080 --> 00:06:59,520
the hardness of a problem because you

187
00:06:59,520 --> 00:07:01,360
can prove that if you can solve your

188
00:07:01,360 --> 00:07:02,880
problems then you can solve also some

189
00:07:02,880 --> 00:07:04,400
other problems that are believed to be

190
00:07:04,400 --> 00:07:06,960
hard so it kind of gives you confidence

191
00:07:06,960 --> 00:07:10,000
that your problem is indeed hard

192
00:07:10,000 --> 00:07:12,479
so if we look at this picture the first

193
00:07:12,479 --> 00:07:13,680
line

194
00:07:13,680 --> 00:07:16,560
is related to ring lwe and so you can

195
00:07:16,560 --> 00:07:18,960
see that for ring lwe we know a lot of

196
00:07:18,960 --> 00:07:22,080
things in them some predictions so

197
00:07:22,080 --> 00:07:23,520
um

198
00:07:23,520 --> 00:07:25,440
i'm going to define for decision and

199
00:07:25,440 --> 00:07:27,440
true and search entry in a few slides

200
00:07:27,440 --> 00:07:31,520
but in wrinkle we also have as usual

201
00:07:31,520 --> 00:07:33,280
decision variant and third variant of

202
00:07:33,280 --> 00:07:34,479
the problem

203
00:07:34,479 --> 00:07:36,720
and in the case of ring lw we know that

204
00:07:36,720 --> 00:07:38,479
there are both equivalent so if you can

205
00:07:38,479 --> 00:07:41,680
solve one you can solve the other one

206
00:07:41,680 --> 00:07:43,919
and we also know that

207
00:07:43,919 --> 00:07:46,080
they are both equivalent to some worst

208
00:07:46,080 --> 00:07:48,560
case problem on module lattices so

209
00:07:48,560 --> 00:07:50,639
modular lattices are just lattice with

210
00:07:50,639 --> 00:07:52,479
some extra structure

211
00:07:52,479 --> 00:07:54,639
and the worst case problem here is just

212
00:07:54,639 --> 00:07:56,560
find somehow sharp vectors in these

213
00:07:56,560 --> 00:08:00,000
lattices so in the case of ring learning

214
00:08:00,000 --> 00:08:02,400
wizard we know that all these are

215
00:08:02,400 --> 00:08:04,160
essentially the same level of difficulty

216
00:08:04,160 --> 00:08:05,759
if you can solve one you can solve the

217
00:08:05,759 --> 00:08:07,599
other one

218
00:08:07,599 --> 00:08:09,680
and so that's nice because if you want

219
00:08:09,680 --> 00:08:11,199
to do crypto you are going to use a

220
00:08:11,199 --> 00:08:13,520
decision variant of ring lwe

221
00:08:13,520 --> 00:08:15,599
but you know that if someone is able to

222
00:08:15,599 --> 00:08:17,360
break this problem in polynomial time

223
00:08:17,360 --> 00:08:19,599
then they will also be able to break

224
00:08:19,599 --> 00:08:22,639
some a bunch of problems on module

225
00:08:22,639 --> 00:08:24,639
lattices that are believed to be hard

226
00:08:24,639 --> 00:08:26,560
and that has been studied independently

227
00:08:26,560 --> 00:08:28,960
and regularly

228
00:08:28,960 --> 00:08:32,479
so now if you look at the and true state

229
00:08:32,479 --> 00:08:34,399
we know much less

230
00:08:34,399 --> 00:08:37,200
so the only reduction we know among

231
00:08:37,200 --> 00:08:38,719
and true problems is that if you can

232
00:08:38,719 --> 00:08:40,880
solve the search variant you can solve

233
00:08:40,880 --> 00:08:43,039
the decision variant so this is not very

234
00:08:43,039 --> 00:08:44,320
surprising

235
00:08:44,320 --> 00:08:46,240
just at a high level the search variant

236
00:08:46,240 --> 00:08:48,320
it asks to find some secret information

237
00:08:48,320 --> 00:08:50,480
related to and true and the decision

238
00:08:50,480 --> 00:08:52,160
variant it has to distinguish if

239
00:08:52,160 --> 00:08:53,760
something is in true or uniform so if

240
00:08:53,760 --> 00:08:55,440
you can recover some secret information

241
00:08:55,440 --> 00:08:58,720
usually you can distinguish so that's uh

242
00:08:58,720 --> 00:09:00,880
almost immediate reduction

243
00:09:00,880 --> 00:09:02,959
and we also have a reduction that shows

244
00:09:02,959 --> 00:09:05,680
that decision and true is no harder than

245
00:09:05,680 --> 00:09:08,320
decision ring labeling

246
00:09:08,320 --> 00:09:09,839
so it's not

247
00:09:09,839 --> 00:09:12,000
helpful in having lower bounds it's an

248
00:09:12,000 --> 00:09:13,519
upper bound on the hardness of centroid

249
00:09:13,519 --> 00:09:15,360
so it cannot be harder that ring a

250
00:09:15,360 --> 00:09:17,920
little ue but it doesn't say anything on

251
00:09:17,920 --> 00:09:21,440
the lower bound harness of entry

252
00:09:21,440 --> 00:09:24,160
so that was um

253
00:09:24,160 --> 00:09:27,360
the the topic of our article and what we

254
00:09:27,360 --> 00:09:30,560
did is we proved a bunch of prediction

255
00:09:30,560 --> 00:09:33,760
for the entry algorithmic problem

256
00:09:33,760 --> 00:09:36,160
so it's not as perfect as in the ring

257
00:09:36,160 --> 00:09:39,440
wks yet but there are more

258
00:09:39,440 --> 00:09:41,760
we have more knowledge about how

259
00:09:41,760 --> 00:09:43,680
decision and true relates to search and

260
00:09:43,680 --> 00:09:46,000
through and relates to some worst case

261
00:09:46,000 --> 00:09:48,480
problem on structural lattices

262
00:09:48,480 --> 00:09:51,040
so we had to introduce two search

263
00:09:51,040 --> 00:09:52,399
variants so we splitted the third

264
00:09:52,399 --> 00:09:54,399
variant of entry to two different

265
00:09:54,399 --> 00:09:55,440
variants

266
00:09:55,440 --> 00:09:57,839
which do not seem to be equivalent that

267
00:09:57,839 --> 00:09:59,360
is we don't know how to prove it for the

268
00:09:59,360 --> 00:10:00,640
moment

269
00:10:00,640 --> 00:10:02,800
but what we can prove is that there is

270
00:10:02,800 --> 00:10:04,240
one of the search variant which is

271
00:10:04,240 --> 00:10:06,399
equivalent to the decision variant of

272
00:10:06,399 --> 00:10:09,440
and true so this gives some lower bound

273
00:10:09,440 --> 00:10:11,839
security guarantee for the decision

274
00:10:11,839 --> 00:10:13,440
search ensure that if you can solve it

275
00:10:13,440 --> 00:10:14,959
you can also find some secret

276
00:10:14,959 --> 00:10:17,680
information related to and true

277
00:10:17,680 --> 00:10:19,519
and we prove that the other surge

278
00:10:19,519 --> 00:10:21,680
variant is at least as hard as some

279
00:10:21,680 --> 00:10:23,279
worst case problem

280
00:10:23,279 --> 00:10:25,200
and not on module lattices but on ideal

281
00:10:25,200 --> 00:10:27,040
lattices which are specific class of

282
00:10:27,040 --> 00:10:28,959
module lattices

283
00:10:28,959 --> 00:10:32,399
so specific structure lattices

284
00:10:32,399 --> 00:10:35,360
and maybe let me just comment on this

285
00:10:35,360 --> 00:10:37,760
weird arrow with a plus it means that if

286
00:10:37,760 --> 00:10:40,000
you can solve both searching through the

287
00:10:40,000 --> 00:10:42,800
first one searching through one and

288
00:10:42,800 --> 00:10:44,800
the worst case problem on ideologies

289
00:10:44,800 --> 00:10:46,880
then you can solve the second variant of

290
00:10:46,880 --> 00:10:49,519
search engine

291
00:10:49,519 --> 00:10:50,399
so

292
00:10:50,399 --> 00:10:53,040
just a small disclaimer here

293
00:10:53,040 --> 00:10:55,680
it's true so for the reductions between

294
00:10:55,680 --> 00:10:57,760
ring and we variants but so all these

295
00:10:57,760 --> 00:10:59,839
reductions they require some specific

296
00:10:59,839 --> 00:11:01,600
range of parameters

297
00:11:01,600 --> 00:11:03,120
and sometimes also some specific

298
00:11:03,120 --> 00:11:05,600
distribution of those instances and so

299
00:11:05,600 --> 00:11:08,000
you may not compose all zeros so if you

300
00:11:08,000 --> 00:11:09,279
want to know if

301
00:11:09,279 --> 00:11:11,200
multiple arrows compose you have to look

302
00:11:11,200 --> 00:11:15,680
at the details uh to know if if you can

303
00:11:15,680 --> 00:11:18,800
yeah if you can compose them

304
00:11:18,800 --> 00:11:21,200
and yeah in particular in all reduction

305
00:11:21,200 --> 00:11:23,600
we use two different distributions for

306
00:11:23,600 --> 00:11:25,760
this reduction from search and through

307
00:11:25,760 --> 00:11:27,680
one to decision intro and from the worst

308
00:11:27,680 --> 00:11:29,360
case problem to

309
00:11:29,360 --> 00:11:32,160
search entry to

310
00:11:32,880 --> 00:11:35,279
so um that's the context and in this

311
00:11:35,279 --> 00:11:37,440
talk i'm going to focus just on this

312
00:11:37,440 --> 00:11:40,079
equivalence if you want to have more

313
00:11:40,079 --> 00:11:41,680
details on the other reductions you can

314
00:11:41,680 --> 00:11:42,800
have a look at

315
00:11:42,800 --> 00:11:45,200
the youtube video

316
00:11:45,200 --> 00:11:48,160
and so let me start by defining

317
00:11:48,160 --> 00:11:49,279
and true

318
00:11:49,279 --> 00:11:51,279
now

319
00:11:51,279 --> 00:11:53,360
so

320
00:11:53,360 --> 00:11:56,079
i'm going to use a bit of notation

321
00:11:56,079 --> 00:11:58,160
depending on whether you're familiar

322
00:11:58,160 --> 00:12:00,160
with number fields or polynomial rings

323
00:12:00,160 --> 00:12:02,399
or not you can choose the column you

324
00:12:02,399 --> 00:12:04,480
like you like so

325
00:12:04,480 --> 00:12:06,800
i'm going to work in a ring r

326
00:12:06,800 --> 00:12:08,959
which is usually so the ring of

327
00:12:08,959 --> 00:12:10,639
polynomials with integer coefficients

328
00:12:10,639 --> 00:12:12,880
might do x to the n plus one

329
00:12:12,880 --> 00:12:15,200
for n the power of two but if you don't

330
00:12:15,200 --> 00:12:17,120
like this string you can just think of r

331
00:12:17,120 --> 00:12:19,120
being the ring of integers and

332
00:12:19,120 --> 00:12:22,800
it doesn't matter for most of the talk

333
00:12:22,800 --> 00:12:25,519
k is going to be the fraction field of r

334
00:12:25,519 --> 00:12:27,200
so polynomials with rational

335
00:12:27,200 --> 00:12:29,920
coefficients are just this the field of

336
00:12:29,920 --> 00:12:31,760
rational numbers

337
00:12:31,760 --> 00:12:34,240
uh q is the same in both cases it's just

338
00:12:34,240 --> 00:12:36,880
an integer other than two and r q is

339
00:12:36,880 --> 00:12:40,560
just a notation for our modulus

340
00:12:40,560 --> 00:12:42,639
and so i need also a notion of size so

341
00:12:42,639 --> 00:12:44,399
what is the size of an element in the

342
00:12:44,399 --> 00:12:46,880
ring r so if you are in the polynomial

343
00:12:46,880 --> 00:12:48,560
case then you just see your polynomial

344
00:12:48,560 --> 00:12:50,320
as a vector of the chord of the

345
00:12:50,320 --> 00:12:52,560
coefficient of the polynomial and then

346
00:12:52,560 --> 00:12:54,480
the size is the euclidean norm of this

347
00:12:54,480 --> 00:12:55,600
vector

348
00:12:55,600 --> 00:12:57,600
and if you are in the case of integers

349
00:12:57,600 --> 00:12:59,600
then the size is just the absolute value

350
00:12:59,600 --> 00:13:02,079
of the integer

351
00:13:02,079 --> 00:13:03,920
and just a small remark that you can

352
00:13:03,920 --> 00:13:06,079
also replace the number field here by

353
00:13:06,079 --> 00:13:08,639
some any other number field you like and

354
00:13:08,639 --> 00:13:10,800
you just need to take the

355
00:13:10,800 --> 00:13:12,399
euclidean norm of the canonical

356
00:13:12,399 --> 00:13:13,920
embedding instead of coefficient

357
00:13:13,920 --> 00:13:16,920
embedding

358
00:13:27,600 --> 00:13:30,639
did we lose audio

359
00:13:31,279 --> 00:13:33,839
alice i believe you've frozen and we've

360
00:13:33,839 --> 00:13:38,920
lost your audio and video

361
00:14:00,000 --> 00:14:03,120
so hopefully she rejoins soon oh she's

362
00:14:03,120 --> 00:14:05,360
there

363
00:14:07,199 --> 00:14:09,120
ellis we do see you're back but i think

364
00:14:09,120 --> 00:14:11,600
your audio takes a minute to kick in so

365
00:14:11,600 --> 00:14:13,040
just keep trying to talk and i'll let

366
00:14:13,040 --> 00:14:16,920
you know when we can hear you

367
00:14:18,720 --> 00:14:21,440
oh i say that very confidently and then

368
00:14:21,440 --> 00:14:25,560
i can't actually hear you yet

369
00:14:34,160 --> 00:14:36,000
uh you may want to try without your

370
00:14:36,000 --> 00:14:38,720
headphones

371
00:14:42,880 --> 00:14:45,440
oh

372
00:14:45,440 --> 00:14:48,560
can you can you hear me now

373
00:14:48,560 --> 00:14:52,920
yes but you're very very quiet

374
00:15:03,199 --> 00:15:05,599
um

375
00:15:05,920 --> 00:15:08,959
like is it bitter

376
00:15:09,440 --> 00:15:13,839
uh kevin says no i say vaguely

377
00:15:14,720 --> 00:15:16,240
thanks everyone for bearing with us

378
00:15:16,240 --> 00:15:18,320
we're apparently having lots of problems

379
00:15:18,320 --> 00:15:20,639
today

380
00:15:23,120 --> 00:15:27,480
best paper doesn't mean best microphone

381
00:15:33,360 --> 00:15:35,519
i think you're trying to test audio we

382
00:15:35,519 --> 00:15:38,639
don't hear you at all

383
00:15:38,800 --> 00:15:39,680
now

384
00:15:39,680 --> 00:15:41,920
just

385
00:15:44,000 --> 00:15:45,279
oh wait

386
00:15:45,279 --> 00:15:47,519
yes

387
00:15:47,839 --> 00:15:51,519
yes you're still quiet though

388
00:15:52,839 --> 00:15:56,320
um maybe now

389
00:15:56,959 --> 00:15:59,600
uh kevin

390
00:15:59,600 --> 00:16:01,759
oh who's also muted but i think he's

391
00:16:01,759 --> 00:16:04,560
shaking his head no only slightly

392
00:16:04,560 --> 00:16:07,560
yeah

393
00:16:08,000 --> 00:16:10,240
yeah maybe i speak very close to the

394
00:16:10,240 --> 00:16:12,720
screen

395
00:16:14,320 --> 00:16:15,040
i

396
00:16:15,040 --> 00:16:16,720
don't know what

397
00:16:16,720 --> 00:16:19,600
ah yes

398
00:16:19,600 --> 00:16:21,199
just here i don't know where that came

399
00:16:21,199 --> 00:16:23,759
through but this one is good

400
00:16:23,759 --> 00:16:24,560
yes

401
00:16:24,560 --> 00:16:25,680
okay

402
00:16:25,680 --> 00:16:29,120
okay sorry yeah for some reason i don't

403
00:16:29,120 --> 00:16:31,199
know

404
00:16:31,279 --> 00:16:33,440
you're actually too loud now

405
00:16:33,440 --> 00:16:36,079
okay

406
00:16:36,079 --> 00:16:38,079
um

407
00:16:38,079 --> 00:16:41,279
is it good like this

408
00:16:41,279 --> 00:16:42,639
yes

409
00:16:42,639 --> 00:16:44,320
yes

410
00:16:44,320 --> 00:16:46,560
okay sorry for that

411
00:16:46,560 --> 00:16:48,320
um

412
00:16:48,320 --> 00:16:49,600
yeah

413
00:16:49,600 --> 00:16:53,759
so i was discussing notations i hope

414
00:16:53,759 --> 00:16:56,160
this is okay for everyone

415
00:16:56,160 --> 00:16:58,560
and so now i'm going to move on to the

416
00:16:58,560 --> 00:17:00,880
definition

417
00:17:00,880 --> 00:17:03,600
so what is n true

418
00:17:03,600 --> 00:17:07,039
if i define it very briefly so it's

419
00:17:07,039 --> 00:17:09,520
an untrue instance is an element in the

420
00:17:09,520 --> 00:17:11,599
ring r mod q

421
00:17:11,599 --> 00:17:13,599
which can be written as

422
00:17:13,599 --> 00:17:14,959
f over g

423
00:17:14,959 --> 00:17:16,880
for

424
00:17:16,880 --> 00:17:18,799
some small f and g

425
00:17:18,799 --> 00:17:19,839
so

426
00:17:19,839 --> 00:17:22,480
here the division is perform modulo q

427
00:17:22,480 --> 00:17:23,359
so

428
00:17:23,359 --> 00:17:26,720
inversion is mod q and f and g small

429
00:17:26,720 --> 00:17:28,559
means that there should be much smaller

430
00:17:28,559 --> 00:17:30,400
than square root q because square root q

431
00:17:30,400 --> 00:17:32,080
is what you would expect if h was

432
00:17:32,080 --> 00:17:34,080
uniformly q so you would expect to be

433
00:17:34,080 --> 00:17:36,080
able to write it as f over g with f and

434
00:17:36,080 --> 00:17:37,919
g of the order of square root q

435
00:17:37,919 --> 00:17:40,400
and here you have some parameter gamma

436
00:17:40,400 --> 00:17:42,080
which is called the gap and the larger

437
00:17:42,080 --> 00:17:44,400
gamma the smaller the number of f and

438
00:17:44,400 --> 00:17:46,799
g's and the smaller the number of h that

439
00:17:46,799 --> 00:17:49,360
are in true instances

440
00:17:49,360 --> 00:17:51,520
and so this small pair of f and g that

441
00:17:51,520 --> 00:17:53,520
can be used to write h as f over d is

442
00:17:53,520 --> 00:17:56,640
called a trapdoor for h

443
00:17:56,640 --> 00:17:58,960
and so just a remark here is that the

444
00:17:58,960 --> 00:18:01,039
trapdoor is not unique usually you have

445
00:18:01,039 --> 00:18:03,760
different ways to write h as f over g

446
00:18:03,760 --> 00:18:06,080
and f prime over g prime with small f g

447
00:18:06,080 --> 00:18:07,679
f prime g prime

448
00:18:07,679 --> 00:18:09,200
but there is something which is unique

449
00:18:09,200 --> 00:18:12,080
which is the one dimensional subspace

450
00:18:12,080 --> 00:18:14,400
span by the vector f g

451
00:18:14,400 --> 00:18:16,720
so if you have two trapdoors then f

452
00:18:16,720 --> 00:18:19,280
prime g prime is just alpha

453
00:18:19,280 --> 00:18:22,400
f and alpha g it's on the same line and

454
00:18:22,400 --> 00:18:24,080
another way to write it is that if i

455
00:18:24,080 --> 00:18:26,559
perform the division over the rationals

456
00:18:26,559 --> 00:18:28,880
so not modular q anymore then this value

457
00:18:28,880 --> 00:18:30,400
is unique and it's what i'm going to

458
00:18:30,400 --> 00:18:33,039
call hk

459
00:18:33,039 --> 00:18:35,200
so that's and for instances so the

460
00:18:35,200 --> 00:18:37,760
decision variant of and true is just

461
00:18:37,760 --> 00:18:40,480
distinguish and give you some element h

462
00:18:40,480 --> 00:18:42,799
and i ask you whether it's uniform or q

463
00:18:42,799 --> 00:18:44,400
or whether it's an entry instance so you

464
00:18:44,400 --> 00:18:45,679
have some distribution available

465
00:18:45,679 --> 00:18:47,200
instances and you have to distinguish

466
00:18:47,200 --> 00:18:49,200
both distributions

467
00:18:49,200 --> 00:18:51,919
so that's a regular definition

468
00:18:51,919 --> 00:18:53,520
for the search variance i'm going to

469
00:18:53,520 --> 00:18:55,679
define only the first one

470
00:18:55,679 --> 00:18:57,440
and this is the following so i give you

471
00:18:57,440 --> 00:18:59,120
an entry instance h

472
00:18:59,120 --> 00:19:01,440
and i ask you to recover the element hk

473
00:19:01,440 --> 00:19:04,799
so the unique element in the field k

474
00:19:04,799 --> 00:19:06,880
that can be written f over g for any

475
00:19:06,880 --> 00:19:10,000
trapdoor f and g

476
00:19:10,000 --> 00:19:12,240
and so maybe you feel this is not very

477
00:19:12,240 --> 00:19:13,919
natural definition of search and true

478
00:19:13,919 --> 00:19:15,600
maybe you would like to define search

479
00:19:15,600 --> 00:19:17,520
engines recovering f and g so that's

480
00:19:17,520 --> 00:19:19,200
actually the second search variant but

481
00:19:19,200 --> 00:19:20,880
in this stock i will only focus on this

482
00:19:20,880 --> 00:19:23,600
one and so sometimes i drop the one

483
00:19:23,600 --> 00:19:25,120
because that's the only one i'm going to

484
00:19:25,120 --> 00:19:28,799
be interested in here

485
00:19:29,440 --> 00:19:30,320
so

486
00:19:30,320 --> 00:19:33,039
that's it for the definition i hope it

487
00:19:33,039 --> 00:19:34,480
was clear

488
00:19:34,480 --> 00:19:36,240
now i want to give you some high level

489
00:19:36,240 --> 00:19:39,200
idea of the of the reduction

490
00:19:39,200 --> 00:19:41,440
so the reduction is i want to prove that

491
00:19:41,440 --> 00:19:43,200
if i can solve decision and truth and i

492
00:19:43,200 --> 00:19:44,960
can also solve the search variant of

493
00:19:44,960 --> 00:19:46,559
entry

494
00:19:46,559 --> 00:19:47,760
so

495
00:19:47,760 --> 00:19:49,600
i want to solve search and true so i'm

496
00:19:49,600 --> 00:19:52,640
given some and through instance h and i

497
00:19:52,640 --> 00:19:56,880
want to recover uh h k which is f over g

498
00:19:56,880 --> 00:19:59,360
in the fraction field k

499
00:19:59,360 --> 00:20:01,600
and i can use an oracle that solve

500
00:20:01,600 --> 00:20:03,760
decision and truth to help me find this

501
00:20:03,760 --> 00:20:05,280
h k so that's the meaning of the

502
00:20:05,280 --> 00:20:07,840
reduction so here i'm going to assume my

503
00:20:07,840 --> 00:20:09,760
oracle is perfect

504
00:20:09,760 --> 00:20:11,919
in the sense that if i give it some

505
00:20:11,919 --> 00:20:14,559
element h in r mod q the oracle is going

506
00:20:14,559 --> 00:20:17,039
to say yes it's n true if and only if

507
00:20:17,039 --> 00:20:19,360
this element h can be written as f over

508
00:20:19,360 --> 00:20:23,679
g with f and g smaller than some bound b

509
00:20:23,679 --> 00:20:25,039
so it's perfect in the sense that

510
00:20:25,039 --> 00:20:26,799
usually you just know that if f and g

511
00:20:26,799 --> 00:20:28,799
are very small it says yes if f and g

512
00:20:28,799 --> 00:20:30,799
are very large it says no and in between

513
00:20:30,799 --> 00:20:32,559
you don't know so here it's perfect like

514
00:20:32,559 --> 00:20:35,600
there is a b and there is a

515
00:20:35,600 --> 00:20:37,520
clear phase shift between smaller than b

516
00:20:37,520 --> 00:20:39,919
and larger than

517
00:20:39,919 --> 00:20:42,320
so what do i do with this oracle

518
00:20:42,320 --> 00:20:44,320
so the idea is quite simple

519
00:20:44,320 --> 00:20:47,600
we just take some elements in the ring x

520
00:20:47,600 --> 00:20:50,240
and y and we create a new instance h

521
00:20:50,240 --> 00:20:53,200
prime which is x h plus y so if i write

522
00:20:53,200 --> 00:20:55,520
it as a fraction it's x f plus y g

523
00:20:55,520 --> 00:20:57,600
divided by g

524
00:20:57,600 --> 00:20:59,760
and i'm going to query my n true

525
00:20:59,760 --> 00:21:02,640
decision oracle on this h prime so now

526
00:21:02,640 --> 00:21:05,280
if xf plus yj is smaller than b

527
00:21:05,280 --> 00:21:07,520
the oracle is going to say yes and if xf

528
00:21:07,520 --> 00:21:09,919
plus yg is larger than b then with high

529
00:21:09,919 --> 00:21:11,360
probabilities your record is going to

530
00:21:11,360 --> 00:21:13,679
say no so by doing that i can learn

531
00:21:13,679 --> 00:21:16,400
whether xf plus yg is small or not

532
00:21:16,400 --> 00:21:17,200
and

533
00:21:17,200 --> 00:21:19,919
this is something i can do for any x and

534
00:21:19,919 --> 00:21:22,880
y i chose and in particular i can

535
00:21:22,880 --> 00:21:24,880
choose x and y so that they only act on

536
00:21:24,880 --> 00:21:27,280
one coordinate of f and g at a time

537
00:21:27,280 --> 00:21:29,280
so i can split the coordinates of f and

538
00:21:29,280 --> 00:21:31,440
g and i can come back to a

539
00:21:31,440 --> 00:21:33,440
one-dimensional problem

540
00:21:33,440 --> 00:21:35,440
so if you were thinking of every single

541
00:21:35,440 --> 00:21:37,200
verse it was already one-dimensional but

542
00:21:37,200 --> 00:21:39,280
otherwise i mean in all cases we can go

543
00:21:39,280 --> 00:21:41,039
back to something one-dimensional which

544
00:21:41,039 --> 00:21:42,640
i can phrase as

545
00:21:42,640 --> 00:21:44,799
i have two secret elements f and g that

546
00:21:44,799 --> 00:21:47,360
are real numbers

547
00:21:47,360 --> 00:21:50,080
i can ask any x and y's that are also

548
00:21:50,080 --> 00:21:52,159
real number and i can learn whether x f

549
00:21:52,159 --> 00:21:54,480
plus y g is larger than b or not and my

550
00:21:54,480 --> 00:21:57,679
objective is to recover f divided by g

551
00:21:57,679 --> 00:21:59,679
and i'm sure if i give you just five

552
00:21:59,679 --> 00:22:01,039
minutes to think about this you will

553
00:22:01,039 --> 00:22:03,360
come up with a nice an algorithm to

554
00:22:03,360 --> 00:22:04,480
solve it

555
00:22:04,480 --> 00:22:06,480
let me just give you

556
00:22:06,480 --> 00:22:10,000
one algorithm one easy one that does it

557
00:22:10,000 --> 00:22:13,600
so i'm going to find a question x 0 f

558
00:22:13,600 --> 00:22:16,640
plus y 0 g is b by just picking some

559
00:22:16,640 --> 00:22:18,799
very small x 0 y 0 so that it's smaller

560
00:22:18,799 --> 00:22:20,960
than b and increasing for instance y 0

561
00:22:20,960 --> 00:22:23,200
until it becomes larger than b

562
00:22:23,200 --> 00:22:25,440
i do that twice i get two equations and

563
00:22:25,440 --> 00:22:29,120
then i can just solve for f over t

564
00:22:29,120 --> 00:22:32,080
so that's if the record is perfect um

565
00:22:32,080 --> 00:22:34,480
i'm going to skip when the record is

566
00:22:34,480 --> 00:22:36,799
imperfect but essentially we just which

567
00:22:36,799 --> 00:22:39,280
is most of the case but we are just

568
00:22:39,280 --> 00:22:41,600
going to use a framework called the

569
00:22:41,600 --> 00:22:43,440
oracle hidden center framework that was

570
00:22:43,440 --> 00:22:45,120
introduced by parker trigger and stephen

571
00:22:45,120 --> 00:22:46,480
davidovitz

572
00:22:46,480 --> 00:22:48,320
in the context of ring learning wizard

573
00:22:48,320 --> 00:22:50,000
so we just need to phrase a problem in

574
00:22:50,000 --> 00:22:52,559
this framework and then we can use

575
00:22:52,559 --> 00:22:54,400
their algorithm

576
00:22:54,400 --> 00:22:57,360
and it's going to to work

577
00:22:57,360 --> 00:22:59,120
so let me skip this

578
00:22:59,120 --> 00:23:02,720
and let me conclude briefly um

579
00:23:02,720 --> 00:23:03,760
so

580
00:23:03,760 --> 00:23:05,039
just

581
00:23:05,039 --> 00:23:06,799
wanted to mention a bunch of other

582
00:23:06,799 --> 00:23:09,600
related works on the harness of and true

583
00:23:09,600 --> 00:23:11,679
so we know in terms of hardness

584
00:23:11,679 --> 00:23:14,559
guarantees that if f and g are large so

585
00:23:14,559 --> 00:23:16,080
it's not the context of this talking

586
00:23:16,080 --> 00:23:17,840
this talk we wanted f and g smaller than

587
00:23:17,840 --> 00:23:19,280
square root q but if you take them

588
00:23:19,280 --> 00:23:21,360
slightly larger than square root q you

589
00:23:21,360 --> 00:23:23,280
can actually prove that f of rg is

590
00:23:23,280 --> 00:23:26,080
statistically close to uniform modulo q

591
00:23:26,080 --> 00:23:28,480
so it's probably decision entry is

592
00:23:28,480 --> 00:23:31,039
probably hard in this context but it you

593
00:23:31,039 --> 00:23:33,039
need f and g quite large larger than

594
00:23:33,039 --> 00:23:35,280
square root q

595
00:23:35,280 --> 00:23:38,640
um in terms of attacks so we

596
00:23:38,640 --> 00:23:41,200
i've told you that um entry is a lattice

597
00:23:41,200 --> 00:23:42,720
problem so you can

598
00:23:42,720 --> 00:23:45,600
break it using lattices uh

599
00:23:45,600 --> 00:23:48,159
algorithm reduction so it's this is an

600
00:23:48,159 --> 00:23:49,679
upper bound on the harness of central

601
00:23:49,679 --> 00:23:52,080
right so if the gap is too large you can

602
00:23:52,080 --> 00:23:55,039
break and through using a

603
00:23:55,039 --> 00:23:57,279
lattice-based reduction

604
00:23:57,279 --> 00:23:59,200
and you can also you also have some

605
00:23:59,200 --> 00:24:01,279
specific attacks that target only and

606
00:24:01,279 --> 00:24:03,279
true and not all lattice-based problem

607
00:24:03,279 --> 00:24:05,919
so in some region of parameters it's

608
00:24:05,919 --> 00:24:08,799
also broken

609
00:24:08,880 --> 00:24:10,320
so

610
00:24:10,320 --> 00:24:13,679
just to to conclude uh this is a recap

611
00:24:13,679 --> 00:24:15,760
of the reduction we proved

612
00:24:15,760 --> 00:24:18,400
and a bunch of open problems related to

613
00:24:18,400 --> 00:24:20,480
to this reduction so the one i already

614
00:24:20,480 --> 00:24:22,000
mentioned is that we are using different

615
00:24:22,000 --> 00:24:23,360
distributions

616
00:24:23,360 --> 00:24:26,000
for the different um

617
00:24:26,000 --> 00:24:27,919
for the different reductions and so it

618
00:24:27,919 --> 00:24:29,919
would be nice to have one distribution

619
00:24:29,919 --> 00:24:31,440
effect for instances that work for all

620
00:24:31,440 --> 00:24:33,360
the reductions

621
00:24:33,360 --> 00:24:35,279
another interesting problem is whether

622
00:24:35,279 --> 00:24:37,360
we can prove harness of search and flow

623
00:24:37,360 --> 00:24:39,760
based on worst case problem on ideal

624
00:24:39,760 --> 00:24:42,240
lattices so this would prove hardness of

625
00:24:42,240 --> 00:24:43,840
decision and true also based on this

626
00:24:43,840 --> 00:24:44,840
worst case

627
00:24:44,840 --> 00:24:47,840
problem and finally also whether we can

628
00:24:47,840 --> 00:24:50,159
maybe we can replace these problems and

629
00:24:50,159 --> 00:24:52,640
ideologies by more general problems and

630
00:24:52,640 --> 00:24:54,400
module lattices for modules are from

631
00:24:54,400 --> 00:24:56,799
clutter then

632
00:24:56,799 --> 00:24:58,640
so that's all for me thank you for your

633
00:24:58,640 --> 00:25:01,440
attention and sorry for the technical

634
00:25:01,440 --> 00:25:04,000
problems

635
00:25:05,120 --> 00:25:07,679
okay um so thank you very much alice for

636
00:25:07,679 --> 00:25:09,200
your presentation

637
00:25:09,200 --> 00:25:12,000
um so do we have any question i can't

638
00:25:12,000 --> 00:25:15,039
see any in the chat

639
00:25:15,039 --> 00:25:16,240
so

640
00:25:16,240 --> 00:25:18,000
like if there are

641
00:25:18,000 --> 00:25:19,760
short questions

642
00:25:19,760 --> 00:25:22,640
in the audience maybe you can

643
00:25:22,640 --> 00:25:25,840
unmute yourself and ask

644
00:25:25,840 --> 00:25:29,840
if you don't type it in zulip

645
00:25:32,000 --> 00:25:34,080
so in principle we are kind of out of

646
00:25:34,080 --> 00:25:35,039
time so

647
00:25:35,039 --> 00:25:35,919
maybe

648
00:25:35,919 --> 00:25:38,900
if there are no questions at all we will

649
00:25:38,900 --> 00:25:40,320
[Music]

650
00:25:40,320 --> 00:25:41,600
let you

651
00:25:41,600 --> 00:25:43,760
take this questions offline

652
00:25:43,760 --> 00:25:46,559
but if there is a very short one we can

653
00:25:46,559 --> 00:25:48,960
maybe

654
00:25:51,679 --> 00:25:56,440
okay so i i can't see any so

655
00:25:56,640 --> 00:25:57,679
so

656
00:25:57,679 --> 00:26:00,080
okay so thank you very much alice uh

657
00:26:00,080 --> 00:26:03,360
we'll move on to the second uh award

658
00:26:03,360 --> 00:26:04,640
paper

659
00:26:04,640 --> 00:26:08,760
let me share my screen again

660
00:26:13,520 --> 00:26:16,080
okay so the the second word paper is the

661
00:26:16,080 --> 00:26:18,159
best student paper award

662
00:26:18,159 --> 00:26:19,919
um so

663
00:26:19,919 --> 00:26:20,640
i

664
00:26:20,640 --> 00:26:21,440
read

665
00:26:21,440 --> 00:26:23,760
the blurb so the program committee of

666
00:26:23,760 --> 00:26:26,400
asia crypt 2021 is glad to present the

667
00:26:26,400 --> 00:26:27,840
best student paper award of the

668
00:26:27,840 --> 00:26:29,760
conference to tim bain

669
00:26:29,760 --> 00:26:32,320
for his contribution titled

670
00:26:32,320 --> 00:26:34,080
geometric approach to linear

671
00:26:34,080 --> 00:26:35,679
cryptanalysis

672
00:26:35,679 --> 00:26:36,799
so

673
00:26:36,799 --> 00:26:40,080
tim the floor is yours

674
00:26:40,080 --> 00:26:42,480
thank you

675
00:26:50,799 --> 00:26:53,279
so thank you um in this presentation i

676
00:26:53,279 --> 00:26:56,080
want to introduce um a different

677
00:26:56,080 --> 00:26:58,400
approach to linear cryptanalysis

678
00:26:58,400 --> 00:27:00,320
so many of you even if you're not

679
00:27:00,320 --> 00:27:02,240
working in symmetric key cryptography

680
00:27:02,240 --> 00:27:05,120
have probably heard about this technique

681
00:27:05,120 --> 00:27:07,039
so linear crypto analysis is really one

682
00:27:07,039 --> 00:27:08,960
of the most important techniques used to

683
00:27:08,960 --> 00:27:11,440
analyze modern block ciphers

684
00:27:11,440 --> 00:27:13,520
cryptographic permutations so

685
00:27:13,520 --> 00:27:16,240
we have a function f here such as a

686
00:27:16,240 --> 00:27:18,480
block cipher with a fixed key

687
00:27:18,480 --> 00:27:19,440
and

688
00:27:19,440 --> 00:27:22,240
what we are interested in is the it's

689
00:27:22,240 --> 00:27:24,320
linear combinations of the inputs

690
00:27:24,320 --> 00:27:26,080
and linear combinations of the output so

691
00:27:26,080 --> 00:27:27,520
a linear combination of the input is

692
00:27:27,520 --> 00:27:29,200
something i can write as

693
00:27:29,200 --> 00:27:31,919
a bit vector u transpose times the input

694
00:27:31,919 --> 00:27:33,679
bit vector x

695
00:27:33,679 --> 00:27:36,000
and we want to know what the probability

696
00:27:36,000 --> 00:27:37,760
is that this linear combination of input

697
00:27:37,760 --> 00:27:38,799
bits

698
00:27:38,799 --> 00:27:40,559
is equal to that linear combination of

699
00:27:40,559 --> 00:27:41,840
output bits

700
00:27:41,840 --> 00:27:43,919
and if this is a cryptographically

701
00:27:43,919 --> 00:27:45,919
strong block cipher then we expect this

702
00:27:45,919 --> 00:27:48,320
probability to be very close to one half

703
00:27:48,320 --> 00:27:50,480
so we can define a measure of quality of

704
00:27:50,480 --> 00:27:53,200
this linear approximation as two times

705
00:27:53,200 --> 00:27:54,720
the distance of this probability from

706
00:27:54,720 --> 00:27:56,000
one half

707
00:27:56,000 --> 00:27:57,120
and one

708
00:27:57,120 --> 00:27:58,480
sort of well-known

709
00:27:58,480 --> 00:28:00,640
effect is that if you have a correlation

710
00:28:00,640 --> 00:28:02,720
c so this is quality measure is called

711
00:28:02,720 --> 00:28:04,000
the correlation

712
00:28:04,000 --> 00:28:06,000
then with one over c squared samples you

713
00:28:06,000 --> 00:28:08,399
can set up a linear distinguisher with a

714
00:28:08,399 --> 00:28:10,159
reasonably good advantage this of course

715
00:28:10,159 --> 00:28:12,159
can be made more precise

716
00:28:12,159 --> 00:28:13,200
and

717
00:28:13,200 --> 00:28:15,360
given the the central importance of of

718
00:28:15,360 --> 00:28:17,039
linear cryptanalysis it's not so

719
00:28:17,039 --> 00:28:19,760
surprising that this basic id has been

720
00:28:19,760 --> 00:28:22,480
generalized has been extended

721
00:28:22,480 --> 00:28:24,799
and i just show a few extensions here on

722
00:28:24,799 --> 00:28:27,200
the on the slide maybe you recognize

723
00:28:27,200 --> 00:28:29,039
some of them but it's not a problem if

724
00:28:29,039 --> 00:28:30,720
you don't

725
00:28:30,720 --> 00:28:32,320
and what i'm interested in in this

726
00:28:32,320 --> 00:28:34,640
presentation is the analysis

727
00:28:34,640 --> 00:28:37,279
of this function and i want to

728
00:28:37,279 --> 00:28:38,399
understand

729
00:28:38,399 --> 00:28:40,640
why a certain approximation has certain

730
00:28:40,640 --> 00:28:41,919
correlation

731
00:28:41,919 --> 00:28:45,520
and also um how to generalize that to

732
00:28:45,520 --> 00:28:47,600
all those variants

733
00:28:47,600 --> 00:28:50,240
so i'm not so interested here in

734
00:28:50,240 --> 00:28:52,559
things like the data complexity or the

735
00:28:52,559 --> 00:28:55,120
advantage of those distinguishers so not

736
00:28:55,120 --> 00:28:56,720
the statistical aspects but the

737
00:28:56,720 --> 00:29:00,480
theoretical analysis of this function

738
00:29:00,480 --> 00:29:04,080
so i want to just give a brief tour of

739
00:29:04,080 --> 00:29:05,679
this new approach which i call a

740
00:29:05,679 --> 00:29:08,080
geometric approach and i'll do that by

741
00:29:08,080 --> 00:29:10,240
going over

742
00:29:10,240 --> 00:29:11,440
three of the

743
00:29:11,440 --> 00:29:14,000
or the three goals that it has and the

744
00:29:14,000 --> 00:29:16,480
first goal i want to discuss

745
00:29:16,480 --> 00:29:18,559
is that it tries to

746
00:29:18,559 --> 00:29:21,360
give a uniform description of all the

747
00:29:21,360 --> 00:29:22,960
different input and output properties

748
00:29:22,960 --> 00:29:24,799
that are used in all those variants that

749
00:29:24,799 --> 00:29:26,640
i of linear groups analysis that i

750
00:29:26,640 --> 00:29:27,600
showed

751
00:29:27,600 --> 00:29:30,240
on the previous slide

752
00:29:30,240 --> 00:29:32,000
but before talking about inputs and

753
00:29:32,000 --> 00:29:33,679
output properties

754
00:29:33,679 --> 00:29:35,840
i want to kind of sketch the setting in

755
00:29:35,840 --> 00:29:36,799
which

756
00:29:36,799 --> 00:29:39,360
this whole tier will take place

757
00:29:39,360 --> 00:29:41,679
and that's a setting of

758
00:29:41,679 --> 00:29:44,159
inner product spaces so we will work in

759
00:29:44,159 --> 00:29:46,799
an inner product space consisting of all

760
00:29:46,799 --> 00:29:47,840
functions

761
00:29:47,840 --> 00:29:49,520
from a set g

762
00:29:49,520 --> 00:29:52,159
to the complex numbers and the set g

763
00:29:52,159 --> 00:29:54,559
actually will be a finite obedient group

764
00:29:54,559 --> 00:29:57,600
in many cases but it's not essential for

765
00:29:57,600 --> 00:30:01,120
most of what i'm going to do today

766
00:30:01,120 --> 00:30:03,200
so this this is a this set of functions

767
00:30:03,200 --> 00:30:05,520
is a vector space you can add functions

768
00:30:05,520 --> 00:30:08,320
you can multiply them by complex numbers

769
00:30:08,320 --> 00:30:09,840
and actually it's just

770
00:30:09,840 --> 00:30:12,399
the stan i mean like

771
00:30:12,399 --> 00:30:15,039
prototypical finite dimensional complex

772
00:30:15,039 --> 00:30:17,520
vector space because you can map such a

773
00:30:17,520 --> 00:30:20,240
function to a list of evaluations of

774
00:30:20,240 --> 00:30:22,480
that function every element

775
00:30:22,480 --> 00:30:24,320
of this set of g

776
00:30:24,320 --> 00:30:25,840
and it's not just a vector space but

777
00:30:25,840 --> 00:30:27,600
it's also an inner product space and so

778
00:30:27,600 --> 00:30:30,240
there is between any two functions you

779
00:30:30,240 --> 00:30:31,840
can define an

780
00:30:31,840 --> 00:30:33,840
inner product you can define it in terms

781
00:30:33,840 --> 00:30:35,679
of its coordinates like that so here the

782
00:30:35,679 --> 00:30:39,360
overline isn't a complex conjugate

783
00:30:39,360 --> 00:30:42,559
and that gives this vector space

784
00:30:42,559 --> 00:30:44,960
a very clear geometry

785
00:30:44,960 --> 00:30:46,000
so

786
00:30:46,000 --> 00:30:48,320
you may remember from high school if you

787
00:30:48,320 --> 00:30:51,120
have two real vectors in the euclidean

788
00:30:51,120 --> 00:30:52,240
plane

789
00:30:52,240 --> 00:30:55,039
then if they make if the shortest angle

790
00:30:55,039 --> 00:30:57,279
smallest angle between them is theta

791
00:30:57,279 --> 00:30:59,600
then the apps that's the same as the

792
00:30:59,600 --> 00:31:01,039
cosine of

793
00:31:01,039 --> 00:31:03,360
cosine of theta is then the absolute

794
00:31:03,360 --> 00:31:05,919
value of the inner product between those

795
00:31:05,919 --> 00:31:07,360
two vectors

796
00:31:07,360 --> 00:31:09,360
and the same thing

797
00:31:09,360 --> 00:31:12,320
you could say holds in higher dimensions

798
00:31:12,320 --> 00:31:14,159
and in the complex case

799
00:31:14,159 --> 00:31:15,919
although this angle is a little bit more

800
00:31:15,919 --> 00:31:18,399
tricky you can still

801
00:31:18,399 --> 00:31:20,480
give that kind of or have that kind of

802
00:31:20,480 --> 00:31:22,559
geometric intuition

803
00:31:22,559 --> 00:31:24,960
and just one thing i want to mention

804
00:31:24,960 --> 00:31:26,880
just to be clear is that if the inner

805
00:31:26,880 --> 00:31:29,200
product between two functions is zero

806
00:31:29,200 --> 00:31:31,440
then i will say that they are orthogonal

807
00:31:31,440 --> 00:31:34,320
so this means you have two perpendicular

808
00:31:34,320 --> 00:31:37,840
vectors here in the figure on the right

809
00:31:38,480 --> 00:31:40,640
so

810
00:31:41,279 --> 00:31:43,600
now i can talk about input and output

811
00:31:43,600 --> 00:31:44,880
properties

812
00:31:44,880 --> 00:31:46,159
and i'll link that to those inner

813
00:31:46,159 --> 00:31:47,679
product spaces

814
00:31:47,679 --> 00:31:48,799
soon

815
00:31:48,799 --> 00:31:50,720
so what is an input property well that

816
00:31:50,720 --> 00:31:53,440
might be for example a set so

817
00:31:53,440 --> 00:31:54,880
typical thing you might do in crypto

818
00:31:54,880 --> 00:31:56,880
analysis is taking values from a certain

819
00:31:56,880 --> 00:31:58,880
set so you have a subset as of the

820
00:31:58,880 --> 00:32:00,559
domain of the cipher

821
00:32:00,559 --> 00:32:02,320
and then an output property could be

822
00:32:02,320 --> 00:32:05,200
something like counting how often the

823
00:32:05,200 --> 00:32:08,559
output is in another set r

824
00:32:08,559 --> 00:32:09,840
and

825
00:32:09,840 --> 00:32:11,840
another way of thinking about this whole

826
00:32:11,840 --> 00:32:14,720
thing is to say instead of taking a set

827
00:32:14,720 --> 00:32:16,880
as the input property i can think of

828
00:32:16,880 --> 00:32:19,600
this set as an indicator function so

829
00:32:19,600 --> 00:32:21,360
that is just a function which is zero

830
00:32:21,360 --> 00:32:23,919
everywhere and one on this set

831
00:32:23,919 --> 00:32:26,000
and this is a real function it's also a

832
00:32:26,000 --> 00:32:27,600
complex function if you want it to be a

833
00:32:27,600 --> 00:32:29,200
complex function

834
00:32:29,200 --> 00:32:30,640
and

835
00:32:30,640 --> 00:32:33,120
then for the output property

836
00:32:33,120 --> 00:32:35,440
we could say yeah that's also an

837
00:32:35,440 --> 00:32:37,760
indicator function of a set but that's

838
00:32:37,760 --> 00:32:39,519
not exactly what we want what we really

839
00:32:39,519 --> 00:32:42,000
want is we want to count how often for a

840
00:32:42,000 --> 00:32:44,080
given indicator function we want to

841
00:32:44,080 --> 00:32:47,120
count how often the elements of that set

842
00:32:47,120 --> 00:32:50,080
indicated by that function are also in r

843
00:32:50,080 --> 00:32:52,080
so we want a function which maps a

844
00:32:52,080 --> 00:32:54,320
function in c g so this is the set of

845
00:32:54,320 --> 00:32:56,640
all those functions from g to c to a

846
00:32:56,640 --> 00:32:58,720
number which is that number of times

847
00:32:58,720 --> 00:32:59,840
it's in r

848
00:32:59,840 --> 00:33:01,600
and this function can be defined by just

849
00:33:01,600 --> 00:33:03,840
taking the average

850
00:33:03,840 --> 00:33:06,080
or i mean just the sum actually over the

851
00:33:06,080 --> 00:33:07,840
set r of the input function so that's

852
00:33:07,840 --> 00:33:09,519
the same as taking the inner product of

853
00:33:09,519 --> 00:33:12,399
the indicator function of r with f so if

854
00:33:12,399 --> 00:33:13,679
we apply that

855
00:33:13,679 --> 00:33:15,760
to the indicator function

856
00:33:15,760 --> 00:33:18,399
of the output set i mean then you indeed

857
00:33:18,399 --> 00:33:20,399
get the size of the intersection of r

858
00:33:20,399 --> 00:33:22,000
and the outputs which is what we want to

859
00:33:22,000 --> 00:33:23,120
know

860
00:33:23,120 --> 00:33:26,000
so in a very general terms and this is

861
00:33:26,000 --> 00:33:26,720
the

862
00:33:26,720 --> 00:33:28,720
starting point for this geometric

863
00:33:28,720 --> 00:33:31,279
approach you could say that the an input

864
00:33:31,279 --> 00:33:33,440
property describes a state

865
00:33:33,440 --> 00:33:34,880
so what is a state it's it's a

866
00:33:34,880 --> 00:33:36,720
collection of values and for each value

867
00:33:36,720 --> 00:33:38,720
you assign a weight and that weight i

868
00:33:38,720 --> 00:33:40,799
will take to be a complex number

869
00:33:40,799 --> 00:33:43,760
and then an output property is a way of

870
00:33:43,760 --> 00:33:45,679
observing the state

871
00:33:45,679 --> 00:33:46,880
and

872
00:33:46,880 --> 00:33:47,679
um

873
00:33:47,679 --> 00:33:48,640
so

874
00:33:48,640 --> 00:33:51,279
that will mean a function from states

875
00:33:51,279 --> 00:33:53,679
so these are functions from g to c to

876
00:33:53,679 --> 00:33:55,760
the complex numbers

877
00:33:55,760 --> 00:33:57,440
and i'm going to require this function

878
00:33:57,440 --> 00:34:00,720
to be a linear function

879
00:34:00,720 --> 00:34:02,320
because that allows us to evaluate it

880
00:34:02,320 --> 00:34:04,640
sample by sample among other things

881
00:34:04,640 --> 00:34:06,320
but i can simplify this a little bit

882
00:34:06,320 --> 00:34:08,560
because for any function

883
00:34:08,560 --> 00:34:10,079
g star

884
00:34:10,079 --> 00:34:11,918
which is so if you are familiar with

885
00:34:11,918 --> 00:34:14,320
which is a function in the dual vector

886
00:34:14,320 --> 00:34:15,440
space

887
00:34:15,440 --> 00:34:18,399
i can just find a function from g to the

888
00:34:18,399 --> 00:34:21,760
complex numbers so that g star of f is

889
00:34:21,760 --> 00:34:23,280
the same as taking the inner product

890
00:34:23,280 --> 00:34:25,440
between that fixed function g

891
00:34:25,440 --> 00:34:26,800
and f

892
00:34:26,800 --> 00:34:28,719
so in other words both input and output

893
00:34:28,719 --> 00:34:31,599
properties could be represented

894
00:34:31,599 --> 00:34:33,440
by

895
00:34:33,440 --> 00:34:36,879
functions from g to the complex numbers

896
00:34:36,879 --> 00:34:38,800
and then so one thing we need of course

897
00:34:38,800 --> 00:34:42,159
is if we have a state f so function

898
00:34:42,159 --> 00:34:44,879
how does it change when we apply a block

899
00:34:44,879 --> 00:34:47,280
cipher or cryptographic permutation

900
00:34:47,280 --> 00:34:49,359
and the relation here is given by a

901
00:34:49,359 --> 00:34:51,520
linear transformation and the only thing

902
00:34:51,520 --> 00:34:54,639
that transformation does is if you have

903
00:34:54,639 --> 00:34:57,040
the delta function at x so this is just

904
00:34:57,040 --> 00:34:58,960
a function which is zero everywhere

905
00:34:58,960 --> 00:35:00,160
except

906
00:35:00,160 --> 00:35:02,640
when the input is x then that should be

907
00:35:02,640 --> 00:35:04,880
mapped to delta f of x and by linearity

908
00:35:04,880 --> 00:35:05,839
that will

909
00:35:05,839 --> 00:35:09,520
define this whole linear transformation

910
00:35:09,520 --> 00:35:11,359
and then um

911
00:35:11,359 --> 00:35:13,280
so this is this transformation this can

912
00:35:13,280 --> 00:35:15,680
be represented by a matrix because it's

913
00:35:15,680 --> 00:35:16,720
linear

914
00:35:16,720 --> 00:35:19,040
and you could do that with respect to

915
00:35:19,040 --> 00:35:21,599
certain bases so one possible basis is

916
00:35:21,599 --> 00:35:24,000
basis of delta functions and another

917
00:35:24,000 --> 00:35:26,240
possible basis is the basis of group

918
00:35:26,240 --> 00:35:28,160
characters and i don't want to talk

919
00:35:28,160 --> 00:35:30,160
about this here too much but in the

920
00:35:30,160 --> 00:35:33,280
video on youtube that's a bit longer i

921
00:35:33,280 --> 00:35:35,200
explained it a bit more

922
00:35:35,200 --> 00:35:37,119
the idea is just that we do a change of

923
00:35:37,119 --> 00:35:39,359
basis to a more convenient basis that

924
00:35:39,359 --> 00:35:42,079
would be the character basis

925
00:35:42,079 --> 00:35:43,599
and this is known as the fourier

926
00:35:43,599 --> 00:35:45,119
transformation

927
00:35:45,119 --> 00:35:47,280
and then we get a different

928
00:35:47,280 --> 00:35:49,119
linear transform we get the difference

929
00:35:49,119 --> 00:35:51,599
matrix representation of the same linear

930
00:35:51,599 --> 00:35:53,440
transformation

931
00:35:53,440 --> 00:35:57,119
and i will call that t superscript f

932
00:35:57,119 --> 00:35:59,359
c superscript f and that is also known

933
00:35:59,359 --> 00:36:01,040
as the correlation matrix of the

934
00:36:01,040 --> 00:36:02,640
function f and this plays a very

935
00:36:02,640 --> 00:36:03,839
important role

936
00:36:03,839 --> 00:36:05,680
in let's say the classical theory of

937
00:36:05,680 --> 00:36:07,440
linear groups analysis

938
00:36:07,440 --> 00:36:09,440
and the goal of this whole thing is that

939
00:36:09,440 --> 00:36:13,119
if you add a key or a constant then the

940
00:36:13,119 --> 00:36:16,240
correlation matrix will be diagonal

941
00:36:16,240 --> 00:36:18,400
which is much easier to work with

942
00:36:18,400 --> 00:36:21,920
so that's why we do that practice

943
00:36:21,920 --> 00:36:25,359
now going just a little bit further

944
00:36:25,359 --> 00:36:27,359
input properties and output properties

945
00:36:27,359 --> 00:36:29,599
can more generally be described by a

946
00:36:29,599 --> 00:36:32,079
subspace of functions so it's a vector

947
00:36:32,079 --> 00:36:33,839
space of functions that just means that

948
00:36:33,839 --> 00:36:35,359
we are considering all the states in

949
00:36:35,359 --> 00:36:37,599
that vector space at once

950
00:36:37,599 --> 00:36:39,359
or for output properties we are

951
00:36:39,359 --> 00:36:41,599
considering um sort of the inner

952
00:36:41,599 --> 00:36:44,000
products with all the functions uh from

953
00:36:44,000 --> 00:36:45,839
that space at once

954
00:36:45,839 --> 00:36:48,160
and this is needed to describe some

955
00:36:48,160 --> 00:36:49,920
important cases such as multiple linear

956
00:36:49,920 --> 00:36:52,000
cryptanalysis and also the case of

957
00:36:52,000 --> 00:36:54,960
projection functions which is a kind of

958
00:36:54,960 --> 00:36:58,160
general type of input output property

959
00:36:58,160 --> 00:36:59,040
that

960
00:36:59,040 --> 00:37:01,280
i discussed in a bit more detail in the

961
00:37:01,280 --> 00:37:02,720
longer video

962
00:37:02,720 --> 00:37:04,480
so one thing i just want to mention here

963
00:37:04,480 --> 00:37:06,880
is that every results

964
00:37:06,880 --> 00:37:08,640
that i'll present in the next slide and

965
00:37:08,640 --> 00:37:10,720
that's presented in the paper has to be

966
00:37:10,720 --> 00:37:12,800
independent from the choice of the basis

967
00:37:12,800 --> 00:37:13,920
for v

968
00:37:13,920 --> 00:37:15,920
it's quite important because

969
00:37:15,920 --> 00:37:17,839
it turns out sometimes two different

970
00:37:17,839 --> 00:37:19,200
attacks

971
00:37:19,200 --> 00:37:21,280
um are actually the same

972
00:37:21,280 --> 00:37:24,000
when you think about the subspaces

973
00:37:24,000 --> 00:37:25,440
but they're just

974
00:37:25,440 --> 00:37:27,680
they look quite different only because

975
00:37:27,680 --> 00:37:29,760
of the choice of the bases so an example

976
00:37:29,760 --> 00:37:31,200
of that would be multi-dimensional

977
00:37:31,200 --> 00:37:33,119
linear crypto analysis and high square

978
00:37:33,119 --> 00:37:34,560
some some types of chi-square

979
00:37:34,560 --> 00:37:37,560
distinguishes

980
00:37:38,400 --> 00:37:39,280
so

981
00:37:39,280 --> 00:37:41,359
now we have a way of describing input

982
00:37:41,359 --> 00:37:43,839
and output properties

983
00:37:43,839 --> 00:37:46,720
that is the same for all these variants

984
00:37:46,720 --> 00:37:48,720
of linear cryptanalysis that i showed on

985
00:37:48,720 --> 00:37:50,560
the slide in the beginning

986
00:37:50,560 --> 00:37:52,400
and also some other ones

987
00:37:52,400 --> 00:37:55,599
and based on that i now want to

988
00:37:55,599 --> 00:37:57,200
generalize the notion of a linear

989
00:37:57,200 --> 00:37:58,960
approximation

990
00:37:58,960 --> 00:38:00,880
so i can say a linear approximation can

991
00:38:00,880 --> 00:38:02,960
be generalized to just something what i

992
00:38:02,960 --> 00:38:04,880
would call an approximation and this is

993
00:38:04,880 --> 00:38:08,000
just a pair of two subspaces u and v

994
00:38:08,000 --> 00:38:09,440
of functions

995
00:38:09,440 --> 00:38:11,760
and um u here is you should think of

996
00:38:11,760 --> 00:38:14,320
that as the space or the input property

997
00:38:14,320 --> 00:38:16,800
space and v is the output property space

998
00:38:16,800 --> 00:38:19,359
and between those two spaces i define an

999
00:38:19,359 --> 00:38:21,359
approximation map

1000
00:38:21,359 --> 00:38:22,400
and

1001
00:38:22,400 --> 00:38:25,040
the idea behind this map is for a given

1002
00:38:25,040 --> 00:38:26,960
state in u

1003
00:38:26,960 --> 00:38:29,359
after transforming it through a function

1004
00:38:29,359 --> 00:38:31,920
f this gives you the vector v that's the

1005
00:38:31,920 --> 00:38:34,640
best approximation in some sense

1006
00:38:34,640 --> 00:38:36,320
in v

1007
00:38:36,320 --> 00:38:37,839
um

1008
00:38:37,839 --> 00:38:39,520
and this mathematically it's a

1009
00:38:39,520 --> 00:38:41,680
composition of three maps so it's a

1010
00:38:41,680 --> 00:38:44,320
inclusion map from you to just uh the

1011
00:38:44,320 --> 00:38:46,400
whole space then this

1012
00:38:46,400 --> 00:38:48,560
transition matrix and then an orthogonal

1013
00:38:48,560 --> 00:38:49,760
projection

1014
00:38:49,760 --> 00:38:51,920
so this kind of contains the information

1015
00:38:51,920 --> 00:38:54,320
about all the inner products between

1016
00:38:54,320 --> 00:38:55,920
vectors in

1017
00:38:55,920 --> 00:38:58,800
dfu and then vectors in

1018
00:38:58,800 --> 00:38:59,520
v

1019
00:38:59,520 --> 00:39:02,640
but it does that in a in a basis

1020
00:39:02,640 --> 00:39:04,560
and just one concept i want to define

1021
00:39:04,560 --> 00:39:06,560
here is the notion of principle

1022
00:39:06,560 --> 00:39:08,640
correlations which are the singular

1023
00:39:08,640 --> 00:39:10,880
values of that approximation map

1024
00:39:10,880 --> 00:39:12,480
so in this figure

1025
00:39:12,480 --> 00:39:14,400
to simplify a bit i assume here that f

1026
00:39:14,400 --> 00:39:16,640
is an injective function

1027
00:39:16,640 --> 00:39:18,880
like a block cipher would be

1028
00:39:18,880 --> 00:39:19,839
um

1029
00:39:19,839 --> 00:39:22,720
the so we have these two spaces and the

1030
00:39:22,720 --> 00:39:25,040
principal correlations are the cosines

1031
00:39:25,040 --> 00:39:26,720
of the minimum or principal angles

1032
00:39:26,720 --> 00:39:28,960
between those two spaces so

1033
00:39:28,960 --> 00:39:30,400
in the real case it would look something

1034
00:39:30,400 --> 00:39:32,560
like this so here there is a common line

1035
00:39:32,560 --> 00:39:34,560
so that's first principle correlation of

1036
00:39:34,560 --> 00:39:36,560
one because the angle is zero and then

1037
00:39:36,560 --> 00:39:39,040
there's a second angle minimal angle

1038
00:39:39,040 --> 00:39:40,839
between those two

1039
00:39:40,839 --> 00:39:43,680
planes which is the cosine of which is

1040
00:39:43,680 --> 00:39:45,839
in the principal correlation

1041
00:39:45,839 --> 00:39:47,760
and in the case of linear cryptanalysis

1042
00:39:47,760 --> 00:39:50,320
so this is um explained a bit more in a

1043
00:39:50,320 --> 00:39:53,040
bit more detail in the video um those

1044
00:39:53,040 --> 00:39:55,119
principal correlations

1045
00:39:55,119 --> 00:39:58,000
um there is only one because u and v are

1046
00:39:58,000 --> 00:40:00,000
one dimensional

1047
00:40:00,000 --> 00:40:02,480
will then correspond to the absolute

1048
00:40:02,480 --> 00:40:05,119
value of the ordinary linear correlation

1049
00:40:05,119 --> 00:40:10,000
that i mentioned in the second slide

1050
00:40:10,000 --> 00:40:12,640
so given that definition there are a few

1051
00:40:12,640 --> 00:40:15,280
different cases that we can consider one

1052
00:40:15,280 --> 00:40:18,720
case is where your space tfu is just

1053
00:40:18,720 --> 00:40:20,720
contained within v and that's what i'll

1054
00:40:20,720 --> 00:40:22,720
call a perfect approximation so some

1055
00:40:22,720 --> 00:40:24,720
examples of that are integral at x and

1056
00:40:24,720 --> 00:40:27,119
if you are u and v are equal

1057
00:40:27,119 --> 00:40:28,079
we get

1058
00:40:28,079 --> 00:40:30,160
invariants including invariant subspaces

1059
00:40:30,160 --> 00:40:31,920
and non-linear invariants

1060
00:40:31,920 --> 00:40:34,240
and then you can take the opposite case

1061
00:40:34,240 --> 00:40:35,200
where

1062
00:40:35,200 --> 00:40:38,079
this space dfu is perpendicular to this

1063
00:40:38,079 --> 00:40:39,200
v

1064
00:40:39,200 --> 00:40:40,880
and this is what i will call zero

1065
00:40:40,880 --> 00:40:43,359
correlation approximations because among

1066
00:40:43,359 --> 00:40:45,839
other things this includes

1067
00:40:45,839 --> 00:40:47,839
zero correlation linear given analysis

1068
00:40:47,839 --> 00:40:49,359
and there's a simple link between those

1069
00:40:49,359 --> 00:40:51,280
two because if you flip

1070
00:40:51,280 --> 00:40:53,760
this plane v by taking the orthogonal

1071
00:40:53,760 --> 00:40:56,160
complement then you go from a perfect to

1072
00:40:56,160 --> 00:40:58,000
a zero correlation approximation that's

1073
00:40:58,000 --> 00:41:00,000
a very simple result but it includes

1074
00:41:00,000 --> 00:41:00,880
some

1075
00:41:00,880 --> 00:41:02,400
non-trivial links such as the link

1076
00:41:02,400 --> 00:41:04,079
between integral at x and

1077
00:41:04,079 --> 00:41:05,599
multi-dimensional zero correlation

1078
00:41:05,599 --> 00:41:07,520
linear gives analysis

1079
00:41:07,520 --> 00:41:09,440
um and then of course yeah we have the

1080
00:41:09,440 --> 00:41:11,839
in general what do we do so in general

1081
00:41:11,839 --> 00:41:14,240
these are kind of probabilistic

1082
00:41:14,240 --> 00:41:16,000
approximations and then the quality of

1083
00:41:16,000 --> 00:41:18,240
this approximation depends on

1084
00:41:18,240 --> 00:41:20,560
this approximation map

1085
00:41:20,560 --> 00:41:22,800
and this includes things like ordinary

1086
00:41:22,800 --> 00:41:25,040
linear analysis

1087
00:41:25,040 --> 00:41:25,839
so

1088
00:41:25,839 --> 00:41:27,839
for such a pair of subspaces an

1089
00:41:27,839 --> 00:41:29,680
approximation what we want to do in

1090
00:41:29,680 --> 00:41:32,079
general is to compute or estimate the

1091
00:41:32,079 --> 00:41:34,880
approximation map and for doing that we

1092
00:41:34,880 --> 00:41:35,710
will need

1093
00:41:35,710 --> 00:41:37,359
[Applause]

1094
00:41:37,359 --> 00:41:38,640
we will need this

1095
00:41:38,640 --> 00:41:42,000
idea of trails and piling up

1096
00:41:42,000 --> 00:41:44,720
so what are what are trails in ordinary

1097
00:41:44,720 --> 00:41:46,560
linear grid analysis so

1098
00:41:46,560 --> 00:41:48,319
the idea is that typically a block

1099
00:41:48,319 --> 00:41:51,280
cipher will be composed so will be a

1100
00:41:51,280 --> 00:41:52,480
composition

1101
00:41:52,480 --> 00:41:54,880
of a number of simpler functions so i

1102
00:41:54,880 --> 00:41:58,640
call them f1 up to fr in this slide

1103
00:41:58,640 --> 00:41:59,520
and then

1104
00:41:59,520 --> 00:42:01,359
we assume that for each of those simple

1105
00:42:01,359 --> 00:42:04,000
functions it's easy to find

1106
00:42:04,000 --> 00:42:08,160
masks so u1 u2 for example for f1

1107
00:42:08,160 --> 00:42:10,079
so that form a linear approximation with

1108
00:42:10,079 --> 00:42:12,400
a known correlation

1109
00:42:12,400 --> 00:42:15,040
and then we want to have a way of gluing

1110
00:42:15,040 --> 00:42:16,960
together all those one round

1111
00:42:16,960 --> 00:42:20,000
approximations into an approximation for

1112
00:42:20,000 --> 00:42:21,839
this composition of functions and the

1113
00:42:21,839 --> 00:42:23,520
big question here is of course what is

1114
00:42:23,520 --> 00:42:24,960
the correlation

1115
00:42:24,960 --> 00:42:26,640
for this

1116
00:42:26,640 --> 00:42:29,119
glued together approximation

1117
00:42:29,119 --> 00:42:31,119
and the

1118
00:42:31,119 --> 00:42:34,880
the basic principle that's uh used in

1119
00:42:34,880 --> 00:42:37,520
in the vast majority of linear attacks

1120
00:42:37,520 --> 00:42:39,839
is known as the piling up principle

1121
00:42:39,839 --> 00:42:42,160
and it says that the correlation can be

1122
00:42:42,160 --> 00:42:44,560
approximated by the products of those

1123
00:42:44,560 --> 00:42:46,800
one rounds correlations and this product

1124
00:42:46,800 --> 00:42:48,560
is also called the trail correlation so

1125
00:42:48,560 --> 00:42:52,240
the sequence u1 up to ur plus one

1126
00:42:52,240 --> 00:42:54,000
with all these intermediate masks that's

1127
00:42:54,000 --> 00:42:56,640
called a trill

1128
00:42:57,119 --> 00:42:58,880
and of course this this piling up

1129
00:42:58,880 --> 00:43:00,400
principle that's a heuristic in the

1130
00:43:00,400 --> 00:43:02,319
longer video i also show a bit where

1131
00:43:02,319 --> 00:43:04,079
where this is coming from

1132
00:43:04,079 --> 00:43:06,319
basically there have been two main

1133
00:43:06,319 --> 00:43:08,880
motivations for that heuristic first one

1134
00:43:08,880 --> 00:43:12,480
is markov cipher assumption

1135
00:43:12,640 --> 00:43:15,040
and i will not say too much about it

1136
00:43:15,040 --> 00:43:17,280
here the main problem with this

1137
00:43:17,280 --> 00:43:20,160
is one that it assumes that you have

1138
00:43:20,160 --> 00:43:22,160
independent round keys which is really

1139
00:43:22,160 --> 00:43:25,200
not realistic but much more important it

1140
00:43:25,200 --> 00:43:27,200
assumes there is a round key at all and

1141
00:43:27,200 --> 00:43:29,200
it assumes that it's random we are

1142
00:43:29,200 --> 00:43:31,839
actually in in any uh attack we are

1143
00:43:31,839 --> 00:43:33,359
never interested in the average

1144
00:43:33,359 --> 00:43:35,680
correlations we are always interested in

1145
00:43:35,680 --> 00:43:37,680
the fixed correlations

1146
00:43:37,680 --> 00:43:40,000
it's just that sometimes the fixie

1147
00:43:40,000 --> 00:43:43,040
correlations are almost all

1148
00:43:43,040 --> 00:43:43,920
close

1149
00:43:43,920 --> 00:43:46,880
to that average

1150
00:43:46,880 --> 00:43:48,240
but for example cryptographic

1151
00:43:48,240 --> 00:43:49,920
permutations there's no key so you

1152
00:43:49,920 --> 00:43:51,760
cannot use that

1153
00:43:51,760 --> 00:43:55,040
so a different way to look at this

1154
00:43:55,040 --> 00:43:57,359
is the dominant trail hypothesis this

1155
00:43:57,359 --> 00:43:59,280
follows from

1156
00:43:59,280 --> 00:44:01,680
a result that first appeared in a paper

1157
00:44:01,680 --> 00:44:03,599
about correlation matrices by johann

1158
00:44:03,599 --> 00:44:04,560
diamond

1159
00:44:04,560 --> 00:44:05,920
and that result says that the

1160
00:44:05,920 --> 00:44:09,040
correlation of a linear approximation

1161
00:44:09,040 --> 00:44:10,800
is equal to the sum

1162
00:44:10,800 --> 00:44:12,480
of the

1163
00:44:12,480 --> 00:44:14,240
all the trial correlations for any

1164
00:44:14,240 --> 00:44:16,240
possible trial

1165
00:44:16,240 --> 00:44:19,520
and if one of the terms in that sum so

1166
00:44:19,520 --> 00:44:22,720
one trail has a much larger correlation

1167
00:44:22,720 --> 00:44:24,000
than the others

1168
00:44:24,000 --> 00:44:26,000
then you basically gets the piling up

1169
00:44:26,000 --> 00:44:27,280
principle

1170
00:44:27,280 --> 00:44:29,680
so this just

1171
00:44:29,680 --> 00:44:31,280
assumes that one term is kind of

1172
00:44:31,280 --> 00:44:32,400
dominant

1173
00:44:32,400 --> 00:44:34,400
and this is a much better

1174
00:44:34,400 --> 00:44:37,280
way of approaching it um

1175
00:44:37,280 --> 00:44:39,520
but it also has some issues especially

1176
00:44:39,520 --> 00:44:41,200
when you look at those extensions and

1177
00:44:41,200 --> 00:44:43,359
variants of linear analysis

1178
00:44:43,359 --> 00:44:46,480
it doesn't really work there

1179
00:44:46,480 --> 00:44:48,160
for example if you have non-linear

1180
00:44:48,160 --> 00:44:50,160
approximations then there is a bit of a

1181
00:44:50,160 --> 00:44:51,760
problem what does it mean to have

1182
00:44:51,760 --> 00:44:53,440
non-linear trails there's not really a

1183
00:44:53,440 --> 00:44:56,960
unique set of non-linear trails

1184
00:44:56,960 --> 00:44:57,920
um

1185
00:44:57,920 --> 00:44:59,599
a unique way of representing all the

1186
00:44:59,599 --> 00:45:01,040
other trails

1187
00:45:01,040 --> 00:45:02,319
and another issue with this is

1188
00:45:02,319 --> 00:45:04,240
clustering but i will not go into that

1189
00:45:04,240 --> 00:45:06,160
here

1190
00:45:06,160 --> 00:45:08,319
so what is the the general piling of

1191
00:45:08,319 --> 00:45:10,480
principle so here

1192
00:45:10,480 --> 00:45:13,119
um we want to know the approximation map

1193
00:45:13,119 --> 00:45:13,920
for

1194
00:45:13,920 --> 00:45:15,920
composition of functions

1195
00:45:15,920 --> 00:45:17,440
and the piling of principle is then a

1196
00:45:17,440 --> 00:45:18,560
theorem that says that this

1197
00:45:18,560 --> 00:45:21,359
approximation map is the composition of

1198
00:45:21,359 --> 00:45:24,880
the one round approximation maps

1199
00:45:24,880 --> 00:45:26,720
plus an error term and that error term

1200
00:45:26,720 --> 00:45:29,680
can be computed explicitly

1201
00:45:29,680 --> 00:45:31,040
and

1202
00:45:31,040 --> 00:45:32,720
so this is very similar to the dominant

1203
00:45:32,720 --> 00:45:35,040
trail hypothesis because

1204
00:45:35,040 --> 00:45:37,200
essentially if you're uh if you're using

1205
00:45:37,200 --> 00:45:38,960
this dominant term here so this

1206
00:45:38,960 --> 00:45:41,520
composition and it turns out to be wrong

1207
00:45:41,520 --> 00:45:43,040
then that just means you need to look at

1208
00:45:43,040 --> 00:45:44,319
this error term and you will need to

1209
00:45:44,319 --> 00:45:46,960
expand your trail so by increasing the

1210
00:45:46,960 --> 00:45:48,160
dimension of

1211
00:45:48,160 --> 00:45:50,160
vector spaces basically

1212
00:45:50,160 --> 00:45:50,880
so

1213
00:45:50,880 --> 00:45:52,240
that is similar to dominant trail

1214
00:45:52,240 --> 00:45:54,720
hypothesis but

1215
00:45:54,720 --> 00:45:56,319
in addition to that

1216
00:45:56,319 --> 00:45:59,119
there is here a different motivation for

1217
00:45:59,119 --> 00:46:01,119
that result

1218
00:46:01,119 --> 00:46:03,359
which is geometric and which the idea of

1219
00:46:03,359 --> 00:46:06,000
which is that you have a sequence of

1220
00:46:06,000 --> 00:46:08,160
successive orthogonal projections

1221
00:46:08,160 --> 00:46:10,400
and in the longer video

1222
00:46:10,400 --> 00:46:12,640
i go into that a little bit more and you

1223
00:46:12,640 --> 00:46:15,200
can also check your 5.1 of the paper for

1224
00:46:15,200 --> 00:46:17,760
a complete explanation

1225
00:46:17,760 --> 00:46:20,319
so these are my conclusions i don't

1226
00:46:20,319 --> 00:46:22,079
think it's necessary to repeat all of

1227
00:46:22,079 --> 00:46:23,280
them

1228
00:46:23,280 --> 00:46:25,359
i just want to say this is only a brief

1229
00:46:25,359 --> 00:46:26,480
overview

1230
00:46:26,480 --> 00:46:29,280
so there are more uh complete results

1231
00:46:29,280 --> 00:46:31,920
and some applications in the paper

1232
00:46:31,920 --> 00:46:33,119
um

1233
00:46:33,119 --> 00:46:34,400
and

1234
00:46:34,400 --> 00:46:35,920
also all the source code for those

1235
00:46:35,920 --> 00:46:37,920
applications can be found at the link

1236
00:46:37,920 --> 00:46:40,000
that's shown here on the slide

1237
00:46:40,000 --> 00:46:41,520
and if you have any questions i guess

1238
00:46:41,520 --> 00:46:44,480
you can ask them now or uh email me

1239
00:46:44,480 --> 00:46:46,319
later on

1240
00:46:46,319 --> 00:46:49,759
thanks a lot for your attention

1241
00:46:54,240 --> 00:46:57,200
okay so thank you very much tim uh so we

1242
00:46:57,200 --> 00:46:59,760
have a bit of time for questions uh if

1243
00:46:59,760 --> 00:47:02,480
there are any

1244
00:47:03,440 --> 00:47:07,040
um again there don't seem to be any

1245
00:47:07,040 --> 00:47:07,839
in

1246
00:47:07,839 --> 00:47:10,880
in zulip

1247
00:47:10,880 --> 00:47:13,119
so

1248
00:47:13,520 --> 00:47:15,440
so if you have if someone in the

1249
00:47:15,440 --> 00:47:18,880
audience has a question feel free to

1250
00:47:18,880 --> 00:47:21,760
unmute yourself and ask directly or

1251
00:47:21,760 --> 00:47:25,240
type it up somewhere

1252
00:47:49,520 --> 00:47:51,200
okay so again i i don't see any

1253
00:47:51,200 --> 00:47:53,440
questions um

1254
00:47:53,440 --> 00:47:54,720
so

1255
00:47:54,720 --> 00:47:57,599
uh maybe to give you some time

1256
00:47:57,599 --> 00:48:00,480
to think about it we can um

1257
00:48:00,480 --> 00:48:02,079
keep some time for question at the end

1258
00:48:02,079 --> 00:48:04,319
of the of the session

1259
00:48:04,319 --> 00:48:05,200
um

1260
00:48:05,200 --> 00:48:07,520
so in the meantime

1261
00:48:07,520 --> 00:48:11,800
so let's move on to the next talk

1262
00:48:20,079 --> 00:48:23,200
so the the final um uh paper of this

1263
00:48:23,200 --> 00:48:24,800
session uh

1264
00:48:24,800 --> 00:48:27,280
is going is going to be uh the following

1265
00:48:27,280 --> 00:48:29,839
so it would it was um

1266
00:48:29,839 --> 00:48:32,319
nominated for invitation to the journal

1267
00:48:32,319 --> 00:48:35,200
of cryptology um like the other two

1268
00:48:35,200 --> 00:48:39,200
papers uh in the session so the

1269
00:48:39,200 --> 00:48:40,800
um

1270
00:48:40,800 --> 00:48:43,200
the award says the following so the

1271
00:48:43,200 --> 00:48:46,079
program committee of asia 2021 is glad

1272
00:48:46,079 --> 00:48:47,920
to nominate for invitation to the genre

1273
00:48:47,920 --> 00:48:49,680
of cryptology

1274
00:48:49,680 --> 00:48:52,559
gabriele de michelli pierre perry godrej

1275
00:48:52,559 --> 00:48:55,040
and cecil piero as the authors of one of

1276
00:48:55,040 --> 00:48:57,119
the three top-rated papers of the

1277
00:48:57,119 --> 00:49:00,079
conference titled lattice enumeration

1278
00:49:00,079 --> 00:49:01,760
for tower nfs

1279
00:49:01,760 --> 00:49:03,920
a 5 21-bit discrete logarithm

1280
00:49:03,920 --> 00:49:06,160
computation

1281
00:49:06,160 --> 00:49:07,040
um

1282
00:49:07,040 --> 00:49:07,920
and

1283
00:49:07,920 --> 00:49:11,839
um so i think uh cecil is giving that

1284
00:49:11,839 --> 00:49:14,800
gabrielle is giving the talk

1285
00:49:14,800 --> 00:49:17,440
so let me stop sharing and

1286
00:49:17,440 --> 00:49:22,240
uh gabrielle the floor is yours

1287
00:49:24,880 --> 00:49:27,599
all right are the slides okay

1288
00:49:27,599 --> 00:49:30,559
yes they are okay great uh so i today

1289
00:49:30,559 --> 00:49:32,640
i'm going to be presenting some uh joint

1290
00:49:32,640 --> 00:49:35,359
work with uh pierre godrion says

1291
00:49:35,359 --> 00:49:37,520
which uh is about lattice enumeration

1292
00:49:37,520 --> 00:49:40,079
for the tower and number fifth algorithm

1293
00:49:40,079 --> 00:49:40,839
a

1294
00:49:40,839 --> 00:49:44,800
521-bit discrete logarithm computation

1295
00:49:44,800 --> 00:49:47,200
so as we all know cryptography is here

1296
00:49:47,200 --> 00:49:50,319
to give us some means to secure and uh

1297
00:49:50,319 --> 00:49:52,240
to communicate sorry in a secure way

1298
00:49:52,240 --> 00:49:54,559
even in the presence of eavesdroppers

1299
00:49:54,559 --> 00:49:56,559
and secure protocols cryptographic

1300
00:49:56,559 --> 00:49:58,640
secure protocols rely on some building

1301
00:49:58,640 --> 00:50:00,880
blocks that are cryptographic primitives

1302
00:50:00,880 --> 00:50:04,000
which themselves rely on hopefully hard

1303
00:50:04,000 --> 00:50:06,400
mathematical problems and originally

1304
00:50:06,400 --> 00:50:08,559
these problems were the two following we

1305
00:50:08,559 --> 00:50:12,000
had factorization integer factorization

1306
00:50:12,000 --> 00:50:13,440
we had the computation of discrete

1307
00:50:13,440 --> 00:50:15,680
logarithms and more recently problems

1308
00:50:15,680 --> 00:50:17,839
related to lattices like alice presented

1309
00:50:17,839 --> 00:50:19,680
just before or problems related to

1310
00:50:19,680 --> 00:50:21,599
isogenes etc

1311
00:50:21,599 --> 00:50:24,000
and so in this talk i will focus on one

1312
00:50:24,000 --> 00:50:26,319
of these mathematical problems which is

1313
00:50:26,319 --> 00:50:29,599
the computation of discrete logarithms

1314
00:50:29,599 --> 00:50:31,200
so let me start by reminding what a

1315
00:50:31,200 --> 00:50:33,119
discrete logarithm is so the setup is

1316
00:50:33,119 --> 00:50:35,359
actually quite simple we are given a

1317
00:50:35,359 --> 00:50:37,920
finite cyclic group g of some order n

1318
00:50:37,920 --> 00:50:40,480
and a generator g of the group and we

1319
00:50:40,480 --> 00:50:42,319
also consider some element of the group

1320
00:50:42,319 --> 00:50:44,000
so usually it's known as a target

1321
00:50:44,000 --> 00:50:45,280
element h

1322
00:50:45,280 --> 00:50:47,200
and so when we talk about the discrete

1323
00:50:47,200 --> 00:50:50,160
logarithm of h in base g where g is the

1324
00:50:50,160 --> 00:50:52,559
generator this is going to correspond to

1325
00:50:52,559 --> 00:50:55,520
the element x so the exponent such that

1326
00:50:55,520 --> 00:50:58,480
g to the x is equal to h

1327
00:50:58,480 --> 00:51:00,559
and so this definition brings forth as a

1328
00:51:00,559 --> 00:51:02,160
following problem which is known as the

1329
00:51:02,160 --> 00:51:04,319
discrete logarithm problem or dlp for

1330
00:51:04,319 --> 00:51:06,800
short where we are given a target

1331
00:51:06,800 --> 00:51:09,520
element h of the group and we are asked

1332
00:51:09,520 --> 00:51:12,640
to find this exponent x so find x such

1333
00:51:12,640 --> 00:51:15,920
that g to the x is equal to h

1334
00:51:15,920 --> 00:51:17,839
now of course the discrete logarithm

1335
00:51:17,839 --> 00:51:20,319
problem is a hard problem depending on

1336
00:51:20,319 --> 00:51:22,079
the group g that is being considered so

1337
00:51:22,079 --> 00:51:24,000
it can be easy for some group g and it

1338
00:51:24,000 --> 00:51:25,680
can be considered very hard from some

1339
00:51:25,680 --> 00:51:26,960
other groups g

1340
00:51:26,960 --> 00:51:28,559
and so for cryptographic reasons of

1341
00:51:28,559 --> 00:51:30,559
course we want to choose

1342
00:51:30,559 --> 00:51:32,960
use a group g such that the discrete

1343
00:51:32,960 --> 00:51:35,440
logarithm problem is as hard as possible

1344
00:51:35,440 --> 00:51:37,200
and so cryptography usually considers

1345
00:51:37,200 --> 00:51:39,200
prime finite fields finite fields of the

1346
00:51:39,200 --> 00:51:40,720
form fpn

1347
00:51:40,720 --> 00:51:42,160
uh the group of rational points over

1348
00:51:42,160 --> 00:51:44,160
elliptic curves defined over uh finite

1349
00:51:44,160 --> 00:51:46,079
fields or even genius two hyper elliptic

1350
00:51:46,079 --> 00:51:48,720
curves so we have a variety of choices

1351
00:51:48,720 --> 00:51:50,480
some are bad choices not the ones that

1352
00:51:50,480 --> 00:51:52,480
i've listed but these ones are

1353
00:51:52,480 --> 00:51:55,440
used in cryptographic protocols

1354
00:51:55,440 --> 00:51:57,280
and so in this presentation i will focus

1355
00:51:57,280 --> 00:51:59,599
on a particular case another particular

1356
00:51:59,599 --> 00:52:02,079
case which is um the multiplicative

1357
00:52:02,079 --> 00:52:06,160
group of finite fields of the forum fpm

1358
00:52:06,160 --> 00:52:07,520
so why do we care about discrete

1359
00:52:07,520 --> 00:52:09,520
logarithms in general well many

1360
00:52:09,520 --> 00:52:11,760
cryptographic protocols are going to use

1361
00:52:11,760 --> 00:52:13,440
a modular exponentiation in their

1362
00:52:13,440 --> 00:52:15,520
algorithms where the exponent is going

1363
00:52:15,520 --> 00:52:16,960
to be a secret

1364
00:52:16,960 --> 00:52:18,960
so a modular exponentiation is computing

1365
00:52:18,960 --> 00:52:21,839
g to the x in a particular group g

1366
00:52:21,839 --> 00:52:23,760
and so one can see that for example in

1367
00:52:23,760 --> 00:52:25,359
the diffie-hellman key exchange protocol

1368
00:52:25,359 --> 00:52:27,040
which is protocol that is

1369
00:52:27,040 --> 00:52:29,040
widely deployed which is known the

1370
00:52:29,040 --> 00:52:30,800
public data is going to be elements of

1371
00:52:30,800 --> 00:52:33,760
the group g so g a generator g to the a

1372
00:52:33,760 --> 00:52:36,240
g to the b and the shared secret key is

1373
00:52:36,240 --> 00:52:38,240
going to be the quantity g to the a b

1374
00:52:38,240 --> 00:52:40,079
and it is quite clear here that if one

1375
00:52:40,079 --> 00:52:42,480
can solve a discrete logarithm uh in the

1376
00:52:42,480 --> 00:52:45,359
group g in order to recover either a or

1377
00:52:45,359 --> 00:52:48,000
b from the public data then it becomes

1378
00:52:48,000 --> 00:52:50,160
easy to reconstruct to compute the

1379
00:52:50,160 --> 00:52:52,559
shared secret key

1380
00:52:52,559 --> 00:52:53,760
so the diffie-hellman key exchange

1381
00:52:53,760 --> 00:52:55,920
protocol is not the only example where

1382
00:52:55,920 --> 00:52:57,440
the hardness of the security logarithm

1383
00:52:57,440 --> 00:52:59,200
problem is important

1384
00:52:59,200 --> 00:53:01,280
more recently pairing brace protocols

1385
00:53:01,280 --> 00:53:03,440
use identity based encryption or

1386
00:53:03,440 --> 00:53:05,520
signature schemes or short signature

1387
00:53:05,520 --> 00:53:08,640
schemes and these schemes are going to

1388
00:53:08,640 --> 00:53:11,040
have security properties based on the

1389
00:53:11,040 --> 00:53:13,040
assumptions that would become false if

1390
00:53:13,040 --> 00:53:16,240
the dlp is broken

1391
00:53:16,559 --> 00:53:19,359
so going back to evaluating the hardness

1392
00:53:19,359 --> 00:53:21,359
of the discrete logarithm problem over a

1393
00:53:21,359 --> 00:53:23,680
finite field this is not something which

1394
00:53:23,680 --> 00:53:25,760
is easy uh there are various reasons why

1395
00:53:25,760 --> 00:53:27,760
it's hard first of all there are many

1396
00:53:27,760 --> 00:53:29,280
different algorithms that solve the

1397
00:53:29,280 --> 00:53:31,200
discrete logarithm problem over finite

1398
00:53:31,200 --> 00:53:32,240
fields

1399
00:53:32,240 --> 00:53:34,240
and not only are there many algorithms

1400
00:53:34,240 --> 00:53:36,160
but also their complexities are going to

1401
00:53:36,160 --> 00:53:38,480
depend on the relation there exists

1402
00:53:38,480 --> 00:53:40,160
between the characteristic p of the

1403
00:53:40,160 --> 00:53:43,359
finite field and the extension degree n

1404
00:53:43,359 --> 00:53:44,640
so in order to talk about these

1405
00:53:44,640 --> 00:53:47,280
complexities one minute introduce this

1406
00:53:47,280 --> 00:53:50,240
um well-known l notation which is given

1407
00:53:50,240 --> 00:53:52,480
by uh the formula on the slide which i'm

1408
00:53:52,480 --> 00:53:54,079
not going to read but it's the exponent

1409
00:53:54,079 --> 00:53:56,480
exponential something etc

1410
00:53:56,480 --> 00:53:58,800
this formula uses two parameters a

1411
00:53:58,800 --> 00:54:00,480
parameter alpha which varies between

1412
00:54:00,480 --> 00:54:04,079
zero and one and a positive constant c

1413
00:54:04,079 --> 00:54:06,559
now from this l notation one can see

1414
00:54:06,559 --> 00:54:08,640
that if the parameter alpha tends to

1415
00:54:08,640 --> 00:54:10,640
zero we're going to be talking about

1416
00:54:10,640 --> 00:54:12,960
polynomial time complexities

1417
00:54:12,960 --> 00:54:15,760
if the parameter alpha tends to one we

1418
00:54:15,760 --> 00:54:18,160
can see that the expression tends to

1419
00:54:18,160 --> 00:54:20,640
some exponential time complexity

1420
00:54:20,640 --> 00:54:22,800
and whenever alpha varies between zero

1421
00:54:22,800 --> 00:54:24,800
and one then we talk about

1422
00:54:24,800 --> 00:54:27,280
subexponential time complexity and this

1423
00:54:27,280 --> 00:54:28,720
is the complexity that we're going to be

1424
00:54:28,720 --> 00:54:30,880
talking about uh concerning all the

1425
00:54:30,880 --> 00:54:33,280
algorithms we will talk about in this

1426
00:54:33,280 --> 00:54:35,839
presentation

1427
00:54:36,480 --> 00:54:39,119
so this l notation is not only used to

1428
00:54:39,119 --> 00:54:40,640
talk about the complexities of these

1429
00:54:40,640 --> 00:54:43,839
algorithms but it is also used to define

1430
00:54:43,839 --> 00:54:45,839
uh families of finite fields so in

1431
00:54:45,839 --> 00:54:47,440
particular it is going to be used to

1432
00:54:47,440 --> 00:54:51,040
separate finite fields into three areas

1433
00:54:51,040 --> 00:54:52,799
so if p is the characteristic of my

1434
00:54:52,799 --> 00:54:55,839
finite field and i write p as this l

1435
00:54:55,839 --> 00:54:58,400
notation with parameters i'll find c

1436
00:54:58,400 --> 00:55:00,400
whenever alpha is going to be smaller

1437
00:55:00,400 --> 00:55:02,240
than one third we're going to be talking

1438
00:55:02,240 --> 00:55:03,359
about final fields of small

1439
00:55:03,359 --> 00:55:05,119
characteristics

1440
00:55:05,119 --> 00:55:07,119
when alpha is between a third and two

1441
00:55:07,119 --> 00:55:09,040
thirds we talk about finite fields of

1442
00:55:09,040 --> 00:55:11,760
medium characteristics and when alpha is

1443
00:55:11,760 --> 00:55:13,280
greater than two-thirds then we're

1444
00:55:13,280 --> 00:55:14,960
talking about finite fields of large

1445
00:55:14,960 --> 00:55:17,040
characteristics and the interesting

1446
00:55:17,040 --> 00:55:18,960
aspect of these algorithms is that

1447
00:55:18,960 --> 00:55:20,400
different algorithms are going to be

1448
00:55:20,400 --> 00:55:22,799
used in these different areas and the

1449
00:55:22,799 --> 00:55:24,480
same algorithm is not necessarily going

1450
00:55:24,480 --> 00:55:26,240
to have the same complexity depending on

1451
00:55:26,240 --> 00:55:29,439
the area we're looking at

1452
00:55:29,680 --> 00:55:31,359
so as i mentioned there are a lot of

1453
00:55:31,359 --> 00:55:32,880
algorithms that solve dlp and they

1454
00:55:32,880 --> 00:55:34,480
depend on which families of finite

1455
00:55:34,480 --> 00:55:36,000
fields we're looking at so for small

1456
00:55:36,000 --> 00:55:38,480
characteristics we have the family of

1457
00:55:38,480 --> 00:55:40,240
quasi-polynomial time algorithms which

1458
00:55:40,240 --> 00:55:41,680
are the most efficient algorithms we

1459
00:55:41,680 --> 00:55:43,920
have to solve dlp

1460
00:55:43,920 --> 00:55:46,079
in medium and large characteristics the

1461
00:55:46,079 --> 00:55:48,240
most efficient algorithms we have so far

1462
00:55:48,240 --> 00:55:50,480
are the number field save algorithm and

1463
00:55:50,480 --> 00:55:52,880
it's many variants

1464
00:55:52,880 --> 00:55:54,640
there are a lot of variants

1465
00:55:54,640 --> 00:55:57,680
and uh we focus in particular on medium

1466
00:55:57,680 --> 00:55:59,760
and large characteristic finite fields

1467
00:55:59,760 --> 00:56:01,359
mostly because these are the finite

1468
00:56:01,359 --> 00:56:03,520
fields that are used in practice fp6 is

1469
00:56:03,520 --> 00:56:05,680
going to be our target finite field as

1470
00:56:05,680 --> 00:56:09,118
uh we will see later

1471
00:56:09,839 --> 00:56:12,400
so in this presentation in our work we

1472
00:56:12,400 --> 00:56:14,480
performed a first record computation

1473
00:56:14,480 --> 00:56:16,319
using one of the variants of the number

1474
00:56:16,319 --> 00:56:18,160
filter algorithm which is called the

1475
00:56:18,160 --> 00:56:20,880
tower number filter algorithm and before

1476
00:56:20,880 --> 00:56:23,119
introducing uh our work and focusing on

1477
00:56:23,119 --> 00:56:25,599
tnfs uh let me just spend a second

1478
00:56:25,599 --> 00:56:27,280
explaining why do we have to do record

1479
00:56:27,280 --> 00:56:29,680
computations apart from the fact that uh

1480
00:56:29,680 --> 00:56:31,520
we like record computations and it is

1481
00:56:31,520 --> 00:56:33,200
fun to do

1482
00:56:33,200 --> 00:56:34,799
so for these protocols that are widely

1483
00:56:34,799 --> 00:56:36,319
deployed it is of course important to

1484
00:56:36,319 --> 00:56:37,760
choose the right key size these are

1485
00:56:37,760 --> 00:56:38,640
things

1486
00:56:38,640 --> 00:56:40,480
obvious things right if we're choosing a

1487
00:56:40,480 --> 00:56:42,079
key size which is too large we're doing

1488
00:56:42,079 --> 00:56:44,240
needlessly expensive computations for

1489
00:56:44,240 --> 00:56:46,160
choosing a key size which is too small

1490
00:56:46,160 --> 00:56:48,720
of course our protocol is insecure

1491
00:56:48,720 --> 00:56:50,480
but because the running time of discrete

1492
00:56:50,480 --> 00:56:52,880
algorithms is so hard to predict record

1493
00:56:52,880 --> 00:56:54,480
computation actually gives us very

1494
00:56:54,480 --> 00:56:57,119
valuable information to order uh or to

1495
00:56:57,119 --> 00:56:59,599
assess a key lifetime uh the key oh yeah

1496
00:56:59,599 --> 00:57:01,599
the lifetime of the key so this is why

1497
00:57:01,599 --> 00:57:03,440
uh record computations are highly

1498
00:57:03,440 --> 00:57:05,760
available in order to give some um

1499
00:57:05,760 --> 00:57:10,000
recommendations for key for key sizes

1500
00:57:10,880 --> 00:57:12,720
so we performed a first record

1501
00:57:12,720 --> 00:57:14,799
computation using the algorithm which is

1502
00:57:14,799 --> 00:57:17,599
x t and fs so t and t and fs stands for

1503
00:57:17,599 --> 00:57:18,880
tower number felt safe where we're going

1504
00:57:18,880 --> 00:57:21,200
to explode some algebraic structure and

1505
00:57:21,200 --> 00:57:23,920
x here uh stands for extended and the

1506
00:57:23,920 --> 00:57:25,599
first thing i want to mention is that

1507
00:57:25,599 --> 00:57:27,440
when we talk about the extension

1508
00:57:27,440 --> 00:57:30,160
extended sorry tnfs we're considering an

1509
00:57:30,160 --> 00:57:32,240
extension degree which is composite

1510
00:57:32,240 --> 00:57:34,640
meaning that the end at the end sorry in

1511
00:57:34,640 --> 00:57:37,520
fpn is going to be of the form eta times

1512
00:57:37,520 --> 00:57:39,040
kappa

1513
00:57:39,040 --> 00:57:40,880
now why is this important this is

1514
00:57:40,880 --> 00:57:43,119
because it highly motivated uh the

1515
00:57:43,119 --> 00:57:44,960
reason why we chose this variant to

1516
00:57:44,960 --> 00:57:46,160
implement

1517
00:57:46,160 --> 00:57:46,960
so

1518
00:57:46,960 --> 00:57:49,359
the reason why we focus on xtnfs is it

1519
00:57:49,359 --> 00:57:51,760
is a very promising candidate to attack

1520
00:57:51,760 --> 00:57:54,319
finite fields of medium characteristics

1521
00:57:54,319 --> 00:57:56,000
so the table that is presented here on

1522
00:57:56,000 --> 00:57:57,839
the slide shows the asymptotic

1523
00:57:57,839 --> 00:58:00,400
complexities of many of the variants of

1524
00:58:00,400 --> 00:58:03,520
nfs in medium and large characteristics

1525
00:58:03,520 --> 00:58:05,040
so all the complexities of these

1526
00:58:05,040 --> 00:58:06,799
algorithms as i mentioned before can be

1527
00:58:06,799 --> 00:58:09,280
expressed using the l notation and for

1528
00:58:09,280 --> 00:58:11,920
all these algorithms the alpha variable

1529
00:58:11,920 --> 00:58:13,599
of the l notation is going to be equal

1530
00:58:13,599 --> 00:58:15,680
to one third so it's the same constant

1531
00:58:15,680 --> 00:58:17,359
it's the same alpha value for all the

1532
00:58:17,359 --> 00:58:19,440
for all these algorithms on the other

1533
00:58:19,440 --> 00:58:21,680
hand the constant c varies a lot

1534
00:58:21,680 --> 00:58:22,799
depending on the variant we're

1535
00:58:22,799 --> 00:58:23,920
considering

1536
00:58:23,920 --> 00:58:26,000
and one can see from the table that for

1537
00:58:26,000 --> 00:58:28,400
x t and f s in medium characteristic

1538
00:58:28,400 --> 00:58:30,480
this constant c so the numbers reported

1539
00:58:30,480 --> 00:58:34,000
here correspond to c is 48 whereas if we

1540
00:58:34,000 --> 00:58:35,599
look at the very first line of the table

1541
00:58:35,599 --> 00:58:37,760
which is just a classical nfs the

1542
00:58:37,760 --> 00:58:41,040
constant c is 96 so quite uh quite

1543
00:58:41,040 --> 00:58:42,960
higher

1544
00:58:42,960 --> 00:58:45,839
now why we are motivated why intuitively

1545
00:58:45,839 --> 00:58:47,760
can we think that xtnfs will perform

1546
00:58:47,760 --> 00:58:49,599
well in a medium characteristic well

1547
00:58:49,599 --> 00:58:52,240
this can be seen by looking at the form

1548
00:58:52,240 --> 00:58:54,640
of the finite field we're looking at so

1549
00:58:54,640 --> 00:58:57,520
we're considering fpn and because n is

1550
00:58:57,520 --> 00:58:58,640
composite

1551
00:58:58,640 --> 00:59:01,680
fpn is equal to fp to the eight attempts

1552
00:59:01,680 --> 00:59:02,640
kappa

1553
00:59:02,640 --> 00:59:04,400
now this number field

1554
00:59:04,400 --> 00:59:06,559
this finite field sorry can be seen

1555
00:59:06,559 --> 00:59:09,599
similarly as a finite field f capital p

1556
00:59:09,599 --> 00:59:10,880
to the kappa

1557
00:59:10,880 --> 00:59:13,040
where capital p would be of the same bit

1558
00:59:13,040 --> 00:59:15,760
size of p to the eta so basically what

1559
00:59:15,760 --> 00:59:17,920
i'm doing is here i'm just simply

1560
00:59:17,920 --> 00:59:20,799
thinking of fpn as a finite field where

1561
00:59:20,799 --> 00:59:22,880
i have increased

1562
00:59:22,880 --> 00:59:25,760
the characteristics so capital p is p to

1563
00:59:25,760 --> 00:59:27,119
the eta

1564
00:59:27,119 --> 00:59:29,119
and i have decreased the extension

1565
00:59:29,119 --> 00:59:31,760
degree so from n to kappa and this

1566
00:59:31,760 --> 00:59:34,400
intrinsically means that looking at x t

1567
00:59:34,400 --> 00:59:37,040
and fs in medium characteristic can kind

1568
00:59:37,040 --> 00:59:39,440
of be seen as computing nfs at the

1569
00:59:39,440 --> 00:59:41,359
second boundary case so we're getting

1570
00:59:41,359 --> 00:59:43,680
closer to the large characteristic case

1571
00:59:43,680 --> 00:59:45,280
where we can see that the constant

1572
00:59:45,280 --> 00:59:49,200
becomes 48 so the complexity of nfs kind

1573
00:59:49,200 --> 00:59:50,960
of like decreases between medium

1574
00:59:50,960 --> 00:59:52,559
characteristic and the second boundary

1575
00:59:52,559 --> 00:59:53,839
case

1576
00:59:53,839 --> 00:59:55,359
so this was kind of our motivation we

1577
00:59:55,359 --> 00:59:56,799
focused on this variant it had never

1578
00:59:56,799 --> 00:59:58,559
been implemented before and it seemed

1579
00:59:58,559 --> 01:00:01,440
like a very promising candidate

1580
01:00:01,440 --> 01:00:04,160
now in order to actually implement xtnfs

1581
01:00:04,160 --> 01:00:06,240
and to perform a record computation we

1582
01:00:06,240 --> 01:00:08,160
had to focus on the first step of the

1583
01:00:08,160 --> 01:00:10,480
algorithm which is collecting algebraic

1584
01:00:10,480 --> 01:00:12,640
relations

1585
01:00:12,640 --> 01:00:14,799
so why did we have to focus on this step

1586
01:00:14,799 --> 01:00:16,799
first of all collecting relations is

1587
01:00:16,799 --> 01:00:19,119
often even in nfs the most costly uh

1588
01:00:19,119 --> 01:00:21,599
step of uh the algorithm

1589
01:00:21,599 --> 01:00:24,240
and in xdnfs as i will explain just now

1590
01:00:24,240 --> 01:00:26,480
this does not happen in dimension 2 as

1591
01:00:26,480 --> 01:00:28,400
it would happen for nfs for example

1592
01:00:28,400 --> 01:00:29,839
but this relation collection actually

1593
01:00:29,839 --> 01:00:32,880
happens in higher dimension which uh

1594
01:00:32,880 --> 01:00:34,960
brings forth some difficulties some

1595
01:00:34,960 --> 01:00:37,440
problems

1596
01:00:37,520 --> 01:00:42,200
so let me focus on the first

1597
01:00:47,280 --> 01:00:50,880
we seem again to have audio problems

1598
01:00:50,880 --> 01:00:51,680
so

1599
01:00:51,680 --> 01:00:56,279
gabriel we can't hear you anymore

1600
01:00:56,799 --> 01:00:59,119
you may want to turn off your camera

1601
01:00:59,119 --> 01:01:02,920
that may help the bandwidth

1602
01:01:15,839 --> 01:01:17,760
thanks everybody for bearing with us

1603
01:01:17,760 --> 01:01:20,480
clearly we're uh having a

1604
01:01:20,480 --> 01:01:22,400
big struggle tonight

1605
01:01:22,400 --> 01:01:26,000
this step of uh the algorithm

1606
01:01:31,680 --> 01:01:34,640
i'm back i don't know if i should

1607
01:01:34,640 --> 01:01:36,559
welcome back you can you should still be

1608
01:01:36,559 --> 01:01:38,640
able to share in everything yes yeah

1609
01:01:38,640 --> 01:01:40,640
sorry about that at least it was quite

1610
01:01:40,640 --> 01:01:43,200
quick i think but

1611
01:01:43,200 --> 01:01:44,720
all right you may want to turn off your

1612
01:01:44,720 --> 01:01:47,280
camera to save bandwidth uh yeah i can

1613
01:01:47,280 --> 01:01:50,760
do this yes

1614
01:01:50,839 --> 01:01:55,280
um where do i turn off the camera

1615
01:01:55,280 --> 01:01:57,520
wait sorry

1616
01:01:57,520 --> 01:01:58,880
stop video

1617
01:01:58,880 --> 01:02:01,039
okay

1618
01:02:01,039 --> 01:02:02,640
is that better i mean can you at least

1619
01:02:02,640 --> 01:02:04,079
hear me

1620
01:02:04,079 --> 01:02:06,400
yes yes we can great

1621
01:02:06,400 --> 01:02:09,119
so going back to uh tnfs where we are

1622
01:02:09,119 --> 01:02:11,520
specifically focusing on the parameters

1623
01:02:11,520 --> 01:02:13,520
of our record computation

1624
01:02:13,520 --> 01:02:15,119
so if you have already seen the number

1625
01:02:15,119 --> 01:02:16,960
filthy algorithm you have probably

1626
01:02:16,960 --> 01:02:19,039
already seen a diagram such as this one

1627
01:02:19,039 --> 01:02:20,880
which is a commutative diagram which

1628
01:02:20,880 --> 01:02:23,440
allows us to create these relations

1629
01:02:23,440 --> 01:02:25,440
so at the very top of my diagram i have

1630
01:02:25,440 --> 01:02:28,160
a polynomial ring rx where r in the

1631
01:02:28,160 --> 01:02:30,160
specific case of tnfs is going to be

1632
01:02:30,160 --> 01:02:32,960
zeroed quotiented by this polynomial h

1633
01:02:32,960 --> 01:02:34,559
that i mentioned just think of it of a

1634
01:02:34,559 --> 01:02:37,440
degree 3 polynomial in yota

1635
01:02:37,440 --> 01:02:40,240
now elements of rx are then

1636
01:02:40,240 --> 01:02:42,559
sorry are then going to be mapped to two

1637
01:02:42,559 --> 01:02:45,520
intermediate number fields k1 and k2

1638
01:02:45,520 --> 01:02:48,000
these number fields are characterized by

1639
01:02:48,000 --> 01:02:50,400
two polynomials in my example on the

1640
01:02:50,400 --> 01:02:52,559
left we have x four plus one on the

1641
01:02:52,559 --> 01:02:54,960
right we have a polynomial a x two plus

1642
01:02:54,960 --> 01:02:57,440
b x plus c these polynomials are

1643
01:02:57,440 --> 01:02:59,599
specifically chosen in order to be

1644
01:02:59,599 --> 01:03:02,160
optimized for the algorithm both for uh

1645
01:03:02,160 --> 01:03:04,160
the community commutativity of the

1646
01:03:04,160 --> 01:03:06,480
diagram and also in order to produce as

1647
01:03:06,480 --> 01:03:09,119
many relations as possible

1648
01:03:09,119 --> 01:03:10,640
and then the end elements are going to

1649
01:03:10,640 --> 01:03:12,640
be mapped into the very bottom of my

1650
01:03:12,640 --> 01:03:16,160
diagram which is my finite field fb6 now

1651
01:03:16,160 --> 01:03:18,559
as i just mentioned this diagram is

1652
01:03:18,559 --> 01:03:20,480
commutative meaning that we have two

1653
01:03:20,480 --> 01:03:22,559
different paths going through the number

1654
01:03:22,559 --> 01:03:25,200
field k1 and the number field k2 which

1655
01:03:25,200 --> 01:03:27,280
are going to bring the elements of the

1656
01:03:27,280 --> 01:03:29,839
polynomial ring rx down to my target

1657
01:03:29,839 --> 01:03:32,720
finite field fp6

1658
01:03:32,720 --> 01:03:35,039
now let me go into slightly more details

1659
01:03:35,039 --> 01:03:37,760
in what is exactly a relation in tnfs

1660
01:03:37,760 --> 01:03:39,520
which will be useful for me to describe

1661
01:03:39,520 --> 01:03:42,319
the rest of the enumeration algorithm

1662
01:03:42,319 --> 01:03:44,720
well elements of rx at the top of my

1663
01:03:44,720 --> 01:03:47,200
diagrams are going to be polynomials in

1664
01:03:47,200 --> 01:03:49,920
yota and x of the form a yota minus b

1665
01:03:49,920 --> 01:03:51,359
yota x

1666
01:03:51,359 --> 01:03:53,280
as i just mentioned before these

1667
01:03:53,280 --> 01:03:55,520
elements are mapped to two intermediate

1668
01:03:55,520 --> 01:03:57,839
number fields so just looking at the

1669
01:03:57,839 --> 01:04:01,119
left side for k1 these elements phi the

1670
01:04:01,119 --> 01:04:03,520
polynomial phi is evaluated in the root

1671
01:04:03,520 --> 01:04:06,559
of x four plus one so alpha one so i

1672
01:04:06,559 --> 01:04:08,079
have a uh

1673
01:04:08,079 --> 01:04:10,720
a yota minus b go to alpha one

1674
01:04:10,720 --> 01:04:13,440
and now uh in these intermediate number

1675
01:04:13,440 --> 01:04:15,520
fields one needs to check for something

1676
01:04:15,520 --> 01:04:18,160
which is called base b smoothness so b

1677
01:04:18,160 --> 01:04:20,319
is a parameter of the algorithm

1678
01:04:20,319 --> 01:04:23,280
and one is going to look at the norm of

1679
01:04:23,280 --> 01:04:26,160
phi of yota alpha one seen as an ideal

1680
01:04:26,160 --> 01:04:28,960
and check if that norm decomposes into

1681
01:04:28,960 --> 01:04:31,760
prime factors that are all smaller than

1682
01:04:31,760 --> 01:04:32,480
b

1683
01:04:32,480 --> 01:04:34,400
if this is the case then we say that the

1684
01:04:34,400 --> 01:04:36,640
norm is b smooth

1685
01:04:36,640 --> 01:04:40,000
now if this is the case on both sides k1

1686
01:04:40,000 --> 01:04:43,200
and k2 so if the element phi evaluated

1687
01:04:43,200 --> 01:04:45,760
in alpha 1 alpha 2 taking its norm

1688
01:04:45,760 --> 01:04:47,440
decomposes into these prime factors

1689
01:04:47,440 --> 01:04:48,799
smaller than b

1690
01:04:48,799 --> 01:04:51,680
then these elements are mapped down to

1691
01:04:51,680 --> 01:04:54,559
the bottom target finite field fp6 and

1692
01:04:54,559 --> 01:04:56,880
the equality that we have in this finite

1693
01:04:56,880 --> 01:04:59,039
field corresponds to what we call a

1694
01:04:59,039 --> 01:05:00,559
relation

1695
01:05:00,559 --> 01:05:01,280
so

1696
01:05:01,280 --> 01:05:03,200
these relations are product of prime

1697
01:05:03,200 --> 01:05:05,440
ideals and the factor basis that i

1698
01:05:05,440 --> 01:05:07,200
actually mentioned in the very beginning

1699
01:05:07,200 --> 01:05:09,119
is going to be a small set of small

1700
01:05:09,119 --> 01:05:11,119
elements where these small elements are

1701
01:05:11,119 --> 01:05:14,000
prime ideals of small norm

1702
01:05:14,000 --> 01:05:16,160
so this is how we create a relation in

1703
01:05:16,160 --> 01:05:18,240
tnfx which is actually very similar as

1704
01:05:18,240 --> 01:05:20,160
to how we how we create a relation in

1705
01:05:20,160 --> 01:05:22,960
nfs with the added algebraic structure

1706
01:05:22,960 --> 01:05:26,720
coming from the tower of number fields

1707
01:05:26,799 --> 01:05:28,799
now i will focus on how did we actually

1708
01:05:28,799 --> 01:05:30,240
collect relations i showed you the

1709
01:05:30,240 --> 01:05:32,079
general idea but how do we actually

1710
01:05:32,079 --> 01:05:33,760
efficiently find enough of these

1711
01:05:33,760 --> 01:05:36,480
relations so enough of these equations

1712
01:05:36,480 --> 01:05:38,319
in fp6

1713
01:05:38,319 --> 01:05:39,920
so recall that at the very top of my

1714
01:05:39,920 --> 01:05:41,680
diagram the elements that i'm

1715
01:05:41,680 --> 01:05:44,319
considering are polynomial a yota minus

1716
01:05:44,319 --> 01:05:47,760
b x and so relation collection actually

1717
01:05:47,760 --> 01:05:49,599
narrows down to looking for a set of

1718
01:05:49,599 --> 01:05:51,440
linear polynomials of this form

1719
01:05:51,440 --> 01:05:53,280
satisfying the two following conditions

1720
01:05:53,280 --> 01:05:55,920
first we want bounded coefficients and

1721
01:05:55,920 --> 01:05:58,640
importantly we want the norms on both

1722
01:05:58,640 --> 01:06:01,440
sides to be be smooth

1723
01:06:01,440 --> 01:06:03,440
so more precisely in the context of our

1724
01:06:03,440 --> 01:06:06,240
record computation a utah and b yota are

1725
01:06:06,240 --> 01:06:08,079
degree two polynomials

1726
01:06:08,079 --> 01:06:09,599
and so what we're going to be looking

1727
01:06:09,599 --> 01:06:12,319
for are going to be vectors in z six so

1728
01:06:12,319 --> 01:06:14,079
why do we have six coefficients three

1729
01:06:14,079 --> 01:06:16,079
for the polynomial a and three for the

1730
01:06:16,079 --> 01:06:17,839
polynomial b so we're going to be

1731
01:06:17,839 --> 01:06:19,760
looking for these vectors c

1732
01:06:19,760 --> 01:06:21,359
such that

1733
01:06:21,359 --> 01:06:23,440
we have bounded coefficients this means

1734
01:06:23,440 --> 01:06:25,119
that we're looking for a vector c

1735
01:06:25,119 --> 01:06:27,359
belonging to a region which is usually

1736
01:06:27,359 --> 01:06:29,440
known as a sieving region

1737
01:06:29,440 --> 01:06:32,240
and we want these norms to be b smooth

1738
01:06:32,240 --> 01:06:34,720
and meaning that we want the vector c to

1739
01:06:34,720 --> 01:06:36,480
belong to the intersection of some

1740
01:06:36,480 --> 01:06:38,799
suitably constructed lattices l which i

1741
01:06:38,799 --> 01:06:41,440
will talk about just in a bit

1742
01:06:41,440 --> 01:06:43,359
so this is the goal of an uh of a

1743
01:06:43,359 --> 01:06:45,280
collection relation the first step at

1744
01:06:45,280 --> 01:06:48,720
least looking for these vectors c

1745
01:06:48,720 --> 01:06:50,319
so we have narrowed down our goal to

1746
01:06:50,319 --> 01:06:52,400
finding this vector at the intersection

1747
01:06:52,400 --> 01:06:54,960
of a space a sieving space and a lattice

1748
01:06:54,960 --> 01:06:57,119
l not yet defined

1749
01:06:57,119 --> 01:06:59,200
so what is the dimension of the space s

1750
01:06:59,200 --> 01:07:01,760
so the particularity of xt and fs and

1751
01:07:01,760 --> 01:07:04,000
the record computation that we did is

1752
01:07:04,000 --> 01:07:06,400
that the dimension here is um is six

1753
01:07:06,400 --> 01:07:07,839
right as i mentioned we have six

1754
01:07:07,839 --> 01:07:10,720
coefficients three for a three for b

1755
01:07:10,720 --> 01:07:12,000
this uh

1756
01:07:12,000 --> 01:07:14,319
is quite different from previous work if

1757
01:07:14,319 --> 01:07:16,400
we look at the classical nfs algorithm

1758
01:07:16,400 --> 01:07:17,920
for example sieving will happen in

1759
01:07:17,920 --> 01:07:20,079
dimension two because we are looking for

1760
01:07:20,079 --> 01:07:22,559
pair a b where a b are integers whereas

1761
01:07:22,559 --> 01:07:25,520
we are considering polynomials a yota b

1762
01:07:25,520 --> 01:07:27,599
and to efficiently sieve in dimension 2

1763
01:07:27,599 --> 01:07:29,680
for nfs we have an algorithm from

1764
01:07:29,680 --> 01:07:32,240
franklin cliniums which efficiently does

1765
01:07:32,240 --> 01:07:33,280
that

1766
01:07:33,280 --> 01:07:35,440
now in the context of nfs though the

1767
01:07:35,440 --> 01:07:37,839
classical nfs it is also possible to

1768
01:07:37,839 --> 01:07:40,400
sieve in higher dimension and some work

1769
01:07:40,400 --> 01:07:42,480
in that direction was done by luhan remy

1770
01:07:42,480 --> 01:07:44,160
and more recently by mcguire and

1771
01:07:44,160 --> 01:07:45,440
robinson

1772
01:07:45,440 --> 01:07:46,400
and

1773
01:07:46,400 --> 01:07:48,240
in all of these algorithms so for

1774
01:07:48,240 --> 01:07:50,400
dimension 2 and for higher dimensions

1775
01:07:50,400 --> 01:07:52,799
these algorithms consider as a sitting

1776
01:07:52,799 --> 01:07:55,119
area a d rectangle whereas

1777
01:07:55,119 --> 01:07:57,440
it is just a rectangle or a cube in

1778
01:07:57,440 --> 01:07:59,839
dimension three for example

1779
01:07:59,839 --> 01:08:02,160
and so in our work again we differ from

1780
01:08:02,160 --> 01:08:03,760
that in the sense that we are not going

1781
01:08:03,760 --> 01:08:05,359
to look at a d rectangle but we are

1782
01:08:05,359 --> 01:08:07,520
going to consider a six dimensional

1783
01:08:07,520 --> 01:08:10,000
sphere so we are considering the l2 norm

1784
01:08:10,000 --> 01:08:13,599
instead of considering the l1 norm

1785
01:08:13,760 --> 01:08:16,560
so my area s here is going to be the six

1786
01:08:16,560 --> 01:08:18,080
dimensional sphere

1787
01:08:18,080 --> 01:08:20,080
now the other side of uh what i'm

1788
01:08:20,080 --> 01:08:22,080
looking for is this lattice l so

1789
01:08:22,080 --> 01:08:23,920
concretely what is what does this

1790
01:08:23,920 --> 01:08:25,600
lattice l represent

1791
01:08:25,600 --> 01:08:27,520
well l is a lattice that is going to

1792
01:08:27,520 --> 01:08:30,399
describe the divisibility of some ideals

1793
01:08:30,399 --> 01:08:32,719
by first an ideal cue which is known as

1794
01:08:32,719 --> 01:08:34,799
a special q ideal this is

1795
01:08:34,799 --> 01:08:36,560
important for the algorithm but not so

1796
01:08:36,560 --> 01:08:39,679
much important here and a prime ideal p

1797
01:08:39,679 --> 01:08:42,319
in the intermediate number field

1798
01:08:42,319 --> 01:08:44,000
and so what is going to be the output of

1799
01:08:44,000 --> 01:08:46,399
enumeration so a vector c that is going

1800
01:08:46,399 --> 01:08:49,198
to belong to s intersect l is going to

1801
01:08:49,198 --> 01:08:51,439
be a vector that is going to correspond

1802
01:08:51,439 --> 01:08:54,238
to an a b pair a b being polynomials

1803
01:08:54,238 --> 01:08:57,120
whose norms are going to be divisible by

1804
01:08:57,120 --> 01:08:58,719
the norm of the

1805
01:08:58,719 --> 01:09:01,679
special ideal q and the norm of b so

1806
01:09:01,679 --> 01:09:03,920
these lattices l are constructed such

1807
01:09:03,920 --> 01:09:05,359
that the output

1808
01:09:05,359 --> 01:09:08,000
elements of these lattices are indeed

1809
01:09:08,000 --> 01:09:09,759
elements divisible by the norm of the

1810
01:09:09,759 --> 01:09:11,759
prime ideal p

1811
01:09:11,759 --> 01:09:13,920
now i talked about intersection of

1812
01:09:13,920 --> 01:09:16,000
suitably lattices suitably constructed

1813
01:09:16,000 --> 01:09:17,600
lattices also not just the single

1814
01:09:17,600 --> 01:09:19,600
lattice but many lattices because of

1815
01:09:19,600 --> 01:09:21,920
course for each lattice we have a

1816
01:09:21,920 --> 01:09:25,198
primary dlp and we want uh we want to

1817
01:09:25,198 --> 01:09:27,120
find vectors in the intersection for

1818
01:09:27,120 --> 01:09:29,359
many many different prime ideals why is

1819
01:09:29,359 --> 01:09:32,319
that because if we are divisible by many

1820
01:09:32,319 --> 01:09:34,319
uh norms of prime ideals then we have a

1821
01:09:34,319 --> 01:09:36,640
higher probability of being b smooth

1822
01:09:36,640 --> 01:09:38,560
recalling that being b smooth means that

1823
01:09:38,560 --> 01:09:39,679
the

1824
01:09:39,679 --> 01:09:42,560
the norm of my ideal decomposes into

1825
01:09:42,560 --> 01:09:44,640
prime into factors that are all smaller

1826
01:09:44,640 --> 01:09:46,960
than b

1827
01:09:47,120 --> 01:09:49,679
so we want to find vectors that are at

1828
01:09:49,679 --> 01:09:51,920
the intersection of a lattice and a

1829
01:09:51,920 --> 01:09:54,480
sphere and of course we looked into uh

1830
01:09:54,480 --> 01:09:56,480
the lattice world to find uh efficient

1831
01:09:56,480 --> 01:09:59,440
algorithms to do that and we focus on uh

1832
01:09:59,440 --> 01:10:01,440
schnozhner's enumeration algorithm which

1833
01:10:01,440 --> 01:10:04,080
is uh from the 90s

1834
01:10:04,080 --> 01:10:06,000
so the input of snorer's enumeration

1835
01:10:06,000 --> 01:10:08,400
algorithm is a lattice basis and its

1836
01:10:08,400 --> 01:10:10,320
output is the shortest non-zero lattice

1837
01:10:10,320 --> 01:10:13,280
vector um the non-zero lattice vector

1838
01:10:13,280 --> 01:10:15,120
and the idea of store is enumeration

1839
01:10:15,120 --> 01:10:17,280
algorithm very briefly here is to

1840
01:10:17,280 --> 01:10:19,280
construct an enumeration tree

1841
01:10:19,280 --> 01:10:21,520
considering different projections of the

1842
01:10:21,520 --> 01:10:23,520
lattice for each level of the tree and

1843
01:10:23,520 --> 01:10:25,040
then at each level the tree it

1844
01:10:25,040 --> 01:10:27,280
enumerates in an interval and then in

1845
01:10:27,280 --> 01:10:28,800
order to find the shortest non-zero

1846
01:10:28,800 --> 01:10:30,400
lattice vector there's a depth-first

1847
01:10:30,400 --> 01:10:32,000
search in the tree that is done at the

1848
01:10:32,000 --> 01:10:33,760
end of the algorithm

1849
01:10:33,760 --> 01:10:35,520
now in our case the setup is slightly

1850
01:10:35,520 --> 01:10:37,520
different first of all the input well

1851
01:10:37,520 --> 01:10:39,199
the input is still a lot of spaces in

1852
01:10:39,199 --> 01:10:41,040
our particular case we're considering

1853
01:10:41,040 --> 01:10:42,560
lattices of dimension six so

1854
01:10:42,560 --> 01:10:44,480
ridiculously small compared to what is

1855
01:10:44,480 --> 01:10:47,440
uh considered in the lot of space world

1856
01:10:47,440 --> 01:10:49,199
and the output is also a bit different

1857
01:10:49,199 --> 01:10:50,800
we don't care about the shortest

1858
01:10:50,800 --> 01:10:52,800
non-zero vector of the lattice we care

1859
01:10:52,800 --> 01:10:55,040
about all the vectors c such that the

1860
01:10:55,040 --> 01:10:57,679
norm of c is smaller than r and r here

1861
01:10:57,679 --> 01:10:59,440
is the radius of our six-dimensional

1862
01:10:59,440 --> 01:11:01,120
sphere so recall we want the

1863
01:11:01,120 --> 01:11:03,360
intersection of l and our sphere

1864
01:11:03,360 --> 01:11:06,159
but the idea is very similar we uh

1865
01:11:06,159 --> 01:11:07,600
highly um

1866
01:11:07,600 --> 01:11:10,000
we did not modify snorkel's an immersion

1867
01:11:10,000 --> 01:11:12,480
algorithm by a lot so we also construct

1868
01:11:12,480 --> 01:11:14,640
an enumeration tree consider projections

1869
01:11:14,640 --> 01:11:16,560
of the lattice and then we exhaustively

1870
01:11:16,560 --> 01:11:19,199
search for all the coefficients vi such

1871
01:11:19,199 --> 01:11:21,840
that the vector c will have norm smaller

1872
01:11:21,840 --> 01:11:23,040
than r

1873
01:11:23,040 --> 01:11:25,760
so apart from our output condition the

1874
01:11:25,760 --> 01:11:27,280
algorithm is essentially

1875
01:11:27,280 --> 01:11:30,560
schnorr-ishner's enumeration algorithm

1876
01:11:30,560 --> 01:11:32,320
now as i mentioned we

1877
01:11:32,320 --> 01:11:34,159
modify this nicely because we do not

1878
01:11:34,159 --> 01:11:36,800
want the shortest vector and also we

1879
01:11:36,800 --> 01:11:38,800
were able to optimize the computation of

1880
01:11:38,800 --> 01:11:41,199
the vector c by reducing the number of

1881
01:11:41,199 --> 01:11:43,600
computations so we kept a common part

1882
01:11:43,600 --> 01:11:45,280
which was not

1883
01:11:45,280 --> 01:11:47,280
from which for which the computation was

1884
01:11:47,280 --> 01:11:49,280
not repeated throughout the algorithm so

1885
01:11:49,280 --> 01:11:50,640
this seems like a very small

1886
01:11:50,640 --> 01:11:52,880
optimization it's a trivial optimization

1887
01:11:52,880 --> 01:11:54,960
in the code but because

1888
01:11:54,960 --> 01:11:57,679
enumeration in this in the in tnfs is

1889
01:11:57,679 --> 01:12:00,800
done many many many times this small

1890
01:12:00,800 --> 01:12:02,880
optimization actually gave us a 10

1891
01:12:02,880 --> 01:12:04,480
improvement in our total saving time

1892
01:12:04,480 --> 01:12:08,880
which is really not negligible

1893
01:12:08,880 --> 01:12:10,960
so now let us take a step back and look

1894
01:12:10,960 --> 01:12:12,800
at relation collection altogether

1895
01:12:12,800 --> 01:12:14,400
because actually enumeration is just

1896
01:12:14,400 --> 01:12:16,560
kind of the first step of this relation

1897
01:12:16,560 --> 01:12:17,679
collection

1898
01:12:17,679 --> 01:12:20,159
so first we start with sieving which in

1899
01:12:20,159 --> 01:12:21,760
our case in our particular case is

1900
01:12:21,760 --> 01:12:24,560
enumeration so we have all these pair a

1901
01:12:24,560 --> 01:12:27,360
b and we find a b pairs at the

1902
01:12:27,360 --> 01:12:30,560
intersection of our sphere

1903
01:12:30,560 --> 01:12:32,880
and many lattices lp

1904
01:12:32,880 --> 01:12:35,360
now this gives us potential relations

1905
01:12:35,360 --> 01:12:37,360
meaning we have a b pair with a high

1906
01:12:37,360 --> 01:12:39,360
probability of being b smooth but we

1907
01:12:39,360 --> 01:12:42,000
have not yet tested for b smoothness we

1908
01:12:42,000 --> 01:12:44,640
just have potential candidates

1909
01:12:44,640 --> 01:12:46,640
now these potential candidates which we

1910
01:12:46,640 --> 01:12:48,400
usually call survivors

1911
01:12:48,400 --> 01:12:51,360
are given as input to algorithms which

1912
01:12:51,360 --> 01:12:53,360
are actually going to test b smoothness

1913
01:12:53,360 --> 01:12:54,159
uh

1914
01:12:54,159 --> 01:12:55,760
for these uh survivors for these

1915
01:12:55,760 --> 01:12:57,679
candidates but because these algorithms

1916
01:12:57,679 --> 01:13:00,159
usually quite expensive such as batch or

1917
01:13:00,159 --> 01:13:02,640
ecm algorithms then we want to use them

1918
01:13:02,640 --> 01:13:04,880
on a smaller subset we don't use this

1919
01:13:04,880 --> 01:13:07,120
algorithm on the entire a b

1920
01:13:07,120 --> 01:13:08,400
set

1921
01:13:08,400 --> 01:13:10,159
before enumeration

1922
01:13:10,159 --> 01:13:12,960
and now the output of batch and ecm are

1923
01:13:12,960 --> 01:13:15,600
going to be wb smooth elements which are

1924
01:13:15,600 --> 01:13:17,199
going to correspond to the relations we

1925
01:13:17,199 --> 01:13:19,600
were looking for

1926
01:13:19,600 --> 01:13:21,360
now this is an overview of the entire

1927
01:13:21,360 --> 01:13:23,360
relation collection uh there are some

1928
01:13:23,360 --> 01:13:25,600
things that i am not going to talk in

1929
01:13:25,600 --> 01:13:27,679
this talk because it's um we do not have

1930
01:13:27,679 --> 01:13:29,760
enough time but one important thing that

1931
01:13:29,760 --> 01:13:32,080
we have to consider is

1932
01:13:32,080 --> 01:13:33,840
the identification and the removal of

1933
01:13:33,840 --> 01:13:36,159
duplicate relations so duplicate

1934
01:13:36,159 --> 01:13:37,920
relations are going to correspond to a b

1935
01:13:37,920 --> 01:13:39,360
pairs that are going to basically

1936
01:13:39,360 --> 01:13:41,679
provide the same information so it is

1937
01:13:41,679 --> 01:13:44,480
pointless to keep two of these a b pairs

1938
01:13:44,480 --> 01:13:46,159
because they do not provide any extra

1939
01:13:46,159 --> 01:13:48,560
information and identifying and remove

1940
01:13:48,560 --> 01:13:49,360
them

1941
01:13:49,360 --> 01:13:51,360
is something that was actually quite new

1942
01:13:51,360 --> 01:13:54,000
for tnfs duplicate relations exist in

1943
01:13:54,000 --> 01:13:56,560
the setup of nfs but because again of

1944
01:13:56,560 --> 01:13:59,920
the added algebraic structure in tnfs

1945
01:13:59,920 --> 01:14:01,440
we had to

1946
01:14:01,440 --> 01:14:03,840
deal with new forms of duplicates and

1947
01:14:03,840 --> 01:14:05,760
all the mathematical details are in the

1948
01:14:05,760 --> 01:14:08,000
paper

1949
01:14:08,000 --> 01:14:09,840
so now um

1950
01:14:09,840 --> 01:14:11,920
so we focus we've worked a lot on this

1951
01:14:11,920 --> 01:14:14,239
enumeration algorithm on the whole

1952
01:14:14,239 --> 01:14:16,080
relation collection process

1953
01:14:16,080 --> 01:14:18,719
so what did we need in order to what did

1954
01:14:18,719 --> 01:14:20,480
we need for a record computation so to

1955
01:14:20,480 --> 01:14:22,880
kind of summarize a bit where we're at

1956
01:14:22,880 --> 01:14:25,199
we focused on a fast saving algorithm in

1957
01:14:25,199 --> 01:14:26,560
dimension higher than two so in

1958
01:14:26,560 --> 01:14:28,640
particular in our work we're looking at

1959
01:14:28,640 --> 01:14:30,159
dimension six

1960
01:14:30,159 --> 01:14:32,640
then uh we had to identify and remove

1961
01:14:32,640 --> 01:14:35,040
duplicate relations as i just explained

1962
01:14:35,040 --> 01:14:37,440
there are some other aspects of nfs

1963
01:14:37,440 --> 01:14:39,520
which had to be adapted to the tower

1964
01:14:39,520 --> 01:14:41,760
setup so in particular adapting sheer

1965
01:14:41,760 --> 01:14:43,520
kara maps this is a

1966
01:14:43,520 --> 01:14:46,080
particular element of nfs algorithms

1967
01:14:46,080 --> 01:14:48,239
which also occur in tnfs but in a

1968
01:14:48,239 --> 01:14:49,760
slightly different way

1969
01:14:49,760 --> 01:14:51,440
and then we had to glue ourselves to

1970
01:14:51,440 --> 01:14:54,880
cado nfs so caddo nfs is a existing code

1971
01:14:54,880 --> 01:14:56,560
that is used for nfs a regular

1972
01:14:56,560 --> 01:14:59,120
computations and so all the parts of

1973
01:14:59,120 --> 01:15:02,400
tnfh which are basically identical to

1974
01:15:02,400 --> 01:15:04,320
nfs computations i'm thinking of the

1975
01:15:04,320 --> 01:15:05,840
parts that i have not talked about like

1976
01:15:05,840 --> 01:15:07,280
linear algebra for example or the

1977
01:15:07,280 --> 01:15:10,159
descent we did not uh code ourselves we

1978
01:15:10,159 --> 01:15:11,920
we branched ourselves to pre-existing

1979
01:15:11,920 --> 01:15:14,560
code so cado nfs

1980
01:15:14,560 --> 01:15:16,480
and we chose a nice target so as i

1981
01:15:16,480 --> 01:15:18,239
mentioned in the very beginning here uh

1982
01:15:18,239 --> 01:15:21,440
we considered sp6

1983
01:15:21,440 --> 01:15:23,560
and now this allowed us to perform a

1984
01:15:23,560 --> 01:15:27,760
521-bit record computation so kind of

1985
01:15:27,760 --> 01:15:31,040
situating our uh finite field in this uh

1986
01:15:31,040 --> 01:15:33,040
small medium large characteristics we

1987
01:15:33,040 --> 01:15:35,440
are in that uh close to our second

1988
01:15:35,440 --> 01:15:36,880
boundary case

1989
01:15:36,880 --> 01:15:41,360
where um we chose a prime of 87 bits

1990
01:15:41,360 --> 01:15:43,840
now our total uh computation took a

1991
01:15:43,840 --> 01:15:47,040
little less than 25 000 core hours and

1992
01:15:47,040 --> 01:15:48,960
one can see that the relation collection

1993
01:15:48,960 --> 01:15:51,600
phase on the little table uh clearly is

1994
01:15:51,600 --> 01:15:54,880
the longest um of the different steps of

1995
01:15:54,880 --> 01:15:56,880
the tnfs algorithm so we're

1996
01:15:56,880 --> 01:15:58,000
um

1997
01:15:58,000 --> 01:16:01,280
a little over 23 000 core hours for the

1998
01:16:01,280 --> 01:16:02,960
relation collection the other steps are

1999
01:16:02,960 --> 01:16:04,880
a lot less

2000
01:16:04,880 --> 01:16:07,440
and we were also able to compare our um

2001
01:16:07,440 --> 01:16:09,040
enumeration or our sieving time or

2002
01:16:09,040 --> 01:16:10,800
relation collection time with other

2003
01:16:10,800 --> 01:16:12,560
algorithms that also sieved in higher

2004
01:16:12,560 --> 01:16:14,800
dimensions in particular uh as i

2005
01:16:14,800 --> 01:16:16,080
mentioned there was the work of mcguire

2006
01:16:16,080 --> 01:16:18,000
and robinson and also the work of the

2007
01:16:18,000 --> 01:16:20,640
hong kong the algorithm of the me so

2008
01:16:20,640 --> 01:16:23,040
they uh focus on the nfs algorithm so

2009
01:16:23,040 --> 01:16:24,880
not exactly the same not the same

2010
01:16:24,880 --> 01:16:27,520
variant as ours and they also considered

2011
01:16:27,520 --> 01:16:29,199
uh fields that are much smaller than

2012
01:16:29,199 --> 01:16:33,760
ours so 422 423 whereas we

2013
01:16:33,760 --> 01:16:36,719
chose a finite field of the size 421

2014
01:16:36,719 --> 01:16:38,880
they saved in dimension 3 for their

2015
01:16:38,880 --> 01:16:40,400
computations whereas we saved in

2016
01:16:40,400 --> 01:16:42,800
dimension 6. but regardless of the fact

2017
01:16:42,800 --> 01:16:44,320
that we are sitting in a much higher

2018
01:16:44,320 --> 01:16:46,400
dimension our sieving time is

2019
01:16:46,400 --> 01:16:48,560
significantly uh smaller than theirs so

2020
01:16:48,560 --> 01:16:52,800
23 000 as opposed to 70 000 and 201 000.

2021
01:16:52,800 --> 01:16:54,480
so this we were very pleasantly

2022
01:16:54,480 --> 01:16:56,480
surprised about this and uh this kind of

2023
01:16:56,480 --> 01:16:58,960
comforted us in the choice of especially

2024
01:16:58,960 --> 01:17:00,800
the sieving area which differs a lot

2025
01:17:00,800 --> 01:17:03,120
from their choice so choosing a

2026
01:17:03,120 --> 01:17:05,360
sphere considering the l2 norm instead

2027
01:17:05,360 --> 01:17:07,760
of the l1 norm

2028
01:17:07,760 --> 01:17:10,159
and so um i should

2029
01:17:10,159 --> 01:17:12,159
probably finish by showing you uh our

2030
01:17:12,159 --> 01:17:14,560
results so the actual discrete logarithm

2031
01:17:14,560 --> 01:17:18,000
so again i we took a finite field fb6

2032
01:17:18,000 --> 01:17:21,120
a prime of 87 bits i'm

2033
01:17:21,120 --> 01:17:22,880
skipping a lot of mathematical details

2034
01:17:22,880 --> 01:17:24,640
here but uh you can see our target

2035
01:17:24,640 --> 01:17:26,800
element which we chose can probably

2036
01:17:26,800 --> 01:17:29,040
recognize the digits of pi

2037
01:17:29,040 --> 01:17:31,040
and then running the two the whole

2038
01:17:31,040 --> 01:17:32,560
algorithm so not only the relation

2039
01:17:32,560 --> 01:17:33,840
collection but then there's also a

2040
01:17:33,840 --> 01:17:35,360
linear algebra step

2041
01:17:35,360 --> 01:17:37,920
and as uh descent step allows us to

2042
01:17:37,920 --> 01:17:41,040
output uh the log of our target so this

2043
01:17:41,040 --> 01:17:43,440
uh this beautiful number

2044
01:17:43,440 --> 01:17:44,880
and so uh

2045
01:17:44,880 --> 01:17:46,640
thank you for your attention and this is

2046
01:17:46,640 --> 01:17:49,280
all for my talk

2047
01:17:49,280 --> 01:17:53,280
okay so thank you very much gabrielle

2048
01:17:53,280 --> 01:17:54,000
so

2049
01:17:54,000 --> 01:17:57,120
we have a question already in zulip by

2050
01:17:57,120 --> 01:17:59,440
auror d vic so

2051
01:17:59,440 --> 01:18:00,480
maybe

2052
01:18:00,480 --> 01:18:02,800
you want to unmute yourself and ask it

2053
01:18:02,800 --> 01:18:06,920
directly that would be great

2054
01:18:12,719 --> 01:18:15,360
no if you maybe you don't have a

2055
01:18:15,360 --> 01:18:18,560
mind yes do you do you hear me yes yes

2056
01:18:18,560 --> 01:18:19,920
we hear you

2057
01:18:19,920 --> 01:18:22,480
okay yes thank you for your talk on this

2058
01:18:22,480 --> 01:18:24,880
great result so my question is about how

2059
01:18:24,880 --> 01:18:28,080
does it scale for first for larger prime

2060
01:18:28,080 --> 01:18:28,800
p

2061
01:18:28,800 --> 01:18:31,440
and actually some cryptographer is

2062
01:18:31,440 --> 01:18:32,800
interested in

2063
01:18:32,800 --> 01:18:35,440
knowing which size of p is required to

2064
01:18:35,440 --> 01:18:36,199
get

2065
01:18:36,199 --> 01:18:40,640
128 bits of security in fp6

2066
01:18:40,640 --> 01:18:42,640
and the second

2067
01:18:42,640 --> 01:18:45,040
side is how does it scale for other

2068
01:18:45,040 --> 01:18:47,120
embedding degrees like your your

2069
01:18:47,120 --> 01:18:49,760
implementation works for fp6 what about

2070
01:18:49,760 --> 01:18:53,360
fp4 and fp12

2071
01:18:53,440 --> 01:18:56,880
uh yes so first scaling to larger p so

2072
01:18:56,880 --> 01:18:59,520
this is actually ongoing work uh with

2073
01:18:59,520 --> 01:19:01,840
pierre cancers so we're currently

2074
01:19:01,840 --> 01:19:03,760
looking at um

2075
01:19:03,760 --> 01:19:07,040
a bigger finite field of the size 708

2076
01:19:07,040 --> 01:19:08,640
bits

2077
01:19:08,640 --> 01:19:12,159
and so um so the choice of a 521 bit

2078
01:19:12,159 --> 01:19:14,800
finite field was a little conservative

2079
01:19:14,800 --> 01:19:16,159
in the sense that because we were trying

2080
01:19:16,159 --> 01:19:18,159
a new algorithm we did not want the

2081
01:19:18,159 --> 01:19:19,840
whole record computation to take many

2082
01:19:19,840 --> 01:19:21,440
many months which is the case for

2083
01:19:21,440 --> 01:19:24,080
example for the highest nfs record

2084
01:19:24,080 --> 01:19:25,760
computations for factoring and discrete

2085
01:19:25,760 --> 01:19:27,920
log so we purposely chose a finite field

2086
01:19:27,920 --> 01:19:29,120
where we

2087
01:19:29,120 --> 01:19:31,199
imagined that our record computation

2088
01:19:31,199 --> 01:19:33,440
would finish in reasonable time so if

2089
01:19:33,440 --> 01:19:35,840
there was a bug in the code we could

2090
01:19:35,840 --> 01:19:38,400
more easily fix it but we are working on

2091
01:19:38,400 --> 01:19:39,360
um

2092
01:19:39,360 --> 01:19:42,080
on larger uh extension on larger sorry

2093
01:19:42,080 --> 01:19:43,520
characteristic p

2094
01:19:43,520 --> 01:19:45,360
and the difficulty of course is that

2095
01:19:45,360 --> 01:19:47,440
sieving this also kind of goes to your

2096
01:19:47,440 --> 01:19:49,120
direct to your question with a different

2097
01:19:49,120 --> 01:19:51,199
extension degree

2098
01:19:51,199 --> 01:19:53,360
we can sieve in higher dimensions or in

2099
01:19:53,360 --> 01:19:54,800
smaller dimension if the extension

2100
01:19:54,800 --> 01:19:57,679
degree is four for example um we have to

2101
01:19:57,679 --> 01:19:59,440
see how our algorithm scales we are

2102
01:19:59,440 --> 01:20:01,920
hoping that if we sif in dimension eight

2103
01:20:01,920 --> 01:20:03,600
for example so from six to eight which

2104
01:20:03,600 --> 01:20:05,040
is uh what we are doing for our new

2105
01:20:05,040 --> 01:20:07,679
record computation the uh enumeration

2106
01:20:07,679 --> 01:20:10,000
still seems to be reasonable

2107
01:20:10,000 --> 01:20:12,159
but uh we will see once the record is

2108
01:20:12,159 --> 01:20:12,960
done

2109
01:20:12,960 --> 01:20:14,000
um

2110
01:20:14,000 --> 01:20:16,320
i guess it is a little uncertain to see

2111
01:20:16,320 --> 01:20:18,639
if uh we are starting to sieve in much

2112
01:20:18,639 --> 01:20:21,520
higher dimensions um if the enumeration

2113
01:20:21,520 --> 01:20:24,400
algorithm still is uh sufficiently good

2114
01:20:24,400 --> 01:20:26,480
uh to actually um

2115
01:20:26,480 --> 01:20:28,719
to actually allow for for

2116
01:20:28,719 --> 01:20:33,120
record computations in a reasonable time

2117
01:20:33,120 --> 01:20:34,639
uh was there another part of the

2118
01:20:34,639 --> 01:20:37,120
question that i didn't answer no no

2119
01:20:37,120 --> 01:20:39,120
thank you so the new records are on the

2120
01:20:39,120 --> 01:20:41,920
way thank you

2121
01:20:42,000 --> 01:20:43,600
i have a question

2122
01:20:43,600 --> 01:20:47,120
yes go on kevin um

2123
01:20:47,120 --> 01:20:48,719
do these civic techniques lend

2124
01:20:48,719 --> 01:20:50,639
themselves to other

2125
01:20:50,639 --> 01:20:55,360
uh cpu architectures such as gpus

2126
01:20:55,840 --> 01:20:58,560
oh wow that is not a question i seem to

2127
01:20:58,560 --> 01:21:00,400
be able to answer

2128
01:21:00,400 --> 01:21:02,320
um

2129
01:21:02,320 --> 01:21:04,320
because if you're going to scale up to a

2130
01:21:04,320 --> 01:21:06,080
really really large calculation you

2131
01:21:06,080 --> 01:21:07,840
might give yourself the flexibility to

2132
01:21:07,840 --> 01:21:08,719
have

2133
01:21:08,719 --> 01:21:10,560
you know

2134
01:21:10,560 --> 01:21:12,639
special purpose hardware

2135
01:21:12,639 --> 01:21:14,400
of course yes and somewhere in between

2136
01:21:14,400 --> 01:21:16,800
there you know gpus are you know being

2137
01:21:16,800 --> 01:21:18,239
used

2138
01:21:18,239 --> 01:21:20,560
in large quantities for machine learning

2139
01:21:20,560 --> 01:21:22,159
and so there's a lot of

2140
01:21:22,159 --> 01:21:24,239
cpu availability there

2141
01:21:24,239 --> 01:21:28,480
yeah yeah yeah no yeah for sure um

2142
01:21:28,480 --> 01:21:30,719
i i would think that

2143
01:21:30,719 --> 01:21:32,480
i i want to say the answer is yes that

2144
01:21:32,480 --> 01:21:35,600
we could adapt but i'm i'm yeah i'm i'm

2145
01:21:35,600 --> 01:21:38,480
not too sure not so much an expert in

2146
01:21:38,480 --> 01:21:40,400
architecture so

2147
01:21:40,400 --> 01:21:43,400
um

2148
01:21:43,679 --> 01:21:45,679
yeah but it would be it would be great i

2149
01:21:45,679 --> 01:21:46,960
mean of course we need more

2150
01:21:46,960 --> 01:21:49,199
computational power to you know have

2151
01:21:49,199 --> 01:21:52,799
greater bigger records so

2152
01:21:55,760 --> 01:21:58,159
thank you

2153
01:21:58,159 --> 01:21:59,840
all right um

2154
01:21:59,840 --> 01:22:00,960
so

2155
01:22:00,960 --> 01:22:04,320
if there are no more questions uh either

2156
01:22:04,320 --> 01:22:05,920
i'll go

2157
01:22:05,920 --> 01:22:08,840
for one of the other speakers

2158
01:22:08,840 --> 01:22:11,440
um i suggest we

2159
01:22:11,440 --> 01:22:13,920
close this session since we're a little

2160
01:22:13,920 --> 01:22:15,840
bit over time although it's

2161
01:22:15,840 --> 01:22:17,920
understandable given the technical

2162
01:22:17,920 --> 01:22:20,320
difficulties we met

2163
01:22:20,320 --> 01:22:21,600
um

2164
01:22:21,600 --> 01:22:22,960
so

2165
01:22:22,960 --> 01:22:26,639
um i'd like to just make a comment yeah

2166
01:22:26,639 --> 01:22:28,639
in this conference we have parallel

2167
01:22:28,639 --> 01:22:31,520
sessions so we will not be streaming the

2168
01:22:31,520 --> 01:22:33,920
parallel sessions on youtube they will

2169
01:22:33,920 --> 01:22:36,159
be in the separate zoom rooms you can

2170
01:22:36,159 --> 01:22:37,920
switch back and forth between them but

2171
01:22:37,920 --> 01:22:41,520
we'll have two separate zoom rooms open

2172
01:22:41,520 --> 01:22:43,679
and we will be recording the parallel

2173
01:22:43,679 --> 01:22:45,600
sessions so those videos will be

2174
01:22:45,600 --> 01:22:47,840
available sometime

2175
01:22:47,840 --> 01:22:50,000
after the conference uh but they just

2176
01:22:50,000 --> 01:22:52,400
won't be available during the conference

2177
01:22:52,400 --> 01:22:55,679
for streaming watching

2178
01:22:56,719 --> 01:22:59,199
right so so please pay attention so the

2179
01:22:59,199 --> 01:23:02,480
the regular session will uh start

2180
01:23:02,480 --> 01:23:03,280
uh

2181
01:23:03,280 --> 01:23:06,480
in a little bit less than about

2182
01:23:06,480 --> 01:23:09,600
20 a bit more than 20 minutes

2183
01:23:09,600 --> 01:23:11,120
and there are two parallel sessions so

2184
01:23:11,120 --> 01:23:13,599
you have to

