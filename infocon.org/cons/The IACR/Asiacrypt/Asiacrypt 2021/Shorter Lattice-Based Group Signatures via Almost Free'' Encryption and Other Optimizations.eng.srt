1
00:00:00,399 --> 00:00:02,639
hello i am maxim blossom and this video

2
00:00:02,639 --> 00:00:05,359
is the presentation for hd crypt 1021

3
00:00:05,359 --> 00:00:07,680
paper on lattice based group signatures

4
00:00:07,680 --> 00:00:09,679
so this is going to work with vadim yuba

5
00:00:09,679 --> 00:00:13,759
chefsky khan and guyan and gregor zeiler

6
00:00:13,759 --> 00:00:16,480
okay so now just a quick overview of

7
00:00:16,480 --> 00:00:17,840
what the paper is

8
00:00:17,840 --> 00:00:20,160
so in 2018 there was a large base group

9
00:00:20,160 --> 00:00:22,000
signature construction that was proposed

10
00:00:22,000 --> 00:00:23,519
but since then there's been quite a bit

11
00:00:23,519 --> 00:00:25,119
of improvement in lifespace zero

12
00:00:25,119 --> 00:00:27,599
knowledge proofs so some contributions

13
00:00:27,599 --> 00:00:28,400
on

14
00:00:28,400 --> 00:00:30,960
efficiency new techniques and

15
00:00:30,960 --> 00:00:33,280
some about the statements that can be

16
00:00:33,280 --> 00:00:34,160
proven

17
00:00:34,160 --> 00:00:36,399
so this paper uses these uh recent

18
00:00:36,399 --> 00:00:38,640
results to improve upon the 2018

19
00:00:38,640 --> 00:00:40,160
construction

20
00:00:40,160 --> 00:00:41,600
um okay

21
00:00:41,600 --> 00:00:43,680
so now about the structure of the video

22
00:00:43,680 --> 00:00:45,440
so first i'll introduce some technical

23
00:00:45,440 --> 00:00:48,320
background necessary for exposition

24
00:00:48,320 --> 00:00:50,879
next i'll define a high level uh

25
00:00:50,879 --> 00:00:52,079
from high level the previous

26
00:00:52,079 --> 00:00:54,399
construction from 2018 and then i'll

27
00:00:54,399 --> 00:00:56,879
give a list of the improvements we make

28
00:00:56,879 --> 00:00:59,199
upon it okay

29
00:00:59,199 --> 00:01:00,879
so

30
00:01:00,879 --> 00:01:03,039
first bjlb ladies based commitment

31
00:01:03,039 --> 00:01:05,280
scheme so if you want to read there's uh

32
00:01:05,280 --> 00:01:08,159
notations on the slides

33
00:01:08,159 --> 00:01:09,119
so

34
00:01:09,119 --> 00:01:10,640
how does the bdlp like this based

35
00:01:10,640 --> 00:01:12,560
commitment scheme work so

36
00:01:12,560 --> 00:01:14,080
the setup is you

37
00:01:14,080 --> 00:01:16,880
sampling a uniformly random matrix a0

38
00:01:16,880 --> 00:01:18,479
and then for every message you want to

39
00:01:18,479 --> 00:01:20,799
commit to so a message is an element of

40
00:01:20,799 --> 00:01:23,520
our queue you will sample a uniformly

41
00:01:23,520 --> 00:01:25,200
random vector

42
00:01:25,200 --> 00:01:29,680
a a one to a alpha from rq

43
00:01:29,680 --> 00:01:32,720
so now to commit to uh these messages

44
00:01:32,720 --> 00:01:34,479
what you do is you sample

45
00:01:34,479 --> 00:01:38,400
a short vector r so a vector with short

46
00:01:38,400 --> 00:01:39,920
coefficients are

47
00:01:39,920 --> 00:01:42,799
and the commitment is going to be this

48
00:01:42,799 --> 00:01:47,040
uh big matrix um here times r plus

49
00:01:47,040 --> 00:01:49,200
zero and then the messages so the

50
00:01:49,200 --> 00:01:50,960
commitment is made of two parts the top

51
00:01:50,960 --> 00:01:54,159
part which is a zero r and then for

52
00:01:54,159 --> 00:01:56,159
every message you will send a transpose

53
00:01:56,159 --> 00:01:58,320
r plus this message

54
00:01:58,320 --> 00:01:59,680
okay

55
00:01:59,680 --> 00:02:01,759
so now next slide is just

56
00:02:01,759 --> 00:02:03,119
um

57
00:02:03,119 --> 00:02:05,280
say a reminder to make sure we're on the

58
00:02:05,280 --> 00:02:07,280
same page about this so again you have

59
00:02:07,280 --> 00:02:08,720
notations you can pause the video if you

60
00:02:08,720 --> 00:02:10,800
want to read and now the idea here is

61
00:02:10,800 --> 00:02:12,879
that to prove knowledge of the message

62
00:02:12,879 --> 00:02:15,120
in a bdlp commitment what you do is

63
00:02:15,120 --> 00:02:17,599
given zero knowledge proof of knowledge

64
00:02:17,599 --> 00:02:20,720
of the short randomness r that was uh

65
00:02:20,720 --> 00:02:23,040
used during the commitment so if you

66
00:02:23,040 --> 00:02:25,440
remember from the previous slide

67
00:02:25,440 --> 00:02:26,319
okay

68
00:02:26,319 --> 00:02:31,760
so i move on to a short list of the

69
00:02:32,879 --> 00:02:35,040
statements that can be proven on the

70
00:02:35,040 --> 00:02:37,040
dllp commitments

71
00:02:37,040 --> 00:02:39,599
so first you can prove a linear relation

72
00:02:39,599 --> 00:02:43,280
so say you have commitment to m1 and m2

73
00:02:43,280 --> 00:02:45,280
then you can prove that m1 equals long

74
00:02:45,280 --> 00:02:48,080
m2 for some lambda in rq

75
00:02:48,080 --> 00:02:49,680
for very cheap

76
00:02:49,680 --> 00:02:50,959
now

77
00:02:50,959 --> 00:02:53,440
second one is uh product relation so say

78
00:02:53,440 --> 00:02:55,920
you have commitment to m1m2 and m3 then

79
00:02:55,920 --> 00:02:58,720
you can prove that m1 equals m2 times m3

80
00:02:58,720 --> 00:03:00,080
for pretty cheap

81
00:03:00,080 --> 00:03:01,360
um

82
00:03:01,360 --> 00:03:03,599
and finally you can prove unstructured

83
00:03:03,599 --> 00:03:05,519
linear relations so called unstructured

84
00:03:05,519 --> 00:03:06,480
because

85
00:03:06,480 --> 00:03:09,599
uh here you prove that qm1 equals m2

86
00:03:09,599 --> 00:03:13,280
where qm1 qqq is a matrix over zq so you

87
00:03:13,280 --> 00:03:15,280
kind of forget about the rq structure of

88
00:03:15,280 --> 00:03:17,440
m1 and you just consider it as a list of

89
00:03:17,440 --> 00:03:18,720
coefficients

90
00:03:18,720 --> 00:03:20,400
nm2 as well

91
00:03:20,400 --> 00:03:21,440
okay

92
00:03:21,440 --> 00:03:23,519
so this also can be proven for pretty

93
00:03:23,519 --> 00:03:25,840
cheap

94
00:03:26,080 --> 00:03:29,519
and yeah these statements will be useful

95
00:03:29,519 --> 00:03:31,200
later

96
00:03:31,200 --> 00:03:34,640
okay so now i move to the second

97
00:03:34,640 --> 00:03:38,400
part of the of the technical background

98
00:03:38,400 --> 00:03:41,440
uh part of the video

99
00:03:41,440 --> 00:03:43,519
so what a group signature is so in a

100
00:03:43,519 --> 00:03:45,599
group signature you have three entities

101
00:03:45,599 --> 00:03:47,519
you have the setup authority the group

102
00:03:47,519 --> 00:03:49,120
manager which will be called the opener

103
00:03:49,120 --> 00:03:51,519
sometimes and some group members which

104
00:03:51,519 --> 00:03:52,720
will be called

105
00:03:52,720 --> 00:03:55,360
users or signers

106
00:03:55,360 --> 00:03:56,560
so every

107
00:03:56,560 --> 00:03:59,200
group member has an identity i in a set

108
00:03:59,200 --> 00:04:01,040
category i

109
00:04:01,040 --> 00:04:02,560
and

110
00:04:02,560 --> 00:04:04,959
so what the setup authority will do is

111
00:04:04,959 --> 00:04:05,840
first

112
00:04:05,840 --> 00:04:07,840
generate a public key for the whole

113
00:04:07,840 --> 00:04:11,040
group and the opener secret key

114
00:04:11,040 --> 00:04:15,920
and once this is done for every um

115
00:04:15,920 --> 00:04:18,399
for every identity in calligraphic i so

116
00:04:18,399 --> 00:04:20,959
every user pretty much the setup

117
00:04:20,959 --> 00:04:23,919
authority will generate a signing key si

118
00:04:23,919 --> 00:04:26,320
so when this is done uh the setup

119
00:04:26,320 --> 00:04:27,840
authority will give

120
00:04:27,840 --> 00:04:31,199
the group manager his operac opener key

121
00:04:31,199 --> 00:04:33,680
and every group member of identity i

122
00:04:33,680 --> 00:04:37,440
will receive the signing key asi

123
00:04:37,440 --> 00:04:40,240
okay so now what we want is that

124
00:04:40,240 --> 00:04:41,040
some

125
00:04:41,040 --> 00:04:43,680
user with identity i should be able to

126
00:04:43,680 --> 00:04:45,759
produce a signature sigma of some

127
00:04:45,759 --> 00:04:47,040
message m

128
00:04:47,040 --> 00:04:49,040
that is valid under the public key of

129
00:04:49,040 --> 00:04:50,720
the whole group so

130
00:04:50,720 --> 00:04:53,600
a signer sign on behalf of the whole

131
00:04:53,600 --> 00:04:56,960
group and this kind of implies so what

132
00:04:56,960 --> 00:04:58,960
we what we also want is that this

133
00:04:58,960 --> 00:05:01,280
signature doesn't give away his uh

134
00:05:01,280 --> 00:05:03,280
identity so he should design on behalf

135
00:05:03,280 --> 00:05:05,600
of the whole group and we shouldn't know

136
00:05:05,600 --> 00:05:08,080
who who designer is apart from

137
00:05:08,080 --> 00:05:10,479
the fact that he belongs to the group

138
00:05:10,479 --> 00:05:11,919
and this uh

139
00:05:11,919 --> 00:05:14,639
brings me to the fourth uh item

140
00:05:14,639 --> 00:05:16,639
which is uh that the group manager

141
00:05:16,639 --> 00:05:19,280
should be able to open the

142
00:05:19,280 --> 00:05:20,160
the

143
00:05:20,160 --> 00:05:22,479
signature and find out the identity of

144
00:05:22,479 --> 00:05:24,560
the signer so the group manager should

145
00:05:24,560 --> 00:05:27,600
be the only one able to do this

146
00:05:27,600 --> 00:05:31,440
okay so i move on to the secret security

147
00:05:31,440 --> 00:05:34,240
properties of a lattice-based

148
00:05:34,240 --> 00:05:37,039
of a group signature sorry

149
00:05:37,039 --> 00:05:39,600
so first we have anonymity which i kind

150
00:05:39,600 --> 00:05:42,560
of just mentioned but i'll uh

151
00:05:42,560 --> 00:05:44,400
explain it again so

152
00:05:44,400 --> 00:05:46,240
the intuition is a signature should not

153
00:05:46,240 --> 00:05:48,639
leak the identity of the signer

154
00:05:48,639 --> 00:05:50,720
uh and so more formally what this means

155
00:05:50,720 --> 00:05:52,880
is that if if the adversary knows all

156
00:05:52,880 --> 00:05:55,039
the signing keys then he should not be

157
00:05:55,039 --> 00:05:57,520
able to distinguish between the

158
00:05:57,520 --> 00:06:02,479
signatures produced by any two users

159
00:06:02,479 --> 00:06:03,840
okay

160
00:06:03,840 --> 00:06:04,960
so

161
00:06:04,960 --> 00:06:07,919
now the second one is traceability

162
00:06:07,919 --> 00:06:09,919
which is kind of the equivalent of

163
00:06:09,919 --> 00:06:12,479
unforgeability for group signatures so

164
00:06:12,479 --> 00:06:14,319
if the adversary has

165
00:06:14,319 --> 00:06:18,080
some signing keys in a set s

166
00:06:18,080 --> 00:06:18,350
sorry

167
00:06:18,350 --> 00:06:19,759
[Music]

168
00:06:19,759 --> 00:06:21,759
and the opener secret key then what we

169
00:06:21,759 --> 00:06:23,680
want is that the advisor is not able to

170
00:06:23,680 --> 00:06:26,400
create a valid signature that doesn't

171
00:06:26,400 --> 00:06:28,160
such that the opener when they open up

172
00:06:28,160 --> 00:06:30,000
the crypts the identity from the

173
00:06:30,000 --> 00:06:31,919
signature

174
00:06:31,919 --> 00:06:34,800
he should uh find

175
00:06:34,800 --> 00:06:39,039
an identity that the adversary possesses

176
00:06:39,120 --> 00:06:41,759
okay so the reason why this is

177
00:06:41,759 --> 00:06:43,680
the equivalent of

178
00:06:43,680 --> 00:06:45,520
unforgeability for

179
00:06:45,520 --> 00:06:48,000
group signatures is for example if you

180
00:06:48,000 --> 00:06:50,080
take s to be the empty set so the

181
00:06:50,080 --> 00:06:52,639
adversary doesn't have any signing keys

182
00:06:52,639 --> 00:06:55,199
uh he just has the open secret key then

183
00:06:55,199 --> 00:06:57,520
we the this traceability property

184
00:06:57,520 --> 00:06:59,599
translates into the adversary should not

185
00:06:59,599 --> 00:07:03,680
be able to produce a signature at all

186
00:07:03,680 --> 00:07:05,039
okay

187
00:07:05,039 --> 00:07:06,960
so

188
00:07:06,960 --> 00:07:09,120
now i will move on to

189
00:07:09,120 --> 00:07:10,800
um

190
00:07:10,800 --> 00:07:12,479
the second part of the video which is

191
00:07:12,479 --> 00:07:13,919
defining

192
00:07:13,919 --> 00:07:16,080
the 2018 lightest based group signature

193
00:07:16,080 --> 00:07:18,319
construction

194
00:07:18,319 --> 00:07:21,039
okay so let's take it slow we have a set

195
00:07:21,039 --> 00:07:23,199
of identities calligraphic i that is

196
00:07:23,199 --> 00:07:24,160
made of

197
00:07:24,160 --> 00:07:27,199
rq elements that are stable under some

198
00:07:27,199 --> 00:07:29,280
two automorphisms

199
00:07:29,280 --> 00:07:30,720
um

200
00:07:30,720 --> 00:07:33,120
so the setup algorithm goes as follows

201
00:07:33,120 --> 00:07:36,639
so first you generate an mlw instance so

202
00:07:36,639 --> 00:07:39,520
you have uh you sample uniformly random

203
00:07:39,520 --> 00:07:42,479
a short trapdoor r and you set b equals

204
00:07:42,479 --> 00:07:44,400
ar

205
00:07:44,400 --> 00:07:47,199
now next what you do is you sample

206
00:07:47,199 --> 00:07:50,240
s1 h2 from a gaussian and you let

207
00:07:50,240 --> 00:07:51,759
u to be

208
00:07:51,759 --> 00:07:53,840
as1 plus bs2

209
00:07:53,840 --> 00:07:56,720
and so the public key is going to be a b

210
00:07:56,720 --> 00:08:00,080
and this u

211
00:08:00,080 --> 00:08:01,680
so now to some so

212
00:08:01,680 --> 00:08:04,960
if you have some uh user with identity i

213
00:08:04,960 --> 00:08:07,039
you want to sample the signing key what

214
00:08:07,039 --> 00:08:08,720
you do is you sample

215
00:08:08,720 --> 00:08:11,840
s1i and s2i from a gaussian under the

216
00:08:11,840 --> 00:08:13,120
condition that

217
00:08:13,120 --> 00:08:17,520
um this equation here uh holds so the g

218
00:08:17,520 --> 00:08:19,840
is a simple matrix that allows the

219
00:08:19,840 --> 00:08:21,039
sampling

220
00:08:21,039 --> 00:08:23,680
using the trade the trapdoor r

221
00:08:23,680 --> 00:08:26,400
and you can notice that the identity of

222
00:08:26,400 --> 00:08:29,199
the signer here is part of

223
00:08:29,199 --> 00:08:31,280
this matrix

224
00:08:31,280 --> 00:08:34,080
um okay and so this is the signing key

225
00:08:34,080 --> 00:08:37,360
of a user and now the last step is to

226
00:08:37,360 --> 00:08:40,320
generate a key pair for a verifiable

227
00:08:40,320 --> 00:08:41,760
encryption scheme

228
00:08:41,760 --> 00:08:44,640
so every user with identity i will get

229
00:08:44,640 --> 00:08:48,560
his signing key s1i is to i and the

230
00:08:48,560 --> 00:08:49,839
group manager

231
00:08:49,839 --> 00:08:51,600
will get the secret key for the

232
00:08:51,600 --> 00:08:54,720
verifiable encryption scheme

233
00:08:54,720 --> 00:08:56,959
okay

234
00:08:58,000 --> 00:09:01,040
so now how does uh signing go

235
00:09:01,040 --> 00:09:02,240
so

236
00:09:02,240 --> 00:09:04,640
let's say we have a user with identity i

237
00:09:04,640 --> 00:09:08,240
so he has the signing key s1i s2i so

238
00:09:08,240 --> 00:09:10,160
what he will first do to sign a message

239
00:09:10,160 --> 00:09:12,319
is

240
00:09:12,560 --> 00:09:15,040
commit to his identity i with some

241
00:09:15,040 --> 00:09:17,839
randomness r under bdlb commitment

242
00:09:17,839 --> 00:09:18,959
scheme

243
00:09:18,959 --> 00:09:21,040
and he will give a

244
00:09:21,040 --> 00:09:23,519
zero knowledge proof that his identity

245
00:09:23,519 --> 00:09:25,920
is part of calligraphic eye so another

246
00:09:25,920 --> 00:09:28,560
contribution of the 2018 paper is a way

247
00:09:28,560 --> 00:09:32,959
to prove automotism stability and so um

248
00:09:32,959 --> 00:09:35,360
yeah this is done by proving that i is

249
00:09:35,360 --> 00:09:37,279
stable under the two automorphisms that

250
00:09:37,279 --> 00:09:39,519
define cartographic eye

251
00:09:39,519 --> 00:09:41,040
and yeah

252
00:09:41,040 --> 00:09:42,800
this is done

253
00:09:42,800 --> 00:09:44,880
so there's this commitment to proof by

254
00:09:44,880 --> 00:09:45,760
one

255
00:09:45,760 --> 00:09:46,800
and then

256
00:09:46,800 --> 00:09:48,280
um

257
00:09:48,280 --> 00:09:50,160
[Music]

258
00:09:50,160 --> 00:09:53,040
the the second part of the of the

259
00:09:53,040 --> 00:09:55,760
signature is a proof of knowledge of the

260
00:09:55,760 --> 00:09:58,880
secret key s1 i s2i

261
00:09:58,880 --> 00:10:01,279
so it's the proof of knowledge of a

262
00:10:01,279 --> 00:10:04,160
short solution of this equation here and

263
00:10:04,160 --> 00:10:07,760
this is uh so in 2018 this couldn't be

264
00:10:07,760 --> 00:10:10,079
uh done directly and so

265
00:10:10,079 --> 00:10:11,200
uh

266
00:10:11,200 --> 00:10:12,160
yeah the

267
00:10:12,160 --> 00:10:14,399
yeah the it's

268
00:10:14,399 --> 00:10:17,040
rather more uh complicated when than

269
00:10:17,040 --> 00:10:19,600
what we can do today

270
00:10:19,600 --> 00:10:20,720
and so

271
00:10:20,720 --> 00:10:22,000
um

272
00:10:22,000 --> 00:10:23,040
finally

273
00:10:23,040 --> 00:10:25,200
uh the user will encrypt uh the

274
00:10:25,200 --> 00:10:28,959
randomness r that he used for bdlp

275
00:10:28,959 --> 00:10:30,320
um

276
00:10:30,320 --> 00:10:31,920
so you will encrypt it with the group

277
00:10:31,920 --> 00:10:33,760
manager's verifiable encryption public

278
00:10:33,760 --> 00:10:34,720
key

279
00:10:34,720 --> 00:10:37,760
and uh yeah it will also compute a proof

280
00:10:37,760 --> 00:10:39,920
by three that the ciphertext is well

281
00:10:39,920 --> 00:10:40,959
formed

282
00:10:40,959 --> 00:10:43,279
so so the verifier

283
00:10:43,279 --> 00:10:46,399
knows that the that this encryption

284
00:10:46,399 --> 00:10:48,079
so no knows that the

285
00:10:48,079 --> 00:10:49,760
um

286
00:10:49,760 --> 00:10:52,320
group manager is able to decrypt uh this

287
00:10:52,320 --> 00:10:55,120
r so okay now the signature is made of

288
00:10:55,120 --> 00:10:58,640
uh the commitment f the ciphertex c and

289
00:10:58,640 --> 00:10:59,519
all

290
00:10:59,519 --> 00:11:01,360
three zero knowledge proofs so the first

291
00:11:01,360 --> 00:11:04,320
one is to prove that the identity is an

292
00:11:04,320 --> 00:11:08,079
identity the second one is proof that

293
00:11:08,079 --> 00:11:10,800
is the proof of knowledge of the

294
00:11:10,800 --> 00:11:12,959
of the secret key and the third one is

295
00:11:12,959 --> 00:11:15,120
the proof of well-formedness of the

296
00:11:15,120 --> 00:11:16,399
ciphertext

297
00:11:16,399 --> 00:11:17,360
and so

298
00:11:17,360 --> 00:11:20,399
if the openhl wants to um know the

299
00:11:20,399 --> 00:11:23,040
identity of the signer what he does is

300
00:11:23,040 --> 00:11:26,079
uh use his secret key for the verifiable

301
00:11:26,079 --> 00:11:28,240
encryption scheme and decrypt the

302
00:11:28,240 --> 00:11:31,040
randomness r in the pdlp commitment

303
00:11:31,040 --> 00:11:34,399
so when this is done you can infer

304
00:11:34,399 --> 00:11:37,519
the identity from it

305
00:11:38,079 --> 00:11:39,040
okay

306
00:11:39,040 --> 00:11:42,160
so now i move on to the last part of the

307
00:11:42,160 --> 00:11:44,160
video which is a list of the

308
00:11:44,160 --> 00:11:46,000
improvements we bring

309
00:11:46,000 --> 00:11:47,680
on this

310
00:11:47,680 --> 00:11:50,000
lattice-based group signature

311
00:11:50,000 --> 00:11:52,000
so

312
00:11:52,000 --> 00:11:54,320
first we extend this scheme to module

313
00:11:54,320 --> 00:11:56,330
lwe which okay

314
00:11:56,330 --> 00:11:58,079
[Music]

315
00:11:58,079 --> 00:12:00,240
second we give a simpler and more

316
00:12:00,240 --> 00:12:01,920
efficient way to prove

317
00:12:01,920 --> 00:12:04,079
the knowledge of the secret key

318
00:12:04,079 --> 00:12:06,639
for the signature of a user

319
00:12:06,639 --> 00:12:09,440
and third we give a more efficient

320
00:12:09,440 --> 00:12:12,000
membership proof for by one so we use a

321
00:12:12,000 --> 00:12:14,399
different set calligraphy i

322
00:12:14,399 --> 00:12:18,079
and this comes with a different

323
00:12:18,240 --> 00:12:20,480
zero noise proof

324
00:12:20,480 --> 00:12:25,279
okay and finally we the encryption

325
00:12:25,279 --> 00:12:27,279
almost comes free so

326
00:12:27,279 --> 00:12:29,519
the and the and the well formless proof

327
00:12:29,519 --> 00:12:30,480
of

328
00:12:30,480 --> 00:12:32,959
the ciphertext as well and so overall we

329
00:12:32,959 --> 00:12:35,120
shrink the size of the signature from

330
00:12:35,120 --> 00:12:39,519
580 kilobytes to 203 kilobytes

331
00:12:39,519 --> 00:12:42,639
okay so now i will give a little more

332
00:12:42,639 --> 00:12:45,440
details on items two three and four

333
00:12:45,440 --> 00:12:48,240
so item two so what we need to prove is

334
00:12:48,240 --> 00:12:50,720
the knowledge of a short pre-image s1

335
00:12:50,720 --> 00:12:52,800
and s2 from

336
00:12:52,800 --> 00:12:56,160
this uh of this u from for this matrix

337
00:12:56,160 --> 00:12:58,959
here so now the problem is that this

338
00:12:58,959 --> 00:13:02,639
matrix a and a r minus ig

339
00:13:02,639 --> 00:13:05,440
contains uh the identity i and this

340
00:13:05,440 --> 00:13:08,639
identity i cannot cannot be given away

341
00:13:08,639 --> 00:13:11,600
because this would break uh anonymity

342
00:13:11,600 --> 00:13:13,040
so

343
00:13:13,040 --> 00:13:14,079
um

344
00:13:14,079 --> 00:13:15,760
this i is committed to and as i just

345
00:13:15,760 --> 00:13:18,839
said in the 2018 construction this is

346
00:13:18,839 --> 00:13:23,040
done um this is done uh

347
00:13:23,519 --> 00:13:25,200
in a way that

348
00:13:25,200 --> 00:13:27,360
increases the length of the ring system

349
00:13:27,360 --> 00:13:29,519
to be extracted and this

350
00:13:29,519 --> 00:13:31,120
implies

351
00:13:31,120 --> 00:13:34,000
pretty pretty bad parameters oh i mean

352
00:13:34,000 --> 00:13:35,040
worse

353
00:13:35,040 --> 00:13:37,120
parameters

354
00:13:37,120 --> 00:13:38,959
so

355
00:13:38,959 --> 00:13:42,240
an idea that could be

356
00:13:42,240 --> 00:13:44,480
good is to see that

357
00:13:44,480 --> 00:13:45,360
this

358
00:13:45,360 --> 00:13:48,480
matrix product contains actually a

359
00:13:48,480 --> 00:13:51,040
product proof somehow for ptlob because

360
00:13:51,040 --> 00:13:52,800
i is committed to and so if you have a

361
00:13:52,800 --> 00:13:55,519
commitment to s2 then you could prove uh

362
00:13:55,519 --> 00:13:57,680
this equation here using the the product

363
00:13:57,680 --> 00:13:59,920
proof from i i

364
00:13:59,920 --> 00:14:02,399
talked about in the introduction

365
00:14:02,399 --> 00:14:04,560
so now there is a problem with this

366
00:14:04,560 --> 00:14:07,600
which is if you commit to s2 then

367
00:14:07,600 --> 00:14:10,399
this increases uh

368
00:14:10,399 --> 00:14:13,600
a lot the length of the signature and

369
00:14:13,600 --> 00:14:15,199
this is not something you want to do so

370
00:14:15,199 --> 00:14:17,519
we have a different solution for this

371
00:14:17,519 --> 00:14:18,720
which is

372
00:14:18,720 --> 00:14:21,040
as follows so

373
00:14:21,040 --> 00:14:23,519
let's define a prime to be the matrix a

374
00:14:23,519 --> 00:14:26,240
and b minus ig so

375
00:14:26,240 --> 00:14:28,399
now what we see is that

376
00:14:28,399 --> 00:14:30,160
if a prime was public then the

377
00:14:30,160 --> 00:14:32,399
verification equation would be something

378
00:14:32,399 --> 00:14:35,680
like a prime z equals w plus c u

379
00:14:35,680 --> 00:14:37,920
um

380
00:14:37,920 --> 00:14:40,480
okay and

381
00:14:40,480 --> 00:14:41,360
now

382
00:14:41,360 --> 00:14:43,680
from the homomorphic properties of bdlp

383
00:14:43,680 --> 00:14:44,959
commitment scheme

384
00:14:44,959 --> 00:14:47,120
we know that the verifier can infer a

385
00:14:47,120 --> 00:14:49,120
commitment to a prime so from the

386
00:14:49,120 --> 00:14:51,440
commitment to i the verifier knows a

387
00:14:51,440 --> 00:14:53,440
commitment to this

388
00:14:53,440 --> 00:14:57,600
a prime because a b and g are public

389
00:14:57,760 --> 00:14:58,800
so

390
00:14:58,800 --> 00:15:02,000
um our solution to prove uh knowledge of

391
00:15:02,000 --> 00:15:06,079
s1 s2 is to commit to the w instead of

392
00:15:06,079 --> 00:15:08,560
sending it in the clear and then the

393
00:15:08,560 --> 00:15:12,079
verification equation which is i remind

394
00:15:12,079 --> 00:15:15,760
um a prime z equals w plus cu is linear

395
00:15:15,760 --> 00:15:19,120
in the committed messages so

396
00:15:19,120 --> 00:15:20,880
as i just said we have a commitment to a

397
00:15:20,880 --> 00:15:23,440
prime we have a commitment to w

398
00:15:23,440 --> 00:15:26,800
and uh everything else is public so this

399
00:15:26,800 --> 00:15:28,079
is a

400
00:15:28,079 --> 00:15:31,519
relatively cheap bdlp linear proof

401
00:15:31,519 --> 00:15:32,880
that we prove so we proved the

402
00:15:32,880 --> 00:15:35,120
verification equation instead of

403
00:15:35,120 --> 00:15:39,040
just proving the statement directly

404
00:15:39,040 --> 00:15:41,920
uh okay so this was the second item now

405
00:15:41,920 --> 00:15:44,800
i move on to the third item so as i said

406
00:15:44,800 --> 00:15:46,560
we have a different set of identities

407
00:15:46,560 --> 00:15:48,000
calligraphic i

408
00:15:48,000 --> 00:15:51,199
so our set of identities is the

409
00:15:51,199 --> 00:15:54,720
uh integers in our queue

410
00:15:54,720 --> 00:15:59,759
from 0 to 2 to the d minus 1 minus 1.

411
00:15:59,759 --> 00:16:00,800
and

412
00:16:00,800 --> 00:16:01,680
now

413
00:16:01,680 --> 00:16:04,079
i'll explain what the zero knowledge

414
00:16:04,079 --> 00:16:05,839
proof of

415
00:16:05,839 --> 00:16:07,680
that i is

416
00:16:07,680 --> 00:16:10,000
in calligraphic i

417
00:16:10,000 --> 00:16:11,839
so i'll explain what this uranus proof

418
00:16:11,839 --> 00:16:13,519
is so

419
00:16:13,519 --> 00:16:15,199
it goes into steps

420
00:16:15,199 --> 00:16:18,079
first we add an extra commitment to ib

421
00:16:18,079 --> 00:16:19,519
which is the inverse entity of the

422
00:16:19,519 --> 00:16:22,959
binary representation of i

423
00:16:22,959 --> 00:16:24,800
so once this is done

424
00:16:24,800 --> 00:16:26,480
um

425
00:16:26,480 --> 00:16:28,959
remains two things to prove so first we

426
00:16:28,959 --> 00:16:33,680
prove that ib is indeed a binary so no

427
00:16:33,680 --> 00:16:36,079
we prove that ib's entity is binary

428
00:16:36,079 --> 00:16:37,600
because it's the inverse entity of some

429
00:16:37,600 --> 00:16:40,240
binary representation

430
00:16:40,240 --> 00:16:42,959
so this is done using the product proof

431
00:16:42,959 --> 00:16:45,440
you have the equations here if you

432
00:16:45,440 --> 00:16:47,519
want to check it

433
00:16:47,519 --> 00:16:49,120
so this is the first step and now the

434
00:16:49,120 --> 00:16:52,800
second step is proving this unstructured

435
00:16:52,800 --> 00:16:55,920
linear relation so

436
00:16:55,920 --> 00:16:56,720
um

437
00:16:56,720 --> 00:16:57,839
let's

438
00:16:57,839 --> 00:17:00,800
read this slow so we prove that q times

439
00:17:00,800 --> 00:17:03,199
the entity of ib is equal to the entity

440
00:17:03,199 --> 00:17:05,919
of i so if you remember

441
00:17:05,919 --> 00:17:08,640
ib so it's still written on the slide ib

442
00:17:08,640 --> 00:17:10,880
is the inverse entity of the binary

443
00:17:10,880 --> 00:17:14,000
representation of i so entity of ib on

444
00:17:14,000 --> 00:17:15,520
the left here

445
00:17:15,520 --> 00:17:16,559
is

446
00:17:16,559 --> 00:17:18,720
the vector that is the binary

447
00:17:18,720 --> 00:17:20,559
representation of i

448
00:17:20,559 --> 00:17:23,119
and what we prove is that q times the

449
00:17:23,119 --> 00:17:25,119
binary representation of i

450
00:17:25,119 --> 00:17:26,799
is equal to the entity of i so this

451
00:17:26,799 --> 00:17:29,520
contains two statements actually

452
00:17:29,520 --> 00:17:32,080
so first

453
00:17:32,320 --> 00:17:34,240
we prove that

454
00:17:34,240 --> 00:17:37,360
the entity of i here is made of the same

455
00:17:37,360 --> 00:17:39,120
coefficient all the way

456
00:17:39,120 --> 00:17:42,880
because this matrix q has the same rows

457
00:17:42,880 --> 00:17:44,960
so the entity of i is made of

458
00:17:44,960 --> 00:17:47,440
only the same coefficients all the way

459
00:17:47,440 --> 00:17:48,559
and this

460
00:17:48,559 --> 00:17:51,440
means that i is an integer because so

461
00:17:51,440 --> 00:17:52,720
you you can

462
00:17:52,720 --> 00:17:56,000
check it if you want the only

463
00:17:56,000 --> 00:17:58,960
rq elements that have

464
00:17:58,960 --> 00:18:01,280
entity coefficients all the same are

465
00:18:01,280 --> 00:18:03,200
integers

466
00:18:03,200 --> 00:18:04,080
so

467
00:18:04,080 --> 00:18:07,360
so this second equation here proves that

468
00:18:07,360 --> 00:18:09,760
i is an integer and finally since the

469
00:18:09,760 --> 00:18:13,039
binary representation uh only has

470
00:18:13,039 --> 00:18:16,960
length d then this also proves that

471
00:18:16,960 --> 00:18:19,919
i is an integer in the range 0 to 2 to

472
00:18:19,919 --> 00:18:22,240
the d minus 1 and this is actually a

473
00:18:22,240 --> 00:18:26,480
proof that i is in calligraphic i

474
00:18:26,840 --> 00:18:30,799
okay so now the last part which is uh in

475
00:18:30,799 --> 00:18:31,840
the

476
00:18:31,840 --> 00:18:34,559
explaining uh the title of the paper the

477
00:18:34,559 --> 00:18:38,240
almost for free uh encryption

478
00:18:38,240 --> 00:18:39,360
so

479
00:18:39,360 --> 00:18:42,640
um to have this uh verifiable encryption

480
00:18:42,640 --> 00:18:44,799
almost for free what we do is

481
00:18:44,799 --> 00:18:45,919
um

482
00:18:45,919 --> 00:18:49,280
use the commitment as a cipher text so

483
00:18:49,280 --> 00:18:51,200
to do this what we do is we add an extra

484
00:18:51,200 --> 00:18:53,440
commitment to root q times i

485
00:18:53,440 --> 00:18:56,640
and so we get a ciphertext that looks

486
00:18:56,640 --> 00:18:58,320
like this so we have

487
00:18:58,320 --> 00:19:01,360
f0 f1 f2

488
00:19:01,360 --> 00:19:03,280
and

489
00:19:03,280 --> 00:19:05,360
the setup authority will plant the

490
00:19:05,360 --> 00:19:07,840
decryption key in the

491
00:19:07,840 --> 00:19:09,200
in the public

492
00:19:09,200 --> 00:19:12,480
a1 and a2 so it will look like you can

493
00:19:12,480 --> 00:19:13,600
you can

494
00:19:13,600 --> 00:19:16,000
check the slides if you are interested

495
00:19:16,000 --> 00:19:18,160
in the technical details

496
00:19:18,160 --> 00:19:19,440
so

497
00:19:19,440 --> 00:19:21,200
we noticed that

498
00:19:21,200 --> 00:19:23,600
even though a1 and e2 constrain contains

499
00:19:23,600 --> 00:19:24,480
a

500
00:19:24,480 --> 00:19:25,919
decryption key

501
00:19:25,919 --> 00:19:27,520
this doesn't change the distribution

502
00:19:27,520 --> 00:19:29,440
because under mlwe

503
00:19:29,440 --> 00:19:30,400
this

504
00:19:30,400 --> 00:19:32,799
new a1 and a2 are still

505
00:19:32,799 --> 00:19:35,039
uniformly random

506
00:19:35,039 --> 00:19:37,600
so this change is secure

507
00:19:37,600 --> 00:19:40,400
and uh so again if you wanna if you

508
00:19:40,400 --> 00:19:42,000
wanna see how the decryption goes you

509
00:19:42,000 --> 00:19:42,720
can

510
00:19:42,720 --> 00:19:46,160
pause the video and read the slides um

511
00:19:46,160 --> 00:19:49,440
and so the proof of welfareness for this

512
00:19:49,440 --> 00:19:50,559
safe text

513
00:19:50,559 --> 00:19:53,600
is just the

514
00:19:53,600 --> 00:19:56,160
the same proof as uh for

515
00:19:56,160 --> 00:19:57,360
the

516
00:19:57,360 --> 00:20:00,320
commitment scheme so it's sent already

517
00:20:00,320 --> 00:20:01,200
so

518
00:20:01,200 --> 00:20:03,679
we prove knowledge of the short r in

519
00:20:03,679 --> 00:20:05,520
this equation here

520
00:20:05,520 --> 00:20:06,960
and

521
00:20:06,960 --> 00:20:09,200
we also prove that

522
00:20:09,200 --> 00:20:11,360
the second commitment which is to root q

523
00:20:11,360 --> 00:20:14,400
times i is indeed of root q times i so

524
00:20:14,400 --> 00:20:16,480
this is a video linear

525
00:20:16,480 --> 00:20:18,559
proof which is very cheap

526
00:20:18,559 --> 00:20:22,159
um and so yeah as i just said uh the

527
00:20:22,159 --> 00:20:24,159
first item here is proven already

528
00:20:24,159 --> 00:20:25,440
because we need to prove that the

529
00:20:25,440 --> 00:20:27,600
commitment uh that we know the message

530
00:20:27,600 --> 00:20:29,520
in the commitment already

531
00:20:29,520 --> 00:20:31,760
and the second one is as i said very

532
00:20:31,760 --> 00:20:34,080
cheap so in the end this verify felt

533
00:20:34,080 --> 00:20:36,720
verifiable sorry encryption comes almost

534
00:20:36,720 --> 00:20:38,159
for free

535
00:20:38,159 --> 00:20:39,360
okay

536
00:20:39,360 --> 00:20:40,559
um

537
00:20:40,559 --> 00:20:41,840
so there's

538
00:20:41,840 --> 00:20:44,880
one more uh problem that we need to

539
00:20:44,880 --> 00:20:47,360
address so

540
00:20:47,360 --> 00:20:48,640
um

541
00:20:48,640 --> 00:20:51,600
in uh in the the sound the soundness of

542
00:20:51,600 --> 00:20:53,919
the zero knowledge proofs or pdlp which

543
00:20:53,919 --> 00:20:56,880
we use as uh the proof for the

544
00:20:56,880 --> 00:20:59,200
welfareness of the ciphertext only

545
00:20:59,200 --> 00:21:02,559
ensures that there exists a

546
00:21:02,559 --> 00:21:04,640
challenge difference c bar

547
00:21:04,640 --> 00:21:05,919
such that

548
00:21:05,919 --> 00:21:07,520
this equation holds

549
00:21:07,520 --> 00:21:10,320
and what this means is that even if the

550
00:21:10,320 --> 00:21:12,720
proof goes goes

551
00:21:12,720 --> 00:21:14,240
is valid

552
00:21:14,240 --> 00:21:16,159
then the verifier is not sure that the

553
00:21:16,159 --> 00:21:20,880
decryption is going to be correct and um

554
00:21:20,880 --> 00:21:23,280
yeah the this is uh not something that

555
00:21:23,280 --> 00:21:27,679
we want because all we know is that um

556
00:21:27,679 --> 00:21:29,600
for for the challenge

557
00:21:29,600 --> 00:21:32,480
c that is used in the proof there exists

558
00:21:32,480 --> 00:21:35,280
a c prime such that c minus c prime

559
00:21:35,280 --> 00:21:38,799
times f is a valid ciphertext for c bar

560
00:21:38,799 --> 00:21:40,320
times i

561
00:21:40,320 --> 00:21:41,919
and um

562
00:21:41,919 --> 00:21:45,360
yeah so what we do to correct this is

563
00:21:45,360 --> 00:21:47,440
um

564
00:21:47,440 --> 00:21:49,679
change a little the decryption algorithm

565
00:21:49,679 --> 00:21:53,200
so instead of decrypting directly f the

566
00:21:53,200 --> 00:21:54,880
opener will

567
00:21:54,880 --> 00:21:58,400
sample a challenge c prime take c bar to

568
00:21:58,400 --> 00:22:01,120
be c minus c prime and try and decrypt

569
00:22:01,120 --> 00:22:03,039
c bar times f

570
00:22:03,039 --> 00:22:06,640
and then divide it by c bar so as to get

571
00:22:06,640 --> 00:22:09,679
uh the i in the end and this makes sure

572
00:22:09,679 --> 00:22:11,760
that the verifier is convinced that the

573
00:22:11,760 --> 00:22:15,200
opener will have a um

574
00:22:15,200 --> 00:22:16,480
we will

575
00:22:16,480 --> 00:22:18,240
be able to actually open the the

576
00:22:18,240 --> 00:22:20,720
signature and know who designer is and

577
00:22:20,720 --> 00:22:23,840
so we also give a uh proof uh in the

578
00:22:23,840 --> 00:22:28,080
paper that this description uh is

579
00:22:28,080 --> 00:22:30,240
correct and there are some conditions

580
00:22:30,240 --> 00:22:33,280
and that the this decryption uh

581
00:22:33,280 --> 00:22:34,960
terminates

582
00:22:34,960 --> 00:22:37,600
because they're so we sample this uh

583
00:22:37,600 --> 00:22:39,120
challenge c prime and we have to make

584
00:22:39,120 --> 00:22:41,120
sure that there exists

585
00:22:41,120 --> 00:22:43,840
enough c primes

586
00:22:43,840 --> 00:22:45,679
so this decryption can

587
00:22:45,679 --> 00:22:47,760
go through

588
00:22:47,760 --> 00:22:48,799
okay

589
00:22:48,799 --> 00:22:50,720
so now there's

590
00:22:50,720 --> 00:22:53,679
one open question on the slides so

591
00:22:53,679 --> 00:22:55,600
it goes like this so for the

592
00:22:55,600 --> 00:22:58,880
traceability reduction we need to add a

593
00:22:58,880 --> 00:23:01,679
uniformly random copy so a uniformly

594
00:23:01,679 --> 00:23:04,159
random matrix b prime that has the same

595
00:23:04,159 --> 00:23:06,480
size as b to the public key so the

596
00:23:06,480 --> 00:23:08,880
public key instead of being just a b and

597
00:23:08,880 --> 00:23:12,480
u it's going to be a b p prime and u and

598
00:23:12,480 --> 00:23:16,240
this uh has quite a big cost in the

599
00:23:16,240 --> 00:23:17,440
signature

600
00:23:17,440 --> 00:23:20,799
and now the the thing is um this uh b

601
00:23:20,799 --> 00:23:22,559
prime that we use seems to be an

602
00:23:22,559 --> 00:23:24,159
artifact of the proof

603
00:23:24,159 --> 00:23:26,720
and uh yeah if we remove it doesn't seem

604
00:23:26,720 --> 00:23:28,400
to affect the security but we need this

605
00:23:28,400 --> 00:23:29,760
b prime to

606
00:23:29,760 --> 00:23:32,240
make the proof so

607
00:23:32,240 --> 00:23:34,400
yeah it would be

608
00:23:34,400 --> 00:23:37,520
an interesting question to find a uh

609
00:23:37,520 --> 00:23:40,080
traceability proof for this group

610
00:23:40,080 --> 00:23:43,520
signature that doesn't rely on on this

611
00:23:43,520 --> 00:23:47,760
uh b prime to reduce the signature of

612
00:23:47,760 --> 00:23:50,720
the size of the signature

613
00:23:50,720 --> 00:23:52,480
okay so

614
00:23:52,480 --> 00:23:54,159
i guess this is it

615
00:23:54,159 --> 00:23:58,320
thanks for watching bye

