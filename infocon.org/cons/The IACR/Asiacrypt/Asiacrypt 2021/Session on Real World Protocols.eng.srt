1
00:00:04,400 --> 00:00:06,720
okay uh hi everyone um

2
00:00:06,720 --> 00:00:09,200
thanks for coming to the last session of

3
00:00:09,200 --> 00:00:12,320
asia crypto 2021 uh sorry it's a virtual

4
00:00:12,320 --> 00:00:14,320
again hopefully we can see each other

5
00:00:14,320 --> 00:00:16,800
in the physical world uh soon

6
00:00:16,800 --> 00:00:19,680
and the last session will talk a section

7
00:00:19,680 --> 00:00:21,680
we have a six very interesting talks on

8
00:00:21,680 --> 00:00:23,920
real world uh protocols

9
00:00:23,920 --> 00:00:26,000
and i'm i'm the

10
00:00:26,000 --> 00:00:27,840
culture chang

11
00:00:27,840 --> 00:00:30,480
from university sydney i unfortunately

12
00:00:30,480 --> 00:00:31,599
haven't seen

13
00:00:31,599 --> 00:00:34,000
my culture panels here yet so i'll just

14
00:00:34,000 --> 00:00:35,680
do the introduction

15
00:00:35,680 --> 00:00:37,760
uh as i just said we have a six

16
00:00:37,760 --> 00:00:40,000
interesting talks line up um

17
00:00:40,000 --> 00:00:41,040
maybe

18
00:00:41,040 --> 00:00:43,440
we just get started oh so basically the

19
00:00:43,440 --> 00:00:45,680
basic logistics i think each talk

20
00:00:45,680 --> 00:00:47,440
probably in total have 10 minutes

21
00:00:47,440 --> 00:00:50,160
including the q a so if possible please

22
00:00:50,160 --> 00:00:51,760
wrap up like around six seven minutes

23
00:00:51,760 --> 00:00:54,160
then we have a we have time to enjoy a

24
00:00:54,160 --> 00:00:55,840
few questions

25
00:00:55,840 --> 00:00:57,199
and for the audience if you have any

26
00:00:57,199 --> 00:00:59,600
questions feel free to type in to the

27
00:00:59,600 --> 00:01:03,680
chat or into the zulip room

28
00:01:03,760 --> 00:01:05,360
okay so without the

29
00:01:05,360 --> 00:01:07,280
any delay let's start the session the

30
00:01:07,280 --> 00:01:09,520
first talk is uh

31
00:01:09,520 --> 00:01:11,360
about async

32
00:01:11,360 --> 00:01:14,159
consensus protocol called the tardigrade

33
00:01:14,159 --> 00:01:16,080
uh it's from

34
00:01:16,080 --> 00:01:18,320
erica jonathan newlin and i believe

35
00:01:18,320 --> 00:01:20,400
erica will give the talk so the stage is

36
00:01:20,400 --> 00:01:21,920
yours erica

37
00:01:21,920 --> 00:01:25,960
thank you very much for the introduction

38
00:01:26,080 --> 00:01:29,280
just share my screen

39
00:01:30,479 --> 00:01:32,798
and

40
00:01:33,600 --> 00:01:34,400
okay

41
00:01:34,400 --> 00:01:36,159
hopefully you're now seeing the slides

42
00:01:36,159 --> 00:01:39,200
with no random windows in the way as

43
00:01:39,200 --> 00:01:41,200
sometimes happens to me

44
00:01:41,200 --> 00:01:43,040
it looks looks perfect

45
00:01:43,040 --> 00:01:45,119
great so

46
00:01:45,119 --> 00:01:48,000
i'll get right to it uh hi everyone i'm

47
00:01:48,000 --> 00:01:50,320
erica and i'm going to give you a quick

48
00:01:50,320 --> 00:01:52,880
overview of my recent work with jonathan

49
00:01:52,880 --> 00:01:55,680
katz and julian loss on protocols for

50
00:01:55,680 --> 00:01:58,079
atomic broadcast in arbitrary network

51
00:01:58,079 --> 00:02:00,559
conditions

52
00:02:03,040 --> 00:02:05,200
so say we have a database and not just

53
00:02:05,200 --> 00:02:07,360
any database we have a very important

54
00:02:07,360 --> 00:02:09,679
very busy database that receives

55
00:02:09,679 --> 00:02:11,360
thousands of requests per second from

56
00:02:11,360 --> 00:02:12,959
various clients

57
00:02:12,959 --> 00:02:15,520
for example we might have one client on

58
00:02:15,520 --> 00:02:17,360
the left here who wants to read a value

59
00:02:17,360 --> 00:02:20,000
at address one so the server sends a

60
00:02:20,000 --> 00:02:22,480
response the value we might have client

61
00:02:22,480 --> 00:02:24,879
two on the right who wants to write a

62
00:02:24,879 --> 00:02:26,879
value to address two so the server

63
00:02:26,879 --> 00:02:29,280
spends a response concerning confirming

64
00:02:29,280 --> 00:02:31,120
it's been written

65
00:02:31,120 --> 00:02:32,720
now if we were to host this very

66
00:02:32,720 --> 00:02:34,640
important database on a single server

67
00:02:34,640 --> 00:02:36,640
we'd be in trouble if that single server

68
00:02:36,640 --> 00:02:39,599
ever crashes or encounters an error

69
00:02:39,599 --> 00:02:41,200
so one way to make the system more

70
00:02:41,200 --> 00:02:43,519
reliable is to use what's known as state

71
00:02:43,519 --> 00:02:45,200
machine replication

72
00:02:45,200 --> 00:02:46,879
we'll take this database and make

73
00:02:46,879 --> 00:02:49,280
multiple copies of it that way if one of

74
00:02:49,280 --> 00:02:50,879
them fails the other copies should still

75
00:02:50,879 --> 00:02:53,280
be able to keep the system running

76
00:02:53,280 --> 00:02:55,440
the trick may be or the trick is making

77
00:02:55,440 --> 00:02:57,120
sure that all of the non-faulty

78
00:02:57,120 --> 00:02:59,840
databases or servers maintain a common

79
00:02:59,840 --> 00:03:01,760
view of the database even though a

80
00:03:01,760 --> 00:03:03,280
thousand requests are coming in every

81
00:03:03,280 --> 00:03:05,360
second and even if some of those servers

82
00:03:05,360 --> 00:03:06,720
are faulty

83
00:03:06,720 --> 00:03:08,560
i'm sure this is familiar to some of you

84
00:03:08,560 --> 00:03:10,640
but it's helpful to set up just in the

85
00:03:10,640 --> 00:03:13,360
first minute or so

86
00:03:13,360 --> 00:03:15,280
so if the servers start out with the

87
00:03:15,280 --> 00:03:17,280
same local state and each of these

88
00:03:17,280 --> 00:03:19,280
requests deterministically updates the

89
00:03:19,280 --> 00:03:20,879
local state in some way then we can

90
00:03:20,879 --> 00:03:23,200
reduce the problem to ordering all of

91
00:03:23,200 --> 00:03:26,560
these requests as they come in

92
00:03:27,680 --> 00:03:29,599
this sub-problem of ordering a bunch of

93
00:03:29,599 --> 00:03:31,519
inputs is a fundamental distributed

94
00:03:31,519 --> 00:03:33,280
computing problem called atomic

95
00:03:33,280 --> 00:03:35,920
broadcast

96
00:03:36,239 --> 00:03:38,879
a bit more formally in atomic broadcast

97
00:03:38,879 --> 00:03:40,959
we abstract away almost all of the

98
00:03:40,959 --> 00:03:43,360
details and just consider a simplified

99
00:03:43,360 --> 00:03:45,599
system where we have a set of parties

100
00:03:45,599 --> 00:03:48,400
who are receiving input values over time

101
00:03:48,400 --> 00:03:50,239
and they need to agree on a growing

102
00:03:50,239 --> 00:03:52,400
sequence of values even though some

103
00:03:52,400 --> 00:03:54,319
fraction of the parties might be faulty

104
00:03:54,319 --> 00:03:56,879
and behave arbitrarily

105
00:03:56,879 --> 00:04:00,159
so for example to go back to our picture

106
00:04:00,159 --> 00:04:01,840
all we really care about is that we have

107
00:04:01,840 --> 00:04:05,040
our set of servers and they're receiving

108
00:04:05,040 --> 00:04:07,200
incoming values from some external

109
00:04:07,200 --> 00:04:09,200
source here we have some external

110
00:04:09,200 --> 00:04:11,439
clients who are inputting arbitrary

111
00:04:11,439 --> 00:04:13,120
values x and y

112
00:04:13,120 --> 00:04:15,439
the servers agree amongst themselves on

113
00:04:15,439 --> 00:04:17,440
an order in which to output those values

114
00:04:17,440 --> 00:04:19,839
and then report back to the client

115
00:04:19,839 --> 00:04:21,199
to the client's

116
00:04:21,199 --> 00:04:23,040
a log of all of the values that have

117
00:04:23,040 --> 00:04:26,160
been output and so over time maybe later

118
00:04:26,160 --> 00:04:28,080
client one has another value to input

119
00:04:28,080 --> 00:04:30,000
and that will get added to the output

120
00:04:30,000 --> 00:04:32,000
sequence and so on

121
00:04:32,000 --> 00:04:33,520
in general it doesn't matter if the

122
00:04:33,520 --> 00:04:35,120
values are output in a different order

123
00:04:35,120 --> 00:04:36,880
than they were input we just care that

124
00:04:36,880 --> 00:04:39,199
all the non-faulty parties agree on the

125
00:04:39,199 --> 00:04:43,199
order values are outputted

126
00:04:43,199 --> 00:04:45,520
there's been or there's been a lot of

127
00:04:45,520 --> 00:04:47,919
work studying these techniques in a lot

128
00:04:47,919 --> 00:04:49,600
of different theoretical models and i'm

129
00:04:49,600 --> 00:04:51,600
just going to talk about two here

130
00:04:51,600 --> 00:04:53,280
uh the synchronous model and the

131
00:04:53,280 --> 00:04:55,040
asynchronous model

132
00:04:55,040 --> 00:04:57,199
in the synchronous model we assume

133
00:04:57,199 --> 00:04:59,280
messages are delivered within some fixed

134
00:04:59,280 --> 00:05:01,199
amount of time delta

135
00:05:01,199 --> 00:05:03,039
in the asynchronous model there's no

136
00:05:03,039 --> 00:05:04,560
upper bound on the message delay

137
00:05:04,560 --> 00:05:06,160
although we do assume messages can't be

138
00:05:06,160 --> 00:05:07,440
dropped

139
00:05:07,440 --> 00:05:09,280
in a setting with a public key

140
00:05:09,280 --> 00:05:11,360
infrastructure pki we know that state

141
00:05:11,360 --> 00:05:13,520
machine replication is feasible if and

142
00:05:13,520 --> 00:05:15,199
only if there are fewer than and over

143
00:05:15,199 --> 00:05:17,680
two faults in the synchronous model and

144
00:05:17,680 --> 00:05:19,360
fewer than n over three faults in the

145
00:05:19,360 --> 00:05:21,039
asynchronous model

146
00:05:21,039 --> 00:05:22,720
so what we wanted to know is if it's

147
00:05:22,720 --> 00:05:25,039
possible to design a network agnostic

148
00:05:25,039 --> 00:05:27,440
protocol that's secure for at least n

149
00:05:27,440 --> 00:05:29,039
over three faults in the synchronous

150
00:05:29,039 --> 00:05:31,440
network for some fixed delta but still

151
00:05:31,440 --> 00:05:33,120
secure against some lower number of

152
00:05:33,120 --> 00:05:35,280
faults in an asynchronous network

153
00:05:35,280 --> 00:05:37,440
without the parties running the protocol

154
00:05:37,440 --> 00:05:41,280
needing to know which setting they're in

155
00:05:42,240 --> 00:05:44,800
it turns out that the answer is yes so

156
00:05:44,800 --> 00:05:47,360
tardigrade our atomic broadcast protocol

157
00:05:47,360 --> 00:05:50,479
tolerates ta faults in an asynchronous

158
00:05:50,479 --> 00:05:53,120
network and ts faults in a synchronous

159
00:05:53,120 --> 00:05:56,319
network for any ta plus 2ts that's less

160
00:05:56,319 --> 00:05:57,919
than n you can

161
00:05:57,919 --> 00:05:59,919
fix those however you please as long as

162
00:05:59,919 --> 00:06:02,240
you obey that bound and tardigrade will

163
00:06:02,240 --> 00:06:05,039
be secure for those thresholds of faults

164
00:06:05,039 --> 00:06:08,720
in each respective network model

165
00:06:08,720 --> 00:06:10,479
now on the other hand a tardigrade the

166
00:06:10,479 --> 00:06:13,440
animal is microscopic and can survive

167
00:06:13,440 --> 00:06:16,319
extreme heat cold radiation and pressure

168
00:06:16,319 --> 00:06:18,840
by entering a state called cryptobiosis

169
00:06:18,840 --> 00:06:21,199
coincidentally experiments tardigrades

170
00:06:21,199 --> 00:06:23,280
have even survived at the edge of outer

171
00:06:23,280 --> 00:06:24,400
space

172
00:06:24,400 --> 00:06:26,000
just wanted to throw in a little fact

173
00:06:26,000 --> 00:06:28,319
about the namesake

174
00:06:28,319 --> 00:06:30,319
so due to budget constraints we were not

175
00:06:30,319 --> 00:06:32,400
able to experimentally confirm that our

176
00:06:32,400 --> 00:06:34,479
protocol works in outer space but we did

177
00:06:34,479 --> 00:06:36,160
prove that it achieves optimal

178
00:06:36,160 --> 00:06:38,080
parameters by showing a matching lower

179
00:06:38,080 --> 00:06:39,199
bound

180
00:06:39,199 --> 00:06:41,120
specifically we showed network agnostic

181
00:06:41,120 --> 00:06:43,360
atomic broadcast as possible if and only

182
00:06:43,360 --> 00:06:44,160
if

183
00:06:44,160 --> 00:06:47,120
ta plus 2ts is less than n

184
00:06:47,120 --> 00:06:48,960
we also constructed another version of

185
00:06:48,960 --> 00:06:51,280
the protocol called upgrade compared to

186
00:06:51,280 --> 00:06:52,960
tardigrade upgrade has better

187
00:06:52,960 --> 00:06:55,440
communication complexity but tolerates

188
00:06:55,440 --> 00:06:57,280
an o of epsilon fraction fewer

189
00:06:57,280 --> 00:07:00,280
corruptions

190
00:07:05,120 --> 00:07:07,199
so i believe i've somehow miss set my

191
00:07:07,199 --> 00:07:09,120
clock but hopefully i'm not going too

192
00:07:09,120 --> 00:07:11,199
horribly far over

193
00:07:11,199 --> 00:07:12,880
so with my last few seconds i just

194
00:07:12,880 --> 00:07:14,880
wanted to put up a recap of our three

195
00:07:14,880 --> 00:07:17,599
main contributions first we have

196
00:07:17,599 --> 00:07:20,479
a lower bound showing that

197
00:07:20,479 --> 00:07:23,440
this problem is solvable if and only if

198
00:07:23,440 --> 00:07:25,919
ta plus 2ts is greater than or equal to

199
00:07:25,919 --> 00:07:27,280
n

200
00:07:27,280 --> 00:07:29,759
or is less than n sorry

201
00:07:29,759 --> 00:07:31,840
we have our protocol tardigrade which

202
00:07:31,840 --> 00:07:33,680
achieves optimal resilience and we have

203
00:07:33,680 --> 00:07:36,240
our protocol upgrade which is a modified

204
00:07:36,240 --> 00:07:37,680
version with better communication

205
00:07:37,680 --> 00:07:39,599
complexity but tolerating an o of

206
00:07:39,599 --> 00:07:42,639
epsilon fraction fewer corruptions

207
00:07:42,639 --> 00:07:44,240
so that brings us to the end of my

208
00:07:44,240 --> 00:07:46,000
slides i'd be happy to

209
00:07:46,000 --> 00:07:49,120
take any questions now if there are any

210
00:07:49,120 --> 00:07:51,280
yeah thank you so much erica for nice

211
00:07:51,280 --> 00:07:54,800
talk and also perfectly catches the time

212
00:07:54,800 --> 00:07:56,960
uh

213
00:07:56,960 --> 00:07:58,960
if there's any question for an audience

214
00:07:58,960 --> 00:08:00,879
uh since we don't have many people you

215
00:08:00,879 --> 00:08:03,599
can either type in the chat or just

216
00:08:03,599 --> 00:08:06,479
unmute yourself

217
00:08:09,280 --> 00:08:11,440
i have a question actually

218
00:08:11,440 --> 00:08:13,520
yeah you don't seem to have left any

219
00:08:13,520 --> 00:08:15,759
room for any further work in this are

220
00:08:15,759 --> 00:08:17,199
there extensions to this that you've

221
00:08:17,199 --> 00:08:18,960
thought about

222
00:08:18,960 --> 00:08:22,000
certainly so i think one extension that

223
00:08:22,000 --> 00:08:24,240
i'm personally curious about

224
00:08:24,240 --> 00:08:25,440
is

225
00:08:25,440 --> 00:08:29,120
so the the basic protocol tardigrade uh

226
00:08:29,120 --> 00:08:32,240
we figured out a way to make it uh

227
00:08:32,240 --> 00:08:34,399
secure against an adaptive adversary who

228
00:08:34,399 --> 00:08:36,320
can choose the faults

229
00:08:36,320 --> 00:08:38,479
uh adaptively over the course of the

230
00:08:38,479 --> 00:08:39,679
protocol

231
00:08:39,679 --> 00:08:41,919
whereas for upgrade the techniques we

232
00:08:41,919 --> 00:08:44,800
use to make it more efficient also

233
00:08:44,800 --> 00:08:47,440
make it difficult to see immediately how

234
00:08:47,440 --> 00:08:49,680
to get security against adaptive

235
00:08:49,680 --> 00:08:52,160
adversary so upgrade is only secure

236
00:08:52,160 --> 00:08:54,640
against a static adversary so personally

237
00:08:54,640 --> 00:08:56,720
i'm curious if you can manage to get

238
00:08:56,720 --> 00:08:57,519
sort of

239
00:08:57,519 --> 00:08:59,519
the security against a stronger

240
00:08:59,519 --> 00:09:02,160
adversary even for the optimal number of

241
00:09:02,160 --> 00:09:04,640
faults and also get the efficiency

242
00:09:04,640 --> 00:09:07,839
comparable with uh other us

243
00:09:07,839 --> 00:09:09,600
what we used as our benchmark for is

244
00:09:09,600 --> 00:09:11,920
this efficient is is it uh

245
00:09:11,920 --> 00:09:13,360
comparable to

246
00:09:13,360 --> 00:09:15,680
protocols in the asynchronous

247
00:09:15,680 --> 00:09:16,560
setting

248
00:09:16,560 --> 00:09:17,440
um

249
00:09:17,440 --> 00:09:19,600
so i would be very interested to see if

250
00:09:19,600 --> 00:09:21,600
there's uh

251
00:09:21,600 --> 00:09:23,360
a protocol that sort of combines the

252
00:09:23,360 --> 00:09:24,959
strengths of tardigrade and upgrade in

253
00:09:24,959 --> 00:09:27,839
terms of a stronger adversary and also

254
00:09:27,839 --> 00:09:30,800
uh efficiency

255
00:09:30,800 --> 00:09:32,720
um i've also very got a very simple

256
00:09:32,720 --> 00:09:35,440
question so you you mean you mentioned

257
00:09:35,440 --> 00:09:37,279
the upgrade here is more efficient than

258
00:09:37,279 --> 00:09:39,279
tardigrade right so efficiency here

259
00:09:39,279 --> 00:09:40,560
what's deficiency metric like

260
00:09:40,560 --> 00:09:42,160
communication complexity around

261
00:09:42,160 --> 00:09:46,320
complexity or etc uh certainly yes so uh

262
00:09:46,320 --> 00:09:48,480
efficiency here i'm just talking about

263
00:09:48,480 --> 00:09:50,480
uh communication complexity i think

264
00:09:50,480 --> 00:09:52,320
there's also definitely room to improve

265
00:09:52,320 --> 00:09:56,959
on the round complexity in particular

266
00:09:57,600 --> 00:09:58,640
our

267
00:09:58,640 --> 00:10:01,600
protocol tends to run

268
00:10:01,600 --> 00:10:02,839
two components

269
00:10:02,839 --> 00:10:04,480
sequentially uh

270
00:10:04,480 --> 00:10:07,200
sort of you can think of it like a um

271
00:10:07,200 --> 00:10:09,040
a synchronous optimized component an

272
00:10:09,040 --> 00:10:11,600
asynchronous optimized component where

273
00:10:11,600 --> 00:10:13,440
one sort of does the heavy lifting and

274
00:10:13,440 --> 00:10:14,880
the other just tries not to get in the

275
00:10:14,880 --> 00:10:17,040
way depending on which setting you're in

276
00:10:17,040 --> 00:10:18,399
and

277
00:10:18,399 --> 00:10:21,040
similar to i think sort of slow path

278
00:10:21,040 --> 00:10:23,279
fast path protocols in

279
00:10:23,279 --> 00:10:25,279
the area of optimistic responsiveness i

280
00:10:25,279 --> 00:10:28,240
wonder if you could somehow not need to

281
00:10:28,240 --> 00:10:30,079
run them sequentially but somehow get

282
00:10:30,079 --> 00:10:33,040
the benefits of both paths if you will

283
00:10:33,040 --> 00:10:33,920
uh

284
00:10:33,920 --> 00:10:35,760
in parallel to get the round complexity

285
00:10:35,760 --> 00:10:36,640
better

286
00:10:36,640 --> 00:10:37,680
so

287
00:10:37,680 --> 00:10:40,079
i believe we we can

288
00:10:40,079 --> 00:10:42,560
but we can talk more details so

289
00:10:42,560 --> 00:10:47,839
um any other questions from the audience

290
00:10:49,120 --> 00:10:50,000
um

291
00:10:50,000 --> 00:10:51,680
yeah actually i have one more but

292
00:10:51,680 --> 00:10:54,320
because very interesting work but uh

293
00:10:54,320 --> 00:10:56,320
consider the time maybe we can talk more

294
00:10:56,320 --> 00:10:57,600
in the

295
00:10:57,600 --> 00:11:00,720
uh in offline ah actually panos uh our

296
00:11:00,720 --> 00:11:02,240
culture here

297
00:11:02,240 --> 00:11:03,839
and do you want to

298
00:11:03,839 --> 00:11:05,920
take over the introduction of the second

299
00:11:05,920 --> 00:11:08,160
talk

300
00:11:09,680 --> 00:11:11,200
let's see yeah you can actually you can

301
00:11:11,200 --> 00:11:13,200
go ahead with the second one and then i

302
00:11:13,200 --> 00:11:14,399
can

303
00:11:14,399 --> 00:11:17,360
continue uh okay so this is just the end

304
00:11:17,360 --> 00:11:18,959
of the first talk so it's completely

305
00:11:18,959 --> 00:11:21,279
fresh

306
00:11:24,160 --> 00:11:27,279
um okay so then let's move to the second

307
00:11:27,279 --> 00:11:29,440
talk about the onion routing with uh

308
00:11:29,440 --> 00:11:32,000
with replies it's from uh

309
00:11:32,000 --> 00:11:35,680
christianity dennis andy and sultan i

310
00:11:35,680 --> 00:11:38,720
think chris christian uh sorry uh

311
00:11:38,720 --> 00:11:40,800
christianity maybe i pronounce your name

312
00:11:40,800 --> 00:11:44,160
wrong um we'll give the talk

313
00:11:44,160 --> 00:11:46,560
thank you so much can we just put up my

314
00:11:46,560 --> 00:11:46,960
slides

315
00:11:46,960 --> 00:11:50,240
[Music]

316
00:11:50,240 --> 00:11:52,240
okay so now you should be able to

317
00:11:52,240 --> 00:11:55,680
hopefully see my slides and hear me well

318
00:11:55,680 --> 00:11:57,920
perfect thank you so much for your kind

319
00:11:57,920 --> 00:12:00,160
introduction um my name is christiane

320
00:12:00,160 --> 00:12:02,079
kuhn and today i'm happy to present our

321
00:12:02,079 --> 00:12:04,639
results on onion routing with replies

322
00:12:04,639 --> 00:12:06,639
and this results are joint work together

323
00:12:06,639 --> 00:12:08,399
with dennis hoffeins and europe and

324
00:12:08,399 --> 00:12:10,880
thurston strufen let me first start by

325
00:12:10,880 --> 00:12:13,120
stating our contributions we were the

326
00:12:13,120 --> 00:12:14,480
first to look at the problem of

327
00:12:14,480 --> 00:12:16,480
repliable onion routing with strong

328
00:12:16,480 --> 00:12:18,959
security guarantees and for this we came

329
00:12:18,959 --> 00:12:21,200
up with two secure packet formats and

330
00:12:21,200 --> 00:12:22,800
we've actually proven these packet

331
00:12:22,800 --> 00:12:24,880
formats to be secure with the help of an

332
00:12:24,880 --> 00:12:26,959
ideal functionality for repliable onion

333
00:12:26,959 --> 00:12:29,200
routing from which we derive reusable

334
00:12:29,200 --> 00:12:31,839
game-based security properties

335
00:12:31,839 --> 00:12:33,440
now let me give you a little bit of

336
00:12:33,440 --> 00:12:35,360
detail what we mean with strong security

337
00:12:35,360 --> 00:12:36,560
guarantees

338
00:12:36,560 --> 00:12:38,560
besides other attacks we want to protect

339
00:12:38,560 --> 00:12:40,240
against the malleability attack on the

340
00:12:40,240 --> 00:12:41,360
payload

341
00:12:41,360 --> 00:12:43,200
and for this we need some background on

342
00:12:43,200 --> 00:12:45,600
onion routing first of all very roughly

343
00:12:45,600 --> 00:12:47,120
in onion routing we want to unlink

344
00:12:47,120 --> 00:12:49,040
sandness from receivers with the help of

345
00:12:49,040 --> 00:12:51,680
an honest intermediate relay by ensuring

346
00:12:51,680 --> 00:12:53,360
that the adversary cannot link anything

347
00:12:53,360 --> 00:12:55,519
that happens before dishonest relay to

348
00:12:55,519 --> 00:12:57,120
something that happens after dishonest

349
00:12:57,120 --> 00:12:59,680
relay however if the payload is not

350
00:12:59,680 --> 00:13:01,519
sufficiently protected

351
00:13:01,519 --> 00:13:03,519
the adversary can modify the payload of

352
00:13:03,519 --> 00:13:05,600
some packet before the honest relay

353
00:13:05,600 --> 00:13:08,240
let's say the packet of alice and later

354
00:13:08,240 --> 00:13:11,200
on recognize that he as the adversarial

355
00:13:11,200 --> 00:13:13,279
receiver received some unfamiliar

356
00:13:13,279 --> 00:13:15,360
message for example just random bits

357
00:13:15,360 --> 00:13:17,440
instead of an english language message

358
00:13:17,440 --> 00:13:18,959
that he would expect

359
00:13:18,959 --> 00:13:20,880
and this is the clue for our adversary

360
00:13:20,880 --> 00:13:22,959
to conclude that it indeed was ellis

361
00:13:22,959 --> 00:13:25,519
that wanted to contact this receiver and

362
00:13:25,519 --> 00:13:27,440
thereby the adversary gains valuable

363
00:13:27,440 --> 00:13:29,279
metadata information

364
00:13:29,279 --> 00:13:31,279
about this communication

365
00:13:31,279 --> 00:13:34,079
this problem in itself is not new and

366
00:13:34,079 --> 00:13:36,160
without reply support we know how to

367
00:13:36,160 --> 00:13:38,880
solve it however if we also want to

368
00:13:38,880 --> 00:13:41,680
allow for replies from the potentially

369
00:13:41,680 --> 00:13:43,839
adversarial sender back to the anonymous

370
00:13:43,839 --> 00:13:45,040
receiver

371
00:13:45,040 --> 00:13:47,519
then there is no solution that also

372
00:13:47,519 --> 00:13:50,320
protects against the malleability attack

373
00:13:50,320 --> 00:13:52,800
and this is where our contribution comes

374
00:13:52,800 --> 00:13:55,519
into place but this top left corner of

375
00:13:55,519 --> 00:13:58,480
this diagram comes with a specific

376
00:13:58,480 --> 00:14:00,800
challenge there is some specific

377
00:14:00,800 --> 00:14:03,120
technical difficulty involved if we want

378
00:14:03,120 --> 00:14:04,880
to protect against the malleability

379
00:14:04,880 --> 00:14:07,279
attack and support replies at the same

380
00:14:07,279 --> 00:14:08,160
time

381
00:14:08,160 --> 00:14:09,760
so protecting in against the

382
00:14:09,760 --> 00:14:11,440
malleability attack means that we need

383
00:14:11,440 --> 00:14:13,839
to authenticate the payload for requests

384
00:14:13,839 --> 00:14:16,000
but if we also want to have strong reply

385
00:14:16,000 --> 00:14:17,040
support

386
00:14:17,040 --> 00:14:18,320
then we want

387
00:14:18,320 --> 00:14:19,839
requests and replies to be

388
00:14:19,839 --> 00:14:21,360
indistinguishable such that the

389
00:14:21,360 --> 00:14:24,160
adversary is as uncertain as he could be

390
00:14:24,160 --> 00:14:27,120
however if we require those two things

391
00:14:27,120 --> 00:14:28,800
this means well we also need to

392
00:14:28,800 --> 00:14:31,360
authenticate the payload for replies and

393
00:14:31,360 --> 00:14:33,360
this is difficult because we cannot do

394
00:14:33,360 --> 00:14:34,160
it

395
00:14:34,160 --> 00:14:36,240
explicitly like we would typically do

396
00:14:36,240 --> 00:14:38,560
with a message authentication code

397
00:14:38,560 --> 00:14:40,560
because our trusted sender cannot

398
00:14:40,560 --> 00:14:42,480
pre-calculate such a thing she does not

399
00:14:42,480 --> 00:14:44,880
know how the reply is going to look like

400
00:14:44,880 --> 00:14:47,040
and the one that knows how to reply is

401
00:14:47,040 --> 00:14:48,560
going to look like

402
00:14:48,560 --> 00:14:50,560
well that's the receiver but we do not

403
00:14:50,560 --> 00:14:52,399
trust the receiver to pre-calculate

404
00:14:52,399 --> 00:14:55,600
something for the reply

405
00:14:55,600 --> 00:14:57,199
so we are left with the challenge to

406
00:14:57,199 --> 00:15:00,639
find an implicit way to offer camp to

407
00:15:00,639 --> 00:15:03,199
authenticate the payload and we actually

408
00:15:03,199 --> 00:15:06,399
found two ways to do this and those are

409
00:15:06,399 --> 00:15:08,720
the basic ideas behind our secure packet

410
00:15:08,720 --> 00:15:09,680
formats

411
00:15:09,680 --> 00:15:12,240
the first way of doing this is by using

412
00:15:12,240 --> 00:15:14,480
snarks and proving at every step of the

413
00:15:14,480 --> 00:15:16,720
path that everything happened according

414
00:15:16,720 --> 00:15:19,279
to the protocol even further we need to

415
00:15:19,279 --> 00:15:20,320
and

416
00:15:20,320 --> 00:15:23,040
to interlink our snark proofs to ensure

417
00:15:23,040 --> 00:15:25,600
an authentication chain back until our

418
00:15:25,600 --> 00:15:27,120
trusted sender

419
00:15:27,120 --> 00:15:29,600
and the second option that we found to

420
00:15:29,600 --> 00:15:31,920
ensure implicit payload authentication

421
00:15:31,920 --> 00:15:33,920
is by using updatable encryption with a

422
00:15:33,920 --> 00:15:36,800
very specific property now updatable

423
00:15:36,800 --> 00:15:39,040
encryption comes from a very different

424
00:15:39,040 --> 00:15:41,519
setting think about ciphertext being

425
00:15:41,519 --> 00:15:43,279
stored at the database and now you want

426
00:15:43,279 --> 00:15:45,040
to update your ciphertext from an old

427
00:15:45,040 --> 00:15:46,959
key to a new key

428
00:15:46,959 --> 00:15:49,040
and you want to do this efficiently with

429
00:15:49,040 --> 00:15:51,199
the help of an update token

430
00:15:51,199 --> 00:15:53,680
and some updatable encryption schemes

431
00:15:53,680 --> 00:15:55,440
have the very interesting property of

432
00:15:55,440 --> 00:15:58,000
plain text integrity and plain text

433
00:15:58,000 --> 00:16:00,160
integrity says that the adversary cannot

434
00:16:00,160 --> 00:16:03,120
come up with fake ciphertext that then

435
00:16:03,120 --> 00:16:06,079
actually decrypt to some real message or

436
00:16:06,079 --> 00:16:08,079
that do not produce a fail during the

437
00:16:08,079 --> 00:16:10,480
next update and that is very interesting

438
00:16:10,480 --> 00:16:12,560
for us because we want the exact same

439
00:16:12,560 --> 00:16:14,480
thing for our payload we want that the

440
00:16:14,480 --> 00:16:16,240
adversary cannot come up with a fake

441
00:16:16,240 --> 00:16:19,040
payload that then survives processing at

442
00:16:19,040 --> 00:16:20,560
the honest relay

443
00:16:20,560 --> 00:16:22,720
and this is why we use updatable

444
00:16:22,720 --> 00:16:24,880
encryption for our payloads in our

445
00:16:24,880 --> 00:16:27,279
second scheme and ensure that every

446
00:16:27,279 --> 00:16:30,560
relay updates the payload

447
00:16:30,560 --> 00:16:32,480
now those two schemes do not only

448
00:16:32,480 --> 00:16:34,639
prevent the malleability attack but they

449
00:16:34,639 --> 00:16:36,720
actually proven secure in the sense of

450
00:16:36,720 --> 00:16:38,800
our ideal functionality

451
00:16:38,800 --> 00:16:40,160
however

452
00:16:40,160 --> 00:16:42,160
as we are the first with those two

453
00:16:42,160 --> 00:16:43,920
protocols to

454
00:16:43,920 --> 00:16:46,880
attack the challenge of the technical

455
00:16:46,880 --> 00:16:48,959
difficulty of supporting replies and

456
00:16:48,959 --> 00:16:50,639
preventing the malleability attack at

457
00:16:50,639 --> 00:16:51,920
the same time

458
00:16:51,920 --> 00:16:55,360
our two schemes are less efficient than

459
00:16:55,360 --> 00:16:57,759
the existing works that do not prevent

460
00:16:57,759 --> 00:16:59,920
the malleability attack and for future

461
00:16:59,920 --> 00:17:01,600
work we're interested to see if we can

462
00:17:01,600 --> 00:17:02,399
find

463
00:17:02,399 --> 00:17:04,559
more efficient solutions that still

464
00:17:04,559 --> 00:17:07,199
provide a strong sense of security

465
00:17:07,199 --> 00:17:08,959
and with this i would like to thank you

466
00:17:08,959 --> 00:17:10,799
for your attention and i'm looking

467
00:17:10,799 --> 00:17:12,319
forward to any questions that you might

468
00:17:12,319 --> 00:17:14,480
have

469
00:17:14,980 --> 00:17:16,400
[Music]

470
00:17:16,400 --> 00:17:18,640
thanks a lot for the nice talk and very

471
00:17:18,640 --> 00:17:20,079
nice work

472
00:17:20,079 --> 00:17:21,520
um

473
00:17:21,520 --> 00:17:24,780
any questions from the audience

474
00:17:24,780 --> 00:17:26,559
[Music]

475
00:17:26,559 --> 00:17:31,639
just feel free to to unmute yourself

476
00:17:32,320 --> 00:17:35,039
uh one very quick quick question

477
00:17:35,039 --> 00:17:37,039
before the since the audience is getting

478
00:17:37,039 --> 00:17:39,679
ready uh since you mentioned here update

479
00:17:39,679 --> 00:17:42,880
encryption uh is needed could be used

480
00:17:42,880 --> 00:17:44,400
here and

481
00:17:44,400 --> 00:17:45,919
like that two type of update with

482
00:17:45,919 --> 00:17:47,840
encryption why is uh

483
00:17:47,840 --> 00:17:49,600
called the self-test dependent and

484
00:17:49,600 --> 00:17:51,679
subjects independent right does it

485
00:17:51,679 --> 00:17:54,240
matter here

486
00:17:54,240 --> 00:17:56,480
so the important thing for us is to have

487
00:17:56,480 --> 00:17:58,240
the plain text integrity i'm not

488
00:17:58,240 --> 00:18:00,320
completely sure about these two options

489
00:18:00,320 --> 00:18:02,400
um but what we need from from update to

490
00:18:02,400 --> 00:18:04,080
encryption is basically

491
00:18:04,080 --> 00:18:05,280
um

492
00:18:05,280 --> 00:18:07,120
perfect re-encryption so that the

493
00:18:07,120 --> 00:18:09,520
ciphertext actually looks like a new

494
00:18:09,520 --> 00:18:12,640
ciphertext even if it is re-encrypted

495
00:18:12,640 --> 00:18:14,559
we need plain text integrity to prevent

496
00:18:14,559 --> 00:18:17,280
the malleability attack um and we need

497
00:18:17,280 --> 00:18:20,799
some kind of relaxed cca security

498
00:18:20,799 --> 00:18:22,000
i think so

499
00:18:22,000 --> 00:18:24,240
then the follow-up question is the plan

500
00:18:24,240 --> 00:18:26,160
plain text integrity is a sufficient or

501
00:18:26,160 --> 00:18:28,400
do you need even stronger say like a

502
00:18:28,400 --> 00:18:30,320
side tax integrity

503
00:18:30,320 --> 00:18:32,400
no plaintext integrity is fine for us

504
00:18:32,400 --> 00:18:34,799
it's okay if the um because the attack

505
00:18:34,799 --> 00:18:36,880
works by the receiver recognizing that

506
00:18:36,880 --> 00:18:39,440
he gets some unusual message at the end

507
00:18:39,440 --> 00:18:40,880
so if he

508
00:18:40,880 --> 00:18:43,520
if as long as the plain text is correct

509
00:18:43,520 --> 00:18:45,280
there there will not be this unusual

510
00:18:45,280 --> 00:18:48,160
message so plain text integrity is fine

511
00:18:48,160 --> 00:18:49,200
i think

512
00:18:49,200 --> 00:18:51,520
yeah thanks uh any other question from

513
00:18:51,520 --> 00:18:54,480
the ask quick one two uh so can you give

514
00:18:54,480 --> 00:18:56,400
us some uh

515
00:18:56,400 --> 00:18:59,919
some insights on uh

516
00:19:00,559 --> 00:19:02,400
what does it cost let's say in terms of

517
00:19:02,400 --> 00:19:05,440
overheads to augment the to improve the

518
00:19:05,440 --> 00:19:08,240
system in the way you propose

519
00:19:08,240 --> 00:19:11,280
computation communication overheads

520
00:19:11,280 --> 00:19:13,120
yes

521
00:19:13,120 --> 00:19:16,640
so in in terms of the space um so the

522
00:19:16,640 --> 00:19:19,120
additional bits that we have to propose

523
00:19:19,120 --> 00:19:20,240
um the

524
00:19:20,240 --> 00:19:23,600
other solutions are well around

525
00:19:23,600 --> 00:19:26,000
less than one kilobyte in the overhead

526
00:19:26,000 --> 00:19:29,360
for a path length of three relays um our

527
00:19:29,360 --> 00:19:32,240
schemes would um the snark version end

528
00:19:32,240 --> 00:19:34,960
up with well around three kilobytes

529
00:19:34,960 --> 00:19:37,600
overhead and the uh updatable encryption

530
00:19:37,600 --> 00:19:39,280
version even with

531
00:19:39,280 --> 00:19:41,840
around seven and a half bytes

532
00:19:41,840 --> 00:19:43,840
kilobytes so

533
00:19:43,840 --> 00:19:46,720
yes it's considerably um more overhead

534
00:19:46,720 --> 00:19:49,280
to prevent this attack

535
00:19:49,280 --> 00:19:52,740
all right that's it's fair thanks

536
00:19:52,740 --> 00:19:55,919
[Music]

537
00:19:55,919 --> 00:19:57,919
since this is a section on real world

538
00:19:57,919 --> 00:19:59,600
protocols i was going to ask you if you

539
00:19:59,600 --> 00:20:01,630
had looked at implementing this in tour

540
00:20:01,630 --> 00:20:03,280
[Music]

541
00:20:03,280 --> 00:20:04,559
oh actually

542
00:20:04,559 --> 00:20:06,400
that's a really good question and that

543
00:20:06,400 --> 00:20:09,039
allows me to explain one more thing um

544
00:20:09,039 --> 00:20:11,280
we were looking at secure packet formats

545
00:20:11,280 --> 00:20:12,799
but this of course means that there are

546
00:20:12,799 --> 00:20:15,600
also still other attack vectors that the

547
00:20:15,600 --> 00:20:17,919
packet format cannot prevent uh protect

548
00:20:17,919 --> 00:20:20,240
against so if you think about timing of

549
00:20:20,240 --> 00:20:22,000
packets or traffic patterns this is

550
00:20:22,000 --> 00:20:24,240
nothing we can solve with the packet

551
00:20:24,240 --> 00:20:26,559
format but we need orthogonal measures

552
00:20:26,559 --> 00:20:29,840
and if you think about tor

553
00:20:29,840 --> 00:20:31,919
tor does not want to protect against

554
00:20:31,919 --> 00:20:33,919
these because it would be too costly in

555
00:20:33,919 --> 00:20:36,880
terms of latency so to a kind of accepts

556
00:20:36,880 --> 00:20:38,880
being vulnerable against the adversary

557
00:20:38,880 --> 00:20:40,480
model that we're targeting with this

558
00:20:40,480 --> 00:20:43,440
approach um so it is well something

559
00:20:43,440 --> 00:20:45,300
different

560
00:20:45,300 --> 00:20:48,399
[Music]

561
00:20:48,880 --> 00:20:49,840
um

562
00:20:49,840 --> 00:20:50,880
any

563
00:20:50,880 --> 00:20:53,840
further question from the audience uh

564
00:20:53,840 --> 00:20:57,440
if yeah thanks uh thanks christian uh

565
00:20:57,440 --> 00:20:58,320
again

566
00:20:58,320 --> 00:20:59,520
and uh

567
00:20:59,520 --> 00:21:01,520
then we can move to the third talk yeah

568
00:21:01,520 --> 00:21:03,120
thank you

569
00:21:03,120 --> 00:21:05,840
[Music]

570
00:21:05,840 --> 00:21:06,799
all right

571
00:21:06,799 --> 00:21:11,600
so the third talk will be given by uh

572
00:21:11,600 --> 00:21:13,360
karen seth who

573
00:21:13,360 --> 00:21:16,159
is with google research

574
00:21:16,159 --> 00:21:18,240
he is a

575
00:21:18,240 --> 00:21:20,320
software engineer in the privacy and

576
00:21:20,320 --> 00:21:22,240
data protection office

577
00:21:22,240 --> 00:21:24,640
if my information is up to date

578
00:21:24,640 --> 00:21:26,000
and

579
00:21:26,000 --> 00:21:28,480
he works on various aspects of security

580
00:21:28,480 --> 00:21:31,520
including secure multi-party computation

581
00:21:31,520 --> 00:21:32,480
on

582
00:21:32,480 --> 00:21:33,919
practical

583
00:21:33,919 --> 00:21:36,400
problems

584
00:21:37,039 --> 00:21:38,240
and

585
00:21:38,240 --> 00:21:41,520
he will be talking about

586
00:21:41,840 --> 00:21:43,360
private

587
00:21:43,360 --> 00:21:44,799
join

588
00:21:44,799 --> 00:21:47,520
and compute from pir with private

589
00:21:47,520 --> 00:21:50,559
information retrieval with default

590
00:21:50,559 --> 00:21:51,280
so

591
00:21:51,280 --> 00:21:56,039
karn floor is yours thanks

592
00:21:58,080 --> 00:22:01,280
you need to mute yourself

593
00:22:02,240 --> 00:22:04,480
ask that

594
00:22:04,480 --> 00:22:08,520
yes here you go

595
00:22:12,240 --> 00:22:14,559
i think we can hear you now

596
00:22:14,559 --> 00:22:18,039
no not yet

597
00:22:34,640 --> 00:22:38,360
can you hear us

598
00:22:41,520 --> 00:22:42,480
all right

599
00:22:42,480 --> 00:22:44,400
now the speaker

600
00:22:44,400 --> 00:22:45,200
is

601
00:22:45,200 --> 00:22:46,159
not

602
00:22:46,159 --> 00:22:47,600
emitting any noise we don't hear

603
00:22:47,600 --> 00:22:48,640
anything

604
00:22:48,640 --> 00:22:51,640
yes

605
00:22:54,480 --> 00:22:57,840
no we can't nope

606
00:23:00,640 --> 00:23:02,960
maybe you can like stop sharing on the

607
00:23:02,960 --> 00:23:04,799
share again

608
00:23:04,799 --> 00:23:06,559
okay you can hear me now

609
00:23:06,559 --> 00:23:09,559
yes

610
00:23:27,039 --> 00:23:29,760
can you hear me now

611
00:23:29,760 --> 00:23:31,600
yes okay perfect

612
00:23:31,600 --> 00:23:34,559
uh so sorry if this is a little bit odd

613
00:23:34,559 --> 00:23:36,559
uh hopefully this will work

614
00:23:36,559 --> 00:23:38,559
but thanks everybody and sorry about the

615
00:23:38,559 --> 00:23:40,000
difficulties

616
00:23:40,000 --> 00:23:41,760
um so today i'll be presenting thank you

617
00:23:41,760 --> 00:23:43,279
very much for the introduction so i'll

618
00:23:43,279 --> 00:23:44,960
be presenting this work with my

619
00:23:44,960 --> 00:23:47,600
co-authors which was on google and also

620
00:23:47,600 --> 00:23:49,520
with nitro who was an intern at the time

621
00:23:49,520 --> 00:23:52,880
and now is at arizona state

622
00:23:52,880 --> 00:23:54,799
um so let me just quickly go over the

623
00:23:54,799 --> 00:23:56,880
problem we're addressing

624
00:23:56,880 --> 00:23:58,159
so the problem we're addressing is

625
00:23:58,159 --> 00:23:59,760
something called inner join private

626
00:23:59,760 --> 00:24:01,440
joiner compute

627
00:24:01,440 --> 00:24:03,279
and in this problem you have a user who

628
00:24:03,279 --> 00:24:05,039
has a bunch of key value pairs

629
00:24:05,039 --> 00:24:06,880
corresponding to ids together with

630
00:24:06,880 --> 00:24:08,640
weights

631
00:24:08,640 --> 00:24:10,720
and a server who has a much larger data

632
00:24:10,720 --> 00:24:13,520
set of key value pairs

633
00:24:13,520 --> 00:24:16,000
and the goal is to compute the dot

634
00:24:16,000 --> 00:24:18,159
product over the intersection of the two

635
00:24:18,159 --> 00:24:20,559
sets so that means for those ids that

636
00:24:20,559 --> 00:24:23,200
are in both x and y that is both by the

637
00:24:23,200 --> 00:24:25,440
user and the server held by both compute

638
00:24:25,440 --> 00:24:28,320
the dot product of the associated values

639
00:24:28,320 --> 00:24:31,600
perhaps with some noise added

640
00:24:31,600 --> 00:24:33,440
and in particular we want that nothing

641
00:24:33,440 --> 00:24:34,799
more should be learned by either of the

642
00:24:34,799 --> 00:24:37,279
parties

643
00:24:37,279 --> 00:24:39,600
so our functionality goal as we just

644
00:24:39,600 --> 00:24:41,520
said is that users should learn the user

645
00:24:41,520 --> 00:24:42,880
should learn the dot product of the

646
00:24:42,880 --> 00:24:44,720
weights perhaps with noise added for ids

647
00:24:44,720 --> 00:24:47,120
in the intersection and additionally we

648
00:24:47,120 --> 00:24:49,200
want an efficiency

649
00:24:49,200 --> 00:24:50,480
goal which is that the user's

650
00:24:50,480 --> 00:24:53,760
computation and communication should be

651
00:24:53,760 --> 00:24:56,880
almost linear in only its own data size

652
00:24:56,880 --> 00:24:58,320
and in particular it should grow very

653
00:24:58,320 --> 00:25:00,559
slowly as the service data size grows

654
00:25:00,559 --> 00:25:01,840
and the assumption here is that the

655
00:25:01,840 --> 00:25:03,600
user's data set x is much smaller than

656
00:25:03,600 --> 00:25:06,559
the server's data set y

657
00:25:06,559 --> 00:25:08,960
and in addition we want privacy so

658
00:25:08,960 --> 00:25:10,640
parties inputs should remain hidden to

659
00:25:10,640 --> 00:25:12,799
each other and the elements of x

660
00:25:12,799 --> 00:25:15,520
intersection y should also remain hidden

661
00:25:15,520 --> 00:25:17,279
furthermore the size of the intersection

662
00:25:17,279 --> 00:25:19,520
should also remain hidden but we assume

663
00:25:19,520 --> 00:25:21,279
that it's okay to reveal

664
00:25:21,279 --> 00:25:23,919
the sizes of each party's inputs to each

665
00:25:23,919 --> 00:25:26,240
other

666
00:25:27,200 --> 00:25:29,760
and our approach in this is to build a

667
00:25:29,760 --> 00:25:32,000
tailored mpc protocol for computing this

668
00:25:32,000 --> 00:25:34,000
functionality and particularly focusing

669
00:25:34,000 --> 00:25:37,120
on asymmetric input sizes

670
00:25:37,120 --> 00:25:40,080
uh in terms of previous work uh

671
00:25:40,080 --> 00:25:41,679
another work by google which is called

672
00:25:41,679 --> 00:25:44,400
private joiner compute uh

673
00:25:44,400 --> 00:25:46,320
hides the intersection from the parties

674
00:25:46,320 --> 00:25:47,760
and allows computing some simple

675
00:25:47,760 --> 00:25:49,200
functions on the intersection but it

676
00:25:49,200 --> 00:25:51,279
reveals the intersection size

677
00:25:51,279 --> 00:25:53,600
and both parties incur cost proportional

678
00:25:53,600 --> 00:25:57,840
to each other's data set size

679
00:25:57,919 --> 00:25:59,600
on the other hand you could build a

680
00:25:59,600 --> 00:26:01,679
protocol on top of

681
00:26:01,679 --> 00:26:03,600
private information retrieval which

682
00:26:03,600 --> 00:26:06,320
would give you the

683
00:26:06,320 --> 00:26:07,120
the

684
00:26:07,120 --> 00:26:08,880
efficiency property that you want which

685
00:26:08,880 --> 00:26:11,679
is that the user's cost doesn't grow

686
00:26:11,679 --> 00:26:12,880
too quickly with the service data

687
00:26:12,880 --> 00:26:15,039
exercise but the straightforward way of

688
00:26:15,039 --> 00:26:17,600
building a pricing permission a private

689
00:26:17,600 --> 00:26:20,240
set intersection from here would reveal

690
00:26:20,240 --> 00:26:21,600
the interest intersection and

691
00:26:21,600 --> 00:26:24,559
intersection size

692
00:26:24,559 --> 00:26:26,960
and furthermore there's a huge number of

693
00:26:26,960 --> 00:26:28,720
wonderful works in the

694
00:26:28,720 --> 00:26:30,720
area of psi which also

695
00:26:30,720 --> 00:26:33,440
allow computing on the intersection

696
00:26:33,440 --> 00:26:35,520
and circuit psi is one prominent such

697
00:26:35,520 --> 00:26:36,880
example

698
00:26:36,880 --> 00:26:39,520
but many of these works include costs

699
00:26:39,520 --> 00:26:41,120
both parties will incur costs

700
00:26:41,120 --> 00:26:42,720
proportional to each other's data set

701
00:26:42,720 --> 00:26:44,240
size

702
00:26:44,240 --> 00:26:45,919
and so in this work we try to get all

703
00:26:45,919 --> 00:26:48,559
four of these properties

704
00:26:48,559 --> 00:26:50,559
and i just wanted to point out that

705
00:26:50,559 --> 00:26:52,640
there's a work by chanadal which also

706
00:26:52,640 --> 00:26:54,880
addresses exactly this uh

707
00:26:54,880 --> 00:26:57,200
this kind of uh

708
00:26:57,200 --> 00:26:59,279
space which is to get this asymmetric uh

709
00:26:59,279 --> 00:27:00,640
efficiency

710
00:27:00,640 --> 00:27:02,720
um and for a detailed comparison please

711
00:27:02,720 --> 00:27:04,640
take a look at the full version of the

712
00:27:04,640 --> 00:27:06,880
paper

713
00:27:06,880 --> 00:27:09,120
so i'll give a brief overview of our

714
00:27:09,120 --> 00:27:11,120
solution

715
00:27:11,120 --> 00:27:13,200
so we start from

716
00:27:13,200 --> 00:27:15,120
private information retrieval so in a

717
00:27:15,120 --> 00:27:16,559
standard private information retrieval

718
00:27:16,559 --> 00:27:18,720
protocol the user has an index and the

719
00:27:18,720 --> 00:27:21,279
server has a data set and you retrieve

720
00:27:21,279 --> 00:27:23,520
the i i the server user retrieves the

721
00:27:23,520 --> 00:27:26,399
item from the server

722
00:27:26,399 --> 00:27:28,559
our first step is to build a keyword

723
00:27:28,559 --> 00:27:29,520
peer

724
00:27:29,520 --> 00:27:31,919
from an index peer so now the user has a

725
00:27:31,919 --> 00:27:34,399
keyword and will retrieve the value

726
00:27:34,399 --> 00:27:36,720
associated with that keyword if x is in

727
00:27:36,720 --> 00:27:38,240
y

728
00:27:38,240 --> 00:27:40,799
or otherwise retrieve a garbage value if

729
00:27:40,799 --> 00:27:43,279
x is knotted y

730
00:27:43,279 --> 00:27:44,880
so this is the first step

731
00:27:44,880 --> 00:27:46,799
and the next step is instead of

732
00:27:46,799 --> 00:27:48,799
retrieving a garbage value of x is not

733
00:27:48,799 --> 00:27:51,279
in y the user will retrieve a prescribed

734
00:27:51,279 --> 00:27:54,799
default value from the server if x is

735
00:27:54,799 --> 00:27:56,240
not in y

736
00:27:56,240 --> 00:27:59,360
so this is the next thing we build

737
00:27:59,360 --> 00:28:01,679
the first step is that we allow the user

738
00:28:01,679 --> 00:28:04,640
to also include a value v

739
00:28:04,640 --> 00:28:06,960
and it'll learn the product of v times w

740
00:28:06,960 --> 00:28:09,039
if x is in y or it'll learn the default

741
00:28:09,039 --> 00:28:11,279
value

742
00:28:11,279 --> 00:28:13,120
and then the final step is we allow the

743
00:28:13,120 --> 00:28:16,720
server to specify a random mask and now

744
00:28:16,720 --> 00:28:18,480
the user will learn either the mass

745
00:28:18,480 --> 00:28:22,000
product v times w if x was in y or it'll

746
00:28:22,000 --> 00:28:24,399
learn the mass default value if x was

747
00:28:24,399 --> 00:28:25,440
not in y

748
00:28:25,440 --> 00:28:27,200
and this random mask is really important

749
00:28:27,200 --> 00:28:28,799
because now with this mass the user

750
00:28:28,799 --> 00:28:30,480
won't be able to tell which of the two

751
00:28:30,480 --> 00:28:32,240
values it received and therefore will

752
00:28:32,240 --> 00:28:36,320
not learn whether x's and y are not

753
00:28:36,320 --> 00:28:38,000
and this is something we call extended

754
00:28:38,000 --> 00:28:39,279
period default and this is what we

755
00:28:39,279 --> 00:28:41,120
actually build

756
00:28:41,120 --> 00:28:42,960
and then it turns out that from this

757
00:28:42,960 --> 00:28:44,960
extended period default it actually is

758
00:28:44,960 --> 00:28:47,279
straightforward to build this inner join

759
00:28:47,279 --> 00:28:49,039
private joining compute and i'm not

760
00:28:49,039 --> 00:28:50,399
going to go into too much of the details

761
00:28:50,399 --> 00:28:51,520
here but it's actually quite a

762
00:28:51,520 --> 00:28:54,559
straightforward construction

763
00:28:54,640 --> 00:28:56,640
um and just a teaser about what's in the

764
00:28:56,640 --> 00:28:58,799
actual construction

765
00:28:58,799 --> 00:28:59,600
so

766
00:28:59,600 --> 00:29:02,000
our key idea is to combine index pure

767
00:29:02,000 --> 00:29:03,919
with bloom filters and carbo-bloom

768
00:29:03,919 --> 00:29:06,720
filters to build our keyword here

769
00:29:06,720 --> 00:29:08,960
and then use a small tailored sub

770
00:29:08,960 --> 00:29:11,279
protocol to convert a potential garbage

771
00:29:11,279 --> 00:29:15,200
value to a programmed default value

772
00:29:15,200 --> 00:29:16,799
and the key point here is that this

773
00:29:16,799 --> 00:29:18,399
tailored sub protocol becomes more

774
00:29:18,399 --> 00:29:20,399
efficient due to our use of bloom

775
00:29:20,399 --> 00:29:22,320
filters

776
00:29:22,320 --> 00:29:23,600
and in our work we actually have two

777
00:29:23,600 --> 00:29:26,080
constructions one is a so-called using a

778
00:29:26,080 --> 00:29:28,320
so-called naive peer which has a heavy

779
00:29:28,320 --> 00:29:30,799
offline phase but an efficient online

780
00:29:30,799 --> 00:29:32,080
phase

781
00:29:32,080 --> 00:29:34,399
and the second is using a compressing

782
00:29:34,399 --> 00:29:36,080
peer which is what you usually think of

783
00:29:36,080 --> 00:29:38,399
in terms of single server peer

784
00:29:38,399 --> 00:29:40,320
and this will have no setup but it'll

785
00:29:40,320 --> 00:29:42,399
give us the thing the property we wanted

786
00:29:42,399 --> 00:29:44,640
which is that the total cost of offline

787
00:29:44,640 --> 00:29:46,799
plus online phase the client's cost will

788
00:29:46,799 --> 00:29:48,080
grow

789
00:29:48,080 --> 00:29:50,080
very slowly as the service data set size

790
00:29:50,080 --> 00:29:52,240
grows

791
00:29:52,240 --> 00:29:53,919
and we implemented our system and

792
00:29:53,919 --> 00:29:56,000
benchmarked it against uh other

793
00:29:56,000 --> 00:29:58,480
protocols and i'll just show quickly in

794
00:29:58,480 --> 00:30:00,159
this graph here

795
00:30:00,159 --> 00:30:02,480
so our constructions are construction

796
00:30:02,480 --> 00:30:04,320
one and construction two in the online

797
00:30:04,320 --> 00:30:06,480
phase you can see that as the server

798
00:30:06,480 --> 00:30:09,200
data set size grows the client's

799
00:30:09,200 --> 00:30:11,440
communication cost pictured here grows

800
00:30:11,440 --> 00:30:13,679
very very slowly and that's exactly what

801
00:30:13,679 --> 00:30:15,520
we wanted

802
00:30:15,520 --> 00:30:17,279
and of course there's more measurements

803
00:30:17,279 --> 00:30:20,000
in the full paper

804
00:30:20,000 --> 00:30:20,840
um

805
00:30:20,840 --> 00:30:22,880
just wanted to highlight a couple of

806
00:30:22,880 --> 00:30:25,600
more recent works which could improve on

807
00:30:25,600 --> 00:30:27,600
the circuit psi so there's a lot of

808
00:30:27,600 --> 00:30:29,600
works on vector oily

809
00:30:29,600 --> 00:30:31,760
uh that using vector value to build psi

810
00:30:31,760 --> 00:30:33,360
and this is now basically the new state

811
00:30:33,360 --> 00:30:36,080
of the arts for psi so this could be a

812
00:30:36,080 --> 00:30:37,279
significant improvement over the

813
00:30:37,279 --> 00:30:39,200
baseline we compared against and

814
00:30:39,200 --> 00:30:41,120
furthermore the second work which we

815
00:30:41,120 --> 00:30:43,520
discussed which addresses a similar

816
00:30:43,520 --> 00:30:45,760
setting has a follow-up which also

817
00:30:45,760 --> 00:30:46,880
improves on communication and

818
00:30:46,880 --> 00:30:48,720
computation and this is also interesting

819
00:30:48,720 --> 00:30:51,120
for that

820
00:30:51,120 --> 00:30:53,440
thanks very much and happy if there are

821
00:30:53,440 --> 00:30:55,039
any questions

822
00:30:55,039 --> 00:30:58,480
i'm just going to stop sharing because

823
00:30:58,559 --> 00:31:00,320
all right thank you very much

824
00:31:00,320 --> 00:31:04,439
questions for our speaker please

825
00:31:08,399 --> 00:31:10,559
uh let me ask a quick question i didn't

826
00:31:10,559 --> 00:31:12,799
see any hunt being raised i noticed in

827
00:31:12,799 --> 00:31:15,120
your in your paper

828
00:31:15,120 --> 00:31:17,200
you have an interesting uh

829
00:31:17,200 --> 00:31:19,919
i'll say evaluation which is not

830
00:31:19,919 --> 00:31:22,799
appearing often you are

831
00:31:22,799 --> 00:31:24,960
approximately you're estimating monetary

832
00:31:24,960 --> 00:31:27,039
costs for your solution do you want to

833
00:31:27,039 --> 00:31:29,279
say a few words about this

834
00:31:29,279 --> 00:31:30,799
yeah that's a great question and

835
00:31:30,799 --> 00:31:33,039
actually this is something that's slowly

836
00:31:33,039 --> 00:31:35,600
becoming standard in psi papers because

837
00:31:35,600 --> 00:31:37,360
there's this question that keeps coming

838
00:31:37,360 --> 00:31:39,279
off of uh

839
00:31:39,279 --> 00:31:41,279
end to end runtime versus communication

840
00:31:41,279 --> 00:31:42,080
cost

841
00:31:42,080 --> 00:31:43,919
and even for us at google like

842
00:31:43,919 --> 00:31:45,840
communication cost ends up being very

843
00:31:45,840 --> 00:31:48,159
expensive compared to computation costs

844
00:31:48,159 --> 00:31:49,840
and it's hard to quantify like what's

845
00:31:49,840 --> 00:31:51,840
the most efficient protocol because in

846
00:31:51,840 --> 00:31:53,120
practice it usually turns out to be

847
00:31:53,120 --> 00:31:54,799
what's the cheapest to run

848
00:31:54,799 --> 00:31:56,399
and so that's why we include this

849
00:31:56,399 --> 00:31:58,240
monitoring cost because actually if you

850
00:31:58,240 --> 00:31:59,519
look at our

851
00:31:59,519 --> 00:32:01,440
comparison with other works we have

852
00:32:01,440 --> 00:32:03,760
higher computation costs but lower

853
00:32:03,760 --> 00:32:05,279
communication costs especially for the

854
00:32:05,279 --> 00:32:07,519
clients and so our argument that we have

855
00:32:07,519 --> 00:32:09,120
an improvement over existing work is

856
00:32:09,120 --> 00:32:11,440
that our total monetary cost

857
00:32:11,440 --> 00:32:13,760
is better in some segments so does that

858
00:32:13,760 --> 00:32:15,760
make sense yeah

859
00:32:15,760 --> 00:32:18,000
so so who who picks up the monetary cost

860
00:32:18,000 --> 00:32:21,440
is this the the cost on uh the uh

861
00:32:21,440 --> 00:32:24,080
on running for example

862
00:32:24,080 --> 00:32:26,799
processes in the cloud on the cloud or

863
00:32:26,799 --> 00:32:29,200
how

864
00:32:29,840 --> 00:32:31,519
exactly so there's a few different ways

865
00:32:31,519 --> 00:32:33,840
you could measure but i think the way we

866
00:32:33,840 --> 00:32:36,000
measured it was the batch processing

867
00:32:36,000 --> 00:32:39,200
mode on google cloud platform um and

868
00:32:39,200 --> 00:32:40,799
then there's other modes where you have

869
00:32:40,799 --> 00:32:43,760
like uh not batch processing but like uh

870
00:32:43,760 --> 00:32:45,840
more like high priority machines and

871
00:32:45,840 --> 00:32:46,960
that will give a different cost

872
00:32:46,960 --> 00:32:48,799
breakdown but we went for the patchwork

873
00:32:48,799 --> 00:32:51,679
because that seems to make sense for us

874
00:32:51,679 --> 00:32:54,000
awesome thanks

875
00:32:54,000 --> 00:32:56,320
i got a very quick follow-up so on the

876
00:32:56,320 --> 00:32:58,880
on the money monetary cost so

877
00:32:58,880 --> 00:33:01,200
the the the price actually the actual

878
00:33:01,200 --> 00:33:03,519
cost may vary right then would would

879
00:33:03,519 --> 00:33:05,120
this influence your

880
00:33:05,120 --> 00:33:08,480
optimizations over each protocol

881
00:33:08,480 --> 00:33:11,360
um yeah so that's a really good question

882
00:33:11,360 --> 00:33:13,679
the cost definitely varies in a whole

883
00:33:13,679 --> 00:33:15,200
bunch of ways for example if you're

884
00:33:15,200 --> 00:33:16,880
within the same cloud region within the

885
00:33:16,880 --> 00:33:19,679
same cloud provider and things like that

886
00:33:19,679 --> 00:33:22,000
um generally there's a factor of two to

887
00:33:22,000 --> 00:33:23,760
ten in the

888
00:33:23,760 --> 00:33:25,440
ratio between communication cost and

889
00:33:25,440 --> 00:33:28,320
computation costs so if you're

890
00:33:28,320 --> 00:33:30,080
more than 10x better then it's like

891
00:33:30,080 --> 00:33:31,919
doesn't really matter but if you're

892
00:33:31,919 --> 00:33:33,519
somewhere in that region then you know

893
00:33:33,519 --> 00:33:35,279
it's going to trade off and this is

894
00:33:35,279 --> 00:33:36,720
something that's come up in other psi

895
00:33:36,720 --> 00:33:38,399
works also sometimes you only have a 4x

896
00:33:38,399 --> 00:33:40,799
improvement so it's going to uh you know

897
00:33:40,799 --> 00:33:42,640
depend on what your exact rate off is

898
00:33:42,640 --> 00:33:44,559
yeah i said

899
00:33:44,559 --> 00:33:46,159
one last quick question is your protocol

900
00:33:46,159 --> 00:33:48,159
currently is semi honest right or

901
00:33:48,159 --> 00:33:49,600
malicious

902
00:33:49,600 --> 00:33:50,960
yeah that's a great question this is

903
00:33:50,960 --> 00:33:52,960
currently a semi honest protocol and

904
00:33:52,960 --> 00:33:54,480
it's an excellent question how you would

905
00:33:54,480 --> 00:33:56,080
do this in the malicious setting and

906
00:33:56,080 --> 00:33:56,880
there's

907
00:33:56,880 --> 00:33:59,760
a whole bunch of

908
00:34:00,000 --> 00:34:01,440
there's actually two

909
00:34:01,440 --> 00:34:02,799
different problems that come up when

910
00:34:02,799 --> 00:34:04,399
you're doing psi in the malicious

911
00:34:04,399 --> 00:34:05,840
setting one is that people could just

912
00:34:05,840 --> 00:34:08,159
change their input which is usually not

913
00:34:08,159 --> 00:34:10,719
even addressed by mpc security models

914
00:34:10,719 --> 00:34:12,560
and the second one is that you know you

915
00:34:12,560 --> 00:34:14,159
could

916
00:34:14,159 --> 00:34:16,000
maliciously attack the protocol usually

917
00:34:16,000 --> 00:34:17,280
if you get malicious security it means

918
00:34:17,280 --> 00:34:18,719
it's equivalent to changing your input

919
00:34:18,719 --> 00:34:20,560
but actually often changing your input

920
00:34:20,560 --> 00:34:22,239
is a devastating enough attack so it's

921
00:34:22,239 --> 00:34:23,918
like sometimes you may not want to use

922
00:34:23,918 --> 00:34:25,520
this in a case where you have malicious

923
00:34:25,520 --> 00:34:26,960
adversaries

924
00:34:26,960 --> 00:34:28,399
i don't know if that makes sense

925
00:34:28,399 --> 00:34:31,440
yeah very interesting okay great

926
00:34:31,440 --> 00:34:32,800
thanks

927
00:34:32,800 --> 00:34:36,800
thank you all right awesome

928
00:34:37,040 --> 00:34:38,079
there's no

929
00:34:38,079 --> 00:34:40,560
other burning question shall we move on

930
00:34:40,560 --> 00:34:44,078
to the next presentation

931
00:34:44,719 --> 00:34:47,760
all right thanks again karen for

932
00:34:47,760 --> 00:34:50,399
the q a and the presentation

933
00:34:50,399 --> 00:34:51,280
uh

934
00:34:51,280 --> 00:34:53,520
our next

935
00:34:53,520 --> 00:34:55,599
paper is

936
00:34:55,599 --> 00:34:56,960
a novel in the sense that it is

937
00:34:56,960 --> 00:34:59,440
presented by two speakers

938
00:34:59,440 --> 00:35:01,440
they will tell us how they will

939
00:35:01,440 --> 00:35:03,680
split the task

940
00:35:03,680 --> 00:35:07,040
the paper is

941
00:35:07,040 --> 00:35:08,800
generalized channels from limited

942
00:35:08,800 --> 00:35:10,720
blockchain scripts

943
00:35:10,720 --> 00:35:13,280
and adapter signatures

944
00:35:13,280 --> 00:35:16,800
and the two presenters are savash riyaki

945
00:35:16,800 --> 00:35:19,760
and anders andreas erwig

946
00:35:19,760 --> 00:35:23,680
they're both phd students

947
00:35:23,680 --> 00:35:25,839
pursuing their phd with a small

948
00:35:25,839 --> 00:35:28,560
differential in terms of the start time

949
00:35:28,560 --> 00:35:30,079
at tu darmstadt in the applied

950
00:35:30,079 --> 00:35:32,720
cryptography group so gentlemen the

951
00:35:32,720 --> 00:35:35,598
floor is yours

952
00:35:35,680 --> 00:35:38,720
thank you very much can you hear me

953
00:35:38,720 --> 00:35:39,599
yes

954
00:35:39,599 --> 00:35:41,359
perfect and you can also see my slides i

955
00:35:41,359 --> 00:35:43,119
hope

956
00:35:43,119 --> 00:35:44,480
great okay

957
00:35:44,480 --> 00:35:46,000
so thank you very much for the nice

958
00:35:46,000 --> 00:35:48,400
introduction hi i'm sierra

959
00:35:48,400 --> 00:35:50,560
today i'm jose vega and i will present

960
00:35:50,560 --> 00:35:52,079
the paper generalized channel from

961
00:35:52,079 --> 00:35:54,240
limited blockchain scripts and adapter

962
00:35:54,240 --> 00:35:56,480
signatures and so for the five minute

963
00:35:56,480 --> 00:35:58,480
presentation uh i will do the

964
00:35:58,480 --> 00:35:59,680
presentation but for the questions

965
00:35:59,680 --> 00:36:01,520
you're both available here the longer

966
00:36:01,520 --> 00:36:04,400
presentation is done by both of us uh so

967
00:36:04,400 --> 00:36:05,359
i

968
00:36:05,359 --> 00:36:08,640
would be happy if you also check that uh

969
00:36:08,640 --> 00:36:12,879
this is a joint work with lucas almayer

970
00:36:16,240 --> 00:36:19,200
pedro moreno sanchez and me

971
00:36:19,200 --> 00:36:21,439
okay

972
00:36:22,800 --> 00:36:25,520
let me see i can

973
00:36:25,520 --> 00:36:28,160
good so before before i start let me

974
00:36:28,160 --> 00:36:31,119
give a very short

975
00:36:31,119 --> 00:36:33,680
sneak peek into what we achieve actually

976
00:36:33,680 --> 00:36:35,839
we present an efficient application

977
00:36:35,839 --> 00:36:38,400
agnostic cheap and interoperable

978
00:36:38,400 --> 00:36:39,839
off-chain channel solution for

979
00:36:39,839 --> 00:36:41,359
cryptocurrencies

980
00:36:41,359 --> 00:36:43,359
now let me continue with some motivation

981
00:36:43,359 --> 00:36:46,079
so blockchains were introduced in the

982
00:36:46,079 --> 00:36:48,400
past decade and used in order to allow

983
00:36:48,400 --> 00:36:50,800
parties to make transactions using a

984
00:36:50,800 --> 00:36:52,720
decentralized

985
00:36:52,720 --> 00:36:54,880
infrastructure namely the blockchain how

986
00:36:54,880 --> 00:36:57,040
does this work alice creates a

987
00:36:57,040 --> 00:36:58,560
transaction that you want to send some

988
00:36:58,560 --> 00:37:00,400
coins to bob signs it and sends it to

989
00:37:00,400 --> 00:37:01,839
the blockchain

990
00:37:01,839 --> 00:37:03,599
however

991
00:37:03,599 --> 00:37:05,119
blocks in a blockchain usually have

992
00:37:05,119 --> 00:37:08,160
fixed size and the average time that it

993
00:37:08,160 --> 00:37:11,200
takes to create the block is also fixed

994
00:37:11,200 --> 00:37:12,880
this means that blockchains have limited

995
00:37:12,880 --> 00:37:14,240
throughput so if you compare them for

996
00:37:14,240 --> 00:37:16,800
example to something like a visa network

997
00:37:16,800 --> 00:37:20,800
it is the throughput is way lower

998
00:37:20,800 --> 00:37:22,640
and this results in part is having to

999
00:37:22,640 --> 00:37:25,280
pay high transaction fees

1000
00:37:25,280 --> 00:37:27,599
to tackle this problem uh off-chain

1001
00:37:27,599 --> 00:37:29,920
protocols were introduced

1002
00:37:29,920 --> 00:37:32,560
um the most prominent uh and actually

1003
00:37:32,560 --> 00:37:34,560
used in practice option protocol are

1004
00:37:34,560 --> 00:37:37,040
payment channel protocols uh here i will

1005
00:37:37,040 --> 00:37:38,880
give just an overview on how payment

1006
00:37:38,880 --> 00:37:40,720
channel protocols actually work they

1007
00:37:40,720 --> 00:37:42,800
usually are executed in four phases

1008
00:37:42,800 --> 00:37:45,200
creation update closure and if necessary

1009
00:37:45,200 --> 00:37:46,320
punishment

1010
00:37:46,320 --> 00:37:48,160
during the creation phase parties first

1011
00:37:48,160 --> 00:37:50,400
lock some coins on the blockchain after

1012
00:37:50,400 --> 00:37:52,079
they have done this they create the

1013
00:37:52,079 --> 00:37:53,920
channel and they can update it as many

1014
00:37:53,920 --> 00:37:56,480
times as they want off chain without

1015
00:37:56,480 --> 00:37:58,800
communicating with a blockchain finally

1016
00:37:58,800 --> 00:38:00,800
when they are ready they can submit the

1017
00:38:00,800 --> 00:38:02,240
latest state of their channel to the

1018
00:38:02,240 --> 00:38:04,640
blockchain and they would get a payout

1019
00:38:04,640 --> 00:38:06,400
accordingly

1020
00:38:06,400 --> 00:38:07,920
however

1021
00:38:07,920 --> 00:38:09,680
what would happen

1022
00:38:09,680 --> 00:38:12,400
if a party submits here bob an older

1023
00:38:12,400 --> 00:38:13,920
state this must be beneficial to him so

1024
00:38:13,920 --> 00:38:15,440
he might have in this older state more

1025
00:38:15,440 --> 00:38:16,800
money in the channel

1026
00:38:16,800 --> 00:38:18,320
well advanced blockchains such as

1027
00:38:18,320 --> 00:38:19,839
ethereum

1028
00:38:19,839 --> 00:38:22,240
can run complex programs and they can

1029
00:38:22,240 --> 00:38:24,400
check for example the state number in

1030
00:38:24,400 --> 00:38:26,560
these states and they would only do the

1031
00:38:26,560 --> 00:38:28,880
payout according to the latest state

1032
00:38:28,880 --> 00:38:30,640
but

1033
00:38:30,640 --> 00:38:32,720
bitcoin and many other similar

1034
00:38:32,720 --> 00:38:34,480
cryptocurrencies cannot do such

1035
00:38:34,480 --> 00:38:36,000
comparisons because they cannot run

1036
00:38:36,000 --> 00:38:38,320
really uh uh

1037
00:38:38,320 --> 00:38:40,320
pro complex programs

1038
00:38:40,320 --> 00:38:42,720
and in order to prevent pop from

1039
00:38:42,720 --> 00:38:44,960
profiting from such an attack punishment

1040
00:38:44,960 --> 00:38:47,599
mechanisms will use so if bob submits

1041
00:38:47,599 --> 00:38:50,400
such an older attack here as n minus one

1042
00:38:50,400 --> 00:38:52,800
alice can actually punish bob by getting

1043
00:38:52,800 --> 00:38:54,480
all the money in the channel so bob's

1044
00:38:54,480 --> 00:38:58,079
money is now also completely gone

1045
00:38:59,760 --> 00:39:02,640
the most famous uh payment channel used

1046
00:39:02,640 --> 00:39:04,880
in practice actually uh developed on

1047
00:39:04,880 --> 00:39:08,560
bitcoin is uh lightning channels uh

1048
00:39:08,560 --> 00:39:10,480
which was developed by punan adrija in

1049
00:39:10,480 --> 00:39:12,880
2016. here i give a high level overview

1050
00:39:12,880 --> 00:39:16,960
on actually on how um how they operate

1051
00:39:16,960 --> 00:39:19,440
well as i said both parties must be able

1052
00:39:19,440 --> 00:39:21,520
to submit the latest uh state to the

1053
00:39:21,520 --> 00:39:23,760
blockchain to get the payout so

1054
00:39:23,760 --> 00:39:25,520
uh this style of channels has state

1055
00:39:25,520 --> 00:39:28,640
duplication both parties have the state

1056
00:39:28,640 --> 00:39:30,160
that they can publish and of course the

1057
00:39:30,160 --> 00:39:32,560
other party can can punish

1058
00:39:32,560 --> 00:39:36,079
if they submit an older state

1059
00:39:36,079 --> 00:39:38,000
and i would like to also point out that

1060
00:39:38,000 --> 00:39:39,839
we all either have the payouts or the

1061
00:39:39,839 --> 00:39:41,359
punishment we cannot have both at the

1062
00:39:41,359 --> 00:39:42,800
same time because there's simply not

1063
00:39:42,800 --> 00:39:45,280
enough money in the chat

1064
00:39:45,280 --> 00:39:48,400
this concept can be naively generalized

1065
00:39:48,400 --> 00:39:50,160
to allow multiple applications or

1066
00:39:50,160 --> 00:39:53,200
multiple payments happening

1067
00:39:53,200 --> 00:39:54,960
on the same channel so we can have

1068
00:39:54,960 --> 00:39:57,680
multiple payments on the same channel

1069
00:39:57,680 --> 00:39:59,760
that is opened independently of one

1070
00:39:59,760 --> 00:40:02,880
another to a sense but if we generalize

1071
00:40:02,880 --> 00:40:05,680
lighting in this naive way we would have

1072
00:40:05,680 --> 00:40:07,760
punished per application so per output

1073
00:40:07,760 --> 00:40:10,640
pair per each of these applications you

1074
00:40:10,640 --> 00:40:12,319
would have punishments

1075
00:40:12,319 --> 00:40:14,880
note that these payouts can also have

1076
00:40:14,880 --> 00:40:16,319
some rules on them so there might be

1077
00:40:16,319 --> 00:40:17,839
conditional payments and this is

1078
00:40:17,839 --> 00:40:19,359
dependent on the underlying blockchain

1079
00:40:19,359 --> 00:40:22,480
and the application that you run

1080
00:40:22,560 --> 00:40:24,160
as another point i want to say that this

1081
00:40:24,160 --> 00:40:27,119
is just uh this version of lightning is

1082
00:40:27,119 --> 00:40:28,720
not really analyzed in practice i'm just

1083
00:40:28,720 --> 00:40:31,280
saying that it is possible uh to do this

1084
00:40:31,280 --> 00:40:33,200
generalization in ifa but there will be

1085
00:40:33,200 --> 00:40:34,960
some issues let me get a little bit more

1086
00:40:34,960 --> 00:40:36,400
into it

1087
00:40:36,400 --> 00:40:38,480
so punish per application

1088
00:40:38,480 --> 00:40:40,319
results in significant unchanged

1089
00:40:40,319 --> 00:40:43,200
communication um because you are also

1090
00:40:43,200 --> 00:40:45,040
submitting all these punishment

1091
00:40:45,040 --> 00:40:46,960
conditions alongside the application

1092
00:40:46,960 --> 00:40:50,000
itself and state duplication results in

1093
00:40:50,000 --> 00:40:51,599
significant off-chain communication if

1094
00:40:51,599 --> 00:40:53,520
you have nested applications this is for

1095
00:40:53,520 --> 00:40:54,720
example national applications are for

1096
00:40:54,720 --> 00:40:56,160
example necessary to build virtual

1097
00:40:56,160 --> 00:40:58,560
channels um uh

1098
00:40:58,560 --> 00:41:00,960
and these are actually built uh on top

1099
00:41:00,960 --> 00:41:02,880
of bitcoin at the moment

1100
00:41:02,880 --> 00:41:04,240
you can check the bitcoin compatible

1101
00:41:04,240 --> 00:41:06,480
visual paper which appeared this year in

1102
00:41:06,480 --> 00:41:07,839
smp

1103
00:41:07,839 --> 00:41:10,800
okay let me now go to our contribution

1104
00:41:10,800 --> 00:41:13,359
we formalize the concept of generalized

1105
00:41:13,359 --> 00:41:16,079
channels in uc which does not require

1106
00:41:16,079 --> 00:41:18,079
state duplication and does not have

1107
00:41:18,079 --> 00:41:20,079
punish per application

1108
00:41:20,079 --> 00:41:21,920
we give efficient construction based on

1109
00:41:21,920 --> 00:41:24,480
adapter signatures

1110
00:41:24,480 --> 00:41:26,079
and we formalize electronic signatures

1111
00:41:26,079 --> 00:41:27,440
to this end for the first time as a

1112
00:41:27,440 --> 00:41:29,760
standalone primitive

1113
00:41:29,760 --> 00:41:31,280
we further show how schnoor and

1114
00:41:31,280 --> 00:41:33,359
ecdsa-based adapter signatures can be

1115
00:41:33,359 --> 00:41:34,480
instantiated

1116
00:41:34,480 --> 00:41:36,880
uh i want to say that um schneider and

1117
00:41:36,880 --> 00:41:38,160
cdsa are the

1118
00:41:38,160 --> 00:41:39,680
most prominent

1119
00:41:39,680 --> 00:41:41,520
signature schemes used on blockchains

1120
00:41:41,520 --> 00:41:43,359
nowadays

1121
00:41:43,359 --> 00:41:44,960
we further implement and evaluate our

1122
00:41:44,960 --> 00:41:47,280
solution and we provide proofs in the

1123
00:41:47,280 --> 00:41:49,680
universal composability setting

1124
00:41:49,680 --> 00:41:51,040
just a short word on the history of

1125
00:41:51,040 --> 00:41:52,800
adapter signatures adapter signatures

1126
00:41:52,800 --> 00:41:55,839
were uh discussed uh informally on

1127
00:41:55,839 --> 00:41:57,920
mailing lists

1128
00:41:57,920 --> 00:42:00,720
from 2017 to 2018

1129
00:42:00,720 --> 00:42:03,440
on ethereum and on uh bitcoin and

1130
00:42:03,440 --> 00:42:05,839
blockchain communities uh the first work

1131
00:42:05,839 --> 00:42:08,560
that i'm familiar that actually used the

1132
00:42:08,560 --> 00:42:11,440
concept of adapter uh signatures in an

1133
00:42:11,440 --> 00:42:13,359
academic paper was by muller voltaire in

1134
00:42:13,359 --> 00:42:16,800
2019 however they do not um formalize

1135
00:42:16,800 --> 00:42:19,200
this primitive as a standalone primitive

1136
00:42:19,200 --> 00:42:21,119
in this work we formalize a single party

1137
00:42:21,119 --> 00:42:24,079
case as a standalone primitive

1138
00:42:24,079 --> 00:42:27,520
um shortly after uh esknet al entire hl

1139
00:42:27,520 --> 00:42:29,200
showed how we can actually build post

1140
00:42:29,200 --> 00:42:31,440
quantum secure adapter signatures and

1141
00:42:31,440 --> 00:42:33,359
finally air we get al

1142
00:42:33,359 --> 00:42:35,599
in pkc 2001

1143
00:42:35,599 --> 00:42:38,400
21 uh showed how we can build two-party

1144
00:42:38,400 --> 00:42:40,160
adapter signatures these two works are

1145
00:42:40,160 --> 00:42:42,800
also i think accepted at ezrex and

1146
00:42:42,800 --> 00:42:45,760
financial crypto

1147
00:42:45,760 --> 00:42:48,400
a short word on evaluation comparison of

1148
00:42:48,400 --> 00:42:50,960
generalized channels versus the lighting

1149
00:42:50,960 --> 00:42:52,640
channels so

1150
00:42:52,640 --> 00:42:53,839
in case of

1151
00:42:53,839 --> 00:42:56,240
off-chain communication as you can see

1152
00:42:56,240 --> 00:42:58,640
here we can do much better than uh

1153
00:42:58,640 --> 00:43:01,520
lightning and also the punishment uh

1154
00:43:01,520 --> 00:43:03,280
case on-chain communication for

1155
00:43:03,280 --> 00:43:05,280
generalized channels is is way lower

1156
00:43:05,280 --> 00:43:07,280
than lightning for concrete numbers i

1157
00:43:07,280 --> 00:43:08,240
would refer you to the longer

1158
00:43:08,240 --> 00:43:11,040
presentation or the paper with this

1159
00:43:11,040 --> 00:43:13,200
i would like to thank you all

1160
00:43:13,200 --> 00:43:14,720
and if you have any questions feel free

1161
00:43:14,720 --> 00:43:18,560
to contact us or ask here thank you

1162
00:43:21,520 --> 00:43:24,640
all right thank you very much

1163
00:43:25,280 --> 00:43:27,280
quick quick question can you just

1164
00:43:27,280 --> 00:43:30,000
help everyone so what are applications

1165
00:43:30,000 --> 00:43:32,560
of your of your tool

1166
00:43:32,560 --> 00:43:33,760
so that that's

1167
00:43:33,760 --> 00:43:35,760
uh that's a very good question so one of

1168
00:43:35,760 --> 00:43:38,720
them is virtual channels uh as i

1169
00:43:38,720 --> 00:43:40,240
shortly point to that future chance

1170
00:43:40,240 --> 00:43:42,640
means that if let's say i i have alice

1171
00:43:42,640 --> 00:43:44,400
and bob who have a channel and bob and

1172
00:43:44,400 --> 00:43:46,480
charlie have a channel if they want to

1173
00:43:46,480 --> 00:43:47,920
wrote payments

1174
00:43:47,920 --> 00:43:50,560
between each other in the naive way uh

1175
00:43:50,560 --> 00:43:52,160
bob must be active all the time and

1176
00:43:52,160 --> 00:43:53,839
allow the payments to go through virtual

1177
00:43:53,839 --> 00:43:55,920
channels kind of circumvent this so that

1178
00:43:55,920 --> 00:43:57,440
for each update you don't have to do

1179
00:43:57,440 --> 00:43:59,040
this but there are also other

1180
00:43:59,040 --> 00:44:02,319
applications such as um

1181
00:44:02,319 --> 00:44:04,800
claim and refund applications uh which

1182
00:44:04,800 --> 00:44:07,760
which which allows you to have generic

1183
00:44:07,760 --> 00:44:10,160
conditional payments now for for claim

1184
00:44:10,160 --> 00:44:12,480
and refund i think it was a crypto paper

1185
00:44:12,480 --> 00:44:16,960
in 2015 or 14 um you had to do on-chain

1186
00:44:16,960 --> 00:44:18,640
communication for for each of the

1187
00:44:18,640 --> 00:44:20,640
conditional payments now you can lift

1188
00:44:20,640 --> 00:44:23,839
this off chain so

1189
00:44:23,920 --> 00:44:26,560
more or less

1190
00:44:27,200 --> 00:44:28,960
many of the two-party applications that

1191
00:44:28,960 --> 00:44:30,640
you had to do previously on chain now

1192
00:44:30,640 --> 00:44:33,520
you can do off-chain

1193
00:44:34,839 --> 00:44:38,079
thanks more questions for

1194
00:44:38,079 --> 00:44:40,880
someone's texting

1195
00:44:40,880 --> 00:44:43,440
okay so i'll read the i'll read the uh

1196
00:44:43,440 --> 00:44:45,920
the question from the chat

1197
00:44:45,920 --> 00:44:48,079
from yanan lee

1198
00:44:48,079 --> 00:44:50,000
could you give some insights about what

1199
00:44:50,000 --> 00:44:52,720
enables the generalized channel

1200
00:44:52,720 --> 00:44:54,319
so

1201
00:44:54,319 --> 00:44:57,119
generalize say supporting any operation

1202
00:44:57,119 --> 00:44:59,680
that the underlying blockchain support

1203
00:44:59,680 --> 00:45:02,240
does it mainly owe to the adapter

1204
00:45:02,240 --> 00:45:05,920
signature i i read as it satan so

1205
00:45:05,920 --> 00:45:07,280
yeah yeah so

1206
00:45:07,280 --> 00:45:07,550
um

1207
00:45:07,550 --> 00:45:09,040
[Music]

1208
00:45:09,040 --> 00:45:11,200
yes and no so the efficiency part i

1209
00:45:11,200 --> 00:45:12,720
would say comes

1210
00:45:12,720 --> 00:45:14,720
from the adapter signature because as i

1211
00:45:14,720 --> 00:45:17,040
said you can also generalize lightning

1212
00:45:17,040 --> 00:45:19,119
to allow running these applications but

1213
00:45:19,119 --> 00:45:21,119
if you have this punish per application

1214
00:45:21,119 --> 00:45:23,040
it would not really be efficient also

1215
00:45:23,040 --> 00:45:26,319
the state duplication would result in a

1216
00:45:26,319 --> 00:45:28,079
huge off-chain communication so it's

1217
00:45:28,079 --> 00:45:30,160
more of a question of efficiency and

1218
00:45:30,160 --> 00:45:33,680
practicality i would say and that comes

1219
00:45:33,680 --> 00:45:35,440
from the adapter signatures so

1220
00:45:35,440 --> 00:45:37,599
feasibility it was it could have been

1221
00:45:37,599 --> 00:45:39,680
feasible on lighting no one really

1222
00:45:39,680 --> 00:45:41,119
analyzed it or

1223
00:45:41,119 --> 00:45:43,280
mentioned this formally but

1224
00:45:43,280 --> 00:45:44,640
practicality comes from adapter

1225
00:45:44,640 --> 00:45:46,640
signatures in a sense and just you want

1226
00:45:46,640 --> 00:45:49,680
to add something here

1227
00:45:50,000 --> 00:45:52,560
yeah maybe uh just to add so the

1228
00:45:52,560 --> 00:45:55,200
generalization part is more um the

1229
00:45:55,200 --> 00:45:57,520
modeling part of our work and actually

1230
00:45:57,520 --> 00:45:59,520
our ideal functionality is parameterized

1231
00:45:59,520 --> 00:46:02,319
by some some parameters that for example

1232
00:46:02,319 --> 00:46:03,920
allow also for the state duplication

1233
00:46:03,920 --> 00:46:05,839
that lightning has so

1234
00:46:05,839 --> 00:46:07,520
it might be some future work to show

1235
00:46:07,520 --> 00:46:10,240
also that lightning channels uh realize

1236
00:46:10,240 --> 00:46:12,720
our ideal functionality

1237
00:46:12,720 --> 00:46:15,200
yeah thank you

1238
00:46:15,200 --> 00:46:17,520
all right awesome thanks very much uh

1239
00:46:17,520 --> 00:46:19,200
gents i think that in the interest of

1240
00:46:19,200 --> 00:46:19,940
time

1241
00:46:19,940 --> 00:46:21,680
[Music]

1242
00:46:21,680 --> 00:46:23,839
uh we will move on to our next

1243
00:46:23,839 --> 00:46:26,560
presentation

1244
00:46:27,440 --> 00:46:28,480
so

1245
00:46:28,480 --> 00:46:30,800
the speaker can start being prepared

1246
00:46:30,800 --> 00:46:34,000
this is a paper that is let's say uh

1247
00:46:34,000 --> 00:46:35,920
you know in sync with the uh the

1248
00:46:35,920 --> 00:46:37,599
everyday news

1249
00:46:37,599 --> 00:46:40,720
uh the contra corona contact tracing uh

1250
00:46:40,720 --> 00:46:43,680
against the coronavirus a discussion on

1251
00:46:43,680 --> 00:46:45,520
the divide between centralized and

1252
00:46:45,520 --> 00:46:47,599
decentralized approaches

1253
00:46:47,599 --> 00:46:50,640
the presentation will be delivered by

1254
00:46:50,640 --> 00:46:52,480
felix dorr

1255
00:46:52,480 --> 00:46:54,480
who is a phd student at the culture

1256
00:46:54,480 --> 00:46:56,880
institute of technology researching how

1257
00:46:56,880 --> 00:46:58,960
to secure computations by cryptographic

1258
00:46:58,960 --> 00:47:01,359
means that's his punch line so felix all

1259
00:47:01,359 --> 00:47:03,680
yours

1260
00:47:03,680 --> 00:47:06,560
yeah um yeah i'm presenting the joint

1261
00:47:06,560 --> 00:47:09,520
work with these many co-authors

1262
00:47:09,520 --> 00:47:11,520
and so just

1263
00:47:11,520 --> 00:47:13,119
about the current state of exposure

1264
00:47:13,119 --> 00:47:15,200
notifications how it's in everyday news

1265
00:47:15,200 --> 00:47:17,119
and how it's currently implemented this

1266
00:47:17,119 --> 00:47:19,920
is the example for germany where we have

1267
00:47:19,920 --> 00:47:20,640
the

1268
00:47:20,640 --> 00:47:23,440
um corona one app which is installed on

1269
00:47:23,440 --> 00:47:26,319
about 45

1270
00:47:26,319 --> 00:47:28,400
just enough downloads to be installed on

1271
00:47:28,400 --> 00:47:32,480
about 45 of the population's devices

1272
00:47:32,480 --> 00:47:34,800
however when we look at the amount of

1273
00:47:34,800 --> 00:47:38,000
infections reported with this app

1274
00:47:38,000 --> 00:47:40,079
we see that the

1275
00:47:40,079 --> 00:47:42,559
ratio is only about between 20 and 30

1276
00:47:42,559 --> 00:47:44,880
percent of all

1277
00:47:44,880 --> 00:47:48,000
tested infections are actually reported

1278
00:47:48,000 --> 00:47:50,240
through the app and want

1279
00:47:50,240 --> 00:47:52,559
um so a bit about the background how

1280
00:47:52,559 --> 00:47:53,520
this

1281
00:47:53,520 --> 00:47:55,440
google apple exposure notification that

1282
00:47:55,440 --> 00:47:58,240
is implemented in this app works

1283
00:47:58,240 --> 00:48:00,160
and when the app is installed the

1284
00:48:00,160 --> 00:48:01,760
devices

1285
00:48:01,760 --> 00:48:04,319
generate random keys and from those keys

1286
00:48:04,319 --> 00:48:06,880
they derive keys that are only used for

1287
00:48:06,880 --> 00:48:08,960
a shorter period of time during normal

1288
00:48:08,960 --> 00:48:11,440
operations or the apps will broadcast

1289
00:48:11,440 --> 00:48:14,240
their short term keys

1290
00:48:14,240 --> 00:48:16,160
and will record all keys that they

1291
00:48:16,160 --> 00:48:17,119
receive

1292
00:48:17,119 --> 00:48:18,880
and when later on someone is tested

1293
00:48:18,880 --> 00:48:20,800
positive and an infection should be

1294
00:48:20,800 --> 00:48:22,000
reported

1295
00:48:22,000 --> 00:48:24,160
they will share their seed key with the

1296
00:48:24,160 --> 00:48:26,400
back end where they are all collected

1297
00:48:26,400 --> 00:48:28,720
and repeatedly all apps download all

1298
00:48:28,720 --> 00:48:31,040
keys from the back end will expand them

1299
00:48:31,040 --> 00:48:32,640
again

1300
00:48:32,640 --> 00:48:34,640
and then check if they have records of

1301
00:48:34,640 --> 00:48:35,920
such a key

1302
00:48:35,920 --> 00:48:37,920
in the history of the keys that they've

1303
00:48:37,920 --> 00:48:40,559
recorded during operation

1304
00:48:40,559 --> 00:48:42,079
and while this

1305
00:48:42,079 --> 00:48:44,400
quite nicely already protects the

1306
00:48:44,400 --> 00:48:46,960
privacy of for example participants that

1307
00:48:46,960 --> 00:48:48,800
will never get infected because their

1308
00:48:48,800 --> 00:48:51,200
keys are stay on their smartphone and

1309
00:48:51,200 --> 00:48:54,319
will be deleted afterwards

1310
00:48:54,319 --> 00:48:55,440
um

1311
00:48:55,440 --> 00:48:57,839
and their keys to stay unlinkable

1312
00:48:57,839 --> 00:48:59,440
forever

1313
00:48:59,440 --> 00:49:02,400
for an infected person the keys actually

1314
00:49:02,400 --> 00:49:05,040
become linkable and when someone

1315
00:49:05,040 --> 00:49:06,960
later notices

1316
00:49:06,960 --> 00:49:09,359
potential dangerous contact

1317
00:49:09,359 --> 00:49:10,800
by finding

1318
00:49:10,800 --> 00:49:13,680
such identifiers in their record history

1319
00:49:13,680 --> 00:49:15,599
they can find out which of the records

1320
00:49:15,599 --> 00:49:17,839
led to the warning so they can

1321
00:49:17,839 --> 00:49:19,920
find out who

1322
00:49:19,920 --> 00:49:22,480
so at which point in time the dangerous

1323
00:49:22,480 --> 00:49:23,839
encounter was

1324
00:49:23,839 --> 00:49:26,079
and thereby maybe infer

1325
00:49:26,079 --> 00:49:28,160
with whom the dangerous contact was and

1326
00:49:28,160 --> 00:49:30,640
this is more information than would be

1327
00:49:30,640 --> 00:49:32,480
required for exposure notification

1328
00:49:32,480 --> 00:49:34,640
because for exposure notification

1329
00:49:34,640 --> 00:49:36,800
you just just tell the people that they

1330
00:49:36,800 --> 00:49:38,800
had a dangerous contact and that they

1331
00:49:38,800 --> 00:49:41,280
now should go quarantine and they should

1332
00:49:41,280 --> 00:49:43,040
not receive any more information from

1333
00:49:43,040 --> 00:49:44,640
the system

1334
00:49:44,640 --> 00:49:48,559
and our goal is to provide a different

1335
00:49:48,559 --> 00:49:50,319
approach that

1336
00:49:50,319 --> 00:49:52,240
kind of sidesteps these inherent

1337
00:49:52,240 --> 00:49:54,079
properties of

1338
00:49:54,079 --> 00:49:55,200
the approach that's currently

1339
00:49:55,200 --> 00:49:56,480
implemented

1340
00:49:56,480 --> 00:49:58,160
and in particular we want to protect the

1341
00:49:58,160 --> 00:50:00,720
privacy of infected participants

1342
00:50:00,720 --> 00:50:02,559
um and maybe that

1343
00:50:02,559 --> 00:50:04,720
could also partly be

1344
00:50:04,720 --> 00:50:07,200
the cause for why people are reluctant

1345
00:50:07,200 --> 00:50:09,839
to share diagnostics keys

1346
00:50:09,839 --> 00:50:11,920
and we want to do this in a way where we

1347
00:50:11,920 --> 00:50:13,359
don't

1348
00:50:13,359 --> 00:50:16,640
aggregate all contact graphs centrally

1349
00:50:16,640 --> 00:50:18,240
and rely all trust on central

1350
00:50:18,240 --> 00:50:20,319
infrastructure but we want to

1351
00:50:20,319 --> 00:50:22,160
keep as much information distributed as

1352
00:50:22,160 --> 00:50:24,079
we can

1353
00:50:24,079 --> 00:50:26,240
and thereby keeping it as distributed as

1354
00:50:26,240 --> 00:50:28,079
possible

1355
00:50:28,079 --> 00:50:30,400
um yeah the approach that we are

1356
00:50:30,400 --> 00:50:32,720
following is kind of dual to the one

1357
00:50:32,720 --> 00:50:35,119
that's currently implemented with the

1358
00:50:35,119 --> 00:50:37,280
usual contact racing apps

1359
00:50:37,280 --> 00:50:40,880
in a way that users will still

1360
00:50:40,880 --> 00:50:42,640
draw random identifiers which they

1361
00:50:42,640 --> 00:50:44,160
broadcast

1362
00:50:44,160 --> 00:50:45,599
periodically

1363
00:50:45,599 --> 00:50:48,160
but when someone

1364
00:50:48,160 --> 00:50:50,880
gets a positive test and wants to record

1365
00:50:50,880 --> 00:50:52,319
an infection

1366
00:50:52,319 --> 00:50:54,960
they do not share their keys that they

1367
00:50:54,960 --> 00:50:57,040
have broadcast but they share the keys

1368
00:50:57,040 --> 00:50:58,240
that they have

1369
00:50:58,240 --> 00:51:01,280
recorded that they have observed

1370
00:51:01,280 --> 00:51:02,800
and

1371
00:51:02,800 --> 00:51:05,680
with that we envision um

1372
00:51:05,680 --> 00:51:07,760
the central infrastructure to be

1373
00:51:07,760 --> 00:51:09,760
splitted between

1374
00:51:09,760 --> 00:51:11,920
hopefully multiple different entities

1375
00:51:11,920 --> 00:51:14,319
that only collaborate on defined

1376
00:51:14,319 --> 00:51:16,480
interfaces

1377
00:51:16,480 --> 00:51:18,240
and those

1378
00:51:18,240 --> 00:51:20,559
central services would then

1379
00:51:20,559 --> 00:51:23,040
enable the system

1380
00:51:23,040 --> 00:51:25,119
to

1381
00:51:25,119 --> 00:51:27,920
trace the

1382
00:51:28,079 --> 00:51:29,839
observed identifier

1383
00:51:29,839 --> 00:51:32,240
to a warning identifier so when someone

1384
00:51:32,240 --> 00:51:35,040
gets later warned they receive

1385
00:51:35,040 --> 00:51:36,480
only one warning

1386
00:51:36,480 --> 00:51:39,920
identifier per longer epoch say per day

1387
00:51:39,920 --> 00:51:41,839
and they would then only know on which

1388
00:51:41,839 --> 00:51:44,640
day they had potentially

1389
00:51:44,640 --> 00:51:47,280
dangerous contacts and wouldn't have the

1390
00:51:47,280 --> 00:51:48,480
possibility

1391
00:51:48,480 --> 00:51:50,559
to find those contacts with such fine

1392
00:51:50,559 --> 00:51:52,400
granularity

1393
00:51:52,400 --> 00:51:54,559
and this work comes with a

1394
00:51:54,559 --> 00:51:56,880
detailed security model

1395
00:51:56,880 --> 00:51:59,599
to describe what's the actual remaining

1396
00:51:59,599 --> 00:52:00,720
leakage

1397
00:52:00,720 --> 00:52:03,119
and the proof that shows that our

1398
00:52:03,119 --> 00:52:06,000
approach fulfills the model that we

1399
00:52:06,000 --> 00:52:07,440
describe

1400
00:52:07,440 --> 00:52:10,319
and in our model we describe the

1401
00:52:10,319 --> 00:52:13,040
contact graph where people actually meet

1402
00:52:13,040 --> 00:52:14,880
in physical life

1403
00:52:14,880 --> 00:52:17,839
like a directed graph so um in case of

1404
00:52:17,839 --> 00:52:19,520
those bluetooth notifications you can

1405
00:52:19,520 --> 00:52:21,280
envision this as

1406
00:52:21,280 --> 00:52:23,040
a being able to broadcast bluetooth

1407
00:52:23,040 --> 00:52:25,280
messages to c but not the other way

1408
00:52:25,280 --> 00:52:26,880
around for whatever reason in the

1409
00:52:26,880 --> 00:52:28,480
physical world

1410
00:52:28,480 --> 00:52:30,800
and this contact graph is

1411
00:52:30,800 --> 00:52:32,800
determined for every

1412
00:52:32,800 --> 00:52:35,920
short-term epoch so like 50 minutes

1413
00:52:35,920 --> 00:52:38,000
um by the environment because we want

1414
00:52:38,000 --> 00:52:40,000
our protocol to stay secure whatever

1415
00:52:40,000 --> 00:52:41,680
this contact graph is and some of the

1416
00:52:41,680 --> 00:52:43,839
participants in this context graph are

1417
00:52:43,839 --> 00:52:45,280
corrupted

1418
00:52:45,280 --> 00:52:47,040
so they are controlled by the adversary

1419
00:52:47,040 --> 00:52:48,880
and the adversary can

1420
00:52:48,880 --> 00:52:50,079
decide

1421
00:52:50,079 --> 00:52:51,680
what messages they send and see all

1422
00:52:51,680 --> 00:52:54,160
messages they receive

1423
00:52:54,160 --> 00:52:55,520
but

1424
00:52:55,520 --> 00:52:58,800
for the simulator in a security model

1425
00:52:58,800 --> 00:53:00,960
following the real ideal paradigm we

1426
00:53:00,960 --> 00:53:03,200
don't want to give this

1427
00:53:03,200 --> 00:53:04,640
simulator the whole contact graph

1428
00:53:04,640 --> 00:53:06,400
because then this would mean that the

1429
00:53:06,400 --> 00:53:08,079
protocol does not protect the contact

1430
00:53:08,079 --> 00:53:09,280
graph

1431
00:53:09,280 --> 00:53:11,920
but obviously we need to

1432
00:53:11,920 --> 00:53:13,680
to reveal something about the contact

1433
00:53:13,680 --> 00:53:15,200
graph because if

1434
00:53:15,200 --> 00:53:17,280
participant r a now

1435
00:53:17,280 --> 00:53:19,200
broadcasts the message

1436
00:53:19,200 --> 00:53:22,240
participants b and d who receive truth

1437
00:53:22,240 --> 00:53:24,640
messages that a broadcasts but no oh

1438
00:53:24,640 --> 00:53:26,720
this is the same message that we got so

1439
00:53:26,720 --> 00:53:27,839
they would know they have been in

1440
00:53:27,839 --> 00:53:30,240
contact with the same person

1441
00:53:30,240 --> 00:53:32,160
so that's why we have here on the right

1442
00:53:32,160 --> 00:53:34,079
side where there's the leakage graph

1443
00:53:34,079 --> 00:53:36,079
there is a node a here

1444
00:53:36,079 --> 00:53:40,000
which has connections to both b and d

1445
00:53:40,480 --> 00:53:42,480
but the line around a is dashed

1446
00:53:42,480 --> 00:53:44,640
indicating that the adversary doesn't

1447
00:53:44,640 --> 00:53:46,880
know that this is a or this is c but

1448
00:53:46,880 --> 00:53:49,359
only gets substituted on him

1449
00:53:49,359 --> 00:53:51,520
and um yeah broadcasts from the

1450
00:53:51,520 --> 00:53:52,960
corrupted parties are treated

1451
00:53:52,960 --> 00:53:55,520
differently so for them the adversary

1452
00:53:55,520 --> 00:53:57,680
cannot know

1453
00:53:57,680 --> 00:54:00,400
if the broadcasts hit the same person or

1454
00:54:00,400 --> 00:54:01,920
not

1455
00:54:01,920 --> 00:54:03,599
so as a conclusion

1456
00:54:03,599 --> 00:54:05,280
i'd like to say that the exposure

1457
00:54:05,280 --> 00:54:07,119
notification framework like it's now

1458
00:54:07,119 --> 00:54:08,480
implemented

1459
00:54:08,480 --> 00:54:11,119
by google and apple is a great first

1460
00:54:11,119 --> 00:54:13,599
step to protect the privacy but we can

1461
00:54:13,599 --> 00:54:16,160
do better especially protecting the

1462
00:54:16,160 --> 00:54:17,359
privacy

1463
00:54:17,359 --> 00:54:19,760
of infected individuals

1464
00:54:19,760 --> 00:54:21,520
and we provide a security model to

1465
00:54:21,520 --> 00:54:23,040
demonstrate

1466
00:54:23,040 --> 00:54:25,440
that we protect privacy better and

1467
00:54:25,440 --> 00:54:26,480
what's

1468
00:54:26,480 --> 00:54:28,559
left to be done to protect privacy even

1469
00:54:28,559 --> 00:54:29,440
more

1470
00:54:29,440 --> 00:54:31,119
thanks for your attention and i'd be

1471
00:54:31,119 --> 00:54:33,920
happy to take questions now

1472
00:54:33,920 --> 00:54:36,160
thank you

1473
00:54:36,160 --> 00:54:39,160
questions

1474
00:54:41,040 --> 00:54:43,520
can you can you please clarify so the uh

1475
00:54:43,520 --> 00:54:45,760
the servers that are involved are they

1476
00:54:45,760 --> 00:54:48,079
considered in your work to be honest but

1477
00:54:48,079 --> 00:54:51,680
curious is semi honest or or are they

1478
00:54:51,680 --> 00:54:52,559
you know

1479
00:54:52,559 --> 00:54:54,880
allowed to do more

1480
00:54:54,880 --> 00:54:57,119
they're cons they're considered to be

1481
00:54:57,119 --> 00:54:59,119
honest but curious and to be

1482
00:54:59,119 --> 00:55:01,599
individually corrupted ah individually

1483
00:55:01,599 --> 00:55:05,400
all right i see thanks

1484
00:55:06,880 --> 00:55:09,119
any more questions immediately corrupted

1485
00:55:09,119 --> 00:55:11,440
together with some of the participants

1486
00:55:11,440 --> 00:55:13,520
because like a realistic model where you

1487
00:55:13,520 --> 00:55:15,680
have some operator that operates the

1488
00:55:15,680 --> 00:55:17,760
service it's realistically that

1489
00:55:17,760 --> 00:55:19,520
they can install the app on their phone

1490
00:55:19,520 --> 00:55:22,799
and be a participant as well of course

1491
00:55:22,799 --> 00:55:24,319
okay

1492
00:55:24,319 --> 00:55:26,880
understood

1493
00:55:27,980 --> 00:55:30,480
[Music]

1494
00:55:30,480 --> 00:55:32,960
i don't see any more questions on chat

1495
00:55:32,960 --> 00:55:34,240
[Music]

1496
00:55:34,240 --> 00:55:36,000
either no more

1497
00:55:36,000 --> 00:55:38,720
hands raised

1498
00:55:38,720 --> 00:55:40,960
gyan uh

1499
00:55:40,960 --> 00:55:43,680
shall we move to the last talk then

1500
00:55:43,680 --> 00:55:46,839
yeah sure yeah thanks

1501
00:55:46,839 --> 00:55:48,799
alex so

1502
00:55:48,799 --> 00:55:51,359
let's move to the last certainly not

1503
00:55:51,359 --> 00:55:52,880
least the talk of the session and

1504
00:55:52,880 --> 00:55:57,040
actually also the last and not listed

1505
00:55:57,040 --> 00:56:00,640
of the whole conference is about the

1506
00:56:00,640 --> 00:56:02,559
the security analysis of

1507
00:56:02,559 --> 00:56:05,200
a bluetooth uh skill connection protocol

1508
00:56:05,200 --> 00:56:08,960
suit is from uh mark fisher and alga

1509
00:56:08,960 --> 00:56:11,440
who's from matthew dumpster and all got

1510
00:56:11,440 --> 00:56:13,520
the stage is yours

1511
00:56:13,520 --> 00:56:16,799
thank you for the introduction chan um

1512
00:56:16,799 --> 00:56:18,400
so i will present the joint work with

1513
00:56:18,400 --> 00:56:20,240
mark vision from to darmstadt on the

1514
00:56:20,240 --> 00:56:22,640
cryptographic analysis of the

1515
00:56:22,640 --> 00:56:24,720
bluetooth protocol suite

1516
00:56:24,720 --> 00:56:26,480
and as you might realize from the

1517
00:56:26,480 --> 00:56:28,079
previous talk

1518
00:56:28,079 --> 00:56:31,200
that in bluetooth it's possible to for

1519
00:56:31,200 --> 00:56:33,680
devices to communicate one way

1520
00:56:33,680 --> 00:56:35,920
that is if we have a device it can

1521
00:56:35,920 --> 00:56:37,440
broadcast some

1522
00:56:37,440 --> 00:56:40,640
message to the environment and maybe um

1523
00:56:40,640 --> 00:56:43,359
another device will record this but the

1524
00:56:43,359 --> 00:56:45,359
first device doesn't expect the second

1525
00:56:45,359 --> 00:56:47,520
device to respond

1526
00:56:47,520 --> 00:56:49,839
now bluetooth also allows

1527
00:56:49,839 --> 00:56:53,280
communication to happen in two ways

1528
00:56:53,280 --> 00:56:55,280
and for this the user would like

1529
00:56:55,280 --> 00:56:58,480
probably to secure the communication for

1530
00:56:58,480 --> 00:57:00,720
example by encrypting it

1531
00:57:00,720 --> 00:57:03,200
so for these the devices need to agree

1532
00:57:03,200 --> 00:57:05,839
on some key that they will use for

1533
00:57:05,839 --> 00:57:07,680
encryption

1534
00:57:07,680 --> 00:57:09,680
and in bluetooth there is a bunch of

1535
00:57:09,680 --> 00:57:12,400
protocols for key exchange with really

1536
00:57:12,400 --> 00:57:14,880
different level of security

1537
00:57:14,880 --> 00:57:17,280
and the strongest one is called secure

1538
00:57:17,280 --> 00:57:18,559
connections

1539
00:57:18,559 --> 00:57:21,599
and it's based on the elliptical dv helm

1540
00:57:21,599 --> 00:57:24,400
key exchange

1541
00:57:24,559 --> 00:57:26,400
now you might ask me why do we need

1542
00:57:26,400 --> 00:57:28,640
another analysis bluetooth is out there

1543
00:57:28,640 --> 00:57:30,480
for such a long time probably there were

1544
00:57:30,480 --> 00:57:32,799
some research papers already on that

1545
00:57:32,799 --> 00:57:34,400
that's true there were indeed some

1546
00:57:34,400 --> 00:57:36,319
papers but they had

1547
00:57:36,319 --> 00:57:38,799
let's say some drawbacks

1548
00:57:38,799 --> 00:57:41,280
for example they always considered only

1549
00:57:41,280 --> 00:57:44,240
a standalone protocol from the family so

1550
00:57:44,240 --> 00:57:46,400
they always showed that only one

1551
00:57:46,400 --> 00:57:49,280
protocol is secure

1552
00:57:49,280 --> 00:57:50,799
second they

1553
00:57:50,799 --> 00:57:53,040
presented the protocol not really close

1554
00:57:53,040 --> 00:57:55,680
to the standard for example they assumed

1555
00:57:55,680 --> 00:57:58,079
that their fresh divi helmet share is

1556
00:57:58,079 --> 00:58:00,240
used in each connection

1557
00:58:00,240 --> 00:58:03,040
but actually the standard allows to use

1558
00:58:03,040 --> 00:58:05,440
the same tv helmet share in up to eight

1559
00:58:05,440 --> 00:58:07,760
connections

1560
00:58:07,760 --> 00:58:10,480
second for example lindell and his paper

1561
00:58:10,480 --> 00:58:12,240
end soon and soon in their paper

1562
00:58:12,240 --> 00:58:14,160
considered a full point on the

1563
00:58:14,160 --> 00:58:15,520
elliptical

1564
00:58:15,520 --> 00:58:18,000
but the standard actually makes use only

1565
00:58:18,000 --> 00:58:21,799
of the x coordinate

1566
00:58:22,480 --> 00:58:25,200
okay now the question arises why do we

1567
00:58:25,200 --> 00:58:27,119
need to analyze exactly the full

1568
00:58:27,119 --> 00:58:29,520
protocol suite why can't we just take

1569
00:58:29,520 --> 00:58:31,760
the most secure protocol from the family

1570
00:58:31,760 --> 00:58:34,640
and use it in all the devices

1571
00:58:34,640 --> 00:58:35,760
so the

1572
00:58:35,760 --> 00:58:38,240
thing is that the devices have different

1573
00:58:38,240 --> 00:58:39,760
device features

1574
00:58:39,760 --> 00:58:41,920
and the protocols are chosen based on

1575
00:58:41,920 --> 00:58:44,079
these device features so we cannot rule

1576
00:58:44,079 --> 00:58:46,480
out some protocols because all of them

1577
00:58:46,480 --> 00:58:49,200
are in use

1578
00:58:49,520 --> 00:58:52,319
and second there was a really wide range

1579
00:58:52,319 --> 00:58:54,240
of errors mostly in the middle attacks

1580
00:58:54,240 --> 00:58:56,319
on the protocols starting with the

1581
00:58:56,319 --> 00:58:59,040
reflection attacks uh downgrade attacks

1582
00:58:59,040 --> 00:59:00,079
on the

1583
00:59:00,079 --> 00:59:02,400
size of the encryption key and also the

1584
00:59:02,400 --> 00:59:04,079
attacks where the industry can actually

1585
00:59:04,079 --> 00:59:06,880
get into the middle and connect with two

1586
00:59:06,880 --> 00:59:08,400
devices so that they think they're

1587
00:59:08,400 --> 00:59:10,160
connected with each other when they're

1588
00:59:10,160 --> 00:59:12,079
not

1589
00:59:12,079 --> 00:59:14,559
and now with all this in mind i can

1590
00:59:14,559 --> 00:59:16,400
summarize what i

1591
00:59:16,400 --> 00:59:18,640
told so far

1592
00:59:18,640 --> 00:59:22,000
so we give the first analysis of the

1593
00:59:22,000 --> 00:59:26,000
whole protocol submit in bluetooth

1594
00:59:26,000 --> 00:59:28,240
then we also analyze it as trust on the

1595
00:59:28,240 --> 00:59:33,440
first key exchange so that the devices

1596
00:59:33,440 --> 00:59:35,680
first make a initial connection where

1597
00:59:35,680 --> 00:59:36,480
they

1598
00:59:36,480 --> 00:59:38,640
derive some connection key and this

1599
00:59:38,640 --> 00:59:40,960
connection key is then used for the

1600
00:59:40,960 --> 00:59:42,559
reconnection step

1601
00:59:42,559 --> 00:59:44,799
so that um

1602
00:59:44,799 --> 00:59:47,359
for example they can

1603
00:59:47,359 --> 00:59:50,319
uh derive the encryption key

1604
00:59:50,319 --> 00:59:52,799
and the addressory is assumed to be

1605
00:59:52,799 --> 00:59:54,960
passive during this initial connection

1606
00:59:54,960 --> 00:59:57,200
but he's actually allowed to be active

1607
00:59:57,200 --> 01:00:00,319
during the reconnection step

1608
01:00:00,319 --> 01:00:02,640
now we also looked into the

1609
01:00:02,640 --> 01:00:04,880
invest we investigated also the privacy

1610
01:00:04,880 --> 01:00:07,440
mechanism in bluetooth

1611
01:00:07,440 --> 01:00:09,040
and we showed that

1612
01:00:09,040 --> 01:00:11,359
uh it achieves the privacy against

1613
01:00:11,359 --> 01:00:15,040
outsider and passive adversary

1614
01:00:15,040 --> 01:00:16,000
and

1615
01:00:16,000 --> 01:00:18,160
another small perk that we also

1616
01:00:18,160 --> 01:00:20,400
presented a precise and exhaustive

1617
01:00:20,400 --> 01:00:24,640
description of their protocols feed

1618
01:00:25,119 --> 01:00:27,920
that actually concludes my talk so thank

1619
01:00:27,920 --> 01:00:30,319
you for the attention you can check the

1620
01:00:30,319 --> 01:00:32,799
full version of the paper on eprint

1621
01:00:32,799 --> 01:00:35,200
and i'm glad to take any questions if

1622
01:00:35,200 --> 01:00:36,480
you have

1623
01:00:36,480 --> 01:00:38,559
yeah thank you olga for nice talk and a

1624
01:00:38,559 --> 01:00:39,599
nice work

1625
01:00:39,599 --> 01:00:43,799
any questions from the audience

1626
01:00:44,960 --> 01:00:47,280
um let me start with one simple question

1627
01:00:47,280 --> 01:00:50,880
so this toefl model i like the name

1628
01:00:50,880 --> 01:00:52,880
and the the top model sounds very

1629
01:00:52,880 --> 01:00:54,480
interesting obviously also makes a lot

1630
01:00:54,480 --> 01:00:57,040
of sense but um

1631
01:00:57,040 --> 01:00:59,280
is it the sufficient to characterize

1632
01:00:59,280 --> 01:01:02,000
like real-world threats or i mean

1633
01:01:02,000 --> 01:01:06,160
is is there any potential gap

1634
01:01:06,160 --> 01:01:09,040
that might be explored by the

1635
01:01:09,040 --> 01:01:11,599
attacker in real life

1636
01:01:11,599 --> 01:01:12,799
um

1637
01:01:12,799 --> 01:01:15,040
it's a good question so

1638
01:01:15,040 --> 01:01:18,000
it's not the perfect way of

1639
01:01:18,000 --> 01:01:20,240
modulating things right

1640
01:01:20,240 --> 01:01:22,400
so we would like to have the security

1641
01:01:22,400 --> 01:01:24,960
already in the beginning but if you

1642
01:01:24,960 --> 01:01:27,359
think that you connect your

1643
01:01:27,359 --> 01:01:31,520
devices at home where you think that the

1644
01:01:31,520 --> 01:01:34,319
channels are to say ecq and there is no

1645
01:01:34,319 --> 01:01:36,480
active adversary

1646
01:01:36,480 --> 01:01:38,400
present during the connection

1647
01:01:38,400 --> 01:01:40,160
uh because the adjuster still can

1648
01:01:40,160 --> 01:01:43,040
eavesdrop then you might think that that

1649
01:01:43,040 --> 01:01:45,760
actually suffice as well

1650
01:01:45,760 --> 01:01:47,440
but of course we would like to have more

1651
01:01:47,440 --> 01:01:48,400
yeah

1652
01:01:48,400 --> 01:01:49,920
yeah okay

1653
01:01:49,920 --> 01:01:53,839
uh okay there's one question in the chat

1654
01:01:53,839 --> 01:01:56,480
from bonjourn i guess it you did

1655
01:01:56,480 --> 01:01:57,599
complain about structure of the

1656
01:01:57,599 --> 01:02:00,400
bluetooth standard i also uh agree with

1657
01:02:00,400 --> 01:02:02,960
that it's a very nice characterization

1658
01:02:02,960 --> 01:02:05,200
and do you have any suggestion on how to

1659
01:02:05,200 --> 01:02:07,839
improve it

1660
01:02:08,000 --> 01:02:09,520
um

1661
01:02:09,520 --> 01:02:12,400
great question

1662
01:02:13,280 --> 01:02:16,880
probably to try to split it into several

1663
01:02:16,880 --> 01:02:18,079
parts

1664
01:02:18,079 --> 01:02:21,920
and to rewrite it probably from scratch

1665
01:02:21,920 --> 01:02:24,160
to make it more

1666
01:02:24,160 --> 01:02:28,000
um precise in defining the terms and the

1667
01:02:28,000 --> 01:02:29,839
requirements they exactly want to

1668
01:02:29,839 --> 01:02:31,119
achieve

1669
01:02:31,119 --> 01:02:32,839
yeah maybe that's like the

1670
01:02:32,839 --> 01:02:36,480
general something like that

1671
01:02:37,440 --> 01:02:40,799
yeah does it sound so satisfying

1672
01:02:40,799 --> 01:02:43,520
yeah i hope it answers your question

1673
01:02:43,520 --> 01:02:46,000
any other questions from the audience

1674
01:02:46,000 --> 01:02:47,599
just feel free to

1675
01:02:47,599 --> 01:02:49,280
unmute yourself

1676
01:02:49,280 --> 01:02:51,520
oh i also have one one quick question so

1677
01:02:51,520 --> 01:02:54,079
the the previous analog there also some

1678
01:02:54,079 --> 01:02:56,000
previous analysis right are they also in

1679
01:02:56,000 --> 01:02:57,599
the tofu model

1680
01:02:57,599 --> 01:02:59,440
no they were not they actually showed

1681
01:02:59,440 --> 01:03:00,720
that

1682
01:03:00,720 --> 01:03:02,720
exactly one protocol in the family is

1683
01:03:02,720 --> 01:03:05,200
secure also against active adversary but

1684
01:03:05,200 --> 01:03:06,640
actually it's not

1685
01:03:06,640 --> 01:03:09,119
oh no they didn't use trust on the first

1686
01:03:09,119 --> 01:03:12,240
usk exchange model

1687
01:03:13,440 --> 01:03:17,400
any other questions

1688
01:03:18,400 --> 01:03:20,319
if there's no more question i guess

1689
01:03:20,319 --> 01:03:23,039
let's thank all the speakers of the

1690
01:03:23,039 --> 01:03:26,160
session again and kind of concludes the

1691
01:03:26,160 --> 01:03:28,400
conclusion of this session and also

1692
01:03:28,400 --> 01:03:31,119
the whole conference right i i think uh

1693
01:03:31,119 --> 01:03:32,720
the pc chair

1694
01:03:32,720 --> 01:03:34,960
like huashong almedy is here they want

1695
01:03:34,960 --> 01:03:35,920
to

1696
01:03:35,920 --> 01:03:37,599
do some closure

1697
01:03:37,599 --> 01:03:39,280
remark

1698
01:03:39,280 --> 01:03:41,920
i think they

1699
01:03:42,000 --> 01:03:45,359
they will be in the other session

