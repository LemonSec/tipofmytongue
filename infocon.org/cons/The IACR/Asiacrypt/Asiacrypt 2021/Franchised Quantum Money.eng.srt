1
00:00:01,040 --> 00:00:03,919
hi everyone my name is oscar roberts and

2
00:00:03,919 --> 00:00:06,560
i'm a grad student at uc berkeley

3
00:00:06,560 --> 00:00:08,960
today i'll be presenting some joint work

4
00:00:08,960 --> 00:00:11,519
that i did with mark zandry on quantum

5
00:00:11,519 --> 00:00:13,920
money and more generally how to verify

6
00:00:13,920 --> 00:00:16,480
unclonable quantum states one of the

7
00:00:16,480 --> 00:00:18,480
foundational problems in unclonable

8
00:00:18,480 --> 00:00:20,800
cryptography is quantum money

9
00:00:20,800 --> 00:00:24,480
in which quantum states are used as cash

10
00:00:24,480 --> 00:00:26,800
now there are two properties that cash

11
00:00:26,800 --> 00:00:29,840
or any physical representation of money

12
00:00:29,840 --> 00:00:31,679
should satisfy

13
00:00:31,679 --> 00:00:34,399
the first is unclonability so this means

14
00:00:34,399 --> 00:00:36,719
it should be hard for an adversary to

15
00:00:36,719 --> 00:00:38,640
create fake banknotes that look like the

16
00:00:38,640 --> 00:00:41,040
real thing and the second is local

17
00:00:41,040 --> 00:00:43,200
verification

18
00:00:43,200 --> 00:00:45,920
this means you should be able to verify

19
00:00:45,920 --> 00:00:47,760
that the banknote you've been given is

20
00:00:47,760 --> 00:00:50,079
valid without communicating with the

21
00:00:50,079 --> 00:00:53,120
bank or any trusted third party

22
00:00:53,120 --> 00:00:55,440
during verification

23
00:00:55,440 --> 00:00:58,000
for example in the public key version of

24
00:00:58,000 --> 00:00:59,199
quantum money

25
00:00:59,199 --> 00:01:01,680
the bank publishes a verification key

26
00:01:01,680 --> 00:01:04,000
that anyone can use to verify bank notes

27
00:01:04,000 --> 00:01:05,040
locally

28
00:01:05,040 --> 00:01:08,560
in a classical world digital currency

29
00:01:08,560 --> 00:01:11,040
can't hope to satisfy these properties

30
00:01:11,040 --> 00:01:12,960
because classical bit strings can be

31
00:01:12,960 --> 00:01:15,520
copied arbitrarily many times

32
00:01:15,520 --> 00:01:17,280
however the no cloning theorem of

33
00:01:17,280 --> 00:01:18,640
quantum physics

34
00:01:18,640 --> 00:01:20,400
suggests that we might be able to

35
00:01:20,400 --> 00:01:22,720
satisfy these properties using quantum

36
00:01:22,720 --> 00:01:25,280
states beyond quantum money there are

37
00:01:25,280 --> 00:01:27,280
other unclonable cryptographic

38
00:01:27,280 --> 00:01:30,159
primitives that we're interested in

39
00:01:30,159 --> 00:01:31,439
for example

40
00:01:31,439 --> 00:01:33,439
copy protection takes a function and

41
00:01:33,439 --> 00:01:35,119
makes it unclonable

42
00:01:35,119 --> 00:01:37,439
it produces a quantum state that you can

43
00:01:37,439 --> 00:01:39,439
use to compute the function

44
00:01:39,439 --> 00:01:41,840
but it's hard to create two states

45
00:01:41,840 --> 00:01:43,360
that will both compute the function

46
00:01:43,360 --> 00:01:44,640
correctly

47
00:01:44,640 --> 00:01:46,880
copy detection and secure software

48
00:01:46,880 --> 00:01:48,880
leasing are weaker

49
00:01:48,880 --> 00:01:50,960
so in this setting

50
00:01:50,960 --> 00:01:53,200
it's possible for the adversary to

51
00:01:53,200 --> 00:01:55,680
duplicate the functionality

52
00:01:55,680 --> 00:01:56,399
but

53
00:01:56,399 --> 00:02:00,399
if they do that we can detect it

54
00:02:00,640 --> 00:02:03,920
finally unclonable signature tokens

55
00:02:03,920 --> 00:02:06,880
can be used to sign a message

56
00:02:06,880 --> 00:02:09,280
but after signing a single message

57
00:02:09,280 --> 00:02:12,080
the signature token becomes unusable

58
00:02:12,080 --> 00:02:14,640
there have been recent proposals to

59
00:02:14,640 --> 00:02:16,720
construct these primitives

60
00:02:16,720 --> 00:02:18,000
and many of them are based on the

61
00:02:18,000 --> 00:02:20,239
techniques that were developed for

62
00:02:20,239 --> 00:02:21,760
quantum money

63
00:02:21,760 --> 00:02:24,319
our hope is that by improving the

64
00:02:24,319 --> 00:02:26,000
techniques for constructing quantum

65
00:02:26,000 --> 00:02:28,239
money this will allow us to construct

66
00:02:28,239 --> 00:02:30,800
these other primitives as well

67
00:02:30,800 --> 00:02:32,879
so what is the state of public key

68
00:02:32,879 --> 00:02:34,480
quantum money

69
00:02:34,480 --> 00:02:36,560
we don't know of any construction of

70
00:02:36,560 --> 00:02:38,400
public key quantum money from

71
00:02:38,400 --> 00:02:40,160
well-studied assumptions

72
00:02:40,160 --> 00:02:42,560
i'm particularly interested in aaronson

73
00:02:42,560 --> 00:02:44,480
cristiano and later xander's

74
00:02:44,480 --> 00:02:46,560
construction of public key quantum money

75
00:02:46,560 --> 00:02:49,519
from indistinguishability obfuscation

76
00:02:49,519 --> 00:02:51,280
ac 12

77
00:02:51,280 --> 00:02:53,200
proposed a construction of quantum money

78
00:02:53,200 --> 00:02:54,959
in which the bank notes are subspace

79
00:02:54,959 --> 00:02:58,000
states which i'll define soon

80
00:02:58,000 --> 00:02:59,920
and then xandri showed how to verify

81
00:02:59,920 --> 00:03:01,920
these bank notes using post quantum

82
00:03:01,920 --> 00:03:06,000
secure indistinguishability obfuscation

83
00:03:06,000 --> 00:03:08,720
now we don't have a construction of post

84
00:03:08,720 --> 00:03:10,480
quantum secure i o

85
00:03:10,480 --> 00:03:12,560
so we need a new way to verify the bank

86
00:03:12,560 --> 00:03:15,840
notes and that's the goal of this work

87
00:03:15,840 --> 00:03:18,319
in public key quantum money every

88
00:03:18,319 --> 00:03:22,239
verifier uses the same verification key

89
00:03:22,239 --> 00:03:25,519
but this is unnecessarily restrictive

90
00:03:25,519 --> 00:03:27,920
instead it suffices to give every

91
00:03:27,920 --> 00:03:31,120
verifier a unique verification key

92
00:03:31,120 --> 00:03:33,280
practically this means that a verifier

93
00:03:33,280 --> 00:03:35,280
would request a new key from the bank

94
00:03:35,280 --> 00:03:37,680
when they want to begin transacting in

95
00:03:37,680 --> 00:03:40,239
the currency system

96
00:03:40,239 --> 00:03:43,360
so since everyone has a different key

97
00:03:43,360 --> 00:03:46,159
the verifiers can keep their keys secret

98
00:03:46,159 --> 00:03:47,840
and this makes the adversary's job

99
00:03:47,840 --> 00:03:49,519
harder

100
00:03:49,519 --> 00:03:51,360
intuitively it's harder for the

101
00:03:51,360 --> 00:03:53,920
adversary to fool a verifier

102
00:03:53,920 --> 00:03:58,238
when they don't know the verifier's key

103
00:03:58,720 --> 00:04:01,680
in our paper we use this idea to

104
00:04:01,680 --> 00:04:03,760
construct quantum money in the franchise

105
00:04:03,760 --> 00:04:05,840
verification model from one-way

106
00:04:05,840 --> 00:04:07,920
functions now the construction has some

107
00:04:07,920 --> 00:04:10,080
drawbacks which i'll discuss and

108
00:04:10,080 --> 00:04:11,599
improving the construction is left for

109
00:04:11,599 --> 00:04:12,799
future work

110
00:04:12,799 --> 00:04:14,799
but the purpose of this work is to

111
00:04:14,799 --> 00:04:17,120
introduce franchised verification

112
00:04:17,120 --> 00:04:18,880
and to show how it's useful for

113
00:04:18,880 --> 00:04:21,040
unclonable cryptography

114
00:04:21,040 --> 00:04:23,759
in the rest of the talk i'll review ac

115
00:04:23,759 --> 00:04:26,000
12's construction of public key quantum

116
00:04:26,000 --> 00:04:26,960
money

117
00:04:26,960 --> 00:04:29,520
and then i'll give our construction a

118
00:04:29,520 --> 00:04:31,199
franchise quantum money

119
00:04:31,199 --> 00:04:32,880
and this will illustrate why franchise

120
00:04:32,880 --> 00:04:35,440
verification makes quantum money easier

121
00:04:35,440 --> 00:04:38,160
to construct

122
00:04:40,240 --> 00:04:42,400
first i'll go over the syntax

123
00:04:42,400 --> 00:04:44,880
for public key quantum money

124
00:04:44,880 --> 00:04:47,360
the money scheme uses a public and

125
00:04:47,360 --> 00:04:49,040
secret key

126
00:04:49,040 --> 00:04:51,199
the secret key is used by the bank to

127
00:04:51,199 --> 00:04:53,040
generate new bank notes

128
00:04:53,040 --> 00:04:55,680
that's the mint function on this slide

129
00:04:55,680 --> 00:04:57,919
the bank is trustworthy and only they

130
00:04:57,919 --> 00:04:59,919
know the secret key

131
00:04:59,919 --> 00:05:02,479
the public key can be used by anyone to

132
00:05:02,479 --> 00:05:05,840
verify that a given banknote is valid

133
00:05:05,840 --> 00:05:07,600
so in this notation

134
00:05:07,600 --> 00:05:09,919
b is a bit that says whether or not the

135
00:05:09,919 --> 00:05:11,840
banknote was accepted by the

136
00:05:11,840 --> 00:05:14,639
verification function finally we require

137
00:05:14,639 --> 00:05:16,720
that a valid banknote is perturbed

138
00:05:16,720 --> 00:05:19,520
negligibly by verification

139
00:05:19,520 --> 00:05:21,840
now i'll summarize the construction of

140
00:05:21,840 --> 00:05:24,639
public key quantum money from io

141
00:05:24,639 --> 00:05:27,680
the bank note will be an n qubit string

142
00:05:27,680 --> 00:05:30,160
and will treat each classical eigenstate

143
00:05:30,160 --> 00:05:31,360
as a vector

144
00:05:31,360 --> 00:05:33,840
in z2 to the n

145
00:05:33,840 --> 00:05:35,680
this is an n-dimensional finite vector

146
00:05:35,680 --> 00:05:37,680
space

147
00:05:37,680 --> 00:05:40,800
the secret key will be a random subspace

148
00:05:40,800 --> 00:05:42,320
of z2 to the n

149
00:05:42,320 --> 00:05:43,759
called a

150
00:05:43,759 --> 00:05:47,199
a has dimension n over 2 as does a perp

151
00:05:47,199 --> 00:05:49,919
the orthogonal complement

152
00:05:49,919 --> 00:05:52,080
next the banknote is a uniform

153
00:05:52,080 --> 00:05:55,120
superposition over all the elements of a

154
00:05:55,120 --> 00:05:57,840
we call this a subspace state

155
00:05:57,840 --> 00:06:00,560
subspace states have a nice property

156
00:06:00,560 --> 00:06:02,720
that if you take the quantum fourier

157
00:06:02,720 --> 00:06:04,639
transform of the state

158
00:06:04,639 --> 00:06:07,600
you get another subspace state back

159
00:06:07,600 --> 00:06:09,440
in particular it's a uniform

160
00:06:09,440 --> 00:06:12,720
superposition over a perp to verify the

161
00:06:12,720 --> 00:06:15,360
banknote we'll make two measurements

162
00:06:15,360 --> 00:06:17,440
one in the computational basis and one

163
00:06:17,440 --> 00:06:19,759
in the fourier basis

164
00:06:19,759 --> 00:06:21,840
first we check that the banknote is a

165
00:06:21,840 --> 00:06:23,919
superposition of elements

166
00:06:23,919 --> 00:06:25,600
of a

167
00:06:25,600 --> 00:06:27,199
in this notation

168
00:06:27,199 --> 00:06:30,000
o a is an oracle that decides membership

169
00:06:30,000 --> 00:06:30,960
in a

170
00:06:30,960 --> 00:06:32,639
then we take the quantum fourier

171
00:06:32,639 --> 00:06:33,759
transform

172
00:06:33,759 --> 00:06:36,160
and check that the result

173
00:06:36,160 --> 00:06:38,080
is a superposition over elements of a

174
00:06:38,080 --> 00:06:40,400
perp

175
00:06:40,479 --> 00:06:42,000
after this step

176
00:06:42,000 --> 00:06:44,639
the valid banknote is the only state

177
00:06:44,639 --> 00:06:46,400
that will have passed verification with

178
00:06:46,400 --> 00:06:48,400
perfect probability

179
00:06:48,400 --> 00:06:51,360
but in order for this to work o a and o

180
00:06:51,360 --> 00:06:52,720
a perp

181
00:06:52,720 --> 00:06:54,720
are included in the public verification

182
00:06:54,720 --> 00:06:55,599
key

183
00:06:55,599 --> 00:06:58,080
and as a result we need to obfuscate

184
00:06:58,080 --> 00:07:00,240
those oracles using io

185
00:07:00,240 --> 00:07:02,160
so that the adversary doesn't learn what

186
00:07:02,160 --> 00:07:03,120
a is

187
00:07:03,120 --> 00:07:06,479
so if we want to get around using io we

188
00:07:06,479 --> 00:07:08,000
have a problem

189
00:07:08,000 --> 00:07:10,160
we want to give the verifier the oracles

190
00:07:10,160 --> 00:07:11,680
without also giving them to the

191
00:07:11,680 --> 00:07:12,960
adversary

192
00:07:12,960 --> 00:07:15,360
but we want to allow anyone even a

193
00:07:15,360 --> 00:07:19,280
potential adversary to verify banknotes

194
00:07:19,280 --> 00:07:22,160
the solution is to give every verifier a

195
00:07:22,160 --> 00:07:23,840
unique key

196
00:07:23,840 --> 00:07:25,360
in particular

197
00:07:25,360 --> 00:07:27,599
we'll give each verifier some of the

198
00:07:27,599 --> 00:07:29,840
dimensions of a and a perp but not all

199
00:07:29,840 --> 00:07:30,880
of them

200
00:07:30,880 --> 00:07:32,240
our franchised quantum money

201
00:07:32,240 --> 00:07:33,680
construction

202
00:07:33,680 --> 00:07:36,880
illustrates this idea

203
00:07:37,280 --> 00:07:38,160
the

204
00:07:38,160 --> 00:07:40,000
master secret key and the banknote are

205
00:07:40,000 --> 00:07:41,919
the same as they were for public key

206
00:07:41,919 --> 00:07:44,080
quantum money the main difference is the

207
00:07:44,080 --> 00:07:46,000
verification key

208
00:07:46,000 --> 00:07:47,759
so we'll sample

209
00:07:47,759 --> 00:07:49,360
a subspace

210
00:07:49,360 --> 00:07:50,080
v

211
00:07:50,080 --> 00:07:51,919
that's contained within a

212
00:07:51,919 --> 00:07:54,240
and has dimension on the order of square

213
00:07:54,240 --> 00:07:55,199
root n

214
00:07:55,199 --> 00:07:56,639
and we'll sample

215
00:07:56,639 --> 00:07:59,360
another random subspace called w that

216
00:07:59,360 --> 00:08:01,599
lies inside of a perp

217
00:08:01,599 --> 00:08:04,800
then we'll give the verifier two oracles

218
00:08:04,800 --> 00:08:08,000
one for w perp and one for v perp

219
00:08:08,000 --> 00:08:08,879
next

220
00:08:08,879 --> 00:08:11,840
verification works similarly to before

221
00:08:11,840 --> 00:08:15,039
notice that a is contained in w perp and

222
00:08:15,039 --> 00:08:18,000
a perp is contained in v perp

223
00:08:18,000 --> 00:08:19,680
so the oracles used in franchise

224
00:08:19,680 --> 00:08:22,639
verification are like looser versions of

225
00:08:22,639 --> 00:08:26,879
the oracles from public key verification

226
00:08:26,879 --> 00:08:27,919
finally

227
00:08:27,919 --> 00:08:29,360
we don't need to obfuscate the

228
00:08:29,360 --> 00:08:31,599
franchised oracles because every

229
00:08:31,599 --> 00:08:34,640
verifier gets a different v w

230
00:08:34,640 --> 00:08:36,240
as i think about it

231
00:08:36,240 --> 00:08:38,559
the reason why franchise verification

232
00:08:38,559 --> 00:08:41,039
avoids the need for obfuscation

233
00:08:41,039 --> 00:08:43,200
is that we're not trying to prevent an

234
00:08:43,200 --> 00:08:46,480
adversary from fooling any person

235
00:08:46,480 --> 00:08:48,000
instead we're trying to prevent them

236
00:08:48,000 --> 00:08:49,920
from fooling any person other than

237
00:08:49,920 --> 00:08:51,040
themself

238
00:08:51,040 --> 00:08:52,560
there's a drawback to this construction

239
00:08:52,560 --> 00:08:54,720
however that i want to address

240
00:08:54,720 --> 00:08:57,360
if multiple adversaries collude they can

241
00:08:57,360 --> 00:08:59,760
pool their verification keys and if

242
00:08:59,760 --> 00:09:01,360
there are more than square root n of

243
00:09:01,360 --> 00:09:04,160
them they can learn all of a with good

244
00:09:04,160 --> 00:09:05,680
probability

245
00:09:05,680 --> 00:09:09,120
then they can counterfeit successfully

246
00:09:09,120 --> 00:09:10,800
so we'll assume that the number of

247
00:09:10,800 --> 00:09:13,120
colluding adversaries is upper bounded

248
00:09:13,120 --> 00:09:15,760
by some function that's

249
00:09:15,760 --> 00:09:18,800
o of square root n

250
00:09:18,800 --> 00:09:21,040
in the future we hope to improve or

251
00:09:21,040 --> 00:09:23,120
eliminate the collusion bound i'm

252
00:09:23,120 --> 00:09:25,279
optimistic that this is possible

253
00:09:25,279 --> 00:09:27,120
because that's the trajectory that

254
00:09:27,120 --> 00:09:29,440
trader tracing followed

255
00:09:29,440 --> 00:09:30,880
trader tracing

256
00:09:30,880 --> 00:09:32,720
is a form of encryption that was

257
00:09:32,720 --> 00:09:34,800
vulnerable to colluding adversaries

258
00:09:34,800 --> 00:09:37,040
early constructions used a collusion

259
00:09:37,040 --> 00:09:39,360
bound that grew linearly with the

260
00:09:39,360 --> 00:09:41,440
ciphertext size

261
00:09:41,440 --> 00:09:44,320
here the ciphertext size is analogous to

262
00:09:44,320 --> 00:09:46,000
our banknote size

263
00:09:46,000 --> 00:09:48,839
after a series of improvements

264
00:09:48,839 --> 00:09:50,399
gkw18

265
00:09:50,399 --> 00:09:52,800
gave a construction of trader tracing

266
00:09:52,800 --> 00:09:54,240
where the collusion bound grew

267
00:09:54,240 --> 00:09:57,279
exponentially in the ciphertext size

268
00:09:57,279 --> 00:09:59,120
finally i'll talk about the security

269
00:09:59,120 --> 00:10:00,480
proof

270
00:10:00,480 --> 00:10:02,640
there are actually two kinds of attacks

271
00:10:02,640 --> 00:10:05,120
that we want to rule out counterfeiting

272
00:10:05,120 --> 00:10:07,360
and sabotage we're already familiar with

273
00:10:07,360 --> 00:10:08,800
counterfeiting

274
00:10:08,800 --> 00:10:11,440
in a sabotage attack the adversary

275
00:10:11,440 --> 00:10:14,320
modifies a bank note so that one

276
00:10:14,320 --> 00:10:16,560
verifier accepts it but then another

277
00:10:16,560 --> 00:10:19,200
verifier rejects it

278
00:10:19,200 --> 00:10:21,600
this is possible in franchise

279
00:10:21,600 --> 00:10:24,480
verification because every verifier

280
00:10:24,480 --> 00:10:26,480
gets a different key

281
00:10:26,480 --> 00:10:29,040
and it's a problem in money schemes

282
00:10:29,040 --> 00:10:30,880
because if you accept a bank note from

283
00:10:30,880 --> 00:10:33,519
someone else you want to have confidence

284
00:10:33,519 --> 00:10:35,519
that you can then spend it

285
00:10:35,519 --> 00:10:38,560
this is how money retains its value

286
00:10:38,560 --> 00:10:40,399
we will prove the security of our

287
00:10:40,399 --> 00:10:42,320
franchised quantum money construction

288
00:10:42,320 --> 00:10:45,600
against both counterfeiting and sabotage

289
00:10:45,600 --> 00:10:47,920
so here's an overview of the security

290
00:10:47,920 --> 00:10:49,440
proof

291
00:10:49,440 --> 00:10:51,440
we have seen two kinds of verification

292
00:10:51,440 --> 00:10:52,399
so far

293
00:10:52,399 --> 00:10:55,279
so in public key quantum money the

294
00:10:55,279 --> 00:10:58,640
oracles were oa and oeperp

295
00:10:58,640 --> 00:11:01,200
we'll call this full verification

296
00:11:01,200 --> 00:11:03,360
because the verifier gets all of the

297
00:11:03,360 --> 00:11:05,920
dimensions of a and a perp

298
00:11:05,920 --> 00:11:08,000
the second kind of verification we've

299
00:11:08,000 --> 00:11:10,720
seen is franchised the key to our proof

300
00:11:10,720 --> 00:11:12,480
is showing that an adversary who can

301
00:11:12,480 --> 00:11:14,800
interact with the verifier

302
00:11:14,800 --> 00:11:17,279
can't tell whether the verifier is full

303
00:11:17,279 --> 00:11:18,720
or franchised

304
00:11:18,720 --> 00:11:20,880
in a little more detail we'll consider a

305
00:11:20,880 --> 00:11:21,920
game

306
00:11:21,920 --> 00:11:24,079
in which the adversary is given at least

307
00:11:24,079 --> 00:11:26,240
as much power as they were given in the

308
00:11:26,240 --> 00:11:28,320
counterfeiting and sabotage security

309
00:11:28,320 --> 00:11:29,200
games

310
00:11:29,200 --> 00:11:31,040
for instance they have access to some

311
00:11:31,040 --> 00:11:33,519
number of valid bank notes they can

312
00:11:33,519 --> 00:11:37,279
query the verifier etc

313
00:11:37,279 --> 00:11:39,279
then at the end of the game we ask the

314
00:11:39,279 --> 00:11:41,839
adversary to tell whether the verifier

315
00:11:41,839 --> 00:11:44,320
they were interacting with was full or

316
00:11:44,320 --> 00:11:46,079
franchised

317
00:11:46,079 --> 00:11:48,640
and will show using the adversary method

318
00:11:48,640 --> 00:11:50,240
that they can't

319
00:11:50,240 --> 00:11:51,519
this allows

320
00:11:51,519 --> 00:11:53,040
the franchised quantum money

321
00:11:53,040 --> 00:11:54,320
construction

322
00:11:54,320 --> 00:11:56,959
to inherit security properties from the

323
00:11:56,959 --> 00:12:00,480
public key quantum money construction

324
00:12:00,480 --> 00:12:03,519
ac 12 showed that the public key quantum

325
00:12:03,519 --> 00:12:05,760
money construction is secure against

326
00:12:05,760 --> 00:12:08,000
counterfeiting and it's easy to show

327
00:12:08,000 --> 00:12:10,959
that it's also secure against sabotage

328
00:12:10,959 --> 00:12:12,320
this is because

329
00:12:12,320 --> 00:12:14,560
it's a public key quantum money scheme

330
00:12:14,560 --> 00:12:17,040
so every verifier gets the same key

331
00:12:17,040 --> 00:12:19,120
and verification is projective

332
00:12:19,120 --> 00:12:20,079
therefore

333
00:12:20,079 --> 00:12:22,480
if a banknote is accepted by one

334
00:12:22,480 --> 00:12:25,120
verifier it will certainly be accepted

335
00:12:25,120 --> 00:12:27,360
by a second verifier

336
00:12:27,360 --> 00:12:29,920
finally we can say that

337
00:12:29,920 --> 00:12:31,360
our franchised quantum money

338
00:12:31,360 --> 00:12:33,600
construction is also secure against

339
00:12:33,600 --> 00:12:35,440
counterfeiting and sabotage

340
00:12:35,440 --> 00:12:37,839
because otherwise an adversary would be

341
00:12:37,839 --> 00:12:40,480
able to distinguish between a franchised

342
00:12:40,480 --> 00:12:42,399
and a full verifier

343
00:12:42,399 --> 00:12:44,800
in future work i hope that we can

344
00:12:44,800 --> 00:12:48,320
improve or eliminate the collusion bound

345
00:12:48,320 --> 00:12:50,639
and as i discussed earlier i think that

346
00:12:50,639 --> 00:12:53,600
techniques from trader tracing may help

347
00:12:53,600 --> 00:12:55,600
that's it and i'm happy to answer any

348
00:12:55,600 --> 00:12:59,480
questions you may have

