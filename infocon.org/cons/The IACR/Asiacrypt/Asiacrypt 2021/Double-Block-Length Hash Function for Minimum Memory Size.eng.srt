1
00:00:00,880 --> 00:00:01,920
hi

2
00:00:01,920 --> 00:00:04,799
i'm going to talk about our paper double

3
00:00:04,799 --> 00:00:06,960
block length hash function for minimum

4
00:00:06,960 --> 00:00:08,400
memory size

5
00:00:08,400 --> 00:00:11,360
i'm using nito and this is the joint

6
00:00:11,360 --> 00:00:15,360
work with yusasaki and turkish score

7
00:00:15,360 --> 00:00:19,039
this is a summary of our results

8
00:00:19,039 --> 00:00:21,760
our goal is to provide block cipher

9
00:00:21,760 --> 00:00:22,800
based

10
00:00:22,800 --> 00:00:25,039
or single block cipher

11
00:00:25,039 --> 00:00:27,519
best double block rank hash functions

12
00:00:27,519 --> 00:00:30,960
with minimum memory size the memory size

13
00:00:30,960 --> 00:00:33,840
determines the overall hardware cost in

14
00:00:33,840 --> 00:00:35,840
lightweight implementation

15
00:00:35,840 --> 00:00:38,640
and existing double block length schemes

16
00:00:38,640 --> 00:00:41,680
do not achieve the minimum memory size

17
00:00:41,680 --> 00:00:44,239
so we propose new double brokerage

18
00:00:44,239 --> 00:00:45,920
hashing modes

19
00:00:45,920 --> 00:00:50,000
x x and i and x x i

20
00:00:50,000 --> 00:00:51,360
that have

21
00:00:51,360 --> 00:00:53,360
minimum resize

22
00:00:53,360 --> 00:00:57,440
regarding security x x and i achieve

23
00:00:57,440 --> 00:00:59,920
optimal individual security

24
00:00:59,920 --> 00:01:02,960
and xxi achieves optimal collision

25
00:01:02,960 --> 00:01:04,879
security

26
00:01:04,879 --> 00:01:07,920
and we compare hardware performances of

27
00:01:07,920 --> 00:01:10,960
our hosting scheme on the existing

28
00:01:10,960 --> 00:01:13,360
double block ranks hash function numbers

29
00:01:13,360 --> 00:01:14,240
h

30
00:01:14,240 --> 00:01:17,520
which is a finalist of the ongoing nist

31
00:01:17,520 --> 00:01:19,600
lightweight cryptography standardization

32
00:01:19,600 --> 00:01:20,880
process

33
00:01:20,880 --> 00:01:24,479
as a result our scheme reduces 30 of

34
00:01:24,479 --> 00:01:26,479
hardware cost

35
00:01:26,479 --> 00:01:28,880
okay so firstly i explained the

36
00:01:28,880 --> 00:01:31,200
background of our research

37
00:01:31,200 --> 00:01:33,520
lightweight crystallography has been a

38
00:01:33,520 --> 00:01:36,320
topic in cryptography so

39
00:01:36,320 --> 00:01:39,600
for more than a decade the motivation is

40
00:01:39,600 --> 00:01:42,479
to design cryptographic algorithms that

41
00:01:42,479 --> 00:01:45,840
achieve efficient performances by design

42
00:01:45,840 --> 00:01:47,920
to provide data security for resource

43
00:01:47,920 --> 00:01:50,079
consulting devices

44
00:01:50,079 --> 00:01:52,960
lightweight includes a lot of meanings

45
00:01:52,960 --> 00:01:54,880
such as

46
00:01:54,880 --> 00:01:57,439
small memory size power consumption

47
00:01:57,439 --> 00:01:59,600
latency and so on

48
00:01:59,600 --> 00:02:01,840
and the target of this stock is memory

49
00:02:01,840 --> 00:02:02,880
size

50
00:02:02,880 --> 00:02:05,439
memory size determine the over

51
00:02:05,439 --> 00:02:07,680
or hardware cost in lightweight

52
00:02:07,680 --> 00:02:09,038
implementation

53
00:02:09,038 --> 00:02:11,599
so by reducing a memory size the

54
00:02:11,599 --> 00:02:14,800
hardware cost is reduced

55
00:02:14,800 --> 00:02:18,720
and in lightweight clock photography

56
00:02:18,720 --> 00:02:21,520
sharing a printing for much

57
00:02:21,520 --> 00:02:24,319
functionalities is important because

58
00:02:24,319 --> 00:02:26,560
thanks to the common primitive one can

59
00:02:26,560 --> 00:02:29,920
reduce the total memory size

60
00:02:29,920 --> 00:02:32,080
in the ongoing least lightweight

61
00:02:32,080 --> 00:02:34,400
cryptography standardizing process

62
00:02:34,400 --> 00:02:36,560
authenticated encryption and hash

63
00:02:36,560 --> 00:02:38,800
functions are considered

64
00:02:38,800 --> 00:02:41,519
and now four out of ten finalists

65
00:02:41,519 --> 00:02:43,040
support both

66
00:02:43,040 --> 00:02:44,959
authenticated encryption and hash

67
00:02:44,959 --> 00:02:47,280
function

68
00:02:47,280 --> 00:02:49,680
nist selected different types of

69
00:02:49,680 --> 00:02:53,200
printing due to design diversity

70
00:02:53,200 --> 00:02:55,760
design of hash functions is a topic of

71
00:02:55,760 --> 00:02:58,560
the stock a hash function takes an outer

72
00:02:58,560 --> 00:03:00,959
range input string and returns a fixed

73
00:03:00,959 --> 00:03:02,879
blank string such as

74
00:03:02,879 --> 00:03:04,879
these bit lengths

75
00:03:04,879 --> 00:03:07,040
hash functions are designed so that

76
00:03:07,040 --> 00:03:10,000
these security notions are satisfied and

77
00:03:10,000 --> 00:03:12,080
designed by using these

78
00:03:12,080 --> 00:03:13,760
primitive

79
00:03:13,760 --> 00:03:15,920
proxiphar thicker procedure and

80
00:03:15,920 --> 00:03:17,519
plantation

81
00:03:17,519 --> 00:03:19,680
in the new standardization process four

82
00:03:19,680 --> 00:03:22,000
finalists support hash function and

83
00:03:22,000 --> 00:03:24,000
three finalists are permutation-based

84
00:03:24,000 --> 00:03:26,000
schemes and the other is the trigger

85
00:03:26,000 --> 00:03:28,000
block cipher-based scheme

86
00:03:28,000 --> 00:03:31,200
and this talk focuses on book cipher

87
00:03:31,200 --> 00:03:32,720
and thicker block cipher-based

88
00:03:32,720 --> 00:03:34,640
construction

89
00:03:34,640 --> 00:03:37,040
so block cipher is a family of

90
00:03:37,040 --> 00:03:39,599
computations in textbike

91
00:03:39,599 --> 00:03:41,120
case

92
00:03:41,120 --> 00:03:44,799
and block cipher is used mainly used as

93
00:03:44,799 --> 00:03:45,680
a

94
00:03:45,680 --> 00:03:49,120
components of symmetric key algorithms

95
00:03:49,120 --> 00:03:52,159
such as authenticated encryption and

96
00:03:52,159 --> 00:03:55,040
message authentication code

97
00:03:55,040 --> 00:03:56,239
and

98
00:03:56,239 --> 00:03:58,159
in these settings

99
00:03:58,159 --> 00:04:03,040
block cipher a key is random on secret

100
00:04:03,040 --> 00:04:05,200
so when designing a block server-based

101
00:04:05,200 --> 00:04:06,560
hash function

102
00:04:06,560 --> 00:04:07,519
the

103
00:04:07,519 --> 00:04:08,640
input

104
00:04:08,640 --> 00:04:11,360
and output become public so using the

105
00:04:11,360 --> 00:04:14,000
digi function of the block cipher the

106
00:04:14,000 --> 00:04:16,959
preliminarity is easily broken

107
00:04:16,959 --> 00:04:19,358
that is given the

108
00:04:19,358 --> 00:04:22,560
output set using the degree function one

109
00:04:22,560 --> 00:04:24,479
can easily

110
00:04:24,479 --> 00:04:27,840
form the input x on

111
00:04:27,840 --> 00:04:31,040
so to avoid such attacks using the

112
00:04:31,040 --> 00:04:32,720
decryption function

113
00:04:32,720 --> 00:04:35,600
the input is feed forward to the output

114
00:04:35,600 --> 00:04:37,280
like this figure

115
00:04:37,280 --> 00:04:39,680
this is the depictment mode

116
00:04:39,680 --> 00:04:43,040
and the feed for the operations

117
00:04:43,040 --> 00:04:45,440
ensure collision recent up to two to

118
00:04:45,440 --> 00:04:48,720
half of energy complexity in the idle

119
00:04:48,720 --> 00:04:50,720
cipher model

120
00:04:50,720 --> 00:04:54,000
n is the block size

121
00:04:54,000 --> 00:04:55,759
and then

122
00:04:55,759 --> 00:04:58,800
variable input length hash functions

123
00:04:58,800 --> 00:05:01,840
can be obtained by combining a

124
00:05:01,840 --> 00:05:04,080
compression function with the domain

125
00:05:04,080 --> 00:05:07,520
extender such as mark rectangles

126
00:05:07,520 --> 00:05:10,479
this is a macro dangled with device mail

127
00:05:10,479 --> 00:05:11,759
mode

128
00:05:11,759 --> 00:05:14,880
on the other hand the out strength of

129
00:05:14,880 --> 00:05:17,600
block ciphers are commonly

130
00:05:17,600 --> 00:05:22,160
less than or equal to 128 bits

131
00:05:22,160 --> 00:05:26,479
such as the aes aren't skinny

132
00:05:26,479 --> 00:05:27,520
and

133
00:05:27,520 --> 00:05:31,120
but the output lenses or blue circles

134
00:05:31,120 --> 00:05:33,039
are too short

135
00:05:33,039 --> 00:05:35,080
so when using the

136
00:05:35,080 --> 00:05:37,680
128-bit block cipher

137
00:05:37,680 --> 00:05:41,919
the security is insured up to only to do

138
00:05:41,919 --> 00:05:43,199
64

139
00:05:43,199 --> 00:05:45,120
carry complexity due to the birthday

140
00:05:45,120 --> 00:05:46,560
attack

141
00:05:46,560 --> 00:05:49,199
so hash functions such as shuttle and

142
00:05:49,199 --> 00:05:53,600
chassis are designed for the outputs are

143
00:05:53,600 --> 00:05:56,000
greater than or equal to

144
00:05:56,000 --> 00:05:59,000
224

145
00:05:59,360 --> 00:06:01,759
so double block length design is a

146
00:06:01,759 --> 00:06:05,039
useful approach to solve the problem

147
00:06:05,039 --> 00:06:07,919
where the outbreak is extended by

148
00:06:07,919 --> 00:06:10,560
calling a block cipher twice

149
00:06:10,560 --> 00:06:13,280
so this figure is one of the double

150
00:06:13,280 --> 00:06:15,840
grain schemes hero cell schemes

151
00:06:15,840 --> 00:06:18,960
affairs rook cipher is called the upper

152
00:06:18,960 --> 00:06:20,960
and lower part

153
00:06:20,960 --> 00:06:23,199
and so the up length

154
00:06:23,199 --> 00:06:25,919
becomes the 2n bit

155
00:06:25,919 --> 00:06:27,919
and so for several

156
00:06:27,919 --> 00:06:30,479
double rock lens skins having proposed

157
00:06:30,479 --> 00:06:33,919
such as closer schemes mdm or sdm and so

158
00:06:33,919 --> 00:06:35,199
on

159
00:06:35,199 --> 00:06:37,520
and these skins achieve collision brake

160
00:06:37,520 --> 00:06:40,319
sound up to to the end carry complexity

161
00:06:40,319 --> 00:06:43,360
which is optimal quality security for

162
00:06:43,360 --> 00:06:45,199
12-bit

163
00:06:45,199 --> 00:06:46,840
output

164
00:06:46,840 --> 00:06:50,720
length and then a variable instrument

165
00:06:50,720 --> 00:06:53,120
double programs hash function can be

166
00:06:53,120 --> 00:06:55,599
obtained by combining uh

167
00:06:55,599 --> 00:06:58,000
double programming schemes with domain

168
00:06:58,000 --> 00:06:59,840
exchanges

169
00:06:59,840 --> 00:07:03,280
such as macro dangled regarding memory

170
00:07:03,280 --> 00:07:06,160
size of double programs hash functions

171
00:07:06,160 --> 00:07:07,840
due to the input length of the

172
00:07:07,840 --> 00:07:10,479
underlying block cipher the minimum size

173
00:07:10,479 --> 00:07:13,360
is at risk and breast care bits

174
00:07:13,360 --> 00:07:16,960
n is block size and k the key size on

175
00:07:16,960 --> 00:07:19,520
the other hand existing double length

176
00:07:19,520 --> 00:07:21,280
hash functions need

177
00:07:21,280 --> 00:07:24,639
at least 2 n plus k bit memory

178
00:07:24,639 --> 00:07:26,639
and existing double brock length hash

179
00:07:26,639 --> 00:07:29,039
functions are mainly categorized into

180
00:07:29,039 --> 00:07:31,039
these two types

181
00:07:31,039 --> 00:07:33,440
the first type uses a fetal chord

182
00:07:33,440 --> 00:07:35,840
operation like this figure

183
00:07:35,840 --> 00:07:38,400
this type needs a memory to keep one

184
00:07:38,400 --> 00:07:41,759
output blocked off and a bit while

185
00:07:41,759 --> 00:07:44,639
calculating the other and with output

186
00:07:44,639 --> 00:07:45,759
block

187
00:07:45,759 --> 00:07:47,919
so for example

188
00:07:47,919 --> 00:07:49,120
this

189
00:07:49,120 --> 00:07:51,680
double grain scheme performs the upper

190
00:07:51,680 --> 00:07:54,639
and lower part probably

191
00:07:54,639 --> 00:07:56,879
so

192
00:07:56,960 --> 00:07:59,440
this type of program scheme keeps

193
00:07:59,440 --> 00:08:03,520
this uh nb output block when calculating

194
00:08:03,520 --> 00:08:06,960
the upper part the upper part requires

195
00:08:06,960 --> 00:08:09,759
to n plus k with memory

196
00:08:09,759 --> 00:08:12,639
on the other hand

197
00:08:13,440 --> 00:08:14,960
the other type

198
00:08:14,960 --> 00:08:17,199
this type does not use

199
00:08:17,199 --> 00:08:20,639
a feedback operation

200
00:08:20,639 --> 00:08:22,960
although the feedword operation is used

201
00:08:22,960 --> 00:08:25,280
to avoid attacks using a degreaser

202
00:08:25,280 --> 00:08:27,280
function

203
00:08:27,280 --> 00:08:29,520
then some shows that by iterating the

204
00:08:29,520 --> 00:08:31,120
double block length

205
00:08:31,120 --> 00:08:33,599
scheme like this figure

206
00:08:33,599 --> 00:08:36,240
the resultant scheme becomes an optimal

207
00:08:36,240 --> 00:08:39,440
quadrant resistance hash function

208
00:08:39,440 --> 00:08:41,679
so by removing the field for the

209
00:08:41,679 --> 00:08:45,040
operation the memory size is improved to

210
00:08:45,040 --> 00:08:47,519
to n plus k bits

211
00:08:47,519 --> 00:08:50,240
this period summarize existing double

212
00:08:50,240 --> 00:08:52,320
program schemes

213
00:08:52,320 --> 00:08:55,519
this line shows the memory size as we

214
00:08:55,519 --> 00:08:58,640
can see none of existing schemes do not

215
00:08:58,640 --> 00:09:00,800
achieve the memory size and brush

216
00:09:00,800 --> 00:09:05,040
cabinet so we solve the open problem

217
00:09:05,040 --> 00:09:07,519
we first explain a basic component of

218
00:09:07,519 --> 00:09:11,279
our double programs hash functions xx

219
00:09:11,279 --> 00:09:13,360
this figure shows

220
00:09:13,360 --> 00:09:15,440
the exact structure

221
00:09:15,440 --> 00:09:18,160
idea behind asking

222
00:09:18,160 --> 00:09:18,959
that

223
00:09:18,959 --> 00:09:21,680
a 12-bit internal state is updated by

224
00:09:21,680 --> 00:09:24,399
sequentially processing

225
00:09:24,399 --> 00:09:27,519
the block cipher and our memory for the

226
00:09:27,519 --> 00:09:29,920
underlying block cipher is commonly used

227
00:09:29,920 --> 00:09:32,800
to keep the internal state as a result

228
00:09:32,800 --> 00:09:36,720
xx achieves minimum memory size

229
00:09:36,720 --> 00:09:38,240
note that

230
00:09:38,240 --> 00:09:40,000
although these

231
00:09:40,000 --> 00:09:42,640
key inputs must be required to calculate

232
00:09:42,640 --> 00:09:43,839
the next

233
00:09:43,839 --> 00:09:45,839
internal state values

234
00:09:45,839 --> 00:09:47,360
but

235
00:09:47,360 --> 00:09:49,680
key input

236
00:09:49,680 --> 00:09:52,320
can be recovered by embossing the key

237
00:09:52,320 --> 00:09:54,959
schedule of the underlying block cipher

238
00:09:54,959 --> 00:09:55,920
so

239
00:09:55,920 --> 00:09:58,080
this scheme does not require a memory to

240
00:09:58,080 --> 00:09:59,600
keep these

241
00:09:59,600 --> 00:10:02,240
key inputs

242
00:10:02,240 --> 00:10:06,079
for security we design an express hash

243
00:10:06,079 --> 00:10:08,640
function so that these requirements are

244
00:10:08,640 --> 00:10:11,680
satisfied these are the requirements of

245
00:10:11,680 --> 00:10:15,120
this standardization process

246
00:10:15,120 --> 00:10:19,040
however xx itself is not secure function

247
00:10:19,040 --> 00:10:21,120
because one can easily calculate a

248
00:10:21,120 --> 00:10:23,360
premade from

249
00:10:23,360 --> 00:10:26,320
the output or by using a degree function

250
00:10:26,320 --> 00:10:29,200
of the block cipher so we use the idea

251
00:10:29,200 --> 00:10:32,880
by using thumbs up if we ensured

252
00:10:32,880 --> 00:10:34,880
these requirements by iterating the

253
00:10:34,880 --> 00:10:37,360
exact scheme

254
00:10:37,360 --> 00:10:39,600
this is the main construction of our

255
00:10:39,600 --> 00:10:42,120
result xxni

256
00:10:42,120 --> 00:10:44,959
xxni is designed so that it is

257
00:10:44,959 --> 00:10:47,440
indifferentiable secure which ensures

258
00:10:47,440 --> 00:10:49,600
security against the ranks extension

259
00:10:49,600 --> 00:10:52,880
attack as well as cultural resistance

260
00:10:52,880 --> 00:10:56,079
regarding the structure xx ny has the

261
00:10:56,079 --> 00:10:58,560
iterative structure of

262
00:10:58,560 --> 00:11:00,640
xx in a scheme

263
00:11:00,640 --> 00:11:03,600
but it is hash function is vulnerable to

264
00:11:03,600 --> 00:11:06,000
a length extension attack which breaks

265
00:11:06,000 --> 00:11:08,320
in differentiability so to avoid the

266
00:11:08,320 --> 00:11:10,720
ranks extension attack we make use of

267
00:11:10,720 --> 00:11:14,640
the net structure in this part

268
00:11:14,640 --> 00:11:16,640
by the iterative

269
00:11:16,640 --> 00:11:18,560
uh nessie structure

270
00:11:18,560 --> 00:11:21,440
we can ensure that x x and y is

271
00:11:21,440 --> 00:11:23,920
independent of secure up to

272
00:11:23,920 --> 00:11:26,320
this security level

273
00:11:26,320 --> 00:11:27,800
so when using

274
00:11:27,800 --> 00:11:30,079
128-bit block cipher

275
00:11:30,079 --> 00:11:31,120
uh

276
00:11:31,120 --> 00:11:32,079
xx

277
00:11:32,079 --> 00:11:35,200
achieves indifferential security up to

278
00:11:35,200 --> 00:11:37,839
uh this security level which satisfy the

279
00:11:37,839 --> 00:11:41,120
requirement of our goal the next scheme

280
00:11:41,120 --> 00:11:45,920
is xxi the motivation of designing xxi

281
00:11:45,920 --> 00:11:49,519
is to improve the efficiency of xsni

282
00:11:49,519 --> 00:11:51,760
since several applications do not

283
00:11:51,760 --> 00:11:54,240
require security against ranks extension

284
00:11:54,240 --> 00:11:57,680
attack we can remove the nested part

285
00:11:57,680 --> 00:12:00,160
which is introduced to resist the length

286
00:12:00,160 --> 00:12:02,240
extension dock

287
00:12:02,240 --> 00:12:04,320
so

288
00:12:04,320 --> 00:12:07,519
by iterating the xx

289
00:12:07,519 --> 00:12:09,680
function like this figure

290
00:12:09,680 --> 00:12:13,600
we can ensure quantum security up to

291
00:12:13,600 --> 00:12:17,760
the security level since the next part

292
00:12:17,760 --> 00:12:22,000
is removed x x i is faster than x x and

293
00:12:22,000 --> 00:12:23,519
y by two

294
00:12:23,519 --> 00:12:25,200
processor calls

295
00:12:25,200 --> 00:12:28,160
so far i explained our hash functions

296
00:12:28,160 --> 00:12:30,639
using this xx

297
00:12:30,639 --> 00:12:33,440
function but the security holds even

298
00:12:33,440 --> 00:12:36,720
when inserting linear functions by one

299
00:12:36,720 --> 00:12:40,240
and by 2 in this in this part

300
00:12:40,240 --> 00:12:42,800
motivation of the modification is to

301
00:12:42,800 --> 00:12:45,760
remove the inverse of the key schedule

302
00:12:45,760 --> 00:12:48,079
so if the key schedule of the underlying

303
00:12:48,079 --> 00:12:50,480
block cipher is linear

304
00:12:50,480 --> 00:12:53,040
then by setting the key schedule to

305
00:12:53,040 --> 00:12:56,720
these linear operations we can reuse the

306
00:12:56,720 --> 00:12:59,440
results of the key schedule to update

307
00:12:59,440 --> 00:13:02,000
the internal state thereby saving the

308
00:13:02,000 --> 00:13:05,360
cost of the inverse of the key schedule

309
00:13:05,360 --> 00:13:07,920
this thread compares all double length

310
00:13:07,920 --> 00:13:11,279
hash functions with using scheme

311
00:13:11,279 --> 00:13:13,360
as shown in this line

312
00:13:13,360 --> 00:13:16,639
the memory sizes of our hash functions

313
00:13:16,639 --> 00:13:21,120
are smaller than the existing scheme

314
00:13:21,120 --> 00:13:23,360
this slide shows hardware performance

315
00:13:23,360 --> 00:13:26,000
versions of our hash functions we

316
00:13:26,000 --> 00:13:28,480
compare our hash functions with romulus

317
00:13:28,480 --> 00:13:30,880
h which is finalist of

318
00:13:30,880 --> 00:13:33,839
nist standardization

319
00:13:33,839 --> 00:13:37,519
romulus h is a combination of mdph mode

320
00:13:37,519 --> 00:13:39,120
and skinny

321
00:13:39,120 --> 00:13:43,040
so we use the same primitive

322
00:13:43,040 --> 00:13:44,959
for our hash functions

323
00:13:44,959 --> 00:13:47,760
and we implemented these schemes with

324
00:13:47,760 --> 00:13:51,040
the same design policy

325
00:13:51,120 --> 00:13:54,160
since the memory sizes of our modes are

326
00:13:54,160 --> 00:13:57,920
smaller than mgp8 mode by

327
00:13:57,920 --> 00:13:59,440
12 bit

328
00:13:59,440 --> 00:14:02,079
our hash function reduces 30 percent of

329
00:14:02,079 --> 00:14:03,920
hardware cost

330
00:14:03,920 --> 00:14:06,160
this is the conclusion of my talk we

331
00:14:06,160 --> 00:14:08,240
proposed two double programs hash

332
00:14:08,240 --> 00:14:11,680
functions xx and i xxi

333
00:14:11,680 --> 00:14:14,160
that achieve minimum memory size and

334
00:14:14,160 --> 00:14:18,160
optimal security x x and y in inversion

335
00:14:18,160 --> 00:14:22,240
secure up to the security level and xxi

336
00:14:22,240 --> 00:14:24,480
is coding recent up to this security

337
00:14:24,480 --> 00:14:27,320
level so when using

338
00:14:27,320 --> 00:14:31,360
128 speed block cipher such as skinny

339
00:14:31,360 --> 00:14:34,800
xx ny and xsi satisfy

340
00:14:34,800 --> 00:14:37,120
this security level

341
00:14:37,120 --> 00:14:40,399
which is required by nist

342
00:14:40,399 --> 00:14:42,639
standardization process

343
00:14:42,639 --> 00:14:45,360
we finally compared our hash functions

344
00:14:45,360 --> 00:14:47,519
with romulus h

345
00:14:47,519 --> 00:14:50,639
and our hash function reduces 30 percent

346
00:14:50,639 --> 00:14:53,920
of our cost

347
00:14:53,920 --> 00:14:56,800
this is end of my talk thank you very

348
00:14:56,800 --> 00:14:59,519
much

