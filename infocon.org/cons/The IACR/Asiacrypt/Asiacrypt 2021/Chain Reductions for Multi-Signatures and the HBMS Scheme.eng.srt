1
00:00:01,280 --> 00:00:03,520
hi my name is wei dai and today i'm

2
00:00:03,520 --> 00:00:04,560
going to be talking about chain

3
00:00:04,560 --> 00:00:06,640
reductions from time signatures and the

4
00:00:06,640 --> 00:00:09,760
hbms scheme this is drawing work with

5
00:00:09,760 --> 00:00:11,759
meteor polarity

6
00:00:11,759 --> 00:00:13,280
so what are multi-signatures

7
00:00:13,280 --> 00:00:15,040
multi-signatures allow a collection of

8
00:00:15,040 --> 00:00:17,840
designers to endorse on a common message

9
00:00:17,840 --> 00:00:20,080
with a short signature

10
00:00:20,080 --> 00:00:22,160
and will require that each signer to be

11
00:00:22,160 --> 00:00:23,359
able to generate their keys

12
00:00:23,359 --> 00:00:25,840
independently by running a key

13
00:00:25,840 --> 00:00:27,920
generation algorithm

14
00:00:27,920 --> 00:00:30,480
sign-in is a multi-run protocol between

15
00:00:30,480 --> 00:00:33,360
any number of end parties

16
00:00:33,360 --> 00:00:36,000
they take input the message to be signed

17
00:00:36,000 --> 00:00:37,760
as well as a vector of public keys

18
00:00:37,760 --> 00:00:39,920
denoting the participants

19
00:00:39,920 --> 00:00:41,680
at the end they should return a short

20
00:00:41,680 --> 00:00:44,480
signature sigma by short

21
00:00:44,480 --> 00:00:46,559
we mean that the length of the signature

22
00:00:46,559 --> 00:00:48,239
should be independent of the number of

23
00:00:48,239 --> 00:00:50,719
signing parties n

24
00:00:50,719 --> 00:00:54,000
verification takes a list of public keys

25
00:00:54,000 --> 00:00:56,320
and a message and a ledger's signature

26
00:00:56,320 --> 00:00:59,199
to return a boolean value

27
00:00:59,199 --> 00:01:01,359
key aggregation is an optional feature

28
00:01:01,359 --> 00:01:03,600
for multi-signature schemes

29
00:01:03,600 --> 00:01:05,360
and we say that a scheme supports key

30
00:01:05,360 --> 00:01:07,520
irrigation if there are two additional

31
00:01:07,520 --> 00:01:08,640
algorithms

32
00:01:08,640 --> 00:01:11,280
first key aggregation which takes

33
00:01:11,280 --> 00:01:14,000
in a list of public keys to return one

34
00:01:14,000 --> 00:01:15,680
public key that's

35
00:01:15,680 --> 00:01:17,680
what we call the aggregate public key

36
00:01:17,680 --> 00:01:19,600
and we require that i would i would get

37
00:01:19,600 --> 00:01:21,280
a public key to be

38
00:01:21,280 --> 00:01:23,360
about the same length as regular public

39
00:01:23,360 --> 00:01:25,040
key

40
00:01:25,040 --> 00:01:27,360
now verification instead takes in an

41
00:01:27,360 --> 00:01:29,360
aggregated public key a message and a

42
00:01:29,360 --> 00:01:32,240
signature to return a voting value

43
00:01:32,240 --> 00:01:34,320
to replicate the same syntax as standard

44
00:01:34,320 --> 00:01:36,880
verification we define the following

45
00:01:36,880 --> 00:01:39,119
verification algorithm to be

46
00:01:39,119 --> 00:01:40,560
simply the composition of key

47
00:01:40,560 --> 00:01:44,799
aggregation and verification

48
00:01:45,439 --> 00:01:47,600
for security we ask for

49
00:01:47,600 --> 00:01:49,920
msuf cma security

50
00:01:49,920 --> 00:01:52,079
which is encapsulated in the following

51
00:01:52,079 --> 00:01:53,439
game

52
00:01:53,439 --> 00:01:55,840
here the adversary obtains from the

53
00:01:55,840 --> 00:01:58,479
initialization work of the game a random

54
00:01:58,479 --> 00:02:00,960
public key

55
00:02:00,960 --> 00:02:03,040
which we call the target public key

56
00:02:03,040 --> 00:02:04,560
and to win the game

57
00:02:04,560 --> 00:02:07,600
it must supply a forgery

58
00:02:07,600 --> 00:02:09,598
signature

59
00:02:09,598 --> 00:02:10,479
that is

60
00:02:10,479 --> 00:02:11,760
must be valid

61
00:02:11,760 --> 00:02:13,440
for the list of public keys which

62
00:02:13,440 --> 00:02:16,400
contains the target public key

63
00:02:16,400 --> 00:02:18,640
to help you succeed the game exposes the

64
00:02:18,640 --> 00:02:20,959
interface using which the adversary can

65
00:02:20,959 --> 00:02:23,840
interact with all the signer arbitrarily

66
00:02:23,840 --> 00:02:25,840
in parallel

67
00:02:25,840 --> 00:02:28,080
the adversary is able to control all

68
00:02:28,080 --> 00:02:29,920
keys besides

69
00:02:29,920 --> 00:02:32,560
besides the target public key

70
00:02:32,560 --> 00:02:34,400
and we define the advantage of the

71
00:02:34,400 --> 00:02:35,840
adversary against the multi-central

72
00:02:35,840 --> 00:02:39,200
scheme to be simply the probability that

73
00:02:39,200 --> 00:02:43,119
the atmosphere breaks the following game

74
00:02:44,080 --> 00:02:45,360
and here's a brief timeline of

75
00:02:45,360 --> 00:02:47,360
development of multi-signatures

76
00:02:47,360 --> 00:02:49,440
it was first suggested almost 40 years

77
00:02:49,440 --> 00:02:50,720
ago now

78
00:02:50,720 --> 00:02:52,640
and earlier constructions are

79
00:02:52,640 --> 00:02:55,120
susceptible to rocky attacks

80
00:02:55,120 --> 00:02:57,040
or in other words

81
00:02:57,040 --> 00:02:58,480
they're not secure against the notion

82
00:02:58,480 --> 00:03:00,720
that we just described

83
00:03:00,720 --> 00:03:02,480
and there are two approaches to prevent

84
00:03:02,480 --> 00:03:05,519
okie attacks first requires interactive

85
00:03:05,519 --> 00:03:06,879
key generation

86
00:03:06,879 --> 00:03:09,440
which again does not satisfy the notion

87
00:03:09,440 --> 00:03:11,360
that we are considering

88
00:03:11,360 --> 00:03:13,840
and the second approach is to assume the

89
00:03:13,840 --> 00:03:16,480
knowledge of secret key assumption which

90
00:03:16,480 --> 00:03:18,400
requires more complicated key generation

91
00:03:18,400 --> 00:03:20,879
algorithms

92
00:03:21,760 --> 00:03:22,959
and

93
00:03:22,959 --> 00:03:25,599
one clinical scheme that achieves the

94
00:03:25,599 --> 00:03:27,360
security work we discussed in the

95
00:03:27,360 --> 00:03:29,599
previous slides is a discrete log based

96
00:03:29,599 --> 00:03:31,519
construction

97
00:03:31,519 --> 00:03:33,440
which we refer to as blurry nema

98
00:03:33,440 --> 00:03:36,000
construction

99
00:03:36,159 --> 00:03:38,560
and it serves as a basis for the more

100
00:03:38,560 --> 00:03:39,519
recent

101
00:03:39,519 --> 00:03:41,840
multi-center schemes

102
00:03:41,840 --> 00:03:43,760
that people have looked at due to

103
00:03:43,760 --> 00:03:45,760
applications in blockchain settings in

104
00:03:45,760 --> 00:03:48,000
particular two settings of multifunction

105
00:03:48,000 --> 00:03:50,959
wallets and in the consistent setting

106
00:03:50,959 --> 00:03:54,640
short certificate of finalized states

107
00:03:54,640 --> 00:03:56,480
and following the most more recent

108
00:03:56,480 --> 00:03:58,080
developments bitcoin has actually

109
00:03:58,080 --> 00:04:01,840
recently adopted short signatures

110
00:04:02,000 --> 00:04:03,760
and there's a couple of features of

111
00:04:03,760 --> 00:04:06,879
interest for multi-signature schemes for

112
00:04:06,879 --> 00:04:08,720
application blockchains we'll have to

113
00:04:08,720 --> 00:04:11,360
obtain efficient schemes over common

114
00:04:11,360 --> 00:04:14,080
curve groups without pairings meaning

115
00:04:14,080 --> 00:04:14,760
the

116
00:04:14,760 --> 00:04:17,000
segp256k1 curve or

117
00:04:17,000 --> 00:04:18,639
curve25519

118
00:04:18,639 --> 00:04:20,560
for example

119
00:04:20,560 --> 00:04:24,080
i would like to ask for msuf secure

120
00:04:24,080 --> 00:04:26,560
schemes in the plain public key model

121
00:04:26,560 --> 00:04:28,560
and we'll have two additional features

122
00:04:28,560 --> 00:04:30,560
we would like our scheme to support key

123
00:04:30,560 --> 00:04:32,160
aggregation

124
00:04:32,160 --> 00:04:35,520
and an example of this is music

125
00:04:35,520 --> 00:04:37,520
and do like our schemes to support

126
00:04:37,520 --> 00:04:40,479
two-round signing

127
00:04:40,840 --> 00:04:44,479
so standard signatures uh such as bn and

128
00:04:44,479 --> 00:04:46,800
music have two through on signing and

129
00:04:46,800 --> 00:04:49,759
there's more recent development to push

130
00:04:49,759 --> 00:04:51,120
schemes to have more efficient signing

131
00:04:51,120 --> 00:04:53,280
protocols that involves only two rounds

132
00:04:53,280 --> 00:04:56,440
of interaction

133
00:04:56,800 --> 00:04:58,880
however the problem

134
00:04:58,880 --> 00:04:59,680
with

135
00:04:59,680 --> 00:05:01,199
trying to achieve all the above four

136
00:05:01,199 --> 00:05:03,440
feature especially the third and fourth

137
00:05:03,440 --> 00:05:05,120
one is that

138
00:05:05,120 --> 00:05:07,440
they are in eye contention with concrete

139
00:05:07,440 --> 00:05:09,199
and provable security

140
00:05:09,199 --> 00:05:10,720
and here's what we mean

141
00:05:10,720 --> 00:05:11,680
so

142
00:05:11,680 --> 00:05:13,039
what happens when we look at complete

143
00:05:13,039 --> 00:05:16,479
security well on one hand in practice

144
00:05:16,479 --> 00:05:19,039
practitioners expect

145
00:05:19,039 --> 00:05:21,360
schemes with profile security to be able

146
00:05:21,360 --> 00:05:23,840
to instantiate it in any practical

147
00:05:23,840 --> 00:05:24,800
scheme

148
00:05:24,800 --> 00:05:27,199
meaning they'll implement it

149
00:05:27,199 --> 00:05:28,720
on top of a curve

150
00:05:28,720 --> 00:05:32,639
that is a bit bit length 256 bits

151
00:05:32,639 --> 00:05:35,600
and we should expect some discrete log

152
00:05:35,600 --> 00:05:38,800
like 128 base security uh so this this

153
00:05:38,800 --> 00:05:40,800
is the expectation practice

154
00:05:40,800 --> 00:05:41,919
however

155
00:05:41,919 --> 00:05:44,080
the picture is not as nice in theory on

156
00:05:44,080 --> 00:05:46,960
one hand we have standard model proofs

157
00:05:46,960 --> 00:05:48,880
using forking llamas

158
00:05:48,880 --> 00:05:52,000
incurring some reduction laws

159
00:05:52,000 --> 00:05:53,440
on the other hand we have idealized

160
00:05:53,440 --> 00:05:55,120
assumptions

161
00:05:55,120 --> 00:05:58,720
which uh does not model all the possible

162
00:05:58,720 --> 00:06:01,120
attacks

163
00:06:01,199 --> 00:06:02,400
so for example for three are

164
00:06:02,400 --> 00:06:04,560
multi-sensor schemes

165
00:06:04,560 --> 00:06:07,039
on one hand we may expect 128-bit

166
00:06:07,039 --> 00:06:09,039
security when we essentially be in the

167
00:06:09,039 --> 00:06:11,360
music on the other hand

168
00:06:11,360 --> 00:06:14,880
uh the work that proposes schemes

169
00:06:14,880 --> 00:06:17,440
the reduction that was given do not

170
00:06:17,440 --> 00:06:20,160
actually provide any security guarantees

171
00:06:20,160 --> 00:06:22,080
in the in in these

172
00:06:22,080 --> 00:06:26,240
groups of bill and 256.

173
00:06:27,039 --> 00:06:28,800
and moreover when we move to two realm

174
00:06:28,800 --> 00:06:29,440
of

175
00:06:29,440 --> 00:06:30,639
multi-central schemes with key

176
00:06:30,639 --> 00:06:34,400
aggregation the picture it's a lot less

177
00:06:34,400 --> 00:06:36,960
optimistic

178
00:06:38,080 --> 00:06:38,880
and

179
00:06:38,880 --> 00:06:40,880
most of the works

180
00:06:40,880 --> 00:06:42,720
aim to provide standard model reductions

181
00:06:42,720 --> 00:06:44,960
when possible and as a result the

182
00:06:44,960 --> 00:06:46,319
reductions

183
00:06:46,319 --> 00:06:48,720
does not give any practical guarantee

184
00:06:48,720 --> 00:06:52,479
when we instantiate the schemes with 256

185
00:06:52,479 --> 00:06:54,160
bit groups

186
00:06:54,160 --> 00:06:57,120
and the last two row rules here

187
00:06:57,120 --> 00:07:00,000
are results derived in agm because

188
00:07:00,000 --> 00:07:02,720
there's actually no known reductions

189
00:07:02,720 --> 00:07:04,560
there are a standard amount of reduction

190
00:07:04,560 --> 00:07:06,560
there are data that can be

191
00:07:06,560 --> 00:07:08,800
given for for the schemes in question so

192
00:07:08,800 --> 00:07:11,440
therefore this works result uh resorts

193
00:07:11,440 --> 00:07:14,160
to hdm to proof security however even in

194
00:07:14,160 --> 00:07:17,120
idealized models they were not able to

195
00:07:17,120 --> 00:07:20,560
prove thai security

196
00:07:20,560 --> 00:07:24,800
so here's our contribution in analogy

197
00:07:24,800 --> 00:07:26,960
and here's the deal tree on top of which

198
00:07:26,960 --> 00:07:28,880
are some fruits

199
00:07:28,880 --> 00:07:30,400
the previous results

200
00:07:30,400 --> 00:07:32,880
uh i claim things of the following form

201
00:07:32,880 --> 00:07:35,440
they say hey look we have some nice

202
00:07:35,440 --> 00:07:38,000
fruits somehow hanging on the dltring

203
00:07:38,000 --> 00:07:40,800
and somehow refers to the fact that we

204
00:07:40,800 --> 00:07:43,599
have uh reductions from dl to the

205
00:07:43,599 --> 00:07:45,599
security of these schemes however these

206
00:07:45,599 --> 00:07:47,120
reductions are not tight so they are

207
00:07:47,120 --> 00:07:49,360
somehow high on the tree

208
00:07:49,360 --> 00:07:52,240
whereas all results says the following

209
00:07:52,240 --> 00:07:54,400
we say that hey these fruits are

210
00:07:54,400 --> 00:07:57,360
probably attached to

211
00:07:57,360 --> 00:07:58,240
uh

212
00:07:58,240 --> 00:08:00,800
probably solid branches um so these

213
00:08:00,800 --> 00:08:01,919
fruits are

214
00:08:01,919 --> 00:08:03,680
are attached to branches that are

215
00:08:03,680 --> 00:08:04,960
probably solids

216
00:08:04,960 --> 00:08:07,199
so there's two points here one is that

217
00:08:07,199 --> 00:08:08,720
these schemes are attached to the

218
00:08:08,720 --> 00:08:11,039
branches meaning the reduction between

219
00:08:11,039 --> 00:08:13,039
the scheme and the branches are tight

220
00:08:13,039 --> 00:08:14,879
both ways

221
00:08:14,879 --> 00:08:16,720
and that these these branches are

222
00:08:16,720 --> 00:08:19,520
probably solid means that they also

223
00:08:19,520 --> 00:08:21,039
are uh

224
00:08:21,039 --> 00:08:23,360
we we give both type of reductions both

225
00:08:23,360 --> 00:08:25,840
from standard model paranormal tight as

226
00:08:25,840 --> 00:08:27,759
well as tight agm proofs for the

227
00:08:27,759 --> 00:08:30,720
hardness of these intermediate problems

228
00:08:30,720 --> 00:08:32,000
and finally

229
00:08:32,000 --> 00:08:34,240
we're able to add another scheme to the

230
00:08:34,240 --> 00:08:35,440
picture

231
00:08:35,440 --> 00:08:38,399
hbms which is two rounds support skill

232
00:08:38,399 --> 00:08:39,679
irrigation

233
00:08:39,679 --> 00:08:40,719
and

234
00:08:40,719 --> 00:08:44,399
has the same efficiency as music and the

235
00:08:44,399 --> 00:08:46,240
previous

236
00:08:46,240 --> 00:08:48,720
proposed multi-signature schemes

237
00:08:48,720 --> 00:08:50,880
so let's go more into detail of our

238
00:08:50,880 --> 00:08:52,800
contribution

239
00:08:52,800 --> 00:08:56,320
first for bbn music we provide standard

240
00:08:56,320 --> 00:08:58,480
model guarantees as well as agm

241
00:08:58,480 --> 00:09:01,360
guarantees to instantiate both schemes

242
00:09:01,360 --> 00:09:04,640
in practice on 256-bit curves now

243
00:09:04,640 --> 00:09:06,399
results rely on

244
00:09:06,399 --> 00:09:09,839
assuming the hardness of idl and xidl

245
00:09:09,839 --> 00:09:12,720
in the standard model

246
00:09:14,720 --> 00:09:17,360
our new scheme hbms

247
00:09:17,360 --> 00:09:18,800
is the first scheme that has type

248
00:09:18,800 --> 00:09:22,720
security in agm as well as emits secure

249
00:09:22,720 --> 00:09:26,480
reductions in the data model from dl

250
00:09:26,480 --> 00:09:28,080
it's two rounds supports a key

251
00:09:28,080 --> 00:09:29,360
aggregation

252
00:09:29,360 --> 00:09:32,320
and is as efficient as previous proposed

253
00:09:32,320 --> 00:09:34,240
music 2 and

254
00:09:34,240 --> 00:09:37,680
dwms schemes

255
00:09:37,680 --> 00:09:38,880
and there's more we can save from our

256
00:09:38,880 --> 00:09:41,760
results using our results we can infer

257
00:09:41,760 --> 00:09:44,560
security between schemes meaning we can

258
00:09:44,560 --> 00:09:46,800
say that's if the insecure then so is

259
00:09:46,800 --> 00:09:48,240
music

260
00:09:48,240 --> 00:09:52,480
or if music is secure then so is hbms

261
00:09:52,480 --> 00:09:53,839
we can make these

262
00:09:53,839 --> 00:09:57,440
claims because we make chain reductions

263
00:09:57,440 --> 00:10:01,279
which are reductions of the form

264
00:10:01,279 --> 00:10:03,600
we start from the hardness of the most

265
00:10:03,600 --> 00:10:05,839
commonly accepted heart problem describe

266
00:10:05,839 --> 00:10:08,320
logarithm all the way to security of the

267
00:10:08,320 --> 00:10:10,160
scheme in question

268
00:10:10,160 --> 00:10:11,519
in the middle is an intermediate

269
00:10:11,519 --> 00:10:14,880
assumption which we denote here as x

270
00:10:14,880 --> 00:10:16,560
we require that the first part of the

271
00:10:16,560 --> 00:10:17,760
reduction chain

272
00:10:17,760 --> 00:10:20,240
to either be non-tight but in the

273
00:10:20,240 --> 00:10:21,440
standard model

274
00:10:21,440 --> 00:10:22,240
or

275
00:10:22,240 --> 00:10:24,399
be in the agm but tight

276
00:10:24,399 --> 00:10:26,320
so we sacrifice

277
00:10:26,320 --> 00:10:27,839
either working in the center model or

278
00:10:27,839 --> 00:10:29,760
either trying to obtain

279
00:10:29,760 --> 00:10:31,760
tight reductions

280
00:10:31,760 --> 00:10:33,360
and the second part of reduction from

281
00:10:33,360 --> 00:10:35,440
the intermediate heart problem to the

282
00:10:35,440 --> 00:10:38,880
scheme we make no sacrifices meaning we

283
00:10:38,880 --> 00:10:41,040
we provide tight and standard model

284
00:10:41,040 --> 00:10:43,360
reductions from the intermediate heart

285
00:10:43,360 --> 00:10:45,920
problem to the security of the scheme

286
00:10:45,920 --> 00:10:48,079
and based in our model here a bit of a

287
00:10:48,079 --> 00:10:50,640
disclaimer we are referring to the

288
00:10:50,640 --> 00:10:53,200
programmable rhetorical model

289
00:10:53,200 --> 00:10:55,839
as as opposed to uh so with baziner

290
00:10:55,839 --> 00:10:57,839
model we mean we do not make any

291
00:10:57,839 --> 00:11:01,440
idealized group assumptions

292
00:11:01,440 --> 00:11:03,440
a mover will like the intermediate heart

293
00:11:03,440 --> 00:11:05,600
problem x to be reusable for different

294
00:11:05,600 --> 00:11:08,000
schemes

295
00:11:08,399 --> 00:11:10,079
so here's the picture of our of our

296
00:11:10,079 --> 00:11:11,839
results

297
00:11:11,839 --> 00:11:14,079
we start from is considering the

298
00:11:14,079 --> 00:11:16,880
identification logarithmic assumption

299
00:11:16,880 --> 00:11:18,399
which

300
00:11:18,399 --> 00:11:21,120
was proposed by kiltmaster and pen

301
00:11:21,120 --> 00:11:22,480
to

302
00:11:22,480 --> 00:11:24,560
to be as hard as

303
00:11:24,560 --> 00:11:28,399
dl in algebraic group model

304
00:11:28,399 --> 00:11:30,640
which uh whose heart is can also be

305
00:11:30,640 --> 00:11:32,800
proved from dr using for uh one picture

306
00:11:32,800 --> 00:11:35,519
of the forking lemon

307
00:11:35,519 --> 00:11:38,880
we showed that ideal it's equivalent to

308
00:11:38,880 --> 00:11:42,720
bn meaning idealize is hard as breaking

309
00:11:42,720 --> 00:11:45,279
affordability of being multi-signatures

310
00:11:45,279 --> 00:11:46,800
and to

311
00:11:46,800 --> 00:11:48,959
obtain a similar result from music

312
00:11:48,959 --> 00:11:50,800
we have to consider

313
00:11:50,800 --> 00:11:53,360
a new intermediate heart problem which

314
00:11:53,360 --> 00:11:55,120
we call rhythm target identification

315
00:11:55,120 --> 00:11:56,399
logarithm

316
00:11:56,399 --> 00:11:58,480
and from there we're able to show

317
00:11:58,480 --> 00:12:02,720
equivalent harness between it and music

318
00:12:02,720 --> 00:12:03,920
similar to

319
00:12:03,920 --> 00:12:07,440
idl we showed that xidl is hard

320
00:12:07,440 --> 00:12:09,440
assuming dl in agm

321
00:12:09,440 --> 00:12:10,639
or

322
00:12:10,639 --> 00:12:11,839
a

323
00:12:11,839 --> 00:12:14,000
heart assuming ideal instead of model

324
00:12:14,000 --> 00:12:17,040
via one application of the forcing level

325
00:12:17,040 --> 00:12:18,079
finally

326
00:12:18,079 --> 00:12:20,639
we have a new scheme hbms which will

327
00:12:20,639 --> 00:12:21,440
prove

328
00:12:21,440 --> 00:12:24,399
from x-ideal in the standard model with

329
00:12:24,399 --> 00:12:26,399
a reduction loss that's the number of

330
00:12:26,399 --> 00:12:28,800
setting varies which in practice can be

331
00:12:28,800 --> 00:12:30,560
assumed to be

332
00:12:30,560 --> 00:12:31,600
a lot

333
00:12:31,600 --> 00:12:33,600
in practice is generally a lot smaller

334
00:12:33,600 --> 00:12:35,600
than the running time or number of order

335
00:12:35,600 --> 00:12:36,959
multiple queries

336
00:12:36,959 --> 00:12:39,200
and additionally our scheme can be

337
00:12:39,200 --> 00:12:41,839
proved tightly secure from assuming

338
00:12:41,839 --> 00:12:45,120
hardness of dl in agm

339
00:12:45,120 --> 00:12:46,480
so for the rest of the talk we'll be

340
00:12:46,480 --> 00:12:49,360
looking at components of the dial tree

341
00:12:49,360 --> 00:12:51,600
first up the instant initiators or b

342
00:12:51,600 --> 00:12:54,720
multimeters can be seen as a extension

343
00:12:54,720 --> 00:12:56,639
to short signatures to the multicenter

344
00:12:56,639 --> 00:12:58,959
setting key generation simply samples

345
00:12:58,959 --> 00:13:00,480
the discrete log pair

346
00:13:00,480 --> 00:13:03,680
verification equation is as follows

347
00:13:03,680 --> 00:13:05,760
on the right hand side we raise each

348
00:13:05,760 --> 00:13:07,600
public key to an exponent to derive

349
00:13:07,600 --> 00:13:09,519
using the hash function

350
00:13:09,519 --> 00:13:10,320
to

351
00:13:10,320 --> 00:13:13,680
generate a signature collectively

352
00:13:13,680 --> 00:13:15,040
each signer will run the following

353
00:13:15,040 --> 00:13:16,560
protocol

354
00:13:16,560 --> 00:13:17,760
first they will sample random google

355
00:13:17,760 --> 00:13:20,320
elements which is committed to and only

356
00:13:20,320 --> 00:13:22,639
the commitment is revealed across the

357
00:13:22,639 --> 00:13:24,959
wire to all the other designers

358
00:13:24,959 --> 00:13:26,639
after receiving the commitments each

359
00:13:26,639 --> 00:13:28,639
signer will open their commitment to the

360
00:13:28,639 --> 00:13:30,880
random group element r

361
00:13:30,880 --> 00:13:34,160
the r's are then aggregated

362
00:13:34,160 --> 00:13:37,040
but before that usinger must check that

363
00:13:37,040 --> 00:13:38,959
the openings are correct and they will

364
00:13:38,959 --> 00:13:40,560
board if not

365
00:13:40,560 --> 00:13:43,760
after the aggregation of the values of r

366
00:13:43,760 --> 00:13:46,000
each signer will derive their challenge

367
00:13:46,000 --> 00:13:49,360
and response as shown if m1 is doing

368
00:13:49,360 --> 00:13:51,760
this correctly then at the end designers

369
00:13:51,760 --> 00:13:52,560
will

370
00:13:52,560 --> 00:13:55,120
each signer will obtain the correct

371
00:13:55,120 --> 00:13:57,600
multi signature

372
00:13:57,600 --> 00:13:59,199
the first two rounds can be seen as a

373
00:13:59,199 --> 00:14:00,399
collective coin flipping protocol

374
00:14:00,399 --> 00:14:02,639
generates random group element r

375
00:14:02,639 --> 00:14:04,480
and attacks are possible if the first

376
00:14:04,480 --> 00:14:06,880
round is is not done

377
00:14:06,880 --> 00:14:09,760
and for security bien show the following

378
00:14:09,760 --> 00:14:10,560
um

379
00:14:10,560 --> 00:14:12,399
reduction from from dl

380
00:14:12,399 --> 00:14:14,639
and for us we want to prove

381
00:14:14,639 --> 00:14:17,839
tighter results and by observing that

382
00:14:17,839 --> 00:14:19,519
there's a real bn is more or less

383
00:14:19,519 --> 00:14:22,079
related to the security of schnorr

384
00:14:22,079 --> 00:14:24,079
and to do that we will use

385
00:14:24,079 --> 00:14:27,040
identification logarithm uh problem

386
00:14:27,040 --> 00:14:29,839
first coin by cosmetic

387
00:14:29,839 --> 00:14:30,959
and its

388
00:14:30,959 --> 00:14:33,279
contacts is following sourcing insurance

389
00:14:33,279 --> 00:14:35,839
has been over 30 years without attacks

390
00:14:35,839 --> 00:14:38,399
at least on the curve groups or type

391
00:14:38,399 --> 00:14:40,320
crews from theo

392
00:14:40,320 --> 00:14:41,360
so

393
00:14:41,360 --> 00:14:43,760
and additionally type bruce from dr are

394
00:14:43,760 --> 00:14:44,959
impossible

395
00:14:44,959 --> 00:14:46,399
according to

396
00:14:46,399 --> 00:14:48,399
results that we know

397
00:14:48,399 --> 00:14:49,279
so

398
00:14:49,279 --> 00:14:50,959
therefore perhaps we should just

399
00:14:50,959 --> 00:14:52,720
encapsulate the underlying heart problem

400
00:14:52,720 --> 00:14:54,959
of stories and insurers in a problem of

401
00:14:54,959 --> 00:14:57,279
its own this is a proposal by closed

402
00:14:57,279 --> 00:14:58,399
messaging pen

403
00:14:58,399 --> 00:15:00,560
in particular we'll capture the exact

404
00:15:00,560 --> 00:15:02,160
hardness to break strong notification

405
00:15:02,160 --> 00:15:04,240
scheme

406
00:15:04,240 --> 00:15:06,800
and it's capital in the game as follows

407
00:15:06,800 --> 00:15:08,720
the adversary receives a random group

408
00:15:08,720 --> 00:15:11,120
element x and gets to query a challenge

409
00:15:11,120 --> 00:15:13,600
oracle up to q number of times each time

410
00:15:13,600 --> 00:15:15,440
supplying a group element r of the

411
00:15:15,440 --> 00:15:18,079
choosing and the game in

412
00:15:18,079 --> 00:15:20,959
in response choose a random element c

413
00:15:20,959 --> 00:15:23,440
from zp and together with r

414
00:15:23,440 --> 00:15:25,680
uh this defines a group element r times

415
00:15:25,680 --> 00:15:26,720
actually c

416
00:15:26,720 --> 00:15:28,480
against which the adversary needs to

417
00:15:28,480 --> 00:15:30,240
compute a discrete log

418
00:15:30,240 --> 00:15:32,240
and it succeeds if it is able to compute

419
00:15:32,240 --> 00:15:36,480
this this we log z against any number

420
00:15:36,480 --> 00:15:37,440
of the

421
00:15:37,440 --> 00:15:38,839
q

422
00:15:38,839 --> 00:15:41,920
sections and given in such results we

423
00:15:41,920 --> 00:15:47,040
know reductions uh of the following form

424
00:15:47,120 --> 00:15:50,240
what uses masking and pant did is that

425
00:15:50,240 --> 00:15:53,279
if we parameterize the idl problem then

426
00:15:53,279 --> 00:15:56,000
we're able to show

427
00:15:56,000 --> 00:15:59,120
security of schnorr tightly from it

428
00:15:59,120 --> 00:16:03,279
and moreover the link between dl and idl

429
00:16:03,279 --> 00:16:05,600
can be proved both in the center model

430
00:16:05,600 --> 00:16:07,279
and typed in agm

431
00:16:07,279 --> 00:16:08,800
and this will replicate for being

432
00:16:08,800 --> 00:16:11,279
signatures in particular we'll show that

433
00:16:11,279 --> 00:16:13,199
the b and signatures are titanium

434
00:16:13,199 --> 00:16:16,399
forgeable assuming hardness of idl

435
00:16:16,399 --> 00:16:17,279
by

436
00:16:17,279 --> 00:16:19,360
concluding theorems of the following

437
00:16:19,360 --> 00:16:22,079
forms

438
00:16:22,079 --> 00:16:24,639
so now let's move on to the harder parts

439
00:16:24,639 --> 00:16:26,800
which is how how do we argue security

440
00:16:26,800 --> 00:16:29,680
for music which is a key um

441
00:16:29,680 --> 00:16:32,079
which is bn plus key aggregation

442
00:16:32,079 --> 00:16:33,839
how does music work

443
00:16:33,839 --> 00:16:34,800
uh

444
00:16:34,800 --> 00:16:37,680
key generation exactly the same sbn

445
00:16:37,680 --> 00:16:40,160
and key aggregation aggregates a list of

446
00:16:40,160 --> 00:16:42,240
public keys into a single group element

447
00:16:42,240 --> 00:16:44,320
by simply raising each public key to

448
00:16:44,320 --> 00:16:47,440
exponent derived using the hash function

449
00:16:47,440 --> 00:16:49,040
key verification allows exactly the

450
00:16:49,040 --> 00:16:51,120
verification for snore signature meaning

451
00:16:51,120 --> 00:16:52,639
on the right hand side we have r times

452
00:16:52,639 --> 00:16:54,880
the aggregate public key

453
00:16:54,880 --> 00:16:56,079
raised to the

454
00:16:56,079 --> 00:16:57,920
exponent derived using the

455
00:16:57,920 --> 00:17:00,560
hash function

456
00:17:00,959 --> 00:17:03,199
to stimulate a signature the protocol is

457
00:17:03,199 --> 00:17:06,400
almost is identical to snore besides uh

458
00:17:06,400 --> 00:17:08,880
for two places one the challenge is

459
00:17:08,880 --> 00:17:10,000
derived

460
00:17:10,000 --> 00:17:12,240
using the aggregate public key

461
00:17:12,240 --> 00:17:13,760
it's derived in the same way for every

462
00:17:13,760 --> 00:17:15,039
designer

463
00:17:15,039 --> 00:17:17,119
and second we need to add in the key

464
00:17:17,119 --> 00:17:21,679
irrigation exponents in derivation of z

465
00:17:21,679 --> 00:17:25,839
however for proofs uh we no longer uh

466
00:17:25,839 --> 00:17:27,199
there's one

467
00:17:27,199 --> 00:17:29,039
complication of adding a additional

468
00:17:29,039 --> 00:17:30,880
forking llama if we were to prove that

469
00:17:30,880 --> 00:17:32,880
assuming hard is about any deal and

470
00:17:32,880 --> 00:17:35,760
indeed if we plug the um if we plug in

471
00:17:35,760 --> 00:17:37,280
numbers this decreases the basic

472
00:17:37,280 --> 00:17:38,240
security

473
00:17:38,240 --> 00:17:40,320
by a significant amount

474
00:17:40,320 --> 00:17:42,559
and our solution is a new problem which

475
00:17:42,559 --> 00:17:44,880
will name random target idle it's

476
00:17:44,880 --> 00:17:48,000
extension to idl in that adversary now

477
00:17:48,000 --> 00:17:50,640
has access to two oracles new target and

478
00:17:50,640 --> 00:17:52,480
challenge

479
00:17:52,480 --> 00:17:53,840
each time the average requires new

480
00:17:53,840 --> 00:17:56,000
target oracle with some groupon s

481
00:17:56,000 --> 00:17:58,160
there's a new target that's generated by

482
00:17:58,160 --> 00:18:00,640
the game which is exactly

483
00:18:00,640 --> 00:18:03,840
uh s times x raised to some

484
00:18:03,840 --> 00:18:06,080
random exponent e

485
00:18:06,080 --> 00:18:07,679
and now the challenge oracle

486
00:18:07,679 --> 00:18:09,840
additionally takes in an index

487
00:18:09,840 --> 00:18:13,760
indicating which uh idl session or

488
00:18:13,760 --> 00:18:15,840
well guess which target the amateur is

489
00:18:15,840 --> 00:18:18,799
trying to uh the break ideal

490
00:18:18,799 --> 00:18:20,640
and at the end absolutely wins if it

491
00:18:20,640 --> 00:18:24,000
wins idl against any number of the

492
00:18:24,000 --> 00:18:25,520
pre previous

493
00:18:25,520 --> 00:18:29,080
q1 sessions

494
00:18:29,360 --> 00:18:30,400
so

495
00:18:30,400 --> 00:18:33,520
the claim is that if we're able uh if we

496
00:18:33,520 --> 00:18:35,039
encapsulate this in the assumption

497
00:18:35,039 --> 00:18:36,480
namely idl

498
00:18:36,480 --> 00:18:39,200
then we can show security of music from

499
00:18:39,200 --> 00:18:41,600
it tightly and here's how the reduction

500
00:18:41,600 --> 00:18:42,799
works

501
00:18:42,799 --> 00:18:46,160
uh signing can be simulated exactly as

502
00:18:46,160 --> 00:18:48,880
so we'll not show it here the crux of

503
00:18:48,880 --> 00:18:50,559
the reduction comes from programming of

504
00:18:50,559 --> 00:18:52,799
the wrong oracles

505
00:18:52,799 --> 00:18:56,320
for every query into the uh random

506
00:18:56,320 --> 00:18:58,799
oracle in deriving the key aggregate

507
00:18:58,799 --> 00:19:01,039
exponents we'll do the following we'll

508
00:19:01,039 --> 00:19:02,640
first compute

509
00:19:02,640 --> 00:19:05,760
uh that'll get a public key but without

510
00:19:05,760 --> 00:19:08,880
uh the target policy being inside the

511
00:19:08,880 --> 00:19:12,240
expression i will forward this value s

512
00:19:12,240 --> 00:19:14,640
to the new target oracle

513
00:19:14,640 --> 00:19:16,000
the response is then forwarded back to

514
00:19:16,000 --> 00:19:17,039
atmosphere

515
00:19:17,039 --> 00:19:19,360
the reason for this is that we want the

516
00:19:19,360 --> 00:19:21,520
upgraded public key to the point of view

517
00:19:21,520 --> 00:19:24,240
of the adversary to be equal to the

518
00:19:24,240 --> 00:19:26,880
target that is kept tracked in the x-idl

519
00:19:26,880 --> 00:19:27,840
game

520
00:19:27,840 --> 00:19:30,799
okay so t is equal to apk

521
00:19:30,799 --> 00:19:34,480
and for each query uh into h1

522
00:19:34,480 --> 00:19:36,960
we'll simply use the upgraded public key

523
00:19:36,960 --> 00:19:38,880
to find out the corresponding session

524
00:19:38,880 --> 00:19:40,080
that we're in

525
00:19:40,080 --> 00:19:41,520
and simply forward the r to the

526
00:19:41,520 --> 00:19:43,120
challenge oracle

527
00:19:43,120 --> 00:19:45,280
and the response to c is is

528
00:19:45,280 --> 00:19:47,520
forward forwarded back to the adversary

529
00:19:47,520 --> 00:19:49,600
so if everything is done correctly

530
00:19:49,600 --> 00:19:52,880
then a forgery should allow us to pin

531
00:19:52,880 --> 00:19:55,200
down exactly one session for us to

532
00:19:55,200 --> 00:19:57,840
respond uh with the the second component

533
00:19:57,840 --> 00:20:00,559
of the signature which is z

534
00:20:00,559 --> 00:20:02,960
and it works this reduction works

535
00:20:02,960 --> 00:20:05,039
because we have programmed the s so

536
00:20:05,039 --> 00:20:07,760
that's the upgrade of public keys to the

537
00:20:07,760 --> 00:20:09,120
point of view of the adversary is

538
00:20:09,120 --> 00:20:11,679
exactly equal to the targets from the

539
00:20:11,679 --> 00:20:14,080
point of view upper reduction

540
00:20:14,080 --> 00:20:16,960
so therefore moving forward the rs

541
00:20:16,960 --> 00:20:19,919
the forgeries will then exactly

542
00:20:19,919 --> 00:20:21,280
correspond to the disease that we need

543
00:20:21,280 --> 00:20:22,320
to produce

544
00:20:22,320 --> 00:20:24,240
so therefore we're able to com conclude

545
00:20:24,240 --> 00:20:26,400
that in the standard model if we assume

546
00:20:26,400 --> 00:20:29,120
that x at the l is hard then music is

547
00:20:29,120 --> 00:20:32,000
also hard to forge

548
00:20:32,240 --> 00:20:35,679
and furthermore uh we showed that if you

549
00:20:35,679 --> 00:20:37,520
have access the atmosphere then we can

550
00:20:37,520 --> 00:20:38,320
break

551
00:20:38,320 --> 00:20:40,720
all four signatures for music and it's

552
00:20:40,720 --> 00:20:43,200
very straightforward we simply construct

553
00:20:43,200 --> 00:20:46,080
a forger that

554
00:20:46,080 --> 00:20:49,039
simulates another signer using the the

555
00:20:49,039 --> 00:20:51,440
responses provided by the x ideal

556
00:20:51,440 --> 00:20:53,039
absolutely and as well as programming

557
00:20:53,039 --> 00:20:56,080
the rhythm orchid points

558
00:20:56,960 --> 00:20:59,120
so therefore music

559
00:20:59,120 --> 00:21:02,320
it's as hard to forge as it is to break

560
00:21:02,320 --> 00:21:04,799
axe idle uh as

561
00:21:04,799 --> 00:21:07,039
as a hardest assumption

562
00:21:07,039 --> 00:21:08,559
however why do we believe i said the

563
00:21:08,559 --> 00:21:09,919
other is hard

564
00:21:09,919 --> 00:21:11,600
well we applied the exact same

565
00:21:11,600 --> 00:21:15,280
principles as uh how ideal is argued to

566
00:21:15,280 --> 00:21:17,840
be hard namely we argue in the cereal

567
00:21:17,840 --> 00:21:19,679
model using the llama or tightly

568
00:21:19,679 --> 00:21:20,320
in

569
00:21:20,320 --> 00:21:22,240
in agm

570
00:21:22,240 --> 00:21:25,520
so recall that agm says you know indoor

571
00:21:25,520 --> 00:21:26,880
interaction between average we're in the

572
00:21:26,880 --> 00:21:27,679
game

573
00:21:27,679 --> 00:21:31,039
and adversary it's algebraic if its

574
00:21:31,039 --> 00:21:33,120
output group elements can be represented

575
00:21:33,120 --> 00:21:35,440
in in terms of its input group elements

576
00:21:35,440 --> 00:21:36,960
more in particular for each upper group

577
00:21:36,960 --> 00:21:37,919
element

578
00:21:37,919 --> 00:21:40,159
the adversary also provides a set of

579
00:21:40,159 --> 00:21:42,320
scalars k1 to kn

580
00:21:42,320 --> 00:21:44,720
so that's if you raise x i to the k i

581
00:21:44,720 --> 00:21:46,559
and multiply them together then you get

582
00:21:46,559 --> 00:21:49,120
to y j

583
00:21:49,520 --> 00:21:50,720
so

584
00:21:50,720 --> 00:21:52,400
assuming we have that algebraic except

585
00:21:52,400 --> 00:21:54,320
your obviously it's easy to show that we

586
00:21:54,320 --> 00:21:55,200
can

587
00:21:55,200 --> 00:21:56,320
uh

588
00:21:56,320 --> 00:21:58,640
make a reduction from dl

589
00:21:58,640 --> 00:22:00,159
because excite the obvious release on

590
00:22:00,159 --> 00:22:02,240
receive two group elements from the game

591
00:22:02,240 --> 00:22:05,600
g and the random group element x

592
00:22:05,600 --> 00:22:08,480
and it provides the s s group elements

593
00:22:08,480 --> 00:22:10,880
and the r group elements

594
00:22:10,880 --> 00:22:11,760
so

595
00:22:11,760 --> 00:22:13,520
these group elements must be represented

596
00:22:13,520 --> 00:22:16,240
in terms of g and x if if diverse

597
00:22:16,240 --> 00:22:17,360
algebraic

598
00:22:17,360 --> 00:22:20,240
therefore in the final equation that

599
00:22:20,240 --> 00:22:22,400
obviously must satisfy

600
00:22:22,400 --> 00:22:24,720
is only an equation in terms of g and x

601
00:22:24,720 --> 00:22:26,400
so therefore we're able to solve for the

602
00:22:26,400 --> 00:22:29,120
discrete log of big x

603
00:22:29,120 --> 00:22:31,760
alpha all but with some bad probability

604
00:22:31,760 --> 00:22:33,840
that this equation is determined which

605
00:22:33,840 --> 00:22:36,399
we can balance

606
00:22:37,039 --> 00:22:39,120
and in the standard model we rely on

607
00:22:39,120 --> 00:22:41,840
usage of four dilemma which relates the

608
00:22:41,840 --> 00:22:43,760
success probably often some algorithm

609
00:22:43,760 --> 00:22:47,440
taking random q points from set c

610
00:22:47,440 --> 00:22:48,320
into

611
00:22:48,320 --> 00:22:51,600
a a forked version of the algorithm in

612
00:22:51,600 --> 00:22:53,919
which is run twice with incorporated

613
00:22:53,919 --> 00:22:56,240
inputs

614
00:22:56,320 --> 00:22:58,960
the crux of of using the

615
00:22:58,960 --> 00:23:01,280
forking llama is to specify what the

616
00:23:01,280 --> 00:23:02,720
algorithm a is

617
00:23:02,720 --> 00:23:04,320
and for us you'll be on the following

618
00:23:04,320 --> 00:23:05,280
form

619
00:23:05,280 --> 00:23:06,720
we want to construct a reduction from

620
00:23:06,720 --> 00:23:08,400
xidl to idl

621
00:23:08,400 --> 00:23:10,400
but there's a mixed match of oracles

622
00:23:10,400 --> 00:23:13,440
xidl expects two oracles new target and

623
00:23:13,440 --> 00:23:15,280
challenge and our

624
00:23:15,280 --> 00:23:17,520
um average audio obviously we only only

625
00:23:17,520 --> 00:23:19,600
have the challenge oracle so therefore

626
00:23:19,600 --> 00:23:20,640
we plug

627
00:23:20,640 --> 00:23:21,440
in

628
00:23:21,440 --> 00:23:22,960
we'll hook up the new target oracle

629
00:23:22,960 --> 00:23:24,880
against the challenge oracle given to

630
00:23:24,880 --> 00:23:26,159
our reduction

631
00:23:26,159 --> 00:23:28,320
but simulate the challenge workload for

632
00:23:28,320 --> 00:23:30,559
the accidental atmosphere

633
00:23:30,559 --> 00:23:32,400
in the in the following way we're able

634
00:23:32,400 --> 00:23:35,679
to define the forking algorithm to uh

635
00:23:35,679 --> 00:23:39,120
to simply take inputs the um

636
00:23:39,120 --> 00:23:41,039
the simulations of the challenge oracle

637
00:23:41,039 --> 00:23:43,600
that you that it expects

638
00:23:43,600 --> 00:23:45,600
and if we run the forking algorithm on

639
00:23:45,600 --> 00:23:47,760
this uh algorithm a then

640
00:23:47,760 --> 00:23:50,880
if then exception of that means that

641
00:23:50,880 --> 00:23:53,279
we're able to compute the response for

642
00:23:53,279 --> 00:23:55,840
the corresponding idl session

643
00:23:55,840 --> 00:23:58,240
and this requires uh

644
00:23:58,240 --> 00:24:00,480
that it requires a reduction adversary

645
00:24:00,480 --> 00:24:01,520
to to

646
00:24:01,520 --> 00:24:03,919
to cleverly uh keep track of the oracle

647
00:24:03,919 --> 00:24:06,720
values and and uh and

648
00:24:06,720 --> 00:24:08,159
and and use them as response in the

649
00:24:08,159 --> 00:24:12,799
second run um of the exciting atmosphere

650
00:24:13,200 --> 00:24:15,120
so therefore able to also conclude that

651
00:24:15,120 --> 00:24:17,039
accidental is hard instead of model

652
00:24:17,039 --> 00:24:19,520
assuming hardness of idl with a score of

653
00:24:19,520 --> 00:24:20,640
q2

654
00:24:20,640 --> 00:24:22,799
as reduction loss

655
00:24:22,799 --> 00:24:25,360
and so finally let us look at uh the

656
00:24:25,360 --> 00:24:28,000
hbms scheme which is two rounds and

657
00:24:28,000 --> 00:24:30,559
supports key aggregation which can be

658
00:24:30,559 --> 00:24:32,720
shown to be secure in standard model

659
00:24:32,720 --> 00:24:34,640
from from outside from harnesses by x

660
00:24:34,640 --> 00:24:36,159
ideal

661
00:24:36,159 --> 00:24:38,320
hbms works as follows key generation is

662
00:24:38,320 --> 00:24:40,720
exactly the same as music key

663
00:24:40,720 --> 00:24:43,120
aggregation as well

664
00:24:43,120 --> 00:24:46,480
the verification equation changes on the

665
00:24:46,480 --> 00:24:48,640
left-hand side where we've added in a

666
00:24:48,640 --> 00:24:51,679
power of a group element derived from a

667
00:24:51,679 --> 00:24:53,919
hash function applied to the list of

668
00:24:53,919 --> 00:24:56,080
signers and the message

669
00:24:56,080 --> 00:24:58,000
and it's raised to the exponents that is

670
00:24:58,000 --> 00:25:00,799
encoded in the signature the claim is

671
00:25:00,799 --> 00:25:02,240
that if we change the verification

672
00:25:02,240 --> 00:25:04,320
equation to the following form then

673
00:25:04,320 --> 00:25:05,760
we're able to

674
00:25:05,760 --> 00:25:08,320
derive two round signing protocols

675
00:25:08,320 --> 00:25:10,480
in particular in the first round we

676
00:25:10,480 --> 00:25:12,640
sample two random scalars instead and

677
00:25:12,640 --> 00:25:14,559
the intuition here is that where i have

678
00:25:14,559 --> 00:25:18,640
done the peterson commitment to g3r1

679
00:25:18,640 --> 00:25:21,440
and we'll send uh this new value of the

680
00:25:21,440 --> 00:25:23,760
the of the peterson commandment to all

681
00:25:23,760 --> 00:25:25,440
the other signers

682
00:25:25,440 --> 00:25:27,279
and now in the second round we can

683
00:25:27,279 --> 00:25:29,679
simply compute the response z exactly as

684
00:25:29,679 --> 00:25:31,440
before in music

685
00:25:31,440 --> 00:25:33,600
and now set additionally the openings to

686
00:25:33,600 --> 00:25:35,120
the peter's component which is

687
00:25:35,120 --> 00:25:37,520
randomness r1

688
00:25:37,520 --> 00:25:39,039
after we get back all the responses we

689
00:25:39,039 --> 00:25:42,559
simply aggregate the s and the z's

690
00:25:42,559 --> 00:25:43,919
and set them to be the components of the

691
00:25:43,919 --> 00:25:46,480
signature

692
00:25:46,640 --> 00:25:48,480
so the only thing that i've changed here

693
00:25:48,480 --> 00:25:50,799
is that we have random will have hashed

694
00:25:50,799 --> 00:25:53,679
the list of public keys and message to

695
00:25:53,679 --> 00:25:54,960
a group element

696
00:25:54,960 --> 00:25:56,960
and change the

697
00:25:56,960 --> 00:25:59,279
first round into a peterson complement

698
00:25:59,279 --> 00:26:02,159
and eliminated uh the

699
00:26:02,159 --> 00:26:04,080
the two rounds of uh

700
00:26:04,080 --> 00:26:06,000
the condensed the first two rounds of

701
00:26:06,000 --> 00:26:08,080
point five into one

702
00:26:08,080 --> 00:26:09,600
but in result the signals are slightly

703
00:26:09,600 --> 00:26:11,440
longer and verification equations have

704
00:26:11,440 --> 00:26:14,000
not changed

705
00:26:14,400 --> 00:26:15,279
and

706
00:26:15,279 --> 00:26:17,600
we're able to prove security of hbms

707
00:26:17,600 --> 00:26:20,640
from x idl and the cross of this is is

708
00:26:20,640 --> 00:26:24,919
how we program the runway point

709
00:26:25,039 --> 00:26:27,039
so the verification equation now has

710
00:26:27,039 --> 00:26:28,720
this additional term would relate that

711
00:26:28,720 --> 00:26:31,120
relates to the output of the run mortal

712
00:26:31,120 --> 00:26:32,960
and it's crucially

713
00:26:32,960 --> 00:26:34,720
important to

714
00:26:34,720 --> 00:26:37,039
uh for us to be able to both simulate

715
00:26:37,039 --> 00:26:40,400
signatures and uh constructive reduction

716
00:26:40,400 --> 00:26:41,919
and it turns out that this crucial

717
00:26:41,919 --> 00:26:43,600
depends on how we program the runaway at

718
00:26:43,600 --> 00:26:45,039
this point

719
00:26:45,039 --> 00:26:47,120
there's one option on one hand if we

720
00:26:47,120 --> 00:26:48,799
program to a power of g

721
00:26:48,799 --> 00:26:50,000
then

722
00:26:50,000 --> 00:26:52,640
we can similar to before

723
00:26:52,640 --> 00:26:54,880
uh turn forgery into a reflex ideal

724
00:26:54,880 --> 00:26:57,600
however we can no longer simulate

725
00:26:57,600 --> 00:26:59,279
the undesigner

726
00:26:59,279 --> 00:27:00,960
if we set it to be a power of x then we

727
00:27:00,960 --> 00:27:04,159
can do exactly the opposite

728
00:27:04,320 --> 00:27:05,120
but

729
00:27:05,120 --> 00:27:07,679
we need to decide on this before

730
00:27:07,679 --> 00:27:09,520
assigning interaction starts so

731
00:27:09,520 --> 00:27:12,799
therefore we employ the cooldowns trick

732
00:27:12,799 --> 00:27:14,080
which

733
00:27:14,080 --> 00:27:15,360
guesses

734
00:27:15,360 --> 00:27:17,039
which options to program with the

735
00:27:17,039 --> 00:27:19,360
parameter that were later optimized

736
00:27:19,360 --> 00:27:22,000
resulting in a reduction loss of one

737
00:27:22,000 --> 00:27:24,640
over q sine

738
00:27:25,520 --> 00:27:26,799
and moreover

739
00:27:26,799 --> 00:27:28,240
we can show that

740
00:27:28,240 --> 00:27:30,960
this reduction loss is eliminated if we

741
00:27:30,960 --> 00:27:34,799
work directly in agm

