1
00:00:00,160 --> 00:00:02,399
okay

2
00:00:05,759 --> 00:00:07,440
okay now

3
00:00:07,440 --> 00:00:10,320
this is time

4
00:00:10,480 --> 00:00:11,519
for the

5
00:00:11,519 --> 00:00:12,880
session of

6
00:00:12,880 --> 00:00:13,759
uh

7
00:00:13,759 --> 00:00:15,759
their knowledge proof threshold and

8
00:00:15,759 --> 00:00:17,279
march signatures

9
00:00:17,279 --> 00:00:20,560
so i'm my name is takeshikoshiba i'm

10
00:00:20,560 --> 00:00:23,519
during the first half hour session

11
00:00:23,519 --> 00:00:26,480
the other half is will be chaired by ron

12
00:00:26,480 --> 00:00:28,960
steinfeld so

13
00:00:28,960 --> 00:00:33,680
the first talk is prom the speaker is

14
00:00:33,680 --> 00:00:37,200
uh deputies go ahead

15
00:00:37,200 --> 00:00:38,559
okay um

16
00:00:38,559 --> 00:00:40,320
so in this talk i just want to give a

17
00:00:40,320 --> 00:00:42,320
very brief introduction to our new

18
00:00:42,320 --> 00:00:44,879
construction which we call program

19
00:00:44,879 --> 00:00:46,800
so as the title says program is a

20
00:00:46,800 --> 00:00:49,120
so-called fast authenticated shares

21
00:00:49,120 --> 00:00:52,079
based zero knowledge oram so in this in

22
00:00:52,079 --> 00:00:53,680
this brief overview i'm just going to

23
00:00:53,680 --> 00:00:54,960
give a little bit of background what's

24
00:00:54,960 --> 00:00:56,800
the setting and what is that we do with

25
00:00:56,800 --> 00:00:58,160
this work what kind of efficiency does

26
00:00:58,160 --> 00:00:59,600
our construction have

27
00:00:59,600 --> 00:01:01,440
so let's go ahead and get started

28
00:01:01,440 --> 00:01:03,039
so the setting we consider is

29
00:01:03,039 --> 00:01:05,438
interactive zero knowledge proofs and of

30
00:01:05,438 --> 00:01:07,119
course we all know what this is but very

31
00:01:07,119 --> 00:01:10,080
briefly the idea is that zero knowledge

32
00:01:10,080 --> 00:01:11,840
is an interactive protocol between two

33
00:01:11,840 --> 00:01:14,320
parties approver and a verifier

34
00:01:14,320 --> 00:01:16,400
who agree on some public statement that

35
00:01:16,400 --> 00:01:18,560
the prover claims to be true

36
00:01:18,560 --> 00:01:20,159
and as evidence to this fact she has

37
00:01:20,159 --> 00:01:21,759
some witness which he would like to

38
00:01:21,759 --> 00:01:23,280
remain private

39
00:01:23,280 --> 00:01:25,119
so zero knowledge protocol allows the

40
00:01:25,119 --> 00:01:27,040
prover and verifier to interact the end

41
00:01:27,040 --> 00:01:29,920
of which the verifier becomes convinced

42
00:01:29,920 --> 00:01:31,600
with high probability that it must be

43
00:01:31,600 --> 00:01:33,680
the case that the statement is true

44
00:01:33,680 --> 00:01:35,600
but learns nothing additional about the

45
00:01:35,600 --> 00:01:37,840
witness

46
00:01:37,840 --> 00:01:40,560
now as a community we know

47
00:01:40,560 --> 00:01:42,079
a lot of

48
00:01:42,079 --> 00:01:44,560
proof systems for expressing arbitrary

49
00:01:44,560 --> 00:01:45,759
proofs

50
00:01:45,759 --> 00:01:47,280
in particular we know a lot about

51
00:01:47,280 --> 00:01:49,360
expressing proofs in terms of circuits

52
00:01:49,360 --> 00:01:51,439
or constraint systems where the circuit

53
00:01:51,439 --> 00:01:54,640
is in a boolean or arithmetic logic of

54
00:01:54,640 --> 00:01:56,640
some sort

55
00:01:56,640 --> 00:01:58,960
and but more recently some line of work

56
00:01:58,960 --> 00:02:01,680
has looked into can we step up the

57
00:02:01,680 --> 00:02:03,439
expressivity of these statements so what

58
00:02:03,439 --> 00:02:05,439
do i mean by this so one thing you might

59
00:02:05,439 --> 00:02:07,119
like to be able to do is instead of

60
00:02:07,119 --> 00:02:08,800
having a circuit as the way that you

61
00:02:08,800 --> 00:02:10,239
express your statements you'd like to

62
00:02:10,239 --> 00:02:12,239
have some kind of high-level program

63
00:02:12,239 --> 00:02:13,440
written a high-level programming

64
00:02:13,440 --> 00:02:15,680
language like something like c

65
00:02:15,680 --> 00:02:17,120
and the reason you might want to do this

66
00:02:17,120 --> 00:02:18,959
is first of all because this allows you

67
00:02:18,959 --> 00:02:21,680
to compose very complicated statements

68
00:02:21,680 --> 00:02:23,680
whereas with ordinary circuits it can be

69
00:02:23,680 --> 00:02:25,040
quite difficult

70
00:02:25,040 --> 00:02:27,280
to make very large proof statements and

71
00:02:27,280 --> 00:02:29,200
also by having high-level programming

72
00:02:29,200 --> 00:02:30,800
languages as the language that you write

73
00:02:30,800 --> 00:02:32,000
your statements

74
00:02:32,000 --> 00:02:34,840
this makes this systems more amenable to

75
00:02:34,840 --> 00:02:36,480
non-cryptographers that they can start

76
00:02:36,480 --> 00:02:39,120
to get involved in zero knowledge

77
00:02:39,120 --> 00:02:40,000
now

78
00:02:40,000 --> 00:02:42,800
building a large zero knowledge cpu of

79
00:02:42,800 --> 00:02:44,080
this kind

80
00:02:44,080 --> 00:02:46,239
is a large task but one of the central

81
00:02:46,239 --> 00:02:48,239
components that you really need to to

82
00:02:48,239 --> 00:02:49,280
get right

83
00:02:49,280 --> 00:02:52,239
is that your xeron tpu needs to make

84
00:02:52,239 --> 00:02:54,000
frequent access to some kind of main

85
00:02:54,000 --> 00:02:56,239
memory so your cpu has a main memory

86
00:02:56,239 --> 00:02:58,159
inside and it's going to very frequently

87
00:02:58,159 --> 00:03:00,080
update the state of this main memory and

88
00:03:00,080 --> 00:03:01,760
so it's important that this make memory

89
00:03:01,760 --> 00:03:04,000
run efficiently

90
00:03:04,000 --> 00:03:05,920
so that's really what this work is about

91
00:03:05,920 --> 00:03:07,840
is constructing a fast zero knowledge

92
00:03:07,840 --> 00:03:09,599
main memory

93
00:03:09,599 --> 00:03:12,239
so we call this new construction program

94
00:03:12,239 --> 00:03:14,720
again it's it's a new uh

95
00:03:14,720 --> 00:03:17,440
zero knowledge of ram uh for for a

96
00:03:17,440 --> 00:03:20,239
private coin protocol uh we call it a

97
00:03:20,239 --> 00:03:21,760
program we're using orm because of the

98
00:03:21,760 --> 00:03:23,840
connections to the to the

99
00:03:23,840 --> 00:03:24,879
uh

100
00:03:24,879 --> 00:03:27,760
fundamental oblivious ram problem

101
00:03:27,760 --> 00:03:30,000
and then we integrated this new zk ram

102
00:03:30,000 --> 00:03:32,560
into a full zirinal crew system by which

103
00:03:32,560 --> 00:03:34,959
i mean you can express proofs as uh

104
00:03:34,959 --> 00:03:36,879
arithmetic circuits with you know

105
00:03:36,879 --> 00:03:38,720
multiplication and addition gates but

106
00:03:38,720 --> 00:03:40,879
also access to a main memory

107
00:03:40,879 --> 00:03:43,440
and the crucial efficiency property that

108
00:03:43,440 --> 00:03:45,519
we get is that our zero knowledge proof

109
00:03:45,519 --> 00:03:47,519
system is based on oblivious transfers

110
00:03:47,519 --> 00:03:48,480
only

111
00:03:48,480 --> 00:03:51,680
and we require only two login ots for

112
00:03:51,680 --> 00:03:54,239
each ram access so it's very efficient

113
00:03:54,239 --> 00:03:56,640
this way

114
00:03:56,959 --> 00:03:58,959
just to give you very very high level

115
00:03:58,959 --> 00:04:01,200
idea what's going on the crucial problem

116
00:04:01,200 --> 00:04:02,720
that needs to be solved in the zero

117
00:04:02,720 --> 00:04:04,080
knowledge ram

118
00:04:04,080 --> 00:04:06,560
is authenticity how do we how do we

119
00:04:06,560 --> 00:04:09,360
force the prover to pick an element from

120
00:04:09,360 --> 00:04:11,439
ram that is dictated by the proof

121
00:04:11,439 --> 00:04:13,439
statement itself and is not something

122
00:04:13,439 --> 00:04:16,079
she just grabs by her own accord uh you

123
00:04:16,079 --> 00:04:17,600
know a cheating approver might attempt

124
00:04:17,600 --> 00:04:20,238
to forge some value in the ram

125
00:04:20,238 --> 00:04:22,400
so the problem here is that intuitively

126
00:04:22,400 --> 00:04:24,880
what's going on in the rim is that each

127
00:04:24,880 --> 00:04:28,479
element of the ram is is is encrypted by

128
00:04:28,479 --> 00:04:30,000
some mask that was chosen by the

129
00:04:30,000 --> 00:04:31,199
verifier

130
00:04:31,199 --> 00:04:33,040
right and each each element of program

131
00:04:33,040 --> 00:04:35,360
has a distinct mask and yet at runtime

132
00:04:35,360 --> 00:04:37,040
the proofer has to be able to go select

133
00:04:37,040 --> 00:04:39,199
a particular arbitrary element from the

134
00:04:39,199 --> 00:04:41,360
ram so the crucial problem really

135
00:04:41,360 --> 00:04:43,759
becomes one of aligning masks properly

136
00:04:43,759 --> 00:04:45,280
how do we allow the proofer to look up

137
00:04:45,280 --> 00:04:47,360
the right value with the right mask and

138
00:04:47,360 --> 00:04:49,280
still get things to work correctly and

139
00:04:49,280 --> 00:04:50,800
our key idea to solving this is to

140
00:04:50,800 --> 00:04:52,880
introduce new kinds of zero-knowledge

141
00:04:52,880 --> 00:04:55,199
gates that allow the prover to

142
00:04:55,199 --> 00:04:57,440
obliviously manipulate the masks inside

143
00:04:57,440 --> 00:04:59,280
the circuit without ever learning what

144
00:04:59,280 --> 00:05:01,520
the masks are she can't learn the mask

145
00:05:01,520 --> 00:05:04,000
otherwise that will allow her to cheat

146
00:05:04,000 --> 00:05:05,680
and by allowing her to manipulate the

147
00:05:05,680 --> 00:05:07,280
mask she permits the messenger for

148
00:05:07,280 --> 00:05:08,880
favorable order which allows for very

149
00:05:08,880 --> 00:05:11,759
fast ram lookups

150
00:05:11,759 --> 00:05:13,360
so this is a very high level look at

151
00:05:13,360 --> 00:05:15,360
program again program is a new zero

152
00:05:15,360 --> 00:05:17,520
knowledge uh ram

153
00:05:17,520 --> 00:05:19,280
it requires only logarithmic number of

154
00:05:19,280 --> 00:05:20,880
oblivious transfers for access and is

155
00:05:20,880 --> 00:05:22,800
very efficient so we've implemented this

156
00:05:22,800 --> 00:05:24,479
and we can do you know on the order of

157
00:05:24,479 --> 00:05:26,320
tens of thousands of of accesses per

158
00:05:26,320 --> 00:05:27,280
second

159
00:05:27,280 --> 00:05:29,039
so with that i'll conclude and i'll take

160
00:05:29,039 --> 00:05:32,159
any questions thank you

161
00:05:37,600 --> 00:05:40,160
okay uh

162
00:05:40,160 --> 00:05:43,840
are there any questions or comments

163
00:05:45,759 --> 00:05:47,600
i didn't say earlier but you can put

164
00:05:47,600 --> 00:05:49,759
your questions into zoom or zoolop or

165
00:05:49,759 --> 00:05:51,680
just unmute yourself to ask questions if

166
00:05:51,680 --> 00:05:54,840
you prefer

167
00:06:15,919 --> 00:06:18,719
okay no questions

168
00:06:19,440 --> 00:06:23,479
okay thank you very much

169
00:06:34,960 --> 00:06:37,359
so

170
00:06:44,639 --> 00:06:49,520
i should we wait for a few minutes

171
00:06:49,520 --> 00:06:51,199
no you might as well go ahead

172
00:06:51,199 --> 00:06:52,080
okay

173
00:06:52,080 --> 00:06:53,680
the next talk is

174
00:06:53,680 --> 00:06:55,759
compressed sigma protocol for binding

175
00:06:55,759 --> 00:06:57,680
group arithmetic fact

176
00:06:57,680 --> 00:06:59,840
the speaker is

177
00:06:59,840 --> 00:07:01,840
thomas

178
00:07:01,840 --> 00:07:04,799
okay go ahead

179
00:07:07,840 --> 00:07:10,240
thank you can you see my screen now

180
00:07:10,240 --> 00:07:12,080
okay good yes

181
00:07:12,080 --> 00:07:15,199
okay perfect so thanks this is joint

182
00:07:15,199 --> 00:07:17,599
work with my co-authors ronald carl and

183
00:07:17,599 --> 00:07:19,680
macho rambo on compressed sigma

184
00:07:19,680 --> 00:07:21,599
protocols for bi-linear group arithmetic

185
00:07:21,599 --> 00:07:22,880
service

186
00:07:22,880 --> 00:07:25,280
so on a very high level

187
00:07:25,280 --> 00:07:26,880
the problem that we're considering is

188
00:07:26,880 --> 00:07:28,560
zero knowledge proof systems for general

189
00:07:28,560 --> 00:07:30,880
constraint satisfiability

190
00:07:30,880 --> 00:07:32,319
so basically what we want to do is we

191
00:07:32,319 --> 00:07:34,479
want to develop a protocol for proving

192
00:07:34,479 --> 00:07:37,039
knowledge of a commitment opening x

193
00:07:37,039 --> 00:07:39,440
such that x is f constrained so

194
00:07:39,440 --> 00:07:41,599
basically it satisfies f of x equals

195
00:07:41,599 --> 00:07:44,639
zero for some arbitrary function f

196
00:07:44,639 --> 00:07:46,800
and we want to do this with low

197
00:07:46,800 --> 00:07:50,160
communication complexity

198
00:07:50,560 --> 00:07:52,560
so typically the computation model that

199
00:07:52,560 --> 00:07:54,479
is considered is the arithmetic circuit

200
00:07:54,479 --> 00:07:57,120
model this means that the function f is

201
00:07:57,120 --> 00:08:00,400
expressed as an arithmetic circuit

202
00:08:00,400 --> 00:08:02,000
and

203
00:08:02,000 --> 00:08:04,080
so basically the constraint is captured

204
00:08:04,080 --> 00:08:06,639
by an arithmetic circuit

205
00:08:06,639 --> 00:08:09,039
however sometimes this computation model

206
00:08:09,039 --> 00:08:11,680
is not the most natural approach so this

207
00:08:11,680 --> 00:08:12,960
problem was also addressed in the

208
00:08:12,960 --> 00:08:15,919
previous talk by by david where he

209
00:08:15,919 --> 00:08:17,759
considered more high-level programming

210
00:08:17,759 --> 00:08:22,080
languages instead of arithmetic circuits

211
00:08:22,080 --> 00:08:23,759
however instead of considering higher

212
00:08:23,759 --> 00:08:26,080
level programming languages we will

213
00:08:26,080 --> 00:08:28,560
consider the bilinear group arithmetic

214
00:08:28,560 --> 00:08:30,879
circuits model

215
00:08:30,879 --> 00:08:33,440
so these bilinear group circuits they

216
00:08:33,440 --> 00:08:34,958
are defined over by linear group

217
00:08:34,958 --> 00:08:38,080
obviously and a bilinear group is or

218
00:08:38,080 --> 00:08:41,919
contains three groups of prime order q

219
00:08:41,919 --> 00:08:44,880
g1 g2 and gt that are connected via this

220
00:08:44,880 --> 00:08:47,839
bi-linear mapping this bearing

221
00:08:47,839 --> 00:08:49,839
and a bi-linear

222
00:08:49,839 --> 00:08:52,000
group circuit

223
00:08:52,000 --> 00:08:53,600
is just as just like an arithmetic

224
00:08:53,600 --> 00:08:55,760
circuit it contains wires and gates

225
00:08:55,760 --> 00:08:58,240
however now the wire values

226
00:08:58,240 --> 00:09:01,760
can be elements of set q g1 d2 and gt

227
00:09:01,760 --> 00:09:03,600
so instead of only considering field

228
00:09:03,600 --> 00:09:05,519
elements we now have more

229
00:09:05,519 --> 00:09:07,200
general class of

230
00:09:07,200 --> 00:09:09,600
wires in these

231
00:09:09,600 --> 00:09:11,600
circuits and also the gates in a

232
00:09:11,600 --> 00:09:13,839
bi-linear group arithmetic circuits

233
00:09:13,839 --> 00:09:16,240
contain obviously the standard

234
00:09:16,240 --> 00:09:18,560
arithmetic operations so field of

235
00:09:18,560 --> 00:09:20,480
multiplications and additions but also

236
00:09:20,480 --> 00:09:22,880
group operations such as exponentiations

237
00:09:22,880 --> 00:09:24,320
and bearings

238
00:09:24,320 --> 00:09:27,200
so um

239
00:09:27,440 --> 00:09:29,760
sorry

240
00:09:29,760 --> 00:09:30,959
so this

241
00:09:30,959 --> 00:09:33,920
this computation model is uh is is a

242
00:09:33,920 --> 00:09:36,800
more general class of circuits than the

243
00:09:36,800 --> 00:09:38,320
arithmetic circuit

244
00:09:38,320 --> 00:09:39,920
model

245
00:09:39,920 --> 00:09:41,680
so it is known that any bi-linear group

246
00:09:41,680 --> 00:09:43,279
arithmetic circuit can be expressed as

247
00:09:43,279 --> 00:09:45,360
an arithmetic circuit so in principle

248
00:09:45,360 --> 00:09:47,519
it's there there's no need to consider

249
00:09:47,519 --> 00:09:48,480
this

250
00:09:48,480 --> 00:09:50,399
more general class of circuits however

251
00:09:50,399 --> 00:09:52,800
this reduction or this translation

252
00:09:52,800 --> 00:09:55,120
can increase the size of the circuit so

253
00:09:55,120 --> 00:09:56,959
for example if we consider a highly

254
00:09:56,959 --> 00:09:59,279
optimized group so for a very specific

255
00:09:59,279 --> 00:10:00,959
instantiation

256
00:10:00,959 --> 00:10:03,040
a single exponentiation can already

257
00:10:03,040 --> 00:10:04,480
result in

258
00:10:04,480 --> 00:10:07,200
an arithmetic circuit of approximately

259
00:10:07,200 --> 00:10:10,079
800 set q multiplication gains so we

260
00:10:10,079 --> 00:10:11,360
start with the bi-linear group

261
00:10:11,360 --> 00:10:13,040
arithmetic circuit that contains only

262
00:10:13,040 --> 00:10:15,200
one gate a single group exponentiation

263
00:10:15,200 --> 00:10:17,920
and then we reduce it to an arithmetic

264
00:10:17,920 --> 00:10:20,880
circuit containing 800 uh

265
00:10:20,880 --> 00:10:24,399
operations 800 gates so this blow up can

266
00:10:24,399 --> 00:10:26,720
be significant and

267
00:10:26,720 --> 00:10:30,079
also this blow up or this translation

268
00:10:30,079 --> 00:10:33,440
is specific or uh yeah it depends on the

269
00:10:33,440 --> 00:10:37,040
ex the bi-linear group so uh in general

270
00:10:37,040 --> 00:10:38,880
this this blowout can be even much

271
00:10:38,880 --> 00:10:40,560
larger

272
00:10:40,560 --> 00:10:42,000
so what we do in this work is we

273
00:10:42,000 --> 00:10:43,440
construct a direct approach for

274
00:10:43,440 --> 00:10:45,120
communication efficient zero knowledge

275
00:10:45,120 --> 00:10:48,160
proofs for constraints captured by these

276
00:10:48,160 --> 00:10:51,519
bi-linear group aromatic circuits so

277
00:10:51,519 --> 00:10:53,839
we we develop a direct approach devoids

278
00:10:53,839 --> 00:10:56,560
this reduction to arithmetic circuits

279
00:10:56,560 --> 00:10:57,680
and

280
00:10:57,680 --> 00:10:59,360
what we do is we

281
00:10:59,360 --> 00:11:00,800
generalize the compressed sigma

282
00:11:00,800 --> 00:11:02,399
protocols that were developed for the

283
00:11:02,399 --> 00:11:05,600
arithmetic circuit model to this

284
00:11:05,600 --> 00:11:07,920
bi-linear circuit model

285
00:11:07,920 --> 00:11:10,800
so again we avoid this reduction and

286
00:11:10,800 --> 00:11:13,279
also we improve the concrete efficiency

287
00:11:13,279 --> 00:11:15,440
over a prior work that also considers

288
00:11:15,440 --> 00:11:17,200
such a direct approach with

289
00:11:17,200 --> 00:11:20,800
approximately a factor tree

290
00:11:20,880 --> 00:11:22,800
and an application of this zero

291
00:11:22,800 --> 00:11:24,399
knowledge proof system we construct a

292
00:11:24,399 --> 00:11:26,079
transparent and succinct threshold

293
00:11:26,079 --> 00:11:29,040
signature scheme

294
00:11:29,040 --> 00:11:32,000
so to summarize the the result is a

295
00:11:32,000 --> 00:11:33,519
compressed sigma protocol for these

296
00:11:33,519 --> 00:11:36,079
bi-linear group vectors so the secret

297
00:11:36,079 --> 00:11:39,040
vector x is a vector with coefficients

298
00:11:39,040 --> 00:11:43,040
instead q g one g two and gt and

299
00:11:43,040 --> 00:11:44,079
the

300
00:11:44,079 --> 00:11:45,680
the compressed sigma protocol such as

301
00:11:45,680 --> 00:11:47,760
the zero knowledge proof system has

302
00:11:47,760 --> 00:11:49,839
communication costs that are logarithmic

303
00:11:49,839 --> 00:11:52,000
in the dimensions n zero and one and n

304
00:11:52,000 --> 00:11:55,760
two but linear in the dimension mt

305
00:11:55,760 --> 00:11:57,120
and the reason for this linear

306
00:11:57,120 --> 00:11:59,519
communication complexity and mt is that

307
00:11:59,519 --> 00:12:01,680
our main building block is a homomorphic

308
00:12:01,680 --> 00:12:03,920
and partially compact commitment scheme

309
00:12:03,920 --> 00:12:05,920
for bilinear group factors

310
00:12:05,920 --> 00:12:07,600
so that basically means that the

311
00:12:07,600 --> 00:12:10,000
commitment scheme that we are using has

312
00:12:10,000 --> 00:12:12,079
commitments for which the size is

313
00:12:12,079 --> 00:12:14,800
independent of m0 and one and n2 so it

314
00:12:14,800 --> 00:12:16,639
is compact in these first three

315
00:12:16,639 --> 00:12:17,760
dimensions

316
00:12:17,760 --> 00:12:19,600
but the size of the commitment scheme is

317
00:12:19,600 --> 00:12:21,839
linear in empty

318
00:12:21,839 --> 00:12:22,800
so

319
00:12:22,800 --> 00:12:24,639
this is what this linear communication

320
00:12:24,639 --> 00:12:26,000
cost

321
00:12:26,000 --> 00:12:28,480
causes

322
00:12:28,720 --> 00:12:30,480
so as an application of the ceremonies

323
00:12:30,480 --> 00:12:31,920
proof system we constructed threshold

324
00:12:31,920 --> 00:12:33,440
signature scheme

325
00:12:33,440 --> 00:12:34,880
and

326
00:12:34,880 --> 00:12:36,880
in contrast to to the more standard

327
00:12:36,880 --> 00:12:38,160
approaches for threshold signature

328
00:12:38,160 --> 00:12:40,160
schemes our threshold signature

329
00:12:40,160 --> 00:12:42,720
is zero knowledge proof of knowledge for

330
00:12:42,720 --> 00:12:45,440
k out of n sig edges so we have n

331
00:12:45,440 --> 00:12:48,560
players in total and uh

332
00:12:48,560 --> 00:12:50,560
if we have k out of n signatures then we

333
00:12:50,560 --> 00:12:52,160
can construct the zero knowledge proof

334
00:12:52,160 --> 00:12:53,200
and that will

335
00:12:53,200 --> 00:12:56,399
constitute our threshold signage

336
00:12:56,399 --> 00:12:57,680
the ingredients of this threshold

337
00:12:57,680 --> 00:12:59,839
signature scheme are the bls signature

338
00:12:59,839 --> 00:13:00,720
scheme

339
00:13:00,720 --> 00:13:01,600
and

340
00:13:01,600 --> 00:13:04,160
this scheme is defined over

341
00:13:04,160 --> 00:13:05,839
by linear group and has a very small

342
00:13:05,839 --> 00:13:08,480
bilinear group verification circuit so

343
00:13:08,480 --> 00:13:10,720
this matches very well with our

344
00:13:10,720 --> 00:13:12,959
compressed sigma protocols for bi-linear

345
00:13:12,959 --> 00:13:16,319
group arithmetic relations

346
00:13:16,880 --> 00:13:18,399
because we have this this new

347
00:13:18,399 --> 00:13:19,760
zero-knowledge proof system we do not

348
00:13:19,760 --> 00:13:21,440
have to translate

349
00:13:21,440 --> 00:13:23,360
this uh

350
00:13:23,360 --> 00:13:26,160
bilinear group constraint to an

351
00:13:26,160 --> 00:13:27,760
arithmetic circuit

352
00:13:27,760 --> 00:13:29,839
uh we also need to have

353
00:13:29,839 --> 00:13:31,839
to to get this threshold k out of n

354
00:13:31,839 --> 00:13:33,600
threshold functionality and for that we

355
00:13:33,600 --> 00:13:35,760
use a recent technique introduced at

356
00:13:35,760 --> 00:13:37,120
crypto

357
00:13:37,120 --> 00:13:38,240
this year

358
00:13:38,240 --> 00:13:41,440
proofs of partial knowledge

359
00:13:41,440 --> 00:13:43,279
and the properties of this threshold

360
00:13:43,279 --> 00:13:45,440
signature scheme are that the signatures

361
00:13:45,440 --> 00:13:48,480
are of size logarithmic and m the setup

362
00:13:48,480 --> 00:13:49,839
is transparent so we don't have a

363
00:13:49,839 --> 00:13:51,199
trusted setup

364
00:13:51,199 --> 00:13:53,519
and also the threshold signature hides

365
00:13:53,519 --> 00:13:57,279
the identities of the gay signers

366
00:13:57,680 --> 00:14:00,000
thanks this was my presentation i'm

367
00:14:00,000 --> 00:14:03,720
happy to take questions

368
00:14:07,440 --> 00:14:09,600
if there are any

369
00:14:09,600 --> 00:14:12,320
yeah i i don't have a question

370
00:14:12,320 --> 00:14:14,560
hello thomas yeah great presentation uh

371
00:14:14,560 --> 00:14:16,800
sorry i'm wondering whether

372
00:14:16,800 --> 00:14:18,399
like how exactly does this model of

373
00:14:18,399 --> 00:14:20,399
computation that you uh suggest is by

374
00:14:20,399 --> 00:14:21,680
linear group

375
00:14:21,680 --> 00:14:23,519
uh arithmetic circuit how does it relate

376
00:14:23,519 --> 00:14:25,519
to gross high like pairing equations

377
00:14:25,519 --> 00:14:27,199
because it seems that in both cases you

378
00:14:27,199 --> 00:14:29,600
do compute something the g1 in g2 and

379
00:14:29,600 --> 00:14:32,480
then you have a bunch of pairings

380
00:14:32,480 --> 00:14:34,240
and so what how does it compare to

381
00:14:34,240 --> 00:14:36,720
growth of hype you know

382
00:14:36,720 --> 00:14:38,560
so sorry how does it compare to what i

383
00:14:38,560 --> 00:14:41,760
think uh do you gross a high kind of

384
00:14:41,760 --> 00:14:43,600
music which also breaks over pairing

385
00:14:43,600 --> 00:14:45,519
equations

386
00:14:45,519 --> 00:14:48,480
so so basically uh so all kinds of

387
00:14:48,480 --> 00:14:51,199
constraints that are well defined over

388
00:14:51,199 --> 00:14:53,360
by linear group with pairing equations

389
00:14:53,360 --> 00:14:55,519
can be captured by search circuits so

390
00:14:55,519 --> 00:14:56,839
this this

391
00:14:56,839 --> 00:14:58,720
generalizes um

392
00:14:58,720 --> 00:14:59,680
uh

393
00:14:59,680 --> 00:15:02,000
for example these these inner bearing

394
00:15:02,000 --> 00:15:04,160
products uh or

395
00:15:04,160 --> 00:15:06,880
all kinds of systems that

396
00:15:06,880 --> 00:15:08,399
are defined over by linear group of

397
00:15:08,399 --> 00:15:11,399
constraints

398
00:15:12,000 --> 00:15:13,839
yeah i mean it seems very similar but i

399
00:15:13,839 --> 00:15:17,199
yeah i see okay yeah

400
00:15:17,199 --> 00:15:19,040
thank you

401
00:15:19,040 --> 00:15:22,439
any other questions

402
00:15:33,440 --> 00:15:36,880
okay thank you very much for the talk

403
00:15:36,880 --> 00:15:40,160
okay you're welcome thank you

404
00:15:40,160 --> 00:15:43,199
so let's move to the next speak next

405
00:15:43,199 --> 00:15:47,120
talk so next talk is

406
00:15:47,120 --> 00:15:49,519
promise sigma protocol how to construct

407
00:15:49,519 --> 00:15:50,959
efficient threshold

408
00:15:50,959 --> 00:15:54,480
ecdsa from encryption based on class

409
00:15:54,480 --> 00:15:55,519
groups

410
00:15:55,519 --> 00:15:56,959
the speaker is

411
00:15:56,959 --> 00:15:59,279
the indonesian

412
00:15:59,279 --> 00:16:01,680
okay go ahead

413
00:16:01,680 --> 00:16:03,279
can you hear me

414
00:16:03,279 --> 00:16:05,279
yes

415
00:16:05,279 --> 00:16:07,519
okay

416
00:16:07,519 --> 00:16:09,680
thank you for introduction uh here i'm

417
00:16:09,680 --> 00:16:10,639
going to

418
00:16:10,639 --> 00:16:13,759
talk about our people about uh threshold

419
00:16:13,759 --> 00:16:15,519
ecdsa

420
00:16:15,519 --> 00:16:17,600
uh firstly as we know when holistic

421
00:16:17,600 --> 00:16:19,839
nature allows parties to share the

422
00:16:19,839 --> 00:16:22,480
ability of signing and the threat called

423
00:16:22,480 --> 00:16:25,040
the ecds is the third world of

424
00:16:25,040 --> 00:16:27,759
traditional ecdsa the later has been

425
00:16:27,759 --> 00:16:30,800
widely used in various applications

426
00:16:30,800 --> 00:16:33,600
and in our people we put forward several

427
00:16:33,600 --> 00:16:36,560
new techniques to construct efficient

428
00:16:36,560 --> 00:16:39,920
two-party ecds and multi-party ecdsa

429
00:16:39,920 --> 00:16:42,240
and here due to the shortage of time we

430
00:16:42,240 --> 00:16:44,560
only introduced a case of

431
00:16:44,560 --> 00:16:46,800
the construction of two-party easily to

432
00:16:46,800 --> 00:16:50,359
show our techniques

433
00:16:51,040 --> 00:16:54,720
as the construction of two-party ecdsa

434
00:16:54,720 --> 00:16:57,680
uh progress uh schemes usually require

435
00:16:57,680 --> 00:16:59,040
party one to

436
00:16:59,040 --> 00:17:01,440
encrypt its signing key using the

437
00:17:01,440 --> 00:17:03,279
homomorphic encryption

438
00:17:03,279 --> 00:17:04,079
and

439
00:17:04,079 --> 00:17:06,559
using their knowledge proof to ensure

440
00:17:06,559 --> 00:17:08,720
they behave honestly

441
00:17:08,720 --> 00:17:10,480
as for the choice of homophobic

442
00:17:10,480 --> 00:17:14,000
encryption the scheme in new zealand 17

443
00:17:14,000 --> 00:17:16,559
shows pillars encryption

444
00:17:16,559 --> 00:17:18,559
it needs an expensive they are not

445
00:17:18,559 --> 00:17:21,280
reproof due to the mismatch between the

446
00:17:21,280 --> 00:17:24,240
pillar space and the ecgrc space

447
00:17:24,240 --> 00:17:27,679
institute st 1920 they chose cr

448
00:17:27,679 --> 00:17:29,120
encryption

449
00:17:29,120 --> 00:17:31,120
it also needs an expensive they are not

450
00:17:31,120 --> 00:17:32,559
approved

451
00:17:32,559 --> 00:17:34,640
or efficiently downloaded proof but

452
00:17:34,640 --> 00:17:38,320
based on non-standard assumptions

453
00:17:38,320 --> 00:17:39,919
so as we can see

454
00:17:39,919 --> 00:17:42,480
the general approved for encryption

455
00:17:42,480 --> 00:17:44,000
encryption usually improvised

456
00:17:44,000 --> 00:17:45,360
construction

457
00:17:45,360 --> 00:17:48,400
is uh it seems expensive or without

458
00:17:48,400 --> 00:17:49,919
non-standard option

459
00:17:49,919 --> 00:17:52,799
so in our people we put forth a new

460
00:17:52,799 --> 00:17:55,200
zka protocol we call it a promised sigma

461
00:17:55,200 --> 00:17:58,320
protocol it is efficient and doesn't

462
00:17:58,320 --> 00:18:00,640
rely on any assumption

463
00:18:00,640 --> 00:18:03,520
however our protocol only certifies

464
00:18:03,520 --> 00:18:05,840
a kind of weak science

465
00:18:05,840 --> 00:18:07,919
but we found structural security is

466
00:18:07,919 --> 00:18:10,240
enough for the construction of

467
00:18:10,240 --> 00:18:12,480
stress code ecgrc

468
00:18:12,480 --> 00:18:15,039
most of most specifically

469
00:18:15,039 --> 00:18:17,360
we put for the new technique to

470
00:18:17,360 --> 00:18:19,679
simulate homomorphic objects and

471
00:18:19,679 --> 00:18:21,760
irreducible tests which has been

472
00:18:21,760 --> 00:18:25,280
provided which has been improved by our

473
00:18:25,280 --> 00:18:29,000
promised sigma protocol

474
00:18:29,280 --> 00:18:31,760
our protocol is also based on cr

475
00:18:31,760 --> 00:18:32,799
encryption

476
00:18:32,799 --> 00:18:34,880
it is a homomorphic encryption based

477
00:18:34,880 --> 00:18:38,160
around class group with a dlc sub group

478
00:18:38,160 --> 00:18:40,400
and it is similar with the famous algoma

479
00:18:40,400 --> 00:18:43,280
encryption except that it choose the

480
00:18:43,280 --> 00:18:46,160
publicly from an unknown other group and

481
00:18:46,160 --> 00:18:48,880
it use an extra element from a dle group

482
00:18:48,880 --> 00:18:51,280
to in to encrypt messages

483
00:18:51,280 --> 00:18:53,600
okay we notice that there might is the

484
00:18:53,600 --> 00:18:57,120
other element in this class group

485
00:18:57,120 --> 00:19:00,160
therefore the common signal protocol for

486
00:19:00,160 --> 00:19:02,720
fossil encryption is not secure unless

487
00:19:02,720 --> 00:19:05,120
the welfare choose the change from the

488
00:19:05,120 --> 00:19:08,080
state of zero to y so overall the

489
00:19:08,080 --> 00:19:09,679
nuclear substrate

490
00:19:09,679 --> 00:19:11,600
the low order subscription and the

491
00:19:11,600 --> 00:19:14,799
square root of substrate hold

492
00:19:15,600 --> 00:19:18,320
fortunately we find this protocol still

493
00:19:18,320 --> 00:19:21,120
certified assembled security it implies

494
00:19:21,120 --> 00:19:24,080
that the sedimentary can be easily

495
00:19:24,080 --> 00:19:26,880
turned into a very simple text

496
00:19:26,880 --> 00:19:29,600
in other words

497
00:19:29,919 --> 00:19:31,840
the system industry is close to our

498
00:19:31,840 --> 00:19:32,720
village

499
00:19:32,720 --> 00:19:34,960
encryption and one could extract the

500
00:19:34,960 --> 00:19:36,960
message

501
00:19:36,960 --> 00:19:39,760
only using the secret key

502
00:19:39,760 --> 00:19:41,919
but here we still need to ensure the

503
00:19:41,919 --> 00:19:44,080
constituents of the strength message and

504
00:19:44,080 --> 00:19:47,120
the message hasn't seen so

505
00:19:47,120 --> 00:19:49,520
we use algoma encryption and cr

506
00:19:49,520 --> 00:19:51,840
encryption to encrypt the same message

507
00:19:51,840 --> 00:19:53,760
and the probabilize the sigma particles

508
00:19:53,760 --> 00:19:56,880
for air gamma and cl encryption

509
00:19:56,880 --> 00:19:58,960
that's our first idea to promise sigma

510
00:19:58,960 --> 00:20:02,159
protocol it certifies the answer wi-fi

511
00:20:02,159 --> 00:20:04,880
zero knowledge process and

512
00:20:04,880 --> 00:20:07,600
kind of weak songs we called it promise

513
00:20:07,600 --> 00:20:09,200
extractability

514
00:20:09,200 --> 00:20:12,000
it claims that using rewinding one could

515
00:20:12,000 --> 00:20:15,919
extract the message and adjustments

516
00:20:15,919 --> 00:20:19,679
of the algorithm and without rewinding

517
00:20:19,679 --> 00:20:21,760
one could use both security keys to

518
00:20:21,760 --> 00:20:25,200
extract the message encrypted in

519
00:20:25,200 --> 00:20:27,360
algoma encryption

520
00:20:27,360 --> 00:20:29,840
here because our protocol

521
00:20:29,840 --> 00:20:32,960
can't ensure the willingness of the cl

522
00:20:32,960 --> 00:20:35,679
encryption so we might make trouble

523
00:20:35,679 --> 00:20:38,720
uh in the security proof of our threat

524
00:20:38,720 --> 00:20:40,880
code ecdsa so

525
00:20:40,880 --> 00:20:43,200
we put forward another technique to show

526
00:20:43,200 --> 00:20:45,679
how to simulate the homomorphic options

527
00:20:45,679 --> 00:20:46,480
on

528
00:20:46,480 --> 00:20:49,440
immediate tests which has been pulled by

529
00:20:49,440 --> 00:20:52,640
promised sigma protocol

530
00:20:52,720 --> 00:20:54,880
and uh using these techniques will

531
00:20:54,880 --> 00:20:57,600
construct an efficient two-party uh

532
00:20:57,600 --> 00:20:59,360
ecdsa and uh

533
00:20:59,360 --> 00:21:01,600
and uh efficient multi-party threat

534
00:21:01,600 --> 00:21:05,360
called ecdsa compared with the schemes

535
00:21:05,360 --> 00:21:08,880
appearing in syst 1920 our scheme

536
00:21:08,880 --> 00:21:12,080
becomes much better

537
00:21:12,559 --> 00:21:15,520
and our multi-party scheme and

538
00:21:15,520 --> 00:21:17,440
also removes a lot of assumption and

539
00:21:17,440 --> 00:21:19,760
strongest assumption

540
00:21:19,760 --> 00:21:20,720
that's all

541
00:21:20,720 --> 00:21:23,760
thank you for your attention

542
00:21:26,559 --> 00:21:28,720
okay if

543
00:21:28,720 --> 00:21:32,240
are there any questions or comments

544
00:21:35,440 --> 00:21:39,480
you may use chat box

545
00:21:50,559 --> 00:21:52,640
okay no question

546
00:21:52,640 --> 00:21:53,520
so

547
00:21:53,520 --> 00:21:55,919
thank you thank you for the speaking

548
00:21:55,919 --> 00:21:57,520
thanks

549
00:21:57,520 --> 00:21:59,600
thank you for the talk

550
00:21:59,600 --> 00:22:01,840
thank you let's move to the

551
00:22:01,840 --> 00:22:02,720
next

552
00:22:02,720 --> 00:22:04,960
talk

553
00:22:07,440 --> 00:22:08,480
now

554
00:22:08,480 --> 00:22:10,480
the chair is

555
00:22:10,480 --> 00:22:15,280
from now to cheered by ron steinfeld

556
00:22:15,600 --> 00:22:19,360
thank you takeshi um

557
00:22:21,600 --> 00:22:23,360
so

558
00:22:23,360 --> 00:22:25,360
we can move now to

559
00:22:25,360 --> 00:22:27,919
the the next talk for this session which

560
00:22:27,919 --> 00:22:30,080
is titled uh the one more discrete

561
00:22:30,080 --> 00:22:31,679
logarithm assumption in the generic

562
00:22:31,679 --> 00:22:32,880
group model

563
00:22:32,880 --> 00:22:35,600
by pastas are bower georg fushbauer and

564
00:22:35,600 --> 00:22:38,880
antoine pluvias and the speaker will be

565
00:22:38,880 --> 00:22:41,840
belfaser

566
00:22:42,159 --> 00:22:43,760
hi

567
00:22:43,760 --> 00:22:46,720
you can go ahead

568
00:22:48,960 --> 00:22:51,280
do you hear me well

569
00:22:51,280 --> 00:22:52,400
yes

570
00:22:52,400 --> 00:22:55,400
okay

571
00:23:14,640 --> 00:23:16,880
so

572
00:23:17,840 --> 00:23:18,960
so

573
00:23:18,960 --> 00:23:21,520
hello everyone i am balthazar boyer and

574
00:23:21,520 --> 00:23:24,000
i'm happy to present you the one more

575
00:23:24,000 --> 00:23:25,919
discrete logarithm in the generic group

576
00:23:25,919 --> 00:23:28,240
mandel a joining to work with george fox

577
00:23:28,240 --> 00:23:30,720
bower and antoine puye

578
00:23:30,720 --> 00:23:32,799
so in this work

579
00:23:32,799 --> 00:23:34,159
we analyze

580
00:23:34,159 --> 00:23:36,000
the one more discrete logarithm

581
00:23:36,000 --> 00:23:37,440
assumption

582
00:23:37,440 --> 00:23:39,440
and show it all in the generic group

583
00:23:39,440 --> 00:23:40,960
model

584
00:23:40,960 --> 00:23:42,559
so

585
00:23:42,559 --> 00:23:44,799
also this assumption

586
00:23:44,799 --> 00:23:47,919
has been introduced almost 20 years ago

587
00:23:47,919 --> 00:23:50,159
and

588
00:23:50,320 --> 00:23:54,159
is widely used in the literature

589
00:23:54,159 --> 00:23:57,039
there has been no

590
00:23:57,039 --> 00:23:58,480
such proof

591
00:23:58,480 --> 00:24:01,360
before our work

592
00:24:01,520 --> 00:24:02,640
and in fact

593
00:24:02,640 --> 00:24:05,200
we proved that the only

594
00:24:05,200 --> 00:24:06,559
proof sketch

595
00:24:06,559 --> 00:24:08,240
in the literature

596
00:24:08,240 --> 00:24:10,880
is float

597
00:24:10,880 --> 00:24:12,080
so

598
00:24:12,080 --> 00:24:13,679
first i would like to explain you what

599
00:24:13,679 --> 00:24:16,000
this assumption is so

600
00:24:16,000 --> 00:24:16,960
in

601
00:24:16,960 --> 00:24:20,080
this context there is an adversary which

602
00:24:20,080 --> 00:24:21,279
receives

603
00:24:21,279 --> 00:24:24,480
group elements he has to compute

604
00:24:24,480 --> 00:24:27,679
the discrete logarithms

605
00:24:28,080 --> 00:24:30,960
and he has access

606
00:24:30,960 --> 00:24:34,080
to an oracle she can compute

607
00:24:34,080 --> 00:24:36,799
the discrete logarithm of

608
00:24:36,799 --> 00:24:39,600
the group elements of his choice

609
00:24:39,600 --> 00:24:42,480
so at this step the problem can seem

610
00:24:42,480 --> 00:24:46,720
trivial but to win the adversary should

611
00:24:46,720 --> 00:24:47,919
we should

612
00:24:47,919 --> 00:24:50,159
ask

613
00:24:50,559 --> 00:24:54,080
should make fewer queries

614
00:24:54,080 --> 00:24:56,799
to this discrete logarithm oracle than

615
00:24:56,799 --> 00:25:00,600
the number of challenges

616
00:25:02,880 --> 00:25:05,039
hence the name one more

617
00:25:05,039 --> 00:25:07,520
discrete algorithm

618
00:25:07,520 --> 00:25:08,400
so

619
00:25:08,400 --> 00:25:09,279
this

620
00:25:09,279 --> 00:25:11,440
assumption has been introduced by

621
00:25:11,440 --> 00:25:12,400
belarus

622
00:25:12,400 --> 00:25:14,480
in 2003

623
00:25:14,480 --> 00:25:15,440
and

624
00:25:15,440 --> 00:25:17,679
as you can see it has been

625
00:25:17,679 --> 00:25:20,799
used a lot in the literature

626
00:25:20,799 --> 00:25:21,679
for

627
00:25:21,679 --> 00:25:24,640
example

628
00:25:26,640 --> 00:25:28,960
it underlies the security of blanche

629
00:25:28,960 --> 00:25:30,640
nara signatures

630
00:25:30,640 --> 00:25:33,279
and it's also used

631
00:25:33,279 --> 00:25:37,600
in for the security of other primitives

632
00:25:37,600 --> 00:25:38,960
such as

633
00:25:38,960 --> 00:25:41,279
the multi signatures

634
00:25:41,279 --> 00:25:43,279
music too

635
00:25:43,279 --> 00:25:45,760
multi-signature scheme

636
00:25:45,760 --> 00:25:47,279
music too

637
00:25:47,279 --> 00:25:49,919
and it has also a theoretical interest

638
00:25:49,919 --> 00:25:51,840
because

639
00:25:51,840 --> 00:25:54,880
many negative results are based on this

640
00:25:54,880 --> 00:25:58,880
assumption for example

641
00:25:59,279 --> 00:26:01,120
some

642
00:26:01,120 --> 00:26:02,640
security

643
00:26:02,640 --> 00:26:05,440
properties

644
00:26:05,840 --> 00:26:08,080
can not be based on some security

645
00:26:08,080 --> 00:26:10,400
purposes of the signatures cannot be

646
00:26:10,400 --> 00:26:12,159
based on the discrete logarithm

647
00:26:12,159 --> 00:26:14,480
assumption if the one more discrete

648
00:26:14,480 --> 00:26:17,840
logarithm assumption falls

649
00:26:17,840 --> 00:26:18,799
so

650
00:26:18,799 --> 00:26:20,080
it's

651
00:26:20,080 --> 00:26:21,520
obvious that

652
00:26:21,520 --> 00:26:24,000
this assumption is stronger than the

653
00:26:24,000 --> 00:26:27,520
discrete logarithm assumption

654
00:26:27,760 --> 00:26:29,679
and but we

655
00:26:29,679 --> 00:26:32,080
we don't know at this step

656
00:26:32,080 --> 00:26:34,480
if this assumption is relevant or not

657
00:26:34,480 --> 00:26:35,760
because

658
00:26:35,760 --> 00:26:38,640
the crypto analysts

659
00:26:38,640 --> 00:26:40,960
do not study this assumption as much as

660
00:26:40,960 --> 00:26:43,440
the discrete logarithm

661
00:26:43,440 --> 00:26:44,720
assumption

662
00:26:44,720 --> 00:26:48,240
but because we are in a group context

663
00:26:48,240 --> 00:26:50,960
we would like to have as a minimal

664
00:26:50,960 --> 00:26:53,039
sanity check

665
00:26:53,039 --> 00:26:56,000
the guarantee that generic attacks

666
00:26:56,000 --> 00:26:58,880
does not break this assumption

667
00:26:58,880 --> 00:26:59,760
so

668
00:26:59,760 --> 00:27:03,279
to have this guarantee we have to study

669
00:27:03,279 --> 00:27:05,440
this assumption in the generic group

670
00:27:05,440 --> 00:27:08,799
model so briefly in this model

671
00:27:08,799 --> 00:27:11,840
the adversary does not have access

672
00:27:11,840 --> 00:27:14,240
to the real encodings of the

673
00:27:14,240 --> 00:27:16,640
group elements but only see

674
00:27:16,640 --> 00:27:19,200
purely random symbols which correspond

675
00:27:19,200 --> 00:27:20,960
to these group elements

676
00:27:20,960 --> 00:27:23,440
and if you want to make

677
00:27:23,440 --> 00:27:26,320
a group operations

678
00:27:26,320 --> 00:27:28,880
a group operation he has to

679
00:27:28,880 --> 00:27:31,440
interact with an oracle

680
00:27:31,440 --> 00:27:32,240
she

681
00:27:32,240 --> 00:27:35,440
computes the group operation for him and

682
00:27:35,440 --> 00:27:39,200
output the new rom dumb symbol which

683
00:27:39,200 --> 00:27:41,600
correspond to

684
00:27:41,600 --> 00:27:43,360
this

685
00:27:43,360 --> 00:27:47,279
to the result of this group operation

686
00:27:47,679 --> 00:27:48,640
so

687
00:27:48,640 --> 00:27:50,000
in

688
00:27:50,000 --> 00:27:52,159
most of the previous proof in the

689
00:27:52,159 --> 00:27:55,120
generic group model

690
00:27:55,520 --> 00:27:58,399
people were using the schwarzepaul lemar

691
00:27:58,399 --> 00:28:00,880
but unfortunately

692
00:28:00,880 --> 00:28:04,240
this lima does not apply here

693
00:28:04,240 --> 00:28:06,320
for this reason we have introduced a new

694
00:28:06,320 --> 00:28:08,960
algebraic lemma which perfectly fits

695
00:28:08,960 --> 00:28:11,360
with our goal

696
00:28:11,360 --> 00:28:14,559
and by using this lemar we finally prove

697
00:28:14,559 --> 00:28:16,640
the security of the one more discrete

698
00:28:16,640 --> 00:28:19,279
logarithm

699
00:28:19,440 --> 00:28:23,039
in the generic group model

700
00:28:24,080 --> 00:28:25,039
and

701
00:28:25,039 --> 00:28:28,399
by using similar arguments we have also

702
00:28:28,399 --> 00:28:30,880
proved that variants of the one more

703
00:28:30,880 --> 00:28:33,840
discrete logarithm such as the one more

704
00:28:33,840 --> 00:28:36,080
cdh assumption

705
00:28:36,080 --> 00:28:40,080
holds also in the generic group model

706
00:28:40,080 --> 00:28:40,960
so

707
00:28:40,960 --> 00:28:42,880
i would like to thank you for your

708
00:28:42,880 --> 00:28:45,600
attention and if you have question

709
00:28:45,600 --> 00:28:49,360
i would be happy to answer it

710
00:28:54,960 --> 00:28:58,399
are there any questions

711
00:28:58,399 --> 00:29:01,039
yeah i have some questions um

712
00:29:01,039 --> 00:29:03,440
firstly

713
00:29:03,679 --> 00:29:05,760
have you tried to also prove it in the

714
00:29:05,760 --> 00:29:08,879
algebraic group model

715
00:29:11,120 --> 00:29:13,679
but uh you mean based on which

716
00:29:13,679 --> 00:29:15,360
assumption

717
00:29:15,360 --> 00:29:16,559
i don't know maybe like discreet

718
00:29:16,559 --> 00:29:18,240
logarithm

719
00:29:18,240 --> 00:29:19,039
oh

720
00:29:19,039 --> 00:29:21,600
we know it's okay

721
00:29:21,600 --> 00:29:23,679
we know it's not possible

722
00:29:23,679 --> 00:29:26,240
there is a negative result about that in

723
00:29:26,240 --> 00:29:28,399
a

724
00:29:30,080 --> 00:29:32,720
paper of

725
00:29:33,840 --> 00:29:36,480
crypto in

726
00:29:37,480 --> 00:29:39,360
2020

727
00:29:39,360 --> 00:29:42,559
which shows that

728
00:29:44,159 --> 00:29:47,200
there is a farm we cannot

729
00:29:47,200 --> 00:29:49,520
prove the security of

730
00:29:49,520 --> 00:29:52,399
one more discrete

731
00:29:53,120 --> 00:29:55,760
the one more decade log assumption based

732
00:29:55,760 --> 00:29:57,279
on the

733
00:29:57,279 --> 00:29:59,840
discrete log assumption

734
00:29:59,840 --> 00:30:01,600
it's not possible

735
00:30:01,600 --> 00:30:04,240
so it's a separation residue

736
00:30:04,240 --> 00:30:06,559
right

737
00:30:06,960 --> 00:30:09,360
my second question would be like what is

738
00:30:09,360 --> 00:30:12,080
the problem of using swat triple and why

739
00:30:12,080 --> 00:30:14,559
does it why can't we use it uh

740
00:30:14,559 --> 00:30:15,520
okay

741
00:30:15,520 --> 00:30:17,760
so

742
00:30:18,399 --> 00:30:21,600
the problem is the fact that the

743
00:30:21,600 --> 00:30:25,120
discrete logarithms

744
00:30:25,760 --> 00:30:28,080
so it's complicated so in the

745
00:30:28,080 --> 00:30:31,520
schwarzschild lemma

746
00:30:32,720 --> 00:30:33,919
you come

747
00:30:33,919 --> 00:30:37,840
if you do the proof rigorously

748
00:30:38,000 --> 00:30:40,480
you use polynomials

749
00:30:40,480 --> 00:30:43,120
and at the end

750
00:30:43,120 --> 00:30:44,159
you

751
00:30:44,159 --> 00:30:47,440
you choose the value for the

752
00:30:47,440 --> 00:30:50,799
for the exile

753
00:30:50,799 --> 00:30:53,520
but when you do that

754
00:30:53,520 --> 00:30:55,440
it's at the end of the interaction

755
00:30:55,440 --> 00:30:56,880
between

756
00:30:56,880 --> 00:31:00,640
the adversary and the challenger

757
00:31:02,720 --> 00:31:05,519
and here you cannot do that because the

758
00:31:05,519 --> 00:31:09,600
challenger can query discrete logarithm

759
00:31:09,600 --> 00:31:10,640
calls

760
00:31:10,640 --> 00:31:11,600
then

761
00:31:11,600 --> 00:31:13,918
um

762
00:31:14,880 --> 00:31:17,360
you you have you need to uh

763
00:31:17,360 --> 00:31:20,479
to choose

764
00:31:21,200 --> 00:31:22,480
during

765
00:31:22,480 --> 00:31:24,720
the interaction do you need to choose

766
00:31:24,720 --> 00:31:25,919
values

767
00:31:25,919 --> 00:31:27,039
for

768
00:31:27,039 --> 00:31:29,120
unknown

769
00:31:29,120 --> 00:31:33,039
during the interaction and then

770
00:31:33,760 --> 00:31:35,840
it changes a lot of things

771
00:31:35,840 --> 00:31:36,960
because

772
00:31:36,960 --> 00:31:39,279
you cannot just use the participle lemma

773
00:31:39,279 --> 00:31:41,760
at the end

774
00:31:42,559 --> 00:31:43,600
and

775
00:31:43,600 --> 00:31:44,799
just look

776
00:31:44,799 --> 00:31:47,440
the probability that no collision occurs

777
00:31:47,440 --> 00:31:48,559
because

778
00:31:48,559 --> 00:31:52,159
the adversary has some information

779
00:31:52,159 --> 00:31:54,240
on the value so

780
00:31:54,240 --> 00:31:56,530
i think

781
00:31:56,530 --> 00:31:58,960
[Music]

782
00:31:58,960 --> 00:32:03,440
yes yes yes it's

783
00:32:03,519 --> 00:32:06,480
oh i i see this

784
00:32:07,440 --> 00:32:08,799
thank you

785
00:32:08,799 --> 00:32:11,120
sure

786
00:32:11,919 --> 00:32:15,640
any other questions

787
00:32:22,559 --> 00:32:26,320
i guess i have a naive question right so

788
00:32:26,320 --> 00:32:27,840
do you believe that these problems are

789
00:32:27,840 --> 00:32:29,440
equivalent the discrete log is a one

790
00:32:29,440 --> 00:32:32,320
more discrete one

791
00:32:32,320 --> 00:32:34,480
what do you mean by equivalence

792
00:32:34,480 --> 00:32:35,840
there's a reduction do you think there's

793
00:32:35,840 --> 00:32:38,399
a reduction in the reverse direction

794
00:32:38,399 --> 00:32:43,360
uh no i don't think so because uh in

795
00:32:43,360 --> 00:32:45,600
the result in the algebraic

796
00:32:45,600 --> 00:32:47,679
model let's think

797
00:32:47,679 --> 00:32:50,159
uh from a theoretical aspect there is a

798
00:32:50,159 --> 00:32:51,440
gap

799
00:32:51,440 --> 00:32:54,720
between these two problems

800
00:32:55,679 --> 00:32:59,440
but it does not mean uh

801
00:32:59,679 --> 00:33:00,559
yeah

802
00:33:00,559 --> 00:33:02,399
maybe

803
00:33:02,399 --> 00:33:06,080
from a practical point of view uh

804
00:33:06,080 --> 00:33:07,760
their hardness

805
00:33:07,760 --> 00:33:10,640
is the same but uh

806
00:33:10,640 --> 00:33:14,960
yeah i think finding a reduction

807
00:33:16,559 --> 00:33:20,639
generic reduction seems to me very

808
00:33:20,799 --> 00:33:23,200
hard for me

809
00:33:23,200 --> 00:33:25,840
okay thank you

810
00:33:26,080 --> 00:33:28,399
sure

811
00:33:30,559 --> 00:33:32,880
um yeah maybe i'll ask also what one's

812
00:33:32,880 --> 00:33:34,159
more thing

813
00:33:34,159 --> 00:33:36,240
um do you think

814
00:33:36,240 --> 00:33:39,840
technique can be generalized

815
00:33:39,840 --> 00:33:42,000
rather classy

816
00:33:42,000 --> 00:33:43,120
and

817
00:33:43,120 --> 00:33:46,239
besides the one

818
00:33:46,799 --> 00:33:48,320
sorry i didn't

819
00:33:48,320 --> 00:33:50,080
hear you well

820
00:33:50,080 --> 00:33:54,320
um do you think uh your proof technique

821
00:33:54,320 --> 00:33:57,360
you generalized

822
00:33:58,220 --> 00:34:00,960
[Music]

823
00:34:00,960 --> 00:34:04,200
like um

824
00:34:07,519 --> 00:34:09,520
sorry can you write your question on the

825
00:34:09,520 --> 00:34:11,839
chat

826
00:34:12,239 --> 00:34:14,480
because i didn't hear you

827
00:34:14,480 --> 00:34:16,399
well i don't know if it's my connection

828
00:34:16,399 --> 00:34:19,799
which is low

829
00:34:20,079 --> 00:34:23,079
um

830
00:34:42,560 --> 00:34:44,079
so

831
00:34:44,079 --> 00:34:47,199
i think it can be generalized for any

832
00:34:47,199 --> 00:34:52,239
type of one more assumptions so but

833
00:34:53,040 --> 00:34:54,079
the one more

834
00:34:54,079 --> 00:34:56,159
one more assumption in a group context

835
00:34:56,159 --> 00:34:58,079
so of course this

836
00:34:58,079 --> 00:35:00,400
proof is only useful in a group context

837
00:35:00,400 --> 00:35:03,040
so it cannot be used for one more

838
00:35:03,040 --> 00:35:05,520
ersa for example

839
00:35:05,520 --> 00:35:07,200
but

840
00:35:07,200 --> 00:35:09,440
yes

841
00:35:09,440 --> 00:35:11,680
we in our

842
00:35:11,680 --> 00:35:13,359
paper we show

843
00:35:13,359 --> 00:35:15,359
that it can be applied

844
00:35:15,359 --> 00:35:17,839
for a variant of the one more discrete

845
00:35:17,839 --> 00:35:22,000
logarithm which is one more cdh

846
00:35:22,320 --> 00:35:23,440
and

847
00:35:23,440 --> 00:35:26,320
we can extend still extend to

848
00:35:26,320 --> 00:35:27,359
this

849
00:35:27,359 --> 00:35:29,119
result

850
00:35:29,119 --> 00:35:31,839
but

851
00:35:32,960 --> 00:35:34,800
the

852
00:35:34,800 --> 00:35:37,680
new results covered by this type of

853
00:35:37,680 --> 00:35:40,160
proof

854
00:35:40,320 --> 00:35:42,880
are not

855
00:35:43,839 --> 00:35:47,359
for example the one more cdh has been

856
00:35:47,359 --> 00:35:48,160
we

857
00:35:48,160 --> 00:35:50,400
defined has not never been used in the

858
00:35:50,400 --> 00:35:53,680
literature so i don't see

859
00:35:54,880 --> 00:35:56,839
results which are

860
00:35:56,839 --> 00:35:59,440
important which can which can be now

861
00:35:59,440 --> 00:36:01,359
covered by this

862
00:36:01,359 --> 00:36:02,640
proof

863
00:36:02,640 --> 00:36:06,799
i just don't see toy game you know

864
00:36:07,680 --> 00:36:09,359
but not

865
00:36:09,359 --> 00:36:13,160
important assumptions

866
00:36:20,560 --> 00:36:22,480
quickly

867
00:36:22,480 --> 00:36:25,520
ronnie your audio is breaking up

868
00:36:25,520 --> 00:36:27,839
oh

869
00:36:32,480 --> 00:36:36,560
let me see if i can improve it

870
00:36:39,280 --> 00:36:42,079
you might turn your camera off

871
00:36:42,079 --> 00:36:44,000
yeah okay

872
00:36:44,000 --> 00:36:48,119
uh is it right there now

873
00:37:05,839 --> 00:37:08,480
extractable one-way function

874
00:37:08,480 --> 00:37:12,400
applications that version

875
00:37:13,280 --> 00:37:14,320
and this

876
00:37:14,320 --> 00:37:15,119
is

877
00:37:15,119 --> 00:37:19,119
primary to vice order guard

878
00:37:19,520 --> 00:37:23,119
yep can you hear me your mind

879
00:37:23,440 --> 00:37:24,640
yes

880
00:37:24,640 --> 00:37:26,400
okay thank you

881
00:37:26,400 --> 00:37:28,880
yes i'm here to talk about our paper

882
00:37:28,880 --> 00:37:30,720
verifiably extractable runway functions

883
00:37:30,720 --> 00:37:32,079
and our applications through subversion

884
00:37:32,079 --> 00:37:34,000
zero knowledge and this is going to work

885
00:37:34,000 --> 00:37:35,520
with prestudi

886
00:37:35,520 --> 00:37:38,480
janno and michal

887
00:37:38,560 --> 00:37:40,400
so our starting point is non-interactive

888
00:37:40,400 --> 00:37:42,960
serial knowledge or nisik in the crs or

889
00:37:42,960 --> 00:37:45,280
common reference string model

890
00:37:45,280 --> 00:37:47,680
so the setup is that the

891
00:37:47,680 --> 00:37:50,079
approver in this case a cat you know has

892
00:37:50,079 --> 00:37:52,240
access to some public wants to prove

893
00:37:52,240 --> 00:37:54,560
some public statement x to be true

894
00:37:54,560 --> 00:37:56,800
and has some private witness uh you know

895
00:37:56,800 --> 00:37:58,640
that testifies this fact

896
00:37:58,640 --> 00:38:00,160
and wants to convince you know a

897
00:38:00,160 --> 00:38:02,839
verifier that the statement is

898
00:38:02,839 --> 00:38:04,480
true

899
00:38:04,480 --> 00:38:06,240
and wants to do so by sending a single

900
00:38:06,240 --> 00:38:08,240
message or proof

901
00:38:08,240 --> 00:38:09,599
and we want there to be no further

902
00:38:09,599 --> 00:38:11,599
interaction between

903
00:38:11,599 --> 00:38:14,720
the proven verifier

904
00:38:14,960 --> 00:38:17,200
and the common way to do this is that we

905
00:38:17,200 --> 00:38:19,200
assume the existence of a trusted third

906
00:38:19,200 --> 00:38:20,640
party

907
00:38:20,640 --> 00:38:22,640
that generates a common reference string

908
00:38:22,640 --> 00:38:24,079
and shares it between the approver and

909
00:38:24,079 --> 00:38:25,440
the verifier

910
00:38:25,440 --> 00:38:26,960
and then the

911
00:38:26,960 --> 00:38:29,440
crs is used to create a proof

912
00:38:29,440 --> 00:38:32,079
and to verify a proof

913
00:38:32,079 --> 00:38:35,359
and if the third party behaves honestly

914
00:38:35,359 --> 00:38:37,040
then we can achieve you know the three

915
00:38:37,040 --> 00:38:38,720
properties we care about completeness

916
00:38:38,720 --> 00:38:40,880
and sincere knowledge completeness

917
00:38:40,880 --> 00:38:43,119
saying that an honestly generated proof

918
00:38:43,119 --> 00:38:44,400
is accepted

919
00:38:44,400 --> 00:38:46,560
sam is saying that a

920
00:38:46,560 --> 00:38:48,320
proof of a false statement is not

921
00:38:48,320 --> 00:38:51,280
accepted and zero knowledge stating that

922
00:38:51,280 --> 00:38:53,359
the proof doesn't reveal anything

923
00:38:53,359 --> 00:38:56,320
um additional about the statement beyond

924
00:38:56,320 --> 00:38:57,920
the fact that it is true

925
00:38:57,920 --> 00:38:59,680
importantly it doesn't reveal anything

926
00:38:59,680 --> 00:39:02,400
about the witness w

927
00:39:02,400 --> 00:39:06,079
but these properties rely importantly on

928
00:39:06,079 --> 00:39:08,240
the trust in the third party we need the

929
00:39:08,240 --> 00:39:10,960
third party we have honesty

930
00:39:10,960 --> 00:39:12,560
and

931
00:39:12,560 --> 00:39:14,640
if

932
00:39:14,640 --> 00:39:16,240
the third party doesn't behave honestly

933
00:39:16,240 --> 00:39:19,359
then we have no guarantees uh typically

934
00:39:19,359 --> 00:39:21,200
so what we would

935
00:39:21,200 --> 00:39:22,320
like is

936
00:39:22,320 --> 00:39:24,720
to have some guarantees uh in case the

937
00:39:24,720 --> 00:39:26,640
third party behaves maliciously

938
00:39:26,640 --> 00:39:28,960
could we still guarantee you know zero

939
00:39:28,960 --> 00:39:31,359
knowledge or soundness

940
00:39:31,359 --> 00:39:33,440
or complete completeness if the third

941
00:39:33,440 --> 00:39:36,000
party behaved maliciously

942
00:39:36,000 --> 00:39:38,560
um so we cannot guarantee all three

943
00:39:38,560 --> 00:39:40,880
properties

944
00:39:40,880 --> 00:39:42,480
so if the

945
00:39:42,480 --> 00:39:44,240
um

946
00:39:44,240 --> 00:39:46,560
so we use uh the phrase subversion

947
00:39:46,560 --> 00:39:50,320
soundness or ck uh to talk about you

948
00:39:50,320 --> 00:39:52,480
know the soundness property would remain

949
00:39:52,480 --> 00:39:55,040
uh even if the crs was subverted so

950
00:39:55,040 --> 00:39:57,359
subversion soundless means that we don't

951
00:39:57,359 --> 00:39:58,800
have to trust the

952
00:39:58,800 --> 00:40:01,040
crs generator to have sounds we have

953
00:40:01,040 --> 00:40:02,960
soundness regardless

954
00:40:02,960 --> 00:40:04,640
if this property is achieved by our

955
00:40:04,640 --> 00:40:06,640
protocol then we cannot have zero

956
00:40:06,640 --> 00:40:08,720
knowledge at all even if we trust the

957
00:40:08,720 --> 00:40:11,520
crs generator for that property

958
00:40:11,520 --> 00:40:13,520
so that would be impossible

959
00:40:13,520 --> 00:40:15,040
it is possible to achieve a weaker

960
00:40:15,040 --> 00:40:17,680
privacy requirement in this setting

961
00:40:17,680 --> 00:40:19,839
but that's not our focus so our focus is

962
00:40:19,839 --> 00:40:20,960
on

963
00:40:20,960 --> 00:40:23,200
subversion zero knowledge and ordinary

964
00:40:23,200 --> 00:40:25,040
soundness

965
00:40:25,040 --> 00:40:26,079
so

966
00:40:26,079 --> 00:40:28,880
the idea is that we want zero knowledge

967
00:40:28,880 --> 00:40:31,520
property to remain even if the crs is

968
00:40:31,520 --> 00:40:32,880
inverted

969
00:40:32,880 --> 00:40:34,400
and then we want the sadness property to

970
00:40:34,400 --> 00:40:36,079
remain if the

971
00:40:36,079 --> 00:40:39,440
crs generator was being honest

972
00:40:39,440 --> 00:40:41,760
so in that case we were able to reduce

973
00:40:41,760 --> 00:40:44,960
the trust in the crs generator

974
00:40:44,960 --> 00:40:46,400
so there are some constructions in the

975
00:40:46,400 --> 00:40:48,400
literature and the key question of our

976
00:40:48,400 --> 00:40:50,880
paper is under which assumptions

977
00:40:50,880 --> 00:40:51,680
can

978
00:40:51,680 --> 00:40:54,720
this properties be achieved so cancer

979
00:40:54,720 --> 00:40:56,640
versions your knowledge nisiks be

980
00:40:56,640 --> 00:40:59,040
achieved

981
00:40:59,200 --> 00:41:01,119
so our contributions are three or

982
00:41:01,119 --> 00:41:03,680
four-fold so we define a new primitive

983
00:41:03,680 --> 00:41:05,599
which we call a verifiably extractable

984
00:41:05,599 --> 00:41:08,880
one-way functions or a valves

985
00:41:08,880 --> 00:41:11,200
which is a yeah not very nice acronym

986
00:41:11,200 --> 00:41:12,640
but uh

987
00:41:12,640 --> 00:41:14,160
and we give some constructions of this

988
00:41:14,160 --> 00:41:16,240
primitive or more precisely we show that

989
00:41:16,240 --> 00:41:18,800
various constructions in the literature

990
00:41:18,800 --> 00:41:21,680
are you going to satisfy our definition

991
00:41:21,680 --> 00:41:23,839
and then we construct subsequent essex

992
00:41:23,839 --> 00:41:26,079
from layoffs with some additional

993
00:41:26,079 --> 00:41:28,160
primitives and we construct the office

994
00:41:28,160 --> 00:41:30,000
from subject kinesics under certain

995
00:41:30,000 --> 00:41:32,240
additional conditions

996
00:41:32,240 --> 00:41:36,079
um so we oops so we show that there is a

997
00:41:36,079 --> 00:41:37,520
you know significant connection between

998
00:41:37,520 --> 00:41:41,119
subsequent essex and layoffs

999
00:41:41,119 --> 00:41:43,040
uh so i'll just briefly define what are

1000
00:41:43,040 --> 00:41:44,640
they off is so

1001
00:41:44,640 --> 00:41:45,359
uh

1002
00:41:45,359 --> 00:41:46,960
like verifiably extractable one-way

1003
00:41:46,960 --> 00:41:50,079
functions is an extension of the

1004
00:41:50,079 --> 00:41:51,920
non-primitive extractable one-way

1005
00:41:51,920 --> 00:41:52,960
functions

1006
00:41:52,960 --> 00:41:54,400
so an extractable one-way function

1007
00:41:54,400 --> 00:41:56,000
satisfies

1008
00:41:56,000 --> 00:41:58,240
you know the one-way property so this is

1009
00:41:58,240 --> 00:41:59,680
traditional

1010
00:41:59,680 --> 00:42:01,839
you know given an image of a function it

1011
00:42:01,839 --> 00:42:04,640
should be hard to compute a pre-image

1012
00:42:04,640 --> 00:42:07,680
and extractable uh meaning given access

1013
00:42:07,680 --> 00:42:10,560
to like white box access to an adversary

1014
00:42:10,560 --> 00:42:13,359
which computes an image of a function it

1015
00:42:13,359 --> 00:42:15,359
should be possible to like extract a

1016
00:42:15,359 --> 00:42:18,640
pre-image from this adversary

1017
00:42:18,640 --> 00:42:20,160
so these two properties to find an

1018
00:42:20,160 --> 00:42:22,400
extractable one-way function we add on

1019
00:42:22,400 --> 00:42:25,280
the property of image verifiability

1020
00:42:25,280 --> 00:42:27,040
where it should be possible to like

1021
00:42:27,040 --> 00:42:29,920
verify efficiently and publicly whether

1022
00:42:29,920 --> 00:42:32,240
some value belongs to the image

1023
00:42:32,240 --> 00:42:34,319
of the function

1024
00:42:34,319 --> 00:42:37,359
and so we have some constructions uh so

1025
00:42:37,359 --> 00:42:39,599
in a restricted model but from very nice

1026
00:42:39,599 --> 00:42:40,800
assumptions

1027
00:42:40,800 --> 00:42:43,119
like things called delegation schemes uh

1028
00:42:43,119 --> 00:42:47,920
become like construction of uh bcpr um

1029
00:42:47,920 --> 00:42:50,160
gives you a a way off

1030
00:42:50,160 --> 00:42:52,800
uh we also have um you know

1031
00:42:52,800 --> 00:42:54,000
like from knowledge of exponents

1032
00:42:54,000 --> 00:42:55,599
assumptions uh with pairings we get

1033
00:42:55,599 --> 00:42:59,359
self's knowledge on essex and heuristics

1034
00:42:59,359 --> 00:43:01,040
signature schemes

1035
00:43:01,040 --> 00:43:03,200
um the idea being that someone who's

1036
00:43:03,200 --> 00:43:05,119
able to sign messages should know the

1037
00:43:05,119 --> 00:43:06,480
secret key

1038
00:43:06,480 --> 00:43:09,599
is sort of the idea there

1039
00:43:09,920 --> 00:43:11,280
yeah and

1040
00:43:11,280 --> 00:43:12,560
that's it thank you very much for

1041
00:43:12,560 --> 00:43:14,640
watching so please watch the full talk

1042
00:43:14,640 --> 00:43:16,560
uh and read the paper if you're

1043
00:43:16,560 --> 00:43:18,000
interested i'll be happy to take any

1044
00:43:18,000 --> 00:43:20,400
questions

1045
00:43:24,079 --> 00:43:27,119
thank you arne and yeah are there any

1046
00:43:27,119 --> 00:43:30,119
questions

1047
00:43:44,160 --> 00:43:46,799
i know

1048
00:43:51,599 --> 00:43:56,079
so i could ask a question um

1049
00:43:56,319 --> 00:43:58,480
so you have this uh

1050
00:43:58,480 --> 00:44:00,960
subversion zero knowledge construction

1051
00:44:00,960 --> 00:44:02,000
from these

1052
00:44:02,000 --> 00:44:06,040
special one-way functions

1053
00:44:06,280 --> 00:44:08,319
[Music]

1054
00:44:08,319 --> 00:44:10,240
efficiency of your

1055
00:44:10,240 --> 00:44:12,160
zero knowledge protocol

1056
00:44:12,160 --> 00:44:13,680
compared to

1057
00:44:13,680 --> 00:44:15,839
uh to those constructions that are based

1058
00:44:15,839 --> 00:44:18,800
on concrete knowledge assumptions

1059
00:44:18,800 --> 00:44:19,839
um

1060
00:44:19,839 --> 00:44:22,800
they're similar um like

1061
00:44:22,800 --> 00:44:24,480
but yeah like they have similar

1062
00:44:24,480 --> 00:44:25,520
efficiency i would say like

1063
00:44:25,520 --> 00:44:27,760
asymptotically

1064
00:44:27,760 --> 00:44:30,960
no concrete improvements

1065
00:44:32,000 --> 00:44:35,920
okay but there is no big overheads like

1066
00:44:35,920 --> 00:44:38,079
no

1067
00:44:38,160 --> 00:44:41,359
yeah there is some constant overheads

1068
00:44:41,359 --> 00:44:43,359
you need to like

1069
00:44:43,359 --> 00:44:45,760
essentially evaluate the bigger circuits

1070
00:44:45,760 --> 00:44:47,599
um but

1071
00:44:47,599 --> 00:44:50,640
no messy overhead

1072
00:44:50,640 --> 00:44:53,759
okay yeah thank you

1073
00:44:54,319 --> 00:44:56,800
all right

1074
00:44:56,800 --> 00:45:00,480
ah there is another there is

1075
00:45:00,880 --> 00:45:03,760
on the chat so do you think we could add

1076
00:45:03,760 --> 00:45:05,560
subversion

1077
00:45:05,560 --> 00:45:07,839
[Music]

1078
00:45:07,839 --> 00:45:09,200
yeah

1079
00:45:09,200 --> 00:45:11,440
to any nisk

1080
00:45:11,440 --> 00:45:13,760
um

1081
00:45:13,760 --> 00:45:16,000
i think it's

1082
00:45:16,000 --> 00:45:20,640
it's a bit tricky uh i think um

1083
00:45:21,440 --> 00:45:23,839
so we actually show you can like so our

1084
00:45:23,839 --> 00:45:25,680
approach works if you have a perfect

1085
00:45:25,680 --> 00:45:28,400
zero knowledge um and some additional

1086
00:45:28,400 --> 00:45:30,079
property

1087
00:45:30,079 --> 00:45:32,720
uh then we can like um add subversion

1088
00:45:32,720 --> 00:45:34,400
zero knowledge generically

1089
00:45:34,400 --> 00:45:37,520
but i think in general it's a bit uh

1090
00:45:37,520 --> 00:45:40,079
like you need some sort of you need some

1091
00:45:40,079 --> 00:45:42,319
structure to the crs essentially to be

1092
00:45:42,319 --> 00:45:45,839
able to like check you know that it

1093
00:45:45,839 --> 00:45:47,839
sort of looks nice

1094
00:45:47,839 --> 00:45:49,359
and i think

1095
00:45:49,359 --> 00:45:52,560
generically to any nisik is a bit

1096
00:45:52,560 --> 00:45:55,279
a bit tricky

1097
00:45:57,040 --> 00:45:58,240
okay good

1098
00:45:58,240 --> 00:45:59,599
um

1099
00:45:59,599 --> 00:46:01,440
all right thank you

1100
00:46:01,440 --> 00:46:03,760
thank you

1101
00:46:04,800 --> 00:46:05,599
uh

1102
00:46:05,599 --> 00:46:08,319
no questions

1103
00:46:08,480 --> 00:46:10,319
no doesn't look like it so yeah thank

1104
00:46:10,319 --> 00:46:11,760
you anna

1105
00:46:11,760 --> 00:46:15,200
um so we'll move on to the next talk the

1106
00:46:15,200 --> 00:46:18,160
last talk for this session which is um

1107
00:46:18,160 --> 00:46:20,800
titled chain reductions for multi

1108
00:46:20,800 --> 00:46:23,520
signatures

1109
00:46:25,040 --> 00:46:27,200
hp mask scheme

1110
00:46:27,200 --> 00:46:30,319
by mirror and white dice and speaker is

1111
00:46:30,319 --> 00:46:32,880
waiter

1112
00:46:33,920 --> 00:46:35,359
thanks for introduction can you guys

1113
00:46:35,359 --> 00:46:37,680
hear me

1114
00:46:38,079 --> 00:46:41,839
yes okay so i'll start so my talk is on

1115
00:46:41,839 --> 00:46:43,760
train reduction multi signatures and the

1116
00:46:43,760 --> 00:46:45,599
hbms scheme and destroy and work with

1117
00:46:45,599 --> 00:46:47,599
meteor bilari

1118
00:46:47,599 --> 00:46:48,480
so

1119
00:46:48,480 --> 00:46:50,240
multi signatures allow a group of

1120
00:46:50,240 --> 00:46:52,240
signers to collectively endorse on a

1121
00:46:52,240 --> 00:46:54,480
column message with a short signature

1122
00:46:54,480 --> 00:46:56,880
and we want independent key generation

1123
00:46:56,880 --> 00:46:59,440
by every single party this means that we

1124
00:46:59,440 --> 00:47:02,079
we don't want them to have to run a key

1125
00:47:02,079 --> 00:47:03,359
generation

1126
00:47:03,359 --> 00:47:05,200
protocol

1127
00:47:05,200 --> 00:47:06,960
and signing it's it's a multi-run

1128
00:47:06,960 --> 00:47:09,599
protocol between any group of signers

1129
00:47:09,599 --> 00:47:12,000
taking inputs of message and the list of

1130
00:47:12,000 --> 00:47:13,920
signers to eventually output the

1131
00:47:13,920 --> 00:47:15,839
signature which will require to be short

1132
00:47:15,839 --> 00:47:19,280
meaning that it should be um

1133
00:47:19,280 --> 00:47:21,280
it should not depend on the length of

1134
00:47:21,280 --> 00:47:23,440
the number of parties

1135
00:47:23,440 --> 00:47:25,680
and verification takes in the list of

1136
00:47:25,680 --> 00:47:28,400
parties a message and a signature to to

1137
00:47:28,400 --> 00:47:30,079
return a boolean value

1138
00:47:30,079 --> 00:47:33,440
and additionally we ask for uh optional

1139
00:47:33,440 --> 00:47:35,359
key generation as a feature which means

1140
00:47:35,359 --> 00:47:37,200
that there should be algorithm taking an

1141
00:47:37,200 --> 00:47:39,440
input a list of public keys to output

1142
00:47:39,440 --> 00:47:42,160
the short aggregate public key

1143
00:47:42,160 --> 00:47:44,559
and against this

1144
00:47:44,559 --> 00:47:45,599
again this

1145
00:47:45,599 --> 00:47:47,599
aggregated public key there should be a

1146
00:47:47,599 --> 00:47:50,240
verification that

1147
00:47:50,240 --> 00:47:51,839
takes into account a public key instead

1148
00:47:51,839 --> 00:47:54,559
of the list of keys

1149
00:47:54,559 --> 00:47:55,359
so

1150
00:47:55,359 --> 00:47:57,839
here's a brief history on uh multi

1151
00:47:57,839 --> 00:47:58,960
signatures

1152
00:47:58,960 --> 00:48:00,800
it was first kind of proposed back in

1153
00:48:00,800 --> 00:48:02,480
the 80s and the earlier constructions

1154
00:48:02,480 --> 00:48:04,400
with multi-signatures were

1155
00:48:04,400 --> 00:48:07,760
insecure and suspected to rocky attacks

1156
00:48:07,760 --> 00:48:10,000
and and there's the earlier approaches

1157
00:48:10,000 --> 00:48:12,079
kind of it does not fit uh what we

1158
00:48:12,079 --> 00:48:15,359
described before and and and so the

1159
00:48:15,359 --> 00:48:18,079
more recent schemes kind of base uh are

1160
00:48:18,079 --> 00:48:21,119
more based on these um

1161
00:48:21,119 --> 00:48:23,200
the the scheme by larry nevin proposed

1162
00:48:23,200 --> 00:48:25,440
in 2006 which is a the out based scheme

1163
00:48:25,440 --> 00:48:27,520
that was stay secure in the plain public

1164
00:48:27,520 --> 00:48:28,559
key model

1165
00:48:28,559 --> 00:48:30,559
and more recently within the past uh

1166
00:48:30,559 --> 00:48:32,240
three four years there's been resurgence

1167
00:48:32,240 --> 00:48:34,720
of interest on multi signatures due to

1168
00:48:34,720 --> 00:48:36,480
their application blocking settings in

1169
00:48:36,480 --> 00:48:37,920
particular

1170
00:48:37,920 --> 00:48:40,000
to multi-signature wallets and as well

1171
00:48:40,000 --> 00:48:40,880
as to

1172
00:48:40,880 --> 00:48:42,720
in this consistent setting to generate

1173
00:48:42,720 --> 00:48:45,599
short certificates of finalized states

1174
00:48:45,599 --> 00:48:46,400
and

1175
00:48:46,400 --> 00:48:49,200
and in this setting we want uh

1176
00:48:49,200 --> 00:48:51,040
this particular list of features

1177
00:48:51,040 --> 00:48:53,200
and we want efficient multi-signature

1178
00:48:53,200 --> 00:48:55,520
schemes over common curve groups without

1179
00:48:55,520 --> 00:48:56,720
pairings

1180
00:48:56,720 --> 00:48:59,119
and now they should be secure uh in the

1181
00:48:59,119 --> 00:49:01,119
plain public key model and i will not

1182
00:49:01,119 --> 00:49:04,000
formally introduce the green notion here

1183
00:49:04,000 --> 00:49:06,400
and additionally we want the

1184
00:49:06,400 --> 00:49:10,000
two features of having a key aggregation

1185
00:49:10,000 --> 00:49:11,359
as well as

1186
00:49:11,359 --> 00:49:13,920
this the scheme should support two-run

1187
00:49:13,920 --> 00:49:15,280
signing

1188
00:49:15,280 --> 00:49:17,200
and within the past two three years

1189
00:49:17,200 --> 00:49:18,720
there's been a lot a lot of schemes has

1190
00:49:18,720 --> 00:49:22,559
proposed such as uh music music two and

1191
00:49:22,559 --> 00:49:25,760
uh also uh dwms

1192
00:49:25,760 --> 00:49:27,599
and so these are schemes that support

1193
00:49:27,599 --> 00:49:30,079
the irrigation and have to run signing

1194
00:49:30,079 --> 00:49:32,319
however actually

1195
00:49:32,319 --> 00:49:33,839
um

1196
00:49:33,839 --> 00:49:35,359
these schemes do come at the cost in

1197
00:49:35,359 --> 00:49:37,520
that their their concrete and provable

1198
00:49:37,520 --> 00:49:41,040
security uh it's it's at contention with

1199
00:49:41,040 --> 00:49:42,880
with the the feature that they're adding

1200
00:49:42,880 --> 00:49:45,760
so so let me elaborate on um

1201
00:49:45,760 --> 00:49:47,359
the the kind of the current landscape of

1202
00:49:47,359 --> 00:49:52,160
this and the analogy is is really the

1203
00:49:52,720 --> 00:49:55,760
best summarize in the picture and and

1204
00:49:55,760 --> 00:49:58,800
so so here's the dial tree uh

1205
00:49:58,800 --> 00:50:00,720
and there's some fruits hanging on it

1206
00:50:00,720 --> 00:50:03,440
and the previous workout of this form

1207
00:50:03,440 --> 00:50:04,960
they said that hey look we discovered

1208
00:50:04,960 --> 00:50:06,400
some nice roots

1209
00:50:06,400 --> 00:50:08,720
somehow hanging from the bl tree meaning

1210
00:50:08,720 --> 00:50:10,480
that uh they're somehow hanging from the

1211
00:50:10,480 --> 00:50:12,800
dl3 means that there's reduction from

1212
00:50:12,800 --> 00:50:14,720
the hardness of dl to the

1213
00:50:14,720 --> 00:50:16,400
unforgivably of the signature schemes

1214
00:50:16,400 --> 00:50:18,160
however these reductions are not tight

1215
00:50:18,160 --> 00:50:19,680
so they're just somehow hanging on the

1216
00:50:19,680 --> 00:50:21,440
l3

1217
00:50:21,440 --> 00:50:22,240
and

1218
00:50:22,240 --> 00:50:24,800
our results instead shows the following

1219
00:50:24,800 --> 00:50:26,960
we said that hey look so these are very

1220
00:50:26,960 --> 00:50:29,520
there's some very solid branches that

1221
00:50:29,520 --> 00:50:31,520
attach to the main trunk of the tree

1222
00:50:31,520 --> 00:50:33,680
which is the dl problem

1223
00:50:33,680 --> 00:50:35,760
and that these fruits these schemes are

1224
00:50:35,760 --> 00:50:36,960
actually tightly attached to the

1225
00:50:36,960 --> 00:50:38,400
branches

1226
00:50:38,400 --> 00:50:40,319
but by tightly attached to the branches

1227
00:50:40,319 --> 00:50:42,319
i mean that's um

1228
00:50:42,319 --> 00:50:43,920
the the

1229
00:50:43,920 --> 00:50:45,599
security of the schemes and the hardness

1230
00:50:45,599 --> 00:50:46,720
of the problem they're attached to are

1231
00:50:46,720 --> 00:50:48,559
actually tied to the equivalent

1232
00:50:48,559 --> 00:50:50,880
uh in the runway model and furthermore

1233
00:50:50,880 --> 00:50:53,040
we will additionally add a scheme that

1234
00:50:53,040 --> 00:50:54,960
is um

1235
00:50:54,960 --> 00:50:57,680
two rounds and supports key aggregation

1236
00:50:57,680 --> 00:51:00,399
and um

1237
00:51:00,559 --> 00:51:02,480
and this end is secure against the the

1238
00:51:02,480 --> 00:51:04,400
kind of the the new assumption that we

1239
00:51:04,400 --> 00:51:07,119
that we propose and so here the bn

1240
00:51:07,119 --> 00:51:09,359
scheme and the music scene are both the

1241
00:51:09,359 --> 00:51:10,480
three rounds

1242
00:51:10,480 --> 00:51:12,000
schemes

1243
00:51:12,000 --> 00:51:14,480
so so let me get more into detail of our

1244
00:51:14,480 --> 00:51:15,520
results

1245
00:51:15,520 --> 00:51:18,079
so for for bm music which

1246
00:51:18,079 --> 00:51:21,119
are both three round schemes

1247
00:51:21,119 --> 00:51:23,280
whereas previous results uh in the

1248
00:51:23,280 --> 00:51:26,559
standard model can only give us uh

1249
00:51:26,559 --> 00:51:30,000
80 up to 86 or 51 bit of security if you

1250
00:51:30,000 --> 00:51:31,839
instantiate it with uh you know groups

1251
00:51:31,839 --> 00:51:34,000
that we use in practice our results

1252
00:51:34,000 --> 00:51:36,559
allows us to argue

1253
00:51:36,559 --> 00:51:38,640
that even even in the center model

1254
00:51:38,640 --> 00:51:41,119
there's assumptions that we can assume

1255
00:51:41,119 --> 00:51:44,480
to be able to argue 120 base security

1256
00:51:44,480 --> 00:51:45,920
and furthermore

1257
00:51:45,920 --> 00:51:47,599
our results

1258
00:51:47,599 --> 00:51:49,680
essentially yield agm proof which is not

1259
00:51:49,680 --> 00:51:52,079
surprising uh that that shows that the

1260
00:51:52,079 --> 00:51:54,000
security of these schemes are our eyes

1261
00:51:54,000 --> 00:51:57,280
um as hard as sdl essentially

1262
00:51:57,280 --> 00:51:59,040
and in terms of two-round signature

1263
00:51:59,040 --> 00:52:00,640
schemes we

1264
00:52:00,640 --> 00:52:01,920
improve on

1265
00:52:01,920 --> 00:52:04,800
uh the the kind of

1266
00:52:04,800 --> 00:52:07,119
the the set of affairs um compared to

1267
00:52:07,119 --> 00:52:09,359
music two and digital ms which are very

1268
00:52:09,359 --> 00:52:11,359
recent schemes presented in uh crypto

1269
00:52:11,359 --> 00:52:13,440
this year our scheme

1270
00:52:13,440 --> 00:52:16,559
uh it's as efficient as as the power

1271
00:52:16,559 --> 00:52:17,599
schemes

1272
00:52:17,599 --> 00:52:18,720
and additionally it's the first game

1273
00:52:18,720 --> 00:52:20,240
that can be proved secure in the

1274
00:52:20,240 --> 00:52:21,520
standard model

1275
00:52:21,520 --> 00:52:25,119
and uh it is tightly secured in agm

1276
00:52:25,119 --> 00:52:26,160
so

1277
00:52:26,160 --> 00:52:30,240
whereas uh music two and wms are not uh

1278
00:52:30,240 --> 00:52:32,160
the most efficient version of them do

1279
00:52:32,160 --> 00:52:34,559
not have standard model proofs and the

1280
00:52:34,559 --> 00:52:38,000
agm proves relies on

1281
00:52:38,000 --> 00:52:40,240
reduction from omdl

1282
00:52:40,240 --> 00:52:41,839
and uh additionally the proofs are

1283
00:52:41,839 --> 00:52:42,960
actually

1284
00:52:42,960 --> 00:52:44,480
still outside even

1285
00:52:44,480 --> 00:52:46,480
with throne assumptions

1286
00:52:46,480 --> 00:52:47,760
so

1287
00:52:47,760 --> 00:52:49,920
our results actually says more we can

1288
00:52:49,920 --> 00:52:51,359
claim

1289
00:52:51,359 --> 00:52:52,880
that if

1290
00:52:52,880 --> 00:52:55,200
for example if the insecure then so is

1291
00:52:55,200 --> 00:52:57,680
music or if if music secured then starts

1292
00:52:57,680 --> 00:53:00,079
a new scheme hbms

1293
00:53:00,079 --> 00:53:02,800
and the reason why we can claim these

1294
00:53:02,800 --> 00:53:04,319
results is that

1295
00:53:04,319 --> 00:53:06,400
we give strain reductions

1296
00:53:06,400 --> 00:53:07,280
meaning

1297
00:53:07,280 --> 00:53:09,839
we provide a chain of reduction from

1298
00:53:09,839 --> 00:53:11,920
from dl all the way to the security of

1299
00:53:11,920 --> 00:53:13,520
the of the scheme

1300
00:53:13,520 --> 00:53:16,480
and with the two important properties

1301
00:53:16,480 --> 00:53:19,200
the first part of the reduction we have

1302
00:53:19,200 --> 00:53:22,000
to make some sacrifice so we either work

1303
00:53:22,000 --> 00:53:24,559
in a standard model but provide a

1304
00:53:24,559 --> 00:53:27,119
downtime reduction or we work in agm and

1305
00:53:27,119 --> 00:53:29,280
provide tie reduction

1306
00:53:29,280 --> 00:53:30,960
and for the second part of reduction

1307
00:53:30,960 --> 00:53:32,319
meaning from the intermediate heart

1308
00:53:32,319 --> 00:53:34,000
problem to the security of the scheme we

1309
00:53:34,000 --> 00:53:35,760
do not make any compromises meaning we

1310
00:53:35,760 --> 00:53:38,319
make a tight reduction uh and internet

1311
00:53:38,319 --> 00:53:40,559
model and here a bit of a disclaimer by

1312
00:53:40,559 --> 00:53:43,359
standard model i i i mean uh rhetorical

1313
00:53:43,359 --> 00:53:46,160
model uh as so

1314
00:53:46,160 --> 00:53:47,839
we're not making idealized assumptions

1315
00:53:47,839 --> 00:53:49,119
on the group

1316
00:53:49,119 --> 00:53:50,720
and additionally we'll like to you know

1317
00:53:50,720 --> 00:53:52,079
have this intermediate problem be

1318
00:53:52,079 --> 00:53:53,280
reusable

1319
00:53:53,280 --> 00:53:54,559
so

1320
00:53:54,559 --> 00:53:55,359
um

1321
00:53:55,359 --> 00:53:56,480
to

1322
00:53:56,480 --> 00:53:58,400
kind of describe our results in in one

1323
00:53:58,400 --> 00:54:01,119
slide this is uh the formal uh result

1324
00:54:01,119 --> 00:54:04,240
that we don't have shown the new problem

1325
00:54:04,240 --> 00:54:06,000
x idl is

1326
00:54:06,000 --> 00:54:07,280
the random target identification

1327
00:54:07,280 --> 00:54:09,200
logarithm problem which is the extension

1328
00:54:09,200 --> 00:54:11,440
to the idle problem that was proposed uh

1329
00:54:11,440 --> 00:54:14,240
by kielsbasni and pen back in 2016.

1330
00:54:14,240 --> 00:54:15,280
and

1331
00:54:15,280 --> 00:54:17,200
from that problem we're able to show

1332
00:54:17,200 --> 00:54:18,800
that the hardness of that problem in a

1333
00:54:18,800 --> 00:54:20,400
group is equivalent to the unfortunately

1334
00:54:20,400 --> 00:54:23,520
of music the through honor version

1335
00:54:23,520 --> 00:54:24,400
and

1336
00:54:24,400 --> 00:54:26,559
from there we're also able to prove in

1337
00:54:26,559 --> 00:54:28,480
standard model that our new scheme is

1338
00:54:28,480 --> 00:54:30,960
secure and our new scheme is uh

1339
00:54:30,960 --> 00:54:32,880
two rounds improving compound through on

1340
00:54:32,880 --> 00:54:34,400
virtual music

1341
00:54:34,400 --> 00:54:36,720
and furthermore our new scheme is secure

1342
00:54:36,720 --> 00:54:39,760
uh tightly from dl in agm

1343
00:54:39,760 --> 00:54:42,559
and with that i think oh

1344
00:54:42,559 --> 00:54:44,640
thank you for your attention and take

1345
00:54:44,640 --> 00:54:47,040
questions

1346
00:54:51,200 --> 00:54:54,640
thank you away thanks um

1347
00:54:54,640 --> 00:54:57,599
are there any questions for a way

1348
00:54:57,599 --> 00:55:00,920
or comments

1349
00:55:07,520 --> 00:55:08,960
um

1350
00:55:08,960 --> 00:55:10,240
no

1351
00:55:10,240 --> 00:55:12,559
and

1352
00:55:12,559 --> 00:55:16,400
maybe i can ask a question so

1353
00:55:16,400 --> 00:55:21,799
so you have this new x idl problem

1354
00:55:23,680 --> 00:55:25,839
the non-evidence for the hands of this

1355
00:55:25,839 --> 00:55:27,680
problem

1356
00:55:27,680 --> 00:55:29,119
yeah so

1357
00:55:29,119 --> 00:55:31,760
in the stator model it's by a broken

1358
00:55:31,760 --> 00:55:34,720
lumbar reduction from idl and

1359
00:55:34,720 --> 00:55:37,119
so so so there is a reduction from other

1360
00:55:37,119 --> 00:55:38,720
from dl but we

1361
00:55:38,720 --> 00:55:40,400
uh so yeah so in the center model we

1362
00:55:40,400 --> 00:55:42,240
know that essentially if by via two

1363
00:55:42,240 --> 00:55:43,599
applications of four kilometer we know

1364
00:55:43,599 --> 00:55:46,079
that it's tyler is related to dl and in

1365
00:55:46,079 --> 00:55:48,559
the agm uh the we actually have a tie

1366
00:55:48,559 --> 00:55:50,400
reduction so

1367
00:55:50,400 --> 00:55:52,400
uh i mean

1368
00:55:52,400 --> 00:55:54,960
the kind of gist of the is that for you

1369
00:55:54,960 --> 00:55:57,599
know groups in practice probably xidl

1370
00:55:57,599 --> 00:56:00,400
uh should be viewed as hard uh as sdl

1371
00:56:00,400 --> 00:56:02,160
because you know we you know for a

1372
00:56:02,160 --> 00:56:04,079
little curves for example

1373
00:56:04,079 --> 00:56:06,319
um

1374
00:56:06,799 --> 00:56:09,200
right so i guess in that sense it's not

1375
00:56:09,200 --> 00:56:10,319
um

1376
00:56:10,319 --> 00:56:12,559
not the same as omdl which was discussed

1377
00:56:12,559 --> 00:56:15,280
in the previous talk uh in this session

1378
00:56:15,280 --> 00:56:18,559
the the the reduction

1379
00:56:18,559 --> 00:56:20,960
from dll does holding agm which makes it

1380
00:56:20,960 --> 00:56:23,359
uh a lot easier so so if the reduction

1381
00:56:23,359 --> 00:56:24,160
holds

1382
00:56:24,160 --> 00:56:26,640
uh you know from dealing hdn we know

1383
00:56:26,640 --> 00:56:29,040
that it is also hard in a generic group

1384
00:56:29,040 --> 00:56:31,839
model

1385
00:56:32,000 --> 00:56:34,480
okay and so the reduction is tight in

1386
00:56:34,480 --> 00:56:36,079
the atm

1387
00:56:36,079 --> 00:56:37,200
yes

1388
00:56:37,200 --> 00:56:37,550
okay

1389
00:56:37,550 --> 00:56:43,200
[Music]

1390
00:56:43,200 --> 00:56:45,200
thank you um

1391
00:56:45,200 --> 00:56:49,040
and uh can i also ask about uh

1392
00:56:49,040 --> 00:56:52,799
comparing your scheme the hbms scheme to

1393
00:56:52,799 --> 00:56:55,119
music too

1394
00:56:55,119 --> 00:56:56,480
um

1395
00:56:56,480 --> 00:56:59,119
so i i i think uh

1396
00:56:59,119 --> 00:57:00,200
you have some

1397
00:57:00,200 --> 00:57:03,399
[Music]

1398
00:57:03,520 --> 00:57:07,040
improvement versus music too

1399
00:57:07,040 --> 00:57:09,280
there's no efficient improvements

1400
00:57:09,280 --> 00:57:12,400
so compared to music too actually so

1401
00:57:12,400 --> 00:57:13,200
um

1402
00:57:13,200 --> 00:57:15,599
the efficiency is relatively similar the

1403
00:57:15,599 --> 00:57:17,760
only difference is that uh i guess it's

1404
00:57:17,760 --> 00:57:20,480
downside of for for our scheme so music

1405
00:57:20,480 --> 00:57:22,400
2 actually generates a short signature

1406
00:57:22,400 --> 00:57:23,680
so it's kind of compatible with the

1407
00:57:23,680 --> 00:57:24,960
station infrastructure whereas our

1408
00:57:24,960 --> 00:57:26,480
scheme changes the

1409
00:57:26,480 --> 00:57:27,440
uh

1410
00:57:27,440 --> 00:57:28,960
it's no longer compatible with storage

1411
00:57:28,960 --> 00:57:30,799
signatures

1412
00:57:30,799 --> 00:57:32,799
however so the the main the main gain is

1413
00:57:32,799 --> 00:57:33,680
that

1414
00:57:33,680 --> 00:57:35,920
we were able to prove uh security

1415
00:57:35,920 --> 00:57:38,160
tightly in agm and also

1416
00:57:38,160 --> 00:57:39,200
uh

1417
00:57:39,200 --> 00:57:42,720
security from um in in the center model

1418
00:57:42,720 --> 00:57:44,079
from from dl

1419
00:57:44,079 --> 00:57:46,240
which is not previously possible for any

1420
00:57:46,240 --> 00:57:47,599
of the two rounds multi-signature

1421
00:57:47,599 --> 00:57:48,880
schemes so it was only possible for

1422
00:57:48,880 --> 00:57:49,920
three rounds

1423
00:57:49,920 --> 00:57:52,400
and moving to two rounds with this music

1424
00:57:52,400 --> 00:57:55,839
two and wms they had to sacrifice uh

1425
00:57:55,839 --> 00:57:58,000
essentially security to be able to push

1426
00:57:58,000 --> 00:58:00,000
to run through and our scheme is the

1427
00:58:00,000 --> 00:58:02,000
first scene that

1428
00:58:02,000 --> 00:58:04,000
we argued you know does not sacrifice

1429
00:58:04,000 --> 00:58:06,240
security but still obtains two rounds

1430
00:58:06,240 --> 00:58:08,240
but in the process we kind of give up on

1431
00:58:08,240 --> 00:58:11,359
compatibility with schnorr

1432
00:58:13,440 --> 00:58:16,160
relatively the same

1433
00:58:16,160 --> 00:58:18,079
so for music two

1434
00:58:18,079 --> 00:58:20,319
you cannot do any reduction in the

1435
00:58:20,319 --> 00:58:22,319
standard

1436
00:58:22,319 --> 00:58:24,240
uh there is a reduction i believe for so

1437
00:58:24,240 --> 00:58:25,520
there are there are schemes

1438
00:58:25,520 --> 00:58:27,119
parameterized so i think if you go to a

1439
00:58:27,119 --> 00:58:28,400
previous table

1440
00:58:28,400 --> 00:58:29,440
um

1441
00:58:29,440 --> 00:58:31,760
let's see sorry

1442
00:58:31,760 --> 00:58:34,000
uh so so their scheme is parameterized

1443
00:58:34,000 --> 00:58:36,079
the the the if the primers are big

1444
00:58:36,079 --> 00:58:37,920
enough then i believe they they actually

1445
00:58:37,920 --> 00:58:40,799
provide the standard model reduction uh

1446
00:58:40,799 --> 00:58:44,400
from omdl but if the parameter is small

1447
00:58:44,400 --> 00:58:46,319
which is you know make it more efficient

1448
00:58:46,319 --> 00:58:48,720
but but in that case they don't have a

1449
00:58:48,720 --> 00:58:50,319
standard model reduction they rely on

1450
00:58:50,319 --> 00:58:52,400
agm

1451
00:58:52,400 --> 00:58:54,559
okay

1452
00:58:54,559 --> 00:58:56,319
and your scheme doesn't have this

1453
00:58:56,319 --> 00:58:58,799
parameter

1454
00:58:58,799 --> 00:58:59,920
no

1455
00:58:59,920 --> 00:59:03,319
right it's

1456
00:59:05,680 --> 00:59:08,000
okay yeah all right thank you

1457
00:59:08,000 --> 00:59:08,960
um

1458
00:59:08,960 --> 00:59:13,599
so are there any other questions or

1459
00:59:13,599 --> 00:59:16,599
um

1460
00:59:18,079 --> 00:59:18,880
no

1461
00:59:18,880 --> 00:59:20,720
um

1462
00:59:20,720 --> 00:59:23,200
looks like

1463
00:59:24,880 --> 00:59:26,960
another question so

1464
00:59:26,960 --> 00:59:29,680
so thank you way um

1465
00:59:29,680 --> 00:59:32,160
and yeah i think this concludes this

1466
00:59:32,160 --> 00:59:34,559
concludes the session so

1467
00:59:34,559 --> 00:59:36,720
thank you and i think in half an hour

1468
00:59:36,720 --> 00:59:39,680
the next sessions will start

1469
00:59:39,680 --> 00:59:43,640
so see you then

