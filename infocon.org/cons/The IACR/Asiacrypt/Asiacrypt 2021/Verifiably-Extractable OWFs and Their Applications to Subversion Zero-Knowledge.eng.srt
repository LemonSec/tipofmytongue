1
00:00:00,640 --> 00:00:03,520
good day my name is antobias erdegor

2
00:00:03,520 --> 00:00:04,880
i will be presenting the paper

3
00:00:04,880 --> 00:00:07,359
verifiably extractable one-way functions

4
00:00:07,359 --> 00:00:08,960
and their applications to subversion

5
00:00:08,960 --> 00:00:11,200
serial knowledge a paper accepted to

6
00:00:11,200 --> 00:00:13,679
asia crypt 2021

7
00:00:13,679 --> 00:00:16,640
my co-authors are pursuitfelty hegelitma

8
00:00:16,640 --> 00:00:20,240
janosim and mikhail

9
00:00:20,560 --> 00:00:22,400
so i'll start by giving some intuition

10
00:00:22,400 --> 00:00:24,480
about the setting where

11
00:00:24,480 --> 00:00:25,760
we're in and the problems we're trying

12
00:00:25,760 --> 00:00:27,760
to solve

13
00:00:27,760 --> 00:00:30,000
so non-interactive proofs is a nice

14
00:00:30,000 --> 00:00:33,760
primitive to have in cryptography

15
00:00:33,760 --> 00:00:34,719
so

16
00:00:34,719 --> 00:00:37,360
we're in a setting where the prover cat

17
00:00:37,360 --> 00:00:39,840
who knows the statement x as well as

18
00:00:39,840 --> 00:00:41,840
some private

19
00:00:41,840 --> 00:00:43,360
witness w

20
00:00:43,360 --> 00:00:45,600
which certifies that x is the true

21
00:00:45,600 --> 00:00:47,840
statement

22
00:00:47,840 --> 00:00:50,879
wants to convince the verifier white cat

23
00:00:50,879 --> 00:00:52,320
about the truth of this statement

24
00:00:52,320 --> 00:00:55,280
without revealing its with its witness

25
00:00:55,280 --> 00:00:56,239
to the

26
00:00:56,239 --> 00:00:59,280
white cat so the what we would like to

27
00:00:59,280 --> 00:01:01,760
do is that the

28
00:01:01,760 --> 00:01:03,680
prover cat you know called some

29
00:01:03,680 --> 00:01:05,119
algorithm proof

30
00:01:05,119 --> 00:01:06,720
uh on you know the statement and the

31
00:01:06,720 --> 00:01:08,320
witness and outputs

32
00:01:08,320 --> 00:01:10,159
approved pi and sends this to the

33
00:01:10,159 --> 00:01:12,880
verifier cat verifier cat can then check

34
00:01:12,880 --> 00:01:14,479
you know is this

35
00:01:14,479 --> 00:01:16,400
proof i should accept or reject using

36
00:01:16,400 --> 00:01:20,000
some verify algorithm

37
00:01:20,000 --> 00:01:22,720
and so we want this system to have some

38
00:01:22,720 --> 00:01:24,640
desirable properties

39
00:01:24,640 --> 00:01:26,720
namely completeness soundness and zero

40
00:01:26,720 --> 00:01:29,520
knowledge so completeness is saying that

41
00:01:29,520 --> 00:01:31,280
uh you know if the prover cat is

42
00:01:31,280 --> 00:01:33,759
behaving honestly as it creates uh you

43
00:01:33,759 --> 00:01:35,439
know a valid proof

44
00:01:35,439 --> 00:01:37,200
um you know from the statement and the

45
00:01:37,200 --> 00:01:39,360
witness then this should be accepted by

46
00:01:39,360 --> 00:01:42,079
the verifier cat

47
00:01:42,079 --> 00:01:44,960
soundness that states that okay if

48
00:01:44,960 --> 00:01:46,880
the pervert cat is being dishonest so

49
00:01:46,880 --> 00:01:48,399
it's trying to prove something that's

50
00:01:48,399 --> 00:01:49,600
not true

51
00:01:49,600 --> 00:01:53,119
then they should not be accepted

52
00:01:53,119 --> 00:01:54,880
and serial knowledge is finally saying

53
00:01:54,880 --> 00:01:55,920
that

54
00:01:55,920 --> 00:01:57,759
the proof reveals

55
00:01:57,759 --> 00:01:59,520
nothing more than the fact that the

56
00:01:59,520 --> 00:02:01,600
statement is true

57
00:02:01,600 --> 00:02:02,960
and important it does not reveal

58
00:02:02,960 --> 00:02:05,040
anything about the witness

59
00:02:05,040 --> 00:02:06,799
used

60
00:02:06,799 --> 00:02:08,479
now certainly this does not exist in the

61
00:02:08,479 --> 00:02:10,160
plain model it's an only possibility

62
00:02:10,160 --> 00:02:12,640
result

63
00:02:12,879 --> 00:02:15,520
so you need to bypass this somehow

64
00:02:15,520 --> 00:02:18,080
and one way to do this is to work in the

65
00:02:18,080 --> 00:02:20,400
crs model or common reference string

66
00:02:20,400 --> 00:02:21,360
model

67
00:02:21,360 --> 00:02:23,440
so this is a model where the approver

68
00:02:23,440 --> 00:02:25,200
and the verifier share some common

69
00:02:25,200 --> 00:02:27,680
reference string generated by a trusted

70
00:02:27,680 --> 00:02:29,760
third party

71
00:02:29,760 --> 00:02:32,319
and use this to you know do the proving

72
00:02:32,319 --> 00:02:34,080
and verification

73
00:02:34,080 --> 00:02:34,840
of

74
00:02:34,840 --> 00:02:38,640
their of the statements

75
00:02:38,720 --> 00:02:40,640
uh so then you can get non-interactive

76
00:02:40,640 --> 00:02:44,560
zero knowledge or nisik in the crs model

77
00:02:44,560 --> 00:02:47,040
uh and note that yeah

78
00:02:47,040 --> 00:02:48,959
so in this case we can actually achieve

79
00:02:48,959 --> 00:02:50,560
completeness soundness and zero

80
00:02:50,560 --> 00:02:53,360
knowledge as long as the

81
00:02:53,360 --> 00:02:56,160
third party that generated the crs was

82
00:02:56,160 --> 00:02:59,120
behaving honestly

83
00:02:59,840 --> 00:03:01,360
now

84
00:03:01,360 --> 00:03:03,599
so this relies on a trusted third party

85
00:03:03,599 --> 00:03:06,159
but they do not really exist in the real

86
00:03:06,159 --> 00:03:07,040
world

87
00:03:07,040 --> 00:03:08,480
so can we

88
00:03:08,480 --> 00:03:11,040
in case uh you know the third party is

89
00:03:11,040 --> 00:03:13,599
not trusted you know it's some you know

90
00:03:13,599 --> 00:03:15,440
good for nothing cat that

91
00:03:15,440 --> 00:03:16,800
you know is in conflict with the other

92
00:03:16,800 --> 00:03:18,800
two cats

93
00:03:18,800 --> 00:03:21,120
is it still possible to that we can

94
00:03:21,120 --> 00:03:24,319
achieve some guarantees

95
00:03:24,720 --> 00:03:27,360
so that is the sort of basis of

96
00:03:27,360 --> 00:03:29,680
our paper

97
00:03:29,680 --> 00:03:32,640
so what can we now achieve you know if

98
00:03:32,640 --> 00:03:35,840
we allow for the crs to be subverted by

99
00:03:35,840 --> 00:03:37,599
this third party

100
00:03:37,599 --> 00:03:40,239
so if we require that both soundness and

101
00:03:40,239 --> 00:03:41,519
zero knowledge

102
00:03:41,519 --> 00:03:43,920
should remain

103
00:03:43,920 --> 00:03:45,680
in the case where the crs is inverted

104
00:03:45,680 --> 00:03:47,040
okay we have

105
00:03:47,040 --> 00:03:48,959
properties of subversion soundness and

106
00:03:48,959 --> 00:03:50,799
subversion zero knowledge this is

107
00:03:50,799 --> 00:03:53,040
impossible

108
00:03:53,040 --> 00:03:55,599
and similarly if we just want subversion

109
00:03:55,599 --> 00:03:58,720
soundness but ordinary zero knowledge so

110
00:03:58,720 --> 00:04:01,680
we let the serial knowledge property

111
00:04:01,680 --> 00:04:03,360
go if

112
00:04:03,360 --> 00:04:04,400
the

113
00:04:04,400 --> 00:04:06,080
crs was subverted

114
00:04:06,080 --> 00:04:08,080
this is still impossible

115
00:04:08,080 --> 00:04:09,920
now it is possible to get subversion

116
00:04:09,920 --> 00:04:12,159
soundness and a privacy preserving

117
00:04:12,159 --> 00:04:13,200
property

118
00:04:13,200 --> 00:04:14,480
known as subversion witness

119
00:04:14,480 --> 00:04:16,000
indistinguishability

120
00:04:16,000 --> 00:04:18,160
which is essentially saying that

121
00:04:18,160 --> 00:04:20,560
even if the crs is subverted no

122
00:04:20,560 --> 00:04:22,639
adversary can tell

123
00:04:22,639 --> 00:04:24,639
two proofs of the same statement but

124
00:04:24,639 --> 00:04:28,919
with different witnesses apart

125
00:04:29,440 --> 00:04:30,960
so we will not focus on that in this

126
00:04:30,960 --> 00:04:33,360
paper our focus will be on subversion

127
00:04:33,360 --> 00:04:35,840
zero knowledge and soundness

128
00:04:35,840 --> 00:04:36,639
so

129
00:04:36,639 --> 00:04:38,720
if the crs is

130
00:04:38,720 --> 00:04:42,000
maliciously generated

131
00:04:42,479 --> 00:04:44,479
even in this case the serial knowledge

132
00:04:44,479 --> 00:04:47,599
property should remain

133
00:04:47,680 --> 00:04:49,919
the sanders property will hold if the

134
00:04:49,919 --> 00:04:53,520
crs was honestly generated but will fail

135
00:04:53,520 --> 00:04:56,080
or might fail if the crs is maliciously

136
00:04:56,080 --> 00:04:57,440
generated

137
00:04:57,440 --> 00:05:00,479
and so the key question of our paper

138
00:05:00,479 --> 00:05:01,680
is

139
00:05:01,680 --> 00:05:03,440
under which assumptions

140
00:05:03,440 --> 00:05:05,440
can subversion zero knowledge be

141
00:05:05,440 --> 00:05:07,520
achieved

142
00:05:07,520 --> 00:05:09,759
that is the fundamental question that we

143
00:05:09,759 --> 00:05:11,759
tried to answer in this paper

144
00:05:11,759 --> 00:05:13,039
allah gave a slightly more proper

145
00:05:13,039 --> 00:05:14,720
definition of subversion serial

146
00:05:14,720 --> 00:05:17,039
knowledge genesics so it consists of

147
00:05:17,039 --> 00:05:19,440
five main algorithms and has three main

148
00:05:19,440 --> 00:05:20,960
defining properties

149
00:05:20,960 --> 00:05:23,039
so the algorithms are

150
00:05:23,039 --> 00:05:25,440
a generate crs algorithm

151
00:05:25,440 --> 00:05:28,160
a prove algorithm to prove statements

152
00:05:28,160 --> 00:05:30,639
verify algorithm to verify statements

153
00:05:30,639 --> 00:05:31,919
and proofs

154
00:05:31,919 --> 00:05:34,960
a verify crs algorithm to verify that

155
00:05:34,960 --> 00:05:37,759
the crs is of the correct form

156
00:05:37,759 --> 00:05:40,479
and a simulated algorithm

157
00:05:40,479 --> 00:05:43,280
which is part of the

158
00:05:43,440 --> 00:05:45,440
mathematical definition of serial

159
00:05:45,440 --> 00:05:46,800
knowledge

160
00:05:46,800 --> 00:05:48,720
it's an algorithm which is able to

161
00:05:48,720 --> 00:05:49,919
create

162
00:05:49,919 --> 00:05:52,639
sort of real looking proofs based on

163
00:05:52,639 --> 00:05:55,360
knowing just the statement

164
00:05:55,360 --> 00:05:57,600
but also some additional information

165
00:05:57,600 --> 00:05:59,600
like a trapdoor but importantly not the

166
00:05:59,600 --> 00:06:03,039
witness to the statement

167
00:06:03,600 --> 00:06:05,280
the defining properties are completeness

168
00:06:05,280 --> 00:06:07,360
and sadness we've seen before

169
00:06:07,360 --> 00:06:09,039
subversion serial knowledge is the new

170
00:06:09,039 --> 00:06:10,080
one here

171
00:06:10,080 --> 00:06:12,720
so this is saying that okay so suppose

172
00:06:12,720 --> 00:06:14,479
there is some cat which generates the

173
00:06:14,479 --> 00:06:15,840
crs

174
00:06:15,840 --> 00:06:17,520
then there should be

175
00:06:17,520 --> 00:06:19,600
it should be possible to extract by

176
00:06:19,600 --> 00:06:21,520
examining this cat

177
00:06:21,520 --> 00:06:23,759
a trapdoor that you can use to simulate

178
00:06:23,759 --> 00:06:25,120
proofs

179
00:06:25,120 --> 00:06:27,360
that should look

180
00:06:27,360 --> 00:06:31,039
indistinguishable from real proofs

181
00:06:31,039 --> 00:06:32,960
so again the

182
00:06:32,960 --> 00:06:35,680
simulator does not know the witness

183
00:06:35,680 --> 00:06:38,240
and so the ambi and the proof uh

184
00:06:38,240 --> 00:06:39,919
outputted by the simulator looks like a

185
00:06:39,919 --> 00:06:42,639
real proof so the real proofs cannot

186
00:06:42,639 --> 00:06:44,080
depend

187
00:06:44,080 --> 00:06:45,680
on the witness

188
00:06:45,680 --> 00:06:47,680
in any sort of

189
00:06:47,680 --> 00:06:50,400
serious way

190
00:06:50,960 --> 00:06:52,880
so that brings us

191
00:06:52,880 --> 00:06:55,520
brings me to our contributions

192
00:06:55,520 --> 00:06:56,800
in this paper

193
00:06:56,800 --> 00:06:59,120
so we define a new primitive which is a

194
00:06:59,120 --> 00:07:00,800
variant of an old primitive so it's a

195
00:07:00,800 --> 00:07:04,479
verifiably extractable one-way functions

196
00:07:04,479 --> 00:07:06,080
we give some constructions of this

197
00:07:06,080 --> 00:07:08,479
primitive so show how

198
00:07:08,479 --> 00:07:11,199
constructions in literature satisfy our

199
00:07:11,199 --> 00:07:12,880
definition

200
00:07:12,880 --> 00:07:15,280
uh and then we construct sub-ck mystics

201
00:07:15,280 --> 00:07:18,080
from this verifiably extractable runway

202
00:07:18,080 --> 00:07:19,840
functions or valves

203
00:07:19,840 --> 00:07:22,479
not not just from this we require some

204
00:07:22,479 --> 00:07:25,199
additional primitives

205
00:07:25,199 --> 00:07:27,599
and finally we construct the ops from

206
00:07:27,599 --> 00:07:29,199
subsequence

207
00:07:29,199 --> 00:07:31,120
under certain conditions

208
00:07:31,120 --> 00:07:32,800
so we really show that there is a strong

209
00:07:32,800 --> 00:07:34,720
connection between

210
00:07:34,720 --> 00:07:38,160
bayoffs and subsequentics so

211
00:07:38,160 --> 00:07:40,080
payoffs are

212
00:07:40,080 --> 00:07:42,479
you know very tightly related to the

213
00:07:42,479 --> 00:07:44,400
assumptions needed to

214
00:07:44,400 --> 00:07:47,759
have security of the subsequentic

215
00:07:47,759 --> 00:07:50,319
okay i'll now define verifiably

216
00:07:50,319 --> 00:07:52,319
extractable runway functions so a

217
00:07:52,319 --> 00:07:54,960
function f is a way off if it satisfies

218
00:07:54,960 --> 00:07:56,960
the following three properties so it

219
00:07:56,960 --> 00:07:58,400
should be one way

220
00:07:58,400 --> 00:08:00,639
so given an image of the function it

221
00:08:00,639 --> 00:08:02,960
should be hard to output a pre-image of

222
00:08:02,960 --> 00:08:05,520
the function

223
00:08:05,680 --> 00:08:07,440
or pre-image of that image under the

224
00:08:07,440 --> 00:08:08,800
function

225
00:08:08,800 --> 00:08:10,960
it should be extractable so if an

226
00:08:10,960 --> 00:08:13,680
adversary outputs an image of f

227
00:08:13,680 --> 00:08:15,680
there exists an extractor

228
00:08:15,680 --> 00:08:18,479
which outputs a pre image of y

229
00:08:18,479 --> 00:08:20,400
and this extractor should have access to

230
00:08:20,400 --> 00:08:22,800
the adversary and its inputs and

231
00:08:22,800 --> 00:08:25,280
auxiliary inputs

232
00:08:25,280 --> 00:08:26,400
so

233
00:08:26,400 --> 00:08:28,160
if we just have these first two

234
00:08:28,160 --> 00:08:29,199
conditions

235
00:08:29,199 --> 00:08:31,120
uh we have the extractable one-way

236
00:08:31,120 --> 00:08:32,559
function

237
00:08:32,559 --> 00:08:34,719
which is uh

238
00:08:34,719 --> 00:08:36,958
known a non-construct or known primitive

239
00:08:36,958 --> 00:08:38,958
in the literature

240
00:08:38,958 --> 00:08:40,719
like it dates back a long way it was

241
00:08:40,719 --> 00:08:44,320
formalized by connect the anecdote

242
00:08:44,320 --> 00:08:47,440
so we add on the final condition that

243
00:08:47,440 --> 00:08:49,440
of image verifiability so it should be

244
00:08:49,440 --> 00:08:50,880
efficient to check

245
00:08:50,880 --> 00:08:51,760
if

246
00:08:51,760 --> 00:08:52,560
some

247
00:08:52,560 --> 00:08:55,839
y belongs to the image of f or not

248
00:08:55,839 --> 00:08:58,320
and this should be publicly checkable

249
00:08:58,320 --> 00:09:01,360
based on yeah only public information no

250
00:09:01,360 --> 00:09:03,839
secrets

251
00:09:04,800 --> 00:09:06,959
and we have some constructions of the

252
00:09:06,959 --> 00:09:10,160
ops so we have constructions you know in

253
00:09:10,160 --> 00:09:12,160
a restricted model but then you can use

254
00:09:12,160 --> 00:09:14,160
uh delegation schemes

255
00:09:14,160 --> 00:09:17,360
um and some clever ideas as this based

256
00:09:17,360 --> 00:09:19,680
on work by petanski kenneth panetta and

257
00:09:19,680 --> 00:09:23,319
rosen 2016.

258
00:09:24,399 --> 00:09:26,560
it turns out that their construction of

259
00:09:26,560 --> 00:09:28,880
an extractable one-way function turns

260
00:09:28,880 --> 00:09:32,320
out to be verifiable as well

261
00:09:32,959 --> 00:09:34,640
we can

262
00:09:34,640 --> 00:09:35,839
get

263
00:09:35,839 --> 00:09:37,600
verbs from knowledge of exponent

264
00:09:37,600 --> 00:09:39,760
assumptions with pairings

265
00:09:39,760 --> 00:09:40,880
um

266
00:09:40,880 --> 00:09:43,839
so if f of x is equal to

267
00:09:43,839 --> 00:09:46,000
you know g to the x and g to the x

268
00:09:46,000 --> 00:09:46,959
squared

269
00:09:46,959 --> 00:09:48,560
um

270
00:09:48,560 --> 00:09:50,480
there is a knowledge assumption which

271
00:09:50,480 --> 00:09:52,880
says that the only way to do this

272
00:09:52,880 --> 00:09:54,800
is essentially to know x

273
00:09:54,800 --> 00:09:56,160
aka

274
00:09:56,160 --> 00:09:58,640
you know if any um

275
00:09:58,640 --> 00:10:01,839
adversary outputs a tuple of this form

276
00:10:01,839 --> 00:10:03,440
then there must be an extractor which

277
00:10:03,440 --> 00:10:04,399
can

278
00:10:04,399 --> 00:10:05,920
output

279
00:10:05,920 --> 00:10:06,959
x

280
00:10:06,959 --> 00:10:10,399
so the pre-image of the function

281
00:10:10,560 --> 00:10:12,720
and the pairings so if you have

282
00:10:12,720 --> 00:10:15,120
symmetric pairings in this group

283
00:10:15,120 --> 00:10:16,560
you can actually

284
00:10:16,560 --> 00:10:18,959
verify that the

285
00:10:18,959 --> 00:10:22,319
tuple is of the correct form

286
00:10:23,680 --> 00:10:26,000
knowledge sound musics

287
00:10:26,000 --> 00:10:28,079
are another way to get verifiably

288
00:10:28,079 --> 00:10:30,880
extractable one-way functions

289
00:10:30,880 --> 00:10:33,440
so okay this is um

290
00:10:33,440 --> 00:10:35,680
not quite correct but the idea is that

291
00:10:35,680 --> 00:10:37,920
the function you know takes some

292
00:10:37,920 --> 00:10:39,839
statement and some witness and outputs a

293
00:10:39,839 --> 00:10:41,040
proof

294
00:10:41,040 --> 00:10:44,959
of this statement and this witness

295
00:10:44,959 --> 00:10:46,720
and here you rely on essex with an

296
00:10:46,720 --> 00:10:48,959
additional stronger sadness property

297
00:10:48,959 --> 00:10:50,800
known as knowledge sadness

298
00:10:50,800 --> 00:10:52,959
which is essentially saying that

299
00:10:52,959 --> 00:10:55,279
in order to produce a valid

300
00:10:55,279 --> 00:10:57,279
proof you must know

301
00:10:57,279 --> 00:11:01,000
a corresponding witness

302
00:11:02,399 --> 00:11:06,640
and the verification here is done by

303
00:11:06,640 --> 00:11:08,320
the

304
00:11:08,320 --> 00:11:10,079
verify algorithm

305
00:11:10,079 --> 00:11:11,760
that's in the

306
00:11:11,760 --> 00:11:14,000
in the music itself

307
00:11:14,000 --> 00:11:16,000
and the one-way property holds because

308
00:11:16,000 --> 00:11:16,720
of

309
00:11:16,720 --> 00:11:18,959
zero knowledge

310
00:11:18,959 --> 00:11:20,399
and finally we have a sort of neat

311
00:11:20,399 --> 00:11:21,760
heuristic

312
00:11:21,760 --> 00:11:24,320
signature schemes so the idea here is

313
00:11:24,320 --> 00:11:26,240
that

314
00:11:26,240 --> 00:11:28,000
if someone is able to create a valid

315
00:11:28,000 --> 00:11:30,320
signature they should really know the

316
00:11:30,320 --> 00:11:31,920
secret key

317
00:11:31,920 --> 00:11:34,240
now this turns out not to work in a

318
00:11:34,240 --> 00:11:36,000
certain number of cases

319
00:11:36,000 --> 00:11:37,040
um

320
00:11:37,040 --> 00:11:39,279
like

321
00:11:39,279 --> 00:11:41,279
you can see that it's it's not possible

322
00:11:41,279 --> 00:11:43,519
to to do the extraction

323
00:11:43,519 --> 00:11:46,720
but in certain other circumstances this

324
00:11:46,720 --> 00:11:49,040
seems to give a reasonable

325
00:11:49,040 --> 00:11:50,399
candidate

326
00:11:50,399 --> 00:11:52,639
for a verifiably extractable one-way

327
00:11:52,639 --> 00:11:54,399
function

328
00:11:54,399 --> 00:11:57,120
so this is not provable uh based on

329
00:11:57,120 --> 00:11:58,560
concrete provable assumptions this is

330
00:11:58,560 --> 00:12:02,000
more of a heuristic to create

331
00:12:02,000 --> 00:12:03,040
candidate

332
00:12:03,040 --> 00:12:05,839
uh layoffs

333
00:12:05,839 --> 00:12:07,839
it's time to see how we can connect

334
00:12:07,839 --> 00:12:10,800
subsequentics layoffs

335
00:12:10,800 --> 00:12:13,120
so we give two generic constructions of

336
00:12:13,120 --> 00:12:14,800
sub ck nissics

337
00:12:14,800 --> 00:12:16,880
so we achieve the same sub ck property

338
00:12:16,880 --> 00:12:21,440
as bfs 16 first power 18 and also 21

339
00:12:21,440 --> 00:12:23,600
from any way off

340
00:12:23,600 --> 00:12:25,279
so we have a generic instruction based

341
00:12:25,279 --> 00:12:27,279
on generic assumptions

342
00:12:27,279 --> 00:12:28,480
which

343
00:12:28,480 --> 00:12:31,279
in our view better highlights

344
00:12:31,279 --> 00:12:32,880
which assumptions are really needed in

345
00:12:32,880 --> 00:12:35,120
this case as opposed to the concrete

346
00:12:35,120 --> 00:12:36,480
constructions

347
00:12:36,480 --> 00:12:38,399
of these three papers not that there is

348
00:12:38,399 --> 00:12:40,160
anything wrong with those constructions

349
00:12:40,160 --> 00:12:41,040
um

350
00:12:41,040 --> 00:12:43,920
but for for our purposes we think that

351
00:12:43,920 --> 00:12:46,160
our construction ads

352
00:12:46,160 --> 00:12:48,959
add some value

353
00:12:49,279 --> 00:12:50,399
so

354
00:12:50,399 --> 00:12:52,959
our constructions follow a fairly

355
00:12:52,959 --> 00:12:54,320
straightforward approach so they use the

356
00:12:54,320 --> 00:12:57,200
fls approach which is uh that you add an

357
00:12:57,200 --> 00:12:58,399
image y

358
00:12:58,399 --> 00:12:59,440
of

359
00:12:59,440 --> 00:13:01,279
f to the crs

360
00:13:01,279 --> 00:13:03,279
and then you prove uh with witness

361
00:13:03,279 --> 00:13:04,720
insignificability

362
00:13:04,720 --> 00:13:06,399
that you either know a witness to the

363
00:13:06,399 --> 00:13:10,480
statement or you know a pre-image of why

364
00:13:10,480 --> 00:13:12,880
since given just why it's hard to find

365
00:13:12,880 --> 00:13:15,120
the pre-image

366
00:13:15,120 --> 00:13:19,360
any like successful prover should know

367
00:13:19,360 --> 00:13:21,279
a witness

368
00:13:21,279 --> 00:13:23,120
and similarly for the subversion zero

369
00:13:23,120 --> 00:13:26,240
knowledge um

370
00:13:27,760 --> 00:13:30,000
if since the crs generator was able to

371
00:13:30,000 --> 00:13:32,839
output an image y of

372
00:13:32,839 --> 00:13:36,959
f the extractor can extract a pre-image

373
00:13:36,959 --> 00:13:40,800
and use this as a simulation trapdoor

374
00:13:40,800 --> 00:13:43,360
and here it's important that

375
00:13:43,360 --> 00:13:45,519
we have the image verifiability because

376
00:13:45,519 --> 00:13:47,680
we need to verify that the crs is

377
00:13:47,680 --> 00:13:50,160
correctly formed

378
00:13:50,160 --> 00:13:53,120
so if we did not have this

379
00:13:53,120 --> 00:13:54,800
we would not achieve subversion zero

380
00:13:54,800 --> 00:13:56,880
knowledge

381
00:13:56,880 --> 00:13:59,140
yeah so both constructions follow this

382
00:13:59,140 --> 00:14:00,480
[Music]

383
00:14:00,480 --> 00:14:03,120
follow this approach but with

384
00:14:03,120 --> 00:14:06,160
some slight tweaks

385
00:14:06,320 --> 00:14:08,880
and then finally we show that the crash

386
00:14:08,880 --> 00:14:11,360
generation algorithm of a sub c k l isek

387
00:14:11,360 --> 00:14:13,760
is a valve now note this is under

388
00:14:13,760 --> 00:14:15,680
certain assumptions

389
00:14:15,680 --> 00:14:17,279
on the

390
00:14:17,279 --> 00:14:19,600
on the nissic

391
00:14:19,600 --> 00:14:22,000
they will not get it in all cases for

392
00:14:22,000 --> 00:14:23,920
all languages but

393
00:14:23,920 --> 00:14:25,680
for a large class

394
00:14:25,680 --> 00:14:28,240
of subsequent ethics the seriation

395
00:14:28,240 --> 00:14:32,160
generation algorithm is the way of

396
00:14:32,800 --> 00:14:35,040
that brings us to the conclusion so what

397
00:14:35,040 --> 00:14:37,839
did we what did we learn today

398
00:14:37,839 --> 00:14:38,560
so

399
00:14:38,560 --> 00:14:40,880
the paper defines the new primitive

400
00:14:40,880 --> 00:14:43,920
verifiably extractable one-way functions

401
00:14:43,920 --> 00:14:46,079
we show how to construct this primitive

402
00:14:46,079 --> 00:14:48,079
from various assumptions

403
00:14:48,079 --> 00:14:49,279
and we show

404
00:14:49,279 --> 00:14:51,519
how this primitive relates to subversion

405
00:14:51,519 --> 00:14:53,440
zero knowledge gnisics

406
00:14:53,440 --> 00:14:55,120
now there are a number of open questions

407
00:14:55,120 --> 00:14:58,720
left here are just two of them

408
00:14:58,720 --> 00:15:01,120
are there other uses of playoffs i mean

409
00:15:01,120 --> 00:15:03,600
you've used it for subsequent essex

410
00:15:03,600 --> 00:15:06,480
are there other uses

411
00:15:06,480 --> 00:15:08,639
where this would be interesting

412
00:15:08,639 --> 00:15:10,800
and can they be constructed from other

413
00:15:10,800 --> 00:15:12,320
assumptions so yes we have some

414
00:15:12,320 --> 00:15:13,600
constructions

415
00:15:13,600 --> 00:15:15,120
from some assumptions

416
00:15:15,120 --> 00:15:17,360
are there other ones out there

417
00:15:17,360 --> 00:15:19,040
thank you very much for watching if you

418
00:15:19,040 --> 00:15:20,800
want to see more details please read the

419
00:15:20,800 --> 00:15:24,920
full paper over at the print

