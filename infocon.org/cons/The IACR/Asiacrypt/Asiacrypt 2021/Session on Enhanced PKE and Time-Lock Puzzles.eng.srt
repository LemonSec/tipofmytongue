1
00:00:00,799 --> 00:00:04,000
ah they've got to record it

2
00:00:04,799 --> 00:00:07,120
go ahead okay welcome welcome to the

3
00:00:07,120 --> 00:00:10,559
session on enhanced pke and time lock

4
00:00:10,559 --> 00:00:11,679
puzzles

5
00:00:11,679 --> 00:00:14,480
so i'm stephen galbraith and i'm one of

6
00:00:14,480 --> 00:00:16,880
the co-chairs and uh yong jin zhao is

7
00:00:16,880 --> 00:00:19,039
the other co-chair and aaron do you want

8
00:00:19,039 --> 00:00:21,039
to share your screen you can you can

9
00:00:21,039 --> 00:00:22,560
start your talk on

10
00:00:22,560 --> 00:00:24,160
cryptographic assumptions and hidden

11
00:00:24,160 --> 00:00:26,800
order groups

12
00:00:27,119 --> 00:00:28,720
yeah thanks for the introductions our

13
00:00:28,720 --> 00:00:30,960
work is called untimelog cryptographic

14
00:00:30,960 --> 00:00:32,558
assumptions in abelian hidden order

15
00:00:32,558 --> 00:00:35,200
groups and it's a joint work with

16
00:00:35,200 --> 00:00:36,719
mark stephens

17
00:00:36,719 --> 00:00:39,520
um so an abelian hypnotic group is a

18
00:00:39,520 --> 00:00:41,840
finite abelian group such that it is

19
00:00:41,840 --> 00:00:44,079
hard to compute a multiple of the order

20
00:00:44,079 --> 00:00:46,320
of the group and preferably we want to

21
00:00:46,320 --> 00:00:48,160
be able to sample such a group without

22
00:00:48,160 --> 00:00:50,480
the need for a trusted setup

23
00:00:50,480 --> 00:00:52,719
some applications of inorder groups are

24
00:00:52,719 --> 00:00:54,879
verifiable delay functions cryptographic

25
00:00:54,879 --> 00:00:56,960
accumulators and zero knowledge

26
00:00:56,960 --> 00:00:58,800
arguments and perhaps the most

27
00:00:58,800 --> 00:01:00,719
well-known examples of hidden order

28
00:01:00,719 --> 00:01:03,760
groups are rsa groups and imaginary

29
00:01:03,760 --> 00:01:06,320
quadratic classrooms

30
00:01:06,320 --> 00:01:07,920
imaginary quadratic class groups have

31
00:01:07,920 --> 00:01:10,320
historically been less studied than rsa

32
00:01:10,320 --> 00:01:13,439
groups in cryptography but they have the

33
00:01:13,439 --> 00:01:15,280
the benefit of not needing a trusted

34
00:01:15,280 --> 00:01:18,240
setup whereas rsa groups do need a

35
00:01:18,240 --> 00:01:20,640
trusted setup

36
00:01:20,640 --> 00:01:23,040
on the other hand if we sample a random

37
00:01:23,040 --> 00:01:25,840
imaginary good on a class group

38
00:01:25,840 --> 00:01:27,600
it's not always going to be cyclic and

39
00:01:27,600 --> 00:01:29,119
we have no efficient way to check if

40
00:01:29,119 --> 00:01:31,200
such a randomly assembled group

41
00:01:31,200 --> 00:01:33,920
is cyclic and so this motivates the need

42
00:01:33,920 --> 00:01:35,600
to study computational problems in

43
00:01:35,600 --> 00:01:37,600
abelian groups of inorder and not just

44
00:01:37,600 --> 00:01:39,200
cyclic groups

45
00:01:39,200 --> 00:01:41,360
and then with respect to multiple

46
00:01:41,360 --> 00:01:42,240
some

47
00:01:42,240 --> 00:01:46,079
multiple randomly sampled generators

48
00:01:46,079 --> 00:01:47,840
and so the contributions of our work are

49
00:01:47,840 --> 00:01:50,720
to formalize and study this abelian

50
00:01:50,720 --> 00:01:52,479
hidden order group setting

51
00:01:52,479 --> 00:01:54,880
um and so we proposed generalizations of

52
00:01:54,880 --> 00:01:57,520
the standard model algebra group model

53
00:01:57,520 --> 00:01:59,600
and strong algebra group model and we

54
00:01:59,600 --> 00:02:02,240
adapted the definitions of cryptographic

55
00:02:02,240 --> 00:02:04,399
problems to suit this billion hidden

56
00:02:04,399 --> 00:02:06,560
order group setting

57
00:02:06,560 --> 00:02:09,199
and the main changes here are that at

58
00:02:09,199 --> 00:02:11,360
the start of a computational game

59
00:02:11,360 --> 00:02:13,680
um a group is sampled randomly from some

60
00:02:13,680 --> 00:02:16,239
group family and then n random elements

61
00:02:16,239 --> 00:02:19,520
are sampled to be used as generators

62
00:02:19,520 --> 00:02:21,680
um and then adversely receives at the

63
00:02:21,680 --> 00:02:23,200
start of this game

64
00:02:23,200 --> 00:02:25,440
an explicit description of this group

65
00:02:25,440 --> 00:02:27,680
and this random set of generators as

66
00:02:27,680 --> 00:02:30,000
input

67
00:02:30,239 --> 00:02:32,400
in the algebra group model adversaries

68
00:02:32,400 --> 00:02:34,640
need to additionally provide an

69
00:02:34,640 --> 00:02:37,200
algebraic representation of every output

70
00:02:37,200 --> 00:02:39,200
group element in terms of input group

71
00:02:39,200 --> 00:02:41,440
elements and in the strong algebra group

72
00:02:41,440 --> 00:02:43,680
model adversaries need to expose the

73
00:02:43,680 --> 00:02:46,319
circuit of elementary group operations

74
00:02:46,319 --> 00:02:49,120
so multiplications and inversions that

75
00:02:49,120 --> 00:02:50,879
they use to compute output group

76
00:02:50,879 --> 00:02:55,040
elements from input group elements

77
00:02:56,720 --> 00:02:58,480
and then

78
00:02:58,480 --> 00:03:00,239
the main part of our work is to study

79
00:03:00,239 --> 00:03:02,080
relations between cryptographic problems

80
00:03:02,080 --> 00:03:04,159
in a billion groups fit in order in

81
00:03:04,159 --> 00:03:05,280
these

82
00:03:05,280 --> 00:03:08,239
three computational models

83
00:03:08,239 --> 00:03:09,760
so before giving an overview of the

84
00:03:09,760 --> 00:03:11,280
reductions that we've shown let me

85
00:03:11,280 --> 00:03:13,519
briefly introduce the computational

86
00:03:13,519 --> 00:03:15,760
problems that we studied so we studied

87
00:03:15,760 --> 00:03:18,080
various order problems of computing

88
00:03:18,080 --> 00:03:20,239
either the group order or finding some

89
00:03:20,239 --> 00:03:22,239
element of low order

90
00:03:22,239 --> 00:03:24,720
then various root problems when it first

91
00:03:24,720 --> 00:03:25,840
you had to

92
00:03:25,840 --> 00:03:27,599
compute the root of

93
00:03:27,599 --> 00:03:29,920
either a self-chosen challenge element

94
00:03:29,920 --> 00:03:32,400
or some random challenge element

95
00:03:32,400 --> 00:03:34,879
to repeat the squaring problem

96
00:03:34,879 --> 00:03:35,760
and

97
00:03:35,760 --> 00:03:38,239
various generalizations of the discrete

98
00:03:38,239 --> 00:03:40,879
logarithm problem and computation of the

99
00:03:40,879 --> 00:03:43,280
helmet problem to

100
00:03:43,280 --> 00:03:46,840
abelian groups

101
00:03:49,760 --> 00:03:51,200
and so in this

102
00:03:51,200 --> 00:03:53,360
picture here we see an overview of the

103
00:03:53,360 --> 00:03:55,519
reductions that we've shown in our work

104
00:03:55,519 --> 00:03:57,680
where the green cells indicate new

105
00:03:57,680 --> 00:03:59,120
results

106
00:03:59,120 --> 00:04:01,040
and inside the cells it shows the

107
00:04:01,040 --> 00:04:03,200
computational model in which we've

108
00:04:03,200 --> 00:04:05,120
shown this result

109
00:04:05,120 --> 00:04:06,959
the yellow cells indicate partial

110
00:04:06,959 --> 00:04:09,439
results which are conditioned on some

111
00:04:09,439 --> 00:04:11,360
extra conditions holding up

112
00:04:11,360 --> 00:04:13,599
and the red cells indicate that no

113
00:04:13,599 --> 00:04:15,599
generic reductions

114
00:04:15,599 --> 00:04:18,959
can be shown for these problems

115
00:04:18,959 --> 00:04:21,199
and so if we look a bit closer the main

116
00:04:21,199 --> 00:04:23,360
chunk of new results that we've shown

117
00:04:23,360 --> 00:04:25,680
are reductions from this ammo problem

118
00:04:25,680 --> 00:04:27,360
the problem of computing multiple of the

119
00:04:27,360 --> 00:04:28,880
order to

120
00:04:28,880 --> 00:04:30,560
all of the other computational problems

121
00:04:30,560 --> 00:04:32,080
that we study

122
00:04:32,080 --> 00:04:34,720
and then composing these new reductions

123
00:04:34,720 --> 00:04:35,520
with

124
00:04:35,520 --> 00:04:38,800
no reductions from the other problems to

125
00:04:38,800 --> 00:04:40,960
the multiple order problem we obtained

126
00:04:40,960 --> 00:04:42,400
sort of this whole block

127
00:04:42,400 --> 00:04:44,720
of problems which are um essentially

128
00:04:44,720 --> 00:04:46,720
equivalent to the problem of computing a

129
00:04:46,720 --> 00:04:48,560
multiple of the order

130
00:04:48,560 --> 00:04:53,280
in these respective computational models

131
00:04:53,600 --> 00:04:55,120
and so

132
00:04:55,120 --> 00:04:57,600
uh and moreover we showed that uh in

133
00:04:57,600 --> 00:04:59,680
cyclic groups within order we can obtain

134
00:04:59,680 --> 00:05:01,280
the exact order

135
00:05:01,280 --> 00:05:02,960
of the group from a from a d log

136
00:05:02,960 --> 00:05:06,400
adversary um which is kind of a a

137
00:05:06,400 --> 00:05:08,479
folklore reduction which which may be

138
00:05:08,479 --> 00:05:11,440
known before i think um but we

139
00:05:11,440 --> 00:05:14,080
give some exact analysis of uh success

140
00:05:14,080 --> 00:05:16,560
uh probabilities and and running time

141
00:05:16,560 --> 00:05:19,840
for this uh for this reduction

142
00:05:19,840 --> 00:05:21,039
um

143
00:05:21,039 --> 00:05:22,720
so because most of the results we've

144
00:05:22,720 --> 00:05:25,039
shown our reductions from this multiple

145
00:05:25,039 --> 00:05:26,320
order problem to some other

146
00:05:26,320 --> 00:05:28,479
computational problem and to briefly

147
00:05:28,479 --> 00:05:30,479
outline the

148
00:05:30,479 --> 00:05:32,560
uh what this reduction looked like

149
00:05:32,560 --> 00:05:36,000
so the idea here is to obtain n linearly

150
00:05:36,000 --> 00:05:38,320
independent relations with respect to

151
00:05:38,320 --> 00:05:40,400
system of generators of the group from

152
00:05:40,400 --> 00:05:42,560
an adversary solving a given

153
00:05:42,560 --> 00:05:45,120
computational problem g

154
00:05:45,120 --> 00:05:47,199
and here with a relation i mean some

155
00:05:47,199 --> 00:05:50,240
integer vectors such that if you

156
00:05:50,240 --> 00:05:52,639
if you raise the generators to

157
00:05:52,639 --> 00:05:54,720
the components of this vector we

158
00:05:54,720 --> 00:05:57,039
multiply and multiply them we obtain the

159
00:05:57,039 --> 00:05:58,720
identity of the group

160
00:05:58,720 --> 00:06:01,360
um and then if we succeed in doing this

161
00:06:01,360 --> 00:06:02,880
the determinant of the system of

162
00:06:02,880 --> 00:06:05,120
relations is going to be a multiple of

163
00:06:05,120 --> 00:06:07,680
the group board

164
00:06:08,240 --> 00:06:10,160
so the challenges to show these

165
00:06:10,160 --> 00:06:12,880
reductions are well of course to extract

166
00:06:12,880 --> 00:06:15,600
relations from an adversary solving

167
00:06:15,600 --> 00:06:16,960
an instance of this computational

168
00:06:16,960 --> 00:06:19,039
problem and then to randomize the

169
00:06:19,039 --> 00:06:21,039
instances of this problem and call the

170
00:06:21,039 --> 00:06:23,919
adversary multiple times such that it

171
00:06:23,919 --> 00:06:25,919
succeeds with independent and identical

172
00:06:25,919 --> 00:06:28,720
success probability on each instance

173
00:06:28,720 --> 00:06:30,639
such that it succeeds on n instances

174
00:06:30,639 --> 00:06:33,440
with visually large probability and such

175
00:06:33,440 --> 00:06:35,120
that and successfully extracted

176
00:06:35,120 --> 00:06:37,520
relations will be linearly independent

177
00:06:37,520 --> 00:06:40,479
with overwhelming probability

178
00:06:40,479 --> 00:06:41,840
and if you want to know more about the

179
00:06:41,840 --> 00:06:43,759
details of this reduction i want to

180
00:06:43,759 --> 00:06:45,919
refer to the full first full recorded

181
00:06:45,919 --> 00:06:48,240
version of our talk or to the full

182
00:06:48,240 --> 00:06:50,400
version of our paper which is up on

183
00:06:50,400 --> 00:06:52,080
eprint or you can find in your

184
00:06:52,080 --> 00:06:54,000
conference proceedings

185
00:06:54,000 --> 00:06:55,120
and for now i want to thank you for

186
00:06:55,120 --> 00:06:56,960
listening and if you have any questions

187
00:06:56,960 --> 00:06:58,400
feel free to

188
00:06:58,400 --> 00:07:01,638
ask them

189
00:07:02,319 --> 00:07:04,479
that's a great really nice talk aaron

190
00:07:04,479 --> 00:07:06,880
and i just suddenly realized my

191
00:07:06,880 --> 00:07:08,560
fundamental mistake is i haven't pulled

192
00:07:08,560 --> 00:07:10,880
up the zulu chat um

193
00:07:10,880 --> 00:07:13,039
is anyone have anyone looking at that

194
00:07:13,039 --> 00:07:14,720
are there any are there any questions on

195
00:07:14,720 --> 00:07:17,800
the zulu

196
00:07:19,440 --> 00:07:21,440
no there are not

197
00:07:21,440 --> 00:07:24,160
okay good uh is anyone in the room what

198
00:07:24,160 --> 00:07:26,720
a question

199
00:07:27,360 --> 00:07:28,840
i actually have a

200
00:07:28,840 --> 00:07:31,360
question okay kevin

201
00:07:31,360 --> 00:07:32,960
you mentioned two examples of these

202
00:07:32,960 --> 00:07:35,280
hidden order groups the class group and

203
00:07:35,280 --> 00:07:38,160
the integers modulo product issue primes

204
00:07:38,160 --> 00:07:39,440
are there other candidates that are

205
00:07:39,440 --> 00:07:41,039
known

206
00:07:41,039 --> 00:07:41,759
yeah

207
00:07:41,759 --> 00:07:42,840
these

208
00:07:42,840 --> 00:07:46,800
um uh jacobians um

209
00:07:46,800 --> 00:07:49,520
right if i said correctly hyperlypic

210
00:07:49,520 --> 00:07:50,639
um

211
00:07:50,639 --> 00:07:52,720
i think steven published a paper about

212
00:07:52,720 --> 00:07:54,960
this last year that's that's that's a

213
00:07:54,960 --> 00:07:57,120
hilarious question kevin that's like

214
00:07:57,120 --> 00:07:58,560
it's like i asked you to ask that

215
00:07:58,560 --> 00:07:59,919
question or something

216
00:07:59,919 --> 00:08:01,520
no it's just like literally wrote a

217
00:08:01,520 --> 00:08:04,400
paper on that recently

218
00:08:04,400 --> 00:08:06,319
yeah

219
00:08:06,319 --> 00:08:07,840
no it's it's really it's a really

220
00:08:07,840 --> 00:08:09,919
interesting point it's one of these it's

221
00:08:09,919 --> 00:08:11,840
a classic example of one of these things

222
00:08:11,840 --> 00:08:13,440
that happens in cryptography where we

223
00:08:13,440 --> 00:08:15,199
have actually a really small number of

224
00:08:15,199 --> 00:08:17,120
candidates for something that's actually

225
00:08:17,120 --> 00:08:18,479
quite interesting

226
00:08:18,479 --> 00:08:19,680
um

227
00:08:19,680 --> 00:08:21,199
is that the only other candidate that

228
00:08:21,199 --> 00:08:23,440
you know

229
00:08:23,599 --> 00:08:25,520
class groups is the same

230
00:08:25,520 --> 00:08:27,840
yeah

231
00:08:29,280 --> 00:08:30,879
uh i also had a

232
00:08:30,879 --> 00:08:32,880
question now and it was around

233
00:08:32,880 --> 00:08:34,799
you talk about the

234
00:08:34,799 --> 00:08:36,080
exact

235
00:08:36,080 --> 00:08:37,679
computing the group order exactly and

236
00:08:37,679 --> 00:08:38,880
the multiple

237
00:08:38,880 --> 00:08:42,559
the computing the multiple order

238
00:08:42,559 --> 00:08:44,320
one of one of the things we have

239
00:08:44,320 --> 00:08:45,920
actually is estimates for the size of

240
00:08:45,920 --> 00:08:48,399
the group so i mean the rsa case

241
00:08:48,399 --> 00:08:50,959
you know zn star the order is almost

242
00:08:50,959 --> 00:08:52,399
very close to n

243
00:08:52,399 --> 00:08:54,560
and and for advanced group we have some

244
00:08:54,560 --> 00:08:56,320
kind of bounds related to this

245
00:08:56,320 --> 00:08:58,880
discriminant so does that help in any

246
00:08:58,880 --> 00:09:01,519
way you to understand when you do when

247
00:09:01,519 --> 00:09:02,720
you've actually finally got the exact

248
00:09:02,720 --> 00:09:04,160
order because you can use these bounds

249
00:09:04,160 --> 00:09:05,839
to help um

250
00:09:05,839 --> 00:09:07,519
to know that you're finished

251
00:09:07,519 --> 00:09:09,120
yeah maybe but the difficult thing with

252
00:09:09,120 --> 00:09:12,000
these um sort of things are especially

253
00:09:12,000 --> 00:09:13,279
for um

254
00:09:13,279 --> 00:09:15,440
well if we look at sort of the problems

255
00:09:15,440 --> 00:09:17,760
that also reduce to this multiple order

256
00:09:17,760 --> 00:09:18,640
problem

257
00:09:18,640 --> 00:09:21,120
then the adversary then if we want to

258
00:09:21,120 --> 00:09:22,640
make a reduction from the middle order

259
00:09:22,640 --> 00:09:25,279
to that uh problem and this at first you

260
00:09:25,279 --> 00:09:27,279
can just work in some strict subletters

261
00:09:27,279 --> 00:09:29,760
of the of sort of the whole relationship

262
00:09:29,760 --> 00:09:31,519
letters of the groups that can always

263
00:09:31,519 --> 00:09:33,360
multiply the relations by some some

264
00:09:33,360 --> 00:09:35,680
integer multiple um

265
00:09:35,680 --> 00:09:38,240
and so we can always obtain

266
00:09:38,240 --> 00:09:40,800
sort of a larger multiple of the group

267
00:09:40,800 --> 00:09:43,200
order and i think well the adversary

268
00:09:43,200 --> 00:09:45,040
could technically also do that such that

269
00:09:45,040 --> 00:09:47,600
it stays within these bounds but it's

270
00:09:47,600 --> 00:09:50,320
still a multiple of the group order um

271
00:09:50,320 --> 00:09:51,920
but maybe maybe if the bands are tight

272
00:09:51,920 --> 00:09:53,440
enough we could could do yeah but it's

273
00:09:53,440 --> 00:09:54,560
probably a small you could probably

274
00:09:54,560 --> 00:09:57,200
factor anyway the time's up so a bit of

275
00:09:57,200 --> 00:09:58,160
movement

276
00:09:58,160 --> 00:09:59,600
so if you want if you want to stop

277
00:09:59,600 --> 00:10:01,680
sharing the screen yeah thanks for that

278
00:10:01,680 --> 00:10:04,079
really nice talk nickelodeon do you want

279
00:10:04,079 --> 00:10:06,399
to start setting up

280
00:10:06,399 --> 00:10:09,839
yep thanks very much yeah of course

281
00:10:09,839 --> 00:10:12,399
our screen

282
00:10:14,399 --> 00:10:17,440
cool and uh

283
00:10:17,519 --> 00:10:19,120
so

284
00:10:19,120 --> 00:10:22,000
so the next talk is on this uh

285
00:10:22,000 --> 00:10:24,240
thing i find hard to pronounce a

286
00:10:24,240 --> 00:10:26,880
stroller boss or something like that

287
00:10:26,880 --> 00:10:29,600
that's correct i'll let you introduce it

288
00:10:29,600 --> 00:10:30,399
so

289
00:10:30,399 --> 00:10:31,760
hello everyone

290
00:10:31,760 --> 00:10:33,600
my name is nicolas lambro

291
00:10:33,600 --> 00:10:34,640
and today i'm going to speak to you

292
00:10:34,640 --> 00:10:36,480
about castrolabus a universally

293
00:10:36,480 --> 00:10:38,320
composable time log encryption scheme

294
00:10:38,320 --> 00:10:40,160
this work is a collaboration with mr

295
00:10:40,160 --> 00:10:42,560
apinis and tomasza harias

296
00:10:42,560 --> 00:10:44,240
so first i'm going to give you a briefly

297
00:10:44,240 --> 00:10:45,680
introduction into the concept of time

298
00:10:45,680 --> 00:10:47,279
lock encryption

299
00:10:47,279 --> 00:10:49,440
so what's time loop encryption consider

300
00:10:49,440 --> 00:10:51,680
the case in a voting where a voter

301
00:10:51,680 --> 00:10:54,640
encrypts the vote by using an encryption

302
00:10:54,640 --> 00:10:57,440
algorithm and a public key the result is

303
00:10:57,440 --> 00:10:59,519
an encrypted vote

304
00:10:59,519 --> 00:11:00,480
and then

305
00:11:00,480 --> 00:11:03,680
by revealing the secret key everyone can

306
00:11:03,680 --> 00:11:05,440
retrieve the initial message

307
00:11:05,440 --> 00:11:07,519
so but what happens in the case that the

308
00:11:07,519 --> 00:11:10,240
secret key is not revealed

309
00:11:10,240 --> 00:11:12,079
we have fairness issues because no one

310
00:11:12,079 --> 00:11:14,399
can reveal the initial message and

311
00:11:14,399 --> 00:11:16,880
specifically in self-styling protocols

312
00:11:16,880 --> 00:11:19,279
so now consider the same case but

313
00:11:19,279 --> 00:11:20,880
instead of using a common encryption

314
00:11:20,880 --> 00:11:22,720
scheme i'm going to use time lock and

315
00:11:22,720 --> 00:11:24,720
instead of a public key when i use time

316
00:11:24,720 --> 00:11:26,959
t the result again is a cipher text and

317
00:11:26,959 --> 00:11:30,160
after t time t has been reached everyone

318
00:11:30,160 --> 00:11:31,279
can use

319
00:11:31,279 --> 00:11:33,360
the decryption algorithm provide with

320
00:11:33,360 --> 00:11:35,200
the time proof a time proof is a proof

321
00:11:35,200 --> 00:11:36,480
that actually the time t has been

322
00:11:36,480 --> 00:11:39,760
reached and retrieve the initial message

323
00:11:39,760 --> 00:11:41,680
so regarding the related work on that

324
00:11:41,680 --> 00:11:42,959
field

325
00:11:42,959 --> 00:11:44,800
the existing times of

326
00:11:44,800 --> 00:11:47,920
the existing construction of tle

327
00:11:47,920 --> 00:11:49,680
they are based on arithmetics for

328
00:11:49,680 --> 00:11:50,800
example

329
00:11:50,800 --> 00:11:52,959
the repeating squaring

330
00:11:52,959 --> 00:11:54,480
on hash function

331
00:11:54,480 --> 00:11:58,240
repeating hashing witness encryption

332
00:11:58,240 --> 00:12:00,160
by using boolean algebra

333
00:12:00,160 --> 00:12:02,480
or centralized constructions which

334
00:12:02,480 --> 00:12:03,760
mostly are based on public

335
00:12:03,760 --> 00:12:06,480
infrastructure

336
00:12:06,480 --> 00:12:08,480
and the generalization of all of this if

337
00:12:08,480 --> 00:12:14,399
we provide a mechanism of verifying the

338
00:12:14,399 --> 00:12:17,279
the solution of

339
00:12:17,279 --> 00:12:19,360
the time proof that i refer earlier is

340
00:12:19,360 --> 00:12:22,240
the verifiable delayed functions

341
00:12:22,240 --> 00:12:25,120
so regarding the security definitions uh

342
00:12:25,120 --> 00:12:27,120
all of the security definitions uh in

343
00:12:27,120 --> 00:12:29,440
the literature are game-based and

344
00:12:29,440 --> 00:12:30,720
specifically they assume that the

345
00:12:30,720 --> 00:12:33,200
adversary operates in a concrete time so

346
00:12:33,200 --> 00:12:35,040
we cannot argue we don't have

347
00:12:35,040 --> 00:12:37,360
composability arguments because

348
00:12:37,360 --> 00:12:39,279
time lock has not been studied in the uc

349
00:12:39,279 --> 00:12:40,399
framework

350
00:12:40,399 --> 00:12:41,839
where the adversary operates in an

351
00:12:41,839 --> 00:12:44,160
asymptotic time

352
00:12:44,160 --> 00:12:46,079
there is a work recently published in

353
00:12:46,079 --> 00:12:47,600
eurocrypt it's called tardis a

354
00:12:47,600 --> 00:12:50,160
foundation of time lock puzzles in uc

355
00:12:50,160 --> 00:12:51,440
framework

356
00:12:51,440 --> 00:12:53,279
it has many similarities with ours but

357
00:12:53,279 --> 00:12:54,560
despite that there are also many

358
00:12:54,560 --> 00:12:55,680
difficulties

359
00:12:55,680 --> 00:12:57,760
many differences i'm sorry

360
00:12:57,760 --> 00:12:59,839
the first is regarding the modeling

361
00:12:59,839 --> 00:13:01,680
in tardis they assume

362
00:13:01,680 --> 00:13:03,200
that

363
00:13:03,200 --> 00:13:05,200
a message can be retrieved after some

364
00:13:05,200 --> 00:13:06,639
computations

365
00:13:06,639 --> 00:13:09,279
has been done in our case a message can

366
00:13:09,279 --> 00:13:11,839
be retrieved when a specific time has

367
00:13:11,839 --> 00:13:13,600
been reached where we believe that

368
00:13:13,600 --> 00:13:16,000
actually captures more natural the

369
00:13:16,000 --> 00:13:19,040
concept of time lock encryption

370
00:13:19,040 --> 00:13:20,160
the second is the guardian the

371
00:13:20,160 --> 00:13:21,920
generalization

372
00:13:21,920 --> 00:13:24,800
in tardis uh they can only capture a

373
00:13:24,800 --> 00:13:26,720
time lock encryption schemes based on

374
00:13:26,720 --> 00:13:28,399
computational puzzles

375
00:13:28,399 --> 00:13:30,240
in our case we can capture all of the

376
00:13:30,240 --> 00:13:31,839
mentioned constructions

377
00:13:31,839 --> 00:13:34,160
the second is that they cannot model an

378
00:13:34,160 --> 00:13:35,839
adventure that possesses an advantage

379
00:13:35,839 --> 00:13:38,000
over the decryption time over the honest

380
00:13:38,000 --> 00:13:38,959
parties

381
00:13:38,959 --> 00:13:41,360
in our case we capture such scenarios uh

382
00:13:41,360 --> 00:13:43,920
by by parameterizes our functionality by

383
00:13:43,920 --> 00:13:46,240
a leak function and this is useful

384
00:13:46,240 --> 00:13:47,440
because there are constructions for

385
00:13:47,440 --> 00:13:49,600
example based on bitcoin and due to the

386
00:13:49,600 --> 00:13:51,360
selfish mining the adversary possesses

387
00:13:51,360 --> 00:13:52,880
advantage and still this construction

388
00:13:52,880 --> 00:13:55,120
are useful and the last is that the

389
00:13:55,120 --> 00:13:57,839
entirety of the construction they

390
00:13:57,839 --> 00:14:00,480
they provide construction is it is based

391
00:14:00,480 --> 00:14:02,399
both on the radom oracle and the generic

392
00:14:02,399 --> 00:14:04,480
group model in our case it's been it is

393
00:14:04,480 --> 00:14:07,199
based only in the radha miracle

394
00:14:07,199 --> 00:14:10,160
so regarding our research contribution

395
00:14:10,160 --> 00:14:12,639
we define the concept of time-lock

396
00:14:12,639 --> 00:14:14,639
encryption in the uc framework

397
00:14:14,639 --> 00:14:16,639
by defying an ideal functionality the

398
00:14:16,639 --> 00:14:17,839
ftle

399
00:14:17,839 --> 00:14:20,079
we capture privacy

400
00:14:20,079 --> 00:14:23,519
a delay where uh we're actually in the

401
00:14:23,519 --> 00:14:25,600
delay we assume also that the encryption

402
00:14:25,600 --> 00:14:27,600
takes some time

403
00:14:27,600 --> 00:14:30,959
correctness and finally leak because as

404
00:14:30,959 --> 00:14:32,800
i mentioned the adversary might possess

405
00:14:32,800 --> 00:14:34,399
an advantage in the decryption time over

406
00:14:34,399 --> 00:14:35,839
the honest parties

407
00:14:35,839 --> 00:14:37,360
of course ideally the leak function

408
00:14:37,360 --> 00:14:38,880
should be equal to the identity which

409
00:14:38,880 --> 00:14:40,480
means that the adversary doesn't possess

410
00:14:40,480 --> 00:14:42,880
any abundance

411
00:14:42,880 --> 00:14:44,880
and of course there were challenges on

412
00:14:44,880 --> 00:14:47,199
defining the puzzle based on uh

413
00:14:47,199 --> 00:14:49,680
a puzzle-based uctle protocol the first

414
00:14:49,680 --> 00:14:51,519
is that all of all of the messages in

415
00:14:51,519 --> 00:14:52,880
the time then constant of time local

416
00:14:52,880 --> 00:14:55,600
encryption are eventually open

417
00:14:55,600 --> 00:14:56,639
so

418
00:14:56,639 --> 00:14:58,560
a simulator

419
00:14:58,560 --> 00:15:00,480
must

420
00:15:00,480 --> 00:15:03,360
encrypt a fake message let's say and

421
00:15:03,360 --> 00:15:06,399
after a specific time has been reached

422
00:15:06,399 --> 00:15:08,480
the simulator needs to equivocate that

423
00:15:08,480 --> 00:15:11,360
message and open it to a real one so how

424
00:15:11,360 --> 00:15:13,680
is possible the solution is to use not

425
00:15:13,680 --> 00:15:15,920
committing encryption

426
00:15:15,920 --> 00:15:18,639
uh in the rather moral model

427
00:15:18,639 --> 00:15:21,440
the second uh problem is that the the

428
00:15:21,440 --> 00:15:23,600
tle has a concrete nature but we need to

429
00:15:23,600 --> 00:15:24,959
start in the uc framework where the

430
00:15:24,959 --> 00:15:28,160
model is asymptotic so for that

431
00:15:28,160 --> 00:15:31,120
the puzzle solving

432
00:15:31,120 --> 00:15:32,880
should should not be executed locally

433
00:15:32,880 --> 00:15:36,560
because else any puzzle could be just be

434
00:15:36,560 --> 00:15:39,199
solved in just one round so for that we

435
00:15:39,199 --> 00:15:41,279
use the random morally

436
00:15:41,279 --> 00:15:42,880
and the second is that this access to

437
00:15:42,880 --> 00:15:44,399
this oracle should be restricted for

438
00:15:44,399 --> 00:15:45,759
that we introduce the functionality

439
00:15:45,759 --> 00:15:49,040
wrapper as in similar works

440
00:15:49,040 --> 00:15:51,040
this is the extended construction of a

441
00:15:51,040 --> 00:15:52,880
time lock encryption as you can see the

442
00:15:52,880 --> 00:15:54,800
second argument this is where exactly

443
00:15:54,800 --> 00:15:57,279
the simulator can equivocate to the

444
00:15:57,279 --> 00:15:59,199
correct message because there is a call

445
00:15:59,199 --> 00:16:01,360
to the miracle

446
00:16:01,360 --> 00:16:03,440
uh so uh

447
00:16:03,440 --> 00:16:04,720
we linked

448
00:16:04,720 --> 00:16:06,720
a tl construction with that with our uc

449
00:16:06,720 --> 00:16:09,360
definition by introducing a game based

450
00:16:09,360 --> 00:16:10,959
this is actually called the q security

451
00:16:10,959 --> 00:16:13,040
and informally states that it is hard to

452
00:16:13,040 --> 00:16:14,880
reverse a challenge message before the

453
00:16:14,880 --> 00:16:16,240
time comes

454
00:16:16,240 --> 00:16:18,079
we don't capture we only capture one

455
00:16:18,079 --> 00:16:20,240
awareness and no semantic security

456
00:16:20,240 --> 00:16:21,759
but

457
00:16:21,759 --> 00:16:23,440
with the equivocable extension that i

458
00:16:23,440 --> 00:16:25,680
refer earlier is enough for having a uc

459
00:16:25,680 --> 00:16:27,680
realization so we have the next theorem

460
00:16:27,680 --> 00:16:30,000
that says that a tl construction that

461
00:16:30,000 --> 00:16:33,600
satisfies q security uh

462
00:16:33,600 --> 00:16:36,000
actually can you serialize our ideal

463
00:16:36,000 --> 00:16:38,480
functionality fdle

464
00:16:38,480 --> 00:16:39,759
so now i'm going to speak about

465
00:16:39,759 --> 00:16:41,759
astrologers so astrologers actually

466
00:16:41,759 --> 00:16:45,839
combines two very basic ideas of mahmoud

467
00:16:45,839 --> 00:16:48,240
data and specifically

468
00:16:48,240 --> 00:16:50,399
the puzzle that mahmoud provides but

469
00:16:50,399 --> 00:16:52,160
instead of spreading or spreading the

470
00:16:52,160 --> 00:16:54,480
secret across all the puzzle we just

471
00:16:54,480 --> 00:16:56,240
hide it in the last short operation of

472
00:16:56,240 --> 00:16:58,720
the random oracle call

473
00:16:58,720 --> 00:17:00,880
and actually the secret is a key a key

474
00:17:00,880 --> 00:17:03,360
of a symmetric encryption of symmetry

475
00:17:03,360 --> 00:17:04,400
encryption of

476
00:17:04,400 --> 00:17:06,079
of our message uh

477
00:17:06,079 --> 00:17:08,640
similar to the to the reverse that all

478
00:17:08,640 --> 00:17:10,640
construction so combining these two

479
00:17:10,640 --> 00:17:12,400
ideas the puzzle for mahmoodi and the

480
00:17:12,400 --> 00:17:14,160
symmetric encryption that also reverse

481
00:17:14,160 --> 00:17:16,400
uses we have a stroller

482
00:17:16,400 --> 00:17:18,319
as you can see it is it is in the random

483
00:17:18,319 --> 00:17:19,839
molecule model

484
00:17:19,839 --> 00:17:22,000
it is public verifiable without any

485
00:17:22,000 --> 00:17:24,400
knowledge of any trapper information

486
00:17:24,400 --> 00:17:26,720
and also the pathogen generation is

487
00:17:26,720 --> 00:17:28,559
efficient without requiring any

488
00:17:28,559 --> 00:17:30,400
knowledge of any trapper information

489
00:17:30,400 --> 00:17:32,000
because it can be parallelized and

490
00:17:32,000 --> 00:17:33,679
disproportionate to the number of cpu

491
00:17:33,679 --> 00:17:36,320
cores in reality in the uc framework

492
00:17:36,320 --> 00:17:39,840
there's no cpu course so

493
00:17:39,840 --> 00:17:41,919
regarding the security of astrologers

494
00:17:41,919 --> 00:17:45,039
astrology satisfies the q security but

495
00:17:45,039 --> 00:17:47,120
the question is is to security enough in

496
00:17:47,120 --> 00:17:48,240
a standalone

497
00:17:48,240 --> 00:17:49,280
setting

498
00:17:49,280 --> 00:17:50,080
uh

499
00:17:50,080 --> 00:17:53,440
the the answer is no because as i said

500
00:17:53,440 --> 00:17:54,240
it

501
00:17:54,240 --> 00:17:56,880
there there's no any cement it doesn't

502
00:17:56,880 --> 00:17:58,960
provide any semantic security guarantees

503
00:17:58,960 --> 00:18:01,520
only stresses the one wayness of the of

504
00:18:01,520 --> 00:18:04,720
the construction so for that we extended

505
00:18:04,720 --> 00:18:07,039
uh our game-based definition and we give

506
00:18:07,039 --> 00:18:10,960
it a neat cpa style flavor but in in a

507
00:18:10,960 --> 00:18:12,840
time-long setting and

508
00:18:12,840 --> 00:18:15,440
astrologers satisfies this

509
00:18:15,440 --> 00:18:16,960
uh regarding our future research

510
00:18:16,960 --> 00:18:18,240
direction

511
00:18:18,240 --> 00:18:19,919
so first is to improve the scalability

512
00:18:19,919 --> 00:18:21,760
of a stroller boost because now the

513
00:18:21,760 --> 00:18:23,760
positive generation can be parallelized

514
00:18:23,760 --> 00:18:25,200
and proportional to the number of cpu

515
00:18:25,200 --> 00:18:27,919
cores but unfortunately in practice

516
00:18:27,919 --> 00:18:30,240
still it's not very efficient in example

517
00:18:30,240 --> 00:18:32,480
an application like voting so for that

518
00:18:32,480 --> 00:18:35,120
instead of using a cpu we can use a gpu

519
00:18:35,120 --> 00:18:36,160
where

520
00:18:36,160 --> 00:18:37,440
the number of course

521
00:18:37,440 --> 00:18:39,200
are many more

522
00:18:39,200 --> 00:18:40,480
but the architecture is totally

523
00:18:40,480 --> 00:18:42,160
different so it needs proper bench

524
00:18:42,160 --> 00:18:44,160
marking and last

525
00:18:44,160 --> 00:18:46,400
is to enhance enhance and scroll a boost

526
00:18:46,400 --> 00:18:48,799
and make memory hard in order to resist

527
00:18:48,799 --> 00:18:51,039
the hardware acceleration

528
00:18:51,039 --> 00:18:52,720
where help us to predict let's say the

529
00:18:52,720 --> 00:18:54,320
correct parameters when setting the

530
00:18:54,320 --> 00:18:57,360
puzzle difficulty we can use ideas from

531
00:18:57,360 --> 00:19:00,799
the balloon housing paper

532
00:19:01,280 --> 00:19:02,720
in order to predict the correct

533
00:19:02,720 --> 00:19:05,520
parameters but still it needs a proper

534
00:19:05,520 --> 00:19:08,000
benchmarking because also the position

535
00:19:08,000 --> 00:19:09,600
generation should be

536
00:19:09,600 --> 00:19:11,360
should be efficient

537
00:19:11,360 --> 00:19:13,360
uh these are the reference and thank you

538
00:19:13,360 --> 00:19:15,679
for your attention

539
00:19:15,679 --> 00:19:18,559
thank you very much it's very nice

540
00:19:18,559 --> 00:19:20,480
quick summary of a quite complicated

541
00:19:20,480 --> 00:19:22,080
paper um

542
00:19:22,080 --> 00:19:24,480
i don't see anything on the zoom or on

543
00:19:24,480 --> 00:19:26,960
the chat has anyone got

544
00:19:26,960 --> 00:19:30,000
any questions at all

545
00:19:32,559 --> 00:19:34,880
yeah so i guess my my question was uh

546
00:19:34,880 --> 00:19:37,200
you you touched on it right at the end

547
00:19:37,200 --> 00:19:38,720
about the

548
00:19:38,720 --> 00:19:39,440
the

549
00:19:39,440 --> 00:19:40,960
the fact that the person setting the

550
00:19:40,960 --> 00:19:43,120
puzzle or doing the encryption

551
00:19:43,120 --> 00:19:45,840
uh can can you work in parallel whereas

552
00:19:45,840 --> 00:19:48,160
the person who's solving the puzzle has

553
00:19:48,160 --> 00:19:50,240
to kind of compute these hashes in a

554
00:19:50,240 --> 00:19:53,520
serial way um

555
00:19:53,520 --> 00:19:55,520
so i mean

556
00:19:55,520 --> 00:19:57,520
why didn't you do something

557
00:19:57,520 --> 00:19:58,799
referring to the previous talk why

558
00:19:58,799 --> 00:20:00,160
didn't you do something using like

559
00:20:00,160 --> 00:20:01,600
repeated squaring or these kind of

560
00:20:01,600 --> 00:20:02,880
things where

561
00:20:02,880 --> 00:20:05,039
yes

562
00:20:05,120 --> 00:20:07,600
so first of all uh

563
00:20:07,600 --> 00:20:10,000
in order to so in uh first of all in

564
00:20:10,000 --> 00:20:12,640
order to study uh

565
00:20:12,640 --> 00:20:14,240
the reverse construction in the uc

566
00:20:14,240 --> 00:20:15,600
framework we

567
00:20:15,600 --> 00:20:17,840
were needed to work also in the generic

568
00:20:17,840 --> 00:20:20,480
group model so you know it is let's say

569
00:20:20,480 --> 00:20:24,559
it's not bad but it's it's a let's say

570
00:20:24,559 --> 00:20:26,159
a bigger

571
00:20:26,159 --> 00:20:27,840
assumption you know instead of having a

572
00:20:27,840 --> 00:20:29,600
construction that's based only in the in

573
00:20:29,600 --> 00:20:31,200
the random oracle one this is the first

574
00:20:31,200 --> 00:20:32,840
limitation

575
00:20:32,840 --> 00:20:35,600
uh so yes so i can see if you want to

576
00:20:35,600 --> 00:20:37,760
base it on hash functions exactly you

577
00:20:37,760 --> 00:20:39,520
know only has functions you know without

578
00:20:39,520 --> 00:20:41,440
the general group model and the second

579
00:20:41,440 --> 00:20:44,000
is that the because because reverse has

580
00:20:44,000 --> 00:20:45,919
this problem of setting the difficulty

581
00:20:45,919 --> 00:20:47,440
of the puzzle because they they have

582
00:20:47,440 --> 00:20:48,880
discovered many attacks due to the

583
00:20:48,880 --> 00:20:50,400
hardware accelerations they there are

584
00:20:50,400 --> 00:20:52,240
more sophisticated algorithms that can

585
00:20:52,240 --> 00:20:55,440
actually solve uh reversed uh you know

586
00:20:55,440 --> 00:20:58,240
uh doing the shortcuts and actually can

587
00:20:58,240 --> 00:21:01,120
solve reverse puzzle much faster uh we

588
00:21:01,120 --> 00:21:03,918
believe that uh

589
00:21:04,159 --> 00:21:06,640
if we enhance uh a hash function it it

590
00:21:06,640 --> 00:21:09,200
would be more easier that than trying to

591
00:21:09,200 --> 00:21:11,600
enhance let's say the the arithmetics

592
00:21:11,600 --> 00:21:14,720
and the algebra behind reversed uh

593
00:21:14,720 --> 00:21:16,480
construction

594
00:21:16,480 --> 00:21:17,360
okay

595
00:21:17,360 --> 00:21:19,200
cool right we better move on to the next

596
00:21:19,200 --> 00:21:20,880
talk and we have to try and keep on time

597
00:21:20,880 --> 00:21:22,720
so yeah thanks very much klaus for your

598
00:21:22,720 --> 00:21:24,320
talk thank you and do you want to stop

599
00:21:24,320 --> 00:21:25,760
sharing and uh

600
00:21:25,760 --> 00:21:28,240
um i'll hand over to my coach here to

601
00:21:28,240 --> 00:21:31,520
run the rest of it hi everyone this is

602
00:21:31,520 --> 00:21:33,520
yonji and i will be sharing the rest of

603
00:21:33,520 --> 00:21:35,039
the talks

604
00:21:35,039 --> 00:21:38,559
so may we have our next speaker wang yi

605
00:21:38,559 --> 00:21:40,720
presenting the paper titled

606
00:21:40,720 --> 00:21:42,559
identity-based encryption for fair and

607
00:21:42,559 --> 00:21:44,799
limited applications defining

608
00:21:44,799 --> 00:21:45,840
implementing and applying

609
00:21:45,840 --> 00:21:49,840
re-randomizable rcca secure ibe

610
00:21:49,840 --> 00:21:50,799
okay

611
00:21:50,799 --> 00:21:53,280
uh yes can you hear me

612
00:21:53,280 --> 00:21:55,918
yes sure

613
00:21:56,320 --> 00:21:57,440
okay

614
00:21:57,440 --> 00:21:59,120
thank you for introduction

615
00:21:59,120 --> 00:22:00,880
uh welcome to this talk about

616
00:22:00,880 --> 00:22:02,799
identity-based encryption for sale

617
00:22:02,799 --> 00:22:05,360
anonymity applications defining

618
00:22:05,360 --> 00:22:08,159
implementing and applying randomizable

619
00:22:08,159 --> 00:22:10,240
as i say secure ibe

620
00:22:10,240 --> 00:22:12,640
me1 and this is the joint of work with

621
00:22:12,640 --> 00:22:13,840
rumor

622
00:22:13,840 --> 00:22:16,000
huang jiang ting niim

623
00:22:16,000 --> 00:22:19,120
1 and the motif

624
00:22:20,240 --> 00:22:21,919
in this talk you may consider the

625
00:22:21,919 --> 00:22:24,640
applications of fair anonymity in the

626
00:22:24,640 --> 00:22:26,320
same in a scenario of anonymous

627
00:22:26,320 --> 00:22:29,840
communication when someone abuses the

628
00:22:29,840 --> 00:22:31,760
anonymity services for illegal

629
00:22:31,760 --> 00:22:34,400
activities we hope there is a trusted

630
00:22:34,400 --> 00:22:37,360
authority that can revoke the anonymity

631
00:22:37,360 --> 00:22:40,159
of malicious users

632
00:22:40,159 --> 00:22:43,039
obviously identity-based encryption is a

633
00:22:43,039 --> 00:22:45,919
natural candidate for such a setting

634
00:22:45,919 --> 00:22:48,640
in ibe the key generation center can

635
00:22:48,640 --> 00:22:50,799
check any separate tests generated by

636
00:22:50,799 --> 00:22:53,280
the users and play the role of trusted

637
00:22:53,280 --> 00:22:55,600
authority

638
00:22:55,600 --> 00:22:58,320
apart from the fair anonymity the other

639
00:22:58,320 --> 00:23:01,039
properties of such anonymous

640
00:23:01,039 --> 00:23:03,760
communication put some extra constraints

641
00:23:03,760 --> 00:23:06,960
on the underlying encryption scheme

642
00:23:06,960 --> 00:23:09,440
first the scheme should support the

643
00:23:09,440 --> 00:23:11,840
randomization of server tests so that

644
00:23:11,840 --> 00:23:14,240
the server can hide the connections of

645
00:23:14,240 --> 00:23:17,360
incoming and outgoing cipher tests

646
00:23:17,360 --> 00:23:18,320
second

647
00:23:18,320 --> 00:23:20,320
server tests should be anonymous and do

648
00:23:20,320 --> 00:23:22,480
not reveal any information about the

649
00:23:22,480 --> 00:23:26,000
identity of receiver

650
00:23:26,000 --> 00:23:26,880
third

651
00:23:26,880 --> 00:23:28,960
the encryption scheme should be secured

652
00:23:28,960 --> 00:23:30,880
against the active attacker who can

653
00:23:30,880 --> 00:23:33,280
probe the server with malicious server

654
00:23:33,280 --> 00:23:35,520
tests

655
00:23:35,520 --> 00:23:37,440
the combination of those constraints

656
00:23:37,440 --> 00:23:40,159
points at randomizability receivable

657
00:23:40,159 --> 00:23:43,279
anonymity and rcc security

658
00:23:43,279 --> 00:23:45,679
in particular the rcc security is a

659
00:23:45,679 --> 00:23:48,960
meaningful relaxation of cca security

660
00:23:48,960 --> 00:23:51,279
for public key encryption and it is

661
00:23:51,279 --> 00:23:55,039
compatible with randomizability

662
00:23:55,039 --> 00:23:57,440
so we can study how to achieve those

663
00:23:57,440 --> 00:24:00,080
properties in the context of ibe

664
00:24:00,080 --> 00:24:03,039
simultaneously

665
00:24:03,039 --> 00:24:05,679
here are our main results

666
00:24:05,679 --> 00:24:08,159
first we define a new security notion

667
00:24:08,159 --> 00:24:12,320
called anonymous idrca security

668
00:24:12,320 --> 00:24:14,960
in fact gentry has defined the notion of

669
00:24:14,960 --> 00:24:17,760
anonymous idcc security already

670
00:24:17,760 --> 00:24:19,840
it is a combination of receiver

671
00:24:19,840 --> 00:24:23,919
anonymity and idcc security

672
00:24:23,919 --> 00:24:26,080
the only difference between anonymous

673
00:24:26,080 --> 00:24:29,919
idcca and idrcc security is the

674
00:24:29,919 --> 00:24:32,960
decryption oracle

675
00:24:32,960 --> 00:24:36,000
specifically the decryption oracle of

676
00:24:36,000 --> 00:24:39,360
anonymous id rcc security with output

677
00:24:39,360 --> 00:24:42,159
replay when the diffusion result is

678
00:24:42,159 --> 00:24:47,799
equal to the challenge plaintext m0 om1

679
00:24:48,720 --> 00:24:51,360
to build a randomizable ibe with

680
00:24:51,360 --> 00:24:55,039
anonymous idrcc security we start from

681
00:24:55,039 --> 00:24:56,640
the gantry ibe

682
00:24:56,640 --> 00:24:59,200
and consider its variant by modifying

683
00:24:59,200 --> 00:25:00,799
the vector beta

684
00:25:00,799 --> 00:25:03,919
into vector mu

685
00:25:03,919 --> 00:25:06,640
then we apply this variant to the double

686
00:25:06,640 --> 00:25:08,080
strand paradigm

687
00:25:08,080 --> 00:25:11,600
the string the strand eid1 can be used

688
00:25:11,600 --> 00:25:15,279
to randomize both eidm and itself

689
00:25:15,279 --> 00:25:16,480
correctly

690
00:25:16,480 --> 00:25:18,960
however this cryptosystem does not

691
00:25:18,960 --> 00:25:23,600
satisfy anonymous idrcc security

692
00:25:23,600 --> 00:25:26,159
because the adversary insecurity gain

693
00:25:26,159 --> 00:25:27,919
can guess the plaintext and the

694
00:25:27,919 --> 00:25:31,120
re-encrypted strength eidm with it

695
00:25:31,120 --> 00:25:33,279
and verifying the guess by during the

696
00:25:33,279 --> 00:25:35,600
equation oracle

697
00:25:35,600 --> 00:25:38,880
so we have to restrict the itemization

698
00:25:38,880 --> 00:25:40,840
of ciphertext by perturbing the

699
00:25:40,840 --> 00:25:43,919
randomness in the first strand with

700
00:25:43,919 --> 00:25:45,120
extra

701
00:25:45,120 --> 00:25:47,360
z0 and z1

702
00:25:47,360 --> 00:25:49,679
however adversary is still able to

703
00:25:49,679 --> 00:25:53,600
randomize eidm with public parameters

704
00:25:53,600 --> 00:25:57,440
identity and the plain text

705
00:25:57,440 --> 00:25:59,679
so we mask the validity checking part

706
00:25:59,679 --> 00:26:01,600
with the secret value u

707
00:26:01,600 --> 00:26:03,840
and encapsulate u with another two

708
00:26:03,840 --> 00:26:04,880
strings

709
00:26:04,880 --> 00:26:07,360
now there is only one way to randomize

710
00:26:07,360 --> 00:26:08,640
the zero test

711
00:26:08,640 --> 00:26:10,960
and we can prove that this construction

712
00:26:10,960 --> 00:26:15,039
is anonymous idrcc secure

713
00:26:16,080 --> 00:26:19,279
finally we apply above ibe to build

714
00:26:19,279 --> 00:26:23,200
universal mix net with fair anonymity

715
00:26:23,200 --> 00:26:25,200
first the trustee authority plays the

716
00:26:25,200 --> 00:26:27,440
role of key generation center and

717
00:26:27,440 --> 00:26:29,840
generates secret keys for users and

718
00:26:29,840 --> 00:26:31,440
mixed nodes

719
00:26:31,440 --> 00:26:33,440
then the senders generate package by

720
00:26:33,440 --> 00:26:35,679
encrypting message with symmetric

721
00:26:35,679 --> 00:26:38,720
encryption and our ib scheme and upload

722
00:26:38,720 --> 00:26:41,279
package to the bulletin board

723
00:26:41,279 --> 00:26:43,679
then the mix now take turns to decrypt

724
00:26:43,679 --> 00:26:45,039
several tests

725
00:26:45,039 --> 00:26:48,240
symmetric server test and randomize ibus

726
00:26:48,240 --> 00:26:50,840
have a test in the

727
00:26:50,840 --> 00:26:54,080
package finally the receiver can equip

728
00:26:54,080 --> 00:26:56,960
the package and retrieve the message

729
00:26:56,960 --> 00:26:59,840
compared with previous universal mix net

730
00:26:59,840 --> 00:27:02,159
our identity-based universal mixnet

731
00:27:02,159 --> 00:27:04,799
achieves fair anonymity and enjoy

732
00:27:04,799 --> 00:27:07,840
enjoy stronger unlikability and provide

733
00:27:07,840 --> 00:27:11,679
more covert communication for the sender

734
00:27:11,679 --> 00:27:14,880
okay that's all thank you

735
00:27:15,200 --> 00:27:17,520
thank you very much for your talk

736
00:27:17,520 --> 00:27:21,840
is there any questions from the audience

737
00:27:22,960 --> 00:27:25,360
if anyone has any questions you can also

738
00:27:25,360 --> 00:27:27,440
raise it through the

739
00:27:27,440 --> 00:27:32,360
zulic link sent by kevin

740
00:27:40,720 --> 00:27:43,279
can anyone hear me

741
00:27:43,279 --> 00:27:46,559
can anyone hear me yes i can hear you

742
00:27:46,559 --> 00:27:48,960
okay maybe one quick question

743
00:27:48,960 --> 00:27:53,120
um so in your security game um

744
00:27:53,120 --> 00:27:56,480
does the adversary get to choose the

745
00:27:56,480 --> 00:27:58,799
ids and the message

746
00:27:58,799 --> 00:28:01,440
before having access to the decryption

747
00:28:01,440 --> 00:28:03,039
oracles

748
00:28:03,039 --> 00:28:04,960
yes

749
00:28:04,960 --> 00:28:07,279
so in this sense is it selectively

750
00:28:07,279 --> 00:28:09,760
secure

751
00:28:11,679 --> 00:28:13,279
it is

752
00:28:13,279 --> 00:28:15,120
yeah this is stronger than selective

753
00:28:15,120 --> 00:28:16,960
circuit secure

754
00:28:16,960 --> 00:28:18,320
the

755
00:28:18,320 --> 00:28:22,480
adversary can access the key generation

756
00:28:22,480 --> 00:28:26,640
key generation oracle and because the

757
00:28:26,640 --> 00:28:29,440
identity identity under the plan text is

758
00:28:29,440 --> 00:28:32,000
provided by the adversary and not by the

759
00:28:32,000 --> 00:28:34,480
challenger

760
00:28:34,799 --> 00:28:37,520
okay i see thank you very much

761
00:28:37,520 --> 00:28:39,600
okay thank you

762
00:28:39,600 --> 00:28:43,279
okay um we are okay let's

763
00:28:43,279 --> 00:28:47,120
invite our next speaker

764
00:28:49,039 --> 00:28:50,799
so

765
00:28:50,799 --> 00:28:53,918
we will have our

766
00:28:54,159 --> 00:28:55,600
yeah fourth talk

767
00:28:55,600 --> 00:28:57,600
simulation based by selective opening

768
00:28:57,600 --> 00:29:00,480
security for public key encryption

769
00:29:00,480 --> 00:29:03,840
it will be represented by young rupang

770
00:29:03,840 --> 00:29:06,959
yes please go ahead

771
00:29:07,440 --> 00:29:09,200
thanks for the instructions

772
00:29:09,200 --> 00:29:11,120
i'm looking at today i'm going to talk

773
00:29:11,120 --> 00:29:13,039
about how to define and construct the

774
00:29:13,039 --> 00:29:15,919
pte scheme with bioselectable visibility

775
00:29:15,919 --> 00:29:17,520
this is based on drawing to work with

776
00:29:17,520 --> 00:29:19,840
screenshot 204 and jia world

777
00:29:19,840 --> 00:29:21,760
so a pke scheme consists of several

778
00:29:21,760 --> 00:29:24,080
results namely the traditional reserve

779
00:29:24,080 --> 00:29:25,840
which produces a pair of publicly and

780
00:29:25,840 --> 00:29:28,399
secret key the equation algorithm which

781
00:29:28,399 --> 00:29:30,960
includes a message with a public key and

782
00:29:30,960 --> 00:29:32,640
the declaration algorithm which

783
00:29:32,640 --> 00:29:34,640
decreases some text to recurrent message

784
00:29:34,640 --> 00:29:36,559
with a simple key it's correctness

785
00:29:36,559 --> 00:29:38,960
requested the declaration can always

786
00:29:38,960 --> 00:29:41,120
recover the correct message from only

787
00:29:41,120 --> 00:29:42,720
security that

788
00:29:42,720 --> 00:29:44,480
generated some text

789
00:29:44,480 --> 00:29:46,480
and it's security requested that the

790
00:29:46,480 --> 00:29:48,240
author can learn any information about

791
00:29:48,240 --> 00:29:50,799
the message from the sort of text this

792
00:29:50,799 --> 00:29:52,880
can be defined by requires that those

793
00:29:52,880 --> 00:29:55,039
threads will have you simulated

794
00:29:55,039 --> 00:29:57,279
sorry

795
00:29:58,240 --> 00:30:02,000
sorry uh is there any problem

796
00:30:02,000 --> 00:30:04,799
i guess you can proceed

797
00:30:04,799 --> 00:30:07,520
you can you can just go ahead

798
00:30:07,520 --> 00:30:09,840
okay

799
00:30:09,840 --> 00:30:12,880
so this can be defined by preparing that

800
00:30:12,880 --> 00:30:13,840
those

801
00:30:13,840 --> 00:30:15,760
uh wheel can be simulated by simulator

802
00:30:15,760 --> 00:30:18,000
that takes nothing as input

803
00:30:18,000 --> 00:30:21,200
okay so a pk scheme is usually deployed

804
00:30:21,200 --> 00:30:23,440
in the particular sector that is there

805
00:30:23,440 --> 00:30:26,080
are many senders and many receivers

806
00:30:26,080 --> 00:30:27,919
each receiver has only publicly and

807
00:30:27,919 --> 00:30:30,480
super key and the sender sends a message

808
00:30:30,480 --> 00:30:32,480
to the receiver by including the

809
00:30:32,480 --> 00:30:34,320
messenger with the results

810
00:30:34,320 --> 00:30:36,880
public key so in this case it's coming

811
00:30:36,880 --> 00:30:39,520
that some senders and receivers may be

812
00:30:39,520 --> 00:30:41,840
corrupted and the adversary can learn

813
00:30:41,840 --> 00:30:43,360
their interest dates

814
00:30:43,360 --> 00:30:46,399
in this case it's simply accessible to

815
00:30:46,399 --> 00:30:48,559
practical messengers that are sent by a

816
00:30:48,559 --> 00:30:52,080
corrupted sender and messages that are

817
00:30:52,080 --> 00:30:54,799
received by a crafted receiver while we

818
00:30:54,799 --> 00:30:56,960
still hope to protect messengers that

819
00:30:56,960 --> 00:31:00,320
are transmitted between authority users

820
00:31:00,320 --> 00:31:02,559
especially when the correct messages and

821
00:31:02,559 --> 00:31:04,960
account messages may be written the

822
00:31:04,960 --> 00:31:06,559
picky scheme with this throughout the

823
00:31:06,559 --> 00:31:09,840
curriculum key is not to have selected

824
00:31:09,840 --> 00:31:11,919
and in literature we have formally

825
00:31:11,919 --> 00:31:15,039
started the central select open security

826
00:31:15,039 --> 00:31:17,279
where only the centers can be crafted

827
00:31:17,279 --> 00:31:20,000
and the receiver's leveling security

828
00:31:20,000 --> 00:31:22,640
where only the reservoirs can be crafted

829
00:31:22,640 --> 00:31:24,880
however we have not formally started how

830
00:31:24,880 --> 00:31:27,200
to define the construct pte schemes with

831
00:31:27,200 --> 00:31:30,240
by select for open security where both

832
00:31:30,240 --> 00:31:32,080
the senders and the receivers can be

833
00:31:32,080 --> 00:31:33,919
corrupted

834
00:31:33,919 --> 00:31:34,799
so

835
00:31:34,799 --> 00:31:36,880
in this work we formally initiate the

836
00:31:36,880 --> 00:31:39,679
study of bioselective open security for

837
00:31:39,679 --> 00:31:42,320
pke schemes and are resulting through

838
00:31:42,320 --> 00:31:44,399
four parts

839
00:31:44,399 --> 00:31:46,399
first we give a formal definition of

840
00:31:46,399 --> 00:31:49,039
selective selective open security for pk

841
00:31:49,039 --> 00:31:52,000
schemes the definition follows previous

842
00:31:52,000 --> 00:31:53,840
simulation business definitions of

843
00:31:53,840 --> 00:31:57,200
central selection security and that are

844
00:31:57,200 --> 00:32:01,039
receivable to open security except that

845
00:32:01,039 --> 00:32:03,600
those three this new definition can

846
00:32:03,600 --> 00:32:05,840
craft the centers and the

847
00:32:05,840 --> 00:32:08,480
receivers simultaneously

848
00:32:08,480 --> 00:32:10,799
we then give a construction of piggy

849
00:32:10,799 --> 00:32:11,679
scheme

850
00:32:11,679 --> 00:32:13,840
with bias electrical

851
00:32:13,840 --> 00:32:17,279
is a rhetorical model

852
00:32:17,440 --> 00:32:19,440
in particular we showed that the simple

853
00:32:19,440 --> 00:32:22,000
construction of key scheme from a key

854
00:32:22,000 --> 00:32:24,559
encapsulation mechanism and the welcome

855
00:32:24,559 --> 00:32:27,440
pad is already by selecting working

856
00:32:27,440 --> 00:32:31,120
secure if we derive the masking key of

857
00:32:31,120 --> 00:32:32,720
the one time pad

858
00:32:32,720 --> 00:32:35,039
from the encapsulated key of the chem

859
00:32:35,039 --> 00:32:38,240
scheme we are running morocco

860
00:32:38,240 --> 00:32:40,320
we also consider a weak notion of a

861
00:32:40,320 --> 00:32:43,200
selective open security that is the

862
00:32:43,200 --> 00:32:46,159
adversary has to choose its

863
00:32:46,159 --> 00:32:47,679
attacking type

864
00:32:47,679 --> 00:32:49,840
i've seen the public keys

865
00:32:49,840 --> 00:32:52,159
the definition is

866
00:32:52,159 --> 00:32:54,320
weaker than the standard by selective

867
00:32:54,320 --> 00:32:57,519
open security but it is still strictly

868
00:32:57,519 --> 00:32:59,120
stronger than the sender selective

869
00:32:59,120 --> 00:33:01,360
principality and the receiver selective

870
00:33:01,360 --> 00:33:04,159
open security actually it implies the

871
00:33:04,159 --> 00:33:05,840
requirements that

872
00:33:05,840 --> 00:33:07,760
a piggy scheme has both the single

873
00:33:07,760 --> 00:33:09,679
selective security and the reservoir

874
00:33:09,679 --> 00:33:11,919
selective of this pretty

875
00:33:11,919 --> 00:33:15,120
okay so finally we give a construction

876
00:33:15,120 --> 00:33:17,840
of picky scheme with big bi selective

877
00:33:17,840 --> 00:33:19,440
open security

878
00:33:19,440 --> 00:33:21,840
to achieve this goal we

879
00:33:21,840 --> 00:33:23,760
present a new printer called key

880
00:33:23,760 --> 00:33:27,120
equivalent boost server and instantiate

881
00:33:27,120 --> 00:33:29,519
it from either the dde transaction or

882
00:33:29,519 --> 00:33:32,559
the dc assumption within a

883
00:33:32,559 --> 00:33:34,960
general construction of key scheme with

884
00:33:34,960 --> 00:33:37,440
weak by selective open security for this

885
00:33:37,440 --> 00:33:38,720
new printer

886
00:33:38,720 --> 00:33:41,039
okay so for some reason we are not able

887
00:33:41,039 --> 00:33:44,480
to cover all details of our results uh

888
00:33:44,480 --> 00:33:46,320
if you are interested please uh watch

889
00:33:46,320 --> 00:33:48,480
the oncoming youtube or with our people

890
00:33:48,480 --> 00:33:50,320
for more details that's all thanks for

891
00:33:50,320 --> 00:33:51,600
noticing and

892
00:33:51,600 --> 00:33:53,840
to

893
00:33:55,200 --> 00:33:57,840
thank you ruben very nice talk

894
00:33:57,840 --> 00:34:02,039
any questions from the audience

895
00:34:07,440 --> 00:34:11,440
the zulic chat is also quite quiet

896
00:34:11,440 --> 00:34:12,399
um

897
00:34:12,399 --> 00:34:14,320
okay i have one question for you

898
00:34:14,320 --> 00:34:16,800
europang

899
00:34:17,839 --> 00:34:19,679
in your security definition you follow

900
00:34:19,679 --> 00:34:21,918
the simulation based paradigm i'm

901
00:34:21,918 --> 00:34:24,639
wondering if it is possible to define an

902
00:34:24,639 --> 00:34:27,679
ind based security notion

903
00:34:27,679 --> 00:34:29,839
for this bi-directional selective

904
00:34:29,839 --> 00:34:31,918
opening

905
00:34:31,918 --> 00:34:33,119
uh yes

906
00:34:33,119 --> 00:34:34,239
uh uh

907
00:34:34,239 --> 00:34:36,639
we have uh the

908
00:34:36,639 --> 00:34:39,918
vast electrical security for uh either

909
00:34:39,918 --> 00:34:43,520
your id based set here but uh there are

910
00:34:43,520 --> 00:34:46,399
some restrictions in the definition uh

911
00:34:46,399 --> 00:34:48,639
in the center

912
00:34:48,639 --> 00:34:51,280
uh senator secretary i'm going to do

913
00:34:51,280 --> 00:34:53,599
serious requirements of the case

914
00:34:53,599 --> 00:34:54,960
so

915
00:34:54,960 --> 00:34:56,879
the research here is that we have to

916
00:34:56,879 --> 00:35:00,640
restrict the mess distribution uh

917
00:35:00,640 --> 00:35:02,880
submitted by the doctor that is in a

918
00:35:02,880 --> 00:35:05,520
simulation based uh definition we don't

919
00:35:05,520 --> 00:35:07,680
have to restrict the message

920
00:35:07,680 --> 00:35:09,680
distribution submitted by the grocery

921
00:35:09,680 --> 00:35:12,720
but if you consider the anti-beast you

922
00:35:12,720 --> 00:35:13,680
have to

923
00:35:13,680 --> 00:35:14,960
give some

924
00:35:14,960 --> 00:35:17,200
artificial restriction on the massive

925
00:35:17,200 --> 00:35:19,680
diffusion so the

926
00:35:19,680 --> 00:35:22,560
personal laser i think the idp

927
00:35:22,560 --> 00:35:26,640
definition is a bit uh artificial and we

928
00:35:26,640 --> 00:35:28,960
prefer to have a simulation-based one

929
00:35:28,960 --> 00:35:30,400
and also

930
00:35:30,400 --> 00:35:33,760
a simulation-based security is uh should

931
00:35:33,760 --> 00:35:35,680
be stronger than the imdb

932
00:35:35,680 --> 00:35:37,040
security

933
00:35:37,040 --> 00:35:37,920
so

934
00:35:37,920 --> 00:35:40,079
that's a strong uh that's a stronger

935
00:35:40,079 --> 00:35:42,880
definition and it seems more meaningful

936
00:35:42,880 --> 00:35:46,000
to construct kiki scheme with a stronger

937
00:35:46,000 --> 00:35:47,839
security

938
00:35:47,839 --> 00:35:50,079
well can you formally prove that the

939
00:35:50,079 --> 00:35:52,320
simulation base is strictly stronger

940
00:35:52,320 --> 00:35:54,560
than the ind base have you tried to

941
00:35:54,560 --> 00:35:57,200
exploit that

942
00:35:57,200 --> 00:36:00,640
uh i'm not sure if uh formative formal

943
00:36:00,640 --> 00:36:03,599
uh reduction exists uh actually it

944
00:36:03,599 --> 00:36:05,680
depends on the

945
00:36:05,680 --> 00:36:07,040
type of the

946
00:36:07,040 --> 00:36:08,240
definition

947
00:36:08,240 --> 00:36:12,240
so in some cases uh the uh the

948
00:36:12,240 --> 00:36:14,079
simulation based uh definition can't

949
00:36:14,079 --> 00:36:15,920
imply the individual's definition

950
00:36:15,920 --> 00:36:17,359
because at all seriously the two

951
00:36:17,359 --> 00:36:19,520
definitions has different powers

952
00:36:19,520 --> 00:36:21,680
but uh

953
00:36:21,680 --> 00:36:24,160
uh actually uh

954
00:36:24,160 --> 00:36:27,839
if we have some uh digital definition it

955
00:36:27,839 --> 00:36:31,920
is possible to prove that i think

956
00:36:31,920 --> 00:36:35,680
okay great answer thank you very much

957
00:36:35,680 --> 00:36:37,200
any questions

958
00:36:37,200 --> 00:36:40,598
from others

959
00:36:42,880 --> 00:36:45,200
well if no then let's thank rupang again

960
00:36:45,200 --> 00:36:49,598
and welcome our next speaker

961
00:36:50,560 --> 00:36:53,040
okay shall we have uh

962
00:36:53,040 --> 00:36:54,800
heinz hindsight

963
00:36:54,800 --> 00:36:58,160
yes presenting the yeah presenting the

964
00:36:58,160 --> 00:37:00,560
cam with tight enhanced security in the

965
00:37:00,560 --> 00:37:02,640
multi-user setting impossibility results

966
00:37:02,640 --> 00:37:05,119
and optimal tightness yeah

967
00:37:05,119 --> 00:37:06,839
please go ahead

968
00:37:06,839 --> 00:37:09,599
okay thanks for the introduction hi

969
00:37:09,599 --> 00:37:12,320
everyone i'm shaihan this is a joint to

970
00:37:12,320 --> 00:37:14,960
work with shanghai and daoku let me

971
00:37:14,960 --> 00:37:17,280
directly start with the general overview

972
00:37:17,280 --> 00:37:21,200
of key encapsulation mechanism

973
00:37:21,760 --> 00:37:24,400
we consider two users alice and bob

974
00:37:24,400 --> 00:37:26,240
alice generates her public key and

975
00:37:26,240 --> 00:37:28,880
secret key and with the public key of

976
00:37:28,880 --> 00:37:31,760
values bob can produce an encapsulated

977
00:37:31,760 --> 00:37:34,560
key k and a cipher text c

978
00:37:34,560 --> 00:37:37,119
the alice can use the secret keys to

979
00:37:37,119 --> 00:37:40,000
recover the encapsulated key from c

980
00:37:40,000 --> 00:37:42,640
this way alex and bob establish a shared

981
00:37:42,640 --> 00:37:44,800
encapsulated key

982
00:37:44,800 --> 00:37:47,040
cam has many applications

983
00:37:47,040 --> 00:37:49,520
for example in constructing public

984
00:37:49,520 --> 00:37:50,640
encryption

985
00:37:50,640 --> 00:37:54,640
authenticated key exchange protocols etc

986
00:37:54,640 --> 00:37:56,880
in real world scenarios there might be

987
00:37:56,880 --> 00:37:59,520
many users each of them generates their

988
00:37:59,520 --> 00:38:01,839
own keys and each two of them might

989
00:38:01,839 --> 00:38:04,160
communicate and send many ciphertexts to

990
00:38:04,160 --> 00:38:06,560
each other this is a so-called smart

991
00:38:06,560 --> 00:38:08,560
user setting

992
00:38:08,560 --> 00:38:10,960
in this city our adversary is able to

993
00:38:10,960 --> 00:38:13,440
see all users public keys and all cypher

994
00:38:13,440 --> 00:38:15,920
tests sending over the public channels

995
00:38:15,920 --> 00:38:18,240
moreover a powerful adversary may even

996
00:38:18,240 --> 00:38:20,800
crack some users and obtain their secret

997
00:38:20,800 --> 00:38:23,040
keys sk1 sk2

998
00:38:23,040 --> 00:38:25,760
and may obtain some keys encapsulated in

999
00:38:25,760 --> 00:38:28,960
some ciphertexts like they like the k1

1000
00:38:28,960 --> 00:38:30,160
and k2

1001
00:38:30,160 --> 00:38:32,880
the security of cam asks the the

1002
00:38:32,880 --> 00:38:34,720
unreviewed key the unreviewed

1003
00:38:34,720 --> 00:38:37,760
encapsulated key under uncrafted users

1004
00:38:37,760 --> 00:38:39,599
to be sued random

1005
00:38:39,599 --> 00:38:42,400
such a strong yet realistic security is

1006
00:38:42,400 --> 00:38:44,880
formalized and enhanced security in our

1007
00:38:44,880 --> 00:38:46,960
work

1008
00:38:46,960 --> 00:38:48,800
to prove the security of camp a

1009
00:38:48,800 --> 00:38:50,880
commonwealth is using a security

1010
00:38:50,880 --> 00:38:52,000
reduction

1011
00:38:52,000 --> 00:38:54,079
which turns any adversary a breaking

1012
00:38:54,079 --> 00:38:57,440
camps security into an adversary b

1013
00:38:57,440 --> 00:38:59,599
solving some hard problem

1014
00:38:59,599 --> 00:39:02,079
and if the security loss factor l of the

1015
00:39:02,079 --> 00:39:04,880
reduction is a constant then we call cam

1016
00:39:04,880 --> 00:39:08,160
has a tight security

1017
00:39:08,160 --> 00:39:10,400
it is desirable to have tightly secured

1018
00:39:10,400 --> 00:39:13,040
cam however starting from the similar

1019
00:39:13,040 --> 00:39:14,560
work by coral

1020
00:39:14,560 --> 00:39:17,839
badger adore at eurocrypt 16 showed that

1021
00:39:17,839 --> 00:39:19,440
touch security under adaptive

1022
00:39:19,440 --> 00:39:23,200
corruptions is impossible to achieve if

1023
00:39:23,200 --> 00:39:25,359
either secret key has the key uniqueness

1024
00:39:25,359 --> 00:39:27,440
property or secret key has key

1025
00:39:27,440 --> 00:39:30,720
randomization property

1026
00:39:30,720 --> 00:39:32,720
and by the existing impossibility

1027
00:39:32,720 --> 00:39:34,000
results

1028
00:39:34,000 --> 00:39:37,040
uh this rules out some camps on their

1029
00:39:37,040 --> 00:39:38,079
tights

1030
00:39:38,079 --> 00:39:40,320
tights security on the corruptions like

1031
00:39:40,320 --> 00:39:43,280
the air gamma cam

1032
00:39:43,280 --> 00:39:44,720
however many

1033
00:39:44,720 --> 00:39:46,800
well-known camps including the grammar

1034
00:39:46,800 --> 00:39:49,359
shoot and crossover decimate cam

1035
00:39:49,359 --> 00:39:51,200
their secret key has neither key

1036
00:39:51,200 --> 00:39:54,079
uniqueness nor key randomization

1037
00:39:54,079 --> 00:39:56,720
so determine determining whether tetanus

1038
00:39:56,720 --> 00:39:59,520
impossibility holds for such cam schemes

1039
00:39:59,520 --> 00:40:02,240
needs new techniques

1040
00:40:02,240 --> 00:40:04,560
and in our work we introduce a new

1041
00:40:04,560 --> 00:40:07,680
technical tool called kemp's rank

1042
00:40:07,680 --> 00:40:09,920
first we study the equivalence of secret

1043
00:40:09,920 --> 00:40:11,599
keys when

1044
00:40:11,599 --> 00:40:12,880
they are used

1045
00:40:12,880 --> 00:40:15,359
they are used to encapsulate a set of

1046
00:40:15,359 --> 00:40:17,359
cipher text x

1047
00:40:17,359 --> 00:40:20,800
for a pair sk and sk prime

1048
00:40:20,800 --> 00:40:21,920
they are

1049
00:40:21,920 --> 00:40:24,640
decap equivalent with respect to the set

1050
00:40:24,640 --> 00:40:27,920
x if for every ciphertext in x

1051
00:40:27,920 --> 00:40:30,880
this calculation using sk equals the

1052
00:40:30,880 --> 00:40:33,520
calculation using sk prime

1053
00:40:33,520 --> 00:40:35,599
with this relation we can partition the

1054
00:40:35,599 --> 00:40:38,000
secret key space into many equivalent

1055
00:40:38,000 --> 00:40:40,560
classes

1056
00:40:41,760 --> 00:40:45,200
in particular for an element c1 in x if

1057
00:40:45,200 --> 00:40:48,240
x defines small equivalent classes then

1058
00:40:48,240 --> 00:40:51,520
x set minus c1 then we call this element

1059
00:40:51,520 --> 00:40:55,040
c one is an independent element in x

1060
00:40:55,040 --> 00:40:58,160
otherwise that x defines exactly the

1061
00:40:58,160 --> 00:41:00,800
same relation with x z minus c one they

1062
00:41:00,800 --> 00:41:02,640
will then we call c one is the dependent

1063
00:41:02,640 --> 00:41:05,280
element in x

1064
00:41:05,280 --> 00:41:07,920
so starting for from every ciphertext

1065
00:41:07,920 --> 00:41:11,760
set x we can drop all dependent elements

1066
00:41:11,760 --> 00:41:13,440
without changing the equivalence

1067
00:41:13,440 --> 00:41:15,280
relation it's defined

1068
00:41:15,280 --> 00:41:18,160
and in the end every every elements left

1069
00:41:18,160 --> 00:41:20,319
are independent ones and we call the

1070
00:41:20,319 --> 00:41:23,040
resulting subset x prime of x and

1071
00:41:23,040 --> 00:41:26,000
independent steps

1072
00:41:27,359 --> 00:41:30,240
so for set x it may have many

1073
00:41:30,240 --> 00:41:31,839
independent sets

1074
00:41:31,839 --> 00:41:33,760
it may have have many independent

1075
00:41:33,760 --> 00:41:36,319
subsets x prime and we define the rank

1076
00:41:36,319 --> 00:41:38,160
of x and the size of the largest

1077
00:41:38,160 --> 00:41:40,960
independent set of x

1078
00:41:40,960 --> 00:41:44,000
by taking x as a whole ciphertext space

1079
00:41:44,000 --> 00:41:46,240
we define the rank of k

1080
00:41:46,240 --> 00:41:47,119
and it

1081
00:41:47,119 --> 00:41:49,040
also equals the size of the largest

1082
00:41:49,040 --> 00:41:52,560
independent state of ciphertext space

1083
00:41:52,560 --> 00:41:55,040
with the notion of rank we established

1084
00:41:55,040 --> 00:41:57,200
our new impossibility results by mental

1085
00:41:57,200 --> 00:41:58,400
reduction

1086
00:41:58,400 --> 00:42:01,200
namely as long as cam has a polynomial

1087
00:42:01,200 --> 00:42:04,079
rank then it is impossible to achieve a

1088
00:42:04,079 --> 00:42:06,480
tight enhanced security and the security

1089
00:42:06,480 --> 00:42:09,280
loss is as at least linear in the number

1090
00:42:09,280 --> 00:42:11,440
of users

1091
00:42:11,440 --> 00:42:13,760
then we apply our impossibility results

1092
00:42:13,760 --> 00:42:16,000
to many well-known camps by showing that

1093
00:42:16,000 --> 00:42:18,160
their rank is polynomially bonded for

1094
00:42:18,160 --> 00:42:20,560
example the rank of the cramship camp is

1095
00:42:20,560 --> 00:42:21,440
two

1096
00:42:21,440 --> 00:42:23,280
and the rank of crossover deathmatch

1097
00:42:23,280 --> 00:42:25,040
camp is no more than four

1098
00:42:25,040 --> 00:42:26,800
therefore the enhanced security of these

1099
00:42:26,800 --> 00:42:28,880
schemes inherently suffers from a linear

1100
00:42:28,880 --> 00:42:30,720
security loss when reducing to

1101
00:42:30,720 --> 00:42:33,680
non-interactive assumptions

1102
00:42:33,680 --> 00:42:36,480
from a positive side we also show that

1103
00:42:36,480 --> 00:42:38,960
this linear security loss is achievable

1104
00:42:38,960 --> 00:42:41,680
by giving two reductions

1105
00:42:41,680 --> 00:42:43,839
and this together with our impossibility

1106
00:42:43,839 --> 00:42:45,839
results show that for camps with

1107
00:42:45,839 --> 00:42:48,480
polynomial rank the linear security work

1108
00:42:48,480 --> 00:42:52,720
factor for enhanced security is optimal

1109
00:42:52,720 --> 00:42:54,400
to summarize

1110
00:42:54,400 --> 00:42:57,119
in our work we define the realistic

1111
00:42:57,119 --> 00:42:59,359
enhanced security for cam and we

1112
00:42:59,359 --> 00:43:01,280
developed a new technical tool called

1113
00:43:01,280 --> 00:43:04,160
kemp's rank to identify a class of cam

1114
00:43:04,160 --> 00:43:06,800
schemes for which impossibility of test

1115
00:43:06,800 --> 00:43:09,119
reduction holds

1116
00:43:09,119 --> 00:43:11,280
and finally we show the linear security

1117
00:43:11,280 --> 00:43:13,680
loss is achievable and optimal for camps

1118
00:43:13,680 --> 00:43:15,440
with polynomial rank

1119
00:43:15,440 --> 00:43:17,280
for more details please have a look at

1120
00:43:17,280 --> 00:43:19,760
the longer video and our paper imprint

1121
00:43:19,760 --> 00:43:23,280
thank you for listening that's it

1122
00:43:23,680 --> 00:43:26,240
thank you very much enjoy a very nice

1123
00:43:26,240 --> 00:43:27,359
talk

1124
00:43:27,359 --> 00:43:30,000
any questions from the audience you can

1125
00:43:30,000 --> 00:43:32,000
just anneal yourself and

1126
00:43:32,000 --> 00:43:34,800
ask questions

1127
00:43:38,800 --> 00:43:40,000
the

1128
00:43:40,000 --> 00:43:41,680
yeah i actually yeah i actually have a

1129
00:43:41,680 --> 00:43:42,640
question

1130
00:43:42,640 --> 00:43:43,920
um

1131
00:43:43,920 --> 00:43:45,599
so can you give

1132
00:43:45,599 --> 00:43:48,079
any kind of intuition

1133
00:43:48,079 --> 00:43:49,359
as to

1134
00:43:49,359 --> 00:43:51,119
why i mean my understanding of the rank

1135
00:43:51,119 --> 00:43:52,880
is it's something to do with equivalent

1136
00:43:52,880 --> 00:43:55,599
private keys i don't

1137
00:43:55,599 --> 00:43:57,280
really understand any kind of intuition

1138
00:43:57,280 --> 00:43:58,960
why the number of private keys should

1139
00:43:58,960 --> 00:44:00,880
have an influence over the multi-user

1140
00:44:00,880 --> 00:44:02,240
security of the

1141
00:44:02,240 --> 00:44:04,640
of a cam do you have like a like any

1142
00:44:04,640 --> 00:44:06,560
kind of simple thought where to think

1143
00:44:06,560 --> 00:44:08,720
about that

1144
00:44:08,720 --> 00:44:11,280
um because uh we will prove the

1145
00:44:11,280 --> 00:44:13,200
impossibility results by the mental

1146
00:44:13,200 --> 00:44:16,560
reduction and we define we propose a

1147
00:44:16,560 --> 00:44:19,040
specific adversary a star star can

1148
00:44:19,040 --> 00:44:20,640
utilize

1149
00:44:20,640 --> 00:44:23,520
this this property to

1150
00:44:23,520 --> 00:44:24,720
uh to

1151
00:44:24,720 --> 00:44:27,839
to if to bounce the security for boss

1152
00:44:27,839 --> 00:44:28,720
and

1153
00:44:28,720 --> 00:44:31,040
in particular the anniversary will

1154
00:44:31,040 --> 00:44:34,160
randomly choose one of the q ciphertexts

1155
00:44:34,160 --> 00:44:36,880
to to change the ciphertext one of the

1156
00:44:36,880 --> 00:44:39,040
queue change server tests

1157
00:44:39,040 --> 00:44:40,960
and uh

1158
00:44:40,960 --> 00:44:43,119
the probability that the chosen

1159
00:44:43,119 --> 00:44:46,720
ciphertext is a dependent one by our

1160
00:44:46,720 --> 00:44:51,440
notion camera rank is bounded by uh

1161
00:44:51,440 --> 00:44:53,760
the number the rank of cam over the

1162
00:44:53,760 --> 00:44:56,480
total number q so if the

1163
00:44:56,480 --> 00:44:58,880
point the rank is a polynomial then we

1164
00:44:58,880 --> 00:45:01,040
can always choose the number of

1165
00:45:01,040 --> 00:45:04,160
ciphertext q to a larger polynomial so

1166
00:45:04,160 --> 00:45:05,440
that's this

1167
00:45:05,440 --> 00:45:07,359
so that's this

1168
00:45:07,359 --> 00:45:08,720
question is a

1169
00:45:08,720 --> 00:45:11,680
sufficiently small

1170
00:45:13,280 --> 00:45:15,760
i guess maybe i was thinking almost of

1171
00:45:15,760 --> 00:45:19,200
the other way around um i mean

1172
00:45:19,200 --> 00:45:21,040
it seems

1173
00:45:21,040 --> 00:45:23,440
it seems like um

1174
00:45:23,440 --> 00:45:25,520
if you have if you have lots of

1175
00:45:25,520 --> 00:45:27,760
different secret keys

1176
00:45:27,760 --> 00:45:30,000
um

1177
00:45:30,160 --> 00:45:32,240
i mean it almost seems worse right i

1178
00:45:32,240 --> 00:45:34,240
mean if if i have if i have lots of

1179
00:45:34,240 --> 00:45:35,920
public keys and it turns out that lots

1180
00:45:35,920 --> 00:45:37,599
of people's secret keys can decrypt a

1181
00:45:37,599 --> 00:45:39,440
cipher text to me that feels like a

1182
00:45:39,440 --> 00:45:41,520
weaker a weaker system but you're you're

1183
00:45:41,520 --> 00:45:43,680
saying there's actually strength

1184
00:45:43,680 --> 00:45:45,119
they're saying somehow it gets stronger

1185
00:45:45,119 --> 00:45:46,880
by having more secret keys or something

1186
00:45:46,880 --> 00:45:49,839
i'm not sure i understand

1187
00:45:50,319 --> 00:45:52,560
yes

1188
00:45:54,960 --> 00:45:56,640
so it's okay i should just read your

1189
00:45:56,640 --> 00:45:57,750
paper

1190
00:45:57,750 --> 00:46:00,820
[Music]

1191
00:46:01,680 --> 00:46:02,800
i think i agree that it's

1192
00:46:02,800 --> 00:46:05,839
counter-intuitive though

1193
00:46:10,000 --> 00:46:12,400
great discussion um any more questions

1194
00:46:12,400 --> 00:46:15,720
from the audience

1195
00:46:18,880 --> 00:46:20,800
we still have one or two minutes let me

1196
00:46:20,800 --> 00:46:23,599
erase the naive question

1197
00:46:23,599 --> 00:46:24,880
you prove

1198
00:46:24,880 --> 00:46:26,960
you you show that you can apply your

1199
00:46:26,960 --> 00:46:29,119
lower bound to many existing cam

1200
00:46:29,119 --> 00:46:30,720
mechanisms right

1201
00:46:30,720 --> 00:46:33,359
yes so i'm wondering whether the

1202
00:46:33,359 --> 00:46:35,920
existing proofs of the security of these

1203
00:46:35,920 --> 00:46:40,480
camps actually meet your lower bank

1204
00:46:41,599 --> 00:46:44,720
originally these games are approved in a

1205
00:46:44,720 --> 00:46:46,079
week you know

1206
00:46:46,079 --> 00:46:48,880
a weaker model than we considered in our

1207
00:46:48,880 --> 00:46:51,920
paper in our paper we consider a

1208
00:46:51,920 --> 00:46:55,200
a strong security model so in the strong

1209
00:46:55,200 --> 00:46:56,560
security model

1210
00:46:56,560 --> 00:46:58,800
uh they cannot achieve the tight

1211
00:46:58,800 --> 00:47:00,480
security reduction

1212
00:47:00,480 --> 00:47:03,040
and for some of them we proved that for

1213
00:47:03,040 --> 00:47:05,280
example the air gamma came and the of

1214
00:47:05,280 --> 00:47:07,920
the game proposed by hoffens and jager

1215
00:47:07,920 --> 00:47:10,640
they can achieve this lower bound and

1216
00:47:10,640 --> 00:47:13,040
this is the ultimate optimal

1217
00:47:13,040 --> 00:47:15,119
security loss

1218
00:47:15,119 --> 00:47:16,800
but the other camps we don't know

1219
00:47:16,800 --> 00:47:18,960
whether they can meet this lower bound

1220
00:47:18,960 --> 00:47:19,839
right

1221
00:47:19,839 --> 00:47:21,839
am i understanding correctly

1222
00:47:21,839 --> 00:47:23,680
yes yes

1223
00:47:23,680 --> 00:47:26,000
okay i see thank you

1224
00:47:26,000 --> 00:47:28,480
thank you

1225
00:47:29,920 --> 00:47:32,880
okay if no more questions then let's

1226
00:47:32,880 --> 00:47:34,240
thank

1227
00:47:34,240 --> 00:47:36,480
hansha again and welcome our last

1228
00:47:36,480 --> 00:47:39,680
speaker in the section

1229
00:47:39,680 --> 00:47:43,440
yeah can you please go ahead

1230
00:47:44,800 --> 00:47:45,920
yeah

1231
00:47:45,920 --> 00:47:48,400
our last talk will be hierarchical

1232
00:47:48,400 --> 00:47:50,160
integrated signatures and encryption

1233
00:47:50,160 --> 00:47:52,879
presented by

1234
00:47:55,040 --> 00:47:56,720
yeah yeah

1235
00:47:56,720 --> 00:47:59,720
and

1236
00:48:13,280 --> 00:48:14,240
oh

1237
00:48:14,240 --> 00:48:15,280
are we

1238
00:48:15,280 --> 00:48:18,319
do we have lost shanyu

1239
00:48:18,319 --> 00:48:23,119
i couldn't see him in the chat room

1240
00:48:31,119 --> 00:48:33,040
can you see my slice

1241
00:48:33,040 --> 00:48:36,480
yes yes please make it full screen

1242
00:48:36,480 --> 00:48:39,520
okay wait a minute

1243
00:48:41,520 --> 00:48:43,520
okay

1244
00:48:43,520 --> 00:48:45,359
can you see the slides now

1245
00:48:45,359 --> 00:48:46,880
yes yes please

1246
00:48:46,880 --> 00:48:50,319
okay uh thanks for the introduction and

1247
00:48:50,319 --> 00:48:52,559
hi i'm very happy to present our paper

1248
00:48:52,559 --> 00:48:54,240
entitled the hierarchy integrity

1249
00:48:54,240 --> 00:48:56,880
signature and encryption this is a joint

1250
00:48:56,880 --> 00:49:00,559
work with shanta and yuan

1251
00:49:00,960 --> 00:49:03,280
as everybody know public encryption

1252
00:49:03,280 --> 00:49:05,599
signature will host primitives that are

1253
00:49:05,599 --> 00:49:08,319
typically used simultaneously to secure

1254
00:49:08,319 --> 00:49:10,960
communication but the subtle point is

1255
00:49:10,960 --> 00:49:11,760
that

1256
00:49:11,760 --> 00:49:14,000
when we use public key encryption and

1257
00:49:14,000 --> 00:49:15,760
signature together we need to concede

1258
00:49:15,760 --> 00:49:18,880
join the security that is the ef cma

1259
00:49:18,880 --> 00:49:20,800
security for the signature component

1260
00:49:20,800 --> 00:49:23,200
should hold even in the presence of an

1261
00:49:23,200 --> 00:49:25,599
additional decryption oracle while the

1262
00:49:25,599 --> 00:49:28,400
intc security for the public encryption

1263
00:49:28,400 --> 00:49:30,480
should hold even in the presence of a

1264
00:49:30,480 --> 00:49:33,280
signing oracle

1265
00:49:33,280 --> 00:49:35,359
but basically there are two principles

1266
00:49:35,359 --> 00:49:37,440
when using public encryption signature

1267
00:49:37,440 --> 00:49:38,559
together

1268
00:49:38,559 --> 00:49:43,559
that is key separation and key reviews

1269
00:49:44,319 --> 00:49:46,720
the key separation protocol but the key

1270
00:49:46,720 --> 00:49:49,200
separation principle is using

1271
00:49:49,200 --> 00:49:52,000
independent independent kps for

1272
00:49:52,000 --> 00:49:54,240
signature and pub encryption

1273
00:49:54,240 --> 00:49:56,800
the advantage of key reuse is that the

1274
00:49:56,800 --> 00:49:59,440
joint security is immediate and the

1275
00:49:59,440 --> 00:50:00,800
construction

1276
00:50:00,800 --> 00:50:03,520
is off the sea off and it also naturally

1277
00:50:03,520 --> 00:50:05,839
admits individual key sql which is a

1278
00:50:05,839 --> 00:50:08,319
vital property to achieve a balance

1279
00:50:08,319 --> 00:50:10,640
between user authenticate authenticity

1280
00:50:10,640 --> 00:50:12,640
requirement and society's auditing

1281
00:50:12,640 --> 00:50:13,920
requirement

1282
00:50:13,920 --> 00:50:16,240
the disadvantage of

1283
00:50:16,240 --> 00:50:17,599
key separation

1284
00:50:17,599 --> 00:50:19,359
key separation is

1285
00:50:19,359 --> 00:50:21,760
the key measurement complexity get

1286
00:50:21,760 --> 00:50:25,359
doubled and also the certificate cost

1287
00:50:25,359 --> 00:50:27,839
it also completely complicated the

1288
00:50:27,839 --> 00:50:30,720
design of high level protocols

1289
00:50:30,720 --> 00:50:33,680
while the key reuse

1290
00:50:33,680 --> 00:50:34,960
principle

1291
00:50:34,960 --> 00:50:38,480
is using the same key pair for both

1292
00:50:38,480 --> 00:50:40,400
signage and encryption

1293
00:50:40,400 --> 00:50:42,880
we refer to such a scheme as integrity

1294
00:50:42,880 --> 00:50:46,319
the signature encryption called ise for

1295
00:50:46,319 --> 00:50:47,359
short

1296
00:50:47,359 --> 00:50:50,880
the advantage of key reuse principle is

1297
00:50:50,880 --> 00:50:52,559
it reduces the key measurement

1298
00:50:52,559 --> 00:50:55,280
complexity as well as the certificate

1299
00:50:55,280 --> 00:50:56,400
cost

1300
00:50:56,400 --> 00:50:58,960
it also helps to simplify the design of

1301
00:50:58,960 --> 00:51:01,040
high level protocol

1302
00:51:01,040 --> 00:51:04,800
but the disadvantage of key reuse is the

1303
00:51:04,800 --> 00:51:07,680
journal security is not immediate and it

1304
00:51:07,680 --> 00:51:10,319
does not naturally the meet individual

1305
00:51:10,319 --> 00:51:13,040
key escrow

1306
00:51:13,200 --> 00:51:16,319
well as discussed above we are facing a

1307
00:51:16,319 --> 00:51:18,559
dilemma between key reuse that brings

1308
00:51:18,559 --> 00:51:20,960
performance benefit and key separation

1309
00:51:20,960 --> 00:51:23,280
that supports individual kiosks

1310
00:51:23,280 --> 00:51:25,760
an interesting question is can we enable

1311
00:51:25,760 --> 00:51:28,000
individual skill mechanism

1312
00:51:28,000 --> 00:51:31,520
while retaining the merits of key reuse

1313
00:51:31,520 --> 00:51:34,480
to address this problem we propose a new

1314
00:51:34,480 --> 00:51:37,359
cryptographic primitive called hierarchy

1315
00:51:37,359 --> 00:51:40,800
integrity signature encryption

1316
00:51:40,800 --> 00:51:43,920
in hrc a single public key service both

1317
00:51:43,920 --> 00:51:46,400
verification and encryption key while

1318
00:51:46,400 --> 00:51:48,800
there is a hierarchy between sonic and

1319
00:51:48,800 --> 00:51:51,119
the decryption key the sending key sk

1320
00:51:51,119 --> 00:51:52,880
served as a master secret kind can

1321
00:51:52,880 --> 00:51:55,200
derive a decryption key used only for

1322
00:51:55,200 --> 00:51:58,000
decryption in a one-way manner as to

1323
00:51:58,000 --> 00:52:00,000
security will require strong joint

1324
00:52:00,000 --> 00:52:03,040
security we require the idc secure

1325
00:52:03,040 --> 00:52:05,599
security for the pk component remains

1326
00:52:05,599 --> 00:52:08,000
even in the presence of a signing oracle

1327
00:52:08,000 --> 00:52:10,160
why are the ef cms security for the

1328
00:52:10,160 --> 00:52:12,480
signature component remains

1329
00:52:12,480 --> 00:52:15,839
even the adversary get to see the whole

1330
00:52:15,839 --> 00:52:18,079
decryption key rather than merely access

1331
00:52:18,079 --> 00:52:20,079
to a decreasing oracle

1332
00:52:20,079 --> 00:52:22,000
next we presented two generic

1333
00:52:22,000 --> 00:52:24,559
construction of hic

1334
00:52:24,559 --> 00:52:26,160
our first

1335
00:52:26,160 --> 00:52:28,720
his construction is from identified

1336
00:52:28,720 --> 00:52:31,599
encryption the main idea is to apply the

1337
00:52:31,599 --> 00:52:34,880
null transform and the chk transform to

1338
00:52:34,880 --> 00:52:39,440
why i identify encryption simultaneously

1339
00:52:39,440 --> 00:52:41,599
we're attacking the hudder is that the

1340
00:52:41,599 --> 00:52:44,880
decryption key for the identity space i1

1341
00:52:44,880 --> 00:52:47,280
should be shot that means we need a

1342
00:52:47,280 --> 00:52:49,280
succinct representation for all

1343
00:52:49,280 --> 00:52:54,240
securities for identities in the

1344
00:52:54,240 --> 00:52:56,640
iospace

1345
00:52:56,640 --> 00:53:00,720
to solve this problem we propose a new

1346
00:53:00,720 --> 00:53:02,480
cryptographic primitive called the

1347
00:53:02,480 --> 00:53:05,680
constraint ib for prefix predicates

1348
00:53:05,680 --> 00:53:07,760
which in turn can be

1349
00:53:07,760 --> 00:53:09,040
built from

1350
00:53:09,040 --> 00:53:12,319
binary tree encryption

1351
00:53:13,760 --> 00:53:15,599
well our second general construction of

1352
00:53:15,599 --> 00:53:18,160
hic is from pke and

1353
00:53:18,160 --> 00:53:21,200
i z kpok the idea is to correct a

1354
00:53:21,200 --> 00:53:23,280
hierarchy key structure by one-way

1355
00:53:23,280 --> 00:53:24,640
function

1356
00:53:24,640 --> 00:53:26,880
uh we first pick a random bit string as

1357
00:53:26,880 --> 00:53:29,760
the sending key then maps sk to run

1358
00:53:29,760 --> 00:53:31,280
misra and

1359
00:53:31,280 --> 00:53:32,400
then

1360
00:53:32,400 --> 00:53:34,880
run the public key encryptions key

1361
00:53:34,880 --> 00:53:36,960
generation algorithm with random start

1362
00:53:36,960 --> 00:53:38,720
to generate the public key and the

1363
00:53:38,720 --> 00:53:40,400
decryption key

1364
00:53:40,400 --> 00:53:42,800
where the encryption component of hrc is

1365
00:53:42,800 --> 00:53:44,720
simple which is the same as the

1366
00:53:44,720 --> 00:53:46,800
underlying public encryption to correct

1367
00:53:46,800 --> 00:53:48,640
the signature we use general purpose

1368
00:53:48,640 --> 00:53:50,240
public coins they communicate through

1369
00:53:50,240 --> 00:53:53,119
knowledge of sk with respect to the

1370
00:53:53,119 --> 00:53:55,440
public key

1371
00:53:55,440 --> 00:53:58,720
next we describe an important extension

1372
00:53:58,720 --> 00:54:02,160
of iec with global scope property

1373
00:54:02,160 --> 00:54:04,559
nowadays large-scale collaborative

1374
00:54:04,559 --> 00:54:06,880
working apps like us

1375
00:54:06,880 --> 00:54:09,119
such as slack is getting popular one

1376
00:54:09,119 --> 00:54:11,119
hand the employer may have the right to

1377
00:54:11,119 --> 00:54:13,680
get access to all private communication

1378
00:54:13,680 --> 00:54:16,079
for various reasons on the other hand

1379
00:54:16,079 --> 00:54:17,839
employees need to be assured that even

1380
00:54:17,839 --> 00:54:19,760
the malicious employer

1381
00:54:19,760 --> 00:54:22,160
cannot slam them by forging a signature

1382
00:54:22,160 --> 00:54:25,040
for fabricated communications

1383
00:54:25,040 --> 00:54:27,680
where is thus further expected global

1384
00:54:27,680 --> 00:54:29,359
property that

1385
00:54:29,359 --> 00:54:31,200
that means there is a super key that can

1386
00:54:31,200 --> 00:54:33,599
decrypt any subtext around any public

1387
00:54:33,599 --> 00:54:35,839
key while the signature remains secure

1388
00:54:35,839 --> 00:54:38,960
even in the presence of a such civil key

1389
00:54:38,960 --> 00:54:41,760
to attack global escrow property for his

1390
00:54:41,760 --> 00:54:43,920
in a general commander we first attacked

1391
00:54:43,920 --> 00:54:46,960
the tour to revisit global escrow

1392
00:54:46,960 --> 00:54:48,799
public encryption

1393
00:54:48,799 --> 00:54:50,960
we formalized the definition of security

1394
00:54:50,960 --> 00:54:53,520
nurses for global escrow public

1395
00:54:53,520 --> 00:54:56,000
encryption and gave two general

1396
00:54:56,000 --> 00:54:58,240
constructions

1397
00:54:58,240 --> 00:55:02,959
our first general construction is from

1398
00:55:03,680 --> 00:55:06,319
is from any public encryption and idk it

1399
00:55:06,319 --> 00:55:08,880
could be viewed as a new application of

1400
00:55:08,880 --> 00:55:11,520
the celebritated noise transform beyond

1401
00:55:11,520 --> 00:55:13,200
the ccs security

1402
00:55:13,200 --> 00:55:15,839
our second general construction is from

1403
00:55:15,839 --> 00:55:18,839
any three-party non-integrative key

1404
00:55:18,839 --> 00:55:22,400
exchange the idea is that let's ask

1405
00:55:22,400 --> 00:55:24,880
center generator tpr himself to send a

1406
00:55:24,880 --> 00:55:27,760
plaintext to a receiver with public key

1407
00:55:27,760 --> 00:55:29,440
beta

1408
00:55:29,440 --> 00:55:31,280
the sender first generator temporary

1409
00:55:31,280 --> 00:55:35,040
keypair pk alpha s k offers

1410
00:55:38,400 --> 00:55:41,680
by running a three-party ike in his head

1411
00:55:41,680 --> 00:55:44,720
the rest of the construction is simple

1412
00:55:44,720 --> 00:55:47,200
combine previous results we obtain a

1413
00:55:47,200 --> 00:55:49,599
technology roadmap

1414
00:55:49,599 --> 00:55:52,960
of global escrow hisc we can freely take

1415
00:55:52,960 --> 00:55:54,799
any pace from the

1416
00:55:54,799 --> 00:55:56,720
lyft node to the rhythm

1417
00:55:56,720 --> 00:56:01,118
to construct a global hisc

1418
00:56:01,440 --> 00:56:03,680
i lost the wingmaker comparison between

1419
00:56:03,680 --> 00:56:05,040
c

1420
00:56:05,040 --> 00:56:07,520
cp cpk isc and global

1421
00:56:07,520 --> 00:56:10,240
global escrow hrc from stable we can see

1422
00:56:10,240 --> 00:56:13,200
that the global hic not only enjoys the

1423
00:56:13,200 --> 00:56:15,839
benefit of key reuse but also support

1424
00:56:15,839 --> 00:56:18,319
richer functionality such as individual

1425
00:56:18,319 --> 00:56:20,720
and global key escrow

1426
00:56:20,720 --> 00:56:22,720
the experience

1427
00:56:22,720 --> 00:56:25,520
the experimental results demonstrate our

1428
00:56:25,520 --> 00:56:28,480
global hic schemes have comparable

1429
00:56:28,480 --> 00:56:30,640
efficiency with the most efficient

1430
00:56:30,640 --> 00:56:32,799
combined public key scheme and enjoy

1431
00:56:32,799 --> 00:56:34,880
compact key size as well

1432
00:56:34,880 --> 00:56:37,040
as a bi-product we also obtained the

1433
00:56:37,040 --> 00:56:39,280
most efficient global

1434
00:56:39,280 --> 00:56:42,160
public encryption to date which beat the

1435
00:56:42,160 --> 00:56:44,640
best previous scheme was

1436
00:56:44,640 --> 00:56:46,799
attending to certain times

1437
00:56:46,799 --> 00:56:48,160
speed up

1438
00:56:48,160 --> 00:56:49,040
well

1439
00:56:49,040 --> 00:56:51,599
let's summarize our talk in this work we

1440
00:56:51,599 --> 00:56:53,920
propose a new notion called hic our

1441
00:56:53,920 --> 00:56:56,240
notion has a sweet balance and thus

1442
00:56:56,240 --> 00:56:59,280
reconcile the apparent conflict between

1443
00:56:59,280 --> 00:57:01,839
king separation and key reuse it can be

1444
00:57:01,839 --> 00:57:05,119
used as a dropping replacement of pke

1445
00:57:05,119 --> 00:57:08,079
plus signature in any scenarios that

1446
00:57:08,079 --> 00:57:10,480
require authenticity confidentiality and

1447
00:57:10,480 --> 00:57:13,760
auditability simultaneously and the both

1448
00:57:13,760 --> 00:57:16,480
user and authority will have incentives

1449
00:57:16,480 --> 00:57:19,440
to deploy we also extensively revisit

1450
00:57:19,440 --> 00:57:22,960
the global sql public encryption

1451
00:57:22,960 --> 00:57:25,040
our result indicated a new application

1452
00:57:25,040 --> 00:57:26,960
of neuron transform

1453
00:57:26,960 --> 00:57:29,119
and establish the nervous connection

1454
00:57:29,119 --> 00:57:32,240
from three-part and ike that's all thank

1455
00:57:32,240 --> 00:57:35,680
you any questions

1456
00:57:36,160 --> 00:57:38,400
thank you join you for your great talk

1457
00:57:38,400 --> 00:57:41,839
any questions from the audience

1458
00:57:50,400 --> 00:57:51,760
if no then

1459
00:57:51,760 --> 00:57:54,480
let me ask one question

1460
00:57:54,480 --> 00:57:58,000
hi chang you define your his e in a way

1461
00:57:58,000 --> 00:57:59,359
that

1462
00:57:59,359 --> 00:58:03,280
the signing key can derive the and the

1463
00:58:03,280 --> 00:58:05,119
the

1464
00:58:05,119 --> 00:58:07,200
the decryption key is it possible to

1465
00:58:07,200 --> 00:58:09,359
define the other way around namely the

1466
00:58:09,359 --> 00:58:11,920
decryption key derived the signing given

1467
00:58:11,920 --> 00:58:13,599
in the world yes

1468
00:58:13,599 --> 00:58:16,240
yes thanks for this question we indeed

1469
00:58:16,240 --> 00:58:18,960
concede this during notion as the end of

1470
00:58:18,960 --> 00:58:20,480
a paper

1471
00:58:20,480 --> 00:58:22,720
that is the decryption serve as a master

1472
00:58:22,720 --> 00:58:25,680
secret key while it can derive uh

1473
00:58:25,680 --> 00:58:27,920
sending key in a one-way manner the

1474
00:58:27,920 --> 00:58:29,920
notion could be useful in applications

1475
00:58:29,920 --> 00:58:31,520
where

1476
00:58:31,520 --> 00:58:34,400
the privacy of messages of utmost

1477
00:58:34,400 --> 00:58:37,680
importance why is the sending capability

1478
00:58:37,680 --> 00:58:39,760
need to be delegated

1479
00:58:39,760 --> 00:58:41,200
yes

1480
00:58:41,200 --> 00:58:43,119
but why do you choose this particular

1481
00:58:43,119 --> 00:58:45,280
direction first instead of the other ah

1482
00:58:45,280 --> 00:58:46,799
because

1483
00:58:46,799 --> 00:58:50,160
for the time being i we found it hard to

1484
00:58:50,160 --> 00:58:52,640
find uh

1485
00:58:52,640 --> 00:58:54,880
good applications for the new for the

1486
00:58:54,880 --> 00:58:57,520
durian notion but this notion

1487
00:58:57,520 --> 00:59:01,200
uh that is the sunny case of utmost

1488
00:59:01,200 --> 00:59:02,799
importance

1489
00:59:02,799 --> 00:59:05,920
is uh has run the widely

1490
00:59:05,920 --> 00:59:11,040
usage for example in the cryptocurrency

1491
00:59:11,040 --> 00:59:12,079
because

1492
00:59:12,079 --> 00:59:14,400
in most applications the

1493
00:59:14,400 --> 00:59:17,440
the signing capabilities also

1494
00:59:17,440 --> 00:59:20,400
is always of the first priority should

1495
00:59:20,400 --> 00:59:23,200
be protected

1496
00:59:23,760 --> 00:59:25,520
uh okay thank you very much for your

1497
00:59:25,520 --> 00:59:26,720
explanation

1498
00:59:26,720 --> 00:59:28,960
okay

1499
00:59:28,960 --> 00:59:31,280
well if no questions from the audience

1500
00:59:31,280 --> 00:59:33,599
then

1501
00:59:33,599 --> 00:59:35,839
we'll call it a day and thank you very

1502
00:59:35,839 --> 00:59:38,319
much for joining this section

1503
00:59:38,319 --> 00:59:39,920
thank you steve for co-chairing the

1504
00:59:39,920 --> 00:59:41,440
session with me

1505
00:59:41,440 --> 00:59:43,359
yeah

1506
00:59:43,359 --> 00:59:45,680
thanks for the authors

1507
00:59:45,680 --> 00:59:48,319
yeah thanks for all the authors

1508
00:59:48,319 --> 00:59:50,400
have a nice day

1509
00:59:50,400 --> 00:59:53,280
great okay

1510
00:59:53,280 --> 00:59:56,880
what do we now do now kevin just

