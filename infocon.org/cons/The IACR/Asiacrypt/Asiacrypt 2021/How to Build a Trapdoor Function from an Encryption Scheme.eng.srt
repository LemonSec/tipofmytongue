1
00:00:01,920 --> 00:00:04,960
hello everyone i'm julian and today i'm

2
00:00:04,960 --> 00:00:07,520
going to discuss uh my recent work how

3
00:00:07,520 --> 00:00:09,040
to build a trapdoor function from an

4
00:00:09,040 --> 00:00:11,040
encryption scheme and this is a joint

5
00:00:11,040 --> 00:00:12,880
work with sanjian guard muhammad ali

6
00:00:12,880 --> 00:00:15,839
abadi and raphael strawski

7
00:00:15,839 --> 00:00:17,760
telling telling what this work is about

8
00:00:17,760 --> 00:00:20,160
i would like to revisit some concept

9
00:00:20,160 --> 00:00:22,640
uh some basic concepts in cryptography

10
00:00:22,640 --> 00:00:24,320
and this will allow me to establish some

11
00:00:24,320 --> 00:00:26,000
notation for later

12
00:00:26,000 --> 00:00:27,439
so on the left we have the standard

13
00:00:27,439 --> 00:00:28,960
notion of public encryption which

14
00:00:28,960 --> 00:00:30,560
consists of three algorithms a key

15
00:00:30,560 --> 00:00:32,238
generation an encryption and a

16
00:00:32,238 --> 00:00:33,920
decryption algorithm

17
00:00:33,920 --> 00:00:35,440
and they are defined naturally namely

18
00:00:35,440 --> 00:00:38,000
that the key generation

19
00:00:38,000 --> 00:00:39,920
outputs are key pairs the secret or

20
00:00:39,920 --> 00:00:42,160
public key and together with the public

21
00:00:42,160 --> 00:00:43,920
key the encryption algorithm allows

22
00:00:43,920 --> 00:00:45,280
anyone to

23
00:00:45,280 --> 00:00:47,039
encrypt the message m

24
00:00:47,039 --> 00:00:49,360
and with the usage of some random coins

25
00:00:49,360 --> 00:00:53,360
r and the result in ciphertext

26
00:00:53,360 --> 00:00:56,960
can be decrypted using the secret key by

27
00:00:56,960 --> 00:00:58,879
the decryption algorithm

28
00:00:58,879 --> 00:01:00,320
on the other end the trapdoor function

29
00:01:00,320 --> 00:01:01,840
is a

30
00:01:01,840 --> 00:01:03,760
very related notion but there's slightly

31
00:01:03,760 --> 00:01:06,240
different interfaces and i'm going to go

32
00:01:06,240 --> 00:01:08,080
through them and i like the difference

33
00:01:08,080 --> 00:01:09,840
in a second one

34
00:01:09,840 --> 00:01:12,320
um so the the first algorithm is

35
00:01:12,320 --> 00:01:14,640
analogous the key generation algorithm

36
00:01:14,640 --> 00:01:16,320
outputs an index key that shall be

37
00:01:16,320 --> 00:01:18,479
thought of as the public key of the

38
00:01:18,479 --> 00:01:21,200
scheme and a trapdoor td that should be

39
00:01:21,200 --> 00:01:24,000
taught as the secret key of the scheme

40
00:01:24,000 --> 00:01:26,159
and the index key allows everybody to

41
00:01:26,159 --> 00:01:27,840
evaluate the function f in the forward

42
00:01:27,840 --> 00:01:30,560
direction namely given an input f x we

43
00:01:30,560 --> 00:01:32,880
can compute f of x efficiently

44
00:01:32,880 --> 00:01:35,040
and uh the important property of the

45
00:01:35,040 --> 00:01:37,200
trapdoor function is that is efficiently

46
00:01:37,200 --> 00:01:39,040
invertible also

47
00:01:39,040 --> 00:01:40,400
namely we can

48
00:01:40,400 --> 00:01:42,640
evaluate f in the inverse direction but

49
00:01:42,640 --> 00:01:43,840
for this we need the knowledge of the

50
00:01:43,840 --> 00:01:45,600
trapdoor

51
00:01:45,600 --> 00:01:47,600
and besides having different

52
00:01:47,600 --> 00:01:50,000
name names for the variables

53
00:01:50,000 --> 00:01:51,520
these two functions have also slightly

54
00:01:51,520 --> 00:01:56,399
different syntax namely that

55
00:01:56,399 --> 00:01:58,880
in terms of correctness the public

56
00:01:58,880 --> 00:02:00,560
encryption does not require the

57
00:02:00,560 --> 00:02:02,640
decryption algorithm to recover the

58
00:02:02,640 --> 00:02:04,240
randomness used during the encryption

59
00:02:04,240 --> 00:02:05,439
procedure

60
00:02:05,439 --> 00:02:08,318
whereas on the other hand uh the

61
00:02:08,318 --> 00:02:10,000
inversion of the function of the

62
00:02:10,000 --> 00:02:12,080
trapdoor function requires one to

63
00:02:12,080 --> 00:02:14,239
recover the entire input x

64
00:02:14,239 --> 00:02:16,560
so this is an important difference

65
00:02:16,560 --> 00:02:19,040
and it's the central uh

66
00:02:19,040 --> 00:02:20,879
focus of this work

67
00:02:20,879 --> 00:02:23,200
and of course it's pretty easy to see

68
00:02:23,200 --> 00:02:25,360
that trapdoor functions generically

69
00:02:25,360 --> 00:02:28,239
imply public encryption but the other

70
00:02:28,239 --> 00:02:29,760
direction of the implication is not

71
00:02:29,760 --> 00:02:31,360
known

72
00:02:31,360 --> 00:02:32,800
and

73
00:02:32,800 --> 00:02:34,319
the focus of this work is to make

74
00:02:34,319 --> 00:02:36,720
progress on this question

75
00:02:36,720 --> 00:02:38,879
so before telling you what the exact

76
00:02:38,879 --> 00:02:41,280
results of this work are let me tell you

77
00:02:41,280 --> 00:02:43,280
exactly what kind of security we want

78
00:02:43,280 --> 00:02:45,599
from from a trapdoor function

79
00:02:45,599 --> 00:02:48,400
and the the canonical security notion is

80
00:02:48,400 --> 00:02:50,400
that of one awareness

81
00:02:50,400 --> 00:02:52,000
and one witness intuitively says that

82
00:02:52,000 --> 00:02:54,239
the function should be r to inverse

83
00:02:54,239 --> 00:02:56,319
but of course we need to define a

84
00:02:56,319 --> 00:02:59,360
distribution over the inputs

85
00:02:59,360 --> 00:03:01,440
the easiest distribution is just when

86
00:03:01,440 --> 00:03:04,480
the input x is uniformly sampled over

87
00:03:04,480 --> 00:03:06,400
the domain of the function

88
00:03:06,400 --> 00:03:07,280
and

89
00:03:07,280 --> 00:03:09,680
we call this notion

90
00:03:09,680 --> 00:03:12,400
just simply one way one witness

91
00:03:12,400 --> 00:03:15,840
but we can ask for something more namely

92
00:03:15,840 --> 00:03:17,760
we can

93
00:03:17,760 --> 00:03:19,760
require x to be from an arbitrary

94
00:03:19,760 --> 00:03:21,360
distribution

95
00:03:21,360 --> 00:03:23,120
as long as it has enough

96
00:03:23,120 --> 00:03:25,680
enough enough main entropy

97
00:03:25,680 --> 00:03:26,959
and

98
00:03:26,959 --> 00:03:28,159
we call this requirement the

99
00:03:28,159 --> 00:03:30,239
deterministic security

100
00:03:30,239 --> 00:03:31,440
and this is of course a strict

101
00:03:31,440 --> 00:03:34,159
generalization of the uniform case

102
00:03:34,159 --> 00:03:35,760
and for those of you who are familiar

103
00:03:35,760 --> 00:03:38,319
with the concept this is also called

104
00:03:38,319 --> 00:03:39,519
deterministic encryption in the

105
00:03:39,519 --> 00:03:41,040
literature

106
00:03:41,040 --> 00:03:42,239
depending on

107
00:03:42,239 --> 00:03:45,200
whom you're talking with

108
00:03:45,200 --> 00:03:47,120
okay so

109
00:03:47,120 --> 00:03:49,519
here are our results so our main result

110
00:03:49,519 --> 00:03:51,360
is a compiler that starts from a

111
00:03:51,360 --> 00:03:52,959
primitive which

112
00:03:52,959 --> 00:03:54,879
we call robust synth in prg which is

113
00:03:54,879 --> 00:03:56,959
something we define in this work and we

114
00:03:56,959 --> 00:03:59,120
also provide a construction from

115
00:03:59,120 --> 00:04:00,400
either the learning with error

116
00:04:00,400 --> 00:04:02,000
assumption or the computational

117
00:04:02,000 --> 00:04:04,480
defendant assumption

118
00:04:04,480 --> 00:04:05,920
and takes takes this building block

119
00:04:05,920 --> 00:04:07,360
together with a public key encryption

120
00:04:07,360 --> 00:04:09,280
scheme and obtains the corresponding

121
00:04:09,280 --> 00:04:11,200
trapdoor function

122
00:04:11,200 --> 00:04:12,720
and depending on the exact public key

123
00:04:12,720 --> 00:04:15,920
that we public key encryption that we

124
00:04:15,920 --> 00:04:18,238
plug into our compiler we obtain a

125
00:04:18,238 --> 00:04:20,160
slightly different flavor of trapdoor

126
00:04:20,160 --> 00:04:22,160
function as an example

127
00:04:22,160 --> 00:04:22,800
if

128
00:04:22,800 --> 00:04:24,800
if you plug in an identity based

129
00:04:24,800 --> 00:04:26,320
encryption we obtain something which is

130
00:04:26,320 --> 00:04:29,199
called identity based raptor function

131
00:04:29,199 --> 00:04:30,960
on the other hand if we plug in an

132
00:04:30,960 --> 00:04:32,880
attribute based encryption

133
00:04:32,880 --> 00:04:34,400
um we

134
00:04:34,400 --> 00:04:35,680
obtain something which is called an

135
00:04:35,680 --> 00:04:38,160
attribute based raptor function and

136
00:04:38,160 --> 00:04:39,919
the same holds for for predicate

137
00:04:39,919 --> 00:04:41,680
encryption

138
00:04:41,680 --> 00:04:44,080
and all of this

139
00:04:44,080 --> 00:04:45,919
all of these tractor functions they

140
00:04:45,919 --> 00:04:47,120
satisfy the strong notion of

141
00:04:47,120 --> 00:04:49,680
deterministic security

142
00:04:49,680 --> 00:04:51,440
and the one caveat of this

143
00:04:51,440 --> 00:04:53,600
transformation is that the input public

144
00:04:53,600 --> 00:04:55,040
key encryption

145
00:04:55,040 --> 00:04:57,600
needs to have pseudorandom ciphertext

146
00:04:57,600 --> 00:05:00,720
over some uh over some group which is

147
00:05:00,720 --> 00:05:04,240
doesn't have to be an obedient group but

148
00:05:04,240 --> 00:05:05,680
it needs to be

149
00:05:05,680 --> 00:05:07,440
um

150
00:05:07,440 --> 00:05:11,840
and it's a well-defined group operation

151
00:05:12,080 --> 00:05:13,919
but natural schemes

152
00:05:13,919 --> 00:05:16,000
always satisfy this

153
00:05:16,000 --> 00:05:18,720
this requirement

154
00:05:19,280 --> 00:05:21,440
and

155
00:05:21,440 --> 00:05:22,320
so

156
00:05:22,320 --> 00:05:23,520
right so

157
00:05:23,520 --> 00:05:26,240
what does our what does our work advance

158
00:05:26,240 --> 00:05:27,919
in the grand scheme of theme

159
00:05:27,919 --> 00:05:28,960
of things

160
00:05:28,960 --> 00:05:29,840
um

161
00:05:29,840 --> 00:05:32,880
so in terms of tdf it doesn't really

162
00:05:32,880 --> 00:05:35,039
imply any any uh

163
00:05:35,039 --> 00:05:36,560
results from any new assumption that we

164
00:05:36,560 --> 00:05:39,120
didn't know before besides giving a

165
00:05:39,120 --> 00:05:41,600
modular a more modular

166
00:05:41,600 --> 00:05:44,240
way to construct chapter functions

167
00:05:44,240 --> 00:05:46,080
but already in terms of identity based

168
00:05:46,080 --> 00:05:47,919
raptor functions we saw the first

169
00:05:47,919 --> 00:05:49,919
construction from the computation or the

170
00:05:49,919 --> 00:05:53,759
helm assumption in pairing three groups

171
00:05:53,759 --> 00:05:55,759
and prior to our work we only knew how

172
00:05:55,759 --> 00:05:57,199
to construct identity based raptor

173
00:05:57,199 --> 00:05:59,520
functions from pairings or learning with

174
00:05:59,520 --> 00:06:01,600
errors

175
00:06:01,600 --> 00:06:03,360
and in terms of attribute based on

176
00:06:03,360 --> 00:06:05,680
chapter function and predicate traptor

177
00:06:05,680 --> 00:06:08,560
functions we are not aware of any other

178
00:06:08,560 --> 00:06:10,479
work that obtain the construction under

179
00:06:10,479 --> 00:06:12,880
any computational assumption

180
00:06:12,880 --> 00:06:15,840
whereas by plugging in the appropriate

181
00:06:15,840 --> 00:06:18,160
um the appropriate encryption scheme we

182
00:06:18,160 --> 00:06:20,800
obtain constructions uh from bilinear

183
00:06:20,800 --> 00:06:22,080
pairings

184
00:06:22,080 --> 00:06:27,039
for nc1 predicates and from lwe for all

185
00:06:27,039 --> 00:06:30,560
for all polynomial size circuits

186
00:06:30,560 --> 00:06:33,120
so this is our main result

187
00:06:33,120 --> 00:06:36,240
as a bonus as a bonus result we

188
00:06:36,240 --> 00:06:37,039
uh

189
00:06:37,039 --> 00:06:38,479
introduce a notion which is called

190
00:06:38,479 --> 00:06:40,400
trapdoor garbling

191
00:06:40,400 --> 00:06:42,800
and the syntax of trapdoor gardening is

192
00:06:42,800 --> 00:06:44,720
exactly the same as

193
00:06:44,720 --> 00:06:47,440
any other garbled circuit scheme

194
00:06:47,440 --> 00:06:52,319
and so given a a common randomness r

195
00:06:52,319 --> 00:06:54,400
there is a garbling garbling scheme

196
00:06:54,400 --> 00:06:56,000
consists of a darping procedure that

197
00:06:56,000 --> 00:06:58,160
takes this input a circuit and i'll put

198
00:06:58,160 --> 00:07:01,520
a garbled version of the circuit ct

199
00:07:01,520 --> 00:07:03,280
and

200
00:07:03,280 --> 00:07:05,199
there's an alternative encoding

201
00:07:05,199 --> 00:07:06,960
procedure

202
00:07:06,960 --> 00:07:07,840
that

203
00:07:07,840 --> 00:07:11,199
allows one to encode prepare an input x

204
00:07:11,199 --> 00:07:12,880
and using the same

205
00:07:12,880 --> 00:07:15,680
the same pool of random coins

206
00:07:15,680 --> 00:07:19,440
prepare an encoded input exterior

207
00:07:19,440 --> 00:07:21,759
and normally the standard syntax of

208
00:07:21,759 --> 00:07:24,160
carbon circuits allows one to recover c

209
00:07:24,160 --> 00:07:26,400
of x whereas we have

210
00:07:26,400 --> 00:07:29,120
slightly orthogonal requirements

211
00:07:29,120 --> 00:07:31,280
namely we have a decoding algorithm the

212
00:07:31,280 --> 00:07:33,039
texas input both the garble circuit and

213
00:07:33,039 --> 00:07:35,039
the gargled input

214
00:07:35,039 --> 00:07:35,840
and

215
00:07:35,840 --> 00:07:38,720
if the circuit evaluates one then

216
00:07:38,720 --> 00:07:40,160
the the column

217
00:07:40,160 --> 00:07:42,479
output just the output of the circuit

218
00:07:42,479 --> 00:07:43,360
red

219
00:07:43,360 --> 00:07:45,280
whereas if the circuit evaluates to zero

220
00:07:45,280 --> 00:07:48,000
then the decoding also outputs the

221
00:07:48,000 --> 00:07:50,720
entire set of randomness so

222
00:07:50,720 --> 00:07:52,479
in a sense we make carbon circuits

223
00:07:52,479 --> 00:07:54,800
randomers recoverable

224
00:07:54,800 --> 00:07:57,199
um we use this as an intermediate notion

225
00:07:57,199 --> 00:07:59,759
to achieve stronger security guarantees

226
00:07:59,759 --> 00:08:01,840
for our chapter functions but we believe

227
00:08:01,840 --> 00:08:03,440
that

228
00:08:03,440 --> 00:08:05,440
this is a notion of independent interest

229
00:08:05,440 --> 00:08:07,199
and actually constructing it turns out

230
00:08:07,199 --> 00:08:09,199
to be quite non-trivial

231
00:08:09,199 --> 00:08:10,479
and

232
00:08:10,479 --> 00:08:13,280
we proposed two constructions

233
00:08:13,280 --> 00:08:15,039
one from the ddh assumption and one from

234
00:08:15,039 --> 00:08:16,800
the lw assumptions

235
00:08:16,800 --> 00:08:18,720
and those use

236
00:08:18,720 --> 00:08:21,039
the randomness key circularity

237
00:08:21,039 --> 00:08:24,000
properties of the bhho encryption scheme

238
00:08:24,000 --> 00:08:25,759
and if you're curious i encourage you to

239
00:08:25,759 --> 00:08:29,680
use the paper there to see the paper

240
00:08:29,680 --> 00:08:33,039
and yeah we believe that uh

241
00:08:33,039 --> 00:08:34,240
this this

242
00:08:34,240 --> 00:08:35,760
uh

243
00:08:35,760 --> 00:08:36,799
that this

244
00:08:36,799 --> 00:08:39,200
this primitive will find soon

245
00:08:39,200 --> 00:08:42,320
interesting applications

246
00:08:44,880 --> 00:08:46,880
okay so now throughout the rest of the

247
00:08:46,880 --> 00:08:49,519
talk i'm just going to ignore this part

248
00:08:49,519 --> 00:08:50,959
and again i encourage you to look at the

249
00:08:50,959 --> 00:08:52,640
paper if you're curious

250
00:08:52,640 --> 00:08:54,160
and i'm going to focus on our main

251
00:08:54,160 --> 00:08:55,760
compiler

252
00:08:55,760 --> 00:08:58,320
and uh before

253
00:08:58,320 --> 00:08:59,920
getting into our construction i have to

254
00:08:59,920 --> 00:09:01,680
define what are in team prgs and in

255
00:09:01,680 --> 00:09:05,519
particular what are robust in team prg's

256
00:09:05,519 --> 00:09:08,320
so a hinting prg prg stands for

257
00:09:08,320 --> 00:09:10,720
pseudo-random generator by the way

258
00:09:10,720 --> 00:09:12,560
um

259
00:09:12,560 --> 00:09:15,360
a hint in prg start with the sampling of

260
00:09:15,360 --> 00:09:16,959
a uniform sheet

261
00:09:16,959 --> 00:09:18,080
and

262
00:09:18,080 --> 00:09:20,839
the robust robust

263
00:09:20,839 --> 00:09:22,880
requirement comes from the fact that we

264
00:09:22,880 --> 00:09:24,640
don't limit this distribution the

265
00:09:24,640 --> 00:09:26,800
distribution of this sheet to be uniform

266
00:09:26,800 --> 00:09:29,920
but again we consider uh arbitrary

267
00:09:29,920 --> 00:09:32,720
distribution so long as they have enough

268
00:09:32,720 --> 00:09:34,839
probability mass

269
00:09:34,839 --> 00:09:37,360
um and uh

270
00:09:37,360 --> 00:09:38,880
well the idea is that

271
00:09:38,880 --> 00:09:40,560
uh this this

272
00:09:40,560 --> 00:09:43,440
hindi prg will take this seed uh which

273
00:09:43,440 --> 00:09:45,360
for simplicity now we consider it to be

274
00:09:45,360 --> 00:09:47,760
a binary string from zero one to the

275
00:09:47,760 --> 00:09:49,040
power lambda

276
00:09:49,040 --> 00:09:53,040
and produce lambda many l bit blocks so

277
00:09:53,040 --> 00:09:55,600
while setting l to be greater than one

278
00:09:55,600 --> 00:09:58,320
every l can be can be thought of as the

279
00:09:58,320 --> 00:10:01,279
as of the uh uh the stretch of the prg

280
00:10:01,279 --> 00:10:03,279
so by setting it greater than one we

281
00:10:03,279 --> 00:10:06,399
obtain uh expanding prg

282
00:10:06,399 --> 00:10:07,680
and

283
00:10:07,680 --> 00:10:10,320
it is useful to visualize the

284
00:10:10,320 --> 00:10:12,399
transformation of a hinting prg

285
00:10:12,399 --> 00:10:15,040
in blocks which we'll keep for for the

286
00:10:15,040 --> 00:10:16,880
rest of the talk

287
00:10:16,880 --> 00:10:20,000
and now the important part of indian prg

288
00:10:20,000 --> 00:10:22,399
is their security definition

289
00:10:22,399 --> 00:10:24,640
and their security definition is as

290
00:10:24,640 --> 00:10:26,880
follows we want that the two

291
00:10:26,880 --> 00:10:28,720
distribution visualized here are

292
00:10:28,720 --> 00:10:30,880
computationally indistinguishable

293
00:10:30,880 --> 00:10:32,560
so

294
00:10:32,560 --> 00:10:34,240
on the right hand side

295
00:10:34,240 --> 00:10:38,320
we have a distribution of lambda many l

296
00:10:38,320 --> 00:10:39,760
bit blocks

297
00:10:39,760 --> 00:10:42,560
which are completely uniform so they are

298
00:10:42,560 --> 00:10:45,360
just uniformly sampled

299
00:10:45,360 --> 00:10:48,720
and arranged in this two by n matrix

300
00:10:48,720 --> 00:10:50,959
on the left side on the other hand

301
00:10:50,959 --> 00:10:51,839
um

302
00:10:51,839 --> 00:10:55,839
we have a two by n matrix where the

303
00:10:55,839 --> 00:10:58,320
for each column the row corresponding to

304
00:10:58,320 --> 00:11:00,800
the bit of the seed

305
00:11:00,800 --> 00:11:02,320
is said to be

306
00:11:02,320 --> 00:11:05,440
the ith block of the hinting prg

307
00:11:05,440 --> 00:11:07,519
whereas the other row is said to be a

308
00:11:07,519 --> 00:11:10,560
uniformly sampled block

309
00:11:10,560 --> 00:11:12,640
and again the requirement is that these

310
00:11:12,640 --> 00:11:14,240
two distributions are computationally

311
00:11:14,240 --> 00:11:16,720
indistinguishable

312
00:11:16,720 --> 00:11:17,240
and

313
00:11:17,240 --> 00:11:18,880
[Music]

314
00:11:18,880 --> 00:11:19,960
i think it's useful to

315
00:11:19,960 --> 00:11:21,200
[Music]

316
00:11:21,200 --> 00:11:23,200
to remark that

317
00:11:23,200 --> 00:11:25,760
such security does not follow

318
00:11:25,760 --> 00:11:27,680
immediately by a hybrid argument of a

319
00:11:27,680 --> 00:11:30,480
prg and the reason is that the position

320
00:11:30,480 --> 00:11:32,160
of the blocks

321
00:11:32,160 --> 00:11:33,839
on the left distribution

322
00:11:33,839 --> 00:11:34,880
depends

323
00:11:34,880 --> 00:11:36,800
uh on the bit representation of the seed

324
00:11:36,800 --> 00:11:38,640
so

325
00:11:38,640 --> 00:11:40,320
there is a circularity in the argument

326
00:11:40,320 --> 00:11:42,880
that one cannot just wash away with a

327
00:11:42,880 --> 00:11:45,519
hybrid argument so you need um

328
00:11:45,519 --> 00:11:48,480
more structured assumptions in order to

329
00:11:48,480 --> 00:11:49,440
um

330
00:11:49,440 --> 00:11:51,360
in order to construct those and we show

331
00:11:51,360 --> 00:11:53,279
in the paper how how to construct these

332
00:11:53,279 --> 00:11:54,079
from

333
00:11:54,079 --> 00:11:55,680
from the computationality you defeathem

334
00:11:55,680 --> 00:11:58,880
problem or from the lw assumption

335
00:11:58,880 --> 00:12:00,560
though our construction are heavily

336
00:12:00,560 --> 00:12:02,720
based on prior works

337
00:12:02,720 --> 00:12:05,279
and essentially account only for

338
00:12:05,279 --> 00:12:06,800
changing the parameter and a slightly

339
00:12:06,800 --> 00:12:09,680
different analysis

340
00:12:09,680 --> 00:12:11,839
okay so with that out of the way i'm

341
00:12:11,839 --> 00:12:12,959
ready to

342
00:12:12,959 --> 00:12:15,600
present our main construction which is

343
00:12:15,600 --> 00:12:18,240
uh a way to compile a public key

344
00:12:18,240 --> 00:12:19,680
encryption

345
00:12:19,680 --> 00:12:22,160
into a hinting prg

346
00:12:22,160 --> 00:12:24,000
and we call this in the paper a uni

347
00:12:24,000 --> 00:12:25,920
universality fire

348
00:12:25,920 --> 00:12:27,680
and it works

349
00:12:27,680 --> 00:12:29,360
as long as the public key encryption has

350
00:12:29,360 --> 00:12:31,680
pseudorandom ciphertext and for the sake

351
00:12:31,680 --> 00:12:33,120
of this talk i'm just going to assume

352
00:12:33,120 --> 00:12:35,440
that they are just uniformly or

353
00:12:35,440 --> 00:12:36,959
computationally distinguishable from

354
00:12:36,959 --> 00:12:40,160
uniformly sampled binary strings

355
00:12:40,160 --> 00:12:42,160
and again for simplicity i'm going to

356
00:12:42,160 --> 00:12:44,959
only treat the case of public encryption

357
00:12:44,959 --> 00:12:46,560
whereas the case of identity-based

358
00:12:46,560 --> 00:12:47,680
encryption and attribute-based

359
00:12:47,680 --> 00:12:49,440
encryption will follow

360
00:12:49,440 --> 00:12:51,600
essentially immediately

361
00:12:51,600 --> 00:12:53,600
of course in the paper we present this

362
00:12:53,600 --> 00:12:56,480
in the most general form as possible

363
00:12:56,480 --> 00:12:58,560
so these are the ingredients so all is

364
00:12:58,560 --> 00:13:00,079
left to do is now

365
00:13:00,079 --> 00:13:03,760
to describe our trapdoor function

366
00:13:03,760 --> 00:13:05,839
so the index key consists of the public

367
00:13:05,839 --> 00:13:08,959
key of the public encryption scheme

368
00:13:08,959 --> 00:13:11,519
the public parameters of the hindi prg

369
00:13:11,519 --> 00:13:13,519
and lambda many

370
00:13:13,519 --> 00:13:15,920
uniform resample string from the

371
00:13:15,920 --> 00:13:18,320
domain 01 gamma

372
00:13:18,320 --> 00:13:19,760
where again gamma is the domain of the

373
00:13:19,760 --> 00:13:21,440
ciphertext

374
00:13:21,440 --> 00:13:22,800
so it's the bit length of the cypher

375
00:13:22,800 --> 00:13:24,720
text

376
00:13:24,720 --> 00:13:28,160
the chapter naturally of our

377
00:13:28,160 --> 00:13:29,120
of our

378
00:13:29,120 --> 00:13:30,959
vowel traptor function is said to be the

379
00:13:30,959 --> 00:13:34,480
secret key of the encryption scheme

380
00:13:34,480 --> 00:13:36,079
now let us see how to evaluate the

381
00:13:36,079 --> 00:13:37,920
function so the function is going to be

382
00:13:37,920 --> 00:13:40,480
evaluated bit by bit an input

383
00:13:40,480 --> 00:13:42,800
lambda bit string x

384
00:13:42,800 --> 00:13:43,760
for

385
00:13:43,760 --> 00:13:46,320
all indices i and one to lambda

386
00:13:46,320 --> 00:13:48,800
we're going to set y i to be

387
00:13:48,800 --> 00:13:50,079
an encryption

388
00:13:50,079 --> 00:13:50,959
of

389
00:13:50,959 --> 00:13:51,920
zero

390
00:13:51,920 --> 00:13:53,279
so there's actually nothing special

391
00:13:53,279 --> 00:13:55,120
about zero this can be actually any

392
00:13:55,120 --> 00:13:57,120
distinguished string so long as it's

393
00:13:57,120 --> 00:13:59,760
going to be publicly recognizable we

394
00:13:59,760 --> 00:14:02,560
just set it to zero for convenience

395
00:14:02,560 --> 00:14:04,000
where the random coins of this

396
00:14:04,000 --> 00:14:06,320
encryption scheme is going to be the ith

397
00:14:06,320 --> 00:14:07,199
block

398
00:14:07,199 --> 00:14:10,240
of the interprg evaluated on x so this

399
00:14:10,240 --> 00:14:12,160
is what this notation means so here

400
00:14:12,160 --> 00:14:14,639
there's an index i here

401
00:14:14,639 --> 00:14:16,560
so this is going to be

402
00:14:16,560 --> 00:14:19,920
uh what why i set if the eighth bit of x

403
00:14:19,920 --> 00:14:21,839
is equal to zero

404
00:14:21,839 --> 00:14:22,800
whereas

405
00:14:22,800 --> 00:14:24,480
if the light bit of x is equal to one

406
00:14:24,480 --> 00:14:25,920
we're going to set it to be the same

407
00:14:25,920 --> 00:14:27,040
thing

408
00:14:27,040 --> 00:14:30,160
except that we are going to xor

409
00:14:30,160 --> 00:14:33,279
the resulting ciphertext with

410
00:14:33,279 --> 00:14:35,360
ri which is the

411
00:14:35,360 --> 00:14:38,000
ith block of the public parameters

412
00:14:38,000 --> 00:14:40,160
and recall that

413
00:14:40,160 --> 00:14:41,760
the ciphertexts

414
00:14:41,760 --> 00:14:42,839
are

415
00:14:42,839 --> 00:14:46,399
in are always land a bit string sorry

416
00:14:46,399 --> 00:14:48,000
always gone up with strings so this

417
00:14:48,000 --> 00:14:51,199
operation is always well defined

418
00:14:51,199 --> 00:14:53,760
um good so now

419
00:14:53,760 --> 00:14:55,519
y i up to y lambda is just going to be

420
00:14:55,519 --> 00:14:58,399
the output of our trapdoor function

421
00:14:58,399 --> 00:15:00,399
and so let's see given the trapdoor we

422
00:15:00,399 --> 00:15:01,920
can invert it

423
00:15:01,920 --> 00:15:02,959
um

424
00:15:02,959 --> 00:15:03,760
well

425
00:15:03,760 --> 00:15:06,560
we can recover essentially the uh input

426
00:15:06,560 --> 00:15:08,720
bit by bit

427
00:15:08,720 --> 00:15:11,120
again for indices i from one to lambda

428
00:15:11,120 --> 00:15:13,920
we can just set x i to b equals 0

429
00:15:13,920 --> 00:15:17,920
if the decryption of y i is equal to 0

430
00:15:17,920 --> 00:15:19,839
and 1 otherwise

431
00:15:19,839 --> 00:15:21,360
and correctness is actually pretty easy

432
00:15:21,360 --> 00:15:22,800
to argue

433
00:15:22,800 --> 00:15:24,160
though one has to be a little bit

434
00:15:24,160 --> 00:15:26,240
careful

435
00:15:26,240 --> 00:15:27,440
about

436
00:15:27,440 --> 00:15:29,279
the union bound that doesn't

437
00:15:29,279 --> 00:15:32,560
kill the efficiency of the scheme

438
00:15:32,880 --> 00:15:34,240
okay so

439
00:15:34,240 --> 00:15:36,240
as i said this is pretty much our

440
00:15:36,240 --> 00:15:37,360
compiler

441
00:15:37,360 --> 00:15:40,800
and it is so simple that i can even give

442
00:15:40,800 --> 00:15:43,759
you a proof sketch why that should be

443
00:15:43,759 --> 00:15:44,800
i should

444
00:15:44,800 --> 00:15:46,959
should satisfy one awareness

445
00:15:46,959 --> 00:15:48,959
and after that is going to be the

446
00:15:48,959 --> 00:15:50,959
conclusion of my talk so

447
00:15:50,959 --> 00:15:53,120
bear with me for a few more minutes

448
00:15:53,120 --> 00:15:55,199
um so

449
00:15:55,199 --> 00:15:57,920
and as usual the proof will be by a

450
00:15:57,920 --> 00:16:00,560
hybrid by a hybrid argument

451
00:16:00,560 --> 00:16:02,079
where we're going to modify the

452
00:16:02,079 --> 00:16:04,639
distribution of the challenge image

453
00:16:04,639 --> 00:16:06,399
and then we're going to

454
00:16:06,399 --> 00:16:08,320
argue about the indistinguishability of

455
00:16:08,320 --> 00:16:10,079
neighboring distributions

456
00:16:10,079 --> 00:16:11,680
so the first hybrid is just the original

457
00:16:11,680 --> 00:16:13,839
distribution the challenge image is

458
00:16:13,839 --> 00:16:18,079
sampled uniformly from the um

459
00:16:18,800 --> 00:16:20,160
from the

460
00:16:20,160 --> 00:16:22,399
distribution as defined by the traptor

461
00:16:22,399 --> 00:16:24,480
function

462
00:16:24,480 --> 00:16:27,040
in h1 we're going to program the index

463
00:16:27,040 --> 00:16:28,000
key

464
00:16:28,000 --> 00:16:30,639
after seeing the

465
00:16:30,639 --> 00:16:34,560
challenge image so namely

466
00:16:34,880 --> 00:16:37,440
we're going to set the box our i

467
00:16:37,440 --> 00:16:39,680
to be

468
00:16:39,680 --> 00:16:41,600
as follows so for each for each index i

469
00:16:41,600 --> 00:16:43,519
from 1 to london

470
00:16:43,519 --> 00:16:44,480
if

471
00:16:44,480 --> 00:16:47,920
x i which is going to be the challenge

472
00:16:47,920 --> 00:16:49,040
pre image

473
00:16:49,040 --> 00:16:50,880
if x i is equal to zero we're going to

474
00:16:50,880 --> 00:16:52,880
set our i to be

475
00:16:52,880 --> 00:16:53,759
um

476
00:16:53,759 --> 00:16:58,480
y i which is again an encryption uh

477
00:16:58,480 --> 00:17:01,360
of zero using the random coins as the

478
00:17:01,360 --> 00:17:03,199
random coin is the ith block of the

479
00:17:03,199 --> 00:17:05,919
indian prg so this

480
00:17:05,919 --> 00:17:07,599
this piece here

481
00:17:07,599 --> 00:17:11,760
xor with some uniformly sample string si

482
00:17:11,760 --> 00:17:14,559
again si is sampled

483
00:17:14,559 --> 00:17:16,959
from the from the appropriate domain

484
00:17:16,959 --> 00:17:18,559
um

485
00:17:18,559 --> 00:17:21,599
whereas if x i is going to be equal to 1

486
00:17:21,599 --> 00:17:23,280
we're going to sample

487
00:17:23,280 --> 00:17:25,439
y i

488
00:17:25,439 --> 00:17:26,880
uniformly

489
00:17:26,880 --> 00:17:28,000
and

490
00:17:28,000 --> 00:17:31,600
our i as the xor of this uniform string

491
00:17:31,600 --> 00:17:33,919
with an encryption of zero you using the

492
00:17:33,919 --> 00:17:36,880
appropriate block of the individual

493
00:17:36,880 --> 00:17:38,080
um

494
00:17:38,080 --> 00:17:41,039
and actually if you squint very very

495
00:17:41,039 --> 00:17:43,600
very carefully you you will notice that

496
00:17:43,600 --> 00:17:46,160
we didn't really do anything and we've

497
00:17:46,160 --> 00:17:48,480
just been moving variables around so

498
00:17:48,480 --> 00:17:50,080
these these two distributions are

499
00:17:50,080 --> 00:17:52,320
actually identical

500
00:17:52,320 --> 00:17:53,919
um

501
00:17:53,919 --> 00:17:57,280
so so so far nothing has happened

502
00:17:57,280 --> 00:17:59,520
so in the next step

503
00:17:59,520 --> 00:18:02,320
instead of computing si uniformly

504
00:18:02,320 --> 00:18:03,520
we're going to compute it as an

505
00:18:03,520 --> 00:18:05,679
encryption of zero although note that

506
00:18:05,679 --> 00:18:07,840
i'm not specifying the random coins here

507
00:18:07,840 --> 00:18:09,919
so this means that si is going to be

508
00:18:09,919 --> 00:18:12,080
sampled using uniformly sample

509
00:18:12,080 --> 00:18:14,480
randomness

510
00:18:14,480 --> 00:18:15,520
and

511
00:18:15,520 --> 00:18:18,480
now we can argue that uh

512
00:18:18,480 --> 00:18:20,240
since the encryption scheme has suited

513
00:18:20,240 --> 00:18:22,320
random ciphertext then

514
00:18:22,320 --> 00:18:23,679
um

515
00:18:23,679 --> 00:18:25,760
encryptions of zero are computationally

516
00:18:25,760 --> 00:18:27,600
indistinguishable too

517
00:18:27,600 --> 00:18:29,679
to random string that's the definition

518
00:18:29,679 --> 00:18:31,280
of pseudo-random ciphertext so

519
00:18:31,280 --> 00:18:32,880
computation and distinguishability of

520
00:18:32,880 --> 00:18:35,919
these two hybrids follow

521
00:18:36,720 --> 00:18:39,280
now in the next hybrid

522
00:18:39,280 --> 00:18:42,960
we're going to compute all ciphertexts

523
00:18:42,960 --> 00:18:44,000
as

524
00:18:44,000 --> 00:18:45,840
encryption of zero using

525
00:18:45,840 --> 00:18:47,840
truly random coins

526
00:18:47,840 --> 00:18:49,840
and

527
00:18:49,840 --> 00:18:51,600
the security here

528
00:18:51,600 --> 00:18:53,600
does not follow immediately from the

529
00:18:53,600 --> 00:18:55,679
fact that the coin is a pseudorandom but

530
00:18:55,679 --> 00:18:58,000
one really needs the

531
00:18:58,000 --> 00:19:00,480
security of the hinting prg

532
00:19:00,480 --> 00:19:02,000
and the reason is that

533
00:19:02,000 --> 00:19:05,440
the position of the ciphertext

534
00:19:05,440 --> 00:19:07,840
does leak something about the seed but

535
00:19:07,840 --> 00:19:09,600
it turns out that that leakage is

536
00:19:09,600 --> 00:19:11,280
precisely the leakage which is allowed

537
00:19:11,280 --> 00:19:14,640
by the indian prg so again computational

538
00:19:14,640 --> 00:19:16,720
distinguishability follows

539
00:19:16,720 --> 00:19:18,720
follows by a simple invocation of that

540
00:19:18,720 --> 00:19:21,280
property

541
00:19:21,600 --> 00:19:23,840
finally as the last step we can change

542
00:19:23,840 --> 00:19:25,919
all ciphertext

543
00:19:25,919 --> 00:19:28,559
of the uh challenge image as encryptions

544
00:19:28,559 --> 00:19:29,919
of one

545
00:19:29,919 --> 00:19:32,240
and at this point since all ciphertexts

546
00:19:32,240 --> 00:19:34,559
are previously computed with

547
00:19:34,559 --> 00:19:37,200
truly truly uniform coins

548
00:19:37,200 --> 00:19:39,440
we can appeal to the cpa security of the

549
00:19:39,440 --> 00:19:42,160
encryption scheme

550
00:19:42,160 --> 00:19:42,960
and

551
00:19:42,960 --> 00:19:44,400
finally the proof is concluded by

552
00:19:44,400 --> 00:19:46,080
observing that at this point the

553
00:19:46,080 --> 00:19:47,120
challenge

554
00:19:47,120 --> 00:19:48,640
image is no pre-image and therefore it

555
00:19:48,640 --> 00:19:51,600
cannot be inverted

556
00:19:51,600 --> 00:19:53,360
and

557
00:19:53,360 --> 00:19:55,200
with this i would like to thank you for

558
00:19:55,200 --> 00:19:56,799
your attention

559
00:19:56,799 --> 00:20:00,480
and conclude my talk

