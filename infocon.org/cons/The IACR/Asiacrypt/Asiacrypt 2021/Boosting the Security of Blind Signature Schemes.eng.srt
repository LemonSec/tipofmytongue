1
00:00:00,880 --> 00:00:02,879
hi my name is michael rosenberg and

2
00:00:02,879 --> 00:00:04,560
today i'm presenting results for my work

3
00:00:04,560 --> 00:00:06,240
on blind signatures with john katz and

4
00:00:06,240 --> 00:00:07,600
julian loss

5
00:00:07,600 --> 00:00:10,399
let's get started

6
00:00:10,639 --> 00:00:12,559
first we define what a blind signature

7
00:00:12,559 --> 00:00:14,080
scheme is

8
00:00:14,080 --> 00:00:15,599
we start with the intuition that blind

9
00:00:15,599 --> 00:00:17,440
signatures are like digital signatures

10
00:00:17,440 --> 00:00:19,359
except the signer learns nothing about

11
00:00:19,359 --> 00:00:22,000
the message that it's signed

12
00:00:22,000 --> 00:00:24,080
the security property is formalized as

13
00:00:24,080 --> 00:00:25,840
blindness and essentially means that a

14
00:00:25,840 --> 00:00:27,920
signer who blindly signed two messages

15
00:00:27,920 --> 00:00:29,679
can't tell what order they were signed

16
00:00:29,679 --> 00:00:32,320
in even if given the full transcript

17
00:00:32,320 --> 00:00:36,800
message contents and signatures later on

18
00:00:36,800 --> 00:00:38,480
the next security property is similar to

19
00:00:38,480 --> 00:00:41,040
one in digital signatures

20
00:00:41,040 --> 00:00:43,280
a signature scheme is unforgeable if

21
00:00:43,280 --> 00:00:45,200
given access to a signing oracle the

22
00:00:45,200 --> 00:00:47,360
adversary can't produce a fresh message

23
00:00:47,360 --> 00:00:49,520
signature pair i.e one that the signer

24
00:00:49,520 --> 00:00:51,520
hasn't seen yet

25
00:00:51,520 --> 00:00:52,960
the problem with this definition in the

26
00:00:52,960 --> 00:00:54,960
case of blind signatures is that every

27
00:00:54,960 --> 00:00:56,719
message signature pair looks fresh

28
00:00:56,719 --> 00:00:58,399
because all the messages were signed

29
00:00:58,399 --> 00:01:00,239
blindly

30
00:01:00,239 --> 00:01:01,920
so the standard version of

31
00:01:01,920 --> 00:01:03,920
unforgeability for blind signatures is a

32
00:01:03,920 --> 00:01:05,600
slightly different notion called one

33
00:01:05,600 --> 00:01:08,000
more unforge-ability or omuf

34
00:01:08,000 --> 00:01:10,000
this game just counts message signature

35
00:01:10,000 --> 00:01:11,439
pairs

36
00:01:11,439 --> 00:01:13,119
a blind signature scheme is one more

37
00:01:13,119 --> 00:01:15,439
unforgeable if an adversary who makes l

38
00:01:15,439 --> 00:01:17,680
many calls to a signing oracle is unable

39
00:01:17,680 --> 00:01:20,000
to produce l plus one distinct message

40
00:01:20,000 --> 00:01:22,080
signature pairs

41
00:01:22,080 --> 00:01:24,000
to provide motivation we note that there

42
00:01:24,000 --> 00:01:25,600
are real world applications for blind

43
00:01:25,600 --> 00:01:27,040
signature schemes

44
00:01:27,040 --> 00:01:28,560
they have appeared as a primitive for an

45
00:01:28,560 --> 00:01:30,400
anonymous fair exchange mechanism for

46
00:01:30,400 --> 00:01:32,640
bitcoin as well as for a cryptocurrency

47
00:01:32,640 --> 00:01:34,720
imagined by david chalm called ecash

48
00:01:34,720 --> 00:01:36,560
which is actually the origin of the idea

49
00:01:36,560 --> 00:01:39,960
of blind signatures

50
00:01:40,960 --> 00:01:42,960
our paper begins by observing a gap in

51
00:01:42,960 --> 00:01:44,479
existing efficient blind signature

52
00:01:44,479 --> 00:01:45,520
schemes

53
00:01:45,520 --> 00:01:47,280
we look at existing schemes and note

54
00:01:47,280 --> 00:01:49,759
some of the common caveats

55
00:01:49,759 --> 00:01:51,759
first the blind snore signature scheme

56
00:01:51,759 --> 00:01:52,880
is only proven secure for

57
00:01:52,880 --> 00:01:55,119
logarithmically many signatures

58
00:01:55,119 --> 00:01:57,040
in addition it was proven last year that

59
00:01:57,040 --> 00:01:58,719
it is completely broken for more than

60
00:01:58,719 --> 00:02:00,560
log of two kappa concurrent sessions

61
00:02:00,560 --> 00:02:04,159
where kappa is the security parameter

62
00:02:04,159 --> 00:02:05,520
another observation is that other

63
00:02:05,520 --> 00:02:07,119
schemes supporting polynomially many

64
00:02:07,119 --> 00:02:08,720
signatures rely on non-standard

65
00:02:08,720 --> 00:02:10,639
assumptions including the code

66
00:02:10,639 --> 00:02:12,800
diffie-hellman inversion assumption

67
00:02:12,800 --> 00:02:16,239
the one more rsa inversion assumption

68
00:02:16,239 --> 00:02:18,879
and the algebraic group model

69
00:02:18,879 --> 00:02:20,400
finally there are some blind signature

70
00:02:20,400 --> 00:02:22,000
schemes which don't provide concurrency

71
00:02:22,000 --> 00:02:24,319
at all

72
00:02:25,200 --> 00:02:27,040
in light of this overview we aim to fill

73
00:02:27,040 --> 00:02:28,640
a gap in existing blind signature

74
00:02:28,640 --> 00:02:29,599
schemes

75
00:02:29,599 --> 00:02:31,680
specifically we wish to construct a

76
00:02:31,680 --> 00:02:33,200
blind signature scheme in the random

77
00:02:33,200 --> 00:02:35,280
oracle model using standard number

78
00:02:35,280 --> 00:02:37,200
theoretic assumptions that is provably

79
00:02:37,200 --> 00:02:39,200
secure after polynomially many

80
00:02:39,200 --> 00:02:41,360
signatures and with arbitrary

81
00:02:41,360 --> 00:02:44,000
concurrency

82
00:02:44,800 --> 00:02:46,480
we achieve this goal by constructing a

83
00:02:46,480 --> 00:02:48,560
generic transformation that transforms a

84
00:02:48,560 --> 00:02:49,920
blind signature scheme supporting

85
00:02:49,920 --> 00:02:52,160
logarithmically many signatures to one

86
00:02:52,160 --> 00:02:54,560
that supports polynomially many

87
00:02:54,560 --> 00:02:56,400
specifically our transformation operates

88
00:02:56,400 --> 00:02:58,080
on blind signature schemes which arise

89
00:02:58,080 --> 00:02:59,599
from algebraic hash functions with

90
00:02:59,599 --> 00:03:01,760
certain homomorphic properties this is

91
00:03:01,760 --> 00:03:04,879
expanded on later

92
00:03:04,879 --> 00:03:07,040
secondly we make no new security

93
00:03:07,040 --> 00:03:08,239
assumptions

94
00:03:08,239 --> 00:03:10,480
thus after transformation the only

95
00:03:10,480 --> 00:03:12,080
assumptions necessary are the ones that

96
00:03:12,080 --> 00:03:14,000
come from the underlying schemes such as

97
00:03:14,000 --> 00:03:18,159
discrete log rsa or factoring

98
00:03:18,159 --> 00:03:19,760
finally the schemes that this

99
00:03:19,760 --> 00:03:21,920
transformation outputs support arbitrary

100
00:03:21,920 --> 00:03:24,560
concurrency

101
00:03:24,560 --> 00:03:25,840
our transformation does come with

102
00:03:25,840 --> 00:03:27,760
caveats however

103
00:03:27,760 --> 00:03:29,840
first the communication complexity

104
00:03:29,840 --> 00:03:31,440
depends on how many signatures have

105
00:03:31,440 --> 00:03:33,680
already been computed

106
00:03:33,680 --> 00:03:35,360
this can be improved however to just

107
00:03:35,360 --> 00:03:37,200
being linear in the number of dishonest

108
00:03:37,200 --> 00:03:39,519
users who were caught being dishonest

109
00:03:39,519 --> 00:03:42,239
we explain what this means later

110
00:03:42,239 --> 00:03:44,159
the second caveat is that the estimated

111
00:03:44,159 --> 00:03:46,560
group size necessary to achieve 128-bit

112
00:03:46,560 --> 00:03:50,799
security is approximately 5000 bits

113
00:03:51,040 --> 00:03:52,720
to begin describing our transformation

114
00:03:52,720 --> 00:03:54,239
we start with a transformation due to

115
00:03:54,239 --> 00:03:56,879
poncheval

116
00:03:57,760 --> 00:03:59,519
we start with an ordinary three-round

117
00:03:59,519 --> 00:04:01,120
blind signature scheme

118
00:04:01,120 --> 00:04:02,799
in ponchaval's case it is the blind

119
00:04:02,799 --> 00:04:04,720
okomota snore scheme

120
00:04:04,720 --> 00:04:06,640
the signer initiates the protocol the

121
00:04:06,640 --> 00:04:08,799
user blinds their input sends it to the

122
00:04:08,799 --> 00:04:10,879
signer to be signed and then unblinds

123
00:04:10,879 --> 00:04:13,040
the signer's output

124
00:04:13,040 --> 00:04:14,879
ponchovalle turns this into a six-round

125
00:04:14,879 --> 00:04:16,880
protocol by introducing a cut and choose

126
00:04:16,880 --> 00:04:18,320
sub-protocol

127
00:04:18,320 --> 00:04:21,680
let's examine this in detail

128
00:04:21,918 --> 00:04:23,440
the transform changes the underlying

129
00:04:23,440 --> 00:04:24,960
scheme as follows

130
00:04:24,960 --> 00:04:27,040
first the user now commits to two sets

131
00:04:27,040 --> 00:04:28,400
of random coins

132
00:04:28,400 --> 00:04:29,759
this is the randomness that's going to

133
00:04:29,759 --> 00:04:32,240
be used to blind their message

134
00:04:32,240 --> 00:04:34,400
next the signer picks a commitment at

135
00:04:34,400 --> 00:04:36,800
random to leave unopened the other must

136
00:04:36,800 --> 00:04:38,720
be opened

137
00:04:38,720 --> 00:04:41,759
next the client sends the opening

138
00:04:41,759 --> 00:04:43,199
and finally the signer checks the

139
00:04:43,199 --> 00:04:44,160
opening

140
00:04:44,160 --> 00:04:46,080
if it was valid it completes the rest of

141
00:04:46,080 --> 00:04:48,720
the protocol as in the underlying scheme

142
00:04:48,720 --> 00:04:50,639
if the opening was invalid then the

143
00:04:50,639 --> 00:04:52,400
signer aborts the protocol and then

144
00:04:52,400 --> 00:04:55,040
halts forever refusing to sign any

145
00:04:55,040 --> 00:04:56,560
future messages

146
00:04:56,560 --> 00:04:58,240
we call this tear down because it can't

147
00:04:58,240 --> 00:05:01,040
be recovered from

148
00:05:01,280 --> 00:05:03,120
in the real world tear down would amount

149
00:05:03,120 --> 00:05:04,960
to updating the signer's key pair every

150
00:05:04,960 --> 00:05:06,479
time a user is caught cheating in the

151
00:05:06,479 --> 00:05:08,880
protocol

152
00:05:09,600 --> 00:05:12,960
what does this transform set out to do

153
00:05:12,960 --> 00:05:14,880
pontrevol's proof strategy is to reduce

154
00:05:14,880 --> 00:05:16,639
the security of the underlying scheme

155
00:05:16,639 --> 00:05:18,639
which recall can only handle

156
00:05:18,639 --> 00:05:20,880
logarithmically many signatures to that

157
00:05:20,880 --> 00:05:23,039
of the transform scheme

158
00:05:23,039 --> 00:05:24,800
since the transformed scheme is supposed

159
00:05:24,800 --> 00:05:26,639
to support far more signatures than the

160
00:05:26,639 --> 00:05:28,800
underlying scheme there needs to be some

161
00:05:28,800 --> 00:05:30,080
way to bring down the number of

162
00:05:30,080 --> 00:05:32,400
interactions an adversary can initiate

163
00:05:32,400 --> 00:05:34,560
with the underlying signer

164
00:05:34,560 --> 00:05:36,560
to do this pointrevolt defines a

165
00:05:36,560 --> 00:05:38,960
simulator which can simulate the signer

166
00:05:38,960 --> 00:05:40,800
in the new scheme as long as the

167
00:05:40,800 --> 00:05:42,240
commitment to the randomness was

168
00:05:42,240 --> 00:05:44,400
honestly computed

169
00:05:44,400 --> 00:05:46,479
so as long as the user is on as the

170
00:05:46,479 --> 00:05:48,240
underlying signer doesn't need to be

171
00:05:48,240 --> 00:05:50,560
called

172
00:05:51,280 --> 00:05:53,440
the way to check honest computation is

173
00:05:53,440 --> 00:05:55,440
by having the user make two commitments

174
00:05:55,440 --> 00:05:57,759
and open one of them thus a cheating

175
00:05:57,759 --> 00:05:59,600
user gets caught with probability one

176
00:05:59,600 --> 00:06:02,319
half each session

177
00:06:02,319 --> 00:06:03,600
does this achieve security for

178
00:06:03,600 --> 00:06:07,199
polynomially many signatures

179
00:06:07,199 --> 00:06:09,600
yes it does the reduction goes through

180
00:06:09,600 --> 00:06:12,400
and we get a log one more forger

181
00:06:12,400 --> 00:06:13,919
there's a neat proof that does this by

182
00:06:13,919 --> 00:06:15,759
showing that if a potentially dishonest

183
00:06:15,759 --> 00:06:17,680
user's execution tree with the transform

184
00:06:17,680 --> 00:06:20,080
scheme has polynomially many leaves then

185
00:06:20,080 --> 00:06:21,759
not too many of its branches could have

186
00:06:21,759 --> 00:06:23,759
been pruned i.e it could have only

187
00:06:23,759 --> 00:06:26,160
cheated logarithmically many times hence

188
00:06:26,160 --> 00:06:29,120
the log one more forgery

189
00:06:29,120 --> 00:06:30,000
so

190
00:06:30,000 --> 00:06:31,520
since the number of cheating attempts is

191
00:06:31,520 --> 00:06:33,120
logarithmically bounded after

192
00:06:33,120 --> 00:06:35,840
polynomially many interactions and since

193
00:06:35,840 --> 00:06:37,680
blind okamoto schnorr is shown to

194
00:06:37,680 --> 00:06:40,000
support logarithmically many signatures

195
00:06:40,000 --> 00:06:41,840
punjab concludes that the transform

196
00:06:41,840 --> 00:06:43,600
scheme supports polynomially many

197
00:06:43,600 --> 00:06:46,080
signatures

198
00:06:46,160 --> 00:06:47,840
some downsides of this scheme include

199
00:06:47,840 --> 00:06:49,039
the fact that it doesn't permit

200
00:06:49,039 --> 00:06:50,880
arbitrary concurrency

201
00:06:50,880 --> 00:06:53,120
rather it only permits parallel

202
00:06:53,120 --> 00:06:55,840
execution which is a weaker notion

203
00:06:55,840 --> 00:06:58,639
also this requires a full teardown for

204
00:06:58,639 --> 00:07:00,319
every caught cheater which can be

205
00:07:00,319 --> 00:07:02,000
annoying and costly to implement in

206
00:07:02,000 --> 00:07:04,000
practice

207
00:07:04,000 --> 00:07:06,479
finally this transform is not generic

208
00:07:06,479 --> 00:07:08,319
ponchovalle only states the transform in

209
00:07:08,319 --> 00:07:09,840
terms of the okumuda schnorr blind

210
00:07:09,840 --> 00:07:12,560
signature scheme

211
00:07:13,680 --> 00:07:15,440
we now introduce our transform by

212
00:07:15,440 --> 00:07:17,120
starting with punchavals

213
00:07:17,120 --> 00:07:18,639
our scheme doesn't diverge from it too

214
00:07:18,639 --> 00:07:20,880
much

215
00:07:20,880 --> 00:07:22,800
the first detail of our transform is

216
00:07:22,800 --> 00:07:24,400
that its structure depends on the number

217
00:07:24,400 --> 00:07:25,759
of sessions that have already been

218
00:07:25,759 --> 00:07:27,120
initiated

219
00:07:27,120 --> 00:07:29,120
in this sense it is stateful

220
00:07:29,120 --> 00:07:32,639
we denote the session number by n

221
00:07:32,960 --> 00:07:35,599
in session n the user commits to n sets

222
00:07:35,599 --> 00:07:39,520
of random coins rather than just two

223
00:07:40,160 --> 00:07:40,960
then

224
00:07:40,960 --> 00:07:43,120
the user picks an index i which will be

225
00:07:43,120 --> 00:07:46,639
the commitment that is not opened

226
00:07:47,280 --> 00:07:49,039
the user opens all the commitments other

227
00:07:49,039 --> 00:07:51,440
than i

228
00:07:52,879 --> 00:07:54,479
and finally the signer checks all the

229
00:07:54,479 --> 00:07:55,759
commitments

230
00:07:55,759 --> 00:07:58,879
on success it signs just as before

231
00:07:58,879 --> 00:08:02,240
on failure it only aborts rather than

232
00:08:02,240 --> 00:08:04,160
aborting and tearing down

233
00:08:04,160 --> 00:08:05,840
this means that the signer can continue

234
00:08:05,840 --> 00:08:08,080
signing future sessions even if cheating

235
00:08:08,080 --> 00:08:10,319
is detected

236
00:08:10,319 --> 00:08:11,919
we now compare this to the original

237
00:08:11,919 --> 00:08:14,960
point of all transform

238
00:08:15,919 --> 00:08:18,160
first remember that we can only afford o

239
00:08:18,160 --> 00:08:19,919
of log kappa many signatures in the

240
00:08:19,919 --> 00:08:21,280
underlying scheme

241
00:08:21,280 --> 00:08:23,280
the goal of both ponchovall's and our

242
00:08:23,280 --> 00:08:25,680
transformations in their security proofs

243
00:08:25,680 --> 00:08:26,879
is to limit the number of such

244
00:08:26,879 --> 00:08:29,440
signatures

245
00:08:29,680 --> 00:08:31,759
previously the probability of a user

246
00:08:31,759 --> 00:08:33,679
getting away with cheating was one half

247
00:08:33,679 --> 00:08:35,279
in each session

248
00:08:35,279 --> 00:08:37,599
if a tear down weren't enforced a user

249
00:08:37,599 --> 00:08:39,360
could cheat linearly many times which

250
00:08:39,360 --> 00:08:40,799
would potentially break the underlying

251
00:08:40,799 --> 00:08:41,919
scheme

252
00:08:41,919 --> 00:08:45,519
thus tear downs are necessary

253
00:08:45,519 --> 00:08:47,680
in our transform the probability of a

254
00:08:47,680 --> 00:08:49,360
user getting away with cheating is 1

255
00:08:49,360 --> 00:08:51,680
over n in session n

256
00:08:51,680 --> 00:08:53,920
without using teardown the expected

257
00:08:53,920 --> 00:08:55,839
number of times a user could cheat is

258
00:08:55,839 --> 00:08:57,600
logarithmic in the number of sessions

259
00:08:57,600 --> 00:08:59,839
they initiate since this is a harmonic

260
00:08:59,839 --> 00:09:01,440
sum

261
00:09:01,440 --> 00:09:03,839
also importantly we prove that with high

262
00:09:03,839 --> 00:09:05,839
probability a user can't do much better

263
00:09:05,839 --> 00:09:07,839
than the expected value so they can't

264
00:09:07,839 --> 00:09:11,120
escape the logarithmic bound

265
00:09:11,279 --> 00:09:12,959
since we've logarithmically bounded the

266
00:09:12,959 --> 00:09:14,160
number of interactions with the

267
00:09:14,160 --> 00:09:16,160
underlying signer we conclude that our

268
00:09:16,160 --> 00:09:18,160
scheme is secure for polynomially many

269
00:09:18,160 --> 00:09:21,360
signatures without tear downs

270
00:09:21,360 --> 00:09:24,800
we now compare concurrency

271
00:09:25,279 --> 00:09:27,360
recall that the panchaval transform only

272
00:09:27,360 --> 00:09:29,600
permitted parallel executions which is

273
00:09:29,600 --> 00:09:32,320
weaker than arbitrary concurrency

274
00:09:32,320 --> 00:09:34,399
in particular with parallel execution a

275
00:09:34,399 --> 00:09:36,160
session cannot advance faster than its

276
00:09:36,160 --> 00:09:38,720
predecessors

277
00:09:38,720 --> 00:09:40,959
with our scheme the only state is the

278
00:09:40,959 --> 00:09:42,480
session number n

279
00:09:42,480 --> 00:09:44,800
so if n is atomically incremented across

280
00:09:44,800 --> 00:09:46,399
sessions the harmonic sum from the

281
00:09:46,399 --> 00:09:48,399
previous slide holds regardless of the

282
00:09:48,399 --> 00:09:50,640
number of concurrent sessions running

283
00:09:50,640 --> 00:09:54,480
thus we achieve arbitrary concurrency

284
00:09:54,480 --> 00:09:56,000
we also prove that you can do better

285
00:09:56,000 --> 00:09:57,680
than incrementing every time

286
00:09:57,680 --> 00:09:59,600
in fact we show that it suffices to only

287
00:09:59,600 --> 00:10:01,360
increment n when a user is caught

288
00:10:01,360 --> 00:10:04,360
cheating

289
00:10:05,360 --> 00:10:08,240
finally we compare genericity

290
00:10:08,240 --> 00:10:10,640
as mentioned before punjab's transform

291
00:10:10,640 --> 00:10:12,480
was only defined in terms of the okomoto

292
00:10:12,480 --> 00:10:15,279
schnorr blind signature scheme

293
00:10:15,279 --> 00:10:17,279
our result which builds on ponchovall's

294
00:10:17,279 --> 00:10:19,680
transform also generalizes it to any

295
00:10:19,680 --> 00:10:21,360
blind signature scheme built on an

296
00:10:21,360 --> 00:10:22,880
algebraic hash function with certain

297
00:10:22,880 --> 00:10:24,959
homomorphic properties

298
00:10:24,959 --> 00:10:26,640
we refer to these as linear function

299
00:10:26,640 --> 00:10:28,560
families in the paper

300
00:10:28,560 --> 00:10:30,240
examples of blind signature schemes

301
00:10:30,240 --> 00:10:32,720
built on top of a linear function family

302
00:10:32,720 --> 00:10:35,680
include shnoor okamotoshnore

303
00:10:35,680 --> 00:10:40,480
fiat shamir and okomoto gyukiskate

304
00:10:40,480 --> 00:10:42,160
that's it for my talk

305
00:10:42,160 --> 00:10:45,800
thank you for your time

