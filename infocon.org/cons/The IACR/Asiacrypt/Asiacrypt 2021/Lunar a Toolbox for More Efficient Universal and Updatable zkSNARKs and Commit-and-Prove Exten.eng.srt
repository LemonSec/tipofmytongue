1
00:00:00,399 --> 00:00:02,960
hello my name is anaya skerol and today

2
00:00:02,960 --> 00:00:05,440
i'd like to present you lunar this is a

3
00:00:05,440 --> 00:00:07,839
toolbox for more efficient universal and

4
00:00:07,839 --> 00:00:10,160
updatable sequesters and comedian proof

5
00:00:10,160 --> 00:00:13,280
extensions this is joint work with mateo

6
00:00:13,280 --> 00:00:16,160
campanelli antonio fano dario fiore and

7
00:00:16,160 --> 00:00:19,359
adrian rodriguez

8
00:00:23,199 --> 00:00:26,000
but first let's explain what's a snark

9
00:00:26,000 --> 00:00:28,160
it stands for succinct non-interactive

10
00:00:28,160 --> 00:00:30,880
arguments of knowledge and the idea is

11
00:00:30,880 --> 00:00:33,520
that this is a tool that will allow you

12
00:00:33,520 --> 00:00:34,480
to

13
00:00:34,480 --> 00:00:37,200
convince someone of a statement

14
00:00:37,200 --> 00:00:40,320
in a very succinct manner okay so

15
00:00:40,320 --> 00:00:44,399
suppose you know suppose a lien exist

16
00:00:44,399 --> 00:00:46,559
and you want to convince someone about

17
00:00:46,559 --> 00:00:48,399
this claim right

18
00:00:48,399 --> 00:00:50,079
it's the one thing you cannot of course

19
00:00:50,079 --> 00:00:52,000
you can do if you have this all in you

20
00:00:52,000 --> 00:00:54,879
can simply show this halloween right

21
00:00:54,879 --> 00:00:56,960
and then this astronaut you'll be

22
00:00:56,960 --> 00:00:59,920
absolutely convinced about this right

23
00:00:59,920 --> 00:01:01,840
but what is the problem about this

24
00:01:01,840 --> 00:01:04,239
approach is you know perhaps you don't

25
00:01:04,239 --> 00:01:07,119
want to show the alien perhaps the alien

26
00:01:07,119 --> 00:01:09,600
is some sensitive information you don't

27
00:01:09,600 --> 00:01:11,119
want to filter

28
00:01:11,119 --> 00:01:13,520
well then the kind of primitive that you

29
00:01:13,520 --> 00:01:17,280
want to use is a serial snark okay

30
00:01:17,280 --> 00:01:20,320
here you only get to learn that the

31
00:01:20,320 --> 00:01:22,960
claim is true you don't even have to

32
00:01:22,960 --> 00:01:26,880
show any very little piece of this alien

33
00:01:26,880 --> 00:01:28,720
to have someone convinced about the

34
00:01:28,720 --> 00:01:29,840
claim

35
00:01:29,840 --> 00:01:31,280
but there's an issue that these

36
00:01:31,280 --> 00:01:33,439
primitives have been facing for some

37
00:01:33,439 --> 00:01:36,159
time which is the setup and this is a

38
00:01:36,159 --> 00:01:39,439
procedure and whose goal is to create

39
00:01:39,439 --> 00:01:41,600
the keys that will be used to prove its

40
00:01:41,600 --> 00:01:44,399
relation and this is executed by a third

41
00:01:44,399 --> 00:01:45,680
party

42
00:01:45,680 --> 00:01:48,159
and i say this is a trusted setup

43
00:01:48,159 --> 00:01:51,119
because one needs to trust that this

44
00:01:51,119 --> 00:01:53,520
third party will be removing and

45
00:01:53,520 --> 00:01:55,840
deleting completely the randomness used

46
00:01:55,840 --> 00:01:58,799
to generate those keys because otherwise

47
00:01:58,799 --> 00:02:01,600
that third party could be computing

48
00:02:01,600 --> 00:02:02,880
proofs for

49
00:02:02,880 --> 00:02:05,200
four statements which is something we

50
00:02:05,200 --> 00:02:06,960
really want to avoid

51
00:02:06,960 --> 00:02:09,360
but luckily there's another type of

52
00:02:09,360 --> 00:02:12,239
setup which is universal

53
00:02:12,239 --> 00:02:14,480
and what we mean by that is that you

54
00:02:14,480 --> 00:02:17,120
only need to perform a one-time setup

55
00:02:17,120 --> 00:02:19,840
for any bonded relation

56
00:02:19,840 --> 00:02:23,840
okay so you can define some sizes some

57
00:02:23,840 --> 00:02:26,800
some bonds on the type of relation

58
00:02:26,800 --> 00:02:29,200
and and you can have a family of

59
00:02:29,200 --> 00:02:32,640
relations for which the same setup will

60
00:02:32,640 --> 00:02:35,120
be working just fine

61
00:02:35,120 --> 00:02:37,280
and the very nice addition

62
00:02:37,280 --> 00:02:39,519
is updatability

63
00:02:39,519 --> 00:02:42,239
so in this case even if

64
00:02:42,239 --> 00:02:45,680
this setup is only run once for

65
00:02:45,680 --> 00:02:48,560
all the relations in this box

66
00:02:48,560 --> 00:02:51,599
um you can have participants in this

67
00:02:51,599 --> 00:02:55,200
ceremony that will participate

68
00:02:55,200 --> 00:02:57,040
adding randomness

69
00:02:57,040 --> 00:02:59,120
so as long as there is one of these

70
00:02:59,120 --> 00:03:01,040
entities that is honest and is not

71
00:03:01,040 --> 00:03:04,000
licking this randomness the randomness

72
00:03:04,000 --> 00:03:05,840
is preserved and then

73
00:03:05,840 --> 00:03:08,159
no one should be able to create fake

74
00:03:08,159 --> 00:03:10,480
proofs

75
00:03:11,440 --> 00:03:13,040
now let's look at the non-exhaustive

76
00:03:13,040 --> 00:03:15,200
timing of these constructions the first

77
00:03:15,200 --> 00:03:17,120
universal and updatable zika snark

78
00:03:17,120 --> 00:03:19,120
appeared at crypto 18 and it had a

79
00:03:19,120 --> 00:03:21,360
quadratic size srs this is the size of

80
00:03:21,360 --> 00:03:23,680
the key that i was talking about

81
00:03:23,680 --> 00:03:26,239
then in ccs19 two more candidates

82
00:03:26,239 --> 00:03:28,480
appeared and they were the first linear

83
00:03:28,480 --> 00:03:31,599
size srs universal database snarks sonic

84
00:03:31,599 --> 00:03:33,680
had a constant size proof and a quasi

85
00:03:33,680 --> 00:03:36,080
linear improver whereas lego uic and

86
00:03:36,080 --> 00:03:38,799
lego snark had a logarithmic proof size

87
00:03:38,799 --> 00:03:40,640
and a linear proof

88
00:03:40,640 --> 00:03:42,720
some months later plank and marlin

89
00:03:42,720 --> 00:03:44,000
appeared

90
00:03:44,000 --> 00:03:46,080
and they were following the steps in

91
00:03:46,080 --> 00:03:48,879
sonic so they are also linear size srs

92
00:03:48,879 --> 00:03:51,280
uh universal number will seek snarks

93
00:03:51,280 --> 00:03:53,680
and they have constant size proof but

94
00:03:53,680 --> 00:03:56,000
shorter and quasi-air prove it a lot

95
00:03:56,000 --> 00:03:58,400
faster and the way they obtain these

96
00:03:58,400 --> 00:04:00,000
constructions is by having an

97
00:04:00,000 --> 00:04:02,319
information theoretic object that is

98
00:04:02,319 --> 00:04:03,360
like an

99
00:04:03,360 --> 00:04:06,720
iop object um and it is combined with

100
00:04:06,720 --> 00:04:08,400
polygon accommodates we will see how

101
00:04:08,400 --> 00:04:11,200
this works in a minute

102
00:04:11,200 --> 00:04:12,799
and then in lunar

103
00:04:12,799 --> 00:04:14,560
what we are providing is a family of

104
00:04:14,560 --> 00:04:16,798
trade-offs of different linear sizes are

105
00:04:16,798 --> 00:04:18,959
as universal materials leaky snarks we

106
00:04:18,959 --> 00:04:21,680
are giving them more efficiency in the

107
00:04:21,680 --> 00:04:24,880
prover side and also the shorter proofs

108
00:04:24,880 --> 00:04:27,280
and we are also

109
00:04:27,280 --> 00:04:27,759
coming giving

110
00:04:27,759 --> 00:04:29,440
proof variance

111
00:04:29,440 --> 00:04:32,479
so the way uh compilation works

112
00:04:32,479 --> 00:04:35,199
is uh well you start with a more general

113
00:04:35,199 --> 00:04:38,320
iop like object that generalizes plunks

114
00:04:38,320 --> 00:04:40,479
and marlins and instead of having

115
00:04:40,479 --> 00:04:42,960
polynomial coming men's we

116
00:04:42,960 --> 00:04:43,919
have

117
00:04:43,919 --> 00:04:46,320
see this nerds and gadgets in order to

118
00:04:46,320 --> 00:04:49,919
obtain our constructions

119
00:04:51,040 --> 00:04:53,600
next i'd like to give some hints about

120
00:04:53,600 --> 00:04:55,759
how plank and modeling work from a high

121
00:04:55,759 --> 00:04:59,280
level so as i said they both start from

122
00:04:59,280 --> 00:05:01,520
an information theoretic object they are

123
00:05:01,520 --> 00:05:03,919
called idolized low degree particles in

124
00:05:03,919 --> 00:05:05,840
plunk or algebraic

125
00:05:05,840 --> 00:05:08,160
holographic proofs in myelin

126
00:05:08,160 --> 00:05:10,320
and they are similar because they are

127
00:05:10,320 --> 00:05:13,280
both interactive oracle proof flavored

128
00:05:13,280 --> 00:05:16,000
so they run in rounds and in each of

129
00:05:16,000 --> 00:05:18,479
those rounds the river sends some oracle

130
00:05:18,479 --> 00:05:20,320
polynomials and then the verifier

131
00:05:20,320 --> 00:05:22,560
answers with some randomness

132
00:05:22,560 --> 00:05:26,479
so this object is then combined

133
00:05:26,479 --> 00:05:29,039
with uh polynomial complements

134
00:05:29,039 --> 00:05:31,759
in order to produce those numbers

135
00:05:31,759 --> 00:05:34,479
but this approach entails some problems

136
00:05:34,479 --> 00:05:36,240
and some limitations that we wanted to

137
00:05:36,240 --> 00:05:38,479
address in lunar so for instance in

138
00:05:38,479 --> 00:05:40,800
marlin the way you would prove things

139
00:05:40,800 --> 00:05:42,240
like

140
00:05:42,240 --> 00:05:45,199
a times b equals c where abc are

141
00:05:45,199 --> 00:05:47,199
committed polynomials would be by

142
00:05:47,199 --> 00:05:50,000
performing some point evaluations

143
00:05:50,000 --> 00:05:52,960
but the problem here is that

144
00:05:52,960 --> 00:05:55,120
this methodology

145
00:05:55,120 --> 00:05:58,080
requires sending one field element per

146
00:05:58,080 --> 00:06:00,800
each committed polynomial

147
00:06:00,800 --> 00:06:02,960
so this has an impact on the proof

148
00:06:02,960 --> 00:06:04,080
length

149
00:06:04,080 --> 00:06:06,880
another limitation here regarding planck

150
00:06:06,880 --> 00:06:09,199
is that it lacks uh zero knowledge

151
00:06:09,199 --> 00:06:12,000
formalization within the abstraction and

152
00:06:12,000 --> 00:06:15,520
for us it was important to encompass

153
00:06:15,520 --> 00:06:18,080
these notions within our structure our

154
00:06:18,080 --> 00:06:19,360
abstraction

155
00:06:19,360 --> 00:06:21,360
and in general this holds for both of

156
00:06:21,360 --> 00:06:22,160
them

157
00:06:22,160 --> 00:06:24,560
possible optimizations that we can do on

158
00:06:24,560 --> 00:06:27,199
the schemes deviate from the abstraction

159
00:06:27,199 --> 00:06:30,080
whereas in lunar we wanted to have all

160
00:06:30,080 --> 00:06:32,880
these optimizations

161
00:06:32,880 --> 00:06:37,360
fully encompassed within our framework

162
00:06:38,000 --> 00:06:39,840
next i'd like to explain you our

163
00:06:39,840 --> 00:06:41,680
information theoretic object that we

164
00:06:41,680 --> 00:06:44,880
call polynomial holographic proof php so

165
00:06:44,880 --> 00:06:46,400
those of you who are more familiar with

166
00:06:46,400 --> 00:06:48,400
ildps or hps

167
00:06:48,400 --> 00:06:50,560
may find some similarities here and this

168
00:06:50,560 --> 00:06:52,720
is because this notion tries to

169
00:06:52,720 --> 00:06:55,759
generalize uh plonks and marlins yet

170
00:06:55,759 --> 00:06:56,880
including

171
00:06:56,880 --> 00:06:58,720
some additional features that make of

172
00:06:58,720 --> 00:07:01,360
php's a more interesting notion so

173
00:07:01,360 --> 00:07:03,280
because we are building pre-processing

174
00:07:03,280 --> 00:07:04,560
snarks

175
00:07:04,560 --> 00:07:06,880
we will have for efficiency reasons and

176
00:07:06,880 --> 00:07:09,520
on an offline phase that will be run by

177
00:07:09,520 --> 00:07:10,960
the indexer

178
00:07:10,960 --> 00:07:11,919
uh

179
00:07:11,919 --> 00:07:14,880
who will be receiving the relation this

180
00:07:14,880 --> 00:07:17,199
is just public information

181
00:07:17,199 --> 00:07:20,000
and we'll encode it as some polynomials

182
00:07:20,000 --> 00:07:22,400
to which later on the verifier will have

183
00:07:22,400 --> 00:07:25,199
oracle access so this is a deterministic

184
00:07:25,199 --> 00:07:28,000
algorithm that even the verifier could

185
00:07:28,000 --> 00:07:30,479
run by themselves

186
00:07:30,479 --> 00:07:33,919
in an offline manner as i said for this

187
00:07:33,919 --> 00:07:36,240
is done for efficiency reasons then

188
00:07:36,240 --> 00:07:38,319
during the online phase between the

189
00:07:38,319 --> 00:07:39,759
prevail and the very fire this

190
00:07:39,759 --> 00:07:41,199
interaction

191
00:07:41,199 --> 00:07:44,879
flows very similarly to iops so in each

192
00:07:44,879 --> 00:07:47,199
round of interaction the prover sends a

193
00:07:47,199 --> 00:07:49,280
series of

194
00:07:49,280 --> 00:07:52,160
polynomials to which again the verifier

195
00:07:52,160 --> 00:07:54,240
will have oracle access

196
00:07:54,240 --> 00:07:56,960
and then the verifier will answer with

197
00:07:56,960 --> 00:07:59,039
some randomness that will be used by the

198
00:07:59,039 --> 00:08:01,520
approver to produce further

199
00:08:01,520 --> 00:08:03,840
polynomials in the coming rounds so

200
00:08:03,840 --> 00:08:06,319
after these rounds are executed the

201
00:08:06,319 --> 00:08:09,199
verifier needs to perform some checks

202
00:08:09,199 --> 00:08:12,400
and finally make a decision about

203
00:08:12,400 --> 00:08:15,520
whether to accept or not in the previous

204
00:08:15,520 --> 00:08:16,400
proof

205
00:08:16,400 --> 00:08:20,160
so if we look more into the php

206
00:08:20,160 --> 00:08:22,639
verification procedure

207
00:08:22,639 --> 00:08:24,560
there will be two types of checks

208
00:08:24,560 --> 00:08:27,120
involved one of them is

209
00:08:27,120 --> 00:08:29,120
checking some bounce on the degree of

210
00:08:29,120 --> 00:08:30,879
the polynomials

211
00:08:30,879 --> 00:08:33,279
this is some well for for completeness

212
00:08:33,279 --> 00:08:35,679
and soundness of the particle

213
00:08:35,679 --> 00:08:37,120
and also

214
00:08:37,120 --> 00:08:38,719
polynomial checks

215
00:08:38,719 --> 00:08:42,080
and here we have been using planck's

216
00:08:42,080 --> 00:08:44,000
equation identities

217
00:08:44,000 --> 00:08:46,080
and this together with our compilation

218
00:08:46,080 --> 00:08:47,519
technique

219
00:08:47,519 --> 00:08:50,560
allows us to have a shorter

220
00:08:50,560 --> 00:08:52,720
proof length

221
00:08:52,720 --> 00:08:54,399
um also

222
00:08:54,399 --> 00:08:56,560
as a side note i wanted to say that for

223
00:08:56,560 --> 00:08:58,720
us it was very important to have a

224
00:08:58,720 --> 00:09:01,600
formalization a fine-grained

225
00:09:01,600 --> 00:09:04,080
notion of zero knowledge at the php

226
00:09:04,080 --> 00:09:05,200
level

227
00:09:05,200 --> 00:09:07,680
so here i'm explaining bio bounded serum

228
00:09:07,680 --> 00:09:10,399
knowledge so this notion

229
00:09:10,399 --> 00:09:13,519
ensures that a php should still be

230
00:09:13,519 --> 00:09:15,839
serial knowledge even after abundant

231
00:09:15,839 --> 00:09:18,880
number of evaluations are filtered

232
00:09:18,880 --> 00:09:22,240
of the provers oracle polynomials

233
00:09:22,240 --> 00:09:24,800
so how's this possible well the

234
00:09:24,800 --> 00:09:26,959
intuition behind this notion is that we

235
00:09:26,959 --> 00:09:29,600
will have to increase the degree

236
00:09:29,600 --> 00:09:32,959
of the oracle polynomials artificially

237
00:09:32,959 --> 00:09:34,959
okay

238
00:09:34,959 --> 00:09:38,560
so just just here there's an example

239
00:09:38,560 --> 00:09:40,959
so for instance if we had an unbounded

240
00:09:40,959 --> 00:09:43,600
number of queries and

241
00:09:43,600 --> 00:09:45,680
and still the php would

242
00:09:45,680 --> 00:09:48,240
remain zero knowledge then it means that

243
00:09:48,240 --> 00:09:51,040
you know that uh oracle polynomial is

244
00:09:51,040 --> 00:09:53,680
not filtering any information about the

245
00:09:53,680 --> 00:09:56,399
witness at all okay

246
00:09:56,399 --> 00:09:59,519
so if it was related to the witness

247
00:09:59,519 --> 00:10:02,079
instead this bounded a number of

248
00:10:02,079 --> 00:10:05,839
evaluations should be smaller

249
00:10:06,079 --> 00:10:07,680
the next thing that i'd like to talk

250
00:10:07,680 --> 00:10:09,920
about are cb snarks

251
00:10:09,920 --> 00:10:13,040
remember our friend this alien here

252
00:10:13,040 --> 00:10:15,760
so in cbs nerds we are introducing the

253
00:10:15,760 --> 00:10:16,839
notion of

254
00:10:16,839 --> 00:10:20,560
commitment so a commitment a you can see

255
00:10:20,560 --> 00:10:23,600
it as an envelope and you can commit to

256
00:10:23,600 --> 00:10:25,120
some information

257
00:10:25,120 --> 00:10:27,360
by putting that information inside that

258
00:10:27,360 --> 00:10:28,560
envelope

259
00:10:28,560 --> 00:10:31,519
so relations in committee proof snarks

260
00:10:31,519 --> 00:10:33,040
look as follows

261
00:10:33,040 --> 00:10:34,880
they essentially have

262
00:10:34,880 --> 00:10:36,640
one additional

263
00:10:36,640 --> 00:10:39,440
input in this envelope

264
00:10:39,440 --> 00:10:43,519
and relations in cp snarks hold if two

265
00:10:43,519 --> 00:10:45,120
things happen

266
00:10:45,120 --> 00:10:46,480
one thing

267
00:10:46,480 --> 00:10:50,079
the normal relation holds

268
00:10:50,079 --> 00:10:53,600
and by opening this envelope you will

269
00:10:53,600 --> 00:10:54,959
find

270
00:10:54,959 --> 00:10:56,720
the witness

271
00:10:56,720 --> 00:10:59,839
so it's important to note here that this

272
00:10:59,839 --> 00:11:02,000
scenario is very

273
00:11:02,000 --> 00:11:05,040
well suited for several reasons

274
00:11:05,040 --> 00:11:07,680
so first of all this gives us

275
00:11:07,680 --> 00:11:10,880
the capability to have more modular

276
00:11:10,880 --> 00:11:13,600
types of proofs

277
00:11:13,600 --> 00:11:16,880
because having this envelope provides

278
00:11:16,880 --> 00:11:19,120
you some interoperability

279
00:11:19,120 --> 00:11:21,600
between different gadgets

280
00:11:21,600 --> 00:11:24,160
and at the end

281
00:11:24,160 --> 00:11:26,800
it also provides some efficiency because

282
00:11:26,800 --> 00:11:28,880
you can have gadgets that are very

283
00:11:28,880 --> 00:11:32,880
efficient for very specific uh relations

284
00:11:32,880 --> 00:11:34,320
and and you can

285
00:11:34,320 --> 00:11:36,399
link them together thanks to this

286
00:11:36,399 --> 00:11:39,279
envelope that opens to the same witness

287
00:11:39,279 --> 00:11:40,399
okay

288
00:11:40,399 --> 00:11:42,640
and in our compiler we are taking

289
00:11:42,640 --> 00:11:47,439
advantage of precisely these properties

290
00:11:47,600 --> 00:11:49,519
now i'm sharing with you one of our

291
00:11:49,519 --> 00:11:52,000
compilers it is the snark compiler

292
00:11:52,000 --> 00:11:54,240
because we have a second one to obtain

293
00:11:54,240 --> 00:11:56,240
commit and proof variance of our family

294
00:11:56,240 --> 00:11:58,079
of snarks

295
00:11:58,079 --> 00:11:59,920
but in this case we will be looking at

296
00:11:59,920 --> 00:12:02,639
how to build our updatable and universal

297
00:12:02,639 --> 00:12:04,959
snarks so if you remember from the

298
00:12:04,959 --> 00:12:06,880
beginning of the slides

299
00:12:06,880 --> 00:12:10,320
that used to be a one-time setup that

300
00:12:10,320 --> 00:12:12,240
was run for

301
00:12:12,240 --> 00:12:14,160
only once for no matter how many

302
00:12:14,160 --> 00:12:16,480
relations we will be proving as long as

303
00:12:16,480 --> 00:12:18,800
they fit within some bounds remember

304
00:12:18,800 --> 00:12:21,839
that box so that box is precisely this

305
00:12:21,839 --> 00:12:24,800
big n this is the bound and then this

306
00:12:24,800 --> 00:12:27,760
algorithm will output this linear size

307
00:12:27,760 --> 00:12:29,040
srs

308
00:12:29,040 --> 00:12:32,320
so how this is done well it first runs

309
00:12:32,320 --> 00:12:35,040
uh the setup of the commitment scheme

310
00:12:35,040 --> 00:12:37,839
with a certain degree bound so this

311
00:12:37,839 --> 00:12:40,160
degree bound will determine the maximum

312
00:12:40,160 --> 00:12:41,519
degree

313
00:12:41,519 --> 00:12:43,519
of the polynomials that you can commit

314
00:12:43,519 --> 00:12:44,320
to

315
00:12:44,320 --> 00:12:47,440
and then this produces a certain

316
00:12:47,440 --> 00:12:48,240
key

317
00:12:48,240 --> 00:12:50,800
for for making these commitments

318
00:12:50,800 --> 00:12:52,560
so then um

319
00:12:52,560 --> 00:12:54,000
you run these

320
00:12:54,000 --> 00:12:56,560
key generation algorithms of two cp

321
00:12:56,560 --> 00:13:00,639
snarks cpphp and cp opening

322
00:13:00,639 --> 00:13:03,200
um so these are two main ingredients of

323
00:13:03,200 --> 00:13:06,000
our compiler one of them will prove the

324
00:13:06,000 --> 00:13:08,480
relation of a php and the other one

325
00:13:08,480 --> 00:13:09,920
proves

326
00:13:09,920 --> 00:13:12,639
the opening of a committed polynomial

327
00:13:12,639 --> 00:13:13,920
and then

328
00:13:13,920 --> 00:13:16,880
on input this commitment key

329
00:13:16,880 --> 00:13:19,920
it will output some evaluation keys and

330
00:13:19,920 --> 00:13:22,480
verification keys which are essentially

331
00:13:22,480 --> 00:13:25,760
what's inside this srs but why is this

332
00:13:25,760 --> 00:13:28,800
scheme updateable well because

333
00:13:28,800 --> 00:13:30,720
this commitment key only contains

334
00:13:30,720 --> 00:13:33,600
monomials in the exponent so anyone can

335
00:13:33,600 --> 00:13:37,040
come and update the whole randomness of

336
00:13:37,040 --> 00:13:40,399
the setup by adding their own okay

337
00:13:40,399 --> 00:13:42,639
now moving on to the derivation

338
00:13:42,639 --> 00:13:43,839
algorithm

339
00:13:43,839 --> 00:13:46,800
this is the terministic algorithm

340
00:13:46,800 --> 00:13:49,519
um that basically takes a simple the

341
00:13:49,519 --> 00:13:52,399
general srs and the relation that we are

342
00:13:52,399 --> 00:13:56,000
going to prove and it outputs a specific

343
00:13:56,000 --> 00:13:59,040
uh specialized srs for that particular

344
00:13:59,040 --> 00:14:01,920
relation and how it is done well first

345
00:14:01,920 --> 00:14:04,639
we commit to the polynomials that are

346
00:14:04,639 --> 00:14:07,440
output by the indexer of the php

347
00:14:07,440 --> 00:14:09,600
remember that those were an encoding of

348
00:14:09,600 --> 00:14:11,839
the relation and the relation is public

349
00:14:11,839 --> 00:14:13,360
information

350
00:14:13,360 --> 00:14:16,480
and then the evaluation key is updated

351
00:14:16,480 --> 00:14:19,519
with the actual polynomials whereas the

352
00:14:19,519 --> 00:14:21,920
verification key is updated with these

353
00:14:21,920 --> 00:14:24,480
commitments to those polynomials

354
00:14:24,480 --> 00:14:26,800
so it's important to note here that we

355
00:14:26,800 --> 00:14:29,279
are going to work with type based

356
00:14:29,279 --> 00:14:31,440
commitment schemes would means that

357
00:14:31,440 --> 00:14:33,360
depending on the type

358
00:14:33,360 --> 00:14:36,000
of the of the input that the commitment

359
00:14:36,000 --> 00:14:38,480
is receiving

360
00:14:38,480 --> 00:14:42,000
the commitment will produce a different

361
00:14:42,000 --> 00:14:43,440
type of

362
00:14:43,440 --> 00:14:45,360
properties

363
00:14:45,360 --> 00:14:48,639
so the relation type of properties means

364
00:14:48,639 --> 00:14:50,560
that since we're

365
00:14:50,560 --> 00:14:52,160
committing

366
00:14:52,160 --> 00:14:54,720
some public information we don't need

367
00:14:54,720 --> 00:14:57,120
the hiding property

368
00:14:57,120 --> 00:14:59,600
and then the somewhat hiding type of

369
00:14:59,600 --> 00:15:03,199
commitment that we introduce in lunar

370
00:15:03,199 --> 00:15:05,040
is the type of commitments that we will

371
00:15:05,040 --> 00:15:07,839
be using uh for those polynomials that

372
00:15:07,839 --> 00:15:10,000
the proverb will be sending and what

373
00:15:10,000 --> 00:15:11,519
does it mean

374
00:15:11,519 --> 00:15:14,959
is that well these type of commitments

375
00:15:14,959 --> 00:15:18,720
leak at most one evaluation at a random

376
00:15:18,720 --> 00:15:20,560
point

377
00:15:20,560 --> 00:15:23,040
okay so what this means is that this

378
00:15:23,040 --> 00:15:27,519
type of commitments can be deterministic

379
00:15:27,519 --> 00:15:28,880
and this is very important for

380
00:15:28,880 --> 00:15:31,279
efficiency reasons right

381
00:15:31,279 --> 00:15:32,160
so

382
00:15:32,160 --> 00:15:35,600
moving on if we go to the approver now

383
00:15:35,600 --> 00:15:38,000
uh we will see that um

384
00:15:38,000 --> 00:15:39,839
for each of the rounds

385
00:15:39,839 --> 00:15:42,720
the improver will have to commit to the

386
00:15:42,720 --> 00:15:45,519
polynomials the oracle polynomials

387
00:15:45,519 --> 00:15:49,519
sent by the php prover at that round

388
00:15:49,519 --> 00:15:51,920
and together with that it will provide a

389
00:15:51,920 --> 00:15:54,800
proof of an opening of those polynomials

390
00:15:54,800 --> 00:15:56,639
meaning that it knows

391
00:15:56,639 --> 00:16:00,880
the content of those envelopes right

392
00:16:00,880 --> 00:16:02,639
so

393
00:16:02,639 --> 00:16:04,959
the final proof will be

394
00:16:04,959 --> 00:16:06,880
formed by all those

395
00:16:06,880 --> 00:16:10,000
commitments possible messages and all

396
00:16:10,000 --> 00:16:15,120
those opening proofs and together with

397
00:16:15,120 --> 00:16:18,320
proof that the php verifier would be

398
00:16:18,320 --> 00:16:19,759
accepting

399
00:16:19,759 --> 00:16:22,399
the way to make this more interactive

400
00:16:22,399 --> 00:16:23,519
is by

401
00:16:23,519 --> 00:16:27,920
running the fiasco ari stick

402
00:16:28,800 --> 00:16:31,920
now for the verifier it will

403
00:16:31,920 --> 00:16:34,560
receive as input this proof

404
00:16:34,560 --> 00:16:36,720
generated by the approver and will

405
00:16:36,720 --> 00:16:39,839
output either yes or no depending on on

406
00:16:39,839 --> 00:16:41,600
the checks

407
00:16:41,600 --> 00:16:42,560
so

408
00:16:42,560 --> 00:16:45,920
uh for the actual checks of the php it

409
00:16:45,920 --> 00:16:47,920
will run the verification algorithm of

410
00:16:47,920 --> 00:16:50,639
these cb snark

411
00:16:50,639 --> 00:16:52,720
receiving as input

412
00:16:52,720 --> 00:16:56,399
some some degrees some some equations

413
00:16:56,399 --> 00:16:58,959
and the commitment to all of the oracle

414
00:16:58,959 --> 00:17:00,959
polynomials including those from the

415
00:17:00,959 --> 00:17:03,120
indexer and those from the prover some

416
00:17:03,120 --> 00:17:04,720
of them are committed in the relation

417
00:17:04,720 --> 00:17:06,640
type some others in the somewhat hiding

418
00:17:06,640 --> 00:17:08,240
type

419
00:17:08,240 --> 00:17:11,919
and also of course this is proof of the

420
00:17:11,919 --> 00:17:12,959
php

421
00:17:12,959 --> 00:17:14,000
and then

422
00:17:14,000 --> 00:17:15,439
the

423
00:17:15,439 --> 00:17:17,520
the verifier will run this verification

424
00:17:17,520 --> 00:17:19,919
algorithm inside the cp snark for the

425
00:17:19,919 --> 00:17:23,199
opening and together with all of the

426
00:17:23,199 --> 00:17:26,799
oracles sent by the approver committed

427
00:17:26,799 --> 00:17:29,520
and the proofs of opening so

428
00:17:29,520 --> 00:17:31,679
the result of all of this check

429
00:17:31,679 --> 00:17:33,600
should give the verifier either an

430
00:17:33,600 --> 00:17:36,879
accept or a reject

431
00:17:40,960 --> 00:17:43,039
now let's dive into the details of the

432
00:17:43,039 --> 00:17:45,120
blocks that make up our compiler so

433
00:17:45,120 --> 00:17:46,880
these are c listeners

434
00:17:46,880 --> 00:17:49,200
for very specific relations that we can

435
00:17:49,200 --> 00:17:51,360
combine together remember here the

436
00:17:51,360 --> 00:17:53,840
modularity and the interoperability of

437
00:17:53,840 --> 00:17:56,080
obsidian arts so there are two main

438
00:17:56,080 --> 00:17:58,320
ingredients here as you've probably seen

439
00:17:58,320 --> 00:18:00,720
we have one c business for proving the

440
00:18:00,720 --> 00:18:02,240
loss of an opening of a committed

441
00:18:02,240 --> 00:18:04,640
polynomial and then we have another one

442
00:18:04,640 --> 00:18:07,360
uh for proving the php relation so if

443
00:18:07,360 --> 00:18:11,520
you can remember now what where the um

444
00:18:11,520 --> 00:18:13,679
the steps in the verification process of

445
00:18:13,679 --> 00:18:16,080
a php you will then understand that this

446
00:18:16,080 --> 00:18:18,320
one at the same time is composed by two

447
00:18:18,320 --> 00:18:21,360
other cps nerds we have one zip is now

448
00:18:21,360 --> 00:18:22,480
for proving

449
00:18:22,480 --> 00:18:24,240
polynomial equations for committee

450
00:18:24,240 --> 00:18:26,960
polynomials and another one for proving

451
00:18:26,960 --> 00:18:28,960
degree bounds for commuter polynomials

452
00:18:28,960 --> 00:18:30,640
as well

453
00:18:30,640 --> 00:18:33,039
and we have a number of instantiations

454
00:18:33,039 --> 00:18:35,280
of all of these gadgets

455
00:18:35,280 --> 00:18:38,240
so for the opening of a relation

456
00:18:38,240 --> 00:18:40,320
if you're in the edm model just as

457
00:18:40,320 --> 00:18:42,799
saying marlin and blanc you can have an

458
00:18:42,799 --> 00:18:44,880
empty proof or proving to put the

459
00:18:44,880 --> 00:18:46,160
opening

460
00:18:46,160 --> 00:18:50,559
and here in this work we introduce a

461
00:18:50,559 --> 00:18:52,080
batting

462
00:18:52,080 --> 00:18:53,360
technique

463
00:18:53,360 --> 00:18:55,919
to prove the opening of l committed

464
00:18:55,919 --> 00:18:58,640
polynomials using only one group element

465
00:18:58,640 --> 00:19:01,600
in the pka assumption

466
00:19:01,600 --> 00:19:04,080
now moving on to polynomial equations

467
00:19:04,080 --> 00:19:06,160
suppose you have something like this

468
00:19:06,160 --> 00:19:08,320
then using this participle uh what we

469
00:19:08,320 --> 00:19:11,440
could do is just take a valuation on a

470
00:19:11,440 --> 00:19:13,200
random point of these polynomials and

471
00:19:13,200 --> 00:19:15,919
then having a proof of evaluation of

472
00:19:15,919 --> 00:19:19,039
this a polynomial then you could do that

473
00:19:19,039 --> 00:19:20,400
once again

474
00:19:20,400 --> 00:19:22,559
for this polynomial b

475
00:19:22,559 --> 00:19:25,120
and then what you end up with is just a

476
00:19:25,120 --> 00:19:27,440
linear equation for which you can have a

477
00:19:27,440 --> 00:19:29,280
proof of evaluation

478
00:19:29,280 --> 00:19:31,520
but now it's important to note here that

479
00:19:31,520 --> 00:19:33,039
this guardian

480
00:19:33,039 --> 00:19:35,440
is leaking some evaluations of the

481
00:19:35,440 --> 00:19:37,679
committed polynomials and committed

482
00:19:37,679 --> 00:19:40,960
polynomials will be oracle polynomials

483
00:19:40,960 --> 00:19:43,039
and very much likely related to the

484
00:19:43,039 --> 00:19:44,720
witness somehow

485
00:19:44,720 --> 00:19:47,360
so because of this leakage we will have

486
00:19:47,360 --> 00:19:50,640
to take these into account in order to

487
00:19:50,640 --> 00:19:54,240
design which is the appropriate

488
00:19:54,240 --> 00:19:56,559
additional degree that we will need to

489
00:19:56,559 --> 00:19:59,840
provide to our oracle polynomials

490
00:19:59,840 --> 00:20:02,400
okay we will see how these connect in a

491
00:20:02,400 --> 00:20:03,760
minute

492
00:20:03,760 --> 00:20:05,440
and also for

493
00:20:05,440 --> 00:20:08,640
polynomial equations now when you only

494
00:20:08,640 --> 00:20:11,760
have quadratic equations meaning they

495
00:20:11,760 --> 00:20:14,640
have this shape or a linear combination

496
00:20:14,640 --> 00:20:16,159
of this shape

497
00:20:16,159 --> 00:20:18,880
what you can end up with is just

498
00:20:18,880 --> 00:20:20,559
an empty proof

499
00:20:20,559 --> 00:20:23,039
as long as one of those polynomials that

500
00:20:23,039 --> 00:20:27,360
are being multiplied is committed in d2

501
00:20:27,360 --> 00:20:30,480
so the way we are using this approach in

502
00:20:30,480 --> 00:20:32,559
lunar is a

503
00:20:32,559 --> 00:20:35,280
sort of equations where one of the terms

504
00:20:35,280 --> 00:20:38,080
is always a relation polynomial so we

505
00:20:38,080 --> 00:20:41,200
can decide in the derivation algorithm

506
00:20:41,200 --> 00:20:44,320
to commit uh to relation type of

507
00:20:44,320 --> 00:20:45,520
commitments

508
00:20:45,520 --> 00:20:49,840
in the g2 group okay so why

509
00:20:49,840 --> 00:20:52,400
would this be empty well because this

510
00:20:52,400 --> 00:20:54,559
would only cost one pairing to the

511
00:20:54,559 --> 00:20:57,679
verifier and no extra information would

512
00:20:57,679 --> 00:21:00,840
be needed

513
00:21:03,039 --> 00:21:05,600
and then finally we have the gadgets for

514
00:21:05,600 --> 00:21:06,880
the

515
00:21:06,880 --> 00:21:09,120
checking the degree pound

516
00:21:09,120 --> 00:21:11,679
uh so depending on the

517
00:21:11,679 --> 00:21:13,600
group of the commitments you can have

518
00:21:13,600 --> 00:21:15,200
one or the other

519
00:21:15,200 --> 00:21:18,559
and because of the way they work by

520
00:21:18,559 --> 00:21:21,520
committing to the shifter polynomial

521
00:21:21,520 --> 00:21:25,919
um this ends up being a polynomial check

522
00:21:25,919 --> 00:21:27,520
and as long as

523
00:21:27,520 --> 00:21:30,640
these equations are quadratic you can

524
00:21:30,640 --> 00:21:34,400
also use this quadratic equation gadget

525
00:21:34,400 --> 00:21:35,520
and then

526
00:21:35,520 --> 00:21:38,240
have empty proofs also for the degree

527
00:21:38,240 --> 00:21:40,240
checks

528
00:21:40,240 --> 00:21:42,799
now let's take a look at how all of

529
00:21:42,799 --> 00:21:45,760
these gadgets connect with each other

530
00:21:45,760 --> 00:21:48,159
so at this point i really encourage you

531
00:21:48,159 --> 00:21:50,000
to pause the video for just a few

532
00:21:50,000 --> 00:21:52,559
seconds to really understand how these

533
00:21:52,559 --> 00:21:54,400
building blocks can connect to each

534
00:21:54,400 --> 00:21:55,520
other

535
00:21:55,520 --> 00:21:58,480
because the goal of this picture is to

536
00:21:58,480 --> 00:21:59,840
really

537
00:21:59,840 --> 00:22:02,240
get to understand what are the possible

538
00:22:02,240 --> 00:22:04,640
combinations that lead to all of the

539
00:22:04,640 --> 00:22:08,000
members of of the family of trade-offs

540
00:22:08,000 --> 00:22:10,960
that we have for all of our snarks in

541
00:22:10,960 --> 00:22:13,200
the lunar paper

542
00:22:13,200 --> 00:22:16,080
so just to give you an example i am

543
00:22:16,080 --> 00:22:19,440
showing in the following slide how to um

544
00:22:19,440 --> 00:22:22,559
how to instantiate uh the three of our

545
00:22:22,559 --> 00:22:24,799
constructions that we promote the most

546
00:22:24,799 --> 00:22:26,960
throughout our document

547
00:22:26,960 --> 00:22:29,760
which are lunar light

548
00:22:29,760 --> 00:22:32,880
lunar one cs fast and short and luna one

549
00:22:32,880 --> 00:22:35,679
cs through pk

550
00:22:35,679 --> 00:22:38,080
luna one's cs

551
00:22:38,080 --> 00:22:40,240
really works with the r1cs constraint

552
00:22:40,240 --> 00:22:42,799
system whereas in lunar light we are

553
00:22:42,799 --> 00:22:45,280
introducing a more

554
00:22:45,280 --> 00:22:47,200
efficient type of constraint system that

555
00:22:47,200 --> 00:22:48,240
we call

556
00:22:48,240 --> 00:22:52,159
r1cs light that only contains uh two

557
00:22:52,159 --> 00:22:54,960
matrices left and right instead of the

558
00:22:54,960 --> 00:22:57,679
usual left right output in

559
00:22:57,679 --> 00:22:59,760
r1cs

560
00:22:59,760 --> 00:23:01,760
so this picture is just for the

561
00:23:01,760 --> 00:23:05,120
interested viewer

562
00:23:06,400 --> 00:23:09,200
finally i wanted to illustrate how all

563
00:23:09,200 --> 00:23:11,280
these zero knowledge notions connecting

564
00:23:11,280 --> 00:23:12,320
lunar

565
00:23:12,320 --> 00:23:15,120
so remember we have these b leakeys

566
00:23:15,120 --> 00:23:18,480
uranus c business think of this cpa that

567
00:23:18,480 --> 00:23:20,840
was filtering some

568
00:23:20,840 --> 00:23:23,679
evaluations also we had these uh

569
00:23:23,679 --> 00:23:26,880
somewhat hiding commitments uh where

570
00:23:26,880 --> 00:23:29,440
where it was allowed to be deterministic

571
00:23:29,440 --> 00:23:30,640
and thus

572
00:23:30,640 --> 00:23:32,559
filtering at most one evaluation at a

573
00:23:32,559 --> 00:23:34,559
random point

574
00:23:34,559 --> 00:23:37,840
and this together with a b plus one and

575
00:23:37,840 --> 00:23:40,720
a bounded zero knowledge in php in our

576
00:23:40,720 --> 00:23:43,840
compiler will give us fully zero

577
00:23:43,840 --> 00:23:47,039
knowledge snarks

578
00:23:47,120 --> 00:23:50,880
next in this table i just wanted to show

579
00:23:50,880 --> 00:23:52,799
an overview of all the efficiency

580
00:23:52,799 --> 00:23:55,440
measures of the state of the art one of

581
00:23:55,440 --> 00:23:56,640
our

582
00:23:56,640 --> 00:23:58,880
constructions lunar light but we have

583
00:23:58,880 --> 00:24:00,960
plenty of others as i said

584
00:24:00,960 --> 00:24:04,559
and also one very recently universal

585
00:24:04,559 --> 00:24:06,960
database snark called basilisk that was

586
00:24:06,960 --> 00:24:10,400
presented at crypto this year and that

587
00:24:10,400 --> 00:24:14,159
stan those techniques stem from some

588
00:24:14,159 --> 00:24:15,919
well techniques that we introduced in

589
00:24:15,919 --> 00:24:17,279
lunar

590
00:24:17,279 --> 00:24:19,840
so just to summarize

591
00:24:19,840 --> 00:24:23,039
some of the reasons of these efficiency

592
00:24:23,039 --> 00:24:24,960
improvements is the fact that we are

593
00:24:24,960 --> 00:24:27,600
using these somewhere hiding commitments

594
00:24:27,600 --> 00:24:29,600
also we didn't talk about this

595
00:24:29,600 --> 00:24:32,559
a sparse masking method for polynomials

596
00:24:32,559 --> 00:24:35,279
also the compilation with efficiency b

597
00:24:35,279 --> 00:24:37,360
snarks instead of just polynomial

598
00:24:37,360 --> 00:24:38,640
commitments

599
00:24:38,640 --> 00:24:41,039
and a new constraint system that only

600
00:24:41,039 --> 00:24:44,240
uses two matrices left and right called

601
00:24:44,240 --> 00:24:48,000
r1cs light so that was all i hope you

602
00:24:48,000 --> 00:24:50,000
liked it and

603
00:24:50,000 --> 00:24:52,480
honestly thank you for watching and see

604
00:24:52,480 --> 00:24:56,279
you next time bye

