1
00:00:00,640 --> 00:00:03,360
hello my name is vladimir zlatsek and i

2
00:00:03,360 --> 00:00:05,600
welcome you to this talk called formula

3
00:00:05,600 --> 00:00:07,279
for disaster

4
00:00:07,279 --> 00:00:09,440
first let us recall that elliptical

5
00:00:09,440 --> 00:00:11,440
cryptography is based on the

6
00:00:11,440 --> 00:00:13,519
infeasibility of the discrete logarithm

7
00:00:13,519 --> 00:00:14,480
problem

8
00:00:14,480 --> 00:00:15,360
it is

9
00:00:15,360 --> 00:00:17,199
if we are given a point b and its

10
00:00:17,199 --> 00:00:19,199
multiple k times p

11
00:00:19,199 --> 00:00:21,039
recovering the private key k must be

12
00:00:21,039 --> 00:00:22,000
hard

13
00:00:22,000 --> 00:00:24,880
but how do we compute k times p

14
00:00:24,880 --> 00:00:26,000
there are different scalar

15
00:00:26,000 --> 00:00:28,160
multiplication algorithms but they

16
00:00:28,160 --> 00:00:30,880
always internally used point addition

17
00:00:30,880 --> 00:00:32,719
here you can see a textbook formula for

18
00:00:32,719 --> 00:00:35,760
adding two affine points

19
00:00:35,760 --> 00:00:38,239
but it has many caveats

20
00:00:38,239 --> 00:00:40,559
you need to distinguish several cases

21
00:00:40,559 --> 00:00:42,239
the point representation is not really

22
00:00:42,239 --> 00:00:45,039
efficient and so on there are many other

23
00:00:45,039 --> 00:00:46,960
addition formulas which try to optimize

24
00:00:46,960 --> 00:00:49,039
the operation count but there is no

25
00:00:49,039 --> 00:00:51,280
single best solution for each context

26
00:00:51,280 --> 00:00:53,520
this creates a lot of complexity

27
00:00:53,520 --> 00:00:55,680
let us imagine that you are a developer

28
00:00:55,680 --> 00:00:58,559
who wants to implement ecc you have many

29
00:00:58,559 --> 00:01:01,280
choices to make depending on your curve

30
00:01:01,280 --> 00:01:03,280
you might need to pick a curve model

31
00:01:03,280 --> 00:01:05,920
short wire strass montgomery adverts or

32
00:01:05,920 --> 00:01:07,520
twisted adwords

33
00:01:07,520 --> 00:01:09,680
then you need to decide which point

34
00:01:09,680 --> 00:01:11,600
representation to use

35
00:01:11,600 --> 00:01:13,360
projective coordinates jacobian

36
00:01:13,360 --> 00:01:15,360
coordinates extended jacobian

37
00:01:15,360 --> 00:01:17,920
coordinates or any of the others

38
00:01:17,920 --> 00:01:20,159
based on these choices you now need to

39
00:01:20,159 --> 00:01:22,880
select an addition formula

40
00:01:22,880 --> 00:01:25,360
and finally you have to choose a scalar

41
00:01:25,360 --> 00:01:27,439
multiplication algorithm

42
00:01:27,439 --> 00:01:29,600
such as a variant of double and add

43
00:01:29,600 --> 00:01:32,079
letter one or window one

44
00:01:32,079 --> 00:01:33,840
not all of these choices are compatible

45
00:01:33,840 --> 00:01:34,560
but

46
00:01:34,560 --> 00:01:36,640
still there are lots of them

47
00:01:36,640 --> 00:01:38,400
in this talk we will focus on the

48
00:01:38,400 --> 00:01:41,200
formula part so

49
00:01:41,200 --> 00:01:44,079
how does an addition formula look like

50
00:01:44,079 --> 00:01:46,320
well it takes two points

51
00:01:46,320 --> 00:01:49,040
in the chosen coordinates as inputs

52
00:01:49,040 --> 00:01:52,159
and outputs their sum in the same form

53
00:01:52,159 --> 00:01:53,520
there are many intermediate

54
00:01:53,520 --> 00:01:55,040
computational steps

55
00:01:55,040 --> 00:01:57,520
and on this slide you can see an example

56
00:01:57,520 --> 00:01:59,439
starting at the left column

57
00:01:59,439 --> 00:02:02,000
each of the computed expressions depends

58
00:02:02,000 --> 00:02:04,000
only on the previous ones

59
00:02:04,000 --> 00:02:05,600
until we obtain the output from the

60
00:02:05,600 --> 00:02:07,200
right column

61
00:02:07,200 --> 00:02:09,440
note that the addition formula is this

62
00:02:09,440 --> 00:02:11,680
whole thing while we refer to the

63
00:02:11,680 --> 00:02:13,680
individual lines as intermediate

64
00:02:13,680 --> 00:02:15,680
expressions

65
00:02:15,680 --> 00:02:17,680
all right but why does the formula

66
00:02:17,680 --> 00:02:19,280
matter

67
00:02:19,280 --> 00:02:21,520
the problem is that many formulas have

68
00:02:21,520 --> 00:02:23,440
exceptional cases meaning

69
00:02:23,440 --> 00:02:25,840
there exist points for which the formula

70
00:02:25,840 --> 00:02:28,560
doesn't compute their sum correctly

71
00:02:28,560 --> 00:02:30,560
often there are hidden assumptions for

72
00:02:30,560 --> 00:02:32,720
the formula to function properly which

73
00:02:32,720 --> 00:02:34,720
can lead to behavior that the developer

74
00:02:34,720 --> 00:02:36,560
doesn't expect

75
00:02:36,560 --> 00:02:37,680
and

76
00:02:37,680 --> 00:02:39,920
indeed in the past

77
00:02:39,920 --> 00:02:41,599
we have seen several examples of this

78
00:02:41,599 --> 00:02:43,519
phenomenon in popular cryptographic

79
00:02:43,519 --> 00:02:47,120
libraries mozilla has issued two cves in

80
00:02:47,120 --> 00:02:48,720
its nss

81
00:02:48,720 --> 00:02:50,720
and there are also problems with the

82
00:02:50,720 --> 00:02:52,959
exceptional cases in openssl and

83
00:02:52,959 --> 00:02:55,440
google's boring ssl

84
00:02:55,440 --> 00:02:57,840
this led to incorrect computations and

85
00:02:57,840 --> 00:02:59,680
in some cases also internal state

86
00:02:59,680 --> 00:03:01,280
leakage

87
00:03:01,280 --> 00:03:02,800
the good news is that

88
00:03:02,800 --> 00:03:05,120
there is the explicit formula database

89
00:03:05,120 --> 00:03:06,959
which catalogs a large number of

90
00:03:06,959 --> 00:03:09,120
formulas and tries to verify their

91
00:03:09,120 --> 00:03:10,879
correctness

92
00:03:10,879 --> 00:03:13,200
unfortunately it takes some shortcuts

93
00:03:13,200 --> 00:03:16,159
and might miss some scenarios

94
00:03:16,159 --> 00:03:19,120
therefore we decided to classify all

95
00:03:19,120 --> 00:03:22,080
exceptional cases in the efd formulas to

96
00:03:22,080 --> 00:03:24,560
finally settle this

97
00:03:24,560 --> 00:03:26,080
more concretely

98
00:03:26,080 --> 00:03:28,400
here you can see all the addition and

99
00:03:28,400 --> 00:03:31,280
differential edition formulas in the efd

100
00:03:31,280 --> 00:03:34,239
divided by modal and coordinates

101
00:03:34,239 --> 00:03:36,400
so the short virus thrust addition

102
00:03:36,400 --> 00:03:38,799
formula that we saw a moment ago was

103
00:03:38,799 --> 00:03:41,280
just one of 21 possibilities for that

104
00:03:41,280 --> 00:03:42,400
case

105
00:03:42,400 --> 00:03:46,319
that's really quite a high number

106
00:03:46,319 --> 00:03:48,400
to classify the exceptions

107
00:03:48,400 --> 00:03:50,879
we took two different approaches

108
00:03:50,879 --> 00:03:53,200
passing allowed us to automatically go

109
00:03:53,200 --> 00:03:55,200
through all pairs of points on small

110
00:03:55,200 --> 00:03:57,360
curves so that we could try to

111
00:03:57,360 --> 00:03:59,360
extrapolate the results

112
00:03:59,360 --> 00:04:01,439
unfortunately it had a lot of false

113
00:04:01,439 --> 00:04:02,480
positives

114
00:04:02,480 --> 00:04:05,280
so we had to resort to manually going

115
00:04:05,280 --> 00:04:07,760
through all the formulas in this way we

116
00:04:07,760 --> 00:04:10,239
managed to completely classify all the

117
00:04:10,239 --> 00:04:12,879
non-trivial exceptional points

118
00:04:12,879 --> 00:04:15,120
in most cases there wasn't anything

119
00:04:15,120 --> 00:04:16,399
surprising but

120
00:04:16,399 --> 00:04:18,560
for the formula i showed you before

121
00:04:18,560 --> 00:04:20,639
we actually discovered a whole family of

122
00:04:20,639 --> 00:04:23,199
exceptional points

123
00:04:23,199 --> 00:04:25,600
you can see its description here

124
00:04:25,600 --> 00:04:29,199
but let me explain a bit more to find

125
00:04:29,199 --> 00:04:31,040
all exceptional points

126
00:04:31,040 --> 00:04:33,360
it is enough to analyze

127
00:04:33,360 --> 00:04:35,360
when you could possibly divide by zero

128
00:04:35,360 --> 00:04:37,520
which in this scenario means

129
00:04:37,520 --> 00:04:40,000
investigating when the z3 coordinate

130
00:04:40,000 --> 00:04:42,400
becomes zero to make this easier we

131
00:04:42,400 --> 00:04:44,160
developed a tool that allows you to

132
00:04:44,160 --> 00:04:46,080
unroll the formula using a back

133
00:04:46,080 --> 00:04:47,680
substitution

134
00:04:47,680 --> 00:04:50,320
so in this case you can expand the z3

135
00:04:50,320 --> 00:04:53,280
coordinate like this

136
00:04:53,759 --> 00:04:56,160
and you can further simplify it by

137
00:04:56,160 --> 00:05:00,160
letting z1 and z2 equal zero

138
00:05:00,160 --> 00:05:02,080
oh sorry equal one

139
00:05:02,080 --> 00:05:06,560
meaning both p and q are fine points

140
00:05:06,560 --> 00:05:09,919
and now you can see that when y2 equals

141
00:05:09,919 --> 00:05:13,039
minus y1 you only get a 0

142
00:05:13,039 --> 00:05:14,560
for z3

143
00:05:14,560 --> 00:05:16,320
in effect you also

144
00:05:16,320 --> 00:05:18,400
need the x coordinates of the inputs to

145
00:05:18,400 --> 00:05:20,400
be different to really get an

146
00:05:20,400 --> 00:05:22,639
exceptional case

147
00:05:22,639 --> 00:05:23,680
okay

148
00:05:23,680 --> 00:05:26,400
so we found an exception so what

149
00:05:26,400 --> 00:05:27,280
well

150
00:05:27,280 --> 00:05:28,960
there's this exceptional procedure

151
00:05:28,960 --> 00:05:33,120
attack or epa for short that can apply

152
00:05:33,120 --> 00:05:35,120
but before i tell you more about it let

153
00:05:35,120 --> 00:05:37,680
me mention two other attacks the refined

154
00:05:37,680 --> 00:05:40,320
power analysis rpa

155
00:05:40,320 --> 00:05:43,840
and zero value point attack gvp

156
00:05:43,840 --> 00:05:45,120
we noticed

157
00:05:45,120 --> 00:05:46,960
that these attacks are quite similar in

158
00:05:46,960 --> 00:05:48,320
some sense so

159
00:05:48,320 --> 00:05:50,400
we decided to describe a formal

160
00:05:50,400 --> 00:05:52,560
framework that unifies them and allows

161
00:05:52,560 --> 00:05:54,240
for generalizations

162
00:05:54,240 --> 00:05:58,240
so what do these attacks have in common

163
00:05:58,240 --> 00:06:00,720
well they all make use of a scalar

164
00:06:00,720 --> 00:06:03,039
multiplication side channel oracle which

165
00:06:03,039 --> 00:06:06,160
is constructed from the implementation

166
00:06:06,160 --> 00:06:08,240
the idea here is that you are free to

167
00:06:08,240 --> 00:06:09,680
input any point you want to the

168
00:06:09,680 --> 00:06:10,960
implementation

169
00:06:10,960 --> 00:06:12,960
and while it is multiplied by the secret

170
00:06:12,960 --> 00:06:13,759
key

171
00:06:13,759 --> 00:06:17,039
you observe a side channel of some type

172
00:06:17,039 --> 00:06:19,120
formalizing these oracles was probably

173
00:06:19,120 --> 00:06:20,639
the most challenging aspect of our

174
00:06:20,639 --> 00:06:22,720
unification

175
00:06:22,720 --> 00:06:25,120
we also need to assume that the private

176
00:06:25,120 --> 00:06:27,680
key is static which can be the case

177
00:06:27,680 --> 00:06:31,759
for example for key exchange protocols

178
00:06:31,759 --> 00:06:34,400
and finally the scalar multiplication

179
00:06:34,400 --> 00:06:36,800
algorithm must have the property that if

180
00:06:36,800 --> 00:06:40,720
k prime is a prefix of the secret k

181
00:06:40,720 --> 00:06:42,880
then k prime times p

182
00:06:42,880 --> 00:06:45,440
is computed in the course of computing k

183
00:06:45,440 --> 00:06:47,600
times p

184
00:06:47,600 --> 00:06:50,560
with all these assumptions in place

185
00:06:50,560 --> 00:06:52,800
how do we recover the private key k from

186
00:06:52,800 --> 00:06:54,720
the implementation

187
00:06:54,720 --> 00:06:55,840
well

188
00:06:55,840 --> 00:06:58,400
the implementation computes a sequence

189
00:06:58,400 --> 00:07:01,120
of ads and doubles depending on k and

190
00:07:01,120 --> 00:07:03,280
with a good side channel we can learn

191
00:07:03,280 --> 00:07:06,400
some information along the way

192
00:07:06,400 --> 00:07:08,720
so at a very high level

193
00:07:08,720 --> 00:07:11,520
the attack starts by guessing a prefix k

194
00:07:11,520 --> 00:07:13,280
prime of k

195
00:07:13,280 --> 00:07:15,120
based on this guess and the given

196
00:07:15,120 --> 00:07:19,360
formula we construct a special point

197
00:07:19,360 --> 00:07:21,919
and give it to the implementation

198
00:07:21,919 --> 00:07:24,080
the side channel then tells us if our

199
00:07:24,080 --> 00:07:26,960
guess was correct or not

200
00:07:26,960 --> 00:07:27,840
so

201
00:07:27,840 --> 00:07:30,880
in this way we learn a prefix of k

202
00:07:30,880 --> 00:07:32,160
and

203
00:07:32,160 --> 00:07:34,160
we can repeat the whole process bit by

204
00:07:34,160 --> 00:07:37,759
bit until we learn the whole private key

205
00:07:37,759 --> 00:07:39,919
the specific attacks differ only in

206
00:07:39,919 --> 00:07:42,840
steps 2 and 4 while the rest stays the

207
00:07:42,840 --> 00:07:45,039
same so

208
00:07:45,039 --> 00:07:46,960
for epa

209
00:07:46,960 --> 00:07:50,080
in the second step we construct p

210
00:07:50,080 --> 00:07:52,800
in a way to hit the exceptional case of

211
00:07:52,800 --> 00:07:54,479
the formula

212
00:07:54,479 --> 00:07:56,960
the side channel here is given by our

213
00:07:56,960 --> 00:07:59,680
ability to detect that the result was

214
00:07:59,680 --> 00:08:02,160
not computed correctly

215
00:08:02,160 --> 00:08:03,199
we can

216
00:08:03,199 --> 00:08:04,960
see this either from software or

217
00:08:04,960 --> 00:08:07,440
physically

218
00:08:07,440 --> 00:08:08,560
but

219
00:08:08,560 --> 00:08:10,400
even if there are no exceptional points

220
00:08:10,400 --> 00:08:12,639
and epa does not apply

221
00:08:12,639 --> 00:08:15,280
we can perform a slight variation

222
00:08:15,280 --> 00:08:17,599
to obtain zvp

223
00:08:17,599 --> 00:08:20,160
which can actually also be seen as a

224
00:08:20,160 --> 00:08:22,800
generalization of rpa

225
00:08:22,800 --> 00:08:24,160
here

226
00:08:24,160 --> 00:08:25,599
in the second step

227
00:08:25,599 --> 00:08:28,240
we are choosing a point which zeros out

228
00:08:28,240 --> 00:08:30,560
an intermediate expression

229
00:08:30,560 --> 00:08:33,039
and the side channel is based on our

230
00:08:33,039 --> 00:08:35,839
ability to notice computations with zero

231
00:08:35,839 --> 00:08:37,039
values

232
00:08:37,039 --> 00:08:40,640
for example by shorter execution times

233
00:08:40,640 --> 00:08:43,279
let's see an example

234
00:08:43,279 --> 00:08:45,519
we can choose any of the intermediate

235
00:08:45,519 --> 00:08:48,160
expressions in the formula

236
00:08:48,160 --> 00:08:50,880
so let's pick t4 here

237
00:08:50,880 --> 00:08:53,279
by unrolling the formula just like

238
00:08:53,279 --> 00:08:54,399
before

239
00:08:54,399 --> 00:08:56,399
we obtain an expression that we need to

240
00:08:56,399 --> 00:08:58,240
zero out

241
00:08:58,240 --> 00:08:58,959
but

242
00:08:58,959 --> 00:09:01,120
in this case it's not so clear how to do

243
00:09:01,120 --> 00:09:03,040
that

244
00:09:03,040 --> 00:09:07,360
so let us try to formalize what's going

245
00:09:07,360 --> 00:09:07,760
we on

246
00:09:07,760 --> 00:09:10,080
given a scalar k prime

247
00:09:10,080 --> 00:09:11,760
an elliptic curve

248
00:09:11,760 --> 00:09:14,640
and a multivariate polynomial f

249
00:09:14,640 --> 00:09:16,399
the number of variables

250
00:09:16,399 --> 00:09:18,480
might depend on actual point

251
00:09:18,480 --> 00:09:20,720
representation

252
00:09:20,720 --> 00:09:21,839
the goal

253
00:09:21,839 --> 00:09:24,560
is to find two curve points p and q

254
00:09:24,560 --> 00:09:27,680
whose coordinates are roots of f

255
00:09:27,680 --> 00:09:28,959
such that

256
00:09:28,959 --> 00:09:33,599
u is k times k prime times p

257
00:09:33,680 --> 00:09:35,600
we call this the dependent coordinates

258
00:09:35,600 --> 00:09:39,839
problem or just dcp for short

259
00:09:39,839 --> 00:09:40,640
and

260
00:09:40,640 --> 00:09:43,920
solving the dcp allows us to construct

261
00:09:43,920 --> 00:09:48,240
our oracles and recover the private key

262
00:09:48,240 --> 00:09:50,240
let's summarize the two cases we have

263
00:09:50,240 --> 00:09:51,839
already seen for

264
00:09:51,839 --> 00:09:55,519
epa we can take f to be the expression

265
00:09:55,519 --> 00:09:58,080
for z3

266
00:09:58,080 --> 00:09:58,800
for

267
00:09:58,800 --> 00:10:01,680
zvp we have more freedom we can

268
00:10:01,680 --> 00:10:03,360
take f to be

269
00:10:03,360 --> 00:10:05,519
any intermediate expression

270
00:10:05,519 --> 00:10:09,200
in the last example we took d4

271
00:10:09,200 --> 00:10:12,560
and also for rpa

272
00:10:12,560 --> 00:10:13,760
we can

273
00:10:13,760 --> 00:10:15,120
pick either

274
00:10:15,120 --> 00:10:19,279
the expression for x3 or y3

275
00:10:19,279 --> 00:10:20,880
so

276
00:10:20,880 --> 00:10:22,720
you can see that from this viewpoint the

277
00:10:22,720 --> 00:10:26,880
attacks really look quite similar

278
00:10:26,880 --> 00:10:27,760
but

279
00:10:27,760 --> 00:10:30,160
the problem is that the dcp seems to be

280
00:10:30,160 --> 00:10:32,079
hard in general

281
00:10:32,079 --> 00:10:34,160
it is not clear how to capture the

282
00:10:34,160 --> 00:10:36,720
relationship between p and q because

283
00:10:36,720 --> 00:10:38,800
the strategy of using division

284
00:10:38,800 --> 00:10:40,079
polynomials

285
00:10:40,079 --> 00:10:42,320
does not really scale

286
00:10:42,320 --> 00:10:44,399
it allows you to recover maybe

287
00:10:44,399 --> 00:10:47,440
20 bits which is not negligible but

288
00:10:47,440 --> 00:10:50,160
perform enough

289
00:10:50,160 --> 00:10:51,600
we managed to

290
00:10:51,600 --> 00:10:54,560
solve some new cases for example when k

291
00:10:54,560 --> 00:10:57,440
prime can be represented as a ratio of

292
00:10:57,440 --> 00:11:00,399
two small numbers modulo the curve order

293
00:11:00,399 --> 00:11:02,800
unfortunately such numbers are rare

294
00:11:02,800 --> 00:11:04,079
enough it does not really help the

295
00:11:04,079 --> 00:11:06,079
attacks

296
00:11:06,079 --> 00:11:07,360
but

297
00:11:07,360 --> 00:11:10,480
on the bright side we also noticed that

298
00:11:10,480 --> 00:11:11,519
when f

299
00:11:11,519 --> 00:11:14,240
does not depend on one of the points

300
00:11:14,240 --> 00:11:16,720
then the dcp becomes easy

301
00:11:16,720 --> 00:11:18,399
for rpa

302
00:11:18,399 --> 00:11:21,760
this is nothing surprising really but

303
00:11:21,760 --> 00:11:24,399
rpa is not that powerful because it

304
00:11:24,399 --> 00:11:26,399
requires the curve with at least one

305
00:11:26,399 --> 00:11:29,279
point with zero x or y coordinate and

306
00:11:29,279 --> 00:11:32,079
it's quite easy to classify this and

307
00:11:32,079 --> 00:11:34,560
prevent the attack

308
00:11:34,560 --> 00:11:36,240
more interestingly

309
00:11:36,240 --> 00:11:37,600
we noticed

310
00:11:37,600 --> 00:11:40,800
this easy scenario can also occur for

311
00:11:40,800 --> 00:11:43,519
zvp with some formulas

312
00:11:43,519 --> 00:11:46,560
moreover we managed to use this to adapt

313
00:11:46,560 --> 00:11:47,760
gvp

314
00:11:47,760 --> 00:11:50,800
to a new attack on window methods

315
00:11:50,800 --> 00:11:53,360
we simulated such an attack

316
00:11:53,360 --> 00:11:56,320
on an implementation using the rcb

317
00:11:56,320 --> 00:11:57,760
addition formula

318
00:11:57,760 --> 00:11:59,680
which is actually the only complete

319
00:11:59,680 --> 00:12:02,079
formula for prime order short virus

320
00:12:02,079 --> 00:12:03,920
truss curves

321
00:12:03,920 --> 00:12:06,399
so you can see that even with a complete

322
00:12:06,399 --> 00:12:07,839
formula

323
00:12:07,839 --> 00:12:11,839
you cannot prevent all possible attacks

324
00:12:12,240 --> 00:12:13,519
to wrap it up

325
00:12:13,519 --> 00:12:15,920
what are our contributions

326
00:12:15,920 --> 00:12:17,680
we released the tool for formula

327
00:12:17,680 --> 00:12:21,120
enrolling as an extension of ps car

328
00:12:21,120 --> 00:12:23,200
which is an open source toolkit for

329
00:12:23,200 --> 00:12:26,079
reversing ecc implementations by one of

330
00:12:26,079 --> 00:12:28,480
our co-authors

331
00:12:28,480 --> 00:12:31,279
we completed the classification of efd

332
00:12:31,279 --> 00:12:32,800
edition formulas

333
00:12:32,800 --> 00:12:36,959
and found a new family of exceptions

334
00:12:36,959 --> 00:12:39,040
we unified three known attacks in a

335
00:12:39,040 --> 00:12:40,720
formal framework

336
00:12:40,720 --> 00:12:42,480
that allowed us to come up with a new

337
00:12:42,480 --> 00:12:45,120
attack on window methods

338
00:12:45,120 --> 00:12:48,079
we unfortunately did not manage to

339
00:12:48,079 --> 00:12:50,240
find a vulnerable implementation in the

340
00:12:50,240 --> 00:12:51,600
wild

341
00:12:51,600 --> 00:12:52,399
but

342
00:12:52,399 --> 00:12:54,480
maybe that's a good thing

343
00:12:54,480 --> 00:12:55,600
and

344
00:12:55,600 --> 00:12:57,760
it's not an unrealistic scenario as

345
00:12:57,760 --> 00:12:59,920
history shows

346
00:12:59,920 --> 00:13:01,279
and finally

347
00:13:01,279 --> 00:13:03,279
we solved new cases

348
00:13:03,279 --> 00:13:05,519
of a hard underlying math problem which

349
00:13:05,519 --> 00:13:07,839
we call the deep tcp

350
00:13:07,839 --> 00:13:10,560
but it still remains open in general and

351
00:13:10,560 --> 00:13:12,320
it would be great if more people looked

352
00:13:12,320 --> 00:13:14,160
into it

353
00:13:14,160 --> 00:13:14,959
so

354
00:13:14,959 --> 00:13:18,320
what are the lessons to be learned here

355
00:13:18,320 --> 00:13:20,240
we should study widely deployed systems

356
00:13:20,240 --> 00:13:23,120
in advance and not wait for the actual

357
00:13:23,120 --> 00:13:25,519
attacks to happen

358
00:13:25,519 --> 00:13:28,000
it's also useful to come up with simpler

359
00:13:28,000 --> 00:13:30,399
and conceptual viewpoints as they can

360
00:13:30,399 --> 00:13:33,279
push cryptanalysis further

361
00:13:33,279 --> 00:13:35,120
we saw that the choice of the addition

362
00:13:35,120 --> 00:13:37,040
formula really matters

363
00:13:37,040 --> 00:13:37,839
and

364
00:13:37,839 --> 00:13:40,000
that we should be more conservative with

365
00:13:40,000 --> 00:13:41,360
our claims

366
00:13:41,360 --> 00:13:44,000
the best way to do that is to be very

367
00:13:44,000 --> 00:13:46,240
explicit about all assumptions

368
00:13:46,240 --> 00:13:48,480
and ideally document them

369
00:13:48,480 --> 00:13:52,720
to help create a complete understanding

370
00:13:52,800 --> 00:13:54,720
that's all from my side

371
00:13:54,720 --> 00:13:56,880
if you enjoyed this talk check out our

372
00:13:56,880 --> 00:13:59,360
webpage with all supplementary materials

373
00:13:59,360 --> 00:14:00,480
and software

374
00:14:00,480 --> 00:14:02,160
thanks and enjoy the rest of the

375
00:14:02,160 --> 00:14:05,160
conference

