1
00:00:01,120 --> 00:00:03,360
hello everyone in this video i would

2
00:00:03,360 --> 00:00:05,520
like to thank our people

3
00:00:05,520 --> 00:00:07,919
from sigma protocol although you can

4
00:00:07,919 --> 00:00:11,040
draw the efficient threshold utilization

5
00:00:11,040 --> 00:00:14,080
from encryptions based on class groups

6
00:00:14,080 --> 00:00:15,759
i am xinjiang

7
00:00:15,759 --> 00:00:20,000
this is a joint work with italk

8
00:00:25,519 --> 00:00:27,920
before i talk about our contribution

9
00:00:27,920 --> 00:00:30,000
i will introduce some background

10
00:00:30,000 --> 00:00:31,679
knowledge firstly

11
00:00:31,679 --> 00:00:33,760
a tea of the inner threshold signature

12
00:00:33,760 --> 00:00:36,480
allows parties to share the ability of

13
00:00:36,480 --> 00:00:37,920
signing

14
00:00:37,920 --> 00:00:39,520
what is run the kitchen reaching

15
00:00:39,520 --> 00:00:42,160
protocol to generate a camera verifying

16
00:00:42,160 --> 00:00:43,520
key is

17
00:00:43,520 --> 00:00:45,840
own

18
00:00:50,480 --> 00:00:51,520
parties

19
00:00:51,520 --> 00:00:53,680
with assigning messages

20
00:00:53,680 --> 00:00:55,199
in the meanwhile

21
00:00:55,199 --> 00:00:58,879
any subgroups of tea or fewer parties

22
00:00:58,879 --> 00:01:02,079
would fail to do that

23
00:01:02,879 --> 00:01:05,680
threshold ecbs is one of the most famous

24
00:01:05,680 --> 00:01:08,320
physical signatures

25
00:01:08,320 --> 00:01:11,040
it is a threshold volume of traditional

26
00:01:11,040 --> 00:01:12,880
ecdsa

27
00:01:12,880 --> 00:01:15,439
little has been widely used in various

28
00:01:15,439 --> 00:01:16,960
applications

29
00:01:16,960 --> 00:01:21,360
such as the trs and the ssh

30
00:01:21,600 --> 00:01:24,640
the construction of ecdsa is shown on

31
00:01:24,640 --> 00:01:27,600
the slides

32
00:01:27,600 --> 00:01:29,600
as you can see

33
00:01:29,600 --> 00:01:31,759
in order to construct the threshold

34
00:01:31,759 --> 00:01:33,280
ecdsa

35
00:01:33,280 --> 00:01:35,600
we must know how to generate

36
00:01:35,600 --> 00:01:37,759
the public key

37
00:01:37,759 --> 00:01:40,880
kepler queue and the signature ice

38
00:01:40,880 --> 00:01:43,920
distributed away

39
00:01:45,920 --> 00:01:47,040
so

40
00:01:47,040 --> 00:01:49,119
in our presentation

41
00:01:49,119 --> 00:01:51,680
we consider a special case of threshold

42
00:01:51,680 --> 00:01:53,119
ecgsa

43
00:01:53,119 --> 00:01:55,600
the two-party ecdsc

44
00:01:55,600 --> 00:01:56,640
formerly

45
00:01:56,640 --> 00:01:58,719
in the construction of two-party

46
00:01:58,719 --> 00:02:00,640
e-cigarette ecgsa

47
00:02:00,640 --> 00:02:02,880
the capital q and r can be generated

48
00:02:02,880 --> 00:02:06,159
using a protocol similar with the famous

49
00:02:06,159 --> 00:02:10,000
helmet exchange protocol

50
00:02:10,000 --> 00:02:11,520
to then read

51
00:02:11,520 --> 00:02:12,560
as

52
00:02:12,560 --> 00:02:15,440
one can require participants to encrypt

53
00:02:15,440 --> 00:02:16,959
its signing key

54
00:02:16,959 --> 00:02:19,920
using a homomorphic encryption scheme

55
00:02:19,920 --> 00:02:22,080
in this way the party tool can do

56
00:02:22,080 --> 00:02:24,080
homomorphic operations on this

57
00:02:24,080 --> 00:02:25,280
encryption

58
00:02:25,280 --> 00:02:27,040
to have a party one

59
00:02:27,040 --> 00:02:29,599
generates the signature

60
00:02:29,599 --> 00:02:31,120
and of course

61
00:02:31,120 --> 00:02:32,560
this inclusion

62
00:02:32,560 --> 00:02:35,360
could be generated could be generated

63
00:02:35,360 --> 00:02:37,440
in the key generation phase

64
00:02:37,440 --> 00:02:40,480
before the signing phase

65
00:02:40,480 --> 00:02:41,599
however

66
00:02:41,599 --> 00:02:43,840
there's still a gap from a secure

67
00:02:43,840 --> 00:02:47,360
two-party ecdsa

68
00:02:48,800 --> 00:02:51,519
to generate secure ecgsa

69
00:02:51,519 --> 00:02:54,000
both parties need to generate lots of

70
00:02:54,000 --> 00:02:55,599
technology proofs

71
00:02:55,599 --> 00:02:59,680
to make sure that they behave honestly

72
00:02:59,680 --> 00:03:02,800
has a specific construction of the key

73
00:03:02,800 --> 00:03:07,200
generation in lindau 17 and ccr plus 19.

74
00:03:07,200 --> 00:03:08,720
in our paper

75
00:03:08,720 --> 00:03:11,519
we focus on the choice of homomorphic

76
00:03:11,519 --> 00:03:12,800
encryption

77
00:03:12,800 --> 00:03:15,360
as well as the corresponding zero

78
00:03:15,360 --> 00:03:16,879
knowledge proofs

79
00:03:16,879 --> 00:03:19,680
proven that the incubation ck

80
00:03:19,680 --> 00:03:23,760
is indeed an encryption of sanity

81
00:03:23,760 --> 00:03:25,599
in 2017

82
00:03:25,599 --> 00:03:28,319
they chose pillions encryption

83
00:03:28,319 --> 00:03:31,120
which supports large massive space

84
00:03:31,120 --> 00:03:34,400
but causes an expensive knowledge proof

85
00:03:34,400 --> 00:03:37,760
due to the mismatch between pillar space

86
00:03:37,760 --> 00:03:41,280
and the ecdsa space

87
00:03:41,599 --> 00:03:42,440
in

88
00:03:42,440 --> 00:03:44,000
1760

89
00:03:44,000 --> 00:03:45,760
19

90
00:03:45,760 --> 00:03:48,239
they chose the air inclusion

91
00:03:48,239 --> 00:03:49,680
a homomorphic

92
00:03:49,680 --> 00:03:53,280
encryption based on class group

93
00:03:53,360 --> 00:03:56,000
this inclusion also satisfies a large

94
00:03:56,000 --> 00:03:57,519
message space

95
00:03:57,519 --> 00:03:58,799
however

96
00:03:58,799 --> 00:04:01,599
using this encryption also needs an

97
00:04:01,599 --> 00:04:04,319
expensive teleknowledge proof

98
00:04:04,319 --> 00:04:06,959
or an efficiency of knowledge

99
00:04:06,959 --> 00:04:10,720
but based on non-standard assumption

100
00:04:10,720 --> 00:04:13,760
such as the load assumption and strong

101
00:04:13,760 --> 00:04:16,238
root assumption

102
00:04:16,238 --> 00:04:18,478
we hope to construct an efficient

103
00:04:18,478 --> 00:04:21,600
knowledge for general proof for cell

104
00:04:21,600 --> 00:04:24,320
inclusion without these non-standard

105
00:04:24,320 --> 00:04:27,320
assumptions

106
00:04:29,280 --> 00:04:32,080
so what is the cr encryption

107
00:04:32,080 --> 00:04:33,840
as we have assigned

108
00:04:33,840 --> 00:04:36,160
cl inclusion is a homomorphic

109
00:04:36,160 --> 00:04:39,120
information based on class group

110
00:04:39,120 --> 00:04:40,240
in fact

111
00:04:40,240 --> 00:04:42,720
cr inclusion is similar with the famous

112
00:04:42,720 --> 00:04:45,120
air gamma encryption

113
00:04:45,120 --> 00:04:48,000
both inclusion uses a pair of

114
00:04:48,000 --> 00:04:52,320
elements as a public key and uses the

115
00:04:52,320 --> 00:04:56,599
logarithm either secretly

116
00:04:56,720 --> 00:04:58,400
however

117
00:04:58,400 --> 00:05:01,440
those elements of their encryption

118
00:05:01,440 --> 00:05:04,800
come from an unknown order group

119
00:05:04,800 --> 00:05:07,919
while the ones of algoma come from order

120
00:05:07,919 --> 00:05:10,960
of a group of other p

121
00:05:10,960 --> 00:05:12,960
and for encryption

122
00:05:12,960 --> 00:05:15,600
and the slides shows

123
00:05:15,600 --> 00:05:18,880
the cr encryption uses an actual element

124
00:05:18,880 --> 00:05:19,600
f

125
00:05:19,600 --> 00:05:22,320
coming from a dlec group

126
00:05:22,320 --> 00:05:24,720
to generate the encryption

127
00:05:24,720 --> 00:05:28,080
well the elgama only uses elements

128
00:05:28,080 --> 00:05:31,680
coming from their heart group

129
00:05:31,680 --> 00:05:34,000
and for decryption

130
00:05:34,000 --> 00:05:37,039
i shall i show on the slides

131
00:05:37,039 --> 00:05:39,840
both

132
00:05:40,800 --> 00:05:44,080
both encryptions want to extract message

133
00:05:44,080 --> 00:05:48,240
from the function c2 over c1 to secret k

134
00:05:48,240 --> 00:05:49,360
however

135
00:05:49,360 --> 00:05:51,360
in cl inclusion

136
00:05:51,360 --> 00:05:55,120
this fraction comes from a dlt group

137
00:05:55,120 --> 00:05:57,759
well the one in algoma inclusion

138
00:05:57,759 --> 00:06:00,960
comes from their heart group

139
00:06:00,960 --> 00:06:03,280
that's why their inclusion

140
00:06:03,280 --> 00:06:07,039
supports a large message space while the

141
00:06:07,039 --> 00:06:08,639
air garment inclusion

142
00:06:08,639 --> 00:06:12,880
only supports a small smoke

143
00:06:16,960 --> 00:06:20,160
go back to the specific construction of

144
00:06:20,160 --> 00:06:23,039
ecdsa

145
00:06:23,280 --> 00:06:26,160
besides the truth of the homomorphic

146
00:06:26,160 --> 00:06:27,840
inclusion

147
00:06:27,840 --> 00:06:30,560
one still need a general knowledge proof

148
00:06:30,560 --> 00:06:33,440
the products the inclusion ck

149
00:06:33,440 --> 00:06:35,759
is indeed an encryption of the signing

150
00:06:35,759 --> 00:06:38,000
key

151
00:06:41,440 --> 00:06:44,560
here is the sigma protocol for proving

152
00:06:44,560 --> 00:06:46,720
the knowledge of cr inclusion put forth

153
00:06:46,720 --> 00:06:49,440
in ccl plus 19.

154
00:06:49,440 --> 00:06:52,080
the proof sends a random cr encryption

155
00:06:52,080 --> 00:06:55,520
in the first round to match the weakness

156
00:06:55,520 --> 00:06:58,880
and then the wi-fi sends a challenge

157
00:06:58,880 --> 00:07:01,759
trading from the side of zero and one

158
00:07:01,759 --> 00:07:03,199
and finally

159
00:07:03,199 --> 00:07:06,319
the approval opens specific encryption

160
00:07:06,319 --> 00:07:09,759
depending on challenge

161
00:07:09,759 --> 00:07:12,880
although this protocol is secure

162
00:07:12,880 --> 00:07:15,199
the scientist arrow is very large and

163
00:07:15,199 --> 00:07:17,599
one has to repeat this protocol many

164
00:07:17,599 --> 00:07:18,560
times

165
00:07:18,560 --> 00:07:22,800
to get an acceptable status arrow

166
00:07:22,800 --> 00:07:24,800
which makes this protocol

167
00:07:24,800 --> 00:07:26,960
very expensive

168
00:07:26,960 --> 00:07:28,560
so

169
00:07:28,560 --> 00:07:30,880
how about that the welfare

170
00:07:30,880 --> 00:07:33,039
should change from a large

171
00:07:33,039 --> 00:07:35,440
space

172
00:07:37,919 --> 00:07:40,080
unfortunately

173
00:07:40,080 --> 00:07:42,240
if the weapon should change from a large

174
00:07:42,240 --> 00:07:43,199
switch

175
00:07:43,199 --> 00:07:45,199
this protocol is

176
00:07:45,199 --> 00:07:47,440
no longer secure

177
00:07:47,440 --> 00:07:48,639
in fact

178
00:07:48,639 --> 00:07:51,199
there is a larger element

179
00:07:51,199 --> 00:07:53,120
attack

180
00:07:53,120 --> 00:07:55,759
the voltage star owns a load element

181
00:07:55,759 --> 00:07:56,840
deep

182
00:07:56,840 --> 00:08:00,319
frame then could generate an emulator

183
00:08:00,319 --> 00:08:03,840
including c frame as shown on the slides

184
00:08:03,840 --> 00:08:04,720
then

185
00:08:04,720 --> 00:08:09,520
if g prime to e equals y

186
00:08:09,840 --> 00:08:11,680
then

187
00:08:11,680 --> 00:08:13,360
then peace out for the comments on

188
00:08:13,360 --> 00:08:16,240
honest welfare with an enrique

189
00:08:16,240 --> 00:08:18,879
inclusion

190
00:08:20,560 --> 00:08:22,319
okay

191
00:08:22,319 --> 00:08:25,199
although this protocol is not secure

192
00:08:25,199 --> 00:08:28,000
we still find a key observation which

193
00:08:28,000 --> 00:08:30,639
shows that this protocol still certifies

194
00:08:30,639 --> 00:08:32,880
someone's security

195
00:08:32,880 --> 00:08:34,479
in fact

196
00:08:34,479 --> 00:08:36,880
in fact we found that for any encryption

197
00:08:36,880 --> 00:08:38,399
safe

198
00:08:38,399 --> 00:08:40,719
if the malicious approval could generate

199
00:08:40,719 --> 00:08:42,719
an acceptable proof

200
00:08:42,719 --> 00:08:46,240
with a non-negligible profit

201
00:08:46,240 --> 00:08:47,760
then

202
00:08:47,760 --> 00:08:50,399
this encryption c

203
00:08:50,399 --> 00:08:53,040
can be easily turned into a relative

204
00:08:53,040 --> 00:08:56,079
text supreme

205
00:08:58,080 --> 00:09:00,240
most specifically

206
00:09:00,240 --> 00:09:03,519
suppose there is two accepting proofs

207
00:09:03,519 --> 00:09:06,080
with the same first message and a

208
00:09:06,080 --> 00:09:09,640
different challenge

209
00:09:10,560 --> 00:09:12,480
it shows the

210
00:09:12,480 --> 00:09:14,480
these two equalities showing others

211
00:09:14,480 --> 00:09:16,480
lives

212
00:09:16,480 --> 00:09:17,519
which

213
00:09:17,519 --> 00:09:19,519
which shows that

214
00:09:19,519 --> 00:09:23,519
the pair of say one to capital delta e

215
00:09:23,519 --> 00:09:26,560
and c2 to capital delta e

216
00:09:26,560 --> 00:09:32,399
is a within the encryption of capital cm

217
00:09:35,519 --> 00:09:37,839
which also claims that

218
00:09:37,839 --> 00:09:40,399
we could use capital data e to

219
00:09:40,399 --> 00:09:41,279
turn

220
00:09:41,279 --> 00:09:44,160
c into a with the encryption

221
00:09:44,160 --> 00:09:47,040
we need to robot we denote by

222
00:09:47,040 --> 00:09:50,480
empty order they showing the slides

223
00:09:50,480 --> 00:09:52,560
then we could see that

224
00:09:52,560 --> 00:09:54,160
c

225
00:09:54,160 --> 00:09:57,200
is closed when we need the encryption

226
00:09:57,200 --> 00:09:58,240
of

227
00:09:58,240 --> 00:10:00,800
i'm telling them

228
00:10:00,800 --> 00:10:02,320
so

229
00:10:02,320 --> 00:10:05,200
given sql key and the capital delta e

230
00:10:05,200 --> 00:10:09,680
one could easily obtain the m tilde

231
00:10:13,279 --> 00:10:15,839
suppose that p star could convince web

232
00:10:15,839 --> 00:10:18,560
file with a high probability

233
00:10:18,560 --> 00:10:22,320
then for random capital delta e

234
00:10:22,320 --> 00:10:25,040
the probability capability satisfies our

235
00:10:25,040 --> 00:10:27,120
provides

236
00:10:27,120 --> 00:10:29,839
analysis is also high

237
00:10:29,839 --> 00:10:30,959
therefore

238
00:10:30,959 --> 00:10:33,200
i could choose a random capital data e

239
00:10:33,200 --> 00:10:35,680
itself

240
00:10:36,000 --> 00:10:38,480
and try to extract a material

241
00:10:38,480 --> 00:10:41,120
only using the secret

242
00:10:41,120 --> 00:10:42,240
however

243
00:10:42,240 --> 00:10:45,880
there is a question

244
00:10:46,000 --> 00:10:47,600
how could we know that

245
00:10:47,600 --> 00:10:50,880
the extracted message is what we want

246
00:10:50,880 --> 00:10:52,399
in other words

247
00:10:52,399 --> 00:10:55,360
how can we make sure the consistency

248
00:10:55,360 --> 00:10:57,839
of the extracted message

249
00:10:57,839 --> 00:11:02,480
and the message hiding increasingly

250
00:11:07,360 --> 00:11:09,839
in order to secure in order to ensure

251
00:11:09,839 --> 00:11:11,839
the consistency

252
00:11:11,839 --> 00:11:14,399
we try to combine the sigma protocol for

253
00:11:14,399 --> 00:11:16,000
ergonomic inclusion

254
00:11:16,000 --> 00:11:19,440
and the sigma follicle for cr encryption

255
00:11:19,440 --> 00:11:20,880
notice that

256
00:11:20,880 --> 00:11:23,200
ergonomic encryption only supports small

257
00:11:23,200 --> 00:11:24,959
message space

258
00:11:24,959 --> 00:11:27,760
but has sigma protocol certifying

259
00:11:27,760 --> 00:11:30,880
satisfying thumbnails

260
00:11:30,880 --> 00:11:32,959
and the cl encryption

261
00:11:32,959 --> 00:11:36,560
support supports large message space

262
00:11:36,560 --> 00:11:38,720
but it's a signal protocol that didn't

263
00:11:38,720 --> 00:11:40,000
satisfy

264
00:11:40,000 --> 00:11:43,000
soundness

265
00:11:45,040 --> 00:11:47,279
that's our first idea

266
00:11:47,279 --> 00:11:50,320
promising our protocol

267
00:11:50,320 --> 00:11:52,399
promising political is used to prove

268
00:11:52,399 --> 00:11:56,959
that the consensus of two texts one is a

269
00:11:56,959 --> 00:11:58,720
argument quotient

270
00:11:58,720 --> 00:12:02,000
another is cl inclusion

271
00:12:02,000 --> 00:12:03,920
however

272
00:12:03,920 --> 00:12:06,160
uh here we uh here we use puru for

273
00:12:06,160 --> 00:12:10,240
ergama and the red for their encryption

274
00:12:11,360 --> 00:12:12,880
in the fourth round

275
00:12:12,880 --> 00:12:15,920
the pros and a random argument inclusion

276
00:12:15,920 --> 00:12:18,399
and a random cl encryption with the same

277
00:12:18,399 --> 00:12:20,000
message included

278
00:12:20,000 --> 00:12:24,000
using for mask the weakness

279
00:12:24,000 --> 00:12:25,600
in second round

280
00:12:25,600 --> 00:12:28,160
the welfare chooses the welfare stands

281
00:12:28,160 --> 00:12:31,360
are challenged from a large space

282
00:12:31,360 --> 00:12:33,120
in the last round

283
00:12:33,120 --> 00:12:35,600
the pro open specific ergonomic

284
00:12:35,600 --> 00:12:36,800
encryption

285
00:12:36,800 --> 00:12:39,440
and the corresponding cl encryption with

286
00:12:39,440 --> 00:12:42,079
the same plan text

287
00:12:42,079 --> 00:12:44,880
depending on challenge

288
00:12:44,880 --> 00:12:46,880
it is easy to find that

289
00:12:46,880 --> 00:12:49,200
our promise sigma protocol that it

290
00:12:49,200 --> 00:12:52,720
defines the completeness property and

291
00:12:52,720 --> 00:12:54,399
einstein wherever their knowledge

292
00:12:54,399 --> 00:12:56,800
product

293
00:12:56,800 --> 00:12:59,120
although our pro our other protocol

294
00:12:59,120 --> 00:13:01,600
doesn't satisfy

295
00:13:01,600 --> 00:13:03,839
the soundness property it satisfies a

296
00:13:03,839 --> 00:13:07,200
kind of weak sinus we call it the promis

297
00:13:07,200 --> 00:13:10,320
extractable protein

298
00:13:10,320 --> 00:13:13,120
the promise extractable property

299
00:13:13,120 --> 00:13:14,959
contains two parts

300
00:13:14,959 --> 00:13:18,000
two parts rewinding extractable and

301
00:13:18,000 --> 00:13:21,360
stringent line extractable

302
00:13:21,360 --> 00:13:24,800
rewind rewinding extractable claims that

303
00:13:24,800 --> 00:13:27,279
using rewinding one could extract

304
00:13:27,279 --> 00:13:28,399
message

305
00:13:28,399 --> 00:13:31,120
the message and the randomness

306
00:13:31,120 --> 00:13:34,320
for algoma inclusion capital c which

307
00:13:34,320 --> 00:13:37,760
also claims that the argument encryption

308
00:13:37,760 --> 00:13:41,120
is a winning encryption

309
00:13:41,760 --> 00:13:45,120
the proof of this property is easy

310
00:13:45,120 --> 00:13:48,000
because our promised signal protocol

311
00:13:48,000 --> 00:13:50,800
contains a complete sigma protocol for

312
00:13:50,800 --> 00:13:52,639
air gamma

313
00:13:52,639 --> 00:13:56,720
and for stretching line extractable

314
00:13:57,040 --> 00:13:59,040
it claims that

315
00:13:59,040 --> 00:14:01,519
one could use both liquid

316
00:14:01,519 --> 00:14:04,720
to extract the message

317
00:14:04,720 --> 00:14:08,800
encrypted in algoma encryption

318
00:14:08,800 --> 00:14:09,839
in fact

319
00:14:09,839 --> 00:14:11,680
we have shown that

320
00:14:11,680 --> 00:14:14,880
a sigma protocol for cr inclusion

321
00:14:14,880 --> 00:14:17,279
shows that one could extract message

322
00:14:17,279 --> 00:14:18,079
from

323
00:14:18,079 --> 00:14:20,560
cl inclusion

324
00:14:20,560 --> 00:14:23,199
using the security of l-gamma

325
00:14:23,199 --> 00:14:25,440
one could check the message

326
00:14:25,440 --> 00:14:26,720
extracted

327
00:14:26,720 --> 00:14:29,440
is indeed the one encrypted in alchemy

328
00:14:29,440 --> 00:14:32,000
inclusion

329
00:14:32,079 --> 00:14:33,279
meanwhile

330
00:14:33,279 --> 00:14:35,519
our promised sigma protocol

331
00:14:35,519 --> 00:14:37,120
would ensure the

332
00:14:37,120 --> 00:14:41,519
constituents of about two messages

333
00:14:42,560 --> 00:14:45,680
the street line extractable property

334
00:14:45,680 --> 00:14:47,440
is an interesting property because we

335
00:14:47,440 --> 00:14:49,760
know that a standalone ergonomic

336
00:14:49,760 --> 00:14:51,120
initiative test

337
00:14:51,120 --> 00:14:53,760
is enough decryptable for large print

338
00:14:53,760 --> 00:14:55,839
text encrypted

339
00:14:55,839 --> 00:14:58,399
however with the help of our promised

340
00:14:58,399 --> 00:14:59,920
sigma protocol

341
00:14:59,920 --> 00:15:02,240
and the cl inclusion

342
00:15:02,240 --> 00:15:04,399
the algoma encryption is

343
00:15:04,399 --> 00:15:07,680
is equippable for large speeds for large

344
00:15:07,680 --> 00:15:10,160
message space

345
00:15:10,160 --> 00:15:11,760
here

346
00:15:11,760 --> 00:15:14,240
reminds that our promising protocol

347
00:15:14,240 --> 00:15:17,120
doesn't ensure that the cr encryption

348
00:15:17,120 --> 00:15:20,480
seat is a willing inclusion however we

349
00:15:20,480 --> 00:15:23,279
are sure that our protocol is enough for

350
00:15:23,279 --> 00:15:26,480
many applications such as threshold

351
00:15:26,480 --> 00:15:29,440
ecbi setting

352
00:15:31,360 --> 00:15:33,519
we also construct another two promised

353
00:15:33,519 --> 00:15:35,519
sigma protocols

354
00:15:35,519 --> 00:15:38,560
one for consistence of messages

355
00:15:38,560 --> 00:15:40,480
and another for homomorphic

356
00:15:40,480 --> 00:15:43,120
operations

357
00:15:43,519 --> 00:15:45,519
due to the time limit

358
00:15:45,519 --> 00:15:47,839
we refer listener to our people for more

359
00:15:47,839 --> 00:15:50,839
details

360
00:15:54,000 --> 00:15:56,480
go back to the construction of two-party

361
00:15:56,480 --> 00:15:58,800
ecgsa

362
00:15:58,800 --> 00:16:01,440
we use our promise protocol

363
00:16:01,440 --> 00:16:04,000
to prove the consistence of

364
00:16:04,000 --> 00:16:05,759
wq1 and

365
00:16:05,759 --> 00:16:09,120
inclusion ck

366
00:16:09,120 --> 00:16:12,160
our promised sigma protocols for

367
00:16:12,160 --> 00:16:14,959
performance is much better than the ones

368
00:16:14,959 --> 00:16:17,440
used in gsr plus 19.

369
00:16:17,440 --> 00:16:18,480
however

370
00:16:18,480 --> 00:16:21,519
we will make trouble in the

371
00:16:21,519 --> 00:16:26,160
of homomorphic operations in sinuses

372
00:16:27,240 --> 00:16:29,680
[Music]

373
00:16:29,680 --> 00:16:33,519
here is the construction of sinus phase

374
00:16:33,519 --> 00:16:38,000
in india 17 and gcl plus 19.

375
00:16:38,000 --> 00:16:39,199
note that

376
00:16:39,199 --> 00:16:42,160
the project 2 will send c prime in the

377
00:16:42,160 --> 00:16:43,600
last round

378
00:16:43,600 --> 00:16:46,560
which is generated by doing homomorphic

379
00:16:46,560 --> 00:16:50,000
operations on equivalency

380
00:16:50,000 --> 00:16:52,240
is it

381
00:16:53,040 --> 00:16:55,519
however the simulator

382
00:16:55,519 --> 00:16:57,920
doesn't know the

383
00:16:57,920 --> 00:17:00,000
homomorphic operations

384
00:17:00,000 --> 00:17:02,240
it already knows the message is supposed

385
00:17:02,240 --> 00:17:03,839
to be

386
00:17:03,839 --> 00:17:06,480
in supreme

387
00:17:06,480 --> 00:17:09,439
so he could he can only send the

388
00:17:09,439 --> 00:17:11,280
inclusion

389
00:17:11,280 --> 00:17:13,520
of this message

390
00:17:13,520 --> 00:17:15,520
okay we denote by

391
00:17:15,520 --> 00:17:19,839
a and b as shown under slides

392
00:17:21,760 --> 00:17:23,679
using a and b

393
00:17:23,679 --> 00:17:27,119
it could simplify about situation

394
00:17:27,119 --> 00:17:29,679
as shown on the slides

395
00:17:29,679 --> 00:17:32,880
ii does a homomorphic operations

396
00:17:32,880 --> 00:17:35,600
using a and b

397
00:17:35,600 --> 00:17:38,240
while simulator encrypts a

398
00:17:38,240 --> 00:17:40,559
times x y plus b

399
00:17:40,559 --> 00:17:42,000
directly

400
00:17:42,000 --> 00:17:45,440
where x1 is extracted by rewinding the

401
00:17:45,440 --> 00:17:47,840
proof

402
00:17:48,480 --> 00:17:49,919
then

403
00:17:49,919 --> 00:17:52,400
if c is valid

404
00:17:52,400 --> 00:17:54,880
then the randomness used in homomorphic

405
00:17:54,880 --> 00:17:56,400
operations

406
00:17:56,400 --> 00:17:58,799
or incorporations

407
00:17:58,799 --> 00:18:02,240
will be able to mask a

408
00:18:02,240 --> 00:18:05,120
which makes the output of 2

409
00:18:05,120 --> 00:18:07,039
and a simulator

410
00:18:07,039 --> 00:18:09,360
in distinguishable

411
00:18:09,360 --> 00:18:11,760
however

412
00:18:11,760 --> 00:18:14,160
our promised sigma protocol can ensure

413
00:18:14,160 --> 00:18:15,039
that

414
00:18:15,039 --> 00:18:19,120
c is a variable inclusion

415
00:18:21,760 --> 00:18:22,799
therefore

416
00:18:22,799 --> 00:18:24,480
we need to know how to stimulate

417
00:18:24,480 --> 00:18:26,400
homomorphic operations

418
00:18:26,400 --> 00:18:27,120
i

419
00:18:27,120 --> 00:18:29,760
really the to a test

420
00:18:29,760 --> 00:18:33,200
with a promising proof

421
00:18:33,360 --> 00:18:35,440
so our idea is to

422
00:18:35,440 --> 00:18:40,400
make our frame be able to mask a again

423
00:18:40,400 --> 00:18:42,720
so we require the pilot tool and the

424
00:18:42,720 --> 00:18:44,400
simulator

425
00:18:44,400 --> 00:18:48,720
uses uh c1 to upgrade on the c2 tube r

426
00:18:48,720 --> 00:18:49,679
frame

427
00:18:49,679 --> 00:18:51,840
to resemble to regenerate

428
00:18:51,840 --> 00:18:53,600
to randomize

429
00:18:53,600 --> 00:18:54,320
the

430
00:18:54,320 --> 00:18:56,799
c frame

431
00:18:56,799 --> 00:18:58,799
however in this way

432
00:18:58,799 --> 00:19:00,960
by 2 will decrypt

433
00:19:00,960 --> 00:19:02,960
a times x y

434
00:19:02,960 --> 00:19:07,280
plus b plus r prime times x1 from c3

435
00:19:07,280 --> 00:19:11,679
which means that we will fail to decrypt

436
00:19:11,679 --> 00:19:14,080
a times x y plus b

437
00:19:14,080 --> 00:19:16,160
and fail to

438
00:19:16,160 --> 00:19:19,440
generate the signature

439
00:19:20,559 --> 00:19:21,840
therefore

440
00:19:21,840 --> 00:19:24,480
we have to require the party tool and

441
00:19:24,480 --> 00:19:26,400
simulator since

442
00:19:26,400 --> 00:19:28,640
our prime modulus p

443
00:19:28,640 --> 00:19:30,960
to help the encryption

444
00:19:30,960 --> 00:19:32,559
however

445
00:19:32,559 --> 00:19:34,080
how could we

446
00:19:34,080 --> 00:19:36,240
use operand mask a

447
00:19:36,240 --> 00:19:41,200
another situation sending up a modulus p

448
00:19:42,080 --> 00:19:44,000
in fact we found that

449
00:19:44,000 --> 00:19:45,919
if our frame is choosing from a large

450
00:19:45,919 --> 00:19:47,840
enough space

451
00:19:47,840 --> 00:19:52,880
and the order of c1 and c2 to rc2 times

452
00:19:52,880 --> 00:19:56,160
f2 minus x1

453
00:19:56,160 --> 00:19:58,880
is the frame rate key

454
00:19:58,880 --> 00:20:00,320
up frame

455
00:20:00,320 --> 00:20:05,120
could still be randomized safely

456
00:20:05,520 --> 00:20:08,880
and from the chromosomal proof

457
00:20:08,880 --> 00:20:11,840
we know that the equivalency is close to

458
00:20:11,840 --> 00:20:12,640
the

459
00:20:12,640 --> 00:20:15,280
inclusion of x1

460
00:20:15,280 --> 00:20:16,799
which shows that

461
00:20:16,799 --> 00:20:18,880
it shows the connection between the

462
00:20:18,880 --> 00:20:22,240
order of z1 and gp

463
00:20:22,240 --> 00:20:24,880
as well as the order of

464
00:20:24,880 --> 00:20:26,960
c2 times i have

465
00:20:26,960 --> 00:20:28,880
to minus xy

466
00:20:28,880 --> 00:20:32,039
and h

467
00:20:34,640 --> 00:20:35,919
therefore

468
00:20:35,919 --> 00:20:39,120
with the help of our promising protocol

469
00:20:39,120 --> 00:20:40,880
we could

470
00:20:40,880 --> 00:20:43,280
transform the secondary requirements

471
00:20:43,280 --> 00:20:44,640
into that

472
00:20:44,640 --> 00:20:48,640
p prime with the order of gp and h

473
00:20:48,640 --> 00:20:52,080
which could be easily achieved

474
00:20:52,080 --> 00:20:54,240
so up to now

475
00:20:54,240 --> 00:20:56,320
we finished the simulation of the

476
00:20:56,320 --> 00:20:58,960
homomorphic operations on an immediate

477
00:20:58,960 --> 00:21:02,640
subtext with a promising proof

478
00:21:02,640 --> 00:21:05,679
and we also finished the proof

479
00:21:05,679 --> 00:21:08,000
we also finished the construction of our

480
00:21:08,000 --> 00:21:12,240
efficient two-party ecdsa

481
00:21:12,880 --> 00:21:14,960
using the same technique

482
00:21:14,960 --> 00:21:17,200
you could also construct an efficient

483
00:21:17,200 --> 00:21:20,640
multi-party threathold ecdsa

484
00:21:20,640 --> 00:21:24,159
compared with ccl plus 19 and this is l

485
00:21:24,159 --> 00:21:26,080
plus 20.

486
00:21:26,080 --> 00:21:28,720
our efficient naturopathic ecgse

487
00:21:28,720 --> 00:21:31,840
is significant input in the k generation

488
00:21:31,840 --> 00:21:32,799
phase

489
00:21:32,799 --> 00:21:34,799
and slightly efficient

490
00:21:34,799 --> 00:21:36,640
in scientific

491
00:21:36,640 --> 00:21:38,000
compared with

492
00:21:38,000 --> 00:21:41,360
gcl plus 20.

493
00:21:41,679 --> 00:21:44,480
our multi-party threshold ecdsa is

494
00:21:44,480 --> 00:21:46,320
significantly improved in the key

495
00:21:46,320 --> 00:21:48,559
generation phase

496
00:21:48,559 --> 00:21:50,640
but it was more important

497
00:21:50,640 --> 00:21:53,039
our multi-party spread code initiative

498
00:21:53,039 --> 00:21:54,320
ecgic

499
00:21:54,320 --> 00:21:57,120
removes the non-standard assumption

500
00:21:57,120 --> 00:21:59,039
the load assumption answers to download

501
00:21:59,039 --> 00:22:01,600
the function

502
00:22:01,760 --> 00:22:02,799
that's all

503
00:22:02,799 --> 00:22:06,520
thank you for your attention

504
00:22:13,280 --> 00:22:15,360
you

