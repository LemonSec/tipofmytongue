1
00:00:01,280 --> 00:00:04,000
hi welcome to my talk trend ciphering

2
00:00:04,000 --> 00:00:06,160
framework for approximate homomorphic

3
00:00:06,160 --> 00:00:07,600
encryption

4
00:00:07,600 --> 00:00:10,080
my name is seongwang kim and this is a

5
00:00:10,080 --> 00:00:13,840
joint work with tion cho chinchaarha

6
00:00:13,840 --> 00:00:17,880
yongli juhili

7
00:00:20,400 --> 00:00:22,640
before we start we give an overview of

8
00:00:22,640 --> 00:00:24,080
this paper

9
00:00:24,080 --> 00:00:26,480
first of all we present the first

10
00:00:26,480 --> 00:00:29,439
transcifering framework for real numbers

11
00:00:29,439 --> 00:00:32,000
maybe one of you might not know the term

12
00:00:32,000 --> 00:00:34,079
trend ciphering framework

13
00:00:34,079 --> 00:00:36,559
basically trans ciphering framework is a

14
00:00:36,559 --> 00:00:38,960
conversion from symmetric cipher text to

15
00:00:38,960 --> 00:00:40,800
an ac cipher text

16
00:00:40,800 --> 00:00:43,040
so far there was a transciphene

17
00:00:43,040 --> 00:00:45,360
framework for exact data in a modular

18
00:00:45,360 --> 00:00:46,559
ring

19
00:00:46,559 --> 00:00:49,280
second we present he-friendly cipher

20
00:00:49,280 --> 00:00:52,000
which targets practically shorter

21
00:00:52,000 --> 00:00:54,559
homomorphic evaluation time

22
00:00:54,559 --> 00:00:56,800
age-friendly cipher is a kind of

23
00:00:56,800 --> 00:00:58,399
symmetric cipher which can be

24
00:00:58,399 --> 00:01:00,960
efficiently evaluated in trans-ciphering

25
00:01:00,960 --> 00:01:02,480
framework

26
00:01:02,480 --> 00:01:05,199
for hd-friendly ciphers it has been

27
00:01:05,199 --> 00:01:06,960
believed that

28
00:01:06,960 --> 00:01:10,000
multiplicative depth and complexity are

29
00:01:10,000 --> 00:01:13,760
the most relevant measure for efficiency

30
00:01:13,760 --> 00:01:17,280
however we found out that linear layers

31
00:01:17,280 --> 00:01:20,080
can significantly affect the homomorphic

32
00:01:20,080 --> 00:01:22,159
evaluation time

33
00:01:22,159 --> 00:01:24,799
we devised more simpler randomized key

34
00:01:24,799 --> 00:01:27,280
schedule rather than randomized linear

35
00:01:27,280 --> 00:01:28,640
layer

36
00:01:28,640 --> 00:01:31,280
finally we implemented our framework in

37
00:01:31,280 --> 00:01:32,400
cipher

38
00:01:32,400 --> 00:01:35,759
and achieved 23 times smaller ciphertext

39
00:01:35,759 --> 00:01:40,280
expansion and 9985

40
00:01:40,320 --> 00:01:43,680
times smaller latency than the ckkks

41
00:01:43,680 --> 00:01:46,640
only environment

42
00:01:47,040 --> 00:01:50,000
now let's begin from morphing cursion

43
00:01:50,000 --> 00:01:51,920
a morphe encryption is an encryption

44
00:01:51,920 --> 00:01:54,399
scheme that enables addition and

45
00:01:54,399 --> 00:01:57,520
multiplication over encrypted data

46
00:01:57,520 --> 00:01:59,439
some might think about partially

47
00:01:59,439 --> 00:02:02,079
homomorphic encryption

48
00:02:02,079 --> 00:02:05,360
but when we say h e in this presentation

49
00:02:05,360 --> 00:02:07,360
it supports both addition and

50
00:02:07,360 --> 00:02:09,119
multiplication

51
00:02:09,119 --> 00:02:11,680
there are well-known examples of hg

52
00:02:11,680 --> 00:02:13,040
skims

53
00:02:13,040 --> 00:02:17,360
fv skim for modular ring and ckks for

54
00:02:17,360 --> 00:02:19,360
complex ring

55
00:02:19,360 --> 00:02:21,200
because of this feature

56
00:02:21,200 --> 00:02:23,760
morph encryption can protect data when

57
00:02:23,760 --> 00:02:25,680
they are being used

58
00:02:25,680 --> 00:02:28,239
for example morph encryption can be used

59
00:02:28,239 --> 00:02:30,319
for machine learning inference

60
00:02:30,319 --> 00:02:33,040
and statistics of sensitive data

61
00:02:33,040 --> 00:02:37,319
while preserving privacy

62
00:02:38,000 --> 00:02:40,800
here we introduce some grammars in rlw

63
00:02:40,800 --> 00:02:44,319
based homomorphic encryption schemes

64
00:02:44,319 --> 00:02:46,720
when we say message it is a vector of

65
00:02:46,720 --> 00:02:49,120
data to be manipulated

66
00:02:49,120 --> 00:02:52,160
when we say plain text it's a polynomial

67
00:02:52,160 --> 00:02:54,400
to be encrypted

68
00:02:54,400 --> 00:02:57,120
encoding function maps from message to

69
00:02:57,120 --> 00:03:00,480
plain text without key

70
00:03:00,480 --> 00:03:03,280
cipher text is literally a cipher text

71
00:03:03,280 --> 00:03:05,519
of rlw encryption

72
00:03:05,519 --> 00:03:09,040
which is a pair of polynomials

73
00:03:09,040 --> 00:03:11,440
encryption maps from plain text to

74
00:03:11,440 --> 00:03:14,720
ciphertext with key

75
00:03:15,200 --> 00:03:16,840
we give some

76
00:03:16,840 --> 00:03:21,120
examples of fv and vgv and

77
00:03:21,120 --> 00:03:23,200
ckks

78
00:03:23,200 --> 00:03:26,239
message space of fvbgv is

79
00:03:26,239 --> 00:03:28,080
ctn

80
00:03:28,080 --> 00:03:32,400
for ckks it is c n over two which is

81
00:03:32,400 --> 00:03:34,879
complex vector space

82
00:03:34,879 --> 00:03:36,480
when we say slot

83
00:03:36,480 --> 00:03:39,120
it means a component of the message

84
00:03:39,120 --> 00:03:41,200
vector

85
00:03:41,200 --> 00:03:44,879
encoding function of fv vgv is

86
00:03:44,879 --> 00:03:46,640
number theoretic transform light

87
00:03:46,640 --> 00:03:47,760
function

88
00:03:47,760 --> 00:03:50,640
while ckks has discrete 3d transform

89
00:03:50,640 --> 00:03:54,000
light encoding function

90
00:03:54,080 --> 00:03:55,840
through the encoding function data

91
00:03:55,840 --> 00:03:57,599
becomes plain text

92
00:03:57,599 --> 00:04:00,640
which is in a quotient ring

93
00:04:00,640 --> 00:04:02,799
the difference of two schemes is

94
00:04:02,799 --> 00:04:05,680
multi-load c

95
00:04:05,680 --> 00:04:08,159
when we say coefficient it implies that

96
00:04:08,159 --> 00:04:11,599
the coefficients of the plain text

97
00:04:11,599 --> 00:04:13,920
for encryption function and ciphertext

98
00:04:13,920 --> 00:04:16,320
space you can see that two schemes have

99
00:04:16,320 --> 00:04:18,160
the same encryption function in

100
00:04:18,160 --> 00:04:21,120
ciphertext space

101
00:04:22,479 --> 00:04:24,320
recent homomorphic encryption schemes

102
00:04:24,320 --> 00:04:26,639
have two demerits

103
00:04:26,639 --> 00:04:29,680
first one is slow encryption speed

104
00:04:29,680 --> 00:04:32,720
morphic encryption schemes usually use a

105
00:04:32,720 --> 00:04:35,680
large parameter rlwe sample

106
00:04:35,680 --> 00:04:37,680
which is much slower than conventional

107
00:04:37,680 --> 00:04:39,520
symmetric cipher

108
00:04:39,520 --> 00:04:42,880
second one is large ciphertex expansion

109
00:04:42,880 --> 00:04:45,680
ciphertext expansion refers to how much

110
00:04:45,680 --> 00:04:49,520
ciphertext is expended from plain text

111
00:04:49,520 --> 00:04:52,639
the size of a ciphertext is 10 times to

112
00:04:52,639 --> 00:04:55,120
a million times larger than the size of

113
00:04:55,120 --> 00:04:58,720
the plain text according to parameters

114
00:04:58,720 --> 00:05:01,360
when encrypting small message this ratio

115
00:05:01,360 --> 00:05:03,759
becomes worse

116
00:05:03,759 --> 00:05:06,560
the situation leads to a large memory

117
00:05:06,560 --> 00:05:11,000
and network bandwidth overhead

118
00:05:11,440 --> 00:05:12,880
imagine that

119
00:05:12,880 --> 00:05:15,919
a client wants to delegate

120
00:05:15,919 --> 00:05:18,400
computation to a server

121
00:05:18,400 --> 00:05:21,600
while all the data are encrypted

122
00:05:21,600 --> 00:05:24,160
naively one can think that all the data

123
00:05:24,160 --> 00:05:26,240
can be encrypted with homomorphic

124
00:05:26,240 --> 00:05:29,039
encryption and compute with them

125
00:05:29,039 --> 00:05:33,520
however as you can see in this table

126
00:05:33,520 --> 00:05:35,680
encryption speed and ciphertex expansion

127
00:05:35,680 --> 00:05:38,479
might be quite an overload

128
00:05:38,479 --> 00:05:43,360
so demands for hybrid encryption arise

129
00:05:44,080 --> 00:05:47,840
to resolve the demerits of ag lauterer

130
00:05:47,840 --> 00:05:50,320
proposed trend ciphering framework which

131
00:05:50,320 --> 00:05:53,440
is conversion from symmetric cipher text

132
00:05:53,440 --> 00:05:56,160
to a homomorphic ciphertext

133
00:05:56,160 --> 00:05:57,840
the client sends homomorphically

134
00:05:57,840 --> 00:06:00,240
encrypted symmetric key

135
00:06:00,240 --> 00:06:02,720
to server once

136
00:06:02,720 --> 00:06:04,800
and encrypts all the messages with

137
00:06:04,800 --> 00:06:06,560
symmetric cipher

138
00:06:06,560 --> 00:06:09,120
and given symmetric ciphertext the

139
00:06:09,120 --> 00:06:11,520
server evaluates the decryption circuit

140
00:06:11,520 --> 00:06:14,319
to make homomorphically encrypted

141
00:06:14,319 --> 00:06:16,800
messages

142
00:06:16,880 --> 00:06:18,880
using trans ciphering framework the

143
00:06:18,880 --> 00:06:21,120
client can incur the fast and get

144
00:06:21,120 --> 00:06:24,400
smaller ciphertext

145
00:06:25,680 --> 00:06:28,160
in trans ciphering framework there is a

146
00:06:28,160 --> 00:06:29,840
symmetric cipher

147
00:06:29,840 --> 00:06:33,280
it is evaluated both in clear and while

148
00:06:33,280 --> 00:06:34,960
encrypted

149
00:06:34,960 --> 00:06:36,800
in this sense

150
00:06:36,800 --> 00:06:38,960
a cipher needs to be efficiently

151
00:06:38,960 --> 00:06:41,759
evaluated using homomorphic encryption

152
00:06:41,759 --> 00:06:45,360
we call it he-friendly cipher

153
00:06:45,360 --> 00:06:46,840
so far in most

154
00:06:46,840 --> 00:06:50,240
hardware and gates and xor gates need

155
00:06:50,240 --> 00:06:52,720
roughly same resources

156
00:06:52,720 --> 00:06:55,280
however in homomorphic encryption

157
00:06:55,280 --> 00:06:57,520
multiplication is much more expensive

158
00:06:57,520 --> 00:06:59,039
than addition

159
00:06:59,039 --> 00:07:02,400
so to design an ag-friendly cipher

160
00:07:02,400 --> 00:07:04,720
it requires low multiplicative depth and

161
00:07:04,720 --> 00:07:06,560
complexity

162
00:07:06,560 --> 00:07:08,800
since then some agey friendly ciphers

163
00:07:08,800 --> 00:07:11,599
such as low mc cravium

164
00:07:11,599 --> 00:07:12,479
flip

165
00:07:12,479 --> 00:07:14,720
rasta and mazda

166
00:07:14,720 --> 00:07:17,840
were proposed

167
00:07:18,720 --> 00:07:20,960
here comes a problem

168
00:07:20,960 --> 00:07:23,199
the first problem is that there is no

169
00:07:23,199 --> 00:07:25,039
trend ciphering framework for real

170
00:07:25,039 --> 00:07:26,240
numbers

171
00:07:26,240 --> 00:07:28,800
in real world applications

172
00:07:28,800 --> 00:07:32,400
most of the data are form of real number

173
00:07:32,400 --> 00:07:34,720
however it is hard to design a cipher

174
00:07:34,720 --> 00:07:37,759
over real number

175
00:07:38,000 --> 00:07:40,960
for example imagine a cipher e

176
00:07:40,960 --> 00:07:43,360
which can be represented as polynomial

177
00:07:43,360 --> 00:07:45,680
functions over real numbers

178
00:07:45,680 --> 00:07:48,400
when solving such systems of equation

179
00:07:48,400 --> 00:07:51,280
can be translated to this minimization

180
00:07:51,280 --> 00:07:52,639
problem

181
00:07:52,639 --> 00:07:54,800
this function f l

182
00:07:54,800 --> 00:07:56,840
is polynomial and

183
00:07:56,840 --> 00:08:00,240
differentiable using differentiation

184
00:08:00,240 --> 00:08:05,039
one can easily get an approximated root

185
00:08:05,360 --> 00:08:08,639
the second problem is that

186
00:08:08,800 --> 00:08:11,520
previous works on age-friendly ciphers

187
00:08:11,520 --> 00:08:15,440
did not consider practicality enough

188
00:08:15,440 --> 00:08:17,039
many works pointed out that

189
00:08:17,039 --> 00:08:20,000
multiplicative depth and complexity are

190
00:08:20,000 --> 00:08:23,199
most relevant curse metrics however

191
00:08:23,199 --> 00:08:27,120
they are not all the relevant metrics to

192
00:08:27,120 --> 00:08:29,919
homomorphic valuation time

193
00:08:29,919 --> 00:08:32,399
furthermore client-side encryption is

194
00:08:32,399 --> 00:08:35,279
too slow as asymmetric cipher

195
00:08:35,279 --> 00:08:38,958
it takes at most 100 million cycles per

196
00:08:38,958 --> 00:08:41,760
a few hundred bit block

197
00:08:41,760 --> 00:08:44,320
that's far beyond the speed of symmetric

198
00:08:44,320 --> 00:08:46,800
cipher

199
00:08:49,040 --> 00:08:51,279
to make a transcifering framework for

200
00:08:51,279 --> 00:08:53,440
real numbers we observe some

201
00:08:53,440 --> 00:08:57,519
similarities between ckks and fv schemes

202
00:08:57,519 --> 00:08:59,920
the first observation is that

203
00:08:59,920 --> 00:09:02,160
ckks and fv

204
00:09:02,160 --> 00:09:03,279
schemes

205
00:09:03,279 --> 00:09:06,000
have similar encryption algorithms

206
00:09:06,000 --> 00:09:08,000
here we wrote down the formula of

207
00:09:08,000 --> 00:09:10,240
encryption

208
00:09:10,240 --> 00:09:14,399
algorithms in ckks and fe schemes

209
00:09:14,399 --> 00:09:15,920
as you can see

210
00:09:15,920 --> 00:09:18,080
they are very similar and the major

211
00:09:18,080 --> 00:09:19,200
difference is

212
00:09:19,200 --> 00:09:21,279
delta

213
00:09:21,279 --> 00:09:24,560
for ckks the delta is scaling factor

214
00:09:24,560 --> 00:09:26,880
which preserves precision

215
00:09:26,880 --> 00:09:28,800
while theta

216
00:09:28,800 --> 00:09:30,640
delta in fv

217
00:09:30,640 --> 00:09:33,920
is a big scalar to make plaintext modulo

218
00:09:33,920 --> 00:09:36,480
t

219
00:09:36,480 --> 00:09:39,040
the second observation is that ckks and

220
00:09:39,040 --> 00:09:42,480
fv have similar plain text space

221
00:09:42,480 --> 00:09:44,480
both schemes use a plain text in

222
00:09:44,480 --> 00:09:48,839
polynomial ring zx with bounded

223
00:09:48,839 --> 00:09:51,440
coefficients this figure we give a

224
00:09:51,440 --> 00:09:55,519
pictorial description two of two skims

225
00:09:55,519 --> 00:09:59,360
these bars stands for coefficients

226
00:09:59,360 --> 00:10:01,839
they are different in the size of delta

227
00:10:01,839 --> 00:10:04,560
we found out that those two schemes can

228
00:10:04,560 --> 00:10:06,560
be converted to each other by

229
00:10:06,560 --> 00:10:09,359
bitstripping

230
00:10:10,880 --> 00:10:14,079
we wanted this kind of picture symmetric

231
00:10:14,079 --> 00:10:17,040
ciphers are evaluated using the fe

232
00:10:17,040 --> 00:10:19,839
scheme and the last output is in cks

233
00:10:19,839 --> 00:10:24,160
ciphertext of original messages

234
00:10:25,920 --> 00:10:28,320
then we present rtf transcifering

235
00:10:28,320 --> 00:10:29,360
framework

236
00:10:29,360 --> 00:10:31,440
which is a new trend ciphering framework

237
00:10:31,440 --> 00:10:34,079
for real numbers

238
00:10:34,079 --> 00:10:37,839
rtf means real to finite field

239
00:10:37,839 --> 00:10:40,720
the overall diagram is on the right

240
00:10:40,720 --> 00:10:42,640
we will describe

241
00:10:42,640 --> 00:10:44,880
from the client side

242
00:10:44,880 --> 00:10:48,160
the client has a real num real message m

243
00:10:48,160 --> 00:10:50,480
and convert to integers

244
00:10:50,480 --> 00:10:53,680
modular t by scaling and rounding off

245
00:10:53,680 --> 00:10:55,680
here t should be large enough to

246
00:10:55,680 --> 00:10:56,800
preserve

247
00:10:56,800 --> 00:10:59,200
predetermined precision

248
00:10:59,200 --> 00:11:02,720
a client generates key stream from

249
00:11:02,720 --> 00:11:05,839
a non-spaced stream cipher over zt

250
00:11:05,839 --> 00:11:08,000
by adding the key stream to the scaled

251
00:11:08,000 --> 00:11:09,360
message

252
00:11:09,360 --> 00:11:12,240
the client can get a symmetric cipher

253
00:11:12,240 --> 00:11:16,160
text c the client needs to send an fe

254
00:11:16,160 --> 00:11:18,399
encrypted symmetric key

255
00:11:18,399 --> 00:11:21,680
k to the server

256
00:11:23,200 --> 00:11:26,880
the server receiving nonce and an fve

257
00:11:26,880 --> 00:11:31,839
encrypted key evaluate the key stream

258
00:11:31,839 --> 00:11:34,800
then the key stream is in the slots

259
00:11:34,800 --> 00:11:37,360
to make the same form keystream is taken

260
00:11:37,360 --> 00:11:41,200
out to coefficients by slow to cove

261
00:11:41,200 --> 00:11:43,120
it is a homomorphic evaluation of

262
00:11:43,120 --> 00:11:45,519
decoding function

263
00:11:45,519 --> 00:11:48,720
and then given symmetric ciphertext

264
00:11:48,720 --> 00:11:51,760
the server concatenates those symmetric

265
00:11:51,760 --> 00:11:55,440
ciphertext to a polynomial and scale up

266
00:11:55,440 --> 00:11:57,920
by delta

267
00:11:57,920 --> 00:12:00,399
by subtracting the f encrypted's key

268
00:12:00,399 --> 00:12:02,639
stream the scaled original message is

269
00:12:02,639 --> 00:12:06,399
recovered in fv cipher text

270
00:12:06,399 --> 00:12:10,240
finally kks bootstrapping converted

271
00:12:10,240 --> 00:12:13,279
to ckk ciphertext

272
00:12:13,279 --> 00:12:15,680
here half boot is a kind of reduced

273
00:12:15,680 --> 00:12:17,519
boost ramping

274
00:12:17,519 --> 00:12:20,240
since the scaled messages are already in

275
00:12:20,240 --> 00:12:22,399
the coefficients we do not need to

276
00:12:22,399 --> 00:12:25,680
evaluate the last slow to coeff in skks

277
00:12:25,680 --> 00:12:28,399
boost trapping

278
00:12:29,519 --> 00:12:32,800
we also made an age-friendly cipher hera

279
00:12:32,800 --> 00:12:36,560
over zt to use in the rtf framework

280
00:12:36,560 --> 00:12:39,680
like rasta it is a block cipher-like

281
00:12:39,680 --> 00:12:42,240
stream cipher outputting a vector in

282
00:12:42,240 --> 00:12:44,480
zt16

283
00:12:44,480 --> 00:12:47,760
hera is an sbn with randomized key

284
00:12:47,760 --> 00:12:48,880
schedule

285
00:12:48,880 --> 00:12:50,160
on the right

286
00:12:50,160 --> 00:12:52,639
this figure describes the round function

287
00:12:52,639 --> 00:12:53,839
of hair

288
00:12:53,839 --> 00:12:57,440
unlike conventional spn hera starts

289
00:12:57,440 --> 00:13:00,800
and ends with linear layer you can see

290
00:13:00,800 --> 00:13:02,800
that the round function starts with

291
00:13:02,800 --> 00:13:05,040
linear layer and the finalization

292
00:13:05,040 --> 00:13:07,519
function ends with linear layer

293
00:13:07,519 --> 00:13:09,440
the input of this function

294
00:13:09,440 --> 00:13:12,720
is a fixed constant

295
00:13:14,720 --> 00:13:16,320
in previous works

296
00:13:16,320 --> 00:13:19,839
it has been popular to use simpler

297
00:13:19,839 --> 00:13:23,040
and complex affine layers

298
00:13:23,040 --> 00:13:24,240
in this sense

299
00:13:24,240 --> 00:13:26,399
random affine layers are adopted to

300
00:13:26,399 --> 00:13:28,800
reduce multiplicative depth

301
00:13:28,800 --> 00:13:31,600
however it turned out that the random

302
00:13:31,600 --> 00:13:34,079
affine layer reduces the efficiency on

303
00:13:34,079 --> 00:13:37,680
both client and server side

304
00:13:37,680 --> 00:13:39,680
we decided to use

305
00:13:39,680 --> 00:13:45,199
as lite mds matrix for high diffusion

306
00:13:45,600 --> 00:13:49,120
in this figure 16 boxes represent each

307
00:13:49,120 --> 00:13:52,160
component of zt16

308
00:13:52,160 --> 00:13:55,040
mixed columns is a multiplication by

309
00:13:55,040 --> 00:13:57,600
this matrix to each column

310
00:13:57,600 --> 00:14:00,320
it is used in aes

311
00:14:00,320 --> 00:14:03,600
and is mds over a gallowa field of size

312
00:14:03,600 --> 00:14:06,160
two to the power of eight

313
00:14:06,160 --> 00:14:08,639
for a sufficiently large prime t this

314
00:14:08,639 --> 00:14:13,120
matrix is also mds over zt

315
00:14:13,120 --> 00:14:16,320
mixrose is a row version of mixed

316
00:14:16,320 --> 00:14:18,480
columns

317
00:14:18,480 --> 00:14:21,199
in this table we list some functions and

318
00:14:21,199 --> 00:14:22,480
its cost

319
00:14:22,480 --> 00:14:25,519
to evaluate homomorphically

320
00:14:25,519 --> 00:14:28,639
i put three functions and multipl our

321
00:14:28,639 --> 00:14:31,440
multiplication by some matrices

322
00:14:31,440 --> 00:14:33,920
and the last function is cube function

323
00:14:33,920 --> 00:14:38,320
is exponentiation by three

324
00:14:38,320 --> 00:14:40,399
among linear maps

325
00:14:40,399 --> 00:14:43,040
the evaluation time is quite different

326
00:14:43,040 --> 00:14:46,000
especially freshly generated matrix

327
00:14:46,000 --> 00:14:48,639
which is used in flip and rasta take

328
00:14:48,639 --> 00:14:53,279
more time compared to cube function

329
00:14:55,120 --> 00:14:57,519
rather than randomize a fine layer we

330
00:14:57,519 --> 00:15:01,680
use a simple randomized key schedule

331
00:15:01,680 --> 00:15:04,000
enhance is fed to an extendable output

332
00:15:04,000 --> 00:15:05,040
function

333
00:15:05,040 --> 00:15:07,199
and the randomized output is multiplied

334
00:15:07,199 --> 00:15:11,680
to the master key component wisely

335
00:15:11,839 --> 00:15:14,000
since the component-wise multiplication

336
00:15:14,000 --> 00:15:16,800
is a basic multiplication in homomorphic

337
00:15:16,800 --> 00:15:17,839
encryption

338
00:15:17,839 --> 00:15:20,000
it's very efficient to evaluate

339
00:15:20,000 --> 00:15:22,240
homomorphically

340
00:15:22,240 --> 00:15:23,440
s-box

341
00:15:23,440 --> 00:15:27,360
is component-wise cube map the cube map

342
00:15:27,360 --> 00:15:30,240
enjoys a lot of nice cryptographic

343
00:15:30,240 --> 00:15:31,680
properties

344
00:15:31,680 --> 00:15:33,120
for example

345
00:15:33,120 --> 00:15:36,560
it is invertible low degree and has low

346
00:15:36,560 --> 00:15:39,680
linear and differential probability

347
00:15:39,680 --> 00:15:42,320
specifically the inverse of a of the

348
00:15:42,320 --> 00:15:43,600
cube function

349
00:15:43,600 --> 00:15:45,759
is of high degree

350
00:15:45,759 --> 00:15:47,680
so it prevents algebraic mid in the

351
00:15:47,680 --> 00:15:50,479
middle attack

352
00:15:51,759 --> 00:15:55,120
we analyze the security of hera against

353
00:15:55,120 --> 00:15:56,959
many different attacks

354
00:15:56,959 --> 00:16:00,959
first of all since nonsense fed to xof

355
00:16:00,959 --> 00:16:03,759
it is impossible to attack hera in cpa

356
00:16:03,759 --> 00:16:04,720
model

357
00:16:04,720 --> 00:16:06,560
so differential based attacks such as

358
00:16:06,560 --> 00:16:09,120
differential encrypt analysis higher

359
00:16:09,120 --> 00:16:11,040
order differential and possible

360
00:16:11,040 --> 00:16:13,839
differential is not allowed

361
00:16:13,839 --> 00:16:16,560
by the same reason integral attacks are

362
00:16:16,560 --> 00:16:18,720
impossible to apply

363
00:16:18,720 --> 00:16:20,160
nevertheless

364
00:16:20,160 --> 00:16:22,880
to pres to prevent unknown statistical

365
00:16:22,880 --> 00:16:24,720
attack we provide linear and

366
00:16:24,720 --> 00:16:26,560
differential probability

367
00:16:26,560 --> 00:16:29,360
using the y trail strategy

368
00:16:29,360 --> 00:16:31,360
we check the linear probability of q

369
00:16:31,360 --> 00:16:34,240
function and prove the branch number of

370
00:16:34,240 --> 00:16:37,839
our linear layer

371
00:16:40,880 --> 00:16:43,759
because of its low degree nature of agey

372
00:16:43,759 --> 00:16:46,399
friendly ciphers algebraic attacks may

373
00:16:46,399 --> 00:16:47,440
be

374
00:16:47,440 --> 00:16:50,720
fatal to age-friendly ciphers we dealt

375
00:16:50,720 --> 00:16:52,480
with linearization

376
00:16:52,480 --> 00:16:54,320
interpolation attack

377
00:16:54,320 --> 00:16:58,240
gcd attack and gravinar basis attack

378
00:16:58,240 --> 00:17:00,800
to prevent linearization and

379
00:17:00,800 --> 00:17:02,800
interpolation attack

380
00:17:02,800 --> 00:17:05,119
the number of monomials should be large

381
00:17:05,119 --> 00:17:07,679
enough when the cipher is represented as

382
00:17:07,679 --> 00:17:09,679
a polynomial

383
00:17:09,679 --> 00:17:12,240
we believe that the number of monomials

384
00:17:12,240 --> 00:17:15,039
in hera is sufficiently large since

385
00:17:15,039 --> 00:17:18,079
linear layer is dense

386
00:17:18,079 --> 00:17:19,679
we also check that

387
00:17:19,679 --> 00:17:22,640
check that mid in the middle attack

388
00:17:22,640 --> 00:17:24,079
is inefficient

389
00:17:24,079 --> 00:17:26,720
since the inverse of cube is of high

390
00:17:26,720 --> 00:17:28,480
degree

391
00:17:28,480 --> 00:17:31,039
to prevent gcd attack and gravity basis

392
00:17:31,039 --> 00:17:33,360
attack the degree and the degree of

393
00:17:33,360 --> 00:17:36,080
regularity is important

394
00:17:36,080 --> 00:17:38,559
to compute all of those values and take

395
00:17:38,559 --> 00:17:40,720
into account guess and determine

396
00:17:40,720 --> 00:17:43,120
approach

397
00:17:44,160 --> 00:17:46,320
this table shows the recommended number

398
00:17:46,320 --> 00:17:48,880
of rounds with respect to

399
00:17:48,880 --> 00:17:50,640
each attack

400
00:17:50,640 --> 00:17:53,600
x-axis stands for the security level

401
00:17:53,600 --> 00:17:57,679
like 80-beat 128-bit security

402
00:17:57,679 --> 00:18:00,480
y-axis stands for the attacks

403
00:18:00,480 --> 00:18:02,080
the number of rounds

404
00:18:02,080 --> 00:18:07,039
of hera is the maximum of each column

405
00:18:08,080 --> 00:18:10,400
as we propose the first tran ciphering

406
00:18:10,400 --> 00:18:12,400
framework for real numbers

407
00:18:12,400 --> 00:18:15,840
there is not many things to compare

408
00:18:15,840 --> 00:18:19,039
we compare rtf combined with hera

409
00:18:19,039 --> 00:18:23,600
to lwes to rlw conversion and ckks only

410
00:18:23,600 --> 00:18:25,280
environment

411
00:18:25,280 --> 00:18:28,320
we experimented lwes to our lwe

412
00:18:28,320 --> 00:18:31,280
conversion using open pegasus library in

413
00:18:31,280 --> 00:18:34,320
this paper below

414
00:18:34,400 --> 00:18:36,559
the ckks only environment is

415
00:18:36,559 --> 00:18:40,000
experimented using let's go library

416
00:18:40,000 --> 00:18:42,640
the first rtf hera is full batching

417
00:18:42,640 --> 00:18:46,320
instance and the second rtf hera is said

418
00:18:46,320 --> 00:18:49,360
to have the same number of slots as

419
00:18:49,360 --> 00:18:52,799
lwe's to rlwe conversion

420
00:18:52,799 --> 00:18:55,760
we emphasize that the red part cipher

421
00:18:55,760 --> 00:18:58,640
text size ciphertext expansion ratio

422
00:18:58,640 --> 00:19:00,799
and client-side performance

423
00:19:00,799 --> 00:19:02,960
is significantly better than the seeking

424
00:19:02,960 --> 00:19:06,400
case only environment

425
00:19:06,640 --> 00:19:10,280
thank you for listening

