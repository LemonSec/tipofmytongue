1
00:00:02,639 --> 00:00:05,120
hello everyone and welcome to my asia

2
00:00:05,120 --> 00:00:07,919
group 2021 virtual talk

3
00:00:07,919 --> 00:00:10,800
so the topic of my presentation is our

4
00:00:10,800 --> 00:00:13,200
bright adversaries is a universal

5
00:00:13,200 --> 00:00:15,120
composability framework

6
00:00:15,120 --> 00:00:17,279
and in historic work with michelle

7
00:00:17,279 --> 00:00:21,039
abdullah manuel barbosa jonathan katz

8
00:00:21,039 --> 00:00:24,400
and julian ross

9
00:00:26,400 --> 00:00:29,279
so here's an outline of my talk

10
00:00:29,279 --> 00:00:32,238
our work combines two powerful models in

11
00:00:32,238 --> 00:00:34,640
cryptography one is the universal

12
00:00:34,640 --> 00:00:37,440
composibility or uc framework and the

13
00:00:37,440 --> 00:00:39,840
other is the algebraic group model or

14
00:00:39,840 --> 00:00:42,800
atm so i will first provide a brief

15
00:00:42,800 --> 00:00:44,399
overview of these two

16
00:00:44,399 --> 00:00:46,879
existing models and then i will

17
00:00:46,879 --> 00:00:50,320
introduce our uc atm framework

18
00:00:50,320 --> 00:00:53,600
which defines agm within uc

19
00:00:53,600 --> 00:00:55,440
and finally i will showcase two

20
00:00:55,440 --> 00:00:58,160
applications of our new model so one is

21
00:00:58,160 --> 00:01:01,920
the um troll and orlando ot protocol and

22
00:01:01,920 --> 00:01:03,359
the other is

23
00:01:03,359 --> 00:01:05,519
a number of password authenticated key

24
00:01:05,519 --> 00:01:08,560
exchange protocols

25
00:01:09,360 --> 00:01:11,840
um so now let's start the first part of

26
00:01:11,840 --> 00:01:15,360
the talk which is the modeling

27
00:01:15,360 --> 00:01:18,159
um the universal composability framework

28
00:01:18,159 --> 00:01:19,439
or uc

29
00:01:19,439 --> 00:01:22,960
was proposed by canadi in 2001 and it

30
00:01:22,960 --> 00:01:23,759
has

31
00:01:23,759 --> 00:01:25,920
the strongest security definition

32
00:01:25,920 --> 00:01:28,400
framework in multi-party computation in

33
00:01:28,400 --> 00:01:30,000
the sunset

34
00:01:30,000 --> 00:01:32,159
it supports arbitrary protocol

35
00:01:32,159 --> 00:01:33,759
composition

36
00:01:33,759 --> 00:01:35,119
it follows the

37
00:01:35,119 --> 00:01:38,960
real ideal paradigm in npc so the

38
00:01:38,960 --> 00:01:41,920
figures here are copied directly from

39
00:01:41,920 --> 00:01:44,640
carnegie's original paper on uc

40
00:01:44,640 --> 00:01:47,759
the left hand side um as a real world

41
00:01:47,759 --> 00:01:51,119
where there are n parties uh mu 1 to mu

42
00:01:51,119 --> 00:01:53,439
m is a protocol pi

43
00:01:53,439 --> 00:01:54,799
and

44
00:01:54,799 --> 00:01:57,439
in an execution of the protocol pi there

45
00:01:57,439 --> 00:01:59,439
are two additional parties that will

46
00:01:59,439 --> 00:02:01,360
through i and

47
00:02:01,360 --> 00:02:03,200
the environment e

48
00:02:03,200 --> 00:02:06,240
and these two parties can communicate

49
00:02:06,240 --> 00:02:08,720
with the political parties

50
00:02:08,720 --> 00:02:11,360
on the right hand side is the ideal

51
00:02:11,360 --> 00:02:12,640
world

52
00:02:12,640 --> 00:02:14,560
so let me stress that the protocol in

53
00:02:14,560 --> 00:02:16,319
the ideal world

54
00:02:16,319 --> 00:02:17,440
can be

55
00:02:17,440 --> 00:02:19,920
can be any particle but usually

56
00:02:19,920 --> 00:02:22,959
the ideal protocol consists of a single

57
00:02:22,959 --> 00:02:25,840
ideal functionality f

58
00:02:25,840 --> 00:02:26,720
and

59
00:02:26,720 --> 00:02:28,640
m dummy parties

60
00:02:28,640 --> 00:02:31,280
denoted d1 to dm here

61
00:02:31,280 --> 00:02:34,879
so now we say that the protocol pi uc

62
00:02:34,879 --> 00:02:38,319
emulates the ideal functionality as

63
00:02:38,319 --> 00:02:41,360
if for any adversary in the real world

64
00:02:41,360 --> 00:02:44,959
there is an adversary in the uh

65
00:02:44,959 --> 00:02:47,840
in the ideal world which simulates the

66
00:02:47,840 --> 00:02:51,040
environment's view

67
00:02:51,040 --> 00:02:53,840
um so one one reason why uc is so

68
00:02:53,840 --> 00:02:56,400
powerful is the composition theorem

69
00:02:56,400 --> 00:02:59,599
which says that if protocol pi uc

70
00:02:59,599 --> 00:03:02,840
emulates an ideal functionality f

71
00:03:02,840 --> 00:03:05,680
then a protocol

72
00:03:05,680 --> 00:03:08,959
which has pi as a sub protocol

73
00:03:08,959 --> 00:03:12,480
also usually emulates the protocol with

74
00:03:12,480 --> 00:03:15,360
pi replaced with f so what does this

75
00:03:15,360 --> 00:03:18,159
mean so this allows for using the ideal

76
00:03:18,159 --> 00:03:19,440
functionality

77
00:03:19,440 --> 00:03:22,000
instead of a uc secure protocol

78
00:03:22,000 --> 00:03:26,000
within a higher level protocol

79
00:03:28,080 --> 00:03:30,720
the autopilot group model

80
00:03:30,720 --> 00:03:33,040
was introduced much later uh it was

81
00:03:33,040 --> 00:03:34,959
formalized by uh

82
00:03:34,959 --> 00:03:39,040
for smaller kills and loss in 2018

83
00:03:39,040 --> 00:03:41,680
so it sits between the um standard model

84
00:03:41,680 --> 00:03:43,840
and the general group model

85
00:03:43,840 --> 00:03:46,959
so an algebraic adversary

86
00:03:46,959 --> 00:03:49,120
whenever it outputs

87
00:03:49,120 --> 00:03:52,159
a group element it must also output its

88
00:03:52,159 --> 00:03:54,879
so-called algebraic representation which

89
00:03:54,879 --> 00:03:57,360
explains how this group element is

90
00:03:57,360 --> 00:03:58,560
computed

91
00:03:58,560 --> 00:04:01,680
from the adversaries field so that is um

92
00:04:01,680 --> 00:04:03,760
so suppose the adversary's field

93
00:04:03,760 --> 00:04:07,519
consists of group elements x1 to xn

94
00:04:07,519 --> 00:04:10,080
then whenever the adversary outputs

95
00:04:10,080 --> 00:04:12,000
another group element y

96
00:04:12,000 --> 00:04:15,120
it must also output integers lambda 1

97
00:04:15,120 --> 00:04:16,639
for lambda n

98
00:04:16,639 --> 00:04:18,959
on an auxiliary in

99
00:04:18,959 --> 00:04:21,440
on an auxiliary type called the

100
00:04:21,440 --> 00:04:23,199
algebraic type

101
00:04:23,199 --> 00:04:24,560
such that

102
00:04:24,560 --> 00:04:28,080
y is equal to x1 to the power of lambda

103
00:04:28,080 --> 00:04:31,120
one times probably times x n to the

104
00:04:31,120 --> 00:04:33,919
power of lambda n so this is exactly how

105
00:04:33,919 --> 00:04:39,039
y is computed from the adversaries view

106
00:04:39,840 --> 00:04:44,080
so the atm mainly has two types of

107
00:04:44,080 --> 00:04:45,440
applications

108
00:04:45,440 --> 00:04:48,720
um the first one is it it allows for

109
00:04:48,720 --> 00:04:51,199
either proving a stronger security

110
00:04:51,199 --> 00:04:54,720
notion or giving a tighter security bond

111
00:04:54,720 --> 00:04:56,720
for some schemes

112
00:04:56,720 --> 00:05:00,240
one notable example is that in the agm

113
00:05:00,240 --> 00:05:03,120
you can avoid rewinding so you can give

114
00:05:03,120 --> 00:05:05,759
a simple and tighter proof for say the

115
00:05:05,759 --> 00:05:08,639
snore signature

116
00:05:08,639 --> 00:05:12,800
another thing is agm enables um security

117
00:05:12,800 --> 00:05:15,600
proof for some schemes that are unlikely

118
00:05:15,600 --> 00:05:18,400
or perhaps even impossible

119
00:05:18,400 --> 00:05:20,720
to prove otherwise such as some blind

120
00:05:20,720 --> 00:05:23,120
signature schemes

121
00:05:23,120 --> 00:05:25,759
however up to now

122
00:05:25,759 --> 00:05:28,560
there have been no applications of the

123
00:05:28,560 --> 00:05:31,120
agm that is in the simulation-based

124
00:05:31,120 --> 00:05:34,639
setting which severely limits its use in

125
00:05:34,639 --> 00:05:38,280
multi-party computation

126
00:05:38,800 --> 00:05:42,800
so our work combines using an idea and

127
00:05:42,800 --> 00:05:46,479
we propose the uc agm framework

128
00:05:46,479 --> 00:05:50,160
um here we have two key issues to tackle

129
00:05:50,160 --> 00:05:53,199
so the first one is um which parties

130
00:05:53,199 --> 00:05:55,039
need to be outbreak

131
00:05:55,039 --> 00:05:57,440
in the original adm there's only a

132
00:05:57,440 --> 00:06:00,240
single adversary and we require that

133
00:06:00,240 --> 00:06:03,120
this adversary is algebraic

134
00:06:03,120 --> 00:06:04,880
but in uc there are actually three

135
00:06:04,880 --> 00:06:06,720
adversarial parties in a security

136
00:06:06,720 --> 00:06:08,479
definition

137
00:06:08,479 --> 00:06:10,800
so there's the adversary i in the real

138
00:06:10,800 --> 00:06:13,840
world there's a simulator s in the ideal

139
00:06:13,840 --> 00:06:17,039
world and there's an environment e

140
00:06:17,039 --> 00:06:19,520
which tries to distinguish between the

141
00:06:19,520 --> 00:06:23,198
real world and the ideal world

142
00:06:23,360 --> 00:06:25,840
so we require that

143
00:06:25,840 --> 00:06:28,720
all these three parties to be to be

144
00:06:28,720 --> 00:06:32,240
algebraic in uc atm

145
00:06:32,240 --> 00:06:34,400
and then we need to decide

146
00:06:34,400 --> 00:06:37,199
um what exactly it means to say that a

147
00:06:37,199 --> 00:06:39,759
party is algebraic to recall that

148
00:06:39,759 --> 00:06:42,400
because that in the original agm this

149
00:06:42,400 --> 00:06:44,960
means that the adversary must write the

150
00:06:44,960 --> 00:06:47,440
algebraic representation whenever it

151
00:06:47,440 --> 00:06:50,479
sends a group element to some party

152
00:06:50,479 --> 00:06:51,919
um so here

153
00:06:51,919 --> 00:06:54,319
when the adversary or the simulator

154
00:06:54,319 --> 00:06:57,680
communicates with a protocol party

155
00:06:57,680 --> 00:06:59,759
we require the same thing

156
00:06:59,759 --> 00:07:01,520
however

157
00:07:01,520 --> 00:07:03,440
in order to make the composition theorem

158
00:07:03,440 --> 00:07:04,639
work

159
00:07:04,639 --> 00:07:06,720
we need to we need something additional

160
00:07:06,720 --> 00:07:08,240
and in particular

161
00:07:08,240 --> 00:07:11,199
we need to place some restriction on the

162
00:07:11,199 --> 00:07:12,960
environment as well

163
00:07:12,960 --> 00:07:16,479
so we require that the environment needs

164
00:07:16,479 --> 00:07:19,199
to send the algebraic representation

165
00:07:19,199 --> 00:07:21,680
directly to the adversary

166
00:07:21,680 --> 00:07:23,840
so what why do we require this

167
00:07:23,840 --> 00:07:26,479
intuitively this is because we want the

168
00:07:26,479 --> 00:07:29,520
simulator to receive the algebraic

169
00:07:29,520 --> 00:07:32,080
representations from all adversarial

170
00:07:32,080 --> 00:07:34,000
parties

171
00:07:34,000 --> 00:07:36,240
both the adversary are the environment

172
00:07:36,240 --> 00:07:38,240
but the simulator cannot run the

173
00:07:38,240 --> 00:07:40,319
environment in uc it can only run the

174
00:07:40,319 --> 00:07:42,639
adversary

175
00:07:42,639 --> 00:07:45,599
so that is why we require that uh the

176
00:07:45,599 --> 00:07:48,160
environment sends the algebraic

177
00:07:48,160 --> 00:07:50,400
representation to the adversary so in

178
00:07:50,400 --> 00:07:54,879
this way the simulator can directly see

179
00:07:54,879 --> 00:07:57,360
the algebraic representations from the

180
00:07:57,360 --> 00:07:59,840
environment

181
00:07:59,919 --> 00:08:02,319
for other communications

182
00:08:02,319 --> 00:08:03,199
uh

183
00:08:03,199 --> 00:08:05,520
namely the adversary sending

184
00:08:05,520 --> 00:08:07,840
a group element to the environment or

185
00:08:07,840 --> 00:08:10,080
the simulator sending a group element to

186
00:08:10,080 --> 00:08:13,360
the environment or the environment sends

187
00:08:13,360 --> 00:08:15,360
some group elements to the particle

188
00:08:15,360 --> 00:08:18,319
parties so in all these cases

189
00:08:18,319 --> 00:08:21,039
we don't require them to send the

190
00:08:21,039 --> 00:08:24,400
algebraic representations

191
00:08:25,120 --> 00:08:28,080
so here is a graphic illustration of

192
00:08:28,080 --> 00:08:29,680
what i just said

193
00:08:29,680 --> 00:08:32,320
um the left hand side is the real world

194
00:08:32,320 --> 00:08:35,360
where the particle role consists of un

195
00:08:35,360 --> 00:08:36,719
parties

196
00:08:36,719 --> 00:08:37,760
as well as

197
00:08:37,760 --> 00:08:40,559
an ideal functionality f

198
00:08:40,559 --> 00:08:42,799
in an execution of role the

199
00:08:42,799 --> 00:08:45,200
communication channels where the parties

200
00:08:45,200 --> 00:08:48,240
must be have algebraically are in blue

201
00:08:48,240 --> 00:08:50,240
so again the

202
00:08:50,240 --> 00:08:51,680
the environment

203
00:08:51,680 --> 00:08:52,640
must

204
00:08:52,640 --> 00:08:55,519
must be out of break while sending some

205
00:08:55,519 --> 00:08:57,600
group elements to the adversary and the

206
00:08:57,600 --> 00:09:01,200
adversary must behave algebraically when

207
00:09:01,200 --> 00:09:02,399
sending

208
00:09:02,399 --> 00:09:04,240
some group elements to the protocol

209
00:09:04,240 --> 00:09:05,440
parties

210
00:09:05,440 --> 00:09:09,399
including the ideal functionality

211
00:09:09,839 --> 00:09:12,240
on the right hand side is the

212
00:09:12,240 --> 00:09:15,200
ideal world with the ideal protocol rule

213
00:09:15,200 --> 00:09:17,760
so usually raw is

214
00:09:17,760 --> 00:09:20,320
an ideal functionality so again the

215
00:09:20,320 --> 00:09:22,880
requirements of algebraic parties are in

216
00:09:22,880 --> 00:09:25,200
blue

217
00:09:25,279 --> 00:09:29,040
so having defined the exact meanings of

218
00:09:29,040 --> 00:09:31,839
algebraic adversaries we can now define

219
00:09:31,839 --> 00:09:35,200
uc-igm emulation which is the same with

220
00:09:35,200 --> 00:09:38,800
uc emulation except that all adversarial

221
00:09:38,800 --> 00:09:41,839
parties must be outbreak

222
00:09:41,839 --> 00:09:44,240
and finally we also prove that the

223
00:09:44,240 --> 00:09:46,800
conversations theorem still holds in

224
00:09:46,800 --> 00:09:49,680
this setting so this shows that

225
00:09:49,680 --> 00:09:50,720
our

226
00:09:50,720 --> 00:09:54,800
uc ign framework is as useful as the

227
00:09:54,800 --> 00:09:58,160
original uc framework

228
00:09:59,040 --> 00:10:01,519
so now let's see some applications of

229
00:10:01,519 --> 00:10:04,480
our new uc agm framework so the first

230
00:10:04,480 --> 00:10:09,040
one is the pro and orlando ot protocol

231
00:10:09,040 --> 00:10:11,519
so recall that a one two other protocol

232
00:10:11,519 --> 00:10:14,399
is as follows so a sender has two

233
00:10:14,399 --> 00:10:17,360
messages um m0 and m1

234
00:10:17,360 --> 00:10:20,160
and a receiver has a bit b

235
00:10:20,160 --> 00:10:22,079
at the end of the interaction the

236
00:10:22,079 --> 00:10:24,800
receiver learns one of the messages and

237
00:10:24,800 --> 00:10:27,440
b knows the other message and the sender

238
00:10:27,440 --> 00:10:32,120
doesn't learn which message was sent

239
00:10:32,240 --> 00:10:35,680
um in 2015 um cho and olani wrote a

240
00:10:35,680 --> 00:10:37,760
paper with the title the simplest

241
00:10:37,760 --> 00:10:40,240
protocol for oblivious transfers in

242
00:10:40,240 --> 00:10:42,640
which they um proposed a protocol and

243
00:10:42,640 --> 00:10:44,959
they claimed it to be uc sequel

244
00:10:44,959 --> 00:10:48,560
even in the adaptive corruption setting

245
00:10:48,560 --> 00:10:51,680
so this protocol um soon gained much

246
00:10:51,680 --> 00:10:53,440
attention and the most efficient

247
00:10:53,440 --> 00:10:55,600
implementations nowadays are based on

248
00:10:55,600 --> 00:10:57,120
this protocol

249
00:10:57,120 --> 00:11:00,959
however in 2017 there were two papers

250
00:11:00,959 --> 00:11:04,560
showing three floors um in in the

251
00:11:04,560 --> 00:11:06,959
in the original security proof

252
00:11:06,959 --> 00:11:09,680
uh in the troll landing paper

253
00:11:09,680 --> 00:11:12,160
there is even an impossibility result

254
00:11:12,160 --> 00:11:14,560
which shows that

255
00:11:14,560 --> 00:11:17,600
a uc proof is impossible

256
00:11:17,600 --> 00:11:20,800
assuming that a certain assumption holds

257
00:11:20,800 --> 00:11:23,040
so this essentially leaves the protocol

258
00:11:23,040 --> 00:11:24,399
with no

259
00:11:24,399 --> 00:11:28,480
no security proof at all

260
00:11:28,480 --> 00:11:31,519
and we do the best thing possible which

261
00:11:31,519 --> 00:11:34,240
is to show that the protocol is actually

262
00:11:34,240 --> 00:11:38,079
uc agm signal and this gives the first

263
00:11:38,079 --> 00:11:40,640
security proof of the troll and orlando

264
00:11:40,640 --> 00:11:43,640
product

265
00:11:43,839 --> 00:11:46,079
so let's see at a very high level how we

266
00:11:46,079 --> 00:11:49,120
overcome the difficulties um in in the

267
00:11:49,120 --> 00:11:52,000
original probe so here's the protocol

268
00:11:52,000 --> 00:11:54,639
um the receiver first sends a random

269
00:11:54,639 --> 00:11:58,079
group element i for the sender and the

270
00:11:58,079 --> 00:12:01,680
sender then sends back a group element

271
00:12:01,680 --> 00:12:03,120
which is

272
00:12:03,120 --> 00:12:05,600
which may or may not be a one-time pad

273
00:12:05,600 --> 00:12:08,240
encryption of this a

274
00:12:08,240 --> 00:12:11,600
depending on uh depending on the um

275
00:12:11,600 --> 00:12:14,240
that's a bit fee

276
00:12:14,240 --> 00:12:15,920
and then

277
00:12:15,920 --> 00:12:16,959
um

278
00:12:16,959 --> 00:12:19,200
the receiver then derives

279
00:12:19,200 --> 00:12:20,720
keys from

280
00:12:20,720 --> 00:12:23,360
the protocol transcript a and u and

281
00:12:23,360 --> 00:12:26,959
encrypts its messages m0 and m1

282
00:12:26,959 --> 00:12:30,000
under these two keys and it sends the

283
00:12:30,000 --> 00:12:31,600
the ciphertext

284
00:12:31,600 --> 00:12:33,680
to the receiver

285
00:12:33,680 --> 00:12:36,560
the receiver can also

286
00:12:36,560 --> 00:12:40,000
can also derive the correct key kb

287
00:12:40,000 --> 00:12:43,360
and thus it can decrypt the um correct

288
00:12:43,360 --> 00:12:45,600
ciphertext and gets a message

289
00:12:45,600 --> 00:12:47,839
the other message

290
00:12:47,839 --> 00:12:50,160
cannot be decrypted and remains unknown

291
00:12:50,160 --> 00:12:53,839
from the receiver's view

292
00:12:54,079 --> 00:12:55,920
so now if you want to prove the security

293
00:12:55,920 --> 00:12:58,720
of this protocol um the problematic

294
00:12:58,720 --> 00:13:01,760
scenario is the sender is

295
00:13:01,760 --> 00:13:04,720
statically corrupted and the receiver is

296
00:13:04,720 --> 00:13:06,800
adaptively corrupted

297
00:13:06,800 --> 00:13:09,839
so what will what will happen here so in

298
00:13:09,839 --> 00:13:11,920
in this case when the receiver is

299
00:13:11,920 --> 00:13:16,240
corrupted the simulator must send the

300
00:13:16,240 --> 00:13:19,120
randomness x to the adversary which

301
00:13:19,120 --> 00:13:22,079
explains how the group element u

302
00:13:22,079 --> 00:13:23,600
is computed

303
00:13:23,600 --> 00:13:26,480
so this requires the simulator to know

304
00:13:26,480 --> 00:13:29,519
the discrete log of the group m and a

305
00:13:29,519 --> 00:13:32,240
which is y

306
00:13:32,639 --> 00:13:35,279
but the simulator has no way to know

307
00:13:35,279 --> 00:13:38,240
this one so it is said

308
00:13:38,240 --> 00:13:39,680
but in the

309
00:13:39,680 --> 00:13:42,160
in the atm so this issue can be truly

310
00:13:42,160 --> 00:13:43,199
resolved

311
00:13:43,199 --> 00:13:46,399
because an algebraic adversary must

312
00:13:46,399 --> 00:13:49,760
write this y on its algebraic type so

313
00:13:49,760 --> 00:13:53,199
this is because a y is how the group

314
00:13:53,199 --> 00:13:56,000
element i is computed

315
00:13:56,000 --> 00:13:56,880
and

316
00:13:56,880 --> 00:13:59,519
therefore this y can be seen by the

317
00:13:59,519 --> 00:14:02,639
simulator and then the simulator can

318
00:14:02,639 --> 00:14:05,839
compute x accordingly

319
00:14:05,839 --> 00:14:09,519
so in this way we can bypass the problem

320
00:14:09,519 --> 00:14:12,720
and manage to prove the um uc security

321
00:14:12,720 --> 00:14:16,880
of true and online the ot protocol

322
00:14:16,880 --> 00:14:18,160
here's another

323
00:14:18,160 --> 00:14:22,959
example the aspect 1 aspect 2 and cpace

324
00:14:22,959 --> 00:14:24,959
password authenticated key exchange

325
00:14:24,959 --> 00:14:26,800
protocols

326
00:14:26,800 --> 00:14:28,800
so a password authenticated key fringe

327
00:14:28,800 --> 00:14:31,680
particle or take and allows two parties

328
00:14:31,680 --> 00:14:34,480
to establish a shift secret key

329
00:14:34,480 --> 00:14:36,800
in the following setting

330
00:14:36,800 --> 00:14:39,519
only a low entropy password is agreed on

331
00:14:39,519 --> 00:14:42,880
in advance and there's a

332
00:14:42,880 --> 00:14:45,519
there's no authenticated channel so this

333
00:14:45,519 --> 00:14:46,560
is

334
00:14:46,560 --> 00:14:49,519
this is different from many protocols in

335
00:14:49,519 --> 00:14:52,000
npc

336
00:14:52,720 --> 00:14:55,279
um in recent years pike gained much

337
00:14:55,279 --> 00:14:59,040
attention and last year cfrg held a

338
00:14:59,040 --> 00:15:01,040
competition for the standardization of

339
00:15:01,040 --> 00:15:04,639
fake protocols and um two protocols uh

340
00:15:04,639 --> 00:15:06,800
made it to the finalists so one is

341
00:15:06,800 --> 00:15:09,680
aspect two and the other is c place so

342
00:15:09,680 --> 00:15:11,760
eventually c phase was selected and

343
00:15:11,760 --> 00:15:14,399
standardized

344
00:15:15,760 --> 00:15:17,279
however

345
00:15:17,279 --> 00:15:20,240
the landscape of both protocols you see

346
00:15:20,240 --> 00:15:24,240
security analysis has been kind of bumpy

347
00:15:24,240 --> 00:15:26,560
so there are certain critical

348
00:15:26,560 --> 00:15:29,600
difficulties that runner both of them

349
00:15:29,600 --> 00:15:32,959
are likely to be uc sql uh with respect

350
00:15:32,959 --> 00:15:35,600
to the standard you'll see a

351
00:15:35,600 --> 00:15:38,320
functionality for pipe

352
00:15:38,320 --> 00:15:40,720
um recently uh

353
00:15:40,720 --> 00:15:44,079
in in in last year and also this year uh

354
00:15:44,079 --> 00:15:46,399
there have been some work uh by the way

355
00:15:46,399 --> 00:15:49,519
i think uh one of these works uh also

356
00:15:49,519 --> 00:15:52,880
appeared in this year's israel so this

357
00:15:52,880 --> 00:15:57,040
work uh proved that both aspect 2 and c

358
00:15:57,040 --> 00:15:58,079
place

359
00:15:58,079 --> 00:16:01,519
are uc secure with respect to a relaxed

360
00:16:01,519 --> 00:16:03,519
uc functionality

361
00:16:03,519 --> 00:16:04,480
for the

362
00:16:04,480 --> 00:16:06,880
the security guarantee of this relaxed

363
00:16:06,880 --> 00:16:09,519
functionality is kind of weak and in

364
00:16:09,519 --> 00:16:12,240
particular it is not very clear whether

365
00:16:12,240 --> 00:16:15,040
this functionality implies perfect

366
00:16:15,040 --> 00:16:18,480
forward sequencing which is an important

367
00:16:18,480 --> 00:16:21,519
security notion a security property for

368
00:16:21,519 --> 00:16:23,040
pig

369
00:16:23,040 --> 00:16:26,480
and again here we managed to prove that

370
00:16:26,480 --> 00:16:29,040
both aspect 2 and cpas

371
00:16:29,040 --> 00:16:32,560
are uc agm sql with respect to the

372
00:16:32,560 --> 00:16:36,480
standard uc functionality for paper

373
00:16:36,480 --> 00:16:38,880
as a bonus we also prove that

374
00:16:38,880 --> 00:16:41,759
a variant called aspect one

375
00:16:41,759 --> 00:16:42,720
uh

376
00:16:42,720 --> 00:16:45,680
so this aspect one has better security

377
00:16:45,680 --> 00:16:48,320
under some side channel text so we prove

378
00:16:48,320 --> 00:16:52,000
that aspect 1 is also uc agm signal and

379
00:16:52,000 --> 00:16:54,399
this is actually the first security

380
00:16:54,399 --> 00:16:58,480
proof ever for aspect 1.

381
00:16:58,720 --> 00:16:59,839
so let's see

382
00:16:59,839 --> 00:17:01,279
how we managed to

383
00:17:01,279 --> 00:17:03,360
prove the uc security

384
00:17:03,360 --> 00:17:05,439
of these particles

385
00:17:05,439 --> 00:17:07,760
here's the aspect protocol

386
00:17:07,760 --> 00:17:11,359
it is essentially a harsh defilment

387
00:17:11,359 --> 00:17:13,280
where the protocol messages are

388
00:17:13,280 --> 00:17:16,160
encrypted under the password using the

389
00:17:16,160 --> 00:17:17,760
one-hand path

390
00:17:17,760 --> 00:17:19,919
so the um the difference between aspect

391
00:17:19,919 --> 00:17:22,959
1 and aspect 2 is whether the password

392
00:17:22,959 --> 00:17:25,599
is part of the hash input while deriving

393
00:17:25,599 --> 00:17:27,679
the session key

394
00:17:27,679 --> 00:17:29,360
so if you want to prove that you see

395
00:17:29,360 --> 00:17:30,720
security

396
00:17:30,720 --> 00:17:34,000
um the uc simulator needs to extract the

397
00:17:34,000 --> 00:17:36,640
password from the protocol transcript

398
00:17:36,640 --> 00:17:38,480
and send this

399
00:17:38,480 --> 00:17:41,280
extracted password to the type

400
00:17:41,280 --> 00:17:42,799
functionality

401
00:17:42,799 --> 00:17:44,640
but if you look at what the transcript

402
00:17:44,640 --> 00:17:48,160
is so actually the transcript is a

403
00:17:48,160 --> 00:17:51,440
peterson commitment to the password

404
00:17:51,440 --> 00:17:53,520
so the password is

405
00:17:53,520 --> 00:17:56,480
information theoretically hidden

406
00:17:56,480 --> 00:17:58,320
and there's simply no way for the

407
00:17:58,320 --> 00:18:01,039
simulator to extract it

408
00:18:01,039 --> 00:18:04,400
however if we work in the agm then the

409
00:18:04,400 --> 00:18:07,600
adversary has to explain how the

410
00:18:07,600 --> 00:18:09,520
sorry how the protocol

411
00:18:09,520 --> 00:18:11,039
method is

412
00:18:11,039 --> 00:18:14,480
say the group element x is computed

413
00:18:14,480 --> 00:18:17,600
which requires the adversary to write

414
00:18:17,600 --> 00:18:18,960
the password

415
00:18:18,960 --> 00:18:22,559
uh on its algebraic tag which in turn

416
00:18:22,559 --> 00:18:23,760
can be seen

417
00:18:23,760 --> 00:18:26,000
by the uc simulator

418
00:18:26,000 --> 00:18:27,600
so again

419
00:18:27,600 --> 00:18:31,360
say the uc simulator

420
00:18:31,360 --> 00:18:32,480
can

421
00:18:32,480 --> 00:18:34,400
contributely see that

422
00:18:34,400 --> 00:18:36,320
the critical

423
00:18:36,320 --> 00:18:40,960
information which allows it to complete

424
00:18:40,960 --> 00:18:43,039
the uc simulation

425
00:18:43,039 --> 00:18:45,679
so note that this entire thing has

426
00:18:45,679 --> 00:18:47,360
nothing to do with

427
00:18:47,360 --> 00:18:50,559
what happens after the protocol

428
00:18:50,559 --> 00:18:54,559
after the protocol messages are sent

429
00:18:54,559 --> 00:18:55,760
and

430
00:18:55,760 --> 00:18:58,240
differences between aspect one and two

431
00:18:58,240 --> 00:18:59,600
only appear

432
00:18:59,600 --> 00:19:02,400
uh in what the product companies do

433
00:19:02,400 --> 00:19:05,679
uh afterwards so therefore s51 can be

434
00:19:05,679 --> 00:19:08,640
proven secure in the uc itm

435
00:19:08,640 --> 00:19:12,799
um in essentially the same manner

436
00:19:12,799 --> 00:19:15,600
and cpas can be proven using agm secure

437
00:19:15,600 --> 00:19:18,000
as well using a similar trick

438
00:19:18,000 --> 00:19:20,240
um if you are interested then you can

439
00:19:20,240 --> 00:19:23,720
check our paper

440
00:19:24,559 --> 00:19:27,200
so in summary we um

441
00:19:27,200 --> 00:19:30,080
make three major conclusions so first we

442
00:19:30,080 --> 00:19:33,520
propose um the uc agm framework which

443
00:19:33,520 --> 00:19:36,720
models an algebraic adversary in uc

444
00:19:36,720 --> 00:19:39,360
and then we showcase two applications so

445
00:19:39,360 --> 00:19:42,000
for trolling or landing ot protocol that

446
00:19:42,000 --> 00:19:44,799
cannot be proven secure uh in standard

447
00:19:44,799 --> 00:19:49,360
uc because of the impossibility results

448
00:19:49,360 --> 00:19:51,600
for aspect one there's no impossibility

449
00:19:51,600 --> 00:19:54,720
result but it is also unlikely to be uc

450
00:19:54,720 --> 00:19:56,080
sql

451
00:19:56,080 --> 00:19:59,280
for fp2 and cps it only has a weak

452
00:19:59,280 --> 00:20:02,240
security guarantee in uc

453
00:20:02,240 --> 00:20:03,840
so we

454
00:20:03,840 --> 00:20:06,720
for all the above protocols we prove

455
00:20:06,720 --> 00:20:09,840
that they are using atm signal so for

456
00:20:09,840 --> 00:20:12,960
tron orlando ot on aspect one we prove

457
00:20:12,960 --> 00:20:14,400
something that

458
00:20:14,400 --> 00:20:16,720
what will we prove that you'll see

459
00:20:16,720 --> 00:20:20,159
security in the agm well which were

460
00:20:20,159 --> 00:20:23,360
unknown previously and for aspects and c

461
00:20:23,360 --> 00:20:26,080
place we achieved a stronger security

462
00:20:26,080 --> 00:20:28,400
notion

463
00:20:28,400 --> 00:20:30,080
okay so this is the

464
00:20:30,080 --> 00:20:33,360
end of my talk and our paper is on

465
00:20:33,360 --> 00:20:35,600
eprint so you can you can check it out

466
00:20:35,600 --> 00:20:37,120
if you are interested

467
00:20:37,120 --> 00:20:40,840
thank you very much

