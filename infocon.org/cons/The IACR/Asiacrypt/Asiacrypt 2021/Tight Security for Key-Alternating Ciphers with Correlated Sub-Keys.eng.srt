1
00:00:02,399 --> 00:00:03,199
hi

2
00:00:03,199 --> 00:00:05,920
welcome to my talk about tight security

3
00:00:05,920 --> 00:00:07,759
for key alternative cyphers with

4
00:00:07,759 --> 00:00:09,760
coordinated sub keys

5
00:00:09,760 --> 00:00:11,360
i'm shihu zhang

6
00:00:11,360 --> 00:00:13,360
and this is joint work with stephanie

7
00:00:13,360 --> 00:00:16,079
tessero

8
00:00:16,079 --> 00:00:18,800
a t round key of the cycle construction

9
00:00:18,800 --> 00:00:21,439
is built on t public permutations pi 1

10
00:00:21,439 --> 00:00:22,880
to pi t

11
00:00:22,880 --> 00:00:25,840
and consists of t plus 1 and base sub

12
00:00:25,840 --> 00:00:29,279
keys s0 usd

13
00:00:29,279 --> 00:00:31,599
the ksc has received considerable

14
00:00:31,599 --> 00:00:32,719
attentions

15
00:00:32,719 --> 00:00:35,120
because it captures the design of

16
00:00:35,120 --> 00:00:37,680
substitution permutation network

17
00:00:37,680 --> 00:00:40,000
with the most prominent candidate being

18
00:00:40,000 --> 00:00:42,480
aes

19
00:00:43,120 --> 00:00:45,760
previously the theoretical analysis of

20
00:00:45,760 --> 00:00:48,079
key alternate cipher were on the two

21
00:00:48,079 --> 00:00:51,200
independence assumptions

22
00:00:51,360 --> 00:00:54,879
that is the sub keys s0 to st are

23
00:00:54,879 --> 00:00:57,199
independent and sampled uniformly at

24
00:00:57,199 --> 00:00:58,879
random

25
00:00:58,879 --> 00:01:01,760
and around permutations pi 1 to pi t

26
00:01:01,760 --> 00:01:04,479
also independent and sampled uniformly

27
00:01:04,479 --> 00:01:07,039
at random

28
00:01:07,119 --> 00:01:10,479
after the night of work studying kac

29
00:01:10,479 --> 00:01:12,720
it was proven that under the two

30
00:01:12,720 --> 00:01:15,520
independence assumptions

31
00:01:15,520 --> 00:01:18,640
ksc achieves the optimal security

32
00:01:18,640 --> 00:01:20,960
tolerating any adversary that makes at

33
00:01:20,960 --> 00:01:24,960
most q to the nt over t plus one queries

34
00:01:24,960 --> 00:01:26,960
counting both the queries to the cipher

35
00:01:26,960 --> 00:01:28,320
construction

36
00:01:28,320 --> 00:01:29,759
and the queries to the public

37
00:01:29,759 --> 00:01:33,680
permutations taiwan to pi t

38
00:01:34,560 --> 00:01:37,040
however the independence assumption is

39
00:01:37,040 --> 00:01:39,280
not necessarily realistic in a practical

40
00:01:39,280 --> 00:01:42,079
cipher constructions

41
00:01:42,079 --> 00:01:44,720
in particular practical cyphers generate

42
00:01:44,720 --> 00:01:48,479
all sub keys for a short master key

43
00:01:48,479 --> 00:01:50,720
and they use a single permutation for

44
00:01:50,720 --> 00:01:52,560
every round instead of independent

45
00:01:52,560 --> 00:01:55,119
permutations

46
00:01:55,119 --> 00:01:57,680
currently the ksc security without

47
00:01:57,680 --> 00:01:59,920
independent assumptions still remains

48
00:01:59,920 --> 00:02:02,079
not well understood

49
00:02:02,079 --> 00:02:04,159
there's still a large gap between the

50
00:02:04,159 --> 00:02:06,719
theoretical study of ksc

51
00:02:06,719 --> 00:02:10,399
and the practical cipher constructions

52
00:02:11,680 --> 00:02:13,920
bridging the gap turns out to be not

53
00:02:13,920 --> 00:02:15,120
easy

54
00:02:15,120 --> 00:02:16,879
since the last decade

55
00:02:16,879 --> 00:02:19,360
limited progress has been made towards

56
00:02:19,360 --> 00:02:21,599
removing independence assumptions

57
00:02:21,599 --> 00:02:25,599
while maintaining the optimal security

58
00:02:25,760 --> 00:02:28,560
the first result was by document r

59
00:02:28,560 --> 00:02:30,959
where they considered minimizing even

60
00:02:30,959 --> 00:02:32,800
mental cycle

61
00:02:32,800 --> 00:02:36,239
which is a one wrong case for kac

62
00:02:36,239 --> 00:02:39,120
they reduced the master keynes from two

63
00:02:39,120 --> 00:02:40,800
embeds to

64
00:02:40,800 --> 00:02:43,280
a bit

65
00:02:43,680 --> 00:02:46,640
later chen at all successfully minimized

66
00:02:46,640 --> 00:02:48,400
two-round ksc

67
00:02:48,400 --> 00:02:50,480
in both the keynote and the number of

68
00:02:50,480 --> 00:02:53,760
permutations used

69
00:02:54,080 --> 00:02:56,800
then until very recently the thieves on

70
00:02:56,800 --> 00:03:00,080
the case has been addressed by ueno

71
00:03:00,080 --> 00:03:02,800
then reduce the number of permutations

72
00:03:02,800 --> 00:03:05,519
used by three-round ksc to a single

73
00:03:05,519 --> 00:03:07,040
permutation

74
00:03:07,040 --> 00:03:09,519
on the assumption that all sub-keys are

75
00:03:09,519 --> 00:03:13,040
independent and uniform

76
00:03:13,040 --> 00:03:15,920
however for any round larger f3

77
00:03:15,920 --> 00:03:18,159
nothing was understood in terms of

78
00:03:18,159 --> 00:03:20,480
either reducing the mass key net or the

79
00:03:20,480 --> 00:03:22,959
number of permutations

80
00:03:22,959 --> 00:03:26,080
while practical cybers have large rounds

81
00:03:26,080 --> 00:03:27,519
for example

82
00:03:27,519 --> 00:03:30,159
aes has at least 10 rounds

83
00:03:30,159 --> 00:03:34,560
and percent has up to 31 rounds

84
00:03:35,120 --> 00:03:37,200
in this work we focus on the key

85
00:03:37,200 --> 00:03:38,640
schedules

86
00:03:38,640 --> 00:03:40,799
in particular we make the first step

87
00:03:40,799 --> 00:03:43,440
towards reducing mass kinase and

88
00:03:43,440 --> 00:03:45,840
understanding the security of ksc with

89
00:03:45,840 --> 00:03:48,879
coordinated sub-keys for large rounds

90
00:03:48,879 --> 00:03:51,120
on the assumption that the permutations

91
00:03:51,120 --> 00:03:54,000
are independent

92
00:03:54,560 --> 00:03:56,080
we focus on studying linear key

93
00:03:56,080 --> 00:04:00,640
schedules over field f2 to there

94
00:04:00,640 --> 00:04:02,879
our first result provides a t must one

95
00:04:02,879 --> 00:04:05,519
wise key schedule that saves two embed

96
00:04:05,519 --> 00:04:06,799
master key

97
00:04:06,799 --> 00:04:10,159
for arbitrary round t

98
00:04:10,640 --> 00:04:13,040
we also move one step further by showing

99
00:04:13,040 --> 00:04:15,439
months two wise key schedule that saves

100
00:04:15,439 --> 00:04:18,798
300 master key for the kscs having at

101
00:04:18,798 --> 00:04:20,720
least 8 rounds

102
00:04:20,720 --> 00:04:24,720
while maintaining the optimal security

103
00:04:24,880 --> 00:04:26,880
to prove the results we propose

104
00:04:26,880 --> 00:04:28,960
generalizations over the sum capture

105
00:04:28,960 --> 00:04:31,759
theorem by chain echo

106
00:04:31,759 --> 00:04:34,400
we also improve the sub key dependency

107
00:04:34,400 --> 00:04:36,720
in the good transcript analysis by quang

108
00:04:36,720 --> 00:04:38,000
and tesero

109
00:04:38,000 --> 00:04:42,919
from t ys to t minus 2y

110
00:04:43,520 --> 00:04:45,759
in the rest of the talk i will first

111
00:04:45,759 --> 00:04:48,240
describe the classical kc analysis

112
00:04:48,240 --> 00:04:49,680
framework

113
00:04:49,680 --> 00:04:51,440
the framework is based on transcript

114
00:04:51,440 --> 00:04:52,639
analysis

115
00:04:52,639 --> 00:04:54,720
when we have the transcripts recall the

116
00:04:54,720 --> 00:04:57,520
behavior of the adolescent

117
00:04:57,520 --> 00:04:59,600
and we partition all the transcripts

118
00:04:59,600 --> 00:05:01,680
into either bad transcripts or good

119
00:05:01,680 --> 00:05:03,840
transcripts

120
00:05:03,840 --> 00:05:06,240
we will primarily focus on the bad

121
00:05:06,240 --> 00:05:08,720
transcript analysis

122
00:05:08,720 --> 00:05:10,560
when we first revisit how the sum

123
00:05:10,560 --> 00:05:12,639
capture quantity is used for bad

124
00:05:12,639 --> 00:05:15,440
transcript in two round case by turn and

125
00:05:15,440 --> 00:05:17,360
on

126
00:05:17,360 --> 00:05:19,520
then we propose the generalized sum

127
00:05:19,520 --> 00:05:21,759
capture quantities with either one or

128
00:05:21,759 --> 00:05:23,520
two constraints

129
00:05:23,520 --> 00:05:27,280
and present their upper bounds

130
00:05:27,440 --> 00:05:30,160
in good transfer analysis due to the

131
00:05:30,160 --> 00:05:32,400
time limit i will only provide the

132
00:05:32,400 --> 00:05:35,280
number statement

133
00:05:36,479 --> 00:05:38,800
to model security of ksc

134
00:05:38,800 --> 00:05:40,880
we consider an adversary that tries to

135
00:05:40,880 --> 00:05:44,080
distinguish two worlds

136
00:05:44,080 --> 00:05:46,400
in the real world nyado survey has

137
00:05:46,400 --> 00:05:48,800
access to the public random permutations

138
00:05:48,800 --> 00:05:50,479
i1 to pi t

139
00:05:50,479 --> 00:05:52,479
and the kc construction

140
00:05:52,479 --> 00:05:54,810
which is built on the permutations

141
00:05:54,810 --> 00:05:56,400
[Music]

142
00:05:56,400 --> 00:05:58,400
in ideal world the other survey can

143
00:05:58,400 --> 00:06:01,039
access the public permutations and

144
00:06:01,039 --> 00:06:03,759
additionally a random permutation p

145
00:06:03,759 --> 00:06:05,280
which is independent from all the

146
00:06:05,280 --> 00:06:07,520
permutations

147
00:06:07,520 --> 00:06:10,319
in both worlds the other three can query

148
00:06:10,319 --> 00:06:12,720
any permutations in both forward and

149
00:06:12,720 --> 00:06:15,120
backward directions

150
00:06:15,120 --> 00:06:19,039
the security of ksc against the addre is

151
00:06:19,039 --> 00:06:21,199
defined as the advantage of the other

152
00:06:21,199 --> 00:06:25,360
survey distinguishing these two worlds

153
00:06:26,240 --> 00:06:28,639
to prove an indistinguishability result

154
00:06:28,639 --> 00:06:30,800
we follow the framework used in previous

155
00:06:30,800 --> 00:06:32,840
works and operate on the transcript

156
00:06:32,840 --> 00:06:35,919
level given added survey a that

157
00:06:35,919 --> 00:06:38,160
interacts in either the real world or

158
00:06:38,160 --> 00:06:40,400
the ideal world

159
00:06:40,400 --> 00:06:42,720
we connect all the queries submitted to

160
00:06:42,720 --> 00:06:44,160
the cypher construction or the

161
00:06:44,160 --> 00:06:46,319
independent random permutation

162
00:06:46,319 --> 00:06:49,280
into a set qe

163
00:06:49,280 --> 00:06:51,039
and we connect all the queries to a

164
00:06:51,039 --> 00:06:53,440
public random permutations pi i

165
00:06:53,440 --> 00:06:56,560
into a set qi

166
00:06:56,720 --> 00:07:00,160
then we put the query record sets qe q1

167
00:07:00,160 --> 00:07:01,440
to qt

168
00:07:01,440 --> 00:07:03,120
and randomly sample the master key

169
00:07:03,120 --> 00:07:04,160
together

170
00:07:04,160 --> 00:07:07,280
as a transcript tau generated by a

171
00:07:07,280 --> 00:07:10,400
during the interaction

172
00:07:11,520 --> 00:07:13,599
after defining the transcripts the

173
00:07:13,599 --> 00:07:15,919
classical approach is to partition them

174
00:07:15,919 --> 00:07:17,599
into bad transcripts and good

175
00:07:17,599 --> 00:07:19,520
transcripts

176
00:07:19,520 --> 00:07:22,080
from the part of bad transcript analysis

177
00:07:22,080 --> 00:07:23,520
our goal is to upper bound the

178
00:07:23,520 --> 00:07:26,240
probability of random transcript x ido

179
00:07:26,240 --> 00:07:28,400
being bad

180
00:07:28,400 --> 00:07:31,120
where x ido is generated from the other

181
00:07:31,120 --> 00:07:33,199
server a when interacting the ideal

182
00:07:33,199 --> 00:07:35,039
world

183
00:07:35,039 --> 00:07:36,960
for the good transcript we follow the

184
00:07:36,960 --> 00:07:40,240
expectation method proposed by foreign

185
00:07:40,240 --> 00:07:42,560
to pick a function g that is defined

186
00:07:42,560 --> 00:07:44,639
over r transcripts

187
00:07:44,639 --> 00:07:48,160
we need g to satisfy two requirements

188
00:07:48,160 --> 00:07:51,280
first g must be non-negative

189
00:07:51,280 --> 00:07:54,080
second for any good transcript tau the

190
00:07:54,080 --> 00:07:56,800
quantity one minus g tau should provide

191
00:07:56,800 --> 00:07:59,039
a lower bound for the ratio of the

192
00:07:59,039 --> 00:08:01,440
probability for obtaining tao in a real

193
00:08:01,440 --> 00:08:02,479
world

194
00:08:02,479 --> 00:08:04,479
to the probability of obtaining tau in

195
00:08:04,479 --> 00:08:07,199
ideal world

196
00:08:07,199 --> 00:08:08,960
having g satisfying above two

197
00:08:08,960 --> 00:08:10,160
requirements

198
00:08:10,160 --> 00:08:12,400
we further want to pick a good g that

199
00:08:12,400 --> 00:08:14,560
gives the optimal bond on the

200
00:08:14,560 --> 00:08:18,800
expectation of g x id

201
00:08:20,000 --> 00:08:21,840
the final bound

202
00:08:21,840 --> 00:08:24,160
of the advantage directly follows from

203
00:08:24,160 --> 00:08:27,840
summing the two upper bounds together

204
00:08:29,280 --> 00:08:31,680
here we also use the bad transcript

205
00:08:31,680 --> 00:08:34,880
definition from previous works

206
00:08:34,880 --> 00:08:36,799
for any transcript channel we can

207
00:08:36,799 --> 00:08:39,440
represent it into a negative graph that

208
00:08:39,440 --> 00:08:43,679
resembles the construction of kac

209
00:08:43,679 --> 00:08:45,760
the neighboring layers inside the public

210
00:08:45,760 --> 00:08:47,680
permutations part i

211
00:08:47,680 --> 00:08:50,080
the vertices are connected by edges

212
00:08:50,080 --> 00:08:55,040
determined by the query's record set qi

213
00:08:55,040 --> 00:08:57,040
and the edges between permutations

214
00:08:57,040 --> 00:09:00,720
represent the generated sub keys

215
00:09:00,720 --> 00:09:02,560
now we move to identifying the set of

216
00:09:02,560 --> 00:09:04,480
transcripts that is very easy to

217
00:09:04,480 --> 00:09:06,240
distinguish between the real world and

218
00:09:06,240 --> 00:09:07,860
the ideal world

219
00:09:07,860 --> 00:09:09,360
[Music]

220
00:09:09,360 --> 00:09:11,920
here we look at the pair of vertices x y

221
00:09:11,920 --> 00:09:13,200
in qe

222
00:09:13,200 --> 00:09:15,600
which corresponds to a recorded query

223
00:09:15,600 --> 00:09:17,200
from the other survey to a cypher

224
00:09:17,200 --> 00:09:18,880
construction

225
00:09:18,880 --> 00:09:20,640
the goal is to check whether the pair of

226
00:09:20,640 --> 00:09:22,399
cypher query xy

227
00:09:22,399 --> 00:09:23,920
is consistent to the underlying

228
00:09:23,920 --> 00:09:26,160
permutation queries and the generated

229
00:09:26,160 --> 00:09:28,719
sub keys

230
00:09:28,800 --> 00:09:32,720
we start at cipher inputs vertex x

231
00:09:32,720 --> 00:09:34,720
and move to the rightmost mutual layer

232
00:09:34,720 --> 00:09:38,800
for x giving us a path

233
00:09:38,800 --> 00:09:40,480
from the corresponding simple output

234
00:09:40,480 --> 00:09:41,839
vertex y

235
00:09:41,839 --> 00:09:44,800
we also obtain a path by moving to y's

236
00:09:44,800 --> 00:09:48,240
left most reachable layer

237
00:09:48,560 --> 00:09:50,720
if it happens that the index of the

238
00:09:50,720 --> 00:09:53,200
rightmost which one layer from x

239
00:09:53,200 --> 00:09:56,160
is no less than an inverse of the next

240
00:09:56,160 --> 00:09:58,480
most richmond layer from y

241
00:09:58,480 --> 00:10:01,360
for some pair of x y and q e

242
00:10:01,360 --> 00:10:03,279
then such transcript is easy to

243
00:10:03,279 --> 00:10:05,920
distinguish between real and the idea

244
00:10:05,920 --> 00:10:08,240
because in the real world the two paths

245
00:10:08,240 --> 00:10:12,079
of x and y must connect to be a chain

246
00:10:12,079 --> 00:10:14,160
while in the ideal world with high

247
00:10:14,160 --> 00:10:17,440
probability the two paths are disjoint

248
00:10:17,440 --> 00:10:20,000
implanting a cycle query is inconsistent

249
00:10:20,000 --> 00:10:22,399
to non-denying permutation queries

250
00:10:22,399 --> 00:10:25,040
and the generated sub-keys

251
00:10:25,040 --> 00:10:27,360
hence we call such transcript as a bad

252
00:10:27,360 --> 00:10:30,000
transcript

253
00:10:31,360 --> 00:10:33,120
given we have defined what a bad

254
00:10:33,120 --> 00:10:34,560
transcript is

255
00:10:34,560 --> 00:10:36,480
we move to review how to derive the

256
00:10:36,480 --> 00:10:38,959
probability upper bound of obtaining a

257
00:10:38,959 --> 00:10:41,200
bad transcript in an ideal world

258
00:10:41,200 --> 00:10:45,360
on the independent sub-key assumption

259
00:10:45,360 --> 00:10:48,399
for t run ksc we can categorize change

260
00:10:48,399 --> 00:10:50,480
into two plus one types

261
00:10:50,480 --> 00:10:52,560
with each type determined by the layer

262
00:10:52,560 --> 00:10:54,880
index of the rightmost reachable vertex

263
00:10:54,880 --> 00:10:56,720
from x

264
00:10:56,720 --> 00:10:59,360
the solid black arrow denotes that the

265
00:10:59,360 --> 00:11:01,519
corresponding sub key connects the two

266
00:11:01,519 --> 00:11:04,320
queries input output tubo between two

267
00:11:04,320 --> 00:11:06,560
public permutations on cypher

268
00:11:06,560 --> 00:11:08,160
construction

269
00:11:08,160 --> 00:11:10,959
while the dotted red arrow denotes the

270
00:11:10,959 --> 00:11:12,959
position where the path may fail to

271
00:11:12,959 --> 00:11:14,959
connect

272
00:11:14,959 --> 00:11:18,720
if x fix a pair of x y from the cipher

273
00:11:18,720 --> 00:11:20,480
query set qe

274
00:11:20,480 --> 00:11:23,440
and starts from x to go rightward and y

275
00:11:23,440 --> 00:11:25,600
to go leftward

276
00:11:25,600 --> 00:11:28,800
each time we sample some key edge it has

277
00:11:28,800 --> 00:11:32,079
probability at most q over 2 to the n to

278
00:11:32,079 --> 00:11:34,160
heat at a query tuple the next

279
00:11:34,160 --> 00:11:36,160
permutation

280
00:11:36,160 --> 00:11:38,720
in this case we have ts of key's edges

281
00:11:38,720 --> 00:11:40,000
to go

282
00:11:40,000 --> 00:11:42,720
and we ended up to have the probability

283
00:11:42,720 --> 00:11:45,040
being 2 over 2 to the n

284
00:11:45,040 --> 00:11:47,920
to the power of t

285
00:11:48,000 --> 00:11:50,560
taking a union bound over all pairs of x

286
00:11:50,560 --> 00:11:51,360
y

287
00:11:51,360 --> 00:11:53,839
will obtain upper bound of q to the t

288
00:11:53,839 --> 00:11:54,959
plus 1

289
00:11:54,959 --> 00:11:57,040
over 2 to the nt

290
00:11:57,040 --> 00:11:59,279
which matches optimal concrete security

291
00:11:59,279 --> 00:12:02,000
of khc

292
00:12:02,639 --> 00:12:05,440
however such analysis can be performed

293
00:12:05,440 --> 00:12:07,680
only in the case when the sub keys are

294
00:12:07,680 --> 00:12:11,360
at least twice independent and uniform

295
00:12:11,360 --> 00:12:13,360
so we need techniques to go beyond this

296
00:12:13,360 --> 00:12:15,839
barrier

297
00:12:16,720 --> 00:12:18,560
the first step that go beyond the

298
00:12:18,560 --> 00:12:20,639
keywords independence barrier was

299
00:12:20,639 --> 00:12:23,120
proposed by chen and all when i studied

300
00:12:23,120 --> 00:12:25,600
the two-round ksc

301
00:12:25,600 --> 00:12:27,440
here we look at the two-run ksc

302
00:12:27,440 --> 00:12:29,680
construction with our two independent

303
00:12:29,680 --> 00:12:31,360
random permutations

304
00:12:31,360 --> 00:12:33,600
with all these sub-keys being identical

305
00:12:33,600 --> 00:12:36,720
to the un-bit master key

306
00:12:36,720 --> 00:12:38,399
in run kac

307
00:12:38,399 --> 00:12:40,240
there are three types of chains for a

308
00:12:40,240 --> 00:12:42,639
bad transcript

309
00:12:42,639 --> 00:12:44,720
here we focus on third type

310
00:12:44,720 --> 00:12:47,120
where the cyber query input x can reach

311
00:12:47,120 --> 00:12:49,760
to the output point v2 of the second

312
00:12:49,760 --> 00:12:51,839
permutation we are going through the

313
00:12:51,839 --> 00:12:53,600
edges

314
00:12:53,600 --> 00:12:56,079
we want to count how many master key k

315
00:12:56,079 --> 00:12:59,040
can lead to such type of back chain

316
00:12:59,040 --> 00:13:01,360
in particular you can fix the query

317
00:13:01,360 --> 00:13:04,959
records qe q1 q2

318
00:13:04,959 --> 00:13:06,399
in this case

319
00:13:06,399 --> 00:13:08,560
with the master key case bad

320
00:13:08,560 --> 00:13:10,800
if it generates a sub keys that connects

321
00:13:10,800 --> 00:13:13,200
some query cipher input x

322
00:13:13,200 --> 00:13:15,120
to some clear with the input output pair

323
00:13:15,120 --> 00:13:18,800
u1 v1 of permutation pi 1

324
00:13:18,800 --> 00:13:21,839
then do some mutual v2 of permutation pi

325
00:13:21,839 --> 00:13:24,079
2

326
00:13:24,160 --> 00:13:26,079
given our sub keys being identical to

327
00:13:26,079 --> 00:13:27,519
masking k

328
00:13:27,519 --> 00:13:31,120
the condition implies that x xor u1

329
00:13:31,120 --> 00:13:35,639
equals v1 xor u2

330
00:13:36,320 --> 00:13:39,120
however it is unwieldy to directly count

331
00:13:39,120 --> 00:13:41,040
the number of bad keys

332
00:13:41,040 --> 00:13:43,519
instead chain at all consider the

333
00:13:43,519 --> 00:13:46,800
quantity mu that counts all tuples

334
00:13:46,800 --> 00:13:52,560
satisfying x xo mu1 equals v1 xor u2

335
00:13:52,560 --> 00:13:55,040
here mu x as an upper bound over the

336
00:13:55,040 --> 00:13:57,600
number of bat keys since all bad keys

337
00:13:57,600 --> 00:13:59,360
should have the corresponding tuples

338
00:13:59,360 --> 00:14:02,480
satisfy the equality

339
00:14:02,480 --> 00:14:04,880
and this equality is exactly the capture

340
00:14:04,880 --> 00:14:07,440
sum of the tuples

341
00:14:07,440 --> 00:14:10,320
in quantity mu we have up to 2 cubed

342
00:14:10,320 --> 00:14:12,160
tuples

343
00:14:12,160 --> 00:14:15,440
however given the capture sum constraint

344
00:14:15,440 --> 00:14:17,680
what we would expect is that

345
00:14:17,680 --> 00:14:19,920
roughly 1 over 2 to the n fraction of

346
00:14:19,920 --> 00:14:24,479
the tuples satisfy the equality

347
00:14:24,639 --> 00:14:26,639
and if this is true

348
00:14:26,639 --> 00:14:28,800
then it implies that the probability of

349
00:14:28,800 --> 00:14:30,480
getting a bad transcript

350
00:14:30,480 --> 00:14:32,320
should match an optimal security upper

351
00:14:32,320 --> 00:14:36,240
bound for two round k and c

352
00:14:37,920 --> 00:14:40,160
so our first result can be considered as

353
00:14:40,160 --> 00:14:42,240
a direct generalization of the result by

354
00:14:42,240 --> 00:14:45,040
training at all here we consider the t

355
00:14:45,040 --> 00:14:47,199
minus one wise key schedule

356
00:14:47,199 --> 00:14:49,760
where the master key can be interpreted

357
00:14:49,760 --> 00:14:52,240
as a vector which consists of t minus

358
00:14:52,240 --> 00:14:57,279
one field elements if f two to there

359
00:14:57,360 --> 00:14:59,199
the key schedule algorithm is to

360
00:14:59,199 --> 00:15:01,519
directly apply a measure say to master

361
00:15:01,519 --> 00:15:02,959
key vector

362
00:15:02,959 --> 00:15:05,040
and obtain the sub keys

363
00:15:05,040 --> 00:15:07,519
which can also be viewed as a vector of

364
00:15:07,519 --> 00:15:12,720
t plus one field elements in f2 to the n

365
00:15:12,720 --> 00:15:14,800
the requirement that we impose on the

366
00:15:14,800 --> 00:15:18,399
matrix a is that it must give t minus

367
00:15:18,399 --> 00:15:21,760
one y's independent and uniform sub keys

368
00:15:21,760 --> 00:15:24,480
or in other words n t minus one rows of

369
00:15:24,480 --> 00:15:27,760
matrix a form a sub matrix of rank t

370
00:15:27,760 --> 00:15:30,399
minus 1.

371
00:15:31,680 --> 00:15:33,920
to perform the back transcript analysis

372
00:15:33,920 --> 00:15:36,800
for t minus 1y's linear key schedule

373
00:15:36,800 --> 00:15:39,120
we can similarly define a sum capture

374
00:15:39,120 --> 00:15:41,600
quantity that counts the tuples and have

375
00:15:41,600 --> 00:15:44,079
t sub keys involved

376
00:15:44,079 --> 00:15:46,079
here the sum capital quantity contains

377
00:15:46,079 --> 00:15:49,759
query records for t minus 1 permutations

378
00:15:49,759 --> 00:15:51,839
and two additional sets

379
00:15:51,839 --> 00:15:55,680
with all of them having size q

380
00:15:55,680 --> 00:15:57,839
the quality constraint involves all the

381
00:15:57,839 --> 00:16:00,639
involved t sub keys

382
00:16:00,639 --> 00:16:03,360
with these coefficients cis determined

383
00:16:03,360 --> 00:16:05,839
by key schedule matrix a

384
00:16:05,839 --> 00:16:09,199
it essentially says that any subset of t

385
00:16:09,199 --> 00:16:12,000
minus one sub keys uniquely fix the

386
00:16:12,000 --> 00:16:15,199
remaining one sub key

387
00:16:16,240 --> 00:16:18,880
for the defined sum capture quantity we

388
00:16:18,880 --> 00:16:22,399
show that if the vector of coefficient c

389
00:16:22,399 --> 00:16:24,480
comes from the t minus one last linear

390
00:16:24,480 --> 00:16:25,920
key schedule

391
00:16:25,920 --> 00:16:28,320
then for modulating large q

392
00:16:28,320 --> 00:16:30,560
this high probability we have the

393
00:16:30,560 --> 00:16:32,959
quantity upper bounded by q to the t

394
00:16:32,959 --> 00:16:37,120
plus one over two to the n which implies

395
00:16:37,120 --> 00:16:39,920
an optimal output bound for obtaining a

396
00:16:39,920 --> 00:16:43,759
bad transcript in ideal world

397
00:16:43,759 --> 00:16:48,000
and number is proved by fourier analysis

398
00:16:49,440 --> 00:16:51,680
our second result studies the t-minus

399
00:16:51,680 --> 00:16:53,680
two-white ski schedule

400
00:16:53,680 --> 00:16:55,680
while the master key has been shortened

401
00:16:55,680 --> 00:16:59,839
to t minus two times a bit

402
00:17:00,079 --> 00:17:02,720
the key schedule matrix a now has one

403
00:17:02,720 --> 00:17:05,280
fewer column

404
00:17:05,280 --> 00:17:07,919
and now we require a to give t mass two

405
00:17:07,919 --> 00:17:12,240
y's independent and uniform sub keys

406
00:17:13,520 --> 00:17:15,919
we still have some capture quantity that

407
00:17:15,919 --> 00:17:19,039
gets cheap sub keys involved

408
00:17:19,039 --> 00:17:21,359
however now we have two equality

409
00:17:21,359 --> 00:17:23,679
constraints

410
00:17:23,679 --> 00:17:26,079
both constraints are again determined by

411
00:17:26,079 --> 00:17:28,480
the key schedule matrix a

412
00:17:28,480 --> 00:17:30,480
essentially the constraints are saying

413
00:17:30,480 --> 00:17:33,679
that any subset of tmas 2 sub keys

414
00:17:33,679 --> 00:17:36,000
uniquely fix the miracleman into some

415
00:17:36,000 --> 00:17:38,320
keys

416
00:17:39,600 --> 00:17:41,840
however the proof of the true constraint

417
00:17:41,840 --> 00:17:43,919
some capture quantity turns out to be

418
00:17:43,919 --> 00:17:45,520
much more involved

419
00:17:45,520 --> 00:17:47,600
and we were able to prove only a

420
00:17:47,600 --> 00:17:50,080
suboptimal bound represented by two

421
00:17:50,080 --> 00:17:52,480
terms

422
00:17:53,280 --> 00:17:55,440
using the sum capture quantity bound we

423
00:17:55,440 --> 00:17:57,039
can derive an upper bound for the

424
00:17:57,039 --> 00:17:58,880
probability of obtaining a bad

425
00:17:58,880 --> 00:18:01,840
transcript in ideal world

426
00:18:01,840 --> 00:18:03,520
we can observe that

427
00:18:03,520 --> 00:18:04,720
term 1

428
00:18:04,720 --> 00:18:07,760
all workplace gives optimal security for

429
00:18:07,760 --> 00:18:11,280
q for any round t

430
00:18:11,760 --> 00:18:14,559
however term 2 is the bottleneck and

431
00:18:14,559 --> 00:18:17,200
implies optimal security only when the

432
00:18:17,200 --> 00:18:21,360
ksc has athlete's a rounds

433
00:18:23,520 --> 00:18:25,039
after performing the bad transcript

434
00:18:25,039 --> 00:18:27,600
analysis of the t max1ys

435
00:18:27,600 --> 00:18:29,600
two ascii schedules

436
00:18:29,600 --> 00:18:31,840
what is national is a good transcript

437
00:18:31,840 --> 00:18:33,679
analysis

438
00:18:33,679 --> 00:18:36,160
here we directly state the number that

439
00:18:36,160 --> 00:18:39,120
applies to both key schedules

440
00:18:39,120 --> 00:18:40,960
the number is very similar to what was

441
00:18:40,960 --> 00:18:43,039
stated by finance several

442
00:18:43,039 --> 00:18:46,240
this optimal bound is still maintained

443
00:18:46,240 --> 00:18:48,799
the only difference here is that the

444
00:18:48,799 --> 00:18:50,960
requirement for sub-key dependency has

445
00:18:50,960 --> 00:18:53,760
been weakened from t wise to t minus two

446
00:18:53,760 --> 00:18:55,760
y's

447
00:18:55,760 --> 00:18:57,679
finally by putting both analysis

448
00:18:57,679 --> 00:18:59,679
together we conclude the optimal

449
00:18:59,679 --> 00:19:02,320
securities for both t minus one y's and

450
00:19:02,320 --> 00:19:05,840
t minus two ascii schedules

451
00:19:06,799 --> 00:19:09,360
in conclusion we studied the security of

452
00:19:09,360 --> 00:19:11,360
ksc on the independence round

453
00:19:11,360 --> 00:19:14,960
permutations and currency sub keys

454
00:19:14,960 --> 00:19:16,960
we show that the t minus one wise key

455
00:19:16,960 --> 00:19:19,760
schedules can save two embeds in master

456
00:19:19,760 --> 00:19:20,720
key

457
00:19:20,720 --> 00:19:23,120
and the team has two wise key schedules

458
00:19:23,120 --> 00:19:24,880
save 3m bits

459
00:19:24,880 --> 00:19:29,360
when the round t is at least 8.

460
00:19:30,720 --> 00:19:32,799
however there are still many open

461
00:19:32,799 --> 00:19:35,679
problems in 7k c security with reduced

462
00:19:35,679 --> 00:19:37,360
independence

463
00:19:37,360 --> 00:19:39,520
one problem that still remains open is

464
00:19:39,520 --> 00:19:42,400
to minimize the free run kac

465
00:19:42,400 --> 00:19:44,720
since our team has two wise key schedule

466
00:19:44,720 --> 00:19:47,360
tightness result does not apply to the

467
00:19:47,360 --> 00:19:50,880
case when t equals three

468
00:19:50,880 --> 00:19:53,120
in another aspect is to see where the

469
00:19:53,120 --> 00:19:55,679
tightness result can be extended to

470
00:19:55,679 --> 00:19:58,400
beyond tma's two wise key schedule for

471
00:19:58,400 --> 00:20:00,880
notch t

472
00:20:00,880 --> 00:20:03,120
for more details please check out our

473
00:20:03,120 --> 00:20:04,240
paper

474
00:20:04,240 --> 00:20:09,240
and that's all for the talk thank you

