1
00:00:01,120 --> 00:00:02,480
hello everyone today i'll tell you how

2
00:00:02,480 --> 00:00:04,000
to build active weed-based encryption

3
00:00:04,000 --> 00:00:05,520
for turing machines

4
00:00:05,520 --> 00:00:07,279
from the general assumption of identity

5
00:00:07,279 --> 00:00:08,960
based encryption in the boundary

6
00:00:08,960 --> 00:00:10,800
collision model this is a joint work

7
00:00:10,800 --> 00:00:12,880
with the devon and brandt

8
00:00:12,880 --> 00:00:14,320
so let's start by talking about

9
00:00:14,320 --> 00:00:16,800
attribute-based encryption the notion of

10
00:00:16,800 --> 00:00:18,720
attribute-based adoption was originally

11
00:00:18,720 --> 00:00:20,880
defined in 2005 and is a powerful

12
00:00:20,880 --> 00:00:22,480
generalization of public encryption

13
00:00:22,480 --> 00:00:24,400
which allows fine-grained access over

14
00:00:24,400 --> 00:00:26,400
encrypted data

15
00:00:26,400 --> 00:00:27,840
it can be understood to be the following

16
00:00:27,840 --> 00:00:29,840
example suppose we have two parties

17
00:00:29,840 --> 00:00:31,840
alice and bob bob has some secret key

18
00:00:31,840 --> 00:00:34,399
alice has a public key and alice wants

19
00:00:34,399 --> 00:00:36,399
to encrypt the message to some sense of

20
00:00:36,399 --> 00:00:39,360
data m and a set of attributes such that

21
00:00:39,360 --> 00:00:41,120
anybody who satisfies these attributes

22
00:00:41,120 --> 00:00:42,480
should be able to recover the message

23
00:00:42,480 --> 00:00:44,559
and from the encrypted data

24
00:00:44,559 --> 00:00:46,399
so alice creates this particular soft

25
00:00:46,399 --> 00:00:48,160
text and now there's a third party

26
00:00:48,160 --> 00:00:50,160
charlie and charlie wants to record this

27
00:00:50,160 --> 00:00:52,960
message m whenever it's policy f

28
00:00:52,960 --> 00:00:54,960
satisfies the underlying attribute so if

29
00:00:54,960 --> 00:00:56,879
f attribute is equal to 1 it wants to

30
00:00:56,879 --> 00:00:58,559
record the message ram

31
00:00:58,559 --> 00:01:00,960
now one way to solve this problem is

32
00:01:00,960 --> 00:01:02,640
charlie can simply send the side text

33
00:01:02,640 --> 00:01:04,799
over the world and prove that i am

34
00:01:04,799 --> 00:01:06,080
authorized to be decrypted that it is

35
00:01:06,080 --> 00:01:08,560
authorized to be decrypted and bob will

36
00:01:08,560 --> 00:01:10,960
decrypt the scientists and give back uh

37
00:01:10,960 --> 00:01:13,600
charlie the increment message if charlie

38
00:01:13,600 --> 00:01:15,759
satisfies the attributes

39
00:01:15,759 --> 00:01:17,280
while this is great it's very

40
00:01:17,280 --> 00:01:19,680
inefficient and it's sub-optimal

41
00:01:19,680 --> 00:01:22,159
and we basically provides a brilliant

42
00:01:22,159 --> 00:01:24,479
way of solving this problem in which

43
00:01:24,479 --> 00:01:26,159
attribute based interruption says bob

44
00:01:26,159 --> 00:01:28,159
can actually create some partial secret

45
00:01:28,159 --> 00:01:30,159
keys called predicate keys for the

46
00:01:30,159 --> 00:01:32,240
function f corresponding to child such

47
00:01:32,240 --> 00:01:35,200
that using the secret key skf

48
00:01:35,200 --> 00:01:37,600
the charlie can decrypt the site text as

49
00:01:37,600 --> 00:01:40,000
long as it is authorized to decrypt as

50
00:01:40,000 --> 00:01:43,119
long as f of attribute is equal to one

51
00:01:43,119 --> 00:01:44,479
basically attribute basis function

52
00:01:44,479 --> 00:01:46,479
provides finding access over encrypted

53
00:01:46,479 --> 00:01:48,720
data and it solves this problem without

54
00:01:48,720 --> 00:01:50,479
outsourcing the computation to bob and

55
00:01:50,479 --> 00:01:52,000
even it lets charlie perform this

56
00:01:52,000 --> 00:01:55,520
computation when bob is offline

57
00:01:55,520 --> 00:01:57,439
now syntactically attribute description

58
00:01:57,439 --> 00:01:59,360
can be understood as follows we have

59
00:01:59,360 --> 00:02:01,040
four algorithms the setup algorithm

60
00:02:01,040 --> 00:02:03,040
samples a pair of master public and

61
00:02:03,040 --> 00:02:05,280
master secret key using the master

62
00:02:05,280 --> 00:02:07,200
public key anybody can encrypt the

63
00:02:07,200 --> 00:02:10,000
message m under a set of attributes and

64
00:02:10,000 --> 00:02:11,760
it's the master secret key anybody can

65
00:02:11,760 --> 00:02:13,040
create

66
00:02:13,040 --> 00:02:14,800
a functional secret key or a predicate

67
00:02:14,800 --> 00:02:16,800
secret key for any function f such that

68
00:02:16,800 --> 00:02:18,720
combining the secret key and the

69
00:02:18,720 --> 00:02:20,879
ciphertext one can recover the message

70
00:02:20,879 --> 00:02:23,440
and then prepare value

71
00:02:23,440 --> 00:02:26,000
as long as the the policy satisfies the

72
00:02:26,000 --> 00:02:27,599
underlying attributes encrypted inside

73
00:02:27,599 --> 00:02:29,599
the ciphertext

74
00:02:29,599 --> 00:02:32,000
now naturally for security the idea is

75
00:02:32,000 --> 00:02:34,160
as follows suppose i give you a self

76
00:02:34,160 --> 00:02:35,920
takes that encrypts a message under set

77
00:02:35,920 --> 00:02:37,920
of attributes and you also have

78
00:02:37,920 --> 00:02:39,280
polynomially many secret keys for

79
00:02:39,280 --> 00:02:40,640
different functions for many different

80
00:02:40,640 --> 00:02:43,840
functions f1 f double fq

81
00:02:43,840 --> 00:02:46,000
now attribute description says the

82
00:02:46,000 --> 00:02:47,920
message n that was integrated will be

83
00:02:47,920 --> 00:02:50,239
hidden as long as all the policies that

84
00:02:50,239 --> 00:02:51,440
you have for

85
00:02:51,440 --> 00:02:52,720
basically all the policies for which you

86
00:02:52,720 --> 00:02:54,239
have a secret key for

87
00:02:54,239 --> 00:02:55,680
none of those policies satisfies the

88
00:02:55,680 --> 00:02:57,360
attributes because if some of the policy

89
00:02:57,360 --> 00:02:58,480
satisfies the attributes then you can

90
00:02:58,480 --> 00:03:00,000
run the decryption algorithm and recover

91
00:03:00,000 --> 00:03:02,239
the messenger but if you don't have any

92
00:03:02,239 --> 00:03:03,920
of the authorized secretaries of the

93
00:03:03,920 --> 00:03:06,400
accepting secret keys then the message m

94
00:03:06,400 --> 00:03:08,879
should be hidden from you

95
00:03:08,879 --> 00:03:11,519
and this is uh gives extreme power of

96
00:03:11,519 --> 00:03:13,360
fine grained access of integra data

97
00:03:13,360 --> 00:03:15,519
because now you can provide

98
00:03:15,519 --> 00:03:17,680
partial secret keys but also guarantee

99
00:03:17,680 --> 00:03:20,080
security in presence of

100
00:03:20,080 --> 00:03:23,599
revealing certain partial secret keys

101
00:03:23,599 --> 00:03:24,640
now

102
00:03:24,640 --> 00:03:26,400
attribute description has been studied

103
00:03:26,400 --> 00:03:28,640
in two different models of computation

104
00:03:28,640 --> 00:03:30,959
for specifying the policy functions so

105
00:03:30,959 --> 00:03:32,879
typically the policy function can be

106
00:03:32,879 --> 00:03:34,720
specified either using a non-uniform

107
00:03:34,720 --> 00:03:36,000
computation class such as boolean

108
00:03:36,000 --> 00:03:38,080
formulas or circuits or using uniform

109
00:03:38,080 --> 00:03:40,319
functions such as uniform such as

110
00:03:40,319 --> 00:03:42,480
deterministic finite automata tuning

111
00:03:42,480 --> 00:03:45,440
machines ram computation and so on

112
00:03:45,440 --> 00:03:47,280
and the point is that in the uniform

113
00:03:47,280 --> 00:03:49,920
class of policies the attributes that

114
00:03:49,920 --> 00:03:51,760
the policy circuit is going on the

115
00:03:51,760 --> 00:03:54,000
policy function is going to

116
00:03:54,000 --> 00:03:55,599
read it's going to be fixed it's going

117
00:03:55,599 --> 00:03:57,040
to be a priority fixed whereas in

118
00:03:57,040 --> 00:03:58,879
uniform class we can actually handle an

119
00:03:58,879 --> 00:04:00,879
unbounded length of attributes

120
00:04:00,879 --> 00:04:04,239
and uniform classes are much more uh

121
00:04:04,239 --> 00:04:05,760
much more useful for practical

122
00:04:05,760 --> 00:04:07,519
applications

123
00:04:07,519 --> 00:04:09,439
so basically the main difference between

124
00:04:09,439 --> 00:04:11,040
these two models of computation for

125
00:04:11,040 --> 00:04:13,599
specifying the policies for secret keys

126
00:04:13,599 --> 00:04:15,040
is that

127
00:04:15,040 --> 00:04:17,279
we need a separate key for your

128
00:04:17,279 --> 00:04:19,358
non-uniform models because we have to

129
00:04:19,358 --> 00:04:20,959
specify a separate key for each

130
00:04:20,959 --> 00:04:23,280
different length of the attributes

131
00:04:23,280 --> 00:04:26,160
whereas in uniform classes you specify a

132
00:04:26,160 --> 00:04:28,960
single secret key and that can handle

133
00:04:28,960 --> 00:04:31,759
all unbound length attributes so uniform

134
00:04:31,759 --> 00:04:33,440
classes seem much more useful for

135
00:04:33,440 --> 00:04:35,600
practical applications such as

136
00:04:35,600 --> 00:04:37,600
uh suppose you have to give out a secret

137
00:04:37,600 --> 00:04:39,199
key in practice where

138
00:04:39,199 --> 00:04:42,160
the person has to perform of a firewall

139
00:04:42,160 --> 00:04:45,120
check and in that case you have to read

140
00:04:45,120 --> 00:04:47,199
a regular expression and depending upon

141
00:04:47,199 --> 00:04:49,759
the regular expression you read it and

142
00:04:49,759 --> 00:04:51,759
if your the regular expression satisfies

143
00:04:51,759 --> 00:04:53,280
your predicate then you can actually

144
00:04:53,280 --> 00:04:55,040
decrypt the message

145
00:04:55,040 --> 00:04:56,479
and there could be plenty many

146
00:04:56,479 --> 00:04:58,479
applications in which uniform models are

147
00:04:58,479 --> 00:05:01,919
much more useful in practice

148
00:05:01,919 --> 00:05:02,960
so

149
00:05:02,960 --> 00:05:05,199
despite uh or no i should not say

150
00:05:05,199 --> 00:05:07,759
despite but with all great progress in

151
00:05:07,759 --> 00:05:08,639
uh

152
00:05:08,639 --> 00:05:10,479
in the literature we have amazing

153
00:05:10,479 --> 00:05:12,960
results for building attribute based in

154
00:05:12,960 --> 00:05:14,639
the non-uniform as well as a uniform

155
00:05:14,639 --> 00:05:16,720
model from a wide variety of assumptions

156
00:05:16,720 --> 00:05:18,240
just buying in maps learning with

157
00:05:18,240 --> 00:05:20,960
letters multi-maps and so on

158
00:05:20,960 --> 00:05:23,199
but with all this progress we've seen

159
00:05:23,199 --> 00:05:25,199
that there is one commonality in all

160
00:05:25,199 --> 00:05:27,440
these results they need specific

161
00:05:27,440 --> 00:05:29,440
algebraic assumptions to sort of the

162
00:05:29,440 --> 00:05:31,120
most powerful notion of attribute-based

163
00:05:31,120 --> 00:05:33,039
encryption

164
00:05:33,039 --> 00:05:35,360
and further there is a large gap of

165
00:05:35,360 --> 00:05:37,840
feasibilities between uh for same

166
00:05:37,840 --> 00:05:40,000
assumptions between the two models the

167
00:05:40,000 --> 00:05:42,240
class of policies that we can actually

168
00:05:42,240 --> 00:05:45,199
uh encrypt or we can give c keys for in

169
00:05:45,199 --> 00:05:47,840
the non-uniforms model they are much

170
00:05:47,840 --> 00:05:50,560
more expressive we can basically uh

171
00:05:50,560 --> 00:05:52,160
build attribute based option for all

172
00:05:52,160 --> 00:05:54,479
circuits from learning errors forensing

173
00:05:54,479 --> 00:05:56,400
from bilinear maps and for all circuits

174
00:05:56,400 --> 00:05:58,240
again from multi-navs

175
00:05:58,240 --> 00:05:59,199
whereas

176
00:05:59,199 --> 00:06:01,440
in the uniform model

177
00:06:01,440 --> 00:06:03,440
we still do not have the best known the

178
00:06:03,440 --> 00:06:05,039
best possible results such as for tuning

179
00:06:05,039 --> 00:06:07,120
machines from standard assumptions such

180
00:06:07,120 --> 00:06:08,479
as bilinear maps and learning with

181
00:06:08,479 --> 00:06:09,600
errors

182
00:06:09,600 --> 00:06:11,199
and in this work we

183
00:06:11,199 --> 00:06:13,919
uh study whether we can actually close

184
00:06:13,919 --> 00:06:15,759
the gap between the uniform and

185
00:06:15,759 --> 00:06:17,919
non-uniform model and do we all always

186
00:06:17,919 --> 00:06:20,960
need specific algebraic assumptions

187
00:06:20,960 --> 00:06:22,720
so the question is consideration is that

188
00:06:22,720 --> 00:06:24,319
is there always a gap

189
00:06:24,319 --> 00:06:25,520
and can we actually use general

190
00:06:25,520 --> 00:06:28,479
assumptions to build uh uh develop the

191
00:06:28,479 --> 00:06:30,080
attribute-based intrusion for

192
00:06:30,080 --> 00:06:32,880
non-uniform modelers

193
00:06:32,880 --> 00:06:34,639
so in this work we proved the following

194
00:06:34,639 --> 00:06:36,080
issue we built an attribute based

195
00:06:36,080 --> 00:06:37,680
between scheme for the uniform model

196
00:06:37,680 --> 00:06:39,360
feeding machines from item based

197
00:06:39,360 --> 00:06:42,400
encryption in the bound collusion model

198
00:06:42,400 --> 00:06:44,319
and just to summarize

199
00:06:44,319 --> 00:06:45,840
the proof two theorems in this world we

200
00:06:45,840 --> 00:06:48,000
show that we provide a scheme that is

201
00:06:48,000 --> 00:06:49,840
non-adaptively secure against uk

202
00:06:49,840 --> 00:06:51,759
elections which use an a priority fixed

203
00:06:51,759 --> 00:06:52,639
uh

204
00:06:52,639 --> 00:06:54,800
parameter the system from identity based

205
00:06:54,800 --> 00:06:56,800
encryption and we also show that this

206
00:06:56,800 --> 00:06:59,440
can be upgraded to adaptive security in

207
00:06:59,440 --> 00:07:02,319
the random oracle model

208
00:07:02,319 --> 00:07:04,720
and one caveat of reconstruction is that

209
00:07:04,720 --> 00:07:06,400
although the encryption algorithm can

210
00:07:06,400 --> 00:07:09,280
handle unbounded length uh uh unbounded

211
00:07:09,280 --> 00:07:11,599
length attributes and a single secret

212
00:07:11,599 --> 00:07:12,960
key can work for unbounded length

213
00:07:12,960 --> 00:07:14,800
attributes the encryption algorithm

214
00:07:14,800 --> 00:07:16,720
still needs to dictate or just still

215
00:07:16,720 --> 00:07:19,199
need to sort of uh uh

216
00:07:19,199 --> 00:07:21,680
give out or decide or fix the the

217
00:07:21,680 --> 00:07:23,039
running time of the turing machine so

218
00:07:23,039 --> 00:07:25,039
the the kidding machine that is going to

219
00:07:25,039 --> 00:07:27,120
eventually be run on the word or the

220
00:07:27,120 --> 00:07:28,560
attribute that's interpreted inside this

221
00:07:28,560 --> 00:07:30,880
f text that has to be decided at the

222
00:07:30,880 --> 00:07:33,440
encryption pane

223
00:07:33,440 --> 00:07:35,360
now uh as us

224
00:07:35,360 --> 00:07:36,479
as a

225
00:07:36,479 --> 00:07:38,000
as a side application we would actually

226
00:07:38,000 --> 00:07:39,520
also be able to

227
00:07:39,520 --> 00:07:41,280
improve the notion of garbled rams and

228
00:07:41,280 --> 00:07:43,280
we were able to build kabul grams which

229
00:07:43,280 --> 00:07:45,599
much more finely in simulation security

230
00:07:45,599 --> 00:07:48,080
as uh it was crucial improving security

231
00:07:48,080 --> 00:07:51,520
of our attribute based function system

232
00:07:51,919 --> 00:07:52,879
now

233
00:07:52,879 --> 00:07:54,879
just to understand the result a little

234
00:07:54,879 --> 00:07:56,319
bit better

235
00:07:56,319 --> 00:07:58,240
in the bounded collusion model so so

236
00:07:58,240 --> 00:07:59,440
this is the basically the

237
00:07:59,440 --> 00:08:00,720
attribute-based nuclear security

238
00:08:00,720 --> 00:08:02,080
requirement which you say you get on the

239
00:08:02,080 --> 00:08:03,599
minimum number of secret keys and you

240
00:08:03,599 --> 00:08:05,680
should still be able to get security

241
00:08:05,680 --> 00:08:08,000
powered collision model says that

242
00:08:08,000 --> 00:08:10,879
security holds as long as you have at

243
00:08:10,879 --> 00:08:12,560
most queue collisions

244
00:08:12,560 --> 00:08:14,720
so if you don't have more than two keys

245
00:08:14,720 --> 00:08:16,639
then the security holds but if you have

246
00:08:16,639 --> 00:08:18,240
more than that then

247
00:08:18,240 --> 00:08:19,919
there are no more guarantees

248
00:08:19,919 --> 00:08:21,759
and use basically an a priority fixed

249
00:08:21,759 --> 00:08:25,199
parameter of the scheme itself

250
00:08:25,199 --> 00:08:28,000
and although bounded collision is uh

251
00:08:28,000 --> 00:08:30,960
restricted is a is is a weaker notion of

252
00:08:30,960 --> 00:08:32,799
security than say collision resistance

253
00:08:32,799 --> 00:08:34,479
or fully collision resistant security

254
00:08:34,479 --> 00:08:36,320
for attributes encryption activate base

255
00:08:36,320 --> 00:08:38,000
connection boundary collision security

256
00:08:38,000 --> 00:08:39,839
has already seen a lot of practical

257
00:08:39,839 --> 00:08:42,080
applications

258
00:08:42,080 --> 00:08:43,839
and the landscape and bound collision

259
00:08:43,839 --> 00:08:46,000
mod looks as follows for the non-uniform

260
00:08:46,000 --> 00:08:48,160
models we already have attribute

261
00:08:48,160 --> 00:08:49,600
descriptions for circuits from just

262
00:08:49,600 --> 00:08:51,200
public encryption from basically the

263
00:08:51,200 --> 00:08:52,800
minimal assumption

264
00:08:52,800 --> 00:08:54,880
but all prior constructions for uniform

265
00:08:54,880 --> 00:08:57,519
models even in the bound collision uh

266
00:08:57,519 --> 00:08:59,920
setting they require specific algebraic

267
00:08:59,920 --> 00:09:01,279
assumptions such as learning that is in

268
00:09:01,279 --> 00:09:03,360
most cases

269
00:09:03,360 --> 00:09:06,000
and in this work we show that algebra is

270
00:09:06,000 --> 00:09:08,560
not unit for uniform orange as well

271
00:09:08,560 --> 00:09:10,240
so we close the gap between non-uniform

272
00:09:10,240 --> 00:09:12,320
and uniform models

273
00:09:12,320 --> 00:09:15,200
at least in the bound collision setting

274
00:09:15,200 --> 00:09:17,120
and a very high level overview of

275
00:09:17,120 --> 00:09:18,560
construction in three steps it's

276
00:09:18,560 --> 00:09:20,880
basically the first step is we try to

277
00:09:20,880 --> 00:09:22,959
build an attribute-based encryption

278
00:09:22,959 --> 00:09:24,959
in which we can only corrupt one key

279
00:09:24,959 --> 00:09:26,800
only single key corruption so one bar

280
00:09:26,800 --> 00:09:28,560
one size collision bound

281
00:09:28,560 --> 00:09:30,080
then we show how to go from single key

282
00:09:30,080 --> 00:09:31,600
corruption to boundary key corruption

283
00:09:31,600 --> 00:09:34,000
and finally we show how to actually also

284
00:09:34,000 --> 00:09:36,240
upgrade the non-adaptive security to

285
00:09:36,240 --> 00:09:38,080
adapter security via the random oracle

286
00:09:38,080 --> 00:09:39,839
model

287
00:09:39,839 --> 00:09:42,560
now the step two is it follows via stand

288
00:09:42,560 --> 00:09:44,640
cognitoreal tricks that are commonly

289
00:09:44,640 --> 00:09:47,279
used in the in the literature and step

290
00:09:47,279 --> 00:09:49,519
three it relies on simple non-committing

291
00:09:49,519 --> 00:09:50,880
encryption that we were able to improve

292
00:09:50,880 --> 00:09:52,959
securely under the random oracle model

293
00:09:52,959 --> 00:09:54,480
be able to show how to upgrade on

294
00:09:54,480 --> 00:09:56,720
adapter security generically using to do

295
00:09:56,720 --> 00:09:58,720
adapter security using this

296
00:09:58,720 --> 00:10:00,880
non-committing encryption scheme and i

297
00:10:00,880 --> 00:10:02,959
invite you to look at the paper for more

298
00:10:02,959 --> 00:10:06,240
details now the first part of the paper

299
00:10:06,240 --> 00:10:07,920
or this first step is where most of the

300
00:10:07,920 --> 00:10:09,600
technical ideas

301
00:10:09,600 --> 00:10:11,200
uh came in most of the new technical

302
00:10:11,200 --> 00:10:13,360
ideas came in we'll be able to show how

303
00:10:13,360 --> 00:10:15,519
to use add dimension based encryption to

304
00:10:15,519 --> 00:10:17,360
build a b for tuning machines with just

305
00:10:17,360 --> 00:10:20,160
single key corruption

306
00:10:21,120 --> 00:10:23,279
so at a very high level

307
00:10:23,279 --> 00:10:26,800
the uh the uh the overview is as follows

308
00:10:26,800 --> 00:10:29,360
to encrypt an attribute for a particular

309
00:10:29,360 --> 00:10:31,600
time bounty because this is decided

310
00:10:31,600 --> 00:10:33,120
during encryption

311
00:10:33,120 --> 00:10:35,680
the scifix is going to consist of t

312
00:10:35,680 --> 00:10:37,360
goblins i'm going to talk about what

313
00:10:37,360 --> 00:10:39,200
goblins mean in the next step but t

314
00:10:39,200 --> 00:10:42,160
goblins and basically the ayat goblin

315
00:10:42,160 --> 00:10:44,800
you align these goblins from one two

316
00:10:44,800 --> 00:10:47,200
three after sequentially after t steps

317
00:10:47,200 --> 00:10:49,040
and the ith goblin is going to perform

318
00:10:49,040 --> 00:10:51,440
the i tuning machine computation step on

319
00:10:51,440 --> 00:10:53,920
this particular attribute

320
00:10:53,920 --> 00:10:56,959
and basically the its goblin is going to

321
00:10:56,959 --> 00:10:58,320
not only perform this competition but

322
00:10:58,320 --> 00:11:00,560
it's going to output the labels

323
00:11:00,560 --> 00:11:02,720
for the next gardening step

324
00:11:02,720 --> 00:11:04,240
and these labels are going to be

325
00:11:04,240 --> 00:11:05,920
interpreted under the identities

326
00:11:05,920 --> 00:11:07,200
corresponding to the turing machine

327
00:11:07,200 --> 00:11:09,200
trans state transitions

328
00:11:09,200 --> 00:11:11,279
so the state transition that you're

329
00:11:11,279 --> 00:11:13,360
going to perform between i and i plus 1

330
00:11:13,360 --> 00:11:15,920
steps that's going to dictate what

331
00:11:15,920 --> 00:11:18,160
particular labels can you decrypt and

332
00:11:18,160 --> 00:11:20,240
each secret key is going to be identity

333
00:11:20,240 --> 00:11:22,399
keys for appropriate turing machine

334
00:11:22,399 --> 00:11:24,560
state transitions so using say

335
00:11:24,560 --> 00:11:26,079
transitions you basically encrypt

336
00:11:26,079 --> 00:11:27,680
decrypt the labels

337
00:11:27,680 --> 00:11:30,800
you perform the goblin evaluation that's

338
00:11:30,800 --> 00:11:32,320
going to give you an encrypted set of

339
00:11:32,320 --> 00:11:34,160
labels and you again decrypt these

340
00:11:34,160 --> 00:11:36,560
labels and just keep on containing that

341
00:11:36,560 --> 00:11:38,640
eventually you basically either learn

342
00:11:38,640 --> 00:11:40,320
the message m from the fine global

343
00:11:40,320 --> 00:11:41,920
circuit or nothing if you're not

344
00:11:41,920 --> 00:11:44,240
authorized

345
00:11:44,240 --> 00:11:46,160
and the type of goggling we need is that

346
00:11:46,160 --> 00:11:48,480
it turns out gobbling gobble circuits

347
00:11:48,480 --> 00:11:50,639
are sufficient but it leads to quadratic

348
00:11:50,639 --> 00:11:51,839
blow up in the scientific size because

349
00:11:51,839 --> 00:11:53,519
we have to feed in the entire tuning

350
00:11:53,519 --> 00:11:55,200
machine state to the entire goblet

351
00:11:55,200 --> 00:11:57,279
circuit at each step but we notice that

352
00:11:57,279 --> 00:11:59,200
if we use gobblegrams then we can make

353
00:11:59,200 --> 00:12:00,240
it to

354
00:12:00,240 --> 00:12:02,000
just linear and not just have this

355
00:12:02,000 --> 00:12:04,480
quadratic blow up in the ciphertext size

356
00:12:04,480 --> 00:12:06,480
and double drums are

357
00:12:06,480 --> 00:12:08,160
a strengthening of global circuits where

358
00:12:08,160 --> 00:12:09,600
gobbledram says you can have a

359
00:12:09,600 --> 00:12:12,160
persistent memory that can be reused

360
00:12:12,160 --> 00:12:14,959
across a bunch of gobble drag programs

361
00:12:14,959 --> 00:12:16,560
and you can gobble all these ram

362
00:12:16,560 --> 00:12:18,399
programs independently

363
00:12:18,399 --> 00:12:21,360
for this particular memory and in this

364
00:12:21,360 --> 00:12:23,519
work we provide a new security property

365
00:12:23,519 --> 00:12:25,839
for gobblegram typically in standard

366
00:12:25,839 --> 00:12:28,000
model in the standard security all the

367
00:12:28,000 --> 00:12:29,920
programs were simulated together jointly

368
00:12:29,920 --> 00:12:33,440
in kabul ram but in this we show that uh

369
00:12:33,440 --> 00:12:35,360
if the government ramps to grams and

370
00:12:35,360 --> 00:12:37,360
kabul ram programs can be uh simulated

371
00:12:37,360 --> 00:12:39,680
iteratively sequentially and that also

372
00:12:39,680 --> 00:12:42,240
has interesting applications as we show

373
00:12:42,240 --> 00:12:45,440
this work and we show uh that the prior

374
00:12:45,440 --> 00:12:47,600
constructions for kabul ram are already

375
00:12:47,600 --> 00:12:49,839
secure uh in

376
00:12:49,839 --> 00:12:51,839
were already secure in this either

377
00:12:51,839 --> 00:12:54,000
designation security model

378
00:12:54,000 --> 00:12:56,480
and as i said this is necessary for our

379
00:12:56,480 --> 00:12:59,200
proof as we have to simulate our global

380
00:12:59,200 --> 00:13:02,160
ram sequentially in our construction

381
00:13:02,160 --> 00:13:04,000
and i invited look at paper for details

382
00:13:04,000 --> 00:13:06,399
about how we execute all these ideas

383
00:13:06,399 --> 00:13:08,639
and i'll quickly conclude by saying that

384
00:13:08,639 --> 00:13:10,480
in this work we propose so we built an

385
00:13:10,480 --> 00:13:11,680
attribute-based encryption scheme for

386
00:13:11,680 --> 00:13:13,200
turing machines for this uniform or

387
00:13:13,200 --> 00:13:14,959
electronic machines from the general

388
00:13:14,959 --> 00:13:16,399
assumption of identification option in

389
00:13:16,399 --> 00:13:17,760
the boundary collision model thereby

390
00:13:17,760 --> 00:13:19,200
closing this gap

391
00:13:19,200 --> 00:13:21,040
and we prove adaptive security in the

392
00:13:21,040 --> 00:13:22,639
random oracle model and non-adapter

393
00:13:22,639 --> 00:13:24,399
security in the standard model

394
00:13:24,399 --> 00:13:26,000
and as i said it's uniform model and

395
00:13:26,000 --> 00:13:27,120
general assumptions of identity

396
00:13:27,120 --> 00:13:29,839
description and we also show a new

397
00:13:29,839 --> 00:13:31,519
finding simulation security property for

398
00:13:31,519 --> 00:13:33,519
double ram which might see more

399
00:13:33,519 --> 00:13:36,240
applications down the line and uh some

400
00:13:36,240 --> 00:13:38,320
new directions for future work so a

401
00:13:38,320 --> 00:13:39,839
natural question could be can we

402
00:13:39,839 --> 00:13:41,600
actually close the gap even further can

403
00:13:41,600 --> 00:13:43,199
we build functional encryption for tv

404
00:13:43,199 --> 00:13:44,720
machines in the bound collision model

405
00:13:44,720 --> 00:13:46,320
and can we remove this time bound that

406
00:13:46,320 --> 00:13:48,240
we had in our encryption algorithm and

407
00:13:48,240 --> 00:13:49,680
what about adaptive security without

408
00:13:49,680 --> 00:13:51,519
random oracle model

409
00:13:51,519 --> 00:13:53,360
and recently there has been some

410
00:13:53,360 --> 00:13:55,279
interesting work which has proposed uh

411
00:13:55,279 --> 00:13:57,279
uh the which has strengthened the

412
00:13:57,279 --> 00:13:59,040
collusion model collision model to the

413
00:13:59,040 --> 00:14:00,959
dynamic collision model and the question

414
00:14:00,959 --> 00:14:02,320
could be can we actually strengthen

415
00:14:02,320 --> 00:14:04,079
activity-based encryption for dealing

416
00:14:04,079 --> 00:14:05,360
machines in the dining convention model

417
00:14:05,360 --> 00:14:06,320
as well

418
00:14:06,320 --> 00:14:08,079
and with that i would like to include

419
00:14:08,079 --> 00:14:09,760
and thank you for listening please send

420
00:14:09,760 --> 00:14:11,600
me an email for uh if you have any more

421
00:14:11,600 --> 00:14:14,600
questions

