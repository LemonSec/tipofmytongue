1
00:00:06,879 --> 00:00:08,800
welcome to the presentation better

2
00:00:08,800 --> 00:00:11,120
security for permutation based student

3
00:00:11,120 --> 00:00:13,599
or politician reverse hashing

4
00:00:13,599 --> 00:00:15,839
i am the speaker you long chen and this

5
00:00:15,839 --> 00:00:21,039
paper was filled out with stefano vesalo

6
00:00:21,359 --> 00:00:23,600
secure multiparty communication is one

7
00:00:23,600 --> 00:00:25,279
of hottest topics

8
00:00:25,279 --> 00:00:28,960
in cryptography currently

9
00:00:28,960 --> 00:00:31,359
protocols such as ot extension schemes

10
00:00:31,359 --> 00:00:34,320
and gulp circuit actually make heavy use

11
00:00:34,320 --> 00:00:37,600
of symmetric key primitives

12
00:00:37,600 --> 00:00:39,600
a common denominator

13
00:00:39,600 --> 00:00:42,719
that is used in those protocols is a

14
00:00:42,719 --> 00:00:45,520
special form of hash functions

15
00:00:45,520 --> 00:00:47,920
this type of hash functions is often

16
00:00:47,920 --> 00:00:50,399
modeled as a random oracle and is

17
00:00:50,399 --> 00:00:55,280
usually used to hash 108 bit strings

18
00:00:55,680 --> 00:00:58,399
therefore a sha-3 hash function is not

19
00:00:58,399 --> 00:01:00,960
really a right solution for this problem

20
00:01:00,960 --> 00:01:03,039
since chart three has a two large state

21
00:01:03,039 --> 00:01:07,920
size which will lead to low performance

22
00:01:08,080 --> 00:01:10,560
currently construction space of its key

23
00:01:10,560 --> 00:01:12,720
areas are used to improve the

24
00:01:12,720 --> 00:01:15,040
performance

25
00:01:15,040 --> 00:01:17,520
however the problem is that many of the

26
00:01:17,520 --> 00:01:20,720
existing protocols just use inefficient

27
00:01:20,720 --> 00:01:22,640
or sometimes even insecure hash

28
00:01:22,640 --> 00:01:24,880
functions

29
00:01:24,880 --> 00:01:26,880
the fact that several motions are needed

30
00:01:26,880 --> 00:01:29,040
for different problems

31
00:01:29,040 --> 00:01:30,400
we need to design different

32
00:01:30,400 --> 00:01:32,799
constructions in order to satisfy the

33
00:01:32,799 --> 00:01:36,560
stronger version of the notions

34
00:01:37,280 --> 00:01:39,920
before i continue with the solution for

35
00:01:39,920 --> 00:01:43,280
this problem i first want to explain why

36
00:01:43,280 --> 00:01:45,920
designing this type of hash functions is

37
00:01:45,920 --> 00:01:48,079
hard

38
00:01:48,079 --> 00:01:50,240
keep in mind that what we want here is

39
00:01:50,240 --> 00:01:52,840
something that's called correlation

40
00:01:52,840 --> 00:01:55,439
robustness but that means i'm going to

41
00:01:55,439 --> 00:01:58,159
explain in the next slide

42
00:01:58,159 --> 00:02:00,079
so we are dealing with a hash function

43
00:02:00,079 --> 00:02:02,799
here that means there is no destinated

44
00:02:02,799 --> 00:02:05,119
secret key input

45
00:02:05,119 --> 00:02:07,200
the only randomness

46
00:02:07,200 --> 00:02:09,758
art is actually export with message

47
00:02:09,758 --> 00:02:10,878
input

48
00:02:10,878 --> 00:02:13,599
and there's nothing we can change about

49
00:02:13,599 --> 00:02:16,319
that means we cannot just obtain this

50
00:02:16,319 --> 00:02:18,879
type of hash functions by for example

51
00:02:18,879 --> 00:02:22,400
using a twitter book cipher

52
00:02:22,400 --> 00:02:25,040
this problem is however related to the

53
00:02:25,040 --> 00:02:29,599
related key security for xor

54
00:02:31,280 --> 00:02:32,879
as promised before

55
00:02:32,879 --> 00:02:34,480
in this slide i'm going to explain

56
00:02:34,480 --> 00:02:37,440
collision with boston's security motion

57
00:02:37,440 --> 00:02:39,280
in order to do that

58
00:02:39,280 --> 00:02:42,160
i first need to define attack game

59
00:02:42,160 --> 00:02:44,480
so at the beginning of the game one of

60
00:02:44,480 --> 00:02:46,720
the two worlds is chosen

61
00:02:46,720 --> 00:02:49,599
the real world on the left side and the

62
00:02:49,599 --> 00:02:52,239
ideal world on the right side

63
00:02:52,239 --> 00:02:56,000
the axis 8 is getting query access

64
00:02:56,000 --> 00:02:58,959
to the construction queries so a is an

65
00:02:58,959 --> 00:03:02,000
ultimate queue construction queries

66
00:03:02,000 --> 00:03:03,760
where the construction query the

67
00:03:03,760 --> 00:03:06,239
construction article in the real world

68
00:03:06,239 --> 00:03:09,440
uses a randomness r and is defined by

69
00:03:09,440 --> 00:03:12,159
the hash function h

70
00:03:12,159 --> 00:03:14,000
so we can see that this hash function

71
00:03:14,000 --> 00:03:18,159
takes as inputs w xor the randomness r

72
00:03:18,159 --> 00:03:20,800
well in the ideal world the construction

73
00:03:20,800 --> 00:03:23,200
oracle is just an m to m bits random

74
00:03:23,200 --> 00:03:25,120
function

75
00:03:25,120 --> 00:03:27,360
the accessory a is also allowed to make

76
00:03:27,360 --> 00:03:29,599
p primitive clamps to each of the

77
00:03:29,599 --> 00:03:33,159
primitive oracles

78
00:03:33,280 --> 00:03:35,920
and after its communication it should

79
00:03:35,920 --> 00:03:38,640
state which of the two words it was

80
00:03:38,640 --> 00:03:40,080
interacting with

81
00:03:40,080 --> 00:03:42,480
if i cannot do so then we can deduce

82
00:03:42,480 --> 00:03:44,560
that the difficult section is a good

83
00:03:44,560 --> 00:03:48,400
correlation with us hash function

84
00:03:50,480 --> 00:03:52,720
so our example of correlation reverse

85
00:03:52,720 --> 00:03:55,599
hash function is proposed by goethe in

86
00:03:55,599 --> 00:03:57,920
2020.

87
00:03:57,920 --> 00:04:00,640
the given perception makes one call to

88
00:04:00,640 --> 00:04:02,799
the underlying publication and it is

89
00:04:02,799 --> 00:04:05,680
called the mmo construction

90
00:04:05,680 --> 00:04:07,760
the main reason for this is because it

91
00:04:07,760 --> 00:04:11,439
resembles the idea of the classical mmo

92
00:04:11,439 --> 00:04:13,120
compression function

93
00:04:13,120 --> 00:04:15,360
so we can see that this construction

94
00:04:15,360 --> 00:04:17,600
achieve a typical first day type of

95
00:04:17,600 --> 00:04:20,239
security

96
00:04:21,600 --> 00:04:24,639
now the next notion that i'm going to

97
00:04:24,639 --> 00:04:26,639
explain here is actually the circular

98
00:04:26,639 --> 00:04:28,960
parents of the collision with vastus

99
00:04:28,960 --> 00:04:32,400
notion as before the adversary gets

100
00:04:32,400 --> 00:04:34,000
killed constructing queries to the

101
00:04:34,000 --> 00:04:35,680
cross-sectional article

102
00:04:35,680 --> 00:04:37,600
this time in the real world the

103
00:04:37,600 --> 00:04:40,160
construction query takes

104
00:04:40,160 --> 00:04:43,280
and two inputs where the second one is a

105
00:04:43,280 --> 00:04:44,880
single bit b

106
00:04:44,880 --> 00:04:48,320
we can see that when b is equal to zero

107
00:04:48,320 --> 00:04:51,680
then we are actually back to the case um

108
00:04:51,680 --> 00:04:55,199
of correlation fastness

109
00:04:55,600 --> 00:04:57,759
and in the ideal world the construction

110
00:04:57,759 --> 00:05:01,199
oracle is n plus 1 to n bits random

111
00:05:01,199 --> 00:05:03,600
function

112
00:05:03,840 --> 00:05:05,039
as before

113
00:05:05,039 --> 00:05:07,440
a is allowed to make p primitive queries

114
00:05:07,440 --> 00:05:11,639
to each of the primitive articles

115
00:05:11,840 --> 00:05:13,919
and after the communication i should

116
00:05:13,919 --> 00:05:16,080
state which of the two world it was

117
00:05:16,080 --> 00:05:18,320
interacting with if they cannot do so

118
00:05:18,320 --> 00:05:19,919
then we can deduce a different

119
00:05:19,919 --> 00:05:22,479
construction it's a good circular

120
00:05:22,479 --> 00:05:26,240
correlation with massage function

121
00:05:26,960 --> 00:05:29,680
volatile also shows that

122
00:05:29,680 --> 00:05:31,919
the previous mml construction can be

123
00:05:31,919 --> 00:05:33,840
modified such that the given

124
00:05:33,840 --> 00:05:36,320
construction is also secure against the

125
00:05:36,320 --> 00:05:39,039
circular motion

126
00:05:39,039 --> 00:05:39,919
they

127
00:05:39,919 --> 00:05:42,000
did it by

128
00:05:42,000 --> 00:05:44,240
applying a linear orthomorphism on the

129
00:05:44,240 --> 00:05:45,199
inputs

130
00:05:45,199 --> 00:05:48,320
before i find the hash function of it

131
00:05:48,320 --> 00:05:51,360
so this special function sigma which

132
00:05:51,360 --> 00:05:54,080
will satisfy the following property

133
00:05:54,080 --> 00:05:55,600
where the

134
00:05:55,600 --> 00:05:58,720
both sigma of input x and

135
00:05:58,720 --> 00:06:04,000
sigma x xor with x are all permutations

136
00:06:04,000 --> 00:06:06,240
so we can see that by applying this

137
00:06:06,240 --> 00:06:08,960
sigma for um on the input before

138
00:06:08,960 --> 00:06:11,199
applying the hash function we are able

139
00:06:11,199 --> 00:06:14,160
to achieve the similar type of burst

140
00:06:14,160 --> 00:06:16,800
burst burst amount of security but this

141
00:06:16,800 --> 00:06:18,720
time against the circular correlation

142
00:06:18,720 --> 00:06:21,840
robustness notion

143
00:06:22,319 --> 00:06:24,319
the last notion that i want to explain

144
00:06:24,319 --> 00:06:25,840
here is the tweak for circular

145
00:06:25,840 --> 00:06:28,240
correlation with versus notion but i'm

146
00:06:28,240 --> 00:06:30,080
going to explain the notion in the

147
00:06:30,080 --> 00:06:33,280
multi-instance setting

148
00:06:33,680 --> 00:06:36,720
so this time that say a it's cube

149
00:06:36,720 --> 00:06:38,400
construction queries

150
00:06:38,400 --> 00:06:41,680
to u of those oracles

151
00:06:41,680 --> 00:06:43,440
this means that

152
00:06:43,440 --> 00:06:45,360
the adversary is allowed to make

153
00:06:45,360 --> 00:06:48,880
arbitrary amounts of research inquiries

154
00:06:48,880 --> 00:06:52,240
per oracle as long as the number sum

155
00:06:52,240 --> 00:06:55,280
of the construction queries made in

156
00:06:55,280 --> 00:06:59,759
those u oracles together is equal to q

157
00:06:59,759 --> 00:07:02,240
so each construction oracle uses

158
00:07:02,240 --> 00:07:04,880
independent randomness ri

159
00:07:04,880 --> 00:07:06,880
and we can see that each construction

160
00:07:06,880 --> 00:07:10,080
oracle takes now additional inputs to

161
00:07:10,080 --> 00:07:12,800
tweak t

162
00:07:14,960 --> 00:07:17,840
so as can we see from the slides this

163
00:07:17,840 --> 00:07:20,639
trick is actually processed inside the

164
00:07:20,639 --> 00:07:23,840
hash function itself

165
00:07:25,120 --> 00:07:28,319
that means that we need a hash function

166
00:07:28,319 --> 00:07:30,000
that can handle

167
00:07:30,000 --> 00:07:33,120
the additional treat

168
00:07:34,479 --> 00:07:35,919
now

169
00:07:35,919 --> 00:07:37,919
in the ideal world

170
00:07:37,919 --> 00:07:40,560
the those yukon structural oracles are

171
00:07:40,560 --> 00:07:42,560
actually defined as

172
00:07:42,560 --> 00:07:46,000
n plus t plus 1 times n

173
00:07:46,000 --> 00:07:49,039
bits random functions

174
00:07:49,039 --> 00:07:51,360
again that say a is allowed to make p

175
00:07:51,360 --> 00:07:53,280
primitive variables to each of the

176
00:07:53,280 --> 00:07:54,960
primitive particles

177
00:07:54,960 --> 00:07:57,440
and after communication i should state

178
00:07:57,440 --> 00:07:59,599
which of the two words it was interacted

179
00:07:59,599 --> 00:08:00,400
with

180
00:08:00,400 --> 00:08:02,560
if i cannot do so then we can deduce

181
00:08:02,560 --> 00:08:05,520
that different construction is a good

182
00:08:05,520 --> 00:08:07,840
step and treatment of circular elevation

183
00:08:07,840 --> 00:08:10,639
reverse hash function

184
00:08:10,639 --> 00:08:14,319
an example of a pcc hash function was

185
00:08:14,319 --> 00:08:17,280
given by a bullet hole

186
00:08:17,280 --> 00:08:20,240
so we can see that um this construction

187
00:08:20,240 --> 00:08:22,240
makes two called too close to the

188
00:08:22,240 --> 00:08:24,800
underlying permutation and is called the

189
00:08:24,800 --> 00:08:27,120
tmm august function the trigger called

190
00:08:27,120 --> 00:08:30,240
mm-hmm construction

191
00:08:31,039 --> 00:08:34,000
we see that the construction achieved

192
00:08:34,000 --> 00:08:37,200
actually the same security bounds as mno

193
00:08:37,200 --> 00:08:38,880
construction before

194
00:08:38,880 --> 00:08:41,919
but just because there is one additional

195
00:08:41,919 --> 00:08:44,360
tweak inputs there's one

196
00:08:44,360 --> 00:08:47,120
experimentation call needed in order to

197
00:08:47,120 --> 00:08:50,000
handle this tweak inputs and to achieve

198
00:08:50,000 --> 00:08:53,279
the same amount of security as before

199
00:08:53,279 --> 00:08:55,839
however unfortunately in the form of

200
00:08:55,839 --> 00:08:59,040
work by the same authors they show that

201
00:08:59,040 --> 00:09:02,160
the tmmo construction doesn't provide

202
00:09:02,160 --> 00:09:04,800
enough security when the multi-user

203
00:09:04,800 --> 00:09:07,440
setting is considered

204
00:09:07,440 --> 00:09:09,440
in the same work they propose a

205
00:09:09,440 --> 00:09:11,440
following obstruction

206
00:09:11,440 --> 00:09:14,880
which um makes just one carpool on the

207
00:09:14,880 --> 00:09:18,720
line i use a value cipher

208
00:09:18,720 --> 00:09:21,680
here the tweak input serves as a key to

209
00:09:21,680 --> 00:09:24,800
the idea of cipher

210
00:09:24,800 --> 00:09:26,640
hence the following security bond is

211
00:09:26,640 --> 00:09:28,000
achieved

212
00:09:28,000 --> 00:09:29,839
we can see that the security bonds

213
00:09:29,839 --> 00:09:32,560
depends on factor b

214
00:09:32,560 --> 00:09:35,440
and b is actually equal to the number of

215
00:09:35,440 --> 00:09:38,800
construction queries per twitch

216
00:09:38,800 --> 00:09:41,519
this number is usually very small number

217
00:09:41,519 --> 00:09:44,399
in the case of od extension schemes or

218
00:09:44,399 --> 00:09:46,800
double circuit

219
00:09:46,800 --> 00:09:50,240
this improvement of the security beats

220
00:09:50,240 --> 00:09:51,920
makes the construction

221
00:09:51,920 --> 00:09:54,800
suitable for multi-user city

222
00:09:54,800 --> 00:09:57,279
however the problem is that

223
00:09:57,279 --> 00:09:59,120
the construction here makes a very

224
00:09:59,120 --> 00:10:01,279
strong assumption namely that the

225
00:10:01,279 --> 00:10:02,640
underlying

226
00:10:02,640 --> 00:10:06,480
broadcast ideal cipher

227
00:10:07,839 --> 00:10:10,480
so as i explained before that's um

228
00:10:10,480 --> 00:10:11,920
different notions are needed for

229
00:10:11,920 --> 00:10:14,000
different protocols and different

230
00:10:14,000 --> 00:10:16,839
applications for example the

231
00:10:16,839 --> 00:10:19,360
general modulation reverse motion is for

232
00:10:19,360 --> 00:10:21,680
the same on the security of the

233
00:10:21,680 --> 00:10:23,519
extension protocols

234
00:10:23,519 --> 00:10:26,079
the circular motion is needed to prove

235
00:10:26,079 --> 00:10:28,880
the security of the export technique

236
00:10:28,880 --> 00:10:31,040
now the trigger motion is

237
00:10:31,040 --> 00:10:33,360
used for the malicious setting of ot

238
00:10:33,360 --> 00:10:36,640
extension protocols

239
00:10:36,800 --> 00:10:38,560
in this work we want to highlight

240
00:10:38,560 --> 00:10:41,040
importance for the ot extension for the

241
00:10:41,040 --> 00:10:43,760
first time and as already showed i know

242
00:10:43,760 --> 00:10:46,240
it all by using symmetry key building

243
00:10:46,240 --> 00:10:47,360
blocks

244
00:10:47,360 --> 00:10:49,440
we can get a huge performance

245
00:10:49,440 --> 00:10:50,880
improvement

246
00:10:50,880 --> 00:10:53,279
which is simplified for practical and

247
00:10:53,279 --> 00:10:55,519
which has significant impact on the

248
00:10:55,519 --> 00:10:59,480
efficiency of mpc

249
00:11:00,000 --> 00:11:02,720
still want to say something about this

250
00:11:02,720 --> 00:11:05,600
uh security of a two party computation

251
00:11:05,600 --> 00:11:06,880
protocol

252
00:11:06,880 --> 00:11:09,200
so a typical two-party hybrid protocol

253
00:11:09,200 --> 00:11:11,839
that has access functionality with three

254
00:11:11,839 --> 00:11:13,360
interfaces

255
00:11:13,360 --> 00:11:18,480
simple s receiver r and aspect area a

256
00:11:19,680 --> 00:11:22,480
we we do require that at least one of

257
00:11:22,480 --> 00:11:26,480
the two parties is unplugged

258
00:11:26,480 --> 00:11:29,440
so as before in the few worlds the

259
00:11:29,440 --> 00:11:32,640
adversaries front protocol or in the id

260
00:11:32,640 --> 00:11:34,320
world it's interactive with the

261
00:11:34,320 --> 00:11:37,200
simulator s

262
00:11:39,760 --> 00:11:42,640
after communication state which of the

263
00:11:42,640 --> 00:11:46,240
two words it was given if a cannot do so

264
00:11:46,240 --> 00:11:47,680
then we can deduce the different

265
00:11:47,680 --> 00:11:51,519
protocol is a secure for people

266
00:11:54,480 --> 00:11:57,440
in our work we also provide

267
00:11:57,440 --> 00:12:00,880
a special otd protocol the main reason

268
00:12:00,880 --> 00:12:03,279
for this is because the hash function

269
00:12:03,279 --> 00:12:06,000
besides in this work is only secure for

270
00:12:06,000 --> 00:12:08,959
distinct message inputs

271
00:12:08,959 --> 00:12:12,079
at least in most cases

272
00:12:12,079 --> 00:12:14,240
i will show that um

273
00:12:14,240 --> 00:12:16,240
that involve performing stuff that hash

274
00:12:16,240 --> 00:12:18,079
function can also be applied for

275
00:12:18,079 --> 00:12:20,880
arbitrary um messaging

276
00:12:20,880 --> 00:12:23,839
but now keep in mind for this case we

277
00:12:23,839 --> 00:12:25,920
first want to solve this problem by

278
00:12:25,920 --> 00:12:29,200
applying the um the hash function only

279
00:12:29,200 --> 00:12:31,920
on the distinct messaging bit therefore

280
00:12:31,920 --> 00:12:32,800
we

281
00:12:32,800 --> 00:12:35,360
present this protocol

282
00:12:35,360 --> 00:12:37,680
so the protocol in this slide is for the

283
00:12:37,680 --> 00:12:40,720
corrupted receiver in the initial phase

284
00:12:40,720 --> 00:12:43,120
the sender just samples m pairs of

285
00:12:43,120 --> 00:12:44,480
messages while

286
00:12:44,480 --> 00:12:46,959
and the receiver samples and

287
00:12:46,959 --> 00:12:49,279
types the x-files

288
00:12:49,279 --> 00:12:51,760
so i'm not going to explain the protocol

289
00:12:51,760 --> 00:12:54,639
in detail but you can see that here the

290
00:12:54,639 --> 00:12:56,959
b values are generated for the receiver

291
00:12:56,959 --> 00:12:58,560
while based on the sp files we can

292
00:12:58,560 --> 00:13:01,040
generate those a5 a values for the

293
00:13:01,040 --> 00:13:04,079
sender the most important thing about

294
00:13:04,079 --> 00:13:08,320
this protocol is how those ciphertex c

295
00:13:08,320 --> 00:13:10,880
and are

296
00:13:10,959 --> 00:13:12,320
generated

297
00:13:12,320 --> 00:13:14,959
so you can see that the ciphertext is

298
00:13:14,959 --> 00:13:16,399
equal to the

299
00:13:16,399 --> 00:13:18,560
actual of the plaintext which is special

300
00:13:18,560 --> 00:13:21,680
evaluation of the hash functions

301
00:13:21,680 --> 00:13:24,800
so as we can also mentioned before the

302
00:13:24,800 --> 00:13:27,519
tcr hash function is only secure for

303
00:13:27,519 --> 00:13:29,680
distinct message input

304
00:13:29,680 --> 00:13:31,920
but we solve this problem by using

305
00:13:31,920 --> 00:13:34,320
universal hash function and by using the

306
00:13:34,320 --> 00:13:37,200
output of the universe a hash function

307
00:13:37,200 --> 00:13:38,320
to the

308
00:13:38,320 --> 00:13:41,120
message inputs of the pcr hash function

309
00:13:41,120 --> 00:13:43,360
we are allowed to

310
00:13:43,360 --> 00:13:46,000
solve this distinct input message

311
00:13:46,000 --> 00:13:49,000
problem

312
00:13:51,120 --> 00:13:52,880
and i still want to say a little bit

313
00:13:52,880 --> 00:13:55,120
about the security of the protocol as i

314
00:13:55,120 --> 00:13:57,440
already mentioned before we focus only

315
00:13:57,440 --> 00:14:00,079
on the center security which is for the

316
00:14:00,079 --> 00:14:03,199
corrupted receiver and we keep ourselves

317
00:14:03,199 --> 00:14:05,519
to the ideal model security

318
00:14:05,519 --> 00:14:07,360
and we can show that's the only

319
00:14:07,360 --> 00:14:08,880
difference between the real and the

320
00:14:08,880 --> 00:14:11,199
ideal worlds is actually how these

321
00:14:11,199 --> 00:14:15,279
ciphertexts one minus xi

322
00:14:15,279 --> 00:14:17,120
are generated

323
00:14:17,120 --> 00:14:19,199
so in the real world this is the extra

324
00:14:19,199 --> 00:14:22,079
of the message with special evaluation

325
00:14:22,079 --> 00:14:24,320
of the pcr hash function

326
00:14:24,320 --> 00:14:26,880
now in the ideal world it's just a

327
00:14:26,880 --> 00:14:30,360
random pc

328
00:14:30,720 --> 00:14:31,600
so

329
00:14:31,600 --> 00:14:33,600
we can show that the same security can

330
00:14:33,600 --> 00:14:35,839
be formed by pcr security of the hash

331
00:14:35,839 --> 00:14:38,480
function plus the extra term of q

332
00:14:38,480 --> 00:14:42,240
squared times of epsilon

333
00:14:42,240 --> 00:14:44,560
in order to satisfy this security we

334
00:14:44,560 --> 00:14:47,040
need to fix up really a random set of

335
00:14:47,040 --> 00:14:50,240
tweaks or size and

336
00:14:50,320 --> 00:14:52,000
means to choose

337
00:14:52,000 --> 00:14:54,000
a universal hash function with very

338
00:14:54,000 --> 00:14:57,040
small absolute for example f0 equal to

339
00:14:57,040 --> 00:15:01,040
equal equals to 1 over 2 to the power n

340
00:15:01,040 --> 00:15:03,600
in that case the center security is

341
00:15:03,600 --> 00:15:06,079
dominated by the term

342
00:15:06,079 --> 00:15:09,680
um square roots m times p over 2 to the

343
00:15:09,680 --> 00:15:12,959
power n

344
00:15:12,959 --> 00:15:14,480
now finally to

345
00:15:14,480 --> 00:15:16,240
the constructions

346
00:15:16,240 --> 00:15:18,800
so in this work our main goal is

347
00:15:18,800 --> 00:15:21,360
actually to decide dccr hash functions

348
00:15:21,360 --> 00:15:23,199
that can beat all previous

349
00:15:23,199 --> 00:15:25,360
state-of-the-art constructions both in

350
00:15:25,360 --> 00:15:29,040
terms of efficiency and security

351
00:15:29,040 --> 00:15:31,199
we can do that by

352
00:15:31,199 --> 00:15:33,440
using public fermentations and finance

353
00:15:33,440 --> 00:15:35,600
fields multiplications

354
00:15:35,600 --> 00:15:37,680
the main reason that we use permutations

355
00:15:37,680 --> 00:15:41,040
is because public permutations are

356
00:15:41,040 --> 00:15:43,839
much simpler objects than block ciphers

357
00:15:43,839 --> 00:15:45,040
that means

358
00:15:45,040 --> 00:15:46,800
the assumption that on the lamp

359
00:15:46,800 --> 00:15:48,079
permutations

360
00:15:48,079 --> 00:15:51,040
ideal is weaker than the assumptions

361
00:15:51,040 --> 00:15:52,560
that

362
00:15:52,560 --> 00:15:56,239
underlying high for his idea

363
00:15:57,759 --> 00:16:00,560
our first contribution actually our

364
00:16:00,560 --> 00:16:02,639
first construction is the one the

365
00:16:02,639 --> 00:16:04,959
following one call construction this

366
00:16:04,959 --> 00:16:06,560
construction

367
00:16:06,560 --> 00:16:08,639
looks very similar to the mmo

368
00:16:08,639 --> 00:16:11,440
construction but we can see that while

369
00:16:11,440 --> 00:16:14,000
and then broken structure is insecure in

370
00:16:14,000 --> 00:16:15,600
the case of um

371
00:16:15,600 --> 00:16:18,560
the treat and the trick of spectrum

372
00:16:18,560 --> 00:16:20,800
evaluation robustness solution our

373
00:16:20,800 --> 00:16:24,320
construction does provide

374
00:16:24,320 --> 00:16:26,560
this typical versa type of security

375
00:16:26,560 --> 00:16:29,680
against the tcr notion

376
00:16:29,680 --> 00:16:32,720
the main reason is because instead of

377
00:16:32,720 --> 00:16:34,639
using the

378
00:16:34,639 --> 00:16:38,399
input message we use um message

379
00:16:38,399 --> 00:16:40,480
multiply with the tweak t

380
00:16:40,480 --> 00:16:42,800
by this small modification

381
00:16:42,800 --> 00:16:43,600
we

382
00:16:43,600 --> 00:16:45,839
our construction improve

383
00:16:45,839 --> 00:16:48,639
improve the previous tml tmm on

384
00:16:48,639 --> 00:16:51,279
construction which is based on two

385
00:16:51,279 --> 00:16:53,519
permutation calls here we just need one

386
00:16:53,519 --> 00:16:55,920
permutation call and one final field

387
00:16:55,920 --> 00:16:57,839
multiplication

388
00:16:57,839 --> 00:17:00,560
i still want to say something about this

389
00:17:00,560 --> 00:17:03,279
security bound achieved here so we can

390
00:17:03,279 --> 00:17:06,079
see that first term depends on pq while

391
00:17:06,079 --> 00:17:09,760
the second term is only depends on q

392
00:17:09,760 --> 00:17:12,079
so the first term is actually can be

393
00:17:12,079 --> 00:17:14,959
seen as the explanation of a section

394
00:17:14,959 --> 00:17:17,119
query with the primitive query in the

395
00:17:17,119 --> 00:17:19,199
following form

396
00:17:19,199 --> 00:17:22,319
of the second q squared term is actually

397
00:17:22,319 --> 00:17:24,160
the probability that the correlation

398
00:17:24,160 --> 00:17:25,199
happens

399
00:17:25,199 --> 00:17:27,439
between two cross-section queries of the

400
00:17:27,439 --> 00:17:31,000
following form

401
00:17:32,320 --> 00:17:35,200
finally we come to our main contribution

402
00:17:35,200 --> 00:17:38,880
of this workshop two-course construction

403
00:17:38,880 --> 00:17:40,720
the feed forward permutation twitch

404
00:17:40,720 --> 00:17:42,880
permutation construction also called

405
00:17:42,880 --> 00:17:45,440
fpdp construction

406
00:17:45,440 --> 00:17:47,440
so as you can see that this construction

407
00:17:47,440 --> 00:17:49,919
looks very similar to the

408
00:17:49,919 --> 00:17:50,960
um

409
00:17:50,960 --> 00:17:54,160
to the tmmo construction as before

410
00:17:54,160 --> 00:17:56,480
but the difference is that's

411
00:17:56,480 --> 00:17:59,840
a tmmo they fit forward the outputs of

412
00:17:59,840 --> 00:18:02,799
the first permutation or here we feed

413
00:18:02,799 --> 00:18:05,120
forward the input

414
00:18:05,120 --> 00:18:07,520
we can see that this small modification

415
00:18:07,520 --> 00:18:09,200
lead to a big improvement in the

416
00:18:09,200 --> 00:18:10,720
security bonds

417
00:18:10,720 --> 00:18:12,160
now the second

418
00:18:12,160 --> 00:18:14,480
second term doesn't really change so

419
00:18:14,480 --> 00:18:17,440
much the first term is really improved

420
00:18:17,440 --> 00:18:20,960
was a square root of q factor

421
00:18:20,960 --> 00:18:23,760
here the factor of b is again the number

422
00:18:23,760 --> 00:18:26,640
of suction queries per same tweak which

423
00:18:26,640 --> 00:18:29,120
is a very small number of all the entire

424
00:18:29,120 --> 00:18:31,440
circuits

425
00:18:31,440 --> 00:18:33,919
in order to achieve the security we need

426
00:18:33,919 --> 00:18:36,080
to choose the tweaks on nice

427
00:18:36,080 --> 00:18:38,720
combinatorial subsets for example a

428
00:18:38,720 --> 00:18:41,440
random subset as mentioned in the case

429
00:18:41,440 --> 00:18:43,840
of the extension protocols that we

430
00:18:43,840 --> 00:18:46,320
provide

431
00:18:47,440 --> 00:18:49,919
we prove the security for distinct

432
00:18:49,919 --> 00:18:52,720
uniform input messages

433
00:18:52,720 --> 00:18:55,679
but even in the case for arbitrarily

434
00:18:55,679 --> 00:18:58,240
input message we are able to get the

435
00:18:58,240 --> 00:19:00,799
same amount of security as long as we

436
00:19:00,799 --> 00:19:03,120
replace the input

437
00:19:03,120 --> 00:19:04,720
by um

438
00:19:04,720 --> 00:19:07,200
multiplication of the inputs with the

439
00:19:07,200 --> 00:19:08,720
input streak

440
00:19:08,720 --> 00:19:11,440
so by introducing one extra financial

441
00:19:11,440 --> 00:19:13,600
multiplication this construction

442
00:19:13,600 --> 00:19:15,440
achieves the same

443
00:19:15,440 --> 00:19:17,440
security bond for arbitrary input

444
00:19:17,440 --> 00:19:19,840
message

445
00:19:20,160 --> 00:19:22,400
so we proved the security post for two

446
00:19:22,400 --> 00:19:24,240
independent experimentations

447
00:19:24,240 --> 00:19:27,600
is when plan one is independent of i2

448
00:19:27,600 --> 00:19:30,559
and for the case when pi one is equals

449
00:19:30,559 --> 00:19:33,280
is equal to i2 for both cases the

450
00:19:33,280 --> 00:19:35,520
construction achieved security points

451
00:19:35,520 --> 00:19:38,880
provided in this slide

452
00:19:38,880 --> 00:19:42,240
this improvements of square volts q in

453
00:19:42,240 --> 00:19:44,880
the first term the given construction is

454
00:19:44,880 --> 00:19:48,480
sufficient for mu d uses the main reason

455
00:19:48,480 --> 00:19:51,360
for that is because p is usually a very

456
00:19:51,360 --> 00:19:53,919
large number so the first term will

457
00:19:53,919 --> 00:19:56,240
usually be the dominant and dominant

458
00:19:56,240 --> 00:19:57,440
term

459
00:19:57,440 --> 00:19:59,600
and and the improvements of square root

460
00:19:59,600 --> 00:20:00,559
q

461
00:20:00,559 --> 00:20:02,880
make it sufficient

462
00:20:02,880 --> 00:20:07,520
and in the form of user security

463
00:20:07,520 --> 00:20:09,440
i still want to say something about the

464
00:20:09,440 --> 00:20:12,480
big overview of this construction

465
00:20:12,480 --> 00:20:15,760
so how we can get those security bonds

466
00:20:15,760 --> 00:20:17,679
so instead of

467
00:20:17,679 --> 00:20:19,039
looking at how we can improve the

468
00:20:19,039 --> 00:20:21,440
security it's better to see how we can

469
00:20:21,440 --> 00:20:24,000
break the transmission

470
00:20:24,000 --> 00:20:26,320
so this construction can be broken when

471
00:20:26,320 --> 00:20:29,120
we can find this type of chain which is

472
00:20:29,120 --> 00:20:31,440
equal to the collision of construction

473
00:20:31,440 --> 00:20:34,240
query and subprimitive priority to the

474
00:20:34,240 --> 00:20:36,640
first permutation and primitive query to

475
00:20:36,640 --> 00:20:38,480
the same implementation but solids by

476
00:20:38,480 --> 00:20:41,760
the following two equations

477
00:20:41,760 --> 00:20:44,080
the construction can also be broken if

478
00:20:44,080 --> 00:20:47,039
we can find this type of double chain

479
00:20:47,039 --> 00:20:49,520
so which is again the correlation

480
00:20:49,520 --> 00:20:51,679
between across such a query with the

481
00:20:51,679 --> 00:20:53,919
primitive query to the first permutation

482
00:20:53,919 --> 00:20:55,600
and the primitive query to the second

483
00:20:55,600 --> 00:20:58,320
partition that satisfy the following two

484
00:20:58,320 --> 00:21:00,720
equations

485
00:21:00,720 --> 00:21:03,120
we can also predict construction by

486
00:21:03,120 --> 00:21:06,159
finding one of and this type of merchant

487
00:21:06,159 --> 00:21:08,880
chains which can be see us from the

488
00:21:08,880 --> 00:21:10,400
correlation between two cross-sectional

489
00:21:10,400 --> 00:21:12,720
queries and two primitive pairs to the

490
00:21:12,720 --> 00:21:14,960
first permutation that satisfy the

491
00:21:14,960 --> 00:21:17,600
following three equations

492
00:21:17,600 --> 00:21:20,960
and the probability that the first two

493
00:21:20,960 --> 00:21:23,840
um type of types of chase happens

494
00:21:23,840 --> 00:21:26,640
can be bounded by some cultural theorems

495
00:21:26,640 --> 00:21:29,840
which are presented in the previous work

496
00:21:29,840 --> 00:21:31,280
and the

497
00:21:31,280 --> 00:21:33,520
probability that the merchant chain

498
00:21:33,520 --> 00:21:36,480
happens can be brought by a new type of

499
00:21:36,480 --> 00:21:39,679
um also into binge lemmas

500
00:21:39,679 --> 00:21:42,840
which is presented in this

501
00:21:42,840 --> 00:21:46,799
work finally um for conclusion in this

502
00:21:46,799 --> 00:21:49,840
work we provide several new results

503
00:21:49,840 --> 00:21:52,559
where we um present concrete security

504
00:21:52,559 --> 00:21:54,720
treatment for office for previous

505
00:21:54,720 --> 00:21:56,880
transfer extension schemes

506
00:21:56,880 --> 00:21:59,039
and we also presents

507
00:21:59,039 --> 00:22:01,679
one called tccr hash function that

508
00:22:01,679 --> 00:22:04,080
achieves a typical burst type of

509
00:22:04,080 --> 00:22:05,280
security

510
00:22:05,280 --> 00:22:06,880
we also presents

511
00:22:06,880 --> 00:22:09,120
two call construction

512
00:22:09,120 --> 00:22:11,840
and two quality ccr construction

513
00:22:11,840 --> 00:22:16,400
fptp which is our main contribution that

514
00:22:16,400 --> 00:22:19,440
improves the first term of those typical

515
00:22:19,440 --> 00:22:22,799
percent type of security by a factor of

516
00:22:22,799 --> 00:22:24,840
square root of

517
00:22:24,840 --> 00:22:27,919
q for future research it will be

518
00:22:27,919 --> 00:22:29,919
interesting to look at whether we can

519
00:22:29,919 --> 00:22:32,799
improve the second term in the fpdp

520
00:22:32,799 --> 00:22:35,840
security bonds for example by improving

521
00:22:35,840 --> 00:22:37,520
this term to something

522
00:22:37,520 --> 00:22:39,440
in um like

523
00:22:39,440 --> 00:22:41,520
the power 3 divided by 2 to the power 2

524
00:22:41,520 --> 00:22:42,559
n

525
00:22:42,559 --> 00:22:44,799
it will also be interesting to

526
00:22:44,799 --> 00:22:46,720
try to formalize the mutation of the

527
00:22:46,720 --> 00:22:51,039
trig sets used in fpdp construction

528
00:22:51,039 --> 00:22:53,760
one extra direction for the future work

529
00:22:53,760 --> 00:22:56,559
is to incentive pdp construction to

530
00:22:56,559 --> 00:22:59,360
multiple runs and see how the security

531
00:22:59,360 --> 00:23:02,480
will increase with the number of

532
00:23:02,480 --> 00:23:04,000
brands

533
00:23:04,000 --> 00:23:06,080
so this is the end of my presentation i

534
00:23:06,080 --> 00:23:09,840
want to thank you for your attention

