1
00:00:05,520 --> 00:00:07,279
we more and more rely on the cloud for

2
00:00:07,279 --> 00:00:08,639
everything

3
00:00:08,639 --> 00:00:10,320
by using the cloud for

4
00:00:10,320 --> 00:00:11,920
storing data

5
00:00:11,920 --> 00:00:13,599
for using apps

6
00:00:13,599 --> 00:00:16,480
for accessing services because this is

7
00:00:16,480 --> 00:00:18,560
very convenient

8
00:00:18,560 --> 00:00:20,720
at the same time what we see are data

9
00:00:20,720 --> 00:00:22,080
breaches

10
00:00:22,080 --> 00:00:25,039
and that can be very damaging for users

11
00:00:25,039 --> 00:00:28,160
because the data that is leaked

12
00:00:28,160 --> 00:00:31,840
can be private or sensitive

13
00:00:32,079 --> 00:00:34,320
one way to address that issue would be

14
00:00:34,320 --> 00:00:36,480
to rely on fully homomorphic encryption

15
00:00:36,480 --> 00:00:39,199
or fh

16
00:00:39,760 --> 00:00:43,520
what is exactly fhe so fhe is encryption

17
00:00:43,520 --> 00:00:45,760
meaning that there is a key to encrypt

18
00:00:45,760 --> 00:00:48,000
and to decrypt

19
00:00:48,000 --> 00:00:50,239
but there is more so there is also

20
00:00:50,239 --> 00:00:51,199
public

21
00:00:51,199 --> 00:00:54,239
evaluation key that allows anyone

22
00:00:54,239 --> 00:00:56,480
given the encryption of x

23
00:00:56,480 --> 00:00:59,680
to get the encryption of f of x

24
00:00:59,680 --> 00:01:01,840
and what you see now

25
00:01:01,840 --> 00:01:04,959
is that everything is end to end

26
00:01:04,959 --> 00:01:06,159
encrypted

27
00:01:06,159 --> 00:01:07,840
so data is encrypted

28
00:01:07,840 --> 00:01:09,119
at rest

29
00:01:09,119 --> 00:01:11,200
during transit

30
00:01:11,200 --> 00:01:15,119
and even during its processing

31
00:01:15,360 --> 00:01:18,479
so in the case of data leakage so at

32
00:01:18,479 --> 00:01:20,799
best the attacker would get access to

33
00:01:20,799 --> 00:01:23,600
encrypted data

34
00:01:24,720 --> 00:01:27,200
in the setting i'm showing here so you

35
00:01:27,200 --> 00:01:29,040
see that the same key is used for

36
00:01:29,040 --> 00:01:30,960
encryption and decryption

37
00:01:30,960 --> 00:01:32,880
but of course so we can do the same in

38
00:01:32,880 --> 00:01:35,040
the public key setting

39
00:01:35,040 --> 00:01:37,439
and in the case of fhe so there is a

40
00:01:37,439 --> 00:01:39,119
very efficient way

41
00:01:39,119 --> 00:01:40,479
to convert

42
00:01:40,479 --> 00:01:41,920
any secret key

43
00:01:41,920 --> 00:01:45,520
fhe into a public key one

44
00:01:46,799 --> 00:01:49,360
the main issue so if you want to build

45
00:01:49,360 --> 00:01:52,720
or to use fhe is the noise

46
00:01:52,720 --> 00:01:57,600
so today all known instantiation of fhe

47
00:01:57,600 --> 00:02:00,320
make use of nausea suffered text

48
00:02:00,320 --> 00:02:03,520
and this is for security reason

49
00:02:03,520 --> 00:02:05,439
and the thing is that

50
00:02:05,439 --> 00:02:08,318
if the noise present in a cipher text

51
00:02:08,318 --> 00:02:09,840
becomes too i

52
00:02:09,840 --> 00:02:12,959
so at some point so the ciphertext won't

53
00:02:12,959 --> 00:02:15,760
no longer be decryptable

54
00:02:15,760 --> 00:02:17,920
so it's very important to control

55
00:02:17,920 --> 00:02:20,399
the nice

56
00:02:20,640 --> 00:02:24,239
and there are no ways to do that

57
00:02:24,239 --> 00:02:25,440
so here is

58
00:02:25,440 --> 00:02:27,520
just an example

59
00:02:27,520 --> 00:02:30,000
so assume that there is some private

60
00:02:30,000 --> 00:02:32,959
data x and you'd like to compute k times

61
00:02:32,959 --> 00:02:34,480
x

62
00:02:34,480 --> 00:02:35,680
so there are

63
00:02:35,680 --> 00:02:37,440
several approaches

64
00:02:37,440 --> 00:02:40,319
the the basic one would be to first

65
00:02:40,319 --> 00:02:42,720
get the encryption of x so enk in this

66
00:02:42,720 --> 00:02:43,599
case

67
00:02:43,599 --> 00:02:45,200
is an fhe

68
00:02:45,200 --> 00:02:46,560
and then you compute

69
00:02:46,560 --> 00:02:49,519
k that's uh times that's the ciphertext

70
00:02:49,519 --> 00:02:51,519
and that gives you the

71
00:02:51,519 --> 00:02:54,720
encryption of k times x

72
00:02:54,800 --> 00:02:57,519
but there is another way so instead what

73
00:02:57,519 --> 00:02:58,800
you could do

74
00:02:58,800 --> 00:03:01,680
is first to decompose que

75
00:03:01,680 --> 00:03:02,840
so the

76
00:03:02,840 --> 00:03:05,200
scholar then

77
00:03:05,200 --> 00:03:08,560
you obtain all the ciphertext of b to

78
00:03:08,560 --> 00:03:09,599
the i

79
00:03:09,599 --> 00:03:11,599
times x so b

80
00:03:11,599 --> 00:03:13,040
is the radix

81
00:03:13,040 --> 00:03:16,720
used for the decomposition

82
00:03:17,200 --> 00:03:19,519
then you combine all

83
00:03:19,519 --> 00:03:21,840
the ciphertext to what you do

84
00:03:21,840 --> 00:03:24,879
you compute a multi-sum and the weights

85
00:03:24,879 --> 00:03:26,799
of that multisum are just

86
00:03:26,799 --> 00:03:28,959
the digit of the decomposition

87
00:03:28,959 --> 00:03:31,120
and i mean that's quite easy to see

88
00:03:31,120 --> 00:03:32,720
so that will also give you the

89
00:03:32,720 --> 00:03:36,560
encryption of cadence x

90
00:03:36,879 --> 00:03:38,400
so what's the advantage of the second

91
00:03:38,400 --> 00:03:41,040
approach compared to the first one so

92
00:03:41,040 --> 00:03:43,440
the main advantage is the noise

93
00:03:43,440 --> 00:03:45,040
so in the first case

94
00:03:45,040 --> 00:03:48,799
so if we look at the noise

95
00:03:48,799 --> 00:03:51,200
in the resulting cipher text so we see

96
00:03:51,200 --> 00:03:51,920
that

97
00:03:51,920 --> 00:03:56,000
it is proportional to k square

98
00:03:56,000 --> 00:03:58,640
whereas in the similar approach

99
00:03:58,640 --> 00:04:01,439
the noise becomes proportional

100
00:04:01,439 --> 00:04:03,599
to the square of each digit so when you

101
00:04:03,599 --> 00:04:04,400
take

102
00:04:04,400 --> 00:04:06,000
the sum

103
00:04:06,000 --> 00:04:06,879
and

104
00:04:06,879 --> 00:04:10,239
that's quantity so the second one

105
00:04:10,239 --> 00:04:11,519
is smaller

106
00:04:11,519 --> 00:04:13,599
than the first one so we're getting the

107
00:04:13,599 --> 00:04:18,399
noise so so good approaches much better

108
00:04:19,600 --> 00:04:22,079
so what i'd like to do in this talk is

109
00:04:22,079 --> 00:04:24,400
to find the best

110
00:04:24,400 --> 00:04:26,479
possible decomposition

111
00:04:26,479 --> 00:04:29,199
so as to to minimize that quantity so

112
00:04:29,199 --> 00:04:31,280
that quantity so the sum

113
00:04:31,280 --> 00:04:33,280
of the square of the digit

114
00:04:33,280 --> 00:04:36,400
is called the euclidean weight

115
00:04:36,400 --> 00:04:38,240
and the goal

116
00:04:38,240 --> 00:04:39,440
is to find

117
00:04:39,440 --> 00:04:43,360
a decomposition that minimize that value

118
00:04:43,360 --> 00:04:45,040
so in this case

119
00:04:45,040 --> 00:04:48,080
the digit can be positive or negative

120
00:04:48,080 --> 00:04:52,080
so in the range minus b minus 1 up to b

121
00:04:52,080 --> 00:04:54,719
minus 1.

122
00:04:54,880 --> 00:04:57,280
and actually so we already know a couple

123
00:04:57,280 --> 00:04:59,280
of other uh

124
00:04:59,280 --> 00:05:02,560
pretty good decomposition so for example

125
00:05:02,560 --> 00:05:04,960
when the radix is equal to two

126
00:05:04,960 --> 00:05:07,520
so you know that we know that the naf so

127
00:05:07,520 --> 00:05:11,520
the non-adjacent firm so that one

128
00:05:11,520 --> 00:05:14,639
has the maximum number

129
00:05:14,639 --> 00:05:18,479
of uh zero digit into its decomposition

130
00:05:18,479 --> 00:05:19,919
so you cannot

131
00:05:19,919 --> 00:05:22,560
get something better

132
00:05:22,560 --> 00:05:25,600
in the case of another radix b

133
00:05:25,600 --> 00:05:28,800
so what we know is that if you decompose

134
00:05:28,800 --> 00:05:30,560
an integer

135
00:05:30,560 --> 00:05:33,039
in the range minus

136
00:05:33,039 --> 00:05:34,880
b minus 1 over 2

137
00:05:34,880 --> 00:05:35,919
up to

138
00:05:35,919 --> 00:05:39,120
b minus 1 over 2 so in that case so the

139
00:05:39,120 --> 00:05:40,960
form is balanced

140
00:05:40,960 --> 00:05:43,360
and the weight is also

141
00:05:43,360 --> 00:05:47,520
we can show that minimally in that case

142
00:05:47,840 --> 00:05:51,440
so the difficult case is when b is even

143
00:05:51,440 --> 00:05:54,320
and larger than 2.

144
00:05:54,320 --> 00:05:55,120
but

145
00:05:55,120 --> 00:05:57,520
here is a very useful observation so

146
00:05:57,520 --> 00:05:59,840
assume that you are given

147
00:05:59,840 --> 00:06:01,640
such decompositions in radix b

148
00:06:01,640 --> 00:06:02,960
[Music]

149
00:06:02,960 --> 00:06:05,600
what you can do so you can flip one

150
00:06:05,600 --> 00:06:06,639
digit

151
00:06:06,639 --> 00:06:08,800
so for example i can flip that one so i

152
00:06:08,800 --> 00:06:10,800
just

153
00:06:10,800 --> 00:06:13,360
take the opposite value

154
00:06:13,360 --> 00:06:15,360
and for that so we just have to

155
00:06:15,360 --> 00:06:16,880
propagate

156
00:06:16,880 --> 00:06:20,080
the sign of the digit to the next digit

157
00:06:20,080 --> 00:06:21,039
so

158
00:06:21,039 --> 00:06:23,600
here is an example so take for example b

159
00:06:23,600 --> 00:06:25,280
equal to 4

160
00:06:25,280 --> 00:06:27,039
so 2 2

161
00:06:27,039 --> 00:06:30,319
is a valid decomposition for 10.

162
00:06:30,319 --> 00:06:31,600
so if

163
00:06:31,600 --> 00:06:34,880
now we flip the digit so the first two

164
00:06:34,880 --> 00:06:37,199
so we get another valid decomposition

165
00:06:37,199 --> 00:06:41,280
for ten so two minus two and one

166
00:06:41,280 --> 00:06:42,800
but you can also flip

167
00:06:42,800 --> 00:06:44,400
the first digit so the the least

168
00:06:44,400 --> 00:06:46,319
significant digit in which case you get

169
00:06:46,319 --> 00:06:48,720
minus two minus one

170
00:06:48,720 --> 00:06:49,840
and one

171
00:06:49,840 --> 00:06:52,160
and actually so we can show that that

172
00:06:52,160 --> 00:06:57,599
last form has a minimal euclidean weight

173
00:06:57,599 --> 00:06:58,880
so what

174
00:06:58,880 --> 00:07:02,639
does that example tell us

175
00:07:02,639 --> 00:07:05,599
so what we'd like to do is when we have

176
00:07:05,599 --> 00:07:08,319
a 2 followed by another 2 or 2 followed

177
00:07:08,319 --> 00:07:10,720
by a minus 2 what we'd like to do is

178
00:07:10,720 --> 00:07:13,520
just to flip the digit

179
00:07:13,520 --> 00:07:15,520
and actually i mean that's a pretty good

180
00:07:15,520 --> 00:07:17,120
intuition and

181
00:07:17,120 --> 00:07:19,440
the way to get enough is almost doing

182
00:07:19,440 --> 00:07:20,479
that

183
00:07:20,479 --> 00:07:21,919
so just

184
00:07:21,919 --> 00:07:23,039
flipping

185
00:07:23,039 --> 00:07:25,759
the digits so when it is a b over two or

186
00:07:25,759 --> 00:07:27,919
a larger value depending on the next

187
00:07:27,919 --> 00:07:30,919
digit

188
00:07:31,280 --> 00:07:32,479
so this is

189
00:07:32,479 --> 00:07:34,479
the general recording algorithm so the

190
00:07:34,479 --> 00:07:36,880
input is some integer k

191
00:07:36,880 --> 00:07:39,440
and the output is the b naught of k so

192
00:07:39,440 --> 00:07:40,479
just

193
00:07:40,479 --> 00:07:42,880
a decomposition

194
00:07:42,880 --> 00:07:45,599
of k so using digits in the set

195
00:07:45,599 --> 00:07:49,599
minus b over 2 up to b over 2.

196
00:07:49,599 --> 00:07:53,120
so to you see that there is a while loop

197
00:07:53,120 --> 00:07:55,919
and at each iteration so what we do so

198
00:07:55,919 --> 00:07:57,759
we extract

199
00:07:57,759 --> 00:08:00,960
one digit of the value of scalar k

200
00:08:00,960 --> 00:08:02,879
then we update

201
00:08:02,879 --> 00:08:04,160
scalar k

202
00:08:04,160 --> 00:08:06,879
and then depending on some condition

203
00:08:06,879 --> 00:08:08,479
so we will flip

204
00:08:08,479 --> 00:08:11,440
the digit or not

205
00:08:11,440 --> 00:08:14,160
so again so let's take a look first

206
00:08:14,160 --> 00:08:17,680
at our special cases

207
00:08:17,680 --> 00:08:18,960
so first

208
00:08:18,960 --> 00:08:22,960
when b is r so radix that is our

209
00:08:22,960 --> 00:08:24,560
so in this case

210
00:08:24,560 --> 00:08:27,840
so the setting of b over 2 is covered

211
00:08:27,840 --> 00:08:30,160
by that case

212
00:08:30,160 --> 00:08:33,039
so in that case so that condition

213
00:08:33,039 --> 00:08:37,120
becomes simpler and we just get that

214
00:08:37,120 --> 00:08:39,440
and this is actually the way

215
00:08:39,440 --> 00:08:44,880
to get the balance form for b being odd

216
00:08:46,959 --> 00:08:49,279
another case so when

217
00:08:49,279 --> 00:08:51,200
b is equal to 2

218
00:08:51,200 --> 00:08:53,360
so in this case our digits cannot be

219
00:08:53,360 --> 00:08:54,560
larger than

220
00:08:54,560 --> 00:08:57,200
one strictly larger than one

221
00:08:57,200 --> 00:08:59,360
and so only the second clause of the

222
00:08:59,360 --> 00:09:00,880
condition

223
00:09:00,880 --> 00:09:03,519
will apply

224
00:09:03,760 --> 00:09:07,120
so if we now take a look at that one

225
00:09:07,120 --> 00:09:09,279
so this is equal to one when b is equal

226
00:09:09,279 --> 00:09:10,800
to two

227
00:09:10,800 --> 00:09:13,200
and it's also equal to one so what does

228
00:09:13,200 --> 00:09:16,000
that mean it means that if the digit we

229
00:09:16,000 --> 00:09:16,800
get

230
00:09:16,800 --> 00:09:18,000
is a one

231
00:09:18,000 --> 00:09:20,560
and that the next one

232
00:09:20,560 --> 00:09:24,719
will also be a one then we'll flip

233
00:09:24,800 --> 00:09:26,800
so it means that that one

234
00:09:26,800 --> 00:09:28,640
becomes minus one

235
00:09:28,640 --> 00:09:32,240
when you update k so k will become even

236
00:09:32,240 --> 00:09:34,800
and at the next iteration you see that

237
00:09:34,800 --> 00:09:37,839
you get digit equal to zero

238
00:09:37,839 --> 00:09:41,440
so just taking what two operations

239
00:09:41,440 --> 00:09:43,200
so what does that mean it means that if

240
00:09:43,200 --> 00:09:45,440
you have a one followed by another one

241
00:09:45,440 --> 00:09:46,560
then

242
00:09:46,560 --> 00:09:49,440
in the next iteration what you get is a

243
00:09:49,440 --> 00:09:53,200
minus one followed by a zero

244
00:09:53,200 --> 00:09:54,320
and so

245
00:09:54,320 --> 00:09:56,240
you see that the non

246
00:09:56,240 --> 00:09:58,480
agency form

247
00:09:58,480 --> 00:10:02,560
is what we get because the product

248
00:10:02,560 --> 00:10:05,360
of two adjacent digits will be always

249
00:10:05,360 --> 00:10:06,959
equal to zero

250
00:10:06,959 --> 00:10:09,839
in all cases

251
00:10:11,600 --> 00:10:13,600
okay

252
00:10:13,600 --> 00:10:16,959
so that's the general case when b is

253
00:10:16,959 --> 00:10:19,040
even so in that case we need the two

254
00:10:19,040 --> 00:10:20,160
clauses

255
00:10:20,160 --> 00:10:22,160
and we flip

256
00:10:22,160 --> 00:10:23,040
when

257
00:10:23,040 --> 00:10:26,000
the digit is larger than the basis of a

258
00:10:26,000 --> 00:10:27,040
two

259
00:10:27,040 --> 00:10:28,640
or

260
00:10:28,640 --> 00:10:30,880
when the value is the setting of b over

261
00:10:30,880 --> 00:10:34,079
two and the next digits is larger than

262
00:10:34,079 --> 00:10:37,040
the basis of a 2.

263
00:10:37,360 --> 00:10:40,959
so this is the general recording

264
00:10:40,959 --> 00:10:43,839
algorithm to get the bnf so it works for

265
00:10:43,839 --> 00:10:47,920
any integer and any radix b

266
00:10:47,920 --> 00:10:50,560
so you see that it's pretty efficient

267
00:10:50,560 --> 00:10:52,880
and actually quite easy to get the bnf

268
00:10:52,880 --> 00:10:54,480
decomposition

269
00:10:54,480 --> 00:10:57,680
of an integer k

270
00:10:58,800 --> 00:11:01,600
so what we show in the paper and this is

271
00:11:01,600 --> 00:11:03,760
really the domain result

272
00:11:03,760 --> 00:11:05,920
is that every

273
00:11:05,920 --> 00:11:08,000
integer has enough so we have an

274
00:11:08,000 --> 00:11:09,200
algorithm

275
00:11:09,200 --> 00:11:12,399
and that math is unique

276
00:11:12,399 --> 00:11:14,959
and more importantly

277
00:11:14,959 --> 00:11:16,480
so we prove

278
00:11:16,480 --> 00:11:18,560
that the binauf

279
00:11:18,560 --> 00:11:21,519
has the minimal eclidean weight

280
00:11:21,519 --> 00:11:24,880
among all modified radix presentation

281
00:11:24,880 --> 00:11:25,920
so meaning

282
00:11:25,920 --> 00:11:28,000
all representation

283
00:11:28,000 --> 00:11:30,320
using assigned digits

284
00:11:30,320 --> 00:11:34,399
so you cannot do better

285
00:11:36,079 --> 00:11:38,640
we also

286
00:11:38,720 --> 00:11:42,320
studied the distribution of the digit so

287
00:11:42,320 --> 00:11:45,440
assume that you have a uniformly random

288
00:11:45,440 --> 00:11:46,720
b naught

289
00:11:46,720 --> 00:11:48,480
and if you take

290
00:11:48,480 --> 00:11:49,920
one digit

291
00:11:49,920 --> 00:11:51,920
k a prime

292
00:11:51,920 --> 00:11:53,440
in that

293
00:11:53,440 --> 00:11:55,200
sequences of digits

294
00:11:55,200 --> 00:11:59,440
so it will satisfy that distribution

295
00:11:59,440 --> 00:12:00,959
so you see that

296
00:12:00,959 --> 00:12:02,800
digit 0

297
00:12:02,800 --> 00:12:04,880
has an occurrence probability that is

298
00:12:04,880 --> 00:12:06,480
higher

299
00:12:06,480 --> 00:12:09,600
digits b over 2 or minus

300
00:12:09,600 --> 00:12:12,240
b over 2 as a lower

301
00:12:12,240 --> 00:12:14,560
occurrence probability

302
00:12:14,560 --> 00:12:17,120
and all the other digits

303
00:12:17,120 --> 00:12:20,079
have a probability of

304
00:12:20,079 --> 00:12:22,480
1 over b to occur

305
00:12:22,480 --> 00:12:25,760
when the radix is odd so you see that

306
00:12:25,760 --> 00:12:27,279
all digits

307
00:12:27,279 --> 00:12:30,320
are equiprobable

308
00:12:30,399 --> 00:12:32,079
so from that

309
00:12:32,079 --> 00:12:35,040
so we did compute the expectation

310
00:12:35,040 --> 00:12:36,800
and what is nice

311
00:12:36,800 --> 00:12:37,950
is that

312
00:12:37,950 --> 00:12:39,600
[Music]

313
00:12:39,600 --> 00:12:41,600
the expectation is equal to zero so it

314
00:12:41,600 --> 00:12:42,720
means that

315
00:12:42,720 --> 00:12:45,680
we have a centered distribution

316
00:12:45,680 --> 00:12:47,680
and we also computed

317
00:12:47,680 --> 00:12:49,600
the variance which is given by this

318
00:12:49,600 --> 00:12:52,600
expression

319
00:12:53,279 --> 00:12:55,920
so in the paper so you can also

320
00:12:55,920 --> 00:12:57,120
see

321
00:12:57,120 --> 00:12:59,519
the exact distribution of an n-digit

322
00:12:59,519 --> 00:13:02,000
integer

323
00:13:04,399 --> 00:13:08,160
actually we can extend what we have done

324
00:13:08,160 --> 00:13:09,519
for integer

325
00:13:09,519 --> 00:13:11,200
to modular integer and this is

326
00:13:11,200 --> 00:13:13,920
essentially the same result so we can

327
00:13:13,920 --> 00:13:15,440
get

328
00:13:15,440 --> 00:13:17,680
the modular binary from the integer

329
00:13:17,680 --> 00:13:18,880
binauf

330
00:13:18,880 --> 00:13:20,480
and again so we can

331
00:13:20,480 --> 00:13:23,839
prove that binauf exists are unique so

332
00:13:23,839 --> 00:13:26,560
this is almost uh correct

333
00:13:26,560 --> 00:13:28,800
so from that definition

334
00:13:28,800 --> 00:13:31,600
so you see that when the first

335
00:13:31,600 --> 00:13:34,639
recorded digit is sb over 2 or

336
00:13:34,639 --> 00:13:36,720
minus b over 2 then you can flip the

337
00:13:36,720 --> 00:13:39,120
digits so in that case there are two

338
00:13:39,120 --> 00:13:42,000
possible b enough

339
00:13:42,000 --> 00:13:42,800
and

340
00:13:42,800 --> 00:13:46,480
we also have that important property

341
00:13:46,480 --> 00:13:48,079
that the binauf

342
00:13:48,079 --> 00:13:50,880
has minimal euclidean weights

343
00:13:50,880 --> 00:13:52,959
and this is key

344
00:13:52,959 --> 00:13:55,760
for application

345
00:13:58,720 --> 00:14:01,760
so that property sets the the minimal

346
00:14:01,760 --> 00:14:04,399
eclidion weight so can be used in many

347
00:14:04,399 --> 00:14:06,399
many applications so in this case i'll

348
00:14:06,399 --> 00:14:07,360
focus

349
00:14:07,360 --> 00:14:09,440
on fhe

350
00:14:09,440 --> 00:14:10,959
so something that is

351
00:14:10,959 --> 00:14:12,880
used in fhe

352
00:14:12,880 --> 00:14:14,480
to control the noise

353
00:14:14,480 --> 00:14:16,880
is to make use of a gadget decomposition

354
00:14:16,880 --> 00:14:18,560
so this is just

355
00:14:18,560 --> 00:14:21,839
a way to decompose a scholar

356
00:14:21,839 --> 00:14:23,360
into uh

357
00:14:23,360 --> 00:14:27,440
some radix based decomposition

358
00:14:27,440 --> 00:14:31,600
and in the case of lwe ciphertext

359
00:14:31,600 --> 00:14:33,920
so what really matters is the

360
00:14:33,920 --> 00:14:37,040
equilibrium weight so we have to get

361
00:14:37,040 --> 00:14:39,279
the smallest possible value for that

362
00:14:39,279 --> 00:14:42,079
weight to get the best possible noise

363
00:14:42,079 --> 00:14:43,680
control

364
00:14:43,680 --> 00:14:47,519
and because the bnf is optimal

365
00:14:47,519 --> 00:14:48,399
so

366
00:14:48,399 --> 00:14:51,120
what we have to choose for that inverse

367
00:14:51,120 --> 00:14:52,880
transformation corresponding to the

368
00:14:52,880 --> 00:14:55,199
gadget decomposition

369
00:14:55,199 --> 00:14:56,959
is uh

370
00:14:56,959 --> 00:15:00,560
to use that bin of construction

371
00:15:01,519 --> 00:15:03,279
one application of that gadget

372
00:15:03,279 --> 00:15:04,800
decomposition is the key switching so

373
00:15:04,800 --> 00:15:06,720
key switching is just

374
00:15:06,720 --> 00:15:08,399
a way to convert

375
00:15:08,399 --> 00:15:10,880
a cipher text under a key

376
00:15:10,880 --> 00:15:13,120
into another one using another key and

377
00:15:13,120 --> 00:15:14,560
possibly another

378
00:15:14,560 --> 00:15:16,399
set of parameter

379
00:15:16,399 --> 00:15:19,199
and this is done using

380
00:15:19,199 --> 00:15:21,920
key switching keys that are just

381
00:15:21,920 --> 00:15:24,880
encryption of key digits that are then

382
00:15:24,880 --> 00:15:28,480
uh scaled by a power of b so using that

383
00:15:28,480 --> 00:15:30,160
gadget decomposition

384
00:15:30,160 --> 00:15:32,880
and again so because binauf

385
00:15:32,880 --> 00:15:36,160
is optimal so this is a very a good way

386
00:15:36,160 --> 00:15:38,800
to limit the noise when doing that key

387
00:15:38,800 --> 00:15:41,839
switching operation

388
00:15:42,639 --> 00:15:46,160
another operation so fft so as you know

389
00:15:46,160 --> 00:15:48,399
fft is a very good way

390
00:15:48,399 --> 00:15:52,480
to get fast polynomial multiplication

391
00:15:52,480 --> 00:15:53,279
and

392
00:15:53,279 --> 00:15:56,000
what has been observed is that

393
00:15:56,000 --> 00:15:58,160
when the representation is balanced

394
00:15:58,160 --> 00:16:00,560
which is the case for enough

395
00:16:00,560 --> 00:16:01,759
so all

396
00:16:01,759 --> 00:16:03,120
the error

397
00:16:03,120 --> 00:16:06,800
relating to uh floating point arithmetic

398
00:16:06,800 --> 00:16:08,560
are lower

399
00:16:08,560 --> 00:16:11,680
and so this is then useful

400
00:16:11,680 --> 00:16:14,480
to use fft so it is for example using

401
00:16:14,480 --> 00:16:17,920
fuel or in tfh

402
00:16:17,920 --> 00:16:20,079
so to use those be enough

403
00:16:20,079 --> 00:16:21,440
just

404
00:16:21,440 --> 00:16:23,680
to get a reduced value of the wrong

405
00:16:23,680 --> 00:16:26,800
rundown error

406
00:16:29,199 --> 00:16:32,959
so uh to conclude and uh as a summary

407
00:16:32,959 --> 00:16:35,600
so what we

408
00:16:35,600 --> 00:16:38,320
so in this talk are that new form so the

409
00:16:38,320 --> 00:16:39,839
binauf

410
00:16:39,839 --> 00:16:42,320
we show that the naf always exists and

411
00:16:42,320 --> 00:16:43,600
is unique

412
00:16:43,600 --> 00:16:46,639
that it is optimal so meaning that the

413
00:16:46,639 --> 00:16:50,000
euclidean weight is minimal

414
00:16:50,000 --> 00:16:53,120
we also saw the digits distribution

415
00:16:53,120 --> 00:16:54,959
and we did cover a couple of

416
00:16:54,959 --> 00:16:57,519
cryptographic applications

417
00:16:57,519 --> 00:17:00,000
so if you want to know more on the topic

418
00:17:00,000 --> 00:17:01,440
so i just

419
00:17:01,440 --> 00:17:04,079
invite you to check out the paper that

420
00:17:04,079 --> 00:17:06,400
is available on the print

421
00:17:06,400 --> 00:17:09,559
thank you

