1
00:00:00,399 --> 00:00:02,640
so

2
00:00:02,879 --> 00:00:05,120
sorry now now the announcements are done

3
00:00:05,120 --> 00:00:06,879
please go ahead

4
00:00:06,879 --> 00:00:08,400
okay

5
00:00:08,400 --> 00:00:10,719
uh good morning good afternoon good

6
00:00:10,719 --> 00:00:14,920
evening everybody is youtube welcome no

7
00:00:14,920 --> 00:00:17,840
sorry no problem so

8
00:00:17,840 --> 00:00:19,520
good morning everybody good evening

9
00:00:19,520 --> 00:00:22,080
afternoon because uh depending on your

10
00:00:22,080 --> 00:00:24,000
time zone

11
00:00:24,000 --> 00:00:27,039
so welcome to the

12
00:00:27,039 --> 00:00:28,880
2021

13
00:00:28,880 --> 00:00:32,399
uh iecr distinguished lecture so i am

14
00:00:32,399 --> 00:00:34,559
michelle abdallah the current iecr

15
00:00:34,559 --> 00:00:36,640
president

16
00:00:36,640 --> 00:00:39,440
as you may know the iacr distinguished

17
00:00:39,440 --> 00:00:42,079
lecturers they have been awarded by the

18
00:00:42,079 --> 00:00:43,680
acr

19
00:00:43,680 --> 00:00:46,239
since uh 1994

20
00:00:46,239 --> 00:00:49,600
and they are usually

21
00:00:49,600 --> 00:00:51,440
awarded to people who have made

22
00:00:51,440 --> 00:00:53,760
important contributions to cryptology

23
00:00:53,760 --> 00:00:55,360
research

24
00:00:55,360 --> 00:00:57,440
so the actual venue in which these

25
00:00:57,440 --> 00:00:59,520
lectures take place they are alternate

26
00:00:59,520 --> 00:01:01,760
between the the air the general

27
00:01:01,760 --> 00:01:03,840
conferences meaning they alternate

28
00:01:03,840 --> 00:01:07,280
between eurocrypt crypto and asia crypt

29
00:01:07,280 --> 00:01:09,840
and this year

30
00:01:09,840 --> 00:01:11,760
we have the pledge to have this lecture

31
00:01:11,760 --> 00:01:13,439
at asia crypt

32
00:01:13,439 --> 00:01:16,240
so it is an immense honor for me to

33
00:01:16,240 --> 00:01:17,759
introduce

34
00:01:17,759 --> 00:01:19,040
andrew yell

35
00:01:19,040 --> 00:01:22,159
our 2021 iecr

36
00:01:22,159 --> 00:01:24,240
distinguished lecturer

37
00:01:24,240 --> 00:01:25,520
so

38
00:01:25,520 --> 00:01:27,119
just a bit of

39
00:01:27,119 --> 00:01:29,280
information though most of you are

40
00:01:29,280 --> 00:01:32,320
extremely familiar with uh andrew

41
00:01:32,320 --> 00:01:35,680
so andrew obtained a phd in physics from

42
00:01:35,680 --> 00:01:38,320
harvard in 1972

43
00:01:38,320 --> 00:01:41,280
and a phd in computer science from the

44
00:01:41,280 --> 00:01:43,439
university of illinois at ubuna

45
00:01:43,439 --> 00:01:46,720
champaign in 1975

46
00:01:46,720 --> 00:01:49,040
so he's currently the dean of the

47
00:01:49,040 --> 00:01:51,759
institute of uh for interdisciplinary

48
00:01:51,759 --> 00:01:54,079
information sciences

49
00:01:54,079 --> 00:01:57,280
at the tinchua in university

50
00:01:57,280 --> 00:02:00,399
but prior to that andrew also held

51
00:02:00,399 --> 00:02:04,479
professor positions at mit stanford uc

52
00:02:04,479 --> 00:02:07,680
berkeley and princeton

53
00:02:07,680 --> 00:02:10,720
so angel's research interest

54
00:02:10,720 --> 00:02:12,640
includes interests

55
00:02:12,640 --> 00:02:15,120
include algorithms cryptography quantum

56
00:02:15,120 --> 00:02:18,160
computer auction theory and artificial

57
00:02:18,160 --> 00:02:20,000
intelligence

58
00:02:20,000 --> 00:02:23,120
and he has made uh many fundamental and

59
00:02:23,120 --> 00:02:25,680
outstanding contributions to

60
00:02:25,680 --> 00:02:28,160
all of these areas

61
00:02:28,160 --> 00:02:29,680
uh

62
00:02:29,680 --> 00:02:32,720
and of course because of that the angel

63
00:02:32,720 --> 00:02:35,760
has received many awards during the

64
00:02:35,760 --> 00:02:37,680
during his career and here i would like

65
00:02:37,680 --> 00:02:39,360
just to mention

66
00:02:39,360 --> 00:02:41,040
uh three of them

67
00:02:41,040 --> 00:02:43,519
so first uh

68
00:02:43,519 --> 00:02:46,239
andrew received the canoes prize in

69
00:02:46,239 --> 00:02:48,640
1996.

70
00:02:48,640 --> 00:02:50,640
uh he uh

71
00:02:50,640 --> 00:02:53,519
also is well known for having received

72
00:02:53,519 --> 00:02:55,200
the training award

73
00:02:55,200 --> 00:02:56,319
in

74
00:02:56,319 --> 00:02:58,480
in 2000

75
00:02:58,480 --> 00:03:00,879
which is one of the most if not the most

76
00:03:00,879 --> 00:03:03,920
prestigious award in computer science

77
00:03:03,920 --> 00:03:06,720
and very recently this year

78
00:03:06,720 --> 00:03:09,920
he received the kyoto prize for in

79
00:03:09,920 --> 00:03:12,560
in advanced technology

80
00:03:12,560 --> 00:03:15,120
so in addition to these awards andrew is

81
00:03:15,120 --> 00:03:16,319
also

82
00:03:16,319 --> 00:03:19,599
a fellow of the american academy of arts

83
00:03:19,599 --> 00:03:21,040
and science

84
00:03:21,040 --> 00:03:23,760
a fellow of the american association for

85
00:03:23,760 --> 00:03:25,840
the advancement of science

86
00:03:25,840 --> 00:03:28,480
a fellow of the ecm

87
00:03:28,480 --> 00:03:30,959
a foreign member of the u.s national

88
00:03:30,959 --> 00:03:32,879
academy of science

89
00:03:32,879 --> 00:03:34,080
sciences

90
00:03:34,080 --> 00:03:36,159
and a member of the chinese academy of

91
00:03:36,159 --> 00:03:37,440
sciences

92
00:03:37,440 --> 00:03:40,080
so in today's lecture andrew will be

93
00:03:40,080 --> 00:03:42,879
talking about probabilistic reasoning

94
00:03:42,879 --> 00:03:46,400
and cryptography in machine learning so

95
00:03:46,400 --> 00:03:47,280
please

96
00:03:47,280 --> 00:03:50,640
join me in welcoming andrew andrea

97
00:03:50,640 --> 00:03:53,359
please andrew

98
00:03:53,920 --> 00:03:55,840
well thank you very much michelle for

99
00:03:55,840 --> 00:03:58,080
the nice introduction

100
00:03:58,080 --> 00:04:01,120
um i think that from

101
00:04:01,120 --> 00:04:04,640
now and then i i saw on my screen that

102
00:04:04,640 --> 00:04:08,400
the network is unstable so if if somehow

103
00:04:08,400 --> 00:04:09,760
during this

104
00:04:09,760 --> 00:04:11,840
next hour uh the

105
00:04:11,840 --> 00:04:15,040
connect is not quite great i i hope you

106
00:04:15,040 --> 00:04:17,760
would forgive me

107
00:04:19,040 --> 00:04:23,600
no problem it's really nice to be here

108
00:04:24,240 --> 00:04:26,479
it might help the network if you turn

109
00:04:26,479 --> 00:04:28,960
off your camera

110
00:04:28,960 --> 00:04:32,080
uh can you hear me oh turn off my camera

111
00:04:32,080 --> 00:04:35,199
yeah it might help the network oh oh oh

112
00:04:35,199 --> 00:04:36,400
yeah

113
00:04:36,400 --> 00:04:38,479
let me see how do i

114
00:04:38,479 --> 00:04:40,720
i i i i

115
00:04:40,720 --> 00:04:43,840
i'll stop video yes

116
00:04:43,840 --> 00:04:45,280
okay

117
00:04:45,280 --> 00:04:48,719
well great suggestion

118
00:04:49,199 --> 00:04:53,400
now i know why you are the chair

119
00:05:01,680 --> 00:05:05,320
except it didn't work

120
00:05:12,240 --> 00:05:13,039
okay

121
00:05:13,039 --> 00:05:16,240
as you can see that

122
00:05:17,199 --> 00:05:18,880
that these two subjects

123
00:05:18,880 --> 00:05:22,160
look very different to cryptography and

124
00:05:22,160 --> 00:05:24,400
machine learning but

125
00:05:24,400 --> 00:05:27,440
they are tied together

126
00:05:27,680 --> 00:05:30,160
by the

127
00:05:33,199 --> 00:05:35,039
being used often

128
00:05:35,039 --> 00:05:35,840
and

129
00:05:35,840 --> 00:05:38,479
i'm very interested in this subject

130
00:05:38,479 --> 00:05:40,560
and so today i'd like to

131
00:05:40,560 --> 00:05:41,840
talk about

132
00:05:41,840 --> 00:05:43,360
uh the

133
00:05:43,360 --> 00:05:45,840
an open problem called the decay quality

134
00:05:45,840 --> 00:05:49,280
problem in cryptography which has to do

135
00:05:49,280 --> 00:05:50,400
with the

136
00:05:50,400 --> 00:05:51,199
uh

137
00:05:51,199 --> 00:05:55,120
the the the loss of of privacy amount

138
00:05:55,120 --> 00:05:57,280
and the other subject is about

139
00:05:57,280 --> 00:05:59,759
some mathematical aspect of the kernel

140
00:05:59,759 --> 00:06:04,039
method of machine learning

141
00:06:06,240 --> 00:06:08,080
i'm going to

142
00:06:08,080 --> 00:06:09,120
discuss

143
00:06:09,120 --> 00:06:11,199
a very classical

144
00:06:11,199 --> 00:06:14,880
uh clear party k equality communication

145
00:06:14,880 --> 00:06:17,360
problem which has been open for some

146
00:06:17,360 --> 00:06:18,800
time

147
00:06:18,800 --> 00:06:21,919
and i will introduce the problem

148
00:06:21,919 --> 00:06:25,120
and uh then i'm going to tie this k

149
00:06:25,120 --> 00:06:28,160
party problem to a coding problem and so

150
00:06:28,160 --> 00:06:29,440
i would

151
00:06:29,440 --> 00:06:32,400
analyze the protocols and introducing

152
00:06:32,400 --> 00:06:36,160
something called a distributed xor code

153
00:06:36,160 --> 00:06:39,039
and uh proving something about this

154
00:06:39,039 --> 00:06:43,120
extra code and using that

155
00:06:45,759 --> 00:06:48,479
this coding result

156
00:06:48,479 --> 00:06:49,599
and to

157
00:06:49,599 --> 00:06:50,960
begin with

158
00:06:50,960 --> 00:06:54,240
we are interested in this multi-party

159
00:06:54,240 --> 00:06:58,160
computation setting k parties uh want to

160
00:06:58,160 --> 00:07:00,960
compute a function with with

161
00:07:00,960 --> 00:07:04,880
all their different ambit private data

162
00:07:04,880 --> 00:07:07,599
and that they would like to dysfunction

163
00:07:07,599 --> 00:07:10,719
using the protocols

164
00:07:13,520 --> 00:07:14,880
i went through

165
00:07:14,880 --> 00:07:17,840
a few rounds for

166
00:07:20,160 --> 00:07:22,800
protocols what's the best

167
00:07:22,800 --> 00:07:25,599
protocol that

168
00:07:28,880 --> 00:07:30,639
approaches problem

169
00:07:30,639 --> 00:07:33,120
is called communication complexity which

170
00:07:33,120 --> 00:07:36,960
was proposed in 1979 to address some

171
00:07:36,960 --> 00:07:41,039
aspect of these questions

172
00:07:42,840 --> 00:07:46,319
and across many areas including

173
00:07:46,319 --> 00:07:50,639
cryptography for example the

174
00:07:54,800 --> 00:07:56,160
do some

175
00:07:56,160 --> 00:08:00,160
multi-party computation uh can also be

176
00:08:00,160 --> 00:08:03,599
regarded as uh what's the amount of

177
00:08:03,599 --> 00:08:07,840
inevitable privacy laws about the data

178
00:08:07,840 --> 00:08:09,360
that you have to

179
00:08:09,360 --> 00:08:11,360
you have to leak if somebody is

180
00:08:11,360 --> 00:08:13,840
listening

181
00:08:16,560 --> 00:08:20,879
that i will be focusing on is the

182
00:08:20,879 --> 00:08:22,720
k equality problem

183
00:08:22,720 --> 00:08:25,440
so we have

184
00:08:25,440 --> 00:08:27,039
k processors

185
00:08:27,039 --> 00:08:30,000
and then a referee so that's the p k

186
00:08:30,000 --> 00:08:31,360
plus one

187
00:08:31,360 --> 00:08:33,919
and uh there's a certain function g

188
00:08:33,919 --> 00:08:37,478
that uh

189
00:08:40,399 --> 00:08:41,360
the

190
00:08:41,360 --> 00:08:45,200
processor pi would send a

191
00:08:45,200 --> 00:08:48,320
a randomized string

192
00:08:48,320 --> 00:08:49,440
ri

193
00:08:49,440 --> 00:08:50,959
to the referee

194
00:08:50,959 --> 00:08:54,240
and the processor at the referee after

195
00:08:54,240 --> 00:08:55,600
collecting

196
00:08:55,600 --> 00:08:58,160
all the uh strings that has been

197
00:08:58,160 --> 00:08:59,200
submitted

198
00:08:59,200 --> 00:09:01,839
uh then we'll use the function g in

199
00:09:01,839 --> 00:09:06,320
order to decide whether the exclusive or

200
00:09:06,320 --> 00:09:11,040
of this k strings bit by bit

201
00:09:11,040 --> 00:09:13,199
is

202
00:09:20,720 --> 00:09:23,279
so that the function would be exactly

203
00:09:23,279 --> 00:09:24,080
the

204
00:09:24,080 --> 00:09:27,519
parity function of these ambit strings

205
00:09:27,519 --> 00:09:30,240
and uh the interesting case

206
00:09:30,240 --> 00:09:31,760
is that we are

207
00:09:31,760 --> 00:09:35,120
allowing randomized algorithm and also

208
00:09:35,120 --> 00:09:36,560
we are allowing

209
00:09:36,560 --> 00:09:37,680
a certain

210
00:09:37,680 --> 00:09:39,200
error epsilon

211
00:09:39,200 --> 00:09:41,519
and the communication cost is the

212
00:09:41,519 --> 00:09:43,519
maximum length of the string or

213
00:09:43,519 --> 00:09:46,080
sometimes

214
00:09:48,959 --> 00:09:51,440
and the communication complexity is the

215
00:09:51,440 --> 00:09:54,160
minimum communication is the minimum

216
00:09:54,160 --> 00:09:56,560
combination cost in terms of the number

217
00:09:56,560 --> 00:09:59,920
of bits of any uh such k party

218
00:09:59,920 --> 00:10:02,240
algorithms and we are

219
00:10:02,240 --> 00:10:03,279
interested

220
00:10:03,279 --> 00:10:04,640
focused on

221
00:10:04,640 --> 00:10:05,680
the

222
00:10:05,680 --> 00:10:08,480
simplest possible model the simultaneous

223
00:10:08,480 --> 00:10:11,839
message model in which only one round

224
00:10:11,839 --> 00:10:14,720
of communication takes place and then

225
00:10:14,720 --> 00:10:16,079
designed

226
00:10:16,079 --> 00:10:19,439
and let's use the simple

227
00:10:22,079 --> 00:10:25,760
complexity for the

228
00:10:25,839 --> 00:10:27,120
quality

229
00:10:27,120 --> 00:10:30,120
problem

230
00:10:32,000 --> 00:10:36,640
and for k equal to 2 it's been known for

231
00:10:36,640 --> 00:10:38,160
for a long time

232
00:10:38,160 --> 00:10:40,560
almost 25 years

233
00:10:40,560 --> 00:10:41,760
that

234
00:10:41,760 --> 00:10:44,560
there is a non-obvious

235
00:10:44,560 --> 00:10:45,680
solution

236
00:10:45,680 --> 00:10:48,800
that takes square root of n bits

237
00:10:48,800 --> 00:10:50,480
by the

238
00:10:50,480 --> 00:10:51,839
two parties

239
00:10:51,839 --> 00:10:52,640
and

240
00:10:52,640 --> 00:10:56,079
also it was wow

241
00:10:58,160 --> 00:10:59,600
the optimal

242
00:10:59,600 --> 00:11:02,640
complexity of the question so there is a

243
00:11:02,640 --> 00:11:03,680
long list

244
00:11:03,680 --> 00:11:06,560
starting with the

245
00:11:06,560 --> 00:11:10,079
96 and 97 bubba and the chemo and bonus

246
00:11:10,079 --> 00:11:11,519
paper and

247
00:11:11,519 --> 00:11:14,399
there are many versions and variants and

248
00:11:14,399 --> 00:11:17,200
uh and also notably there's a recently

249
00:11:17,200 --> 00:11:22,000
very uh relatively recent uh paper by uh

250
00:11:22,000 --> 00:11:25,279
bots gavinsky and the clock

251
00:11:25,279 --> 00:11:28,640
in 2015 that

252
00:11:28,640 --> 00:11:31,680
gives a very ingenious nice proof of the

253
00:11:31,680 --> 00:11:33,360
of the of the result

254
00:11:33,360 --> 00:11:34,160
for

255
00:11:34,160 --> 00:11:36,000
k greater than two

256
00:11:36,000 --> 00:11:38,560
uh it's easy to see that one can

257
00:11:38,560 --> 00:11:40,959
generalize the known construction so

258
00:11:40,959 --> 00:11:43,279
that it will be instead of n

259
00:11:43,279 --> 00:11:46,720
to the one half you

260
00:11:49,200 --> 00:11:52,959
0 is a bigger power of n

261
00:11:52,959 --> 00:11:55,519
when k becomes larger

262
00:11:55,519 --> 00:11:57,440
and

263
00:11:57,440 --> 00:11:58,480
the

264
00:11:58,480 --> 00:12:01,279
however the optimality question remains

265
00:12:01,279 --> 00:12:02,079
open

266
00:12:02,079 --> 00:12:05,120
uh since that early times and there were

267
00:12:05,120 --> 00:12:08,800
partial results along the way but

268
00:12:09,519 --> 00:12:11,600
that the general question has been

269
00:12:11,600 --> 00:12:14,639
opened for love for a long time

270
00:12:14,639 --> 00:12:16,880
and uh in this talk i would like to

271
00:12:16,880 --> 00:12:19,440
focus on this problem and show that

272
00:12:19,440 --> 00:12:22,639
actually this upper bound is also a

273
00:12:22,639 --> 00:12:25,440
lower bound

274
00:12:25,440 --> 00:12:27,920
and so as i mentioned that's the way

275
00:12:27,920 --> 00:12:30,079
that

276
00:12:33,040 --> 00:12:36,920
from the k party problem

277
00:12:38,320 --> 00:12:41,839
third parties and and uh think it think

278
00:12:41,839 --> 00:12:42,880
about it

279
00:12:42,880 --> 00:12:45,920
from the coding perspective and because

280
00:12:45,920 --> 00:12:48,160
then that code will

281
00:12:48,160 --> 00:12:50,320
have some restrictions on the structure

282
00:12:50,320 --> 00:12:54,880
of the code which is made may make it

283
00:12:57,279 --> 00:13:00,480
and uh to begin with let's uh discuss

284
00:13:00,480 --> 00:13:03,920
the uh the concept of coding for a one

285
00:13:03,920 --> 00:13:06,720
party is a kind of standard type of code

286
00:13:06,720 --> 00:13:09,760
but we're interested in randomized code

287
00:13:09,760 --> 00:13:13,440
and so a code would be a collection

288
00:13:13,440 --> 00:13:15,200
of distributions

289
00:13:15,200 --> 00:13:16,320
rho

290
00:13:16,320 --> 00:13:18,560
sub x where

291
00:13:18,560 --> 00:13:21,519
x is any input string

292
00:13:21,519 --> 00:13:24,800
so this is a collection of distributions

293
00:13:24,800 --> 00:13:26,240
uh over

294
00:13:26,240 --> 00:13:27,279
a

295
00:13:27,279 --> 00:13:30,320
output string so if the message you want

296
00:13:30,320 --> 00:13:33,600
to send is n bit long then this would be

297
00:13:33,600 --> 00:13:36,399
a uh each of the row f's would be a

298
00:13:36,399 --> 00:13:40,240
distribution uh over the input strings

299
00:13:40,240 --> 00:13:43,120
so in other words uh if the

300
00:13:43,120 --> 00:13:45,040
uh if i see a

301
00:13:45,040 --> 00:13:48,240
string input

302
00:13:52,720 --> 00:13:54,160
to generate

303
00:13:54,160 --> 00:13:58,320
a a probability a a random string

304
00:13:58,320 --> 00:14:00,800
and i will be focused on

305
00:14:00,800 --> 00:14:04,800
the particular the case that the input x

306
00:14:04,800 --> 00:14:07,760
will be a uniform rendering input and uh

307
00:14:07,760 --> 00:14:10,399
of course in general it could be some

308
00:14:10,399 --> 00:14:12,160
other distributions but i think for the

309
00:14:12,160 --> 00:14:14,160
purpose of this talk

310
00:14:14,160 --> 00:14:17,680
we will focus on the case when the a

311
00:14:17,680 --> 00:14:20,880
random variable x is a bit string it's a

312
00:14:20,880 --> 00:14:22,639
uniform random input

313
00:14:22,639 --> 00:14:24,160
and if i take

314
00:14:24,160 --> 00:14:25,519
uh

315
00:14:25,519 --> 00:14:26,240
t

316
00:14:26,240 --> 00:14:28,639
iit samples according to the

317
00:14:28,639 --> 00:14:31,639
distribution

318
00:14:32,560 --> 00:14:33,600
then

319
00:14:33,600 --> 00:14:36,880
the receiver will learn about x

320
00:14:36,880 --> 00:14:38,560
more and more

321
00:14:38,560 --> 00:14:40,800
so

322
00:14:41,360 --> 00:14:44,320
that means that the entropy of x from

323
00:14:44,320 --> 00:14:46,320
the point of view of the receiver

324
00:14:46,320 --> 00:14:48,880
would decreases more

325
00:14:48,880 --> 00:14:52,560
as more samples are

326
00:14:55,680 --> 00:14:58,480
at what point

327
00:14:58,480 --> 00:15:00,560
would the

328
00:15:00,560 --> 00:15:01,600
the

329
00:15:01,600 --> 00:15:04,079
the the random variable

330
00:15:04,079 --> 00:15:05,360
uh would

331
00:15:05,360 --> 00:15:08,800
develop collisions

332
00:15:08,800 --> 00:15:12,560
in the sense that the entropy of x gets

333
00:15:12,560 --> 00:15:13,680
uh

334
00:15:13,680 --> 00:15:17,440
smaller that something happens end of us

335
00:15:17,440 --> 00:15:21,519
the collision threshold of row to be

336
00:15:21,519 --> 00:15:24,720
ct of row which is the minimal

337
00:15:24,720 --> 00:15:27,839
number of messages that the receiver has

338
00:15:27,839 --> 00:15:31,040
to receive before

339
00:15:31,040 --> 00:15:33,440
there will be significant collision

340
00:15:33,440 --> 00:15:37,800
taking place according to

341
00:15:40,079 --> 00:15:43,920
the samples so uh more precisely is just

342
00:15:43,920 --> 00:15:45,199
the minimal t

343
00:15:45,199 --> 00:15:47,199
so that if i take

344
00:15:47,199 --> 00:15:49,440
two random samples according to this

345
00:15:49,440 --> 00:15:51,360
distribution mu t

346
00:15:51,360 --> 00:15:52,639
uh

347
00:15:52,639 --> 00:15:55,360
what's the probability of getting a

348
00:15:55,360 --> 00:15:57,199
collision

349
00:15:57,199 --> 00:15:58,160
and uh

350
00:15:58,160 --> 00:15:59,120
so

351
00:15:59,120 --> 00:16:00,079
of course

352
00:16:00,079 --> 00:16:01,920
uh there are many different thresholds

353
00:16:01,920 --> 00:16:03,040
one can

354
00:16:03,040 --> 00:16:05,839
look and and for different purposes uh

355
00:16:05,839 --> 00:16:08,399
but here today we'll just focus on this

356
00:16:08,399 --> 00:16:10,560
particular

357
00:16:10,560 --> 00:16:12,079
threshold

358
00:16:12,079 --> 00:16:12,800
and

359
00:16:12,800 --> 00:16:15,040
now

360
00:16:15,440 --> 00:16:16,240
what

361
00:16:16,240 --> 00:16:21,560
so next i would like to introduce some

362
00:16:23,279 --> 00:16:25,440
a fairly high

363
00:16:25,440 --> 00:16:27,920
threshold and uh

364
00:16:27,920 --> 00:16:29,360
and this is going

365
00:16:29,360 --> 00:16:31,759
uh turn out to be the key to lower

366
00:16:31,759 --> 00:16:34,800
bounding the communication complexity of

367
00:16:34,800 --> 00:16:36,880
the k equality

368
00:16:36,880 --> 00:16:39,360
problem

369
00:16:48,160 --> 00:16:51,839
i seem to have a little

370
00:16:53,920 --> 00:16:55,360
we can hear it

371
00:16:55,360 --> 00:16:57,279
i think i think my connection is a

372
00:16:57,279 --> 00:16:59,120
little bit unstable

373
00:16:59,120 --> 00:17:02,000
so that i can i cannot uh

374
00:17:02,000 --> 00:17:02,720
it

375
00:17:02,720 --> 00:17:05,119
i think it's okay like uh sometimes it

376
00:17:05,119 --> 00:17:08,000
cuts a bit but i think uh most of all i

377
00:17:08,000 --> 00:17:10,640
think it is okay okay thank you we are

378
00:17:10,640 --> 00:17:12,079
able to follow

379
00:17:12,079 --> 00:17:15,679
okay so i'll i'll continue uh

380
00:17:15,679 --> 00:17:16,720
now

381
00:17:16,720 --> 00:17:19,599
uh i'm going to to to

382
00:17:19,599 --> 00:17:20,400
to

383
00:17:20,400 --> 00:17:22,400
construct a

384
00:17:22,400 --> 00:17:24,720
class of codes with the following

385
00:17:24,720 --> 00:17:27,280
description

386
00:17:30,240 --> 00:17:31,440
suppose

387
00:17:31,440 --> 00:17:34,720
i can construct uh something called

388
00:17:34,720 --> 00:17:39,919
uh x uh xor code based on these the

389
00:17:39,919 --> 00:17:43,520
randomized codes uh denoted by row tilde

390
00:17:43,520 --> 00:17:46,400
is this collection and each one of them

391
00:17:46,400 --> 00:17:48,799
is a randomized code and so

392
00:17:48,799 --> 00:17:50,640
in order to

393
00:17:50,640 --> 00:17:53,840
code a input string w

394
00:17:53,840 --> 00:17:56,080
for the

395
00:17:56,080 --> 00:17:57,039
code

396
00:17:57,039 --> 00:18:00,200
raw data

397
00:18:02,080 --> 00:18:05,360
i would randomly decompose w into this

398
00:18:05,360 --> 00:18:07,039
exclusive or sum

399
00:18:07,039 --> 00:18:09,520
of k random strings and so with the

400
00:18:09,520 --> 00:18:12,799
constraint that they add up to w

401
00:18:12,799 --> 00:18:17,840
and secondly i would generate

402
00:18:20,400 --> 00:18:24,799
a random string according to the row i

403
00:18:24,799 --> 00:18:26,400
based on fsi

404
00:18:26,400 --> 00:18:29,840
and then output the collection of k

405
00:18:29,840 --> 00:18:31,200
random strings

406
00:18:31,200 --> 00:18:35,200
as the uh output of this uh

407
00:18:35,200 --> 00:18:36,880
xor code

408
00:18:36,880 --> 00:18:38,240
and uh

409
00:18:38,240 --> 00:18:43,200
we would refer to the length m1 m2 mma

410
00:18:43,200 --> 00:18:44,160
of the

411
00:18:44,160 --> 00:18:46,640
random strings as the shape

412
00:18:46,640 --> 00:18:49,600
of the xor code

413
00:18:49,600 --> 00:18:51,520
and so

414
00:18:51,520 --> 00:18:54,160
now the following theorem shows that the

415
00:18:54,160 --> 00:18:58,640
xor code is quite resilient

416
00:19:02,080 --> 00:19:04,000
and the theorem can alternatively be

417
00:19:04,000 --> 00:19:07,440
viewed as an extension of the x-star

418
00:19:07,440 --> 00:19:08,480
lemma

419
00:19:08,480 --> 00:19:11,520
so uh what is said is this

420
00:19:11,520 --> 00:19:14,400
if if if row tilter be

421
00:19:14,400 --> 00:19:18,480
uh any input k actual code with shape

422
00:19:18,480 --> 00:19:21,600
parameters 1 m1 to mk

423
00:19:21,600 --> 00:19:22,480
then

424
00:19:22,480 --> 00:19:24,960
theorem 1 says the

425
00:19:24,960 --> 00:19:28,080
collision threshold of this code

426
00:19:28,080 --> 00:19:28,880
uh

427
00:19:28,880 --> 00:19:32,160
is has very high threshold so if you can

428
00:19:32,160 --> 00:19:36,799
see that if m1 to mk they are

429
00:19:36,799 --> 00:19:40,799
much less than n then

430
00:19:43,520 --> 00:19:44,799
develop

431
00:19:44,799 --> 00:19:47,360
collision so in other words if someone

432
00:19:47,360 --> 00:19:50,080
leaks the information

433
00:19:50,080 --> 00:19:51,679
of the

434
00:19:51,679 --> 00:19:53,679
of the message

435
00:19:53,679 --> 00:19:56,720
of the by

436
00:19:57,760 --> 00:19:59,760
for

437
00:19:59,760 --> 00:20:01,280
for for each eye

438
00:20:01,280 --> 00:20:03,200
getting some information

439
00:20:03,200 --> 00:20:07,240
about the the the

440
00:20:07,440 --> 00:20:10,240
about the information xi then all

441
00:20:10,240 --> 00:20:13,679
together they will review uh

442
00:20:13,679 --> 00:20:18,240
so little information about the original

443
00:20:18,240 --> 00:20:21,520
input w that uh you can get very little

444
00:20:21,520 --> 00:20:24,240
information about it and uh

445
00:20:24,240 --> 00:20:26,320
that

446
00:20:26,320 --> 00:20:28,640
is the essence that uh

447
00:20:28,640 --> 00:20:30,159
you you can use it

448
00:20:30,159 --> 00:20:34,799
the basic idea to show that the

449
00:20:44,159 --> 00:20:46,080
kind of delete the message

450
00:20:46,080 --> 00:20:47,919
uh

451
00:20:47,919 --> 00:20:49,520
kind of separately

452
00:20:49,520 --> 00:20:51,679
uh then it will take a long time before

453
00:20:51,679 --> 00:20:54,640
you learn anything about it

454
00:20:54,640 --> 00:20:56,960
and uh in a way that's the

455
00:20:56,960 --> 00:20:58,400
main technical

456
00:20:58,400 --> 00:20:59,360
uh

457
00:20:59,360 --> 00:21:00,799
theorem

458
00:21:00,799 --> 00:21:02,880
uh but then

459
00:21:02,880 --> 00:21:05,679
it it takes a lot

460
00:21:05,679 --> 00:21:06,960
of it to

461
00:21:06,960 --> 00:21:11,080
make it work okay

462
00:21:21,360 --> 00:21:23,120
yeah i i think you probably can still

463
00:21:23,120 --> 00:21:26,559
hear me but i cannot yeah not yes we can

464
00:21:26,559 --> 00:21:28,080
hear you

465
00:21:28,080 --> 00:21:31,280
okay and and and now we're going to use

466
00:21:31,280 --> 00:21:33,679
it in order to show the

467
00:21:33,679 --> 00:21:34,880
uh

468
00:21:34,880 --> 00:21:37,520
the complexity about the

469
00:21:37,520 --> 00:21:38,400
uh

470
00:21:38,400 --> 00:21:41,520
k equality uh communication complexity

471
00:21:41,520 --> 00:21:44,320
problem and so the theorem two is to

472
00:21:44,320 --> 00:21:46,799
show that

473
00:21:53,760 --> 00:21:55,600
uh algorithms

474
00:21:55,600 --> 00:21:58,400
that that you can have in terms of order

475
00:21:58,400 --> 00:21:59,760
of magnitude

476
00:21:59,760 --> 00:22:02,320
and uh now the

477
00:22:02,320 --> 00:22:04,240
the the the essence

478
00:22:04,240 --> 00:22:07,440
uh is that a protocol for the k equality

479
00:22:07,440 --> 00:22:10,559
problem can be interpreted

480
00:22:10,559 --> 00:22:13,039
an algorithm for solving the two

481
00:22:13,039 --> 00:22:16,080
equality problems so can reduce the k

482
00:22:16,080 --> 00:22:18,880
equality problem to a two quantity

483
00:22:18,880 --> 00:22:22,080
equality problem which uh as we said uh

484
00:22:22,080 --> 00:22:23,919
has been well studied and we have a lot

485
00:22:23,919 --> 00:22:25,440
of insight about it

486
00:22:25,440 --> 00:22:26,799
and and

487
00:22:26,799 --> 00:22:30,000
the deduction is that the two player the

488
00:22:30,000 --> 00:22:32,799
first player is the original first

489
00:22:32,799 --> 00:22:34,799
player so it's using

490
00:22:34,799 --> 00:22:36,240
m1 bits

491
00:22:36,240 --> 00:22:38,400
and all the other k-minus one other

492
00:22:38,400 --> 00:22:40,640
players are collectively

493
00:22:40,640 --> 00:22:44,240
uh controlled by a single player

494
00:22:44,240 --> 00:22:46,400
and

495
00:22:46,559 --> 00:22:47,679
now

496
00:22:47,679 --> 00:22:49,039
on the other hand

497
00:22:49,039 --> 00:22:53,120
because of the nature of the the k-party

498
00:22:53,120 --> 00:22:55,600
set up that the player

499
00:22:55,600 --> 00:22:56,400
b

500
00:22:56,400 --> 00:22:59,760
uh is committed to using a k minus

501
00:22:59,760 --> 00:23:03,600
one extra code uh with the shape uh

502
00:23:03,600 --> 00:23:09,080
given by the individual uh players

503
00:23:12,640 --> 00:23:14,000
the the

504
00:23:14,000 --> 00:23:15,200
the length

505
00:23:15,200 --> 00:23:18,159
of the bit the player sent

506
00:23:18,159 --> 00:23:20,159
has to be

507
00:23:20,159 --> 00:23:22,720
greater than the collision

508
00:23:22,720 --> 00:23:24,159
threshold

509
00:23:24,159 --> 00:23:25,200
of the

510
00:23:25,200 --> 00:23:26,080
uh

511
00:23:26,080 --> 00:23:28,320
a1 extra code

512
00:23:28,320 --> 00:23:29,280
of the

513
00:23:29,280 --> 00:23:32,720
second player so uh that's a result that

514
00:23:32,720 --> 00:23:35,600
uh the the the voltage

515
00:23:35,600 --> 00:23:37,120
in the paper that i mentioned

516
00:23:37,120 --> 00:23:40,320
they use that idea

517
00:23:45,279 --> 00:23:48,279
so

518
00:23:50,559 --> 00:23:53,039
and use theorem 1

519
00:23:53,039 --> 00:23:53,919
to

520
00:23:53,919 --> 00:23:56,080
us

521
00:24:00,240 --> 00:24:03,440
n to the k minus 1 divided by the

522
00:24:03,440 --> 00:24:06,320
product of the messages and therefore

523
00:24:06,320 --> 00:24:08,960
now use the

524
00:24:11,039 --> 00:24:14,320
the total number of message

525
00:24:17,120 --> 00:24:19,840
sum

526
00:24:22,320 --> 00:24:25,039
no result

527
00:24:31,360 --> 00:24:33,520
uh

528
00:24:35,760 --> 00:24:39,440
yeah i think that i'm still

529
00:24:39,520 --> 00:24:42,240
yeah this last part i could not hear

530
00:24:42,240 --> 00:24:44,320
much

531
00:24:44,320 --> 00:24:48,080
but it's okay i can't hear you back now

532
00:24:56,240 --> 00:24:57,919
can you hear me or not

533
00:24:57,919 --> 00:24:59,520
that's why

534
00:24:59,520 --> 00:25:03,840
uh divided why reduce it to uh two party

535
00:25:03,840 --> 00:25:05,760
uh and and indeed

536
00:25:05,760 --> 00:25:09,120
uh alternatively it's possible to regard

537
00:25:09,120 --> 00:25:11,600
the decay equality problem

538
00:25:11,600 --> 00:25:13,000
as a

539
00:25:13,000 --> 00:25:15,600
one-party problem

540
00:25:15,600 --> 00:25:16,640
except

541
00:25:16,640 --> 00:25:19,279
at this time it's not the if the k

542
00:25:19,279 --> 00:25:20,799
equality

543
00:25:20,799 --> 00:25:23,120
sorry

544
00:25:25,520 --> 00:25:28,480
testing problem uh the k

545
00:25:28,480 --> 00:25:32,000
xor codes and it's possible to use that

546
00:25:32,000 --> 00:25:35,600
approach to derive the bounds that we

547
00:25:35,600 --> 00:25:36,559
mentioned

548
00:25:36,559 --> 00:25:39,120
except i think it's more natural to do

549
00:25:39,120 --> 00:25:41,679
it with the two-party case because the

550
00:25:41,679 --> 00:25:43,840
zero testing i think it just seems to be

551
00:25:43,840 --> 00:25:45,760
such a trivial problem how can you get

552
00:25:45,760 --> 00:25:49,919
any lower bound but i i think that

553
00:25:49,919 --> 00:25:52,000
okay so this uh

554
00:25:52,000 --> 00:25:53,200
that's the

555
00:25:53,200 --> 00:25:54,240
the part

556
00:25:54,240 --> 00:25:57,600
about the uh my first topic i want to

557
00:25:57,600 --> 00:26:00,960
say and the second topic i'd like to say

558
00:26:00,960 --> 00:26:03,039
is something about the machine learning

559
00:26:03,039 --> 00:26:04,880
algorithm and

560
00:26:04,880 --> 00:26:08,440
i think it actually

561
00:26:11,200 --> 00:26:12,640
very exciting

562
00:26:12,640 --> 00:26:14,000
uh trend

563
00:26:14,000 --> 00:26:16,720
and because from the algorithmic point

564
00:26:16,720 --> 00:26:20,080
of view it really emphasizes a different

565
00:26:20,080 --> 00:26:22,080
algorithmic paradigm

566
00:26:22,080 --> 00:26:26,320
and uh it it has wide applicability but

567
00:26:26,320 --> 00:26:29,440
uh very uh little theoretical

568
00:26:29,440 --> 00:26:30,799
understanding

569
00:26:30,799 --> 00:26:34,000
and so the research issue is that to

570
00:26:34,000 --> 00:26:37,279
explain the behavior of machine learning

571
00:26:37,279 --> 00:26:39,840
whether it's good or where or why it

572
00:26:39,840 --> 00:26:42,559
doesn't work and these are challenging

573
00:26:42,559 --> 00:26:43,520
problem

574
00:26:43,520 --> 00:26:45,679
for

575
00:26:48,320 --> 00:26:51,039
today is a new algorithmic paradigm

576
00:26:51,039 --> 00:26:52,559
because

577
00:26:52,559 --> 00:26:54,159
for many years

578
00:26:54,159 --> 00:26:56,159
that that we

579
00:26:56,159 --> 00:26:57,520
we tend to think

580
00:26:57,520 --> 00:27:00,559
about the design of algorithms

581
00:27:00,559 --> 00:27:02,000
is a

582
00:27:02,000 --> 00:27:04,400
it's a logical process basically we will

583
00:27:04,400 --> 00:27:05,679
take a problem

584
00:27:05,679 --> 00:27:08,240
and we would try to understand it

585
00:27:08,240 --> 00:27:10,720
to every

586
00:27:11,279 --> 00:27:14,720
mathematical structure of knowledge

587
00:27:14,720 --> 00:27:15,520
and

588
00:27:15,520 --> 00:27:18,399
then we would design an algorithm and we

589
00:27:18,399 --> 00:27:20,640
know beforehand that the algorithm

590
00:27:20,640 --> 00:27:24,320
definitely would work and quite often

591
00:27:24,320 --> 00:27:27,520
with the explicit analysis of of the

592
00:27:27,520 --> 00:27:30,000
performance guarantees however the

593
00:27:30,000 --> 00:27:33,399
machine learnings

594
00:27:35,679 --> 00:27:38,720
plausible way to do things and uh

595
00:27:38,720 --> 00:27:42,080
applied to things that that might not

596
00:27:42,080 --> 00:27:44,720
have a really good reason for it to work

597
00:27:44,720 --> 00:27:47,120
but it turns out a lot of times that

598
00:27:47,120 --> 00:27:50,640
they work well and uh so it's a very

599
00:27:50,640 --> 00:27:51,760
interesting

600
00:27:51,760 --> 00:27:54,159
uh subject means it's a difficult

601
00:27:54,159 --> 00:27:56,880
problem where you try to explain

602
00:27:56,880 --> 00:27:59,600
something and to

603
00:27:59,600 --> 00:28:02,480
and that has no intrinsic logic

604
00:28:02,480 --> 00:28:06,480
uh that is transparent and and and so uh

605
00:28:06,480 --> 00:28:07,760
i think from

606
00:28:07,760 --> 00:28:09,679
uh the

607
00:28:09,679 --> 00:28:12,480
theories point of

608
00:28:14,799 --> 00:28:17,600
energy and so uh today what i would like

609
00:28:17,600 --> 00:28:18,320
to

610
00:28:18,320 --> 00:28:19,360
to

611
00:28:19,360 --> 00:28:22,240
talk about is a uh example i think it's

612
00:28:22,240 --> 00:28:25,039
perhaps one of the most familiar methods

613
00:28:25,039 --> 00:28:27,520
in machine learning and it's the kernel

614
00:28:27,520 --> 00:28:31,520
method and uh we would like to do an a

615
00:28:31,520 --> 00:28:35,039
analysis uh for some uh problems

616
00:28:35,039 --> 00:28:36,159
and so

617
00:28:36,159 --> 00:28:39,039
machine learnings are definitely being

618
00:28:39,039 --> 00:28:42,080
what you use in all domains and the

619
00:28:42,080 --> 00:28:45,600
quality of solutions rely mostly on

620
00:28:45,600 --> 00:28:47,760
empirical evidence with a little

621
00:28:47,760 --> 00:28:49,279
theoretical batching

622
00:28:49,279 --> 00:28:52,320
and the current state of affairs is that

623
00:28:52,320 --> 00:28:54,480
really the applications

624
00:28:54,480 --> 00:28:57,120
run far ahead of the scientific

625
00:28:57,120 --> 00:28:59,840
understanding

626
00:29:03,440 --> 00:29:06,159
a well-known problem uh i just

627
00:29:06,159 --> 00:29:07,600
discussed a couple

628
00:29:07,600 --> 00:29:09,679
uh mentioned uh the first one is for

629
00:29:09,679 --> 00:29:13,200
robustness and and improving the

630
00:29:13,200 --> 00:29:16,080
stability of the machine learning

631
00:29:16,080 --> 00:29:17,279
for example

632
00:29:17,279 --> 00:29:20,399
uh here is the well known example that

633
00:29:20,399 --> 00:29:23,520
if you have pattern

634
00:29:23,520 --> 00:29:27,760
object recognition and

635
00:29:27,760 --> 00:29:28,960
here is a

636
00:29:28,960 --> 00:29:32,399
a picture that's that's uh

637
00:29:32,399 --> 00:29:35,600
perfectly diagnosed classified as a pig

638
00:29:35,600 --> 00:29:38,240
but if you put randomness and there are

639
00:29:38,240 --> 00:29:43,520
examples that it actually turns into

640
00:29:46,000 --> 00:29:47,039
just

641
00:29:47,039 --> 00:29:50,080
robust than the typical algorithms we

642
00:29:50,080 --> 00:29:52,399
we do and the second example is

643
00:29:52,399 --> 00:29:53,679
certainly

644
00:29:53,679 --> 00:29:56,159
i think that we talked people talking

645
00:29:56,159 --> 00:29:57,360
about a lot

646
00:29:57,360 --> 00:29:58,159
uh

647
00:29:58,159 --> 00:30:01,440
explainable ai and the transparency of

648
00:30:01,440 --> 00:30:04,159
machine learning namely that

649
00:30:04,159 --> 00:30:05,760
in order for

650
00:30:05,760 --> 00:30:07,520
the

651
00:30:07,520 --> 00:30:11,200
learning algorithms to be to be widely

652
00:30:11,200 --> 00:30:12,799
accepted

653
00:30:12,799 --> 00:30:14,320
in many cases

654
00:30:14,320 --> 00:30:16,480
people have to have have to have

655
00:30:16,480 --> 00:30:20,600
confidence in it so

656
00:30:22,000 --> 00:30:26,159
i didn't put some bias into it now here

657
00:30:26,159 --> 00:30:27,120
is

658
00:30:27,120 --> 00:30:27,919
a

659
00:30:27,919 --> 00:30:29,679
something that people often talk about

660
00:30:29,679 --> 00:30:32,559
you have the appraisal of homes based on

661
00:30:32,559 --> 00:30:34,799
the data so the machine

662
00:30:34,799 --> 00:30:38,559
uh learning designers are

663
00:30:38,559 --> 00:30:39,760
taking

664
00:30:39,760 --> 00:30:41,279
a lot of

665
00:30:41,279 --> 00:30:42,240
the

666
00:30:42,240 --> 00:30:44,320
data in the neighborhood of the house

667
00:30:44,320 --> 00:30:46,000
and the uh

668
00:30:46,000 --> 00:30:47,520
design a system

669
00:30:47,520 --> 00:30:50,799
and from that time on can be used and so

670
00:30:50,799 --> 00:30:52,880
for example if somebody put in

671
00:30:52,880 --> 00:30:55,679
a application and get a two million

672
00:30:55,679 --> 00:30:58,000
dollar

673
00:30:58,000 --> 00:31:00,480
price tag and so

674
00:31:00,480 --> 00:31:01,200
the

675
00:31:01,200 --> 00:31:02,320
the person

676
00:31:02,320 --> 00:31:05,840
might get

677
00:31:08,159 --> 00:31:10,640
that can i trust the result and but the

678
00:31:10,640 --> 00:31:13,440
machine learning algorithms uh a lot of

679
00:31:13,440 --> 00:31:16,399
times it's not possible

680
00:31:16,399 --> 00:31:19,440
at the present state affairs to explain

681
00:31:19,440 --> 00:31:22,000
yeah with the same mathematical rigor so

682
00:31:22,000 --> 00:31:24,960
that's a uh so this kind of question

683
00:31:24,960 --> 00:31:28,640
are uh very important and uh i think

684
00:31:28,640 --> 00:31:32,559
that the analysis uh is the first is is

685
00:31:32,559 --> 00:31:36,000
one one of the first

686
00:31:39,760 --> 00:31:42,960
uh fix such problems and uh so but

687
00:31:42,960 --> 00:31:44,000
currently

688
00:31:44,000 --> 00:31:45,200
uh

689
00:31:45,200 --> 00:31:48,000
the analysis the analysis of the machine

690
00:31:48,000 --> 00:31:52,720
learning algorithms it's uh in a very uh

691
00:31:52,720 --> 00:31:54,080
kind of

692
00:31:54,080 --> 00:31:55,519
a different

693
00:31:55,519 --> 00:31:56,960
uh

694
00:31:56,960 --> 00:31:57,919
days

695
00:31:57,919 --> 00:31:59,120
so

696
00:31:59,120 --> 00:32:03,919
okay and so uh let's do it for a a

697
00:32:03,919 --> 00:32:05,200
particular

698
00:32:05,200 --> 00:32:10,000
uh simple case and and um

699
00:32:10,480 --> 00:32:12,159
that's something called the kernel

700
00:32:12,159 --> 00:32:14,880
method and it's widely used in pattern

701
00:32:14,880 --> 00:32:19,279
analysis and basically the method

702
00:32:19,600 --> 00:32:21,279
uses a

703
00:32:21,279 --> 00:32:23,360
something called a kernel function which

704
00:32:23,360 --> 00:32:26,240
is a similarity function to predict

705
00:32:26,240 --> 00:32:31,120
whether a data point belongs to uh some

706
00:32:31,120 --> 00:32:33,039
clustered or or not

707
00:32:33,039 --> 00:32:35,360
so you can

708
00:32:35,360 --> 00:32:37,440
think of this kernel method is trying to

709
00:32:37,440 --> 00:32:39,360
do classification

710
00:32:39,360 --> 00:32:40,320
uh

711
00:32:40,320 --> 00:32:41,440
by

712
00:32:41,440 --> 00:32:44,399
making a prediction uh algorithm

713
00:32:44,399 --> 00:32:46,960
and let's just look at an example the

714
00:32:46,960 --> 00:32:50,399
simplest case the linear kernel

715
00:32:50,399 --> 00:32:51,120
and

716
00:32:51,120 --> 00:32:54,559
also the gaussian kernel and now

717
00:32:54,559 --> 00:32:56,640
using the kernel method

718
00:32:56,640 --> 00:32:57,919
uh

719
00:32:57,919 --> 00:33:00,240
like to solve to do machine learning it

720
00:33:00,240 --> 00:33:03,200
works well in many practical cases and

721
00:33:03,200 --> 00:33:05,600
uh but there are also many many

722
00:33:05,600 --> 00:33:08,320
exceptions and uh one particular

723
00:33:08,320 --> 00:33:10,799
well-known

724
00:33:11,120 --> 00:33:14,080
hard case is the parity function

725
00:33:14,080 --> 00:33:15,519
and the

726
00:33:15,519 --> 00:33:18,799
kernel method seems to have difficulty

727
00:33:18,799 --> 00:33:19,760
of

728
00:33:19,760 --> 00:33:23,039
getting very accurate prediction of this

729
00:33:23,039 --> 00:33:25,279
function the parity which is supposed to

730
00:33:25,279 --> 00:33:26,960
be really simple

731
00:33:26,960 --> 00:33:28,159
and and

732
00:33:28,159 --> 00:33:31,360
uh so and there have been uh plausible

733
00:33:31,360 --> 00:33:34,000
arguments suggested why the kernel

734
00:33:34,000 --> 00:33:38,080
methods don't work very well but uh

735
00:33:38,080 --> 00:33:41,360
there's so far no really rigorous proof

736
00:33:41,360 --> 00:33:42,880
and we would like to prove that the

737
00:33:42,880 --> 00:33:44,799
paradigm function

738
00:33:44,799 --> 00:33:49,600
blur for uh in particular the

739
00:33:49,600 --> 00:33:51,360
the gaussian kernel

740
00:33:51,360 --> 00:33:53,679
and now to

741
00:33:53,679 --> 00:33:54,880
to

742
00:33:54,880 --> 00:33:57,440
uh look into it a little bit they

743
00:33:57,440 --> 00:33:59,200
let me just

744
00:33:59,200 --> 00:34:00,880
go through the the

745
00:34:00,880 --> 00:34:03,679
basic definition the the kernel function

746
00:34:03,679 --> 00:34:04,480
k

747
00:34:04,480 --> 00:34:06,720
is a similarity function

748
00:34:06,720 --> 00:34:09,520
from rn

749
00:34:09,520 --> 00:34:10,320
the

750
00:34:10,320 --> 00:34:11,599
cross rn

751
00:34:11,599 --> 00:34:12,560
to

752
00:34:12,560 --> 00:34:15,199
the set of real numbers satisfying the

753
00:34:15,199 --> 00:34:17,918
positive semi-definite conditions

754
00:34:17,918 --> 00:34:19,599
and

755
00:34:19,599 --> 00:34:22,719
namely that the gram matrix k

756
00:34:22,719 --> 00:34:25,679
of x i x j is uh

757
00:34:25,679 --> 00:34:29,119
positive semi-definite uh for any x1

758
00:34:29,119 --> 00:34:30,879
uh to xn

759
00:34:30,879 --> 00:34:35,279
uh in the space and and and

760
00:34:39,679 --> 00:34:41,839
so the kernel method is a

761
00:34:41,839 --> 00:34:44,239
kind of is a matrix of this form and

762
00:34:44,239 --> 00:34:46,800
satisfying certain conditions

763
00:34:46,800 --> 00:34:47,599
and

764
00:34:47,599 --> 00:34:50,719
the learning a boolean function with the

765
00:34:50,719 --> 00:34:53,918
kernel function at k goes like follows

766
00:34:53,918 --> 00:34:56,639
you first uh collecting data

767
00:34:56,639 --> 00:34:59,440
and then you learn to predict

768
00:34:59,440 --> 00:35:03,119
kind of you you you you get an album

769
00:35:03,119 --> 00:35:04,560
from this data

770
00:35:04,560 --> 00:35:07,440
uh called a predictor and finally you

771
00:35:07,440 --> 00:35:09,599
can apply the predictor to make

772
00:35:09,599 --> 00:35:11,920
predictions so the collecting data phase

773
00:35:11,920 --> 00:35:14,800
would take m random samples from the

774
00:35:14,800 --> 00:35:17,680
boolean cube so they are coded as one

775
00:35:17,680 --> 00:35:19,520
and minus one from a certain

776
00:35:19,520 --> 00:35:20,720
distribution

777
00:35:20,720 --> 00:35:24,240
and uh now you do something

778
00:35:24,240 --> 00:35:25,440
to

779
00:35:25,440 --> 00:35:28,320
to learn to build an optimal

780
00:35:28,320 --> 00:35:31,440
uh model for

781
00:35:31,440 --> 00:35:35,760
predicting f and basically you do this

782
00:35:35,760 --> 00:35:39,760
the the class of of predictors that

783
00:35:39,760 --> 00:35:42,560
you want to design is the simplest one

784
00:35:42,560 --> 00:35:45,119
it's just a linear function so it's

785
00:35:45,119 --> 00:35:49,280
satisfied by so it's specified by the n

786
00:35:49,280 --> 00:35:52,640
plus one numbers in a linear function

787
00:35:52,640 --> 00:35:54,720
and you want to

788
00:35:54,720 --> 00:35:55,920
to

789
00:35:55,920 --> 00:35:58,640
optimize it

790
00:35:58,640 --> 00:36:00,480
for the in the following fashion the

791
00:36:00,480 --> 00:36:04,880
first it will uh fitting that so that if

792
00:36:04,880 --> 00:36:07,119
you use these

793
00:36:07,119 --> 00:36:08,640
parameters

794
00:36:08,640 --> 00:36:11,440
then you can get the same sign as the f

795
00:36:11,440 --> 00:36:13,920
so basically you you would

796
00:36:13,920 --> 00:36:15,920
want that the

797
00:36:15,920 --> 00:36:17,680
the the

798
00:36:17,680 --> 00:36:19,520
kind of the particular

799
00:36:19,520 --> 00:36:21,520
linear function that you constructed

800
00:36:21,520 --> 00:36:22,400
here

801
00:36:22,400 --> 00:36:23,280
that

802
00:36:23,280 --> 00:36:25,599
if you use this as a predictor then it

803
00:36:25,599 --> 00:36:27,359
will at least

804
00:36:27,359 --> 00:36:29,359
fitting the data

805
00:36:29,359 --> 00:36:32,960
from where it came from and

806
00:36:32,960 --> 00:36:34,079
secondly

807
00:36:34,079 --> 00:36:36,480
among all the possible

808
00:36:36,480 --> 00:36:39,440
n plus one tuple of numbers that define

809
00:36:39,440 --> 00:36:41,200
the linear equation

810
00:36:41,200 --> 00:36:43,760
you you want to max choose the one that

811
00:36:43,760 --> 00:36:47,520
have to maximize the margin so um you

812
00:36:47,520 --> 00:36:50,400
want it so that the

813
00:36:50,400 --> 00:36:53,400
prediction

814
00:36:55,839 --> 00:36:58,720
decimal oh

815
00:37:01,359 --> 00:37:02,320
of the

816
00:37:02,320 --> 00:37:03,680
linear functions

817
00:37:03,680 --> 00:37:06,079
and once you get the prediction you can

818
00:37:06,079 --> 00:37:07,280
use it

819
00:37:07,280 --> 00:37:08,560
if you take

820
00:37:08,560 --> 00:37:11,440
the input

821
00:37:11,440 --> 00:37:14,640
volume input y you would you would

822
00:37:14,640 --> 00:37:17,359
predict the value of

823
00:37:17,359 --> 00:37:20,839
of f y to be the sign of the

824
00:37:20,839 --> 00:37:24,079
predictor and so and so the error

825
00:37:24,079 --> 00:37:26,240
probability the performance measure

826
00:37:26,240 --> 00:37:27,680
would be

827
00:37:27,680 --> 00:37:30,480
in in our case let's just assume that

828
00:37:30,480 --> 00:37:33,520
all the numbers are randomly chosen over

829
00:37:33,520 --> 00:37:37,400
the boolean cube

830
00:37:38,880 --> 00:37:41,920
a proportion of the input for which that

831
00:37:41,920 --> 00:37:43,760
this predictor makes the wrong

832
00:37:43,760 --> 00:37:45,760
prediction and as you can see that in

833
00:37:45,760 --> 00:37:48,720
the case of the linear kernels the

834
00:37:48,720 --> 00:37:51,200
internal function is just simply the

835
00:37:51,200 --> 00:37:52,640
inner product

836
00:37:52,640 --> 00:37:53,760
of the

837
00:37:53,760 --> 00:37:54,720
uh

838
00:37:54,720 --> 00:37:55,920
of the y's

839
00:37:55,920 --> 00:37:58,880
and that predictor would correspond to a

840
00:37:58,880 --> 00:38:01,680
hyperplane that's separating the labeled

841
00:38:01,680 --> 00:38:03,359
sample points

842
00:38:03,359 --> 00:38:06,640
into into two groups the true

843
00:38:06,640 --> 00:38:08,799
and

844
00:38:11,280 --> 00:38:13,440
spirit the

845
00:38:13,440 --> 00:38:14,400
inputs

846
00:38:14,400 --> 00:38:16,079
and

847
00:38:16,079 --> 00:38:17,599
and the

848
00:38:17,599 --> 00:38:18,560
the

849
00:38:18,560 --> 00:38:20,320
uh

850
00:38:20,320 --> 00:38:22,880
the maximization over the

851
00:38:22,880 --> 00:38:26,880
the the margin is simply to minimize the

852
00:38:26,880 --> 00:38:29,599
largest distance from uh

853
00:38:29,599 --> 00:38:32,800
both the red and the blue point to the

854
00:38:32,800 --> 00:38:34,960
separating plane so the maximum the

855
00:38:34,960 --> 00:38:37,200
margin means to

856
00:38:37,200 --> 00:38:39,359
to

857
00:38:39,520 --> 00:38:41,520
to minimize

858
00:38:41,520 --> 00:38:43,359
the max distance

859
00:38:43,359 --> 00:38:47,839
and the second example uh

860
00:38:50,400 --> 00:38:53,040
use this

861
00:38:53,040 --> 00:38:55,280
kind of

862
00:38:55,280 --> 00:38:56,240
gaussian

863
00:38:56,240 --> 00:38:58,079
function

864
00:38:58,079 --> 00:38:59,040
as the

865
00:38:59,040 --> 00:39:01,920
the the uh

866
00:39:02,320 --> 00:39:05,680
as the as the similarity function so

867
00:39:05,680 --> 00:39:06,720
it's

868
00:39:06,720 --> 00:39:07,440
uh

869
00:39:07,440 --> 00:39:08,720
it's try to

870
00:39:08,720 --> 00:39:12,160
try to emphasize points that are

871
00:39:12,160 --> 00:39:15,119
close together and give you more weight

872
00:39:15,119 --> 00:39:17,280
as compared to points that are

873
00:39:17,280 --> 00:39:20,720
dissimilar that are the same

874
00:39:23,200 --> 00:39:25,680
truth and and i think that

875
00:39:25,680 --> 00:39:28,400
sensibly this lambda would be choosing

876
00:39:28,400 --> 00:39:29,839
moderation

877
00:39:29,839 --> 00:39:33,760
otherwise you would either would try to

878
00:39:33,760 --> 00:39:35,200
too much emphasis

879
00:39:35,200 --> 00:39:37,920
on the on the on the points that are

880
00:39:37,920 --> 00:39:39,040
very close

881
00:39:39,040 --> 00:39:40,640
or

882
00:39:40,640 --> 00:39:44,960
to to equalize all the contributions and

883
00:39:44,960 --> 00:39:46,720
so that you might not get

884
00:39:46,720 --> 00:39:48,240
a good information

885
00:39:48,240 --> 00:39:51,440
uh that you like to extract and and so

886
00:39:51,440 --> 00:39:53,359
using this uh

887
00:39:53,359 --> 00:39:56,640
the predictor is given by a

888
00:39:56,640 --> 00:39:58,320
a function

889
00:39:58,320 --> 00:40:01,119
that is linear in the kernels but of

890
00:40:01,119 --> 00:40:04,960
course it's a nonlinear function of this

891
00:40:04,960 --> 00:40:06,319
particular form

892
00:40:06,319 --> 00:40:08,160
and gaussian kernel is one of the most

893
00:40:08,160 --> 00:40:11,440
commonly used kernel method and

894
00:40:11,440 --> 00:40:14,560
producing classifier in many scenarios

895
00:40:14,560 --> 00:40:16,560
and the question is that what's its

896
00:40:16,560 --> 00:40:19,040
implementation and why

897
00:40:19,040 --> 00:40:20,880
and empirically the gaussian kernel

898
00:40:20,880 --> 00:40:23,839
method doesn't work well for the

899
00:40:23,839 --> 00:40:26,400
and i think the uh

900
00:40:26,400 --> 00:40:28,640
i think from the theoreticians point of

901
00:40:28,640 --> 00:40:31,040
view at least we should understand this

902
00:40:31,040 --> 00:40:32,240
simplest

903
00:40:32,240 --> 00:40:33,680
uh

904
00:40:33,680 --> 00:40:36,560
phenomena and and uh if we can

905
00:40:36,560 --> 00:40:39,119
understand anything

906
00:40:39,119 --> 00:40:41,280
we will be able to understand this

907
00:40:41,280 --> 00:40:43,599
particular case and so we would like to

908
00:40:43,599 --> 00:40:45,760
confirm it analytically

909
00:40:45,760 --> 00:40:51,160
and this problem has a pretty a big

910
00:40:52,800 --> 00:40:55,200
strong cannot complete party

911
00:40:55,200 --> 00:40:56,640
and uh

912
00:40:56,640 --> 00:40:59,040
espness

913
00:40:59,040 --> 00:41:01,839
1990s showed that no small degree

914
00:41:01,839 --> 00:41:04,720
multivariate polynomial can

915
00:41:04,720 --> 00:41:07,119
approximate pretty well so linear

916
00:41:07,119 --> 00:41:09,200
polynomials or

917
00:41:09,200 --> 00:41:11,680
quadratic polynomials and so on can

918
00:41:11,680 --> 00:41:13,440
uh wouldn't do

919
00:41:13,440 --> 00:41:16,000
as a predictor and but of course the

920
00:41:16,000 --> 00:41:18,800
gaussian is not a polynomial it's a it's

921
00:41:18,800 --> 00:41:21,800
a

922
00:41:24,800 --> 00:41:26,640
infinite many terms

923
00:41:26,640 --> 00:41:29,119
and uh now benjio

924
00:41:29,119 --> 00:41:32,000
observed very early on that

925
00:41:32,000 --> 00:41:33,119
that

926
00:41:33,119 --> 00:41:35,359
there's a good reason why

927
00:41:35,359 --> 00:41:37,359
at least a plausible reason why the

928
00:41:37,359 --> 00:41:40,160
gaussians don't uh learn the parity

929
00:41:40,160 --> 00:41:43,440
function well so with very large lambda

930
00:41:43,440 --> 00:41:46,839
the parity function uh can be

931
00:41:46,839 --> 00:41:50,960
a expressed with a uh

932
00:41:50,960 --> 00:41:52,720
uh m plus one

933
00:41:52,720 --> 00:41:54,640
cautious so that's a

934
00:41:54,640 --> 00:41:56,079
uh kind of

935
00:41:56,079 --> 00:41:59,440
uh there's an argument for that the

936
00:41:59,440 --> 00:42:00,960
the

937
00:42:00,960 --> 00:42:03,359
the the guardian kernel might

938
00:42:03,359 --> 00:42:06,000
might have a chance but immediately uh

939
00:42:06,000 --> 00:42:09,920
they also suggested that that uh the the

940
00:42:09,920 --> 00:42:12,400
gaussian kernels will not learn well

941
00:42:12,400 --> 00:42:13,520
because the

942
00:42:13,520 --> 00:42:16,319
linear combination is not of the form of

943
00:42:16,319 --> 00:42:17,680
the of the

944
00:42:17,680 --> 00:42:20,560
standard learning

945
00:42:23,760 --> 00:42:26,880
can come up from a very smart politician

946
00:42:26,880 --> 00:42:28,960
who look at it

947
00:42:28,960 --> 00:42:31,599
and say that we can design a linear

948
00:42:31,599 --> 00:42:34,560
combination of n plus one functions that

949
00:42:34,560 --> 00:42:38,160
can solve problems exactly but however

950
00:42:38,160 --> 00:42:40,079
if you want to do some real learning

951
00:42:40,079 --> 00:42:43,440
kind of using the methodology uh that i

952
00:42:43,440 --> 00:42:44,480
just mentioned

953
00:42:44,480 --> 00:42:47,280
and and try to learn from the data then

954
00:42:47,280 --> 00:42:50,640
uh then actually uh bend you at all they

955
00:42:50,640 --> 00:42:53,440
uh i think

956
00:42:56,400 --> 00:42:59,200
argument then and so uh

957
00:42:59,200 --> 00:43:00,400
very recently

958
00:43:00,400 --> 00:43:02,240
uh we showed that the gaussian kernel

959
00:43:02,240 --> 00:43:04,880
cannot learn parity for various ranges

960
00:43:04,880 --> 00:43:07,839
of lambda here we will just prove it for

961
00:43:07,839 --> 00:43:10,160
the case when lambda is in the most

962
00:43:10,160 --> 00:43:11,599
reasonable

963
00:43:11,599 --> 00:43:14,160
sensible choice 1 over the square root

964
00:43:14,160 --> 00:43:15,040
of n

965
00:43:15,040 --> 00:43:16,319
and the

966
00:43:16,319 --> 00:43:19,520
statement will look like this

967
00:43:19,599 --> 00:43:21,680
for for this parameter

968
00:43:21,680 --> 00:43:24,319
with with very high probability a random

969
00:43:24,319 --> 00:43:25,920
gaussian

970
00:43:25,920 --> 00:43:28,079
parity predictor p

971
00:43:28,079 --> 00:43:30,079
that is chosen according to the

972
00:43:30,079 --> 00:43:32,560
mythology we mentioned it will have

973
00:43:32,560 --> 00:43:35,200
error rate

974
00:43:38,240 --> 00:43:40,880
involving very heavy probability

975
00:43:40,880 --> 00:43:44,000
conditioning and reasoning and uh

976
00:43:44,000 --> 00:43:45,280
so the

977
00:43:45,280 --> 00:43:48,480
uh i think essentially to the to the

978
00:43:48,480 --> 00:43:52,240
proof is to set up a high level view

979
00:43:52,240 --> 00:43:54,400
that reduces the problem

980
00:43:54,400 --> 00:43:56,960
to simpler pieces each one of them

981
00:43:56,960 --> 00:43:59,200
requires solving a non-trivial

982
00:43:59,200 --> 00:44:03,160
stochastic processes

983
00:44:08,640 --> 00:44:09,920
uh

984
00:44:09,920 --> 00:44:15,119
okay yeah and and uh uh so

985
00:44:16,240 --> 00:44:18,399
uh

986
00:44:18,960 --> 00:44:22,079
so so let me give me a be a a little bit

987
00:44:22,079 --> 00:44:24,480
alive

988
00:44:26,560 --> 00:44:28,720
and random sample points

989
00:44:28,720 --> 00:44:29,760
and

990
00:44:29,760 --> 00:44:32,960
we use it to produce a gaussian

991
00:44:32,960 --> 00:44:35,760
parity predictor

992
00:44:35,760 --> 00:44:37,599
this is a linear function

993
00:44:37,599 --> 00:44:40,160
and uh it's useful to regard this

994
00:44:40,160 --> 00:44:43,280
predictor as a as a hashing function

995
00:44:43,280 --> 00:44:46,160
that would hashes the

996
00:44:46,160 --> 00:44:49,279
different sample points

997
00:44:49,520 --> 00:44:52,480
enter into into the real space

998
00:44:52,480 --> 00:44:53,920
and uh

999
00:44:53,920 --> 00:44:58,480
so what we would like to do is that that

1000
00:45:02,800 --> 00:45:06,160
would produce a uh predictor

1001
00:45:06,160 --> 00:45:08,960
which from the point of view of the

1002
00:45:08,960 --> 00:45:12,640
hashing functions that that do too well

1003
00:45:12,640 --> 00:45:15,839
a good job so that that independent of

1004
00:45:15,839 --> 00:45:19,200
whether there are parities is plus one

1005
00:45:19,200 --> 00:45:22,160
or minus one that would just

1006
00:45:22,160 --> 00:45:25,520
hashes them together in a uh sort of

1007
00:45:25,520 --> 00:45:26,640
well dis

1008
00:45:26,640 --> 00:45:30,079
uh evenly distributed way and and so

1009
00:45:30,079 --> 00:45:33,839
essentially uh this

1010
00:45:36,000 --> 00:45:39,040
search of designing uh kind of analyzing

1011
00:45:39,040 --> 00:45:41,440
universal families and so on of hash

1012
00:45:41,440 --> 00:45:42,960
function so

1013
00:45:42,960 --> 00:45:46,480
why is it that this random issues

1014
00:45:46,480 --> 00:45:48,640
uh

1015
00:45:48,640 --> 00:45:51,040
function from this particular hash

1016
00:45:51,040 --> 00:45:52,000
function

1017
00:45:52,000 --> 00:45:56,319
uh would be a a very good uh

1018
00:45:56,319 --> 00:45:59,119
hash function that is the

1019
00:45:59,119 --> 00:46:03,200
the problem and

1020
00:46:04,480 --> 00:46:06,880
and and so so let me give you the the

1021
00:46:06,880 --> 00:46:09,920
the the several steps for for doing it

1022
00:46:09,920 --> 00:46:11,119
uh but first

1023
00:46:11,119 --> 00:46:12,480
uh let's

1024
00:46:12,480 --> 00:46:14,319
kind of uh

1025
00:46:14,319 --> 00:46:15,680
prove the result

1026
00:46:15,680 --> 00:46:18,640
under the assumption that uh that that

1027
00:46:18,640 --> 00:46:21,839
these coefficients a i they are exactly

1028
00:46:21,839 --> 00:46:24,720
equal to one or minus one according to

1029
00:46:24,720 --> 00:46:25,839
the parity

1030
00:46:25,839 --> 00:46:27,359
for for all eyes

1031
00:46:27,359 --> 00:46:29,680
and and later we'll relax this

1032
00:46:29,680 --> 00:46:30,880
assumption

1033
00:46:30,880 --> 00:46:32,000
and so

1034
00:46:32,000 --> 00:46:33,760
uh what we'd like to do is to construct

1035
00:46:33,760 --> 00:46:36,000
a probabilistic argument to show

1036
00:46:36,000 --> 00:46:39,359
take a random sample uh we'll get a

1037
00:46:39,359 --> 00:46:41,680
predictor that's a very effective hash

1038
00:46:41,680 --> 00:46:45,119
function and and and so this function

1039
00:46:45,119 --> 00:46:47,280
cannot well separate points without even

1040
00:46:47,280 --> 00:46:50,560
parity and leading us to conclude that

1041
00:46:50,560 --> 00:46:55,119
it makes a very high uh error and entity

1042
00:46:55,119 --> 00:46:56,400
the the difficult

1043
00:46:56,400 --> 00:46:58,000
part is that if you compare the

1044
00:46:58,000 --> 00:46:59,200
randomness

1045
00:46:59,200 --> 00:47:00,880
uh the b

1046
00:47:00,880 --> 00:47:02,560
is in the

1047
00:47:02,560 --> 00:47:04,000
random set

1048
00:47:04,000 --> 00:47:06,400
and and uh so

1049
00:47:06,400 --> 00:47:08,079
uh

1050
00:47:08,079 --> 00:47:12,720
so so it is true that that is its

1051
00:47:15,280 --> 00:47:18,640
specific two points then a randomly

1052
00:47:18,640 --> 00:47:21,440
choose hash function would hatch them

1053
00:47:21,440 --> 00:47:22,800
to

1054
00:47:22,800 --> 00:47:24,960
different locations but the point is

1055
00:47:24,960 --> 00:47:29,119
that you would like to argue is now that

1056
00:47:29,119 --> 00:47:30,079
that

1057
00:47:30,079 --> 00:47:31,359
the

1058
00:47:31,359 --> 00:47:33,520
so it's easy to get

1059
00:47:33,520 --> 00:47:36,000
the probabilistic statement from one

1060
00:47:36,000 --> 00:47:39,599
side but actually what we want to see is

1061
00:47:39,599 --> 00:47:42,319
the other end of the of the point and

1062
00:47:42,319 --> 00:47:43,599
this

1063
00:47:43,599 --> 00:47:48,000
nonetheless there are standard type

1064
00:47:50,240 --> 00:47:51,119
laws

1065
00:47:51,119 --> 00:47:52,400
in order to

1066
00:47:52,400 --> 00:47:55,359
do probabilistic reasoning uh to

1067
00:47:55,359 --> 00:47:59,280
transfer this type of of results and so

1068
00:47:59,280 --> 00:48:00,880
the central argument

1069
00:48:00,880 --> 00:48:02,160
will

1070
00:48:02,160 --> 00:48:04,480
start with proving this so let me just

1071
00:48:04,480 --> 00:48:08,000
show you the the result so if you take

1072
00:48:08,000 --> 00:48:10,720
points which are fairly distance apart

1073
00:48:10,720 --> 00:48:12,400
then they would

1074
00:48:12,400 --> 00:48:16,559
it's very hard to get a a bad

1075
00:48:16,559 --> 00:48:19,559
random

1076
00:48:22,480 --> 00:48:26,000
is bigger than epsilon for a random y y

1077
00:48:26,000 --> 00:48:29,200
prime in a and the lemma shows this

1078
00:48:29,200 --> 00:48:30,160
and

1079
00:48:30,160 --> 00:48:31,680
so

1080
00:48:31,680 --> 00:48:33,200
that's exactly

1081
00:48:33,200 --> 00:48:35,200
uh the the

1082
00:48:35,200 --> 00:48:39,280
the integration that i i gave and now uh

1083
00:48:39,280 --> 00:48:42,079
after we have done that we let's remove

1084
00:48:42,079 --> 00:48:45,040
the uh restriction that a i

1085
00:48:45,040 --> 00:48:47,119
say plus y minus one according to the

1086
00:48:47,119 --> 00:48:49,920
priority and so

1087
00:48:49,920 --> 00:48:52,079
if i consider the maximum margin

1088
00:48:52,079 --> 00:48:56,559
condition for the parameters and one use

1089
00:48:56,559 --> 00:48:58,480
optimization theory

1090
00:48:58,480 --> 00:49:02,240
it's possible to infer that the ai is

1091
00:49:02,240 --> 00:49:04,720
equal to the parity of x i plus

1092
00:49:04,720 --> 00:49:08,160
exponentially small terms

1093
00:49:10,720 --> 00:49:12,800
all the derivations in the previous

1094
00:49:12,800 --> 00:49:16,240
proof and therefore does not affect the

1095
00:49:16,240 --> 00:49:19,200
conclusion and so so to summarize a

1096
00:49:19,200 --> 00:49:22,079
rigorous analysis of machine learning

1097
00:49:22,079 --> 00:49:24,960
algorithm behavior can invoke quite

1098
00:49:24,960 --> 00:49:27,440
subtle probabilistic reasoning and such

1099
00:49:27,440 --> 00:49:29,680
understanding will help us build a

1100
00:49:29,680 --> 00:49:32,319
firmer foundation for machine learning

1101
00:49:32,319 --> 00:49:35,359
so in conclusion

1102
00:49:36,800 --> 00:49:39,119
both cryptography and machine learning

1103
00:49:39,119 --> 00:49:42,640
are rich across disciplinary areas that

1104
00:49:42,640 --> 00:49:44,000
need

1105
00:49:44,000 --> 00:49:46,079
foundational research

1106
00:49:46,079 --> 00:49:48,079
and uh foundations

1107
00:49:48,079 --> 00:49:48,880
that

1108
00:49:48,880 --> 00:49:52,000
laid during the 1980s for

1109
00:49:52,000 --> 00:49:55,200
these areas in cryptography and deep

1110
00:49:55,200 --> 00:49:57,040
learning have led to amazing

1111
00:49:57,040 --> 00:50:00,160
applications nowadays in digital economy

1112
00:50:00,160 --> 00:50:02,720
and the alpha vote

1113
00:50:02,720 --> 00:50:05,280
today and

1114
00:50:05,280 --> 00:50:09,640
i think that probabilistic reasoning

1115
00:50:13,280 --> 00:50:16,800
key to resolving many of the problems

1116
00:50:16,800 --> 00:50:19,200
of a stochastic nature that arise in

1117
00:50:19,200 --> 00:50:21,520
these settings and

1118
00:50:21,520 --> 00:50:23,680
two examples

1119
00:50:23,680 --> 00:50:26,960
were presented in this talk today

1120
00:50:26,960 --> 00:50:28,800
thank you very much

1121
00:50:28,800 --> 00:50:31,760
for coming to the top

1122
00:50:31,920 --> 00:50:32,960
so

1123
00:50:32,960 --> 00:50:35,680
thank you andy

1124
00:50:35,920 --> 00:50:38,880
so now we have a

1125
00:50:38,880 --> 00:50:40,400
time for a few questions

1126
00:50:40,400 --> 00:50:42,880
so if you would like to ask questions

1127
00:50:42,880 --> 00:50:45,440
you can actually feel free to unmute

1128
00:50:45,440 --> 00:50:47,920
yourself

1129
00:50:50,000 --> 00:50:54,119
so and uh yeah

1130
00:50:54,400 --> 00:50:55,520
so

1131
00:50:55,520 --> 00:50:58,160
i i actually have a question

1132
00:50:58,160 --> 00:51:00,400
yes

1133
00:51:00,400 --> 00:51:03,599
it's partly my uh misunderstanding it

1134
00:51:03,599 --> 00:51:06,400
may be due to the audio breakup but

1135
00:51:06,400 --> 00:51:08,960
could you explain again the role that

1136
00:51:08,960 --> 00:51:09,839
the

1137
00:51:09,839 --> 00:51:11,520
colonel you used

1138
00:51:11,520 --> 00:51:13,760
plays in the analysis in the middle of

1139
00:51:13,760 --> 00:51:16,240
your talk

1140
00:51:16,720 --> 00:51:18,800
he referred to two examples of different

1141
00:51:18,800 --> 00:51:20,000
kernels

1142
00:51:20,000 --> 00:51:21,359
oh

1143
00:51:21,359 --> 00:51:23,040
i'm only

1144
00:51:23,040 --> 00:51:25,680
analyze the gaussian kernel because the

1145
00:51:25,680 --> 00:51:28,800
linear kernel is well known that it

1146
00:51:28,800 --> 00:51:31,280
cannot

1147
00:51:31,760 --> 00:51:33,680
learn the parity function well i think

1148
00:51:33,680 --> 00:51:35,599
that actually

1149
00:51:35,599 --> 00:51:38,480
any fixed degree or small degree

1150
00:51:38,480 --> 00:51:40,720
even in fraction of n

1151
00:51:40,720 --> 00:51:44,480
uh it is known uh by aspenist

1152
00:51:44,480 --> 00:51:45,920
in one of the

1153
00:51:45,920 --> 00:51:48,240
references that i mentioned they show

1154
00:51:48,240 --> 00:51:49,200
that

1155
00:51:49,200 --> 00:51:52,000
they cannot distinguish the parity more

1156
00:51:52,000 --> 00:51:56,480
than 50 of the time and and the

1157
00:51:59,040 --> 00:52:00,559
is that

1158
00:52:00,559 --> 00:52:01,359
it's

1159
00:52:01,359 --> 00:52:04,079
it has high degree

1160
00:52:04,079 --> 00:52:06,160
so this is specific to the problem of

1161
00:52:06,160 --> 00:52:08,079
learning parity then

1162
00:52:08,079 --> 00:52:10,000
that's right that

1163
00:52:10,000 --> 00:52:12,319
i think that in general

1164
00:52:12,319 --> 00:52:14,240
really do not know how to analyze it i

1165
00:52:14,240 --> 00:52:15,760
think in the parity it's

1166
00:52:15,760 --> 00:52:18,720
uh it's it's the it's the simplest kind

1167
00:52:18,720 --> 00:52:21,040
i think that one thing i want to say

1168
00:52:21,040 --> 00:52:22,559
that is that

1169
00:52:22,559 --> 00:52:24,319
that uh

1170
00:52:24,319 --> 00:52:26,960
what's what's different about the

1171
00:52:26,960 --> 00:52:28,079
the

1172
00:52:28,079 --> 00:52:30,720
analyzing machine learning algorithms

1173
00:52:30,720 --> 00:52:31,910
is that

1174
00:52:31,910 --> 00:52:34,980
[Music]

1175
00:52:36,079 --> 00:52:38,640
proof that something does not work

1176
00:52:38,640 --> 00:52:40,400
that we we don't have any good

1177
00:52:40,400 --> 00:52:42,880
experience with it because i think that

1178
00:52:42,880 --> 00:52:44,720
in the old days that

1179
00:52:44,720 --> 00:52:47,839
algorithms they

1180
00:52:50,400 --> 00:52:53,040
algorithms

1181
00:52:53,119 --> 00:52:54,640
ask the question that can you show me

1182
00:52:54,640 --> 00:52:56,400
that why it doesn't work

1183
00:52:56,400 --> 00:52:58,720
however this is a question that makes

1184
00:52:58,720 --> 00:53:00,400
sense in the machine learning

1185
00:53:00,400 --> 00:53:02,400
context because the hope is that you

1186
00:53:02,400 --> 00:53:05,920
will design general purpose

1187
00:53:06,160 --> 00:53:08,799
machine learning

1188
00:53:11,280 --> 00:53:13,839
situation so therefore we would like to

1189
00:53:13,839 --> 00:53:15,040
understand

1190
00:53:15,040 --> 00:53:18,800
why it works and why it doesn't work

1191
00:53:19,280 --> 00:53:22,240
i i think this is it's it's it's kind of

1192
00:53:22,240 --> 00:53:25,680
tied up to the kind of the things in the

1193
00:53:25,680 --> 00:53:28,880
uh in the in the uh

1194
00:53:28,880 --> 00:53:31,920
in the uh when people analyze uh dynamic

1195
00:53:31,920 --> 00:53:34,000
systems and if i give you a dynamic

1196
00:53:34,000 --> 00:53:34,960
systems

1197
00:53:34,960 --> 00:53:37,760
and uh i asked the question can you show

1198
00:53:37,760 --> 00:53:39,040
me that uh

1199
00:53:39,040 --> 00:53:42,079
it deserves it doesn't behave or does it

1200
00:53:42,079 --> 00:53:44,000
converge and you will have difficulty

1201
00:53:44,000 --> 00:53:45,359
doing it i mean except for the

1202
00:53:45,359 --> 00:53:48,720
well-known cases and and

1203
00:53:48,720 --> 00:53:50,240
so the problem

1204
00:53:50,240 --> 00:53:52,640
and i believe this is a very interesting

1205
00:53:52,640 --> 00:53:54,400
subject for

1206
00:53:54,400 --> 00:53:56,720
probabilistic reasoning is that i think

1207
00:53:56,720 --> 00:53:58,079
that that

1208
00:53:58,079 --> 00:54:00,800
it makes sense for us to try to

1209
00:54:00,800 --> 00:54:03,920
to develop a technology for proving

1210
00:54:03,920 --> 00:54:07,040
things that don't work

1211
00:54:07,680 --> 00:54:10,640
okay i i maybe i should explain why i

1212
00:54:10,640 --> 00:54:12,480
was asking the question

1213
00:54:12,480 --> 00:54:15,040
in machine learning a lot of the goal is

1214
00:54:15,040 --> 00:54:16,480
to

1215
00:54:16,480 --> 00:54:19,440
model human perception to

1216
00:54:19,440 --> 00:54:22,160
be able to generalize human uh

1217
00:54:22,160 --> 00:54:23,440
inferences

1218
00:54:23,440 --> 00:54:26,000
and so for example in image processing

1219
00:54:26,000 --> 00:54:28,640
we try to find similar images

1220
00:54:28,640 --> 00:54:31,040
but there's this ancient result from the

1221
00:54:31,040 --> 00:54:36,240
1970s by amas tversky about how human

1222
00:54:36,240 --> 00:54:39,760
uh perception of similarity is not

1223
00:54:39,760 --> 00:54:42,880
properly represented by a metric space

1224
00:54:42,880 --> 00:54:45,040
and so the kernels you were using are

1225
00:54:45,040 --> 00:54:47,520
actually embedded in a metric space

1226
00:54:47,520 --> 00:54:50,079
and i wonder how much of the difficulty

1227
00:54:50,079 --> 00:54:52,640
of machine learning predictions is due

1228
00:54:52,640 --> 00:54:54,240
to the fact that they're using this

1229
00:54:54,240 --> 00:54:57,919
faulty measure of similarity

1230
00:54:58,480 --> 00:55:00,799
it's a complicated question and i've

1231
00:55:00,799 --> 00:55:02,559
asked several machine learning experts

1232
00:55:02,559 --> 00:55:04,000
this and they sort of

1233
00:55:04,000 --> 00:55:06,160
you know as mathematicians we prefer

1234
00:55:06,160 --> 00:55:07,920
using simple

1235
00:55:07,920 --> 00:55:10,880
measures and you know we that's why

1236
00:55:10,880 --> 00:55:13,920
we're always referring to the gaussian

1237
00:55:13,920 --> 00:55:17,040
distance instead of other metrics but

1238
00:55:17,040 --> 00:55:19,119
you know similarity is not not actually

1239
00:55:19,119 --> 00:55:20,640
a metric there's this wonderful paper

1240
00:55:20,640 --> 00:55:22,480
i'll send you an email about it

1241
00:55:22,480 --> 00:55:24,720
yeah please do i think that's a very

1242
00:55:24,720 --> 00:55:28,480
interesting point i think that um

1243
00:55:29,760 --> 00:55:30,799
i think

1244
00:55:30,799 --> 00:55:35,200
it's extremely intriguing to be able to

1245
00:55:35,200 --> 00:55:36,400
design

1246
00:55:36,400 --> 00:55:39,040
standard alternative to the current

1247
00:55:39,040 --> 00:55:40,720
metric space approach

1248
00:55:40,720 --> 00:55:42,559
and and uh

1249
00:55:42,559 --> 00:55:45,359
yeah please send me the

1250
00:55:45,359 --> 00:55:48,160
point to any reference but because i i

1251
00:55:48,160 --> 00:55:49,599
i'm dying to

1252
00:55:49,599 --> 00:55:53,040
to hear some successful examples i think

1253
00:55:53,040 --> 00:55:56,960
that it would be it would be wonderful

1254
00:55:58,640 --> 00:56:02,960
uh i put a link to the paper in the chat

1255
00:56:02,960 --> 00:56:05,440
um but

1256
00:56:05,440 --> 00:56:07,920
in the chat but i'll send it by email

1257
00:56:07,920 --> 00:56:10,400
yeah yeah

1258
00:56:12,960 --> 00:56:15,200
okay

1259
00:56:15,200 --> 00:56:16,880
okay well i i

1260
00:56:16,880 --> 00:56:20,079
i can download it from here

1261
00:56:22,720 --> 00:56:24,079
so

1262
00:56:24,079 --> 00:56:25,599
does anybody

1263
00:56:25,599 --> 00:56:26,960
anybody else would like to ask

1264
00:56:26,960 --> 00:56:30,440
additional questions

1265
00:56:41,839 --> 00:56:43,599
is a big name

1266
00:56:43,599 --> 00:56:45,040
yeah it's an it's a very very

1267
00:56:45,040 --> 00:56:46,799
interesting paper

1268
00:56:46,799 --> 00:56:47,680
um

1269
00:56:47,680 --> 00:56:49,280
which i discovered

1270
00:56:49,280 --> 00:56:52,559
i don't know 15 years ago

1271
00:56:53,760 --> 00:56:57,640
yeah i think i got it

1272
00:57:03,680 --> 00:57:06,078
all right

1273
00:57:06,240 --> 00:57:08,480
so

1274
00:57:08,480 --> 00:57:10,480
i would like to take this opportunity to

1275
00:57:10,480 --> 00:57:13,839
thank andy again for for his talk

1276
00:57:13,839 --> 00:57:15,440
uh

1277
00:57:15,440 --> 00:57:18,000
so it was very nice of you to be able to

1278
00:57:18,000 --> 00:57:20,240
accept this invitation to give a

1279
00:57:20,240 --> 00:57:22,240
distinguished lecture

1280
00:57:22,240 --> 00:57:23,680
and

1281
00:57:23,680 --> 00:57:27,040
so if you have further questions to ask

1282
00:57:27,040 --> 00:57:30,160
andrew you can always submit via the

1283
00:57:30,160 --> 00:57:32,160
chat we can always make sure to forward

1284
00:57:32,160 --> 00:57:35,598
the questions to to him

1285
00:57:35,760 --> 00:57:37,440
and uh so

1286
00:57:37,440 --> 00:57:38,960
please

1287
00:57:38,960 --> 00:57:42,160
let's thank andy again for his uh for

1288
00:57:42,160 --> 00:57:45,920
his talk thank you andy

1289
00:57:47,119 --> 00:57:49,359
well thank you very much michelle and

1290
00:57:49,359 --> 00:57:51,440
kevin and you you

1291
00:57:51,440 --> 00:57:54,000
and i thank you and and thanks to all

1292
00:57:54,000 --> 00:57:56,079
those that are present

1293
00:57:56,079 --> 00:57:59,200
i i enjoy

1294
00:58:01,599 --> 00:58:03,760
yeah bye-bye

1295
00:58:03,760 --> 00:58:05,599
all right bye

1296
00:58:05,599 --> 00:58:09,960
bye-bye so i'll just leave bye

