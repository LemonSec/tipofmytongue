1
00:00:04,319 --> 00:00:07,839
hello everyone welcome to this talk

2
00:00:07,839 --> 00:00:11,120
i am ritambhomik from india paris

3
00:00:11,120 --> 00:00:13,360
and today i'll be talking about

4
00:00:13,360 --> 00:00:14,639
our paper

5
00:00:14,639 --> 00:00:16,800
qcb efficient quantum secure

6
00:00:16,800 --> 00:00:18,640
authenticated encryption

7
00:00:18,640 --> 00:00:21,600
at asia crypt 2021

8
00:00:21,600 --> 00:00:23,760
and this is a joint work

9
00:00:23,760 --> 00:00:27,199
with savier ponta andresha you

10
00:00:27,199 --> 00:00:31,560
get aloha mariana

11
00:00:36,239 --> 00:00:39,120
we begin with a block cipher which is a

12
00:00:39,120 --> 00:00:41,120
secure

13
00:00:41,120 --> 00:00:42,399
fixed-width

14
00:00:42,399 --> 00:00:46,000
encryption scheme and we want to build

15
00:00:46,000 --> 00:00:47,360
on top of it

16
00:00:47,360 --> 00:00:49,920
and authenticate an encryption mode

17
00:00:49,920 --> 00:00:52,160
now what is an authenticated encryption

18
00:00:52,160 --> 00:00:53,039
mode

19
00:00:53,039 --> 00:00:56,640
it takes in an initial value iv a

20
00:00:56,640 --> 00:00:59,920
message m and some associated data a

21
00:00:59,920 --> 00:01:02,480
and it computes the ciphertext c

22
00:01:02,480 --> 00:01:04,080
and the tag t

23
00:01:04,080 --> 00:01:07,360
and it comes with two promises one is a

24
00:01:07,360 --> 00:01:11,680
promise of confidentiality that is c

25
00:01:11,680 --> 00:01:15,040
is indistinguishable from some random

26
00:01:15,040 --> 00:01:17,040
function of m

27
00:01:17,040 --> 00:01:19,680
or some random permutation of m

28
00:01:19,680 --> 00:01:23,360
and the other is authenticity that

29
00:01:23,360 --> 00:01:27,200
ct should not be forgeable that is an

30
00:01:27,200 --> 00:01:29,119
adversary who has not queried a

31
00:01:29,119 --> 00:01:31,759
particular triple ivma

32
00:01:31,759 --> 00:01:34,960
should not be able to produce a city

33
00:01:34,960 --> 00:01:37,119
which

34
00:01:37,119 --> 00:01:42,240
which like such that ivma encrypts to ct

35
00:01:42,240 --> 00:01:44,560
so this is an authenticated encryption

36
00:01:44,560 --> 00:01:45,600
mode

37
00:01:45,600 --> 00:01:48,320
now one way to achieve it is to handle

38
00:01:48,320 --> 00:01:50,880
the encryption and authentication tasks

39
00:01:50,880 --> 00:01:53,600
separately like in the encrypted mac

40
00:01:53,600 --> 00:01:56,320
paradigm where we first encrypt the

41
00:01:56,320 --> 00:01:59,840
message securely into a cipher text c

42
00:01:59,840 --> 00:02:03,360
using some mod like the counter mode

43
00:02:03,360 --> 00:02:04,479
and

44
00:02:04,479 --> 00:02:07,680
then we authenticate c with a secure mac

45
00:02:07,680 --> 00:02:10,080
like n mac or hmac

46
00:02:10,080 --> 00:02:13,520
and this gives us a secure a mode but

47
00:02:13,520 --> 00:02:15,599
the problem is that it is not

48
00:02:15,599 --> 00:02:18,080
lightweight it is red too that is we

49
00:02:18,080 --> 00:02:20,000
need two block circuit calls for every

50
00:02:20,000 --> 00:02:21,520
message block

51
00:02:21,520 --> 00:02:26,000
and what we want here is a rate one a

52
00:02:26,000 --> 00:02:29,760
mode that is it it should only spend

53
00:02:29,760 --> 00:02:32,000
about one block cipher call for every

54
00:02:32,000 --> 00:02:33,120
message

55
00:02:33,120 --> 00:02:35,120
so that is the goal here

56
00:02:35,120 --> 00:02:38,480
and a popular a mod which

57
00:02:38,480 --> 00:02:40,480
achieves this call which is red one is

58
00:02:40,480 --> 00:02:43,280
the offset code book or ocb

59
00:02:43,280 --> 00:02:45,760
and here we look at its present variant

60
00:02:45,760 --> 00:02:47,599
ocb3

61
00:02:47,599 --> 00:02:51,680
what it does is it it takes the design

62
00:02:51,680 --> 00:02:54,959
of the ecb electronic output but before

63
00:02:54,959 --> 00:02:57,599
and after each block cipher call it adds

64
00:02:57,599 --> 00:02:58,959
an offset

65
00:02:58,959 --> 00:03:01,599
and this offset depends on the iv

66
00:03:01,599 --> 00:03:04,159
and it depends on the block number but

67
00:03:04,159 --> 00:03:07,360
the interesting thing about rcv3 is

68
00:03:07,360 --> 00:03:11,840
that the iv of a certain block like the

69
00:03:11,840 --> 00:03:14,319
offset delta of certain block like delta

70
00:03:14,319 --> 00:03:15,920
iv i

71
00:03:15,920 --> 00:03:16,640
is

72
00:03:16,640 --> 00:03:18,720
the xor of two components one which

73
00:03:18,720 --> 00:03:20,959
comes from the iv and one which comes

74
00:03:20,959 --> 00:03:23,599
from the block

75
00:03:25,120 --> 00:03:27,360
now we want to examine the quantum

76
00:03:27,360 --> 00:03:29,920
security of ocb

77
00:03:29,920 --> 00:03:32,319
but before that we have to decide on the

78
00:03:32,319 --> 00:03:33,360
model

79
00:03:33,360 --> 00:03:36,000
and in general there are

80
00:03:36,000 --> 00:03:38,239
two broad models

81
00:03:38,239 --> 00:03:41,040
uh for examining quantum security or

82
00:03:41,040 --> 00:03:43,680
security against the quantum adversary

83
00:03:43,680 --> 00:03:46,799
one is the classical query model where

84
00:03:46,799 --> 00:03:49,440
the adversary is only allowed to make

85
00:03:49,440 --> 00:03:51,920
classical queries to the construction

86
00:03:51,920 --> 00:03:52,799
but

87
00:03:52,799 --> 00:03:55,360
they can do offline computations on a

88
00:03:55,360 --> 00:03:57,200
quantum computer

89
00:03:57,200 --> 00:04:00,080
and this is a very realistic scenario

90
00:04:00,080 --> 00:04:02,080
but it's less powerful because you do

91
00:04:02,080 --> 00:04:04,560
not get any superposition access

92
00:04:04,560 --> 00:04:06,400
to the construction

93
00:04:06,400 --> 00:04:07,200
and

94
00:04:07,200 --> 00:04:10,480
for some cases in public key

95
00:04:10,480 --> 00:04:11,760
encryption

96
00:04:11,760 --> 00:04:13,760
such an adversary is powerful enough to

97
00:04:13,760 --> 00:04:16,000
completely break the system but this is

98
00:04:16,000 --> 00:04:18,720
usually not the case in symmetrical

99
00:04:18,720 --> 00:04:21,120
systems and so far only

100
00:04:21,120 --> 00:04:24,000
quadratic speedups have been found or

101
00:04:24,000 --> 00:04:27,280
very recently a bit more than quadratic

102
00:04:27,280 --> 00:04:29,199
but not

103
00:04:29,199 --> 00:04:31,040
it's not something not for instance

104
00:04:31,040 --> 00:04:33,440
exponential speedups

105
00:04:33,440 --> 00:04:36,160
so this is the classical query model and

106
00:04:36,160 --> 00:04:38,160
more theoretical but

107
00:04:38,160 --> 00:04:40,000
like more suited to

108
00:04:40,000 --> 00:04:42,880
this probable security scenario is the

109
00:04:42,880 --> 00:04:45,120
superposition query model where the

110
00:04:45,120 --> 00:04:47,199
adversary can do quantum computations

111
00:04:47,199 --> 00:04:49,600
offline but also can

112
00:04:49,600 --> 00:04:53,360
access certain registers of the system

113
00:04:53,360 --> 00:04:57,440
quantum as in a as in in superposition

114
00:04:57,440 --> 00:04:59,600
and this can actually allow very

115
00:04:59,600 --> 00:05:01,680
powerful attacks on some symmetric

116
00:05:01,680 --> 00:05:04,479
systems as we'll see

117
00:05:04,479 --> 00:05:06,560
so in this paper we

118
00:05:06,560 --> 00:05:11,560
consider this superposition query model

119
00:05:11,840 --> 00:05:15,039
and as it turns out ocb which is by the

120
00:05:15,039 --> 00:05:18,320
way classically proven to be secure is

121
00:05:18,320 --> 00:05:21,360
broken in the superposition query model

122
00:05:21,360 --> 00:05:22,400
and

123
00:05:22,400 --> 00:05:24,400
so before before going into that we

124
00:05:24,400 --> 00:05:26,560
should specify that here we only

125
00:05:26,560 --> 00:05:30,080
consider the messages to be

126
00:05:30,080 --> 00:05:32,400
quantumly accessible that is you can the

127
00:05:32,400 --> 00:05:34,240
adversary can query

128
00:05:34,240 --> 00:05:35,039
the

129
00:05:35,039 --> 00:05:36,880
construction with messages which are in

130
00:05:36,880 --> 00:05:40,240
superposition but the iv is still

131
00:05:40,240 --> 00:05:42,160
considered classical because the iv is

132
00:05:42,160 --> 00:05:43,360
not

133
00:05:43,360 --> 00:05:45,199
generally not controlled by the

134
00:05:45,199 --> 00:05:47,520
adversary so there can be a more general

135
00:05:47,520 --> 00:05:49,280
model where even

136
00:05:49,280 --> 00:05:52,240
the iv is quantumly accessible but we do

137
00:05:52,240 --> 00:05:54,479
not consider that here here we consider

138
00:05:54,479 --> 00:05:57,440
the case where the iv is always classy

139
00:05:57,440 --> 00:05:58,720
now

140
00:05:58,720 --> 00:06:00,880
again if we are happy with red two if we

141
00:06:00,880 --> 00:06:03,600
do not want lightweight then the counter

142
00:06:03,600 --> 00:06:06,800
plus n max hmac mode still works it it

143
00:06:06,800 --> 00:06:08,880
gives us a

144
00:06:08,880 --> 00:06:10,960
an ae mode which is secure in the

145
00:06:10,960 --> 00:06:13,039
superposition query model we just

146
00:06:13,039 --> 00:06:14,400
described

147
00:06:14,400 --> 00:06:15,680
but

148
00:06:15,680 --> 00:06:17,759
as mentioned before we want a red one

149
00:06:17,759 --> 00:06:18,720
model

150
00:06:18,720 --> 00:06:19,600
and

151
00:06:19,600 --> 00:06:22,880
so we want some way to fix ocb to make

152
00:06:22,880 --> 00:06:25,360
it quantum resistant without spending

153
00:06:25,360 --> 00:06:27,759
extra block cipher calls

154
00:06:27,759 --> 00:06:29,199
and that is what we'll explore in the

155
00:06:29,199 --> 00:06:32,160
rest of this paper

156
00:06:33,600 --> 00:06:35,199
now

157
00:06:35,199 --> 00:06:36,080
so

158
00:06:36,080 --> 00:06:38,240
one of the very important tools in this

159
00:06:38,240 --> 00:06:41,039
superposition query models to attack and

160
00:06:41,039 --> 00:06:43,840
break symmetric systems is the simon's

161
00:06:43,840 --> 00:06:45,199
algorithm

162
00:06:45,199 --> 00:06:48,639
and what this does is that given a

163
00:06:48,639 --> 00:06:51,039
periodic function f that is a function

164
00:06:51,039 --> 00:06:54,880
with some hidden period s such that f of

165
00:06:54,880 --> 00:06:59,440
x x or s is always equal to f x

166
00:06:59,440 --> 00:07:01,039
and given some

167
00:07:01,039 --> 00:07:03,039
superposition query access to such a

168
00:07:03,039 --> 00:07:04,800
function f

169
00:07:04,800 --> 00:07:07,599
siemens attack can recover the secret

170
00:07:07,599 --> 00:07:08,880
period s

171
00:07:08,880 --> 00:07:11,280
in polynomial time

172
00:07:11,280 --> 00:07:13,520
and this is something that cannot be

173
00:07:13,520 --> 00:07:18,479
done in a classical scenario and this

174
00:07:18,560 --> 00:07:21,759
this gives us access to some new attacks

175
00:07:21,759 --> 00:07:24,160
some very interesting attacks on

176
00:07:24,160 --> 00:07:27,360
symmetric systems

177
00:07:28,880 --> 00:07:31,680
for instance on rcb3 now it's not

178
00:07:31,680 --> 00:07:34,319
unnatural that ocbtf cipher designed

179
00:07:34,319 --> 00:07:35,039
with

180
00:07:35,039 --> 00:07:37,840
a classical adversary in mind will have

181
00:07:37,840 --> 00:07:39,520
will leave vulnerabilities such as

182
00:07:39,520 --> 00:07:41,840
hidden periods because it is usually not

183
00:07:41,840 --> 00:07:44,479
a vulnerability when the adversary

184
00:07:44,479 --> 00:07:47,280
is just classical

185
00:07:47,280 --> 00:07:49,759
and as it turns out in ocb3 there are

186
00:07:49,759 --> 00:07:51,120
hidden periods

187
00:07:51,120 --> 00:07:52,160
everywhere

188
00:07:52,160 --> 00:07:54,800
so for instance in the ciphering part if

189
00:07:54,800 --> 00:07:57,919
we take the encryption of the two equal

190
00:07:57,919 --> 00:08:01,039
message blocks and then exot the outputs

191
00:08:01,039 --> 00:08:03,039
it gives us an effects with a hidden

192
00:08:03,039 --> 00:08:04,800
period

193
00:08:04,800 --> 00:08:08,080
of delta 0 x or delta 1

194
00:08:08,080 --> 00:08:10,400
and this happens because

195
00:08:10,400 --> 00:08:12,000
this this period would actually have

196
00:08:12,000 --> 00:08:15,120
been delta 0 i v x or delta 1 iv but as

197
00:08:15,120 --> 00:08:16,400
mentioned before

198
00:08:16,400 --> 00:08:17,599
uh this

199
00:08:17,599 --> 00:08:20,319
delta 0 iv is just the xor of delta iv

200
00:08:20,319 --> 00:08:23,199
and delta 0 so the delta iv part cancels

201
00:08:23,199 --> 00:08:25,680
out from the two offsets and we are just

202
00:08:25,680 --> 00:08:28,400
left with delta 0 x or delta 1 which is

203
00:08:28,400 --> 00:08:30,720
not dependent on the iv

204
00:08:30,720 --> 00:08:32,958
thus we can just repeatedly queries and

205
00:08:32,958 --> 00:08:36,000
then use simon's attack to recover delta

206
00:08:36,000 --> 00:08:38,399
0x or delta 1

207
00:08:38,399 --> 00:08:40,559
and even if we do not look at the

208
00:08:40,559 --> 00:08:42,240
ciphering part we can just look at the

209
00:08:42,240 --> 00:08:44,080
tag part instead and

210
00:08:44,080 --> 00:08:46,240
query it with an empty message

211
00:08:46,240 --> 00:08:48,480
and

212
00:08:48,480 --> 00:08:49,920
and two

213
00:08:49,920 --> 00:08:51,839
equal 80 blocks

214
00:08:51,839 --> 00:08:55,040
and then we can see that effects the

215
00:08:55,040 --> 00:08:56,800
output the tag x

216
00:08:56,800 --> 00:08:58,320
is

217
00:08:58,320 --> 00:09:00,399
it has a component which is dependent on

218
00:09:00,399 --> 00:09:02,640
the iv but then it has this function

219
00:09:02,640 --> 00:09:04,880
which is the rest of it is this function

220
00:09:04,880 --> 00:09:07,279
which has this hidden period of delta 0

221
00:09:07,279 --> 00:09:08,560
x or delta

222
00:09:08,560 --> 00:09:10,399
now this is not strictly periodic

223
00:09:10,399 --> 00:09:11,920
because

224
00:09:11,920 --> 00:09:14,080
if you cannot repeat the iv then this

225
00:09:14,080 --> 00:09:16,640
function changes each time and

226
00:09:16,640 --> 00:09:18,959
for for each different iv

227
00:09:18,959 --> 00:09:21,120
but for siemens attack it's sufficient

228
00:09:21,120 --> 00:09:22,959
that the period is

229
00:09:22,959 --> 00:09:24,320
constant

230
00:09:24,320 --> 00:09:26,959
and how it works is by sampling vectors

231
00:09:26,959 --> 00:09:28,800
orthogonal to the period

232
00:09:28,800 --> 00:09:30,320
and so

233
00:09:30,320 --> 00:09:32,240
simon's attack can still be used in this

234
00:09:32,240 --> 00:09:35,839
case to recover delta 0 so delta

235
00:09:35,839 --> 00:09:36,880
and

236
00:09:36,880 --> 00:09:37,920
so

237
00:09:37,920 --> 00:09:40,080
just to mention that why is this an

238
00:09:40,080 --> 00:09:42,480
attack because once you have delta 0 x

239
00:09:42,480 --> 00:09:45,279
or delta 1 it's very simple to make a 4g

240
00:09:45,279 --> 00:09:48,480
we can just take any two blocks a 0 a 1

241
00:09:48,480 --> 00:09:50,959
which are which do not exert to delta

242
00:09:50,959 --> 00:09:52,880
zero x or delta one

243
00:09:52,880 --> 00:09:56,240
and then for some iv and some m we can

244
00:09:56,240 --> 00:09:58,800
query iv a zero one m

245
00:09:58,800 --> 00:10:01,680
to get some ct and then we can swap a

246
00:10:01,680 --> 00:10:04,000
zero and a one being a one to the first

247
00:10:04,000 --> 00:10:06,320
block is zero to the second block but

248
00:10:06,320 --> 00:10:08,240
and then add to each this difference

249
00:10:08,240 --> 00:10:10,800
delta zero x of delta one and it's easy

250
00:10:10,800 --> 00:10:14,000
to check that this is of then ct is a

251
00:10:14,000 --> 00:10:17,440
valid forge for this particular triple

252
00:10:17,440 --> 00:10:20,240
v and a one x or delta g x or delta one

253
00:10:20,240 --> 00:10:22,880
is zero x or delta zero x of delta one

254
00:10:22,880 --> 00:10:25,200
and f

255
00:10:25,200 --> 00:10:27,200
so uh with this uh

256
00:10:27,200 --> 00:10:29,519
this way once this uh sum of offsets has

257
00:10:29,519 --> 00:10:31,680
been recovered it's quite easy to attack

258
00:10:31,680 --> 00:10:33,920
cos a b3

259
00:10:33,920 --> 00:10:34,720
now

260
00:10:34,720 --> 00:10:38,000
it it may seem that the real problem

261
00:10:38,000 --> 00:10:41,519
here is that this delta 0 iv x or delta

262
00:10:41,519 --> 00:10:42,560
1 iv

263
00:10:42,560 --> 00:10:45,519
is independent of iv because the iv

264
00:10:45,519 --> 00:10:48,079
components get cancelled out

265
00:10:48,079 --> 00:10:50,720
and one attempt to fix this could be

266
00:10:50,720 --> 00:10:53,040
just to make this delta zero iv

267
00:10:53,040 --> 00:10:55,040
ah so just to make this

268
00:10:55,040 --> 00:10:58,079
xor of the two offsets iv dependent for

269
00:10:58,079 --> 00:11:01,600
instance we can take delta zero iv to be

270
00:11:01,600 --> 00:11:02,720
i

271
00:11:02,720 --> 00:11:04,800
dot eki

272
00:11:04,800 --> 00:11:06,880
and then this same attack doesn't work

273
00:11:06,880 --> 00:11:09,440
because iv changes each time

274
00:11:09,440 --> 00:11:12,160
but we show in this paper that this

275
00:11:12,160 --> 00:11:14,000
construction is still vulnerable to a

276
00:11:14,000 --> 00:11:16,480
similar attack because we can

277
00:11:16,480 --> 00:11:18,640
uh so in the same query we can take

278
00:11:18,640 --> 00:11:20,800
these non-overlapping pairs i1 i2 for

279
00:11:20,800 --> 00:11:24,480
instance 1 2 3 4 and so on at 10 minus 1

280
00:11:24,480 --> 00:11:27,600
n and take the same x there so x 1 equal

281
00:11:27,600 --> 00:11:30,959
so m1 equals m2 m3 equals m4 and so on

282
00:11:30,959 --> 00:11:34,000
and then we take this xor c1 x of c2 c3

283
00:11:34,000 --> 00:11:35,680
c3 x or c4

284
00:11:35,680 --> 00:11:38,560
and with this we can find vectors like

285
00:11:38,560 --> 00:11:40,320
using siemens

286
00:11:40,320 --> 00:11:42,240
algorithm we can find vectors which are

287
00:11:42,240 --> 00:11:45,440
optimal to and this uh these

288
00:11:45,440 --> 00:11:47,839
differences here the periods of these

289
00:11:47,839 --> 00:11:51,120
functions c one x of c two and so on

290
00:11:51,120 --> 00:11:52,320
and

291
00:11:52,320 --> 00:11:54,880
with this we can find enough data to

292
00:11:54,880 --> 00:11:56,639
solve for eki

293
00:11:56,639 --> 00:11:57,920
so this is

294
00:11:57,920 --> 00:11:59,519
one of the first

295
00:11:59,519 --> 00:12:01,440
results we find in this paper because

296
00:12:01,440 --> 00:12:03,760
the earlier attacks are already were

297
00:12:03,760 --> 00:12:06,240
already well known

298
00:12:06,240 --> 00:12:09,600
so this is not enough to fix ocb

299
00:12:09,600 --> 00:12:09,880
and

300
00:12:09,880 --> 00:12:12,000
[Music]

301
00:12:12,000 --> 00:12:13,920
what we can guess from here is that it

302
00:12:13,920 --> 00:12:17,279
is the offsets which is the problem here

303
00:12:17,279 --> 00:12:21,519
i mean so simon is very powerful against

304
00:12:21,519 --> 00:12:23,920
many kinds of offsets and it's quite

305
00:12:23,920 --> 00:12:25,839
difficult to fix this without changing

306
00:12:25,839 --> 00:12:27,920
this very structure of adding the

307
00:12:27,920 --> 00:12:31,440
offsets we can turn instead to theta c b

308
00:12:31,440 --> 00:12:33,680
so what is uh theta sub e

309
00:12:33,680 --> 00:12:36,240
so this is cos c b three but here we can

310
00:12:36,240 --> 00:12:39,360
abstract out this entire middle part

311
00:12:39,360 --> 00:12:40,880
of this

312
00:12:40,880 --> 00:12:42,560
exhorting the offset and then passing

313
00:12:42,560 --> 00:12:44,240
through the block cipher call and xoring

314
00:12:44,240 --> 00:12:46,240
the offset again and we can say that

315
00:12:46,240 --> 00:12:48,880
this is a tweakable block cipher where

316
00:12:48,880 --> 00:12:52,079
this offset acts as a tweak

317
00:12:52,079 --> 00:12:54,720
and this is actually used so this theta

318
00:12:54,720 --> 00:12:56,639
b name is given by the

319
00:12:56,639 --> 00:12:59,440
authors of the ocb paper and they use it

320
00:12:59,440 --> 00:13:02,000
as an intermediate construction for the

321
00:13:02,000 --> 00:13:03,519
proof of

322
00:13:03,519 --> 00:13:04,880
ocb3

323
00:13:04,880 --> 00:13:08,079
but what we can say is that

324
00:13:08,079 --> 00:13:11,360
theta cv itself does not have so many

325
00:13:11,360 --> 00:13:12,880
problems

326
00:13:12,880 --> 00:13:13,920
but

327
00:13:13,920 --> 00:13:17,279
so we can say that we use theta cb but

328
00:13:17,279 --> 00:13:18,800
we do not use

329
00:13:18,800 --> 00:13:20,800
these offsets we do not we process the

330
00:13:20,800 --> 00:13:23,279
tweak differently we do not use them as

331
00:13:23,279 --> 00:13:25,519
offsets and that is uh that is the

332
00:13:25,519 --> 00:13:31,200
direction we look for trying to fix ocb

333
00:13:31,200 --> 00:13:34,959
and so we come up with qcb which is the

334
00:13:34,959 --> 00:13:38,560
construction you propose in this paper

335
00:13:38,560 --> 00:13:40,560
and in the encryption part this is

336
00:13:40,560 --> 00:13:42,959
actually similar to theta cb and we

337
00:13:42,959 --> 00:13:44,959
assume for now this

338
00:13:44,959 --> 00:13:47,760
e tilde is a secure quantumly secure

339
00:13:47,760 --> 00:13:49,920
tweakable block cipher and i'll explain

340
00:13:49,920 --> 00:13:52,720
so what i mean by that

341
00:13:52,720 --> 00:13:53,920
so

342
00:13:53,920 --> 00:13:56,079
uh this encryption part of qcb is the

343
00:13:56,079 --> 00:13:58,959
same as theta cb because uh

344
00:13:58,959 --> 00:14:02,000
i mean this is secure enough

345
00:14:02,000 --> 00:14:03,519
but for the tag part there is an

346
00:14:03,519 --> 00:14:04,959
important change

347
00:14:04,959 --> 00:14:06,560
in

348
00:14:06,560 --> 00:14:10,320
ocb3 we do not use the iv for

349
00:14:10,320 --> 00:14:13,040
getting the tags they are processed with

350
00:14:13,040 --> 00:14:15,279
these offsets which are not dependent on

351
00:14:15,279 --> 00:14:16,800
ivs

352
00:14:16,800 --> 00:14:17,600
and

353
00:14:17,600 --> 00:14:20,800
but here we need the ivs to go into the

354
00:14:20,800 --> 00:14:22,639
tweaks for the for processing the

355
00:14:22,639 --> 00:14:25,519
associated

356
00:14:26,880 --> 00:14:29,199
so this is one important change and so

357
00:14:29,199 --> 00:14:32,880
this is the qcb construction

358
00:14:32,880 --> 00:14:34,560
now we turn to

359
00:14:34,560 --> 00:14:36,880
proving in security and before that we

360
00:14:36,880 --> 00:14:39,440
have to define its security which is one

361
00:14:39,440 --> 00:14:41,839
of the tricky bits

362
00:14:41,839 --> 00:14:42,720
so

363
00:14:42,720 --> 00:14:45,199
first we need a secure tbc now what we

364
00:14:45,199 --> 00:14:48,079
what we mean by that so ideally

365
00:14:48,079 --> 00:14:50,399
a quantum secure tvc should withstand

366
00:14:50,399 --> 00:14:52,639
the following game where the adversary

367
00:14:52,639 --> 00:14:55,600
is trying to distinguish ekt from a

368
00:14:55,600 --> 00:14:58,639
family of random permutations pi t

369
00:14:58,639 --> 00:15:01,120
and the quick inputs are classical but

370
00:15:01,120 --> 00:15:03,440
the messages are superposed

371
00:15:03,440 --> 00:15:05,680
but these classical tweaks can be chosen

372
00:15:05,680 --> 00:15:07,839
adaptively so there is no restriction on

373
00:15:07,839 --> 00:15:10,320
that this is the ideal tbc ideal

374
00:15:10,320 --> 00:15:13,760
definition of dbz

375
00:15:14,079 --> 00:15:14,680
and

376
00:15:14,680 --> 00:15:16,480
[Music]

377
00:15:16,480 --> 00:15:19,040
then with this when we instantiate the

378
00:15:19,040 --> 00:15:22,079
qcb with this ideal dbc we can make the

379
00:15:22,079 --> 00:15:24,560
following claims in confidentiality we

380
00:15:24,560 --> 00:15:27,760
can show and in qcpa

381
00:15:27,760 --> 00:15:30,160
security what we mean by that so in the

382
00:15:30,160 --> 00:15:32,000
in qcpa game

383
00:15:32,000 --> 00:15:33,680
there is a query phase where the

384
00:15:33,680 --> 00:15:36,079
adversary makes q encryption queries

385
00:15:36,079 --> 00:15:39,440
with adaptive classical ivs and some ama

386
00:15:39,440 --> 00:15:41,600
which can be in superposition

387
00:15:41,600 --> 00:15:43,600
then there is a challenge phase where

388
00:15:43,600 --> 00:15:46,320
the adversary has to distinguish between

389
00:15:46,320 --> 00:15:48,000
the encryptions of two classical

390
00:15:48,000 --> 00:15:49,440
messages

391
00:15:49,440 --> 00:15:51,600
this part is important so this in the

392
00:15:51,600 --> 00:15:53,279
challenge the challenges have to be

393
00:15:53,279 --> 00:15:54,959
classical

394
00:15:54,959 --> 00:15:57,920
and for authenticity we use the bonus

395
00:15:57,920 --> 00:16:00,160
andre uh definition

396
00:16:00,160 --> 00:16:02,079
where in the query phase the adversary

397
00:16:02,079 --> 00:16:04,560
makes two encryption queries with again

398
00:16:04,560 --> 00:16:07,839
with adaptive classical ivs and m a

399
00:16:07,839 --> 00:16:10,000
possible in superposition and in the

400
00:16:10,000 --> 00:16:12,720
forging phase the adversary must output

401
00:16:12,720 --> 00:16:17,360
q plus one valid tuples aivct

402
00:16:17,360 --> 00:16:19,759
this is the bonus on the definition and

403
00:16:19,759 --> 00:16:22,880
we can show that qcb achieves

404
00:16:22,880 --> 00:16:24,320
both these goals

405
00:16:24,320 --> 00:16:28,079
when instantiated with an ideal dbc

406
00:16:28,079 --> 00:16:30,560
and how do you prove that well

407
00:16:30,560 --> 00:16:31,920
first we

408
00:16:31,920 --> 00:16:34,000
replace all the tweakable block ciphers

409
00:16:34,000 --> 00:16:38,399
with ideal random permutations

410
00:16:38,399 --> 00:16:40,959
and which are independent for in for

411
00:16:40,959 --> 00:16:43,519
different tweaks

412
00:16:43,519 --> 00:16:46,519
and then it's simple to argue because in

413
00:16:46,519 --> 00:16:49,199
confidentiality since the ivs are not

414
00:16:49,199 --> 00:16:51,120
repeated when we move on to the

415
00:16:51,120 --> 00:16:53,199
challenge phase and

416
00:16:53,199 --> 00:16:55,279
so the permutations which appear in the

417
00:16:55,279 --> 00:16:56,639
challenge phase

418
00:16:56,639 --> 00:16:59,040
do not appear in the query phase and

419
00:16:59,040 --> 00:17:01,199
their outputs have are independent of

420
00:17:01,199 --> 00:17:03,759
anything any information the adversary

421
00:17:03,759 --> 00:17:06,160
obtained in the query phase so yeah

422
00:17:06,160 --> 00:17:09,359
adversarial network is better than end

423
00:17:09,359 --> 00:17:11,439
and for authenticity we can

424
00:17:11,439 --> 00:17:13,359
say that

425
00:17:13,359 --> 00:17:15,760
we can we actually classify

426
00:17:15,760 --> 00:17:18,959
this forging attempt this q plus one

427
00:17:18,959 --> 00:17:20,400
tuple which

428
00:17:20,400 --> 00:17:23,679
the adversary is at i mean submits as a

429
00:17:23,679 --> 00:17:26,240
4g attempt and we classify it based on

430
00:17:26,240 --> 00:17:28,559
whether it contains a new iv or a new

431
00:17:28,559 --> 00:17:30,880
cipher text block or a new some new

432
00:17:30,880 --> 00:17:32,400
associated data

433
00:17:32,400 --> 00:17:34,799
and in each case we show that one of the

434
00:17:34,799 --> 00:17:36,320
two must be true that either the

435
00:17:36,320 --> 00:17:39,120
adversary produces an input output pair

436
00:17:39,120 --> 00:17:39,919
for

437
00:17:39,919 --> 00:17:42,000
some random permutation which it has

438
00:17:42,000 --> 00:17:43,520
never queried

439
00:17:43,520 --> 00:17:45,520
or the adversary produces

440
00:17:45,520 --> 00:17:47,440
two input output pairs for random

441
00:17:47,440 --> 00:17:49,280
permutation which has only been queried

442
00:17:49,280 --> 00:17:50,640
once

443
00:17:50,640 --> 00:17:53,120
and we can claim that both of these are

444
00:17:53,120 --> 00:17:56,160
difficult to do better than

445
00:17:56,160 --> 00:17:57,919
a random guess

446
00:17:57,919 --> 00:18:00,799
and this gives us a proof of

447
00:18:00,799 --> 00:18:01,520
the

448
00:18:01,520 --> 00:18:07,440
the security of qcb when with ideal tbc

449
00:18:07,440 --> 00:18:08,480
but

450
00:18:08,480 --> 00:18:09,840
we are we

451
00:18:09,840 --> 00:18:11,200
want to make it

452
00:18:11,200 --> 00:18:12,880
i mean we want to go further because an

453
00:18:12,880 --> 00:18:15,200
ideal tbc may not be rate one

454
00:18:15,200 --> 00:18:16,160
and

455
00:18:16,160 --> 00:18:18,240
for instance there is a

456
00:18:18,240 --> 00:18:20,320
there is a construction by vasoyama and

457
00:18:20,320 --> 00:18:22,799
iwata which which needs three block

458
00:18:22,799 --> 00:18:25,679
cipher calls for every tv sequel

459
00:18:25,679 --> 00:18:27,440
but this does not help us because if we

460
00:18:27,440 --> 00:18:31,280
instantiate qcb with a dvc which

461
00:18:31,280 --> 00:18:33,600
does not which spends more than one

462
00:18:33,600 --> 00:18:35,840
block cipher call for every dbc call

463
00:18:35,840 --> 00:18:38,799
then qcb does not remain that one any

464
00:18:38,799 --> 00:18:41,039
anymore and our original purpose is

465
00:18:41,039 --> 00:18:43,919
defeated so you want to look for a dvc

466
00:18:43,919 --> 00:18:45,600
which is red1

467
00:18:45,600 --> 00:18:48,640
and we found the key tweak insertion dvc

468
00:18:48,640 --> 00:18:49,440
where

469
00:18:49,440 --> 00:18:53,760
the tweak is just xor with the key

470
00:18:53,760 --> 00:18:57,840
and this in many cases is not a very

471
00:18:57,840 --> 00:19:00,960
ideal construction for a tbc but we find

472
00:19:00,960 --> 00:19:05,679
that it serves a purpose very well

473
00:19:05,919 --> 00:19:06,880
but

474
00:19:06,880 --> 00:19:08,400
so how and

475
00:19:08,400 --> 00:19:10,400
now we need to prove the security of

476
00:19:10,400 --> 00:19:12,799
this dbc but unfortunately we could not

477
00:19:12,799 --> 00:19:13,679
prove

478
00:19:13,679 --> 00:19:16,240
its ideal dbc security which we promised

479
00:19:16,240 --> 00:19:18,240
before and instead we proved its

480
00:19:18,240 --> 00:19:20,320
security under a slightly more

481
00:19:20,320 --> 00:19:23,120
restricted restrictive condition but the

482
00:19:23,120 --> 00:19:25,919
tweaks are non-adaptive so the adversary

483
00:19:25,919 --> 00:19:27,039
has to

484
00:19:27,039 --> 00:19:30,080
like declare a set of tweaks beforehand

485
00:19:30,080 --> 00:19:31,600
and then

486
00:19:31,600 --> 00:19:34,320
the rest of the game is the same

487
00:19:34,320 --> 00:19:36,799
but this this is the only restriction we

488
00:19:36,799 --> 00:19:37,679
need

489
00:19:37,679 --> 00:19:38,960
and since

490
00:19:38,960 --> 00:19:41,760
this is not an ideal tbc we also modify

491
00:19:41,760 --> 00:19:46,320
the security goals of qcb accordingly

492
00:19:46,320 --> 00:19:48,240
and in fact in this dbc security

493
00:19:48,240 --> 00:19:51,200
definition we make one other small claim

494
00:19:51,200 --> 00:19:52,400
small change

495
00:19:52,400 --> 00:19:55,280
but i'll come to that later

496
00:19:55,280 --> 00:19:57,600
so for the qcb security the modified

497
00:19:57,600 --> 00:20:00,320
calls locals follows like there is this

498
00:20:00,320 --> 00:20:03,919
modified int qcpa where the ivs are

499
00:20:03,919 --> 00:20:06,320
either random or specified in adverse

500
00:20:06,320 --> 00:20:09,600
advance so they are not adversely

501
00:20:09,600 --> 00:20:11,200
controlled

502
00:20:11,200 --> 00:20:14,159
and the query phase and challenge phase

503
00:20:14,159 --> 00:20:15,760
as before

504
00:20:15,760 --> 00:20:18,000
and then we for authenticity we have the

505
00:20:18,000 --> 00:20:20,400
modified visit definition where again

506
00:20:20,400 --> 00:20:22,960
the ivs are the random or specified in

507
00:20:22,960 --> 00:20:24,159
advance

508
00:20:24,159 --> 00:20:26,400
and then the query phase and 14 phase

509
00:20:26,400 --> 00:20:28,080
are before so we make these

510
00:20:28,080 --> 00:20:30,400
modifications to take into account our

511
00:20:30,400 --> 00:20:32,960
modified security goal of

512
00:20:32,960 --> 00:20:35,280
security def i mean

513
00:20:35,280 --> 00:20:37,600
modified security of the dbc we are

514
00:20:37,600 --> 00:20:41,520
using to instantiate this particular qcp

515
00:20:41,520 --> 00:20:43,200
so here just to clarify we are talking

516
00:20:43,200 --> 00:20:46,559
about qcb when instantiated with the

517
00:20:46,559 --> 00:20:50,080
gateway session dvc

518
00:20:50,080 --> 00:20:52,799
and how do we prove this security well

519
00:20:52,799 --> 00:20:54,960
uh it mostly follows the proof for the

520
00:20:54,960 --> 00:20:58,320
ideal tv sequence we can show that once

521
00:20:58,320 --> 00:21:00,559
i mean once we put this restriction on

522
00:21:00,559 --> 00:21:05,039
the ivs it's we can just reduce it to

523
00:21:05,039 --> 00:21:07,440
the security of the tvc under a modified

524
00:21:07,440 --> 00:21:08,559
definition

525
00:21:08,559 --> 00:21:10,720
but there is one caveat

526
00:21:10,720 --> 00:21:13,840
and as you recall for proof of visit we

527
00:21:13,840 --> 00:21:15,360
need

528
00:21:15,360 --> 00:21:18,080
we need to verify the forging attacks

529
00:21:18,080 --> 00:21:20,720
and for that we'll need additional tv

530
00:21:20,720 --> 00:21:23,440
sequence and which may be with fresh

531
00:21:23,440 --> 00:21:25,679
tweaks which are not declared in advance

532
00:21:25,679 --> 00:21:28,640
so this is not strictly captured by

533
00:21:28,640 --> 00:21:30,799
the non-adaptive tweak scenario we

534
00:21:30,799 --> 00:21:32,480
discussed before

535
00:21:32,480 --> 00:21:35,360
but for this we can just make a simple

536
00:21:35,360 --> 00:21:37,600
uh change that after the

537
00:21:37,600 --> 00:21:40,640
in the tbc security game after the

538
00:21:40,640 --> 00:21:43,039
quantum query phase there is a classical

539
00:21:43,039 --> 00:21:45,200
query phase where there is a where the

540
00:21:45,200 --> 00:21:47,919
adversary can ask a number of classical

541
00:21:47,919 --> 00:21:50,000
queries which non-adaptively of course

542
00:21:50,000 --> 00:21:51,600
because the forging attempts have to be

543
00:21:51,600 --> 00:21:53,520
made all at once

544
00:21:53,520 --> 00:21:55,840
but this can use tweaks which are not

545
00:21:55,840 --> 00:21:58,400
predictable so it can be which do not

546
00:21:58,400 --> 00:22:00,400
belong to the predicted list

547
00:22:00,400 --> 00:22:03,200
so we make this definition and with that

548
00:22:03,200 --> 00:22:06,559
we can prove this modified is like the

549
00:22:06,559 --> 00:22:10,320
modified wizard for qcb

550
00:22:10,320 --> 00:22:13,520
so that is the uh that is all we find in

551
00:22:13,520 --> 00:22:15,120
this paper so

552
00:22:15,120 --> 00:22:17,200
in conclusion

553
00:22:17,200 --> 00:22:19,440
what we show is that if the tvc is

554
00:22:19,440 --> 00:22:21,760
perfect if it's ideal then

555
00:22:21,760 --> 00:22:24,960
pcb has this full end qcbs security and

556
00:22:24,960 --> 00:22:28,640
visit authenticity

557
00:22:28,640 --> 00:22:31,679
and it's also rate one but we did not

558
00:22:31,679 --> 00:22:34,080
we did not manage to instantiate it with

559
00:22:34,080 --> 00:22:36,960
some tbc because we could not uh prove

560
00:22:36,960 --> 00:22:39,840
this ideal uh quantum security for our

561
00:22:39,840 --> 00:22:41,679
dbc or red one

562
00:22:41,679 --> 00:22:43,600
dvc

563
00:22:43,600 --> 00:22:44,799
so instead

564
00:22:44,799 --> 00:22:46,640
we show that with the modified

565
00:22:46,640 --> 00:22:48,320
definition where the tweaks are

566
00:22:48,320 --> 00:22:52,400
pre-declared then qcb has this modified

567
00:22:52,400 --> 00:22:55,760
in qcp and visit securities

568
00:22:55,760 --> 00:22:58,159
and these but these are these all

569
00:22:58,159 --> 00:23:00,559
follows they follow the ideal cipher

570
00:23:00,559 --> 00:23:02,400
model so you do not have any results in

571
00:23:02,400 --> 00:23:04,640
the standard model

572
00:23:04,640 --> 00:23:07,600
so that is all we found in this paper

573
00:23:07,600 --> 00:23:09,840
and there are several open questions for

574
00:23:09,840 --> 00:23:13,200
instance can we properly define in qcc

575
00:23:13,200 --> 00:23:16,159
security for ae and then can we maybe

576
00:23:16,159 --> 00:23:19,520
explore in qcc security of uh that one

577
00:23:19,520 --> 00:23:22,320
constructions like qcb

578
00:23:22,320 --> 00:23:23,600
and

579
00:23:23,600 --> 00:23:24,799
can we

580
00:23:24,799 --> 00:23:27,120
say something about the bu authenticity

581
00:23:27,120 --> 00:23:29,200
which is the blind unforgetability and

582
00:23:29,200 --> 00:23:32,799
the more recent definition but

583
00:23:32,799 --> 00:23:35,840
can we say anything about bs bu

584
00:23:35,840 --> 00:23:36,559
of

585
00:23:36,559 --> 00:23:39,200
return constructions

586
00:23:39,200 --> 00:23:40,799
and of course

587
00:23:40,799 --> 00:23:42,000
can we prove

588
00:23:42,000 --> 00:23:44,720
that the key tweaking session is

589
00:23:44,720 --> 00:23:47,600
like has full quantum security like we

590
00:23:47,600 --> 00:23:49,760
don't know we need the adaptive quick

591
00:23:49,760 --> 00:23:53,039
case and if we can show that then qcb is

592
00:23:53,039 --> 00:23:55,600
shown to be fully in qcp and visit

593
00:23:55,600 --> 00:23:58,640
sequel without the modifications

594
00:23:58,640 --> 00:24:00,320
and finally

595
00:24:00,320 --> 00:24:02,480
can we say anything without the ideal

596
00:24:02,480 --> 00:24:05,200
cipher model think about the quantum

597
00:24:05,200 --> 00:24:07,279
security vc or the late one

598
00:24:07,279 --> 00:24:09,919
parallelizability

599
00:24:09,919 --> 00:24:12,400
so that is all thank you for listening

600
00:24:12,400 --> 00:24:14,640
to this recorded talk

601
00:24:14,640 --> 00:24:16,080
and

602
00:24:16,080 --> 00:24:17,919
the full version of this paper can be

603
00:24:17,919 --> 00:24:20,080
found in on april

604
00:24:20,080 --> 00:24:22,080
and maybe see you

605
00:24:22,080 --> 00:24:23,600
at asiacrypt

606
00:24:23,600 --> 00:24:26,840
thank you

