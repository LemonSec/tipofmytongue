1
00:00:01,280 --> 00:00:04,080
so welcome to our presentation regarding

2
00:00:04,080 --> 00:00:06,560
the security analysis of cpace it's

3
00:00:06,560 --> 00:00:08,800
joint work with michelle abdeller

4
00:00:08,800 --> 00:00:13,280
and julia hesser my name is bjorn haaser

5
00:00:13,280 --> 00:00:15,200
so this talk is about password

6
00:00:15,200 --> 00:00:17,680
authenticated key exchange so about

7
00:00:17,680 --> 00:00:19,680
establishing a high entropy session key

8
00:00:19,680 --> 00:00:23,279
by user of a low entry entropy password

9
00:00:23,279 --> 00:00:24,880
there are many protocols in the

10
00:00:24,880 --> 00:00:26,400
literature already

11
00:00:26,400 --> 00:00:29,519
there's a common challenge for efficient

12
00:00:29,519 --> 00:00:32,320
designs and basically the efficient

13
00:00:32,320 --> 00:00:35,360
designs required idealized assumptions

14
00:00:35,360 --> 00:00:38,480
such as ideal cypher or random oracles

15
00:00:38,480 --> 00:00:39,360
they

16
00:00:39,360 --> 00:00:41,440
we have recently seen implementation

17
00:00:41,440 --> 00:00:43,600
attacks and in the past at least in the

18
00:00:43,600 --> 00:00:45,520
past protocol design and actual

19
00:00:45,520 --> 00:00:48,480
application was hampered by patterns

20
00:00:48,480 --> 00:00:50,480
to give an example where

21
00:00:50,480 --> 00:00:53,199
clearly understanding the assumptions is

22
00:00:53,199 --> 00:00:55,760
important is for instance the encrypted

23
00:00:55,760 --> 00:00:58,320
key exchange protocol from belvin and

24
00:00:58,320 --> 00:01:00,640
merit in 1992

25
00:01:00,640 --> 00:01:03,120
where the proof required an ideal cipher

26
00:01:03,120 --> 00:01:05,040
for encrypting group elements and

27
00:01:05,040 --> 00:01:07,760
actually this assumption was at the core

28
00:01:07,760 --> 00:01:10,080
of the difficulties for actually

29
00:01:10,080 --> 00:01:14,479
implementing this this protocol securely

30
00:01:14,479 --> 00:01:16,080
an example for the implementation

31
00:01:16,080 --> 00:01:19,520
attacks is a recent exploit by van hove

32
00:01:19,520 --> 00:01:21,920
and ronan on a peak protocol which has

33
00:01:21,920 --> 00:01:25,280
been incorporated in wpa3 and eap

34
00:01:25,280 --> 00:01:28,400
where and at this time a non-cons

35
00:01:28,400 --> 00:01:31,040
constant time mapping algorithm hunt and

36
00:01:31,040 --> 00:01:33,439
pack has been exploited

37
00:01:33,439 --> 00:01:35,759
and regarding protocol design there have

38
00:01:35,759 --> 00:01:37,920
been quite a number of protocols which

39
00:01:37,920 --> 00:01:38,880
have

40
00:01:38,880 --> 00:01:41,520
as main feature that they

41
00:01:41,520 --> 00:01:43,600
circumvented the patterns that existed

42
00:01:43,600 --> 00:01:46,079
at the time and the complexity made it

43
00:01:46,079 --> 00:01:48,720
more computationally complex but also

44
00:01:48,720 --> 00:01:51,280
prevented security analysis

45
00:01:51,280 --> 00:01:53,680
so and as a result

46
00:01:53,680 --> 00:01:54,560
we

47
00:01:54,560 --> 00:01:57,280
designed at the time we designed cpace

48
00:01:57,280 --> 00:02:00,640
mainly as a protocol which aimed at

49
00:02:00,640 --> 00:02:03,040
targeting constrained devices with

50
00:02:03,040 --> 00:02:05,439
little memory consumption low

51
00:02:05,439 --> 00:02:08,080
computational complexity and we also aim

52
00:02:08,080 --> 00:02:10,959
that considering implementation pitfalls

53
00:02:10,959 --> 00:02:13,680
and as a side aspect we also aim that's

54
00:02:13,680 --> 00:02:16,319
making it annoying for adversaries that

55
00:02:16,319 --> 00:02:19,760
have access to a quantum computer

56
00:02:19,760 --> 00:02:21,040
so

57
00:02:21,040 --> 00:02:23,200
since two years c-pace is recommended

58
00:02:23,200 --> 00:02:26,400
for use in iatf protocols as a result of

59
00:02:26,400 --> 00:02:30,080
the cfrg peg selection process

60
00:02:30,080 --> 00:02:33,519
so that you have an idea on how cpace

61
00:02:33,519 --> 00:02:34,959
which target platform has been

62
00:02:34,959 --> 00:02:36,800
considered for cpase

63
00:02:36,800 --> 00:02:40,080
initially we designed it for a wireless

64
00:02:40,080 --> 00:02:42,000
application for an industrial and

65
00:02:42,000 --> 00:02:44,080
explosion protected sensor where

66
00:02:44,080 --> 00:02:46,800
explosion protected is realized by

67
00:02:46,800 --> 00:02:48,879
reducing the power which is

68
00:02:48,879 --> 00:02:50,959
available for this for the sensor for

69
00:02:50,959 --> 00:02:54,000
operation so we have about 1.5 milliwatt

70
00:02:54,000 --> 00:02:56,080
power budget for the wireless operation

71
00:02:56,080 --> 00:02:58,720
and security and we have really tight

72
00:02:58,720 --> 00:03:01,519
memory constraints for the application

73
00:03:01,519 --> 00:03:03,440
and the security and so we really aim

74
00:03:03,440 --> 00:03:07,360
that having a peg protocol which is

75
00:03:07,360 --> 00:03:08,239
as

76
00:03:08,239 --> 00:03:11,680
tiny as a as small as possible

77
00:03:11,680 --> 00:03:13,760
so how does pc paste work

78
00:03:13,760 --> 00:03:15,760
pc paste is derived from an older

79
00:03:15,760 --> 00:03:17,760
protocol speak

80
00:03:17,760 --> 00:03:21,280
designed by jablon in 1997 and speak

81
00:03:21,280 --> 00:03:23,440
itself it's based on diffie-hellman key

82
00:03:23,440 --> 00:03:24,799
exchange

83
00:03:24,799 --> 00:03:27,680
so let's revisit different key exchanges

84
00:03:27,680 --> 00:03:30,239
in the c-pace notation so different key

85
00:03:30,239 --> 00:03:33,920
exchange starts with both sides agreeing

86
00:03:33,920 --> 00:03:36,879
on on a common generator of a group

87
00:03:36,879 --> 00:03:39,280
both sides sample secret scalas

88
00:03:39,280 --> 00:03:42,640
as a private private ephemeral key

89
00:03:42,640 --> 00:03:43,680
then

90
00:03:43,680 --> 00:03:45,360
you we calculate

91
00:03:45,360 --> 00:03:48,560
the public keys from the private keys

92
00:03:48,560 --> 00:03:50,480
exchange the public keys

93
00:03:50,480 --> 00:03:53,120
we verify the inputs and derive the

94
00:03:53,120 --> 00:03:54,879
shared secrets

95
00:03:54,879 --> 00:03:57,120
this is tiffy helman and see pace is

96
00:03:57,120 --> 00:03:59,840
exactly just like tiffy helmand with the

97
00:03:59,840 --> 00:04:01,439
only difference

98
00:04:01,439 --> 00:04:02,239
that

99
00:04:02,239 --> 00:04:04,000
we calculate the generator from the

100
00:04:04,000 --> 00:04:06,319
password and the party identifiers

101
00:04:06,319 --> 00:04:08,720
so we have this additional sub step

102
00:04:08,720 --> 00:04:11,439
in cpace

103
00:04:12,480 --> 00:04:13,519
so

104
00:04:13,519 --> 00:04:16,079
as in calculating the generator is the

105
00:04:16,079 --> 00:04:18,959
main step in the cpace uh what is the

106
00:04:18,959 --> 00:04:21,759
method that we use for calculating it so

107
00:04:21,759 --> 00:04:24,160
it would be ideal if we had a random

108
00:04:24,160 --> 00:04:25,280
oracle

109
00:04:25,280 --> 00:04:27,440
that hash as a string and outputs

110
00:04:27,440 --> 00:04:30,240
directly outputs a group element and so

111
00:04:30,240 --> 00:04:32,400
a hash function hg

112
00:04:32,400 --> 00:04:35,040
but unfortunately it's unclear on how to

113
00:04:35,040 --> 00:04:38,000
construct a random article and

114
00:04:38,000 --> 00:04:40,639
so this is not available in practice and

115
00:04:40,639 --> 00:04:43,360
what we are using in real world designs

116
00:04:43,360 --> 00:04:44,160
is

117
00:04:44,160 --> 00:04:45,840
first we

118
00:04:45,840 --> 00:04:47,120
we know that

119
00:04:47,120 --> 00:04:49,680
c passes means to be used on elliptic

120
00:04:49,680 --> 00:04:52,080
curve groups so the public key is

121
00:04:52,080 --> 00:04:54,000
consisting of coordinates of a point on

122
00:04:54,000 --> 00:04:57,280
the curve group and each coordinate of

123
00:04:57,280 --> 00:04:58,080
the

124
00:04:58,080 --> 00:04:59,280
of the

125
00:04:59,280 --> 00:05:01,280
curve of the point

126
00:05:01,280 --> 00:05:04,240
is encoded as a field element

127
00:05:04,240 --> 00:05:06,400
and now we use the fact that there exist

128
00:05:06,400 --> 00:05:08,160
mapping algorithms which take a field

129
00:05:08,160 --> 00:05:11,759
element and output a group element

130
00:05:11,759 --> 00:05:14,080
so in order to calculate the generator

131
00:05:14,080 --> 00:05:17,039
we have a first step where we sample

132
00:05:17,039 --> 00:05:18,639
where we hash

133
00:05:18,639 --> 00:05:21,199
the inputs the party identifiers or the

134
00:05:21,199 --> 00:05:23,840
in order concatenation together with a

135
00:05:23,840 --> 00:05:26,000
password and obtain a field element as

136
00:05:26,000 --> 00:05:27,199
an output

137
00:05:27,199 --> 00:05:29,520
and then we map the field element to a

138
00:05:29,520 --> 00:05:31,440
group element using the map mapping

139
00:05:31,440 --> 00:05:33,280
primitive

140
00:05:33,280 --> 00:05:36,320
so what is specific for cpas in the real

141
00:05:36,320 --> 00:05:37,199
world

142
00:05:37,199 --> 00:05:39,520
we would like to use curves of non-prime

143
00:05:39,520 --> 00:05:42,080
order for efficiency we would like to

144
00:05:42,080 --> 00:05:44,960
use single coordinate dividend protocols

145
00:05:44,960 --> 00:05:47,520
we would like to drop the checks for

146
00:05:47,520 --> 00:05:50,320
invalid curve attacks and drop checks

147
00:05:50,320 --> 00:05:52,880
for group membership by relying on twist

148
00:05:52,880 --> 00:05:55,120
security of curves and we would also

149
00:05:55,120 --> 00:05:57,360
allow for aim like to allow for

150
00:05:57,360 --> 00:05:59,919
non-uniform sampling of scalas

151
00:05:59,919 --> 00:06:03,280
and we would to would be able would like

152
00:06:03,280 --> 00:06:04,400
to choose

153
00:06:04,400 --> 00:06:06,400
different mapping primitives

154
00:06:06,400 --> 00:06:07,440
uh

155
00:06:07,440 --> 00:06:09,280
depending on the curve group that we are

156
00:06:09,280 --> 00:06:10,960
working on so instance we would like to

157
00:06:10,960 --> 00:06:11,639
use

158
00:06:11,639 --> 00:06:14,000
alligator242 for

159
00:06:14,000 --> 00:06:16,639
montgomery curves or edwards curves and

160
00:06:16,639 --> 00:06:19,520
we would like uh to reduce ecards map or

161
00:06:19,520 --> 00:06:23,199
swu for short viastress curves

162
00:06:23,199 --> 00:06:25,840
and finally we would like to

163
00:06:25,840 --> 00:06:30,159
use map ones and map twice constructions

164
00:06:30,479 --> 00:06:33,520
so and this work of our asia

165
00:06:33,520 --> 00:06:35,919
contribution is all about

166
00:06:35,919 --> 00:06:38,160
the question are these variants actually

167
00:06:38,160 --> 00:06:40,560
secure

168
00:06:41,120 --> 00:06:43,039
there are previous results by abdullah

169
00:06:43,039 --> 00:06:46,560
and babusa which have analyzed cpace

170
00:06:46,560 --> 00:06:49,280
they required a random oracle in their

171
00:06:49,280 --> 00:06:52,080
analysis directly hashing to the group

172
00:06:52,080 --> 00:06:53,680
they required a modification of the

173
00:06:53,680 --> 00:06:55,520
protocol with the password in the final

174
00:06:55,520 --> 00:06:58,479
hash they mandated prime order groups

175
00:06:58,479 --> 00:06:59,280
and

176
00:06:59,280 --> 00:07:02,080
their proof is did not consider the use

177
00:07:02,080 --> 00:07:05,280
of single coordinate public keys

178
00:07:05,280 --> 00:07:06,400
so

179
00:07:06,400 --> 00:07:08,800
essentially the most important

180
00:07:08,800 --> 00:07:11,039
weak point in the previous analysis has

181
00:07:11,039 --> 00:07:14,560
been the idealization of the hashing to

182
00:07:14,560 --> 00:07:17,360
the curved group so and

183
00:07:17,360 --> 00:07:18,560
finally the

184
00:07:18,560 --> 00:07:20,479
required properties of the mapping

185
00:07:20,479 --> 00:07:22,960
algorithm remained unclear and this has

186
00:07:22,960 --> 00:07:25,520
been in the cfrg selection process for

187
00:07:25,520 --> 00:07:27,199
instance this has been used as an

188
00:07:27,199 --> 00:07:28,720
argument for promoting take

189
00:07:28,720 --> 00:07:31,520
constructions that are way are way more

190
00:07:31,520 --> 00:07:34,560
complex than cpas

191
00:07:34,560 --> 00:07:37,280
so what are our results first result is

192
00:07:37,280 --> 00:07:39,599
we have shown we are able to show that

193
00:07:39,599 --> 00:07:42,240
we don't need to assume a random oracle

194
00:07:42,240 --> 00:07:43,759
for hashing to the group

195
00:07:43,759 --> 00:07:45,520
and we were able to derive the exact

196
00:07:45,520 --> 00:07:47,280
requirements for the mapping primitives

197
00:07:47,280 --> 00:07:49,039
that maps the field element to the group

198
00:07:49,039 --> 00:07:52,400
element and we coined this property

199
00:07:52,400 --> 00:07:55,520
probabilistic invertibility so

200
00:07:55,520 --> 00:07:58,720
essentially if we have a

201
00:07:58,720 --> 00:08:01,520
group element we need to be able to

202
00:08:01,520 --> 00:08:03,840
calculate all pre-element

203
00:08:03,840 --> 00:08:06,080
images and fq of a point

204
00:08:06,080 --> 00:08:08,800
and secondly we need to be able to give

205
00:08:08,800 --> 00:08:10,960
a maximum bound of the number of

206
00:08:10,960 --> 00:08:14,720
pre-images of all points on the group

207
00:08:14,720 --> 00:08:16,800
and with these properties we can

208
00:08:16,800 --> 00:08:19,360
construct an inverse mapping algorithm

209
00:08:19,360 --> 00:08:20,160
and

210
00:08:20,160 --> 00:08:22,080
use this inverse mapping algorithm in

211
00:08:22,080 --> 00:08:24,319
the simulator in the uc framework

212
00:08:24,319 --> 00:08:27,039
and luckily all of these properties are

213
00:08:27,039 --> 00:08:29,360
fulfilled by all of the currently

214
00:08:29,360 --> 00:08:31,599
discussed mapping algorithms for

215
00:08:31,599 --> 00:08:33,679
instance all of the mapping algorithms

216
00:08:33,679 --> 00:08:36,159
considered in the hash to curve draft at

217
00:08:36,159 --> 00:08:38,320
cfrg

218
00:08:38,320 --> 00:08:41,039
finally the proof works for both map

219
00:08:41,039 --> 00:08:42,159
ones

220
00:08:42,159 --> 00:08:46,560
algorithms and map twice constructions

221
00:08:46,720 --> 00:08:48,800
second result is

222
00:08:48,800 --> 00:08:51,519
we were able to overcome a typical issue

223
00:08:51,519 --> 00:08:53,600
for the issue for diffie-hellman type

224
00:08:53,600 --> 00:08:56,240
protocols typically you're facing the

225
00:08:56,240 --> 00:08:58,080
commitment problem when looking at

226
00:08:58,080 --> 00:09:00,480
adaptive security you need to simulate

227
00:09:00,480 --> 00:09:02,959
first the public keys of honest parties

228
00:09:02,959 --> 00:09:05,040
without knowing the secrets

229
00:09:05,040 --> 00:09:07,040
and after you have learned the secrets

230
00:09:07,040 --> 00:09:08,959
after the corruption you need to provide

231
00:09:08,959 --> 00:09:10,800
a consistent picture and typically

232
00:09:10,800 --> 00:09:13,440
that's impossible in in cpase we were

233
00:09:13,440 --> 00:09:15,279
able to do that by using the

234
00:09:15,279 --> 00:09:17,839
probabilistic invertibility properties

235
00:09:17,839 --> 00:09:20,640
of the map and this allowed us to give

236
00:09:20,640 --> 00:09:23,040
to generate a trapdoor which gave us

237
00:09:23,040 --> 00:09:25,920
access to the secret exponents of the

238
00:09:25,920 --> 00:09:27,920
generators in the simulator

239
00:09:27,920 --> 00:09:30,080
so this was what made us made it

240
00:09:30,080 --> 00:09:32,399
possible to provide a consistent picture

241
00:09:32,399 --> 00:09:34,839
after the corruption

242
00:09:34,839 --> 00:09:38,560
finally in our analysis we were able to

243
00:09:38,560 --> 00:09:39,760
show that

244
00:09:39,760 --> 00:09:42,640
different various other implementation

245
00:09:42,640 --> 00:09:45,360
aspects don't impair secure impact

246
00:09:45,360 --> 00:09:48,240
security for instance we have we're able

247
00:09:48,240 --> 00:09:50,880
to show that groups of non-prime order

248
00:09:50,880 --> 00:09:53,680
have no impact of on security we were

249
00:09:53,680 --> 00:09:55,600
able to show that c pays on groups are

250
00:09:55,600 --> 00:09:58,160
secure and cpas on groups modulo

251
00:09:58,160 --> 00:10:00,800
negation is also secure so single

252
00:10:00,800 --> 00:10:02,800
coordinate scalar multiplication such as

253
00:10:02,800 --> 00:10:07,440
x x245 25519 can be used securely

254
00:10:07,440 --> 00:10:10,000
and finally we formalized this stress

255
00:10:10,000 --> 00:10:12,560
security notion for ex elliptic curve

256
00:10:12,560 --> 00:10:13,440
groups

257
00:10:13,440 --> 00:10:16,160
so and coined its twists computational

258
00:10:16,160 --> 00:10:19,360
difficult problem so as a result we were

259
00:10:19,360 --> 00:10:21,680
able to show that point verification can

260
00:10:21,680 --> 00:10:24,640
be dropped when implementing cpase using

261
00:10:24,640 --> 00:10:26,880
single coordinate scalar multiplication

262
00:10:26,880 --> 00:10:28,880
on twist secure curves for instance

263
00:10:28,880 --> 00:10:33,800
using x448 or x2519

264
00:10:34,160 --> 00:10:35,680
as a side effect

265
00:10:35,680 --> 00:10:37,519
we found have

266
00:10:37,519 --> 00:10:39,120
established this

267
00:10:39,120 --> 00:10:41,200
alternative approach for carrying out

268
00:10:41,200 --> 00:10:42,720
security proofs

269
00:10:42,720 --> 00:10:44,320
conventionally in simulation-based

270
00:10:44,320 --> 00:10:47,519
proofs you're having simulation of the

271
00:10:47,519 --> 00:10:49,839
experiment and reduction

272
00:10:49,839 --> 00:10:52,000
separated so you first have a simulator

273
00:10:52,000 --> 00:10:53,120
algorithm

274
00:10:53,120 --> 00:10:54,320
which

275
00:10:54,320 --> 00:10:56,240
you show to be indistinguishable between

276
00:10:56,240 --> 00:10:59,200
ideal world and real world and

277
00:10:59,200 --> 00:11:02,399
the simulator has a set of bad events

278
00:11:02,399 --> 00:11:03,760
where you couldn't carry out the

279
00:11:03,760 --> 00:11:06,240
simulation and this algorithm aborts and

280
00:11:06,240 --> 00:11:07,920
in the second step you start with a

281
00:11:07,920 --> 00:11:10,160
reduction argument where you embed

282
00:11:10,160 --> 00:11:12,399
challenges of a hard problem into the

283
00:11:12,399 --> 00:11:15,519
protocol flow and show that the bad

284
00:11:15,519 --> 00:11:18,480
events coincide with events where you

285
00:11:18,480 --> 00:11:20,800
are able to solve the heart problem with

286
00:11:20,800 --> 00:11:23,120
the help of the adversary

287
00:11:23,120 --> 00:11:25,440
so it's a two-step approach with

288
00:11:25,440 --> 00:11:27,760
reduction and simulation separated in

289
00:11:27,760 --> 00:11:30,079
our proof approach we have merge

290
00:11:30,079 --> 00:11:32,800
simulation entity reduction so and we

291
00:11:32,800 --> 00:11:36,640
did this by embedding the assumptions as

292
00:11:36,640 --> 00:11:39,200
as part of the simulator coast

293
00:11:39,200 --> 00:11:42,399
code by using assumption libraries

294
00:11:42,399 --> 00:11:44,560
so let's first recall if you have a

295
00:11:44,560 --> 00:11:46,640
cryptographic assumption the assumption

296
00:11:46,640 --> 00:11:48,800
is fully specified by its corresponding

297
00:11:48,800 --> 00:11:51,120
experiment algorithm so the experiment

298
00:11:51,120 --> 00:11:53,440
will generate a random challenge and

299
00:11:53,440 --> 00:11:55,120
provide all of the

300
00:11:55,120 --> 00:11:57,519
oracles that you may are making making

301
00:11:57,519 --> 00:11:59,760
available for the adversary and finally

302
00:11:59,760 --> 00:12:01,600
the experiment will check the

303
00:12:01,600 --> 00:12:03,279
adversary's output for the correct

304
00:12:03,279 --> 00:12:05,120
solution

305
00:12:05,120 --> 00:12:06,639
and

306
00:12:06,639 --> 00:12:09,120
if you're having a falsifiable

307
00:12:09,120 --> 00:12:12,240
assumption you are always able to design

308
00:12:12,240 --> 00:12:14,720
an efficient experiment algorithm

309
00:12:14,720 --> 00:12:17,040
so and then you can

310
00:12:17,040 --> 00:12:19,360
define and use the assumption in its

311
00:12:19,360 --> 00:12:22,480
form by the represent representation of

312
00:12:22,480 --> 00:12:24,480
the experiment algorithm

313
00:12:24,480 --> 00:12:26,720
and that's what we what we did so have a

314
00:12:26,720 --> 00:12:29,440
look for instance adds an titan-like

315
00:12:29,440 --> 00:12:32,560
code for an assumption uh

316
00:12:32,560 --> 00:12:35,040
the strong computational diffie-harmon

317
00:12:35,040 --> 00:12:36,800
problem so the strong computational

318
00:12:36,800 --> 00:12:39,040
digit helmet problem is a standard

319
00:12:39,040 --> 00:12:40,720
computational difference problem where

320
00:12:40,720 --> 00:12:43,200
you have a

321
00:12:43,360 --> 00:12:45,760
challenge

322
00:12:45,839 --> 00:12:48,959
consisting of three generators

323
00:12:48,959 --> 00:12:49,920
and

324
00:12:49,920 --> 00:12:52,399
the experiment library will

325
00:12:52,399 --> 00:12:54,639
generate such a problem instance by

326
00:12:54,639 --> 00:12:57,200
sampling a generator and sampling uh two

327
00:12:57,200 --> 00:12:58,720
additional points so that you're having

328
00:12:58,720 --> 00:13:00,800
a computational diffie-harmon problem

329
00:13:00,800 --> 00:13:03,040
the strong computational diffie-hellman

330
00:13:03,040 --> 00:13:05,600
problem is differing by the normal con

331
00:13:05,600 --> 00:13:07,920
computational difficult problem

332
00:13:07,920 --> 00:13:10,560
by that by giving the adversary access

333
00:13:10,560 --> 00:13:13,200
to a restricted ddh oracle

334
00:13:13,200 --> 00:13:16,800
ddrh oracle where two inputs are fixed

335
00:13:16,800 --> 00:13:19,839
and by fixing two inputs we are able to

336
00:13:19,839 --> 00:13:23,600
give an efficient implementation of the

337
00:13:23,600 --> 00:13:25,440
of this uh

338
00:13:25,440 --> 00:13:29,760
decisional diffie-hellman problem oracle

339
00:13:29,760 --> 00:13:32,079
so the simulation-based proof strategy

340
00:13:32,079 --> 00:13:33,680
consists now

341
00:13:33,680 --> 00:13:34,399
by

342
00:13:34,399 --> 00:13:36,320
in the following we write a simulator

343
00:13:36,320 --> 00:13:37,920
that embeds the assumption library

344
00:13:37,920 --> 00:13:39,120
objects

345
00:13:39,120 --> 00:13:41,440
we embed the challenges produced by the

346
00:13:41,440 --> 00:13:42,959
assumption library objects in the

347
00:13:42,959 --> 00:13:45,040
simulated protocol execution

348
00:13:45,040 --> 00:13:47,440
and we write the main simulator's code

349
00:13:47,440 --> 00:13:49,920
such that it never aborts itself so

350
00:13:49,920 --> 00:13:51,680
there's no bad event in the simulator

351
00:13:51,680 --> 00:13:53,680
code the only permissible abort

352
00:13:53,680 --> 00:13:55,839
conditions are aborts in the assumption

353
00:13:55,839 --> 00:13:58,720
libraries for instance here if we are we

354
00:13:58,720 --> 00:14:00,399
are having the bad event and the abort

355
00:14:00,399 --> 00:14:04,000
case in the assumption library where we

356
00:14:04,000 --> 00:14:05,839
where we see that

357
00:14:05,839 --> 00:14:07,040
the

358
00:14:07,040 --> 00:14:10,079
experiment object is provided a solution

359
00:14:10,079 --> 00:14:11,600
of the computational diffie-hellman

360
00:14:11,600 --> 00:14:13,680
problem and in this case

361
00:14:13,680 --> 00:14:14,480
the

362
00:14:14,480 --> 00:14:17,279
simulator boards and exactly now we see

363
00:14:17,279 --> 00:14:19,680
that the bad events exactly coincide

364
00:14:19,680 --> 00:14:21,680
with events where the correct solution

365
00:14:21,680 --> 00:14:25,199
for the challenge problem is provided

366
00:14:25,199 --> 00:14:26,079
so

367
00:14:26,079 --> 00:14:28,639
this gives us the advantage that we can

368
00:14:28,639 --> 00:14:32,800
use the exact same simulator code

369
00:14:32,800 --> 00:14:35,040
body and only replace the assumption

370
00:14:35,040 --> 00:14:37,680
libraries for studying protocol variants

371
00:14:37,680 --> 00:14:40,480
for instance we can replace the

372
00:14:40,480 --> 00:14:42,480
conventional strong computational

373
00:14:42,480 --> 00:14:44,560
diffie-hellman assumption library with a

374
00:14:44,560 --> 00:14:48,079
library for the strong twist secure

375
00:14:48,079 --> 00:14:50,959
computational diffie-hellman assumption

376
00:14:50,959 --> 00:14:55,040
so and by as another effect we have the

377
00:14:55,040 --> 00:14:58,639
property that the reduction strategy

378
00:14:58,639 --> 00:15:01,519
is clearly visible in the executable

379
00:15:01,519 --> 00:15:04,079
code of the simulator so the reduction

380
00:15:04,079 --> 00:15:07,040
is not buried deeply in some arguments

381
00:15:07,040 --> 00:15:10,079
in the text body but clearly seeable and

382
00:15:10,079 --> 00:15:13,600
noticeable in the simulator code

383
00:15:13,600 --> 00:15:16,480
so let's come up to the conclusion as a

384
00:15:16,480 --> 00:15:20,000
result of our analysis cpase is a fast

385
00:15:20,000 --> 00:15:22,480
resource

386
00:15:22,480 --> 00:15:25,680
optimized take protocol it enjoys

387
00:15:25,680 --> 00:15:28,639
composability and a strong adaptive

388
00:15:28,639 --> 00:15:31,279
adversary models

389
00:15:31,279 --> 00:15:33,839
we have been able to show that various

390
00:15:33,839 --> 00:15:36,560
variants and tweaks that were made for

391
00:15:36,560 --> 00:15:38,839
resource constraint device just don't

392
00:15:38,839 --> 00:15:41,839
impersonate security

393
00:15:41,839 --> 00:15:45,440
as a second defect we formalized this

394
00:15:45,440 --> 00:15:47,839
reduction arguments by embedding the

395
00:15:47,839 --> 00:15:49,839
assumption libraries in the simulators

396
00:15:49,839 --> 00:15:51,040
code

397
00:15:51,040 --> 00:15:51,839
and

398
00:15:51,839 --> 00:15:54,000
we think that this assumption library

399
00:15:54,000 --> 00:15:56,000
techniques will work whenever the

400
00:15:56,000 --> 00:15:59,440
assumptions are falsifiable

401
00:15:59,440 --> 00:16:01,199
here are the links to the current

402
00:16:01,199 --> 00:16:03,600
version of the internet draft

403
00:16:03,600 --> 00:16:04,639
and

404
00:16:04,639 --> 00:16:06,800
here's the link to the full paper thank

405
00:16:06,800 --> 00:16:09,839
you very much

