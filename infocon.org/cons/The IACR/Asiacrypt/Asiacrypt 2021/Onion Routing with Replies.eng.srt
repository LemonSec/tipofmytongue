1
00:00:00,320 --> 00:00:02,639
hello everyone my name is christiana

2
00:00:02,639 --> 00:00:05,120
kuhn and i'm a phd candidate at

3
00:00:05,120 --> 00:00:07,759
karlsruher institute of technology today

4
00:00:07,759 --> 00:00:09,760
i'm happy to present to you our paper

5
00:00:09,760 --> 00:00:12,000
onion routing with replies

6
00:00:12,000 --> 00:00:14,559
this paper is joint work together with

7
00:00:14,559 --> 00:00:17,279
dennis rofeins andy rob and thurston

8
00:00:17,279 --> 00:00:18,960
strophen

9
00:00:18,960 --> 00:00:21,039
let us first start by thinking why we

10
00:00:21,039 --> 00:00:23,840
need onion routing in the first place

11
00:00:23,840 --> 00:00:26,480
one goal of onion routing is to provide

12
00:00:26,480 --> 00:00:29,359
relationship privacy so to hide who is

13
00:00:29,359 --> 00:00:31,279
communicating with whom from the

14
00:00:31,279 --> 00:00:32,558
adversary

15
00:00:32,558 --> 00:00:34,960
and this is a very important goal just

16
00:00:34,960 --> 00:00:38,399
imagine alice contacting a web server

17
00:00:38,399 --> 00:00:40,960
that only offers information about a

18
00:00:40,960 --> 00:00:42,800
specific disease

19
00:00:42,800 --> 00:00:46,000
like cancer or depression

20
00:00:46,000 --> 00:00:47,840
then it is highly likely that alice

21
00:00:47,840 --> 00:00:49,760
suffers from this disease and

22
00:00:49,760 --> 00:00:51,520
information that we much rather keep

23
00:00:51,520 --> 00:00:54,719
hidden from the adversary

24
00:00:55,039 --> 00:00:57,199
now if we want to realize the skill of

25
00:00:57,199 --> 00:00:58,800
course alice cannot send her message

26
00:00:58,800 --> 00:01:01,199
directly to the receiver because the

27
00:01:01,199 --> 00:01:03,120
adversary is likely to be able to

28
00:01:03,120 --> 00:01:06,240
observe this and even further we do not

29
00:01:06,240 --> 00:01:08,240
trust the receiver and the receiver

30
00:01:08,240 --> 00:01:09,920
might be collaborating with the

31
00:01:09,920 --> 00:01:11,280
adversary

32
00:01:11,280 --> 00:01:12,960
so instead we need some kind of

33
00:01:12,960 --> 00:01:15,280
indirection and for this we are using

34
00:01:15,280 --> 00:01:16,720
onion routing

35
00:01:16,720 --> 00:01:19,119
onion routing employs multiple relays

36
00:01:19,119 --> 00:01:21,360
between descendants and receivers of the

37
00:01:21,360 --> 00:01:23,840
communication

38
00:01:23,840 --> 00:01:27,200
and the message from the sender will be

39
00:01:27,200 --> 00:01:29,759
encrypted in multiple layers

40
00:01:29,759 --> 00:01:32,720
with one layer for each relay so that

41
00:01:32,720 --> 00:01:34,799
once it goes to the network each relay

42
00:01:34,799 --> 00:01:38,079
will peel off one layer of this packet

43
00:01:38,079 --> 00:01:40,320
which is also called onion because it

44
00:01:40,320 --> 00:01:42,960
consists of this many layers

45
00:01:42,960 --> 00:01:45,439
now if the onion routing scheme

46
00:01:45,439 --> 00:01:48,479
is working correctly then the adversary

47
00:01:48,479 --> 00:01:50,560
cannot link onions

48
00:01:50,560 --> 00:01:53,680
before the relay to the ones after the

49
00:01:53,680 --> 00:01:54,640
relay

50
00:01:54,640 --> 00:01:56,960
and this ensures that as long as one of

51
00:01:56,960 --> 00:01:59,439
the relays is honest the adversary does

52
00:01:59,439 --> 00:02:02,719
not know which sender was contacting

53
00:02:02,719 --> 00:02:05,040
which receiver because he does not know

54
00:02:05,040 --> 00:02:08,080
how the onions are linked in this case

55
00:02:08,080 --> 00:02:10,000
in our example

56
00:02:10,000 --> 00:02:11,920
the adversary would be able to observe

57
00:02:11,920 --> 00:02:14,400
that alice is sending the grey onion and

58
00:02:14,400 --> 00:02:16,800
he can even link it to the blue one

59
00:02:16,800 --> 00:02:19,599
because he controls the first reeling

60
00:02:19,599 --> 00:02:22,239
but then from the blue one he would have

61
00:02:22,239 --> 00:02:23,440
no clue

62
00:02:23,440 --> 00:02:25,520
whether the next onion is going to be

63
00:02:25,520 --> 00:02:28,000
the green or the yellow one

64
00:02:28,000 --> 00:02:30,720
um once the honest relay is done with

65
00:02:30,720 --> 00:02:33,920
the processing so at this point

66
00:02:33,920 --> 00:02:36,000
we unlink the sendness from the

67
00:02:36,000 --> 00:02:38,720
receivers because the of the honest

68
00:02:38,720 --> 00:02:41,440
relay and the adversary cannot

69
00:02:41,440 --> 00:02:44,720
revert and link onions before and after

70
00:02:44,720 --> 00:02:47,519
the honest relay

71
00:02:47,519 --> 00:02:50,400
now it is really important that we get

72
00:02:50,400 --> 00:02:53,280
this unlinking of the onions before and

73
00:02:53,280 --> 00:02:56,160
after the honest really right and

74
00:02:56,160 --> 00:02:57,920
therefore we are interested in

75
00:02:57,920 --> 00:02:59,840
constructing a secure

76
00:02:59,840 --> 00:03:02,800
onion routing packet format

77
00:03:02,800 --> 00:03:05,280
now a packet format can only

78
00:03:05,280 --> 00:03:06,159
be

79
00:03:06,159 --> 00:03:08,640
preventing the linkings of onions that

80
00:03:08,640 --> 00:03:11,840
are based on the packet itself of course

81
00:03:11,840 --> 00:03:13,840
there are more dimensions like the

82
00:03:13,840 --> 00:03:16,800
timing of the onions or traffic patterns

83
00:03:16,800 --> 00:03:20,000
that are important in practice to

84
00:03:20,000 --> 00:03:22,959
unlink senders and receivers but they

85
00:03:22,959 --> 00:03:25,440
cannot be solved with a packet format

86
00:03:25,440 --> 00:03:28,000
and instead on a foreign

87
00:03:28,000 --> 00:03:29,920
and there are orthogonal measures that

88
00:03:29,920 --> 00:03:32,400
can be applied but for now we are

89
00:03:32,400 --> 00:03:34,480
interested in providing a secure packet

90
00:03:34,480 --> 00:03:35,519
format

91
00:03:35,519 --> 00:03:38,959
and solving this challenge first

92
00:03:38,959 --> 00:03:41,120
for this let us look at how onion

93
00:03:41,120 --> 00:03:42,959
routing packet formats typically look

94
00:03:42,959 --> 00:03:45,280
like and they typically consist of a

95
00:03:45,280 --> 00:03:47,120
header and the payload

96
00:03:47,120 --> 00:03:48,879
the header contains the routing

97
00:03:48,879 --> 00:03:51,760
information as well as key material for

98
00:03:51,760 --> 00:03:54,799
the relays but the header is encrypted

99
00:03:54,799 --> 00:03:57,200
in multiple layers in a clever way such

100
00:03:57,200 --> 00:03:59,519
that each relay only learns the

101
00:03:59,519 --> 00:04:02,000
information that is absolutely necessary

102
00:04:02,000 --> 00:04:04,480
to do this one step of the path from

103
00:04:04,480 --> 00:04:06,720
this one processing

104
00:04:06,720 --> 00:04:09,439
the payload on the other hand is onion

105
00:04:09,439 --> 00:04:10,560
encrypted

106
00:04:10,560 --> 00:04:13,200
in the sense that well the first layer

107
00:04:13,200 --> 00:04:14,959
will be is

108
00:04:14,959 --> 00:04:16,959
there for the first relay the second

109
00:04:16,959 --> 00:04:20,079
layer for the second relay and so on

110
00:04:20,079 --> 00:04:22,000
so if we look at this example of the

111
00:04:22,000 --> 00:04:24,400
blue onion first of all the outermost

112
00:04:24,400 --> 00:04:26,960
layer of beheader is encrypted with the

113
00:04:26,960 --> 00:04:29,199
public key of the first

114
00:04:29,199 --> 00:04:31,199
relay so the first really can remove

115
00:04:31,199 --> 00:04:34,240
this layer and sees that the onion needs

116
00:04:34,240 --> 00:04:36,320
to go to the second relay

117
00:04:36,320 --> 00:04:37,600
next

118
00:04:37,600 --> 00:04:41,120
and the first relay will also remove one

119
00:04:41,120 --> 00:04:44,080
layer of encryption from the payload

120
00:04:44,080 --> 00:04:45,919
thereby it

121
00:04:45,919 --> 00:04:49,360
gets the second onion the green onion

122
00:04:49,360 --> 00:04:50,560
and now

123
00:04:50,560 --> 00:04:53,520
the second relay will remove one layer

124
00:04:53,520 --> 00:04:55,759
of encryption from the header to realize

125
00:04:55,759 --> 00:04:58,160
that it has to send the onion to the

126
00:04:58,160 --> 00:05:01,039
final receiver next and one layer from

127
00:05:01,039 --> 00:05:04,400
the payload and thereby the encrypted

128
00:05:04,400 --> 00:05:06,960
payload finally gets sent to the

129
00:05:06,960 --> 00:05:09,360
receiver and the receiver can

130
00:05:09,360 --> 00:05:11,840
remove the last layer of encryption to

131
00:05:11,840 --> 00:05:15,280
see the included message

132
00:05:15,919 --> 00:05:18,400
now one interesting thing to notice

133
00:05:18,400 --> 00:05:21,280
about most onion routing packet formats

134
00:05:21,280 --> 00:05:24,320
is that they protect the integrity of

135
00:05:24,320 --> 00:05:27,120
the header for every hop on the path but

136
00:05:27,120 --> 00:05:29,840
the payload integrity is only checked at

137
00:05:29,840 --> 00:05:31,919
the final receiver

138
00:05:31,919 --> 00:05:34,800
and this fact that we only check the

139
00:05:34,800 --> 00:05:37,039
payload integrity at the very end

140
00:05:37,039 --> 00:05:39,440
enables dangerous attack the

141
00:05:39,440 --> 00:05:41,680
malleability attack

142
00:05:41,680 --> 00:05:43,840
the malleability attack assumes that the

143
00:05:43,840 --> 00:05:46,560
adversary controls the first relay and

144
00:05:46,560 --> 00:05:49,199
the final receiver and wants to link the

145
00:05:49,199 --> 00:05:51,600
sender to the receiver and thereby break

146
00:05:51,600 --> 00:05:53,600
relationship privacy

147
00:05:53,600 --> 00:05:56,080
the idea is that the first relay will

148
00:05:56,080 --> 00:05:58,160
notice when the victim sends a message

149
00:05:58,160 --> 00:06:00,319
in this case alice sends the grey

150
00:06:00,319 --> 00:06:01,280
message

151
00:06:01,280 --> 00:06:03,199
then the first relay notices that the

152
00:06:03,199 --> 00:06:05,039
zoning consists of the header and the

153
00:06:05,039 --> 00:06:08,160
payload but it will further modify the

154
00:06:08,160 --> 00:06:11,039
payload and change a bit in it

155
00:06:11,039 --> 00:06:13,840
um but we'll leave the header as it is

156
00:06:13,840 --> 00:06:16,319
and process the onion

157
00:06:16,319 --> 00:06:17,759
just as it would

158
00:06:17,759 --> 00:06:20,240
process any usual onion except that now

159
00:06:20,240 --> 00:06:23,199
the payload has been modified

160
00:06:23,199 --> 00:06:25,680
now the next honest relay

161
00:06:25,680 --> 00:06:28,000
will not notice that anything in the

162
00:06:28,000 --> 00:06:30,080
onion has been modified because it only

163
00:06:30,080 --> 00:06:31,919
checks the header and the check for the

164
00:06:31,919 --> 00:06:34,160
header goes through

165
00:06:34,160 --> 00:06:36,319
then this onion will be processed

166
00:06:36,319 --> 00:06:38,720
further until it finally

167
00:06:38,720 --> 00:06:42,000
is ending at the receiver and at the

168
00:06:42,000 --> 00:06:44,880
receiver we can now notice that

169
00:06:44,880 --> 00:06:46,720
well the message does not look like we

170
00:06:46,720 --> 00:06:48,960
expect expected to there is no english

171
00:06:48,960 --> 00:06:51,039
language or a typical

172
00:06:51,039 --> 00:06:53,520
pattern in there but instead it's only

173
00:06:53,520 --> 00:06:55,120
random bits

174
00:06:55,120 --> 00:06:57,840
now this helps our adversarial receiver

175
00:06:57,840 --> 00:07:00,000
to notice that this onion must have been

176
00:07:00,000 --> 00:07:03,120
modified before and of course it is

177
00:07:03,120 --> 00:07:05,039
highly likely that this modification

178
00:07:05,039 --> 00:07:08,160
indeed was the one of our adversary that

179
00:07:08,160 --> 00:07:10,400
just changed alice's message in the

180
00:07:10,400 --> 00:07:12,800
beginning and therefore alice was

181
00:07:12,800 --> 00:07:14,720
contacting this receiver and the

182
00:07:14,720 --> 00:07:17,120
adversary learned who is communicating

183
00:07:17,120 --> 00:07:19,199
with whom even though there is an honest

184
00:07:19,199 --> 00:07:21,599
relay in between

185
00:07:21,599 --> 00:07:24,720
now to prevent this attack for the case

186
00:07:24,720 --> 00:07:26,479
where ellis just wants to send a message

187
00:07:26,479 --> 00:07:28,720
to the receiver

188
00:07:28,720 --> 00:07:30,400
we can simply

189
00:07:30,400 --> 00:07:32,560
add some protection for the payload

190
00:07:32,560 --> 00:07:34,400
because alice knows the message of the

191
00:07:34,400 --> 00:07:38,240
payload she can pre-calculate how the

192
00:07:38,240 --> 00:07:40,880
payload has to look like during each

193
00:07:40,880 --> 00:07:43,039
part of the path and then she can

194
00:07:43,039 --> 00:07:45,520
explicitly authenticate the payload with

195
00:07:45,520 --> 00:07:48,000
a message authentication code and this

196
00:07:48,000 --> 00:07:50,080
would lead to the fact that our honest

197
00:07:50,080 --> 00:07:52,240
relay will drop the modified onion

198
00:07:52,240 --> 00:07:54,479
because you can now realize that

199
00:07:54,479 --> 00:07:57,039
somebody tampered with the payload and

200
00:07:57,039 --> 00:07:58,479
in the result

201
00:07:58,479 --> 00:08:01,039
the message of l the onion of ellis is

202
00:08:01,039 --> 00:08:03,759
not being sent forward anymore and

203
00:08:03,759 --> 00:08:06,000
therefore the adversary does not learn

204
00:08:06,000 --> 00:08:08,080
to whom this message was actually

205
00:08:08,080 --> 00:08:10,000
addressed to

206
00:08:10,000 --> 00:08:11,840
now this works for the case that alice

207
00:08:11,840 --> 00:08:14,080
wants to send a message to the receiver

208
00:08:14,080 --> 00:08:15,759
but what happens if the receiver

209
00:08:15,759 --> 00:08:18,400
actually also wants to reply

210
00:08:18,400 --> 00:08:21,199
therefore we first have a look at how we

211
00:08:21,199 --> 00:08:24,479
in general solve replying to an

212
00:08:24,479 --> 00:08:27,199
anonymous sender

213
00:08:27,199 --> 00:08:29,280
therefore we need to build repliable

214
00:08:29,280 --> 00:08:31,840
onions and repliable onions in principle

215
00:08:31,840 --> 00:08:34,479
look like normal onions but additionally

216
00:08:34,479 --> 00:08:36,399
the sender will construct the header for

217
00:08:36,399 --> 00:08:37,760
the backward path

218
00:08:37,760 --> 00:08:38,880
so the

219
00:08:38,880 --> 00:08:41,360
sander will pick the relays for the

220
00:08:41,360 --> 00:08:43,360
backward path as well as the keys that

221
00:08:43,360 --> 00:08:46,560
should be used during this backward

222
00:08:46,560 --> 00:08:48,000
communication

223
00:08:48,000 --> 00:08:50,320
and then this header is included in the

224
00:08:50,320 --> 00:08:53,040
payload of our onion such that the

225
00:08:53,040 --> 00:08:54,560
receiver then

226
00:08:54,560 --> 00:08:56,800
gets to retrieve it as part of the

227
00:08:56,800 --> 00:08:58,399
payload that he gets

228
00:08:58,399 --> 00:09:01,519
um and now he can use the header

229
00:09:01,519 --> 00:09:04,240
um together with the reply that he

230
00:09:04,240 --> 00:09:06,320
actually wants to send and just has to

231
00:09:06,320 --> 00:09:07,680
attach

232
00:09:07,680 --> 00:09:10,080
the new payload to it

233
00:09:10,080 --> 00:09:13,440
so basically the sender is already

234
00:09:13,440 --> 00:09:15,920
constructing a back envelope for the

235
00:09:15,920 --> 00:09:18,880
receiver even though the receiver cannot

236
00:09:18,880 --> 00:09:21,600
read all the details of the

237
00:09:21,600 --> 00:09:24,560
back envelope because the information of

238
00:09:24,560 --> 00:09:27,440
the reply path is hidden in the header

239
00:09:27,440 --> 00:09:30,240
such that only each relay learns as much

240
00:09:30,240 --> 00:09:32,720
as it needs to learn to then forward the

241
00:09:32,720 --> 00:09:36,080
onion until it's back at our original

242
00:09:36,080 --> 00:09:38,800
sender alice

243
00:09:38,800 --> 00:09:40,399
now if we want to make sure that our

244
00:09:40,399 --> 00:09:43,680
onion routing scheme is actually also

245
00:09:43,680 --> 00:09:46,080
secure for replies we do have one more

246
00:09:46,080 --> 00:09:48,959
requirement we require that replies and

247
00:09:48,959 --> 00:09:51,680
requests are indistinguishable except at

248
00:09:51,680 --> 00:09:53,360
the center and receiver so any

249
00:09:53,360 --> 00:09:56,240
intermediate relay dealing with a

250
00:09:56,240 --> 00:09:58,240
with an onion should have no clue

251
00:09:58,240 --> 00:10:00,240
whether it's a

252
00:10:00,240 --> 00:10:02,480
request from the sender to the receiver

253
00:10:02,480 --> 00:10:03,839
or a

254
00:10:03,839 --> 00:10:06,240
backwards from the receiver to the

255
00:10:06,240 --> 00:10:07,760
sender again

256
00:10:07,760 --> 00:10:09,600
we do this because there might be use

257
00:10:09,600 --> 00:10:12,720
cases where only very few replies exist

258
00:10:12,720 --> 00:10:16,320
and then of course the set of candidates

259
00:10:16,320 --> 00:10:19,440
that have sent the reply is very small

260
00:10:19,440 --> 00:10:21,600
and having very small

261
00:10:21,600 --> 00:10:23,760
so-called anonymity sets

262
00:10:23,760 --> 00:10:26,800
is dangerous for the users because then

263
00:10:26,800 --> 00:10:28,480
the attacker could do

264
00:10:28,480 --> 00:10:31,040
more attacks or use additional knowledge

265
00:10:31,040 --> 00:10:32,720
to exclude

266
00:10:32,720 --> 00:10:35,680
users from this set so we want our

267
00:10:35,680 --> 00:10:37,360
requests and replies to be

268
00:10:37,360 --> 00:10:39,200
indistinguishable

269
00:10:39,200 --> 00:10:41,600
however we of course additionally want

270
00:10:41,600 --> 00:10:44,800
to protect the moleability attack

271
00:10:44,800 --> 00:10:46,320
but if we want to protect the

272
00:10:46,320 --> 00:10:48,640
malleability attack we need to make sure

273
00:10:48,640 --> 00:10:52,000
that we protect the payload um for

274
00:10:52,000 --> 00:10:54,640
requests from the sender to the receiver

275
00:10:54,640 --> 00:10:56,320
now if we want to have this request

276
00:10:56,320 --> 00:10:58,640
replying distinguishability this means

277
00:10:58,640 --> 00:11:01,440
we also need to protect the payload for

278
00:11:01,440 --> 00:11:03,040
reply messages

279
00:11:03,040 --> 00:11:05,360
um but protecting the payload for reply

280
00:11:05,360 --> 00:11:08,240
messages is actually not as easy as for

281
00:11:08,240 --> 00:11:09,440
requests

282
00:11:09,440 --> 00:11:11,519
because now well our center cannot

283
00:11:11,519 --> 00:11:13,839
pre-calculate any message authentication

284
00:11:13,839 --> 00:11:15,920
codes for it because

285
00:11:15,920 --> 00:11:18,160
the sender does not know how the reply

286
00:11:18,160 --> 00:11:20,399
will look like so he does not know how

287
00:11:20,399 --> 00:11:22,880
the payload on the reply path has to

288
00:11:22,880 --> 00:11:24,320
look like

289
00:11:24,320 --> 00:11:26,560
on the other hand we can also not have

290
00:11:26,560 --> 00:11:30,000
our receiver generate such

291
00:11:30,000 --> 00:11:32,959
protection measures because the receiver

292
00:11:32,959 --> 00:11:36,720
is not trusted in this use case so

293
00:11:36,720 --> 00:11:38,720
we cannot have him

294
00:11:38,720 --> 00:11:41,680
know how parts of the onion will look

295
00:11:41,680 --> 00:11:42,800
like

296
00:11:42,800 --> 00:11:45,040
once they are closed at the center again

297
00:11:45,040 --> 00:11:47,120
because otherwise the receiver would

298
00:11:47,120 --> 00:11:49,600
just wait for us to send her request to

299
00:11:49,600 --> 00:11:50,399
him

300
00:11:50,399 --> 00:11:52,000
and then

301
00:11:52,000 --> 00:11:55,040
send his reply back and recognize his

302
00:11:55,040 --> 00:11:57,040
onion even though

303
00:11:57,040 --> 00:12:00,079
he never modified anything just because

304
00:12:00,079 --> 00:12:02,480
he added parts to this onion that he can

305
00:12:02,480 --> 00:12:03,279
then

306
00:12:03,279 --> 00:12:04,399
add the

307
00:12:04,399 --> 00:12:07,040
relay clues to the center

308
00:12:07,040 --> 00:12:09,760
recognized again and therefore he will

309
00:12:09,760 --> 00:12:11,600
know which sender

310
00:12:11,600 --> 00:12:14,240
a sent to request and to which then his

311
00:12:14,240 --> 00:12:16,560
reply just went

312
00:12:16,560 --> 00:12:20,959
um so we can't do this um explicitly but

313
00:12:20,959 --> 00:12:23,920
instead we need to find some clever way

314
00:12:23,920 --> 00:12:26,720
to protect the payload and we look and

315
00:12:26,720 --> 00:12:28,320
therefore we look for something like

316
00:12:28,320 --> 00:12:30,880
implicit payload authentication

317
00:12:30,880 --> 00:12:33,839
and we found two ways to do this and

318
00:12:33,839 --> 00:12:37,120
there's two ways to implicitly

319
00:12:37,120 --> 00:12:39,519
protect the payload are the basic ideas

320
00:12:39,519 --> 00:12:41,680
behind our secure repliable onion

321
00:12:41,680 --> 00:12:43,360
routing protocols

322
00:12:43,360 --> 00:12:45,360
and the first way to do this is by using

323
00:12:45,360 --> 00:12:47,760
snacks and the idea behind this is very

324
00:12:47,760 --> 00:12:48,639
easy

325
00:12:48,639 --> 00:12:50,959
let us just prove that everybody does

326
00:12:50,959 --> 00:12:52,800
everything like they should

327
00:12:52,800 --> 00:12:54,639
so the sender will prove that they

328
00:12:54,639 --> 00:12:57,120
actually generated the fresh onion and

329
00:12:57,120 --> 00:12:59,040
the intermediate relays will prove that

330
00:12:59,040 --> 00:13:01,600
they faithfully process the onion and

331
00:13:01,600 --> 00:13:03,440
the receiver will prove that they

332
00:13:03,440 --> 00:13:04,880
generated a

333
00:13:04,880 --> 00:13:07,279
reply on you

334
00:13:07,279 --> 00:13:09,200
now of course on that this proof states

335
00:13:09,200 --> 00:13:11,519
is that the onion that we just see is

336
00:13:11,519 --> 00:13:13,440
either a fresh onion or a faithfully

337
00:13:13,440 --> 00:13:17,600
processed onion or a reply onion

338
00:13:17,600 --> 00:13:21,040
now of course we cannot only trust in

339
00:13:21,040 --> 00:13:23,519
this single step being right but we need

340
00:13:23,519 --> 00:13:25,519
to make sure that we actually build an

341
00:13:25,519 --> 00:13:28,160
authentication chain until back at the

342
00:13:28,160 --> 00:13:31,519
very center so we do not only show that

343
00:13:31,519 --> 00:13:34,639
um the onion that we just see is the

344
00:13:34,639 --> 00:13:37,920
um result of a faithful processing of an

345
00:13:37,920 --> 00:13:38,880
onion

346
00:13:38,880 --> 00:13:40,959
but we will show that it is the result

347
00:13:40,959 --> 00:13:43,600
of the faithfully processing of

348
00:13:43,600 --> 00:13:45,760
an either already faithfully processed

349
00:13:45,760 --> 00:13:48,480
onion or fresh onion or a fresh reply

350
00:13:48,480 --> 00:13:51,040
onion so that we can always be sure that

351
00:13:51,040 --> 00:13:53,680
our authentication chain goes all the

352
00:13:53,680 --> 00:13:58,719
way back until the center in this case

353
00:13:59,120 --> 00:14:01,519
now how we actually do this and make

354
00:14:01,519 --> 00:14:03,199
sure that we link this proofs is a bit

355
00:14:03,199 --> 00:14:05,519
more involved which is why i would

356
00:14:05,519 --> 00:14:08,399
kindly refer you to have a look into our

357
00:14:08,399 --> 00:14:10,320
paper for more details

358
00:14:10,320 --> 00:14:12,320
but what i want to tell you now is the

359
00:14:12,320 --> 00:14:14,880
second way of how we can realize

360
00:14:14,880 --> 00:14:17,120
implicit payload authentication for

361
00:14:17,120 --> 00:14:19,440
onion routing and it is by using

362
00:14:19,440 --> 00:14:21,279
updatable encryption

363
00:14:21,279 --> 00:14:24,079
updatable encryption originally comes

364
00:14:24,079 --> 00:14:26,320
from a very different setting it's

365
00:14:26,320 --> 00:14:29,839
actually about um databases and cloud

366
00:14:29,839 --> 00:14:32,320
service so the idea is that you store

367
00:14:32,320 --> 00:14:35,040
your data of course encrypted at some

368
00:14:35,040 --> 00:14:37,519
cloud server and now you want to change

369
00:14:37,519 --> 00:14:39,199
your key

370
00:14:39,199 --> 00:14:41,199
so you want to update all the source

371
00:14:41,199 --> 00:14:44,399
cipher text from a node to a new key and

372
00:14:44,399 --> 00:14:46,320
of course you would like to do this in

373
00:14:46,320 --> 00:14:48,639
an efficient way so you don't want to

374
00:14:48,639 --> 00:14:51,120
really resend all the cipher text but

375
00:14:51,120 --> 00:14:52,320
instead

376
00:14:52,320 --> 00:14:54,240
and this is what updateable encryption

377
00:14:54,240 --> 00:14:55,920
does

378
00:14:55,920 --> 00:14:58,320
you generate an update token such that

379
00:14:58,320 --> 00:14:59,360
then

380
00:14:59,360 --> 00:15:01,920
the cloud database can update decipher

381
00:15:01,920 --> 00:15:04,720
texts on their own without learning any

382
00:15:04,720 --> 00:15:07,040
information about the including plain

383
00:15:07,040 --> 00:15:09,199
text or the used keys

384
00:15:09,199 --> 00:15:10,800
and now there is one more very

385
00:15:10,800 --> 00:15:13,680
interesting property that is

386
00:15:13,680 --> 00:15:15,920
updated that some updateable encryption

387
00:15:15,920 --> 00:15:18,240
schemes have and it is plain text

388
00:15:18,240 --> 00:15:19,440
integrity

389
00:15:19,440 --> 00:15:22,320
plain text integrity says that

390
00:15:22,320 --> 00:15:24,560
well an adversary is not able to

391
00:15:24,560 --> 00:15:26,639
generate a cipher text

392
00:15:26,639 --> 00:15:30,320
that decrypts to a message

393
00:15:30,320 --> 00:15:32,639
unless he trivially knows about this

394
00:15:32,639 --> 00:15:35,120
before so of course he trivially knows

395
00:15:35,120 --> 00:15:37,199
all the ciphertexts that were in the

396
00:15:37,199 --> 00:15:38,880
cloud server

397
00:15:38,880 --> 00:15:41,680
but other than that he cannot come up

398
00:15:41,680 --> 00:15:43,839
with new cipher texts that actually

399
00:15:43,839 --> 00:15:45,839
decrypt two messages

400
00:15:45,839 --> 00:15:48,240
um with our um

401
00:15:48,240 --> 00:15:50,880
with a non-negligible probability and

402
00:15:50,880 --> 00:15:52,480
this is really interesting for us

403
00:15:52,480 --> 00:15:55,040
because this means um he cannot tamper

404
00:15:55,040 --> 00:15:56,800
with our payload

405
00:15:56,800 --> 00:15:58,399
and we use this

406
00:15:58,399 --> 00:16:01,680
in the this way for onion routing so in

407
00:16:01,680 --> 00:16:04,079
a very uh different setting than the one

408
00:16:04,079 --> 00:16:04,880
it's

409
00:16:04,880 --> 00:16:07,839
originally been proposed for and we use

410
00:16:07,839 --> 00:16:10,000
um updatable encryption in the sense

411
00:16:10,000 --> 00:16:12,399
that we applied to the payload and our

412
00:16:12,399 --> 00:16:15,600
payload needs to be updated with update

413
00:16:15,600 --> 00:16:18,160
tokens at every relay

414
00:16:18,160 --> 00:16:21,519
and as soon as it was modified the

415
00:16:21,519 --> 00:16:23,920
update will fail because of the

416
00:16:23,920 --> 00:16:26,480
plaintext integrity property

417
00:16:26,480 --> 00:16:28,160
so let us have a look at this in a bit

418
00:16:28,160 --> 00:16:31,279
more detail first of all our sender that

419
00:16:31,279 --> 00:16:33,279
we trust generates all the keys and

420
00:16:33,279 --> 00:16:36,560
tokens and of course knows all of them

421
00:16:36,560 --> 00:16:38,560
then she starts by encrypting her

422
00:16:38,560 --> 00:16:40,959
message with the first key using the

423
00:16:40,959 --> 00:16:44,160
updatable encryption encryption function

424
00:16:44,160 --> 00:16:45,519
um

425
00:16:45,519 --> 00:16:47,360
and she sends this as the payload of the

426
00:16:47,360 --> 00:16:50,079
onion and includes the update tokens and

427
00:16:50,079 --> 00:16:51,839
the header of the onion

428
00:16:51,839 --> 00:16:54,720
but only in a way such that each relay

429
00:16:54,720 --> 00:16:56,639
only gets to see one of the update

430
00:16:56,639 --> 00:16:58,880
tokens so the first relay will get the

431
00:16:58,880 --> 00:17:01,920
first update token

432
00:17:01,920 --> 00:17:03,759
the first relay will

433
00:17:03,759 --> 00:17:05,839
use the update function of updateable

434
00:17:05,839 --> 00:17:09,599
encryption and update the plane to

435
00:17:09,599 --> 00:17:13,679
update the payload from key one to p2

436
00:17:13,679 --> 00:17:16,160
now sadly this relay is adversarial so

437
00:17:16,160 --> 00:17:18,880
the adversary knows that the gray and

438
00:17:18,880 --> 00:17:21,199
the blue onion actually belong together

439
00:17:21,199 --> 00:17:23,119
but now there's an honest relay and the

440
00:17:23,119 --> 00:17:25,280
honest really also gets an update token

441
00:17:25,280 --> 00:17:27,760
that only dishonest relay can see so the

442
00:17:27,760 --> 00:17:30,160
adversary does not know this token um

443
00:17:30,160 --> 00:17:32,240
and that's the important thing now the

444
00:17:32,240 --> 00:17:34,960
honest really of course updates um the

445
00:17:34,960 --> 00:17:36,559
payload again

446
00:17:36,559 --> 00:17:38,880
and the adversary does not know that

447
00:17:38,880 --> 00:17:41,280
this green onion is the outcome of the

448
00:17:41,280 --> 00:17:43,440
blue onion it could also be

449
00:17:43,440 --> 00:17:45,840
any other onion that he observes at this

450
00:17:45,840 --> 00:17:48,240
relay at the same time

451
00:17:48,240 --> 00:17:50,400
because

452
00:17:50,400 --> 00:17:52,240
he does not know the update token that

453
00:17:52,240 --> 00:17:54,559
if another update token would have been

454
00:17:54,559 --> 00:17:57,280
used the other onion another onion would

455
00:17:57,280 --> 00:17:59,360
have been the outcome

456
00:17:59,360 --> 00:18:02,320
now we continue this way until the onion

457
00:18:02,320 --> 00:18:04,640
arrives at the receiver and for the

458
00:18:04,640 --> 00:18:06,559
receiver we want him to be able to

459
00:18:06,559 --> 00:18:08,400
decrypt the message so we have to tell

460
00:18:08,400 --> 00:18:10,880
him the fourth key

461
00:18:10,880 --> 00:18:12,960
but nothing more than this with this he

462
00:18:12,960 --> 00:18:15,840
can decrypt the message and he will not

463
00:18:15,840 --> 00:18:18,720
notice that this key four actually also

464
00:18:18,720 --> 00:18:21,520
belongs to key2 earlier

465
00:18:21,520 --> 00:18:23,280
because he does not know the second

466
00:18:23,280 --> 00:18:25,200
update token

467
00:18:25,200 --> 00:18:28,320
additionally we give the first to the

468
00:18:28,320 --> 00:18:29,600
first key

469
00:18:29,600 --> 00:18:32,960
for on the reply path to the adversary

470
00:18:32,960 --> 00:18:34,240
so that he can

471
00:18:34,240 --> 00:18:37,200
um on so that he can use the updated

472
00:18:37,200 --> 00:18:41,200
encryption function to encrypt his reply

473
00:18:41,200 --> 00:18:43,679
as well and of course we include the

474
00:18:43,679 --> 00:18:46,640
update tokens for all the relays uh

475
00:18:46,640 --> 00:18:48,880
again in the backward header in a way

476
00:18:48,880 --> 00:18:51,120
such that the adversary does not learn

477
00:18:51,120 --> 00:18:53,919
them or at least not the ones of the

478
00:18:53,919 --> 00:18:55,360
honest relays

479
00:18:55,360 --> 00:18:56,400
and again

480
00:18:56,400 --> 00:18:57,280
um

481
00:18:57,280 --> 00:18:58,480
he will

482
00:18:58,480 --> 00:18:59,280
be

483
00:18:59,280 --> 00:19:02,080
sending his onion and with the payload

484
00:19:02,080 --> 00:19:04,720
encrypted under the first backwards key

485
00:19:04,720 --> 00:19:07,440
and the other onions will

486
00:19:07,440 --> 00:19:09,440
always update the backwards key to the

487
00:19:09,440 --> 00:19:12,240
other keys that alice has chosen but at

488
00:19:12,240 --> 00:19:14,640
the point of the honest relay the chain

489
00:19:14,640 --> 00:19:17,120
that the adversary can follow breaks

490
00:19:17,120 --> 00:19:19,200
again because he does not know the

491
00:19:19,200 --> 00:19:21,440
second update token for the backwards

492
00:19:21,440 --> 00:19:22,480
path

493
00:19:22,480 --> 00:19:25,200
and therefore he cannot link it over

494
00:19:25,200 --> 00:19:27,440
this honest relay which is exactly what

495
00:19:27,440 --> 00:19:28,559
we wanted

496
00:19:28,559 --> 00:19:30,799
now if the adversary decides to modify

497
00:19:30,799 --> 00:19:34,400
the message before the honest uh relay

498
00:19:34,400 --> 00:19:36,720
pay the plaintext integrity guarantees

499
00:19:36,720 --> 00:19:39,600
that the honest relay realizes and the

500
00:19:39,600 --> 00:19:43,200
updating of the payload will simply fail

501
00:19:43,200 --> 00:19:45,039
and the onion will be dropped at the

502
00:19:45,039 --> 00:19:47,600
honest relay if he decides to modify

503
00:19:47,600 --> 00:19:49,919
after the honest relay it is not much

504
00:19:49,919 --> 00:19:53,200
use for him anyways because then he just

505
00:19:53,200 --> 00:19:55,520
does not get the request but also

506
00:19:55,520 --> 00:19:58,320
doesn't learn anything from it

507
00:19:58,320 --> 00:20:00,720
now of course we need to ensure that we

508
00:20:00,720 --> 00:20:03,679
did not include any other ways to link

509
00:20:03,679 --> 00:20:06,159
onions before and after the honest relay

510
00:20:06,159 --> 00:20:07,840
based on other attacks than the

511
00:20:07,840 --> 00:20:09,679
malleability attack

512
00:20:09,679 --> 00:20:11,679
and we do this in our paper but

513
00:20:11,679 --> 00:20:14,799
technically it's very similar to earlier

514
00:20:14,799 --> 00:20:18,480
work so there has been earlier work

515
00:20:18,480 --> 00:20:20,720
that does not support replies as well as

516
00:20:20,720 --> 00:20:22,559
concurrent work that does support

517
00:20:22,559 --> 00:20:25,840
replies that does support replies but is

518
00:20:25,840 --> 00:20:28,159
not secure against our malleability

519
00:20:28,159 --> 00:20:31,600
attack so we indeed propose reusable

520
00:20:31,600 --> 00:20:34,799
security properties that now are

521
00:20:34,799 --> 00:20:37,200
protecting against emolliability attack

522
00:20:37,200 --> 00:20:39,520
and support replies

523
00:20:39,520 --> 00:20:42,000
and we do this technically very similar

524
00:20:42,000 --> 00:20:43,919
to what has been done before by

525
00:20:43,919 --> 00:20:46,159
proposing an ideal functionality in the

526
00:20:46,159 --> 00:20:48,720
uc framework and then deriving game

527
00:20:48,720 --> 00:20:51,840
based properties from this functionality

528
00:20:51,840 --> 00:20:54,240
and finally of course we prove that our

529
00:20:54,240 --> 00:20:56,080
protocols achieve these game-based

530
00:20:56,080 --> 00:20:57,280
properties

531
00:20:57,280 --> 00:20:59,200
but if you're interested in details i

532
00:20:59,200 --> 00:21:02,880
would refer you to our paper for now i

533
00:21:02,880 --> 00:21:05,760
want to summarize the talk so we have

534
00:21:05,760 --> 00:21:07,760
learned about onion routings of the

535
00:21:07,760 --> 00:21:10,480
dangers of the moleability attack

536
00:21:10,480 --> 00:21:13,200
for the relationship privacy

537
00:21:13,200 --> 00:21:14,960
we also learned that preventing the

538
00:21:14,960 --> 00:21:18,000
malleability attack and at the same time

539
00:21:18,000 --> 00:21:20,960
protecting replies in the sense that we

540
00:21:20,960 --> 00:21:23,840
want that replies and requests are

541
00:21:23,840 --> 00:21:26,480
indistinguishable is a challenging task

542
00:21:26,480 --> 00:21:28,400
because it requires us

543
00:21:28,400 --> 00:21:29,200
to

544
00:21:29,200 --> 00:21:31,760
find a way to implicitly authenticate

545
00:21:31,760 --> 00:21:32,960
the payload

546
00:21:32,960 --> 00:21:34,080
um

547
00:21:34,080 --> 00:21:36,159
which is a challenging task but we found

548
00:21:36,159 --> 00:21:39,280
two ways to do this and the first way is

549
00:21:39,280 --> 00:21:42,960
by using snags and proving that every

550
00:21:42,960 --> 00:21:45,520
relay and every sender and receiver

551
00:21:45,520 --> 00:21:46,880
actually

552
00:21:46,880 --> 00:21:49,600
did the processing correctly

553
00:21:49,600 --> 00:21:53,520
and the second way is by using the plain

554
00:21:53,520 --> 00:21:56,240
text integrity property of updateable

555
00:21:56,240 --> 00:21:58,799
encryption and thereby applying

556
00:21:58,799 --> 00:22:01,039
updateable encryption in a completely

557
00:22:01,039 --> 00:22:03,039
new setting where it hasn't been applied

558
00:22:03,039 --> 00:22:04,480
before

559
00:22:04,480 --> 00:22:06,799
and with this i would like to thank you

560
00:22:06,799 --> 00:22:08,240
for your attention

561
00:22:08,240 --> 00:22:10,159
and of course invite you to have a look

562
00:22:10,159 --> 00:22:13,840
into our paper for more details

