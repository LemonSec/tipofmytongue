1
00:00:00,000 --> 00:00:02,399
right

2
00:00:02,800 --> 00:00:06,000
kevin thinks we should start

3
00:00:14,960 --> 00:00:16,560
so good afternoon everyone my name is

4
00:00:16,560 --> 00:00:18,480
christian kasha i am sharing this

5
00:00:18,480 --> 00:00:19,760
session on

6
00:00:19,760 --> 00:00:23,519
quantum and post quantum um

7
00:00:23,519 --> 00:00:25,599
it must have been a unlikely outcome of

8
00:00:25,599 --> 00:00:27,519
the quantum algorithm that assigned me

9
00:00:27,519 --> 00:00:29,599
to this session because i will learn a

10
00:00:29,599 --> 00:00:31,599
lot of new things yeah

11
00:00:31,599 --> 00:00:33,280
the first talk is on

12
00:00:33,280 --> 00:00:35,280
uh is about beyond quadratic speed ups

13
00:00:35,280 --> 00:00:36,880
in quantum attacks on symmetric schemes

14
00:00:36,880 --> 00:00:39,360
by xavier bonte and the

15
00:00:39,360 --> 00:00:41,600
lord and ferdinand

16
00:00:41,600 --> 00:00:43,360
and xavier is going to give the talk

17
00:00:43,360 --> 00:00:46,079
please thanks for the introduction

18
00:00:46,079 --> 00:00:47,360
so

19
00:00:47,360 --> 00:00:49,120
first of all i will give a bit of

20
00:00:49,120 --> 00:00:52,160
context by presenting a very quick view

21
00:00:52,160 --> 00:00:54,239
on quantum attacks

22
00:00:54,239 --> 00:00:55,199
in

23
00:00:55,199 --> 00:00:58,640
cryptography so we can separate what is

24
00:00:58,640 --> 00:01:01,680
mostly three big families the first one

25
00:01:01,680 --> 00:01:04,000
is bad news where we have

26
00:01:04,000 --> 00:01:05,519
quantum polynomial attacks on

27
00:01:05,519 --> 00:01:08,479
classically secure schemes the two most

28
00:01:08,479 --> 00:01:11,280
notorious examples are of course rsa or

29
00:01:11,280 --> 00:01:14,240
discrete logarithm but as maria

30
00:01:14,240 --> 00:01:15,360
presented

31
00:01:15,360 --> 00:01:17,360
this morning this is also the case for

32
00:01:17,360 --> 00:01:19,920
some symmetric schemes in the q2 model

33
00:01:19,920 --> 00:01:21,920
that is with classical

34
00:01:21,920 --> 00:01:23,680
queries we have quantum queries not

35
00:01:23,680 --> 00:01:24,799
classical

36
00:01:24,799 --> 00:01:27,680
we also have an annoying case where we

37
00:01:27,680 --> 00:01:30,640
have some super polynomial gain with a

38
00:01:30,640 --> 00:01:32,720
quantum algorithm rather

39
00:01:32,720 --> 00:01:34,960
compared to classical so here quantum

40
00:01:34,960 --> 00:01:37,280
computing is annoying but it does not

41
00:01:37,280 --> 00:01:39,600
prevent to do cryptography this is in

42
00:01:39,600 --> 00:01:41,439
particular the case for some isogen

43
00:01:41,439 --> 00:01:42,880
based schemes

44
00:01:42,880 --> 00:01:45,360
and in the other cases

45
00:01:45,360 --> 00:01:48,320
in the the most common case we can see

46
00:01:48,320 --> 00:01:50,600
is where we have a speed up which is

47
00:01:50,600 --> 00:01:54,399
atmospheric so this includes pretty much

48
00:01:54,399 --> 00:01:57,119
everything else including

49
00:01:57,119 --> 00:01:59,680
up to now symmetric schemes if we are

50
00:01:59,680 --> 00:02:03,200
restricted to classical queries and in

51
00:02:03,200 --> 00:02:04,560
this

52
00:02:04,560 --> 00:02:07,600
case we can experimentally see that most

53
00:02:07,600 --> 00:02:09,758
of the proposed attacks are quantum

54
00:02:09,758 --> 00:02:12,800
improvements of classical attack so now

55
00:02:12,800 --> 00:02:16,400
i will zoom a bit more on this category

56
00:02:16,400 --> 00:02:19,520
and i will focus more precisely in the

57
00:02:19,520 --> 00:02:22,000
case of symmetric schemes and of block

58
00:02:22,000 --> 00:02:24,800
cipher so we know that thanks to a

59
00:02:24,800 --> 00:02:27,360
graver search exhaustive search has a

60
00:02:27,360 --> 00:02:29,200
quality speed up quantumly compared to

61
00:02:29,200 --> 00:02:32,239
classical and if when we do a quantum

62
00:02:32,239 --> 00:02:34,480
attack the only thing we do is to

63
00:02:34,480 --> 00:02:36,800
accelerate some parts using rover's

64
00:02:36,800 --> 00:02:37,840
algorithm

65
00:02:37,840 --> 00:02:39,760
then the overall speed up we'll get will

66
00:02:39,760 --> 00:02:42,879
be at most quadratic and this is

67
00:02:42,879 --> 00:02:44,720
actually something which can be

68
00:02:44,720 --> 00:02:46,560
extremely reassuring

69
00:02:46,560 --> 00:02:49,599
because if we assume that the speed up

70
00:02:49,599 --> 00:02:51,920
we can get with quantum computing is at

71
00:02:51,920 --> 00:02:53,360
most quality

72
00:02:53,360 --> 00:02:56,239
then if for a given scheme no classical

73
00:02:56,239 --> 00:02:58,879
attack beats classical exhaustive search

74
00:02:58,879 --> 00:03:01,200
then we can't have any quantum attack

75
00:03:01,200 --> 00:03:04,720
that beats quantum exhaustive search so

76
00:03:04,720 --> 00:03:06,800
this is a very simple

77
00:03:06,800 --> 00:03:09,760
analysis but this is something that

78
00:03:09,760 --> 00:03:11,280
could occur for example for block

79
00:03:11,280 --> 00:03:13,440
ciphers but we also have something

80
00:03:13,440 --> 00:03:14,480
similar

81
00:03:14,480 --> 00:03:17,680
that occurs in the nist competition with

82
00:03:17,680 --> 00:03:19,360
some of the quantum

83
00:03:19,360 --> 00:03:20,879
security level

84
00:03:20,879 --> 00:03:22,720
so of course this is a very simple

85
00:03:22,720 --> 00:03:26,720
analysis and in this talk i will

86
00:03:26,720 --> 00:03:29,120
present you the first example of a

87
00:03:29,120 --> 00:03:31,519
symmetric construction whose

88
00:03:31,519 --> 00:03:33,760
gap between its classical and quantum

89
00:03:33,760 --> 00:03:36,480
security is actually greater than

90
00:03:36,480 --> 00:03:38,879
quadratic

91
00:03:38,879 --> 00:03:43,120
and now i will begin with a very short

92
00:03:43,120 --> 00:03:45,920
disclaimer most of the introduction of

93
00:03:45,920 --> 00:03:47,360
my work will

94
00:03:47,360 --> 00:03:49,920
overlap with

95
00:03:49,920 --> 00:03:52,000
maria's innovative talk of this morning

96
00:03:52,000 --> 00:03:53,599
so if you slept this morning you have a

97
00:03:53,599 --> 00:03:56,319
second chance to catch up on that

98
00:03:56,319 --> 00:03:58,640
so first of all i will present simon's

99
00:03:58,640 --> 00:04:00,879
algorithm and the attack on the

100
00:04:00,879 --> 00:04:03,680
environmental scheme then i will dive

101
00:04:03,680 --> 00:04:05,840
into the core algorithm for our attack

102
00:04:05,840 --> 00:04:07,599
which is your flight simon's algorithm

103
00:04:07,599 --> 00:04:10,480
and finally i will present the new stuff

104
00:04:10,480 --> 00:04:12,720
so first of all i introduce to you

105
00:04:12,720 --> 00:04:15,360
simon's algorithm which is a very early

106
00:04:15,360 --> 00:04:17,199
quantum algorithm and a sort of

107
00:04:17,199 --> 00:04:19,759
predecessor of short algorithm it solves

108
00:04:19,759 --> 00:04:22,160
what is called simon's problem this is a

109
00:04:22,160 --> 00:04:23,840
very simple problem where we have a

110
00:04:23,840 --> 00:04:26,800
function f on n bits and this function

111
00:04:26,800 --> 00:04:29,040
happens to be periodic that is there

112
00:04:29,040 --> 00:04:32,560
exists a fixed value s such that if you

113
00:04:32,560 --> 00:04:34,080
add it to the input it doesn't change

114
00:04:34,080 --> 00:04:35,759
the output and

115
00:04:35,759 --> 00:04:37,280
the aim of the problem is to recover

116
00:04:37,280 --> 00:04:38,800
this period

117
00:04:38,800 --> 00:04:40,400
classically this reduces to collision

118
00:04:40,400 --> 00:04:42,320
finding but quantumly we can do much

119
00:04:42,320 --> 00:04:44,800
better thanks to simon's algorithm

120
00:04:44,800 --> 00:04:45,919
the main thing

121
00:04:45,919 --> 00:04:47,840
to remember about simon's algorithm is

122
00:04:47,840 --> 00:04:50,400
that it requires quantum queries to the

123
00:04:50,400 --> 00:04:52,960
periodic function that is it needs to be

124
00:04:52,960 --> 00:04:54,479
able to compute

125
00:04:54,479 --> 00:04:56,800
given a superposition of input to the

126
00:04:56,800 --> 00:04:58,720
function the superposition of the input

127
00:04:58,720 --> 00:05:01,840
output tuples and from that it can

128
00:05:01,840 --> 00:05:03,440
efficiently sample the values that are

129
00:05:03,440 --> 00:05:06,639
orthogonal to the period hence it's

130
00:05:06,639 --> 00:05:09,360
sufficient to repeat any amount of time

131
00:05:09,360 --> 00:05:11,360
the process and solving a linear system

132
00:05:11,360 --> 00:05:12,880
to recover

133
00:05:12,880 --> 00:05:14,080
the period

134
00:05:14,080 --> 00:05:16,080
so now how to apply that

135
00:05:16,080 --> 00:05:16,800
in

136
00:05:16,800 --> 00:05:19,520
cryptanalysis i present again the even

137
00:05:19,520 --> 00:05:21,840
monster cipher which is a very simple

138
00:05:21,840 --> 00:05:25,039
block cipher arguably the simplest block

139
00:05:25,039 --> 00:05:27,919
cipher it is built from a publicly known

140
00:05:27,919 --> 00:05:30,639
random permutation b and to encrypt a

141
00:05:30,639 --> 00:05:32,000
message x

142
00:05:32,000 --> 00:05:34,560
what you do is you add the first key k1

143
00:05:34,560 --> 00:05:36,880
you apply the public permutation you add

144
00:05:36,880 --> 00:05:39,520
a second key and you get yourself a test

145
00:05:39,520 --> 00:05:41,520
and classically this

146
00:05:41,520 --> 00:05:44,080
simple construction is proven

147
00:05:44,080 --> 00:05:45,759
any attack requires a certain amount of

148
00:05:45,759 --> 00:05:47,840
time and data such as the product is at

149
00:05:47,840 --> 00:05:50,639
least 2 to the n

150
00:05:50,639 --> 00:05:53,680
now quantumly this is a very different

151
00:05:53,680 --> 00:05:55,600
there has been an attack proposed by q

152
00:05:55,600 --> 00:05:59,360
academy in 2012 and it amounts in

153
00:05:59,360 --> 00:06:01,199
realizing that if you take the

154
00:06:01,199 --> 00:06:03,120
encryption of a message x

155
00:06:03,120 --> 00:06:05,199
and add to this message

156
00:06:05,199 --> 00:06:08,560
the image of the of the same x through

157
00:06:08,560 --> 00:06:11,039
the pubic permutation you get a periodic

158
00:06:11,039 --> 00:06:13,120
function and the period of this function

159
00:06:13,120 --> 00:06:14,880
will be the first key

160
00:06:14,880 --> 00:06:18,000
hence it is possible to recover this key

161
00:06:18,000 --> 00:06:20,080
by applying simon's algorithm and once

162
00:06:20,080 --> 00:06:21,360
you've recovered it you've essentially

163
00:06:21,360 --> 00:06:22,960
broken even answer

164
00:06:22,960 --> 00:06:23,759
thus

165
00:06:23,759 --> 00:06:25,680
simon's algorithm allows to break the

166
00:06:25,680 --> 00:06:26,800
even months of construction in

167
00:06:26,800 --> 00:06:28,240
polynomial time

168
00:06:28,240 --> 00:06:30,720
but now the things we really need to

169
00:06:30,720 --> 00:06:32,639
have in mind is that in order for

170
00:06:32,639 --> 00:06:34,639
simon's algorithm to work we really

171
00:06:34,639 --> 00:06:36,880
crucially need the ability to perform

172
00:06:36,880 --> 00:06:39,759
quantum queries so to compute

173
00:06:39,759 --> 00:06:42,240
the superposition of input output tuple

174
00:06:42,240 --> 00:06:44,639
given a superposition of input however

175
00:06:44,639 --> 00:06:47,919
this is not the scenario we tend to see

176
00:06:47,919 --> 00:06:50,080
at least today in general what we have

177
00:06:50,080 --> 00:06:53,039
today is a large list of

178
00:06:53,039 --> 00:06:55,199
classical plain text cipher text pairs

179
00:06:55,199 --> 00:06:56,880
and we have to work with that and this

180
00:06:56,880 --> 00:06:58,479
is precisely what the offline simon

181
00:06:58,479 --> 00:07:00,080
sacrasone does

182
00:07:00,080 --> 00:07:02,960
so now to present this algorithm

183
00:07:02,960 --> 00:07:05,520
i will present a slight generalization

184
00:07:05,520 --> 00:07:07,680
of the even monster construction

185
00:07:07,680 --> 00:07:10,000
which is the fx construction it is the

186
00:07:10,000 --> 00:07:12,400
same except that instead of a public

187
00:07:12,400 --> 00:07:14,560
permutation p in the middle

188
00:07:14,560 --> 00:07:16,800
we have a block cipher indexed by a

189
00:07:16,800 --> 00:07:18,400
secret key k

190
00:07:18,400 --> 00:07:20,800
and classically we have a very similar

191
00:07:20,800 --> 00:07:23,360
time data tradeoff which is that any

192
00:07:23,360 --> 00:07:26,240
attack must have the time data product

193
00:07:26,240 --> 00:07:29,520
greater or equal than n plus k

194
00:07:29,520 --> 00:07:30,800
and we can

195
00:07:30,800 --> 00:07:31,840
have a look

196
00:07:31,840 --> 00:07:33,680
at some attack that matches this

197
00:07:33,680 --> 00:07:35,599
trade-off there are many variants but

198
00:07:35,599 --> 00:07:37,919
here i present one simple attack

199
00:07:37,919 --> 00:07:41,280
which is that we first

200
00:07:41,280 --> 00:07:44,160
gather a large list of encryptions of

201
00:07:44,160 --> 00:07:46,319
many messages

202
00:07:46,319 --> 00:07:47,759
here we saw

203
00:07:47,759 --> 00:07:49,520
the encryption of

204
00:07:49,520 --> 00:07:51,280
two messages with different inputs this

205
00:07:51,280 --> 00:07:53,919
is only to remove the k2 and once we've

206
00:07:53,919 --> 00:07:55,520
done that once

207
00:07:55,520 --> 00:07:57,039
we will

208
00:07:57,039 --> 00:08:00,479
try to compute the correct inner key by

209
00:08:00,479 --> 00:08:02,240
testing every possible in our key and

210
00:08:02,240 --> 00:08:04,720
for each candidate

211
00:08:04,720 --> 00:08:05,680
key

212
00:08:05,680 --> 00:08:08,479
we will compute the encryption of a

213
00:08:08,479 --> 00:08:09,680
message

214
00:08:09,680 --> 00:08:10,560
x

215
00:08:10,560 --> 00:08:13,440
and we will and we will zero it

216
00:08:13,440 --> 00:08:14,240
and

217
00:08:14,240 --> 00:08:16,960
we will find a collision with the other

218
00:08:16,960 --> 00:08:18,400
key and each time

219
00:08:18,400 --> 00:08:20,080
we find a collision this will give us a

220
00:08:20,080 --> 00:08:22,080
key both for the value of the inner key

221
00:08:22,080 --> 00:08:24,000
k and the first key

222
00:08:24,000 --> 00:08:26,160
k1 because we know that for the correct

223
00:08:26,160 --> 00:08:27,840
key

224
00:08:27,840 --> 00:08:30,479
for if we do the correct key guess and

225
00:08:30,479 --> 00:08:32,159
the difference between the input in the

226
00:08:32,159 --> 00:08:34,159
first list and the second list is equal

227
00:08:34,159 --> 00:08:36,399
to k1 we must have a collision and once

228
00:08:36,399 --> 00:08:38,240
we have a guess then it's easy to check

229
00:08:38,240 --> 00:08:40,479
if it's correct by using only a few more

230
00:08:40,479 --> 00:08:43,039
plaintext ciphertext pairs

231
00:08:43,039 --> 00:08:44,080
now

232
00:08:44,080 --> 00:08:46,640
how can we attack that quantumly

233
00:08:46,640 --> 00:08:48,320
there has been

234
00:08:48,320 --> 00:08:49,600
a very sim

235
00:08:49,600 --> 00:08:51,839
simply id proposed by lander on may in

236
00:08:51,839 --> 00:08:54,160
2017

237
00:08:54,160 --> 00:08:58,240
which is that if we know the inner key k

238
00:08:58,240 --> 00:09:01,120
then it degenerates to an event mansur

239
00:09:01,120 --> 00:09:03,600
hence we can check whether the anarchy

240
00:09:03,600 --> 00:09:05,360
is correct or not by trying to apply the

241
00:09:05,360 --> 00:09:07,680
previous attack if it's correct it's a

242
00:09:07,680 --> 00:09:10,080
it's the correct guess otherwise for one

243
00:09:10,080 --> 00:09:11,600
guess it will fail

244
00:09:11,600 --> 00:09:14,320
thus we can attack this construction by

245
00:09:14,320 --> 00:09:16,480
doing a quantum search to apply simon's

246
00:09:16,480 --> 00:09:18,880
algorithm to check whether the key is

247
00:09:18,880 --> 00:09:21,600
correct and here the cost will be

248
00:09:21,600 --> 00:09:23,360
polynomial because simon's algorithm is

249
00:09:23,360 --> 00:09:24,720
polynomial

250
00:09:24,720 --> 00:09:26,399
times the

251
00:09:26,399 --> 00:09:28,800
cost of the quantum third so 2 to the k

252
00:09:28,800 --> 00:09:30,560
over 2.

253
00:09:30,560 --> 00:09:31,440
now

254
00:09:31,440 --> 00:09:34,640
the remark on the fx construction to

255
00:09:34,640 --> 00:09:37,120
go to the offline science algorithm is

256
00:09:37,120 --> 00:09:38,160
that

257
00:09:38,160 --> 00:09:40,640
what does the government simon algorithm

258
00:09:40,640 --> 00:09:43,839
is to check for a family of functions

259
00:09:43,839 --> 00:09:46,080
which one is a periodical to find the

260
00:09:46,080 --> 00:09:48,160
periodic function and here we do not

261
00:09:48,160 --> 00:09:49,040
have

262
00:09:49,040 --> 00:09:51,839
a random periodic function it has a very

263
00:09:51,839 --> 00:09:53,920
specific structure

264
00:09:53,920 --> 00:09:55,440
it is the sum

265
00:09:55,440 --> 00:09:57,440
of a part that is secret this is the

266
00:09:57,440 --> 00:10:00,080
encryption of an x and

267
00:10:00,080 --> 00:10:03,360
this part does not depend on the current

268
00:10:03,360 --> 00:10:05,200
guess on

269
00:10:05,200 --> 00:10:07,600
the function and we add to this first

270
00:10:07,600 --> 00:10:11,440
function something that only depends on

271
00:10:11,440 --> 00:10:13,920
values we know so the input x and the

272
00:10:13,920 --> 00:10:15,440
current guess for

273
00:10:15,440 --> 00:10:17,680
the value of the inner key that means

274
00:10:17,680 --> 00:10:18,880
that

275
00:10:18,880 --> 00:10:20,399
during

276
00:10:20,399 --> 00:10:21,600
the attack

277
00:10:21,600 --> 00:10:22,560
what we

278
00:10:22,560 --> 00:10:25,680
what we do each time we do a test is to

279
00:10:25,680 --> 00:10:27,600
do one quantum query to the secret

280
00:10:27,600 --> 00:10:30,640
function with the exact same input

281
00:10:30,640 --> 00:10:32,959
and then we we add some elements to

282
00:10:32,959 --> 00:10:35,440
obtain the functional amount hence we do

283
00:10:35,440 --> 00:10:37,600
exponentially many times the exact same

284
00:10:37,600 --> 00:10:39,519
quantum query to the exact same secret

285
00:10:39,519 --> 00:10:40,560
function

286
00:10:40,560 --> 00:10:43,360
and as it seems to be a bit wasteful and

287
00:10:43,360 --> 00:10:45,040
indeed we can do

288
00:10:45,040 --> 00:10:46,640
better than that

289
00:10:46,640 --> 00:10:49,040
if we change a bit the way we do the

290
00:10:49,040 --> 00:10:52,800
quantum attack so first we assume

291
00:10:52,800 --> 00:10:55,279
that we do before the attack all the

292
00:10:55,279 --> 00:10:57,680
quantum queries to the secret function

293
00:10:57,680 --> 00:11:01,360
and then when we want to do our test of

294
00:11:01,360 --> 00:11:02,800
periodicity

295
00:11:02,800 --> 00:11:04,640
what we will do is to get

296
00:11:04,640 --> 00:11:06,240
the quantum queries

297
00:11:06,240 --> 00:11:08,720
construct reversibly

298
00:11:08,720 --> 00:11:11,120
the the function that we

299
00:11:11,120 --> 00:11:12,240
want

300
00:11:12,240 --> 00:11:14,640
to to test for periodicity

301
00:11:14,640 --> 00:11:16,800
test it and then we revert all the

302
00:11:16,800 --> 00:11:20,079
operations to get back the queries and

303
00:11:20,079 --> 00:11:22,880
we will be then able to use them in the

304
00:11:22,880 --> 00:11:26,320
next state in the next test and so on so

305
00:11:26,320 --> 00:11:28,079
in terms of cost compared to the

306
00:11:28,079 --> 00:11:29,680
previous attack it doesn't change the

307
00:11:29,680 --> 00:11:31,120
time because we

308
00:11:31,120 --> 00:11:33,120
still have the same quantum search and

309
00:11:33,120 --> 00:11:35,120
we still apply simon's algorithm but in

310
00:11:35,120 --> 00:11:37,040
terms of the number of queries to a

311
00:11:37,040 --> 00:11:38,399
secret function

312
00:11:38,399 --> 00:11:41,040
we drastically reduce to from an

313
00:11:41,040 --> 00:11:42,880
exponential number to a new linear

314
00:11:42,880 --> 00:11:43,920
number

315
00:11:43,920 --> 00:11:45,920
and in terms of memory we're still

316
00:11:45,920 --> 00:11:47,360
polynomial

317
00:11:47,360 --> 00:11:49,200
however a linear number of queries is

318
00:11:49,200 --> 00:11:51,120
still not zero

319
00:11:51,120 --> 00:11:52,800
so we can

320
00:11:52,800 --> 00:11:56,399
actually completely get rid of quantum

321
00:11:56,399 --> 00:11:58,800
queries for that we need the ability to

322
00:11:58,800 --> 00:12:00,480
construct the quantum state that

323
00:12:00,480 --> 00:12:02,800
corresponds to a quantum query and this

324
00:12:02,800 --> 00:12:04,720
happens to be possible if you know all

325
00:12:04,720 --> 00:12:07,120
the classical elements that it contained

326
00:12:07,120 --> 00:12:09,519
that is if you know the full code book

327
00:12:09,519 --> 00:12:11,200
of the function then you can manually

328
00:12:11,200 --> 00:12:13,279
construct a quantum state that

329
00:12:13,279 --> 00:12:15,680
corresponds to the quantum queries

330
00:12:15,680 --> 00:12:17,680
and if we do that then we obtain an

331
00:12:17,680 --> 00:12:18,720
attack

332
00:12:18,720 --> 00:12:20,399
whose the cost will be

333
00:12:20,399 --> 00:12:22,800
2 to the n before on because we have to

334
00:12:22,800 --> 00:12:24,959
process all the classical queries

335
00:12:24,959 --> 00:12:27,839
and we have a search cost which will be

336
00:12:27,839 --> 00:12:29,920
of 2 to the k over 2 up to polynomial

337
00:12:29,920 --> 00:12:31,839
factors

338
00:12:31,839 --> 00:12:33,279
now we can

339
00:12:33,279 --> 00:12:35,839
actually reduce the cost

340
00:12:35,839 --> 00:12:37,839
of the attack if

341
00:12:37,839 --> 00:12:40,079
the data cost of the attack if we guess

342
00:12:40,079 --> 00:12:43,200
part of the period this will allow us to

343
00:12:43,200 --> 00:12:45,279
reduce the number of classical queries

344
00:12:45,279 --> 00:12:47,440
at the expense of increasing the size of

345
00:12:47,440 --> 00:12:50,000
the third space so we have a nice

346
00:12:50,000 --> 00:12:52,399
trade-off where the setups become to the

347
00:12:52,399 --> 00:12:54,560
minus u and the cost of the start

348
00:12:54,560 --> 00:12:56,399
increase in k plus u

349
00:12:56,399 --> 00:12:59,920
over two so here we have the comparative

350
00:12:59,920 --> 00:13:01,839
time data trade-off between

351
00:13:01,839 --> 00:13:04,079
classical and quantum attack and we can

352
00:13:04,079 --> 00:13:06,480
see that we have a nice quadratic speed

353
00:13:06,480 --> 00:13:07,680
up for

354
00:13:07,680 --> 00:13:10,079
any um fixed amount

355
00:13:10,079 --> 00:13:11,120
of

356
00:13:11,120 --> 00:13:12,320
of data

357
00:13:12,320 --> 00:13:14,480
and we can remark that we have a quality

358
00:13:14,480 --> 00:13:16,639
speed up but we have slightly more than

359
00:13:16,639 --> 00:13:19,040
that because quantumly we are always

360
00:13:19,040 --> 00:13:20,399
polynomial in memory

361
00:13:20,399 --> 00:13:23,040
but classically we we can't always be

362
00:13:23,040 --> 00:13:25,040
polynomial in memories in some cases we

363
00:13:25,040 --> 00:13:27,440
need to to have some

364
00:13:27,440 --> 00:13:31,279
so now i will move to the new stuff

365
00:13:31,279 --> 00:13:33,040
which is how can we have larger gaps

366
00:13:33,040 --> 00:13:35,519
than that and for that i need to

367
00:13:35,519 --> 00:13:37,920
present the extended fx

368
00:13:37,920 --> 00:13:40,240
construction which is a variant of the

369
00:13:40,240 --> 00:13:42,480
tuxor cascade of construction that has

370
00:13:42,480 --> 00:13:44,800
already been studied in the past it is

371
00:13:44,800 --> 00:13:47,360
the same as the fx construction

372
00:13:47,360 --> 00:13:48,959
except that

373
00:13:48,959 --> 00:13:52,560
after it we add a second call to another

374
00:13:52,560 --> 00:13:55,680
block cipher whose inner key is the same

375
00:13:55,680 --> 00:13:58,480
as the middle block cyber

376
00:13:58,480 --> 00:14:00,079
and this construction has already been

377
00:14:00,079 --> 00:14:02,959
studied so we know it's classical

378
00:14:02,959 --> 00:14:06,320
security and as expected it's better

379
00:14:06,320 --> 00:14:08,240
than for the fx construction we still

380
00:14:08,240 --> 00:14:09,040
have

381
00:14:09,040 --> 00:14:11,839
the same time data trade-off as before

382
00:14:11,839 --> 00:14:13,680
but we have an additional constraint

383
00:14:13,680 --> 00:14:16,800
which is that the time can't be lower

384
00:14:16,800 --> 00:14:19,519
than k plus n over 2

385
00:14:19,519 --> 00:14:21,600
and we can have a look at what this mean

386
00:14:21,600 --> 00:14:23,519
in terms of attack

387
00:14:23,519 --> 00:14:26,000
and a matching attack for

388
00:14:26,000 --> 00:14:27,199
this bond

389
00:14:27,199 --> 00:14:28,160
is

390
00:14:28,160 --> 00:14:30,720
very similar to the fx attack the idea

391
00:14:30,720 --> 00:14:33,920
is that we want to apply the fx attack

392
00:14:33,920 --> 00:14:37,199
but before looking for a collision we

393
00:14:37,199 --> 00:14:39,519
first have to remove the second block

394
00:14:39,519 --> 00:14:42,240
cipher call so that means that for all

395
00:14:42,240 --> 00:14:44,959
candidate keys that we that we test we

396
00:14:44,959 --> 00:14:47,279
we first have to process

397
00:14:47,279 --> 00:14:50,000
all the queries we've done by inverting

398
00:14:50,000 --> 00:14:52,079
the second block ciphered call and then

399
00:14:52,079 --> 00:14:53,680
we look for a collision

400
00:14:53,680 --> 00:14:55,440
and this means

401
00:14:55,440 --> 00:14:56,959
that here for

402
00:14:56,959 --> 00:15:00,480
for this attack contrary to the effects

403
00:15:00,480 --> 00:15:02,560
attack we have to

404
00:15:02,560 --> 00:15:03,760
process

405
00:15:03,760 --> 00:15:06,959
the queries at least once per um

406
00:15:06,959 --> 00:15:10,880
his we test so we can no longer amortize

407
00:15:10,880 --> 00:15:13,680
the cost of the number of queries using

408
00:15:13,680 --> 00:15:14,959
the fact that we're testing a large

409
00:15:14,959 --> 00:15:17,440
number of keys this is why when when we

410
00:15:17,440 --> 00:15:18,720
look at the time

411
00:15:18,720 --> 00:15:19,920
data

412
00:15:19,920 --> 00:15:22,079
trade-off once we reach the birthday

413
00:15:22,079 --> 00:15:23,120
bond we

414
00:15:23,120 --> 00:15:25,199
we're stuck and we can do better

415
00:15:25,199 --> 00:15:26,639
better than that

416
00:15:26,639 --> 00:15:29,120
but now quantumly

417
00:15:29,120 --> 00:15:31,680
what can we do we have still something

418
00:15:31,680 --> 00:15:33,519
that's very similar to the fx

419
00:15:33,519 --> 00:15:35,680
construction so we want to apply simon's

420
00:15:35,680 --> 00:15:38,000
algorithm and here we

421
00:15:38,000 --> 00:15:40,959
we need a periodic function we can still

422
00:15:40,959 --> 00:15:44,160
construct a periodic function it will be

423
00:15:44,160 --> 00:15:47,199
almost the same as before except that we

424
00:15:47,199 --> 00:15:48,000
add

425
00:15:48,000 --> 00:15:49,839
the decryption of the second block

426
00:15:49,839 --> 00:15:52,839
cipher to obtain

427
00:15:52,839 --> 00:15:56,079
the the period we need so in order to be

428
00:15:56,079 --> 00:15:57,519
able to apply the offline simon's

429
00:15:57,519 --> 00:15:59,279
algorithm we need to have some

430
00:15:59,279 --> 00:16:02,480
additional properties to this function

431
00:16:02,480 --> 00:16:04,240
that is

432
00:16:04,240 --> 00:16:06,720
we need to be able to have one set of

433
00:16:06,720 --> 00:16:08,720
queries done once and for all

434
00:16:08,720 --> 00:16:11,920
and we can still do that here

435
00:16:11,920 --> 00:16:14,240
because we still have the secret part

436
00:16:14,240 --> 00:16:17,199
which is fixed and independent of

437
00:16:17,199 --> 00:16:20,079
the key guess zed and we have a part

438
00:16:20,079 --> 00:16:21,600
that's a purely

439
00:16:21,600 --> 00:16:23,759
publicly computable it's no longer the

440
00:16:23,759 --> 00:16:26,320
sum of two of two functions here we

441
00:16:26,320 --> 00:16:29,440
first need to reversibly transform the

442
00:16:29,440 --> 00:16:32,399
quantum query by composing through

443
00:16:32,399 --> 00:16:33,920
the decryption of the second block

444
00:16:33,920 --> 00:16:37,440
cipher call and then we add

445
00:16:37,440 --> 00:16:39,519
the encryption to the first block cipher

446
00:16:39,519 --> 00:16:42,880
call to recover the

447
00:16:42,880 --> 00:16:45,680
periodic function so with this

448
00:16:45,680 --> 00:16:48,240
additional decryption everything behave

449
00:16:48,240 --> 00:16:52,560
exactly as for the fx attack and so the

450
00:16:52,560 --> 00:16:55,920
cost is actually the same up to some

451
00:16:55,920 --> 00:16:58,720
polynomial factors and so if we have a

452
00:16:58,720 --> 00:17:00,399
look at the

453
00:17:00,399 --> 00:17:02,880
comparative classical and quantum

454
00:17:02,880 --> 00:17:05,679
security for extended fx what we can see

455
00:17:05,679 --> 00:17:06,640
is that

456
00:17:06,640 --> 00:17:08,319
as long as

457
00:17:08,319 --> 00:17:09,280
data

458
00:17:09,280 --> 00:17:10,959
the amount of data is below the birthday

459
00:17:10,959 --> 00:17:13,839
bound we're in the same case as for the

460
00:17:13,839 --> 00:17:15,760
fx construction we have a quadratic

461
00:17:15,760 --> 00:17:18,959
speed up but once we go above that then

462
00:17:18,959 --> 00:17:20,640
the quantum attack continues to get

463
00:17:20,640 --> 00:17:22,079
better when the classical attack is

464
00:17:22,079 --> 00:17:24,160
stuck hence in all this

465
00:17:24,160 --> 00:17:25,280
area

466
00:17:25,280 --> 00:17:27,839
we have a gap which is later which is

467
00:17:27,839 --> 00:17:31,360
greater than quadratic so the exact gap

468
00:17:31,360 --> 00:17:33,600
we reach depends on the amount of data

469
00:17:33,600 --> 00:17:34,480
and the

470
00:17:34,480 --> 00:17:35,600
relative

471
00:17:35,600 --> 00:17:39,039
size of k and n and the maximum gap that

472
00:17:39,039 --> 00:17:40,799
we can reach with this approach is

473
00:17:40,799 --> 00:17:43,760
actually 2.5 with

474
00:17:43,760 --> 00:17:46,480
the maximum amount of data on a key

475
00:17:46,480 --> 00:17:50,240
which is of size to n

476
00:17:50,400 --> 00:17:53,520
so now to to conclude

477
00:17:53,520 --> 00:17:54,880
on this attack

478
00:17:54,880 --> 00:17:58,320
uh we have studied the extended

479
00:17:58,320 --> 00:18:01,360
fx constructions which

480
00:18:01,360 --> 00:18:03,280
is a construction that actually do

481
00:18:03,280 --> 00:18:05,679
appear in some actual cryptosystems we

482
00:18:05,679 --> 00:18:08,160
have some um

483
00:18:08,160 --> 00:18:10,720
i just under mac we can be seen as an

484
00:18:10,720 --> 00:18:11,840
instance

485
00:18:11,840 --> 00:18:12,960
of that

486
00:18:12,960 --> 00:18:15,440
for these constructions the the gap we

487
00:18:15,440 --> 00:18:17,440
have is tight that is

488
00:18:17,440 --> 00:18:18,240
the

489
00:18:18,240 --> 00:18:20,400
we have a quantum lower bound with

490
00:18:20,400 --> 00:18:22,880
unlimited data for our attack and we

491
00:18:22,880 --> 00:18:23,840
match it

492
00:18:23,840 --> 00:18:25,679
with a river

493
00:18:25,679 --> 00:18:28,160
attack and this also shows that contrary

494
00:18:28,160 --> 00:18:30,400
to the classical case where extended

495
00:18:30,400 --> 00:18:33,280
effects actually offered an increase of

496
00:18:33,280 --> 00:18:34,480
security compared to the effects

497
00:18:34,480 --> 00:18:36,880
construction quantumly the second block

498
00:18:36,880 --> 00:18:38,799
safer call is actually useless because

499
00:18:38,799 --> 00:18:41,039
the security is the same

500
00:18:41,039 --> 00:18:43,120
now if we have a look

501
00:18:43,120 --> 00:18:45,200
at the at the attack this attack

502
00:18:45,200 --> 00:18:47,200
demonstrates that in symmetric

503
00:18:47,200 --> 00:18:49,360
cryptography we can have

504
00:18:49,360 --> 00:18:51,200
classical quantum speedups that are more

505
00:18:51,200 --> 00:18:54,559
than quadratic in the ideal models with

506
00:18:54,559 --> 00:18:56,880
classical queries only

507
00:18:56,880 --> 00:18:59,200
for the offline simon's algorithm we it

508
00:18:59,200 --> 00:19:01,679
is not possible to get a gap that's

509
00:19:01,679 --> 00:19:04,080
larger than 2.5

510
00:19:04,080 --> 00:19:06,559
and a nice implication of that is that

511
00:19:06,559 --> 00:19:08,960
it's often said that in order to apply

512
00:19:08,960 --> 00:19:10,960
hidden subgroup

513
00:19:10,960 --> 00:19:13,280
algorithm you need to have a strong

514
00:19:13,280 --> 00:19:15,120
algebraic structure

515
00:19:15,120 --> 00:19:17,520
and here the strong algebraic

516
00:19:17,520 --> 00:19:19,919
structure that allows us to obtain a

517
00:19:19,919 --> 00:19:22,160
meaningful application is only the

518
00:19:22,160 --> 00:19:25,600
source of a secret which is pretty neat

519
00:19:25,600 --> 00:19:28,320
so now i will finish my talk with a few

520
00:19:28,320 --> 00:19:29,679
open questions

521
00:19:29,679 --> 00:19:32,000
the first one is that

522
00:19:32,000 --> 00:19:34,880
we only have a quantum lower bound if we

523
00:19:34,880 --> 00:19:37,440
do not limit the amount of data we

524
00:19:37,440 --> 00:19:39,280
believe the attack is also tight with

525
00:19:39,280 --> 00:19:41,440
restricted data but

526
00:19:41,440 --> 00:19:44,000
this is left to be done

527
00:19:44,000 --> 00:19:46,480
the more that qualitative gap we've

528
00:19:46,480 --> 00:19:49,039
obtained require an amount of data which

529
00:19:49,039 --> 00:19:50,799
is pretty large greater than the

530
00:19:50,799 --> 00:19:52,799
birthday bound would be interesting to

531
00:19:52,799 --> 00:19:55,120
see if we can do better with lower an

532
00:19:55,120 --> 00:19:57,679
amount of data

533
00:19:57,679 --> 00:19:59,360
and finally

534
00:19:59,360 --> 00:20:01,520
the observation would be how far can we

535
00:20:01,520 --> 00:20:03,520
go are there some other approaches that

536
00:20:03,520 --> 00:20:06,320
would allow for even greater gap we

537
00:20:06,320 --> 00:20:09,600
conjecture that in this model it

538
00:20:09,600 --> 00:20:11,840
could be possible to go up to a cubic

539
00:20:11,840 --> 00:20:14,000
gap but this is

540
00:20:14,000 --> 00:20:16,080
an open question to this day thank you

541
00:20:16,080 --> 00:20:19,399
for your attention

542
00:20:23,360 --> 00:20:26,879
we do have time for some questions

543
00:20:29,120 --> 00:20:30,960
please walk up to the microphones

544
00:20:30,960 --> 00:20:32,240
meanwhile

545
00:20:32,240 --> 00:20:34,159
you've posted the questions yourself

546
00:20:34,159 --> 00:20:36,400
there yeah because this was actually my

547
00:20:36,400 --> 00:20:37,600
question

548
00:20:37,600 --> 00:20:39,679
that i also came up with

549
00:20:39,679 --> 00:20:41,760
how will i so let me rephrase how likely

550
00:20:41,760 --> 00:20:44,400
do you see it that we can go from 2.5 to

551
00:20:44,400 --> 00:20:47,520
3 in the exponent well we would need

552
00:20:47,520 --> 00:20:51,039
another algorithm than simon's algorithm

553
00:20:51,039 --> 00:20:51,919
so

554
00:20:51,919 --> 00:20:54,559
it would be hard

555
00:20:54,559 --> 00:20:56,720
what would you would need in fact is a

556
00:20:56,720 --> 00:20:58,720
quantum polynomial time algorithm or

557
00:20:58,720 --> 00:21:00,960
subexponential whose classical

558
00:21:00,960 --> 00:21:02,480
equivalent

559
00:21:02,480 --> 00:21:04,240
has cost 2 to the n

560
00:21:04,240 --> 00:21:05,840
so if you have something that reduces to

561
00:21:05,840 --> 00:21:08,960
collision finding like shore or simon

562
00:21:08,960 --> 00:21:11,120
i think you can't reach that so you need

563
00:21:11,120 --> 00:21:12,400
something else

564
00:21:12,400 --> 00:21:13,760
which

565
00:21:13,760 --> 00:21:17,200
is and it's unclear well

566
00:21:17,200 --> 00:21:19,120
we we can reasonably think that such

567
00:21:19,120 --> 00:21:20,960
problem exists but it's unclear that it

568
00:21:20,960 --> 00:21:22,640
would have a cryptographic application

569
00:21:22,640 --> 00:21:25,280
ah okay

570
00:21:29,280 --> 00:21:30,799
question

571
00:21:30,799 --> 00:21:31,600
no

572
00:21:31,600 --> 00:21:34,320
well then we thank you again and move to

573
00:21:34,320 --> 00:21:37,639
the next talk

