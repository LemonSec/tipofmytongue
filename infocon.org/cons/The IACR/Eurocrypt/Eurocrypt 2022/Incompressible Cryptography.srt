1
00:00:01,520 --> 00:00:03,760
hello everyone my name is jashin guan

2
00:00:03,760 --> 00:00:05,279
and in this video i'll be talking about

3
00:00:05,279 --> 00:00:07,759
our work incompressible cryptography

4
00:00:07,759 --> 00:00:09,599
this is a joint work with daniel wicks

5
00:00:09,599 --> 00:00:11,440
and mark zandry

6
00:00:11,440 --> 00:00:13,120
so to begin our talk we'll take a look

7
00:00:13,120 --> 00:00:16,320
at several motivating examples so let's

8
00:00:16,320 --> 00:00:17,840
say we have our favorite friends alice

9
00:00:17,840 --> 00:00:18,800
and bob

10
00:00:18,800 --> 00:00:21,039
and uh they're not doing something crazy

11
00:00:21,039 --> 00:00:22,320
they're just doing a very simple

12
00:00:22,320 --> 00:00:24,160
protocol so what alice does is sends

13
00:00:24,160 --> 00:00:27,039
over an encrypted document over to bob

14
00:00:27,039 --> 00:00:30,000
and here comes our eavesdropper eve who

15
00:00:30,000 --> 00:00:32,159
doesn't see anything super malicious

16
00:00:32,159 --> 00:00:34,719
what if does is simply eavesdrops on the

17
00:00:34,719 --> 00:00:37,120
channel and makes a copy of the

18
00:00:37,120 --> 00:00:40,000
encrypted document or the cipher text

19
00:00:40,000 --> 00:00:41,360
and then

20
00:00:41,360 --> 00:00:43,200
at a later point of time

21
00:00:43,200 --> 00:00:46,079
maybe a month later or a year later or

22
00:00:46,079 --> 00:00:47,920
maybe 20 years later

23
00:00:47,920 --> 00:00:50,960
eve is somehow able to get hold of the

24
00:00:50,960 --> 00:00:54,160
private key used for the conversation

25
00:00:54,160 --> 00:00:56,320
so eve is able to do this maybe through

26
00:00:56,320 --> 00:00:58,640
a security breach or

27
00:00:58,640 --> 00:01:01,039
maybe through some social engineering or

28
00:01:01,039 --> 00:01:02,960
maybe even by just

29
00:01:02,960 --> 00:01:05,438
going directly and interrogating bob

30
00:01:05,438 --> 00:01:07,680
anyhow eve gets hold of the private key

31
00:01:07,680 --> 00:01:09,920
and then what you can do is to simply

32
00:01:09,920 --> 00:01:13,040
use this valid private key to decrypt

33
00:01:13,040 --> 00:01:15,520
the stored ciphertext and therefore is

34
00:01:15,520 --> 00:01:17,520
able to retrieve the original message

35
00:01:17,520 --> 00:01:19,119
sent by alice

36
00:01:19,119 --> 00:01:21,759
so to prevent against this we will we

37
00:01:21,759 --> 00:01:23,439
will need something we call forward

38
00:01:23,439 --> 00:01:25,600
secrecy essentially saying that a

39
00:01:25,600 --> 00:01:28,080
private key leaked in the future should

40
00:01:28,080 --> 00:01:30,079
not compromise the security of the

41
00:01:30,079 --> 00:01:32,640
messages that are sent before

42
00:01:32,640 --> 00:01:34,880
however to achieve forward secrecy we

43
00:01:34,880 --> 00:01:36,400
would either need the protocol to

44
00:01:36,400 --> 00:01:38,479
contain multiple rounds or we will

45
00:01:38,479 --> 00:01:41,280
require alice and bob to be constantly

46
00:01:41,280 --> 00:01:42,960
updating their keys

47
00:01:42,960 --> 00:01:45,119
both of these could be undesirable under

48
00:01:45,119 --> 00:01:48,000
many scenarios

49
00:01:48,159 --> 00:01:51,119
similarly consider this scenario alice

50
00:01:51,119 --> 00:01:52,880
again is talking over to bob by sending

51
00:01:52,880 --> 00:01:55,119
over some encrypted document and comes

52
00:01:55,119 --> 00:01:56,799
if dropper eve who makes a copy of the

53
00:01:56,799 --> 00:01:58,479
encrypted document

54
00:01:58,479 --> 00:02:01,040
but then at a later time when eve is

55
00:02:01,040 --> 00:02:03,200
asking bob let's say eve actually

56
00:02:03,200 --> 00:02:05,360
interrogates bobby in this in this case

57
00:02:05,360 --> 00:02:07,600
and interrogates bob for the key what

58
00:02:07,600 --> 00:02:10,720
bob can do is instead of providing the

59
00:02:10,720 --> 00:02:12,879
actual private key using the in the

60
00:02:12,879 --> 00:02:15,599
conversation bob is able to provide a

61
00:02:15,599 --> 00:02:18,480
fake private key which nevertheless

62
00:02:18,480 --> 00:02:19,920
causes the

63
00:02:19,920 --> 00:02:22,000
the message to because it's the cipher

64
00:02:22,000 --> 00:02:24,480
text to decrypt but this time

65
00:02:24,480 --> 00:02:26,400
to a fake message let's say to a cute

66
00:02:26,400 --> 00:02:27,920
picture of a cat instead of the super

67
00:02:27,920 --> 00:02:29,840
secret message before

68
00:02:29,840 --> 00:02:32,959
so but if he has no way of telling

69
00:02:32,959 --> 00:02:34,640
whether bob is providing the actual

70
00:02:34,640 --> 00:02:36,400
private key or

71
00:02:36,400 --> 00:02:39,519
the fake private key

72
00:02:39,519 --> 00:02:41,280
so this is what we call receiver

73
00:02:41,280 --> 00:02:43,760
deniable encryption and in fact it has

74
00:02:43,760 --> 00:02:45,840
been shown that receiver deniable

75
00:02:45,840 --> 00:02:48,560
encryption is impossible in the standard

76
00:02:48,560 --> 00:02:51,200
model

77
00:02:51,200 --> 00:02:53,440
in the last example let's say alice is

78
00:02:53,440 --> 00:02:55,920
holding a party at our house

79
00:02:55,920 --> 00:02:58,080
on a saturday night and is sending over

80
00:02:58,080 --> 00:03:00,640
a party invitation over to bob but in

81
00:03:00,640 --> 00:03:02,879
order to convince bob that this this

82
00:03:02,879 --> 00:03:05,120
invitation actually comes from alice

83
00:03:05,120 --> 00:03:07,920
what alice does is attach a signature

84
00:03:07,920 --> 00:03:09,680
on the message stating that there is a

85
00:03:09,680 --> 00:03:10,959
party tonight

86
00:03:10,959 --> 00:03:13,040
and again comes our eve dropper eve who

87
00:03:13,040 --> 00:03:15,040
eavesdrops on the channel and makes a

88
00:03:15,040 --> 00:03:17,680
copy of the message together with the

89
00:03:17,680 --> 00:03:19,440
signature

90
00:03:19,440 --> 00:03:21,840
and then at a later point of time say

91
00:03:21,840 --> 00:03:24,159
it's a tuesday night where everybody is

92
00:03:24,159 --> 00:03:26,480
busy working or resting

93
00:03:26,480 --> 00:03:28,799
if well what it does is simply replay

94
00:03:28,799 --> 00:03:31,280
the message together with the signature

95
00:03:31,280 --> 00:03:32,640
over to bob

96
00:03:32,640 --> 00:03:34,400
from bob's point of view

97
00:03:34,400 --> 00:03:36,319
he receives a message from alice saying

98
00:03:36,319 --> 00:03:38,560
there's a party on tuesday night and

99
00:03:38,560 --> 00:03:41,760
there is in in fact a valid signature on

100
00:03:41,760 --> 00:03:43,680
the message leading bob to believe there

101
00:03:43,680 --> 00:03:45,680
is actually a party and going to alice's

102
00:03:45,680 --> 00:03:47,360
place only to find out there's no party

103
00:03:47,360 --> 00:03:48,480
at all

104
00:03:48,480 --> 00:03:50,560
so this is what we call a replay attack

105
00:03:50,560 --> 00:03:53,519
for signatures and it turns out that to

106
00:03:53,519 --> 00:03:55,680
prevent against replay attacks

107
00:03:55,680 --> 00:03:56,959
we would either need to make the

108
00:03:56,959 --> 00:03:58,879
protocol multiple rounds

109
00:03:58,879 --> 00:04:00,879
therefore requiring interaction between

110
00:04:00,879 --> 00:04:03,280
the between the two parties or we will

111
00:04:03,280 --> 00:04:05,360
require alice and bob to maintain a

112
00:04:05,360 --> 00:04:07,680
synchronized clock or we will require

113
00:04:07,680 --> 00:04:10,080
that bob here the verifier to maintain a

114
00:04:10,080 --> 00:04:12,720
state again all of these three scenarios

115
00:04:12,720 --> 00:04:15,040
could be could be undesirable in many

116
00:04:15,040 --> 00:04:17,438
cases

117
00:04:18,079 --> 00:04:20,079
so notice that in all of the three

118
00:04:20,079 --> 00:04:22,639
motivating examples before the adversary

119
00:04:22,639 --> 00:04:24,880
needs to store the

120
00:04:24,880 --> 00:04:27,120
cipher text or the signature

121
00:04:27,120 --> 00:04:28,880
so here's the natural question what if

122
00:04:28,880 --> 00:04:31,040
the adversary cannot simply store the

123
00:04:31,040 --> 00:04:32,639
ciphertext or the signature what will

124
00:04:32,639 --> 00:04:35,919
happen in in these cases

125
00:04:35,919 --> 00:04:38,000
so in the first two examples alice sends

126
00:04:38,000 --> 00:04:40,000
over an encrypted document over to bob

127
00:04:40,000 --> 00:04:42,080
and comes the eavesdropper eve who tries

128
00:04:42,080 --> 00:04:44,160
to make a copy of the of the encrypted

129
00:04:44,160 --> 00:04:46,880
document but let's say eve cannot

130
00:04:46,880 --> 00:04:48,320
store the

131
00:04:48,320 --> 00:04:50,080
actual encrypted document

132
00:04:50,080 --> 00:04:52,240
and then at a later time remember eve is

133
00:04:52,240 --> 00:04:55,280
gonna interrogate bob for a private key

134
00:04:55,280 --> 00:04:57,360
but now with the private key there is

135
00:04:57,360 --> 00:04:59,440
actually no message for the for the eve

136
00:04:59,440 --> 00:05:02,080
shopper to decrypt so there's nothing

137
00:05:02,080 --> 00:05:04,000
that the ebstrapper can do even with the

138
00:05:04,000 --> 00:05:06,000
actual private key and therefore we

139
00:05:06,000 --> 00:05:08,800
trivially have forward secrecy

140
00:05:08,800 --> 00:05:10,560
in the meantime notice that there is

141
00:05:10,560 --> 00:05:12,320
even no message for the each software

142
00:05:12,320 --> 00:05:15,039
eve to decrypt so this scheme is also

143
00:05:15,039 --> 00:05:19,280
vacuously receiver deniable

144
00:05:20,320 --> 00:05:23,520
in the last example alice sends over a

145
00:05:23,520 --> 00:05:25,440
message together with a valid signature

146
00:05:25,440 --> 00:05:27,840
over to bob and the eavesdropper tries

147
00:05:27,840 --> 00:05:30,240
to make a copy of the message together

148
00:05:30,240 --> 00:05:32,320
with the signature let's say the

149
00:05:32,320 --> 00:05:34,000
eavesdropper cannot store the actual

150
00:05:34,000 --> 00:05:36,400
signature but only the message and then

151
00:05:36,400 --> 00:05:39,360
at a later time when eve tries to

152
00:05:39,360 --> 00:05:41,680
produce the replay attack by resending

153
00:05:41,680 --> 00:05:43,600
the message and the signature it can

154
00:05:43,600 --> 00:05:45,120
only send a message without the

155
00:05:45,120 --> 00:05:47,039
signature and therefore it fails to

156
00:05:47,039 --> 00:05:48,960
convince bob that the message actually

157
00:05:48,960 --> 00:05:51,680
comes from alice

158
00:05:51,680 --> 00:05:53,680
so how exactly do you achieve that the

159
00:05:53,680 --> 00:05:55,919
absolute cannot store the cipher text or

160
00:05:55,919 --> 00:05:57,440
the signatures

161
00:05:57,440 --> 00:05:59,600
well the key idea is that let's say

162
00:05:59,600 --> 00:06:01,759
we're encrypting a very small message

163
00:06:01,759 --> 00:06:03,680
and the key idea here is that we

164
00:06:03,680 --> 00:06:06,080
manually blow up the small message into

165
00:06:06,080 --> 00:06:08,800
a huge cipher text or a signature so

166
00:06:08,800 --> 00:06:10,800
that its size is too large for the app

167
00:06:10,800 --> 00:06:13,199
story to store

168
00:06:13,199 --> 00:06:15,440
in fact this idea was used in the

169
00:06:15,440 --> 00:06:18,400
previous paper by guan and xendre called

170
00:06:18,400 --> 00:06:19,919
disappearing cryptography in the

171
00:06:19,919 --> 00:06:22,800
boundary storage model

172
00:06:22,800 --> 00:06:24,639
so that paper is set in the boundary

173
00:06:24,639 --> 00:06:27,759
storage model which allows the paper to

174
00:06:27,759 --> 00:06:29,759
restrict the adversary's ability to

175
00:06:29,759 --> 00:06:32,400
store the cipher text or the signatures

176
00:06:32,400 --> 00:06:36,240
so what is the boundary search model

177
00:06:36,240 --> 00:06:38,319
well traditionally in cryptography when

178
00:06:38,319 --> 00:06:40,080
we talk about an adversary we imagine

179
00:06:40,080 --> 00:06:42,560
that the absolute is time bounded so the

180
00:06:42,560 --> 00:06:44,400
absolute needs to perform the attack

181
00:06:44,400 --> 00:06:46,880
within a polynomial amount of time

182
00:06:46,880 --> 00:06:49,039
and discrete parameter n

183
00:06:49,039 --> 00:06:50,639
however in the boundary storage model

184
00:06:50,639 --> 00:06:52,639
which was first put forward by ud maura

185
00:06:52,639 --> 00:06:55,520
in 1992 the average rate can take as

186
00:06:55,520 --> 00:06:58,080
long as it wants we don't impose any

187
00:06:58,080 --> 00:07:00,800
time limits on the adversary however we

188
00:07:00,800 --> 00:07:03,039
bound the amount of memory bits that the

189
00:07:03,039 --> 00:07:04,639
atmosphere can use

190
00:07:04,639 --> 00:07:06,479
throughout the entire attack so

191
00:07:06,479 --> 00:07:08,080
throughout the entire attack the app

192
00:07:08,080 --> 00:07:11,360
store can only use up to pfn memory bits

193
00:07:11,360 --> 00:07:13,440
where p is a fixed polynomial on the

194
00:07:13,440 --> 00:07:15,199
security parameter n

195
00:07:15,199 --> 00:07:17,520
concretely we can imagine p being

196
00:07:17,520 --> 00:07:19,120
something like n squared where the

197
00:07:19,120 --> 00:07:20,960
average 3 needs to perform the attack

198
00:07:20,960 --> 00:07:23,440
within space less than n squared whereas

199
00:07:23,440 --> 00:07:26,720
the protocol is still secure for

200
00:07:26,720 --> 00:07:29,120
honest parties which only uses some

201
00:07:29,120 --> 00:07:32,319
memory around the level of n

202
00:07:32,319 --> 00:07:34,400
so there's a inherent quadratic gap

203
00:07:34,400 --> 00:07:36,240
between the adversary space and the

204
00:07:36,240 --> 00:07:39,120
honest user space

205
00:07:39,120 --> 00:07:41,280
so the disappearing cryptography paper

206
00:07:41,280 --> 00:07:44,160
defines a disappearing public encryption

207
00:07:44,160 --> 00:07:46,479
which is defined in the following way

208
00:07:46,479 --> 00:07:49,280
so this is a game played between an

209
00:07:49,280 --> 00:07:51,360
adversary and a challenger it is very

210
00:07:51,360 --> 00:07:54,000
much unlike the stereo model pke game so

211
00:07:54,000 --> 00:07:55,360
the challenger is going to sample a

212
00:07:55,360 --> 00:07:57,680
public key private key pair together

213
00:07:57,680 --> 00:07:59,840
with a challenge bit b

214
00:07:59,840 --> 00:08:01,599
and sends over the public key over to

215
00:08:01,599 --> 00:08:04,080
the absolute and the absolutely sends

216
00:08:04,080 --> 00:08:07,280
over to challenge messages m0 and m1 and

217
00:08:07,280 --> 00:08:09,599
receives back an encryption of a random

218
00:08:09,599 --> 00:08:12,400
message depending on the challenge bit b

219
00:08:12,400 --> 00:08:14,080
in the end the absorber needs to make a

220
00:08:14,080 --> 00:08:15,680
guess for the bit b

221
00:08:15,680 --> 00:08:17,919
and the absolute wings if the guess is

222
00:08:17,919 --> 00:08:20,240
correct so this is just a standard model

223
00:08:20,240 --> 00:08:22,479
pke game and we'll take a look at how it

224
00:08:22,479 --> 00:08:25,840
is adapted into a disappearing pke

225
00:08:25,840 --> 00:08:27,520
security game

226
00:08:27,520 --> 00:08:29,840
so first of all since we're moving into

227
00:08:29,840 --> 00:08:31,759
the boundary storage model we require

228
00:08:31,759 --> 00:08:33,599
that the adversary

229
00:08:33,599 --> 00:08:36,000
maintains a space less than or equal to

230
00:08:36,000 --> 00:08:38,799
s for a fixed memory bound s notice that

231
00:08:38,799 --> 00:08:42,240
this base constraint is in addition to

232
00:08:42,240 --> 00:08:44,159
the computational assumptions of the

233
00:08:44,159 --> 00:08:46,800
adversary so disappearing cryptography

234
00:08:46,800 --> 00:08:47,680
paper

235
00:08:47,680 --> 00:08:50,240
assumes that the abstract is both

236
00:08:50,240 --> 00:08:52,399
space-bounded and

237
00:08:52,399 --> 00:08:54,320
time-bounded so here the atmosphere is

238
00:08:54,320 --> 00:08:57,680
bounded by space s and also bounded by a

239
00:08:57,680 --> 00:09:00,240
polynomial running time

240
00:09:00,240 --> 00:09:02,880
so with this bounded space what we can

241
00:09:02,880 --> 00:09:05,519
do is we imagine that the cipher tags

242
00:09:05,519 --> 00:09:07,760
are so large that they exceed the

243
00:09:07,760 --> 00:09:10,080
adversary storage bound

244
00:09:10,080 --> 00:09:10,959
and then

245
00:09:10,959 --> 00:09:12,880
after the apps receive the cipher text

246
00:09:12,880 --> 00:09:15,519
all we can actually do is send over the

247
00:09:15,519 --> 00:09:17,680
private key over to the absolute before

248
00:09:17,680 --> 00:09:20,480
the adversary makes its final guess

249
00:09:20,480 --> 00:09:22,000
this is actually okay because if you

250
00:09:22,000 --> 00:09:24,480
think about our motivating examples even

251
00:09:24,480 --> 00:09:26,480
if the adversary is given the private

252
00:09:26,480 --> 00:09:28,640
key there is nothing that the app store

253
00:09:28,640 --> 00:09:30,320
can do because

254
00:09:30,320 --> 00:09:36,040
it cannot store the the cipher texts

255
00:09:36,320 --> 00:09:38,880
so a key difference between this work

256
00:09:38,880 --> 00:09:42,000
incompressible cryptography versus

257
00:09:42,000 --> 00:09:43,760
this previous work disappearing

258
00:09:43,760 --> 00:09:46,160
cryptography is actually how the memory

259
00:09:46,160 --> 00:09:50,160
bound is imposed on the adversary

260
00:09:50,160 --> 00:09:53,200
imagine the following two adversaries

261
00:09:53,200 --> 00:09:55,600
so adversary one when alice is sending

262
00:09:55,600 --> 00:09:58,320
over the cipher text over to bob would

263
00:09:58,320 --> 00:10:00,080
just write down all of the bits being

264
00:10:00,080 --> 00:10:02,880
sent by alice and then after the

265
00:10:02,880 --> 00:10:04,959
transmission has ended

266
00:10:04,959 --> 00:10:07,440
computes a function with a small output

267
00:10:07,440 --> 00:10:09,120
which then essentially allows the

268
00:10:09,120 --> 00:10:11,440
atmosphere to compress the ciphertext

269
00:10:11,440 --> 00:10:13,600
down to a smaller state and then the

270
00:10:13,600 --> 00:10:15,200
apps reaches maintains that smaller

271
00:10:15,200 --> 00:10:16,079
state

272
00:10:16,079 --> 00:10:18,079
throughout the entire time until a

273
00:10:18,079 --> 00:10:20,320
security breach happens

274
00:10:20,320 --> 00:10:22,079
on the right hand side we can imagine

275
00:10:22,079 --> 00:10:23,920
absolute two which simply writes down a

276
00:10:23,920 --> 00:10:26,640
bit as the transmission goes on and then

277
00:10:26,640 --> 00:10:28,240
just maintains that amount of memory

278
00:10:28,240 --> 00:10:30,240
throughout the entire time

279
00:10:30,240 --> 00:10:32,240
now if we were to set the memory bound

280
00:10:32,240 --> 00:10:34,640
to be somewhere between the highest

281
00:10:34,640 --> 00:10:37,120
point of adversary 1 and the memory used

282
00:10:37,120 --> 00:10:38,800
by f32

283
00:10:38,800 --> 00:10:41,360
then the absolute one on the left

284
00:10:41,360 --> 00:10:42,160
is

285
00:10:42,160 --> 00:10:44,240
actually not captured by this boundary

286
00:10:44,240 --> 00:10:46,320
storage model with the bound s because

287
00:10:46,320 --> 00:10:48,000
the boundary storage model required the

288
00:10:48,000 --> 00:10:50,640
adversary to be space bounded throughout

289
00:10:50,640 --> 00:10:52,399
the entire game

290
00:10:52,399 --> 00:10:54,399
however we think that the the atmosphere

291
00:10:54,399 --> 00:10:56,480
one on the left is actually a quite

292
00:10:56,480 --> 00:10:58,079
valid attack because if you think about

293
00:10:58,079 --> 00:11:01,839
it having a high amount of memory in a

294
00:11:01,839 --> 00:11:03,600
very short amount of time is actually

295
00:11:03,600 --> 00:11:05,120
not that intimidating it's actually

296
00:11:05,120 --> 00:11:07,760
quite achievable however requiring to

297
00:11:07,760 --> 00:11:09,839
maintain a moderate amount of memory

298
00:11:09,839 --> 00:11:12,800
throughout a an extended period of time

299
00:11:12,800 --> 00:11:15,279
this seems more challenging than the

300
00:11:15,279 --> 00:11:16,640
previous one

301
00:11:16,640 --> 00:11:20,160
so as a real life example for example if

302
00:11:20,160 --> 00:11:22,560
if you ask me to store 10 terabytes of

303
00:11:22,560 --> 00:11:23,760
data

304
00:11:23,760 --> 00:11:26,320
for only 10 minutes well i'm happy to do

305
00:11:26,320 --> 00:11:28,160
that because i i personally have 10

306
00:11:28,160 --> 00:11:30,079
terabytes of storage at home and i'm

307
00:11:30,079 --> 00:11:32,079
happy to devote that 10 terabytes only

308
00:11:32,079 --> 00:11:35,440
for 10 minutes however if you ask me to

309
00:11:35,440 --> 00:11:38,800
store say 2 terabytes of data for 20

310
00:11:38,800 --> 00:11:39,760
years

311
00:11:39,760 --> 00:11:41,440
that seems much more intimidating

312
00:11:41,440 --> 00:11:43,440
because i need to maintain that two

313
00:11:43,440 --> 00:11:46,320
terabytes throughout the 20 years this

314
00:11:46,320 --> 00:11:48,000
extended period of time and who knows

315
00:11:48,000 --> 00:11:49,600
what's going to happen i mean personally

316
00:11:49,600 --> 00:11:50,959
i might be moving and then just throw

317
00:11:50,959 --> 00:11:53,040
away the hard disk and i will fail the

318
00:11:53,040 --> 00:11:54,320
game so

319
00:11:54,320 --> 00:11:56,240
essentially what we want to want here is

320
00:11:56,240 --> 00:11:58,000
that we want to capture these

321
00:11:58,000 --> 00:11:59,279
adversaries

322
00:11:59,279 --> 00:12:01,279
that uses a large chunk of memory when

323
00:12:01,279 --> 00:12:03,120
the transmission is going on but then

324
00:12:03,120 --> 00:12:05,279
compresses down to a smaller state for

325
00:12:05,279 --> 00:12:08,000
long-term storage and hence our naming

326
00:12:08,000 --> 00:12:11,600
incompressible cryptography

327
00:12:11,600 --> 00:12:12,399
so

328
00:12:12,399 --> 00:12:14,320
now finally we're able to get back to

329
00:12:14,320 --> 00:12:16,480
our to this work incompressible

330
00:12:16,480 --> 00:12:17,680
cryptography

331
00:12:17,680 --> 00:12:19,680
so we'll take a look at

332
00:12:19,680 --> 00:12:22,160
how we actually define incompressible

333
00:12:22,160 --> 00:12:24,160
public encryption how it's different

334
00:12:24,160 --> 00:12:27,920
from disappearing public encryption

335
00:12:27,920 --> 00:12:30,399
here on this page we'll produce the

336
00:12:30,399 --> 00:12:32,720
disappearing pke security game and we'll

337
00:12:32,720 --> 00:12:35,360
take a look at how we would modify it to

338
00:12:35,360 --> 00:12:37,760
become the incompressible pke security

339
00:12:37,760 --> 00:12:38,800
gate

340
00:12:38,800 --> 00:12:40,560
so the first thing that we do is that

341
00:12:40,560 --> 00:12:42,480
we're going to remove the storage bound

342
00:12:42,480 --> 00:12:44,079
for the adversary

343
00:12:44,079 --> 00:12:46,160
so the absolute is no longer bounded by

344
00:12:46,160 --> 00:12:48,639
the space s throughout the entire game

345
00:12:48,639 --> 00:12:50,639
now instead we would use a pair of

346
00:12:50,639 --> 00:12:52,880
adversaries which cannot communicate

347
00:12:52,880 --> 00:12:55,360
between them so there is no private

348
00:12:55,360 --> 00:12:57,760
channel between the adversaries

349
00:12:57,760 --> 00:13:00,000
and the first adversaries gets the

350
00:13:00,000 --> 00:13:01,680
public key sends over the challenge

351
00:13:01,680 --> 00:13:04,160
messages and receives the cipher text

352
00:13:04,160 --> 00:13:05,680
whereas the second absolutely receives

353
00:13:05,680 --> 00:13:07,440
the private key and makes the actual

354
00:13:07,440 --> 00:13:08,880
guess

355
00:13:08,880 --> 00:13:10,000
so

356
00:13:10,000 --> 00:13:11,839
after the first adversary has received

357
00:13:11,839 --> 00:13:13,440
the cipher text

358
00:13:13,440 --> 00:13:15,200
the first absolute need to compress it

359
00:13:15,200 --> 00:13:17,920
down to a state st

360
00:13:17,920 --> 00:13:20,959
such that the size of the state is

361
00:13:20,959 --> 00:13:23,920
within the memory bound s

362
00:13:23,920 --> 00:13:26,000
and then when the second adversary is

363
00:13:26,000 --> 00:13:28,720
provided a private key it is also given

364
00:13:28,720 --> 00:13:30,000
that state

365
00:13:30,000 --> 00:13:31,680
together with the public key of the

366
00:13:31,680 --> 00:13:34,000
encryption of the whole scheme together

367
00:13:34,000 --> 00:13:35,920
with some auxiliary input so what is

368
00:13:35,920 --> 00:13:38,160
this auxiliary input is sent over by the

369
00:13:38,160 --> 00:13:39,760
by the first adversary at the beginning

370
00:13:39,760 --> 00:13:41,360
of the experiment

371
00:13:41,360 --> 00:13:43,680
and you can think about it as containing

372
00:13:43,680 --> 00:13:45,760
the the shared randomness for the two

373
00:13:45,760 --> 00:13:47,440
adversaries if the atmospheres are not

374
00:13:47,440 --> 00:13:49,600
uniform then yeah we can do this without

375
00:13:49,600 --> 00:13:51,760
the auxiliary input at all

376
00:13:51,760 --> 00:13:54,079
so notice that this game actually

377
00:13:54,079 --> 00:13:56,000
captures the idea that

378
00:13:56,000 --> 00:13:58,160
the apps will receive the cipher text

379
00:13:58,160 --> 00:14:00,639
and then can do whatever it wants using

380
00:14:00,639 --> 00:14:02,720
however much space it wants but in the

381
00:14:02,720 --> 00:14:05,279
end it needs to compress down to a state

382
00:14:05,279 --> 00:14:09,199
st that is used for long-term storage

383
00:14:09,199 --> 00:14:12,240
right in fact

384
00:14:12,240 --> 00:14:14,800
this definition this incompressible pke

385
00:14:14,800 --> 00:14:16,639
security definition

386
00:14:16,639 --> 00:14:19,360
the security of the incompressible pke

387
00:14:19,360 --> 00:14:21,760
security actually implies

388
00:14:21,760 --> 00:14:22,720
a

389
00:14:22,720 --> 00:14:25,680
disappearing pke security notice that it

390
00:14:25,680 --> 00:14:27,680
is only security wise we will mention in

391
00:14:27,680 --> 00:14:30,000
the next few next few slides uh

392
00:14:30,000 --> 00:14:31,440
functionality-wise they're still

393
00:14:31,440 --> 00:14:33,440
different

394
00:14:33,440 --> 00:14:35,519
okay so in our work we show two

395
00:14:35,519 --> 00:14:37,760
constructions of a

396
00:14:37,760 --> 00:14:40,000
incompressible encryption and in fact

397
00:14:40,000 --> 00:14:41,600
they have some additional features other

398
00:14:41,600 --> 00:14:43,519
than the security requirement on the

399
00:14:43,519 --> 00:14:44,720
previous slide

400
00:14:44,720 --> 00:14:46,320
one of the features is called low space

401
00:14:46,320 --> 00:14:49,040
streaming so recall that

402
00:14:49,040 --> 00:14:51,040
in the disappearing cryptography it is

403
00:14:51,040 --> 00:14:53,199
set in the boundary storage model and

404
00:14:53,199 --> 00:14:54,639
remember that in the boundary storage

405
00:14:54,639 --> 00:14:57,120
model we require that the honest parties

406
00:14:57,120 --> 00:14:58,959
they should able to run the protocol

407
00:14:58,959 --> 00:15:01,600
with a memory bound somewhat lower than

408
00:15:01,600 --> 00:15:03,279
the adversaries

409
00:15:03,279 --> 00:15:05,600
however when we move over to the

410
00:15:05,600 --> 00:15:07,519
incompressible encryption we're moving

411
00:15:07,519 --> 00:15:09,519
away from the boundary search model so

412
00:15:09,519 --> 00:15:11,839
in incompressible encryption scheme the

413
00:15:11,839 --> 00:15:13,279
honest part is

414
00:15:13,279 --> 00:15:14,720
to run the honest parties you would

415
00:15:14,720 --> 00:15:18,399
actually could require high space

416
00:15:18,399 --> 00:15:20,880
therefore a incompressible encryption

417
00:15:20,880 --> 00:15:23,760
scheme might not be a disappearing

418
00:15:23,760 --> 00:15:26,000
encryption scheme because the honest

419
00:15:26,000 --> 00:15:29,040
parties they will require high space

420
00:15:29,040 --> 00:15:30,480
however we show that one of our

421
00:15:30,480 --> 00:15:32,480
constructions actually supports this low

422
00:15:32,480 --> 00:15:34,639
street low space streaming feature such

423
00:15:34,639 --> 00:15:36,880
that the encryption and decryption

424
00:15:36,880 --> 00:15:38,480
together with signature and verify for

425
00:15:38,480 --> 00:15:40,880
an incompressible signature scheme they

426
00:15:40,880 --> 00:15:43,199
are actually be able to run in a low

427
00:15:43,199 --> 00:15:45,600
space and therefore if we have an

428
00:15:45,600 --> 00:15:47,920
incompressible public encryption scheme

429
00:15:47,920 --> 00:15:49,839
the security of which already implies

430
00:15:49,839 --> 00:15:51,199
the security of a

431
00:15:51,199 --> 00:15:54,480
of a disappearing pke if we add on a low

432
00:15:54,480 --> 00:15:56,959
space streaming feature to it and then

433
00:15:56,959 --> 00:15:59,600
we will simply get a disappearing pke

434
00:15:59,600 --> 00:16:01,680
scheme

435
00:16:01,680 --> 00:16:03,759
another feature that we have is called

436
00:16:03,759 --> 00:16:06,160
rate 1 incompressible encryption

437
00:16:06,160 --> 00:16:08,000
so what is the rate so the rate is

438
00:16:08,000 --> 00:16:10,160
defined as the size of the message over

439
00:16:10,160 --> 00:16:12,880
the size of the cipher text so

440
00:16:12,880 --> 00:16:14,959
for a low rate pke we will take a very

441
00:16:14,959 --> 00:16:17,120
small message and we will blow it up to

442
00:16:17,120 --> 00:16:19,279
a huge cipher text which exceeds the

443
00:16:19,279 --> 00:16:20,880
absolute storage bound

444
00:16:20,880 --> 00:16:22,000
now let's think about the other way

445
00:16:22,000 --> 00:16:24,000
around let's say we fix the ciphertext

446
00:16:24,000 --> 00:16:25,920
size to be somewhat larger than the

447
00:16:25,920 --> 00:16:28,000
adversary storage bound then ask

448
00:16:28,000 --> 00:16:30,639
ourselves how large of a message can we

449
00:16:30,639 --> 00:16:34,480
encrypt using that ciphertext size

450
00:16:34,480 --> 00:16:36,079
in fact that we show that one of our

451
00:16:36,079 --> 00:16:38,399
constructions achieves an optimal rate

452
00:16:38,399 --> 00:16:39,680
of one

453
00:16:39,680 --> 00:16:41,920
which allows us to encrypt a message

454
00:16:41,920 --> 00:16:46,160
almost as large as the cipher text size

455
00:16:46,160 --> 00:16:47,920
so back then when i was talking about a

456
00:16:47,920 --> 00:16:50,000
key idea i said the idea is to manually

457
00:16:50,000 --> 00:16:51,519
blow up the cipher text or the signature

458
00:16:51,519 --> 00:16:53,680
size well i was kind of lying there

459
00:16:53,680 --> 00:16:56,079
because for rate one setting we're not

460
00:16:56,079 --> 00:16:57,519
really blowing up the size the size is

461
00:16:57,519 --> 00:16:58,880
still the same but really what you're

462
00:16:58,880 --> 00:17:00,959
doing is you're blowing up the entropy

463
00:17:00,959 --> 00:17:02,800
because the message themselves could be

464
00:17:02,800 --> 00:17:05,359
a very low entropy

465
00:17:05,359 --> 00:17:07,280
all right to quickly summarize what we

466
00:17:07,280 --> 00:17:09,119
did in this paper incompressible

467
00:17:09,119 --> 00:17:11,520
cryptography so first of all we define

468
00:17:11,520 --> 00:17:14,000
incompressible pke and also

469
00:17:14,000 --> 00:17:15,919
incompressible signatures

470
00:17:15,919 --> 00:17:17,679
and we show that a low rate

471
00:17:17,679 --> 00:17:19,599
incompressible pke can be constructed

472
00:17:19,599 --> 00:17:21,839
from a standard model pke and we show

473
00:17:21,839 --> 00:17:24,319
that low rate incompressible signatures

474
00:17:24,319 --> 00:17:26,319
can be constructed from simply one-way

475
00:17:26,319 --> 00:17:27,599
functions

476
00:17:27,599 --> 00:17:30,000
notice that both of these constructions

477
00:17:30,000 --> 00:17:32,000
support low space streaming meaning that

478
00:17:32,000 --> 00:17:34,799
the honest parties can run within a very

479
00:17:34,799 --> 00:17:36,640
low space

480
00:17:36,640 --> 00:17:38,640
on the other hand we also construct

481
00:17:38,640 --> 00:17:41,039
incompressible pke and incompressible

482
00:17:41,039 --> 00:17:44,320
signatures with an optimal rate of what

483
00:17:44,320 --> 00:17:46,960
we construct rate one incompressible pke

484
00:17:46,960 --> 00:17:49,679
from indistinguishability obfuscation or

485
00:17:49,679 --> 00:17:50,960
io

486
00:17:50,960 --> 00:17:52,880
and we show that incompressible

487
00:17:52,880 --> 00:17:54,799
signatures with a rate of one is

488
00:17:54,799 --> 00:17:57,200
actually equivalent to incompressible

489
00:17:57,200 --> 00:17:58,400
encodings

490
00:17:58,400 --> 00:18:00,160
which was put forward which was first

491
00:18:00,160 --> 00:18:02,799
put forward by maureen wix in 2020

492
00:18:02,799 --> 00:18:05,120
they show that incompressible encodings

493
00:18:05,120 --> 00:18:07,440
can be constructed by assuming either

494
00:18:07,440 --> 00:18:09,600
the learning with errors or decisional

495
00:18:09,600 --> 00:18:12,480
composite residuosity and it's set in

496
00:18:12,480 --> 00:18:14,640
either the random oracle or the common

497
00:18:14,640 --> 00:18:17,200
reference string model

498
00:18:17,200 --> 00:18:18,799
so if you are interested in any of these

499
00:18:18,799 --> 00:18:20,880
constructions or the security proofs

500
00:18:20,880 --> 00:18:22,960
feel free to take a look at our epring

501
00:18:22,960 --> 00:18:25,200
version of the paper there is a link on

502
00:18:25,200 --> 00:18:26,720
the next page

503
00:18:26,720 --> 00:18:28,799
but i guess for today's talk

504
00:18:28,799 --> 00:18:30,400
the takeaway message i want to give is

505
00:18:30,400 --> 00:18:33,360
that throughout a long time people have

506
00:18:33,360 --> 00:18:36,000
been using the boundary storage model to

507
00:18:36,000 --> 00:18:38,080
prove things information theoretically

508
00:18:38,080 --> 00:18:40,640
however in this work and together with

509
00:18:40,640 --> 00:18:42,400
the together with the previous work of

510
00:18:42,400 --> 00:18:44,640
disappearing cryptography we actually

511
00:18:44,640 --> 00:18:47,280
show that by combining uh space

512
00:18:47,280 --> 00:18:49,360
constraints and time constraints on the

513
00:18:49,360 --> 00:18:51,360
adversary we're able to achieve never

514
00:18:51,360 --> 00:18:53,760
before possible results so that's one

515
00:18:53,760 --> 00:18:56,400
thing i would want to encourage you

516
00:18:56,400 --> 00:18:58,559
folks to think about is to

517
00:18:58,559 --> 00:19:00,400
think about what other new possibilities

518
00:19:00,400 --> 00:19:03,120
are there if we can if we impose both

519
00:19:03,120 --> 00:19:04,480
time and space

520
00:19:04,480 --> 00:19:05,919
time and space constraints on the

521
00:19:05,919 --> 00:19:08,400
adversary

522
00:19:08,400 --> 00:19:10,799
thank you for your time and let me know

523
00:19:10,799 --> 00:19:15,400
if you have any questions thank you

