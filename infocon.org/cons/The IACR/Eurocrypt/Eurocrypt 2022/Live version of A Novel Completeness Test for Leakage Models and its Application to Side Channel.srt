1
00:00:04,319 --> 00:00:08,799
the second uh talk will be given online

2
00:00:09,920 --> 00:00:12,160
can everyone hear me

3
00:00:12,160 --> 00:00:14,920
yes but we don't see the slides yet oh

4
00:00:14,920 --> 00:00:18,720
yeah you have to share them yes

5
00:00:18,720 --> 00:00:23,279
yes here is the slides and that's cool

6
00:00:23,279 --> 00:00:25,519
okay now it's good yeah it's welcome

7
00:00:25,519 --> 00:00:26,800
okay

8
00:00:26,800 --> 00:00:28,080
okay so

9
00:00:28,080 --> 00:00:30,480
the second presentation is a novel

10
00:00:30,480 --> 00:00:32,399
completeness test for leakage models and

11
00:00:32,399 --> 00:00:34,399
its application to side channel attacks

12
00:00:34,399 --> 00:00:37,360
and suppose uh responsibly engineered

13
00:00:37,360 --> 00:00:40,399
simulators it's by sega and elizabeth

14
00:00:40,399 --> 00:00:42,079
oswalt and the presentation will be

15
00:00:42,079 --> 00:00:44,719
given by seagal

16
00:00:44,719 --> 00:00:45,840
thanks for the

17
00:00:45,840 --> 00:00:46,640
okay

18
00:00:46,640 --> 00:00:48,960
thanks um brilliant so uh thanks for

19
00:00:48,960 --> 00:00:51,039
everyone helping me to set this up and

20
00:00:51,039 --> 00:00:53,039
uh thanks for coming to my talk my name

21
00:00:53,039 --> 00:00:55,840
is siegel um today i'm gonna talk about

22
00:00:55,840 --> 00:00:57,440
within this talk i'm gonna talk about

23
00:00:57,440 --> 00:00:59,359
how you can construct complete leakage

24
00:00:59,359 --> 00:01:02,079
models and how does it apply to certain

25
00:01:02,079 --> 00:01:03,840
attacks and responsibly engineer

26
00:01:03,840 --> 00:01:06,640
simulators so this is my joint work with

27
00:01:06,640 --> 00:01:09,280
elizabeth um i now work for farway now

28
00:01:09,280 --> 00:01:11,439
but this work was entirely done last

29
00:01:11,439 --> 00:01:12,960
year when i was working in the

30
00:01:12,960 --> 00:01:15,680
university of columbia austria

31
00:01:15,680 --> 00:01:18,880
well i was funded by an erc funding code

32
00:01:18,880 --> 00:01:20,960
c

33
00:01:20,960 --> 00:01:24,000
okay so i guess most of our audience

34
00:01:24,000 --> 00:01:25,600
already familiar with the concept of

35
00:01:25,600 --> 00:01:27,759
session analysis so search and analysis

36
00:01:27,759 --> 00:01:29,600
take advantage of your information

37
00:01:29,600 --> 00:01:31,200
vacate whether it's timing power

38
00:01:31,200 --> 00:01:32,799
consumption etc

39
00:01:32,799 --> 00:01:34,640
and then potentially you can recover the

40
00:01:34,640 --> 00:01:36,799
cpr key in a really short time at the

41
00:01:36,799 --> 00:01:39,280
cost of taking some additional physical

42
00:01:39,280 --> 00:01:41,280
observations for example your power

43
00:01:41,280 --> 00:01:45,119
consumption on some oscilloscope

44
00:01:45,280 --> 00:01:48,399
and let's take a systematic systematic

45
00:01:48,399 --> 00:01:50,720
point of view let's consider like as an

46
00:01:50,720 --> 00:01:52,880
attacker as a session attacker what you

47
00:01:52,880 --> 00:01:55,119
have to do so of course you need to have

48
00:01:55,119 --> 00:01:57,600
this device running the code and take

49
00:01:57,600 --> 00:01:59,040
this um

50
00:01:59,040 --> 00:02:01,200
of cisco to measuring perhaps your power

51
00:02:01,200 --> 00:02:03,119
consumption of course that's always the

52
00:02:03,119 --> 00:02:05,680
same but as the attacker is the first

53
00:02:05,680 --> 00:02:07,600
thing you need to assume is what's the

54
00:02:07,600 --> 00:02:10,080
target in the states and targeting for

55
00:02:10,080 --> 00:02:11,038
example

56
00:02:11,038 --> 00:02:12,480
for normal

57
00:02:12,480 --> 00:02:14,239
hamming weight correlation attacks i

58
00:02:14,239 --> 00:02:16,239
might assume that attacking the first

59
00:02:16,239 --> 00:02:19,280
round the first xbox output so then the

60
00:02:19,280 --> 00:02:22,640
target states is the xbox option

61
00:02:22,640 --> 00:02:25,440
the other thing i need to assume is how

62
00:02:25,440 --> 00:02:27,440
the space is leaking so perhaps i will

63
00:02:27,440 --> 00:02:29,680
assume the leakage the leakage i'm

64
00:02:29,680 --> 00:02:31,519
observing on the trace

65
00:02:31,519 --> 00:02:33,280
approximates the heavy weight of the

66
00:02:33,280 --> 00:02:35,680
states so um today all together i need

67
00:02:35,680 --> 00:02:38,000
to assume that my observed leakage

68
00:02:38,000 --> 00:02:40,319
approximates the hemi weight of the xbox

69
00:02:40,319 --> 00:02:42,239
output maybe plus with some additional

70
00:02:42,239 --> 00:02:43,599
gaussian noise

71
00:02:43,599 --> 00:02:45,760
and what happens later on is with some

72
00:02:45,760 --> 00:02:49,440
key guesses kj here i will compute my

73
00:02:49,440 --> 00:02:51,519
assumed leakage and compare that with

74
00:02:51,519 --> 00:02:53,760
the observed leakage with the pearson

75
00:02:53,760 --> 00:02:55,599
correlation coefficient so if it's

76
00:02:55,599 --> 00:02:57,840
non-zero it's a large number perhaps i

77
00:02:57,840 --> 00:03:00,159
got the right key guess if it's close to

78
00:03:00,159 --> 00:03:02,480
zero maybe i got the wrong key guess

79
00:03:02,480 --> 00:03:04,480
of course there is a key enumeration

80
00:03:04,480 --> 00:03:06,560
process here so this x in general

81
00:03:06,560 --> 00:03:08,720
couldn't be too large so if this key

82
00:03:08,720 --> 00:03:11,519
guess is like 128 bits of course that

83
00:03:11,519 --> 00:03:13,840
doesn't make any sense uh but one thing

84
00:03:13,840 --> 00:03:16,560
we need to keep in mind is from anything

85
00:03:16,560 --> 00:03:18,640
you observe on the trace you never know

86
00:03:18,640 --> 00:03:21,599
what's the full leakage model what what

87
00:03:21,599 --> 00:03:24,080
what does it all like um entirely

88
00:03:24,080 --> 00:03:26,560
contains all the information things we

89
00:03:26,560 --> 00:03:29,040
never know so we have to maybe

90
00:03:29,040 --> 00:03:31,200
successfully attack it with the s-pos

91
00:03:31,200 --> 00:03:33,519
output then we know it does contains the

92
00:03:33,519 --> 00:03:35,760
information about it this xbox output

93
00:03:35,760 --> 00:03:38,159
but you cannot never say like this is

94
00:03:38,159 --> 00:03:40,400
everything you have on the trace so

95
00:03:40,400 --> 00:03:43,519
let's now assume we take maybe a god

96
00:03:43,519 --> 00:03:45,440
view let's say like we know for sure

97
00:03:45,440 --> 00:03:48,159
this is hapless has the xbox output but

98
00:03:48,159 --> 00:03:50,720
it also has some exposed output leakage

99
00:03:50,720 --> 00:03:54,000
um as the should which fit it as the

100
00:03:54,000 --> 00:03:56,319
transition from this xbox with the

101
00:03:56,319 --> 00:03:58,400
previous xbox this is actually quite

102
00:03:58,400 --> 00:04:00,560
common for software platforms like this

103
00:04:00,560 --> 00:04:02,879
in this case you might have this kind of

104
00:04:02,879 --> 00:04:05,920
leakage from the memory subsystem maybe

105
00:04:05,920 --> 00:04:07,680
on your memory bus there is this

106
00:04:07,680 --> 00:04:10,159
transition and they will be leaking or

107
00:04:10,159 --> 00:04:11,920
you might have it seen some micro

108
00:04:11,920 --> 00:04:14,080
architecture registers or buses you

109
00:04:14,080 --> 00:04:16,079
might also see this kind of

110
00:04:16,079 --> 00:04:17,680
transition leakage it's actually quite

111
00:04:17,680 --> 00:04:20,000
common but the thing is you don't really

112
00:04:20,000 --> 00:04:22,560
know because it lies in alert the memory

113
00:04:22,560 --> 00:04:25,040
or micro architecture as the co-designer

114
00:04:25,040 --> 00:04:26,880
there's no way you will know this for

115
00:04:26,880 --> 00:04:30,160
beforehand so does this really have any

116
00:04:30,160 --> 00:04:31,600
impact

117
00:04:31,600 --> 00:04:33,840
as attacker i don't really care too much

118
00:04:33,840 --> 00:04:36,720
about this because well although um

119
00:04:36,720 --> 00:04:39,520
having this might help you develop some

120
00:04:39,520 --> 00:04:41,280
somewhere a better attack

121
00:04:41,280 --> 00:04:43,199
as the attacker my final goal is

122
00:04:43,199 --> 00:04:46,080
recovering my secret key so um the

123
00:04:46,080 --> 00:04:48,560
complexity of finding this term will be

124
00:04:48,560 --> 00:04:50,639
added to the final

125
00:04:50,639 --> 00:04:51,840
capacity

126
00:04:51,840 --> 00:04:54,320
towards the key so actually in most

127
00:04:54,320 --> 00:04:56,560
cases finding this term it might take

128
00:04:56,560 --> 00:04:58,400
much more effort than actually just

129
00:04:58,400 --> 00:05:01,520
doing this simple attacks and get crp so

130
00:05:01,520 --> 00:05:03,520
as attacker i don't really care about

131
00:05:03,520 --> 00:05:06,080
whether i'm missing this term or not

132
00:05:06,080 --> 00:05:08,320
but if we jump into the evaluator or

133
00:05:08,320 --> 00:05:10,639
certification labs shoes the story is

134
00:05:10,639 --> 00:05:12,320
completely different

135
00:05:12,320 --> 00:05:13,199
from

136
00:05:13,199 --> 00:05:15,039
evaluation point of view we really want

137
00:05:15,039 --> 00:05:17,600
to verify whether our masking schemes or

138
00:05:17,600 --> 00:05:20,639
our masking our countermeasures are

139
00:05:20,639 --> 00:05:22,639
secure against all the leakage i

140
00:05:22,639 --> 00:05:24,960
observed of course in this case if i

141
00:05:24,960 --> 00:05:26,960
assume the leakage is solely about the

142
00:05:26,960 --> 00:05:29,919
xbox output but the reality is there is

143
00:05:29,919 --> 00:05:32,000
this additional term which is not really

144
00:05:32,000 --> 00:05:34,720
about the xbox output then that perhaps

145
00:05:34,720 --> 00:05:35,759
your

146
00:05:35,759 --> 00:05:38,000
counter measures is only secure against

147
00:05:38,000 --> 00:05:40,160
this term but not this term so it's only

148
00:05:40,160 --> 00:05:42,400
like partly effective which is of of

149
00:05:42,400 --> 00:05:45,039
course not something desirable

150
00:05:45,039 --> 00:05:47,840
so we propose and clarify in this paper

151
00:05:47,840 --> 00:05:49,680
that liquid model should contain both

152
00:05:49,680 --> 00:05:52,800
the intermediate states x aka the xbox

153
00:05:52,800 --> 00:05:55,360
output here and your leakage function

154
00:05:55,360 --> 00:05:58,080
okay the heavyweight assumption here so

155
00:05:58,080 --> 00:05:59,680
you don't really have to agree with me

156
00:05:59,680 --> 00:06:01,919
on this terminology if you assume liquid

157
00:06:01,919 --> 00:06:04,479
model is really about l that's okay but

158
00:06:04,479 --> 00:06:07,039
still as an attacker you do need to

159
00:06:07,039 --> 00:06:09,600
consider both of them and there are

160
00:06:09,600 --> 00:06:12,319
there are a few solutions for l so if if

161
00:06:12,319 --> 00:06:14,080
you don't like hemingway's you can try

162
00:06:14,080 --> 00:06:16,400
profiling you can also try maybe uh

163
00:06:16,400 --> 00:06:18,400
doing mutual information there are other

164
00:06:18,400 --> 00:06:21,360
options here but for the spacex that's

165
00:06:21,360 --> 00:06:23,199
what we are going to emphasize in this

166
00:06:23,199 --> 00:06:24,880
talk and we are going to propose

167
00:06:24,880 --> 00:06:26,720
something called a completeness text we

168
00:06:26,720 --> 00:06:28,639
call something if a

169
00:06:28,639 --> 00:06:31,680
selected set of states is complete if it

170
00:06:31,680 --> 00:06:33,360
actually contains all the relevant

171
00:06:33,360 --> 00:06:36,000
states for an observed leakage on the

172
00:06:36,000 --> 00:06:36,880
trees

173
00:06:36,880 --> 00:06:38,720
and we're going to propose using the f

174
00:06:38,720 --> 00:06:40,319
test to

175
00:06:40,319 --> 00:06:43,039
verify whether your selected state

176
00:06:43,039 --> 00:06:45,440
is actually complete or not or if it's

177
00:06:45,440 --> 00:06:47,759
not complete it means it failed to

178
00:06:47,759 --> 00:06:49,840
express some of the leakage you can

179
00:06:49,840 --> 00:06:52,080
observe around the trees so to ha having

180
00:06:52,080 --> 00:06:54,720
this complete model will have a few

181
00:06:54,720 --> 00:06:57,360
benefits for for example for attacks it

182
00:06:57,360 --> 00:06:59,759
might review some unexpected new attack

183
00:06:59,759 --> 00:07:02,000
vectors or for leakage simulators it

184
00:07:02,000 --> 00:07:03,680
might help you to find leaks that will

185
00:07:03,680 --> 00:07:06,240
be otherwise missed by oversimply overly

186
00:07:06,240 --> 00:07:08,080
simplified models such as the

187
00:07:08,080 --> 00:07:10,080
heavyweight model

188
00:07:10,080 --> 00:07:12,560
and let's now start our journey uh how

189
00:07:12,560 --> 00:07:14,400
can we find a complete set of

190
00:07:14,400 --> 00:07:16,160
intermediate states so this is going to

191
00:07:16,160 --> 00:07:19,360
be our roadmap here the first step what

192
00:07:19,360 --> 00:07:21,840
what we are trying to do is construct

193
00:07:21,840 --> 00:07:23,840
this complete model that captures all

194
00:07:23,840 --> 00:07:26,319
the data dependent leakage

195
00:07:26,319 --> 00:07:29,120
and then um well of course with the

196
00:07:29,120 --> 00:07:31,520
realistic measurement we're gonna

197
00:07:31,520 --> 00:07:34,000
estimate this full model what it looks

198
00:07:34,000 --> 00:07:36,160
like and then we're gonna take your

199
00:07:36,160 --> 00:07:38,560
assumption perhaps be as leakage solely

200
00:07:38,560 --> 00:07:40,880
about this xbox output and then we'll

201
00:07:40,880 --> 00:07:43,599
also take the uh measurements and

202
00:07:43,599 --> 00:07:46,000
construction model for the assumed model

203
00:07:46,000 --> 00:07:47,680
and then later on in the second step

204
00:07:47,680 --> 00:07:49,680
we're gonna compare this mode these two

205
00:07:49,680 --> 00:07:52,400
models and figuring out whether we are

206
00:07:52,400 --> 00:07:54,639
missing something so if this model is

207
00:07:54,639 --> 00:07:56,879
significantly better than this one then

208
00:07:56,879 --> 00:07:58,479
that might suggest we are missing

209
00:07:58,479 --> 00:08:00,639
something which means your model is not

210
00:08:00,639 --> 00:08:03,680
really complete in other words well on

211
00:08:03,680 --> 00:08:05,280
the other hand if you got something

212
00:08:05,280 --> 00:08:06,960
complete that means your model is

213
00:08:06,960 --> 00:08:08,879
complete you are not missing something

214
00:08:08,879 --> 00:08:11,199
up to the statistic power you are using

215
00:08:11,199 --> 00:08:13,599
or in other words the provided number of

216
00:08:13,599 --> 00:08:15,440
quizzes

217
00:08:15,440 --> 00:08:16,879
okay so let's

218
00:08:16,879 --> 00:08:18,960
take a look at how we do the first step

219
00:08:18,960 --> 00:08:21,199
how to construct a model that can

220
00:08:21,199 --> 00:08:24,879
capture all the data dependency so

221
00:08:24,879 --> 00:08:26,720
at the first glance list might seems

222
00:08:26,720 --> 00:08:28,879
like mission impossible because it's

223
00:08:28,879 --> 00:08:30,800
like capturing all the latex what is all

224
00:08:30,800 --> 00:08:32,719
the linkage but if you really think

225
00:08:32,719 --> 00:08:35,440
about it for an unmasked aes if we

226
00:08:35,440 --> 00:08:38,559
assume that the secret key is a is some

227
00:08:38,559 --> 00:08:39,679
constant

228
00:08:39,679 --> 00:08:41,679
then all the intermediate states

229
00:08:41,679 --> 00:08:44,399
wherever it is whatever wherever it lies

230
00:08:44,399 --> 00:08:46,959
in whatever it is it will always be a

231
00:08:46,959 --> 00:08:49,519
deterministic function of all the input

232
00:08:49,519 --> 00:08:52,800
bits on the other um as a consequence of

233
00:08:52,800 --> 00:08:53,680
the

234
00:08:53,680 --> 00:08:55,519
leakage you are going to observe during

235
00:08:55,519 --> 00:08:57,600
the encryption whether it's a transition

236
00:08:57,600 --> 00:08:59,360
leakage whether it's bleach related

237
00:08:59,360 --> 00:09:02,560
leakage it will also be a function of

238
00:09:02,560 --> 00:09:04,800
all the input bits that means if we can

239
00:09:04,800 --> 00:09:06,720
actually construct this model with all

240
00:09:06,720 --> 00:09:09,040
the input bits a well capture all the

241
00:09:09,040 --> 00:09:11,279
data dependency during the encryption

242
00:09:11,279 --> 00:09:12,880
but the problem is there's no way you

243
00:09:12,880 --> 00:09:14,880
can work with this model because it

244
00:09:14,880 --> 00:09:17,920
requires much more than two to the 128

245
00:09:17,920 --> 00:09:20,160
traces to actually work with so we have

246
00:09:20,160 --> 00:09:20,959
to

247
00:09:20,959 --> 00:09:23,519
bind it into a much smaller space our

248
00:09:23,519 --> 00:09:26,160
tricks here is trying to

249
00:09:26,160 --> 00:09:28,480
bind each byte into one bit so we are

250
00:09:28,480 --> 00:09:31,200
using one rendered bit to represent each

251
00:09:31,200 --> 00:09:33,200
input byte for aes

252
00:09:33,200 --> 00:09:36,160
in that case we kind of find it um each

253
00:09:36,160 --> 00:09:39,120
byte into only one bit so entirely if

254
00:09:39,120 --> 00:09:43,120
there are like for aes 120 128 there is

255
00:09:43,120 --> 00:09:46,160
16 there are 13 16 bytes which means we

256
00:09:46,160 --> 00:09:49,360
only need to uh to do the 16 traces

257
00:09:49,360 --> 00:09:51,519
a bit more than two to six increases to

258
00:09:51,519 --> 00:09:54,240
work with this is much more desirable

259
00:09:54,240 --> 00:09:57,040
and then the second step if we have a

260
00:09:57,040 --> 00:09:59,279
complete model like this and we have our

261
00:09:59,279 --> 00:10:01,120
assumed model only about the xbox

262
00:10:01,120 --> 00:10:03,200
outputs then the next step is how we

263
00:10:03,200 --> 00:10:06,079
compare them luckily in this case we

264
00:10:06,079 --> 00:10:08,480
have some well established techniques in

265
00:10:08,480 --> 00:10:10,399
statistics called the f-test for

266
00:10:10,399 --> 00:10:12,480
analysis of the variance so in the

267
00:10:12,480 --> 00:10:14,959
f-test we can compare these two with

268
00:10:14,959 --> 00:10:17,920
some if the f-statistic in the end is

269
00:10:17,920 --> 00:10:20,640
larger than some threshold then we say

270
00:10:20,640 --> 00:10:23,040
this model you are assuming in actually

271
00:10:23,040 --> 00:10:25,440
misses some vector law has significant

272
00:10:25,440 --> 00:10:27,440
contribution to the observed leakage

273
00:10:27,440 --> 00:10:29,519
otherwise we say it's complete up to

274
00:10:29,519 --> 00:10:30,240
this

275
00:10:30,240 --> 00:10:32,560
statistic power which

276
00:10:32,560 --> 00:10:35,600
in the end um depends on the number of

277
00:10:35,600 --> 00:10:38,079
creases you are providing

278
00:10:38,079 --> 00:10:40,320
okay so put it together the first step

279
00:10:40,320 --> 00:10:42,800
we extract a full model and assume model

280
00:10:42,800 --> 00:10:46,000
and then using the real list traces to

281
00:10:46,000 --> 00:10:47,760
construct both models and then we

282
00:10:47,760 --> 00:10:50,160
compare it in the f-test so the f-test

283
00:10:50,160 --> 00:10:51,760
will tell us whether you are a simple

284
00:10:51,760 --> 00:10:54,000
model is not complete or in other words

285
00:10:54,000 --> 00:10:56,160
it's missing something of course it will

286
00:10:56,160 --> 00:10:58,079
now tell you what is missing it will

287
00:10:58,079 --> 00:11:00,160
just tell you it was missing something

288
00:11:00,160 --> 00:11:01,200
um

289
00:11:01,200 --> 00:11:04,079
go back to our previous case if we still

290
00:11:04,079 --> 00:11:06,000
using our trivial example here it will

291
00:11:06,000 --> 00:11:07,680
of course be rejected because we are

292
00:11:07,680 --> 00:11:10,640
missing this heavy distance term

293
00:11:10,640 --> 00:11:13,680
okay so now let's take a look at a few

294
00:11:13,680 --> 00:11:15,839
more complicated applications so first

295
00:11:15,839 --> 00:11:18,000
of all how it works in attacks

296
00:11:18,000 --> 00:11:20,720
um so i said first of all i said this is

297
00:11:20,720 --> 00:11:23,040
for attacks but it doesn't necessarily

298
00:11:23,040 --> 00:11:26,000
mean we are standing on the position of

299
00:11:26,000 --> 00:11:28,959
attackers so if we take a look at our

300
00:11:28,959 --> 00:11:31,200
previous example with the hamming uh

301
00:11:31,200 --> 00:11:32,800
with the hemming weight of the xbox

302
00:11:32,800 --> 00:11:34,720
output and distance between these two

303
00:11:34,720 --> 00:11:37,440
xbox outputs do we ask the attacker do

304
00:11:37,440 --> 00:11:39,920
we really want this term uh so as i said

305
00:11:39,920 --> 00:11:41,760
previously probably not because finding

306
00:11:41,760 --> 00:11:44,079
this term takes intensive effort and

307
00:11:44,079 --> 00:11:46,800
that effort will counter to your final

308
00:11:46,800 --> 00:11:49,440
complexity towards your secret key the

309
00:11:49,440 --> 00:11:51,600
other reason i might not want this is

310
00:11:51,600 --> 00:11:53,920
this term actually have two relevant

311
00:11:53,920 --> 00:11:56,240
device so to attack this term you need

312
00:11:56,240 --> 00:11:58,959
to enumerate two key bites versus with

313
00:11:58,959 --> 00:11:59,920
the

314
00:11:59,920 --> 00:12:02,079
single xbox output you only need one key

315
00:12:02,079 --> 00:12:05,040
bytes which means in the end the

316
00:12:05,040 --> 00:12:07,279
advantage of adding this term into your

317
00:12:07,279 --> 00:12:09,600
attack is almost negligible but the

318
00:12:09,600 --> 00:12:12,240
effort to find it is quite large so in

319
00:12:12,240 --> 00:12:13,920
the end you mind at the attacker you

320
00:12:13,920 --> 00:12:15,839
might not really want to adding this

321
00:12:15,839 --> 00:12:19,120
term to your attack but what it's really

322
00:12:19,120 --> 00:12:22,000
critical here is we we were wishing uh

323
00:12:22,000 --> 00:12:24,000
we are wishing to using this attack

324
00:12:24,000 --> 00:12:26,160
using this analysis to review some

325
00:12:26,160 --> 00:12:28,959
unexpected microarchitecture features

326
00:12:28,959 --> 00:12:31,600
which in the end help us to develop a

327
00:12:31,600 --> 00:12:34,160
deeper understanding of our platform

328
00:12:34,160 --> 00:12:35,040
which

329
00:12:35,040 --> 00:12:38,240
will also benefit all the coding and

330
00:12:38,240 --> 00:12:41,440
masking implementations in this specific

331
00:12:41,440 --> 00:12:43,440
platform um of course this will also

332
00:12:43,440 --> 00:12:44,800
means in the following i'm not really

333
00:12:44,800 --> 00:12:47,440
talking about everything in on a text

334
00:12:47,440 --> 00:12:50,800
setup i assume everything within and

335
00:12:50,800 --> 00:12:52,959
performing setup where we assume all the

336
00:12:52,959 --> 00:12:55,600
input we know about it we are only

337
00:12:55,600 --> 00:12:58,480
trying to training um trying to train a

338
00:12:58,480 --> 00:13:02,000
better model for future attacks

339
00:13:02,000 --> 00:13:04,240
okay so the target i'm selecting is from

340
00:13:04,240 --> 00:13:07,519
nc the fine masking schemes you can find

341
00:13:07,519 --> 00:13:10,399
it in this repository so in this schemes

342
00:13:10,399 --> 00:13:14,079
every secret spy x is encoded with um

343
00:13:14,079 --> 00:13:17,040
one multiplicated mask rn and one

344
00:13:17,040 --> 00:13:19,839
additional mask ra so the s-boss will be

345
00:13:19,839 --> 00:13:23,120
pre-computed pre-computed um before each

346
00:13:23,120 --> 00:13:24,160
encryption

347
00:13:24,160 --> 00:13:27,120
with the input mass are in the upper

348
00:13:27,120 --> 00:13:29,600
marks are out so later on in the within

349
00:13:29,600 --> 00:13:32,160
this encryption you will always do table

350
00:13:32,160 --> 00:13:34,880
lookups here and the additional marks

351
00:13:34,880 --> 00:13:36,800
are a will be different for each byte

352
00:13:36,800 --> 00:13:38,480
but r and r

353
00:13:38,480 --> 00:13:41,199
will be shared within one encryption

354
00:13:41,199 --> 00:13:42,800
so within this

355
00:13:42,800 --> 00:13:45,199
implementation that's for example traces

356
00:13:45,199 --> 00:13:46,480
where we

357
00:13:46,480 --> 00:13:49,199
timely calculates the first xbox first

358
00:13:49,199 --> 00:13:51,600
masked spot table lookup

359
00:13:51,600 --> 00:13:54,160
um well if we trivially build the

360
00:13:54,160 --> 00:13:56,720
leakage model for it we assume while we

361
00:13:56,720 --> 00:13:59,519
are looking table lookup for the first

362
00:13:59,519 --> 00:14:03,360
bytes then we might leak on x0 the two

363
00:14:03,360 --> 00:14:06,880
unshared unmasked states for the first

364
00:14:06,880 --> 00:14:10,880
bytes and rn are a zero and maybe also

365
00:14:10,880 --> 00:14:13,519
re then also that's all the

366
00:14:13,519 --> 00:14:14,480
uh

367
00:14:14,480 --> 00:14:17,040
well stays relevant for

368
00:14:17,040 --> 00:14:20,160
computing the first xbox lookup

369
00:14:20,160 --> 00:14:22,480
but if we actually using this as our

370
00:14:22,480 --> 00:14:24,160
zoom model and compare that with the

371
00:14:24,160 --> 00:14:26,560
full model what we got is the blue line

372
00:14:26,560 --> 00:14:28,320
here so basically in this graph

373
00:14:28,320 --> 00:14:30,240
everything above the dashed line means

374
00:14:30,240 --> 00:14:32,000
you are not complete you are missing

375
00:14:32,000 --> 00:14:34,959
something so that means um even if we

376
00:14:34,959 --> 00:14:37,279
are only timingly actually computing

377
00:14:37,279 --> 00:14:38,079
this

378
00:14:38,079 --> 00:14:40,880
first xbox by the first bytes xbox

379
00:14:40,880 --> 00:14:43,279
lookup the leakage is not solely about

380
00:14:43,279 --> 00:14:46,959
processbox and why is that what is the

381
00:14:46,959 --> 00:14:49,839
missing leakage here so if we consider

382
00:14:49,839 --> 00:14:52,880
the target for the cortex m3 we are

383
00:14:52,880 --> 00:14:55,760
using here is actually a 32-bit core

384
00:14:55,760 --> 00:14:58,079
which means your memory buses are most

385
00:14:58,079 --> 00:15:01,279
likely also 32 bits even if your code is

386
00:15:01,279 --> 00:15:03,600
only trying to load one byte from the

387
00:15:03,600 --> 00:15:06,800
memory um it what is likely to happen as

388
00:15:06,800 --> 00:15:09,199
your memory is always loading a word and

389
00:15:09,199 --> 00:15:12,160
it is the cpu's responsibility for

390
00:15:12,160 --> 00:15:13,920
picking out which bytes you want and

391
00:15:13,920 --> 00:15:16,399
discarding all the unnecessary bytes so

392
00:15:16,399 --> 00:15:18,320
this means on your leakage you are

393
00:15:18,320 --> 00:15:20,720
actually observing the leakage from the

394
00:15:20,720 --> 00:15:22,720
worldwide loading instead of the

395
00:15:22,720 --> 00:15:25,120
bikewise loading so if we add all of

396
00:15:25,120 --> 00:15:28,880
those into our consideration our um we

397
00:15:28,880 --> 00:15:31,759
can get the sign here which is right

398
00:15:31,759 --> 00:15:33,759
below the threshold which

399
00:15:33,759 --> 00:15:37,519
suggests this might be a complete model

400
00:15:37,519 --> 00:15:39,440
okay let's further verify if this is

401
00:15:39,440 --> 00:15:42,240
actually the case um here i presented

402
00:15:42,240 --> 00:15:42,959
the

403
00:15:42,959 --> 00:15:44,079
um

404
00:15:44,079 --> 00:15:45,519
well uh

405
00:15:45,519 --> 00:15:46,320
the

406
00:15:46,320 --> 00:15:47,920
analysis of

407
00:15:47,920 --> 00:15:50,639
all four first four bytes within this

408
00:15:50,639 --> 00:15:53,360
word and as we can see here all the

409
00:15:53,360 --> 00:15:56,639
musket on sparks the musket states all

410
00:15:56,639 --> 00:15:58,240
the first four

411
00:15:58,240 --> 00:16:01,040
musket states can be observed as a peak

412
00:16:01,040 --> 00:16:03,360
here so which suggests all four of them

413
00:16:03,360 --> 00:16:05,519
although timing you're only doing

414
00:16:05,519 --> 00:16:07,519
table lookup for the first bites you

415
00:16:07,519 --> 00:16:09,440
actually observe all the four bytes

416
00:16:09,440 --> 00:16:11,680
leakage simultaneously here

417
00:16:11,680 --> 00:16:14,079
so what does this mean for attack well

418
00:16:14,079 --> 00:16:16,560
previously if you want the leakage for x

419
00:16:16,560 --> 00:16:19,920
1 by x i and y 1 by x j you might be

420
00:16:19,920 --> 00:16:21,920
looking for two different points on the

421
00:16:21,920 --> 00:16:22,880
trace

422
00:16:22,880 --> 00:16:25,600
and for this case we actually know if we

423
00:16:25,600 --> 00:16:27,839
select some something here and

424
00:16:27,839 --> 00:16:30,720
simultaneously have the uh the leakage

425
00:16:30,720 --> 00:16:32,800
for all four bytes within the spot list

426
00:16:32,800 --> 00:16:35,839
words which means if i want x y x zero

427
00:16:35,839 --> 00:16:38,240
and that's one i can just pick one

428
00:16:38,240 --> 00:16:40,399
sample here and then take the second

429
00:16:40,399 --> 00:16:42,240
statistic moments lower give me

430
00:16:42,240 --> 00:16:43,839
simultaneously

431
00:16:43,839 --> 00:16:45,920
two points leakage so that means if

432
00:16:45,920 --> 00:16:47,759
you're doing second order attack you can

433
00:16:47,759 --> 00:16:48,560
do

434
00:16:48,560 --> 00:16:50,880
univariate attack instead of private

435
00:16:50,880 --> 00:16:52,399
text which means you don't really have

436
00:16:52,399 --> 00:16:54,320
to combine

437
00:16:54,320 --> 00:16:56,399
noises from different sources

438
00:16:56,399 --> 00:16:57,279
um

439
00:16:57,279 --> 00:16:59,360
more details will be presented in paper

440
00:16:59,360 --> 00:17:01,440
i'll skip it for now but i would also

441
00:17:01,440 --> 00:17:03,680
like to emphasize this is very far from

442
00:17:03,680 --> 00:17:04,880
the most

443
00:17:04,880 --> 00:17:07,760
efficient almost powerful attacks of

444
00:17:07,760 --> 00:17:09,520
course the most powerful attacks are

445
00:17:09,520 --> 00:17:11,359
always prevailing attacks

446
00:17:11,359 --> 00:17:14,400
but here what we would like to

447
00:17:14,400 --> 00:17:16,959
state it is

448
00:17:16,959 --> 00:17:19,359
using our analysis you can review some

449
00:17:19,359 --> 00:17:21,919
new attack factors vectors and you can

450
00:17:21,919 --> 00:17:24,959
also learn what is previously unexpected

451
00:17:24,959 --> 00:17:27,599
in your analysis

452
00:17:27,599 --> 00:17:30,320
okay so the next application i'm going

453
00:17:30,320 --> 00:17:32,480
to talk about is leakage simulators so

454
00:17:32,480 --> 00:17:34,640
uh previously if you were talking uh if

455
00:17:34,640 --> 00:17:36,720
you're thinking about how we actually

456
00:17:36,720 --> 00:17:40,880
work with um certification um processes

457
00:17:40,880 --> 00:17:43,200
you as a crypto engineer you find some

458
00:17:43,200 --> 00:17:45,200
masking scheme you code it and you

459
00:17:45,200 --> 00:17:47,840
deploy lots into your device and then

460
00:17:47,840 --> 00:17:50,559
you send to certificate center which do

461
00:17:50,559 --> 00:17:52,320
this leakage detection finding out

462
00:17:52,320 --> 00:17:54,400
whether it's secure or not and then if

463
00:17:54,400 --> 00:17:55,840
it's a secure you can send it to the

464
00:17:55,840 --> 00:17:58,160
market otherwise you might go back so

465
00:17:58,160 --> 00:18:01,200
the non-ideal part of this is um

466
00:18:01,200 --> 00:18:03,039
basically at this point you might

467
00:18:03,039 --> 00:18:05,520
already finish your development cycle so

468
00:18:05,520 --> 00:18:07,039
your company's list means you might

469
00:18:07,039 --> 00:18:09,120
already finish this uh

470
00:18:09,120 --> 00:18:09,919
where

471
00:18:09,919 --> 00:18:12,559
if the certification center said well

472
00:18:12,559 --> 00:18:15,039
it's not secure you need to fix it maybe

473
00:18:15,039 --> 00:18:16,799
this is already a year after you

474
00:18:16,799 --> 00:18:18,720
actually divide the list you might

475
00:18:18,720 --> 00:18:21,919
already forgot what um causes this or

476
00:18:21,919 --> 00:18:23,840
your colleague might already leaving

477
00:18:23,840 --> 00:18:26,000
their job which means really difficult

478
00:18:26,000 --> 00:18:29,039
to actually reworking of it so one of

479
00:18:29,039 --> 00:18:30,000
the

480
00:18:30,000 --> 00:18:32,720
solutions for this will be you use

481
00:18:32,720 --> 00:18:34,640
the leakage simulators here so because

482
00:18:34,640 --> 00:18:36,480
simulator can provide you

483
00:18:36,480 --> 00:18:38,320
some feedback right after you write your

484
00:18:38,320 --> 00:18:39,919
code then you can run on leakage

485
00:18:39,919 --> 00:18:42,400
simulators and then you can

486
00:18:42,400 --> 00:18:43,760
have some

487
00:18:43,760 --> 00:18:46,080
well idea of whether my expectation is

488
00:18:46,080 --> 00:18:48,320
right or there is something wrong the

489
00:18:48,320 --> 00:18:50,000
other good thing about the case

490
00:18:50,000 --> 00:18:51,840
simulator is

491
00:18:51,840 --> 00:18:54,720
well they are fully theoretical so they

492
00:18:54,720 --> 00:18:56,400
not only telling you

493
00:18:56,400 --> 00:18:57,840
through legit detection which

494
00:18:57,840 --> 00:18:59,600
instruction is leaking they will also

495
00:18:59,600 --> 00:19:01,600
tell you exactly why they're leaking

496
00:19:01,600 --> 00:19:03,520
which helps you to develop much more

497
00:19:03,520 --> 00:19:04,960
targeted

498
00:19:04,960 --> 00:19:07,520
security patches

499
00:19:07,520 --> 00:19:10,880
so one important point of this schedule

500
00:19:10,880 --> 00:19:13,520
this workflow is quality

501
00:19:13,520 --> 00:19:14,799
sorry hello

502
00:19:14,799 --> 00:19:15,679
uh

503
00:19:15,679 --> 00:19:18,480
your time is almost up can you please

504
00:19:18,480 --> 00:19:21,520
okay conclude this talk please okay

505
00:19:21,520 --> 00:19:24,880
okay um so um i'm just going to say the

506
00:19:24,880 --> 00:19:27,679
completeness test will help you um to

507
00:19:27,679 --> 00:19:29,200
verify the quality of your leakage

508
00:19:29,200 --> 00:19:31,919
simulator and we're going to verify two

509
00:19:31,919 --> 00:19:34,960
existing simulators and what you're um

510
00:19:34,960 --> 00:19:36,960
this is the guardian we're using and

511
00:19:36,960 --> 00:19:38,960
what we observe here is it's actually

512
00:19:38,960 --> 00:19:40,480
quite far from

513
00:19:40,480 --> 00:19:43,120
what we want so everything almost every

514
00:19:43,120 --> 00:19:44,880
cycle is not ideal

515
00:19:44,880 --> 00:19:47,120
so um we have constructed something

516
00:19:47,120 --> 00:19:48,960
better and this

517
00:19:48,960 --> 00:19:50,000
the

518
00:19:50,000 --> 00:19:52,720
non-complete leakage model actually

519
00:19:52,720 --> 00:19:54,640
causes some problems in your liquid

520
00:19:54,640 --> 00:19:56,559
detection you can see here you actually

521
00:19:56,559 --> 00:19:58,720
failed to detect many of the leakage

522
00:19:58,720 --> 00:19:59,760
here

523
00:19:59,760 --> 00:20:00,640
okay

524
00:20:00,640 --> 00:20:01,919
so um

525
00:20:01,919 --> 00:20:06,320
um my i think maybe i can skip the

526
00:20:06,320 --> 00:20:09,200
ethical consideration here so um

527
00:20:09,200 --> 00:20:11,520
with this model we are not actually

528
00:20:11,520 --> 00:20:14,720
making this so which may also um

529
00:20:14,720 --> 00:20:17,120
avoid the problem of course of using

530
00:20:17,120 --> 00:20:18,960
this leakage simulators as free

531
00:20:18,960 --> 00:20:21,679
templates so that's the ethical part

532
00:20:21,679 --> 00:20:24,080
okay that's the end of this talk thank

533
00:20:24,080 --> 00:20:25,280
you

534
00:20:25,280 --> 00:20:25,830
right

535
00:20:25,830 --> 00:20:30,399
[Music]

536
00:20:31,600 --> 00:20:34,080
maybe we can keep the questions for the

537
00:20:34,080 --> 00:20:35,520
after the second all because the second

538
00:20:35,520 --> 00:20:37,919
topic will be given only by uh also by

539
00:20:37,919 --> 00:20:40,000
the same speakers so maybe you can

540
00:20:40,000 --> 00:20:41,679
simply continue with the second talk and

541
00:20:41,679 --> 00:20:43,440
then at the end we can

542
00:20:43,440 --> 00:20:47,280
have a few minutes yeah sure

