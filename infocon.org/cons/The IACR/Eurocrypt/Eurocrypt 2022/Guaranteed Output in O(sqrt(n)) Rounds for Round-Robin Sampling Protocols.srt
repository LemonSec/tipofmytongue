1
00:00:00,080 --> 00:00:00,990
um

2
00:00:00,990 --> 00:00:03,260
[Music]

3
00:00:05,279 --> 00:00:07,279
we're good we're gonna have a talk on

4
00:00:07,279 --> 00:00:09,599
guaranteed output and

5
00:00:09,599 --> 00:00:12,480
uh of square root of n rounds for round

6
00:00:12,480 --> 00:00:15,440
robin sampling protocols this is by ron

7
00:00:15,440 --> 00:00:18,800
cohen jack dorner yeshvant kandi and abi

8
00:00:18,800 --> 00:00:21,600
shalat and jack will give the talk

9
00:00:21,600 --> 00:00:24,000
please

10
00:00:28,320 --> 00:00:31,720
hello everyone

11
00:00:41,680 --> 00:00:45,840
it's a switch oh there we go

12
00:00:46,079 --> 00:00:48,079
thank you for the warning hi i'm jack uh

13
00:00:48,079 --> 00:00:50,559
my co-authors are ron josh and abi

14
00:00:50,559 --> 00:00:51,680
um so

15
00:00:51,680 --> 00:00:53,920
suppose that you have an elliptic curve

16
00:00:53,920 --> 00:00:56,239
group and then consider the distribution

17
00:00:56,239 --> 00:00:58,719
that's generated if you sample a random

18
00:00:58,719 --> 00:01:00,719
variable tau from the field modulo the

19
00:01:00,719 --> 00:01:02,960
curve order and then compute the powers

20
00:01:02,960 --> 00:01:05,600
of tau in the curve group

21
00:01:05,600 --> 00:01:08,080
this is the structured reference string

22
00:01:08,080 --> 00:01:10,080
used by the polynomial commitment scheme

23
00:01:10,080 --> 00:01:13,040
of kante zavarucha and goldberg and its

24
00:01:13,040 --> 00:01:14,960
form derives actually from the challenge

25
00:01:14,960 --> 00:01:16,799
issued in the strong diff diffie-hellman

26
00:01:16,799 --> 00:01:19,360
game introduced by bonai and boyan

27
00:01:19,360 --> 00:01:20,880
related structured reference rings are

28
00:01:20,880 --> 00:01:23,200
also used in grass snarks and a number

29
00:01:23,200 --> 00:01:25,600
of grossnock derivatives including sonic

30
00:01:25,600 --> 00:01:27,759
planck aurora light and marlin and

31
00:01:27,759 --> 00:01:29,439
viagra snarks these are actually

32
00:01:29,439 --> 00:01:31,920
deployed in the world today so at the

33
00:01:31,920 --> 00:01:34,159
very least filecoin and ethereum and

34
00:01:34,159 --> 00:01:36,320
zcash use srs of this form and there's

35
00:01:36,320 --> 00:01:38,320
probably some others as well

36
00:01:38,320 --> 00:01:40,720
now these srs have an unfortunate

37
00:01:40,720 --> 00:01:42,399
property which is that you can't sample

38
00:01:42,399 --> 00:01:44,560
them in a public coin fashion in

39
00:01:44,560 --> 00:01:46,720
particular if given an elliptic curve

40
00:01:46,720 --> 00:01:47,840
point for which you don't know the

41
00:01:47,840 --> 00:01:50,479
discrete logarithm computing the square

42
00:01:50,479 --> 00:01:52,399
of that point actually implies breaking

43
00:01:52,399 --> 00:01:53,840
the computational diffie-hellman

44
00:01:53,840 --> 00:01:55,920
assumption so in order to sample the

45
00:01:55,920 --> 00:01:58,320
powers of tau you really have to sample

46
00:01:58,320 --> 00:02:00,000
tau first

47
00:02:00,000 --> 00:02:02,399
on the other hand if the adversary were

48
00:02:02,399 --> 00:02:04,079
to learn tau the consequences for

49
00:02:04,079 --> 00:02:06,719
security are catastrophic so the kcg10

50
00:02:06,719 --> 00:02:08,560
polynomial commitment scheme has no

51
00:02:08,560 --> 00:02:10,800
binding if the adversary learns tau and

52
00:02:10,800 --> 00:02:12,720
all the snarks you saw a moment ago have

53
00:02:12,720 --> 00:02:15,599
no soundness if the adversary learns tau

54
00:02:15,599 --> 00:02:17,599
these two facts are in a sort of natural

55
00:02:17,599 --> 00:02:19,520
tension which leads to

56
00:02:19,520 --> 00:02:22,160
a question who will we trust to sample

57
00:02:22,160 --> 00:02:24,160
tau and the answer that the community

58
00:02:24,160 --> 00:02:25,920
has come up with is that we will

59
00:02:25,920 --> 00:02:28,239
distribute the sampling of the powers of

60
00:02:28,239 --> 00:02:30,720
tao among absolutely as many people as

61
00:02:30,720 --> 00:02:33,040
we possibly can and in such a way that

62
00:02:33,040 --> 00:02:34,720
so long as at least one of them is

63
00:02:34,720 --> 00:02:36,959
honest cow will remain hidden

64
00:02:36,959 --> 00:02:38,879
so for the the first protocol for doing

65
00:02:38,879 --> 00:02:40,720
something like this was proposed by ben

66
00:02:40,720 --> 00:02:43,599
sassonidal in 25 2015 and there have

67
00:02:43,599 --> 00:02:46,080
been a number of follow-ups since then

68
00:02:46,080 --> 00:02:48,080
but they all followed the same basic

69
00:02:48,080 --> 00:02:49,440
layout which i'm going to show you in a

70
00:02:49,440 --> 00:02:51,760
sort of simplified form

71
00:02:51,760 --> 00:02:53,760
so the protocol begins with a single

72
00:02:53,760 --> 00:02:57,200
party alice who samples a multiplicative

73
00:02:57,200 --> 00:02:58,480
share of tau

74
00:02:58,480 --> 00:03:00,480
and then computes what i'm going to call

75
00:03:00,480 --> 00:03:02,720
a partial srs that is she computes the

76
00:03:02,720 --> 00:03:05,120
powers of tal with respect to just her

77
00:03:05,120 --> 00:03:06,959
multiplicative share

78
00:03:06,959 --> 00:03:08,319
and when she has this she's going to

79
00:03:08,319 --> 00:03:10,480
post it to a public bulletin board of

80
00:03:10,480 --> 00:03:12,159
some kind where the whole world can see

81
00:03:12,159 --> 00:03:12,879
it

82
00:03:12,879 --> 00:03:14,640
and at this point alice is actually done

83
00:03:14,640 --> 00:03:15,760
she doesn't need to interact with the

84
00:03:15,760 --> 00:03:17,120
protocol anymore and she can sort of

85
00:03:17,120 --> 00:03:19,519
fade away into the background as another

86
00:03:19,519 --> 00:03:21,599
party comes along so this is bob and he

87
00:03:21,599 --> 00:03:24,000
also samples a multiplicative share

88
00:03:24,000 --> 00:03:26,480
and then he reads alice's contribution

89
00:03:26,480 --> 00:03:28,159
off the bulletin board and uses his

90
00:03:28,159 --> 00:03:30,720
multiplicative share to update it

91
00:03:30,720 --> 00:03:32,879
so when i say update here's what i mean

92
00:03:32,879 --> 00:03:35,040
he takes every element in the vector

93
00:03:35,040 --> 00:03:37,760
that is alice's output and multiplies it

94
00:03:37,760 --> 00:03:39,599
by the corresponding power of his

95
00:03:39,599 --> 00:03:41,440
multiplicative share of tau

96
00:03:41,440 --> 00:03:43,360
and of course you can see that alice

97
00:03:43,360 --> 00:03:44,560
actually just computed a slightly

98
00:03:44,560 --> 00:03:45,920
degenerate version of this function

99
00:03:45,920 --> 00:03:47,599
where she used the vector of all curve

100
00:03:47,599 --> 00:03:50,400
generators as her starting point

101
00:03:50,400 --> 00:03:53,680
regardless once bob has his partial srs

102
00:03:53,680 --> 00:03:55,760
he also posts it to the public bulletin

103
00:03:55,760 --> 00:03:57,519
board and the rest of the world will

104
00:03:57,519 --> 00:03:59,760
want to be certain that he used alice's

105
00:03:59,760 --> 00:04:02,000
output as his input so he'd better pose

106
00:04:02,000 --> 00:04:03,680
some kind of proof to that effect as

107
00:04:03,680 --> 00:04:04,560
well

108
00:04:04,560 --> 00:04:06,560
and now bob is also done he never needs

109
00:04:06,560 --> 00:04:08,400
to interact in the protocol again and

110
00:04:08,400 --> 00:04:09,840
the protocol can sort of continue in

111
00:04:09,840 --> 00:04:11,519
this way using the same steps for as

112
00:04:11,519 --> 00:04:13,360
many parties as you'd like but for the

113
00:04:13,360 --> 00:04:14,640
sake of simplicity i'm just going to

114
00:04:14,640 --> 00:04:16,478
show you three

115
00:04:16,478 --> 00:04:18,560
so when all the parties have gone the

116
00:04:18,560 --> 00:04:20,560
output of the final party is the final

117
00:04:20,560 --> 00:04:23,520
srs and as you can see it comprises the

118
00:04:23,520 --> 00:04:25,600
powers of the product of all of the

119
00:04:25,600 --> 00:04:28,400
shares sampled by the individual parties

120
00:04:28,400 --> 00:04:29,840
this protocol has a couple of useful

121
00:04:29,840 --> 00:04:31,040
properties that i'm going to kind of

122
00:04:31,040 --> 00:04:33,120
observe to you the first property is

123
00:04:33,120 --> 00:04:34,479
that all of the secrets used in this

124
00:04:34,479 --> 00:04:36,560
protocol are uniform the environment

125
00:04:36,560 --> 00:04:39,759
never has a specific input to anybody

126
00:04:39,759 --> 00:04:41,520
the second property is it has a round

127
00:04:41,520 --> 00:04:43,360
robin structure which means that

128
00:04:43,360 --> 00:04:46,479
everybody speaks exactly once using only

129
00:04:46,479 --> 00:04:48,720
the public bulletin board

130
00:04:48,720 --> 00:04:50,400
and the order in which they speak

131
00:04:50,400 --> 00:04:51,759
doesn't impact the security of the

132
00:04:51,759 --> 00:04:53,600
protocol in any way in fact the order

133
00:04:53,600 --> 00:04:55,840
can even be determined by the adversary

134
00:04:55,840 --> 00:04:57,360
of course this round-robin structure

135
00:04:57,360 --> 00:04:58,960
immediately implies that the protocol

136
00:04:58,960 --> 00:05:01,600
has exactly n broadcast rounds where n

137
00:05:01,600 --> 00:05:03,759
is the number of parties

138
00:05:03,759 --> 00:05:05,120
finally i'd like to observe that the

139
00:05:05,120 --> 00:05:07,520
protocol has guaranteed output delivery

140
00:05:07,520 --> 00:05:09,840
against a dishonest majority and this

141
00:05:09,840 --> 00:05:12,880
means that any coalition of n-1 corrupt

142
00:05:12,880 --> 00:05:15,759
parties cannot prevent the protocol from

143
00:05:15,759 --> 00:05:18,400
delivering a secure srs to the public

144
00:05:18,400 --> 00:05:20,160
for public consumption

145
00:05:20,160 --> 00:05:21,919
so for the rest of the talk i'm going to

146
00:05:21,919 --> 00:05:24,639
refer to any protocol that adheres to

147
00:05:24,639 --> 00:05:27,199
the top two attributes as a strongly

148
00:05:27,199 --> 00:05:29,520
player replaceable round robin protocol

149
00:05:29,520 --> 00:05:33,120
or an spr3 protocol for short

150
00:05:33,120 --> 00:05:35,120
the main result of this work is a

151
00:05:35,120 --> 00:05:37,440
protocol compiler that takes an spr3

152
00:05:37,440 --> 00:05:39,280
protocol with guaranteed output delivery

153
00:05:39,280 --> 00:05:40,639
as input

154
00:05:40,639 --> 00:05:43,120
and produces a compiled protocol with

155
00:05:43,120 --> 00:05:46,160
only o of square root n uh broadcast

156
00:05:46,160 --> 00:05:48,240
rounds which nevertheless achieves

157
00:05:48,240 --> 00:05:49,520
guaranteed output delivery against

158
00:05:49,520 --> 00:05:51,360
dishonest majority just like the input

159
00:05:51,360 --> 00:05:52,720
protocol did

160
00:05:52,720 --> 00:05:54,320
finally the output protocol is going to

161
00:05:54,320 --> 00:05:55,120
be

162
00:05:55,120 --> 00:05:57,280
uc secure under non-interactive zero

163
00:05:57,280 --> 00:05:59,280
knowledge and any protocol which

164
00:05:59,280 --> 00:06:02,319
realizes the ot functionality

165
00:06:02,319 --> 00:06:04,319
so a generalization is pretty useless

166
00:06:04,319 --> 00:06:06,720
but only generalizes one example which

167
00:06:06,720 --> 00:06:08,639
leads us to the question what other spr3

168
00:06:08,639 --> 00:06:10,319
protocols exist

169
00:06:10,319 --> 00:06:11,840
we looked at the literature and we were

170
00:06:11,840 --> 00:06:14,080
able to find one other protocol that's

171
00:06:14,080 --> 00:06:15,520
interesting and falls into this model

172
00:06:15,520 --> 00:06:17,759
which is verifiable mixed nuts so as a

173
00:06:17,759 --> 00:06:20,880
corollary we also give the first robust

174
00:06:20,880 --> 00:06:22,880
mixnet with a number of rounds that sub

175
00:06:22,880 --> 00:06:24,720
linear in the number of parties who do

176
00:06:24,720 --> 00:06:26,639
the mixing

177
00:06:26,639 --> 00:06:28,160
for the rest of this talk i'm going to

178
00:06:28,160 --> 00:06:29,520
give you a little bit of context about

179
00:06:29,520 --> 00:06:30,800
guaranteed output delivery so you can

180
00:06:30,800 --> 00:06:32,479
see how this result fits in then i'm

181
00:06:32,479 --> 00:06:34,400
going to tell you how our compiler works

182
00:06:34,400 --> 00:06:35,440
and then i'm going to tell you a little

183
00:06:35,440 --> 00:06:37,199
bit about the bias that this compiler

184
00:06:37,199 --> 00:06:39,759
allows the adversary to inject into the

185
00:06:39,759 --> 00:06:41,440
protocol and i'm going to argue that

186
00:06:41,440 --> 00:06:43,600
this bias is essentially harmless in the

187
00:06:43,600 --> 00:06:45,520
context that we care about and finally

188
00:06:45,520 --> 00:06:46,639
i'm going to leave you with a couple of

189
00:06:46,639 --> 00:06:49,440
open questions so then let's talk about

190
00:06:49,440 --> 00:06:50,639
god

191
00:06:50,639 --> 00:06:52,160
and one of the earliest and most

192
00:06:52,160 --> 00:06:54,000
important results in guaranteed delivery

193
00:06:54,000 --> 00:06:56,319
is cleve's 1986 proof that in the

194
00:06:56,319 --> 00:06:58,240
dishonest majority setting some

195
00:06:58,240 --> 00:06:59,759
functionalities can't be computed with

196
00:06:59,759 --> 00:07:02,639
guaranteed output delivery at all

197
00:07:02,639 --> 00:07:04,639
in particular any coin tossing protocol

198
00:07:04,639 --> 00:07:06,160
with r rounds must have bias

199
00:07:06,160 --> 00:07:08,720
proportionate at least to one over r so

200
00:07:08,720 --> 00:07:11,120
this means that um computing and

201
00:07:11,120 --> 00:07:13,360
unbiased coin flips cannot be achieved

202
00:07:13,360 --> 00:07:15,919
in any finite number of rounds the good

203
00:07:15,919 --> 00:07:18,479
news though is that sometimes bias is

204
00:07:18,479 --> 00:07:20,000
tolerable and this is particularly true

205
00:07:20,000 --> 00:07:21,280
when you're sampling cryptographic

206
00:07:21,280 --> 00:07:22,319
objects

207
00:07:22,319 --> 00:07:24,960
so in 2003 gennaro and all prove that

208
00:07:24,960 --> 00:07:26,560
threshold snore signatures are still

209
00:07:26,560 --> 00:07:28,800
secure when the public key is biased and

210
00:07:28,800 --> 00:07:31,520
just a few years ago uh grothodal proved

211
00:07:31,520 --> 00:07:33,520
that some flavors of gross snarks are

212
00:07:33,520 --> 00:07:36,800
still secure when the srs is biased and

213
00:07:36,800 --> 00:07:38,400
here security is against an algebraic

214
00:07:38,400 --> 00:07:39,759
adversary

215
00:07:39,759 --> 00:07:41,919
as a sort of side result in this paper

216
00:07:41,919 --> 00:07:43,520
we prove that biasing the challenge

217
00:07:43,520 --> 00:07:45,520
gives the adversary no advantage all

218
00:07:45,520 --> 00:07:47,440
when it um at all when it's playing the

219
00:07:47,440 --> 00:07:49,280
strong diffie-hellman game and this

220
00:07:49,280 --> 00:07:51,039
immediately implies that the kzg10

221
00:07:51,039 --> 00:07:52,960
polynomial commitment scheme is secure

222
00:07:52,960 --> 00:07:55,039
when the srs is biased

223
00:07:55,039 --> 00:07:56,560
now when it's okay to have a little bit

224
00:07:56,560 --> 00:07:58,639
of bias when you're sampling whatever it

225
00:07:58,639 --> 00:08:00,800
is you're trying to sample this opens up

226
00:08:00,800 --> 00:08:02,720
the door to using a really classic

227
00:08:02,720 --> 00:08:04,240
technique for achieving guaranteed

228
00:08:04,240 --> 00:08:06,319
output delivery in a generic way and

229
00:08:06,319 --> 00:08:08,560
this is the player elimination framework

230
00:08:08,560 --> 00:08:10,000
of gmw

231
00:08:10,000 --> 00:08:12,560
this framework is very simple first you

232
00:08:12,560 --> 00:08:14,240
compute whatever function you'd like via

233
00:08:14,240 --> 00:08:16,080
multi-party computation with security

234
00:08:16,080 --> 00:08:18,319
against a dishonest majority

235
00:08:18,319 --> 00:08:20,560
then you ask everybody to prove using

236
00:08:20,560 --> 00:08:22,240
zero knowledge on a broadcast channel

237
00:08:22,240 --> 00:08:24,479
that they acted honestly

238
00:08:24,479 --> 00:08:26,479
and finally if anybody cheats you

239
00:08:26,479 --> 00:08:28,639
eliminate them and you start over so

240
00:08:28,639 --> 00:08:30,319
this last step here is the important one

241
00:08:30,319 --> 00:08:31,840
because if you're in the dishonest

242
00:08:31,840 --> 00:08:33,919
majority setting this implies that you

243
00:08:33,919 --> 00:08:36,320
might need an round since it could be n

244
00:08:36,320 --> 00:08:38,080
minus one restarts and furthermore it

245
00:08:38,080 --> 00:08:40,080
implies that the adversary gets n minus

246
00:08:40,080 --> 00:08:42,399
one opportunities to reject an output

247
00:08:42,399 --> 00:08:44,399
that it doesn't like this is how the

248
00:08:44,399 --> 00:08:47,040
adversary gets to inject a bias into a

249
00:08:47,040 --> 00:08:48,959
protocol generically

250
00:08:48,959 --> 00:08:50,399
now in spite of the fact that this

251
00:08:50,399 --> 00:08:52,880
framework is now over 30 years old this

252
00:08:52,880 --> 00:08:55,120
is really the best we know actually for

253
00:08:55,120 --> 00:08:56,880
a lot of tasks when you want to achieve

254
00:08:56,880 --> 00:08:59,360
guaranteed output delivery

255
00:08:59,360 --> 00:09:00,880
there's really very few things that we

256
00:09:00,880 --> 00:09:03,680
can do in less than n broadcast rounds

257
00:09:03,680 --> 00:09:05,839
and this paper identifies an entire

258
00:09:05,839 --> 00:09:07,360
class of distributions that can be

259
00:09:07,360 --> 00:09:09,360
sampled with guaranteed output delivery

260
00:09:09,360 --> 00:09:11,519
in only o of square root and broadcast

261
00:09:11,519 --> 00:09:12,640
rounds

262
00:09:12,640 --> 00:09:14,480
so then how do we do that how does our

263
00:09:14,480 --> 00:09:17,120
compiler work well first let's recall

264
00:09:17,120 --> 00:09:19,360
the spr3 protocol from earlier in which

265
00:09:19,360 --> 00:09:22,240
every party speaks one at a time posting

266
00:09:22,240 --> 00:09:24,320
exactly one message to some public

267
00:09:24,320 --> 00:09:26,800
bulletin board and let's focus uh just

268
00:09:26,800 --> 00:09:28,399
on alice for a second without loss of

269
00:09:28,399 --> 00:09:30,880
generality so because alice only speaks

270
00:09:30,880 --> 00:09:32,959
once she has a single next message

271
00:09:32,959 --> 00:09:34,720
function and this next message function

272
00:09:34,720 --> 00:09:37,200
takes as input the state of the bulletin

273
00:09:37,200 --> 00:09:39,120
board up to the moment she speaks and

274
00:09:39,120 --> 00:09:41,040
then produces as output some message for

275
00:09:41,040 --> 00:09:42,959
her to post to the bulletin board when

276
00:09:42,959 --> 00:09:44,080
she's done

277
00:09:44,080 --> 00:09:45,839
we're going to take the code of alice's

278
00:09:45,839 --> 00:09:48,560
next message function and embed it into

279
00:09:48,560 --> 00:09:50,560
a functionality i'm going to call this a

280
00:09:50,560 --> 00:09:52,800
player emulation functionality

281
00:09:52,800 --> 00:09:54,160
and when it's called by some other

282
00:09:54,160 --> 00:09:57,279
parties it produces an output exactly as

283
00:09:57,279 --> 00:09:58,720
alice would

284
00:09:58,720 --> 00:09:59,920
now i'm going to enhance this

285
00:09:59,920 --> 00:10:02,640
functionality in a couple of useful ways

286
00:10:02,640 --> 00:10:04,880
first i'm going to give it identifiable

287
00:10:04,880 --> 00:10:06,720
abort so this means that if the

288
00:10:06,720 --> 00:10:08,800
functionality is invoked by some corrupt

289
00:10:08,800 --> 00:10:10,800
party who causes the functionality to

290
00:10:10,800 --> 00:10:13,360
abort then the functionality identifies

291
00:10:13,360 --> 00:10:15,120
that corrupt party to all of the other

292
00:10:15,120 --> 00:10:17,519
participants in a consistent way so that

293
00:10:17,519 --> 00:10:19,200
they can eject them and say the next

294
00:10:19,200 --> 00:10:20,720
invocation

295
00:10:20,720 --> 00:10:23,120
now although um the identification of

296
00:10:23,120 --> 00:10:24,720
this party to all the other participants

297
00:10:24,720 --> 00:10:26,079
is consistent unfortunately the

298
00:10:26,079 --> 00:10:28,399
functionality isn't going to be fair so

299
00:10:28,399 --> 00:10:29,920
this means that the corrupt party will

300
00:10:29,920 --> 00:10:31,760
get to see the tentative output for

301
00:10:31,760 --> 00:10:34,240
alice before it decides whether or not

302
00:10:34,240 --> 00:10:36,160
to cause an abort and this is how the

303
00:10:36,160 --> 00:10:38,000
adversary gets its rejection sampling

304
00:10:38,000 --> 00:10:40,000
power in whatever outer protocol is

305
00:10:40,000 --> 00:10:42,399
going to use this functionality

306
00:10:42,399 --> 00:10:44,000
the second enhancement is going to be

307
00:10:44,000 --> 00:10:46,720
public verifiability this means roughly

308
00:10:46,720 --> 00:10:49,040
the functionality is going to write its

309
00:10:49,040 --> 00:10:50,959
output directly to the bulletin board

310
00:10:50,959 --> 00:10:53,519
just as alice would

311
00:10:53,519 --> 00:10:55,040
and finally we're going to give the

312
00:10:55,040 --> 00:10:56,480
functionality security against full

313
00:10:56,480 --> 00:10:59,440
corruption so this means that uh the

314
00:10:59,440 --> 00:11:01,040
functionality all of these properties

315
00:11:01,040 --> 00:11:02,079
you've seen

316
00:11:02,079 --> 00:11:04,320
still hold even when everybody invoking

317
00:11:04,320 --> 00:11:06,880
the functionality is corrupt we only

318
00:11:06,880 --> 00:11:08,959
require that one corrupt party be

319
00:11:08,959 --> 00:11:10,079
identified but they'd better be

320
00:11:10,079 --> 00:11:12,000
identified consistently to all of the

321
00:11:12,000 --> 00:11:13,920
other people who might read the bulletin

322
00:11:13,920 --> 00:11:15,600
board later

323
00:11:15,600 --> 00:11:17,680
and the good news is due to a sort of

324
00:11:17,680 --> 00:11:20,480
classic uh folkloric combination of the

325
00:11:20,480 --> 00:11:23,680
gmw compiler and the bmr protocol we can

326
00:11:23,680 --> 00:11:25,440
actually realize this functionality for

327
00:11:25,440 --> 00:11:27,279
any next message function that alice may

328
00:11:27,279 --> 00:11:29,360
happen to have in only a constant number

329
00:11:29,360 --> 00:11:30,880
of rounds

330
00:11:30,880 --> 00:11:32,640
so now that we can emulate a single

331
00:11:32,640 --> 00:11:34,560
player the natural thing to do would be

332
00:11:34,560 --> 00:11:37,200
to try to emulate an entire protocol we

333
00:11:37,200 --> 00:11:39,680
might try to cut all of our parties into

334
00:11:39,680 --> 00:11:42,320
committees and then have every committee

335
00:11:42,320 --> 00:11:44,640
emulate a party in the original protocol

336
00:11:44,640 --> 00:11:46,480
like this and if your party uh

337
00:11:46,480 --> 00:11:48,240
committees are a size square root n then

338
00:11:48,240 --> 00:11:50,240
of course you would achieve a protocol

339
00:11:50,240 --> 00:11:52,480
with square root of n rounds overall if

340
00:11:52,480 --> 00:11:54,240
nobody cheated

341
00:11:54,240 --> 00:11:55,519
unfortunately however the

342
00:11:55,519 --> 00:11:57,839
functionalities can only identify one

343
00:11:57,839 --> 00:11:59,519
cheater at a time

344
00:11:59,519 --> 00:12:00,959
and they're required to go in sequence

345
00:12:00,959 --> 00:12:02,800
here so if you have n minus one cheaters

346
00:12:02,800 --> 00:12:04,959
you still might need n minus one round

347
00:12:04,959 --> 00:12:06,480
to identify them all which means we

348
00:12:06,480 --> 00:12:09,519
haven't really achieved anything yet

349
00:12:09,519 --> 00:12:11,120
in order to do better than this we had

350
00:12:11,120 --> 00:12:12,639
better be sure that we can identify a

351
00:12:12,639 --> 00:12:14,480
super constant number of cheaters

352
00:12:14,480 --> 00:12:16,399
anytime no progress can be made in the

353
00:12:16,399 --> 00:12:18,480
overall protocol and our solution for

354
00:12:18,480 --> 00:12:20,160
guaranteeing this is to force all of the

355
00:12:20,160 --> 00:12:22,240
committees to compete to emulate every

356
00:12:22,240 --> 00:12:24,639
party in the original protocol so now

357
00:12:24,639 --> 00:12:27,040
our compiler looks a bit more like this

358
00:12:27,040 --> 00:12:28,959
again we cut all of our parties into

359
00:12:28,959 --> 00:12:31,120
committees square root of n committees

360
00:12:31,120 --> 00:12:32,959
each a size squared of n and now they

361
00:12:32,959 --> 00:12:34,959
all invoke the same player emulation

362
00:12:34,959 --> 00:12:37,360
functionality at the same time

363
00:12:37,360 --> 00:12:39,519
when they do this we call it a virtual

364
00:12:39,519 --> 00:12:41,600
round and in any virtual round there are

365
00:12:41,600 --> 00:12:43,360
three potential outcomes for every

366
00:12:43,360 --> 00:12:45,040
single committee i'm going to go through

367
00:12:45,040 --> 00:12:47,279
them with you here one at a time

368
00:12:47,279 --> 00:12:49,680
so the first outcome is that somebody

369
00:12:49,680 --> 00:12:51,360
cheats and causes an abort and in this

370
00:12:51,360 --> 00:12:52,639
case the functionality is going to

371
00:12:52,639 --> 00:12:54,959
identify that cheating party to all of

372
00:12:54,959 --> 00:12:56,320
the others not only in the committee but

373
00:12:56,320 --> 00:12:58,240
in the entire protocol so that that

374
00:12:58,240 --> 00:12:59,760
party can be eliminated and i'll

375
00:12:59,760 --> 00:13:00,959
introduce a little bit of visual

376
00:13:00,959 --> 00:13:02,639
shorthand in this case we're going to

377
00:13:02,639 --> 00:13:04,480
color the functionality red to signify

378
00:13:04,480 --> 00:13:06,480
this outcome

379
00:13:06,480 --> 00:13:08,720
the second outcome is that the committee

380
00:13:08,720 --> 00:13:11,200
succeeds in sampling an output for our

381
00:13:11,200 --> 00:13:13,040
virtualized alice

382
00:13:13,040 --> 00:13:14,560
and furthermore the committee has the

383
00:13:14,560 --> 00:13:17,200
lowest index among all of the committees

384
00:13:17,200 --> 00:13:19,040
who did succeed so in this case the

385
00:13:19,040 --> 00:13:21,120
committee has won the competition and

386
00:13:21,120 --> 00:13:22,720
its output will be considered to be the

387
00:13:22,720 --> 00:13:24,639
definitive output for virtualized alice

388
00:13:24,639 --> 00:13:25,920
in this round

389
00:13:25,920 --> 00:13:27,519
not only that but just like the real

390
00:13:27,519 --> 00:13:29,279
alice this committee is now done with

391
00:13:29,279 --> 00:13:30,959
the protocol they can sort of retire and

392
00:13:30,959 --> 00:13:34,399
never interact again

393
00:13:34,399 --> 00:13:36,399
and in this case actually i'll i will

394
00:13:36,399 --> 00:13:38,079
label the functionality as green before

395
00:13:38,079 --> 00:13:39,440
moving on to the

396
00:13:39,440 --> 00:13:41,600
final outcome which is that

397
00:13:41,600 --> 00:13:43,279
the committee succeeds in sampling and

398
00:13:43,279 --> 00:13:44,800
output for alice

399
00:13:44,800 --> 00:13:46,480
but there's another committee that also

400
00:13:46,480 --> 00:13:48,320
succeeded with a lower index so in this

401
00:13:48,320 --> 00:13:49,760
case the committee has lost the

402
00:13:49,760 --> 00:13:51,680
competition their work is going to go to

403
00:13:51,680 --> 00:13:53,040
waste their output won't be used

404
00:13:53,040 --> 00:13:54,320
anywhere and they'll have to return in a

405
00:13:54,320 --> 00:13:56,320
later round and try to emulate another

406
00:13:56,320 --> 00:13:57,680
party

407
00:13:57,680 --> 00:13:59,199
so in this case i'm going to label the

408
00:13:59,199 --> 00:14:01,760
functionality as yellow and once all of

409
00:14:01,760 --> 00:14:03,519
the outcomes have been decided and all

410
00:14:03,519 --> 00:14:04,959
of the fates of all the parties have

411
00:14:04,959 --> 00:14:06,399
been decided the parties who are

412
00:14:06,399 --> 00:14:08,399
eliminated or have retired they can

413
00:14:08,399 --> 00:14:09,920
leave and the remaining parties can go

414
00:14:09,920 --> 00:14:11,600
on to another virtual round potentially

415
00:14:11,600 --> 00:14:13,279
where they emulate another party in the

416
00:14:13,279 --> 00:14:15,360
original protocol

417
00:14:15,360 --> 00:14:16,560
now that you understand what all the

418
00:14:16,560 --> 00:14:18,240
outcomes are let's talk about how many

419
00:14:18,240 --> 00:14:20,639
times each one can happen so i claim

420
00:14:20,639 --> 00:14:23,279
that a committee can be read at most

421
00:14:23,279 --> 00:14:25,440
square root of end times because every

422
00:14:25,440 --> 00:14:27,199
time it's read one party from that

423
00:14:27,199 --> 00:14:28,560
committee is eliminated and the

424
00:14:28,560 --> 00:14:30,079
committee only starts with square root

425
00:14:30,079 --> 00:14:31,920
of n parties

426
00:14:31,920 --> 00:14:33,279
i claim that every committee can be

427
00:14:33,279 --> 00:14:35,279
green at most one time because after

428
00:14:35,279 --> 00:14:37,199
this event happens the entire committee

429
00:14:37,199 --> 00:14:39,279
retires and doesn't interact again and i

430
00:14:39,279 --> 00:14:40,639
claim that the committee can be yellow

431
00:14:40,639 --> 00:14:43,279
at most square root of n minus one times

432
00:14:43,279 --> 00:14:44,800
because this event only occurs when

433
00:14:44,800 --> 00:14:46,480
another committee is green and there's

434
00:14:46,480 --> 00:14:47,839
only square root of n minus one other

435
00:14:47,839 --> 00:14:49,360
committees and they can all only be

436
00:14:49,360 --> 00:14:51,680
green once so if you add up all the

437
00:14:51,680 --> 00:14:53,360
outcomes you arrive at the conclusion

438
00:14:53,360 --> 00:14:54,959
that the maximum number of virtual

439
00:14:54,959 --> 00:14:57,760
rounds is two square root of n and since

440
00:14:57,760 --> 00:14:59,519
we know it takes only a constant number

441
00:14:59,519 --> 00:15:02,079
of real broadcast rounds to realize a

442
00:15:02,079 --> 00:15:04,079
virtual round we know that the total

443
00:15:04,079 --> 00:15:06,639
number of rounds in the protocol is o of

444
00:15:06,639 --> 00:15:08,240
square root of n

445
00:15:08,240 --> 00:15:10,639
let's now do a sort of a simple example

446
00:15:10,639 --> 00:15:11,920
for you so that you can see how

447
00:15:11,920 --> 00:15:14,240
everything kind of hangs together so

448
00:15:14,240 --> 00:15:16,160
on the right hand side i'm going to show

449
00:15:16,160 --> 00:15:17,920
you the outcomes of all the committees

450
00:15:17,920 --> 00:15:19,440
in every virtual round i'm going to show

451
00:15:19,440 --> 00:15:22,800
you how it maps onto the original spr3

452
00:15:22,800 --> 00:15:24,800
protocol and its rounds and on the left

453
00:15:24,800 --> 00:15:26,480
hand side i'm going to observe some

454
00:15:26,480 --> 00:15:28,160
things for you about the protocol as it

455
00:15:28,160 --> 00:15:29,279
progresses

456
00:15:29,279 --> 00:15:30,560
and the first thing to observe is

457
00:15:30,560 --> 00:15:32,880
actually not every virtual round

458
00:15:32,880 --> 00:15:34,480
corresponds exactly to a round in the

459
00:15:34,480 --> 00:15:36,560
spr3 protocol and this is because it's

460
00:15:36,560 --> 00:15:38,639
possible that every committee aborts and

461
00:15:38,639 --> 00:15:40,480
therefore nobody successfully emulates

462
00:15:40,480 --> 00:15:41,759
alice in this case they actually have to

463
00:15:41,759 --> 00:15:44,000
try to emulate alice again in the second

464
00:15:44,000 --> 00:15:46,160
round but once somebody succeeds in

465
00:15:46,160 --> 00:15:47,759
emulating alice they can move on to the

466
00:15:47,759 --> 00:15:50,480
second party here it's bob and at this

467
00:15:50,480 --> 00:15:52,000
point you can see the first committee

468
00:15:52,000 --> 00:15:53,920
actually only has one party left it's

469
00:15:53,920 --> 00:15:56,240
eliminated three out of its four parties

470
00:15:56,240 --> 00:15:58,240
in this case of course the one lasting

471
00:15:58,240 --> 00:16:00,160
party doesn't actually have to call any

472
00:16:00,160 --> 00:16:02,079
of the mpc stuff it can just use carol's

473
00:16:02,079 --> 00:16:04,399
next message function as carol would for

474
00:16:04,399 --> 00:16:06,240
the next round

475
00:16:06,240 --> 00:16:07,839
so finally we have only one committee

476
00:16:07,839 --> 00:16:09,920
left and it turns out this one only had

477
00:16:09,920 --> 00:16:12,000
cheaters in it which means that it never

478
00:16:12,000 --> 00:16:14,480
managed to produce an emulated output

479
00:16:14,480 --> 00:16:16,480
for the final party in the original spr3

480
00:16:16,480 --> 00:16:17,519
protocol

481
00:16:17,519 --> 00:16:18,959
this turns out to be fine though because

482
00:16:18,959 --> 00:16:20,880
we know that the original spr3 protocol

483
00:16:20,880 --> 00:16:22,880
had guaranteed output delivery against a

484
00:16:22,880 --> 00:16:24,560
dishonest majority which meant that it

485
00:16:24,560 --> 00:16:26,000
could still deliver an output even if

486
00:16:26,000 --> 00:16:28,079
the last party never spoke consequently

487
00:16:28,079 --> 00:16:30,959
we'll get an output in this case as well

488
00:16:30,959 --> 00:16:32,399
so now you've seen the compiler you

489
00:16:32,399 --> 00:16:33,759
understand how it achieves quadratic

490
00:16:33,759 --> 00:16:35,440
round compression let's talk a little

491
00:16:35,440 --> 00:16:37,360
bit about the bias that the compiler

492
00:16:37,360 --> 00:16:39,920
allows the adversary to inject and now

493
00:16:39,920 --> 00:16:41,759
i'm going to kind of abandon my

494
00:16:41,759 --> 00:16:43,600
generalization and talk again just about

495
00:16:43,600 --> 00:16:46,079
the powers of tau context and i'm going

496
00:16:46,079 --> 00:16:48,560
to stop talking about protocols and talk

497
00:16:48,560 --> 00:16:50,240
instead about the functionalities that

498
00:16:50,240 --> 00:16:52,240
the protocols realize

499
00:16:52,240 --> 00:16:54,160
so first let's discuss the functionality

500
00:16:54,160 --> 00:16:57,360
for the original spr3 powers of towel

501
00:16:57,360 --> 00:16:59,199
sampling protocol this functionality is

502
00:16:59,199 --> 00:17:01,759
quite simple it begins by sampling a

503
00:17:01,759 --> 00:17:03,199
multiplicative share of towel for the

504
00:17:03,199 --> 00:17:05,919
functionality and computing a partial

505
00:17:05,919 --> 00:17:07,760
srs for the functionality from that

506
00:17:07,760 --> 00:17:09,359
multiplicative share which is then

507
00:17:09,359 --> 00:17:11,039
handed to the adversary

508
00:17:11,039 --> 00:17:13,119
the adversary replies with its own

509
00:17:13,119 --> 00:17:14,880
multiplicative share

510
00:17:14,880 --> 00:17:17,679
of tau and the functionality updates the

511
00:17:17,679 --> 00:17:19,520
partial srs with the adversaries

512
00:17:19,520 --> 00:17:21,359
multiplicative share to produce an

513
00:17:21,359 --> 00:17:22,559
output that can be delivered to

514
00:17:22,559 --> 00:17:23,919
everybody

515
00:17:23,919 --> 00:17:25,199
now during the invocation of this

516
00:17:25,199 --> 00:17:28,000
functionality two different srs's

517
00:17:28,000 --> 00:17:30,080
entered the adversaries view the first

518
00:17:30,080 --> 00:17:32,799
one is the unbiased srs which comprises

519
00:17:32,799 --> 00:17:35,200
the powers of only the functionality

520
00:17:35,200 --> 00:17:36,559
share of tau

521
00:17:36,559 --> 00:17:39,440
and the second is the bias output srs

522
00:17:39,440 --> 00:17:42,080
which comprises the powers of the

523
00:17:42,080 --> 00:17:43,520
product of the adversary and

524
00:17:43,520 --> 00:17:46,000
functionality's shares

525
00:17:46,000 --> 00:17:48,160
now when you take uh the protocol and

526
00:17:48,160 --> 00:17:49,840
you put it through our compiler the

527
00:17:49,840 --> 00:17:51,600
functionality that it realizes the end

528
00:17:51,600 --> 00:17:53,360
is actually relatively similar in fact

529
00:17:53,360 --> 00:17:55,760
it starts out pretty much the same

530
00:17:55,760 --> 00:17:57,760
but at the end the adversary gets an

531
00:17:57,760 --> 00:18:00,080
additional option instead of sending a

532
00:18:00,080 --> 00:18:02,799
multiplicative share tau it could

533
00:18:02,799 --> 00:18:05,039
instead send a special symbol that tells

534
00:18:05,039 --> 00:18:07,520
the functionality that it rejects this

535
00:18:07,520 --> 00:18:09,280
partial srs that the functionality has

536
00:18:09,280 --> 00:18:11,039
proposed and in this case the function

537
00:18:11,039 --> 00:18:12,799
only has to start over it has to sample

538
00:18:12,799 --> 00:18:15,120
a new share of tau compute a new partial

539
00:18:15,120 --> 00:18:17,039
srs candidate to the adversary do the

540
00:18:17,039 --> 00:18:18,799
whole thing again

541
00:18:18,799 --> 00:18:20,480
so when this functionality is invoked

542
00:18:20,480 --> 00:18:23,280
the adversary sees a lot more srs and it

543
00:18:23,280 --> 00:18:25,360
gets to select one of them in particular

544
00:18:25,360 --> 00:18:28,320
it sees as many as it likes different

545
00:18:28,320 --> 00:18:30,720
uniform srs is from the space of all of

546
00:18:30,720 --> 00:18:32,880
the valid srs that exist

547
00:18:32,880 --> 00:18:34,720
and at the end whichever one it selects

548
00:18:34,720 --> 00:18:37,679
it sees that srs again updated uh with

549
00:18:37,679 --> 00:18:39,760
its own share of towel

550
00:18:39,760 --> 00:18:41,840
now i claim that this rejection sampling

551
00:18:41,840 --> 00:18:43,440
mechanism that i've just given the

552
00:18:43,440 --> 00:18:46,000
adversary actually gives the adversary

553
00:18:46,000 --> 00:18:49,039
no additional power and specifically

554
00:18:49,039 --> 00:18:51,200
this means that f compile tau perfectly

555
00:18:51,200 --> 00:18:53,520
realizes f powers of tau

556
00:18:53,520 --> 00:18:55,520
of course this implies that there must

557
00:18:55,520 --> 00:18:58,000
exist some simulator such that for all

558
00:18:58,000 --> 00:19:00,480
adversaries the experiment involving f

559
00:19:00,480 --> 00:19:02,240
powell tau and the simulator has an

560
00:19:02,240 --> 00:19:05,039
output distribution exactly equal to the

561
00:19:05,039 --> 00:19:07,360
experiment involving f compiled tau and

562
00:19:07,360 --> 00:19:08,640
the adversary

563
00:19:08,640 --> 00:19:09,919
and i'm not going to show it to you now

564
00:19:09,919 --> 00:19:12,000
but in the paper we do in fact construct

565
00:19:12,000 --> 00:19:14,240
such a simulator not only that but the

566
00:19:14,240 --> 00:19:16,080
simulator is general among all

567
00:19:16,080 --> 00:19:17,840
distributions that have what we call

568
00:19:17,840 --> 00:19:19,840
perfectly re-randomizable sampling

569
00:19:19,840 --> 00:19:22,080
functions i won't describe this exactly

570
00:19:22,080 --> 00:19:23,200
the important thing to know is that

571
00:19:23,200 --> 00:19:25,280
mixnets are also such a distribution

572
00:19:25,280 --> 00:19:26,640
consequently

573
00:19:26,640 --> 00:19:28,480
our compiler can be used on a verifiable

574
00:19:28,480 --> 00:19:30,080
nix net without any degradation in

575
00:19:30,080 --> 00:19:31,679
security

576
00:19:31,679 --> 00:19:34,320
so finally a couple of open questions

577
00:19:34,320 --> 00:19:35,760
first of all we'd like to know are there

578
00:19:35,760 --> 00:19:38,160
any other interesting spr3 protocols we

579
00:19:38,160 --> 00:19:39,919
looked through the literature and found

580
00:19:39,919 --> 00:19:42,000
only two but if you happen to know

581
00:19:42,000 --> 00:19:43,280
another one or can develop one you get

582
00:19:43,280 --> 00:19:44,880
an automatic round compression result

583
00:19:44,880 --> 00:19:46,559
for it from abyss

584
00:19:46,559 --> 00:19:48,320
second we'd like to know if these

585
00:19:48,320 --> 00:19:50,160
techniques can be applied with concrete

586
00:19:50,160 --> 00:19:52,320
efficiency so in this talk i've

587
00:19:52,320 --> 00:19:54,080
suggested to you that maybe you ought to

588
00:19:54,080 --> 00:19:56,799
take a next message function with d

589
00:19:56,799 --> 00:19:58,880
elliptic curve scalar operations and

590
00:19:58,880 --> 00:20:00,720
then render it as a boolean circuit and

591
00:20:00,720 --> 00:20:02,880
put that circuit into the bmr protocol

592
00:20:02,880 --> 00:20:04,400
and then put the bmr protocol into the

593
00:20:04,400 --> 00:20:06,880
gmw compiler and then do all of that

594
00:20:06,880 --> 00:20:08,720
order end times and make everyone in the

595
00:20:08,720 --> 00:20:11,520
world verify all order n instances this

596
00:20:11,520 --> 00:20:13,440
is like clearly not

597
00:20:13,440 --> 00:20:16,000
uh concretely efficient right

598
00:20:16,000 --> 00:20:17,440
but we think that this isn't actually an

599
00:20:17,440 --> 00:20:18,880
inherent problem we think that this is

600
00:20:18,880 --> 00:20:20,480
probably just an effect of the fact that

601
00:20:20,480 --> 00:20:23,120
the compiler has to be generic and sort

602
00:20:23,120 --> 00:20:26,080
of in service of showing that oops

603
00:20:26,080 --> 00:20:27,440
and go back here

604
00:20:27,440 --> 00:20:29,280
service is showing that we have an

605
00:20:29,280 --> 00:20:31,280
additional construction in the paper

606
00:20:31,280 --> 00:20:33,280
which approaches the powers of tau

607
00:20:33,280 --> 00:20:35,440
sampling problem directly and avoids

608
00:20:35,440 --> 00:20:37,600
generic npc and generic zero knowledge

609
00:20:37,600 --> 00:20:39,440
entirely except for a little bit of

610
00:20:39,440 --> 00:20:41,520
generic arithmetic mpc for computing a

611
00:20:41,520 --> 00:20:43,360
couple of products as eq

612
00:20:43,360 --> 00:20:44,720
in addition we give a couple of

613
00:20:44,720 --> 00:20:46,960
techniques for verifying instances far

614
00:20:46,960 --> 00:20:48,720
more efficiently than they can initially

615
00:20:48,720 --> 00:20:50,159
be computed

616
00:20:50,159 --> 00:20:52,080
so everyone thank you for listening um

617
00:20:52,080 --> 00:20:53,600
our paper can be found online in its

618
00:20:53,600 --> 00:20:56,559
full version as eprint 202257

619
00:20:56,559 --> 00:21:00,440
and i'll take any questions

620
00:21:18,320 --> 00:21:20,640
for your great presentation

621
00:21:20,640 --> 00:21:23,360
so i just maybe you mentioned but i must

622
00:21:23,360 --> 00:21:24,559
miss maybe

623
00:21:24,559 --> 00:21:26,320
but my question is that do you still

624
00:21:26,320 --> 00:21:28,320
have this possibility that parties can

625
00:21:28,320 --> 00:21:30,080
join in future you don't need to have

626
00:21:30,080 --> 00:21:31,840
all of them at the beginning

627
00:21:31,840 --> 00:21:33,520
uh yes so this is something that's been

628
00:21:33,520 --> 00:21:35,120
done for i know a couple of snark

629
00:21:35,120 --> 00:21:36,640
constructions in the past where i think

630
00:21:36,640 --> 00:21:37,840
they call it the continuous powers of

631
00:21:37,840 --> 00:21:39,840
tao people can sort of show up at any

632
00:21:39,840 --> 00:21:41,840
point um that remains absolutely

633
00:21:41,840 --> 00:21:43,679
possible under this compiler in fact if

634
00:21:43,679 --> 00:21:45,039
you have a group of parties at once you

635
00:21:45,039 --> 00:21:47,440
can apply the compiler just to those and

636
00:21:47,440 --> 00:21:48,720
then some more can show up later and you

637
00:21:48,720 --> 00:21:50,400
can apply the compiler to those and so

638
00:21:50,400 --> 00:21:52,240
on um

639
00:21:52,240 --> 00:21:53,600
we don't sort of show anything about

640
00:21:53,600 --> 00:21:54,960
this in the paper but we did think

641
00:21:54,960 --> 00:21:56,320
through it and it there should be no

642
00:21:56,320 --> 00:21:59,840
problem making this work

643
00:22:11,200 --> 00:22:13,200
thank you for the interesting talk why

644
00:22:13,200 --> 00:22:15,600
can't you use the yellow groups

645
00:22:15,600 --> 00:22:18,159
as they are the result of the yellow

646
00:22:18,159 --> 00:22:20,720
groups why can't you use them

647
00:22:20,720 --> 00:22:22,880
as they are why do you have to

648
00:22:22,880 --> 00:22:24,080
so this is something i'm not familiar

649
00:22:24,080 --> 00:22:25,600
with i'd love to come talk to you i

650
00:22:25,600 --> 00:22:26,880
don't have an answer for you right now

651
00:22:26,880 --> 00:22:30,000
so i'll come talk to you afterwards

652
00:22:30,640 --> 00:22:31,919
maybe somebody else knows the answer to

653
00:22:31,919 --> 00:22:34,240
that one

654
00:22:37,280 --> 00:22:38,720
oh why didn't i use the yellow i thought

655
00:22:38,720 --> 00:22:40,480
it was like some kind of uh some kind of

656
00:22:40,480 --> 00:22:42,240
mathematical construction

657
00:22:42,240 --> 00:22:43,919
um

658
00:22:43,919 --> 00:22:46,559
why don't you use the yellow groups um

659
00:22:46,559 --> 00:22:48,880
the answer is that there's not really a

660
00:22:48,880 --> 00:22:51,440
once you have two sort of parallel

661
00:22:51,440 --> 00:22:54,000
uh strings that contain two partial

662
00:22:54,000 --> 00:22:56,240
powers of tau constructions there's no

663
00:22:56,240 --> 00:22:58,240
good way to combine them that preserves

664
00:22:58,240 --> 00:23:00,159
guaranteed output delivery basically any

665
00:23:00,159 --> 00:23:02,000
way you would want to combine them would

666
00:23:02,000 --> 00:23:04,320
allow somebody to cause an abort that

667
00:23:04,320 --> 00:23:06,000
denies the output or at least that's

668
00:23:06,000 --> 00:23:06,720
what

669
00:23:06,720 --> 00:23:08,080
that's what we concluded after thinking

670
00:23:08,080 --> 00:23:10,159
about it for a while in fact we did at

671
00:23:10,159 --> 00:23:12,880
one point have another construction that

672
00:23:12,880 --> 00:23:14,880
did something like what you're asking it

673
00:23:14,880 --> 00:23:16,559
said that like uh you know if you have

674
00:23:16,559 --> 00:23:18,159
two people that succeeded at sort of the

675
00:23:18,159 --> 00:23:20,559
same time you'll recombine afterwards

676
00:23:20,559 --> 00:23:22,320
but it turned out that that construction

677
00:23:22,320 --> 00:23:24,880
had the same uh quadratic bound at this

678
00:23:24,880 --> 00:23:27,360
one um essentially by coincidence it

679
00:23:27,360 --> 00:23:29,520
didn't really share any features

680
00:23:29,520 --> 00:23:31,520
uh so this one we decided to present

681
00:23:31,520 --> 00:23:35,000
since it's much simpler

682
00:23:36,320 --> 00:23:39,600
i i i also have a question okay if the

683
00:23:39,600 --> 00:23:41,760
if the number of uh malicious parties

684
00:23:41,760 --> 00:23:44,880
isn't n minus one it's like n half plus

685
00:23:44,880 --> 00:23:46,320
t yes

686
00:23:46,320 --> 00:23:48,159
what happens to your protocol in that

687
00:23:48,159 --> 00:23:50,159
case how many rounds do you need how

688
00:23:50,159 --> 00:23:52,960
many rounds do you need um

689
00:23:52,960 --> 00:23:54,480
let me think about for that for a moment

690
00:23:54,480 --> 00:23:56,320
so basically the number of rounds that

691
00:23:56,320 --> 00:23:58,159
you require stretches between square

692
00:23:58,159 --> 00:24:00,240
root of n and two square root of n so

693
00:24:00,240 --> 00:24:02,240
the best case is that you sort of

694
00:24:02,240 --> 00:24:04,000
emulate square root of n parties over

695
00:24:04,000 --> 00:24:05,440
the course of it unfortunately like the

696
00:24:05,440 --> 00:24:06,799
way it's constructed you can't really do

697
00:24:06,799 --> 00:24:08,720
better than that the worst case is two

698
00:24:08,720 --> 00:24:11,120
square root of n yeah yeah

699
00:24:11,120 --> 00:24:15,239
okay thanks a lot

700
00:24:20,320 --> 00:24:24,320
um so we're done for this session and

701
00:24:24,320 --> 00:24:27,879
it's time for a break

