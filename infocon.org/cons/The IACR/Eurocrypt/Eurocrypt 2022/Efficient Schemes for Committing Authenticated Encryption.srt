1
00:00:00,000 --> 00:00:02,639
yes we can hear you

2
00:00:02,639 --> 00:00:06,000
uh just a second so that you appear

3
00:00:06,000 --> 00:00:08,800
on the screen great

4
00:00:08,800 --> 00:00:10,880
you're sharing your screen so

5
00:00:10,880 --> 00:00:12,400
everything's good

6
00:00:12,400 --> 00:00:15,440
okay so the floor is yours

7
00:00:15,440 --> 00:00:17,919
thank you

8
00:00:19,199 --> 00:00:20,880
okay thank you pasco for the

9
00:00:20,880 --> 00:00:23,520
introduction

10
00:00:24,000 --> 00:00:27,279
so every day when we read emails

11
00:00:27,279 --> 00:00:30,320
browse facebook uh have a talk with

12
00:00:30,320 --> 00:00:32,320
colleagues via zoom

13
00:00:32,320 --> 00:00:35,760
our security is insured by authenticated

14
00:00:35,760 --> 00:00:38,239
encryption rae

15
00:00:38,239 --> 00:00:41,200
a tool that delivers both privacy and

16
00:00:41,200 --> 00:00:44,000
authenticity

17
00:00:44,000 --> 00:00:46,960
the conception of ie emerged in the year

18
00:00:46,960 --> 00:00:48,160
2000

19
00:00:48,160 --> 00:00:51,039
as a way to add authenticity to

20
00:00:51,039 --> 00:00:53,120
classical encryption

21
00:00:53,120 --> 00:00:55,280
and then quickly move from theory to

22
00:00:55,280 --> 00:00:57,199
practice

23
00:00:57,199 --> 00:00:58,960
since then there have been a number of

24
00:00:58,960 --> 00:01:01,680
efforts in strengthening the original

25
00:01:01,680 --> 00:01:02,879
notion

26
00:01:02,879 --> 00:01:05,760
such as unique nonce ae

27
00:01:05,760 --> 00:01:09,280
our misuse resistant ie

28
00:01:09,280 --> 00:01:12,720
these efforts have led into widely used

29
00:01:12,720 --> 00:01:16,560
schemes in the tos ip6 and many other

30
00:01:16,560 --> 00:01:19,119
network protocols

31
00:01:19,119 --> 00:01:20,240
still

32
00:01:20,240 --> 00:01:24,560
despite a huge volume on it works

33
00:01:24,560 --> 00:01:27,119
essentially everything still falls under

34
00:01:27,119 --> 00:01:29,040
the umbrella of

35
00:01:29,040 --> 00:01:31,920
privacy and authenticity

36
00:01:31,920 --> 00:01:34,799
and have been a long hair belief that

37
00:01:34,799 --> 00:01:37,759
these notions are enough for practical

38
00:01:37,759 --> 00:01:40,560
purposes

39
00:01:40,560 --> 00:01:43,040
surprisingly in a recent attack known as

40
00:01:43,040 --> 00:01:45,840
the partitioning oracle attack

41
00:01:45,840 --> 00:01:48,799
land graphs and written path shatter

42
00:01:48,799 --> 00:01:50,720
this common belief

43
00:01:50,720 --> 00:01:52,880
they demonstrate a break of standard

44
00:01:52,880 --> 00:01:55,200
encryptions in the context of

45
00:01:55,200 --> 00:01:58,560
password-based encryption

46
00:01:58,719 --> 00:02:01,280
so in this setting the adversary tries

47
00:02:01,280 --> 00:02:04,079
to exploit a server as a decryption

48
00:02:04,079 --> 00:02:08,160
article to recover passwords

49
00:02:08,160 --> 00:02:10,720
strangely the attack has nothing to do

50
00:02:10,720 --> 00:02:12,560
with authenticity

51
00:02:12,560 --> 00:02:15,920
or privacy of the inclusion scheme

52
00:02:15,920 --> 00:02:19,120
instead the adversary tries to find some

53
00:02:19,120 --> 00:02:21,360
form of multi-collisions

54
00:02:21,360 --> 00:02:23,840
on the server text of passwords in the

55
00:02:23,840 --> 00:02:26,160
dictionary

56
00:02:26,160 --> 00:02:29,520
if we can find an s-way multi-collision

57
00:02:29,520 --> 00:02:32,560
it can speed up by a factor of s

58
00:02:32,560 --> 00:02:34,840
compared to a brute force

59
00:02:34,840 --> 00:02:37,280
attack and for standard encryption

60
00:02:37,280 --> 00:02:38,400
schemes

61
00:02:38,400 --> 00:02:40,720
s can be as big as

62
00:02:40,720 --> 00:02:41,920
thousands

63
00:02:41,920 --> 00:02:45,280
making the attack practical

64
00:02:47,040 --> 00:02:47,840
so

65
00:02:47,840 --> 00:02:50,239
the partitioning arc attack demonstrate

66
00:02:50,239 --> 00:02:51,040
that

67
00:02:51,040 --> 00:02:53,680
in contrary to common belief

68
00:02:53,680 --> 00:02:58,640
privacy and authenticity are not enough

69
00:02:58,640 --> 00:03:01,599
and it's not only place where things go

70
00:03:01,599 --> 00:03:03,040
wrong

71
00:03:03,040 --> 00:03:06,000
consider facebook message ranking

72
00:03:06,000 --> 00:03:08,640
so here alice and bob have an encrypted

73
00:03:08,640 --> 00:03:12,000
conversation via facebook messenger

74
00:03:12,000 --> 00:03:15,519
now thanks to android inclusion

75
00:03:15,519 --> 00:03:18,480
facebook doesn't know your key anymore

76
00:03:18,480 --> 00:03:20,080
still

77
00:03:20,080 --> 00:03:22,480
it allows you to report abuse but you

78
00:03:22,480 --> 00:03:24,560
have to send the decryption key for

79
00:03:24,560 --> 00:03:27,280
verification

80
00:03:27,280 --> 00:03:29,519
unfortunately there's a way to break

81
00:03:29,519 --> 00:03:30,959
this mechanism

82
00:03:30,959 --> 00:03:33,200
by sending a fake key

83
00:03:33,200 --> 00:03:35,840
and associated data

84
00:03:35,840 --> 00:03:38,879
it can turn alice's benign message into

85
00:03:38,879 --> 00:03:40,640
a malicious one

86
00:03:40,640 --> 00:03:44,840
and she would be wrongly penalized for

87
00:03:44,840 --> 00:03:48,319
that again this has nothing to do with

88
00:03:48,319 --> 00:03:50,959
privacy or authenticity

89
00:03:50,959 --> 00:03:52,720
because the adversary

90
00:03:52,720 --> 00:03:56,720
both in this case knows the key

91
00:03:57,040 --> 00:03:59,439
instead what we need here is a new

92
00:03:59,439 --> 00:04:00,560
notion

93
00:04:00,560 --> 00:04:04,319
known as committing security

94
00:04:04,959 --> 00:04:07,120
informally this means that the server

95
00:04:07,120 --> 00:04:10,799
tags should be a commitment of the key

96
00:04:10,799 --> 00:04:12,959
and for some applications

97
00:04:12,959 --> 00:04:14,879
such as message banking

98
00:04:14,879 --> 00:04:18,798
you want to commit the message as well

99
00:04:18,959 --> 00:04:21,918
although committing security is new it

100
00:04:21,918 --> 00:04:23,040
captures

101
00:04:23,040 --> 00:04:25,680
what practitioners intuitively think

102
00:04:25,680 --> 00:04:28,800
about encryption schemes

103
00:04:28,800 --> 00:04:30,240
unfortunately

104
00:04:30,240 --> 00:04:33,840
this intuition is not supported by any

105
00:04:33,840 --> 00:04:36,639
standard-based schemes

106
00:04:36,639 --> 00:04:39,680
yet it is urgently demanded by many

107
00:04:39,680 --> 00:04:41,040
applications

108
00:04:41,040 --> 00:04:43,919
such as subscribe with google

109
00:04:43,919 --> 00:04:48,639
are the opec password-based exchange

110
00:04:49,919 --> 00:04:52,479
that mean a couple works on formalizing

111
00:04:52,479 --> 00:04:54,639
committing security

112
00:04:54,639 --> 00:04:56,960
but if you look closely

113
00:04:56,960 --> 00:04:58,880
everybody speaks a slightly different

114
00:04:58,880 --> 00:05:00,639
dialect

115
00:05:00,639 --> 00:05:03,520
someone wants to commit just a key

116
00:05:03,520 --> 00:05:06,240
some wants to commit everything

117
00:05:06,240 --> 00:05:08,240
some work deals with the old-fashioned

118
00:05:08,240 --> 00:05:11,280
probabilistic ie subdues with the

119
00:05:11,280 --> 00:05:14,479
standard the uniqueness ie

120
00:05:14,479 --> 00:05:18,240
idle even defines a new type of ae with

121
00:05:18,240 --> 00:05:21,039
a different syntax

122
00:05:21,039 --> 00:05:23,600
so that's currently a lack of a unified

123
00:05:23,600 --> 00:05:26,000
systematic treatment for committing

124
00:05:26,000 --> 00:05:27,520
security

125
00:05:27,520 --> 00:05:30,000
and partly because of this

126
00:05:30,000 --> 00:05:31,919
current solutions are somewhat

127
00:05:31,919 --> 00:05:34,160
frustrating

128
00:05:34,160 --> 00:05:37,360
earlier schemes tend to be pretty slow

129
00:05:37,360 --> 00:05:41,199
as slow as hashing the message

130
00:05:41,199 --> 00:05:43,680
recent schemes are faster

131
00:05:43,680 --> 00:05:45,360
but you consume more bandwidth

132
00:05:45,360 --> 00:05:46,639
unnecessary

133
00:05:46,639 --> 00:05:50,560
say two additional blocks per message

134
00:05:50,560 --> 00:05:51,840
in addition

135
00:05:51,840 --> 00:05:54,960
why uniqueness a schemes like gcm

136
00:05:54,960 --> 00:05:57,280
receive a lot of attention from both

137
00:05:57,280 --> 00:06:00,080
industry and academia

138
00:06:00,080 --> 00:06:02,479
there has been no effort in fixing

139
00:06:02,479 --> 00:06:04,919
missile resistance a schemes like aes

140
00:06:04,919 --> 00:06:08,479
astcm ib

141
00:06:09,039 --> 00:06:10,400
so in this work

142
00:06:10,400 --> 00:06:12,560
we give a systematic treatment for

143
00:06:12,560 --> 00:06:14,479
committing notions

144
00:06:14,479 --> 00:06:15,759
and based on that

145
00:06:15,759 --> 00:06:20,080
we build genetic transforms utc and rtc

146
00:06:20,080 --> 00:06:23,360
for unique nonce and misused resistant

147
00:06:23,360 --> 00:06:25,360
ae

148
00:06:25,360 --> 00:06:27,440
the utc transform

149
00:06:27,440 --> 00:06:30,800
is a generalization of a prior work by

150
00:06:30,800 --> 00:06:32,560
albertini at all

151
00:06:32,560 --> 00:06:34,639
but it allows a more efficient

152
00:06:34,639 --> 00:06:37,600
instantiation

153
00:06:38,400 --> 00:06:42,800
now why utc and rtc works genetically

154
00:06:42,800 --> 00:06:45,280
they still demand one additional block

155
00:06:45,280 --> 00:06:47,039
per ciphertext

156
00:06:47,039 --> 00:06:50,160
and overhead for small messages is still

157
00:06:50,160 --> 00:06:52,479
large

158
00:06:52,560 --> 00:06:54,639
to bridge the performance gap

159
00:06:54,639 --> 00:06:57,440
we view committing variants of

160
00:06:57,440 --> 00:07:00,840
ccm and astcm

161
00:07:00,840 --> 00:07:04,800
sib compared to the original schemes

162
00:07:04,800 --> 00:07:07,039
these variants introduce very tiny

163
00:07:07,039 --> 00:07:08,880
changes

164
00:07:08,880 --> 00:07:11,440
there's no celtic expansion

165
00:07:11,440 --> 00:07:12,880
and the overhead

166
00:07:12,880 --> 00:07:16,360
is very little

167
00:07:16,800 --> 00:07:19,440
moreover let me mention that prior work

168
00:07:19,440 --> 00:07:22,319
on committing security only provide

169
00:07:22,319 --> 00:07:25,680
analysis in a single user setting

170
00:07:25,680 --> 00:07:27,840
in contrast here we provide strong

171
00:07:27,840 --> 00:07:30,319
multi-user analysis for all schemes in

172
00:07:30,319 --> 00:07:32,880
our paper

173
00:07:34,319 --> 00:07:36,960
now let me give you a visual comparison

174
00:07:36,960 --> 00:07:38,800
on the performance of our unique

175
00:07:38,800 --> 00:07:40,080
knowledge schemes

176
00:07:40,080 --> 00:07:42,960
cuc1 and udc

177
00:07:42,960 --> 00:07:45,919
with a prior work of opportunity that is

178
00:07:45,919 --> 00:07:49,039
deployed on amazon cloud

179
00:07:49,039 --> 00:07:52,080
now as illustrated by the picture

180
00:07:52,080 --> 00:07:54,240
our schemes are a lot more efficient

181
00:07:54,240 --> 00:07:56,319
than the prime work

182
00:07:56,319 --> 00:07:58,560
and for our cuc-1

183
00:07:58,560 --> 00:08:01,360
the overhead is negligible even for

184
00:08:01,360 --> 00:08:03,840
small messages

185
00:08:03,840 --> 00:08:06,560
and the same trend continues for our

186
00:08:06,560 --> 00:08:10,080
missile resistance schemes

187
00:08:10,879 --> 00:08:12,479
now in today's talk

188
00:08:12,479 --> 00:08:15,039
i'll introduce the framework of

189
00:08:15,039 --> 00:08:16,720
committing notions

190
00:08:16,720 --> 00:08:19,199
and i will show you how to achieve that

191
00:08:19,199 --> 00:08:22,720
in the context of ccm

192
00:08:23,039 --> 00:08:26,000
but before we get into that

193
00:08:26,000 --> 00:08:28,720
let me begin by briefly reviewing the

194
00:08:28,720 --> 00:08:31,919
syntax of ae schemes

195
00:08:31,919 --> 00:08:34,719
so syntactically an a scheme consists of

196
00:08:34,719 --> 00:08:36,640
an encryption algorithm

197
00:08:36,640 --> 00:08:38,399
and a decryption one

198
00:08:38,399 --> 00:08:40,640
both deterministic

199
00:08:40,640 --> 00:08:43,440
encryption text as input the key k

200
00:08:43,440 --> 00:08:47,120
a message m announce n to produce a self

201
00:08:47,120 --> 00:08:48,800
tax c

202
00:08:48,800 --> 00:08:50,000
conversely

203
00:08:50,000 --> 00:08:52,000
decryption text the key

204
00:08:52,000 --> 00:08:54,320
a cell text nons

205
00:08:54,320 --> 00:08:57,120
to produce either message m

206
00:08:57,120 --> 00:08:59,360
are a symbol

207
00:08:59,360 --> 00:09:02,880
indicating invalidity

208
00:09:03,839 --> 00:09:05,920
they also take an additional argument

209
00:09:05,920 --> 00:09:10,160
known as associated data or id

210
00:09:10,160 --> 00:09:12,160
it is a string that for some reason

211
00:09:12,160 --> 00:09:14,000
cannot be encrypted

212
00:09:14,000 --> 00:09:17,440
but still should be authenticated

213
00:09:17,440 --> 00:09:19,360
for example if you include network

214
00:09:19,360 --> 00:09:20,640
packages

215
00:09:20,640 --> 00:09:22,880
then you cannot include the headers

216
00:09:22,880 --> 00:09:25,680
because routers need to see that to move

217
00:09:25,680 --> 00:09:28,000
to the next hub

218
00:09:28,000 --> 00:09:30,240
so in that context your message will be

219
00:09:30,240 --> 00:09:32,640
the payload and the id would be the

220
00:09:32,640 --> 00:09:35,120
headers

221
00:09:35,680 --> 00:09:38,800
in practice the id is often short

222
00:09:38,800 --> 00:09:44,640
for example ip headers at most 60 bytes

223
00:09:46,399 --> 00:09:48,399
now let me give you an overview on the

224
00:09:48,399 --> 00:09:51,839
committing definitions

225
00:09:52,240 --> 00:09:53,720
it turns out that there is no

226
00:09:53,720 --> 00:09:56,959
one-size-fits-all notion but a hierarchy

227
00:09:56,959 --> 00:09:59,120
of definitions

228
00:09:59,120 --> 00:10:01,920
at the bottom we have the commit once

229
00:10:01,920 --> 00:10:02,880
notion

230
00:10:02,880 --> 00:10:05,200
that commits just the key k

231
00:10:05,200 --> 00:10:07,120
and that's enough for the partitioning

232
00:10:07,120 --> 00:10:09,279
oracle attack

233
00:10:09,279 --> 00:10:11,440
at the very top we have the commit for

234
00:10:11,440 --> 00:10:12,399
notion

235
00:10:12,399 --> 00:10:14,640
that completes every for

236
00:10:14,640 --> 00:10:16,800
all the four components in the tuple k

237
00:10:16,800 --> 00:10:18,320
k-n-a-m

238
00:10:18,320 --> 00:10:22,800
and that is demanded by mrs franklin

239
00:10:22,800 --> 00:10:24,480
in between we

240
00:10:24,480 --> 00:10:26,959
define an intermediate notion

241
00:10:26,959 --> 00:10:28,320
commits tree

242
00:10:28,320 --> 00:10:33,560
that commits the three components kn a

243
00:10:34,320 --> 00:10:36,800
now it turns out that the commit 3 and

244
00:10:36,800 --> 00:10:40,880
commit 4 notions are equivalent

245
00:10:40,880 --> 00:10:42,160
informally

246
00:10:42,160 --> 00:10:44,880
once you can commit kn a

247
00:10:44,880 --> 00:10:48,640
the message m is automatically committed

248
00:10:48,640 --> 00:10:53,120
thanks to the correctness of decryption

249
00:10:53,360 --> 00:10:55,680
but there's a definitional separation

250
00:10:55,680 --> 00:10:58,839
between commit 1 and commit

251
00:10:58,839 --> 00:11:03,040
3. this methods not just for security

252
00:11:03,040 --> 00:11:05,200
but also for efficiency

253
00:11:05,200 --> 00:11:07,600
because it turns out that the top two

254
00:11:07,600 --> 00:11:08,720
notions

255
00:11:08,720 --> 00:11:11,120
require hashing the id but the bottom

256
00:11:11,120 --> 00:11:13,519
one doesn't

257
00:11:13,519 --> 00:11:16,320
luckily in practice id short

258
00:11:16,320 --> 00:11:18,880
so we can realize commit file security

259
00:11:18,880 --> 00:11:21,120
in a cheaper way than hashing the

260
00:11:21,120 --> 00:11:22,959
message and id

261
00:11:22,959 --> 00:11:27,239
as many current solutions

262
00:11:28,000 --> 00:11:30,640
now let me uh describe the definitions

263
00:11:30,640 --> 00:11:32,560
in more details

264
00:11:32,560 --> 00:11:34,720
so here the alpha 3 needs to produce two

265
00:11:34,720 --> 00:11:36,160
tuples

266
00:11:36,160 --> 00:11:39,200
k1 n1 a1 m1

267
00:11:39,200 --> 00:11:43,120
and k2 n2 a2 empty

268
00:11:43,120 --> 00:11:45,760
its goal is to produce a collision while

269
00:11:45,760 --> 00:11:49,200
we improve these tuples

270
00:11:49,839 --> 00:11:52,959
now to avoid trivial wins the commit one

271
00:11:52,959 --> 00:11:55,279
notion requires that the keys being

272
00:11:55,279 --> 00:11:57,040
distinct

273
00:11:57,040 --> 00:11:59,839
commit 4 is more relaxed it requires

274
00:11:59,839 --> 00:12:03,360
that the two tuples are different

275
00:12:03,920 --> 00:12:05,519
now here the adversaries wants to

276
00:12:05,519 --> 00:12:08,000
produce a collision

277
00:12:08,000 --> 00:12:09,600
we can generalize the definition a

278
00:12:09,600 --> 00:12:10,720
little bit

279
00:12:10,720 --> 00:12:12,720
requiring that the adversary needs to

280
00:12:12,720 --> 00:12:15,839
produce an s-way multi-collision

281
00:12:15,839 --> 00:12:18,880
instead of a mere collision

282
00:12:18,880 --> 00:12:21,600
but now let's take a step backward and

283
00:12:21,600 --> 00:12:23,760
think about that notion

284
00:12:23,760 --> 00:12:26,399
it seems that somehow the generalization

285
00:12:26,399 --> 00:12:28,079
is redundant

286
00:12:28,079 --> 00:12:29,200
in fact

287
00:12:29,200 --> 00:12:30,959
it adversary cannot produce the

288
00:12:30,959 --> 00:12:32,160
collision

289
00:12:32,160 --> 00:12:34,000
surely it cannot produce a

290
00:12:34,000 --> 00:12:36,320
multi-collision

291
00:12:36,320 --> 00:12:38,560
so the special definition already

292
00:12:38,560 --> 00:12:41,360
implies the general one

293
00:12:41,360 --> 00:12:45,200
so why bother to generalize

294
00:12:45,600 --> 00:12:47,920
so it turns out that the generalization

295
00:12:47,920 --> 00:12:49,120
give us

296
00:12:49,120 --> 00:12:51,839
a trade-off for resisting partitioning

297
00:12:51,839 --> 00:12:53,760
oracle attack

298
00:12:53,760 --> 00:12:55,360
now let's say that you

299
00:12:55,360 --> 00:12:58,399
if there's no collision whatsoever

300
00:12:58,399 --> 00:13:00,639
then our schemes can only deliver the

301
00:13:00,639 --> 00:13:02,720
standard birthday bar in committing

302
00:13:02,720 --> 00:13:05,200
security

303
00:13:05,200 --> 00:13:07,920
but if your applications can tolerate a

304
00:13:07,920 --> 00:13:09,360
little speed up

305
00:13:09,360 --> 00:13:11,360
in password guessing

306
00:13:11,360 --> 00:13:14,720
then we can deliver much better security

307
00:13:14,720 --> 00:13:18,680
say 96-bit security

308
00:13:20,079 --> 00:13:21,920
remember that there are two main notions

309
00:13:21,920 --> 00:13:24,160
commit four i complete one

310
00:13:24,160 --> 00:13:26,000
one wants to commit

311
00:13:26,000 --> 00:13:28,480
just a key the other one is to commit

312
00:13:28,480 --> 00:13:30,639
everything

313
00:13:30,639 --> 00:13:32,320
now it turns out that once you can

314
00:13:32,320 --> 00:13:35,519
commit the key it's easy to commit

315
00:13:35,519 --> 00:13:37,200
everything else

316
00:13:37,200 --> 00:13:39,519
and we achieve that via a genetic

317
00:13:39,519 --> 00:13:41,680
transform that we call hash then

318
00:13:41,680 --> 00:13:44,000
encrypts

319
00:13:44,000 --> 00:13:46,320
in particular here we have a base a

320
00:13:46,320 --> 00:13:49,519
scheme that is commit one secure

321
00:13:49,519 --> 00:13:52,399
and we want to leverage somehow

322
00:13:52,399 --> 00:13:56,800
to come to obtain commit for security

323
00:13:56,800 --> 00:13:58,560
now remember that commit form is that

324
00:13:58,560 --> 00:14:01,680
you need to commit k and a

325
00:14:01,680 --> 00:14:03,279
once you can do that

326
00:14:03,279 --> 00:14:08,160
the message m is automatically committed

327
00:14:08,160 --> 00:14:11,360
so our first step is to hash kni

328
00:14:11,360 --> 00:14:14,160
to derive a synthetic key

329
00:14:14,160 --> 00:14:16,480
we then use that synthetic key to

330
00:14:16,480 --> 00:14:19,360
include the mass m

331
00:14:19,360 --> 00:14:21,920
now because the base a scheme commits

332
00:14:21,920 --> 00:14:24,079
the synthetic e

333
00:14:24,079 --> 00:14:27,519
so the cyberdex is a commitment of k and

334
00:14:27,519 --> 00:14:28,399
a

335
00:14:28,399 --> 00:14:30,320
if the hash function is collision

336
00:14:30,320 --> 00:14:32,639
resistant

337
00:14:32,639 --> 00:14:34,399
and as a result

338
00:14:34,399 --> 00:14:37,120
the overall construction has commits for

339
00:14:37,120 --> 00:14:39,680
security

340
00:14:40,320 --> 00:14:42,800
now let me stress that here the id is

341
00:14:42,800 --> 00:14:44,800
processed only once

342
00:14:44,800 --> 00:14:46,959
because in the encryption we encrypt

343
00:14:46,959 --> 00:14:50,239
with an empty id

344
00:14:50,959 --> 00:14:53,600
so the hash the encrypt transform has no

345
00:14:53,600 --> 00:14:56,160
cell tax expansion

346
00:14:56,160 --> 00:14:59,839
and actually its overhead is optimal

347
00:14:59,839 --> 00:15:02,880
remember that commit 4 demands hashing

348
00:15:02,880 --> 00:15:04,000
the id

349
00:15:04,000 --> 00:15:06,320
whereas commit 1 doesn't

350
00:15:06,320 --> 00:15:08,880
so here the hashing cost of knight is

351
00:15:08,880 --> 00:15:12,439
somehow unavoidable

352
00:15:13,120 --> 00:15:15,920
security wise if the hash function is a

353
00:15:15,920 --> 00:15:17,279
good pif

354
00:15:17,279 --> 00:15:20,160
data transform preserves both unique

355
00:15:20,160 --> 00:15:23,120
nonce and misused resistance security

356
00:15:23,120 --> 00:15:25,440
for the ia

357
00:15:25,440 --> 00:15:25,839
and as scheme

358
00:15:25,839 --> 00:15:27,199
mentioned earlier

359
00:15:27,199 --> 00:15:28,800
if the hash function is collision

360
00:15:28,800 --> 00:15:30,480
resistant

361
00:15:30,480 --> 00:15:31,440
then

362
00:15:31,440 --> 00:15:33,360
the transform promotes commit one

363
00:15:33,360 --> 00:15:36,959
security to commit far

364
00:15:37,360 --> 00:15:39,279
so now we have a nice way to obtain

365
00:15:39,279 --> 00:15:42,880
commit for if we know how to get commit

366
00:15:42,880 --> 00:15:43,680
one

367
00:15:43,680 --> 00:15:44,720
so now

368
00:15:44,720 --> 00:15:47,279
what's left is to see how to get commit

369
00:15:47,279 --> 00:15:49,680
one in a clean way

370
00:15:49,680 --> 00:15:51,600
and i'll show you how to do that in the

371
00:15:51,600 --> 00:15:55,800
context of gcm

372
00:15:55,920 --> 00:15:58,000
so remember that commit 1 means that you

373
00:15:58,000 --> 00:16:00,800
need to commit the key somehow

374
00:16:00,800 --> 00:16:03,279
so the intuition is that you need to

375
00:16:03,279 --> 00:16:05,040
hash the key

376
00:16:05,040 --> 00:16:06,639
probably with something else

377
00:16:06,639 --> 00:16:08,560
and then include the image in the

378
00:16:08,560 --> 00:16:10,720
ciphertext

379
00:16:10,720 --> 00:16:14,320
but how long should the hashtag would be

380
00:16:14,320 --> 00:16:16,000
the conventions will tell you that you

381
00:16:16,000 --> 00:16:17,600
need something like

382
00:16:17,600 --> 00:16:20,000
206 bit output

383
00:16:20,000 --> 00:16:22,880
to prevent offline attacks

384
00:16:22,880 --> 00:16:23,680
why

385
00:16:23,680 --> 00:16:25,839
here we don't want an adversary to spend

386
00:16:25,839 --> 00:16:28,160
a lot of precomputation to get a

387
00:16:28,160 --> 00:16:29,199
collision

388
00:16:29,199 --> 00:16:31,279
and then attack the committing security

389
00:16:31,279 --> 00:16:36,079
with anybody with constant cost per user

390
00:16:36,079 --> 00:16:39,199
but if you look at the

391
00:16:39,199 --> 00:16:41,199
applications of committing screen more

392
00:16:41,199 --> 00:16:42,639
closely

393
00:16:42,639 --> 00:16:44,079
then typically

394
00:16:44,079 --> 00:16:47,040
one key is random sample

395
00:16:47,040 --> 00:16:50,800
and that rules out the offline attacks

396
00:16:50,800 --> 00:16:53,600
so actually here you only need one two

397
00:16:53,600 --> 00:16:56,639
eight bit output

398
00:16:57,600 --> 00:16:58,880
moreover

399
00:16:58,880 --> 00:17:00,720
here you only deal with a very short

400
00:17:00,720 --> 00:17:02,880
input the key k

401
00:17:02,880 --> 00:17:04,959
so you actually don't need a fully

402
00:17:04,959 --> 00:17:08,319
fledged cryptographic hash function

403
00:17:08,319 --> 00:17:11,280
in our paper we instead use the davis

404
00:17:11,280 --> 00:17:14,720
mayor construction on aes

405
00:17:14,720 --> 00:17:17,359
davis maya is known to provide good

406
00:17:17,359 --> 00:17:19,760
collision resistance in the ideal cycle

407
00:17:19,760 --> 00:17:21,919
model

408
00:17:21,919 --> 00:17:23,839
and in our work which shows that

409
00:17:23,839 --> 00:17:25,919
it continues to provide good

410
00:17:25,919 --> 00:17:29,360
multi-gleason resistance

411
00:17:29,360 --> 00:17:31,520
even better

412
00:17:31,520 --> 00:17:33,760
that's the best you can hope for

413
00:17:33,760 --> 00:17:36,160
from a one today bit output hash

414
00:17:36,160 --> 00:17:38,559
function

415
00:17:42,480 --> 00:17:46,559
so you have a good way to hatch the key

416
00:17:46,559 --> 00:17:49,200
but how would you include the hash image

417
00:17:49,200 --> 00:17:50,160
without

418
00:17:50,160 --> 00:17:53,039
expanding the ciphertext

419
00:17:53,039 --> 00:17:55,520
in order to answer that question

420
00:17:55,520 --> 00:17:57,919
let me now give you a bird eyes view of

421
00:17:57,919 --> 00:18:00,000
tcm

422
00:18:00,000 --> 00:18:02,480
so remember that gcm

423
00:18:02,480 --> 00:18:06,080
is basically encrypted mac

424
00:18:06,080 --> 00:18:08,080
so here the inclusion scheme is counter

425
00:18:08,080 --> 00:18:10,960
mode and the mac follows the category

426
00:18:10,960 --> 00:18:12,640
paradigm

427
00:18:12,640 --> 00:18:15,280
in particular in the map you first use a

428
00:18:15,280 --> 00:18:18,400
universal hash function known as t hash

429
00:18:18,400 --> 00:18:22,320
to process the select score c

430
00:18:22,320 --> 00:18:24,400
and the id

431
00:18:24,400 --> 00:18:25,520
and you then

432
00:18:25,520 --> 00:18:27,919
use a one time path to improve the gs

433
00:18:27,919 --> 00:18:28,880
output

434
00:18:28,880 --> 00:18:31,840
to the drive tag t

435
00:18:31,840 --> 00:18:33,919
now let's zoom in the markers just a

436
00:18:33,919 --> 00:18:36,640
little bit further

437
00:18:36,640 --> 00:18:39,520
and the one time path is produced by

438
00:18:39,520 --> 00:18:43,039
making a call to the block cipher

439
00:18:43,039 --> 00:18:44,160
so in our

440
00:18:44,160 --> 00:18:47,120
scheme cluc1

441
00:18:47,120 --> 00:18:49,360
instead of using a one-time path we

442
00:18:49,360 --> 00:18:52,080
directly use the block cipher to improve

443
00:18:52,080 --> 00:18:54,960
the gstr boot

444
00:18:54,960 --> 00:18:58,320
it is also a very common variant of cat

445
00:18:58,320 --> 00:18:59,679
wegman

446
00:18:59,679 --> 00:19:02,640
it has authenticity but itself doesn't

447
00:19:02,640 --> 00:19:05,919
have committing security

448
00:19:05,919 --> 00:19:09,280
to make it committing we add an extra xr

449
00:19:09,280 --> 00:19:11,280
turning the block cervical

450
00:19:11,280 --> 00:19:14,559
into navy's major construction

451
00:19:14,559 --> 00:19:16,320
another attack t

452
00:19:16,320 --> 00:19:18,320
becomes a commitment

453
00:19:18,320 --> 00:19:22,360
of the key k

454
00:19:24,080 --> 00:19:25,440
as a result

455
00:19:25,440 --> 00:19:28,559
the commits one security of cuc-1 can be

456
00:19:28,559 --> 00:19:29,600
reduced

457
00:19:29,600 --> 00:19:31,200
to the

458
00:19:31,200 --> 00:19:33,520
multi-collision resistance of the davi

459
00:19:33,520 --> 00:19:36,480
mayor construction

460
00:19:36,880 --> 00:19:38,880
for unique non-security

461
00:19:38,880 --> 00:19:40,799
cuc one pretends

462
00:19:40,799 --> 00:19:43,280
the security of gcm

463
00:19:43,280 --> 00:19:44,320
actually

464
00:19:44,320 --> 00:19:46,880
for short tax the situation is even

465
00:19:46,880 --> 00:19:48,240
better

466
00:19:48,240 --> 00:19:52,000
gcm is known to be very poor if the

467
00:19:52,000 --> 00:19:53,919
tasks are short

468
00:19:53,919 --> 00:19:58,240
but cuc one does that and it says issue

469
00:19:58,240 --> 00:20:00,400
so even if the applications don't need

470
00:20:00,400 --> 00:20:02,240
committing security

471
00:20:02,240 --> 00:20:04,480
there might be a good reason to switch

472
00:20:04,480 --> 00:20:09,440
from gcm to ciuc 1.

473
00:20:10,720 --> 00:20:11,840
summing up

474
00:20:11,840 --> 00:20:14,159
given urgent demands from many

475
00:20:14,159 --> 00:20:15,520
applications

476
00:20:15,520 --> 00:20:17,840
we believe that it's time to upgrade

477
00:20:17,840 --> 00:20:19,440
encryption standards

478
00:20:19,440 --> 00:20:22,400
to committing ones

479
00:20:22,400 --> 00:20:24,480
the variance in our work

480
00:20:24,480 --> 00:20:27,440
allows us through that with tiny changes

481
00:20:27,440 --> 00:20:30,400
there will be no cell tag expansion

482
00:20:30,400 --> 00:20:33,440
and the word is little

483
00:20:33,440 --> 00:20:36,159
and the transition for astcms iv is

484
00:20:36,159 --> 00:20:38,240
particularly attractive

485
00:20:38,240 --> 00:20:40,080
because the scheme is new there's not

486
00:20:40,080 --> 00:20:41,919
much legacy issue

487
00:20:41,919 --> 00:20:43,520
and

488
00:20:43,520 --> 00:20:47,679
what you need here is just an extra xr

489
00:20:47,679 --> 00:20:49,760
thank you for listening to my talk and i

490
00:20:49,760 --> 00:20:53,039
have peter take questions now

491
00:21:02,480 --> 00:21:04,720
yes

492
00:21:04,720 --> 00:21:06,720
no no i'm just asking in the room if

493
00:21:06,720 --> 00:21:09,840
there are questions for you

494
00:21:11,120 --> 00:21:12,080
all right

495
00:21:12,080 --> 00:21:14,799
so okay yeah good all right jeremiah

496
00:21:14,799 --> 00:21:17,919
blocky purdue university uh so

497
00:21:17,919 --> 00:21:20,320
you mentioned that you don't need

498
00:21:20,320 --> 00:21:22,559
256-bit

499
00:21:22,559 --> 00:21:25,600
hash outputs for 128-bit security

500
00:21:25,600 --> 00:21:28,719
i was curious

501
00:21:28,960 --> 00:21:31,919
is this inherent if we require s equals

502
00:21:31,919 --> 00:21:33,039
one or

503
00:21:33,039 --> 00:21:34,320
is this just a feature that we can

504
00:21:34,320 --> 00:21:35,760
exploit when the number of

505
00:21:35,760 --> 00:21:38,080
multi-collisions is larger than

506
00:21:38,080 --> 00:21:39,760
larger than two

507
00:21:39,760 --> 00:21:42,400
okay so uh for the

508
00:21:42,400 --> 00:21:45,280
actually for the base case where

509
00:21:45,280 --> 00:21:49,120
ss2 namely a mere autonomic collision

510
00:21:49,120 --> 00:21:51,679
then we can only provide birthday bio

511
00:21:51,679 --> 00:21:54,480
security but if you look at the base

512
00:21:54,480 --> 00:21:56,320
schemes gcm itself

513
00:21:56,320 --> 00:21:58,960
they only provide but about

514
00:21:58,960 --> 00:22:02,799
so in the basic setting where ss2 then

515
00:22:02,799 --> 00:22:05,120
you have multiple security

516
00:22:05,120 --> 00:22:06,559
but

517
00:22:06,559 --> 00:22:09,280
as i visualize in

518
00:22:09,280 --> 00:22:11,679
the slides

519
00:22:11,679 --> 00:22:14,080
let me see

520
00:22:14,640 --> 00:22:16,880
where is

521
00:22:16,880 --> 00:22:18,559
um

522
00:22:18,559 --> 00:22:19,520
here

523
00:22:19,520 --> 00:22:21,039
do you see the screen

524
00:22:21,039 --> 00:22:25,440
so if you allow a bigger s say s is far

525
00:22:25,440 --> 00:22:30,080
so then you have 96 bit of security

526
00:22:30,080 --> 00:22:32,720
and the bigger the assets uh the better

527
00:22:32,720 --> 00:22:35,600
security by you have

528
00:22:35,600 --> 00:22:38,240
okay okay so um i guess if we want no

529
00:22:38,240 --> 00:22:40,080
speed up though in password guessing we

530
00:22:40,080 --> 00:22:43,120
still have to go back to 256 bits

531
00:22:43,120 --> 00:22:44,400
um

532
00:22:44,400 --> 00:22:45,679
if

533
00:22:45,679 --> 00:22:48,720
if you want um want to divide security

534
00:22:48,720 --> 00:22:52,720
then probably sell okay yeah

535
00:22:52,720 --> 00:22:55,840
okay thanks

536
00:22:56,400 --> 00:22:59,280
any other questions

537
00:22:59,679 --> 00:23:00,960
if not

538
00:23:00,960 --> 00:23:05,880
then let's thank vietng again

