1
00:00:03,600 --> 00:00:06,319
hello everyone my name is ivan sang

2
00:00:06,319 --> 00:00:08,960
today i'm happy to introduce our work

3
00:00:08,960 --> 00:00:11,120
private circuits with quasi-linear

4
00:00:11,120 --> 00:00:12,799
randomness

5
00:00:12,799 --> 00:00:15,200
this is a joint work with vapor goya and

6
00:00:15,200 --> 00:00:18,080
yuval yishai

7
00:00:18,720 --> 00:00:20,880
the notion of private circuits was

8
00:00:20,880 --> 00:00:23,920
introduced by ishai sai hai and wagner

9
00:00:23,920 --> 00:00:26,160
in 2003

10
00:00:26,160 --> 00:00:28,480
it is a simple abstraction of leakage

11
00:00:28,480 --> 00:00:30,480
residing computation

12
00:00:30,480 --> 00:00:31,760
informally

13
00:00:31,760 --> 00:00:33,760
a private circuit should be secure

14
00:00:33,760 --> 00:00:36,559
against leakages of t var values chosen

15
00:00:36,559 --> 00:00:38,559
by an adversary

16
00:00:38,559 --> 00:00:41,440
in this work we consider both stateless

17
00:00:41,440 --> 00:00:43,440
and stateful private circuits

18
00:00:43,440 --> 00:00:47,280
which will give details as follows

19
00:00:48,480 --> 00:00:50,800
suppose f is a function that we want to

20
00:00:50,800 --> 00:00:52,399
compute

21
00:00:52,399 --> 00:00:56,879
it takes as input x and output y

22
00:00:56,879 --> 00:00:58,640
a stateless private circuit for the

23
00:00:58,640 --> 00:01:02,239
function f contains three parts

24
00:01:02,239 --> 00:01:05,360
the first part is an input encoder which

25
00:01:05,360 --> 00:01:08,720
encodes input x to x hat

26
00:01:08,720 --> 00:01:12,240
then a circuit c takes as input x hat

27
00:01:12,240 --> 00:01:15,040
computes the function f and outputs the

28
00:01:15,040 --> 00:01:18,080
encoded result y hat

29
00:01:18,080 --> 00:01:21,680
finally an output decoder d calls y hat

30
00:01:21,680 --> 00:01:23,840
and output y

31
00:01:23,840 --> 00:01:26,640
the security requires that any power

32
00:01:26,640 --> 00:01:28,799
should reveal no information about the

33
00:01:28,799 --> 00:01:31,040
input x

34
00:01:31,040 --> 00:01:33,759
to rule out jio solutions in which the

35
00:01:33,759 --> 00:01:35,680
encoder of the decoder compute the

36
00:01:35,680 --> 00:01:37,520
function f directly

37
00:01:37,520 --> 00:01:39,520
we consider the canonical encoder and

38
00:01:39,520 --> 00:01:42,079
decoder by default

39
00:01:42,079 --> 00:01:44,799
concretely the canonical encoder splits

40
00:01:44,799 --> 00:01:47,600
each input bits into t plus one additive

41
00:01:47,600 --> 00:01:48,640
shares

42
00:01:48,640 --> 00:01:51,280
and the kinetico decoder compiles each

43
00:01:51,280 --> 00:01:53,600
bit by adding up a group of t plus 1

44
00:01:53,600 --> 00:01:55,839
bits

45
00:01:57,040 --> 00:01:59,759
a stronger variant of private circuits

46
00:01:59,759 --> 00:02:02,079
referred to as leakage tolerated private

47
00:02:02,079 --> 00:02:03,119
circuits

48
00:02:03,119 --> 00:02:05,680
does not have input encoder or output

49
00:02:05,680 --> 00:02:07,280
decoder

50
00:02:07,280 --> 00:02:10,000
the security requires that idp wires

51
00:02:10,000 --> 00:02:12,560
review at most the same number of input

52
00:02:12,560 --> 00:02:14,959
and output bits

53
00:02:14,959 --> 00:02:17,200
with the leakage hollywood solution

54
00:02:17,200 --> 00:02:19,120
we can obtain a leakage resilient

55
00:02:19,120 --> 00:02:21,680
private circuit by using an encoding

56
00:02:21,680 --> 00:02:22,400
scheme

57
00:02:22,400 --> 00:02:24,480
that is secure against t programming

58
00:02:24,480 --> 00:02:28,239
text such as the kinetico encoder

59
00:02:28,239 --> 00:02:30,560
in particular we can also join the

60
00:02:30,560 --> 00:02:33,200
linking code all input bs with less

61
00:02:33,200 --> 00:02:36,200
randomness

62
00:02:36,400 --> 00:02:38,160
in the stateful model

63
00:02:38,160 --> 00:02:41,519
the circuit maintains an internal state

64
00:02:41,519 --> 00:02:43,920
in each effort the circuit takes a

65
00:02:43,920 --> 00:02:47,040
public input x and outputs the result y

66
00:02:47,040 --> 00:02:48,800
in clear

67
00:02:48,800 --> 00:02:50,720
a concrete example is an encryption

68
00:02:50,720 --> 00:02:52,959
circuit where the internal state is the

69
00:02:52,959 --> 00:02:55,680
secret key the input is the message we

70
00:02:55,680 --> 00:02:58,159
want to encrypt and the output is the

71
00:02:58,159 --> 00:03:00,480
ciphertext

72
00:03:00,480 --> 00:03:03,519
the security request set in every epoch

73
00:03:03,519 --> 00:03:05,760
anytime values should reveal no

74
00:03:05,760 --> 00:03:09,920
information about the internal state

75
00:03:11,200 --> 00:03:12,800
the notion of private circuits is

76
00:03:12,800 --> 00:03:15,680
attractive for theoretical study due to

77
00:03:15,680 --> 00:03:18,400
the simplicity of its model in the sense

78
00:03:18,400 --> 00:03:21,040
that the computation model is just

79
00:03:21,040 --> 00:03:22,560
binary circuits

80
00:03:22,560 --> 00:03:24,720
and the class of leakage functions

81
00:03:24,720 --> 00:03:27,360
contains all sets of tml values in the

82
00:03:27,360 --> 00:03:29,519
circuit

83
00:03:29,519 --> 00:03:32,319
a line of works have shown that we can

84
00:03:32,319 --> 00:03:34,640
bootstrap from this minimal notion of

85
00:03:34,640 --> 00:03:36,080
private circuits

86
00:03:36,080 --> 00:03:38,720
towards resisting more powerful leakage

87
00:03:38,720 --> 00:03:42,480
classes such as ac0 leakage or bounded

88
00:03:42,480 --> 00:03:45,599
communication leakage

89
00:03:45,680 --> 00:03:47,120
on the other hand

90
00:03:47,120 --> 00:03:49,760
private circuits gain popularity as a

91
00:03:49,760 --> 00:03:51,920
practical method for higher order

92
00:03:51,920 --> 00:03:54,560
masking countermeasures that protect

93
00:03:54,560 --> 00:03:57,200
embedded devices against realistic step

94
00:03:57,200 --> 00:04:00,239
channel attacks

95
00:04:00,239 --> 00:04:02,640
in this work we are interested in the

96
00:04:02,640 --> 00:04:04,720
randomized complexity of private

97
00:04:04,720 --> 00:04:05,760
circuits

98
00:04:05,760 --> 00:04:07,920
which is a natural theoretical question

99
00:04:07,920 --> 00:04:10,080
for this notion

100
00:04:10,080 --> 00:04:12,799
the study of randomized complexity can

101
00:04:12,799 --> 00:04:15,360
also be motivated by the fact that

102
00:04:15,360 --> 00:04:17,918
generating fresh randomness is expensive

103
00:04:17,918 --> 00:04:19,839
in practice

104
00:04:19,839 --> 00:04:22,400
in the scenario where the randomness is

105
00:04:22,400 --> 00:04:25,120
provided as a part of the input

106
00:04:25,120 --> 00:04:27,600
reducing randomness capacity means

107
00:04:27,600 --> 00:04:30,560
reducing the size of the input

108
00:04:30,560 --> 00:04:31,919
in some cases

109
00:04:31,919 --> 00:04:34,400
this can be translated to an improvement

110
00:04:34,400 --> 00:04:36,800
in the communication complexity

111
00:04:36,800 --> 00:04:39,120
for example when we build a legal

112
00:04:39,120 --> 00:04:40,880
resilience hardware for proof

113
00:04:40,880 --> 00:04:42,560
verification

114
00:04:42,560 --> 00:04:45,120
the prover may be responsible to provide

115
00:04:45,120 --> 00:04:49,360
fresh randomness using the hardware

116
00:04:49,600 --> 00:04:52,000
therefore in this work we consider the

117
00:04:52,000 --> 00:04:54,000
following question

118
00:04:54,000 --> 00:04:56,160
how many random bits do we need to

119
00:04:56,160 --> 00:04:59,040
securely compute a function with circuit

120
00:04:59,040 --> 00:05:03,520
size s against t problem attack

121
00:05:04,320 --> 00:05:07,600
the work sw3 gives first gives a

122
00:05:07,600 --> 00:05:09,759
feasibility result based on mpc

123
00:05:09,759 --> 00:05:11,280
protocols

124
00:05:11,280 --> 00:05:13,680
it requires t-square random piece for

125
00:05:13,680 --> 00:05:15,680
each multiplication of gates

126
00:05:15,680 --> 00:05:18,160
which adds up to t squared times x

127
00:05:18,160 --> 00:05:21,440
random b's for the whole circuit

128
00:05:21,440 --> 00:05:24,880
the work ikl plus 13 introduces the

129
00:05:24,880 --> 00:05:28,240
notion of robust random generators

130
00:05:28,240 --> 00:05:31,199
very informally it is an implementation

131
00:05:31,199 --> 00:05:32,639
of a prg

132
00:05:32,639 --> 00:05:33,680
such that

133
00:05:33,680 --> 00:05:36,160
the implementation is secure against

134
00:05:36,160 --> 00:05:38,080
problem attacks

135
00:05:38,080 --> 00:05:40,720
relying on robust prgs the authors

136
00:05:40,720 --> 00:05:43,919
achieve t cube times log t as random bs

137
00:05:43,919 --> 00:05:45,840
which is almost independent of the

138
00:05:45,840 --> 00:05:48,560
circuit size

139
00:05:48,880 --> 00:05:52,320
a recent work cgc 20 further reduces the

140
00:05:52,320 --> 00:05:54,960
randomness complexity to t squared times

141
00:05:54,960 --> 00:05:56,960
log ts

142
00:05:56,960 --> 00:05:59,039
we will provide more details about their

143
00:05:59,039 --> 00:06:02,000
techniques later

144
00:06:02,319 --> 00:06:04,479
in this work we show that

145
00:06:04,479 --> 00:06:06,560
any function computed by a boolean

146
00:06:06,560 --> 00:06:08,400
circuit offset s

147
00:06:08,400 --> 00:06:10,880
admits a t private circuit with a

148
00:06:10,880 --> 00:06:14,160
canonical encoder and decoder which uses

149
00:06:14,160 --> 00:06:17,440
out of t times log t as random bits

150
00:06:17,440 --> 00:06:19,280
this represents effect of key

151
00:06:19,280 --> 00:06:21,600
improvement compared with the previously

152
00:06:21,600 --> 00:06:24,479
best known results

153
00:06:25,840 --> 00:06:27,759
we also extend our results to the

154
00:06:27,759 --> 00:06:29,440
following scenarios

155
00:06:29,440 --> 00:06:31,759
first when using a random sufficient

156
00:06:31,759 --> 00:06:34,800
encoder instead of the kinetico encoder

157
00:06:34,800 --> 00:06:37,280
we achieved out of t times log ds

158
00:06:37,280 --> 00:06:39,360
overall random bits

159
00:06:39,360 --> 00:06:41,759
this is optimal after logarithmic

160
00:06:41,759 --> 00:06:43,919
factors

161
00:06:43,919 --> 00:06:46,560
second we show that same bound applies

162
00:06:46,560 --> 00:06:49,199
for leakage tolerate private circuits

163
00:06:49,199 --> 00:06:52,000
and finally we also show that the same

164
00:06:52,000 --> 00:06:54,560
bond applies for the stateful model of

165
00:06:54,560 --> 00:06:56,720
private circuits

166
00:06:56,720 --> 00:06:59,199
here the random complexity is for every

167
00:06:59,199 --> 00:07:02,199
epoch

168
00:07:02,800 --> 00:07:04,960
in the following i will first discuss

169
00:07:04,960 --> 00:07:07,440
the construction in previous works

170
00:07:07,440 --> 00:07:09,599
analyze why their constructions fail to

171
00:07:09,599 --> 00:07:11,440
obtain further improvements

172
00:07:11,440 --> 00:07:13,520
and give the general idea of our

173
00:07:13,520 --> 00:07:16,520
construction

174
00:07:16,639 --> 00:07:19,919
the first construction is given in sw3

175
00:07:19,919 --> 00:07:21,840
the idea is to compute an additive

176
00:07:21,840 --> 00:07:24,000
sharing for each variable value

177
00:07:24,000 --> 00:07:25,199
for example

178
00:07:25,199 --> 00:07:26,880
for their value x

179
00:07:26,880 --> 00:07:30,880
the goals compute x1 x2 to xn such that

180
00:07:30,880 --> 00:07:33,360
their summation is equal to x

181
00:07:33,360 --> 00:07:36,080
in this way any t-shares are uniformly

182
00:07:36,080 --> 00:07:38,720
random and independent of x

183
00:07:38,720 --> 00:07:41,440
and any t appropriate text reveal no

184
00:07:41,440 --> 00:07:45,520
information about the inputs

185
00:07:45,520 --> 00:07:47,520
now the problem is reduced to evaluating

186
00:07:47,520 --> 00:07:50,560
addition gates and multiplication gates

187
00:07:50,560 --> 00:07:53,199
for an addition gates we can simply add

188
00:07:53,199 --> 00:07:56,560
up the two input active shear rings

189
00:07:56,560 --> 00:07:58,960
for multiple gates we first can feel the

190
00:07:58,960 --> 00:08:01,680
multiplication between every two shares

191
00:08:01,680 --> 00:08:05,039
one from each input additive sharing

192
00:08:05,039 --> 00:08:07,039
note that the summation of this n

193
00:08:07,039 --> 00:08:09,039
squared multiplication results is equal

194
00:08:09,039 --> 00:08:11,360
to x times y

195
00:08:11,360 --> 00:08:13,039
we then transform the multiplication

196
00:08:13,039 --> 00:08:15,599
results to an additive sharing of x

197
00:08:15,599 --> 00:08:17,599
times y

198
00:08:17,599 --> 00:08:20,560
the construction e is w03 requires to

199
00:08:20,560 --> 00:08:23,599
consume out of t-square random b's for

200
00:08:23,599 --> 00:08:25,440
each multiplication gates

201
00:08:25,440 --> 00:08:28,240
resulting in out of t square times s

202
00:08:28,240 --> 00:08:31,360
random is complexity

203
00:08:32,399 --> 00:08:35,279
to reduce the random complexity the work

204
00:08:35,279 --> 00:08:38,000
ikl plus the team considers the

205
00:08:38,000 --> 00:08:41,440
randomness locality of a circuit

206
00:08:41,440 --> 00:08:44,800
concretely a circuit c makes an l local

207
00:08:44,800 --> 00:08:46,959
use of its randomness

208
00:08:46,959 --> 00:08:49,839
if each var value uses at most l random

209
00:08:49,839 --> 00:08:51,120
bits

210
00:08:51,120 --> 00:08:52,320
for example

211
00:08:52,320 --> 00:08:55,920
say somewhere w is equal to x times y

212
00:08:55,920 --> 00:08:57,120
plus c

213
00:08:57,120 --> 00:09:01,920
plus r1 times r2 times r3 plus r4

214
00:09:01,920 --> 00:09:05,279
here x y z are input fees of c

215
00:09:05,279 --> 00:09:09,279
and r1 to r4 are internal random bits

216
00:09:09,279 --> 00:09:14,720
then the where w uses 4 random bits

217
00:09:15,760 --> 00:09:18,399
now for a set of t bar values

218
00:09:18,399 --> 00:09:21,440
they together use at most l times t

219
00:09:21,440 --> 00:09:23,040
random bits

220
00:09:23,040 --> 00:09:25,440
then we can replace the fresh random

221
00:09:25,440 --> 00:09:28,720
bits by l times t y's in independent

222
00:09:28,720 --> 00:09:30,800
random bs without changing the

223
00:09:30,800 --> 00:09:33,920
distribution of the value values in w

224
00:09:33,920 --> 00:09:36,959
ideally this allows us to reduce the

225
00:09:36,959 --> 00:09:40,240
randomness complexity to l times t times

226
00:09:40,240 --> 00:09:42,480
some logarithmic factor in the circuit

227
00:09:42,480 --> 00:09:44,800
size

228
00:09:45,920 --> 00:09:49,200
however one problem of this pro reset we

229
00:09:49,200 --> 00:09:51,760
need to use a circuit to implement the

230
00:09:51,760 --> 00:09:55,040
generating process of this random bits

231
00:09:55,040 --> 00:09:58,240
in particular the circuit of prg may be

232
00:09:58,240 --> 00:10:01,279
vulnerable to probing attacks

233
00:10:01,279 --> 00:10:05,360
to overcome this issue ikl 15 proposes

234
00:10:05,360 --> 00:10:08,079
the notion of robust prgs

235
00:10:08,079 --> 00:10:10,720
informally a robust prg is a circuit

236
00:10:10,720 --> 00:10:13,200
implementation of a prg that is

237
00:10:13,200 --> 00:10:15,360
resilient to probing attacks

238
00:10:15,360 --> 00:10:18,480
as a result we can use a robust prg to

239
00:10:18,480 --> 00:10:22,160
repair desired random bits

240
00:10:22,800 --> 00:10:25,839
the work ikl plus 13 shows that the

241
00:10:25,839 --> 00:10:27,519
randomized locality of the basic

242
00:10:27,519 --> 00:10:29,680
instruction is t squared

243
00:10:29,680 --> 00:10:32,480
therefore we need to use t cube wise

244
00:10:32,480 --> 00:10:35,120
independent random bits

245
00:10:35,120 --> 00:10:37,440
the authors also show the existence of a

246
00:10:37,440 --> 00:10:41,279
robust prg that uses out of t cube times

247
00:10:41,279 --> 00:10:43,360
low ps random bits

248
00:10:43,360 --> 00:10:45,839
as a result they obtain a t private

249
00:10:45,839 --> 00:10:48,079
circuit that uses the same number of

250
00:10:48,079 --> 00:10:50,800
random bits

251
00:10:51,600 --> 00:10:54,560
a recent work citizen 20 reduces the

252
00:10:54,560 --> 00:10:56,800
random locality of the basic instruction

253
00:10:56,800 --> 00:10:57,839
to t

254
00:10:57,839 --> 00:11:00,320
leading to effect of key improvements in

255
00:11:00,320 --> 00:11:03,760
the randomist complexity

256
00:11:05,839 --> 00:11:08,399
we know that this approach appears to be

257
00:11:08,399 --> 00:11:10,800
difficult to beat this to be the

258
00:11:10,800 --> 00:11:12,560
t-square bond

259
00:11:12,560 --> 00:11:14,959
intuitively the randomized locality of a

260
00:11:14,959 --> 00:11:18,320
private circuit cannot be smaller than t

261
00:11:18,320 --> 00:11:21,040
otherwise an adversary can prove a where

262
00:11:21,040 --> 00:11:24,160
value and all random bs used for this

263
00:11:24,160 --> 00:11:26,800
where value which mainly information

264
00:11:26,800 --> 00:11:29,839
about about the inputs

265
00:11:29,839 --> 00:11:32,160
then the random cells should be at least

266
00:11:32,160 --> 00:11:34,959
t-square wise independent which requires

267
00:11:34,959 --> 00:11:38,640
at least t-square random bits

268
00:11:38,880 --> 00:11:40,800
our work does not follow this approach

269
00:11:40,800 --> 00:11:43,040
for the randomization

270
00:11:43,040 --> 00:11:45,920
here's an overview of our idea

271
00:11:45,920 --> 00:11:47,279
in the first step

272
00:11:47,279 --> 00:11:49,440
instead of using additive shear rings to

273
00:11:49,440 --> 00:11:51,440
protect their values

274
00:11:51,440 --> 00:11:53,839
we choose to use a t private encoding

275
00:11:53,839 --> 00:11:56,480
scheme to protect their values

276
00:11:56,480 --> 00:11:57,680
we show that

277
00:11:57,680 --> 00:12:00,240
such a t private encoding scheme only

278
00:12:00,240 --> 00:12:04,079
needs talent of order of t random b's

279
00:12:04,079 --> 00:12:07,040
here the tail of big o notation omits

280
00:12:07,040 --> 00:12:08,839
logarithmic

281
00:12:08,839 --> 00:12:11,519
factors in the second step we showed

282
00:12:11,519 --> 00:12:14,720
that the computation of the t3 t-pivot

283
00:12:14,720 --> 00:12:17,040
encoding scheme can be reduced to

284
00:12:17,040 --> 00:12:19,200
constructing a leakage tolerant xor

285
00:12:19,200 --> 00:12:21,440
gadget

286
00:12:21,440 --> 00:12:23,760
finally we construct a randomized

287
00:12:23,760 --> 00:12:26,480
efficient leakage to tolerate axolotls

288
00:12:26,480 --> 00:12:29,200
which only uses tilt of all of t random

289
00:12:29,200 --> 00:12:33,200
beads which solves the problem

290
00:12:35,040 --> 00:12:38,079
we first discuss our auto construction a

291
00:12:38,079 --> 00:12:42,399
t private circuit via xr guided

292
00:12:43,360 --> 00:12:45,600
suppose tail c is a circuit that

293
00:12:45,600 --> 00:12:47,760
computes a function f

294
00:12:47,760 --> 00:12:51,120
in sub 03 the construction compares such

295
00:12:51,120 --> 00:12:53,920
a circuit by computing additive sharing

296
00:12:53,920 --> 00:12:56,880
for each variable value

297
00:12:56,880 --> 00:12:58,959
our idea is to use a strong t by

298
00:12:58,959 --> 00:13:03,279
independent prg to protect these values

299
00:13:03,279 --> 00:13:06,160
concretely suppose g is a strong t by

300
00:13:06,160 --> 00:13:07,680
independent prg

301
00:13:07,680 --> 00:13:11,680
that takes u1 to um as input and outputs

302
00:13:11,680 --> 00:13:14,000
r1 to rs

303
00:13:14,000 --> 00:13:18,639
we mask each of our value wi by ri

304
00:13:18,639 --> 00:13:22,959
then the goal is to compute wi x or ri

305
00:13:22,959 --> 00:13:24,880
for all i

306
00:13:24,880 --> 00:13:27,440
together with u1 to um this can be

307
00:13:27,440 --> 00:13:31,360
viewed as an encoding of the var values

308
00:13:31,360 --> 00:13:33,760
note that by the property of a strong

309
00:13:33,760 --> 00:13:36,000
t-rex independent prg

310
00:13:36,000 --> 00:13:38,399
any key bits are uniformly random

311
00:13:38,399 --> 00:13:42,959
revealing no information about the input

312
00:13:43,680 --> 00:13:46,240
to compute each mass fit we further

313
00:13:46,240 --> 00:13:49,519
require g to be linear in this way

314
00:13:49,519 --> 00:13:52,240
each output bit is a linear combination

315
00:13:52,240 --> 00:13:54,160
of the input bits

316
00:13:54,160 --> 00:13:57,279
for example ri may be equal to u1 plus

317
00:13:57,279 --> 00:13:59,519
u3 plus u4

318
00:13:59,519 --> 00:14:02,079
we use the support of ri to denote the

319
00:14:02,079 --> 00:14:05,359
set of these random bits

320
00:14:06,160 --> 00:14:07,360
observe that

321
00:14:07,360 --> 00:14:11,440
w i x or ri and all bs in the support of

322
00:14:11,440 --> 00:14:14,959
ri can be viewed as an additive sharing

323
00:14:14,959 --> 00:14:17,040
of wi

324
00:14:17,040 --> 00:14:19,120
at the first glance it may appear

325
00:14:19,120 --> 00:14:22,720
similar to the idea in sw003

326
00:14:22,720 --> 00:14:26,000
however there are two key differences

327
00:14:26,000 --> 00:14:28,720
first the number of shares may vary for

328
00:14:28,720 --> 00:14:30,800
different variables

329
00:14:30,800 --> 00:14:32,720
this is because the number of shares

330
00:14:32,720 --> 00:14:36,000
depends on the size of the support of ri

331
00:14:36,000 --> 00:14:38,800
which may be different

332
00:14:38,800 --> 00:14:40,720
second the shares among different

333
00:14:40,720 --> 00:14:43,680
additive shearings are naturally reused

334
00:14:43,680 --> 00:14:45,199
and there is no need to do the

335
00:14:45,199 --> 00:14:46,720
randomization

336
00:14:46,720 --> 00:14:49,360
in particular it is known that there

337
00:14:49,360 --> 00:14:51,440
exists a linear and strong tis

338
00:14:51,440 --> 00:14:54,639
independent prg that uses health of all

339
00:14:54,639 --> 00:14:58,519
of t random bits

340
00:14:58,639 --> 00:15:00,880
now we discuss how to compute each mass

341
00:15:00,880 --> 00:15:02,560
speed

342
00:15:02,560 --> 00:15:04,240
for an addition gate

343
00:15:04,240 --> 00:15:06,399
suppose the two input shield rings are

344
00:15:06,399 --> 00:15:08,480
w1 and w2

345
00:15:08,480 --> 00:15:10,160
and the goal is compile the output

346
00:15:10,160 --> 00:15:12,800
sharing w3

347
00:15:12,800 --> 00:15:16,959
we only need to compute w3 x or r3

348
00:15:16,959 --> 00:15:19,440
since the rest of shares are just the

349
00:15:19,440 --> 00:15:23,279
input random bits of the prg

350
00:15:24,079 --> 00:15:29,360
observe that w 3 x r r 3 is equal to w 1

351
00:15:29,360 --> 00:15:32,800
x or w 2 x or r 3.

352
00:15:32,800 --> 00:15:34,639
therefore we only need to compute the

353
00:15:34,639 --> 00:15:37,440
summation of b's in the joint size of

354
00:15:37,440 --> 00:15:41,040
the shearing of w1 the sharing of w2 and

355
00:15:41,040 --> 00:15:44,320
the support of r3

356
00:15:44,320 --> 00:15:46,560
this problem can be solved by using a

357
00:15:46,560 --> 00:15:50,239
leakage tolerance excel gadgets

358
00:15:51,440 --> 00:15:54,079
for a multiplication gate similarly we

359
00:15:54,079 --> 00:15:59,199
only need to compute w3 xor r3

360
00:15:59,199 --> 00:16:02,480
we follow sub 203 and first compute

361
00:16:02,480 --> 00:16:05,199
multiplications between every two shares

362
00:16:05,199 --> 00:16:08,320
one from each input additive sharing

363
00:16:08,320 --> 00:16:11,199
then w3 is equal to the summation of

364
00:16:11,199 --> 00:16:14,399
this multiplication results

365
00:16:14,800 --> 00:16:17,040
similarly to the addition gates

366
00:16:17,040 --> 00:16:20,320
to compute w3 x or r3

367
00:16:20,320 --> 00:16:22,880
we can compute the summation of these in

368
00:16:22,880 --> 00:16:25,120
the drawn side of the outer product

369
00:16:25,120 --> 00:16:28,079
between the shearings of w1 and w2

370
00:16:28,079 --> 00:16:31,440
and the support of r3

371
00:16:31,440 --> 00:16:33,920
again this problem can be solved by a

372
00:16:33,920 --> 00:16:37,599
liquid tolerance excel gadgets

373
00:16:38,079 --> 00:16:40,399
therefore our order construction works

374
00:16:40,399 --> 00:16:41,680
as follows

375
00:16:41,680 --> 00:16:43,680
we use a linear and strong tubebus

376
00:16:43,680 --> 00:16:46,079
independent prg to protect the valve

377
00:16:46,079 --> 00:16:47,519
values

378
00:16:47,519 --> 00:16:49,279
then the goal is to confirm the mass

379
00:16:49,279 --> 00:16:52,000
speeds w i x or ri

380
00:16:52,000 --> 00:16:56,000
where r is the s orbital b of the prg

381
00:16:56,000 --> 00:16:58,079
we show that the computation of the

382
00:16:58,079 --> 00:17:00,639
maximum values can be done by using a

383
00:17:00,639 --> 00:17:04,839
leakage tolerate extra graduates

384
00:17:05,359 --> 00:17:07,760
in the next part i will discuss how we

385
00:17:07,760 --> 00:17:12,000
construct leakage tolerate exogenous

386
00:17:12,079 --> 00:17:14,559
what we want to construct is a leakage

387
00:17:14,559 --> 00:17:17,119
tolerance private circuit that can fuel

388
00:17:17,119 --> 00:17:21,439
the axial function of n input bits

389
00:17:21,439 --> 00:17:22,799
we start with the following simple

390
00:17:22,799 --> 00:17:24,319
construction

391
00:17:24,319 --> 00:17:26,959
assume the actual gauge has access to a

392
00:17:26,959 --> 00:17:29,760
random active sharing of 0 say they are

393
00:17:29,760 --> 00:17:32,400
r1 to r4

394
00:17:32,400 --> 00:17:35,840
we mask each input beats x i by ri

395
00:17:35,840 --> 00:17:39,200
and live gi denotes results

396
00:17:39,200 --> 00:17:41,600
then we use an addition circuit to

397
00:17:41,600 --> 00:17:46,240
compute the xor of g1 to g4

398
00:17:46,240 --> 00:17:48,559
intuitively the security follows from

399
00:17:48,559 --> 00:17:49,840
the fact that

400
00:17:49,840 --> 00:17:51,440
d1 to v4

401
00:17:51,440 --> 00:17:53,919
forms a random additive sharing of the

402
00:17:53,919 --> 00:17:55,840
output bit y

403
00:17:55,840 --> 00:17:58,960
therefore if any inner wire is probe the

404
00:17:58,960 --> 00:18:01,679
simulator can probe the output output

405
00:18:01,679 --> 00:18:03,039
bit y

406
00:18:03,039 --> 00:18:05,360
and generate a random active shearing as

407
00:18:05,360 --> 00:18:07,360
g1 to b4

408
00:18:07,360 --> 00:18:09,520
then the simulator can simulate all

409
00:18:09,520 --> 00:18:12,160
linear wires in the circuit

410
00:18:12,160 --> 00:18:14,880
in other words probing in the wires of

411
00:18:14,880 --> 00:18:17,440
the gadget is not better than probing

412
00:18:17,440 --> 00:18:20,240
the output bit

413
00:18:21,200 --> 00:18:23,360
however this simple construction

414
00:18:23,360 --> 00:18:26,320
requires out of n random bs we need to

415
00:18:26,320 --> 00:18:28,880
randomize the basic instruction

416
00:18:28,880 --> 00:18:30,960
as we have discussed the generic

417
00:18:30,960 --> 00:18:32,880
approach that relies on random's

418
00:18:32,880 --> 00:18:35,360
locality does not work

419
00:18:35,360 --> 00:18:37,600
this requires us to find a new approach

420
00:18:37,600 --> 00:18:41,959
to randomize r1 to rm

421
00:18:42,320 --> 00:18:43,760
our starting point is the following

422
00:18:43,760 --> 00:18:45,840
simple observation

423
00:18:45,840 --> 00:18:48,720
for a set w of t by values

424
00:18:48,720 --> 00:18:51,760
we hope that the random bits r1 to rn

425
00:18:51,760 --> 00:18:55,120
satisfy the volume condition

426
00:18:55,120 --> 00:18:57,919
the distribution of values in w when

427
00:18:57,919 --> 00:19:00,720
instantiated by using r1 to rn

428
00:19:00,720 --> 00:19:03,360
is identical to that when instantiated

429
00:19:03,360 --> 00:19:05,360
by using uniformly random additive

430
00:19:05,360 --> 00:19:07,520
sharing of zero

431
00:19:07,520 --> 00:19:10,000
in this way any of those threes that can

432
00:19:10,000 --> 00:19:12,720
only probe keywords cannot distinguish

433
00:19:12,720 --> 00:19:15,919
these two instantiations

434
00:19:17,200 --> 00:19:19,440
to better understand this condition

435
00:19:19,440 --> 00:19:21,360
we first write down the linear wires of

436
00:19:21,360 --> 00:19:23,520
the circuit

437
00:19:23,520 --> 00:19:25,440
suppose the addition circuit first

438
00:19:25,440 --> 00:19:28,080
computes g1 xor g2

439
00:19:28,080 --> 00:19:30,000
g3 xor d4

440
00:19:30,000 --> 00:19:34,000
and then compute the x the output bit

441
00:19:34,000 --> 00:19:35,200
recall that

442
00:19:35,200 --> 00:19:39,280
each ti is equal to x i x or ri

443
00:19:39,280 --> 00:19:42,240
where x is an input bit and ri is a

444
00:19:42,240 --> 00:19:44,559
random bit

445
00:19:44,559 --> 00:19:46,640
we can write down also by values as

446
00:19:46,640 --> 00:19:48,640
follows

447
00:19:48,640 --> 00:19:50,559
these var values are marked by the

448
00:19:50,559 --> 00:19:52,559
following random values

449
00:19:52,559 --> 00:19:54,080
for the first layer

450
00:19:54,080 --> 00:19:56,320
d1 is maxed by r1

451
00:19:56,320 --> 00:19:59,520
d2 is masked by r2 and so on

452
00:19:59,520 --> 00:20:03,200
for the second layer d1 xor t2 is maxed

453
00:20:03,200 --> 00:20:06,480
by r1 xor r2

454
00:20:06,480 --> 00:20:11,679
d3x or g4 is maxed by r3 xor r4

455
00:20:11,679 --> 00:20:14,240
for the last layer the summation of g1

456
00:20:14,240 --> 00:20:18,559
to v4 is marked by summation of r1 to r4

457
00:20:18,559 --> 00:20:21,840
which is equal to 0.

458
00:20:22,400 --> 00:20:24,159
we define a set a

459
00:20:24,159 --> 00:20:26,559
that contains these masked random values

460
00:20:26,559 --> 00:20:31,440
and refer to this set as an access set

461
00:20:32,000 --> 00:20:34,640
now we obtain the following condition

462
00:20:34,640 --> 00:20:38,159
for asset w of t variables in the axis

463
00:20:38,159 --> 00:20:39,600
set a

464
00:20:39,600 --> 00:20:40,960
we want that

465
00:20:40,960 --> 00:20:43,520
the distribution of values in w when

466
00:20:43,520 --> 00:20:46,320
instantiated by using r1 to rn

467
00:20:46,320 --> 00:20:48,240
is identical to that when you

468
00:20:48,240 --> 00:20:50,320
instantiate it by using a uniformly

469
00:20:50,320 --> 00:20:53,440
random additive sharing of zero

470
00:20:53,440 --> 00:20:55,600
to realize such as efficient condition

471
00:20:55,600 --> 00:20:57,440
we consider to use a pseudo-random

472
00:20:57,440 --> 00:21:02,240
generator to prepare r1 to rm

473
00:21:02,240 --> 00:21:04,480
with more details we define the notion

474
00:21:04,480 --> 00:21:07,679
of robust parity-sharing generators

475
00:21:07,679 --> 00:21:10,480
we say an implementation c of a function

476
00:21:10,480 --> 00:21:11,200
g

477
00:21:11,200 --> 00:21:14,000
is a robust paradigm generator with

478
00:21:14,000 --> 00:21:16,480
respect to an access set a

479
00:21:16,480 --> 00:21:18,240
if it satisfies the following three

480
00:21:18,240 --> 00:21:19,840
conditions

481
00:21:19,840 --> 00:21:22,640
first the output of the circuit should

482
00:21:22,640 --> 00:21:25,120
form an additive sharing of zero

483
00:21:25,120 --> 00:21:27,440
that is the summation of output b's is

484
00:21:27,440 --> 00:21:29,440
equal to zero

485
00:21:29,440 --> 00:21:31,600
this condition ensures the correctness

486
00:21:31,600 --> 00:21:34,879
of the basic construction

487
00:21:35,280 --> 00:21:37,919
second we prepare the circuit c to be

488
00:21:37,919 --> 00:21:40,240
secure against probium text in the

489
00:21:40,240 --> 00:21:42,320
leakage tolerance sense

490
00:21:42,320 --> 00:21:45,120
in this way we only need to focus on the

491
00:21:45,120 --> 00:21:48,000
output piece since any problem attack

492
00:21:48,000 --> 00:21:49,840
towards the implementation can be

493
00:21:49,840 --> 00:21:52,159
reduced to a program tag to the output

494
00:21:52,159 --> 00:21:54,480
bits

495
00:21:55,360 --> 00:21:56,400
finally

496
00:21:56,400 --> 00:21:58,799
for the given access set which consists

497
00:21:58,799 --> 00:22:02,080
of r1 to rn and linear combinations of

498
00:22:02,080 --> 00:22:03,840
r1 to rn

499
00:22:03,840 --> 00:22:05,360
we require that

500
00:22:05,360 --> 00:22:08,000
the distribution of any key variables

501
00:22:08,000 --> 00:22:10,720
when instantiated by r1 to rn

502
00:22:10,720 --> 00:22:12,960
should be identical to that when you

503
00:22:12,960 --> 00:22:15,200
start at it by using uniformly random

504
00:22:15,200 --> 00:22:18,640
additive sharing of zero

505
00:22:20,559 --> 00:22:22,240
the notion of robust territorial

506
00:22:22,240 --> 00:22:25,039
generators can be viewed as an extension

507
00:22:25,039 --> 00:22:27,760
of the robust device independent prg

508
00:22:27,760 --> 00:22:32,000
introduced in ikl plus 13.

509
00:22:32,240 --> 00:22:35,360
first we required of these to satisfy

510
00:22:35,360 --> 00:22:38,000
that their summation is zero

511
00:22:38,000 --> 00:22:39,039
second

512
00:22:39,039 --> 00:22:41,120
and usually can access to the outfit

513
00:22:41,120 --> 00:22:43,679
piece by learning not only a single

514
00:22:43,679 --> 00:22:46,880
audit beat but also a linear combination

515
00:22:46,880 --> 00:22:50,320
specified by the access set

516
00:22:50,320 --> 00:22:52,320
if the access set only contains the

517
00:22:52,320 --> 00:22:53,600
other bs

518
00:22:53,600 --> 00:22:56,720
a robust paradigm generator decreased to

519
00:22:56,720 --> 00:23:00,720
a robust device independent prt

520
00:23:02,080 --> 00:23:04,320
in our work we use the probabilistic

521
00:23:04,320 --> 00:23:06,720
method to show the existence of a robust

522
00:23:06,720 --> 00:23:08,559
paradigm generator

523
00:23:08,559 --> 00:23:11,120
which uses out of t times log t and

524
00:23:11,120 --> 00:23:13,760
random piece when the size of the excess

525
00:23:13,760 --> 00:23:16,559
side is bounded by out of n

526
00:23:16,559 --> 00:23:18,480
combining the basic instructions for the

527
00:23:18,480 --> 00:23:20,880
actual gadget and a robust territorial

528
00:23:20,880 --> 00:23:22,400
generator

529
00:23:22,400 --> 00:23:25,280
we obtain a leak tolerate excel gadgets

530
00:23:25,280 --> 00:23:28,640
which computes xr of n bits and uses the

531
00:23:28,640 --> 00:23:32,080
same number of random bits

532
00:23:33,200 --> 00:23:35,120
an immediate problem is that

533
00:23:35,120 --> 00:23:37,280
if we use fresh randomness for each

534
00:23:37,280 --> 00:23:38,720
actual gadget

535
00:23:38,720 --> 00:23:40,799
the randomized complexity will become

536
00:23:40,799 --> 00:23:43,200
linear in the circuit size

537
00:23:43,200 --> 00:23:44,960
to overcome this issue

538
00:23:44,960 --> 00:23:48,000
our solution is to use a single prt to

539
00:23:48,000 --> 00:23:50,000
repair random beads for all actual

540
00:23:50,000 --> 00:23:51,360
gadgets

541
00:23:51,360 --> 00:23:54,640
we refer to the new prd as multi-phase

542
00:23:54,640 --> 00:23:58,320
robust telescope generator

543
00:23:58,880 --> 00:24:00,559
let me give a quick summary of our

544
00:24:00,559 --> 00:24:02,960
results and the main techniques

545
00:24:02,960 --> 00:24:05,200
in this work our main contribution is a

546
00:24:05,200 --> 00:24:07,360
construction of private circuits that

547
00:24:07,360 --> 00:24:11,840
uses out of t times log ts random bits

548
00:24:11,840 --> 00:24:14,240
to achieve our results we first give an

549
00:24:14,240 --> 00:24:16,720
outer construction where we use a strong

550
00:24:16,720 --> 00:24:19,279
t by c dependent prg to protect their

551
00:24:19,279 --> 00:24:20,880
values

552
00:24:20,880 --> 00:24:23,360
we show that the problem of computing

553
00:24:23,360 --> 00:24:26,080
the maxwell values can be reduced to

554
00:24:26,080 --> 00:24:30,080
constructing liquid solid excel guidance

555
00:24:30,080 --> 00:24:32,640
then we focus on constructing granules

556
00:24:32,640 --> 00:24:35,760
efficient leakage tolerant exogenous

557
00:24:35,760 --> 00:24:37,840
we start with a simple construction

558
00:24:37,840 --> 00:24:39,679
which requires a linear number of random

559
00:24:39,679 --> 00:24:42,000
b's in the input size

560
00:24:42,000 --> 00:24:44,320
to the randomize the basic construction

561
00:24:44,320 --> 00:24:46,400
we give a new sufficient condition for

562
00:24:46,400 --> 00:24:49,200
the random source

563
00:24:49,200 --> 00:24:52,080
we introduce a new notion of prt robust

564
00:24:52,080 --> 00:24:53,919
highly shared generators

565
00:24:53,919 --> 00:24:56,080
to repair the random source required by

566
00:24:56,080 --> 00:24:58,960
our new sufficient condition

567
00:24:58,960 --> 00:25:01,120
by using the probabilistic method

568
00:25:01,120 --> 00:25:02,960
we proved the existence of a robust

569
00:25:02,960 --> 00:25:05,760
perishing generator that uses tails of

570
00:25:05,760 --> 00:25:08,159
out of t random bits

571
00:25:08,159 --> 00:25:10,080
combining the other construction and the

572
00:25:10,080 --> 00:25:11,520
inner construction

573
00:25:11,520 --> 00:25:14,559
we obtain our main results

574
00:25:14,559 --> 00:25:17,799
thank you

