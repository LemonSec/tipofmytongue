1
00:00:05,040 --> 00:00:06,640
everybody hello everybody hello

2
00:00:06,640 --> 00:00:09,920
everybody hello everybody um welcome to

3
00:00:09,920 --> 00:00:12,160
um the first session um i hope you've

4
00:00:12,160 --> 00:00:14,480
all recovered from whatever you did last

5
00:00:14,480 --> 00:00:16,720
night and we're it's about zero

6
00:00:16,720 --> 00:00:19,199
knowledge and we can have families of

7
00:00:19,199 --> 00:00:21,359
smart friendly two chains of elliptic

8
00:00:21,359 --> 00:00:23,279
curves um and the speaker's gonna be

9
00:00:23,279 --> 00:00:27,000
joseph over to you

10
00:00:37,600 --> 00:00:39,760
this

11
00:00:42,840 --> 00:00:46,920
is um

12
00:01:00,239 --> 00:01:03,239
is

13
00:01:15,280 --> 00:01:18,280
um

14
00:01:28,080 --> 00:01:31,080
um

15
00:01:47,439 --> 00:01:48,880
it's non-interactive arguments of

16
00:01:48,880 --> 00:01:51,520
knowledge so those are

17
00:01:51,520 --> 00:01:52,240
so

18
00:01:52,240 --> 00:01:54,880
proofs so so that so they are

19
00:01:54,880 --> 00:01:55,680
uh

20
00:01:55,680 --> 00:01:58,240
complete sound but only computational

21
00:01:58,240 --> 00:02:00,880
computationally sound so with respect to

22
00:02:00,880 --> 00:02:03,200
a computationally bounded prover and

23
00:02:03,200 --> 00:02:05,360
they are non-interactive so there is no

24
00:02:05,360 --> 00:02:06,560
interaction between the proven the

25
00:02:06,560 --> 00:02:08,560
verifier throughout the protocol

26
00:02:08,560 --> 00:02:10,160
and

27
00:02:10,160 --> 00:02:12,480
its accent which informally puts means

28
00:02:12,480 --> 00:02:13,520
that

29
00:02:13,520 --> 00:02:17,840
approve is very short and easy to verify

30
00:02:19,010 --> 00:02:21,760
[Applause]

31
00:02:21,760 --> 00:02:24,319
so among those zk snacks so there are

32
00:02:24,319 --> 00:02:26,640
pre-processing zk snacks for np language

33
00:02:26,640 --> 00:02:28,800
so we will be proving statements about a

34
00:02:28,800 --> 00:02:30,560
word belongs to our non-deterministic

35
00:02:30,560 --> 00:02:32,879
polynomial language so just to put some

36
00:02:32,879 --> 00:02:34,080
notations

37
00:02:34,080 --> 00:02:37,440
so uh we have our np program f with

38
00:02:37,440 --> 00:02:41,200
public input x and z a private input w

39
00:02:41,200 --> 00:02:44,160
such as the relation is satisfied so z

40
00:02:44,160 --> 00:02:46,400
equal to f of x and w

41
00:02:46,400 --> 00:02:48,800
so slack is typically

42
00:02:48,800 --> 00:02:51,920
consists typically in a three algorithms

43
00:02:51,920 --> 00:02:54,239
so sits up so it takes the program f

44
00:02:54,239 --> 00:02:56,239
some security parameter lambda and

45
00:02:56,239 --> 00:02:58,400
output some key material so pk has

46
00:02:58,400 --> 00:03:00,959
improving key and vk is in verification

47
00:03:00,959 --> 00:03:03,040
so the proof algorithm takes

48
00:03:03,040 --> 00:03:05,040
basically all the inputs so the public

49
00:03:05,040 --> 00:03:07,120
input and the private input and pk which

50
00:03:07,120 --> 00:03:08,800
encodes the program

51
00:03:08,800 --> 00:03:10,319
to the approval

52
00:03:10,319 --> 00:03:13,760
and output some proof here denoted pi

53
00:03:13,760 --> 00:03:15,040
and

54
00:03:15,040 --> 00:03:16,959
so the verification algorithm takes

55
00:03:16,959 --> 00:03:18,800
basically all the public inputs and the

56
00:03:18,800 --> 00:03:21,040
proof pi and outputs of body and whether

57
00:03:21,040 --> 00:03:23,040
the proof is verified or not so the

58
00:03:23,040 --> 00:03:25,680
setup can be done by anyone or in some

59
00:03:25,680 --> 00:03:27,840
protocols which are trapdoored by a

60
00:03:27,840 --> 00:03:29,920
trusted party or in a multi-party

61
00:03:29,920 --> 00:03:32,400
computation way

62
00:03:32,400 --> 00:03:34,400
the the proving algorithm is done by

63
00:03:34,400 --> 00:03:35,680
what basically the one who knows the

64
00:03:35,680 --> 00:03:38,239
secret w and the verifier anyone who has

65
00:03:38,239 --> 00:03:39,920
access to this proof and the public

66
00:03:39,920 --> 00:03:42,159
inputs

67
00:03:42,159 --> 00:03:43,040
um

68
00:03:43,040 --> 00:03:44,400
so we've been talking about zero

69
00:03:44,400 --> 00:03:46,799
knowledge rules ck snacks as a subset

70
00:03:46,799 --> 00:03:49,680
and pre-processing dk slacks and those

71
00:03:49,680 --> 00:03:52,400
pre-processing zk slacks are best

72
00:03:52,400 --> 00:03:54,400
instantiated with

73
00:03:54,400 --> 00:03:57,439
pairings over added t-curves

74
00:03:57,439 --> 00:03:59,360
so we need an electric curve so here

75
00:03:59,360 --> 00:04:01,200
he's giving it's given in short fire

76
00:04:01,200 --> 00:04:03,120
transform so defined over

77
00:04:03,120 --> 00:04:05,360
a finite field of

78
00:04:05,360 --> 00:04:07,519
prime characteristic or prime power so

79
00:04:07,519 --> 00:04:09,680
it has a subgroup

80
00:04:09,680 --> 00:04:11,860
of prime order r

81
00:04:11,860 --> 00:04:13,519
[Music]

82
00:04:13,519 --> 00:04:16,320
so r divides q plus one minus t so t is

83
00:04:16,320 --> 00:04:19,279
the favorite trace and so for pairings

84
00:04:19,279 --> 00:04:20,478
we need this

85
00:04:20,478 --> 00:04:22,639
in between degree to be small enough so

86
00:04:22,639 --> 00:04:24,880
the embedded degree k is like the

87
00:04:24,880 --> 00:04:27,840
smallest integer such as r the sub order

88
00:04:27,840 --> 00:04:30,479
divides q to the k minus one

89
00:04:30,479 --> 00:04:33,120
and so billionaire appearing is this uh

90
00:04:33,120 --> 00:04:35,040
billionaire map that goes from g1 cross

91
00:04:35,040 --> 00:04:38,160
g2 to gt so g1 and g20 t

92
00:04:38,160 --> 00:04:39,520
are groups

93
00:04:39,520 --> 00:04:41,199
of order r

94
00:04:41,199 --> 00:04:43,759
so g1 is the group of the so they find

95
00:04:43,759 --> 00:04:45,040
the group of points on the elliptical

96
00:04:45,040 --> 00:04:47,360
divided by the base field g2 over an

97
00:04:47,360 --> 00:04:50,160
extension field and gt is a

98
00:04:50,160 --> 00:04:52,960
is on an extension uh fq to the k so

99
00:04:52,960 --> 00:04:55,520
it's afterwards of the article for of

100
00:04:55,520 --> 00:04:58,080
unity and those three groups are

101
00:04:58,080 --> 00:05:00,880
of the same order

102
00:05:01,600 --> 00:05:03,440
so i will just give an example of one of

103
00:05:03,440 --> 00:05:05,199
the pairing based

104
00:05:05,199 --> 00:05:06,880
snacks that is widely used and

105
00:05:06,880 --> 00:05:10,240
implemented nowadays so our relation is

106
00:05:10,240 --> 00:05:13,360
z equal to f of x of w so x z and w here

107
00:05:13,360 --> 00:05:14,800
i'm giving them in

108
00:05:14,800 --> 00:05:16,000
vectors

109
00:05:16,000 --> 00:05:18,800
so the setup uh so output these key

110
00:05:18,800 --> 00:05:20,720
materials which are a bunch of elements

111
00:05:20,720 --> 00:05:22,000
in these groups

112
00:05:22,000 --> 00:05:26,160
in these pair angles g1 g2 and gt

113
00:05:26,560 --> 00:05:29,759
the proven algorithm output are

114
00:05:29,759 --> 00:05:32,560
three points on on the curve so on g1

115
00:05:32,560 --> 00:05:34,560
and g2 so we see that they are constant

116
00:05:34,560 --> 00:05:36,320
size with respect to some security

117
00:05:36,320 --> 00:05:38,880
parameter lambda and what we are

118
00:05:38,880 --> 00:05:40,800
interested in is the verification

119
00:05:40,800 --> 00:05:42,639
algorithm so the verification algorithm

120
00:05:42,639 --> 00:05:44,639
is where the pairing computation is

121
00:05:44,639 --> 00:05:46,880
needed so to verify the proof it's boils

122
00:05:46,880 --> 00:05:49,039
down to verifying this pairing product

123
00:05:49,039 --> 00:05:50,240
check

124
00:05:50,240 --> 00:05:53,280
which is up uh so a checkoff so we just

125
00:05:53,280 --> 00:05:55,199
need to compute some pairings between

126
00:05:55,199 --> 00:05:57,199
the proof element and the verification

127
00:05:57,199 --> 00:05:59,360
element and this is basically how we

128
00:05:59,360 --> 00:06:01,120
verify the proof so why we are talking

129
00:06:01,120 --> 00:06:04,160
about this is because we need to do

130
00:06:04,160 --> 00:06:07,120
so in this talk a recursive post that is

131
00:06:07,120 --> 00:06:09,840
proof verifying other posts so there are

132
00:06:09,840 --> 00:06:11,680
a bunch of applications for this one of

133
00:06:11,680 --> 00:06:13,919
them is the proof aggregation because

134
00:06:13,919 --> 00:06:16,000
we've seen here that

135
00:06:16,000 --> 00:06:17,680
the proof is constant size so imagine

136
00:06:17,680 --> 00:06:19,440
you have like a thousand of course and

137
00:06:19,440 --> 00:06:20,960
if you do a proof of a thousand of

138
00:06:20,960 --> 00:06:22,960
proofs then the resulting proof will be

139
00:06:22,960 --> 00:06:24,880
constant size so you have like a single

140
00:06:24,880 --> 00:06:26,960
constant size proof that verifies a

141
00:06:26,960 --> 00:06:28,479
thousand of those there are other

142
00:06:28,479 --> 00:06:31,520
applications for a

143
00:06:31,520 --> 00:06:33,680
recursive pro such as

144
00:06:33,680 --> 00:06:35,759
space on time complexity and we as we

145
00:06:35,759 --> 00:06:38,560
will see in the next start by miguel

146
00:06:38,560 --> 00:06:39,759
um

147
00:06:39,759 --> 00:06:41,919
so what we want to do is

148
00:06:41,919 --> 00:06:43,840
approve of above so

149
00:06:43,840 --> 00:06:46,560
in pairing based snarks so our

150
00:06:46,560 --> 00:06:48,560
np program f

151
00:06:48,560 --> 00:06:51,680
uh so leaves uh so the computations are

152
00:06:51,680 --> 00:06:53,120
performed in

153
00:06:53,120 --> 00:06:55,759
fr without the subgroup order

154
00:06:55,759 --> 00:06:57,759
of the elliptic curve

155
00:06:57,759 --> 00:06:59,840
and the previous relevant is done in g1

156
00:06:59,840 --> 00:07:02,319
and g2 in instance for gauss 16 which

157
00:07:02,319 --> 00:07:04,240
are of order r but the verification

158
00:07:04,240 --> 00:07:06,479
algorithm is a pairing computation which

159
00:07:06,479 --> 00:07:08,880
takes place in a different field which

160
00:07:08,880 --> 00:07:11,759
is uh so the gt target group or at least

161
00:07:11,759 --> 00:07:14,880
the the extension field fp to the k so

162
00:07:14,880 --> 00:07:16,800
if you want to create a proof that

163
00:07:16,800 --> 00:07:19,840
verifies another proof then there is an

164
00:07:19,840 --> 00:07:22,479
arithmetic mismatch the problem is

165
00:07:22,479 --> 00:07:24,479
you need to express the parent

166
00:07:24,479 --> 00:07:27,280
computation as an arithmetic circuit in

167
00:07:27,280 --> 00:07:29,919
fr and the parent computation leaves in

168
00:07:29,919 --> 00:07:33,520
fq what is fq to the k so one first

169
00:07:33,520 --> 00:07:35,440
attempt would be to

170
00:07:35,440 --> 00:07:36,880
have a curve

171
00:07:36,880 --> 00:07:39,919
an elliptic curve that has q equal to r

172
00:07:39,919 --> 00:07:41,440
but this is like the kind of curves that

173
00:07:41,440 --> 00:07:42,880
we do not use in cryptography because

174
00:07:42,880 --> 00:07:44,319
the discrete logarithm is working in

175
00:07:44,319 --> 00:07:47,680
this case the second attempt would be

176
00:07:47,680 --> 00:07:50,240
to simulate or to emulate the operations

177
00:07:50,240 --> 00:07:53,759
f q in fr so q is now equal to r so r is

178
00:07:53,759 --> 00:07:56,400
the sub order q is the field so the size

179
00:07:56,400 --> 00:07:57,840
of the base field so this is

180
00:07:57,840 --> 00:07:59,840
theoretically possible but it results in

181
00:07:59,840 --> 00:08:01,440
a huge overhead

182
00:08:01,440 --> 00:08:03,280
and the third attempt would be not to

183
00:08:03,280 --> 00:08:04,960
use the same elliptic curves for the

184
00:08:04,960 --> 00:08:06,960
proof and for the recursive proof but to

185
00:08:06,960 --> 00:08:10,000
change the elliptic curves in order to

186
00:08:10,000 --> 00:08:12,000
not have this arithmetic mismatch and

187
00:08:12,000 --> 00:08:14,319
this is what we call chains or cycles of

188
00:08:14,319 --> 00:08:15,759
elliptic curves

189
00:08:15,759 --> 00:08:18,960
so just to to to to to to explain this

190
00:08:18,960 --> 00:08:20,960
so we will have here are what's what i'm

191
00:08:20,960 --> 00:08:24,319
calling a snark zero so it has a pairing

192
00:08:24,319 --> 00:08:27,680
e so three goes g1 g2 and gt of order r

193
00:08:27,680 --> 00:08:30,240
and then so we instantiate this with an

194
00:08:30,240 --> 00:08:32,000
elliptic curve that we call an inner

195
00:08:32,000 --> 00:08:33,200
curve

196
00:08:33,200 --> 00:08:37,679
so e0 defined over fq of prime order r

197
00:08:37,679 --> 00:08:41,440
and we need to have a second snack so

198
00:08:41,440 --> 00:08:43,760
snack one that verifies apparent

199
00:08:43,760 --> 00:08:45,839
computations that takes place in fq so

200
00:08:45,839 --> 00:08:47,839
we will instantiate it with a different

201
00:08:47,839 --> 00:08:50,320
electric curves so with a pair in e

202
00:08:50,320 --> 00:08:52,000
where the the pairing groups are of

203
00:08:52,000 --> 00:08:54,560
order q so this is the outside curve so

204
00:08:54,560 --> 00:08:57,120
e1 defined over difference field fs but

205
00:08:57,120 --> 00:08:59,760
it has a loader equal to the base field

206
00:08:59,760 --> 00:09:01,440
or the previous one or at least that

207
00:09:01,440 --> 00:09:02,399
divides

208
00:09:02,399 --> 00:09:05,440
so so we can unload some some cofactor

209
00:09:05,440 --> 00:09:07,279
so

210
00:09:07,279 --> 00:09:09,519
if we make abstraction of these so given

211
00:09:09,519 --> 00:09:11,839
some some integer q

212
00:09:11,839 --> 00:09:13,920
we search for apparent friendly curve e1

213
00:09:13,920 --> 00:09:17,120
of order h times q over any finite uh

214
00:09:17,120 --> 00:09:19,680
field fs so this is uh

215
00:09:19,680 --> 00:09:23,839
already known in the literature but

216
00:09:24,000 --> 00:09:26,160
if we take a look back what we need

217
00:09:26,160 --> 00:09:28,800
exactly for a slag is a curve that is

218
00:09:28,800 --> 00:09:30,800
pairing friendly but there is a

219
00:09:30,800 --> 00:09:32,800
condition for

220
00:09:32,800 --> 00:09:35,279
efficient implementation which is r

221
00:09:35,279 --> 00:09:37,360
minus one so the sub group order minus

222
00:09:37,360 --> 00:09:39,279
one should be a highly to addict which

223
00:09:39,279 --> 00:09:40,800
means should be divisible by a high

224
00:09:40,800 --> 00:09:42,160
power of two

225
00:09:42,160 --> 00:09:44,160
and this is for implementing efficient

226
00:09:44,160 --> 00:09:46,080
fast fourier transform so because as i

227
00:09:46,080 --> 00:09:49,360
told you the computations of the prover

228
00:09:49,360 --> 00:09:51,519
take place in fr and it is basically

229
00:09:51,519 --> 00:09:53,519
some polynomial arithmetic which are

230
00:09:53,519 --> 00:09:55,120
best implemented using fast fourier

231
00:09:55,120 --> 00:09:56,800
transforms and fast fourier transforms

232
00:09:56,800 --> 00:09:59,040
are best implemented using radix two

233
00:09:59,040 --> 00:10:01,519
ffts so we need the sub order minus one

234
00:10:01,519 --> 00:10:03,279
to be highly to add

235
00:10:03,279 --> 00:10:04,959
so this is just for slacks we can pick

236
00:10:04,959 --> 00:10:06,720
any ellipticals from the literature that

237
00:10:06,720 --> 00:10:09,200
is pairing friendly and we can

238
00:10:09,200 --> 00:10:11,440
see if we can make the r minus one

239
00:10:11,440 --> 00:10:13,360
highly to addict but if you want to do

240
00:10:13,360 --> 00:10:14,880
two chains so

241
00:10:14,880 --> 00:10:17,200
recursive two chains we can have we can

242
00:10:17,200 --> 00:10:19,519
look at cycles which means basically two

243
00:10:19,519 --> 00:10:21,200
electric curves for which the subgroup

244
00:10:21,200 --> 00:10:23,279
order of one is equal to the finite

245
00:10:23,279 --> 00:10:25,839
field or the other one and vice versa

246
00:10:25,839 --> 00:10:28,160
but unfortunately we know only mnt for

247
00:10:28,160 --> 00:10:30,959
mnt6 for these

248
00:10:30,959 --> 00:10:33,680
cycles which are not quite efficient at

249
00:10:33,680 --> 00:10:36,240
128 bit security because basically this

250
00:10:36,240 --> 00:10:38,399
the impedance degree is 4.6 which is

251
00:10:38,399 --> 00:10:39,680
small

252
00:10:39,680 --> 00:10:42,320
but in our recursive snarks with two

253
00:10:42,320 --> 00:10:43,440
chains

254
00:10:43,440 --> 00:10:45,519
we can create we can construct these

255
00:10:45,519 --> 00:10:47,440
ellipticals in a

256
00:10:47,440 --> 00:10:50,399
sequential fashion so we start by

257
00:10:50,399 --> 00:10:51,839
finding our first so the inner

258
00:10:51,839 --> 00:10:53,839
elliptical which is which has to be

259
00:10:53,839 --> 00:10:55,920
pairing friendly r

260
00:10:55,920 --> 00:10:58,000
minus one to be highly to addict but

261
00:10:58,000 --> 00:11:00,880
also q minus one the final the the base

262
00:11:00,880 --> 00:11:03,279
field characteristic minus one because

263
00:11:03,279 --> 00:11:05,760
this base field characteristic will be

264
00:11:05,760 --> 00:11:08,560
the subgroup order of the next curve so

265
00:11:08,560 --> 00:11:09,920
the next curve should be pairing

266
00:11:09,920 --> 00:11:12,399
friendly and should have a sub order

267
00:11:12,399 --> 00:11:15,360
precisely equal to the base field of the

268
00:11:15,360 --> 00:11:16,959
previous one

269
00:11:16,959 --> 00:11:18,000
um

270
00:11:18,000 --> 00:11:20,160
so

271
00:11:20,800 --> 00:11:22,880
so we know methods from the literature

272
00:11:22,880 --> 00:11:24,800
in order to find an elliptic apparently

273
00:11:24,800 --> 00:11:28,399
ellipticals with precisely uh with a

274
00:11:28,399 --> 00:11:30,240
precise sub group order so for example

275
00:11:30,240 --> 00:11:31,839
the quick speech method

276
00:11:31,839 --> 00:11:33,440
so in order to find the performance

277
00:11:33,440 --> 00:11:35,519
elliptical we need the base field to be

278
00:11:35,519 --> 00:11:37,839
a prime our prime power the four minus

279
00:11:37,839 --> 00:11:40,399
trace to be relatively prime to q so in

280
00:11:40,399 --> 00:11:42,000
order to hold allow super singular

281
00:11:42,000 --> 00:11:44,240
elliptic curves in this case uh the sub

282
00:11:44,240 --> 00:11:46,800
order to be prime to divide q plus one

283
00:11:46,800 --> 00:11:47,920
minus t

284
00:11:47,920 --> 00:11:50,399
uh so this is the the order of the curve

285
00:11:50,399 --> 00:11:52,720
and r divides q to the k minus one so

286
00:11:52,720 --> 00:11:54,399
this is the embedding degree and the

287
00:11:54,399 --> 00:11:56,079
complex multiplication equation should

288
00:11:56,079 --> 00:11:57,600
be satisfies for

289
00:11:57,600 --> 00:11:59,600
not some not too big discriminant in

290
00:11:59,600 --> 00:12:01,279
order to find the coefficients of the

291
00:12:01,279 --> 00:12:04,560
curve so here we just need to fix r

292
00:12:04,560 --> 00:12:06,800
uh

293
00:12:07,279 --> 00:12:09,760
so here first so the cox pinch method is

294
00:12:09,760 --> 00:12:11,600
basically just

295
00:12:11,600 --> 00:12:13,760
relies on the observation that t minus 1

296
00:12:13,760 --> 00:12:15,920
is equal to q modulo r so we just need

297
00:12:15,920 --> 00:12:19,440
to find the generator of z out of rz and

298
00:12:19,440 --> 00:12:21,440
to raise it to r minus 1 out of q so

299
00:12:21,440 --> 00:12:25,560
that it is a k root of unity

300
00:12:26,480 --> 00:12:28,480
so there is like the translation mutatus

301
00:12:28,480 --> 00:12:30,880
mutandes to this algorithm to the to the

302
00:12:30,880 --> 00:12:32,560
polynomial domain

303
00:12:32,560 --> 00:12:33,279
uh

304
00:12:33,279 --> 00:12:35,200
so which is called so it is due to

305
00:12:35,200 --> 00:12:37,040
brazing wang and independently also to

306
00:12:37,040 --> 00:12:39,519
buy tolling and scots

307
00:12:39,519 --> 00:12:42,720
and the ratio of

308
00:12:42,720 --> 00:12:45,360
the sizes of the base field and the

309
00:12:45,360 --> 00:12:46,880
suburb orders

310
00:12:46,880 --> 00:12:48,000
is

311
00:12:48,000 --> 00:12:50,480
is at least two in cox pinch but in

312
00:12:50,480 --> 00:12:53,360
rising wing is smaller strictly than two

313
00:12:53,360 --> 00:12:57,120
because uh we we reason about

314
00:12:57,120 --> 00:13:00,160
degrees of polynomials

315
00:13:00,160 --> 00:13:01,839
and also the polynomials here are

316
00:13:01,839 --> 00:13:04,000
expressed so the the parameters of the

317
00:13:04,000 --> 00:13:06,160
curves are expressed as polynomials

318
00:13:06,160 --> 00:13:07,440
which help us

319
00:13:07,440 --> 00:13:10,079
have faster implementations

320
00:13:10,079 --> 00:13:11,120
so there are

321
00:13:11,120 --> 00:13:13,040
a long line of research in order to

322
00:13:13,040 --> 00:13:15,680
optimize perineum implementations when

323
00:13:15,680 --> 00:13:17,839
when parameters are given in

324
00:13:17,839 --> 00:13:20,399
in polynomials but the problem we have

325
00:13:20,399 --> 00:13:21,839
here

326
00:13:21,839 --> 00:13:24,560
so inverse negative method we just look

327
00:13:24,560 --> 00:13:27,760
for a polynomial r of x but in our case

328
00:13:27,760 --> 00:13:29,839
the polynomial of x is already fixed

329
00:13:29,839 --> 00:13:32,079
because it is the polynomial p of x of

330
00:13:32,079 --> 00:13:34,399
the previous curve of the inner curve so

331
00:13:34,399 --> 00:13:36,720
we do not have any flexibility here and

332
00:13:36,720 --> 00:13:39,199
in all the families we've looked at so

333
00:13:39,199 --> 00:13:43,199
barito linscott or baretona or even kss

334
00:13:43,199 --> 00:13:44,480
families

335
00:13:44,480 --> 00:13:46,560
the resulting polynomial q of x so the

336
00:13:46,560 --> 00:13:48,399
base field of the outer curve

337
00:13:48,399 --> 00:13:51,040
is never irreducible which means that we

338
00:13:51,040 --> 00:13:53,279
can never it can never output

339
00:13:53,279 --> 00:13:57,199
polynomials so we were obliged to lift

340
00:13:57,199 --> 00:13:59,279
the polynomial parameters of the curves

341
00:13:59,279 --> 00:14:00,800
and here

342
00:14:00,800 --> 00:14:04,399
basically the forbinos trace and the

343
00:14:04,399 --> 00:14:06,079
the complex multiplication equations

344
00:14:06,079 --> 00:14:08,560
with respect to this r in order to make

345
00:14:08,560 --> 00:14:09,360
q

346
00:14:09,360 --> 00:14:10,480
uh

347
00:14:10,480 --> 00:14:11,279
uh

348
00:14:11,279 --> 00:14:13,519
a reducible polynomial that satisfies

349
00:14:13,519 --> 00:14:15,199
the buniakovsky conjecture which means

350
00:14:15,199 --> 00:14:17,839
that we can so this polynomial can

351
00:14:17,839 --> 00:14:20,320
output

352
00:14:20,320 --> 00:14:22,800
primes

353
00:14:24,000 --> 00:14:26,480
so with in mind two applications which

354
00:14:26,480 --> 00:14:29,360
are two kind of snacks one is gross 16

355
00:14:29,360 --> 00:14:31,040
and one what i'm calling here is

356
00:14:31,040 --> 00:14:36,560
universal kzg snacks so universal snacks

357
00:14:36,560 --> 00:14:39,120
are instantiated in the piop model with

358
00:14:39,120 --> 00:14:41,519
a polynomial commitment scheme and the

359
00:14:41,519 --> 00:14:43,279
polynomial commitment scheme here i'm

360
00:14:43,279 --> 00:14:45,360
taking the kcg polynomial scheme which

361
00:14:45,360 --> 00:14:47,440
relies on parents so we have the same

362
00:14:47,440 --> 00:14:49,760
mismatch arithmetic than in growth 16.

363
00:14:49,760 --> 00:14:50,480
but

364
00:14:50,480 --> 00:14:52,959
look at what we want so we want 128 bit

365
00:14:52,959 --> 00:14:55,199
security for both we want the curve to

366
00:14:55,199 --> 00:14:57,040
be the curves so the first one and the

367
00:14:57,040 --> 00:14:58,399
second one will be pairing friendly but

368
00:14:58,399 --> 00:14:59,920
here we're looking at the slug zero so

369
00:14:59,920 --> 00:15:01,680
the first one

370
00:15:01,680 --> 00:15:03,600
and we want efficient so for cos16 we

371
00:15:03,600 --> 00:15:06,880
want efficient arithmetic over g1 g2

372
00:15:06,880 --> 00:15:08,880
gt so all the three groups and the

373
00:15:08,880 --> 00:15:12,560
pairing but for universal kzg snacks

374
00:15:12,560 --> 00:15:14,720
such as if you want if you know plaque

375
00:15:14,720 --> 00:15:17,199
or marlin or sonic

376
00:15:17,199 --> 00:15:19,440
we do not need g2 arithmetic and we do

377
00:15:19,440 --> 00:15:21,440
not need gt arithmetic we just need

378
00:15:21,440 --> 00:15:24,639
efficient g1 arithmetic and efficient

379
00:15:24,639 --> 00:15:27,040
pairings so we look for

380
00:15:27,040 --> 00:15:29,120
two families of elliptic curves for

381
00:15:29,120 --> 00:15:31,839
which we have these and we need p minus

382
00:15:31,839 --> 00:15:34,639
one and r minus one both to be divisible

383
00:15:34,639 --> 00:15:36,880
by a high power of two so we looked at

384
00:15:36,880 --> 00:15:40,320
families from baritolin scott family of

385
00:15:40,320 --> 00:15:41,360
course

386
00:15:41,360 --> 00:15:44,880
of mbd degrees 12 and 24 and

387
00:15:44,880 --> 00:15:46,880
the congregancy

388
00:15:46,880 --> 00:15:49,199
that it needs to to to satisfy is just

389
00:15:49,199 --> 00:15:52,800
the seed of the curve so the the value

390
00:15:52,800 --> 00:15:56,320
on which the polynomials are evaluated

391
00:15:56,320 --> 00:15:59,360
is congruent to one mode three times two

392
00:15:59,360 --> 00:16:01,600
to the l and l here is your input is

393
00:16:01,600 --> 00:16:02,880
this

394
00:16:02,880 --> 00:16:04,720
the power of two you need

395
00:16:04,720 --> 00:16:06,959
to divide the both p minus one and r

396
00:16:06,959 --> 00:16:10,079
minus one but most interest and uh

397
00:16:10,079 --> 00:16:12,320
so most interestingly is a

398
00:16:12,320 --> 00:16:14,480
second curve so the slack one

399
00:16:14,480 --> 00:16:15,759
uh

400
00:16:15,759 --> 00:16:18,000
so we needed to be 128 bit secure

401
00:16:18,000 --> 00:16:19,839
pairing friendly efficient arithmetic

402
00:16:19,839 --> 00:16:22,240
for all the groups and the pairings and

403
00:16:22,240 --> 00:16:24,959
ought to be equal to p so we looked at

404
00:16:24,959 --> 00:16:27,519
blazing rank families and cox pinch

405
00:16:27,519 --> 00:16:30,320
families and we have some result that

406
00:16:30,320 --> 00:16:32,959
shows that you can have atomos k equal

407
00:16:32,959 --> 00:16:35,440
to six so the mb degree

408
00:16:35,440 --> 00:16:36,800
equal to sex

409
00:16:36,800 --> 00:16:38,000
and

410
00:16:38,000 --> 00:16:40,240
so we derived the formulas for

411
00:16:40,240 --> 00:16:42,160
arithmetic over the three groups and the

412
00:16:42,160 --> 00:16:43,600
novel

413
00:16:43,600 --> 00:16:46,720
pairing computations for for this case

414
00:16:46,720 --> 00:16:48,959
just in terms of the seed x and the

415
00:16:48,959 --> 00:16:51,839
lifting cofactors h h t and h y so

416
00:16:51,839 --> 00:16:54,720
whatever the curve you start with

417
00:16:54,720 --> 00:16:56,959
the the outer curve will always have the

418
00:16:56,959 --> 00:16:59,680
same formulas in terms of these

419
00:16:59,680 --> 00:17:02,560
parameters which gives us

420
00:17:02,560 --> 00:17:04,400
a family of uh

421
00:17:04,400 --> 00:17:06,000
of two chains

422
00:17:06,000 --> 00:17:07,520
uh in this sense

423
00:17:07,520 --> 00:17:10,000
uh so we looked also at cox pinch uh

424
00:17:10,000 --> 00:17:12,000
curve of embedding degree high of higher

425
00:17:12,000 --> 00:17:14,319
mbd degrees so eight and twelve for more

426
00:17:14,319 --> 00:17:15,799
conservative

427
00:17:15,799 --> 00:17:19,359
security um

428
00:17:19,359 --> 00:17:22,720
so uh we shortlist a bunch of curves of

429
00:17:22,720 --> 00:17:23,839
two chains

430
00:17:23,839 --> 00:17:25,760
uh that we spent to some form these

431
00:17:25,760 --> 00:17:28,079
families and uh

432
00:17:28,079 --> 00:17:30,400
so for ghost section we took so

433
00:17:30,400 --> 00:17:34,480
our method uh rediscovers uh some old

434
00:17:34,480 --> 00:17:36,240
curves proposed in the literature so

435
00:17:36,240 --> 00:17:40,400
namely bls12 377 and bw6761

436
00:17:40,400 --> 00:17:43,679
and for universal kzg

437
00:17:43,679 --> 00:17:45,840
so we samples new curves based on the

438
00:17:45,840 --> 00:17:49,840
bls 24 families and so the b sub bw6 so

439
00:17:49,840 --> 00:17:52,559
we showed that bw6 is always faster than

440
00:17:52,559 --> 00:17:54,960
cox pinch eight or cox pinch as well so

441
00:17:54,960 --> 00:17:57,039
here i give the example of gross 16 and

442
00:17:57,039 --> 00:17:59,039
universal kcg is

443
00:17:59,039 --> 00:18:01,840
one of the versions of of planck so we

444
00:18:01,840 --> 00:18:03,600
see that the prover only so the

445
00:18:03,600 --> 00:18:07,120
computation of the approval only

446
00:18:07,120 --> 00:18:09,600
takes place in g1 and the photo section

447
00:18:09,600 --> 00:18:13,360
takes place also in g2

448
00:18:13,679 --> 00:18:16,320
so the fv program which is the program

449
00:18:16,320 --> 00:18:18,559
that verifies the the old snap which

450
00:18:18,559 --> 00:18:21,360
basically verifies

451
00:18:21,360 --> 00:18:24,240
the pairing computation so

452
00:18:24,240 --> 00:18:26,880
i3 so snarks reason about arithmetic

453
00:18:26,880 --> 00:18:28,960
circuits so the number of gates if we

454
00:18:28,960 --> 00:18:30,000
want to

455
00:18:30,000 --> 00:18:32,160
to translate or to port

456
00:18:32,160 --> 00:18:34,080
state-of-the-art implementation of bls

457
00:18:34,080 --> 00:18:36,559
12 curves into an arithmetic circuit it

458
00:18:36,559 --> 00:18:39,600
results in 80 000 constraints or 80 000

459
00:18:39,600 --> 00:18:41,520
gate multiplication gate and we were

460
00:18:41,520 --> 00:18:44,720
able to reduce it to 19 000

461
00:18:44,720 --> 00:18:47,360
and here are some benchmarks to for

462
00:18:47,360 --> 00:18:49,039
so for those

463
00:18:49,039 --> 00:18:50,480
shortlisted

464
00:18:50,480 --> 00:18:52,240
shortlisted curves with respect to the

465
00:18:52,240 --> 00:18:54,160
algorithm setup proof

466
00:18:54,160 --> 00:18:55,520
and uh

467
00:18:55,520 --> 00:18:58,080
and verify

468
00:18:58,080 --> 00:19:00,240
um

469
00:19:00,240 --> 00:19:02,400
so i don't think i don't know if i have

470
00:19:02,400 --> 00:19:05,200
connection here

471
00:19:09,120 --> 00:19:10,640
so um

472
00:19:10,640 --> 00:19:13,679
no no it's not shut

473
00:19:15,440 --> 00:19:18,480
so this is a playground so

474
00:19:18,480 --> 00:19:21,039
that's uh so so we use the glark

475
00:19:21,039 --> 00:19:24,799
ecosystem so an ecosystem already

476
00:19:24,799 --> 00:19:27,120
for smart proofs so it's it's already

477
00:19:27,120 --> 00:19:29,520
implement gross 16 and plonk and we

478
00:19:29,520 --> 00:19:31,679
implemented all the curves we we

479
00:19:31,679 --> 00:19:34,880
shortlisted into this ecosystem and here

480
00:19:34,880 --> 00:19:37,280
there is a playground

481
00:19:37,280 --> 00:19:38,400
that

482
00:19:38,400 --> 00:19:40,400
creates a smart proof

483
00:19:40,400 --> 00:19:42,559
uh in the in the browser so in web

484
00:19:42,559 --> 00:19:44,799
assembly

485
00:19:44,799 --> 00:19:47,840
so i have examples for so you you can

486
00:19:47,840 --> 00:19:49,600
look at it

487
00:19:49,600 --> 00:19:52,320
on your browser so it is played.gnar.i

488
00:19:52,320 --> 00:19:54,960
so i have one of the examples to create

489
00:19:54,960 --> 00:19:57,840
proof of proofs and basically you can

490
00:19:57,840 --> 00:19:59,520
create a proof on the browser and you

491
00:19:59,520 --> 00:20:01,679
can check the number of constraints and

492
00:20:01,679 --> 00:20:04,080
it prints all the

493
00:20:04,080 --> 00:20:05,600
so the arithmetic circuit in order to

494
00:20:05,600 --> 00:20:07,919
verify a pair

495
00:20:07,919 --> 00:20:09,360
um

496
00:20:09,360 --> 00:20:11,600
so yeah so that's it so the pairing is

497
00:20:11,600 --> 00:20:14,080
so the paper is on a print the

498
00:20:14,080 --> 00:20:16,320
implementations are open sourced under

499
00:20:16,320 --> 00:20:19,120
mit license so it is written in go we

500
00:20:19,120 --> 00:20:21,520
have also implementation in stage math

501
00:20:21,520 --> 00:20:24,159
and magma in order to verify uh the

502
00:20:24,159 --> 00:20:26,400
formulas we propose in the paper so we

503
00:20:26,400 --> 00:20:28,320
which are basically this novel pairing

504
00:20:28,320 --> 00:20:30,799
computation

505
00:20:30,799 --> 00:20:32,240
some tricks for

506
00:20:32,240 --> 00:20:34,880
subgroup membership

507
00:20:34,880 --> 00:20:36,480
on all the groups and there is a

508
00:20:36,480 --> 00:20:38,720
follow-up work with the aurora and

509
00:20:38,720 --> 00:20:40,720
iguania which is a survey of elliptical

510
00:20:40,720 --> 00:20:42,400
support systems

511
00:20:42,400 --> 00:20:43,919
and that's it for me

512
00:20:43,919 --> 00:20:47,080
thank you

513
00:20:50,320 --> 00:20:53,200
do we have do we have any questions

514
00:20:53,200 --> 00:20:56,159
i've got i've got a question sure so

515
00:20:56,159 --> 00:20:58,080
you've got uh two elliptic curves that

516
00:20:58,080 --> 00:21:00,320
kind of related to each other um

517
00:21:00,320 --> 00:21:01,520
have you thought

518
00:21:01,520 --> 00:21:03,039
and you've got like a lot of constraints

519
00:21:03,039 --> 00:21:05,039
in the system you know that's a really

520
00:21:05,039 --> 00:21:06,720
match up so have you thought of actually

521
00:21:06,720 --> 00:21:09,200
making one like a curve of genus two and

522
00:21:09,200 --> 00:21:10,720
then like using the pairing on a curve

523
00:21:10,720 --> 00:21:11,919
of genius too because that's going to

524
00:21:11,919 --> 00:21:13,440
have a smaller field

525
00:21:13,440 --> 00:21:15,840
it might be a bit more freedom i haven't

526
00:21:15,840 --> 00:21:18,799
looked at the curves of genus too and so

527
00:21:18,799 --> 00:21:20,400
so the pairings on curves on genius are

528
00:21:20,400 --> 00:21:23,120
efficient enough

529
00:21:24,480 --> 00:21:26,559
because that's i saw the idea down there

530
00:21:26,559 --> 00:21:28,080
i mean no

531
00:21:28,080 --> 00:21:30,000
idea because at the end of the day the

532
00:21:30,000 --> 00:21:31,120
parent is

533
00:21:31,120 --> 00:21:33,440
needed for the verification part which

534
00:21:33,440 --> 00:21:36,720
should be success otherwise

535
00:21:37,440 --> 00:21:40,240
any other questions

536
00:21:41,039 --> 00:21:42,880
oh yeah can you yeah okay i'll run down

537
00:21:42,880 --> 00:21:45,840
hold on

538
00:21:47,280 --> 00:21:49,360
hi thanks for the talk uh you mentioned

539
00:21:49,360 --> 00:21:51,919
proof systems like plonk which have uh

540
00:21:51,919 --> 00:21:54,559
high touristy and lots of roots of unity

541
00:21:54,559 --> 00:21:57,200
how much easier does it get to

542
00:21:57,200 --> 00:21:58,559
come up with cycles and stuff would you

543
00:21:58,559 --> 00:22:00,320
have had to do so much work if you

544
00:22:00,320 --> 00:22:01,360
didn't need

545
00:22:01,360 --> 00:22:03,360
all these roots of unity

546
00:22:03,360 --> 00:22:05,760
uh so cycles if you do not need those of

547
00:22:05,760 --> 00:22:07,919
unity they are trivial to find from

548
00:22:07,919 --> 00:22:10,480
complex multiplication theory

549
00:22:10,480 --> 00:22:11,360
so

550
00:22:11,360 --> 00:22:12,799
if you do not if you do not know i'm

551
00:22:12,799 --> 00:22:16,480
sorry if you need pairings then uh the

552
00:22:16,480 --> 00:22:19,760
only cycles we know about are m t fund m

553
00:22:19,760 --> 00:22:21,679
t cycles so it's the same problem so

554
00:22:21,679 --> 00:22:24,559
maybe it will be just the the size so

555
00:22:24,559 --> 00:22:26,400
for example in luna protocol it's just

556
00:22:26,400 --> 00:22:30,000
seven seven hundred uh something bits uh

557
00:22:30,000 --> 00:22:32,000
and for one twenty twenty eight bit of

558
00:22:32,000 --> 00:22:33,919
security you need uh more than this you

559
00:22:33,919 --> 00:22:36,320
need a thousand of bits so it will be

560
00:22:36,320 --> 00:22:37,760
always the same problem if you need

561
00:22:37,760 --> 00:22:39,600
pairing friendliness if you do not need

562
00:22:39,600 --> 00:22:41,280
parent friendliness so if you for

563
00:22:41,280 --> 00:22:43,360
example you use a halo where where to

564
00:22:43,360 --> 00:22:44,960
use up polynomial commitment that

565
00:22:44,960 --> 00:22:47,120
doesn't need bearings then cycles are

566
00:22:47,120 --> 00:22:50,080
easy to find uh

567
00:22:50,400 --> 00:22:52,320
okay no more questions well i thank the

568
00:22:52,320 --> 00:22:55,010
speaker again thank you

569
00:22:55,010 --> 00:23:00,650
[Applause]

