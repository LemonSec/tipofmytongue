1
00:00:00,000 --> 00:00:03,120
[Applause]

2
00:00:28,560 --> 00:00:30,800
okay so

3
00:00:30,800 --> 00:00:32,960
now that we know that there's a computer

4
00:00:32,960 --> 00:00:34,960
scientist with there's a bit of reason

5
00:00:34,960 --> 00:00:36,320
to be happy

6
00:00:36,320 --> 00:00:38,879
and we're moving to hiding in plain

7
00:00:38,879 --> 00:00:41,600
sight memory tight proofs via randomness

8
00:00:41,600 --> 00:00:44,160
programming as rigid will give the talk

9
00:00:44,160 --> 00:00:47,039
and this is joint work with rudy gosal

10
00:00:47,039 --> 00:00:50,320
joseph yeager and stefano tesaro

11
00:00:50,320 --> 00:00:52,320
thank you

12
00:00:52,320 --> 00:00:56,120
so very broadly

13
00:01:08,880 --> 00:01:13,199
in most prior work the common resource

14
00:01:20,640 --> 00:01:22,640
this is because the feasibility of

15
00:01:22,640 --> 00:01:24,240
certain attack

16
00:01:24,240 --> 00:01:26,960
is seriously

17
00:01:52,079 --> 00:01:53,439
for a security reduction to be

18
00:01:53,439 --> 00:01:56,719
meaningful we want it to be a time and

19
00:01:56,719 --> 00:01:59,680
advantage state meaning that we want the

20
00:01:59,680 --> 00:02:02,399
guarantees for pi and sigma to be as

21
00:02:02,399 --> 00:02:05,439
closely related as possible

22
00:02:05,439 --> 00:02:07,200
in the context of memory aware

23
00:02:07,200 --> 00:02:09,758
reductions we additionally take into

24
00:02:09,758 --> 00:02:12,720
account an adversary's memory while

25
00:02:12,720 --> 00:02:14,879
giving the security guarantee

26
00:02:14,879 --> 00:02:16,879
this then allows us to analogously

27
00:02:16,879 --> 00:02:19,760
define this notion of memory tightness

28
00:02:19,760 --> 00:02:22,239
but first we must ask ourselves why do

29
00:02:22,239 --> 00:02:24,480
we even care about memory tightness

30
00:02:24,480 --> 00:02:26,640
let's take an example

31
00:02:26,640 --> 00:02:28,879
consider the hard problem pi

32
00:02:28,879 --> 00:02:30,800
to be the discrete logarithm problem in

33
00:02:30,800 --> 00:02:33,519
a 4096-bit prime field

34
00:02:33,519 --> 00:02:35,680
now consider the two following scenarios

35
00:02:35,680 --> 00:02:38,400
one where a scheme sigma has

36
00:02:38,400 --> 00:02:39,280
a

37
00:02:39,280 --> 00:02:41,200
memory type reduction to pi

38
00:02:41,200 --> 00:02:44,000
and another where a scheme has a

39
00:02:44,000 --> 00:02:45,680
reduction to pi but the reduction is not

40
00:02:45,680 --> 00:02:47,200
memory right

41
00:02:47,200 --> 00:02:48,400
now

42
00:02:48,400 --> 00:02:50,000
for the former farmer

43
00:02:50,000 --> 00:02:52,560
say we need security against adversaries

44
00:02:52,560 --> 00:02:54,800
running in time to power 160 and using

45
00:02:54,800 --> 00:02:57,440
memory to power 70.

46
00:02:57,440 --> 00:02:58,879
in the former case

47
00:02:58,879 --> 00:03:00,800
we need guarantees for pi which is

48
00:03:00,800 --> 00:03:01,920
plausible

49
00:03:01,920 --> 00:03:04,080
on the other hand in the latter case the

50
00:03:04,080 --> 00:03:06,400
guarantees that we need for pi are known

51
00:03:06,400 --> 00:03:09,040
to be false due to existing attacks

52
00:03:09,040 --> 00:03:11,360
therefore the latter reduction gives us

53
00:03:11,360 --> 00:03:13,599
no guarantees at all

54
00:03:13,599 --> 00:03:14,560
but this

55
00:03:14,560 --> 00:03:16,640
reason memory tightness has been studied

56
00:03:16,640 --> 00:03:19,440
quite a bit over the last several years

57
00:03:19,440 --> 00:03:20,879
there have been

58
00:03:20,879 --> 00:03:22,879
impossibility results as well as

59
00:03:22,879 --> 00:03:24,480
techniques

60
00:03:24,480 --> 00:03:27,760
given to make reductions memory tight

61
00:03:27,760 --> 00:03:30,000
but the landscape of results is a bit

62
00:03:30,000 --> 00:03:31,360
strange

63
00:03:31,360 --> 00:03:33,599
because there have been examples of uh

64
00:03:33,599 --> 00:03:35,840
generic impossibility results being

65
00:03:35,840 --> 00:03:37,920
given and then later bypassed by

66
00:03:37,920 --> 00:03:40,799
considering specific schemes or settings

67
00:03:40,799 --> 00:03:43,680
uh even impossibility result

68
00:03:43,680 --> 00:03:46,319
tailored to specific schemes have been

69
00:03:46,319 --> 00:03:48,400
shown to be bypassed by just slightly

70
00:03:48,400 --> 00:03:50,000
tweaking the schemes

71
00:03:50,000 --> 00:03:52,400
further in this work we show that the

72
00:03:52,400 --> 00:03:54,720
ability to give memory tight reductions

73
00:03:54,720 --> 00:03:56,400
actually depends a lot on the

74
00:03:56,400 --> 00:03:58,560
definitional choices we make

75
00:03:58,560 --> 00:04:00,959
for this reason we were motivated to

76
00:04:00,959 --> 00:04:03,360
increase the toolkit to make reductions

77
00:04:03,360 --> 00:04:06,480
memory tight and here we introduce a new

78
00:04:06,480 --> 00:04:08,799
class of techniques that

79
00:04:08,799 --> 00:04:10,000
will make

80
00:04:10,000 --> 00:04:11,280
several different reductions memory

81
00:04:11,280 --> 00:04:13,519
types

82
00:04:13,519 --> 00:04:14,400
when we

83
00:04:14,400 --> 00:04:16,880
show proof that hardness of some problem

84
00:04:16,880 --> 00:04:19,600
pi implies a scheme is secure what we

85
00:04:19,600 --> 00:04:21,839
are really doing is we are showing that

86
00:04:21,839 --> 00:04:23,759
given an adversary a

87
00:04:23,759 --> 00:04:26,080
that breaks the security of the scheme

88
00:04:26,080 --> 00:04:27,040
sigma

89
00:04:27,040 --> 00:04:29,680
we can transform it into an algorithm r

90
00:04:29,680 --> 00:04:33,280
a which can solve this problem pi

91
00:04:33,280 --> 00:04:36,560
ah if the memory of r a is close to the

92
00:04:36,560 --> 00:04:38,240
memory of a

93
00:04:38,240 --> 00:04:41,040
then the reduction r is memory type

94
00:04:41,040 --> 00:04:42,720
uh

95
00:04:42,720 --> 00:04:45,280
the main task here that r needs to

96
00:04:45,280 --> 00:04:47,759
accomplish is to make sure

97
00:04:47,759 --> 00:04:48,560
it

98
00:04:48,560 --> 00:04:50,000
simulates the

99
00:04:50,000 --> 00:04:51,520
challenger for the security game of

100
00:04:51,520 --> 00:04:53,360
sigma 2a in a way that it is

101
00:04:53,360 --> 00:04:55,280
indistinguishable to a

102
00:04:55,280 --> 00:04:56,400
to do this

103
00:04:56,400 --> 00:04:59,040
r often needs to store state

104
00:04:59,040 --> 00:05:01,600
and for the reduction r to be memory

105
00:05:01,600 --> 00:05:05,120
type this state needs to be small

106
00:05:05,680 --> 00:05:07,840
the starting point of our work is this

107
00:05:07,840 --> 00:05:10,160
following key observation that for

108
00:05:10,160 --> 00:05:12,400
certain reductions are

109
00:05:12,400 --> 00:05:15,440
if r answers some query with some little

110
00:05:15,440 --> 00:05:16,320
a

111
00:05:16,320 --> 00:05:19,199
then it needs to store some state sigma

112
00:05:19,199 --> 00:05:22,880
a that it requires only if the adversary

113
00:05:22,880 --> 00:05:24,800
replies with a at some point in the

114
00:05:24,800 --> 00:05:26,560
future

115
00:05:26,560 --> 00:05:28,880
for these kind of reductions we need to

116
00:05:28,880 --> 00:05:31,440
figure out a way how we can avoid

117
00:05:31,440 --> 00:05:34,639
storing sigma a

118
00:05:34,639 --> 00:05:35,600
ah

119
00:05:35,600 --> 00:05:38,400
our main idea here is like hiding in

120
00:05:38,400 --> 00:05:40,720
plain sight we end up

121
00:05:40,720 --> 00:05:42,960
showing that we can sometimes hide sigma

122
00:05:42,960 --> 00:05:45,440
a within a itself and then recover it

123
00:05:45,440 --> 00:05:46,720
later

124
00:05:46,720 --> 00:05:48,639
of course this is not always possible

125
00:05:48,639 --> 00:05:51,280
but sometimes a has enough redundancy

126
00:05:51,280 --> 00:05:54,159
that this can be done

127
00:05:54,639 --> 00:05:56,319
we give three different techniques of

128
00:05:56,319 --> 00:06:00,080
doing this one where the sigma a is

129
00:06:00,080 --> 00:06:02,800
the state is a bit and we can recover

130
00:06:02,800 --> 00:06:04,240
very efficiently

131
00:06:04,240 --> 00:06:06,080
we come up with a similar technique

132
00:06:06,080 --> 00:06:08,400
where the recovery is not efficient and

133
00:06:08,400 --> 00:06:09,840
it adds to the running time of the

134
00:06:09,840 --> 00:06:10,880
reduction

135
00:06:10,880 --> 00:06:12,639
we also give a more powerful technique

136
00:06:12,639 --> 00:06:14,720
which can recover sigma a that is more

137
00:06:14,720 --> 00:06:16,479
than a bit but still of bounded length

138
00:06:16,479 --> 00:06:18,720
but efficiently recoverable

139
00:06:18,720 --> 00:06:20,479
uh i'll start with an example of the

140
00:06:20,479 --> 00:06:23,759
first technique efficient tagging

141
00:06:23,759 --> 00:06:26,240
uh let me first first tell you the story

142
00:06:26,240 --> 00:06:28,000
of digital signatures and memory

143
00:06:28,000 --> 00:06:30,720
tightness so unforgivability of digital

144
00:06:30,720 --> 00:06:33,280
signatures can be defined in two ways

145
00:06:33,280 --> 00:06:35,759
one where the adversary can make only

146
00:06:35,759 --> 00:06:37,919
one forgery attempt which we refer to as

147
00:06:37,919 --> 00:06:39,600
ufcma

148
00:06:39,600 --> 00:06:41,600
another where the adversary can make

149
00:06:41,600 --> 00:06:44,160
multiple 4g attempts we refer to this as

150
00:06:44,160 --> 00:06:46,080
muf cma

151
00:06:46,080 --> 00:06:48,160
in the memory unbounded setting these

152
00:06:48,160 --> 00:06:50,160
two result these two notions are

153
00:06:50,160 --> 00:06:52,479
equivalent however in the memory

154
00:06:52,479 --> 00:06:54,720
restricted setting r back at all showed

155
00:06:54,720 --> 00:06:58,639
that the reduction ufcma implies mu fcma

156
00:06:58,639 --> 00:07:00,639
cannot be both memory and advantage

157
00:07:00,639 --> 00:07:03,360
state let's see why

158
00:07:03,360 --> 00:07:05,360
so this reduction first

159
00:07:05,360 --> 00:07:07,599
forwards the verification key

160
00:07:07,599 --> 00:07:10,560
now for every signing query it receives

161
00:07:10,560 --> 00:07:12,639
it uses its own signing oracle to answer

162
00:07:12,639 --> 00:07:14,319
the query

163
00:07:14,319 --> 00:07:17,440
when it receives a forgery query

164
00:07:17,440 --> 00:07:20,160
it has to first check if

165
00:07:20,160 --> 00:07:21,360
the

166
00:07:21,360 --> 00:07:23,599
signature sigma is sigma star is valid

167
00:07:23,599 --> 00:07:25,759
for the message m star which it can do

168
00:07:25,759 --> 00:07:27,840
because it has the verification key but

169
00:07:27,840 --> 00:07:29,680
additionally it needs to check whether

170
00:07:29,680 --> 00:07:31,919
this message is fresh meaning that

171
00:07:31,919 --> 00:07:33,680
whether or not it was query to the

172
00:07:33,680 --> 00:07:35,280
signing oracle

173
00:07:35,280 --> 00:07:37,599
to do this check one option is to simply

174
00:07:37,599 --> 00:07:39,520
remember all the messages on which the

175
00:07:39,520 --> 00:07:41,759
adversary made signing queries this will

176
00:07:41,759 --> 00:07:43,360
of course make the reduction non-memory

177
00:07:43,360 --> 00:07:44,720
tight

178
00:07:44,720 --> 00:07:46,960
another option is to guess if it's fresh

179
00:07:46,960 --> 00:07:48,800
and then it will become non-advantageous

180
00:07:48,800 --> 00:07:50,240
right we

181
00:07:50,240 --> 00:07:51,840
the second option is not very important

182
00:07:51,840 --> 00:07:54,160
in the context of this talk

183
00:07:54,160 --> 00:07:56,560
we will show how to get around this

184
00:07:56,560 --> 00:07:58,400
problem using our technique of efficient

185
00:07:58,400 --> 00:07:59,360
tagging

186
00:07:59,360 --> 00:08:01,680
in more detail what we'll show is

187
00:08:01,680 --> 00:08:02,960
we will

188
00:08:02,960 --> 00:08:05,360
for any digital signature scheme ds we

189
00:08:05,360 --> 00:08:08,240
will give a which is ufcma secure we

190
00:08:08,240 --> 00:08:10,639
will give a generic transformation

191
00:08:10,639 --> 00:08:12,240
that converts it into another digital

192
00:08:12,240 --> 00:08:14,240
signature scheme rds

193
00:08:14,240 --> 00:08:17,199
for which the muf cma security has a

194
00:08:17,199 --> 00:08:19,199
memory and advantage type reduction

195
00:08:19,199 --> 00:08:21,680
using efficient tagging

196
00:08:21,680 --> 00:08:22,639
the

197
00:08:22,639 --> 00:08:24,960
signing algorithm for the scheme rds

198
00:08:24,960 --> 00:08:27,440
just samples some randomness and signs

199
00:08:27,440 --> 00:08:29,199
the message concatenated with that

200
00:08:29,199 --> 00:08:31,520
randomness and includes the randomness

201
00:08:31,520 --> 00:08:33,279
as part of the signature

202
00:08:33,279 --> 00:08:35,039
this is a generalization of the

203
00:08:35,039 --> 00:08:38,000
probabilistic full domain hash

204
00:08:38,000 --> 00:08:41,200
we show that ufcma security of ds

205
00:08:41,200 --> 00:08:44,399
implies uh m-e-f-cma security of rds in

206
00:08:44,399 --> 00:08:46,640
a memory and advantage tight way

207
00:08:46,640 --> 00:08:49,040
uh in uh concurrent and complementary

208
00:08:49,040 --> 00:08:51,600
work uh by demotetal they show that for

209
00:08:51,600 --> 00:08:54,000
certain class of digital signatures ds

210
00:08:54,000 --> 00:08:56,320
an enhanced form of strong efcma

211
00:08:56,320 --> 00:08:58,800
security implies a strong me fcma

212
00:08:58,800 --> 00:09:01,040
security of rds

213
00:09:01,040 --> 00:09:04,560
in a memory and advantage tight way

214
00:09:04,560 --> 00:09:07,839
our main idea here will be to

215
00:09:07,839 --> 00:09:10,240
use this randomness

216
00:09:10,240 --> 00:09:11,040
to

217
00:09:11,040 --> 00:09:12,720
hide in the randomness some kind of a

218
00:09:12,720 --> 00:09:15,600
tag that will later help us identify

219
00:09:15,600 --> 00:09:18,880
whether a query is fresh or not

220
00:09:18,880 --> 00:09:22,080
uh in more detail

221
00:09:22,240 --> 00:09:23,680
when the reduction receives the signing

222
00:09:23,680 --> 00:09:24,560
query

223
00:09:24,560 --> 00:09:27,360
it will choose the randomness ri in a

224
00:09:27,360 --> 00:09:29,120
way that

225
00:09:29,120 --> 00:09:30,959
it will hide the the randomness will

226
00:09:30,959 --> 00:09:32,720
hide the info whether or not the message

227
00:09:32,720 --> 00:09:33,920
is fresh

228
00:09:33,920 --> 00:09:35,920
and later when the reduction receives

229
00:09:35,920 --> 00:09:37,920
the fortunate query it will use the same

230
00:09:37,920 --> 00:09:39,279
randomness

231
00:09:39,279 --> 00:09:41,279
the hidden info in the randomness to

232
00:09:41,279 --> 00:09:42,959
determine whether or not to output the

233
00:09:42,959 --> 00:09:44,800
forgery

234
00:09:44,800 --> 00:09:47,680
the way we implement this is uh

235
00:09:47,680 --> 00:09:50,320
when the adversary queries a message mi

236
00:09:50,320 --> 00:09:51,680
to be sine

237
00:09:51,680 --> 00:09:54,160
uh the reduction computes the randomness

238
00:09:54,160 --> 00:09:55,839
by evaluating

239
00:09:55,839 --> 00:09:57,120
the

240
00:09:57,120 --> 00:09:59,360
an injective tweakable random function f

241
00:09:59,360 --> 00:10:00,240
on

242
00:10:00,240 --> 00:10:02,399
the message m i and i

243
00:10:02,399 --> 00:10:04,880
and later during a fortunate query it

244
00:10:04,880 --> 00:10:08,320
checks uh whether the inverse of

245
00:10:08,320 --> 00:10:10,079
the forged message and the for the

246
00:10:10,079 --> 00:10:12,399
randomness is in one through q where q

247
00:10:12,399 --> 00:10:15,040
is the total number of signing queries

248
00:10:15,040 --> 00:10:15,839
uh

249
00:10:15,839 --> 00:10:18,720
to see why this works suppose the

250
00:10:18,720 --> 00:10:21,519
adversary forged on a message m star

251
00:10:21,519 --> 00:10:24,079
with signature sigma star r star suppose

252
00:10:24,079 --> 00:10:26,959
if indeed this was a valid forget if

253
00:10:26,959 --> 00:10:28,480
sigma star r star is indeed a valid

254
00:10:28,480 --> 00:10:31,360
signature for m star

255
00:10:31,360 --> 00:10:32,560
then uh

256
00:10:32,560 --> 00:10:35,839
if the m star r star had been queried by

257
00:10:35,839 --> 00:10:38,160
the reduction to its own signing oracle

258
00:10:38,160 --> 00:10:40,399
it's easy to check that the inverse i

259
00:10:40,399 --> 00:10:43,279
will indeed lie in one through q

260
00:10:43,279 --> 00:10:44,640
ah and

261
00:10:44,640 --> 00:10:46,480
hence the reduction will not output the

262
00:10:46,480 --> 00:10:49,200
output the forgery like we want it to

263
00:10:49,200 --> 00:10:52,000
uh again if m star r star had not been

264
00:10:52,000 --> 00:10:53,680
queried by the reduction to its own

265
00:10:53,680 --> 00:10:55,920
signing oracle one can show that with

266
00:10:55,920 --> 00:10:57,920
high probability this inverse will not

267
00:10:57,920 --> 00:11:00,640
lie in one through q and therefore the

268
00:11:00,640 --> 00:11:02,560
reduction will output the forgery again

269
00:11:02,560 --> 00:11:05,439
like we wanted to

270
00:11:05,920 --> 00:11:08,640
so here the additional memory required

271
00:11:08,640 --> 00:11:10,959
by the reduction is the memory required

272
00:11:10,959 --> 00:11:14,079
to sim to implement this function f

273
00:11:14,079 --> 00:11:16,800
which is actually a large random object

274
00:11:16,800 --> 00:11:18,480
here we use this standard trick of

275
00:11:18,480 --> 00:11:20,320
replacing a large random object with the

276
00:11:20,320 --> 00:11:21,839
pseudorandom one

277
00:11:21,839 --> 00:11:22,880
and then

278
00:11:22,880 --> 00:11:24,320
pseudorandom

279
00:11:24,320 --> 00:11:26,160
object can be implemented using little

280
00:11:26,160 --> 00:11:28,800
memory for instance the example we had

281
00:11:28,800 --> 00:11:30,240
in the previous slide which would

282
00:11:30,240 --> 00:11:33,200
require a tweakable injective prf it can

283
00:11:33,200 --> 00:11:36,800
be instantiated using a block cipher

284
00:11:36,800 --> 00:11:37,600
so

285
00:11:37,600 --> 00:11:40,240
we saw a technique where this recovery

286
00:11:40,240 --> 00:11:42,399
was efficient which namely it just

287
00:11:42,399 --> 00:11:45,680
required inverting this function f

288
00:11:45,680 --> 00:11:47,440
now we'll see a technique where this

289
00:11:47,440 --> 00:11:49,600
recovery is not efficient and leads to

290
00:11:49,600 --> 00:11:52,480
increased running time for the reduction

291
00:11:52,480 --> 00:11:55,360
but this let me first recall the common

292
00:11:55,360 --> 00:11:56,800
left or right

293
00:11:56,800 --> 00:11:58,959
formulation of cca security for public

294
00:11:58,959 --> 00:12:00,480
key encryption

295
00:12:00,480 --> 00:12:02,720
here the an adversary has to distinguish

296
00:12:02,720 --> 00:12:05,279
between a left world and a right world

297
00:12:05,279 --> 00:12:08,160
it chooses two messages m0 and m1

298
00:12:08,160 --> 00:12:10,240
and receives an encryption of m0 in the

299
00:12:10,240 --> 00:12:12,079
left world and an encryption of m one in

300
00:12:12,079 --> 00:12:13,120
the right

301
00:12:13,120 --> 00:12:14,959
in both the worlds it has access to a

302
00:12:14,959 --> 00:12:17,120
decryption oracle which returns the

303
00:12:17,120 --> 00:12:20,240
bottom symbol if queried uh on the

304
00:12:20,240 --> 00:12:21,680
ciphertext that

305
00:12:21,680 --> 00:12:25,839
was returned by the encryption oracle

306
00:12:26,399 --> 00:12:28,480
of course now we can define a multi

307
00:12:28,480 --> 00:12:30,880
version of this definition where

308
00:12:30,880 --> 00:12:33,120
the adversary can make few encryption

309
00:12:33,120 --> 00:12:35,360
queries instead of one

310
00:12:35,360 --> 00:12:37,680
a very very simple crypto 101 result

311
00:12:37,680 --> 00:12:40,320
shows that one cca implies

312
00:12:40,320 --> 00:12:43,120
multi cca using a hybrid argument

313
00:12:43,120 --> 00:12:45,440
however this reduction is also all is

314
00:12:45,440 --> 00:12:47,040
not memory detected

315
00:12:47,040 --> 00:12:49,040
and it can be a little subtle and easy

316
00:12:49,040 --> 00:12:50,480
to miss

317
00:12:50,480 --> 00:12:53,279
let's see the reason why uh so this

318
00:12:53,279 --> 00:12:55,600
reduction first uh gets an input the

319
00:12:55,600 --> 00:12:58,079
public key which it forwards uh now it

320
00:12:58,079 --> 00:13:01,519
chooses uh some uh k uniformly at random

321
00:13:01,519 --> 00:13:02,959
in one to queue

322
00:13:02,959 --> 00:13:06,240
uh and uh on the ith encryption query it

323
00:13:06,240 --> 00:13:08,399
answers with uh the encryption of the

324
00:13:08,399 --> 00:13:11,040
write message if i less than a k

325
00:13:11,040 --> 00:13:12,480
with the encryption of the left message

326
00:13:12,480 --> 00:13:14,480
if i is greater than k and otherwise use

327
00:13:14,480 --> 00:13:16,240
its own encryption oracle to answer the

328
00:13:16,240 --> 00:13:18,000
query

329
00:13:18,000 --> 00:13:20,000
now when it receives a decryption query

330
00:13:20,000 --> 00:13:22,240
on a ciphertext c it can of course use

331
00:13:22,240 --> 00:13:24,480
its own decryption oracle however

332
00:13:24,480 --> 00:13:27,120
if c is same as one of the ciphertext

333
00:13:27,120 --> 00:13:28,720
returned by the encryption

334
00:13:28,720 --> 00:13:30,160
queries

335
00:13:30,160 --> 00:13:31,920
then the reduction needs to return the

336
00:13:31,920 --> 00:13:34,399
bottom symbol and to do this the naive

337
00:13:34,399 --> 00:13:36,720
way we generally give the reduction is

338
00:13:36,720 --> 00:13:39,279
we make it remember all the prior

339
00:13:39,279 --> 00:13:41,839
ci stars and this makes it non-memory

340
00:13:41,839 --> 00:13:43,360
right

341
00:13:43,360 --> 00:13:46,399
we will use inefficient tagging to

342
00:13:46,399 --> 00:13:48,720
solve this issue

343
00:13:48,720 --> 00:13:52,480
uh our key idea here is uh instead of

344
00:13:52,480 --> 00:13:55,040
sampling the random coins during

345
00:13:55,040 --> 00:13:56,240
encryption

346
00:13:56,240 --> 00:13:58,079
we will use randomness which is actually

347
00:13:58,079 --> 00:14:00,160
completely determined by the message and

348
00:14:00,160 --> 00:14:04,320
some counter i later when a decryption

349
00:14:04,320 --> 00:14:06,079
query is made on ciphertext the

350
00:14:06,079 --> 00:14:07,279
reduction will first use its own

351
00:14:07,279 --> 00:14:09,680
decryption oracle to get the decrypted

352
00:14:09,680 --> 00:14:11,920
message m and then to figure out whether

353
00:14:11,920 --> 00:14:13,519
this ciphertext c is a challenge

354
00:14:13,519 --> 00:14:14,800
ciphertext

355
00:14:14,800 --> 00:14:17,440
it will re-encrypt the message using the

356
00:14:17,440 --> 00:14:19,199
randomness corresponding to the message

357
00:14:19,199 --> 00:14:20,480
and

358
00:14:20,480 --> 00:14:22,320
every counter

359
00:14:22,320 --> 00:14:23,760
in more detail

360
00:14:23,760 --> 00:14:24,800
the

361
00:14:24,800 --> 00:14:26,720
randomness during encryption would be

362
00:14:26,720 --> 00:14:29,199
computed as the evaluation of a random

363
00:14:29,199 --> 00:14:31,920
function on the message on a counter i

364
00:14:31,920 --> 00:14:33,600
later when the reduction receives a

365
00:14:33,600 --> 00:14:35,519
decryption query on c it will use its

366
00:14:35,519 --> 00:14:36,959
own decryption oracle to get the

367
00:14:36,959 --> 00:14:38,639
decrypted message m

368
00:14:38,639 --> 00:14:40,480
then it would re-encrypt m with

369
00:14:40,480 --> 00:14:43,440
randomness fmi for every

370
00:14:43,440 --> 00:14:44,399
i

371
00:14:44,399 --> 00:14:46,560
and then check whether if any of these

372
00:14:46,560 --> 00:14:49,279
encryptions are same as c if so it will

373
00:14:49,279 --> 00:14:50,959
return the bottom symbol otherwise it

374
00:14:50,959 --> 00:14:53,199
will return the message

375
00:14:53,199 --> 00:14:54,959
m

376
00:14:54,959 --> 00:14:56,720
why does this work

377
00:14:56,720 --> 00:15:00,079
if this cipher text c was same as

378
00:15:00,079 --> 00:15:02,880
uh some ci star of course one of the

379
00:15:02,880 --> 00:15:05,600
re-encryptions will be same as c and

380
00:15:05,600 --> 00:15:07,199
therefore it will correctly return the

381
00:15:07,199 --> 00:15:08,480
bottom symbol

382
00:15:08,480 --> 00:15:10,399
and one can show that with high

383
00:15:10,399 --> 00:15:11,519
probability

384
00:15:11,519 --> 00:15:12,480
if

385
00:15:12,480 --> 00:15:15,440
if c is not one of those ci stars these

386
00:15:15,440 --> 00:15:16,880
none of the re-encryptions will be same

387
00:15:16,880 --> 00:15:17,839
as c

388
00:15:17,839 --> 00:15:19,120
uh and therefore it will return the

389
00:15:19,120 --> 00:15:22,399
message uh like we want

390
00:15:22,399 --> 00:15:23,680
okay so

391
00:15:23,680 --> 00:15:25,839
here we have a reduction but it's not

392
00:15:25,839 --> 00:15:27,519
time tied because it has to iterate

393
00:15:27,519 --> 00:15:29,519
through all of the counters

394
00:15:29,519 --> 00:15:32,160
so we must ask ourselves are non-time

395
00:15:32,160 --> 00:15:34,560
tight reductions completely useless

396
00:15:34,560 --> 00:15:36,160
well no

397
00:15:36,160 --> 00:15:38,480
sometimes it ma it might be better to

398
00:15:38,480 --> 00:15:40,079
have memory tightness over time

399
00:15:40,079 --> 00:15:42,079
tightness because for many of the hard

400
00:15:42,079 --> 00:15:44,320
problems that we use in cryptography the

401
00:15:44,320 --> 00:15:46,639
fastest memoryless algorithm is much

402
00:15:46,639 --> 00:15:48,160
slower than the fastest algorithm in

403
00:15:48,160 --> 00:15:49,519
general

404
00:15:49,519 --> 00:15:51,360
but for this case suppose we really

405
00:15:51,360 --> 00:15:53,120
really want to have a memory type

406
00:15:53,120 --> 00:15:55,519
reduction that is also time tight can we

407
00:15:55,519 --> 00:15:56,800
do anything

408
00:15:56,800 --> 00:15:58,720
turns out that if we change the

409
00:15:58,720 --> 00:16:00,240
definition

410
00:16:00,240 --> 00:16:02,560
we can actually get a memory tight and

411
00:16:02,560 --> 00:16:04,320
time time reduction

412
00:16:04,320 --> 00:16:06,959
so let me introduce to you the

413
00:16:06,959 --> 00:16:10,240
uh so okay so we will use our technique

414
00:16:10,240 --> 00:16:12,720
of message encoding uh for for this

415
00:16:12,720 --> 00:16:13,759
result

416
00:16:13,759 --> 00:16:14,720
uh

417
00:16:14,720 --> 00:16:17,440
we will i'll first introduce this uh

418
00:16:17,440 --> 00:16:20,240
definition of real or random ccs

419
00:16:20,240 --> 00:16:21,519
security

420
00:16:21,519 --> 00:16:22,480
here

421
00:16:22,480 --> 00:16:25,040
an adversary has to distinguish between

422
00:16:25,040 --> 00:16:27,440
a real world and an ideal world

423
00:16:27,440 --> 00:16:29,600
it chooses a message and in the real

424
00:16:29,600 --> 00:16:32,399
world gets it gets its real encryption

425
00:16:32,399 --> 00:16:34,399
while in the ideal world it gets a

426
00:16:34,399 --> 00:16:37,759
random ciphertext in response

427
00:16:37,759 --> 00:16:39,199
in both the words it has access to a

428
00:16:39,199 --> 00:16:42,160
decryption oracle which returns the

429
00:16:42,160 --> 00:16:45,040
message if queried on the ciphertext

430
00:16:45,040 --> 00:16:46,160
that was returned by the encryption

431
00:16:46,160 --> 00:16:47,600
order

432
00:16:47,600 --> 00:16:49,440
of course we can again define a multi

433
00:16:49,440 --> 00:16:51,920
version of this definition where

434
00:16:51,920 --> 00:16:54,240
the adversary makes q encryption queries

435
00:16:54,240 --> 00:16:56,800
instead of one

436
00:16:57,519 --> 00:16:59,279
again we can show using a hybrid

437
00:16:59,279 --> 00:17:01,040
argument that the single version implies

438
00:17:01,040 --> 00:17:02,880
the multiversion and again this is not

439
00:17:02,880 --> 00:17:04,640
memory tight but the reason is a little

440
00:17:04,640 --> 00:17:05,919
bit different

441
00:17:05,919 --> 00:17:08,880
uh so here again the reduction forwards

442
00:17:08,880 --> 00:17:11,439
the public key chooses okay uniformly at

443
00:17:11,439 --> 00:17:13,439
random in one through q uh for the ith

444
00:17:13,439 --> 00:17:15,199
encryption query answers with a random

445
00:17:15,199 --> 00:17:17,280
cipher text if i less than k

446
00:17:17,280 --> 00:17:19,359
answers with the real cipher text if i

447
00:17:19,359 --> 00:17:21,359
is greater than k and otherwise uses its

448
00:17:21,359 --> 00:17:23,520
own encryption oracle

449
00:17:23,520 --> 00:17:26,400
now when it receives a decryption query

450
00:17:26,400 --> 00:17:28,799
keep in mind that this if the ciphertext

451
00:17:28,799 --> 00:17:30,240
is same as one of the challenge

452
00:17:30,240 --> 00:17:32,400
ciphertext ci stars it needs to return

453
00:17:32,400 --> 00:17:33,360
mi

454
00:17:33,360 --> 00:17:35,200
so it will use its own decryption order

455
00:17:35,200 --> 00:17:36,320
however

456
00:17:36,320 --> 00:17:39,919
if c is same as ci star for i less than

457
00:17:39,919 --> 00:17:42,320
k then the ci star was chosen uniformly

458
00:17:42,320 --> 00:17:44,320
at random and there's very little chance

459
00:17:44,320 --> 00:17:46,320
that it would indeed be the encryption

460
00:17:46,320 --> 00:17:48,000
of mi so

461
00:17:48,000 --> 00:17:48,799
uh

462
00:17:48,799 --> 00:17:52,160
the naive way to fix this is to make the

463
00:17:52,160 --> 00:17:54,799
reduction remember all the mi and ci

464
00:17:54,799 --> 00:17:56,960
star for i less than k

465
00:17:56,960 --> 00:17:58,240
and of course this makes the reduction

466
00:17:58,240 --> 00:18:01,280
non-memory type so we will use message

467
00:18:01,280 --> 00:18:03,760
encoding to fix this issue

468
00:18:03,760 --> 00:18:06,559
our main idea here is instead of

469
00:18:06,559 --> 00:18:09,039
sampling these ci stars uniformly at

470
00:18:09,039 --> 00:18:11,039
random for i less than k

471
00:18:11,039 --> 00:18:13,679
we will encode the message mi into ci

472
00:18:13,679 --> 00:18:14,559
star

473
00:18:14,559 --> 00:18:16,640
and later when a decryption query is

474
00:18:16,640 --> 00:18:17,600
made

475
00:18:17,600 --> 00:18:20,000
we'll first decode the cipher text and

476
00:18:20,000 --> 00:18:22,240
check if the decoded answer is of the

477
00:18:22,240 --> 00:18:24,720
right format if so will return the

478
00:18:24,720 --> 00:18:27,039
decoded message otherwise use the

479
00:18:27,039 --> 00:18:29,840
decryption order

480
00:18:29,919 --> 00:18:30,960
so

481
00:18:30,960 --> 00:18:33,600
we see an example here where depending

482
00:18:33,600 --> 00:18:35,440
on the definition we use we we have a

483
00:18:35,440 --> 00:18:37,200
memory type reduction that is time tight

484
00:18:37,200 --> 00:18:38,240
or

485
00:18:38,240 --> 00:18:40,480
for another definition we have

486
00:18:40,480 --> 00:18:42,160
where it is memory tight but not time

487
00:18:42,160 --> 00:18:43,280
time

488
00:18:43,280 --> 00:18:45,520
so a very important lesson is the

489
00:18:45,520 --> 00:18:47,120
quality of the memory type reduction

490
00:18:47,120 --> 00:18:48,880
that we can give

491
00:18:48,880 --> 00:18:53,520
relies a lot on our definitional choices

492
00:18:53,520 --> 00:18:56,400
uh in addition to this in in the paper

493
00:18:56,400 --> 00:19:00,320
we also show a memory tight uh

494
00:19:00,320 --> 00:19:02,720
mimic authenticated encryption security

495
00:19:02,720 --> 00:19:05,120
for the encrypt and prf construction uh

496
00:19:05,120 --> 00:19:07,120
that bypasses a generic impossibility

497
00:19:07,120 --> 00:19:10,400
result from an earlier work

498
00:19:10,400 --> 00:19:13,200
we also generalized the memory type

499
00:19:13,200 --> 00:19:16,320
reduction result for rds that i showed

500
00:19:16,320 --> 00:19:19,919
to capture a setting that captures

501
00:19:19,919 --> 00:19:23,039
signatures used in tls 1.3

502
00:19:23,039 --> 00:19:23,919
uh

503
00:19:23,919 --> 00:19:25,840
further we give a time memory and

504
00:19:25,840 --> 00:19:29,039
advantage type reduction for mufcma

505
00:19:29,039 --> 00:19:33,520
security of rsa pfdh to rsa

506
00:19:33,520 --> 00:19:35,840
uh to conclude i would again like to

507
00:19:35,840 --> 00:19:38,240
reiterate the message that our ability

508
00:19:38,240 --> 00:19:40,400
to give memory type reduction strongly

509
00:19:40,400 --> 00:19:42,000
couples with the definitional choices we

510
00:19:42,000 --> 00:19:43,039
make

511
00:19:43,039 --> 00:19:45,760
uh also we should always we should take

512
00:19:45,760 --> 00:19:47,840
impossibility results in context of

513
00:19:47,840 --> 00:19:49,440
memory tightness with a pinch of salt

514
00:19:49,440 --> 00:19:51,840
because as we saw we can often bypass

515
00:19:51,840 --> 00:19:54,080
them

516
00:19:54,160 --> 00:19:57,039
the important open problems in this area

517
00:19:57,039 --> 00:19:58,799
one of them is to come up with more

518
00:19:58,799 --> 00:20:00,880
techniques beyond the handful ones we

519
00:20:00,880 --> 00:20:01,840
know

520
00:20:01,840 --> 00:20:02,960
and

521
00:20:02,960 --> 00:20:04,559
also we need to understand which

522
00:20:04,559 --> 00:20:07,039
definitions are the right ones in these

523
00:20:07,039 --> 00:20:08,799
memory restricted settings

524
00:20:08,799 --> 00:20:11,200
thank you

525
00:20:14,720 --> 00:20:18,520
so are there questions

526
00:20:27,120 --> 00:20:29,760
okay so one question is um have you made

527
00:20:29,760 --> 00:20:32,000
any progress on this last open question

528
00:20:32,000 --> 00:20:34,320
that you say like um understanding what

529
00:20:34,320 --> 00:20:37,919
are the right definitional choices for

530
00:20:37,919 --> 00:20:40,320
um memory type reductions

531
00:20:40,320 --> 00:20:41,200
uh

532
00:20:41,200 --> 00:20:44,880
no uh we we have yeah like uh

533
00:20:44,880 --> 00:20:47,200
we have a lot of even more examples of

534
00:20:47,200 --> 00:20:48,960
where like first if you tweak the

535
00:20:48,960 --> 00:20:51,039
definition in a way that there are you

536
00:20:51,039 --> 00:20:52,480
can you cannot give any memory tie

537
00:20:52,480 --> 00:20:54,960
reduction at all but we have not been

538
00:20:54,960 --> 00:20:56,799
able to like prove that it's impossible

539
00:20:56,799 --> 00:20:58,799
for those cases so

540
00:20:58,799 --> 00:21:00,880
one starting point could be to like show

541
00:21:00,880 --> 00:21:01,679
that

542
00:21:01,679 --> 00:21:04,000
like separation so we have not shown any

543
00:21:04,000 --> 00:21:06,159
formal separations we have located

544
00:21:06,159 --> 00:21:07,679
examples where for one definition you

545
00:21:07,679 --> 00:21:08,960
can have memory tightness and for

546
00:21:08,960 --> 00:21:12,799
another it's it's it appears hard

547
00:21:13,120 --> 00:21:15,200
because this seems very artificial right

548
00:21:15,200 --> 00:21:17,280
yes yes that's why it's important to

549
00:21:17,280 --> 00:21:20,400
figure out which definitions to use

550
00:21:20,400 --> 00:21:21,360
okay

551
00:21:21,360 --> 00:21:22,960
so if there are no questions we will

552
00:21:22,960 --> 00:21:26,919
move to the next speaker

