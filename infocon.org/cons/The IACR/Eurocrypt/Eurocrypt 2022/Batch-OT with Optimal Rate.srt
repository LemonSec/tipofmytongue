1
00:00:56,800 --> 00:00:59,920
so uh welcome everybody again uh the

2
00:00:59,920 --> 00:01:02,719
second uh talk of this session is battle

3
00:01:02,719 --> 00:01:05,199
t with optimal right by sveka brakerski

4
00:01:05,199 --> 00:01:08,720
pedro branco nico duckling and uh

5
00:01:08,720 --> 00:01:12,920
and see heinz gonna give a talk

6
00:01:18,320 --> 00:01:21,119
your mic is off

7
00:01:21,119 --> 00:01:23,920
your mic is off

8
00:01:23,920 --> 00:01:26,920
right

9
00:01:30,000 --> 00:01:33,000
now

10
00:01:41,439 --> 00:01:42,240
okay

11
00:01:42,240 --> 00:01:44,240
all right uh

12
00:01:44,240 --> 00:01:46,960
okay okay

13
00:01:49,680 --> 00:01:52,159
um sorry for that um

14
00:01:52,159 --> 00:01:54,640
thanks for introduction again uh mchang

15
00:01:54,640 --> 00:01:56,479
i will talk about uh batch ot with

16
00:01:56,479 --> 00:01:59,119
optimal rate it's a joint who work with

17
00:01:59,119 --> 00:02:01,360
uh suica brexit pedro branco and

18
00:02:01,360 --> 00:02:04,159
nicodellin

19
00:02:04,240 --> 00:02:06,079
so let me first uh recall the

20
00:02:06,079 --> 00:02:08,878
functionality of obvious transfer there

21
00:02:08,878 --> 00:02:12,160
are two parties a sender and a receiver

22
00:02:12,160 --> 00:02:15,760
so a sender inputs two bits m0 and m1

23
00:02:15,760 --> 00:02:18,000
where the receiver inputs a single

24
00:02:18,000 --> 00:02:20,319
choice bit and the functionality rather

25
00:02:20,319 --> 00:02:22,879
outputs the chosen bit mb to the

26
00:02:22,879 --> 00:02:24,160
receiver

27
00:02:24,160 --> 00:02:27,360
so for security we requires that

28
00:02:27,360 --> 00:02:29,200
the sender doesn't want the receiver to

29
00:02:29,200 --> 00:02:30,080
learn

30
00:02:30,080 --> 00:02:32,400
the other unshortened message and one

31
00:02:32,400 --> 00:02:33,680
minus b

32
00:02:33,680 --> 00:02:35,680
similarly the receiver doesn't want a

33
00:02:35,680 --> 00:02:38,000
singer to learn which message is chosen

34
00:02:38,000 --> 00:02:40,480
by him

35
00:02:40,560 --> 00:02:42,640
so there's a there's an amortized

36
00:02:42,640 --> 00:02:45,760
variant of ot called a batch ot

37
00:02:45,760 --> 00:02:49,120
basically it's a an independent bit ot

38
00:02:49,120 --> 00:02:52,239
where cinder inputs uh unpaired bits and

39
00:02:52,239 --> 00:02:54,239
receiver inputs

40
00:02:54,239 --> 00:02:56,640
and choice bits to retrieve

41
00:02:56,640 --> 00:03:00,080
and b1 to mbn

42
00:03:00,080 --> 00:03:01,519
so in this work

43
00:03:01,519 --> 00:03:04,959
we focus on the two rung ot protocol

44
00:03:04,959 --> 00:03:07,440
which means each party in the protocol

45
00:03:07,440 --> 00:03:09,760
only sends a single message where the

46
00:03:09,760 --> 00:03:11,920
receiver sends the first message

47
00:03:11,920 --> 00:03:14,959
encoding his choice bits and the sender

48
00:03:14,959 --> 00:03:17,440
responds with a second message including

49
00:03:17,440 --> 00:03:20,159
the children bits

50
00:03:20,159 --> 00:03:23,280
the two notions we are interested we are

51
00:03:23,280 --> 00:03:26,080
interested in this work is our upload

52
00:03:26,080 --> 00:03:28,640
rate and download rate absorber rating

53
00:03:28,640 --> 00:03:32,000
means is a ratio between the

54
00:03:32,000 --> 00:03:34,959
trust bits and the first message

55
00:03:34,959 --> 00:03:38,239
download rate is a ratio between the

56
00:03:38,239 --> 00:03:42,400
children base and the second message

57
00:03:42,720 --> 00:03:45,760
so it's natural to ask can we build a

58
00:03:45,760 --> 00:03:48,799
batch ot protocol with optimal rate

59
00:03:48,799 --> 00:03:50,959
here optimal rate means

60
00:03:50,959 --> 00:03:53,200
both upload rate and download rate are

61
00:03:53,200 --> 00:03:55,120
close to one

62
00:03:55,120 --> 00:03:57,280
in other words the total communication

63
00:03:57,280 --> 00:04:00,319
complexity tends to be a two times n

64
00:04:00,319 --> 00:04:02,560
where n is a number of bases you

65
00:04:02,560 --> 00:04:04,720
transfer

66
00:04:04,720 --> 00:04:07,360
so it's sweet it's a it's uh the

67
00:04:07,360 --> 00:04:09,840
straightforward solution is to use um

68
00:04:09,840 --> 00:04:12,480
with one fhe

69
00:04:12,480 --> 00:04:15,680
uh return fg uh makes uh

70
00:04:15,680 --> 00:04:18,478
uh it says uh for a bit stopper test

71
00:04:18,478 --> 00:04:22,160
your uh it also can contains or convey a

72
00:04:22,160 --> 00:04:24,160
roughly embedded message

73
00:04:24,160 --> 00:04:26,800
but there are a few drawbacks uh the

74
00:04:26,800 --> 00:04:29,600
first is it requires lattice assumption

75
00:04:29,600 --> 00:04:31,280
second it's

76
00:04:31,280 --> 00:04:33,600
it's not computationally efficient due

77
00:04:33,600 --> 00:04:37,440
to the strapping mechanism used

78
00:04:37,440 --> 00:04:40,479
so we tend to ask can we build a rate 1

79
00:04:40,479 --> 00:04:43,360
batch ot with assumptions not implying

80
00:04:43,360 --> 00:04:47,919
fhe or without lattice or assumptions

81
00:04:47,919 --> 00:04:51,360
so the answer leads to our main result

82
00:04:51,360 --> 00:04:54,320
we are able to build a batch ot protocol

83
00:04:54,320 --> 00:04:57,680
with overweight 1 which secure against a

84
00:04:57,680 --> 00:05:00,320
semi-honest adversaries and we need a

85
00:05:00,320 --> 00:05:03,199
ddh assumption to argue similar security

86
00:05:03,199 --> 00:05:05,919
and we need a ddh plus lpa assumptions

87
00:05:05,919 --> 00:05:08,639
to argue receiver security

88
00:05:08,639 --> 00:05:11,280
as an additional result we show how to

89
00:05:11,280 --> 00:05:14,479
emulate a small subgroup in the p which

90
00:05:14,479 --> 00:05:16,720
gives us the first

91
00:05:16,720 --> 00:05:19,120
statistically function private linear

92
00:05:19,120 --> 00:05:21,759
homomorphic encryption under ddh with

93
00:05:21,759 --> 00:05:24,160
rate one summer test

94
00:05:24,160 --> 00:05:28,080
here's a road map of this talk uh i will

95
00:05:28,080 --> 00:05:30,240
first show you how to build a standard

96
00:05:30,240 --> 00:05:33,120
ot from el cama encryption schemes

97
00:05:33,120 --> 00:05:35,600
then i show how to achieve download one

98
00:05:35,600 --> 00:05:36,560
via

99
00:05:36,560 --> 00:05:38,880
standard test compression next i will

100
00:05:38,880 --> 00:05:40,000
show how to

101
00:05:40,000 --> 00:05:42,880
achieve operator 1 via the encryption

102
00:05:42,880 --> 00:05:44,639
technique

103
00:05:44,639 --> 00:05:47,759
at the end i will briefly describe how

104
00:05:47,759 --> 00:05:48,800
to

105
00:05:48,800 --> 00:05:51,680
tackle two small issues appearing in the

106
00:05:51,680 --> 00:05:53,680
last step

107
00:05:53,680 --> 00:05:55,759
okay as a warm-up

108
00:05:55,759 --> 00:05:58,000
let's see how we can build a standard

109
00:05:58,000 --> 00:06:00,160
bit ot from

110
00:06:00,160 --> 00:06:02,560
from ergoma scheme

111
00:06:02,560 --> 00:06:05,120
the receiver generates a public key

112
00:06:05,120 --> 00:06:08,560
namely generator generator g and group

113
00:06:08,560 --> 00:06:10,800
element g to the y where y is also the

114
00:06:10,800 --> 00:06:12,560
secret key

115
00:06:12,560 --> 00:06:14,880
to generate the server test

116
00:06:14,880 --> 00:06:17,520
the receiver encodes has transparent b

117
00:06:17,520 --> 00:06:19,199
as g to the b

118
00:06:19,199 --> 00:06:21,600
notice uh this encoding can be decoded

119
00:06:21,600 --> 00:06:24,160
efficiently due to the small small

120
00:06:24,160 --> 00:06:25,360
message space

121
00:06:25,360 --> 00:06:28,080
the receiver sends a public key and a

122
00:06:28,080 --> 00:06:30,080
server test to the sender

123
00:06:30,080 --> 00:06:32,479
the sender will morphically compute the

124
00:06:32,479 --> 00:06:35,440
ot function on this server test this ot

125
00:06:35,440 --> 00:06:37,680
function is linear

126
00:06:37,680 --> 00:06:40,479
you can see if x equals to zero

127
00:06:40,479 --> 00:06:43,120
the output would be m zero at x equals

128
00:06:43,120 --> 00:06:45,520
to one the output would be m one

129
00:06:45,520 --> 00:06:46,840
so after the

130
00:06:46,840 --> 00:06:49,759
evaluation the sample test will increase

131
00:06:49,759 --> 00:06:52,080
the g choose mp

132
00:06:52,080 --> 00:06:53,919
and of course with a refreshed

133
00:06:53,919 --> 00:06:56,479
randomness and then uh the sender sends

134
00:06:56,479 --> 00:06:58,560
back the suffer test to the receiver

135
00:06:58,560 --> 00:07:01,199
receiver can decrypt it can

136
00:07:01,199 --> 00:07:03,680
can decrypt it by his secret key to

137
00:07:03,680 --> 00:07:06,240
learn the children bit

138
00:07:06,240 --> 00:07:08,560
um considering the communication banner

139
00:07:08,560 --> 00:07:11,599
wise the download rate is a one over two

140
00:07:11,599 --> 00:07:14,000
times a group size as there are two

141
00:07:14,000 --> 00:07:16,800
group elements in the second message

142
00:07:16,800 --> 00:07:19,759
and upload rate similarly is one over

143
00:07:19,759 --> 00:07:22,000
four times group size there are four

144
00:07:22,000 --> 00:07:24,240
couple elements group elements in the

145
00:07:24,240 --> 00:07:26,080
first message

146
00:07:26,080 --> 00:07:29,360
so this basic protocol is not satisfying

147
00:07:29,360 --> 00:07:31,680
as it has poorer rates

148
00:07:31,680 --> 00:07:33,360
so how can we

149
00:07:33,360 --> 00:07:35,440
improve on that

150
00:07:35,440 --> 00:07:38,400
we use a sub test compression technique

151
00:07:38,400 --> 00:07:39,280
to

152
00:07:39,280 --> 00:07:42,960
to achieve a downward rate of one

153
00:07:43,039 --> 00:07:46,560
and that is uh to encrypt l bits uh our

154
00:07:46,560 --> 00:07:49,199
public key is gonna be l plus one group

155
00:07:49,199 --> 00:07:50,560
elements

156
00:07:50,560 --> 00:07:53,360
and uh the uncompressed server test also

157
00:07:53,360 --> 00:07:56,720
contains air plus one group elements and

158
00:07:56,720 --> 00:07:59,520
they share the same randomness

159
00:07:59,520 --> 00:08:00,960
after compression

160
00:08:00,960 --> 00:08:03,919
uh the subtest is composed of a header

161
00:08:03,919 --> 00:08:06,720
and l pillow bits the header contains

162
00:08:06,720 --> 00:08:09,599
scissor and key uh the header uh the

163
00:08:09,599 --> 00:08:11,680
size of the header only depends on the

164
00:08:11,680 --> 00:08:14,160
security parameter so in this way we can

165
00:08:14,160 --> 00:08:16,800
compress the support test into l bits

166
00:08:16,800 --> 00:08:18,960
plus some constant this

167
00:08:18,960 --> 00:08:23,440
is a symmetric written one server test

168
00:08:23,440 --> 00:08:25,759
so with this technique we can amortize

169
00:08:25,759 --> 00:08:28,160
the sender's message as follows

170
00:08:28,160 --> 00:08:31,840
the receiver encodes uh his trust bit

171
00:08:31,840 --> 00:08:34,880
for each shot speed encoded as a vector

172
00:08:34,880 --> 00:08:36,240
so he has a

173
00:08:36,240 --> 00:08:39,120
l choice bits so there are going to be l

174
00:08:39,120 --> 00:08:41,679
server test of vectors

175
00:08:41,679 --> 00:08:44,080
and the receiver sends the public key

176
00:08:44,080 --> 00:08:44,720
and

177
00:08:44,720 --> 00:08:48,800
l server tests to the sender the sender

178
00:08:48,800 --> 00:08:50,959
also homomorphically computes the ot

179
00:08:50,959 --> 00:08:53,440
function on each server test

180
00:08:53,440 --> 00:08:56,000
note for each server test he runs a sim

181
00:08:56,000 --> 00:08:57,600
function on each coordinate of the

182
00:08:57,600 --> 00:09:01,200
vector so after evaluation

183
00:09:01,200 --> 00:09:04,959
the server test will encrypt the

184
00:09:04,959 --> 00:09:08,480
the chosen bit at its specific position

185
00:09:08,480 --> 00:09:10,720
after summing up and the scenario can

186
00:09:10,720 --> 00:09:13,120
compress it to

187
00:09:13,120 --> 00:09:16,000
a small or a short server test using the

188
00:09:16,000 --> 00:09:19,120
sample test compression technique

189
00:09:19,120 --> 00:09:21,519
after receiving that

190
00:09:21,519 --> 00:09:23,680
the receiver can decrease it to

191
00:09:23,680 --> 00:09:27,279
get the to learn the chosen bits

192
00:09:27,279 --> 00:09:29,839
so in this way uh the download rate is

193
00:09:29,839 --> 00:09:32,800
because becomes a l over l plus some

194
00:09:32,800 --> 00:09:35,760
constant as long as we transfer

195
00:09:35,760 --> 00:09:37,040
as long as the number of bits to

196
00:09:37,040 --> 00:09:39,920
transfer is large enough so this rate is

197
00:09:39,920 --> 00:09:42,000
close to one

198
00:09:42,000 --> 00:09:44,560
however in the other side the absolute

199
00:09:44,560 --> 00:09:47,120
rate is even worse because um we use

200
00:09:47,120 --> 00:09:48,320
airsquare

201
00:09:48,320 --> 00:09:50,240
group elements to encode just uh

202
00:09:50,240 --> 00:09:52,800
airplays

203
00:09:53,760 --> 00:09:56,880
so how to improve on the upload rate

204
00:09:56,880 --> 00:09:58,480
uh our approach is to use ring

205
00:09:58,480 --> 00:10:00,640
encryption technique uh what we need

206
00:10:00,640 --> 00:10:03,600
actually is a red one encryption scheme

207
00:10:03,600 --> 00:10:06,720
with linear decryption

208
00:10:06,720 --> 00:10:08,000
so

209
00:10:08,000 --> 00:10:09,600
lpn

210
00:10:09,600 --> 00:10:11,920
almost fulfills these requirements

211
00:10:11,920 --> 00:10:15,200
uh recall option means for any uniformly

212
00:10:15,200 --> 00:10:19,600
random matrix and a random vector and a

213
00:10:19,600 --> 00:10:22,160
error vector with small hamming weight

214
00:10:22,160 --> 00:10:25,200
elp n holds f a s plus e

215
00:10:25,200 --> 00:10:27,279
is computationally indistinguishable

216
00:10:27,279 --> 00:10:31,439
from a uniformly random vector

217
00:10:31,760 --> 00:10:34,320
and uh symmetric encryption also simply

218
00:10:34,320 --> 00:10:37,440
works as follows given a secret key s we

219
00:10:37,440 --> 00:10:41,120
can encrypt a binary vector m as a

220
00:10:41,120 --> 00:10:44,079
compute a s plus e n plus m to decrypt

221
00:10:44,079 --> 00:10:47,279
it just uh just compute d minus a s so

222
00:10:47,279 --> 00:10:49,120
for the moment we

223
00:10:49,120 --> 00:10:51,120
we we will ignore this uh decryption

224
00:10:51,120 --> 00:10:53,440
error

225
00:10:54,320 --> 00:10:58,839
so with lpn the receiver can encrypt

226
00:10:58,839 --> 00:11:02,480
his can encrypt his trust base

227
00:11:02,480 --> 00:11:05,200
under the lpn scheme and additionally he

228
00:11:05,200 --> 00:11:07,600
will include the option secret under the

229
00:11:07,600 --> 00:11:09,279
lcm scheme

230
00:11:09,279 --> 00:11:11,760
so then the receiver sends the el comma

231
00:11:11,760 --> 00:11:13,120
public key and

232
00:11:13,120 --> 00:11:15,839
of the test and also the instable test

233
00:11:15,839 --> 00:11:18,399
and the matrix a to the center

234
00:11:18,399 --> 00:11:20,640
the scenario will first homomorphically

235
00:11:20,640 --> 00:11:22,079
decrypt this

236
00:11:22,079 --> 00:11:23,760
instrument test under the hood of

237
00:11:23,760 --> 00:11:27,360
argument so here we will get a

238
00:11:27,360 --> 00:11:30,000
a test encrypting the receiver's trust

239
00:11:30,000 --> 00:11:30,959
bits

240
00:11:30,959 --> 00:11:33,600
and then he can automatically evaluate

241
00:11:33,600 --> 00:11:36,640
the ot function and compress it to the

242
00:11:36,640 --> 00:11:39,600
small separate test as before

243
00:11:39,600 --> 00:11:41,440
the receiver then just

244
00:11:41,440 --> 00:11:45,440
decrypt it to learn the trillion bits

245
00:11:46,160 --> 00:11:48,720
but doing this way

246
00:11:48,720 --> 00:11:52,639
the up to low rate is out over n times

247
00:11:52,639 --> 00:11:55,519
poly lamina plus plus l this uh also

248
00:11:55,519 --> 00:11:58,480
close to one as long as the dimension of

249
00:11:58,480 --> 00:12:01,120
the gap in secret is much smaller than

250
00:12:01,120 --> 00:12:03,360
the number samples l

251
00:12:03,360 --> 00:12:05,760
also notice that we ignore the

252
00:12:05,760 --> 00:12:08,079
matrix a in calculation because we can

253
00:12:08,079 --> 00:12:11,680
reuse this matrix for multiple bunch of

254
00:12:11,680 --> 00:12:14,399
choice bits

255
00:12:15,120 --> 00:12:19,040
and um azir is due to small issues

256
00:12:19,040 --> 00:12:20,480
the first one is

257
00:12:20,480 --> 00:12:23,120
option has decryption errors

258
00:12:23,120 --> 00:12:27,360
so it will produce incorrect outputs

259
00:12:27,360 --> 00:12:28,560
second

260
00:12:28,560 --> 00:12:31,279
augment is actually not a function

261
00:12:31,279 --> 00:12:35,200
private uh scheme over z2 but

262
00:12:35,200 --> 00:12:37,279
in this step we need to

263
00:12:37,279 --> 00:12:39,360
homomorphically decrypt in server tests

264
00:12:39,360 --> 00:12:43,120
we actually need to operate in z2

265
00:12:43,519 --> 00:12:44,720
so let's see

266
00:12:44,720 --> 00:12:48,399
how to deal with option errors

267
00:12:48,399 --> 00:12:50,800
we need to run additional protocols in

268
00:12:50,800 --> 00:12:53,680
parallel let's first consider the

269
00:12:53,680 --> 00:12:58,000
positions with error which means

270
00:12:58,000 --> 00:13:01,120
the trust bits at this positions will be

271
00:13:01,120 --> 00:13:04,240
flipped after option decryption

272
00:13:04,240 --> 00:13:06,480
since the receiver knows the error

273
00:13:06,480 --> 00:13:09,440
positions so for each error position he

274
00:13:09,440 --> 00:13:11,760
can compute the the first message of an

275
00:13:11,760 --> 00:13:15,440
additional ot protocol with the speed bi

276
00:13:15,440 --> 00:13:16,959
as its input

277
00:13:16,959 --> 00:13:18,839
it computes

278
00:13:18,839 --> 00:13:21,680
another computes the first message of

279
00:13:21,680 --> 00:13:24,560
pll protocol and with the position i as

280
00:13:24,560 --> 00:13:26,959
input

281
00:13:27,120 --> 00:13:29,920
then he sends both of these messages for

282
00:13:29,920 --> 00:13:32,639
each error position to the senior

283
00:13:32,639 --> 00:13:35,760
after receiving them the sender also for

284
00:13:35,760 --> 00:13:38,160
each error position

285
00:13:38,160 --> 00:13:40,399
computes the ot response

286
00:13:40,399 --> 00:13:42,720
based on these messages

287
00:13:42,720 --> 00:13:45,680
for all of his inputs so in this way the

288
00:13:45,680 --> 00:13:48,720
sender will get a database of ot

289
00:13:48,720 --> 00:13:53,440
responses for each for each organization

290
00:13:53,440 --> 00:13:56,560
then the sender just uh computes the pll

291
00:13:56,560 --> 00:13:57,839
response

292
00:13:57,839 --> 00:14:00,160
based on each database

293
00:14:00,160 --> 00:14:02,959
for each position

294
00:14:02,959 --> 00:14:04,399
then to send the

295
00:14:04,399 --> 00:14:07,040
responses to the receiver the receiver

296
00:14:07,040 --> 00:14:10,000
can locally recover the chosen base at

297
00:14:10,000 --> 00:14:14,000
this at error positions by finishing the

298
00:14:14,000 --> 00:14:16,959
pir protocol followed by the

299
00:14:16,959 --> 00:14:19,839
ot protocol

300
00:14:20,720 --> 00:14:23,040
okay but what about the

301
00:14:23,040 --> 00:14:26,560
the bits as the positions without errors

302
00:14:26,560 --> 00:14:29,040
we cannot just directly send them to the

303
00:14:29,040 --> 00:14:30,880
receiver because the center doesn't know

304
00:14:30,880 --> 00:14:32,399
which positions

305
00:14:32,399 --> 00:14:34,800
has error and which are not

306
00:14:34,800 --> 00:14:37,040
the sender needs to use a

307
00:14:37,040 --> 00:14:39,199
additional technique called a

308
00:14:39,199 --> 00:14:42,839
distributed punctual prf

309
00:14:42,839 --> 00:14:45,440
so the center holds a

310
00:14:45,440 --> 00:14:48,160
prf key and uh

311
00:14:48,160 --> 00:14:50,880
and mask all of his inputs at the prx

312
00:14:50,880 --> 00:14:52,480
values and

313
00:14:52,480 --> 00:14:54,240
the center then

314
00:14:54,240 --> 00:14:56,720
obliviously generate and transfer the

315
00:14:56,720 --> 00:14:58,880
puncture key to the receiver

316
00:14:58,880 --> 00:15:02,639
with this puncture key the receiver can

317
00:15:02,639 --> 00:15:05,760
unmask prf values at all positions

318
00:15:05,760 --> 00:15:09,440
except for the arrow positions

319
00:15:09,440 --> 00:15:10,560
this can be

320
00:15:10,560 --> 00:15:14,399
constructed by knowing techniques

321
00:15:14,959 --> 00:15:15,839
so

322
00:15:15,839 --> 00:15:17,519
the last issue

323
00:15:17,519 --> 00:15:20,399
is about the function privacy

324
00:15:20,399 --> 00:15:22,800
so similar privacy actually doesn't hold

325
00:15:22,800 --> 00:15:25,279
in about verticals because argument is

326
00:15:25,279 --> 00:15:27,760
not a function probably over the two the

327
00:15:27,760 --> 00:15:28,880
reason is

328
00:15:28,880 --> 00:15:30,240
the group zp

329
00:15:30,240 --> 00:15:34,160
doesn't have non-trivial subgroups

330
00:15:34,160 --> 00:15:37,199
so if we encode the bit and as a g to

331
00:15:37,199 --> 00:15:39,920
the b it will leak information and we

332
00:15:39,920 --> 00:15:42,639
cannot do modular reduction

333
00:15:42,639 --> 00:15:44,639
however if we want to encode it in

334
00:15:44,639 --> 00:15:46,320
higher order bits like in lattice

335
00:15:46,320 --> 00:15:47,920
setting

336
00:15:47,920 --> 00:15:50,320
let's do accumulated errors which leaks

337
00:15:50,320 --> 00:15:52,399
information again

338
00:15:52,399 --> 00:15:54,399
so our solution is to use a random

339
00:15:54,399 --> 00:15:57,120
master only

340
00:15:58,240 --> 00:16:00,320
with randomized rounding we still want

341
00:16:00,320 --> 00:16:03,360
to encode a bit uh in high order bits

342
00:16:03,360 --> 00:16:04,560
but uh

343
00:16:04,560 --> 00:16:06,720
now this time we

344
00:16:06,720 --> 00:16:10,079
we want to integer close to

345
00:16:10,079 --> 00:16:12,079
zero or q number two

346
00:16:12,079 --> 00:16:14,079
according to a discrete gaussian

347
00:16:14,079 --> 00:16:16,240
distribution

348
00:16:16,240 --> 00:16:18,639
in this way we can solve the problem and

349
00:16:18,639 --> 00:16:20,959
it actually gives us a statistical

350
00:16:20,959 --> 00:16:24,800
function private schemes

351
00:16:27,680 --> 00:16:30,320
yeah and there are a few open questions

352
00:16:30,320 --> 00:16:32,800
to be solved in future works

353
00:16:32,800 --> 00:16:35,120
for example can we upgrade our

354
00:16:35,120 --> 00:16:37,120
semi-honest security to malaysia

355
00:16:37,120 --> 00:16:38,240
security

356
00:16:38,240 --> 00:16:39,120
or

357
00:16:39,120 --> 00:16:41,759
can we remove or replace appearance

358
00:16:41,759 --> 00:16:44,720
assumptions with others

359
00:16:44,720 --> 00:16:48,279
thanks for listening

360
00:16:54,880 --> 00:16:55,839
thank you

361
00:16:55,839 --> 00:16:57,680
and

362
00:16:57,680 --> 00:17:02,120
do anybody has questions

363
00:17:08,160 --> 00:17:10,240
hi thank you for the talk very nice uh

364
00:17:10,240 --> 00:17:12,480
tricks i was wondering what kind of

365
00:17:12,480 --> 00:17:14,799
error rates do you use in the lpn

366
00:17:14,799 --> 00:17:17,599
assumption okay uh um yeah uh thanks for

367
00:17:17,599 --> 00:17:19,439
the question uh the

368
00:17:19,439 --> 00:17:22,400
error rate is uh slightly uh sublinear

369
00:17:22,400 --> 00:17:23,520
to the

370
00:17:23,520 --> 00:17:25,839
to the number of samples it's a

371
00:17:25,839 --> 00:17:28,240
uh one is inverse small polynomial error

372
00:17:28,240 --> 00:17:29,520
rate

373
00:17:29,520 --> 00:17:33,720
okay thank you no problem

374
00:17:37,039 --> 00:17:40,480
are there any other questions

375
00:17:40,880 --> 00:17:43,200
um

376
00:17:43,360 --> 00:17:44,559
can i ask you

377
00:17:44,559 --> 00:17:47,039
if you could go back to slide i think 12

378
00:17:47,039 --> 00:17:50,080
uh to which slider

379
00:17:50,080 --> 00:17:53,280
12 12.

380
00:17:54,960 --> 00:17:57,600
oh yeah it's about here okay

381
00:17:57,600 --> 00:17:58,840
so

382
00:17:58,840 --> 00:18:01,919
um so this is uh

383
00:18:01,919 --> 00:18:03,840
lpn uh

384
00:18:03,840 --> 00:18:06,480
and at the same time elgamal right yes

385
00:18:06,480 --> 00:18:08,240
so where where is el cam what are you

386
00:18:08,240 --> 00:18:10,240
applying elgamal to

387
00:18:10,240 --> 00:18:13,280
uh sorry what is elgamal encrypted which

388
00:18:13,280 --> 00:18:15,520
okay the ergomer encryption encrypted

389
00:18:15,520 --> 00:18:17,360
the airplane secret

390
00:18:17,360 --> 00:18:18,640
um yes

391
00:18:18,640 --> 00:18:21,200
and the server the sender

392
00:18:21,200 --> 00:18:24,160
sender applies elgamal re-encryption uh

393
00:18:24,160 --> 00:18:24,960
yeah

394
00:18:24,960 --> 00:18:27,840
the sender applies a sender who mostly

395
00:18:27,840 --> 00:18:30,080
decrypts the option under the ergonomic

396
00:18:30,080 --> 00:18:32,080
schemes since ergoma is linear

397
00:18:32,080 --> 00:18:34,640
homomorphic

398
00:18:34,640 --> 00:18:35,600
ah

399
00:18:35,600 --> 00:18:36,640
also

400
00:18:36,640 --> 00:18:39,600
server evaluates

401
00:18:39,600 --> 00:18:42,640
evaluates a decryption algorithm over

402
00:18:42,640 --> 00:18:44,880
over the algoma scheme yes or argument

403
00:18:44,880 --> 00:18:46,640
subtest ah

404
00:18:46,640 --> 00:18:48,880
and that's what it sends back

405
00:18:48,880 --> 00:18:51,440
uh yes yeah yes

406
00:18:51,440 --> 00:18:54,080
and um

407
00:18:54,320 --> 00:18:56,960
so this packing it's uh you use the

408
00:18:56,960 --> 00:19:00,080
packing technique right yes so

409
00:19:00,080 --> 00:19:02,559
it has no limit like i can pack however

410
00:19:02,559 --> 00:19:05,520
many bits i want into the single

411
00:19:05,520 --> 00:19:07,600
algorithm

412
00:19:07,600 --> 00:19:10,799
object group elements or it stops at

413
00:19:10,799 --> 00:19:13,679
some point you you're seeing how many uh

414
00:19:13,679 --> 00:19:15,520
this we can pack in the algoma super

415
00:19:15,520 --> 00:19:17,200
test right

416
00:19:17,200 --> 00:19:18,000
uh

417
00:19:18,000 --> 00:19:19,919
for the elements of the test uh

418
00:19:19,919 --> 00:19:22,000
i think it depends on your since

419
00:19:22,000 --> 00:19:23,440
ecommerce has a

420
00:19:23,440 --> 00:19:28,400
super polynomial modulus so in a packing

421
00:19:28,400 --> 00:19:33,039
we need some we need a prf to

422
00:19:33,039 --> 00:19:34,640
to detect to

423
00:19:34,640 --> 00:19:37,200
to generate a breakpoint in the group as

424
00:19:37,200 --> 00:19:39,200
long as the group is large enough we can

425
00:19:39,200 --> 00:19:41,360
we can pack as much information as we

426
00:19:41,360 --> 00:19:43,039
want

427
00:19:43,039 --> 00:19:45,039
and

428
00:19:45,039 --> 00:19:47,280
so

429
00:19:47,280 --> 00:19:49,360
this you do you think this kind of

430
00:19:49,360 --> 00:19:50,799
extends to

431
00:19:50,799 --> 00:19:54,400
outing larger messages and bits

432
00:19:54,400 --> 00:19:57,760
you mean uh the string otr

433
00:19:57,760 --> 00:19:58,559
uh

434
00:19:58,559 --> 00:20:01,280
i mean uh what we saw is uh what we

435
00:20:01,280 --> 00:20:03,760
focus on the bit ot means uh the message

436
00:20:03,760 --> 00:20:06,320
is just single bit but for if if you

437
00:20:06,320 --> 00:20:08,880
want to do for string ot

438
00:20:08,880 --> 00:20:11,039
you can you can do with easier

439
00:20:11,039 --> 00:20:13,280
easier techniques i mean bit old implies

440
00:20:13,280 --> 00:20:16,000
string ot right uh but not the other way

441
00:20:16,000 --> 00:20:17,440
around

442
00:20:17,440 --> 00:20:20,000
ah so you just you just repeat

443
00:20:20,000 --> 00:20:22,000
over right because you only have honest

444
00:20:22,000 --> 00:20:23,760
bacteria yeah yes

445
00:20:23,760 --> 00:20:25,280
security yeah

446
00:20:25,280 --> 00:20:26,080
yeah

447
00:20:26,080 --> 00:20:28,159
okay thank you so much

448
00:20:28,159 --> 00:20:29,360
uh thanks

449
00:20:29,360 --> 00:20:30,880
if there is no further questions then

450
00:20:30,880 --> 00:20:34,520
let's thank the speaker

