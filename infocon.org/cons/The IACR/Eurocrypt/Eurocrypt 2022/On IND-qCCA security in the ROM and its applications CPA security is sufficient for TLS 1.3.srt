1
00:00:02,480 --> 00:00:05,200
okay so the next talk is on in qcca

2
00:00:05,200 --> 00:00:07,040
security in the random oracle model and

3
00:00:07,040 --> 00:00:09,920
its applications it's a paper by lawyers

4
00:00:09,920 --> 00:00:13,440
uh juguenin domito and serge woodenae

5
00:00:13,440 --> 00:00:16,160
and luis is going to present the paper

6
00:00:16,160 --> 00:00:18,240
thank you very much for the introduction

7
00:00:18,240 --> 00:00:20,080
so i'll start straightaway by defining

8
00:00:20,080 --> 00:00:21,920
the the core primitive of this talk

9
00:00:21,920 --> 00:00:25,279
namely in qcca chem so first a brief

10
00:00:25,279 --> 00:00:26,880
reminder of what a chemist is a couple

11
00:00:26,880 --> 00:00:28,800
of three algorithms gen encaps and d

12
00:00:28,800 --> 00:00:32,159
caps or gen outputs of a publicly secret

13
00:00:32,159 --> 00:00:34,239
key and caps take the public key and

14
00:00:34,239 --> 00:00:36,640
output the key in a ciphertext

15
00:00:36,640 --> 00:00:38,239
handicaps take the secret kind of

16
00:00:38,239 --> 00:00:40,559
ciphertext and output the key

17
00:00:40,559 --> 00:00:43,040
so now we want to define inqcc security

18
00:00:43,040 --> 00:00:45,280
so we use a distinguishing game

19
00:00:45,280 --> 00:00:46,879
where the adversary receives a challenge

20
00:00:46,879 --> 00:00:48,800
ciphertext and a key which is either

21
00:00:48,800 --> 00:00:51,520
random and simple at random

22
00:00:51,520 --> 00:00:52,320
then

23
00:00:52,320 --> 00:00:54,559
like a real key that is encapsulated

24
00:00:54,559 --> 00:00:56,960
into the challenge ciphertext

25
00:00:56,960 --> 00:00:58,320
and the goal for the adversary is to

26
00:00:58,320 --> 00:01:00,079
distinguish the real key from the random

27
00:01:00,079 --> 00:01:01,199
key

28
00:01:01,199 --> 00:01:03,520
and as in in cc security the adversary

29
00:01:03,520 --> 00:01:05,680
has access to the capsolution oracle

30
00:01:05,680 --> 00:01:07,680
that returns the decapitation for any

31
00:01:07,680 --> 00:01:09,439
ciphertext except

32
00:01:09,439 --> 00:01:11,119
the challenge one

33
00:01:11,119 --> 00:01:12,880
and the only difference with the

34
00:01:12,880 --> 00:01:15,759
classical like normal in cc security

35
00:01:15,759 --> 00:01:17,840
is that the adversary is limited to

36
00:01:17,840 --> 00:01:20,000
queries where queue

37
00:01:20,000 --> 00:01:22,320
is constant and is the queue in the name

38
00:01:22,320 --> 00:01:24,479
of the definition so we can have in one

39
00:01:24,479 --> 00:01:28,479
cca into cca and so on

40
00:01:28,960 --> 00:01:30,720
uh now this notion was first defined by

41
00:01:30,720 --> 00:01:32,880
premarital in 2007

42
00:01:32,880 --> 00:01:34,320
and in that work they showed that it's

43
00:01:34,320 --> 00:01:36,720
possible to build the cpa to qcc

44
00:01:36,720 --> 00:01:39,360
transform in the standard model but this

45
00:01:39,360 --> 00:01:41,920
transform is quite inefficient

46
00:01:41,920 --> 00:01:43,520
and apart from this work and a few

47
00:01:43,520 --> 00:01:45,200
others this notion hasn't been very

48
00:01:45,200 --> 00:01:48,000
popular or at least in practice

49
00:01:48,000 --> 00:01:50,560
maybe because it's between ncp and in cc

50
00:01:50,560 --> 00:01:52,640
security or maybe because before we

51
00:01:52,640 --> 00:01:54,880
could use a diffie-hellman which is a

52
00:01:54,880 --> 00:01:58,159
sticker against active adversaries even

53
00:01:58,159 --> 00:01:59,040
under

54
00:01:59,040 --> 00:02:01,360
reasonable assumptions

55
00:02:01,360 --> 00:02:03,119
but now the the crypto game has changed

56
00:02:03,119 --> 00:02:05,280
a bit because we want post quantum and

57
00:02:05,280 --> 00:02:06,880
forward secrecy

58
00:02:06,880 --> 00:02:08,720
so we want camps instead of d helmand

59
00:02:08,720 --> 00:02:10,878
for post quantum and we want fmr keys

60
00:02:10,878 --> 00:02:12,720
instead of static keys for forward

61
00:02:12,720 --> 00:02:15,360
secrecy so maybe in some cases ncca

62
00:02:15,360 --> 00:02:18,400
security is not really needed

63
00:02:18,400 --> 00:02:20,640
and actually in several new post quantum

64
00:02:20,640 --> 00:02:22,400
variants of existing protocol

65
00:02:22,400 --> 00:02:24,800
we can use in one cc cams so for

66
00:02:24,800 --> 00:02:28,080
instance in the pq tls 1.3 where we

67
00:02:28,080 --> 00:02:30,319
replace diffie-hellman with with a cam

68
00:02:30,319 --> 00:02:32,640
we can use our in-one cc cam

69
00:02:32,640 --> 00:02:35,200
and also in this nice variant of tls

70
00:02:35,200 --> 00:02:37,440
which is called chem tls

71
00:02:37,440 --> 00:02:40,640
we can use in one ccm for dfmr cam so

72
00:02:40,640 --> 00:02:42,480
there are two camps in that construction

73
00:02:42,480 --> 00:02:44,800
one is for static keys

74
00:02:44,800 --> 00:02:46,400
and the other for ephemeral and for the

75
00:02:46,400 --> 00:02:50,160
fmr1 we can use the in one cc cam and

76
00:02:50,160 --> 00:02:51,599
also there are some post quantum

77
00:02:51,599 --> 00:02:54,560
variants of x3dh where we can also use

78
00:02:54,560 --> 00:02:57,200
uh in one cca camps such as the one by

79
00:02:57,200 --> 00:02:59,840
your brand a little

80
00:02:59,840 --> 00:03:01,680
so we see that in these new protocols in

81
00:03:01,680 --> 00:03:04,080
cpa might not be enough but ncc is not

82
00:03:04,080 --> 00:03:06,480
really necessary for dfamarkem so maybe

83
00:03:06,480 --> 00:03:09,840
we can use in in one cc security

84
00:03:09,840 --> 00:03:11,280
and so we wondered whether we could

85
00:03:11,280 --> 00:03:13,840
build more efficient in one cc camps

86
00:03:13,840 --> 00:03:16,000
than in cc once built with the fujizaki

87
00:03:16,000 --> 00:03:17,519
aka motor transform

88
00:03:17,519 --> 00:03:19,760
and as you probably know like in the fo

89
00:03:19,760 --> 00:03:21,280
transform there is this costly

90
00:03:21,280 --> 00:03:22,959
re-encryption check

91
00:03:22,959 --> 00:03:24,720
when you encapsulate

92
00:03:24,720 --> 00:03:27,599
so maybe we can do better

93
00:03:27,599 --> 00:03:30,000
and so our contribution we give two very

94
00:03:30,000 --> 00:03:31,760
simple and efficient transforms that

95
00:03:31,760 --> 00:03:34,319
take a one-way secure public encryption

96
00:03:34,319 --> 00:03:37,040
scheme and output in qcc chem and we

97
00:03:37,040 --> 00:03:38,480
proved that the first one is securing

98
00:03:38,480 --> 00:03:40,080
the curum and the second one in the

99
00:03:40,080 --> 00:03:42,640
random oracle model only

100
00:03:42,640 --> 00:03:44,480
and compared to the fujifile commodore

101
00:03:44,480 --> 00:03:46,239
like transforms there is no

102
00:03:46,239 --> 00:03:48,080
de-randomization which means no

103
00:03:48,080 --> 00:03:50,159
re-encryption in encapsulation

104
00:03:50,159 --> 00:03:51,840
and that means that the encapsulation is

105
00:03:51,840 --> 00:03:54,319
much faster than with the f4 derived

106
00:03:54,319 --> 00:03:56,239
games

107
00:03:56,239 --> 00:03:58,319
and also using a similar proof technique

108
00:03:58,319 --> 00:03:59,599
that we use for the to prove the

109
00:03:59,599 --> 00:04:01,840
security of the second transform we show

110
00:04:01,840 --> 00:04:05,120
that uh post quantum class 1.3 is occur

111
00:04:05,120 --> 00:04:07,439
in the random oracle model if the cam is

112
00:04:07,439 --> 00:04:10,159
only a cpa sector which solves

113
00:04:10,159 --> 00:04:12,480
an open question that was raised in a

114
00:04:12,480 --> 00:04:15,120
few works but then it's only like a

115
00:04:15,120 --> 00:04:17,040
theoretical solution because the bound

116
00:04:17,040 --> 00:04:20,399
that we get is a very much not tight

117
00:04:20,399 --> 00:04:22,320
and as a query it means also that

118
00:04:22,320 --> 00:04:24,960
classical ts 1.3 is decorative the

119
00:04:24,960 --> 00:04:26,639
computational diffie-hellman assumption

120
00:04:26,639 --> 00:04:29,280
holds and we don't need like fancier

121
00:04:29,280 --> 00:04:31,840
assumptions such as a prf 48 if you know

122
00:04:31,840 --> 00:04:35,679
it or like a strong diffie-hellman

123
00:04:36,160 --> 00:04:37,919
so let's see how we can build these

124
00:04:37,919 --> 00:04:39,120
transforms

125
00:04:39,120 --> 00:04:41,199
first we can wonder whether the trivial

126
00:04:41,199 --> 00:04:43,680
pka to cam transform work so by

127
00:04:43,680 --> 00:04:45,440
triggering pk uh two came transformer i

128
00:04:45,440 --> 00:04:47,280
mean the one where

129
00:04:47,280 --> 00:04:49,520
the gen is gonna be the the gen function

130
00:04:49,520 --> 00:04:51,680
of the underlying pke when we want to

131
00:04:51,680 --> 00:04:55,120
encapsulate we just uh sample random

132
00:04:55,120 --> 00:04:57,759
seed or in the message we encrypt the

133
00:04:57,759 --> 00:05:00,320
seed and the key is going to be the hash

134
00:05:00,320 --> 00:05:02,479
or like the kdr the key derivation

135
00:05:02,479 --> 00:05:05,360
function or the random oracle applied on

136
00:05:05,360 --> 00:05:06,639
the seed

137
00:05:06,639 --> 00:05:08,320
and when we want to encapsulate we

138
00:05:08,320 --> 00:05:10,400
simply decrypt the ciphertext to get the

139
00:05:10,400 --> 00:05:11,919
seed and

140
00:05:11,919 --> 00:05:13,440
we hash it

141
00:05:13,440 --> 00:05:15,680
so we can wonder whether this transform

142
00:05:15,680 --> 00:05:19,600
outputs in qcc chem if the pke is only

143
00:05:19,600 --> 00:05:21,759
one way secure

144
00:05:21,759 --> 00:05:23,680
and the answer is no because if you take

145
00:05:23,680 --> 00:05:27,199
most of the post quantum schemes

146
00:05:27,199 --> 00:05:29,039
and you modify the challenge cipher text

147
00:05:29,039 --> 00:05:31,360
by adding very small noise you can adapt

148
00:05:31,360 --> 00:05:33,680
it back to the challenge message

149
00:05:33,680 --> 00:05:36,320
so in like the one in one cca game or

150
00:05:36,320 --> 00:05:39,280
like in qcc game if you call the capture

151
00:05:39,280 --> 00:05:41,120
the capsulation oracle with the

152
00:05:41,120 --> 00:05:43,039
challenge ciphertext plus some very

153
00:05:43,039 --> 00:05:44,880
small noise you're gonna get back the

154
00:05:44,880 --> 00:05:46,800
real key and you can distinguish with

155
00:05:46,800 --> 00:05:49,199
very good probability

156
00:05:49,199 --> 00:05:51,280
so a quick fix is to add a confirmation

157
00:05:51,280 --> 00:05:53,919
hash to the ciphertext where we add this

158
00:05:53,919 --> 00:05:56,000
this tag which is a random oracle

159
00:05:56,000 --> 00:05:58,479
applied on the seed and the ciphertext

160
00:05:58,479 --> 00:06:01,520
and when we encapsulate we simply verify

161
00:06:01,520 --> 00:06:03,360
that the tag is consistent with the seed

162
00:06:03,360 --> 00:06:04,840
that we

163
00:06:04,840 --> 00:06:06,880
decrypted now the previous attack is

164
00:06:06,880 --> 00:06:08,639
throttled because the adversary we need

165
00:06:08,639 --> 00:06:11,120
to know the tag for the modified cipher

166
00:06:11,120 --> 00:06:14,000
text and the challenge seed and unless

167
00:06:14,000 --> 00:06:15,440
it can query the challenges to the

168
00:06:15,440 --> 00:06:18,000
render miracle

169
00:06:18,000 --> 00:06:21,840
he cannot like get it

170
00:06:22,080 --> 00:06:24,479
and more generally the proof id is uh is

171
00:06:24,479 --> 00:06:26,479
as follow we can first note that this

172
00:06:26,479 --> 00:06:27,919
transform is very similar to the

173
00:06:27,919 --> 00:06:29,440
reactions formed by yokomoto and

174
00:06:29,440 --> 00:06:32,319
penshaval from 20 years ago

175
00:06:32,319 --> 00:06:33,840
where they were building a transformer

176
00:06:33,840 --> 00:06:37,440
that was doing one-way pca to ncc

177
00:06:37,440 --> 00:06:38,479
um

178
00:06:38,479 --> 00:06:41,199
pae in our case we want to get in qcc

179
00:06:41,199 --> 00:06:43,120
account but the idea of the proof is the

180
00:06:43,120 --> 00:06:44,160
same

181
00:06:44,160 --> 00:06:47,120
where one way pca is one winner against

182
00:06:47,120 --> 00:06:49,360
plaintext checking attacks it's not very

183
00:06:49,360 --> 00:06:50,400
important

184
00:06:50,400 --> 00:06:52,319
so important what it is but basically

185
00:06:52,319 --> 00:06:54,000
the adversary receives a chinese

186
00:06:54,000 --> 00:06:56,400
ciphertext that it must invert and it

187
00:06:56,400 --> 00:06:58,560
has access to

188
00:06:58,560 --> 00:07:00,319
an oracle that returns whether the

189
00:07:00,319 --> 00:07:02,000
decryption of ciphertext is equal to

190
00:07:02,000 --> 00:07:03,280
some plain text

191
00:07:03,280 --> 00:07:06,080
so yeah what the oracle does is not so

192
00:07:06,080 --> 00:07:08,639
important but you can note that on every

193
00:07:08,639 --> 00:07:10,639
query the oracle returns one bit of

194
00:07:10,639 --> 00:07:12,240
information

195
00:07:12,240 --> 00:07:13,759
so in the second step of the proof you

196
00:07:13,759 --> 00:07:15,440
can just argue that one way pc with

197
00:07:15,440 --> 00:07:17,919
queries is the same as just one

198
00:07:17,919 --> 00:07:20,319
awareness with a loss of q security bits

199
00:07:20,319 --> 00:07:21,680
because we can just like make a

200
00:07:21,680 --> 00:07:24,080
reduction where we guess the qubits that

201
00:07:24,080 --> 00:07:26,960
are written by the oracle

202
00:07:26,960 --> 00:07:29,120
and that's the bound that we get

203
00:07:29,120 --> 00:07:31,120
so we have a two to the power q factor

204
00:07:31,120 --> 00:07:32,720
which looks bad

205
00:07:32,720 --> 00:07:34,960
but since q is constant it's not really

206
00:07:34,960 --> 00:07:37,520
a problem in theory at least but now in

207
00:07:37,520 --> 00:07:39,599
practice it's going to be only suitable

208
00:07:39,599 --> 00:07:41,039
for small q

209
00:07:41,039 --> 00:07:44,560
like for in one ccm we're gonna get just

210
00:07:44,560 --> 00:07:48,240
a two factor in in the bound

211
00:07:48,960 --> 00:07:50,479
and then we build the second transform

212
00:07:50,479 --> 00:07:52,879
where the idea is to get rid of the tag

213
00:07:52,879 --> 00:07:54,639
and so now we have the seed and the

214
00:07:54,639 --> 00:07:56,639
ciphertext directly in the key

215
00:07:56,639 --> 00:07:58,400
so that's very similar like to the to

216
00:07:58,400 --> 00:08:00,639
the trigger transformer except that uh

217
00:08:00,639 --> 00:08:02,560
we have the cipher text in the key as

218
00:08:02,560 --> 00:08:04,080
well

219
00:08:04,080 --> 00:08:05,680
and again the preset the previous attack

220
00:08:05,680 --> 00:08:07,680
doesn't work because if you uh

221
00:08:07,680 --> 00:08:09,520
encapsulate the modify ciphertext you're

222
00:08:09,520 --> 00:08:11,199
not gonna get back to the real key in

223
00:08:11,199 --> 00:08:15,520
the in in qcc game

224
00:08:15,759 --> 00:08:17,680
and we can also build the chem variant

225
00:08:17,680 --> 00:08:19,520
of this transform for like chem to cam

226
00:08:19,520 --> 00:08:21,840
instead of pk to pke

227
00:08:21,840 --> 00:08:23,440
and this transform is even like simpler

228
00:08:23,440 --> 00:08:25,599
we just call the underlying

229
00:08:25,599 --> 00:08:28,000
end caps of the underlying chem

230
00:08:28,000 --> 00:08:30,560
to get the ciphertext and the seed and

231
00:08:30,560 --> 00:08:32,559
like the key is going to be this hash of

232
00:08:32,559 --> 00:08:34,719
the key material or the seed and the

233
00:08:34,719 --> 00:08:36,559
ciphertext

234
00:08:36,559 --> 00:08:38,799
and what's nice about this transform is

235
00:08:38,799 --> 00:08:40,479
that it preserves the symmetric

236
00:08:40,479 --> 00:08:42,320
structure of the underlying cam if it

237
00:08:42,320 --> 00:08:43,599
exists

238
00:08:43,599 --> 00:08:45,360
so by symmetric structure i mean like in

239
00:08:45,360 --> 00:08:47,680
d helmet or like in sidh or the

240
00:08:47,680 --> 00:08:49,519
ciphertext does not depend on the public

241
00:08:49,519 --> 00:08:51,600
key or like alice's share does not

242
00:08:51,600 --> 00:08:53,440
depend on bobster

243
00:08:53,440 --> 00:08:54,959
and so the cam that is output by this

244
00:08:54,959 --> 00:08:56,880
transform will preserve this symmetric

245
00:08:56,880 --> 00:08:58,000
structure

246
00:08:58,000 --> 00:08:59,920
uh which is nice because in like the

247
00:08:59,920 --> 00:09:01,839
first transform it's not the case

248
00:09:01,839 --> 00:09:03,839
and in the fujizaki okay motor transform

249
00:09:03,839 --> 00:09:06,800
it's not the case either

250
00:09:07,440 --> 00:09:09,519
and again we get this type of security

251
00:09:09,519 --> 00:09:12,160
bound where qh is the number of queries

252
00:09:12,160 --> 00:09:15,760
uh you can do 2d random oracle

253
00:09:15,760 --> 00:09:17,839
and you can look in the paper if you are

254
00:09:17,839 --> 00:09:19,519
interested in the details of the pro but

255
00:09:19,519 --> 00:09:21,040
basically it requires quite a lot of

256
00:09:21,040 --> 00:09:22,880
random oracle programming

257
00:09:22,880 --> 00:09:24,640
and careful guessing in the reduction

258
00:09:24,640 --> 00:09:26,399
because we want the factor to be

259
00:09:26,399 --> 00:09:29,040
exponential in q which is constant and

260
00:09:29,040 --> 00:09:31,440
not it's qh which grows with the

261
00:09:31,440 --> 00:09:33,519
security parameter or can grow with the

262
00:09:33,519 --> 00:09:36,920
security parameter

263
00:09:38,160 --> 00:09:40,800
okay so i'll talk about post quantum cs

264
00:09:40,800 --> 00:09:42,560
1.3 and whether cpa security is

265
00:09:42,560 --> 00:09:44,959
sufficient for it

266
00:09:44,959 --> 00:09:46,720
this is a very high level overview of

267
00:09:46,720 --> 00:09:49,200
the cs 1.3 handshake whether the client

268
00:09:49,200 --> 00:09:52,720
and the server to do a snack

269
00:09:52,720 --> 00:09:55,600
then they do diffie-hellman key exchange

270
00:09:55,600 --> 00:09:57,839
the server can compute the key and then

271
00:09:57,839 --> 00:09:58,959
send

272
00:09:58,959 --> 00:10:01,440
its own share to the client

273
00:10:01,440 --> 00:10:04,000
with an encrypted certificate signature

274
00:10:04,000 --> 00:10:06,399
and a mac over the transcript

275
00:10:06,399 --> 00:10:08,399
then the client can send

276
00:10:08,399 --> 00:10:10,480
the client-finished message which is

277
00:10:10,480 --> 00:10:13,040
also a mac under its own transcript and

278
00:10:13,040 --> 00:10:15,279
finally they can exchange some encrypted

279
00:10:15,279 --> 00:10:18,160
data

280
00:10:18,160 --> 00:10:20,320
now to you to make this post quantum we

281
00:10:20,320 --> 00:10:22,800
can simply write d phi hellmann as a cam

282
00:10:22,800 --> 00:10:24,959
so now the client simply calls key gen

283
00:10:24,959 --> 00:10:27,120
to get a secret key public key sends the

284
00:10:27,120 --> 00:10:29,040
public key to the server and the server

285
00:10:29,040 --> 00:10:30,640
encapsulates against the public key to

286
00:10:30,640 --> 00:10:32,480
get the cipher ciphertext and the key

287
00:10:32,480 --> 00:10:34,240
it sends a ciphertext and the client can

288
00:10:34,240 --> 00:10:36,480
compute the key

289
00:10:36,480 --> 00:10:38,560
and obviously if we want post quantum

290
00:10:38,560 --> 00:10:40,160
authentication

291
00:10:40,160 --> 00:10:44,000
we need also pq signatures

292
00:10:44,160 --> 00:10:46,320
and now if we look at the original proof

293
00:10:46,320 --> 00:10:49,760
of ts 1.3 security by uh dowling at all

294
00:10:49,760 --> 00:10:51,440
uh it's quite trivial to see that we can

295
00:10:51,440 --> 00:10:53,680
just uh

296
00:10:53,680 --> 00:10:56,000
use a in one cc cam instead of different

297
00:10:56,000 --> 00:10:57,279
man like there are a few details in the

298
00:10:57,279 --> 00:11:00,640
proof but basically it just go through

299
00:11:00,640 --> 00:11:02,959
and so what we want to show now is that

300
00:11:02,959 --> 00:11:05,360
we can even use in cpa or like one way

301
00:11:05,360 --> 00:11:07,040
cp came

302
00:11:07,040 --> 00:11:09,519
in the random oracle model and the pqt

303
00:11:09,519 --> 00:11:14,440
ls 1.3 handshake will still be secure

304
00:11:14,640 --> 00:11:16,880
and just a few few words on the security

305
00:11:16,880 --> 00:11:18,880
model we use the same security model as

306
00:11:18,880 --> 00:11:20,399
in the original proof

307
00:11:20,399 --> 00:11:22,880
which is called multi-stage security

308
00:11:22,880 --> 00:11:24,480
in this model the adversary can send

309
00:11:24,480 --> 00:11:28,160
receive and expose using some oracles

310
00:11:28,160 --> 00:11:29,760
and when a key is derived and ready for

311
00:11:29,760 --> 00:11:32,720
use we say it is accepted and on

312
00:11:32,720 --> 00:11:35,440
acceptance of a key the protocol process

313
00:11:35,440 --> 00:11:37,519
gives back the hand to the adversary

314
00:11:37,519 --> 00:11:39,839
that can then call some oracles before

315
00:11:39,839 --> 00:11:44,320
continuing the handshake or the protocol

316
00:11:45,040 --> 00:11:47,040
now this is uh what we get if we write

317
00:11:47,040 --> 00:11:50,160
relevant part of the teles 1.3 handshake

318
00:11:50,160 --> 00:11:51,680
in this model

319
00:11:51,680 --> 00:11:53,040
first we assume that everything is

320
00:11:53,040 --> 00:11:54,639
random oracle

321
00:11:54,639 --> 00:11:57,120
so we know from like uh this tuesday's

322
00:11:57,120 --> 00:11:59,200
talk that we have to be a bit careful

323
00:11:59,200 --> 00:12:01,120
about that

324
00:12:01,120 --> 00:12:03,040
uh but basically yeah so the client on

325
00:12:03,040 --> 00:12:04,399
the server they send the public

326
00:12:04,399 --> 00:12:06,480
ciphertext then the client derive

327
00:12:06,480 --> 00:12:09,680
some some key and then they apply some

328
00:12:09,680 --> 00:12:11,519
complicated key schedule to get some

329
00:12:11,519 --> 00:12:13,839
other keys

330
00:12:13,839 --> 00:12:16,160
and since we want to prove that

331
00:12:16,160 --> 00:12:18,079
one recipe is enough at some point we're

332
00:12:18,079 --> 00:12:20,320
going to have to make a one-way cpa

333
00:12:20,320 --> 00:12:22,480
reduction where we have an adversary

334
00:12:22,480 --> 00:12:25,040
that doesn't have access to any oracle

335
00:12:25,040 --> 00:12:26,800
and this adversary needs to correctly

336
00:12:26,800 --> 00:12:29,040
simulate the view of the underlying

337
00:12:29,040 --> 00:12:31,360
multi-stage adversary

338
00:12:31,360 --> 00:12:33,200
and for some reasons in the proof we

339
00:12:33,200 --> 00:12:35,440
will need to simulate the client's

340
00:12:35,440 --> 00:12:38,720
behavior upon receiving one ciphertext

341
00:12:38,720 --> 00:12:40,240
for which we don't know

342
00:12:40,240 --> 00:12:42,560
the secret key

343
00:12:42,560 --> 00:12:44,560
and in particular we will need to

344
00:12:44,560 --> 00:12:46,880
simulate the computation of these two

345
00:12:46,880 --> 00:12:48,480
transaction keys

346
00:12:48,480 --> 00:12:51,519
tkc and tks that themselves depend on

347
00:12:51,519 --> 00:12:53,200
some other values

348
00:12:53,200 --> 00:12:55,600
well basically the idea is that this

349
00:12:55,600 --> 00:12:58,560
this keys will depend on some

350
00:12:58,560 --> 00:13:00,800
hash of the key material and some hash

351
00:13:00,800 --> 00:13:02,240
of the transcript that contains the

352
00:13:02,240 --> 00:13:04,000
ciphertext

353
00:13:04,000 --> 00:13:05,839
so overall except that there are some

354
00:13:05,839 --> 00:13:08,240
nested random oracles uh this is very

355
00:13:08,240 --> 00:13:10,079
similar to what we had in the second

356
00:13:10,079 --> 00:13:12,399
transform but the key was just the hash

357
00:13:12,399 --> 00:13:14,639
of the of the seed or the key and the

358
00:13:14,639 --> 00:13:16,240
ciphertext

359
00:13:16,240 --> 00:13:18,240
and so using a similar proof techniques

360
00:13:18,240 --> 00:13:19,600
that's a little bit more complicated

361
00:13:19,600 --> 00:13:20,880
because now we have nested random

362
00:13:20,880 --> 00:13:23,360
oracles where we can correctly simulate

363
00:13:23,360 --> 00:13:26,399
uh one decap solution query

364
00:13:26,399 --> 00:13:27,839
and the last remaining problem is the

365
00:13:27,839 --> 00:13:30,079
proof is this value dhs that does not

366
00:13:30,079 --> 00:13:32,240
depend on the ciphertext so we cannot

367
00:13:32,240 --> 00:13:35,519
use the same proof technique

368
00:13:35,519 --> 00:13:38,720
but then we can notice that dhs is used

369
00:13:38,720 --> 00:13:41,120
only after the mac verification

370
00:13:41,120 --> 00:13:42,880
at the bottom here

371
00:13:42,880 --> 00:13:44,320
and so in the proof we can argue that

372
00:13:44,320 --> 00:13:46,160
either the underlying adversary queried

373
00:13:46,160 --> 00:13:48,320
the key to the random oracle and knows

374
00:13:48,320 --> 00:13:50,720
the key for the mac unlike the mac it's

375
00:13:50,720 --> 00:13:52,480
going to fail and the client is going to

376
00:13:52,480 --> 00:13:55,120
abort so in the reduction we can either

377
00:13:55,120 --> 00:13:57,920
abort or recover the key and that's how

378
00:13:57,920 --> 00:13:59,839
the proof goes through

379
00:13:59,839 --> 00:14:00,959
again if you're interested in the

380
00:14:00,959 --> 00:14:03,199
details i would encourage you to

381
00:14:03,199 --> 00:14:06,000
to read the paper

382
00:14:06,000 --> 00:14:08,160
and so that's the demand that we get so

383
00:14:08,160 --> 00:14:10,160
in theory it shows that one way cpa

384
00:14:10,160 --> 00:14:12,160
camps are sufficient for ts 1.3 to be

385
00:14:12,160 --> 00:14:14,720
secure then you can see that the bound

386
00:14:14,720 --> 00:14:16,240
is very much non-tight because we have

387
00:14:16,240 --> 00:14:18,320
like a number of queries to the random

388
00:14:18,320 --> 00:14:20,959
workers like nearly to the sixth in the

389
00:14:20,959 --> 00:14:22,800
in the bound

390
00:14:22,800 --> 00:14:24,639
so the the result is theoretical but

391
00:14:24,639 --> 00:14:27,040
still that solves an open question

392
00:14:27,040 --> 00:14:29,760
and as i said before the color it means

393
00:14:29,760 --> 00:14:32,160
c assumption is sufficient for ts 1.3 to

394
00:14:32,160 --> 00:14:34,800
be secure if the other primitives are

395
00:14:34,800 --> 00:14:37,920
secure as well obviously

396
00:14:38,639 --> 00:14:40,399
so i'll just conclude by talking a bit

397
00:14:40,399 --> 00:14:43,760
about the impact and open questions

398
00:14:43,760 --> 00:14:45,440
so we saw that in one c camps can be

399
00:14:45,440 --> 00:14:47,120
used in several post quantum protocols

400
00:14:47,120 --> 00:14:50,720
such as pq 20.3 or pmcls and so on

401
00:14:50,720 --> 00:14:52,639
and compared to current solutions based

402
00:14:52,639 --> 00:14:54,079
on institute camp's derived with the

403
00:14:54,079 --> 00:14:56,240
free jacques motor transform it's half

404
00:14:56,240 --> 00:14:59,279
of the capsulation time at least

405
00:14:59,279 --> 00:15:01,199
so here are some very quick benchmarking

406
00:15:01,199 --> 00:15:04,000
results for some of the pq schemes on

407
00:15:04,000 --> 00:15:06,000
the left you have the calculation time

408
00:15:06,000 --> 00:15:09,680
for the original decap solution function

409
00:15:09,680 --> 00:15:11,519
and on the right the decaps with no

410
00:15:11,519 --> 00:15:12,800
re-encryption

411
00:15:12,800 --> 00:15:14,959
which is very close to what we what we

412
00:15:14,959 --> 00:15:17,600
would get with our transform

413
00:15:17,600 --> 00:15:19,279
and you can see that the speed up is a

414
00:15:19,279 --> 00:15:21,760
very good it's uh always more than two

415
00:15:21,760 --> 00:15:24,240
seven six for uh for frodo

416
00:15:24,240 --> 00:15:26,399
um and it's also interesting for psy

417
00:15:26,399 --> 00:15:27,519
because we

418
00:15:27,519 --> 00:15:29,519
go from more than two milliseconds to

419
00:15:29,519 --> 00:15:31,040
the caps to

420
00:15:31,040 --> 00:15:34,160
roughly one millisecond

421
00:15:34,160 --> 00:15:36,560
and also the cams derived with our

422
00:15:36,560 --> 00:15:38,320
transforms can preserve the symmetry of

423
00:15:38,320 --> 00:15:40,320
the annoying cpa secret scheme which can

424
00:15:40,320 --> 00:15:43,839
be interesting for sight for instance

425
00:15:43,839 --> 00:15:45,360
also it's a very generic and dropping

426
00:15:45,360 --> 00:15:46,880
replacement because we're just going to

427
00:15:46,880 --> 00:15:49,519
swap games with cams

428
00:15:49,519 --> 00:15:50,800
and the clamps are quite easy to

429
00:15:50,800 --> 00:15:52,560
implement because it's actually like the

430
00:15:52,560 --> 00:15:55,120
transformer or actually simplification

431
00:15:55,120 --> 00:15:58,880
of the fujizaki okay motor transform

432
00:15:58,880 --> 00:16:00,880
and maybe the the main obvious downside

433
00:16:00,880 --> 00:16:03,519
is that in qccm can be vulnerable to

434
00:16:03,519 --> 00:16:05,680
misuse or reuse attack so that means

435
00:16:05,680 --> 00:16:08,880
that if you implement your firmware key

436
00:16:08,880 --> 00:16:09,680
cam

437
00:16:09,680 --> 00:16:11,920
and you reuse the ethernet key multiple

438
00:16:11,920 --> 00:16:14,399
times then maybe after a few thousand of

439
00:16:14,399 --> 00:16:16,240
reuses an adversary can recover the

440
00:16:16,240 --> 00:16:18,800
secret key as was shown in

441
00:16:18,800 --> 00:16:20,880
many other works

442
00:16:20,880 --> 00:16:22,399
so we have to be very careful when

443
00:16:22,399 --> 00:16:23,920
implementing protocols that different

444
00:16:23,920 --> 00:16:27,839
keys are really used only once

445
00:16:28,160 --> 00:16:30,160
and i guess at future work it'd be nice

446
00:16:30,160 --> 00:16:32,160
to prove the qm security of the second

447
00:16:32,160 --> 00:16:34,480
transform and have the tls result the

448
00:16:34,480 --> 00:16:36,320
challenge is that there is a lot of

449
00:16:36,320 --> 00:16:37,680
random oracle programming in the

450
00:16:37,680 --> 00:16:40,079
classical proof so that might not be so

451
00:16:40,079 --> 00:16:42,079
easy to transpose to the to the premium

452
00:16:42,079 --> 00:16:44,399
setting and for the tls result there is

453
00:16:44,399 --> 00:16:45,360
a lot of

454
00:16:45,360 --> 00:16:47,360
nested random oracles as well so that

455
00:16:47,360 --> 00:16:49,440
can be tricky

456
00:16:49,440 --> 00:16:51,839
my best guess is that it would hold but

457
00:16:51,839 --> 00:16:53,519
maybe the security bound would be would

458
00:16:53,519 --> 00:16:55,360
be worse

459
00:16:55,360 --> 00:16:57,199
uh and also to get a better bound for

460
00:16:57,199 --> 00:16:58,079
this

461
00:16:58,079 --> 00:17:00,000
tls result that we had

462
00:17:00,000 --> 00:17:02,320
because yeah it's very much non-tight at

463
00:17:02,320 --> 00:17:04,559
the moment

464
00:17:04,559 --> 00:17:07,280
thank you very much

465
00:17:12,799 --> 00:17:15,839
questions for the speaker

466
00:17:16,799 --> 00:17:19,119
thanks a lot for the nice talk um

467
00:17:19,119 --> 00:17:21,199
so you talked about these losses

468
00:17:21,199 --> 00:17:23,199
basically this loss which has a power

469
00:17:23,199 --> 00:17:25,679
equal to the number of the caps queries

470
00:17:25,679 --> 00:17:27,520
for the second transform

471
00:17:27,520 --> 00:17:28,240
right

472
00:17:28,240 --> 00:17:30,240
so which one

473
00:17:30,240 --> 00:17:32,720
for the second transform you had a power

474
00:17:32,720 --> 00:17:34,480
like a number of random oracle queries

475
00:17:34,480 --> 00:17:36,640
to the power q which is the number of uh

476
00:17:36,640 --> 00:17:38,160
cc inquiries yes

477
00:17:38,160 --> 00:17:39,440
um

478
00:17:39,440 --> 00:17:42,400
do you have any idea whether this is an

479
00:17:42,400 --> 00:17:44,960
artifact or is it is it known

480
00:17:44,960 --> 00:17:46,880
in the classical setting whether this is

481
00:17:46,880 --> 00:17:48,799
an artifact of the proof or are the

482
00:17:48,799 --> 00:17:51,679
attacks that exploit this this looseness

483
00:17:51,679 --> 00:17:53,360
so i think like in uh

484
00:17:53,360 --> 00:17:55,679
for like transform proofs

485
00:17:55,679 --> 00:17:58,960
you always have at least a factor q qh

486
00:17:58,960 --> 00:18:01,840
or qh plus something

487
00:18:01,840 --> 00:18:06,080
because we use one wayness of the cpa

488
00:18:06,080 --> 00:18:07,760
and at some point when we're in the

489
00:18:07,760 --> 00:18:10,240
reduction we will need to make a guess

490
00:18:10,240 --> 00:18:12,400
of which queries to the random oracle

491
00:18:12,400 --> 00:18:14,720
was the correct one and overall we've

492
00:18:14,720 --> 00:18:16,799
got a correct problem probability with

493
00:18:16,799 --> 00:18:20,400
one over q h or which plus one something

494
00:18:20,400 --> 00:18:22,320
so we will have always this uh i guess

495
00:18:22,320 --> 00:18:25,200
at least one of the qh plus one factor

496
00:18:25,200 --> 00:18:26,480
uh here

497
00:18:26,480 --> 00:18:28,160
i'm not sure about the second one if we

498
00:18:28,160 --> 00:18:30,160
really need like a square this is an

499
00:18:30,160 --> 00:18:31,600
artifact of the proof or not but at

500
00:18:31,600 --> 00:18:33,039
least one

501
00:18:33,039 --> 00:18:38,240
factor qh yes i think okay yeah thanks

502
00:18:38,640 --> 00:18:41,960
other questions

503
00:18:48,400 --> 00:18:50,160
hi thanks for nice talk so it's sort of

504
00:18:50,160 --> 00:18:52,640
a follow-up question but if you let

505
00:18:52,640 --> 00:18:53,520
the

506
00:18:53,520 --> 00:18:57,360
pke security notion on the right remain

507
00:18:57,360 --> 00:19:01,039
one-way pca does the bound get tighter

508
00:19:01,039 --> 00:19:02,960
so if it's a one-way pc yes you don't

509
00:19:02,960 --> 00:19:04,400
get the

510
00:19:04,400 --> 00:19:07,280
q the exponential q factor actually

511
00:19:07,280 --> 00:19:10,840
okay thank you

512
00:19:13,280 --> 00:19:14,799
okay let's thank the speaker again and

513
00:19:14,799 --> 00:19:18,440
continue with the next

