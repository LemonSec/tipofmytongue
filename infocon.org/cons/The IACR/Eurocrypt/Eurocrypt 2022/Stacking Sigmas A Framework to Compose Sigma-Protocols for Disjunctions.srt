1
00:00:09,200 --> 00:00:12,440
what's up

2
00:00:25,840 --> 00:00:27,119
okay

3
00:00:27,119 --> 00:00:28,160
next

4
00:00:28,160 --> 00:00:30,160
mathias is going to present stacking

5
00:00:30,160 --> 00:00:32,558
sigmas a framework to compose sigma

6
00:00:32,558 --> 00:00:34,320
protocol for this junction

7
00:00:34,320 --> 00:00:36,640
john work with uh

8
00:00:36,640 --> 00:00:38,960
methi green mathias himself and gabe

9
00:00:38,960 --> 00:00:41,440
captured mathias yes

10
00:00:41,440 --> 00:00:42,960
so i'm going to present second sequence

11
00:00:42,960 --> 00:00:44,800
so i can sound it so first i'm going to

12
00:00:44,800 --> 00:00:48,719
be a bit of an introduction so like the

13
00:00:48,719 --> 00:00:50,559
the notation for the sigma protocol and

14
00:00:50,559 --> 00:00:51,920
some prior works and where where

15
00:00:51,920 --> 00:00:53,199
everything fits in

16
00:00:53,199 --> 00:00:54,960
then i'm going to introduce stackable

17
00:00:54,960 --> 00:00:56,399
sigma protocols

18
00:00:56,399 --> 00:00:58,320
which is the property that we need in

19
00:00:58,320 --> 00:00:59,920
order to be able to prove

20
00:00:59,920 --> 00:01:01,920
space-saving disjunctions i'm going to

21
00:01:01,920 --> 00:01:03,760
give a primitive

22
00:01:03,760 --> 00:01:05,840
called partially bind commit

23
00:01:05,840 --> 00:01:08,000
partially binding commitments

24
00:01:08,000 --> 00:01:09,600
and then i'm going to be able to present

25
00:01:09,600 --> 00:01:11,360
our compiler

26
00:01:11,360 --> 00:01:13,280
then i'm going to talk about

27
00:01:13,280 --> 00:01:14,880
how do we get a logarithmic

28
00:01:14,880 --> 00:01:17,200
communication while recursively applying

29
00:01:17,200 --> 00:01:19,680
the compiler over and over again

30
00:01:19,680 --> 00:01:21,600
and then finally some some wrapping up

31
00:01:21,600 --> 00:01:23,520
so let's get started

32
00:01:23,520 --> 00:01:26,640
so a sigma protocol it's a three-run

33
00:01:26,640 --> 00:01:28,400
protocol that consists of a tuple of

34
00:01:28,400 --> 00:01:30,079
algorithms a

35
00:01:30,079 --> 00:01:31,920
set and five

36
00:01:31,920 --> 00:01:33,680
such that you know the brewer starts by

37
00:01:33,680 --> 00:01:35,280
generating the the first-time message

38
00:01:35,280 --> 00:01:37,200
the commitment uh using the statement

39
00:01:37,200 --> 00:01:39,200
the witness and some random type

40
00:01:39,200 --> 00:01:41,600
sends this to the verify the verifier

41
00:01:41,600 --> 00:01:43,280
samples the uniformly random challenge

42
00:01:43,280 --> 00:01:45,200
sends this to the approver

43
00:01:45,200 --> 00:01:46,880
and then the approver finishes the

44
00:01:46,880 --> 00:01:48,960
transcript by generating the last round

45
00:01:48,960 --> 00:01:51,200
message using the witness again and then

46
00:01:51,200 --> 00:01:52,479
this challenge

47
00:01:52,479 --> 00:01:54,479
and the i can check that

48
00:01:54,479 --> 00:01:58,240
that the transcript accepts using phi

49
00:01:58,479 --> 00:02:00,320
so what's the goal of this talk the goal

50
00:02:00,320 --> 00:02:02,479
of this talk is to have zero knowledge

51
00:02:02,479 --> 00:02:04,640
proofs for disjunctive statements

52
00:02:04,640 --> 00:02:06,159
so uh

53
00:02:06,159 --> 00:02:07,280
where you

54
00:02:07,280 --> 00:02:08,399
may you want to prove that the first

55
00:02:08,399 --> 00:02:10,080
statement is in the first language or

56
00:02:10,080 --> 00:02:11,280
the second segment in the second

57
00:02:11,280 --> 00:02:13,360
language and so on to statement l and

58
00:02:13,360 --> 00:02:14,879
language l

59
00:02:14,879 --> 00:02:16,959
and what we would like is that if

60
00:02:16,959 --> 00:02:18,720
proving a

61
00:02:18,720 --> 00:02:21,120
statement is in some language using a

62
00:02:21,120 --> 00:02:24,480
protocol pi requires some cc of fi

63
00:02:24,480 --> 00:02:27,360
then we would like to derive a

64
00:02:27,360 --> 00:02:29,360
protocol for the disjunction over the

65
00:02:29,360 --> 00:02:31,200
disjunctive relation uh where the

66
00:02:31,200 --> 00:02:33,360
communication of the disjunctive of this

67
00:02:33,360 --> 00:02:35,760
disjunctive protocol is

68
00:02:35,760 --> 00:02:36,720
significantly less than the

69
00:02:36,720 --> 00:02:39,599
concatenation of the transcripts

70
00:02:39,599 --> 00:02:41,519
um what's our applications of this

71
00:02:41,519 --> 00:02:43,360
applications include ring signatures

72
00:02:43,360 --> 00:02:45,120
managing communication and

73
00:02:45,120 --> 00:02:45,920
and

74
00:02:45,920 --> 00:02:47,599
witness interesting availability from

75
00:02:47,599 --> 00:02:50,400
honest like zero knowledge

76
00:02:50,400 --> 00:02:52,560
okay so so in prior work there's been a

77
00:02:52,560 --> 00:02:54,720
bunch of prior work on like uh

78
00:02:54,720 --> 00:02:56,560
doing disjunctions of sigma protocols

79
00:02:56,560 --> 00:02:57,760
there's junction space waving

80
00:02:57,760 --> 00:02:59,120
disjunctions of

81
00:02:59,120 --> 00:03:00,800
of other protocols

82
00:03:00,800 --> 00:03:03,280
um but generally they sort of fall into

83
00:03:03,280 --> 00:03:04,959
two categories either you have some

84
00:03:04,959 --> 00:03:07,920
generic compilers for sigma protocols

85
00:03:07,920 --> 00:03:09,200
uh and and

86
00:03:09,200 --> 00:03:10,480
then the communication is just a

87
00:03:10,480 --> 00:03:12,720
concatenation of all the transcripts

88
00:03:12,720 --> 00:03:14,640
or you can get like communication saving

89
00:03:14,640 --> 00:03:16,840
but for a particularly

90
00:03:16,840 --> 00:03:18,720
constructed

91
00:03:18,720 --> 00:03:20,800
protocol so then you deliberately design

92
00:03:20,800 --> 00:03:23,840
a protocol to to get this space saving

93
00:03:23,840 --> 00:03:25,760
and this work for the falls somewhere in

94
00:03:25,760 --> 00:03:29,120
between them in between the two

95
00:03:29,120 --> 00:03:32,080
so what we do is we get space-saving

96
00:03:32,080 --> 00:03:33,519
disjunctions for large class of sigma

97
00:03:33,519 --> 00:03:35,920
verticals not all sigma protocols

98
00:03:35,920 --> 00:03:37,519
uh where the communication is

99
00:03:37,519 --> 00:03:40,000
logarithmic in the number of clauses

100
00:03:40,000 --> 00:03:42,640
uh furthermore our compiler conserves

101
00:03:42,640 --> 00:03:45,519
the concrete efficiency so it's

102
00:03:45,519 --> 00:03:46,879
it's like it's real world so you can you

103
00:03:46,879 --> 00:03:48,400
can use it

104
00:03:48,400 --> 00:03:50,879
um note that we can't do this for all

105
00:03:50,879 --> 00:03:52,480
segment protocols because we can't use

106
00:03:52,480 --> 00:03:53,760
the

107
00:03:53,760 --> 00:03:55,280
the definition of a sigma protocol black

108
00:03:55,280 --> 00:03:57,760
box but however it applies for a very

109
00:03:57,760 --> 00:03:59,760
very wide class of sigma protocols uh

110
00:03:59,760 --> 00:04:01,439
here's just like a small handful of them

111
00:04:01,439 --> 00:04:03,840
so like if it's like of the form of uh

112
00:04:03,840 --> 00:04:05,280
like proving pre-images of like

113
00:04:05,280 --> 00:04:07,120
homomorphism using these classic

114
00:04:07,120 --> 00:04:08,720
protocols

115
00:04:08,720 --> 00:04:10,239
if it's like npc in the heads then you

116
00:04:10,239 --> 00:04:11,920
could probably also do it

117
00:04:11,920 --> 00:04:12,799
um

118
00:04:12,799 --> 00:04:14,480
and it also includes like the classical

119
00:04:14,480 --> 00:04:16,880
protocols like uh for graph harmonicity

120
00:04:16,880 --> 00:04:18,798
and others so it relies on like no

121
00:04:18,798 --> 00:04:23,120
algebraic structure of of the language

122
00:04:23,120 --> 00:04:26,080
uh and so which which sigma rules

123
00:04:26,080 --> 00:04:28,479
protocols does it apply to so in order

124
00:04:28,479 --> 00:04:30,240
to build some intuition let's start with

125
00:04:30,240 --> 00:04:32,800
this uh with this uh with the sigma for

126
00:04:32,800 --> 00:04:34,720
the call for proving like one way uh

127
00:04:34,720 --> 00:04:37,199
three images of a one-way homomorphism

128
00:04:37,199 --> 00:04:38,320
uh

129
00:04:38,320 --> 00:04:40,000
so

130
00:04:40,000 --> 00:04:41,919
in this protocol of which you know sure

131
00:04:41,919 --> 00:04:45,040
snore is an instance the approval starts

132
00:04:45,040 --> 00:04:47,040
by sampling a random element of the

133
00:04:47,040 --> 00:04:49,280
domain he then applies the homomorphism

134
00:04:49,280 --> 00:04:51,440
sends the image to the verifier the

135
00:04:51,440 --> 00:04:54,080
verifier samples the challenge and the

136
00:04:54,080 --> 00:04:57,280
prover computes this linear combination

137
00:04:57,280 --> 00:04:58,479
in the

138
00:04:58,479 --> 00:04:59,759
in

139
00:04:59,759 --> 00:05:02,080
on the pre-image side and sends this

140
00:05:02,080 --> 00:05:03,280
random

141
00:05:03,280 --> 00:05:05,120
pre-image to the to the verifier but

142
00:05:05,120 --> 00:05:06,880
then applies the homomorphism to verify

143
00:05:06,880 --> 00:05:10,479
that it's a valid pre-image

144
00:05:10,479 --> 00:05:11,919
okay so how do you

145
00:05:11,919 --> 00:05:14,880
how do you simulate such a protocol

146
00:05:14,880 --> 00:05:16,960
uh so the simulator if you gave this

147
00:05:16,960 --> 00:05:18,240
like a student and asked him to write a

148
00:05:18,240 --> 00:05:20,240
simulator uh

149
00:05:20,240 --> 00:05:22,240
you know like it works you sample a

150
00:05:22,240 --> 00:05:23,280
third round

151
00:05:23,280 --> 00:05:25,360
message independently of set and

152
00:05:25,360 --> 00:05:26,240
pendulum

153
00:05:26,240 --> 00:05:27,520
of x sorry and the ability of the

154
00:05:27,520 --> 00:05:30,479
statement which sample a a random

155
00:05:30,479 --> 00:05:32,400
thing from the domain

156
00:05:32,400 --> 00:05:33,919
and then you compute

157
00:05:33,919 --> 00:05:35,680
the accepting commitment

158
00:05:35,680 --> 00:05:37,039
for this last form message given the

159
00:05:37,039 --> 00:05:38,960
challenge

160
00:05:38,960 --> 00:05:40,560
and so the observation that we make in

161
00:05:40,560 --> 00:05:42,400
this paper is that in many sigma

162
00:05:42,400 --> 00:05:47,120
protocols uh simulation works similarly

163
00:05:47,120 --> 00:05:48,880
namely you sample some like third round

164
00:05:48,880 --> 00:05:50,080
message

165
00:05:50,080 --> 00:05:51,600
from a distribution which may depend on

166
00:05:51,600 --> 00:05:53,280
the challenge but doesn't depend on on

167
00:05:53,280 --> 00:05:55,759
the statement or perhaps depends on some

168
00:05:55,759 --> 00:05:57,360
like notion of size for the statement

169
00:05:57,360 --> 00:05:59,360
but not the particular statement

170
00:05:59,360 --> 00:06:00,400
and then

171
00:06:00,400 --> 00:06:01,919
for a particular statement you can then

172
00:06:01,919 --> 00:06:03,919
finish the transcript you can compute

173
00:06:03,919 --> 00:06:05,600
the commitment that makes it accepting

174
00:06:05,600 --> 00:06:07,280
for c

175
00:06:07,280 --> 00:06:08,240
so

176
00:06:08,240 --> 00:06:10,400
for instance one example is in many mbc

177
00:06:10,400 --> 00:06:12,160
in the head protocols

178
00:06:12,160 --> 00:06:14,319
the view of the open parties which is

179
00:06:14,319 --> 00:06:17,039
the final set

180
00:06:17,440 --> 00:06:19,520
can can often just be seen as like a

181
00:06:19,520 --> 00:06:21,600
string of like uniformly random ring

182
00:06:21,600 --> 00:06:22,960
elements like it's a communication from

183
00:06:22,960 --> 00:06:24,880
the other parties it's just

184
00:06:24,880 --> 00:06:28,000
usually just uniformly random

185
00:06:28,000 --> 00:06:31,039
okay so let's formalize this slightly

186
00:06:31,039 --> 00:06:32,720
so we say that a sigma protocol is

187
00:06:32,720 --> 00:06:34,720
recyclable or has recyclable third r

188
00:06:34,720 --> 00:06:35,840
messages

189
00:06:35,840 --> 00:06:38,240
if the distribution of the last round

190
00:06:38,240 --> 00:06:39,199
message

191
00:06:39,199 --> 00:06:41,199
does not depend on the statement it can

192
00:06:41,199 --> 00:06:42,319
depend on the challenge but not the

193
00:06:42,319 --> 00:06:44,720
statement

194
00:06:45,360 --> 00:06:48,240
for the second property we say that a

195
00:06:48,240 --> 00:06:49,840
sigma protocol is extended on this

196
00:06:49,840 --> 00:06:52,160
verifier zero knowledge

197
00:06:52,160 --> 00:06:54,319
if when i give you a statement

198
00:06:54,319 --> 00:06:56,000
and a challenge c

199
00:06:56,000 --> 00:06:56,960
and

200
00:06:56,960 --> 00:06:58,880
a last round message right so this is

201
00:06:58,880 --> 00:07:01,599
the this is where it deviates for the

202
00:07:01,599 --> 00:07:02,880
normal definition of special honest

203
00:07:02,880 --> 00:07:04,720
verifies there in launch

204
00:07:04,720 --> 00:07:06,319
if i also give you a random

205
00:07:06,319 --> 00:07:08,000
that's our message you can

206
00:07:08,000 --> 00:07:10,800
deterministically compute a first round

207
00:07:10,800 --> 00:07:12,240
message that makes the transcript

208
00:07:12,240 --> 00:07:14,720
accepting

209
00:07:14,800 --> 00:07:16,880
we say that if if both are satisfied we

210
00:07:16,880 --> 00:07:19,840
call the the protocol stagable

211
00:07:19,840 --> 00:07:23,359
which means that our techniques apply

212
00:07:24,720 --> 00:07:25,680
okay

213
00:07:25,680 --> 00:07:27,120
oops

214
00:07:27,120 --> 00:07:29,599
there we go

215
00:07:29,680 --> 00:07:30,639
so

216
00:07:30,639 --> 00:07:32,479
here's uh here's like the overall idea

217
00:07:32,479 --> 00:07:34,080
that doesn't quite work yet

218
00:07:34,080 --> 00:07:36,160
there's some piece missing

219
00:07:36,160 --> 00:07:38,560
but the idea is that when you have this

220
00:07:38,560 --> 00:07:40,639
definition or you have a protocol this

221
00:07:40,639 --> 00:07:42,960
form right suppose that we have a prover

222
00:07:42,960 --> 00:07:44,319
who has a witness and you want to prove

223
00:07:44,319 --> 00:07:45,360
that you know the witness and the first

224
00:07:45,360 --> 00:07:47,039
statement is like in the language

225
00:07:47,039 --> 00:07:48,479
is in the relation or the witness and

226
00:07:48,479 --> 00:07:51,360
the second statement is in the relation

227
00:07:51,360 --> 00:07:53,520
but the idea here is that he proves the

228
00:07:53,520 --> 00:07:56,080
satisfied clause using his witness

229
00:07:56,080 --> 00:07:59,360
he somehow obtains a transcript uh for

230
00:07:59,360 --> 00:08:01,280
for for the satisfied clause

231
00:08:01,280 --> 00:08:02,800
and then he applies the sim extended

232
00:08:02,800 --> 00:08:04,479
simulator for the other clause using the

233
00:08:04,479 --> 00:08:06,800
same last message

234
00:08:06,800 --> 00:08:08,960
so he has you know the same challenge

235
00:08:08,960 --> 00:08:10,319
the same last one message two different

236
00:08:10,319 --> 00:08:12,720
first messages

237
00:08:12,720 --> 00:08:14,080
unfortunately this is sort of a chicken

238
00:08:14,080 --> 00:08:15,599
and egg problem here that that means

239
00:08:15,599 --> 00:08:17,520
that this particular example does not

240
00:08:17,520 --> 00:08:18,560
quite work

241
00:08:18,560 --> 00:08:20,639
um namely that you know the approval

242
00:08:20,639 --> 00:08:22,319
cannot generate the professional message

243
00:08:22,319 --> 00:08:24,639
for a2 because he doesn't have a witness

244
00:08:24,639 --> 00:08:27,360
he needs c to simulate

245
00:08:27,360 --> 00:08:28,960
at the same time he cannot send a1

246
00:08:28,960 --> 00:08:31,039
because that will reveal which clause is

247
00:08:31,039 --> 00:08:32,958
satisfied

248
00:08:32,958 --> 00:08:34,880
and obviously the verify cannot send the

249
00:08:34,880 --> 00:08:36,240
challenge before seeing a1 because

250
00:08:36,240 --> 00:08:38,159
otherwise the brewer could just simulate

251
00:08:38,159 --> 00:08:40,880
both transcripts

252
00:08:40,880 --> 00:08:42,080
in order to

253
00:08:42,080 --> 00:08:43,599
get around this chicken egg problem we

254
00:08:43,599 --> 00:08:44,880
introduced the notion of partially

255
00:08:44,880 --> 00:08:47,680
binding commitments

256
00:08:47,760 --> 00:08:48,560
so

257
00:08:48,560 --> 00:08:50,720
this is a commitment scheme

258
00:08:50,720 --> 00:08:52,240
in which we can have a committer which

259
00:08:52,240 --> 00:08:54,959
is going to be the approver

260
00:08:54,959 --> 00:08:56,959
can commit to two tuples

261
00:08:56,959 --> 00:08:59,120
and some index i

262
00:08:59,120 --> 00:09:01,600
in such a way that the prover can later

263
00:09:01,600 --> 00:09:05,040
equivocate at the position that is not i

264
00:09:05,040 --> 00:09:06,720
but not in the i position so you can

265
00:09:06,720 --> 00:09:08,560
equivocate for instance if if i is one

266
00:09:08,560 --> 00:09:12,000
he can equivocate on in v1 but not on v2

267
00:09:12,000 --> 00:09:13,440
so you can equivocate on one of the two

268
00:09:13,440 --> 00:09:15,920
positions

269
00:09:16,240 --> 00:09:18,320
the the observation here is the the

270
00:09:18,320 --> 00:09:19,680
crucial thing here is that when the

271
00:09:19,680 --> 00:09:21,120
approver eventually or when the

272
00:09:21,120 --> 00:09:22,240
committer eventually opens this

273
00:09:22,240 --> 00:09:24,160
commitment the verifier does not learn

274
00:09:24,160 --> 00:09:27,439
which position was binding

275
00:09:27,519 --> 00:09:29,360
this intuitively will enable the

276
00:09:29,360 --> 00:09:30,959
approver to send one of the first two

277
00:09:30,959 --> 00:09:32,320
round messages right because he's going

278
00:09:32,320 --> 00:09:33,760
to commit to one of them where he

279
00:09:33,760 --> 00:09:35,040
doesn't know which one

280
00:09:35,040 --> 00:09:36,320
oh but the verifier will never know

281
00:09:36,320 --> 00:09:38,560
which one

282
00:09:38,560 --> 00:09:40,240
and now i would like to give you a very

283
00:09:40,240 --> 00:09:42,320
very simple construction

284
00:09:42,320 --> 00:09:43,920
so the construction that i'm going to

285
00:09:43,920 --> 00:09:45,760
give here is just from comparison

286
00:09:45,760 --> 00:09:46,800
commitments

287
00:09:46,800 --> 00:09:48,720
so in this case you know you have some

288
00:09:48,720 --> 00:09:50,480
setup that's like two generators you

289
00:09:50,480 --> 00:09:53,040
don't know the discrete log between them

290
00:09:53,040 --> 00:09:53,920
um

291
00:09:53,920 --> 00:09:56,560
i'm gonna generate a commitment key and

292
00:09:56,560 --> 00:09:58,080
an equivocation key so commitment key is

293
00:09:58,080 --> 00:09:59,519
just whatever you're gonna use to submit

294
00:09:59,519 --> 00:10:00,800
and qualification will enable

295
00:10:00,800 --> 00:10:02,480
equivocating in one of the exactly one

296
00:10:02,480 --> 00:10:05,040
of the two positions uh you're going to

297
00:10:05,040 --> 00:10:06,320
generate this by selecting the

298
00:10:06,320 --> 00:10:08,079
equivocation key it's just a random

299
00:10:08,079 --> 00:10:10,240
trapdoor right so it's a

300
00:10:10,240 --> 00:10:11,360
scalar

301
00:10:11,360 --> 00:10:13,279
and you're going to form

302
00:10:13,279 --> 00:10:14,320
this h

303
00:10:14,320 --> 00:10:16,320
for the other position so if i is one

304
00:10:16,320 --> 00:10:17,760
this is like h2 you're going to set that

305
00:10:17,760 --> 00:10:19,040
to g2

306
00:10:19,040 --> 00:10:20,399
your trapdoor

307
00:10:20,399 --> 00:10:21,360
and then you're going to pick you know

308
00:10:21,360 --> 00:10:25,360
h1 so i said when i multiply g2 to

309
00:10:25,360 --> 00:10:26,880
g2 and in

310
00:10:26,880 --> 00:10:30,160
h1 and h2 i get h

311
00:10:30,160 --> 00:10:31,279
and then the commitment key is just

312
00:10:31,279 --> 00:10:33,360
going to be you know h1

313
00:10:33,360 --> 00:10:35,200
then in order to commit

314
00:10:35,200 --> 00:10:37,440
i'm simply going to compute uh h2 from

315
00:10:37,440 --> 00:10:40,160
from h what was given in the setup

316
00:10:40,160 --> 00:10:43,279
and an h1

317
00:10:43,279 --> 00:10:44,399
and then

318
00:10:44,399 --> 00:10:45,839
i'm just going to commit using two

319
00:10:45,839 --> 00:10:47,279
individual pattern commandments so we're

320
00:10:47,279 --> 00:10:49,600
going to form the final commitment as a

321
00:10:49,600 --> 00:10:53,279
g2 or some randomness h1 to v1 g2 some

322
00:10:53,279 --> 00:10:55,839
other randomness h2 to v2

323
00:10:55,839 --> 00:10:58,160
how do you equate well you equivocate

324
00:10:58,160 --> 00:10:59,600
like you normally would for pedestrian

325
00:10:59,600 --> 00:11:01,360
commitment so that's like one of you can

326
00:11:01,360 --> 00:11:02,800
definitely change you know the equipment

327
00:11:02,800 --> 00:11:04,079
position

328
00:11:04,079 --> 00:11:05,519
it's also not hard to see that if you

329
00:11:05,519 --> 00:11:07,839
can equivocate in both positions

330
00:11:07,839 --> 00:11:08,880
uh

331
00:11:08,880 --> 00:11:10,880
using the standard like

332
00:11:10,880 --> 00:11:12,640
the way that you normally

333
00:11:12,640 --> 00:11:13,839
reduce the binding of medicine

334
00:11:13,839 --> 00:11:15,680
commitments you will get the discrete

335
00:11:15,680 --> 00:11:19,360
log of both h1 and h2 and g and then

336
00:11:19,360 --> 00:11:20,880
by the relation between the two you'll

337
00:11:20,880 --> 00:11:23,839
get the discrete log of h

338
00:11:23,839 --> 00:11:25,519
okay

339
00:11:25,519 --> 00:11:28,320
so now with this with this uh very

340
00:11:28,320 --> 00:11:29,920
simple tool

341
00:11:29,920 --> 00:11:32,000
the the new idea is you know the the

342
00:11:32,000 --> 00:11:33,279
proverb is going to

343
00:11:33,279 --> 00:11:35,279
uh generate the first round message he's

344
00:11:35,279 --> 00:11:37,040
going to generate an equivocation key

345
00:11:37,040 --> 00:11:38,720
that is binding in the position where he

346
00:11:38,720 --> 00:11:40,399
actually has a as a witness for the

347
00:11:40,399 --> 00:11:42,399
clause that he has witness for

348
00:11:42,399 --> 00:11:43,519
then he's going to send the commitment

349
00:11:43,519 --> 00:11:44,800
key and this and a commitment to the

350
00:11:44,800 --> 00:11:47,040
first round message and some garbage in

351
00:11:47,040 --> 00:11:49,120
in the other position

352
00:11:49,120 --> 00:11:51,519
and then the verifiers can send the

353
00:11:51,519 --> 00:11:53,279
challenge to the approver the approver

354
00:11:53,279 --> 00:11:55,040
can then finish the transcript for which

355
00:11:55,040 --> 00:11:57,200
he actually has a witness

356
00:11:57,200 --> 00:11:58,480
and then he can simulate the other

357
00:11:58,480 --> 00:11:59,920
transcript

358
00:11:59,920 --> 00:12:01,920
using the challenge and then finally he

359
00:12:01,920 --> 00:12:03,920
can equivocate such that he opens it to

360
00:12:03,920 --> 00:12:05,760
the tuple of the two first round

361
00:12:05,760 --> 00:12:07,279
messages

362
00:12:07,279 --> 00:12:10,160
okay slightly more detail right so at

363
00:12:10,160 --> 00:12:12,240
the prover he generates a quick

364
00:12:12,240 --> 00:12:14,480
commitment key and equivocation key for

365
00:12:14,480 --> 00:12:17,360
i equal one in the case this is the

366
00:12:17,360 --> 00:12:19,440
clause for which he has a witness

367
00:12:19,440 --> 00:12:21,680
um then he generates the first message

368
00:12:21,680 --> 00:12:23,519
he sends over commitment he gets a

369
00:12:23,519 --> 00:12:24,880
challenge

370
00:12:24,880 --> 00:12:28,240
he runs set to get the the final uh

371
00:12:28,240 --> 00:12:30,880
message of the of the of the first uh

372
00:12:30,880 --> 00:12:32,160
transcript

373
00:12:32,160 --> 00:12:34,079
then he simulates the second transcript

374
00:12:34,079 --> 00:12:36,320
and he equivocates uh using the

375
00:12:36,320 --> 00:12:37,760
randomness of the original commitment

376
00:12:37,760 --> 00:12:38,880
and

377
00:12:38,880 --> 00:12:42,079
his newly simulated restaurant message

378
00:12:42,079 --> 00:12:44,639
and he sends over the last round message

379
00:12:44,639 --> 00:12:46,560
the random and and the and the

380
00:12:46,560 --> 00:12:48,560
randomness after quotation

381
00:12:48,560 --> 00:12:50,480
and the verifier can regenerate you know

382
00:12:50,480 --> 00:12:51,839
the first two round messages and you can

383
00:12:51,839 --> 00:12:53,440
check that it matches the opening of the

384
00:12:53,440 --> 00:12:55,920
commitment

385
00:12:56,079 --> 00:12:58,000
okay so at this point we have a not

386
00:12:58,000 --> 00:12:59,839
super exciting compiler that you know

387
00:12:59,839 --> 00:13:01,200
takes

388
00:13:01,200 --> 00:13:03,200
a a signal for a call that would have

389
00:13:03,200 --> 00:13:05,120
had two last round messages and it gives

390
00:13:05,120 --> 00:13:07,120
you a sigma vertical that has one f1

391
00:13:07,120 --> 00:13:09,120
messages one manifold message like

392
00:13:09,120 --> 00:13:10,639
compared to cds

393
00:13:10,639 --> 00:13:12,880
but what's the trick now right so the

394
00:13:12,880 --> 00:13:14,959
trick here is that it this compiler

395
00:13:14,959 --> 00:13:17,200
takes a stackable sigma protocol

396
00:13:17,200 --> 00:13:18,880
for language with some communication

397
00:13:18,880 --> 00:13:20,800
complexity cc of pi

398
00:13:20,800 --> 00:13:22,480
and it gives you a stackable sigma

399
00:13:22,480 --> 00:13:23,920
protocol

400
00:13:23,920 --> 00:13:26,399
uh for the language of disjunctions so

401
00:13:26,399 --> 00:13:29,600
x1 is an l or x2

402
00:13:30,000 --> 00:13:31,519
where the communication overhead is

403
00:13:31,519 --> 00:13:33,600
essentially just that of the partially

404
00:13:33,600 --> 00:13:36,560
binding commitment scheme

405
00:13:36,959 --> 00:13:38,639
now the trick here is that say i have a

406
00:13:38,639 --> 00:13:42,160
i have a disjunction of four clauses

407
00:13:43,680 --> 00:13:46,000
if i have a disjunction of four clauses

408
00:13:46,000 --> 00:13:48,000
i can mute it as a disjunction of

409
00:13:48,000 --> 00:13:50,560
disjunctions of two clauses

410
00:13:50,560 --> 00:13:53,199
and i already have a sigma protocol for

411
00:13:53,199 --> 00:13:55,040
this junction of

412
00:13:55,040 --> 00:13:57,120
of our two disjunction

413
00:13:57,120 --> 00:13:58,639
so what i can do is i can simply take

414
00:13:58,639 --> 00:14:00,720
the protocol that i was given i can take

415
00:14:00,720 --> 00:14:03,440
pi prime and i could stack it again

416
00:14:03,440 --> 00:14:05,120
so i simply feed it into the into the

417
00:14:05,120 --> 00:14:07,040
into the compiler again the second time

418
00:14:07,040 --> 00:14:08,320
it comes out of the compiler right i'm

419
00:14:08,320 --> 00:14:09,839
gonna have you know cc of the original

420
00:14:09,839 --> 00:14:12,800
pi plus two times the overhead of the

421
00:14:12,800 --> 00:14:15,279
partially binding commitment scheme

422
00:14:15,279 --> 00:14:16,560
so in general i'm going to end up with

423
00:14:16,560 --> 00:14:18,720
like log 2 of

424
00:14:18,720 --> 00:14:20,959
l times some some small constant times

425
00:14:20,959 --> 00:14:23,360
secured parameter plus the

426
00:14:23,360 --> 00:14:25,680
communication complexity of the original

427
00:14:25,680 --> 00:14:28,680
protocol

428
00:14:31,279 --> 00:14:34,240
lastly before i wrap up

429
00:14:34,240 --> 00:14:36,240
i would like to describe a slight

430
00:14:36,240 --> 00:14:37,600
generalization

431
00:14:37,600 --> 00:14:38,959
so it turns out that you can generalize

432
00:14:38,959 --> 00:14:42,480
this to distinct protocols as long as

433
00:14:42,480 --> 00:14:43,839
they share the same distribution over

434
00:14:43,839 --> 00:14:44,880
last round messages or it's

435
00:14:44,880 --> 00:14:46,480
indistinguishable

436
00:14:46,480 --> 00:14:47,760
or in the case where you can sort of

437
00:14:47,760 --> 00:14:50,000
trivially convert one into the other by

438
00:14:50,000 --> 00:14:52,240
like packing or padding the last one

439
00:14:52,240 --> 00:14:54,639
message

440
00:14:55,760 --> 00:14:58,639
so how does this work like informally

441
00:14:58,639 --> 00:15:00,959
you simply finish the transcript for for

442
00:15:00,959 --> 00:15:02,560
for the protocol execution that you you

443
00:15:02,560 --> 00:15:03,920
do have a witness for you obtain the

444
00:15:03,920 --> 00:15:05,519
transcript as before and then you

445
00:15:05,519 --> 00:15:07,519
simulate using the same set

446
00:15:07,519 --> 00:15:09,120
so just as in in the case of a single

447
00:15:09,120 --> 00:15:10,880
protocol

448
00:15:10,880 --> 00:15:12,880
so for instance if you have like an

449
00:15:12,880 --> 00:15:14,800
instance of kkw over

450
00:15:14,800 --> 00:15:16,800
uh boolean circuits and you have an

451
00:15:16,800 --> 00:15:18,480
instance of kkw

452
00:15:18,480 --> 00:15:19,839
over a

453
00:15:19,839 --> 00:15:21,199
larger ring

454
00:15:21,199 --> 00:15:22,399
where you know the size of the ring is

455
00:15:22,399 --> 00:15:24,639
like some some power of two

456
00:15:24,639 --> 00:15:26,720
uh then in in both cases you can sort of

457
00:15:26,720 --> 00:15:28,560
view the set as just uh being like a

458
00:15:28,560 --> 00:15:30,160
string of random bits because of the

459
00:15:30,160 --> 00:15:31,600
uniform you're going to feel diamonds

460
00:15:31,600 --> 00:15:32,880
back there must be uniform remaining

461
00:15:32,880 --> 00:15:34,560
bits in this case you can do a

462
00:15:34,560 --> 00:15:36,560
disjunction between two parallel

463
00:15:36,560 --> 00:15:40,599
executions of the protocol

464
00:15:41,040 --> 00:15:43,199
finally i would encourage you to see the

465
00:15:43,199 --> 00:15:45,440
full paper and i would like to say thank

466
00:15:45,440 --> 00:15:49,079
you for your attention

467
00:15:53,190 --> 00:15:56,560
[Applause]

468
00:15:56,560 --> 00:15:57,440
okay

469
00:15:57,440 --> 00:16:00,480
do we have any questions

470
00:16:01,990 --> 00:16:05,039
[Music]

471
00:16:05,759 --> 00:16:07,839
so it's very cool that you get the some

472
00:16:07,839 --> 00:16:10,320
result for protocols like kkw i'm

473
00:16:10,320 --> 00:16:11,600
curious though

474
00:16:11,600 --> 00:16:13,360
can you say anything about

475
00:16:13,360 --> 00:16:15,120
composition in the in the sense that

476
00:16:15,120 --> 00:16:16,560
some parts of the circuit will be

477
00:16:16,560 --> 00:16:19,519
stacked and others will not be stacked

478
00:16:19,519 --> 00:16:21,360
oh um

479
00:16:21,360 --> 00:16:23,519
we we have thought about that but it's

480
00:16:23,519 --> 00:16:25,920
not super super easy why are you

481
00:16:25,920 --> 00:16:28,240
no no not really okay thank you um i

482
00:16:28,240 --> 00:16:29,759
mean you thought about it but that's not

483
00:16:29,759 --> 00:16:33,240
an elegant solution

484
00:16:37,360 --> 00:16:40,079
air question

485
00:16:42,639 --> 00:16:47,160
okay then let's thank the speaker again

486
00:16:49,270 --> 00:16:53,110
[Applause]

487
00:16:53,360 --> 00:16:55,600
the

