1
00:00:00,000 --> 00:00:01,920
talk is about groups

2
00:00:01,920 --> 00:00:03,360
group signatures and more from

3
00:00:03,360 --> 00:00:05,600
misogynies and lattices generic simple

4
00:00:05,600 --> 00:00:06,720
and efficient

5
00:00:06,720 --> 00:00:10,080
it's a work by yifu lai ward uh bulens

6
00:00:10,080 --> 00:00:11,679
samuel dobson

7
00:00:11,679 --> 00:00:15,440
shuichi katsumata frederico pintore and

8
00:00:15,440 --> 00:00:18,720
yufullah is giving the talk

9
00:00:23,439 --> 00:00:24,560
oh okay

10
00:00:24,560 --> 00:00:26,400
hey everyone you fly today i'm going to

11
00:00:26,400 --> 00:00:29,439
pretend that this work with joint war

12
00:00:29,439 --> 00:00:30,400
with

13
00:00:30,400 --> 00:00:33,440
warping samit dobson and swiss katomata

14
00:00:33,440 --> 00:00:36,320
and federico pintory

15
00:00:36,320 --> 00:00:39,600
and firstly we talked about the idea of

16
00:00:39,600 --> 00:00:41,440
group signature skin

17
00:00:41,440 --> 00:00:44,000
intuitively a group signature is a

18
00:00:44,000 --> 00:00:46,079
require any member in the group like a

19
00:00:46,079 --> 00:00:49,680
company or school or a government agent

20
00:00:49,680 --> 00:00:51,600
anyone any member in this school can

21
00:00:51,600 --> 00:00:54,559
sign anonymously for the group on behalf

22
00:00:54,559 --> 00:00:55,600
of the group

23
00:00:55,600 --> 00:00:58,719
but in case of the abuse this anonymity

24
00:00:58,719 --> 00:01:00,719
there is a special identity called group

25
00:01:00,719 --> 00:01:03,680
manager who can open the signature from

26
00:01:03,680 --> 00:01:05,680
the group which means that he can know

27
00:01:05,680 --> 00:01:08,479
who is the signer and provides the proof

28
00:01:08,479 --> 00:01:12,159
to for the opening result

29
00:01:12,159 --> 00:01:14,479
and there's three following requirements

30
00:01:14,479 --> 00:01:16,880
for for the group signature the first

31
00:01:16,880 --> 00:01:19,360
one is anonymity of course given a

32
00:01:19,360 --> 00:01:21,200
signature from any two people to

33
00:01:21,200 --> 00:01:24,320
somebody adversary it is possible to

34
00:01:24,320 --> 00:01:26,880
tell from which of the two and if the

35
00:01:26,880 --> 00:01:30,079
adversary has access to the

36
00:01:30,079 --> 00:01:31,600
opening oral code

37
00:01:31,600 --> 00:01:33,439
then it is called ccl anonymity

38
00:01:33,439 --> 00:01:36,000
otherwise it's called cpn rmt is quite

39
00:01:36,000 --> 00:01:39,119
similar to the public key encryption

40
00:01:39,119 --> 00:01:41,759
and the other one is unfoldability any

41
00:01:41,759 --> 00:01:43,360
colluding members

42
00:01:43,360 --> 00:01:44,399
we

43
00:01:44,399 --> 00:01:46,479
can afford your signature not trace into

44
00:01:46,479 --> 00:01:48,640
any one of them

45
00:01:48,640 --> 00:01:52,000
so if the opener is also corrupt then it

46
00:01:52,000 --> 00:01:54,960
is called for an unfoldability otherwise

47
00:01:54,960 --> 00:01:57,680
it's just called unforgivability

48
00:01:57,680 --> 00:01:59,840
and the last one is traceability

49
00:01:59,840 --> 00:02:01,439
a fairly significant choice to be able

50
00:02:01,439 --> 00:02:02,880
to open to

51
00:02:02,880 --> 00:02:04,960
one and only one user in the group it

52
00:02:04,960 --> 00:02:09,280
cannot be opened to more than two users

53
00:02:09,280 --> 00:02:11,520
so we also give a brief history of

54
00:02:11,520 --> 00:02:14,160
google signatures is firstly proposed by

55
00:02:14,160 --> 00:02:17,360
chong fang hayes and by using isa and

56
00:02:17,360 --> 00:02:18,959
gop assumptions

57
00:02:18,959 --> 00:02:21,280
and it's later the security knowledge is

58
00:02:21,280 --> 00:02:23,200
later formalized in these two works

59
00:02:23,200 --> 00:02:26,400
profile with framework using verifiable

60
00:02:26,400 --> 00:02:30,720
and dc say pke and use signature scheme

61
00:02:30,720 --> 00:02:34,400
based on trapdoor permutation functions

62
00:02:34,400 --> 00:02:36,000
and it is so called the site and

63
00:02:36,000 --> 00:02:37,599
increased paradigm

64
00:02:37,599 --> 00:02:39,519
and there has been a lot of applications

65
00:02:39,519 --> 00:02:41,519
and real world different deployments by

66
00:02:41,519 --> 00:02:42,480
using

67
00:02:42,480 --> 00:02:44,879
group signatures like the direct

68
00:02:44,879 --> 00:02:46,879
anonymous attack station in his private

69
00:02:46,879 --> 00:02:49,200
cid and a

70
00:02:49,200 --> 00:02:51,840
variety of applications in blockchain

71
00:02:51,840 --> 00:02:53,920
and cryptocurrency studies

72
00:02:53,920 --> 00:02:56,080
and there has been a lot of

73
00:02:56,080 --> 00:02:59,519
post content proposals after 2010

74
00:02:59,519 --> 00:03:00,720
mainly

75
00:03:00,720 --> 00:03:03,360
done by latest instance and recently

76
00:03:03,360 --> 00:03:05,519
several proposals has achieved a

77
00:03:05,519 --> 00:03:08,400
logarithmic property where the signature

78
00:03:08,400 --> 00:03:10,319
size is logarithmic in the number of

79
00:03:10,319 --> 00:03:12,480
member which means that

80
00:03:12,480 --> 00:03:14,080
even though your group is very very

81
00:03:14,080 --> 00:03:16,560
large your signature size still can be

82
00:03:16,560 --> 00:03:19,599
very compact but most of them are latest

83
00:03:19,599 --> 00:03:21,200
instances and they use some new

84
00:03:21,200 --> 00:03:24,400
technique from latest cryptography so of

85
00:03:24,400 --> 00:03:26,400
course this kind of technique cannot be

86
00:03:26,400 --> 00:03:28,560
applied to like say exogenous

87
00:03:28,560 --> 00:03:30,080
cryptography

88
00:03:30,080 --> 00:03:32,239
so can we have an isotonic group

89
00:03:32,239 --> 00:03:34,319
signature skin that is competitive

90
00:03:34,319 --> 00:03:36,560
enough among other post quantum

91
00:03:36,560 --> 00:03:38,400
proposals

92
00:03:38,400 --> 00:03:40,159
the answer is of course yes that's why

93
00:03:40,159 --> 00:03:41,200
i'm here

94
00:03:41,200 --> 00:03:43,920
the standard but what's the difficulty

95
00:03:43,920 --> 00:03:45,680
is that the standard and encrypt

96
00:03:45,680 --> 00:03:48,959
technique requires indica verifiable

97
00:03:48,959 --> 00:03:51,599
encryption skin because we mainly we

98
00:03:51,599 --> 00:03:54,879
need to use the decryption oracle in cc

99
00:03:54,879 --> 00:03:57,680
again to answer the opening oracle in

100
00:03:57,680 --> 00:04:01,120
the anonymity game and we also require

101
00:04:01,120 --> 00:04:03,360
mid k for the ciphertext and the plain

102
00:04:03,360 --> 00:04:05,920
text relation but unfortunately we don't

103
00:04:05,920 --> 00:04:08,000
have this kind of scene the particle

104
00:04:08,000 --> 00:04:10,159
tool in iso journeys with some standard

105
00:04:10,159 --> 00:04:12,080
assumptions

106
00:04:12,080 --> 00:04:15,760
this is because like sidh or csi they

107
00:04:15,760 --> 00:04:18,399
all use um like sheer secret key

108
00:04:18,399 --> 00:04:21,040
exchange to obtain encryption they hatch

109
00:04:21,040 --> 00:04:23,520
the share value and has the padding to

110
00:04:23,520 --> 00:04:26,160
encrypt the message

111
00:04:26,160 --> 00:04:27,840
so because you use a

112
00:04:27,840 --> 00:04:30,080
hash function here we can now have m

113
00:04:30,080 --> 00:04:33,840
efficient mickey for this irrigation

114
00:04:33,840 --> 00:04:36,080
so our solution is that we construct a

115
00:04:36,080 --> 00:04:40,000
new verifiable mdcp apk with online

116
00:04:40,000 --> 00:04:41,199
extra

117
00:04:41,199 --> 00:04:43,840
structurable misdk which

118
00:04:43,840 --> 00:04:45,600
unextractable means that if you are

119
00:04:45,600 --> 00:04:48,080
given a proof then we can like by

120
00:04:48,080 --> 00:04:50,080
observing the render the rendering

121
00:04:50,080 --> 00:04:52,320
oracle then you can extract the secret

122
00:04:52,320 --> 00:04:54,960
witness from your proof

123
00:04:54,960 --> 00:04:58,080
but our pk here is weakly decryptable

124
00:04:58,080 --> 00:04:59,919
which means that um

125
00:04:59,919 --> 00:05:03,280
uh the the message space of our pke

126
00:05:03,280 --> 00:05:05,840
should be like small like polynomial

127
00:05:05,840 --> 00:05:09,199
size in lambda but it is good enough to

128
00:05:09,199 --> 00:05:12,160
give us the following contribution

129
00:05:12,160 --> 00:05:14,240
the first one we present a new practical

130
00:05:14,240 --> 00:05:16,560
framework for group signatures based on

131
00:05:16,560 --> 00:05:19,039
reactions we also give exogeny and

132
00:05:19,039 --> 00:05:21,280
latest instantiations

133
00:05:21,280 --> 00:05:24,000
and the signature size is logarithmic we

134
00:05:24,000 --> 00:05:26,240
also provide tightly secured variants

135
00:05:26,240 --> 00:05:28,639
for our two instantiations

136
00:05:28,639 --> 00:05:30,639
and it is also the first

137
00:05:30,639 --> 00:05:32,880
group signature from hexagony and the

138
00:05:32,880 --> 00:05:35,440
only location one because there are some

139
00:05:35,440 --> 00:05:37,520
concurrent works

140
00:05:37,520 --> 00:05:40,080
and the exogenous instantiation has the

141
00:05:40,080 --> 00:05:41,600
smallest signature size in the

142
00:05:41,600 --> 00:05:43,520
literature among other postgraduate

143
00:05:43,520 --> 00:05:45,440
proposals

144
00:05:45,440 --> 00:05:47,199
but in this whole talk we will mainly

145
00:05:47,199 --> 00:05:51,520
focus on the isogeny instantiation here

146
00:05:51,520 --> 00:05:53,360
and this is a simple comparison without

147
00:05:53,360 --> 00:05:56,080
the other srg station

148
00:05:56,080 --> 00:05:58,160
and we have the

149
00:05:58,160 --> 00:06:00,400
best the most compact signature size and

150
00:06:00,400 --> 00:06:02,479
the best security

151
00:06:02,479 --> 00:06:06,440
guarantee for the users

152
00:06:07,759 --> 00:06:10,319
so this is the super high level of our

153
00:06:10,319 --> 00:06:12,000
construction here

154
00:06:12,000 --> 00:06:14,240
as you may know if you have a relation

155
00:06:14,240 --> 00:06:17,360
and have statement and witness w and if

156
00:06:17,360 --> 00:06:19,840
you have mitk for this relation or in

157
00:06:19,840 --> 00:06:21,840
our instance we use skin protocol and

158
00:06:21,840 --> 00:06:23,680
fiasco metres four you can have a

159
00:06:23,680 --> 00:06:25,280
signature screen

160
00:06:25,280 --> 00:06:27,440
and by excel it is spent by all proof

161
00:06:27,440 --> 00:06:28,520
relation

162
00:06:28,520 --> 00:06:31,759
operation means that there's a bunch of

163
00:06:31,759 --> 00:06:34,479
statement here and your witness is only

164
00:06:34,479 --> 00:06:36,639
for one of them and you for you have

165
00:06:36,639 --> 00:06:39,120
midik for this relation you can have a

166
00:06:39,120 --> 00:06:41,120
real signature it doesn't matter if you

167
00:06:41,120 --> 00:06:43,039
don't know what's in signature

168
00:06:43,039 --> 00:06:45,919
and the next one we add pke

169
00:06:45,919 --> 00:06:48,639
pk encryption relation here

170
00:06:48,639 --> 00:06:51,520
we add the ciphertext to encrypt

171
00:06:51,520 --> 00:06:53,520
the index

172
00:06:53,520 --> 00:06:56,160
here and then with randomness r and we

173
00:06:56,160 --> 00:06:59,120
add r into the witness here

174
00:06:59,120 --> 00:07:01,599
so we are separated into the statement

175
00:07:01,599 --> 00:07:04,240
and add readiness r into the witness

176
00:07:04,240 --> 00:07:06,160
and if you have online extractable

177
00:07:06,160 --> 00:07:09,680
relation mid k for this relation then

178
00:07:09,680 --> 00:07:12,000
you can have a group signature with cca

179
00:07:12,000 --> 00:07:13,840
anonymity

180
00:07:13,840 --> 00:07:15,520
and the final one is to have four

181
00:07:15,520 --> 00:07:19,199
unforgivability and we have to

182
00:07:19,199 --> 00:07:21,680
have an idk relation for the decryption

183
00:07:21,680 --> 00:07:23,759
relation which means the relation

184
00:07:23,759 --> 00:07:26,800
between the plaintext and the ciphertext

185
00:07:26,800 --> 00:07:29,919
and the key relation which means the

186
00:07:29,919 --> 00:07:32,160
public key relation and the decryption

187
00:07:32,160 --> 00:07:34,080
key radiation

188
00:07:34,080 --> 00:07:36,639
and remind that the pke here will only

189
00:07:36,639 --> 00:07:40,319
require imdcpa

190
00:07:41,120 --> 00:07:43,199
so a sigma protocol for

191
00:07:43,199 --> 00:07:45,120
relation is a remove interactive

192
00:07:45,120 --> 00:07:48,400
protocol among a proofer with the secret

193
00:07:48,400 --> 00:07:50,000
witness and the verifier with the

194
00:07:50,000 --> 00:07:52,960
statement they do commit commitment

195
00:07:52,960 --> 00:07:55,440
challenge and response and the

196
00:07:55,440 --> 00:07:58,240
right profile accept or not because the

197
00:07:58,240 --> 00:08:00,560
ship is like a sigma so it is called a

198
00:08:00,560 --> 00:08:03,440
sigma protocol

199
00:08:04,160 --> 00:08:06,960
and we recall the definition of group

200
00:08:06,960 --> 00:08:08,080
actions

201
00:08:08,080 --> 00:08:10,800
a group acts on a set by an action if it

202
00:08:10,800 --> 00:08:12,400
has identity

203
00:08:12,400 --> 00:08:15,120
and compatibility

204
00:08:15,120 --> 00:08:17,360
oh

205
00:08:18,720 --> 00:08:20,479
and of course to have a cryptography

206
00:08:20,479 --> 00:08:23,199
construction we need the continent's

207
00:08:23,199 --> 00:08:26,160
assumption here if you are given the

208
00:08:26,160 --> 00:08:30,000
operation of the action g x and x it is

209
00:08:30,000 --> 00:08:33,839
still difficult to recover g

210
00:08:33,839 --> 00:08:35,760
for example let n be a

211
00:08:35,760 --> 00:08:38,799
natural number they let g to be zn and x

212
00:08:38,799 --> 00:08:41,760
to be the cyclic group of order m define

213
00:08:41,760 --> 00:08:43,120
g x to be

214
00:08:43,120 --> 00:08:44,560
x to d g

215
00:08:44,560 --> 00:08:46,399
the hardness here is based on the

216
00:08:46,399 --> 00:08:51,440
discrete logarithm of this cyclic group

217
00:08:52,399 --> 00:08:54,560
and i start thought uninstantiation we

218
00:08:54,560 --> 00:08:57,120
are taken from seaside uh together with

219
00:08:57,120 --> 00:09:01,120
the optimization given by bk bk v19

220
00:09:01,120 --> 00:09:02,480
which is the

221
00:09:02,480 --> 00:09:04,800
efficiency method

222
00:09:04,800 --> 00:09:07,200
so we are having

223
00:09:07,200 --> 00:09:09,760
group action gx on the set a super

224
00:09:09,760 --> 00:09:12,560
single curve and we have a spatial curve

225
00:09:12,560 --> 00:09:15,279
that's called e0

226
00:09:15,279 --> 00:09:17,200
that is a super singular ed curve and

227
00:09:17,200 --> 00:09:18,320
well known

228
00:09:18,320 --> 00:09:21,120
can be taken from this set

229
00:09:21,120 --> 00:09:24,480
and this is called uh we have something

230
00:09:24,480 --> 00:09:26,080
wrong here this is called group action

231
00:09:26,080 --> 00:09:29,600
in in first problem if you are given

232
00:09:29,600 --> 00:09:33,440
uh s e zero where s is sample from the

233
00:09:33,440 --> 00:09:36,640
group g it is hard to recover as the

234
00:09:36,640 --> 00:09:39,680
sacred exogeny

235
00:09:40,800 --> 00:09:43,120
and the final definition is the group

236
00:09:43,120 --> 00:09:45,120
action-based pke

237
00:09:45,120 --> 00:09:47,920
there are two groups g and gm both

238
00:09:47,920 --> 00:09:50,800
acting on the same set x and g n

239
00:09:50,800 --> 00:09:54,399
contains the message space m acts on x

240
00:09:54,399 --> 00:09:56,959
by a public action

241
00:09:56,959 --> 00:09:59,200
and the other action is given by the key

242
00:09:59,200 --> 00:10:00,959
generation algorithm

243
00:10:00,959 --> 00:10:02,880
it is part of the public key of the

244
00:10:02,880 --> 00:10:04,560
inclusion scheme

245
00:10:04,560 --> 00:10:08,399
and related to the secret key here

246
00:10:08,399 --> 00:10:11,839
and we define the action the encryption

247
00:10:11,839 --> 00:10:15,200
of message n is the cipher text is

248
00:10:15,200 --> 00:10:19,279
m acts on r axon xpk by the public

249
00:10:19,279 --> 00:10:21,279
action and the public key action

250
00:10:21,279 --> 00:10:22,480
respectively

251
00:10:22,480 --> 00:10:26,000
with the renderness r here

252
00:10:26,000 --> 00:10:28,160
and we do not specify the decryption

253
00:10:28,160 --> 00:10:30,000
relation here but we of course we

254
00:10:30,000 --> 00:10:33,120
require the correctness and we also

255
00:10:33,120 --> 00:10:37,839
assume the pke is ind cpa secure

256
00:10:39,120 --> 00:10:41,279
for example we can also we also

257
00:10:41,279 --> 00:10:43,040
construct

258
00:10:43,040 --> 00:10:45,200
this so-called gipke

259
00:10:45,200 --> 00:10:47,680
instantiation from isotrony by using

260
00:10:47,680 --> 00:10:49,360
seaside again

261
00:10:49,360 --> 00:10:51,920
and remark that we require the message

262
00:10:51,920 --> 00:10:53,760
space to be small

263
00:10:53,760 --> 00:10:57,200
like a polynomial in lambda and this is

264
00:10:57,200 --> 00:10:59,440
because we have to

265
00:10:59,440 --> 00:11:01,200
to decrypt we

266
00:11:01,200 --> 00:11:03,600
decrypt by enumerating elements in the

267
00:11:03,600 --> 00:11:05,760
message space

268
00:11:05,760 --> 00:11:08,240
otherwise you return if no such message

269
00:11:08,240 --> 00:11:10,720
found a return perp

270
00:11:10,720 --> 00:11:11,440
and

271
00:11:11,440 --> 00:11:13,600
harness the this

272
00:11:13,600 --> 00:11:17,040
pka is ind cpa based on the decisional

273
00:11:17,040 --> 00:11:19,920
seaside problem

274
00:11:21,279 --> 00:11:23,040
and finally we can talk about our

275
00:11:23,040 --> 00:11:25,120
technical overview

276
00:11:25,120 --> 00:11:27,440
we start from the or proof or say

277
00:11:27,440 --> 00:11:31,839
they're all relation taken by bkp 20.

278
00:11:31,839 --> 00:11:34,480
firstly there's a state statement or

279
00:11:34,480 --> 00:11:36,399
relation we stayed before

280
00:11:36,399 --> 00:11:38,320
there is a

281
00:11:38,320 --> 00:11:40,720
bunch of statement here

282
00:11:40,720 --> 00:11:43,760
and you'll have a secret witness for one

283
00:11:43,760 --> 00:11:45,120
of them

284
00:11:45,120 --> 00:11:47,040
and the verification key will be this

285
00:11:47,040 --> 00:11:49,600
boundary of statement here and their

286
00:11:49,600 --> 00:11:51,920
witness will be your secret signing key

287
00:11:51,920 --> 00:11:54,800
for each member

288
00:11:54,800 --> 00:11:57,040
so we will do this by using sigma

289
00:11:57,040 --> 00:11:58,480
protocol

290
00:11:58,480 --> 00:12:00,880
so firstly the proofer produce a bunch

291
00:12:00,880 --> 00:12:03,600
of uh exogeny and

292
00:12:03,600 --> 00:12:04,800
group actions

293
00:12:04,800 --> 00:12:07,519
and shuffle then and obtain sets this is

294
00:12:07,519 --> 00:12:10,720
the commitment of the proverb

295
00:12:10,720 --> 00:12:13,440
the next challenge challenge is either

296
00:12:13,440 --> 00:12:16,560
zero or one if challenge is zero then

297
00:12:16,560 --> 00:12:18,480
the proofer provides this boundary of

298
00:12:18,480 --> 00:12:20,880
school elements and the verifier just

299
00:12:20,880 --> 00:12:23,680
recomputes these sets these elements and

300
00:12:23,680 --> 00:12:26,720
see whether the the set he computes is

301
00:12:26,720 --> 00:12:30,079
identical to the one given by the

302
00:12:30,079 --> 00:12:31,839
proofer

303
00:12:31,839 --> 00:12:34,560
if the challenge is one then the

304
00:12:34,560 --> 00:12:37,279
verifier no the proofer just

305
00:12:37,279 --> 00:12:39,920
s i plus s i prime

306
00:12:39,920 --> 00:12:43,120
and by acting on x o the verifier will

307
00:12:43,120 --> 00:12:45,519
check whether this will fall into the

308
00:12:45,519 --> 00:12:47,920
set given by the

309
00:12:47,920 --> 00:12:49,760
for proofer

310
00:12:49,760 --> 00:12:52,880
if so accept otherwise reject

311
00:12:52,880 --> 00:12:56,880
and this is a second protocol

312
00:12:56,880 --> 00:12:59,360
so the next step is we add the

313
00:12:59,360 --> 00:13:02,399
encryption relation into this

314
00:13:02,399 --> 00:13:05,519
this this relation and the key idea is

315
00:13:05,519 --> 00:13:07,600
we concatenate and shuffle two proofs

316
00:13:07,600 --> 00:13:08,880
together

317
00:13:08,880 --> 00:13:11,600
we call that we have a ciphertext now to

318
00:13:11,600 --> 00:13:14,399
encrypt the secret message

319
00:13:14,399 --> 00:13:18,959
i and together with the redness r

320
00:13:18,959 --> 00:13:21,279
so we do something similar here and

321
00:13:21,279 --> 00:13:23,200
something uh and put

322
00:13:23,200 --> 00:13:25,200
the information in blue which means it's

323
00:13:25,200 --> 00:13:27,200
public like negative one negative two

324
00:13:27,200 --> 00:13:28,320
negative n

325
00:13:28,320 --> 00:13:31,200
and this comment statement here cipher

326
00:13:31,200 --> 00:13:33,279
text one civil takes two seven six n

327
00:13:33,279 --> 00:13:35,839
they are public

328
00:13:35,839 --> 00:13:38,880
and prefer to

329
00:13:38,880 --> 00:13:41,760
group actions again with two undistinct

330
00:13:41,760 --> 00:13:43,519
group elements

331
00:13:43,519 --> 00:13:45,839
and obtain a set again and shuffle them

332
00:13:45,839 --> 00:13:48,240
together

333
00:13:48,240 --> 00:13:50,959
so the pro the challenge is also either

334
00:13:50,959 --> 00:13:54,000
zero or one here if challenge is zero

335
00:13:54,000 --> 00:13:55,680
then the proof will provide these two

336
00:13:55,680 --> 00:13:57,199
unknown elements

337
00:13:57,199 --> 00:13:59,680
and uh for a fire we compute this part

338
00:13:59,680 --> 00:14:01,519
and see whether these two sets are

339
00:14:01,519 --> 00:14:03,839
identical

340
00:14:03,839 --> 00:14:06,320
and if challenge is one

341
00:14:06,320 --> 00:14:09,279
the proof also provides si plus xi prime

342
00:14:09,279 --> 00:14:12,720
but he also provides r plus r

343
00:14:12,720 --> 00:14:14,320
i prime here

344
00:14:14,320 --> 00:14:16,880
and by acting on the

345
00:14:16,880 --> 00:14:20,560
the public uh success element given

346
00:14:20,560 --> 00:14:23,040
taken from the public key from the

347
00:14:23,040 --> 00:14:25,920
proofer founder no from the

348
00:14:25,920 --> 00:14:27,120
opener

349
00:14:27,120 --> 00:14:28,639
then the

350
00:14:28,639 --> 00:14:30,560
profiler can check whether this element

351
00:14:30,560 --> 00:14:31,839
will fall into

352
00:14:31,839 --> 00:14:34,079
the set of the committed decipher text

353
00:14:34,079 --> 00:14:37,040
ceo cti prime this set

354
00:14:37,040 --> 00:14:41,599
if so accept otherwise he rejects

355
00:14:41,839 --> 00:14:44,800
so the next next step is to we need to

356
00:14:44,800 --> 00:14:47,760
make the proof to be logarithmic we use

357
00:14:47,760 --> 00:14:50,000
student red number generator merkle tree

358
00:14:50,000 --> 00:14:52,160
and communion skin

359
00:14:52,160 --> 00:14:55,440
we call that here the proofer he used

360
00:14:55,440 --> 00:14:58,639
two undistinct group elements and here

361
00:14:58,639 --> 00:15:01,279
we just use two two elements here

362
00:15:01,279 --> 00:15:04,079
with s prime and r prime

363
00:15:04,079 --> 00:15:05,279
and then the

364
00:15:05,279 --> 00:15:06,240
they do

365
00:15:06,240 --> 00:15:07,920
the proof do the commitment with

366
00:15:07,920 --> 00:15:12,959
randomness bits one to bit m

367
00:15:12,959 --> 00:15:15,120
and then he applied merkel the proof of

368
00:15:15,120 --> 00:15:17,279
appliement called 3 and obtain a root

369
00:15:17,279 --> 00:15:20,079
this root will be the commitment of the

370
00:15:20,079 --> 00:15:21,680
sigma protocol

371
00:15:21,680 --> 00:15:24,399
and all randomness s prime s prime r

372
00:15:24,399 --> 00:15:27,360
prime and bit 1 to bit n they are all

373
00:15:27,360 --> 00:15:29,440
generated by a should random number

374
00:15:29,440 --> 00:15:33,279
generator by a single seed

375
00:15:36,160 --> 00:15:38,560
and the challenge is also either 0 1

376
00:15:38,560 --> 00:15:40,639
here and if challenge is what the

377
00:15:40,639 --> 00:15:42,800
proofer now just provides a seed and the

378
00:15:42,800 --> 00:15:44,240
verifier will compute this all

379
00:15:44,240 --> 00:15:46,560
renderings and compute where the

380
00:15:46,560 --> 00:15:48,800
the verifier can see obtain the same

381
00:15:48,800 --> 00:15:50,480
route

382
00:15:50,480 --> 00:15:53,040
now if the challenge is one then the

383
00:15:53,040 --> 00:15:55,279
proofer provides the rendering speed for

384
00:15:55,279 --> 00:15:56,480
the commitment

385
00:15:56,480 --> 00:15:58,959
skin and the path of the merkle tree

386
00:15:58,959 --> 00:16:00,399
lead to the root

387
00:16:00,399 --> 00:16:02,639
and the verifier just check whether

388
00:16:02,639 --> 00:16:04,800
this additional information can lead to

389
00:16:04,800 --> 00:16:07,680
the same root if so accept otherwise he

390
00:16:07,680 --> 00:16:10,160
rejects

391
00:16:11,519 --> 00:16:13,040
so

392
00:16:13,040 --> 00:16:15,759
in this in this sigma protocol we can

393
00:16:15,759 --> 00:16:18,079
have online extractability which means

394
00:16:18,079 --> 00:16:20,800
that if you obtain a proof we can obtain

395
00:16:20,800 --> 00:16:22,800
the we can extract the secret weakness

396
00:16:22,800 --> 00:16:25,440
by observing the random oracle

397
00:16:25,440 --> 00:16:28,240
and we do this by modeling our shoulder

398
00:16:28,240 --> 00:16:30,160
number generator communal skin and

399
00:16:30,160 --> 00:16:33,199
miracle tree as a random oracle

400
00:16:33,199 --> 00:16:34,720
and the main reason we can do this

401
00:16:34,720 --> 00:16:37,199
because the challenge is the size base

402
00:16:37,199 --> 00:16:40,079
is just two and the response can one of

403
00:16:40,079 --> 00:16:42,720
the response the c here can be obtained

404
00:16:42,720 --> 00:16:44,720
by observing the render oracle because

405
00:16:44,720 --> 00:16:46,079
we model the

406
00:16:46,079 --> 00:16:48,240
pseudo-random generator as a random

407
00:16:48,240 --> 00:16:51,240
oracle

408
00:16:51,360 --> 00:16:53,920
okay i'll repeat the sequent protocol we

409
00:16:53,920 --> 00:16:55,519
mentioned before lambda time the

410
00:16:55,519 --> 00:16:57,759
interactive protocol will has two to the

411
00:16:57,759 --> 00:16:59,759
lambda security strengths

412
00:16:59,759 --> 00:17:01,759
and by using fiasco method transform it

413
00:17:01,759 --> 00:17:02,839
can be

414
00:17:02,839 --> 00:17:05,280
non-interactive and for the proof

415
00:17:05,280 --> 00:17:07,599
roughly speaking the unlike stability

416
00:17:07,599 --> 00:17:09,919
and iron disappeared will give us cc

417
00:17:09,919 --> 00:17:11,520
anonymity

418
00:17:11,520 --> 00:17:14,240
and with a harness assumption of the

419
00:17:14,240 --> 00:17:17,039
action it gives us unforgivability

420
00:17:17,039 --> 00:17:20,240
but not the full unvulability

421
00:17:20,240 --> 00:17:22,480
and remark that we have a ciphertext

422
00:17:22,480 --> 00:17:25,280
here in the statement so the manager

423
00:17:25,280 --> 00:17:27,199
just who owned the

424
00:17:27,199 --> 00:17:28,960
the secret key the decryption key of

425
00:17:28,960 --> 00:17:31,520
this public encryption so he can the

426
00:17:31,520 --> 00:17:33,600
manager can just open

427
00:17:33,600 --> 00:17:36,080
the signature by using the decryption

428
00:17:36,080 --> 00:17:37,840
key now

429
00:17:37,840 --> 00:17:40,320
so it suffices to construct an idk for

430
00:17:40,320 --> 00:17:41,919
the decryption relation and the key

431
00:17:41,919 --> 00:17:43,679
relation to have

432
00:17:43,679 --> 00:17:46,960
traceability and foreign

433
00:17:46,960 --> 00:17:49,120
we specify the relation here and by

434
00:17:49,120 --> 00:17:52,160
using the similar method we mentioned

435
00:17:52,160 --> 00:17:54,400
before we can obtain a mitigate for this

436
00:17:54,400 --> 00:17:55,840
relation

437
00:17:55,840 --> 00:17:58,080
and the proofer now the open outside the

438
00:17:58,080 --> 00:18:00,160
opener the manager provide the proof for

439
00:18:00,160 --> 00:18:03,360
the opening result using this idk then

440
00:18:03,360 --> 00:18:05,600
we can have traceability and for

441
00:18:05,600 --> 00:18:08,559
unfoldability

442
00:18:08,880 --> 00:18:11,120
we also have other results

443
00:18:11,120 --> 00:18:12,320
like we

444
00:18:12,320 --> 00:18:14,480
we further reduce the signature size by

445
00:18:14,480 --> 00:18:17,039
using the unbalanced challenge space

446
00:18:17,039 --> 00:18:18,880
which means that because you can see

447
00:18:18,880 --> 00:18:21,280
when challenge is zero then the proofer

448
00:18:21,280 --> 00:18:24,000
just provides c which is much smaller

449
00:18:24,000 --> 00:18:26,640
than the response for challenge one a

450
00:18:26,640 --> 00:18:29,760
bunch of stuff here so we use more zero

451
00:18:29,760 --> 00:18:31,919
challenge than one then we can have a

452
00:18:31,919 --> 00:18:34,960
more compact signature size

453
00:18:34,960 --> 00:18:38,640
and we give uh gipke for latest

454
00:18:38,640 --> 00:18:40,559
instantiation by using linda pika

455
00:18:40,559 --> 00:18:43,280
framework so we don't the the

456
00:18:43,280 --> 00:18:45,200
message space can be

457
00:18:45,200 --> 00:18:46,640
large here

458
00:18:46,640 --> 00:18:48,799
and we also reduce the signature size

459
00:18:48,799 --> 00:18:51,280
for our latest instantiation by using

460
00:18:51,280 --> 00:18:52,320
gable

461
00:18:52,320 --> 00:18:54,960
bag abrasive method

462
00:18:54,960 --> 00:18:56,720
we provide the

463
00:18:56,720 --> 00:18:58,720
tightly secured variant by using the

464
00:18:58,720 --> 00:19:01,039
so-called cat wall measure the

465
00:19:01,039 --> 00:19:03,520
unfoldability reduction loss is simply

466
00:19:03,520 --> 00:19:06,160
one half in generally in the other work

467
00:19:06,160 --> 00:19:08,720
it is it has a quadratic loss followed

468
00:19:08,720 --> 00:19:11,360
by a square loss

469
00:19:11,360 --> 00:19:14,640
and the additional cost in our in our

470
00:19:14,640 --> 00:19:17,360
version is just a constant concretely it

471
00:19:17,360 --> 00:19:19,360
is a

472
00:19:19,360 --> 00:19:23,120
0.5 to support 0.6 kilobytes but the

473
00:19:23,120 --> 00:19:24,799
signing key and the ferophagic

474
00:19:24,799 --> 00:19:26,400
professional

475
00:19:26,400 --> 00:19:28,400
process will be slowed down by a factor

476
00:19:28,400 --> 00:19:30,160
of two

477
00:19:30,160 --> 00:19:32,400
so it is quite a cheap uh

478
00:19:32,400 --> 00:19:34,240
chip

479
00:19:34,240 --> 00:19:36,240
over here

480
00:19:36,240 --> 00:19:38,480
so finally um in this world as we

481
00:19:38,480 --> 00:19:40,559
mentioned before we present the most

482
00:19:40,559 --> 00:19:42,080
secure

483
00:19:42,080 --> 00:19:44,080
the most secure group signature among

484
00:19:44,080 --> 00:19:44,960
the

485
00:19:44,960 --> 00:19:47,840
the group signature proposals

486
00:19:47,840 --> 00:19:50,799
and how isa in instance has the smallest

487
00:19:50,799 --> 00:19:52,799
the most compact signature size in the

488
00:19:52,799 --> 00:19:55,360
literature

489
00:19:56,080 --> 00:19:57,120
and

490
00:19:57,120 --> 00:20:00,799
this is a free summary of a few of our

491
00:20:00,799 --> 00:20:02,320
contributions

492
00:20:02,320 --> 00:20:03,840
like we mentioned before we present a

493
00:20:03,840 --> 00:20:05,600
new framework from group researcher by

494
00:20:05,600 --> 00:20:07,760
using google actions with isa journey

495
00:20:07,760 --> 00:20:10,720
and latest instantiations achieving all

496
00:20:10,720 --> 00:20:14,000
ideal security properties

497
00:20:14,000 --> 00:20:15,840
and the proof the framework is

498
00:20:15,840 --> 00:20:18,640
logarithmic the size is very compact

499
00:20:18,640 --> 00:20:20,640
and we also provide the tightly secure

500
00:20:20,640 --> 00:20:22,880
variant for our

501
00:20:22,880 --> 00:20:24,799
two instantiations

502
00:20:24,799 --> 00:20:27,120
and we prefer the first group signature

503
00:20:27,120 --> 00:20:29,600
from isa tunis and the only logarithmic

504
00:20:29,600 --> 00:20:30,480
one

505
00:20:30,480 --> 00:20:33,200
and this is the work we present hope you

506
00:20:33,200 --> 00:20:35,360
find this is interesting thank you for

507
00:20:35,360 --> 00:20:37,840
listening

508
00:20:42,559 --> 00:20:46,200
do we have any questions

509
00:20:59,520 --> 00:21:02,520
oh

510
00:21:05,840 --> 00:21:08,159
hi thanks for your talk um i've seen

511
00:21:08,159 --> 00:21:09,760
some other ring signature constructions

512
00:21:09,760 --> 00:21:12,080
where the verify is logarithmic sorry

513
00:21:12,080 --> 00:21:13,679
the signature size is logarithmic but

514
00:21:13,679 --> 00:21:15,440
the verifier is actually

515
00:21:15,440 --> 00:21:17,919
linear um is your construction like this

516
00:21:17,919 --> 00:21:20,480
or is the verifier also logarithmic

517
00:21:20,480 --> 00:21:22,720
uh you mean the verification key uh the

518
00:21:22,720 --> 00:21:25,280
verb the the verification time for the

519
00:21:25,280 --> 00:21:27,679
signature verification kind for the

520
00:21:27,679 --> 00:21:30,559
signature um

521
00:21:30,559 --> 00:21:34,000
for signature you have to do

522
00:21:34,000 --> 00:21:35,520
so auditory

523
00:21:35,520 --> 00:21:37,520
the computational cost of the verifier i

524
00:21:37,520 --> 00:21:39,600
think is the question yeah exactly oh

525
00:21:39,600 --> 00:21:41,919
yeah it is you need to do

526
00:21:41,919 --> 00:21:42,720
if

527
00:21:42,720 --> 00:21:43,840
there are

528
00:21:43,840 --> 00:21:46,400
members in the group then you have to do

529
00:21:46,400 --> 00:21:48,880
m times because you have to do m times

530
00:21:48,880 --> 00:21:50,880
group actions check

531
00:21:50,880 --> 00:21:52,799
okay so there's not like um like in some

532
00:21:52,799 --> 00:21:54,320
constructions there's like a succinct

533
00:21:54,320 --> 00:21:56,960
representation of the group of users

534
00:21:56,960 --> 00:21:59,200
that then the verifier uses to save time

535
00:21:59,200 --> 00:22:01,120
but it's not like that

536
00:22:01,120 --> 00:22:02,000
yep

537
00:22:02,000 --> 00:22:04,960
okay thanks very much

538
00:22:07,600 --> 00:22:11,080
any other questions

539
00:22:13,840 --> 00:22:18,120
then let's thank the speaker again

540
00:22:26,240 --> 00:22:28,320
you

