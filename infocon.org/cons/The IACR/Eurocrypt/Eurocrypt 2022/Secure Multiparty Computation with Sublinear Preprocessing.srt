1
00:00:09,040 --> 00:00:10,160
okay

2
00:00:10,160 --> 00:00:13,040
and the next speaker of the session is

3
00:00:13,040 --> 00:00:14,559
ariel now

4
00:00:14,559 --> 00:00:16,000
who is going to talk about security

5
00:00:16,000 --> 00:00:17,600
party computation with something

6
00:00:17,600 --> 00:00:19,039
pre-processing

7
00:00:19,039 --> 00:00:21,680
uh joint work with ellette boyle nifty

8
00:00:21,680 --> 00:00:24,320
boy and diwali shy

9
00:00:24,320 --> 00:00:25,760
so thank you thousands for the

10
00:00:25,760 --> 00:00:31,119
introduction um right so in this work

11
00:00:31,119 --> 00:00:32,640
we consider

12
00:00:32,640 --> 00:00:34,880
that

13
00:00:38,640 --> 00:00:41,840
no it's not working

14
00:00:42,840 --> 00:00:44,399
okay

15
00:00:44,399 --> 00:00:45,440
okay good

16
00:00:45,440 --> 00:00:47,520
so in this form we consider the

17
00:00:47,520 --> 00:00:48,960
standard setting of multi-party

18
00:00:48,960 --> 00:00:51,120
computation where we have n parties wish

19
00:00:51,120 --> 00:00:53,840
to jointly compute an arithmetic circuit

20
00:00:53,840 --> 00:00:57,039
which is defined over a field or a ring

21
00:00:57,039 --> 00:00:59,520
with addition and multiplication guides

22
00:00:59,520 --> 00:01:01,520
and the security model that we consider

23
00:01:01,520 --> 00:01:03,520
is malicious security and dishonest

24
00:01:03,520 --> 00:01:05,199
majority

25
00:01:05,199 --> 00:01:06,720
now we know that in the dishonest

26
00:01:06,720 --> 00:01:09,040
majority setting a very popular model is

27
00:01:09,040 --> 00:01:10,880
the pre-processing model

28
00:01:10,880 --> 00:01:12,880
where the computation is divided into

29
00:01:12,880 --> 00:01:15,600
two phases an offline phase and an

30
00:01:15,600 --> 00:01:17,360
online phase

31
00:01:17,360 --> 00:01:18,880
in the offline or the pre-processing

32
00:01:18,880 --> 00:01:20,640
phase the parties generate quality

33
00:01:20,640 --> 00:01:22,640
randomness which is later consumed by

34
00:01:22,640 --> 00:01:24,400
them in the online execution where they

35
00:01:24,400 --> 00:01:25,520
compute

36
00:01:25,520 --> 00:01:27,840
the desired functionality

37
00:01:27,840 --> 00:01:29,680
another way to look at this model is

38
00:01:29,680 --> 00:01:32,880
this is is to view the execution as an

39
00:01:32,880 --> 00:01:34,720
execution with a trusted dealer that

40
00:01:34,720 --> 00:01:37,119
gives the parties call it randomness

41
00:01:37,119 --> 00:01:39,759
and then later design a secure protocol

42
00:01:39,759 --> 00:01:41,200
to securely

43
00:01:41,200 --> 00:01:44,079
distribute the dealer

44
00:01:44,079 --> 00:01:46,079
the advantage working in this model is

45
00:01:46,079 --> 00:01:48,720
that we can move all the

46
00:01:48,720 --> 00:01:51,439
expensive public key crypto machinery

47
00:01:51,439 --> 00:01:53,759
which is unavoidable in this setting to

48
00:01:53,759 --> 00:01:55,840
the offline and obtain an online

49
00:01:55,840 --> 00:01:58,640
execution which is very fast cheap and

50
00:01:58,640 --> 00:02:02,240
basically information theoretic

51
00:02:02,479 --> 00:02:04,000
so the two main metrics that are

52
00:02:04,000 --> 00:02:06,399
typically considered for this model

53
00:02:06,399 --> 00:02:08,800
maybe the three main metrics uh and we

54
00:02:08,800 --> 00:02:11,520
will also look at these metrics are the

55
00:02:11,520 --> 00:02:13,520
are the communication cost of the online

56
00:02:13,520 --> 00:02:16,080
and offline uh separately

57
00:02:16,080 --> 00:02:17,760
and the size of the correlated anonymous

58
00:02:17,760 --> 00:02:19,440
which the parties need

59
00:02:19,440 --> 00:02:21,680
to store

60
00:02:21,680 --> 00:02:23,920
for the online execution

61
00:02:23,920 --> 00:02:26,160
so the most popular example for working

62
00:02:26,160 --> 00:02:28,879
in this model is to use beaver triples

63
00:02:28,879 --> 00:02:30,879
and here the dealer gives the parties

64
00:02:30,879 --> 00:02:32,800
shares of random multiplication triples

65
00:02:32,800 --> 00:02:35,280
which are used by them to multiply share

66
00:02:35,280 --> 00:02:37,120
the inputs with very low communication

67
00:02:37,120 --> 00:02:39,599
as can be seen in this table

68
00:02:39,599 --> 00:02:41,440
what's important for this table is that

69
00:02:41,440 --> 00:02:42,239
the

70
00:02:42,239 --> 00:02:44,319
communication costs per multiplication

71
00:02:44,319 --> 00:02:45,120
gate

72
00:02:45,120 --> 00:02:46,959
parabolity is constant

73
00:02:46,959 --> 00:02:49,519
and therefore the overall communication

74
00:02:49,519 --> 00:02:51,280
grows linearly with the size of the

75
00:02:51,280 --> 00:02:52,480
circuit

76
00:02:52,480 --> 00:02:53,920
um

77
00:02:53,920 --> 00:02:56,400
so this so for example security what we

78
00:02:56,400 --> 00:03:00,239
need is sim is plain beaver triples

79
00:03:00,239 --> 00:03:02,959
to achieve malicious security so the

80
00:03:02,959 --> 00:03:04,959
leading approach in the last decade or

81
00:03:04,959 --> 00:03:06,000
so

82
00:03:06,000 --> 00:03:07,840
is the speed approach where the dealer

83
00:03:07,840 --> 00:03:09,680
gives the parties shares of

84
00:03:09,680 --> 00:03:11,760
authenticated bb triples

85
00:03:11,760 --> 00:03:13,519
which means that each triple is now

86
00:03:13,519 --> 00:03:16,159
multiplied with a random global

87
00:03:16,159 --> 00:03:18,400
authenticator which is kept secret and

88
00:03:18,400 --> 00:03:20,000
this is what allows the parties to

89
00:03:20,000 --> 00:03:22,000
detect cheating

90
00:03:22,000 --> 00:03:24,080
the adventure of this approach is that

91
00:03:24,080 --> 00:03:25,680
the online communication costs remain

92
00:03:25,680 --> 00:03:28,000
the same as the cost with seminar

93
00:03:28,000 --> 00:03:29,040
security

94
00:03:29,040 --> 00:03:30,720
however clearly the correlating

95
00:03:30,720 --> 00:03:31,920
randomness the amount of collateral to

96
00:03:31,920 --> 00:03:33,519
randomness grows

97
00:03:33,519 --> 00:03:35,680
by a factor of two for large phase and

98
00:03:35,680 --> 00:03:37,200
by a factor that depends on the

99
00:03:37,200 --> 00:03:39,440
statistical security parameter

100
00:03:39,440 --> 00:03:42,159
for small fields or wings because the

101
00:03:42,159 --> 00:03:43,840
authenticated treble must be generated

102
00:03:43,840 --> 00:03:46,879
over a larger field and often cost is

103
00:03:46,879 --> 00:03:48,720
the expensive part of the protocol it

104
00:03:48,720 --> 00:03:50,159
needs the main bottleneck and there is a

105
00:03:50,159 --> 00:03:52,159
long line of works aiming to improve the

106
00:03:52,159 --> 00:03:55,120
efficiency of the offline phase but

107
00:03:55,120 --> 00:03:57,680
still the cost of the offline is orders

108
00:03:57,680 --> 00:04:00,000
of magnitude higher than the cost of the

109
00:04:00,000 --> 00:04:02,400
online

110
00:04:02,560 --> 00:04:03,840
i should mention that there are also

111
00:04:03,840 --> 00:04:05,599
other approaches

112
00:04:05,599 --> 00:04:08,720
which give which gives

113
00:04:09,040 --> 00:04:10,640
different trade-offs between the online

114
00:04:10,640 --> 00:04:12,799
and offline

115
00:04:12,799 --> 00:04:15,840
so how can we uh solve this bottleneck

116
00:04:15,840 --> 00:04:18,720
the bottleneck of the offline cost

117
00:04:18,720 --> 00:04:21,279
so a new relatively new direction in mpc

118
00:04:21,279 --> 00:04:23,120
which kind of set a dream goal for mpc

119
00:04:23,120 --> 00:04:25,840
is to have a silent pre-processing using

120
00:04:25,840 --> 00:04:29,040
pcgs which stands for third random

121
00:04:29,040 --> 00:04:30,960
coalition generators

122
00:04:30,960 --> 00:04:32,800
so the idea here is that the dealer will

123
00:04:32,800 --> 00:04:34,880
give each party a short correlated seed

124
00:04:34,880 --> 00:04:37,680
and then each body can locally expand

125
00:04:37,680 --> 00:04:38,960
its seed

126
00:04:38,960 --> 00:04:40,800
to receive shares of authenticated

127
00:04:40,800 --> 00:04:43,840
triples if we would had such an amazing

128
00:04:43,840 --> 00:04:46,160
tool then this means that the codon and

129
00:04:46,160 --> 00:04:47,840
cost remain the same as before but now

130
00:04:47,840 --> 00:04:49,040
we can compress the correlated

131
00:04:49,040 --> 00:04:51,120
randomness to be sublinear in the size

132
00:04:51,120 --> 00:04:53,440
of the circuit because each party needs

133
00:04:53,440 --> 00:04:56,240
to store only the correlated seed and

134
00:04:56,240 --> 00:04:58,160
also the offering costs will be

135
00:04:58,160 --> 00:04:59,440
often communication costs will be

136
00:04:59,440 --> 00:05:00,880
submitted because now the parties need

137
00:05:00,880 --> 00:05:03,360
to interact only to generate these short

138
00:05:03,360 --> 00:05:04,479
seats

139
00:05:04,479 --> 00:05:06,479
so this would be amazing however

140
00:05:06,479 --> 00:05:08,400
currently we have only concretely

141
00:05:08,400 --> 00:05:10,720
efficient pcgs for unauthenticated

142
00:05:10,720 --> 00:05:12,320
triples which means that for cement

143
00:05:12,320 --> 00:05:14,479
security we can use this tool

144
00:05:14,479 --> 00:05:16,240
but for malicious security security

145
00:05:16,240 --> 00:05:17,840
where we need authenticated triples we

146
00:05:17,840 --> 00:05:20,240
have currently only solutions continuity

147
00:05:20,240 --> 00:05:22,560
efficient pcgs only for two-party

148
00:05:22,560 --> 00:05:25,759
computation over large fields

149
00:05:25,759 --> 00:05:28,320
so in this work uh we use a different

150
00:05:28,320 --> 00:05:29,440
approach

151
00:05:29,440 --> 00:05:32,320
that gives that achieves the same

152
00:05:32,320 --> 00:05:34,800
achieve the desired

153
00:05:34,800 --> 00:05:38,400
efficiency namely that we achieve both

154
00:05:38,400 --> 00:05:40,000
subliminal correlated randomness and

155
00:05:40,000 --> 00:05:41,759
sublinear communication costs for the

156
00:05:41,759 --> 00:05:42,800
offline

157
00:05:42,800 --> 00:05:44,400
but in a different way

158
00:05:44,400 --> 00:05:47,039
so in our approach the parties first run

159
00:05:47,039 --> 00:05:49,759
the same semi honest computation

160
00:05:49,759 --> 00:05:51,440
where they can where they consume only

161
00:05:51,440 --> 00:05:53,759
unauthenticated vivid ripples

162
00:05:53,759 --> 00:05:56,000
and then they run a short lightweight

163
00:05:56,000 --> 00:05:58,160
verification step well which requires

164
00:05:58,160 --> 00:05:59,199
some

165
00:05:59,199 --> 00:06:01,440
extra amount of correlated randomness

166
00:06:01,440 --> 00:06:03,199
however this amount of correlated

167
00:06:03,199 --> 00:06:05,520
alumnus is sublinar in the size of the

168
00:06:05,520 --> 00:06:06,639
circuit

169
00:06:06,639 --> 00:06:08,000
so this means that the dealer for

170
00:06:08,000 --> 00:06:10,400
example can give the parties seeds for

171
00:06:10,400 --> 00:06:12,639
generating unauthenticated triples with

172
00:06:12,639 --> 00:06:14,240
and as we saw

173
00:06:14,240 --> 00:06:16,639
we know how to do it in an efficient way

174
00:06:16,639 --> 00:06:18,639
and for the second part the dealer needs

175
00:06:18,639 --> 00:06:21,680
to give some more sublinear amount of

176
00:06:21,680 --> 00:06:24,639
core electronics so now when we want to

177
00:06:24,639 --> 00:06:26,319
distribute the dealer this means that

178
00:06:26,319 --> 00:06:29,039
the parties need some sublinear protocol

179
00:06:29,039 --> 00:06:31,199
for generating unauthenticated triples

180
00:06:31,199 --> 00:06:32,800
which we know to do

181
00:06:32,800 --> 00:06:37,199
and for the second part because the

182
00:06:37,199 --> 00:06:39,600
correlated randomness is of sublinear

183
00:06:39,600 --> 00:06:42,000
size this means that we can use standard

184
00:06:42,000 --> 00:06:44,479
npc tools to generate the extra amount

185
00:06:44,479 --> 00:06:47,120
of correlated randomness

186
00:06:47,120 --> 00:06:49,280
so our result if we summarize it is a

187
00:06:49,280 --> 00:06:50,880
protocol in the processing model to

188
00:06:50,880 --> 00:06:53,039
compute any arithmetic circuit with

189
00:06:53,039 --> 00:06:55,360
sublinear offline communication costs

190
00:06:55,360 --> 00:06:57,759
sublingual quality randomness

191
00:06:57,759 --> 00:06:59,520
an online phase which is

192
00:06:59,520 --> 00:07:01,120
non-cryptographic

193
00:07:01,120 --> 00:07:02,880
and the security of the protocol is

194
00:07:02,880 --> 00:07:05,280
based on any sublinear communication

195
00:07:05,280 --> 00:07:08,080
protocol for generating unauthenticated

196
00:07:08,080 --> 00:07:09,919
multiplication triples

197
00:07:09,919 --> 00:07:12,319
and for the second part what we need is

198
00:07:12,319 --> 00:07:14,240
only additive homomorphic encryption

199
00:07:14,240 --> 00:07:16,000
schemes

200
00:07:16,000 --> 00:07:18,639
so this is our result um yeah so how do

201
00:07:18,639 --> 00:07:20,400
we compare the previous work so we

202
00:07:20,400 --> 00:07:22,720
already talked about the spizz approach

203
00:07:22,720 --> 00:07:25,840
so in the second column this is um

204
00:07:25,840 --> 00:07:28,080
a work from last year with the same set

205
00:07:28,080 --> 00:07:29,520
of atoms

206
00:07:29,520 --> 00:07:32,319
the bgi and 21 paper where we showed how

207
00:07:32,319 --> 00:07:34,319
to compress the correlator anonymous to

208
00:07:34,319 --> 00:07:35,919
be logarithmic in the size of the

209
00:07:35,919 --> 00:07:37,039
circuit

210
00:07:37,039 --> 00:07:38,639
but the offline communication was still

211
00:07:38,639 --> 00:07:40,400
linear on the side of the circuit here

212
00:07:40,400 --> 00:07:42,560
in this work we increased slightly the

213
00:07:42,560 --> 00:07:44,639
amount of collateral analysis to be

214
00:07:44,639 --> 00:07:47,360
square root but this allows us also also

215
00:07:47,360 --> 00:07:49,199
to compress the offline communication

216
00:07:49,199 --> 00:07:51,680
cost to be a square root

217
00:07:51,680 --> 00:07:54,639
of the side of the circuit

218
00:07:54,960 --> 00:07:56,479
okay so

219
00:07:56,479 --> 00:07:59,680
how so how does our verification

220
00:07:59,680 --> 00:08:01,680
protocol works

221
00:08:01,680 --> 00:08:03,360
so the main building block that we use

222
00:08:03,360 --> 00:08:05,840
in our protocol is zero knowledge fully

223
00:08:05,840 --> 00:08:08,319
linear proof systems uh due to bone

224
00:08:08,319 --> 00:08:10,800
metal from crypto 19

225
00:08:10,800 --> 00:08:12,960
and the idea is that so we have approval

226
00:08:12,960 --> 00:08:14,080
who wish to

227
00:08:14,080 --> 00:08:17,199
prove some statement over an input x

228
00:08:17,199 --> 00:08:19,280
so the idea here is that the approval

229
00:08:19,280 --> 00:08:22,400
will output some proof pi

230
00:08:22,400 --> 00:08:23,919
and then there will be some public

231
00:08:23,919 --> 00:08:26,560
randomness that will be chosen and based

232
00:08:26,560 --> 00:08:29,360
on this public randomness the verifier

233
00:08:29,360 --> 00:08:33,679
will make some queries on the input and

234
00:08:33,679 --> 00:08:34,958
the proof

235
00:08:34,958 --> 00:08:37,440
and then bend based on the answer he

236
00:08:37,440 --> 00:08:38,799
will need to decide whether to accept

237
00:08:38,799 --> 00:08:41,760
the reject and now these proof systems

238
00:08:41,760 --> 00:08:43,519
are called fully linear because the

239
00:08:43,519 --> 00:08:46,160
verifier is only allowed to make

240
00:08:46,160 --> 00:08:48,000
linear queries to the proof and the

241
00:08:48,000 --> 00:08:49,440
inputs

242
00:08:49,440 --> 00:08:51,200
which means that there is some query

243
00:08:51,200 --> 00:08:53,760
vector and you can only

244
00:08:53,760 --> 00:08:55,279
compute an inner product between this

245
00:08:55,279 --> 00:08:58,160
vector and the proof and the input and

246
00:08:58,160 --> 00:09:00,480
based on the answer to decide whether to

247
00:09:00,480 --> 00:09:02,480
accept or reject and we can define

248
00:09:02,480 --> 00:09:03,920
complete the soundness and zero

249
00:09:03,920 --> 00:09:07,760
knowledge for this proof system in

250
00:09:07,760 --> 00:09:09,839
in the standard way

251
00:09:09,839 --> 00:09:13,120
so from this somewhat somehow abstract

252
00:09:13,120 --> 00:09:14,399
tool

253
00:09:14,399 --> 00:09:16,959
we can derive a very

254
00:09:16,959 --> 00:09:18,880
practical primitive which is called

255
00:09:18,880 --> 00:09:21,600
disability knowledge proofs

256
00:09:21,600 --> 00:09:23,120
and here we

257
00:09:23,120 --> 00:09:25,519
will realize this this idea of making

258
00:09:25,519 --> 00:09:27,680
only linear queries by having multiple

259
00:09:27,680 --> 00:09:29,360
verifiers

260
00:09:29,360 --> 00:09:32,240
so each verifier now will hold a piece

261
00:09:32,240 --> 00:09:34,320
of the input x or in other in our

262
00:09:34,320 --> 00:09:37,040
constant context the

263
00:09:37,040 --> 00:09:39,440
the the input x will be secret shared

264
00:09:39,440 --> 00:09:41,279
across the verifiers

265
00:09:41,279 --> 00:09:43,360
and now what we will tell the approval

266
00:09:43,360 --> 00:09:46,240
is to also secretary the proof between

267
00:09:46,240 --> 00:09:48,640
the very files

268
00:09:48,640 --> 00:09:51,279
and then each verify will locally will

269
00:09:51,279 --> 00:09:54,160
query its shares of the proof and the

270
00:09:54,160 --> 00:09:55,440
input

271
00:09:55,440 --> 00:09:59,040
and if x and pi are signatured using a

272
00:09:59,040 --> 00:10:00,720
linear sql chaining scheme this means

273
00:10:00,720 --> 00:10:02,399
that the parties will also obtain a

274
00:10:02,399 --> 00:10:04,560
secret sharing of the answers to the

275
00:10:04,560 --> 00:10:05,680
queries

276
00:10:05,680 --> 00:10:07,519
so they can simply

277
00:10:07,519 --> 00:10:09,680
exchange their answers and recommend

278
00:10:09,680 --> 00:10:11,440
exchange their shares and reconstruct

279
00:10:11,440 --> 00:10:15,120
the answer the answers to the queries

280
00:10:15,120 --> 00:10:16,800
so this is how we realize this idea of

281
00:10:16,800 --> 00:10:19,600
making only linear queries

282
00:10:19,600 --> 00:10:23,200
and what bonnet are showed is that if x

283
00:10:23,200 --> 00:10:25,279
the input x is robustly shared across

284
00:10:25,279 --> 00:10:27,680
the parties meaning that the shells held

285
00:10:27,680 --> 00:10:29,519
by the honest parties are enough for

286
00:10:29,519 --> 00:10:31,600
reconstructing the secret

287
00:10:31,600 --> 00:10:33,600
and the statement to be proven is a

288
00:10:33,600 --> 00:10:35,839
degree to polynomial over the input x

289
00:10:35,839 --> 00:10:36,720
then

290
00:10:36,720 --> 00:10:39,040
there exists a distributed zero energy

291
00:10:39,040 --> 00:10:41,519
protocol with sublinear communication in

292
00:10:41,519 --> 00:10:43,680
the size of the input and with soundness

293
00:10:43,680 --> 00:10:45,519
that holds even if there is a collusion

294
00:10:45,519 --> 00:10:48,079
between the prover and this in a set of

295
00:10:48,079 --> 00:10:50,720
the verifiers

296
00:10:50,720 --> 00:10:53,200
and this tool is very useful to achieve

297
00:10:53,200 --> 00:10:56,160
malicious security in mpc because to

298
00:10:56,160 --> 00:10:58,079
achievement security what we need is a

299
00:10:58,079 --> 00:11:00,959
way to verify that multiplications were

300
00:11:00,959 --> 00:11:02,640
computed correctly

301
00:11:02,640 --> 00:11:04,399
and it's easy to see that the statement

302
00:11:04,399 --> 00:11:06,079
that we want to prove is basically a

303
00:11:06,079 --> 00:11:08,240
degree two polynomial over inputs that

304
00:11:08,240 --> 00:11:09,600
will show the cost abilities because the

305
00:11:09,600 --> 00:11:11,920
parties hold shares of all the inputs

306
00:11:11,920 --> 00:11:13,519
and outputs to multiple of

307
00:11:13,519 --> 00:11:15,360
multiplication gates

308
00:11:15,360 --> 00:11:17,200
and indeed this tool was used in the

309
00:11:17,200 --> 00:11:19,600
honest majority setting

310
00:11:19,600 --> 00:11:20,959
to achieve

311
00:11:20,959 --> 00:11:23,360
malicious security with sublinear

312
00:11:23,360 --> 00:11:24,880
additive overhead

313
00:11:24,880 --> 00:11:26,399
relying on the fact that in the honest

314
00:11:26,399 --> 00:11:28,320
majority setting the secret sharing is

315
00:11:28,320 --> 00:11:31,200
inherently robust

316
00:11:31,200 --> 00:11:33,200
but when we move to the dishonest model

317
00:11:33,200 --> 00:11:35,040
sitting it's much it's much more

318
00:11:35,040 --> 00:11:36,800
challenging because because how can we

319
00:11:36,800 --> 00:11:38,160
achieve robustness

320
00:11:38,160 --> 00:11:39,360
without increasing the amount of

321
00:11:39,360 --> 00:11:41,279
collateralness

322
00:11:41,279 --> 00:11:44,640
so the idea that we used in bgin 21 was

323
00:11:44,640 --> 00:11:47,839
um to use the dealer as one of the

324
00:11:47,839 --> 00:11:49,760
parties and to use him in order to

325
00:11:49,760 --> 00:11:52,399
achieve robustness so first we defined a

326
00:11:52,399 --> 00:11:53,839
robust re-sharing scheme using the

327
00:11:53,839 --> 00:11:56,000
dealer which we called the style sql

328
00:11:56,000 --> 00:11:58,560
sharing scheme and then we showed how to

329
00:11:58,560 --> 00:12:00,639
um and we use the same id here in this

330
00:12:00,639 --> 00:12:03,920
work how to maintain this robustness

331
00:12:03,920 --> 00:12:06,320
in the verification protocol

332
00:12:06,320 --> 00:12:08,320
and here the the way to do it is to use

333
00:12:08,320 --> 00:12:10,399
the dealer as a verifier and it is a

334
00:12:10,399 --> 00:12:12,639
buddhist proof

335
00:12:12,639 --> 00:12:14,720
so how does it work so first what is

336
00:12:14,720 --> 00:12:17,360
this style signature scheme so that is

337
00:12:17,360 --> 00:12:20,240
very simple and is basically used

338
00:12:20,240 --> 00:12:21,440
everywhere

339
00:12:21,440 --> 00:12:23,120
so the idea is that

340
00:12:23,120 --> 00:12:26,079
for each wire

341
00:12:26,079 --> 00:12:28,160
for example for inputs and outputs of

342
00:12:28,160 --> 00:12:30,320
multiplication gates what we want is

343
00:12:30,320 --> 00:12:32,800
that each party will hold

344
00:12:32,800 --> 00:12:34,720
the must secret

345
00:12:34,720 --> 00:12:36,959
and a share of the mask while the dealer

346
00:12:36,959 --> 00:12:38,800
knows all the

347
00:12:38,800 --> 00:12:41,680
the mask and all the shelves

348
00:12:41,680 --> 00:12:43,360
and this gives us the robustness that we

349
00:12:43,360 --> 00:12:45,760
need because now its secret can be

350
00:12:45,760 --> 00:12:48,320
reconstructed by each party plus the

351
00:12:48,320 --> 00:12:49,519
dealer

352
00:12:49,519 --> 00:12:52,079
right so each honest party needs only to

353
00:12:52,079 --> 00:12:53,440
and the dealer can reconstruct the

354
00:12:53,440 --> 00:12:55,360
secret and this is uh

355
00:12:55,360 --> 00:12:57,920
suffices what we need and this scheme is

356
00:12:57,920 --> 00:13:00,240
basically sim simplicity or sometimes

357
00:13:00,240 --> 00:13:02,240
even explicitly used in many seminars

358
00:13:02,240 --> 00:13:04,000
protocols so

359
00:13:04,000 --> 00:13:05,839
what i mean to show is how to use it how

360
00:13:05,839 --> 00:13:07,760
to maintain this robustness also in the

361
00:13:07,760 --> 00:13:10,320
verification protocol given that we have

362
00:13:10,320 --> 00:13:13,120
um given that the parties hold these

363
00:13:13,120 --> 00:13:16,560
mass values on the wires of the circuit

364
00:13:16,560 --> 00:13:20,160
so how do we verify multiplications

365
00:13:20,160 --> 00:13:22,000
so what about we wish to verify is that

366
00:13:22,000 --> 00:13:23,519
the output of each multiplication is

367
00:13:23,519 --> 00:13:26,079
consistent with the in with the inputs

368
00:13:26,079 --> 00:13:28,880
so we can replace each value here with

369
00:13:28,880 --> 00:13:33,120
the mass value plus the mask

370
00:13:33,120 --> 00:13:35,200
right so and the parties of course want

371
00:13:35,200 --> 00:13:37,279
to verify all multiplications together

372
00:13:37,279 --> 00:13:38,959
so they can take a random linear

373
00:13:38,959 --> 00:13:41,360
combination of all these of all these

374
00:13:41,360 --> 00:13:43,279
these equations

375
00:13:43,279 --> 00:13:45,440
and eventually obtain one

376
00:13:45,440 --> 00:13:48,959
equation that we want to check

377
00:13:48,959 --> 00:13:50,880
so now so this is the equation we want

378
00:13:50,880 --> 00:13:53,760
to check if we look at this equation

379
00:13:53,760 --> 00:13:57,519
so we can easily see that these values

380
00:13:57,519 --> 00:14:00,399
are known by all parties these are the

381
00:14:00,399 --> 00:14:02,480
random coefficients that the parties

382
00:14:02,480 --> 00:14:04,320
choose jointly choose at the beginning

383
00:14:04,320 --> 00:14:06,480
of the verification protocol and these

384
00:14:06,480 --> 00:14:08,000
values become public

385
00:14:08,000 --> 00:14:09,680
and the other values are the mass values

386
00:14:09,680 --> 00:14:12,240
that the parties saw during the seminars

387
00:14:12,240 --> 00:14:14,480
computation

388
00:14:14,480 --> 00:14:16,800
the other values these are the masks are

389
00:14:16,800 --> 00:14:19,279
known to the dealer and shell to the

390
00:14:19,279 --> 00:14:20,959
parties

391
00:14:20,959 --> 00:14:22,720
if we open this

392
00:14:22,720 --> 00:14:24,880
equation and do all the math what we

393
00:14:24,880 --> 00:14:28,079
will obtain is that we can express this

394
00:14:28,079 --> 00:14:30,320
we can express this equation as an inner

395
00:14:30,320 --> 00:14:32,320
product between two vectors

396
00:14:32,320 --> 00:14:34,560
one vector contain the values that are

397
00:14:34,560 --> 00:14:36,639
known by all parties and the second

398
00:14:36,639 --> 00:14:39,279
vector contains uh values that are known

399
00:14:39,279 --> 00:14:41,600
by the dealer and shared to the parties

400
00:14:41,600 --> 00:14:43,040
so this is what the parties wish to

401
00:14:43,040 --> 00:14:45,279
verify

402
00:14:45,279 --> 00:14:48,560
so what we get here is first of all an

403
00:14:48,560 --> 00:14:49,839
expression which is a degree to

404
00:14:49,839 --> 00:14:51,440
polynomial

405
00:14:51,440 --> 00:14:53,519
and second that it that the input is

406
00:14:53,519 --> 00:14:55,760
shared in a robust way in the in the you

407
00:14:55,760 --> 00:14:57,440
know best way because each input is

408
00:14:57,440 --> 00:15:00,160
known by either an honest party or by

409
00:15:00,160 --> 00:15:01,760
the dealer

410
00:15:01,760 --> 00:15:03,839
and therefore we know that we can prove

411
00:15:03,839 --> 00:15:05,040
this statement using disability

412
00:15:05,040 --> 00:15:06,800
generation proofs with sublinear

413
00:15:06,800 --> 00:15:09,920
communication in the size of the input

414
00:15:09,920 --> 00:15:11,920
so we know there exists just such a

415
00:15:11,920 --> 00:15:13,600
protocol with subliminal communication

416
00:15:13,600 --> 00:15:15,279
it only remains to show how to emulate

417
00:15:15,279 --> 00:15:17,600
this protocol in our setting

418
00:15:17,600 --> 00:15:20,160
so the idea is that

419
00:15:20,160 --> 00:15:21,040
uh

420
00:15:21,040 --> 00:15:24,320
so we will use the dealer as a verifier

421
00:15:24,320 --> 00:15:26,399
as well so we have the parties who know

422
00:15:26,399 --> 00:15:27,839
their inputs

423
00:15:27,839 --> 00:15:30,079
and we have the dealer who know the

424
00:15:30,079 --> 00:15:32,000
remaining parts of the inputs

425
00:15:32,000 --> 00:15:34,079
now we will ask the approval to also

426
00:15:34,079 --> 00:15:35,680
secretary the proof in the same way

427
00:15:35,680 --> 00:15:37,440
meaning that

428
00:15:37,440 --> 00:15:40,399
the parties will see the masked proof

429
00:15:40,399 --> 00:15:43,040
and the dillo will hold the mask

430
00:15:43,040 --> 00:15:45,519
so this means now that each

431
00:15:45,519 --> 00:15:47,040
piece of information the it would the

432
00:15:47,040 --> 00:15:48,000
input

433
00:15:48,000 --> 00:15:49,839
and the proof are additively shared

434
00:15:49,839 --> 00:15:53,519
between each party and the dealer

435
00:15:53,519 --> 00:15:54,800
so now

436
00:15:54,800 --> 00:15:58,160
each party and the dealer can simply

437
00:15:58,160 --> 00:16:00,880
run the linear queries over their shares

438
00:16:00,880 --> 00:16:02,800
of the input and

439
00:16:02,800 --> 00:16:04,320
the the proof

440
00:16:04,320 --> 00:16:07,199
and obtain a star sharing of the answer

441
00:16:07,199 --> 00:16:09,279
meaning that the answers to the quiz are

442
00:16:09,279 --> 00:16:11,920
shared between each party and the dealer

443
00:16:11,920 --> 00:16:13,759
so this robustness of the secret sharing

444
00:16:13,759 --> 00:16:15,199
that we maintain is eventually what

445
00:16:15,199 --> 00:16:16,720
gives us the soundness of the proof

446
00:16:16,720 --> 00:16:18,240
meaning that

447
00:16:18,240 --> 00:16:20,399
a corporate party cannot cheat

448
00:16:20,399 --> 00:16:22,880
so it only remains to show uh how to

449
00:16:22,880 --> 00:16:24,480
emulate the program right because who is

450
00:16:24,480 --> 00:16:26,800
the proven here no one's know

451
00:16:26,800 --> 00:16:28,639
the input right

452
00:16:28,639 --> 00:16:31,600
so the idea the idea is that we will

453
00:16:31,600 --> 00:16:34,560
also let the parties emulate together

454
00:16:34,560 --> 00:16:35,759
the approval

455
00:16:35,759 --> 00:16:38,560
and he will allow the fact that each uh

456
00:16:38,560 --> 00:16:40,800
each value here is either known the

457
00:16:40,800 --> 00:16:42,320
vector is known by all parties and the

458
00:16:42,320 --> 00:16:44,399
vector b is shared to the parties

459
00:16:44,399 --> 00:16:46,079
because each party holds a share of all

460
00:16:46,079 --> 00:16:47,600
the masks

461
00:16:47,600 --> 00:16:49,759
so what we can do so what so we can we

462
00:16:49,759 --> 00:16:51,519
can show that each party can locally

463
00:16:51,519 --> 00:16:52,639
compute

464
00:16:52,639 --> 00:16:55,519
its additive shell of the proof

465
00:16:55,519 --> 00:16:56,880
i

466
00:16:56,880 --> 00:16:58,079
and once

467
00:16:58,079 --> 00:17:00,399
each party locally compute its addition

468
00:17:00,399 --> 00:17:02,720
it can simply start shell its additive

469
00:17:02,720 --> 00:17:04,000
share meaning that each party will

470
00:17:04,000 --> 00:17:06,799
broadcast to the other parties

471
00:17:06,799 --> 00:17:09,280
his masked share of the proof

472
00:17:09,280 --> 00:17:11,439
and then the parties can locally add all

473
00:17:11,439 --> 00:17:14,160
these masked shares and obtain the

474
00:17:14,160 --> 00:17:16,240
masked proof while the dealer knows the

475
00:17:16,240 --> 00:17:17,359
mask

476
00:17:17,359 --> 00:17:19,599
so this is how we can emulate

477
00:17:19,599 --> 00:17:22,799
the puzzle by all parties

478
00:17:22,799 --> 00:17:24,240
so this is the main idea so what do we

479
00:17:24,240 --> 00:17:26,079
get from this process what do we get

480
00:17:26,079 --> 00:17:27,919
from using the dealer as one of the very

481
00:17:27,919 --> 00:17:29,120
files

482
00:17:29,120 --> 00:17:31,440
so as we saw it's each piece of

483
00:17:31,440 --> 00:17:32,559
information is known by anonymous

484
00:17:32,559 --> 00:17:33,919
participant this is what gives us the

485
00:17:33,919 --> 00:17:36,080
robustness that we need which leads to

486
00:17:36,080 --> 00:17:38,240
soundness

487
00:17:38,240 --> 00:17:40,080
the fact that the statement is a is a

488
00:17:40,080 --> 00:17:41,679
two degree polynomial as we said before

489
00:17:41,679 --> 00:17:43,120
this is what gives us the sublinear

490
00:17:43,120 --> 00:17:44,880
communication

491
00:17:44,880 --> 00:17:47,120
now because the communication is linear

492
00:17:47,120 --> 00:17:49,840
and because the dealer acts as one

493
00:17:49,840 --> 00:17:53,280
as one as a verifier this means that the

494
00:17:53,280 --> 00:17:54,559
the communication from the side of the

495
00:17:54,559 --> 00:17:57,120
dealers is also sublinear in the size of

496
00:17:57,120 --> 00:17:58,320
the circuit

497
00:17:58,320 --> 00:18:00,080
and the communication that the messages

498
00:18:00,080 --> 00:18:01,440
from the side of the data will be given

499
00:18:01,440 --> 00:18:05,120
as correlated randomness to the parties

500
00:18:05,280 --> 00:18:07,200
so and finally because the dealer

501
00:18:07,200 --> 00:18:08,880
performed all its computations over

502
00:18:08,880 --> 00:18:10,320
random data

503
00:18:10,320 --> 00:18:12,720
over then the dealer can basically

504
00:18:12,720 --> 00:18:15,200
pre-process its computation and

505
00:18:15,200 --> 00:18:17,280
enhance the result as correlated

506
00:18:17,280 --> 00:18:20,080
adamness to the parties

507
00:18:20,080 --> 00:18:21,919
so this is what we achieve by using the

508
00:18:21,919 --> 00:18:24,880
dealer as a verifier

509
00:18:24,880 --> 00:18:27,600
okay so we have some concrete costs

510
00:18:27,600 --> 00:18:30,000
in the paper but because time is running

511
00:18:30,000 --> 00:18:30,720
up

512
00:18:30,720 --> 00:18:31,600
um

513
00:18:31,600 --> 00:18:34,559
let me jump into how to distribute the

514
00:18:34,559 --> 00:18:36,640
dealer so what are the dealers what does

515
00:18:36,640 --> 00:18:38,320
the dealer compute

516
00:18:38,320 --> 00:18:39,840
so it didn't show you exactly how

517
00:18:39,840 --> 00:18:41,600
exactly the the disability knowledge

518
00:18:41,600 --> 00:18:43,360
proof protocol works but believe me that

519
00:18:43,360 --> 00:18:45,919
what the deal does is the following so

520
00:18:45,919 --> 00:18:48,400
the dealer needs to choose a random

521
00:18:48,400 --> 00:18:49,520
point

522
00:18:49,520 --> 00:18:50,720
tower

523
00:18:50,720 --> 00:18:52,559
and then evaluate

524
00:18:52,559 --> 00:18:54,080
square root

525
00:18:54,080 --> 00:18:56,720
polynomials where the degree of each

526
00:18:56,720 --> 00:18:58,480
polynomial is square root inside of the

527
00:18:58,480 --> 00:18:59,440
circuit

528
00:18:59,440 --> 00:19:02,240
on this random point tau and the result

529
00:19:02,240 --> 00:19:04,640
the evaluation of all these polynomials

530
00:19:04,640 --> 00:19:06,400
is the um

531
00:19:06,400 --> 00:19:07,919
is its correlation is the correlated

532
00:19:07,919 --> 00:19:10,559
anonymous that is given to the parities

533
00:19:10,559 --> 00:19:12,480
so this is what they did at that and the

534
00:19:12,480 --> 00:19:14,640
in these polynomials are defined by the

535
00:19:14,640 --> 00:19:16,799
viva triples

536
00:19:16,799 --> 00:19:18,000
okay so the dealers need to give the

537
00:19:18,000 --> 00:19:20,000
parties shares of vivid triples and

538
00:19:20,000 --> 00:19:20,880
these

539
00:19:20,880 --> 00:19:22,720
evaluation points of square root

540
00:19:22,720 --> 00:19:25,360
polynomials so in order to distribute

541
00:19:25,360 --> 00:19:26,960
the delay

542
00:19:26,960 --> 00:19:28,799
what we suggest is to do the following

543
00:19:28,799 --> 00:19:32,480
so we now let the parties uh generate

544
00:19:32,480 --> 00:19:34,720
encryptions of the power of tau

545
00:19:34,720 --> 00:19:36,559
and we will use an additive homomorphic

546
00:19:36,559 --> 00:19:39,200
encryption and now each party who holds

547
00:19:39,200 --> 00:19:41,280
shells of the bible triples can simply

548
00:19:41,280 --> 00:19:43,840
evaluate homomorphically

549
00:19:43,840 --> 00:19:46,000
the polynomial his shell of the

550
00:19:46,000 --> 00:19:47,280
polynomial

551
00:19:47,280 --> 00:19:50,160
on the encrypted values

552
00:19:50,160 --> 00:19:53,840
and obtain an encryption of uh

553
00:19:53,840 --> 00:19:57,200
of of a share of the of the evaluation

554
00:19:57,200 --> 00:19:59,520
of the of each polynomial and then the

555
00:19:59,520 --> 00:20:01,120
parties can simply exchange the

556
00:20:01,120 --> 00:20:02,799
encryption and then

557
00:20:02,799 --> 00:20:04,640
decrypt the answers

558
00:20:04,640 --> 00:20:06,960
so what if we look at the communication

559
00:20:06,960 --> 00:20:08,960
of this protocol so the parties need to

560
00:20:08,960 --> 00:20:10,799
interact in order to generate square

561
00:20:10,799 --> 00:20:13,200
root ciphertext but this can be done in

562
00:20:13,200 --> 00:20:15,919
a generic way with sublinear cost

563
00:20:15,919 --> 00:20:17,919
for generating the pivot triples we can

564
00:20:17,919 --> 00:20:19,840
use as we said

565
00:20:19,840 --> 00:20:22,000
pcgs for example or any subliminal

566
00:20:22,000 --> 00:20:23,520
protocol for generating shares of

567
00:20:23,520 --> 00:20:25,760
unauthenticated people troopers and

568
00:20:25,760 --> 00:20:27,840
finally the parties need to communicate

569
00:20:27,840 --> 00:20:30,240
in order to decrypt square root

570
00:20:30,240 --> 00:20:32,960
ciphertext so overall the amount of

571
00:20:32,960 --> 00:20:35,120
communication is square root in this

572
00:20:35,120 --> 00:20:37,280
side of the circuit so this is the high

573
00:20:37,280 --> 00:20:38,799
level idea

574
00:20:38,799 --> 00:20:40,799
but of course there is some more work to

575
00:20:40,799 --> 00:20:43,280
do what i described is basically uh

576
00:20:43,280 --> 00:20:44,159
the

577
00:20:44,159 --> 00:20:46,080
the basic framework

578
00:20:46,080 --> 00:20:47,919
uh with uh

579
00:20:47,919 --> 00:20:50,960
and this this gives us uh an offline

580
00:20:50,960 --> 00:20:53,919
with some own security for uh online

581
00:20:53,919 --> 00:20:55,520
with malaysia security

582
00:20:55,520 --> 00:20:57,440
it's easy to see also how to using the

583
00:20:57,440 --> 00:20:59,280
generic tool how to achieve cover

584
00:20:59,280 --> 00:21:01,760
security with subliminal communication

585
00:21:01,760 --> 00:21:03,840
and to achievably security so so

586
00:21:03,840 --> 00:21:06,000
feasibility wise we can use any generic

587
00:21:06,000 --> 00:21:08,240
communication preserving compiler

588
00:21:08,240 --> 00:21:10,240
if we want a complete efficient

589
00:21:10,240 --> 00:21:12,080
solution then

590
00:21:12,080 --> 00:21:14,000
there are some challenges here in

591
00:21:14,000 --> 00:21:16,640
particular what happens if a corporati

592
00:21:16,640 --> 00:21:17,679
use

593
00:21:17,679 --> 00:21:19,679
that does not use the share that he

594
00:21:19,679 --> 00:21:21,760
received from the pcgs

595
00:21:21,760 --> 00:21:23,200
then this is a problem and we need to

596
00:21:23,200 --> 00:21:24,400
deal with some

597
00:21:24,400 --> 00:21:26,400
by adding some more tools

598
00:21:26,400 --> 00:21:29,120
and in particular this might this

599
00:21:29,120 --> 00:21:31,440
requires the uh

600
00:21:31,440 --> 00:21:33,760
homomorphic inclusion scheme to be also

601
00:21:33,760 --> 00:21:36,799
to to satisfy also some assumption that

602
00:21:36,799 --> 00:21:39,520
is called the linear only assumption

603
00:21:39,520 --> 00:21:41,760
but this i will leave you to read in the

604
00:21:41,760 --> 00:21:44,320
full version of the paper and yeah thank

605
00:21:44,320 --> 00:21:46,879
you very much

606
00:21:51,280 --> 00:21:52,559
thanks ariel

607
00:21:52,559 --> 00:21:55,960
are there questions

608
00:21:58,480 --> 00:22:00,320
if not then i have one

609
00:22:00,320 --> 00:22:01,840
um

610
00:22:01,840 --> 00:22:03,120
is there a way of turning your

611
00:22:03,120 --> 00:22:04,640
construction into something that has

612
00:22:04,640 --> 00:22:06,559
identifiable board

613
00:22:06,559 --> 00:22:09,120
um for emergency secure broker oh that's

614
00:22:09,120 --> 00:22:11,200
a good question we didn't think about it

615
00:22:11,200 --> 00:22:13,360
too much

616
00:22:13,360 --> 00:22:14,960
i know

617
00:22:14,960 --> 00:22:16,400
but if you have malicious security in

618
00:22:16,400 --> 00:22:18,000
the online phase

619
00:22:18,000 --> 00:22:18,960
um

620
00:22:18,960 --> 00:22:20,720
and maybe a mpc protocol for the

621
00:22:20,720 --> 00:22:22,320
pre-processing that is also having

622
00:22:22,320 --> 00:22:24,320
identifiable abort and maybe it could

623
00:22:24,320 --> 00:22:26,159
work

624
00:22:26,159 --> 00:22:28,559
might be yeah but we didn't think about

625
00:22:28,559 --> 00:22:29,760
it yeah

626
00:22:29,760 --> 00:22:32,240
okay good question thank you much ariel

627
00:22:32,240 --> 00:22:33,580
thank you

628
00:22:33,580 --> 00:22:36,649
[Applause]

