1
00:00:02,800 --> 00:00:04,880
okay uh good morning everybody welcome

2
00:00:04,880 --> 00:00:06,640
to uh the session post quantum

3
00:00:06,640 --> 00:00:08,240
cryptography three

4
00:00:08,240 --> 00:00:09,040
so

5
00:00:09,040 --> 00:00:10,639
it's the final day of the conference so

6
00:00:10,639 --> 00:00:12,400
i hope you've been enjoying yourself so

7
00:00:12,400 --> 00:00:13,200
far

8
00:00:13,200 --> 00:00:15,280
uh for those of you who are really awake

9
00:00:15,280 --> 00:00:18,000
and keeping an eye on the program once

10
00:00:18,000 --> 00:00:19,520
upon a time this was called post quantum

11
00:00:19,520 --> 00:00:21,520
cryptography one because there was

12
00:00:21,520 --> 00:00:23,439
quantum one post quantum two quantum one

13
00:00:23,439 --> 00:00:25,519
post quantum two but now it's supposed

14
00:00:25,519 --> 00:00:26,880
quantum three

15
00:00:26,880 --> 00:00:29,119
uh so we have three talks in this

16
00:00:29,119 --> 00:00:31,439
session the first two will be online and

17
00:00:31,439 --> 00:00:33,040
the third one will be

18
00:00:33,040 --> 00:00:34,399
live here

19
00:00:34,399 --> 00:00:36,399
in person

20
00:00:36,399 --> 00:00:39,200
the first talk is watermarking prfs

21
00:00:39,200 --> 00:00:42,960
against quantum adversaries by friki

22
00:00:42,960 --> 00:00:44,320
kitagawa

23
00:00:44,320 --> 00:00:45,280
and

24
00:00:45,280 --> 00:00:46,239
i will

25
00:00:46,239 --> 00:00:47,280
let him

26
00:00:47,280 --> 00:00:50,480
also announce his co-author

27
00:00:50,480 --> 00:00:52,480
so please go ahead

28
00:00:52,480 --> 00:00:54,399
can you see my slice

29
00:00:54,399 --> 00:00:55,680
yes

30
00:00:55,680 --> 00:00:57,760
so thank you for the introduction uh i'm

31
00:00:57,760 --> 00:00:59,440
freaky from mtt

32
00:00:59,440 --> 00:01:01,359
and this is a joint work with rio

33
00:01:01,359 --> 00:01:03,600
nishmaki from ntt

34
00:01:03,600 --> 00:01:05,760
i'm talking i'm going to talk about

35
00:01:05,760 --> 00:01:07,840
watermarking prf against contaminated

36
00:01:07,840 --> 00:01:10,240
batteries

37
00:01:10,240 --> 00:01:12,320
so i will start with uh what is software

38
00:01:12,320 --> 00:01:13,760
watermarking

39
00:01:13,760 --> 00:01:16,479
so in software water marking

40
00:01:16,479 --> 00:01:19,680
uh we can embed a mark into a program

41
00:01:19,680 --> 00:01:22,000
uh in the way that uh if the mark is

42
00:01:22,000 --> 00:01:24,080
removed uh the functionality of the

43
00:01:24,080 --> 00:01:27,360
program is also destroyed

44
00:01:27,360 --> 00:01:29,520
the purpose of software water marking is

45
00:01:29,520 --> 00:01:31,840
a proving ownership preventing illegal

46
00:01:31,840 --> 00:01:34,799
copies and so on

47
00:01:36,079 --> 00:01:38,640
so in software water marking we can deal

48
00:01:38,640 --> 00:01:41,280
with only unrunnable programs

49
00:01:41,280 --> 00:01:44,479
so if a program is runnable the mark can

50
00:01:44,479 --> 00:01:47,280
be easily removed by simply running the

51
00:01:47,280 --> 00:01:50,960
description of the original program

52
00:01:51,520 --> 00:01:53,920
so for this reason many previous works

53
00:01:53,920 --> 00:01:55,920
have focused on water marking

54
00:01:55,920 --> 00:01:58,079
cryptographic programs

55
00:01:58,079 --> 00:02:00,240
so especially most of them studied a

56
00:02:00,240 --> 00:02:02,079
water martin prf

57
00:02:02,079 --> 00:02:04,399
where we can embed the mark into

58
00:02:04,399 --> 00:02:06,840
evaluation subject of the

59
00:02:06,840 --> 00:02:10,479
prf so prf is one of the simplest crypto

60
00:02:10,479 --> 00:02:12,959
primitive but at the same time it is

61
00:02:12,959 --> 00:02:14,879
sufficient for realizing many other

62
00:02:14,879 --> 00:02:18,959
crypt programs crypto primitives

63
00:02:19,360 --> 00:02:21,680
also some recent works found an

64
00:02:21,680 --> 00:02:24,400
interesting application of watermark

65
00:02:24,400 --> 00:02:27,200
encrypt programs to quantum crypto

66
00:02:27,200 --> 00:02:29,680
so by combining it with quantum money we

67
00:02:29,680 --> 00:02:32,239
can construct a secure software racing

68
00:02:32,239 --> 00:02:36,599
which is a variant of copy protection

69
00:02:37,280 --> 00:02:39,200
so in this work uh we study water

70
00:02:39,200 --> 00:02:42,640
marking prf against quantum advisories

71
00:02:42,640 --> 00:02:45,040
uh more concretely our goal is to

72
00:02:45,040 --> 00:02:47,280
propose a water marking scheme

73
00:02:47,280 --> 00:02:49,519
such that even if a quantum of the

74
00:02:49,519 --> 00:02:52,080
password generates a quantum program

75
00:02:52,080 --> 00:02:54,640
in order to remove the embed mark we can

76
00:02:54,640 --> 00:02:58,559
correctly extract the embed mark

77
00:02:59,760 --> 00:03:01,680
and this is our result

78
00:03:01,680 --> 00:03:04,319
so first uh we define water marking prf

79
00:03:04,319 --> 00:03:07,839
against contaminated batteries

80
00:03:08,319 --> 00:03:10,879
especially we define unremovability

81
00:03:10,879 --> 00:03:12,800
which is the main security notion of

82
00:03:12,800 --> 00:03:15,760
water marking prf against advisors who

83
00:03:15,760 --> 00:03:18,879
output content programs

84
00:03:18,879 --> 00:03:21,440
also we construct watermarking prf

85
00:03:21,440 --> 00:03:24,959
against quantum advisories

86
00:03:25,040 --> 00:03:28,879
concretely we propose two constructions

87
00:03:28,879 --> 00:03:30,959
the first one is secret acceptable

88
00:03:30,959 --> 00:03:33,440
scheme are based on lwe

89
00:03:33,440 --> 00:03:35,280
and the other one is public

90
00:03:35,280 --> 00:03:38,239
extractable scheme based on io

91
00:03:38,239 --> 00:03:40,959
so here he secret exactly means that we

92
00:03:40,959 --> 00:03:43,599
need secret extraction key in order to

93
00:03:43,599 --> 00:03:45,599
extract the embed mark

94
00:03:45,599 --> 00:03:47,599
and on the other hand public acceptable

95
00:03:47,599 --> 00:03:50,000
means that we don't need any secret

96
00:03:50,000 --> 00:03:51,200
information

97
00:03:51,200 --> 00:03:53,599
in order to extract the embedded mark so

98
00:03:53,599 --> 00:03:57,760
anyone can extract the embedded mark

99
00:03:58,720 --> 00:04:00,799
so our construction methodology for

100
00:04:00,799 --> 00:04:02,720
achieving these constructions is highly

101
00:04:02,720 --> 00:04:05,200
general so it can be extended to

102
00:04:05,200 --> 00:04:07,360
watermarking other primitives such as

103
00:04:07,360 --> 00:04:09,360
public key encryption

104
00:04:09,360 --> 00:04:13,159
so this is our result

105
00:04:14,000 --> 00:04:16,639
i will talk about the technical overview

106
00:04:16,639 --> 00:04:18,720
of this work

107
00:04:18,720 --> 00:04:20,720
so the biggest issue we have to deal

108
00:04:20,720 --> 00:04:22,079
with is that

109
00:04:22,079 --> 00:04:24,639
content programs are inherently stateful

110
00:04:24,639 --> 00:04:26,240
programs

111
00:04:26,240 --> 00:04:28,479
so this problem was uh pointed out by

112
00:04:28,479 --> 00:04:30,560
gendry in the context of uh trader

113
00:04:30,560 --> 00:04:33,919
tracing against contemporary bossaries

114
00:04:33,919 --> 00:04:36,160
so in uh crashville trader tracing or

115
00:04:36,160 --> 00:04:38,080
classical water marking

116
00:04:38,080 --> 00:04:40,720
we usually assume that pilot programs

117
00:04:40,720 --> 00:04:43,280
are stateless programs

118
00:04:43,280 --> 00:04:45,600
so this assumption is reasonable since

119
00:04:45,600 --> 00:04:48,320
we can rewind pilot programs into their

120
00:04:48,320 --> 00:04:49,680
original state

121
00:04:49,680 --> 00:04:51,759
if those pilot programs are classical

122
00:04:51,759 --> 00:04:53,520
programs

123
00:04:53,520 --> 00:04:56,320
however in general it is impossible to

124
00:04:56,320 --> 00:04:58,560
rewind quantum programs into their

125
00:04:58,560 --> 00:05:00,240
original state

126
00:05:00,240 --> 00:05:02,320
so we have to deal with content programs

127
00:05:02,320 --> 00:05:05,759
as stateful programs

128
00:05:05,840 --> 00:05:08,400
so we have to define our unremovability

129
00:05:08,400 --> 00:05:10,320
notion and we have to construct our

130
00:05:10,320 --> 00:05:11,199
scheme

131
00:05:11,199 --> 00:05:13,840
by taking this stateful nature of

132
00:05:13,840 --> 00:05:18,000
content programs into consideration

133
00:05:18,800 --> 00:05:21,440
uh fortunately for the definitional work

134
00:05:21,440 --> 00:05:23,680
we can use generally technique are

135
00:05:23,680 --> 00:05:26,000
developed in context of traitor tracing

136
00:05:26,000 --> 00:05:29,520
against quantum advisories

137
00:05:30,320 --> 00:05:32,479
however for the construction work we

138
00:05:32,479 --> 00:05:34,960
cannot use january's arterial tracing

139
00:05:34,960 --> 00:05:37,360
technique so we propose new extraction

140
00:05:37,360 --> 00:05:39,759
method

141
00:05:39,759 --> 00:05:41,840
so here after i will talk about the

142
00:05:41,840 --> 00:05:45,440
technical details of our work

143
00:05:48,080 --> 00:05:51,120
so i will start with the definition of

144
00:05:51,120 --> 00:05:53,039
quantum water marking a water marking

145
00:05:53,039 --> 00:05:55,520
against quantum advisories

146
00:05:55,520 --> 00:05:58,080
so the syntax we use in this work is

147
00:05:58,080 --> 00:05:59,919
essentially the same as single key

148
00:05:59,919 --> 00:06:03,919
traceable prf uh introduced by guerrero

149
00:06:03,919 --> 00:06:06,400
and it consists of four algorithms

150
00:06:06,400 --> 00:06:11,198
a gem ebar mark and extract

151
00:06:11,759 --> 00:06:13,759
the general algorithm and eval algorithm

152
00:06:13,759 --> 00:06:16,720
form standard prf except that the

153
00:06:16,720 --> 00:06:18,800
general algorithm also output

154
00:06:18,800 --> 00:06:20,639
extraction key xk

155
00:06:20,639 --> 00:06:24,319
together with the prf key

156
00:06:25,280 --> 00:06:28,080
and the mac algorithm takes us into prf

157
00:06:28,080 --> 00:06:30,880
key and the mark m and output a marked

158
00:06:30,880 --> 00:06:35,159
evaluation circuit c prime

159
00:06:35,199 --> 00:06:37,520
and finally the extraction algorithm

160
00:06:37,520 --> 00:06:40,160
takes us into extraction t and quantum

161
00:06:40,160 --> 00:06:44,639
program psi and output a mark m

162
00:06:45,360 --> 00:06:47,759
so we require a functionality preserving

163
00:06:47,759 --> 00:06:49,840
for watermarking prf which is

164
00:06:49,840 --> 00:06:52,000
corresponding to the correctness notion

165
00:06:52,000 --> 00:06:54,319
of watermarking prf

166
00:06:54,319 --> 00:06:56,560
and functionality preserving requires

167
00:06:56,560 --> 00:06:57,280
that

168
00:06:57,280 --> 00:06:59,360
the marked evaluation circuit c prime

169
00:06:59,360 --> 00:07:01,680
has almost the same functionality as the

170
00:07:01,680 --> 00:07:04,639
original variation circuit

171
00:07:04,639 --> 00:07:06,639
so this is a syntax and functionality

172
00:07:06,639 --> 00:07:09,199
preserving of automating prf against the

173
00:07:09,199 --> 00:07:11,199
quantum advisories

174
00:07:11,199 --> 00:07:14,080
and now i move on to

175
00:07:14,080 --> 00:07:17,840
the security and removability

176
00:07:17,840 --> 00:07:20,000
so the definition of unremovability is

177
00:07:20,000 --> 00:07:22,560
roughly as follows

178
00:07:22,560 --> 00:07:24,639
so we generate a multivibration circuit

179
00:07:24,639 --> 00:07:27,840
c prime from prf key and mac m

180
00:07:27,840 --> 00:07:29,759
and we give it to an adversary and

181
00:07:29,759 --> 00:07:31,840
otherwise it generates a quantum program

182
00:07:31,840 --> 00:07:34,239
psi

183
00:07:34,319 --> 00:07:35,199
then

184
00:07:35,199 --> 00:07:37,440
only mobility requires that

185
00:07:37,440 --> 00:07:39,919
no adversary can generate a quantum

186
00:07:39,919 --> 00:07:42,880
program site such that a psi is a good

187
00:07:42,880 --> 00:07:45,039
content program in the sense that its

188
00:07:45,039 --> 00:07:46,960
functionality is close to the original

189
00:07:46,960 --> 00:07:49,680
operation circuit but the extraction

190
00:07:49,680 --> 00:07:53,440
algorithm fails to extract m

191
00:07:54,879 --> 00:07:57,039
of course to make this definition

192
00:07:57,039 --> 00:07:59,440
rigorous we have to define the notion of

193
00:07:59,440 --> 00:08:03,599
good quantum program more concretely

194
00:08:04,720 --> 00:08:06,000
so basically

195
00:08:06,000 --> 00:08:08,000
in this work we define good content

196
00:08:08,000 --> 00:08:11,360
program as the program that breaks

197
00:08:11,360 --> 00:08:13,120
with prf security

198
00:08:13,120 --> 00:08:16,400
as done by guarantor

199
00:08:16,960 --> 00:08:19,520
but when we do this we have to take the

200
00:08:19,520 --> 00:08:22,080
stateful nature of content programs into

201
00:08:22,080 --> 00:08:24,240
consideration

202
00:08:24,240 --> 00:08:27,759
so the problem remains as follows

203
00:08:27,759 --> 00:08:30,240
so to check whether a content program is

204
00:08:30,240 --> 00:08:32,719
a good content program or not we have to

205
00:08:32,719 --> 00:08:34,880
measure the advantage of the content

206
00:08:34,880 --> 00:08:39,039
program for breaking weak plf security

207
00:08:39,120 --> 00:08:41,279
however such a measurement process

208
00:08:41,279 --> 00:08:45,439
itself might destroy the quantum program

209
00:08:45,920 --> 00:08:48,160
so if we once confirmed that a content

210
00:08:48,160 --> 00:08:50,480
program is a good content program the

211
00:08:50,480 --> 00:08:53,040
post measurement program state might not

212
00:08:53,040 --> 00:08:56,959
be a good content program anymore

213
00:08:58,000 --> 00:09:00,480
so in order to avoid this issue in this

214
00:09:00,480 --> 00:09:02,480
work we use a notion of live content

215
00:09:02,480 --> 00:09:03,440
programs

216
00:09:03,440 --> 00:09:05,920
introduced by gendry

217
00:09:05,920 --> 00:09:09,839
as a notion of good content programs

218
00:09:10,000 --> 00:09:12,240
uh this notion of live content programs

219
00:09:12,240 --> 00:09:14,320
uh is defined by using projective

220
00:09:14,320 --> 00:09:15,600
implementation

221
00:09:15,600 --> 00:09:17,839
also introduced by gendry

222
00:09:17,839 --> 00:09:19,920
so after talking about some backgrounds

223
00:09:19,920 --> 00:09:22,880
on content programs i will introduce a

224
00:09:22,880 --> 00:09:25,040
projective implementation and the notion

225
00:09:25,040 --> 00:09:28,319
of live content programs

226
00:09:30,160 --> 00:09:32,399
so the success probability of a quantum

227
00:09:32,399 --> 00:09:34,800
program for breaking weak plf security

228
00:09:34,800 --> 00:09:36,880
is defined as follows

229
00:09:36,880 --> 00:09:40,399
so let uh dwprf be a distribution that

230
00:09:40,399 --> 00:09:43,680
generates random bit b a random input x

231
00:09:43,680 --> 00:09:47,040
random out to y0 and correct out y1 of

232
00:09:47,040 --> 00:09:51,360
the input x and output b x y b

233
00:09:51,360 --> 00:09:54,560
uh this distribution the wprf is roughly

234
00:09:54,560 --> 00:09:56,720
corresponding to the security gamma with

235
00:09:56,720 --> 00:09:59,200
prf security

236
00:09:59,200 --> 00:10:01,600
so the success probability of a content

237
00:10:01,600 --> 00:10:04,399
program for breaking weak of security is

238
00:10:04,399 --> 00:10:05,920
the probability that

239
00:10:05,920 --> 00:10:08,880
a given x and y b the quantum program

240
00:10:08,880 --> 00:10:11,200
correctly guesses the bit b

241
00:10:11,200 --> 00:10:13,680
where b x y b is generated from the

242
00:10:13,680 --> 00:10:18,359
distribution d w p r a

243
00:10:19,040 --> 00:10:20,720
so here

244
00:10:20,720 --> 00:10:23,440
this content program psi can be seen as

245
00:10:23,440 --> 00:10:26,240
a superposition of many content programs

246
00:10:26,240 --> 00:10:28,160
with different success probabilities

247
00:10:28,160 --> 00:10:30,839
with respect to the distribution

248
00:10:30,839 --> 00:10:34,320
dwprf in other words we can decompose a

249
00:10:34,320 --> 00:10:36,720
psi with respect to the distribution

250
00:10:36,720 --> 00:10:39,360
dwprf

251
00:10:39,360 --> 00:10:42,800
more concretely we can write a psy as

252
00:10:42,800 --> 00:10:44,079
some mention

253
00:10:44,079 --> 00:10:47,040
of summation p alpha p side p

254
00:10:47,040 --> 00:10:50,000
uh where psi p is a quantum program with

255
00:10:50,000 --> 00:10:52,160
success probability p with respect to

256
00:10:52,160 --> 00:10:54,880
the distribution v w p r f and as i

257
00:10:54,880 --> 00:10:56,959
mentioned p alpha p squared is equal to

258
00:10:56,959 --> 00:10:59,199
one

259
00:10:59,279 --> 00:11:01,519
so given this background

260
00:11:01,519 --> 00:11:03,440
i will introduce a projective

261
00:11:03,440 --> 00:11:05,680
implementation and the notion of live

262
00:11:05,680 --> 00:11:08,000
content programs

263
00:11:08,000 --> 00:11:10,480
so as i said a content program can be

264
00:11:10,480 --> 00:11:12,959
seen as a superposition of many content

265
00:11:12,959 --> 00:11:14,720
programs

266
00:11:14,720 --> 00:11:17,200
then a projective implementation is a

267
00:11:17,200 --> 00:11:19,279
measurement process that measures

268
00:11:19,279 --> 00:11:21,920
success probability of one of those

269
00:11:21,920 --> 00:11:23,519
content programs contained in the

270
00:11:23,519 --> 00:11:25,519
superposition

271
00:11:25,519 --> 00:11:29,120
so concretely it is defined as follows

272
00:11:29,120 --> 00:11:31,760
so suppose we have a quantum program psi

273
00:11:31,760 --> 00:11:33,760
which can be written as summation p

274
00:11:33,760 --> 00:11:36,320
alpha p psi p

275
00:11:36,320 --> 00:11:37,760
then

276
00:11:37,760 --> 00:11:39,760
if we apply projective implementation

277
00:11:39,760 --> 00:11:43,760
for pwp rf we obtain outcome p with

278
00:11:43,760 --> 00:11:46,880
probability alpha p square

279
00:11:46,880 --> 00:11:48,560
and by applying this projective

280
00:11:48,560 --> 00:11:51,920
implementation uh the program state psi

281
00:11:51,920 --> 00:11:53,600
is collapsed into

282
00:11:53,600 --> 00:11:56,480
another quantum program site p which is

283
00:11:56,480 --> 00:11:58,160
a quantum program with successful

284
00:11:58,160 --> 00:12:00,399
probability p

285
00:12:00,399 --> 00:12:02,240
so as the name suggests a projective

286
00:12:02,240 --> 00:12:04,880
implementation is projected so if we

287
00:12:04,880 --> 00:12:07,920
apply project implementation for dwprf

288
00:12:07,920 --> 00:12:08,959
again

289
00:12:08,959 --> 00:12:12,800
we obtain outcome p with probability one

290
00:12:12,800 --> 00:12:16,320
so this is projective implementation

291
00:12:16,320 --> 00:12:18,160
and by using uh this project

292
00:12:18,160 --> 00:12:20,560
implementation we can define the notion

293
00:12:20,560 --> 00:12:23,120
of live quantum programs

294
00:12:23,120 --> 00:12:25,680
so we say that a content program psi is

295
00:12:25,680 --> 00:12:28,560
right quantum program if the result p of

296
00:12:28,560 --> 00:12:31,680
a projective implementation dw pll is

297
00:12:31,680 --> 00:12:34,959
significantly greater than one half

298
00:12:34,959 --> 00:12:36,800
so by defining so

299
00:12:36,800 --> 00:12:38,959
if we once confirmed that a quantum

300
00:12:38,959 --> 00:12:41,600
program is a live content program

301
00:12:41,600 --> 00:12:44,000
then we can confirm that the post

302
00:12:44,000 --> 00:12:45,600
measurement state

303
00:12:45,600 --> 00:12:49,120
surely has high success probability

304
00:12:49,120 --> 00:12:51,760
and also for classical programs this

305
00:12:51,760 --> 00:12:53,600
notion of live content program is the

306
00:12:53,600 --> 00:12:55,920
same as a classical notion of good

307
00:12:55,920 --> 00:12:58,959
programs uh such as uh the one used by

308
00:12:58,959 --> 00:13:03,519
guerrero in the context of traceable plf

309
00:13:03,519 --> 00:13:05,680
so by using uh this notion right content

310
00:13:05,680 --> 00:13:06,639
program

311
00:13:06,639 --> 00:13:08,959
we can restate our definition of online

312
00:13:08,959 --> 00:13:11,279
mobility as follows

313
00:13:11,279 --> 00:13:13,360
so suppose we generate a multiplication

314
00:13:13,360 --> 00:13:16,320
circuit c prime from prf key and mac m

315
00:13:16,320 --> 00:13:18,079
and we give it to an adversary and other

316
00:13:18,079 --> 00:13:20,880
personal generates content program psi

317
00:13:20,880 --> 00:13:21,680
then

318
00:13:21,680 --> 00:13:23,839
only mobility guarantees that no other

319
00:13:23,839 --> 00:13:26,160
battery can generate a quantum program

320
00:13:26,160 --> 00:13:28,959
psi such that upside is a live content

321
00:13:28,959 --> 00:13:30,480
program but

322
00:13:30,480 --> 00:13:32,160
the extraction algorithm fails to

323
00:13:32,160 --> 00:13:34,639
extract m

324
00:13:34,639 --> 00:13:36,639
so this is the definition of

325
00:13:36,639 --> 00:13:38,800
quantum water marking again uh

326
00:13:38,800 --> 00:13:40,560
automating prf against contaminated

327
00:13:40,560 --> 00:13:42,959
batteries

328
00:13:42,959 --> 00:13:44,320
so

329
00:13:44,320 --> 00:13:47,040
next uh so given this definition i will

330
00:13:47,040 --> 00:13:50,000
talk about how we realize uh con water

331
00:13:50,000 --> 00:13:51,839
marking prf against quantum model

332
00:13:51,839 --> 00:13:54,079
baseless

333
00:13:54,079 --> 00:13:56,880
so our goal is to realize a water margin

334
00:13:56,880 --> 00:13:58,160
tier scheme

335
00:13:58,160 --> 00:14:01,600
such that even if an adversary generates

336
00:14:01,600 --> 00:14:04,160
quantum program in order to remove

337
00:14:04,160 --> 00:14:05,680
our embedded mark

338
00:14:05,680 --> 00:14:07,680
as long as the quantum program is a live

339
00:14:07,680 --> 00:14:08,959
content program

340
00:14:08,959 --> 00:14:10,959
we can correctly extract the embedded

341
00:14:10,959 --> 00:14:13,439
macrom

342
00:14:15,120 --> 00:14:18,399
so usually uh in watermarking we extract

343
00:14:18,399 --> 00:14:21,120
the ambulance mark by applying several

344
00:14:21,120 --> 00:14:23,279
tests on success probability and

345
00:14:23,279 --> 00:14:26,320
observing the results

346
00:14:27,440 --> 00:14:28,480
however

347
00:14:28,480 --> 00:14:30,880
in the case of quantum motor marking the

348
00:14:30,880 --> 00:14:32,720
set of applicable tests is highly

349
00:14:32,720 --> 00:14:33,760
limited

350
00:14:33,760 --> 00:14:37,040
compared to the classical water marking

351
00:14:37,040 --> 00:14:39,120
this is because due to the stateful

352
00:14:39,120 --> 00:14:41,519
nature a test can destroy a quantum

353
00:14:41,519 --> 00:14:44,519
program

354
00:14:45,519 --> 00:14:47,839
so concretely uh the difficulty we have

355
00:14:47,839 --> 00:14:50,720
to deal with is as follows

356
00:14:50,720 --> 00:14:53,600
uh in watermarking an ambulance mark is

357
00:14:53,600 --> 00:14:56,839
chosen from super polynomial side

358
00:14:56,839 --> 00:14:59,760
set so in this case uh we couldn't

359
00:14:59,760 --> 00:15:02,480
extract the embed mark in one shot

360
00:15:02,480 --> 00:15:04,959
we have to extract the embed mark in a

361
00:15:04,959 --> 00:15:07,920
bit by bit manner

362
00:15:09,199 --> 00:15:11,440
and in order to realize such a bit

363
00:15:11,440 --> 00:15:13,760
private manner extraction process

364
00:15:13,760 --> 00:15:16,639
we need to realize a test ti for every

365
00:15:16,639 --> 00:15:18,399
eye such that

366
00:15:18,399 --> 00:15:21,040
each ti each test ti can be used to

367
00:15:21,040 --> 00:15:23,279
extract the high speed of the mark

368
00:15:23,279 --> 00:15:25,920
and each ti does not destroy the quantum

369
00:15:25,920 --> 00:15:27,680
program

370
00:15:27,680 --> 00:15:28,959
so if some

371
00:15:28,959 --> 00:15:31,759
test ti destroyed the content program

372
00:15:31,759 --> 00:15:34,320
we couldn't extract the rest bit of the

373
00:15:34,320 --> 00:15:36,560
embedded mark

374
00:15:36,560 --> 00:15:38,720
so the technical challenge in this work

375
00:15:38,720 --> 00:15:42,079
is to realize such a test tis

376
00:15:42,079 --> 00:15:44,399
so in the rest of my talk i will talk

377
00:15:44,399 --> 00:15:46,560
about my main technical idea for

378
00:15:46,560 --> 00:15:50,000
realizing these tests

379
00:15:52,000 --> 00:15:55,120
so our main idea is to use what we call

380
00:15:55,120 --> 00:15:56,800
reverse projective property of

381
00:15:56,800 --> 00:15:58,800
projective implementation

382
00:15:58,800 --> 00:16:01,920
which can be explained as follows

383
00:16:01,920 --> 00:16:04,720
let d fail uh be the distribution that

384
00:16:04,720 --> 00:16:06,800
generates b x y

385
00:16:06,800 --> 00:16:09,920
from the distribution dwprf and outputs

386
00:16:09,920 --> 00:16:12,639
are 1 minus b xy

387
00:16:12,639 --> 00:16:15,279
so recall that the wprf is a

388
00:16:15,279 --> 00:16:17,920
distribution corresponding to the weak

389
00:16:17,920 --> 00:16:20,320
prf security gain

390
00:16:20,320 --> 00:16:22,880
then a projective implementation for

391
00:16:22,880 --> 00:16:25,440
this distribution the fail uh is a

392
00:16:25,440 --> 00:16:27,120
measurement that measures failure

393
00:16:27,120 --> 00:16:30,399
probability of a quantum program

394
00:16:30,399 --> 00:16:32,240
this is roughly because a projective

395
00:16:32,240 --> 00:16:34,720
implementation for t fail measures the

396
00:16:34,720 --> 00:16:37,040
probability that the outcome of a

397
00:16:37,040 --> 00:16:41,920
quantum program is not b a given x y

398
00:16:42,079 --> 00:16:46,079
then consider the following situation

399
00:16:46,079 --> 00:16:48,560
so suppose we have quantum program psi

400
00:16:48,560 --> 00:16:50,720
which can be written as summation p

401
00:16:50,720 --> 00:16:53,600
alphabet side p

402
00:16:53,600 --> 00:16:56,000
and also suppose we apply a project

403
00:16:56,000 --> 00:16:59,120
implementation for d wprf a namely

404
00:16:59,120 --> 00:17:01,120
remajor success probability of the

405
00:17:01,120 --> 00:17:02,959
content program and we obtain the

406
00:17:02,959 --> 00:17:04,640
outcome p

407
00:17:04,640 --> 00:17:06,559
so in this case uh the content program

408
00:17:06,559 --> 00:17:08,559
is collapsed into another content

409
00:17:08,559 --> 00:17:10,720
program uh psi p

410
00:17:10,720 --> 00:17:12,480
which is a content program with success

411
00:17:12,480 --> 00:17:15,039
probability p

412
00:17:15,039 --> 00:17:17,520
from the projected property of project

413
00:17:17,520 --> 00:17:18,880
implementation

414
00:17:18,880 --> 00:17:21,119
if we apply project implementation for

415
00:17:21,119 --> 00:17:24,319
dwpf again to the content program we

416
00:17:24,319 --> 00:17:27,760
obtain outcome p with probability one

417
00:17:27,760 --> 00:17:30,400
so here the reverse projective property

418
00:17:30,400 --> 00:17:31,679
says that

419
00:17:31,679 --> 00:17:33,679
if we apply projective implementation

420
00:17:33,679 --> 00:17:36,080
for dfa and measure a failure

421
00:17:36,080 --> 00:17:38,400
probability of a content program after

422
00:17:38,400 --> 00:17:40,640
applying projective implementation for

423
00:17:40,640 --> 00:17:42,240
dwprf

424
00:17:42,240 --> 00:17:44,960
we obtain outcome 1 minus b with

425
00:17:44,960 --> 00:17:47,600
probability one

426
00:17:47,600 --> 00:17:50,080
and most importantly uh this application

427
00:17:50,080 --> 00:17:52,320
of a projective implementation for the

428
00:17:52,320 --> 00:17:54,960
fail after project implementation for

429
00:17:54,960 --> 00:17:57,440
dwprf does not affect the quantum

430
00:17:57,440 --> 00:17:58,640
program

431
00:17:58,640 --> 00:18:00,799
so in other words at post measurement

432
00:18:00,799 --> 00:18:02,960
state after applying a projective

433
00:18:02,960 --> 00:18:07,440
implementation for d fail remains psi p

434
00:18:07,440 --> 00:18:11,280
so this is a reverse projective property

435
00:18:12,160 --> 00:18:14,240
so we can prove this reverse project

436
00:18:14,240 --> 00:18:16,559
property by using the fact that a

437
00:18:16,559 --> 00:18:19,679
project implementation for dwprf and

438
00:18:19,679 --> 00:18:22,000
project implementation for dfail

439
00:18:22,000 --> 00:18:23,919
consists of exactly the same set of

440
00:18:23,919 --> 00:18:26,000
operators and the only difference

441
00:18:26,000 --> 00:18:28,720
between these two measurements is labels

442
00:18:28,720 --> 00:18:31,760
of those operators

443
00:18:31,760 --> 00:18:33,760
so by combining this

444
00:18:33,760 --> 00:18:35,679
reverse project property with the

445
00:18:35,679 --> 00:18:38,320
standard projected property

446
00:18:38,320 --> 00:18:41,440
we can obtain the following key fact

447
00:18:41,440 --> 00:18:45,039
so suppose we have right quantum program

448
00:18:45,039 --> 00:18:46,720
so this means that if we apply

449
00:18:46,720 --> 00:18:49,760
projective implementation for pwp rf and

450
00:18:49,760 --> 00:18:51,520
measure the success probability of the

451
00:18:51,520 --> 00:18:52,880
quantum program

452
00:18:52,880 --> 00:18:55,120
we obtain outcome one over two plus

453
00:18:55,120 --> 00:18:57,440
epsilon for some inverse polynomial

454
00:18:57,440 --> 00:18:59,200
epsilon

455
00:18:59,200 --> 00:19:02,160
then our key factor says that

456
00:19:02,160 --> 00:19:03,919
as long as we apply projective

457
00:19:03,919 --> 00:19:07,039
implementation for dw prf or projective

458
00:19:07,039 --> 00:19:09,520
implementation for dfail the content

459
00:19:09,520 --> 00:19:11,280
program reminds right the content

460
00:19:11,280 --> 00:19:13,840
program is not destroyed

461
00:19:13,840 --> 00:19:15,679
and every time we apply project

462
00:19:15,679 --> 00:19:18,559
implementation for dwpra we obtain

463
00:19:18,559 --> 00:19:22,080
outcome 1 nova 2 plus excel

464
00:19:22,080 --> 00:19:23,760
and every time we apply projective

465
00:19:23,760 --> 00:19:26,240
implementation for the fail we obtain

466
00:19:26,240 --> 00:19:29,440
outcome one over two minus epsilon

467
00:19:29,440 --> 00:19:32,240
so in short uh this key factor says that

468
00:19:32,240 --> 00:19:34,559
as long as we measure only success

469
00:19:34,559 --> 00:19:37,440
probability and failure probability

470
00:19:37,440 --> 00:19:39,120
we can measure those two values

471
00:19:39,120 --> 00:19:40,960
successfully without destroying the

472
00:19:40,960 --> 00:19:42,720
quantum program

473
00:19:42,720 --> 00:19:45,440
so this is a working fact

474
00:19:45,440 --> 00:19:47,840
and finally i will talk about how we

475
00:19:47,840 --> 00:19:48,880
realize

476
00:19:48,880 --> 00:19:51,679
our extraction method by using this key

477
00:19:51,679 --> 00:19:53,679
fact

478
00:19:53,679 --> 00:19:57,360
so our extraction method uses a test ti

479
00:19:57,360 --> 00:19:59,280
with the following properties for every

480
00:19:59,280 --> 00:20:00,640
i

481
00:20:00,640 --> 00:20:02,799
so suppose we generate a multiplication

482
00:20:02,799 --> 00:20:05,840
circuit c prime from prf key and macm

483
00:20:05,840 --> 00:20:07,760
and we give it to an adversary and other

484
00:20:07,760 --> 00:20:11,360
person generates a live content program

485
00:20:11,360 --> 00:20:12,240
then

486
00:20:12,240 --> 00:20:15,600
this test ti has the property that

487
00:20:15,600 --> 00:20:18,799
if the ice bit of the minute mark m i is

488
00:20:18,799 --> 00:20:21,039
equal to zero from the b of the

489
00:20:21,039 --> 00:20:23,919
adversary this test ti looks like

490
00:20:23,919 --> 00:20:26,960
projective implementation for dw prf

491
00:20:26,960 --> 00:20:28,559
which is a measurement on success

492
00:20:28,559 --> 00:20:31,120
probability

493
00:20:31,120 --> 00:20:32,640
and on the other hand

494
00:20:32,640 --> 00:20:34,640
if mi is equal to one

495
00:20:34,640 --> 00:20:36,400
uh from the adva from the b of the

496
00:20:36,400 --> 00:20:39,360
adversary uh this test ti looks like a

497
00:20:39,360 --> 00:20:41,760
projective implementation for d fail

498
00:20:41,760 --> 00:20:43,679
which is a measurement on failure

499
00:20:43,679 --> 00:20:46,159
probability

500
00:20:46,159 --> 00:20:49,760
so if ti satisfies these properties

501
00:20:49,760 --> 00:20:51,440
from our key fact

502
00:20:51,440 --> 00:20:54,080
the outcome of ti is 1 over 2 plus

503
00:20:54,080 --> 00:20:57,280
epsilon if mi is equal to 0 and the

504
00:20:57,280 --> 00:21:00,400
outcome of ti is 1 over 2 minus epsilon

505
00:21:00,400 --> 00:21:03,039
if mi is equal to 1

506
00:21:03,039 --> 00:21:06,240
so we can extract ny by applying this

507
00:21:06,240 --> 00:21:08,799
test ti and observing uh whether the

508
00:21:08,799 --> 00:21:13,039
result is greater than one half or not

509
00:21:13,520 --> 00:21:16,480
and also from our key fact ti does not

510
00:21:16,480 --> 00:21:18,799
destroy the content program

511
00:21:18,799 --> 00:21:21,520
this is because ti looks like uh either

512
00:21:21,520 --> 00:21:23,679
one of projective implementation for

513
00:21:23,679 --> 00:21:26,080
ewplf or project implementation for

514
00:21:26,080 --> 00:21:27,200
dfail

515
00:21:27,200 --> 00:21:29,200
both of which do not destroy the content

516
00:21:29,200 --> 00:21:31,840
program

517
00:21:31,840 --> 00:21:33,360
and as a result

518
00:21:33,360 --> 00:21:36,799
we can apply this test ti for every i

519
00:21:36,799 --> 00:21:38,880
and we can correctly extract the every

520
00:21:38,880 --> 00:21:41,520
bit of the mark

521
00:21:41,520 --> 00:21:44,000
so due to the time our restriction i

522
00:21:44,000 --> 00:21:45,600
couldn't talk about how we actually

523
00:21:45,600 --> 00:21:48,880
realized such a test ti in this work so

524
00:21:48,880 --> 00:21:51,039
if you're interested in this part please

525
00:21:51,039 --> 00:21:53,840
check our paper

526
00:21:54,320 --> 00:21:56,320
this is a summary of my talk

527
00:21:56,320 --> 00:21:58,640
so in this work we define water marking

528
00:21:58,640 --> 00:22:01,120
prf against quantum of the basal rays

529
00:22:01,120 --> 00:22:03,360
and we also construct uh quantum water

530
00:22:03,360 --> 00:22:06,400
marking uh water marking prf against

531
00:22:06,400 --> 00:22:08,159
quantum advisories

532
00:22:08,159 --> 00:22:10,559
uh we propose two constructions uh the

533
00:22:10,559 --> 00:22:12,720
first one is secret extraction scheme

534
00:22:12,720 --> 00:22:15,520
based on the readable assumption and the

535
00:22:15,520 --> 00:22:17,440
other one is public extraction scheme

536
00:22:17,440 --> 00:22:19,120
based on io

537
00:22:19,120 --> 00:22:20,880
so our construction methodology is

538
00:22:20,880 --> 00:22:23,520
highly general and it can be extended to

539
00:22:23,520 --> 00:22:25,360
watermarking other primitives such as

540
00:22:25,360 --> 00:22:27,280
public key encryption

541
00:22:27,280 --> 00:22:29,440
so this is in the my end of my talk uh

542
00:22:29,440 --> 00:22:32,240
thank you very much

543
00:22:37,760 --> 00:22:39,360
okay thank you

544
00:22:39,360 --> 00:22:40,880
are there any questions if people have

545
00:22:40,880 --> 00:22:42,960
questions please come to the microphone

546
00:22:42,960 --> 00:22:44,799
if there's people who have questions on

547
00:22:44,799 --> 00:22:46,960
zulip i will

548
00:22:46,960 --> 00:22:49,039
look at that as well

549
00:22:49,039 --> 00:22:52,080
any questions so far

550
00:22:52,080 --> 00:22:54,480
so i do have one question so

551
00:22:54,480 --> 00:22:56,960
um you worked at uh

552
00:22:56,960 --> 00:22:58,640
if the

553
00:22:58,640 --> 00:23:00,559
adversary outputs a quantum program so

554
00:23:00,559 --> 00:23:03,200
if the adversary outputs a classical

555
00:23:03,200 --> 00:23:05,600
program does your notion then collapse

556
00:23:05,600 --> 00:23:07,600
to uh the known classical notion or do

557
00:23:07,600 --> 00:23:09,520
you still have some differences there

558
00:23:09,520 --> 00:23:12,559
yeah exactly um our notion is victory

559
00:23:12,559 --> 00:23:14,880
stronger than a crash card program

560
00:23:14,880 --> 00:23:17,440
so uh if we restrict our attention to

561
00:23:17,440 --> 00:23:20,000
advance or output only uh classical

562
00:23:20,000 --> 00:23:22,320
programs uh or definition in price uh

563
00:23:22,320 --> 00:23:26,000
crash car automating prf

564
00:23:26,080 --> 00:23:28,480
right but is it potentially stronger as

565
00:23:28,480 --> 00:23:30,080
in this in the sense that if you have a

566
00:23:30,080 --> 00:23:32,720
classical program and you satisfy the

567
00:23:32,720 --> 00:23:35,360
old definition do you then still satisfy

568
00:23:35,360 --> 00:23:37,760
your new definition given that

569
00:23:37,760 --> 00:23:39,760
it's a classical program

570
00:23:39,760 --> 00:23:42,720
yes exactly okay

571
00:23:42,720 --> 00:23:45,760
any other questions

572
00:23:48,240 --> 00:23:50,559
nothing on zulip okay if not then let's

573
00:23:50,559 --> 00:23:52,799
thank the speaker again

574
00:23:52,799 --> 00:23:56,360
thank you very much

