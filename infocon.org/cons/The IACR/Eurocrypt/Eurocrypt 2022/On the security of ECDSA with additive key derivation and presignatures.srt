1
00:00:00,160 --> 00:00:02,320
work by ian

2
00:00:02,320 --> 00:00:04,960
and victor shoop about the

3
00:00:04,960 --> 00:00:06,960
security of ecdsa with additive key

4
00:00:06,960 --> 00:00:08,559
derivation and free signatures and

5
00:00:08,559 --> 00:00:10,400
victor is going to give the talk

6
00:00:10,400 --> 00:00:11,440
thank you

7
00:00:11,440 --> 00:00:13,360
i hope you can hear me okay through my

8
00:00:13,360 --> 00:00:14,400
mask

9
00:00:14,400 --> 00:00:16,320
yes i come from a planet where we have a

10
00:00:16,320 --> 00:00:17,680
pandemic so

11
00:00:17,680 --> 00:00:20,160
i'm still there in my mind

12
00:00:20,160 --> 00:00:23,600
at least so how do i

13
00:00:25,279 --> 00:00:28,160
how do i advance

14
00:00:36,320 --> 00:00:37,440
i didn't touch anything when that

15
00:00:37,440 --> 00:00:38,320
happened

16
00:00:38,320 --> 00:00:39,520
okay

17
00:00:39,520 --> 00:00:43,360
okay so let me start with some context

18
00:00:43,360 --> 00:00:45,520
so i'm currently at an organization

19
00:00:45,520 --> 00:00:46,879
called dfinity which is building

20
00:00:46,879 --> 00:00:48,320
something called the internet computer

21
00:00:48,320 --> 00:00:50,800
which is a distributed platform

22
00:00:50,800 --> 00:00:53,039
uh for executing smart contracts in a

23
00:00:53,039 --> 00:00:55,120
secure way

24
00:00:55,120 --> 00:00:55,920
uh

25
00:00:55,920 --> 00:00:58,879
it does great things and it's

26
00:00:58,879 --> 00:01:00,960
amazingly fast and everything and what

27
00:01:00,960 --> 00:01:02,719
we want to do though is we want to build

28
00:01:02,719 --> 00:01:06,080
a new threshold ecdsa signing protocol

29
00:01:06,080 --> 00:01:07,680
but that's what we're implementing

30
00:01:07,680 --> 00:01:08,880
um

31
00:01:08,880 --> 00:01:10,880
and it's we're currently integrating it

32
00:01:10,880 --> 00:01:13,040
into our

33
00:01:13,040 --> 00:01:16,560
our our protocol our larger protocol

34
00:01:16,560 --> 00:01:19,439
and we're doing this because

35
00:01:19,439 --> 00:01:21,200
we think that it might be a good idea to

36
00:01:21,200 --> 00:01:22,159
allow

37
00:01:22,159 --> 00:01:24,080
smart contracts running on the internet

38
00:01:24,080 --> 00:01:25,920
computer to be able to securely hold and

39
00:01:25,920 --> 00:01:27,040
spend

40
00:01:27,040 --> 00:01:28,240
bitcoin

41
00:01:28,240 --> 00:01:31,200
and other types of cryptocurrencies

42
00:01:31,200 --> 00:01:32,880
um

43
00:01:32,880 --> 00:01:34,640
and of course

44
00:01:34,640 --> 00:01:38,159
most of these currently still use ecdsa

45
00:01:38,159 --> 00:01:39,040
so

46
00:01:39,040 --> 00:01:40,479
we need a

47
00:01:40,479 --> 00:01:43,439
a protocol for that so

48
00:01:43,439 --> 00:01:46,640
um this is the mpc session i'm not

49
00:01:46,640 --> 00:01:50,320
really going to talk about a secure

50
00:01:50,479 --> 00:01:53,600
multi-party protocol for ecdsa signing

51
00:01:53,600 --> 00:01:55,360
that's in a companion paper in this talk

52
00:01:55,360 --> 00:01:57,680
i'll be talking about just the analysis

53
00:01:57,680 --> 00:01:58,399
of

54
00:01:58,399 --> 00:01:59,520
of

55
00:01:59,520 --> 00:02:02,000
a non-threshold ecdsa that's appropriate

56
00:02:02,000 --> 00:02:03,360
for

57
00:02:03,360 --> 00:02:04,799
analyzing

58
00:02:04,799 --> 00:02:06,960
a distributed protocol so you'll see

59
00:02:06,960 --> 00:02:09,679
what i mean in a little bit so

60
00:02:09,679 --> 00:02:12,400
just let's recall ecdsa signatures we

61
00:02:12,400 --> 00:02:14,160
have an elliptic curve

62
00:02:14,160 --> 00:02:16,239
uh of order q

63
00:02:16,239 --> 00:02:18,400
and a generator g

64
00:02:18,400 --> 00:02:20,319
and the notation i'll use here is my

65
00:02:20,319 --> 00:02:22,560
secret key will be little d

66
00:02:22,560 --> 00:02:24,640
and my public key will be this big d and

67
00:02:24,640 --> 00:02:26,959
i'll use additive notation

68
00:02:26,959 --> 00:02:27,760
and

69
00:02:27,760 --> 00:02:29,920
yeah so this is ecdsa you hash the

70
00:02:29,920 --> 00:02:31,360
message

71
00:02:31,360 --> 00:02:33,040
you

72
00:02:33,040 --> 00:02:34,800
point with a laser pointer that doesn't

73
00:02:34,800 --> 00:02:37,680
work you you pick a random r

74
00:02:37,680 --> 00:02:39,760
and you and you multiply your generator

75
00:02:39,760 --> 00:02:42,480
by that so you get the group element r

76
00:02:42,480 --> 00:02:44,720
and then you apply this funny

77
00:02:44,720 --> 00:02:46,720
function c which is this conversion

78
00:02:46,720 --> 00:02:48,080
function it doesn't really matter what

79
00:02:48,080 --> 00:02:50,560
it is but that converts a point on the

80
00:02:50,560 --> 00:02:51,519
curve

81
00:02:51,519 --> 00:02:53,680
to

82
00:02:54,319 --> 00:02:56,000
a number mod q

83
00:02:56,000 --> 00:02:59,200
and then you test a little

84
00:02:59,280 --> 00:03:01,920
corner case that never really happens

85
00:03:01,920 --> 00:03:04,959
and then you compute s as r inverse

86
00:03:04,959 --> 00:03:07,280
times h plus td and the signature is

87
00:03:07,280 --> 00:03:09,200
this is pair st

88
00:03:09,200 --> 00:03:12,319
um and then you verify a signature

89
00:03:12,319 --> 00:03:14,400
uh by just kind of doing the obvious

90
00:03:14,400 --> 00:03:16,239
thing in reverse

91
00:03:16,239 --> 00:03:18,319
you hash the message and then you

92
00:03:18,319 --> 00:03:20,720
compute s inverse times h multiply that

93
00:03:20,720 --> 00:03:23,280
by the group element g s inverse times t

94
00:03:23,280 --> 00:03:25,440
multiply that by the public key d

95
00:03:25,440 --> 00:03:27,519
and then you check that you get a

96
00:03:27,519 --> 00:03:29,840
a non-zero point on the curve and that

97
00:03:29,840 --> 00:03:32,720
the conversion function maps to t

98
00:03:32,720 --> 00:03:34,400
and so i'll

99
00:03:34,400 --> 00:03:36,400
keep this kind of basic verification

100
00:03:36,400 --> 00:03:39,280
equation up here

101
00:03:39,840 --> 00:03:41,920
as you'll notice

102
00:03:41,920 --> 00:03:43,040
there's a

103
00:03:43,040 --> 00:03:45,280
part of the signing process is

104
00:03:45,280 --> 00:03:48,480
independent of the message m and you can

105
00:03:48,480 --> 00:03:50,720
do some pre-computations and a lot of

106
00:03:50,720 --> 00:03:52,000
people have of course noticed this

107
00:03:52,000 --> 00:03:53,519
before so

108
00:03:53,519 --> 00:03:55,599
uh you can compute the random r do the

109
00:03:55,599 --> 00:03:58,159
multiplication of r times g and then do

110
00:03:58,159 --> 00:04:01,040
even the conversion function

111
00:04:01,040 --> 00:04:03,840
all independently of the message m

112
00:04:03,840 --> 00:04:06,640
so i'll call

113
00:04:06,640 --> 00:04:09,280
this group element r

114
00:04:09,280 --> 00:04:11,920
a pre-signature

115
00:04:11,920 --> 00:04:13,200
now

116
00:04:13,200 --> 00:04:15,599
if you're doing an mpc implementation of

117
00:04:15,599 --> 00:04:16,399
this

118
00:04:16,399 --> 00:04:17,839
you'll probably be using some kind of a

119
00:04:17,839 --> 00:04:20,680
secret sharing scheme and so we can do a

120
00:04:20,680 --> 00:04:22,240
pre-computation

121
00:04:22,240 --> 00:04:24,240
which in addition to

122
00:04:24,240 --> 00:04:26,560
computing this uh

123
00:04:26,560 --> 00:04:28,479
group element r this pre-signature r we

124
00:04:28,479 --> 00:04:31,919
can also pre-compute sharings of

125
00:04:31,919 --> 00:04:34,800
little r the random number r and then

126
00:04:34,800 --> 00:04:37,759
also we'll we can pre-compute um kind of

127
00:04:37,759 --> 00:04:40,639
a beaver triple kind of thing uh kind of

128
00:04:40,639 --> 00:04:43,680
adapted to ecdsa a little bit so we can

129
00:04:43,680 --> 00:04:46,240
compute the random number u mod q shared

130
00:04:46,240 --> 00:04:48,800
among all the parties and then we can uh

131
00:04:48,800 --> 00:04:50,000
use u

132
00:04:50,000 --> 00:04:53,360
to multiply both uh r and uh a d so we

133
00:04:53,360 --> 00:04:55,840
get r prime as a sharing of r times u

134
00:04:55,840 --> 00:04:58,720
and d prime is the sharing of d times u

135
00:04:58,720 --> 00:05:00,479
so we've got two random numbers and then

136
00:05:00,479 --> 00:05:02,000
products of them

137
00:05:02,000 --> 00:05:04,160
so we can also do this as kind of a

138
00:05:04,160 --> 00:05:06,240
precomputation in a distributed protocol

139
00:05:06,240 --> 00:05:07,120
and then

140
00:05:07,120 --> 00:05:08,639
once we have all this then to sign a

141
00:05:08,639 --> 00:05:11,039
given message m we can just do a local

142
00:05:11,039 --> 00:05:12,400
computation

143
00:05:12,400 --> 00:05:14,000
uh where we compute the hash of the

144
00:05:14,000 --> 00:05:16,320
message and then we assuming standard

145
00:05:16,320 --> 00:05:18,080
secret sharing we can just locally

146
00:05:18,080 --> 00:05:19,120
compute

147
00:05:19,120 --> 00:05:21,840
h times u the hash times u plus t times

148
00:05:21,840 --> 00:05:23,680
this d prime up here

149
00:05:23,680 --> 00:05:25,680
and then once we each party locally

150
00:05:25,680 --> 00:05:27,199
computes that they can just open their

151
00:05:27,199 --> 00:05:28,720
shares broadcast their shares and then

152
00:05:28,720 --> 00:05:31,120
everybody can combine them so we open

153
00:05:31,120 --> 00:05:33,360
here v and uh

154
00:05:33,360 --> 00:05:34,720
r prime

155
00:05:34,720 --> 00:05:35,680
so

156
00:05:35,680 --> 00:05:39,360
v is h u plus t d u and r prime is r

157
00:05:39,360 --> 00:05:40,880
times u

158
00:05:40,880 --> 00:05:43,919
you cancel to use and you get uh the f

159
00:05:43,919 --> 00:05:47,039
component of the signature out

160
00:05:47,039 --> 00:05:49,039
um

161
00:05:49,039 --> 00:05:51,120
yeah so that's pretty much it and i

162
00:05:51,120 --> 00:05:53,600
guess you're also right

163
00:05:53,600 --> 00:05:55,759
and you're gonna open

164
00:05:55,759 --> 00:05:58,800
and you also already have t

165
00:05:59,280 --> 00:06:00,960
okay so

166
00:06:00,960 --> 00:06:02,800
once we have this pre-signature group

167
00:06:02,800 --> 00:06:05,039
element r plus as pre-shared data then

168
00:06:05,039 --> 00:06:06,400
the point of all is this then the

169
00:06:06,400 --> 00:06:09,280
latency for a signature is just one

170
00:06:09,280 --> 00:06:10,639
round of communication everybody

171
00:06:10,639 --> 00:06:12,720
broadcasts a share everybody can combine

172
00:06:12,720 --> 00:06:15,039
them and you have a signature

173
00:06:15,039 --> 00:06:17,680
okay so that's one so pre-computation is

174
00:06:17,680 --> 00:06:18,560
a

175
00:06:18,560 --> 00:06:20,639
is a technique that's used in

176
00:06:20,639 --> 00:06:24,720
uh many ecdsa threshold implementations

177
00:06:24,720 --> 00:06:28,160
another thing that's relevant to

178
00:06:28,160 --> 00:06:31,039
threshold ecdsa and ecdsa in the

179
00:06:31,039 --> 00:06:33,199
cryptocurrency

180
00:06:33,199 --> 00:06:34,960
community is something called additive

181
00:06:34,960 --> 00:06:38,080
key derivation so here the idea is that

182
00:06:38,080 --> 00:06:40,800
starting from a secret key little d

183
00:06:40,800 --> 00:06:43,280
we can compute kind of an offset of that

184
00:06:43,280 --> 00:06:45,360
secret key d plus e

185
00:06:45,360 --> 00:06:46,160
um

186
00:06:46,160 --> 00:06:48,080
and a corresponding public key which is

187
00:06:48,080 --> 00:06:50,639
just the original public key plus e

188
00:06:50,639 --> 00:06:52,160
times the generator

189
00:06:52,160 --> 00:06:53,919
uh where this e

190
00:06:53,919 --> 00:06:55,120
is

191
00:06:55,120 --> 00:06:57,520
kind of a public value and an additive

192
00:06:57,520 --> 00:06:59,759
tweak that's typically derived by some

193
00:06:59,759 --> 00:07:01,919
kind of hashing process applied to some

194
00:07:01,919 --> 00:07:04,080
identifier so it's a so the main thing

195
00:07:04,080 --> 00:07:06,960
is that e is a public value

196
00:07:06,960 --> 00:07:08,000
um

197
00:07:08,000 --> 00:07:10,400
if you're familiar at all with um

198
00:07:10,400 --> 00:07:13,039
bitcoin and and related cryptocurrencies

199
00:07:13,039 --> 00:07:16,639
there's a standard called bip32 that's

200
00:07:16,639 --> 00:07:18,800
essentially a special case of this

201
00:07:18,800 --> 00:07:21,520
uh this additive key derivation and it's

202
00:07:21,520 --> 00:07:23,840
used in bitcoin and other

203
00:07:23,840 --> 00:07:25,520
cryptocurrencies to implement something

204
00:07:25,520 --> 00:07:27,280
called hierarchical

205
00:07:27,280 --> 00:07:31,360
deterministic wallets um so

206
00:07:31,360 --> 00:07:32,720
if we want to do something like this in

207
00:07:32,720 --> 00:07:34,400
a threshold implementation first of all

208
00:07:34,400 --> 00:07:37,120
it's fairly easy to implement because

209
00:07:37,120 --> 00:07:39,360
uh everything this tweaking this this

210
00:07:39,360 --> 00:07:41,599
derived key is is a linear operation

211
00:07:41,599 --> 00:07:43,039
basically so

212
00:07:43,039 --> 00:07:44,720
that typically means that

213
00:07:44,720 --> 00:07:46,400
we can efficiently implement that using

214
00:07:46,400 --> 00:07:48,319
secret sharing

215
00:07:48,319 --> 00:07:49,840
also

216
00:07:49,840 --> 00:07:52,639
it's useful in a in a threshold setting

217
00:07:52,639 --> 00:07:54,560
it's it's really important

218
00:07:54,560 --> 00:07:57,039
to use this kind of thing to keep the

219
00:07:57,039 --> 00:07:59,520
key maintenance costs to a minimum

220
00:07:59,520 --> 00:08:02,080
um let me elaborate on that a little bit

221
00:08:02,080 --> 00:08:03,280
so

222
00:08:03,280 --> 00:08:06,960
for every signing key that we have

223
00:08:08,960 --> 00:08:10,720
we have to share that signing key among

224
00:08:10,720 --> 00:08:12,560
all the parties

225
00:08:12,560 --> 00:08:14,240
right and so

226
00:08:14,240 --> 00:08:15,599
and then we're going to have to re-share

227
00:08:15,599 --> 00:08:18,639
this key occasionally specifically

228
00:08:18,639 --> 00:08:20,800
when the network membership changes

229
00:08:20,800 --> 00:08:21,840
we're going to have to re-share the

230
00:08:21,840 --> 00:08:23,440
secret key and

231
00:08:23,440 --> 00:08:26,080
if we want to proactively refresh the

232
00:08:26,080 --> 00:08:28,960
secret shares on a regular basis so just

233
00:08:28,960 --> 00:08:30,560
imagine

234
00:08:30,560 --> 00:08:32,159
we had you know

235
00:08:32,159 --> 00:08:34,399
tens of thousands of keys one for every

236
00:08:34,399 --> 00:08:36,559
user and then every

237
00:08:36,559 --> 00:08:39,279
you know every few minutes whenever we

238
00:08:39,279 --> 00:08:41,360
want to do a proactive reshare we want

239
00:08:41,360 --> 00:08:43,039
to have to re run this resharing

240
00:08:43,039 --> 00:08:44,720
protocol for all these tens of thousands

241
00:08:44,720 --> 00:08:46,000
of users

242
00:08:46,000 --> 00:08:47,360
even though maybe most of these users

243
00:08:47,360 --> 00:08:48,800
are not even using their key at this

244
00:08:48,800 --> 00:08:50,700
time right maybe they're not even

245
00:08:50,700 --> 00:08:52,399
[Music]

246
00:08:52,399 --> 00:08:54,560
generating that many signatures so

247
00:08:54,560 --> 00:08:57,920
um because of these costs we actually

248
00:08:57,920 --> 00:08:58,959
don't want to have all of these

249
00:08:58,959 --> 00:09:01,040
independent signing keys we would rather

250
00:09:01,040 --> 00:09:03,200
if we could have kind of like one master

251
00:09:03,200 --> 00:09:05,920
secret key and then just derive

252
00:09:05,920 --> 00:09:06,720
uh

253
00:09:06,720 --> 00:09:08,640
secret keys secret signing keys for each

254
00:09:08,640 --> 00:09:11,360
user using a simple key derivation such

255
00:09:11,360 --> 00:09:13,680
as this one here additive key derivation

256
00:09:13,680 --> 00:09:14,959
um

257
00:09:14,959 --> 00:09:17,519
also in addition to all that uh

258
00:09:17,519 --> 00:09:19,440
the maintenance cost might also include

259
00:09:19,440 --> 00:09:21,200
any additional protocols for like

260
00:09:21,200 --> 00:09:23,519
backing up the signing key right the

261
00:09:23,519 --> 00:09:26,080
kind of a disaster if people lost their

262
00:09:26,080 --> 00:09:28,399
bitcoin signing keys and it wasn't some

263
00:09:28,399 --> 00:09:30,240
kind of a backup

264
00:09:30,240 --> 00:09:33,360
so that's additive key derivation and

265
00:09:33,360 --> 00:09:36,000
when you uh incorporate additive key

266
00:09:36,000 --> 00:09:38,959
derivation into ecdsa well you're right

267
00:09:38,959 --> 00:09:41,360
so you're essentially just replacing

268
00:09:41,360 --> 00:09:43,200
the public key d

269
00:09:43,200 --> 00:09:46,480
by d plus e times the generator so when

270
00:09:46,480 --> 00:09:49,040
you plug that into this equation here

271
00:09:49,040 --> 00:09:51,040
you just get a

272
00:09:51,040 --> 00:09:53,680
a t times e times g

273
00:09:53,680 --> 00:09:57,120
extra factor here so this is the new

274
00:09:57,120 --> 00:09:58,480
down here on the bottom here is the new

275
00:09:58,480 --> 00:10:01,040
verification equation that you get for

276
00:10:01,040 --> 00:10:02,560
if you want to verify a signature with

277
00:10:02,560 --> 00:10:05,839
respect to a derived key

278
00:10:06,079 --> 00:10:10,640
so what do we know about ecdsa security

279
00:10:12,000 --> 00:10:13,920
typically in your

280
00:10:13,920 --> 00:10:16,399
average

281
00:10:17,279 --> 00:10:19,839
threshold ecdsa protocol you'll find

282
00:10:19,839 --> 00:10:22,240
that there's a security proof that

283
00:10:22,240 --> 00:10:24,560
reduces the security of the protocol

284
00:10:24,560 --> 00:10:26,800
to the security of the non-threshold

285
00:10:26,800 --> 00:10:28,959
ecdsa signature scheme hopefully that's

286
00:10:28,959 --> 00:10:30,560
the case

287
00:10:30,560 --> 00:10:33,440
but if we use pre-signatures

288
00:10:33,440 --> 00:10:35,760
and or in combination additive key

289
00:10:35,760 --> 00:10:37,120
derivation

290
00:10:37,120 --> 00:10:41,120
uh we will need to consider an attack on

291
00:10:41,120 --> 00:10:43,680
the non-threshold ecdsa scheme that

292
00:10:43,680 --> 00:10:44,959
incorporates

293
00:10:44,959 --> 00:10:46,560
this usage right

294
00:10:46,560 --> 00:10:48,560
revealing pre-signatures prior to

295
00:10:48,560 --> 00:10:51,360
messages being chosen and also

296
00:10:51,360 --> 00:10:52,320
uh

297
00:10:52,320 --> 00:10:55,279
deriving public keys in this way

298
00:10:55,279 --> 00:10:57,279
so what's previously known about

299
00:10:57,279 --> 00:10:58,880
uh these different kind of modes of

300
00:10:58,880 --> 00:11:01,040
operation well first of all we just have

301
00:11:01,040 --> 00:11:03,279
plain old ecdsa

302
00:11:03,279 --> 00:11:04,880
the unfortunate thing about that is we

303
00:11:04,880 --> 00:11:07,440
don't really have a good reduction

304
00:11:07,440 --> 00:11:09,600
from ecdsa to any kind of standard

305
00:11:09,600 --> 00:11:11,200
problem but we do know that in the

306
00:11:11,200 --> 00:11:13,519
generic group model as a result of brown

307
00:11:13,519 --> 00:11:16,800
from 2002 that shows that um this is

308
00:11:16,800 --> 00:11:18,560
secure in the so-called generic group

309
00:11:18,560 --> 00:11:19,600
model

310
00:11:19,600 --> 00:11:22,800
uh under some collision resistance and

311
00:11:22,800 --> 00:11:25,279
random pre-image resistance

312
00:11:25,279 --> 00:11:28,160
assumptions on the hash function

313
00:11:28,160 --> 00:11:30,720
then if we look at ucdsa with

314
00:11:30,720 --> 00:11:32,720
pre-signatures well actually there's a

315
00:11:32,720 --> 00:11:34,160
paper

316
00:11:34,160 --> 00:11:37,120
by ron connetty and friends in 2020 who

317
00:11:37,120 --> 00:11:38,399
showed that

318
00:11:38,399 --> 00:11:40,880
a proof of security in the generic group

319
00:11:40,880 --> 00:11:42,959
model plus the random oracle model

320
00:11:42,959 --> 00:11:46,079
um showed that ecdsa with pre-signatures

321
00:11:46,079 --> 00:11:48,640
was secure

322
00:11:48,880 --> 00:11:51,120
um for ecdsa with additive key

323
00:11:51,120 --> 00:11:53,360
derivation there's actually no general

324
00:11:53,360 --> 00:11:55,440
results prior to our work at least that

325
00:11:55,440 --> 00:11:58,000
i know of uh there are some results with

326
00:11:58,000 --> 00:11:59,600
various restrictions on the attack and

327
00:11:59,600 --> 00:12:01,120
the types of messages that you sign on

328
00:12:01,120 --> 00:12:02,639
the on the ways in which you use the

329
00:12:02,639 --> 00:12:04,880
public keys but uh there haven't been

330
00:12:04,880 --> 00:12:08,320
any real general results

331
00:12:08,320 --> 00:12:10,720
and then well in particular

332
00:12:10,720 --> 00:12:12,240
uh if you look at ecd with free

333
00:12:12,240 --> 00:12:14,000
signatures and additive key derivations

334
00:12:14,000 --> 00:12:15,200
there's nobody's ever really looked at

335
00:12:15,200 --> 00:12:18,320
this at all even though uh this mode has

336
00:12:18,320 --> 00:12:20,639
been this mode of operation has been

337
00:12:20,639 --> 00:12:22,480
advocated in the literature for use i

338
00:12:22,480 --> 00:12:24,560
won't say who advocated it but because

339
00:12:24,560 --> 00:12:25,839
it's not really

340
00:12:25,839 --> 00:12:29,120
substantiated by anything um but um

341
00:12:29,120 --> 00:12:30,639
yeah but you can see why you would want

342
00:12:30,639 --> 00:12:32,000
to use it right for those there's

343
00:12:32,000 --> 00:12:33,440
compelling reasons to want to use both

344
00:12:33,440 --> 00:12:34,399
of these

345
00:12:34,399 --> 00:12:36,560
modes of operation in combination

346
00:12:36,560 --> 00:12:38,880
so here's what happens if you were to

347
00:12:38,880 --> 00:12:41,279
use pre-signatures plus a key additive

348
00:12:41,279 --> 00:12:43,040
key derivation there's actually

349
00:12:43,040 --> 00:12:44,720
an attack of sorts

350
00:12:44,720 --> 00:12:45,760
so

351
00:12:45,760 --> 00:12:48,880
uh here's how the attack works

352
00:12:48,880 --> 00:12:52,240
you make one pre-signature query

353
00:12:52,240 --> 00:12:54,800
to get this random group element r and

354
00:12:54,800 --> 00:12:57,200
the and the corresponding uh

355
00:12:57,200 --> 00:12:59,279
you apply the conversion function to get

356
00:12:59,279 --> 00:13:01,040
the corresponding

357
00:13:01,040 --> 00:13:03,360
number t mod q

358
00:13:03,360 --> 00:13:06,160
and then the main step is step two where

359
00:13:06,160 --> 00:13:10,399
we want to find uh message m tweak e and

360
00:13:10,399 --> 00:13:12,480
another message m star and a tweak e

361
00:13:12,480 --> 00:13:14,800
star so we wanna find these four things

362
00:13:14,800 --> 00:13:16,560
so this attack

363
00:13:16,560 --> 00:13:18,720
uh the name of this attack is called the

364
00:13:18,720 --> 00:13:20,880
meme attack so the name was discovered

365
00:13:20,880 --> 00:13:22,959
by tal raven who wanted to make sure i

366
00:13:22,959 --> 00:13:24,639
gave her credit for the name

367
00:13:24,639 --> 00:13:25,920
for the meme

368
00:13:25,920 --> 00:13:27,600
and then what you want to do is find the

369
00:13:27,600 --> 00:13:30,959
m-e-m-e m-e-m-star e-star such that this

370
00:13:30,959 --> 00:13:34,399
equation holds here h plus t e equals h

371
00:13:34,399 --> 00:13:37,680
star plus t e star

372
00:13:37,839 --> 00:13:39,680
and the only real constraint is that the

373
00:13:39,680 --> 00:13:41,360
tweaks should be different the hashes

374
00:13:41,360 --> 00:13:42,880
the the messages could even be the same

375
00:13:42,880 --> 00:13:44,399
message it doesn't matter

376
00:13:44,399 --> 00:13:46,399
um and so

377
00:13:46,399 --> 00:13:49,279
so once you find these four

378
00:13:49,279 --> 00:13:52,480
values then you ask for a signature

379
00:13:52,480 --> 00:13:53,440
um

380
00:13:53,440 --> 00:13:55,760
on message m

381
00:13:55,760 --> 00:13:58,079
um

382
00:13:58,720 --> 00:14:00,320
you you ask for a sig you ask for a

383
00:14:00,320 --> 00:14:03,199
signature st using this pre-signature on

384
00:14:03,199 --> 00:14:05,279
the message m with tweak e and that

385
00:14:05,279 --> 00:14:06,639
immediately gives you

386
00:14:06,639 --> 00:14:08,480
uh

387
00:14:08,480 --> 00:14:11,040
a signature on m star with respect to

388
00:14:11,040 --> 00:14:12,720
tweak e star i mean this is just a

389
00:14:12,720 --> 00:14:15,279
trivial math right so you can

390
00:14:15,279 --> 00:14:16,800
look at the verification equations and

391
00:14:16,800 --> 00:14:19,680
see that that's what you get

392
00:14:20,720 --> 00:14:23,760
so this is a valid signature on m star

393
00:14:23,760 --> 00:14:25,600
with respect to e-star so that's kind of

394
00:14:25,600 --> 00:14:27,920
a a simple thing to see

395
00:14:27,920 --> 00:14:28,639
now

396
00:14:28,639 --> 00:14:31,120
the hard part of course is the step two

397
00:14:31,120 --> 00:14:33,920
to find the meme and this is essentially

398
00:14:33,920 --> 00:14:36,880
a four sum problem um

399
00:14:36,880 --> 00:14:38,560
you can kind of just look at the hash

400
00:14:38,560 --> 00:14:41,680
outputs as basically random numbers and

401
00:14:41,680 --> 00:14:43,360
the tweaks are also kind of random

402
00:14:43,360 --> 00:14:45,839
numbers multiplied by this fixed value t

403
00:14:45,839 --> 00:14:47,600
so you're looking for four random

404
00:14:47,600 --> 00:14:49,519
numbers that add up in this particular

405
00:14:49,519 --> 00:14:51,920
way so this is a well studied problem

406
00:14:51,920 --> 00:14:54,480
called a four sum problem uh wagner had

407
00:14:54,480 --> 00:14:56,560
a nice paper also 20 years ago that

408
00:14:56,560 --> 00:14:59,279
shows that you can do this in time cube

409
00:14:59,279 --> 00:15:00,959
root of q

410
00:15:00,959 --> 00:15:03,360
uh instead of square root of q which is

411
00:15:03,360 --> 00:15:04,959
what you would expect the the time it

412
00:15:04,959 --> 00:15:06,880
would take to

413
00:15:06,880 --> 00:15:09,600
attack ecdsa generically

414
00:15:09,600 --> 00:15:10,639
so

415
00:15:10,639 --> 00:15:12,880
it's still you know not a polynomial

416
00:15:12,880 --> 00:15:14,639
time attack but it's still

417
00:15:14,639 --> 00:15:16,720
uh i guess

418
00:15:16,720 --> 00:15:19,040
a bug rather than a feature in using

419
00:15:19,040 --> 00:15:21,760
this kind of mode of operation

420
00:15:21,760 --> 00:15:22,800
so

421
00:15:22,800 --> 00:15:24,639
uh i want to talk about some ways to

422
00:15:24,639 --> 00:15:26,480
mitigate against this type of attack

423
00:15:26,480 --> 00:15:29,279
and then um i'll present our results

424
00:15:29,279 --> 00:15:31,360
which basically is

425
00:15:31,360 --> 00:15:33,199
some analyses of these mitigations in

426
00:15:33,199 --> 00:15:35,600
the generic group model

427
00:15:35,600 --> 00:15:36,480
so

428
00:15:36,480 --> 00:15:38,839
one idea that we had

429
00:15:38,839 --> 00:15:41,680
to uh prevent this kind of

430
00:15:41,680 --> 00:15:44,399
cube root type of attack is to use what

431
00:15:44,399 --> 00:15:46,320
we call re-randomize pre-signatures and

432
00:15:46,320 --> 00:15:47,440
when i show this to you you'll think

433
00:15:47,440 --> 00:15:48,720
it's just kind of cheating in some way

434
00:15:48,720 --> 00:15:51,440
so the idea is this we start with a bass

435
00:15:51,440 --> 00:15:53,519
pre-signature just as a normal

436
00:15:53,519 --> 00:15:54,880
pre-signature but i'll call it a bass

437
00:15:54,880 --> 00:15:57,360
free signature r prime

438
00:15:57,360 --> 00:15:59,279
so you you pre-compute those now when a

439
00:15:59,279 --> 00:16:01,279
signing request comes in

440
00:16:01,279 --> 00:16:03,519
what we do only after the message has

441
00:16:03,519 --> 00:16:06,079
been committed to by the by the attacker

442
00:16:06,079 --> 00:16:09,120
we replace this this base pre-signature

443
00:16:09,120 --> 00:16:11,759
by the actual pre-signature so we we

444
00:16:11,759 --> 00:16:14,480
generate or we obtain a random number

445
00:16:14,480 --> 00:16:18,320
delta and basically add that to a delta

446
00:16:18,320 --> 00:16:19,519
times the generator to our base

447
00:16:19,519 --> 00:16:21,519
pre-signature so the important thing is

448
00:16:21,519 --> 00:16:23,519
that this delta

449
00:16:23,519 --> 00:16:26,160
is a public random value

450
00:16:26,160 --> 00:16:28,399
um so we don't it's not secret shared or

451
00:16:28,399 --> 00:16:29,759
anything so it's just derived publicly

452
00:16:29,759 --> 00:16:30,800
it's kind of like a you could get it

453
00:16:30,800 --> 00:16:33,519
from like a random beacon or some other

454
00:16:33,519 --> 00:16:34,800
threshold

455
00:16:34,800 --> 00:16:35,600
uh

456
00:16:35,600 --> 00:16:38,000
signing protocol that you could use

457
00:16:38,000 --> 00:16:39,759
like a blf signature scheme for example

458
00:16:39,759 --> 00:16:41,120
that's what we actually do in our

459
00:16:41,120 --> 00:16:42,639
implementation

460
00:16:42,639 --> 00:16:44,720
so it's so it's a little bit cheating

461
00:16:44,720 --> 00:16:46,480
because we're going to use

462
00:16:46,480 --> 00:16:49,279
another threshold

463
00:16:49,279 --> 00:16:51,279
signature scheme namely bls actually in

464
00:16:51,279 --> 00:16:53,040
our implementation to generate this

465
00:16:53,040 --> 00:16:55,440
public randomness uh but other than that

466
00:16:55,440 --> 00:16:57,360
it's efficient to implement it may

467
00:16:57,360 --> 00:16:59,680
introduce some additional latency

468
00:16:59,680 --> 00:17:01,440
in the sense that um

469
00:17:01,440 --> 00:17:02,880
uh

470
00:17:02,880 --> 00:17:04,880
you can only generate this delta after

471
00:17:04,880 --> 00:17:06,640
the the message to be signed has been

472
00:17:06,640 --> 00:17:08,240
committed to at least in our

473
00:17:08,240 --> 00:17:10,240
implementation it it doesn't introduce

474
00:17:10,240 --> 00:17:12,720
any latency because anyway a signing

475
00:17:12,720 --> 00:17:14,400
request has to pass through pass through

476
00:17:14,400 --> 00:17:16,480
a whole consensus protocol and by the

477
00:17:16,480 --> 00:17:18,240
time that happens you can easily start

478
00:17:18,240 --> 00:17:19,280
releasing

479
00:17:19,280 --> 00:17:22,000
the the shares of delta before before

480
00:17:22,000 --> 00:17:24,000
that happens

481
00:17:24,000 --> 00:17:25,520
so that's one mitigation this

482
00:17:25,520 --> 00:17:27,520
re-randomized pre-signatures the other

483
00:17:27,520 --> 00:17:29,120
one

484
00:17:29,120 --> 00:17:31,679
is i'll call it a homogeneous key

485
00:17:31,679 --> 00:17:32,799
derivation

486
00:17:32,799 --> 00:17:35,840
so here the idea is that

487
00:17:35,840 --> 00:17:38,080
instead of having a single kind of

488
00:17:38,080 --> 00:17:40,080
master secret key d we're going to have

489
00:17:40,080 --> 00:17:43,440
two master secret keys d and d prime

490
00:17:43,440 --> 00:17:45,120
and then a corresponding master public

491
00:17:45,120 --> 00:17:46,640
key

492
00:17:46,640 --> 00:17:49,280
big d and big d prime

493
00:17:49,280 --> 00:17:50,160
then

494
00:17:50,160 --> 00:17:52,640
once we get a tweak

495
00:17:52,640 --> 00:17:54,880
we're going to derive the secret key

496
00:17:54,880 --> 00:17:56,960
as a linear combination of d and d prime

497
00:17:56,960 --> 00:17:58,400
so we're going to the new secret key

498
00:17:58,400 --> 00:18:01,760
will be d plus the tweak e times d prime

499
00:18:01,760 --> 00:18:03,919
and then the corresponding public key

500
00:18:03,919 --> 00:18:05,919
will be

501
00:18:05,919 --> 00:18:08,160
that

502
00:18:10,400 --> 00:18:11,280
so

503
00:18:11,280 --> 00:18:13,600
this is so that's a mitigation and i'll

504
00:18:13,600 --> 00:18:15,520
show you in a minute um

505
00:18:15,520 --> 00:18:17,600
what it buys you but right away just one

506
00:18:17,600 --> 00:18:19,679
disadvantage that i'll point out is that

507
00:18:19,679 --> 00:18:22,240
um it's not compatible with bip 32 and

508
00:18:22,240 --> 00:18:23,760
we wanted to have some compatibility

509
00:18:23,760 --> 00:18:25,760
with bip 32 so we didn't actually

510
00:18:25,760 --> 00:18:27,520
implement this

511
00:18:27,520 --> 00:18:28,559
um

512
00:18:28,559 --> 00:18:31,360
but one could

513
00:18:31,360 --> 00:18:32,640
and

514
00:18:32,640 --> 00:18:34,720
finally you can actually if you wanted

515
00:18:34,720 --> 00:18:36,960
to combine both of these mitigations and

516
00:18:36,960 --> 00:18:38,640
you'll see on the next slide that this

517
00:18:38,640 --> 00:18:40,400
also buys you something you can combine

518
00:18:40,400 --> 00:18:42,559
re-randomized pre-signatures

519
00:18:42,559 --> 00:18:45,840
with homogeneous key derivation

520
00:18:45,840 --> 00:18:46,720
so

521
00:18:46,720 --> 00:18:48,880
this is what we analyzed in this paper

522
00:18:48,880 --> 00:18:50,640
is actually we have like nine different

523
00:18:50,640 --> 00:18:51,679
theorems

524
00:18:51,679 --> 00:18:52,559
so

525
00:18:52,559 --> 00:18:53,679
let me just

526
00:18:53,679 --> 00:18:55,039
walk through kind of briefly and

527
00:18:55,039 --> 00:18:56,799
highlight some of the main

528
00:18:56,799 --> 00:18:59,919
uh salient features so first we start

529
00:18:59,919 --> 00:19:01,200
out looking at

530
00:19:01,200 --> 00:19:03,360
no key derivation and we look at no

531
00:19:03,360 --> 00:19:05,679
pre-signatures pre-cigs and re-randomize

532
00:19:05,679 --> 00:19:08,640
pre-signatures so this first result here

533
00:19:08,640 --> 00:19:10,880
is basically brown's theorem from

534
00:19:10,880 --> 00:19:13,120
uh 2002.

535
00:19:13,120 --> 00:19:15,039
this says that in the

536
00:19:15,039 --> 00:19:18,080
in the generic group model

537
00:19:18,080 --> 00:19:19,039
the

538
00:19:19,039 --> 00:19:21,120
advantage that an adversary has in

539
00:19:21,120 --> 00:19:23,280
breaking the signature scheme is just

540
00:19:23,280 --> 00:19:25,120
the advantage of finding a collision

541
00:19:25,120 --> 00:19:27,200
that is epsilon cr

542
00:19:27,200 --> 00:19:30,960
plus n times the advantage of finding a

543
00:19:30,960 --> 00:19:33,760
a pre-image of a random number under the

544
00:19:33,760 --> 00:19:35,440
hash function and then there's this

545
00:19:35,440 --> 00:19:36,720
strange

546
00:19:36,720 --> 00:19:39,440
zpr which is the advantage of finding a

547
00:19:39,440 --> 00:19:40,960
pre angle of zero

548
00:19:40,960 --> 00:19:42,480
of the hash function

549
00:19:42,480 --> 00:19:45,440
and then you have the n squared over q

550
00:19:45,440 --> 00:19:47,440
which comes from the usual

551
00:19:47,440 --> 00:19:50,720
uh generic group model kind of analysis

552
00:19:50,720 --> 00:19:53,280
so that's actually brown's result

553
00:19:53,280 --> 00:19:54,960
um

554
00:19:54,960 --> 00:19:57,360
yeah n here is the number of queries

555
00:19:57,360 --> 00:19:58,480
that counts

556
00:19:58,480 --> 00:20:00,160
group operation queries in the generic

557
00:20:00,160 --> 00:20:01,440
group model

558
00:20:01,440 --> 00:20:04,480
uh signing queries etc

559
00:20:04,480 --> 00:20:07,600
then if we uh look at

560
00:20:07,600 --> 00:20:10,400
again still no key derivation

561
00:20:10,400 --> 00:20:12,880
but with free signatures

562
00:20:12,880 --> 00:20:14,400
then we get uh

563
00:20:14,400 --> 00:20:16,559
another result which here

564
00:20:16,559 --> 00:20:19,520
uh let's see um qualitatively what's

565
00:20:19,520 --> 00:20:20,480
different

566
00:20:20,480 --> 00:20:22,799
you'll see here we have a factor u times

567
00:20:22,799 --> 00:20:25,360
n instead of an n here

568
00:20:25,360 --> 00:20:26,480
uh

569
00:20:26,480 --> 00:20:27,919
and then also

570
00:20:27,919 --> 00:20:30,400
so u here is the number of unused free

571
00:20:30,400 --> 00:20:32,240
signatures at any point in time you can

572
00:20:32,240 --> 00:20:33,600
generate free signatures and then you

573
00:20:33,600 --> 00:20:34,880
consume them when you sign and then

574
00:20:34,880 --> 00:20:35,919
there's at any point in time there's

575
00:20:35,919 --> 00:20:37,280
some number of unused pre-signatures and

576
00:20:37,280 --> 00:20:39,200
that for whatever reason comes into the

577
00:20:39,200 --> 00:20:40,400
analysis

578
00:20:40,400 --> 00:20:42,320
uh we also have another complexity

579
00:20:42,320 --> 00:20:44,400
assumption here which is i'll call ratio

580
00:20:44,400 --> 00:20:48,080
resistance this epsilon rr so this is uh

581
00:20:48,080 --> 00:20:50,720
the uh abound on the advantage to find

582
00:20:50,720 --> 00:20:53,039
two messages who

583
00:20:53,039 --> 00:20:55,440
who's do who's uh if you look at their

584
00:20:55,440 --> 00:20:57,360
hashes their ratios hit some random

585
00:20:57,360 --> 00:20:58,960
number

586
00:20:58,960 --> 00:21:00,400
so um

587
00:21:00,400 --> 00:21:04,000
this is similar to the result proved by

588
00:21:04,000 --> 00:21:06,080
canetti at all in 2020 it's a little bit

589
00:21:06,080 --> 00:21:07,600
tighter actually than their result but

590
00:21:07,600 --> 00:21:09,200
that's not that interesting

591
00:21:09,200 --> 00:21:10,960
um

592
00:21:10,960 --> 00:21:12,960
then if we look at re-randomized

593
00:21:12,960 --> 00:21:14,720
pre-signatures this first mitigation i

594
00:21:14,720 --> 00:21:16,799
told you about so you'll see here that

595
00:21:16,799 --> 00:21:18,720
you know this reduction here in the

596
00:21:18,720 --> 00:21:20,080
second column

597
00:21:20,080 --> 00:21:22,080
is much sloppier than the than the

598
00:21:22,080 --> 00:21:24,320
original brown result and the nice thing

599
00:21:24,320 --> 00:21:26,080
you'll notice about this slide even

600
00:21:26,080 --> 00:21:28,080
though there are nine boxes a lot of

601
00:21:28,080 --> 00:21:30,000
them are the same in particular

602
00:21:30,000 --> 00:21:31,840
everything in column three is going to

603
00:21:31,840 --> 00:21:33,360
be the same as everything in column one

604
00:21:33,360 --> 00:21:35,360
so when we apply the re-randomized

605
00:21:35,360 --> 00:21:36,799
pre-signatures

606
00:21:36,799 --> 00:21:39,840
um mitigation we end up back in column

607
00:21:39,840 --> 00:21:41,919
one as if there were no

608
00:21:41,919 --> 00:21:42,720
uh

609
00:21:42,720 --> 00:21:44,880
pre-signatures at all

610
00:21:44,880 --> 00:21:47,520
then we look at additive key derivation

611
00:21:47,520 --> 00:21:48,799
um

612
00:21:48,799 --> 00:21:51,520
and again you can see here that

613
00:21:51,520 --> 00:21:53,360
everything gets slightly more painful

614
00:21:53,360 --> 00:21:55,760
and and the reduction gets sloppier and

615
00:21:55,760 --> 00:21:58,640
sloppier here we have to multiply this

616
00:21:58,640 --> 00:22:03,200
random pre-image thing by a factor

617
00:22:03,200 --> 00:22:03,919
of

618
00:22:03,919 --> 00:22:07,039
the size of the tweak set so here

619
00:22:07,039 --> 00:22:08,720
in this particular analysis i'm looking

620
00:22:08,720 --> 00:22:10,320
at the set of allowed tweaks i'm viewing

621
00:22:10,320 --> 00:22:11,840
the tweaks as the output of some random

622
00:22:11,840 --> 00:22:13,679
oracle i'll say something more about

623
00:22:13,679 --> 00:22:16,960
that in a minute um but assuming that we

624
00:22:16,960 --> 00:22:18,720
view the tweaks themselves as the output

625
00:22:18,720 --> 00:22:20,640
of some random oracle we can kind of

626
00:22:20,640 --> 00:22:22,960
make the adversary commit to the set of

627
00:22:22,960 --> 00:22:24,720
all possible tweaks in advance and then

628
00:22:24,720 --> 00:22:28,080
we have a guessing argument that kind of

629
00:22:28,080 --> 00:22:30,720
inflates the the

630
00:22:30,720 --> 00:22:33,600
the reduction here

631
00:22:33,760 --> 00:22:35,919
then we come to pre this is okay this is

632
00:22:35,919 --> 00:22:37,520
the worst of all possible word worlds

633
00:22:37,520 --> 00:22:39,360
here is when you combine additive key

634
00:22:39,360 --> 00:22:41,360
derivation with free signatures i showed

635
00:22:41,360 --> 00:22:43,120
you this quote unquote attack the good

636
00:22:43,120 --> 00:22:44,400
news is that

637
00:22:44,400 --> 00:22:46,400
it's no worse than that we can basically

638
00:22:46,400 --> 00:22:49,600
we basically show that there are some

639
00:22:49,600 --> 00:22:51,440
specific instances of the foursome

640
00:22:51,440 --> 00:22:54,880
problem that you can bounce the the

641
00:22:54,880 --> 00:22:56,080
bounds the

642
00:22:56,080 --> 00:22:57,679
the probability of breaking it by so you

643
00:22:57,679 --> 00:23:00,720
get a reduction to a four-sum problem

644
00:23:00,720 --> 00:23:02,720
and then as usual if we add

645
00:23:02,720 --> 00:23:05,039
re-randomized pre-signatures to that we

646
00:23:05,039 --> 00:23:09,840
get back to column one so that's good

647
00:23:09,840 --> 00:23:12,400
so this is actually what we we implement

648
00:23:12,400 --> 00:23:13,679
additive key derivation with

649
00:23:13,679 --> 00:23:15,760
re-randomized free signatures it's it

650
00:23:15,760 --> 00:23:17,440
gives you a pretty good bound then

651
00:23:17,440 --> 00:23:19,039
finally if we look at homogeneous key

652
00:23:19,039 --> 00:23:21,840
derivation the good news is here column

653
00:23:21,840 --> 00:23:24,960
no row three is the same as row one so

654
00:23:24,960 --> 00:23:27,440
uh when you so so homogeneous key

655
00:23:27,440 --> 00:23:30,480
derivation is actually uh a more

656
00:23:30,480 --> 00:23:33,120
a more powerful mitigation so here you

657
00:23:33,120 --> 00:23:34,799
just see we get everything

658
00:23:34,799 --> 00:23:38,400
as in column one in particular

659
00:23:38,400 --> 00:23:41,120
this cell down here on the lower right

660
00:23:41,120 --> 00:23:42,400
is the same

661
00:23:42,400 --> 00:23:44,799
as brown's cell up on the right so if

662
00:23:44,799 --> 00:23:46,880
you do homogeneous key derivation plus

663
00:23:46,880 --> 00:23:48,880
re-randomized free signatures you're

664
00:23:48,880 --> 00:23:51,039
like living in the same world that

665
00:23:51,039 --> 00:23:52,960
brown was living in 20 years ago so

666
00:23:52,960 --> 00:23:54,240
that's nice it gives you a nice tight

667
00:23:54,240 --> 00:23:56,000
reduction

668
00:23:56,000 --> 00:23:57,440
and

669
00:23:57,440 --> 00:23:59,360
i'll finish up by just mentioning a

670
00:23:59,360 --> 00:24:01,520
couple other features

671
00:24:01,520 --> 00:24:03,679
of our analysis i won't be doing any

672
00:24:03,679 --> 00:24:06,880
proofs here it's all done in a generic

673
00:24:06,880 --> 00:24:10,480
group model um there's been some

674
00:24:10,480 --> 00:24:12,320
complaints about the generic group model

675
00:24:12,320 --> 00:24:14,720
especially as it relates to the elliptic

676
00:24:14,720 --> 00:24:15,919
curves

677
00:24:15,919 --> 00:24:17,279
uh

678
00:24:17,279 --> 00:24:20,000
and and and ecdsa in particular

679
00:24:20,000 --> 00:24:22,080
so what we do

680
00:24:22,080 --> 00:24:23,840
to kind of address some of those

681
00:24:23,840 --> 00:24:24,880
complaints

682
00:24:24,880 --> 00:24:27,520
is to uh you know in so the generic

683
00:24:27,520 --> 00:24:28,480
group model we're basically going to

684
00:24:28,480 --> 00:24:29,760
choose

685
00:24:29,760 --> 00:24:32,720
a random encoding of the group

686
00:24:32,720 --> 00:24:35,200
uh we have a group of prime order queue

687
00:24:35,200 --> 00:24:36,640
and we're going to just pick a random

688
00:24:36,640 --> 00:24:38,240
encoding of it and then

689
00:24:38,240 --> 00:24:40,720
the adversary gets black box access to

690
00:24:40,720 --> 00:24:43,200
add and do group operations on these

691
00:24:43,200 --> 00:24:45,919
random encodings but our encoding space

692
00:24:45,919 --> 00:24:47,840
so to speak is actually an elliptic

693
00:24:47,840 --> 00:24:48,640
curve

694
00:24:48,640 --> 00:24:50,240
of prime order q it's just that we

695
00:24:50,240 --> 00:24:52,559
ignore the group law

696
00:24:52,559 --> 00:24:55,120
right so the group law is just

697
00:24:55,120 --> 00:24:56,880
is has nothing to do with the group law

698
00:24:56,880 --> 00:24:58,480
of the elliptic curve but the space in

699
00:24:58,480 --> 00:25:01,039
which the group elements the encoded

700
00:25:01,039 --> 00:25:03,200
group elements live is

701
00:25:03,200 --> 00:25:06,159
is is an elliptic curve except again to

702
00:25:06,159 --> 00:25:07,760
address complaints

703
00:25:07,760 --> 00:25:08,640
uh

704
00:25:08,640 --> 00:25:12,400
we in f we enforce the condition that

705
00:25:12,400 --> 00:25:13,120
the

706
00:25:13,120 --> 00:25:15,840
inverse in the group of an element of

707
00:25:15,840 --> 00:25:17,600
this curve really respects the usual

708
00:25:17,600 --> 00:25:18,960
inverse law

709
00:25:18,960 --> 00:25:21,279
right and this gets at um

710
00:25:21,279 --> 00:25:23,440
this allows us to model some quarks in

711
00:25:23,440 --> 00:25:26,559
ecdsa in particular malleability in

712
00:25:26,559 --> 00:25:28,799
particular if you have a signature st on

713
00:25:28,799 --> 00:25:31,679
a message m then so is minus st

714
00:25:31,679 --> 00:25:32,480
so

715
00:25:32,480 --> 00:25:34,240
we can actually model this and not only

716
00:25:34,240 --> 00:25:35,679
can we model the malleability we can

717
00:25:35,679 --> 00:25:37,120
actually then prove

718
00:25:37,120 --> 00:25:39,840
in this particular ggm

719
00:25:39,840 --> 00:25:41,120
model that

720
00:25:41,120 --> 00:25:43,919
ecdsa is only malleable in this way

721
00:25:43,919 --> 00:25:45,919
which isn't surprising really

722
00:25:45,919 --> 00:25:48,400
we also analyze the standardized bib32

723
00:25:48,400 --> 00:25:50,880
construction and show that it's actually

724
00:25:50,880 --> 00:25:52,480
indifferentiable from a

725
00:25:52,480 --> 00:25:54,400
random oracle really a public random

726
00:25:54,400 --> 00:25:55,760
oracle but it doesn't really matter in

727
00:25:55,760 --> 00:25:57,600
this application

728
00:25:57,600 --> 00:25:59,840
and we also analyze the additive key

729
00:25:59,840 --> 00:26:01,279
derivation

730
00:26:01,279 --> 00:26:03,200
without using random oracles and just

731
00:26:03,200 --> 00:26:05,279
using kind of concrete assert security

732
00:26:05,279 --> 00:26:07,120
assumptions and the interaction between

733
00:26:07,120 --> 00:26:10,080
the ecdsa hash and the hash that's used

734
00:26:10,080 --> 00:26:11,279
to derive

735
00:26:11,279 --> 00:26:12,880
the tweaks

736
00:26:12,880 --> 00:26:14,960
so that's it thanks and i'll make a

737
00:26:14,960 --> 00:26:17,360
shameless plug to we're still looking to

738
00:26:17,360 --> 00:26:20,320
hire people at dfinity

739
00:26:20,320 --> 00:26:23,559
thank you

740
00:26:25,279 --> 00:26:26,559
um

741
00:26:26,559 --> 00:26:28,880
thanks for the talk uh are there

742
00:26:28,880 --> 00:26:32,400
questions for the last speaker

743
00:26:32,880 --> 00:26:34,240
um

744
00:26:34,240 --> 00:26:36,880
maybe a quick one um so

745
00:26:36,880 --> 00:26:38,480
in addition or

746
00:26:38,480 --> 00:26:40,080
except for the meme attack that you had

747
00:26:40,080 --> 00:26:43,919
are there any known attacks uh on

748
00:26:43,919 --> 00:26:44,799
uh

749
00:26:44,799 --> 00:26:46,640
if you have only uh

750
00:26:46,640 --> 00:26:48,640
pre-six or additive key derivation but

751
00:26:48,640 --> 00:26:50,400
not both together

752
00:26:50,400 --> 00:26:52,240
well we did i mean we do previous

753
00:26:52,240 --> 00:26:53,520
theorem right it's lower bonds but does

754
00:26:53,520 --> 00:26:55,760
it translate into

755
00:26:55,760 --> 00:26:56,960
um

756
00:26:56,960 --> 00:26:59,360
something

757
00:27:01,120 --> 00:27:02,320
because you have a bit of a loss right

758
00:27:02,320 --> 00:27:04,000
in comparison to that

759
00:27:04,000 --> 00:27:05,919
oh yeah there's some other yeah there's

760
00:27:05,919 --> 00:27:07,679
some other sloppiness in here like this

761
00:27:07,679 --> 00:27:09,760
extra factor here and there are various

762
00:27:09,760 --> 00:27:11,120
extra factors here and there that come

763
00:27:11,120 --> 00:27:12,880
into just making a standard kind of

764
00:27:12,880 --> 00:27:16,480
hybrid argument or guessing argument and

765
00:27:16,480 --> 00:27:19,360
it's typical right in those cases

766
00:27:19,360 --> 00:27:21,360
i there may be attacks there may not be

767
00:27:21,360 --> 00:27:22,000
a

768
00:27:22,000 --> 00:27:24,399
we didn't really dive too deep into that

769
00:27:24,399 --> 00:27:26,000
there could be attacks there that match

770
00:27:26,000 --> 00:27:27,919
the upper bounds but i actually wouldn't

771
00:27:27,919 --> 00:27:29,120
want to

772
00:27:29,120 --> 00:27:32,240
spend any money thanks a lot okay so uh

773
00:27:32,240 --> 00:27:33,440
let's thank all the speakers from the

774
00:27:33,440 --> 00:27:34,260
last session again

775
00:27:34,260 --> 00:27:37,440
[Applause]

776
00:27:37,440 --> 00:27:40,799
and this concludes day one of eurocrypt

777
00:27:40,799 --> 00:27:42,960
have

778
00:27:47,120 --> 00:27:46,120
is fun

