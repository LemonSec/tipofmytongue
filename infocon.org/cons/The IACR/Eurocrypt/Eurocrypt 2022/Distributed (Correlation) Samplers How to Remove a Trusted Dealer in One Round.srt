1
00:00:08,160 --> 00:00:11,160
sure

2
00:00:24,560 --> 00:00:27,519
okay so the third speaker is the mano

3
00:00:27,519 --> 00:00:28,880
abram

4
00:00:28,880 --> 00:00:30,880
is going to talk about distributed

5
00:00:30,880 --> 00:00:33,600
correlation samplers which is joint work

6
00:00:33,600 --> 00:00:37,440
with peter shaw and sophia yakubov

7
00:00:37,440 --> 00:00:39,600
so hi everybody my name is damiano and

8
00:00:39,600 --> 00:00:41,600
now i'm going to present our paper which

9
00:00:41,600 --> 00:00:43,360
is titled distributed correlation

10
00:00:43,360 --> 00:00:45,360
samplers how to remove a trusted dealer

11
00:00:45,360 --> 00:00:46,960
in one round

12
00:00:46,960 --> 00:00:48,719
this is the result of a collaboration

13
00:00:48,719 --> 00:00:51,039
between myself peter scholl and sophia

14
00:00:51,039 --> 00:00:52,160
yakubov

15
00:00:52,160 --> 00:00:54,399
so the main contributions of our work

16
00:00:54,399 --> 00:00:56,320
are two and the first one is the

17
00:00:56,320 --> 00:00:58,000
introduction of a new cryptographic

18
00:00:58,000 --> 00:01:00,719
primitive called distributed samplers

19
00:01:00,719 --> 00:01:02,879
these are basically a one-round protocol

20
00:01:02,879 --> 00:01:06,000
that allow n parties to generate any crs

21
00:01:06,000 --> 00:01:08,479
in a secure way using only

22
00:01:08,479 --> 00:01:10,960
as i said one round of interaction

23
00:01:10,960 --> 00:01:12,720
for instance

24
00:01:12,720 --> 00:01:14,640
we can use them to generate an rsa

25
00:01:14,640 --> 00:01:17,200
modulo without leaking the factorization

26
00:01:17,200 --> 00:01:18,960
and using only one round of

27
00:01:18,960 --> 00:01:20,720
communication

28
00:01:20,720 --> 00:01:22,720
in the paper we present definitions of

29
00:01:22,720 --> 00:01:24,479
distributed samplers

30
00:01:24,479 --> 00:01:27,119
under different security flavors and

31
00:01:27,119 --> 00:01:28,960
then we present the first constructions

32
00:01:28,960 --> 00:01:30,560
of this type building them from

33
00:01:30,560 --> 00:01:32,640
polynomially secure io

34
00:01:32,640 --> 00:01:34,960
the second contribution is the study of

35
00:01:34,960 --> 00:01:38,159
public qpcfs pcf stands for pseudorandom

36
00:01:38,159 --> 00:01:40,400
correlation function and basically they

37
00:01:40,400 --> 00:01:42,240
are m-party protocols that generate

38
00:01:42,240 --> 00:01:44,880
large amount of correlated material with

39
00:01:44,880 --> 00:01:46,720
sublinear communication in the size of

40
00:01:46,720 --> 00:01:48,640
the outputs and only one round of

41
00:01:48,640 --> 00:01:50,640
communication

42
00:01:50,640 --> 00:01:52,799
the primitive was introduced already by

43
00:01:52,799 --> 00:01:56,000
orland ital at eurocrypt 2021 but in

44
00:01:56,000 --> 00:01:57,759
their paper they present constructions

45
00:01:57,759 --> 00:02:00,560
that work only for ot and vector-only

46
00:02:00,560 --> 00:02:02,799
correlation in this work instead we

47
00:02:02,799 --> 00:02:05,759
formalize the notion of public upcfs and

48
00:02:05,759 --> 00:02:07,600
we present the first constructions that

49
00:02:07,600 --> 00:02:09,919
work for any correlation again we build

50
00:02:09,919 --> 00:02:13,120
them from obfuscation

51
00:02:13,120 --> 00:02:14,720
i will start by talking about

52
00:02:14,720 --> 00:02:16,720
distributed samples we are in the

53
00:02:16,720 --> 00:02:19,280
n-party setting and we allow up to n

54
00:02:19,280 --> 00:02:21,760
minus one corruptions our goal is to

55
00:02:21,760 --> 00:02:23,440
generate a sample r from the

56
00:02:23,440 --> 00:02:25,840
distribution d in a secure way and we

57
00:02:25,840 --> 00:02:28,000
model the distribution as a polynomial

58
00:02:28,000 --> 00:02:29,840
time algorithm that takes as input the

59
00:02:29,840 --> 00:02:33,280
security parameter and random coins

60
00:02:33,280 --> 00:02:35,599
we want to design constructions that use

61
00:02:35,599 --> 00:02:37,840
only one round of communication so each

62
00:02:37,840 --> 00:02:41,200
party pi will send a single message ui

63
00:02:41,200 --> 00:02:43,519
simultaneously to all the other parties

64
00:02:43,519 --> 00:02:45,040
after that everybody is able to

65
00:02:45,040 --> 00:02:47,440
recompute the output by simply applying

66
00:02:47,440 --> 00:02:48,959
a deterministic function on the

67
00:02:48,959 --> 00:02:51,120
transcript here you can notice that the

68
00:02:51,120 --> 00:02:53,360
output is public so even an adversary

69
00:02:53,360 --> 00:02:55,519
that just listens to the communications

70
00:02:55,519 --> 00:02:57,680
is able to retrieve it

71
00:02:57,680 --> 00:02:59,920
we consider two security settings the

72
00:02:59,920 --> 00:03:02,480
first one is against no rushing similar

73
00:03:02,480 --> 00:03:04,720
issues adversaries so assuming malicious

74
00:03:04,720 --> 00:03:07,280
adversary is like a semi honest one so

75
00:03:07,280 --> 00:03:09,519
it has to follow the protocol but it can

76
00:03:09,519 --> 00:03:11,440
also choose the random tapes of the

77
00:03:11,440 --> 00:03:13,840
corrupted parties as it likes

78
00:03:13,840 --> 00:03:15,760
since this adversary is non-rushing the

79
00:03:15,760 --> 00:03:17,840
choice of the random tapes has to be

80
00:03:17,840 --> 00:03:20,000
made before the messages of the honest

81
00:03:20,000 --> 00:03:22,080
players are delivered

82
00:03:22,080 --> 00:03:23,599
in this setting the functionality

83
00:03:23,599 --> 00:03:26,000
implemented by distributed samplers is

84
00:03:26,000 --> 00:03:28,319
really simple so it just generates a

85
00:03:28,319 --> 00:03:30,159
sample from the distribution and it

86
00:03:30,159 --> 00:03:32,000
outputs it to all the parties including

87
00:03:32,000 --> 00:03:33,680
the corrupted ones

88
00:03:33,680 --> 00:03:36,000
we also analyzed active security and

89
00:03:36,000 --> 00:03:38,000
here we have to modify the functionality

90
00:03:38,000 --> 00:03:39,519
a little bit

91
00:03:39,519 --> 00:03:41,200
in particular we have to allow the

92
00:03:41,200 --> 00:03:43,760
adversary to query the functionality for

93
00:03:43,760 --> 00:03:45,120
samples

94
00:03:45,120 --> 00:03:47,040
the adversary can issue as many queries

95
00:03:47,040 --> 00:03:48,720
as it likes

96
00:03:48,720 --> 00:03:51,120
at a certain point you can choose one of

97
00:03:51,120 --> 00:03:52,959
the samples it received the one that it

98
00:03:52,959 --> 00:03:54,879
likes the most and it can instruct the

99
00:03:54,879 --> 00:03:57,200
functionality to output the value to all

100
00:03:57,200 --> 00:03:59,680
the honest players

101
00:03:59,680 --> 00:04:01,760
now i would like to explain why we need

102
00:04:01,760 --> 00:04:03,760
this particular functionality and the

103
00:04:03,760 --> 00:04:06,720
reason is russian behavior suppose that

104
00:04:06,720 --> 00:04:09,760
the adversary corrupts only p2 and pi

105
00:04:09,760 --> 00:04:11,840
using russian behavior it can obtain the

106
00:04:11,840 --> 00:04:13,840
messages of the honest players before it

107
00:04:13,840 --> 00:04:15,519
sends the messages of the corrupted

108
00:04:15,519 --> 00:04:16,560
parties

109
00:04:16,560 --> 00:04:18,478
at that point it can rerun the protocol

110
00:04:18,478 --> 00:04:20,560
in its head many times regenerating the

111
00:04:20,560 --> 00:04:23,360
messages of the corrupted parties only

112
00:04:23,360 --> 00:04:26,000
and obtaining many different samples

113
00:04:26,000 --> 00:04:27,520
it can choose the one that it likes the

114
00:04:27,520 --> 00:04:29,759
most and it can send the corresponding

115
00:04:29,759 --> 00:04:32,160
messages of the corrupted player in the

116
00:04:32,160 --> 00:04:34,240
real protocol now it is sure that the

117
00:04:34,240 --> 00:04:36,000
honest parties will output the value

118
00:04:36,000 --> 00:04:37,840
that it pre-computed

119
00:04:37,840 --> 00:04:40,240
so in the active secure case we have

120
00:04:40,240 --> 00:04:41,280
exactly

121
00:04:41,280 --> 00:04:43,040
this kind of functionality first

122
00:04:43,040 --> 00:04:45,040
adversary receives a polynomial number

123
00:04:45,040 --> 00:04:46,960
of samples it chooses the one that it

124
00:04:46,960 --> 00:04:49,280
likes the most and it outputs

125
00:04:49,280 --> 00:04:51,120
and it forces the honest parties to

126
00:04:51,120 --> 00:04:52,560
output it

127
00:04:52,560 --> 00:04:54,800
so what are our results

128
00:04:54,800 --> 00:04:57,280
in the semi-malicious case we designed a

129
00:04:57,280 --> 00:04:58,800
distributed samplers for any

130
00:04:58,800 --> 00:05:01,440
distribution d in the plane model and

131
00:05:01,440 --> 00:05:02,960
using only polynomially secure

132
00:05:02,960 --> 00:05:04,720
primitives in particular io and

133
00:05:04,720 --> 00:05:06,320
multi-key fhc

134
00:05:06,320 --> 00:05:08,240
in the active secure case

135
00:05:08,240 --> 00:05:11,120
we distributed that we designed again

136
00:05:11,120 --> 00:05:12,800
distributed samplers for any

137
00:05:12,800 --> 00:05:15,280
distribution d but we had to rely on a

138
00:05:15,280 --> 00:05:17,840
random oracle again we just used a

139
00:05:17,840 --> 00:05:20,080
polynomially secure primitives io multi

140
00:05:20,080 --> 00:05:22,560
key fhc and netix

141
00:05:22,560 --> 00:05:25,199
okay now i would like to sketch our

142
00:05:25,199 --> 00:05:27,360
semi-malicious construction i will start

143
00:05:27,360 --> 00:05:29,600
from an attempt that doesn't really work

144
00:05:29,600 --> 00:05:32,560
but it gives a good idea of the uh

145
00:05:32,560 --> 00:05:34,639
and the main techniques of our

146
00:05:34,639 --> 00:05:36,000
construction

147
00:05:36,000 --> 00:05:38,000
uh we want to generate this sample r

148
00:05:38,000 --> 00:05:39,759
from the distribution d and the first

149
00:05:39,759 --> 00:05:42,080
challenge that we encounter is to choose

150
00:05:42,080 --> 00:05:44,880
the randomness that we feed into d

151
00:05:44,880 --> 00:05:46,960
this randomness has to be chosen jointly

152
00:05:46,960 --> 00:05:49,199
by the parties so we let each party pi

153
00:05:49,199 --> 00:05:51,280
to sample a share of it and what we

154
00:05:51,280 --> 00:05:54,880
input into d is the xor of r1 r2 rn

155
00:05:54,880 --> 00:05:56,319
clearly we cannot

156
00:05:56,319 --> 00:05:58,080
compute this operation in clear

157
00:05:58,080 --> 00:05:59,440
otherwise everybody would know the

158
00:05:59,440 --> 00:06:01,759
randomness that produced the output so

159
00:06:01,759 --> 00:06:03,600
instead we perform it in an encrypted

160
00:06:03,600 --> 00:06:05,759
way using multi-key fhc

161
00:06:05,759 --> 00:06:08,720
so each part api will send a public key

162
00:06:08,720 --> 00:06:10,800
along with an encryption of its share

163
00:06:10,800 --> 00:06:12,479
and at this point everybody would be

164
00:06:12,479 --> 00:06:14,720
able to obtain an encryption of the

165
00:06:14,720 --> 00:06:16,720
final output using the homomorphic

166
00:06:16,720 --> 00:06:19,120
properties the issue is nobody is able

167
00:06:19,120 --> 00:06:21,120
to decrypt it because the parties don't

168
00:06:21,120 --> 00:06:23,039
know the partial decryptions so they

169
00:06:23,039 --> 00:06:24,800
would need an additional round of

170
00:06:24,800 --> 00:06:25,840
interaction

171
00:06:25,840 --> 00:06:27,520
distributed samples are one-round

172
00:06:27,520 --> 00:06:29,440
protocols so this is not allowed we have

173
00:06:29,440 --> 00:06:31,440
to find another way so we rely on

174
00:06:31,440 --> 00:06:33,919
obfuscation each party part api now

175
00:06:33,919 --> 00:06:36,160
sends an obfuscated program called the

176
00:06:36,160 --> 00:06:38,639
evaluation program along with its public

177
00:06:38,639 --> 00:06:40,720
key and its cipher text

178
00:06:40,720 --> 00:06:42,880
this obfuscated program will contain the

179
00:06:42,880 --> 00:06:44,880
secret key of the highest party

180
00:06:44,880 --> 00:06:47,280
hard-coded it will take as input all the

181
00:06:47,280 --> 00:06:49,919
cybertext it will evaluate

182
00:06:49,919 --> 00:06:53,280
the the distribution homomorphically on

183
00:06:53,280 --> 00:06:55,759
the inputs and finally it will perform

184
00:06:55,759 --> 00:06:57,199
the partial decryption using the

185
00:06:57,199 --> 00:06:59,199
hard-coded secret key

186
00:06:59,199 --> 00:07:00,960
so using the valuation programs the

187
00:07:00,960 --> 00:07:02,639
parties are able to obtain all the

188
00:07:02,639 --> 00:07:04,960
partial decryptions in one round so they

189
00:07:04,960 --> 00:07:06,560
can just run the final decryption

190
00:07:06,560 --> 00:07:09,759
algorithm and retrieve the output

191
00:07:09,759 --> 00:07:12,160
so the solution is correct it works only

192
00:07:12,160 --> 00:07:13,840
in one round the question is whether it

193
00:07:13,840 --> 00:07:16,479
is secure and the answer is no there are

194
00:07:16,479 --> 00:07:18,160
two problems and the first one is

195
00:07:18,160 --> 00:07:20,560
associated to an issue that all one

196
00:07:20,560 --> 00:07:23,039
round npc protocols have namely that the

197
00:07:23,039 --> 00:07:25,120
adversary can rerun the protocol in its

198
00:07:25,120 --> 00:07:27,360
head many times changing the messages of

199
00:07:27,360 --> 00:07:28,800
the corrupted players and still

200
00:07:28,800 --> 00:07:30,479
receiving an output

201
00:07:30,479 --> 00:07:32,560
so suppose that p1 is the only corrupted

202
00:07:32,560 --> 00:07:35,360
party after the honest execution the

203
00:07:35,360 --> 00:07:37,440
adversary can rerun the protocol in its

204
00:07:37,440 --> 00:07:38,479
head

205
00:07:38,479 --> 00:07:41,599
but he doesn't send an encryption of r1

206
00:07:41,599 --> 00:07:43,919
but an encryption of r1 xor with an

207
00:07:43,919 --> 00:07:45,199
error if

208
00:07:45,199 --> 00:07:47,039
it still receives an output because it's

209
00:07:47,039 --> 00:07:49,039
a one run protocol and this output is a

210
00:07:49,039 --> 00:07:51,840
sample re from the distribution d

211
00:07:51,840 --> 00:07:53,919
our e is correlated to the actual output

212
00:07:53,919 --> 00:07:55,440
of the protocol indeed we use its

213
00:07:55,440 --> 00:07:59,440
randomness the xor of r1 r2 rn and their

214
00:07:59,440 --> 00:08:00,960
their or e that is known to the

215
00:08:00,960 --> 00:08:03,919
adversary this is an issue because it

216
00:08:03,919 --> 00:08:06,879
may be possible that all these values

217
00:08:06,879 --> 00:08:09,440
may permit to

218
00:08:09,440 --> 00:08:11,919
retrieve the randomness r that was used

219
00:08:11,919 --> 00:08:13,440
for the actual output

220
00:08:13,440 --> 00:08:15,680
so we need to fix this

221
00:08:15,680 --> 00:08:17,919
the second issue is instead connected to

222
00:08:17,919 --> 00:08:20,319
the valuation program and in order to

223
00:08:20,319 --> 00:08:22,560
understand why suppose that pi is the

224
00:08:22,560 --> 00:08:24,879
only honest player so the security of

225
00:08:24,879 --> 00:08:27,440
the construction requires that ri is

226
00:08:27,440 --> 00:08:29,680
kept secret but in the protocol we send

227
00:08:29,680 --> 00:08:31,360
an encryption of our eye to the other

228
00:08:31,360 --> 00:08:33,360
parties so we have to rely on semantic

229
00:08:33,360 --> 00:08:35,599
security and semantic security holds as

230
00:08:35,599 --> 00:08:36,958
long as we like new information about

231
00:08:36,958 --> 00:08:38,240
the secret key

232
00:08:38,240 --> 00:08:40,159
but now the secret key is are coded into

233
00:08:40,159 --> 00:08:42,240
these evaluation programs so we need to

234
00:08:42,240 --> 00:08:43,919
argue that this program doesn't leak

235
00:08:43,919 --> 00:08:46,080
information how do we do this well in

236
00:08:46,080 --> 00:08:48,160
the security proof we will substitute

237
00:08:48,160 --> 00:08:50,240
this program with another one that is

238
00:08:50,240 --> 00:08:51,839
indistinguishable but that doesn't

239
00:08:51,839 --> 00:08:54,640
contain ski hard-coded

240
00:08:54,640 --> 00:08:57,040
now this is tricky because the number of

241
00:08:57,040 --> 00:08:58,800
potential inputs that virtually can

242
00:08:58,800 --> 00:08:59,920
evaluate

243
00:08:59,920 --> 00:09:02,480
on this program

244
00:09:02,480 --> 00:09:05,040
is exponential so if we want to remove

245
00:09:05,040 --> 00:09:07,120
ski we need to

246
00:09:07,120 --> 00:09:09,440
change all an exponential number of

247
00:09:09,440 --> 00:09:11,519
executions of this program and that

248
00:09:11,519 --> 00:09:14,080
requires exponentially many hybrids that

249
00:09:14,080 --> 00:09:16,160
would mean requiring sub-exponentially

250
00:09:16,160 --> 00:09:18,160
secure primitives in particular io and

251
00:09:18,160 --> 00:09:20,080
multi-key fhe they are strong

252
00:09:20,080 --> 00:09:21,680
assumptions we don't want them we need

253
00:09:21,680 --> 00:09:24,640
to find another solution

254
00:09:24,640 --> 00:09:27,519
we change our approach we this leads to

255
00:09:27,519 --> 00:09:29,040
the second attempt

256
00:09:29,040 --> 00:09:31,200
now we want to make sure that each party

257
00:09:31,200 --> 00:09:34,080
pi uses a different random string and a

258
00:09:34,080 --> 00:09:36,160
different key pair for every choice of

259
00:09:36,160 --> 00:09:38,720
the messages of the other parties so i

260
00:09:38,720 --> 00:09:40,640
explain it better we want that if any of

261
00:09:40,640 --> 00:09:43,040
the other parties changes its message

262
00:09:43,040 --> 00:09:45,279
either in the real execution or in one

263
00:09:45,279 --> 00:09:46,720
of the executions in the head of the

264
00:09:46,720 --> 00:09:49,760
adversary party pi uses an independent

265
00:09:49,760 --> 00:09:51,920
looking random string and an independent

266
00:09:51,920 --> 00:09:53,519
looking keeper

267
00:09:53,519 --> 00:09:55,120
how do we obtain that

268
00:09:55,120 --> 00:09:57,680
well we don't send the public keys and

269
00:09:57,680 --> 00:09:59,600
decipher text directly to the other

270
00:09:59,600 --> 00:10:02,640
parties we send instead an obfuscated

271
00:10:02,640 --> 00:10:04,160
program called the key generation

272
00:10:04,160 --> 00:10:06,320
program the goal of this program is to

273
00:10:06,320 --> 00:10:07,760
generate the public keys and the

274
00:10:07,760 --> 00:10:10,640
ciphertext of party api

275
00:10:10,640 --> 00:10:13,120
formally this program has a punctuable

276
00:10:13,120 --> 00:10:15,920
prf key hardcoded and it takes as input

277
00:10:15,920 --> 00:10:17,600
all the key generation programs of the

278
00:10:17,600 --> 00:10:19,760
other parties here actually there is an

279
00:10:19,760 --> 00:10:21,279
issue we cannot do this but for the

280
00:10:21,279 --> 00:10:23,120
moment i ignore it and i will talk about

281
00:10:23,120 --> 00:10:24,959
this later

282
00:10:24,959 --> 00:10:26,720
the first operation that the program

283
00:10:26,720 --> 00:10:29,600
performs is to feed the input as nuns to

284
00:10:29,600 --> 00:10:32,800
the prf and we obtain two random strings

285
00:10:32,800 --> 00:10:35,279
the first one is ri the share of party

286
00:10:35,279 --> 00:10:36,880
pi of the randomness the one that we

287
00:10:36,880 --> 00:10:38,880
feed into the distribution and the

288
00:10:38,880 --> 00:10:41,680
second one is a random string called our

289
00:10:41,680 --> 00:10:42,640
head

290
00:10:42,640 --> 00:10:45,279
so our head is fed into the multi-key

291
00:10:45,279 --> 00:10:47,920
fhc key generation so from it we extract

292
00:10:47,920 --> 00:10:50,079
a keypair and the final operation that

293
00:10:50,079 --> 00:10:52,480
the program performs is to encrypt ri

294
00:10:52,480 --> 00:10:53,519
under the

295
00:10:53,519 --> 00:10:56,160
public key it just generated the output

296
00:10:56,160 --> 00:10:58,240
is pki and ci

297
00:10:58,240 --> 00:11:00,720
so what do we notice here we notice that

298
00:11:00,720 --> 00:11:02,880
if any of the other parties changes its

299
00:11:02,880 --> 00:11:06,160
message the nonce of the prf changes we

300
00:11:06,160 --> 00:11:08,640
get independent looking randomness and

301
00:11:08,640 --> 00:11:11,040
so independent looking keepers that's

302
00:11:11,040 --> 00:11:13,440
exactly what we want

303
00:11:13,440 --> 00:11:15,600
since we changed the way we generate the

304
00:11:15,600 --> 00:11:17,279
public keys and the ciphertext we need

305
00:11:17,279 --> 00:11:19,440
to change also the valuation program a

306
00:11:19,440 --> 00:11:20,560
little bit

307
00:11:20,560 --> 00:11:22,320
but the main ideas are the same as

308
00:11:22,320 --> 00:11:24,640
before now we hard code the punctuable

309
00:11:24,640 --> 00:11:27,200
prf key we give as input all the key

310
00:11:27,200 --> 00:11:30,320
generation programs of the other parties

311
00:11:30,320 --> 00:11:32,160
the evaluation program needs to retrieve

312
00:11:32,160 --> 00:11:34,480
the secret key for the final the partial

313
00:11:34,480 --> 00:11:36,880
decryption

314
00:11:36,880 --> 00:11:39,440
so how do we obtain that well we have

315
00:11:39,440 --> 00:11:41,440
the punctuable prf key we just repeat

316
00:11:41,440 --> 00:11:43,120
the operations performed in the key

317
00:11:43,120 --> 00:11:45,360
generation program

318
00:11:45,360 --> 00:11:46,959
the evaluation program needs also the

319
00:11:46,959 --> 00:11:48,640
public keys and the cipher text of the

320
00:11:48,640 --> 00:11:51,519
other parties we obtain them by running

321
00:11:51,519 --> 00:11:53,839
the key generation programs of the other

322
00:11:53,839 --> 00:11:56,480
players that were given as input all

323
00:11:56,480 --> 00:11:58,320
right now we have a solution that is

324
00:11:58,320 --> 00:12:00,800
correct it uses only one round

325
00:12:00,800 --> 00:12:02,720
and it is in principle secure there is

326
00:12:02,720 --> 00:12:05,440
only one issue namely that the program

327
00:12:05,440 --> 00:12:06,560
that you see on the top the key

328
00:12:06,560 --> 00:12:08,560
generation program doesn't exist as it

329
00:12:08,560 --> 00:12:10,800
is now the issue is that the inputs are

330
00:12:10,800 --> 00:12:13,120
too big indeed obfuscated programs are

331
00:12:13,120 --> 00:12:15,839
secrets we cannot fit them with inputs

332
00:12:15,839 --> 00:12:17,279
that are bigger

333
00:12:17,279 --> 00:12:19,279
than themselves and this is exactly what

334
00:12:19,279 --> 00:12:21,360
happens so we feed m minus one key

335
00:12:21,360 --> 00:12:23,279
generation programs to its key

336
00:12:23,279 --> 00:12:26,560
generation program that cannot happen

337
00:12:26,560 --> 00:12:28,959
so what's our solution we hash

338
00:12:28,959 --> 00:12:30,639
the key generation programs of the other

339
00:12:30,639 --> 00:12:34,560
parties before giving them to kgpi

340
00:12:34,560 --> 00:12:35,440
and

341
00:12:35,440 --> 00:12:37,120
we can do this because

342
00:12:37,120 --> 00:12:39,440
the inputs are just used as a nonce

343
00:12:39,440 --> 00:12:40,959
furthermore

344
00:12:40,959 --> 00:12:43,839
if any of the other parties changes

345
00:12:43,839 --> 00:12:46,160
its message by the collision resistance

346
00:12:46,160 --> 00:12:47,839
of the hash function we have different

347
00:12:47,839 --> 00:12:48,880
digests

348
00:12:48,880 --> 00:12:51,279
different analysis for the prf

349
00:12:51,279 --> 00:12:53,200
independent looking random strings and

350
00:12:53,200 --> 00:12:56,079
so an independent looking keeper

351
00:12:56,079 --> 00:12:58,240
to make this argument compatible with io

352
00:12:58,240 --> 00:13:00,240
we use a specific hash function that is

353
00:13:00,240 --> 00:13:02,240
called somewhere statistically binding

354
00:13:02,240 --> 00:13:04,399
but after this we have a secure

355
00:13:04,399 --> 00:13:05,839
construction

356
00:13:05,839 --> 00:13:07,600
that is correct

357
00:13:07,600 --> 00:13:08,480
okay

358
00:13:08,480 --> 00:13:11,200
so this is our simulation construction

359
00:13:11,200 --> 00:13:14,160
how do we upgrade it to active security

360
00:13:14,160 --> 00:13:16,480
well we designed a compiler called the

361
00:13:16,480 --> 00:13:18,880
anti-rusher compiler that

362
00:13:18,880 --> 00:13:21,680
takes a one-round protocol

363
00:13:21,680 --> 00:13:23,680
that is a semi-malicious

364
00:13:23,680 --> 00:13:25,360
um

365
00:13:25,360 --> 00:13:28,160
in the plain model and compiles it into

366
00:13:28,160 --> 00:13:30,079
an actively secure protocol that still

367
00:13:30,079 --> 00:13:33,040
has one round in the random oracle model

368
00:13:33,040 --> 00:13:35,040
the trick at the base of this compiler

369
00:13:35,040 --> 00:13:37,120
is the delayed vector programming

370
00:13:37,120 --> 00:13:39,040
technique by half heinz ethal at

371
00:13:39,040 --> 00:13:43,199
asiacrypt 2016. so using it we obtain an

372
00:13:43,199 --> 00:13:46,639
actively secure distributed sampler

373
00:13:46,639 --> 00:13:48,560
this is all i wanted to say about

374
00:13:48,560 --> 00:13:50,720
distributed samplers now i would like to

375
00:13:50,720 --> 00:13:53,680
talk a little bit about public key pcfs

376
00:13:53,680 --> 00:13:55,519
we are still in the n party setting and

377
00:13:55,519 --> 00:13:58,320
we allow up to n minus one corruptions

378
00:13:58,320 --> 00:14:00,000
now we don't deal anymore with the

379
00:14:00,000 --> 00:14:01,839
distribution but with the correlation

380
00:14:01,839 --> 00:14:03,040
function

381
00:14:03,040 --> 00:14:04,880
this correlation function outputs and

382
00:14:04,880 --> 00:14:07,600
correlated values one for each party

383
00:14:07,600 --> 00:14:10,240
our goal is to design a protocols that

384
00:14:10,240 --> 00:14:12,240
generate and distributes these

385
00:14:12,240 --> 00:14:14,560
correlated values in a secure way so

386
00:14:14,560 --> 00:14:17,120
party pi just must

387
00:14:17,120 --> 00:14:20,240
learn only its output ri

388
00:14:20,240 --> 00:14:22,560
we want to generate many samples using

389
00:14:22,560 --> 00:14:24,160
only one round and some linear

390
00:14:24,160 --> 00:14:26,160
communication in the amount of

391
00:14:26,160 --> 00:14:28,639
samples that we produce

392
00:14:28,639 --> 00:14:30,639
if we notice uh the role of these

393
00:14:30,639 --> 00:14:33,680
messages in this protocol uh we notice

394
00:14:33,680 --> 00:14:36,480
that a party pi is the only player that

395
00:14:36,480 --> 00:14:39,199
must learn ri so it has to leverage the

396
00:14:39,199 --> 00:14:40,639
fact that it's the only player that

397
00:14:40,639 --> 00:14:43,600
knows the randomness used to produce

398
00:14:43,600 --> 00:14:46,480
its message so this randomness acts as a

399
00:14:46,480 --> 00:14:49,519
private key whereas the message itself

400
00:14:49,519 --> 00:14:52,079
acts as the public counterpart that's

401
00:14:52,079 --> 00:14:54,160
why we call them public epcfs and we

402
00:14:54,160 --> 00:14:56,240
model them by saying that each party pi

403
00:14:56,240 --> 00:14:58,639
sends a public key keeping the private

404
00:14:58,639 --> 00:15:00,720
counterpart secret

405
00:15:00,720 --> 00:15:02,959
how do the parties retrieve their

406
00:15:02,959 --> 00:15:06,160
samples well they take enhanced x which

407
00:15:06,160 --> 00:15:07,600
can be public

408
00:15:07,600 --> 00:15:10,079
each party pj just runs an evaluation

409
00:15:10,079 --> 00:15:13,360
algorithm on all the n public keys its

410
00:15:13,360 --> 00:15:15,440
own secret key and then ansex in this

411
00:15:15,440 --> 00:15:18,079
way it obtains each part of the sample

412
00:15:18,079 --> 00:15:19,920
and the operation can the operation can

413
00:15:19,920 --> 00:15:22,480
be repeated for every nonsex without any

414
00:15:22,480 --> 00:15:24,240
other interaction

415
00:15:24,240 --> 00:15:25,120
okay

416
00:15:25,120 --> 00:15:28,240
we designed different uh public key pcfs

417
00:15:28,240 --> 00:15:29,440
some of them

418
00:15:29,440 --> 00:15:31,759
have semi-medicine security some other

419
00:15:31,759 --> 00:15:33,360
have active security

420
00:15:33,360 --> 00:15:35,360
we use polynomial secure primitives

421
00:15:35,360 --> 00:15:37,519
sometimes we use sub-exponentially

422
00:15:37,519 --> 00:15:39,440
secure io

423
00:15:39,440 --> 00:15:40,959
sometimes we are in depley models

424
00:15:40,959 --> 00:15:42,480
sometimes we are in the random oracle

425
00:15:42,480 --> 00:15:45,120
model but all the techniques are based

426
00:15:45,120 --> 00:15:47,199
on the same idea um

427
00:15:47,199 --> 00:15:49,839
we start from a simpler setting in which

428
00:15:49,839 --> 00:15:52,160
we allow a crs

429
00:15:52,160 --> 00:15:55,120
each part api generates a public key

430
00:15:55,120 --> 00:15:57,199
encryption keypair sending only the

431
00:15:57,199 --> 00:15:58,800
encryption key

432
00:15:58,800 --> 00:15:59,920
our

433
00:15:59,920 --> 00:16:02,160
crs will consist of an obfuscated

434
00:16:02,160 --> 00:16:05,040
program it will contain a punctuable prf

435
00:16:05,040 --> 00:16:07,759
key hard coded it takes as input then

436
00:16:07,759 --> 00:16:10,800
encryption keys and enhance x

437
00:16:10,800 --> 00:16:14,079
we fit the inputs as enhanced to a prf

438
00:16:14,079 --> 00:16:16,720
we obtain a random string r and we feed

439
00:16:16,720 --> 00:16:18,399
it into the correlation function

440
00:16:18,399 --> 00:16:21,120
obtaining the n correlated values

441
00:16:21,120 --> 00:16:23,759
next we encrypt each of these values

442
00:16:23,759 --> 00:16:25,199
using the encryption key of the

443
00:16:25,199 --> 00:16:28,000
corresponding parties and we output the

444
00:16:28,000 --> 00:16:30,240
n ciphertext so everybody is able to

445
00:16:30,240 --> 00:16:32,320
retrieve the encipher text but only

446
00:16:32,320 --> 00:16:34,720
party pi is able to decrypt ci and

447
00:16:34,720 --> 00:16:36,720
receive its output

448
00:16:36,720 --> 00:16:39,199
so this is a public key pcf in the crs

449
00:16:39,199 --> 00:16:42,240
model how do we get rid of the crs well

450
00:16:42,240 --> 00:16:44,320
we use distributed samplers distributed

451
00:16:44,320 --> 00:16:45,920
samplers are one run protocol that

452
00:16:45,920 --> 00:16:49,360
generate any crs we use one for this

453
00:16:49,360 --> 00:16:51,519
particular distribution so the parties

454
00:16:51,519 --> 00:16:53,920
just need to send the message of the

455
00:16:53,920 --> 00:16:56,000
distributed sampler along with the

456
00:16:56,000 --> 00:16:57,680
encryption key

457
00:16:57,680 --> 00:17:00,320
so that's all i wanted to say this is a

458
00:17:00,320 --> 00:17:03,519
slide with a summary of our results

459
00:17:03,519 --> 00:17:07,039
and i thank you for your attention

460
00:17:11,599 --> 00:17:12,559
okay

461
00:17:12,559 --> 00:17:14,480
thank you damiano

462
00:17:14,480 --> 00:17:17,880
we have questions

463
00:17:18,079 --> 00:17:20,319
any question for damiano

464
00:17:20,319 --> 00:17:22,079
okay so

465
00:17:22,079 --> 00:17:24,480
thank you again and there is a break

466
00:17:24,480 --> 00:17:28,039
waiting for us

