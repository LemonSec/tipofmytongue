1
00:00:05,040 --> 00:00:07,600
okay so the next talk is uh

2
00:00:07,600 --> 00:00:09,760
it's entitled unclonable polymers and

3
00:00:09,760 --> 00:00:12,080
their cryptographic application it's

4
00:00:12,080 --> 00:00:13,679
joint work by

5
00:00:13,679 --> 00:00:15,759
gada al-mashkabe

6
00:00:15,759 --> 00:00:19,359
is giving the talk rancanetti yaniverly

7
00:00:19,359 --> 00:00:23,519
uh jonathan gershone tal malkin izik per

8
00:00:23,519 --> 00:00:27,119
anna roidburt berman and aaron trummer

9
00:00:27,119 --> 00:00:28,080
thank you

10
00:00:28,080 --> 00:00:32,000
thank you so much uh hey everyone uh as

11
00:00:32,000 --> 00:00:34,480
mentioned i will introduce our work on

12
00:00:34,480 --> 00:00:36,480
unclonable polymers and their

13
00:00:36,480 --> 00:00:39,919
cryptographic applications

14
00:00:41,200 --> 00:00:44,760
okay it is

15
00:00:47,200 --> 00:00:50,160
so imagine we have memory devices that

16
00:00:50,160 --> 00:00:51,920
are unclonable

17
00:00:51,920 --> 00:00:54,800
and they self-destruct once you retrieve

18
00:00:54,800 --> 00:00:56,879
the data

19
00:00:56,879 --> 00:00:59,600
furthermore if these memory devices are

20
00:00:59,600 --> 00:01:02,079
storing several messages you can only

21
00:01:02,079 --> 00:01:04,879
retrieve a few of them before having the

22
00:01:04,879 --> 00:01:08,320
device fully destructed

23
00:01:08,400 --> 00:01:11,119
such bounded query memory devices can be

24
00:01:11,119 --> 00:01:14,240
used in several applications among them

25
00:01:14,240 --> 00:01:17,280
we have bounded execution software or

26
00:01:17,280 --> 00:01:20,560
what is known as one and k time programs

27
00:01:20,560 --> 00:01:22,960
which are programs that can be executed

28
00:01:22,960 --> 00:01:25,520
over a few inputs only

29
00:01:25,520 --> 00:01:28,400
we know that we cannot do this with only

30
00:01:28,400 --> 00:01:30,640
with software and even in the quantum

31
00:01:30,640 --> 00:01:31,600
model

32
00:01:31,600 --> 00:01:34,000
we need these special memory devices in

33
00:01:34,000 --> 00:01:37,040
order to build bounded executed quantum

34
00:01:37,040 --> 00:01:40,040
programs

35
00:01:40,640 --> 00:01:44,960
so um this idea was first put forward by

36
00:01:44,960 --> 00:01:48,159
god vassar khali and rothblum who

37
00:01:48,159 --> 00:01:50,159
introduced the concept of one-time

38
00:01:50,159 --> 00:01:51,680
memory devices

39
00:01:51,680 --> 00:01:54,240
which imitate the functionality of

40
00:01:54,240 --> 00:01:56,320
non-interactive oblivious transfer

41
00:01:56,320 --> 00:01:57,520
tokens

42
00:01:57,520 --> 00:02:00,079
they introduced these gadgets to use

43
00:02:00,079 --> 00:02:02,399
them to build one-time programs from

44
00:02:02,399 --> 00:02:04,320
garbled circuits

45
00:02:04,320 --> 00:02:07,040
in their paper they introduced or they

46
00:02:07,040 --> 00:02:09,280
discussed general directions on how to

47
00:02:09,280 --> 00:02:10,878
construct these

48
00:02:10,878 --> 00:02:13,120
gadgets without any real-world

49
00:02:13,120 --> 00:02:15,040
construction

50
00:02:15,040 --> 00:02:17,920
the only way we know to construct these

51
00:02:17,920 --> 00:02:20,840
memory devices is by tamper-proofing the

52
00:02:20,840 --> 00:02:23,599
computation while assuming that these

53
00:02:23,599 --> 00:02:25,920
sophisticated hardware tokens are

54
00:02:25,920 --> 00:02:28,480
resistant to side channel attacks and

55
00:02:28,480 --> 00:02:30,800
reverse engineering

56
00:02:30,800 --> 00:02:34,000
so we wondered if we can build these

57
00:02:34,000 --> 00:02:35,840
gadgets using

58
00:02:35,840 --> 00:02:39,280
alternative hardness assumptions

59
00:02:39,280 --> 00:02:41,280
and to achieve this goal

60
00:02:41,280 --> 00:02:43,840
we joined forces with top-notch and

61
00:02:43,840 --> 00:02:46,239
brave biologists to find alternative

62
00:02:46,239 --> 00:02:48,959
technology to build real-world and

63
00:02:48,959 --> 00:02:51,200
clonable and self-destructive memory

64
00:02:51,200 --> 00:02:52,959
devices

65
00:02:52,959 --> 00:02:56,239
we do that in a rigorous way laying down

66
00:02:56,239 --> 00:02:59,280
formal modelling and analysis of the

67
00:02:59,280 --> 00:03:01,440
cryptograph or the capabilities and

68
00:03:01,440 --> 00:03:05,200
security guarantees that we can achieve

69
00:03:05,200 --> 00:03:08,319
we also introduce several cryptographic

70
00:03:08,319 --> 00:03:11,440
and algorithmic techniques to amplify

71
00:03:11,440 --> 00:03:14,239
the weak properties of these devices in

72
00:03:14,239 --> 00:03:16,720
order to build uh provably secure

73
00:03:16,720 --> 00:03:19,840
cryptographic applications

74
00:03:21,360 --> 00:03:24,319
our request was inspired by recent

75
00:03:24,319 --> 00:03:27,440
advances in biotechnology that allowed

76
00:03:27,440 --> 00:03:31,200
storing digital data in the form of dna

77
00:03:31,200 --> 00:03:33,920
so you take a digital message and you

78
00:03:33,920 --> 00:03:37,120
encode it into a sequence of nucleotides

79
00:03:37,120 --> 00:03:39,360
that is then synthesized to produce the

80
00:03:39,360 --> 00:03:41,280
dna material

81
00:03:41,280 --> 00:03:44,159
for now don't worry about the biological

82
00:03:44,159 --> 00:03:47,440
details here just keep in mind that you

83
00:03:47,440 --> 00:03:50,080
can take digital digital data store it

84
00:03:50,080 --> 00:03:52,159
in the form of dna

85
00:03:52,159 --> 00:03:54,239
and you can retrieve the digital data

86
00:03:54,239 --> 00:03:57,840
back from the dna sample

87
00:03:57,840 --> 00:03:58,959
however

88
00:03:58,959 --> 00:04:02,239
dna evolved to be clonable this is a

89
00:04:02,239 --> 00:04:05,519
feature of that polymer so you can

90
00:04:05,519 --> 00:04:08,000
replicate the sample as many times as

91
00:04:08,000 --> 00:04:10,319
you want and then you can read the

92
00:04:10,319 --> 00:04:14,400
digital data as many times as you want

93
00:04:14,400 --> 00:04:18,079
and this led us to think of another

94
00:04:18,079 --> 00:04:21,199
biological polymer which are proteins

95
00:04:21,199 --> 00:04:23,840
similarly we can use proteins to store

96
00:04:23,840 --> 00:04:27,040
digital data the difference is that now

97
00:04:27,040 --> 00:04:29,040
we encode the digital message into a

98
00:04:29,040 --> 00:04:31,759
sequence of amino acids that is then

99
00:04:31,759 --> 00:04:34,000
synthesized to prote to produce the

100
00:04:34,000 --> 00:04:36,400
protein material

101
00:04:36,400 --> 00:04:39,520
and here the magic started

102
00:04:39,520 --> 00:04:43,280
first of all proteins are unclonable

103
00:04:43,280 --> 00:04:46,639
the central dogma of molecular biology

104
00:04:46,639 --> 00:04:48,560
states that

105
00:04:48,560 --> 00:04:51,440
once information has got into a protein

106
00:04:51,440 --> 00:04:53,919
it cannot get out again

107
00:04:53,919 --> 00:04:56,960
meaning that given a protein sample you

108
00:04:56,960 --> 00:04:59,440
cannot replicate it and you cannot get

109
00:04:59,440 --> 00:05:01,360
the genetic information

110
00:05:01,360 --> 00:05:03,680
back

111
00:05:03,840 --> 00:05:07,120
this challenge is still standing for 65

112
00:05:07,120 --> 00:05:09,840
years and even a few billion years of

113
00:05:09,840 --> 00:05:11,360
evolution

114
00:05:11,360 --> 00:05:14,240
and to us cryptographers this is just a

115
00:05:14,240 --> 00:05:16,960
biochemical one-way function

116
00:05:16,960 --> 00:05:19,199
and we know what to do with hardness

117
00:05:19,199 --> 00:05:20,320
assumptions

118
00:05:20,320 --> 00:05:21,199
we

119
00:05:21,199 --> 00:05:24,080
turn the hard lemons into lemonade as i

120
00:05:24,080 --> 00:05:27,199
will show you shortly

121
00:05:27,199 --> 00:05:29,919
another amazing feature of proteins is

122
00:05:29,919 --> 00:05:32,960
that reading them this process is

123
00:05:32,960 --> 00:05:34,400
destructive

124
00:05:34,400 --> 00:05:36,720
meaning that if you want to determine

125
00:05:36,720 --> 00:05:40,080
the digital message encoded as a protein

126
00:05:40,080 --> 00:05:42,479
you have to feed the sample into this

127
00:05:42,479 --> 00:05:43,440
machine

128
00:05:43,440 --> 00:05:44,639
mass spec

129
00:05:44,639 --> 00:05:48,240
and this will ruin or destruct the

130
00:05:48,240 --> 00:05:50,639
protein sample in order to get the

131
00:05:50,639 --> 00:05:52,800
sequence of amino acids which is your

132
00:05:52,800 --> 00:05:54,960
digital message so you cannot get the

133
00:05:54,960 --> 00:05:56,639
material bulk

134
00:05:56,639 --> 00:05:58,960
another thing is that this machine

135
00:05:58,960 --> 00:06:02,000
requires uh to uh or the protein to be

136
00:06:02,000 --> 00:06:03,520
of high purity

137
00:06:03,520 --> 00:06:05,919
so if you feed this machine with a mix

138
00:06:05,919 --> 00:06:09,280
of multiple proteins or random proteins

139
00:06:09,280 --> 00:06:11,360
you will get nothing and this is the

140
00:06:11,360 --> 00:06:13,680
beauty of it you either get the message

141
00:06:13,680 --> 00:06:16,000
or nothing there is nothing in between

142
00:06:16,000 --> 00:06:17,759
there is nothing like partially

143
00:06:17,759 --> 00:06:20,639
retrievable message or super imposition

144
00:06:20,639 --> 00:06:24,240
of the states in the storage

145
00:06:25,039 --> 00:06:28,000
based on these observations we developed

146
00:06:28,000 --> 00:06:29,919
a construction for what we call

147
00:06:29,919 --> 00:06:32,240
consumable memory tokens

148
00:06:32,240 --> 00:06:35,120
and as before we transform the digital

149
00:06:35,120 --> 00:06:36,960
message into protein

150
00:06:36,960 --> 00:06:38,000
but

151
00:06:38,000 --> 00:06:40,479
we connect this protein with a shorter

152
00:06:40,479 --> 00:06:43,120
protein sequence that's called a header

153
00:06:43,120 --> 00:06:45,199
which is recognized by the matching

154
00:06:45,199 --> 00:06:46,560
antibodies

155
00:06:46,560 --> 00:06:48,720
so knowing the header which by the way

156
00:06:48,720 --> 00:06:50,800
can be represented as a digital

157
00:06:50,800 --> 00:06:53,440
description you can determine the

158
00:06:53,440 --> 00:06:56,080
matching antibody and this header is the

159
00:06:56,080 --> 00:06:59,120
secret key for us

160
00:06:59,120 --> 00:07:00,080
then

161
00:07:00,080 --> 00:07:03,039
we mix this target protein with a

162
00:07:03,039 --> 00:07:06,400
massive set of decoy proteins that are

163
00:07:06,400 --> 00:07:09,680
connected to other random keys

164
00:07:09,680 --> 00:07:12,400
and the mix which is in the vial that

165
00:07:12,400 --> 00:07:14,479
our co-author anna is holding here in

166
00:07:14,479 --> 00:07:18,800
this figure is our consumable token

167
00:07:19,520 --> 00:07:22,880
now to retrieve the data from the vial

168
00:07:22,880 --> 00:07:25,120
remember if you just feed it to the mass

169
00:07:25,120 --> 00:07:27,520
spec machinery you will get nothing so

170
00:07:27,520 --> 00:07:29,440
it is not that you will get again

171
00:07:29,440 --> 00:07:30,800
something about the message or the

172
00:07:30,800 --> 00:07:32,160
message itself

173
00:07:32,160 --> 00:07:35,199
you have to purify the sample first and

174
00:07:35,199 --> 00:07:37,520
you do that using the secret key

175
00:07:37,520 --> 00:07:40,560
so you apply the antibodies this will

176
00:07:40,560 --> 00:07:42,720
pull down the target protein

177
00:07:42,720 --> 00:07:46,000
and then we cleave the header feed it to

178
00:07:46,000 --> 00:07:48,879
mass spec and at that point you will get

179
00:07:48,879 --> 00:07:50,960
the sequence of that protein which is

180
00:07:50,960 --> 00:07:54,638
your digital message bark

181
00:07:56,319 --> 00:07:59,280
after spending months and months to

182
00:07:59,280 --> 00:08:02,240
develop this construction we spend more

183
00:08:02,240 --> 00:08:05,120
months to distill the model that best

184
00:08:05,120 --> 00:08:07,360
represents biology

185
00:08:07,360 --> 00:08:10,319
our goal was to assume or to require the

186
00:08:10,319 --> 00:08:13,039
minimum on the biology side so we can

187
00:08:13,039 --> 00:08:16,560
get the simplest possible construction

188
00:08:16,560 --> 00:08:18,080
in particular

189
00:08:18,080 --> 00:08:21,039
our tokens can store only a small number

190
00:08:21,039 --> 00:08:23,280
of messages actually short messages

191
00:08:23,280 --> 00:08:25,440
under short keys so we need some

192
00:08:25,440 --> 00:08:28,240
amplification techniques in order to get

193
00:08:28,240 --> 00:08:31,280
stronger security guarantees

194
00:08:31,280 --> 00:08:34,640
also the only meaningful way to interact

195
00:08:34,640 --> 00:08:37,519
with the token is by applying keys which

196
00:08:37,519 --> 00:08:40,880
is the antibodies that i just mentioned

197
00:08:40,880 --> 00:08:43,919
furthermore each data retrieval attempt

198
00:08:43,919 --> 00:08:46,080
will consume part of the token because

199
00:08:46,080 --> 00:08:48,399
remember the reading process is a

200
00:08:48,399 --> 00:08:51,440
destructive process

201
00:08:51,440 --> 00:08:55,360
and in our construction although we set

202
00:08:55,360 --> 00:08:58,000
the uh the amount of material or the

203
00:08:58,000 --> 00:09:00,959
parameters to allow the honest recipient

204
00:09:00,959 --> 00:09:03,519
to perform only one data query

205
00:09:03,519 --> 00:09:06,560
we also account for the fact that maybe

206
00:09:06,560 --> 00:09:08,800
there is some adversary out there who's

207
00:09:08,800 --> 00:09:11,279
more powerful and can use the same

208
00:09:11,279 --> 00:09:13,440
amount to perform multiple data

209
00:09:13,440 --> 00:09:15,040
retrieval queries

210
00:09:15,040 --> 00:09:18,000
we model that by saying that the honest

211
00:09:18,000 --> 00:09:20,880
party will be able to perform one query

212
00:09:20,880 --> 00:09:23,040
while the adversary or the malicious

213
00:09:23,040 --> 00:09:26,800
party can perform up to n data queries

214
00:09:26,800 --> 00:09:29,920
so she can make up to n key guesses if

215
00:09:29,920 --> 00:09:31,440
you will

216
00:09:31,440 --> 00:09:34,080
at the end our tokens are weak in the

217
00:09:34,080 --> 00:09:36,640
sense that they support non-negligible

218
00:09:36,640 --> 00:09:38,080
soundness error

219
00:09:38,080 --> 00:09:41,120
so if you apply an incorrect key but it

220
00:09:41,120 --> 00:09:43,600
is close enough to the correct one there

221
00:09:43,600 --> 00:09:45,839
is again a chance of retrieving the

222
00:09:45,839 --> 00:09:48,000
correct message and again we need

223
00:09:48,000 --> 00:09:50,480
amplification here to get better

224
00:09:50,480 --> 00:09:53,600
security guarantees

225
00:09:54,320 --> 00:09:58,000
also we extended our construction to let

226
00:09:58,000 --> 00:10:01,120
data can store a vector of v messages

227
00:10:01,120 --> 00:10:04,800
under a vector of v keys and even if the

228
00:10:04,800 --> 00:10:08,079
adversary knows the set of keys used to

229
00:10:08,079 --> 00:10:10,880
construct the token she can retrieve up

230
00:10:10,880 --> 00:10:13,920
to n messages out of the v messages so

231
00:10:13,920 --> 00:10:16,240
not all of them and again the honest

232
00:10:16,240 --> 00:10:18,959
party will be will be able to retrieve

233
00:10:18,959 --> 00:10:21,518
one of them

234
00:10:23,120 --> 00:10:24,320
then

235
00:10:24,320 --> 00:10:26,720
we put our cryptography toolbox on the

236
00:10:26,720 --> 00:10:29,839
table and we ask two questions

237
00:10:29,839 --> 00:10:32,800
how can we amplify these weak tokens

238
00:10:32,800 --> 00:10:36,240
that support constant size data storage

239
00:10:36,240 --> 00:10:39,680
to obtain more powerful functionalities

240
00:10:39,680 --> 00:10:44,719
that can deal with arbitrary size input

241
00:10:44,839 --> 00:10:48,399
and achieving this goal took us a long

242
00:10:48,399 --> 00:10:49,839
journey

243
00:10:49,839 --> 00:10:52,240
first of all we needed a mathematical

244
00:10:52,240 --> 00:10:55,040
model to represent biology and we

245
00:10:55,040 --> 00:10:57,600
produce what we call the vector model

246
00:10:57,600 --> 00:11:00,240
where we look at the vial as a vector of

247
00:11:00,240 --> 00:11:03,040
protein amounts and we modeled all the

248
00:11:03,040 --> 00:11:04,640
biochemical

249
00:11:04,640 --> 00:11:06,399
procedures that are performed in the

250
00:11:06,399 --> 00:11:09,600
with lab as algorithms working on these

251
00:11:09,600 --> 00:11:10,959
vectors

252
00:11:10,959 --> 00:11:13,920
then we developed an ideal functionality

253
00:11:13,920 --> 00:11:16,160
for consumable tokens with clean

254
00:11:16,160 --> 00:11:19,519
interfaces and formally showed that our

255
00:11:19,519 --> 00:11:22,160
vector-based construction realizes or

256
00:11:22,160 --> 00:11:24,399
securely realizes this ideal

257
00:11:24,399 --> 00:11:26,240
functionality

258
00:11:26,240 --> 00:11:28,800
then we introduced again several

259
00:11:28,800 --> 00:11:30,320
algorithmic and cryptographic

260
00:11:30,320 --> 00:11:33,279
amplification techniques and we showed

261
00:11:33,279 --> 00:11:36,160
how to use our consumable tokens in

262
00:11:36,160 --> 00:11:39,360
several applications

263
00:11:39,360 --> 00:11:41,279
in the interest of time

264
00:11:41,279 --> 00:11:43,600
i will discuss these applications at a

265
00:11:43,600 --> 00:11:45,839
high level where in this paper we

266
00:11:45,839 --> 00:11:48,399
introduce two of them the first is

267
00:11:48,399 --> 00:11:51,680
digital lockers and the second is one in

268
00:11:51,680 --> 00:11:55,000
time programs

269
00:11:56,000 --> 00:11:58,959
digital locker is simply taking a secret

270
00:11:58,959 --> 00:12:01,760
message and encrypted using hello

271
00:12:01,760 --> 00:12:04,160
entropy key or a human generated

272
00:12:04,160 --> 00:12:05,839
password

273
00:12:05,839 --> 00:12:08,160
we know how to do this uh so in the

274
00:12:08,160 --> 00:12:10,399
literature there are many papers uh

275
00:12:10,399 --> 00:12:12,880
around this topic where they construct

276
00:12:12,880 --> 00:12:15,680
obfuscators for point functions with

277
00:12:15,680 --> 00:12:17,600
multibit output

278
00:12:17,600 --> 00:12:20,320
and these constructions shows that the

279
00:12:20,320 --> 00:12:22,320
only possible attack against these

280
00:12:22,320 --> 00:12:24,800
digital lockers is exhaustive search

281
00:12:24,800 --> 00:12:27,040
over the password space

282
00:12:27,040 --> 00:12:30,000
with our consumables tokens we were able

283
00:12:30,000 --> 00:12:33,279
to defend against even this attack where

284
00:12:33,279 --> 00:12:36,480
the adversary can try only up to end

285
00:12:36,480 --> 00:12:39,040
password yeses after which it cannot

286
00:12:39,040 --> 00:12:41,680
interact with the token anymore simply

287
00:12:41,680 --> 00:12:45,638
because it was self-destructed

288
00:12:45,839 --> 00:12:48,560
the construction wasn't easy at all

289
00:12:48,560 --> 00:12:50,880
because you can't say okay this is easy

290
00:12:50,880 --> 00:12:53,440
just store the secret message in the

291
00:12:53,440 --> 00:12:56,160
consumable token and now the adversary

292
00:12:56,160 --> 00:12:58,959
can try just only up to in password

293
00:12:58,959 --> 00:13:00,800
guesses or queries

294
00:13:00,800 --> 00:13:02,880
uh but we have non-negligible soundness

295
00:13:02,880 --> 00:13:06,079
error we had to use secret sharing to

296
00:13:06,079 --> 00:13:08,480
share the message among

297
00:13:08,480 --> 00:13:10,720
eu tokens instead of one

298
00:13:10,720 --> 00:13:13,200
and we had to chain these tokens

299
00:13:13,200 --> 00:13:15,839
together in order to preserve the number

300
00:13:15,839 --> 00:13:17,839
of queries to vn

301
00:13:17,839 --> 00:13:20,720
this is because all these tokens are

302
00:13:20,720 --> 00:13:22,480
tied to the same password so you will

303
00:13:22,480 --> 00:13:24,639
take the password map it to a talking

304
00:13:24,639 --> 00:13:27,440
key and then interact with the tokens

305
00:13:27,440 --> 00:13:29,600
and we show that our with our

306
00:13:29,600 --> 00:13:31,360
construction

307
00:13:31,360 --> 00:13:33,040
the advantage of

308
00:13:33,040 --> 00:13:35,279
guessing the password and retrieving the

309
00:13:35,279 --> 00:13:38,240
message is in over the size of the

310
00:13:38,240 --> 00:13:41,120
password space

311
00:13:42,399 --> 00:13:44,959
the second application is one end time

312
00:13:44,959 --> 00:13:46,480
programs

313
00:13:46,480 --> 00:13:48,800
these are programs that are secret or

314
00:13:48,800 --> 00:13:50,959
contain some secret data

315
00:13:50,959 --> 00:13:51,680
so

316
00:13:51,680 --> 00:13:53,680
you give it to the recipient where the

317
00:13:53,680 --> 00:13:56,399
honest party can execute that program

318
00:13:56,399 --> 00:13:57,920
over one input

319
00:13:57,920 --> 00:14:00,240
while the malicious party can execute

320
00:14:00,240 --> 00:14:03,040
that program over up to n different

321
00:14:03,040 --> 00:14:04,320
inputs

322
00:14:04,320 --> 00:14:06,880
this is a variation of the one-time

323
00:14:06,880 --> 00:14:09,199
program construction that we know from

324
00:14:09,199 --> 00:14:10,160
before

325
00:14:10,160 --> 00:14:12,959
but the difference is that we build uh

326
00:14:12,959 --> 00:14:16,160
our construction based on the real world

327
00:14:16,160 --> 00:14:18,720
world memory devices that we have

328
00:14:18,720 --> 00:14:20,800
and for this we account for the power

329
00:14:20,800 --> 00:14:23,199
gap between the honest party and the

330
00:14:23,199 --> 00:14:25,199
malicious party

331
00:14:25,199 --> 00:14:27,920
so we couldn't just use garbled circuits

332
00:14:27,920 --> 00:14:31,040
and whatnot we had to use io in order to

333
00:14:31,040 --> 00:14:33,920
construct one end time programs

334
00:14:33,920 --> 00:14:36,800
and at a high level the idea is the

335
00:14:36,800 --> 00:14:38,160
following

336
00:14:38,160 --> 00:14:40,240
i'm going to start with step two so you

337
00:14:40,240 --> 00:14:42,560
take your function you package it in a

338
00:14:42,560 --> 00:14:44,720
program that is obfuscated in the

339
00:14:44,720 --> 00:14:46,240
following way

340
00:14:46,240 --> 00:14:49,040
this program once it gets the input x

341
00:14:49,040 --> 00:14:51,680
will not output f of x unless you

342
00:14:51,680 --> 00:14:53,760
support a secret message that

343
00:14:53,760 --> 00:14:56,240
corresponds to the input

344
00:14:56,240 --> 00:14:59,120
and we store the this secret message or

345
00:14:59,120 --> 00:15:01,279
the secret messages corresponding to the

346
00:15:01,279 --> 00:15:04,480
domain of f in a consumable token so in

347
00:15:04,480 --> 00:15:07,519
order to execute you query the token

348
00:15:07,519 --> 00:15:10,000
first based on your input you get the

349
00:15:10,000 --> 00:15:11,920
secret message you presented to the

350
00:15:11,920 --> 00:15:14,560
obfuscated program it will check that

351
00:15:14,560 --> 00:15:16,720
everything is correct and then it will

352
00:15:16,720 --> 00:15:19,440
output f of x otherwise you will get

353
00:15:19,440 --> 00:15:21,760
nothing

354
00:15:23,040 --> 00:15:26,480
but again remember our tokens can store

355
00:15:26,480 --> 00:15:29,519
a small number of messages so we cannot

356
00:15:29,519 --> 00:15:33,360
cover uh functions with large domain

357
00:15:33,360 --> 00:15:34,480
space

358
00:15:34,480 --> 00:15:37,120
so what we did we used linear error

359
00:15:37,120 --> 00:15:40,160
correcting codes so instead of dealing

360
00:15:40,160 --> 00:15:42,399
with the input itself we will deal with

361
00:15:42,399 --> 00:15:45,120
the code word of the input instead of

362
00:15:45,120 --> 00:15:48,560
sending one token we send omega tokens

363
00:15:48,560 --> 00:15:50,720
where omega is the length of the code

364
00:15:50,720 --> 00:15:51,600
word

365
00:15:51,600 --> 00:15:53,600
and each symbol in the code word will

366
00:15:53,600 --> 00:15:55,519
tell you which secret message you have

367
00:15:55,519 --> 00:15:57,920
to retrieve from each token

368
00:15:57,920 --> 00:16:00,160
and now our obfuscated program as you

369
00:16:00,160 --> 00:16:01,360
see here

370
00:16:01,360 --> 00:16:04,000
will take the input generate the code

371
00:16:04,000 --> 00:16:06,399
word and check if the secret messages

372
00:16:06,399 --> 00:16:08,320
that you provided which you have to get

373
00:16:08,320 --> 00:16:10,800
from the tokens correspond

374
00:16:10,800 --> 00:16:13,120
to this input and then you will get f of

375
00:16:13,120 --> 00:16:15,440
x

376
00:16:15,839 --> 00:16:18,079
uh also that wasn't easy it wasn't just

377
00:16:18,079 --> 00:16:21,440
like a direct idea we had to figure a

378
00:16:21,440 --> 00:16:24,079
way to configure the code distance in a

379
00:16:24,079 --> 00:16:25,120
way that

380
00:16:25,120 --> 00:16:27,839
the malicious party can get up to n

381
00:16:27,839 --> 00:16:30,480
valid code words meaning that it can

382
00:16:30,480 --> 00:16:33,120
execute the program over

383
00:16:33,120 --> 00:16:36,800
only up to n different inputs we also we

384
00:16:36,800 --> 00:16:38,720
have the formal security proofs and even

385
00:16:38,720 --> 00:16:40,720
more details because the construction is

386
00:16:40,720 --> 00:16:43,040
more involved and i will refer you to

387
00:16:43,040 --> 00:16:47,519
our paper to see the full details there

388
00:16:48,079 --> 00:16:49,440
to conclude

389
00:16:49,440 --> 00:16:52,320
in this work we built a real-world

390
00:16:52,320 --> 00:16:54,160
construction of unclonable and

391
00:16:54,160 --> 00:16:56,720
self-destructive memory devices

392
00:16:56,720 --> 00:16:59,360
we do that uh and we also

393
00:16:59,360 --> 00:17:01,759
do formal treatment and show provably

394
00:17:01,759 --> 00:17:04,559
secure cryptographic applications

395
00:17:04,559 --> 00:17:06,880
for our ongoing and future work

396
00:17:06,880 --> 00:17:08,240
directions

397
00:17:08,240 --> 00:17:11,280
these are twofold on the biology side we

398
00:17:11,280 --> 00:17:13,359
are working on a sister paper to show

399
00:17:13,359 --> 00:17:15,599
the full biological construction along

400
00:17:15,599 --> 00:17:17,919
with empirical results and on the

401
00:17:17,919 --> 00:17:20,079
cryptography side we are working on

402
00:17:20,079 --> 00:17:22,559
refining our models and build more

403
00:17:22,559 --> 00:17:25,760
applications from these memory gadgets

404
00:17:25,760 --> 00:17:27,760
thank you so much for listening and i am

405
00:17:27,760 --> 00:17:31,480
happy to take questions

406
00:17:36,320 --> 00:17:40,320
okay so if we have questions please

407
00:17:40,320 --> 00:17:41,120
get

408
00:17:41,120 --> 00:17:43,760
to the mic

409
00:17:45,600 --> 00:17:48,080
hello thank you very much for the talk i

410
00:17:48,080 --> 00:17:50,480
was wondering how stable are these

411
00:17:50,480 --> 00:17:52,000
proteins

412
00:17:52,000 --> 00:17:54,160
i'm sorry i was wondering how stables

413
00:17:54,160 --> 00:17:57,039
are these proteins

414
00:17:57,520 --> 00:18:01,760
the stability yes oh interesting okay

415
00:18:01,760 --> 00:18:02,640
uh

416
00:18:02,640 --> 00:18:05,360
so this is part of the biology uh work

417
00:18:05,360 --> 00:18:08,160
that we are still doing um

418
00:18:08,160 --> 00:18:10,640
but let me say this uh the construction

419
00:18:10,640 --> 00:18:13,039
that i presented here is also at a high

420
00:18:13,039 --> 00:18:14,640
level just to make it closer to the

421
00:18:14,640 --> 00:18:16,640
audience especially that's cryptography

422
00:18:16,640 --> 00:18:17,679
audience

423
00:18:17,679 --> 00:18:21,440
the actual one is uh more involved it

424
00:18:21,440 --> 00:18:24,320
relies on phages and even more uh

425
00:18:24,320 --> 00:18:26,240
biological techniques yeah to achieve

426
00:18:26,240 --> 00:18:28,960
the stability especially that we are

427
00:18:28,960 --> 00:18:31,200
dealing with short messages so we cannot

428
00:18:31,200 --> 00:18:33,120
deal with long messages at all because

429
00:18:33,120 --> 00:18:36,480
of the stability of the proteins

430
00:18:36,480 --> 00:18:38,559
thanks

431
00:18:38,559 --> 00:18:43,799
so um could you maybe comment on

432
00:18:43,840 --> 00:18:45,039
how

433
00:18:45,039 --> 00:18:48,240
yeah the the long-term validity of your

434
00:18:48,240 --> 00:18:50,559
underlying biological assumptions

435
00:18:50,559 --> 00:18:54,720
because a short google scholar search uh

436
00:18:54,720 --> 00:18:57,600
sort of returned quite a few results on

437
00:18:57,600 --> 00:19:01,720
a non-destructive near infrared uh spect

438
00:19:01,720 --> 00:19:05,919
spectroscopy of uh proteins so

439
00:19:05,919 --> 00:19:08,799
seeing that your cryptographic

440
00:19:08,799 --> 00:19:11,120
constructions have quite a significant

441
00:19:11,120 --> 00:19:14,080
overhead it seems like to turn this into

442
00:19:14,080 --> 00:19:16,160
something practical quite some time

443
00:19:16,160 --> 00:19:17,360
might still

444
00:19:17,360 --> 00:19:20,559
uh pass by and during that time maybe uh

445
00:19:20,559 --> 00:19:23,919
there's some significant progress in

446
00:19:23,919 --> 00:19:26,799
inspect spectroscopy so might it might

447
00:19:26,799 --> 00:19:28,320
be that

448
00:19:28,320 --> 00:19:29,120
the

449
00:19:29,120 --> 00:19:32,400
break-even point will be uh missed

450
00:19:32,400 --> 00:19:34,880
by uh between the

451
00:19:34,880 --> 00:19:38,960
advances in biology and

452
00:19:38,960 --> 00:19:41,120
in the speed up for your construction

453
00:19:41,120 --> 00:19:42,080
got you

454
00:19:42,080 --> 00:19:43,360
first of all thanks a lot for the

455
00:19:43,360 --> 00:19:45,840
question and i'm smiling because uh the

456
00:19:45,840 --> 00:19:48,080
same question we had in the review

457
00:19:48,080 --> 00:19:50,080
process during uh applying this

458
00:19:50,080 --> 00:19:51,360
conference

459
00:19:51,360 --> 00:19:53,679
uh so let me say two things first of all

460
00:19:53,679 --> 00:19:56,160
i wish that uh one of our biologists

461
00:19:56,160 --> 00:19:57,919
co-authors is here just like to tell you

462
00:19:57,919 --> 00:19:58,880
that

463
00:19:58,880 --> 00:20:01,440
because yeah uh these other papers that

464
00:20:01,440 --> 00:20:04,159
talk about non-destructive proteins

465
00:20:04,159 --> 00:20:05,039
they

466
00:20:05,039 --> 00:20:07,280
are not kind of like

467
00:20:07,280 --> 00:20:09,520
doing what is promised which oh yeah you

468
00:20:09,520 --> 00:20:11,120
can read the protein without fully

469
00:20:11,120 --> 00:20:13,039
destructing it they are talking about

470
00:20:13,039 --> 00:20:14,480
specific

471
00:20:14,480 --> 00:20:16,720
polymers and even it is kind of like it

472
00:20:16,720 --> 00:20:18,240
is way different from what we are

473
00:20:18,240 --> 00:20:20,559
looking at and again i'm not a biologist

474
00:20:20,559 --> 00:20:22,559
so i'm not sure even how to answer that

475
00:20:22,559 --> 00:20:23,919
in a better way

476
00:20:23,919 --> 00:20:28,080
um but uh it is not what we are after at

477
00:20:28,080 --> 00:20:29,640
all these are just like still

478
00:20:29,640 --> 00:20:32,000
pre-preliminary results

479
00:20:32,000 --> 00:20:32,960
and

480
00:20:32,960 --> 00:20:34,559
this is similar to any other hardness

481
00:20:34,559 --> 00:20:36,480
assumption right if you if you solve it

482
00:20:36,480 --> 00:20:38,000
this is great it will be great for

483
00:20:38,000 --> 00:20:41,919
biology and it will be uh bad for us

484
00:20:41,919 --> 00:20:44,559
but at the same time it has been years

485
00:20:44,559 --> 00:20:46,960
and years people are trying to do all

486
00:20:46,960 --> 00:20:50,000
this replication and then destructive uh

487
00:20:50,000 --> 00:20:51,760
reading of proteins and they didn't

488
00:20:51,760 --> 00:20:53,919
succeed so this is what we are relying

489
00:20:53,919 --> 00:20:56,080
on and i don't know if in 10 years or 20

490
00:20:56,080 --> 00:20:57,919
years someone else came up with this

491
00:20:57,919 --> 00:20:59,760
breakthrough we'll be happy because this

492
00:20:59,760 --> 00:21:01,919
will solve million problems on the

493
00:21:01,919 --> 00:21:04,720
medical and biology side

494
00:21:04,720 --> 00:21:07,039
thank you

495
00:21:10,240 --> 00:21:12,240
so it's not the question it's kind of an

496
00:21:12,240 --> 00:21:14,840
and and i did that sir

497
00:21:14,840 --> 00:21:18,159
um additional discussions with the uh uh

498
00:21:18,159 --> 00:21:21,200
with about our biology friends so

499
00:21:21,200 --> 00:21:23,520
another just to make uh uh

500
00:21:23,520 --> 00:21:26,240
point uh uh stronger

501
00:21:26,240 --> 00:21:28,480
the the all the

502
00:21:28,480 --> 00:21:31,600
work that is known for uh

503
00:21:31,600 --> 00:21:33,679
finding uh

504
00:21:33,679 --> 00:21:36,400
spread cross-copy uh

505
00:21:36,400 --> 00:21:39,440
of proteins they work with an existing

506
00:21:39,440 --> 00:21:42,320
uh directory of postpartum and they can

507
00:21:42,320 --> 00:21:45,039
see if one of uh alpha directory of

508
00:21:45,039 --> 00:21:47,039
known proteins are there we're talking

509
00:21:47,039 --> 00:21:48,559
about something completely different

510
00:21:48,559 --> 00:21:50,960
which is encoding a random protein

511
00:21:50,960 --> 00:21:53,600
altogether and in that domain

512
00:21:53,600 --> 00:21:56,559
finding a random protein uh it's there's

513
00:21:56,559 --> 00:21:58,799
it's it's far to understand this is a

514
00:21:58,799 --> 00:22:00,320
completely different ballpark and there

515
00:22:00,320 --> 00:22:03,039
is no work known uh and again we are in

516
00:22:03,039 --> 00:22:05,280
this world of uh win-win but you know

517
00:22:05,280 --> 00:22:07,120
either the system is broken there is a

518
00:22:07,120 --> 00:22:09,280
great progress in biology or not

519
00:22:09,280 --> 00:22:11,840
um and about this stability

520
00:22:11,840 --> 00:22:14,320
this is really the issue of the uh those

521
00:22:14,320 --> 00:22:16,400
phases of um

522
00:22:16,400 --> 00:22:19,919
keeping the the spotting uh stable

523
00:22:19,919 --> 00:22:23,760
is done uh using uh

524
00:22:24,559 --> 00:22:27,360
technology it has to do with uh phases

525
00:22:27,360 --> 00:22:30,240
of uh viruses and in fact in the same

526
00:22:30,240 --> 00:22:32,559
labs that uh this work started before

527
00:22:32,559 --> 00:22:34,480
covet and all these labs you know

528
00:22:34,480 --> 00:22:36,480
immediately turned into working on covet

529
00:22:36,480 --> 00:22:38,559
and therefore this project was uh was

530
00:22:38,559 --> 00:22:40,880
was told a bit but the same technology

531
00:22:40,880 --> 00:22:43,039
and apparently uh

532
00:22:43,039 --> 00:22:45,039
there's even now more technology to make

533
00:22:45,039 --> 00:22:47,120
this stable but this is still working

534
00:22:47,120 --> 00:22:48,880
progress on the biology

535
00:22:48,880 --> 00:22:49,840
okay

536
00:22:49,840 --> 00:22:51,039
thank you

537
00:22:51,039 --> 00:22:53,120
we're out of time just one quick

538
00:22:53,120 --> 00:22:56,240
question if it's quick

539
00:22:56,240 --> 00:22:59,520
oh very informative and a different talk

540
00:22:59,520 --> 00:23:00,640
especially for the

541
00:23:00,640 --> 00:23:03,440
cryptographers so

542
00:23:03,440 --> 00:23:05,600
my question is have you considered the

543
00:23:05,600 --> 00:23:08,080
practical manifestation of these

544
00:23:08,080 --> 00:23:09,360
unclonable

545
00:23:09,360 --> 00:23:12,080
devices because with regard to the

546
00:23:12,080 --> 00:23:14,559
physical environment the embedded system

547
00:23:14,559 --> 00:23:17,520
how it physically goes into so have you

548
00:23:17,520 --> 00:23:19,600
considered those factors or just it's a

549
00:23:19,600 --> 00:23:24,240
pure study at this stage and how far we

550
00:23:24,240 --> 00:23:26,960
have to see practical uh product of

551
00:23:26,960 --> 00:23:28,400
these things

552
00:23:28,400 --> 00:23:31,360
okay definitely uh

553
00:23:31,360 --> 00:23:33,679
so first of all thanks for the question

554
00:23:33,679 --> 00:23:35,600
and yeah that's a true point because now

555
00:23:35,600 --> 00:23:37,520
we are dealing with biochemical

556
00:23:37,520 --> 00:23:39,520
procedures that are

557
00:23:39,520 --> 00:23:41,440
more on the randomized side they are not

558
00:23:41,440 --> 00:23:42,960
all the time just like guaranteed to get

559
00:23:42,960 --> 00:23:44,240
the output

560
00:23:44,240 --> 00:23:46,240
and we accounted for that in the sense

561
00:23:46,240 --> 00:23:47,520
that we say that oh we have

562
00:23:47,520 --> 00:23:49,520
non-negligible completeness error that

563
00:23:49,520 --> 00:23:51,200
is handled on the biological side and

564
00:23:51,200 --> 00:23:53,600
the soundness error that we handled at

565
00:23:53,600 --> 00:23:56,320
that cryptogra the cryptography side

566
00:23:56,320 --> 00:23:58,559
um for the practicality issue this is

567
00:23:58,559 --> 00:24:01,440
biology it will take its time so

568
00:24:01,440 --> 00:24:04,080
i don't know some biochemical algorithm

569
00:24:04,080 --> 00:24:05,919
or procedure will not be faster if we

570
00:24:05,919 --> 00:24:07,679
just like look at it right

571
00:24:07,679 --> 00:24:09,679
uh but the thing is that

572
00:24:09,679 --> 00:24:10,720
uh

573
00:24:10,720 --> 00:24:13,440
look at that this is a new technology

574
00:24:13,440 --> 00:24:15,279
this specific construction is very new

575
00:24:15,279 --> 00:24:16,799
it's not like we just took something

576
00:24:16,799 --> 00:24:18,400
that existed out there

577
00:24:18,400 --> 00:24:20,720
so we are still doing the empirical

578
00:24:20,720 --> 00:24:22,799
stuff but of course yeah it will take

579
00:24:22,799 --> 00:24:25,360
time more and more in the future uh

580
00:24:25,360 --> 00:24:26,640
because you can see this is a very

581
00:24:26,640 --> 00:24:29,200
interdisciplinary and ambitious project

582
00:24:29,200 --> 00:24:30,880
we will see more and more and we can

583
00:24:30,880 --> 00:24:32,640
tell you even more but of course we

584
00:24:32,640 --> 00:24:34,640
listed all the parameters the

585
00:24:34,640 --> 00:24:35,919
assumptions

586
00:24:35,919 --> 00:24:38,240
that we need to falsify or look at or

587
00:24:38,240 --> 00:24:40,080
study in more details

588
00:24:40,080 --> 00:24:42,559
okay thank you very much gada will be

589
00:24:42,559 --> 00:24:45,039
here during the break to answer other

590
00:24:45,039 --> 00:24:46,799
questions that i know

591
00:24:46,799 --> 00:24:48,400
are present here okay thank you very

592
00:24:48,400 --> 00:24:51,400
much

