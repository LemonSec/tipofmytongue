1
00:00:00,719 --> 00:00:03,199
okay sure

2
00:00:03,199 --> 00:00:04,560
okay uh

3
00:00:04,560 --> 00:00:06,960
thanks again so this is my second talk

4
00:00:06,960 --> 00:00:08,800
um in the previous talk i talked about

5
00:00:08,800 --> 00:00:10,639
how you can construct complete leakage

6
00:00:10,639 --> 00:00:13,599
model and how does it um well

7
00:00:13,599 --> 00:00:15,280
how does it apply to several leakage

8
00:00:15,280 --> 00:00:17,840
simulators well how they are nuts so i

9
00:00:17,840 --> 00:00:19,520
do in our

10
00:00:19,520 --> 00:00:22,000
leakage testing so in this talk i'm

11
00:00:22,000 --> 00:00:23,840
going to talk about how you can build a

12
00:00:23,840 --> 00:00:26,000
better leakage simulator to micro uh

13
00:00:26,000 --> 00:00:27,920
reverse engineering debt architecture

14
00:00:27,920 --> 00:00:30,000
features so let's do micro work with

15
00:00:30,000 --> 00:00:32,880
elizabeth but um this time also i'll get

16
00:00:32,880 --> 00:00:33,760
our

17
00:00:33,760 --> 00:00:36,480
uh previous colleague from bristol then

18
00:00:36,480 --> 00:00:38,320
abroad to guide us through all the micro

19
00:00:38,320 --> 00:00:40,640
architecture mysteries

20
00:00:40,640 --> 00:00:43,200
okay uh so i already talked about this

21
00:00:43,200 --> 00:00:45,280
in my desktop this is what you do in

22
00:00:45,280 --> 00:00:46,719
your

23
00:00:46,719 --> 00:00:48,160
deployment

24
00:00:48,160 --> 00:00:50,480
masking skin deployment and it's

25
00:00:50,480 --> 00:00:52,000
beneficial to have this leakage

26
00:00:52,000 --> 00:00:54,320
simulator here it's early feedback and

27
00:00:54,320 --> 00:00:57,120
it tells you why it's leaking

28
00:00:57,120 --> 00:00:59,280
so there are two rules here one is going

29
00:00:59,280 --> 00:01:02,320
to in the existing um simulators there

30
00:01:02,320 --> 00:01:04,640
are two rules one is going with the

31
00:01:04,640 --> 00:01:07,280
green box root and the

32
00:01:07,280 --> 00:01:09,840
as a representative the elmo family will

33
00:01:09,840 --> 00:01:12,479
target on the cortex zero it will always

34
00:01:12,479 --> 00:01:15,040
build on this instruction simulator

35
00:01:15,040 --> 00:01:17,680
called stimulator and it will train its

36
00:01:17,680 --> 00:01:20,080
leakage model from the prevailing trees

37
00:01:20,080 --> 00:01:22,720
the traces that's actually measured from

38
00:01:22,720 --> 00:01:25,280
the cortex 0 we're using

39
00:01:25,280 --> 00:01:27,520
the leakage model well actually focusing

40
00:01:27,520 --> 00:01:30,479
on the alu leakage um the target core is

41
00:01:30,479 --> 00:01:34,640
actually from map from stm32f0

42
00:01:34,640 --> 00:01:37,119
there are actually a few existing

43
00:01:37,119 --> 00:01:38,880
extensions there are extensions on the

44
00:01:38,880 --> 00:01:40,560
memory bus there are also extensions

45
00:01:40,560 --> 00:01:44,720
down the um extending to none st core

46
00:01:44,720 --> 00:01:46,720
extending to another and serial port

47
00:01:46,720 --> 00:01:49,360
manufactured by an xp and there are also

48
00:01:49,360 --> 00:01:50,159
an

49
00:01:50,159 --> 00:01:52,880
extension extend sending this to contact

50
00:01:52,880 --> 00:01:54,479
m3

51
00:01:54,479 --> 00:01:56,159
or you can also choose the white box

52
00:01:56,159 --> 00:01:59,360
route as a representative maps takes the

53
00:01:59,360 --> 00:02:02,479
rtl code from arm the system

54
00:02:02,479 --> 00:02:05,600
license through an academic lessons um

55
00:02:05,600 --> 00:02:07,759
in this case you actually get to see all

56
00:02:07,759 --> 00:02:09,919
the microactive features you know what's

57
00:02:09,919 --> 00:02:12,080
happening in your micro architecture and

58
00:02:12,080 --> 00:02:14,560
you don't really need any uh measurement

59
00:02:14,560 --> 00:02:16,400
because they also decided to take the

60
00:02:16,400 --> 00:02:19,040
leakage as the timing of the hamming

61
00:02:19,040 --> 00:02:20,959
distance on the register so you don't

62
00:02:20,959 --> 00:02:24,239
really need any measurements here

63
00:02:24,239 --> 00:02:26,480
and a bit recap from my last talk i

64
00:02:26,480 --> 00:02:28,480
didn't really talk about this in detail

65
00:02:28,480 --> 00:02:30,879
but yeah in general if we take the

66
00:02:30,879 --> 00:02:33,599
subset of both maps and almost leakage

67
00:02:33,599 --> 00:02:35,599
model and verify in our completeness

68
00:02:35,599 --> 00:02:38,640
test you may notice that almost every

69
00:02:38,640 --> 00:02:41,200
single cycle we failed the test means

70
00:02:41,200 --> 00:02:42,959
almost every single cycle there are

71
00:02:42,959 --> 00:02:44,640
there is something missing in your

72
00:02:44,640 --> 00:02:46,720
liquid codon

73
00:02:46,720 --> 00:02:48,879
and why is that mainly because our

74
00:02:48,879 --> 00:02:51,200
leakage model are always um relatively

75
00:02:51,200 --> 00:02:53,680
simple so if you talk about elmo elmo

76
00:02:53,680 --> 00:02:55,519
only focus on the alu

77
00:02:55,519 --> 00:02:58,159
versus uh the courthouse at m0 is

78
00:02:58,159 --> 00:02:59,760
actually a three-stage pipeline you're

79
00:02:59,760 --> 00:03:02,159
actually focusing on only one of the

80
00:03:02,159 --> 00:03:04,560
peptide stage the skill stage and

81
00:03:04,560 --> 00:03:06,080
moreover the

82
00:03:06,080 --> 00:03:08,000
almost leakage mode are actually built

83
00:03:08,000 --> 00:03:11,200
on the two major lines here the alu

84
00:03:11,200 --> 00:03:13,680
input buses both of them actually lies

85
00:03:13,680 --> 00:03:15,599
in the microwave gesture so for example

86
00:03:15,599 --> 00:03:17,440
if we talk about this add instruction

87
00:03:17,440 --> 00:03:20,640
here um do we actually know which one r0

88
00:03:20,640 --> 00:03:22,480
and r1 which one goes through this a and

89
00:03:22,480 --> 00:03:24,640
which one those two must be we don't

90
00:03:24,640 --> 00:03:26,000
because they lies in the micro

91
00:03:26,000 --> 00:03:27,840
architecture so the elmo's model

92
00:03:27,840 --> 00:03:31,120
actually represents the alpha's gas

93
00:03:31,120 --> 00:03:33,120
and for mass the situation is different

94
00:03:33,120 --> 00:03:34,480
let's get the

95
00:03:34,480 --> 00:03:36,480
rtl source code from arm but the

96
00:03:36,480 --> 00:03:38,000
question would be whether this is the

97
00:03:38,000 --> 00:03:40,400
same as the products on the market or

98
00:03:40,400 --> 00:03:42,720
whether the manufacturer gets this from

99
00:03:42,720 --> 00:03:44,400
arm whether they will do their own

100
00:03:44,400 --> 00:03:45,840
revision or loss

101
00:03:45,840 --> 00:03:48,799
the other issue is the um

102
00:03:48,799 --> 00:03:50,720
maps paper already stated they also

103
00:03:50,720 --> 00:03:52,879
already stated they only take care of

104
00:03:52,879 --> 00:03:54,480
the register

105
00:03:54,480 --> 00:03:56,400
transition leakage basically all the red

106
00:03:56,400 --> 00:03:58,560
circles here so if your leakage is

107
00:03:58,560 --> 00:04:00,560
actually coming from the aou or do all

108
00:04:00,560 --> 00:04:03,360
the max slides here um they're not

109
00:04:03,360 --> 00:04:06,400
necessarily covered by x

110
00:04:06,400 --> 00:04:08,959
okay so this is actually another piece

111
00:04:08,959 --> 00:04:11,519
of eyes two bits um bitwise

112
00:04:11,519 --> 00:04:13,599
multiplication not the same as my last

113
00:04:13,599 --> 00:04:16,079
talk but we are going to evaluate all

114
00:04:16,079 --> 00:04:18,639
the elmo family maps and realistic key

115
00:04:18,639 --> 00:04:20,160
tests

116
00:04:20,160 --> 00:04:23,120
so what we are observing here is with

117
00:04:23,120 --> 00:04:25,040
this realistic

118
00:04:25,040 --> 00:04:27,919
realistic trace on protest three we see

119
00:04:27,919 --> 00:04:30,479
two cycles being leaky one is cyclone

120
00:04:30,479 --> 00:04:33,360
nine and one sector fifteen

121
00:04:33,360 --> 00:04:36,000
and in elmo you miss both of them in

122
00:04:36,000 --> 00:04:39,280
elmo star and extension of elmo you not

123
00:04:39,280 --> 00:04:41,440
only miss both of them you also produce

124
00:04:41,440 --> 00:04:43,360
a false positive

125
00:04:43,360 --> 00:04:46,000
and for maps you miss

126
00:04:46,000 --> 00:04:47,440
you find

127
00:04:47,440 --> 00:04:50,720
cycle 15 but you miss cycle 9 so as i

128
00:04:50,720 --> 00:04:52,000
said

129
00:04:52,000 --> 00:04:53,520
you are missing leaks mainly because

130
00:04:53,520 --> 00:04:54,720
your

131
00:04:54,720 --> 00:04:57,120
leakage mode are already simplified and

132
00:04:57,120 --> 00:04:58,720
there are a lot of micro architecture

133
00:04:58,720 --> 00:05:00,479
existing new circuit but not in your

134
00:05:00,479 --> 00:05:03,199
model so let's actually motivate for um

135
00:05:03,199 --> 00:05:04,800
reverse engineering the micro

136
00:05:04,800 --> 00:05:06,960
architecture features from your leakage

137
00:05:06,960 --> 00:05:09,440
and adding lots to your liquid modeling

138
00:05:09,440 --> 00:05:11,320
to create a much more uh

139
00:05:11,320 --> 00:05:13,360
microarchitecture enhanced leakage

140
00:05:13,360 --> 00:05:14,639
simulator

141
00:05:14,639 --> 00:05:17,520
okay so um our starting point is always

142
00:05:17,520 --> 00:05:20,320
something public in from arm so um

143
00:05:20,320 --> 00:05:22,639
cortex m3 is always

144
00:05:22,639 --> 00:05:25,759
specified as a space three-stage pattern

145
00:05:25,759 --> 00:05:28,639
four fetch details execute so that's the

146
00:05:28,639 --> 00:05:32,000
three um that's the three stage and the

147
00:05:32,000 --> 00:05:33,440
only thing interesting here in this

148
00:05:33,440 --> 00:05:36,479
graph is in the decode stage um actually

149
00:05:36,479 --> 00:05:39,199
said there is this regis red here which

150
00:05:39,199 --> 00:05:41,680
means um you not only do instruction

151
00:05:41,680 --> 00:05:43,680
decoding in the code stage you also

152
00:05:43,680 --> 00:05:46,800
pre-fetch your operand um in this stage

153
00:05:46,800 --> 00:05:48,960
and perhaps you do need some pipeline

154
00:05:48,960 --> 00:05:51,039
register here to temporarily store your

155
00:05:51,039 --> 00:05:53,039
results and you also need

156
00:05:53,039 --> 00:05:55,360
perhaps two reading parts in your um

157
00:05:55,360 --> 00:05:57,039
register sale

158
00:05:57,039 --> 00:05:59,680
okay so fetch stage fetch instruction

159
00:05:59,680 --> 00:06:01,440
from your instructor memory to your

160
00:06:01,440 --> 00:06:03,840
instruction registers so everything is

161
00:06:03,840 --> 00:06:05,759
driven by pc everything is clear there's

162
00:06:05,759 --> 00:06:07,199
no antiquity

163
00:06:07,199 --> 00:06:09,039
and we also know most of them are not

164
00:06:09,039 --> 00:06:10,639
actually oh

165
00:06:10,639 --> 00:06:13,039
sorry all of them are not data dependent

166
00:06:13,039 --> 00:06:14,400
so we can completely

167
00:06:14,400 --> 00:06:16,240
ignore it

168
00:06:16,240 --> 00:06:18,639
and for the code stage we decode the

169
00:06:18,639 --> 00:06:20,960
instruction and create all the control

170
00:06:20,960 --> 00:06:22,880
signal here everything before the

171
00:06:22,880 --> 00:06:24,479
register uh

172
00:06:24,479 --> 00:06:26,479
fail are not really data dependent they

173
00:06:26,479 --> 00:06:28,800
are perhaps a brand they are perhaps

174
00:06:28,800 --> 00:06:30,560
instruction dependent but that's not

175
00:06:30,560 --> 00:06:32,880
what we are looking for in our leakage

176
00:06:32,880 --> 00:06:34,720
analysis so everything after the

177
00:06:34,720 --> 00:06:36,880
register fail we do care about it then

178
00:06:36,880 --> 00:06:39,199
we do care about for each instruction

179
00:06:39,199 --> 00:06:40,560
there are since there are multiple

180
00:06:40,560 --> 00:06:42,160
reading posts here we for each

181
00:06:42,160 --> 00:06:44,240
instruction which operand enters which

182
00:06:44,240 --> 00:06:46,319
reading course and we're going to test

183
00:06:46,319 --> 00:06:48,800
it with some customized code here um

184
00:06:48,800 --> 00:06:51,199
with this code where i send a and b

185
00:06:51,199 --> 00:06:53,520
through this xor and then with the

186
00:06:53,520 --> 00:06:56,880
target instruction c and d with this um

187
00:06:56,880 --> 00:06:58,880
with this instruction and what i'm

188
00:06:58,880 --> 00:07:01,120
testing here is whether i can observe an

189
00:07:01,120 --> 00:07:04,000
interaction between a and c if so and c

190
00:07:04,000 --> 00:07:05,680
share the same reading port otherwise

191
00:07:05,680 --> 00:07:08,639
maybe i can observe b and c so briefly

192
00:07:08,639 --> 00:07:11,360
about the result here um so for two

193
00:07:11,360 --> 00:07:14,319
operands instructions add or multiple

194
00:07:14,319 --> 00:07:17,599
locations here you always see ac the

195
00:07:17,599 --> 00:07:19,919
blue line and bd the red line

196
00:07:19,919 --> 00:07:21,520
for one instruction

197
00:07:21,520 --> 00:07:23,280
sorry for one operand instruction you

198
00:07:23,280 --> 00:07:25,599
only see ac but obd

199
00:07:25,599 --> 00:07:26,560
and

200
00:07:26,560 --> 00:07:29,520
for maybe this one these three register

201
00:07:29,520 --> 00:07:32,160
additions you see all the three operands

202
00:07:32,160 --> 00:07:34,639
but you can only see bd here so we

203
00:07:34,639 --> 00:07:37,039
assume a goes to e and c goes to the

204
00:07:37,039 --> 00:07:38,800
third port and this might be wrong but

205
00:07:38,800 --> 00:07:40,639
this might be due to glitches but this

206
00:07:40,639 --> 00:07:42,479
is the best we can get and there are

207
00:07:42,479 --> 00:07:44,080
also other instructions that don't

208
00:07:44,080 --> 00:07:45,919
really load anything

209
00:07:45,919 --> 00:07:49,280
okay so from the code to load uh we

210
00:07:49,280 --> 00:07:50,720
already know what's happening here but

211
00:07:50,720 --> 00:07:51,599
we do

212
00:07:51,599 --> 00:07:53,840
we also want to know whether uh each

213
00:07:53,840 --> 00:07:56,720
which operand enters rs1 and which one

214
00:07:56,720 --> 00:07:58,800
enters rs2 and also whether they will be

215
00:07:58,800 --> 00:08:00,560
updated or because they are registered

216
00:08:00,560 --> 00:08:02,560
they don't really have to accept the new

217
00:08:02,560 --> 00:08:05,360
value in each cycle

218
00:08:05,360 --> 00:08:08,319
and here i will skip all the technical

219
00:08:08,319 --> 00:08:10,879
details directly giving you this

220
00:08:10,879 --> 00:08:14,080
table here we present how each operand

221
00:08:14,080 --> 00:08:16,720
goes to which port and we each operand

222
00:08:16,720 --> 00:08:19,280
goes to which register if it's slash

223
00:08:19,280 --> 00:08:23,039
here it means it will not be uh updated

224
00:08:23,039 --> 00:08:25,360
okay so for the memory part it's a bit

225
00:08:25,360 --> 00:08:28,960
of mess it's often organized ignored by

226
00:08:28,960 --> 00:08:31,199
most existing tools for good reason

227
00:08:31,199 --> 00:08:33,200
because the memory part actually lies a

228
00:08:33,200 --> 00:08:36,000
bit far away from the core itself

229
00:08:36,000 --> 00:08:38,479
so um to make it worse the memory part

230
00:08:38,479 --> 00:08:40,719
is usually self-time which means they

231
00:08:40,719 --> 00:08:42,958
have its own timing so if you're asking

232
00:08:42,958 --> 00:08:45,120
a memory to fetch you something 10 times

233
00:08:45,120 --> 00:08:47,200
they will have different timings because

234
00:08:47,200 --> 00:08:50,000
they can say please wait for me

235
00:08:50,000 --> 00:08:50,959
but

236
00:08:50,959 --> 00:08:53,440
but in this case we cannot really align

237
00:08:53,440 --> 00:08:56,240
our release citrus with the its

238
00:08:56,240 --> 00:08:58,399
instruction you are executing now now so

239
00:08:58,399 --> 00:09:00,240
there's no way you can do this complete

240
00:09:00,240 --> 00:09:02,640
this test anymore so we have to go back

241
00:09:02,640 --> 00:09:05,519
to what previous um existing tools are

242
00:09:05,519 --> 00:09:08,320
using so relying on existing knowledge

243
00:09:08,320 --> 00:09:10,640
we assume everything is worthwhile then

244
00:09:10,640 --> 00:09:12,519
we follow a few uh

245
00:09:12,519 --> 00:09:15,200
specifications from arm so shared

246
00:09:15,200 --> 00:09:17,600
database address bus and uh right button

247
00:09:17,600 --> 00:09:20,399
this is of course not ideal

248
00:09:20,399 --> 00:09:22,399
okay now we know what's happening in

249
00:09:22,399 --> 00:09:24,640
each instruction uh in each

250
00:09:24,640 --> 00:09:26,480
microarchitecture

251
00:09:26,480 --> 00:09:29,440
um wires then let's try to do liquid

252
00:09:29,440 --> 00:09:32,000
modeling so the general idea of this is

253
00:09:32,000 --> 00:09:34,800
for each wire or register here so like

254
00:09:34,800 --> 00:09:38,000
this um so previous states is a now you

255
00:09:38,000 --> 00:09:41,120
sleep to a prime um not the new space is

256
00:09:41,120 --> 00:09:43,680
a we often assume they take the heavy

257
00:09:43,680 --> 00:09:46,000
weight and distance leakage here we do a

258
00:09:46,000 --> 00:09:48,640
bit more conservative we assume a prime

259
00:09:48,640 --> 00:09:51,760
and a are jointly leaking um if you have

260
00:09:51,760 --> 00:09:54,640
a combinatorial logic like here then we

261
00:09:54,640 --> 00:09:56,480
assume um this can be affected by

262
00:09:56,480 --> 00:09:58,640
bleaches so if we assume

263
00:09:58,640 --> 00:10:00,320
both inputs will be taken into

264
00:10:00,320 --> 00:10:03,360
consideration so a a prime b p prime or

265
00:10:03,360 --> 00:10:05,040
jointly making

266
00:10:05,040 --> 00:10:05,839
okay

267
00:10:05,839 --> 00:10:08,320
so fetch as i said not data dependent

268
00:10:08,320 --> 00:10:10,959
ignore it the code we only care about

269
00:10:10,959 --> 00:10:13,279
b25 to different seven others are not

270
00:10:13,279 --> 00:10:15,440
data dependent so we know what's

271
00:10:15,440 --> 00:10:18,399
happening on those wires or on those

272
00:10:18,399 --> 00:10:21,360
buses so we just um following the bus

273
00:10:21,360 --> 00:10:24,640
rules the previous call previous value

274
00:10:24,640 --> 00:10:26,160
times the current value during the

275
00:10:26,160 --> 00:10:28,959
leaking and for the excuse stage we have

276
00:10:28,959 --> 00:10:31,760
this alu this is combinatorial so we

277
00:10:31,760 --> 00:10:33,920
assume it's leaking the previous value

278
00:10:33,920 --> 00:10:36,240
in this register times the current value

279
00:10:36,240 --> 00:10:38,959
of those registers

280
00:10:38,959 --> 00:10:42,560
memory those are buses or registers so

281
00:10:42,560 --> 00:10:45,279
apply our rules accordingly and then

282
00:10:45,279 --> 00:10:48,480
overall adding them all together

283
00:10:48,480 --> 00:10:50,480
okay so adding them all together we have

284
00:10:50,480 --> 00:10:52,240
we have our over

285
00:10:52,240 --> 00:10:54,399
overall linkage model and then we're

286
00:10:54,399 --> 00:10:56,399
going to test it our the quality of

287
00:10:56,399 --> 00:10:58,800
model with our completeness test so

288
00:10:58,800 --> 00:11:01,680
within this all six instructions we find

289
00:11:01,680 --> 00:11:03,760
most of them seem to be okay there's one

290
00:11:03,760 --> 00:11:06,800
of them you see something above this uh

291
00:11:06,800 --> 00:11:08,480
dashed line which means you're still

292
00:11:08,480 --> 00:11:10,160
missing something so i will directly

293
00:11:10,160 --> 00:11:12,560
tell you this is what i call the glitch

294
00:11:12,560 --> 00:11:14,720
lychee register assist it shouldn't

295
00:11:14,720 --> 00:11:16,800
really access this register but there's

296
00:11:16,800 --> 00:11:19,200
some glitches in your decoding stage if

297
00:11:19,200 --> 00:11:20,720
you're adding lots into your

298
00:11:20,720 --> 00:11:22,480
consideration then this will be below

299
00:11:22,480 --> 00:11:24,240
this record

300
00:11:24,240 --> 00:11:26,399
okay let's go back to our original

301
00:11:26,399 --> 00:11:28,880
example in the beginning so our reverse

302
00:11:28,880 --> 00:11:30,959
engineering information will help to

303
00:11:30,959 --> 00:11:33,120
explain what is leasing here and why

304
00:11:33,120 --> 00:11:35,440
isn't captured or not captured in lml

305
00:11:35,440 --> 00:11:38,320
maps so in cycle 9 we say this is the

306
00:11:38,320 --> 00:11:39,360
aou

307
00:11:39,360 --> 00:11:42,160
output bus timing distance this is not

308
00:11:42,160 --> 00:11:44,560
presented in elmo elmo it takes a lu

309
00:11:44,560 --> 00:11:46,959
input and not in maps because this is

310
00:11:46,959 --> 00:11:50,320
not a register uh cycle 15 this is a

311
00:11:50,320 --> 00:11:52,480
pipeline register so maps got it elmo

312
00:11:52,480 --> 00:11:55,279
didn't get it because i'm getting wrong

313
00:11:55,279 --> 00:11:58,399
okay so let's briefly summarize our

314
00:11:58,399 --> 00:12:00,959
achievement here we have successfully uh

315
00:12:00,959 --> 00:12:02,880
leakage-wise reverse engineered the

316
00:12:02,880 --> 00:12:05,360
microarchitecture of our target arms

317
00:12:05,360 --> 00:12:07,600
report this is of course a leakage-wise

318
00:12:07,600 --> 00:12:09,600
reverse engineering this is not even

319
00:12:09,600 --> 00:12:11,839
close to the binary code level

320
00:12:11,839 --> 00:12:13,839
and we didn't really reproduce the m3

321
00:12:13,839 --> 00:12:15,440
core that can be run

322
00:12:15,440 --> 00:12:19,200
running on any device we are

323
00:12:19,200 --> 00:12:21,760
building a microarchitecturally intense

324
00:12:21,760 --> 00:12:23,680
leakage model and we have shown this

325
00:12:23,680 --> 00:12:25,279
impact on various masking

326
00:12:25,279 --> 00:12:27,920
implementations so i only present you

327
00:12:27,920 --> 00:12:28,880
one of

328
00:12:28,880 --> 00:12:30,720
the implementations here if you're

329
00:12:30,720 --> 00:12:32,800
interested please read our paper

330
00:12:32,800 --> 00:12:35,440
and for future works as i mentioned we

331
00:12:35,440 --> 00:12:37,600
don't really have a cycle accurate my

332
00:12:37,600 --> 00:12:40,399
memory emulator which can be a bit of a

333
00:12:40,399 --> 00:12:43,839
problem for memory simulation and we are

334
00:12:43,839 --> 00:12:46,240
using our information to export more

335
00:12:46,240 --> 00:12:47,200
subtle

336
00:12:47,200 --> 00:12:48,959
micro architecture leaks this is an

337
00:12:48,959 --> 00:12:52,079
ongoing project for one of the phd and

338
00:12:52,079 --> 00:12:53,760
i've done some higher order testing

339
00:12:53,760 --> 00:12:55,680
everything i've done in this talk is

340
00:12:55,680 --> 00:12:57,360
first order i've done some higher order

341
00:12:57,360 --> 00:12:59,839
testing but it's far from true and we

342
00:12:59,839 --> 00:13:02,240
are also working on some flexible

343
00:13:02,240 --> 00:13:04,399
frameworks that can work for other

344
00:13:04,399 --> 00:13:06,000
architecture as well for example with

345
00:13:06,000 --> 00:13:08,800
five and last but not least the leakage

346
00:13:08,800 --> 00:13:10,880
model presenting here can also be used

347
00:13:10,880 --> 00:13:13,200
for for more verification so if you're

348
00:13:13,200 --> 00:13:15,839
interested in that and that's also a

349
00:13:15,839 --> 00:13:18,880
future study direction

350
00:13:18,880 --> 00:13:22,160
right that's the end of this talk and if

351
00:13:22,160 --> 00:13:23,920
you have any questions i will be happy

352
00:13:23,920 --> 00:13:24,959
to answer

353
00:13:24,959 --> 00:13:27,359
thank you

354
00:13:27,470 --> 00:13:30,580
[Music]

355
00:13:31,279 --> 00:13:33,600
any questions to see how

356
00:13:33,600 --> 00:13:37,200
for on this or the previous talk

357
00:13:40,399 --> 00:13:43,360
no questions online

358
00:13:47,600 --> 00:13:50,959
you have a question or not

359
00:13:51,279 --> 00:13:52,959
okay so no questions thank you very much

360
00:13:52,959 --> 00:13:55,600
for the presentations and um

361
00:13:55,600 --> 00:13:58,720
before we leave there is some

362
00:13:58,720 --> 00:14:01,120
ring which was found in the pattern in

363
00:14:01,120 --> 00:14:04,079
the women bathroom if anybody has lost

364
00:14:04,079 --> 00:14:06,560
it i will probably leave it in the

365
00:14:06,560 --> 00:14:08,000
reception so

366
00:14:08,000 --> 00:14:10,880
if you hear anybody lost it

367
00:14:10,880 --> 00:14:12,480
okay thank you very much this is the

368
00:14:12,480 --> 00:14:14,240
closing of the session and i will

369
00:14:14,240 --> 00:14:17,839
continue after lunch

