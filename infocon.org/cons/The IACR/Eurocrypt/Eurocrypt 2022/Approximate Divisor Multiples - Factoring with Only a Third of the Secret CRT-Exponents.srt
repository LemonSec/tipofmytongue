1
00:00:02,960 --> 00:00:05,279
welcome everyone to the second out of

2
00:00:05,279 --> 00:00:07,440
two sessions on physical attacks and

3
00:00:07,440 --> 00:00:09,440
masking so we have three excellent talks

4
00:00:09,440 --> 00:00:10,719
in this session the first one is on

5
00:00:10,719 --> 00:00:13,200
approximate division multiples

6
00:00:13,200 --> 00:00:15,200
by alexander my union

7
00:00:15,200 --> 00:00:18,560
novakovsky and santanu sarkar and julian

8
00:00:18,560 --> 00:00:21,359
is giving the talk

9
00:00:29,199 --> 00:00:30,560
okay

10
00:00:30,560 --> 00:00:32,000
hi everyone

11
00:00:32,000 --> 00:00:33,680
um

12
00:00:33,680 --> 00:00:35,840
this is approximate divisor multiples

13
00:00:35,840 --> 00:00:37,520
factoring with only a third of the

14
00:00:37,520 --> 00:00:40,079
secret city exponents this is a new

15
00:00:40,079 --> 00:00:42,079
attack on rsa

16
00:00:42,079 --> 00:00:43,840
so let's first recall the definition of

17
00:00:43,840 --> 00:00:46,960
rsa keys so as you probably all know

18
00:00:46,960 --> 00:00:49,680
an rsa public key contains a modulus n

19
00:00:49,680 --> 00:00:51,600
which is the product of two primes p and

20
00:00:51,600 --> 00:00:54,160
q and it contains a public exponent e

21
00:00:54,160 --> 00:00:56,399
which is just some integer

22
00:00:56,399 --> 00:00:58,480
the private key also contains n and in

23
00:00:58,480 --> 00:01:00,480
addition it contains the secret exponent

24
00:01:00,480 --> 00:01:02,800
d which is defined as the multiplicative

25
00:01:02,800 --> 00:01:05,680
inverse of e modulo p minus one times q

26
00:01:05,680 --> 00:01:08,240
minus one

27
00:01:08,400 --> 00:01:10,320
now that's not really how you do rsa in

28
00:01:10,320 --> 00:01:12,080
practice so in practice you would use

29
00:01:12,080 --> 00:01:13,520
crt rsa

30
00:01:13,520 --> 00:01:15,600
the public keys are exactly the same but

31
00:01:15,600 --> 00:01:17,759
the private keys are a bit larger

32
00:01:17,759 --> 00:01:19,600
and these larger private keys allow for

33
00:01:19,600 --> 00:01:22,080
more efficient decryption

34
00:01:22,080 --> 00:01:24,159
now here we would additionally store p

35
00:01:24,159 --> 00:01:26,159
and q the two primes we'll also store

36
00:01:26,159 --> 00:01:29,360
the two crt exponents dp and dq which is

37
00:01:29,360 --> 00:01:32,320
just d reduced modulus p minus one or q

38
00:01:32,320 --> 00:01:34,880
minus one respectively and we have this

39
00:01:34,880 --> 00:01:37,040
value q in which is the multiplicative

40
00:01:37,040 --> 00:01:40,640
inverse of q modulo p

41
00:01:40,640 --> 00:01:43,439
now these crt rsa keys are of course

42
00:01:43,439 --> 00:01:46,159
obviously redundant i mean we can throw

43
00:01:46,159 --> 00:01:47,920
away basically everything here except

44
00:01:47,920 --> 00:01:50,240
for one of the primes say p

45
00:01:50,240 --> 00:01:51,920
and we still have a valid private key

46
00:01:51,920 --> 00:01:53,360
that allows us to decrypt very

47
00:01:53,360 --> 00:01:55,280
efficiently because given the public key

48
00:01:55,280 --> 00:01:57,439
and p all these other values that we

49
00:01:57,439 --> 00:01:58,880
just threw away can be computed

50
00:01:58,880 --> 00:02:01,439
efficiently

51
00:02:01,439 --> 00:02:03,680
and very interestingly even this very

52
00:02:03,680 --> 00:02:06,320
minimalistic key that consists only of p

53
00:02:06,320 --> 00:02:08,479
even this key is still very redundant

54
00:02:08,479 --> 00:02:10,479
because we can actually still throw away

55
00:02:10,479 --> 00:02:12,000
half of the bits of p

56
00:02:12,000 --> 00:02:13,760
and we still have a valid private key

57
00:02:13,760 --> 00:02:15,599
that allows us to decrypt relatively

58
00:02:15,599 --> 00:02:17,200
efficient

59
00:02:17,200 --> 00:02:19,200
that's due to this result by coppersmith

60
00:02:19,200 --> 00:02:22,080
from eurocrypt96 which says given only

61
00:02:22,080 --> 00:02:24,400
half of the bits of p we can factor n in

62
00:02:24,400 --> 00:02:27,040
polynomial time

63
00:02:27,040 --> 00:02:28,959
i think that's a pretty interesting

64
00:02:28,959 --> 00:02:31,440
result for attacking rsa as it tells us

65
00:02:31,440 --> 00:02:32,879
to completely break the scheme you

66
00:02:32,879 --> 00:02:34,319
actually have to know only a very small

67
00:02:34,319 --> 00:02:36,640
fraction of the secret key

68
00:02:36,640 --> 00:02:38,879
but maybe you disagree and say no that's

69
00:02:38,879 --> 00:02:40,640
not that interesting at all for taking

70
00:02:40,640 --> 00:02:42,319
rsa because maybe you say okay

71
00:02:42,319 --> 00:02:43,920
polynomial time this does not

72
00:02:43,920 --> 00:02:45,680
necessarily mean that it's really

73
00:02:45,680 --> 00:02:47,599
practical this attack

74
00:02:47,599 --> 00:02:49,519
and you could also argue that learning

75
00:02:49,519 --> 00:02:51,840
half of the bits of peace may seem a bit

76
00:02:51,840 --> 00:02:54,879
too much for a real world attacker

77
00:02:54,879 --> 00:02:57,599
but let me try to convince you otherwise

78
00:02:57,599 --> 00:02:59,280
first of all

79
00:02:59,280 --> 00:03:01,120
from an attacker's perspective this

80
00:03:01,120 --> 00:03:02,400
attack should really be considered

81
00:03:02,400 --> 00:03:03,680
efficient so if you just do a

82
00:03:03,680 --> 00:03:05,200
straightforward implementation and run

83
00:03:05,200 --> 00:03:06,640
it on a laptop then you can break

84
00:03:06,640 --> 00:03:08,400
thousand bit rsa in only two minutes

85
00:03:08,400 --> 00:03:11,680
with this attack and even 4000 bit rsa

86
00:03:11,680 --> 00:03:14,720
requires less than half an hour

87
00:03:14,720 --> 00:03:16,640
and this attack is also surprisingly

88
00:03:16,640 --> 00:03:18,560
practical this was first shown by

89
00:03:18,560 --> 00:03:21,680
bernstein at all in 2013 where they used

90
00:03:21,680 --> 00:03:23,840
this exact attack to break roughly 80

91
00:03:23,840 --> 00:03:25,120
smart cards

92
00:03:25,120 --> 00:03:27,760
and then a few years later in 2017 there

93
00:03:27,760 --> 00:03:29,200
was an even more impressive attack by

94
00:03:29,200 --> 00:03:31,120
anemia at all and they could actually

95
00:03:31,120 --> 00:03:32,879
use this attack to break 10 million

96
00:03:32,879 --> 00:03:34,799
smart cards

97
00:03:34,799 --> 00:03:36,799
the problem in both of these attacks was

98
00:03:36,799 --> 00:03:38,799
pretty much the same and that was that

99
00:03:38,799 --> 00:03:41,040
these smart cards used pretty bad random

100
00:03:41,040 --> 00:03:42,720
number generators which made predicting

101
00:03:42,720 --> 00:03:44,640
half of the bits of p easy and then you

102
00:03:44,640 --> 00:03:48,319
could apply this attack by coppersmith

103
00:03:48,319 --> 00:03:49,280
so

104
00:03:49,280 --> 00:03:51,440
i think a really important result for

105
00:03:51,440 --> 00:03:53,920
the cryptanalysis of rsa

106
00:03:53,920 --> 00:03:54,879
and this

107
00:03:54,879 --> 00:03:57,040
leads to a natural question and that is

108
00:03:57,040 --> 00:03:58,959
can we do similar attacks but maybe if

109
00:03:58,959 --> 00:04:01,040
we not know bits of p but maybe if we

110
00:04:01,040 --> 00:04:02,799
know bits of the secret exponent or the

111
00:04:02,799 --> 00:04:04,879
crt exponent

112
00:04:04,879 --> 00:04:06,959
and there has been lots of research on

113
00:04:06,959 --> 00:04:09,120
this question which is uh usually called

114
00:04:09,120 --> 00:04:11,280
partial key exposure attacks and

115
00:04:11,280 --> 00:04:13,680
many results so let me recall some of

116
00:04:13,680 --> 00:04:14,400
them

117
00:04:14,400 --> 00:04:16,000
so for instance we have this result by

118
00:04:16,000 --> 00:04:18,160
bonnie durfy and frenkel from asia crypt

119
00:04:18,160 --> 00:04:21,040
98 which shows if we assume that e is

120
00:04:21,040 --> 00:04:22,960
reasonably small like it's always is in

121
00:04:22,960 --> 00:04:24,960
practice then you can break rsa with

122
00:04:24,960 --> 00:04:26,960
only a quarter of the bits of the secret

123
00:04:26,960 --> 00:04:29,840
exponent there's also a result for crt

124
00:04:29,840 --> 00:04:31,759
rsa again if you assume that the public

125
00:04:31,759 --> 00:04:34,000
exponent is small then you can factor

126
00:04:34,000 --> 00:04:36,080
with half of the bits of one crt

127
00:04:36,080 --> 00:04:37,759
exponent

128
00:04:37,759 --> 00:04:39,520
and quite interestingly all these

129
00:04:39,520 --> 00:04:41,680
attacks behave very similarly in the

130
00:04:41,680 --> 00:04:43,680
sense that if you have an n-bit modulus

131
00:04:43,680 --> 00:04:46,240
all these attacks require roughly n over

132
00:04:46,240 --> 00:04:48,800
four bits

133
00:04:49,199 --> 00:04:50,560
there are some partial key exposure

134
00:04:50,560 --> 00:04:52,240
attacks which aren't that similar and

135
00:04:52,240 --> 00:04:53,919
since we have this line of research here

136
00:04:53,919 --> 00:04:56,560
started by ernst mai and divira and then

137
00:04:56,560 --> 00:04:58,240
improved by our own takayasu and

138
00:04:58,240 --> 00:04:59,759
konihiro

139
00:04:59,759 --> 00:05:02,320
and they kind of relax the assumption on

140
00:05:02,320 --> 00:05:03,199
n

141
00:05:03,199 --> 00:05:04,880
on e we no longer assume that it's

142
00:05:04,880 --> 00:05:06,560
really small but even allow it to be up

143
00:05:06,560 --> 00:05:08,560
to the same size as the modulus but now

144
00:05:08,560 --> 00:05:10,160
we assume that the secret exponent gets

145
00:05:10,160 --> 00:05:11,600
small

146
00:05:11,600 --> 00:05:13,199
and then you can show the smaller the

147
00:05:13,199 --> 00:05:15,440
secret exponent gets the less bits you

148
00:05:15,440 --> 00:05:16,960
have to know to factor the modulus in

149
00:05:16,960 --> 00:05:18,400
polynomial time

150
00:05:18,400 --> 00:05:19,680
so if we um

151
00:05:19,680 --> 00:05:21,840
draw on the horizontal axis how large d

152
00:05:21,840 --> 00:05:23,360
is in comparison to n and on the

153
00:05:23,360 --> 00:05:25,759
vertical axis how large of a fraction of

154
00:05:25,759 --> 00:05:27,759
the bits of d we know and we can see if

155
00:05:27,759 --> 00:05:30,240
d is full size so of the same size as n

156
00:05:30,240 --> 00:05:31,520
then we have to know all of the bits and

157
00:05:31,520 --> 00:05:33,360
then the smaller it gets the less and

158
00:05:33,360 --> 00:05:34,880
less bits we have to know and actually

159
00:05:34,880 --> 00:05:37,680
if we are below this 0.292 bond then we

160
00:05:37,680 --> 00:05:41,120
don't have to know any bits at all

161
00:05:41,759 --> 00:05:44,320
there's also

162
00:05:44,400 --> 00:05:46,800
an analog result for citrsa which we

163
00:05:46,800 --> 00:05:49,199
showed at last year's asia crypt again

164
00:05:49,199 --> 00:05:51,759
if you make no strong assumption on e

165
00:05:51,759 --> 00:05:53,440
but again assume that the secret

166
00:05:53,440 --> 00:05:55,680
exponents are kind of small

167
00:05:55,680 --> 00:05:56,720
then

168
00:05:56,720 --> 00:05:59,039
as with usual rsa the smaller they get

169
00:05:59,039 --> 00:06:01,680
the less bits you have to know

170
00:06:01,680 --> 00:06:03,600
and

171
00:06:03,600 --> 00:06:05,280
you can make even stronger assumptions

172
00:06:05,280 --> 00:06:06,639
and stronger assumptions for instance

173
00:06:06,639 --> 00:06:08,240
you may assume that also e is kind of

174
00:06:08,240 --> 00:06:11,360
smallish so that maybe e is not not

175
00:06:11,360 --> 00:06:12,800
larger than the square root of n then

176
00:06:12,800 --> 00:06:14,639
everything gets even better for instance

177
00:06:14,639 --> 00:06:16,800
for full size cit exponents you wouldn't

178
00:06:16,800 --> 00:06:18,880
need all of the bits but only a three

179
00:06:18,880 --> 00:06:21,360
over four and then

180
00:06:21,360 --> 00:06:23,120
you will actually need no bits at all if

181
00:06:23,120 --> 00:06:26,759
you are below 0.232

182
00:06:27,039 --> 00:06:28,800
so in a nutshell

183
00:06:28,800 --> 00:06:30,240
partial key exposure attacks may be

184
00:06:30,240 --> 00:06:31,759
summarized by

185
00:06:31,759 --> 00:06:34,720
the smaller e d dp and dq get the less

186
00:06:34,720 --> 00:06:36,240
bits we have to know to factor n in

187
00:06:36,240 --> 00:06:39,120
polynomial time

188
00:06:39,280 --> 00:06:41,520
now let's move on to our new result

189
00:06:41,520 --> 00:06:43,440
so we give a new partial key exposure

190
00:06:43,440 --> 00:06:44,880
attack and we

191
00:06:44,880 --> 00:06:48,319
assume x post crt exponents dp and q and

192
00:06:48,319 --> 00:06:50,639
a kind of smallish public exponent

193
00:06:50,639 --> 00:06:54,319
smaller than the 4th root of the modulus

194
00:06:54,319 --> 00:06:56,560
and our attack goes completely against

195
00:06:56,560 --> 00:06:58,160
this intuition that we had from all

196
00:06:58,160 --> 00:07:00,080
previous known partial key exposure

197
00:07:00,080 --> 00:07:01,680
attacks because we have a surprising

198
00:07:01,680 --> 00:07:04,000
behavior for e smaller than n to the

199
00:07:04,000 --> 00:07:06,160
power of one over twelve

200
00:07:06,160 --> 00:07:08,400
because there our attack actually

201
00:07:08,400 --> 00:07:10,560
requires the less bits the larger it

202
00:07:10,560 --> 00:07:12,880
gets

203
00:07:13,360 --> 00:07:14,840
so let's take a closer

204
00:07:14,840 --> 00:07:17,759
look so on the horizontal axis we plot

205
00:07:17,759 --> 00:07:19,919
how large e is and on the vertical axis

206
00:07:19,919 --> 00:07:21,919
we plot how large of a fraction of the

207
00:07:21,919 --> 00:07:24,080
bits of dp and dq we know

208
00:07:24,080 --> 00:07:25,280
you can see if

209
00:07:25,280 --> 00:07:27,120
e is very small then we have to know

210
00:07:27,120 --> 00:07:29,680
roughly half of the bits and then as e

211
00:07:29,680 --> 00:07:31,280
increases we have to know the less and

212
00:07:31,280 --> 00:07:34,080
less bits and at this point at 1 over 12

213
00:07:34,080 --> 00:07:37,759
we only have to know a third of the bits

214
00:07:37,759 --> 00:07:39,280
somewhat strangely

215
00:07:39,280 --> 00:07:41,440
at this point our attack then has a bump

216
00:07:41,440 --> 00:07:43,520
and after that it requires again more

217
00:07:43,520 --> 00:07:46,479
bits the larger e gets

218
00:07:46,479 --> 00:07:49,199
and what also should be noted if we are

219
00:07:49,199 --> 00:07:51,680
below one over eight then our attack is

220
00:07:51,680 --> 00:07:54,000
the best in the sense that it requires

221
00:07:54,000 --> 00:07:56,000
the fewest bits but after that we are

222
00:07:56,000 --> 00:07:58,080
superseded by a result by takayasu and

223
00:07:58,080 --> 00:08:01,680
konigiru from 2015.

224
00:08:01,840 --> 00:08:03,120
okay

225
00:08:03,120 --> 00:08:04,960
so why does our attack behave so

226
00:08:04,960 --> 00:08:05,919
differently

227
00:08:05,919 --> 00:08:07,360
for that let's have a look how you would

228
00:08:07,360 --> 00:08:09,840
usually do these attacks

229
00:08:09,840 --> 00:08:11,360
you would

230
00:08:11,360 --> 00:08:13,840
model your problem of attacking rsa as a

231
00:08:13,840 --> 00:08:15,759
problem of solving

232
00:08:15,759 --> 00:08:17,520
or computing the solutions of a system

233
00:08:17,520 --> 00:08:19,039
of polynomial equations and then you

234
00:08:19,039 --> 00:08:20,560
would just apply copper smith's

235
00:08:20,560 --> 00:08:22,400
lattice-based method to extract these

236
00:08:22,400 --> 00:08:24,000
solutions

237
00:08:24,000 --> 00:08:26,000
we almost did the same thing but just

238
00:08:26,000 --> 00:08:27,840
with a minor twist we had one

239
00:08:27,840 --> 00:08:30,160
intermediate step we first compute a

240
00:08:30,160 --> 00:08:33,440
partial solution in a few variables

241
00:08:33,440 --> 00:08:36,320
and after that we end up with a

242
00:08:36,320 --> 00:08:38,240
bit simpler system of equations because

243
00:08:38,240 --> 00:08:40,640
we now have fewer variables and then

244
00:08:40,640 --> 00:08:42,399
this is simpler to solve and coppersmith

245
00:08:42,399 --> 00:08:45,120
method works better

246
00:08:45,120 --> 00:08:47,360
so let's take a look at these two steps

247
00:08:47,360 --> 00:08:49,440
of our attack so let's start with the

248
00:08:49,440 --> 00:08:50,480
first step

249
00:08:50,480 --> 00:08:52,640
we want to compute a partial solution

250
00:08:52,640 --> 00:08:55,040
and a few variables

251
00:08:55,040 --> 00:08:58,240
we we start with the crt rsa equations

252
00:08:58,240 --> 00:09:00,240
which just tell us that the product of e

253
00:09:00,240 --> 00:09:02,320
and dp has to be one plus an integer

254
00:09:02,320 --> 00:09:04,640
multiple of p minus one and the product

255
00:09:04,640 --> 00:09:06,320
of e and dq has to be one plus an

256
00:09:06,320 --> 00:09:09,040
integer multiple of q minus 1.

257
00:09:09,040 --> 00:09:11,120
now we could treat this as a system of

258
00:09:11,120 --> 00:09:14,000
polynomial equations in the unknown dp k

259
00:09:14,000 --> 00:09:16,800
p dq l and q and we could now try to

260
00:09:16,800 --> 00:09:19,680
extract these unknowns

261
00:09:19,680 --> 00:09:21,839
but that's not what we did we said no we

262
00:09:21,839 --> 00:09:24,000
only focus on k and l we

263
00:09:24,000 --> 00:09:25,519
don't care for the others at the moment

264
00:09:25,519 --> 00:09:28,320
we just want to compute k and l

265
00:09:28,320 --> 00:09:30,080
so how difficult is it actually to

266
00:09:30,080 --> 00:09:31,760
compute k and l

267
00:09:31,760 --> 00:09:34,080
there's not not much known about that we

268
00:09:34,080 --> 00:09:36,720
basically have two results one for claw

269
00:09:36,720 --> 00:09:38,959
result which tells us if e is really

270
00:09:38,959 --> 00:09:40,399
small then you can just do brute force

271
00:09:40,399 --> 00:09:42,480
search and have an efficient attack

272
00:09:42,480 --> 00:09:44,480
and then there's a result by galbraith

273
00:09:44,480 --> 00:09:46,959
at all from 2005 which tells us if e

274
00:09:46,959 --> 00:09:49,519
gets kind of large or so larger than the

275
00:09:49,519 --> 00:09:51,600
fourth root of the modulus then this is

276
00:09:51,600 --> 00:09:54,080
hardest factoring

277
00:09:54,080 --> 00:09:56,240
we could show basically a perfect

278
00:09:56,240 --> 00:09:58,320
interpolation between these two results

279
00:09:58,320 --> 00:10:00,640
so our result looks like this

280
00:10:00,640 --> 00:10:03,200
again we phrase this as a function of

281
00:10:03,200 --> 00:10:06,800
known bits of the cit exponents and

282
00:10:06,800 --> 00:10:08,320
the size of the

283
00:10:08,320 --> 00:10:10,480
of the public exponent e

284
00:10:10,480 --> 00:10:12,399
as you can see if e is very small then

285
00:10:12,399 --> 00:10:14,320
we don't have to know any bits at all so

286
00:10:14,320 --> 00:10:16,480
this corresponds to this folklore result

287
00:10:16,480 --> 00:10:18,640
where e is very small

288
00:10:18,640 --> 00:10:20,560
and you can just do brute force

289
00:10:20,560 --> 00:10:22,880
and similarly at the point where e is of

290
00:10:22,880 --> 00:10:24,480
the size 1 over

291
00:10:24,480 --> 00:10:26,079
n to the power of 1 over 4 then we

292
00:10:26,079 --> 00:10:27,519
really have to know all of the bits so

293
00:10:27,519 --> 00:10:29,519
this is essentially this point where it

294
00:10:29,519 --> 00:10:33,320
gets as hard as factoring

295
00:10:33,360 --> 00:10:35,279
this part of our attack is surprisingly

296
00:10:35,279 --> 00:10:37,519
simple so let me try to sketch how it

297
00:10:37,519 --> 00:10:38,480
works

298
00:10:38,480 --> 00:10:41,519
so we first split the crt exponents into

299
00:10:41,519 --> 00:10:42,959
more significant bits and least

300
00:10:42,959 --> 00:10:44,560
significant bits

301
00:10:44,560 --> 00:10:46,480
and in this talk i assume that

302
00:10:46,480 --> 00:10:48,240
somehow we have obtained these more

303
00:10:48,240 --> 00:10:49,760
significant bits

304
00:10:49,760 --> 00:10:51,279
our attack would also work if we know

305
00:10:51,279 --> 00:10:53,040
the least significant bits and we have

306
00:10:53,040 --> 00:10:54,560
explained in our paper how this works

307
00:10:54,560 --> 00:10:56,720
but this is a bit more complicated so i

308
00:10:56,720 --> 00:10:58,399
won't go into the details in this talk

309
00:10:58,399 --> 00:11:00,320
we just focus on the non-most

310
00:11:00,320 --> 00:11:02,560
significant bits

311
00:11:02,560 --> 00:11:04,720
okay

312
00:11:04,720 --> 00:11:07,279
now we make two very simple observations

313
00:11:07,279 --> 00:11:09,680
the first one is this here

314
00:11:09,680 --> 00:11:10,560
that

315
00:11:10,560 --> 00:11:12,480
in the first equation the right hand

316
00:11:12,480 --> 00:11:15,040
side is approximately k times p because

317
00:11:15,040 --> 00:11:16,959
all the other terms are much smaller and

318
00:11:16,959 --> 00:11:19,680
similarly in the second equation

319
00:11:19,680 --> 00:11:22,640
this is approximately l times q

320
00:11:22,640 --> 00:11:23,600
and

321
00:11:23,600 --> 00:11:25,360
we approximate the left hand side of

322
00:11:25,360 --> 00:11:26,880
these equations by

323
00:11:26,880 --> 00:11:29,839
e times dp msb and

324
00:11:29,839 --> 00:11:32,959
e times dq msb

325
00:11:33,440 --> 00:11:35,440
then we multiply these two equations

326
00:11:35,440 --> 00:11:38,079
together and we obtain that e squared

327
00:11:38,079 --> 00:11:40,160
times the product of the msbs is roughly

328
00:11:40,160 --> 00:11:42,399
k times l times n

329
00:11:42,399 --> 00:11:45,360
and we divide by n and we get that e

330
00:11:45,360 --> 00:11:48,480
squared times d times the msbs divided

331
00:11:48,480 --> 00:11:52,560
by n is an approximation for k times l

332
00:11:52,560 --> 00:11:55,440
now e squared and n are known anyways

333
00:11:55,440 --> 00:11:57,600
this is just the public key but we now

334
00:11:57,600 --> 00:12:00,560
also assume that we know these msbs

335
00:12:00,560 --> 00:12:02,560
so this tells us that with from the

336
00:12:02,560 --> 00:12:04,240
values that we know anyway we can

337
00:12:04,240 --> 00:12:07,839
compute an approximation for k times l

338
00:12:07,839 --> 00:12:09,519
and it turns out that this x

339
00:12:09,519 --> 00:12:11,839
approximation is extremely good

340
00:12:11,839 --> 00:12:14,000
so if the if you know sufficiently many

341
00:12:14,000 --> 00:12:16,320
msbs in the sense that they are larger

342
00:12:16,320 --> 00:12:18,320
than e squared then you have just to

343
00:12:18,320 --> 00:12:19,839
round you just have to round this

344
00:12:19,839 --> 00:12:22,000
fraction and then it actually equals k

345
00:12:22,000 --> 00:12:24,320
times l

346
00:12:24,320 --> 00:12:26,480
in this condition here that the msbs

347
00:12:26,480 --> 00:12:28,880
have to be larger than e squared this

348
00:12:28,880 --> 00:12:30,880
corresponds to the graph which we see on

349
00:12:30,880 --> 00:12:32,320
the right

350
00:12:32,320 --> 00:12:34,560
so this lemma already tells us if we are

351
00:12:34,560 --> 00:12:36,399
in this orange region then we can

352
00:12:36,399 --> 00:12:39,360
compute the product k times l

353
00:12:39,360 --> 00:12:41,360
and then we also showed that factoring k

354
00:12:41,360 --> 00:12:43,279
times l is very easy so you can split it

355
00:12:43,279 --> 00:12:46,399
into k and l in time log squared of n

356
00:12:46,399 --> 00:12:48,399
so combining these two levels we get the

357
00:12:48,399 --> 00:12:50,480
result on the right which tells us that

358
00:12:50,480 --> 00:12:52,480
in this orange region we can efficiently

359
00:12:52,480 --> 00:12:54,800
compute k and l

360
00:12:54,800 --> 00:12:56,720
so that's already the first step of our

361
00:12:56,720 --> 00:12:59,279
attack where we started with this

362
00:12:59,279 --> 00:13:02,079
general system of polynomial equations

363
00:13:02,079 --> 00:13:03,839
and now only extracted two of the

364
00:13:03,839 --> 00:13:07,120
unknowns namely k and up

365
00:13:07,120 --> 00:13:08,639
let's move on to the second step where

366
00:13:08,639 --> 00:13:11,360
we want to apply copper smith's method

367
00:13:11,360 --> 00:13:13,360
i try to do this in a very black box

368
00:13:13,360 --> 00:13:14,880
fashion so that i don't have to go into

369
00:13:14,880 --> 00:13:16,480
the technical details of copper smith's

370
00:13:16,480 --> 00:13:19,519
method for that i try to phrase this as

371
00:13:19,519 --> 00:13:21,519
an instance of the approximate gcd

372
00:13:21,519 --> 00:13:23,920
problem so first let me recall this

373
00:13:23,920 --> 00:13:25,200
definition

374
00:13:25,200 --> 00:13:26,800
in the simplest form of this problem

375
00:13:26,800 --> 00:13:29,600
you're given an integer n0 which is of

376
00:13:29,600 --> 00:13:31,600
the form q0 times s

377
00:13:31,600 --> 00:13:34,240
and you're given an integer n1 which is

378
00:13:34,240 --> 00:13:36,560
very close to an integer of the form q1

379
00:13:36,560 --> 00:13:37,600
times s

380
00:13:37,600 --> 00:13:40,320
and you want to extract s

381
00:13:40,320 --> 00:13:42,160
when hograph graham introduced this

382
00:13:42,160 --> 00:13:43,920
problem in 2001 he also gave some

383
00:13:43,920 --> 00:13:45,600
algorithms to solve it and we need this

384
00:13:45,600 --> 00:13:47,120
algorithm here

385
00:13:47,120 --> 00:13:49,199
which tells us if s is sufficiently

386
00:13:49,199 --> 00:13:51,760
large namely larger than n0 to the power

387
00:13:51,760 --> 00:13:54,000
of beta where beta lies between zero and

388
00:13:54,000 --> 00:13:55,120
one

389
00:13:55,120 --> 00:13:59,279
and n1 approximates q time q1 times s

390
00:13:59,279 --> 00:14:00,880
sufficiently good such that the

391
00:14:00,880 --> 00:14:02,639
difference is smaller than n0 to the

392
00:14:02,639 --> 00:14:04,480
power of beta squared then you can

393
00:14:04,480 --> 00:14:07,040
compute s in polynomial time

394
00:14:07,040 --> 00:14:09,040
and it's just a standard application of

395
00:14:09,040 --> 00:14:12,000
copper smith's method

396
00:14:12,000 --> 00:14:14,320
now let's look at our attack scenario

397
00:14:14,320 --> 00:14:16,720
so we are given the modulus n which we

398
00:14:16,720 --> 00:14:18,800
can write as k q times p

399
00:14:18,800 --> 00:14:21,040
and we are also given the msbs and the

400
00:14:21,040 --> 00:14:22,720
public exponent

401
00:14:22,720 --> 00:14:24,079
and we have seen already on the previous

402
00:14:24,079 --> 00:14:26,880
slide that the product of e and the msbs

403
00:14:26,880 --> 00:14:28,240
of dp

404
00:14:28,240 --> 00:14:29,680
gives us a good approximation for k

405
00:14:29,680 --> 00:14:31,680
times p

406
00:14:31,680 --> 00:14:34,240
now comparing our attack scenario with

407
00:14:34,240 --> 00:14:37,040
the approximate gcd problem we see that

408
00:14:37,040 --> 00:14:39,600
our attack really is an approximate gcd

409
00:14:39,600 --> 00:14:41,680
problem because we want to compute

410
00:14:41,680 --> 00:14:45,360
p which takes here the role of s

411
00:14:45,360 --> 00:14:48,079
so we could now try to apply hoegrass

412
00:14:48,079 --> 00:14:50,880
graham theorem to our attack and then

413
00:14:50,880 --> 00:14:53,440
would also obtain some result

414
00:14:53,440 --> 00:14:55,199
but we didn't do that

415
00:14:55,199 --> 00:14:57,760
because we thought the usual definition

416
00:14:57,760 --> 00:14:59,680
of the approximate gcd problem doesn't

417
00:14:59,680 --> 00:15:02,000
fully capture our attack

418
00:15:02,000 --> 00:15:02,880
because

419
00:15:02,880 --> 00:15:04,800
as seen on the previous slide we can

420
00:15:04,800 --> 00:15:07,040
compute k very efficiently so we can

421
00:15:07,040 --> 00:15:08,959
essentially consider that k is also

422
00:15:08,959 --> 00:15:10,720
known

423
00:15:10,720 --> 00:15:12,880
in contrast in the usual approximate gcd

424
00:15:12,880 --> 00:15:15,760
problem q1 is not known

425
00:15:15,760 --> 00:15:17,839
so we modified the problem a bit and

426
00:15:17,839 --> 00:15:19,760
gave it a new name we call it now the

427
00:15:19,760 --> 00:15:21,920
approximate gcd multiple problem and

428
00:15:21,920 --> 00:15:25,279
here we now also assume that we know q1

429
00:15:25,279 --> 00:15:26,880
and it turns out that this problem is

430
00:15:26,880 --> 00:15:28,800
much easier than the usual approximate

431
00:15:28,800 --> 00:15:31,279
gcd problem because the theorem changes

432
00:15:31,279 --> 00:15:32,959
like this

433
00:15:32,959 --> 00:15:36,160
the approximation of n1 and q1 times s

434
00:15:36,160 --> 00:15:37,839
can be much more loose because you get

435
00:15:37,839 --> 00:15:40,480
an additional factor of q1 so for for

436
00:15:40,480 --> 00:15:43,839
very large q1s this approximation can be

437
00:15:43,839 --> 00:15:45,839
super loose

438
00:15:45,839 --> 00:15:47,920
then we applied this theorem to our

439
00:15:47,920 --> 00:15:50,639
attack and we obtained this corollary

440
00:15:50,639 --> 00:15:53,360
which tells us that given k and the msbs

441
00:15:53,360 --> 00:15:55,680
with msb larger than 4th root of n

442
00:15:55,680 --> 00:15:57,360
divided by e we can factor n in

443
00:15:57,360 --> 00:15:58,800
polynomial time

444
00:15:58,800 --> 00:16:01,360
and here you already see that here we

445
00:16:01,360 --> 00:16:03,519
have this new surprising behavior that

446
00:16:03,519 --> 00:16:06,800
the larger e gets the less bits of of

447
00:16:06,800 --> 00:16:10,319
the city exponents we have to know

448
00:16:10,959 --> 00:16:12,720
so putting the two steps of our attack

449
00:16:12,720 --> 00:16:14,720
together we now have these two results

450
00:16:14,720 --> 00:16:16,560
one orange line where we can efficiently

451
00:16:16,560 --> 00:16:19,040
compute k and l and we have this blue

452
00:16:19,040 --> 00:16:21,600
line where given k we can efficiently

453
00:16:21,600 --> 00:16:23,199
factor n

454
00:16:23,199 --> 00:16:24,800
putting this together we obtain this

455
00:16:24,800 --> 00:16:26,720
blue area here which tells us in this

456
00:16:26,720 --> 00:16:29,279
region we can efficiently factor n

457
00:16:29,279 --> 00:16:30,880
and this is exactly

458
00:16:30,880 --> 00:16:32,880
the picture from one of the first few

459
00:16:32,880 --> 00:16:33,839
slides

460
00:16:33,839 --> 00:16:34,560
where

461
00:16:34,560 --> 00:16:37,360
first introduce our result

462
00:16:37,360 --> 00:16:40,399
yeah so that's our new attack

463
00:16:40,399 --> 00:16:44,800
with this strange bump shape

464
00:16:44,880 --> 00:16:47,040
when we first saw this shape we thought

465
00:16:47,040 --> 00:16:49,680
okay this looks kind of

466
00:16:49,680 --> 00:16:51,040
unnatural

467
00:16:51,040 --> 00:16:52,959
where we should one expect such a bump

468
00:16:52,959 --> 00:16:55,360
there so we try to speculate a bit what

469
00:16:55,360 --> 00:16:56,880
the correct

470
00:16:56,880 --> 00:16:59,440
answer to this question could be

471
00:16:59,440 --> 00:17:01,040
okay one could argue that it could look

472
00:17:01,040 --> 00:17:02,959
like this or like this

473
00:17:02,959 --> 00:17:04,480
when you just extend one of the two

474
00:17:04,480 --> 00:17:06,559
components of this graph but this is of

475
00:17:06,559 --> 00:17:09,039
course very unlikely because if we touch

476
00:17:09,039 --> 00:17:11,039
the horizontal axis when this means that

477
00:17:11,039 --> 00:17:13,280
rsa is completely insecure because then

478
00:17:13,280 --> 00:17:15,520
you can factor without knowing any bits

479
00:17:15,520 --> 00:17:16,959
well this is probably not the correct

480
00:17:16,959 --> 00:17:18,959
answer when we thought okay maybe it

481
00:17:18,959 --> 00:17:21,199
looks like this

482
00:17:21,199 --> 00:17:24,720
but we found that's also probably quite

483
00:17:24,720 --> 00:17:26,480
that's probably not the correct answer

484
00:17:26,480 --> 00:17:28,799
because we could show this here

485
00:17:28,799 --> 00:17:31,120
suppose the dashed line is correct then

486
00:17:31,120 --> 00:17:32,799
there exists an efficient algorithm that

487
00:17:32,799 --> 00:17:35,520
factors n on input of a third fraction

488
00:17:35,520 --> 00:17:37,280
of the bits of p

489
00:17:37,280 --> 00:17:38,160
okay

490
00:17:38,160 --> 00:17:39,679
when you first read this maybe this

491
00:17:39,679 --> 00:17:42,160
doesn't seem so unlikely

492
00:17:42,160 --> 00:17:43,280
however

493
00:17:43,280 --> 00:17:45,120
such an attack would actually require

494
00:17:45,120 --> 00:17:47,120
only from nbit modulus would require

495
00:17:47,120 --> 00:17:49,200
only n over six bits

496
00:17:49,200 --> 00:17:50,960
and this would be in this

497
00:17:50,960 --> 00:17:52,400
research direction of partial key

498
00:17:52,400 --> 00:17:54,160
exposure it takes a major breakthrough

499
00:17:54,160 --> 00:17:55,280
because

500
00:17:55,280 --> 00:17:57,280
all the best mountain attacks either

501
00:17:57,280 --> 00:17:59,760
require at least n over four bits

502
00:17:59,760 --> 00:18:01,760
or they require keys that you would

503
00:18:01,760 --> 00:18:03,919
never find in practice namely such keys

504
00:18:03,919 --> 00:18:07,440
which have very short secret exponents

505
00:18:07,440 --> 00:18:09,840
so this is probably also not the correct

506
00:18:09,840 --> 00:18:11,600
answer but

507
00:18:11,600 --> 00:18:13,200
unfortunately we don't also know a

508
00:18:13,200 --> 00:18:15,440
better answer so

509
00:18:15,440 --> 00:18:17,360
maybe it's really the case that this

510
00:18:17,360 --> 00:18:18,720
bump shape is

511
00:18:18,720 --> 00:18:20,080
the

512
00:18:20,080 --> 00:18:22,880
the correct answer

513
00:18:22,880 --> 00:18:24,320
okay

514
00:18:24,320 --> 00:18:26,840
let's already move on to the conclusion

515
00:18:26,840 --> 00:18:29,919
so previously known partial key exposure

516
00:18:29,919 --> 00:18:31,520
attacks

517
00:18:31,520 --> 00:18:33,440
all these previously known attacks work

518
00:18:33,440 --> 00:18:35,039
the better the smaller the parameters

519
00:18:35,039 --> 00:18:36,960
and rsa get

520
00:18:36,960 --> 00:18:38,880
and we introduced the first partial key

521
00:18:38,880 --> 00:18:40,240
exposure attacks with a completely

522
00:18:40,240 --> 00:18:42,640
different behavior which

523
00:18:42,640 --> 00:18:44,960
first works better the larger he gets

524
00:18:44,960 --> 00:18:47,200
and after that again has the old

525
00:18:47,200 --> 00:18:48,240
behavior

526
00:18:48,240 --> 00:18:50,720
and we have this strange point

527
00:18:50,720 --> 00:18:53,200
at n to the power of 1 over 12 where our

528
00:18:53,200 --> 00:18:56,000
attack works best

529
00:18:56,000 --> 00:18:58,000
let me end oh no i don't want to end i

530
00:18:58,000 --> 00:19:00,559
also want to give a takeaway

531
00:19:00,559 --> 00:19:02,160
i think the most important technical

532
00:19:02,160 --> 00:19:04,000
takeaway from our paper probably is that

533
00:19:04,000 --> 00:19:05,520
you shouldn't apply coppersmith method

534
00:19:05,520 --> 00:19:07,520
directly to a systems of equation it

535
00:19:07,520 --> 00:19:09,760
seems that a two-step approach like we

536
00:19:09,760 --> 00:19:12,480
did seems to be much more effective if

537
00:19:12,480 --> 00:19:13,760
you first try to eliminate some

538
00:19:13,760 --> 00:19:15,760
variables because then you get

539
00:19:15,760 --> 00:19:17,760
much better results

540
00:19:17,760 --> 00:19:20,080
now i want to move on to them

541
00:19:20,080 --> 00:19:23,120
open questions or open problems

542
00:19:23,120 --> 00:19:26,000
i think it's not so clear now what size

543
00:19:26,000 --> 00:19:27,840
of e1 should actually use in practice i

544
00:19:27,840 --> 00:19:29,360
mean if one is concerned with partial

545
00:19:29,360 --> 00:19:31,760
key exposure attacks and

546
00:19:31,760 --> 00:19:33,679
it's not so clear anymore what

547
00:19:33,679 --> 00:19:36,000
the correct size of e is

548
00:19:36,000 --> 00:19:38,960
does our result really tell us that

549
00:19:38,960 --> 00:19:41,520
e of the size n over n to the power of

550
00:19:41,520 --> 00:19:43,760
one over twelve is the least ignore

551
00:19:43,760 --> 00:19:46,160
that's not so clear

552
00:19:46,160 --> 00:19:47,760
and i think there should be some more

553
00:19:47,760 --> 00:19:49,760
research on that and i would be very

554
00:19:49,760 --> 00:19:52,000
happy to discuss this further i think i

555
00:19:52,000 --> 00:19:53,039
don't have

556
00:19:53,039 --> 00:19:55,360
enough time for that here

557
00:19:55,360 --> 00:19:56,799
and one completely different open

558
00:19:56,799 --> 00:19:59,280
problem which

559
00:19:59,280 --> 00:20:00,400
is also

560
00:20:00,400 --> 00:20:02,000
probably quite interesting

561
00:20:02,000 --> 00:20:04,320
that is that's our algorithm for the

562
00:20:04,320 --> 00:20:06,480
approximate gcd multiple problem this

563
00:20:06,480 --> 00:20:08,240
new problem that we introduced doesn't

564
00:20:08,240 --> 00:20:10,080
have any implications for the usual

565
00:20:10,080 --> 00:20:12,559
approximate gcpd problem

566
00:20:12,559 --> 00:20:14,320
that's the case that could also be very

567
00:20:14,320 --> 00:20:16,159
important because this won't have

568
00:20:16,159 --> 00:20:18,559
implications for the security of fully

569
00:20:18,559 --> 00:20:20,880
homomorphic encryption over the integers

570
00:20:20,880 --> 00:20:23,520
and probably even for lv lwe because

571
00:20:23,520 --> 00:20:27,840
there's a reduction from a gcd to lwe

572
00:20:28,000 --> 00:20:29,910
thanks for listening

573
00:20:29,910 --> 00:20:34,439
[Applause]

574
00:20:35,120 --> 00:20:36,880
okay thanks for the talk uh are there

575
00:20:36,880 --> 00:20:38,240
any questions if you have questions

576
00:20:38,240 --> 00:20:40,159
please go forward to the microphone and

577
00:20:40,159 --> 00:20:42,720
ask there

578
00:20:46,080 --> 00:20:48,240
if you have one you mentioned earlier on

579
00:20:48,240 --> 00:20:48,960
uh

580
00:20:48,960 --> 00:20:51,360
that for something for small ds

581
00:20:51,360 --> 00:20:53,760
are small these ever used i never heard

582
00:20:53,760 --> 00:20:54,799
no

583
00:20:54,799 --> 00:20:57,760
i think they are never used because

584
00:20:57,760 --> 00:20:59,039
there are even these extreme points

585
00:20:59,039 --> 00:21:00,720
where you can factor without any bits

586
00:21:00,720 --> 00:21:04,080
and this was already known in 89 and i

587
00:21:04,080 --> 00:21:06,240
think since since then no one wanted to

588
00:21:06,240 --> 00:21:08,960
use small d's

589
00:21:09,280 --> 00:21:10,720
and

590
00:21:10,720 --> 00:21:12,320
so you said you know zen over four seems

591
00:21:12,320 --> 00:21:14,000
to be like a fundamental bound is there

592
00:21:14,000 --> 00:21:15,919
any other evidence other than that

593
00:21:15,919 --> 00:21:17,919
everything that is known kind of ends

594
00:21:17,919 --> 00:21:19,120
there no

595
00:21:19,120 --> 00:21:21,200
just uh i have one additional slide

596
00:21:21,200 --> 00:21:23,919
where we compare that

597
00:21:23,919 --> 00:21:25,280
just

598
00:21:25,280 --> 00:21:27,280
in in all these attacks it somehow comes

599
00:21:27,280 --> 00:21:28,000
up

600
00:21:28,000 --> 00:21:30,159
this one

601
00:21:30,159 --> 00:21:32,720
and uh

602
00:21:32,880 --> 00:21:34,480
it would be surprising if these attacks

603
00:21:34,480 --> 00:21:37,360
would kind of look properly done so

604
00:21:37,360 --> 00:21:39,200
there's not much to improve that uh

605
00:21:39,200 --> 00:21:41,520
these are for some reason not optimal

606
00:21:41,520 --> 00:21:43,600
that's that's the only reason

607
00:21:43,600 --> 00:21:45,360
well

608
00:21:45,360 --> 00:21:46,720
if there are no more questions let's

609
00:21:46,720 --> 00:21:50,000
thank the speaker again and

610
00:21:50,810 --> 00:21:55,550
[Applause]

611
00:21:57,200 --> 00:21:59,679
our next

