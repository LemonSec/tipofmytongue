1
00:00:01,839 --> 00:00:03,840
hello everyone my name is judy wong i'm

2
00:00:03,840 --> 00:00:06,720
from uestc our title is non-interactive

3
00:00:06,720 --> 00:00:08,720
zero knowledge proofs with fine green

4
00:00:08,720 --> 00:00:10,800
security it's joint work with justin

5
00:00:10,800 --> 00:00:12,080
pipe

6
00:00:12,080 --> 00:00:13,920
in standard cryptography we usually

7
00:00:13,920 --> 00:00:15,759
require that the honest party runs in

8
00:00:15,759 --> 00:00:18,400
polynomial time and a polynomial time

9
00:00:18,400 --> 00:00:21,039
anniversary cannot break the system

10
00:00:21,039 --> 00:00:22,560
by now there have been a lot of

11
00:00:22,560 --> 00:00:25,039
constructions proposed based on various

12
00:00:25,039 --> 00:00:27,119
assumptions such as the one function

13
00:00:27,119 --> 00:00:30,080
factoring discrete logarithm ddhowe

14
00:00:30,080 --> 00:00:34,640
or even the generic or algebraic groups

15
00:00:34,800 --> 00:00:36,880
but it's still unclear whether these

16
00:00:36,880 --> 00:00:39,920
assumptions hold so it's desirable to

17
00:00:39,920 --> 00:00:42,000
construct primitives based on no

18
00:00:42,000 --> 00:00:44,960
assumptions or just some mild complexity

19
00:00:44,960 --> 00:00:47,600
worst case assumptions

20
00:00:47,600 --> 00:00:50,559
but in the long history of cryptography

21
00:00:50,559 --> 00:00:52,559
it has turned out that this is quite

22
00:00:52,559 --> 00:00:54,719
difficult

23
00:00:54,719 --> 00:00:57,440
but vanguard cryptography gives us a way

24
00:00:57,440 --> 00:01:00,239
to approach this problem

25
00:01:00,239 --> 00:01:02,320
in the fine grain setting

26
00:01:02,320 --> 00:01:04,400
we just require that the unit's party

27
00:01:04,400 --> 00:01:08,159
uses less resources than the adversary

28
00:01:08,159 --> 00:01:10,560
and the resources of the adversary can

29
00:01:10,560 --> 00:01:12,799
be a prior boundary

30
00:01:12,799 --> 00:01:14,720
since the power of the adversary is

31
00:01:14,720 --> 00:01:16,960
limited it's possible to construct

32
00:01:16,960 --> 00:01:18,880
primitives based on very mild

33
00:01:18,880 --> 00:01:20,000
assumptions

34
00:01:20,000 --> 00:01:22,640
but notice that in the fingering setting

35
00:01:22,640 --> 00:01:25,520
we also require that the scheme should

36
00:01:25,520 --> 00:01:28,640
be quite efficient

37
00:01:28,799 --> 00:01:31,119
the field of vanguard and cryptography

38
00:01:31,119 --> 00:01:33,280
was initialized by marco

39
00:01:33,280 --> 00:01:35,280
and there have been many fingering

40
00:01:35,280 --> 00:01:37,360
primitives proposed such as the key

41
00:01:37,360 --> 00:01:39,600
exchange one-way function pke verifiable

42
00:01:39,600 --> 00:01:43,280
computation triple one function and abe

43
00:01:43,280 --> 00:01:45,360
but it's still unclear where the nisk

44
00:01:45,360 --> 00:01:47,040
which is one of the most important

45
00:01:47,040 --> 00:01:49,520
primitive in cryptography exists in the

46
00:01:49,520 --> 00:01:52,320
fine grain setting

47
00:01:52,320 --> 00:01:54,479
now let's briefly record the definition

48
00:01:54,479 --> 00:01:56,960
of nisk it nisk the prover wants to

49
00:01:56,960 --> 00:01:59,920
prove that sound statement x is in some

50
00:01:59,920 --> 00:02:01,360
language l

51
00:02:01,360 --> 00:02:03,600
and there are five algorithms

52
00:02:03,600 --> 00:02:06,960
chain output some binding crs and tj

53
00:02:06,960 --> 00:02:10,239
outputs some hiding crs and a tribal

54
00:02:10,239 --> 00:02:13,040
the prover only input the crs the

55
00:02:13,040 --> 00:02:16,480
statement the win is w and generate the

56
00:02:16,480 --> 00:02:18,319
proof and the simulator wants to

57
00:02:18,319 --> 00:02:20,319
simulate the proof by making use of the

58
00:02:20,319 --> 00:02:23,200
trapdoor without knowing the weakness

59
00:02:23,200 --> 00:02:25,120
the verifier just checks whether the

60
00:02:25,120 --> 00:02:28,000
proof is valid

61
00:02:28,000 --> 00:02:30,640
the nisk is required to satisfy three

62
00:02:30,640 --> 00:02:32,640
properties which are completeness

63
00:02:32,640 --> 00:02:34,959
perfect sony's and composable zero

64
00:02:34,959 --> 00:02:37,680
knowledge complainers says that owner's

65
00:02:37,680 --> 00:02:39,920
proofs must pass the verification

66
00:02:39,920 --> 00:02:42,560
perfect sony says that when the crs is

67
00:02:42,560 --> 00:02:45,760
binding then there exists no value proof

68
00:02:45,760 --> 00:02:48,640
for some statement not in the language

69
00:02:48,640 --> 00:02:50,959
composable zero knowledge says that a

70
00:02:50,959 --> 00:02:53,040
binding crs and hiding crs are

71
00:02:53,040 --> 00:02:55,200
indistinguishable and when the crs is

72
00:02:55,200 --> 00:02:57,440
binding then the simulator perfectly

73
00:02:57,440 --> 00:03:00,720
simulates the owner's proofs

74
00:03:00,720 --> 00:03:03,360
actually by now there have been several

75
00:03:03,360 --> 00:03:05,599
proof systems proposed

76
00:03:05,599 --> 00:03:07,760
such as the harsh proof system proposed

77
00:03:07,760 --> 00:03:09,519
by astronauts

78
00:03:09,519 --> 00:03:11,599
the queuing is proposed by wong and

79
00:03:11,599 --> 00:03:12,560
others

80
00:03:12,560 --> 00:03:15,440
and a nisk with the innovation prover

81
00:03:15,440 --> 00:03:18,720
proposed by bo and others

82
00:03:18,720 --> 00:03:21,280
all of the existing proof systems in the

83
00:03:21,280 --> 00:03:23,920
vanguard setting are secure against

84
00:03:23,920 --> 00:03:26,560
adversaries in nc1 under the assumption

85
00:03:26,560 --> 00:03:29,280
that ncy is not equal to parity or slash

86
00:03:29,280 --> 00:03:31,599
body

87
00:03:31,599 --> 00:03:34,080
and c1 is the class of circuits with

88
00:03:34,080 --> 00:03:36,799
logarithmic depth

89
00:03:36,799 --> 00:03:39,120
and parity l slash poly is the class of

90
00:03:39,120 --> 00:03:41,280
languages with polynomial sized

91
00:03:41,280 --> 00:03:43,760
branching programs

92
00:03:43,760 --> 00:03:46,720
here notice that the assumption that nc1

93
00:03:46,720 --> 00:03:48,720
is not equal to priority or slash poly

94
00:03:48,720 --> 00:03:51,760
is quite mild and this assumption is

95
00:03:51,760 --> 00:03:54,720
widely believed to hold

96
00:03:54,720 --> 00:03:56,640
but there are limitations on the

97
00:03:56,640 --> 00:03:59,519
existing proof systems

98
00:03:59,519 --> 00:04:01,439
for the hash proof system

99
00:04:01,439 --> 00:04:04,560
the verifier cannot verify publicly

100
00:04:04,560 --> 00:04:08,400
the reason is that it needs a secret key

101
00:04:08,400 --> 00:04:11,120
for the qe nisk it just supports the

102
00:04:11,120 --> 00:04:12,720
linear languages

103
00:04:12,720 --> 00:04:15,120
and a crs should be dependent on the

104
00:04:15,120 --> 00:04:17,759
language parameter

105
00:04:17,759 --> 00:04:20,160
and for the needs within efficient

106
00:04:20,160 --> 00:04:21,358
proofer

107
00:04:21,358 --> 00:04:23,440
it's actually not in the fully

108
00:04:23,440 --> 00:04:25,360
fine-grained setting the reason is that

109
00:04:25,360 --> 00:04:27,120
the proven needs more competition

110
00:04:27,120 --> 00:04:29,759
resources than c1 it has to run in

111
00:04:29,759 --> 00:04:31,199
polynomial time

112
00:04:31,199 --> 00:04:34,400
so an ionis user might use

113
00:04:34,400 --> 00:04:38,638
more power than the adversary

114
00:04:38,880 --> 00:04:41,600
in this work we propose the first fully

115
00:04:41,600 --> 00:04:43,800
fingering nisk for nc1 circuit

116
00:04:43,800 --> 00:04:45,360
satisfiability

117
00:04:45,360 --> 00:04:48,080
in our construction all the crs

118
00:04:48,080 --> 00:04:50,800
generator the proofer the wave fire and

119
00:04:50,800 --> 00:04:53,360
the simulator run in c1 and the

120
00:04:53,360 --> 00:04:55,520
construction is secure against all the

121
00:04:55,520 --> 00:04:57,680
adversaries in nc1

122
00:04:57,680 --> 00:04:59,520
the assumption is the same as before

123
00:04:59,520 --> 00:05:01,600
which is that nc1 is not equal to

124
00:05:01,600 --> 00:05:04,479
criteria slash body

125
00:05:04,479 --> 00:05:07,039
notice that our needs supports all the

126
00:05:07,039 --> 00:05:11,120
statements verifiable in c1 we also note

127
00:05:11,120 --> 00:05:13,440
that a statement circuit cannot go

128
00:05:13,440 --> 00:05:15,919
beyond nc1 otherwise even the owners

129
00:05:15,919 --> 00:05:18,240
approver in c1 cannot decide with the

130
00:05:18,240 --> 00:05:20,560
witness whether the statement is true or

131
00:05:20,560 --> 00:05:22,800
not

132
00:05:23,199 --> 00:05:26,240
this is the real map of our construction

133
00:05:26,240 --> 00:05:29,360
at first we construct a sigma particle

134
00:05:29,360 --> 00:05:32,560
and then we compile this sigma particle

135
00:05:32,560 --> 00:05:35,360
to a needs for linear languages

136
00:05:35,360 --> 00:05:37,199
afterwards

137
00:05:37,199 --> 00:05:39,120
we compile these needs for linear

138
00:05:39,120 --> 00:05:41,759
languages to and no proof and by making

139
00:05:41,759 --> 00:05:44,240
use of this all proof we achieve our

140
00:05:44,240 --> 00:05:48,960
needs for nc1 circuit satisfiability

141
00:05:49,120 --> 00:05:51,199
now i will briefly introduce how we

142
00:05:51,199 --> 00:05:54,479
construct this sigma particle

143
00:05:54,479 --> 00:05:57,120
now sigmaplica the prover wants to prove

144
00:05:57,120 --> 00:06:00,000
that some statement x is in the span of

145
00:06:00,000 --> 00:06:02,639
m where m is some matrix in the language

146
00:06:02,639 --> 00:06:04,400
parameter

147
00:06:04,400 --> 00:06:07,440
in the first round the provers randomly

148
00:06:07,440 --> 00:06:09,520
samples some matrix r

149
00:06:09,520 --> 00:06:12,400
and sends m times r which is denoted by

150
00:06:12,400 --> 00:06:16,560
c in our case to the verifier

151
00:06:16,800 --> 00:06:19,440
in the second round the v first in some

152
00:06:19,440 --> 00:06:21,600
random string which is the challenge

153
00:06:21,600 --> 00:06:26,319
back to the approval we denote this by k

154
00:06:26,319 --> 00:06:28,639
in the third round the prover sends the

155
00:06:28,639 --> 00:06:31,440
response d back to the verifier

156
00:06:31,440 --> 00:06:34,479
d is equal to r w times a and the

157
00:06:34,479 --> 00:06:37,440
verified just checks whether c x times a

158
00:06:37,440 --> 00:06:40,880
is equal to m times d

159
00:06:40,880 --> 00:06:43,199
here a is the transpose of the

160
00:06:43,199 --> 00:06:46,800
concatenation of a constant matrix s and

161
00:06:46,800 --> 00:06:49,199
s sk

162
00:06:50,080 --> 00:06:53,120
specifically s is the transpose of the

163
00:06:53,120 --> 00:06:56,479
concatenation of a zero vector and an

164
00:06:56,479 --> 00:06:59,758
identity matrix i

165
00:07:00,479 --> 00:07:02,560
we can prove that our sigma pluto

166
00:07:02,560 --> 00:07:04,560
satisfies all the properties that a

167
00:07:04,560 --> 00:07:06,319
sigma applicable should have which are

168
00:07:06,319 --> 00:07:08,240
completeness spatial soundness and

169
00:07:08,240 --> 00:07:12,080
specialness verified zero knowledge

170
00:07:12,240 --> 00:07:14,800
next i will introduce how we compile our

171
00:07:14,800 --> 00:07:17,120
sigma particle to a needs for linear

172
00:07:17,120 --> 00:07:19,280
languages

173
00:07:19,280 --> 00:07:21,360
before introducing our construction we

174
00:07:21,360 --> 00:07:24,400
first recall a lemma proved by the greek

175
00:07:24,400 --> 00:07:26,160
and others which says that two

176
00:07:26,160 --> 00:07:28,800
distributions zero sample and one sample

177
00:07:28,800 --> 00:07:30,720
are indistinguishable against nc1

178
00:07:30,720 --> 00:07:33,599
anniversaries f and c1 is not equal to

179
00:07:33,599 --> 00:07:35,840
parity l slash poly

180
00:07:35,840 --> 00:07:38,319
here zero sample outputs a

181
00:07:38,319 --> 00:07:42,080
rank deficient matrix m0 and a vector s

182
00:07:42,080 --> 00:07:43,440
in its kernel

183
00:07:43,440 --> 00:07:46,000
and one sum outputs a full rank matrix

184
00:07:46,000 --> 00:07:47,199
m1

185
00:07:47,199 --> 00:07:50,000
so this lemma basically says that

186
00:07:50,000 --> 00:07:53,360
a rank division matrix and a full rank

187
00:07:53,360 --> 00:07:54,400
matrix

188
00:07:54,400 --> 00:07:57,039
are indistinguishable against nc1 if our

189
00:07:57,039 --> 00:08:00,479
complexity assumption holds

190
00:08:00,560 --> 00:08:03,120
then in our sigma particle we first

191
00:08:03,120 --> 00:08:05,360
change the distribution of s

192
00:08:05,360 --> 00:08:07,360
to l sum prime

193
00:08:07,360 --> 00:08:10,080
where l sum prime is some intermediate

194
00:08:10,080 --> 00:08:12,800
algorithm in zero sample

195
00:08:12,800 --> 00:08:15,280
in this case the distribution of the

196
00:08:15,280 --> 00:08:19,520
transpose of a will become zero sample

197
00:08:19,520 --> 00:08:23,919
and then we set a as the hiding crs

198
00:08:23,919 --> 00:08:27,360
and we set k which was the challenge

199
00:08:27,360 --> 00:08:29,840
sent by the verifier in the second round

200
00:08:29,840 --> 00:08:32,639
as the title

201
00:08:32,880 --> 00:08:35,839
now the proof consists only of the first

202
00:08:35,839 --> 00:08:40,039
and third round messages

203
00:08:40,159 --> 00:08:42,159
now we can see that the sigma clicker

204
00:08:42,159 --> 00:08:45,120
becomes a nisk

205
00:08:47,600 --> 00:08:49,680
the completeness of the needs follows

206
00:08:49,680 --> 00:08:51,200
from that of the

207
00:08:51,200 --> 00:08:53,839
symmetrical and the zero knowledge of

208
00:08:53,839 --> 00:08:56,080
the news follows from the specialness

209
00:08:56,080 --> 00:08:57,839
verifier zero knowledge of the sim

210
00:08:57,839 --> 00:09:00,320
optical

211
00:09:00,480 --> 00:09:03,120
song is follows from the fact that when

212
00:09:03,120 --> 00:09:05,040
we switch the distribution of the

213
00:09:05,040 --> 00:09:08,160
transpose of a from zero sum to one sum

214
00:09:08,160 --> 00:09:11,279
the kernel of a will become empty and

215
00:09:11,279 --> 00:09:13,440
there will be no in value x that can

216
00:09:13,440 --> 00:09:16,560
pass the verification

217
00:09:17,040 --> 00:09:19,279
so this is how we achieve the needs for

218
00:09:19,279 --> 00:09:22,000
linear languages and next i will talk

219
00:09:22,000 --> 00:09:24,560
about how we compile these new linear

220
00:09:24,560 --> 00:09:28,160
languages to and no proof

221
00:09:28,320 --> 00:09:30,240
in the or proof the prover wants to

222
00:09:30,240 --> 00:09:35,120
prove that for two matrices m0 and m1

223
00:09:35,120 --> 00:09:38,800
either x0 is in the span of m0

224
00:09:38,800 --> 00:09:42,560
or x1 is in the span of m1 let's say

225
00:09:42,560 --> 00:09:45,600
that xj is in the span of mj where the

226
00:09:45,600 --> 00:09:48,560
venus is w

227
00:09:48,800 --> 00:09:51,120
to generate the proof the prover first

228
00:09:51,120 --> 00:09:53,440
splits the crs of the needs for linear

229
00:09:53,440 --> 00:09:56,160
languages which was denoted by a into a

230
00:09:56,160 --> 00:09:59,200
binding crs aj and the heightening crs

231
00:09:59,200 --> 00:10:03,279
a1 minus j with the trapdoor k prime

232
00:10:03,279 --> 00:10:06,720
then it generates proofs for a j and a y

233
00:10:06,720 --> 00:10:09,600
minus j with the minus w and the triple

234
00:10:09,600 --> 00:10:11,839
k prime respectively by making use of

235
00:10:11,839 --> 00:10:13,920
the prover and the simulator of our

236
00:10:13,920 --> 00:10:17,800
needs for linear languages

237
00:10:18,720 --> 00:10:21,279
the sun is follows from the fact that

238
00:10:21,279 --> 00:10:24,160
when a is binding which means that the

239
00:10:24,160 --> 00:10:26,720
transpose of a was sampled from one

240
00:10:26,720 --> 00:10:27,680
sample

241
00:10:27,680 --> 00:10:31,839
then either a0 or a1 must be binding

242
00:10:31,839 --> 00:10:33,519
zero knowledge follows from the fact

243
00:10:33,519 --> 00:10:34,560
that

244
00:10:34,560 --> 00:10:37,519
when a was sampled from zero sample then

245
00:10:37,519 --> 00:10:39,440
both a0

246
00:10:39,440 --> 00:10:43,440
and a1 must be hiding

247
00:10:43,600 --> 00:10:46,160
so this is how we achieved our proof

248
00:10:46,160 --> 00:10:47,279
next

249
00:10:47,279 --> 00:10:49,680
uh we talk about how we convert this all

250
00:10:49,680 --> 00:10:50,640
proof

251
00:10:50,640 --> 00:10:54,320
into a need for circuit satisfiability

252
00:10:54,320 --> 00:10:56,320
in our needs for nc1 circuit

253
00:10:56,320 --> 00:10:58,399
satisfiability without loss of

254
00:10:58,399 --> 00:11:00,320
generality we just consider streaming

255
00:11:00,320 --> 00:11:04,399
circuits consisting only of nand gates

256
00:11:04,399 --> 00:11:07,120
at first the prover extends the venus to

257
00:11:07,120 --> 00:11:10,959
contain the beads of all wires

258
00:11:12,399 --> 00:11:15,440
next we use the dbv and c1 function pke

259
00:11:15,440 --> 00:11:18,240
to encrypt all the bits

260
00:11:18,240 --> 00:11:20,480
here in the dvd pke

261
00:11:20,480 --> 00:11:23,120
the public key and secret key pair is

262
00:11:23,120 --> 00:11:26,160
something from the zero sample

263
00:11:26,160 --> 00:11:28,560
and for the final output which should be

264
00:11:28,560 --> 00:11:31,760
one if the variance is valid we set the

265
00:11:31,760 --> 00:11:34,399
output ciphertext as a fixed ciphertext

266
00:11:34,399 --> 00:11:36,880
for one

267
00:11:37,120 --> 00:11:40,079
the dvvpke has two nice properties that

268
00:11:40,079 --> 00:11:42,399
are used for in our case the first one

269
00:11:42,399 --> 00:11:44,640
is active hormone officer

270
00:11:44,640 --> 00:11:47,600
and the second one is that a ciphertext

271
00:11:47,600 --> 00:11:50,160
is in the span of the public key a

272
00:11:50,160 --> 00:11:53,360
if and only if the plaintext is equal to

273
00:11:53,360 --> 00:11:56,360
zero

274
00:11:56,560 --> 00:11:59,279
now for each nand gate with the input

275
00:11:59,279 --> 00:12:01,600
ciphertext cti

276
00:12:01,600 --> 00:12:02,880
ctj

277
00:12:02,880 --> 00:12:05,839
and output ciphertext ctk approval

278
00:12:05,839 --> 00:12:08,959
proves that the ciphertext satisfies a

279
00:12:08,959 --> 00:12:11,760
relation supported by our or proof

280
00:12:11,760 --> 00:12:14,800
specifically the relation says that e

281
00:12:14,800 --> 00:12:18,800
plus c t i plus c t k and e plus c t j

282
00:12:18,800 --> 00:12:21,600
are in the span of a or

283
00:12:21,600 --> 00:12:23,519
e plus c t k

284
00:12:23,519 --> 00:12:24,720
and

285
00:12:24,720 --> 00:12:27,120
ctj are in the span of a

286
00:12:27,120 --> 00:12:29,839
here a is the fixed cipher x for the

287
00:12:29,839 --> 00:12:32,480
plaintext one

288
00:12:32,480 --> 00:12:34,880
now we can prove that if the ciphertext

289
00:12:34,880 --> 00:12:36,800
satisfy the relation then the

290
00:12:36,800 --> 00:12:40,959
corresponding plaintext w i w j and w k

291
00:12:40,959 --> 00:12:43,360
must be a valid input output tuple of

292
00:12:43,360 --> 00:12:45,839
the nand gate specifically

293
00:12:45,839 --> 00:12:49,519
w i w j and w k issue satisfy the one

294
00:12:49,519 --> 00:12:53,440
plus w i plus w k is equal to zero and

295
00:12:53,440 --> 00:12:56,560
one plus w j is equal to zero or

296
00:12:56,560 --> 00:12:59,680
one plus w k is equal to zero and w j is

297
00:12:59,680 --> 00:13:02,319
equal to zero

298
00:13:02,639 --> 00:13:05,040
then the sum is of the resulting nits

299
00:13:05,040 --> 00:13:07,040
follows from the fact that

300
00:13:07,040 --> 00:13:09,839
we can extract value awareness from a

301
00:13:09,839 --> 00:13:11,839
valley proof by decrypting the

302
00:13:11,839 --> 00:13:14,639
ciphertexts

303
00:13:15,440 --> 00:13:17,200
zero knowledge follows from the fact

304
00:13:17,200 --> 00:13:19,519
that

305
00:13:19,519 --> 00:13:22,480
when we switch the distribution of a

306
00:13:22,480 --> 00:13:23,920
which is the public key of the

307
00:13:23,920 --> 00:13:27,360
underlying dvd pke from zero samp to one

308
00:13:27,360 --> 00:13:28,639
sample

309
00:13:28,639 --> 00:13:30,480
then the ciphertexts

310
00:13:30,480 --> 00:13:32,399
will become random matrices and they

311
00:13:32,399 --> 00:13:35,200
will contain no useful information and

312
00:13:35,200 --> 00:13:37,839
also the all proofs will reveal no use

313
00:13:37,839 --> 00:13:40,320
for information as well due to its zero

314
00:13:40,320 --> 00:13:42,720
knowledge

315
00:13:43,440 --> 00:13:46,000
so this is how we achieve our risk for

316
00:13:46,000 --> 00:13:48,639
insulin circuit satisfiability notice

317
00:13:48,639 --> 00:13:50,880
that in our construction the proof size

318
00:13:50,880 --> 00:13:53,120
is dependent on the circuit size which

319
00:13:53,120 --> 00:13:55,199
means that the proof size might be very

320
00:13:55,199 --> 00:13:58,160
large if the statement circuit is very

321
00:13:58,160 --> 00:14:00,000
large

322
00:14:00,000 --> 00:14:02,320
besides our needs for nc1 circuit

323
00:14:02,320 --> 00:14:05,040
satisfiability we propose a fingering

324
00:14:05,040 --> 00:14:08,320
fully homomorphic encryption for ac cm02

325
00:14:08,320 --> 00:14:10,800
circuits

326
00:14:12,240 --> 00:14:13,079
here

327
00:14:13,079 --> 00:14:16,160
accm02 can be treated as the class of

328
00:14:16,160 --> 00:14:20,719
all the polynomials with constant degree

329
00:14:21,120 --> 00:14:23,279
our starting point for constructing this

330
00:14:23,279 --> 00:14:25,399
fully homomorphic encryption is the

331
00:14:25,399 --> 00:14:28,800
dbvpke which was already actively

332
00:14:28,800 --> 00:14:30,399
homomorphic

333
00:14:30,399 --> 00:14:32,560
and the main challenge

334
00:14:32,560 --> 00:14:34,720
is to achieve the multiplicative

335
00:14:34,720 --> 00:14:37,279
homomorphism

336
00:14:37,279 --> 00:14:40,240
our solution is a tricky way to extend

337
00:14:40,240 --> 00:14:44,079
the ciphertext of the dbvpk from vectors

338
00:14:44,079 --> 00:14:45,600
to matrices

339
00:14:45,600 --> 00:14:49,199
further details please see our paper

340
00:14:49,199 --> 00:14:51,440
by making use of this fully homomorphic

341
00:14:51,440 --> 00:14:52,560
encryption

342
00:14:52,560 --> 00:14:54,959
we can convert our or proof

343
00:14:54,959 --> 00:14:57,040
into a nick for

344
00:14:57,040 --> 00:15:00,719
0 2 3 man circuits

345
00:15:01,440 --> 00:15:03,440
the class of statement circuits

346
00:15:03,440 --> 00:15:05,360
supported by this nisk is more

347
00:15:05,360 --> 00:15:07,760
restricted compared with our needs for

348
00:15:07,760 --> 00:15:10,320
nc1 circuit satisfiability

349
00:15:10,320 --> 00:15:13,120
but we note that it has a nice property

350
00:15:13,120 --> 00:15:15,920
that the proof size is independent with

351
00:15:15,920 --> 00:15:18,720
the circuit size which means that

352
00:15:18,720 --> 00:15:21,040
the proof size could be very short even

353
00:15:21,040 --> 00:15:26,360
if the statement circuit is very large

354
00:15:27,199 --> 00:15:29,839
as extensions of our work we propose a

355
00:15:29,839 --> 00:15:31,920
converging from our disks to

356
00:15:31,920 --> 00:15:34,079
non-interactive zaps here

357
00:15:34,079 --> 00:15:37,120
non-interactive zap means an iwi in the

358
00:15:37,120 --> 00:15:40,079
plane model

359
00:15:40,079 --> 00:15:42,399
achieve our goal we first prove that our

360
00:15:42,399 --> 00:15:45,120
needs have verifiable correlated key

361
00:15:45,120 --> 00:15:46,480
generation

362
00:15:46,480 --> 00:15:49,120
and then we make use of the gos

363
00:15:49,120 --> 00:15:52,160
converging technique proposed by gross

364
00:15:52,160 --> 00:15:53,360
and others

365
00:15:53,360 --> 00:15:55,199
to convert our needs

366
00:15:55,199 --> 00:15:58,880
to non-interactive zaps

367
00:15:59,519 --> 00:16:01,920
all the needs we talked about before are

368
00:16:01,920 --> 00:16:05,120
in the crs model and we also proposed

369
00:16:05,120 --> 00:16:08,399
converging from our nisk to once in the

370
00:16:08,399 --> 00:16:11,120
u.s mode where the crs is just some

371
00:16:11,120 --> 00:16:13,839
random string

372
00:16:13,839 --> 00:16:16,480
at the cover construction we proved that

373
00:16:16,480 --> 00:16:18,720
a random matrix with some particular

374
00:16:18,720 --> 00:16:21,360
form is a binding and hiding series with

375
00:16:21,360 --> 00:16:23,279
half of probability

376
00:16:23,279 --> 00:16:26,320
and by rounding our nisk with the random

377
00:16:26,320 --> 00:16:28,959
crs for the same statement for multiple

378
00:16:28,959 --> 00:16:30,720
times in parallel

379
00:16:30,720 --> 00:16:33,360
we immediately achieve the needs in the

380
00:16:33,360 --> 00:16:36,079
uis model

381
00:16:36,079 --> 00:16:38,160
the zero knowledge of the resulting

382
00:16:38,160 --> 00:16:40,720
needs follows from the zero knowledge of

383
00:16:40,720 --> 00:16:43,279
the needs in the crs model

384
00:16:43,279 --> 00:16:44,160
and

385
00:16:44,160 --> 00:16:46,639
the statistical soundness follows from

386
00:16:46,639 --> 00:16:48,560
the fact that for multiple random

387
00:16:48,560 --> 00:16:50,800
strings at least one should be binding

388
00:16:50,800 --> 00:16:54,800
with overwhelming probability

389
00:16:55,360 --> 00:16:58,079
so this is the conclusion of our work in

390
00:16:58,079 --> 00:17:00,320
our work we proposed several proof

391
00:17:00,320 --> 00:17:02,839
systems not as secure against nc1

392
00:17:02,839 --> 00:17:05,039
adversaries under the assumption that

393
00:17:05,039 --> 00:17:07,359
ncy is not equal to parity or slash

394
00:17:07,359 --> 00:17:08,720
party

395
00:17:08,720 --> 00:17:11,520
our results include a nisk for nc1

396
00:17:11,520 --> 00:17:14,679
circuit satisfiability and needs for

397
00:17:14,679 --> 00:17:18,559
accm-02 circuits with short proofs

398
00:17:18,559 --> 00:17:22,000
and non-interactive zaps and nisks in

399
00:17:22,000 --> 00:17:24,959
the ui's model

400
00:17:24,959 --> 00:17:29,280
to achieve our nisk for accm-02 circuits

401
00:17:29,280 --> 00:17:31,520
we also proposed a fully homomorphic

402
00:17:31,520 --> 00:17:32,640
encryption

403
00:17:32,640 --> 00:17:36,160
for ac cm02 circuits

404
00:17:36,160 --> 00:17:39,400
thank you

