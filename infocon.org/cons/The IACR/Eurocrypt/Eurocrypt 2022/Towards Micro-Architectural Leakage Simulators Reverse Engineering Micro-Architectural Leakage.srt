1
00:00:01,520 --> 00:00:04,480
hello again um if you have heard my last

2
00:00:04,480 --> 00:00:06,319
talk in my last talk i've talked about

3
00:00:06,319 --> 00:00:08,400
how you can construct complete leakage

4
00:00:08,400 --> 00:00:11,599
models and in most of the existing tools

5
00:00:11,599 --> 00:00:13,280
they are very far from complete their

6
00:00:13,280 --> 00:00:14,639
leakage model

7
00:00:14,639 --> 00:00:16,400
so in this talk i'm talk i'm going to

8
00:00:16,400 --> 00:00:18,080
talk about how you can reverse

9
00:00:18,080 --> 00:00:19,760
engineering and

10
00:00:19,760 --> 00:00:22,320
the micro architecture features from arm

11
00:00:22,320 --> 00:00:25,519
and cortex m3 core and make your leakage

12
00:00:25,519 --> 00:00:27,840
model a bit better a bit more complete

13
00:00:27,840 --> 00:00:28,640
um

14
00:00:28,640 --> 00:00:30,880
comparing to all the existing tools

15
00:00:30,880 --> 00:00:34,079
so this is um the speakers to me seagal

16
00:00:34,079 --> 00:00:36,000
and this is still my own work with

17
00:00:36,000 --> 00:00:38,399
elizabeth but last time i also got my

18
00:00:38,399 --> 00:00:41,200
previous colleague from bristol then on

19
00:00:41,200 --> 00:00:43,360
board to guide us through all the micro

20
00:00:43,360 --> 00:00:46,480
architecture mysteries

21
00:00:46,480 --> 00:00:49,600
all right so we already talked about um

22
00:00:49,600 --> 00:00:52,320
leakage simulators from my last talk if

23
00:00:52,320 --> 00:00:53,440
you miss it

24
00:00:53,440 --> 00:00:56,000
then leakage simulator are some early

25
00:00:56,000 --> 00:00:58,399
stage feedback tools which helps the

26
00:00:58,399 --> 00:01:01,840
developer avoid using a revised or slope

27
00:01:01,840 --> 00:01:03,280
or waiting for the response of

28
00:01:03,280 --> 00:01:06,000
certification centers they can right

29
00:01:06,000 --> 00:01:07,760
after they finish their code writing

30
00:01:07,760 --> 00:01:09,280
they can check whether their

31
00:01:09,280 --> 00:01:11,119
implementation is okay

32
00:01:11,119 --> 00:01:13,600
and this will also tell you exactly what

33
00:01:13,600 --> 00:01:17,439
caused a problem and how you can fix it

34
00:01:17,439 --> 00:01:19,840
so a little bit this is a really um

35
00:01:19,840 --> 00:01:21,360
enchanting

36
00:01:21,360 --> 00:01:23,439
favorable

37
00:01:23,439 --> 00:01:26,720
idea the most of the current

38
00:01:26,720 --> 00:01:28,400
simulator actually takes two different

39
00:01:28,400 --> 00:01:31,040
routes one is taking the green box rules

40
00:01:31,040 --> 00:01:33,119
where um you often see this on arm

41
00:01:33,119 --> 00:01:35,520
processors for example the elmo family

42
00:01:35,520 --> 00:01:37,840
whether you are using l original l mode

43
00:01:37,840 --> 00:01:39,200
the extended

44
00:01:39,200 --> 00:01:41,040
elmo called elmo star you're both

45
00:01:41,040 --> 00:01:45,439
targeting the cortex m0 so um both well

46
00:01:45,439 --> 00:01:47,520
all the entire element then they were

47
00:01:47,520 --> 00:01:49,759
always relying on the instruction

48
00:01:49,759 --> 00:01:52,159
simulator code and simulator which

49
00:01:52,159 --> 00:01:53,280
family

50
00:01:53,280 --> 00:01:55,920
emulates the family instructions so

51
00:01:55,920 --> 00:01:57,840
everything all the knowledge are

52
00:01:57,840 --> 00:02:00,719
actually based on this and your leakage

53
00:02:00,719 --> 00:02:02,560
model is trained from the profiling

54
00:02:02,560 --> 00:02:04,960
trace you got from the material core you

55
00:02:04,960 --> 00:02:06,719
have and

56
00:02:06,719 --> 00:02:08,959
more specifically your model will focus

57
00:02:08,959 --> 00:02:14,080
on the aou leakage from the stm32f2

58
00:02:14,080 --> 00:02:17,599
and um if there are a few extensions

59
00:02:17,599 --> 00:02:20,160
exist for example there are extensions

60
00:02:20,160 --> 00:02:22,400
on leakage and memory box there are

61
00:02:22,400 --> 00:02:25,760
extensions um extend this to another

62
00:02:25,760 --> 00:02:27,120
version of

63
00:02:27,120 --> 00:02:30,080
m0 for for example the m0 manufacture by

64
00:02:30,080 --> 00:02:32,640
nxp and there are also extensions that

65
00:02:32,640 --> 00:02:37,120
extend this to the contact s3

66
00:02:37,120 --> 00:02:39,680
you can also take the white box route

67
00:02:39,680 --> 00:02:40,879
for example

68
00:02:40,879 --> 00:02:44,720
what they did in maps in 2018 is taking

69
00:02:44,720 --> 00:02:47,920
the academic version of rtl code so in

70
00:02:47,920 --> 00:02:49,760
this case you actually know what's

71
00:02:49,760 --> 00:02:51,360
happening in the micro architecture you

72
00:02:51,360 --> 00:02:52,720
know everything

73
00:02:52,720 --> 00:02:54,640
but they also actually choose not to

74
00:02:54,640 --> 00:02:56,239
include everything in their model they

75
00:02:56,239 --> 00:02:58,959
actually choose to only focus on the

76
00:02:58,959 --> 00:03:01,760
registered bit flips in their model they

77
00:03:01,760 --> 00:03:03,760
only capture the register hamming

78
00:03:03,760 --> 00:03:05,200
distance

79
00:03:05,200 --> 00:03:07,360
the good thing about this is you don't

80
00:03:07,360 --> 00:03:09,599
need to guess about micro architecture

81
00:03:09,599 --> 00:03:11,440
you knows everything and you don't

82
00:03:11,440 --> 00:03:15,440
really need any measurements here

83
00:03:15,680 --> 00:03:16,480
but

84
00:03:16,480 --> 00:03:18,959
a bit recap from my loss talk when you

85
00:03:18,959 --> 00:03:20,239
are um

86
00:03:20,239 --> 00:03:22,959
well verifying those models both of them

87
00:03:22,959 --> 00:03:25,599
are really far from what's observed on

88
00:03:25,599 --> 00:03:28,400
the trace so both of them are really far

89
00:03:28,400 --> 00:03:29,680
from i do

90
00:03:29,680 --> 00:03:31,840
and the reason for that is both the

91
00:03:31,840 --> 00:03:36,080
models are quite well relatively simple

92
00:03:36,080 --> 00:03:38,319
if you think about elmo elmo star or

93
00:03:38,319 --> 00:03:41,519
they actually focus on the aou part they

94
00:03:41,519 --> 00:03:42,959
utilize in

95
00:03:42,959 --> 00:03:45,440
uh in for a three-stage pipeline score

96
00:03:45,440 --> 00:03:47,680
like context m0 or

97
00:03:47,680 --> 00:03:50,400
m3 the aou actually lies in only one of

98
00:03:50,400 --> 00:03:53,120
them is the execute a stage or the other

99
00:03:53,120 --> 00:03:55,599
stage the two stage are basically

100
00:03:55,599 --> 00:03:56,560
ignored

101
00:03:56,560 --> 00:03:59,840
uh and also the model builds um it's

102
00:03:59,840 --> 00:04:02,319
only for the ao buses um i marked them

103
00:04:02,319 --> 00:04:05,040
as logitech lines here both of them are

104
00:04:05,040 --> 00:04:07,599
not actually in architecture level they

105
00:04:07,599 --> 00:04:09,920
both lies in the microarchitecture

106
00:04:09,920 --> 00:04:12,319
that means you might not really know

107
00:04:12,319 --> 00:04:13,840
what's happening on those buses for

108
00:04:13,840 --> 00:04:16,238
example if we have this add instruction

109
00:04:16,238 --> 00:04:19,199
add r0 to r1 um you don't necessarily

110
00:04:19,199 --> 00:04:22,000
know we know which one will go to r sar

111
00:04:22,000 --> 00:04:24,960
zero goes for pathway or r0 goes to bus

112
00:04:24,960 --> 00:04:28,240
b so what's happening elmo represents

113
00:04:28,240 --> 00:04:30,800
the ulcers or we say more specifically

114
00:04:30,800 --> 00:04:33,440
david's guess

115
00:04:33,600 --> 00:04:35,440
and in match this the

116
00:04:35,440 --> 00:04:37,280
situation is quite different so maps

117
00:04:37,280 --> 00:04:39,840
have access to the white box uh

118
00:04:39,840 --> 00:04:42,560
code so the rtl code so there's no

119
00:04:42,560 --> 00:04:43,840
guessing

120
00:04:43,840 --> 00:04:45,600
involved but the

121
00:04:45,600 --> 00:04:48,000
question would be like um is it really

122
00:04:48,000 --> 00:04:49,919
say the same as the product on the

123
00:04:49,919 --> 00:04:52,400
market so you don't necessarily know

124
00:04:52,400 --> 00:04:54,800
whether on provide us the same verse the

125
00:04:54,800 --> 00:04:56,639
academic version and the industrial

126
00:04:56,639 --> 00:04:58,720
version are they exactly the same or

127
00:04:58,720 --> 00:05:00,400
whether the manufacturer might make

128
00:05:00,400 --> 00:05:02,080
their own revision

129
00:05:02,080 --> 00:05:04,080
um so there is some previous work

130
00:05:04,080 --> 00:05:05,600
working out in this direction and

131
00:05:05,600 --> 00:05:07,840
finding out their leakage behavior is

132
00:05:07,840 --> 00:05:11,039
not entirely um it's not entirely the

133
00:05:11,039 --> 00:05:14,400
same so we don't really know exactly why

134
00:05:14,400 --> 00:05:16,080
but there are some difference

135
00:05:16,080 --> 00:05:18,960
and also stated in our original maps

136
00:05:18,960 --> 00:05:20,960
paper they already said the leaker

137
00:05:20,960 --> 00:05:22,960
trades trades only the register so they

138
00:05:22,960 --> 00:05:25,039
only care about registered speed flips

139
00:05:25,039 --> 00:05:26,720
if you've got some leakage not from the

140
00:05:26,720 --> 00:05:29,600
registers for example from the aou then

141
00:05:29,600 --> 00:05:32,479
that's not covered

142
00:05:32,479 --> 00:05:35,280
um so if you listen to my last talk

143
00:05:35,280 --> 00:05:37,280
sorry about this this is not exactly the

144
00:05:37,280 --> 00:05:39,680
same as that do multiplication this is

145
00:05:39,680 --> 00:05:41,280
another version we actually work on

146
00:05:41,280 --> 00:05:43,520
several versions of sw multiplications

147
00:05:43,520 --> 00:05:46,240
here but this one actually helps us to

148
00:05:46,240 --> 00:05:48,639
explain what's happening

149
00:05:48,639 --> 00:05:52,000
in all those existing tools and what

150
00:05:52,000 --> 00:05:54,560
what are their shortcomings so this is

151
00:05:54,560 --> 00:05:55,759
another version written in

152
00:05:55,759 --> 00:05:58,080
pharmaceutically it's due um

153
00:05:58,080 --> 00:06:01,120
and the realistic one will be tested on

154
00:06:01,120 --> 00:06:04,880
arm context m3 from xp and with elmo i

155
00:06:04,880 --> 00:06:07,120
have extended it to the

156
00:06:07,120 --> 00:06:09,039
uh m3 model

157
00:06:09,039 --> 00:06:11,600
so if you look at this this is still 10

158
00:06:11,600 --> 00:06:14,479
cycles 10 instructions but here we got

159
00:06:14,479 --> 00:06:16,800
two cycles being leaky one the second

160
00:06:16,800 --> 00:06:19,440
line and cycle 15 is the realistic

161
00:06:19,440 --> 00:06:23,039
device results we don't really know why

162
00:06:23,039 --> 00:06:25,759
but if you take a look at elmo's result

163
00:06:25,759 --> 00:06:28,319
album miss both of the leaks

164
00:06:28,319 --> 00:06:30,800
and for elmo star not only miss most of

165
00:06:30,800 --> 00:06:33,199
the leaks you also provide and produce

166
00:06:33,199 --> 00:06:36,000
the false positive here

167
00:06:36,000 --> 00:06:38,319
for maps you capture one of them but the

168
00:06:38,319 --> 00:06:40,160
other one is missing

169
00:06:40,160 --> 00:06:43,039
and you might wondering why so in

170
00:06:43,039 --> 00:06:45,039
general that means your

171
00:06:45,039 --> 00:06:47,280
leakage model is overly simplified it

172
00:06:47,280 --> 00:06:48,960
doesn't really capture everything

173
00:06:48,960 --> 00:06:50,880
especially the microarchitecture

174
00:06:50,880 --> 00:06:53,520
features in your circuit in your

175
00:06:53,520 --> 00:06:56,400
realistic core that's motivated for

176
00:06:56,400 --> 00:06:58,240
reverse engineering the microactive

177
00:06:58,240 --> 00:07:00,560
header features um by reverse

178
00:07:00,560 --> 00:07:02,080
engineering i would like to mention this

179
00:07:02,080 --> 00:07:04,479
is a leakage-wise reverse engineering

180
00:07:04,479 --> 00:07:06,880
that is we only care about the

181
00:07:06,880 --> 00:07:08,639
um

182
00:07:08,639 --> 00:07:10,720
microarchitecture features that affects

183
00:07:10,720 --> 00:07:12,560
the leakage and can be observed from the

184
00:07:12,560 --> 00:07:15,759
leakage so if it's not leakage relevant

185
00:07:15,759 --> 00:07:17,759
we don't care about it and this is

186
00:07:17,759 --> 00:07:19,520
clearly not the same

187
00:07:19,520 --> 00:07:22,319
fine-grained analysis as binary code

188
00:07:22,319 --> 00:07:23,919
disassembly

189
00:07:23,919 --> 00:07:25,520
reverse engineering

190
00:07:25,520 --> 00:07:28,240
and our final goal is building of

191
00:07:28,240 --> 00:07:30,000
microarchitecturally enhanced leakage

192
00:07:30,000 --> 00:07:32,560
simulator

193
00:07:37,680 --> 00:07:40,160
okay let's start our reverse engineering

194
00:07:40,160 --> 00:07:42,639
journey now so our starting point will

195
00:07:42,639 --> 00:07:44,639
of course be the public information from

196
00:07:44,639 --> 00:07:48,479
arm we know cortex m3 is a three stage

197
00:07:48,479 --> 00:07:51,680
pattern core uh the three stage usually

198
00:07:51,680 --> 00:07:54,479
called fetch decode and execute as this

199
00:07:54,479 --> 00:07:56,000
figure shows

200
00:07:56,000 --> 00:07:57,599
and the only thing

201
00:07:57,599 --> 00:08:00,080
very interesting in this figure is in

202
00:08:00,080 --> 00:08:03,120
the decode stage um here it says not

203
00:08:03,120 --> 00:08:05,199
only doing the instruction decode but

204
00:08:05,199 --> 00:08:07,919
also doing registry this means that the

205
00:08:07,919 --> 00:08:09,599
code stage will not only do the

206
00:08:09,599 --> 00:08:12,080
instruction decoding but also prefetch

207
00:08:12,080 --> 00:08:14,879
the necessary operand for the excel

208
00:08:14,879 --> 00:08:18,080
stage this also means because there are

209
00:08:18,080 --> 00:08:21,039
pipeline registers between pipelines

210
00:08:21,039 --> 00:08:22,240
then you

211
00:08:22,240 --> 00:08:25,759
need some register temporarily storing

212
00:08:25,759 --> 00:08:26,560
the

213
00:08:26,560 --> 00:08:28,639
prefetch operands so at least there are

214
00:08:28,639 --> 00:08:30,560
two of them because most of the

215
00:08:30,560 --> 00:08:33,760
instructions have at least two

216
00:08:33,760 --> 00:08:36,640
operands and also for the rest resist

217
00:08:36,640 --> 00:08:39,200
fail because you need to simultaneously

218
00:08:39,200 --> 00:08:41,760
fetch at least two operands you need at

219
00:08:41,760 --> 00:08:44,560
least two reading ports

220
00:08:44,560 --> 00:08:47,279
and let's now take three stage pipeline

221
00:08:47,279 --> 00:08:50,480
one by one so first of all fetch stage f

222
00:08:50,480 --> 00:08:52,560
fetch stage fetching instructions from

223
00:08:52,560 --> 00:08:56,160
your memory to your instruction register

224
00:08:56,160 --> 00:08:58,720
the entire stage is driven by pc pc

225
00:08:58,720 --> 00:09:00,320
providing the the instructional

226
00:09:00,320 --> 00:09:01,760
addresses

227
00:09:01,760 --> 00:09:04,240
but if you take a look at this picture

228
00:09:04,240 --> 00:09:06,640
most of the wires the buses here we know

229
00:09:06,640 --> 00:09:08,000
what's happening on them we know the

230
00:09:08,000 --> 00:09:09,279
value on them

231
00:09:09,279 --> 00:09:10,399
and

232
00:09:10,399 --> 00:09:12,640
perhaps more importantly most of them

233
00:09:12,640 --> 00:09:15,120
are not even data dependent so um we

234
00:09:15,120 --> 00:09:17,839
only care about data dependency if it's

235
00:09:17,839 --> 00:09:19,760
not really data dependent it's french

236
00:09:19,760 --> 00:09:21,760
related issues i personally believe

237
00:09:21,760 --> 00:09:23,279
there are better

238
00:09:23,279 --> 00:09:24,959
solutions for it we don't really have to

239
00:09:24,959 --> 00:09:28,480
do this with leakage analysis

240
00:09:28,480 --> 00:09:31,120
and for the decode stage everything

241
00:09:31,120 --> 00:09:33,519
before the risks fail then

242
00:09:33,519 --> 00:09:36,320
they are still like not data dependent

243
00:09:36,320 --> 00:09:38,080
but after the

244
00:09:38,080 --> 00:09:38,880
um

245
00:09:38,880 --> 00:09:41,120
resist fail we got like

246
00:09:41,120 --> 00:09:44,000
several reading parts here and the

247
00:09:44,000 --> 00:09:46,160
obvious question is which operand for

248
00:09:46,160 --> 00:09:48,640
each instruction which operand goes to

249
00:09:48,640 --> 00:09:50,640
which reading port which will further

250
00:09:50,640 --> 00:09:54,560
affect what kind of leakage we might see

251
00:09:54,959 --> 00:09:56,880
for this questions we have to test it

252
00:09:56,880 --> 00:09:58,720
because there's no way we can get it

253
00:09:58,720 --> 00:10:00,720
from

254
00:10:00,720 --> 00:10:04,160
the assembly code so we test this

255
00:10:04,160 --> 00:10:06,800
customized code where um it's quite

256
00:10:06,800 --> 00:10:09,600
simple the first xor we send a and b to

257
00:10:09,600 --> 00:10:12,160
the micro architecture and then in the

258
00:10:12,160 --> 00:10:15,120
next target instruction i said i sent b

259
00:10:15,120 --> 00:10:17,600
c and d and then i would like to observe

260
00:10:17,600 --> 00:10:20,800
whether i can see an interaction or you

261
00:10:20,800 --> 00:10:24,000
say bit flip between a and c or between

262
00:10:24,000 --> 00:10:26,640
b and c if we find something between a

263
00:10:26,640 --> 00:10:29,040
and c then that probably means a and c

264
00:10:29,040 --> 00:10:31,519
share the same reading port or we find

265
00:10:31,519 --> 00:10:33,200
something b and c that means b and c

266
00:10:33,200 --> 00:10:35,920
share the same reading port

267
00:10:35,920 --> 00:10:38,959
so uh in those four in

268
00:10:38,959 --> 00:10:41,279
below we have like four graphs each of

269
00:10:41,279 --> 00:10:44,320
them if you find something above the

270
00:10:44,320 --> 00:10:46,079
dashed line here that means we have

271
00:10:46,079 --> 00:10:48,320
observed a significant

272
00:10:48,320 --> 00:10:50,480
uh contribution of this interaction

273
00:10:50,480 --> 00:10:54,160
whether it's ac or bd ac is the uh

274
00:10:54,160 --> 00:10:57,200
blue line bd is a red line here so for

275
00:10:57,200 --> 00:10:58,480
both

276
00:10:58,480 --> 00:11:00,800
two operand addition and multiplication

277
00:11:00,800 --> 00:11:03,360
we have seen both ac and bd that's quite

278
00:11:03,360 --> 00:11:06,880
normal and if you have only one um

279
00:11:06,880 --> 00:11:10,000
operand addition so so for example with

280
00:11:10,000 --> 00:11:12,320
one intermediate numbers then you will

281
00:11:12,320 --> 00:11:14,959
only see ac there's no bd

282
00:11:14,959 --> 00:11:18,800
but if you have like three um register

283
00:11:18,800 --> 00:11:20,560
instructions such like

284
00:11:20,560 --> 00:11:22,160
as list editions

285
00:11:22,160 --> 00:11:24,720
then what we found is all three of them

286
00:11:24,720 --> 00:11:27,120
will be loaded but only

287
00:11:27,120 --> 00:11:30,959
is a clear interaction so in this case

288
00:11:30,959 --> 00:11:33,120
we can't necessarily know which one goes

289
00:11:33,120 --> 00:11:35,519
through each we assume a and e share the

290
00:11:35,519 --> 00:11:38,320
same port and there's still something

291
00:11:38,320 --> 00:11:40,480
need to be fetched from another board so

292
00:11:40,480 --> 00:11:42,959
we assume there is a third port this

293
00:11:42,959 --> 00:11:44,640
might not be correct this might be

294
00:11:44,640 --> 00:11:46,640
something caused by physical effects

295
00:11:46,640 --> 00:11:48,720
such as glitches but this is the best

296
00:11:48,720 --> 00:11:51,040
guess we can get um there are also some

297
00:11:51,040 --> 00:11:52,720
instructions don't load anything for

298
00:11:52,720 --> 00:11:54,800
example this load instructions

299
00:11:54,800 --> 00:11:57,120
in our test it just don't have any

300
00:11:57,120 --> 00:11:59,200
interactions because it actually doesn't

301
00:11:59,200 --> 00:12:01,040
really load any

302
00:12:01,040 --> 00:12:03,519
operand

303
00:12:03,680 --> 00:12:06,240
okay so the next step from decode to

304
00:12:06,240 --> 00:12:09,120
execute we know after prefetching the

305
00:12:09,120 --> 00:12:10,880
operand we will send the operand to the

306
00:12:10,880 --> 00:12:13,360
pipeline registers so we assume there

307
00:12:13,360 --> 00:12:16,160
are two pipeline registers here are say

308
00:12:16,160 --> 00:12:18,880
rs1 and rs2

309
00:12:18,880 --> 00:12:21,920
the next question will be first of all

310
00:12:21,920 --> 00:12:24,079
which operand goes where so you can

311
00:12:24,079 --> 00:12:25,760
still from here

312
00:12:25,760 --> 00:12:28,000
to here or from here to here so you can

313
00:12:28,000 --> 00:12:31,040
still go out of the way or

314
00:12:31,040 --> 00:12:34,079
there is also as because we are attack

315
00:12:34,079 --> 00:12:36,079
while we're targeting

316
00:12:36,079 --> 00:12:38,880
registers here um the control signal can

317
00:12:38,880 --> 00:12:41,519
tell you tell the register saying please

318
00:12:41,519 --> 00:12:43,600
don't update your value please reject

319
00:12:43,600 --> 00:12:46,399
whatever come to your door and

320
00:12:46,399 --> 00:12:48,959
remains your previous value so this is

321
00:12:48,959 --> 00:12:50,560
not possible with buses but this is

322
00:12:50,560 --> 00:12:53,120
possible with register so we also like

323
00:12:53,120 --> 00:12:55,680
to know whether rs1 and rs2 will be

324
00:12:55,680 --> 00:12:57,760
updated or not

325
00:12:57,760 --> 00:13:00,160
so i'll skip all the technical details

326
00:13:00,160 --> 00:13:03,200
by directly telling you our results so

327
00:13:03,200 --> 00:13:05,600
this is our previous results with which

328
00:13:05,600 --> 00:13:08,959
data goes to which reading port and this

329
00:13:08,959 --> 00:13:11,200
is our current results on which data

330
00:13:11,200 --> 00:13:15,279
enters which register so if it's um if

331
00:13:15,279 --> 00:13:18,320
if so so a signal like signs like this

332
00:13:18,320 --> 00:13:21,279
means it will not be updated the

333
00:13:21,279 --> 00:13:23,360
register will remain their previous

334
00:13:23,360 --> 00:13:25,600
value

335
00:13:25,600 --> 00:13:27,920
and the last um

336
00:13:27,920 --> 00:13:31,120
part of our analysis is the memory

337
00:13:31,120 --> 00:13:34,399
subsystem which is kind of a headache

338
00:13:34,399 --> 00:13:37,120
this is actually well this part is often

339
00:13:37,120 --> 00:13:39,839
ignored by most existing tools

340
00:13:39,839 --> 00:13:42,639
but actually for fair reason so if you

341
00:13:42,639 --> 00:13:44,399
think about it the memory system

342
00:13:44,399 --> 00:13:46,480
although it contributes a lot to the

343
00:13:46,480 --> 00:13:49,279
leakage it actually lies a bit far away

344
00:13:49,279 --> 00:13:52,160
from the core so this is a graph from

345
00:13:52,160 --> 00:13:55,040
arm so our um everything we analyzed

346
00:13:55,040 --> 00:13:57,760
actually lies in within this blue blocks

347
00:13:57,760 --> 00:13:59,920
so it's only a part of this blocks and

348
00:13:59,920 --> 00:14:02,800
this is the core and where is the memory

349
00:14:02,800 --> 00:14:05,279
memory is not this memory protection the

350
00:14:05,279 --> 00:14:07,760
memory is usually connected through here

351
00:14:07,760 --> 00:14:09,519
something like this so the memory

352
00:14:09,519 --> 00:14:12,160
actually lies far away from the core and

353
00:14:12,160 --> 00:14:14,880
the mem to make it worse the memory is

354
00:14:14,880 --> 00:14:17,760
kind of self-timed so it's not like the

355
00:14:17,760 --> 00:14:20,320
curtain you please fetch me this upright

356
00:14:20,320 --> 00:14:22,800
the up the memory will respond in

357
00:14:22,800 --> 00:14:25,120
constant time so the memory can say

358
00:14:25,120 --> 00:14:27,760
sorry i'm busy please wait for me and

359
00:14:27,760 --> 00:14:30,000
love means the memory how the memory

360
00:14:30,000 --> 00:14:33,120
will respond cannot be predicted by a

361
00:14:33,120 --> 00:14:35,519
simple instruction emulator you might

362
00:14:35,519 --> 00:14:37,519
also need an

363
00:14:37,519 --> 00:14:39,440
memory emulator to know what's actually

364
00:14:39,440 --> 00:14:41,360
happening there

365
00:14:41,360 --> 00:14:43,519
so this might be a problem for our

366
00:14:43,519 --> 00:14:46,079
completeness test because because um our

367
00:14:46,079 --> 00:14:48,800
completeness this test is actually

368
00:14:48,800 --> 00:14:50,800
synchronizing what's happening on your

369
00:14:50,800 --> 00:14:53,120
trace and what's actually executing in

370
00:14:53,120 --> 00:14:55,199
your micro architecture so if it's

371
00:14:55,199 --> 00:14:57,120
impossible to synchronizing the timing

372
00:14:57,120 --> 00:14:59,360
of it if the memory can say wait for me

373
00:14:59,360 --> 00:15:01,440
one second here and wait me five cycles

374
00:15:01,440 --> 00:15:04,720
there then it will be a obvious problem

375
00:15:04,720 --> 00:15:06,959
so here we didn't do uh what our

376
00:15:06,959 --> 00:15:08,560
european we

377
00:15:08,560 --> 00:15:09,440
did

378
00:15:09,440 --> 00:15:12,240
well pretty much what the previous works

379
00:15:12,240 --> 00:15:14,320
has been doing uh relying on the

380
00:15:14,320 --> 00:15:16,160
existing knowledge for example the

381
00:15:16,160 --> 00:15:18,720
memory assess is always worthwhile like

382
00:15:18,720 --> 00:15:21,639
i said in my last talk and um

383
00:15:21,639 --> 00:15:24,240
specifications saying perhaps there is

384
00:15:24,240 --> 00:15:26,399
one database which is shared between

385
00:15:26,399 --> 00:15:29,279
read and write and there is a shared

386
00:15:29,279 --> 00:15:31,600
address bus and there is also an

387
00:15:31,600 --> 00:15:34,240
additional um right buffer so this is of

388
00:15:34,240 --> 00:15:37,360
course far from i do

389
00:15:37,920 --> 00:15:40,959
and now let's see whether we can um how

390
00:15:40,959 --> 00:15:42,880
should we build the leakage

391
00:15:42,880 --> 00:15:45,839
model models uh we already know how the

392
00:15:45,839 --> 00:15:48,399
data flows in the micro architecture so

393
00:15:48,399 --> 00:15:50,079
first of all how

394
00:15:50,079 --> 00:15:51,600
how should we

395
00:15:51,600 --> 00:15:54,000
generally build leakage models for

396
00:15:54,000 --> 00:15:56,480
circuit so in circuit we have several

397
00:15:56,480 --> 00:15:58,320
components for example we have buses and

398
00:15:58,320 --> 00:16:00,720
registers previously we usually assume

399
00:16:00,720 --> 00:16:03,120
buses leaks is currently valued so you

400
00:16:03,120 --> 00:16:05,839
really resume is hamming weight and when

401
00:16:05,839 --> 00:16:07,920
they have bit flips we assume they might

402
00:16:07,920 --> 00:16:09,440
also have hand distance leakage

403
00:16:09,440 --> 00:16:11,440
especially like registers we always

404
00:16:11,440 --> 00:16:12,800
believe they have

405
00:16:12,800 --> 00:16:15,120
when it flips they cause heavy distance

406
00:16:15,120 --> 00:16:19,440
leakage so here um what's happening here

407
00:16:19,440 --> 00:16:22,000
in the graph is if we previous value is

408
00:16:22,000 --> 00:16:24,399
a prime and now

409
00:16:24,399 --> 00:16:25,839
we have a new

410
00:16:25,839 --> 00:16:28,399
value a then we assume the leakage can

411
00:16:28,399 --> 00:16:30,480
be a prime flip to a

412
00:16:30,480 --> 00:16:32,000
and we take some

413
00:16:32,000 --> 00:16:35,839
conservative approach that assuming um a

414
00:16:35,839 --> 00:16:38,480
prime and a will leak joint b so it will

415
00:16:38,480 --> 00:16:40,560
leak both of them they can include any

416
00:16:40,560 --> 00:16:42,160
sort of interaction including the

417
00:16:42,160 --> 00:16:43,519
hamming distance but not really

418
00:16:43,519 --> 00:16:45,600
restricted to the hamming distance so

419
00:16:45,600 --> 00:16:48,959
for any bus or a register we always

420
00:16:48,959 --> 00:16:51,519
assume with the leakage is the previous

421
00:16:51,519 --> 00:16:52,480
value

422
00:16:52,480 --> 00:16:54,320
times the current value so jointly

423
00:16:54,320 --> 00:16:57,360
leaking but for conventional

424
00:16:57,360 --> 00:17:00,320
combustion for real logic this is

425
00:17:00,320 --> 00:17:02,160
much more complicated because you have

426
00:17:02,160 --> 00:17:04,720
multiple inputs and this will also

427
00:17:04,720 --> 00:17:07,039
create all sorts of glitches which is

428
00:17:07,039 --> 00:17:08,720
quite difficult to predict

429
00:17:08,720 --> 00:17:11,280
um we also go through the conservative

430
00:17:11,280 --> 00:17:13,599
modeling and we assume the leakage will

431
00:17:13,599 --> 00:17:14,880
be

432
00:17:14,880 --> 00:17:16,000
both

433
00:17:16,000 --> 00:17:18,319
all of its previous inputs times the

434
00:17:18,319 --> 00:17:20,880
current inputs all of them will be

435
00:17:20,880 --> 00:17:23,280
leaking

436
00:17:23,359 --> 00:17:26,160
and again for fetch we already said all

437
00:17:26,160 --> 00:17:28,319
everything here are not really they it's

438
00:17:28,319 --> 00:17:32,000
not really data dependent so ignore it

439
00:17:32,000 --> 00:17:34,559
but for the code after here after the

440
00:17:34,559 --> 00:17:36,640
regis fail everything is data dependent

441
00:17:36,640 --> 00:17:39,039
so we have to consider it and we already

442
00:17:39,039 --> 00:17:42,640
know what's on 3.5 to 3.7 so for all of

443
00:17:42,640 --> 00:17:46,080
them up three buses so we just say uh

444
00:17:46,080 --> 00:17:48,640
each of the previous value times the

445
00:17:48,640 --> 00:17:51,679
current value jointly leaking

446
00:17:51,679 --> 00:17:53,679
and for the execute stage we know

447
00:17:53,679 --> 00:17:56,320
everything here is a bit combined to tor

448
00:17:56,320 --> 00:17:58,240
combined to terminal

449
00:17:58,240 --> 00:18:00,720
circuit so no way to

450
00:18:00,720 --> 00:18:02,160
restrict it

451
00:18:02,160 --> 00:18:04,080
what the leakage might look like so we

452
00:18:04,080 --> 00:18:06,960
just allow all the previous input times

453
00:18:06,960 --> 00:18:09,840
the current input

454
00:18:10,080 --> 00:18:12,000
and the memory there are three buses

455
00:18:12,000 --> 00:18:14,080
address buses read buses and the other

456
00:18:14,080 --> 00:18:15,440
is the buffer

457
00:18:15,440 --> 00:18:18,240
so additional white buffer so we assume

458
00:18:18,240 --> 00:18:18,960
they

459
00:18:18,960 --> 00:18:22,080
are jointly leaking on their own so the

460
00:18:22,080 --> 00:18:23,840
address bus the

461
00:18:23,840 --> 00:18:28,000
read read write bus and the right buffer

462
00:18:28,000 --> 00:18:30,080
and all together we add all three of

463
00:18:30,080 --> 00:18:32,640
them together and we assume this is our

464
00:18:32,640 --> 00:18:35,520
overall model and verify the quality of

465
00:18:35,520 --> 00:18:37,760
that in our completeness test in my last

466
00:18:37,760 --> 00:18:38,640
talk

467
00:18:38,640 --> 00:18:41,200
so we have six instructions here we can

468
00:18:41,200 --> 00:18:43,280
see most of them if something is above

469
00:18:43,280 --> 00:18:45,120
the stash line that means you're missing

470
00:18:45,120 --> 00:18:47,520
something and for most instructions we

471
00:18:47,520 --> 00:18:50,080
got something okay but for the specific

472
00:18:50,080 --> 00:18:51,280
addition

473
00:18:51,280 --> 00:18:54,320
instructions we are missing something um

474
00:18:54,320 --> 00:18:56,160
i will skip all the technical details

475
00:18:56,160 --> 00:18:58,160
here directly and tell you this is what

476
00:18:58,160 --> 00:19:01,039
i would call a cliche register assess it

477
00:19:01,039 --> 00:19:04,080
means the glitches in your decoder will

478
00:19:04,080 --> 00:19:06,960
causes an incorrect register ss which

479
00:19:06,960 --> 00:19:08,640
shouldn't really happen according to

480
00:19:08,640 --> 00:19:11,039
your functionality but it happens and it

481
00:19:11,039 --> 00:19:13,200
causes some leakage so if you add this

482
00:19:13,200 --> 00:19:15,520
in you will have find this line below

483
00:19:15,520 --> 00:19:18,240
the threshold

484
00:19:19,200 --> 00:19:21,919
all right let's now go back to our

485
00:19:21,919 --> 00:19:23,679
example in the beginning now we have

486
00:19:23,679 --> 00:19:26,320
reverse engineered or how the

487
00:19:26,320 --> 00:19:28,320
the micro architecture flows in your

488
00:19:28,320 --> 00:19:31,679
micro in your core and how the leakage

489
00:19:31,679 --> 00:19:34,720
behaves so let's now go back to our

490
00:19:34,720 --> 00:19:36,720
beginning example to say

491
00:19:36,720 --> 00:19:40,240
with c9 c15 why is it leaking and why

492
00:19:40,240 --> 00:19:43,360
elmo or maps fails in one of the nobles

493
00:19:43,360 --> 00:19:46,480
of them so for c9 our explanation for

494
00:19:46,480 --> 00:19:48,559
this will be the scene that is leaking

495
00:19:48,559 --> 00:19:50,320
the aou outputs

496
00:19:50,320 --> 00:19:52,799
having distance so this is a bus hamming

497
00:19:52,799 --> 00:19:55,120
distance uh it's not really a register

498
00:19:55,120 --> 00:19:57,360
of course maps won't find this because

499
00:19:57,360 --> 00:20:00,320
mass doesn't really care about buses um

500
00:20:00,320 --> 00:20:03,039
for elmo because elmo's model only

501
00:20:03,039 --> 00:20:05,200
takes the two operand bus the input

502
00:20:05,200 --> 00:20:07,440
operand bus and there's no aou output

503
00:20:07,440 --> 00:20:10,640
operator bus so this is also not in elmo

504
00:20:10,640 --> 00:20:13,120
for 615 this is register pipeline

505
00:20:13,120 --> 00:20:15,120
research having distance as we said

506
00:20:15,120 --> 00:20:17,360
before maps takes care of all the

507
00:20:17,360 --> 00:20:19,280
pipeline rates left so of course you max

508
00:20:19,280 --> 00:20:22,799
find this but elmo couldn't

509
00:20:23,760 --> 00:20:25,840
okay so let's um

510
00:20:25,840 --> 00:20:28,400
shortly briefly summarize with what we

511
00:20:28,400 --> 00:20:31,200
have achieved in this paper um so we

512
00:20:31,200 --> 00:20:33,760
have successfully reverse engineered the

513
00:20:33,760 --> 00:20:36,240
micro architecture of an m3 core again

514
00:20:36,240 --> 00:20:38,640
this is a leakage wise equipment version

515
00:20:38,640 --> 00:20:41,520
it's not really comparable to any um

516
00:20:41,520 --> 00:20:43,679
binary code on that list

517
00:20:43,679 --> 00:20:46,000
a reverse engineered core

518
00:20:46,000 --> 00:20:48,240
with built-in micro micro

519
00:20:48,240 --> 00:20:50,559
micro architecture intense leakage model

520
00:20:50,559 --> 00:20:53,200
and show its impact on various masking

521
00:20:53,200 --> 00:20:55,919
implantations um we only i have only

522
00:20:55,919 --> 00:20:57,440
talked about one of them but there are

523
00:20:57,440 --> 00:20:59,280
more in our paper

524
00:20:59,280 --> 00:21:01,280
and currently there are a few things we

525
00:21:01,280 --> 00:21:04,000
haven't um well we haven't worked

526
00:21:04,000 --> 00:21:06,320
through um a few things we have touched

527
00:21:06,320 --> 00:21:09,200
but not really in a mature stage so for

528
00:21:09,200 --> 00:21:11,440
example the cycle accurate memory

529
00:21:11,440 --> 00:21:13,760
emulator we hope maybe the memory

530
00:21:13,760 --> 00:21:16,480
manufacturer can help us with this and

531
00:21:16,480 --> 00:21:18,559
we can use the

532
00:21:18,559 --> 00:21:21,440
information the reverse engineering

533
00:21:21,440 --> 00:21:23,600
reverse engineers information to exploit

534
00:21:23,600 --> 00:21:27,039
more uh subtle micro architectural leaks

535
00:21:27,039 --> 00:21:29,760
this is an ongoing work and i have done

536
00:21:29,760 --> 00:21:32,080
some higher order testing but um not

537
00:21:32,080 --> 00:21:34,320
really in a mature stage we

538
00:21:34,320 --> 00:21:36,559
most of the experiments of all of the

539
00:21:36,559 --> 00:21:38,799
experience in this talk is basically

540
00:21:38,799 --> 00:21:40,080
first out there

541
00:21:40,080 --> 00:21:43,520
and uh we're working on some flexible

542
00:21:43,520 --> 00:21:46,159
that works not only for the architecture

543
00:21:46,159 --> 00:21:48,480
but also for perhaps in the future risk

544
00:21:48,480 --> 00:21:50,400
risk 5 architecture

545
00:21:50,400 --> 00:21:52,480
and

546
00:21:52,480 --> 00:21:55,200
last but not least the leakage model we

547
00:21:55,200 --> 00:21:57,840
get here works not only for leakage

548
00:21:57,840 --> 00:21:59,360
detection but also for for more

549
00:21:59,360 --> 00:22:01,520
verification but we haven't really

550
00:22:01,520 --> 00:22:04,320
gone very far in that direction

551
00:22:04,320 --> 00:22:06,640
all right that concludes my talk if you

552
00:22:06,640 --> 00:22:09,760
have any um questions please ask me

553
00:22:09,760 --> 00:22:12,320
during the eurocrypt live session thank

554
00:22:12,320 --> 00:22:16,200
you thank you for listening

