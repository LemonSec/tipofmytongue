1
00:00:03,679 --> 00:00:06,640
double computer

2
00:00:07,279 --> 00:00:09,360
okay so we're on to our second

3
00:00:09,360 --> 00:00:12,799
talk of the um morning and we're gonna

4
00:00:12,799 --> 00:00:15,519
we're gonna hear gemini elastic proofs

5
00:00:15,519 --> 00:00:18,000
for diverse environments take it away

6
00:00:18,000 --> 00:00:19,680
hello hi

7
00:00:19,680 --> 00:00:20,560
um

8
00:00:20,560 --> 00:00:22,880
so yeah this talk is concerned mostly

9
00:00:22,880 --> 00:00:24,320
with proving

10
00:00:24,320 --> 00:00:26,320
very very large circuits this joint

11
00:00:26,320 --> 00:00:28,000
worked with jonathan bruto alessandro

12
00:00:28,000 --> 00:00:31,279
queza and yun sung songhu

13
00:00:31,760 --> 00:00:33,760
so um we're gonna focus on succinct

14
00:00:33,760 --> 00:00:34,880
arguments you already heard the

15
00:00:34,880 --> 00:00:36,160
description just in the previous talk

16
00:00:36,160 --> 00:00:37,760
but essentially we have this dialogue

17
00:00:37,760 --> 00:00:39,920
between the prover and the verifier

18
00:00:39,920 --> 00:00:41,600
at the end of this dialogue the approver

19
00:00:41,600 --> 00:00:43,200
should be able to convince the verifier

20
00:00:43,200 --> 00:00:44,399
that there exists a witness that

21
00:00:44,399 --> 00:00:47,200
satisfies some relation

22
00:00:47,200 --> 00:00:48,640
arguments means that the security of

23
00:00:48,640 --> 00:00:50,160
this protocol relies on computational

24
00:00:50,160 --> 00:00:52,480
assumptions succinct means that the

25
00:00:52,480 --> 00:00:55,680
verification power

26
00:00:57,520 --> 00:00:59,280
is uh um

27
00:00:59,280 --> 00:01:01,359
less than the the witness is less than

28
00:01:01,359 --> 00:01:02,960
the complexity of the weakness we will

29
00:01:02,960 --> 00:01:04,400
actually focus on pre-processing

30
00:01:04,400 --> 00:01:06,080
succinct arguments which means that the

31
00:01:06,080 --> 00:01:07,600
verification time

32
00:01:07,600 --> 00:01:09,040
is um

33
00:01:09,040 --> 00:01:11,200
is even like lower than the than the

34
00:01:11,200 --> 00:01:14,080
size of the statement

35
00:01:14,159 --> 00:01:16,240
so we put a lot of effort in this kind

36
00:01:16,240 --> 00:01:18,159
of proof systems snacks belong in this

37
00:01:18,159 --> 00:01:20,880
class and

38
00:01:21,439 --> 00:01:22,960
we know how to do them

39
00:01:22,960 --> 00:01:25,280
we spent a lot of time improving their

40
00:01:25,280 --> 00:01:26,400
proving time

41
00:01:26,400 --> 00:01:28,320
verification time now we were almost

42
00:01:28,320 --> 00:01:30,960
optimal in both cases um but not so much

43
00:01:30,960 --> 00:01:33,360
in space and in fact if right now we

44
00:01:33,360 --> 00:01:35,360
were to use a practical proof systems

45
00:01:35,360 --> 00:01:37,360
like marlin or sparta

46
00:01:37,360 --> 00:01:38,880
for like millions of gates they would

47
00:01:38,880 --> 00:01:40,880
just like crash

48
00:01:40,880 --> 00:01:42,399
we are not able to prove very large

49
00:01:42,399 --> 00:01:43,520
instances

50
00:01:43,520 --> 00:01:44,560
and um

51
00:01:44,560 --> 00:01:46,720
as we sort of uh

52
00:01:46,720 --> 00:01:48,399
try to deploy these proof systems in the

53
00:01:48,399 --> 00:01:50,640
real world so it grows the need for

54
00:01:50,640 --> 00:01:52,159
being able to prove larger and larger

55
00:01:52,159 --> 00:01:53,600
circuits

56
00:01:53,600 --> 00:01:55,759
for instance if we just consider the

57
00:01:55,759 --> 00:01:57,600
compression function of charge 56 this

58
00:01:57,600 --> 00:01:58,640
is like

59
00:01:58,640 --> 00:02:00,320
30 000 constraints

60
00:02:00,320 --> 00:02:02,320
um if you put it in a merkle tree or you

61
00:02:02,320 --> 00:02:04,159
try to find different transactions you

62
00:02:04,159 --> 00:02:07,040
already far outside benchmarks that

63
00:02:07,040 --> 00:02:09,598
we put in papers and if you multiply by

64
00:02:09,598 --> 00:02:11,440
like a thousand times because you're

65
00:02:11,440 --> 00:02:15,280
like um doing gk roll-ups then

66
00:02:15,280 --> 00:02:17,120
you're you really cannot do not have a

67
00:02:17,120 --> 00:02:18,640
proof system that works in the real

68
00:02:18,640 --> 00:02:20,239
world that can uh can deal with these

69
00:02:20,239 --> 00:02:23,480
sort of circuits

70
00:02:23,760 --> 00:02:25,440
um so there has been already some

71
00:02:25,440 --> 00:02:27,040
literature on

72
00:02:27,040 --> 00:02:29,200
how to build a space efficient succinct

73
00:02:29,200 --> 00:02:33,360
arguments um mostly tcc papers

74
00:02:33,360 --> 00:02:36,080
initially we've been working a lot on

75
00:02:36,080 --> 00:02:37,760
recursive proofs

76
00:02:37,760 --> 00:02:40,080
as a mean of preserved time and space as

77
00:02:40,080 --> 00:02:41,920
you have just mentioned in the previous

78
00:02:41,920 --> 00:02:42,879
talk

79
00:02:42,879 --> 00:02:44,319
and

80
00:02:44,319 --> 00:02:45,760
but more recently we've been talking

81
00:02:45,760 --> 00:02:48,160
more about stream improvers and proverbs

82
00:02:48,160 --> 00:02:50,640
can that can produce a proof after

83
00:02:50,640 --> 00:02:52,800
receiving the inputs as a stream

84
00:02:52,800 --> 00:02:54,480
what do i mean by this i mean that in

85
00:02:54,480 --> 00:02:55,760
practice

86
00:02:55,760 --> 00:02:58,480
the approver gets

87
00:02:58,480 --> 00:03:01,120
as input a stream of data then runs it

88
00:03:01,120 --> 00:03:03,599
will run actually in a logarithmic space

89
00:03:03,599 --> 00:03:06,159
and then produce a proof in theory in

90
00:03:06,159 --> 00:03:08,720
sorry in in even more in uh

91
00:03:08,720 --> 00:03:10,000
in a real-world scenario what do i

92
00:03:10,000 --> 00:03:11,200
imagine imagine my phone that is

93
00:03:11,200 --> 00:03:12,400
downloading an instance and then

94
00:03:12,400 --> 00:03:14,080
producing a proof

95
00:03:14,080 --> 00:03:15,680
and and in theory what do i mean i mean

96
00:03:15,680 --> 00:03:17,120
that we have a touring machine that does

97
00:03:17,120 --> 00:03:18,800
not have the as input

98
00:03:18,800 --> 00:03:20,640
uh the input in random access but has an

99
00:03:20,640 --> 00:03:23,200
oracle and this oracle can give me next

100
00:03:23,200 --> 00:03:24,879
element next element next element and

101
00:03:24,879 --> 00:03:26,879
then i can also ask to seek at the

102
00:03:26,879 --> 00:03:29,120
beginning of the file

103
00:03:29,120 --> 00:03:31,360
and this tool machine must run in sort

104
00:03:31,360 --> 00:03:33,840
of log space

105
00:03:35,200 --> 00:03:37,120
we build on the top of this model and we

106
00:03:37,120 --> 00:03:38,799
introduced this idea of elasticity what

107
00:03:38,799 --> 00:03:40,400
does it mean elasticity means that you

108
00:03:40,400 --> 00:03:42,640
have a proving algorithm that meets two

109
00:03:42,640 --> 00:03:44,239
different implementations one that is

110
00:03:44,239 --> 00:03:46,560
time efficient one is space efficient

111
00:03:46,560 --> 00:03:48,480
the verifier couldn't care less about

112
00:03:48,480 --> 00:03:50,159
which setup was used in order to create

113
00:03:50,159 --> 00:03:51,599
this proof

114
00:03:51,599 --> 00:03:54,159
in particular we build we say that these

115
00:03:54,159 --> 00:03:56,879
creatures exist and we propose a proof

116
00:03:56,879 --> 00:03:59,280
system that for circuit satisfiability

117
00:03:59,280 --> 00:04:00,239
that that needs two different

118
00:04:00,239 --> 00:04:02,720
realization one that is linear time and

119
00:04:02,720 --> 00:04:04,959
one that is log space

120
00:04:04,959 --> 00:04:06,560
really we like to have the two of them

121
00:04:06,560 --> 00:04:07,920
but until then we have this sort of

122
00:04:07,920 --> 00:04:10,000
different type of configuration

123
00:04:10,000 --> 00:04:11,599
and in particular

124
00:04:11,599 --> 00:04:12,799
the proof is independent from the

125
00:04:12,799 --> 00:04:14,000
configuration that we choose and the

126
00:04:14,000 --> 00:04:17,599
verification run in log time

127
00:04:17,759 --> 00:04:19,519
in addition to that

128
00:04:19,519 --> 00:04:21,358
our proof system has the particularity

129
00:04:21,358 --> 00:04:23,600
that it is possible to move from space

130
00:04:23,600 --> 00:04:25,440
efficient to time efficient in the

131
00:04:25,440 --> 00:04:27,600
middle of the proving execution in the

132
00:04:27,600 --> 00:04:29,280
execution of the prover and we will see

133
00:04:29,280 --> 00:04:31,040
what this means in a second

134
00:04:31,040 --> 00:04:34,080
in addition to that the space complexity

135
00:04:34,080 --> 00:04:35,840
and the the complexity of the space

136
00:04:35,840 --> 00:04:37,360
efficient prover this was also known in

137
00:04:37,360 --> 00:04:39,520
previous works but we improve on that in

138
00:04:39,520 --> 00:04:40,960
that if the circuit has a particular

139
00:04:40,960 --> 00:04:42,720
structure it's like an inner product

140
00:04:42,720 --> 00:04:45,520
relation or it's a fantastic machine

141
00:04:45,520 --> 00:04:47,280
then this can actually go down to analog

142
00:04:47,280 --> 00:04:49,440
n

143
00:04:51,520 --> 00:04:53,360
we build this proof system for an np

144
00:04:53,360 --> 00:04:54,560
complete

145
00:04:54,560 --> 00:04:56,720
relation rank one constraint system why

146
00:04:56,720 --> 00:04:58,479
do we chose this relation because it's

147
00:04:58,479 --> 00:05:01,280
what people use in practice and um it is

148
00:05:01,280 --> 00:05:03,919
easy that uh to build this relation from

149
00:05:03,919 --> 00:05:06,400
a circuit what do i mean by as a circuit

150
00:05:06,400 --> 00:05:08,639
i mean uh additional multiplication

151
00:05:08,639 --> 00:05:10,160
gates and

152
00:05:10,160 --> 00:05:11,680
if i have this circuit with additional

153
00:05:11,680 --> 00:05:13,360
multiplication gates then i can build

154
00:05:13,360 --> 00:05:15,919
the matrices a b and c

155
00:05:15,919 --> 00:05:18,240
where size will depend on the size of

156
00:05:18,240 --> 00:05:20,639
the circuit

157
00:05:20,639 --> 00:05:21,919
for which

158
00:05:21,919 --> 00:05:23,520
if the circuit is satisfied then there

159
00:05:23,520 --> 00:05:25,759
will exist a z possibly different from

160
00:05:25,759 --> 00:05:27,840
zero for which this is satisfied and

161
00:05:27,840 --> 00:05:30,240
this dot here means hadamard product

162
00:05:30,240 --> 00:05:33,039
how do i build it very easy in a

163
00:05:33,039 --> 00:05:34,240
i put

164
00:05:34,240 --> 00:05:37,360
the left inputs left wires for the

165
00:05:37,360 --> 00:05:39,919
multiplication gate so one one and then

166
00:05:39,919 --> 00:05:42,560
all zeros in b i put the right input

167
00:05:42,560 --> 00:05:43,759
wires

168
00:05:43,759 --> 00:05:46,800
and in c i put the output wires

169
00:05:46,800 --> 00:05:49,039
what does it mean it means that if i do

170
00:05:49,039 --> 00:05:52,800
a z now i get zero plus just z1 bz2

171
00:05:52,800 --> 00:05:55,360
multiplication of them z3 i do this for

172
00:05:55,360 --> 00:05:57,360
all the multiplication constraints there

173
00:05:57,360 --> 00:05:59,280
you go i am forced that the circuit is

174
00:05:59,280 --> 00:06:01,840
satisfied

175
00:06:02,240 --> 00:06:04,479
now if i give you this relation as input

176
00:06:04,479 --> 00:06:05,680
to the approver and the approver can

177
00:06:05,680 --> 00:06:07,840
build the proof but what does it mean to

178
00:06:07,840 --> 00:06:09,600
have streaming access to this relation

179
00:06:09,600 --> 00:06:12,400
well we define it and it means for us

180
00:06:12,400 --> 00:06:14,800
that i give you streaming access to

181
00:06:14,800 --> 00:06:16,720
the vector z so i give you the element

182
00:06:16,720 --> 00:06:19,759
one by one first to last

183
00:06:19,759 --> 00:06:21,280
i give you access to the matrices but

184
00:06:21,280 --> 00:06:22,639
what does it mean to give you streaming

185
00:06:22,639 --> 00:06:24,639
access to a matrix it has two dimensions

186
00:06:24,639 --> 00:06:26,160
it means that they give you access in

187
00:06:26,160 --> 00:06:28,000
row major and in column measure the

188
00:06:28,000 --> 00:06:30,560
prover decides which one to take

189
00:06:30,560 --> 00:06:32,080
in addition i will give you also what we

190
00:06:32,080 --> 00:06:34,160
call the computation trace which is like

191
00:06:34,160 --> 00:06:35,600
essentially like the addition in the

192
00:06:35,600 --> 00:06:38,639
circuits namely azad bz and cz and if

193
00:06:38,639 --> 00:06:39,919
the

194
00:06:39,919 --> 00:06:41,440
the circuit has a particular structure

195
00:06:41,440 --> 00:06:43,440
again it is possible to build this inner

196
00:06:43,440 --> 00:06:45,520
product in a space efficient manner

197
00:06:45,520 --> 00:06:47,600
inside and in fact in the paper we have

198
00:06:47,600 --> 00:06:49,520
this notion of composability of streams

199
00:06:49,520 --> 00:06:52,000
where you can given as input many

200
00:06:52,000 --> 00:06:53,840
streams you can build a new stream that

201
00:06:53,840 --> 00:06:57,679
can be fed into another procedure

202
00:06:59,360 --> 00:07:01,360
so all these relations are linear

203
00:07:01,360 --> 00:07:03,039
relations so what i'm going to talk

204
00:07:03,039 --> 00:07:04,479
about is what i think is sort of the

205
00:07:04,479 --> 00:07:06,160
cornerstone protocol here which is the

206
00:07:06,160 --> 00:07:07,440
inner product

207
00:07:07,440 --> 00:07:09,039
once we have inner products very easy to

208
00:07:09,039 --> 00:07:10,639
do matrix vector multiplication and it's

209
00:07:10,639 --> 00:07:13,039
very easy to do hadamard product

210
00:07:13,039 --> 00:07:14,639
and for the more technical people what

211
00:07:14,639 --> 00:07:17,599
i'm going to provide is a

212
00:07:17,599 --> 00:07:19,360
polynomial interactive proof for inner

213
00:07:19,360 --> 00:07:20,479
product

214
00:07:20,479 --> 00:07:22,720
this protocol will be later composed

215
00:07:22,720 --> 00:07:24,880
with a polynomial commitment scheme and

216
00:07:24,880 --> 00:07:26,560
in our paper we have this theorem that

217
00:07:26,560 --> 00:07:28,720
says if you have an elastic idealized

218
00:07:28,720 --> 00:07:29,840
protocol if you have an elastic

219
00:07:29,840 --> 00:07:31,919
commitment scheme then guess what

220
00:07:31,919 --> 00:07:33,440
you can combine them and the result is

221
00:07:33,440 --> 00:07:36,160
elastic still

222
00:07:36,800 --> 00:07:38,319
so there is something that is already

223
00:07:38,319 --> 00:07:40,160
elastic and that has been going on for

224
00:07:40,160 --> 00:07:41,520
uh for a while in the literature and

225
00:07:41,520 --> 00:07:42,639
these are like protocols that are

226
00:07:42,639 --> 00:07:44,160
inspired from some check or folding

227
00:07:44,160 --> 00:07:45,919
arguments and all this protocol have

228
00:07:45,919 --> 00:07:48,720
this a nice structure where i go from a

229
00:07:48,720 --> 00:07:51,280
claim of size n into a claim of house

230
00:07:51,280 --> 00:07:53,039
the size and then i invoke it

231
00:07:53,039 --> 00:07:55,520
recursively until i end up with a claim

232
00:07:55,520 --> 00:07:57,680
that is trivial the size one and that

233
00:07:57,680 --> 00:08:00,639
the verifier can check immediately

234
00:08:00,639 --> 00:08:02,879
in particular at every round the

235
00:08:02,879 --> 00:08:05,199
verifier is sending me one random coin

236
00:08:05,199 --> 00:08:07,840
it's probably coin and the verifier is

237
00:08:07,840 --> 00:08:09,919
using this randomness to what we call

238
00:08:09,919 --> 00:08:11,360
fold the instance

239
00:08:11,360 --> 00:08:13,120
for instance

240
00:08:13,120 --> 00:08:14,879
i can do even or not folding which is

241
00:08:14,879 --> 00:08:17,120
sort of more inspired from fft or i can

242
00:08:17,120 --> 00:08:18,319
do left and right folding that's

243
00:08:18,319 --> 00:08:21,199
essentially the same thing

244
00:08:21,199 --> 00:08:23,039
and as i go on through the protocol i

245
00:08:23,039 --> 00:08:24,879
will have like these linear combinations

246
00:08:24,879 --> 00:08:26,319
of the randomness with pieces of the

247
00:08:26,319 --> 00:08:27,280
vector

248
00:08:27,280 --> 00:08:29,120
until at the end the verifier will have

249
00:08:29,120 --> 00:08:31,840
to check these uh sort of smaller

250
00:08:31,840 --> 00:08:33,279
instances which are actually

251
00:08:33,279 --> 00:08:35,039
multivariate polynomial evaluations or

252
00:08:35,039 --> 00:08:36,399
at least that's the way that i want you

253
00:08:36,399 --> 00:08:40,039
to see them for now

254
00:08:41,120 --> 00:08:43,760
now we know how to run these protocols

255
00:08:43,760 --> 00:08:46,560
in linear time why because over here i'm

256
00:08:46,560 --> 00:08:49,440
doing oops

257
00:08:49,440 --> 00:08:51,760
something is that okay because over here

258
00:08:51,760 --> 00:08:52,880
i'm doing and divide the battery

259
00:08:52,880 --> 00:08:54,720
multiplications then i will do and

260
00:08:54,720 --> 00:08:56,800
divide it by four then i will do and

261
00:08:56,800 --> 00:09:00,320
divide by eight this is linear no

262
00:09:00,320 --> 00:09:01,920
and um

263
00:09:01,920 --> 00:09:03,200
but how do i do it in a spatial

264
00:09:03,200 --> 00:09:05,279
efficient manner and uh actually we

265
00:09:05,279 --> 00:09:07,120
prove that you can we show that you can

266
00:09:07,120 --> 00:09:09,440
also do it in linear time constructive

267
00:09:09,440 --> 00:09:10,399
foldings

268
00:09:10,399 --> 00:09:12,080
how do you do it in a specific well you

269
00:09:12,080 --> 00:09:13,839
have as input the stream of f what is

270
00:09:13,839 --> 00:09:15,760
the stream of f are all the coefficients

271
00:09:15,760 --> 00:09:18,959
no one by one by one etcetera etcetera

272
00:09:18,959 --> 00:09:20,959
and i keep a stack

273
00:09:20,959 --> 00:09:22,640
and in this stack i can start putting

274
00:09:22,640 --> 00:09:24,240
and feeding elements from the stream and

275
00:09:24,240 --> 00:09:25,600
as soon as i have two elements of the

276
00:09:25,600 --> 00:09:27,680
same level well i fold them with a

277
00:09:27,680 --> 00:09:29,680
respective randomness and then i keep

278
00:09:29,680 --> 00:09:31,680
ingesting elements as soon as i have two

279
00:09:31,680 --> 00:09:33,200
elements of the same level then i fold

280
00:09:33,200 --> 00:09:35,839
them again of the same level i fold them

281
00:09:35,839 --> 00:09:37,519
until i end up with the coefficients

282
00:09:37,519 --> 00:09:39,920
that i want and then i can return it

283
00:09:39,920 --> 00:09:42,320
how much space does this thing take

284
00:09:42,320 --> 00:09:44,320
log n because i will keep at most two

285
00:09:44,320 --> 00:09:46,000
elements for every level

286
00:09:46,000 --> 00:09:46,959
how

287
00:09:46,959 --> 00:09:49,440
many much time will it take still linear

288
00:09:49,440 --> 00:09:50,959
note because i'm doing n divided by two

289
00:09:50,959 --> 00:09:52,800
multiplications plus n divided by four

290
00:09:52,800 --> 00:09:54,160
plus and divided by eight and so on and

291
00:09:54,160 --> 00:09:55,600
so forth

292
00:09:55,600 --> 00:09:57,920
and so at the end because i will have to

293
00:09:57,920 --> 00:10:00,160
run this protocol log times i will end

294
00:10:00,160 --> 00:10:01,680
up with a protocol that can use log

295
00:10:01,680 --> 00:10:02,720
space

296
00:10:02,720 --> 00:10:05,600
and overall analog and time

297
00:10:05,600 --> 00:10:06,720
but this protocol has another

298
00:10:06,720 --> 00:10:08,640
particularity that is sort of the sort

299
00:10:08,640 --> 00:10:11,360
of the the little nudge of our system

300
00:10:11,360 --> 00:10:13,120
that you can exploit this recursive

301
00:10:13,120 --> 00:10:15,040
structure in such a way that you can fix

302
00:10:15,040 --> 00:10:16,480
a memory budget you can say now my

303
00:10:16,480 --> 00:10:18,160
approver is going to take one gigabyte

304
00:10:18,160 --> 00:10:20,560
of memory you fix a threshold and then

305
00:10:20,560 --> 00:10:22,480
you can run the specification prover

306
00:10:22,480 --> 00:10:23,839
until you reach a level where the

307
00:10:23,839 --> 00:10:25,839
instance can be written in memory and

308
00:10:25,839 --> 00:10:27,279
then from then

309
00:10:27,279 --> 00:10:29,200
you can use the time efficient algorithm

310
00:10:29,200 --> 00:10:31,839
so you have a proof system that can run

311
00:10:31,839 --> 00:10:34,240
optimally for certain sizes and as soon

312
00:10:34,240 --> 00:10:36,000
as you hit like

313
00:10:36,000 --> 00:10:37,279
very large instances you will use

314
00:10:37,279 --> 00:10:40,240
streaming algorithms

315
00:10:41,279 --> 00:10:42,480
okay

316
00:10:42,480 --> 00:10:44,720
so this is sort of the the basic idea

317
00:10:44,720 --> 00:10:45,920
and

318
00:10:45,920 --> 00:10:47,760
once you reach the end what you have is

319
00:10:47,760 --> 00:10:49,360
this sort of multivariate evaluation

320
00:10:49,360 --> 00:10:51,839
that needs to be taken care of and um

321
00:10:51,839 --> 00:10:53,680
sort of in the real world when we when

322
00:10:53,680 --> 00:10:56,959
we do work with uh with polynomial iop

323
00:10:56,959 --> 00:10:59,600
um we have these verified tasks for a

324
00:10:59,600 --> 00:11:01,519
multivariate evaluation

325
00:11:01,519 --> 00:11:03,120
and in reality what does it mean it

326
00:11:03,120 --> 00:11:04,399
means that the

327
00:11:04,399 --> 00:11:06,320
approver will commit to a polynomial and

328
00:11:06,320 --> 00:11:09,839
then provide an evaluation proof

329
00:11:09,920 --> 00:11:11,200
actually in the paper we are able to

330
00:11:11,200 --> 00:11:12,640
reduce this multivariate query to

331
00:11:12,640 --> 00:11:14,640
univariate queries

332
00:11:14,640 --> 00:11:17,200
generically and why is this useful

333
00:11:17,200 --> 00:11:18,480
because then we can get rid of the

334
00:11:18,480 --> 00:11:19,920
multivariate part and use just a

335
00:11:19,920 --> 00:11:22,320
univariate polynomial commitment scheme

336
00:11:22,320 --> 00:11:24,480
why is this useful because if i end up

337
00:11:24,480 --> 00:11:26,720
using things like kzg

338
00:11:26,720 --> 00:11:28,079
the verification time is much more

339
00:11:28,079 --> 00:11:29,440
efficient we're talking about log

340
00:11:29,440 --> 00:11:31,839
pairings versus two pairings it's uh

341
00:11:31,839 --> 00:11:33,200
it's relevant

342
00:11:33,200 --> 00:11:35,279
and um and so what i want to do now is

343
00:11:35,279 --> 00:11:37,360
spend a little bit of time talking about

344
00:11:37,360 --> 00:11:39,360
how do you build an elastic commitment

345
00:11:39,360 --> 00:11:40,880
scheme

346
00:11:40,880 --> 00:11:43,600
um

347
00:11:43,600 --> 00:11:47,120
so we work on kcg and kcg is uh sort of

348
00:11:47,120 --> 00:11:49,519
a pretty streaming friendly um just as a

349
00:11:49,519 --> 00:11:50,720
reminder

350
00:11:50,720 --> 00:11:51,839
we already

351
00:11:51,839 --> 00:11:53,440
talked about this a bit in the previous

352
00:11:53,440 --> 00:11:54,720
talk but

353
00:11:54,720 --> 00:11:56,639
the commitment key is these consecutive

354
00:11:56,639 --> 00:11:58,560
hours of tao where tao is selected

355
00:11:58,560 --> 00:12:00,000
during setup and is never shared

356
00:12:00,000 --> 00:12:01,920
afterwards not with approver not with

357
00:12:01,920 --> 00:12:04,800
the verifier and the the commitment

358
00:12:04,800 --> 00:12:07,120
algorithms will consist

359
00:12:07,120 --> 00:12:08,720
in

360
00:12:08,720 --> 00:12:10,639
the multiscorer multiplication of the

361
00:12:10,639 --> 00:12:13,040
commitment key with the polynomial f

362
00:12:13,040 --> 00:12:14,880
does it mean to do this in a specific

363
00:12:14,880 --> 00:12:16,000
manner it means that i have the

364
00:12:16,000 --> 00:12:18,000
coefficients of f no in a streaming way

365
00:12:18,000 --> 00:12:19,839
so one by one and the same for the

366
00:12:19,839 --> 00:12:21,760
commitment key

367
00:12:21,760 --> 00:12:23,360
and i will build a commitment on the top

368
00:12:23,360 --> 00:12:25,440
of it by accumulating the product of

369
00:12:25,440 --> 00:12:27,279
these elements so i will do the this

370
00:12:27,279 --> 00:12:28,639
color multiplication of these things

371
00:12:28,639 --> 00:12:30,240
together

372
00:12:30,240 --> 00:12:32,480
now how do i do evaluation evaluation in

373
00:12:32,480 --> 00:12:35,360
kzg is uh equilibrium division by the

374
00:12:35,360 --> 00:12:37,200
polynomial x minus alpha so i get the

375
00:12:37,200 --> 00:12:38,480
question i get the reminder the

376
00:12:38,480 --> 00:12:40,720
remainder is the evaluation of fin alpha

377
00:12:40,720 --> 00:12:41,920
and the question is the thing that i'm

378
00:12:41,920 --> 00:12:43,200
going to commit to

379
00:12:43,200 --> 00:12:45,120
so what do we do

380
00:12:45,120 --> 00:12:46,639
we essentially do pen and pencil

381
00:12:46,639 --> 00:12:48,720
division by x minus alpha we get the

382
00:12:48,720 --> 00:12:51,600
string of f top to last coefficient and

383
00:12:51,600 --> 00:12:53,680
then we produce the stream of q by using

384
00:12:53,680 --> 00:12:56,240
rufine's law so the first is the first

385
00:12:56,240 --> 00:12:58,639
of the quotient then i apply recursively

386
00:12:58,639 --> 00:13:01,279
by using this i apply

387
00:13:01,279 --> 00:13:04,320
rupees law by using

388
00:13:04,320 --> 00:13:06,240
that requires me to store only the

389
00:13:06,240 --> 00:13:08,480
previous coefficient of the quotient

390
00:13:08,480 --> 00:13:10,320
and so this can be done in constant

391
00:13:10,320 --> 00:13:12,720
memory

392
00:13:13,440 --> 00:13:15,200
okay so now we have this polynomial

393
00:13:15,200 --> 00:13:16,320
commitment scheme we have this

394
00:13:16,320 --> 00:13:18,320
polynomial iop we put them together we

395
00:13:18,320 --> 00:13:20,560
get approved system that is elastic we

396
00:13:20,560 --> 00:13:23,040
try to go down to the implementation we

397
00:13:23,040 --> 00:13:24,639
we actually implement it and

398
00:13:24,639 --> 00:13:26,160
implementing it requires quite a some

399
00:13:26,160 --> 00:13:28,240
engineering effort why because you end

400
00:13:28,240 --> 00:13:30,399
up having to build the world polynomial

401
00:13:30,399 --> 00:13:32,160
commitment stack and we have

402
00:13:32,160 --> 00:13:33,839
an implementation for a multivitamin

403
00:13:33,839 --> 00:13:36,000
commitment scheme and one for kcg

404
00:13:36,000 --> 00:13:37,839
you have to build in a product and from

405
00:13:37,839 --> 00:13:40,560
here you can build directly as an arg

406
00:13:40,560 --> 00:13:43,199
but um what we go up for is a

407
00:13:43,199 --> 00:13:45,279
pre-processing snack so we have to build

408
00:13:45,279 --> 00:13:47,120
the proven needs to be even more work

409
00:13:47,120 --> 00:13:49,040
and there are some other protocols that

410
00:13:49,040 --> 00:13:51,040
need to be implemented some of which are

411
00:13:51,040 --> 00:13:52,560
not necessarily trivial to implement in

412
00:13:52,560 --> 00:13:54,639
a string fashion and in addition to that

413
00:13:54,639 --> 00:13:56,160
because we have this elastic notion you

414
00:13:56,160 --> 00:13:58,079
have to implement them twice essentially

415
00:13:58,079 --> 00:13:59,120
because you have to build the time

416
00:13:59,120 --> 00:14:00,399
efficient implementation and then the

417
00:14:00,399 --> 00:14:01,760
space efficient implementation and then

418
00:14:01,760 --> 00:14:04,880
how to move from one to the other

419
00:14:04,880 --> 00:14:05,760
and so

420
00:14:05,760 --> 00:14:07,600
given that we have this sort of modular

421
00:14:07,600 --> 00:14:10,079
framework we started trying to push some

422
00:14:10,079 --> 00:14:12,000
stuff into our quirks so that it can be

423
00:14:12,000 --> 00:14:14,480
also reused into other projects so for

424
00:14:14,480 --> 00:14:17,040
instance now we have a three different

425
00:14:17,040 --> 00:14:19,920
implementations of kcg in hardworks and

426
00:14:19,920 --> 00:14:21,920
for instance for novices or phd students

427
00:14:21,920 --> 00:14:24,000
it would be a nice project to try to see

428
00:14:24,000 --> 00:14:25,839
whether these can all be merged and we

429
00:14:25,839 --> 00:14:27,519
can have a unique implementation that is

430
00:14:27,519 --> 00:14:29,519
both space efficient and time efficient

431
00:14:29,519 --> 00:14:31,519
depending on the setup that you want and

432
00:14:31,519 --> 00:14:34,000
that has for instance other things like

433
00:14:34,000 --> 00:14:37,760
uh multi multi-point proofs

434
00:14:37,760 --> 00:14:39,920
and um

435
00:14:39,920 --> 00:14:42,240
just more on the technical side

436
00:14:42,240 --> 00:14:44,160
how do we implement them we this is all

437
00:14:44,160 --> 00:14:45,760
implemented in rust

438
00:14:45,760 --> 00:14:46,959
and um

439
00:14:46,959 --> 00:14:48,240
there are many ways in which these

440
00:14:48,240 --> 00:14:49,760
things can be implemented in rust one of

441
00:14:49,760 --> 00:14:52,880
them is by using the stream uh

442
00:14:52,880 --> 00:14:54,399
the stream libraries of rust which

443
00:14:54,399 --> 00:14:56,639
provides sort of generic interfaces but

444
00:14:56,639 --> 00:14:58,800
we actually go for iterator so if you

445
00:14:58,800 --> 00:15:00,240
are familiar with like with python we

446
00:15:00,240 --> 00:15:02,000
are really just using iterators for

447
00:15:02,000 --> 00:15:03,600
building streams over elements and then

448
00:15:03,600 --> 00:15:05,760
composing them but because rust has this

449
00:15:05,760 --> 00:15:08,079
very strong time system type system we

450
00:15:08,079 --> 00:15:11,199
end up having to embed within the type

451
00:15:11,199 --> 00:15:13,040
the world computation tree so if you

452
00:15:13,040 --> 00:15:14,320
have a matrix and then you're doing

453
00:15:14,320 --> 00:15:16,000
matrix vector operations and then you're

454
00:15:16,000 --> 00:15:17,360
doing an algebraic hashing on the top

455
00:15:17,360 --> 00:15:18,720
you have this type that gets more and

456
00:15:18,720 --> 00:15:20,399
more complicated and you have to work

457
00:15:20,399 --> 00:15:21,839
with that and this is the price for

458
00:15:21,839 --> 00:15:25,800
having a very efficient implementation

459
00:15:26,000 --> 00:15:29,199
so we end up benchmarking these and um

460
00:15:29,199 --> 00:15:31,199
sort of uh what is the take away from

461
00:15:31,199 --> 00:15:33,600
these is that um while

462
00:15:33,600 --> 00:15:35,120
in papers generally we stop at like

463
00:15:35,120 --> 00:15:38,880
millions of gates so around 20 um

464
00:15:38,880 --> 00:15:41,440
we go up until 2 to the 37 this is like

465
00:15:41,440 --> 00:15:44,560
statistical parameter security

466
00:15:44,560 --> 00:15:47,680
and uh um

467
00:15:48,639 --> 00:15:51,440
even if we try to use our own time

468
00:15:51,440 --> 00:15:54,320
prover for like on on a large machine

469
00:15:54,320 --> 00:15:56,959
that has 72 gigabytes of memory we stop

470
00:15:56,959 --> 00:15:59,199
at around 2 to the 27

471
00:15:59,199 --> 00:16:01,120
and so all of this space that you see

472
00:16:01,120 --> 00:16:02,639
here these only things that we can

473
00:16:02,639 --> 00:16:04,959
recover through streaming techniques

474
00:16:04,959 --> 00:16:07,199
we also have some stats for

475
00:16:07,199 --> 00:16:09,279
the stop a bit earlier but i wanted to

476
00:16:09,279 --> 00:16:11,040
stop and and think about one thing in

477
00:16:11,040 --> 00:16:13,759
the theorem we have this analog square n

478
00:16:13,759 --> 00:16:16,160
and this line is uh is a straight line

479
00:16:16,160 --> 00:16:17,759
and the reason for this is that the log

480
00:16:17,759 --> 00:16:19,759
factor doesn't really kick in and the

481
00:16:19,759 --> 00:16:21,680
biggest and i mean this is sort of a

482
00:16:21,680 --> 00:16:23,120
general thing for proof system the

483
00:16:23,120 --> 00:16:25,440
biggest over at this still that are

484
00:16:25,440 --> 00:16:27,120
still the cryptographic operations the

485
00:16:27,120 --> 00:16:28,480
multi-color multiplication is really

486
00:16:28,480 --> 00:16:30,240
what takes most part in a proof system

487
00:16:30,240 --> 00:16:31,920
and that's why we don't have really this

488
00:16:31,920 --> 00:16:34,000
uh this low square factor kicking in yet

489
00:16:34,000 --> 00:16:36,000
and the same goes for space if i set up

490
00:16:36,000 --> 00:16:37,680
my space budget to be large enough in

491
00:16:37,680 --> 00:16:40,399
our case around one gigabyte then even

492
00:16:40,399 --> 00:16:42,079
though the log is the the space is

493
00:16:42,079 --> 00:16:44,480
supposed to grow logarithmically um we

494
00:16:44,480 --> 00:16:46,240
have this nice flat line where you can

495
00:16:46,240 --> 00:16:48,720
just let approver run for as much time

496
00:16:48,720 --> 00:16:50,560
as you want and it will just occupy one

497
00:16:50,560 --> 00:16:54,239
gigabyte until the end of the execution

498
00:16:54,880 --> 00:16:56,480
and uh yeah so the bottom line is if you

499
00:16:56,480 --> 00:16:58,079
care about logarithmic factor you should

500
00:16:58,079 --> 00:17:01,199
also care about constants and um

501
00:17:01,199 --> 00:17:02,720
so yeah these are some resources and

502
00:17:02,720 --> 00:17:04,799
sort of wrapping up we have this proof

503
00:17:04,799 --> 00:17:06,400
system that is sort of

504
00:17:06,400 --> 00:17:07,839
these this idea of elasticity is

505
00:17:07,839 --> 00:17:09,679
essentially you have a proof system that

506
00:17:09,679 --> 00:17:11,119
can be implemented in a time efficient

507
00:17:11,119 --> 00:17:13,039
way or in a space efficient way and we

508
00:17:13,039 --> 00:17:14,480
find a way of also merging the two

509
00:17:14,480 --> 00:17:16,598
together thank you

510
00:17:16,598 --> 00:17:20,398
[Applause]

511
00:17:23,039 --> 00:17:24,480
thank you for the cool talk that was

512
00:17:24,480 --> 00:17:26,959
yeah really cool um okay i'll start with

513
00:17:26,959 --> 00:17:28,799
my question because no one else whilst

514
00:17:28,799 --> 00:17:30,640
everyone's thinking of another one

515
00:17:30,640 --> 00:17:33,760
um have you got a cool application of

516
00:17:33,760 --> 00:17:35,600
this is there a cool application where

517
00:17:35,600 --> 00:17:36,799
you really want to prove something

518
00:17:36,799 --> 00:17:39,039
that's so huge you can't get it in there

519
00:17:39,039 --> 00:17:40,799
decay roll-ups i think are one of them

520
00:17:40,799 --> 00:17:42,400
like you have a lot of transactions that

521
00:17:42,400 --> 00:17:43,679
you need to prove

522
00:17:43,679 --> 00:17:45,600
at once and you need to provide a proof

523
00:17:45,600 --> 00:17:47,600
for it and these transactions are really

524
00:17:47,600 --> 00:17:49,200
like in the order of thousands of them

525
00:17:49,200 --> 00:17:51,919
and you have maybe

526
00:17:52,720 --> 00:17:54,320
proven them i think actually got many

527
00:17:54,320 --> 00:17:55,679
merkle treats you got you're going to do

528
00:17:55,679 --> 00:17:58,480
proof many hashes at once so yeah okay

529
00:17:58,480 --> 00:18:01,799
or like hashtags

530
00:18:02,080 --> 00:18:04,160
yeah yeah and we also chatted with some

531
00:18:04,160 --> 00:18:05,600
of the falcon people but i think for

532
00:18:05,600 --> 00:18:07,600
them it's also important to

533
00:18:07,600 --> 00:18:09,760
uh have the proof that are small in our

534
00:18:09,760 --> 00:18:12,160
case our proof our logarithmic size our

535
00:18:12,160 --> 00:18:14,480
log size with the size of the circuit

536
00:18:14,480 --> 00:18:16,799
okay

537
00:18:20,320 --> 00:18:22,320
just had a quick question did you look

538
00:18:22,320 --> 00:18:24,080
at other polynomial commitments that are

539
00:18:24,080 --> 00:18:27,280
streaming friendly or is it just kcg

540
00:18:27,280 --> 00:18:29,679
so in kzg the particularity i guess is

541
00:18:29,679 --> 00:18:31,200
that we are doing division by a low

542
00:18:31,200 --> 00:18:33,039
degree polynomial and that's really what

543
00:18:33,039 --> 00:18:36,240
buys us this idea of streaming easily um

544
00:18:36,240 --> 00:18:38,960
if i already move into lagrange basis

545
00:18:38,960 --> 00:18:41,280
where i have to divide potentially by a

546
00:18:41,280 --> 00:18:42,880
film that has a high degree then i don't

547
00:18:42,880 --> 00:18:44,559
know how to do streaming other

548
00:18:44,559 --> 00:18:46,720
polynomial commitment like pst which

549
00:18:46,720 --> 00:18:48,720
admits across the setup

550
00:18:48,720 --> 00:18:52,559
uh they we can also do streaming on them

551
00:18:52,559 --> 00:18:54,880
like bulletproof like or

552
00:18:54,880 --> 00:18:56,720
fly based

553
00:18:56,720 --> 00:18:58,080
these are more like inner products and

554
00:18:58,080 --> 00:19:00,240
on them on them yeah they get the other

555
00:19:00,240 --> 00:19:04,600
is a similar to inner product i think

556
00:19:10,240 --> 00:19:12,799
so on a general level how do you see the

557
00:19:12,799 --> 00:19:15,120
the future of scale i mean i understand

558
00:19:15,120 --> 00:19:16,880
this like a very serious problem but do

559
00:19:16,880 --> 00:19:18,880
you think it's like distributing

560
00:19:18,880 --> 00:19:21,440
the prover or streaming

561
00:19:21,440 --> 00:19:22,840
ah i don't know

562
00:19:22,840 --> 00:19:24,480
um

563
00:19:24,480 --> 00:19:25,840
i think there is there are multiple

564
00:19:25,840 --> 00:19:27,360
directions no there is the streaming

565
00:19:27,360 --> 00:19:29,919
direction there is the direction of uh

566
00:19:29,919 --> 00:19:32,000
recursing and then like incrementally

567
00:19:32,000 --> 00:19:33,600
verifiable computational recursive

568
00:19:33,600 --> 00:19:35,600
proofs and then there is also the mpc

569
00:19:35,600 --> 00:19:37,919
direction and i'm not really sure which

570
00:19:37,919 --> 00:19:41,200
one will take off um and also i think

571
00:19:41,200 --> 00:19:43,120
um

572
00:19:43,120 --> 00:19:44,320
maybe there are even in different

573
00:19:44,320 --> 00:19:45,600
applications like if you do recursion

574
00:19:45,600 --> 00:19:47,120
you have to embed the very fire circuit

575
00:19:47,120 --> 00:19:48,559
into the approver and this is a big

576
00:19:48,559 --> 00:19:50,160
overhead whereas if you do streaming

577
00:19:50,160 --> 00:19:51,600
maybe it's easier

578
00:19:51,600 --> 00:19:54,960
and if you do npc as well i don't know

579
00:19:54,960 --> 00:19:58,320
i i really have no idea

580
00:19:58,720 --> 00:20:00,640
thanks for the talk um obviously what

581
00:20:00,640 --> 00:20:02,960
would be better it would be to have both

582
00:20:02,960 --> 00:20:04,720
base and time efficiency so you wouldn't

583
00:20:04,720 --> 00:20:07,280
have to yeah but it wasn't so clear from

584
00:20:07,280 --> 00:20:10,000
your presentation to me at least

585
00:20:10,000 --> 00:20:12,159
when you presented the streaming version

586
00:20:12,159 --> 00:20:13,600
for the inner product argument i think

587
00:20:13,600 --> 00:20:15,679
was slide 15 or so

588
00:20:15,679 --> 00:20:18,159
why you wouldn't be able to get also

589
00:20:18,159 --> 00:20:20,159
optimal time

590
00:20:20,159 --> 00:20:22,080
so um

591
00:20:22,080 --> 00:20:24,559
when you're when you're folding each

592
00:20:24,559 --> 00:20:26,080
time

593
00:20:26,080 --> 00:20:27,280
you will have

594
00:20:27,280 --> 00:20:28,880
an instance of size and divided by two

595
00:20:28,880 --> 00:20:30,240
that then you fold in and divided by

596
00:20:30,240 --> 00:20:32,240
four when you're doing streaming you

597
00:20:32,240 --> 00:20:34,480
cannot store the partial instance that

598
00:20:34,480 --> 00:20:37,120
the partial folding in memory

599
00:20:37,120 --> 00:20:39,520
so every time you have to go through the

600
00:20:39,520 --> 00:20:42,640
previous folding to build the next one

601
00:20:42,640 --> 00:20:44,480
because you cannot store it in memory

602
00:20:44,480 --> 00:20:46,480
literally and so

603
00:20:46,480 --> 00:20:49,120
um i think there is really this uh on on

604
00:20:49,120 --> 00:20:50,880
the bigger level i think there is really

605
00:20:50,880 --> 00:20:53,600
this memory space it is the space and

606
00:20:53,600 --> 00:20:55,679
time trade-off that is very common in

607
00:20:55,679 --> 00:20:58,000
like uh i don't know dynamic programming

608
00:20:58,000 --> 00:21:00,720
or like dvd tempera where you have you

609
00:21:00,720 --> 00:21:02,799
can either choose to use a lot of space

610
00:21:02,799 --> 00:21:04,400
and then you have a fast algorithm so

611
00:21:04,400 --> 00:21:06,080
you have a spatial efficient one but

612
00:21:06,080 --> 00:21:08,720
then you have a higher time complexity

613
00:21:08,720 --> 00:21:10,159
i think it really boils down to that and

614
00:21:10,159 --> 00:21:12,960
i'm sure it's even possible yeah but

615
00:21:12,960 --> 00:21:15,640
good question thanks

616
00:21:15,640 --> 00:21:19,919
any other questions

617
00:21:20,640 --> 00:21:22,480
go once going twice no okay thank you

618
00:21:22,480 --> 00:21:25,710
very much that was really cool

619
00:21:25,710 --> 00:21:32,000
[Applause]

620
00:21:32,000 --> 00:21:34,080
you

