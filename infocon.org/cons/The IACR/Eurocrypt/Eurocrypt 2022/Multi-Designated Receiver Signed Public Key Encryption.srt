1
00:00:00,080 --> 00:00:02,799
flow is yours

2
00:00:08,720 --> 00:00:10,480
hi everyone uh welcome to my

3
00:00:10,480 --> 00:00:12,880
presentation on multi-designated

4
00:00:12,880 --> 00:00:15,200
receiver signed public encryption

5
00:00:15,200 --> 00:00:17,119
this is joint work with william r and

6
00:00:17,119 --> 00:00:20,160
christopher partman

7
00:00:22,080 --> 00:00:24,880
oh thanks sorry

8
00:00:25,840 --> 00:00:27,680
okay

9
00:00:27,680 --> 00:00:30,720
so in this paper we introduced two new

10
00:00:30,720 --> 00:00:33,840
types of public encryption schemes

11
00:00:33,840 --> 00:00:36,000
the first one is as in the title and the

12
00:00:36,000 --> 00:00:38,800
second one is called pkebc or public

13
00:00:38,800 --> 00:00:41,440
encryption for broadcast

14
00:00:41,440 --> 00:00:43,600
we also give constructions of both of

15
00:00:43,600 --> 00:00:45,200
these schemes from standard assumptions

16
00:00:45,200 --> 00:00:48,000
and i would like to note that

17
00:00:48,000 --> 00:00:50,559
any mdr spke scheme which satisfies

18
00:00:50,559 --> 00:00:53,600
anonymity yields a multi-designated

19
00:00:53,600 --> 00:00:55,840
verifier signature scheme or mdvs with

20
00:00:55,840 --> 00:00:57,760
privacy of identities

21
00:00:57,760 --> 00:01:00,000
this means that we give the first

22
00:01:00,000 --> 00:01:02,559
mdvs scheme with privacy of identities

23
00:01:02,559 --> 00:01:05,920
from standard assumptions

24
00:01:06,640 --> 00:01:07,840
okay

25
00:01:07,840 --> 00:01:10,720
so now let's look at the syntax for

26
00:01:10,720 --> 00:01:13,840
pkvc schemes

27
00:01:14,320 --> 00:01:15,040
so

28
00:01:15,040 --> 00:01:17,280
suppose you have a sender alice and five

29
00:01:17,280 --> 00:01:19,600
receivers b1 through v5

30
00:01:19,600 --> 00:01:22,240
with these publicly so rpk just means

31
00:01:22,240 --> 00:01:24,159
receiver public key

32
00:01:24,159 --> 00:01:27,119
and the similar for rsk

33
00:01:27,119 --> 00:01:28,240
so if

34
00:01:28,240 --> 00:01:30,720
alice wants to send a message to say for

35
00:01:30,720 --> 00:01:32,960
example a factor of receivers b1 b4 and

36
00:01:32,960 --> 00:01:34,000
b3

37
00:01:34,000 --> 00:01:36,000
she just encrypts it using this vector

38
00:01:36,000 --> 00:01:38,400
of public keys and the message

39
00:01:38,400 --> 00:01:41,360
and then to the crypt for example b1

40
00:01:41,360 --> 00:01:44,079
will just use his own secret key and he

41
00:01:44,079 --> 00:01:46,640
will get back not only the message

42
00:01:46,640 --> 00:01:49,439
but also the vector of public keys with

43
00:01:49,439 --> 00:01:51,200
respect to which the cipher text was

44
00:01:51,200 --> 00:01:53,680
encrypted

45
00:01:53,680 --> 00:01:57,200
i wanted to point out here that the

46
00:01:57,200 --> 00:01:59,360
decryption algorithm really only needs

47
00:01:59,360 --> 00:02:01,920
the secret key of the receiver so this

48
00:02:01,920 --> 00:02:04,320
is important because for example

49
00:02:04,320 --> 00:02:05,840
if the the

50
00:02:05,840 --> 00:02:07,759
encryption scheme achieve some sort of

51
00:02:07,759 --> 00:02:10,080
anonymity if the encryption would need

52
00:02:10,080 --> 00:02:12,560
the public use of the other parties then

53
00:02:12,560 --> 00:02:14,480
the receiver would have to guess who the

54
00:02:14,480 --> 00:02:16,239
other parties are or who'd have to know

55
00:02:16,239 --> 00:02:18,480
that in advance

56
00:02:18,480 --> 00:02:21,040
and then the receive the the vector of

57
00:02:21,040 --> 00:02:23,280
receivers public keys is also output so

58
00:02:23,280 --> 00:02:24,720
that the party knows who the other

59
00:02:24,720 --> 00:02:27,440
receivers were

60
00:02:27,840 --> 00:02:29,200
okay so

61
00:02:29,200 --> 00:02:31,760
we consider these three notions as the

62
00:02:31,760 --> 00:02:35,360
basic security notions for pkabc schemes

63
00:02:35,360 --> 00:02:38,000
and as an addition we'll also consider

64
00:02:38,000 --> 00:02:42,000
anonymity or ikcc to security

65
00:02:42,000 --> 00:02:45,440
so consistency is captures the following

66
00:02:45,440 --> 00:02:47,200
so

67
00:02:47,200 --> 00:02:51,040
even if alice would not be dishonest she

68
00:02:51,040 --> 00:02:53,360
cannot come up or any cipher text she

69
00:02:53,360 --> 00:02:55,120
might come up with

70
00:02:55,120 --> 00:02:56,800
will satisfy that

71
00:02:56,800 --> 00:02:58,480
if for example one of the honest

72
00:02:58,480 --> 00:03:00,400
receivers decrypts it and obtains a

73
00:03:00,400 --> 00:03:03,120
message and some vector of public keys

74
00:03:03,120 --> 00:03:05,760
for example b1 b3 b5

75
00:03:05,760 --> 00:03:09,200
then any other honest receiver

76
00:03:09,200 --> 00:03:11,680
whose public is in this vector when it

77
00:03:11,680 --> 00:03:14,319
decrypts the same cipher text will

78
00:03:14,319 --> 00:03:16,480
obtain exactly the same vector and

79
00:03:16,480 --> 00:03:19,840
exactly the same message

80
00:03:20,959 --> 00:03:22,480
then there is also robustness so

81
00:03:22,480 --> 00:03:25,519
robustness is uh considered

82
00:03:25,519 --> 00:03:28,000
considers a non-standard and

83
00:03:28,000 --> 00:03:29,040
honest

84
00:03:29,040 --> 00:03:30,159
receivers

85
00:03:30,159 --> 00:03:32,000
and this is similar to the robustness

86
00:03:32,000 --> 00:03:34,480
notion for normal pke schemes

87
00:03:34,480 --> 00:03:36,000
the only difference that it's adapted

88
00:03:36,000 --> 00:03:37,760
for pkbc schemes

89
00:03:37,760 --> 00:03:40,799
so basically if ali sends a message to

90
00:03:40,799 --> 00:03:42,640
say d1 and v4

91
00:03:42,640 --> 00:03:44,239
of course v1 would still decrypt it

92
00:03:44,239 --> 00:03:45,519
normally

93
00:03:45,519 --> 00:03:48,480
but if for some reason b3 gets also the

94
00:03:48,480 --> 00:03:50,879
ciphertext when he tries to decrypt it

95
00:03:50,879 --> 00:03:53,920
he will not get anything

96
00:03:56,159 --> 00:03:58,959
then we also have confidentiality so if

97
00:03:58,959 --> 00:04:01,519
alice sends a message to two honest

98
00:04:01,519 --> 00:04:03,840
receivers

99
00:04:03,840 --> 00:04:05,360
a party who is not one of these

100
00:04:05,360 --> 00:04:07,920
receivers and who is dishonest will not

101
00:04:07,920 --> 00:04:09,519
learn anything about the underlying

102
00:04:09,519 --> 00:04:11,439
message other than the size of the

103
00:04:11,439 --> 00:04:12,799
message so

104
00:04:12,799 --> 00:04:14,319
in this case if i would not learn

105
00:04:14,319 --> 00:04:16,320
anything other than the length of the

106
00:04:16,320 --> 00:04:18,399
message

107
00:04:18,399 --> 00:04:19,680
similarly

108
00:04:19,680 --> 00:04:22,479
sort of similarly for anonymity

109
00:04:22,479 --> 00:04:24,800
uh b5 will not learn

110
00:04:24,800 --> 00:04:26,880
who the receivers of the message are

111
00:04:26,880 --> 00:04:29,120
although it will still learn that the

112
00:04:29,120 --> 00:04:31,680
that the cipher text is intended to two

113
00:04:31,680 --> 00:04:33,840
uh to two receivers

114
00:04:33,840 --> 00:04:35,919
so for example it would not be able to

115
00:04:35,919 --> 00:04:38,240
tell if the receivers of the cipher text

116
00:04:38,240 --> 00:04:41,280
were b1 or b1 and b4 or maybe

117
00:04:41,280 --> 00:04:43,520
they were b2 before or any other

118
00:04:43,520 --> 00:04:48,320
possible combination of honest receivers

119
00:04:49,120 --> 00:04:50,880
okay so with this let's just have a look

120
00:04:50,880 --> 00:04:54,000
at how when cons how one can construct

121
00:04:54,000 --> 00:04:59,199
pkbc schemes uh pkbc scheme

122
00:04:59,199 --> 00:05:01,840
so we'll first recall in our young's in

123
00:05:01,840 --> 00:05:04,639
cca1 pke scheme and then we'll show how

124
00:05:04,639 --> 00:05:07,280
to make it uh how to turn it into a pkbc

125
00:05:07,280 --> 00:05:08,320
scheme

126
00:05:08,320 --> 00:05:10,000
and finally we'll make it actually

127
00:05:10,000 --> 00:05:12,639
anonymous

128
00:05:13,440 --> 00:05:15,919
so as building blocks for our young

129
00:05:15,919 --> 00:05:18,080
speake scheme we'll have an ncpa secure

130
00:05:18,080 --> 00:05:19,360
pke scheme

131
00:05:19,360 --> 00:05:21,039
and also a non-interactive zero

132
00:05:21,039 --> 00:05:24,240
knowledge proof

133
00:05:24,240 --> 00:05:27,039
the keeper generation algorithm will

134
00:05:27,039 --> 00:05:28,880
generate two key pairs for the

135
00:05:28,880 --> 00:05:30,639
underlying cpa scheme

136
00:05:30,639 --> 00:05:33,199
and also a crs for the nisk

137
00:05:33,199 --> 00:05:34,639
the public key will consist of the

138
00:05:34,639 --> 00:05:36,960
public keys for this underlying cpa

139
00:05:36,960 --> 00:05:39,520
scheme and also the crs for the nisk

140
00:05:39,520 --> 00:05:41,039
and the secret key will just be the

141
00:05:41,039 --> 00:05:43,039
secret key of one of these

142
00:05:43,039 --> 00:05:44,479
cpa

143
00:05:44,479 --> 00:05:46,080
generated

144
00:05:46,080 --> 00:05:48,479
secret keys i mean one of the secret

145
00:05:48,479 --> 00:05:50,880
keys that were generated by this

146
00:05:50,880 --> 00:05:53,360
cpa scheme

147
00:05:53,360 --> 00:05:54,240
and

148
00:05:54,240 --> 00:05:57,520
also the public key sorry

149
00:05:57,520 --> 00:05:59,919
so for encryption what the sender does

150
00:05:59,919 --> 00:06:02,960
is it just generates two cipher texts

151
00:06:02,960 --> 00:06:05,199
each of them are in encryption under one

152
00:06:05,199 --> 00:06:08,080
of the public keys of the receiver of

153
00:06:08,080 --> 00:06:10,319
the message and then uses this nisk

154
00:06:10,319 --> 00:06:12,319
scheme to prove that there is a message

155
00:06:12,319 --> 00:06:14,160
that both of these ciphertexts are

156
00:06:14,160 --> 00:06:17,199
encryptions of the same message

157
00:06:17,199 --> 00:06:19,600
of course then the ciphertext for this

158
00:06:19,600 --> 00:06:21,840
pke scheme will correspond to the nisk

159
00:06:21,840 --> 00:06:23,039
proof and the two

160
00:06:23,039 --> 00:06:24,880
to the two cipher tests that were

161
00:06:24,880 --> 00:06:26,560
generated

162
00:06:26,560 --> 00:06:28,080
for decryption

163
00:06:28,080 --> 00:06:30,400
a receiver will first check if the nisk

164
00:06:30,400 --> 00:06:32,639
proof is valid for the same statement

165
00:06:32,639 --> 00:06:34,960
and if it is it will decrypt the first

166
00:06:34,960 --> 00:06:37,360
cipher text and simply output the

167
00:06:37,360 --> 00:06:39,280
underlying message

168
00:06:39,280 --> 00:06:41,440
one thing i would like to note is that

169
00:06:41,440 --> 00:06:43,919
if the nisk scheme is assumed to be

170
00:06:43,919 --> 00:06:46,800
simulation sound then the pke scheme

171
00:06:46,800 --> 00:06:50,960
will actually be in cc to secure

172
00:06:51,360 --> 00:06:53,680
so now let's see how can we generalize

173
00:06:53,680 --> 00:06:56,560
this into a pkavc scheme

174
00:06:56,560 --> 00:06:57,840
so

175
00:06:57,840 --> 00:07:00,479
first pkavc schemes have an additional

176
00:07:00,479 --> 00:07:01,680
algorithm

177
00:07:01,680 --> 00:07:04,560
that is used to generate now the

178
00:07:04,560 --> 00:07:06,800
crs for this nisk

179
00:07:06,800 --> 00:07:08,800
and then in key generation we no longer

180
00:07:08,800 --> 00:07:11,840
have to generate this crs for the nisk

181
00:07:11,840 --> 00:07:13,759
so the public you will just consist of

182
00:07:13,759 --> 00:07:16,080
the public keys of the underlying cpa

183
00:07:16,080 --> 00:07:18,719
secure scheme

184
00:07:19,199 --> 00:07:21,120
now recall that

185
00:07:21,120 --> 00:07:23,759
the encryption algorithm will now get as

186
00:07:23,759 --> 00:07:26,240
input this vector of receiver public

187
00:07:26,240 --> 00:07:28,000
keys

188
00:07:28,000 --> 00:07:29,840
and so what the sender does or what this

189
00:07:29,840 --> 00:07:31,440
encryption algorithm does is that now

190
00:07:31,440 --> 00:07:33,199
the sender has to compute

191
00:07:33,199 --> 00:07:35,440
for each of these senders

192
00:07:35,440 --> 00:07:37,680
an encryption of the message that it

193
00:07:37,680 --> 00:07:39,199
wants to send

194
00:07:39,199 --> 00:07:40,880
so it's basically the same as before but

195
00:07:40,880 --> 00:07:42,800
just that it does it for each of the

196
00:07:42,800 --> 00:07:44,960
senders

197
00:07:44,960 --> 00:07:48,479
then it is it uses this nisk scheme to

198
00:07:48,479 --> 00:07:50,400
prove that there is a message attached

199
00:07:50,400 --> 00:07:51,440
such that

200
00:07:51,440 --> 00:07:54,720
every ciphertext that it generated is an

201
00:07:54,720 --> 00:07:56,960
encryption of this message m under the

202
00:07:56,960 --> 00:07:58,560
corresponding public key that was

203
00:07:58,560 --> 00:08:01,919
received as input to the scheme

204
00:08:01,919 --> 00:08:03,360
okay and then the cipher text will

205
00:08:03,360 --> 00:08:05,199
correspond to this disk proof

206
00:08:05,199 --> 00:08:07,680
to the vector of cipher set cipher text

207
00:08:07,680 --> 00:08:10,000
that were generated and also to the

208
00:08:10,000 --> 00:08:13,520
vector of public keys

209
00:08:13,520 --> 00:08:15,759
decryption will be similar

210
00:08:15,759 --> 00:08:17,280
except that now

211
00:08:17,280 --> 00:08:19,280
we also have to check

212
00:08:19,280 --> 00:08:21,120
which cipher text the receiver should

213
00:08:21,120 --> 00:08:22,240
decrypt

214
00:08:22,240 --> 00:08:24,160
so what the receiver does is that is

215
00:08:24,160 --> 00:08:25,120
just

216
00:08:25,120 --> 00:08:28,560
it looks for the index such that his

217
00:08:28,560 --> 00:08:30,720
public key matches the one that is in

218
00:08:30,720 --> 00:08:33,519
this vector in the cipher text and

219
00:08:33,519 --> 00:08:36,399
of course if there is no such

220
00:08:36,399 --> 00:08:38,640
index it just does not output anything

221
00:08:38,640 --> 00:08:40,799
but if it finds it then it just tries to

222
00:08:40,799 --> 00:08:43,760
decrypt the ciphertext and outputs the

223
00:08:43,760 --> 00:08:45,519
vector of

224
00:08:45,519 --> 00:08:47,760
public keys that were in the ciphertext

225
00:08:47,760 --> 00:08:49,440
together with the message that it

226
00:08:49,440 --> 00:08:54,120
obtained from decrypting the ciphertext

227
00:08:55,519 --> 00:08:58,240
okay um one thing i wanted to notice

228
00:08:58,240 --> 00:08:59,839
from the

229
00:08:59,839 --> 00:09:01,839
from this scheme is that notice that of

230
00:09:01,839 --> 00:09:04,320
course this is not does not achieve any

231
00:09:04,320 --> 00:09:06,640
sort of anonymity first because

232
00:09:06,640 --> 00:09:10,000
this vector v goes in plane in the

233
00:09:10,000 --> 00:09:12,080
in the cipher text

234
00:09:12,080 --> 00:09:13,920
and also because

235
00:09:13,920 --> 00:09:15,760
actually even the

236
00:09:15,760 --> 00:09:18,399
nisk statement has this vector there i

237
00:09:18,399 --> 00:09:20,480
mean the the vector of public keys is

238
00:09:20,480 --> 00:09:22,000
not part of the witness so it does not

239
00:09:22,000 --> 00:09:24,720
have to be hidden

240
00:09:25,519 --> 00:09:27,760
okay so let's have a look at how things

241
00:09:27,760 --> 00:09:28,640
look

242
00:09:28,640 --> 00:09:30,080
we know that there are nisk schemes from

243
00:09:30,080 --> 00:09:31,600
scenario assumptions

244
00:09:31,600 --> 00:09:33,440
and actually there are also simulations

245
00:09:33,440 --> 00:09:36,560
on disks from standard assumptions

246
00:09:36,560 --> 00:09:37,279
so

247
00:09:37,279 --> 00:09:39,600
we take any simulations on nisk

248
00:09:39,600 --> 00:09:42,720
and from also from any pke scheme from

249
00:09:42,720 --> 00:09:45,440
which is in the cpa secure we get this

250
00:09:45,440 --> 00:09:48,640
first construction of a pkebc scheme

251
00:09:48,640 --> 00:09:50,320
however it's still not anonymous so

252
00:09:50,320 --> 00:09:52,240
let's make the previous scheme actually

253
00:09:52,240 --> 00:09:54,880
anonymous

254
00:09:56,560 --> 00:09:58,080
so the main idea will be to add a

255
00:09:58,080 --> 00:10:01,040
binding commitment to the vector of

256
00:10:01,040 --> 00:10:02,800
receiver's public keys and also to the

257
00:10:02,800 --> 00:10:04,720
message

258
00:10:04,720 --> 00:10:06,240
and then when

259
00:10:06,240 --> 00:10:07,839
instead of just encrypting the message

260
00:10:07,839 --> 00:10:10,240
we'll encrypt the vector of public keys

261
00:10:10,240 --> 00:10:12,320
the message and also

262
00:10:12,320 --> 00:10:13,839
the random coins that were used to

263
00:10:13,839 --> 00:10:16,800
compute the commitment

264
00:10:16,800 --> 00:10:18,640
so now the building blocks are the same

265
00:10:18,640 --> 00:10:21,360
as before but also now a statistically

266
00:10:21,360 --> 00:10:23,279
binding commitment scheme

267
00:10:23,279 --> 00:10:25,839
and actually we also need the underlying

268
00:10:25,839 --> 00:10:30,800
pke scheme to also be ik cpa secure

269
00:10:31,680 --> 00:10:33,440
so the

270
00:10:33,440 --> 00:10:35,600
public parameter generation

271
00:10:35,600 --> 00:10:38,160
algorithm or setup algorithm

272
00:10:38,160 --> 00:10:40,000
now the only difference is that it also

273
00:10:40,000 --> 00:10:42,320
has to compute this crs for the

274
00:10:42,320 --> 00:10:43,760
commitment scheme

275
00:10:43,760 --> 00:10:45,440
but everything else looks

276
00:10:45,440 --> 00:10:48,320
the same as before

277
00:10:48,560 --> 00:10:50,240
now the

278
00:10:50,240 --> 00:10:52,399
our scheme what it does is it first one

279
00:10:52,399 --> 00:10:54,480
has to compute the commitment to the

280
00:10:54,480 --> 00:10:55,600
vector of

281
00:10:55,600 --> 00:10:57,440
public keys to which we are encrypting

282
00:10:57,440 --> 00:10:59,120
the message

283
00:10:59,120 --> 00:11:01,519
okay and also of the message under some

284
00:11:01,519 --> 00:11:03,519
sequence of random coins row

285
00:11:03,519 --> 00:11:05,360
and then for each receiver we'll have to

286
00:11:05,360 --> 00:11:07,920
generate uh essentially instead of just

287
00:11:07,920 --> 00:11:10,640
being encryption of a message we encrypt

288
00:11:10,640 --> 00:11:12,079
not only the message but also the

289
00:11:12,079 --> 00:11:14,000
sequence of random coins and this vector

290
00:11:14,000 --> 00:11:15,120
v

291
00:11:15,120 --> 00:11:16,880
and then the nisk statement is slightly

292
00:11:16,880 --> 00:11:17,920
different

293
00:11:17,920 --> 00:11:19,440
because we have to show that there is a

294
00:11:19,440 --> 00:11:22,000
message but now also there is a vector

295
00:11:22,000 --> 00:11:23,519
of all the keys and the sequence and

296
00:11:23,519 --> 00:11:25,680
these are now in the witness such that

297
00:11:25,680 --> 00:11:27,600
essentially they explain

298
00:11:27,600 --> 00:11:29,440
the commitment and also each of the

299
00:11:29,440 --> 00:11:32,000
encryptions

300
00:11:32,880 --> 00:11:34,160
okay

301
00:11:34,160 --> 00:11:35,680
and now of course the commitment is also

302
00:11:35,680 --> 00:11:39,279
part of the final ciphertext

303
00:11:39,519 --> 00:11:41,519
for decrypting

304
00:11:41,519 --> 00:11:43,760
the decryption is basically the same as

305
00:11:43,760 --> 00:11:45,120
before but

306
00:11:45,120 --> 00:11:46,959
now we have to go over each of the

307
00:11:46,959 --> 00:11:48,959
cipher text and check which one was

308
00:11:48,959 --> 00:11:51,279
meant uh for the par for for this

309
00:11:51,279 --> 00:11:53,680
receiver so we'll try to decrypt each

310
00:11:53,680 --> 00:11:56,320
ciphertext and you'll finally find one

311
00:11:56,320 --> 00:11:58,639
that first equips correctly and second

312
00:11:58,639 --> 00:12:01,440
such that the public key of the receiver

313
00:12:01,440 --> 00:12:03,760
is equipping matches in the same index

314
00:12:03,760 --> 00:12:06,480
as the as in this vector

315
00:12:06,480 --> 00:12:08,639
and such that it can you can recompute

316
00:12:08,639 --> 00:12:10,959
the commitment this gives you like

317
00:12:10,959 --> 00:12:14,000
correctness basically

318
00:12:14,399 --> 00:12:15,839
okay and if there is none of course you

319
00:12:15,839 --> 00:12:17,839
just don't don't output anything and

320
00:12:17,839 --> 00:12:19,760
otherwise you will output this vector v

321
00:12:19,760 --> 00:12:22,560
and the message

322
00:12:23,600 --> 00:12:26,560
okay so let's see how things look now

323
00:12:26,560 --> 00:12:28,399
now we also have this additional

324
00:12:28,399 --> 00:12:30,240
statistically binding commitment scheme

325
00:12:30,240 --> 00:12:32,560
which exists from standard assumptions

326
00:12:32,560 --> 00:12:34,959
and we'll also use a pke scheme which is

327
00:12:34,959 --> 00:12:37,360
not only in cpi but also

328
00:12:37,360 --> 00:12:39,519
ikcpa secure and this also exists from

329
00:12:39,519 --> 00:12:41,600
standard assumptions

330
00:12:41,600 --> 00:12:43,120
and with these three building blocks you

331
00:12:43,120 --> 00:12:46,079
get we got the first scheme which

332
00:12:46,079 --> 00:12:48,880
satisfies uh all the security notions of

333
00:12:48,880 --> 00:12:52,399
pkvc schemes plus these ikc ikcc to

334
00:12:52,399 --> 00:12:55,040
security

335
00:12:55,279 --> 00:12:57,519
okay so with this let's just now look at

336
00:12:57,519 --> 00:13:00,160
the syntax and security notions for mdr

337
00:13:00,160 --> 00:13:03,120
spke schemes

338
00:13:03,200 --> 00:13:05,760
so first the syntax the syntax is

339
00:13:05,760 --> 00:13:07,760
somewhat similar to before

340
00:13:07,760 --> 00:13:10,959
to the pkbc schemes things that now

341
00:13:10,959 --> 00:13:12,639
senders also have

342
00:13:12,639 --> 00:13:14,959
key pairs

343
00:13:14,959 --> 00:13:17,360
then a sender to to send a message also

344
00:13:17,360 --> 00:13:20,560
has to use his own or her own secret key

345
00:13:20,560 --> 00:13:22,880
in order to generate a ciphertext

346
00:13:22,880 --> 00:13:24,560
and decryption

347
00:13:24,560 --> 00:13:26,800
now will output not only this vector of

348
00:13:26,800 --> 00:13:28,880
receiver public keys and the message

349
00:13:28,880 --> 00:13:33,959
but also the sender's public key

350
00:13:34,320 --> 00:13:36,320
so again i want you to make the same

351
00:13:36,320 --> 00:13:38,000
note as before which is

352
00:13:38,000 --> 00:13:39,519
for decrypting you really only need to

353
00:13:39,519 --> 00:13:42,160
know the sender's public key and you

354
00:13:42,160 --> 00:13:43,920
don't need to know who the

355
00:13:43,920 --> 00:13:46,000
sorry the receiver's secret key not the

356
00:13:46,000 --> 00:13:48,160
center public key and you do not need to

357
00:13:48,160 --> 00:13:50,480
know who the sender is or who the other

358
00:13:50,480 --> 00:13:52,000
receivers are and this is actually

359
00:13:52,000 --> 00:13:55,680
output by the decryption

360
00:13:56,000 --> 00:13:58,720
so the security notions that mdr spke

361
00:13:58,720 --> 00:14:00,720
schemes should satisfy these four

362
00:14:00,720 --> 00:14:04,000
properties plus anonymity

363
00:14:04,000 --> 00:14:06,160
okay so i'll just go over the the

364
00:14:06,160 --> 00:14:07,760
security notion so

365
00:14:07,760 --> 00:14:09,360
off the record it guarantees the

366
00:14:09,360 --> 00:14:11,760
following so suppose that a2 just sends

367
00:14:11,760 --> 00:14:13,360
some message m

368
00:14:13,360 --> 00:14:15,839
to this vector of receiver so before we

369
00:14:15,839 --> 00:14:17,360
files v2

370
00:14:17,360 --> 00:14:20,800
b2 b5 because he's dishonest might want

371
00:14:20,800 --> 00:14:22,320
to try and

372
00:14:22,320 --> 00:14:25,120
tell a3 that

373
00:14:25,120 --> 00:14:27,839
you know a2 set said something so just

374
00:14:27,839 --> 00:14:30,160
once convinced a3 now that who is not a

375
00:14:30,160 --> 00:14:32,160
designated receiver that

376
00:14:32,160 --> 00:14:34,720
a2 said something

377
00:14:34,720 --> 00:14:36,160
and

378
00:14:36,160 --> 00:14:38,480
of the record guarantee captures that

379
00:14:38,480 --> 00:14:41,120
well maybe actually a2 never said

380
00:14:41,120 --> 00:14:42,160
anything

381
00:14:42,160 --> 00:14:43,519
maybe

382
00:14:43,519 --> 00:14:47,120
b5 is actually just making it all up

383
00:14:47,120 --> 00:14:48,480
so then

384
00:14:48,480 --> 00:14:50,880
what happens is that of course if a3

385
00:14:50,880 --> 00:14:52,639
cannot know that he cannot distinguish

386
00:14:52,639 --> 00:14:55,040
the cipher texts that would be honestly

387
00:14:55,040 --> 00:14:57,920
generated by a2 or the cipher texts that

388
00:14:57,920 --> 00:15:00,240
would be generated by v5 it will not be

389
00:15:00,240 --> 00:15:02,800
convinced

390
00:15:04,000 --> 00:15:06,320
okay so then we also have authenticity

391
00:15:06,320 --> 00:15:09,120
this is essentially the same as for mdvs

392
00:15:09,120 --> 00:15:11,199
schemes

393
00:15:11,199 --> 00:15:13,199
and it just says that the dishonest

394
00:15:13,199 --> 00:15:15,839
parties cannot come up with cipher texts

395
00:15:15,839 --> 00:15:17,760
that an honest receiver will

396
00:15:17,760 --> 00:15:20,480
successfully decrypt

397
00:15:20,480 --> 00:15:22,399
where the public key that is output by

398
00:15:22,399 --> 00:15:24,160
the decryption

399
00:15:24,160 --> 00:15:27,199
is the public of some honest sender

400
00:15:27,199 --> 00:15:29,440
and dishonest cellular had never sent a

401
00:15:29,440 --> 00:15:31,279
cipher text which is basically the

402
00:15:31,279 --> 00:15:33,680
encryption of the same message to uh

403
00:15:33,680 --> 00:15:37,040
some factor of parties

404
00:15:37,600 --> 00:15:38,839
okay

405
00:15:38,839 --> 00:15:41,839
so there is also consistency it's

406
00:15:41,839 --> 00:15:44,079
similar to before the only thing is that

407
00:15:44,079 --> 00:15:46,399
now we also have to consider the sender

408
00:15:46,399 --> 00:15:48,639
so if b1 outputs

409
00:15:48,639 --> 00:15:50,880
some vector of uh

410
00:15:50,880 --> 00:15:53,440
actually a triple where in this vector

411
00:15:53,440 --> 00:15:55,759
there is for example b force

412
00:15:55,759 --> 00:15:57,199
public key

413
00:15:57,199 --> 00:16:00,240
with some senders public espkx

414
00:16:00,240 --> 00:16:02,399
then went before the crypts she should

415
00:16:02,399 --> 00:16:04,320
obtain exactly the same because the

416
00:16:04,320 --> 00:16:07,440
first public key was output also by b1's

417
00:16:07,440 --> 00:16:09,839
decryption

418
00:16:11,519 --> 00:16:13,199
then we also have confidentiality and

419
00:16:13,199 --> 00:16:15,680
this really looks like before

420
00:16:15,680 --> 00:16:17,519
so it's just that dishonest parties will

421
00:16:17,519 --> 00:16:19,120
not learn anything about underlying

422
00:16:19,120 --> 00:16:21,279
message other than the length of the

423
00:16:21,279 --> 00:16:23,440
message

424
00:16:23,440 --> 00:16:25,920
and finally we also have anonymity and

425
00:16:25,920 --> 00:16:27,680
for anonymity

426
00:16:27,680 --> 00:16:29,120
the guarantee is slightly different

427
00:16:29,120 --> 00:16:31,680
although similarly to before again so

428
00:16:31,680 --> 00:16:33,839
the thing is that now the dishonest

429
00:16:33,839 --> 00:16:36,560
parties will not only not learn who the

430
00:16:36,560 --> 00:16:38,880
receivers are but also not learn who the

431
00:16:38,880 --> 00:16:41,120
center was

432
00:16:41,120 --> 00:16:43,040
so in this case the dishonest receivers

433
00:16:43,040 --> 00:16:44,639
would not learn that

434
00:16:44,639 --> 00:16:47,040
maybe the sender was a2 and the

435
00:16:47,040 --> 00:16:50,160
receivers were b1 and b4 it could be any

436
00:16:50,160 --> 00:16:52,639
possible combination of an honest sender

437
00:16:52,639 --> 00:16:55,759
and two honest receivers

438
00:16:56,959 --> 00:16:59,040
okay so finally let's just have a very

439
00:16:59,040 --> 00:17:01,279
brief look at how one could or the main

440
00:17:01,279 --> 00:17:03,360
idea for constructing an

441
00:17:03,360 --> 00:17:05,039
pke scheme

442
00:17:05,039 --> 00:17:07,119
and basically the main idea is really

443
00:17:07,119 --> 00:17:10,480
just to use an mdvs scheme with does not

444
00:17:10,480 --> 00:17:12,559
have to be anonymous or does not have to

445
00:17:12,559 --> 00:17:15,039
satisfy privacy of identities

446
00:17:15,039 --> 00:17:19,039
and an ikcc to secure the kabc scheme

447
00:17:19,039 --> 00:17:22,240
and basically we'll use the mdvs scheme

448
00:17:22,240 --> 00:17:22,959
to

449
00:17:22,959 --> 00:17:25,439
sign messages with respect to some

450
00:17:25,439 --> 00:17:28,079
factor of or to some set of receivers

451
00:17:28,079 --> 00:17:30,240
and then we'll use the pkebc scheme to

452
00:17:30,240 --> 00:17:32,640
encrypt all the keying information

453
00:17:32,640 --> 00:17:35,280
uh plus the message and the signature

454
00:17:35,280 --> 00:17:37,760
and yeah and basically this many id the

455
00:17:37,760 --> 00:17:40,640
main idea of the construction

456
00:17:40,640 --> 00:17:42,799
so finally let's have a look at how

457
00:17:42,799 --> 00:17:44,160
things look

458
00:17:44,160 --> 00:17:47,919
so we had this from before and now

459
00:17:47,919 --> 00:17:50,799
if we take any mdvs scheme

460
00:17:50,799 --> 00:17:54,960
and also any anonymous pkuvc scheme

461
00:17:54,960 --> 00:17:57,280
using this construction we'll just get

462
00:17:57,280 --> 00:18:00,640
the mdr spke scheme which satisfies all

463
00:18:00,640 --> 00:18:03,520
the basic and your spk scheme notions

464
00:18:03,520 --> 00:18:05,520
plus anonymity

465
00:18:05,520 --> 00:18:08,400
and finally again as i said i think in

466
00:18:08,400 --> 00:18:11,120
the first slide

467
00:18:11,120 --> 00:18:13,200
before there were no constructions of

468
00:18:13,200 --> 00:18:16,240
these mdvs schemes with anonymity from

469
00:18:16,240 --> 00:18:18,400
standard assumptions there was one

470
00:18:18,400 --> 00:18:20,480
construction based on verifiable

471
00:18:20,480 --> 00:18:22,000
functional encryption

472
00:18:22,000 --> 00:18:23,360
and

473
00:18:23,360 --> 00:18:26,640
essentially since any mdr spke scheme is

474
00:18:26,640 --> 00:18:28,720
essentially an mdvs game but just gives

475
00:18:28,720 --> 00:18:30,400
even more guarantees

476
00:18:30,400 --> 00:18:31,760
um

477
00:18:31,760 --> 00:18:34,080
basically actually give the first mdvs

478
00:18:34,080 --> 00:18:35,280
scheme with

479
00:18:35,280 --> 00:18:37,200
anonymity

480
00:18:37,200 --> 00:18:39,360
okay so thank you for your attention and

481
00:18:39,360 --> 00:18:40,559
please let me know if you have any

482
00:18:40,559 --> 00:18:43,559
questions

483
00:18:48,320 --> 00:18:51,280
is there any question

484
00:18:55,440 --> 00:18:58,240
no question here

485
00:18:58,240 --> 00:19:00,000
yes seriously can you please use a

486
00:19:00,000 --> 00:19:03,000
microphone

487
00:19:15,120 --> 00:19:18,120
okay

488
00:19:27,840 --> 00:19:31,120
hello great um sorry i just wanted to

489
00:19:31,120 --> 00:19:32,480
ask um

490
00:19:32,480 --> 00:19:35,440
what are the real world situations where

491
00:19:35,440 --> 00:19:37,280
um specifically

492
00:19:37,280 --> 00:19:39,280
i think in the in

493
00:19:39,280 --> 00:19:41,280
the first scheme that you described uh

494
00:19:41,280 --> 00:19:43,520
the receivers do know who are the other

495
00:19:43,520 --> 00:19:46,000
receivers and when they are decrypting

496
00:19:46,000 --> 00:19:47,600
and i was wondering what would be the

497
00:19:47,600 --> 00:19:49,280
situations where they were like

498
00:19:49,280 --> 00:19:51,360
receivers would need to know who are the

499
00:19:51,360 --> 00:19:54,479
receivers of a message

500
00:19:55,200 --> 00:19:58,160
so the question is

501
00:19:58,240 --> 00:20:00,480
the use case for the first scheme so

502
00:20:00,480 --> 00:20:03,440
when receivers would not know okay so

503
00:20:03,440 --> 00:20:05,120
actually the the use case for the first

504
00:20:05,120 --> 00:20:08,240
scheme was that

505
00:20:08,240 --> 00:20:10,000
essentially the question is how can you

506
00:20:10,000 --> 00:20:12,159
transmit to the public keys for example

507
00:20:12,159 --> 00:20:13,840
even if you have an mdvi scheme that

508
00:20:13,840 --> 00:20:15,520
satisfies privacy

509
00:20:15,520 --> 00:20:17,760
how can you actually transmit the

510
00:20:17,760 --> 00:20:20,080
information such that receiver will know

511
00:20:20,080 --> 00:20:21,600
sufficient information to be able to

512
00:20:21,600 --> 00:20:24,159
verify signatures and the thing is that

513
00:20:24,159 --> 00:20:28,400
if i mean either you assume that the

514
00:20:28,400 --> 00:20:30,400
either you assume that the receiver just

515
00:20:30,400 --> 00:20:32,799
knows who the what the context would be

516
00:20:32,799 --> 00:20:34,400
somehow or

517
00:20:34,400 --> 00:20:36,000
if you do not make that assumption which

518
00:20:36,000 --> 00:20:37,919
i think is natural

519
00:20:37,919 --> 00:20:39,200
then

520
00:20:39,200 --> 00:20:40,720
you'd have basically to guess because

521
00:20:40,720 --> 00:20:43,360
you just don't know who the other would

522
00:20:43,360 --> 00:20:44,720
send her and who the other receivers

523
00:20:44,720 --> 00:20:46,960
were so you're just left with a guessing

524
00:20:46,960 --> 00:20:49,200
so this is just a way to can be used for

525
00:20:49,200 --> 00:20:51,840
example to transmit the keys

526
00:20:51,840 --> 00:20:53,440
okay

527
00:20:53,440 --> 00:20:56,400
any other question

528
00:20:58,320 --> 00:21:00,400
so actually i have one so if if i

529
00:21:00,400 --> 00:21:03,360
understood well if i see a message

530
00:21:03,360 --> 00:21:05,679
circulating and i don't know if this

531
00:21:05,679 --> 00:21:07,919
message is intended to me so i should

532
00:21:07,919 --> 00:21:09,440
try to decrypt

533
00:21:09,440 --> 00:21:11,120
right and i should go through all the

534
00:21:11,120 --> 00:21:12,880
possible decryption to figure out that

535
00:21:12,880 --> 00:21:15,520
the message was not for me right

536
00:21:15,520 --> 00:21:19,200
yes yes yes you're right is there any

537
00:21:19,200 --> 00:21:22,159
analysis of the complexity of the

538
00:21:22,159 --> 00:21:24,080
this algorithm i mean

539
00:21:24,080 --> 00:21:26,240
i did not analyze it but it's at the

540
00:21:26,240 --> 00:21:29,640
very least linear

541
00:21:30,080 --> 00:21:32,720
other question

542
00:21:34,159 --> 00:21:35,840
okay so thank you very much thank you

543
00:21:35,840 --> 00:21:39,000
thank you

