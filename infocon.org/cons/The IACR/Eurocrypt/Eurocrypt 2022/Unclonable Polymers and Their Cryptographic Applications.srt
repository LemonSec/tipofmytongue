1
00:00:08,320 --> 00:00:10,800
hey everyone i am radel mashakba from

2
00:00:10,800 --> 00:00:12,639
the university of connecticut

3
00:00:12,639 --> 00:00:15,360
in this talk i will present our work on

4
00:00:15,360 --> 00:00:17,199
unclonable polymers and their

5
00:00:17,199 --> 00:00:19,279
cryptographic applications

6
00:00:19,279 --> 00:00:22,560
this is a joint work with rankine yaniv

7
00:00:22,560 --> 00:00:25,760
erlah jonathan gershone tal malkin itzik

8
00:00:25,760 --> 00:00:28,800
pierre anna roightworth berman and iran

9
00:00:28,800 --> 00:00:31,599
trummer

10
00:00:31,599 --> 00:00:34,239
imagine we have memory devices that are

11
00:00:34,239 --> 00:00:35,760
unclonable

12
00:00:35,760 --> 00:00:38,719
and they self-destruct after retrieving

13
00:00:38,719 --> 00:00:41,120
the stored data

14
00:00:41,120 --> 00:00:44,079
also if this memory stores several

15
00:00:44,079 --> 00:00:45,120
messages

16
00:00:45,120 --> 00:00:47,840
only a few of them can be retrieved

17
00:00:47,840 --> 00:00:49,760
after which the device will be fully

18
00:00:49,760 --> 00:00:51,760
distracted so you cannot retrieve all

19
00:00:51,760 --> 00:00:55,039
the messages that you see in the photo

20
00:00:55,039 --> 00:00:58,160
such bounded query memory devices can be

21
00:00:58,160 --> 00:01:01,280
used in many applications among them we

22
00:01:01,280 --> 00:01:04,479
have bounded execution software known as

23
00:01:04,479 --> 00:01:06,799
one or k time programs

24
00:01:06,799 --> 00:01:09,360
these are programs that can be run over

25
00:01:09,360 --> 00:01:12,400
only a few inputs which is impossible to

26
00:01:12,400 --> 00:01:14,640
do using software alone

27
00:01:14,640 --> 00:01:17,280
even in the quantum model it was shown

28
00:01:17,280 --> 00:01:18,960
that without these special memory

29
00:01:18,960 --> 00:01:21,439
devices it is impossible to build

30
00:01:21,439 --> 00:01:26,000
bounded execution quantum programs

31
00:01:26,000 --> 00:01:28,560
this idea was first put forward by

32
00:01:28,560 --> 00:01:32,000
goldwater kalai and ruthblum who assumed

33
00:01:32,000 --> 00:01:34,960
the existence of simple one-time memory

34
00:01:34,960 --> 00:01:37,439
devices uh which imitate the

35
00:01:37,439 --> 00:01:39,280
functionality of an interactive

36
00:01:39,280 --> 00:01:41,759
oblivious transfer tokens

37
00:01:41,759 --> 00:01:43,840
which they used to build one-time

38
00:01:43,840 --> 00:01:46,320
programs from garbled circuits

39
00:01:46,320 --> 00:01:49,119
that was an assumption without any

40
00:01:49,119 --> 00:01:52,560
real-world realization

41
00:01:52,560 --> 00:01:55,119
the only way we know to construct these

42
00:01:55,119 --> 00:01:58,159
devices relies on tamper proving a whole

43
00:01:58,159 --> 00:01:59,520
computation

44
00:01:59,520 --> 00:02:01,759
while assuming that these sophisticated

45
00:02:01,759 --> 00:02:04,320
hardware tokens resist side-channel

46
00:02:04,320 --> 00:02:07,119
attacks and reverse engineering

47
00:02:07,119 --> 00:02:10,160
so we wondered if we can build these

48
00:02:10,160 --> 00:02:12,560
memory devices based on minimal and

49
00:02:12,560 --> 00:02:16,480
better understood hardness assumptions

50
00:02:16,480 --> 00:02:18,480
to achieve this goal

51
00:02:18,480 --> 00:02:21,120
we joined forces with top-notch and

52
00:02:21,120 --> 00:02:24,080
brave biologists to find an alternative

53
00:02:24,080 --> 00:02:26,599
technology to build unclonable and

54
00:02:26,599 --> 00:02:29,599
self-destructive memory devices

55
00:02:29,599 --> 00:02:32,800
we do that in a rigorous way laying down

56
00:02:32,800 --> 00:02:35,200
foundational modeling and analysis of

57
00:02:35,200 --> 00:02:37,920
the capabilities and security guarantees

58
00:02:37,920 --> 00:02:40,720
that we are able to achieve

59
00:02:40,720 --> 00:02:43,680
we also introduce novel amplification

60
00:02:43,680 --> 00:02:46,959
techniques so we can use the weak and

61
00:02:46,959 --> 00:02:49,760
simple memory devices we build in

62
00:02:49,760 --> 00:02:51,519
provably secure cryptographic

63
00:02:51,519 --> 00:02:54,160
applications

64
00:02:55,680 --> 00:02:58,640
our request was inspired by recent

65
00:02:58,640 --> 00:03:01,599
advances in biochemistry and engineering

66
00:03:01,599 --> 00:03:04,400
that allowed storing digital data in the

67
00:03:04,400 --> 00:03:06,239
form of dna

68
00:03:06,239 --> 00:03:09,200
so a digital message can be encoded into

69
00:03:09,200 --> 00:03:12,800
a set of nucleotides that is synthesized

70
00:03:12,800 --> 00:03:16,080
into dna material

71
00:03:16,080 --> 00:03:18,239
by the way don't worry about the biology

72
00:03:18,239 --> 00:03:20,800
details here just focus on the big

73
00:03:20,800 --> 00:03:23,840
picture that dna can represent digital

74
00:03:23,840 --> 00:03:27,280
data and given a dna sample we can

75
00:03:27,280 --> 00:03:28,400
retrieve

76
00:03:28,400 --> 00:03:30,879
the original message or the digital data

77
00:03:30,879 --> 00:03:33,840
from that sample

78
00:03:34,560 --> 00:03:35,920
however

79
00:03:35,920 --> 00:03:39,840
dna evolved to be clonable so a sample

80
00:03:39,840 --> 00:03:42,560
of dna can be replicated as many times

81
00:03:42,560 --> 00:03:45,360
as you want meaning that you can read

82
00:03:45,360 --> 00:03:48,080
the stored data as many times as you

83
00:03:48,080 --> 00:03:50,319
want

84
00:03:50,319 --> 00:03:52,560
this led us to consider another

85
00:03:52,560 --> 00:03:54,239
biological polymer

86
00:03:54,239 --> 00:03:56,799
proteins also can be used to store

87
00:03:56,799 --> 00:03:59,840
digital data so in this case the digital

88
00:03:59,840 --> 00:04:02,080
message will be encoded into a sequence

89
00:04:02,080 --> 00:04:04,239
of amino acids which are the basic

90
00:04:04,239 --> 00:04:06,400
building blocks of proteins

91
00:04:06,400 --> 00:04:08,959
and then this sequence is synthesized

92
00:04:08,959 --> 00:04:11,280
into protein material

93
00:04:11,280 --> 00:04:15,439
and here the magic started

94
00:04:15,439 --> 00:04:16,720
first of all

95
00:04:16,720 --> 00:04:19,199
proteins are unclonable

96
00:04:19,199 --> 00:04:22,320
the central dogma of molecule molecular

97
00:04:22,320 --> 00:04:25,759
biology states that once information has

98
00:04:25,759 --> 00:04:28,479
got into a protein it can't get out

99
00:04:28,479 --> 00:04:29,600
again

100
00:04:29,600 --> 00:04:32,639
so given a protein sample we cannot

101
00:04:32,639 --> 00:04:34,880
replicate it or get the genetic

102
00:04:34,880 --> 00:04:38,400
information out of it

103
00:04:38,800 --> 00:04:42,080
this challenge is still standing for 65

104
00:04:42,080 --> 00:04:42,960
years

105
00:04:42,960 --> 00:04:45,360
and even for billions of years of

106
00:04:45,360 --> 00:04:46,720
evolution

107
00:04:46,720 --> 00:04:49,360
to us cryptographers this is a

108
00:04:49,360 --> 00:04:52,400
biochemical one-way function and we know

109
00:04:52,400 --> 00:04:55,040
what to do with hardness assumptions we

110
00:04:55,040 --> 00:04:59,520
turn hard lemons into lemonade

111
00:05:00,320 --> 00:05:02,720
another amazing feature is that

112
00:05:02,720 --> 00:05:04,960
sequencing a protein to retrieve the

113
00:05:04,960 --> 00:05:07,520
digital message is destructive

114
00:05:07,520 --> 00:05:09,919
so you cannot get the protein sample

115
00:05:09,919 --> 00:05:13,120
back after feeding it to the mosfet

116
00:05:13,120 --> 00:05:15,360
instrument or machine

117
00:05:15,360 --> 00:05:18,479
that is designed to read proteins

118
00:05:18,479 --> 00:05:21,360
uh also this machinery provides an

119
00:05:21,360 --> 00:05:23,840
output only if the protein is pure

120
00:05:23,840 --> 00:05:27,120
enough so if you feed a mix of random

121
00:05:27,120 --> 00:05:29,360
proteins

122
00:05:29,360 --> 00:05:30,960
or if you heat this machine with a mix

123
00:05:30,960 --> 00:05:33,600
of random proteins it will output

124
00:05:33,600 --> 00:05:35,919
nothing

125
00:05:37,600 --> 00:05:40,560
based on these observations we propose a

126
00:05:40,560 --> 00:05:42,560
novel construction for consumable

127
00:05:42,560 --> 00:05:44,400
storage tokens

128
00:05:44,400 --> 00:05:47,600
at a high level as before we take a

129
00:05:47,600 --> 00:05:49,840
digital message and transform it into

130
00:05:49,840 --> 00:05:51,600
approaching

131
00:05:51,600 --> 00:05:53,520
then we connect

132
00:05:53,520 --> 00:05:57,199
the target protein with another short

133
00:05:57,199 --> 00:06:00,560
protein sequence called header such that

134
00:06:00,560 --> 00:06:02,720
this header can be recognized by

135
00:06:02,720 --> 00:06:04,800
matching antibodies

136
00:06:04,800 --> 00:06:07,280
so knowing the header description which

137
00:06:07,280 --> 00:06:09,600
can be digital information by the way

138
00:06:09,600 --> 00:06:11,600
allows identifying the matching

139
00:06:11,600 --> 00:06:13,039
antibodies

140
00:06:13,039 --> 00:06:16,160
this header to us represents the secret

141
00:06:16,160 --> 00:06:20,319
key tied to our secret message

142
00:06:20,319 --> 00:06:22,880
that we mix the target protein or the

143
00:06:22,880 --> 00:06:24,880
protein that represents our secret

144
00:06:24,880 --> 00:06:27,520
message with a massive set of random

145
00:06:27,520 --> 00:06:30,080
decoy proteins that are attached to

146
00:06:30,080 --> 00:06:32,160
different random keys

147
00:06:32,160 --> 00:06:34,800
so the vial containing the mix uh where

148
00:06:34,800 --> 00:06:37,039
here in the photo our co-author anna is

149
00:06:37,039 --> 00:06:41,680
holding one is the consumable tucker

150
00:06:41,919 --> 00:06:44,560
now to retrieve the message uh again

151
00:06:44,560 --> 00:06:47,280
remember if you just give the mix

152
00:06:47,280 --> 00:06:49,520
to the mass spec machine

153
00:06:49,520 --> 00:06:52,240
it will not be able to identify the

154
00:06:52,240 --> 00:06:55,360
secret protein or the secret message

155
00:06:55,360 --> 00:06:58,160
this sample must be purified first

156
00:06:58,160 --> 00:07:00,400
to do that we apply the matching

157
00:07:00,400 --> 00:07:03,120
antibodies that the ones that match the

158
00:07:03,120 --> 00:07:06,000
secret header to the vial to pull down

159
00:07:06,000 --> 00:07:08,240
the target protein with high enough

160
00:07:08,240 --> 00:07:09,680
purity

161
00:07:09,680 --> 00:07:12,720
then we cleave the header and then use

162
00:07:12,720 --> 00:07:14,720
the mass spec machinery to read the

163
00:07:14,720 --> 00:07:16,880
amino acid sequence of this target

164
00:07:16,880 --> 00:07:19,759
protein which will be decoded into the

165
00:07:19,759 --> 00:07:22,639
digital message

166
00:07:23,520 --> 00:07:26,479
after months and months of designing the

167
00:07:26,479 --> 00:07:29,520
token we spend more months distilling

168
00:07:29,520 --> 00:07:33,199
the model that best represents biology

169
00:07:33,199 --> 00:07:35,759
our goal was to require the minimum on

170
00:07:35,759 --> 00:07:38,800
the biology side to produce the simplest

171
00:07:38,800 --> 00:07:41,199
possible construction

172
00:07:41,199 --> 00:07:44,319
in particular our consumable token can

173
00:07:44,319 --> 00:07:46,479
store only a small number of short

174
00:07:46,479 --> 00:07:48,960
messages using short keys so here we

175
00:07:48,960 --> 00:07:51,199
need amplification techniques in order

176
00:07:51,199 --> 00:07:52,800
to deal with that

177
00:07:52,800 --> 00:07:55,520
also the only meaningful interaction

178
00:07:55,520 --> 00:07:58,160
with the consumable token is by applying

179
00:07:58,160 --> 00:08:01,280
antibodies so present a key either you

180
00:08:01,280 --> 00:08:03,039
get the message

181
00:08:03,039 --> 00:08:05,039
tied to that key if the key is correct

182
00:08:05,039 --> 00:08:07,360
or you will get nothing

183
00:08:07,360 --> 00:08:10,319
also each retrieval attempt will consume

184
00:08:10,319 --> 00:08:12,800
part of the vial even when you are

185
00:08:12,800 --> 00:08:14,879
applying the matching antibodies these

186
00:08:14,879 --> 00:08:17,599
antibodies will pull down the target

187
00:08:17,599 --> 00:08:20,560
protein with high amount also it will

188
00:08:20,560 --> 00:08:22,479
pull down or consume

189
00:08:22,479 --> 00:08:23,440
parts

190
00:08:23,440 --> 00:08:25,599
of the other proteins in the mix so

191
00:08:25,599 --> 00:08:27,199
there will be a degradation for the

192
00:08:27,199 --> 00:08:29,120
whole mix

193
00:08:29,120 --> 00:08:31,520
um in our construction

194
00:08:31,520 --> 00:08:34,880
we designed the token in a way that

195
00:08:34,880 --> 00:08:37,599
under the non-technology that that is

196
00:08:37,599 --> 00:08:40,240
available now an honest part you will be

197
00:08:40,240 --> 00:08:42,719
able to perform one data retrieval queen

198
00:08:42,719 --> 00:08:44,880
so it can apply one key and get the

199
00:08:44,880 --> 00:08:46,640
corresponding message if that key is

200
00:08:46,640 --> 00:08:47,839
valid

201
00:08:47,839 --> 00:08:49,600
but to account for more powerful

202
00:08:49,600 --> 00:08:52,240
adversaries uh maybe i don't know some

203
00:08:52,240 --> 00:08:54,240
adversaries out there may have more

204
00:08:54,240 --> 00:08:57,360
advanced machines that allow them to use

205
00:08:57,360 --> 00:08:58,800
the sample

206
00:08:58,800 --> 00:09:01,680
to perform multiple uh data retrieval

207
00:09:01,680 --> 00:09:02,720
queries

208
00:09:02,720 --> 00:09:04,000
uh we

209
00:09:04,000 --> 00:09:06,560
say that okay this consumer is talking

210
00:09:06,560 --> 00:09:08,959
an honest can perform one data retrieval

211
00:09:08,959 --> 00:09:12,160
query while an adversary can perform up

212
00:09:12,160 --> 00:09:13,200
to n

213
00:09:13,200 --> 00:09:15,600
data retrieval queries where n is a

214
00:09:15,600 --> 00:09:17,200
small integer

215
00:09:17,200 --> 00:09:19,440
also our consumable token has

216
00:09:19,440 --> 00:09:22,160
non-negligible soundness error gamma so

217
00:09:22,160 --> 00:09:25,279
applying an incorrect key that is close

218
00:09:25,279 --> 00:09:28,560
enough to one or to the correct key may

219
00:09:28,560 --> 00:09:30,800
retrieve or may return

220
00:09:30,800 --> 00:09:32,959
the secret message with probability

221
00:09:32,959 --> 00:09:36,680
gamma at maximum

222
00:09:38,399 --> 00:09:42,240
also we extended our construction uh to

223
00:09:42,240 --> 00:09:44,800
build what we call partially retrievable

224
00:09:44,800 --> 00:09:45,760
memory

225
00:09:45,760 --> 00:09:48,880
uh so a consumable token can store a

226
00:09:48,880 --> 00:09:52,080
vector of v messages using v keys

227
00:09:52,080 --> 00:09:56,000
and even knowing the set of keys uh the

228
00:09:56,000 --> 00:09:58,720
v keys and adversary can retrieve only

229
00:09:58,720 --> 00:10:00,320
up to n messages

230
00:10:00,320 --> 00:10:02,560
out of the v messages stored in the

231
00:10:02,560 --> 00:10:05,560
token

232
00:10:06,240 --> 00:10:07,440
after that

233
00:10:07,440 --> 00:10:09,839
we put our cryptography toolbox on the

234
00:10:09,839 --> 00:10:12,800
table and asked two questions

235
00:10:12,800 --> 00:10:15,839
how to amplify this week a device that

236
00:10:15,839 --> 00:10:18,880
supports constant side storage to obtain

237
00:10:18,880 --> 00:10:21,360
powerful functionalities that can deal

238
00:10:21,360 --> 00:10:24,000
with arbitrary size data

239
00:10:24,000 --> 00:10:26,399
and how to do that in a rigorous

240
00:10:26,399 --> 00:10:29,839
probably secure way

241
00:10:30,560 --> 00:10:33,680
this took us a long journey our first

242
00:10:33,680 --> 00:10:36,160
step was building a mathematical model

243
00:10:36,160 --> 00:10:38,320
for the biological construction

244
00:10:38,320 --> 00:10:40,640
this produced what we call the vector

245
00:10:40,640 --> 00:10:43,600
model in which a vial or a consumable

246
00:10:43,600 --> 00:10:46,079
token is represented as a vector of

247
00:10:46,079 --> 00:10:47,760
protein amounts

248
00:10:47,760 --> 00:10:50,399
we also modeled each of the biochemical

249
00:10:50,399 --> 00:10:53,200
procedures performed in the wet lab as

250
00:10:53,200 --> 00:10:56,560
an algorithm operating on the spectra

251
00:10:56,560 --> 00:10:59,279
then we defined an ideal functionality

252
00:10:59,279 --> 00:11:02,079
for consumable tokens with clean

253
00:11:02,079 --> 00:11:05,279
interfaces and formally showed how it is

254
00:11:05,279 --> 00:11:07,040
realized by the vector-based

255
00:11:07,040 --> 00:11:09,200
construction

256
00:11:09,200 --> 00:11:11,920
then we developed several algorithmic

257
00:11:11,920 --> 00:11:14,320
and cryptographic techniques to amplify

258
00:11:14,320 --> 00:11:16,800
the weak properties of the token and

259
00:11:16,800 --> 00:11:18,959
showed how to use

260
00:11:18,959 --> 00:11:21,040
these tokens in various cryptographic

261
00:11:21,040 --> 00:11:23,680
applications

262
00:11:24,480 --> 00:11:27,120
in this paper we show two of these

263
00:11:27,120 --> 00:11:30,079
applications are namely digital lockers

264
00:11:30,079 --> 00:11:32,720
and one-end time programs

265
00:11:32,720 --> 00:11:35,360
in the interest of time i will discuss

266
00:11:35,360 --> 00:11:37,279
these applications

267
00:11:37,279 --> 00:11:39,760
briefly

268
00:11:40,880 --> 00:11:44,160
a digital locker is simply encrypting a

269
00:11:44,160 --> 00:11:46,640
secret message using a law entropy key

270
00:11:46,640 --> 00:11:49,200
or a human generated password

271
00:11:49,200 --> 00:11:52,480
uh such that um

272
00:11:52,480 --> 00:11:54,800
and we built digital lockers that resist

273
00:11:54,800 --> 00:11:57,519
exhaustive search attacks so

274
00:11:57,519 --> 00:12:00,079
an adversary can try to decrypt the

275
00:12:00,079 --> 00:12:02,720
messages only up to in time so he can

276
00:12:02,720 --> 00:12:07,440
try only up to end password guesses

277
00:12:07,440 --> 00:12:11,680
using our token we were able to do that

278
00:12:11,680 --> 00:12:12,480
and

279
00:12:12,480 --> 00:12:15,519
can construct lockers that are resistant

280
00:12:15,519 --> 00:12:18,160
to exhaustive search attacks

281
00:12:18,160 --> 00:12:21,200
and this application required additional

282
00:12:21,200 --> 00:12:23,279
techniques to amplify the soundness

283
00:12:23,279 --> 00:12:25,519
error to be negligible

284
00:12:25,519 --> 00:12:27,839
these techniques relied on sharing the

285
00:12:27,839 --> 00:12:29,519
message

286
00:12:29,519 --> 00:12:32,240
into new shares and

287
00:12:32,240 --> 00:12:33,440
store each

288
00:12:33,440 --> 00:12:36,240
share in a separate token so now instead

289
00:12:36,240 --> 00:12:39,120
of sending one consumable token uh that

290
00:12:39,120 --> 00:12:42,240
stores uh the uh encrypted or that the

291
00:12:42,240 --> 00:12:44,959
secret message m now we are sending new

292
00:12:44,959 --> 00:12:46,240
tokens

293
00:12:46,240 --> 00:12:49,279
also we had uh or we chained these

294
00:12:49,279 --> 00:12:52,480
tokens together to enforce sequential

295
00:12:52,480 --> 00:12:53,519
operation

296
00:12:53,519 --> 00:12:55,440
the latter is needed to preserve the

297
00:12:55,440 --> 00:12:58,800
number of password guesses to bn despite

298
00:12:58,800 --> 00:13:01,600
sending multiple tokens all of them tied

299
00:13:01,600 --> 00:13:05,480
to the same password

300
00:13:06,639 --> 00:13:09,519
the second application uh one end time

301
00:13:09,519 --> 00:13:12,639
programs um here we have a secret

302
00:13:12,639 --> 00:13:14,560
program or one

303
00:13:14,560 --> 00:13:17,519
that contains some secret data a sender

304
00:13:17,519 --> 00:13:20,480
sends that program to the recipient such

305
00:13:20,480 --> 00:13:22,800
that an honest recipient

306
00:13:22,800 --> 00:13:25,120
will be able to execute the program over

307
00:13:25,120 --> 00:13:26,560
only one input

308
00:13:26,560 --> 00:13:29,200
while a more powerful adversary can

309
00:13:29,200 --> 00:13:31,839
executed over in inputs

310
00:13:31,839 --> 00:13:34,079
as you might realize this is a modified

311
00:13:34,079 --> 00:13:36,560
version of one time programs introduced

312
00:13:36,560 --> 00:13:38,720
by gkr

313
00:13:38,720 --> 00:13:41,600
but it is one that is based on

314
00:13:41,600 --> 00:13:44,560
real-world weak memory devices rather

315
00:13:44,560 --> 00:13:48,760
than just a strong assumption

316
00:13:49,440 --> 00:13:52,959
the core idea of our program or our

317
00:13:52,959 --> 00:13:55,199
construction sorry is to obfuscate a

318
00:13:55,199 --> 00:13:57,120
program containing the intended

319
00:13:57,120 --> 00:13:58,959
functionality f

320
00:13:58,959 --> 00:14:02,720
such that evaluating f over an input x

321
00:14:02,720 --> 00:14:05,360
requires a corresponding secret message

322
00:14:05,360 --> 00:14:06,160
m

323
00:14:06,160 --> 00:14:09,440
so uh the program first will check okay

324
00:14:09,440 --> 00:14:10,959
do you have the secret message m

325
00:14:10,959 --> 00:14:13,600
corresponding to x if that's true it

326
00:14:13,600 --> 00:14:15,839
will output f of x otherwise it will

327
00:14:15,839 --> 00:14:18,399
output nothing

328
00:14:18,399 --> 00:14:19,199
and

329
00:14:19,199 --> 00:14:20,000
to

330
00:14:20,000 --> 00:14:22,639
what we do is that we store the messages

331
00:14:22,639 --> 00:14:24,720
corresponding to the domain of f in a

332
00:14:24,720 --> 00:14:28,079
consumable token

333
00:14:28,800 --> 00:14:31,920
and remember because now uh and uh

334
00:14:31,920 --> 00:14:34,000
actually this depends on having a

335
00:14:34,000 --> 00:14:36,079
consumable token containing uh or

336
00:14:36,079 --> 00:14:38,480
storing several uh secret messages that

337
00:14:38,480 --> 00:14:40,160
again correspond to the domain of the

338
00:14:40,160 --> 00:14:41,279
function

339
00:14:41,279 --> 00:14:44,560
and now the adversary uh can only

340
00:14:44,560 --> 00:14:46,959
retrieve up to end secret messages from

341
00:14:46,959 --> 00:14:49,760
the consumable token and so it can run

342
00:14:49,760 --> 00:14:53,519
this program only up to or over only uh

343
00:14:53,519 --> 00:14:57,959
up to end different inputs

344
00:14:58,160 --> 00:15:01,839
uh we faced a problem here uh

345
00:15:01,839 --> 00:15:03,920
which is related to the weak properties

346
00:15:03,920 --> 00:15:05,760
of the consumable token

347
00:15:05,760 --> 00:15:09,120
uh a consumable token can store only a

348
00:15:09,120 --> 00:15:10,959
small number of messages

349
00:15:10,959 --> 00:15:13,440
denoted as q here

350
00:15:13,440 --> 00:15:16,079
which means that we cannot

351
00:15:16,079 --> 00:15:19,440
deal with functions that have domains or

352
00:15:19,440 --> 00:15:21,839
domain size larger than q

353
00:15:21,839 --> 00:15:24,399
in order to deal with functions with

354
00:15:24,399 --> 00:15:25,760
exponential

355
00:15:25,760 --> 00:15:28,800
domain size we use uh linear error

356
00:15:28,800 --> 00:15:30,240
correcting codes

357
00:15:30,240 --> 00:15:33,519
so instead of sending one token we send

358
00:15:33,519 --> 00:15:37,440
omega tokens and now instead of mapping

359
00:15:37,440 --> 00:15:42,000
x itself to a secret message we first

360
00:15:42,000 --> 00:15:45,120
encode x and take the code word which is

361
00:15:45,120 --> 00:15:46,720
of length omega

362
00:15:46,720 --> 00:15:49,360
each symbol in that code word uh will

363
00:15:49,360 --> 00:15:51,519
tell us which secret message to retrieve

364
00:15:51,519 --> 00:15:55,040
from each consumable token so now in

365
00:15:55,040 --> 00:15:57,519
order to execute the program over input

366
00:15:57,519 --> 00:16:01,040
x we need omega secret messages

367
00:16:01,040 --> 00:16:02,079
from

368
00:16:02,079 --> 00:16:03,600
the

369
00:16:03,600 --> 00:16:06,240
omega tokens sent to the recipient

370
00:16:06,240 --> 00:16:08,639
and now the obfuscated program will

371
00:16:08,639 --> 00:16:11,600
check that is this the uh

372
00:16:11,600 --> 00:16:13,519
set of correct secret messages

373
00:16:13,519 --> 00:16:15,279
corresponding to the code word of the

374
00:16:15,279 --> 00:16:16,240
input

375
00:16:16,240 --> 00:16:18,639
if that's the case it will output f of x

376
00:16:18,639 --> 00:16:21,600
otherwise it will output nothing

377
00:16:21,600 --> 00:16:22,560
and

378
00:16:22,560 --> 00:16:23,920
based on that

379
00:16:23,920 --> 00:16:25,360
we can cover

380
00:16:25,360 --> 00:16:28,399
a domain size of q to the power d plus

381
00:16:28,399 --> 00:16:30,560
one where d is the dimension of the

382
00:16:30,560 --> 00:16:33,279
linear code

383
00:16:33,920 --> 00:16:36,399
we set the code distance in

384
00:16:36,399 --> 00:16:39,519
a way that only invalid code words can

385
00:16:39,519 --> 00:16:42,240
be retrieved so despite sending

386
00:16:42,240 --> 00:16:44,399
omega tokens to the adversary and now

387
00:16:44,399 --> 00:16:46,079
there is more uh

388
00:16:46,079 --> 00:16:48,000
cancer protein material available with

389
00:16:48,000 --> 00:16:51,120
that adversary still by

390
00:16:51,120 --> 00:16:53,600
setting the distance correctly we can

391
00:16:53,600 --> 00:16:55,360
guarantee that it's still the same

392
00:16:55,360 --> 00:16:59,120
guarantee uh only in inputs or only in

393
00:16:59,120 --> 00:17:00,959
code words can be retrieved and the

394
00:17:00,959 --> 00:17:04,400
program can be executed over only up to

395
00:17:04,400 --> 00:17:07,199
n inputs

396
00:17:08,720 --> 00:17:12,160
to conclude uh this work introduced an

397
00:17:12,160 --> 00:17:14,400
innovative real-world construction of

398
00:17:14,400 --> 00:17:16,640
unclonable and self-destructive memory

399
00:17:16,640 --> 00:17:18,319
devices

400
00:17:18,319 --> 00:17:20,319
this was done along with formal

401
00:17:20,319 --> 00:17:23,520
treatment uh and showing provably secure

402
00:17:23,520 --> 00:17:25,760
cryptographic applications

403
00:17:25,760 --> 00:17:30,400
for uh our ongoing and future work uh

404
00:17:30,400 --> 00:17:34,000
the the directions uh are twofold on the

405
00:17:34,000 --> 00:17:36,640
biology side we are working on a sister

406
00:17:36,640 --> 00:17:39,600
paper showing the detailed biological

407
00:17:39,600 --> 00:17:41,679
construction along with empirical

408
00:17:41,679 --> 00:17:42,720
results

409
00:17:42,720 --> 00:17:45,200
and on the cryptography side

410
00:17:45,200 --> 00:17:48,240
we are defining our model uh strength

411
00:17:48,240 --> 00:17:50,480
models strengthening them

412
00:17:50,480 --> 00:17:53,360
and we are developing more cryptographic

413
00:17:53,360 --> 00:17:56,000
applications

414
00:17:57,120 --> 00:17:59,280
thank you so much for listening and

415
00:17:59,280 --> 00:18:04,360
happy to take questions thank you

