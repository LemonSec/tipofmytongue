1
00:00:00,080 --> 00:00:02,240
we're about to start our last session of

2
00:00:02,240 --> 00:00:05,120
the day before the iacr membership

3
00:00:05,120 --> 00:00:07,040
meeting and before we can all go enjoy a

4
00:00:07,040 --> 00:00:09,120
good run session so i'd like to

5
00:00:09,120 --> 00:00:12,240
introduce our first speaker galadon from

6
00:00:12,240 --> 00:00:14,080
weitzman who's going to present joint

7
00:00:14,080 --> 00:00:16,640
work with alessandro kietzer and

8
00:00:16,640 --> 00:00:19,119
elon yogaf on a pcp theorem for

9
00:00:19,119 --> 00:00:22,720
interactive proofs and applications

10
00:00:23,359 --> 00:00:25,840
thank you

11
00:00:26,480 --> 00:00:28,800
see

12
00:00:29,439 --> 00:00:31,519
okay so i'll be talking about a pcp

13
00:00:31,519 --> 00:00:33,040
theorem for interactive proofs and

14
00:00:33,040 --> 00:00:35,440
applications or you can be convinced by

15
00:00:35,440 --> 00:00:37,200
a conversation while barely listening

16
00:00:37,200 --> 00:00:39,520
even to yourself so hopefully by the end

17
00:00:39,520 --> 00:00:41,440
of this talk you'll never have to endure

18
00:00:41,440 --> 00:00:44,800
a boring conversation anymore uh and

19
00:00:44,800 --> 00:00:46,559
this is joint work with uh sandra queza

20
00:00:46,559 --> 00:00:48,480
and elon yogev

21
00:00:48,480 --> 00:00:50,960
so in an np proof system a verifier

22
00:00:50,960 --> 00:00:52,239
wants to know the validity of some

23
00:00:52,239 --> 00:00:55,120
statement an approver sends over uh some

24
00:00:55,120 --> 00:00:56,719
message the verifier reads the entire

25
00:00:56,719 --> 00:00:58,399
message and decides whether it's

26
00:00:58,399 --> 00:01:00,239
convinced or not

27
00:01:00,239 --> 00:01:00,960
and

28
00:01:00,960 --> 00:01:03,120
the pcp theorem tells us that if the

29
00:01:03,120 --> 00:01:05,600
prover encodes its message in a specific

30
00:01:05,600 --> 00:01:07,520
way then the verifier can be convinced

31
00:01:07,520 --> 00:01:09,920
even while reading just a few bits from

32
00:01:09,920 --> 00:01:11,360
the proof

33
00:01:11,360 --> 00:01:12,799
so

34
00:01:12,799 --> 00:01:14,960
an interactive proof is a generalization

35
00:01:14,960 --> 00:01:16,880
of uh an mp proof system where the

36
00:01:16,880 --> 00:01:18,720
verifier and prover have some longer

37
00:01:18,720 --> 00:01:21,439
conversation with multiple messages

38
00:01:21,439 --> 00:01:24,159
and in this paper we ask how would a pcp

39
00:01:24,159 --> 00:01:27,119
theorem look for interactive proofs

40
00:01:27,119 --> 00:01:28,240
so

41
00:01:28,240 --> 00:01:30,960
basically we would get uh we'd encode

42
00:01:30,960 --> 00:01:33,119
each one of the messages in some way and

43
00:01:33,119 --> 00:01:35,520
then have uh you know

44
00:01:35,520 --> 00:01:37,520
local access to each one of the messages

45
00:01:37,520 --> 00:01:39,920
both from the verifier and from the

46
00:01:39,920 --> 00:01:40,880
prover

47
00:01:40,880 --> 00:01:43,280
and this object is called an interactive

48
00:01:43,280 --> 00:01:45,280
oracle proof or an iop and it's the

49
00:01:45,280 --> 00:01:48,399
interactive analog of a pcp

50
00:01:48,399 --> 00:01:49,200
so

51
00:01:49,200 --> 00:01:50,880
our main theorem

52
00:01:50,880 --> 00:01:52,720
says that you can take an interactive

53
00:01:52,720 --> 00:01:55,680
proof and transform it into an iop with

54
00:01:55,680 --> 00:01:57,840
the same number of rounds it's public

55
00:01:57,840 --> 00:02:00,880
coin so the uh verifiers messages are

56
00:02:00,880 --> 00:02:02,240
actually not encoded they're just

57
00:02:02,240 --> 00:02:04,960
uniformly random bits the proof length

58
00:02:04,960 --> 00:02:07,600
is uh polynomial uh following the

59
00:02:07,600 --> 00:02:09,280
interaction

60
00:02:09,280 --> 00:02:11,520
the verifier tosses logarithmic number

61
00:02:11,520 --> 00:02:13,760
of random coins to decide uh where to

62
00:02:13,760 --> 00:02:16,080
query and at the end it queries each

63
00:02:16,080 --> 00:02:19,200
message a constant number of times

64
00:02:19,200 --> 00:02:21,120
previously this was only known for

65
00:02:21,120 --> 00:02:23,280
extreme values of k so it was shown by

66
00:02:23,280 --> 00:02:24,640
joker for

67
00:02:24,640 --> 00:02:27,280
two rounds and by condoning for

68
00:02:27,280 --> 00:02:29,120
polynomial number of rounds i will just

69
00:02:29,120 --> 00:02:31,200
mention that they didn't talk about iops

70
00:02:31,200 --> 00:02:33,200
but the model that they were looking at

71
00:02:33,200 --> 00:02:34,959
is actually equivalent to public coin

72
00:02:34,959 --> 00:02:37,360
iops

73
00:02:37,360 --> 00:02:39,360
uh okay so let's look at some

74
00:02:39,360 --> 00:02:41,920
applications of our theorem

75
00:02:41,920 --> 00:02:44,400
uh our first application is iop to iop

76
00:02:44,400 --> 00:02:46,879
transformations so we get new generic

77
00:02:46,879 --> 00:02:48,400
transformations for iops that were

78
00:02:48,400 --> 00:02:51,040
previously only known for ips

79
00:02:51,040 --> 00:02:53,360
so for example if we want to

80
00:02:53,360 --> 00:02:54,959
reduce the number of rounds of an iops

81
00:02:54,959 --> 00:02:56,800
we have a k round iop

82
00:02:56,800 --> 00:02:59,440
and we want to get a k over 2 round iop

83
00:02:59,440 --> 00:03:01,360
so we can take this iop treat it as an

84
00:03:01,360 --> 00:03:03,920
ip allow the verifier to just read

85
00:03:03,920 --> 00:03:05,840
everything then use a classical

86
00:03:05,840 --> 00:03:07,599
transformation uh

87
00:03:07,599 --> 00:03:10,080
taking a k round ip and transforming it

88
00:03:10,080 --> 00:03:12,959
into a k over 2 round ip then leverage

89
00:03:12,959 --> 00:03:15,200
our main theorem to get it back to k

90
00:03:15,200 --> 00:03:17,280
over 2 round iop

91
00:03:17,280 --> 00:03:19,599
and uh similarly we can get private to

92
00:03:19,599 --> 00:03:21,599
public coin for uh

93
00:03:21,599 --> 00:03:24,000
iops via the goldbuster sipser

94
00:03:24,000 --> 00:03:25,280
transformation

95
00:03:25,280 --> 00:03:26,959
or perfect completeness in the same

96
00:03:26,959 --> 00:03:28,480
manner

97
00:03:28,480 --> 00:03:30,640
our second application is for hardness

98
00:03:30,640 --> 00:03:33,680
of approximation so in a satisfiability

99
00:03:33,680 --> 00:03:35,519
problem you're given a boolean formula

100
00:03:35,519 --> 00:03:37,519
and you're asked whether there exists

101
00:03:37,519 --> 00:03:39,680
some satisfying assignment for the

102
00:03:39,680 --> 00:03:41,040
formula

103
00:03:41,040 --> 00:03:43,440
and the pcp theorem says that

104
00:03:43,440 --> 00:03:45,920
sat is np hard to approximate to within

105
00:03:45,920 --> 00:03:47,680
a constant factor

106
00:03:47,680 --> 00:03:49,040
here we're going to look at a

107
00:03:49,040 --> 00:03:50,560
generalization of sat called case

108
00:03:50,560 --> 00:03:52,000
stochastic set

109
00:03:52,000 --> 00:03:52,799
where

110
00:03:52,799 --> 00:03:54,319
the variables are either chosen

111
00:03:54,319 --> 00:03:56,720
uniformly at random or existentially and

112
00:03:56,720 --> 00:03:58,840
there are k alternations between these

113
00:03:58,840 --> 00:04:02,239
two and the value of such a formula is

114
00:04:02,239 --> 00:04:04,319
the expected fraction of satisfied

115
00:04:04,319 --> 00:04:06,720
clauses when uh the existential

116
00:04:06,720 --> 00:04:08,959
variables are chosen so as to maximize

117
00:04:08,959 --> 00:04:12,080
this value this expected fraction

118
00:04:12,080 --> 00:04:14,560
so we show that for every k

119
00:04:14,560 --> 00:04:16,639
it is ip with k rounds hard to

120
00:04:16,639 --> 00:04:19,358
distinguish whether a k s sat instance

121
00:04:19,358 --> 00:04:22,880
has value one or has value at most one

122
00:04:22,880 --> 00:04:27,280
minus uh one over of k so if you plug in

123
00:04:27,280 --> 00:04:29,360
k equals one you basically get the pcp

124
00:04:29,360 --> 00:04:32,560
theorem from uh from this

125
00:04:32,560 --> 00:04:34,720
and our and this has been we improved

126
00:04:34,720 --> 00:04:36,560
this in subsequent work

127
00:04:36,560 --> 00:04:38,880
this this gap

128
00:04:38,880 --> 00:04:42,000
uh and our last application is a commit

129
00:04:42,000 --> 00:04:43,440
improved snark in the random oracle

130
00:04:43,440 --> 00:04:45,840
model this is not a direct application

131
00:04:45,840 --> 00:04:47,280
of our main theorem but of tools that we

132
00:04:47,280 --> 00:04:49,199
develop along the way so what is a

133
00:04:49,199 --> 00:04:50,960
commit improved snark well we have

134
00:04:50,960 --> 00:04:53,199
approver and a verifier

135
00:04:53,199 --> 00:04:55,680
and along comes some committer that has

136
00:04:55,680 --> 00:04:58,080
a value x1 in mind

137
00:04:58,080 --> 00:05:00,400
and maybe and it sends a

138
00:05:00,400 --> 00:05:03,039
short commitment of x1

139
00:05:03,039 --> 00:05:05,280
and maybe another committer comes along

140
00:05:05,280 --> 00:05:07,280
and another committer they each have

141
00:05:07,280 --> 00:05:08,800
different values

142
00:05:08,800 --> 00:05:10,800
and approver who knows the values that

143
00:05:10,800 --> 00:05:12,639
the committers uh but under the

144
00:05:12,639 --> 00:05:15,039
commitments will send a short proof that

145
00:05:15,039 --> 00:05:18,240
they together belong to some relation

146
00:05:18,240 --> 00:05:19,840
and the verifier will then read these

147
00:05:19,840 --> 00:05:21,919
commitments or read the proof and then

148
00:05:21,919 --> 00:05:23,440
decide whether it's convinced that the

149
00:05:23,440 --> 00:05:25,199
prover is telling the truth about them

150
00:05:25,199 --> 00:05:27,199
belonging to relation

151
00:05:27,199 --> 00:05:29,919
so we show that every relation on

152
00:05:29,919 --> 00:05:31,600
k-tuples that is decidable in

153
00:05:31,600 --> 00:05:33,759
non-deterministic time t has a commit

154
00:05:33,759 --> 00:05:35,680
and proof snark in the random oracle

155
00:05:35,680 --> 00:05:37,039
model with argument size that is

156
00:05:37,039 --> 00:05:39,199
polynomial in the security parameter in

157
00:05:39,199 --> 00:05:42,160
the number of committers and log t

158
00:05:42,160 --> 00:05:44,720
and uh the only assumption we use is the

159
00:05:44,720 --> 00:05:46,000
random oracle model no further

160
00:05:46,000 --> 00:05:48,400
assumptions are required

161
00:05:48,400 --> 00:05:51,039
okay so let's get back to our main

162
00:05:51,039 --> 00:05:54,160
theorem we want to go from an ip all the

163
00:05:54,160 --> 00:05:55,600
way to an iop

164
00:05:55,600 --> 00:05:57,680
we're going to do this in two steps the

165
00:05:57,680 --> 00:05:59,199
first step we're going to get local

166
00:05:59,199 --> 00:06:01,360
access to the verifier messages

167
00:06:01,360 --> 00:06:02,240
so

168
00:06:02,240 --> 00:06:04,160
we only have local access to verify

169
00:06:04,160 --> 00:06:05,919
messages but we're still allowed to read

170
00:06:05,919 --> 00:06:08,000
the prover messages in full

171
00:06:08,000 --> 00:06:09,840
and the second step we're going to also

172
00:06:09,840 --> 00:06:11,759
encode the prover messages and then get

173
00:06:11,759 --> 00:06:12,639
our

174
00:06:12,639 --> 00:06:14,319
full iop

175
00:06:14,319 --> 00:06:18,400
so let's uh look at the first step

176
00:06:19,039 --> 00:06:21,280
so let's assume for now that we have a

177
00:06:21,280 --> 00:06:23,360
one round uh proof

178
00:06:23,360 --> 00:06:25,759
uh that it's also public coin

179
00:06:25,759 --> 00:06:27,680
and let's denote the randomness by r and

180
00:06:27,680 --> 00:06:29,280
assume that we have a soundness error

181
00:06:29,280 --> 00:06:31,600
that's roughly one over r we can get

182
00:06:31,600 --> 00:06:33,440
this easily with uh standard parallel

183
00:06:33,440 --> 00:06:35,840
repetition of interactive proofs

184
00:06:35,840 --> 00:06:38,160
uh so the proof looks as follows the

185
00:06:38,160 --> 00:06:40,240
verifier sends some random string the

186
00:06:40,240 --> 00:06:43,280
prover answers with uh some message a

187
00:06:43,280 --> 00:06:45,199
the verifier

188
00:06:45,199 --> 00:06:46,639
looks at the random string row and the

189
00:06:46,639 --> 00:06:48,240
message a and decide whether to accept

190
00:06:48,240 --> 00:06:50,720
or reject based on them so here we want

191
00:06:50,720 --> 00:06:53,759
to get local access to this string row

192
00:06:53,759 --> 00:06:55,440
we were allowed to read all of them

193
00:06:55,440 --> 00:06:58,479
anything that the prover uh sends

194
00:06:58,479 --> 00:06:59,919
so let's

195
00:06:59,919 --> 00:07:03,199
use a simple idea have the approver send

196
00:07:03,199 --> 00:07:05,360
back the same value that the verifier

197
00:07:05,360 --> 00:07:07,360
sent it to just send back the same

198
00:07:07,360 --> 00:07:08,960
randomness

199
00:07:08,960 --> 00:07:09,840
so

200
00:07:09,840 --> 00:07:12,080
now it sends back the same randomness

201
00:07:12,080 --> 00:07:13,280
but uh

202
00:07:13,280 --> 00:07:14,960
of course we can't really trust the

203
00:07:14,960 --> 00:07:17,520
prover it might send us some

204
00:07:17,520 --> 00:07:20,080
different random string

205
00:07:20,080 --> 00:07:22,160
so we're going to add a some check that

206
00:07:22,160 --> 00:07:23,759
they're equal and this check has to be

207
00:07:23,759 --> 00:07:24,880
local

208
00:07:24,880 --> 00:07:25,919
so

209
00:07:25,919 --> 00:07:28,319
we're going to choose an index

210
00:07:28,319 --> 00:07:30,639
and just check that row and row prime

211
00:07:30,639 --> 00:07:33,680
agree on this index a very simple check

212
00:07:33,680 --> 00:07:35,120
that's it

213
00:07:35,120 --> 00:07:37,599
so let's analyze this protocol

214
00:07:37,599 --> 00:07:39,199
completeness is rather straightforward

215
00:07:39,199 --> 00:07:40,960
so i'm not going to get into it

216
00:07:40,960 --> 00:07:43,440
and let's look at soundness let's fix

217
00:07:43,440 --> 00:07:45,759
some constant delta

218
00:07:45,759 --> 00:07:46,720
uh

219
00:07:46,720 --> 00:07:49,360
okay so if rho and rho prime are delta

220
00:07:49,360 --> 00:07:50,800
far apart

221
00:07:50,800 --> 00:07:52,800
then we reject with probability at least

222
00:07:52,800 --> 00:07:54,160
delta because

223
00:07:54,160 --> 00:07:56,639
as long as we hit an index in which row

224
00:07:56,639 --> 00:07:58,400
and row prime disagree

225
00:07:58,400 --> 00:08:01,039
uh we the verifier is going to reject

226
00:08:01,039 --> 00:08:04,319
and this is good for us constant uh

227
00:08:04,319 --> 00:08:06,400
soundness is good for us

228
00:08:06,400 --> 00:08:08,479
so what about if they're close if

229
00:08:08,479 --> 00:08:10,479
rounder prime or delta close we don't

230
00:08:10,479 --> 00:08:12,720
have anything to fix this

231
00:08:12,720 --> 00:08:14,800
so let's just hope that there are not

232
00:08:14,800 --> 00:08:15,599
many

233
00:08:15,599 --> 00:08:18,319
such uh rows that are close to row prime

234
00:08:18,319 --> 00:08:20,560
for which the prover has an

235
00:08:20,560 --> 00:08:23,440
accepting strategy

236
00:08:23,440 --> 00:08:26,080
so how many row primes are there for

237
00:08:26,080 --> 00:08:27,599
which the approver has an accepting

238
00:08:27,599 --> 00:08:29,840
strategy well there's exactly beta times

239
00:08:29,840 --> 00:08:32,719
two the r beta is the soundness error

240
00:08:32,719 --> 00:08:34,799
so it looks like this

241
00:08:34,799 --> 00:08:35,679
and

242
00:08:35,679 --> 00:08:37,039
let's look at

243
00:08:37,039 --> 00:08:39,599
all the bad rows the bad choices of row

244
00:08:39,599 --> 00:08:41,919
are the ones that are close to such a

245
00:08:41,919 --> 00:08:43,839
row prime

246
00:08:43,839 --> 00:08:46,640
which means that they are within some

247
00:08:46,640 --> 00:08:50,080
hamming ball of radius r times delta

248
00:08:50,080 --> 00:08:52,640
and this ball has size that is 2 to the

249
00:08:52,640 --> 00:08:56,160
h delta times r h of delta is the the

250
00:08:56,160 --> 00:08:58,240
entropy function just uh think of some

251
00:08:58,240 --> 00:09:00,240
small constant

252
00:09:00,240 --> 00:09:02,560
uh and the problem here is that

253
00:09:02,560 --> 00:09:03,519
this

254
00:09:03,519 --> 00:09:05,680
we have we have to take this uh hamming

255
00:09:05,680 --> 00:09:08,880
ball around each one of the bad row

256
00:09:08,880 --> 00:09:11,040
primes and this easily covers the entire

257
00:09:11,040 --> 00:09:13,439
domain

258
00:09:13,519 --> 00:09:16,640
so unfortunately we can't just use row

259
00:09:16,640 --> 00:09:18,399
prime

260
00:09:18,399 --> 00:09:21,040
so what do we do

261
00:09:21,600 --> 00:09:22,640
well

262
00:09:22,640 --> 00:09:25,440
uh our main observation is that if rho

263
00:09:25,440 --> 00:09:28,160
and rho prime are close then row prime

264
00:09:28,160 --> 00:09:30,640
has to have high entropy this is because

265
00:09:30,640 --> 00:09:32,880
rho is a uniformly random string and row

266
00:09:32,880 --> 00:09:34,399
prime agrees with it on most of its

267
00:09:34,399 --> 00:09:36,640
locations so it must be borrowing most

268
00:09:36,640 --> 00:09:39,360
of the entropy that row had and the idea

269
00:09:39,360 --> 00:09:42,800
is to extract randomness from row prime

270
00:09:42,800 --> 00:09:45,120
because we didn't really need to have

271
00:09:45,120 --> 00:09:47,040
row as a randomness we just needed some

272
00:09:47,040 --> 00:09:48,800
random string

273
00:09:48,800 --> 00:09:51,120
to play as the verifier's randomness and

274
00:09:51,120 --> 00:09:53,600
when i say extract i mean uh

275
00:09:53,600 --> 00:09:55,600
using an extractor which is a function

276
00:09:55,600 --> 00:09:57,680
that receives a high entropy source and

277
00:09:57,680 --> 00:10:00,959
outputs an almost uniform uh string

278
00:10:00,959 --> 00:10:02,640
so let's do that

279
00:10:02,640 --> 00:10:05,120
now we extract randomness outside of row

280
00:10:05,120 --> 00:10:07,519
prime get some row star and use that

281
00:10:07,519 --> 00:10:10,640
instead and this protocol would work

282
00:10:10,640 --> 00:10:12,240
assuming a small

283
00:10:12,240 --> 00:10:13,360
extraction error which i'm going to

284
00:10:13,360 --> 00:10:15,600
ignore for this talk

285
00:10:15,600 --> 00:10:16,880
but

286
00:10:16,880 --> 00:10:18,640
unfortunately there are no deterministic

287
00:10:18,640 --> 00:10:20,800
extractors so we like this these kinds

288
00:10:20,800 --> 00:10:22,560
of extractors don't exist we actually

289
00:10:22,560 --> 00:10:25,680
need to have some random seed as well

290
00:10:25,680 --> 00:10:27,279
and uh the prover needs to know this

291
00:10:27,279 --> 00:10:29,600
seed in order to answer for the correct

292
00:10:29,600 --> 00:10:31,360
rose star

293
00:10:31,360 --> 00:10:33,680
and we're going to use a very good

294
00:10:33,680 --> 00:10:36,320
extractor that has a seed length

295
00:10:36,320 --> 00:10:38,880
something like log one over beta and

296
00:10:38,880 --> 00:10:40,399
also small error which again i'm going

297
00:10:40,399 --> 00:10:43,200
to keep ignoring

298
00:10:43,200 --> 00:10:46,480
so great this protocol works but

299
00:10:46,480 --> 00:10:48,399
we're back to the same problem we had

300
00:10:48,399 --> 00:10:50,880
before like we're reading a few bits

301
00:10:50,880 --> 00:10:53,279
from rho but now we have to read all of

302
00:10:53,279 --> 00:10:54,079
s

303
00:10:54,079 --> 00:10:56,160
and the point is that s is much much

304
00:10:56,160 --> 00:10:58,959
shorter than rho used to be

305
00:10:58,959 --> 00:11:01,120
so let's uh

306
00:11:01,120 --> 00:11:02,720
take the same strategy that we did

307
00:11:02,720 --> 00:11:03,839
before

308
00:11:03,839 --> 00:11:06,640
and try it again

309
00:11:06,640 --> 00:11:07,680
so

310
00:11:07,680 --> 00:11:09,760
now the prover is returning it's

311
00:11:09,760 --> 00:11:12,079
supposed to return the same uh the same

312
00:11:12,079 --> 00:11:14,880
uh seed and now we call it s prime and

313
00:11:14,880 --> 00:11:16,880
we're choosing one index to check

314
00:11:16,880 --> 00:11:18,720
whether s and s prime agree on this

315
00:11:18,720 --> 00:11:22,320
index just like we did before with rho

316
00:11:22,320 --> 00:11:24,720
and let's analyze this so if

317
00:11:24,720 --> 00:11:26,320
and uh let's uh

318
00:11:26,320 --> 00:11:28,000
again fix a constant delta and assume

319
00:11:28,000 --> 00:11:29,839
that rho prime has high entropy we've

320
00:11:29,839 --> 00:11:31,200
already argued that if it doesn't have

321
00:11:31,200 --> 00:11:33,120
high entropy then we reject with

322
00:11:33,120 --> 00:11:34,720
constant probability

323
00:11:34,720 --> 00:11:37,040
so if s and s prime

324
00:11:37,040 --> 00:11:38,160
are far

325
00:11:38,160 --> 00:11:40,000
then of course

326
00:11:40,000 --> 00:11:42,560
we reject with high probability

327
00:11:42,560 --> 00:11:44,720
uh and if they're close let's have the

328
00:11:44,720 --> 00:11:47,760
same analysis that we did before

329
00:11:47,760 --> 00:11:50,639
so now the bad choices of s prime are

330
00:11:50,639 --> 00:11:52,639
those for which after applying the

331
00:11:52,639 --> 00:11:53,920
extractor

332
00:11:53,920 --> 00:11:56,000
the approver has some strategy and this

333
00:11:56,000 --> 00:11:56,639
is

334
00:11:56,639 --> 00:11:59,279
the amount of such bad s primes is

335
00:11:59,279 --> 00:12:01,440
roughly the same as in the original

336
00:12:01,440 --> 00:12:03,600
protocol except for this extractor error

337
00:12:03,600 --> 00:12:06,320
that i keep ignoring

338
00:12:06,320 --> 00:12:08,320
and let's look at the new protocol so

339
00:12:08,320 --> 00:12:11,680
bad choice of seed is one which is close

340
00:12:11,680 --> 00:12:13,920
to such a uh

341
00:12:13,920 --> 00:12:15,680
bad s prime

342
00:12:15,680 --> 00:12:17,839
and now the hamming ball has radius that

343
00:12:17,839 --> 00:12:20,639
is something like log one over beta

344
00:12:20,639 --> 00:12:22,000
times delta

345
00:12:22,000 --> 00:12:25,200
which is much smaller so it comes out uh

346
00:12:25,200 --> 00:12:26,000
the

347
00:12:26,000 --> 00:12:28,079
number of uh strings around it comes out

348
00:12:28,079 --> 00:12:31,120
to something like one over

349
00:12:31,120 --> 00:12:33,440
square root beta as long as uh delta is

350
00:12:33,440 --> 00:12:35,040
some small enough constant just to kill

351
00:12:35,040 --> 00:12:36,079
this uh

352
00:12:36,079 --> 00:12:37,600
o of uh

353
00:12:37,600 --> 00:12:39,200
log one over beta

354
00:12:39,200 --> 00:12:42,480
and so now the ball is very small

355
00:12:42,480 --> 00:12:45,440
and if we take all of the bad s's uh all

356
00:12:45,440 --> 00:12:47,519
the bad sorry s primes

357
00:12:47,519 --> 00:12:49,680
take the balls around each one of them

358
00:12:49,680 --> 00:12:52,160
we get that this covers at most square

359
00:12:52,160 --> 00:12:54,079
root beta of the domain which is good

360
00:12:54,079 --> 00:12:55,600
for us because beta with some constant

361
00:12:55,600 --> 00:12:59,360
squared beta is some other constant

362
00:12:59,519 --> 00:13:00,880
okay

363
00:13:00,880 --> 00:13:03,040
great so we've managed this for a

364
00:13:03,040 --> 00:13:05,279
constant number of rounds

365
00:13:05,279 --> 00:13:08,320
and uh for for one round

366
00:13:08,320 --> 00:13:10,720
and uh i claim that it works for any

367
00:13:10,720 --> 00:13:12,639
interactive proof so i have to extend it

368
00:13:12,639 --> 00:13:14,399
to multiple rounds

369
00:13:14,399 --> 00:13:16,000
and we just do this by applying the

370
00:13:16,000 --> 00:13:17,839
transformation again and again

371
00:13:17,839 --> 00:13:20,160
separately for each round

372
00:13:20,160 --> 00:13:22,639
it's exactly the same except that we use

373
00:13:22,639 --> 00:13:24,240
round by round soundness in the analysis

374
00:13:24,240 --> 00:13:27,040
rather than standard soundness

375
00:13:27,040 --> 00:13:28,000
okay

376
00:13:28,000 --> 00:13:30,240
so again we wanted to go from ip to an

377
00:13:30,240 --> 00:13:32,240
iop and we went through this

378
00:13:32,240 --> 00:13:36,079
intermediate step of uh

379
00:13:36,079 --> 00:13:37,839
getting local access to the verifier

380
00:13:37,839 --> 00:13:41,680
messages but still reading the entire

381
00:13:41,680 --> 00:13:44,480
message that the prover sends

382
00:13:44,480 --> 00:13:45,920
and now we're going to do the next step

383
00:13:45,920 --> 00:13:48,240
we have this intermediate object and

384
00:13:48,240 --> 00:13:49,360
we're going to turn it into a

385
00:13:49,360 --> 00:13:52,480
full-fledged iop

386
00:13:52,959 --> 00:13:55,760
so to do so we introduce a new object

387
00:13:55,760 --> 00:13:57,839
called index dakota pcps

388
00:13:57,839 --> 00:13:59,920
an index the codal pcp has four

389
00:13:59,920 --> 00:14:01,199
algorithms

390
00:14:01,199 --> 00:14:03,839
an indexer approver a verifier and a

391
00:14:03,839 --> 00:14:06,240
decoder and it works as follows we have

392
00:14:06,240 --> 00:14:08,240
the prover in the verifier

393
00:14:08,240 --> 00:14:11,279
and along comes some indexer who has a

394
00:14:11,279 --> 00:14:13,199
value x1 in mind

395
00:14:13,199 --> 00:14:16,240
and it sends an encoding of x1

396
00:14:16,240 --> 00:14:17,760
and then on comes maybe another one

397
00:14:17,760 --> 00:14:19,440
sends in a coding of

398
00:14:19,440 --> 00:14:20,800
some x2

399
00:14:20,800 --> 00:14:22,480
and let's say another one

400
00:14:22,480 --> 00:14:25,040
approver who knows these values under

401
00:14:25,040 --> 00:14:27,360
the encodings x1 to x3

402
00:14:27,360 --> 00:14:29,120
will send a proof that they all belong

403
00:14:29,120 --> 00:14:30,880
to some relation

404
00:14:30,880 --> 00:14:32,880
the verifier might toss some coins and

405
00:14:32,880 --> 00:14:34,399
then

406
00:14:34,399 --> 00:14:36,079
reads a few symbols from each one of the

407
00:14:36,079 --> 00:14:37,920
proofs and decides whether to accept or

408
00:14:37,920 --> 00:14:40,000
reject the approver's claim that they

409
00:14:40,000 --> 00:14:41,839
that uh the values underneath the

410
00:14:41,839 --> 00:14:44,399
encodings belong to this relation

411
00:14:44,399 --> 00:14:48,000
so what do we require from this object

412
00:14:48,000 --> 00:14:50,320
we require completeness so if everyone

413
00:14:50,320 --> 00:14:51,920
is telling the truth everyone is uh

414
00:14:51,920 --> 00:14:54,079
acting honestly then the verifier should

415
00:14:54,079 --> 00:14:55,360
always accept

416
00:14:55,360 --> 00:14:57,199
and on the other hand

417
00:14:57,199 --> 00:14:59,920
if uh the verifier accepts then there

418
00:14:59,920 --> 00:15:01,600
should be something interesting going on

419
00:15:01,600 --> 00:15:03,360
underneath these encodings

420
00:15:03,360 --> 00:15:04,480
uh

421
00:15:04,480 --> 00:15:06,240
formally we say that if the verifier

422
00:15:06,240 --> 00:15:07,920
accepts the high probability

423
00:15:07,920 --> 00:15:09,199
then we can

424
00:15:09,199 --> 00:15:11,199
individually decode each one of the

425
00:15:11,199 --> 00:15:14,000
messages sent by the indexers so that

426
00:15:14,000 --> 00:15:16,320
they belong to some relation to the

427
00:15:16,320 --> 00:15:18,320
relation sorry

428
00:15:18,320 --> 00:15:20,560
so if the relation is non-trivial this

429
00:15:20,560 --> 00:15:23,120
means that uh there has to be something

430
00:15:23,120 --> 00:15:24,639
interesting going on underneath the

431
00:15:24,639 --> 00:15:27,279
encodings

432
00:15:27,279 --> 00:15:29,120
so we show

433
00:15:29,120 --> 00:15:33,120
that any relation r on k tuples that is

434
00:15:33,120 --> 00:15:35,920
uh decidable a non-deterministic time t

435
00:15:35,920 --> 00:15:38,959
has an index decodable pcp where the

436
00:15:38,959 --> 00:15:41,680
overhead uh of the index are encoding is

437
00:15:41,680 --> 00:15:44,320
linear the proof length is poly t we

438
00:15:44,320 --> 00:15:46,959
have a binary alphabet

439
00:15:46,959 --> 00:15:49,279
and the the very far makes

440
00:15:49,279 --> 00:15:51,120
a constant number of queries to each one

441
00:15:51,120 --> 00:15:53,199
of these oracles

442
00:15:53,199 --> 00:15:55,040
and the codability bound the bound over

443
00:15:55,040 --> 00:15:57,279
which if the verifier accepts then

444
00:15:57,279 --> 00:16:00,800
decoding these messages out of the

445
00:16:00,800 --> 00:16:05,360
encodings as possible is some constant

446
00:16:05,360 --> 00:16:06,399
so

447
00:16:06,399 --> 00:16:08,639
now we have how do we use this we have

448
00:16:08,639 --> 00:16:10,079
this intermediate object where the

449
00:16:10,079 --> 00:16:12,880
verifier reads a few bits from its own

450
00:16:12,880 --> 00:16:15,360
messages but still reads the whole uh

451
00:16:15,360 --> 00:16:17,120
prover messages

452
00:16:17,120 --> 00:16:18,560
and uh

453
00:16:18,560 --> 00:16:19,440
we'll

454
00:16:19,440 --> 00:16:22,079
what we'll do is just encode

455
00:16:22,079 --> 00:16:24,880
each one of the provers messages

456
00:16:24,880 --> 00:16:27,120
with the indexer and finally send a

457
00:16:27,120 --> 00:16:29,920
proof that had the verifier read the

458
00:16:29,920 --> 00:16:32,000
messages underneath the encoding then it

459
00:16:32,000 --> 00:16:33,600
would have accepted

460
00:16:33,600 --> 00:16:35,040
and the verifier checks this which

461
00:16:35,040 --> 00:16:37,519
requires reading a few bits from each

462
00:16:37,519 --> 00:16:40,240
one of these uh messages

463
00:16:40,240 --> 00:16:42,000
and i'm not going to i'm going to get

464
00:16:42,000 --> 00:16:44,399
into the proof itself right now

465
00:16:44,399 --> 00:16:45,279
but

466
00:16:45,279 --> 00:16:47,600
at a very high level if malicious

467
00:16:47,600 --> 00:16:49,759
approver were to be able to convince the

468
00:16:49,759 --> 00:16:52,160
verifier with high probability then

469
00:16:52,160 --> 00:16:54,160
because of the decodability of the index

470
00:16:54,160 --> 00:16:55,920
decodable pcp

471
00:16:55,920 --> 00:16:56,800
uh

472
00:16:56,800 --> 00:16:58,639
we had we know that there have to be

473
00:16:58,639 --> 00:17:02,560
some messages underlying these uh

474
00:17:02,560 --> 00:17:04,880
provers proofs

475
00:17:04,880 --> 00:17:06,400
that actually convince the verifier and

476
00:17:06,400 --> 00:17:08,559
we can use that to attack the original

477
00:17:08,559 --> 00:17:11,119
uh proof

478
00:17:11,119 --> 00:17:12,640
so

479
00:17:12,640 --> 00:17:15,039
now uh we wanted to go from an ipv to an

480
00:17:15,039 --> 00:17:17,520
iop we did this in two steps

481
00:17:17,520 --> 00:17:20,480
first of all we got in uh local access

482
00:17:20,480 --> 00:17:22,400
just to the verifier messages then we

483
00:17:22,400 --> 00:17:23,760
added

484
00:17:23,760 --> 00:17:25,439
the ability to have local access to the

485
00:17:25,439 --> 00:17:27,119
prover messages

486
00:17:27,119 --> 00:17:28,640
and

487
00:17:28,640 --> 00:17:30,160
i'll just leave you with one open

488
00:17:30,160 --> 00:17:32,960
problem so in this work we show that how

489
00:17:32,960 --> 00:17:34,240
to get

490
00:17:34,240 --> 00:17:36,960
transform a k round ip into a k round

491
00:17:36,960 --> 00:17:39,440
iop with o of k queries because we had a

492
00:17:39,440 --> 00:17:41,360
constant number of queries to each one

493
00:17:41,360 --> 00:17:42,559
of the rounds

494
00:17:42,559 --> 00:17:44,559
subsequently we've been able to lower

495
00:17:44,559 --> 00:17:47,200
the number of queries to k over log n

496
00:17:47,200 --> 00:17:49,360
uh with a lower bound of constant of

497
00:17:49,360 --> 00:17:50,559
course

498
00:17:50,559 --> 00:17:51,520
and

499
00:17:51,520 --> 00:17:53,440
it's still open whether we can get from

500
00:17:53,440 --> 00:17:57,440
a k-round ip to a k-round iop with a

501
00:17:57,440 --> 00:18:00,240
constant number of queries overall

502
00:18:00,240 --> 00:18:02,240
and that's it i'll be happy to answer

503
00:18:02,240 --> 00:18:05,280
any questions if you have any

504
00:18:10,480 --> 00:18:14,440
any questions from the audience

505
00:18:17,360 --> 00:18:20,559
do we have any questions

506
00:18:20,960 --> 00:18:22,640
okay so i'm curious about the

507
00:18:22,640 --> 00:18:24,160
application to

508
00:18:24,160 --> 00:18:26,559
commit improves knox you mentioned the

509
00:18:26,559 --> 00:18:28,400
parameters could you elaborate a little

510
00:18:28,400 --> 00:18:31,520
bit on how those parameters compare with

511
00:18:31,520 --> 00:18:34,160
uh other commit improved snarks

512
00:18:34,160 --> 00:18:36,240
uh well other commit improved snarks are

513
00:18:36,240 --> 00:18:38,160
not in the random oracle model so

514
00:18:38,160 --> 00:18:40,320
they're not as good as committing proof

515
00:18:40,320 --> 00:18:42,260
snarks from

516
00:18:42,260 --> 00:18:43,600
[Music]

517
00:18:43,600 --> 00:18:46,559
specific assumptions

518
00:18:46,559 --> 00:18:49,440
but we use only the random oracle model

519
00:18:49,440 --> 00:18:50,880
okay thank you

520
00:18:50,880 --> 00:18:54,919
so let's thank the speaker again

521
00:19:00,799 --> 00:19:02,879
you

