1
00:00:00,000 --> 00:00:02,660
oh welcome so please

2
00:00:02,660 --> 00:00:05,720
[Music]

3
00:00:14,559 --> 00:00:16,800
thank you for the invitation i was told

4
00:00:16,800 --> 00:00:18,720
that this was in norwegian so i'm going

5
00:00:18,720 --> 00:00:20,560
to resume in norwegian

6
00:00:20,560 --> 00:00:21,760
i'm just kidding

7
00:00:21,760 --> 00:00:23,199
uh

8
00:00:23,199 --> 00:00:24,800
thank you for the invitation to this

9
00:00:24,800 --> 00:00:26,720
conference this is a conference that

10
00:00:26,720 --> 00:00:29,039
gathers people from all over the world

11
00:00:29,039 --> 00:00:30,560
and we are delighted that this yes

12
00:00:30,560 --> 00:00:32,000
conference is hosted here in the

13
00:00:32,000 --> 00:00:34,239
beautiful city of trondheim in the heart

14
00:00:34,239 --> 00:00:36,800
of norway

15
00:00:36,800 --> 00:00:38,879
norway has been active in cryptologic

16
00:00:38,879 --> 00:00:41,360
research since world war ii

17
00:00:41,360 --> 00:00:42,879
this was of course secret until the

18
00:00:42,879 --> 00:00:45,360
1980s

19
00:00:45,360 --> 00:00:46,879
but the research has resulted in

20
00:00:46,879 --> 00:00:49,120
national crypto industry

21
00:00:49,120 --> 00:00:51,680
since 1955 that remains active still

22
00:00:51,680 --> 00:00:53,520
today

23
00:00:53,520 --> 00:00:55,280
cryptologic research for government use

24
00:00:55,280 --> 00:00:56,559
has been the responsibility of the

25
00:00:56,559 --> 00:00:58,960
norwegian defense security services

26
00:00:58,960 --> 00:01:01,600
since 1965.

27
00:01:01,600 --> 00:01:03,600
today it's the responsibility of the

28
00:01:03,600 --> 00:01:05,600
norwegian national authority security

29
00:01:05,600 --> 00:01:07,920
authority under the ministry of justice

30
00:01:07,920 --> 00:01:09,920
and public security

31
00:01:09,920 --> 00:01:11,920
and several researchers from this

32
00:01:11,920 --> 00:01:15,520
authority are here today

33
00:01:15,520 --> 00:01:17,200
cryptologic research remains an

34
00:01:17,200 --> 00:01:18,880
important part of norwegian security

35
00:01:18,880 --> 00:01:21,040
policy as described

36
00:01:21,040 --> 00:01:23,680
in the norwegian crypto policy jointly

37
00:01:23,680 --> 00:01:25,680
published by the norwegian ministry of

38
00:01:25,680 --> 00:01:27,360
defense and the norwegian ministry of

39
00:01:27,360 --> 00:01:29,360
justice and public security

40
00:01:29,360 --> 00:01:31,920
in 2019

41
00:01:31,920 --> 00:01:34,479
mathematical knowledge is as we all know

42
00:01:34,479 --> 00:01:35,840
required to construct secure

43
00:01:35,840 --> 00:01:37,600
cryptosystems

44
00:01:37,600 --> 00:01:40,880
in the 1960s the lack of mathematicians

45
00:01:40,880 --> 00:01:42,320
in the norwegian defense led to

46
00:01:42,320 --> 00:01:45,840
cooperation between selected professors

47
00:01:45,840 --> 00:01:49,200
researchers and the academic community

48
00:01:49,200 --> 00:01:51,520
this was very successful and has been a

49
00:01:51,520 --> 00:01:53,680
fruitful and continuous cooperation ever

50
00:01:53,680 --> 00:01:55,840
since

51
00:01:55,840 --> 00:01:58,560
professor ernst says that selma was a

52
00:01:58,560 --> 00:02:00,560
key figure in establishing

53
00:02:00,560 --> 00:02:02,079
this cooperation

54
00:02:02,079 --> 00:02:04,640
nationally he is probably best known

55
00:02:04,640 --> 00:02:06,399
for the algorithm behind the norwegian

56
00:02:06,399 --> 00:02:08,639
birth numbers

57
00:02:08,639 --> 00:02:10,479
in addition his being a significant

58
00:02:10,479 --> 00:02:13,760
contributor to the research behind

59
00:02:13,760 --> 00:02:15,760
constructions of crypto systems he

60
00:02:15,760 --> 00:02:17,840
established several research groups

61
00:02:17,840 --> 00:02:20,840
between norwegian defense and academic

62
00:02:20,840 --> 00:02:23,360
communities very little about selma's

63
00:02:23,360 --> 00:02:26,080
work was probably publicly known until

64
00:02:26,080 --> 00:02:27,920
the first eurocrypt was held in norway

65
00:02:27,920 --> 00:02:30,160
in 1993.

66
00:02:30,160 --> 00:02:32,480
back then he gave his speech

67
00:02:32,480 --> 00:02:33,760
or lecture

68
00:02:33,760 --> 00:02:35,760
named from the memoirs of a norwegian

69
00:02:35,760 --> 00:02:37,680
cryptologist

70
00:02:37,680 --> 00:02:39,760
this lecture created a lot of interest

71
00:02:39,760 --> 00:02:42,160
because at this time this kind of work

72
00:02:42,160 --> 00:02:46,319
was probably publicly not very known

73
00:02:46,319 --> 00:02:47,760
today we have several research

74
00:02:47,760 --> 00:02:50,400
communities within cryptology

75
00:02:50,400 --> 00:02:52,080
and the norwegian university of science

76
00:02:52,080 --> 00:02:54,480
and technologies efforts

77
00:02:54,480 --> 00:02:56,400
so for organizing europe is highly

78
00:02:56,400 --> 00:02:58,239
appreciated

79
00:02:58,239 --> 00:03:00,000
we believe it is an important part of

80
00:03:00,000 --> 00:03:01,760
the international cooperation between

81
00:03:01,760 --> 00:03:04,560
authorities industry and the academic

82
00:03:04,560 --> 00:03:06,959
community

83
00:03:06,959 --> 00:03:08,720
good and widespread cryptographic

84
00:03:08,720 --> 00:03:10,720
standards are required for successful

85
00:03:10,720 --> 00:03:12,000
commercial

86
00:03:12,000 --> 00:03:15,840
government and military applications

87
00:03:16,000 --> 00:03:17,840
the standardization has the added

88
00:03:17,840 --> 00:03:19,920
benefit of encouraging cryptologic

89
00:03:19,920 --> 00:03:21,840
research increasing the trust and

90
00:03:21,840 --> 00:03:25,040
robustness in the standards

91
00:03:25,040 --> 00:03:26,640
the rapid introduction on the

92
00:03:26,640 --> 00:03:28,560
introduction of new technologies

93
00:03:28,560 --> 00:03:31,120
requires both evaluating and updating

94
00:03:31,120 --> 00:03:32,959
current cryptographic

95
00:03:32,959 --> 00:03:35,040
standards as well as researching and

96
00:03:35,040 --> 00:03:37,760
developing new areas and applications of

97
00:03:37,760 --> 00:03:39,599
cryptology

98
00:03:39,599 --> 00:03:41,280
this is obviously evident by the number

99
00:03:41,280 --> 00:03:43,440
of standardization activities ongoing

100
00:03:43,440 --> 00:03:45,519
today

101
00:03:45,519 --> 00:03:48,400
in the advent of any disruptive

102
00:03:48,400 --> 00:03:50,239
technology breakthrough

103
00:03:50,239 --> 00:03:51,840
it is necessary to have active

104
00:03:51,840 --> 00:03:54,159
cryptology research communities within

105
00:03:54,159 --> 00:03:56,799
several areas of expertise

106
00:03:56,799 --> 00:03:58,480
all of this requires extensive

107
00:03:58,480 --> 00:04:00,319
international cooperation and meeting

108
00:04:00,319 --> 00:04:03,040
places like eurocrypt

109
00:04:03,040 --> 00:04:05,200
i am assured that today will further

110
00:04:05,200 --> 00:04:06,879
help to share and build important

111
00:04:06,879 --> 00:04:09,920
knowledge and collaboration

112
00:04:09,920 --> 00:04:11,840
finally i would take this opportunity to

113
00:04:11,840 --> 00:04:13,519
thank the international association of

114
00:04:13,519 --> 00:04:15,680
cryptologic research

115
00:04:15,680 --> 00:04:17,199
the norwegian university of science and

116
00:04:17,199 --> 00:04:18,720
technology

117
00:04:18,720 --> 00:04:20,798
for hosting this conference and all

118
00:04:20,798 --> 00:04:22,479
other parts involved

119
00:04:22,479 --> 00:04:23,759
i hope that you will enjoy the

120
00:04:23,759 --> 00:04:26,080
conference and you stay here in return

121
00:04:26,080 --> 00:04:29,720
time i wish you good luck and thank you

122
00:04:29,720 --> 00:04:32,869
[Applause]

123
00:04:44,160 --> 00:04:49,120
okay so i have a few uh things to say um

124
00:04:50,240 --> 00:04:52,240
thank you very much state secretary for

125
00:04:52,240 --> 00:04:53,120
that

126
00:04:53,120 --> 00:04:55,759
very interesting uh

127
00:04:55,759 --> 00:04:58,320
and um

128
00:04:58,320 --> 00:05:00,320
first thing i would like to say is that

129
00:05:00,320 --> 00:05:02,560
uh

130
00:05:03,199 --> 00:05:06,240
it's really great to have everybody

131
00:05:06,240 --> 00:05:10,080
here in person and uh

132
00:05:10,080 --> 00:05:12,720
such a large conference um

133
00:05:12,720 --> 00:05:15,039
but i would like to start by um

134
00:05:15,039 --> 00:05:17,680
reminding you that we're under the

135
00:05:17,680 --> 00:05:20,880
shadow of war in in in europe

136
00:05:20,880 --> 00:05:23,199
uh and remind you of the statement from

137
00:05:23,199 --> 00:05:24,639
the iacr

138
00:05:24,639 --> 00:05:27,039
uh condemning the russian war in ukraine

139
00:05:27,039 --> 00:05:29,600
uh so i'll just read the uh the

140
00:05:29,600 --> 00:05:31,759
statement which you can find on the iacr

141
00:05:31,759 --> 00:05:34,880
webpage that the iicr strongly condemns

142
00:05:34,880 --> 00:05:36,639
the unprovoked and unjust war that

143
00:05:36,639 --> 00:05:39,039
russia is waging in ukraine

144
00:05:39,039 --> 00:05:40,639
we are outraged by the suffering and

145
00:05:40,639 --> 00:05:42,639
loss of life

146
00:05:42,639 --> 00:05:44,160
that this brutal

147
00:05:44,160 --> 00:05:46,160
aggression is inflicting on the

148
00:05:46,160 --> 00:05:49,800
ukrainian people

149
00:05:58,560 --> 00:06:00,800
uh next thing important point i'd like

150
00:06:00,800 --> 00:06:02,560
to

151
00:06:02,560 --> 00:06:05,600
remind you of is that everybody who

152
00:06:05,600 --> 00:06:07,039
registers for

153
00:06:07,039 --> 00:06:09,520
eurocrypt and every iacr conference

154
00:06:09,520 --> 00:06:12,720
signs the code of conduct

155
00:06:12,720 --> 00:06:16,240
i'd like to uh remind you that

156
00:06:16,240 --> 00:06:18,160
if you experience harassment or

157
00:06:18,160 --> 00:06:21,039
discriminatory behavior at uh at

158
00:06:21,039 --> 00:06:23,919
eurocrypt or at any iacr event uh we

159
00:06:23,919 --> 00:06:25,680
encourage you to

160
00:06:25,680 --> 00:06:28,479
reach out uh and uh find someone who can

161
00:06:28,479 --> 00:06:29,520
help

162
00:06:29,520 --> 00:06:31,520
uh and that's um

163
00:06:31,520 --> 00:06:33,120
eurocrypt

164
00:06:33,120 --> 00:06:35,680
2022 uh we have

165
00:06:35,680 --> 00:06:37,759
three specific people who you can

166
00:06:37,759 --> 00:06:40,319
contact uh we have the code of conduct

167
00:06:40,319 --> 00:06:42,639
liaison uh tarabin i don't know if tal

168
00:06:42,639 --> 00:06:44,720
is actually here but if she's not here

169
00:06:44,720 --> 00:06:46,319
right now

170
00:06:46,319 --> 00:06:48,479
she will be here

171
00:06:48,479 --> 00:06:51,199
uh the iacr president uh michelle

172
00:06:51,199 --> 00:06:52,720
abdullah i don't know if michelle is

173
00:06:52,720 --> 00:06:54,319
here yet i know he came in extremely

174
00:06:54,319 --> 00:06:56,880
late last night

175
00:06:56,880 --> 00:07:00,240
uh and and myself so please uh if you do

176
00:07:00,240 --> 00:07:02,400
experience uh anything

177
00:07:02,400 --> 00:07:05,280
uh you feel is inappropriate please come

178
00:07:05,280 --> 00:07:08,960
and talk to uh to to one of us um

179
00:07:08,960 --> 00:07:10,479
and of course we will

180
00:07:10,479 --> 00:07:13,840
do what we can to help

181
00:07:14,000 --> 00:07:14,880
now

182
00:07:14,880 --> 00:07:18,160
uh other reminders i'd like you to uh to

183
00:07:18,160 --> 00:07:20,000
remind you to wear your badge at all

184
00:07:20,000 --> 00:07:21,680
times

185
00:07:21,680 --> 00:07:24,000
uh especially tonight if you're coming

186
00:07:24,000 --> 00:07:25,520
to the cathedral

187
00:07:25,520 --> 00:07:27,520
uh and tomorrow um

188
00:07:27,520 --> 00:07:29,120
for the rump session

189
00:07:29,120 --> 00:07:33,599
um they're kind of um very uh

190
00:07:33,599 --> 00:07:35,440
areas with a lot of people about so uh

191
00:07:35,440 --> 00:07:37,840
please uh weigh your badge so we know

192
00:07:37,840 --> 00:07:41,440
that you're um the european participant

193
00:07:41,440 --> 00:07:43,680
if you have a an accompanying person who

194
00:07:43,680 --> 00:07:45,599
doesn't have a badge just make sure that

195
00:07:45,599 --> 00:07:48,240
you accompany that person into the into

196
00:07:48,240 --> 00:07:51,759
the cathedral or into the um

197
00:07:51,759 --> 00:07:53,199
um

198
00:07:53,199 --> 00:07:57,000
uh the um

199
00:07:58,319 --> 00:08:01,360
the rump session thank you

200
00:08:01,520 --> 00:08:03,759
um and now yes the ramp session so the

201
00:08:03,759 --> 00:08:05,360
rum session will take place on wednesday

202
00:08:05,360 --> 00:08:06,639
evening

203
00:08:06,639 --> 00:08:10,720
um starting around about 1915

204
00:08:11,039 --> 00:08:12,639
and i want to remind you that uh

205
00:08:12,639 --> 00:08:14,479
submission for the rump session is open

206
00:08:14,479 --> 00:08:15,599
now

207
00:08:15,599 --> 00:08:16,800
um

208
00:08:16,800 --> 00:08:19,680
and it will close on wednesday at

209
00:08:19,680 --> 00:08:24,240
1300 sharp so please um

210
00:08:24,560 --> 00:08:28,479
please do uh put your submissions in uh

211
00:08:28,479 --> 00:08:31,359
we're waiting for you

212
00:08:32,000 --> 00:08:33,360
um

213
00:08:33,360 --> 00:08:36,080
i'd like to remind uh all speakers that

214
00:08:36,080 --> 00:08:38,799
it's extremely important for us that you

215
00:08:38,799 --> 00:08:41,120
upload your slides at least 24 hours

216
00:08:41,120 --> 00:08:43,039
beforehand we have a very complex

217
00:08:43,039 --> 00:08:45,680
process to uh make sure that everything

218
00:08:45,680 --> 00:08:49,120
is set up for every session every day uh

219
00:08:49,120 --> 00:08:50,959
because we have to interleave between

220
00:08:50,959 --> 00:08:52,160
the um

221
00:08:52,160 --> 00:08:54,800
online and in-person

222
00:08:54,800 --> 00:08:55,680
um

223
00:08:55,680 --> 00:08:58,800
presentations so so please help us by by

224
00:08:58,800 --> 00:09:01,200
uh uploading a slide if you if you have

225
00:09:01,200 --> 00:09:03,279
any doubts uh please come and talk to

226
00:09:03,279 --> 00:09:04,320
someone

227
00:09:04,320 --> 00:09:06,640
uh and we have our technicians here and

228
00:09:06,640 --> 00:09:09,120
and we'll be in the other room

229
00:09:09,120 --> 00:09:11,839
uh and that reminds me uh

230
00:09:11,839 --> 00:09:13,839
some of you have white lanyards for your

231
00:09:13,839 --> 00:09:15,920
badges some of you have blue ones

232
00:09:15,920 --> 00:09:18,880
and uh some of us have these lanyards

233
00:09:18,880 --> 00:09:21,600
which say ntnu

234
00:09:21,600 --> 00:09:22,560
so

235
00:09:22,560 --> 00:09:25,600
uh if you those people with an nta new

236
00:09:25,600 --> 00:09:28,080
lanyard these are the ones who are on

237
00:09:28,080 --> 00:09:31,279
the organizing committee uh from our

238
00:09:31,279 --> 00:09:34,160
ntnu applied crypto lab so please uh ask

239
00:09:34,160 --> 00:09:36,240
any of us at any time if you have any

240
00:09:36,240 --> 00:09:39,279
questions about anything

241
00:09:40,000 --> 00:09:42,160
um

242
00:09:42,160 --> 00:09:44,720
yes or also asked me to

243
00:09:44,720 --> 00:09:46,399
ensure that speakers should keep the

244
00:09:46,399 --> 00:09:48,480
time and that session chairs should

245
00:09:48,480 --> 00:09:52,000
ensure that that the timetable is uh is

246
00:09:52,000 --> 00:09:56,240
uh appropriately uh kept in check

247
00:09:56,320 --> 00:09:58,640
and finally and uh

248
00:09:58,640 --> 00:10:01,440
extremely importantly i would like to

249
00:10:01,440 --> 00:10:02,959
finish by

250
00:10:02,959 --> 00:10:05,360
uh thanking our sponsors uh we have uh

251
00:10:05,360 --> 00:10:06,640
quite a number of sponsors you'll see

252
00:10:06,640 --> 00:10:08,880
their logos around and they'll be on

253
00:10:08,880 --> 00:10:11,600
up uh during the uh the breaks and so on

254
00:10:11,600 --> 00:10:14,160
so we're really grateful for for their

255
00:10:14,160 --> 00:10:16,160
support

256
00:10:16,160 --> 00:10:18,399
and i'd like to particularly mention uh

257
00:10:18,399 --> 00:10:19,440
zama

258
00:10:19,440 --> 00:10:20,399
um

259
00:10:20,399 --> 00:10:24,399
the ccis uh center of ntnu and the

260
00:10:24,399 --> 00:10:26,399
norwegian research council

261
00:10:26,399 --> 00:10:29,600
who are i've been our major sponsors

262
00:10:29,600 --> 00:10:31,279
um

263
00:10:31,279 --> 00:10:32,640
so with that

264
00:10:32,640 --> 00:10:36,160
uh i'd like to hand over to

265
00:10:36,399 --> 00:10:38,880
um

266
00:10:38,880 --> 00:10:42,560
yuval who's going to uh

267
00:10:42,640 --> 00:10:47,000
introduce the best paper uh

268
00:11:03,120 --> 00:11:04,399
okay

269
00:11:04,399 --> 00:11:06,320
good morning everyone

270
00:11:06,320 --> 00:11:08,399
it's great to see so many people after

271
00:11:08,399 --> 00:11:10,720
such a long time

272
00:11:10,720 --> 00:11:12,959
we're starting the technical program

273
00:11:12,959 --> 00:11:14,399
with a bang

274
00:11:14,399 --> 00:11:17,040
with the best paper award talk

275
00:11:17,040 --> 00:11:20,079
the talk is on epigram practical garble

276
00:11:20,079 --> 00:11:23,600
drum by david heath vladimir kolesnikov

277
00:11:23,600 --> 00:11:26,079
and rafael ostrovsky and dave will give

278
00:11:26,079 --> 00:11:29,239
the talk

279
00:11:47,360 --> 00:11:49,519
okay um well thank you very much for

280
00:11:49,519 --> 00:11:51,440
that nice introduction of all

281
00:11:51,440 --> 00:11:52,639
um

282
00:11:52,639 --> 00:11:54,800
it's obviously a great honor to be here

283
00:11:54,800 --> 00:11:57,600
and i'm excited to tell you all about

284
00:11:57,600 --> 00:11:58,399
some

285
00:11:58,399 --> 00:12:00,720
some work that we think is pretty

286
00:12:00,720 --> 00:12:03,440
exciting so as soon as we have slides

287
00:12:03,440 --> 00:12:04,720
um

288
00:12:04,720 --> 00:12:07,440
today i'm going to be talking about

289
00:12:07,440 --> 00:12:10,079
garbled ram so garbled ram is a

290
00:12:10,079 --> 00:12:12,480
relatively new technology in the space

291
00:12:12,480 --> 00:12:16,000
of secure multi-party computation

292
00:12:16,000 --> 00:12:18,959
the first garbled ram construction

293
00:12:18,959 --> 00:12:21,120
appeared about 10 years ago

294
00:12:21,120 --> 00:12:23,600
and while it's a very exciting result in

295
00:12:23,600 --> 00:12:26,639
its original form it had some problems

296
00:12:26,639 --> 00:12:28,639
in terms of the practical efficiency of

297
00:12:28,639 --> 00:12:31,040
the construction so today i want to tell

298
00:12:31,040 --> 00:12:33,040
you some details about what garbled ram

299
00:12:33,040 --> 00:12:33,760
is

300
00:12:33,760 --> 00:12:36,000
and what we do in this work to make this

301
00:12:36,000 --> 00:12:38,000
technology far more efficient than it

302
00:12:38,000 --> 00:12:39,680
was before

303
00:12:39,680 --> 00:12:40,480
so

304
00:12:40,480 --> 00:12:42,800
again

305
00:12:44,639 --> 00:12:46,880
well

306
00:12:50,720 --> 00:12:52,399
okay again

307
00:12:52,399 --> 00:12:54,720
uh we are talking about secure

308
00:12:54,720 --> 00:12:56,160
multi-party computation and in

309
00:12:56,160 --> 00:12:57,360
particular

310
00:12:57,360 --> 00:12:59,839
secure two-party computation so just as

311
00:12:59,839 --> 00:13:01,600
a quick reminder to everybody secure

312
00:13:01,600 --> 00:13:03,040
two-party computation is this very

313
00:13:03,040 --> 00:13:04,959
simple definition that essentially we

314
00:13:04,959 --> 00:13:07,360
have two parties each of whom have some

315
00:13:07,360 --> 00:13:09,279
private input and they agree on some

316
00:13:09,279 --> 00:13:10,639
function that they'd like to compute

317
00:13:10,639 --> 00:13:12,399
over that the idea is they should

318
00:13:12,399 --> 00:13:14,399
receive the output of this function and

319
00:13:14,399 --> 00:13:15,760
nothing more

320
00:13:15,760 --> 00:13:18,560
now in mpc we know that we can

321
00:13:18,560 --> 00:13:21,360
instantiate this functionality using

322
00:13:21,360 --> 00:13:23,760
garbled circuits namely as long as the

323
00:13:23,760 --> 00:13:26,480
function f can be instantiated as a

324
00:13:26,480 --> 00:13:28,480
boolean circuit then we can efficiently

325
00:13:28,480 --> 00:13:30,800
run that that program

326
00:13:30,800 --> 00:13:33,440
under encryption

327
00:13:33,440 --> 00:13:35,839
so garbled circuits are really

328
00:13:35,839 --> 00:13:38,720
attractive for two important reasons the

329
00:13:38,720 --> 00:13:41,199
first is that garbled circuits allow for

330
00:13:41,199 --> 00:13:43,360
constant round protocols

331
00:13:43,360 --> 00:13:45,199
and the second is that garbled circuits

332
00:13:45,199 --> 00:13:47,440
are based primarily on efficient

333
00:13:47,440 --> 00:13:49,760
symmetric key primitives and what this

334
00:13:49,760 --> 00:13:51,680
these two properties mean together is

335
00:13:51,680 --> 00:13:54,079
basically we can build fast and flexible

336
00:13:54,079 --> 00:13:56,320
protocols and a lot of mpc ends up being

337
00:13:56,320 --> 00:13:59,040
built on this basic technology

338
00:13:59,040 --> 00:14:00,959
now while garbled circuits has these

339
00:14:00,959 --> 00:14:02,399
nice characteristics

340
00:14:02,399 --> 00:14:04,880
it does have some issues and the one i

341
00:14:04,880 --> 00:14:06,880
want to talk about today is actually in

342
00:14:06,880 --> 00:14:09,440
the name it's the circuits part

343
00:14:09,440 --> 00:14:10,880
right

344
00:14:10,880 --> 00:14:12,399
again we're talking about running

345
00:14:12,399 --> 00:14:15,360
arbitrary programs arbitrary functions

346
00:14:15,360 --> 00:14:18,000
on private data and

347
00:14:18,000 --> 00:14:19,279
if you think about i'd like for you to

348
00:14:19,279 --> 00:14:20,880
imagine that the program that we're

349
00:14:20,880 --> 00:14:23,120
running is some written in some kind of

350
00:14:23,120 --> 00:14:24,720
high level language or something like

351
00:14:24,720 --> 00:14:26,880
this and the problem is that many

352
00:14:26,880 --> 00:14:29,600
natural programs when compiled all the

353
00:14:29,600 --> 00:14:32,079
way down to circuits end up with a very

354
00:14:32,079 --> 00:14:33,839
large circuit representation there's

355
00:14:33,839 --> 00:14:36,079
just a large polynomial blow up when you

356
00:14:36,079 --> 00:14:38,160
take an arbitrary program and compile it

357
00:14:38,160 --> 00:14:40,320
to a circuit

358
00:14:40,320 --> 00:14:42,720
the reason this is an issue is because

359
00:14:42,720 --> 00:14:44,959
in garbled circuits our cost scales

360
00:14:44,959 --> 00:14:47,199
proportionally with the number of gates

361
00:14:47,199 --> 00:14:48,800
in our circuit

362
00:14:48,800 --> 00:14:50,639
so what would be nice is if we could

363
00:14:50,639 --> 00:14:52,639
have some other kind of representation

364
00:14:52,639 --> 00:14:54,959
that would more efficiently capture

365
00:14:54,959 --> 00:14:57,199
arbitrary programs

366
00:14:57,199 --> 00:14:59,600
so this was what motivated the original

367
00:14:59,600 --> 00:15:02,000
constructions on garbled ram the idea of

368
00:15:02,000 --> 00:15:04,160
garbled ram is to replace the circuit

369
00:15:04,160 --> 00:15:05,760
model of computation

370
00:15:05,760 --> 00:15:07,760
with a ram machine

371
00:15:07,760 --> 00:15:09,680
so to say that a slightly different way

372
00:15:09,680 --> 00:15:11,440
what we want is we still want to have

373
00:15:11,440 --> 00:15:13,040
all the flexible power of having

374
00:15:13,040 --> 00:15:15,519
circuits but we want that circuit to be

375
00:15:15,519 --> 00:15:18,880
able to also efficiently read and write

376
00:15:18,880 --> 00:15:21,519
to some large main memory okay and we

377
00:15:21,519 --> 00:15:23,600
want this to happen while retaining our

378
00:15:23,600 --> 00:15:25,519
important constant round property and

379
00:15:25,519 --> 00:15:27,839
our important reliance on symmetrical

380
00:15:27,839 --> 00:15:29,440
primitives

381
00:15:29,440 --> 00:15:30,320
so

382
00:15:30,320 --> 00:15:32,399
this problem becomes interesting when we

383
00:15:32,399 --> 00:15:34,320
insist that these this reading and

384
00:15:34,320 --> 00:15:35,839
writing has to be efficient and by

385
00:15:35,839 --> 00:15:37,600
efficient i mean that

386
00:15:37,600 --> 00:15:39,440
the parties should be expending cost

387
00:15:39,440 --> 00:15:42,000
that's at most poly logarithmic in the

388
00:15:42,000 --> 00:15:44,079
size of the memory

389
00:15:44,079 --> 00:15:46,319
okay

390
00:15:47,279 --> 00:15:49,759
so indeed it's possible to do this and

391
00:15:49,759 --> 00:15:51,839
steve lew and rafaelski show that you

392
00:15:51,839 --> 00:15:54,480
could do this back in 2013. now while

393
00:15:54,480 --> 00:15:56,480
this was a really exciting result it

394
00:15:56,480 --> 00:15:59,199
came with some very serious baggage so

395
00:15:59,199 --> 00:16:00,800
specifically

396
00:16:00,800 --> 00:16:02,560
the original construction made some

397
00:16:02,560 --> 00:16:04,880
non-standard assumptions in particular

398
00:16:04,880 --> 00:16:06,720
there was this circularity assumption

399
00:16:06,720 --> 00:16:08,240
that needed to be made to prove this

400
00:16:08,240 --> 00:16:10,079
original construction secure

401
00:16:10,079 --> 00:16:12,639
and additionally while the asymptotic

402
00:16:12,639 --> 00:16:14,480
complexity indeed achieved

403
00:16:14,480 --> 00:16:16,639
polylogarithmic overhead

404
00:16:16,639 --> 00:16:18,399
some of the constants involved you know

405
00:16:18,399 --> 00:16:20,639
what is the polylog factor what are the

406
00:16:20,639 --> 00:16:23,040
constants these were not so great and it

407
00:16:23,040 --> 00:16:24,320
meant that this was not the kind of

408
00:16:24,320 --> 00:16:26,240
technology that people are going out and

409
00:16:26,240 --> 00:16:27,680
actually implementing and you know

410
00:16:27,680 --> 00:16:29,600
putting on the web for people to use

411
00:16:29,600 --> 00:16:31,839
okay

412
00:16:31,839 --> 00:16:33,839
so since this original work there has

413
00:16:33,839 --> 00:16:36,160
been a lot of follow-up on garbled ram

414
00:16:36,160 --> 00:16:37,680
and in particular there's been a few

415
00:16:37,680 --> 00:16:39,519
works which have addressed kind of the

416
00:16:39,519 --> 00:16:41,040
core of garbled ram trying to improve

417
00:16:41,040 --> 00:16:42,720
the primitive itself

418
00:16:42,720 --> 00:16:45,360
but these works have addressed this

419
00:16:45,360 --> 00:16:48,000
non-standard assumptions part okay

420
00:16:48,000 --> 00:16:50,240
and thanks to these works today we have

421
00:16:50,240 --> 00:16:52,639
garbled ram constructions that make only

422
00:16:52,639 --> 00:16:54,800
standard assumptions

423
00:16:54,800 --> 00:16:56,720
but these prior works have done

424
00:16:56,720 --> 00:16:58,320
essentially nothing to address the

425
00:16:58,320 --> 00:17:00,560
problem of high concrete overhead so

426
00:17:00,560 --> 00:17:02,720
what we do in this work is we look at

427
00:17:02,720 --> 00:17:04,559
the high concrete overhead can we make

428
00:17:04,559 --> 00:17:06,959
garbled ram something that we might hope

429
00:17:06,959 --> 00:17:10,000
to implement and indeed we can

430
00:17:10,000 --> 00:17:10,720
so

431
00:17:10,720 --> 00:17:12,319
what i have on the slide here is

432
00:17:12,319 --> 00:17:14,400
essentially the most important statement

433
00:17:14,400 --> 00:17:16,079
of our result which is the asymptotic

434
00:17:16,079 --> 00:17:18,640
complexity how much does it cost

435
00:17:18,640 --> 00:17:20,959
to for the circuit to read or write to

436
00:17:20,959 --> 00:17:23,119
main memory and what i'm doing here is

437
00:17:23,119 --> 00:17:26,480
i'm comparing to this prior work glo15

438
00:17:26,480 --> 00:17:28,799
okay now this should be treated as

439
00:17:28,799 --> 00:17:30,720
representative of garbled rams they have

440
00:17:30,720 --> 00:17:32,559
slightly different costs but i chose

441
00:17:32,559 --> 00:17:34,240
this one because it's the easiest to see

442
00:17:34,240 --> 00:17:36,400
where our improvement is

443
00:17:36,400 --> 00:17:38,640
okay so there's a lot of

444
00:17:38,640 --> 00:17:40,640
a lot of complexity in these expressions

445
00:17:40,640 --> 00:17:42,320
but i want you to focus on the main

446
00:17:42,320 --> 00:17:44,240
differences so there's essentially two

447
00:17:44,240 --> 00:17:46,480
important differences here

448
00:17:46,480 --> 00:17:48,880
so the first one is that we have this

449
00:17:48,880 --> 00:17:51,360
improvement in the scaling of the

450
00:17:51,360 --> 00:17:54,080
security parameter going from quadratic

451
00:17:54,080 --> 00:17:56,480
scaling down to linear scaling

452
00:17:56,480 --> 00:17:58,880
now this is really important because

453
00:17:58,880 --> 00:18:01,760
typically in garbled circuits we expect

454
00:18:01,760 --> 00:18:03,919
there to be some kind of scaling and

455
00:18:03,919 --> 00:18:06,000
linear scaling in the security parameter

456
00:18:06,000 --> 00:18:07,679
so for instance if you go download the

457
00:18:07,679 --> 00:18:10,640
emp toolkit which is a widely available

458
00:18:10,640 --> 00:18:13,039
tool for garbled circuits that tool is

459
00:18:13,039 --> 00:18:14,720
going to have scaling in the security

460
00:18:14,720 --> 00:18:15,840
parameter

461
00:18:15,840 --> 00:18:18,880
okay but prior all prior garbled rams in

462
00:18:18,880 --> 00:18:21,280
fact had this quadratic scaling which

463
00:18:21,280 --> 00:18:23,520
made them just very infeasible for

464
00:18:23,520 --> 00:18:25,679
practical settings so we eliminate this

465
00:18:25,679 --> 00:18:28,000
weakness

466
00:18:28,000 --> 00:18:29,919
the second part that i want to emphasize

467
00:18:29,919 --> 00:18:31,360
is this improvement in the poly

468
00:18:31,360 --> 00:18:33,200
logarithmic factor which again is just

469
00:18:33,200 --> 00:18:36,080
driving down the cost

470
00:18:36,080 --> 00:18:38,080
now in fact these two

471
00:18:38,080 --> 00:18:40,160
sources of improvement come from two

472
00:18:40,160 --> 00:18:43,760
different places so the first is this

473
00:18:43,760 --> 00:18:46,640
reduction in the security parameter

474
00:18:46,640 --> 00:18:48,559
and here what we did to achieve this was

475
00:18:48,559 --> 00:18:51,600
we came up with a new kind of encoding

476
00:18:51,600 --> 00:18:53,280
that works inside the garbled circuit

477
00:18:53,280 --> 00:18:55,520
that is specific to some of the internal

478
00:18:55,520 --> 00:18:58,000
tasks of garbled ram i'm actually not

479
00:18:58,000 --> 00:19:00,160
going to talk about this any any further

480
00:19:00,160 --> 00:19:01,600
than this if you'd like to hear more

481
00:19:01,600 --> 00:19:03,440
come and talk to me but basically we

482
00:19:03,440 --> 00:19:05,679
introduced a new kind of garbled circuit

483
00:19:05,679 --> 00:19:08,080
gate a new kind of gate for the circuit

484
00:19:08,080 --> 00:19:11,120
that works is is extremely efficient for

485
00:19:11,120 --> 00:19:14,880
specific tasks of the garbled ram

486
00:19:14,880 --> 00:19:17,280
the second part i do want to talk about

487
00:19:17,280 --> 00:19:19,520
a little bit more and the second part is

488
00:19:19,520 --> 00:19:22,720
that we drive down the polylog cost by

489
00:19:22,720 --> 00:19:24,960
building a new kind of garbled circuit

490
00:19:24,960 --> 00:19:27,919
data structure that solves efficiently

491
00:19:27,919 --> 00:19:30,080
sort of the central problem of garbled

492
00:19:30,080 --> 00:19:31,200
ram

493
00:19:31,200 --> 00:19:32,480
so what i would like to do for the

494
00:19:32,480 --> 00:19:34,240
remainder of this talk is tell you a

495
00:19:34,240 --> 00:19:36,160
little bit about what is this central

496
00:19:36,160 --> 00:19:39,200
problem of garbled ram and what is

497
00:19:39,200 --> 00:19:40,720
at least at a high level what is this

498
00:19:40,720 --> 00:19:42,320
new data structure that solves this

499
00:19:42,320 --> 00:19:45,200
problem efficiently

500
00:19:46,400 --> 00:19:47,520
okay

501
00:19:47,520 --> 00:19:51,440
so to show this i'm going to consider a

502
00:19:51,440 --> 00:19:53,679
significant weakening of the core

503
00:19:53,679 --> 00:19:56,080
problem okay so the in generality

504
00:19:56,080 --> 00:19:59,200
garbled ram is supposed to be a full

505
00:19:59,200 --> 00:20:02,240
ram that is oblivious and by oblivious

506
00:20:02,240 --> 00:20:04,799
what i mean is in a garbled circuit

507
00:20:04,799 --> 00:20:07,520
one party is going to actually run that

508
00:20:07,520 --> 00:20:09,120
circuit

509
00:20:09,120 --> 00:20:11,919
and evaluate that circuit at runtime

510
00:20:11,919 --> 00:20:14,240
and in generality that party is going to

511
00:20:14,240 --> 00:20:17,760
see the access pattern to the ram

512
00:20:17,760 --> 00:20:20,000
now in full garbled ram since we're

513
00:20:20,000 --> 00:20:22,320
trying to achieve 2 pc

514
00:20:22,320 --> 00:20:24,720
it's not secure for this party to learn

515
00:20:24,720 --> 00:20:26,960
the actual logical access pattern of

516
00:20:26,960 --> 00:20:28,000
that ram

517
00:20:28,000 --> 00:20:30,240
so you can hide the actual logical

518
00:20:30,240 --> 00:20:32,559
access pattern with with standard tools

519
00:20:32,559 --> 00:20:34,720
from oblivious ram so all of these

520
00:20:34,720 --> 00:20:36,480
things can be done but today i just want

521
00:20:36,480 --> 00:20:37,840
to think about a weakening where we

522
00:20:37,840 --> 00:20:40,799
think about just read-only memory where

523
00:20:40,799 --> 00:20:42,559
this evaluator who's actually running

524
00:20:42,559 --> 00:20:45,440
the garbled circuit is allowed to learn

525
00:20:45,440 --> 00:20:47,440
the access pattern of this read-only

526
00:20:47,440 --> 00:20:48,720
memory

527
00:20:48,720 --> 00:20:50,720
in fact even more than that

528
00:20:50,720 --> 00:20:52,799
i want to consider a read-only memory

529
00:20:52,799 --> 00:20:54,960
where you're only allowed to read each

530
00:20:54,960 --> 00:20:57,280
memory slot at most once

531
00:20:57,280 --> 00:20:58,320
okay

532
00:20:58,320 --> 00:21:00,320
it turns out that even this much weaker

533
00:21:00,320 --> 00:21:02,400
problem much simpler problem

534
00:21:02,400 --> 00:21:04,880
presents clearly the core technical

535
00:21:04,880 --> 00:21:07,919
challenge of garbled ram

536
00:21:08,960 --> 00:21:10,400
okay so what is this core technical

537
00:21:10,400 --> 00:21:12,559
challenge well let's consider

538
00:21:12,559 --> 00:21:14,559
trying to actually do this thing where

539
00:21:14,559 --> 00:21:17,200
we read something at runtime from some

540
00:21:17,200 --> 00:21:19,200
kind of read-only memory and then put it

541
00:21:19,200 --> 00:21:21,360
into a circuit so in particular i have

542
00:21:21,360 --> 00:21:23,360
this and gate on the right and what i

543
00:21:23,360 --> 00:21:25,760
would like to do is at runtime the

544
00:21:25,760 --> 00:21:28,159
garbled circuit is going to choose an

545
00:21:28,159 --> 00:21:30,400
index into this read-only memory on the

546
00:21:30,400 --> 00:21:31,520
left

547
00:21:31,520 --> 00:21:33,760
okay and it's going to tell the garbled

548
00:21:33,760 --> 00:21:36,640
circuit evaluator hey evaluator please

549
00:21:36,640 --> 00:21:38,640
go get this index from the read-only

550
00:21:38,640 --> 00:21:41,200
memory and put it onto in particular

551
00:21:41,200 --> 00:21:43,440
this top wire of the and gate

552
00:21:43,440 --> 00:21:44,720
okay

553
00:21:44,720 --> 00:21:47,360
so if we start looking at

554
00:21:47,360 --> 00:21:48,720
mechanically what this means we're going

555
00:21:48,720 --> 00:21:50,400
to see there's a problem

556
00:21:50,400 --> 00:21:51,840
because

557
00:21:51,840 --> 00:21:54,480
in a garbled circuit we do not put clear

558
00:21:54,480 --> 00:21:56,720
text bits on the wires

559
00:21:56,720 --> 00:21:59,600
instead we put encodings of bits

560
00:21:59,600 --> 00:22:01,200
so instead of the wire holding zero or

561
00:22:01,200 --> 00:22:03,440
one there will be two possible

562
00:22:03,440 --> 00:22:04,880
encryption keys that could be on that

563
00:22:04,880 --> 00:22:05,840
wire

564
00:22:05,840 --> 00:22:08,080
now i'm going to refer to the pair of

565
00:22:08,080 --> 00:22:09,440
these possible keys that could be on

566
00:22:09,440 --> 00:22:11,600
this wire as the so-called language of

567
00:22:11,600 --> 00:22:12,799
that wire

568
00:22:12,799 --> 00:22:14,480
and the important point is that to

569
00:22:14,480 --> 00:22:17,039
actually use a gate in the garbled

570
00:22:17,039 --> 00:22:19,760
circuit you have to pass in

571
00:22:19,760 --> 00:22:21,600
labels that match the language if you

572
00:22:21,600 --> 00:22:23,280
pass in anything else it just doesn't

573
00:22:23,280 --> 00:22:24,559
work

574
00:22:24,559 --> 00:22:26,159
and the reason is that this is

575
00:22:26,159 --> 00:22:29,039
significant is for security we also do

576
00:22:29,039 --> 00:22:31,039
not store clear text zeros and ones in

577
00:22:31,039 --> 00:22:33,440
our memory instead we also store

578
00:22:33,440 --> 00:22:35,919
encryption keys in this memory

579
00:22:35,919 --> 00:22:38,080
so now let's consider what i said the

580
00:22:38,080 --> 00:22:40,400
garbled circuit tells the evaluator hey

581
00:22:40,400 --> 00:22:43,200
evaluator please go grab some particular

582
00:22:43,200 --> 00:22:44,960
value from this memory and put it on

583
00:22:44,960 --> 00:22:46,080
this wire

584
00:22:46,080 --> 00:22:48,080
and you can see just syntactically

585
00:22:48,080 --> 00:22:49,440
there's a problem

586
00:22:49,440 --> 00:22:51,679
because the value that the evaluator

587
00:22:51,679 --> 00:22:54,000
grabs doesn't match the language of the

588
00:22:54,000 --> 00:22:55,200
wire

589
00:22:55,200 --> 00:22:57,600
so this is the central problem of

590
00:22:57,600 --> 00:22:59,760
garbled ram is this language translation

591
00:22:59,760 --> 00:23:01,440
issue that we have to translate

592
00:23:01,440 --> 00:23:03,840
languages stored in the in the memory

593
00:23:03,840 --> 00:23:06,320
dynamically to a language expected by

594
00:23:06,320 --> 00:23:09,840
some target wire

595
00:23:10,000 --> 00:23:12,240
okay

596
00:23:12,400 --> 00:23:14,559
so for the remainder of this talk

597
00:23:14,559 --> 00:23:16,640
uh i'd like to tell you a little bit

598
00:23:16,640 --> 00:23:19,120
about how we actually go about solving

599
00:23:19,120 --> 00:23:21,120
this problem and again the way that we

600
00:23:21,120 --> 00:23:22,960
do it is by introducing a new data

601
00:23:22,960 --> 00:23:25,039
structure which we call a lazy

602
00:23:25,039 --> 00:23:26,960
permutation network

603
00:23:26,960 --> 00:23:28,880
and what this lazy permutation network

604
00:23:28,880 --> 00:23:32,880
does is it solves this this uh language

605
00:23:32,880 --> 00:23:36,480
translation problem in an amortized way

606
00:23:36,480 --> 00:23:39,200
so what i mean is on the left here i

607
00:23:39,200 --> 00:23:40,880
have you know n

608
00:23:40,880 --> 00:23:42,640
memory cells which we're going to be

609
00:23:42,640 --> 00:23:45,600
able to read each of them at most once

610
00:23:45,600 --> 00:23:48,080
and on the right i have wires which we

611
00:23:48,080 --> 00:23:49,440
would like to

612
00:23:49,440 --> 00:23:51,200
write we would like to read those memory

613
00:23:51,200 --> 00:23:53,600
cells onto in some arbitrary order just

614
00:23:53,600 --> 00:23:55,679
decided at runtime

615
00:23:55,679 --> 00:23:58,880
okay so in particular the the garbled

616
00:23:58,880 --> 00:24:00,880
circuit starts running and it says hey

617
00:24:00,880 --> 00:24:02,799
evaluator please go

618
00:24:02,799 --> 00:24:06,320
connect up some memory cell on the left

619
00:24:06,320 --> 00:24:08,559
so some wire on the right

620
00:24:08,559 --> 00:24:10,159
okay

621
00:24:10,159 --> 00:24:12,159
and as the garble circuit continues to

622
00:24:12,159 --> 00:24:14,480
run it continues to reveal positions in

623
00:24:14,480 --> 00:24:16,159
this memory on the left and allow the

624
00:24:16,159 --> 00:24:19,200
evaluator to connect wires to the right

625
00:24:19,200 --> 00:24:21,360
and the important point here is first of

626
00:24:21,360 --> 00:24:22,640
all you can see that this is some kind

627
00:24:22,640 --> 00:24:24,400
of permutation we're permuting the

628
00:24:24,400 --> 00:24:26,640
memory elements to the wires on the on

629
00:24:26,640 --> 00:24:29,520
the right and also importantly this

630
00:24:29,520 --> 00:24:32,000
permutation is in a sense lazy and what

631
00:24:32,000 --> 00:24:34,000
i mean by this is that

632
00:24:34,000 --> 00:24:37,120
the the order in which things are

633
00:24:37,120 --> 00:24:39,840
permuted is not fully decided at the

634
00:24:39,840 --> 00:24:41,919
beginning this permutation is revealed

635
00:24:41,919 --> 00:24:44,320
to the evaluator over time what this

636
00:24:44,320 --> 00:24:45,760
means is that a lot of standard

637
00:24:45,760 --> 00:24:47,440
solutions to how you permute values

638
00:24:47,440 --> 00:24:49,600
inside of a circuit won't work here we

639
00:24:49,600 --> 00:24:53,120
need something slightly more powerful

640
00:24:53,440 --> 00:24:55,120
okay

641
00:24:55,120 --> 00:24:56,720
so

642
00:24:56,720 --> 00:24:58,799
let me try to explain to you a little

643
00:24:58,799 --> 00:25:00,400
bit of the detail i'm not going to go to

644
00:25:00,400 --> 00:25:01,600
great length but a little bit of the

645
00:25:01,600 --> 00:25:04,320
detail of how we actually implement this

646
00:25:04,320 --> 00:25:06,799
lazy permutation network

647
00:25:06,799 --> 00:25:09,120
the crucial insight is this idea that we

648
00:25:09,120 --> 00:25:13,279
call dynamic soldering and evaluation

649
00:25:13,279 --> 00:25:16,159
so essentially what we need is some kind

650
00:25:16,159 --> 00:25:18,880
of mechanism at a small scale that

651
00:25:18,880 --> 00:25:22,880
allows the evaluator to dynamically run

652
00:25:22,880 --> 00:25:25,200
one out of a constant number of circuits

653
00:25:25,200 --> 00:25:26,799
at runtime

654
00:25:26,799 --> 00:25:29,200
so what i mean here is that at runtime

655
00:25:29,200 --> 00:25:31,360
the the garbled circuit declares to the

656
00:25:31,360 --> 00:25:34,240
evaluator hey evaluator please connect

657
00:25:34,240 --> 00:25:36,480
the wire on the right to one of these

658
00:25:36,480 --> 00:25:37,679
two circuits

659
00:25:37,679 --> 00:25:38,960
on the left

660
00:25:38,960 --> 00:25:41,120
and then run that circuit

661
00:25:41,120 --> 00:25:42,960
okay

662
00:25:42,960 --> 00:25:45,120
the important point here so first of all

663
00:25:45,120 --> 00:25:47,039
let me say what i'm showing here is that

664
00:25:47,039 --> 00:25:50,080
it's actually very easy to achieve this

665
00:25:50,080 --> 00:25:52,159
on in a small scale where there's a

666
00:25:52,159 --> 00:25:54,000
constant number of circuits on the left

667
00:25:54,000 --> 00:25:55,039
here

668
00:25:55,039 --> 00:25:58,320
by just conditionally revealing allowing

669
00:25:58,320 --> 00:26:00,320
the evaluator to decrypt different

670
00:26:00,320 --> 00:26:02,799
linear combinations of these languages

671
00:26:02,799 --> 00:26:05,760
on the wires okay so my core point here

672
00:26:05,760 --> 00:26:08,240
is just if the problem is small there's

673
00:26:08,240 --> 00:26:09,919
a constant number of circuits on the

674
00:26:09,919 --> 00:26:13,760
left this problem is very easy to solve

675
00:26:13,760 --> 00:26:16,080
okay and the important point here is

676
00:26:16,080 --> 00:26:18,240
that after having connected up one of

677
00:26:18,240 --> 00:26:20,720
these circuits at runtime

678
00:26:20,720 --> 00:26:23,039
the evaluator consumes

679
00:26:23,039 --> 00:26:25,120
the circuit that has been connected up

680
00:26:25,120 --> 00:26:26,880
but very importantly

681
00:26:26,880 --> 00:26:29,919
the other circuit is still there

682
00:26:29,919 --> 00:26:32,320
and it can be used later on so what i

683
00:26:32,320 --> 00:26:34,400
mean is that when another wire says hey

684
00:26:34,400 --> 00:26:36,400
please connect up to that other circuit

685
00:26:36,400 --> 00:26:38,960
we can reuse that same circuit that was

686
00:26:38,960 --> 00:26:40,320
already sitting there and this is how

687
00:26:40,320 --> 00:26:42,320
we're going to get our amortization and

688
00:26:42,320 --> 00:26:45,918
how we're going to get our polylog cost

689
00:26:46,080 --> 00:26:47,200
okay

690
00:26:47,200 --> 00:26:50,320
so this dynamic soldering and evaluation

691
00:26:50,320 --> 00:26:54,000
allows us to solve this lazy permutation

692
00:26:54,000 --> 00:26:56,880
problem but only at a small scale

693
00:26:56,880 --> 00:26:58,799
right because the problem is it turns

694
00:26:58,799 --> 00:27:00,000
out if i put

695
00:27:00,000 --> 00:27:02,080
a large number of circuits on the left

696
00:27:02,080 --> 00:27:04,640
and i want to directly connect one wire

697
00:27:04,640 --> 00:27:07,520
to uh to one of these large numbers of

698
00:27:07,520 --> 00:27:09,919
circuits i have to include a lot of

699
00:27:09,919 --> 00:27:11,279
encryptions a linear number of

700
00:27:11,279 --> 00:27:13,279
encryptions it says what is this

701
00:27:13,279 --> 00:27:15,279
language translation value for each

702
00:27:15,279 --> 00:27:16,880
possible circuit

703
00:27:16,880 --> 00:27:18,960
okay so as we increase the number of

704
00:27:18,960 --> 00:27:20,559
circuits it doesn't quite work instead

705
00:27:20,559 --> 00:27:21,840
we need something a little bit more

706
00:27:21,840 --> 00:27:24,080
clever here

707
00:27:24,080 --> 00:27:26,720
and the idea is to build a kind of tree

708
00:27:26,720 --> 00:27:28,080
of circuits each of which can

709
00:27:28,080 --> 00:27:30,159
communicate with one another

710
00:27:30,159 --> 00:27:32,480
now i'm going to allied for the purposes

711
00:27:32,480 --> 00:27:34,399
of time a great amount of detail here

712
00:27:34,399 --> 00:27:35,919
but if you have more questions please

713
00:27:35,919 --> 00:27:38,159
come talk to me about it but the idea

714
00:27:38,159 --> 00:27:41,279
here is to build circuits which can

715
00:27:41,279 --> 00:27:43,200
communicate only with their neighbors to

716
00:27:43,200 --> 00:27:44,640
their left

717
00:27:44,640 --> 00:27:46,799
and each of these circuits is made

718
00:27:46,799 --> 00:27:48,399
efficient by using

719
00:27:48,399 --> 00:27:50,399
a stack based data structure which is

720
00:27:50,399 --> 00:27:52,720
storing kind of the languages of the

721
00:27:52,720 --> 00:27:55,520
circuits to the left

722
00:27:55,520 --> 00:27:57,520
and the i the core idea is that as

723
00:27:57,520 --> 00:28:00,159
accesses come in from the top right the

724
00:28:00,159 --> 00:28:02,080
evaluator is going to be able to

725
00:28:02,080 --> 00:28:05,039
dynamically traverse this tree

726
00:28:05,039 --> 00:28:06,960
and connect up to the ram slot that she

727
00:28:06,960 --> 00:28:09,039
actually wants

728
00:28:09,039 --> 00:28:11,679
okay and as as she is doing this the

729
00:28:11,679 --> 00:28:13,679
important point is she traverses this

730
00:28:13,679 --> 00:28:15,200
tree to get to the memory cell that she

731
00:28:15,200 --> 00:28:17,840
cares about and she's not touching any

732
00:28:17,840 --> 00:28:20,000
other of the circuits in this tree

733
00:28:20,000 --> 00:28:21,760
okay so all of these other circuits all

734
00:28:21,760 --> 00:28:24,159
of the circuits on the top are still

735
00:28:24,159 --> 00:28:27,039
there unused and we can use them later

736
00:28:27,039 --> 00:28:28,399
on

737
00:28:28,399 --> 00:28:30,880
so when subsequent memory access come in

738
00:28:30,880 --> 00:28:31,840
we can

739
00:28:31,840 --> 00:28:33,360
traverse the tree in a different

740
00:28:33,360 --> 00:28:35,919
direction and connect that one up as

741
00:28:35,919 --> 00:28:38,080
well

742
00:28:38,080 --> 00:28:39,279
okay

743
00:28:39,279 --> 00:28:41,760
so by repeatedly doing this what's

744
00:28:41,760 --> 00:28:44,080
happening here is we have one circuit

745
00:28:44,080 --> 00:28:46,000
which we're going to be able to fully

746
00:28:46,000 --> 00:28:49,120
utilize over the course of n axises and

747
00:28:49,120 --> 00:28:51,679
each of these n axis is fully

748
00:28:51,679 --> 00:28:54,240
dynamically decided and we fully use

749
00:28:54,240 --> 00:28:57,440
this this circuit which has

750
00:28:57,440 --> 00:28:59,679
size n log square n

751
00:28:59,679 --> 00:29:02,799
for n reads

752
00:29:04,320 --> 00:29:05,760
okay

753
00:29:05,760 --> 00:29:07,919
so

754
00:29:07,919 --> 00:29:11,279
this was our our our work on on garbled

755
00:29:11,279 --> 00:29:14,320
ram so so again the core contribution is

756
00:29:14,320 --> 00:29:17,039
this significant asymptotic improvement

757
00:29:17,039 --> 00:29:19,440
to the cost of garbled ram so whereas

758
00:29:19,440 --> 00:29:22,080
before we had this quadratic scaling in

759
00:29:22,080 --> 00:29:23,919
the security parameter we now have this

760
00:29:23,919 --> 00:29:25,919
linear scaling in the security parameter

761
00:29:25,919 --> 00:29:28,880
and now we also have only log square to

762
00:29:28,880 --> 00:29:30,799
what i would call overhead compared to

763
00:29:30,799 --> 00:29:32,480
what you would expect from normal

764
00:29:32,480 --> 00:29:33,840
garbled circuits

765
00:29:33,840 --> 00:29:35,840
now i don't think this is the finish

766
00:29:35,840 --> 00:29:38,880
line and we fully expect that this

767
00:29:38,880 --> 00:29:41,360
we can build on this approach and drive

768
00:29:41,360 --> 00:29:43,360
down the cost of garbled ram even

769
00:29:43,360 --> 00:29:45,840
further to make it truly the sort of

770
00:29:45,840 --> 00:29:48,000
thing that is just a default

771
00:29:48,000 --> 00:29:50,080
implementation that you get from

772
00:29:50,080 --> 00:29:52,720
tools online like the emp toolkit

773
00:29:52,720 --> 00:29:55,039
and already today what i'm plotting here

774
00:29:55,039 --> 00:29:57,919
is the performance of our technique

775
00:29:57,919 --> 00:30:01,520
and comparing it to so-called trivial

776
00:30:01,520 --> 00:30:03,679
garbled ram which is garbled ram where

777
00:30:03,679 --> 00:30:05,760
you implement it just as a plain boolean

778
00:30:05,760 --> 00:30:07,520
circuit without any of the sophisticated

779
00:30:07,520 --> 00:30:09,600
techniques i measured here and already

780
00:30:09,600 --> 00:30:11,840
with what we've done the break even

781
00:30:11,840 --> 00:30:14,720
point where our our polylog cost starts

782
00:30:14,720 --> 00:30:17,760
to beat out this linear cost ram is only

783
00:30:17,760 --> 00:30:20,480
at about 500 ram elements and again we

784
00:30:20,480 --> 00:30:23,120
expect that to significantly improve in

785
00:30:23,120 --> 00:30:25,279
the near future

786
00:30:25,279 --> 00:30:27,760
so we think this is really exciting in

787
00:30:27,760 --> 00:30:29,200
particular because we think it's going

788
00:30:29,200 --> 00:30:31,440
to open the door to

789
00:30:31,440 --> 00:30:33,919
taking off the shelf programs doing

790
00:30:33,919 --> 00:30:37,279
something like starting with a c program

791
00:30:37,279 --> 00:30:38,960
and then compiling that down to an

792
00:30:38,960 --> 00:30:41,600
assembly language which we can run in a

793
00:30:41,600 --> 00:30:44,320
cpu emulation style directly inside

794
00:30:44,320 --> 00:30:46,320
garbled computation and we're going to

795
00:30:46,320 --> 00:30:48,159
be able to do all this without paying

796
00:30:48,159 --> 00:30:50,880
exorbitant cost for the reading and

797
00:30:50,880 --> 00:30:52,320
writing of main memory which

798
00:30:52,320 --> 00:30:54,320
traditionally is the bottleneck of that

799
00:30:54,320 --> 00:30:56,799
sort of approach

800
00:30:56,799 --> 00:30:59,760
so with that i will wrap up and i would

801
00:30:59,760 --> 00:31:04,519
be happy to take any questions thank you

802
00:31:15,840 --> 00:31:19,120
thanks dave for the great talk

803
00:31:19,120 --> 00:31:22,639
any questions from the audience

804
00:31:26,880 --> 00:31:29,880
yes

805
00:31:40,640 --> 00:31:42,399
oh i see yeah so that's a great question

806
00:31:42,399 --> 00:31:44,640
sorry this is the amortized cost per

807
00:31:44,640 --> 00:31:45,679
access

808
00:31:45,679 --> 00:31:49,120
in this in this plot

809
00:31:55,279 --> 00:31:58,279
yes

810
00:32:05,760 --> 00:32:07,840
so the question was is what's plotted

811
00:32:07,840 --> 00:32:09,760
here the cost for reading the entire

812
00:32:09,760 --> 00:32:11,279
memory or is it just the cost for

813
00:32:11,279 --> 00:32:12,960
reading one element the answer is the

814
00:32:12,960 --> 00:32:15,440
cost for just reading one element so the

815
00:32:15,440 --> 00:32:17,360
follow-up was a clarification so for

816
00:32:17,360 --> 00:32:20,240
example if there's a binary search

817
00:32:20,240 --> 00:32:22,880
in the program where you have to you

818
00:32:22,880 --> 00:32:24,960
know look at a hundred elements on some

819
00:32:24,960 --> 00:32:27,519
on in some data structure or something

820
00:32:27,519 --> 00:32:29,760
you do indeed have to pay this cost 100

821
00:32:29,760 --> 00:32:32,080
times yeah so this is the per access

822
00:32:32,080 --> 00:32:34,320
cost

823
00:32:39,200 --> 00:32:41,039
yeah and so the question here was so do

824
00:32:41,039 --> 00:32:42,399
you have to know ahead of time how many

825
00:32:42,399 --> 00:32:43,679
times you're going to read and write

826
00:32:43,679 --> 00:32:45,440
memory and yes the answer is you do have

827
00:32:45,440 --> 00:32:47,679
to know that so so in this model i'm

828
00:32:47,679 --> 00:32:49,279
talking about where you would do some

829
00:32:49,279 --> 00:32:51,600
sort of full cpu emulation what you

830
00:32:51,600 --> 00:32:52,640
would do

831
00:32:52,640 --> 00:32:53,600
is

832
00:32:53,600 --> 00:32:55,679
pre-allocate and say this is how much

833
00:32:55,679 --> 00:32:57,679
time we need this is how much space we

834
00:32:57,679 --> 00:32:58,799
need

835
00:32:58,799 --> 00:33:01,120
and that that would be some some leakage

836
00:33:01,120 --> 00:33:02,559
in addition to the output of the

837
00:33:02,559 --> 00:33:03,760
function

838
00:33:03,760 --> 00:33:06,760
yes

839
00:33:10,320 --> 00:33:11,919
that's right we only use symmetric key

840
00:33:11,919 --> 00:33:13,760
primitives here yes

841
00:33:13,760 --> 00:33:17,519
yes another question there

842
00:33:18,000 --> 00:33:19,760
maybe you can come in the

843
00:33:19,760 --> 00:33:22,760
ask

844
00:33:32,320 --> 00:33:34,159
hi thank you

845
00:33:34,159 --> 00:33:36,320
thank you so this is mostly about worst

846
00:33:36,320 --> 00:33:39,840
case complexity right

847
00:33:40,000 --> 00:33:43,679
yes because people designing cpus and

848
00:33:43,679 --> 00:33:45,440
ram and cache they use a lot of

849
00:33:45,440 --> 00:33:47,360
heuristic to optimize for example cache

850
00:33:47,360 --> 00:33:48,880
access you think that this is a

851
00:33:48,880 --> 00:33:51,760
direction that could be interesting for

852
00:33:51,760 --> 00:33:54,320
garbage circuits as well that is a

853
00:33:54,320 --> 00:33:56,960
terrific question and

854
00:33:56,960 --> 00:33:58,480
we've actually looked at the sum and

855
00:33:58,480 --> 00:33:59,679
it's not

856
00:33:59,679 --> 00:34:02,159
particularly clear to me actually what

857
00:34:02,159 --> 00:34:06,159
the answer is going to be here um

858
00:34:06,159 --> 00:34:08,800
yeah so what does the architecture look

859
00:34:08,800 --> 00:34:10,320
like that you actually want to do cpu

860
00:34:10,320 --> 00:34:13,760
emulation like with in a garbled setting

861
00:34:13,760 --> 00:34:15,520
i suspect it's going to look quite

862
00:34:15,520 --> 00:34:18,000
different than what we do in cleartext

863
00:34:18,000 --> 00:34:20,079
computing and i don't have the answers

864
00:34:20,079 --> 00:34:23,280
there yet i apologize thank you yeah

865
00:34:23,280 --> 00:34:26,560
okay any more questions

866
00:34:28,079 --> 00:34:29,520
okay one

867
00:34:29,520 --> 00:34:31,520
final quick question of my own can you

868
00:34:31,520 --> 00:34:33,679
say a bit about how this compares to the

869
00:34:33,679 --> 00:34:34,879
best

870
00:34:34,879 --> 00:34:36,879
solutions that use a

871
00:34:36,879 --> 00:34:38,719
high round complexity say in the context

872
00:34:38,719 --> 00:34:40,399
of binary search if you allow

873
00:34:40,399 --> 00:34:43,119
logarithmically many rounds

874
00:34:43,119 --> 00:34:44,560
how does this compare to the best

875
00:34:44,560 --> 00:34:46,079
solution you know that uses

876
00:34:46,079 --> 00:34:48,960
logarithmically many rounds right so

877
00:34:48,960 --> 00:34:51,119
so the difference between say an

878
00:34:51,119 --> 00:34:53,199
oblivious ram and garbled ram

879
00:34:53,199 --> 00:34:54,560
is first of all of course we're winning

880
00:34:54,560 --> 00:34:56,879
in terms of the round complexity uh at

881
00:34:56,879 --> 00:34:59,440
the moment we're paying an extra log

882
00:34:59,440 --> 00:35:02,640
factor compared to the best orams to be

883
00:35:02,640 --> 00:35:04,880
honest i fully expect that to go away i

884
00:35:04,880 --> 00:35:07,040
i was referring to the secure version

885
00:35:07,040 --> 00:35:10,720
right if you want to do two pc for a or

886
00:35:10,720 --> 00:35:13,680
but allow the round complexity to grow

887
00:35:13,680 --> 00:35:15,040
with the

888
00:35:15,040 --> 00:35:17,760
runtime so you're saying there is a log

889
00:35:17,760 --> 00:35:19,440
factor gap

890
00:35:19,440 --> 00:35:21,359
yes i mean so depending on what you're

891
00:35:21,359 --> 00:35:25,280
doing we are so for instance if you're

892
00:35:25,280 --> 00:35:28,480
using secure secure computation orm in

893
00:35:28,480 --> 00:35:29,920
conjunction with a garbled circuit then

894
00:35:29,920 --> 00:35:31,839
here ours is extremely competitive in

895
00:35:31,839 --> 00:35:33,280
terms of the communication cost and in

896
00:35:33,280 --> 00:35:34,560
fact i

897
00:35:34,560 --> 00:35:36,320
i sort of suspect it will win out in the

898
00:35:36,320 --> 00:35:38,320
end as we improve this technique

899
00:35:38,320 --> 00:35:40,079
if you are using something like a secret

900
00:35:40,079 --> 00:35:42,880
share based protocol um then here we're

901
00:35:42,880 --> 00:35:44,400
of course paying the extra security

902
00:35:44,400 --> 00:35:45,920
parameter overhead

903
00:35:45,920 --> 00:35:47,520
associated with the garbled circuit so

904
00:35:47,520 --> 00:35:49,119
there it depends a little bit more on

905
00:35:49,119 --> 00:35:51,680
your specific setting uh which would be

906
00:35:51,680 --> 00:35:52,560
better

907
00:35:52,560 --> 00:35:54,720
okay

908
00:35:54,720 --> 00:35:57,720
yes

909
00:36:02,000 --> 00:36:03,359
hello sir

910
00:36:03,359 --> 00:36:05,760
sir you have introduced lazy permutation

911
00:36:05,760 --> 00:36:08,800
network yes in garber circuits so can

912
00:36:08,800 --> 00:36:10,839
you please tell me

913
00:36:10,839 --> 00:36:14,000
uh instead of garber circuit where we

914
00:36:14,000 --> 00:36:16,400
can use this lazy permutation

915
00:36:16,400 --> 00:36:18,880
so that is a great question

916
00:36:18,880 --> 00:36:21,200
um

917
00:36:21,680 --> 00:36:24,000
i'm i'm not entirely sure to be honest i

918
00:36:24,000 --> 00:36:25,280
i don't have a good answer for you there

919
00:36:25,280 --> 00:36:27,359
where else it is useful i will say that

920
00:36:27,359 --> 00:36:29,680
within garbled circuits

921
00:36:29,680 --> 00:36:31,839
it seems

922
00:36:31,839 --> 00:36:34,079
it seems like a more powerful mechanism

923
00:36:34,079 --> 00:36:35,440
than just

924
00:36:35,440 --> 00:36:36,640
garbled ram

925
00:36:36,640 --> 00:36:38,480
uh because what it's really allowing you

926
00:36:38,480 --> 00:36:40,640
to do is dynamically run circuits in an

927
00:36:40,640 --> 00:36:42,560
arbitrary order and intuitively that

928
00:36:42,560 --> 00:36:44,400
seems extremely powerful

929
00:36:44,400 --> 00:36:46,240
we haven't found any use cases for this

930
00:36:46,240 --> 00:36:48,240
other than garbled ram yet though

931
00:36:48,240 --> 00:36:50,960
so nobody have used before

932
00:36:50,960 --> 00:36:52,880
the lazy permutation well so this is

933
00:36:52,880 --> 00:36:54,240
this is our construction this lazy

934
00:36:54,240 --> 00:36:55,760
permutation network we built for this

935
00:36:55,760 --> 00:36:58,320
paper okay so yeah thank you so much

936
00:36:58,320 --> 00:37:00,400
okay yeah i guess we can take further

937
00:37:00,400 --> 00:37:03,200
questions uh offline and let's think

938
00:37:03,200 --> 00:37:06,919
again dave

939
00:37:11,040 --> 00:37:13,119
okay so we're we're slightly late but

940
00:37:13,119 --> 00:37:15,599
the the next okay starts in seven

941
00:37:15,599 --> 00:37:17,920
minutes

942
00:37:20,720 --> 00:37:22,800
before you go can i just make out three

943
00:37:22,800 --> 00:37:23,839
quick

944
00:37:23,839 --> 00:37:26,480
three quick announcements firstly uh if

945
00:37:26,480 --> 00:37:27,760
it's not obvious

946
00:37:27,760 --> 00:37:30,000
this is cosmos one two

947
00:37:30,000 --> 00:37:33,040
where track one will happen uh cosmos

948
00:37:33,040 --> 00:37:34,640
three is

949
00:37:34,640 --> 00:37:36,240
well through that door or around the

950
00:37:36,240 --> 00:37:39,520
other way uh just in the uh the

951
00:37:39,520 --> 00:37:42,320
part of the uh the room here uh we do

952
00:37:42,320 --> 00:37:45,760
have track switch brakes uh to allow you

953
00:37:45,760 --> 00:37:47,200
to walk

954
00:37:47,200 --> 00:37:50,759
uh there

955
00:37:51,040 --> 00:37:52,480
to get there uh

956
00:37:52,480 --> 00:37:55,440
secondly i'd like to and uh uh ask you

957
00:37:55,440 --> 00:37:58,640
please all session shares or speakers

958
00:37:58,640 --> 00:38:00,640
please report to the desk either in here

959
00:38:00,640 --> 00:38:03,040
if you're in here or in cosmos three or

960
00:38:03,040 --> 00:38:06,160
uh before the session starts so we can

961
00:38:06,160 --> 00:38:08,000
instruct you on uh

962
00:38:08,000 --> 00:38:10,320
using the microphones and getting set up

963
00:38:10,320 --> 00:38:12,560
and finally yeah i i think this actually

964
00:38:12,560 --> 00:38:14,320
worked out in the end but please note we

965
00:38:14,320 --> 00:38:17,200
do have two microphones for questions

966
00:38:17,200 --> 00:38:18,720
also in the other room so please use

967
00:38:18,720 --> 00:38:20,880
those otherwise people online will not

968
00:38:20,880 --> 00:38:22,880
be able to hear the questions

969
00:38:22,880 --> 00:38:25,880
thanks

970
00:38:39,040 --> 00:38:42,040
foreign

971
00:38:55,280 --> 00:38:58,280
foreign

972
00:39:08,480 --> 00:39:11,480
uh

973
00:39:56,079 --> 00:39:59,079
um

