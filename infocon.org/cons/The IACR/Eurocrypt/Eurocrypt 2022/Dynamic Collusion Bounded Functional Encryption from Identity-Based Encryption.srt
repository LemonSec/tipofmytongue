1
00:00:00,000 --> 00:00:03,419
[Applause]

2
00:00:13,759 --> 00:00:16,759
this

3
00:00:26,720 --> 00:00:28,640
so for if anybody

4
00:00:28,640 --> 00:00:30,320
arrives late maybe you missed the

5
00:00:30,320 --> 00:00:32,159
announcement there will be

6
00:00:32,159 --> 00:00:34,239
um at quarter to six

7
00:00:34,239 --> 00:00:36,320
um some

8
00:00:36,320 --> 00:00:38,480
walking caravan leaving for the organ

9
00:00:38,480 --> 00:00:39,520
concert

10
00:00:39,520 --> 00:00:41,200
there are also some buses but we

11
00:00:41,200 --> 00:00:42,960
encourage people to walk since there are

12
00:00:42,960 --> 00:00:45,120
not enough passes okay

13
00:00:45,120 --> 00:00:47,280
okay so next talk is dynamic collusion

14
00:00:47,280 --> 00:00:49,039
bounded functional encryption from

15
00:00:49,039 --> 00:00:51,039
identity based encryption

16
00:00:51,039 --> 00:00:53,440
um george will lou will be giving the

17
00:00:53,440 --> 00:00:55,840
talk and this is joint work with richard

18
00:00:55,840 --> 00:00:59,520
garc and richard coil and breadwaters

19
00:00:59,520 --> 00:01:02,960
okay yeah hello i'm george

20
00:01:02,960 --> 00:01:04,559
so yeah as

21
00:01:04,559 --> 00:01:06,560
as she said our work is on dynamic

22
00:01:06,560 --> 00:01:08,159
pollution bounded functional encryption

23
00:01:08,159 --> 00:01:10,880
from identity based encryption

24
00:01:10,880 --> 00:01:11,760
so

25
00:01:11,760 --> 00:01:13,680
we can start with the concept many of

26
00:01:13,680 --> 00:01:15,360
you many of you are probably already

27
00:01:15,360 --> 00:01:17,520
pretty familiar which is just plain old

28
00:01:17,520 --> 00:01:19,119
functional encryption

29
00:01:19,119 --> 00:01:21,360
um

30
00:01:21,600 --> 00:01:23,040
oh

31
00:01:23,040 --> 00:01:24,720
so in this set in this setting you have

32
00:01:24,720 --> 00:01:27,920
like setup algorithm and a keygen

33
00:01:27,920 --> 00:01:29,680
which produces secret keys associated

34
00:01:29,680 --> 00:01:31,439
with a particular function

35
00:01:31,439 --> 00:01:33,280
and sort of like any public key

36
00:01:33,280 --> 00:01:34,880
primitive you can encrypt with the

37
00:01:34,880 --> 00:01:36,560
public key and decrypt with the secret

38
00:01:36,560 --> 00:01:38,640
keys

39
00:01:38,640 --> 00:01:40,240
and so what makes functional encryption

40
00:01:40,240 --> 00:01:42,240
functional is that even though you

41
00:01:42,240 --> 00:01:44,560
encrypt sort of just like any public key

42
00:01:44,560 --> 00:01:45,680
encryption

43
00:01:45,680 --> 00:01:48,079
when you decrypt

44
00:01:48,079 --> 00:01:50,640
with a particular function key

45
00:01:50,640 --> 00:01:52,479
what you produce is not the message

46
00:01:52,479 --> 00:01:55,040
itself but the evaluation of that

47
00:01:55,040 --> 00:01:56,079
message

48
00:01:56,079 --> 00:01:57,840
on the function associated with that

49
00:01:57,840 --> 00:02:00,960
function function key

50
00:02:00,960 --> 00:02:02,079
and so

51
00:02:02,079 --> 00:02:03,920
what this should

52
00:02:03,920 --> 00:02:05,040
and you know depending on what this

53
00:02:05,040 --> 00:02:07,520
function is you may it may reveal like

54
00:02:07,520 --> 00:02:08,800
more or less about the underlying

55
00:02:08,800 --> 00:02:09,758
message

56
00:02:09,758 --> 00:02:10,959
but

57
00:02:10,959 --> 00:02:11,760
for

58
00:02:11,760 --> 00:02:13,440
a functional encryption scheme to be

59
00:02:13,440 --> 00:02:15,520
secure it should sort of be the case

60
00:02:15,520 --> 00:02:16,560
that

61
00:02:16,560 --> 00:02:19,920
this function is all you learn about the

62
00:02:19,920 --> 00:02:21,599
when you decrypt

63
00:02:21,599 --> 00:02:24,239
so how to capture this

64
00:02:24,239 --> 00:02:26,560
idea a bit more formally is with this

65
00:02:26,560 --> 00:02:28,640
simulation security game

66
00:02:28,640 --> 00:02:31,120
where an adversary gets to request a

67
00:02:31,120 --> 00:02:34,000
cipher text and a bunch of function keys

68
00:02:34,000 --> 00:02:35,519
and they shouldn't be able to tell if

69
00:02:35,519 --> 00:02:36,480
these were

70
00:02:36,480 --> 00:02:39,440
produced by an honest

71
00:02:39,440 --> 00:02:41,920
honestly using the encrypt algorithm and

72
00:02:41,920 --> 00:02:44,239
the keygen algorithm or if there was

73
00:02:44,239 --> 00:02:46,160
actually a simulator which

74
00:02:46,160 --> 00:02:48,480
doesn't actually know the message itself

75
00:02:48,480 --> 00:02:50,080
but only knows the evaluation of the

76
00:02:50,080 --> 00:02:52,239
message on those functions

77
00:02:52,239 --> 00:02:54,000
and has to simulate the

78
00:02:54,000 --> 00:02:57,440
keys and ciphertext in this way

79
00:02:57,440 --> 00:02:59,200
so

80
00:02:59,200 --> 00:03:00,480
there have been you know functional

81
00:03:00,480 --> 00:03:02,239
encryption has turned out to be like a

82
00:03:02,239 --> 00:03:04,000
pretty cool concept a lot of people like

83
00:03:04,000 --> 00:03:05,760
it um but

84
00:03:05,760 --> 00:03:07,920
the sort of downside is that at least as

85
00:03:07,920 --> 00:03:09,519
i've described it here functional

86
00:03:09,519 --> 00:03:11,280
encryption has turned out to be pretty

87
00:03:11,280 --> 00:03:13,599
hard to construct

88
00:03:13,599 --> 00:03:14,640
so

89
00:03:14,640 --> 00:03:18,080
an actual relaxation of this was the

90
00:03:18,080 --> 00:03:19,519
definition of bounded collusion

91
00:03:19,519 --> 00:03:21,280
functional encryption

92
00:03:21,280 --> 00:03:22,959
which

93
00:03:22,959 --> 00:03:25,120
for like correctness purpose correctness

94
00:03:25,120 --> 00:03:26,000
works

95
00:03:26,000 --> 00:03:27,840
almost exactly the same as regular

96
00:03:27,840 --> 00:03:29,440
functional encryption

97
00:03:29,440 --> 00:03:31,760
the only syntactical difference is that

98
00:03:31,760 --> 00:03:33,680
at setup time you also take in this

99
00:03:33,680 --> 00:03:35,840
collusion bound queue

100
00:03:35,840 --> 00:03:37,120
and

101
00:03:37,120 --> 00:03:39,599
you only sort of guarantee security as

102
00:03:39,599 --> 00:03:41,440
long as an adversary

103
00:03:41,440 --> 00:03:44,799
gets to see fewer less

104
00:03:44,840 --> 00:03:47,760
keys so

105
00:03:47,760 --> 00:03:49,440
bounded collision functional encryption

106
00:03:49,440 --> 00:03:51,360
has also you know turned out to be a

107
00:03:51,360 --> 00:03:53,840
pretty like successful definition it

108
00:03:53,840 --> 00:03:55,760
turns out it is actually much easier to

109
00:03:55,760 --> 00:03:57,360
construct than

110
00:03:57,360 --> 00:03:59,280
functional encryption and it actually

111
00:03:59,280 --> 00:04:02,000
does come up in a lot of

112
00:04:02,000 --> 00:04:04,239
applications where you want something

113
00:04:04,239 --> 00:04:06,560
sort of like functional encryption but

114
00:04:06,560 --> 00:04:09,680
you know maybe not quite as strong

115
00:04:09,680 --> 00:04:11,599
and yeah there's been a bunch of works

116
00:04:11,599 --> 00:04:12,840
in this

117
00:04:12,840 --> 00:04:16,000
area and just to elaborate a little bit

118
00:04:16,000 --> 00:04:18,880
further on the easier construct part

119
00:04:18,880 --> 00:04:20,160
in the case of bounded collision

120
00:04:20,160 --> 00:04:22,079
functional encryption we we can actually

121
00:04:22,079 --> 00:04:23,040
we actually already know how to

122
00:04:23,040 --> 00:04:24,240
construct it

123
00:04:24,240 --> 00:04:25,600
for

124
00:04:25,600 --> 00:04:28,000
all polynomial size circuits just from

125
00:04:28,000 --> 00:04:29,600
public key encryption

126
00:04:29,600 --> 00:04:31,520
which is pretty much like the best you

127
00:04:31,520 --> 00:04:33,520
can hope for in something in a case like

128
00:04:33,520 --> 00:04:35,758
this

129
00:04:36,400 --> 00:04:38,080
i guess unfortunately like it's pretty

130
00:04:38,080 --> 00:04:40,080
clear that like this is not

131
00:04:40,080 --> 00:04:42,800
this is not functional encryption and

132
00:04:42,800 --> 00:04:45,520
from sort of a practical perspective

133
00:04:45,520 --> 00:04:47,600
having this collusion bound is pretty

134
00:04:47,600 --> 00:04:49,280
limiting so

135
00:04:49,280 --> 00:04:51,520
having this so at setup time you have to

136
00:04:51,520 --> 00:04:52,960
you know decide what your collusion

137
00:04:52,960 --> 00:04:54,960
bound is you have to have some foresight

138
00:04:54,960 --> 00:04:56,080
on how you're actually going to be using

139
00:04:56,080 --> 00:04:58,400
your functional encryption system

140
00:04:58,400 --> 00:05:00,240
and if you if you know an adversary

141
00:05:00,240 --> 00:05:03,120
happens to get their hand on more than q

142
00:05:03,120 --> 00:05:05,280
keys somehow then you're like there's no

143
00:05:05,280 --> 00:05:07,840
security at all in your system

144
00:05:07,840 --> 00:05:09,919
and finally you know even when you since

145
00:05:09,919 --> 00:05:11,280
this is a public key system there could

146
00:05:11,280 --> 00:05:13,360
be multiple encrypters and they all have

147
00:05:13,360 --> 00:05:15,039
to sort of you know agree yeah this

148
00:05:15,039 --> 00:05:17,120
seems like a reasonable key value to use

149
00:05:17,120 --> 00:05:19,919
in this system

150
00:05:20,400 --> 00:05:21,280
so

151
00:05:21,280 --> 00:05:23,039
we can also look at

152
00:05:23,039 --> 00:05:24,720
bounded collusion functional encryption

153
00:05:24,720 --> 00:05:26,720
or i guess functional encryption

154
00:05:26,720 --> 00:05:28,400
in general from a bit more of a

155
00:05:28,400 --> 00:05:30,960
theoretical perspective so

156
00:05:30,960 --> 00:05:32,880
i think a couple slides ago i said that

157
00:05:32,880 --> 00:05:34,639
turns out like full functional

158
00:05:34,639 --> 00:05:37,440
encryption is pretty hard to construct

159
00:05:37,440 --> 00:05:38,639
and in fact

160
00:05:38,639 --> 00:05:40,400
using the simulation definition that

161
00:05:40,400 --> 00:05:41,600
i've given

162
00:05:41,600 --> 00:05:43,840
unbounded like fully collision resistant

163
00:05:43,840 --> 00:05:45,120
functional encryption is actually

164
00:05:45,120 --> 00:05:47,280
impossible

165
00:05:47,280 --> 00:05:48,160
so

166
00:05:48,160 --> 00:05:50,320
i won't go into too much detail on how

167
00:05:50,320 --> 00:05:51,280
this

168
00:05:51,280 --> 00:05:53,440
is actually shown but the basic

169
00:05:53,440 --> 00:05:55,120
intuition is that

170
00:05:55,120 --> 00:05:56,720
the since the simulator doesn't know the

171
00:05:56,720 --> 00:05:58,720
message itself when it's trying when it

172
00:05:58,720 --> 00:06:00,960
needs to simulate the ciphertext it

173
00:06:00,960 --> 00:06:02,639
needs to program in

174
00:06:02,639 --> 00:06:03,840
all the

175
00:06:03,840 --> 00:06:05,360
all the function outputs into this

176
00:06:05,360 --> 00:06:06,800
ciphertext

177
00:06:06,800 --> 00:06:08,319
and so

178
00:06:08,319 --> 00:06:10,400
what this like impossibility result sort

179
00:06:10,400 --> 00:06:12,319
of actually rules out is any sort of

180
00:06:12,319 --> 00:06:15,919
simulation security even for bounded

181
00:06:15,919 --> 00:06:18,240
bounded collusion functional encryption

182
00:06:18,240 --> 00:06:19,840
when your ciphertext is sublinear in

183
00:06:19,840 --> 00:06:22,400
your number of keys

184
00:06:22,400 --> 00:06:25,360
and as a brief like side note as well

185
00:06:25,360 --> 00:06:27,360
some of you may be aware there's also an

186
00:06:27,360 --> 00:06:29,199
indistinguishability based definition of

187
00:06:29,199 --> 00:06:31,680
functional encryption which i guess

188
00:06:31,680 --> 00:06:33,840
fortunately is actually constructable

189
00:06:33,840 --> 00:06:35,840
but even in this case you can sort of

190
00:06:35,840 --> 00:06:37,120
see that

191
00:06:37,120 --> 00:06:39,280
when you when you try to force it to be

192
00:06:39,280 --> 00:06:41,680
sublinear and you're collusion bound

193
00:06:41,680 --> 00:06:42,479
it's

194
00:06:42,479 --> 00:06:44,160
it gives you

195
00:06:44,160 --> 00:06:46,400
the full

196
00:06:46,400 --> 00:06:48,080
the full like collusion resistant

197
00:06:48,080 --> 00:06:50,160
functional encryption which we only know

198
00:06:50,160 --> 00:06:51,840
how to realize from like fairly hard

199
00:06:51,840 --> 00:06:54,080
cryptographic assumptions

200
00:06:54,080 --> 00:06:56,319
uh where in contrast if we

201
00:06:56,319 --> 00:06:58,800
allow our scheme to grow linearly

202
00:06:58,800 --> 00:06:59,680
these

203
00:06:59,680 --> 00:07:00,560
the

204
00:07:00,560 --> 00:07:02,800
the prior works actually

205
00:07:02,800 --> 00:07:04,720
achieve like linear

206
00:07:04,720 --> 00:07:07,280
dependence in your collusion bound

207
00:07:07,280 --> 00:07:09,280
so it seems like this is like a pretty

208
00:07:09,280 --> 00:07:11,599
tight you know we're pretty this is like

209
00:07:11,599 --> 00:07:13,280
pretty tight results right like if it's

210
00:07:13,280 --> 00:07:15,599
sublinear we

211
00:07:15,599 --> 00:07:17,520
it's either impossible or like you can

212
00:07:17,520 --> 00:07:20,240
only realize from io and if it's linear

213
00:07:20,240 --> 00:07:21,919
we can get it from public key encryption

214
00:07:21,919 --> 00:07:23,759
right um

215
00:07:23,759 --> 00:07:25,520
but where there's like this slight gap

216
00:07:25,520 --> 00:07:27,919
here is that these impossibility results

217
00:07:27,919 --> 00:07:30,400
only can only really care about the

218
00:07:30,400 --> 00:07:33,280
or talk about the ciphertext size right

219
00:07:33,280 --> 00:07:34,960
and so

220
00:07:34,960 --> 00:07:35,919
this

221
00:07:35,919 --> 00:07:37,919
sort of brings us to

222
00:07:37,919 --> 00:07:39,919
the definition that we

223
00:07:39,919 --> 00:07:41,919
introduce in our paper which is a

224
00:07:41,919 --> 00:07:44,160
dynamic bounded collision function

225
00:07:44,160 --> 00:07:46,240
collision functional encryption

226
00:07:46,240 --> 00:07:47,680
and so

227
00:07:47,680 --> 00:07:49,440
whereas in normal so it's a pretty

228
00:07:49,440 --> 00:07:51,039
simple change whereas a normal

229
00:07:51,039 --> 00:07:53,440
functional encryption in normal bounded

230
00:07:53,440 --> 00:07:55,520
collision functional encryption which i

231
00:07:55,520 --> 00:07:57,520
think will refer to as like static

232
00:07:57,520 --> 00:07:59,360
bounded collision functional encryption

233
00:07:59,360 --> 00:08:00,560
from now on

234
00:08:00,560 --> 00:08:01,520
the

235
00:08:01,520 --> 00:08:03,280
collusion bound is specified at setup

236
00:08:03,280 --> 00:08:04,160
time

237
00:08:04,160 --> 00:08:06,319
instead we can just move this collision

238
00:08:06,319 --> 00:08:07,599
bound to

239
00:08:07,599 --> 00:08:09,360
encrypt time because

240
00:08:09,360 --> 00:08:11,120
that's when you know your ciphertext is

241
00:08:11,120 --> 00:08:12,720
actually generated

242
00:08:12,720 --> 00:08:15,120
and so notice here that now your setup

243
00:08:15,120 --> 00:08:17,520
and keygen algorithms

244
00:08:17,520 --> 00:08:19,599
have to like run independently or like

245
00:08:19,599 --> 00:08:21,120
without knowledge of this collusion

246
00:08:21,120 --> 00:08:23,520
bound

247
00:08:24,240 --> 00:08:25,440
so

248
00:08:25,440 --> 00:08:27,360
this kind of

249
00:08:27,360 --> 00:08:29,039
this is kind of like a bit of a stronger

250
00:08:29,039 --> 00:08:31,599
notion and it does solve these like

251
00:08:31,599 --> 00:08:34,320
practicality i guess issues with static

252
00:08:34,320 --> 00:08:36,559
bounded collision functional encryption

253
00:08:36,559 --> 00:08:38,559
since you know at setup time you don't

254
00:08:38,559 --> 00:08:39,919
have to worry about any of this

255
00:08:39,919 --> 00:08:42,000
collusion bounded stuff at all

256
00:08:42,000 --> 00:08:44,080
and

257
00:08:44,080 --> 00:08:45,519
moreover like if you have different

258
00:08:45,519 --> 00:08:47,279
encryptors they can even like choose

259
00:08:47,279 --> 00:08:49,279
different collusion bounds to encrypt

260
00:08:49,279 --> 00:08:52,320
their messages too

261
00:08:53,519 --> 00:08:54,720
so

262
00:08:54,720 --> 00:08:55,680
right

263
00:08:55,680 --> 00:08:58,080
in our paper what we get is okay first

264
00:08:58,080 --> 00:09:00,320
we introduce a dynamic collision-bounded

265
00:09:00,320 --> 00:09:01,360
fe

266
00:09:01,360 --> 00:09:02,720
and then

267
00:09:02,720 --> 00:09:06,240
we construct this primitive from ibe

268
00:09:06,240 --> 00:09:07,680
i guess i'd also like to mention there

269
00:09:07,680 --> 00:09:09,440
was a concurrent work

270
00:09:09,440 --> 00:09:12,560
uh by mvy which does the same thing

271
00:09:12,560 --> 00:09:13,920
and

272
00:09:13,920 --> 00:09:15,760
they also consider this problem of

273
00:09:15,760 --> 00:09:18,480
dynamic fe in the uniform model for like

274
00:09:18,480 --> 00:09:20,320
turing machines where they get some

275
00:09:20,320 --> 00:09:23,839
results from lwe

276
00:09:24,640 --> 00:09:28,480
okay so how do we actually get from ibe

277
00:09:28,480 --> 00:09:29,760
to

278
00:09:29,760 --> 00:09:32,399
dynamic fe so we have a we have a couple

279
00:09:32,399 --> 00:09:34,399
transformations

280
00:09:34,399 --> 00:09:35,519
so

281
00:09:35,519 --> 00:09:39,120
even though it says we start with ibe

282
00:09:39,120 --> 00:09:40,399
sort of maybe a better way to think

283
00:09:40,399 --> 00:09:42,000
about it is we start with you know these

284
00:09:42,000 --> 00:09:44,320
existing constructions of static fe

285
00:09:44,320 --> 00:09:46,560
schemes and we really want to like

286
00:09:46,560 --> 00:09:47,360
you know

287
00:09:47,360 --> 00:09:50,240
make the keygen and setup more efficient

288
00:09:50,240 --> 00:09:52,560
so that it can become dynamic

289
00:09:52,560 --> 00:09:53,920
so

290
00:09:53,920 --> 00:09:55,360
starting with

291
00:09:55,360 --> 00:09:58,160
starting with using ibe in some of these

292
00:09:58,160 --> 00:10:00,720
static schemes lets us build

293
00:10:00,720 --> 00:10:02,720
this intermediate primitive we call

294
00:10:02,720 --> 00:10:04,640
tagged functional encryption

295
00:10:04,640 --> 00:10:06,320
and you can think about this as sort of

296
00:10:06,320 --> 00:10:07,519
an analog

297
00:10:07,519 --> 00:10:08,959
of

298
00:10:08,959 --> 00:10:10,800
ibe for

299
00:10:10,800 --> 00:10:12,720
static functional encryption

300
00:10:12,720 --> 00:10:14,399
where

301
00:10:14,399 --> 00:10:16,800
where an ibe scheme is just you know

302
00:10:16,800 --> 00:10:18,160
maybe like you can think about it as

303
00:10:18,160 --> 00:10:19,839
like an exponential number of like

304
00:10:19,839 --> 00:10:21,440
public key schemes sort of sharing a

305
00:10:21,440 --> 00:10:22,959
single setup

306
00:10:22,959 --> 00:10:25,120
tagged functional encryption scheme is

307
00:10:25,120 --> 00:10:27,200
sort of a bunch of static functional

308
00:10:27,200 --> 00:10:29,040
encryption schemes which all share the

309
00:10:29,040 --> 00:10:32,160
same setup algorithm

310
00:10:32,160 --> 00:10:33,120
and

311
00:10:33,120 --> 00:10:34,959
now once we have this tag functional

312
00:10:34,959 --> 00:10:37,279
encryption scheme

313
00:10:37,279 --> 00:10:39,440
we also want to make remember we also in

314
00:10:39,440 --> 00:10:41,920
the definition of dynamic functional

315
00:10:41,920 --> 00:10:43,839
encryption your keygen also doesn't know

316
00:10:43,839 --> 00:10:45,760
of your collision bound right so somehow

317
00:10:45,760 --> 00:10:48,000
your keygen algorithm also has to be

318
00:10:48,000 --> 00:10:48,959
efficient

319
00:10:48,959 --> 00:10:51,040
and the way we do this

320
00:10:51,040 --> 00:10:52,240
and so

321
00:10:52,240 --> 00:10:55,200
so our next goal i guess is to produce

322
00:10:55,200 --> 00:10:57,519
explicitly a static fe scheme which is

323
00:10:57,519 --> 00:11:00,320
which has an efficient setup and keygen

324
00:11:00,320 --> 00:11:02,320
algorithm

325
00:11:02,320 --> 00:11:03,360
and

326
00:11:03,360 --> 00:11:05,360
basically the way we do this is we we

327
00:11:05,360 --> 00:11:06,959
take advantage of the fact that we do

328
00:11:06,959 --> 00:11:08,480
have

329
00:11:08,480 --> 00:11:10,399
we can we can efficiently set up like

330
00:11:10,399 --> 00:11:11,519
many

331
00:11:11,519 --> 00:11:14,560
uh static fe schemes in parallel

332
00:11:14,560 --> 00:11:16,160
and

333
00:11:16,160 --> 00:11:18,560
we use this to sort of when we when we

334
00:11:18,560 --> 00:11:20,640
want the static fe scheme which has an

335
00:11:20,640 --> 00:11:23,120
efficient key gen we just run

336
00:11:23,120 --> 00:11:25,279
the tagged fe scheme in parallel with a

337
00:11:25,279 --> 00:11:28,160
lower collusion bound but sort of more

338
00:11:28,160 --> 00:11:30,880
parallel instances and

339
00:11:30,880 --> 00:11:32,720
in and then when we when it comes time

340
00:11:32,720 --> 00:11:34,800
to key gen we only give out the key for

341
00:11:34,800 --> 00:11:37,040
a single one of these

342
00:11:37,040 --> 00:11:38,640
uh tagged

343
00:11:38,640 --> 00:11:41,120
instances of the tag that fee

344
00:11:41,120 --> 00:11:42,880
and finally once both of these

345
00:11:42,880 --> 00:11:46,240
algorithms are efficient we can

346
00:11:46,240 --> 00:11:48,399
almost direct we can pretty

347
00:11:48,399 --> 00:11:51,040
or at least in a single step go to a

348
00:11:51,040 --> 00:11:53,120
dynamic functional encryption if you're

349
00:11:53,120 --> 00:11:54,000
which

350
00:11:54,000 --> 00:11:55,839
you know the main change here is sort of

351
00:11:55,839 --> 00:11:58,240
a syntactic one where we need to move

352
00:11:58,240 --> 00:11:59,920
our setup algorithm where we need to

353
00:11:59,920 --> 00:12:02,240
move occlusion bound from the setup

354
00:12:02,240 --> 00:12:06,000
algorithm to the encrypt algorithm

355
00:12:06,000 --> 00:12:08,399
so i'll go over all these steps a little

356
00:12:08,399 --> 00:12:09,760
a bit more in detail but that was just

357
00:12:09,760 --> 00:12:12,639
sort of the high level road map

358
00:12:12,639 --> 00:12:14,320
so

359
00:12:14,320 --> 00:12:17,360
okay we can start by defining this

360
00:12:17,360 --> 00:12:18,720
intermediate

361
00:12:18,720 --> 00:12:20,639
primitive of

362
00:12:20,639 --> 00:12:23,279
tag bounded functional encryption

363
00:12:23,279 --> 00:12:24,800
so

364
00:12:24,800 --> 00:12:26,959
what this like as i said what this is is

365
00:12:26,959 --> 00:12:29,200
pretty much an analog of the

366
00:12:29,200 --> 00:12:32,639
of uh ibe for static bounded functional

367
00:12:32,639 --> 00:12:34,079
encryption

368
00:12:34,079 --> 00:12:36,560
so every every key in ciphertext has a

369
00:12:36,560 --> 00:12:39,040
tag associated with it and it can only

370
00:12:39,040 --> 00:12:41,040
decrypt the matching tags

371
00:12:41,040 --> 00:12:43,040
and sort of just like ibe

372
00:12:43,040 --> 00:12:45,120
your our efficiency is like poly

373
00:12:45,120 --> 00:12:48,720
logarithmic in the tag space

374
00:12:49,440 --> 00:12:51,279
and just to emphasize how how exactly

375
00:12:51,279 --> 00:12:54,079
this works notice that it really they

376
00:12:54,079 --> 00:12:56,320
really are just like parallel instances

377
00:12:56,320 --> 00:12:58,880
of the static scheme even though the

378
00:12:58,880 --> 00:13:00,959
collision bound here is set to two it's

379
00:13:00,959 --> 00:13:02,160
okay that

380
00:13:02,160 --> 00:13:03,760
you gave we gave out like seven keys in

381
00:13:03,760 --> 00:13:06,320
total so long as for under for each

382
00:13:06,320 --> 00:13:08,880
single tag we've given out at most our

383
00:13:08,880 --> 00:13:10,240
collusion bound

384
00:13:10,240 --> 00:13:11,600
and you know the security i guess is

385
00:13:11,600 --> 00:13:14,000
only broken when you exceed that on any

386
00:13:14,000 --> 00:13:16,639
single tag

387
00:13:16,639 --> 00:13:17,680
okay

388
00:13:17,680 --> 00:13:20,000
so to go from ib to tagged functional

389
00:13:20,000 --> 00:13:22,000
encryption

390
00:13:22,000 --> 00:13:24,399
sort of as i said as i said earlier we

391
00:13:24,399 --> 00:13:27,040
start with some of these uh

392
00:13:27,040 --> 00:13:28,800
static bounded functional encryption

393
00:13:28,800 --> 00:13:30,399
schemes

394
00:13:30,399 --> 00:13:31,760
that are constructed from public

395
00:13:31,760 --> 00:13:33,040
encryption

396
00:13:33,040 --> 00:13:36,720
so there's this line of work which all

397
00:13:36,720 --> 00:13:39,040
sort of have a similar flavor

398
00:13:39,040 --> 00:13:41,680
of construction in our actual paper we

399
00:13:41,680 --> 00:13:45,120
use the av 19 result to get

400
00:13:45,120 --> 00:13:46,079
i guess

401
00:13:46,079 --> 00:13:48,240
q bounded dynamic functional encryption

402
00:13:48,240 --> 00:13:51,279
for p slash poly but

403
00:13:51,279 --> 00:13:53,360
just for like

404
00:13:53,360 --> 00:13:55,279
just at a high level these all sort of

405
00:13:55,279 --> 00:13:57,839
have the same overall structure uh which

406
00:13:57,839 --> 00:13:58,639
we

407
00:13:58,639 --> 00:14:00,639
which we can use

408
00:14:00,639 --> 00:14:03,199
and what this is is in the scheme how

409
00:14:03,199 --> 00:14:05,199
these schemes generally work is that if

410
00:14:05,199 --> 00:14:07,279
you want to produce a ciphertext for a

411
00:14:07,279 --> 00:14:10,000
message you first have a universal

412
00:14:10,000 --> 00:14:10,959
circuit

413
00:14:10,959 --> 00:14:12,160
which

414
00:14:12,160 --> 00:14:14,160
with the message hard coded which takes

415
00:14:14,160 --> 00:14:15,600
in a

416
00:14:15,600 --> 00:14:18,320
circuit and evaluates that circuit c on

417
00:14:18,320 --> 00:14:20,320
your message m

418
00:14:20,320 --> 00:14:22,160
and then you compute a garbled circuit

419
00:14:22,160 --> 00:14:23,680
of this

420
00:14:23,680 --> 00:14:25,920
circuit

421
00:14:25,920 --> 00:14:27,120
and

422
00:14:27,120 --> 00:14:28,639
there's also a bunch of public key

423
00:14:28,639 --> 00:14:30,800
encryption schemes and what you do is

424
00:14:30,800 --> 00:14:33,519
you encrypt the input labels of your

425
00:14:33,519 --> 00:14:34,959
garbold circuit

426
00:14:34,959 --> 00:14:36,800
under each of these public encryption

427
00:14:36,800 --> 00:14:38,720
schemes

428
00:14:38,720 --> 00:14:41,600
so when it comes time to produce a

429
00:14:41,600 --> 00:14:45,040
function key for like some particular

430
00:14:45,040 --> 00:14:47,519
for some particular function

431
00:14:47,519 --> 00:14:48,560
you just

432
00:14:48,560 --> 00:14:51,600
compute you just compute the secret keys

433
00:14:51,600 --> 00:14:53,760
which allow you to decrypt the input

434
00:14:53,760 --> 00:14:56,240
labels which will allow you to evaluate

435
00:14:56,240 --> 00:14:58,880
the garbled circuit at that particular c

436
00:14:58,880 --> 00:15:00,959
value

437
00:15:00,959 --> 00:15:03,360
and that gives you the

438
00:15:03,360 --> 00:15:05,040
and that gives you this gives you like a

439
00:15:05,040 --> 00:15:07,120
some static bounded functional

440
00:15:07,120 --> 00:15:08,959
encryption scheme

441
00:15:08,959 --> 00:15:11,440
so since our starting point is ibe

442
00:15:11,440 --> 00:15:13,519
we can pretty simply just replace all

443
00:15:13,519 --> 00:15:15,600
these different public key schemes with

444
00:15:15,600 --> 00:15:18,000
a single ibe scheme and instead of you

445
00:15:18,000 --> 00:15:19,839
know encrypting to different public keys

446
00:15:19,839 --> 00:15:20,959
we'll just encrypt to different

447
00:15:20,959 --> 00:15:22,880
identities

448
00:15:22,880 --> 00:15:24,560
but once we have this it's actually

449
00:15:24,560 --> 00:15:26,560
really easy to go

450
00:15:26,560 --> 00:15:28,480
to this tagged functional encryption

451
00:15:28,480 --> 00:15:30,639
right we just add our tag to the id

452
00:15:30,639 --> 00:15:31,600
space

453
00:15:31,600 --> 00:15:34,320
and the sort of efficiency and security

454
00:15:34,320 --> 00:15:35,519
properties that we wanted from our

455
00:15:35,519 --> 00:15:37,600
tagged functional encryption scheme

456
00:15:37,600 --> 00:15:40,480
pretty much follow from the same the

457
00:15:40,480 --> 00:15:42,000
corresponding like efficiency and

458
00:15:42,000 --> 00:15:46,399
security in an ibe scheme

459
00:15:47,360 --> 00:15:48,560
so

460
00:15:48,560 --> 00:15:49,759
okay so now that we have our tag

461
00:15:49,759 --> 00:15:51,360
functional encryption

462
00:15:51,360 --> 00:15:53,199
our next step is to go to this efficient

463
00:15:53,199 --> 00:15:54,399
static form

464
00:15:54,399 --> 00:15:57,360
and remember the main goal here

465
00:15:57,360 --> 00:15:59,360
is to make sure that our keygen is

466
00:15:59,360 --> 00:16:00,880
efficient

467
00:16:00,880 --> 00:16:01,759
so

468
00:16:01,759 --> 00:16:04,399
how we do this is we run our tags

469
00:16:04,399 --> 00:16:06,480
like concretely as we run our tag scheme

470
00:16:06,480 --> 00:16:08,880
on a tag space of q and the collision

471
00:16:08,880 --> 00:16:11,759
bound equal to the security parameter

472
00:16:11,759 --> 00:16:13,920
so

473
00:16:14,000 --> 00:16:16,240
and at keychain time

474
00:16:16,240 --> 00:16:17,680
instead of you know

475
00:16:17,680 --> 00:16:19,040
maybe like

476
00:16:19,040 --> 00:16:21,279
i don't know what else you could do but

477
00:16:21,279 --> 00:16:23,120
what you do is you

478
00:16:23,120 --> 00:16:25,040
just pick a random tag

479
00:16:25,040 --> 00:16:27,120
and you

480
00:16:27,120 --> 00:16:31,120
give out a key for that that tag

481
00:16:31,120 --> 00:16:33,279
and we you can you can sort of argue by

482
00:16:33,279 --> 00:16:35,360
this like concentration bound if you

483
00:16:35,360 --> 00:16:36,959
notice there's q

484
00:16:36,959 --> 00:16:40,079
q separate instances here in expectation

485
00:16:40,079 --> 00:16:41,040
each

486
00:16:41,040 --> 00:16:43,600
each tag will only get one key you can

487
00:16:43,600 --> 00:16:45,360
concentration bound the probability that

488
00:16:45,360 --> 00:16:47,519
any that like any

489
00:16:47,519 --> 00:16:50,320
any tag gets more than lambda with like

490
00:16:50,320 --> 00:16:52,000
negligible

491
00:16:52,000 --> 00:16:53,440
and of course

492
00:16:53,440 --> 00:16:54,720
for this to

493
00:16:54,720 --> 00:16:57,199
you know work out correctness wise you

494
00:16:57,199 --> 00:16:59,040
do need to encrypt

495
00:16:59,040 --> 00:17:02,319
all q of these tags

496
00:17:03,440 --> 00:17:05,760
okay so

497
00:17:05,760 --> 00:17:07,599
finally last step

498
00:17:07,599 --> 00:17:09,520
we have the now that we have our

499
00:17:09,520 --> 00:17:11,839
efficient static scheme

500
00:17:11,839 --> 00:17:14,640
our our goal here is just to move this

501
00:17:14,640 --> 00:17:18,480
this q input from setup to encrypt right

502
00:17:18,480 --> 00:17:20,160
and so this uses a pretty we use a

503
00:17:20,160 --> 00:17:22,319
pretty standard powers of two trick

504
00:17:22,319 --> 00:17:23,679
where

505
00:17:23,679 --> 00:17:25,919
we run setup in key gen to sort of

506
00:17:25,919 --> 00:17:27,359
instantiate

507
00:17:27,359 --> 00:17:29,039
lambda different

508
00:17:29,039 --> 00:17:31,760
lambda different static fe schemes where

509
00:17:31,760 --> 00:17:33,440
each of these schemes are run on like

510
00:17:33,440 --> 00:17:35,200
collusion bound

511
00:17:35,200 --> 00:17:37,520
which are the powers of two

512
00:17:37,520 --> 00:17:39,520
and remember since our setup and keygen

513
00:17:39,520 --> 00:17:41,280
are efficient now it's all right that

514
00:17:41,280 --> 00:17:43,039
this goes up to exponential in your

515
00:17:43,039 --> 00:17:45,840
security parameter

516
00:17:45,840 --> 00:17:47,280
since there's only lambda of them even

517
00:17:47,280 --> 00:17:49,600
running all of these are is efficient

518
00:17:49,600 --> 00:17:51,679
um and when it comes time to encrypt and

519
00:17:51,679 --> 00:17:53,600
now you know you're collusion bound you

520
00:17:53,600 --> 00:17:55,360
can just pick the power of the closest

521
00:17:55,360 --> 00:17:57,840
power of two larger than your security

522
00:17:57,840 --> 00:18:00,880
parameter and just encrypt to that

523
00:18:00,880 --> 00:18:03,280
scheme

524
00:18:03,360 --> 00:18:04,960
okay so

525
00:18:04,960 --> 00:18:06,480
to summarize

526
00:18:06,480 --> 00:18:07,440
we

527
00:18:07,440 --> 00:18:08,960
introduce

528
00:18:08,960 --> 00:18:10,880
dynamic founded

529
00:18:10,880 --> 00:18:12,880
functional encryption and build it

530
00:18:12,880 --> 00:18:14,559
from ibe

531
00:18:14,559 --> 00:18:17,360
and then i can i guess i'll end off with

532
00:18:17,360 --> 00:18:19,039
a couple of open directions that this

533
00:18:19,039 --> 00:18:22,000
paper leaves so

534
00:18:22,000 --> 00:18:25,919
one is we is transforming any static fe

535
00:18:25,919 --> 00:18:28,160
scheme to dynamic so you know there's

536
00:18:28,160 --> 00:18:29,200
been a

537
00:18:29,200 --> 00:18:30,559
you know if you remember from like the

538
00:18:30,559 --> 00:18:32,160
prior work slide or something there's

539
00:18:32,160 --> 00:18:35,200
been like many schemes in the

540
00:18:35,200 --> 00:18:36,960
static setting

541
00:18:36,960 --> 00:18:38,640
and

542
00:18:38,640 --> 00:18:39,840
you know

543
00:18:39,840 --> 00:18:42,640
our our transformation here you know

544
00:18:42,640 --> 00:18:45,440
takes advantage of like a particular

545
00:18:45,440 --> 00:18:47,520
you know a particular structure in like

546
00:18:47,520 --> 00:18:51,200
the gvw or av um style

547
00:18:51,200 --> 00:18:53,440
static fe schemes but suppose you know

548
00:18:53,440 --> 00:18:55,679
tomorrow someone came out with like some

549
00:18:55,679 --> 00:18:58,240
like completely new like static scheme

550
00:18:58,240 --> 00:18:59,200
which

551
00:18:59,200 --> 00:19:01,200
maybe works either has some like cool

552
00:19:01,200 --> 00:19:04,080
property or works in some different like

553
00:19:04,080 --> 00:19:05,200
on some different like model of

554
00:19:05,200 --> 00:19:07,760
computation like how much work would it

555
00:19:07,760 --> 00:19:11,520
be like to make that dynamic and

556
00:19:11,520 --> 00:19:13,919
we actually have the e-print work on at

557
00:19:13,919 --> 00:19:17,200
least making progress towards this on

558
00:19:17,200 --> 00:19:19,120
going from static to our like

559
00:19:19,120 --> 00:19:21,039
intermediate tag notion

560
00:19:21,039 --> 00:19:23,600
generically

561
00:19:23,600 --> 00:19:25,200
and another

562
00:19:25,200 --> 00:19:27,440
question is if you remember

563
00:19:27,440 --> 00:19:29,440
we had this motivation of sort of

564
00:19:29,440 --> 00:19:30,960
closing this

565
00:19:30,960 --> 00:19:32,799
gap between the negative and positive

566
00:19:32,799 --> 00:19:34,799
results of

567
00:19:34,799 --> 00:19:36,720
in terms of bounded collusion functional

568
00:19:36,720 --> 00:19:38,320
encryption

569
00:19:38,320 --> 00:19:39,440
and

570
00:19:39,440 --> 00:19:42,400
you know a possible future and something

571
00:19:42,400 --> 00:19:44,240
else to explore might be like how could

572
00:19:44,240 --> 00:19:46,640
this maybe even further be closed so for

573
00:19:46,640 --> 00:19:48,640
example there's a couple bounded

574
00:19:48,640 --> 00:19:50,880
collision schemes where

575
00:19:50,880 --> 00:19:52,559
the dependence on the collision bound is

576
00:19:52,559 --> 00:19:53,600
additive

577
00:19:53,600 --> 00:19:55,120
um

578
00:19:55,120 --> 00:19:57,280
and like can this be sort of either done

579
00:19:57,280 --> 00:19:58,480
like

580
00:19:58,480 --> 00:20:00,240
even better or like

581
00:20:00,240 --> 00:20:02,480
more generically

582
00:20:02,480 --> 00:20:07,480
and yeah that is it for my talk

583
00:20:11,200 --> 00:20:13,200
thank you very much any questions in the

584
00:20:13,200 --> 00:20:16,200
audience

585
00:20:27,440 --> 00:20:30,240
okay so i guess we'll um close the

586
00:20:30,240 --> 00:20:32,480
session now remember that

587
00:20:32,480 --> 00:20:34,880
there is a walking caravan quarter to

588
00:20:34,880 --> 00:20:37,919
six living at the front um to go to the

589
00:20:37,919 --> 00:20:39,360
oregon concert

590
00:20:39,360 --> 00:20:41,039
and there are buses you can find the

591
00:20:41,039 --> 00:20:44,240
information on the buses at the website

592
00:20:44,240 --> 00:20:46,400
but remember there is no place for

593
00:20:46,400 --> 00:20:49,010
everyone in the buses thank you

594
00:20:49,010 --> 00:20:52,210
[Applause]

