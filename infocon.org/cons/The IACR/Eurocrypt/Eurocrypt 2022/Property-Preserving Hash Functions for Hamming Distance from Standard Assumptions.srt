1
00:00:00,240 --> 00:00:02,880
so next

2
00:00:03,520 --> 00:00:07,160
next talk is

3
00:00:44,960 --> 00:00:48,320
okay so next talk is property preserving

4
00:00:48,320 --> 00:00:50,559
hash functions for hamming distance from

5
00:00:50,559 --> 00:00:54,079
standard assumption by nils fleischer

6
00:00:54,079 --> 00:00:57,039
casper green larson and mark

7
00:00:57,039 --> 00:01:00,640
simkin and this is here to give the talk

8
00:01:00,640 --> 00:01:02,719
yeah thank you for the introduction

9
00:01:02,719 --> 00:01:06,799
um right so we're talking about uh

10
00:01:07,840 --> 00:01:09,680
so the first question to ask is

11
00:01:09,680 --> 00:01:11,760
obviously what are property preserving

12
00:01:11,760 --> 00:01:13,680
hash functions anyway

13
00:01:13,680 --> 00:01:16,000
the concept was first introduced by

14
00:01:16,000 --> 00:01:20,479
boyle lavinia and vicontanatan in 2019

15
00:01:20,479 --> 00:01:21,520
and

16
00:01:21,520 --> 00:01:23,119
it's most easily understood as a

17
00:01:23,119 --> 00:01:25,040
generalization of collision-resistant

18
00:01:25,040 --> 00:01:28,799
hashing so if we have a hash function h

19
00:01:28,799 --> 00:01:31,360
it takes as input a key and the message

20
00:01:31,360 --> 00:01:33,040
m and yes the orientation think that

21
00:01:33,040 --> 00:01:35,119
hash frame can get keys

22
00:01:35,119 --> 00:01:38,079
and it outputs a hash value h

23
00:01:38,079 --> 00:01:40,640
and it's collision resistant if for any

24
00:01:40,640 --> 00:01:43,040
polynomial time attacker

25
00:01:43,040 --> 00:01:46,000
if they output two messages m m prime

26
00:01:46,000 --> 00:01:47,759
then the probability that those two

27
00:01:47,759 --> 00:01:49,759
messages will be different

28
00:01:49,759 --> 00:01:51,520
but the hash will be the same is

29
00:01:51,520 --> 00:01:53,119
negligible

30
00:01:53,119 --> 00:01:54,960
so we're saying this is for an efficient

31
00:01:54,960 --> 00:01:56,719
attacker this is not possible

32
00:01:56,719 --> 00:01:58,159
now another way to think about a

33
00:01:58,159 --> 00:01:59,920
collision design hash function is

34
00:01:59,920 --> 00:02:03,040
actually to think of it as a way of

35
00:02:03,040 --> 00:02:05,759
checking equality of two strings given

36
00:02:05,759 --> 00:02:08,000
only the hash value so if i have two

37
00:02:08,000 --> 00:02:10,239
very long strings and at some later

38
00:02:10,239 --> 00:02:12,080
point in time i might want to compare

39
00:02:12,080 --> 00:02:14,000
them i do not have to store all of the

40
00:02:14,000 --> 00:02:16,160
string i can just only store their short

41
00:02:16,160 --> 00:02:18,640
hash and at a later point in time i can

42
00:02:18,640 --> 00:02:20,640
check were they the same or not

43
00:02:20,640 --> 00:02:22,560
because only with negligible probability

44
00:02:22,560 --> 00:02:24,319
will this evaluation of this equality

45
00:02:24,319 --> 00:02:26,480
predicate be incorrect

46
00:02:26,480 --> 00:02:28,080
now property preserving hashing is

47
00:02:28,080 --> 00:02:30,319
basically the generalization of that

48
00:02:30,319 --> 00:02:32,800
where we say we have some predicate p

49
00:02:32,800 --> 00:02:34,879
not necessarily equality

50
00:02:34,879 --> 00:02:36,959
and we're saying that the attacker

51
00:02:36,959 --> 00:02:38,640
should not be able

52
00:02:38,640 --> 00:02:40,400
so we have some evaluation algorithm

53
00:02:40,400 --> 00:02:41,920
that basically allows us given only the

54
00:02:41,920 --> 00:02:44,800
hash values to evaluate this predicate p

55
00:02:44,800 --> 00:02:46,319
and an attacker should not be able to

56
00:02:46,319 --> 00:02:48,319
output two messages such that this

57
00:02:48,319 --> 00:02:51,840
evaluation is incorrect

58
00:02:51,840 --> 00:02:53,519
so what kind of

59
00:02:53,519 --> 00:02:55,440
predicates might be interesting well the

60
00:02:55,440 --> 00:02:56,480
most

61
00:02:56,480 --> 00:02:58,720
natural extension of equality might be

62
00:02:58,720 --> 00:03:00,239
some distance metric

63
00:03:00,239 --> 00:03:02,319
so what we're looking at is hamming

64
00:03:02,319 --> 00:03:03,280
distance

65
00:03:03,280 --> 00:03:04,640
so the hamming distance predicate

66
00:03:04,640 --> 00:03:06,000
basically

67
00:03:06,000 --> 00:03:07,760
has some threshold t

68
00:03:07,760 --> 00:03:09,599
and we're saying this predicate given

69
00:03:09,599 --> 00:03:12,239
two inputs essentially checks is the

70
00:03:12,239 --> 00:03:14,480
hamming distance greater or equal than

71
00:03:14,480 --> 00:03:18,480
this threshold t or is it smaller than t

72
00:03:18,480 --> 00:03:20,080
and we want to construct property

73
00:03:20,080 --> 00:03:22,640
preserving hashing for this kind of

74
00:03:22,640 --> 00:03:24,159
predicate

75
00:03:24,159 --> 00:03:25,519
now

76
00:03:25,519 --> 00:03:26,959
we and by that i mean the authors of

77
00:03:26,959 --> 00:03:29,040
this paper didn't really know how to

78
00:03:29,040 --> 00:03:30,480
construct this

79
00:03:30,480 --> 00:03:32,799
directly so we used an observation that

80
00:03:32,799 --> 00:03:35,040
was already um

81
00:03:35,040 --> 00:03:37,840
in a previous paper also by market me

82
00:03:37,840 --> 00:03:40,400
from eurocrypt 21

83
00:03:40,400 --> 00:03:41,280
that

84
00:03:41,280 --> 00:03:43,680
is a connection between hamming distance

85
00:03:43,680 --> 00:03:46,319
and the symmetric set difference of sets

86
00:03:46,319 --> 00:03:48,319
basically if we have two strings x and x

87
00:03:48,319 --> 00:03:49,680
prime here

88
00:03:49,680 --> 00:03:53,280
um and then we can define a set

89
00:03:53,280 --> 00:03:55,280
where basically for each bit position we

90
00:03:55,280 --> 00:03:57,120
have two possible values you might put

91
00:03:57,120 --> 00:03:58,879
into this set

92
00:03:58,879 --> 00:04:01,920
and if we define this set like this then

93
00:04:01,920 --> 00:04:04,159
there is an um

94
00:04:04,159 --> 00:04:04,959
then

95
00:04:04,959 --> 00:04:07,040
the evaluation of the hamming distance

96
00:04:07,040 --> 00:04:08,720
predicate so the fact that the hamming

97
00:04:08,720 --> 00:04:10,159
distance predicate for the two strings

98
00:04:10,159 --> 00:04:12,640
is one is equivalent to the fact that

99
00:04:12,640 --> 00:04:13,360
the

100
00:04:13,360 --> 00:04:15,120
size of the symmetric set difference of

101
00:04:15,120 --> 00:04:16,320
the two sets

102
00:04:16,320 --> 00:04:20,238
is greater or equal than 2t

103
00:04:20,238 --> 00:04:21,600
where if you don't know what the

104
00:04:21,600 --> 00:04:22,720
symmetry set difference is it's

105
00:04:22,720 --> 00:04:25,520
basically the union of two sets minus

106
00:04:25,520 --> 00:04:27,440
the intersection of the two sets so

107
00:04:27,440 --> 00:04:29,840
basically the set of all elements that

108
00:04:29,840 --> 00:04:33,600
are in exactly one of the two sets

109
00:04:33,600 --> 00:04:36,160
and with that we can define also the um

110
00:04:36,160 --> 00:04:38,160
predicate for uh symmetric set

111
00:04:38,160 --> 00:04:39,919
difference where basically we have again

112
00:04:39,919 --> 00:04:42,400
a threshold and we now get two sets as

113
00:04:42,400 --> 00:04:44,400
inputs and

114
00:04:44,400 --> 00:04:45,520
we

115
00:04:45,520 --> 00:04:48,960
the predicate outputs one if and only if

116
00:04:48,960 --> 00:04:51,199
the symmetric set difference is greater

117
00:04:51,199 --> 00:04:53,520
or equal than t

118
00:04:53,520 --> 00:04:55,120
okay so how do we construct something

119
00:04:55,120 --> 00:04:57,040
for symmetric set difference

120
00:04:57,040 --> 00:04:59,680
well to do that we introduce a notion of

121
00:04:59,680 --> 00:05:01,520
robust set encodings

122
00:05:01,520 --> 00:05:03,039
so what is the robust set encodings

123
00:05:03,039 --> 00:05:05,120
basically we have

124
00:05:05,120 --> 00:05:08,320
a description of a large set as one

125
00:05:08,320 --> 00:05:11,440
and now we have an encoding function

126
00:05:11,440 --> 00:05:13,680
and this encodes this in a compressing

127
00:05:13,680 --> 00:05:16,639
way so the small green encoding of this

128
00:05:16,639 --> 00:05:17,520
set

129
00:05:17,520 --> 00:05:19,919
is smaller than the normal description

130
00:05:19,919 --> 00:05:22,960
of the set as one

131
00:05:23,199 --> 00:05:25,280
and we have a

132
00:05:25,280 --> 00:05:27,120
if we now have two of these

133
00:05:27,120 --> 00:05:29,120
what a robust set encoding gives us that

134
00:05:29,120 --> 00:05:31,360
there exists some magic functionality

135
00:05:31,360 --> 00:05:33,680
that given two of these compressed uh

136
00:05:33,680 --> 00:05:36,080
representations of the set

137
00:05:36,080 --> 00:05:38,720
we can get a compressed representation

138
00:05:38,720 --> 00:05:40,240
of the symmetric set difference of the

139
00:05:40,240 --> 00:05:42,080
two sets

140
00:05:42,080 --> 00:05:44,000
and the trick is now

141
00:05:44,000 --> 00:05:45,919
that we might be able to actually decode

142
00:05:45,919 --> 00:05:46,639
this

143
00:05:46,639 --> 00:05:48,479
symmetric set difference

144
00:05:48,479 --> 00:05:49,840
now in general this should not be

145
00:05:49,840 --> 00:05:51,680
possible because as i said this encoding

146
00:05:51,680 --> 00:05:53,840
function

147
00:05:54,000 --> 00:05:56,319
this encoding function is actually

148
00:05:56,319 --> 00:05:57,600
compressing

149
00:05:57,600 --> 00:06:01,199
so the s1 should be smaller than the

150
00:06:01,199 --> 00:06:03,039
encoding of the s1 should be smaller

151
00:06:03,039 --> 00:06:05,120
than s1 itself

152
00:06:05,120 --> 00:06:06,639
because otherwise it's not a useful hash

153
00:06:06,639 --> 00:06:07,919
function right if you have a hash

154
00:06:07,919 --> 00:06:09,759
function that's not compressing it's not

155
00:06:09,759 --> 00:06:11,360
very useful

156
00:06:11,360 --> 00:06:12,319
so

157
00:06:12,319 --> 00:06:13,840
this is actually compressing which means

158
00:06:13,840 --> 00:06:15,919
that in general it should not be able to

159
00:06:15,919 --> 00:06:18,080
uh to be decodable especially because

160
00:06:18,080 --> 00:06:19,680
the symmetric set difference of two sets

161
00:06:19,680 --> 00:06:21,199
can actually be larger than each

162
00:06:21,199 --> 00:06:22,720
individual set so

163
00:06:22,720 --> 00:06:24,080
if it's already compressing for the

164
00:06:24,080 --> 00:06:26,240
individual sets as one as two we should

165
00:06:26,240 --> 00:06:28,639
not be able to in general decode the

166
00:06:28,639 --> 00:06:32,199
symmetric set difference

167
00:06:35,199 --> 00:06:37,120
um

168
00:06:37,120 --> 00:06:38,960
but the good thing is

169
00:06:38,960 --> 00:06:40,479
that we don't necessarily have to be

170
00:06:40,479 --> 00:06:41,840
able to do that

171
00:06:41,840 --> 00:06:45,280
so we only need to be able to decode in

172
00:06:45,280 --> 00:06:46,639
the case where the symmetric set

173
00:06:46,639 --> 00:06:48,479
difference is small

174
00:06:48,479 --> 00:06:50,960
if the symmetric set difference is large

175
00:06:50,960 --> 00:06:53,039
this thing can output an error and we're

176
00:06:53,039 --> 00:06:55,199
fine with that so what we want from this

177
00:06:55,199 --> 00:06:56,130
thing is actually

178
00:06:56,130 --> 00:06:58,720
[Music]

179
00:06:58,720 --> 00:07:01,720
i'm

180
00:07:09,840 --> 00:07:12,080
okay would that help

181
00:07:12,080 --> 00:07:13,039
okay

182
00:07:13,039 --> 00:07:16,039
um

183
00:07:16,400 --> 00:07:19,120
so we only care about the case where

184
00:07:19,120 --> 00:07:20,560
this metric set difference is small

185
00:07:20,560 --> 00:07:22,319
actually like if the symmetric set

186
00:07:22,319 --> 00:07:24,560
difference is large and it doesn't

187
00:07:24,560 --> 00:07:26,880
manage to decode then it should output

188
00:07:26,880 --> 00:07:29,199
an error

189
00:07:29,199 --> 00:07:30,960
if it outputs a set

190
00:07:30,960 --> 00:07:33,840
then this should always be the correct

191
00:07:33,840 --> 00:07:35,840
symmetric set difference and if the

192
00:07:35,840 --> 00:07:37,840
distance is small then it should always

193
00:07:37,840 --> 00:07:39,599
output a set

194
00:07:39,599 --> 00:07:41,039
so this means that if the symmetric set

195
00:07:41,039 --> 00:07:42,000
difference is small then with

196
00:07:42,000 --> 00:07:43,599
overwhelming probability it will give us

197
00:07:43,599 --> 00:07:46,080
the correct symmetric set difference

198
00:07:46,080 --> 00:07:48,479
and then we can easily build a property

199
00:07:48,479 --> 00:07:51,120
preserving hash function from that

200
00:07:51,120 --> 00:07:53,360
we use the encoding function simply as

201
00:07:53,360 --> 00:07:55,680
our hash function and to evaluate we do

202
00:07:55,680 --> 00:07:58,400
the magic then we decode

203
00:07:58,400 --> 00:08:00,879
and if decoding fails we say okay this

204
00:08:00,879 --> 00:08:02,960
metric set difference was large

205
00:08:02,960 --> 00:08:05,360
if decoding does not fail we get a set

206
00:08:05,360 --> 00:08:06,879
we can simply count how many elements

207
00:08:06,879 --> 00:08:08,319
are in the set and can check is it

208
00:08:08,319 --> 00:08:11,520
smaller than 2t or not

209
00:08:11,520 --> 00:08:14,240
so the big question now is of course

210
00:08:14,240 --> 00:08:17,039
how do we construct um

211
00:08:17,039 --> 00:08:18,639
how do we construct this robust set

212
00:08:18,639 --> 00:08:19,840
encoding

213
00:08:19,840 --> 00:08:20,720
and

214
00:08:20,720 --> 00:08:23,039
for this we use invertible bloom lookup

215
00:08:23,039 --> 00:08:25,599
tables um now what are invertible bloom

216
00:08:25,599 --> 00:08:27,360
lookup tables they were first introduced

217
00:08:27,360 --> 00:08:28,639
by uh

218
00:08:28,639 --> 00:08:32,159
goodrich and mitchum in 2011

219
00:08:32,159 --> 00:08:35,679
and um are basically a way to

220
00:08:35,679 --> 00:08:38,399
encode sets in a way that if the set is

221
00:08:38,399 --> 00:08:42,479
small uric can recover the set

222
00:08:42,559 --> 00:08:45,120
and how they work is that we have a set

223
00:08:45,120 --> 00:08:46,560
as one here

224
00:08:46,560 --> 00:08:50,560
and this set one the set is encoded in

225
00:08:50,560 --> 00:08:52,560
for now basically two matrices so we

226
00:08:52,560 --> 00:08:56,080
initialize two matrices with all zeros

227
00:08:56,080 --> 00:08:58,160
and the size of this matrix basically

228
00:08:58,160 --> 00:09:00,000
depends on statistical parameters

229
00:09:00,000 --> 00:09:01,680
essentially on the threshold that we

230
00:09:01,680 --> 00:09:03,680
need for our predicate

231
00:09:03,680 --> 00:09:05,200
if your threshold is larger you need a

232
00:09:05,200 --> 00:09:07,040
larger matrix

233
00:09:07,040 --> 00:09:09,200
but for understanding this like this

234
00:09:09,200 --> 00:09:11,519
number of rows and columns is irrelevant

235
00:09:11,519 --> 00:09:13,519
for understanding what's going on here

236
00:09:13,519 --> 00:09:15,760
um so for each row of these matrices we

237
00:09:15,760 --> 00:09:17,839
basically choose a

238
00:09:17,839 --> 00:09:21,519
4g wise independent hash function

239
00:09:21,519 --> 00:09:23,040
and

240
00:09:23,040 --> 00:09:24,080
we

241
00:09:24,080 --> 00:09:27,360
map each one of the elements of the set

242
00:09:27,360 --> 00:09:29,360
into these matrices which means

243
00:09:29,360 --> 00:09:30,720
we have these

244
00:09:30,720 --> 00:09:32,320
four t by independent hash function and

245
00:09:32,320 --> 00:09:33,839
they give us in each row they give us

246
00:09:33,839 --> 00:09:35,680
one index where we should put this

247
00:09:35,680 --> 00:09:37,040
element

248
00:09:37,040 --> 00:09:39,040
and in the upper matrix what you call

249
00:09:39,040 --> 00:09:41,839
the count matrix we basically just count

250
00:09:41,839 --> 00:09:43,760
how many elements were mapped to this

251
00:09:43,760 --> 00:09:46,480
specific specific cell

252
00:09:46,480 --> 00:09:49,040
in the lower matrix we simply add up all

253
00:09:49,040 --> 00:09:52,080
the elements that get mapped there

254
00:09:52,080 --> 00:09:53,519
so we first

255
00:09:53,519 --> 00:09:55,120
map the first element there which means

256
00:09:55,120 --> 00:09:57,519
we have some ones in that

257
00:09:57,519 --> 00:09:59,040
matrix above and we have some twos in

258
00:09:59,040 --> 00:10:00,480
the matrix below

259
00:10:00,480 --> 00:10:03,200
and then we map the second one to some

260
00:10:03,200 --> 00:10:05,040
different positions in the matrix and

261
00:10:05,040 --> 00:10:06,399
then the third one

262
00:10:06,399 --> 00:10:09,839
and we end up with these two matrices

263
00:10:09,839 --> 00:10:10,640
now

264
00:10:10,640 --> 00:10:12,000
if we have

265
00:10:12,000 --> 00:10:15,279
some one entries in the

266
00:10:15,279 --> 00:10:17,040
count matrix

267
00:10:17,040 --> 00:10:18,880
then that means that the corresponding

268
00:10:18,880 --> 00:10:22,240
entry in the value matrix

269
00:10:22,240 --> 00:10:25,279
actually tells us an element of the set

270
00:10:25,279 --> 00:10:27,600
which means that if we as long as if we

271
00:10:27,600 --> 00:10:30,640
have one entries we can actually decode

272
00:10:30,640 --> 00:10:32,959
because we can then remove this element

273
00:10:32,959 --> 00:10:35,760
from the two matrices simply in the case

274
00:10:35,760 --> 00:10:37,519
because we can we now know what the

275
00:10:37,519 --> 00:10:39,040
value is we can put it through the hash

276
00:10:39,040 --> 00:10:41,680
functions we know where it belongs so we

277
00:10:41,680 --> 00:10:44,000
can subtract one in the count matrix and

278
00:10:44,000 --> 00:10:46,240
we can subtract the value in the value

279
00:10:46,240 --> 00:10:48,320
matrix

280
00:10:48,320 --> 00:10:50,399
um of course decoding this thing is not

281
00:10:50,399 --> 00:10:52,079
really helpful because we just encoded

282
00:10:52,079 --> 00:10:54,240
it and in general for a large set this

283
00:10:54,240 --> 00:10:55,760
will not be decodable because there will

284
00:10:55,760 --> 00:10:57,839
probably not be one entries in that

285
00:10:57,839 --> 00:10:59,600
count matrix

286
00:10:59,600 --> 00:11:02,079
but if we now have

287
00:11:02,079 --> 00:11:04,959
two of these so we encoded two sets

288
00:11:04,959 --> 00:11:06,720
and we have here two sets that basically

289
00:11:06,720 --> 00:11:09,279
differ in one element which basically

290
00:11:09,279 --> 00:11:11,920
means they correspond to bit strings

291
00:11:11,920 --> 00:11:14,320
that differ in one position

292
00:11:14,320 --> 00:11:15,120
then

293
00:11:15,120 --> 00:11:17,519
we can actually subtract these

294
00:11:17,519 --> 00:11:19,839
and what we get is something that has

295
00:11:19,839 --> 00:11:21,440
some negative entries some positive

296
00:11:21,440 --> 00:11:23,920
entries but basically if we squint a bit

297
00:11:23,920 --> 00:11:26,399
and ignore the signs what you have there

298
00:11:26,399 --> 00:11:28,560
is an encoding of the symmetric set

299
00:11:28,560 --> 00:11:29,519
difference

300
00:11:29,519 --> 00:11:31,519
basically we can again decode this

301
00:11:31,519 --> 00:11:34,079
because we can look for -1 entries and

302
00:11:34,079 --> 00:11:35,760
one entries and then look at the

303
00:11:35,760 --> 00:11:38,240
corresponding values in the value matrix

304
00:11:38,240 --> 00:11:40,560
and if we correct for the sign then

305
00:11:40,560 --> 00:11:43,279
decoding might work because or at least

306
00:11:43,279 --> 00:11:44,800
in the case where the symmetric set

307
00:11:44,800 --> 00:11:47,440
difference is smaller than for the

308
00:11:47,440 --> 00:11:50,160
original sets

309
00:11:50,240 --> 00:11:52,160
in general of course if this metric set

310
00:11:52,160 --> 00:11:53,680
difference is large you will not have

311
00:11:53,680 --> 00:11:56,079
any one entries and decoding will fail

312
00:11:56,079 --> 00:11:59,200
but in that case we're fine with that

313
00:11:59,200 --> 00:12:01,760
there's one issue here and that is that

314
00:12:01,760 --> 00:12:04,079
not every one or minus one entry in this

315
00:12:04,079 --> 00:12:05,519
difference matrix will actually

316
00:12:05,519 --> 00:12:08,160
correspond to a real value

317
00:12:08,160 --> 00:12:09,760
the reason is that the two count

318
00:12:09,760 --> 00:12:11,839
matrices that we subtract they simply

319
00:12:11,839 --> 00:12:13,440
count how many

320
00:12:13,440 --> 00:12:15,440
how many elements were mapped to this

321
00:12:15,440 --> 00:12:17,680
particular cell they are not necessarily

322
00:12:17,680 --> 00:12:19,360
the same elements

323
00:12:19,360 --> 00:12:21,440
so for example the element three might

324
00:12:21,440 --> 00:12:23,040
have been mapped to the same position as

325
00:12:23,040 --> 00:12:24,639
the element four

326
00:12:24,639 --> 00:12:27,760
we subtract the ones and you end up or

327
00:12:27,760 --> 00:12:29,040
and something else gets mapped in the

328
00:12:29,040 --> 00:12:30,880
first one then you subtract one from two

329
00:12:30,880 --> 00:12:32,959
and you get end up with one even though

330
00:12:32,959 --> 00:12:36,240
you subtracted two different elements

331
00:12:36,240 --> 00:12:38,800
so we need a way to verify that one of

332
00:12:38,800 --> 00:12:40,959
the positions we identified is actually

333
00:12:40,959 --> 00:12:43,200
a correct value

334
00:12:43,200 --> 00:12:45,600
and how we can do that is by adding a

335
00:12:45,600 --> 00:12:48,639
third matrix so we now add a homomorphic

336
00:12:48,639 --> 00:12:51,040
collision resistant hash function h

337
00:12:51,040 --> 00:12:52,800
and in this third matrix basically what

338
00:12:52,800 --> 00:12:54,800
we do is we simply add up the hash

339
00:12:54,800 --> 00:12:56,079
values

340
00:12:56,079 --> 00:12:59,279
of the values

341
00:12:59,360 --> 00:13:00,800
so we can again

342
00:13:00,800 --> 00:13:03,600
subtract these two hash matrices

343
00:13:03,600 --> 00:13:05,200
and then in this

344
00:13:05,200 --> 00:13:07,120
third matrix

345
00:13:07,120 --> 00:13:10,160
we basically end up with the sums of the

346
00:13:10,160 --> 00:13:12,399
of the hash values of what we have up

347
00:13:12,399 --> 00:13:13,279
here

348
00:13:13,279 --> 00:13:15,040
which means that if we have some one

349
00:13:15,040 --> 00:13:17,120
entry here then we can identify a

350
00:13:17,120 --> 00:13:19,279
potential value and we can check down

351
00:13:19,279 --> 00:13:21,680
here that the hash value of this value

352
00:13:21,680 --> 00:13:23,200
is actually there

353
00:13:23,200 --> 00:13:24,800
and because it's a homomorphic collision

354
00:13:24,800 --> 00:13:26,320
distance hash function

355
00:13:26,320 --> 00:13:28,240
this is secure so you will not

356
00:13:28,240 --> 00:13:31,279
incorrectly identify a value except with

357
00:13:31,279 --> 00:13:34,839
negligible probability

358
00:13:35,279 --> 00:13:37,120
one interesting thing here is that if we

359
00:13:37,120 --> 00:13:38,320
have this

360
00:13:38,320 --> 00:13:40,480
hash matrix

361
00:13:40,480 --> 00:13:43,199
and because our universe that our sets

362
00:13:43,199 --> 00:13:45,199
are defined over is relatively small

363
00:13:45,199 --> 00:13:46,880
because it's basically it has constant

364
00:13:46,880 --> 00:13:49,279
size because we're only talking about

365
00:13:49,279 --> 00:13:51,600
twice the length of our bit string which

366
00:13:51,600 --> 00:13:54,800
has a constant length

367
00:13:54,959 --> 00:13:56,639
there are actually relatively few

368
00:13:56,639 --> 00:13:59,040
potential values

369
00:13:59,040 --> 00:14:01,680
which means that when we look at these

370
00:14:01,680 --> 00:14:05,360
hash values we can actually reconstruct

371
00:14:05,360 --> 00:14:07,680
the one entries of the count matrix

372
00:14:07,680 --> 00:14:09,279
because we can check which one of these

373
00:14:09,279 --> 00:14:12,480
are actually valid hash values

374
00:14:12,480 --> 00:14:14,079
and then we know that there should have

375
00:14:14,079 --> 00:14:17,440
been a one entry up here

376
00:14:17,440 --> 00:14:19,360
which means we don't actually need this

377
00:14:19,360 --> 00:14:21,440
count matrix at all

378
00:14:21,440 --> 00:14:23,440
and also because again the universe is

379
00:14:23,440 --> 00:14:25,120
very small we can actually invert this

380
00:14:25,120 --> 00:14:26,880
hash function simply by exhaustive

381
00:14:26,880 --> 00:14:29,120
search we can basically search over all

382
00:14:29,120 --> 00:14:30,399
possible values

383
00:14:30,399 --> 00:14:32,720
and identify what is the correct value

384
00:14:32,720 --> 00:14:34,480
which means we also don't actually need

385
00:14:34,480 --> 00:14:36,800
this value matrix

386
00:14:36,800 --> 00:14:38,639
so all we need

387
00:14:38,639 --> 00:14:42,320
is actually this has hash matrix

388
00:14:42,320 --> 00:14:45,199
so this is now our encoding

389
00:14:45,199 --> 00:14:46,480
we take a set

390
00:14:46,480 --> 00:14:48,240
and we compute

391
00:14:48,240 --> 00:14:51,120
this hash matrix

392
00:14:51,760 --> 00:14:54,000
that's our encoding and then we can do

393
00:14:54,000 --> 00:14:56,320
the subtraction and can reconstruct

394
00:14:56,320 --> 00:14:58,079
hopefully the symmetric set difference

395
00:14:58,079 --> 00:15:00,240
from that and that works as long as the

396
00:15:00,240 --> 00:15:03,040
symmetric set difference is small enough

397
00:15:03,040 --> 00:15:04,880
and from that again we can easily

398
00:15:04,880 --> 00:15:06,800
construct a property preserving hash

399
00:15:06,800 --> 00:15:09,199
function simply by using the encoding

400
00:15:09,199 --> 00:15:11,199
function as our hash function and during

401
00:15:11,199 --> 00:15:12,399
the evaluation

402
00:15:12,399 --> 00:15:14,800
you basically do the subtraction

403
00:15:14,800 --> 00:15:16,480
and then you do the decoding you check

404
00:15:16,480 --> 00:15:17,680
if it fails

405
00:15:17,680 --> 00:15:19,920
it fails exactly when we can no longer

406
00:15:19,920 --> 00:15:21,279
when you basically have no entry here

407
00:15:21,279 --> 00:15:23,440
that corresponds to an actual hash value

408
00:15:23,440 --> 00:15:24,959
then decoding fails but that only

409
00:15:24,959 --> 00:15:26,880
happens if the symmetric set difference

410
00:15:26,880 --> 00:15:28,560
is too large or with negligible

411
00:15:28,560 --> 00:15:31,119
probability

412
00:15:31,759 --> 00:15:32,560
okay

413
00:15:32,560 --> 00:15:33,600
so

414
00:15:33,600 --> 00:15:36,480
how do we instantiate this homomorphic

415
00:15:36,480 --> 00:15:37,920
collision resistant hash function we can

416
00:15:37,920 --> 00:15:40,000
instantiate this from ite's hash

417
00:15:40,000 --> 00:15:42,320
function

418
00:15:42,800 --> 00:15:44,639
then we get basically

419
00:15:44,639 --> 00:15:47,040
a robust set encoding

420
00:15:47,040 --> 00:15:49,920
from the standard sys instance

421
00:15:49,920 --> 00:15:51,040
and

422
00:15:51,040 --> 00:15:54,399
this has an output length of basically t

423
00:15:54,399 --> 00:15:57,440
times security parameter squared times

424
00:15:57,440 --> 00:16:00,880
logarithm of the input length

425
00:16:01,440 --> 00:16:03,279
which for

426
00:16:03,279 --> 00:16:06,639
large input length is a good compression

427
00:16:06,639 --> 00:16:08,880
if basically the input length is short

428
00:16:08,880 --> 00:16:10,959
it will not be compressing

429
00:16:10,959 --> 00:16:11,920
because

430
00:16:11,920 --> 00:16:14,079
we square the security parameter here so

431
00:16:14,079 --> 00:16:15,440
it needs to be rel the input length

432
00:16:15,440 --> 00:16:17,120
needs to be relatively long for this to

433
00:16:17,120 --> 00:16:19,680
be actually compressing

434
00:16:19,680 --> 00:16:21,199
and

435
00:16:21,199 --> 00:16:23,279
from that then we get

436
00:16:23,279 --> 00:16:25,519
the property preserving hash function as

437
00:16:25,519 --> 00:16:27,680
i said simply by setting the hash

438
00:16:27,680 --> 00:16:29,600
function to be to the encoding

439
00:16:29,600 --> 00:16:31,600
and then using the decoding for the

440
00:16:31,600 --> 00:16:34,240
evaluation

441
00:16:34,320 --> 00:16:36,000
and it has of course the same output

442
00:16:36,000 --> 00:16:38,800
length as the actual um

443
00:16:38,800 --> 00:16:40,959
as the robust set encoding

444
00:16:40,959 --> 00:16:42,480
now how does this compare to other

445
00:16:42,480 --> 00:16:44,079
constructions

446
00:16:44,079 --> 00:16:46,720
as i said the original

447
00:16:46,720 --> 00:16:48,320
paper that introduced property learning

448
00:16:48,320 --> 00:16:50,720
hash functions was um

449
00:16:50,720 --> 00:16:52,639
by boyle lavinia and divide container

450
00:16:52,639 --> 00:16:54,240
town in 2019

451
00:16:54,240 --> 00:16:55,440
they did not actually give a

452
00:16:55,440 --> 00:16:58,000
construction for exact hamming distance

453
00:16:58,000 --> 00:16:59,759
what they gave the construction for is

454
00:16:59,759 --> 00:17:02,880
the gap hamming a distance predicate

455
00:17:02,880 --> 00:17:04,799
which is defined very similar to a

456
00:17:04,799 --> 00:17:08,000
hamming distance but it only checks is

457
00:17:08,000 --> 00:17:08,799
the

458
00:17:08,799 --> 00:17:10,720
hamming distance very small or is it

459
00:17:10,720 --> 00:17:12,799
very large and in between you have a gap

460
00:17:12,799 --> 00:17:14,160
where basically

461
00:17:14,160 --> 00:17:15,919
any evaluation

462
00:17:15,919 --> 00:17:16,839
is

463
00:17:16,839 --> 00:17:19,760
acceptable okay they cannot do an exact

464
00:17:19,760 --> 00:17:20,799
thing

465
00:17:20,799 --> 00:17:22,640
and for that they have an output length

466
00:17:22,640 --> 00:17:24,799
that's basically c times input length

467
00:17:24,799 --> 00:17:26,880
where for some constant

468
00:17:26,880 --> 00:17:28,880
c smaller l so they have a constant

469
00:17:28,880 --> 00:17:31,039
compression rate

470
00:17:31,039 --> 00:17:33,919
and it's based on the sparse short

471
00:17:33,919 --> 00:17:36,880
vector problem which is a problem they

472
00:17:36,880 --> 00:17:39,840
invented for proving this secure it is

473
00:17:39,840 --> 00:17:41,440
related to

474
00:17:41,440 --> 00:17:42,960
syndrome decoding

475
00:17:42,960 --> 00:17:45,120
um

476
00:17:45,120 --> 00:17:46,480
so there was no

477
00:17:46,480 --> 00:17:48,480
previous um basically no nobody

478
00:17:48,480 --> 00:17:50,400
previously looked at this problem so we

479
00:17:50,400 --> 00:17:53,760
don't know exactly um if it is a good

480
00:17:53,760 --> 00:17:56,559
assumption or not um but it's a

481
00:17:56,559 --> 00:17:58,480
plausible assumption but we would like

482
00:17:58,480 --> 00:18:02,080
to have better assumptions maybe

483
00:18:02,080 --> 00:18:04,480
though so the first construction of

484
00:18:04,480 --> 00:18:07,520
exact hamming was actually also by me

485
00:18:07,520 --> 00:18:10,400
and mark zimkin

486
00:18:10,400 --> 00:18:12,880
that had had an output length of

487
00:18:12,880 --> 00:18:16,640
roughly t times security parameter

488
00:18:16,640 --> 00:18:19,360
it was however also based on a new

489
00:18:19,360 --> 00:18:22,160
assumption so this is the q strong

490
00:18:22,160 --> 00:18:26,160
bi-linear dispute logarithm assumption

491
00:18:26,160 --> 00:18:30,480
which was also not analyzed before so um

492
00:18:30,480 --> 00:18:31,919
assumption-wise

493
00:18:31,919 --> 00:18:33,840
whether that's better is a matter of

494
00:18:33,840 --> 00:18:34,880
opinion

495
00:18:34,880 --> 00:18:35,919
um

496
00:18:35,919 --> 00:18:37,520
but we managed to get exact hamming

497
00:18:37,520 --> 00:18:38,799
there

498
00:18:38,799 --> 00:18:41,120
so the new work that i'm presenting

499
00:18:41,120 --> 00:18:44,240
right now is again for exact hamming and

500
00:18:44,240 --> 00:18:46,559
it actually has a worse compression than

501
00:18:46,559 --> 00:18:48,160
uh before

502
00:18:48,160 --> 00:18:50,240
because we now have t times security

503
00:18:50,240 --> 00:18:52,799
parameter squared times the logarithm of

504
00:18:52,799 --> 00:18:54,640
the input length which again is still

505
00:18:54,640 --> 00:18:56,400
compressing if you have

506
00:18:56,400 --> 00:18:58,160
very long input length

507
00:18:58,160 --> 00:19:01,200
but not if you have short values

508
00:19:01,200 --> 00:19:04,240
um but on the upside this is now based

509
00:19:04,240 --> 00:19:07,360
on a standard assumption standard

510
00:19:07,360 --> 00:19:10,240
short integer solution problem which is

511
00:19:10,240 --> 00:19:13,120
a standard lettuce assumption

512
00:19:13,120 --> 00:19:15,120
since we published this work basically

513
00:19:15,120 --> 00:19:17,039
there has

514
00:19:17,039 --> 00:19:20,320
been follow-up work by minamatsu and i'm

515
00:19:20,320 --> 00:19:22,480
sorry for butchering the name

516
00:19:22,480 --> 00:19:25,280
which was recently published

517
00:19:25,280 --> 00:19:26,160
and

518
00:19:26,160 --> 00:19:27,919
they also

519
00:19:27,919 --> 00:19:30,000
built something for exact hamming

520
00:19:30,000 --> 00:19:32,880
the compression is again worse than what

521
00:19:32,880 --> 00:19:36,320
we do it's basically t squared

522
00:19:36,320 --> 00:19:38,480
security parameter squared times log l

523
00:19:38,480 --> 00:19:39,440
so

524
00:19:39,440 --> 00:19:41,039
clearly because t is now squared it's

525
00:19:41,039 --> 00:19:43,120
this is worse compression than before

526
00:19:43,120 --> 00:19:45,760
however on the upside they were able to

527
00:19:45,760 --> 00:19:47,840
basically do this based only on

528
00:19:47,840 --> 00:19:50,240
collision-resistant hash functions

529
00:19:50,240 --> 00:19:51,520
so

530
00:19:51,520 --> 00:19:54,720
that is a pretty good upside

531
00:19:54,960 --> 00:19:57,600
okay and with it i'm finished and if you

532
00:19:57,600 --> 00:20:00,680
have questions please do ask

533
00:20:00,680 --> 00:20:08,779
[Applause]

534
00:20:14,080 --> 00:20:15,679
any question

535
00:20:15,679 --> 00:20:17,919
yes

536
00:20:19,600 --> 00:20:20,960
maybe an obvious

537
00:20:20,960 --> 00:20:22,880
question is what are the applications

538
00:20:22,880 --> 00:20:24,799
you have in mind for for hash functions

539
00:20:24,799 --> 00:20:26,480
of this type

540
00:20:26,480 --> 00:20:28,480
so in general

541
00:20:28,480 --> 00:20:30,320
a property preserving hash function for

542
00:20:30,320 --> 00:20:32,159
some distance metric might be for

543
00:20:32,159 --> 00:20:33,760
example um

544
00:20:33,760 --> 00:20:35,679
have applications if you do some kind of

545
00:20:35,679 --> 00:20:38,080
fuzzy comparison

546
00:20:38,080 --> 00:20:39,520
in general you could for example

547
00:20:39,520 --> 00:20:41,760
consider something like gene sequences

548
00:20:41,760 --> 00:20:43,440
if you want to compare gene sequence but

549
00:20:43,440 --> 00:20:45,280
you're fine with some

550
00:20:45,280 --> 00:20:46,559
errors in there

551
00:20:46,559 --> 00:20:48,480
basically you could hash them and then

552
00:20:48,480 --> 00:20:49,840
you can store something much smaller

553
00:20:49,840 --> 00:20:51,919
than the whole gene sequence and you can

554
00:20:51,919 --> 00:20:52,960
compare them

555
00:20:52,960 --> 00:20:54,720
however hamming distance is probably not

556
00:20:54,720 --> 00:20:57,440
a good distance metric for that

557
00:20:57,440 --> 00:20:59,039
i have to admit that for hamming

558
00:20:59,039 --> 00:21:01,120
distance specifically i don't actually

559
00:21:01,120 --> 00:21:04,959
know of a good practical application

560
00:21:06,720 --> 00:21:09,600
any other question

561
00:21:11,520 --> 00:21:13,520
no more question

562
00:21:13,520 --> 00:21:17,360
okay so let's sign the speaker again

