1
00:00:05,180 --> 00:00:10,080
so this talk<font color="#E5E5E5"> is about masking with</font><font color="#CCCCCC"> GLP</font>

2
00:00:08,189 --> 00:00:10,710
<font color="#E5E5E5">lettuce based signature scheme at any</font>

3
00:00:10,080 --> 00:00:13,080
order

4
00:00:10,710 --> 00:00:16,680
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> a type of Asian but</font><font color="#E5E5E5"> Sonia may lead</font>

5
00:00:13,080 --> 00:00:19,590
to<font color="#E5E5E5"> my youtube channel</font><font color="#CCCCCC"> Fukunaga guava</font><font color="#E5E5E5"> may</font>

6
00:00:16,680 --> 00:00:21,960
be severe on Medici Buchi and<font color="#E5E5E5"> Varys</font><font color="#CCCCCC"> is</font>

7
00:00:19,590 --> 00:00:23,939
giving the<font color="#E5E5E5"> dog thank you for the</font>

8
00:00:21,960 --> 00:00:26,699
introduction<font color="#E5E5E5"> Melissa I'm going to</font>

9
00:00:23,939 --> 00:00:28,680
<font color="#E5E5E5">present the work on</font><font color="#CCCCCC"> meth</font><font color="#E5E5E5"> we decided to</font>

10
00:00:26,699 --> 00:00:33,660
study how<font color="#CCCCCC"> to mask a post quantum</font>

11
00:00:28,680 --> 00:00:35,460
signature scheme so why masking<font color="#E5E5E5"> a burst</font>

12
00:00:33,660 --> 00:00:38,129
<font color="#CCCCCC">contem signature</font><font color="#E5E5E5"> there have been</font>

13
00:00:35,460 --> 00:00:40,500
numerous<font color="#CCCCCC"> citations of attacks again</font>

14
00:00:38,129 --> 00:00:42,210
<font color="#CCCCCC">lettuce based schemes</font><font color="#E5E5E5"> today because they</font>

15
00:00:40,500 --> 00:00:44,840
use new features like Gaussian

16
00:00:42,210 --> 00:00:48,780
distributions or rejection sampling<font color="#E5E5E5"> and</font>

17
00:00:44,840 --> 00:00:51,949
those two features<font color="#E5E5E5"> are threatened by for</font>

18
00:00:48,780 --> 00:00:54,390
example<font color="#CCCCCC"> clash attacks timing attacks and</font>

19
00:00:51,949 --> 00:00:58,050
differential power analysis attacks and

20
00:00:54,390 --> 00:01:01,829
those attack can be really can recover

21
00:00:58,050 --> 00:01:03,839
the key secret<font color="#E5E5E5"> easily for example in AES</font>

22
00:01:01,829 --> 00:01:06,420
those kind<font color="#E5E5E5"> of attack can recover the</font>

23
00:01:03,840 --> 00:01:10,260
secret in minutes<font color="#E5E5E5"> or</font><font color="#CCCCCC"> even in seconds</font>

24
00:01:06,420 --> 00:01:12,510
those attacks are<font color="#E5E5E5"> very powerful</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> for</font>

25
00:01:10,260 --> 00:01:14,490
now since those features are<font color="#E5E5E5"> quite new</font>

26
00:01:12,510 --> 00:01:16,979
there are few country measures for now

27
00:01:14,490 --> 00:01:20,070
and<font color="#E5E5E5"> especially on signatures</font><font color="#CCCCCC"> because of</font>

28
00:01:16,979 --> 00:01:21,330
those new features<font color="#E5E5E5"> so there is since</font>

29
00:01:20,070 --> 00:01:24,000
there is a call for<font color="#E5E5E5"> concrete</font>

30
00:01:21,330 --> 00:01:26,880
implementation as you know with the<font color="#CCCCCC"> NIST</font>

31
00:01:24,000 --> 00:01:30,799
competition those think schemes could be

32
00:01:26,880 --> 00:01:34,039
eventually<font color="#CCCCCC"> used in industry and so this</font>

33
00:01:30,799 --> 00:01:37,439
this<font color="#CCCCCC"> cause strong countermeasures</font>

34
00:01:34,040 --> 00:01:41,579
<font color="#CCCCCC">because for</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> they can</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> used in</font>

35
00:01:37,439 --> 00:01:43,979
smart cards or in or in<font color="#E5E5E5"> Internet of</font>

36
00:01:41,579 --> 00:01:46,679
Things<font color="#E5E5E5"> and so this could be threatened</font>

37
00:01:43,979 --> 00:01:49,220
by<font color="#E5E5E5"> those kind of attacks so that is why</font>

38
00:01:46,680 --> 00:01:52,140
we<font color="#E5E5E5"> decided to mask a post</font><font color="#CCCCCC"> quantum scheme</font>

39
00:01:49,220 --> 00:01:55,548
so I'll briefly<font color="#CCCCCC"> explain how</font><font color="#E5E5E5"> my skin</font>

40
00:01:52,140 --> 00:01:58,079
works for the people<font color="#CCCCCC"> who</font><font color="#E5E5E5"> don't know how</font>

41
00:01:55,549 --> 00:02:01,079
so masking<font color="#E5E5E5"> is the country measure</font>

42
00:01:58,079 --> 00:02:03,039
against a certain type of<font color="#E5E5E5"> attacker model</font>

43
00:02:01,079 --> 00:02:05,589
so for a classical

44
00:02:03,040 --> 00:02:08,700
<font color="#CCCCCC">tomahto the attacker used the inputs and</font>

45
00:02:05,590 --> 00:02:11,980
<font color="#CCCCCC">the return value of</font><font color="#E5E5E5"> the algorithm but in</font>

46
00:02:08,699 --> 00:02:14,739
masking it protects against another kind

47
00:02:11,980 --> 00:02:17,739
of attacker model which is<font color="#E5E5E5"> called</font><font color="#CCCCCC"> each</font>

48
00:02:14,740 --> 00:02:20,800
<font color="#CCCCCC">III</font><font color="#E5E5E5"> and Wagner model which has</font><font color="#CCCCCC"> been</font>

49
00:02:17,740 --> 00:02:22,510
introduced in 2003 so it's a very

50
00:02:20,800 --> 00:02:25,270
powerful attacker model where the

51
00:02:22,510 --> 00:02:28,239
attacker<font color="#CCCCCC"> gets access to</font><font color="#E5E5E5"> the input value</font>

52
00:02:25,270 --> 00:02:30,610
<font color="#E5E5E5">the return value but also he can pick</font>

53
00:02:28,240 --> 00:02:32,770
some values inside the<font color="#E5E5E5"> algorithm so</font>

54
00:02:30,610 --> 00:02:35,830
intermediate values<font color="#E5E5E5"> those</font><font color="#CCCCCC"> values are</font>

55
00:02:32,770 --> 00:02:39,850
<font color="#E5E5E5">called probes so it's also called a</font>

56
00:02:35,830 --> 00:02:43,210
probing model<font color="#E5E5E5"> and so it's really proof</font>

57
00:02:39,850 --> 00:02:46,000
friendly because<font color="#E5E5E5"> we get the exact values</font>

58
00:02:43,210 --> 00:02:49,210
the exact intermediate values<font color="#E5E5E5"> but it's</font>

59
00:02:46,000 --> 00:02:50,980
not a really<font color="#CCCCCC"> realistic model there's</font>

60
00:02:49,210 --> 00:02:54,790
another realistic model which is called

61
00:02:50,980 --> 00:02:58,299
<font color="#CCCCCC">the noisy leakage model</font><font color="#E5E5E5"> and it's a model</font>

62
00:02:54,790 --> 00:03:00,910
<font color="#E5E5E5">where the attacker gets the input the</font>

63
00:02:58,300 --> 00:03:04,030
<font color="#E5E5E5">the return value but also he gets</font>

64
00:03:00,910 --> 00:03:07,420
information<font color="#CCCCCC"> noisy information about</font>

65
00:03:04,030 --> 00:03:10,230
intermediate<font color="#E5E5E5"> values</font><font color="#CCCCCC"> so he can get that</font>

66
00:03:07,420 --> 00:03:12,579
with measuring the<font color="#E5E5E5"> power</font><font color="#CCCCCC"> consumption</font>

67
00:03:10,230 --> 00:03:14,320
<font color="#E5E5E5">measuring the electromagnetic waves</font>

68
00:03:12,580 --> 00:03:17,980
around<font color="#E5E5E5"> the chip which</font><font color="#CCCCCC"> is running</font><font color="#E5E5E5"> the</font>

69
00:03:14,320 --> 00:03:21,280
<font color="#CCCCCC">algorithm so this is a more realistic</font>

70
00:03:17,980 --> 00:03:24,730
<font color="#E5E5E5">model but it's hard</font><font color="#CCCCCC"> to make proofs</font><font color="#E5E5E5"> in</font>

71
00:03:21,280 --> 00:03:28,000
this model<font color="#E5E5E5"> so what is done</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that we</font>

72
00:03:24,730 --> 00:03:30,700
prove the security in the ISW model and

73
00:03:28,000 --> 00:03:33,459
their<font color="#E5E5E5"> reduction so if it's secured in</font>

74
00:03:30,700 --> 00:03:35,679
<font color="#CCCCCC">the</font><font color="#E5E5E5"> ISW model then it's</font><font color="#CCCCCC"> secured</font><font color="#E5E5E5"> up to a</font>

75
00:03:33,459 --> 00:03:36,840
certain<font color="#E5E5E5"> level of noise in the noisy</font>

76
00:03:35,680 --> 00:03:40,060
leakage model

77
00:03:36,840 --> 00:03:46,989
so we proved the security<font color="#CCCCCC"> of a spa</font><font color="#E5E5E5"> so</font>

78
00:03:40,060 --> 00:03:49,500
<font color="#CCCCCC">quantum signature scheme in DSW</font><font color="#E5E5E5"> motto so</font>

79
00:03:46,989 --> 00:03:54,489
masking is a counter measure which is

80
00:03:49,500 --> 00:03:59,500
securing a scheme against he<font color="#CCCCCC"> is the NASW</font>

81
00:03:54,489 --> 00:04:02,290
<font color="#E5E5E5">attacker so it's at an order</font><font color="#CCCCCC"> D and each</font>

82
00:03:59,500 --> 00:04:06,340
sensitive value is replaced<font color="#CCCCCC"> by D plus 1</font>

83
00:04:02,290 --> 00:04:08,739
shares and the idea is<font color="#E5E5E5"> is it is</font>

84
00:04:06,340 --> 00:04:09,980
impossible<font color="#CCCCCC"> to</font><font color="#E5E5E5"> recover the value</font><font color="#CCCCCC"> without</font>

85
00:04:08,739 --> 00:04:12,860
having

86
00:04:09,980 --> 00:04:15,290
without having<font color="#CCCCCC"> all</font><font color="#E5E5E5"> the shares so it's a</font>

87
00:04:12,860 --> 00:04:17,720
secret sharing<font color="#E5E5E5"> and then any strict</font>

88
00:04:15,290 --> 00:04:19,969
subset of at most<font color="#E5E5E5"> D shares in</font><font color="#CCCCCC"> is</font>

89
00:04:17,720 --> 00:04:20,600
<font color="#E5E5E5">independent from the secret sensitive</font>

90
00:04:19,970 --> 00:04:24,110
value

91
00:04:20,600 --> 00:04:26,720
so each sensitive value must be<font color="#E5E5E5"> shared</font>

92
00:04:24,110 --> 00:04:28,760
<font color="#CCCCCC">into</font><font color="#E5E5E5"> D plus one shares inside the</font>

93
00:04:26,720 --> 00:04:32,229
algorithm<font color="#CCCCCC"> so we can see that</font><font color="#E5E5E5"> it can</font><font color="#CCCCCC"> be</font>

94
00:04:28,760 --> 00:04:35,570
<font color="#E5E5E5">really costly in terms of performances</font>

95
00:04:32,229 --> 00:04:37,460
<font color="#CCCCCC">so in</font><font color="#E5E5E5"> this paper we we provided the</font>

96
00:04:35,570 --> 00:04:40,070
first provable mass implementation of a

97
00:04:37,460 --> 00:04:42,560
lattice based<font color="#E5E5E5"> signature scheme and this</font>

98
00:04:40,070 --> 00:04:45,800
at any order<font color="#E5E5E5"> it means that we take G as</font>

99
00:04:42,560 --> 00:04:48,080
<font color="#CCCCCC">a parameter</font><font color="#E5E5E5"> and so for that</font><font color="#CCCCCC"> we introduce</font>

100
00:04:45,800 --> 00:04:51,200
<font color="#CCCCCC">new techniques for masking lattice based</font>

101
00:04:48,080 --> 00:04:53,229
<font color="#CCCCCC">Jeremy with about signatures which is</font>

102
00:04:51,200 --> 00:04:58,490
quite new because the masking themes

103
00:04:53,229 --> 00:05:00,889
were mostly targeting signal<font color="#E5E5E5"> symmetry</font>

104
00:04:58,490 --> 00:05:03,979
cryptography<font color="#E5E5E5"> and so the fact that those</font>

105
00:05:00,889 --> 00:05:06,889
algorithm<font color="#E5E5E5"> are probabilistic is was a</font>

106
00:05:03,979 --> 00:05:09,110
challenge<font color="#E5E5E5"> for this work there also we</font>

107
00:05:06,889 --> 00:05:14,840
provide<font color="#E5E5E5"> also new proofs from</font><font color="#CCCCCC"> asking</font>

108
00:05:09,110 --> 00:05:17,630
probabilistic algorithm so Alfred

109
00:05:14,840 --> 00:05:20,000
presents<font color="#E5E5E5"> the signature why did we choose</font>

110
00:05:17,630 --> 00:05:22,219
<font color="#CCCCCC">GLP</font><font color="#E5E5E5"> and then I'll present the country</font>

111
00:05:20,000 --> 00:05:23,810
measure and<font color="#E5E5E5"> it's proof and finally I'll</font>

112
00:05:22,220 --> 00:05:27,169
present the performances because<font color="#E5E5E5"> we</font>

113
00:05:23,810 --> 00:05:30,289
provided<font color="#E5E5E5"> a proof of concept where it's</font>

114
00:05:27,169 --> 00:05:34,940
an<font color="#CCCCCC"> implementation of GLP</font><font color="#E5E5E5"> mask up to an</font>

115
00:05:30,289 --> 00:05:37,909
oddity so the TLP signature scheme has

116
00:05:34,940 --> 00:05:41,240
been<font color="#E5E5E5"> introduced by unions you do by 60</font>

117
00:05:37,910 --> 00:05:44,150
and<font color="#CCCCCC"> opperman</font><font color="#E5E5E5"> in 2012</font><font color="#CCCCCC"> in chess</font>

118
00:05:41,240 --> 00:05:45,979
it's the ancestor of police and<font color="#E5E5E5"> the</font>

119
00:05:44,150 --> 00:05:48,979
lithium the lithium is the<font color="#E5E5E5"> candidate for</font>

120
00:05:45,979 --> 00:05:52,159
<font color="#CCCCCC">the NIST competition and it has no</font>

121
00:05:48,979 --> 00:05:55,450
gaussians<font color="#E5E5E5"> only</font><font color="#CCCCCC"> uniform distributions so</font>

122
00:05:52,160 --> 00:05:59,000
masking ocean can<font color="#E5E5E5"> be challenged because</font>

123
00:05:55,450 --> 00:06:01,880
masking the<font color="#CCCCCC"> some of discrete Gaussian is</font>

124
00:05:59,000 --> 00:06:04,190
not a discrete Gaussian<font color="#E5E5E5"> so for a first</font>

125
00:06:01,880 --> 00:06:06,590
masking of<font color="#CCCCCC"> for first step</font>

126
00:06:04,190 --> 00:06:09,950
targeting scheme which use<font color="#CCCCCC"> your</font><font color="#E5E5E5"> new</font>

127
00:06:06,590 --> 00:06:12,239
uniform distribution was was a<font color="#E5E5E5"> good</font><font color="#CCCCCC"> idea</font>

128
00:06:09,950 --> 00:06:15,169
<font color="#E5E5E5">so we just target this</font>

129
00:06:12,240 --> 00:06:17,580
<font color="#E5E5E5">that use on the uniform distributions</font>

130
00:06:15,169 --> 00:06:22,020
but still there were some<font color="#E5E5E5"> difficulties</font>

131
00:06:17,580 --> 00:06:24,448
<font color="#CCCCCC">that didn't appear</font><font color="#E5E5E5"> before this scheme is</font>

132
00:06:22,020 --> 00:06:26,818
a probabilistic algorithm and<font color="#E5E5E5"> also it</font>

133
00:06:24,449 --> 00:06:30,479
relies on rejection sampling which is a

134
00:06:26,819 --> 00:06:33,389
new<font color="#E5E5E5"> feature so it was we had to</font>

135
00:06:30,479 --> 00:06:37,650
introduce new<font color="#E5E5E5"> techniques for that so now</font>

136
00:06:33,389 --> 00:06:40,530
<font color="#CCCCCC">our</font><font color="#E5E5E5"> presents briefly how</font><font color="#CCCCCC"> GLP works</font><font color="#E5E5E5"> so</font>

137
00:06:37,650 --> 00:06:44,130
here is the key derivation<font color="#E5E5E5"> it</font><font color="#CCCCCC"> uses this</font>

138
00:06:40,530 --> 00:06:48,929
ring<font color="#CCCCCC"> Z P of X modulo X to the n plus</font><font color="#E5E5E5"> 1</font>

139
00:06:44,130 --> 00:06:51,449
and there is also<font color="#E5E5E5"> another RK here which</font>

140
00:06:48,930 --> 00:06:55,440
is the ring<font color="#CCCCCC"> r with the coefficients in</font>

141
00:06:51,449 --> 00:06:56,669
<font color="#E5E5E5">minus KK so it's are we smoking fishin's</font>

142
00:06:55,440 --> 00:06:59,009
with the elements with small

143
00:06:56,669 --> 00:07:02,310
coefficients so the key derivation is

144
00:06:59,009 --> 00:07:04,800
really really<font color="#CCCCCC"> easy</font><font color="#E5E5E5"> it has</font><font color="#CCCCCC"> five steps so</font>

145
00:07:02,310 --> 00:07:08,340
the first step is to derive the secret<font color="#E5E5E5"> s</font>

146
00:07:04,800 --> 00:07:10,470
<font color="#E5E5E5">1 and s 2 we have small coefficients so</font>

147
00:07:08,340 --> 00:07:14,190
they are in<font color="#E5E5E5"> R 1 there are coefficient in</font>

148
00:07:10,470 --> 00:07:17,099
<font color="#CCCCCC">minus 1 0</font><font color="#E5E5E5"> 1 and then we derive a which</font>

149
00:07:14,190 --> 00:07:21,120
is in<font color="#CCCCCC"> the big ring r so it's a public</font>

150
00:07:17,099 --> 00:07:24,180
<font color="#CCCCCC">value</font><font color="#E5E5E5"> and so we</font><font color="#CCCCCC"> derived T which is</font><font color="#E5E5E5"> a s 1</font>

151
00:07:21,120 --> 00:07:28,050
plus s 2<font color="#E5E5E5"> and finally the secret key is s</font>

152
00:07:24,180 --> 00:07:30,810
1 s 2 and<font color="#E5E5E5"> the public key is 18 so we can</font>

153
00:07:28,050 --> 00:07:34,199
see that this algorithm<font color="#E5E5E5"> is based on the</font>

154
00:07:30,810 --> 00:07:36,539
<font color="#E5E5E5">ring</font><font color="#CCCCCC"> lwe like problem because if we have</font>

155
00:07:34,199 --> 00:07:39,590
<font color="#CCCCCC">a t</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> if you want to distinguishing</font>

156
00:07:36,539 --> 00:07:43,110
distinguish<font color="#E5E5E5"> it from random we have to</font>

157
00:07:39,590 --> 00:07:46,280
see if<font color="#E5E5E5"> T is equal to a s 1 plus s 2 but</font>

158
00:07:43,110 --> 00:07:49,770
actually s 1 and s 2 have different

159
00:07:46,280 --> 00:07:52,258
<font color="#E5E5E5">different distribution</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it's a ring</font>

160
00:07:49,770 --> 00:07:54,719
<font color="#CCCCCC">of W</font><font color="#E5E5E5"> prime where we have only one sample</font>

161
00:07:52,259 --> 00:07:57,479
<font color="#E5E5E5">so this</font><font color="#CCCCCC"> program has been renamed</font><font color="#E5E5E5"> in the</font>

162
00:07:54,719 --> 00:08:01,770
original paper as decisional compact

163
00:07:57,479 --> 00:08:03,659
knapsack problem<font color="#E5E5E5"> so now the signature</font>

164
00:08:01,770 --> 00:08:06,930
<font color="#E5E5E5">it's a fusion here with the board</font>

165
00:08:03,659 --> 00:08:09,210
signature<font color="#E5E5E5"> so it's it's an adaptation of</font>

166
00:08:06,930 --> 00:08:14,069
a<font color="#E5E5E5"> few</font><font color="#CCCCCC"> Jameer identification protocol</font>

167
00:08:09,210 --> 00:08:17,219
which has commitment<font color="#CCCCCC"> and challenge</font><font color="#E5E5E5"> so it</font>

168
00:08:14,069 --> 00:08:20,009
has also<font color="#CCCCCC"> six steps the first step is to</font>

169
00:08:17,219 --> 00:08:22,569
<font color="#CCCCCC">generate</font><font color="#E5E5E5"> random so y 1 and y 2 which are</font>

170
00:08:20,009 --> 00:08:27,009
in R K where K is

171
00:08:22,569 --> 00:08:28,960
<font color="#CCCCCC">to to the 14:14 and so there is a</font>

172
00:08:27,009 --> 00:08:32,469
commitment value which is computed which

173
00:08:28,960 --> 00:08:36,549
is<font color="#CCCCCC"> R equal</font><font color="#E5E5E5"> to a 1 plus</font><font color="#CCCCCC"> 1/2</font><font color="#E5E5E5"> and this</font>

174
00:08:32,469 --> 00:08:40,839
commitment is is hashed to challenge<font color="#E5E5E5"> C</font>

175
00:08:36,549 --> 00:08:44,529
<font color="#E5E5E5">and then</font><font color="#CCCCCC"> z1 and z2 are computed as</font><font color="#E5E5E5"> s1 c</font>

176
00:08:40,839 --> 00:08:47,880
<font color="#E5E5E5">plus y 1 and s 2 c plus y 2 and since</font>

177
00:08:44,529 --> 00:08:50,140
the distribution of Y<font color="#E5E5E5"> was is z1 and z2</font>

178
00:08:47,880 --> 00:08:53,380
<font color="#E5E5E5">channel</font><font color="#CCCCCC"> leaked the secret</font><font color="#E5E5E5"> because it</font>

179
00:08:50,140 --> 00:08:56,439
depends on<font color="#CCCCCC"> s</font><font color="#E5E5E5"> 1 and s 2</font><font color="#CCCCCC"> the idea is to</font>

180
00:08:53,380 --> 00:08:58,420
use rejection sampling so<font color="#CCCCCC"> 2 to check</font>

181
00:08:56,440 --> 00:09:01,899
that the distribution<font color="#E5E5E5"> would not click</font>

182
00:08:58,420 --> 00:09:04,599
<font color="#E5E5E5">the secret so all Z 1 and Z 2 that are</font>

183
00:09:01,899 --> 00:09:09,300
too<font color="#E5E5E5"> big</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> rejected and the signature</font>

184
00:09:04,600 --> 00:09:12,700
<font color="#E5E5E5">start is restarted with a GLP parameters</font>

185
00:09:09,300 --> 00:09:14,319
<font color="#E5E5E5">the there is the</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> of attempts</font>

186
00:09:12,700 --> 00:09:17,140
<font color="#CCCCCC">before going getting</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> write signature</font>

187
00:09:14,320 --> 00:09:22,300
was around<font color="#E5E5E5"> 7 and</font><font color="#CCCCCC"> so finally the</font>

188
00:09:17,140 --> 00:09:25,240
signature is Z 1<font color="#E5E5E5"> Z 2 and</font><font color="#CCCCCC"> C 2 check if</font>

189
00:09:22,300 --> 00:09:28,120
this signature is correct we will just

190
00:09:25,240 --> 00:09:32,079
compute the<font color="#E5E5E5"> commitments so by getting</font><font color="#CCCCCC"> a</font>

191
00:09:28,120 --> 00:09:36,279
z1<font color="#E5E5E5"> plus z2 minus TC and check if it's if</font>

192
00:09:32,079 --> 00:09:38,920
it's fixed<font color="#E5E5E5"> with with the challenge C so</font>

193
00:09:36,279 --> 00:09:42,430
this<font color="#E5E5E5"> was the</font><font color="#CCCCCC"> algorithm but</font><font color="#E5E5E5"> now how to</font>

194
00:09:38,920 --> 00:09:45,790
mask this so we use<font color="#CCCCCC"> the technique which</font>

195
00:09:42,430 --> 00:09:48,699
is quite general<font color="#E5E5E5"> which has three sets so</font>

196
00:09:45,790 --> 00:09:51,699
first we choose which algorithm are

197
00:09:48,700 --> 00:09:53,829
using the secrets to<font color="#CCCCCC"> mask then for</font>

198
00:09:51,700 --> 00:09:56,560
example<font color="#E5E5E5"> here the verification does not</font>

199
00:09:53,829 --> 00:09:58,569
use the<font color="#E5E5E5"> secrets so we didn't mask it so</font>

200
00:09:56,560 --> 00:10:00,880
the signature<font color="#E5E5E5"> and key derivation it</font>

201
00:09:58,570 --> 00:10:02,890
needed to be<font color="#E5E5E5"> masked so they are first</font>

202
00:10:00,880 --> 00:10:08,140
divided into blocks that are<font color="#E5E5E5"> called</font>

203
00:10:02,890 --> 00:10:11,140
gadgets and then it's blocked<font color="#E5E5E5"> is studied</font>

204
00:10:08,140 --> 00:10:14,410
individually<font color="#CCCCCC"> too and we prove one</font>

205
00:10:11,140 --> 00:10:17,350
security<font color="#E5E5E5"> property with each block so we</font>

206
00:10:14,410 --> 00:10:21,640
<font color="#CCCCCC">use</font><font color="#E5E5E5"> several properties suffers</font><font color="#CCCCCC"> unmask</font>

207
00:10:17,350 --> 00:10:24,399
<font color="#E5E5E5">for non sensitive parts then non</font>

208
00:10:21,640 --> 00:10:28,270
<font color="#E5E5E5">interference</font><font color="#CCCCCC"> so it's some non trivial to</font>

209
00:10:24,399 --> 00:10:31,400
understand property<font color="#E5E5E5"> so we take every set</font>

210
00:10:28,270 --> 00:10:33,350
we prove that every<font color="#E5E5E5"> step of a</font>

211
00:10:31,400 --> 00:10:36,050
every set of<font color="#E5E5E5"> at most the intermediate</font>

212
00:10:33,350 --> 00:10:38,510
value can<font color="#CCCCCC"> be simulated with</font><font color="#E5E5E5"> at most D</font>

213
00:10:36,050 --> 00:10:40,579
shares of the<font color="#CCCCCC"> inputs this security</font>

214
00:10:38,510 --> 00:10:43,550
<font color="#E5E5E5">property is a little bit stronger than</font>

215
00:10:40,580 --> 00:10:47,930
<font color="#E5E5E5">the property that the security in the</font>

216
00:10:43,550 --> 00:10:49,609
<font color="#E5E5E5">ISW model but this is this</font><font color="#CCCCCC"> is needed for</font>

217
00:10:47,930 --> 00:10:52,479
<font color="#CCCCCC">improving the security of the</font><font color="#E5E5E5"> whole</font>

218
00:10:49,610 --> 00:10:55,640
scheme and<font color="#E5E5E5"> to compose the situation and</font>

219
00:10:52,480 --> 00:10:58,580
so for this<font color="#E5E5E5"> this setting we</font><font color="#CCCCCC"> had to</font>

220
00:10:55,640 --> 00:11:00,439
<font color="#CCCCCC">introduce a</font><font color="#E5E5E5"> new security property which</font>

221
00:10:58,580 --> 00:11:04,900
is called<font color="#E5E5E5"> non-interference with public</font>

222
00:11:00,440 --> 00:11:08,510
outputs so we select<font color="#E5E5E5"> output which are</font>

223
00:11:04,900 --> 00:11:11,209
intermediate<font color="#E5E5E5"> values and we give</font><font color="#CCCCCC"> it for</font>

224
00:11:08,510 --> 00:11:12,950
free to<font color="#E5E5E5"> the attacker</font><font color="#CCCCCC"> so it's we prove</font>

225
00:11:11,210 --> 00:11:14,870
that<font color="#E5E5E5"> every step every set of</font><font color="#CCCCCC"> at most D</font>

226
00:11:12,950 --> 00:11:16,880
intermediate values can be<font color="#E5E5E5"> perfectly to</font>

227
00:11:14,870 --> 00:11:21,470
simulate it with<font color="#E5E5E5"> the public outputs and</font>

228
00:11:16,880 --> 00:11:23,480
at most<font color="#E5E5E5"> D shares of each input so it's</font>

229
00:11:21,470 --> 00:11:26,240
like giving some values that<font color="#E5E5E5"> occur</font>

230
00:11:23,480 --> 00:11:29,480
output output to the attacker<font color="#E5E5E5"> but we</font>

231
00:11:26,240 --> 00:11:32,080
also<font color="#E5E5E5"> prove that the control measure dot</font>

232
00:11:29,480 --> 00:11:35,300
does not leak more than the<font color="#E5E5E5"> outputs and</font>

233
00:11:32,080 --> 00:11:39,890
that the output does<font color="#CCCCCC"> not</font><font color="#E5E5E5"> leak anything</font>

234
00:11:35,300 --> 00:11:42,109
<font color="#E5E5E5">about</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> secret and finally there is a</font>

235
00:11:39,890 --> 00:11:45,170
composition proof which uses all the

236
00:11:42,110 --> 00:11:48,470
securities property together<font color="#E5E5E5"> and improve</font>

237
00:11:45,170 --> 00:11:51,860
that this the whole scheme is secure so

238
00:11:48,470 --> 00:11:55,850
this was the<font color="#CCCCCC"> method to prove to prove</font>

239
00:11:51,860 --> 00:11:57,860
the security in the<font color="#CCCCCC"> ASW</font><font color="#E5E5E5"> model so</font><font color="#CCCCCC"> far the</font>

240
00:11:55,850 --> 00:12:01,279
masking the key derivation

241
00:11:57,860 --> 00:12:04,490
so first let's divide it in<font color="#CCCCCC"> div into</font>

242
00:12:01,279 --> 00:12:06,800
<font color="#E5E5E5">blocks so for generating the secret</font><font color="#CCCCCC"> s 1</font>

243
00:12:04,490 --> 00:12:10,010
<font color="#CCCCCC">s 2 we introduced</font><font color="#E5E5E5"> a block which</font><font color="#CCCCCC"> is</font>

244
00:12:06,800 --> 00:12:12,020
called data generation<font color="#E5E5E5"> which outputs the</font>

245
00:12:10,010 --> 00:12:15,380
<font color="#CCCCCC">number of trials before getting a</font>

246
00:12:12,020 --> 00:12:18,620
correct<font color="#E5E5E5"> masking and then it outputs the</font>

247
00:12:15,380 --> 00:12:21,200
masking of<font color="#E5E5E5"> s 1 and s you in</font><font color="#CCCCCC"> masked form</font>

248
00:12:18,620 --> 00:12:24,680
<font color="#E5E5E5">and actually in</font><font color="#CCCCCC"> arithmetical must form</font>

249
00:12:21,200 --> 00:12:28,130
<font color="#CCCCCC">so</font><font color="#E5E5E5"> the sum of its shares mod Q mod p is</font>

250
00:12:24,680 --> 00:12:31,339
<font color="#E5E5E5">equal to</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> the screen so this is for</font>

251
00:12:28,130 --> 00:12:32,990
generating the secret for<font color="#E5E5E5"> generating</font>

252
00:12:31,339 --> 00:12:38,240
<font color="#E5E5E5">assets it's a public value it's</font>

253
00:12:32,990 --> 00:12:40,910
generated not masked<font color="#CCCCCC"> and then we use an</font>

254
00:12:38,240 --> 00:12:44,480
arithmetical step to compute<font color="#E5E5E5"> T</font>

255
00:12:40,910 --> 00:12:47,180
and so it computes<font color="#CCCCCC"> T in Mass Valley</font><font color="#E5E5E5"> in</font>

256
00:12:44,480 --> 00:12:50,480
<font color="#CCCCCC">May in must</font><font color="#E5E5E5"> form so the secret is</font>

257
00:12:47,180 --> 00:12:54,349
outputted asthma in<font color="#CCCCCC"> mass form</font><font color="#E5E5E5"> as being s</font>

258
00:12:50,480 --> 00:12:57,800
<font color="#E5E5E5">1 and s 2 and since T</font><font color="#CCCCCC"> is a public value</font>

259
00:12:54,350 --> 00:13:01,610
<font color="#CCCCCC">it needs to be unmasked</font><font color="#E5E5E5"> so we use a</font>

260
00:12:57,800 --> 00:13:04,459
block which is<font color="#E5E5E5"> called full full ad which</font>

261
00:13:01,610 --> 00:13:07,700
<font color="#CCCCCC">is a refreshing refreshing the mask</font><font color="#E5E5E5"> and</font>

262
00:13:04,460 --> 00:13:10,130
adding them together<font color="#E5E5E5"> and then it outputs</font>

263
00:13:07,700 --> 00:13:11,720
T which is<font color="#E5E5E5"> the public value and so we</font>

264
00:13:10,130 --> 00:13:14,780
have the<font color="#E5E5E5"> secret the public key which is</font>

265
00:13:11,720 --> 00:13:19,250
80 which is<font color="#E5E5E5"> unmasked</font><font color="#CCCCCC"> so here is the</font>

266
00:13:14,780 --> 00:13:21,170
<font color="#CCCCCC">block form of the key relation and so we</font>

267
00:13:19,250 --> 00:13:26,690
studied each block<font color="#E5E5E5"> separately to prove</font>

268
00:13:21,170 --> 00:13:31,610
the security and so we<font color="#E5E5E5"> prove that</font><font color="#CCCCCC"> H 1 H</font>

269
00:13:26,690 --> 00:13:33,830
<font color="#CCCCCC">1 and our non-interference</font><font color="#E5E5E5"> and data</font>

270
00:13:31,610 --> 00:13:36,380
generation is<font color="#CCCCCC"> known</font><font color="#E5E5E5"> a different with</font>

271
00:13:33,830 --> 00:13:38,300
public output trials and so with those

272
00:13:36,380 --> 00:13:41,810
security<font color="#E5E5E5"> we prove</font><font color="#CCCCCC"> that each iteration is</font>

273
00:13:38,300 --> 00:13:43,880
<font color="#E5E5E5">a secure in the</font><font color="#CCCCCC"> ASW</font><font color="#E5E5E5"> motto for the</font>

274
00:13:41,810 --> 00:13:48,050
signature it was a little bit harder

275
00:13:43,880 --> 00:13:50,330
because there were a<font color="#CCCCCC"> problem with the</font>

276
00:13:48,050 --> 00:13:52,760
with the commitment value which is R

277
00:13:50,330 --> 00:13:55,940
which is equal<font color="#CCCCCC"> to a 1 1</font><font color="#E5E5E5"> plus y</font><font color="#CCCCCC"> 2 the</font>

278
00:13:52,760 --> 00:13:57,980
problem<font color="#CCCCCC"> is that we did</font><font color="#E5E5E5"> not want to mask</font>

279
00:13:55,940 --> 00:14:02,510
the hashing function because it would

280
00:13:57,980 --> 00:14:04,820
<font color="#E5E5E5">have been terrible</font><font color="#CCCCCC"> for performances if</font>

281
00:14:02,510 --> 00:14:08,480
we see the<font color="#E5E5E5"> D signature as an</font>

282
00:14:04,820 --> 00:14:12,080
identification protocol we don't see why

283
00:14:08,480 --> 00:14:14,540
our should be secret<font color="#E5E5E5"> so actually we</font>

284
00:14:12,080 --> 00:14:16,490
proved that masking the commitment<font color="#E5E5E5"> was</font>

285
00:14:14,540 --> 00:14:20,589
unnecessary<font color="#E5E5E5"> and it that it could be an</font>

286
00:14:16,490 --> 00:14:22,970
output so we<font color="#CCCCCC"> prove by proving that</font>

287
00:14:20,590 --> 00:14:25,310
<font color="#E5E5E5">distinguishing our C pairs from</font><font color="#CCCCCC"> uniform</font>

288
00:14:22,970 --> 00:14:28,070
is a hard problem even for<font color="#E5E5E5"> rejected</font>

289
00:14:25,310 --> 00:14:30,619
executions<font color="#E5E5E5"> for the final execution we</font>

290
00:14:28,070 --> 00:14:33,140
can see that we can<font color="#E5E5E5"> recover</font><font color="#CCCCCC"> C and art so</font>

291
00:14:30,620 --> 00:14:35,570
<font color="#CCCCCC">they are</font><font color="#E5E5E5"> not sensitive</font><font color="#CCCCCC"> but for the</font>

292
00:14:33,140 --> 00:14:41,840
rejected execution<font color="#CCCCCC"> it</font><font color="#E5E5E5"> wasn't real to</font>

293
00:14:35,570 --> 00:14:44,060
<font color="#E5E5E5">prove so to prove the security of GL</font>

294
00:14:41,840 --> 00:14:46,029
design we did<font color="#E5E5E5"> the same we divided it</font>

295
00:14:44,060 --> 00:14:49,238
into blocks<font color="#E5E5E5"> so first</font>

296
00:14:46,029 --> 00:14:50,979
we use the same<font color="#CCCCCC"> lungs as for the key</font>

297
00:14:49,239 --> 00:14:56,979
derivation so data generation which

298
00:14:50,979 --> 00:15:00,729
outputs y1 and y2 in<font color="#CCCCCC"> mask form then we</font>

299
00:14:56,979 --> 00:15:05,049
compute the same arithmetical block to

300
00:15:00,729 --> 00:15:08,079
get the<font color="#E5E5E5"> commitment</font><font color="#CCCCCC"> R and since we come</font>

301
00:15:05,049 --> 00:15:11,649
<font color="#E5E5E5">our was proved not sensitive we unmask</font>

302
00:15:08,079 --> 00:15:13,449
it with the full<font color="#CCCCCC"> unblock and then we</font>

303
00:15:11,649 --> 00:15:17,319
hash it<font color="#E5E5E5"> with the message to get the</font>

304
00:15:13,449 --> 00:15:20,348
commitment<font color="#E5E5E5"> the challenge and then with</font>

305
00:15:17,319 --> 00:15:23,858
<font color="#E5E5E5">with this we can compute z1 and z2 so</font>

306
00:15:20,349 --> 00:15:26,739
with the using<font color="#CCCCCC"> a y1 and y2 in mass form</font>

307
00:15:23,859 --> 00:15:28,389
<font color="#E5E5E5">and after there is</font><font color="#CCCCCC"> a step which is the</font>

308
00:15:26,739 --> 00:15:30,639
rejection something which was a<font color="#E5E5E5"> little</font>

309
00:15:28,389 --> 00:15:32,529
bit complicated so here is the rejection

310
00:15:30,639 --> 00:15:37,559
<font color="#E5E5E5">something step which output the</font>

311
00:15:32,529 --> 00:15:40,359
signature<font color="#E5E5E5"> so here is a</font><font color="#CCCCCC"> sodium design in</font>

312
00:15:37,559 --> 00:15:42,728
<font color="#E5E5E5">block forms so</font><font color="#CCCCCC"> we studied each block</font>

313
00:15:40,359 --> 00:15:46,239
separately to prove the security here is

314
00:15:42,729 --> 00:15:48,129
the security of all the<font color="#E5E5E5"> blocks so the</font>

315
00:15:46,239 --> 00:15:49,659
<font color="#CCCCCC">main ones</font><font color="#E5E5E5"> are not different</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we can</font>

316
00:15:48,129 --> 00:15:52,509
<font color="#E5E5E5">see that the hash functions is not</font>

317
00:15:49,659 --> 00:15:56,049
<font color="#E5E5E5">masked because we proved that arc is not</font>

318
00:15:52,509 --> 00:15:58,869
sensitive<font color="#E5E5E5"> and so we also had to prove</font>

319
00:15:56,049 --> 00:16:02,199
<font color="#E5E5E5">that the full</font><font color="#CCCCCC"> add at</font><font color="#E5E5E5"> the middle was not</font>

320
00:15:58,869 --> 00:16:05,199
<font color="#E5E5E5">interference with public output</font><font color="#CCCCCC"> arm so</font>

321
00:16:02,199 --> 00:16:07,029
to prove that most blocks were quite

322
00:16:05,199 --> 00:16:09,549
classical for masking but they were<font color="#E5E5E5"> two</font>

323
00:16:07,029 --> 00:16:13,089
blocks<font color="#E5E5E5"> that were especially that were</font>

324
00:16:09,549 --> 00:16:17,559
new<font color="#E5E5E5"> so data generation and</font><font color="#CCCCCC"> rejection</font>

325
00:16:13,089 --> 00:16:21,009
something so RS block here<font color="#CCCCCC"> for that we</font>

326
00:16:17,559 --> 00:16:24,608
used what is called conversion boolean

327
00:16:21,009 --> 00:16:27,699
<font color="#E5E5E5">to arithmetic so let's see it on at the</font>

328
00:16:24,609 --> 00:16:31,989
example of the<font color="#E5E5E5"> rejection sampling so we</font>

329
00:16:27,699 --> 00:16:35,529
want to know if<font color="#CCCCCC"> Z 1 is</font><font color="#E5E5E5"> in RK minus alpha</font>

330
00:16:31,989 --> 00:16:38,529
so actually we want to know if Z 1 which

331
00:16:35,529 --> 00:16:42,519
is the sum<font color="#CCCCCC"> of all the Z is a mod P mod p</font>

332
00:16:38,529 --> 00:16:44,409
<font color="#E5E5E5">is lower than K minus alpha and this is</font>

333
00:16:42,519 --> 00:16:47,859
hard to do with<font color="#CCCCCC"> this</font><font color="#E5E5E5"> kind of masking</font>

334
00:16:44,409 --> 00:16:50,409
<font color="#E5E5E5">because it's the somewhat mod p</font><font color="#CCCCCC"> and it</font>

335
00:16:47,859 --> 00:16:52,130
would be easier with<font color="#E5E5E5"> the boolean masking</font>

336
00:16:50,409 --> 00:16:56,500
so we used

337
00:16:52,130 --> 00:17:00,980
work from<font color="#CCCCCC"> home</font><font color="#E5E5E5"> question and</font><font color="#CCCCCC"> Alana in</font>

338
00:16:56,500 --> 00:17:03,579
2014<font color="#CCCCCC"> which converts an</font><font color="#E5E5E5"> arithmetic</font><font color="#CCCCCC"> I'm</font>

339
00:17:00,980 --> 00:17:07,339
<font color="#CCCCCC">asking and gives a boolean masking</font><font color="#E5E5E5"> and</font>

340
00:17:03,579 --> 00:17:09,980
so we use these<font color="#CCCCCC"> to convert</font><font color="#E5E5E5"> it to the</font>

341
00:17:07,339 --> 00:17:14,299
boolean masking to get to get what we

342
00:17:09,980 --> 00:17:19,549
wanted<font color="#CCCCCC"> so to know if it was lower or</font>

343
00:17:14,299 --> 00:17:25,089
higher<font color="#E5E5E5"> than</font><font color="#CCCCCC"> this value so finally here</font>

344
00:17:19,549 --> 00:17:28,089
are<font color="#E5E5E5"> the performances of our our work so</font>

345
00:17:25,089 --> 00:17:31,668
we provided<font color="#E5E5E5"> an implementation with</font>

346
00:17:28,089 --> 00:17:33,918
several<font color="#E5E5E5"> orders of masking for example</font>

347
00:17:31,669 --> 00:17:38,720
for a number<font color="#E5E5E5"> of share which is</font><font color="#CCCCCC"> two the</font>

348
00:17:33,919 --> 00:17:42,370
algorithm is<font color="#CCCCCC"> 15 times slower</font><font color="#E5E5E5"> and it gets</font>

349
00:17:38,720 --> 00:17:47,030
higher and higher<font color="#CCCCCC"> and for</font><font color="#E5E5E5"> example for</font>

350
00:17:42,370 --> 00:17:50,209
for for share the<font color="#E5E5E5"> the algorithm takes</font>

351
00:17:47,030 --> 00:17:52,160
<font color="#E5E5E5">around 40 seconds so for now it's not</font>

352
00:17:50,210 --> 00:17:54,230
really<font color="#E5E5E5"> practical but it's quite</font>

353
00:17:52,160 --> 00:17:58,360
promising<font color="#E5E5E5"> because it was just</font><font color="#CCCCCC"> a proof</font><font color="#E5E5E5"> of</font>

354
00:17:54,230 --> 00:18:00,830
concept<font color="#CCCCCC"> and it can be optimized</font><font color="#E5E5E5"> so it's</font>

355
00:17:58,360 --> 00:18:04,490
proving that's masking<font color="#CCCCCC"> and lattice base</font>

356
00:18:00,830 --> 00:18:06,470
<font color="#CCCCCC">signatures can be done and so the code</font>

357
00:18:04,490 --> 00:18:10,210
of this<font color="#CCCCCC"> implementation will be published</font>

358
00:18:06,470 --> 00:18:15,770
soon<font color="#E5E5E5"> and as I said there is a margin for</font>

359
00:18:10,210 --> 00:18:18,290
<font color="#E5E5E5">improvement of performances here so in a</font>

360
00:18:15,770 --> 00:18:20,510
nutshell we provided a provable<font color="#E5E5E5"> math</font>

361
00:18:18,290 --> 00:18:23,690
implementation of<font color="#CCCCCC"> GLP signature scheme</font>

362
00:18:20,510 --> 00:18:26,330
<font color="#E5E5E5">with new techniques for adapted for the</font>

363
00:18:23,690 --> 00:18:28,220
future<font color="#CCCCCC"> mail</font><font color="#E5E5E5"> framework and this can be</font>

364
00:18:26,330 --> 00:18:29,600
applied<font color="#CCCCCC"> directly to deletion and</font>

365
00:18:28,220 --> 00:18:31,909
actually there<font color="#E5E5E5"> is an</font><font color="#CCCCCC"> implementation</font><font color="#E5E5E5"> in</font>

366
00:18:29,600 --> 00:18:36,678
progress which will be published<font color="#E5E5E5"> soon</font>

367
00:18:31,909 --> 00:18:39,290
<font color="#CCCCCC">and now we will study</font><font color="#E5E5E5"> the matter</font><font color="#CCCCCC"> how to</font>

368
00:18:36,679 --> 00:18:43,040
mask<font color="#E5E5E5"> other schemes like bliss or delete</font>

369
00:18:39,290 --> 00:18:45,770
<font color="#CCCCCC">oMG which use</font><font color="#E5E5E5"> Gaussian so we need to</font>

370
00:18:43,040 --> 00:18:48,260
<font color="#E5E5E5">find a solution for</font><font color="#CCCCCC"> Goshen's</font><font color="#E5E5E5"> and also in</font>

371
00:18:45,770 --> 00:18:50,830
those<font color="#E5E5E5"> schemes</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> not sure</font><font color="#CCCCCC"> that the</font>

372
00:18:48,260 --> 00:18:56,120
hash function can be<font color="#E5E5E5"> at masked as in</font><font color="#CCCCCC"> GLP</font>

373
00:18:50,830 --> 00:18:58,340
so<font color="#E5E5E5"> here is the future work so thank you</font>

374
00:18:56,120 --> 00:19:01,090
<font color="#E5E5E5">for your attention</font><font color="#CCCCCC"> there are</font><font color="#E5E5E5"> two two</font>

375
00:18:58,340 --> 00:19:01,090
links<font color="#E5E5E5"> for</font><font color="#CCCCCC"> pi</font>

376
00:19:01,730 --> 00:19:08,430
[Applause]

377
00:19:17,029 --> 00:19:21,179
so when you're masking trials is that

378
00:19:19,529 --> 00:19:23,490
<font color="#E5E5E5">just a number of trials like the number</font>

379
00:19:21,179 --> 00:19:27,059
of<font color="#E5E5E5"> trouser took - yeah we're assembling</font>

380
00:19:23,490 --> 00:19:28,830
<font color="#E5E5E5">because I haven't actually</font><font color="#CCCCCC"> seen anything</font>

381
00:19:27,059 --> 00:19:30,990
that's<font color="#CCCCCC"> - how that would help</font>

382
00:19:28,830 --> 00:19:34,590
it seems like the I mean as to<font color="#E5E5E5"> how you</font>

383
00:19:30,990 --> 00:19:38,789
would use that alone to provide an

384
00:19:34,590 --> 00:19:40,230
attack versus more detail about what's

385
00:19:38,789 --> 00:19:42,269
going on what's actually happening in

386
00:19:40,230 --> 00:19:45,299
the trials<font color="#E5E5E5"> just which number of trials</font>

387
00:19:42,269 --> 00:19:48,119
the<font color="#E5E5E5"> number of trials in in data</font>

388
00:19:45,299 --> 00:19:52,440
generation here yeah<font color="#E5E5E5"> okay here it's not</font>

389
00:19:48,119 --> 00:19:54,090
much<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> outputted</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> no it's</font>

390
00:19:52,440 --> 00:19:57,299
not<font color="#CCCCCC"> mastered in here so just</font><font color="#E5E5E5"> know this</font>

391
00:19:54,090 --> 00:20:00,119
<font color="#E5E5E5">is</font><font color="#CCCCCC"> not much</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> assume</font><font color="#E5E5E5"> I said it's a yeah</font>

392
00:19:57,299 --> 00:20:02,399
and so I misunderstood<font color="#E5E5E5"> that I and</font>

393
00:20:00,119 --> 00:20:07,908
<font color="#E5E5E5">actually the number of tries is a is</font>

394
00:20:02,399 --> 00:20:07,908
<font color="#E5E5E5">often one with this implementation</font><font color="#CCCCCC"> set</font>

395
00:20:11,389 --> 00:20:15,539
thanks was<font color="#E5E5E5"> a nice talk so I was</font>

396
00:20:13,710 --> 00:20:18,450
wondering<font color="#CCCCCC"> you say that Goshen simply</font>

397
00:20:15,539 --> 00:20:20,429
make<font color="#E5E5E5"> it's hard</font><font color="#CCCCCC"> is it simply in itself</font>

398
00:20:18,450 --> 00:20:23,850
that make it hard<font color="#E5E5E5"> or the computation of</font>

399
00:20:20,429 --> 00:20:26,490
the<font color="#E5E5E5"> rejection rates and gets</font><font color="#CCCCCC"> evolve</font>

400
00:20:23,850 --> 00:20:29,100
computing conservative function<font color="#E5E5E5"> actually</font>

401
00:20:26,490 --> 00:20:31,769
those<font color="#CCCCCC"> are two different</font><font color="#E5E5E5"> hard problems</font>

402
00:20:29,100 --> 00:20:34,980
<font color="#E5E5E5">and for now we are just</font><font color="#CCCCCC"> looking</font><font color="#E5E5E5"> at how</font>

403
00:20:31,769 --> 00:20:36,809
to just generate shares with that<font color="#CCCCCC"> sum to</font>

404
00:20:34,980 --> 00:20:40,289
something that has the Gaussian

405
00:20:36,809 --> 00:20:42,629
<font color="#E5E5E5">distribution</font><font color="#CCCCCC"> and for</font><font color="#E5E5E5"> now we thought</font><font color="#CCCCCC"> that</font>

406
00:20:40,289 --> 00:20:44,940
we<font color="#CCCCCC"> could use Gaussian</font><font color="#E5E5E5"> shares with</font>

407
00:20:42,629 --> 00:20:46,590
<font color="#CCCCCC">Gaussian distribution but actually since</font>

408
00:20:44,940 --> 00:20:51,179
it's a discrete Gaussian it's different

409
00:20:46,590 --> 00:20:55,289
<font color="#E5E5E5">so for</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> we might</font><font color="#CCCCCC"> might look at how to</font>

410
00:20:51,179 --> 00:20:57,269
mask cumulative tables for<font color="#E5E5E5"> this and this</font>

411
00:20:55,289 --> 00:20:59,759
would<font color="#E5E5E5"> be a solution but expensive</font>

412
00:20:57,269 --> 00:21:01,860
solution<font color="#CCCCCC"> and for the Gaussian some for</font>

413
00:20:59,759 --> 00:21:05,610
the Gaussian with rejection something

414
00:21:01,860 --> 00:21:09,179
for now we didn't look at that yet<font color="#CCCCCC"> okay</font>

415
00:21:05,610 --> 00:21:12,179
so maybe we<font color="#E5E5E5"> deserve</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> work with by</font><font color="#CCCCCC"> no</font>

416
00:21:09,180 --> 00:21:16,080
<font color="#CCCCCC">distributionally same thing</font><font color="#E5E5E5"> yes then the</font>

417
00:21:12,180 --> 00:21:26,070
<font color="#CCCCCC">rejection becomes even</font><font color="#E5E5E5"> that's what is in</font>

418
00:21:16,080 --> 00:21:29,730
this we<font color="#E5E5E5"> have time for more questions</font><font color="#CCCCCC"> no</font>

419
00:21:26,070 --> 00:21:32,070
<font color="#E5E5E5">I just have one more general question</font>

420
00:21:29,730 --> 00:21:34,740
maybe<font color="#E5E5E5"> do you know about other post</font>

421
00:21:32,070 --> 00:21:36,330
quantum techniques like<font color="#E5E5E5"> code</font><font color="#CCCCCC"> based or</font>

422
00:21:34,740 --> 00:21:43,620
ISO<font color="#E5E5E5"> Gigi or something like this is it</font>

423
00:21:36,330 --> 00:21:45,480
easier or harder to<font color="#E5E5E5"> ask for multivariate</font>

424
00:21:43,620 --> 00:21:48,090
cryptography<font color="#CCCCCC"> for now there is no there</font>

425
00:21:45,480 --> 00:21:54,720
is no masking<font color="#E5E5E5"> hash</font><font color="#CCCCCC"> base I I don't</font><font color="#E5E5E5"> know</font>

426
00:21:48,090 --> 00:21:57,090
and<font color="#E5E5E5"> four codes</font><font color="#CCCCCC"> there were there were</font>

427
00:21:54,720 --> 00:21:59,460
some works<font color="#E5E5E5"> that use</font><font color="#CCCCCC"> math a code word</font>

428
00:21:57,090 --> 00:22:03,080
asthma as<font color="#E5E5E5"> masked masks but</font><font color="#CCCCCC"> I don't know</font>

429
00:21:59,460 --> 00:22:06,480
if there<font color="#CCCCCC"> is the order of masking</font><font color="#E5E5E5"> forties</font>

430
00:22:03,080 --> 00:22:07,100
<font color="#CCCCCC">okay thank you so let's make you speak</font>

431
00:22:06,480 --> 00:22:13,840
here again

432
00:22:07,100 --> 00:22:13,840
[Applause]

