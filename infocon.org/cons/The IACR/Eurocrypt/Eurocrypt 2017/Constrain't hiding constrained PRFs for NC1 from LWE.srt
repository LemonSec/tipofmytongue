1
00:00:00,650 --> 00:00:05,009
so today I'm going to talk about

2
00:00:02,429 --> 00:00:07,080
<font color="#E5E5E5">constraint hiding</font><font color="#CCCCCC"> constraint pinc one</font>

3
00:00:05,009 --> 00:00:10,530
from<font color="#CCCCCC"> lwe and this is a joint</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> with</font>

4
00:00:07,080 --> 00:00:11,940
<font color="#CCCCCC">strong so</font><font color="#E5E5E5"> essentially this</font><font color="#CCCCCC"> is just a</font>

5
00:00:10,530 --> 00:00:15,320
<font color="#CCCCCC">different</font><font color="#E5E5E5"> name for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> same thing which</font>

6
00:00:11,940 --> 00:00:20,070
<font color="#CCCCCC">is</font><font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about for the last</font><font color="#E5E5E5"> talk and</font>

7
00:00:15,320 --> 00:00:22,619
<font color="#E5E5E5">yeah so I</font><font color="#CCCCCC"> guess I will start so so let</font>

8
00:00:20,070 --> 00:00:26,670
me start by history and so this is the

9
00:00:22,619 --> 00:00:29,160
famous figure by of Napoleon and such a

10
00:00:26,670 --> 00:00:33,660
symbol should remind you of<font color="#E5E5E5"> puncturing</font>

11
00:00:29,160 --> 00:00:35,489
<font color="#E5E5E5">right and this is my introduction so the</font>

12
00:00:33,660 --> 00:00:39,809
notion<font color="#E5E5E5"> of puncture bow or</font><font color="#CCCCCC"> constrained</font>

13
00:00:35,489 --> 00:00:42,570
<font color="#E5E5E5">PRF</font><font color="#CCCCCC"> so what does</font><font color="#E5E5E5"> it do so it starts</font><font color="#CCCCCC"> with</font>

14
00:00:39,809 --> 00:00:45,959
<font color="#CCCCCC">the normal PRF key which I</font><font color="#E5E5E5"> refer to as</font>

15
00:00:42,570 --> 00:00:49,410
the<font color="#E5E5E5"> original key and then you point at</font>

16
00:00:45,960 --> 00:00:52,140
some point<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you don't like</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then</font>

17
00:00:49,410 --> 00:00:56,480
it would arrive<font color="#CCCCCC"> a key</font><font color="#E5E5E5"> which I denote as</font>

18
00:00:52,140 --> 00:00:59,039
K is bracket X star so<font color="#CCCCCC"> it will evaluate</font>

19
00:00:56,480 --> 00:01:01,980
so if you have this key in your mind

20
00:00:59,039 --> 00:01:04,769
<font color="#CCCCCC">then you</font><font color="#E5E5E5"> can evaluate the</font><font color="#CCCCCC"> function</font><font color="#E5E5E5"> on</font>

21
00:01:01,980 --> 00:01:07,890
the<font color="#E5E5E5"> everywhere defined on the original</font>

22
00:01:04,769 --> 00:01:13,490
key but<font color="#CCCCCC"> not at the point that</font><font color="#E5E5E5"> you're</font>

23
00:01:07,890 --> 00:01:16,500
puncturing<font color="#E5E5E5"> and so it's kind of like the</font>

24
00:01:13,490 --> 00:01:18,600
it you know<font color="#CCCCCC"> it preserved</font><font color="#E5E5E5"> in this somehow</font>

25
00:01:16,500 --> 00:01:21,509
you also want the<font color="#E5E5E5"> original</font><font color="#CCCCCC"> output</font><font color="#E5E5E5"> on the</font>

26
00:01:18,600 --> 00:01:23,460
punch of<font color="#CCCCCC"> the input to be hidden so</font><font color="#E5E5E5"> you</font>

27
00:01:21,509 --> 00:01:26,369
want the output to be sort of randomized

28
00:01:23,460 --> 00:01:29,759
<font color="#E5E5E5">given a punctured key and this notion is</font>

29
00:01:26,369 --> 00:01:30,869
kind of<font color="#E5E5E5"> a given by several works and in</font>

30
00:01:29,759 --> 00:01:33,930
general you<font color="#E5E5E5"> can extend</font><font color="#CCCCCC"> it to a</font>

31
00:01:30,869 --> 00:01:36,960
constraint<font color="#E5E5E5"> PRF where you not only want</font>

32
00:01:33,930 --> 00:01:38,610
to kind of wipe<font color="#CCCCCC"> out one</font><font color="#E5E5E5"> way input but</font>

33
00:01:36,960 --> 00:01:41,130
also you can choose a circuit<font color="#E5E5E5"> or</font>

34
00:01:38,610 --> 00:01:42,659
predicate where you can<font color="#CCCCCC"> de pretty clear</font>

35
00:01:41,130 --> 00:01:45,089
<font color="#CCCCCC">to</font><font color="#E5E5E5"> I tell you there are many</font><font color="#CCCCCC"> points</font>

36
00:01:42,659 --> 00:01:47,399
essentially you can<font color="#E5E5E5"> randomize or either</font>

37
00:01:45,090 --> 00:01:51,780
wanted to show up in the puncture the

38
00:01:47,399 --> 00:01:53,250
key so the notions of<font color="#E5E5E5"> punishable</font><font color="#CCCCCC"> PRF in</font>

39
00:01:51,780 --> 00:01:56,070
<font color="#E5E5E5">a constrained PRF they have many</font>

40
00:01:53,250 --> 00:01:57,990
applications<font color="#CCCCCC"> probably they</font><font color="#E5E5E5"> are best</font>

41
00:01:56,070 --> 00:02:01,740
known<font color="#E5E5E5"> for being a very</font><font color="#CCCCCC"> good friends of</font>

42
00:01:57,990 --> 00:02:03,360
<font color="#E5E5E5">IO and yeah that's the history so</font><font color="#CCCCCC"> Anna</font>

43
00:02:01,740 --> 00:02:05,610
<font color="#CCCCCC">giving it a little</font><font color="#E5E5E5"> bit a background</font><font color="#CCCCCC"> on</font>

44
00:02:03,360 --> 00:02:08,190
<font color="#CCCCCC">the kind</font><font color="#E5E5E5"> of what's the kind of that</font>

45
00:02:05,610 --> 00:02:11,068
textbook<font color="#CCCCCC"> PRF how to puncture that</font><font color="#E5E5E5"> the</font>

46
00:02:08,190 --> 00:02:13,859
textbook PRF<font color="#E5E5E5"> is actually punishable so</font>

47
00:02:11,068 --> 00:02:16,920
if you look at the<font color="#CCCCCC"> GGN tree based appear</font>

48
00:02:13,860 --> 00:02:21,090
and<font color="#E5E5E5"> essentially each point is kind of</font>

49
00:02:16,920 --> 00:02:25,230
the value<font color="#CCCCCC"> is</font><font color="#E5E5E5"> defined by our</font><font color="#CCCCCC"> path of the</font>

50
00:02:21,090 --> 00:02:27,780
PRG evaluation<font color="#E5E5E5"> so to puncture the</font><font color="#CCCCCC"> GMP I</font>

51
00:02:25,230 --> 00:02:30,630
of what<font color="#CCCCCC"> you do is you output</font><font color="#E5E5E5"> the output</font>

52
00:02:27,780 --> 00:02:32,790
<font color="#E5E5E5">of values a lot of</font><font color="#CCCCCC"> siblings of the part</font>

53
00:02:30,630 --> 00:02:34,290
of the point so that if we output

54
00:02:32,790 --> 00:02:37,799
everything<font color="#E5E5E5"> in the black which is the</font>

55
00:02:34,290 --> 00:02:40,109
<font color="#CCCCCC">origin a value and we just go out</font><font color="#E5E5E5"> to put</font>

56
00:02:37,800 --> 00:02:42,540
<font color="#CCCCCC">the thing on</font><font color="#E5E5E5"> the red point which is the</font>

57
00:02:40,110 --> 00:02:45,540
input<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> interested in then kind of</font>

58
00:02:42,540 --> 00:02:47,489
<font color="#E5E5E5">the</font><font color="#CCCCCC"> value will be randomized</font><font color="#E5E5E5"> and</font>

59
00:02:45,540 --> 00:02:49,920
everything else<font color="#E5E5E5"> you can still evaluate</font>

60
00:02:47,490 --> 00:02:51,480
and they will be preserved<font color="#E5E5E5"> so</font><font color="#CCCCCC"> some</font>

61
00:02:49,920 --> 00:02:55,410
<font color="#CCCCCC">things</font><font color="#E5E5E5"> to remember is like the the</font>

62
00:02:51,480 --> 00:02:57,989
<font color="#E5E5E5">output X star is</font><font color="#CCCCCC"> wipe out but by looking</font>

63
00:02:55,410 --> 00:03:00,359
<font color="#CCCCCC">at the Napoleon's Highness gesture you</font>

64
00:02:57,990 --> 00:03:03,709
<font color="#CCCCCC">can still tell which Punk</font><font color="#E5E5E5"> which point</font>

65
00:03:00,360 --> 00:03:05,790
you're pointing so this is kind<font color="#E5E5E5"> of the</font>

66
00:03:03,709 --> 00:03:08,330
limitation of the previous part of<font color="#E5E5E5"> a</font>

67
00:03:05,790 --> 00:03:10,739
pair of that kind<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> constraint key</font>

68
00:03:08,330 --> 00:03:16,370
<font color="#CCCCCC">essentially</font><font color="#E5E5E5"> leaks</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> constraint that</font>

69
00:03:10,740 --> 00:03:18,420
<font color="#E5E5E5">you're</font><font color="#CCCCCC"> dealing with so</font><font color="#E5E5E5"> so back to the</font>

70
00:03:16,370 --> 00:03:21,269
irrelevant history a little<font color="#E5E5E5"> bit so</font>

71
00:03:18,420 --> 00:03:24,030
Napoleon<font color="#E5E5E5"> is not only</font><font color="#CCCCCC"> know for good at a</font>

72
00:03:21,269 --> 00:03:29,850
lot<font color="#E5E5E5"> of things he's also good at dealing</font>

73
00:03:24,030 --> 00:03:32,880
with kind of how to<font color="#E5E5E5"> say so how to deal</font>

74
00:03:29,850 --> 00:03:35,340
<font color="#CCCCCC">with the precious</font><font color="#E5E5E5"> situations so</font><font color="#CCCCCC"> we were</font>

75
00:03:32,880 --> 00:03:39,000
to put<font color="#CCCCCC"> your hand and we</font><font color="#E5E5E5"> have pressure</font>

76
00:03:35,340 --> 00:03:41,730
<font color="#E5E5E5">right so natural things he's thinking is</font>

77
00:03:39,000 --> 00:03:44,370
like what if I put my<font color="#E5E5E5"> hand</font><font color="#CCCCCC"> here like</font><font color="#E5E5E5"> a</font>

78
00:03:41,730 --> 00:03:46,140
<font color="#E5E5E5">hide something so this naturally</font><font color="#CCCCCC"> leads</font>

79
00:03:44,370 --> 00:03:47,220
to the<font color="#CCCCCC"> notion of constraint hiding</font>

80
00:03:46,140 --> 00:03:50,488
<font color="#E5E5E5">constraint PRF</font>

81
00:03:47,220 --> 00:03:52,230
so before we formalize what<font color="#CCCCCC"> is mean</font><font color="#E5E5E5"> of a</font>

82
00:03:50,489 --> 00:03:55,410
constraint<font color="#E5E5E5"> hiding has</font><font color="#CCCCCC"> to NPR let's just</font>

83
00:03:52,230 --> 00:03:57,570
think a very high<font color="#CCCCCC"> level so essentially</font>

84
00:03:55,410 --> 00:03:59,070
<font color="#E5E5E5">for cryptographers the most thing you</font>

85
00:03:57,570 --> 00:04:01,620
can hide<font color="#E5E5E5"> the most things you can do</font>

86
00:03:59,070 --> 00:04:04,260
right<font color="#CCCCCC"> and so you can</font><font color="#E5E5E5"> think about putting</font>

87
00:04:01,620 --> 00:04:06,000
<font color="#CCCCCC">your secrets</font><font color="#E5E5E5"> in the pocket you can think</font>

88
00:04:04,260 --> 00:04:08,280
<font color="#E5E5E5">about put a turkey</font><font color="#CCCCCC"> in the pocket or</font>

89
00:04:06,000 --> 00:04:12,090
whatever<font color="#E5E5E5"> you don't</font><font color="#CCCCCC"> want to review and</font>

90
00:04:08,280 --> 00:04:14,670
sometimes I mean like the power of

91
00:04:12,090 --> 00:04:17,310
hiding<font color="#E5E5E5"> more</font><font color="#CCCCCC"> since it leaves the whole</font>

92
00:04:14,670 --> 00:04:20,579
imagination<font color="#E5E5E5"> kind of in the theory and</font>

93
00:04:17,310 --> 00:04:22,289
<font color="#CCCCCC">the practice</font><font color="#E5E5E5"> of cryptography so so I</font>

94
00:04:20,579 --> 00:04:24,690
<font color="#CCCCCC">think</font><font color="#E5E5E5"> this is a great notion to think</font>

95
00:04:22,289 --> 00:04:27,810
about and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can hide more</font><font color="#E5E5E5"> things in</font>

96
00:04:24,690 --> 00:04:31,740
this case so in the<font color="#E5E5E5"> formula</font>

97
00:04:27,810 --> 00:04:35,100
so in the work of<font color="#CCCCCC"> Benelli and the whoo</font>

98
00:04:31,740 --> 00:04:36,630
<font color="#CCCCCC">they ask and answer partially</font><font color="#E5E5E5"> is three</font>

99
00:04:35,100 --> 00:04:39,330
philosophical question related to

100
00:04:36,630 --> 00:04:41,159
constrain hiding<font color="#E5E5E5"> constraint PRF first</font>

101
00:04:39,330 --> 00:04:43,560
what<font color="#E5E5E5"> is the constraint hiding constraint</font>

102
00:04:41,160 --> 00:04:45,660
PRF<font color="#E5E5E5"> so they essentially give the</font>

103
00:04:43,560 --> 00:04:47,870
indistinguishable<font color="#E5E5E5"> a today's definitions</font>

104
00:04:45,660 --> 00:04:52,800
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> may heard from the</font><font color="#E5E5E5"> last talk</font>

105
00:04:47,870 --> 00:04:55,500
and we are to fight these prfs<font color="#CCCCCC"> and so</font>

106
00:04:52,800 --> 00:04:58,740
<font color="#CCCCCC">they first show actually</font><font color="#E5E5E5"> IO of punchable</font>

107
00:04:55,500 --> 00:05:00,860
PRF directory is already hiding<font color="#CCCCCC"> the</font>

108
00:04:58,740 --> 00:05:04,800
<font color="#E5E5E5">thing so you can do with the proof</font><font color="#CCCCCC"> and</font>

109
00:05:00,860 --> 00:05:07,010
also for<font color="#CCCCCC"> restricted type of constraints</font>

110
00:05:04,800 --> 00:05:09,720
you can<font color="#CCCCCC"> do from various assumptions from</font>

111
00:05:07,010 --> 00:05:12,500
<font color="#E5E5E5">motolinia map steel strands assumptions</font>

112
00:05:09,720 --> 00:05:14,910
but a more concrete<font color="#E5E5E5"> in some sense and</font>

113
00:05:12,500 --> 00:05:17,130
also how to use<font color="#E5E5E5"> them there's many</font>

114
00:05:14,910 --> 00:05:19,500
concrete<font color="#E5E5E5"> ways of using them where you</font>

115
00:05:17,130 --> 00:05:22,340
can<font color="#E5E5E5"> see on the screen</font><font color="#CCCCCC"> and potentially</font>

116
00:05:19,500 --> 00:05:25,740
you come up with<font color="#E5E5E5"> your</font><font color="#CCCCCC"> own applications</font>

117
00:05:22,340 --> 00:05:27,330
so in this work we further kind of

118
00:05:25,740 --> 00:05:30,090
addressing these three problems

119
00:05:27,330 --> 00:05:32,760
so first what<font color="#CCCCCC"> are considering hiding</font>

120
00:05:30,090 --> 00:05:36,030
<font color="#CCCCCC">custom PRF</font><font color="#E5E5E5"> we give an alternative kind</font>

121
00:05:32,760 --> 00:05:39,690
of simulation<font color="#CCCCCC"> based the definition and</font>

122
00:05:36,030 --> 00:05:41,849
more importantly we kind of can find a

123
00:05:39,690 --> 00:05:44,780
more<font color="#E5E5E5"> concrete way</font><font color="#CCCCCC"> to construct these</font>

124
00:05:41,850 --> 00:05:47,400
<font color="#E5E5E5">scenes for NC one constraint where the</font>

125
00:05:44,780 --> 00:05:49,739
predicate can be<font color="#CCCCCC"> specified by</font><font color="#E5E5E5"> a lock</font>

126
00:05:47,400 --> 00:05:52,919
depth circuit and we build it from

127
00:05:49,740 --> 00:05:54,500
learning with<font color="#CCCCCC"> errors assumption and also</font>

128
00:05:52,919 --> 00:05:57,299
with<font color="#CCCCCC"> show more applications of</font>

129
00:05:54,500 --> 00:06:00,780
constraint hiding<font color="#CCCCCC"> constrain PRF so</font>

130
00:05:57,300 --> 00:06:02,490
specifically we can<font color="#E5E5E5"> do we can we show</font>

131
00:06:00,780 --> 00:06:06,270
that constraint hiding<font color="#CCCCCC"> constraint PRF</font>

132
00:06:02,490 --> 00:06:08,370
implies one key private key functional

133
00:06:06,270 --> 00:06:10,710
encryption which is also called reusable

134
00:06:08,370 --> 00:06:12,720
<font color="#CCCCCC">garble circuits so this kind of a</font>

135
00:06:10,710 --> 00:06:15,120
depends<font color="#E5E5E5"> on your taste of</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> simple or</font>

136
00:06:12,720 --> 00:06:16,860
natural like<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is kind of</font>

137
00:06:15,120 --> 00:06:18,990
easy understandable construction I<font color="#E5E5E5"> would</font>

138
00:06:16,860 --> 00:06:22,800
her a little<font color="#E5E5E5"> bit about it later</font>

139
00:06:18,990 --> 00:06:25,470
<font color="#E5E5E5">and also we show that</font><font color="#CCCCCC"> two key</font><font color="#E5E5E5"> CCP I have</font>

140
00:06:22,800 --> 00:06:27,890
it simplification so I also mentioned

141
00:06:25,470 --> 00:06:31,140
that so these are the main results<font color="#E5E5E5"> and</font>

142
00:06:27,890 --> 00:06:33,599
also concurrent to work by<font color="#CCCCCC"> Poneke him</font>

143
00:06:31,140 --> 00:06:35,880
<font color="#E5E5E5">and</font><font color="#CCCCCC"> their Megami</font><font color="#E5E5E5"> which you may heard in</font>

144
00:06:33,600 --> 00:06:38,010
the previous talk<font color="#CCCCCC"> say so</font><font color="#E5E5E5"> one keep</font>

145
00:06:35,880 --> 00:06:40,469
comfortable<font color="#CCCCCC"> it's constant in PRF so</font>

146
00:06:38,010 --> 00:06:42,070
basically one point from<font color="#E5E5E5"> a</font><font color="#CCCCCC"> lwe</font>

147
00:06:40,470 --> 00:06:45,490
so aside

148
00:06:42,070 --> 00:06:48,820
the<font color="#E5E5E5"> similar-looking on the results so</font>

149
00:06:45,490 --> 00:06:51,880
actually we both<font color="#E5E5E5"> routes on lettuce space</font>

150
00:06:48,820 --> 00:06:53,380
<font color="#CCCCCC">to prfs which is</font><font color="#E5E5E5"> also route from the</font>

151
00:06:51,880 --> 00:06:56,710
previous<font color="#E5E5E5"> to your</font><font color="#CCCCCC"> crypt if I remember</font>

152
00:06:53,380 --> 00:06:58,420
correctly<font color="#CCCCCC"> but we use different method</font><font color="#E5E5E5"> to</font>

153
00:06:56,710 --> 00:07:00,430
hide<font color="#CCCCCC"> any concentrate I think that's</font>

154
00:06:58,420 --> 00:07:02,050
<font color="#E5E5E5">completely</font><font color="#CCCCCC"> different</font><font color="#E5E5E5"> even for me to</font>

155
00:07:00,430 --> 00:07:06,700
understand<font color="#CCCCCC"> that the previous talk is not</font>

156
00:07:02,050 --> 00:07:09,040
very easy<font color="#E5E5E5"> and okay so the plan of the</font>

157
00:07:06,700 --> 00:07:11,140
rest of the talk is<font color="#E5E5E5"> gonna be first I</font>

158
00:07:09,040 --> 00:07:14,530
will still review<font color="#CCCCCC"> the</font><font color="#E5E5E5"> review the</font>

159
00:07:11,140 --> 00:07:16,659
definition the implication and<font color="#CCCCCC"> relief of</font>

160
00:07:14,530 --> 00:07:21,010
<font color="#CCCCCC">the</font><font color="#E5E5E5"> things and then I will</font><font color="#CCCCCC"> tell</font><font color="#E5E5E5"> you how</font>

161
00:07:16,660 --> 00:07:25,540
<font color="#E5E5E5">to construct it yep so first defining</font>

162
00:07:21,010 --> 00:07:28,420
<font color="#CCCCCC">searcy</font><font color="#E5E5E5"> PRF so the</font><font color="#CCCCCC"> syntax of constraint</font>

163
00:07:25,540 --> 00:07:31,720
hiding<font color="#CCCCCC"> constrain PRF</font><font color="#E5E5E5"> is the usual seeing</font>

164
00:07:28,420 --> 00:07:33,400
like a normal<font color="#E5E5E5"> punctual PRF so first you</font>

165
00:07:31,720 --> 00:07:35,560
have<font color="#CCCCCC"> a master key generation give you a</font>

166
00:07:33,400 --> 00:07:37,840
master<font color="#E5E5E5"> secret key and then the</font>

167
00:07:35,560 --> 00:07:40,270
<font color="#E5E5E5">concentrating algorithm take the master</font>

168
00:07:37,840 --> 00:07:42,780
secret<font color="#E5E5E5"> key takes the constrain the clear</font>

169
00:07:40,270 --> 00:07:44,770
and<font color="#E5E5E5"> the output to constrain the key and</font>

170
00:07:42,780 --> 00:07:47,409
evaluation you<font color="#CCCCCC"> can take whatever key you</font>

171
00:07:44,770 --> 00:07:52,120
have hand and<font color="#E5E5E5"> evaluate on whatever</font>

172
00:07:47,410 --> 00:07:53,740
inputs you want so let me tell you<font color="#CCCCCC"> our</font>

173
00:07:52,120 --> 00:07:57,460
simulation based the<font color="#E5E5E5"> constrain hiding</font>

174
00:07:53,740 --> 00:08:01,840
<font color="#CCCCCC">constraint PRF</font><font color="#E5E5E5"> so let me record the kind</font>

175
00:07:57,460 --> 00:08:03,580
of<font color="#CCCCCC"> brief idea of the brief framework of</font>

176
00:08:01,840 --> 00:08:05,739
simulation based<font color="#CCCCCC"> definition</font><font color="#E5E5E5"> is usually I</font>

177
00:08:03,580 --> 00:08:08,020
say in the real<font color="#CCCCCC"> world you get this kind</font>

178
00:08:05,740 --> 00:08:10,390
of<font color="#E5E5E5"> constraint key and there's actually a</font>

179
00:08:08,020 --> 00:08:12,490
simulator<font color="#E5E5E5"> who don't even need to</font><font color="#CCCCCC"> have</font>

180
00:08:10,390 --> 00:08:14,590
<font color="#E5E5E5">the constraint to produce the key which</font>

181
00:08:12,490 --> 00:08:16,840
is indistinguishable<font color="#E5E5E5"> therefore it will</font>

182
00:08:14,590 --> 00:08:19,619
capture the constraint<font color="#CCCCCC"> hadi</font><font color="#E5E5E5"> in such a</font>

183
00:08:16,840 --> 00:08:23,140
way<font color="#E5E5E5"> so let me do it more concretely</font>

184
00:08:19,620 --> 00:08:25,530
we think about so this is the case where

185
00:08:23,140 --> 00:08:28,180
<font color="#CCCCCC">the anniversary is dealing</font><font color="#E5E5E5"> with the real</font>

186
00:08:25,530 --> 00:08:32,470
constraint he can master<font color="#E5E5E5"> in some sense</font>

187
00:08:28,180 --> 00:08:36,849
<font color="#E5E5E5">so it can ask constraint query</font><font color="#CCCCCC"> see and</font>

188
00:08:32,470 --> 00:08:40,510
it gets a constraint key it can also ask

189
00:08:36,849 --> 00:08:43,000
input queries and<font color="#E5E5E5"> in this game we think</font>

190
00:08:40,510 --> 00:08:46,270
about<font color="#E5E5E5"> it you</font><font color="#CCCCCC"> always get the output from</font>

191
00:08:43,000 --> 00:08:48,190
the original key<font color="#E5E5E5"> okay so then let's</font><font color="#CCCCCC"> see</font>

192
00:08:46,270 --> 00:08:50,680
what happened in the<font color="#CCCCCC"> potential they</font>

193
00:08:48,190 --> 00:08:53,110
simulated<font color="#E5E5E5"> a word so you</font><font color="#CCCCCC"> already</font><font color="#E5E5E5"> still</font>

194
00:08:50,680 --> 00:08:55,689
can ask constraint query and in this

195
00:08:53,110 --> 00:08:58,480
case we<font color="#E5E5E5"> ask the simulator</font>

196
00:08:55,690 --> 00:09:00,130
to produce the<font color="#CCCCCC"> simulated icky kind</font><font color="#E5E5E5"> of</font>

197
00:08:58,480 --> 00:09:01,630
without even knowing the constraint he

198
00:09:00,130 --> 00:09:03,970
only knows kind of the size of<font color="#E5E5E5"> the</font>

199
00:09:01,630 --> 00:09:06,880
constraint in<font color="#CCCCCC"> there such</font><font color="#E5E5E5"> since you</font>

200
00:09:03,970 --> 00:09:09,340
cannot avoid<font color="#E5E5E5"> some things and then</font><font color="#CCCCCC"> the</font>

201
00:09:06,880 --> 00:09:12,780
<font color="#E5E5E5">bursary you can ask import queries and</font>

202
00:09:09,340 --> 00:09:15,550
that the simulator is supposed<font color="#E5E5E5"> to</font>

203
00:09:12,780 --> 00:09:18,850
simulate<font color="#CCCCCC"> what should what you should</font>

204
00:09:15,550 --> 00:09:21,819
look<font color="#E5E5E5"> like in the original case and we</font>

205
00:09:18,850 --> 00:09:25,390
allow the simulator<font color="#E5E5E5"> to rent the input</font>

206
00:09:21,820 --> 00:09:27,700
and learn the result whether it's in the

207
00:09:25,390 --> 00:09:29,680
constraint<font color="#E5E5E5"> or not and then the</font><font color="#CCCCCC"> simulator</font>

208
00:09:27,700 --> 00:09:33,310
<font color="#CCCCCC">is asked to simulate what should</font><font color="#E5E5E5"> you see</font>

209
00:09:29,680 --> 00:09:35,560
in the original<font color="#E5E5E5"> world so given this</font>

210
00:09:33,310 --> 00:09:38,829
definition we require correctness<font color="#E5E5E5"> where</font>

211
00:09:35,560 --> 00:09:41,949
if the points<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> forcing</font><font color="#E5E5E5"> to the</font>

212
00:09:38,830 --> 00:09:44,880
preserving region then<font color="#E5E5E5"> the simulator</font>

213
00:09:41,950 --> 00:09:46,810
sorry the real output should be

214
00:09:44,880 --> 00:09:50,710
<font color="#E5E5E5">consistent with the original</font><font color="#CCCCCC"> key</font>

215
00:09:46,810 --> 00:09:52,209
evaluation<font color="#CCCCCC"> and the pseudo randomness and</font>

216
00:09:50,710 --> 00:09:54,460
<font color="#E5E5E5">the constraint hiding are all captured</font>

217
00:09:52,210 --> 00:09:58,900
<font color="#E5E5E5">in the indistinguishability in the</font>

218
00:09:54,460 --> 00:10:01,120
simulation fashion so that<font color="#E5E5E5"> the simulated</font>

219
00:09:58,900 --> 00:10:04,600
key is indistinguishable<font color="#CCCCCC"> from the real</font>

220
00:10:01,120 --> 00:10:06,730
<font color="#E5E5E5">key and for the outputs</font><font color="#CCCCCC"> if it's in the</font>

221
00:10:04,600 --> 00:10:08,470
<font color="#E5E5E5">randomized region we require that the</font>

222
00:10:06,730 --> 00:10:11,470
simulator actually to output a random

223
00:10:08,470 --> 00:10:14,110
<font color="#CCCCCC">output so therefore somehow</font><font color="#E5E5E5"> enforce that</font>

224
00:10:11,470 --> 00:10:20,080
the real output<font color="#E5E5E5"> looks learned and given</font>

225
00:10:14,110 --> 00:10:22,930
a<font color="#CCCCCC"> constrained key so so actually you can</font>

226
00:10:20,080 --> 00:10:24,670
for one<font color="#CCCCCC"> constrain the key so if like the</font>

227
00:10:22,930 --> 00:10:26,380
system is<font color="#E5E5E5"> only</font><font color="#CCCCCC"> secured for one constrain</font>

228
00:10:24,670 --> 00:10:28,930
the key but still for polynomially many

229
00:10:26,380 --> 00:10:32,110
input queries<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> actually show that</font>

230
00:10:28,930 --> 00:10:33,459
the simulation<font color="#E5E5E5"> based definition is</font>

231
00:10:32,110 --> 00:10:37,750
equivalent<font color="#CCCCCC"> to</font><font color="#E5E5E5"> in distinguishability</font>

232
00:10:33,460 --> 00:10:39,550
definition and so<font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> say a little</font>

233
00:10:37,750 --> 00:10:41,230
bit<font color="#CCCCCC"> about the</font><font color="#E5E5E5"> simulation based a</font>

234
00:10:39,550 --> 00:10:45,250
definition from many constrain the key

235
00:10:41,230 --> 00:10:47,470
because<font color="#E5E5E5"> somehow if we have only even if</font>

236
00:10:45,250 --> 00:10:51,100
you want to<font color="#E5E5E5"> have two keys then you can</font>

237
00:10:47,470 --> 00:10:52,720
kind of do the consistency check and

238
00:10:51,100 --> 00:10:55,360
somehow recover the full functionality

239
00:10:52,720 --> 00:10:57,580
<font color="#E5E5E5">of</font><font color="#CCCCCC"> that so you can</font><font color="#E5E5E5"> even relax the</font>

240
00:10:55,360 --> 00:10:59,650
definition a little<font color="#CCCCCC"> bit by allowing the</font>

241
00:10:57,580 --> 00:11:02,770
simulator<font color="#E5E5E5"> to ask a query so that's even</font>

242
00:10:59,650 --> 00:11:05,650
<font color="#CCCCCC">more</font><font color="#E5E5E5"> than we previously required so</font>

243
00:11:02,770 --> 00:11:07,089
<font color="#E5E5E5">turns out even that is going to be there</font>

244
00:11:05,650 --> 00:11:09,550
are some<font color="#E5E5E5"> problems</font><font color="#CCCCCC"> here so I will mention</font>

245
00:11:07,089 --> 00:11:13,150
<font color="#E5E5E5">later so</font>

246
00:11:09,550 --> 00:11:15,040
let me mention even<font color="#E5E5E5"> you kind of lost</font>

247
00:11:13,150 --> 00:11:17,079
<font color="#CCCCCC">Dante</font><font color="#E5E5E5"> for more definitions that height</font>

248
00:11:15,040 --> 00:11:18,849
<font color="#E5E5E5">reduce the previous slides so this</font>

249
00:11:17,080 --> 00:11:21,190
notion of hiding something hiding<font color="#CCCCCC"> a</font>

250
00:11:18,850 --> 00:11:24,460
circuit in the constraint<font color="#E5E5E5"> key</font><font color="#CCCCCC"> should</font>

251
00:11:21,190 --> 00:11:27,010
already remind you of obfuscation<font color="#CCCCCC"> so</font>

252
00:11:24,460 --> 00:11:31,120
more precisely<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can show that if you</font>

253
00:11:27,010 --> 00:11:32,920
<font color="#CCCCCC">have two keys if CPRF then it already</font>

254
00:11:31,120 --> 00:11:36,520
<font color="#E5E5E5">implies the meaningfulness of</font>

255
00:11:32,920 --> 00:11:38,229
<font color="#E5E5E5">obfuscation so precisely the two key</font>

256
00:11:36,520 --> 00:11:41,470
relaxed<font color="#CCCCCC"> version</font><font color="#E5E5E5"> of simulation based</font>

257
00:11:38,230 --> 00:11:45,550
definition<font color="#E5E5E5"> it already implies strong</font><font color="#CCCCCC"> VBB</font>

258
00:11:41,470 --> 00:11:48,210
definition which<font color="#CCCCCC"> is impossible</font><font color="#E5E5E5"> for most</font>

259
00:11:45,550 --> 00:11:51,010
of the types of<font color="#E5E5E5"> the circuit classes and</font>

260
00:11:48,210 --> 00:11:55,420
even<font color="#E5E5E5"> for two key indistinguishability</font>

261
00:11:51,010 --> 00:11:57,460
<font color="#CCCCCC">hcp I have which defined by defining</font><font color="#E5E5E5"> for</font>

262
00:11:55,420 --> 00:12:01,329
example my hair day in the last<font color="#E5E5E5"> talk it</font>

263
00:11:57,460 --> 00:12:03,070
implies<font color="#E5E5E5"> I already so how to achieve this</font>

264
00:12:01,330 --> 00:12:05,590
is actually quite<font color="#E5E5E5"> straightforward just</font>

265
00:12:03,070 --> 00:12:08,110
<font color="#CCCCCC">to have</font><font color="#E5E5E5"> to constrain</font><font color="#CCCCCC"> the key one for a</font>

266
00:12:05,590 --> 00:12:10,810
functional circuit one of one for

267
00:12:08,110 --> 00:12:13,810
another<font color="#E5E5E5"> circuit which is either a 0 or 1</font>

268
00:12:10,810 --> 00:12:16,359
<font color="#E5E5E5">and to</font><font color="#CCCCCC"> eval</font><font color="#E5E5E5"> it just to compare these</font><font color="#CCCCCC"> two</font>

269
00:12:13,810 --> 00:12:17,650
and<font color="#CCCCCC"> then depends on the notion</font><font color="#E5E5E5"> of the</font>

270
00:12:16,360 --> 00:12:19,570
constraint hiding<font color="#E5E5E5"> you're working with</font>

271
00:12:17,650 --> 00:12:23,650
<font color="#E5E5E5">you will get the corresponding notion</font>

272
00:12:19,570 --> 00:12:26,680
for obfuscation<font color="#E5E5E5"> so</font><font color="#CCCCCC"> and this idea of like</font>

273
00:12:23,650 --> 00:12:27,100
a kind of functional branch and a dummy

274
00:12:26,680 --> 00:12:30,160
branch

275
00:12:27,100 --> 00:12:34,960
<font color="#CCCCCC">to keys it's also kind of implicitly</font>

276
00:12:30,160 --> 00:12:37,060
from the first<font color="#CCCCCC"> IO candidate so ok so I</font>

277
00:12:34,960 --> 00:12:39,100
must be<font color="#E5E5E5"> honest to you that in this talk</font>

278
00:12:37,060 --> 00:12:42,819
we only receive one key so we didn't

279
00:12:39,100 --> 00:12:44,410
achieve<font color="#CCCCCC"> ioe</font><font color="#E5E5E5"> any meaningful sense</font><font color="#CCCCCC"> so for</font>

280
00:12:42,820 --> 00:12:47,410
the rest<font color="#E5E5E5"> of the talk let's focus on the</font>

281
00:12:44,410 --> 00:12:49,780
one key definition and even for the one

282
00:12:47,410 --> 00:12:52,030
key definition<font color="#E5E5E5"> you can achieve</font>

283
00:12:49,780 --> 00:12:54,970
<font color="#E5E5E5">functional encryption for one key in</font>

284
00:12:52,030 --> 00:12:59,439
some sense<font color="#E5E5E5"> and the idea is actually</font>

285
00:12:54,970 --> 00:13:02,710
<font color="#E5E5E5">simple you just decrypt and eval in your</font>

286
00:12:59,440 --> 00:13:06,550
pocket<font color="#E5E5E5"> in the constraint so how do</font><font color="#CCCCCC"> we do</font>

287
00:13:02,710 --> 00:13:08,230
a functional encryption then<font color="#E5E5E5"> ciphertext</font>

288
00:13:06,550 --> 00:13:10,750
is just<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be the encryption of a</font>

289
00:13:08,230 --> 00:13:12,850
normal symmetric key cipher<font color="#E5E5E5"> text a</font><font color="#CCCCCC"> plus</font>

290
00:13:10,750 --> 00:13:16,260
<font color="#E5E5E5">you apply a tag which is going to be the</font>

291
00:13:12,850 --> 00:13:18,820
PRF evaluation under<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ciphertext and</font>

292
00:13:16,260 --> 00:13:21,939
the function<font color="#E5E5E5"> of decryption key is going</font>

293
00:13:18,820 --> 00:13:25,900
<font color="#E5E5E5">to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> the constraint key for the</font>

294
00:13:21,940 --> 00:13:27,970
<font color="#E5E5E5">evelle functionality and the two real</font>

295
00:13:25,900 --> 00:13:31,030
evaluation<font color="#CCCCCC"> to rio</font><font color="#E5E5E5"> de crib</font><font color="#CCCCCC"> functional a</font>

296
00:13:27,970 --> 00:13:33,370
just eval and<font color="#CCCCCC"> compare</font><font color="#E5E5E5"> with the tack so</font>

297
00:13:31,030 --> 00:13:35,290
that you can recover them<font color="#E5E5E5"> with</font><font color="#CCCCCC"> a</font>

298
00:13:33,370 --> 00:13:38,650
consistent or not<font color="#E5E5E5"> on the point of</font><font color="#CCCCCC"> you're</font>

299
00:13:35,290 --> 00:13:42,490
<font color="#E5E5E5">interested</font><font color="#CCCCCC"> e alright</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> i've</font><font color="#E5E5E5"> described</font>

300
00:13:38,650 --> 00:13:44,230
several applications of this notion<font color="#E5E5E5"> and</font>

301
00:13:42,490 --> 00:13:46,660
then the real<font color="#E5E5E5"> interesting question is</font>

302
00:13:44,230 --> 00:13:51,310
how to<font color="#E5E5E5"> construct it</font><font color="#CCCCCC"> so our min</font>

303
00:13:46,660 --> 00:13:56,439
<font color="#CCCCCC">construction is such a such a chec</font><font color="#E5E5E5"> pair</font>

304
00:13:51,310 --> 00:13:59,050
for<font color="#CCCCCC"> LC</font><font color="#E5E5E5"> one from</font><font color="#CCCCCC"> lwe</font><font color="#E5E5E5"> and our technique</font>

305
00:13:56,440 --> 00:14:01,510
combines<font color="#E5E5E5"> you know first we start from</font>

306
00:13:59,050 --> 00:14:04,359
the<font color="#CCCCCC"> orginal little letters</font><font color="#E5E5E5"> space the PRF</font>

307
00:14:01,510 --> 00:14:06,790
<font color="#CCCCCC">and then essentially what</font><font color="#E5E5E5"> do you need to</font>

308
00:14:04,360 --> 00:14:08,340
do from<font color="#E5E5E5"> a row PRF so firstly you need to</font>

309
00:14:06,790 --> 00:14:11,170
<font color="#E5E5E5">have a meaningful way to embed</font>

310
00:14:08,340 --> 00:14:12,640
functionality inside<font color="#CCCCCC"> so for that we take</font>

311
00:14:11,170 --> 00:14:15,280
<font color="#E5E5E5">the Barrington theorem to embed</font>

312
00:14:12,640 --> 00:14:17,140
functionality and also<font color="#CCCCCC"> you</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have</font>

313
00:14:15,280 --> 00:14:20,500
a meaningful notion to publish something

314
00:14:17,140 --> 00:14:23,020
and still gaining security<font color="#E5E5E5"> so for that</font>

315
00:14:20,500 --> 00:14:26,650
we use the digit<font color="#CCCCCC"> fifteen multi linear</font>

316
00:14:23,020 --> 00:14:29,560
map mechanism to provide a<font color="#E5E5E5"> meaningful</font>

317
00:14:26,650 --> 00:14:31,540
<font color="#CCCCCC">constrain</font><font color="#E5E5E5"> a public constraint mode so</font>

318
00:14:29,560 --> 00:14:34,930
this actually demonstrates a positive

319
00:14:31,540 --> 00:14:37,030
side of<font color="#CCCCCC"> gigi's fifteen based application</font>

320
00:14:34,930 --> 00:14:39,400
which<font color="#E5E5E5"> previously we only know very few</font>

321
00:14:37,030 --> 00:14:41,680
things from multilinear maps<font color="#E5E5E5"> that we can</font>

322
00:14:39,400 --> 00:14:44,410
reasonable<font color="#E5E5E5"> a reasonable reason about</font>

323
00:14:41,680 --> 00:14:49,030
them<font color="#E5E5E5"> that have a concrete security</font><font color="#CCCCCC"> all</font>

324
00:14:44,410 --> 00:14:51,400
<font color="#CCCCCC">right</font><font color="#E5E5E5"> so let me take tell you a little</font>

325
00:14:49,030 --> 00:14:55,449
bit<font color="#CCCCCC"> about the</font><font color="#E5E5E5"> original PRF constructed</font>

326
00:14:51,400 --> 00:14:57,459
by<font color="#CCCCCC"> banerjee</font><font color="#E5E5E5"> at or so if you only want a</font>

327
00:14:55,450 --> 00:14:59,860
<font color="#E5E5E5">lattice based a PRF without anything</font>

328
00:14:57,460 --> 00:15:03,760
<font color="#E5E5E5">else so what you will do is just</font><font color="#CCCCCC"> a</font>

329
00:14:59,860 --> 00:15:06,000
picking a lot of<font color="#E5E5E5"> matrices as from the</font>

330
00:15:03,760 --> 00:15:09,460
correct<font color="#CCCCCC"> a or debris secrets distribution</font>

331
00:15:06,000 --> 00:15:11,380
<font color="#CCCCCC">just</font><font color="#E5E5E5"> do the subset product like icing so</font>

332
00:15:09,460 --> 00:15:13,930
the input will assign which product<font color="#CCCCCC"> you</font>

333
00:15:11,380 --> 00:15:16,330
take you multiply all<font color="#CCCCCC"> of them together</font>

334
00:15:13,930 --> 00:15:19,300
<font color="#E5E5E5">with a matrix which is usually the</font><font color="#CCCCCC"> iOW</font>

335
00:15:16,330 --> 00:15:20,980
<font color="#E5E5E5">mask and then you run at the whole</font><font color="#CCCCCC"> thing</font>

336
00:15:19,300 --> 00:15:22,990
<font color="#E5E5E5">so therefore you</font><font color="#CCCCCC"> have a</font><font color="#E5E5E5"> security</font>

337
00:15:20,980 --> 00:15:24,640
argument<font color="#E5E5E5"> you can do</font><font color="#CCCCCC"> air debris proof</font><font color="#E5E5E5"> you</font>

338
00:15:22,990 --> 00:15:30,400
can<font color="#E5E5E5"> inject</font><font color="#CCCCCC"> the noise</font><font color="#E5E5E5"> for free and on the</font>

339
00:15:24,640 --> 00:15:31,870
fly and<font color="#E5E5E5"> okay so what</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> need to add in</font>

340
00:15:30,400 --> 00:15:34,120
addition to build a constraint hiding

341
00:15:31,870 --> 00:15:35,920
<font color="#CCCCCC">constraint PRF as what I said you need a</font>

342
00:15:34,120 --> 00:15:37,959
reasonable<font color="#E5E5E5"> public mode</font>

343
00:15:35,920 --> 00:15:39,969
of that<font color="#E5E5E5"> and you need to embed a</font>

344
00:15:37,959 --> 00:15:42,219
structure<font color="#E5E5E5"> of that so I'm repeating these</font>

345
00:15:39,970 --> 00:15:45,220
things<font color="#E5E5E5"> because so you only need to take</font>

346
00:15:42,220 --> 00:15:47,139
<font color="#CCCCCC">two ingredients and sort</font><font color="#E5E5E5"> of putting them</font>

347
00:15:45,220 --> 00:15:50,110
together<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> get nervous no sir</font>

348
00:15:47,139 --> 00:15:52,300
so let<font color="#E5E5E5"> me be first to be more precise</font>

349
00:15:50,110 --> 00:15:54,130
<font color="#E5E5E5">about the Jewish</font><font color="#CCCCCC"> 50 encoding</font><font color="#E5E5E5"> so this</font>

350
00:15:52,300 --> 00:15:59,740
will provides us<font color="#CCCCCC"> a meaningful</font><font color="#E5E5E5"> public</font>

351
00:15:54,130 --> 00:16:02,260
mode so<font color="#CCCCCC"> digital 15 requires kind</font><font color="#E5E5E5"> of</font>

352
00:15:59,740 --> 00:16:03,850
simple a with a trapdoor and it requests

353
00:16:02,260 --> 00:16:05,740
<font color="#E5E5E5">rapid or sampling but anyway we are</font>

354
00:16:03,850 --> 00:16:07,120
<font color="#E5E5E5">working in the kind of a private key</font>

355
00:16:05,740 --> 00:16:11,560
<font color="#E5E5E5">scene so you can simple them privately</font>

356
00:16:07,120 --> 00:16:15,639
<font color="#E5E5E5">and so do to encode the subset product</font>

357
00:16:11,560 --> 00:16:18,609
idea of digits 15<font color="#E5E5E5"> they actually from</font>

358
00:16:15,639 --> 00:16:21,279
lattice<font color="#E5E5E5"> the digit 15 actually</font><font color="#CCCCCC"> do it in</font>

359
00:16:18,610 --> 00:16:22,990
the hop-by-hop fraction that fashion so

360
00:16:21,279 --> 00:16:25,660
for each<font color="#CCCCCC"> hope you have a pair of secrets</font>

361
00:16:22,990 --> 00:16:28,329
so how do you<font color="#CCCCCC"> simple an encoding</font><font color="#E5E5E5"> of that</font>

362
00:16:25,660 --> 00:16:30,850
<font color="#E5E5E5">you first to do an air doubly simple</font>

363
00:16:28,329 --> 00:16:33,339
related it to<font color="#CCCCCC"> the secrets</font><font color="#E5E5E5"> and then you</font>

364
00:16:30,850 --> 00:16:36,970
use the chapter<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> left guy to</font>

365
00:16:33,339 --> 00:16:40,240
sample a small encoding of such that a

366
00:16:36,970 --> 00:16:42,880
times D equals<font color="#CCCCCC"> to the audibly</font><font color="#E5E5E5"> sample so</font>

367
00:16:40,240 --> 00:16:48,579
and we think about the D as<font color="#CCCCCC"> the encoding</font>

368
00:16:42,880 --> 00:16:50,500
<font color="#CCCCCC">of s so for many hops we do it for</font><font color="#E5E5E5"> kind</font>

369
00:16:48,579 --> 00:16:52,569
<font color="#E5E5E5">of you think about there's air pairs of</font>

370
00:16:50,500 --> 00:16:54,970
<font color="#CCCCCC">Secrets</font><font color="#E5E5E5"> along the line and the</font>

371
00:16:52,570 --> 00:16:57,480
essentially do it for this is<font color="#CCCCCC"> just</font>

372
00:16:54,970 --> 00:17:02,079
repeating this one hop sing for air hops

373
00:16:57,480 --> 00:17:03,399
<font color="#E5E5E5">and just a reminder</font><font color="#CCCCCC"> what's our public</font>

374
00:17:02,079 --> 00:17:05,678
when you try<font color="#E5E5E5"> to do a meaningful</font>

375
00:17:03,399 --> 00:17:08,199
<font color="#CCCCCC">constraint</font><font color="#E5E5E5"> PRF so you will see all the</font>

376
00:17:05,679 --> 00:17:11,350
A's and to see oddities<font color="#CCCCCC"> so this is the</font>

377
00:17:08,199 --> 00:17:13,660
easy<font color="#E5E5E5"> way to remember just to kind of</font>

378
00:17:11,349 --> 00:17:15,969
rewind<font color="#E5E5E5"> is the functionality</font><font color="#CCCCCC"> of digits 15</font>

379
00:17:13,660 --> 00:17:18,040
I would<font color="#CCCCCC"> do a quick slide and just trying</font>

380
00:17:15,970 --> 00:17:20,380
<font color="#E5E5E5">to convince you</font><font color="#CCCCCC"> so start from the</font>

381
00:17:18,040 --> 00:17:23,260
evaluating age in mode of a dddd dddd

382
00:17:20,380 --> 00:17:26,140
<font color="#E5E5E5">and there's n by the</font><font color="#CCCCCC"> correctness of</font><font color="#E5E5E5"> that</font>

383
00:17:23,260 --> 00:17:27,970
<font color="#E5E5E5">you're open</font><font color="#CCCCCC"> will hop</font><font color="#E5E5E5"> then the error goes</font>

384
00:17:26,140 --> 00:17:30,070
to<font color="#E5E5E5"> the noise and the something goes to</font>

385
00:17:27,970 --> 00:17:32,380
the noise there will be some small<font color="#E5E5E5"> terms</font>

386
00:17:30,070 --> 00:17:36,240
that<font color="#CCCCCC"> metric rate goes to the end</font><font color="#E5E5E5"> and</font>

387
00:17:32,380 --> 00:17:38,980
therefore<font color="#CCCCCC"> was closely</font><font color="#E5E5E5"> and was</font><font color="#CCCCCC"> closely</font>

388
00:17:36,240 --> 00:17:40,690
you will<font color="#E5E5E5"> get a lot of small</font><font color="#CCCCCC"> things that</font>

389
00:17:38,980 --> 00:17:44,230
adding up to Canada<font color="#E5E5E5"> they</font><font color="#CCCCCC"> are still</font><font color="#E5E5E5"> small</font>

390
00:17:40,690 --> 00:17:47,740
<font color="#CCCCCC">feet around that so that</font><font color="#E5E5E5"> a DD DD is</font>

391
00:17:44,230 --> 00:17:49,960
actually quite close to sssss<font color="#E5E5E5"> a plus</font>

392
00:17:47,740 --> 00:17:52,570
<font color="#CCCCCC">small and then after you run that as</font>

393
00:17:49,960 --> 00:17:54,580
since<font color="#CCCCCC"> disappeared</font><font color="#E5E5E5"> so it's correctly</font><font color="#CCCCCC"> kind</font>

394
00:17:52,570 --> 00:17:59,549
<font color="#E5E5E5">of encode a pride of private</font>

395
00:17:54,580 --> 00:18:04,480
functionality with<font color="#CCCCCC"> the consistent output</font>

396
00:17:59,549 --> 00:18:06,730
so in the second<font color="#E5E5E5"> tour we use is we</font><font color="#CCCCCC"> use</font>

397
00:18:04,480 --> 00:18:09,669
Barrington theorem to embed the circuit

398
00:18:06,730 --> 00:18:11,980
<font color="#E5E5E5">into the key and what is</font><font color="#CCCCCC"> buried</font><font color="#E5E5E5"> in serum</font>

399
00:18:09,669 --> 00:18:15,010
<font color="#CCCCCC">it tells you that</font><font color="#E5E5E5"> if you have a circuit</font>

400
00:18:11,980 --> 00:18:18,760
you could convert into into a matrix

401
00:18:15,010 --> 00:18:20,440
<font color="#E5E5E5">product and so sort</font><font color="#CCCCCC"> of like the identity</font>

402
00:18:18,760 --> 00:18:22,840
<font color="#CCCCCC">and</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> know I didn't matrix they</font>

403
00:18:20,440 --> 00:18:25,330
<font color="#E5E5E5">multiplied together that the identity</font>

404
00:18:22,840 --> 00:18:27,879
will recognize one the<font color="#E5E5E5"> no I didn</font><font color="#CCCCCC"> t work</font>

405
00:18:25,330 --> 00:18:30,220
organize<font color="#CCCCCC"> zero or the other way around so</font>

406
00:18:27,880 --> 00:18:32,710
that<font color="#E5E5E5"> you can actually put it a matrix</font>

407
00:18:30,220 --> 00:18:35,039
structure into the key so how do<font color="#CCCCCC"> we</font>

408
00:18:32,710 --> 00:18:39,130
really do that

409
00:18:35,039 --> 00:18:42,309
so each secret now<font color="#E5E5E5"> we put in the three</font>

410
00:18:39,130 --> 00:18:44,110
<font color="#CCCCCC">to fifty encoding</font><font color="#E5E5E5"> it's gonna be with the</font>

411
00:18:42,309 --> 00:18:45,639
structure<font color="#E5E5E5"> so in the normal</font><font color="#CCCCCC"> mode that we</font>

412
00:18:44,110 --> 00:18:48,850
put all the identity<font color="#CCCCCC"> matrix</font>

413
00:18:45,640 --> 00:18:50,740
<font color="#CCCCCC">Chancellor yes and potentially in some</font>

414
00:18:48,850 --> 00:18:53,620
<font color="#E5E5E5">constrained mode it will be some</font>

415
00:18:50,740 --> 00:18:57,640
permutation matrix chattering yes and by

416
00:18:53,620 --> 00:18:59,590
the<font color="#CCCCCC"> mechanism of the Barrington</font><font color="#E5E5E5"> serum</font>

417
00:18:57,640 --> 00:19:01,659
<font color="#E5E5E5">zero sometimes go to one encoding</font>

418
00:18:59,590 --> 00:19:04,480
sometimes go to<font color="#CCCCCC"> a</font><font color="#E5E5E5"> sorry sometimes</font><font color="#CCCCCC"> go to</font>

419
00:19:01,659 --> 00:19:05,770
the encoding<font color="#E5E5E5"> of i-10</font><font color="#CCCCCC"> serenus sometimes</font>

420
00:19:04,480 --> 00:19:08,679
go to the encoding<font color="#E5E5E5"> of another</font>

421
00:19:05,770 --> 00:19:10,899
permutation<font color="#E5E5E5"> tensor yes so this is the</font>

422
00:19:08,679 --> 00:19:13,480
final NC one constraint hiding constrain

423
00:19:10,899 --> 00:19:17,709
PRF from<font color="#CCCCCC"> digital</font><font color="#E5E5E5"> 15 and the Barrington</font>

424
00:19:13,480 --> 00:19:20,919
<font color="#E5E5E5">theorem so this</font><font color="#CCCCCC"> is the key that you will</font>

425
00:19:17,710 --> 00:19:24,029
see<font color="#CCCCCC"> its so each of</font><font color="#E5E5E5"> the key is a square</font>

426
00:19:20,919 --> 00:19:29,169
matrix<font color="#E5E5E5"> and it will encode a potential</font>

427
00:19:24,029 --> 00:19:30,820
permutation matrix structure so<font color="#E5E5E5"> and this</font>

428
00:19:29,169 --> 00:19:33,820
<font color="#CCCCCC">is</font><font color="#E5E5E5"> the kind</font><font color="#CCCCCC"> of the check of the</font>

429
00:19:30,820 --> 00:19:36,279
functionality<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> have time to go</font>

430
00:19:33,820 --> 00:19:37,840
<font color="#CCCCCC">through the proof also like the proof is</font>

431
00:19:36,279 --> 00:19:42,070
actually<font color="#E5E5E5"> the hardest apart and like</font><font color="#CCCCCC"> I</font>

432
00:19:37,840 --> 00:19:45,189
you need<font color="#CCCCCC"> to handle for the digit fifteen</font>

433
00:19:42,070 --> 00:19:48,490
like<font color="#E5E5E5"> objects so let</font><font color="#CCCCCC"> me just give you a</font>

434
00:19:45,190 --> 00:19:51,250
brief comparison with<font color="#CCCCCC"> ggm so in Gigi</font><font color="#E5E5E5"> and</font>

435
00:19:48,490 --> 00:19:54,880
still you see a tree and here<font color="#E5E5E5"> if you</font>

436
00:19:51,250 --> 00:19:56,770
<font color="#CCCCCC">kind of you're not careful enough then</font>

437
00:19:54,880 --> 00:20:00,070
what<font color="#E5E5E5"> you will see is anyway as several</font>

438
00:19:56,770 --> 00:20:02,658
subsets product matrixes<font color="#E5E5E5"> and essentially</font>

439
00:20:00,070 --> 00:20:07,299
the hard part<font color="#E5E5E5"> to prove is to show that</font>

440
00:20:02,659 --> 00:20:09,830
<font color="#E5E5E5">these things that potentially</font><font color="#CCCCCC"> encode</font>

441
00:20:07,299 --> 00:20:13,070
permutation bitches can be hidden in the

442
00:20:09,830 --> 00:20:15,259
<font color="#E5E5E5">Castorena key so what we are trying to</font>

443
00:20:13,070 --> 00:20:17,749
simulate<font color="#CCCCCC"> we</font><font color="#E5E5E5"> eventually we will go to</font>

444
00:20:15,259 --> 00:20:20,450
<font color="#E5E5E5">similar to other matrices</font><font color="#CCCCCC"> you sample</font>

445
00:20:17,749 --> 00:20:23,210
them<font color="#E5E5E5"> obviously</font><font color="#CCCCCC"> from some small</font><font color="#E5E5E5"> discrete</font>

446
00:20:20,450 --> 00:20:25,609
Gaussian<font color="#E5E5E5"> distribution eventually the</font>

447
00:20:23,210 --> 00:20:27,919
goal is<font color="#CCCCCC"> to prove the real constraint ki</font>

448
00:20:25,609 --> 00:20:29,928
is indistinguishable from<font color="#E5E5E5"> this kind of</font>

449
00:20:27,919 --> 00:20:31,909
simulation constrain the key and<font color="#CCCCCC"> that</font>

450
00:20:29,929 --> 00:20:34,359
this type of<font color="#E5E5E5"> simulation constraint ki it</font>

451
00:20:31,909 --> 00:20:37,519
has no structure inside the<font color="#E5E5E5"> D matrices</font>

452
00:20:34,359 --> 00:20:39,830
<font color="#E5E5E5">so the proof is kind of messy and I'm</font>

453
00:20:37,519 --> 00:20:42,289
not going to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about today so</font><font color="#E5E5E5"> it's</font>

454
00:20:39,830 --> 00:20:44,239
composed<font color="#E5E5E5"> of two ingredients when is some</font>

455
00:20:42,289 --> 00:20:47,629
<font color="#CCCCCC">LW notions that</font><font color="#E5E5E5"> you need to deal</font><font color="#CCCCCC"> with</font>

456
00:20:44,239 --> 00:20:49,549
permutation matrices<font color="#E5E5E5"> and the other is</font>

457
00:20:47,629 --> 00:20:52,099
part<font color="#E5E5E5"> of the we already know from the</font>

458
00:20:49,549 --> 00:20:55,729
<font color="#CCCCCC">tree</font><font color="#E5E5E5"> PV simply lemma you need to sample</font>

459
00:20:52,099 --> 00:20:58,070
<font color="#CCCCCC">this T from a</font><font color="#E5E5E5"> specific distributions</font>

460
00:20:55,729 --> 00:21:01,580
therefore you can prove some statistic

461
00:20:58,070 --> 00:21:04,158
steps and you know<font color="#CCCCCC"> fellow value because</font>

462
00:21:01,580 --> 00:21:06,289
in<font color="#CCCCCC"> the real process you use the trapdoor</font>

463
00:21:04,159 --> 00:21:07,940
<font color="#CCCCCC">to sample</font><font color="#E5E5E5"> things and now you need to</font>

464
00:21:06,289 --> 00:21:10,700
<font color="#E5E5E5">argue that the trapdoor doesn't cause</font>

465
00:21:07,940 --> 00:21:12,440
you any<font color="#E5E5E5"> trouble so these are the high</font>

466
00:21:10,700 --> 00:21:14,330
levels of<font color="#E5E5E5"> the construction and the</font><font color="#CCCCCC"> thing</font>

467
00:21:12,440 --> 00:21:16,180
I hope you enjoyed the talk and<font color="#CCCCCC"> thanks</font>

468
00:21:14,330 --> 00:21:21,899
<font color="#E5E5E5">for your time</font>

469
00:21:16,180 --> 00:21:26,669
[Applause]

470
00:21:21,900 --> 00:21:26,669
<font color="#E5E5E5">okay we have time for our questions</font>

471
00:21:29,940 --> 00:21:37,929
what kind<font color="#E5E5E5"> of parameter do you rely on</font>

472
00:21:32,770 --> 00:21:41,168
for your<font color="#CCCCCC"> Liberty problem</font><font color="#E5E5E5"> sorry what what</font>

473
00:21:37,929 --> 00:21:43,450
<font color="#E5E5E5">are the approximation factors for the</font>

474
00:21:41,169 --> 00:21:45,760
<font color="#CCCCCC">elderberry problem that you rely on</font>

475
00:21:43,450 --> 00:21:47,500
<font color="#E5E5E5">that's a great point actually the</font>

476
00:21:45,760 --> 00:21:49,929
approximation<font color="#E5E5E5"> factor for us is</font>

477
00:21:47,500 --> 00:21:53,620
<font color="#E5E5E5">inherently grows exponentially with</font><font color="#CCCCCC"> the</font>

478
00:21:49,929 --> 00:21:55,900
<font color="#E5E5E5">level air so you need to rely on a sub</font>

479
00:21:53,620 --> 00:21:58,299
exponential approximation factor in the

480
00:21:55,900 --> 00:22:00,850
using<font color="#CCCCCC"> it's a</font><font color="#E5E5E5"> relaxed order parameter</font>

481
00:21:58,299 --> 00:22:01,960
<font color="#E5E5E5">according</font><font color="#CCCCCC"> to the best case you</font><font color="#E5E5E5"> don't</font>

482
00:22:00,850 --> 00:22:11,260
know how to<font color="#E5E5E5"> attack anything in some</font>

483
00:22:01,960 --> 00:22:13,090
sense yeah<font color="#CCCCCC"> may be a related</font><font color="#E5E5E5"> question</font>

484
00:22:11,260 --> 00:22:21,549
when you say exponential approximation

485
00:22:13,090 --> 00:22:26,678
factor<font color="#CCCCCC"> is it like</font><font color="#E5E5E5"> an approximation like</font>

486
00:22:21,549 --> 00:22:28,780
<font color="#E5E5E5">so this can</font><font color="#CCCCCC"> be kind</font><font color="#E5E5E5"> of any actually</font>

487
00:22:26,679 --> 00:22:30,940
forgotten<font color="#CCCCCC"> though I think</font><font color="#E5E5E5"> it doesn't have</font>

488
00:22:28,780 --> 00:22:33,158
to be kind of with a constant but even

489
00:22:30,940 --> 00:22:36,179
better<font color="#E5E5E5"> like you can set the lattice</font>

490
00:22:33,159 --> 00:22:36,179
parameter to be<font color="#E5E5E5"> bigger and</font>

