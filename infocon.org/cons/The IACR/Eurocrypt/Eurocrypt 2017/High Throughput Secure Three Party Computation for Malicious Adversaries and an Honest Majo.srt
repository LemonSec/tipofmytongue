1
00:00:01,580 --> 00:00:06,180
<font color="#CCCCCC">okay thank you</font>

2
00:00:03,929 --> 00:00:08,910
so in this talk<font color="#E5E5E5"> I will present a</font>

3
00:00:06,180 --> 00:00:11,879
protocol<font color="#CCCCCC"> for the specific case of three</font>

4
00:00:08,910 --> 00:00:14,429
parties that is<font color="#CCCCCC"> secure against malicious</font>

5
00:00:11,880 --> 00:00:16,740
ability who controls<font color="#E5E5E5"> minority of the</font>

6
00:00:14,429 --> 00:00:23,039
parties and<font color="#CCCCCC"> this protocol achieves a</font>

7
00:00:16,740 --> 00:00:24,778
high throughput so so<font color="#CCCCCC"> me now my</font><font color="#E5E5E5"> setting</font>

8
00:00:23,039 --> 00:00:27,689
we have<font color="#E5E5E5"> three parties who wish to</font>

9
00:00:24,779 --> 00:00:29,369
compute jointly some functionality and

10
00:00:27,689 --> 00:00:31,710
since we require an honest majority it

11
00:00:29,369 --> 00:00:36,840
means that<font color="#E5E5E5"> only one of the parties may</font>

12
00:00:31,710 --> 00:00:38,399
be corrupted<font color="#CCCCCC"> okay and we assume that the</font>

13
00:00:36,840 --> 00:00:41,070
functionality<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we want</font><font color="#CCCCCC"> to compute</font><font color="#E5E5E5"> is</font>

14
00:00:38,399 --> 00:00:42,989
represented by a boolean circuit<font color="#E5E5E5"> and we</font>

15
00:00:41,070 --> 00:00:46,530
consider<font color="#E5E5E5"> security with a boat</font><font color="#CCCCCC"> meaning</font>

16
00:00:42,989 --> 00:00:48,538
<font color="#CCCCCC">that we achieve we achieve privacy and</font>

17
00:00:46,530 --> 00:00:50,100
correctness we don't guarantee fairness

18
00:00:48,539 --> 00:00:51,300
<font color="#E5E5E5">or</font><font color="#CCCCCC"> with and we don't guarantee that</font>

19
00:00:50,100 --> 00:00:53,070
there will<font color="#CCCCCC"> be an output</font>

20
00:00:51,300 --> 00:00:56,069
the only thing<font color="#CCCCCC"> guaranteed that</font><font color="#E5E5E5"> is that</font>

21
00:00:53,070 --> 00:00:58,770
if the<font color="#E5E5E5"> parties did not abort do we doing</font>

22
00:00:56,070 --> 00:01:04,290
the computation<font color="#E5E5E5"> then then the output is</font>

23
00:00:58,770 --> 00:01:05,939
<font color="#E5E5E5">correct okay so a few words about what</font>

24
00:01:04,290 --> 00:01:08,460
we mean when we say we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> achieve</font>

25
00:01:05,939 --> 00:01:10,380
<font color="#E5E5E5">high throughput security computation</font>

26
00:01:08,460 --> 00:01:13,020
so in general we have two ways to

27
00:01:10,380 --> 00:01:15,899
<font color="#CCCCCC">measure the performance of</font><font color="#E5E5E5"> a protocol so</font>

28
00:01:13,020 --> 00:01:17,548
the first way<font color="#CCCCCC"> is to</font><font color="#E5E5E5"> write</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> see how</font>

29
00:01:15,900 --> 00:01:19,619
much time<font color="#CCCCCC"> it takes</font><font color="#E5E5E5"> to compute a single</font>

30
00:01:17,549 --> 00:01:22,110
function<font color="#E5E5E5"> this is what we call the</font>

31
00:01:19,619 --> 00:01:25,650
latency of a protocol<font color="#CCCCCC"> a different way is</font>

32
00:01:22,110 --> 00:01:27,210
to<font color="#CCCCCC"> see how</font><font color="#E5E5E5"> many functions we can compute</font>

33
00:01:25,650 --> 00:01:29,220
in a single unit of time let's<font color="#E5E5E5"> say one</font>

34
00:01:27,210 --> 00:01:31,979
second<font color="#E5E5E5"> this is what we call the</font>

35
00:01:29,220 --> 00:01:34,560
throughput of the<font color="#E5E5E5"> protocol</font><font color="#CCCCCC"> now these are</font>

36
00:01:31,979 --> 00:01:37,079
<font color="#E5E5E5">not just in weight ways to measure the</font>

37
00:01:34,560 --> 00:01:39,240
protocol<font color="#E5E5E5"> but also different goals that</font>

38
00:01:37,079 --> 00:01:41,789
are translated<font color="#E5E5E5"> into different designs of</font>

39
00:01:39,240 --> 00:01:43,170
<font color="#E5E5E5">protocols so if we want to achieve for</font>

40
00:01:41,790 --> 00:01:45,659
example low latency then we usually

41
00:01:43,170 --> 00:01:47,759
<font color="#CCCCCC">probably would like to have constant</font>

42
00:01:45,659 --> 00:01:50,700
<font color="#E5E5E5">rounds of communication and this will be</font>

43
00:01:47,759 --> 00:01:52,619
done<font color="#E5E5E5"> using what we call the gobble</font>

44
00:01:50,700 --> 00:01:56,549
second<font color="#E5E5E5"> circuit approach when we send</font>

45
00:01:52,619 --> 00:01:58,920
<font color="#E5E5E5">large amount of data in in very few</font>

46
00:01:56,549 --> 00:02:00,240
rounds<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> other hand if you want to</font>

47
00:01:58,920 --> 00:02:02,729
achieve<font color="#E5E5E5"> high throughput then we care</font>

48
00:02:00,240 --> 00:02:04,679
less about the number<font color="#E5E5E5"> of rounds and we</font>

49
00:02:02,729 --> 00:02:06,780
care more<font color="#E5E5E5"> about low bandwidth and simple</font>

50
00:02:04,680 --> 00:02:08,729
computations because<font color="#E5E5E5"> even if the parties</font>

51
00:02:06,780 --> 00:02:10,348
need to<font color="#CCCCCC"> to wait for messages to arrive</font>

52
00:02:08,729 --> 00:02:12,629
then meanwhile they can start<font color="#E5E5E5"> already</font>

53
00:02:10,348 --> 00:02:13,890
the next<font color="#E5E5E5"> computation so in some way so</font>

54
00:02:12,629 --> 00:02:16,890
when we want to achieve<font color="#CCCCCC"> ice</font>

55
00:02:13,890 --> 00:02:19,470
<font color="#CCCCCC">usually we</font><font color="#E5E5E5"> would like to pipeline the</font>

56
00:02:16,890 --> 00:02:21,450
<font color="#E5E5E5">commutation as much as we can and in</font>

57
00:02:19,470 --> 00:02:25,260
this case we<font color="#E5E5E5"> will use</font><font color="#CCCCCC"> the secret channel</font>

58
00:02:21,450 --> 00:02:28,320
<font color="#CCCCCC">part</font><font color="#E5E5E5"> which which is what we will do in</font>

59
00:02:25,260 --> 00:02:30,450
this case<font color="#E5E5E5"> you know in our protocol so</font>

60
00:02:28,320 --> 00:02:33,959
the starting<font color="#E5E5E5"> point of our protocol</font><font color="#CCCCCC"> is</font>

61
00:02:30,450 --> 00:02:37,560
<font color="#CCCCCC">the semi honest protocol from</font><font color="#E5E5E5"> CCS</font><font color="#CCCCCC"> 16 by</font>

62
00:02:33,960 --> 00:02:39,870
<font color="#CCCCCC">Eric I foo cover</font><font color="#E5E5E5"> Linda</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> hi myself that</font>

63
00:02:37,560 --> 00:02:42,570
is based on replicated<font color="#E5E5E5"> secret sharing</font>

64
00:02:39,870 --> 00:02:44,520
<font color="#E5E5E5">and it has a very low communication it</font>

65
00:02:42,570 --> 00:02:48,959
requires only<font color="#CCCCCC"> one bit of communication</font>

66
00:02:44,520 --> 00:02:51,420
sent by each party and gate<font color="#CCCCCC"> and when we</font>

67
00:02:48,959 --> 00:02:53,640
implemented<font color="#E5E5E5"> it it achieved a throughput</font>

68
00:02:51,420 --> 00:02:56,100
<font color="#E5E5E5">of over</font><font color="#CCCCCC"> seven billion and gates per</font>

69
00:02:53,640 --> 00:02:58,350
second which is a 10/2<font color="#CCCCCC"> over</font><font color="#E5E5E5"> million AES</font>

70
00:02:56,100 --> 00:03:00,120
operations per second so this<font color="#E5E5E5"> gives us a</font>

71
00:02:58,350 --> 00:03:02,459
motivation to<font color="#E5E5E5"> take this protocol and</font>

72
00:03:00,120 --> 00:03:07,440
compile it<font color="#E5E5E5"> into a maliciously secure</font>

73
00:03:02,459 --> 00:03:10,530
protocol with with low cost<font color="#CCCCCC"> so when we</font>

74
00:03:07,440 --> 00:03:13,020
move from semi<font color="#E5E5E5"> honest to malicious to to</font>

75
00:03:10,530 --> 00:03:15,959
a malicious<font color="#CCCCCC"> maliciously secure we ask</font>

76
00:03:13,020 --> 00:03:18,600
<font color="#E5E5E5">basically three three questions</font><font color="#CCCCCC"> so the</font>

77
00:03:15,959 --> 00:03:21,450
first question<font color="#E5E5E5"> is how do we force the</font>

78
00:03:18,600 --> 00:03:24,239
corrupted party<font color="#E5E5E5"> to share its inputs on</font>

79
00:03:21,450 --> 00:03:26,548
<font color="#CCCCCC">the on the input</font><font color="#E5E5E5"> wires correctly the</font>

80
00:03:24,239 --> 00:03:28,230
second<font color="#E5E5E5"> question is how</font><font color="#CCCCCC"> to verify that n</font>

81
00:03:26,549 --> 00:03:28,950
gates will we have interaction between

82
00:03:28,230 --> 00:03:30,750
the parties

83
00:03:28,950 --> 00:03:33,030
I'll compute it correctly and the last

84
00:03:30,750 --> 00:03:35,239
question<font color="#E5E5E5"> is how</font><font color="#CCCCCC"> to verify</font><font color="#E5E5E5"> that the</font>

85
00:03:33,030 --> 00:03:38,670
values on the<font color="#E5E5E5"> output wires are</font>

86
00:03:35,239 --> 00:03:41,250
reconstructed correctly so the first and

87
00:03:38,670 --> 00:03:42,780
the last questions are solved in a very

88
00:03:41,250 --> 00:03:45,290
standard way<font color="#CCCCCC"> in our protocol</font><font color="#E5E5E5"> I will only</font>

89
00:03:42,780 --> 00:03:47,850
<font color="#E5E5E5">focus from now on on the second question</font>

90
00:03:45,290 --> 00:03:53,040
question of how to verify<font color="#CCCCCC"> that n gates</font>

91
00:03:47,850 --> 00:03:55,620
were computed correctly<font color="#CCCCCC"> so this also</font>

92
00:03:53,040 --> 00:03:57,298
this is what actually<font color="#E5E5E5"> that reminds the</font>

93
00:03:55,620 --> 00:04:01,530
throughput of the<font color="#E5E5E5"> protocol suite</font><font color="#CCCCCC"> this is</font>

94
00:03:57,299 --> 00:04:05,280
<font color="#CCCCCC">what the</font><font color="#E5E5E5"> interesting question</font><font color="#CCCCCC"> so we</font>

95
00:04:01,530 --> 00:04:08,700
follow the<font color="#CCCCCC"> beaver</font><font color="#E5E5E5"> triple method as in</font>

96
00:04:05,280 --> 00:04:10,590
many other protocols so in<font color="#E5E5E5"> beaver in in</font>

97
00:04:08,700 --> 00:04:12,959
this method we have<font color="#E5E5E5"> we consider</font>

98
00:04:10,590 --> 00:04:15,510
multiplication triples which is a triple

99
00:04:12,959 --> 00:04:19,798
of<font color="#E5E5E5"> shares</font><font color="#CCCCCC"> abmc</font><font color="#E5E5E5"> that are shared among the</font>

100
00:04:15,510 --> 00:04:21,839
<font color="#E5E5E5">parties such that C</font><font color="#CCCCCC"> equals a times B</font><font color="#E5E5E5"> now</font>

101
00:04:19,798 --> 00:04:24,179
every time we compute an<font color="#CCCCCC"> and gate we</font>

102
00:04:21,839 --> 00:04:26,669
also generate such such a multiplication

103
00:04:24,180 --> 00:04:27,450
triple<font color="#E5E5E5"> where the x and y are the shells</font>

104
00:04:26,669 --> 00:04:30,930
on<font color="#CCCCCC"> the in</font>

105
00:04:27,450 --> 00:04:32,550
<font color="#CCCCCC">Dwyer's of the gate and Z the Z is the</font>

106
00:04:30,930 --> 00:04:36,000
shell of the<font color="#CCCCCC"> outer thigh of this gate</font>

107
00:04:32,550 --> 00:04:40,170
<font color="#E5E5E5">now assume we have and</font><font color="#CCCCCC"> that another</font>

108
00:04:36,000 --> 00:04:42,590
random triple or a B and C<font color="#E5E5E5"> so we have</font>

109
00:04:40,170 --> 00:04:44,790
<font color="#CCCCCC">this sub protocol in our protocol called</font>

110
00:04:42,590 --> 00:04:47,460
triple verification<font color="#CCCCCC"> using another</font>

111
00:04:44,790 --> 00:04:50,880
without opening that has the property

112
00:04:47,460 --> 00:04:53,370
that if we have a valid random<font color="#E5E5E5"> triple</font>

113
00:04:50,880 --> 00:04:55,770
correct<font color="#E5E5E5"> random triple then we can use it</font>

114
00:04:53,370 --> 00:04:58,400
<font color="#CCCCCC">to verify</font><font color="#E5E5E5"> a multiplication triple that</font>

115
00:04:55,770 --> 00:05:01,580
was<font color="#E5E5E5"> generated when computing and gates</font>

116
00:04:58,400 --> 00:05:06,150
<font color="#CCCCCC">and when detecting with probability</font><font color="#E5E5E5"> one</font>

117
00:05:01,580 --> 00:05:08,400
okay<font color="#E5E5E5"> so if we if the gratata</font><font color="#CCCCCC"> T cheated</font>

118
00:05:06,150 --> 00:05:10,549
in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> in a NAND gate in a computation</font>

119
00:05:08,400 --> 00:05:13,380
of<font color="#E5E5E5"> a NAND gate so if we have a valid</font>

120
00:05:10,550 --> 00:05:15,960
<font color="#E5E5E5">random people we can detect it with</font>

121
00:05:13,380 --> 00:05:19,020
<font color="#E5E5E5">probability</font><font color="#CCCCCC"> one and and to implement</font>

122
00:05:15,960 --> 00:05:21,330
<font color="#CCCCCC">this - and this</font><font color="#E5E5E5"> sub protocol requires in</font>

123
00:05:19,020 --> 00:05:22,380
our protocol<font color="#E5E5E5"> very it has very low</font>

124
00:05:21,330 --> 00:05:26,340
communication codes

125
00:05:22,380 --> 00:05:28,409
cost<font color="#CCCCCC"> only</font><font color="#E5E5E5"> two bits per</font><font color="#CCCCCC"> each party so</font>

126
00:05:26,340 --> 00:05:31,109
this already gives us a very simple

127
00:05:28,410 --> 00:05:34,620
<font color="#E5E5E5">online protocol to start with so after</font>

128
00:05:31,110 --> 00:05:36,990
sharing the input the<font color="#E5E5E5"> part is run the</font>

129
00:05:34,620 --> 00:05:39,510
semi<font color="#E5E5E5"> honest protocol and then they use</font>

130
00:05:36,990 --> 00:05:42,060
the verification<font color="#E5E5E5"> protocol that I just</font>

131
00:05:39,510 --> 00:05:45,180
mentioned<font color="#CCCCCC"> to verify all and gates</font>

132
00:05:42,060 --> 00:05:47,280
computation<font color="#E5E5E5"> so and then they were</font>

133
00:05:45,180 --> 00:05:49,470
<font color="#CCCCCC">consulted so this because because the</font>

134
00:05:47,280 --> 00:05:52,549
say -<font color="#E5E5E5"> protocol requires one bit of</font>

135
00:05:49,470 --> 00:05:54,450
communication<font color="#E5E5E5"> per each</font><font color="#CCCCCC"> parity and</font>

136
00:05:52,550 --> 00:05:56,220
verification requires two bits of

137
00:05:54,450 --> 00:05:58,039
communication<font color="#CCCCCC"> parity so</font><font color="#E5E5E5"> we already have</font>

138
00:05:56,220 --> 00:06:01,170
an online protocol that has

139
00:05:58,040 --> 00:06:02,940
<font color="#E5E5E5">communication of only</font><font color="#CCCCCC"> three bits per</font>

140
00:06:01,170 --> 00:06:05,790
party so the only question<font color="#E5E5E5"> remains of</font>

141
00:06:02,940 --> 00:06:08,100
course is how we generate<font color="#CCCCCC"> these random</font>

142
00:06:05,790 --> 00:06:11,430
triples<font color="#E5E5E5"> that are used in</font><font color="#CCCCCC"> the in the</font>

143
00:06:08,100 --> 00:06:14,040
verification<font color="#CCCCCC"> step so so now we will</font>

144
00:06:11,430 --> 00:06:16,320
<font color="#E5E5E5">focus on the</font><font color="#CCCCCC"> processing</font><font color="#E5E5E5"> protocol or</font>

145
00:06:14,040 --> 00:06:20,580
offline protocol<font color="#E5E5E5"> that generates these</font>

146
00:06:16,320 --> 00:06:23,360
these<font color="#E5E5E5"> pickles okay so how do we</font><font color="#CCCCCC"> generate</font>

147
00:06:20,580 --> 00:06:25,740
<font color="#E5E5E5">correct</font><font color="#CCCCCC"> random multiplication tables so</font>

148
00:06:23,360 --> 00:06:31,050
in our protocol<font color="#E5E5E5"> we can we start by</font>

149
00:06:25,740 --> 00:06:32,820
<font color="#CCCCCC">generating just random shell so</font><font color="#E5E5E5"> we</font>

150
00:06:31,050 --> 00:06:36,350
generate so we can generate<font color="#CCCCCC"> random</font>

151
00:06:32,820 --> 00:06:39,450
shells<font color="#CCCCCC"> without any interaction</font>

152
00:06:36,350 --> 00:06:40,890
<font color="#E5E5E5">okay so we can the it requires no</font>

153
00:06:39,450 --> 00:06:41,310
interaction<font color="#CCCCCC"> between the parties except</font>

154
00:06:40,890 --> 00:06:44,310
<font color="#CCCCCC">to</font>

155
00:06:41,310 --> 00:06:46,140
some setup step of generating of

156
00:06:44,310 --> 00:06:48,270
generating kids that are later used<font color="#E5E5E5"> to</font>

157
00:06:46,140 --> 00:06:51,260
generate using<font color="#CCCCCC"> a yes to generate as much</font>

158
00:06:48,270 --> 00:06:54,270
random<font color="#CCCCCC"> shellings as we want and</font><font color="#E5E5E5"> then we</font>

159
00:06:51,260 --> 00:06:56,070
compute the shelling<font color="#E5E5E5"> of</font><font color="#CCCCCC"> see using the</font>

160
00:06:54,270 --> 00:06:57,659
<font color="#CCCCCC">say</font><font color="#E5E5E5"> me on the spot</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so this requires</font>

161
00:06:56,070 --> 00:06:59,099
<font color="#E5E5E5">only one bit</font><font color="#CCCCCC"> of communication</font><font color="#E5E5E5"> and now</font>

162
00:06:57,660 --> 00:07:01,680
the question remain is of course how<font color="#CCCCCC"> to</font>

163
00:06:59,100 --> 00:07:03,330
verify<font color="#CCCCCC"> this that this triple is valid</font>

164
00:07:01,680 --> 00:07:06,060
because we use the same<font color="#CCCCCC"> protocol</font><font color="#E5E5E5"> to</font>

165
00:07:03,330 --> 00:07:10,080
generate<font color="#E5E5E5"> it so the the crop despite</font><font color="#CCCCCC"> 13</font>

166
00:07:06,060 --> 00:07:12,900
<font color="#E5E5E5">eyes match it so we use here the cut and</font>

167
00:07:10,080 --> 00:07:14,940
choose method<font color="#E5E5E5"> or if you want the cut in</font>

168
00:07:12,900 --> 00:07:18,109
<font color="#E5E5E5">choosen bucket method so we start by</font>

169
00:07:14,940 --> 00:07:19,800
<font color="#CCCCCC">generating a large amount</font><font color="#E5E5E5"> of</font>

170
00:07:18,110 --> 00:07:22,620
multiplication triple<font color="#E5E5E5"> random</font>

171
00:07:19,800 --> 00:07:25,200
multiplication<font color="#CCCCCC"> triple in using the semi</font>

172
00:07:22,620 --> 00:07:27,150
honest protocol since it is so cheap to

173
00:07:25,200 --> 00:07:29,430
generate<font color="#E5E5E5"> them we can generate large</font>

174
00:07:27,150 --> 00:07:33,950
amount of triples and after we did that

175
00:07:29,430 --> 00:07:37,740
we start<font color="#E5E5E5"> we continue with doing with</font>

176
00:07:33,950 --> 00:07:40,020
with promoting<font color="#E5E5E5"> randomly these triples</font>

177
00:07:37,740 --> 00:07:42,150
now the key here<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> of course the</font>

178
00:07:40,020 --> 00:07:45,240
parties cannot<font color="#E5E5E5"> know the actual</font>

179
00:07:42,150 --> 00:07:50,849
permutation before they generated<font color="#E5E5E5"> the</font>

180
00:07:45,240 --> 00:07:54,450
initial<font color="#E5E5E5"> list of triples and then after</font>

181
00:07:50,850 --> 00:07:56,730
we promoted the<font color="#E5E5E5"> triples we open we</font>

182
00:07:54,450 --> 00:07:59,550
sacrifice we open<font color="#E5E5E5"> see triples from this</font>

183
00:07:56,730 --> 00:08:02,970
list<font color="#CCCCCC"> and when I say open I</font><font color="#E5E5E5"> mean that the</font>

184
00:07:59,550 --> 00:08:05,580
<font color="#E5E5E5">actual values of these triples</font><font color="#CCCCCC"> are being</font>

185
00:08:02,970 --> 00:08:08,400
is being a ring revealed to the parties

186
00:08:05,580 --> 00:08:10,080
and and therefore<font color="#CCCCCC"> if one of the open</font>

187
00:08:08,400 --> 00:08:12,989
<font color="#CCCCCC">peoples is</font><font color="#E5E5E5"> incorrect then the honest</font>

188
00:08:10,080 --> 00:08:15,630
parties will detect it and about<font color="#E5E5E5"> okay so</font>

189
00:08:12,990 --> 00:08:18,270
<font color="#E5E5E5">this is the first test if we passed this</font>

190
00:08:15,630 --> 00:08:22,380
test<font color="#E5E5E5"> we continue by taking the remaining</font>

191
00:08:18,270 --> 00:08:26,640
<font color="#E5E5E5">tripled and split them into n buckets of</font>

192
00:08:22,380 --> 00:08:31,710
equal size<font color="#CCCCCC"> in each bucket we have</font><font color="#E5E5E5"> better</font>

193
00:08:26,640 --> 00:08:34,679
triples<font color="#CCCCCC"> okay so the next</font><font color="#E5E5E5"> step</font><font color="#CCCCCC"> then we</font>

194
00:08:31,710 --> 00:08:37,350
have this bucket<font color="#CCCCCC"> and then we verify the</font>

195
00:08:34,679 --> 00:08:39,959
<font color="#E5E5E5">first triple in each bucket using the</font>

196
00:08:37,350 --> 00:08:45,030
other better<font color="#CCCCCC"> minus</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> peoples</font><font color="#E5E5E5"> we do</font>

197
00:08:39,960 --> 00:08:46,980
that using the verification education

198
00:08:45,030 --> 00:08:49,560
support<font color="#CCCCCC"> all</font><font color="#E5E5E5"> replication of one people</font>

199
00:08:46,980 --> 00:08:52,350
<font color="#E5E5E5">using another that I mentioned before</font>

200
00:08:49,560 --> 00:08:53,790
so we execute for each bucket<font color="#E5E5E5"> this</font>

201
00:08:52,350 --> 00:08:56,010
<font color="#E5E5E5">support</font><font color="#CCCCCC"> are called</font><font color="#E5E5E5"> better minus one</font>

202
00:08:53,790 --> 00:08:58,140
times and<font color="#CCCCCC"> if</font>

203
00:08:56,010 --> 00:08:59,880
<font color="#CCCCCC">if we passed this test</font><font color="#E5E5E5"> - then we take</font>

204
00:08:58,140 --> 00:09:03,600
the first<font color="#CCCCCC"> triple in each bucket and</font>

205
00:08:59,880 --> 00:09:05,610
output it<font color="#CCCCCC"> and now to</font><font color="#E5E5E5"> do it and this is</font>

206
00:09:03,600 --> 00:09:07,530
<font color="#CCCCCC">the</font><font color="#E5E5E5"> output of the</font><font color="#CCCCCC"> purposing protocol</font><font color="#E5E5E5"> and</font>

207
00:09:05,610 --> 00:09:10,050
<font color="#E5E5E5">now the property we have here is that if</font>

208
00:09:07,530 --> 00:09:13,949
one of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> buckets is mixed meaning that</font>

209
00:09:10,050 --> 00:09:15,660
it<font color="#CCCCCC"> has both</font><font color="#E5E5E5"> bed and</font><font color="#CCCCCC"> grow</font><font color="#E5E5E5"> triples</font><font color="#CCCCCC"> done</font>

210
00:09:13,950 --> 00:09:19,050
then the onus<font color="#E5E5E5"> parties will detect it</font>

211
00:09:15,660 --> 00:09:20,790
with with ability one in<font color="#E5E5E5"> a boat</font><font color="#CCCCCC"> okay so</font>

212
00:09:19,050 --> 00:09:23,339
the<font color="#CCCCCC"> only way that</font><font color="#E5E5E5"> virtually</font><font color="#CCCCCC"> can winds</font>

213
00:09:20,790 --> 00:09:27,270
can make the purpose testing protocol

214
00:09:23,340 --> 00:09:29,520
output and incorrect<font color="#CCCCCC"> ripple is by having</font>

215
00:09:27,270 --> 00:09:36,449
bucket<font color="#E5E5E5"> that is fully</font><font color="#CCCCCC"> bed that contains</font>

216
00:09:29,520 --> 00:09:40,860
only<font color="#E5E5E5"> bed triples okay so okay so so this</font>

217
00:09:36,450 --> 00:09:43,440
<font color="#E5E5E5">is the the process of cutting tooth now</font>

218
00:09:40,860 --> 00:09:46,560
if you look at the cost at the

219
00:09:43,440 --> 00:09:49,440
communication cost of this process<font color="#CCCCCC"> so to</font>

220
00:09:46,560 --> 00:09:52,739
then to generate the first<font color="#CCCCCC"> the</font><font color="#E5E5E5"> initial</font>

221
00:09:49,440 --> 00:09:55,020
list of<font color="#CCCCCC"> M random triples we need M bits</font>

222
00:09:52,740 --> 00:09:57,780
of communication pill<font color="#E5E5E5"> each party</font><font color="#CCCCCC"> then we</font>

223
00:09:55,020 --> 00:10:00,090
open C triples so<font color="#E5E5E5"> we need three bits for</font>

224
00:09:57,780 --> 00:10:03,810
each opening so we need three<font color="#E5E5E5"> C bits</font><font color="#CCCCCC"> and</font>

225
00:10:00,090 --> 00:10:07,370
then we run<font color="#E5E5E5"> the subcortical of</font>

226
00:10:03,810 --> 00:10:09,839
verification and better<font color="#E5E5E5"> - time for n</font>

227
00:10:07,370 --> 00:10:12,000
<font color="#E5E5E5">buckets and it costs two bits of</font>

228
00:10:09,840 --> 00:10:15,150
<font color="#CCCCCC">communications so we have this</font>

229
00:10:12,000 --> 00:10:17,160
communication<font color="#E5E5E5"> cost so overall we we get</font>

230
00:10:15,150 --> 00:10:19,770
this<font color="#E5E5E5"> formula from for the communication</font>

231
00:10:17,160 --> 00:10:22,829
constant obviously<font color="#E5E5E5"> this depends on the</font>

232
00:10:19,770 --> 00:10:24,600
values of<font color="#CCCCCC"> better</font><font color="#E5E5E5"> the size of the</font><font color="#CCCCCC"> bucket</font>

233
00:10:22,830 --> 00:10:29,430
and<font color="#E5E5E5"> see the amount of people that we</font>

234
00:10:24,600 --> 00:10:31,140
open so and so<font color="#CCCCCC"> of course as we increase</font>

235
00:10:29,430 --> 00:10:33,300
these parameters there's the<font color="#E5E5E5"> probability</font>

236
00:10:31,140 --> 00:10:35,850
that<font color="#CCCCCC"> the weight is</font><font color="#E5E5E5"> smaller but on the</font>

237
00:10:33,300 --> 00:10:40,140
other<font color="#E5E5E5"> hand it increases also the cost of</font>

238
00:10:35,850 --> 00:10:42,120
<font color="#CCCCCC">the</font><font color="#E5E5E5"> protocol so so this protocol can</font>

239
00:10:40,140 --> 00:10:45,410
<font color="#CCCCCC">serve this process can view</font><font color="#E5E5E5"> can be</font>

240
00:10:42,120 --> 00:10:48,000
viewed as as a communal<font color="#CCCCCC"> Terrell game</font>

241
00:10:45,410 --> 00:10:50,310
<font color="#E5E5E5">well we have an adversary who chooses</font>

242
00:10:48,000 --> 00:10:51,780
and better<font color="#E5E5E5"> placebos where each</font><font color="#CCCCCC"> Bowl can</font>

243
00:10:50,310 --> 00:10:53,550
<font color="#CCCCCC">be better good</font><font color="#E5E5E5"> a ball is of course a</font>

244
00:10:51,780 --> 00:10:55,980
multiplication people you know protocol

245
00:10:53,550 --> 00:10:57,839
<font color="#E5E5E5">and then</font><font color="#CCCCCC"> C balls are randomly chosen and</font>

246
00:10:55,980 --> 00:11:00,180
<font color="#CCCCCC">open</font><font color="#E5E5E5"> and if a bad ball was</font><font color="#CCCCCC"> open</font><font color="#E5E5E5"> then</font>

247
00:10:57,840 --> 00:11:01,950
that those are<font color="#E5E5E5"> eluted and then the balls</font>

248
00:11:00,180 --> 00:11:05,099
are<font color="#E5E5E5"> randomly thrown into n buckets of</font>

249
00:11:01,950 --> 00:11:07,320
size<font color="#CCCCCC"> beta and</font><font color="#E5E5E5"> only if</font>

250
00:11:05,100 --> 00:11:08,670
and that<font color="#E5E5E5"> little ways if and only if all</font>

251
00:11:07,320 --> 00:11:11,790
buckets are fully

252
00:11:08,670 --> 00:11:14,339
fully<font color="#E5E5E5"> bed okay and the goal is</font><font color="#CCCCCC"> that</font>

253
00:11:11,790 --> 00:11:16,949
given some statistical<font color="#E5E5E5"> parameter Sigma</font>

254
00:11:14,340 --> 00:11:18,300
and<font color="#CCCCCC"> done in</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> of stripper</font><font color="#E5E5E5"> in number</font>

255
00:11:16,950 --> 00:11:20,600
of<font color="#E5E5E5"> students that we want you</font><font color="#CCCCCC"> delight we</font>

256
00:11:18,300 --> 00:11:22,800
want to find better<font color="#E5E5E5"> so minimal size</font>

257
00:11:20,600 --> 00:11:25,380
<font color="#E5E5E5">minimum size because we want</font><font color="#CCCCCC"> to minimize</font>

258
00:11:22,800 --> 00:11:28,620
<font color="#E5E5E5">the communication cost such that that</font>

259
00:11:25,380 --> 00:11:33,360
<font color="#E5E5E5">the probability that will mean is</font>

260
00:11:28,620 --> 00:11:34,680
smaller than 2 to the<font color="#E5E5E5"> minus</font><font color="#CCCCCC"> Sigma so</font>

261
00:11:33,360 --> 00:11:38,540
this<font color="#E5E5E5"> is the common mental game so we're</font>

262
00:11:34,680 --> 00:11:41,520
not the<font color="#CCCCCC"> first one to investigate this</font>

263
00:11:38,540 --> 00:11:45,030
game it was<font color="#CCCCCC"> already investigated in the</font>

264
00:11:41,520 --> 00:11:48,540
<font color="#E5E5E5">tiny</font><font color="#CCCCCC"> OT protocol</font><font color="#E5E5E5"> we present in in our</font>

265
00:11:45,030 --> 00:11:51,810
<font color="#CCCCCC">paper</font><font color="#E5E5E5"> and improved community analysis</font>

266
00:11:48,540 --> 00:11:55,380
which gives which is tighter<font color="#E5E5E5"> and just to</font>

267
00:11:51,810 --> 00:11:57,209
<font color="#E5E5E5">to for an example if we take</font><font color="#CCCCCC"> let's say</font>

268
00:11:55,380 --> 00:11:59,400
<font color="#E5E5E5">we want to generate a million triples</font>

269
00:11:57,210 --> 00:12:02,400
and equals million and the statistical

270
00:11:59,400 --> 00:12:04,530
security parameter is 40 then according

271
00:12:02,400 --> 00:12:08,280
<font color="#CCCCCC">to their analysis you need</font><font color="#E5E5E5"> the size of</font>

272
00:12:04,530 --> 00:12:10,170
the bucket<font color="#CCCCCC"> before we need only and in</font>

273
00:12:08,280 --> 00:12:12,180
<font color="#CCCCCC">other</font><font color="#E5E5E5"> analysis it's only three we need</font>

274
00:12:10,170 --> 00:12:15,180
<font color="#CCCCCC">to open</font><font color="#E5E5E5"> much less</font><font color="#CCCCCC"> triples and therefore</font>

275
00:12:12,180 --> 00:12:17,160
we<font color="#E5E5E5"> need to generate much less triples to</font>

276
00:12:15,180 --> 00:12:22,020
start with in<font color="#CCCCCC"> the in the processing</font>

277
00:12:17,160 --> 00:12:25,050
protocol<font color="#CCCCCC"> so finally if</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> this these</font>

278
00:12:22,020 --> 00:12:27,329
exact parameters we<font color="#CCCCCC"> can see the whole</font>

279
00:12:25,050 --> 00:12:28,530
protocol so we<font color="#CCCCCC"> have the purpose of</font>

280
00:12:27,330 --> 00:12:30,930
<font color="#E5E5E5">stream protocol when we start where we</font>

281
00:12:28,530 --> 00:12:33,810
<font color="#E5E5E5">start again with generating and better</font>

282
00:12:30,930 --> 00:12:35,880
flow say triples which with these

283
00:12:33,810 --> 00:12:38,310
<font color="#E5E5E5">parameters it's three million</font><font color="#CCCCCC"> peoples we</font>

284
00:12:35,880 --> 00:12:40,220
open only<font color="#E5E5E5"> three triples that's all and</font>

285
00:12:38,310 --> 00:12:43,439
then<font color="#E5E5E5"> we need split them into buckets</font>

286
00:12:40,220 --> 00:12:45,570
<font color="#E5E5E5">into million buckets and use better</font>

287
00:12:43,440 --> 00:12:47,850
<font color="#CCCCCC">minus 1 peoples to verify 1 people which</font>

288
00:12:45,570 --> 00:12:51,480
means we need<font color="#E5E5E5"> to for each bucket we need</font>

289
00:12:47,850 --> 00:12:53,910
to run the verification sub protocol

290
00:12:51,480 --> 00:12:55,890
exactly twice<font color="#CCCCCC"> and if we look at the</font>

291
00:12:53,910 --> 00:13:00,270
overall<font color="#E5E5E5"> communication it costs</font><font color="#CCCCCC"> seven</font>

292
00:12:55,890 --> 00:13:03,150
bits per<font color="#CCCCCC"> N gates so</font><font color="#E5E5E5"> overall with these</font>

293
00:13:00,270 --> 00:13:08,400
<font color="#E5E5E5">parameters we need</font><font color="#CCCCCC"> exactly ten bits per</font>

294
00:13:03,150 --> 00:13:11,220
<font color="#CCCCCC">n gate sent per each party</font><font color="#E5E5E5"> so we started</font>

295
00:13:08,400 --> 00:13:13,199
with the<font color="#E5E5E5"> same - protocol which which has</font>

296
00:13:11,220 --> 00:13:15,360
which has<font color="#E5E5E5"> the communication</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> one bit</font>

297
00:13:13,200 --> 00:13:17,400
<font color="#CCCCCC">per party and and to achieve the</font>

298
00:13:15,360 --> 00:13:20,140
malicious skill we<font color="#CCCCCC"> need to blow up the</font>

299
00:13:17,400 --> 00:13:23,079
communication by a factor of<font color="#E5E5E5"> 10</font>

300
00:13:20,140 --> 00:13:27,010
so just to show<font color="#CCCCCC"> an efficiency comparison</font>

301
00:13:23,079 --> 00:13:28,540
to a<font color="#CCCCCC"> work</font><font color="#E5E5E5"> from CCS 15 by massage was</font>

302
00:13:27,010 --> 00:13:30,130
like<font color="#CCCCCC"> and then they presented the</font>

303
00:13:28,540 --> 00:13:33,370
protocol in the same setting<font color="#E5E5E5"> three</font>

304
00:13:30,130 --> 00:13:35,320
parties and one<font color="#E5E5E5"> corrupt is 31 malicious</font>

305
00:13:33,370 --> 00:13:37,959
<font color="#E5E5E5">a corrupt authority that has the same</font>

306
00:13:35,320 --> 00:13:40,180
<font color="#E5E5E5">communication of a semi honest</font><font color="#CCCCCC"> Yahoo</font>

307
00:13:37,959 --> 00:13:41,920
<font color="#CCCCCC">okay so it's a very efficient protocol</font>

308
00:13:40,180 --> 00:13:44,109
and as you can<font color="#E5E5E5"> see we for each and gate</font>

309
00:13:41,920 --> 00:13:47,290
they need a<font color="#CCCCCC"> eighty five bits we need</font>

310
00:13:44,110 --> 00:13:50,350
only<font color="#E5E5E5"> ten and we and</font><font color="#CCCCCC"> we need much less a</font>

311
00:13:47,290 --> 00:13:52,920
<font color="#E5E5E5">yes computations per and gate but of</font>

312
00:13:50,350 --> 00:13:55,630
course<font color="#CCCCCC"> they're part the protocol is has</font>

313
00:13:52,920 --> 00:14:00,610
<font color="#CCCCCC">achieves</font><font color="#E5E5E5"> achieve a constant</font><font color="#CCCCCC"> run so it</font>

314
00:13:55,630 --> 00:14:03,189
has its<font color="#E5E5E5"> own</font><font color="#CCCCCC"> justification</font><font color="#E5E5E5"> so we'll</font>

315
00:14:00,610 --> 00:14:07,380
finish with with telling you that we

316
00:14:03,190 --> 00:14:10,990
have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> follow-up paper that will appear</font>

317
00:14:07,380 --> 00:14:12,939
SP and in<font color="#E5E5E5"> this paper we managed to</font>

318
00:14:10,990 --> 00:14:16,120
reduce<font color="#E5E5E5"> the communication even further</font>

319
00:14:12,940 --> 00:14:17,529
<font color="#E5E5E5">from ten bits to seven bits this is</font>

320
00:14:16,120 --> 00:14:19,180
achieved by a better commute tools that

321
00:14:17,529 --> 00:14:22,180
allow us to<font color="#CCCCCC"> you to reduce</font><font color="#E5E5E5"> the size of</font>

322
00:14:19,180 --> 00:14:24,790
<font color="#CCCCCC">the bucket from three to two</font><font color="#E5E5E5"> we also</font>

323
00:14:22,180 --> 00:14:28,329
managed to<font color="#E5E5E5"> reduce the computational load</font>

324
00:14:24,790 --> 00:14:29,740
by replacing the<font color="#E5E5E5"> the random permutation</font>

325
00:14:28,329 --> 00:14:32,649
that<font color="#E5E5E5"> we have here in this protocol</font>

326
00:14:29,740 --> 00:14:34,630
recall that we need to run to promote an

327
00:14:32,649 --> 00:14:37,420
array of million triples of three

328
00:14:34,630 --> 00:14:40,199
million<font color="#CCCCCC"> people actually so this has a so</font>

329
00:14:37,420 --> 00:14:44,709
when you<font color="#E5E5E5"> implement it you you have many</font>

330
00:14:40,199 --> 00:14:49,390
cache misses<font color="#E5E5E5"> so we so we presented a way</font>

331
00:14:44,709 --> 00:14:50,709
to shuffle<font color="#CCCCCC"> their array that is cache</font>

332
00:14:49,390 --> 00:14:52,990
efficient<font color="#E5E5E5"> and it is not a random</font>

333
00:14:50,709 --> 00:14:54,819
<font color="#E5E5E5">permutation but even though it it has we</font>

334
00:14:52,990 --> 00:14:57,339
<font color="#CCCCCC">can show</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> community of three</font><font color="#E5E5E5"> that it</font>

335
00:14:54,820 --> 00:15:00,430
<font color="#CCCCCC">achieves the same</font><font color="#E5E5E5"> level of security and</font>

336
00:14:57,339 --> 00:15:02,890
<font color="#CCCCCC">when implementing it</font><font color="#E5E5E5"> so the basic</font>

337
00:15:00,430 --> 00:15:07,050
limitation of the protocol<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I just</font>

338
00:15:02,890 --> 00:15:07,050
<font color="#E5E5E5">presented you achieve a throughput of</font>

339
00:15:07,260 --> 00:15:12,939
<font color="#E5E5E5">500 million and after</font><font color="#CCCCCC"> the stimulation we</font>

340
00:15:10,720 --> 00:15:16,060
were managed to break the 1 billion gate

341
00:15:12,940 --> 00:15:19,180
barrier in the<font color="#CCCCCC"> presence of a malicious a</font>

342
00:15:16,060 --> 00:15:20,680
<font color="#CCCCCC">tracer which</font><font color="#E5E5E5"> is much much more than was</font>

343
00:15:19,180 --> 00:15:24,459
known before<font color="#E5E5E5"> of course</font><font color="#CCCCCC"> it's for a</font>

344
00:15:20,680 --> 00:15:26,800
specific<font color="#E5E5E5"> setting but it still it still</font>

345
00:15:24,459 --> 00:15:29,819
achieve very high<font color="#E5E5E5"> throughput and that</font>

346
00:15:26,800 --> 00:15:29,819
would be all thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> very much</font>

347
00:15:33,180 --> 00:15:44,349
plenty<font color="#CCCCCC"> of time for questions so I</font><font color="#E5E5E5"> will</font>

348
00:15:42,190 --> 00:15:46,720
ask<font color="#E5E5E5"> one</font><font color="#CCCCCC"> how do you do the permutation</font>

349
00:15:44,350 --> 00:15:48,160
<font color="#E5E5E5">for the pre-processing that in the</font>

350
00:15:46,720 --> 00:15:50,350
seventh that's counted in the<font color="#CCCCCC"> seven n</font>

351
00:15:48,160 --> 00:15:51,850
bits<font color="#E5E5E5"> so it's actually you don't it's</font>

352
00:15:50,350 --> 00:15:53,470
actually almost<font color="#E5E5E5"> without an integration</font>

353
00:15:51,850 --> 00:15:56,889
you start by<font color="#E5E5E5"> generating random shells</font>

354
00:15:53,470 --> 00:15:59,260
<font color="#E5E5E5">with any communication and then you open</font>

355
00:15:56,889 --> 00:16:01,690
it<font color="#E5E5E5"> and then this is a seed</font><font color="#CCCCCC"> that you use</font>

356
00:15:59,260 --> 00:16:04,329
that use it to<font color="#CCCCCC"> generate how much how</font>

357
00:16:01,690 --> 00:16:11,410
many random<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> you need so</font>

358
00:16:04,329 --> 00:16:13,959
basically it's a constant cost<font color="#E5E5E5"> okay so</font>

359
00:16:11,410 --> 00:16:15,519
the<font color="#E5E5E5"> Oakland paper does it</font><font color="#CCCCCC"> actually the</font>

360
00:16:13,959 --> 00:16:18,310
<font color="#E5E5E5">title doesn't say</font><font color="#CCCCCC"> three-party does it</font>

361
00:16:15,519 --> 00:16:21,130
actually<font color="#E5E5E5"> extend to so the all the method</font>

362
00:16:18,310 --> 00:16:23,709
that we show there<font color="#CCCCCC"> are generic can be</font>

363
00:16:21,130 --> 00:16:25,990
applied<font color="#CCCCCC"> to any npc protocol that</font><font color="#E5E5E5"> used as</font>

364
00:16:23,709 --> 00:16:29,170
this kind<font color="#CCCCCC"> of cottage cheese method but</font>

365
00:16:25,990 --> 00:16:30,519
the<font color="#E5E5E5"> implementation</font><font color="#CCCCCC"> is in there is for</font>

366
00:16:29,170 --> 00:16:32,560
<font color="#E5E5E5">this specification of the three parties</font>

367
00:16:30,519 --> 00:16:34,810
<font color="#CCCCCC">but</font><font color="#E5E5E5"> the methods there are definitely</font>

368
00:16:32,560 --> 00:16:36,279
generic so have you tried<font color="#CCCCCC"> running for</font>

369
00:16:34,810 --> 00:16:38,229
like<font color="#E5E5E5"> five</font><font color="#CCCCCC"> or seven or something like</font>

370
00:16:36,279 --> 00:16:39,760
<font color="#CCCCCC">that no we didn't try that the problem</font>

371
00:16:38,230 --> 00:16:43,000
is that<font color="#CCCCCC"> this protocol</font><font color="#E5E5E5"> is based on the</font>

372
00:16:39,760 --> 00:16:45,370
replicated<font color="#CCCCCC"> C</font><font color="#E5E5E5"> code sharing you</font><font color="#CCCCCC"> know this</font>

373
00:16:43,000 --> 00:16:46,810
kind of<font color="#CCCCCC"> Secrets</font><font color="#E5E5E5"> having go the size of</font>

374
00:16:45,370 --> 00:16:48,550
the<font color="#CCCCCC"> sharing this</font><font color="#E5E5E5"> sharing grows</font>

375
00:16:46,810 --> 00:16:50,589
exponentially with<font color="#CCCCCC"> the number of</font><font color="#E5E5E5"> parties</font>

376
00:16:48,550 --> 00:16:53,640
<font color="#CCCCCC">but for five or seven maybe it'll still</font>

377
00:16:50,589 --> 00:16:53,640
<font color="#E5E5E5">be efficient</font>

