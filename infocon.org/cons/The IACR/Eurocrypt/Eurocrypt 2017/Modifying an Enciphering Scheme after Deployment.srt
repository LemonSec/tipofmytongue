1
00:00:00,060 --> 00:00:05,250
<font color="#CCCCCC">assumes often precludes</font><font color="#E5E5E5"> just simply</font>

2
00:00:02,790 --> 00:00:07,340
pulling<font color="#CCCCCC"> them all down and pulling all</font>

3
00:00:05,250 --> 00:00:10,170
the ciphertext down and decrypting them

4
00:00:07,340 --> 00:00:11,790
so in this paper our main contribution

5
00:00:10,170 --> 00:00:14,099
is a generic algorithm which we call

6
00:00:11,790 --> 00:00:16,288
<font color="#CCCCCC">which</font><font color="#E5E5E5"> with apologies to</font><font color="#CCCCCC"> oma Rheingold</font>

7
00:00:14,099 --> 00:00:20,220
and the people who built this exact

8
00:00:16,289 --> 00:00:21,779
<font color="#E5E5E5">product we call this</font><font color="#CCCCCC"> zig zag this is a</font>

9
00:00:20,220 --> 00:00:24,470
generic algorithm that solves the

10
00:00:21,779 --> 00:00:27,390
<font color="#CCCCCC">problem of</font><font color="#E5E5E5"> backwards-compatible FPE</font><font color="#CCCCCC"> and</font>

11
00:00:24,470 --> 00:00:28,710
the tokenization<font color="#E5E5E5"> upgrade example that I</font>

12
00:00:27,390 --> 00:00:30,060
gave<font color="#E5E5E5"> before we're going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> refer to as</font>

13
00:00:28,710 --> 00:00:33,000
<font color="#E5E5E5">domain completion in the rest of</font><font color="#CCCCCC"> the</font>

14
00:00:30,060 --> 00:00:35,040
talk and we<font color="#E5E5E5"> proved</font><font color="#CCCCCC"> that the zig zag</font><font color="#E5E5E5"> that</font>

15
00:00:33,000 --> 00:00:37,079
meets the natural security notion<font color="#E5E5E5"> for</font>

16
00:00:35,040 --> 00:00:39,629
<font color="#E5E5E5">this setting and we also do a couple of</font>

17
00:00:37,079 --> 00:00:42,660
analyses of<font color="#E5E5E5"> the run</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> of the zig zag</font>

18
00:00:39,629 --> 00:00:45,510
<font color="#E5E5E5">and prove that it's pretty fast with all</font>

19
00:00:42,660 --> 00:00:47,218
<font color="#E5E5E5">but negligible probability and for a</font>

20
00:00:45,510 --> 00:00:48,829
domain extension which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the expanding</font>

21
00:00:47,219 --> 00:00:52,050
<font color="#E5E5E5">that you know the format expansion</font>

22
00:00:48,829 --> 00:00:53,940
example we saw before<font color="#E5E5E5"> we</font><font color="#CCCCCC"> proved that</font>

23
00:00:52,050 --> 00:00:55,230
unfortunately like the natural strongest

24
00:00:53,940 --> 00:00:58,108
security you would want in<font color="#E5E5E5"> this setting</font>

25
00:00:55,230 --> 00:01:00,358
is actually impossible<font color="#CCCCCC"> and we give a new</font>

26
00:00:58,109 --> 00:01:03,409
slightly weaker security goal and we

27
00:01:00,359 --> 00:01:07,140
<font color="#E5E5E5">analyze this exact with respect to that</font>

28
00:01:03,409 --> 00:01:11,430
so a little more formally<font color="#CCCCCC"> a domain</font>

29
00:01:07,140 --> 00:01:15,570
completion which sorry<font color="#E5E5E5"> let me start</font><font color="#CCCCCC"> that</font>

30
00:01:11,430 --> 00:01:18,900
again<font color="#CCCCCC"> a domain completion setting</font>

31
00:01:15,570 --> 00:01:22,048
involves<font color="#E5E5E5"> FPE and an</font><font color="#CCCCCC"> FPE</font><font color="#E5E5E5"> from a set D to</font>

32
00:01:18,900 --> 00:01:25,830
itself<font color="#E5E5E5"> with key K is a permutation of</font>

33
00:01:22,049 --> 00:01:27,420
that set for<font color="#E5E5E5"> every key so in domain</font>

34
00:01:25,830 --> 00:01:29,310
completion we're going to call the old

35
00:01:27,420 --> 00:01:31,890
FPE and we're gonna consider<font color="#CCCCCC"> this</font>

36
00:01:29,310 --> 00:01:33,479
partial permutation which is to say it's

37
00:01:31,890 --> 00:01:35,850
a permutation that's<font color="#E5E5E5"> only defined on a</font>

38
00:01:33,479 --> 00:01:38,158
subset<font color="#E5E5E5"> of</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> possible inputs we're</font>

39
00:01:35,850 --> 00:01:39,360
gonna call this<font color="#E5E5E5"> F sub K star and we're</font>

40
00:01:38,159 --> 00:01:43,290
going<font color="#CCCCCC"> to call the domain of</font><font color="#E5E5E5"> this partial</font>

41
00:01:39,360 --> 00:01:44,399
permutation T<font color="#E5E5E5"> so these are concretely</font>

42
00:01:43,290 --> 00:01:45,780
that<font color="#E5E5E5"> you can think of these</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> kind of</font>

43
00:01:44,399 --> 00:01:47,759
the<font color="#E5E5E5"> plain</font><font color="#CCCCCC"> ticks that were present in</font><font color="#E5E5E5"> the</font>

44
00:01:45,780 --> 00:01:51,210
<font color="#CCCCCC">system before this domain completion</font>

45
00:01:47,759 --> 00:01:55,229
occurs so the<font color="#CCCCCC"> goal of this setting is to</font>

46
00:01:51,210 --> 00:01:57,869
build a new<font color="#CCCCCC"> FPE Z</font><font color="#E5E5E5"> Z sub K prime over the</font>

47
00:01:55,229 --> 00:02:01,229
same set so<font color="#CCCCCC"> that for all the points in T</font>

48
00:01:57,869 --> 00:02:04,380
<font color="#E5E5E5">the image under Z Z agrees with the</font>

49
00:02:01,229 --> 00:02:09,149
image<font color="#E5E5E5"> under F of the point so basically</font>

50
00:02:04,380 --> 00:02:12,239
the the zigzag or the<font color="#E5E5E5"> Z Z domain</font>

51
00:02:09,149 --> 00:02:13,590
completed cipher<font color="#E5E5E5"> has the same image for</font>

52
00:02:12,239 --> 00:02:17,489
all<font color="#E5E5E5"> those points</font><font color="#CCCCCC"> into you</font>

53
00:02:13,590 --> 00:02:19,200
<font color="#CCCCCC">a security goal in</font><font color="#E5E5E5"> the setting is the</font>

54
00:02:17,489 --> 00:02:20,370
kind of<font color="#E5E5E5"> the traditional</font><font color="#CCCCCC"> one for</font><font color="#E5E5E5"> FPE</font>

55
00:02:19,200 --> 00:02:22,768
which is strong pseudo-random

56
00:02:20,370 --> 00:02:24,930
permutation security and this basically

57
00:02:22,769 --> 00:02:26,280
<font color="#E5E5E5">says</font><font color="#CCCCCC"> that the cipher is</font>

58
00:02:24,930 --> 00:02:29,519
<font color="#E5E5E5">indistinguishable from a random</font>

59
00:02:26,280 --> 00:02:31,470
permutation<font color="#CCCCCC"> but the slight twist for</font>

60
00:02:29,519 --> 00:02:37,230
domain completion is that we're going<font color="#E5E5E5"> to</font>

61
00:02:31,470 --> 00:02:39,030
give the adversary knowledge of T so in

62
00:02:37,230 --> 00:02:41,488
the<font color="#E5E5E5"> next few slides</font><font color="#CCCCCC"> rather than</font>

63
00:02:39,030 --> 00:02:42,959
referring to the function f sub<font color="#E5E5E5"> case</font><font color="#CCCCCC"> are</font>

64
00:02:41,489 --> 00:02:44,819
abstractly we're just<font color="#CCCCCC"> gonna think</font><font color="#E5E5E5"> of it</font>

65
00:02:42,959 --> 00:02:46,650
as a token table which is<font color="#E5E5E5"> basically just</font>

66
00:02:44,819 --> 00:02:49,619
<font color="#E5E5E5">a big attribute value map as I described</font>

67
00:02:46,650 --> 00:02:51,200
<font color="#E5E5E5">before</font><font color="#CCCCCC"> so there's an obvious approach</font><font color="#E5E5E5"> to</font>

68
00:02:49,620 --> 00:02:54,060
this problem<font color="#CCCCCC"> which</font><font color="#E5E5E5"> is basically to use</font>

69
00:02:51,200 --> 00:02:57,000
<font color="#CCCCCC">tokenization scheme and a new fve scheme</font>

70
00:02:54,060 --> 00:02:58,319
in parallel<font color="#E5E5E5"> so when you get a when you</font>

71
00:02:57,000 --> 00:03:00,000
want<font color="#CCCCCC"> to encrypt a point that was</font><font color="#E5E5E5"> in the</font>

72
00:02:58,319 --> 00:03:02,069
token table<font color="#E5E5E5"> already you just return its</font>

73
00:03:00,000 --> 00:03:03,269
value<font color="#CCCCCC"> and if you want to return a point</font>

74
00:03:02,069 --> 00:03:05,760
it's not<font color="#E5E5E5"> in the token table you</font><font color="#CCCCCC"> just</font>

75
00:03:03,269 --> 00:03:07,260
encrypt<font color="#E5E5E5"> it with</font><font color="#CCCCCC"> that PE unfortunately</font>

76
00:03:05,760 --> 00:03:09,060
it's not<font color="#E5E5E5"> that</font><font color="#CCCCCC"> hard to</font><font color="#E5E5E5"> see that like</font>

77
00:03:07,260 --> 00:03:11,790
you're gonna get collisions in<font color="#CCCCCC"> the</font>

78
00:03:09,060 --> 00:03:13,110
output<font color="#E5E5E5"> so this actually this actually</font>

79
00:03:11,790 --> 00:03:15,120
<font color="#E5E5E5">doesn't even preserve the permittivity</font>

80
00:03:13,110 --> 00:03:17,639
of<font color="#E5E5E5"> the set that we're trying to to</font>

81
00:03:15,120 --> 00:03:20,549
encourage so we have to<font color="#E5E5E5"> kind of discard</font>

82
00:03:17,639 --> 00:03:23,430
this basic<font color="#E5E5E5"> construction but fortunately</font>

83
00:03:20,549 --> 00:03:26,280
<font color="#E5E5E5">a slight tweak of this basic idea</font><font color="#CCCCCC"> gives</font>

84
00:03:23,430 --> 00:03:29,400
us what we<font color="#E5E5E5"> need so the idea here this is</font>

85
00:03:26,280 --> 00:03:32,459
the<font color="#CCCCCC"> the zigzag construction so the idea</font>

86
00:03:29,400 --> 00:03:34,109
<font color="#CCCCCC">here is to</font><font color="#E5E5E5"> use a kind of a modified form</font>

87
00:03:32,459 --> 00:03:36,139
<font color="#E5E5E5">of cycle locking to repair the</font>

88
00:03:34,109 --> 00:03:38,760
permutation on<font color="#E5E5E5"> the points that collide</font>

89
00:03:36,139 --> 00:03:40,859
<font color="#E5E5E5">so there are two easy cases here and one</font>

90
00:03:38,760 --> 00:03:43,019
a<font color="#E5E5E5"> little</font><font color="#CCCCCC"> more difficult so the first</font>

91
00:03:40,859 --> 00:03:44,430
<font color="#E5E5E5">easy case is if the point</font><font color="#CCCCCC"> is in set T</font>

92
00:03:43,019 --> 00:03:47,190
then we're<font color="#CCCCCC"> just going to return its</font>

93
00:03:44,430 --> 00:03:49,169
<font color="#CCCCCC">value in the token table the next easy</font>

94
00:03:47,190 --> 00:03:51,859
case is if the<font color="#CCCCCC"> point</font><font color="#E5E5E5"> is not</font><font color="#CCCCCC"> in the set T</font>

95
00:03:49,169 --> 00:03:54,450
and<font color="#CCCCCC"> it's image</font><font color="#E5E5E5"> under the new cipher e</font>

96
00:03:51,859 --> 00:03:57,209
doesn't collide with any of the<font color="#E5E5E5"> images</font>

97
00:03:54,450 --> 00:03:59,518
of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> points in T</font><font color="#CCCCCC"> in that</font><font color="#E5E5E5"> case we're</font>

98
00:03:57,209 --> 00:04:02,130
just<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> return it</font><font color="#CCCCCC"> because there's</font>

99
00:03:59,519 --> 00:04:06,900
no problem in<font color="#E5E5E5"> it no no permittivity is</font>

100
00:04:02,130 --> 00:04:08,250
violated the the third case and the one

101
00:04:06,900 --> 00:04:11,250
that's<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> more complicated is when</font>

102
00:04:08,250 --> 00:04:13,590
<font color="#E5E5E5">you encrypt a point naught and T whose</font>

103
00:04:11,250 --> 00:04:16,349
image collides with the<font color="#E5E5E5"> image of some</font>

104
00:04:13,590 --> 00:04:20,130
point in T and here what we're gonna do

105
00:04:16,349 --> 00:04:23,370
is basically decrypt<font color="#E5E5E5"> to</font><font color="#CCCCCC"> find the point</font>

106
00:04:20,130 --> 00:04:25,770
<font color="#E5E5E5">in T that caused this collision</font><font color="#CCCCCC"> and then</font>

107
00:04:23,370 --> 00:04:30,750
<font color="#E5E5E5">we're gonna rien</font>

108
00:04:25,770 --> 00:04:32,789
we're gonna really<font color="#E5E5E5"> so this is a slightly</font>

109
00:04:30,750 --> 00:04:34,440
reminiscent of cuckoo hashing<font color="#E5E5E5"> if you're</font>

110
00:04:32,789 --> 00:04:43,800
if<font color="#E5E5E5"> you're familiar with that that data</font>

111
00:04:34,440 --> 00:04:45,870
<font color="#E5E5E5">structure so yeah how am i doing so</font><font color="#CCCCCC"> just</font>

112
00:04:43,800 --> 00:04:49,830
<font color="#CCCCCC">some analysis</font><font color="#E5E5E5"> of this of this basic</font>

113
00:04:45,870 --> 00:04:52,979
algorithm so if if this set T is at most

114
00:04:49,830 --> 00:04:55,318
<font color="#E5E5E5">half the size of the domain D the the</font>

115
00:04:52,979 --> 00:04:57,150
zigzag algorithm runs in amortized

116
00:04:55,319 --> 00:04:59,370
constant time over a sequence<font color="#E5E5E5"> of</font>

117
00:04:57,150 --> 00:05:03,150
encryption<font color="#E5E5E5"> and decryption queries except</font>

118
00:04:59,370 --> 00:05:06,750
with<font color="#E5E5E5"> the negligible probability and the</font>

119
00:05:03,150 --> 00:05:09,239
intuition<font color="#CCCCCC"> here is that this this the</font>

120
00:05:06,750 --> 00:05:11,069
sampling<font color="#E5E5E5"> experiment that we're doing can</font>

121
00:05:09,240 --> 00:05:12,509
be<font color="#E5E5E5"> modeled as</font><font color="#CCCCCC"> a kind of</font><font color="#E5E5E5"> sampling without</font>

122
00:05:11,069 --> 00:05:15,780
replacement<font color="#CCCCCC"> experiment from</font>

123
00:05:12,509 --> 00:05:17,819
combinatorics<font color="#CCCCCC"> and once you view the</font>

124
00:05:15,780 --> 00:05:19,169
problem<font color="#E5E5E5"> that way you can use a standard</font>

125
00:05:17,819 --> 00:05:21,180
tail bound on the hyper geometric

126
00:05:19,169 --> 00:05:23,490
<font color="#E5E5E5">distribution to bound the</font><font color="#CCCCCC"> probability of</font>

127
00:05:21,180 --> 00:05:27,750
having<font color="#E5E5E5"> to having to go through</font><font color="#CCCCCC"> this loop</font>

128
00:05:23,490 --> 00:05:29,250
a lot of times and the<font color="#E5E5E5"> last the</font><font color="#CCCCCC"> last</font>

129
00:05:27,750 --> 00:05:30,979
<font color="#E5E5E5">thing I'll say</font><font color="#CCCCCC"> about the domain</font>

130
00:05:29,250 --> 00:05:35,969
completion in<font color="#E5E5E5"> the zigzag setting is that</font>

131
00:05:30,979 --> 00:05:37,710
<font color="#E5E5E5">the zigzag in this setting</font><font color="#CCCCCC"> meets</font><font color="#E5E5E5"> the</font>

132
00:05:35,969 --> 00:05:41,159
strong suit<font color="#CCCCCC"> of random permutation</font>

133
00:05:37,710 --> 00:05:42,930
security goal that we want and<font color="#E5E5E5"> we prove</font>

134
00:05:41,159 --> 00:05:44,880
<font color="#E5E5E5">this via reduction to</font><font color="#CCCCCC"> the underlying</font>

135
00:05:42,930 --> 00:05:46,199
permutations<font color="#CCCCCC"> a</font><font color="#E5E5E5"> and F and this reduction</font>

136
00:05:44,880 --> 00:05:52,979
is actually tight there's no loss in

137
00:05:46,199 --> 00:05:54,750
<font color="#CCCCCC">security so now we will discuss</font><font color="#E5E5E5"> the</font>

138
00:05:52,979 --> 00:05:57,599
<font color="#E5E5E5">domain extension setting in a little</font>

139
00:05:54,750 --> 00:05:59,460
more detail<font color="#E5E5E5"> again the point of this</font>

140
00:05:57,599 --> 00:06:02,610
<font color="#E5E5E5">domain extension setting is that</font><font color="#CCCCCC"> we want</font>

141
00:05:59,460 --> 00:06:05,400
<font color="#E5E5E5">to be able to encrypt points in the</font><font color="#CCCCCC"> old</font>

142
00:06:02,610 --> 00:06:08,490
set that existed<font color="#CCCCCC"> before</font><font color="#E5E5E5"> the extension</font>

143
00:06:05,400 --> 00:06:10,469
<font color="#E5E5E5">and the points in the new set in the</font>

144
00:06:08,490 --> 00:06:12,300
<font color="#E5E5E5">extension set and we want to be able to</font>

145
00:06:10,469 --> 00:06:14,280
do this while<font color="#E5E5E5"> maintaining the</font><font color="#CCCCCC"> ability to</font>

146
00:06:12,300 --> 00:06:16,500
decrypt<font color="#E5E5E5"> the points that existed in</font><font color="#CCCCCC"> D</font>

147
00:06:14,280 --> 00:06:18,359
<font color="#CCCCCC">before the update and we want to do this</font>

148
00:06:16,500 --> 00:06:22,919
<font color="#CCCCCC">all while preserving a permittivity over</font>

149
00:06:18,360 --> 00:06:24,780
the whole set<font color="#CCCCCC"> M so again</font><font color="#E5E5E5"> as before</font><font color="#CCCCCC"> we're</font>

150
00:06:22,919 --> 00:06:28,049
<font color="#E5E5E5">going to call our old permutation</font><font color="#CCCCCC"> F sub</font>

151
00:06:24,780 --> 00:06:30,299
K star and the new domain<font color="#E5E5E5"> we're going to</font>

152
00:06:28,050 --> 00:06:35,010
call<font color="#E5E5E5"> M which</font><font color="#CCCCCC"> I've conveniently put</font><font color="#E5E5E5"> in</font>

153
00:06:30,300 --> 00:06:38,270
blue and just just remember that D is a

154
00:06:35,010 --> 00:06:41,360
<font color="#CCCCCC">subset of M so M contains D</font>

155
00:06:38,270 --> 00:06:44,299
so in<font color="#E5E5E5"> the setting we</font><font color="#CCCCCC"> need to build an</font>

156
00:06:41,360 --> 00:06:46,310
<font color="#CCCCCC">FPE</font><font color="#E5E5E5"> over the hole set</font><font color="#CCCCCC"> em with the same</font>

157
00:06:44,300 --> 00:06:49,940
kind of preservation property that we

158
00:06:46,310 --> 00:06:54,830
had before<font color="#E5E5E5"> in particular that the image</font>

159
00:06:49,940 --> 00:07:00,289
<font color="#E5E5E5">of the points and T is the same under Z</font>

160
00:06:54,830 --> 00:07:01,789
<font color="#E5E5E5">Z and under the old cipher F so here</font>

161
00:07:00,289 --> 00:07:02,930
we're<font color="#E5E5E5"> not going to refer to a token</font>

162
00:07:01,789 --> 00:07:05,900
table we're just gonna be a<font color="#CCCCCC"> little bit</font>

163
00:07:02,930 --> 00:07:08,870
more<font color="#E5E5E5"> abstract</font><font color="#CCCCCC"> so we have the old</font><font color="#E5E5E5"> cipher</font>

164
00:07:05,900 --> 00:07:11,539
<font color="#E5E5E5">F sub K star over the set D and we have</font>

165
00:07:08,870 --> 00:07:14,449
the<font color="#E5E5E5"> the new cipher a sub K over</font><font color="#CCCCCC"> the</font>

166
00:07:11,539 --> 00:07:16,340
whole set<font color="#E5E5E5"> M and it's not that hard</font><font color="#CCCCCC"> to</font>

167
00:07:14,449 --> 00:07:19,220
see that<font color="#E5E5E5"> zigzag actually works perfectly</font>

168
00:07:16,340 --> 00:07:22,580
fine for<font color="#CCCCCC"> domain extension so the two</font>

169
00:07:19,220 --> 00:07:24,080
easy cases stay the same and the hard

170
00:07:22,580 --> 00:07:28,880
case where there's a collision works the

171
00:07:24,080 --> 00:07:30,020
exact<font color="#E5E5E5"> same way as</font><font color="#CCCCCC"> well which it's</font><font color="#E5E5E5"> not</font>

172
00:07:28,880 --> 00:07:32,180
<font color="#E5E5E5">all that</font><font color="#CCCCCC"> surprising because we</font><font color="#E5E5E5"> never</font>

173
00:07:30,020 --> 00:07:34,400
actually<font color="#E5E5E5"> needed that</font><font color="#CCCCCC"> the sets</font><font color="#E5E5E5"> were the</font>

174
00:07:32,180 --> 00:07:36,919
same in the indian zigzag for domain

175
00:07:34,400 --> 00:07:38,948
completion<font color="#CCCCCC"> the question here though is</font>

176
00:07:36,919 --> 00:07:41,359
what security<font color="#E5E5E5"> this achieves and</font>

177
00:07:38,949 --> 00:07:44,630
unfortunately in the paper we proved

178
00:07:41,360 --> 00:07:46,490
that<font color="#E5E5E5"> s PRP security is actually</font>

179
00:07:44,630 --> 00:07:49,759
impossible<font color="#E5E5E5"> for any domain extended</font>

180
00:07:46,490 --> 00:07:52,389
cipher<font color="#E5E5E5"> the cipher</font><font color="#CCCCCC"> that meets this</font>

181
00:07:49,759 --> 00:07:54,440
functionality goal and we<font color="#CCCCCC"> prove this</font>

182
00:07:52,389 --> 00:07:56,900
<font color="#E5E5E5">with the distinguisher that's actually</font>

183
00:07:54,440 --> 00:07:59,330
pretty simple<font color="#E5E5E5"> all</font><font color="#CCCCCC"> it really</font><font color="#E5E5E5"> has to do is</font>

184
00:07:56,900 --> 00:08:02,570
take the points of<font color="#E5E5E5"> T and pick some</font>

185
00:07:59,330 --> 00:08:05,479
arbitrarily and just query them over and

186
00:08:02,570 --> 00:08:08,690
over<font color="#CCCCCC"> again and it sees whether any of</font>

187
00:08:05,479 --> 00:08:11,389
the<font color="#CCCCCC"> images</font><font color="#E5E5E5"> of the points and that</font><font color="#CCCCCC"> it's</font>

188
00:08:08,690 --> 00:08:13,610
querying fall outside of<font color="#E5E5E5"> D and if it</font>

189
00:08:11,389 --> 00:08:15,139
does if they do then we the

190
00:08:13,610 --> 00:08:17,360
distinguisher returns<font color="#E5E5E5"> that it's in the</font>

191
00:08:15,139 --> 00:08:20,020
ideal world<font color="#E5E5E5"> otherwise it guesses</font><font color="#CCCCCC"> that</font>

192
00:08:17,360 --> 00:08:20,020
it's in the real world

193
00:08:21,789 --> 00:08:27,979
so the key intuition here<font color="#CCCCCC"> is that for a</font>

194
00:08:25,729 --> 00:08:30,169
random<font color="#E5E5E5"> permutation</font><font color="#CCCCCC"> it's very unlikely</font>

195
00:08:27,979 --> 00:08:33,049
<font color="#E5E5E5">for all of the images of all the points</font>

196
00:08:30,169 --> 00:08:35,990
<font color="#E5E5E5">in that aquarii to fall in</font><font color="#CCCCCC"> D but for a</font>

197
00:08:33,049 --> 00:08:37,549
domain<font color="#CCCCCC"> extended cipher</font><font color="#E5E5E5"> this has to</font>

198
00:08:35,990 --> 00:08:39,260
happen<font color="#CCCCCC"> this happens basically</font><font color="#E5E5E5"> with</font>

199
00:08:37,549 --> 00:08:43,098
probability<font color="#CCCCCC"> one because</font><font color="#E5E5E5"> of the</font>

200
00:08:39,260 --> 00:08:44,569
functionality of the cipher<font color="#E5E5E5"> and it the</font>

201
00:08:43,099 --> 00:08:46,279
<font color="#E5E5E5">probability</font><font color="#CCCCCC"> that it gets fooled is this</font>

202
00:08:44,570 --> 00:08:49,720
<font color="#CCCCCC">nasty kind</font><font color="#E5E5E5"> of like quotient of</font>

203
00:08:46,279 --> 00:08:51,540
factorials on the upper right<font color="#E5E5E5"> so this</font>

204
00:08:49,720 --> 00:08:54,579
is a pretty<font color="#CCCCCC"> fast-growing</font><font color="#E5E5E5"> function</font>

205
00:08:51,540 --> 00:08:58,959
especially<font color="#CCCCCC"> if the</font><font color="#E5E5E5"> SEM is much larger</font>

206
00:08:54,579 --> 00:09:01,149
<font color="#E5E5E5">than D so</font><font color="#CCCCCC"> the question here becomes then</font>

207
00:08:58,959 --> 00:09:04,138
whether<font color="#E5E5E5"> we can prove</font><font color="#CCCCCC"> kind of any</font>

208
00:09:01,149 --> 00:09:08,670
meaningful security about this setting

209
00:09:04,139 --> 00:09:11,259
and we're gonna do this<font color="#CCCCCC"> by weakening the</font>

210
00:09:08,670 --> 00:09:13,060
security goal<font color="#E5E5E5"> a</font><font color="#CCCCCC"> little bit and we're</font>

211
00:09:11,259 --> 00:09:16,600
gonna target<font color="#E5E5E5"> indistinguishability from a</font>

212
00:09:13,060 --> 00:09:18,459
slightly different<font color="#E5E5E5"> ideal</font><font color="#CCCCCC"> object we call</font>

213
00:09:16,600 --> 00:09:21,670
<font color="#E5E5E5">this definition strong extended</font>

214
00:09:18,459 --> 00:09:24,550
pseudo-random permutation security so

215
00:09:21,670 --> 00:09:26,170
intuitively a<font color="#CCCCCC"> permutation is an se PRP</font>

216
00:09:24,550 --> 00:09:28,660
if it's<font color="#E5E5E5"> indistinguishable from a</font>

217
00:09:26,170 --> 00:09:33,089
permutation<font color="#E5E5E5"> sampled uniformly but</font>

218
00:09:28,660 --> 00:09:36,129
subject to<font color="#CCCCCC"> our functionality</font><font color="#E5E5E5"> requirement</font>

219
00:09:33,089 --> 00:09:37,569
so the first theorem that we proved and

220
00:09:36,129 --> 00:09:40,600
it's a<font color="#E5E5E5"> pretty simple one is basically</font>

221
00:09:37,569 --> 00:09:43,719
<font color="#E5E5E5">that zigzag meets setr</font><font color="#CCCCCC"> P security in the</font>

222
00:09:40,600 --> 00:09:45,850
domain extension setting the next<font color="#CCCCCC"> one</font>

223
00:09:43,720 --> 00:09:51,610
<font color="#E5E5E5">which was a little bit tougher to prove</font>

224
00:09:45,850 --> 00:09:53,439
was that<font color="#E5E5E5"> as any se PRP cipher</font><font color="#CCCCCC"> basically</font>

225
00:09:51,610 --> 00:09:55,990
gives any adversary at most a factor of

226
00:09:53,439 --> 00:10:00,160
<font color="#CCCCCC">two advantage in kind</font><font color="#E5E5E5"> of message</font>

227
00:09:55,990 --> 00:10:03,809
recovery games so we've proved this by

228
00:10:00,160 --> 00:10:07,209
taking<font color="#E5E5E5"> a message recovery notion from</font>

229
00:10:03,809 --> 00:10:09,850
<font color="#E5E5E5">from bellari</font><font color="#CCCCCC"> at all's prior work on</font><font color="#E5E5E5"> FPE</font>

230
00:10:07,209 --> 00:10:11,949
and we basically generalized it to

231
00:10:09,850 --> 00:10:16,120
<font color="#CCCCCC">accommodate the domain extension setting</font>

232
00:10:11,949 --> 00:10:19,628
<font color="#E5E5E5">and once we did this the only in the</font>

233
00:10:16,120 --> 00:10:21,850
experiment where the where<font color="#CCCCCC"> the</font>

234
00:10:19,629 --> 00:10:23,290
<font color="#CCCCCC">Challenger</font><font color="#E5E5E5"> picks a message a hidden</font>

235
00:10:21,850 --> 00:10:25,269
message and gives the ciphertext<font color="#CCCCCC"> to the</font>

236
00:10:23,290 --> 00:10:27,160
<font color="#E5E5E5">adversary and</font><font color="#CCCCCC"> the adversary</font><font color="#E5E5E5"> has to kind</font>

237
00:10:25,269 --> 00:10:29,050
<font color="#CCCCCC">of guess the</font><font color="#E5E5E5"> message by making</font>

238
00:10:27,160 --> 00:10:30,459
encryption queries the<font color="#E5E5E5"> only thing that's</font>

239
00:10:29,050 --> 00:10:33,969
really<font color="#E5E5E5"> hidden from the adversary here is</font>

240
00:10:30,459 --> 00:10:35,559
membership in<font color="#CCCCCC"> T so you like this is</font><font color="#E5E5E5"> like</font>

241
00:10:33,970 --> 00:10:37,509
one hidden bit of information<font color="#CCCCCC"> you have</font>

242
00:10:35,559 --> 00:10:38,889
to<font color="#E5E5E5"> make up like like you have to make</font>

243
00:10:37,509 --> 00:10:43,029
twice<font color="#E5E5E5"> as</font><font color="#CCCCCC"> many</font><font color="#E5E5E5"> queries to make this out</font>

244
00:10:38,889 --> 00:10:45,309
basically so in this paper<font color="#E5E5E5"> there we made</font>

245
00:10:43,029 --> 00:10:48,490
some other we did a few<font color="#E5E5E5"> other analyses</font>

246
00:10:45,309 --> 00:10:52,480
of<font color="#E5E5E5"> the of the problem that we were that</font>

247
00:10:48,490 --> 00:10:55,629
<font color="#E5E5E5">we were considering the first is that if</font>

248
00:10:52,480 --> 00:10:56,740
you<font color="#E5E5E5"> rather than weakening your security</font>

249
00:10:55,629 --> 00:10:58,540
goal if<font color="#E5E5E5"> you weaken the amount of</font>

250
00:10:56,740 --> 00:11:01,480
<font color="#CCCCCC">knowledge the adversary has</font><font color="#E5E5E5"> about the</font>

251
00:10:58,540 --> 00:11:03,260
setting<font color="#CCCCCC"> you can modify</font><font color="#E5E5E5"> this exact</font>

252
00:11:01,480 --> 00:11:06,140
construction in a way that

253
00:11:03,260 --> 00:11:08,060
actually achieves<font color="#CCCCCC"> SP RP security and</font>

254
00:11:06,140 --> 00:11:10,340
unfortunately<font color="#E5E5E5"> I won't have time to go</font>

255
00:11:08,060 --> 00:11:13,849
into that<font color="#CCCCCC"> in this talk</font><font color="#E5E5E5"> but you can see</font>

256
00:11:10,340 --> 00:11:15,170
the paper<font color="#E5E5E5"> for more details another thing</font>

257
00:11:13,850 --> 00:11:18,020
that's kind of worrisome about<font color="#E5E5E5"> the</font>

258
00:11:15,170 --> 00:11:21,349
<font color="#E5E5E5">zigzag is that it has variable</font><font color="#CCCCCC"> timing</font>

259
00:11:18,020 --> 00:11:23,300
for different inputs<font color="#E5E5E5"> which in general is</font>

260
00:11:21,350 --> 00:11:25,430
<font color="#CCCCCC">a pretty</font><font color="#E5E5E5"> bad property for a</font>

261
00:11:23,300 --> 00:11:27,520
cryptographic algorithm to have like

262
00:11:25,430 --> 00:11:29,630
variable<font color="#CCCCCC"> timing for 4</font><font color="#E5E5E5"> different inputs</font>

263
00:11:27,520 --> 00:11:31,640
<font color="#CCCCCC">but we</font><font color="#E5E5E5"> proved in the paper that the</font>

264
00:11:29,630 --> 00:11:33,560
<font color="#CCCCCC">timing side-channel here basically</font><font color="#E5E5E5"> only</font>

265
00:11:31,640 --> 00:11:35,870
leaks whether the point<font color="#E5E5E5"> is in</font><font color="#CCCCCC"> T or not</font>

266
00:11:33,560 --> 00:11:37,099
<font color="#E5E5E5">so since in the strongest setting we</font>

267
00:11:35,870 --> 00:11:38,990
<font color="#CCCCCC">assume that the adversary has this</font>

268
00:11:37,100 --> 00:11:40,040
anyway this isn't<font color="#E5E5E5"> this is pretty young</font>

269
00:11:38,990 --> 00:11:43,520
<font color="#CCCCCC">inconsequential</font>

270
00:11:40,040 --> 00:11:45,849
and an anonymous<font color="#E5E5E5"> reviewer</font><font color="#CCCCCC"> gave us</font><font color="#E5E5E5"> an a</font>

271
00:11:43,520 --> 00:11:47,930
kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> an alternate construction of</font>

272
00:11:45,850 --> 00:11:50,480
achieving domain completion<font color="#E5E5E5"> and</font>

273
00:11:47,930 --> 00:11:52,310
extension via a construction<font color="#CCCCCC"> that we</font>

274
00:11:50,480 --> 00:11:55,700
<font color="#E5E5E5">analyzed in the paper and we call rank</font>

275
00:11:52,310 --> 00:11:59,089
<font color="#CCCCCC">in cipher unranked</font><font color="#E5E5E5"> so the the advantage</font>

276
00:11:55,700 --> 00:12:01,160
<font color="#CCCCCC">of</font><font color="#E5E5E5"> this alternate construction is</font><font color="#CCCCCC"> that</font>

277
00:11:59,090 --> 00:12:05,060
unlike the<font color="#E5E5E5"> zigzag it actually has fast</font>

278
00:12:01,160 --> 00:12:09,890
worst-case performance but the zigzag

279
00:12:05,060 --> 00:12:12,109
only runs in the<font color="#E5E5E5"> only</font><font color="#CCCCCC"> hat is that is to</font>

280
00:12:09,890 --> 00:12:13,550
say the zigzag only has bad run time

281
00:12:12,110 --> 00:12:15,920
with vegetable probability so I don't

282
00:12:13,550 --> 00:12:18,260
see<font color="#E5E5E5"> this as a huge advantage and the</font>

283
00:12:15,920 --> 00:12:21,650
disadvantage is<font color="#E5E5E5"> that you have to do a</font>

284
00:12:18,260 --> 00:12:22,910
lot of<font color="#E5E5E5"> pre-processing and build a kind</font>

285
00:12:21,650 --> 00:12:25,160
<font color="#E5E5E5">of a data structure that's specially</font>

286
00:12:22,910 --> 00:12:26,900
made for this setting<font color="#CCCCCC"> so the storage</font>

287
00:12:25,160 --> 00:12:29,209
<font color="#E5E5E5">overhead is little high it's on the</font>

288
00:12:26,900 --> 00:12:31,010
order<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the size of the set T and</font>

289
00:12:29,210 --> 00:12:32,870
because<font color="#CCCCCC"> this data</font><font color="#E5E5E5"> structure is accessed</font>

290
00:12:31,010 --> 00:12:34,850
in kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> like a point dependent way</font>

291
00:12:32,870 --> 00:12:38,570
that's more granular than<font color="#CCCCCC"> the site</font>

292
00:12:34,850 --> 00:12:40,490
<font color="#E5E5E5">channel you get from timing</font><font color="#CCCCCC"> we we</font><font color="#E5E5E5"> don't</font>

293
00:12:38,570 --> 00:12:42,950
<font color="#E5E5E5">have like a proof of this what we</font>

294
00:12:40,490 --> 00:12:44,870
<font color="#CCCCCC">conjecture that</font><font color="#E5E5E5"> this would lead</font><font color="#CCCCCC"> to like</font>

295
00:12:42,950 --> 00:12:48,710
memory access<font color="#E5E5E5"> pattern side channels in</font>

296
00:12:44,870 --> 00:12:50,540
practice so in<font color="#E5E5E5"> summary in this in this</font>

297
00:12:48,710 --> 00:12:54,110
<font color="#E5E5E5">paper</font><font color="#CCCCCC"> we introduced kind of the idea of</font>

298
00:12:50,540 --> 00:12:58,760
backwards compatible crypto<font color="#E5E5E5"> which i</font>

299
00:12:54,110 --> 00:13:00,050
think<font color="#E5E5E5"> is important because the the</font>

300
00:12:58,760 --> 00:13:01,760
inflexibility of<font color="#E5E5E5"> cryptographic</font>

301
00:13:00,050 --> 00:13:04,459
primitives has been pointed out as<font color="#E5E5E5"> kind</font>

302
00:13:01,760 --> 00:13:06,800
<font color="#CCCCCC">of a serious practical problem before if</font>

303
00:13:04,460 --> 00:13:09,650
you if any of you were<font color="#E5E5E5"> at crypto Brian</font>

304
00:13:06,800 --> 00:13:11,660
<font color="#CCCCCC">sniffing gave a really</font><font color="#E5E5E5"> nice talk</font><font color="#CCCCCC"> where</font>

305
00:13:09,650 --> 00:13:14,060
he pointed<font color="#E5E5E5"> out</font><font color="#CCCCCC"> that like the models that</font>

306
00:13:11,660 --> 00:13:16,009
cryptographers use are very<font color="#CCCCCC"> inflexible</font>

307
00:13:14,060 --> 00:13:18,738
and don't always line up with

308
00:13:16,009 --> 00:13:21,109
the practical<font color="#CCCCCC"> considerations like key</font>

309
00:13:18,739 --> 00:13:23,299
rotation for example is one that<font color="#CCCCCC"> he</font>

310
00:13:21,109 --> 00:13:25,939
<font color="#E5E5E5">specifically highlighted as a problem in</font>

311
00:13:23,299 --> 00:13:28,608
practice<font color="#CCCCCC"> that's not really modeled in</font>

312
00:13:25,939 --> 00:13:29,748
academic work<font color="#E5E5E5"> and I</font><font color="#CCCCCC"> think this paper is</font>

313
00:13:28,609 --> 00:13:31,489
cool because we kind of like make

314
00:13:29,749 --> 00:13:33,199
progress towards building<font color="#E5E5E5"> more flexible</font>

315
00:13:31,489 --> 00:13:36,619
<font color="#E5E5E5">cryptographic primitives</font><font color="#CCCCCC"> that can kind</font>

316
00:13:33,199 --> 00:13:39,498
of be changed<font color="#E5E5E5"> after they're deployed and</font>

317
00:13:36,619 --> 00:13:41,509
<font color="#CCCCCC">we give a generic</font><font color="#E5E5E5"> algorithm that solves</font>

318
00:13:39,499 --> 00:13:44,869
the<font color="#CCCCCC"> problem of</font><font color="#E5E5E5"> backwards-compatible FPE</font>

319
00:13:41,509 --> 00:13:47,470
<font color="#CCCCCC">and we show how it solves the problem of</font>

320
00:13:44,869 --> 00:13:49,699
domain completion<font color="#E5E5E5"> and domain extension</font>

321
00:13:47,470 --> 00:13:51,379
so the techniques that we<font color="#E5E5E5"> develop in</font>

322
00:13:49,699 --> 00:13:53,238
this<font color="#E5E5E5"> paper are efficient</font><font color="#CCCCCC"> they're</font>

323
00:13:51,379 --> 00:13:55,850
provably secure<font color="#E5E5E5"> and they solve real</font>

324
00:13:53,239 --> 00:14:08,299
problems for practitioners thanks for

325
00:13:55,850 --> 00:14:11,359
<font color="#E5E5E5">listening any questions so you say that</font>

326
00:14:08,299 --> 00:14:13,100
<font color="#CCCCCC">the construction is efficient but as far</font>

327
00:14:11,359 --> 00:14:15,410
<font color="#CCCCCC">as I understand with a</font><font color="#E5E5E5"> nonzero</font>

328
00:14:13,100 --> 00:14:18,799
<font color="#CCCCCC">probability your Y loop</font><font color="#E5E5E5"> never terminates</font>

329
00:14:15,410 --> 00:14:20,719
so the average complexity<font color="#E5E5E5"> is infinite so</font>

330
00:14:18,799 --> 00:14:29,989
can you have a construction<font color="#E5E5E5"> with a good</font>

331
00:14:20,720 --> 00:14:31,489
average<font color="#E5E5E5"> complexity it does terminate if</font>

332
00:14:29,989 --> 00:14:34,100
the old scheme is<font color="#CCCCCC"> the tokenization</font>

333
00:14:31,489 --> 00:14:36,529
scheme as a fixed point<font color="#E5E5E5"> then if you</font>

334
00:14:34,100 --> 00:14:38,959
decrypt<font color="#E5E5E5"> you you continue to obtain this</font>

335
00:14:36,529 --> 00:14:47,660
fixed point<font color="#E5E5E5"> and</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> year so while you loop</font>

336
00:14:38,959 --> 00:14:49,008
never terminates<font color="#CCCCCC"> right I have to think</font>

337
00:14:47,660 --> 00:14:52,480
about it<font color="#E5E5E5"> maybe we can take</font><font color="#CCCCCC"> it offline</font>

338
00:14:49,009 --> 00:14:52,480
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> possible</font>

