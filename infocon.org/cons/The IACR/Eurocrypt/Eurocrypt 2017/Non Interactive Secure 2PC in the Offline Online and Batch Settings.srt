1
00:00:00,030 --> 00:00:07,859
okay well thanks yes we're<font color="#E5E5E5"> okay so yeah</font>

2
00:00:04,290 --> 00:00:10,980
this<font color="#E5E5E5"> is a work on doing batch</font><font color="#CCCCCC"> secure</font>

3
00:00:07,859 --> 00:00:12,360
<font color="#CCCCCC">two-party computation</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> non</font>

4
00:00:10,980 --> 00:00:15,059
interactive which means there's two

5
00:00:12,360 --> 00:00:16,910
<font color="#CCCCCC">messages</font><font color="#E5E5E5"> and joint work with</font><font color="#CCCCCC"> my</font>

6
00:00:15,059 --> 00:00:20,220
<font color="#CCCCCC">croissant</font>

7
00:00:16,910 --> 00:00:21,840
so I don't actually know why I made this

8
00:00:20,220 --> 00:00:28,109
slide<font color="#E5E5E5"> this is secure two-party</font>

9
00:00:21,840 --> 00:00:29,820
computation so but we<font color="#E5E5E5"> are</font><font color="#CCCCCC"> interested in</font>

10
00:00:28,109 --> 00:00:34,440
secure two-party computation where

11
00:00:29,820 --> 00:00:36,870
there's only two messages<font color="#CCCCCC"> exchange</font><font color="#E5E5E5"> you</font>

12
00:00:34,440 --> 00:00:39,120
know the one party sends a message<font color="#CCCCCC"> the</font>

13
00:00:36,870 --> 00:00:40,620
second party responds<font color="#E5E5E5"> and then the first</font>

14
00:00:39,120 --> 00:00:43,489
party essentially<font color="#E5E5E5"> can compute the output</font>

15
00:00:40,620 --> 00:00:45,510
<font color="#E5E5E5">from that</font><font color="#CCCCCC"> okay so that's</font><font color="#E5E5E5"> sort of our</font>

16
00:00:43,489 --> 00:00:48,930
this is<font color="#E5E5E5"> the sort of protocol we're</font>

17
00:00:45,510 --> 00:00:52,610
interested<font color="#CCCCCC"> in and you know there's</font>

18
00:00:48,930 --> 00:00:55,469
motivations<font color="#E5E5E5"> for that if you are</font>

19
00:00:52,610 --> 00:00:57,989
computing or communicating over<font color="#CCCCCC"> a high</font>

20
00:00:55,469 --> 00:00:59,730
latency<font color="#E5E5E5"> network you rather to minimize</font>

21
00:00:57,989 --> 00:01:03,449
the number of round trips<font color="#E5E5E5"> that you have</font>

22
00:00:59,730 --> 00:01:05,789
to do and also<font color="#E5E5E5"> there may be interesting</font>

23
00:01:03,449 --> 00:01:08,490
somewhat unconventional ways you<font color="#E5E5E5"> you may</font>

24
00:01:05,790 --> 00:01:12,090
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to communicate such as through</font>

25
00:01:08,490 --> 00:01:14,039
email or<font color="#E5E5E5"> a bulletin board so these are</font>

26
00:01:12,090 --> 00:01:15,720
<font color="#E5E5E5">sort of scenarios</font><font color="#CCCCCC"> where the both both</font>

27
00:01:14,040 --> 00:01:17,939
parties don't<font color="#E5E5E5"> have to be</font><font color="#CCCCCC"> necessarily be</font>

28
00:01:15,720 --> 00:01:19,619
<font color="#E5E5E5">online at the</font><font color="#CCCCCC"> same time</font><font color="#E5E5E5"> one party can</font>

29
00:01:17,939 --> 00:01:22,289
post their first message the second

30
00:01:19,619 --> 00:01:25,650
party can<font color="#CCCCCC"> come online</font><font color="#E5E5E5"> a later on and</font>

31
00:01:22,290 --> 00:01:28,890
sort<font color="#E5E5E5"> of post the second message and and</font>

32
00:01:25,650 --> 00:01:30,900
then sort of you you get you get<font color="#CCCCCC"> the</font>

33
00:01:28,890 --> 00:01:32,460
output<font color="#CCCCCC"> the first party gets the output</font>

34
00:01:30,900 --> 00:01:33,540
so you you<font color="#E5E5E5"> don't you</font><font color="#CCCCCC"> don't have</font><font color="#E5E5E5"> to do</font>

35
00:01:32,460 --> 00:01:35,429
this many<font color="#CCCCCC"> many times</font>

36
00:01:33,540 --> 00:01:37,350
<font color="#CCCCCC">so you're minimizing how much you have</font>

37
00:01:35,430 --> 00:01:39,119
to<font color="#E5E5E5"> do this you know whether it's an</font>

38
00:01:37,350 --> 00:01:41,339
attachment to an email<font color="#E5E5E5"> or bulletin board</font>

39
00:01:39,119 --> 00:01:45,030
and so on so there's motivations for<font color="#E5E5E5"> for</font>

40
00:01:41,340 --> 00:01:46,579
doing<font color="#CCCCCC"> that and there's</font><font color="#E5E5E5"> lots of work that</font>

41
00:01:45,030 --> 00:01:50,880
actually<font color="#CCCCCC"> you know studies this</font>

42
00:01:46,579 --> 00:01:53,399
theoretical constructions and so on but

43
00:01:50,880 --> 00:01:55,798
<font color="#E5E5E5">it also we actually know</font><font color="#CCCCCC"> that you can</font>

44
00:01:53,399 --> 00:01:59,009
also achieve this<font color="#E5E5E5"> with sort</font><font color="#CCCCCC"> of very good</font>

45
00:01:55,799 --> 00:02:01,170
concrete efficiency that<font color="#E5E5E5"> is fairly calm</font>

46
00:01:59,009 --> 00:02:03,290
comparable with sort<font color="#E5E5E5"> of the best secure</font>

47
00:02:01,170 --> 00:02:06,180
to party computation protocols we know

48
00:02:03,290 --> 00:02:09,840
well<font color="#E5E5E5"> the best to party competitions we</font>

49
00:02:06,180 --> 00:02:12,260
know kind of keeps changing right but as

50
00:02:09,840 --> 00:02:14,810
you saw in the last talk but sort of

51
00:02:12,260 --> 00:02:18,470
very very<font color="#E5E5E5"> close right in terms of the</font>

52
00:02:14,810 --> 00:02:20,180
<font color="#CCCCCC">efficiency we get so which is good so if</font>

53
00:02:18,470 --> 00:02:22,400
you can get the best minimize around

54
00:02:20,180 --> 00:02:25,849
complexity and<font color="#E5E5E5"> sort of have very good</font>

55
00:02:22,400 --> 00:02:29,720
concrete efficiency<font color="#E5E5E5"> so we we would do it</font>

56
00:02:25,849 --> 00:02:32,510
<font color="#E5E5E5">okay what</font><font color="#CCCCCC"> is so another aspect to secure</font>

57
00:02:29,720 --> 00:02:34,459
<font color="#CCCCCC">two-party computation is sort</font><font color="#E5E5E5"> of when</font>

58
00:02:32,510 --> 00:02:36,410
you<font color="#E5E5E5"> want to run many</font><font color="#CCCCCC"> different instances</font>

59
00:02:34,459 --> 00:02:38,239
<font color="#E5E5E5">of security party computation</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> using</font>

60
00:02:36,410 --> 00:02:42,950
different<font color="#CCCCCC"> inputs</font><font color="#E5E5E5"> so that's sometimes</font>

61
00:02:38,239 --> 00:02:46,160
called<font color="#E5E5E5"> batch secure computation and here</font>

62
00:02:42,950 --> 00:02:48,980
the goals are to<font color="#E5E5E5"> either get better</font>

63
00:02:46,160 --> 00:02:52,430
amortized efficiency so for<font color="#CCCCCC"> example the</font>

64
00:02:48,980 --> 00:02:55,670
<font color="#E5E5E5">the</font><font color="#CCCCCC"> divor the several</font><font color="#E5E5E5"> recent work show</font>

65
00:02:52,430 --> 00:02:57,650
that you can get a log n factor of

66
00:02:55,670 --> 00:02:59,540
improvement<font color="#E5E5E5"> overall improvement in</font>

67
00:02:57,650 --> 00:03:03,349
everything communication computation<font color="#E5E5E5"> so</font>

68
00:02:59,540 --> 00:03:05,989
on<font color="#CCCCCC"> where n is the</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> of executions</font>

69
00:03:03,349 --> 00:03:08,950
that<font color="#E5E5E5"> you you want</font><font color="#CCCCCC"> to have and</font><font color="#E5E5E5"> concretely</font>

70
00:03:05,989 --> 00:03:13,150
this<font color="#E5E5E5"> even works out better if you've</font>

71
00:03:08,950 --> 00:03:16,369
been to some<font color="#E5E5E5"> of the talks in the</font>

72
00:03:13,150 --> 00:03:18,560
previous days<font color="#E5E5E5"> so it's really good</font>

73
00:03:16,370 --> 00:03:21,739
concrete gains when you're running many

74
00:03:18,560 --> 00:03:23,630
instances of secure computation<font color="#E5E5E5"> and it</font>

75
00:03:21,739 --> 00:03:25,340
also has a nice<font color="#E5E5E5"> feature that you can do</font>

76
00:03:23,630 --> 00:03:27,230
bulk of the computation in our offline

77
00:03:25,340 --> 00:03:29,450
<font color="#E5E5E5">phase where you don't know the inputs to</font>

78
00:03:27,230 --> 00:03:32,090
<font color="#CCCCCC">the computation and then in</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> online</font>

79
00:03:29,450 --> 00:03:33,530
phase you<font color="#E5E5E5"> are you have a very fast on</font>

80
00:03:32,090 --> 00:03:34,940
for<font color="#E5E5E5"> online phase that is sort of not</font>

81
00:03:33,530 --> 00:03:36,590
proportional to the size<font color="#E5E5E5"> of the</font>

82
00:03:34,940 --> 00:03:40,609
computation or the circuit you want<font color="#E5E5E5"> to</font>

83
00:03:36,590 --> 00:03:42,859
compute so we also know how<font color="#E5E5E5"> to do this</font>

84
00:03:40,609 --> 00:03:45,980
but<font color="#E5E5E5"> sort of the solutions we know are</font>

85
00:03:42,859 --> 00:03:48,099
required<font color="#CCCCCC"> multiple rounds so so they are</font>

86
00:03:45,980 --> 00:03:50,690
not<font color="#E5E5E5"> non interactive so this stuff</font><font color="#CCCCCC"> that</font>

87
00:03:48,099 --> 00:03:52,578
<font color="#E5E5E5">so what we</font><font color="#CCCCCC"> were hoping for in this work</font>

88
00:03:50,690 --> 00:03:54,639
was that<font color="#E5E5E5"> can we get the best of both</font>

89
00:03:52,579 --> 00:03:57,530
words<font color="#E5E5E5"> you want to do many secure</font>

90
00:03:54,639 --> 00:03:59,239
executions of you<font color="#E5E5E5"> to party computation I</font>

91
00:03:57,530 --> 00:04:00,440
mean using<font color="#E5E5E5"> different inputs but we</font>

92
00:03:59,239 --> 00:04:02,269
really want to<font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that we</font>

93
00:04:00,440 --> 00:04:04,340
<font color="#CCCCCC">actually only have two</font><font color="#E5E5E5"> messages sent and</font>

94
00:04:02,269 --> 00:04:06,260
<font color="#E5E5E5">received and we get the same concrete</font>

95
00:04:04,340 --> 00:04:09,620
<font color="#CCCCCC">sort</font><font color="#E5E5E5"> of gains that we have for batch</font>

96
00:04:06,260 --> 00:04:11,660
execution and<font color="#CCCCCC"> non-interactive to PC</font><font color="#E5E5E5"> so</font>

97
00:04:09,620 --> 00:04:12,829
that's sort<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> goal</font><font color="#E5E5E5"> here we want to</font>

98
00:04:11,660 --> 00:04:14,840
get the<font color="#E5E5E5"> best of both worlds</font>

99
00:04:12,829 --> 00:04:16,728
and I wanted<font color="#E5E5E5"> to point out is that you</font>

100
00:04:14,840 --> 00:04:18,349
don't actually<font color="#E5E5E5"> have to run all those</font>

101
00:04:16,728 --> 00:04:21,289
instances<font color="#E5E5E5"> at the same time you may not</font>

102
00:04:18,349 --> 00:04:23,510
<font color="#E5E5E5">have the inputs for them ready so</font><font color="#CCCCCC"> it's</font>

103
00:04:21,289 --> 00:04:25,610
<font color="#E5E5E5">and</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and that's fine so for example</font>

104
00:04:23,510 --> 00:04:28,129
you if you're<font color="#CCCCCC"> thinking of it in a</font>

105
00:04:25,610 --> 00:04:31,280
<font color="#E5E5E5">online I'll find that face you can sort</font>

106
00:04:28,129 --> 00:04:33,500
of do the offline<font color="#E5E5E5"> face at one point and</font>

107
00:04:31,280 --> 00:04:38,270
but then you want<font color="#E5E5E5"> all the online faces</font>

108
00:04:33,500 --> 00:04:39,650
to be<font color="#CCCCCC"> to two messages whenever</font><font color="#E5E5E5"> you have</font>

109
00:04:38,270 --> 00:04:41,628
the inputs for them ready if you have

110
00:04:39,650 --> 00:04:44,179
some of the inputs ready you can run on

111
00:04:41,629 --> 00:04:45,889
those and<font color="#E5E5E5"> then again when you have some</font>

112
00:04:44,180 --> 00:04:47,360
<font color="#CCCCCC">of the</font><font color="#E5E5E5"> other inputs again each time you</font>

113
00:04:45,889 --> 00:04:49,430
have inputs ready you just<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to have</font>

114
00:04:47,360 --> 00:04:57,319
to exchange two messages<font color="#CCCCCC"> okay so that</font>

115
00:04:49,430 --> 00:04:58,880
sort<font color="#E5E5E5"> of to go here okay</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> our</font>

116
00:04:57,319 --> 00:05:00,860
approaches of course are<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

117
00:04:58,880 --> 00:05:05,419
<font color="#E5E5E5">based on garbled circuits</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a very</font>

118
00:05:00,860 --> 00:05:07,280
quick<font color="#E5E5E5"> overview as just to fucking from</font>

119
00:05:05,419 --> 00:05:09,380
here as<font color="#E5E5E5"> you with the</font><font color="#CCCCCC"> notation here we're</font>

120
00:05:07,280 --> 00:05:11,690
<font color="#E5E5E5">going to use we're gonna have a circuit</font>

121
00:05:09,380 --> 00:05:13,219
see that represents our function<font color="#E5E5E5"> we're</font>

122
00:05:11,690 --> 00:05:15,530
gonna have a<font color="#CCCCCC"> garbling algorithm that</font>

123
00:05:13,220 --> 00:05:17,690
takes a<font color="#E5E5E5"> seat</font><font color="#CCCCCC"> and the description of</font><font color="#E5E5E5"> the</font>

124
00:05:15,530 --> 00:05:20,900
circuit and gives us a garbled circuit

125
00:05:17,690 --> 00:05:24,289
and we are going<font color="#E5E5E5"> to use the same</font><font color="#CCCCCC"> C to</font>

126
00:05:20,900 --> 00:05:26,810
encode inputs or garbled imports<font color="#CCCCCC"> garble</font>

127
00:05:24,289 --> 00:05:29,270
inputs<font color="#E5E5E5"> so this is essentially on the</font>

128
00:05:26,810 --> 00:05:32,180
right and on your<font color="#E5E5E5"> right hand side is</font><font color="#CCCCCC"> the</font>

129
00:05:29,270 --> 00:05:34,880
semi honest acute<font color="#E5E5E5"> party garbled circuits</font>

130
00:05:32,180 --> 00:05:37,190
where there's a garble<font color="#E5E5E5"> err who sends a</font>

131
00:05:34,880 --> 00:05:40,819
garbled circuit and the garbled inputs

132
00:05:37,190 --> 00:05:43,159
to the evaluator<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the evaluator also</font>

133
00:05:40,819 --> 00:05:45,650
learns its own garbled inputs using

134
00:05:43,159 --> 00:05:47,750
oblivious transfer and then evaluates

135
00:05:45,650 --> 00:05:50,299
the<font color="#CCCCCC"> garble circuit on the</font><font color="#E5E5E5"> garbled inputs</font>

136
00:05:47,750 --> 00:05:52,849
to learn the output it's very high level

137
00:05:50,300 --> 00:05:55,250
we<font color="#E5E5E5"> don't have to get into the a lot of</font>

138
00:05:52,849 --> 00:05:58,550
<font color="#E5E5E5">details what we know this is this is</font>

139
00:05:55,250 --> 00:06:01,520
<font color="#E5E5E5">semi honest secure and this actually can</font>

140
00:05:58,550 --> 00:06:03,740
<font color="#CCCCCC">be is</font><font color="#E5E5E5"> already a true message secure</font>

141
00:06:01,520 --> 00:06:05,479
<font color="#E5E5E5">two-party computation the way to think</font>

142
00:06:03,740 --> 00:06:07,340
of it is<font color="#CCCCCC"> that you know in the blue in</font>

143
00:06:05,479 --> 00:06:08,840
<font color="#CCCCCC">the ugliest transfer the evaluator first</font>

144
00:06:07,340 --> 00:06:11,388
sends the first<font color="#E5E5E5"> message of the oblivious</font>

145
00:06:08,840 --> 00:06:12,979
transfer the the gobbler responds with

146
00:06:11,389 --> 00:06:15,370
<font color="#E5E5E5">the second message of the oblivious</font>

147
00:06:12,979 --> 00:06:18,258
transfer along with the garbled circuit

148
00:06:15,370 --> 00:06:21,290
and it's garbled inputs and so we have a

149
00:06:18,259 --> 00:06:27,180
<font color="#E5E5E5">two message somewhere honest</font>

150
00:06:21,290 --> 00:06:28,680
<font color="#CCCCCC">-</font><font color="#E5E5E5"> PC</font><font color="#CCCCCC"> okay so and there are various ways</font>

151
00:06:27,180 --> 00:06:31,680
<font color="#CCCCCC">to make this</font><font color="#E5E5E5"> non attractive of</font><font color="#CCCCCC"> course</font>

152
00:06:28,680 --> 00:06:34,889
<font color="#E5E5E5">but since we're sort of</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> a concretely</font>

153
00:06:31,680 --> 00:06:36,180
efficient protocol<font color="#E5E5E5"> we sort of are going</font>

154
00:06:34,889 --> 00:06:38,910
<font color="#E5E5E5">to look at the cut and choose approach</font>

155
00:06:36,180 --> 00:06:41,340
<font color="#E5E5E5">okay so let's quickly against review the</font>

156
00:06:38,910 --> 00:06:44,520
content<font color="#CCCCCC"> choose approach</font><font color="#E5E5E5"> so here you have</font>

157
00:06:41,340 --> 00:06:46,799
the GAR blur<font color="#CCCCCC"> send many multiple</font><font color="#E5E5E5"> garbled</font>

158
00:06:44,520 --> 00:06:49,680
circuits<font color="#E5E5E5"> the evaluator will ask the</font>

159
00:06:46,800 --> 00:06:53,550
gobbler to open a subset of these

160
00:06:49,680 --> 00:06:55,620
<font color="#E5E5E5">garbled circuits and then it it has a</font>

161
00:06:53,550 --> 00:06:57,479
guarantee that sort<font color="#CCCCCC"> of the in the</font>

162
00:06:55,620 --> 00:06:59,400
remaining garbled circuits the majority

163
00:06:57,479 --> 00:07:02,580
are correct<font color="#E5E5E5"> so you can you can evaluate</font>

164
00:06:59,400 --> 00:07:07,080
those and then recover<font color="#CCCCCC"> the output</font><font color="#E5E5E5"> okay</font>

165
00:07:02,580 --> 00:07:09,780
so that's the general approach and and

166
00:07:07,080 --> 00:07:11,849
and of course<font color="#CCCCCC"> there as I</font><font color="#E5E5E5"> mentioned there</font>

167
00:07:09,780 --> 00:07:13,260
is<font color="#E5E5E5"> this better approach that is sort of</font>

168
00:07:11,850 --> 00:07:15,419
has different names<font color="#CCCCCC"> for general use</font>

169
00:07:13,260 --> 00:07:20,520
input recovery cheating recovery<font color="#E5E5E5"> but</font>

170
00:07:15,419 --> 00:07:22,530
essentially the idea<font color="#E5E5E5"> is that you you can</font>

171
00:07:20,520 --> 00:07:24,510
you can<font color="#E5E5E5"> improve the efficiency by</font>

172
00:07:22,530 --> 00:07:27,989
<font color="#E5E5E5">sending less circuits because you only</font>

173
00:07:24,510 --> 00:07:30,120
<font color="#CCCCCC">require the</font><font color="#E5E5E5"> guarantee that at least one</font>

174
00:07:27,990 --> 00:07:31,650
one of the evaluator<font color="#E5E5E5"> garber circuits</font>

175
00:07:30,120 --> 00:07:34,080
discard as opposed to the<font color="#E5E5E5"> majority of</font>

176
00:07:31,650 --> 00:07:36,479
them being correct<font color="#E5E5E5"> okay and so</font>

177
00:07:34,080 --> 00:07:38,900
essentially how do you achieve<font color="#E5E5E5"> that by</font>

178
00:07:36,479 --> 00:07:43,020
this is by<font color="#E5E5E5"> opening some of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> circuits</font>

179
00:07:38,900 --> 00:07:48,030
evaluating the remainder<font color="#E5E5E5"> and then having</font>

180
00:07:43,020 --> 00:07:50,000
<font color="#CCCCCC">a so a separate process that says if the</font>

181
00:07:48,030 --> 00:07:53,340
evaluator received two different outputs

182
00:07:50,000 --> 00:07:54,960
<font color="#CCCCCC">it can actually if and if you can prove</font>

183
00:07:53,340 --> 00:07:57,989
that<font color="#E5E5E5"> it received two different outputs</font>

184
00:07:54,960 --> 00:08:00,239
<font color="#E5E5E5">it will learn the gobblers input right</font>

185
00:07:57,990 --> 00:08:01,770
which allows the evaluator actually

186
00:08:00,240 --> 00:08:02,190
compute the<font color="#CCCCCC"> output on its own</font><font color="#E5E5E5"> and that's</font>

187
00:08:01,770 --> 00:08:03,539
<font color="#E5E5E5">fine</font>

188
00:08:02,190 --> 00:08:07,410
<font color="#E5E5E5">so that's the cheating recurrent cancer</font>

189
00:08:03,539 --> 00:08:08,880
<font color="#CCCCCC">but so and and but that</font><font color="#E5E5E5"> cheating</font>

190
00:08:07,410 --> 00:08:11,100
recovery mechanism is<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be very</font>

191
00:08:08,880 --> 00:08:13,800
sort of much more<font color="#E5E5E5"> efficient than</font><font color="#CCCCCC"> the</font>

192
00:08:11,100 --> 00:08:15,780
original computation it's as a<font color="#E5E5E5"> its size</font>

193
00:08:13,800 --> 00:08:19,289
is not dependent<font color="#E5E5E5"> on the original size of</font>

194
00:08:15,780 --> 00:08:21,960
<font color="#E5E5E5">the bigger circle</font><font color="#CCCCCC"> okay so now we are</font>

195
00:08:19,289 --> 00:08:24,479
<font color="#E5E5E5">sort of we are interested in a non</font><font color="#CCCCCC"> -</font>

196
00:08:21,960 --> 00:08:27,120
<font color="#E5E5E5">message non-interactive secure two-party</font>

197
00:08:24,479 --> 00:08:28,800
computation and<font color="#E5E5E5"> sort of you can see that</font>

198
00:08:27,120 --> 00:08:31,349
a lot<font color="#E5E5E5"> of things they have</font><font color="#CCCCCC"> to do it's</font><font color="#E5E5E5"> not</font>

199
00:08:28,800 --> 00:08:33,299
<font color="#E5E5E5">obvious how to do this in which just two</font>

200
00:08:31,349 --> 00:08:36,179
messages<font color="#CCCCCC"> for example this</font>

201
00:08:33,299 --> 00:08:38,280
after previous a lot of the techniques

202
00:08:36,179 --> 00:08:39,750
<font color="#E5E5E5">sort of have a separate</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> PC</font><font color="#CCCCCC"> just for</font>

203
00:08:38,280 --> 00:08:41,669
the cheating recovery<font color="#CCCCCC"> right so you</font><font color="#E5E5E5"> have</font>

204
00:08:39,750 --> 00:08:43,799
to do<font color="#CCCCCC"> that</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> it's not to</font><font color="#E5E5E5"> PC</font><font color="#CCCCCC"> and it's</font>

205
00:08:41,669 --> 00:08:46,170
shooting<font color="#CCCCCC"> recovery to PC</font><font color="#E5E5E5"> there's sort of</font>

206
00:08:43,799 --> 00:08:50,120
multiple rounds<font color="#E5E5E5"> of interaction to do all</font>

207
00:08:46,170 --> 00:08:52,589
of<font color="#E5E5E5"> this okay so before sort of saying</font>

208
00:08:50,120 --> 00:08:54,900
<font color="#E5E5E5">I'm</font><font color="#CCCCCC"> going to do now</font><font color="#E5E5E5"> interactive to PC</font>

209
00:08:52,590 --> 00:08:57,360
<font color="#CCCCCC">protocols</font><font color="#E5E5E5"> let me say we're gonna use a</font>

210
00:08:54,900 --> 00:08:59,490
primitive that is very<font color="#E5E5E5"> useful</font><font color="#CCCCCC"> to us</font>

211
00:08:57,360 --> 00:09:01,410
it's called homomorphic commitments<font color="#E5E5E5"> and</font>

212
00:08:59,490 --> 00:09:03,030
<font color="#CCCCCC">so these are commitments that you're all</font>

213
00:09:01,410 --> 00:09:05,160
<font color="#E5E5E5">familiar with with the hiding and</font>

214
00:09:03,030 --> 00:09:08,670
binding properties but we also want it

215
00:09:05,160 --> 00:09:10,380
<font color="#E5E5E5">to have a</font><font color="#CCCCCC"> whole morphic property and</font>

216
00:09:08,670 --> 00:09:13,229
it's sort of<font color="#E5E5E5"> somebody special morphic</font>

217
00:09:10,380 --> 00:09:15,720
property that says you know<font color="#E5E5E5"> if</font><font color="#CCCCCC"> i commit</font>

218
00:09:13,230 --> 00:09:19,200
<font color="#CCCCCC">to two values a and b</font><font color="#E5E5E5"> I can of course</font>

219
00:09:15,720 --> 00:09:21,900
<font color="#CCCCCC">open it to a X or B or</font><font color="#E5E5E5"> a plus B whatever</font>

220
00:09:19,200 --> 00:09:24,510
<font color="#E5E5E5">my home</font><font color="#CCCCCC"> Orphic operation is but also</font>

221
00:09:21,900 --> 00:09:28,650
that the opening<font color="#E5E5E5"> itself the commitment</font>

222
00:09:24,510 --> 00:09:30,720
to the<font color="#CCCCCC"> opening itself is sort of a homo</font>

223
00:09:28,650 --> 00:09:32,400
<font color="#CCCCCC">fig operation under the commitments the</font>

224
00:09:30,720 --> 00:09:34,530
individual<font color="#CCCCCC"> the commitments</font><font color="#E5E5E5"> okay so</font>

225
00:09:32,400 --> 00:09:36,660
that's<font color="#CCCCCC"> just extra property you will</font><font color="#E5E5E5"> see</font>

226
00:09:34,530 --> 00:09:38,310
<font color="#E5E5E5">become becomes useful as we're gonna try</font>

227
00:09:36,660 --> 00:09:41,010
to<font color="#E5E5E5"> do a designer</font><font color="#CCCCCC"> a portico</font><font color="#E5E5E5"> but</font>

228
00:09:38,310 --> 00:09:43,170
essentially<font color="#CCCCCC"> all the sort of very nice</font>

229
00:09:41,010 --> 00:09:44,400
techniques we have<font color="#E5E5E5"> now for doing</font><font color="#CCCCCC"> home or</font>

230
00:09:43,170 --> 00:09:47,969
<font color="#CCCCCC">few commitments</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> this sort of</font>

231
00:09:44,400 --> 00:09:51,480
property<font color="#E5E5E5"> okay so paracin commitments is</font>

232
00:09:47,970 --> 00:09:53,280
if you you're willing to<font color="#E5E5E5"> use public key</font>

233
00:09:51,480 --> 00:09:54,720
operations person comes are fairly

234
00:09:53,280 --> 00:09:58,850
communication<font color="#CCCCCC"> efficient we</font><font color="#E5E5E5"> are very</font>

235
00:09:54,720 --> 00:10:02,250
small<font color="#E5E5E5"> commitment sizes there is OD based</font>

236
00:09:58,850 --> 00:10:05,490
commitments that<font color="#E5E5E5"> were used in work of</font>

237
00:10:02,250 --> 00:10:07,950
linear<font color="#CCCCCC"> river for input consistency so</font>

238
00:10:05,490 --> 00:10:10,230
which<font color="#E5E5E5"> means we can use we</font><font color="#CCCCCC"> can use a lot</font>

239
00:10:07,950 --> 00:10:11,760
of symmetric key operations and then

240
00:10:10,230 --> 00:10:17,670
there is very<font color="#CCCCCC"> interesting work that is</font>

241
00:10:11,760 --> 00:10:19,319
sort of is<font color="#E5E5E5"> actually has better rates in</font>

242
00:10:17,670 --> 00:10:20,550
terms<font color="#E5E5E5"> of how much message you can commit</font>

243
00:10:19,320 --> 00:10:23,160
<font color="#E5E5E5">to compared to the size of the</font>

244
00:10:20,550 --> 00:10:26,069
commitments that uses<font color="#E5E5E5"> uses a</font><font color="#CCCCCC"> bluest</font>

245
00:10:23,160 --> 00:10:27,600
transfer and coding techniques and

246
00:10:26,070 --> 00:10:30,480
they're sort of pros and<font color="#CCCCCC"> cons to each</font>

247
00:10:27,600 --> 00:10:31,950
approach as you sort<font color="#E5E5E5"> of know it like</font>

248
00:10:30,480 --> 00:10:33,710
your<font color="#CCCCCC"> personal commitment</font><font color="#E5E5E5"> has public key</font>

249
00:10:31,950 --> 00:10:35,880
operations the other two can be

250
00:10:33,710 --> 00:10:38,640
dominated by symmetric key operations

251
00:10:35,880 --> 00:10:41,550
which<font color="#E5E5E5"> are faster the sort of Linda River</font>

252
00:10:38,640 --> 00:10:43,830
solution has the<font color="#E5E5E5"> advantage</font><font color="#CCCCCC"> that it's it</font>

253
00:10:41,550 --> 00:10:45,780
can<font color="#E5E5E5"> be made non interactive or to</font>

254
00:10:43,830 --> 00:10:46,579
message without<font color="#E5E5E5"> sort of anything fancy</font>

255
00:10:45,780 --> 00:10:49,519
it's sort of it

256
00:10:46,579 --> 00:10:52,309
<font color="#CCCCCC">users ot the code</font><font color="#E5E5E5"> based approaches are</font>

257
00:10:49,519 --> 00:10:54,139
have much better rates<font color="#E5E5E5"> but sort of they</font>

258
00:10:52,309 --> 00:10:55,850
have this interactive<font color="#E5E5E5"> setup which you</font>

259
00:10:54,139 --> 00:10:58,549
can't<font color="#E5E5E5"> get rid of if you are used random</font>

260
00:10:55,850 --> 00:11:00,470
<font color="#CCCCCC">Oracle or if you are sort</font><font color="#E5E5E5"> of in a</font>

261
00:10:58,549 --> 00:11:01,759
offline online phase where the offline

262
00:11:00,470 --> 00:11:04,519
phase is where you do<font color="#E5E5E5"> the interactive</font>

263
00:11:01,759 --> 00:11:06,079
<font color="#E5E5E5">setup but sort of other words it's at</font>

264
00:11:04,519 --> 00:11:08,089
least<font color="#E5E5E5"> was not obvious to us how to make</font>

265
00:11:06,079 --> 00:11:10,429
<font color="#E5E5E5">it non interactive so it all depends</font>

266
00:11:08,089 --> 00:11:11,869
sort of on what you want<font color="#E5E5E5"> to do but for</font>

267
00:11:10,429 --> 00:11:13,220
us it<font color="#CCCCCC"> doesn't matter</font><font color="#E5E5E5"> all our protocols</font>

268
00:11:11,869 --> 00:11:14,629
are kind of<font color="#E5E5E5"> used so this sort of</font>

269
00:11:13,220 --> 00:11:17,449
homomorphic commitment in an abstract

270
00:11:14,629 --> 00:11:20,509
<font color="#E5E5E5">way as long as the the</font><font color="#CCCCCC"> opening is sort</font>

271
00:11:17,449 --> 00:11:25,128
of has this homomorphic<font color="#CCCCCC"> other property</font>

272
00:11:20,509 --> 00:11:27,559
as well<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so let me start by the</font>

273
00:11:25,129 --> 00:11:30,350
single execution setting and this<font color="#E5E5E5"> was</font>

274
00:11:27,559 --> 00:11:33,079
our<font color="#E5E5E5"> starting point is the</font><font color="#CCCCCC"> offshore a</font>

275
00:11:30,350 --> 00:11:34,910
tells a protocol<font color="#E5E5E5"> and which we sort of</font>

276
00:11:33,079 --> 00:11:37,040
<font color="#CCCCCC">generalize a</font><font color="#E5E5E5"> little</font><font color="#CCCCCC"> bit to use home</font>

277
00:11:34,910 --> 00:11:39,618
<font color="#CCCCCC">Orphic commitments in abstract way and</font>

278
00:11:37,040 --> 00:11:42,019
that allows us<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do more interesting</font>

279
00:11:39,619 --> 00:11:44,720
things<font color="#E5E5E5"> with it okay so what is the idea</font>

280
00:11:42,019 --> 00:11:46,299
<font color="#E5E5E5">so the gobbler will garble multiple</font>

281
00:11:44,720 --> 00:11:48,860
<font color="#E5E5E5">circuits this is for the cut and choose</font>

282
00:11:46,299 --> 00:11:51,049
it will send all the garbled circuits to

283
00:11:48,860 --> 00:11:53,689
the evaluator it will<font color="#E5E5E5"> also encrypt its</font>

284
00:11:51,049 --> 00:11:56,779
garbled inputs for those circuits<font color="#E5E5E5"> using</font>

285
00:11:53,689 --> 00:11:59,629
some<font color="#E5E5E5"> ki</font><font color="#CCCCCC"> right so we have</font><font color="#E5E5E5"> GC eyes and the</font>

286
00:11:56,779 --> 00:12:02,419
<font color="#E5E5E5">garbled inputs include every ki then</font>

287
00:11:59,629 --> 00:12:04,399
what do<font color="#E5E5E5"> we do for evaluators input you</font>

288
00:12:02,419 --> 00:12:07,339
<font color="#CCCCCC">know for every input of the evaluator</font>

289
00:12:04,399 --> 00:12:09,559
<font color="#CCCCCC">there will be there will be all</font>

290
00:12:07,339 --> 00:12:11,989
<font color="#CCCCCC">Cheesewright and then the voucher will</font>

291
00:12:09,559 --> 00:12:14,540
learn the corresponding garbled input so

292
00:12:11,989 --> 00:12:16,699
this<font color="#E5E5E5"> is again two messages for the cut</font>

293
00:12:14,540 --> 00:12:18,498
and choose we<font color="#E5E5E5"> will do another</font><font color="#CCCCCC"> OT where</font>

294
00:12:16,699 --> 00:12:21,579
the evaluator will say whether<font color="#E5E5E5"> I want to</font>

295
00:12:18,499 --> 00:12:24,019
open<font color="#E5E5E5"> or evaluate this circuit and</font>

296
00:12:21,579 --> 00:12:26,269
depending<font color="#E5E5E5"> on the choice of the</font><font color="#CCCCCC"> bit it</font>

297
00:12:24,019 --> 00:12:28,429
either<font color="#E5E5E5"> learns the seed that</font><font color="#CCCCCC"> was used to</font>

298
00:12:26,269 --> 00:12:29,809
gobble the circuit<font color="#E5E5E5"> or it lends the key</font>

299
00:12:28,429 --> 00:12:33,259
that<font color="#E5E5E5"> was used to encrypt a garbled</font>

300
00:12:29,809 --> 00:12:34,429
inputs so<font color="#E5E5E5"> you can actually learn the</font>

301
00:12:33,259 --> 00:12:38,959
garbled inputs of the<font color="#CCCCCC"> gobble</font><font color="#E5E5E5"> and</font>

302
00:12:34,429 --> 00:12:40,759
<font color="#E5E5E5">evaluate the circuit and so so far we</font>

303
00:12:38,959 --> 00:12:41,359
<font color="#CCCCCC">are all two messages this OTS we can run</font>

304
00:12:40,759 --> 00:12:44,799
in<font color="#CCCCCC"> parallel</font>

305
00:12:41,360 --> 00:12:48,079
<font color="#CCCCCC">so so we're very two message protocol</font>

306
00:12:44,799 --> 00:12:50,989
<font color="#E5E5E5">how do we have the globular send it's</font>

307
00:12:48,079 --> 00:12:52,969
<font color="#E5E5E5">garbled inputs in particular how do we</font>

308
00:12:50,989 --> 00:12:54,889
do the input consistency in a non

309
00:12:52,970 --> 00:12:55,999
interactive way so this is<font color="#E5E5E5"> somewhat sort</font>

310
00:12:54,889 --> 00:12:57,230
of a little<font color="#CCCCCC"> bit different from there</font>

311
00:12:55,999 --> 00:12:59,089
<font color="#E5E5E5">sure it's</font><font color="#CCCCCC"> Oh</font>

312
00:12:57,230 --> 00:13:00,200
and so view you're gonna use the whole

313
00:12:59,089 --> 00:13:02,060
<font color="#E5E5E5">morphic commitment so</font>

314
00:13:00,200 --> 00:13:04,880
if you remember<font color="#CCCCCC"> sort</font><font color="#E5E5E5"> of the gobbler has</font>

315
00:13:02,060 --> 00:13:09,140
to commit to will commit to<font color="#E5E5E5"> the two</font>

316
00:13:04,880 --> 00:13:10,580
<font color="#E5E5E5">labels corresponding to zero and one for</font>

317
00:13:09,140 --> 00:13:12,860
each input wire<font color="#E5E5E5"> let's assume</font><font color="#CCCCCC"> there's</font>

318
00:13:10,580 --> 00:13:14,330
<font color="#E5E5E5">just one bit</font><font color="#CCCCCC"> of input</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> it's they</font>

319
00:13:12,860 --> 00:13:16,460
<font color="#CCCCCC">are</font><font color="#E5E5E5"> randomly permuted using a</font>

320
00:13:14,330 --> 00:13:18,410
permutation bit<font color="#E5E5E5"> this is sort of a</font>

321
00:13:16,460 --> 00:13:20,860
<font color="#CCCCCC">standard technique okay so what the</font>

322
00:13:18,410 --> 00:13:24,170
<font color="#CCCCCC">garbha</font><font color="#E5E5E5"> layer is going to do is going to</font>

323
00:13:20,860 --> 00:13:25,580
commit to<font color="#E5E5E5"> those labels in using a</font>

324
00:13:24,170 --> 00:13:29,329
standard commitment<font color="#E5E5E5"> but it's also gonna</font>

325
00:13:25,580 --> 00:13:33,590
<font color="#E5E5E5">homophily commit to the permutation bit</font>

326
00:13:29,330 --> 00:13:35,570
and of course<font color="#E5E5E5"> separately also home or</font>

327
00:13:33,590 --> 00:13:38,180
<font color="#E5E5E5">flee commit to its input</font><font color="#CCCCCC"> so this is</font><font color="#E5E5E5"> just</font>

328
00:13:35,570 --> 00:13:42,800
<font color="#E5E5E5">done once this is done pair circuit okay</font>

329
00:13:38,180 --> 00:13:45,140
<font color="#CCCCCC">those are done per circuit okay</font><font color="#E5E5E5"> so and</font>

330
00:13:42,800 --> 00:13:47,870
this is<font color="#E5E5E5"> sort of a linear River technique</font>

331
00:13:45,140 --> 00:13:49,580
for<font color="#E5E5E5"> for doing input consistency check</font>

332
00:13:47,870 --> 00:13:53,030
<font color="#E5E5E5">okay but we were</font><font color="#CCCCCC"> just doing using it in</font>

333
00:13:49,580 --> 00:13:56,680
<font color="#E5E5E5">non interactive scenario so what happens</font>

334
00:13:53,030 --> 00:13:59,689
now when if a circuit is chosen<font color="#E5E5E5"> to be</font>

335
00:13:56,680 --> 00:14:01,160
opened<font color="#E5E5E5"> of course the the the evaluator</font>

336
00:13:59,690 --> 00:14:03,500
learns the<font color="#E5E5E5"> permutation</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> uncheck that</font>

337
00:14:01,160 --> 00:14:05,719
<font color="#E5E5E5">and all</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> keys</font><font color="#CCCCCC"> and can check that</font>

338
00:14:03,500 --> 00:14:08,480
things were done<font color="#CCCCCC"> correctly</font><font color="#E5E5E5"> but if the</font>

339
00:14:05,720 --> 00:14:10,520
circuit is being evaluated<font color="#E5E5E5"> there will be</font>

340
00:14:08,480 --> 00:14:12,980
what<font color="#E5E5E5"> will be revealed to the evaluator</font>

341
00:14:10,520 --> 00:14:15,199
is the opening of the<font color="#E5E5E5"> X or of the input</font>

342
00:14:12,980 --> 00:14:17,690
<font color="#E5E5E5">and the permutation bit okay</font>

343
00:14:15,200 --> 00:14:20,360
so and so this<font color="#E5E5E5"> actually takes care of</font>

344
00:14:17,690 --> 00:14:22,820
the input consistency check<font color="#CCCCCC"> because we</font>

345
00:14:20,360 --> 00:14:24,770
know that<font color="#CCCCCC"> it the input this input is</font>

346
00:14:22,820 --> 00:14:26,120
<font color="#E5E5E5">fixed across all the different circuits</font>

347
00:14:24,770 --> 00:14:27,680
so really you cannot use different

348
00:14:26,120 --> 00:14:29,270
inputs or change your inputs right<font color="#E5E5E5"> as</font>

349
00:14:27,680 --> 00:14:31,760
<font color="#E5E5E5">long</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> the permutation bit is correct</font>

350
00:14:29,270 --> 00:14:33,560
<font color="#E5E5E5">for one of the circuits then we are</font>

351
00:14:31,760 --> 00:14:36,350
using<font color="#E5E5E5"> that input that we're committed</font><font color="#CCCCCC"> to</font>

352
00:14:33,560 --> 00:14:37,939
<font color="#E5E5E5">okay so that's how</font><font color="#CCCCCC"> we take care of the</font>

353
00:14:36,350 --> 00:14:39,350
input consistency again<font color="#E5E5E5"> not</font>

354
00:14:37,940 --> 00:14:43,730
interactively<font color="#E5E5E5"> it's all happens</font><font color="#CCCCCC"> through</font>

355
00:14:39,350 --> 00:14:45,260
the<font color="#E5E5E5"> same circuit</font><font color="#CCCCCC"> ot you can think of in</font>

356
00:14:43,730 --> 00:14:46,940
fact<font color="#E5E5E5"> sort of the better way to think</font>

357
00:14:45,260 --> 00:14:51,010
about it is<font color="#E5E5E5"> that you will encrypt this</font>

358
00:14:46,940 --> 00:14:53,360
sort of<font color="#E5E5E5"> D commitment to the X or when</font>

359
00:14:51,010 --> 00:14:53,930
along with the garbled inputs or in that

360
00:14:53,360 --> 00:14:55,220
ki KI

361
00:14:53,930 --> 00:14:57,199
<font color="#CCCCCC">so that's sort of the</font><font color="#E5E5E5"> better way to</font>

362
00:14:55,220 --> 00:15:01,880
<font color="#E5E5E5">think about how do we take</font><font color="#CCCCCC"> care of the</font>

363
00:14:57,200 --> 00:15:04,400
<font color="#E5E5E5">cheating recovery</font><font color="#CCCCCC"> so here</font><font color="#E5E5E5"> again let's</font>

364
00:15:01,880 --> 00:15:06,590
assume<font color="#E5E5E5"> there is one</font><font color="#CCCCCC"> output wire and the</font>

365
00:15:04,400 --> 00:15:08,930
gobbler will come<font color="#CCCCCC"> or figley commit to</font>

366
00:15:06,590 --> 00:15:11,000
the<font color="#CCCCCC"> to output out by four zero</font><font color="#E5E5E5"> and I'll</font>

367
00:15:08,930 --> 00:15:11,689
put<font color="#CCCCCC"> a label</font><font color="#E5E5E5"> for 0 and output</font><font color="#CCCCCC"> label</font><font color="#E5E5E5"> for</font>

368
00:15:11,000 --> 00:15:17,270
<font color="#E5E5E5">one</font>

369
00:15:11,690 --> 00:15:19,730
<font color="#E5E5E5">it will it will</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> generate two random</font>

370
00:15:17,270 --> 00:15:23,630
values<font color="#E5E5E5"> okay these are the</font><font color="#CCCCCC"> same for</font><font color="#E5E5E5"> all</font>

371
00:15:19,730 --> 00:15:24,350
circuits that are<font color="#CCCCCC"> export</font><font color="#E5E5E5"> when they are</font>

372
00:15:23,630 --> 00:15:27,200
<font color="#CCCCCC">XOR</font>

373
00:15:24,350 --> 00:15:29,720
they give you the actual<font color="#CCCCCC"> input</font><font color="#E5E5E5"> okay so</font>

374
00:15:27,200 --> 00:15:31,430
these are or other<font color="#CCCCCC"> home off your</font>

375
00:15:29,720 --> 00:15:34,160
cooperation<font color="#CCCCCC"> I'm just using explorer as</font>

376
00:15:31,430 --> 00:15:35,689
as our home<font color="#E5E5E5"> or free cooperation so and</font>

377
00:15:34,160 --> 00:15:38,920
to be sure<font color="#E5E5E5"> that this is the case it will</font>

378
00:15:35,690 --> 00:15:42,430
actually<font color="#E5E5E5"> open the XOR of</font><font color="#CCCCCC"> these three</font>

379
00:15:38,920 --> 00:15:44,719
commitments<font color="#E5E5E5"> and this is this</font><font color="#CCCCCC"> is done</font>

380
00:15:42,430 --> 00:15:48,040
<font color="#CCCCCC">these are fixed</font><font color="#E5E5E5"> commitments across all</font>

381
00:15:44,720 --> 00:15:51,040
circuits<font color="#CCCCCC"> so what happens now and then</font>

382
00:15:48,040 --> 00:15:53,959
<font color="#CCCCCC">for circuits that are opened of course</font>

383
00:15:51,040 --> 00:15:56,480
they've<font color="#CCCCCC"> they've outer lines both labels</font>

384
00:15:53,960 --> 00:15:59,690
<font color="#E5E5E5">okay but for circuits that</font><font color="#CCCCCC"> are evaluated</font>

385
00:15:56,480 --> 00:16:01,430
<font color="#E5E5E5">the the</font><font color="#CCCCCC"> garbha will be revealing</font><font color="#E5E5E5"> the XOR</font>

386
00:15:59,690 --> 00:16:04,790
<font color="#CCCCCC">of the output label</font><font color="#E5E5E5"> and the</font>

387
00:16:01,430 --> 00:16:06,680
corresponding<font color="#CCCCCC"> random value okay and now</font>

388
00:16:04,790 --> 00:16:08,329
what<font color="#E5E5E5"> happens how do we do cheating</font>

389
00:16:06,680 --> 00:16:10,670
recovery now imagine that evaluator

390
00:16:08,330 --> 00:16:13,160
learns<font color="#CCCCCC"> two different output labels</font><font color="#E5E5E5"> then</font>

391
00:16:10,670 --> 00:16:16,189
you will learn both w0 and w1<font color="#E5E5E5"> which</font>

392
00:16:13,160 --> 00:16:18,560
allows you to<font color="#E5E5E5"> recover the input X</font><font color="#CCCCCC"> okay</font>

393
00:16:16,190 --> 00:16:20,840
<font color="#E5E5E5">and but if it's not there's no cheating</font>

394
00:16:18,560 --> 00:16:23,689
<font color="#CCCCCC">the developer</font><font color="#E5E5E5"> will only learn one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

395
00:16:20,840 --> 00:16:26,240
labels<font color="#E5E5E5"> therefore it can only it cannot</font>

396
00:16:23,690 --> 00:16:27,770
recover X<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so that's</font><font color="#E5E5E5"> sort of again</font>

397
00:16:26,240 --> 00:16:29,600
now everything is<font color="#CCCCCC"> happening through</font>

398
00:16:27,770 --> 00:16:31,939
those two<font color="#CCCCCC"> ot so this</font><font color="#E5E5E5"> is a two message</font>

399
00:16:29,600 --> 00:16:33,650
protocol<font color="#CCCCCC"> so that's that's</font><font color="#E5E5E5"> sort of the</font>

400
00:16:31,940 --> 00:16:34,970
single execution<font color="#E5E5E5"> protocol using</font>

401
00:16:33,650 --> 00:16:38,240
homomorphic commitments in a very

402
00:16:34,970 --> 00:16:40,910
abstract<font color="#E5E5E5"> way okay all right so how do we</font>

403
00:16:38,240 --> 00:16:42,170
<font color="#E5E5E5">do batch execution</font><font color="#CCCCCC"> let me remind you</font>

404
00:16:40,910 --> 00:16:44,089
what sort<font color="#E5E5E5"> of this batch execution</font>

405
00:16:42,170 --> 00:16:46,189
techniques are now we are<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> many</font>

406
00:16:44,090 --> 00:16:48,050
executions<font color="#E5E5E5"> we have many different inputs</font>

407
00:16:46,190 --> 00:16:50,180
<font color="#E5E5E5">so what we're gonna do is we're gonna</font>

408
00:16:48,050 --> 00:16:53,300
generate a large number of garbled

409
00:16:50,180 --> 00:16:55,370
circuits<font color="#E5E5E5"> we're gonna have multiple</font>

410
00:16:53,300 --> 00:16:58,520
<font color="#E5E5E5">pockets each packet represents a single</font>

411
00:16:55,370 --> 00:17:01,010
<font color="#E5E5E5">execution with a different input okay</font>

412
00:16:58,520 --> 00:17:04,010
we're gonna assign each garble circuit

413
00:17:01,010 --> 00:17:05,750
randomly to<font color="#E5E5E5"> one of these buckets and</font>

414
00:17:04,010 --> 00:17:07,490
we're gonna<font color="#E5E5E5"> sort of assume that</font><font color="#CCCCCC"> the last</font>

415
00:17:05,750 --> 00:17:09,439
bucket here is gonna<font color="#E5E5E5"> be this bucket</font>

416
00:17:07,490 --> 00:17:13,250
where we open<font color="#CCCCCC"> the</font><font color="#E5E5E5"> circuit okay</font><font color="#CCCCCC"> so this</font>

417
00:17:09,439 --> 00:17:15,589
is better abstraction for our for our

418
00:17:13,250 --> 00:17:17,720
attractive version<font color="#E5E5E5"> okay so that's how</font>

419
00:17:15,589 --> 00:17:19,280
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> gonna do things</font><font color="#CCCCCC"> so the evaluator</font>

420
00:17:17,720 --> 00:17:21,260
will be right choosing which circuits to

421
00:17:19,280 --> 00:17:23,240
go over randomly right<font color="#E5E5E5"> and the gobball</font>

422
00:17:21,260 --> 00:17:24,770
puts them<font color="#CCCCCC"> there and each</font><font color="#E5E5E5"> bucket will</font>

423
00:17:23,240 --> 00:17:26,480
correspond<font color="#CCCCCC"> to</font><font color="#E5E5E5"> one execution</font>

424
00:17:24,770 --> 00:17:28,158
so this sort<font color="#CCCCCC"> of allows because we were</font>

425
00:17:26,480 --> 00:17:32,000
doing<font color="#CCCCCC"> it in in a bad setting</font><font color="#E5E5E5"> this allows</font>

426
00:17:28,159 --> 00:17:34,220
<font color="#CCCCCC">us to have a log n factor less</font><font color="#E5E5E5"> garble</font>

427
00:17:32,000 --> 00:17:36,320
<font color="#E5E5E5">circus generated for the in executions</font>

428
00:17:34,220 --> 00:17:39,950
that<font color="#E5E5E5"> we want to have okay</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> that's the</font>

429
00:17:36,320 --> 00:17:43,610
<font color="#E5E5E5">idea</font><font color="#CCCCCC"> so we want</font><font color="#E5E5E5"> to make this sort of</font>

430
00:17:39,950 --> 00:17:44,929
approach<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then you sort of each of</font>

431
00:17:43,610 --> 00:17:47,629
these separate<font color="#CCCCCC"> buckets</font><font color="#E5E5E5"> you can think of</font>

432
00:17:44,929 --> 00:17:49,429
it you would repeat what<font color="#E5E5E5"> we were talking</font>

433
00:17:47,630 --> 00:17:53,390
<font color="#CCCCCC">about before right</font><font color="#E5E5E5"> so they are just each</font>

434
00:17:49,429 --> 00:17:55,220
<font color="#CCCCCC">of them are</font><font color="#E5E5E5"> single</font><font color="#CCCCCC"> cut</font><font color="#E5E5E5"> NGOs</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> PC so how</font>

435
00:17:53,390 --> 00:17:57,320
do we<font color="#E5E5E5"> do this in an attractive</font><font color="#CCCCCC"> way I</font>

436
00:17:55,220 --> 00:17:59,480
want to<font color="#E5E5E5"> just list this sort of what are</font>

437
00:17:57,320 --> 00:18:02,418
<font color="#E5E5E5">some of the challenges</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> now instead</font><font color="#CCCCCC"> of</font>

438
00:17:59,480 --> 00:18:04,159
sort of obliviously<font color="#E5E5E5"> either evaluating or</font>

439
00:18:02,419 --> 00:18:06,350
opening a circuit<font color="#E5E5E5"> you sort of have to</font>

440
00:18:04,159 --> 00:18:07,940
obliviously assign these circuits to all

441
00:18:06,350 --> 00:18:09,559
these buckets<font color="#CCCCCC"> so it's a little</font><font color="#E5E5E5"> bit</font>

442
00:18:07,940 --> 00:18:11,450
<font color="#CCCCCC">different not too hard but you have to</font>

443
00:18:09,559 --> 00:18:13,190
sort<font color="#CCCCCC"> of change</font><font color="#E5E5E5"> things in this way to</font>

444
00:18:11,450 --> 00:18:16,789
make it<font color="#E5E5E5"> ugly this assignment</font><font color="#CCCCCC"> to these</font>

445
00:18:13,190 --> 00:18:18,710
buckets but sort<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> little bit harder</font>

446
00:18:16,789 --> 00:18:21,200
is you now the gobbler has to send

447
00:18:18,710 --> 00:18:24,710
garbled inputs for each circuit<font color="#E5E5E5"> right</font>

448
00:18:21,200 --> 00:18:28,460
but<font color="#E5E5E5"> actually it doesn't know yet</font><font color="#CCCCCC"> which</font>

449
00:18:24,710 --> 00:18:29,630
input who is correspond to which<font color="#E5E5E5"> car</font>

450
00:18:28,460 --> 00:18:30,980
<font color="#E5E5E5">will second he doesn't know the</font>

451
00:18:29,630 --> 00:18:32,690
assignments<font color="#E5E5E5"> of the garbage circus two</font>

452
00:18:30,980 --> 00:18:34,399
buckets which would<font color="#E5E5E5"> definitely</font><font color="#CCCCCC"> mind</font>

453
00:18:32,690 --> 00:18:35,929
which input you actually have<font color="#CCCCCC"> to garble</font>

454
00:18:34,399 --> 00:18:37,729
<font color="#E5E5E5">right because everything</font><font color="#CCCCCC"> is happening</font><font color="#E5E5E5"> in</font>

455
00:18:35,929 --> 00:18:40,549
<font color="#E5E5E5">the same two rounds right it's not</font><font color="#CCCCCC"> like</font>

456
00:18:37,730 --> 00:18:43,159
<font color="#CCCCCC">it first</font><font color="#E5E5E5"> finds out what the buckets are</font>

457
00:18:40,549 --> 00:18:45,020
and then can<font color="#E5E5E5"> gobble the inputs those</font>

458
00:18:43,159 --> 00:18:48,080
inputs for that<font color="#E5E5E5"> circuit so it sort of</font>

459
00:18:45,020 --> 00:18:50,389
has to<font color="#E5E5E5"> do it without knowing and similar</font>

460
00:18:48,080 --> 00:18:52,520
things for input consistency<font color="#E5E5E5"> right yeah</font>

461
00:18:50,390 --> 00:18:54,140
sort<font color="#CCCCCC"> of</font><font color="#E5E5E5"> we wanted to prove</font><font color="#CCCCCC"> that it's</font>

462
00:18:52,520 --> 00:18:55,370
using the<font color="#E5E5E5"> same input for the</font><font color="#CCCCCC"> garble</font>

463
00:18:54,140 --> 00:18:57,559
<font color="#CCCCCC">circuits for one bucket</font>

464
00:18:55,370 --> 00:18:58,850
well it doesn't know every re which

465
00:18:57,559 --> 00:19:01,490
circuits are gonna be in the same<font color="#E5E5E5"> bucket</font>

466
00:18:58,850 --> 00:19:04,010
so to do<font color="#CCCCCC"> that proof for and again for</font>

467
00:19:01,490 --> 00:19:07,970
cheating recovery<font color="#E5E5E5"> it doesn't know again</font>

468
00:19:04,010 --> 00:19:09,679
<font color="#E5E5E5">is it which two different outputs of</font>

469
00:19:07,970 --> 00:19:11,929
each two circuits<font color="#E5E5E5"> if they are different</font>

470
00:19:09,679 --> 00:19:14,179
<font color="#CCCCCC">it should it should learn</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> actually</font>

471
00:19:11,929 --> 00:19:15,559
input recover the actual input<font color="#CCCCCC"> from so</font>

472
00:19:14,179 --> 00:19:18,830
you want to make all of these

473
00:19:15,559 --> 00:19:19,908
interactive and not<font color="#CCCCCC"> interact so how do</font>

474
00:19:18,830 --> 00:19:23,029
<font color="#E5E5E5">we</font><font color="#CCCCCC"> do this</font>

475
00:19:19,909 --> 00:19:25,070
so sort of a sort<font color="#CCCCCC"> of the first knife</font>

476
00:19:23,029 --> 00:19:27,679
solution that comes to mind is you know

477
00:19:25,070 --> 00:19:29,928
let's<font color="#CCCCCC"> just have</font><font color="#E5E5E5"> the gobbler generate the</font>

478
00:19:27,679 --> 00:19:33,320
garbled inputs for all possible inputs

479
00:19:29,929 --> 00:19:36,049
right<font color="#E5E5E5"> of all the executions and also</font>

480
00:19:33,320 --> 00:19:38,090
generate input<font color="#E5E5E5"> consistency gadgets and</font>

481
00:19:36,049 --> 00:19:40,010
perhaps<font color="#E5E5E5"> output recover</font>

482
00:19:38,090 --> 00:19:42,709
<font color="#E5E5E5">is everything</font><font color="#CCCCCC"> for all the possibilities</font>

483
00:19:40,010 --> 00:19:47,150
right<font color="#E5E5E5"> and then for every circuit do have</font>

484
00:19:42,710 --> 00:19:50,150
one out<font color="#CCCCCC"> of n sort of ot</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> where the</font>

485
00:19:47,150 --> 00:19:52,220
receivers<font color="#E5E5E5"> chooses to learn the gobble</font>

486
00:19:50,150 --> 00:19:54,020
inputs for one of these sort<font color="#E5E5E5"> of buckets</font>

487
00:19:52,220 --> 00:19:55,340
<font color="#E5E5E5">right the receiver decides what to do</font>

488
00:19:54,020 --> 00:19:57,020
that<font color="#CCCCCC"> so of course this is already</font>

489
00:19:55,340 --> 00:19:58,189
inefficient because sort<font color="#E5E5E5"> of you have</font><font color="#CCCCCC"> to</font>

490
00:19:57,020 --> 00:19:59,809
<font color="#CCCCCC">do N squared</font>

491
00:19:58,190 --> 00:20:01,789
communication where the number<font color="#E5E5E5"> of</font>

492
00:19:59,809 --> 00:20:04,460
executions is<font color="#E5E5E5"> N and large so that's all</font>

493
00:20:01,789 --> 00:20:05,990
not good but but it's actually it's<font color="#E5E5E5"> not</font>

494
00:20:04,460 --> 00:20:08,120
<font color="#E5E5E5">clear even then how to make</font><font color="#CCCCCC"> it four</font>

495
00:20:05,990 --> 00:20:09,950
<font color="#E5E5E5">because the possibilities are not just n</font>

496
00:20:08,120 --> 00:20:11,270
right you if<font color="#E5E5E5"> you think</font><font color="#CCCCCC"> about it for</font>

497
00:20:09,950 --> 00:20:13,549
output recovery for example

498
00:20:11,270 --> 00:20:15,110
possibilities are all the circuits<font color="#E5E5E5"> that</font>

499
00:20:13,549 --> 00:20:17,120
<font color="#CCCCCC">are going to</font><font color="#E5E5E5"> go to the same bucket right</font>

500
00:20:15,110 --> 00:20:18,799
so it's not<font color="#E5E5E5"> more</font><font color="#CCCCCC"> than n</font><font color="#E5E5E5"> possibilities</font>

501
00:20:17,120 --> 00:20:20,239
right<font color="#E5E5E5"> you don't know which seconds</font>

502
00:20:18,799 --> 00:20:22,070
they're<font color="#CCCCCC"> going to go to</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> bucket so</font>

503
00:20:20,240 --> 00:20:24,289
<font color="#E5E5E5">you have to do the output recovery with</font>

504
00:20:22,070 --> 00:20:26,270
those<font color="#E5E5E5"> in those circuits</font><font color="#CCCCCC"> so it's not</font>

505
00:20:24,289 --> 00:20:28,700
<font color="#E5E5E5">completely obvious even this sort of how</font>

506
00:20:26,270 --> 00:20:31,399
<font color="#CCCCCC">to make</font><font color="#E5E5E5"> this one out of an pair circuit</font>

507
00:20:28,700 --> 00:20:34,610
work but<font color="#E5E5E5"> our hope is</font><font color="#CCCCCC"> to not to avoid</font>

508
00:20:31,399 --> 00:20:36,110
this really get sort<font color="#E5E5E5"> of do much better</font>

509
00:20:34,610 --> 00:20:38,209
dad so what<font color="#E5E5E5"> is</font><font color="#CCCCCC"> alright yeah</font>

510
00:20:36,110 --> 00:20:40,039
so our main building<font color="#E5E5E5"> and sort</font><font color="#CCCCCC"> of I'm</font>

511
00:20:38,210 --> 00:20:41,659
<font color="#E5E5E5">going to just give you an idea of the</font>

512
00:20:40,039 --> 00:20:44,419
techniques was the main ingredient<font color="#CCCCCC"> is</font>

513
00:20:41,659 --> 00:20:45,740
this protocol called oblivious<font color="#E5E5E5"> switching</font>

514
00:20:44,419 --> 00:20:48,020
at<font color="#E5E5E5"> fort</font>

515
00:20:45,740 --> 00:20:48,950
what does switching a disability<font color="#CCCCCC"> network</font>

516
00:20:48,020 --> 00:20:52,429
do

517
00:20:48,950 --> 00:20:54,140
so we have our receiver on the<font color="#CCCCCC"> right</font>

518
00:20:52,429 --> 00:20:59,080
<font color="#E5E5E5">hand side and his input</font><font color="#CCCCCC"> to this sort of</font>

519
00:20:54,140 --> 00:21:03,409
two party protocol is a permutation<font color="#CCCCCC"> okay</font>

520
00:20:59,080 --> 00:21:05,299
and and then we<font color="#E5E5E5"> have our</font><font color="#CCCCCC"> Center here</font><font color="#E5E5E5"> and</font>

521
00:21:03,409 --> 00:21:08,000
his input<font color="#CCCCCC"> to the protocol are two input</font>

522
00:21:05,299 --> 00:21:10,639
vectors<font color="#E5E5E5"> one are sort of the input wires</font>

523
00:21:08,000 --> 00:21:12,049
<font color="#E5E5E5">here to this box and then the second</font>

524
00:21:10,640 --> 00:21:12,830
input<font color="#CCCCCC"> vectors</font><font color="#E5E5E5"> are sort of these</font>

525
00:21:12,049 --> 00:21:15,408
<font color="#CCCCCC">padding's</font>

526
00:21:12,830 --> 00:21:17,149
that I'm denoting by R 1<font color="#E5E5E5"> to R 5 they</font>

527
00:21:15,409 --> 00:21:19,370
don't have to be random<font color="#CCCCCC"> could be any</font>

528
00:21:17,149 --> 00:21:20,870
input that<font color="#CCCCCC"> the sender chooses okay and</font>

529
00:21:19,370 --> 00:21:23,330
what is the output<font color="#E5E5E5"> that the receiver</font>

530
00:21:20,870 --> 00:21:26,479
<font color="#E5E5E5">receives it's sort of the permitted</font>

531
00:21:23,330 --> 00:21:28,520
versions of the excise export by the

532
00:21:26,480 --> 00:21:31,010
padding's<font color="#E5E5E5"> where the padding's are not</font>

533
00:21:28,520 --> 00:21:36,200
permitted<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the same order that they</font>

534
00:21:31,010 --> 00:21:38,720
were<font color="#CCCCCC"> originally arranged by the sender</font>

535
00:21:36,200 --> 00:21:40,820
okay so that's our<font color="#CCCCCC"> idea so but the way</font>

536
00:21:38,720 --> 00:21:44,120
they are<font color="#CCCCCC"> parameter is decided by the</font>

537
00:21:40,820 --> 00:21:46,370
receiver<font color="#E5E5E5"> so so you can think of it as</font>

538
00:21:44,120 --> 00:21:48,590
that<font color="#E5E5E5"> so the inputs to the switching</font>

539
00:21:46,370 --> 00:21:50,209
networks are sort of<font color="#CCCCCC"> they're all the</font>

540
00:21:48,590 --> 00:21:51,350
<font color="#E5E5E5">garbled circuits</font><font color="#CCCCCC"> car so each wire</font>

541
00:21:50,210 --> 00:21:53,330
corresponds to a single

542
00:21:51,350 --> 00:21:57,199
<font color="#E5E5E5">garble circuit in</font><font color="#CCCCCC"> this batch</font><font color="#E5E5E5"> content</font>

543
00:21:53,330 --> 00:22:00,080
<font color="#CCCCCC">shoes and so</font><font color="#E5E5E5"> the outputs are those those</font>

544
00:21:57,200 --> 00:22:02,000
those<font color="#E5E5E5"> gobble seconds</font><font color="#CCCCCC"> reordered</font><font color="#E5E5E5"> in the</font>

545
00:22:00,080 --> 00:22:05,299
way they are<font color="#E5E5E5"> supposed to be located in</font>

546
00:22:02,000 --> 00:22:08,809
in the buckets<font color="#CCCCCC"> okay and so and that's</font>

547
00:22:05,299 --> 00:22:10,700
what's decided by by the valve by the

548
00:22:08,809 --> 00:22:13,580
receiver here<font color="#E5E5E5"> okay</font>

549
00:22:10,700 --> 00:22:16,940
so we can't do this<font color="#E5E5E5"> sort of we've shown</font>

550
00:22:13,580 --> 00:22:19,340
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can do this protocol</font><font color="#E5E5E5"> using sort</font>

551
00:22:16,940 --> 00:22:21,830
<font color="#E5E5E5">of n log</font><font color="#CCCCCC"> N or T's where</font><font color="#E5E5E5"> n is sort of the</font>

552
00:22:19,340 --> 00:22:23,270
input size<font color="#E5E5E5"> by using a switching Network</font>

553
00:22:21,830 --> 00:22:25,549
and then again<font color="#E5E5E5"> because you can run all</font>

554
00:22:23,270 --> 00:22:29,809
the<font color="#E5E5E5"> OTS in parallel this is this is a</font>

555
00:22:25,549 --> 00:22:34,129
<font color="#E5E5E5">two message protocol okay</font><font color="#CCCCCC"> so let's say</font>

556
00:22:29,809 --> 00:22:36,950
we have such a protocol then what<font color="#E5E5E5"> can</font>

557
00:22:34,130 --> 00:22:39,230
you do so let me give you<font color="#E5E5E5"> seven</font><font color="#CCCCCC"> things</font>

558
00:22:36,950 --> 00:22:40,970
start becoming easy<font color="#CCCCCC"> okay so how do we do</font>

559
00:22:39,230 --> 00:22:42,409
<font color="#E5E5E5">their</font><font color="#CCCCCC"> content shows how do we assign</font>

560
00:22:40,970 --> 00:22:45,530
circuits to buckets

561
00:22:42,409 --> 00:22:49,340
right<font color="#CCCCCC"> so what for</font><font color="#E5E5E5"> example how do we how</font>

562
00:22:45,530 --> 00:22:52,370
do we open the garbin the garbled

563
00:22:49,340 --> 00:22:54,530
circuits<font color="#E5E5E5"> obliviously without without the</font>

564
00:22:52,370 --> 00:22:57,139
evaluator knowing<font color="#E5E5E5"> so for example what</font>

565
00:22:54,530 --> 00:22:59,990
what the what<font color="#CCCCCC"> the</font><font color="#E5E5E5"> cobbler what we can do</font>

566
00:22:57,140 --> 00:23:01,730
is we can have the the gobbler feed the

567
00:22:59,990 --> 00:23:05,360
<font color="#E5E5E5">seeds the openings for</font><font color="#CCCCCC"> all the garbage</font>

568
00:23:01,730 --> 00:23:07,460
circuits as the inputs to<font color="#CCCCCC"> the district</font>

569
00:23:05,360 --> 00:23:09,500
<font color="#E5E5E5">network and for the padding's</font>

570
00:23:07,460 --> 00:23:11,539
it will use random<font color="#CCCCCC"> pairings for the</font>

571
00:23:09,500 --> 00:23:14,600
circuits<font color="#E5E5E5"> for executions</font><font color="#CCCCCC"> that are going</font>

572
00:23:11,539 --> 00:23:17,780
<font color="#CCCCCC">to be evaluated and</font><font color="#E5E5E5"> zero</font><font color="#CCCCCC"> for the circuit</font>

573
00:23:14,600 --> 00:23:20,389
<font color="#E5E5E5">that circuits are going to be open now</font>

574
00:23:17,780 --> 00:23:22,760
as a result<font color="#E5E5E5"> for only the circuit that is</font>

575
00:23:20,390 --> 00:23:25,370
going to be circuits that are going<font color="#E5E5E5"> to</font>

576
00:23:22,760 --> 00:23:26,990
be opened and the evaluator actually

577
00:23:25,370 --> 00:23:28,309
learns the seat<font color="#E5E5E5"> they're opening for</font>

578
00:23:26,990 --> 00:23:30,950
<font color="#E5E5E5">everything else you</font><font color="#CCCCCC"> just get</font><font color="#E5E5E5"> something</font>

579
00:23:28,309 --> 00:23:32,600
random<font color="#CCCCCC"> okay so this is how they're sort</font>

580
00:23:30,950 --> 00:23:35,270
<font color="#E5E5E5">of the switching</font><font color="#CCCCCC"> network is deciding</font><font color="#E5E5E5"> for</font>

581
00:23:32,600 --> 00:23:40,969
<font color="#CCCCCC">us for what what is being opened what is</font>

582
00:23:35,270 --> 00:23:43,220
being evaluated<font color="#CCCCCC"> okay and similarly</font><font color="#E5E5E5"> if</font>

583
00:23:40,970 --> 00:23:45,140
you remember the<font color="#E5E5E5"> the input consistency</font>

584
00:23:43,220 --> 00:23:47,210
check that I was<font color="#E5E5E5"> talking about</font><font color="#CCCCCC"> we were</font>

585
00:23:45,140 --> 00:23:50,179
we had<font color="#CCCCCC"> Soho morphic commitments</font><font color="#E5E5E5"> for</font>

586
00:23:47,210 --> 00:23:52,309
every input so for every<font color="#CCCCCC"> execution and</font>

587
00:23:50,179 --> 00:23:54,710
<font color="#E5E5E5">we</font><font color="#CCCCCC"> had homomorphic commitment for every</font>

588
00:23:52,309 --> 00:23:57,740
permutation bit for every garble circuit

589
00:23:54,710 --> 00:23:59,179
so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> xj</font><font color="#E5E5E5"> and si right so how do</font><font color="#CCCCCC"> we</font>

590
00:23:57,740 --> 00:24:01,460
open<font color="#CCCCCC"> this</font><font color="#E5E5E5"> because we don't know which</font>

591
00:23:59,179 --> 00:24:03,290
one<font color="#CCCCCC"> of each</font><font color="#E5E5E5"> XOR pair we</font><font color="#CCCCCC"> have to open a</font>

592
00:24:01,460 --> 00:24:04,610
<font color="#E5E5E5">priori so what we're going to do is</font>

593
00:24:03,290 --> 00:24:07,039
actually send

594
00:24:04,610 --> 00:24:09,649
<font color="#E5E5E5">The Commitments through the switching</font>

595
00:24:07,039 --> 00:24:10,700
Network<font color="#CCCCCC"> okay so you can see that</font><font color="#E5E5E5"> the</font>

596
00:24:09,649 --> 00:24:12,830
padding's are gonna be the<font color="#E5E5E5"> de</font>

597
00:24:10,700 --> 00:24:14,690
commitments to the inputs<font color="#E5E5E5"> right so they</font>

598
00:24:12,830 --> 00:24:16,460
are going<font color="#E5E5E5"> to be and for the open</font>

599
00:24:14,690 --> 00:24:18,799
<font color="#E5E5E5">circuits there's</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be sort of a zero</font>

600
00:24:16,460 --> 00:24:20,809
right<font color="#CCCCCC"> because we don't</font><font color="#E5E5E5"> we don't know we</font>

601
00:24:18,799 --> 00:24:23,750
don't<font color="#CCCCCC"> open</font><font color="#E5E5E5"> the the</font><font color="#CCCCCC"> governments</font><font color="#E5E5E5"> for the</font>

602
00:24:20,809 --> 00:24:25,158
open circuits and then sort of the the

603
00:24:23,750 --> 00:24:26,450
<font color="#E5E5E5">actual inputs to the street in therefore</font>

604
00:24:25,159 --> 00:24:29,659
we aren't gonna be the<font color="#E5E5E5"> de commitments</font>

605
00:24:26,450 --> 00:24:31,340
for the<font color="#E5E5E5"> permutation bits and they go</font>

606
00:24:29,659 --> 00:24:33,710
through the switching<font color="#E5E5E5"> Network and what</font>

607
00:24:31,340 --> 00:24:35,389
you get is<font color="#E5E5E5"> sort of for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> seconds that</font>

608
00:24:33,710 --> 00:24:39,409
<font color="#CCCCCC">are being</font><font color="#E5E5E5"> evaluated you open the</font>

609
00:24:35,390 --> 00:24:41,870
commitment to the right input XOR but

610
00:24:39,409 --> 00:24:44,059
with the right permutation bit<font color="#CCCCCC"> okay so</font>

611
00:24:41,870 --> 00:24:45,500
<font color="#CCCCCC">so again</font><font color="#E5E5E5"> the commitments are being</font>

612
00:24:44,059 --> 00:24:46,700
permitted<font color="#E5E5E5"> in the switching Network and</font>

613
00:24:45,500 --> 00:24:50,960
you get the right D commitment and

614
00:24:46,700 --> 00:24:52,190
<font color="#E5E5E5">evaluated and opens that XOR okay so I'm</font>

615
00:24:50,960 --> 00:24:54,710
gonna because I don't<font color="#E5E5E5"> have much time</font>

616
00:24:52,190 --> 00:24:56,480
sort of you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to do this and there's</font>

617
00:24:54,710 --> 00:24:59,240
sort of<font color="#E5E5E5"> for every single thing</font><font color="#CCCCCC"> that we</font>

618
00:24:56,480 --> 00:25:01,190
need<font color="#E5E5E5"> to do for a garbled sending garbled</font>

619
00:24:59,240 --> 00:25:03,529
inputs for both the<font color="#E5E5E5"> garble</font><font color="#CCCCCC"> error and</font>

620
00:25:01,190 --> 00:25:06,889
evaluator the cheating recovery<font color="#E5E5E5"> is sort</font>

621
00:25:03,529 --> 00:25:10,159
of a similar<font color="#E5E5E5"> sort of ideas take place so</font>

622
00:25:06,889 --> 00:25:12,740
if you you're<font color="#E5E5E5"> careful about how you do</font>

623
00:25:10,159 --> 00:25:14,929
it<font color="#E5E5E5"> so every all is essentially the idea</font>

624
00:25:12,740 --> 00:25:16,429
<font color="#E5E5E5">is sending these</font><font color="#CCCCCC"> de commitments in the</font>

625
00:25:14,929 --> 00:25:18,710
switching Network and they get home

626
00:25:16,429 --> 00:25:21,300
<font color="#E5E5E5">awfully</font>

627
00:25:18,710 --> 00:25:23,580
<font color="#CCCCCC">super</font><font color="#E5E5E5"> muted and then sort of you get the</font>

628
00:25:21,300 --> 00:25:25,379
<font color="#E5E5E5">homo 50 commitment of what you really</font>

629
00:25:23,580 --> 00:25:27,960
are<font color="#E5E5E5"> supposed to learn okay</font>

630
00:25:25,380 --> 00:25:29,940
so I'm gonna skip then<font color="#CCCCCC"> the rest of these</font>

631
00:25:27,960 --> 00:25:33,450
there's some<font color="#E5E5E5"> subtleties been in various</font>

632
00:25:29,940 --> 00:25:35,480
ones but I don't have<font color="#E5E5E5"> time to go over so</font>

633
00:25:33,450 --> 00:25:38,730
<font color="#E5E5E5">what is this is sort of a table</font><font color="#CCCCCC"> that</font>

634
00:25:35,480 --> 00:25:40,560
<font color="#E5E5E5">shows the</font><font color="#CCCCCC"> summary of results I only</font>

635
00:25:38,730 --> 00:25:43,440
talked about<font color="#CCCCCC"> sort of</font><font color="#E5E5E5"> the standard a</font>

636
00:25:40,560 --> 00:25:45,899
batch execution<font color="#CCCCCC"> where you you</font><font color="#E5E5E5"> have all</font>

637
00:25:43,440 --> 00:25:47,250
the inputs sort of at once and you'd and

638
00:25:45,900 --> 00:25:49,650
<font color="#E5E5E5">you're you're</font><font color="#CCCCCC"> not swimming</font><font color="#E5E5E5"> around</font>

639
00:25:47,250 --> 00:25:51,000
America model but essentially<font color="#E5E5E5"> so the</font>

640
00:25:49,650 --> 00:25:52,380
number of<font color="#E5E5E5"> garbled circuits that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have</font>

641
00:25:51,000 --> 00:25:53,880
to send the<font color="#CCCCCC"> garble circuits are not</font>

642
00:25:52,380 --> 00:25:56,490
being<font color="#E5E5E5"> sent through the switching Network</font>

643
00:25:53,880 --> 00:25:57,840
so you don't they don't<font color="#CCCCCC"> they don't</font><font color="#E5E5E5"> have</font>

644
00:25:56,490 --> 00:26:00,720
this sort<font color="#CCCCCC"> of the expense</font><font color="#E5E5E5"> of the</font>

645
00:25:57,840 --> 00:26:02,550
switching Network is not they they don't

646
00:26:00,720 --> 00:26:04,200
<font color="#E5E5E5">have to go through that complexity what</font>

647
00:26:02,550 --> 00:26:06,570
you're<font color="#E5E5E5"> sending through the switching</font>

648
00:26:04,200 --> 00:26:08,370
<font color="#CCCCCC">network are essentially the commitments</font>

649
00:26:06,570 --> 00:26:10,560
there are<font color="#CCCCCC"> all corresponding to the</font>

650
00:26:08,370 --> 00:26:13,199
inputs and the<font color="#CCCCCC"> outputs so this is the</font>

651
00:26:10,560 --> 00:26:15,330
only<font color="#E5E5E5"> thing that will be an O of n that</font>

652
00:26:13,200 --> 00:26:20,310
will not have the login improvement

653
00:26:15,330 --> 00:26:22,050
factor and and but everything else is

654
00:26:20,310 --> 00:26:24,030
sort of has a log<font color="#E5E5E5"> and improvement factor</font>

655
00:26:22,050 --> 00:26:26,730
<font color="#E5E5E5">and you can</font><font color="#CCCCCC"> actually avoid that if you</font>

656
00:26:24,030 --> 00:26:28,740
use random Oracle's<font color="#E5E5E5"> or you are in the</font>

657
00:26:26,730 --> 00:26:31,020
online<font color="#E5E5E5"> offline setting where</font><font color="#CCCCCC"> you're</font>

658
00:26:28,740 --> 00:26:34,530
<font color="#E5E5E5">online so both of those can</font><font color="#CCCCCC"> be avoided</font>

659
00:26:31,020 --> 00:26:37,040
<font color="#E5E5E5">if in these other two</font><font color="#CCCCCC"> cases but</font><font color="#E5E5E5"> this is</font>

660
00:26:34,530 --> 00:26:39,899
sort<font color="#CCCCCC"> of the summary</font><font color="#E5E5E5"> of the complexities</font>

661
00:26:37,040 --> 00:26:42,990
let me finish with a bunch of<font color="#E5E5E5"> open</font>

662
00:26:39,900 --> 00:26:45,450
<font color="#CCCCCC">questions</font><font color="#E5E5E5"> things that can improve the</font>

663
00:26:42,990 --> 00:26:48,300
<font color="#E5E5E5">sort of this approach are one is if you</font>

664
00:26:45,450 --> 00:26:50,220
<font color="#CCCCCC">have all the</font><font color="#E5E5E5"> extensions that</font><font color="#CCCCCC"> are only</font>

665
00:26:48,300 --> 00:26:52,320
required<font color="#CCCCCC"> to messages all there so</font>

666
00:26:50,220 --> 00:26:54,600
because<font color="#CCCCCC"> we don't have such</font><font color="#E5E5E5"> ot extensions</font>

667
00:26:52,320 --> 00:26:57,179
<font color="#E5E5E5">we we cannot use ot extension actually</font>

668
00:26:54,600 --> 00:26:59,129
<font color="#CCCCCC">to in this sort</font><font color="#E5E5E5"> of to achieve get non</font>

669
00:26:57,180 --> 00:27:01,950
interactive protocols<font color="#E5E5E5"> so that would be</font>

670
00:26:59,130 --> 00:27:05,400
<font color="#CCCCCC">very</font><font color="#E5E5E5"> interesting the oblivious switching</font>

671
00:27:01,950 --> 00:27:07,890
<font color="#CCCCCC">at</font><font color="#E5E5E5"> for protocol is requires n log N</font><font color="#CCCCCC"> or</font>

672
00:27:05,400 --> 00:27:10,320
T's<font color="#CCCCCC"> okay so it would be nice to be cut</font>

673
00:27:07,890 --> 00:27:12,540
<font color="#CCCCCC">in</font><font color="#E5E5E5"> half</font><font color="#CCCCCC"> sort</font><font color="#E5E5E5"> of this non interactive or</font>

674
00:27:10,320 --> 00:27:13,980
<font color="#CCCCCC">obvious machine network or we should say</font>

675
00:27:12,540 --> 00:27:15,899
not switching<font color="#CCCCCC"> network oblivious</font>

676
00:27:13,980 --> 00:27:18,240
<font color="#CCCCCC">so</font><font color="#E5E5E5"> repair mutation with this sort of</font>

677
00:27:15,900 --> 00:27:20,760
<font color="#CCCCCC">padding property that we want we</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> it</font>

678
00:27:18,240 --> 00:27:22,380
to be<font color="#CCCCCC"> non interactive but I have</font><font color="#E5E5E5"> often</font>

679
00:27:20,760 --> 00:27:24,570
complexity<font color="#E5E5E5"> there is</font><font color="#CCCCCC"> often you</font><font color="#E5E5E5"> can easily</font>

680
00:27:22,380 --> 00:27:26,100
for example<font color="#CCCCCC"> do get off and complex David</font>

681
00:27:24,570 --> 00:27:28,230
additively<font color="#CCCCCC"> home offering encryption but</font>

682
00:27:26,100 --> 00:27:29,820
<font color="#CCCCCC">it actually requires</font><font color="#E5E5E5"> three messages so</font>

683
00:27:28,230 --> 00:27:31,260
it's not<font color="#CCCCCC"> not interactive so it would be</font>

684
00:27:29,820 --> 00:27:31,980
nice<font color="#CCCCCC"> to sort</font><font color="#E5E5E5"> of do that somewhat</font>

685
00:27:31,260 --> 00:27:37,140
efficiently

686
00:27:31,980 --> 00:27:38,730
and then I mentioned a bunch of other

687
00:27:37,140 --> 00:27:40,350
questions<font color="#CCCCCC"> I also mentioned that would be</font>

688
00:27:38,730 --> 00:27:43,350
nice to<font color="#E5E5E5"> get sort of and this may be</font>

689
00:27:40,350 --> 00:27:44,939
<font color="#CCCCCC">already so I have no idea but</font><font color="#E5E5E5"> if you can</font>

690
00:27:43,350 --> 00:27:47,669
get this<font color="#E5E5E5"> sort of</font><font color="#CCCCCC"> ot base or morphic</font>

691
00:27:44,940 --> 00:27:50,760
commitments that<font color="#CCCCCC"> are</font><font color="#E5E5E5"> not interactive and</font>

692
00:27:47,670 --> 00:27:53,810
have constant rates without<font color="#E5E5E5"> assuming</font>

693
00:27:50,760 --> 00:27:57,420
random<font color="#E5E5E5"> Oracle I think that would</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> be</font>

694
00:27:53,810 --> 00:28:01,070
interesting addition that<font color="#CCCCCC"> will improve</font>

695
00:27:57,420 --> 00:28:01,070
<font color="#E5E5E5">efficiencies okay with that</font>

696
00:28:01,380 --> 00:28:03,899
[Applause]

