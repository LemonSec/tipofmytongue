1
00:00:00,410 --> 00:00:05,310
hello<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a joint work with my</font>

2
00:00:03,419 --> 00:00:07,140
<font color="#E5E5E5">advisor</font><font color="#CCCCCC"> micro</font><font color="#E5E5E5"> slack at Oregon State</font>

3
00:00:05,310 --> 00:00:10,710
University

4
00:00:07,140 --> 00:00:12,690
so private set intersection<font color="#CCCCCC"> refers to</font>

5
00:00:10,710 --> 00:00:15,120
this problem of<font color="#CCCCCC"> two or maybe</font><font color="#E5E5E5"> more</font>

6
00:00:12,690 --> 00:00:17,100
parties<font color="#E5E5E5"> each holding a set which they</font>

7
00:00:15,120 --> 00:00:20,509
wish<font color="#CCCCCC"> to keep private</font><font color="#E5E5E5"> but they still wish</font>

8
00:00:17,100 --> 00:00:22,760
<font color="#CCCCCC">to learn the intersection of the sets so</font>

9
00:00:20,510 --> 00:00:24,930
throughout this talk I'll use the

10
00:00:22,760 --> 00:00:27,930
terminology<font color="#CCCCCC"> of a sender and a receiver</font>

11
00:00:24,930 --> 00:00:32,729
<font color="#E5E5E5">and they built fried their sets but only</font>

12
00:00:27,930 --> 00:00:35,280
the receiver<font color="#CCCCCC"> lends the intersection to</font>

13
00:00:32,729 --> 00:00:36,360
motivate this<font color="#CCCCCC"> one</font><font color="#E5E5E5"> of my favorite</font>

14
00:00:35,280 --> 00:00:37,890
<font color="#CCCCCC">applications the private set</font>

15
00:00:36,360 --> 00:00:40,950
intersection<font color="#E5E5E5"> is so this contact</font>

16
00:00:37,890 --> 00:00:43,050
discovery<font color="#E5E5E5"> scenario where say</font><font color="#CCCCCC"> X signal</font>

17
00:00:40,950 --> 00:00:45,180
has a big<font color="#E5E5E5"> list of users and then there's</font>

18
00:00:43,050 --> 00:00:47,038
some new customers<font color="#CCCCCC"> I just signed</font><font color="#E5E5E5"> up for</font>

19
00:00:45,180 --> 00:00:49,440
the service and the customer<font color="#E5E5E5"> wants to</font>

20
00:00:47,039 --> 00:00:52,350
learn which<font color="#CCCCCC"> of its contacts use the</font>

21
00:00:49,440 --> 00:00:53,370
signal app and so but they<font color="#E5E5E5"> don't</font>

22
00:00:52,350 --> 00:00:55,410
<font color="#E5E5E5">necessarily want</font><font color="#CCCCCC"> to reveal all their</font>

23
00:00:53,370 --> 00:00:56,669
<font color="#E5E5E5">contacts</font><font color="#CCCCCC"> and signal</font><font color="#E5E5E5"> doesn't necessarily</font>

24
00:00:55,410 --> 00:00:59,190
would just want<font color="#E5E5E5"> to publish the list of</font>

25
00:00:56,670 --> 00:01:01,949
users<font color="#E5E5E5"> and so they can run</font><font color="#CCCCCC"> a private set</font>

26
00:00:59,190 --> 00:01:03,989
intersection protocol where only the the

27
00:01:01,949 --> 00:01:06,689
user learns the other people that are

28
00:01:03,989 --> 00:01:08,100
there<font color="#CCCCCC"> you know also on the service</font><font color="#E5E5E5"> and</font>

29
00:01:06,689 --> 00:01:10,470
there are many other<font color="#CCCCCC"> applications but</font>

30
00:01:08,100 --> 00:01:12,000
<font color="#E5E5E5">I'll move on</font><font color="#CCCCCC"> one of our fundamental</font>

31
00:01:10,470 --> 00:01:15,780
building blocks that we<font color="#E5E5E5"> use is a</font>

32
00:01:12,000 --> 00:01:17,640
oblivious<font color="#E5E5E5"> transfer and in this sort</font><font color="#CCCCCC"> of</font>

33
00:01:15,780 --> 00:01:20,700
functionality<font color="#CCCCCC"> Alice on the left hand</font>

34
00:01:17,640 --> 00:01:23,040
side has two messages<font color="#E5E5E5"> strings and</font><font color="#CCCCCC"> Bob</font>

35
00:01:20,700 --> 00:01:25,439
has a single bit<font color="#E5E5E5"> C and Bob wishes to</font>

36
00:01:23,040 --> 00:01:28,110
learn<font color="#E5E5E5"> MC and nothing about the other</font>

37
00:01:25,439 --> 00:01:31,439
message and Alice shouldn't learn the

38
00:01:28,110 --> 00:01:34,320
seat<font color="#E5E5E5"> see the bit so they're highly</font>

39
00:01:31,439 --> 00:01:36,750
efficient<font color="#E5E5E5"> and malicious</font><font color="#CCCCCC"> malicious</font><font color="#E5E5E5"> secure</font>

40
00:01:34,320 --> 00:01:38,880
protocols for this<font color="#E5E5E5"> and so it sort of for</font>

41
00:01:36,750 --> 00:01:40,549
<font color="#E5E5E5">this protocol and it motivates it as the</font>

42
00:01:38,880 --> 00:01:46,740
basis for private<font color="#E5E5E5"> site intersection</font>

43
00:01:40,549 --> 00:01:48,060
<font color="#E5E5E5">that's practically fast</font><font color="#CCCCCC"> another one of</font>

44
00:01:46,740 --> 00:01:50,280
our building blocks<font color="#E5E5E5"> is known as a bloom</font>

45
00:01:48,060 --> 00:01:52,590
filter<font color="#CCCCCC"> this is a data structure that</font>

46
00:01:50,280 --> 00:01:54,299
sort of<font color="#E5E5E5"> similar to a hash table except</font>

47
00:01:52,590 --> 00:01:57,020
<font color="#E5E5E5">for it only allows for testing of set</font>

48
00:01:54,299 --> 00:02:00,570
membership<font color="#E5E5E5"> so is an item in my set and</font>

49
00:01:57,020 --> 00:02:04,259
<font color="#CCCCCC">it's parameterize by</font><font color="#E5E5E5"> K hash functions</font><font color="#CCCCCC"> h1</font>

50
00:02:00,570 --> 00:02:06,059
through<font color="#E5E5E5"> H K and</font><font color="#CCCCCC"> in a bit array denoted</font>

51
00:02:04,259 --> 00:02:09,568
here by B which<font color="#CCCCCC"> is initialized</font><font color="#E5E5E5"> to all</font>

52
00:02:06,060 --> 00:02:12,960
zeros<font color="#E5E5E5"> so to insert an item into this</font>

53
00:02:09,568 --> 00:02:14,940
bloom filter<font color="#E5E5E5"> you simply set all the bit</font>

54
00:02:12,960 --> 00:02:17,430
locations<font color="#E5E5E5"> index by the hash functions</font><font color="#CCCCCC"> 2</font>

55
00:02:14,940 --> 00:02:20,160
<font color="#CCCCCC">1 and you can</font><font color="#E5E5E5"> repeat this</font><font color="#CCCCCC"> operation for</font>

56
00:02:17,430 --> 00:02:21,630
other other<font color="#E5E5E5"> items simply just by</font>

57
00:02:20,160 --> 00:02:23,190
<font color="#CCCCCC">repeatedly</font><font color="#E5E5E5"> sending them to one</font>

58
00:02:21,630 --> 00:02:26,490
<font color="#E5E5E5">regardless of what they were before</font><font color="#CCCCCC"> and</font>

59
00:02:23,190 --> 00:02:28,440
then not too hard<font color="#E5E5E5"> to figure out to test</font>

60
00:02:26,490 --> 00:02:30,450
set membership<font color="#CCCCCC"> we simply do the same</font>

61
00:02:28,440 --> 00:02:32,970
thing again<font color="#E5E5E5"> but</font><font color="#CCCCCC"> now what we do is we</font>

62
00:02:30,450 --> 00:02:34,890
take the<font color="#E5E5E5"> bitwise are the bit and of all</font>

63
00:02:32,970 --> 00:02:37,800
these and that reports whether an item

64
00:02:34,890 --> 00:02:42,630
is<font color="#CCCCCC"> in an</font><font color="#E5E5E5"> intersection or in this blue</font>

65
00:02:37,800 --> 00:02:44,610
<font color="#E5E5E5">field or not so it's easy to</font><font color="#CCCCCC"> see when</font>

66
00:02:42,630 --> 00:02:47,010
you insert like n items<font color="#E5E5E5"> into a bloom</font>

67
00:02:44,610 --> 00:02:49,260
filter<font color="#CCCCCC"> with sort</font><font color="#E5E5E5"> of M slots there's no</font>

68
00:02:47,010 --> 00:02:51,510
false negatives<font color="#E5E5E5"> and that we always if an</font>

69
00:02:49,260 --> 00:02:53,970
items in it<font color="#E5E5E5"> we always say yes it's it's</font>

70
00:02:51,510 --> 00:02:56,850
there<font color="#CCCCCC"> but</font><font color="#E5E5E5"> there is some sort</font><font color="#CCCCCC"> of</font>

71
00:02:53,970 --> 00:02:59,130
probabilistic<font color="#E5E5E5"> property of whether for an</font>

72
00:02:56,850 --> 00:03:01,230
item<font color="#E5E5E5"> that hasn't been inserted we may</font>

73
00:02:59,130 --> 00:03:04,380
<font color="#E5E5E5">falsely report it as being inserted and</font>

74
00:03:01,230 --> 00:03:06,570
this sort of but this bad case can be

75
00:03:04,380 --> 00:03:08,430
bounded<font color="#E5E5E5"> to be negligible and your</font>

76
00:03:06,570 --> 00:03:11,820
security<font color="#E5E5E5"> parameter and like intuitively</font>

77
00:03:08,430 --> 00:03:13,560
<font color="#CCCCCC">what</font><font color="#E5E5E5"> happens is that at least one of the</font>

78
00:03:11,820 --> 00:03:15,420
hash functions will likely hit one of

79
00:03:13,560 --> 00:03:18,210
<font color="#E5E5E5">the zeros and we just make this event</font>

80
00:03:15,420 --> 00:03:22,109
<font color="#E5E5E5">very likely</font><font color="#CCCCCC"> for all items which haven't</font>

81
00:03:18,210 --> 00:03:23,910
<font color="#E5E5E5">actually been inserted another cool</font>

82
00:03:22,110 --> 00:03:26,310
property of bloom filters is that<font color="#E5E5E5"> the</font>

83
00:03:23,910 --> 00:03:28,320
bitwise<font color="#CCCCCC"> and</font><font color="#E5E5E5"> of two bloom filters is</font>

84
00:03:26,310 --> 00:03:30,840
itself a valid bloom filter for the

85
00:03:28,320 --> 00:03:33,450
intersection<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> two sets so to see</font>

86
00:03:30,840 --> 00:03:36,240
this we can just<font color="#CCCCCC"> take</font><font color="#E5E5E5"> the end of these</font>

87
00:03:33,450 --> 00:03:38,010
two bloom filters and in fact a<font color="#E5E5E5"> is the</font>

88
00:03:36,240 --> 00:03:40,350
<font color="#E5E5E5">only item</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> intersection and you</font>

89
00:03:38,010 --> 00:03:42,299
can see that we do still a report<font color="#CCCCCC"> as a</font>

90
00:03:40,350 --> 00:03:43,829
being in the bitwise and of them however

91
00:03:42,300 --> 00:03:45,150
<font color="#E5E5E5">there's some sort</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> additional</font>

92
00:03:43,830 --> 00:03:47,010
<font color="#CCCCCC">information that's</font><font color="#E5E5E5"> being leaked here</font>

93
00:03:45,150 --> 00:03:49,110
particularly<font color="#E5E5E5"> that like bit in the middle</font>

94
00:03:47,010 --> 00:03:51,840
which is<font color="#CCCCCC"> this sort</font><font color="#E5E5E5"> of randomly get set</font>

95
00:03:49,110 --> 00:03:55,140
to<font color="#E5E5E5"> one and if you think about like the</font>

96
00:03:51,840 --> 00:03:56,940
simulation of this<font color="#E5E5E5"> the simulator only</font>

97
00:03:55,140 --> 00:03:58,470
knows the<font color="#E5E5E5"> intersection itself and so it</font>

98
00:03:56,940 --> 00:04:00,090
wouldn't<font color="#E5E5E5"> be able to set this know which</font>

99
00:03:58,470 --> 00:04:01,380
bit to set additionally and so this

100
00:04:00,090 --> 00:04:03,270
<font color="#E5E5E5">somehow inherently leaks more</font>

101
00:04:01,380 --> 00:04:07,740
information than just<font color="#E5E5E5"> the intersection</font>

102
00:04:03,270 --> 00:04:10,800
itself<font color="#CCCCCC"> dong</font><font color="#E5E5E5"> Chen and when in 2013 sort</font>

103
00:04:07,740 --> 00:04:13,020
of saw this observation<font color="#E5E5E5"> and overcame</font>

104
00:04:10,800 --> 00:04:15,690
<font color="#CCCCCC">this slight limitation by adding some</font>

105
00:04:13,020 --> 00:04:19,799
<font color="#CCCCCC">additional stuff</font><font color="#E5E5E5"> so here on the right</font>

106
00:04:15,690 --> 00:04:21,959
<font color="#CCCCCC">the receiver samples</font><font color="#E5E5E5"> generates our</font>

107
00:04:19,798 --> 00:04:24,969
traditional bloom filter and then on the

108
00:04:21,959 --> 00:04:28,359
<font color="#CCCCCC">left-hand side the sender generates</font>

109
00:04:24,970 --> 00:04:30,160
this array of<font color="#E5E5E5"> strings of random strings</font>

110
00:04:28,360 --> 00:04:33,250
of the same<font color="#E5E5E5"> length as the bloom</font><font color="#CCCCCC"> filter</font>

111
00:04:30,160 --> 00:04:35,620
and then they perform an oblivious

112
00:04:33,250 --> 00:04:38,080
transfer for each of these<font color="#E5E5E5"> rows where</font>

113
00:04:35,620 --> 00:04:41,140
the<font color="#E5E5E5"> selection bit for the oblivious</font>

114
00:04:38,080 --> 00:04:43,659
<font color="#CCCCCC">dancer is the bloom filter bit</font><font color="#E5E5E5"> and so by</font>

115
00:04:41,140 --> 00:04:47,229
doing<font color="#E5E5E5"> this</font><font color="#CCCCCC"> the receiver picks up what's</font>

116
00:04:43,660 --> 00:04:48,970
known as a garbled bloom filter and this

117
00:04:47,230 --> 00:04:50,380
<font color="#CCCCCC">is</font><font color="#E5E5E5"> so that if they have a bit</font><font color="#CCCCCC"> of one</font>

118
00:04:48,970 --> 00:04:52,030
they<font color="#CCCCCC"> learn the message otherwise</font><font color="#E5E5E5"> they</font>

119
00:04:50,380 --> 00:04:54,130
learn this box string which is<font color="#E5E5E5"> just</font>

120
00:04:52,030 --> 00:04:57,669
thinking about all<font color="#CCCCCC"> 0 string or anything</font>

121
00:04:54,130 --> 00:04:59,560
that's not<font color="#CCCCCC"> important</font><font color="#E5E5E5"> and now we have the</font>

122
00:04:57,670 --> 00:05:02,980
sender on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> left-hand side</font><font color="#E5E5E5"> construct</font>

123
00:04:59,560 --> 00:05:05,710
their own<font color="#E5E5E5"> standard bloom filter and the</font>

124
00:05:02,980 --> 00:05:08,040
final sort of brilliant thing that they

125
00:05:05,710 --> 00:05:10,030
saw is you can XOR together these

126
00:05:08,040 --> 00:05:11,680
messages<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> indexed by</font><font color="#CCCCCC"> the hash</font>

127
00:05:10,030 --> 00:05:13,929
functions to create<font color="#CCCCCC"> a sort of</font><font color="#E5E5E5"> an</font>

128
00:05:11,680 --> 00:05:18,100
<font color="#E5E5E5">encoding of the corresponding value so a</font>

129
00:05:13,930 --> 00:05:20,620
is encoded as<font color="#CCCCCC"> m 0x or</font><font color="#E5E5E5"> m</font><font color="#CCCCCC"> v do the hash</font>

130
00:05:18,100 --> 00:05:23,040
functions<font color="#E5E5E5"> and so then we</font><font color="#CCCCCC"> can send</font><font color="#E5E5E5"> over</font>

131
00:05:20,620 --> 00:05:25,300
<font color="#CCCCCC">these encoding</font><font color="#E5E5E5"> x' to the receiver and</font>

132
00:05:23,040 --> 00:05:26,830
<font color="#E5E5E5">because they</font><font color="#CCCCCC"> used oblivious transfer to</font>

133
00:05:25,300 --> 00:05:28,780
pick up all the messages<font color="#E5E5E5"> that they are</font>

134
00:05:26,830 --> 00:05:30,430
indexing<font color="#E5E5E5"> they can also generate the</font>

135
00:05:28,780 --> 00:05:33,640
<font color="#CCCCCC">corresponding sort of set of</font><font color="#E5E5E5"> encodings</font>

136
00:05:30,430 --> 00:05:35,740
<font color="#CCCCCC">for their items in their set and as you</font>

137
00:05:33,640 --> 00:05:37,840
can<font color="#CCCCCC"> see this encoding</font><font color="#E5E5E5"> for a is in both</font>

138
00:05:35,740 --> 00:05:39,850
of<font color="#CCCCCC"> these</font><font color="#E5E5E5"> encoded sets and so you can</font>

139
00:05:37,840 --> 00:05:45,190
sort of translate back<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the original</font>

140
00:05:39,850 --> 00:05:47,710
set what<font color="#E5E5E5"> the intersection is so in the</font>

141
00:05:45,190 --> 00:05:49,360
semi<font color="#E5E5E5"> honest setting it's not hard to see</font>

142
00:05:47,710 --> 00:05:52,120
that<font color="#CCCCCC"> this is secured against us send me</font>

143
00:05:49,360 --> 00:05:54,790
on a sender<font color="#CCCCCC"> and that</font><font color="#E5E5E5"> one way I like</font><font color="#CCCCCC"> to</font>

144
00:05:52,120 --> 00:05:57,040
spine is all arrows leave the sender so

145
00:05:54,790 --> 00:05:59,380
it's can't leak any information<font color="#CCCCCC"> but</font>

146
00:05:57,040 --> 00:06:03,610
totally the<font color="#CCCCCC"> ot's hide the selection bits</font>

147
00:05:59,380 --> 00:06:05,260
<font color="#E5E5E5">and so it's great</font><font color="#CCCCCC"> and then it is also</font>

148
00:06:03,610 --> 00:06:07,090
<font color="#E5E5E5">going to be made secure against a semi</font>

149
00:06:05,260 --> 00:06:09,190
honest receiver<font color="#E5E5E5"> pretty much the only</font>

150
00:06:07,090 --> 00:06:11,260
<font color="#E5E5E5">thing that they can do is that for some</font>

151
00:06:09,190 --> 00:06:14,800
<font color="#E5E5E5">why that's not in their set they may be</font>

152
00:06:11,260 --> 00:06:18,520
able<font color="#E5E5E5"> to learn the encoding so in this</font>

153
00:06:14,800 --> 00:06:21,070
case encoding of Y prime is<font color="#E5E5E5"> M 3 XOR M 4</font>

154
00:06:18,520 --> 00:06:23,859
<font color="#CCCCCC">but as you can</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> m4 isn't in the set</font>

155
00:06:21,070 --> 00:06:26,290
of messages<font color="#CCCCCC"> that they know</font><font color="#E5E5E5"> and in fact</font>

156
00:06:23,860 --> 00:06:27,610
<font color="#CCCCCC">dongqn when showed that there's</font><font color="#E5E5E5"> sort of</font>

157
00:06:26,290 --> 00:06:29,200
an equivalence between<font color="#CCCCCC"> the false</font>

158
00:06:27,610 --> 00:06:30,640
positive rate<font color="#E5E5E5"> and like a traditional</font>

159
00:06:29,200 --> 00:06:32,770
bloom filter and this<font color="#E5E5E5"> sort of style</font>

160
00:06:30,640 --> 00:06:36,159
attack and so this can just be bounded

161
00:06:32,770 --> 00:06:37,359
to be negligible and so in the semi

162
00:06:36,160 --> 00:06:39,390
honest setting<font color="#E5E5E5"> everything works out</font>

163
00:06:37,360 --> 00:06:41,620
<font color="#E5E5E5">great</font>

164
00:06:39,390 --> 00:06:44,800
unfortunately when we go to the militia

165
00:06:41,620 --> 00:06:47,770
setting<font color="#E5E5E5"> things aren't quite as nice as</font>

166
00:06:44,800 --> 00:06:51,010
usual<font color="#CCCCCC"> and particularly</font><font color="#E5E5E5"> it's in ski</font>

167
00:06:47,770 --> 00:06:53,349
against a receiver and once you see<font color="#E5E5E5"> this</font>

168
00:06:51,010 --> 00:06:55,120
attack it's obvious<font color="#E5E5E5"> they could instead</font>

169
00:06:53,350 --> 00:06:58,780
<font color="#E5E5E5">of using</font><font color="#CCCCCC"> zeros in many places they can</font>

170
00:06:55,120 --> 00:07:00,310
simply always use the one string<font color="#CCCCCC"> one bit</font>

171
00:06:58,780 --> 00:07:03,309
and<font color="#E5E5E5"> pick up all the corresponding</font>

172
00:07:00,310 --> 00:07:06,100
messages<font color="#E5E5E5"> in there and therefore they</font><font color="#CCCCCC"> can</font>

173
00:07:03,310 --> 00:07:12,300
simply probe for the sort of<font color="#CCCCCC"> brute-force</font>

174
00:07:06,100 --> 00:07:15,610
attack this X hat term and recover<font color="#CCCCCC"> all</font>

175
00:07:12,300 --> 00:07:18,670
values so in their paper the

176
00:07:15,610 --> 00:07:19,990
jeongdongjin<font color="#CCCCCC"> went sort of proposed</font><font color="#E5E5E5"> first</font>

177
00:07:18,670 --> 00:07:21,490
they<font color="#E5E5E5"> proposed the semi honest protocol</font>

178
00:07:19,990 --> 00:07:24,490
and<font color="#E5E5E5"> then they sort of a</font><font color="#CCCCCC"> property based</font>

179
00:07:21,490 --> 00:07:26,740
manner put forth a sort of a

180
00:07:24,490 --> 00:07:28,540
<font color="#CCCCCC">countermeasure to</font><font color="#E5E5E5"> this attack which they</font>

181
00:07:26,740 --> 00:07:30,520
<font color="#E5E5E5">claimed to make it malicious secure and</font>

182
00:07:28,540 --> 00:07:32,410
<font color="#E5E5E5">their</font><font color="#CCCCCC"> main idea was to restrict</font><font color="#E5E5E5"> the</font>

183
00:07:30,520 --> 00:07:34,930
receiver to only<font color="#E5E5E5"> using valid bloom</font>

184
00:07:32,410 --> 00:07:38,140
filters so here this all one blue filter

185
00:07:34,930 --> 00:07:39,400
isn't<font color="#CCCCCC"> valid and this</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> this</font>

186
00:07:38,140 --> 00:07:41,440
translates when you<font color="#CCCCCC"> actually want to do</font>

187
00:07:39,400 --> 00:07:44,799
it is that we<font color="#CCCCCC"> want to make it roughly</font>

188
00:07:41,440 --> 00:07:48,550
like half the bits in this<font color="#E5E5E5"> bloom filter</font>

189
00:07:44,800 --> 00:07:50,140
be one and half<font color="#E5E5E5"> zero so their idea was</font>

190
00:07:48,550 --> 00:07:52,840
<font color="#E5E5E5">to make the receiver prove there's arrow</font>

191
00:07:50,140 --> 00:07:55,419
choice bits<font color="#CCCCCC"> and by doing this</font><font color="#E5E5E5"> they have</font>

192
00:07:52,840 --> 00:07:58,570
the sender first sample<font color="#E5E5E5"> random key s and</font>

193
00:07:55,420 --> 00:08:01,150
then generate a secret sharing<font color="#E5E5E5"> or M over</font>

194
00:07:58,570 --> 00:08:04,780
two out<font color="#E5E5E5"> of</font><font color="#CCCCCC"> M secret sharing of</font><font color="#E5E5E5"> this s</font>

195
00:08:01,150 --> 00:08:05,890
term<font color="#CCCCCC"> denoted ease sis</font><font color="#E5E5E5"> and then we will</font>

196
00:08:04,780 --> 00:08:07,960
encode

197
00:08:05,890 --> 00:08:10,030
instead of just transmitting nothing for

198
00:08:07,960 --> 00:08:13,000
the<font color="#E5E5E5"> zero</font><font color="#CCCCCC"> messages of the</font><font color="#E5E5E5"> OT will put</font>

199
00:08:10,030 --> 00:08:15,369
these<font color="#E5E5E5"> si terms in there</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> finally we</font>

200
00:08:13,000 --> 00:08:18,010
will encrypt this final message<font color="#E5E5E5"> under</font>

201
00:08:15,370 --> 00:08:21,280
this sort of master secret<font color="#CCCCCC"> s</font><font color="#E5E5E5"> and by</font>

202
00:08:18,010 --> 00:08:24,460
doing this to learn the intersection the

203
00:08:21,280 --> 00:08:26,710
<font color="#CCCCCC">receiver must</font><font color="#E5E5E5"> decrypt this</font><font color="#CCCCCC"> X hat term</font>

204
00:08:24,460 --> 00:08:28,330
and however<font color="#E5E5E5"> they have a problem in that</font>

205
00:08:26,710 --> 00:08:30,549
<font color="#CCCCCC">in all the places that they should have</font>

206
00:08:28,330 --> 00:08:32,049
used<font color="#E5E5E5"> zeros they had used once and so</font>

207
00:08:30,550 --> 00:08:35,650
they didn't get any<font color="#E5E5E5"> of the secret shares</font>

208
00:08:32,049 --> 00:08:38,579
of s and couldn't decrypt this and so by

209
00:08:35,650 --> 00:08:41,228
adding this countermeasure<font color="#CCCCCC"> we forced the</font>

210
00:08:38,580 --> 00:08:45,040
receiver to use many<font color="#E5E5E5"> zeros and</font>

211
00:08:41,229 --> 00:08:48,240
threatening the initial attack so one

212
00:08:45,040 --> 00:08:50,680
obvious<font color="#E5E5E5"> question is is this secure and</font>

213
00:08:48,240 --> 00:08:51,910
we did successfully force the receiver

214
00:08:50,680 --> 00:08:54,819
to<font color="#CCCCCC"> only use roughly</font>

215
00:08:51,910 --> 00:08:56,860
half ones and half<font color="#E5E5E5"> zeroes however as we</font>

216
00:08:54,820 --> 00:09:01,000
<font color="#CCCCCC">show in this work and in another</font><font color="#E5E5E5"> work by</font>

217
00:08:56,860 --> 00:09:03,010
<font color="#CCCCCC">Lam Baek</font><font color="#E5E5E5"> we by doing this countermeasure</font>

218
00:09:01,000 --> 00:09:04,750
we had actually introduced a selective

219
00:09:03,010 --> 00:09:06,460
failure attack on the part<font color="#E5E5E5"> of the sender</font>

220
00:09:04,750 --> 00:09:08,170
<font color="#E5E5E5">so now it was insecure against the</font>

221
00:09:06,460 --> 00:09:10,510
receiver now<font color="#E5E5E5"> or insecure again</font><font color="#CCCCCC"> Sri</font>

222
00:09:08,170 --> 00:09:13,599
sender and once you see it's<font color="#E5E5E5"> pretty</font>

223
00:09:10,510 --> 00:09:16,600
obvious if they<font color="#E5E5E5"> replace one of these s I</font>

224
00:09:13,600 --> 00:09:18,820
terms with<font color="#CCCCCC"> our random string R and then</font>

225
00:09:16,600 --> 00:09:20,650
if this R term gets picked up<font color="#CCCCCC"> by the</font>

226
00:09:18,820 --> 00:09:22,570
<font color="#CCCCCC">other party</font><font color="#E5E5E5"> they will try to</font><font color="#CCCCCC"> use it as a</font>

227
00:09:20,650 --> 00:09:25,270
part<font color="#CCCCCC"> of the secret sharing and the</font>

228
00:09:22,570 --> 00:09:28,360
secret<font color="#E5E5E5"> sharing will not be resolved to</font>

229
00:09:25,270 --> 00:09:30,160
<font color="#CCCCCC">the correct master secret s and so the</font>

230
00:09:28,360 --> 00:09:34,420
<font color="#E5E5E5">output of the intersection if they pick</font>

231
00:09:30,160 --> 00:09:37,060
up this if they pick up this bad R term

232
00:09:34,420 --> 00:09:39,969
will be the null set<font color="#E5E5E5"> and whether this</font>

233
00:09:37,060 --> 00:09:43,270
succeeds or fails inherently depends on

234
00:09:39,970 --> 00:09:44,710
their full set<font color="#E5E5E5"> Y and therefore it can't</font>

235
00:09:43,270 --> 00:09:45,880
<font color="#E5E5E5">be simulated</font><font color="#CCCCCC"> because the simulator only</font>

236
00:09:44,710 --> 00:09:50,440
knows the<font color="#E5E5E5"> intersection and not</font>

237
00:09:45,880 --> 00:09:51,610
necessarily the full set<font color="#E5E5E5"> Y so we sort of</font>

238
00:09:50,440 --> 00:09:56,050
tackle this problem in a different<font color="#E5E5E5"> way</font>

239
00:09:51,610 --> 00:09:58,420
<font color="#E5E5E5">by making making the receiver proof that</font>

240
00:09:56,050 --> 00:10:00,160
they use<font color="#CCCCCC"> zeroes</font><font color="#E5E5E5"> in an input input</font>

241
00:09:58,420 --> 00:10:03,729
<font color="#E5E5E5">independent way so first we have the</font>

242
00:10:00,160 --> 00:10:09,120
receiver<font color="#E5E5E5"> simply use all random bits</font>

243
00:10:03,730 --> 00:10:09,120
instead<font color="#E5E5E5"> of the bloom</font><font color="#CCCCCC"> filter as before</font>

244
00:10:09,990 --> 00:10:15,730
<font color="#CCCCCC">and then we have the</font><font color="#E5E5E5"> sender sample sent</font>

245
00:10:13,930 --> 00:10:17,680
over a challenge to reveal some subset

246
00:10:15,730 --> 00:10:19,750
of<font color="#E5E5E5"> these o T's and the</font><font color="#CCCCCC"> receiver must</font>

247
00:10:17,680 --> 00:10:23,469
prove<font color="#CCCCCC"> that they used zeros in many</font>

248
00:10:19,750 --> 00:10:25,450
places<font color="#CCCCCC"> if they if they see so for</font>

249
00:10:23,470 --> 00:10:27,250
example we might challenge<font color="#E5E5E5"> on these two</font>

250
00:10:25,450 --> 00:10:29,890
<font color="#E5E5E5">and we</font><font color="#CCCCCC"> would expect</font><font color="#E5E5E5"> roughly half of them</font>

251
00:10:27,250 --> 00:10:31,510
to be<font color="#CCCCCC"> zeros and</font><font color="#E5E5E5"> earth in this case they</font>

252
00:10:29,890 --> 00:10:36,280
need to prove<font color="#CCCCCC"> that</font><font color="#E5E5E5"> they</font><font color="#CCCCCC"> know ours are</font>

253
00:10:31,510 --> 00:10:39,610
<font color="#CCCCCC">too</font><font color="#E5E5E5"> and then we eliminate these</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> up</font>

254
00:10:36,280 --> 00:10:41,709
<font color="#CCCCCC">o T's and consolidate the remaining ones</font>

255
00:10:39,610 --> 00:10:44,770
but now we have<font color="#E5E5E5"> another problem in that</font>

256
00:10:41,710 --> 00:10:46,660
<font color="#E5E5E5">this doesn't correspond to a the bloom</font>

257
00:10:44,770 --> 00:10:52,120
filter<font color="#CCCCCC"> that we want</font><font color="#E5E5E5"> to continue with the</font>

258
00:10:46,660 --> 00:10:53,560
protocol<font color="#CCCCCC"> and so what we do is we</font><font color="#E5E5E5"> need</font>

259
00:10:52,120 --> 00:10:55,270
<font color="#E5E5E5">first have the receiver construct the</font>

260
00:10:53,560 --> 00:10:57,699
bloom filter<font color="#CCCCCC"> that they wish to have and</font>

261
00:10:55,270 --> 00:11:00,160
then they send a<font color="#E5E5E5"> random</font><font color="#CCCCCC"> permutation that</font>

262
00:10:57,700 --> 00:11:03,550
<font color="#CCCCCC">map's these random oaties to the desired</font>

263
00:11:00,160 --> 00:11:05,170
bloom filter and intuitively<font color="#E5E5E5"> one way you</font>

264
00:11:03,550 --> 00:11:06,089
can do this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> just you keep picking</font>

265
00:11:05,170 --> 00:11:07,559
random

266
00:11:06,089 --> 00:11:09,540
items and bringing them up to<font color="#CCCCCC"> the top</font>

267
00:11:07,559 --> 00:11:10,980
<font color="#E5E5E5">and because</font><font color="#CCCCCC"> there it's</font><font color="#E5E5E5"> sort of this</font>

268
00:11:09,540 --> 00:11:14,730
<font color="#CCCCCC">randomized process it</font><font color="#E5E5E5"> doesn't actually</font>

269
00:11:10,980 --> 00:11:16,079
<font color="#CCCCCC">deal any additional information and so</font>

270
00:11:14,730 --> 00:11:17,970
now we arrive at the bloom<font color="#CCCCCC"> filter that</font>

271
00:11:16,079 --> 00:11:23,609
we desire and we can simply complete

272
00:11:17,970 --> 00:11:25,769
protocol as before so one challenge<font color="#E5E5E5"> in</font>

273
00:11:23,610 --> 00:11:27,420
making<font color="#E5E5E5"> this technique work is that these</font>

274
00:11:25,769 --> 00:11:29,879
random<font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> teams and this cut and</font><font color="#CCCCCC"> choose</font>

275
00:11:27,420 --> 00:11:33,689
<font color="#E5E5E5">challenge may not result in</font><font color="#CCCCCC"> exactly half</font>

276
00:11:29,879 --> 00:11:36,029
ones and half zeroes<font color="#CCCCCC"> so in an</font><font color="#E5E5E5"> example I</font>

277
00:11:33,689 --> 00:11:38,759
gave<font color="#E5E5E5"> of course it works but an equally</font>

278
00:11:36,029 --> 00:11:40,079
likely example<font color="#E5E5E5"> you get all ones and the</font>

279
00:11:38,759 --> 00:11:42,959
only sensible thing here to do would be

280
00:11:40,079 --> 00:11:45,888
<font color="#CCCCCC">to</font><font color="#E5E5E5"> abort so we need some robust way to</font>

281
00:11:42,959 --> 00:11:48,839
<font color="#E5E5E5">sample these check these zero bits and</font>

282
00:11:45,889 --> 00:11:50,430
the so one way<font color="#E5E5E5"> to think about this is</font>

283
00:11:48,839 --> 00:11:52,410
that<font color="#E5E5E5"> we want</font><font color="#CCCCCC"> to make sure the property</font>

284
00:11:50,430 --> 00:11:54,748
<font color="#CCCCCC">that the probability of accusing the bad</font>

285
00:11:52,410 --> 00:11:57,569
or<font color="#CCCCCC"> good guy of cheating is negligible</font>

286
00:11:54,749 --> 00:11:59,279
<font color="#E5E5E5">and so because this is randomized</font>

287
00:11:57,569 --> 00:12:00,479
process the number of<font color="#CCCCCC"> zeros that</font><font color="#E5E5E5"> we'll</font>

288
00:11:59,279 --> 00:12:02,699
see is some follow some sort<font color="#CCCCCC"> of</font>

289
00:12:00,480 --> 00:12:05,790
distribution centered at the<font color="#E5E5E5"> expected</font>

290
00:12:02,699 --> 00:12:07,469
<font color="#E5E5E5">value</font><font color="#CCCCCC"> but was and then if we see</font>

291
00:12:05,790 --> 00:12:10,199
significantly fewer<font color="#CCCCCC"> zeroes we're gonna</font>

292
00:12:07,470 --> 00:12:11,699
turn<font color="#E5E5E5"> our abort and so it's pretty</font>

293
00:12:10,199 --> 00:12:13,229
<font color="#E5E5E5">straightforward we all we need to say is</font>

294
00:12:11,699 --> 00:12:15,620
<font color="#CCCCCC">that we need to bound the area below the</font>

295
00:12:13,230 --> 00:12:18,779
abort threshold to be<font color="#E5E5E5"> negligible</font><font color="#CCCCCC"> and</font>

296
00:12:15,620 --> 00:12:22,230
turn off<font color="#CCCCCC"> bounds are the</font><font color="#E5E5E5"> perfect tool for</font>

297
00:12:18,779 --> 00:12:24,509
this but the sort<font color="#CCCCCC"> of other property</font><font color="#E5E5E5"> that</font>

298
00:12:22,230 --> 00:12:26,939
we need<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that for a bad guy who may</font>

299
00:12:24,509 --> 00:12:28,470
<font color="#E5E5E5">provide significantly fewer zeros that</font>

300
00:12:26,939 --> 00:12:30,389
we still catch them with a high

301
00:12:28,470 --> 00:12:32,819
<font color="#CCCCCC">probability</font><font color="#E5E5E5"> and if they</font><font color="#CCCCCC"> just use a</font>

302
00:12:30,389 --> 00:12:34,829
couple<font color="#E5E5E5"> few fewer than specified you know</font>

303
00:12:32,819 --> 00:12:36,660
it's gonna be<font color="#CCCCCC"> hard to detect</font><font color="#E5E5E5"> that and so</font>

304
00:12:34,829 --> 00:12:38,910
we<font color="#E5E5E5"> ask the</font><font color="#CCCCCC"> question is if they use</font>

305
00:12:36,660 --> 00:12:42,540
significantly fewer zeros like<font color="#CCCCCC"> how many</font>

306
00:12:38,910 --> 00:12:44,370
<font color="#CCCCCC">can they get away</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> still not</font>

307
00:12:42,540 --> 00:12:46,199
succeed with anything but negligible

308
00:12:44,370 --> 00:12:48,149
probability<font color="#E5E5E5"> and so we can again apply</font>

309
00:12:46,199 --> 00:12:50,459
<font color="#E5E5E5">turn off bound to figure out where that</font>

310
00:12:48,149 --> 00:12:52,679
how<font color="#E5E5E5"> far that distribution can</font><font color="#CCCCCC"> be shifted</font>

311
00:12:50,459 --> 00:12:55,229
<font color="#E5E5E5">to the left and we cover this sort of T</font>

312
00:12:52,679 --> 00:12:56,639
value which is then<font color="#E5E5E5"> proportional to the</font>

313
00:12:55,230 --> 00:13:00,300
number of<font color="#E5E5E5"> zeros that they can get away</font>

314
00:12:56,639 --> 00:13:02,610
<font color="#CCCCCC">with and so by doing this we can sort of</font>

315
00:13:00,300 --> 00:13:04,469
bound the advantage of<font color="#E5E5E5"> the adversary</font><font color="#CCCCCC"> and</font>

316
00:13:02,610 --> 00:13:06,689
just sort of<font color="#E5E5E5"> make sure that the bloom</font>

317
00:13:04,470 --> 00:13:08,819
filter<font color="#CCCCCC"> is large enough</font><font color="#E5E5E5"> and one cool</font>

318
00:13:06,689 --> 00:13:10,349
property of<font color="#E5E5E5"> this is that in practice we</font>

319
00:13:08,819 --> 00:13:13,199
only need to check like<font color="#CCCCCC"> one percent of</font>

320
00:13:10,350 --> 00:13:15,170
all these<font color="#E5E5E5"> o T's and so it adds almost</font><font color="#CCCCCC"> no</font>

321
00:13:13,199 --> 00:13:17,740
overhead<font color="#E5E5E5"> compared</font><font color="#CCCCCC"> to the traditional</font>

322
00:13:15,170 --> 00:13:21,910
<font color="#CCCCCC">semi</font><font color="#E5E5E5"> honest protocol</font>

323
00:13:17,740 --> 00:13:24,400
and then finally<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to switch</font>

324
00:13:21,910 --> 00:13:26,350
gears<font color="#CCCCCC"> a little and talk</font><font color="#E5E5E5"> about one of our</font>

325
00:13:24,400 --> 00:13:29,470
assumptions<font color="#E5E5E5"> that we rely on this is the</font>

326
00:13:26,350 --> 00:13:31,990
<font color="#E5E5E5">random Oracle model</font><font color="#CCCCCC"> and to see</font><font color="#E5E5E5"> this one</font>

327
00:13:29,470 --> 00:13:33,730
of the important<font color="#CCCCCC"> properties that</font><font color="#E5E5E5"> a</font>

328
00:13:31,990 --> 00:13:37,120
simulator in the malicious setting must

329
00:13:33,730 --> 00:13:39,310
do is extract the<font color="#E5E5E5"> effective</font><font color="#CCCCCC"> input of the</font>

330
00:13:37,120 --> 00:13:42,120
corrupt parties and<font color="#E5E5E5"> this is case case</font>

331
00:13:39,310 --> 00:13:44,260
<font color="#E5E5E5">we're considering a corrupt receiver and</font>

332
00:13:42,120 --> 00:13:47,380
<font color="#E5E5E5">what the simulator must do is like</font>

333
00:13:44,260 --> 00:13:49,330
extract first<font color="#E5E5E5"> extract what their input</font>

334
00:13:47,380 --> 00:13:51,850
is in this<font color="#E5E5E5"> case</font><font color="#CCCCCC"> Y and then send it on to</font>

335
00:13:49,330 --> 00:13:53,980
<font color="#E5E5E5">the ideal functionality this psi box and</font>

336
00:13:51,850 --> 00:13:56,800
this<font color="#E5E5E5"> is sort of the simulation based</font>

337
00:13:53,980 --> 00:13:58,570
proofs<font color="#E5E5E5"> and then this</font><font color="#CCCCCC"> box gives back the</font>

338
00:13:56,800 --> 00:14:01,329
<font color="#E5E5E5">intersection which allows the completion</font>

339
00:13:58,570 --> 00:14:03,700
of the simulation<font color="#E5E5E5"> and so that's what we</font>

340
00:14:01,330 --> 00:14:06,760
want to<font color="#E5E5E5"> do but how the question is how</font>

341
00:14:03,700 --> 00:14:08,170
do we<font color="#E5E5E5"> extract this set Y the first thing</font>

342
00:14:06,760 --> 00:14:10,660
you might<font color="#CCCCCC"> observe is that we're doing</font>

343
00:14:08,170 --> 00:14:13,510
these oblivious transfers which they

344
00:14:10,660 --> 00:14:16,449
allow you<font color="#E5E5E5"> to extract the selection bits</font>

345
00:14:13,510 --> 00:14:19,150
and so we can learn the corresponding

346
00:14:16,450 --> 00:14:21,370
bloom filter that they were used<font color="#E5E5E5"> however</font>

347
00:14:19,150 --> 00:14:23,650
<font color="#CCCCCC">this turns</font><font color="#E5E5E5"> out although</font><font color="#CCCCCC"> you might</font><font color="#E5E5E5"> think</font>

348
00:14:21,370 --> 00:14:26,110
it's all we<font color="#E5E5E5"> need it's not the bloom</font>

349
00:14:23,650 --> 00:14:28,870
filter<font color="#E5E5E5"> by themselves are not invertible</font>

350
00:14:26,110 --> 00:14:31,120
naturally at least it's like just given

351
00:14:28,870 --> 00:14:32,650
a sequence<font color="#E5E5E5"> of ones and zeros</font><font color="#CCCCCC"> that</font>

352
00:14:31,120 --> 00:14:35,140
<font color="#CCCCCC">forming</font><font color="#E5E5E5"> bloom filter it's highly</font>

353
00:14:32,650 --> 00:14:37,780
non-trivial to sort of find out what set

354
00:14:35,140 --> 00:14:40,180
<font color="#E5E5E5">it corresponds to and while they do</font>

355
00:14:37,780 --> 00:14:41,709
exist invertible boom filters to<font color="#E5E5E5"> make</font>

356
00:14:40,180 --> 00:14:44,410
this situation<font color="#CCCCCC"> worse is that</font><font color="#E5E5E5"> this bloom</font>

357
00:14:41,710 --> 00:14:47,020
filter may not even correspond to any

358
00:14:44,410 --> 00:14:48,790
set and that<font color="#E5E5E5"> the malicious adversary may</font>

359
00:14:47,020 --> 00:14:50,829
just send you completely random messages

360
00:14:48,790 --> 00:14:53,040
and the simulator somehow needs to

361
00:14:50,830 --> 00:14:56,920
interpret this as I guess<font color="#E5E5E5"> the null set</font>

362
00:14:53,040 --> 00:14:58,660
so<font color="#CCCCCC"> this seems very</font><font color="#E5E5E5"> difficult</font><font color="#CCCCCC"> and so we</font>

363
00:14:56,920 --> 00:15:01,180
take a slightly different<font color="#E5E5E5"> route</font><font color="#CCCCCC"> and we</font>

364
00:14:58,660 --> 00:15:02,829
model these hash functions that map<font color="#E5E5E5"> into</font>

365
00:15:01,180 --> 00:15:05,680
<font color="#CCCCCC">the bloom filter</font><font color="#E5E5E5"> as the random Oracle</font>

366
00:15:02,830 --> 00:15:07,860
and by doing<font color="#E5E5E5"> this we allow the simulator</font>

367
00:15:05,680 --> 00:15:09,790
<font color="#E5E5E5">to observe the which items were</font>

368
00:15:07,860 --> 00:15:15,130
potentially inserted into this<font color="#E5E5E5"> bloom</font>

369
00:15:09,790 --> 00:15:17,640
filter and it's in particular<font color="#E5E5E5"> so first</font>

370
00:15:15,130 --> 00:15:20,080
we observe which items were extracted or

371
00:15:17,640 --> 00:15:21,730
hashed with the random Oracle's and<font color="#E5E5E5"> then</font>

372
00:15:20,080 --> 00:15:23,830
we check them against the<font color="#E5E5E5"> spume filter</font>

373
00:15:21,730 --> 00:15:27,010
<font color="#E5E5E5">this allows</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to extract sort of</font><font color="#CCCCCC"> this</font>

374
00:15:23,830 --> 00:15:28,510
set<font color="#E5E5E5"> Y an important point to be made is</font>

375
00:15:27,010 --> 00:15:30,760
that<font color="#E5E5E5"> even if additional calls to this</font>

376
00:15:28,510 --> 00:15:31,300
<font color="#E5E5E5">random Oracle are made if they weren't</font>

377
00:15:30,760 --> 00:15:33,790
<font color="#CCCCCC">actually in</font>

378
00:15:31,300 --> 00:15:35,769
<font color="#CCCCCC">started into the bloom filter itself</font>

379
00:15:33,790 --> 00:15:38,949
<font color="#E5E5E5">they won't get extracted</font><font color="#CCCCCC"> so it's a</font>

380
00:15:35,769 --> 00:15:40,959
two-stage extraction which the way then

381
00:15:38,950 --> 00:15:45,490
we<font color="#E5E5E5"> can send to the ideal psi and finish</font>

382
00:15:40,959 --> 00:15:47,739
the simulation<font color="#CCCCCC"> one in oh yeah one</font>

383
00:15:45,490 --> 00:15:49,769
important property<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I guess we use</font>

384
00:15:47,740 --> 00:15:51,760
is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we don't require the</font>

385
00:15:49,769 --> 00:15:53,500
<font color="#E5E5E5">programmability of these random Oracle's</font>

386
00:15:51,760 --> 00:15:57,130
so it's sort of a weaker random Oracle

387
00:15:53,500 --> 00:16:00,190
we just need to be able<font color="#E5E5E5"> to extract</font><font color="#CCCCCC"> and</font>

388
00:15:57,130 --> 00:16:01,510
then here I'd also like<font color="#CCCCCC"> to note</font><font color="#E5E5E5"> while we</font>

389
00:16:00,190 --> 00:16:04,029
design a private set intersection

390
00:16:01,510 --> 00:16:06,279
protocol<font color="#E5E5E5"> another way to view sort of our</font>

391
00:16:04,029 --> 00:16:09,720
the core construction<font color="#E5E5E5"> is as oblivious</font>

392
00:16:06,279 --> 00:16:11,890
PRF protocol protocol where and<font color="#E5E5E5"> I</font>

393
00:16:09,720 --> 00:16:15,399
<font color="#CCCCCC">one-party provides a set</font><font color="#E5E5E5"> and then you</font>

394
00:16:11,890 --> 00:16:17,439
get the PRF F<font color="#CCCCCC"> evaluated I and the other</font>

395
00:16:15,399 --> 00:16:19,870
party gets the function f itself and so

396
00:16:17,440 --> 00:16:21,579
OPRS<font color="#E5E5E5"> I use pretty widely I guess in</font>

397
00:16:19,870 --> 00:16:24,700
crypto and<font color="#E5E5E5"> so you might consider using</font>

398
00:16:21,579 --> 00:16:28,239
this sort of portion of our protocol<font color="#E5E5E5"> and</font>

399
00:16:24,700 --> 00:16:30,820
then<font color="#E5E5E5"> we turn it into</font><font color="#CCCCCC"> PSI you simply send</font>

400
00:16:28,240 --> 00:16:36,459
over the final encodings<font color="#E5E5E5"> so keep that in</font>

401
00:16:30,820 --> 00:16:39,370
<font color="#E5E5E5">mind</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then yeah so</font><font color="#CCCCCC"> we compare</font>

402
00:16:36,459 --> 00:16:42,670
ourselves to DeCristofaro<font color="#CCCCCC"> Kim and to</font>

403
00:16:39,370 --> 00:16:44,940
Deeks<font color="#E5E5E5"> of 2010 work which is a</font><font color="#CCCCCC"> most</font>

404
00:16:42,670 --> 00:16:48,370
<font color="#CCCCCC">secure sort of diffie-hellman style</font>

405
00:16:44,940 --> 00:16:51,100
<font color="#E5E5E5">protocol this they use exponentiation</font>

406
00:16:48,370 --> 00:16:53,950
<font color="#E5E5E5">and several zero knowledge proof for</font>

407
00:16:51,100 --> 00:16:55,450
each item<font color="#E5E5E5"> in the intersection and so</font>

408
00:16:53,950 --> 00:16:57,279
this results in significantly more

409
00:16:55,450 --> 00:17:00,070
running time between<font color="#E5E5E5"> like a hundred and</font>

410
00:16:57,279 --> 00:17:02,350
thirty five times slower<font color="#E5E5E5"> and just</font>

411
00:17:00,070 --> 00:17:03,850
because this just<font color="#E5E5E5"> goes back</font><font color="#CCCCCC"> to like how</font>

412
00:17:02,350 --> 00:17:09,599
much more efficient<font color="#E5E5E5"> oblivious transfer</font>

413
00:17:03,850 --> 00:17:12,099
is compared to exponentiation<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then</font>

414
00:17:09,599 --> 00:17:13,659
you could<font color="#E5E5E5"> also consider the trade-offs</font>

415
00:17:12,099 --> 00:17:16,629
between<font color="#E5E5E5"> amount of communication</font><font color="#CCCCCC"> and</font>

416
00:17:13,660 --> 00:17:20,110
running time so showing<font color="#E5E5E5"> the bottom dot</font>

417
00:17:16,630 --> 00:17:21,669
<font color="#E5E5E5">is</font><font color="#CCCCCC"> there protocol which requires</font>

418
00:17:20,109 --> 00:17:23,559
significantly more<font color="#CCCCCC"> time but it's less</font>

419
00:17:21,669 --> 00:17:24,760
less<font color="#E5E5E5"> data and so there's some sort of</font>

420
00:17:23,559 --> 00:17:27,129
trade-off here

421
00:17:24,760 --> 00:17:29,590
if you measure it it were<font color="#CCCCCC"> 38</font><font color="#E5E5E5"> times</font>

422
00:17:27,130 --> 00:17:31,600
<font color="#E5E5E5">faster</font><font color="#CCCCCC"> yeah but</font><font color="#E5E5E5"> we still</font><font color="#CCCCCC"> send 23 times</font>

423
00:17:29,590 --> 00:17:34,928
<font color="#E5E5E5">more data and this</font><font color="#CCCCCC"> is for the 1 million</font>

424
00:17:31,600 --> 00:17:37,990
<font color="#E5E5E5">size sets and so there's some</font><font color="#CCCCCC"> a little</font>

425
00:17:34,929 --> 00:17:42,550
bit of<font color="#E5E5E5"> trade-off</font><font color="#CCCCCC"> here and even if you</font>

426
00:17:37,990 --> 00:17:44,290
some times these exponentiations are

427
00:17:42,550 --> 00:17:45,180
inherently sort of<font color="#CCCCCC"> paralyzed Abul so</font>

428
00:17:44,290 --> 00:17:47,070
even if you add

429
00:17:45,180 --> 00:17:52,140
<font color="#E5E5E5">or threads though we're still outperform</font>

430
00:17:47,070 --> 00:17:55,409
the competition<font color="#E5E5E5"> and sort of an</font>

431
00:17:52,140 --> 00:17:57,840
<font color="#E5E5E5">interesting side note is that we because</font>

432
00:17:55,410 --> 00:18:00,720
we could implemented the original<font color="#E5E5E5"> dongqn</font>

433
00:17:57,840 --> 00:18:03,090
<font color="#E5E5E5">when paper and somewhat surprising the</font>

434
00:18:00,720 --> 00:18:04,860
malicious variant<font color="#CCCCCC"> so</font><font color="#E5E5E5"> much surprising is</font>

435
00:18:03,090 --> 00:18:06,810
that<font color="#CCCCCC"> their protocol required sniffing</font>

436
00:18:04,860 --> 00:18:09,179
<font color="#CCCCCC">only more time than all of them even</font>

437
00:18:06,810 --> 00:18:10,440
<font color="#CCCCCC">though it looks pretty similar</font><font color="#E5E5E5"> and this</font>

438
00:18:09,180 --> 00:18:13,200
sort of comes<font color="#CCCCCC"> back to the</font><font color="#E5E5E5"> point that</font>

439
00:18:10,440 --> 00:18:15,470
<font color="#E5E5E5">we're doing in their protocol that was</font>

440
00:18:13,200 --> 00:18:18,540
required like you know a hundred<font color="#E5E5E5"> million</font>

441
00:18:15,470 --> 00:18:20,400
out<font color="#E5E5E5"> of</font><font color="#CCCCCC"> fifty million secret</font><font color="#E5E5E5"> sharing so</font>

442
00:18:18,540 --> 00:18:22,020
<font color="#CCCCCC">awhile secret sharing</font><font color="#E5E5E5"> is inherently sort</font>

443
00:18:20,400 --> 00:18:25,770
of fast when you scale to that size

444
00:18:22,020 --> 00:18:26,730
<font color="#E5E5E5">things</font><font color="#CCCCCC"> left hand significantly so</font><font color="#E5E5E5"> that</font>

445
00:18:25,770 --> 00:18:28,410
was sort<font color="#CCCCCC"> of an interesting</font><font color="#E5E5E5"> side note</font>

446
00:18:26,730 --> 00:18:30,150
that we<font color="#CCCCCC"> observed that our</font><font color="#E5E5E5"> protocol is</font>

447
00:18:28,410 --> 00:18:34,760
definitely<font color="#E5E5E5"> faster</font><font color="#CCCCCC"> than the previous one</font>

448
00:18:30,150 --> 00:18:34,760
<font color="#E5E5E5">even if the previous</font><font color="#CCCCCC"> one was</font><font color="#E5E5E5"> insecure</font>

449
00:18:34,820 --> 00:18:41,460
and then another interesting<font color="#E5E5E5"> point to</font>

450
00:18:38,550 --> 00:18:43,409
compare against<font color="#CCCCCC"> an industry</font><font color="#E5E5E5"> psi is</font>

451
00:18:41,460 --> 00:18:44,940
performed<font color="#E5E5E5"> but they use sort of</font><font color="#CCCCCC"> Tish</font>

452
00:18:43,410 --> 00:18:49,920
traditionally they use an insecure

453
00:18:44,940 --> 00:18:51,330
variant where you<font color="#E5E5E5"> simply</font><font color="#CCCCCC"> plot put the</font>

454
00:18:49,920 --> 00:18:53,610
items through a<font color="#E5E5E5"> one-way</font><font color="#CCCCCC"> function and</font>

455
00:18:51,330 --> 00:18:55,110
then compare these unfortunately this is

456
00:18:53,610 --> 00:18:56,969
insecure<font color="#E5E5E5"> you can launch brute-force</font>

457
00:18:55,110 --> 00:18:59,129
attacks and<font color="#CCCCCC"> other things but</font><font color="#E5E5E5"> it's</font>

458
00:18:56,970 --> 00:19:00,840
interesting to<font color="#E5E5E5"> compare against and so</font>

459
00:18:59,130 --> 00:19:03,000
you can see that where<font color="#E5E5E5"> our protocol is</font>

460
00:19:00,840 --> 00:19:05,580
still significantly slower than<font color="#E5E5E5"> sort of</font>

461
00:19:03,000 --> 00:19:08,490
<font color="#E5E5E5">this insecure industry</font><font color="#CCCCCC"> privacy</font>

462
00:19:05,580 --> 00:19:11,070
<font color="#E5E5E5">intersection but we're making a big step</font>

463
00:19:08,490 --> 00:19:14,340
towards<font color="#E5E5E5"> in the right direction and we</font>

464
00:19:11,070 --> 00:19:18,210
<font color="#E5E5E5">can also compare against the semi honest</font>

465
00:19:14,340 --> 00:19:20,010
setting of these<font color="#E5E5E5"> protocols use some</font>

466
00:19:18,210 --> 00:19:21,690
<font color="#E5E5E5">different techniques but they also</font><font color="#CCCCCC"> build</font>

467
00:19:20,010 --> 00:19:25,080
on<font color="#E5E5E5"> a blue</font><font color="#CCCCCC"> these transfer and so you can</font>

468
00:19:21,690 --> 00:19:27,600
see that<font color="#E5E5E5"> we do move</font><font color="#CCCCCC"> quite a ways towards</font>

469
00:19:25,080 --> 00:19:28,860
it but there's still much more<font color="#CCCCCC"> work to</font>

470
00:19:27,600 --> 00:19:32,790
<font color="#E5E5E5">be done in this area for in the</font>

471
00:19:28,860 --> 00:19:38,330
malicious setting at least and<font color="#CCCCCC"> that</font>

472
00:19:32,790 --> 00:19:38,330
concludes<font color="#CCCCCC"> my talk</font><font color="#E5E5E5"> so thank you thank</font><font color="#CCCCCC"> you</font>

473
00:19:41,720 --> 00:20:08,060
we have<font color="#E5E5E5"> plenty of time</font><font color="#CCCCCC"> for questions he</font>

474
00:20:01,670 --> 00:20:10,460
can he can and he if he does he can<font color="#CCCCCC"> yeah</font>

475
00:20:08,060 --> 00:20:12,350
so we<font color="#E5E5E5"> just used that we observed the</font>

476
00:20:10,460 --> 00:20:14,180
court<font color="#E5E5E5"> or Oracle queries to get a like a</font>

477
00:20:12,350 --> 00:20:16,699
sort<font color="#CCCCCC"> of content</font><font color="#E5E5E5"> set of items that might</font>

478
00:20:14,180 --> 00:20:18,620
be in the bloom<font color="#CCCCCC"> filter and then we can</font>

479
00:20:16,700 --> 00:20:22,580
test<font color="#E5E5E5"> whether any of the bloom filter</font>

480
00:20:18,620 --> 00:20:24,560
bits in this have been set and this sort

481
00:20:22,580 --> 00:20:25,879
<font color="#E5E5E5">of there's there's</font><font color="#CCCCCC"> a very subtle</font>

482
00:20:24,560 --> 00:20:29,540
argument<font color="#E5E5E5"> here</font><font color="#CCCCCC"> that I sort of glossed</font>

483
00:20:25,880 --> 00:20:32,960
over that<font color="#E5E5E5"> is why this works but you can</font>

484
00:20:29,540 --> 00:20:36,050
say that<font color="#CCCCCC"> if none of the bits that are</font>

485
00:20:32,960 --> 00:20:37,640
hashed<font color="#E5E5E5"> into this if none of the indices</font>

486
00:20:36,050 --> 00:20:41,000
<font color="#E5E5E5">are set if all of them are set to zero</font>

487
00:20:37,640 --> 00:20:41,780
then with high probability they<font color="#E5E5E5"> yeah I</font>

488
00:20:41,000 --> 00:20:46,880
<font color="#CCCCCC">don't know if that answers your question</font>

489
00:20:41,780 --> 00:20:48,170
<font color="#CCCCCC">but you yeah you can</font><font color="#E5E5E5"> you can just be</font>

490
00:20:46,880 --> 00:20:49,880
confident<font color="#CCCCCC"> that there's at least one</font>

491
00:20:48,170 --> 00:20:55,900
message that<font color="#CCCCCC"> they would</font><font color="#E5E5E5"> not be able to</font>

492
00:20:49,880 --> 00:20:55,900
<font color="#E5E5E5">recover because</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> XOR term</font>

493
00:20:56,080 --> 00:21:02,330
wait<font color="#E5E5E5"> for like you use the signal</font>

494
00:20:59,900 --> 00:21:04,100
<font color="#E5E5E5">messenger and so called insecure</font>

495
00:21:02,330 --> 00:21:05,840
protocol<font color="#E5E5E5"> where they hash phone numbers</font>

496
00:21:04,100 --> 00:21:07,610
and and then compare it<font color="#E5E5E5"> on the server as</font>

497
00:21:05,840 --> 00:21:10,310
an example<font color="#CCCCCC"> is motivating example</font><font color="#E5E5E5"> however</font>

498
00:21:07,610 --> 00:21:11,899
that's a many party protocol<font color="#E5E5E5"> many users</font>

499
00:21:10,310 --> 00:21:14,030
one service<font color="#CCCCCC"> provider and</font><font color="#E5E5E5"> here you just</font>

500
00:21:11,900 --> 00:21:16,280
<font color="#E5E5E5">have to how how would</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> look</font><font color="#CCCCCC"> like if</font>

501
00:21:14,030 --> 00:21:18,139
<font color="#E5E5E5">this protocol in a large context</font><font color="#CCCCCC"> I think</font>

502
00:21:16,280 --> 00:21:19,940
<font color="#CCCCCC">it would just be you</font><font color="#E5E5E5"> just always read it</font>

503
00:21:18,140 --> 00:21:22,550
with<font color="#E5E5E5"> the signal service</font><font color="#CCCCCC"> because they</font>

504
00:21:19,940 --> 00:21:25,040
have it's<font color="#E5E5E5"> not necessary</font><font color="#CCCCCC"> like yeah the</font>

505
00:21:22,550 --> 00:21:26,810
signal has a list of<font color="#E5E5E5"> all users and so</font>

506
00:21:25,040 --> 00:21:29,840
and then<font color="#E5E5E5"> so you could just run</font><font color="#CCCCCC"> it as a</font>

507
00:21:26,810 --> 00:21:31,129
pairwise between you and the<font color="#E5E5E5"> server but</font>

508
00:21:29,840 --> 00:21:34,310
<font color="#E5E5E5">the server</font><font color="#CCCCCC"> should not know the phone</font>

509
00:21:31,130 --> 00:21:39,410
numbers in this<font color="#E5E5E5"> case well I think they</font>

510
00:21:34,310 --> 00:21:41,000
do though well<font color="#CCCCCC"> okay then you</font><font color="#E5E5E5"> you might</font>

511
00:21:39,410 --> 00:21:43,870
need to add some indirection that that's

512
00:21:41,000 --> 00:21:43,870
future work

513
00:21:47,840 --> 00:21:53,189
<font color="#E5E5E5">just wondering is a</font><font color="#CCCCCC"> Samara</font><font color="#E5E5E5"> honest</font>

514
00:21:50,610 --> 00:21:54,840
<font color="#CCCCCC">version of the bloom filter</font><font color="#E5E5E5"> solution how</font>

515
00:21:53,190 --> 00:21:58,590
does<font color="#E5E5E5"> that compare</font><font color="#CCCCCC"> with sort of</font><font color="#E5E5E5"> the state</font>

516
00:21:54,840 --> 00:22:02,790
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the art some areas</font><font color="#CCCCCC"> it's like 40 times</font>

517
00:21:58,590 --> 00:22:04,770
<font color="#CCCCCC">slower lot solar yeah</font><font color="#E5E5E5"> and that's because</font>

518
00:22:02,790 --> 00:22:06,510
the<font color="#CCCCCC"> booth is larger</font><font color="#E5E5E5"> yeah it's just the</font>

519
00:22:04,770 --> 00:22:08,370
bloom filter<font color="#CCCCCC"> has this like security</font>

520
00:22:06,510 --> 00:22:10,050
parameter blow up and so you have to do

521
00:22:08,370 --> 00:22:11,550
like<font color="#E5E5E5"> the number of elements times the</font>

522
00:22:10,050 --> 00:22:13,889
security parameter number<font color="#CCCCCC"> of oblivious</font>

523
00:22:11,550 --> 00:22:16,320
transfers versus some<font color="#E5E5E5"> of these pika</font>

524
00:22:13,890 --> 00:22:18,390
style ones that are<font color="#E5E5E5"> best in</font><font color="#CCCCCC"> semi auto</font>

525
00:22:16,320 --> 00:22:20,659
setting<font color="#E5E5E5"> just do one</font><font color="#CCCCCC"> oblivia sensor per</font>

526
00:22:18,390 --> 00:22:20,660
element

