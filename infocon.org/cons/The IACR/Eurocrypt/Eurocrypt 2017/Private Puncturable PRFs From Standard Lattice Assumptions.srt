1
00:00:00,030 --> 00:00:04,350
then we give the<font color="#CCCCCC"> Doki all right so hi</font>

2
00:00:02,429 --> 00:00:07,289
<font color="#E5E5E5">everyone I'm Sam and I'll be talking</font>

3
00:00:04,350 --> 00:00:08,849
<font color="#E5E5E5">about private punctual PRF today so</font>

4
00:00:07,290 --> 00:00:12,960
<font color="#E5E5E5">there's a joint work with Dan</font><font color="#CCCCCC"> Bonet and</font>

5
00:00:08,849 --> 00:00:14,519
<font color="#E5E5E5">Hart Montgomery</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so let me start off</font>

6
00:00:12,960 --> 00:00:16,800
<font color="#E5E5E5">the talk by recalling the notion of</font>

7
00:00:14,519 --> 00:00:19,590
<font color="#E5E5E5">pseudo-random functions so pseudo-random</font>

8
00:00:16,800 --> 00:00:21,630
functions or PRF is a very basic

9
00:00:19,590 --> 00:00:24,390
<font color="#CCCCCC">building blocks in cryptography</font><font color="#E5E5E5"> so it's</font>

10
00:00:21,630 --> 00:00:26,580
<font color="#E5E5E5">just a function a key function or with</font>

11
00:00:24,390 --> 00:00:28,050
some<font color="#CCCCCC"> Associated domain and range</font><font color="#E5E5E5"> such</font>

12
00:00:26,580 --> 00:00:30,179
that the<font color="#CCCCCC"> following two distributions are</font>

13
00:00:28,050 --> 00:00:31,949
indistinguishable<font color="#CCCCCC"> okay so in the first</font>

14
00:00:30,179 --> 00:00:33,570
distribution<font color="#E5E5E5"> and after</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> makes a number</font>

15
00:00:31,949 --> 00:00:35,820
of adaptive evaluation queries to<font color="#E5E5E5"> the</font>

16
00:00:33,570 --> 00:00:38,879
Challenger<font color="#E5E5E5"> and a challenger answers the</font>

17
00:00:35,820 --> 00:00:40,680
adversary by evaluating<font color="#E5E5E5"> the real of PRF</font>

18
00:00:38,879 --> 00:00:42,960
function f<font color="#CCCCCC"> out to each of the</font>

19
00:00:40,680 --> 00:00:44,550
adversaries queries in the<font color="#E5E5E5"> second</font>

20
00:00:42,960 --> 00:00:46,079
<font color="#CCCCCC">distribution</font><font color="#E5E5E5"> and absolutely makes a</font>

21
00:00:44,550 --> 00:00:49,769
number of adaptive evaluation queries

22
00:00:46,079 --> 00:00:51,360
and this time the Challenger evaluates

23
00:00:49,770 --> 00:00:54,390
<font color="#CCCCCC">actually ran the function to each of the</font>

24
00:00:51,360 --> 00:00:55,739
<font color="#CCCCCC">average squares and PRF security states</font>

25
00:00:54,390 --> 00:01:00,180
that these two distributions<font color="#E5E5E5"> are</font>

26
00:00:55,739 --> 00:01:03,149
indistinguishable<font color="#E5E5E5"> right so recently</font>

27
00:01:00,180 --> 00:01:05,720
three independent<font color="#E5E5E5"> works when a</font><font color="#CCCCCC"> waters</font><font color="#E5E5E5"> 13</font>

28
00:01:03,149 --> 00:01:08,840
boil at<font color="#E5E5E5"> 13 and highest at all 13</font>

29
00:01:05,720 --> 00:01:11,400
<font color="#CCCCCC">introduced this notion of constraint PRF</font>

30
00:01:08,840 --> 00:01:13,080
<font color="#CCCCCC">so</font><font color="#E5E5E5"> constraint PRS are just like regular</font>

31
00:01:11,400 --> 00:01:15,210
<font color="#E5E5E5">PRF but they have an additional</font>

32
00:01:13,080 --> 00:01:16,798
functionality<font color="#E5E5E5"> they have an addition</font>

33
00:01:15,210 --> 00:01:18,960
algorithm<font color="#E5E5E5"> called the constraint</font>

34
00:01:16,799 --> 00:01:20,729
<font color="#E5E5E5">algorithm and so what is this</font><font color="#CCCCCC"> country an</font>

35
00:01:18,960 --> 00:01:22,589
algorithm it basically takes in a

36
00:01:20,729 --> 00:01:24,179
regular here F key K and also a

37
00:01:22,590 --> 00:01:27,920
constraint function or a constraint

38
00:01:24,180 --> 00:01:30,509
predicate<font color="#E5E5E5"> F and generates another</font><font color="#CCCCCC"> keyaki</font>

39
00:01:27,920 --> 00:01:33,030
there<font color="#E5E5E5"> is no case</font><font color="#CCCCCC"> of F and we call a</font>

40
00:01:30,509 --> 00:01:35,189
constraint<font color="#CCCCCC"> Archy</font><font color="#E5E5E5"> and this constraint key</font>

41
00:01:33,030 --> 00:01:38,220
can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> used to</font><font color="#CCCCCC"> evaluate the</font><font color="#E5E5E5"> PRF</font><font color="#CCCCCC"> at all</font>

42
00:01:35,189 --> 00:01:40,979
<font color="#E5E5E5">points X in the domain where f of X</font>

43
00:01:38,220 --> 00:01:44,070
equals to<font color="#E5E5E5"> 1</font><font color="#CCCCCC"> thanks</font><font color="#E5E5E5"> so it's basically</font>

44
00:01:40,979 --> 00:01:45,750
<font color="#CCCCCC">taking a regular pair of</font><font color="#E5E5E5"> TK that can be</font>

45
00:01:44,070 --> 00:01:47,908
used<font color="#E5E5E5"> to</font><font color="#CCCCCC"> evaluate the</font><font color="#E5E5E5"> PRF at all points</font>

46
00:01:45,750 --> 00:01:49,500
in<font color="#E5E5E5"> the domain and it's generating a more</font>

47
00:01:47,909 --> 00:01:52,110
<font color="#E5E5E5">restricted key that can only evaluate</font>

48
00:01:49,500 --> 00:01:56,009
the PRF<font color="#E5E5E5"> that only starts at that of the</font>

49
00:01:52,110 --> 00:01:59,789
domain<font color="#E5E5E5"> all right so for practice we</font>

50
00:01:56,009 --> 00:02:01,710
require that because the PRF evaluation

51
00:01:59,790 --> 00:02:04,350
using<font color="#E5E5E5"> the</font><font color="#CCCCCC"> constrained key</font><font color="#E5E5E5"> at points X</font>

52
00:02:01,710 --> 00:02:06,509
where f of<font color="#E5E5E5"> X</font><font color="#CCCCCC"> equals to 1 this should are</font>

53
00:02:04,350 --> 00:02:09,810
the correct key<font color="#E5E5E5"> F</font><font color="#CCCCCC"> are the</font><font color="#E5E5E5"> real PRF our</font>

54
00:02:06,509 --> 00:02:12,950
evaluation<font color="#CCCCCC"> at X and for security we</font>

55
00:02:09,810 --> 00:02:15,470
require<font color="#E5E5E5"> that the PRF evaluation</font>

56
00:02:12,950 --> 00:02:17,238
at points X where f of<font color="#E5E5E5"> X</font><font color="#CCCCCC"> equals zero so</font>

57
00:02:15,470 --> 00:02:19,310
<font color="#CCCCCC">this should look indistinguishable from</font>

58
00:02:17,239 --> 00:02:24,590
random<font color="#E5E5E5"> to an adversary who is given</font>

59
00:02:19,310 --> 00:02:25,940
<font color="#CCCCCC">other constraint right so constraints</font>

60
00:02:24,590 --> 00:02:27,800
are very useful on<font color="#CCCCCC"> notions in</font>

61
00:02:25,940 --> 00:02:31,220
cryptography<font color="#CCCCCC"> there's many applications</font>

62
00:02:27,800 --> 00:02:33,920
<font color="#E5E5E5">for</font><font color="#CCCCCC"> instance</font><font color="#E5E5E5"> it can be used to construct</font>

63
00:02:31,220 --> 00:02:36,830
<font color="#CCCCCC">a base key exchange I guess right on</font>

64
00:02:33,920 --> 00:02:38,839
podcast encryption schemes and so on<font color="#CCCCCC"> so</font>

65
00:02:36,830 --> 00:02:41,900
willing to<font color="#E5E5E5"> talk I'll be talking about a</font>

66
00:02:38,840 --> 00:02:44,150
<font color="#E5E5E5">special family of constraint PRS called</font>

67
00:02:41,900 --> 00:02:47,720
<font color="#CCCCCC">puncture bookie wraps</font><font color="#E5E5E5"> and in particular</font>

68
00:02:44,150 --> 00:02:50,540
these family of<font color="#E5E5E5"> machine ers have we have</font>

69
00:02:47,720 --> 00:02:51,859
been<font color="#E5E5E5"> having used</font><font color="#CCCCCC"> a high Riley in the</font>

70
00:02:50,540 --> 00:02:53,810
computer programming paradigm of<font color="#E5E5E5"> the</font>

71
00:02:51,860 --> 00:02:56,079
<font color="#CCCCCC">higher waters</font><font color="#E5E5E5"> constructing schemes from</font>

72
00:02:53,810 --> 00:02:59,060
indistinguishable our decision

73
00:02:56,079 --> 00:02:59,900
all right so since are we talking about

74
00:02:59,060 --> 00:03:01,519
<font color="#E5E5E5">poncho</font><font color="#CCCCCC"> up yes</font>

75
00:02:59,900 --> 00:03:03,620
let's define these a little<font color="#E5E5E5"> bit more</font>

76
00:03:01,519 --> 00:03:05,959
specifically<font color="#E5E5E5"> so these are just the</font>

77
00:03:03,620 --> 00:03:07,970
<font color="#E5E5E5">constraint</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> PRF where we restrict the</font>

78
00:03:05,959 --> 00:03:10,910
<font color="#E5E5E5">family of constraint functions to just</font>

79
00:03:07,970 --> 00:03:14,150
be a<font color="#CCCCCC"> point</font><font color="#E5E5E5"> function or complement of</font>

80
00:03:10,910 --> 00:03:16,430
point functions<font color="#CCCCCC"> so a parent function is</font>

81
00:03:14,150 --> 00:03:20,150
defined with respect to a single point

82
00:03:16,430 --> 00:03:21,880
<font color="#E5E5E5">in the domain</font><font color="#CCCCCC"> C in this</font><font color="#E5E5E5"> case so on so</font>

83
00:03:20,150 --> 00:03:24,769
the country function on input X

84
00:03:21,880 --> 00:03:27,500
evaluates to 1<font color="#E5E5E5"> on inputs that</font><font color="#CCCCCC"> are not</font>

85
00:03:24,769 --> 00:03:30,139
equal<font color="#CCCCCC"> to C and I</font><font color="#E5E5E5"> values to 0 on inputs</font>

86
00:03:27,500 --> 00:03:32,660
that are equal to<font color="#E5E5E5"> C so all this is</font>

87
00:03:30,139 --> 00:03:34,280
basically<font color="#E5E5E5"> saying is with the puncture</font>

88
00:03:32,660 --> 00:03:37,299
key you can evaluate<font color="#E5E5E5"> the PRF</font><font color="#CCCCCC"> at all</font>

89
00:03:34,280 --> 00:03:41,180
<font color="#E5E5E5">points except for at the function point</font>

90
00:03:37,299 --> 00:03:42,680
for at<font color="#E5E5E5"> the single point</font><font color="#CCCCCC"> so it turns out</font>

91
00:03:41,180 --> 00:03:44,600
that<font color="#E5E5E5"> function book Yaffe's</font>

92
00:03:42,680 --> 00:03:46,100
can be constructed from<font color="#E5E5E5"> standard ggm</font>

93
00:03:44,600 --> 00:03:49,130
<font color="#E5E5E5">tree based construction in a pretty</font>

94
00:03:46,100 --> 00:03:51,440
straightforward way<font color="#CCCCCC"> but one thing to</font>

95
00:03:49,130 --> 00:03:53,780
note<font color="#CCCCCC"> about this construction</font><font color="#E5E5E5"> is that the</font>

96
00:03:51,440 --> 00:03:56,030
function key<font color="#E5E5E5"> must necessarily contain</font>

97
00:03:53,780 --> 00:03:59,239
information<font color="#CCCCCC"> about</font><font color="#E5E5E5"> the actual puncture</font>

98
00:03:56,030 --> 00:04:01,970
<font color="#E5E5E5">point C</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so a natural question that</font><font color="#CCCCCC"> we</font>

99
00:03:59,239 --> 00:04:04,400
can actually<font color="#CCCCCC"> ask is can we construct</font><font color="#E5E5E5"> a</font>

100
00:04:01,970 --> 00:04:06,739
<font color="#E5E5E5">bunch of</font><font color="#CCCCCC"> a PRF where the</font><font color="#E5E5E5"> puncture key</font>

101
00:04:04,400 --> 00:04:10,220
does not leak any<font color="#CCCCCC"> information about the</font>

102
00:04:06,739 --> 00:04:12,680
<font color="#E5E5E5">underlying</font><font color="#CCCCCC"> puncture Point C</font><font color="#E5E5E5"> and so our</font>

103
00:04:10,220 --> 00:04:14,540
more generally this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> ok we can</font><font color="#E5E5E5"> ask the</font>

104
00:04:12,680 --> 00:04:17,358
question<font color="#E5E5E5"> of can we</font><font color="#CCCCCC"> build a constraint</font>

105
00:04:14,540 --> 00:04:19,488
<font color="#E5E5E5">PRF where the constraint</font><font color="#CCCCCC"> P does</font><font color="#E5E5E5"> not leak</font>

106
00:04:17,358 --> 00:04:21,068
any<font color="#E5E5E5"> information about the Associated</font>

107
00:04:19,488 --> 00:04:23,989
constraint function

108
00:04:21,069 --> 00:04:27,199
<font color="#E5E5E5">yeah and this is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> question</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the</font>

109
00:04:23,990 --> 00:04:29,780
pony attacked<font color="#CCCCCC"> recently</font><font color="#E5E5E5"> and so how do we</font>

110
00:04:27,199 --> 00:04:31,789
actually formalize this notion<font color="#E5E5E5"> so it's</font>

111
00:04:29,780 --> 00:04:33,469
pretty simple<font color="#CCCCCC"> right so we can</font><font color="#E5E5E5"> define it</font>

112
00:04:31,789 --> 00:04:35,780
in<font color="#CCCCCC"> terms of</font><font color="#E5E5E5"> security game where an</font>

113
00:04:33,470 --> 00:04:38,289
adversary<font color="#E5E5E5"> first commits to a pair of</font>

114
00:04:35,780 --> 00:04:40,969
<font color="#E5E5E5">functions F 0 and F 1</font>

115
00:04:38,289 --> 00:04:42,830
<font color="#E5E5E5">these are</font><font color="#CCCCCC"> constraint functions and in</font>

116
00:04:40,970 --> 00:04:45,740
the first<font color="#E5E5E5"> secure in the first game of</font>

117
00:04:42,830 --> 00:04:48,080
<font color="#E5E5E5">the Challenger generates a constraint</font>

118
00:04:45,740 --> 00:04:50,990
function constraining key<font color="#E5E5E5"> with</font><font color="#CCCCCC"> respect</font>

119
00:04:48,080 --> 00:04:53,359
to the function<font color="#CCCCCC"> f 0 and in the second</font>

120
00:04:50,990 --> 00:04:55,430
game<font color="#E5E5E5"> the</font><font color="#CCCCCC"> challenger generates a</font>

121
00:04:53,360 --> 00:04:58,639
constraint key with respect to the

122
00:04:55,430 --> 00:05:00,199
<font color="#CCCCCC">function f f1</font><font color="#E5E5E5"> and privacy</font><font color="#CCCCCC"> requirements</font>

123
00:04:58,639 --> 00:05:04,190
<font color="#E5E5E5">states that these two distributions</font>

124
00:05:00,199 --> 00:05:07,460
<font color="#E5E5E5">should should</font><font color="#CCCCCC"> be indistinguishable all</font>

125
00:05:04,190 --> 00:05:10,490
<font color="#E5E5E5">right so for this talk I'll</font><font color="#CCCCCC"> be focusing</font>

126
00:05:07,460 --> 00:05:11,960
mainly on<font color="#CCCCCC"> private function book your s4</font>

127
00:05:10,490 --> 00:05:13,729
in the next talk<font color="#CCCCCC"> you'll hear from your</font>

128
00:05:11,960 --> 00:05:16,580
lay<font color="#E5E5E5"> about more general privately</font>

129
00:05:13,729 --> 00:05:20,539
constrained PRS for more general<font color="#E5E5E5"> circuit</font>

130
00:05:16,580 --> 00:05:22,250
<font color="#E5E5E5">for</font><font color="#CCCCCC"> dreams all</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> so okay so so</font>

131
00:05:20,539 --> 00:05:25,969
finish talk<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> be focusing on private</font>

132
00:05:22,250 --> 00:05:28,130
private puncturing so this is basic<font color="#E5E5E5"> so</font>

133
00:05:25,969 --> 00:05:30,710
this is basically a punctual<font color="#CCCCCC"> opf that</font>

134
00:05:28,130 --> 00:05:32,509
satisfies these<font color="#CCCCCC"> three properties so for</font>

135
00:05:30,710 --> 00:05:34,818
correctness we require that if you

136
00:05:32,509 --> 00:05:36,349
evaluate<font color="#E5E5E5"> the PRF are using the</font><font color="#CCCCCC"> puncture</font>

137
00:05:34,819 --> 00:05:39,169
<font color="#CCCCCC">key</font><font color="#E5E5E5"> then this should yield the correct</font>

138
00:05:36,349 --> 00:05:41,419
PRF output<font color="#CCCCCC"> at all</font><font color="#E5E5E5"> points</font><font color="#CCCCCC"> access</font><font color="#E5E5E5"> that are</font>

139
00:05:39,169 --> 00:05:43,400
not<font color="#E5E5E5"> that's not equal to a bunch of</font><font color="#CCCCCC"> point</font>

140
00:05:41,419 --> 00:05:47,500
<font color="#CCCCCC">C and you</font><font color="#E5E5E5"> should satisfy pseudo</font>

141
00:05:43,400 --> 00:05:47,500
randomness so<font color="#CCCCCC"> the PRF evaluation</font>

142
00:06:14,580 --> 00:06:21,039
<font color="#E5E5E5">okay sorry about</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> okay so for pseudo</font>

143
00:06:19,120 --> 00:06:22,840
randomness we require that<font color="#E5E5E5"> PRF</font>

144
00:06:21,040 --> 00:06:24,130
evaluation at the<font color="#E5E5E5"> puncture point I</font>

145
00:06:22,840 --> 00:06:27,989
should<font color="#E5E5E5"> look indistinguishable from</font>

146
00:06:24,130 --> 00:06:27,990
random<font color="#E5E5E5"> to an adversary who</font><font color="#CCCCCC"> is given the</font>

147
00:06:55,380 --> 00:07:01,180
yeah<font color="#CCCCCC"> so for privacy we require that the</font>

148
00:06:59,140 --> 00:07:03,150
puncture<font color="#E5E5E5"> are key to attend a leak any</font>

149
00:07:01,180 --> 00:07:06,760
<font color="#CCCCCC">information about the puncture point</font><font color="#E5E5E5"> see</font>

150
00:07:03,150 --> 00:07:08,650
<font color="#CCCCCC">alright so what</font><font color="#E5E5E5"> does this privacy are</font>

151
00:07:06,760 --> 00:07:10,690
give us so why is this an interesting

152
00:07:08,650 --> 00:07:12,820
<font color="#E5E5E5">notion</font><font color="#CCCCCC"> so there are a number of</font>

153
00:07:10,690 --> 00:07:14,590
<font color="#CCCCCC">applications so many of them are</font>

154
00:07:12,820 --> 00:07:16,650
<font color="#E5E5E5">highlighted in the original paper</font><font color="#CCCCCC"> via</font>

155
00:07:14,590 --> 00:07:19,330
the BL w paper<font color="#E5E5E5"> I</font><font color="#CCCCCC"> introduced</font><font color="#E5E5E5"> the notion</font>

156
00:07:16,650 --> 00:07:22,120
so for this<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> I'll just</font><font color="#E5E5E5"> talk about</font>

157
00:07:19,330 --> 00:07:26,349
one<font color="#E5E5E5"> particular</font><font color="#CCCCCC"> application and this</font><font color="#E5E5E5"> is</font>

158
00:07:22,120 --> 00:07:29,460
for this<font color="#E5E5E5"> is application to to private</font>

159
00:07:26,350 --> 00:07:32,890
keyword search in distributed database

160
00:07:29,460 --> 00:07:35,200
so one way<font color="#E5E5E5"> of viewing</font><font color="#CCCCCC"> a private puncture</font>

161
00:07:32,890 --> 00:07:37,780
<font color="#CCCCCC">by prfs</font><font color="#E5E5E5"> is as an advanced form of</font>

162
00:07:35,200 --> 00:07:40,510
distributed point functions<font color="#E5E5E5"> okay so</font>

163
00:07:37,780 --> 00:07:42,789
distribute point functions or<font color="#CCCCCC"> RDP FS is</font>

164
00:07:40,510 --> 00:07:45,520
a notion<font color="#E5E5E5"> that was introduced by Kiowa in</font>

165
00:07:42,790 --> 00:07:48,370
2014 and the idea is the following<font color="#CCCCCC"> right</font>

166
00:07:45,520 --> 00:07:51,400
so you start<font color="#E5E5E5"> off</font><font color="#CCCCCC"> with a</font><font color="#E5E5E5"> point function P</font>

167
00:07:48,370 --> 00:07:54,669
sub<font color="#E5E5E5"> C</font><font color="#CCCCCC"> okay and we basically secret share</font>

168
00:07:51,400 --> 00:07:57,039
this function into two distributed point

169
00:07:54,669 --> 00:07:58,719
functions<font color="#E5E5E5"> our F 0 and F</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> so let me put</font>

170
00:07:57,040 --> 00:08:01,750
a tilde there<font color="#E5E5E5"> just to distinguish it</font>

171
00:07:58,720 --> 00:08:03,820
from the<font color="#CCCCCC"> PRF and these two functions</font>

172
00:08:01,750 --> 00:08:06,760
have the property that if<font color="#CCCCCC"> you evaluate</font>

173
00:08:03,820 --> 00:08:09,130
each<font color="#CCCCCC"> of these functions separately</font><font color="#E5E5E5"> on an</font>

174
00:08:06,760 --> 00:08:10,930
input X<font color="#CCCCCC"> and basically sum up the result</font>

175
00:08:09,130 --> 00:08:13,719
together<font color="#CCCCCC"> then you should basically</font><font color="#E5E5E5"> get a</font>

176
00:08:10,930 --> 00:08:15,940
point function<font color="#CCCCCC"> okay so on input X that</font>

177
00:08:13,720 --> 00:08:18,430
is equal<font color="#CCCCCC"> to see if you sum them up then</font>

178
00:08:15,940 --> 00:08:20,380
you should get a nonzero<font color="#E5E5E5"> value and if</font>

179
00:08:18,430 --> 00:08:21,850
you<font color="#CCCCCC"> four inputs that are</font><font color="#E5E5E5"> not equal</font><font color="#CCCCCC"> to</font>

180
00:08:20,380 --> 00:08:24,909
<font color="#CCCCCC">see if you sum them up then you should</font>

181
00:08:21,850 --> 00:08:26,800
basically<font color="#E5E5E5"> get 0 right so</font><font color="#CCCCCC"> you can</font>

182
00:08:24,910 --> 00:08:28,090
actually instantiate<font color="#E5E5E5"> distribute point</font>

183
00:08:26,800 --> 00:08:30,220
functions using

184
00:08:28,090 --> 00:08:31,960
puncturing<font color="#E5E5E5"> by defining the first</font>

185
00:08:30,220 --> 00:08:33,640
function to just be the regular<font color="#CCCCCC"> PRF</font>

186
00:08:31,960 --> 00:08:36,880
<font color="#E5E5E5">evaluation function using the regular</font>

187
00:08:33,640 --> 00:08:39,309
PRF key<font color="#E5E5E5"> K and</font><font color="#CCCCCC"> you just define the second</font>

188
00:08:36,880 --> 00:08:43,750
function<font color="#E5E5E5"> to be the PRF evaluation using</font>

189
00:08:39,309 --> 00:08:47,680
<font color="#E5E5E5">the puncture key and by up here FC by</font>

190
00:08:43,750 --> 00:08:49,720
<font color="#E5E5E5">our correctness over a construction</font><font color="#CCCCCC"> if</font>

191
00:08:47,680 --> 00:08:51,790
you evaluate the<font color="#E5E5E5"> first and the second</font>

192
00:08:49,720 --> 00:08:53,620
function<font color="#E5E5E5"> separately and just and I</font><font color="#CCCCCC"> guess</font>

193
00:08:51,790 --> 00:08:55,660
in this case subtract the result<font color="#E5E5E5"> then</font>

194
00:08:53,620 --> 00:08:57,790
<font color="#E5E5E5">you should get a nonzero value for</font>

195
00:08:55,660 --> 00:08:59,230
inputs X that are<font color="#E5E5E5"> equal to C and it</font>

196
00:08:57,790 --> 00:09:01,660
should<font color="#E5E5E5"> get</font><font color="#CCCCCC"> zero for inputs that are</font><font color="#E5E5E5"> not</font>

197
00:08:59,230 --> 00:09:04,000
equal<font color="#CCCCCC"> to C oh and I forgot to mention</font>

198
00:09:01,660 --> 00:09:05,800
the private security requirement that

199
00:09:04,000 --> 00:09:08,110
the security requirement for<font color="#E5E5E5"> distributed</font>

200
00:09:05,800 --> 00:09:09,520
point functions is<font color="#CCCCCC"> that for an adversary</font>

201
00:09:08,110 --> 00:09:11,890
who is given only one of the two

202
00:09:09,520 --> 00:09:13,300
functions then<font color="#E5E5E5"> the adversary should not</font>

203
00:09:11,890 --> 00:09:17,020
<font color="#E5E5E5">learn</font><font color="#CCCCCC"> any information about the</font>

204
00:09:13,300 --> 00:09:20,680
<font color="#E5E5E5">underlying point C all right</font><font color="#CCCCCC"> so one</font>

205
00:09:17,020 --> 00:09:23,350
difference between<font color="#CCCCCC"> a DPF and a private</font>

206
00:09:20,680 --> 00:09:25,540
function PRF is the following<font color="#E5E5E5"> right so</font>

207
00:09:23,350 --> 00:09:28,540
for a distributed point function as

208
00:09:25,540 --> 00:09:31,390
<font color="#CCCCCC">setup</font><font color="#E5E5E5"> or once the pot once the point</font>

209
00:09:28,540 --> 00:09:34,300
function is is set you did you come<font color="#CCCCCC"> up</font>

210
00:09:31,390 --> 00:09:36,130
<font color="#CCCCCC">with</font><font color="#E5E5E5"> these two functions F 0 and F</font><font color="#CCCCCC"> 1 are</font>

211
00:09:34,300 --> 00:09:40,420
<font color="#E5E5E5">simultaneously so you have to generate</font>

212
00:09:36,130 --> 00:09:43,020
them all together but<font color="#E5E5E5"> for</font><font color="#CCCCCC"> a private</font>

213
00:09:40,420 --> 00:09:46,030
<font color="#E5E5E5">function</font><font color="#CCCCCC"> below PRF</font><font color="#E5E5E5"> you have this sort of</font>

214
00:09:43,020 --> 00:09:48,130
adaptive property where<font color="#E5E5E5"> you can where</font>

215
00:09:46,030 --> 00:09:50,709
even before in the offline phase<font color="#E5E5E5"> even</font>

216
00:09:48,130 --> 00:09:53,110
<font color="#CCCCCC">before you commit to the point function</font>

217
00:09:50,710 --> 00:09:55,390
or C to the<font color="#CCCCCC"> point</font><font color="#E5E5E5"> C you can actually</font>

218
00:09:53,110 --> 00:09:58,180
just just instantiate<font color="#CCCCCC"> are the first</font>

219
00:09:55,390 --> 00:10:00,760
function by generating just a regular

220
00:09:58,180 --> 00:10:03,699
PRF Quique<font color="#CCCCCC"> okay and at a</font><font color="#E5E5E5"> later point in</font>

221
00:10:00,760 --> 00:10:05,470
time once you decide<font color="#CCCCCC"> on the</font><font color="#E5E5E5"> Point C then</font>

222
00:10:03,700 --> 00:10:07,780
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> actually instantiate</font><font color="#E5E5E5"> the second</font>

223
00:10:05,470 --> 00:10:10,150
function<font color="#E5E5E5"> by generating the the</font><font color="#CCCCCC"> puncture</font>

224
00:10:07,780 --> 00:10:13,290
key<font color="#CCCCCC"> okay and</font><font color="#E5E5E5"> this leads to a number</font><font color="#CCCCCC"> of</font>

225
00:10:10,150 --> 00:10:16,060
<font color="#E5E5E5">applications so one application of</font>

226
00:10:13,290 --> 00:10:19,719
<font color="#E5E5E5">distributed point functions is in the</font>

227
00:10:16,060 --> 00:10:21,910
setting of distributed database<font color="#CCCCCC"> in</font>

228
00:10:19,720 --> 00:10:25,000
private keyword search<font color="#CCCCCC"> so in this</font>

229
00:10:21,910 --> 00:10:28,449
setting we have<font color="#E5E5E5"> two servers</font><font color="#CCCCCC"> holding a</font>

230
00:10:25,000 --> 00:10:31,209
database of our keywords<font color="#E5E5E5"> so W</font><font color="#CCCCCC"> one all</font>

231
00:10:28,450 --> 00:10:32,709
the<font color="#E5E5E5"> way to W N and we have a user</font><font color="#CCCCCC"> who</font>

232
00:10:31,209 --> 00:10:34,869
wants<font color="#E5E5E5"> to check whether a</font><font color="#CCCCCC"> particular</font>

233
00:10:32,709 --> 00:10:39,640
keyword is contained in the database

234
00:10:34,870 --> 00:10:41,440
okay so W<font color="#CCCCCC"> subject and and the user wants</font>

235
00:10:39,640 --> 00:10:41,860
<font color="#CCCCCC">to check out whether keyword is</font>

236
00:10:41,440 --> 00:10:44,260
contained

237
00:10:41,860 --> 00:10:46,149
database<font color="#E5E5E5"> without revealing what the</font>

238
00:10:44,260 --> 00:10:48,670
<font color="#E5E5E5">keyword</font><font color="#CCCCCC"> w sub J is to each of the</font>

239
00:10:46,149 --> 00:10:50,980
<font color="#E5E5E5">servers so one way of</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> this is to</font>

240
00:10:48,670 --> 00:10:54,310
<font color="#E5E5E5">define a point function with respect to</font>

241
00:10:50,980 --> 00:10:56,079
<font color="#CCCCCC">the</font><font color="#E5E5E5"> keyword W sub J</font><font color="#CCCCCC"> and basically</font>

242
00:10:54,310 --> 00:10:57,939
<font color="#CCCCCC">generate to distribute distribute</font><font color="#E5E5E5"> a</font>

243
00:10:56,079 --> 00:11:00,219
<font color="#CCCCCC">Power Point</font><font color="#E5E5E5"> functions F 0 and F 1 with</font>

244
00:10:57,940 --> 00:11:02,320
respect<font color="#E5E5E5"> to this point function okay and</font>

245
00:11:00,220 --> 00:11:05,829
basically<font color="#E5E5E5"> sends these two functions to</font>

246
00:11:02,320 --> 00:11:08,050
<font color="#CCCCCC">the servers and the server evaluates</font>

247
00:11:05,829 --> 00:11:10,510
<font color="#CCCCCC">that</font><font color="#E5E5E5"> these functions are to each of the</font>

248
00:11:08,050 --> 00:11:13,180
<font color="#CCCCCC">keywords in the database</font><font color="#E5E5E5"> sums them</font><font color="#CCCCCC"> up</font>

249
00:11:10,510 --> 00:11:15,579
and basically<font color="#CCCCCC"> sends them back to the</font>

250
00:11:13,180 --> 00:11:18,069
user and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> user</font><font color="#E5E5E5"> can just add these two</font>

251
00:11:15,579 --> 00:11:21,130
results<font color="#E5E5E5"> up and if the result is nonzero</font>

252
00:11:18,070 --> 00:11:24,370
<font color="#E5E5E5">then it knows that the</font><font color="#CCCCCC"> keyword</font><font color="#E5E5E5"> W sub J</font>

253
00:11:21,130 --> 00:11:26,380
is contained in the database and if<font color="#CCCCCC"> the</font>

254
00:11:24,370 --> 00:11:29,430
result<font color="#CCCCCC"> is zero then it knows that</font><font color="#E5E5E5"> the</font>

255
00:11:26,380 --> 00:11:33,010
<font color="#CCCCCC">keyword is not contained in</font><font color="#E5E5E5"> the database</font>

256
00:11:29,430 --> 00:11:35,560
<font color="#E5E5E5">all right and the privacy property</font><font color="#CCCCCC"> of</font>

257
00:11:33,010 --> 00:11:36,880
DPF<font color="#CCCCCC"> guarantees that</font><font color="#E5E5E5"> each</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> servers</font>

258
00:11:35,560 --> 00:11:40,268
do not learn information<font color="#E5E5E5"> about</font><font color="#CCCCCC"> the</font>

259
00:11:36,880 --> 00:11:42,100
<font color="#E5E5E5">keyword W subject right so</font><font color="#CCCCCC"> our using</font>

260
00:11:40,269 --> 00:11:44,350
private function here<font color="#E5E5E5"> F so you can</font>

261
00:11:42,100 --> 00:11:48,390
actually<font color="#E5E5E5"> emulate this protocol but we</font>

262
00:11:44,350 --> 00:11:51,190
have but this offline<font color="#E5E5E5"> online property of</font>

263
00:11:48,390 --> 00:11:55,959
of private<font color="#CCCCCC"> punctual POS translates to</font>

264
00:11:51,190 --> 00:11:58,630
the site okay so in the setting<font color="#E5E5E5"> the user</font>

265
00:11:55,959 --> 00:12:01,949
cannot can just even before<font color="#E5E5E5"> knowing</font>

266
00:11:58,630 --> 00:12:05,019
which a keyword<font color="#CCCCCC"> to search the database</font><font color="#E5E5E5"> I</font>

267
00:12:01,949 --> 00:12:06,699
can just<font color="#CCCCCC"> generate a</font><font color="#E5E5E5"> real PRF</font><font color="#CCCCCC"> a key and</font>

268
00:12:05,019 --> 00:12:09,250
just<font color="#E5E5E5"> since it sends it to one of the</font>

269
00:12:06,699 --> 00:12:11,500
challenge<font color="#E5E5E5"> or</font><font color="#CCCCCC"> to one of the servers and</font>

270
00:12:09,250 --> 00:12:14,170
the<font color="#CCCCCC"> server</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> to a single server and</font>

271
00:12:11,500 --> 00:12:17,380
the server can<font color="#E5E5E5"> follow the protocol by</font>

272
00:12:14,170 --> 00:12:19,990
applying the PRF<font color="#E5E5E5"> on each of the keywords</font>

273
00:12:17,380 --> 00:12:22,449
<font color="#E5E5E5">and just some</font><font color="#CCCCCC"> the rhythm some of the</font>

274
00:12:19,990 --> 00:12:25,360
results<font color="#E5E5E5"> and sends them back and the</font>

275
00:12:22,449 --> 00:12:26,859
server<font color="#E5E5E5"> can actually just go offline</font><font color="#CCCCCC"> it</font>

276
00:12:25,360 --> 00:12:29,260
does not get<font color="#E5E5E5"> involved in the protocol</font>

277
00:12:26,860 --> 00:12:31,240
<font color="#E5E5E5">okay and at a later point in</font><font color="#CCCCCC"> time when</font>

278
00:12:29,260 --> 00:12:33,699
<font color="#E5E5E5">this when the user wants</font><font color="#CCCCCC"> to query the</font>

279
00:12:31,240 --> 00:12:36,910
database<font color="#E5E5E5"> on a particular keyword and</font>

280
00:12:33,699 --> 00:12:39,339
then<font color="#E5E5E5"> then the user can</font><font color="#CCCCCC"> just generate</font><font color="#E5E5E5"> a</font>

281
00:12:36,910 --> 00:12:41,199
<font color="#E5E5E5">puncture key with respect to the keyword</font>

282
00:12:39,339 --> 00:12:45,579
W sub<font color="#E5E5E5"> J and just sends it to</font><font color="#CCCCCC"> the other</font>

283
00:12:41,199 --> 00:12:46,930
other<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> other server</font><font color="#E5E5E5"> okay right and</font>

284
00:12:45,579 --> 00:12:48,550
the server and the other server

285
00:12:46,930 --> 00:12:50,439
<font color="#CCCCCC">basically just follows a protocol by</font>

286
00:12:48,550 --> 00:12:51,699
some by applying the<font color="#CCCCCC"> function to each of</font>

287
00:12:50,440 --> 00:12:55,790
the key words<font color="#CCCCCC"> and just summing up the</font>

288
00:12:51,699 --> 00:12:57,890
result okay<font color="#CCCCCC"> so this has a property that</font>

289
00:12:55,790 --> 00:13:01,099
the user actually<font color="#E5E5E5"> just has to interact</font>

290
00:12:57,890 --> 00:13:04,120
<font color="#E5E5E5">with one of the server and and one of</font>

291
00:13:01,100 --> 00:13:06,890
the<font color="#CCCCCC"> servers can actually just be offline</font>

292
00:13:04,120 --> 00:13:10,160
<font color="#E5E5E5">all right so</font><font color="#CCCCCC"> let's not just talk about</font>

293
00:13:06,890 --> 00:13:15,230
<font color="#E5E5E5">one of the constructions so puncture</font>

294
00:13:10,160 --> 00:13:17,630
<font color="#CCCCCC">what PRF prior to this work had a very</font>

295
00:13:15,230 --> 00:13:21,110
extreme state of affairs<font color="#E5E5E5"> so to actually</font>

296
00:13:17,630 --> 00:13:23,000
<font color="#E5E5E5">get public puncturing</font><font color="#CCCCCC"> you just</font><font color="#E5E5E5"> require</font>

297
00:13:21,110 --> 00:13:24,890
one-way functions using the<font color="#CCCCCC"> ggm tree</font>

298
00:13:23,000 --> 00:13:26,510
based construction<font color="#E5E5E5"> to actually get a</font>

299
00:13:24,890 --> 00:13:28,280
private<font color="#E5E5E5"> function you actually had to go</font>

300
00:13:26,510 --> 00:13:31,040
all the<font color="#CCCCCC"> way to multi-layer maps or i/o</font>

301
00:13:28,280 --> 00:13:34,280
so this<font color="#CCCCCC"> others construction</font><font color="#E5E5E5"> is due to</font>

302
00:13:31,040 --> 00:13:38,270
the original<font color="#CCCCCC"> BL w</font><font color="#E5E5E5"> paper and this work</font>

303
00:13:34,280 --> 00:13:40,640
<font color="#CCCCCC">basically we</font><font color="#E5E5E5"> basically push the minimum</font>

304
00:13:38,270 --> 00:13:43,430
assumption that's required for<font color="#E5E5E5"> a private</font>

305
00:13:40,640 --> 00:13:45,830
puncturing<font color="#E5E5E5"> to just be</font><font color="#CCCCCC"> lwe we just</font>

306
00:13:43,430 --> 00:13:48,620
constructed<font color="#E5E5E5"> from lattices okay and of</font>

307
00:13:45,830 --> 00:13:51,290
course the natural open problem is<font color="#E5E5E5"> to</font>

308
00:13:48,620 --> 00:13:53,240
can we actually move it<font color="#CCCCCC"> even further</font><font color="#E5E5E5"> so</font>

309
00:13:51,290 --> 00:13:55,010
since we can get public puncturing from

310
00:13:53,240 --> 00:13:56,510
<font color="#E5E5E5">one way functions there isn't really a</font>

311
00:13:55,010 --> 00:13:59,210
reason<font color="#E5E5E5"> why we can't get private</font>

312
00:13:56,510 --> 00:14:00,470
puncturing from from one way functions

313
00:13:59,210 --> 00:14:01,660
and I think this is a really<font color="#CCCCCC"> nice</font><font color="#E5E5E5"> Oh</font>

314
00:14:00,470 --> 00:14:05,060
problem<font color="#E5E5E5"> that I just wanted to mention</font>

315
00:14:01,660 --> 00:14:07,219
all right<font color="#E5E5E5"> so let me</font><font color="#CCCCCC"> just give a quick</font>

316
00:14:05,060 --> 00:14:10,310
overview<font color="#E5E5E5"> of of</font><font color="#CCCCCC"> what we do in a</font>

317
00:14:07,220 --> 00:14:12,710
<font color="#E5E5E5">construction so we just work with</font>

318
00:14:10,310 --> 00:14:16,729
learning with errors so for a uniformly

319
00:14:12,710 --> 00:14:19,460
generated matrix a and a randomly sample

320
00:14:16,730 --> 00:14:22,520
vector s and<font color="#E5E5E5"> E from some low norm error</font>

321
00:14:19,460 --> 00:14:24,080
distribution<font color="#E5E5E5"> although</font><font color="#CCCCCC"> we just says that</font>

322
00:14:22,520 --> 00:14:25,790
that the<font color="#E5E5E5"> following two distributions are</font>

323
00:14:24,080 --> 00:14:28,490
indistinguishable<font color="#E5E5E5"> so in the first</font>

324
00:14:25,790 --> 00:14:30,709
<font color="#CCCCCC">distribution the adversary gets the</font>

325
00:14:28,490 --> 00:14:34,010
public matrix a and also<font color="#E5E5E5"> this</font><font color="#CCCCCC"> uh noisy</font>

326
00:14:30,710 --> 00:14:36,020
vector matrix product<font color="#CCCCCC"> s times a</font><font color="#E5E5E5"> plus E</font>

327
00:14:34,010 --> 00:14:38,689
<font color="#E5E5E5">and in the second distribution the</font>

328
00:14:36,020 --> 00:14:41,170
adversary gets<font color="#E5E5E5"> the public matrix a and</font>

329
00:14:38,690 --> 00:14:44,420
<font color="#E5E5E5">also this time a uniformly sampled</font>

330
00:14:41,170 --> 00:14:47,689
<font color="#E5E5E5">vector</font><font color="#CCCCCC"> u + LW</font><font color="#E5E5E5"> just states that these two</font>

331
00:14:44,420 --> 00:14:51,589
distributions<font color="#E5E5E5"> are indistinguishable</font><font color="#CCCCCC"> all</font>

332
00:14:47,690 --> 00:14:54,170
<font color="#E5E5E5">right</font><font color="#CCCCCC"> so the so the basic technique that</font>

333
00:14:51,590 --> 00:14:55,880
we just<font color="#CCCCCC"> use is this</font><font color="#E5E5E5"> matrix Circuit</font>

334
00:14:54,170 --> 00:14:58,130
encodings<font color="#E5E5E5"> that</font><font color="#CCCCCC"> was first used by Bonilla</font>

335
00:14:55,880 --> 00:15:00,530
<font color="#E5E5E5">Tao in 2014 in the setting of a true</font>

336
00:14:58,130 --> 00:15:03,530
based encryption so this is just an

337
00:15:00,530 --> 00:15:06,490
<font color="#E5E5E5">encoding scheme so you start off okay so</font>

338
00:15:03,530 --> 00:15:09,220
<font color="#E5E5E5">yeah encoding scheme for scalar elements</font>

339
00:15:06,490 --> 00:15:13,270
serving elements or field elements

340
00:15:09,220 --> 00:15:15,730
so to encode an element<font color="#CCCCCC"> x sub i with</font>

341
00:15:13,270 --> 00:15:19,170
respect<font color="#E5E5E5"> to a public elder</font><font color="#CCCCCC"> b</font><font color="#E5E5E5"> matrix</font><font color="#CCCCCC"> a sub</font>

342
00:15:15,730 --> 00:15:23,680
<font color="#E5E5E5">i then you just compute this vector as x</font>

343
00:15:19,170 --> 00:15:25,900
AI<font color="#CCCCCC"> +</font><font color="#E5E5E5"> x i times</font><font color="#CCCCCC"> g where g is</font><font color="#E5E5E5"> this public</font>

344
00:15:23,680 --> 00:15:26,560
<font color="#E5E5E5">a gadget matrix and you just add some</font>

345
00:15:25,900 --> 00:15:30,880
noise to<font color="#CCCCCC"> it</font>

346
00:15:26,560 --> 00:15:32,500
and the benefit of<font color="#E5E5E5"> encoding and encoding</font>

347
00:15:30,880 --> 00:15:34,420
elements<font color="#E5E5E5"> this way is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it allows</font><font color="#CCCCCC"> for</font>

348
00:15:32,500 --> 00:15:38,170
homomorphic operations on the<font color="#CCCCCC"> encoding</font>

349
00:15:34,420 --> 00:15:40,689
<font color="#CCCCCC">and in particular for a circuit f we can</font>

350
00:15:38,170 --> 00:15:45,310
<font color="#CCCCCC">just Homo fleet arrived</font><font color="#E5E5E5"> are the encoding</font>

351
00:15:40,690 --> 00:15:48,940
<font color="#CCCCCC">of the of the value F of X with respect</font>

352
00:15:45,310 --> 00:15:51,010
<font color="#CCCCCC">to the</font><font color="#E5E5E5"> public matrix a sub F</font><font color="#CCCCCC"> okay in a</font>

353
00:15:48,940 --> 00:15:53,230
nice<font color="#E5E5E5"> property of this form of operations</font>

354
00:15:51,010 --> 00:15:55,510
is<font color="#CCCCCC"> that we have an analogous homomorphic</font>

355
00:15:53,230 --> 00:16:00,340
operation on the public matrices a1

356
00:15:55,510 --> 00:16:03,580
through<font color="#CCCCCC"> Al</font><font color="#E5E5E5"> and we</font><font color="#CCCCCC"> can and to derive</font><font color="#E5E5E5"> the</font>

357
00:16:00,340 --> 00:16:05,770
matrix<font color="#E5E5E5"> a sub F and this public matrix</font>

358
00:16:03,580 --> 00:16:07,720
<font color="#E5E5E5">operation does not require any</font>

359
00:16:05,770 --> 00:16:12,040
information about the underlying<font color="#CCCCCC"> encoded</font>

360
00:16:07,720 --> 00:16:13,870
values or the encoding right<font color="#E5E5E5"> so in</font>

361
00:16:12,040 --> 00:16:17,219
particular if you actually<font color="#E5E5E5"> encode our</font>

362
00:16:13,870 --> 00:16:20,740
puncture point<font color="#CCCCCC"> by string</font><font color="#E5E5E5"> C of length n</font>

363
00:16:17,220 --> 00:16:22,630
in using<font color="#E5E5E5"> this encoding then we can</font>

364
00:16:20,740 --> 00:16:25,630
actually just compute the quality check

365
00:16:22,630 --> 00:16:28,150
circuit with a PRF input X<font color="#E5E5E5"> hard-coded</font>

366
00:16:25,630 --> 00:16:30,580
inside the circuit and and get our

367
00:16:28,150 --> 00:16:32,860
encoding of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> of the result of the</font>

368
00:16:30,580 --> 00:16:35,380
quality check circuit on the puncture

369
00:16:32,860 --> 00:16:37,060
key on the puncture point<font color="#E5E5E5"> okay in</font>

370
00:16:35,380 --> 00:16:41,320
<font color="#E5E5E5">particular this equality check circuit</font>

371
00:16:37,060 --> 00:16:44,489
will output<font color="#CCCCCC"> 0 if</font><font color="#E5E5E5"> X and C are different</font>

372
00:16:41,320 --> 00:16:46,830
and it will evaluate to<font color="#CCCCCC"> 1 if X and C are</font>

373
00:16:44,490 --> 00:16:50,860
equal<font color="#CCCCCC"> okay</font>

374
00:16:46,830 --> 00:16:54,430
and the basic<font color="#CCCCCC"> idea however PRF is to</font>

375
00:16:50,860 --> 00:16:56,440
just just define or puncture key to<font color="#E5E5E5"> beat</font>

376
00:16:54,430 --> 00:17:00,459
these are encoding of<font color="#E5E5E5"> the puncture point</font>

377
00:16:56,440 --> 00:17:03,340
<font color="#CCCCCC">a see ok and if</font><font color="#E5E5E5"> you actually define or a</font>

378
00:17:00,460 --> 00:17:05,890
PRF to be the L dope to be<font color="#E5E5E5"> what looks</font>

379
00:17:03,340 --> 00:17:08,980
like an elderly sample<font color="#E5E5E5"> with respect to</font>

380
00:17:05,890 --> 00:17:11,560
the<font color="#CCCCCC"> matrix a sub X so we define</font><font color="#E5E5E5"> our PRF</font>

381
00:17:08,980 --> 00:17:13,960
to be<font color="#E5E5E5"> s transpose a sub X</font><font color="#CCCCCC"> ax plus</font><font color="#E5E5E5"> E and</font>

382
00:17:11,560 --> 00:17:16,629
then<font color="#E5E5E5"> using the puncture key you can</font>

383
00:17:13,960 --> 00:17:18,310
actually just derive the PRF output by

384
00:17:16,630 --> 00:17:22,100
running the Apollo check circuit on the

385
00:17:18,310 --> 00:17:23,780
encodings<font color="#CCCCCC"> and so since</font>

386
00:17:22,099 --> 00:17:25,909
have to be a determinist function<font color="#E5E5E5"> we</font>

387
00:17:23,780 --> 00:17:30,080
basically instead<font color="#E5E5E5"> of adding noise we</font>

388
00:17:25,910 --> 00:17:31,880
just<font color="#E5E5E5"> round the result and it turns out</font>

389
00:17:30,080 --> 00:17:34,629
with some small modifications<font color="#CCCCCC"> we can</font>

390
00:17:31,880 --> 00:17:38,510
actually<font color="#E5E5E5"> prove this PRF to be secure and</font>

391
00:17:34,630 --> 00:17:40,039
this<font color="#E5E5E5"> is actually a</font><font color="#CCCCCC"> special case of of a</font>

392
00:17:38,510 --> 00:17:41,750
<font color="#E5E5E5">constrained PRF construction</font><font color="#CCCCCC"> do to</font>

393
00:17:40,039 --> 00:17:44,330
<font color="#CCCCCC">procure ski and</font><font color="#E5E5E5"> vikon to nothing and</font>

394
00:17:41,750 --> 00:17:47,240
this actually leads to<font color="#CCCCCC"> our public upon</font>

395
00:17:44,330 --> 00:17:49,250
<font color="#CCCCCC">chobo PRF and the reason why this is</font>

396
00:17:47,240 --> 00:17:51,140
public is because to operate on these

397
00:17:49,250 --> 00:17:53,840
are on these<font color="#E5E5E5"> encodings</font><font color="#CCCCCC"> more more thickly</font>

398
00:17:51,140 --> 00:17:55,610
<font color="#E5E5E5">you actually have to know the</font>

399
00:17:53,840 --> 00:17:59,530
information<font color="#E5E5E5"> you</font><font color="#CCCCCC"> actually have to</font><font color="#E5E5E5"> know</font>

400
00:17:55,610 --> 00:18:02,418
what the underlying<font color="#E5E5E5"> encoded values are</font>

401
00:17:59,530 --> 00:18:05,270
<font color="#E5E5E5">okay so to</font><font color="#CCCCCC"> actually get private</font>

402
00:18:02,419 --> 00:18:06,799
puncturing we borrow the ideas from the

403
00:18:05,270 --> 00:18:07,870
<font color="#E5E5E5">predicate encryption constructions of</font>

404
00:18:06,799 --> 00:18:11,750
<font color="#CCCCCC">4.0 fatale</font>

405
00:18:07,870 --> 00:18:13,850
so before we encode it in these in<font color="#E5E5E5"> this</font>

406
00:18:11,750 --> 00:18:15,770
encoding we just encrypted using a fully

407
00:18:13,850 --> 00:18:16,730
homomorphic encryption scheme<font color="#CCCCCC"> okay and</font>

408
00:18:15,770 --> 00:18:19,280
then we just<font color="#CCCCCC"> encode it</font>

409
00:18:16,730 --> 00:18:21,770
yeah and then we basically<font color="#E5E5E5"> just a</font>

410
00:18:19,280 --> 00:18:25,490
computer<font color="#CCCCCC"> code</font><font color="#E5E5E5"> check circuit inside the</font>

411
00:18:21,770 --> 00:18:28,460
<font color="#CCCCCC">FHFA</font><font color="#E5E5E5"> amorphic operations right so a</font>

412
00:18:25,490 --> 00:18:30,650
problem with this<font color="#E5E5E5"> a problem</font><font color="#CCCCCC"> with this</font>

413
00:18:28,460 --> 00:18:32,870
approach is<font color="#E5E5E5"> that they call it at the end</font>

414
00:18:30,650 --> 00:18:35,150
<font color="#E5E5E5">of the day after you finish the quality</font>

415
00:18:32,870 --> 00:18:38,510
check circuit<font color="#E5E5E5"> the result of the it of</font>

416
00:18:35,150 --> 00:18:40,940
the poly check check is encoded inside

417
00:18:38,510 --> 00:18:42,320
the<font color="#E5E5E5"> FHD encryption okay so</font><font color="#CCCCCC"> there's there</font>

418
00:18:40,940 --> 00:18:45,890
must be a way<font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> extract this</font>

419
00:18:42,320 --> 00:18:47,870
information and result and we resolve

420
00:18:45,890 --> 00:18:51,049
this by just just published just

421
00:18:47,870 --> 00:18:53,928
including as in the<font color="#CCCCCC"> punk jerky fht</font><font color="#E5E5E5"> the</font>

422
00:18:51,049 --> 00:18:55,760
encoding<font color="#CCCCCC"> zuv fhe decryption key</font><font color="#E5E5E5"> and we</font>

423
00:18:53,929 --> 00:18:58,730
use the fact that to actually<font color="#CCCCCC"> multiply</font>

424
00:18:55,760 --> 00:19:00,679
<font color="#E5E5E5">for these homomorphic operations to</font>

425
00:18:58,730 --> 00:19:02,630
actually<font color="#CCCCCC"> multiply two encodings you</font>

426
00:19:00,679 --> 00:19:04,640
<font color="#E5E5E5">actually need just one of the encoding</font>

427
00:19:02,630 --> 00:19:08,059
to one of the encoded values and not the

428
00:19:04,640 --> 00:19:12,470
other and<font color="#CCCCCC"> this allows us to compute</font>

429
00:19:08,059 --> 00:19:14,120
inner products of the<font color="#CCCCCC"> FHD of the teen</font>

430
00:19:12,470 --> 00:19:17,870
code<font color="#E5E5E5"> the encryption of the</font><font color="#CCCCCC"> Koala check</font>

431
00:19:14,120 --> 00:19:20,120
circuit and<font color="#CCCCCC"> and the fh secret key</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> we</font>

432
00:19:17,870 --> 00:19:24,260
use the property that for<font color="#CCCCCC"> fhe decryption</font>

433
00:19:20,120 --> 00:19:27,229
is a is a noisy inner product<font color="#CCCCCC"> and</font>

434
00:19:24,260 --> 00:19:31,070
there's some technicalities here that we

435
00:19:27,230 --> 00:19:33,710
have to actually take care<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the noise</font>

436
00:19:31,070 --> 00:19:35,919
that's that comes out of the FHD

437
00:19:33,710 --> 00:19:38,230
decryption and that's<font color="#E5E5E5"> actually</font>

438
00:19:35,920 --> 00:19:39,730
for this<font color="#E5E5E5"> due to time constraints I will</font>

439
00:19:38,230 --> 00:19:43,330
not be able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> talk about this</font>

440
00:19:39,730 --> 00:19:45,730
so I'll just<font color="#E5E5E5"> refer to</font><font color="#CCCCCC"> the paper and rap</font>

441
00:19:43,330 --> 00:19:48,429
<font color="#E5E5E5">and to conclude so I want to mention a</font>

442
00:19:45,730 --> 00:19:52,000
concurrent work<font color="#E5E5E5"> by Canadian</font><font color="#CCCCCC"> chin</font><font color="#E5E5E5"> so I</font>

443
00:19:48,430 --> 00:19:54,100
think you'll hear<font color="#E5E5E5"> from</font><font color="#CCCCCC"> LA in a second</font><font color="#E5E5E5"> in</font>

444
00:19:52,000 --> 00:19:56,070
the next talk<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> so the techniques</font>

445
00:19:54,100 --> 00:19:58,659
are actually quite<font color="#E5E5E5"> different so they use</font>

446
00:19:56,070 --> 00:20:01,120
instances of<font color="#CCCCCC"> ggh 50 Motel your maths</font>

447
00:19:58,660 --> 00:20:03,070
that<font color="#CCCCCC"> are still reducible to lwe</font><font color="#E5E5E5"> so we</font>

448
00:20:01,120 --> 00:20:06,669
use techniques from<font color="#CCCCCC"> a tree based</font>

449
00:20:03,070 --> 00:20:09,580
<font color="#E5E5E5">encryption and predicate encryption so I</font>

450
00:20:06,670 --> 00:20:11,650
also want to<font color="#CCCCCC"> mention some extensions so</font>

451
00:20:09,580 --> 00:20:13,270
we were able<font color="#E5E5E5"> to extend there's these</font>

452
00:20:11,650 --> 00:20:16,060
<font color="#CCCCCC">other techniques that</font><font color="#E5E5E5"> are used in this</font>

453
00:20:13,270 --> 00:20:18,010
work to get<font color="#CCCCCC"> watermark</font><font color="#E5E5E5"> about prfs from</font>

454
00:20:16,060 --> 00:20:20,290
<font color="#CCCCCC">lwe</font><font color="#E5E5E5"> and this was only previously known</font>

455
00:20:18,010 --> 00:20:22,860
from obfuscation<font color="#CCCCCC"> so you'll hear</font><font color="#E5E5E5"> more</font>

456
00:20:20,290 --> 00:20:25,480
about<font color="#E5E5E5"> this in</font><font color="#CCCCCC"> the run session tomorrow</font>

457
00:20:22,860 --> 00:20:29,350
and so let me<font color="#E5E5E5"> just</font><font color="#CCCCCC"> conclude with some</font>

458
00:20:25,480 --> 00:20:30,880
open problems<font color="#CCCCCC"> so I guess a nice open</font>

459
00:20:29,350 --> 00:20:32,260
problem like I mentioned is can we

460
00:20:30,880 --> 00:20:34,000
actually get private function<font color="#CCCCCC"> well PRS</font>

461
00:20:32,260 --> 00:20:35,980
from other assumptions like the D H

462
00:20:34,000 --> 00:20:38,740
pairings<font color="#E5E5E5"> or like one or just even</font><font color="#CCCCCC"> more</font>

463
00:20:35,980 --> 00:20:41,080
functions so are there other

464
00:20:38,740 --> 00:20:45,670
applications of privacy in<font color="#CCCCCC"> constraint</font>

465
00:20:41,080 --> 00:20:47,590
<font color="#CCCCCC">brf's</font><font color="#E5E5E5"> and also</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> I wasn't able to talk</font>

466
00:20:45,670 --> 00:20:49,630
<font color="#CCCCCC">about the technical to detect</font><font color="#E5E5E5"> these for</font>

467
00:20:47,590 --> 00:20:51,639
this talk but can<font color="#CCCCCC"> we actually</font><font color="#E5E5E5"> apply the</font>

468
00:20:49,630 --> 00:20:53,200
techniques in<font color="#E5E5E5"> this work to the setting</font>

469
00:20:51,640 --> 00:20:55,060
of<font color="#E5E5E5"> predicate encryption for instance I</font>

470
00:20:53,200 --> 00:20:58,180
<font color="#E5E5E5">think</font><font color="#CCCCCC"> this these are</font><font color="#E5E5E5"> very nice open</font>

471
00:20:55,060 --> 00:21:00,270
<font color="#E5E5E5">problems</font><font color="#CCCCCC"> ok and with that I will</font>

472
00:20:58,180 --> 00:21:00,270
conclude

473
00:21:04,870 --> 00:21:08,739
<font color="#E5E5E5">okay so are there any questions</font>

474
00:21:16,440 --> 00:21:20,530
our private<font color="#CCCCCC"> function perhaps</font><font color="#E5E5E5"> not to</font>

475
00:21:19,180 --> 00:21:23,770
imply anything<font color="#E5E5E5"> stronger</font><font color="#CCCCCC"> than one we</font>

476
00:21:20,530 --> 00:21:26,139
functions<font color="#CCCCCC"> I go to your yeah so for</font>

477
00:21:23,770 --> 00:21:30,010
actually constraint<font color="#E5E5E5"> prfs for two keys</font>

478
00:21:26,140 --> 00:21:32,710
actually implies<font color="#CCCCCC"> IO but for punctual</font><font color="#E5E5E5"> PRF</font>

479
00:21:30,010 --> 00:21:34,629
<font color="#CCCCCC">you can actually just publish only a</font>

480
00:21:32,710 --> 00:21:37,150
single<font color="#E5E5E5"> key right so if you actually</font>

481
00:21:34,630 --> 00:21:39,490
<font color="#CCCCCC">publish a to to puncture Keys</font><font color="#E5E5E5"> then you</font>

482
00:21:37,150 --> 00:21:42,520
can evaluate the PRF<font color="#CCCCCC"> on all points</font><font color="#E5E5E5"> so</font>

483
00:21:39,490 --> 00:21:45,840
<font color="#E5E5E5">you can't actually have a well-defined</font>

484
00:21:42,520 --> 00:21:49,270
notion of security<font color="#E5E5E5"> in that notion so</font>

485
00:21:45,840 --> 00:21:51,129
does that answer<font color="#E5E5E5"> your if the existence</font>

486
00:21:49,270 --> 00:21:53,260
of private<font color="#CCCCCC"> function perhaps</font><font color="#E5E5E5"> is known to</font>

487
00:21:51,130 --> 00:21:56,470
imply anything<font color="#E5E5E5"> beyond one-way functions</font>

488
00:21:53,260 --> 00:22:05,560
<font color="#CCCCCC">oh</font><font color="#E5E5E5"> oh no I don't</font><font color="#CCCCCC"> think it's not renown</font>

489
00:21:56,470 --> 00:22:07,300
yeah so the template you<font color="#E5E5E5"> described</font>

490
00:22:05,560 --> 00:22:08,980
didn't seem to use<font color="#E5E5E5"> anything very special</font>

491
00:22:07,300 --> 00:22:12,100
about equality<font color="#E5E5E5"> can you say a little</font><font color="#CCCCCC"> bit</font>

492
00:22:08,980 --> 00:22:14,350
<font color="#CCCCCC">about why you care what like you know</font>

493
00:22:12,100 --> 00:22:17,590
restricts<font color="#E5E5E5"> you to point puncturing rather</font>

494
00:22:14,350 --> 00:22:19,120
than general functions well well so yeah

495
00:22:17,590 --> 00:22:22,659
so I was hiding<font color="#E5E5E5"> all the details under</font>

496
00:22:19,120 --> 00:22:25,209
the<font color="#CCCCCC"> walk but</font><font color="#E5E5E5"> but first we weren't able</font>

497
00:22:22,660 --> 00:22:26,950
to<font color="#E5E5E5"> get the parameters to work out so the</font>

498
00:22:25,210 --> 00:22:29,650
parameters<font color="#CCCCCC"> are kind</font><font color="#E5E5E5"> of becomes circular</font>

499
00:22:26,950 --> 00:22:36,730
so<font color="#CCCCCC"> there what we couldn't find a</font>

500
00:22:29,650 --> 00:22:38,800
parameter<font color="#E5E5E5"> that worked out and and and so</font>

501
00:22:36,730 --> 00:22:40,870
to actually<font color="#CCCCCC"> get</font><font color="#E5E5E5"> and with with Aria was</font>

502
00:22:38,800 --> 00:22:42,520
quite so since we<font color="#E5E5E5"> can't we won't can</font>

503
00:22:40,870 --> 00:22:44,620
<font color="#E5E5E5">only publish a single key anyway so we</font>

504
00:22:42,520 --> 00:22:50,430
thought<font color="#CCCCCC"> of</font><font color="#E5E5E5"> actually private puncturing</font>

505
00:22:44,620 --> 00:22:50,429
is actually more natural so yeah

506
00:22:57,429 --> 00:23:03,909
so did you look at<font color="#CCCCCC"> brf's that have an</font>

507
00:23:00,879 --> 00:23:06,529
unbounded<font color="#CCCCCC"> n boots</font><font color="#E5E5E5"> and to achieve this</font>

508
00:23:03,909 --> 00:23:08,779
private puncturing<font color="#E5E5E5"> it seems that these</font>

509
00:23:06,529 --> 00:23:11,749
techniques do not extend naturally to

510
00:23:08,779 --> 00:23:15,529
unbounded<font color="#E5E5E5"> impudent right because they</font>

511
00:23:11,749 --> 00:23:18,259
reveal the the size of the input<font color="#E5E5E5"> right</font>

512
00:23:15,529 --> 00:23:19,820
right so so for<font color="#CCCCCC"> for a</font><font color="#E5E5E5"> poncho here</font><font color="#CCCCCC"> as you</font>

513
00:23:18,259 --> 00:23:22,879
actually<font color="#E5E5E5"> need the puncture point to be</font>

514
00:23:19,820 --> 00:23:26,450
fixed<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we because we need the</font>

515
00:23:22,879 --> 00:23:27,769
puncture key to be finite so right so

516
00:23:26,450 --> 00:23:30,529
the techniques<font color="#E5E5E5"> used in this work does</font>

517
00:23:27,769 --> 00:23:32,629
not<font color="#E5E5E5"> I'm not sure if it's</font><font color="#CCCCCC"> even while</font>

518
00:23:30,529 --> 00:23:34,429
<font color="#CCCCCC">define from</font><font color="#E5E5E5"> or from about Olympus I mean</font>

519
00:23:32,629 --> 00:23:38,230
in the challenge experiment if I give

520
00:23:34,429 --> 00:23:40,789
you<font color="#CCCCCC"> two x's of varying lengths</font><font color="#E5E5E5"> then</font>

521
00:23:38,230 --> 00:23:42,499
depending on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> size of the key that I</font>

522
00:23:40,789 --> 00:23:45,559
get I can<font color="#E5E5E5"> distinguish easily because</font>

523
00:23:42,499 --> 00:23:47,570
it's the size of<font color="#E5E5E5"> the key would</font><font color="#CCCCCC"> be kind</font>

524
00:23:45,559 --> 00:23:50,269
<font color="#E5E5E5">of linear</font><font color="#CCCCCC"> in the in the size of the</font>

525
00:23:47,570 --> 00:23:52,189
input so the<font color="#CCCCCC"> BRF has to be a fixed input</font>

526
00:23:50,269 --> 00:23:54,580
<font color="#CCCCCC">no</font><font color="#E5E5E5"> right right right yes I</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> right</font>

527
00:23:52,190 --> 00:23:54,580
right

