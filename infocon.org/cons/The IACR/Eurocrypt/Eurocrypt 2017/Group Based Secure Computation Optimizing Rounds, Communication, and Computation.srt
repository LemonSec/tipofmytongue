1
00:00:00,000 --> 00:00:04,019
<font color="#CCCCCC">the talk</font><font color="#E5E5E5"> alright thanks and thanks to</font>

2
00:00:02,250 --> 00:00:05,310
everybody<font color="#CCCCCC"> for showing</font><font color="#E5E5E5"> up so early of</font>

3
00:00:04,019 --> 00:00:06,930
course<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> morning although I saw</font>

4
00:00:05,310 --> 00:00:09,750
that there<font color="#E5E5E5"> was coffee outside so you're</font>

5
00:00:06,930 --> 00:00:11,820
expected to pay attention<font color="#CCCCCC"> ok so group</font>

6
00:00:09,750 --> 00:00:14,400
<font color="#E5E5E5">base secure computation</font><font color="#CCCCCC"> let me</font><font color="#E5E5E5"> start by</font>

7
00:00:11,820 --> 00:00:16,260
saying<font color="#E5E5E5"> what do I mean</font><font color="#CCCCCC"> by this ok so</font>

8
00:00:14,400 --> 00:00:18,230
here's sort of a<font color="#E5E5E5"> philosophical look of</font>

9
00:00:16,260 --> 00:00:21,210
the landscape of secure computation

10
00:00:18,230 --> 00:00:22,980
<font color="#E5E5E5">approaches so</font><font color="#CCCCCC"> we're in what kind</font><font color="#E5E5E5"> of</font>

11
00:00:21,210 --> 00:00:24,480
category I consider these classical

12
00:00:22,980 --> 00:00:26,220
approaches<font color="#E5E5E5"> so things</font><font color="#CCCCCC"> that we we</font>

13
00:00:24,480 --> 00:00:30,000
typically talk about things like<font color="#CCCCCC"> Yau and</font>

14
00:00:26,220 --> 00:00:31,439
gmw based protocols<font color="#CCCCCC"> and so these have</font>

15
00:00:30,000 --> 00:00:33,630
<font color="#E5E5E5">been around for</font><font color="#CCCCCC"> four decades</font><font color="#E5E5E5"> and have</font>

16
00:00:31,439 --> 00:00:35,399
really been fine-tuned and<font color="#E5E5E5"> optimized in</font>

17
00:00:33,630 --> 00:00:38,579
a lot<font color="#E5E5E5"> of fantastic ways</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of</font>

18
00:00:35,399 --> 00:00:40,920
practical systems<font color="#CCCCCC"> but</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> of the</font>

19
00:00:38,579 --> 00:00:43,170
<font color="#E5E5E5">downsides of these is that inherently</font>

20
00:00:40,920 --> 00:00:45,180
both of these approaches<font color="#E5E5E5"> can everything</font>

21
00:00:43,170 --> 00:00:47,070
in this<font color="#E5E5E5"> category inherently</font><font color="#CCCCCC"> requires</font>

22
00:00:45,180 --> 00:00:49,530
communication<font color="#CCCCCC"> to grow with the entire</font>

23
00:00:47,070 --> 00:00:53,940
circuit size of that<font color="#E5E5E5"> you want to</font><font color="#CCCCCC"> doing</font>

24
00:00:49,530 --> 00:00:57,480
<font color="#CCCCCC">they compute ok so in comparison</font><font color="#E5E5E5"> with</font>

25
00:00:53,940 --> 00:01:00,209
these in 2009 kind of these breakthrough

26
00:00:57,480 --> 00:01:03,599
works<font color="#E5E5E5"> in fully homomorphic encryption</font><font color="#CCCCCC"> we</font>

27
00:01:00,210 --> 00:01:06,479
found the first ways of getting secure

28
00:01:03,600 --> 00:01:08,220
<font color="#CCCCCC">computation</font><font color="#E5E5E5"> where the the communication</font>

29
00:01:06,479 --> 00:01:10,429
grows asymptotically<font color="#CCCCCC"> not with the</font>

30
00:01:08,220 --> 00:01:12,840
circuit size but just with the

31
00:01:10,430 --> 00:01:16,290
essentially the input<font color="#E5E5E5"> in output size as</font>

32
00:01:12,840 --> 00:01:18,810
you would want<font color="#E5E5E5"> so this is fantastic</font><font color="#CCCCCC"> in</font>

33
00:01:16,290 --> 00:01:21,030
<font color="#CCCCCC">terms of asymptotic cost</font><font color="#E5E5E5"> unfortunately</font>

34
00:01:18,810 --> 00:01:22,020
there's a lot<font color="#E5E5E5"> of</font><font color="#CCCCCC"> downsides</font><font color="#E5E5E5"> if you</font>

35
00:01:21,030 --> 00:01:24,479
actually look at<font color="#CCCCCC"> some of the concrete</font>

36
00:01:22,020 --> 00:01:26,429
costs here so this<font color="#E5E5E5"> has</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> around since</font>

37
00:01:24,479 --> 00:01:29,600
2009 has been<font color="#E5E5E5"> tremendous work and</font>

38
00:01:26,430 --> 00:01:33,270
<font color="#E5E5E5">actually tremendous progress in</font><font color="#CCCCCC"> improved</font>

39
00:01:29,600 --> 00:01:36,509
optimizations<font color="#E5E5E5"> but still essentially what</font>

40
00:01:33,270 --> 00:01:41,579
exists now<font color="#E5E5E5"> is</font><font color="#CCCCCC"> even kind</font><font color="#E5E5E5"> of more</font>

41
00:01:36,509 --> 00:01:43,680
expensive<font color="#E5E5E5"> in</font><font color="#CCCCCC"> ok I'm not</font><font color="#E5E5E5"> even going</font><font color="#CCCCCC"> to go</font>

42
00:01:41,579 --> 00:01:46,139
<font color="#E5E5E5">into the extremes there</font><font color="#CCCCCC"> let's</font><font color="#E5E5E5"> just say</font>

43
00:01:43,680 --> 00:01:47,520
<font color="#CCCCCC">there's much to be</font><font color="#E5E5E5"> desired</font><font color="#CCCCCC"> ok and one of</font>

44
00:01:46,140 --> 00:01:49,860
the the negatives<font color="#CCCCCC"> that kind of</font>

45
00:01:47,520 --> 00:01:51,929
contributes to this not only<font color="#E5E5E5"> from a</font>

46
00:01:49,860 --> 00:01:55,229
theoretical<font color="#E5E5E5"> standpoint but</font><font color="#CCCCCC"> also in</font><font color="#E5E5E5"> terms</font>

47
00:01:51,930 --> 00:01:57,719
of practicality<font color="#E5E5E5"> is that all</font><font color="#CCCCCC"> of these fhe</font>

48
00:01:55,229 --> 00:01:59,670
based constructions so despite a lot of

49
00:01:57,719 --> 00:02:01,469
<font color="#E5E5E5">work in trying to get it based on</font>

50
00:01:59,670 --> 00:02:02,850
different assumptions<font color="#E5E5E5"> essentially</font>

51
00:02:01,469 --> 00:02:06,270
everything<font color="#E5E5E5"> relies on the same narrow</font>

52
00:02:02,850 --> 00:02:09,299
window of these noisy encodings<font color="#E5E5E5"> based</font><font color="#CCCCCC"> on</font>

53
00:02:06,270 --> 00:02:11,519
<font color="#E5E5E5">lattices so one of the one of the</font>

54
00:02:09,300 --> 00:02:12,989
downsides<font color="#E5E5E5"> of that is so as I mentioned</font>

55
00:02:11,520 --> 00:02:13,890
not not<font color="#E5E5E5"> only in terms of we'd like a</font>

56
00:02:12,989 --> 00:02:15,810
wider spectrum

57
00:02:13,890 --> 00:02:20,250
things but<font color="#E5E5E5"> because there's a lot of</font>

58
00:02:15,810 --> 00:02:21,720
these generic lattice attacks that means

59
00:02:20,250 --> 00:02:23,760
that you actually have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> crank up kind</font>

60
00:02:21,720 --> 00:02:26,480
<font color="#E5E5E5">of the security parameters and this this</font>

61
00:02:23,760 --> 00:02:29,940
contributes also to poor<font color="#CCCCCC"> poor efficiency</font>

62
00:02:26,480 --> 00:02:32,190
<font color="#CCCCCC">okay so now kind</font><font color="#E5E5E5"> of shifting</font><font color="#CCCCCC"> to the</font>

63
00:02:29,940 --> 00:02:34,380
topic of this talk is going<font color="#CCCCCC"> to be kind</font>

64
00:02:32,190 --> 00:02:37,410
<font color="#CCCCCC">of a</font><font color="#E5E5E5"> different approach to to secure</font>

65
00:02:34,380 --> 00:02:38,730
computation<font color="#E5E5E5"> and this is kind</font><font color="#CCCCCC"> of one of</font>

66
00:02:37,410 --> 00:02:41,400
<font color="#E5E5E5">the things that we we introduced last</font>

67
00:02:38,730 --> 00:02:42,810
<font color="#E5E5E5">year in the crypto result based on</font>

68
00:02:41,400 --> 00:02:45,120
what's<font color="#E5E5E5"> known as homomorphic secret</font>

69
00:02:42,810 --> 00:02:47,910
sharing<font color="#CCCCCC"> okay so this is the</font><font color="#E5E5E5"> topic of</font>

70
00:02:45,120 --> 00:02:50,280
this talk<font color="#E5E5E5"> and in the title</font><font color="#CCCCCC"> of the talk</font>

71
00:02:47,910 --> 00:02:52,410
<font color="#CCCCCC">we refer to</font><font color="#E5E5E5"> this as group based secure</font>

72
00:02:50,280 --> 00:02:54,690
computation<font color="#CCCCCC"> and sort of the</font><font color="#E5E5E5"> reason for</font>

73
00:02:52,410 --> 00:02:56,670
<font color="#CCCCCC">this is that</font><font color="#E5E5E5"> for the first time aside</font>

74
00:02:54,690 --> 00:02:58,650
<font color="#CCCCCC">from these lattice space constructions</font>

75
00:02:56,670 --> 00:03:01,559
<font color="#E5E5E5">we have constructions of homomorphic</font>

76
00:02:58,650 --> 00:03:03,660
secret sharing based on discrete<font color="#E5E5E5"> log</font>

77
00:03:01,560 --> 00:03:06,180
type assumptions and<font color="#E5E5E5"> I'll talk a lot</font>

78
00:03:03,660 --> 00:03:08,730
<font color="#E5E5E5">about this</font><font color="#CCCCCC"> today okay so what is this</font>

79
00:03:06,180 --> 00:03:10,560
homomorphic secret<font color="#E5E5E5"> sharing and this is</font>

80
00:03:08,730 --> 00:03:13,709
going to be<font color="#E5E5E5"> kind of the central friend</font>

81
00:03:10,560 --> 00:03:15,750
of ours<font color="#E5E5E5"> today okay so this is an</font>

82
00:03:13,709 --> 00:03:17,880
<font color="#E5E5E5">extension of standard secret sharing you</font>

83
00:03:15,750 --> 00:03:19,709
think about some secret<font color="#CCCCCC"> X split into two</font>

84
00:03:17,880 --> 00:03:21,690
different parts<font color="#E5E5E5"> where we require</font>

85
00:03:19,709 --> 00:03:23,310
standard<font color="#E5E5E5"> security so if you just see one</font>

86
00:03:21,690 --> 00:03:26,130
of these two different shares<font color="#CCCCCC"> you don't</font>

87
00:03:23,310 --> 00:03:28,980
know what the secret<font color="#E5E5E5"> X is okay but the</font>

88
00:03:26,130 --> 00:03:30,780
homomorphic aspect is that<font color="#CCCCCC"> I can locally</font>

89
00:03:28,980 --> 00:03:33,030
compute on a single share in a

90
00:03:30,780 --> 00:03:34,380
homomorphic fashion<font color="#E5E5E5"> so say that there's</font>

91
00:03:33,030 --> 00:03:37,860
some program P that we'd like<font color="#E5E5E5"> to</font>

92
00:03:34,380 --> 00:03:39,540
<font color="#CCCCCC">evaluate such that these is these</font>

93
00:03:37,860 --> 00:03:42,510
outcomes here<font color="#E5E5E5"> and have an additive</font>

94
00:03:39,540 --> 00:03:45,570
reconstruction<font color="#E5E5E5"> okay so what does it mean</font>

95
00:03:42,510 --> 00:03:48,890
again I<font color="#E5E5E5"> have sure x0 you have sure x1 we</font>

96
00:03:45,570 --> 00:03:52,290
locally evaluate in these add together

97
00:03:48,890 --> 00:03:54,238
<font color="#CCCCCC">okay so an interesting relaxation</font><font color="#E5E5E5"> that's</font>

98
00:03:52,290 --> 00:03:56,970
going to be important for today is what

99
00:03:54,239 --> 00:03:58,560
<font color="#CCCCCC">we refer to</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> Delta H SS and this</font><font color="#E5E5E5"> is</font>

100
00:03:56,970 --> 00:04:00,810
essentially homomorphic secret sharing

101
00:03:58,560 --> 00:04:03,120
<font color="#CCCCCC">but with some sort of probability of</font>

102
00:04:00,810 --> 00:04:05,070
error<font color="#E5E5E5"> Delta and this probability is</font>

103
00:04:03,120 --> 00:04:08,940
taken<font color="#E5E5E5"> over though the randomness of the</font>

104
00:04:05,070 --> 00:04:10,858
<font color="#E5E5E5">share procedure okay and in turn so we</font>

105
00:04:08,940 --> 00:04:15,720
have this probability<font color="#CCCCCC"> Delta in the</font><font color="#E5E5E5"> error</font>

106
00:04:10,859 --> 00:04:17,789
and we allow the run time evaluation the

107
00:04:15,720 --> 00:04:19,978
evaluation evaluation run time to scale

108
00:04:17,789 --> 00:04:22,260
<font color="#E5E5E5">also with 1</font><font color="#CCCCCC"> over Delta so for example</font>

109
00:04:19,978 --> 00:04:26,099
we're talking about<font color="#E5E5E5"> 1 over 1 over</font>

110
00:04:22,260 --> 00:04:27,510
<font color="#CCCCCC">polynomial probability here okay</font><font color="#E5E5E5"> so in</font>

111
00:04:26,099 --> 00:04:30,270
the crypto work from the last

112
00:04:27,510 --> 00:04:32,610
here<font color="#E5E5E5"> we showed essentially that if you</font>

113
00:04:30,270 --> 00:04:34,380
have<font color="#E5E5E5"> is there two different things first</font>

114
00:04:32,610 --> 00:04:36,830
of all<font color="#CCCCCC"> we</font><font color="#E5E5E5"> gave a</font><font color="#CCCCCC"> construction of</font><font color="#E5E5E5"> Delta</font>

115
00:04:34,380 --> 00:04:40,260
<font color="#E5E5E5">HS</font><font color="#CCCCCC"> s we</font><font color="#E5E5E5"> so go into</font><font color="#CCCCCC"> more detail</font><font color="#E5E5E5"> later but</font>

116
00:04:36,830 --> 00:04:42,890
<font color="#CCCCCC">also</font><font color="#E5E5E5"> showed that if you have even Delta</font>

117
00:04:40,260 --> 00:04:45,450
<font color="#E5E5E5">HS s this is enough to give you say</font>

118
00:04:42,890 --> 00:04:47,880
<font color="#E5E5E5">succinct</font><font color="#CCCCCC"> two-party secure computation</font>

119
00:04:45,450 --> 00:04:49,469
<font color="#E5E5E5">and roughly</font><font color="#CCCCCC"> what the</font><font color="#E5E5E5"> framework is is</font>

120
00:04:47,880 --> 00:04:52,790
think about<font color="#CCCCCC"> these two</font><font color="#E5E5E5"> parties with some</font>

121
00:04:49,470 --> 00:04:55,440
<font color="#E5E5E5">secret inputs we can run a small</font><font color="#CCCCCC"> size</font>

122
00:04:52,790 --> 00:04:57,330
<font color="#CCCCCC">generic say secure protocol in order</font><font color="#E5E5E5"> to</font>

123
00:04:55,440 --> 00:05:00,840
generate<font color="#E5E5E5"> these homomorphic secret shares</font>

124
00:04:57,330 --> 00:05:02,520
and the bulk of sort of<font color="#CCCCCC"> the work is</font>

125
00:05:00,840 --> 00:05:05,130
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be done in the locally with</font>

126
00:05:02,520 --> 00:05:06,780
homomorphic evaluation<font color="#CCCCCC"> okay at the end</font>

127
00:05:05,130 --> 00:05:10,050
<font color="#CCCCCC">we can do some sort of recombination</font>

128
00:05:06,780 --> 00:05:11,549
protocol to get the final<font color="#CCCCCC"> answer</font><font color="#E5E5E5"> okay so</font>

129
00:05:10,050 --> 00:05:13,020
the communication<font color="#E5E5E5"> here</font><font color="#CCCCCC"> I don't have to</font>

130
00:05:11,550 --> 00:05:14,760
<font color="#CCCCCC">communicate with respect to the circuit</font>

131
00:05:13,020 --> 00:05:20,190
science but just with<font color="#CCCCCC"> respect to input</font>

132
00:05:14,760 --> 00:05:21,300
in output size<font color="#E5E5E5"> okay good</font><font color="#CCCCCC"> so yes so this</font>

133
00:05:20,190 --> 00:05:24,540
has two<font color="#E5E5E5"> different</font><font color="#CCCCCC"> results the</font>

134
00:05:21,300 --> 00:05:30,060
construction in<font color="#E5E5E5"> this is putting it</font>

135
00:05:24,540 --> 00:05:32,280
together<font color="#E5E5E5"> okay so this this</font><font color="#CCCCCC"> framework is</font>

136
00:05:30,060 --> 00:05:34,290
very<font color="#E5E5E5"> interesting particularly from a</font>

137
00:05:32,280 --> 00:05:36,169
theoretical aspect<font color="#E5E5E5"> we can do things like</font>

138
00:05:34,290 --> 00:05:41,030
beat the circuit science barrier of

139
00:05:36,170 --> 00:05:44,880
communication but this is<font color="#CCCCCC"> completely</font>

140
00:05:41,030 --> 00:05:46,409
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> basically as it sat before</font><font color="#CCCCCC"> it was a</font>

141
00:05:44,880 --> 00:05:48,840
<font color="#E5E5E5">very interesting</font><font color="#CCCCCC"> direction but</font>

142
00:05:46,410 --> 00:05:50,640
completely<font color="#CCCCCC"> theoretical</font><font color="#E5E5E5"> and in this work</font>

143
00:05:48,840 --> 00:05:53,190
we try to make strides in a couple

144
00:05:50,640 --> 00:05:54,539
different dimensions<font color="#E5E5E5"> of pushing not only</font>

145
00:05:53,190 --> 00:05:56,130
kind<font color="#CCCCCC"> of seeing</font><font color="#E5E5E5"> what is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> best that we</font>

146
00:05:54,540 --> 00:05:59,520
<font color="#E5E5E5">can do asymptotically in a theoretical</font>

147
00:05:56,130 --> 00:06:01,110
direction<font color="#CCCCCC"> but</font><font color="#E5E5E5"> also can we push</font><font color="#CCCCCC"> this can</font>

148
00:05:59,520 --> 00:06:02,700
we get this<font color="#E5E5E5"> to something</font><font color="#CCCCCC"> that can really</font>

149
00:06:01,110 --> 00:06:04,830
<font color="#E5E5E5">be practical and</font><font color="#CCCCCC"> I think that there's a</font>

150
00:06:02,700 --> 00:06:07,530
<font color="#E5E5E5">lot of exciting</font><font color="#CCCCCC"> stuff to be said in</font><font color="#E5E5E5"> that</font>

151
00:06:04,830 --> 00:06:09,030
direction<font color="#CCCCCC"> okay so we look in particular</font>

152
00:06:07,530 --> 00:06:11,570
at three different<font color="#CCCCCC"> dimensions</font><font color="#E5E5E5"> of</font>

153
00:06:09,030 --> 00:06:14,130
improvement in secure computation here

154
00:06:11,570 --> 00:06:17,310
the round complexity the communication

155
00:06:14,130 --> 00:06:19,040
and computation<font color="#E5E5E5"> so the first results</font><font color="#CCCCCC"> I'm</font>

156
00:06:17,310 --> 00:06:21,900
<font color="#E5E5E5">going to say it's</font><font color="#CCCCCC"> completely theoretical</font>

157
00:06:19,040 --> 00:06:25,320
<font color="#E5E5E5">but basically we show that we can get to</font>

158
00:06:21,900 --> 00:06:28,770
around<font color="#E5E5E5"> multi-party computation from</font><font color="#CCCCCC"> DDH</font>

159
00:06:25,320 --> 00:06:31,830
with a little bit<font color="#E5E5E5"> of setup</font><font color="#CCCCCC"> okay and</font>

160
00:06:28,770 --> 00:06:33,510
previously this this result<font color="#E5E5E5"> was only</font>

161
00:06:31,830 --> 00:06:35,240
<font color="#CCCCCC">known</font><font color="#E5E5E5"> based on learning with errors</font>

162
00:06:33,510 --> 00:06:37,430
these lattice assumptions or

163
00:06:35,240 --> 00:06:39,390
indistinguishability<font color="#E5E5E5"> obfuscation</font>

164
00:06:37,430 --> 00:06:41,340
<font color="#CCCCCC">okay next in kind of</font><font color="#E5E5E5"> a different</font>

165
00:06:39,390 --> 00:06:43,710
direction<font color="#E5E5E5"> we look at him</font>

166
00:06:41,340 --> 00:06:45,539
ments<font color="#CCCCCC"> of the communication complexity</font><font color="#E5E5E5"> so</font>

167
00:06:43,710 --> 00:06:47,638
first of all<font color="#E5E5E5"> kind of trying</font><font color="#CCCCCC"> to shave off</font>

168
00:06:45,540 --> 00:06:49,410
these<font color="#E5E5E5"> polygons the security parameter</font>

169
00:06:47,639 --> 00:06:51,330
factors<font color="#E5E5E5"> we can really get this</font>

170
00:06:49,410 --> 00:06:53,699
communication<font color="#E5E5E5"> to just input plus</font>

171
00:06:51,330 --> 00:06:56,940
essentially output size and an additive

172
00:06:53,699 --> 00:06:59,520
poly lambda<font color="#E5E5E5"> and as one corollary of this</font>

173
00:06:56,940 --> 00:07:02,070
and so if you consider<font color="#E5E5E5"> the</font><font color="#CCCCCC"> specific</font>

174
00:06:59,520 --> 00:07:06,539
<font color="#E5E5E5">functionality of trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> generate one</font>

175
00:07:02,070 --> 00:07:08,969
bit OTS oblivious transfer then we can

176
00:07:06,540 --> 00:07:10,889
<font color="#CCCCCC">actually achieve this so if you</font><font color="#E5E5E5"> have n</font>

177
00:07:08,970 --> 00:07:13,950
of<font color="#CCCCCC"> these with total communication</font>

178
00:07:10,889 --> 00:07:17,340
scaling essentially<font color="#E5E5E5"> four times n with a</font>

179
00:07:13,950 --> 00:07:18,750
low order<font color="#E5E5E5"> term again previously if you</font>

180
00:07:17,340 --> 00:07:20,880
<font color="#CCCCCC">wanted to get</font><font color="#E5E5E5"> any sort</font><font color="#CCCCCC"> of constant</font>

181
00:07:18,750 --> 00:07:22,500
overhead times n this was<font color="#E5E5E5"> only known</font>

182
00:07:20,880 --> 00:07:24,210
based<font color="#E5E5E5"> on poly stretched local</font>

183
00:07:22,500 --> 00:07:27,150
pseudo-random generator assumptions or

184
00:07:24,210 --> 00:07:30,359
<font color="#E5E5E5">fly hiding and even in these cases the</font>

185
00:07:27,150 --> 00:07:32,159
constant was significantly<font color="#E5E5E5"> larger</font><font color="#CCCCCC"> okay</font>

186
00:07:30,360 --> 00:07:34,620
<font color="#E5E5E5">the third category is really kind of</font>

187
00:07:32,160 --> 00:07:37,889
trading forward into the the<font color="#CCCCCC"> direction</font>

188
00:07:34,620 --> 00:07:40,530
of practicality<font color="#CCCCCC"> and we we have a</font><font color="#E5E5E5"> lot of</font>

189
00:07:37,889 --> 00:07:42,180
different optimizations<font color="#E5E5E5"> and that when</font>

190
00:07:40,530 --> 00:07:43,979
you compare<font color="#CCCCCC"> at least to the crypto</font>

191
00:07:42,180 --> 00:07:48,330
result we're talking orders of magnitude

192
00:07:43,979 --> 00:07:49,830
improvement<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> good so I'm going</font><font color="#CCCCCC"> to</font>

193
00:07:48,330 --> 00:07:51,389
try to<font color="#CCCCCC"> give you a little</font><font color="#E5E5E5"> bit of a flavor</font>

194
00:07:49,830 --> 00:07:53,820
<font color="#CCCCCC">of each of these different directions</font>

195
00:07:51,389 --> 00:07:55,020
<font color="#E5E5E5">today but to</font><font color="#CCCCCC"> do it in</font><font color="#E5E5E5"> order to do that</font>

196
00:07:53,820 --> 00:07:57,960
I'm gonna<font color="#E5E5E5"> start with a little bit</font><font color="#CCCCCC"> of a</font>

197
00:07:55,020 --> 00:08:01,469
crash<font color="#CCCCCC"> course of the crypto paper</font><font color="#E5E5E5"> okay so</font>

198
00:07:57,960 --> 00:08:04,440
bear with<font color="#E5E5E5"> me here so in the crypto paper</font>

199
00:08:01,470 --> 00:08:06,570
<font color="#CCCCCC">we gave this</font><font color="#E5E5E5"> construction based on D D H</font>

200
00:08:04,440 --> 00:08:08,880
for Delta<font color="#E5E5E5"> H SS for the class of</font>

201
00:08:06,570 --> 00:08:10,950
branching programs and essentially<font color="#E5E5E5"> how</font>

202
00:08:08,880 --> 00:08:13,020
we do that is we show how<font color="#E5E5E5"> to support two</font>

203
00:08:10,950 --> 00:08:15,330
different<font color="#CCCCCC"> ho morphic evaluation</font>

204
00:08:13,020 --> 00:08:18,359
procedures<font color="#CCCCCC"> okay so the first</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> just</font>

205
00:08:15,330 --> 00:08:20,039
addition<font color="#E5E5E5"> of two</font><font color="#CCCCCC"> values and the second is</font>

206
00:08:18,360 --> 00:08:22,020
going<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> a restricted form of</font>

207
00:08:20,039 --> 00:08:24,810
multiplication<font color="#E5E5E5"> I'm sometimes going to</font>

208
00:08:22,020 --> 00:08:26,190
refer to this as<font color="#CCCCCC"> RMS</font><font color="#E5E5E5"> and multiplication</font>

209
00:08:24,810 --> 00:08:27,750
this is restricted multiplication

210
00:08:26,190 --> 00:08:30,599
<font color="#E5E5E5">straight-line and for the class of</font>

211
00:08:27,750 --> 00:08:33,270
<font color="#E5E5E5">programs and what is this and</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> this</font>

212
00:08:30,599 --> 00:08:36,179
<font color="#E5E5E5">allows</font><font color="#CCCCCC"> me to</font><font color="#E5E5E5"> multiply any of my any</font>

213
00:08:33,270 --> 00:08:38,789
intermediate computation value<font color="#E5E5E5"> V times</font>

214
00:08:36,179 --> 00:08:40,468
an input<font color="#E5E5E5"> okay so this is not general</font>

215
00:08:38,789 --> 00:08:42,330
circuits<font color="#E5E5E5"> because it doesn't allow me to</font>

216
00:08:40,469 --> 00:08:45,000
<font color="#CCCCCC">multiply</font><font color="#E5E5E5"> two intermediate computation</font>

217
00:08:42,330 --> 00:08:48,170
values but these together will give<font color="#E5E5E5"> me</font>

218
00:08:45,000 --> 00:08:52,860
enough<font color="#E5E5E5"> for for branching programs okay</font>

219
00:08:48,170 --> 00:08:53,520
<font color="#E5E5E5">ignore this arrow here</font><font color="#CCCCCC"> alright so at a</font>

220
00:08:52,860 --> 00:08:55,170
<font color="#E5E5E5">high level</font>

221
00:08:53,520 --> 00:08:59,040
<font color="#CCCCCC">I'm think about</font><font color="#E5E5E5"> three</font>

222
00:08:55,170 --> 00:09:01,019
<font color="#E5E5E5">ways to encode a zq element okay so what</font>

223
00:08:59,040 --> 00:09:03,389
is<font color="#CCCCCC"> EQ here we're talking about</font><font color="#E5E5E5"> D D H so</font>

224
00:09:01,019 --> 00:09:05,430
let G be some D D H hard group of order

225
00:09:03,389 --> 00:09:08,940
<font color="#E5E5E5">prime order Q and little G will</font><font color="#CCCCCC"> be a</font>

226
00:09:05,430 --> 00:09:11,430
generator<font color="#E5E5E5"> everywhere okay so the first</font>

227
00:09:08,940 --> 00:09:14,220
type of<font color="#E5E5E5"> encoding is just going</font><font color="#CCCCCC"> to be</font>

228
00:09:11,430 --> 00:09:19,349
taking this value<font color="#CCCCCC"> u and raising</font><font color="#E5E5E5"> it as</font>

229
00:09:14,220 --> 00:09:22,709
the exponent<font color="#E5E5E5"> second second is a standard</font>

230
00:09:19,350 --> 00:09:24,630
additive secret<font color="#E5E5E5"> sharing over</font><font color="#CCCCCC"> Z Q</font><font color="#E5E5E5"> and the</font>

231
00:09:22,709 --> 00:09:26,638
third is going<font color="#E5E5E5"> to be a</font><font color="#CCCCCC"> form where</font>

232
00:09:24,630 --> 00:09:27,300
essentially so it'll be a pair of group

233
00:09:26,639 --> 00:09:29,670
elements

234
00:09:27,300 --> 00:09:32,250
<font color="#CCCCCC">Sherri's such that the group elements</font>

235
00:09:29,670 --> 00:09:37,439
differ in discrete log by the value

236
00:09:32,250 --> 00:09:39,350
that's in here okay okay so first

237
00:09:37,440 --> 00:09:42,120
observations about these encodings

238
00:09:39,350 --> 00:09:44,279
<font color="#E5E5E5">within any one</font><font color="#CCCCCC"> of these</font><font color="#E5E5E5"> levels if</font><font color="#CCCCCC"> i stay</font>

239
00:09:42,120 --> 00:09:47,220
within the same well I have an additive

240
00:09:44,279 --> 00:09:49,889
homomorphism property you can<font color="#E5E5E5"> convince</font>

241
00:09:47,220 --> 00:09:51,389
yourself<font color="#CCCCCC"> of that but the second and the</font>

242
00:09:49,889 --> 00:09:53,459
special thing that's<font color="#CCCCCC"> gonna be helpful</font>

243
00:09:51,389 --> 00:09:55,529
<font color="#E5E5E5">for us is that there's a natural pairing</font>

244
00:09:53,459 --> 00:09:57,420
procedure<font color="#E5E5E5"> okay so suppose that</font><font color="#CCCCCC"> I have</font>

245
00:09:55,529 --> 00:10:00,300
<font color="#E5E5E5">some level</font><font color="#CCCCCC"> 1 encoding I have G to the</font>

246
00:09:57,420 --> 00:10:03,029
you both of us do and that we have

247
00:10:00,300 --> 00:10:06,479
across us<font color="#E5E5E5"> additive secret shares of some</font>

248
00:10:03,029 --> 00:10:09,630
value V<font color="#E5E5E5"> okay then if each of us takes do</font>

249
00:10:06,480 --> 00:10:12,149
to the<font color="#E5E5E5"> U and raises it by our share of V</font>

250
00:10:09,630 --> 00:10:14,790
this gives me exactly<font color="#E5E5E5"> this type of level</font>

251
00:10:12,149 --> 00:10:17,160
<font color="#CCCCCC">3 encoding of the product</font><font color="#E5E5E5"> okay so</font>

252
00:10:14,790 --> 00:10:21,480
essentially the discrete log differs by

253
00:10:17,160 --> 00:10:23,430
the product<font color="#CCCCCC"> u v ok so now</font><font color="#E5E5E5"> let's see how</font>

254
00:10:21,480 --> 00:10:26,670
we're gonna get secret sharing<font color="#CCCCCC"> it's</font>

255
00:10:23,430 --> 00:10:28,469
homomorphic so think about<font color="#E5E5E5"> kind of</font>

256
00:10:26,670 --> 00:10:30,750
roughly suppose it as part of the secret

257
00:10:28,470 --> 00:10:34,610
shares of a value<font color="#CCCCCC"> I give you level 1 and</font>

258
00:10:30,750 --> 00:10:37,350
level 2 encodings<font color="#E5E5E5"> of my inputs</font><font color="#CCCCCC"> ok and</font>

259
00:10:34,610 --> 00:10:39,420
now<font color="#E5E5E5"> for the homomorphic evaluation we're</font>

260
00:10:37,350 --> 00:10:42,390
going to maintain<font color="#E5E5E5"> the invariant that for</font>

261
00:10:39,420 --> 00:10:45,329
any partial computation<font color="#E5E5E5"> value will hold</font>

262
00:10:42,390 --> 00:10:48,060
additive shares of this value<font color="#E5E5E5"> across one</font>

263
00:10:45,329 --> 00:10:50,760
<font color="#CCCCCC">another</font><font color="#E5E5E5"> ok so first of all this holds</font>

264
00:10:48,060 --> 00:10:52,979
<font color="#CCCCCC">for the inputs now if we want to perform</font>

265
00:10:50,760 --> 00:10:55,380
an addition this follows<font color="#E5E5E5"> directly by the</font>

266
00:10:52,980 --> 00:10:58,260
additive homomorphism of these additive

267
00:10:55,380 --> 00:11:00,449
shares and now let's see how to<font color="#E5E5E5"> do an</font>

268
00:10:58,260 --> 00:11:01,800
RMS multiplication as you may suspect

269
00:11:00,449 --> 00:11:05,310
there's gonna be something<font color="#E5E5E5"> fishy</font><font color="#CCCCCC"> going</font>

270
00:11:01,800 --> 00:11:08,349
on here<font color="#CCCCCC"> and so so suppose now</font><font color="#E5E5E5"> what do I</font>

271
00:11:05,310 --> 00:11:09,969
have<font color="#E5E5E5"> by the invariant if I have this</font>

272
00:11:08,350 --> 00:11:12,100
Marshall<font color="#E5E5E5"> computation value we're holding</font>

273
00:11:09,970 --> 00:11:15,070
additive secret shares of this value<font color="#E5E5E5"> and</font>

274
00:11:12,100 --> 00:11:16,780
<font color="#E5E5E5">in addition each of the</font><font color="#CCCCCC"> inputs I gave</font>

275
00:11:15,070 --> 00:11:18,820
you this extra helper information this

276
00:11:16,780 --> 00:11:22,360
was part of the initial secret sharing

277
00:11:18,820 --> 00:11:24,100
itself<font color="#E5E5E5"> which was basically</font><font color="#CCCCCC"> g2z you okay</font>

278
00:11:22,360 --> 00:11:26,050
so<font color="#CCCCCC"> using</font><font color="#E5E5E5"> this pairing procedure we can</font>

279
00:11:24,100 --> 00:11:29,080
<font color="#E5E5E5">get to these multiplicative</font><font color="#CCCCCC"> is level</font>

280
00:11:26,050 --> 00:11:30,719
<font color="#E5E5E5">three shares of the product and the</font>

281
00:11:29,080 --> 00:11:32,860
question is how do I get<font color="#E5E5E5"> back to</font>

282
00:11:30,720 --> 00:11:34,690
<font color="#E5E5E5">additive shares which we need in</font><font color="#CCCCCC"> order</font>

283
00:11:32,860 --> 00:11:38,170
<font color="#CCCCCC">to maintain the invariant to</font><font color="#E5E5E5"> get to the</font>

284
00:11:34,690 --> 00:11:39,700
next<font color="#E5E5E5"> step okay and this</font><font color="#CCCCCC"> tadam is the</font>

285
00:11:38,170 --> 00:11:40,870
<font color="#E5E5E5">share conversion procedure which is</font>

286
00:11:39,700 --> 00:11:43,570
really<font color="#CCCCCC"> one of the kind of interesting</font>

287
00:11:40,870 --> 00:11:47,020
<font color="#CCCCCC">and technical and mysterious parts of</font>

288
00:11:43,570 --> 00:11:50,010
<font color="#E5E5E5">this work so essentially if I think</font>

289
00:11:47,020 --> 00:11:52,540
<font color="#CCCCCC">about taking</font><font color="#E5E5E5"> this cyclic group</font><font color="#CCCCCC"> gene and</font>

290
00:11:50,010 --> 00:11:55,569
flattening it<font color="#E5E5E5"> out in terms of different</font>

291
00:11:52,540 --> 00:11:58,360
steps of multiplying by<font color="#CCCCCC"> the generator so</font>

292
00:11:55,570 --> 00:12:00,880
the fact that we have these shares would

293
00:11:58,360 --> 00:12:04,380
differ in the discrete log by the<font color="#E5E5E5"> by</font>

294
00:12:00,880 --> 00:12:06,910
some payload in in this case the<font color="#E5E5E5"> Z is UV</font>

295
00:12:04,380 --> 00:12:08,650
means that you have some group element<font color="#E5E5E5"> I</font>

296
00:12:06,910 --> 00:12:12,670
<font color="#E5E5E5">have some group element the differ on</font>

297
00:12:08,650 --> 00:12:15,130
this<font color="#CCCCCC"> disposition here by this</font><font color="#E5E5E5"> payload so</font>

298
00:12:12,670 --> 00:12:18,579
how we do the conversion<font color="#CCCCCC"> we say ahead of</font>

299
00:12:15,130 --> 00:12:21,910
time let's share let's<font color="#E5E5E5"> say both have</font>

300
00:12:18,580 --> 00:12:23,740
agree upon<font color="#E5E5E5"> some random sprinkling of</font>

301
00:12:21,910 --> 00:12:27,670
special points these red points<font color="#E5E5E5"> here of</font>

302
00:12:23,740 --> 00:12:30,130
the desired density<font color="#E5E5E5"> Delta</font><font color="#CCCCCC"> okay so now</font>

303
00:12:27,670 --> 00:12:32,560
once we get these shares each of us will

304
00:12:30,130 --> 00:12:33,939
<font color="#CCCCCC">just output</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> distance from</font><font color="#E5E5E5"> whatever</font>

305
00:12:32,560 --> 00:12:36,130
<font color="#E5E5E5">this share is</font><font color="#CCCCCC"> in terms of</font>

306
00:12:33,940 --> 00:12:39,070
multiplications by the generator to<font color="#CCCCCC"> the</font>

307
00:12:36,130 --> 00:12:41,620
first special point that you hit<font color="#E5E5E5"> okay so</font>

308
00:12:39,070 --> 00:12:43,780
as long<font color="#E5E5E5"> as there's no special point</font>

309
00:12:41,620 --> 00:12:46,870
between<font color="#E5E5E5"> us this will give us exactly</font>

310
00:12:43,780 --> 00:12:49,000
what we want<font color="#CCCCCC"> okay so here this</font><font color="#E5E5E5"> distance</font>

311
00:12:46,870 --> 00:12:53,380
in this distance will differ exactly by

312
00:12:49,000 --> 00:12:55,180
this gap<font color="#CCCCCC"> xeam</font><font color="#E5E5E5"> okay so aside from</font><font color="#CCCCCC"> this</font>

313
00:12:53,380 --> 00:12:58,390
error probability of Delta<font color="#E5E5E5"> that we have</font>

314
00:12:55,180 --> 00:13:01,599
something<font color="#E5E5E5"> inside of here</font><font color="#CCCCCC"> and then we'll</font>

315
00:12:58,390 --> 00:13:03,100
get<font color="#E5E5E5"> a correct conversion okay so I'm</font>

316
00:13:01,600 --> 00:13:05,080
hiding<font color="#E5E5E5"> certainly a number</font><font color="#CCCCCC"> of things</font>

317
00:13:03,100 --> 00:13:06,640
under<font color="#E5E5E5"> the rug about this construction in</font>

318
00:13:05,080 --> 00:13:09,220
particular it's certainly<font color="#CCCCCC"> not okay</font><font color="#E5E5E5"> for</font>

319
00:13:06,640 --> 00:13:15,150
<font color="#E5E5E5">me to give you g to the</font><font color="#CCCCCC"> U</font><font color="#E5E5E5"> for some</font>

320
00:13:09,220 --> 00:13:19,630
<font color="#E5E5E5">secret value</font><font color="#CCCCCC"> u so what</font><font color="#E5E5E5"> we do in reality</font>

321
00:13:15,150 --> 00:13:21,660
<font color="#E5E5E5">good is um so this G to the</font><font color="#CCCCCC"> u is going</font>

322
00:13:19,630 --> 00:13:23,550
<font color="#E5E5E5">to be replaced by an LG</font><font color="#CCCCCC"> mAh</font>

323
00:13:21,660 --> 00:13:24,959
encryption<font color="#E5E5E5"> actually of you and there's a</font>

324
00:13:23,550 --> 00:13:27,660
little<font color="#E5E5E5"> bit of machinery that needs to be</font>

325
00:13:24,960 --> 00:13:29,610
<font color="#E5E5E5">done to modify this pairing</font><font color="#CCCCCC"> okay but a</font>

326
00:13:27,660 --> 00:13:32,400
lot<font color="#CCCCCC"> of the basic</font><font color="#E5E5E5"> structure</font><font color="#CCCCCC"> is exactly is</font>

327
00:13:29,610 --> 00:13:34,890
here<font color="#E5E5E5"> and kind of one of</font><font color="#CCCCCC"> the takeaways</font><font color="#E5E5E5"> is</font>

328
00:13:32,400 --> 00:13:37,170
that this sure conversion<font color="#E5E5E5"> we're gonna</font>

329
00:13:34,890 --> 00:13:39,540
have to run<font color="#E5E5E5"> it for every multiplication</font>

330
00:13:37,170 --> 00:13:43,349
or<font color="#CCCCCC"> ms multiplication</font><font color="#E5E5E5"> and you have to run</font>

331
00:13:39,540 --> 00:13:46,770
it for where this gap is the value<font color="#E5E5E5"> the</font>

332
00:13:43,350 --> 00:13:49,380
multiplied value<font color="#E5E5E5"> and also once for each</font>

333
00:13:46,770 --> 00:13:51,030
of the bits<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> el-gamal secret key</font>

334
00:13:49,380 --> 00:13:52,650
times that value

335
00:13:51,030 --> 00:13:54,600
okay so<font color="#E5E5E5"> I'll leave it as a mystery why</font>

336
00:13:52,650 --> 00:13:57,000
but please ask me afterward if you're

337
00:13:54,600 --> 00:14:02,180
interested<font color="#E5E5E5"> okay so this is a takeaway</font>

338
00:13:57,000 --> 00:14:05,160
<font color="#E5E5E5">for later good so so</font><font color="#CCCCCC"> moving</font><font color="#E5E5E5"> forward</font><font color="#CCCCCC"> our</font>

339
00:14:02,180 --> 00:14:08,370
<font color="#CCCCCC">first result is to get to round</font>

340
00:14:05,160 --> 00:14:11,339
multi-party computation from<font color="#CCCCCC"> DDH it's a</font>

341
00:14:08,370 --> 00:14:13,530
little bit of context and so certainly

342
00:14:11,340 --> 00:14:15,450
<font color="#E5E5E5">two rounds at least two</font><font color="#CCCCCC"> rounds is known</font>

343
00:14:13,530 --> 00:14:18,089
to be<font color="#E5E5E5"> necessary for secure computation</font>

344
00:14:15,450 --> 00:14:20,280
<font color="#E5E5E5">and if you're interested just in the</font>

345
00:14:18,090 --> 00:14:21,450
regime<font color="#CCCCCC"> of two parties</font><font color="#E5E5E5"> then actually</font>

346
00:14:20,280 --> 00:14:23,600
there's a lot of sort<font color="#CCCCCC"> of simple things</font>

347
00:14:21,450 --> 00:14:26,580
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can do to get</font><font color="#E5E5E5"> to two rounds of</font>

348
00:14:23,600 --> 00:14:27,960
interaction<font color="#E5E5E5"> the question becomes</font>

349
00:14:26,580 --> 00:14:30,060
interesting when<font color="#E5E5E5"> you're looking at the</font>

350
00:14:27,960 --> 00:14:32,670
<font color="#CCCCCC">multi-party setting</font><font color="#E5E5E5"> okay and so this is</font>

351
00:14:30,060 --> 00:14:34,859
<font color="#E5E5E5">something that</font><font color="#CCCCCC"> we didn't even really</font>

352
00:14:32,670 --> 00:14:37,310
<font color="#CCCCCC">know about</font><font color="#E5E5E5"> until much much</font><font color="#CCCCCC"> more recently</font>

353
00:14:34,860 --> 00:14:40,500
<font color="#E5E5E5">and there's been a sequence of works</font>

354
00:14:37,310 --> 00:14:44,219
achieving two round computation under

355
00:14:40,500 --> 00:14:46,950
various assumptions so<font color="#E5E5E5"> lwe and</font><font color="#CCCCCC"> i/o and</font>

356
00:14:44,220 --> 00:14:51,420
here this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> sort of a improvement of</font>

357
00:14:46,950 --> 00:14:52,590
<font color="#CCCCCC">setup so in this work</font><font color="#E5E5E5"> we we get</font>

358
00:14:51,420 --> 00:14:54,569
something<font color="#CCCCCC"> that's a little</font><font color="#E5E5E5"> bit weaker</font>

359
00:14:52,590 --> 00:14:56,370
<font color="#CCCCCC">than these the more recent</font><font color="#E5E5E5"> versions here</font>

360
00:14:54,570 --> 00:14:58,410
the difference is this is<font color="#CCCCCC"> a common</font>

361
00:14:56,370 --> 00:15:00,960
random string<font color="#E5E5E5"> versus we require</font><font color="#CCCCCC"> public</font>

362
00:14:58,410 --> 00:15:02,670
key infrastructure and<font color="#E5E5E5"> also we have a</font>

363
00:15:00,960 --> 00:15:04,710
<font color="#E5E5E5">limitation on the</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> constant</font>

364
00:15:02,670 --> 00:15:06,000
number<font color="#CCCCCC"> of parties but the punchline here</font>

365
00:15:04,710 --> 00:15:08,520
is that even<font color="#CCCCCC"> when</font><font color="#E5E5E5"> you look at these</font>

366
00:15:06,000 --> 00:15:12,690
<font color="#E5E5E5">restrictions anything here with two</font>

367
00:15:08,520 --> 00:15:17,069
rounds<font color="#CCCCCC"> was not known at all under DDH</font><font color="#E5E5E5"> so</font>

368
00:15:12,690 --> 00:15:19,140
this is what we do<font color="#CCCCCC"> okay so for the</font>

369
00:15:17,070 --> 00:15:20,760
starting point of this<font color="#E5E5E5"> construction</font><font color="#CCCCCC"> I</font>

370
00:15:19,140 --> 00:15:23,460
want to consider<font color="#E5E5E5"> a little</font><font color="#CCCCCC"> bit of a</font>

371
00:15:20,760 --> 00:15:25,170
generalized version<font color="#CCCCCC"> of the the two-party</font>

372
00:15:23,460 --> 00:15:28,050
secure computation slide that you saw

373
00:15:25,170 --> 00:15:30,209
from before<font color="#CCCCCC"> so remember</font><font color="#E5E5E5"> before there was</font>

374
00:15:28,050 --> 00:15:32,400
the<font color="#CCCCCC"> space where were two people we're</font>

375
00:15:30,210 --> 00:15:34,680
<font color="#CCCCCC">running some sort</font><font color="#E5E5E5"> of secure protocol to</font>

376
00:15:32,400 --> 00:15:35,520
get shares of the inputs now I want<font color="#E5E5E5"> to</font>

377
00:15:34,680 --> 00:15:37,709
think<font color="#CCCCCC"> about</font>

378
00:15:35,520 --> 00:15:39,360
since we need to get to the<font color="#CCCCCC"> multi-party</font>

379
00:15:37,710 --> 00:15:42,330
setting<font color="#CCCCCC"> I'm going to</font><font color="#E5E5E5"> consider this</font>

380
00:15:39,360 --> 00:15:44,190
client-server model<font color="#CCCCCC"> okay so in the same</font>

381
00:15:42,330 --> 00:15:45,960
<font color="#E5E5E5">way</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> if we</font><font color="#CCCCCC"> had all these clients</font>

382
00:15:44,190 --> 00:15:47,490
<font color="#E5E5E5">who actually have inputs</font><font color="#CCCCCC"> let's</font>

383
00:15:45,960 --> 00:15:51,360
temporarily<font color="#CCCCCC"> assume that we have two</font>

384
00:15:47,490 --> 00:15:53,370
servers to help us<font color="#E5E5E5"> okay so so first</font>

385
00:15:51,360 --> 00:15:56,610
we'll run<font color="#E5E5E5"> some</font><font color="#CCCCCC"> sort</font><font color="#E5E5E5"> of protocol to get</font>

386
00:15:53,370 --> 00:15:59,310
these shares the<font color="#CCCCCC"> servers will do a</font>

387
00:15:56,610 --> 00:16:01,290
homomorphic evaluation so<font color="#E5E5E5"> I want to put</font>

388
00:15:59,310 --> 00:16:04,439
<font color="#E5E5E5">a little little bit of a side note here</font>

389
00:16:01,290 --> 00:16:06,150
so if you can homomorphic<font color="#CCCCCC"> lis evaluate</font>

390
00:16:04,440 --> 00:16:09,510
the program that you're<font color="#E5E5E5"> interested in</font>

391
00:16:06,150 --> 00:16:11,760
directly<font color="#CCCCCC"> then that's fantastic at this</font>

392
00:16:09,510 --> 00:16:12,990
<font color="#CCCCCC">point that would mean if you can</font><font color="#E5E5E5"> if</font>

393
00:16:11,760 --> 00:16:16,740
you're interested in computing a

394
00:16:12,990 --> 00:16:19,140
branching program but even<font color="#CCCCCC"> for general</font>

395
00:16:16,740 --> 00:16:21,150
circuits<font color="#E5E5E5"> this is not a</font><font color="#CCCCCC"> problem because</font>

396
00:16:19,140 --> 00:16:23,280
<font color="#E5E5E5">we can essentially use standard tricks</font>

397
00:16:21,150 --> 00:16:25,470
of instead<font color="#E5E5E5"> homomorphic evaluating</font>

398
00:16:23,280 --> 00:16:28,319
<font color="#E5E5E5">randomized encoding so you could think</font>

399
00:16:25,470 --> 00:16:31,050
of<font color="#E5E5E5"> it basically if I have some very deep</font>

400
00:16:28,320 --> 00:16:33,150
circuit<font color="#CCCCCC"> I can squash this down</font><font color="#E5E5E5"> into a</font>

401
00:16:31,050 --> 00:16:36,120
<font color="#CCCCCC">Yahoo garbling for example of the</font>

402
00:16:33,150 --> 00:16:38,970
circuit okay<font color="#E5E5E5"> so say we have this</font>

403
00:16:36,120 --> 00:16:41,070
<font color="#E5E5E5">homomorphic evaluation and recall</font><font color="#CCCCCC"> that</font>

404
00:16:38,970 --> 00:16:45,570
this<font color="#E5E5E5"> gives us the property that aside</font>

405
00:16:41,070 --> 00:16:48,120
from<font color="#E5E5E5"> some error parameter</font><font color="#CCCCCC"> Delta that</font>

406
00:16:45,570 --> 00:16:51,090
<font color="#E5E5E5">these shares will add to the correct</font>

407
00:16:48,120 --> 00:16:55,050
<font color="#CCCCCC">output</font><font color="#E5E5E5"> okay so you can deal with</font>

408
00:16:51,090 --> 00:16:58,170
correctness in terms of<font color="#CCCCCC"> multiple like is</font>

409
00:16:55,050 --> 00:17:00,569
rating this many times okay but if you

410
00:16:58,170 --> 00:17:03,270
if you<font color="#E5E5E5"> stop right here then this would</font>

411
00:17:00,570 --> 00:17:05,700
<font color="#CCCCCC">actually give you a</font><font color="#E5E5E5"> security issue</font><font color="#CCCCCC"> and</font>

412
00:17:03,270 --> 00:17:08,550
the<font color="#E5E5E5"> reason is that</font><font color="#CCCCCC"> if I</font><font color="#E5E5E5"> exchange these</font>

413
00:17:05,700 --> 00:17:10,470
shares<font color="#E5E5E5"> so some of them have</font><font color="#CCCCCC"> errors and</font>

414
00:17:08,550 --> 00:17:14,129
the error<font color="#E5E5E5"> is going to be</font><font color="#CCCCCC"> dependent on</font>

415
00:17:10,470 --> 00:17:16,560
<font color="#CCCCCC">the inputs okay so because</font><font color="#E5E5E5"> of that you</font>

416
00:17:14,130 --> 00:17:18,240
<font color="#CCCCCC">have</font><font color="#E5E5E5"> to sort of clean up and hide where</font>

417
00:17:16,560 --> 00:17:20,940
the errors occurred<font color="#E5E5E5"> so there's an</font>

418
00:17:18,240 --> 00:17:23,760
<font color="#E5E5E5">additional protocol to output the</font>

419
00:17:20,940 --> 00:17:29,760
correct value<font color="#E5E5E5"> okay so what do we have</font><font color="#CCCCCC"> in</font>

420
00:17:23,760 --> 00:17:31,290
terms of rounds so so we have a constant

421
00:17:29,760 --> 00:17:33,990
<font color="#CCCCCC">number of rounds but it's</font><font color="#E5E5E5"> sort of a</font>

422
00:17:31,290 --> 00:17:36,720
large constant so to get<font color="#E5E5E5"> to two rounds</font>

423
00:17:33,990 --> 00:17:38,970
there's three primary steps<font color="#E5E5E5"> so first we</font>

424
00:17:36,720 --> 00:17:40,590
have to<font color="#CCCCCC"> clean up</font><font color="#E5E5E5"> this first step to make</font>

425
00:17:38,970 --> 00:17:42,150
it<font color="#E5E5E5"> so that you can run just in a single</font>

426
00:17:40,590 --> 00:17:44,899
round<font color="#E5E5E5"> and this is where the public key</font>

427
00:17:42,150 --> 00:17:48,030
infrastructure is going<font color="#CCCCCC"> to take place</font><font color="#E5E5E5"> in</font>

428
00:17:44,900 --> 00:17:49,190
step<font color="#E5E5E5"> two we're going</font><font color="#CCCCCC"> to remove the need</font>

429
00:17:48,030 --> 00:17:51,770
for<font color="#CCCCCC"> this majority</font>

430
00:17:49,190 --> 00:17:54,230
this extra<font color="#CCCCCC"> MPC</font><font color="#E5E5E5"> by making it so</font><font color="#CCCCCC"> it's safe</font>

431
00:17:51,770 --> 00:17:55,639
<font color="#CCCCCC">to just exchange the</font><font color="#E5E5E5"> shares even though</font>

432
00:17:54,230 --> 00:17:58,370
there's<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to reveal</font><font color="#E5E5E5"> where the errors</font>

433
00:17:55,640 --> 00:18:01,880
occurred okay<font color="#CCCCCC"> and step</font><font color="#E5E5E5"> three is going to</font>

434
00:17:58,370 --> 00:18:03,290
<font color="#E5E5E5">be just</font><font color="#CCCCCC"> to support not just</font><font color="#E5E5E5"> two servers</font>

435
00:18:01,880 --> 00:18:05,600
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can essentially think</font><font color="#E5E5E5"> about this</font>

436
00:18:03,290 --> 00:18:07,070
client-server model as is a setting

437
00:18:05,600 --> 00:18:09,709
multi-party computation but you're

438
00:18:07,070 --> 00:18:12,169
assuming<font color="#CCCCCC"> that two of the parties at</font>

439
00:18:09,710 --> 00:18:15,260
least one of those<font color="#E5E5E5"> two</font><font color="#CCCCCC"> is honest</font><font color="#E5E5E5"> so we</font>

440
00:18:12,170 --> 00:18:16,580
need to extend this<font color="#CCCCCC"> to more servers</font><font color="#E5E5E5"> okay</font>

441
00:18:15,260 --> 00:18:18,800
so I'm not<font color="#CCCCCC"> gonna talk</font><font color="#E5E5E5"> about step 1 or</font>

442
00:18:16,580 --> 00:18:20,780
step 2 at all<font color="#E5E5E5"> basically step</font><font color="#CCCCCC"> 1 really</font>

443
00:18:18,800 --> 00:18:23,480
<font color="#CCCCCC">uses homomorphisms of El</font><font color="#E5E5E5"> Kamal in a</font>

444
00:18:20,780 --> 00:18:25,580
careful<font color="#CCCCCC"> way and step 3 you can execute</font>

445
00:18:23,480 --> 00:18:28,850
<font color="#E5E5E5">with more servers by using sort of</font>

446
00:18:25,580 --> 00:18:30,649
standard server emulation<font color="#E5E5E5"> tricks okay</font><font color="#CCCCCC"> so</font>

447
00:18:28,850 --> 00:18:33,800
for step<font color="#CCCCCC"> two to give you a little</font><font color="#E5E5E5"> bit of</font>

448
00:18:30,650 --> 00:18:36,170
<font color="#E5E5E5">a flavor</font><font color="#CCCCCC"> and again the issue</font><font color="#E5E5E5"> is that I</font>

449
00:18:33,800 --> 00:18:38,480
can't<font color="#E5E5E5"> just exchange though the</font>

450
00:18:36,170 --> 00:18:40,010
homomorphic evaluated shares<font color="#E5E5E5"> because</font>

451
00:18:38,480 --> 00:18:43,370
there'll be errors and this leaks

452
00:18:40,010 --> 00:18:45,379
information<font color="#E5E5E5"> on the inputs and the input</font>

453
00:18:43,370 --> 00:18:47,419
<font color="#E5E5E5">so what is it</font><font color="#CCCCCC"> that it actually</font><font color="#E5E5E5"> leaks</font>

454
00:18:45,380 --> 00:18:50,500
<font color="#E5E5E5">well remember the probability of error</font>

455
00:18:47,420 --> 00:18:54,530
occurred<font color="#CCCCCC"> if there was a red point</font>

456
00:18:50,500 --> 00:18:57,290
<font color="#E5E5E5">between us okay</font><font color="#CCCCCC"> but for example</font><font color="#E5E5E5"> if we're</font>

457
00:18:54,530 --> 00:19:00,590
secret<font color="#E5E5E5"> sharing a value of</font><font color="#CCCCCC"> zero then</font>

458
00:18:57,290 --> 00:19:03,159
there<font color="#E5E5E5"> is no space</font><font color="#CCCCCC"> between us so</font><font color="#E5E5E5"> exactly</font>

459
00:19:00,590 --> 00:19:06,590
<font color="#E5E5E5">what this is</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to correspond to is</font>

460
00:19:03,160 --> 00:19:08,600
the the error is directly<font color="#CCCCCC"> a function</font><font color="#E5E5E5"> of</font>

461
00:19:06,590 --> 00:19:11,570
this<font color="#E5E5E5"> intermediate computation value and</font>

462
00:19:08,600 --> 00:19:13,449
we can<font color="#CCCCCC"> show that essentially so this</font>

463
00:19:11,570 --> 00:19:16,939
this<font color="#E5E5E5"> is exactly</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> sort of setting</font>

464
00:19:13,450 --> 00:19:20,300
where<font color="#CCCCCC"> we have solutions for</font><font color="#E5E5E5"> leakage</font>

465
00:19:16,940 --> 00:19:22,340
resilient circuit compilers<font color="#CCCCCC"> ok so</font>

466
00:19:20,300 --> 00:19:24,139
basically<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of evaluating</font><font color="#E5E5E5"> the</font>

467
00:19:22,340 --> 00:19:26,419
standard circuit<font color="#E5E5E5"> itself I'm going</font><font color="#CCCCCC"> to</font>

468
00:19:24,140 --> 00:19:28,460
<font color="#CCCCCC">evaluate one that's leakage resilient</font>

469
00:19:26,420 --> 00:19:33,140
<font color="#E5E5E5">with respect to partial</font><font color="#CCCCCC"> information</font>

470
00:19:28,460 --> 00:19:35,990
leakage okay so this is kind<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> the</font>

471
00:19:33,140 --> 00:19:38,000
first part and the real challenge or an

472
00:19:35,990 --> 00:19:40,700
additional challenge<font color="#E5E5E5"> so if you remember</font>

473
00:19:38,000 --> 00:19:42,500
<font color="#CCCCCC">from the take away slide I not</font><font color="#E5E5E5"> only run</font>

474
00:19:40,700 --> 00:19:45,110
<font color="#E5E5E5">this share conversion procedure on the</font>

475
00:19:42,500 --> 00:19:47,300
partial computation values but<font color="#E5E5E5"> also on</font>

476
00:19:45,110 --> 00:19:50,600
the bits of this<font color="#CCCCCC"> el-gamal</font><font color="#E5E5E5"> secret key</font>

477
00:19:47,300 --> 00:19:52,310
times the computation values<font color="#CCCCCC"> ok so we</font>

478
00:19:50,600 --> 00:19:53,990
have to address this leakage as well and

479
00:19:52,310 --> 00:19:56,240
we do so by kind<font color="#CCCCCC"> of adding these</font>

480
00:19:53,990 --> 00:20:01,850
<font color="#E5E5E5">additional randomization in secret</font>

481
00:19:56,240 --> 00:20:03,110
sharing tricks<font color="#CCCCCC"> ok and so again I'm just</font>

482
00:20:01,850 --> 00:20:05,299
<font color="#E5E5E5">trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of give</font><font color="#E5E5E5"> you a flavor</font>

483
00:20:03,110 --> 00:20:06,939
of each of<font color="#CCCCCC"> these directions</font><font color="#E5E5E5"> so in the</font>

484
00:20:05,299 --> 00:20:09,950
second direction for optimizing

485
00:20:06,940 --> 00:20:11,990
communication<font color="#E5E5E5"> and I want to give you a</font>

486
00:20:09,950 --> 00:20:14,570
<font color="#E5E5E5">kind of a little clean I think</font><font color="#CCCCCC"> it's a</font>

487
00:20:11,990 --> 00:20:17,059
bit<font color="#E5E5E5"> of a cute</font><font color="#CCCCCC"> takeaway here</font><font color="#E5E5E5"> the notion</font>

488
00:20:14,570 --> 00:20:18,678
of punctured<font color="#CCCCCC"> ot</font><font color="#E5E5E5"> okay so for standard</font>

489
00:20:17,059 --> 00:20:21,289
oblivious transfer you think about some

490
00:20:18,679 --> 00:20:22,880
<font color="#E5E5E5">sort of large database and the receivers</font>

491
00:20:21,289 --> 00:20:25,730
interested say in one position<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font>

492
00:20:22,880 --> 00:20:27,769
database but what if you have a receiver

493
00:20:25,730 --> 00:20:30,710
<font color="#E5E5E5">who is</font><font color="#CCCCCC"> interested in almost all of the</font>

494
00:20:27,769 --> 00:20:33,620
positions<font color="#CCCCCC"> of the database</font><font color="#E5E5E5"> okay so we</font>

495
00:20:30,710 --> 00:20:35,779
give is one of our techniques we give

496
00:20:33,620 --> 00:20:38,570
basically a cheap protocol for<font color="#E5E5E5"> achieving</font>

497
00:20:35,779 --> 00:20:39,889
this<font color="#E5E5E5"> almost all oblivious transfer via</font>

498
00:20:38,570 --> 00:20:41,799
punctured prfs

499
00:20:39,889 --> 00:20:43,879
punctured pseudo-random functions and

500
00:20:41,799 --> 00:20:45,799
the protocol is actually<font color="#E5E5E5"> quite simple</font>

501
00:20:43,880 --> 00:20:48,950
<font color="#CCCCCC">basically you can run a generic</font>

502
00:20:45,799 --> 00:20:50,990
procedure<font color="#E5E5E5"> generic</font><font color="#CCCCCC"> MPC where the output</font>

503
00:20:48,950 --> 00:20:53,450
<font color="#E5E5E5">is that the server receives some</font>

504
00:20:50,990 --> 00:20:55,639
pseudo-random function key<font color="#E5E5E5"> and the</font>

505
00:20:53,450 --> 00:20:57,440
receiver<font color="#E5E5E5"> will receive a key that's</font>

506
00:20:55,639 --> 00:21:00,590
punctured in the positions that<font color="#E5E5E5"> he's not</font>

507
00:20:57,440 --> 00:21:03,830
<font color="#E5E5E5">supposed to learn okay so now given</font><font color="#CCCCCC"> this</font>

508
00:21:00,590 --> 00:21:06,889
information<font color="#CCCCCC"> the sender can mask each of</font>

509
00:21:03,830 --> 00:21:09,949
these values<font color="#E5E5E5"> by the PRF evaluations send</font>

510
00:21:06,889 --> 00:21:11,570
them over and the<font color="#E5E5E5"> the receiver will be</font>

511
00:21:09,950 --> 00:21:14,049
able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> reconstruct exactly</font><font color="#E5E5E5"> those</font>

512
00:21:11,570 --> 00:21:17,689
<font color="#CCCCCC">positions</font><font color="#E5E5E5"> that were not punctured out</font>

513
00:21:14,049 --> 00:21:20,600
okay so we use<font color="#E5E5E5"> this and this this piece</font>

514
00:21:17,690 --> 00:21:22,760
as a way of<font color="#CCCCCC"> dealing</font><font color="#E5E5E5"> with with leakage in</font>

515
00:21:20,600 --> 00:21:24,350
a cheaper way okay so in the<font color="#CCCCCC"> previous I</font>

516
00:21:22,760 --> 00:21:27,019
told you kind<font color="#E5E5E5"> of this</font><font color="#CCCCCC"> blow-up of leakage</font>

517
00:21:24,350 --> 00:21:28,340
resilient<font color="#E5E5E5"> compilers and everything but</font>

518
00:21:27,019 --> 00:21:30,409
<font color="#E5E5E5">if I allow you to</font><font color="#CCCCCC"> communicate a little</font>

519
00:21:28,340 --> 00:21:32,870
<font color="#E5E5E5">bit more via this process you can get</font>

520
00:21:30,409 --> 00:21:34,450
this much more efficient okay so this is

521
00:21:32,870 --> 00:21:39,168
together<font color="#E5E5E5"> with a couple</font><font color="#CCCCCC"> additional</font>

522
00:21:34,450 --> 00:21:41,179
<font color="#E5E5E5">metrics that we have to introduce</font><font color="#CCCCCC"> okay</font>

523
00:21:39,169 --> 00:21:42,950
so<font color="#E5E5E5"> finally I want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> give you a flavor</font>

524
00:21:41,179 --> 00:21:45,440
of some<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> the concrete</font>

525
00:21:42,950 --> 00:21:47,690
optimizations<font color="#E5E5E5"> that we have so is the</font>

526
00:21:45,440 --> 00:21:50,029
baseline what is the cost of this<font color="#E5E5E5"> actual</font>

527
00:21:47,690 --> 00:21:51,620
homomorphic evaluation<font color="#E5E5E5"> so the cost</font>

528
00:21:50,029 --> 00:21:53,990
<font color="#E5E5E5">really comes from multiplication and</font>

529
00:21:51,620 --> 00:21:55,908
there's two<font color="#E5E5E5"> different parts</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> this the</font>

530
00:21:53,990 --> 00:21:57,950
first<font color="#E5E5E5"> was this pairing procedure</font><font color="#CCCCCC"> I</font>

531
00:21:55,909 --> 00:22:00,889
mentioned which will correspond to

532
00:21:57,950 --> 00:22:04,429
essentially<font color="#E5E5E5"> exponentiation and a product</font>

533
00:22:00,889 --> 00:22:06,949
over the<font color="#E5E5E5"> group</font><font color="#CCCCCC"> ok the second part is the</font>

534
00:22:04,429 --> 00:22:10,190
<font color="#E5E5E5">share conversion procedure so as I've</font>

535
00:22:06,950 --> 00:22:12,590
described basically<font color="#E5E5E5"> order of 1</font><font color="#CCCCCC"> over</font>

536
00:22:10,190 --> 00:22:13,789
Delta kind of an expectation<font color="#E5E5E5"> times you</font>

537
00:22:12,590 --> 00:22:15,590
have to do this<font color="#CCCCCC"> multiplication by a</font>

538
00:22:13,789 --> 00:22:17,110
generator<font color="#E5E5E5"> and testing if this is a</font>

539
00:22:15,590 --> 00:22:19,780
special<font color="#E5E5E5"> point</font>

540
00:22:17,110 --> 00:22:22,669
so let me<font color="#E5E5E5"> describe some</font><font color="#CCCCCC"> of the</font>

541
00:22:19,780 --> 00:22:25,010
<font color="#E5E5E5">optimizations that we have the first is</font>

542
00:22:22,670 --> 00:22:28,210
to consider<font color="#CCCCCC"> specific what we refer to</font><font color="#E5E5E5"> as</font>

543
00:22:25,010 --> 00:22:33,379
conversion friendly groups<font color="#E5E5E5"> as a ZP star</font>

544
00:22:28,210 --> 00:22:35,720
<font color="#E5E5E5">where</font><font color="#CCCCCC"> 2 is a generator</font><font color="#E5E5E5"> of the group and</font>

545
00:22:33,380 --> 00:22:38,960
the prime<font color="#E5E5E5"> here that you're modding by is</font>

546
00:22:35,720 --> 00:22:40,940
very close<font color="#CCCCCC"> to a power</font><font color="#E5E5E5"> of 2</font><font color="#CCCCCC"> okay so what</font>

547
00:22:38,960 --> 00:22:42,680
does<font color="#E5E5E5"> this give me this gives me that</font>

548
00:22:40,940 --> 00:22:45,440
each time that I need to do<font color="#E5E5E5"> this</font>

549
00:22:42,680 --> 00:22:48,950
multiplication<font color="#E5E5E5"> I can essentially shift</font>

550
00:22:45,440 --> 00:22:51,380
and then do a small addition<font color="#CCCCCC"> okay the</font>

551
00:22:48,950 --> 00:22:53,510
second big optimization that<font color="#E5E5E5"> we have is</font>

552
00:22:51,380 --> 00:22:55,340
redefining what are the distinguished

553
00:22:53,510 --> 00:22:57,860
points what are<font color="#CCCCCC"> these red points</font><font color="#E5E5E5"> and how</font>

554
00:22:55,340 --> 00:23:00,169
are they defined<font color="#CCCCCC"> ok so I'm</font><font color="#E5E5E5"> not going to</font>

555
00:22:57,860 --> 00:23:03,500
<font color="#E5E5E5">mention we have</font><font color="#CCCCCC"> approvable optimization</font>

556
00:23:00,170 --> 00:23:05,420
that<font color="#E5E5E5"> D randomized is but a heuristic way</font>

557
00:23:03,500 --> 00:23:07,550
of looking at this is one instead<font color="#E5E5E5"> of</font>

558
00:23:05,420 --> 00:23:09,980
<font color="#E5E5E5">saying it say some sort</font><font color="#CCCCCC"> of pseudo-random</font>

559
00:23:07,550 --> 00:23:13,040
<font color="#CCCCCC">function evaluates to a special value</font>

560
00:23:09,980 --> 00:23:15,530
<font color="#E5E5E5">what if I just say</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> point this group</font>

561
00:23:13,040 --> 00:23:18,290
element is special if in a certain

562
00:23:15,530 --> 00:23:21,260
window of its bit representation<font color="#CCCCCC"> I have</font>

563
00:23:18,290 --> 00:23:24,379
all zeros<font color="#CCCCCC"> ok and this if you</font><font color="#E5E5E5"> do this</font>

564
00:23:21,260 --> 00:23:26,780
this allows<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of amortization and</font>

565
00:23:24,380 --> 00:23:30,980
huge improvements<font color="#CCCCCC"> in to in terms of</font>

566
00:23:26,780 --> 00:23:32,930
<font color="#E5E5E5">testing the</font><font color="#CCCCCC"> speed of testing ok</font><font color="#E5E5E5"> and so</font>

567
00:23:30,980 --> 00:23:34,520
ultimately<font color="#E5E5E5"> you can get this</font><font color="#CCCCCC"> to to an</font>

568
00:23:32,930 --> 00:23:38,180
average of even less than one<font color="#E5E5E5"> machine</font>

569
00:23:34,520 --> 00:23:42,590
word<font color="#CCCCCC"> four of these</font><font color="#E5E5E5"> stepping along</font>

570
00:23:38,180 --> 00:23:44,300
multiplication<font color="#E5E5E5"> okay so kind of</font>

571
00:23:42,590 --> 00:23:46,939
<font color="#CCCCCC">high-level</font><font color="#E5E5E5"> there's tons of other</font>

572
00:23:44,300 --> 00:23:49,700
<font color="#E5E5E5">optimizations we've considered and the</font>

573
00:23:46,940 --> 00:23:51,830
bottom line<font color="#E5E5E5"> here is that ultimately it</font>

574
00:23:49,700 --> 00:23:53,930
<font color="#E5E5E5">seems like compared to fhe one of the</font>

575
00:23:51,830 --> 00:23:56,960
things that we have is<font color="#CCCCCC"> that the size is</font>

576
00:23:53,930 --> 00:23:59,180
<font color="#E5E5E5">quite promising and the bottom line in</font>

577
00:23:56,960 --> 00:24:02,090
terms<font color="#CCCCCC"> of so this</font><font color="#E5E5E5"> was first kind of done</font>

578
00:23:59,180 --> 00:24:03,440
by<font color="#CCCCCC"> estimates in and now in we have a</font>

579
00:24:02,090 --> 00:24:06,590
follow-up work<font color="#CCCCCC"> actually that's starting</font>

580
00:24:03,440 --> 00:24:08,480
<font color="#CCCCCC">to</font><font color="#E5E5E5"> look at implementations so ultimately</font>

581
00:24:06,590 --> 00:24:10,699
for this<font color="#CCCCCC"> RMS</font><font color="#E5E5E5"> home morphic</font>

582
00:24:08,480 --> 00:24:13,220
multiplications<font color="#CCCCCC"> if you want</font><font color="#E5E5E5"> error</font>

583
00:24:10,700 --> 00:24:15,890
probability<font color="#E5E5E5"> Delta it seems that you can</font>

584
00:24:13,220 --> 00:24:18,520
get<font color="#E5E5E5"> about 200,000 times Delta</font>

585
00:24:15,890 --> 00:24:21,950
multiplications per second

586
00:24:18,520 --> 00:24:24,230
<font color="#CCCCCC">ok so summing up we have these</font><font color="#E5E5E5"> three</font>

587
00:24:21,950 --> 00:24:26,300
<font color="#CCCCCC">different</font><font color="#E5E5E5"> types of results and kind of</font>

588
00:24:24,230 --> 00:24:29,840
going<font color="#CCCCCC"> from from theoretical down to</font>

589
00:24:26,300 --> 00:24:31,820
practical<font color="#CCCCCC"> as you go along</font><font color="#E5E5E5"> and</font>

590
00:24:29,840 --> 00:24:33,169
and with a<font color="#E5E5E5"> couple open questions I think</font>

591
00:24:31,820 --> 00:24:37,909
really this is<font color="#E5E5E5"> kind of a fascinating</font>

592
00:24:33,170 --> 00:24:40,190
<font color="#E5E5E5">area for me and in general so first of</font>

593
00:24:37,910 --> 00:24:41,840
all there's a<font color="#CCCCCC"> lot of questions even just</font>

594
00:24:40,190 --> 00:24:43,640
about<font color="#E5E5E5"> this component</font><font color="#CCCCCC"> this homomorphic</font>

595
00:24:41,840 --> 00:24:45,530
secret sharing<font color="#E5E5E5"> is there any way that you</font>

596
00:24:43,640 --> 00:24:48,350
<font color="#E5E5E5">can go beyond branching programs</font><font color="#CCCCCC"> say</font>

597
00:24:45,530 --> 00:24:50,960
from<font color="#CCCCCC"> DDH</font><font color="#E5E5E5"> so we know from learning with</font>

598
00:24:48,350 --> 00:24:52,159
errors<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you can get HSS</font><font color="#E5E5E5"> but it ends</font>

599
00:24:50,960 --> 00:24:56,240
up<font color="#CCCCCC"> basically going through fully</font>

600
00:24:52,160 --> 00:24:57,950
homomorphic encryption are there so all

601
00:24:56,240 --> 00:24:59,660
of the kind<font color="#E5E5E5"> of all the solutions that</font>

602
00:24:57,950 --> 00:25:01,820
<font color="#E5E5E5">I've really talked about are for the</font>

603
00:24:59,660 --> 00:25:03,680
<font color="#E5E5E5">two-party setting so not for the for the</font>

604
00:25:01,820 --> 00:25:05,629
<font color="#E5E5E5">MPC you can extend this to multiple</font>

605
00:25:03,680 --> 00:25:07,700
parties<font color="#E5E5E5"> but</font><font color="#CCCCCC"> when you're just looking at</font>

606
00:25:05,630 --> 00:25:10,400
say the home<font color="#CCCCCC"> morphic secret sharing</font><font color="#E5E5E5"> tool</font>

607
00:25:07,700 --> 00:25:13,070
itself<font color="#E5E5E5"> as soon as you go from two</font><font color="#CCCCCC"> to</font>

608
00:25:10,400 --> 00:25:16,000
three parties we know very<font color="#E5E5E5"> little</font><font color="#CCCCCC"> it's</font>

609
00:25:13,070 --> 00:25:18,439
kind of embarrassing how big the gap is

610
00:25:16,000 --> 00:25:20,030
in<font color="#E5E5E5"> particular this</font><font color="#CCCCCC"> is because this</font>

611
00:25:18,440 --> 00:25:21,680
conversion share conversion procedure

612
00:25:20,030 --> 00:25:23,990
<font color="#E5E5E5">really relies on the fact that there's</font>

613
00:25:21,680 --> 00:25:26,420
<font color="#CCCCCC">two parties can you get this from this</font>

614
00:25:23,990 --> 00:25:28,250
sort of<font color="#E5E5E5"> thing from other assumptions for</font>

615
00:25:26,420 --> 00:25:30,380
<font color="#E5E5E5">the</font><font color="#CCCCCC"> share conversion</font><font color="#E5E5E5"> can you get a</font>

616
00:25:28,250 --> 00:25:32,150
<font color="#E5E5E5">better error versus run</font><font color="#CCCCCC"> a runtime</font>

617
00:25:30,380 --> 00:25:33,950
trade-off<font color="#E5E5E5"> right now it's it's directly</font>

618
00:25:32,150 --> 00:25:35,630
inverse proportional it's not clear if

619
00:25:33,950 --> 00:25:37,220
you<font color="#E5E5E5"> can do better</font>

620
00:25:35,630 --> 00:25:38,860
<font color="#E5E5E5">can you try to do some sort of better</font>

621
00:25:37,220 --> 00:25:41,360
fault tolerance at the program<font color="#CCCCCC"> level</font>

622
00:25:38,860 --> 00:25:43,040
looking at<font color="#E5E5E5"> this</font><font color="#CCCCCC"> two round</font><font color="#E5E5E5"> MPC</font><font color="#CCCCCC"> from-from</font>

623
00:25:41,360 --> 00:25:44,719
<font color="#CCCCCC">DDH can you remove</font><font color="#E5E5E5"> some of the</font>

624
00:25:43,040 --> 00:25:46,070
<font color="#CCCCCC">restrictions that we have so for</font><font color="#E5E5E5"> example</font>

625
00:25:44,720 --> 00:25:47,690
polynomial<font color="#CCCCCC"> number of parties and</font>

626
00:25:46,070 --> 00:25:50,270
removing the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> public key</font>

627
00:25:47,690 --> 00:25:52,130
infrastructure<font color="#E5E5E5"> and I didn't really talk</font>

628
00:25:50,270 --> 00:25:54,770
<font color="#CCCCCC">about</font><font color="#E5E5E5"> it but I kind of want to push the</font>

629
00:25:52,130 --> 00:25:58,190
agenda since<font color="#E5E5E5"> I'm here so I talked mostly</font>

630
00:25:54,770 --> 00:26:00,200
about this kind<font color="#E5E5E5"> of high end</font><font color="#CCCCCC"> HSS they can</font>

631
00:25:58,190 --> 00:26:03,350
support say branching programs and uses

632
00:26:00,200 --> 00:26:05,030
<font color="#E5E5E5">public key sorts of tools but</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

633
00:26:03,350 --> 00:26:07,850
actually<font color="#CCCCCC"> we've looked a little bit</font><font color="#E5E5E5"> at</font>

634
00:26:05,030 --> 00:26:08,930
<font color="#CCCCCC">some more low end</font><font color="#E5E5E5"> HSS versions and</font><font color="#CCCCCC"> it</font>

635
00:26:07,850 --> 00:26:10,850
turns out you<font color="#E5E5E5"> can get some really</font>

636
00:26:08,930 --> 00:26:13,640
<font color="#CCCCCC">interesting</font><font color="#E5E5E5"> function classes based just</font>

637
00:26:10,850 --> 00:26:14,870
on<font color="#E5E5E5"> one-way functions and so you can get</font>

638
00:26:13,640 --> 00:26:17,210
a lot<font color="#E5E5E5"> of there's</font><font color="#CCCCCC"> been some interesting</font>

639
00:26:14,870 --> 00:26:19,040
works with with applications<font color="#E5E5E5"> building on</font>

640
00:26:17,210 --> 00:26:20,510
<font color="#E5E5E5">top</font><font color="#CCCCCC"> of these</font><font color="#E5E5E5"> okay so there's a lot</font><font color="#CCCCCC"> of</font>

641
00:26:19,040 --> 00:26:23,750
<font color="#E5E5E5">questions here can you what can you do</font>

642
00:26:20,510 --> 00:26:26,960
how far<font color="#E5E5E5"> can you go and and so</font><font color="#CCCCCC"> on all</font>

643
00:26:23,750 --> 00:26:30,420
<font color="#E5E5E5">right so with this I will conclude</font>

644
00:26:26,960 --> 00:26:30,420
[Applause]

