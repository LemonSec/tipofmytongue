1
00:00:01,639 --> 00:00:08,340
thank you thank<font color="#CCCCCC"> you</font><font color="#E5E5E5"> for that</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is</font>

2
00:00:05,279 --> 00:00:10,320
a talk on depth or bus graphs<font color="#E5E5E5"> and</font>

3
00:00:08,340 --> 00:00:12,540
<font color="#CCCCCC">they're accumulative memory complexity</font>

4
00:00:10,320 --> 00:00:17,430
<font color="#E5E5E5">and this is joint work with Jeremiah</font>

5
00:00:12,540 --> 00:00:19,198
<font color="#E5E5E5">blocky and Trish</font><font color="#CCCCCC"> go fetch Oh Jack so I'm</font>

6
00:00:17,430 --> 00:00:21,150
going to<font color="#CCCCCC"> sort of</font><font color="#E5E5E5"> set the scene a</font><font color="#CCCCCC"> little</font>

7
00:00:19,199 --> 00:00:23,430
<font color="#CCCCCC">bit and that goes as well for this talk</font>

8
00:00:21,150 --> 00:00:26,340
and for<font color="#E5E5E5"> the next talk</font><font color="#CCCCCC"> so I'm going to</font>

9
00:00:23,430 --> 00:00:28,769
<font color="#E5E5E5">tell you a little bit about a complexity</font>

10
00:00:26,340 --> 00:00:30,570
notion and and and how<font color="#CCCCCC"> its motivated</font><font color="#E5E5E5"> and</font>

11
00:00:28,769 --> 00:00:33,390
this starts with<font color="#CCCCCC"> the story of moderately</font>

12
00:00:30,570 --> 00:00:34,530
<font color="#E5E5E5">hard functions so moderately hard</font>

13
00:00:33,390 --> 00:00:35,910
functions you can think<font color="#E5E5E5"> of these</font>

14
00:00:34,530 --> 00:00:38,700
functions<font color="#E5E5E5"> from bit strings to bit</font>

15
00:00:35,910 --> 00:00:41,089
strings are computable by an honest

16
00:00:38,700 --> 00:00:46,160
party in reasonable<font color="#CCCCCC"> time</font><font color="#E5E5E5"> and space</font>

17
00:00:41,090 --> 00:00:48,930
<font color="#CCCCCC">sequentially</font><font color="#E5E5E5"> and when and brute force</font>

18
00:00:46,160 --> 00:00:54,360
evaluation should<font color="#CCCCCC"> be very expensive</font><font color="#E5E5E5"> for</font>

19
00:00:48,930 --> 00:00:56,489
<font color="#CCCCCC">an adversary so why would you</font><font color="#E5E5E5"> want such</font>

20
00:00:54,360 --> 00:00:59,070
a thing well sort of<font color="#E5E5E5"> the meta</font>

21
00:00:56,489 --> 00:01:01,459
application is to<font color="#E5E5E5"> limit the rate of</font>

22
00:00:59,070 --> 00:01:04,110
invitations for some critical<font color="#E5E5E5"> function</font>

23
00:01:01,460 --> 00:01:06,390
<font color="#CCCCCC">in particular you think about password</font>

24
00:01:04,110 --> 00:01:09,420
based cryptography<font color="#CCCCCC"> the critical function</font>

25
00:01:06,390 --> 00:01:11,580
that we<font color="#E5E5E5"> want to that we</font><font color="#CCCCCC"> want to limit</font>

26
00:01:09,420 --> 00:01:13,740
<font color="#E5E5E5">the rate of evaluation is guessing a</font>

27
00:01:11,580 --> 00:01:16,530
password<font color="#E5E5E5"> so for example on a password</font>

28
00:01:13,740 --> 00:01:19,020
server you<font color="#E5E5E5"> don't store the password</font><font color="#CCCCCC"> you</font>

29
00:01:16,530 --> 00:01:20,850
store the output<font color="#E5E5E5"> of a moderately hard</font>

30
00:01:19,020 --> 00:01:22,470
function evaluated<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> password that</font>

31
00:01:20,850 --> 00:01:24,240
<font color="#E5E5E5">way when someone breaks in they steal</font>

32
00:01:22,470 --> 00:01:25,470
these<font color="#CCCCCC"> hashes every time they want</font><font color="#E5E5E5"> to</font>

33
00:01:24,240 --> 00:01:26,850
guess they want to<font color="#E5E5E5"> do an offline</font>

34
00:01:25,470 --> 00:01:28,950
dictionary attack they want to guess a

35
00:01:26,850 --> 00:01:30,809
new password<font color="#E5E5E5"> they first have</font><font color="#CCCCCC"> to evaluate</font>

36
00:01:28,950 --> 00:01:34,140
<font color="#E5E5E5">another instance of the moderately hard</font>

37
00:01:30,810 --> 00:01:36,180
function another<font color="#E5E5E5"> example where you want</font>

38
00:01:34,140 --> 00:01:39,600
the sort of rate limit on<font color="#E5E5E5"> evaluating</font>

39
00:01:36,180 --> 00:01:42,020
functions<font color="#E5E5E5"> is proofs of work</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> example</font>

40
00:01:39,600 --> 00:01:47,729
<font color="#E5E5E5">the distributed proof of work underlying</font>

41
00:01:42,020 --> 00:01:49,320
<font color="#E5E5E5">most crypto currencies also when in fact</font>

42
00:01:47,729 --> 00:01:51,060
this<font color="#E5E5E5"> was probably one of the</font><font color="#CCCCCC"> earliest</font>

43
00:01:49,320 --> 00:01:55,829
examples<font color="#CCCCCC"> of moderately</font><font color="#E5E5E5"> hard functions</font>

44
00:01:51,060 --> 00:01:57,990
when combating spam and also civil

45
00:01:55,829 --> 00:01:59,969
attacks<font color="#E5E5E5"> so these are all examples where</font>

46
00:01:57,990 --> 00:02:02,280
there's some<font color="#E5E5E5"> critical function and you</font>

47
00:01:59,969 --> 00:02:04,169
try and<font color="#E5E5E5"> rate limit the rate that an</font>

48
00:02:02,280 --> 00:02:06,360
adversary<font color="#CCCCCC"> can evaluate these functions</font>

49
00:02:04,170 --> 00:02:10,530
or<font color="#E5E5E5"> cause these functions to</font><font color="#CCCCCC"> be evaluated</font>

50
00:02:06,360 --> 00:02:13,319
in the case of combating spam so why

51
00:02:10,530 --> 00:02:13,770
<font color="#E5E5E5">would you</font><font color="#CCCCCC"> want memory hardness</font><font color="#E5E5E5"> well in</font>

52
00:02:13,319 --> 00:02:15,450
order

53
00:02:13,770 --> 00:02:17,640
for this notion of moderate hardness

54
00:02:15,450 --> 00:02:19,470
<font color="#CCCCCC">while in</font><font color="#E5E5E5"> order to see that</font><font color="#CCCCCC"> it's</font>

55
00:02:17,640 --> 00:02:21,500
instructive to look<font color="#E5E5E5"> at what happens in</font>

56
00:02:19,470 --> 00:02:23,820
<font color="#CCCCCC">practice</font><font color="#E5E5E5"> when people try and brute force</font>

57
00:02:21,500 --> 00:02:26,970
<font color="#CCCCCC">evaluate these</font><font color="#E5E5E5"> sort of critical</font>

58
00:02:23,820 --> 00:02:28,799
functions so really what ends up

59
00:02:26,970 --> 00:02:31,859
happening<font color="#E5E5E5"> in a lot of cases that</font><font color="#CCCCCC"> people</font>

60
00:02:28,800 --> 00:02:34,650
build custom hardware to evaluate these

61
00:02:31,860 --> 00:02:36,870
functions<font color="#E5E5E5"> and in particular</font><font color="#CCCCCC"> a six</font><font color="#E5E5E5"> so</font>

62
00:02:34,650 --> 00:02:38,220
<font color="#CCCCCC">application specific integrated circuits</font>

63
00:02:36,870 --> 00:02:40,950
and this<font color="#E5E5E5"> is what's happening</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

64
00:02:38,220 --> 00:02:44,070
<font color="#CCCCCC">Bitcoin mining community community</font><font color="#E5E5E5"> it</font>

65
00:02:40,950 --> 00:02:46,530
happened with<font color="#E5E5E5"> the desk cracker</font><font color="#CCCCCC"> also some</font>

66
00:02:44,070 --> 00:02:49,380
really<font color="#E5E5E5"> high-end password cracking</font>

67
00:02:46,530 --> 00:02:51,510
machines<font color="#E5E5E5"> and really it always ends up</font>

68
00:02:49,380 --> 00:02:53,820
converging on a<font color="#E5E5E5"> six and the reason is</font>

69
00:02:51,510 --> 00:02:56,220
that<font color="#E5E5E5"> for the for a lot of types of</font>

70
00:02:53,820 --> 00:02:59,160
computation<font color="#CCCCCC"> Asics provide a</font><font color="#E5E5E5"> financial</font>

71
00:02:56,220 --> 00:03:04,020
incentive<font color="#E5E5E5"> and what what that boils down</font>

72
00:02:59,160 --> 00:03:06,329
to<font color="#CCCCCC"> is that um</font><font color="#E5E5E5"> Asics</font><font color="#CCCCCC"> like they give you</font>

73
00:03:04,020 --> 00:03:08,930
much more computation in terms of rate

74
00:03:06,330 --> 00:03:12,240
of<font color="#E5E5E5"> computation per unit per dollar spent</font>

75
00:03:08,930 --> 00:03:13,680
so compared to a general<font color="#E5E5E5"> purpose CPU and</font>

76
00:03:12,240 --> 00:03:16,110
sometimes on<font color="#E5E5E5"> the order of like</font><font color="#CCCCCC"> ten</font>

77
00:03:13,680 --> 00:03:18,000
<font color="#CCCCCC">thousand</font><font color="#E5E5E5"> times more and this is</font>

78
00:03:16,110 --> 00:03:18,990
<font color="#CCCCCC">something that that's not good for</font><font color="#E5E5E5"> us we</font>

79
00:03:18,000 --> 00:03:21,209
we want something<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> more</font>

80
00:03:18,990 --> 00:03:23,730
egalitarian<font color="#CCCCCC"> so that that has less of a</font>

81
00:03:21,209 --> 00:03:25,470
gap<font color="#E5E5E5"> between the rate of computation for</font>

82
00:03:23,730 --> 00:03:27,810
an adversary versus the rate of

83
00:03:25,470 --> 00:03:30,570
computation for an honest user on a

84
00:03:27,810 --> 00:03:35,490
general<font color="#CCCCCC"> purpose CPU so we want something</font>

85
00:03:30,570 --> 00:03:37,859
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> egalitarian</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we want a</font>

86
00:03:35,490 --> 00:03:41,130
notion of complexity<font color="#E5E5E5"> that approximates</font>

87
00:03:37,860 --> 00:03:43,890
the rate of computation on an ASIC<font color="#CCCCCC"> in a</font>

88
00:03:41,130 --> 00:03:46,890
way that's closer<font color="#E5E5E5"> to actual financial</font>

89
00:03:43,890 --> 00:03:48,179
costs and in the VLSI community people

90
00:03:46,890 --> 00:03:50,369
<font color="#E5E5E5">have been looking</font><font color="#CCCCCC"> at notions of</font>

91
00:03:48,180 --> 00:03:54,090
efficiency<font color="#CCCCCC"> for a while for</font><font color="#E5E5E5"> for circuits</font>

92
00:03:50,370 --> 00:03:56,220
<font color="#E5E5E5">and a very common</font><font color="#CCCCCC"> one is a</font><font color="#E5E5E5"> area time so</font>

93
00:03:54,090 --> 00:03:57,540
<font color="#CCCCCC">eighty complexity so you look at a</font>

94
00:03:56,220 --> 00:03:59,220
circuit you look at the area of<font color="#E5E5E5"> the</font>

95
00:03:57,540 --> 00:04:04,170
circuit<font color="#E5E5E5"> and the time it takes</font><font color="#CCCCCC"> for this</font>

96
00:03:59,220 --> 00:04:08,130
circuit<font color="#CCCCCC"> to output a value and</font><font color="#E5E5E5"> an</font>

97
00:04:04,170 --> 00:04:09,720
<font color="#CCCCCC">observation made</font><font color="#E5E5E5"> by Percival</font><font color="#CCCCCC"> is that for</font>

98
00:04:08,130 --> 00:04:12,180
a six actually really<font color="#CCCCCC"> expensive</font>

99
00:04:09,720 --> 00:04:15,600
components on these<font color="#E5E5E5"> a six on the memory</font>

100
00:04:12,180 --> 00:04:18,000
<font color="#E5E5E5">and this is actually what balances</font><font color="#CCCCCC"> when</font>

101
00:04:15,600 --> 00:04:20,790
you look at<font color="#E5E5E5"> just memory</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> balance is</font>

102
00:04:18,000 --> 00:04:22,260
more<font color="#CCCCCC"> general-purpose</font><font color="#E5E5E5"> computing and</font><font color="#CCCCCC"> Asics</font>

103
00:04:20,790 --> 00:04:25,560
<font color="#E5E5E5">because high speed</font><font color="#CCCCCC"> memory is very</font>

104
00:04:22,260 --> 00:04:27,719
<font color="#CCCCCC">expensive</font><font color="#E5E5E5"> for a six so we approximate</font>

105
00:04:25,560 --> 00:04:30,120
we'd like to approximate area time by

106
00:04:27,720 --> 00:04:31,770
<font color="#CCCCCC">basse</font><font color="#E5E5E5"> time so this is for example what</font>

107
00:04:30,120 --> 00:04:33,090
motivated the<font color="#CCCCCC"> development of a script</font>

108
00:04:31,770 --> 00:04:37,289
which<font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to be talked about in the</font>

109
00:04:33,090 --> 00:04:39,450
next<font color="#CCCCCC"> talk</font><font color="#E5E5E5"> so recapping basically what we</font>

110
00:04:37,290 --> 00:04:41,490
want from<font color="#E5E5E5"> our memory hard functions it's</font>

111
00:04:39,450 --> 00:04:44,039
a memory hard function is a<font color="#CCCCCC"> function</font>

112
00:04:41,490 --> 00:04:46,710
with a hardness<font color="#E5E5E5"> parameter n that can be</font>

113
00:04:44,040 --> 00:04:48,330
<font color="#E5E5E5">computed in sequential time</font><font color="#CCCCCC"> in time n</font>

114
00:04:46,710 --> 00:04:49,620
right this is what<font color="#E5E5E5"> the honest</font><font color="#CCCCCC"> guy's</font>

115
00:04:48,330 --> 00:04:51,390
gonna do we don't<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> assume he's</font>

116
00:04:49,620 --> 00:04:54,150
got any<font color="#E5E5E5"> kind of parallelism like an ASIC</font>

117
00:04:51,390 --> 00:04:57,690
<font color="#E5E5E5">but on the other hand it requires as</font>

118
00:04:54,150 --> 00:04:59,460
much parallel<font color="#CCCCCC"> space-time as possible</font><font color="#E5E5E5"> for</font>

119
00:04:57,690 --> 00:05:01,740
any function<font color="#CCCCCC"> that satisfies this first</font>

120
00:04:59,460 --> 00:05:03,120
<font color="#E5E5E5">property so we kind of want to for any</font>

121
00:05:01,740 --> 00:05:04,830
function<font color="#CCCCCC"> that can be</font><font color="#E5E5E5"> computed in n</font>

122
00:05:03,120 --> 00:05:06,390
sequential<font color="#E5E5E5"> time we want to maximize</font><font color="#CCCCCC"> the</font>

123
00:05:04,830 --> 00:05:11,219
parallel space time required<font color="#CCCCCC"> to compute</font>

124
00:05:06,390 --> 00:05:13,950
that function so memory<font color="#CCCCCC"> hard functions</font>

125
00:05:11,220 --> 00:05:16,590
they've been around now for a<font color="#E5E5E5"> couple</font>

126
00:05:13,950 --> 00:05:18,570
years<font color="#E5E5E5"> and they've essentially you can</font>

127
00:05:16,590 --> 00:05:20,820
view<font color="#E5E5E5"> almost all constructions</font><font color="#CCCCCC"> that exist</font>

128
00:05:18,570 --> 00:05:23,280
in the literature<font color="#E5E5E5"> as a mode</font><font color="#CCCCCC"> of operation</font>

129
00:05:20,820 --> 00:05:24,570
over a round function and almost always

130
00:05:23,280 --> 00:05:27,299
<font color="#E5E5E5">this round function is actually a</font>

131
00:05:24,570 --> 00:05:29,099
compression function<font color="#E5E5E5"> and so we're gonna</font>

132
00:05:27,300 --> 00:05:30,570
it's it's useful<font color="#CCCCCC"> to think</font><font color="#E5E5E5"> about it this</font>

133
00:05:29,100 --> 00:05:32,250
way to abstract it that way because

134
00:05:30,570 --> 00:05:33,900
<font color="#CCCCCC">really the memory hardness property</font>

135
00:05:32,250 --> 00:05:36,450
generally<font color="#E5E5E5"> comes out of the mode</font><font color="#CCCCCC"> of</font>

136
00:05:33,900 --> 00:05:38,580
<font color="#CCCCCC">operation</font><font color="#E5E5E5"> it's as long as you you</font><font color="#CCCCCC"> know</font>

137
00:05:36,450 --> 00:05:40,770
you module model<font color="#E5E5E5"> your compression</font>

138
00:05:38,580 --> 00:05:42,150
function is an ideal<font color="#E5E5E5"> compression</font>

139
00:05:40,770 --> 00:05:44,669
function and then you<font color="#CCCCCC"> analyze the mode</font>

140
00:05:42,150 --> 00:05:48,960
of<font color="#CCCCCC"> operation and that's</font><font color="#E5E5E5"> also the the</font>

141
00:05:44,669 --> 00:05:51,990
strategy<font color="#CCCCCC"> we'll take in this</font><font color="#E5E5E5"> work and we</font>

142
00:05:48,960 --> 00:05:55,320
can we<font color="#E5E5E5"> can categorize the constructions</font>

143
00:05:51,990 --> 00:05:58,290
<font color="#E5E5E5">into</font><font color="#CCCCCC"> to two broad groups and it depends</font>

144
00:05:55,320 --> 00:06:00,690
on whether the memory access pattern of

145
00:05:58,290 --> 00:06:05,070
the honest algorithm that evaluates this

146
00:06:00,690 --> 00:06:07,140
mhf<font color="#E5E5E5"> has depends on the input or not so</font>

147
00:06:05,070 --> 00:06:09,719
if the memory access pattern does<font color="#CCCCCC"> not</font>

148
00:06:07,140 --> 00:06:11,610
depend on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> input then we're speaking</font>

149
00:06:09,720 --> 00:06:13,650
of data independent<font color="#E5E5E5"> memory hard</font>

150
00:06:11,610 --> 00:06:16,440
functions or<font color="#CCCCCC"> IMH F's and</font><font color="#E5E5E5"> if it does</font>

151
00:06:13,650 --> 00:06:19,590
depend then data dependent so the

152
00:06:16,440 --> 00:06:21,800
advantage<font color="#E5E5E5"> of</font><font color="#CCCCCC"> IMH FS here</font><font color="#E5E5E5"> is that you</font>

153
00:06:19,590 --> 00:06:24,690
it's much easier to<font color="#E5E5E5"> implement them</font>

154
00:06:21,800 --> 00:06:26,850
<font color="#E5E5E5">without having</font><font color="#CCCCCC"> without opening yourself</font>

155
00:06:24,690 --> 00:06:28,950
up to cache timing attacks<font color="#E5E5E5"> and if you</font>

156
00:06:26,850 --> 00:06:30,270
think<font color="#E5E5E5"> about the the use case of password</font>

157
00:06:28,950 --> 00:06:31,950
based cryptography this takes on a

158
00:06:30,270 --> 00:06:34,620
special<font color="#E5E5E5"> importance because the input is</font>

159
00:06:31,950 --> 00:06:36,419
<font color="#E5E5E5">the password so you really don't want to</font>

160
00:06:34,620 --> 00:06:39,419
<font color="#E5E5E5">be leaking anything about that</font><font color="#CCCCCC"> input if</font>

161
00:06:36,419 --> 00:06:41,700
if you can so<font color="#E5E5E5"> that's why</font><font color="#CCCCCC"> IM hf s-- sort</font>

162
00:06:39,419 --> 00:06:43,729
of given given<font color="#E5E5E5"> a choice you know</font><font color="#CCCCCC"> i am</font>

163
00:06:41,700 --> 00:06:46,469
chefs are better<font color="#E5E5E5"> all things being equal</font>

164
00:06:43,730 --> 00:06:47,970
<font color="#E5E5E5">although as you'll see all things are</font>

165
00:06:46,470 --> 00:06:49,770
<font color="#E5E5E5">not</font><font color="#CCCCCC"> equal and</font><font color="#E5E5E5"> that's why we're still</font>

166
00:06:47,970 --> 00:06:53,430
<font color="#E5E5E5">interested in</font><font color="#CCCCCC"> diem HFS as well but</font><font color="#E5E5E5"> this</font>

167
00:06:49,770 --> 00:06:55,950
talk will focus<font color="#E5E5E5"> on</font><font color="#CCCCCC"> IM hf s so there's</font>

168
00:06:53,430 --> 00:06:57,240
been a<font color="#E5E5E5"> lot of constructions</font><font color="#CCCCCC"> and in</font>

169
00:06:55,950 --> 00:07:00,170
<font color="#E5E5E5">particular in the context of the</font>

170
00:06:57,240 --> 00:07:03,150
password hashing competition which

171
00:07:00,170 --> 00:07:05,700
<font color="#E5E5E5">recently ended many of the entrants</font>

172
00:07:03,150 --> 00:07:07,770
<font color="#CCCCCC">claim some form</font><font color="#E5E5E5"> of memory hardness in</font>

173
00:07:05,700 --> 00:07:11,370
<font color="#E5E5E5">particular the</font><font color="#CCCCCC"> winner-winner are gone to</font>

174
00:07:07,770 --> 00:07:13,500
<font color="#CCCCCC">i</font><font color="#E5E5E5"> several of the finalists</font><font color="#CCCCCC"> and other</font>

175
00:07:11,370 --> 00:07:15,870
contestants as well since then there's

176
00:07:13,500 --> 00:07:19,020
been<font color="#CCCCCC"> a few other constructions</font><font color="#E5E5E5"> notably</font>

177
00:07:15,870 --> 00:07:23,160
the balloon hashing<font color="#E5E5E5"> and a recent</font>

178
00:07:19,020 --> 00:07:24,990
theoretical construction as well<font color="#CCCCCC"> most</font><font color="#E5E5E5"> of</font>

179
00:07:23,160 --> 00:07:27,330
these constructions<font color="#CCCCCC"> almost all of</font><font color="#E5E5E5"> them</font>

180
00:07:24,990 --> 00:07:30,570
really<font color="#E5E5E5"> have been designed based on</font>

181
00:07:27,330 --> 00:07:32,490
intuition<font color="#E5E5E5"> and then analyzed using</font>

182
00:07:30,570 --> 00:07:34,050
cryptanalytic techniques so basically

183
00:07:32,490 --> 00:07:36,050
<font color="#CCCCCC">people with the constructions out there</font>

184
00:07:34,050 --> 00:07:38,280
and then<font color="#E5E5E5"> everybody tried to break them</font>

185
00:07:36,050 --> 00:07:41,070
there are a<font color="#E5E5E5"> few</font><font color="#CCCCCC"> exceptions to this</font>

186
00:07:38,280 --> 00:07:43,979
approach<font color="#CCCCCC"> notably katana balloon hashing</font>

187
00:07:41,070 --> 00:07:46,320
and the recent a<font color="#CCCCCC"> s15 construction in</font>

188
00:07:43,980 --> 00:07:48,930
particular balloon hashing<font color="#E5E5E5"> actually has</font>

189
00:07:46,320 --> 00:07:52,380
a security proof in sequential<font color="#E5E5E5"> random</font>

190
00:07:48,930 --> 00:07:54,180
Oracle model<font color="#CCCCCC"> and a is 15 goes all the</font>

191
00:07:52,380 --> 00:07:56,909
<font color="#E5E5E5">way to the parallel random Oracle model</font>

192
00:07:54,180 --> 00:07:58,740
<font color="#E5E5E5">for us parallelism is important here</font>

193
00:07:56,910 --> 00:08:01,110
because<font color="#E5E5E5"> remember our adversarial real</font>

194
00:07:58,740 --> 00:08:03,390
world model<font color="#E5E5E5"> are a</font><font color="#CCCCCC"> 6 and a 6</font><font color="#E5E5E5"> are parallel</font>

195
00:08:01,110 --> 00:08:04,980
devices you could have many<font color="#E5E5E5"> instances of</font>

196
00:08:03,390 --> 00:08:11,390
<font color="#E5E5E5">your compression function on the ASIC</font>

197
00:08:04,980 --> 00:08:13,440
that you can evaluate in parallel<font color="#CCCCCC"> so</font>

198
00:08:11,390 --> 00:08:15,150
trying to<font color="#E5E5E5"> nail down a little more</font>

199
00:08:13,440 --> 00:08:16,650
precisely what is<font color="#E5E5E5"> the right complexity</font>

200
00:08:15,150 --> 00:08:19,320
notion here we said<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> really</font>

201
00:08:16,650 --> 00:08:21,929
<font color="#E5E5E5">interested in st</font><font color="#CCCCCC"> space-time complexity</font>

202
00:08:19,320 --> 00:08:23,880
<font color="#E5E5E5">but we are also</font><font color="#CCCCCC"> looking at adversary's</font>

203
00:08:21,930 --> 00:08:26,100
that are parallel<font color="#E5E5E5"> adversary's and</font>

204
00:08:23,880 --> 00:08:27,510
there's a bit<font color="#E5E5E5"> of a problem and on top</font><font color="#CCCCCC"> of</font>

205
00:08:26,100 --> 00:08:29,100
<font color="#E5E5E5">that these adversary's they're actually</font>

206
00:08:27,510 --> 00:08:30,510
<font color="#CCCCCC">brute force evaluating these functions</font>

207
00:08:29,100 --> 00:08:33,210
right<font color="#E5E5E5"> they're evaluating many many</font>

208
00:08:30,510 --> 00:08:36,030
<font color="#E5E5E5">copies concurrently and there's a bit of</font>

209
00:08:33,210 --> 00:08:39,300
a<font color="#CCCCCC"> problem with how st plays with</font>

210
00:08:36,030 --> 00:08:41,189
parallelism and amortization<font color="#CCCCCC"> so</font><font color="#E5E5E5"> imagine</font>

211
00:08:39,299 --> 00:08:43,949
to see<font color="#E5E5E5"> to see what the issue is imagine</font>

212
00:08:41,190 --> 00:08:45,930
you have a function or a computation

213
00:08:43,950 --> 00:08:47,790
specific computation of<font color="#E5E5E5"> a function that</font>

214
00:08:45,930 --> 00:08:49,050
<font color="#E5E5E5">looks</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> this has the following memory</font>

215
00:08:47,790 --> 00:08:50,849
profile at<font color="#E5E5E5"> the beginning of the</font>

216
00:08:49,050 --> 00:08:53,640
computation there's a spike in memory

217
00:08:50,850 --> 00:08:54,870
<font color="#E5E5E5">and then there's a long tail</font><font color="#CCCCCC"> where you</font>

218
00:08:53,640 --> 00:08:55,620
<font color="#E5E5E5">don't need a lot</font><font color="#CCCCCC"> of memory</font><font color="#E5E5E5"> but you just</font>

219
00:08:54,870 --> 00:08:58,080
need a lot<font color="#E5E5E5"> of time</font>

220
00:08:55,620 --> 00:09:00,750
you need<font color="#E5E5E5"> a sequential time basically so</font>

221
00:08:58,080 --> 00:09:02,160
this<font color="#E5E5E5"> function would have suppose every</font>

222
00:09:00,750 --> 00:09:03,630
every way to<font color="#E5E5E5"> compute this function has</font>

223
00:09:02,160 --> 00:09:06,029
this you<font color="#E5E5E5"> know has this property this</font>

224
00:09:03,630 --> 00:09:07,290
function has high<font color="#E5E5E5"> st complexity right</font>

225
00:09:06,029 --> 00:09:09,380
<font color="#E5E5E5">because you got the</font><font color="#CCCCCC"> high us and</font><font color="#E5E5E5"> you got</font>

226
00:09:07,290 --> 00:09:12,029
a long<font color="#E5E5E5"> T the problem with this is that</font>

227
00:09:09,380 --> 00:09:14,100
<font color="#E5E5E5">when you're doing amortization over many</font>

228
00:09:12,029 --> 00:09:15,900
instances and you can do things<font color="#E5E5E5"> in</font>

229
00:09:14,100 --> 00:09:17,880
<font color="#CCCCCC">parallel</font><font color="#E5E5E5"> you can start to do things</font><font color="#CCCCCC"> like</font>

230
00:09:15,900 --> 00:09:19,800
this when the moment you finish<font color="#E5E5E5"> the</font>

231
00:09:17,880 --> 00:09:22,380
first<font color="#E5E5E5"> instance like the input the blue</font>

232
00:09:19,800 --> 00:09:23,910
input you freed up all your memory while

233
00:09:22,380 --> 00:09:26,520
you're doing this long tail so you<font color="#E5E5E5"> can</font>

234
00:09:23,910 --> 00:09:28,260
start<font color="#E5E5E5"> the</font><font color="#CCCCCC"> next input the</font><font color="#E5E5E5"> green input and</font>

235
00:09:26,520 --> 00:09:30,300
once you finish<font color="#CCCCCC"> that</font><font color="#E5E5E5"> spike you can start</font>

236
00:09:28,260 --> 00:09:31,560
the next<font color="#E5E5E5"> input the orange one and you</font>

237
00:09:30,300 --> 00:09:32,490
can because you<font color="#CCCCCC"> can do things in</font>

238
00:09:31,560 --> 00:09:34,920
<font color="#CCCCCC">parallel you can do all these</font>

239
00:09:32,490 --> 00:09:37,170
<font color="#CCCCCC">computations in parallel the point is</font>

240
00:09:34,920 --> 00:09:39,750
you really<font color="#E5E5E5"> haven't increased your</font>

241
00:09:37,170 --> 00:09:44,130
space-time complexity by very much<font color="#E5E5E5"> and</font>

242
00:09:39,750 --> 00:09:46,110
in<font color="#E5E5E5"> fact this can be quite extreme so in</font>

243
00:09:44,130 --> 00:09:48,570
a is<font color="#E5E5E5"> 15 there was an example</font><font color="#CCCCCC"> of a</font>

244
00:09:46,110 --> 00:09:50,790
function which was again a mode<font color="#CCCCCC"> of</font>

245
00:09:48,570 --> 00:09:54,390
operation on n calls to a<font color="#E5E5E5"> compression</font>

246
00:09:50,790 --> 00:09:56,520
<font color="#E5E5E5">function and the</font><font color="#CCCCCC"> st complexity</font><font color="#E5E5E5"> of copy</font>

247
00:09:54,390 --> 00:09:58,620
of computing this function square root n

248
00:09:56,520 --> 00:10:02,130
times<font color="#E5E5E5"> was really not much more</font><font color="#CCCCCC"> than</font>

249
00:09:58,620 --> 00:10:03,630
computing<font color="#E5E5E5"> it once so the point is st</font>

250
00:10:02,130 --> 00:10:05,459
complexity is it's good for one-off

251
00:10:03,630 --> 00:10:07,770
computation<font color="#E5E5E5"> for understanding one-off</font>

252
00:10:05,459 --> 00:10:09,569
computation but<font color="#E5E5E5"> it's not useful or it's</font>

253
00:10:07,770 --> 00:10:11,730
not it's<font color="#E5E5E5"> not a very good notion when you</font>

254
00:10:09,570 --> 00:10:14,310
want<font color="#E5E5E5"> to do amortized complexity for</font>

255
00:10:11,730 --> 00:10:16,950
parallel<font color="#E5E5E5"> computation so we need</font>

256
00:10:14,310 --> 00:10:19,829
<font color="#E5E5E5">something else and then maybe the</font>

257
00:10:16,950 --> 00:10:22,080
natural thing to<font color="#CCCCCC"> do so</font><font color="#E5E5E5"> st complexity you</font>

258
00:10:19,830 --> 00:10:24,779
can think<font color="#E5E5E5"> of it</font><font color="#CCCCCC"> like this</font><font color="#E5E5E5"> there's again</font>

259
00:10:22,080 --> 00:10:28,350
<font color="#E5E5E5">a computation the the space the space</font>

260
00:10:24,779 --> 00:10:30,540
curve over<font color="#E5E5E5"> time st</font><font color="#CCCCCC"> complex into the area</font>

261
00:10:28,350 --> 00:10:32,310
of<font color="#CCCCCC"> the entire</font><font color="#E5E5E5"> box and kind</font><font color="#CCCCCC"> of the</font>

262
00:10:30,540 --> 00:10:33,990
natural<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> given the</font><font color="#CCCCCC"> previous</font>

263
00:10:32,310 --> 00:10:36,779
<font color="#CCCCCC">argument is to just restrict ourselves</font>

264
00:10:33,990 --> 00:10:38,610
to<font color="#E5E5E5"> look at the area under the curve</font><font color="#CCCCCC"> so</font>

265
00:10:36,779 --> 00:10:42,089
as<font color="#E5E5E5"> long as you can't really reuse</font>

266
00:10:38,610 --> 00:10:44,580
computation across instances<font color="#E5E5E5"> reuse calls</font>

267
00:10:42,089 --> 00:10:46,260
to your<font color="#E5E5E5"> you know storage and reuse calls</font>

268
00:10:44,580 --> 00:10:49,410
to<font color="#E5E5E5"> your compression function you can</font>

269
00:10:46,260 --> 00:10:50,939
hope for nice<font color="#E5E5E5"> amortization so the the</font>

270
00:10:49,410 --> 00:10:53,010
complexity<font color="#CCCCCC"> should scale linearly</font>

271
00:10:50,940 --> 00:10:54,420
essentially in the number<font color="#CCCCCC"> of instances</font>

272
00:10:53,010 --> 00:10:56,910
<font color="#E5E5E5">that you're computing that's really what</font>

273
00:10:54,420 --> 00:10:59,760
we want<font color="#CCCCCC"> and for that we look at</font>

274
00:10:56,910 --> 00:11:00,959
cumulative memory complexity which is

275
00:10:59,760 --> 00:11:03,150
essentially you<font color="#E5E5E5"> can think of it as the</font>

276
00:11:00,959 --> 00:11:05,069
time the sum of the amount<font color="#E5E5E5"> of memory</font>

277
00:11:03,150 --> 00:11:07,459
across<font color="#E5E5E5"> time that your algorithm is</font>

278
00:11:05,070 --> 00:11:07,459
storing

279
00:11:07,710 --> 00:11:12,390
so in order<font color="#E5E5E5"> to reason about cumulative</font>

280
00:11:10,830 --> 00:11:14,750
memory complexity in particularly<font color="#E5E5E5"> in the</font>

281
00:11:12,390 --> 00:11:17,610
random Oracle model<font color="#CCCCCC"> a very useful</font>

282
00:11:14,750 --> 00:11:19,710
<font color="#E5E5E5">simplified computational model has been</font>

283
00:11:17,610 --> 00:11:22,710
developed<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> the parallel peddling</font>

284
00:11:19,710 --> 00:11:25,380
game<font color="#E5E5E5"> so this builds on</font><font color="#CCCCCC"> the black pebble</font>

285
00:11:22,710 --> 00:11:28,320
in game from the<font color="#E5E5E5"> 70s</font><font color="#CCCCCC"> and intuitively it</font>

286
00:11:25,380 --> 00:11:30,270
models parallel computation<font color="#CCCCCC"> so the idea</font>

287
00:11:28,320 --> 00:11:32,700
is that<font color="#E5E5E5"> this is a this is</font><font color="#CCCCCC"> a</font>

288
00:11:30,270 --> 00:11:34,529
computational model<font color="#E5E5E5"> over a dag directed</font>

289
00:11:32,700 --> 00:11:36,480
acyclic graph and it involves<font color="#E5E5E5"> just</font>

290
00:11:34,529 --> 00:11:41,550
putting pebbles on the<font color="#CCCCCC"> nodes</font><font color="#E5E5E5"> of graphs</font>

291
00:11:36,480 --> 00:11:43,830
of the nodes<font color="#E5E5E5"> of the graph</font><font color="#CCCCCC"> and this is</font>

292
00:11:41,550 --> 00:11:46,229
done iteratively<font color="#CCCCCC"> so one round at a time</font>

293
00:11:43,830 --> 00:11:48,720
<font color="#CCCCCC">and the goal of the game is</font><font color="#E5E5E5"> simply to</font>

294
00:11:46,230 --> 00:11:51,120
place a pebble on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> sink</font><font color="#E5E5E5"> of the graph</font>

295
00:11:48,720 --> 00:11:52,620
on the<font color="#E5E5E5"> last</font><font color="#CCCCCC"> node of</font><font color="#E5E5E5"> the graph</font><font color="#CCCCCC"> okay for</font>

296
00:11:51,120 --> 00:11:55,170
simplicity we<font color="#E5E5E5"> just think of graphs with</font>

297
00:11:52,620 --> 00:11:57,990
<font color="#E5E5E5">one source one sink</font><font color="#CCCCCC"> and there's really</font>

298
00:11:55,170 --> 00:12:00,209
only<font color="#E5E5E5"> two rules that</font><font color="#CCCCCC"> govern how you can</font>

299
00:11:57,990 --> 00:12:02,640
place these pebbles<font color="#E5E5E5"> the most important</font>

300
00:12:00,209 --> 00:12:05,160
rule is you can only<font color="#E5E5E5"> place a pebble</font><font color="#CCCCCC"> on a</font>

301
00:12:02,640 --> 00:12:07,439
node V<font color="#E5E5E5"> if at the by the end of the</font>

302
00:12:05,160 --> 00:12:11,100
previous<font color="#E5E5E5"> round</font><font color="#CCCCCC"> all the parent nodes of V</font>

303
00:12:07,440 --> 00:12:12,600
already have a pebble on them the second

304
00:12:11,100 --> 00:12:14,480
rule is you can<font color="#E5E5E5"> remove a pebble whenever</font>

305
00:12:12,600 --> 00:12:18,029
you want

306
00:12:14,480 --> 00:12:19,500
so<font color="#E5E5E5"> just to give you an example</font><font color="#CCCCCC"> just so</font>

307
00:12:18,029 --> 00:12:21,600
that this is like quite clear how this

308
00:12:19,500 --> 00:12:24,209
works here's this<font color="#CCCCCC"> very simple dag for</font>

309
00:12:21,600 --> 00:12:26,220
nodes<font color="#CCCCCC"> okay and we're gonna look at how a</font>

310
00:12:24,209 --> 00:12:28,560
peddling would work<font color="#E5E5E5"> okay in the first</font>

311
00:12:26,220 --> 00:12:30,510
step you place a pebble on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> sink</font><font color="#E5E5E5"> on</font>

312
00:12:28,560 --> 00:12:32,250
<font color="#E5E5E5">the source</font><font color="#CCCCCC"> right it has no</font><font color="#E5E5E5"> parents so</font>

313
00:12:30,510 --> 00:12:34,709
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> always place pebbles on sources</font>

314
00:12:32,250 --> 00:12:37,650
now in the next<font color="#CCCCCC"> step we can immediately</font>

315
00:12:34,709 --> 00:12:40,140
<font color="#E5E5E5">place the pebble on the children of the</font>

316
00:12:37,650 --> 00:12:42,000
sink<font color="#E5E5E5"> because both because their parents</font>

317
00:12:40,140 --> 00:12:43,740
<font color="#E5E5E5">are already covered</font><font color="#CCCCCC"> and at the same time</font>

318
00:12:42,000 --> 00:12:48,870
<font color="#E5E5E5">in the same step we can remove the</font>

319
00:12:43,740 --> 00:12:50,550
pebble on the<font color="#CCCCCC"> source the next step we</font>

320
00:12:48,870 --> 00:12:53,430
can do the same<font color="#E5E5E5"> for the sink and we're</font>

321
00:12:50,550 --> 00:12:55,290
done<font color="#E5E5E5"> all right so that the complexity</font>

322
00:12:53,430 --> 00:12:57,270
notion we look at here for<font color="#E5E5E5"> this pedaling</font>

323
00:12:55,290 --> 00:12:59,400
game<font color="#E5E5E5"> mirrors cumulative memory</font>

324
00:12:57,270 --> 00:13:01,290
complexity and we call it also similar

325
00:12:59,400 --> 00:13:03,329
<font color="#E5E5E5">named cumulative pebble in complexity</font>

326
00:13:01,290 --> 00:13:05,969
<font color="#E5E5E5">and it's simply the sum of the number</font><font color="#CCCCCC"> of</font>

327
00:13:03,329 --> 00:13:07,949
pebbles on<font color="#CCCCCC"> the graph</font><font color="#E5E5E5"> across the number</font>

328
00:13:05,970 --> 00:13:11,010
of steps<font color="#E5E5E5"> across the steps so</font><font color="#CCCCCC"> in that</font>

329
00:13:07,950 --> 00:13:12,240
case<font color="#CCCCCC"> that peddling had CPC for so you</font>

330
00:13:11,010 --> 00:13:14,730
can<font color="#E5E5E5"> already see</font><font color="#CCCCCC"> that there's like a</font>

331
00:13:12,240 --> 00:13:17,730
strong parallel<font color="#E5E5E5"> here between</font><font color="#CCCCCC"> an how you</font>

332
00:13:14,730 --> 00:13:20,010
would hope<font color="#CCCCCC"> computation works</font><font color="#E5E5E5"> in the</font>

333
00:13:17,730 --> 00:13:21,089
parallel random Oracle model<font color="#E5E5E5"> and the</font>

334
00:13:20,010 --> 00:13:22,139
pebble<font color="#E5E5E5"> in game</font>

335
00:13:21,089 --> 00:13:24,209
and the so<font color="#E5E5E5"> the pebble</font><font color="#CCCCCC"> in-game</font><font color="#E5E5E5"> really</font>

336
00:13:22,139 --> 00:13:28,019
serves as<font color="#E5E5E5"> a way to</font><font color="#CCCCCC"> simplify the analysis</font>

337
00:13:24,209 --> 00:13:30,359
of different functions<font color="#E5E5E5"> and armed with</font>

338
00:13:28,019 --> 00:13:32,309
<font color="#E5E5E5">this</font><font color="#CCCCCC"> pub with this complexity notion for</font>

339
00:13:30,360 --> 00:13:34,079
<font color="#E5E5E5">graphs we</font><font color="#CCCCCC"> can you know</font><font color="#E5E5E5"> define the</font>

340
00:13:32,309 --> 00:13:36,569
complexity<font color="#E5E5E5"> or notion for a graph and</font>

341
00:13:34,079 --> 00:13:38,849
that's<font color="#E5E5E5"> simply</font><font color="#CCCCCC"> the low the minimum</font>

342
00:13:36,569 --> 00:13:41,160
<font color="#CCCCCC">peddling complexity of any complete and</font>

343
00:13:38,850 --> 00:13:43,290
legal peddling of a given graph<font color="#CCCCCC"> right so</font>

344
00:13:41,160 --> 00:13:45,689
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is the CPC of a graph</font><font color="#E5E5E5"> and much</font><font color="#CCCCCC"> of</font>

345
00:13:43,290 --> 00:13:48,240
<font color="#E5E5E5">this talk is</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> about looking</font>

346
00:13:45,689 --> 00:13:51,629
at the CPC<font color="#CCCCCC"> and understanding the CPC of</font>

347
00:13:48,240 --> 00:13:54,959
different graphs<font color="#E5E5E5"> and the reason for that</font>

348
00:13:51,629 --> 00:13:57,329
is the<font color="#CCCCCC"> following theorem which is</font><font color="#E5E5E5"> from a</font>

349
00:13:54,959 --> 00:13:58,589
previous<font color="#E5E5E5"> work which basically states</font><font color="#CCCCCC"> you</font>

350
00:13:57,329 --> 00:14:01,529
<font color="#E5E5E5">don't really have to parse it too much</font>

351
00:13:58,589 --> 00:14:05,730
<font color="#E5E5E5">but what it</font><font color="#CCCCCC"> says</font><font color="#E5E5E5"> is that</font><font color="#CCCCCC"> for a class of</font>

352
00:14:01,529 --> 00:14:06,990
<font color="#CCCCCC">functions which</font><font color="#E5E5E5"> call hash graphs</font><font color="#CCCCCC"> really</font>

353
00:14:05,730 --> 00:14:08,399
<font color="#CCCCCC">the only thing you can do in the</font>

354
00:14:06,990 --> 00:14:10,589
parallel random Oracle<font color="#CCCCCC"> model is</font>

355
00:14:08,399 --> 00:14:13,579
essentially pebble the graph<font color="#E5E5E5"> you can</font>

356
00:14:10,589 --> 00:14:16,139
just compute labels in this hash graph

357
00:14:13,579 --> 00:14:17,459
<font color="#CCCCCC">according to a peddling and that's what</font>

358
00:14:16,139 --> 00:14:19,589
<font color="#E5E5E5">this theorem says and so what it means</font>

359
00:14:17,459 --> 00:14:21,209
<font color="#E5E5E5">is</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> don't have to</font><font color="#CCCCCC"> think about the</font>

360
00:14:19,589 --> 00:14:22,860
parallel random Oracle model<font color="#E5E5E5"> anymore for</font>

361
00:14:21,209 --> 00:14:25,170
<font color="#E5E5E5">this entire class of functions for these</font>

362
00:14:22,860 --> 00:14:26,850
potentially memory hard functions<font color="#E5E5E5"> all we</font>

363
00:14:25,170 --> 00:14:29,040
have to do is we look<font color="#E5E5E5"> at the underlying</font>

364
00:14:26,850 --> 00:14:31,410
graph which describes the<font color="#E5E5E5"> mode of</font>

365
00:14:29,040 --> 00:14:32,879
<font color="#CCCCCC">operation for these functions and we</font>

366
00:14:31,410 --> 00:14:34,980
analyze the<font color="#CCCCCC"> properties of</font><font color="#E5E5E5"> the graph</font>

367
00:14:32,879 --> 00:14:36,600
namely its<font color="#E5E5E5"> CPC that's all we have to do</font>

368
00:14:34,980 --> 00:14:40,139
and so that's<font color="#E5E5E5"> what we're going</font><font color="#CCCCCC"> to do in</font>

369
00:14:36,600 --> 00:14:42,179
this talk<font color="#E5E5E5"> and so given this theorem we</font>

370
00:14:40,139 --> 00:14:43,740
really have two goals now on the one

371
00:14:42,179 --> 00:14:46,290
hand in terms<font color="#CCCCCC"> of attacks on the other</font>

372
00:14:43,740 --> 00:14:47,639
one and<font color="#CCCCCC"> in terms of security</font><font color="#E5E5E5"> proofs for</font>

373
00:14:46,290 --> 00:14:50,759
security proofs what we're looking for

374
00:14:47,639 --> 00:14:52,889
<font color="#CCCCCC">is a constant in degree graph with high</font>

375
00:14:50,759 --> 00:14:55,620
CPC<font color="#E5E5E5"> now the reason for constant in</font>

376
00:14:52,889 --> 00:14:57,029
degree is because we're looking<font color="#CCCCCC"> at</font><font color="#E5E5E5"> the</font>

377
00:14:55,620 --> 00:14:59,910
mode of<font color="#CCCCCC"> operation over compression</font>

378
00:14:57,029 --> 00:15:01,499
function<font color="#E5E5E5"> and kind of in the random</font>

379
00:14:59,910 --> 00:15:02,879
Oracle model<font color="#E5E5E5"> the implicit assumption</font>

380
00:15:01,499 --> 00:15:04,559
here<font color="#E5E5E5"> is when you want to call your round</font>

381
00:15:02,879 --> 00:15:05,910
function<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> your compression</font>

382
00:15:04,559 --> 00:15:07,800
function you really have to<font color="#E5E5E5"> have</font>

383
00:15:05,910 --> 00:15:09,689
everything<font color="#E5E5E5"> in memory in one go that's</font>

384
00:15:07,800 --> 00:15:11,579
just how<font color="#E5E5E5"> we model things in the random</font>

385
00:15:09,689 --> 00:15:13,679
Oracle model<font color="#E5E5E5"> and in order</font><font color="#CCCCCC"> not to</font><font color="#E5E5E5"> break</font>

386
00:15:11,579 --> 00:15:16,019
that we don't want to have too big<font color="#E5E5E5"> of</font>

387
00:15:13,679 --> 00:15:17,730
<font color="#E5E5E5">inputs so that</font><font color="#CCCCCC"> the random Oracle model</font>

388
00:15:16,019 --> 00:15:19,529
<font color="#CCCCCC">is still relevant in practice when you</font>

389
00:15:17,730 --> 00:15:21,389
replace your random Oracle with some

390
00:15:19,529 --> 00:15:23,189
hash function cryptographic hash

391
00:15:21,389 --> 00:15:25,110
function so this is why we're<font color="#CCCCCC"> looking at</font>

392
00:15:23,189 --> 00:15:27,269
constant in degree graphs otherwise we'd

393
00:15:25,110 --> 00:15:29,100
<font color="#CCCCCC">be done the fully connected dag so it</font>

394
00:15:27,269 --> 00:15:31,920
you know<font color="#E5E5E5"> is already going to have</font><font color="#CCCCCC"> as</font>

395
00:15:29,100 --> 00:15:33,660
good<font color="#CCCCCC"> CPC as you could ever hope but</font><font color="#E5E5E5"> we</font>

396
00:15:31,920 --> 00:15:34,430
need<font color="#CCCCCC"> constant in degree for</font><font color="#E5E5E5"> this to make</font>

397
00:15:33,660 --> 00:15:36,339
<font color="#E5E5E5">sense and indeed</font>

398
00:15:34,430 --> 00:15:38,930
all constructions are constant in degree

399
00:15:36,339 --> 00:15:42,500
the other thing in<font color="#CCCCCC"> terms of attacks</font><font color="#E5E5E5"> that</font>

400
00:15:38,930 --> 00:15:46,609
we want is<font color="#E5E5E5"> to find low CPC peddling</font>

401
00:15:42,500 --> 00:15:48,560
strategies so previous results on CPC

402
00:15:46,610 --> 00:15:50,060
remember there's many constructions I've

403
00:15:48,560 --> 00:15:51,890
highlighted some<font color="#E5E5E5"> what we know about some</font>

404
00:15:50,060 --> 00:15:54,680
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the most important functions in</font>

405
00:15:51,890 --> 00:15:56,330
particular are gone<font color="#E5E5E5"> to was the winner of</font>

406
00:15:54,680 --> 00:15:58,250
password hashing competition so that's

407
00:15:56,330 --> 00:16:01,430
important<font color="#CCCCCC"> Catina was one of the earliest</font>

408
00:15:58,250 --> 00:16:03,529
ones and for now we've<font color="#CCCCCC"> up till now we've</font>

409
00:16:01,430 --> 00:16:05,930
mainly<font color="#E5E5E5"> known about low about upper</font>

410
00:16:03,529 --> 00:16:07,850
bounds<font color="#E5E5E5"> so that would be a tax in some</font>

411
00:16:05,930 --> 00:16:09,800
sense<font color="#E5E5E5"> and the best by the way you can</font>

412
00:16:07,850 --> 00:16:14,000
hope for<font color="#E5E5E5"> of any function</font><font color="#CCCCCC"> any mode of</font>

413
00:16:09,800 --> 00:16:16,910
<font color="#E5E5E5">operation on n calls to a compression</font>

414
00:16:14,000 --> 00:16:18,200
<font color="#E5E5E5">function is for CPC</font><font color="#CCCCCC"> of N squared that's</font>

415
00:16:16,910 --> 00:16:20,060
<font color="#E5E5E5">the best you could ever hope for and</font>

416
00:16:18,200 --> 00:16:21,740
<font color="#CCCCCC">that's just doing</font><font color="#E5E5E5"> things sequentially</font><font color="#CCCCCC"> in</font>

417
00:16:20,060 --> 00:16:24,829
topological<font color="#E5E5E5"> order and remembering</font>

418
00:16:21,740 --> 00:16:27,860
<font color="#E5E5E5">everything keeping pebbles everywhere so</font>

419
00:16:24,830 --> 00:16:30,290
as we'll see<font color="#CCCCCC"> in the next crypt</font><font color="#E5E5E5"> and the</font>

420
00:16:27,860 --> 00:16:33,020
next talk<font color="#E5E5E5"> okay I won't say</font><font color="#CCCCCC"> too much</font>

421
00:16:30,290 --> 00:16:36,260
<font color="#CCCCCC">about</font><font color="#E5E5E5"> that so the only thing we've we've</font>

422
00:16:33,020 --> 00:16:38,870
<font color="#E5E5E5">got in terms of security proofs is for a</font>

423
00:16:36,260 --> 00:16:40,339
<font color="#CCCCCC">s15 this it's a</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> theoretical</font>

424
00:16:38,870 --> 00:16:42,170
construction but we got pretty<font color="#E5E5E5"> close we</font>

425
00:16:40,339 --> 00:16:43,790
got poly log asymptotically this looks

426
00:16:42,170 --> 00:16:46,339
good<font color="#CCCCCC"> the problem is</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> for practical</font>

427
00:16:43,790 --> 00:16:48,349
<font color="#CCCCCC">values of n log to the ten is</font><font color="#E5E5E5"> like</font>

428
00:16:46,339 --> 00:16:50,560
that's like square root n<font color="#CCCCCC"> ok so</font><font color="#E5E5E5"> that's</font>

429
00:16:48,350 --> 00:16:53,690
actually<font color="#E5E5E5"> pretty far away from N squared</font>

430
00:16:50,560 --> 00:16:58,640
so in this work<font color="#CCCCCC"> we developed several</font><font color="#E5E5E5"> new</font>

431
00:16:53,690 --> 00:17:01,700
techniques<font color="#E5E5E5"> for both attacks and for new</font>

432
00:16:58,640 --> 00:17:04,339
security proofs<font color="#E5E5E5"> and in</font><font color="#CCCCCC"> particular we</font>

433
00:17:01,700 --> 00:17:06,740
tightened<font color="#E5E5E5"> the gap what we know about</font>

434
00:17:04,339 --> 00:17:10,250
certain functions in particular<font color="#CCCCCC"> are</font><font color="#E5E5E5"> gone</font>

435
00:17:06,740 --> 00:17:12,170
<font color="#E5E5E5">to ia and B there's new the new version</font>

436
00:17:10,250 --> 00:17:15,619
is<font color="#E5E5E5"> are gone to IB that's the the newest</font>

437
00:17:12,170 --> 00:17:17,600
version of<font color="#CCCCCC"> our Gong to I and</font><font color="#E5E5E5"> maybe the</font>

438
00:17:15,619 --> 00:17:20,319
<font color="#E5E5E5">most interesting in</font><font color="#CCCCCC"> the theoretical</font>

439
00:17:17,599 --> 00:17:22,938
<font color="#E5E5E5">sense is</font><font color="#CCCCCC"> that we have an asymptotically</font>

440
00:17:20,319 --> 00:17:25,369
<font color="#E5E5E5">almost optimal construction now so a</font>

441
00:17:22,939 --> 00:17:27,290
graph that<font color="#E5E5E5"> has as high CPC as you could</font>

442
00:17:25,369 --> 00:17:28,909
<font color="#E5E5E5">hope for and the reason they</font><font color="#CCCCCC"> say high C</font>

443
00:17:27,290 --> 00:17:31,460
as high as you<font color="#E5E5E5"> could hope for is because</font>

444
00:17:28,910 --> 00:17:34,580
of this result<font color="#E5E5E5"> here which shows that any</font>

445
00:17:31,460 --> 00:17:35,510
graph on n nodes<font color="#CCCCCC"> you can't get n squared</font>

446
00:17:34,580 --> 00:17:37,340
<font color="#E5E5E5">right</font>

447
00:17:35,510 --> 00:17:40,309
you can the most you can get is<font color="#E5E5E5"> N</font>

448
00:17:37,340 --> 00:17:43,340
squared<font color="#CCCCCC"> over</font><font color="#E5E5E5"> log log</font><font color="#CCCCCC"> n</font><font color="#E5E5E5"> effectively and</font>

449
00:17:40,309 --> 00:17:47,360
in this we in this work we construct N

450
00:17:43,340 --> 00:17:47,970
squared over<font color="#E5E5E5"> log</font><font color="#CCCCCC"> n and the way we do</font>

451
00:17:47,360 --> 00:17:51,059
that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> by</font>

452
00:17:47,970 --> 00:17:52,770
analyzing using<font color="#E5E5E5"> a combinatorial property</font>

453
00:17:51,059 --> 00:17:54,840
of graphs called depth robustness<font color="#E5E5E5"> and</font>

454
00:17:52,770 --> 00:17:58,590
what depth robustness is it's the

455
00:17:54,840 --> 00:18:00,178
<font color="#E5E5E5">following property given a graph G we</font>

456
00:17:58,590 --> 00:18:02,070
say that it's<font color="#E5E5E5"> edy depth robust</font>

457
00:18:00,179 --> 00:18:04,650
if you can any subset of<font color="#CCCCCC"> nodes that</font><font color="#E5E5E5"> you</font>

458
00:18:02,070 --> 00:18:06,418
<font color="#E5E5E5">remove of size</font><font color="#CCCCCC"> e so any</font><font color="#E5E5E5"> e nodes that you</font>

459
00:18:04,650 --> 00:18:09,210
<font color="#E5E5E5">remove there will remain a path of</font>

460
00:18:06,419 --> 00:18:13,890
length D so this<font color="#CCCCCC"> is a combinatorial</font>

461
00:18:09,210 --> 00:18:15,840
property and what we do is we is the

462
00:18:13,890 --> 00:18:17,370
kind of<font color="#CCCCCC"> main theorem we show the</font>

463
00:18:15,840 --> 00:18:20,100
<font color="#CCCCCC">following theorem which says that if</font><font color="#E5E5E5"> a</font>

464
00:18:17,370 --> 00:18:23,418
graph is<font color="#CCCCCC"> e d depth robust</font><font color="#E5E5E5"> then the CPC</font>

465
00:18:20,100 --> 00:18:28,860
<font color="#CCCCCC">of the graph is greater than e times D</font>

466
00:18:23,419 --> 00:18:31,140
<font color="#CCCCCC">so given this</font><font color="#E5E5E5"> theorem really</font><font color="#CCCCCC"> all we need</font>

467
00:18:28,860 --> 00:18:34,110
to<font color="#E5E5E5"> do is now find a graph</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> has high</font>

468
00:18:31,140 --> 00:18:36,330
CPC<font color="#E5E5E5"> and sorry</font><font color="#CCCCCC"> has high def robustness</font>

469
00:18:34,110 --> 00:18:38,789
<font color="#E5E5E5">and</font><font color="#CCCCCC"> Erdos</font><font color="#E5E5E5"> grams simonetti already gave</font>

470
00:18:36,330 --> 00:18:40,620
us such a<font color="#E5E5E5"> construction so this is using</font>

471
00:18:38,789 --> 00:18:42,030
<font color="#E5E5E5">quite an old result the only problem</font>

472
00:18:40,620 --> 00:18:44,250
with<font color="#CCCCCC"> that construction</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that it didn't</font>

473
00:18:42,030 --> 00:18:47,490
have constant in degree so the other

474
00:18:44,250 --> 00:18:49,020
thing<font color="#E5E5E5"> we do in for this is to show how</font>

475
00:18:47,490 --> 00:18:51,330
<font color="#E5E5E5">to reduce the in</font><font color="#CCCCCC"> degree</font><font color="#E5E5E5"> of a graph</font>

476
00:18:49,020 --> 00:18:53,549
<font color="#E5E5E5">without paying too much in depth</font>

477
00:18:51,330 --> 00:18:55,350
robustness<font color="#E5E5E5"> so combining those two</font>

478
00:18:53,549 --> 00:18:57,590
results<font color="#CCCCCC"> this lemma in this theorem we</font>

479
00:18:55,350 --> 00:19:01,350
end up with at least<font color="#E5E5E5"> theoretically</font>

480
00:18:57,590 --> 00:19:04,168
<font color="#E5E5E5">asymptotically optimal construction for</font>

481
00:19:01,350 --> 00:19:10,500
a<font color="#E5E5E5"> graph with high CPC and therefore an</font>

482
00:19:04,169 --> 00:19:14,549
<font color="#E5E5E5">IM</font><font color="#CCCCCC"> hf the other thing we do is well we</font>

483
00:19:10,500 --> 00:19:17,280
do<font color="#E5E5E5"> several other things in</font><font color="#CCCCCC"> particulars</font>

484
00:19:14,549 --> 00:19:18,990
show some lower bounds for<font color="#E5E5E5"> known</font>

485
00:19:17,280 --> 00:19:21,389
<font color="#CCCCCC">constructions so what</font><font color="#E5E5E5"> that boils down to</font>

486
00:19:18,990 --> 00:19:23,039
is<font color="#E5E5E5"> looking at the depth robustness of</font>

487
00:19:21,390 --> 00:19:25,140
<font color="#E5E5E5">the graphs that underlie those</font>

488
00:19:23,039 --> 00:19:27,210
constructions<font color="#E5E5E5"> and also another</font>

489
00:19:25,140 --> 00:19:30,360
combinatorial property that<font color="#E5E5E5"> we identify</font>

490
00:19:27,210 --> 00:19:32,760
which we call dispersal which<font color="#E5E5E5"> also gives</font>

491
00:19:30,360 --> 00:19:37,490
you some bounds on<font color="#CCCCCC"> the CPC of a graph</font><font color="#E5E5E5"> we</font>

492
00:19:32,760 --> 00:19:40,220
analyze<font color="#CCCCCC"> that as well and we also take a</font>

493
00:19:37,490 --> 00:19:43,860
pebble Ian

494
00:19:40,220 --> 00:19:45,590
<font color="#CCCCCC">which gives you low CPC a pebble ings</font>

495
00:19:43,860 --> 00:19:48,090
for certain kinds of graphs and<font color="#E5E5E5"> we</font>

496
00:19:45,590 --> 00:19:49,470
<font color="#E5E5E5">improve on it by sort of</font><font color="#CCCCCC"> looking</font><font color="#E5E5E5"> at it</font>

497
00:19:48,090 --> 00:19:50,220
<font color="#CCCCCC">recursively see if we can apply it</font>

498
00:19:49,470 --> 00:19:51,960
recursively

499
00:19:50,220 --> 00:19:55,350
and indeed<font color="#CCCCCC"> that gives us improved</font>

500
00:19:51,960 --> 00:19:59,280
<font color="#E5E5E5">attacks in some sense on some known</font><font color="#CCCCCC"> IMH</font>

501
00:19:55,350 --> 00:20:01,668
<font color="#CCCCCC">F's</font><font color="#E5E5E5"> all right I think that's it time's</font>

502
00:19:59,280 --> 00:20:01,668
up<font color="#E5E5E5"> to now</font>

503
00:20:07,900 --> 00:20:22,870
questions so I'll start with<font color="#E5E5E5"> one the you</font>

504
00:20:20,090 --> 00:20:24,860
didn't formulate any statements<font color="#E5E5E5"> about</font>

505
00:20:22,870 --> 00:20:28,060
<font color="#E5E5E5">hardness for the address for it that</font>

506
00:20:24,860 --> 00:20:32,199
follows<font color="#CCCCCC"> from the death robots</font><font color="#E5E5E5"> robustness</font>

507
00:20:28,060 --> 00:20:34,550
<font color="#CCCCCC">so the hardness</font><font color="#E5E5E5"> for the adversary is</font>

508
00:20:32,200 --> 00:20:36,260
essentially you have that it's high CMC

509
00:20:34,550 --> 00:20:37,820
<font color="#E5E5E5">right so that's cumulative memory</font>

510
00:20:36,260 --> 00:20:39,260
complexity in the parallel random Oracle

511
00:20:37,820 --> 00:20:41,030
<font color="#CCCCCC">model that's</font><font color="#E5E5E5"> sort of the hardness notion</font>

512
00:20:39,260 --> 00:20:43,730
<font color="#E5E5E5">for the adversary and then there's this</font>

513
00:20:41,030 --> 00:20:45,260
result<font color="#E5E5E5"> from the past work that shows</font>

514
00:20:43,730 --> 00:20:47,900
<font color="#E5E5E5">that if you</font><font color="#CCCCCC"> have a graph that</font><font color="#E5E5E5"> has high</font>

515
00:20:45,260 --> 00:20:50,030
CPC<font color="#E5E5E5"> you can turn it into an</font><font color="#CCCCCC"> IEEE</font><font color="#E5E5E5"> mhf</font>

516
00:20:47,900 --> 00:20:52,250
that has high CMC in the random Oracle

517
00:20:50,030 --> 00:20:54,050
model<font color="#E5E5E5"> and then one of the key theorems</font>

518
00:20:52,250 --> 00:20:57,560
we show is that<font color="#E5E5E5"> if a graph is very depth</font>

519
00:20:54,050 --> 00:20:59,419
or bus then it has high<font color="#E5E5E5"> CPC so plugging</font>

520
00:20:57,560 --> 00:21:03,409
<font color="#E5E5E5">that chain together you</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> up with an</font>

521
00:20:59,420 --> 00:21:06,080
<font color="#CCCCCC">IM hf that</font><font color="#E5E5E5"> is high CMC for example the</font>

522
00:21:03,410 --> 00:21:08,420
adversary<font color="#E5E5E5"> has ability to choose its own</font>

523
00:21:06,080 --> 00:21:11,480
inputs in main applications<font color="#E5E5E5"> is it</font>

524
00:21:08,420 --> 00:21:14,180
<font color="#CCCCCC">something that your secret statements</font>

525
00:21:11,480 --> 00:21:16,700
capture<font color="#E5E5E5"> indeed indeed</font><font color="#CCCCCC"> I've glossed over</font>

526
00:21:14,180 --> 00:21:19,340
the fact<font color="#CCCCCC"> that cumulative memory</font>

527
00:21:16,700 --> 00:21:21,260
complexity<font color="#E5E5E5"> we actually we look at the</font>

528
00:21:19,340 --> 00:21:23,629
amortized<font color="#E5E5E5"> cumulative memory complexity</font>

529
00:21:21,260 --> 00:21:25,550
of a function<font color="#E5E5E5"> so really the game is in</font>

530
00:21:23,630 --> 00:21:27,680
<font color="#E5E5E5">the parallel random Oracle model is you</font>

531
00:21:25,550 --> 00:21:29,840
allow the adversity to choose how<font color="#CCCCCC"> many</font>

532
00:21:27,680 --> 00:21:31,280
inputs<font color="#E5E5E5"> he wants to</font><font color="#CCCCCC"> evaluate and what the</font>

533
00:21:29,840 --> 00:21:33,970
inputs are and then he runs<font color="#E5E5E5"> the</font>

534
00:21:31,280 --> 00:21:37,040
computation and<font color="#E5E5E5"> then you look at the</font>

535
00:21:33,970 --> 00:21:39,770
amortized complexity<font color="#CCCCCC"> per in</font><font color="#E5E5E5"> her</font><font color="#CCCCCC"> i/o pair</font>

536
00:21:37,040 --> 00:21:41,659
that he computes so yeah I kind of

537
00:21:39,770 --> 00:21:46,879
<font color="#E5E5E5">glossed over that but yeah he it does</font>

538
00:21:41,660 --> 00:21:52,100
<font color="#CCCCCC">capture that question what one sec one</font>

539
00:21:46,880 --> 00:21:54,950
sec<font color="#CCCCCC"> will they repeat the question yet</font>

540
00:21:52,100 --> 00:21:58,330
<font color="#E5E5E5">you have an example for why you can't</font>

541
00:21:54,950 --> 00:22:00,740
<font color="#CCCCCC">get past</font><font color="#E5E5E5"> that factor for</font><font color="#CCCCCC"> it's it's</font><font color="#E5E5E5"> tight</font>

542
00:21:58,330 --> 00:22:02,030
<font color="#E5E5E5">okay again that's actually the</font>

543
00:22:00,740 --> 00:22:05,420
simplified<font color="#CCCCCC"> version of</font><font color="#E5E5E5"> that theorem</font>

544
00:22:02,030 --> 00:22:08,480
statement<font color="#E5E5E5"> and in reality</font><font color="#CCCCCC"> the quality</font><font color="#E5E5E5"> of</font>

545
00:22:05,420 --> 00:22:09,980
the theorem<font color="#E5E5E5"> of that reduction decreases</font>

546
00:22:08,480 --> 00:22:11,570
in things like<font color="#E5E5E5"> how many random</font><font color="#CCCCCC"> Oracle</font>

547
00:22:09,980 --> 00:22:13,580
calls does the adversary make what's his

548
00:22:11,570 --> 00:22:14,418
probability<font color="#CCCCCC"> so the way it's formulated</font>

549
00:22:13,580 --> 00:22:15,949
there

550
00:22:14,419 --> 00:22:18,350
<font color="#E5E5E5">is tight for</font><font color="#CCCCCC"> some choice of parameters</font>

551
00:22:15,950 --> 00:22:21,799
<font color="#CCCCCC">but not in the general cases is a more</font>

552
00:22:18,350 --> 00:22:24,340
<font color="#E5E5E5">complicated equation so yes and no</font>

553
00:22:21,799 --> 00:22:24,340
<font color="#E5E5E5">basically</font>

