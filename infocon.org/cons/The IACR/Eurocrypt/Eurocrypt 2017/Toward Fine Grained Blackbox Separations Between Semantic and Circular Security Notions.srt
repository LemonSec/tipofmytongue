1
00:00:00,030 --> 00:00:03,480
<font color="#E5E5E5">all right thank you very much</font><font color="#CCCCCC"> so well</font><font color="#E5E5E5"> I</font>

2
00:00:01,800 --> 00:00:05,670
<font color="#E5E5E5">want to talk about our black box</font>

3
00:00:03,480 --> 00:00:08,510
operations for<font color="#CCCCCC"> succour encryption and</font>

4
00:00:05,670 --> 00:00:11,969
this is joint work with<font color="#CCCCCC"> do</font><font color="#E5E5E5"> escape ring</font>

5
00:00:08,510 --> 00:00:15,838
so<font color="#E5E5E5"> well let's start by reviewing the</font>

6
00:00:11,969 --> 00:00:16,650
notion of secure encryption<font color="#E5E5E5"> so what in</font>

7
00:00:15,839 --> 00:00:17,880
its simplest<font color="#CCCCCC"> form</font>

8
00:00:16,650 --> 00:00:19,229
we have the notion of one simpler

9
00:00:17,880 --> 00:00:21,840
encryption which is defined<font color="#E5E5E5"> as a game</font>

10
00:00:19,230 --> 00:00:22,949
between a challenger an adversary<font color="#CCCCCC"> in</font>

11
00:00:21,840 --> 00:00:25,109
which the Challenger has<font color="#CCCCCC"> a pair of</font>

12
00:00:22,949 --> 00:00:26,939
public<font color="#CCCCCC"> secret</font><font color="#E5E5E5"> keys PK and SK and that</font>

13
00:00:25,109 --> 00:00:29,220
the adversary receives the<font color="#E5E5E5"> challenges</font>

14
00:00:26,939 --> 00:00:30,510
public key as well as an<font color="#E5E5E5"> encryption of</font>

15
00:00:29,220 --> 00:00:32,430
<font color="#CCCCCC">the challengers the quick key on there</font>

16
00:00:30,510 --> 00:00:33,630
<font color="#CCCCCC">is</font><font color="#E5E5E5"> corresponding public key and the goal</font>

17
00:00:32,430 --> 00:00:38,519
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> adversary is to distinguish</font>

18
00:00:33,630 --> 00:00:41,070
between encryptions<font color="#E5E5E5"> for plain texts</font><font color="#CCCCCC"> of</font>

19
00:00:38,520 --> 00:00:43,110
<font color="#E5E5E5">your own choice so what I want to</font>

20
00:00:41,070 --> 00:00:45,450
<font color="#CCCCCC">mention two points here so the first</font>

21
00:00:43,110 --> 00:00:48,410
point<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that um</font><font color="#E5E5E5"> we can actually make</font>

22
00:00:45,450 --> 00:00:52,949
this<font color="#CCCCCC"> an ocean stronger by now required</font>

23
00:00:48,410 --> 00:00:54,629
by by now requiring the adversary<font color="#E5E5E5"> to</font>

24
00:00:52,949 --> 00:00:59,280
actually distinguish between encryptions

25
00:00:54,629 --> 00:01:02,339
<font color="#E5E5E5">of secret keys and and</font><font color="#CCCCCC"> encryption to</font>

26
00:00:59,280 --> 00:01:04,710
<font color="#E5E5E5">fixed</font><font color="#CCCCCC"> our plain texts</font><font color="#E5E5E5"> but since one of</font>

27
00:01:02,340 --> 00:01:07,680
our goals is to prove separations where

28
00:01:04,709 --> 00:01:10,369
the target notion is a secure encryption

29
00:01:07,680 --> 00:01:14,520
<font color="#E5E5E5">if we make the target notion weaker our</font>

30
00:01:10,369 --> 00:01:15,869
<font color="#CCCCCC">results will be a stronger so while the</font>

31
00:01:14,520 --> 00:01:18,570
second<font color="#E5E5E5"> point that I wanna mention is</font>

32
00:01:15,869 --> 00:01:22,710
that all<font color="#E5E5E5"> DubLi are actually important</font>

33
00:01:18,570 --> 00:01:27,919
how the secret key is<font color="#E5E5E5"> encrypted namely</font>

34
00:01:22,710 --> 00:01:27,919
whether it is<font color="#E5E5E5"> encrypted bit by bit or or</font>

35
00:01:28,100 --> 00:01:32,699
blocks of bits<font color="#E5E5E5"> or whether it is</font>

36
00:01:30,720 --> 00:01:35,610
encrypted<font color="#E5E5E5"> as a whole and it turns out</font>

37
00:01:32,700 --> 00:01:38,369
<font color="#E5E5E5">that the first two cases are the two</font>

38
00:01:35,610 --> 00:01:41,189
most<font color="#CCCCCC"> difficult cases to</font><font color="#E5E5E5"> handle and it</font>

39
00:01:38,369 --> 00:01:43,500
<font color="#CCCCCC">also as</font><font color="#E5E5E5"> I will tell you later</font><font color="#CCCCCC"> or the</font>

40
00:01:41,189 --> 00:01:46,500
third case can<font color="#CCCCCC"> be very easily handled I</font>

41
00:01:43,500 --> 00:01:48,540
will tell you what I mean<font color="#E5E5E5"> by</font><font color="#CCCCCC"> that all</font>

42
00:01:46,500 --> 00:01:50,070
right<font color="#E5E5E5"> so well more generally we</font><font color="#CCCCCC"> had the</font>

43
00:01:48,540 --> 00:01:52,320
notion<font color="#CCCCCC"> of T</font><font color="#E5E5E5"> it's a clear encryption in</font>

44
00:01:50,070 --> 00:01:55,110
which<font color="#CCCCCC"> D in which the Challenger now</font><font color="#E5E5E5"> has</font>

45
00:01:52,320 --> 00:01:57,270
T pairs of public<font color="#CCCCCC"> secret keys and and</font>

46
00:01:55,110 --> 00:01:59,430
the<font color="#E5E5E5"> adversary receives all all the</font>

47
00:01:57,270 --> 00:02:01,350
<font color="#E5E5E5">online public keys as</font><font color="#CCCCCC"> well as as well as</font>

48
00:01:59,430 --> 00:02:03,299
<font color="#E5E5E5">an encryption of each secret key under</font>

49
00:02:01,350 --> 00:02:07,619
it under its next<font color="#E5E5E5"> public key in a secure</font>

50
00:02:03,299 --> 00:02:11,000
fashion<font color="#CCCCCC"> okay and and everything remains</font>

51
00:02:07,619 --> 00:02:15,150
<font color="#E5E5E5">the same from from this point on all</font>

52
00:02:11,000 --> 00:02:17,069
<font color="#E5E5E5">right so uestion</font><font color="#CCCCCC"> that is</font><font color="#E5E5E5"> raised is that</font>

53
00:02:15,150 --> 00:02:19,410
<font color="#E5E5E5">whether we can base our based on T</font>

54
00:02:17,069 --> 00:02:22,470
secure encryption on<font color="#E5E5E5"> CP encryption and</font>

55
00:02:19,410 --> 00:02:24,690
it turns<font color="#E5E5E5"> out that for the case</font><font color="#CCCCCC"> RT equals</font>

56
00:02:22,470 --> 00:02:27,720
<font color="#CCCCCC">one and for the full-length</font><font color="#E5E5E5"> case namely</font>

57
00:02:24,690 --> 00:02:33,780
<font color="#E5E5E5">the case in which we can encrypt the</font>

58
00:02:27,720 --> 00:02:36,180
secret key<font color="#CCCCCC"> as a whole there's a simple</font>

59
00:02:33,780 --> 00:02:37,800
<font color="#CCCCCC">construction in the literature</font><font color="#E5E5E5"> that will</font>

60
00:02:36,180 --> 00:02:39,360
work<font color="#E5E5E5"> or with respect to any CP</font>

61
00:02:37,800 --> 00:02:41,459
encryption that has the syntactic

62
00:02:39,360 --> 00:02:42,930
property and<font color="#CCCCCC"> the idea is essentially</font>

63
00:02:41,459 --> 00:02:45,720
<font color="#E5E5E5">that if you want to build the encryption</font>

64
00:02:42,930 --> 00:02:48,510
algorithm<font color="#CCCCCC"> a</font><font color="#E5E5E5"> prime on out of e on</font>

65
00:02:45,720 --> 00:02:50,580
plaintext X and the public key<font color="#CCCCCC"> PK we</font>

66
00:02:48,510 --> 00:02:54,299
first somehow check that or whether X is

67
00:02:50,580 --> 00:02:57,540
<font color="#E5E5E5">a secret key of a PK or not and if it is</font>

68
00:02:54,300 --> 00:02:59,940
we will encrypt a safe or<font color="#CCCCCC"> plain text</font>

69
00:02:57,540 --> 00:03:02,120
<font color="#CCCCCC">under PK and if it's not we will</font><font color="#E5E5E5"> just</font>

70
00:02:59,940 --> 00:03:05,040
encrypt<font color="#E5E5E5"> X itself and this way we will</font>

71
00:03:02,120 --> 00:03:08,360
reduce encryptions<font color="#E5E5E5"> of secret keys to our</font>

72
00:03:05,040 --> 00:03:11,879
<font color="#E5E5E5">encryptions of safe plain texts on there</font>

73
00:03:08,360 --> 00:03:13,830
the<font color="#E5E5E5"> basic scheme and and the question</font>

74
00:03:11,879 --> 00:03:20,340
<font color="#E5E5E5">that remains is that how on how</font><font color="#CCCCCC"> we can</font>

75
00:03:13,830 --> 00:03:20,730
actually do this<font color="#E5E5E5"> check in in polynomial</font>

76
00:03:20,340 --> 00:03:24,690
time

77
00:03:20,730 --> 00:03:28,140
and<font color="#CCCCCC"> and it turns out</font><font color="#E5E5E5"> that if the base CP</font>

78
00:03:24,690 --> 00:03:29,159
<font color="#E5E5E5">a public encryption had this property</font>

79
00:03:28,140 --> 00:03:30,690
<font color="#E5E5E5">that's all</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> a one-to-one</font>

80
00:03:29,159 --> 00:03:32,730
<font color="#E5E5E5">correspondence between the randomness of</font>

81
00:03:30,690 --> 00:03:35,269
the<font color="#E5E5E5"> key generation algorithm and the</font>

82
00:03:32,730 --> 00:03:39,329
resulting a public key then we<font color="#CCCCCC"> can build</font>

83
00:03:35,269 --> 00:03:43,739
another<font color="#CCCCCC"> PK</font><font color="#E5E5E5"> e on under which we can</font><font color="#CCCCCC"> do</font>

84
00:03:39,330 --> 00:03:45,390
this check efficiently<font color="#E5E5E5"> okay but</font><font color="#CCCCCC"> uh</font>

85
00:03:43,739 --> 00:03:47,459
<font color="#E5E5E5">this construction doesn't seem to extend</font>

86
00:03:45,390 --> 00:03:50,190
<font color="#E5E5E5">if you're going to encrypt</font><font color="#CCCCCC"> X</font>

87
00:03:47,459 --> 00:03:53,760
bit by bit<font color="#CCCCCC"> and it is an utter all seem</font>

88
00:03:50,190 --> 00:03:58,560
to<font color="#E5E5E5"> extend if you want to make this team</font>

89
00:03:53,760 --> 00:04:02,519
secure on there are<font color="#E5E5E5"> T cycles where T is</font>

90
00:03:58,560 --> 00:04:05,099
bigger<font color="#E5E5E5"> than</font><font color="#CCCCCC"> one alright</font><font color="#E5E5E5"> so one in terms</font>

91
00:04:02,519 --> 00:04:06,599
of previous<font color="#E5E5E5"> works or one of the main</font>

92
00:04:05,099 --> 00:04:09,209
applications<font color="#E5E5E5"> of the notion of secure</font>

93
00:04:06,599 --> 00:04:13,290
encryption is in the context of<font color="#CCCCCC"> fhd</font>

94
00:04:09,209 --> 00:04:15,629
for converting somewhat fhe into<font color="#CCCCCC"> p</font>

95
00:04:13,290 --> 00:04:18,659
refugee and also we now have

96
00:04:15,629 --> 00:04:19,829
constructions of several so<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have</font>

97
00:04:18,660 --> 00:04:23,190
construction of sealers that you

98
00:04:19,829 --> 00:04:26,280
encryption<font color="#E5E5E5"> based on various specific</font>

99
00:04:23,190 --> 00:04:27,900
<font color="#CCCCCC">assumptions</font><font color="#E5E5E5"> and on the negative</font><font color="#CCCCCC"> side</font>

100
00:04:26,280 --> 00:04:30,809
we have this<font color="#E5E5E5"> result</font><font color="#CCCCCC"> by brass plume that</font>

101
00:04:27,900 --> 00:04:33,810
<font color="#E5E5E5">shows that harm you cannot use a black</font>

102
00:04:30,810 --> 00:04:36,330
box reduction to prove that any CPA<font color="#E5E5E5"> bit</font>

103
00:04:33,810 --> 00:04:39,450
encryption scheme is<font color="#E5E5E5"> also acicular</font>

104
00:04:36,330 --> 00:04:41,520
secure and<font color="#E5E5E5"> this result was followed by a</font>

105
00:04:39,450 --> 00:04:43,710
series<font color="#E5E5E5"> of work</font><font color="#CCCCCC"> that's based</font><font color="#E5E5E5"> on various</font>

106
00:04:41,520 --> 00:04:47,810
the specific assumptions<font color="#E5E5E5"> give you CPA</font>

107
00:04:43,710 --> 00:04:50,159
schemes<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are not circular</font><font color="#CCCCCC"> secured</font><font color="#E5E5E5"> in</font>

108
00:04:47,810 --> 00:04:53,460
different<font color="#CCCCCC"> settings like</font><font color="#E5E5E5"> in the bit by</font>

109
00:04:50,160 --> 00:04:55,889
bit setting and so on and finally we

110
00:04:53,460 --> 00:04:58,469
have this result<font color="#CCCCCC"> that</font><font color="#E5E5E5"> shows that that</font>

111
00:04:55,889 --> 00:05:02,280
<font color="#CCCCCC">shows</font><font color="#E5E5E5"> that you cannot go from chapter</font>

112
00:04:58,470 --> 00:05:05,880
permutations<font color="#CCCCCC"> in a fully black</font><font color="#E5E5E5"> box way to</font>

113
00:05:02,280 --> 00:05:08,010
a fully KDM<font color="#E5E5E5"> public key encryption in</font>

114
00:05:05,880 --> 00:05:10,860
which you can securely encrypt any

115
00:05:08,010 --> 00:05:14,520
function<font color="#E5E5E5"> of the secret key</font><font color="#CCCCCC"> under its</font>

116
00:05:10,860 --> 00:05:16,710
public key<font color="#E5E5E5"> okay so one or two</font><font color="#CCCCCC"> questions</font>

117
00:05:14,520 --> 00:05:19,169
<font color="#CCCCCC">that remain are that whether we can</font>

118
00:05:16,710 --> 00:05:22,109
build a one circular bit<font color="#CCCCCC"> encryption or</font><font color="#E5E5E5"> a</font>

119
00:05:19,169 --> 00:05:24,120
<font color="#CCCCCC">t circular encryption are based on</font><font color="#E5E5E5"> CPA</font>

120
00:05:22,110 --> 00:05:26,280
encryption and I would emphasize here

121
00:05:24,120 --> 00:05:28,229
that for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> t circular case we don't</font>

122
00:05:26,280 --> 00:05:32,340
insist on having a bit by<font color="#CCCCCC"> bed encryption</font>

123
00:05:28,229 --> 00:05:35,729
scheme<font color="#E5E5E5"> all right so</font><font color="#CCCCCC"> when we addressed</font>

124
00:05:32,340 --> 00:05:37,380
these<font color="#E5E5E5"> questions by considering a</font>

125
00:05:35,729 --> 00:05:40,710
stronger notion<font color="#E5E5E5"> that's what that we</font>

126
00:05:37,380 --> 00:05:45,030
<font color="#E5E5E5">called seed circular security which is</font>

127
00:05:40,710 --> 00:05:48,630
<font color="#E5E5E5">exactly the same as Sickler particular</font>

128
00:05:45,030 --> 00:05:50,369
security except that<font color="#E5E5E5"> now</font><font color="#CCCCCC"> we are</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

129
00:05:48,630 --> 00:05:51,659
<font color="#E5E5E5">encrypt the seed of the key generation</font>

130
00:05:50,370 --> 00:05:57,330
algorithm on there<font color="#E5E5E5"> its corresponding</font>

131
00:05:51,660 --> 00:06:00,990
<font color="#CCCCCC">public key</font><font color="#E5E5E5"> and and and this notion is</font>

132
00:05:57,330 --> 00:06:02,669
actually<font color="#E5E5E5"> stronger because you might have</font>

133
00:06:00,990 --> 00:06:06,390
<font color="#CCCCCC">the you</font><font color="#E5E5E5"> might have the key generation</font>

134
00:06:02,669 --> 00:06:13,169
algorithm to simply<font color="#CCCCCC"> output so</font><font color="#E5E5E5"> the</font>

135
00:06:06,390 --> 00:06:16,530
<font color="#CCCCCC">underlined seed as as the secret key so</font>

136
00:06:13,169 --> 00:06:19,260
what we show are that<font color="#CCCCCC"> it doesn't exist</font>

137
00:06:16,530 --> 00:06:22,109
a fully black box<font color="#E5E5E5"> construction of a one</font>

138
00:06:19,260 --> 00:06:24,890
<font color="#CCCCCC">seed circular</font><font color="#E5E5E5"> a bit encryption from CPA</font>

139
00:06:22,110 --> 00:06:28,020
encryption in a fully black box way and

140
00:06:24,890 --> 00:06:30,030
and we<font color="#E5E5E5"> actually show that this result</font>

141
00:06:28,020 --> 00:06:36,690
holds even<font color="#E5E5E5"> if the seed is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

142
00:06:30,030 --> 00:06:39,599
encrypted<font color="#CCCCCC"> as as as blocks of length</font><font color="#E5E5E5"> of</font>

143
00:06:36,690 --> 00:06:40,210
<font color="#E5E5E5">log n bits</font><font color="#CCCCCC"> and our second</font><font color="#E5E5E5"> result shows</font>

144
00:06:39,599 --> 00:06:44,229
<font color="#CCCCCC">that</font><font color="#E5E5E5"> how you can</font>

145
00:06:40,210 --> 00:06:48,159
go from<font color="#E5E5E5"> tea seed</font><font color="#CCCCCC"> circular encryption to</font>

146
00:06:44,229 --> 00:06:51,520
what T plus 1 seed<font color="#E5E5E5"> circular encryption</font>

147
00:06:48,160 --> 00:06:56,710
<font color="#E5E5E5">even</font><font color="#CCCCCC"> if the target notion is it's worth</font>

148
00:06:51,520 --> 00:06:58,780
<font color="#CCCCCC">a weaker case of</font><font color="#E5E5E5"> a full inks and and the</font>

149
00:06:56,710 --> 00:07:02,229
base notion is for the stronger case of

150
00:06:58,780 --> 00:07:04,840
a bit by bit case<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font>

151
00:07:02,229 --> 00:07:06,969
so well let me say a few words about a

152
00:07:04,840 --> 00:07:08,948
fully black<font color="#E5E5E5"> constructions so what so</font>

153
00:07:06,970 --> 00:07:10,960
<font color="#CCCCCC">what</font><font color="#E5E5E5"> so what so what in cryptography we</font>

154
00:07:08,949 --> 00:07:13,360
really want to show<font color="#CCCCCC"> that there</font><font color="#E5E5E5"> exists a</font>

155
00:07:10,960 --> 00:07:20,409
fully black box construction<font color="#E5E5E5"> of P out of</font>

156
00:07:13,360 --> 00:07:22,509
<font color="#E5E5E5">Q I mean oh no no</font><font color="#CCCCCC"> ok so</font><font color="#E5E5E5"> what I wanted to</font>

157
00:07:20,410 --> 00:07:24,370
say is<font color="#E5E5E5"> that harm</font><font color="#CCCCCC"> okay if you want to</font>

158
00:07:22,509 --> 00:07:26,259
<font color="#E5E5E5">prove</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> there does exist a fully</font>

159
00:07:24,370 --> 00:07:29,889
black box construction<font color="#CCCCCC"> or</font><font color="#E5E5E5"> P out of Q</font><font color="#CCCCCC"> uh</font>

160
00:07:26,259 --> 00:07:35,349
<font color="#E5E5E5">you need to first give</font><font color="#CCCCCC"> our you first</font>

161
00:07:29,889 --> 00:07:39,550
<font color="#CCCCCC">need to</font><font color="#E5E5E5"> give a black box construction</font>

162
00:07:35,349 --> 00:07:41,169
algorithm which by<font color="#E5E5E5"> only having Oracle</font>

163
00:07:39,550 --> 00:07:45,490
access to<font color="#CCCCCC"> or any correct implementation</font>

164
00:07:41,169 --> 00:07:50,560
of Q gives you a correct<font color="#E5E5E5"> implementation</font>

165
00:07:45,490 --> 00:07:52,210
of of alpha P and one point that I want

166
00:07:50,560 --> 00:07:55,930
<font color="#E5E5E5">to mention</font><font color="#CCCCCC"> here is that since our</font><font color="#E5E5E5"> the</font>

167
00:07:52,210 --> 00:07:59,440
access to the base implementation is as

168
00:07:55,930 --> 00:08:01,750
an Oracle<font color="#CCCCCC"> or the construction will will</font>

169
00:07:59,440 --> 00:08:06,130
<font color="#E5E5E5">make sense even even if that</font>

170
00:08:01,750 --> 00:08:07,810
implementation<font color="#E5E5E5"> is</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> efficient and and</font>

171
00:08:06,130 --> 00:08:10,930
this is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> point that will be leveraged</font>

172
00:08:07,810 --> 00:08:13,210
<font color="#CCCCCC">in many separation groups and what we</font>

173
00:08:10,930 --> 00:08:16,030
<font color="#E5E5E5">call all this and and we</font><font color="#CCCCCC"> call the</font>

174
00:08:13,210 --> 00:08:20,198
security proof algorithm<font color="#E5E5E5"> a black box if</font>

175
00:08:16,030 --> 00:08:24,039
if<font color="#CCCCCC"> our the algorithm by by having access</font>

176
00:08:20,199 --> 00:08:28,270
<font color="#CCCCCC">to any implementation of Q</font><font color="#E5E5E5"> and also</font><font color="#CCCCCC"> by</font>

177
00:08:24,039 --> 00:08:30,430
<font color="#E5E5E5">having access to a high positive or to a</font>

178
00:08:28,270 --> 00:08:32,949
<font color="#E5E5E5">hypothetical adversary that</font><font color="#CCCCCC"> breaks the</font>

179
00:08:30,430 --> 00:08:39,669
construction relative to Q can break the

180
00:08:32,950 --> 00:08:42,279
security<font color="#CCCCCC"> of alpha Q</font><font color="#E5E5E5"> okay so on that's</font>

181
00:08:39,669 --> 00:08:44,709
let's let's review two common templates

182
00:08:42,279 --> 00:08:48,339
<font color="#E5E5E5">that are used in the literature</font><font color="#CCCCCC"> for</font>

183
00:08:44,709 --> 00:08:50,410
approving a fully black box separation

184
00:08:48,339 --> 00:08:53,980
between<font color="#E5E5E5"> two or between two primitives or</font>

185
00:08:50,410 --> 00:08:58,290
<font color="#E5E5E5">P and Q under the first</font><font color="#CCCCCC"> temple</font>

186
00:08:53,980 --> 00:08:58,290
we first<font color="#E5E5E5"> give an ideal implementation</font>

187
00:08:58,890 --> 00:09:09,130
<font color="#CCCCCC">r4q which cannot be broken even</font><font color="#E5E5E5"> if you</font>

188
00:09:02,470 --> 00:09:12,370
are allowed which cannot be<font color="#CCCCCC"> broken if</font>

189
00:09:09,130 --> 00:09:16,810
<font color="#CCCCCC">you are only going to make a polynomial</font>

190
00:09:12,370 --> 00:09:20,200
<font color="#CCCCCC">number of queries are to all and</font><font color="#E5E5E5"> even if</font>

191
00:09:16,810 --> 00:09:23,410
you're allowed<font color="#E5E5E5"> to make expensive offline</font>

192
00:09:20,200 --> 00:09:25,120
computation and and at<font color="#E5E5E5"> the same time you</font>

193
00:09:23,410 --> 00:09:28,959
show that<font color="#CCCCCC"> are any possible construction</font>

194
00:09:25,120 --> 00:09:31,350
<font color="#E5E5E5">G</font><font color="#CCCCCC"> are relative to all</font><font color="#E5E5E5"> 4p can</font><font color="#CCCCCC"> be broken</font>

195
00:09:28,960 --> 00:09:32,500
<font color="#E5E5E5">by a polynomial</font><font color="#CCCCCC"> number of queries to oh</font>

196
00:09:31,350 --> 00:09:37,330
<font color="#E5E5E5">okay</font>

197
00:09:32,500 --> 00:09:39,640
and we cannot<font color="#CCCCCC"> use this approach because</font>

198
00:09:37,330 --> 00:09:42,730
<font color="#E5E5E5">the most natural way</font><font color="#CCCCCC"> to use this</font>

199
00:09:39,640 --> 00:09:45,760
<font color="#E5E5E5">approach is</font><font color="#CCCCCC"> to let all be a random</font>

200
00:09:42,730 --> 00:09:47,200
<font color="#E5E5E5">public encryption and if you think if</font>

201
00:09:45,760 --> 00:09:50,980
<font color="#E5E5E5">you think of a random public encryption</font>

202
00:09:47,200 --> 00:09:52,900
<font color="#E5E5E5">it will satisfy any notion of on</font>

203
00:09:50,980 --> 00:09:54,760
security that's all you<font color="#E5E5E5"> can think</font><font color="#CCCCCC"> of so</font>

204
00:09:52,900 --> 00:10:00,100
what<font color="#E5E5E5"> cannot use it so what the</font><font color="#CCCCCC"> second</font>

205
00:09:54,760 --> 00:10:05,220
approach<font color="#E5E5E5"> is it's a somewhat</font><font color="#CCCCCC"> similar in</font>

206
00:10:00,100 --> 00:10:11,190
<font color="#CCCCCC">that in addition to all</font><font color="#E5E5E5"> we also provide</font>

207
00:10:05,220 --> 00:10:14,200
<font color="#CCCCCC">another or we</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> in Oracle</font><font color="#E5E5E5"> W which</font>

208
00:10:11,190 --> 00:10:17,500
which<font color="#CCCCCC"> are which are doesn't help to</font>

209
00:10:14,200 --> 00:10:23,200
break or the<font color="#CCCCCC"> Q security of all but</font><font color="#E5E5E5"> it</font>

210
00:10:17,500 --> 00:10:28,980
can be useful<font color="#E5E5E5"> for for our breaking any</font>

211
00:10:23,200 --> 00:10:32,830
possible construction<font color="#CCCCCC"> or for P</font><font color="#E5E5E5"> and again</font>

212
00:10:28,980 --> 00:10:35,230
and again<font color="#E5E5E5"> we were not</font><font color="#CCCCCC"> able to use all</font>

213
00:10:32,830 --> 00:10:39,730
this approach<font color="#E5E5E5"> so on</font>

214
00:10:35,230 --> 00:10:43,330
so our separation template follows the

215
00:10:39,730 --> 00:10:49,410
template of<font color="#CCCCCC"> Gertner</font><font color="#E5E5E5"> at all from one and</font>

216
00:10:43,330 --> 00:10:56,620
<font color="#E5E5E5">on the idea is that basically</font><font color="#CCCCCC"> for</font>

217
00:10:49,410 --> 00:10:59,500
basically<font color="#CCCCCC"> four of four</font><font color="#E5E5E5"> are basically for</font>

218
00:10:56,620 --> 00:11:04,000
<font color="#E5E5E5">every candidate construction for for the</font>

219
00:10:59,500 --> 00:11:07,170
target primitive we provide an<font color="#CCCCCC"> Oracle</font><font color="#E5E5E5"> T</font>

220
00:11:04,000 --> 00:11:07,170
which helps

221
00:11:07,300 --> 00:11:14,290
make the claim security of the

222
00:11:11,110 --> 00:11:18,510
construction but<font color="#CCCCCC"> it doesn't</font><font color="#E5E5E5"> help us but</font>

223
00:11:14,290 --> 00:11:22,660
<font color="#E5E5E5">but uh it</font><font color="#CCCCCC"> hasn't</font><font color="#E5E5E5"> helped any adversary</font><font color="#CCCCCC"> a</font>

224
00:11:18,510 --> 00:11:27,339
<font color="#E5E5E5">gate against an ideal implementation of</font>

225
00:11:22,660 --> 00:11:30,760
the base primitive<font color="#E5E5E5"> so one let</font><font color="#CCCCCC"> me tell</font>

226
00:11:27,339 --> 00:11:34,930
you that that's<font color="#E5E5E5"> how on</font><font color="#CCCCCC"> how on</font><font color="#E5E5E5"> how the</font>

227
00:11:30,760 --> 00:11:38,410
ideal<font color="#E5E5E5"> base on implementation GED is</font>

228
00:11:34,930 --> 00:11:41,140
sampled<font color="#E5E5E5"> on it is very easy</font><font color="#CCCCCC"> so when we</font>

229
00:11:38,410 --> 00:11:43,709
<font color="#CCCCCC">sampled the key generation algorithm and</font>

230
00:11:41,140 --> 00:11:48,490
on and on and the<font color="#E5E5E5"> encryption algorithm</font>

231
00:11:43,709 --> 00:11:51,250
at random and<font color="#E5E5E5"> then and then we</font><font color="#CCCCCC"> defined</font>

232
00:11:48,490 --> 00:11:55,420
<font color="#CCCCCC">the decryption algorithm</font><font color="#E5E5E5"> accordingly and</font>

233
00:11:51,250 --> 00:11:58,959
<font color="#CCCCCC">we also define on to</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> two side</font>

234
00:11:55,420 --> 00:12:01,469
Oracle's<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> use our inner probes so</font>

235
00:11:58,959 --> 00:12:05,018
<font color="#CCCCCC">one the</font><font color="#E5E5E5"> Oracle you will decrypt</font>

236
00:12:01,470 --> 00:12:07,360
ciphertext relative to our public keys

237
00:12:05,019 --> 00:12:10,269
also outputting the<font color="#CCCCCC"> underlying</font>

238
00:12:07,360 --> 00:12:11,589
randomness and the<font color="#E5E5E5"> Oracle</font><font color="#CCCCCC"> W basically</font>

239
00:12:10,269 --> 00:12:14,800
checks that<font color="#CCCCCC"> all</font><font color="#E5E5E5"> whether a given public</font>

240
00:12:11,589 --> 00:12:16,540
key is valid or not<font color="#CCCCCC"> and I want</font><font color="#E5E5E5"> to and</font>

241
00:12:14,800 --> 00:12:18,819
and I wanna emphasize that<font color="#CCCCCC"> how in our</font>

242
00:12:16,540 --> 00:12:21,520
<font color="#E5E5E5">security</font><font color="#CCCCCC"> approves we will not let</font><font color="#E5E5E5"> the</font>

243
00:12:18,820 --> 00:12:25,300
adversary to<font color="#CCCCCC"> have unrestricted</font><font color="#E5E5E5"> access to</font>

244
00:12:21,520 --> 00:12:29,610
you okay so while now let me tell<font color="#E5E5E5"> you</font>

245
00:12:25,300 --> 00:12:32,770
<font color="#CCCCCC">how how do we recall key works</font><font color="#E5E5E5"> so well</font>

246
00:12:29,610 --> 00:12:36,190
<font color="#E5E5E5">so what the most natural approach for</font>

247
00:12:32,770 --> 00:12:41,470
defining<font color="#E5E5E5"> T would</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> to let here except</font>

248
00:12:36,190 --> 00:12:45,670
inputs<font color="#E5E5E5"> of a claim public key as well as</font>

249
00:12:41,470 --> 00:12:52,959
a claim bit by bit encryption of<font color="#CCCCCC"> pk's</font>

250
00:12:45,670 --> 00:12:56,949
<font color="#E5E5E5">seed under</font><font color="#CCCCCC"> under PK itself and and the</font>

251
00:12:52,959 --> 00:13:02,170
chicken work<font color="#E5E5E5"> but first</font><font color="#CCCCCC"> our decrypting</font>

252
00:12:56,949 --> 00:13:06,099
the bit ciphertext relative<font color="#E5E5E5"> to a magic</font>

253
00:13:02,170 --> 00:13:08,439
secret key for our PK and then and then

254
00:13:06,100 --> 00:13:11,620
our rerun the key generation algorithm

255
00:13:08,440 --> 00:13:13,860
or to see that<font color="#CCCCCC"> or whether</font><font color="#E5E5E5"> we will get PK</font>

256
00:13:11,620 --> 00:13:16,930
back but there are two<font color="#E5E5E5"> problems with</font>

257
00:13:13,860 --> 00:13:20,079
<font color="#CCCCCC">this approach on the first problem is</font>

258
00:13:16,930 --> 00:13:20,920
that<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the adversary against the base</font>

259
00:13:20,079 --> 00:13:23,920
scheme

260
00:13:20,920 --> 00:13:27,180
GED which also has<font color="#CCCCCC"> Oracle</font><font color="#E5E5E5"> access to tea</font>

261
00:13:23,920 --> 00:13:33,130
can use tea in any possible<font color="#E5E5E5"> way right</font><font color="#CCCCCC"> so</font>

262
00:13:27,180 --> 00:13:36,219
<font color="#E5E5E5">it may</font><font color="#CCCCCC"> not call tea on a valid PK</font><font color="#E5E5E5"> on and</font>

263
00:13:33,130 --> 00:13:39,699
we cannot simply check for our for the

264
00:13:36,220 --> 00:13:42,790
adversary<font color="#E5E5E5"> that's all that's whether a</font>

265
00:13:39,699 --> 00:13:45,099
given PK is uh<font color="#E5E5E5"> it's a value or not</font>

266
00:13:42,790 --> 00:13:48,639
because it will give the adversary<font color="#E5E5E5"> a lot</font>

267
00:13:45,100 --> 00:13:51,750
of power and<font color="#CCCCCC"> and the second problem is</font>

268
00:13:48,639 --> 00:13:54,490
<font color="#E5E5E5">that how we can assimilate access to tea</font>

269
00:13:51,750 --> 00:13:58,600
what I<font color="#E5E5E5"> mean by</font><font color="#CCCCCC"> that is that</font><font color="#E5E5E5"> all we want</font>

270
00:13:54,490 --> 00:14:01,300
<font color="#CCCCCC">to prove that</font><font color="#E5E5E5"> access to tea can be</font>

271
00:13:58,600 --> 00:14:03,940
<font color="#E5E5E5">simulated by</font><font color="#CCCCCC"> having Oracle</font><font color="#E5E5E5"> access to</font>

272
00:14:01,300 --> 00:14:10,719
some safe<font color="#E5E5E5"> Oracle's that</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> do not hurt</font>

273
00:14:03,940 --> 00:14:15,639
the<font color="#E5E5E5"> CPA security of of a GE</font><font color="#CCCCCC"> and E so on</font>

274
00:14:10,720 --> 00:14:20,560
<font color="#E5E5E5">so so our approach</font><font color="#CCCCCC"> it starts</font><font color="#E5E5E5"> by first on</font>

275
00:14:15,639 --> 00:14:23,500
resolving<font color="#E5E5E5"> this problem so what we do is</font>

276
00:14:20,560 --> 00:14:27,130
<font color="#CCCCCC">that on on</font><font color="#E5E5E5"> the Oracle</font><font color="#CCCCCC"> T is going to</font>

277
00:14:23,500 --> 00:14:29,980
<font color="#E5E5E5">perform the decryption not relative</font><font color="#CCCCCC"> to</font>

278
00:14:27,130 --> 00:14:35,920
all but<font color="#CCCCCC"> all relative or to some related</font>

279
00:14:29,980 --> 00:14:40,360
oat oat<font color="#CCCCCC"> widow on</font><font color="#E5E5E5"> under which PK is</font>

280
00:14:35,920 --> 00:14:44,769
indeed on a<font color="#CCCCCC"> valid public key and also</font>

281
00:14:40,360 --> 00:14:47,470
twiddle is close<font color="#E5E5E5"> enough to all on in the</font>

282
00:14:44,769 --> 00:14:49,959
sense that if<font color="#E5E5E5"> you perform our random</font>

283
00:14:47,470 --> 00:14:52,420
encryptions<font color="#E5E5E5"> of bits</font><font color="#CCCCCC"> are ones relative to</font>

284
00:14:49,959 --> 00:14:55,239
all and the ones relief to 100 Twitter

285
00:14:52,420 --> 00:14:57,640
using on the<font color="#E5E5E5"> same Random randomness then</font>

286
00:14:55,240 --> 00:15:02,529
with high probability<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you will get</font>

287
00:14:57,640 --> 00:15:05,829
<font color="#CCCCCC">all the same output</font><font color="#E5E5E5"> and on and this will</font>

288
00:15:02,529 --> 00:15:10,980
guarantee that if if on the inputs to T

289
00:15:05,829 --> 00:15:16,300
or correctly<font color="#CCCCCC"> form</font><font color="#E5E5E5"> then we will get</font><font color="#CCCCCC"> some</font>

290
00:15:10,980 --> 00:15:18,670
the<font color="#E5E5E5"> correct on the decryption result so</font>

291
00:15:16,300 --> 00:15:23,290
<font color="#E5E5E5">now let</font><font color="#CCCCCC"> me tell</font><font color="#E5E5E5"> you that on how we can</font>

292
00:15:18,670 --> 00:15:26,560
<font color="#CCCCCC">actually form such an Oracle or twiddle</font>

293
00:15:23,290 --> 00:15:28,449
from all so what we want<font color="#E5E5E5"> to have an</font>

294
00:15:26,560 --> 00:15:32,319
Oracle<font color="#CCCCCC"> o twiddle or that has these</font>

295
00:15:28,449 --> 00:15:34,529
properties<font color="#CCCCCC"> so what I'm going to do is</font>

296
00:15:32,319 --> 00:15:34,529
that

297
00:15:38,269 --> 00:15:48,120
so what<font color="#E5E5E5"> okay so well I'm going to first</font>

298
00:15:45,360 --> 00:15:52,320
our sample on a<font color="#CCCCCC"> setup query response</font>

299
00:15:48,120 --> 00:15:56,220
pairs<font color="#CCCCCC"> rqg in offline mode mode such that</font>

300
00:15:52,320 --> 00:16:00,769
PK<font color="#E5E5E5"> is a valid public key relative to our</font>

301
00:15:56,220 --> 00:16:06,930
<font color="#CCCCCC">qg and then i will somehow superimpose</font>

302
00:16:00,769 --> 00:16:11,010
<font color="#CCCCCC">qg</font><font color="#E5E5E5"> on Angie</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so I will tell you what</font>

303
00:16:06,930 --> 00:16:14,699
I mean<font color="#E5E5E5"> by superimposing and I and I</font><font color="#CCCCCC"> have</font>

304
00:16:11,010 --> 00:16:18,060
<font color="#E5E5E5">just</font><font color="#CCCCCC"> changed the key</font><font color="#E5E5E5"> generation</font>

305
00:16:14,700 --> 00:16:20,790
algorithm<font color="#E5E5E5"> so I will keep or the</font>

306
00:16:18,060 --> 00:16:22,160
<font color="#E5E5E5">encryption algorithm are the same and I</font>

307
00:16:20,790 --> 00:16:25,469
<font color="#CCCCCC">will tell you that that's how we can</font>

308
00:16:22,160 --> 00:16:28,350
define the decryption<font color="#E5E5E5"> algorithm</font><font color="#CCCCCC"> so</font>

309
00:16:25,470 --> 00:16:30,779
<font color="#E5E5E5">what's in some so what since each</font>

310
00:16:28,350 --> 00:16:36,930
<font color="#CCCCCC">wheedle is the same as e so</font><font color="#E5E5E5"> what we will</font>

311
00:16:30,779 --> 00:16:41,300
obviously<font color="#E5E5E5"> have this property so on</font><font color="#CCCCCC"> so</font>

312
00:16:36,930 --> 00:16:42,660
what let me tell<font color="#CCCCCC"> you very</font><font color="#E5E5E5"> quickly how</font>

313
00:16:41,300 --> 00:16:44,099
superimposing works

314
00:16:42,660 --> 00:16:48,120
<font color="#E5E5E5">so what suppose that's all you want to</font>

315
00:16:44,100 --> 00:16:55,440
superimpose<font color="#CCCCCC"> instead of query on response</font>

316
00:16:48,120 --> 00:16:57,620
pairs under G so suppose<font color="#CCCCCC"> that all</font><font color="#E5E5E5"> you</font>

317
00:16:55,440 --> 00:16:57,620
want

318
00:17:07,230 --> 00:17:14,699
<font color="#CCCCCC">alright alright</font><font color="#E5E5E5"> so on so what suppose</font>

319
00:17:11,400 --> 00:17:19,589
that<font color="#E5E5E5"> you want to superimpose a</font><font color="#CCCCCC"> set of</font><font color="#E5E5E5"> G</font>

320
00:17:14,699 --> 00:17:22,949
<font color="#E5E5E5">type query answer pers unfunctional</font><font color="#CCCCCC"> so</font>

321
00:17:19,589 --> 00:17:30,570
we define the function<font color="#CCCCCC"> G twiddle</font><font color="#E5E5E5"> to</font>

322
00:17:22,949 --> 00:17:35,210
behave as a as a<font color="#CCCCCC"> qg if ah if I if on the</font>

323
00:17:30,570 --> 00:17:39,809
given<font color="#E5E5E5"> SK</font><font color="#CCCCCC"> it's one of these on SK ice and</font>

324
00:17:35,210 --> 00:17:49,110
and otherwise<font color="#CCCCCC"> ah ah we</font><font color="#E5E5E5"> will let it</font>

325
00:17:39,809 --> 00:17:52,350
behave as G<font color="#E5E5E5"> okay so now on I have told</font>

326
00:17:49,110 --> 00:17:58,678
<font color="#CCCCCC">you that</font><font color="#E5E5E5"> how can i define the work alot</font>

327
00:17:52,350 --> 00:18:01,469
widow<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> so now I can give a more</font>

328
00:17:58,679 --> 00:18:03,870
general picture<font color="#E5E5E5"> of</font><font color="#CCCCCC"> on the</font><font color="#E5E5E5"> Oracle</font><font color="#CCCCCC"> T</font><font color="#E5E5E5"> so</font>

329
00:18:01,470 --> 00:18:06,750
what we first sample a set of query

330
00:18:03,870 --> 00:18:10,290
response parents such that all relative

331
00:18:06,750 --> 00:18:13,350
on to this set of PK is a it's a valid

332
00:18:10,290 --> 00:18:16,950
<font color="#CCCCCC">public key and then we</font><font color="#E5E5E5"> superimpose our</font>

333
00:18:13,350 --> 00:18:22,080
this set on the basic<font color="#E5E5E5"> oracle</font><font color="#CCCCCC"> o or to get</font>

334
00:18:16,950 --> 00:18:25,520
on<font color="#E5E5E5"> o twiddle and then we and then</font><font color="#CCCCCC"> we</font>

335
00:18:22,080 --> 00:18:29,790
perform decryption relative<font color="#E5E5E5"> 202 it all</font>

336
00:18:25,520 --> 00:18:33,210
<font color="#E5E5E5">to get s and then on on on and then at</font>

337
00:18:29,790 --> 00:18:34,740
the end we are<font color="#E5E5E5"> going to do an additional</font>

338
00:18:33,210 --> 00:18:37,559
check which will make sure that's<font color="#E5E5E5"> how</font>

339
00:18:34,740 --> 00:18:40,410
the<font color="#E5E5E5"> Oracle</font><font color="#CCCCCC"> T is</font><font color="#E5E5E5"> simulate able on their</font>

340
00:18:37,559 --> 00:18:43,200
son<font color="#CCCCCC"> safe Oracle's and</font><font color="#E5E5E5"> don't you idea</font>

341
00:18:40,410 --> 00:18:47,940
<font color="#CCCCCC">it's basically say it's basically that</font>

342
00:18:43,200 --> 00:18:50,400
all<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we're going</font><font color="#E5E5E5"> to run the key</font>

343
00:18:47,940 --> 00:18:55,110
<font color="#E5E5E5">generation algorithm under s are to see</font>

344
00:18:50,400 --> 00:18:57,510
that our whether we get saw<font color="#CCCCCC"> or PK as an</font>

345
00:18:55,110 --> 00:18:59,729
output and then we will<font color="#E5E5E5"> check that or</font>

346
00:18:57,510 --> 00:19:03,750
whether<font color="#E5E5E5"> all valid</font><font color="#CCCCCC"> published keys that</font>

347
00:18:59,730 --> 00:19:09,380
are on and embedded in the set<font color="#CCCCCC"> or QJ are</font>

348
00:19:03,750 --> 00:19:12,630
going to appear during this on execution

349
00:19:09,380 --> 00:19:17,730
so and then we'll have<font color="#CCCCCC"> two terms that</font>

350
00:19:12,630 --> 00:19:20,530
<font color="#CCCCCC">will</font><font color="#E5E5E5"> show that</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Oracle T it's</font>

351
00:19:17,730 --> 00:19:22,530
useful for for

352
00:19:20,530 --> 00:19:22,530
Oh

353
00:20:45,870 --> 00:21:06,639
hey thanks<font color="#CCCCCC"> very much</font>

354
00:20:47,770 --> 00:21:13,990
we have time for questions right yeah<font color="#E5E5E5"> so</font>

355
00:21:06,640 --> 00:21:20,230
<font color="#E5E5E5">well yeah so what we</font><font color="#CCCCCC"> tried to before</font>

356
00:21:13,990 --> 00:21:22,240
<font color="#E5E5E5">right standard</font><font color="#CCCCCC"> and if I want</font><font color="#E5E5E5"> to tell you</font>

357
00:21:20,230 --> 00:21:27,520
how quickly<font color="#E5E5E5"> like that's what you need</font><font color="#CCCCCC"> to</font>

358
00:21:22,240 --> 00:21:30,820
see<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> all we want to be able</font><font color="#CCCCCC"> to</font>

359
00:21:27,520 --> 00:21:33,870
regenerate<font color="#E5E5E5"> the public key on there they</font>

360
00:21:30,820 --> 00:21:35,770
recovered our public key under the

361
00:21:33,870 --> 00:21:39,449
<font color="#CCCCCC">recovered information and though you</font>

362
00:21:35,770 --> 00:21:41,679
cannot in general<font color="#E5E5E5"> go from the secret key</font>

363
00:21:39,450 --> 00:21:43,210
<font color="#CCCCCC">of an encryption scheme</font><font color="#E5E5E5"> to its now</font>

364
00:21:41,679 --> 00:21:44,890
corresponding public key but<font color="#CCCCCC"> you can do</font>

365
00:21:43,210 --> 00:21:49,299
<font color="#E5E5E5">it if you</font><font color="#CCCCCC"> have on the underlying seat</font>

366
00:21:44,890 --> 00:21:50,529
<font color="#E5E5E5">and that</font><font color="#CCCCCC"> is a main reason</font><font color="#E5E5E5"> informally</font>

367
00:21:49,299 --> 00:21:52,720
speaking at<font color="#CCCCCC"> all while you were</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to</font>

368
00:21:50,529 --> 00:21:54,279
do it for<font color="#E5E5E5"> seats so would be sufficient</font>

369
00:21:52,720 --> 00:21:55,630
just as you to assume<font color="#CCCCCC"> that you can</font>

370
00:21:54,279 --> 00:21:59,970
generate the public key from<font color="#CCCCCC"> the secret</font>

371
00:21:55,630 --> 00:21:59,970
<font color="#E5E5E5">key yeah something like that yeah</font>

