1
00:00:00,030 --> 00:00:06,390
right<font color="#E5E5E5"> thanks everyone for being here</font><font color="#CCCCCC"> so</font>

2
00:00:04,440 --> 00:00:08,790
the name of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> game is learning with</font>

3
00:00:06,390 --> 00:00:12,330
arrows<font color="#E5E5E5"> and lo and behold here is once</font>

4
00:00:08,790 --> 00:00:13,919
again<font color="#CCCCCC"> learning with arrows</font><font color="#E5E5E5"> so learning</font>

5
00:00:12,330 --> 00:00:17,609
with arrows goes back to the work of

6
00:00:13,920 --> 00:00:20,850
<font color="#E5E5E5">already</font><font color="#CCCCCC"> beg F</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> you're given is a</font>

7
00:00:17,609 --> 00:00:24,960
tuple<font color="#CCCCCC"> a C so where a</font><font color="#E5E5E5"> is a matrix</font><font color="#CCCCCC"> M by n</font>

8
00:00:20,850 --> 00:00:27,660
mod Q and your job as the<font color="#E5E5E5"> adversary is</font>

9
00:00:24,960 --> 00:00:30,779
the<font color="#E5E5E5"> site of</font><font color="#CCCCCC"> a C</font><font color="#E5E5E5"> is either uniform so C</font>

10
00:00:27,660 --> 00:00:33,149
is also<font color="#E5E5E5"> a uniform vector or if C was</font>

11
00:00:30,779 --> 00:00:35,700
formed like shown on the slide<font color="#CCCCCC"> so you</font>

12
00:00:33,149 --> 00:00:38,010
<font color="#E5E5E5">have a times S Plus e where e is small</font>

13
00:00:35,700 --> 00:00:39,960
<font color="#E5E5E5">and in this formulation which is the</font>

14
00:00:38,010 --> 00:00:42,239
<font color="#E5E5E5">old-school formulation kind of s is</font>

15
00:00:39,960 --> 00:00:44,760
uniform but<font color="#E5E5E5"> as you might know there's a</font>

16
00:00:42,239 --> 00:00:46,589
normal<font color="#E5E5E5"> form of</font><font color="#CCCCCC"> lwe where you pick s also</font>

17
00:00:44,760 --> 00:00:48,390
<font color="#E5E5E5">from the same distribution as the error</font>

18
00:00:46,590 --> 00:00:53,430
e so you<font color="#E5E5E5"> can also think of it</font><font color="#CCCCCC"> as</font>

19
00:00:48,390 --> 00:00:55,199
somewhat small<font color="#CCCCCC"> okay so a lobby is kind</font>

20
00:00:53,430 --> 00:00:56,550
of<font color="#E5E5E5"> everywhere but for the purpose of</font>

21
00:00:55,199 --> 00:00:59,730
this talk<font color="#E5E5E5"> I only care about two</font>

22
00:00:56,550 --> 00:01:03,629
applications<font color="#CCCCCC"> in particular you can build</font>

23
00:00:59,730 --> 00:01:06,210
homomorphic encryption from<font color="#CCCCCC"> lwe so for</font>

24
00:01:03,629 --> 00:01:08,539
example the<font color="#CCCCCC"> bgv scheme which</font><font color="#E5E5E5"> is</font>

25
00:01:06,210 --> 00:01:11,759
implemented in<font color="#E5E5E5"> h e lip which is ibm's</font>

26
00:01:08,540 --> 00:01:15,479
<font color="#E5E5E5">homomorphic encryption library goes down</font>

27
00:01:11,760 --> 00:01:17,790
to lob e and the FV scheme which is

28
00:01:15,479 --> 00:01:19,740
<font color="#E5E5E5">implemented in</font><font color="#CCCCCC"> co version 2 which is</font>

29
00:01:17,790 --> 00:01:23,159
<font color="#E5E5E5">microsoft's on</font><font color="#CCCCCC"> more encryption library</font>

30
00:01:19,740 --> 00:01:26,100
<font color="#E5E5E5">also relies on the hardness</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> l ee</font>

31
00:01:23,159 --> 00:01:27,780
problem right<font color="#E5E5E5"> so you want to kind of</font>

32
00:01:26,100 --> 00:01:30,960
look at<font color="#CCCCCC"> Alawis if you want to convince</font>

33
00:01:27,780 --> 00:01:34,470
<font color="#CCCCCC">yourself that these libraries are secure</font>

34
00:01:30,960 --> 00:01:36,179
so<font color="#CCCCCC"> what these libraries do and many</font>

35
00:01:34,470 --> 00:01:37,979
other<font color="#E5E5E5"> construction come talk if you do</font>

36
00:01:36,180 --> 00:01:39,689
is they don't pick the secret<font color="#E5E5E5"> as I've</font>

37
00:01:37,979 --> 00:01:41,520
just told you<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right so the secret is</font>

38
00:01:39,689 --> 00:01:43,079
neither uniformly random nor does<font color="#CCCCCC"> it</font>

39
00:01:41,520 --> 00:01:45,479
follow the<font color="#E5E5E5"> normal form are either error</font>

40
00:01:43,079 --> 00:01:48,329
<font color="#CCCCCC">distribution</font><font color="#E5E5E5"> in particular what H</font>

41
00:01:45,479 --> 00:01:50,670
<font color="#CCCCCC">ellipsis</font><font color="#E5E5E5"> it chooses</font><font color="#CCCCCC"> the secret such that</font>

42
00:01:48,329 --> 00:01:52,829
you have<font color="#E5E5E5"> to guarantee typically you can</font>

43
00:01:50,670 --> 00:01:54,840
you can can change<font color="#E5E5E5"> that but by</font><font color="#CCCCCC"> default</font>

44
00:01:52,829 --> 00:01:57,419
<font color="#CCCCCC">or what</font><font color="#E5E5E5"> do you kind of encourage to do</font>

45
00:01:54,840 --> 00:01:59,670
shall we<font color="#E5E5E5"> product that is there 64</font>

46
00:01:57,420 --> 00:02:02,280
entries which<font color="#E5E5E5"> are nonzero</font><font color="#CCCCCC"> and so there -</font>

47
00:01:59,670 --> 00:02:04,259
<font color="#E5E5E5">101</font><font color="#CCCCCC"> and every other entry</font><font color="#E5E5E5"> if in</font>

48
00:02:02,280 --> 00:02:08,699
dimension<font color="#E5E5E5"> n regardless of dimension n</font>

49
00:02:04,259 --> 00:02:11,129
will be<font color="#E5E5E5"> 0 so it's very sparse seal in</font>

50
00:02:08,699 --> 00:02:13,269
contrast<font color="#CCCCCC"> pics</font><font color="#E5E5E5"> the secret uniformly at</font>

51
00:02:11,129 --> 00:02:15,810
random from the<font color="#E5E5E5"> set minus 1 0 and</font>

52
00:02:13,270 --> 00:02:19,090
right so it's not<font color="#CCCCCC"> spaz</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> it's this</font>

53
00:02:15,810 --> 00:02:22,090
<font color="#E5E5E5">short and so the</font><font color="#CCCCCC"> natural question</font><font color="#E5E5E5"> to ask</font>

54
00:02:19,090 --> 00:02:24,819
<font color="#E5E5E5">at this point is how much security does</font>

55
00:02:22,090 --> 00:02:26,650
this cost<font color="#E5E5E5"> right so we have this elder B</font>

56
00:02:24,819 --> 00:02:28,958
<font color="#E5E5E5">problem we have some understanding</font><font color="#CCCCCC"> of</font>

57
00:02:26,650 --> 00:02:31,120
<font color="#CCCCCC">how hard is it to solve and</font><font color="#E5E5E5"> then kind of</font>

58
00:02:28,959 --> 00:02:33,640
here we<font color="#E5E5E5"> have an adaptation wait a</font>

59
00:02:31,120 --> 00:02:37,840
variant of<font color="#E5E5E5"> it and natural question what</font>

60
00:02:33,640 --> 00:02:40,630
does<font color="#E5E5E5"> it cost you any security</font><font color="#CCCCCC"> or not if</font>

61
00:02:37,840 --> 00:02:42,100
you<font color="#E5E5E5"> ask theory so if you want to have</font>

62
00:02:40,630 --> 00:02:44,440
some strong guarantees and you want to

63
00:02:42,100 --> 00:02:46,150
look at reductions<font color="#E5E5E5"> then the theory tells</font>

64
00:02:44,440 --> 00:02:48,730
<font color="#E5E5E5">you actually</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> order to achieve the</font>

65
00:02:46,150 --> 00:02:50,230
same<font color="#CCCCCC"> security for your binary secret</font><font color="#E5E5E5"> so</font>

66
00:02:48,730 --> 00:02:52,750
that's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> even sparse it's just a</font>

67
00:02:50,230 --> 00:02:54,970
binary secret then you have to extend

68
00:02:52,750 --> 00:02:56,620
<font color="#E5E5E5">the dimension to n</font><font color="#CCCCCC"> log Q right so if</font>

69
00:02:54,970 --> 00:02:59,050
quite<font color="#E5E5E5"> a bit of blow-up in the dimension</font>

70
00:02:56,620 --> 00:03:00,790
of<font color="#E5E5E5"> your</font><font color="#CCCCCC"> other B problem</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> other</font>

71
00:02:59,050 --> 00:03:03,130
hand if you<font color="#CCCCCC"> look at</font><font color="#E5E5E5"> actual constructions</font>

72
00:03:00,790 --> 00:03:05,230
<font color="#E5E5E5">then this issue is typically simply</font>

73
00:03:03,130 --> 00:03:07,150
ignored<font color="#E5E5E5"> right so normally kind of</font>

74
00:03:05,230 --> 00:03:10,230
security<font color="#CCCCCC"> analyzed</font><font color="#E5E5E5"> precedes by saying</font>

75
00:03:07,150 --> 00:03:12,819
we're<font color="#E5E5E5"> going to pretend like</font><font color="#CCCCCC"> this is a</font>

76
00:03:10,230 --> 00:03:14,530
<font color="#CCCCCC">Adobe normal form and then we're</font><font color="#E5E5E5"> going</font>

77
00:03:12,819 --> 00:03:16,268
to<font color="#E5E5E5"> kind of choose parameters based on</font>

78
00:03:14,530 --> 00:03:18,610
that because<font color="#E5E5E5"> really you can't do much</font>

79
00:03:16,269 --> 00:03:23,320
<font color="#E5E5E5">better with the binary secrets</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> and</font>

80
00:03:18,610 --> 00:03:25,360
<font color="#E5E5E5">so again question which one is it okay</font>

81
00:03:23,320 --> 00:03:26,890
so let's look at how<font color="#E5E5E5"> you would kind of</font>

82
00:03:25,360 --> 00:03:30,220
pick your parameters what kind<font color="#E5E5E5"> of</font>

83
00:03:26,890 --> 00:03:33,700
attacks you would consider<font color="#E5E5E5"> you can</font>

84
00:03:30,220 --> 00:03:35,890
roughly for these kind of schemes where

85
00:03:33,700 --> 00:03:38,290
the dimension is very<font color="#E5E5E5"> large it really</font>

86
00:03:35,890 --> 00:03:39,880
boils down to<font color="#E5E5E5"> lattice attacks so</font>

87
00:03:38,290 --> 00:03:42,880
<font color="#E5E5E5">combinatory attacks don't really play a</font>

88
00:03:39,880 --> 00:03:44,950
role<font color="#E5E5E5"> in this this world so you can</font>

89
00:03:42,880 --> 00:03:47,230
either mount a primal attack<font color="#E5E5E5"> which means</font>

90
00:03:44,950 --> 00:03:50,130
<font color="#CCCCCC">you</font><font color="#E5E5E5"> find some linear combinations of the</font>

91
00:03:47,230 --> 00:03:52,690
columns of a<font color="#E5E5E5"> that gets you close to C</font>

92
00:03:50,130 --> 00:03:54,940
and then so you're solving<font color="#E5E5E5"> the bounded</font>

93
00:03:52,690 --> 00:03:57,010
distance decoding problem<font color="#CCCCCC"> as mentioned</font>

94
00:03:54,940 --> 00:03:58,630
in the<font color="#E5E5E5"> previous talk the way you can do</font>

95
00:03:57,010 --> 00:04:01,929
this as<font color="#CCCCCC"> either</font><font color="#E5E5E5"> you run some enumeration</font>

96
00:03:58,630 --> 00:04:04,329
<font color="#E5E5E5">has just discussed</font><font color="#CCCCCC"> or you embed your</font>

97
00:04:01,930 --> 00:04:05,680
<font color="#CCCCCC">problem</font><font color="#E5E5E5"> into another lattice and then</font>

98
00:04:04,329 --> 00:04:08,410
solve some unique shortest<font color="#E5E5E5"> vector</font>

99
00:04:05,680 --> 00:04:10,090
<font color="#E5E5E5">problem other approach you solve</font><font color="#CCCCCC"> the</font>

100
00:04:08,410 --> 00:04:12,940
short integer solutions problem also

101
00:04:10,090 --> 00:04:17,470
<font color="#E5E5E5">previously mentioned so you find a short</font>

102
00:04:12,940 --> 00:04:19,418
<font color="#E5E5E5">W such a</font><font color="#CCCCCC"> W times</font><font color="#E5E5E5"> a is 0 mod Q and then</font>

103
00:04:17,470 --> 00:04:23,530
when you take<font color="#E5E5E5"> the inner product</font><font color="#CCCCCC"> of your</font>

104
00:04:19,418 --> 00:04:24,940
W with C and<font color="#E5E5E5"> C was indeed formed as I</font>

105
00:04:23,530 --> 00:04:27,159
shown you<font color="#E5E5E5"> a at times</font>

106
00:04:24,940 --> 00:04:30,580
<font color="#CCCCCC">as plus</font><font color="#E5E5E5"> e then you get an inner product</font>

107
00:04:27,160 --> 00:04:32,440
of<font color="#CCCCCC"> w and e w short</font><font color="#E5E5E5"> e is short in a</font>

108
00:04:30,580 --> 00:04:34,390
product<font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot because in cryptography</font>

109
00:04:32,440 --> 00:04:40,860
<font color="#E5E5E5">inner product of two short things is</font>

110
00:04:34,390 --> 00:04:45,430
<font color="#E5E5E5">always short</font><font color="#CCCCCC"> Thanks</font>

111
00:04:40,860 --> 00:04:47,830
<font color="#CCCCCC">okay so how do you execute that in more</font>

112
00:04:45,430 --> 00:04:51,910
detail<font color="#CCCCCC"> you run some lattice reduction</font>

113
00:04:47,830 --> 00:04:53,109
and in this talk<font color="#CCCCCC"> I'm only kind of going</font>

114
00:04:51,910 --> 00:04:56,200
to take a very high<font color="#CCCCCC"> level view of</font>

115
00:04:53,110 --> 00:04:58,750
lattice reduction<font color="#CCCCCC"> you you run lattice</font>

116
00:04:56,200 --> 00:05:01,000
reduction on this dual basis and then

117
00:04:58,750 --> 00:05:04,120
you get<font color="#CCCCCC"> a vector</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> has</font><font color="#E5E5E5"> length Delta</font>

118
00:05:01,000 --> 00:05:06,370
naught to<font color="#CCCCCC"> the M times the volume of</font><font color="#E5E5E5"> the</font>

119
00:05:04,120 --> 00:05:07,930
<font color="#E5E5E5">lattice</font><font color="#CCCCCC"> to power 1</font><font color="#E5E5E5"> over m and the volume</font>

120
00:05:06,370 --> 00:05:10,060
of<font color="#E5E5E5"> the lattices that we construct here</font>

121
00:05:07,930 --> 00:05:13,060
<font color="#E5E5E5">is Q to the N so you end up with this</font>

122
00:05:10,060 --> 00:05:15,400
formula<font color="#CCCCCC"> right so you construct</font><font color="#E5E5E5"> this tool</font>

123
00:05:13,060 --> 00:05:17,350
to basis for the lattice<font color="#CCCCCC"> you run your</font>

124
00:05:15,400 --> 00:05:19,450
lattice reduction algorithm<font color="#E5E5E5"> and then you</font>

125
00:05:17,350 --> 00:05:21,730
check if<font color="#E5E5E5"> these inner</font><font color="#CCCCCC"> products are small</font>

126
00:05:19,450 --> 00:05:23,620
and then<font color="#CCCCCC"> you will conclude this</font><font color="#E5E5E5"> looks</font>

127
00:05:21,730 --> 00:05:25,840
like<font color="#CCCCCC"> an lov</font><font color="#E5E5E5"> instance or</font><font color="#CCCCCC"> you conclude</font>

128
00:05:23,620 --> 00:05:27,400
otherwise and this<font color="#E5E5E5"> Delta</font><font color="#CCCCCC"> naught depends</font>

129
00:05:25,840 --> 00:05:29,770
on the lattice reduction algorithm so

130
00:05:27,400 --> 00:05:31,000
<font color="#E5E5E5">the better the higher the block size the</font>

131
00:05:29,770 --> 00:05:33,039
more expensive the algorithm the

132
00:05:31,000 --> 00:05:38,830
smallest<font color="#CCCCCC"> Delta naught</font><font color="#E5E5E5"> and this small</font><font color="#CCCCCC"> of</font>

133
00:05:33,040 --> 00:05:41,169
this vector<font color="#CCCCCC"> should be right okay so as</font>

134
00:05:38,830 --> 00:05:42,940
I've just described<font color="#E5E5E5"> you you try to find</font>

135
00:05:41,169 --> 00:05:44,919
some short<font color="#E5E5E5"> V and then you take the inner</font>

136
00:05:42,940 --> 00:05:47,169
product<font color="#E5E5E5"> of V and E and you check that it</font>

137
00:05:44,919 --> 00:05:49,240
looks<font color="#E5E5E5"> very much not like</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> uniform</font>

138
00:05:47,169 --> 00:05:51,510
distribution<font color="#CCCCCC"> so there's clearly</font>

139
00:05:49,240 --> 00:05:54,190
<font color="#CCCCCC">trade-off here</font><font color="#E5E5E5"> right the shorter your V</font>

140
00:05:51,510 --> 00:05:57,520
the better you<font color="#E5E5E5"> can distinguish the end</font>

141
00:05:54,190 --> 00:05:59,350
in a<font color="#E5E5E5"> product from</font><font color="#CCCCCC"> uniform</font><font color="#E5E5E5"> but also as</font>

142
00:05:57,520 --> 00:06:01,359
I've just mentioned<font color="#E5E5E5"> the harder it is to</font>

143
00:05:59,350 --> 00:06:02,650
kind<font color="#E5E5E5"> of actually get something this</font>

144
00:06:01,360 --> 00:06:04,360
<font color="#CCCCCC">small right so there's a trade-off</font>

145
00:06:02,650 --> 00:06:06,849
between running<font color="#E5E5E5"> time and distinguishing</font>

146
00:06:04,360 --> 00:06:08,169
advantage<font color="#E5E5E5"> and on the slide where I'm</font>

147
00:06:06,850 --> 00:06:10,540
plotting you for some particular

148
00:06:08,169 --> 00:06:12,940
instance<font color="#E5E5E5"> under some particular because</font>

149
00:06:10,540 --> 00:06:14,650
<font color="#CCCCCC">that cost model</font><font color="#E5E5E5"> if you pick your</font>

150
00:06:12,940 --> 00:06:16,780
favorite<font color="#CCCCCC"> cost model it wouldn't look too</font>

151
00:06:14,650 --> 00:06:18,400
much<font color="#CCCCCC"> different then you see if I just</font>

152
00:06:16,780 --> 00:06:21,460
<font color="#CCCCCC">Inc decrease the distinguishing</font>

153
00:06:18,400 --> 00:06:23,919
advantage to say<font color="#E5E5E5"> one over</font><font color="#CCCCCC"> a thousand</font>

154
00:06:21,460 --> 00:06:25,840
then my cost in because<font color="#E5E5E5"> that drops</font>

155
00:06:23,919 --> 00:06:27,430
rapidly<font color="#CCCCCC"> right so for the</font><font color="#E5E5E5"> first kind of</font>

156
00:06:25,840 --> 00:06:29,380
like<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to maybe to the minus ten</font>

157
00:06:27,430 --> 00:06:30,880
<font color="#E5E5E5">kind of</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> been officially going maybe</font>

158
00:06:29,380 --> 00:06:32,230
to minus<font color="#CCCCCC"> thirty kind of</font><font color="#E5E5E5"> doesn't really</font>

159
00:06:30,880 --> 00:06:35,800
<font color="#E5E5E5">make much</font><font color="#CCCCCC"> of a</font>

160
00:06:32,230 --> 00:06:37,450
<font color="#CCCCCC">isn't give me much of</font><font color="#E5E5E5"> an advantage</font><font color="#CCCCCC"> right</font>

161
00:06:35,800 --> 00:06:38,800
and of course<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of you're kind of</font>

162
00:06:37,450 --> 00:06:40,210
comparing<font color="#CCCCCC"> two strange thing</font>

163
00:06:38,800 --> 00:06:42,370
right so two<font color="#E5E5E5"> algorithms that have</font>

164
00:06:40,210 --> 00:06:44,888
different success probabilities<font color="#E5E5E5"> so maybe</font>

165
00:06:42,370 --> 00:06:46,810
want to<font color="#E5E5E5"> normalize right and so how would</font>

166
00:06:44,889 --> 00:06:48,940
you normalize is<font color="#E5E5E5"> there like well okay I</font>

167
00:06:46,810 --> 00:06:50,770
can<font color="#E5E5E5"> solve with low advantage for each of</font>

168
00:06:48,940 --> 00:06:52,960
<font color="#CCCCCC">my instance then I run my experiments</font>

169
00:06:50,770 --> 00:06:54,580
<font color="#CCCCCC">efficiently often</font><font color="#E5E5E5"> to the majority vote</font>

170
00:06:52,960 --> 00:06:57,520
<font color="#CCCCCC">to still have some</font><font color="#E5E5E5"> constant</font>

171
00:06:54,580 --> 00:06:59,289
distinguishing advantage we are having a

172
00:06:57,520 --> 00:07:01,469
decision problem<font color="#E5E5E5"> so you have to run this</font>

173
00:06:59,289 --> 00:07:03,909
roughly<font color="#E5E5E5"> one over epsilon</font><font color="#CCCCCC"> squared times</font>

174
00:07:01,470 --> 00:07:04,810
<font color="#E5E5E5">and then you end up with the plot that</font>

175
00:07:03,909 --> 00:07:07,389
looks<font color="#E5E5E5"> something like that</font>

176
00:07:04,810 --> 00:07:09,009
and indeed kind of in each instance you

177
00:07:07,389 --> 00:07:11,379
want<font color="#E5E5E5"> to target maybe something to the</font>

178
00:07:09,009 --> 00:07:15,069
minus<font color="#E5E5E5"> ten as your individual</font>

179
00:07:11,379 --> 00:07:20,469
distinguishing advantage<font color="#CCCCCC"> right okay</font>

180
00:07:15,069 --> 00:07:23,139
<font color="#E5E5E5">brief word from our sponsor okay</font><font color="#CCCCCC"> so the</font>

181
00:07:20,469 --> 00:07:24,909
discussion<font color="#CCCCCC"> so far</font><font color="#E5E5E5"> was was premised on</font>

182
00:07:23,139 --> 00:07:27,879
and<font color="#CCCCCC"> there the plot that I've just</font><font color="#E5E5E5"> shown</font>

183
00:07:24,909 --> 00:07:29,800
you<font color="#E5E5E5"> was premised</font><font color="#CCCCCC"> on the assumption that</font>

184
00:07:27,879 --> 00:07:32,289
if you want to<font color="#E5E5E5"> have one over epsilon</font>

185
00:07:29,800 --> 00:07:34,000
squared short vectors<font color="#E5E5E5"> you have to run</font>

186
00:07:32,289 --> 00:07:36,250
because<font color="#E5E5E5"> that one over epsilon squared</font>

187
00:07:34,000 --> 00:07:39,520
times<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> but this is</font><font color="#CCCCCC"> not</font>

188
00:07:36,250 --> 00:07:41,259
necessarily<font color="#E5E5E5"> true because</font><font color="#CCCCCC"> right the kind</font>

189
00:07:39,520 --> 00:07:44,109
<font color="#CCCCCC">of outline that I gave</font><font color="#E5E5E5"> you is like take</font>

190
00:07:41,259 --> 00:07:45,729
a<font color="#E5E5E5"> random basis kind of</font><font color="#CCCCCC"> D reduction take</font>

191
00:07:44,110 --> 00:07:47,949
the shortest vector<font color="#E5E5E5"> that you found in</font>

192
00:07:45,729 --> 00:07:50,110
your<font color="#E5E5E5"> new reduced basis and check if the</font>

193
00:07:47,949 --> 00:07:51,819
inner product<font color="#CCCCCC"> is short but after we've</font>

194
00:07:50,110 --> 00:07:53,740
done<font color="#CCCCCC"> all this kind</font><font color="#E5E5E5"> of hard work of</font>

195
00:07:51,819 --> 00:07:56,199
<font color="#CCCCCC">getting a short basis why don't we</font><font color="#E5E5E5"> kind</font>

196
00:07:53,740 --> 00:07:58,830
of start<font color="#CCCCCC"> reran demising there</font><font color="#E5E5E5"> and this</font>

197
00:07:56,199 --> 00:08:01,479
<font color="#E5E5E5">is indeed actually what what we do in</font>

198
00:07:58,830 --> 00:08:02,979
lattice reduction libraries when we do

199
00:08:01,479 --> 00:08:04,990
this extreme pruning and<font color="#E5E5E5"> we want to</font>

200
00:08:02,979 --> 00:08:07,029
<font color="#CCCCCC">reran demise you want to</font><font color="#E5E5E5"> randomize in a</font>

201
00:08:04,990 --> 00:08:09,219
way it doesn't<font color="#E5E5E5"> completely destroy all</font>

202
00:08:07,029 --> 00:08:11,740
the hard work you've done<font color="#E5E5E5"> right so a</font>

203
00:08:09,219 --> 00:08:14,379
very simple heuristic approach is to say

204
00:08:11,740 --> 00:08:16,930
let's<font color="#E5E5E5"> take my basis</font><font color="#CCCCCC"> L let's run</font><font color="#E5E5E5"> that</font>

205
00:08:14,379 --> 00:08:19,029
reduction<font color="#E5E5E5"> in block size beta and then</font>

206
00:08:16,930 --> 00:08:20,919
instead of kind<font color="#E5E5E5"> of starting from scratch</font>

207
00:08:19,029 --> 00:08:23,949
each time<font color="#E5E5E5"> I'm starting from this already</font>

208
00:08:20,919 --> 00:08:25,628
reduced<font color="#E5E5E5"> basis I'm going to do some light</font>

209
00:08:23,949 --> 00:08:27,849
we randomized ation<font color="#E5E5E5"> right some sparse</font>

210
00:08:25,629 --> 00:08:30,340
more<font color="#E5E5E5"> unique modular matrix that we</font>

211
00:08:27,849 --> 00:08:32,110
randomized my<font color="#CCCCCC"> basis</font><font color="#E5E5E5"> and then I run some</font>

212
00:08:30,340 --> 00:08:34,390
big has that with some beta prime which

213
00:08:32,110 --> 00:08:36,969
is<font color="#CCCCCC"> may</font><font color="#E5E5E5"> be smaller than Peter</font><font color="#CCCCCC"> and I still</font>

214
00:08:34,390 --> 00:08:39,069
<font color="#CCCCCC">get something out</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> okay right</font><font color="#E5E5E5"> and</font>

215
00:08:36,969 --> 00:08:40,930
this whole<font color="#E5E5E5"> thing is</font><font color="#CCCCCC"> very heuristic in</font>

216
00:08:39,070 --> 00:08:43,449
very<font color="#CCCCCC"> handy be all I have to</font><font color="#E5E5E5"> offer</font><font color="#CCCCCC"> you</font>

217
00:08:40,929 --> 00:08:46,359
some experimental evidence<font color="#E5E5E5"> in blocks are</font>

218
00:08:43,448 --> 00:08:48,279
60 or 70 that tells us<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> this is</font>

219
00:08:46,360 --> 00:08:50,199
this is more efficient than just doing

220
00:08:48,279 --> 00:08:52,520
<font color="#E5E5E5">it from scratch</font><font color="#CCCCCC"> and there</font><font color="#E5E5E5"> clearly many</font>

221
00:08:50,199 --> 00:08:54,260
questions of kind<font color="#E5E5E5"> of like how</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> does it</font>

222
00:08:52,520 --> 00:08:55,970
you know how does<font color="#CCCCCC"> it really behave and</font>

223
00:08:54,260 --> 00:08:57,950
can you really argue that you get

224
00:08:55,970 --> 00:09:00,320
<font color="#E5E5E5">something that's sufficiently random but</font>

225
00:08:57,950 --> 00:09:02,630
we can give you<font color="#E5E5E5"> some empirical evidence</font>

226
00:09:00,320 --> 00:09:05,240
<font color="#CCCCCC">that</font><font color="#E5E5E5"> it seems</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be okay</font><font color="#CCCCCC"> at least</font><font color="#E5E5E5"> for</font>

227
00:09:02,630 --> 00:09:07,070
the instances<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we looked at okay so</font>

228
00:09:05,240 --> 00:09:08,510
<font color="#E5E5E5">that brings down the cost somewhat right</font>

229
00:09:07,070 --> 00:09:10,220
so<font color="#E5E5E5"> instead of running</font><font color="#CCCCCC"> one over epsilon</font>

230
00:09:08,510 --> 00:09:12,319
squared because that instance in block

231
00:09:10,220 --> 00:09:16,430
size beta you only run them in smaller

232
00:09:12,320 --> 00:09:18,529
block sizes<font color="#CCCCCC"> all right moving on</font><font color="#E5E5E5"> now this</font>

233
00:09:16,430 --> 00:09:19,910
because<font color="#CCCCCC"> boy I've told</font><font color="#E5E5E5"> you so far</font><font color="#CCCCCC"> really</font>

234
00:09:18,529 --> 00:09:21,529
<font color="#CCCCCC">has</font><font color="#E5E5E5"> nothing to do with small secrets</font>

235
00:09:19,910 --> 00:09:24,020
<font color="#E5E5E5">right</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> promised you small</font><font color="#CCCCCC"> secrets so</font>

236
00:09:21,529 --> 00:09:26,149
let's<font color="#E5E5E5"> talk about some more secrets so</font>

237
00:09:24,020 --> 00:09:28,910
the first kind<font color="#E5E5E5"> of observation is well</font>

238
00:09:26,149 --> 00:09:31,459
actually we<font color="#E5E5E5"> don't need V times a is</font><font color="#CCCCCC"> zero</font>

239
00:09:28,910 --> 00:09:34,040
<font color="#E5E5E5">right because the secret is also small</font>

240
00:09:31,459 --> 00:09:37,489
<font color="#E5E5E5">it's actually enough to find some V</font>

241
00:09:34,040 --> 00:09:39,260
times<font color="#E5E5E5"> a such that W</font><font color="#CCCCCC"> is also</font><font color="#E5E5E5"> small right</font>

242
00:09:37,490 --> 00:09:43,520
so if you<font color="#E5E5E5"> look at the normal form of the</font>

243
00:09:39,260 --> 00:09:46,580
dual attack<font color="#CCCCCC"> then you have some</font><font color="#E5E5E5"> x and y x</font>

244
00:09:43,520 --> 00:09:48,199
times a is<font color="#E5E5E5"> congruent to Y and then if</font>

245
00:09:46,580 --> 00:09:49,550
you have something show up there and you

246
00:09:48,200 --> 00:09:51,890
<font color="#CCCCCC">multiply through you get an inner</font>

247
00:09:49,550 --> 00:09:54,680
product<font color="#E5E5E5"> of W with</font><font color="#CCCCCC"> S which is</font><font color="#E5E5E5"> short an</font>

248
00:09:51,890 --> 00:09:57,640
inner<font color="#E5E5E5"> product of V and E both of which</font>

249
00:09:54,680 --> 00:09:59,689
are<font color="#E5E5E5"> also short right so that's great</font><font color="#CCCCCC"> and</font>

250
00:09:57,640 --> 00:10:02,300
<font color="#CCCCCC">then the next thing that you</font><font color="#E5E5E5"> want to do</font>

251
00:09:59,690 --> 00:10:04,370
is<font color="#CCCCCC"> S as I've just described it's</font>

252
00:10:02,300 --> 00:10:06,170
actually much shorter than<font color="#E5E5E5"> E right so</font>

253
00:10:04,370 --> 00:10:07,700
you want to give the<font color="#E5E5E5"> algorithm the</font>

254
00:10:06,170 --> 00:10:10,160
freedom to say like<font color="#E5E5E5"> you know what you</font>

255
00:10:07,700 --> 00:10:12,800
<font color="#E5E5E5">get to pick a bigger</font><font color="#CCCCCC"> w</font><font color="#E5E5E5"> because we don't</font>

256
00:10:10,160 --> 00:10:14,060
need<font color="#E5E5E5"> W of the same kind of quality as V</font>

257
00:10:12,800 --> 00:10:15,640
because we're multiplying it<font color="#E5E5E5"> by</font>

258
00:10:14,060 --> 00:10:18,229
something<font color="#CCCCCC"> that's smaller in the end</font>

259
00:10:15,640 --> 00:10:20,660
right<font color="#CCCCCC"> and so if you do that then that</font>

260
00:10:18,230 --> 00:10:24,200
<font color="#E5E5E5">means you just scale</font><font color="#CCCCCC"> a few</font><font color="#E5E5E5"> columns of</font>

261
00:10:20,660 --> 00:10:26,990
your lattice<font color="#E5E5E5"> and then you can go</font><font color="#CCCCCC"> back to</font>

262
00:10:24,200 --> 00:10:28,339
<font color="#E5E5E5">some work by</font><font color="#CCCCCC"> G</font><font color="#E5E5E5"> by and</font><font color="#CCCCCC"> Stephen Galbraith</font>

263
00:10:26,990 --> 00:10:30,290
where they did this<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the primal</font>

264
00:10:28,339 --> 00:10:33,320
attack and this is just<font color="#CCCCCC"> kind of applying</font>

265
00:10:30,290 --> 00:10:34,849
this<font color="#E5E5E5"> trick to the dual attack right and</font>

266
00:10:33,320 --> 00:10:37,339
then what you end<font color="#E5E5E5"> up with is some</font>

267
00:10:34,850 --> 00:10:39,920
constant times<font color="#E5E5E5"> u</font><font color="#CCCCCC"> W inner product s and</font>

268
00:10:37,339 --> 00:10:42,649
your V<font color="#E5E5E5"> E and then if things</font><font color="#CCCCCC"> are small</font>

269
00:10:39,920 --> 00:10:45,050
enough<font color="#E5E5E5"> then you still win and the</font>

270
00:10:42,649 --> 00:10:47,029
advantage<font color="#E5E5E5"> of the scaling is that this</font>

271
00:10:45,050 --> 00:10:48,890
has a kind of quite significant impact

272
00:10:47,029 --> 00:10:51,410
on the<font color="#E5E5E5"> determinant of your lattice which</font>

273
00:10:48,890 --> 00:10:54,500
in turn<font color="#CCCCCC"> determines</font><font color="#E5E5E5"> I can ever pick your</font>

274
00:10:51,410 --> 00:10:56,149
vectors<font color="#E5E5E5"> right</font>

275
00:10:54,500 --> 00:10:57,740
so to figure<font color="#E5E5E5"> out the</font><font color="#CCCCCC"> C that</font><font color="#E5E5E5"> also is</font>

276
00:10:56,149 --> 00:10:59,060
<font color="#CCCCCC">pretty straight forward right so you</font>

277
00:10:57,740 --> 00:11:00,709
<font color="#E5E5E5">just kind of try</font><font color="#CCCCCC"> to balance</font><font color="#E5E5E5"> the</font>

278
00:10:59,060 --> 00:11:02,300
contribution of the<font color="#E5E5E5"> to fight and then</font>

279
00:11:00,709 --> 00:11:04,310
it's kind of some<font color="#E5E5E5"> really trivial algebra</font>

280
00:11:02,300 --> 00:11:06,199
to get your constant C out and you're

281
00:11:04,310 --> 00:11:08,270
done and in this

282
00:11:06,200 --> 00:11:09,860
on the slide<font color="#E5E5E5"> ages these passes of the</font>

283
00:11:08,270 --> 00:11:12,319
secret<font color="#E5E5E5"> right so if you're only</font>

284
00:11:09,860 --> 00:11:15,050
<font color="#E5E5E5">multiplying it by</font><font color="#CCCCCC"> sixty-four nonzero</font>

285
00:11:12,320 --> 00:11:16,580
entries<font color="#E5E5E5"> then you can afford to each of</font>

286
00:11:15,050 --> 00:11:18,560
the<font color="#E5E5E5"> things that you</font><font color="#CCCCCC"> multiply with to be</font>

287
00:11:16,580 --> 00:11:24,290
a bit bigger<font color="#E5E5E5"> gives</font><font color="#CCCCCC"> you not adding up</font>

288
00:11:18,560 --> 00:11:28,430
anyway<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so this was on small secrets</font>

289
00:11:24,290 --> 00:11:30,920
<font color="#CCCCCC">let's talk about sparse secrets</font><font color="#E5E5E5"> and here</font>

290
00:11:28,430 --> 00:11:33,290
the key point is<font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> we're working</font>

291
00:11:30,920 --> 00:11:34,939
really hard to find<font color="#CCCCCC"> a vector V such</font><font color="#E5E5E5"> as</font>

292
00:11:33,290 --> 00:11:37,849
when I<font color="#E5E5E5"> multiplied from the left by a</font><font color="#CCCCCC"> I</font>

293
00:11:34,940 --> 00:11:38,900
<font color="#E5E5E5">get a zero but most of the columns are</font>

294
00:11:37,850 --> 00:11:40,490
completely<font color="#CCCCCC"> irrelevant</font>

295
00:11:38,900 --> 00:11:42,829
<font color="#E5E5E5">they would they have they played</font><font color="#CCCCCC"> no role</font>

296
00:11:40,490 --> 00:11:46,520
<font color="#CCCCCC">in the in the final result right because</font>

297
00:11:42,830 --> 00:11:48,080
s at<font color="#E5E5E5"> that index is zero so I don't need</font>

298
00:11:46,520 --> 00:11:50,000
<font color="#E5E5E5">to do all this work</font><font color="#CCCCCC"> right I don't</font><font color="#E5E5E5"> need</font>

299
00:11:48,080 --> 00:11:52,160
<font color="#E5E5E5">to work</font><font color="#CCCCCC"> really hard to make the linear</font>

300
00:11:50,000 --> 00:11:54,140
<font color="#CCCCCC">combinations zero</font><font color="#E5E5E5"> if the thing doesn't</font>

301
00:11:52,160 --> 00:11:56,089
matter in the<font color="#E5E5E5"> end right so let's just</font>

302
00:11:54,140 --> 00:11:58,430
<font color="#E5E5E5">ignore them</font><font color="#CCCCCC"> like that's literally</font><font color="#E5E5E5"> what</font>

303
00:11:56,090 --> 00:12:01,430
I'm going<font color="#E5E5E5"> to propose you</font><font color="#CCCCCC"> let's</font><font color="#E5E5E5"> just</font>

304
00:11:58,430 --> 00:12:03,079
ignore some columns<font color="#E5E5E5"> and so if you then</font>

305
00:12:01,430 --> 00:12:06,290
kind of think<font color="#CCCCCC"> about well what is my</font>

306
00:12:03,080 --> 00:12:09,140
<font color="#E5E5E5">probability of success well I have to</font>

307
00:12:06,290 --> 00:12:11,209
mention n right so I have n<font color="#E5E5E5"> bolts and</font>

308
00:12:09,140 --> 00:12:13,400
then<font color="#CCCCCC"> each of them are nonzero right they</font>

309
00:12:11,210 --> 00:12:16,010
are unlucky<font color="#E5E5E5"> ones and then I'm just kind</font>

310
00:12:13,400 --> 00:12:17,990
of sampling from these bolts<font color="#E5E5E5"> without</font>

311
00:12:16,010 --> 00:12:19,850
<font color="#E5E5E5">putting them back and I</font><font color="#CCCCCC"> ask myself</font>

312
00:12:17,990 --> 00:12:22,070
what's<font color="#CCCCCC"> the probability of getting</font><font color="#E5E5E5"> lucky</font>

313
00:12:19,850 --> 00:12:24,470
<font color="#E5E5E5">every single time</font><font color="#CCCCCC"> and you're looking</font><font color="#E5E5E5"> at</font>

314
00:12:22,070 --> 00:12:26,540
a hyper geometric distribution<font color="#CCCCCC"> so it's</font>

315
00:12:24,470 --> 00:12:28,550
pretty<font color="#E5E5E5"> straightforward</font><font color="#CCCCCC"> to work out how</font>

316
00:12:26,540 --> 00:12:29,990
<font color="#E5E5E5">often can</font><font color="#CCCCCC"> you guess and how much</font><font color="#E5E5E5"> does</font><font color="#CCCCCC"> it</font>

317
00:12:28,550 --> 00:12:33,020
how does<font color="#CCCCCC"> it affect</font><font color="#E5E5E5"> your success</font>

318
00:12:29,990 --> 00:12:35,210
<font color="#E5E5E5">probability right so you</font><font color="#CCCCCC"> just ignore</font>

319
00:12:33,020 --> 00:12:36,829
some columns and then you solve the

320
00:12:35,210 --> 00:12:38,660
smaller instance which<font color="#CCCCCC"> is easier to</font>

321
00:12:36,830 --> 00:12:42,290
solve<font color="#E5E5E5"> right smaller dimensional lattices</font>

322
00:12:38,660 --> 00:12:43,699
<font color="#E5E5E5">are easier to reduce and then if you got</font>

323
00:12:42,290 --> 00:12:45,140
lucky<font color="#E5E5E5"> great kind of you have</font>

324
00:12:43,700 --> 00:12:47,270
<font color="#E5E5E5">distinguished the instance if you got</font>

325
00:12:45,140 --> 00:12:49,130
unlucky<font color="#E5E5E5"> you have to do it again</font><font color="#CCCCCC"> and of</font>

326
00:12:47,270 --> 00:12:51,680
course then your algorithm that you run

327
00:12:49,130 --> 00:12:53,720
kind of 1 over<font color="#E5E5E5"> P K times has to succeed</font>

328
00:12:51,680 --> 00:12:57,739
<font color="#CCCCCC">was sufficiently</font><font color="#E5E5E5"> high probability so if</font>

329
00:12:53,720 --> 00:12:59,540
you can<font color="#CCCCCC"> actually distinguish right</font><font color="#E5E5E5"> and</font>

330
00:12:57,740 --> 00:13:01,550
so here's how this looks<font color="#E5E5E5"> like and I</font>

331
00:12:59,540 --> 00:13:03,439
should mention like in my world vectors

332
00:13:01,550 --> 00:13:04,910
kind of either column or row vectors

333
00:13:03,440 --> 00:13:08,240
depending on what the dot product wants

334
00:13:04,910 --> 00:13:11,300
from them<font color="#E5E5E5"> so please excuse can if that</font>

335
00:13:08,240 --> 00:13:13,730
abuse of<font color="#E5E5E5"> notation right so what I'm</font>

336
00:13:11,300 --> 00:13:17,390
trying<font color="#CCCCCC"> to do is I do I want to find some</font>

337
00:13:13,730 --> 00:13:19,480
<font color="#CCCCCC">small vector</font><font color="#E5E5E5"> V</font><font color="#CCCCCC"> when multiplied by a I</font>

338
00:13:17,390 --> 00:13:22,030
get something<font color="#CCCCCC"> 0 in</font>

339
00:13:19,480 --> 00:13:26,380
in the<font color="#E5E5E5"> right-hand</font><font color="#CCCCCC"> side of the</font><font color="#E5E5E5"> column so</font>

340
00:13:22,030 --> 00:13:28,480
from index K to n<font color="#E5E5E5"> minus 1 and then and</font>

341
00:13:26,380 --> 00:13:31,930
I'm asking<font color="#E5E5E5"> myself to a get 0 and I</font><font color="#CCCCCC"> get 0</font>

342
00:13:28,480 --> 00:13:33,760
whenever the first K<font color="#E5E5E5"> entries of s in</font>

343
00:13:31,930 --> 00:13:37,229
this particular<font color="#E5E5E5"> instance if they are 0</font>

344
00:13:33,760 --> 00:13:39,460
<font color="#E5E5E5">right so</font><font color="#CCCCCC"> my V eclectic V makes all the</font>

345
00:13:37,230 --> 00:13:41,950
<font color="#CCCCCC">bilinear</font><font color="#E5E5E5"> combination makes all the</font>

346
00:13:39,460 --> 00:13:44,800
components starting at K 0 and then

347
00:13:41,950 --> 00:13:47,260
because as not to as K minus<font color="#CCCCCC"> 1 is 0 by</font>

348
00:13:44,800 --> 00:13:50,079
assumption<font color="#E5E5E5"> then that kind of zeroes</font><font color="#CCCCCC"> out</font>

349
00:13:47,260 --> 00:13:53,460
the remainder<font color="#E5E5E5"> right so I get lucky if I</font>

350
00:13:50,080 --> 00:13:55,810
have my eyes up<font color="#E5E5E5"> to K if they are all</font><font color="#CCCCCC"> 0</font>

351
00:13:53,460 --> 00:13:58,180
now let's look at what I get<font color="#CCCCCC"> what</font>

352
00:13:55,810 --> 00:13:59,979
happens if I get unlucky<font color="#E5E5E5"> right so mean</font>

353
00:13:58,180 --> 00:14:01,959
getting unlucky<font color="#E5E5E5"> in the instance that I'm</font>

354
00:13:59,980 --> 00:14:04,210
looking<font color="#E5E5E5"> at is either have a one day I</font>

355
00:14:01,960 --> 00:14:06,520
have a minus<font color="#E5E5E5"> 1 there all right so let's</font>

356
00:14:04,210 --> 00:14:08,230
assume I have<font color="#E5E5E5"> a</font><font color="#CCCCCC"> 1 there well then the</font>

357
00:14:06,520 --> 00:14:12,310
final<font color="#CCCCCC"> thing that I'm getting is</font><font color="#E5E5E5"> actually</font>

358
00:14:08,230 --> 00:14:14,890
the my vector V<font color="#CCCCCC"> inner product with a and</font>

359
00:14:12,310 --> 00:14:16,630
then I get this a naught naught<font color="#CCCCCC"> prime</font>

360
00:14:14,890 --> 00:14:19,780
<font color="#CCCCCC">right</font><font color="#E5E5E5"> which is just the inner product of</font>

361
00:14:16,630 --> 00:14:22,510
these<font color="#E5E5E5"> guys so I still get some some</font>

362
00:14:19,780 --> 00:14:24,520
distribution that<font color="#CCCCCC"> I can understand right</font>

363
00:14:22,510 --> 00:14:26,830
<font color="#E5E5E5">I have the small thing and it shifted by</font>

364
00:14:24,520 --> 00:14:28,840
something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I know right I know</font><font color="#CCCCCC"> a</font>

365
00:14:26,830 --> 00:14:31,180
naught naught<font color="#CCCCCC"> Prime and then I have</font>

366
00:14:28,840 --> 00:14:33,930
<font color="#E5E5E5">something small some small noise the</font>

367
00:14:31,180 --> 00:14:38,050
inner product of<font color="#E5E5E5"> W and s and V and E</font>

368
00:14:33,930 --> 00:14:39,910
<font color="#E5E5E5">right so this suggests of you know some</font>

369
00:14:38,050 --> 00:14:42,130
form<font color="#E5E5E5"> of</font><font color="#CCCCCC"> post-processing I've done all</font><font color="#E5E5E5"> my</font>

370
00:14:39,910 --> 00:14:44,170
kind<font color="#E5E5E5"> of hard lattice production which is</font>

371
00:14:42,130 --> 00:14:45,670
really<font color="#E5E5E5"> expensive and then instead of</font>

372
00:14:44,170 --> 00:14:47,589
<font color="#E5E5E5">just</font><font color="#CCCCCC"> saying like oh no this thing</font>

373
00:14:45,670 --> 00:14:49,719
<font color="#E5E5E5">doesn't look small let me look for all</font>

374
00:14:47,590 --> 00:14:52,720
these<font color="#E5E5E5"> shifts because</font><font color="#CCCCCC"> that's a</font><font color="#E5E5E5"> that's a</font>

375
00:14:49,720 --> 00:14:53,890
cheap thing<font color="#E5E5E5"> to do so again you're</font>

376
00:14:52,720 --> 00:14:55,930
looking at some hyper geometric

377
00:14:53,890 --> 00:14:59,500
distribution<font color="#E5E5E5"> and now you're asking</font>

378
00:14:55,930 --> 00:15:01,900
myself<font color="#CCCCCC"> is like ok I'm ignoring</font><font color="#E5E5E5"> K minus J</font>

379
00:14:59,500 --> 00:15:04,540
columns and<font color="#E5E5E5"> they're all 0 and J of</font><font color="#CCCCCC"> them</font>

380
00:15:01,900 --> 00:15:06,910
<font color="#E5E5E5">actually I got unlucky</font><font color="#CCCCCC"> right the</font>

381
00:15:04,540 --> 00:15:08,740
establishing the probability is easy<font color="#E5E5E5"> and</font>

382
00:15:06,910 --> 00:15:11,140
<font color="#E5E5E5">that's how often you have to then kind</font>

383
00:15:08,740 --> 00:15:12,700
<font color="#CCCCCC">of repeat the</font><font color="#E5E5E5"> experiments but now of</font>

384
00:15:11,140 --> 00:15:14,920
<font color="#CCCCCC">course this is much cheaper</font><font color="#E5E5E5"> because you</font>

385
00:15:12,700 --> 00:15:16,600
run your laps reduction once and then

386
00:15:14,920 --> 00:15:17,800
you do<font color="#E5E5E5"> this really cheap kind of checks</font>

387
00:15:16,600 --> 00:15:19,810
you check for<font color="#E5E5E5"> many different</font>

388
00:15:17,800 --> 00:15:21,729
distributions<font color="#E5E5E5"> of course you want to</font><font color="#CCCCCC"> make</font>

389
00:15:19,810 --> 00:15:23,589
sure that the advantage of

390
00:15:21,730 --> 00:15:25,150
distinguishing is high enough so that

391
00:15:23,590 --> 00:15:26,950
<font color="#E5E5E5">you know when you found the right one</font>

392
00:15:25,150 --> 00:15:29,610
<font color="#CCCCCC">because now you have</font><font color="#E5E5E5"> to win against all</font>

393
00:15:26,950 --> 00:15:29,610
these other checks

394
00:15:30,380 --> 00:15:35,930
so these are the three kind of<font color="#E5E5E5"> fairly</font>

395
00:15:32,960 --> 00:15:38,300
straightforward ideas that I<font color="#CCCCCC"> wants to</font>

396
00:15:35,930 --> 00:15:39,770
talk<font color="#CCCCCC"> you about and so if you put</font>

397
00:15:38,300 --> 00:15:42,969
<font color="#E5E5E5">everything together we arrive at our</font>

398
00:15:39,770 --> 00:15:45,860
final<font color="#E5E5E5"> algorithm</font><font color="#CCCCCC"> which we call circuit so</font>

399
00:15:42,970 --> 00:15:48,110
the it's a variant<font color="#E5E5E5"> of the dual attack</font>

400
00:15:45,860 --> 00:15:50,990
for small and spa secrets and here's

401
00:15:48,110 --> 00:15:54,110
what it<font color="#CCCCCC"> does so you run your big</font><font color="#E5E5E5"> hazard</font>

402
00:15:50,990 --> 00:15:55,430
<font color="#CCCCCC">Peter reduction once and then you run</font>

403
00:15:54,110 --> 00:15:57,950
<font color="#CCCCCC">your because I'd meet her prime</font>

404
00:15:55,430 --> 00:16:00,109
reduction for<font color="#E5E5E5"> some small pizza prime for</font>

405
00:15:57,950 --> 00:16:03,440
to produce many short vectors from<font color="#E5E5E5"> all</font>

406
00:16:00,110 --> 00:16:05,060
the hard<font color="#E5E5E5"> work you've done</font><font color="#CCCCCC"> and then the</font>

407
00:16:03,440 --> 00:16:08,120
<font color="#E5E5E5">actual kind</font><font color="#CCCCCC"> of dual attack that you run</font>

408
00:16:05,060 --> 00:16:10,760
you scale it<font color="#E5E5E5"> kind of as inspired by she</font>

409
00:16:08,120 --> 00:16:12,800
<font color="#CCCCCC">by and Stephen Galbraith paper</font><font color="#E5E5E5"> and then</font>

410
00:16:10,760 --> 00:16:14,780
finally if your secret<font color="#CCCCCC"> Espace then you</font>

411
00:16:12,800 --> 00:16:16,189
play this<font color="#CCCCCC"> game where you ignore some</font>

412
00:16:14,780 --> 00:16:19,430
components and you do this

413
00:16:16,190 --> 00:16:24,080
post-processing<font color="#E5E5E5"> if you to deal with kind</font>

414
00:16:19,430 --> 00:16:25,640
<font color="#E5E5E5">of getting unlucky all right and then so</font>

415
00:16:24,080 --> 00:16:29,960
putting<font color="#E5E5E5"> everything together kind of</font>

416
00:16:25,640 --> 00:16:32,060
here's<font color="#CCCCCC"> what you get so looking at seal</font>

417
00:16:29,960 --> 00:16:35,630
so this is I should<font color="#E5E5E5"> stress this</font><font color="#CCCCCC"> is C O</font>

418
00:16:32,060 --> 00:16:39,439
two point O so they the parameters were

419
00:16:35,630 --> 00:16:42,830
updated in<font color="#CCCCCC"> Co two point one</font><font color="#E5E5E5"> so in C O</font>

420
00:16:39,440 --> 00:16:45,800
two point O the paper<font color="#E5E5E5"> kind of contained</font>

421
00:16:42,830 --> 00:16:48,410
<font color="#E5E5E5">values for for log Q that should give</font>

422
00:16:45,800 --> 00:16:52,819
you 80 bits of<font color="#CCCCCC"> security right so in all</font>

423
00:16:48,410 --> 00:16:54,770
these<font color="#E5E5E5"> instances what you have is this</font>

424
00:16:52,820 --> 00:16:59,090
standard deviation<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the noise is</font>

425
00:16:54,770 --> 00:17:00,890
<font color="#E5E5E5">always</font><font color="#CCCCCC"> 3.2 and then right then</font>

426
00:16:59,090 --> 00:17:03,380
essentially<font color="#E5E5E5"> if you want 80 bits of</font>

427
00:17:00,890 --> 00:17:05,660
<font color="#CCCCCC">security then the size of</font><font color="#E5E5E5"> Q becomes a</font>

428
00:17:03,380 --> 00:17:07,910
function n right<font color="#E5E5E5"> in the saying like well</font>

429
00:17:05,660 --> 00:17:09,740
you can go for Q up to forty seven<font color="#E5E5E5"> point</font>

430
00:17:07,910 --> 00:17:12,430
five so to the forty seven<font color="#CCCCCC"> point five</font>

431
00:17:09,740 --> 00:17:15,290
and you still have 80 bits of security

432
00:17:12,430 --> 00:17:17,750
<font color="#E5E5E5">okay so for the same instance if we just</font>

433
00:17:15,290 --> 00:17:19,639
kind<font color="#CCCCCC"> of using our kind</font><font color="#E5E5E5"> of cost estimates</font>

434
00:17:17,750 --> 00:17:22,819
well how long does it<font color="#CCCCCC"> actually take to</font>

435
00:17:19,640 --> 00:17:24,589
<font color="#E5E5E5">run that reduction then we get</font><font color="#CCCCCC"> 83 bits</font>

436
00:17:22,819 --> 00:17:27,170
of security<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is kind of</font>

437
00:17:24,589 --> 00:17:28,639
our kind of cost model about kind<font color="#E5E5E5"> of how</font>

438
00:17:27,170 --> 00:17:31,430
long does it take just one the dual

439
00:17:28,640 --> 00:17:34,220
attack as it<font color="#CCCCCC"> was described in 2009 or</font>

440
00:17:31,430 --> 00:17:36,650
earlier<font color="#CCCCCC"> okay and then when you actually</font>

441
00:17:34,220 --> 00:17:40,010
start using<font color="#E5E5E5"> the fact that you have small</font>

442
00:17:36,650 --> 00:17:42,020
secrets<font color="#CCCCCC"> then you get</font><font color="#E5E5E5"> this down to 68</font>

443
00:17:40,010 --> 00:17:44,210
<font color="#CCCCCC">alright so</font><font color="#E5E5E5"> that's what they circle small</font>

444
00:17:42,020 --> 00:17:47,720
so small stands for<font color="#CCCCCC"> we're using</font>

445
00:17:44,210 --> 00:17:49,279
the<font color="#CCCCCC"> we're using</font><font color="#E5E5E5"> the small secret but</font>

446
00:17:47,720 --> 00:17:51,860
we're not using<font color="#E5E5E5"> this</font><font color="#CCCCCC"> path secret</font><font color="#E5E5E5"> sorry</font>

447
00:17:49,279 --> 00:17:53,899
<font color="#CCCCCC">and then a chillip right so the</font>

448
00:17:51,860 --> 00:17:59,059
difference between seal and<font color="#CCCCCC"> a chillip is</font>

449
00:17:53,899 --> 00:18:02,899
<font color="#CCCCCC">that H eel abuses ASP our secret and so</font>

450
00:17:59,059 --> 00:18:04,520
you again kind<font color="#E5E5E5"> of lock you is what you</font>

451
00:18:02,899 --> 00:18:06,709
<font color="#E5E5E5">would get kind of using the cost</font>

452
00:18:04,520 --> 00:18:08,149
estimates from<font color="#E5E5E5"> the dealer paper and then</font>

453
00:18:06,710 --> 00:18:10,429
you exploit<font color="#E5E5E5"> the</font><font color="#CCCCCC"> sparsity could you get</font>

454
00:18:08,149 --> 00:18:13,340
this down<font color="#CCCCCC"> to 61 bits and then you can</font>

455
00:18:10,429 --> 00:18:15,890
play<font color="#E5E5E5"> the same</font><font color="#CCCCCC"> game for</font><font color="#E5E5E5"> 128</font><font color="#CCCCCC"> bits security</font>

456
00:18:13,340 --> 00:18:17,270
and the gap<font color="#CCCCCC"> is even</font><font color="#E5E5E5"> bigger</font><font color="#CCCCCC"> all right</font>

457
00:18:15,890 --> 00:18:18,820
that's all I want to say thank you<font color="#E5E5E5"> for</font>

458
00:18:17,270 --> 00:18:26,168
<font color="#E5E5E5">your attention</font>

459
00:18:18,820 --> 00:18:29,270
[Applause]

460
00:18:26,169 --> 00:18:31,360
<font color="#CCCCCC">okay we do have</font><font color="#E5E5E5"> some time for a</font><font color="#CCCCCC"> few</font>

461
00:18:29,270 --> 00:18:31,360
questions

462
00:18:41,830 --> 00:18:48,590
what does<font color="#CCCCCC"> silica stand for</font>

463
00:18:44,710 --> 00:18:52,610
<font color="#CCCCCC">Thanks so it's as you do it's named</font>

464
00:18:48,590 --> 00:18:54,649
after<font color="#E5E5E5"> a goddess of wisdom and wit</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> if</font>

465
00:18:52,610 --> 00:18:56,899
you are looking<font color="#CCCCCC"> for a backronym then you</font>

466
00:18:54,650 --> 00:18:59,510
can take comfort<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the fact that sis</font>

467
00:18:56,900 --> 00:19:01,070
<font color="#CCCCCC">beaker wlw all the letters are there and</font>

468
00:18:59,510 --> 00:19:07,910
then<font color="#E5E5E5"> I'm sure we can work</font><font color="#CCCCCC"> something out</font>

469
00:19:01,070 --> 00:19:10,700
<font color="#E5E5E5">of line of a cool name</font><font color="#CCCCCC"> I can remind us</font>

470
00:19:07,910 --> 00:19:14,270
how<font color="#CCCCCC"> many samples from the elder billet</font>

471
00:19:10,700 --> 00:19:19,159
problem do<font color="#CCCCCC"> you need and</font><font color="#E5E5E5"> how many samples</font>

472
00:19:14,270 --> 00:19:22,370
the hella<font color="#E5E5E5"> panned she'll provide mm-hmm</font>

473
00:19:19,159 --> 00:19:25,280
so you can do<font color="#CCCCCC"> it with</font><font color="#E5E5E5"> one sample so one</font>

474
00:19:22,370 --> 00:19:27,918
<font color="#CCCCCC">ringer W sample so that's n LW samples</font>

475
00:19:25,280 --> 00:19:30,620
and this<font color="#E5E5E5"> is what you get so there's no</font>

476
00:19:27,919 --> 00:19:32,150
like so<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> assuming that using only</font>

477
00:19:30,620 --> 00:19:34,570
<font color="#E5E5E5">a</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> of samples that is provided by</font>

478
00:19:32,150 --> 00:19:34,570
<font color="#CCCCCC">the</font><font color="#E5E5E5"> scheme</font>

479
00:19:44,700 --> 00:19:50,350
<font color="#E5E5E5">noise are not the same um do you have a</font>

480
00:19:47,350 --> 00:19:53,080
sense of how<font color="#E5E5E5"> much savings</font><font color="#CCCCCC"> you get from</font>

481
00:19:50,350 --> 00:19:54,730
<font color="#CCCCCC">each</font><font color="#E5E5E5"> of these ideas</font><font color="#CCCCCC"> yeah so we kind</font><font color="#E5E5E5"> of</font>

482
00:19:53,080 --> 00:19:56,260
we<font color="#E5E5E5"> we have a running</font><font color="#CCCCCC"> example in the</font>

483
00:19:54,730 --> 00:19:59,080
paper where we spell this out and then

484
00:19:56,260 --> 00:20:00,908
so to give<font color="#E5E5E5"> you the overview like clearly</font>

485
00:19:59,080 --> 00:20:04,000
<font color="#E5E5E5">this fasting doesn't apply to</font><font color="#CCCCCC"> Co</font><font color="#E5E5E5"> right</font>

486
00:20:00,909 --> 00:20:06,460
so we<font color="#E5E5E5"> can and so</font><font color="#CCCCCC"> circa small</font><font color="#E5E5E5"> only has</font>

487
00:20:04,000 --> 00:20:09,370
the<font color="#CCCCCC"> amortize in costs and the the</font>

488
00:20:06,460 --> 00:20:11,289
scaling<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the amortize in costs</font><font color="#E5E5E5"> it</font>

489
00:20:09,370 --> 00:20:13,029
doesn't for these instances doesn't make

490
00:20:11,289 --> 00:20:16,510
that<font color="#CCCCCC"> much of a difference</font><font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> five</font>

491
00:20:13,029 --> 00:20:18,490
bits so for<font color="#E5E5E5"> this particular instance it</font>

492
00:20:16,510 --> 00:20:21,129
really is the<font color="#E5E5E5"> scaling kind of it</font><font color="#CCCCCC"> makes a</font>

493
00:20:18,490 --> 00:20:22,690
big<font color="#CCCCCC"> difference it seems</font><font color="#E5E5E5"> but for the</font>

494
00:20:21,130 --> 00:20:25,899
primary<font color="#CCCCCC"> tack on the other hand</font><font color="#E5E5E5"> know if</font>

495
00:20:22,690 --> 00:20:27,190
you run<font color="#CCCCCC"> she's and</font><font color="#E5E5E5"> Stephens algorithm on</font>

496
00:20:25,899 --> 00:20:29,320
these instance or<font color="#E5E5E5"> you can you know you</font>

497
00:20:27,190 --> 00:20:33,130
run your estimator on that you get like

498
00:20:29,320 --> 00:20:35,260
three bits<font color="#CCCCCC"> so it really depends on kind</font>

499
00:20:33,130 --> 00:20:37,380
<font color="#E5E5E5">of</font><font color="#CCCCCC"> where you apply and then will</font><font color="#E5E5E5"> you get</font>

500
00:20:35,260 --> 00:20:37,379
up

