1
00:00:03,230 --> 00:00:09,750
<font color="#E5E5E5">okay yeah so I want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> tell</font><font color="#CCCCCC"> you about</font>

2
00:00:07,740 --> 00:00:12,420
this note about<font color="#CCCCCC"> our</font><font color="#E5E5E5"> perfect correctness</font>

3
00:00:09,750 --> 00:00:17,460
by during the<font color="#E5E5E5"> mutation and</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is joint</font>

4
00:00:12,420 --> 00:00:20,310
work with<font color="#CCCCCC"> Vinod and this talk is</font><font color="#E5E5E5"> really</font>

5
00:00:17,460 --> 00:00:23,850
about randomness<font color="#E5E5E5"> this is the</font><font color="#CCCCCC"> main theme</font>

6
00:00:20,310 --> 00:00:26,038
<font color="#CCCCCC">and we all know</font><font color="#E5E5E5"> that the</font><font color="#CCCCCC"> trial Ness is</font>

7
00:00:23,850 --> 00:00:28,920
crucial it's necessary for for

8
00:00:26,039 --> 00:00:31,170
<font color="#E5E5E5">cryptography</font><font color="#CCCCCC"> it's the air that we</font>

9
00:00:28,920 --> 00:00:34,980
<font color="#E5E5E5">breathe without it we</font><font color="#CCCCCC"> can't do anything</font>

10
00:00:31,170 --> 00:00:38,820
<font color="#E5E5E5">right but it also comes with the usual</font>

11
00:00:34,980 --> 00:00:42,739
price of randomized algorithms<font color="#E5E5E5"> which is</font>

12
00:00:38,820 --> 00:00:45,989
that they make errors<font color="#CCCCCC"> right for example</font>

13
00:00:42,739 --> 00:00:48,780
<font color="#CCCCCC">public key encryption schemes that are</font>

14
00:00:45,989 --> 00:00:50,699
randomized often make decryption errors

15
00:00:48,780 --> 00:00:56,280
and this will sort of<font color="#E5E5E5"> be the the running</font>

16
00:00:50,700 --> 00:00:58,199
example<font color="#E5E5E5"> for this talk</font><font color="#CCCCCC"> so why why why</font>

17
00:00:56,280 --> 00:01:00,390
<font color="#CCCCCC">should we care</font><font color="#E5E5E5"> about errors after all</font>

18
00:00:58,199 --> 00:01:02,968
<font color="#E5E5E5">when</font><font color="#CCCCCC"> they do occur they probably occur</font>

19
00:01:00,390 --> 00:01:05,729
<font color="#E5E5E5">with negligible probability so why care</font>

20
00:01:02,969 --> 00:01:08,939
about<font color="#E5E5E5"> them so first I want to say it's</font>

21
00:01:05,729 --> 00:01:11,970
it's sort<font color="#CCCCCC"> of a very natural question</font>

22
00:01:08,939 --> 00:01:14,039
from an aesthetics<font color="#E5E5E5"> perspective why</font>

23
00:01:11,970 --> 00:01:17,939
should we have errors if we want

24
00:01:14,040 --> 00:01:22,850
security<font color="#CCCCCC"> but beyond that something that</font>

25
00:01:17,939 --> 00:01:26,880
seems more significant is that<font color="#CCCCCC"> actually</font>

26
00:01:22,850 --> 00:01:29,460
errors often lead to insecurities very

27
00:01:26,880 --> 00:01:31,710
often lead<font color="#CCCCCC"> to attacks</font><font color="#E5E5E5"> one simple example</font>

28
00:01:29,460 --> 00:01:33,869
<font color="#CCCCCC">is when</font><font color="#E5E5E5"> you try to construct a</font>

29
00:01:31,710 --> 00:01:36,089
commitment scheme from public<font color="#CCCCCC"> encryption</font>

30
00:01:33,869 --> 00:01:38,909
<font color="#E5E5E5">if you have decryption errors you'll be</font>

31
00:01:36,090 --> 00:01:42,229
able to equivocate<font color="#CCCCCC"> another quite</font>

32
00:01:38,909 --> 00:01:45,329
well-known example or chosen ciphertext

33
00:01:42,229 --> 00:01:48,210
<font color="#E5E5E5">attacks and these</font><font color="#CCCCCC"> are not</font><font color="#E5E5E5"> just attacks</font>

34
00:01:45,329 --> 00:01:51,380
on specific schemes but<font color="#E5E5E5"> also against you</font>

35
00:01:48,210 --> 00:01:55,339
know our methods<font color="#E5E5E5"> of actually immune</font>

36
00:01:51,380 --> 00:01:58,259
immunizing<font color="#E5E5E5"> schemes against such attacks</font>

37
00:01:55,340 --> 00:02:02,430
<font color="#CCCCCC">so what can we do about</font><font color="#E5E5E5"> it</font>

38
00:01:58,259 --> 00:02:04,560
can we can<font color="#E5E5E5"> we avoid such errors and this</font>

39
00:02:02,430 --> 00:02:08,869
<font color="#E5E5E5">is a question that has</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> quite</font>

40
00:02:04,560 --> 00:02:10,440
extensively studied in the context of

41
00:02:08,869 --> 00:02:14,220
algorithms

42
00:02:10,440 --> 00:02:16,109
and<font color="#CCCCCC"> and complexity and their dancer is</font>

43
00:02:14,220 --> 00:02:18,600
<font color="#CCCCCC">sort of very</font><font color="#E5E5E5"> clean it's it's the</font>

44
00:02:16,110 --> 00:02:20,970
randomization<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> actually try and</font><font color="#E5E5E5"> do</font>

45
00:02:18,600 --> 00:02:24,630
randomized probabilistic algorithms and

46
00:02:20,970 --> 00:02:27,840
then sort of get<font color="#CCCCCC"> rid of of errors we can</font>

47
00:02:24,630 --> 00:02:30,690
in fact<font color="#CCCCCC"> under mild harness</font><font color="#E5E5E5"> assumptions</font>

48
00:02:27,840 --> 00:02:33,840
<font color="#E5E5E5">know that we can take anywhere and</font><font color="#CCCCCC"> my's</font>

49
00:02:30,690 --> 00:02:37,560
<font color="#E5E5E5">algorithm</font><font color="#CCCCCC"> and sort of switch its coins</font>

50
00:02:33,840 --> 00:02:39,660
to use fake<font color="#E5E5E5"> pseudo random coins which we</font>

51
00:02:37,560 --> 00:02:44,220
call nice and<font color="#CCCCCC"> victor some coins and I'll</font>

52
00:02:39,660 --> 00:02:47,310
talk about those soon<font color="#CCCCCC"> but the point is</font>

53
00:02:44,220 --> 00:02:49,040
<font color="#CCCCCC">that we cannot hope to</font><font color="#E5E5E5"> do this for for</font>

54
00:02:47,310 --> 00:02:51,330
crypto we can't<font color="#CCCCCC"> really hope to</font>

55
00:02:49,040 --> 00:02:52,850
completely the randomized the

56
00:02:51,330 --> 00:02:55,050
cryptographic steam because<font color="#E5E5E5"> again</font>

57
00:02:52,850 --> 00:03:00,750
deterministic<font color="#CCCCCC"> reprographic schemes are</font>

58
00:02:55,050 --> 00:03:02,430
insecure<font color="#E5E5E5"> so what do we know</font><font color="#CCCCCC"> to do so we</font>

59
00:03:00,750 --> 00:03:04,200
do know<font color="#CCCCCC"> how to solve this</font><font color="#E5E5E5"> problem at</font>

60
00:03:02,430 --> 00:03:09,930
<font color="#E5E5E5">least partly solve this problem in</font>

61
00:03:04,200 --> 00:03:13,290
<font color="#E5E5E5">certain specific cases in particular</font><font color="#CCCCCC"> in</font>

62
00:03:09,930 --> 00:03:14,550
public key encryption<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the reason</font><font color="#E5E5E5"> I</font>

63
00:03:13,290 --> 00:03:16,950
say that<font color="#E5E5E5"> we know how to solve it</font>

64
00:03:14,550 --> 00:03:19,110
sparsely there is that what we basically

65
00:03:16,950 --> 00:03:22,230
<font color="#E5E5E5">know how to do is sort of shift there's</font>

66
00:03:19,110 --> 00:03:26,070
two key<font color="#E5E5E5"> generation meaning that for most</font>

67
00:03:22,230 --> 00:03:28,440
keys<font color="#E5E5E5"> we won't have decryption errors but</font>

68
00:03:26,070 --> 00:03:32,730
in general this<font color="#E5E5E5"> this is a problem that</font>

69
00:03:28,440 --> 00:03:35,520
<font color="#E5E5E5">we</font><font color="#CCCCCC"> don't know</font><font color="#E5E5E5"> how to solve so let me</font>

70
00:03:32,730 --> 00:03:38,459
<font color="#E5E5E5">tell you what this this</font><font color="#CCCCCC"> note is about</font>

71
00:03:35,520 --> 00:03:42,840
what we're<font color="#CCCCCC"> doing in this work</font>

72
00:03:38,459 --> 00:03:45,810
so we basically show<font color="#CCCCCC"> a simple</font>

73
00:03:42,840 --> 00:03:49,560
<font color="#E5E5E5">transformation that can eliminate errors</font>

74
00:03:45,810 --> 00:03:52,709
from<font color="#E5E5E5"> a large class of cryptographic</font>

75
00:03:49,560 --> 00:03:58,350
schemes<font color="#CCCCCC"> and roughly speaking the way</font>

76
00:03:52,709 --> 00:04:00,989
that we do this is we we combine two

77
00:03:58,350 --> 00:04:03,299
<font color="#E5E5E5">types of pseudo randomness one is this</font>

78
00:04:00,989 --> 00:04:07,140
nice<font color="#CCCCCC"> invigaron type of pseudo randomness</font>

79
00:04:03,300 --> 00:04:10,110
from complexity<font color="#E5E5E5"> together with the</font>

80
00:04:07,140 --> 00:04:12,329
cryptographic<font color="#E5E5E5"> pseudo randomness</font><font color="#CCCCCC"> that we</font>

81
00:04:10,110 --> 00:04:15,600
all know and<font color="#E5E5E5"> have been using for</font><font color="#CCCCCC"> a long</font>

82
00:04:12,330 --> 00:04:20,310
time since it was<font color="#E5E5E5"> introduced by</font><font color="#CCCCCC"> Blanca</font>

83
00:04:15,600 --> 00:04:23,820
<font color="#CCCCCC">Holly</font><font color="#E5E5E5"> and Yahoo okay</font><font color="#CCCCCC"> so let me be a</font><font color="#E5E5E5"> bit</font>

84
00:04:20,310 --> 00:04:24,360
more precise about<font color="#E5E5E5"> what we do so what we</font>

85
00:04:23,820 --> 00:04:27,740
show

86
00:04:24,360 --> 00:04:32,250
that you can take a cryptographic scheme

87
00:04:27,740 --> 00:04:35,879
<font color="#E5E5E5">that for any given input may make many</font>

88
00:04:32,250 --> 00:04:39,120
<font color="#CCCCCC">errors but on most of the</font><font color="#E5E5E5"> time for most</font>

89
00:04:35,879 --> 00:04:41,090
random coins<font color="#CCCCCC"> it will be correct and turn</font>

90
00:04:39,120 --> 00:04:43,530
it into one that<font color="#CCCCCC"> is perfectly correct</font>

91
00:04:41,090 --> 00:04:45,539
<font color="#CCCCCC">but we cannot do</font><font color="#E5E5E5"> this for</font><font color="#CCCCCC"> any</font>

92
00:04:43,530 --> 00:04:47,039
cryptographic scheme<font color="#CCCCCC"> we do it for a</font>

93
00:04:45,539 --> 00:04:50,250
certain<font color="#E5E5E5"> class of cryptographic schemes</font>

94
00:04:47,039 --> 00:04:52,469
which are sort<font color="#E5E5E5"> of secure under parallel</font>

95
00:04:50,250 --> 00:04:55,740
repetition which roughly means that if

96
00:04:52,469 --> 00:04:59,129
you run the scheme many times it<font color="#E5E5E5"> starts</font>

97
00:04:55,740 --> 00:05:01,469
<font color="#E5E5E5">composes it remains secure</font><font color="#CCCCCC"> and this is</font>

98
00:04:59,129 --> 00:05:04,759
<font color="#E5E5E5">something that sort</font><font color="#CCCCCC"> of automatic for</font>

99
00:05:01,469 --> 00:05:08,099
public encryption<font color="#E5E5E5"> or alpha</font><font color="#CCCCCC"> station and</font>

100
00:05:04,759 --> 00:05:09,449
many other cases<font color="#E5E5E5"> but you know it's it's</font>

101
00:05:08,099 --> 00:05:10,770
still<font color="#E5E5E5"> a feature something that you</font>

102
00:05:09,449 --> 00:05:13,139
should require if you look at

103
00:05:10,770 --> 00:05:15,299
multi-party computation<font color="#E5E5E5"> sometimes it</font>

104
00:05:13,139 --> 00:05:17,819
<font color="#E5E5E5">will hold sometimes it won't</font><font color="#CCCCCC"> so this is</font>

105
00:05:15,300 --> 00:05:21,689
a<font color="#E5E5E5"> condition that</font><font color="#CCCCCC"> we'll need and what are</font>

106
00:05:17,819 --> 00:05:23,819
the underlying assumptions<font color="#E5E5E5"> so from a</font>

107
00:05:21,689 --> 00:05:28,169
<font color="#E5E5E5">cryptographic perspective it's a simple</font>

108
00:05:23,819 --> 00:05:30,539
assumption<font color="#E5E5E5"> one way functions and we also</font>

109
00:05:28,169 --> 00:05:32,729
have in a<font color="#E5E5E5"> something that comes</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> the</font>

110
00:05:30,539 --> 00:05:35,909
complexity from<font color="#CCCCCC"> the NIST and bigger</font>

111
00:05:32,729 --> 00:05:37,560
<font color="#CCCCCC">sentai</font><font color="#E5E5E5"> p-- your randomization</font><font color="#CCCCCC"> which is</font>

112
00:05:35,909 --> 00:05:39,990
basically<font color="#E5E5E5"> that there are computations</font>

113
00:05:37,560 --> 00:05:43,860
that<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> consol VIN in uniform</font>

114
00:05:39,990 --> 00:05:46,529
exponential time but<font color="#E5E5E5"> sub-exponential</font>

115
00:05:43,860 --> 00:05:49,440
circuits even<font color="#E5E5E5"> non-deterministic ones</font>

116
00:05:46,529 --> 00:05:51,169
<font color="#E5E5E5">cannot solve it basically says that that</font>

117
00:05:49,440 --> 00:05:53,789
non determinism<font color="#E5E5E5"> and non uniformity</font>

118
00:05:51,169 --> 00:05:57,060
<font color="#CCCCCC">doesn't significantly</font><font color="#E5E5E5"> speed-up</font>

119
00:05:53,789 --> 00:05:58,889
computation<font color="#E5E5E5"> it's a model the complexity</font>

120
00:05:57,060 --> 00:06:01,560
of some<font color="#CCCCCC"> it sort of does something</font><font color="#E5E5E5"> that</font>

121
00:05:58,889 --> 00:06:06,779
we use to the randomized<font color="#CCCCCC"> am the</font>

122
00:06:01,560 --> 00:06:10,129
equivalent<font color="#CCCCCC"> of</font><font color="#E5E5E5"> NP so I want to</font><font color="#CCCCCC"> mention</font>

123
00:06:06,779 --> 00:06:12,569
one one corollary of<font color="#E5E5E5"> of this</font>

124
00:06:10,129 --> 00:06:14,430
<font color="#E5E5E5">transformation we in fact</font><font color="#CCCCCC"> noted in</font>

125
00:06:12,569 --> 00:06:18,089
<font color="#E5E5E5">certain settings for</font><font color="#CCCCCC"> example in public</font>

126
00:06:14,430 --> 00:06:23,009
encryption<font color="#E5E5E5"> and an obfuscation</font><font color="#CCCCCC"> we can</font>

127
00:06:18,089 --> 00:06:26,580
<font color="#CCCCCC">even sort</font><font color="#E5E5E5"> of deal with with a with a</font>

128
00:06:23,009 --> 00:06:28,919
<font color="#CCCCCC">situation words are even errors on many</font>

129
00:06:26,580 --> 00:06:32,008
of the inputs not just over the<font color="#E5E5E5"> the</font>

130
00:06:28,919 --> 00:06:34,529
<font color="#CCCCCC">random coins and now and this</font>

131
00:06:32,009 --> 00:06:37,020
transformation usually result in schemes

132
00:06:34,529 --> 00:06:37,740
that<font color="#E5E5E5"> are correct for</font><font color="#CCCCCC"> any input but still</font>

133
00:06:37,020 --> 00:06:39,870
error

134
00:06:37,740 --> 00:06:42,900
<font color="#E5E5E5">for the randomness of the scheme we can</font>

135
00:06:39,870 --> 00:06:45,569
now get rid<font color="#CCCCCC"> of it and get perfectly</font>

136
00:06:42,900 --> 00:06:50,370
correct public<font color="#CCCCCC"> encryption or office</font>

137
00:06:45,569 --> 00:06:53,759
keishon<font color="#E5E5E5"> okay so for the rest of this</font>

138
00:06:50,370 --> 00:06:57,080
talk<font color="#E5E5E5"> what I'd</font><font color="#CCCCCC"> like to do is tell you a</font>

139
00:06:53,759 --> 00:07:01,199
little bit<font color="#CCCCCC"> about the basic idea behind</font>

140
00:06:57,080 --> 00:07:04,080
<font color="#E5E5E5">this transformation and for</font><font color="#CCCCCC"> this I need</font>

141
00:07:01,199 --> 00:07:06,319
to tell you something about this<font color="#CCCCCC"> nice</font>

142
00:07:04,080 --> 00:07:09,479
<font color="#E5E5E5">invigoration type of pseudo-random</font>

143
00:07:06,319 --> 00:07:12,470
generation that<font color="#E5E5E5"> did I</font><font color="#CCCCCC"> mentioned and here</font>

144
00:07:09,479 --> 00:07:16,860
the goal is<font color="#CCCCCC"> the following so you have a</font>

145
00:07:12,470 --> 00:07:19,080
randomized<font color="#E5E5E5"> algorithm and you want to</font>

146
00:07:16,860 --> 00:07:21,509
make it<font color="#E5E5E5"> deterministic and the way that</font>

147
00:07:19,080 --> 00:07:24,930
you're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do this is by somehow</font>

148
00:07:21,509 --> 00:07:26,460
using this specialized<font color="#E5E5E5"> pseudo-random</font>

149
00:07:24,930 --> 00:07:29,750
generator and<font color="#CCCCCC"> some bigger some</font>

150
00:07:26,460 --> 00:07:32,130
pseudo-random generator that has<font color="#CCCCCC"> this</font>

151
00:07:29,750 --> 00:07:34,409
very<font color="#E5E5E5"> nice property</font><font color="#CCCCCC"> that the seed</font><font color="#E5E5E5"> is</font>

152
00:07:32,130 --> 00:07:37,319
extremely<font color="#E5E5E5"> short how short it's actually</font>

153
00:07:34,409 --> 00:07:40,560
<font color="#E5E5E5">logarithmic so if you have</font><font color="#CCCCCC"> algorithmic</font>

154
00:07:37,319 --> 00:07:43,650
seed<font color="#E5E5E5"> then the way that you can do</font>

155
00:07:40,560 --> 00:07:45,900
randomized<font color="#CCCCCC"> is really sort of enumerate</font>

156
00:07:43,650 --> 00:07:51,630
over<font color="#CCCCCC"> all seeds okay</font>

157
00:07:45,900 --> 00:07:54,750
so this is<font color="#E5E5E5"> basically the way</font><font color="#CCCCCC"> that these</font>

158
00:07:51,630 --> 00:07:56,520
guys<font color="#CCCCCC"> words now</font><font color="#E5E5E5"> of course it as I</font>

159
00:07:54,750 --> 00:08:00,479
<font color="#CCCCCC">describe it it</font><font color="#E5E5E5"> doesn't make sense</font>

160
00:07:56,520 --> 00:08:02,940
against<font color="#E5E5E5"> algorithms that run in arbitrary</font>

161
00:08:00,479 --> 00:08:05,340
<font color="#E5E5E5">time this is very different from the way</font>

162
00:08:02,940 --> 00:08:07,080
<font color="#CCCCCC">that we think about</font><font color="#E5E5E5"> pseudo randomness in</font>

163
00:08:05,340 --> 00:08:09,599
the cryptographic setting where we<font color="#CCCCCC"> want</font>

164
00:08:07,080 --> 00:08:12,568
a single fixed pseudo-random generator

165
00:08:09,599 --> 00:08:14,580
to fool arbitrary point nominal size

166
00:08:12,569 --> 00:08:17,280
adversaries here it<font color="#E5E5E5"> doesn't make sense</font>

167
00:08:14,580 --> 00:08:19,050
<font color="#CCCCCC">right the adversary might</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to run</font>

168
00:08:17,280 --> 00:08:22,109
this pseudo-random generator

169
00:08:19,050 --> 00:08:25,500
the<font color="#E5E5E5"> seed is very very short so the right</font>

170
00:08:22,110 --> 00:08:27,960
picture to<font color="#CCCCCC"> look at is this</font><font color="#E5E5E5"> we really in</font>

171
00:08:25,500 --> 00:08:30,030
this<font color="#E5E5E5"> setting think about a fixed time</font>

172
00:08:27,960 --> 00:08:33,149
algorithm we know the running<font color="#E5E5E5"> time of</font>

173
00:08:30,030 --> 00:08:35,069
this algorithm<font color="#CCCCCC"> ahead</font><font color="#E5E5E5"> of time and now we</font>

174
00:08:33,149 --> 00:08:37,469
can accordingly design<font color="#E5E5E5"> the pseudo-random</font>

175
00:08:35,070 --> 00:08:40,800
generator<font color="#CCCCCC"> so the pseudo-random generator</font>

176
00:08:37,469 --> 00:08:43,140
in particular can run for longer<font color="#E5E5E5"> than</font>

177
00:08:40,799 --> 00:08:46,979
this this adversary<font color="#E5E5E5"> sort of swallowed</font>

178
00:08:43,140 --> 00:08:50,850
the adversary<font color="#E5E5E5"> algorithm and we also were</font>

179
00:08:46,980 --> 00:08:51,270
not that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> also allow some slack in the</font>

180
00:08:50,850 --> 00:08:53,700
industry

181
00:08:51,270 --> 00:08:56,730
ability<font color="#E5E5E5"> it doesn't have to be negligible</font>

182
00:08:53,700 --> 00:08:59,880
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> think about you know three over</font>

183
00:08:56,730 --> 00:09:03,120
<font color="#E5E5E5">for something for the sake of this talk</font>

184
00:08:59,880 --> 00:09:06,330
<font color="#CCCCCC">so these are</font><font color="#E5E5E5"> nice and ribosomes random</font>

185
00:09:03,120 --> 00:09:09,450
generators and we can be constructed

186
00:09:06,330 --> 00:09:15,920
even on the<font color="#E5E5E5"> worst case assumption of the</font>

187
00:09:09,450 --> 00:09:18,090
type that that I<font color="#E5E5E5"> just mentioned and</font>

188
00:09:15,920 --> 00:09:21,750
they've been used to do randomized

189
00:09:18,090 --> 00:09:25,170
algorithms in in<font color="#E5E5E5"> general but we also</font>

190
00:09:21,750 --> 00:09:27,480
been used in<font color="#E5E5E5"> cryptography not for</font>

191
00:09:25,170 --> 00:09:30,060
correcting errors<font color="#E5E5E5"> but actually for</font>

192
00:09:27,480 --> 00:09:32,430
removing interaction so<font color="#CCCCCC"> BA không</font>

193
00:09:30,060 --> 00:09:37,229
<font color="#CCCCCC">Grandpa Dan showed that in</font><font color="#E5E5E5"> certain cases</font>

194
00:09:32,430 --> 00:09:40,560
like zaps<font color="#CCCCCC"> or ORS</font><font color="#E5E5E5"> commitment you can use</font>

195
00:09:37,230 --> 00:09:43,740
these<font color="#E5E5E5"> objects in order to shave one</font>

196
00:09:40,560 --> 00:09:46,020
message from<font color="#E5E5E5"> the the protocol and then</font>

197
00:09:43,740 --> 00:09:48,000
these actually need a slightly stronger

198
00:09:46,020 --> 00:09:51,090
assumption and then<font color="#CCCCCC"> usually which is the</font>

199
00:09:48,000 --> 00:09:55,140
<font color="#E5E5E5">assumption that we use which also means</font>

200
00:09:51,090 --> 00:09:57,660
<font color="#E5E5E5">that we're</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> only trying to fool the</font>

201
00:09:55,140 --> 00:10:00,120
<font color="#CCCCCC">termina stick algorithms but also non</font>

202
00:09:57,660 --> 00:10:03,300
deterministic algorithms we<font color="#CCCCCC"> can get some</font>

203
00:10:00,120 --> 00:10:06,180
we can<font color="#E5E5E5"> have a non-deterministic guess</font>

204
00:10:03,300 --> 00:10:10,890
and we'll see you later<font color="#E5E5E5"> on where this</font>

205
00:10:06,180 --> 00:10:14,609
exactly<font color="#E5E5E5"> comes in okay so we have this</font>

206
00:10:10,890 --> 00:10:16,650
object<font color="#E5E5E5"> now and we'd like to try and use</font>

207
00:10:14,610 --> 00:10:19,890
this in<font color="#CCCCCC"> order</font><font color="#E5E5E5"> to correct errors in</font>

208
00:10:16,650 --> 00:10:22,170
cryptographic schemes<font color="#E5E5E5"> and let's again</font>

209
00:10:19,890 --> 00:10:24,810
think<font color="#CCCCCC"> about our running example</font><font color="#E5E5E5"> which is</font>

210
00:10:22,170 --> 00:10:28,589
just public key encryption<font color="#CCCCCC"> right and</font>

211
00:10:24,810 --> 00:10:30,660
here we have the<font color="#E5E5E5"> the encryption and key</font>

212
00:10:28,590 --> 00:10:33,240
<font color="#E5E5E5">generation algorithms which are</font>

213
00:10:30,660 --> 00:10:36,180
randomized<font color="#E5E5E5"> right each one has its own</font>

214
00:10:33,240 --> 00:10:38,640
randomness<font color="#CCCCCC"> of course something</font><font color="#E5E5E5"> happens</font>

215
00:10:36,180 --> 00:10:40,290
you generate keys you encrypt<font color="#CCCCCC"> a certain</font>

216
00:10:38,640 --> 00:10:43,740
<font color="#CCCCCC">message we're going to</font><font color="#E5E5E5"> think about this</font>

217
00:10:40,290 --> 00:10:47,370
<font color="#E5E5E5">message as the input and then you</font>

218
00:10:43,740 --> 00:10:50,790
decrypt now we can try of<font color="#CCCCCC"> course think</font>

219
00:10:47,370 --> 00:10:54,060
about this entire thing<font color="#E5E5E5"> as a randomized</font>

220
00:10:50,790 --> 00:10:57,449
algorithm<font color="#CCCCCC"> over the randomness of the key</font>

221
00:10:54,060 --> 00:11:00,359
generation<font color="#E5E5E5"> and the encryption it runs in</font>

222
00:10:57,450 --> 00:11:03,060
fixed time if you fix the size of the

223
00:11:00,360 --> 00:11:04,860
message<font color="#CCCCCC"> so you know if it</font><font color="#E5E5E5"> makes the</font>

224
00:11:03,060 --> 00:11:08,280
corruption errors maybe we can just

225
00:11:04,860 --> 00:11:11,700
<font color="#E5E5E5">to randomize it and now it will</font><font color="#CCCCCC"> work but</font>

226
00:11:08,280 --> 00:11:14,250
<font color="#E5E5E5">again I'm repeating myself</font><font color="#CCCCCC"> this might</font><font color="#E5E5E5"> be</font>

227
00:11:11,700 --> 00:11:18,000
correct it<font color="#CCCCCC"> will be great but it will</font><font color="#E5E5E5"> be</font>

228
00:11:14,250 --> 00:11:21,710
insecure<font color="#CCCCCC"> won't be great</font><font color="#E5E5E5"> in terms of of</font>

229
00:11:18,000 --> 00:11:26,310
security<font color="#E5E5E5"> so how are we going to</font><font color="#CCCCCC"> use this</font>

230
00:11:21,710 --> 00:11:29,640
so the basic idea<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the following we're</font>

231
00:11:26,310 --> 00:11:32,040
going to somehow<font color="#E5E5E5"> decouple security and</font>

232
00:11:29,640 --> 00:11:36,620
correctness we're going to show<font color="#E5E5E5"> that you</font>

233
00:11:32,040 --> 00:11:39,689
<font color="#CCCCCC">can sort of split the</font><font color="#E5E5E5"> redness of this</font>

234
00:11:36,620 --> 00:11:43,560
system of this randomized algorithm into

235
00:11:39,690 --> 00:11:46,650
<font color="#E5E5E5">two parts</font><font color="#CCCCCC"> the security is going</font><font color="#E5E5E5"> to come</font>

236
00:11:43,560 --> 00:11:48,959
from one part of this random<font color="#CCCCCC"> string and</font>

237
00:11:46,650 --> 00:11:52,590
the correctness is going to come from

238
00:11:48,960 --> 00:11:59,010
the<font color="#CCCCCC"> other and we're</font><font color="#E5E5E5"> simply going to XOR</font>

239
00:11:52,590 --> 00:12:01,020
them together now once we have<font color="#CCCCCC"> that</font><font color="#E5E5E5"> what</font>

240
00:11:59,010 --> 00:12:05,090
we're going to do is basically<font color="#E5E5E5"> in order</font>

241
00:12:01,020 --> 00:12:08,460
<font color="#E5E5E5">to generate the</font><font color="#CCCCCC"> randomness for this</font>

242
00:12:05,090 --> 00:12:10,980
<font color="#E5E5E5">second part we're going to use the</font>

243
00:12:08,460 --> 00:12:13,290
<font color="#CCCCCC">Nissan bickerson pseudo-random generator</font>

244
00:12:10,980 --> 00:12:16,980
<font color="#E5E5E5">and we're also going to have to generate</font>

245
00:12:13,290 --> 00:12:20,550
somehow the the part is in charge of

246
00:12:16,980 --> 00:12:24,420
<font color="#E5E5E5">security and this is something we're</font>

247
00:12:20,550 --> 00:12:27,329
going to do using<font color="#E5E5E5"> cryptography</font><font color="#CCCCCC"> ok so</font>

248
00:12:24,420 --> 00:12:29,490
before<font color="#CCCCCC"> I tell you exactly how</font><font color="#E5E5E5"> we do this</font>

249
00:12:27,330 --> 00:12:32,280
just<font color="#E5E5E5"> to understand the</font><font color="#CCCCCC"> high-level</font>

250
00:12:29,490 --> 00:12:35,460
<font color="#CCCCCC">picture once we have such a scheme where</font>

251
00:12:32,280 --> 00:12:38,939
we<font color="#CCCCCC"> manage to separate demands in this</font>

252
00:12:35,460 --> 00:12:42,150
way<font color="#E5E5E5"> then we're going to follow the the</font>

253
00:12:38,940 --> 00:12:45,840
<font color="#CCCCCC">usual paradigm behind the</font><font color="#E5E5E5"> randomization</font>

254
00:12:42,150 --> 00:12:49,920
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is just to enumerate</font><font color="#E5E5E5"> over all of</font>

255
00:12:45,840 --> 00:12:50,580
<font color="#E5E5E5">these needs and</font><font color="#CCCCCC"> victors on</font><font color="#E5E5E5"> pseudo-random</font>

256
00:12:49,920 --> 00:12:52,349
strings

257
00:12:50,580 --> 00:12:54,450
we're going to look at each and every

258
00:12:52,350 --> 00:12:58,970
possible seed remember<font color="#E5E5E5"> they're</font><font color="#CCCCCC"> only</font>

259
00:12:54,450 --> 00:13:01,110
polynomially many the<font color="#CCCCCC"> seed is basically</font>

260
00:12:58,970 --> 00:13:04,830
logarithmic and it should<font color="#CCCCCC"> already</font>

261
00:13:01,110 --> 00:13:06,990
guarantee security<font color="#E5E5E5"> and for the second</font>

262
00:13:04,830 --> 00:13:09,840
part<font color="#E5E5E5"> for the cryptographic part we're</font>

263
00:13:06,990 --> 00:13:13,380
going to independently generate these

264
00:13:09,840 --> 00:13:17,100
cryptographic random<font color="#E5E5E5"> strings in each</font><font color="#CCCCCC"> one</font>

265
00:13:13,380 --> 00:13:18,720
<font color="#CCCCCC">of these instances</font><font color="#E5E5E5"> and then at the end</font>

266
00:13:17,100 --> 00:13:20,550
<font color="#E5E5E5">of course you just take</font>

267
00:13:18,720 --> 00:13:23,430
<font color="#CCCCCC">Georgiy this is the</font><font color="#E5E5E5"> the usual</font><font color="#CCCCCC"> thing</font>

268
00:13:20,550 --> 00:13:25,019
<font color="#E5E5E5">you're</font><font color="#CCCCCC"> doing in the randomization these</font>

269
00:13:23,430 --> 00:13:28,310
things will be correct most of the time

270
00:13:25,019 --> 00:13:31,319
and<font color="#CCCCCC"> will get the correct</font><font color="#E5E5E5"> result</font><font color="#CCCCCC"> I</font>

271
00:13:28,310 --> 00:13:33,508
noticed<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we're basically</font><font color="#E5E5E5"> applying</font>

272
00:13:31,319 --> 00:13:35,819
the skin<font color="#E5E5E5"> over and over again as many</font>

273
00:13:33,509 --> 00:13:38,370
times<font color="#E5E5E5"> as the number of states that we</font>

274
00:13:35,819 --> 00:13:41,399
<font color="#CCCCCC">have then we really need here this is</font>

275
00:13:38,370 --> 00:13:44,129
where<font color="#E5E5E5"> security under power repetition is</font>

276
00:13:41,399 --> 00:13:48,029
needed<font color="#E5E5E5"> again for encryption this is this</font>

277
00:13:44,129 --> 00:13:52,730
<font color="#E5E5E5">is basically for</font><font color="#CCCCCC"> free okay so let's</font><font color="#E5E5E5"> look</font>

278
00:13:48,029 --> 00:13:57,269
a bit more closely<font color="#E5E5E5"> and try to understand</font>

279
00:13:52,730 --> 00:14:01,889
the different part here<font color="#CCCCCC"> so what what do</font>

280
00:13:57,269 --> 00:14:03,660
we want<font color="#E5E5E5"> from from these strings so from</font>

281
00:14:01,889 --> 00:14:05,550
the the string<font color="#CCCCCC"> it is</font><font color="#E5E5E5"> in charge of</font>

282
00:14:03,660 --> 00:14:08,610
correctness<font color="#E5E5E5"> what we're going to acquire</font>

283
00:14:05,550 --> 00:14:12,628
is that most of the time<font color="#E5E5E5"> for most</font>

284
00:14:08,610 --> 00:14:15,509
choices of of these strings<font color="#E5E5E5"> we're going</font>

285
00:14:12,629 --> 00:14:17,879
to have<font color="#E5E5E5"> perfect records regardless of</font>

286
00:14:15,509 --> 00:14:19,740
how you're going<font color="#E5E5E5"> to choose the</font>

287
00:14:17,879 --> 00:14:25,110
cryptographic string as long as<font color="#CCCCCC"> you</font>

288
00:14:19,740 --> 00:14:27,240
<font color="#CCCCCC">choose it correctly then we're promised</font>

289
00:14:25,110 --> 00:14:29,389
<font color="#E5E5E5">that we have perfect</font><font color="#CCCCCC"> work yes this is</font>

290
00:14:27,240 --> 00:14:31,980
what<font color="#E5E5E5"> we want from the the correctness</font>

291
00:14:29,389 --> 00:14:38,009
<font color="#E5E5E5">string what do we want from the security</font>

292
00:14:31,980 --> 00:14:40,589
string we want<font color="#E5E5E5"> that for any fixed string</font>

293
00:14:38,009 --> 00:14:42,689
<font color="#CCCCCC">one that is in</font><font color="#E5E5E5"> charge of correctness we</font>

294
00:14:40,589 --> 00:14:45,660
know exactly<font color="#E5E5E5"> how it generates just nice</font>

295
00:14:42,689 --> 00:14:48,379
and<font color="#E5E5E5"> rigorous on screen we have</font><font color="#CCCCCC"> security</font>

296
00:14:45,660 --> 00:14:50,910
<font color="#E5E5E5">when we sample</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> two at random</font>

297
00:14:48,379 --> 00:14:53,910
<font color="#CCCCCC">according to this cryptographic process</font>

298
00:14:50,910 --> 00:14:56,759
that we<font color="#E5E5E5"> need to describe okay so this is</font>

299
00:14:53,910 --> 00:15:00,230
<font color="#E5E5E5">basically what we want from the the two</font>

300
00:14:56,759 --> 00:15:03,809
strings<font color="#CCCCCC"> let me tell you how we get them</font>

301
00:15:00,230 --> 00:15:07,790
so let's start with<font color="#CCCCCC"> security because</font>

302
00:15:03,809 --> 00:15:10,230
this this<font color="#E5E5E5"> is sort of simple at least</font>

303
00:15:07,790 --> 00:15:12,480
understanding the transformation<font color="#E5E5E5"> itself</font>

304
00:15:10,230 --> 00:15:14,670
the way that we're<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> generate the</font>

305
00:15:12,480 --> 00:15:16,889
string is<font color="#E5E5E5"> in charge of</font><font color="#CCCCCC"> security</font><font color="#E5E5E5"> we're</font>

306
00:15:14,670 --> 00:15:19,439
going to generate randomness for each

307
00:15:16,889 --> 00:15:21,720
one of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> algorithms separately here we</font>

308
00:15:19,439 --> 00:15:24,420
have the encryption algorithm<font color="#E5E5E5"> and the</font>

309
00:15:21,720 --> 00:15:27,779
key<font color="#E5E5E5"> generation algorithm but we're not</font>

310
00:15:24,420 --> 00:15:30,329
<font color="#CCCCCC">just</font><font color="#E5E5E5"> going to sample them at random you</font>

311
00:15:27,779 --> 00:15:31,529
<font color="#CCCCCC">can think about it and see if you do</font>

312
00:15:30,329 --> 00:15:33,989
<font color="#E5E5E5">that then</font>

313
00:15:31,529 --> 00:15:35,819
won't<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> ensure correctness</font><font color="#CCCCCC"> the</font>

314
00:15:33,990 --> 00:15:38,100
<font color="#CCCCCC">way</font><font color="#E5E5E5"> that we're going to do this is we're</font>

315
00:15:35,819 --> 00:15:41,579
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> use cryptographic</font><font color="#E5E5E5"> pseudo-random</font>

316
00:15:38,100 --> 00:15:43,769
generators<font color="#CCCCCC"> okay so each one of the the</font>

317
00:15:41,579 --> 00:15:46,620
strings<font color="#E5E5E5"> for the cryptographic algorithms</font>

318
00:15:43,769 --> 00:15:48,990
<font color="#E5E5E5">is going to be</font><font color="#CCCCCC"> January using a</font>

319
00:15:46,620 --> 00:15:50,639
pseudo-random generator<font color="#E5E5E5"> the usual one</font>

320
00:15:48,990 --> 00:15:53,490
the one that<font color="#CCCCCC"> you're used to</font><font color="#E5E5E5"> thinking</font>

321
00:15:50,639 --> 00:15:56,370
about<font color="#E5E5E5"> and all that we're going to need</font>

322
00:15:53,490 --> 00:15:59,069
is that its image<font color="#E5E5E5"> is sort of sparse</font>

323
00:15:56,370 --> 00:16:01,980
enough so it's expanding enough<font color="#E5E5E5"> we'll</font>

324
00:15:59,069 --> 00:16:03,660
see in a second where it comes<font color="#CCCCCC"> into the</font>

325
00:16:01,980 --> 00:16:06,480
<font color="#E5E5E5">picture</font><font color="#CCCCCC"> but at least</font><font color="#E5E5E5"> in terms of</font>

326
00:16:03,660 --> 00:16:07,139
security<font color="#E5E5E5"> it's clear that this is</font><font color="#CCCCCC"> okay</font>

327
00:16:06,480 --> 00:16:10,819
right

328
00:16:07,139 --> 00:16:14,639
<font color="#CCCCCC">so pseudo-random strings are as good as</font>

329
00:16:10,819 --> 00:16:16,878
<font color="#E5E5E5">truly random strings so our our our</font>

330
00:16:14,639 --> 00:16:21,059
cryptographic schemes are basically

331
00:16:16,879 --> 00:16:26,129
<font color="#E5E5E5">using kosher randomness and everything</font>

332
00:16:21,059 --> 00:16:28,620
will<font color="#E5E5E5"> be secure as we expect so let's try</font>

333
00:16:26,129 --> 00:16:32,519
<font color="#E5E5E5">to understand now where does correctness</font>

334
00:16:28,620 --> 00:16:37,410
come from and why is<font color="#E5E5E5"> it the</font><font color="#CCCCCC"> case that</font>

335
00:16:32,519 --> 00:16:39,089
<font color="#E5E5E5">for most strings are one will get</font>

336
00:16:37,410 --> 00:16:42,689
correct<font color="#E5E5E5"> will get perfect correctness</font>

337
00:16:39,089 --> 00:16:44,279
basically<font color="#E5E5E5"> so here's what we want to do</font>

338
00:16:42,689 --> 00:16:47,370
what<font color="#E5E5E5"> we want to do here</font><font color="#CCCCCC"> is we basically</font>

339
00:16:44,279 --> 00:16:49,889
want to think<font color="#E5E5E5"> about the randomness space</font>

340
00:16:47,370 --> 00:16:51,720
for the scheme<font color="#CCCCCC"> that we care about</font><font color="#E5E5E5"> in</font>

341
00:16:49,889 --> 00:16:54,839
this<font color="#E5E5E5"> case the public key encryption</font>

342
00:16:51,720 --> 00:16:58,110
scheme and we know that it has a set of

343
00:16:54,839 --> 00:17:01,199
<font color="#E5E5E5">bed randomness we said that it's</font><font color="#CCCCCC"> not too</font>

344
00:16:58,110 --> 00:17:03,029
large<font color="#E5E5E5"> it's it's less than than half and</font>

345
00:17:01,199 --> 00:17:08,250
<font color="#E5E5E5">actually I'm going to assume</font><font color="#CCCCCC"> that it's</font>

346
00:17:03,029 --> 00:17:10,169
really tiny<font color="#CCCCCC"> okay negligibly small can</font>

347
00:17:08,250 --> 00:17:11,819
thing about<font color="#CCCCCC"> it is exponentially small</font>

348
00:17:10,169 --> 00:17:14,159
this<font color="#E5E5E5"> is actually without loss of</font>

349
00:17:11,819 --> 00:17:17,849
generality we<font color="#E5E5E5"> can amplify here by yeah</font>

350
00:17:14,159 --> 00:17:20,490
<font color="#E5E5E5">by repetition</font><font color="#CCCCCC"> so we have this tiny</font><font color="#E5E5E5"> set</font>

351
00:17:17,849 --> 00:17:22,708
of bed randomness<font color="#E5E5E5"> those random strings</font>

352
00:17:20,490 --> 00:17:26,010
that<font color="#E5E5E5"> would lead to the crip</font><font color="#CCCCCC"> ssin errors</font>

353
00:17:22,709 --> 00:17:29,130
<font color="#E5E5E5">okay now if we look at the the</font><font color="#CCCCCC"> first</font>

354
00:17:26,010 --> 00:17:30,330
<font color="#E5E5E5">part of our</font><font color="#CCCCCC"> string okay that we generate</font>

355
00:17:29,130 --> 00:17:33,299
<font color="#E5E5E5">with the with the pseudo-random</font>

356
00:17:30,330 --> 00:17:35,158
generator then it already<font color="#E5E5E5"> seems like</font>

357
00:17:33,299 --> 00:17:37,918
we're getting<font color="#E5E5E5"> somewhere in the sense</font>

358
00:17:35,159 --> 00:17:39,510
that we know that this the<font color="#E5E5E5"> image set of</font>

359
00:17:37,919 --> 00:17:41,970
the pseudo-random generator is also

360
00:17:39,510 --> 00:17:44,610
<font color="#E5E5E5">pretty small right because it's a random</font>

361
00:17:41,970 --> 00:17:45,760
<font color="#CCCCCC">generator it's very expanding the image</font>

362
00:17:44,610 --> 00:17:48,340
is<font color="#CCCCCC"> very</font>

363
00:17:45,760 --> 00:17:52,300
so at least we can<font color="#E5E5E5"> hope</font><font color="#CCCCCC"> that we can</font><font color="#E5E5E5"> sort</font>

364
00:17:48,340 --> 00:17:55,959
of live in the same in<font color="#E5E5E5"> the same reality</font>

365
00:17:52,300 --> 00:17:57,520
without conflicting but of course that

366
00:17:55,960 --> 00:18:00,670
you know<font color="#E5E5E5"> in the worst case it could be</font>

367
00:17:57,520 --> 00:18:04,660
<font color="#E5E5E5">that these pseudo random strings do</font>

368
00:18:00,670 --> 00:18:06,640
<font color="#E5E5E5">intersect with our bad random strings</font>

369
00:18:04,660 --> 00:18:10,120
for the<font color="#E5E5E5"> algorithm so what we basically</font>

370
00:18:06,640 --> 00:18:12,370
<font color="#E5E5E5">do is just shift them at</font><font color="#CCCCCC"> random okay so</font>

371
00:18:10,120 --> 00:18:14,020
this is the the second part of the

372
00:18:12,370 --> 00:18:16,300
string that<font color="#CCCCCC"> is in charge of correctness</font>

373
00:18:14,020 --> 00:18:20,680
<font color="#E5E5E5">and what this guy does</font><font color="#CCCCCC"> is basically just</font>

374
00:18:16,300 --> 00:18:23,320
shift the bad set of<font color="#E5E5E5"> strings</font><font color="#CCCCCC"> were</font>

375
00:18:20,680 --> 00:18:25,930
<font color="#E5E5E5">actually the pseudo random strings at</font>

376
00:18:23,320 --> 00:18:29,110
random<font color="#E5E5E5"> and we know that with very high</font>

377
00:18:25,930 --> 00:18:32,350
probability<font color="#CCCCCC"> can take a union bound</font><font color="#E5E5E5"> this</font>

378
00:18:29,110 --> 00:18:35,229
set would<font color="#CCCCCC"> usually</font><font color="#E5E5E5"> not intersect the</font><font color="#CCCCCC"> bed</font>

379
00:18:32,350 --> 00:18:40,719
set of randomness<font color="#E5E5E5"> and will certainly</font>

380
00:18:35,230 --> 00:18:44,320
<font color="#CCCCCC">occur for most four more strings so this</font>

381
00:18:40,720 --> 00:18:46,750
is the<font color="#CCCCCC"> the basic</font><font color="#E5E5E5"> idea and it's actually</font>

382
00:18:44,320 --> 00:18:51,460
a known idea this<font color="#E5E5E5"> is something</font><font color="#CCCCCC"> that is</font>

383
00:18:46,750 --> 00:18:54,370
known as<font color="#CCCCCC"> reverse randomization this this</font>

384
00:18:51,460 --> 00:18:58,930
trick of<font color="#CCCCCC"> just shifting your your space</font>

385
00:18:54,370 --> 00:19:01,810
<font color="#E5E5E5">of randomness it goes back to last</font>

386
00:18:58,930 --> 00:19:05,020
<font color="#CCCCCC">month's proof that in the polynomial</font>

387
00:19:01,810 --> 00:19:08,290
hierarchy<font color="#E5E5E5"> it has since then many</font>

388
00:19:05,020 --> 00:19:11,350
cryptographic applications<font color="#CCCCCC"> you might see</font>

389
00:19:08,290 --> 00:19:14,830
that<font color="#E5E5E5"> they have something in in common I</font>

390
00:19:11,350 --> 00:19:17,459
don't know maybe<font color="#E5E5E5"> now you see that they</font>

391
00:19:14,830 --> 00:19:20,010
<font color="#E5E5E5">have something in</font><font color="#CCCCCC"> common of these</font>

392
00:19:17,460 --> 00:19:23,050
applications and if you're<font color="#E5E5E5"> color blind</font>

393
00:19:20,010 --> 00:19:25,690
<font color="#E5E5E5">maybe now you can you can see that yeah</font>

394
00:19:23,050 --> 00:19:29,379
this is a trick<font color="#CCCCCC"> that for some reason</font>

395
00:19:25,690 --> 00:19:31,780
morning or used again again again<font color="#CCCCCC"> I</font>

396
00:19:29,380 --> 00:19:35,790
almost felt<font color="#CCCCCC"> like we need to call</font><font color="#E5E5E5"> him and</font>

397
00:19:31,780 --> 00:19:38,590
<font color="#CCCCCC">ask if it's</font><font color="#E5E5E5"> okay to use this trick here</font>

398
00:19:35,790 --> 00:19:40,408
<font color="#CCCCCC">okay so</font><font color="#E5E5E5"> this is one remark this is a</font>

399
00:19:38,590 --> 00:19:43,439
pretty<font color="#CCCCCC"> useful</font>

400
00:19:40,409 --> 00:19:47,009
idea<font color="#CCCCCC"> the second one is I didn't</font><font color="#E5E5E5"> really</font>

401
00:19:43,440 --> 00:19:48,690
tell you where we<font color="#CCCCCC"> used</font><font color="#E5E5E5"> sort of</font>

402
00:19:47,009 --> 00:19:51,600
<font color="#CCCCCC">randomness</font><font color="#E5E5E5"> against non-deterministic</font>

403
00:19:48,690 --> 00:19:53,730
algorithm<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> said that we need our</font>

404
00:19:51,600 --> 00:19:55,259
pseudo-random<font color="#CCCCCC"> Denise</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Viktor some</font>

405
00:19:53,730 --> 00:19:57,779
pseudo random generator to also fool

406
00:19:55,259 --> 00:19:59,549
<font color="#E5E5E5">non-deterministic algorithm and the</font>

407
00:19:57,779 --> 00:20:05,130
reason is the<font color="#CCCCCC"> following the reason is</font>

408
00:19:59,549 --> 00:20:07,139
that testing<font color="#E5E5E5"> that actually this string</font>

409
00:20:05,130 --> 00:20:09,570
<font color="#E5E5E5">it is</font><font color="#CCCCCC"> in charge of correctness is</font><font color="#E5E5E5"> really</font>

410
00:20:07,139 --> 00:20:12,629
<font color="#E5E5E5">good namely doesn't intersect the best</font>

411
00:20:09,570 --> 00:20:13,439
sort of<font color="#E5E5E5"> randomness is not something it's</font>

412
00:20:12,629 --> 00:20:15,389
something<font color="#CCCCCC"> that we can do very</font>

413
00:20:13,440 --> 00:20:17,460
<font color="#E5E5E5">efficiently but not a terminus</font><font color="#CCCCCC"> tically</font>

414
00:20:15,389 --> 00:20:19,678
because we need to<font color="#E5E5E5"> know the seed for the</font>

415
00:20:17,460 --> 00:20:22,409
pseudo-random<font color="#E5E5E5"> generator</font><font color="#CCCCCC"> okay and this</font><font color="#E5E5E5"> is</font>

416
00:20:19,679 --> 00:20:23,580
<font color="#CCCCCC">something that</font><font color="#E5E5E5"> you can guess but you</font>

417
00:20:22,409 --> 00:20:25,350
cannot do it

418
00:20:23,580 --> 00:20:30,379
deterministically and this is where it

419
00:20:25,350 --> 00:20:33,209
comes<font color="#E5E5E5"> from</font><font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> let</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> end just by by</font>

420
00:20:30,379 --> 00:20:35,820
<font color="#CCCCCC">giving a recap of this of this</font>

421
00:20:33,210 --> 00:20:37,289
construction which is<font color="#E5E5E5"> pretty simple</font><font color="#CCCCCC"> at</font>

422
00:20:35,820 --> 00:20:39,629
<font color="#E5E5E5">the end of the day you take</font><font color="#CCCCCC"> your random</font>

423
00:20:37,289 --> 00:20:41,940
string<font color="#E5E5E5"> you split it into two parts</font><font color="#CCCCCC"> you</font>

424
00:20:39,629 --> 00:20:45,389
<font color="#E5E5E5">generate one with cryptographic sort of</font>

425
00:20:41,940 --> 00:20:46,620
randomness<font color="#E5E5E5"> the other was the observer</font>

426
00:20:45,389 --> 00:20:49,019
<font color="#E5E5E5">and</font><font color="#CCCCCC"> Ernest you need for the</font>

427
00:20:46,620 --> 00:20:51,629
randomization<font color="#E5E5E5"> in complexity and you take</font>

428
00:20:49,019 --> 00:20:55,460
the majority<font color="#E5E5E5"> that that's the entire</font>

429
00:20:51,629 --> 00:21:01,209
transformation<font color="#E5E5E5"> so that's it thank you</font>

430
00:20:55,460 --> 00:21:03,140
[Applause]

431
00:21:01,210 --> 00:21:17,000
<font color="#E5E5E5">okay thanks</font><font color="#CCCCCC"> for the topcryo</font>

432
00:21:03,140 --> 00:21:18,380
<font color="#E5E5E5">sometimes for questions if game so can</font>

433
00:21:17,000 --> 00:21:20,030
<font color="#E5E5E5">you explain to me why</font><font color="#CCCCCC"> can't use an</font><font color="#E5E5E5"> hour</font>

434
00:21:18,380 --> 00:21:21,890
strict directly just<font color="#E5E5E5"> you know using the</font>

435
00:21:20,030 --> 00:21:27,200
short seat for the PRG and assuming<font color="#CCCCCC"> that</font>

436
00:21:21,890 --> 00:21:29,510
<font color="#E5E5E5">you will probably miss all the bats</font><font color="#CCCCCC"> so</font>

437
00:21:27,200 --> 00:21:30,980
the if you<font color="#E5E5E5"> use the north</font><font color="#CCCCCC"> streak what</font>

438
00:21:29,510 --> 00:21:32,929
<font color="#E5E5E5">you're stuck with is you have basically</font>

439
00:21:30,980 --> 00:21:35,000
you<font color="#E5E5E5"> can think about</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> as as an</font>

440
00:21:32,929 --> 00:21:37,909
intermediate<font color="#E5E5E5"> model where you have a</font>

441
00:21:35,000 --> 00:21:40,220
scheme that<font color="#CCCCCC"> you can sample one random</font>

442
00:21:37,909 --> 00:21:43,039
string this shift<font color="#CCCCCC"> that will</font><font color="#E5E5E5"> give you</font>

443
00:21:40,220 --> 00:21:44,720
perfect correctness<font color="#E5E5E5"> then you're fine but</font>

444
00:21:43,039 --> 00:21:46,669
now what about this random stream it has

445
00:21:44,720 --> 00:21:48,830
to come<font color="#E5E5E5"> from somewhere</font><font color="#CCCCCC"> so one thing</font><font color="#E5E5E5"> you</font>

446
00:21:46,669 --> 00:21:50,809
can<font color="#E5E5E5"> do is actually non-uniformly fix it</font>

447
00:21:48,830 --> 00:21:54,158
you'll get<font color="#E5E5E5"> a non uniform scheme and what</font>

448
00:21:50,809 --> 00:21:54,158
we do is do an demise it

