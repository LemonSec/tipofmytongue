1
00:00:00,030 --> 00:00:04,740
we'll give the talk<font color="#E5E5E5"> thanks Daniel so I'm</font>

2
00:00:02,820 --> 00:00:06,898
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> predictive automatic</font>

3
00:00:04,740 --> 00:00:08,820
functional encryption<font color="#E5E5E5"> and we will see</font>

4
00:00:06,899 --> 00:00:13,650
how<font color="#CCCCCC"> to use this to construct tire from</font>

5
00:00:08,820 --> 00:00:14,759
degree<font color="#CCCCCC"> 5</font><font color="#E5E5E5"> mention your Maps</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so in this</font>

6
00:00:13,650 --> 00:00:17,580
work we are going<font color="#CCCCCC"> to focus on</font>

7
00:00:14,759 --> 00:00:19,260
constructing<font color="#CCCCCC"> i/o</font><font color="#E5E5E5"> so all the current</font>

8
00:00:17,580 --> 00:00:22,470
<font color="#E5E5E5">known constructions of i/o are based on</font>

9
00:00:19,260 --> 00:00:24,090
<font color="#CCCCCC">multi-layered maps so multi on maps are</font>

10
00:00:22,470 --> 00:00:26,820
essentially generalizations of<font color="#E5E5E5"> binary</font><font color="#CCCCCC"> or</font>

11
00:00:24,090 --> 00:00:29,250
maps while binding your<font color="#E5E5E5"> Maps allows you</font>

12
00:00:26,820 --> 00:00:31,560
to compute quadratic functions<font color="#CCCCCC"> in</font>

13
00:00:29,250 --> 00:00:33,690
exponents on<font color="#CCCCCC"> the group multi lien Maps</font>

14
00:00:31,560 --> 00:00:37,199
allows you to compute higher degree

15
00:00:33,690 --> 00:00:39,209
polynomials in X 1 into<font color="#E5E5E5"> the group</font><font color="#CCCCCC"> ok and</font>

16
00:00:37,200 --> 00:00:41,809
in particular<font color="#CCCCCC"> we define</font><font color="#E5E5E5"> the greedy multi</font>

17
00:00:39,210 --> 00:00:44,129
<font color="#E5E5E5">maps to be one where you can compute</font>

18
00:00:41,809 --> 00:00:49,078
dignity polynomials in experience of the

19
00:00:44,129 --> 00:00:50,579
group so the natural question to ask<font color="#E5E5E5"> is</font>

20
00:00:49,079 --> 00:00:51,899
what<font color="#CCCCCC"> is the minimum degree of</font>

21
00:00:50,579 --> 00:00:55,530
<font color="#E5E5E5">multi-layer maps that you require to</font>

22
00:00:51,899 --> 00:00:57,660
<font color="#E5E5E5">construct i/o so the ideal goal would be</font>

23
00:00:55,530 --> 00:01:00,780
to<font color="#E5E5E5"> write so then we can just base I</font>

24
00:00:57,660 --> 00:01:02,940
<font color="#E5E5E5">owned by linear maps however the</font>

25
00:01:00,780 --> 00:01:06,060
original constructions<font color="#E5E5E5"> starting with</font>

26
00:01:02,940 --> 00:01:09,479
<font color="#E5E5E5">forget all built</font><font color="#CCCCCC"> io from polynomial</font>

27
00:01:06,060 --> 00:01:12,180
degree multi linear maps and last<font color="#E5E5E5"> you</font>

28
00:01:09,479 --> 00:01:13,979
<font color="#E5E5E5">recruit a very nice construction by</font><font color="#CCCCCC"> Lin</font>

29
00:01:12,180 --> 00:01:16,070
showed how to construct I go from

30
00:01:13,979 --> 00:01:19,759
constant<font color="#CCCCCC"> degree material Maps</font>

31
00:01:16,070 --> 00:01:22,470
however this constant was most large

32
00:01:19,759 --> 00:01:24,960
<font color="#E5E5E5">subsequently work by Lin and micro to</font>

33
00:01:22,470 --> 00:01:29,908
<font color="#CCCCCC">Nathan showed how</font><font color="#E5E5E5"> to achieve</font><font color="#CCCCCC"> i from 32</font>

34
00:01:24,960 --> 00:01:32,309
degree material<font color="#CCCCCC"> maps and in this work we</font>

35
00:01:29,909 --> 00:01:34,680
reduce<font color="#E5E5E5"> this degree further and we show</font>

36
00:01:32,310 --> 00:01:38,579
how<font color="#E5E5E5"> to construct I go from degree</font><font color="#CCCCCC"> 590</font>

37
00:01:34,680 --> 00:01:40,409
<font color="#CCCCCC">linear maps and non-root we show</font><font color="#E5E5E5"> we give</font>

38
00:01:38,579 --> 00:01:42,929
a new template to<font color="#E5E5E5"> construct</font><font color="#CCCCCC"> io from</font>

39
00:01:40,409 --> 00:01:44,850
constant degree<font color="#CCCCCC"> multi maps and we hope</font>

40
00:01:42,930 --> 00:01:50,520
<font color="#CCCCCC">that this template might be useful to</font>

41
00:01:44,850 --> 00:01:53,310
reduce<font color="#E5E5E5"> the degree further</font><font color="#CCCCCC"> so in order to</font>

42
00:01:50,520 --> 00:01:55,110
show<font color="#CCCCCC"> what is this template let us</font>

43
00:01:53,310 --> 00:01:58,140
revisit the template<font color="#CCCCCC"> of Lynn and micro</font>

44
00:01:55,110 --> 00:01:59,969
<font color="#CCCCCC">to nothing so they show how to construct</font>

45
00:01:58,140 --> 00:02:02,280
<font color="#CCCCCC">our from constant agreement in our Maps</font>

46
00:01:59,969 --> 00:02:05,539
<font color="#E5E5E5">by going through collision</font><font color="#CCCCCC"> resistant</font>

47
00:02:02,280 --> 00:02:08,340
function encryption for<font color="#E5E5E5"> boolean circuits</font>

48
00:02:05,540 --> 00:02:09,599
so in order<font color="#E5E5E5"> to construct collision</font>

49
00:02:08,340 --> 00:02:13,230
resistant function encryption<font color="#E5E5E5"> for</font>

50
00:02:09,598 --> 00:02:13,920
boolean<font color="#E5E5E5"> circuits</font><font color="#CCCCCC"> you need to first</font><font color="#E5E5E5"> start</font>

51
00:02:13,230 --> 00:02:17,250
with<font color="#E5E5E5"> M</font>

52
00:02:13,920 --> 00:02:19,679
which natively performs computations on

53
00:02:17,250 --> 00:02:21,810
elements or large fields so in order<font color="#E5E5E5"> to</font>

54
00:02:19,680 --> 00:02:23,580
construct<font color="#E5E5E5"> Fe for boolean circuits the</font>

55
00:02:21,810 --> 00:02:24,900
first step would be to sort<font color="#E5E5E5"> of ultimate</font>

56
00:02:23,580 --> 00:02:27,480
eyes this boolean circuit into an

57
00:02:24,900 --> 00:02:29,220
automatic circuit<font color="#E5E5E5"> and then perform and</font>

58
00:02:27,480 --> 00:02:32,429
map computations over<font color="#E5E5E5"> this automatic</font>

59
00:02:29,220 --> 00:02:34,890
<font color="#E5E5E5">circuit so this ultimate ization step</font>

60
00:02:32,430 --> 00:02:38,520
could<font color="#E5E5E5"> potentially increase the degree of</font>

61
00:02:34,890 --> 00:02:40,619
<font color="#E5E5E5">the boolean circuit you start with so in</font>

62
00:02:38,520 --> 00:02:44,760
<font color="#CCCCCC">order to</font><font color="#E5E5E5"> overcome this we introduce this</font>

63
00:02:40,620 --> 00:02:47,069
new template where we we introduce a

64
00:02:44,760 --> 00:02:50,549
notion<font color="#E5E5E5"> of Fe for arithmetic circuits and</font>

65
00:02:47,069 --> 00:02:52,768
<font color="#E5E5E5">we</font><font color="#CCCCCC"> show how</font><font color="#E5E5E5"> to construct</font><font color="#CCCCCC"> io from Fe for</font>

66
00:02:50,550 --> 00:02:54,690
automatic circuits and then we show how

67
00:02:52,769 --> 00:02:59,819
to achieve this notion<font color="#E5E5E5"> from constant</font>

68
00:02:54,690 --> 00:03:01,650
degree<font color="#CCCCCC"> multi-line Maps yeah</font><font color="#E5E5E5"> so as I said</font>

69
00:02:59,819 --> 00:03:05,250
PA Fe would be a version of function

70
00:03:01,650 --> 00:03:07,200
encryption for our<font color="#CCCCCC"> somatic circuits</font><font color="#E5E5E5"> so</font>

71
00:03:05,250 --> 00:03:10,350
let<font color="#E5E5E5"> me talk about our template in more</font>

72
00:03:07,200 --> 00:03:12,649
detail so<font color="#E5E5E5"> we start with degree deep</font>

73
00:03:10,350 --> 00:03:16,319
multilinear maps<font color="#E5E5E5"> and then we construct</font>

74
00:03:12,650 --> 00:03:18,720
<font color="#E5E5E5">PA Fe for dignity polynomials so</font><font color="#CCCCCC"> there D</font>

75
00:03:16,319 --> 00:03:21,780
in<font color="#E5E5E5"> D here is the same in this</font>

76
00:03:18,720 --> 00:03:26,299
transformation<font color="#CCCCCC"> and then we show how to</font>

77
00:03:21,780 --> 00:03:28,500
construct a sub linear secret key Fe for

78
00:03:26,299 --> 00:03:31,320
arbitrary polynomial size circuits

79
00:03:28,500 --> 00:03:34,109
<font color="#E5E5E5">starting from PA Fe 4 degree D</font>

80
00:03:31,320 --> 00:03:37,290
polynomials<font color="#E5E5E5"> and degree D randomizing</font>

81
00:03:34,109 --> 00:03:41,459
polynomials again here the<font color="#E5E5E5"> D is the same</font>

82
00:03:37,290 --> 00:03:49,828
and then using prior works we<font color="#E5E5E5"> can get</font><font color="#CCCCCC"> io</font>

83
00:03:41,459 --> 00:03:51,269
from Sabrina<font color="#CCCCCC"> secretly</font><font color="#E5E5E5"> Fe for all P so we</font>

84
00:03:49,829 --> 00:03:53,340
just have<font color="#CCCCCC"> to achieve</font><font color="#E5E5E5"> the first and the</font>

85
00:03:51,269 --> 00:03:56,940
second step the<font color="#CCCCCC"> third step is achieved</font>

86
00:03:53,340 --> 00:03:58,769
by prior works so when you instantiate

87
00:03:56,940 --> 00:04:02,069
the randomizing polynomials with degree

88
00:03:58,769 --> 00:04:06,900
<font color="#E5E5E5">5 randomizing polynomials are you get</font><font color="#CCCCCC"> IO</font>

89
00:04:02,069 --> 00:04:08,790
from degree<font color="#E5E5E5"> 5 multi linear</font><font color="#CCCCCC"> maps</font><font color="#E5E5E5"> and the</font>

90
00:04:06,900 --> 00:04:10,859
existence of degree 5 randomizing

91
00:04:08,790 --> 00:04:13,470
polynomials is based on<font color="#E5E5E5"> degree 5</font>

92
00:04:10,859 --> 00:04:21,209
pseudo-random generators with polynomial

93
00:04:13,470 --> 00:04:24,090
<font color="#CCCCCC">stretch concurrently Lin</font><font color="#E5E5E5"> showed how to</font>

94
00:04:21,209 --> 00:04:26,900
<font color="#E5E5E5">build</font><font color="#CCCCCC"> io assuming joint a</font><font color="#E5E5E5"> 60 H on degree</font>

95
00:04:24,090 --> 00:04:26,900
<font color="#E5E5E5">5</font><font color="#CCCCCC"> maintainer</font><font color="#E5E5E5"> Maps</font>

96
00:04:27,030 --> 00:04:36,070
<font color="#E5E5E5">okay so let me describe the technical</font>

97
00:04:31,930 --> 00:04:37,930
<font color="#E5E5E5">details so let me first start</font><font color="#CCCCCC"> by</font>

98
00:04:36,070 --> 00:04:42,400
defining the notion of projective<font color="#CCCCCC"> earth</font>

99
00:04:37,930 --> 00:04:44,199
<font color="#E5E5E5">medical field okay so as I said we need</font>

100
00:04:42,400 --> 00:04:47,229
<font color="#CCCCCC">to define a version of Fe</font><font color="#E5E5E5"> for arithmetic</font>

101
00:04:44,199 --> 00:04:49,120
<font color="#E5E5E5">circuits so the most brain-dead attempt</font>

102
00:04:47,229 --> 00:04:51,039
would<font color="#CCCCCC"> be to just take Fe for bullion</font>

103
00:04:49,120 --> 00:04:53,740
circuits<font color="#E5E5E5"> but instead of associating</font>

104
00:04:51,040 --> 00:04:57,540
<font color="#E5E5E5">functional</font><font color="#CCCCCC"> keys</font><font color="#E5E5E5"> for bullion circuits now</font>

105
00:04:53,740 --> 00:05:00,160
associate them with automatic circuits

106
00:04:57,540 --> 00:05:02,740
so what is the<font color="#CCCCCC"> problem</font><font color="#E5E5E5"> with defining</font>

107
00:05:00,160 --> 00:05:06,070
<font color="#E5E5E5">such a notion</font><font color="#CCCCCC"> the problem is that we</font>

108
00:05:02,740 --> 00:05:07,930
don't<font color="#E5E5E5"> know</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> to achieve this and the</font>

109
00:05:06,070 --> 00:05:10,210
and current techniques are<font color="#E5E5E5"> seem to be a</font>

110
00:05:07,930 --> 00:05:15,100
limiting<font color="#CCCCCC"> factor to achieve such a strong</font>

111
00:05:10,210 --> 00:05:18,039
notion<font color="#E5E5E5"> then what particularly if the</font>

112
00:05:15,100 --> 00:05:19,510
output of the<font color="#E5E5E5"> automatic circuits</font><font color="#CCCCCC"> or you</font>

113
00:05:18,039 --> 00:05:22,330
can also view<font color="#E5E5E5"> it as a polynomial is</font>

114
00:05:19,510 --> 00:05:26,680
large then we<font color="#E5E5E5"> don't know how to</font>

115
00:05:22,330 --> 00:05:30,520
<font color="#CCCCCC">construct this so to give more</font><font color="#E5E5E5"> intuition</font>

116
00:05:26,680 --> 00:05:32,050
if you look at<font color="#CCCCCC"> Fe schemes for</font><font color="#E5E5E5"> inner</font>

117
00:05:30,520 --> 00:05:35,590
products which<font color="#E5E5E5"> are based on</font><font color="#CCCCCC"> by linear</font>

118
00:05:32,050 --> 00:05:37,300
<font color="#CCCCCC">maps</font><font color="#E5E5E5"> the way decryption would work is in</font>

119
00:05:35,590 --> 00:05:39,638
the end you the output<font color="#CCCCCC"> of the</font>

120
00:05:37,300 --> 00:05:42,280
computation is available as the<font color="#E5E5E5"> exponent</font>

121
00:05:39,639 --> 00:05:45,340
of<font color="#E5E5E5"> a group and you recover this output</font>

122
00:05:42,280 --> 00:05:47,320
by performing<font color="#CCCCCC"> discrete law and you can</font>

123
00:05:45,340 --> 00:05:54,750
only do discrete log if this output<font color="#CCCCCC"> is</font>

124
00:05:47,320 --> 00:05:58,979
small<font color="#E5E5E5"> okay so let's define the notion of</font>

125
00:05:54,750 --> 00:06:02,889
<font color="#CCCCCC">PFE which sort of circumvents is subtly</font>

126
00:05:58,979 --> 00:06:05,740
so the basic<font color="#CCCCCC"> syntax is similar</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> FE</font>

127
00:06:02,889 --> 00:06:09,760
scheme except that we<font color="#E5E5E5"> have what we call</font>

128
00:06:05,740 --> 00:06:11,590
projective decrypt algorithm<font color="#CCCCCC"> just as in</font>

129
00:06:09,760 --> 00:06:14,800
<font color="#CCCCCC">FE scheme there is</font><font color="#E5E5E5"> an encryption</font><font color="#CCCCCC"> under</font>

130
00:06:11,590 --> 00:06:16,960
key<font color="#E5E5E5"> generation algorithm however the</font>

131
00:06:14,800 --> 00:06:18,910
decryption<font color="#E5E5E5"> of the functional key on the</font>

132
00:06:16,960 --> 00:06:22,299
ciphertext<font color="#CCCCCC"> is performed using a</font>

133
00:06:18,910 --> 00:06:25,300
projective decrypt algorithm that does

134
00:06:22,300 --> 00:06:26,979
not give you<font color="#CCCCCC"> the output in the clear</font><font color="#E5E5E5"> but</font>

135
00:06:25,300 --> 00:06:31,630
instead it<font color="#E5E5E5"> gives you an encoding of the</font>

136
00:06:26,979 --> 00:06:35,500
<font color="#E5E5E5">output</font><font color="#CCCCCC"> and if you have many</font><font color="#E5E5E5"> many such</font>

137
00:06:31,630 --> 00:06:38,860
<font color="#CCCCCC">encoding x' you can execute a recover</font>

138
00:06:35,500 --> 00:06:40,000
<font color="#E5E5E5">algorithm that takes as input a linear</font>

139
00:06:38,860 --> 00:06:42,370
function as well

140
00:06:40,000 --> 00:06:45,370
<font color="#E5E5E5">as many of these</font><font color="#CCCCCC"> and codings and it</font>

141
00:06:42,370 --> 00:06:48,460
outputs<font color="#E5E5E5"> a linear function of all these</font>

142
00:06:45,370 --> 00:06:57,280
<font color="#CCCCCC">elements in the clear as long as this</font>

143
00:06:48,460 --> 00:06:59,710
output<font color="#CCCCCC"> is small</font><font color="#E5E5E5"> okay so this is the this</font>

144
00:06:57,280 --> 00:07:02,289
<font color="#CCCCCC">is</font><font color="#E5E5E5"> the notion as I said the</font><font color="#CCCCCC"> notion is</font>

145
00:06:59,710 --> 00:07:04,120
similar to a fee scheme except that in a

146
00:07:02,290 --> 00:07:06,310
fee scheme<font color="#E5E5E5"> the output of the decryption</font>

147
00:07:04,120 --> 00:07:10,570
<font color="#E5E5E5">gives you the result in the clear</font>

148
00:07:06,310 --> 00:07:12,130
however<font color="#E5E5E5"> here it's an encoding and later</font>

149
00:07:10,570 --> 00:07:18,490
on you can<font color="#E5E5E5"> manipulate</font><font color="#CCCCCC"> these n coatings</font>

150
00:07:12,130 --> 00:07:21,430
to<font color="#E5E5E5"> recover result in the clear okay so</font>

151
00:07:18,490 --> 00:07:23,050
there are<font color="#CCCCCC"> two main properties associated</font>

152
00:07:21,430 --> 00:07:26,290
with<font color="#CCCCCC"> this</font><font color="#E5E5E5"> scheme I'm not going to talk</font>

153
00:07:23,050 --> 00:07:28,240
<font color="#CCCCCC">about</font><font color="#E5E5E5"> correctness</font><font color="#CCCCCC"> support</font><font color="#E5E5E5"> from</font>

154
00:07:26,290 --> 00:07:31,270
correctness there is efficiency property

155
00:07:28,240 --> 00:07:33,460
that says that the size<font color="#E5E5E5"> of the</font>

156
00:07:31,270 --> 00:07:36,150
encryption<font color="#E5E5E5"> should be a multiplicative</font>

157
00:07:33,460 --> 00:07:38,950
overhead in<font color="#CCCCCC"> the size of the message and</font>

158
00:07:36,150 --> 00:07:42,000
the multiplicative factor is polynomial

159
00:07:38,950 --> 00:07:44,950
<font color="#E5E5E5">in the security parameter and degree D</font>

160
00:07:42,000 --> 00:07:46,330
for this word<font color="#E5E5E5"> D will be constant</font><font color="#CCCCCC"> so you</font>

161
00:07:44,950 --> 00:07:50,590
can<font color="#E5E5E5"> just ignore the multiplicative</font>

162
00:07:46,330 --> 00:07:52,000
factor and for<font color="#CCCCCC"> security we are going to</font>

163
00:07:50,590 --> 00:07:55,659
define what<font color="#CCCCCC"> we call semi-functional</font>

164
00:07:52,000 --> 00:07:56,380
security<font color="#CCCCCC"> I won't have time to</font><font color="#E5E5E5"> go into</font>

165
00:07:55,660 --> 00:07:59,729
details

166
00:07:56,380 --> 00:08:02,260
so this secretary notion is inspired by

167
00:07:59,729 --> 00:08:07,090
<font color="#CCCCCC">a semi</font><font color="#E5E5E5"> functional security notions</font>

168
00:08:02,260 --> 00:08:09,039
defined for a<font color="#CCCCCC"> b and in in the context of</font>

169
00:08:07,090 --> 00:08:12,219
a<font color="#E5E5E5"> b it was introduced to capture</font>

170
00:08:09,040 --> 00:08:14,680
adaptive security however<font color="#E5E5E5"> in this work</font>

171
00:08:12,220 --> 00:08:18,040
we define this to achieve a weak form<font color="#E5E5E5"> of</font>

172
00:08:14,680 --> 00:08:24,970
function hiding that lets us prove

173
00:08:18,040 --> 00:08:27,220
things more easily<font color="#CCCCCC"> okay okay so now we</font>

174
00:08:24,970 --> 00:08:30,460
define<font color="#CCCCCC"> PA Fe so let's see how to</font>

175
00:08:27,220 --> 00:08:34,570
<font color="#E5E5E5">construct</font><font color="#CCCCCC"> sub linear secret he Fe from</font>

176
00:08:30,460 --> 00:08:40,809
<font color="#E5E5E5">PA Fe for</font><font color="#CCCCCC"> dignity polynomials and degree</font>

177
00:08:34,570 --> 00:08:43,120
D randomizing polynomials okay so<font color="#E5E5E5"> Ilan</font>

178
00:08:40,809 --> 00:08:45,939
gave a very nice definition<font color="#CCCCCC"> of Fe so let</font>

179
00:08:43,120 --> 00:08:48,760
me just define the sub linear sub<font color="#CCCCCC"> neora</font>

180
00:08:45,940 --> 00:08:52,300
<font color="#CCCCCC">T property that we need to place on on</font>

181
00:08:48,760 --> 00:08:53,920
the fee scheme so the sub linearity

182
00:08:52,300 --> 00:08:56,859
property just says that

183
00:08:53,920 --> 00:09:02,410
the time to encrypt a message<font color="#CCCCCC"> X</font><font color="#E5E5E5"> should</font>

184
00:08:56,860 --> 00:09:04,000
<font color="#CCCCCC">be sub linear in the circuit size times</font>

185
00:09:02,410 --> 00:09:08,740
some polynomial<font color="#E5E5E5"> in the security</font>

186
00:09:04,000 --> 00:09:10,390
<font color="#E5E5E5">parameter and the message length okay so</font>

187
00:09:08,740 --> 00:09:14,470
the other<font color="#E5E5E5"> two which I didn't define was</font>

188
00:09:10,390 --> 00:09:15,970
randomizing polynomials<font color="#CCCCCC"> if you're</font>

189
00:09:14,470 --> 00:09:19,360
familiar with randomized encoding<font color="#E5E5E5"> since</font>

190
00:09:15,970 --> 00:09:21,460
<font color="#E5E5E5">X essentially the same except that the</font>

191
00:09:19,360 --> 00:09:24,700
encoding algorithm is associated with

192
00:09:21,460 --> 00:09:29,410
polynomials<font color="#E5E5E5"> so the encode algorithm</font>

193
00:09:24,700 --> 00:09:33,370
takes as input a circuit<font color="#E5E5E5"> C and it breaks</font>

194
00:09:29,410 --> 00:09:37,959
it into<font color="#E5E5E5"> many polynomials</font><font color="#CCCCCC"> p1</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> PN an</font>

195
00:09:33,370 --> 00:09:40,600
<font color="#E5E5E5">input X and</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> random string are you can</font>

196
00:09:37,960 --> 00:09:43,510
essentially evaluate the polynomial P 1

197
00:09:40,600 --> 00:09:46,830
<font color="#E5E5E5">to P and on</font><font color="#CCCCCC"> X</font><font color="#E5E5E5"> comma R and the result is</font>

198
00:09:43,510 --> 00:09:50,740
the randomizing polynomial<font color="#E5E5E5"> of C comma X</font>

199
00:09:46,830 --> 00:09:53,830
and then there is a decode algorithm

200
00:09:50,740 --> 00:09:58,620
that takes us<font color="#E5E5E5"> input the output of all</font>

201
00:09:53,830 --> 00:10:02,260
<font color="#E5E5E5">these polynomials and it outputs C of X</font>

202
00:09:58,620 --> 00:10:04,900
and we define degree<font color="#E5E5E5"> D randomizing</font>

203
00:10:02,260 --> 00:10:09,390
polynomial to be<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> if all the</font>

204
00:10:04,900 --> 00:10:09,390
polynomials<font color="#E5E5E5"> are of degree at Mozza</font><font color="#CCCCCC"> T</font>

205
00:10:13,770 --> 00:10:18,720
<font color="#E5E5E5">okay so let's see how to construct</font>

206
00:10:16,320 --> 00:10:20,910
<font color="#CCCCCC">Sabrina or</font><font color="#E5E5E5"> Fe so let me give the key</font>

207
00:10:18,720 --> 00:10:25,110
<font color="#E5E5E5">generation algorithm you can figure out</font>

208
00:10:20,910 --> 00:10:27,500
<font color="#E5E5E5">the</font><font color="#CCCCCC"> setup algorithm</font><font color="#E5E5E5"> from this</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so we</font>

209
00:10:25,110 --> 00:10:31,500
have to<font color="#CCCCCC"> generate a key for circuit C</font>

210
00:10:27,500 --> 00:10:33,900
first<font color="#E5E5E5"> execute the randomizing polynomial</font>

211
00:10:31,500 --> 00:10:38,340
<font color="#CCCCCC">in coding scheme on C to</font><font color="#E5E5E5"> get polynomials</font>

212
00:10:33,900 --> 00:10:41,449
<font color="#E5E5E5">P want to be n and then generate PFE</font>

213
00:10:38,340 --> 00:10:47,430
keys for each one<font color="#CCCCCC"> of these polynomials</font>

214
00:10:41,450 --> 00:10:49,110
and and then the functional key

215
00:10:47,430 --> 00:10:51,300
corresponding<font color="#E5E5E5"> to C will be</font><font color="#CCCCCC"> the</font>

216
00:10:49,110 --> 00:10:56,790
<font color="#E5E5E5">collection of all these</font><font color="#CCCCCC"> PFE functional</font>

217
00:10:51,300 --> 00:10:59,130
<font color="#E5E5E5">keys this</font><font color="#CCCCCC"> is the key</font><font color="#E5E5E5"> generation</font>

218
00:10:56,790 --> 00:11:02,189
algorithm so<font color="#E5E5E5"> the encryption</font><font color="#CCCCCC"> algorithm</font>

219
00:10:59,130 --> 00:11:05,310
takes us input<font color="#E5E5E5"> X and picks a random</font>

220
00:11:02,190 --> 00:11:14,280
string<font color="#CCCCCC"> R and then</font><font color="#E5E5E5"> executes</font><font color="#CCCCCC"> sappy FA</font>

221
00:11:05,310 --> 00:11:17,280
encryption<font color="#E5E5E5"> of</font><font color="#CCCCCC"> X comma R and how do you</font>

222
00:11:14,280 --> 00:11:19,770
perform<font color="#E5E5E5"> before we talk about decryption</font>

223
00:11:17,280 --> 00:11:21,390
<font color="#E5E5E5">so one thing here is that we want the</font>

224
00:11:19,770 --> 00:11:24,000
size of the random string to be<font color="#E5E5E5"> small</font>

225
00:11:21,390 --> 00:11:27,870
right<font color="#CCCCCC"> because we</font><font color="#E5E5E5"> are constructing</font><font color="#CCCCCC"> sub</font>

226
00:11:24,000 --> 00:11:29,700
<font color="#CCCCCC">linear Fe and we require</font><font color="#E5E5E5"> that the</font>

227
00:11:27,870 --> 00:11:31,830
<font color="#CCCCCC">ciphertext</font><font color="#E5E5E5"> is sub</font><font color="#CCCCCC"> linear in a circuit</font>

228
00:11:29,700 --> 00:11:34,590
length<font color="#E5E5E5"> and so if the random string was</font>

229
00:11:31,830 --> 00:11:36,540
as large as the size of<font color="#E5E5E5"> the circuit then</font>

230
00:11:34,590 --> 00:11:40,860
<font color="#CCCCCC">if the sub linearity property</font><font color="#E5E5E5"> is</font>

231
00:11:36,540 --> 00:11:42,180
destroyed<font color="#E5E5E5"> so in order to achieve this</font>

232
00:11:40,860 --> 00:11:43,920
property we<font color="#CCCCCC"> are going to place the</font>

233
00:11:42,180 --> 00:11:46,620
constraint on the randomizing polynomial

234
00:11:43,920 --> 00:11:54,140
scheme that the randomness is<font color="#E5E5E5"> subliminal</font>

235
00:11:46,620 --> 00:11:56,640
<font color="#CCCCCC">sub head size okay so the</font><font color="#E5E5E5"> decryption is</font>

236
00:11:54,140 --> 00:12:00,060
straightforward<font color="#E5E5E5"> so you have all these</font>

237
00:11:56,640 --> 00:12:02,250
<font color="#CCCCCC">PFE functional keys</font><font color="#E5E5E5"> and you have the PFA</font>

238
00:12:00,060 --> 00:12:04,859
<font color="#E5E5E5">ciphertext you just execute the</font>

239
00:12:02,250 --> 00:12:06,270
projective decrypt algorithm to get the

240
00:12:04,860 --> 00:12:09,480
<font color="#E5E5E5">in codings of the output of the</font>

241
00:12:06,270 --> 00:12:11,910
polynomials and<font color="#CCCCCC"> then you</font><font color="#E5E5E5"> execute the</font>

242
00:12:09,480 --> 00:12:14,280
recover algorithm to obtain the

243
00:12:11,910 --> 00:12:17,370
randomized encoding of<font color="#CCCCCC"> C</font><font color="#E5E5E5"> comics in the</font>

244
00:12:14,280 --> 00:12:20,870
<font color="#CCCCCC">clear and then you execute the decoding</font>

245
00:12:17,370 --> 00:12:20,870
procedure of the randomizing<font color="#CCCCCC"> pomeranski</font>

246
00:12:24,259 --> 00:12:33,809
<font color="#E5E5E5">okay so with this</font><font color="#CCCCCC"> yeah I'm not going to</font>

247
00:12:28,679 --> 00:12:35,459
talk<font color="#CCCCCC"> about the security that can be you</font>

248
00:12:33,809 --> 00:12:37,709
can<font color="#E5E5E5"> reduce the</font><font color="#CCCCCC"> security of the sub</font><font color="#E5E5E5"> D or</font>

249
00:12:35,459 --> 00:12:39,149
<font color="#E5E5E5">F</font><font color="#CCCCCC"> II scheme on the semi function and</font>

250
00:12:37,709 --> 00:12:40,978
security of the PFA scheme and the

251
00:12:39,149 --> 00:12:43,979
security of randomizing polynomial

252
00:12:40,979 --> 00:12:47,009
scheme okay so let's see how<font color="#E5E5E5"> to</font>

253
00:12:43,979 --> 00:12:49,379
instantiate the randomizing polynomials

254
00:12:47,009 --> 00:12:52,289
using degree<font color="#CCCCCC"> 5 randomizing polynomials</font>

255
00:12:49,379 --> 00:12:54,079
so the first attempt would<font color="#E5E5E5"> be to take a</font>

256
00:12:52,289 --> 00:12:58,259
<font color="#E5E5E5">degree</font><font color="#CCCCCC"> three randomizing polynomials</font>

257
00:12:54,079 --> 00:12:59,878
polynomials scheme and note<font color="#CCCCCC"> that this</font>

258
00:12:58,259 --> 00:13:03,239
scheme does not<font color="#E5E5E5"> have the sub linearity</font>

259
00:12:59,879 --> 00:13:04,799
property<font color="#E5E5E5"> in particular the size of the</font>

260
00:13:03,239 --> 00:13:08,309
random string would<font color="#E5E5E5"> be</font><font color="#CCCCCC"> proportional to</font>

261
00:13:04,799 --> 00:13:10,079
<font color="#E5E5E5">the circuit size</font><font color="#CCCCCC"> a trivial approach to</font>

262
00:13:08,309 --> 00:13:13,019
compress the randomness is just use

263
00:13:10,079 --> 00:13:16,799
<font color="#CCCCCC">prc's right and we want to use low</font>

264
00:13:13,019 --> 00:13:19,439
degree<font color="#E5E5E5"> PR</font><font color="#CCCCCC"> Z's</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> so we</font><font color="#E5E5E5"> are going to use</font>

265
00:13:16,799 --> 00:13:24,478
degree<font color="#E5E5E5"> 5</font><font color="#CCCCCC"> PR</font><font color="#E5E5E5"> these that achieves</font>

266
00:13:19,439 --> 00:13:26,069
polynomial stretch and now if you plug

267
00:13:24,479 --> 00:13:27,869
<font color="#CCCCCC">in the PRG see in the randomizing</font>

268
00:13:26,069 --> 00:13:29,789
polynomial scheme you will end up<font color="#CCCCCC"> with</font>

269
00:13:27,869 --> 00:13:32,220
the new randomizing polynomial scheme

270
00:13:29,789 --> 00:13:40,019
that achieves the sub linearity property

271
00:13:32,220 --> 00:13:42,479
<font color="#E5E5E5">and now has degree 15 and the question</font>

272
00:13:40,019 --> 00:13:45,359
is how do we<font color="#E5E5E5"> get this degree 5 PR</font><font color="#CCCCCC"> geez</font>

273
00:13:42,479 --> 00:13:48,239
there is a<font color="#E5E5E5"> goal Drake PhD candidate</font>

274
00:13:45,359 --> 00:13:49,979
<font color="#CCCCCC">which can be which is which was proposed</font>

275
00:13:48,239 --> 00:13:53,039
in the boolean<font color="#E5E5E5"> setting but again we can</font>

276
00:13:49,979 --> 00:13:57,659
convert<font color="#CCCCCC"> that into in the in the</font>

277
00:13:53,039 --> 00:14:00,059
arithmetic setting and in<font color="#E5E5E5"> the boolean</font>

278
00:13:57,659 --> 00:14:02,929
setting the degree is 2<font color="#CCCCCC"> and when you</font>

279
00:14:00,059 --> 00:14:05,699
construct<font color="#E5E5E5"> it into it constructed</font>

280
00:14:02,929 --> 00:14:08,608
consider this<font color="#CCCCCC"> notion in the</font><font color="#E5E5E5"> automatic</font>

281
00:14:05,699 --> 00:14:10,949
<font color="#E5E5E5">setting then the degree becomes 5 and</font>

282
00:14:08,609 --> 00:14:14,220
the security of this candidate was

283
00:14:10,949 --> 00:14:21,988
analyzed<font color="#E5E5E5"> by Ryan O'Donnell and</font><font color="#CCCCCC"> whitmer</font>

284
00:14:14,220 --> 00:14:26,249
in 2014<font color="#CCCCCC"> ok and in order to</font><font color="#E5E5E5"> reduce the</font>

285
00:14:21,989 --> 00:14:28,019
degree further from 15 to 5<font color="#CCCCCC"> we use some</font>

286
00:14:26,249 --> 00:14:31,439
pre-processing trick that I won't<font color="#E5E5E5"> have</font>

287
00:14:28,019 --> 00:14:33,839
<font color="#E5E5E5">time to go into detail so in this trick</font>

288
00:14:31,439 --> 00:14:35,789
we essentially pre compute some partial

289
00:14:33,839 --> 00:14:36,380
terms in the polynomials as part of the

290
00:14:35,789 --> 00:14:40,040
<font color="#E5E5E5">encryption</font>

291
00:14:36,380 --> 00:14:42,470
self and the degree of the new

292
00:14:40,040 --> 00:14:51,230
randomizing<font color="#E5E5E5"> polynomial would be degree</font>

293
00:14:42,470 --> 00:14:54,470
<font color="#CCCCCC">five in all the pre-computer terms</font><font color="#E5E5E5"> okay</font>

294
00:14:51,230 --> 00:14:56,720
so let<font color="#CCCCCC"> me explain the last step where we</font>

295
00:14:54,470 --> 00:15:01,760
have to get<font color="#E5E5E5"> PFE for degree D polynomials</font>

296
00:14:56,720 --> 00:15:04,280
from degree B<font color="#CCCCCC"> Multan your</font><font color="#E5E5E5"> Maps okay so</font>

297
00:15:01,760 --> 00:15:06,740
in order to do<font color="#E5E5E5"> this let me</font><font color="#CCCCCC"> define an</font>

298
00:15:04,280 --> 00:15:09,410
abstract<font color="#CCCCCC"> notion that we call slotted end</font>

299
00:15:06,740 --> 00:15:12,860
<font color="#CCCCCC">codings</font><font color="#E5E5E5"> so this is an abstraction of</font>

300
00:15:09,410 --> 00:15:15,439
composite<font color="#E5E5E5"> ordered multi linear maps as</font>

301
00:15:12,860 --> 00:15:17,720
in composite<font color="#E5E5E5"> ordered multi in</font><font color="#CCCCCC"> maps</font><font color="#E5E5E5"> we</font>

302
00:15:15,440 --> 00:15:18,200
encode a vector as I can is just<font color="#E5E5E5"> one</font>

303
00:15:17,720 --> 00:15:20,240
element

304
00:15:18,200 --> 00:15:25,190
so suppose<font color="#E5E5E5"> let's say you have a vector</font>

305
00:15:20,240 --> 00:15:28,750
<font color="#E5E5E5">ABC you encode ABC with respect to some</font>

306
00:15:25,190 --> 00:15:32,060
color for<font color="#CCCCCC"> instance here it's orange</font><font color="#E5E5E5"> and</font>

307
00:15:28,750 --> 00:15:33,590
<font color="#CCCCCC">now</font><font color="#E5E5E5"> we can perform some operations such</font>

308
00:15:32,060 --> 00:15:35,780
as addition<font color="#E5E5E5"> and multiplication on these</font>

309
00:15:33,590 --> 00:15:38,900
encoding<font color="#E5E5E5"> so if you want to perform</font>

310
00:15:35,780 --> 00:15:40,810
addition then you need to consider<font color="#E5E5E5"> n</font>

311
00:15:38,900 --> 00:15:43,280
<font color="#CCCCCC">coatings</font><font color="#E5E5E5"> of the same color</font>

312
00:15:40,810 --> 00:15:46,670
suppose let's say you have encoding a 1

313
00:15:43,280 --> 00:15:49,819
B<font color="#E5E5E5"> 1 C 1 and a 2 B 2 C 2 with</font><font color="#CCCCCC"> respect</font><font color="#E5E5E5"> to</font>

314
00:15:46,670 --> 00:15:52,849
the same color and then you can add both

315
00:15:49,820 --> 00:15:56,090
<font color="#E5E5E5">of them to get a new encoding a 1 plus a</font>

316
00:15:52,850 --> 00:15:57,590
2 B<font color="#E5E5E5"> 1 plus B</font><font color="#CCCCCC"> 2 and C 1</font><font color="#E5E5E5"> plus C 2 so we're</font>

317
00:15:56,090 --> 00:16:01,670
essentially performing component wise

318
00:15:57,590 --> 00:16:04,550
addition<font color="#E5E5E5"> and the multiplication is</font>

319
00:16:01,670 --> 00:16:07,969
performed on encoding with respect to

320
00:16:04,550 --> 00:16:09,680
some compatible colors<font color="#CCCCCC"> what pair of</font>

321
00:16:07,970 --> 00:16:11,600
colors are<font color="#CCCCCC"> compatible is sort of</font>

322
00:16:09,680 --> 00:16:14,540
dictated<font color="#CCCCCC"> by the rules associated</font><font color="#E5E5E5"> with</font>

323
00:16:11,600 --> 00:16:17,900
the scheme so suppose let's say you have

324
00:16:14,540 --> 00:16:21,319
encoding a 1 B<font color="#E5E5E5"> 1 C 1</font><font color="#CCCCCC"> and a 2 B 2</font><font color="#E5E5E5"> C</font><font color="#CCCCCC"> 2</font>

325
00:16:17,900 --> 00:16:24,199
then finally you'll get an encoding

326
00:16:21,320 --> 00:16:28,010
corresponding to a 1<font color="#E5E5E5"> a 2 B 1 B 2</font><font color="#CCCCCC"> and C</font><font color="#E5E5E5"> 1</font>

327
00:16:24,200 --> 00:16:30,020
<font color="#E5E5E5">C</font><font color="#CCCCCC"> 2 so even for multiplication even</font>

328
00:16:28,010 --> 00:16:34,790
multiplication<font color="#CCCCCC"> has</font><font color="#E5E5E5"> performed component</font>

329
00:16:30,020 --> 00:16:37,040
wise and finally there's a<font color="#CCCCCC"> 0 test</font>

330
00:16:34,790 --> 00:16:38,990
operation that is performed for<font color="#E5E5E5"> on</font>

331
00:16:37,040 --> 00:16:41,360
encoding with respect to<font color="#E5E5E5"> color red</font>

332
00:16:38,990 --> 00:16:45,290
so suppose let's say you have encoding

333
00:16:41,360 --> 00:16:49,730
ABC<font color="#E5E5E5"> and you say that this encoding is 0</font>

334
00:16:45,290 --> 00:16:52,699
if a plus B<font color="#CCCCCC"> plus C 0</font>

335
00:16:49,730 --> 00:16:53,840
so this last step is where it<font color="#E5E5E5"> sort of is</font>

336
00:16:52,700 --> 00:16:56,690
<font color="#CCCCCC">different from composite auto</font>

337
00:16:53,840 --> 00:17:00,530
<font color="#E5E5E5">maintenance so in the case of composite</font>

338
00:16:56,690 --> 00:17:06,950
order<font color="#E5E5E5"> M</font><font color="#CCCCCC"> Maps you output 0 if all of them</font>

339
00:17:00,530 --> 00:17:09,099
are 0<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so we show that</font><font color="#CCCCCC"> we can actually</font>

340
00:17:06,950 --> 00:17:13,550
construct<font color="#E5E5E5"> slotted end coatings from</font>

341
00:17:09,099 --> 00:17:15,109
degree D prime<font color="#CCCCCC"> order of</font><font color="#E5E5E5"> interior Maps</font><font color="#CCCCCC"> we</font>

342
00:17:13,550 --> 00:17:18,589
<font color="#CCCCCC">define degree distorted</font><font color="#E5E5E5"> and coatings to</font>

343
00:17:15,109 --> 00:17:20,780
<font color="#E5E5E5">be one where</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> it allows for</font>

344
00:17:18,589 --> 00:17:25,819
evaluating polynomials of degree at most

345
00:17:20,780 --> 00:17:27,859
<font color="#CCCCCC">D and the exponents of the group so let</font>

346
00:17:25,819 --> 00:17:31,220
me start with<font color="#E5E5E5"> the simple case of degree</font>

347
00:17:27,859 --> 00:17:36,280
2 which is by linear<font color="#CCCCCC"> maps so we want to</font>

348
00:17:31,220 --> 00:17:38,480
encode<font color="#E5E5E5"> a 1 B 1 C 1 and a 2 B</font><font color="#CCCCCC"> 2 C 2 and</font>

349
00:17:36,280 --> 00:17:41,450
what we are<font color="#E5E5E5"> going to do is we are going</font>

350
00:17:38,480 --> 00:17:47,390
<font color="#E5E5E5">to pick vectors u 1 u</font><font color="#CCCCCC"> 2 u 3 and</font><font color="#E5E5E5"> V 1 V 2</font>

351
00:17:41,450 --> 00:17:51,970
<font color="#CCCCCC">V 3</font><font color="#E5E5E5"> and then we are going to encode the</font>

352
00:17:47,390 --> 00:17:54,560
vector a 1 u 1 plus<font color="#E5E5E5"> B</font><font color="#CCCCCC"> 1 u 2 plus C 1 u 3</font>

353
00:17:51,970 --> 00:17:57,320
so this<font color="#E5E5E5"> is not</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> one encoding it's a</font>

354
00:17:54,560 --> 00:18:01,389
<font color="#E5E5E5">vector of encoding and then you also</font>

355
00:17:57,320 --> 00:18:04,760
encode a<font color="#E5E5E5"> 2 V</font><font color="#CCCCCC"> 1 plus B 2</font><font color="#E5E5E5"> V</font><font color="#CCCCCC"> 2 plus C 2 V 3</font>

356
00:18:01,390 --> 00:18:07,400
<font color="#CCCCCC">and these vectors are chosen</font><font color="#E5E5E5"> in such a</font>

357
00:18:04,760 --> 00:18:11,600
way that the if you<font color="#E5E5E5"> consider the inner</font>

358
00:18:07,400 --> 00:18:14,660
product of UI and<font color="#CCCCCC"> VJ</font><font color="#E5E5E5"> then it is 1</font><font color="#CCCCCC"> if and</font>

359
00:18:11,600 --> 00:18:20,389
only if<font color="#E5E5E5"> I is equal</font><font color="#CCCCCC"> to J</font><font color="#E5E5E5"> otherwise the</font>

360
00:18:14,660 --> 00:18:21,680
inner product is<font color="#CCCCCC"> 0 and if you're</font>

361
00:18:20,390 --> 00:18:23,660
familiar with binding your<font color="#CCCCCC"> map</font>

362
00:18:21,680 --> 00:18:25,190
literature you<font color="#E5E5E5"> will notice</font><font color="#CCCCCC"> that this is</font>

363
00:18:23,660 --> 00:18:28,100
essentially the notion<font color="#CCCCCC"> of dual vector</font>

364
00:18:25,190 --> 00:18:30,470
spaces<font color="#E5E5E5"> and indeed such a transformation</font>

365
00:18:28,100 --> 00:18:37,129
was already given and<font color="#E5E5E5"> bilinear maps</font>

366
00:18:30,470 --> 00:18:39,830
literature so how is this formulation

367
00:18:37,130 --> 00:18:41,990
useful<font color="#E5E5E5"> so if</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> just compute an inner</font>

368
00:18:39,830 --> 00:18:44,449
product<font color="#CCCCCC"> of these two n codings you will</font>

369
00:18:41,990 --> 00:18:47,440
end<font color="#E5E5E5"> up with an encoding of a 1 a 2 plus</font>

370
00:18:44,450 --> 00:18:50,840
B 1 B 2 plus C 1 C 2 so this allows for

371
00:18:47,440 --> 00:18:56,450
<font color="#E5E5E5">this this sort</font><font color="#CCCCCC"> of mechanism allows for</font>

372
00:18:50,840 --> 00:18:59,209
<font color="#E5E5E5">component wise multiplication so in</font>

373
00:18:56,450 --> 00:19:01,130
order to do for constant for higher

374
00:18:59,210 --> 00:19:03,500
degrees<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> only do this</font>

375
00:19:01,130 --> 00:19:05,360
transformation for constant<font color="#E5E5E5"> degree</font>

376
00:19:03,500 --> 00:19:09,770
we can will consider<font color="#E5E5E5"> at</font><font color="#CCCCCC"> answering of</font>

377
00:19:05,360 --> 00:19:13,010
dual<font color="#E5E5E5"> vector spaces so for this talk I'm</font>

378
00:19:09,770 --> 00:19:16,039
just going<font color="#E5E5E5"> to focus on degree</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> so</font>

379
00:19:13,010 --> 00:19:19,429
as before<font color="#E5E5E5"> you pick vectors u 1 u 2 u 3</font>

380
00:19:16,039 --> 00:19:23,600
and<font color="#E5E5E5"> B 1 B 2 B 3 additionally you also</font>

381
00:19:19,429 --> 00:19:25,910
<font color="#E5E5E5">pick vectors W 1 W 2 and W 3 so the</font>

382
00:19:23,600 --> 00:19:28,159
vector corresponding to W will<font color="#CCCCCC"> be</font>

383
00:19:25,910 --> 00:19:31,100
associated<font color="#E5E5E5"> with the next level so at the</font>

384
00:19:28,160 --> 00:19:34,880
base<font color="#E5E5E5"> level you will use vectors</font><font color="#CCCCCC"> use and</font>

385
00:19:31,100 --> 00:19:40,459
B's so in the left hand<font color="#E5E5E5"> side you will</font>

386
00:19:34,880 --> 00:19:43,460
encode a1 b1 c1<font color="#E5E5E5"> using a tensioning of W</font>

387
00:19:40,460 --> 00:19:45,020
vectors and B but<font color="#CCCCCC"> you</font><font color="#E5E5E5"> vectors on the</font>

388
00:19:43,460 --> 00:19:49,250
<font color="#CCCCCC">right hand</font><font color="#E5E5E5"> side you will encode just</font>

389
00:19:45,020 --> 00:19:51,860
using<font color="#E5E5E5"> V vectors so now if you consider</font>

390
00:19:49,250 --> 00:19:55,400
<font color="#E5E5E5">an inner product of these two</font><font color="#CCCCCC"> vectors</font>

391
00:19:51,860 --> 00:19:59,689
you<font color="#CCCCCC"> will</font><font color="#E5E5E5"> end up with</font><font color="#CCCCCC"> a 1 a 2</font><font color="#E5E5E5"> W 1</font><font color="#CCCCCC"> plus</font><font color="#E5E5E5"> B</font>

392
00:19:55,400 --> 00:20:01,490
<font color="#E5E5E5">1 B 2 W 2</font><font color="#CCCCCC"> plus C 1 C 2 a 2 B 3 so this</font>

393
00:19:59,690 --> 00:20:04,850
<font color="#E5E5E5">again the component wise multiplication</font>

394
00:20:01,490 --> 00:20:06,799
<font color="#CCCCCC">is still</font><font color="#E5E5E5"> going on but now note</font><font color="#CCCCCC"> that you</font>

395
00:20:04,850 --> 00:20:09,590
also have these vectors every<font color="#CCCCCC"> one W 2</font>

396
00:20:06,799 --> 00:20:13,010
and<font color="#E5E5E5"> W 3 remaining and this can be used</font>

397
00:20:09,590 --> 00:20:15,379
<font color="#E5E5E5">for the next level computation so you</font>

398
00:20:13,010 --> 00:20:21,950
can sort<font color="#CCCCCC"> of generalize this idea for</font>

399
00:20:15,380 --> 00:20:24,260
constant degrees okay so now let's focus

400
00:20:21,950 --> 00:20:28,100
on constructing<font color="#CCCCCC"> PFE from started in</font>

401
00:20:24,260 --> 00:20:31,120
codings<font color="#CCCCCC"> ok so let me start with the set</font>

402
00:20:28,100 --> 00:20:35,418
<font color="#CCCCCC">of algorithm here you're going</font><font color="#E5E5E5"> to pick</font>

403
00:20:31,120 --> 00:20:36,889
random values r1<font color="#E5E5E5"> to RN and where n here</font>

404
00:20:35,419 --> 00:20:40,700
<font color="#CCCCCC">is the</font><font color="#E5E5E5"> length of the message</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you're</font>

405
00:20:36,890 --> 00:20:44,929
encrypting so in order to encrypt a

406
00:20:40,700 --> 00:20:47,950
message<font color="#CCCCCC"> X you are</font><font color="#E5E5E5"> going to encrypt X</font><font color="#CCCCCC"> IRI</font>

407
00:20:44,929 --> 00:20:54,620
and<font color="#E5E5E5"> 0 using the sorted encoding scheme</font>

408
00:20:47,950 --> 00:20:58,450
for every bit of X and all these

409
00:20:54,620 --> 00:20:58,449
encoding<font color="#E5E5E5"> x' will now form the ciphertext</font>

410
00:20:59,110 --> 00:21:04,939
<font color="#E5E5E5">so in order to now generate a key for a</font>

411
00:21:01,730 --> 00:21:07,429
polynomial<font color="#CCCCCC"> P</font><font color="#E5E5E5"> you are going to evaluate</font>

412
00:21:04,940 --> 00:21:10,309
the polynomial<font color="#E5E5E5"> P on r1 to RN that was</font>

413
00:21:07,429 --> 00:21:14,570
<font color="#CCCCCC">picked in the setup and then you are</font>

414
00:21:10,309 --> 00:21:16,570
going<font color="#E5E5E5"> to encode 0 comma P of R to RN</font><font color="#CCCCCC"> and</font>

415
00:21:14,570 --> 00:21:19,280
0

416
00:21:16,570 --> 00:21:23,960
so the functional key will be<font color="#E5E5E5"> P comma</font>

417
00:21:19,280 --> 00:21:26,960
this<font color="#E5E5E5"> encoding so how would you decrypt</font>

418
00:21:23,960 --> 00:21:28,520
<font color="#CCCCCC">so now you have the</font><font color="#E5E5E5"> polynomial P and all</font>

419
00:21:26,960 --> 00:21:31,700
these encoding is as<font color="#E5E5E5"> part of the</font>

420
00:21:28,520 --> 00:21:33,980
<font color="#CCCCCC">ciphertext right so you home</font><font color="#E5E5E5"> Oracle</font><font color="#CCCCCC"> II</font>

421
00:21:31,700 --> 00:21:38,000
evaluate these encoding is using the

422
00:21:33,980 --> 00:21:41,270
<font color="#E5E5E5">polynomial P so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> will end up with P</font>

423
00:21:38,000 --> 00:21:43,430
of<font color="#E5E5E5"> x1 to xn in the first slot and P of</font>

424
00:21:41,270 --> 00:21:47,180
r1 to RN in the second slot<font color="#E5E5E5"> and 0 in the</font>

425
00:21:43,430 --> 00:21:49,460
<font color="#CCCCCC">third slot and you can cancel the second</font>

426
00:21:47,180 --> 00:21:52,480
slot which has<font color="#E5E5E5"> P of r1 to RN</font><font color="#CCCCCC"> using the</font>

427
00:21:49,460 --> 00:21:57,260
encoding as part of the functional key

428
00:21:52,480 --> 00:21:58,970
and then<font color="#E5E5E5"> you'll end up with P of x1 to</font>

429
00:21:57,260 --> 00:22:02,690
xn<font color="#E5E5E5"> in the first law and 0 and 0 in the</font>

430
00:21:58,970 --> 00:22:04,280
<font color="#E5E5E5">second and third slots from which if P</font>

431
00:22:02,690 --> 00:22:09,200
<font color="#CCCCCC">of x1 to xn is small you can recover</font>

432
00:22:04,280 --> 00:22:13,520
this the<font color="#E5E5E5"> question is why is</font><font color="#CCCCCC"> this secure</font>

433
00:22:09,200 --> 00:22:16,300
this<font color="#E5E5E5"> is secure</font><font color="#CCCCCC"> because the P of r1 to RN</font>

434
00:22:13,520 --> 00:22:20,120
in the second slot<font color="#E5E5E5"> sort of forces</font><font color="#CCCCCC"> the</font>

435
00:22:16,300 --> 00:22:27,649
<font color="#CCCCCC">evaluator to use the polynomial P</font><font color="#E5E5E5"> in the</font>

436
00:22:20,120 --> 00:22:29,840
home<font color="#CCCCCC"> Orphic evaluation algorithm however</font>

437
00:22:27,650 --> 00:22:31,700
there<font color="#E5E5E5"> are still some</font><font color="#CCCCCC"> attacks</font><font color="#E5E5E5"> that I did</font>

438
00:22:29,840 --> 00:22:35,000
not<font color="#E5E5E5"> take into consideration</font><font color="#CCCCCC"> which are</font>

439
00:22:31,700 --> 00:22:36,590
<font color="#E5E5E5">these mix and match attax</font><font color="#CCCCCC"> I could</font>

440
00:22:35,000 --> 00:22:39,770
<font color="#E5E5E5">potentially take some</font><font color="#CCCCCC"> encoding from</font><font color="#E5E5E5"> one</font>

441
00:22:36,590 --> 00:22:42,919
ciphertext<font color="#CCCCCC"> and</font><font color="#E5E5E5"> combine them with some</font>

442
00:22:39,770 --> 00:22:45,440
encoding<font color="#CCCCCC"> from another ciphertext</font><font color="#E5E5E5"> and in</font>

443
00:22:42,920 --> 00:22:50,240
the end I can still evaluate<font color="#E5E5E5"> and cancel</font>

444
00:22:45,440 --> 00:22:52,580
out this<font color="#E5E5E5"> element in the second slot and</font>

445
00:22:50,240 --> 00:22:56,650
in order to<font color="#E5E5E5"> prevent this</font><font color="#CCCCCC"> these sort of</font>

446
00:22:52,580 --> 00:23:00,350
attacks<font color="#E5E5E5"> we use ciphertex specific checks</font>

447
00:22:56,650 --> 00:23:03,410
so note<font color="#CCCCCC"> that this the check P of r1 to</font>

448
00:23:00,350 --> 00:23:05,740
RN is independent of the<font color="#E5E5E5"> ciphertext I</font>

449
00:23:03,410 --> 00:23:09,230
mean it can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> used for any ciphertext</font>

450
00:23:05,740 --> 00:23:11,030
so by somehow interacting<font color="#E5E5E5"> the key and</font>

451
00:23:09,230 --> 00:23:13,430
the<font color="#E5E5E5"> ciphertext if we can create some</font>

452
00:23:11,030 --> 00:23:16,460
<font color="#E5E5E5">size</font><font color="#CCCCCC"> protect specific checks</font><font color="#E5E5E5"> we can</font>

453
00:23:13,430 --> 00:23:18,110
prevent such attacks and we have

454
00:23:16,460 --> 00:23:21,880
mechanisms in<font color="#E5E5E5"> our paper to deal with</font>

455
00:23:18,110 --> 00:23:25,550
this and<font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't want to go into details</font>

456
00:23:21,880 --> 00:23:27,170
<font color="#CCCCCC">ok with this</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> conclude so in this work</font>

457
00:23:25,550 --> 00:23:28,570
we give a new template<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get I affirm</font>

458
00:23:27,170 --> 00:23:30,110
degree<font color="#E5E5E5"> fragment in your Maps</font>

459
00:23:28,570 --> 00:23:31,549
<font color="#CCCCCC">lenient SRO</font>

460
00:23:30,110 --> 00:23:36,189
sure how to get ayah from degree<font color="#E5E5E5"> three</font>

461
00:23:31,549 --> 00:23:38,780
multi linear<font color="#CCCCCC"> maps and in</font><font color="#E5E5E5"> particular they</font>

462
00:23:36,190 --> 00:23:41,630
define the notion of block-wise local PR

463
00:23:38,780 --> 00:23:43,639
<font color="#CCCCCC">Z's and they show</font><font color="#E5E5E5"> they give a degree</font>

464
00:23:41,630 --> 00:23:49,309
preserving transformation to go from a

465
00:23:43,640 --> 00:23:52,760
block wise local PR<font color="#CCCCCC"> G's</font><font color="#E5E5E5"> to I one</font>

466
00:23:49,309 --> 00:23:53,990
question to explore is can be<font color="#E5E5E5"> whatever</font>

467
00:23:52,760 --> 00:23:55,760
<font color="#E5E5E5">look what is the right kind of</font>

468
00:23:53,990 --> 00:23:59,510
definition<font color="#E5E5E5"> of</font><font color="#CCCCCC"> prz that suffices to</font>

469
00:23:55,760 --> 00:24:01,400
<font color="#E5E5E5">construct</font><font color="#CCCCCC"> IO</font><font color="#E5E5E5"> and in particular can be</font>

470
00:23:59,510 --> 00:24:05,030
<font color="#E5E5E5">defined a notion of degree 2</font><font color="#CCCCCC"> PR</font><font color="#E5E5E5"> these</font>

471
00:24:01,400 --> 00:24:07,429
that suffice<font color="#CCCCCC"> us to get io and why do we</font>

472
00:24:05,030 --> 00:24:10,660
<font color="#CCCCCC">focus on degree 2 because this would</font>

473
00:24:07,429 --> 00:24:13,160
yield<font color="#CCCCCC"> IO from by linear maps</font><font color="#E5E5E5"> however</font>

474
00:24:10,660 --> 00:24:16,090
<font color="#E5E5E5">recently there have been sound works</font>

475
00:24:13,160 --> 00:24:20,090
that have some<font color="#CCCCCC"> negative results</font><font color="#E5E5E5"> on</font>

476
00:24:16,090 --> 00:24:31,760
<font color="#E5E5E5">degree to PR G's again for some</font>

477
00:24:20,090 --> 00:24:41,990
definitions of degree 2 PR these any

478
00:24:31,760 --> 00:24:43,610
questions for<font color="#CCCCCC"> punchin so when you say IO</font>

479
00:24:41,990 --> 00:24:44,929
from constant degree<font color="#CCCCCC"> multiple</font><font color="#E5E5E5"> degree</font>

480
00:24:43,610 --> 00:24:46,820
<font color="#CCCCCC">five monthl any Maps</font><font color="#E5E5E5"> yeah what</font>

481
00:24:44,929 --> 00:24:57,580
assumption do you need so in other word

482
00:24:46,820 --> 00:24:57,580
we I see and it needs

