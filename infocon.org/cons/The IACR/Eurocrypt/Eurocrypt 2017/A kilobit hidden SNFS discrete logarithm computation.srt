1
00:00:00,319 --> 00:00:04,560
good morning my<font color="#E5E5E5"> name</font><font color="#CCCCCC"> is Joshua freed and</font>

2
00:00:03,240 --> 00:00:06,509
today I'd like to<font color="#E5E5E5"> talk to you about a</font>

3
00:00:04,560 --> 00:00:08,399
kilobit hidden SNFs discrete logarithm

4
00:00:06,509 --> 00:00:10,469
computation<font color="#E5E5E5"> that I worked on this past</font>

5
00:00:08,400 --> 00:00:13,620
year along with period<font color="#CCCCCC"> gory</font>

6
00:00:10,469 --> 00:00:16,259
<font color="#CCCCCC">Nadia Henninger and</font><font color="#E5E5E5"> Emmanuel</font><font color="#CCCCCC"> Tomac so to</font>

7
00:00:13,620 --> 00:00:17,460
start a brief review again<font color="#E5E5E5"> of finite</font>

8
00:00:16,260 --> 00:00:19,800
field to<font color="#E5E5E5"> film in key exchange which</font>

9
00:00:17,460 --> 00:00:21,270
you've all seen<font color="#CCCCCC"> before your</font><font color="#E5E5E5"> usual cast</font>

10
00:00:19,800 --> 00:00:24,810
of characters you<font color="#CCCCCC"> have Alice and Bob</font>

11
00:00:21,270 --> 00:00:26,550
<font color="#CCCCCC">that want to compute some shared secret</font>

12
00:00:24,810 --> 00:00:28,799
in a public<font color="#E5E5E5"> channel so they use a</font>

13
00:00:26,550 --> 00:00:31,579
publicly agreed-upon pair parameters a

14
00:00:28,800 --> 00:00:34,440
prime P<font color="#CCCCCC"> and G a generator</font><font color="#E5E5E5"> of some</font>

15
00:00:31,579 --> 00:00:38,000
subgroup<font color="#E5E5E5"> of P for the computations they</font>

16
00:00:34,440 --> 00:00:40,019
compute their public values modulo P<font color="#E5E5E5"> and</font>

17
00:00:38,000 --> 00:00:42,149
separately can both derive the same

18
00:00:40,020 --> 00:00:47,010
<font color="#E5E5E5">secret now what I actually wanna focus</font>

19
00:00:42,149 --> 00:00:49,020
on here are<font color="#CCCCCC"> the prime P and G</font><font color="#E5E5E5"> that the</font>

20
00:00:47,010 --> 00:00:50,969
prime P<font color="#CCCCCC"> and the generator G that they</font>

21
00:00:49,020 --> 00:00:53,670
pick where those actually come<font color="#CCCCCC"> from in</font>

22
00:00:50,969 --> 00:00:57,260
practice<font color="#CCCCCC"> so today it</font><font color="#E5E5E5"> really depends</font><font color="#CCCCCC"> on</font>

23
00:00:53,670 --> 00:00:59,550
<font color="#E5E5E5">the protocol</font><font color="#CCCCCC"> and in several cases</font>

24
00:00:57,260 --> 00:01:02,030
<font color="#CCCCCC">protocol specifications and RFC's</font>

25
00:00:59,550 --> 00:01:03,959
actually<font color="#CCCCCC"> name the set of primes that</font>

26
00:01:02,030 --> 00:01:07,170
implementations should use<font color="#E5E5E5"> for</font>

27
00:01:03,960 --> 00:01:10,170
diffie-hellman<font color="#E5E5E5"> so until s version 1.3</font>

28
00:01:07,170 --> 00:01:12,439
<font color="#E5E5E5">IPSec or</font><font color="#CCCCCC"> Ike which is used for VPNs</font><font color="#E5E5E5"> and</font>

29
00:01:10,170 --> 00:01:14,939
<font color="#E5E5E5">SSH also uses a few of these</font>

30
00:01:12,439 --> 00:01:16,258
standardized<font color="#E5E5E5"> Prime's in other cases</font>

31
00:01:14,939 --> 00:01:17,699
they're<font color="#CCCCCC"> actually distributed in the</font>

32
00:01:16,259 --> 00:01:20,580
implementations when the protocol leaves

33
00:01:17,700 --> 00:01:22,020
it up to the implementation<font color="#CCCCCC"> the Apache</font>

34
00:01:20,580 --> 00:01:25,289
web server distributes some<font color="#E5E5E5"> primes for</font>

35
00:01:22,020 --> 00:01:28,439
TLS versions before 1.3<font color="#CCCCCC"> OpenSSH</font>

36
00:01:25,290 --> 00:01:29,790
distributes<font color="#E5E5E5"> primes and the java jdk also</font>

37
00:01:28,439 --> 00:01:32,429
includes just<font color="#E5E5E5"> a bunch of fixed Prime's</font>

38
00:01:29,790 --> 00:01:34,590
that<font color="#E5E5E5"> users of its crypto library can use</font>

39
00:01:32,430 --> 00:01:37,380
and then finally some users actually

40
00:01:34,590 --> 00:01:39,600
generate their own primes<font color="#CCCCCC"> which is</font>

41
00:01:37,380 --> 00:01:41,610
possible to do<font color="#CCCCCC"> in SSH and TLS versions</font>

42
00:01:39,600 --> 00:01:43,408
prior to 1.3 but this isn't<font color="#CCCCCC"> actually</font>

43
00:01:41,610 --> 00:01:45,000
done that often<font color="#E5E5E5"> in practice it's usually</font>

44
00:01:43,409 --> 00:01:47,880
a small fraction<font color="#E5E5E5"> of users that choose to</font>

45
00:01:45,000 --> 00:01:51,390
<font color="#CCCCCC">go this route and</font><font color="#E5E5E5"> we see for example</font><font color="#CCCCCC"> a</font>

46
00:01:47,880 --> 00:01:52,439
TLS with web hosts<font color="#E5E5E5"> about</font><font color="#CCCCCC"> 80% of web</font>

47
00:01:51,390 --> 00:01:53,790
hosts are using<font color="#E5E5E5"> finite field</font>

48
00:01:52,439 --> 00:01:56,850
diffie-hellman are actually using just

49
00:01:53,790 --> 00:01:58,229
one of<font color="#E5E5E5"> 10 common</font><font color="#CCCCCC"> primes so today I'd</font>

50
00:01:56,850 --> 00:01:59,789
like<font color="#E5E5E5"> to talk about the possibility of</font>

51
00:01:58,229 --> 00:02:01,979
backdooring these common<font color="#E5E5E5"> Prime's given</font>

52
00:01:59,790 --> 00:02:03,509
that<font color="#E5E5E5"> they're so standardized if if you</font>

53
00:02:01,979 --> 00:02:05,189
<font color="#CCCCCC">were picking the prime</font><font color="#E5E5E5"> and baking it</font>

54
00:02:03,509 --> 00:02:07,320
<font color="#E5E5E5">into your standard or your software</font>

55
00:02:05,189 --> 00:02:09,149
<font color="#E5E5E5">implementation what sort of</font><font color="#CCCCCC"> in advantage</font>

56
00:02:07,320 --> 00:02:11,609
can you give<font color="#E5E5E5"> yourself for computing</font>

57
00:02:09,149 --> 00:02:13,980
discrete logarithms with this prime so

58
00:02:11,610 --> 00:02:15,450
what would<font color="#E5E5E5"> backdooring a prime look like</font>

59
00:02:13,980 --> 00:02:17,488
would it be detectable<font color="#CCCCCC"> if you're to do</font>

60
00:02:15,450 --> 00:02:19,649
it what sort<font color="#E5E5E5"> of computation would be</font>

61
00:02:17,489 --> 00:02:21,629
required if<font color="#E5E5E5"> you're the attacker</font><font color="#CCCCCC"> and your</font>

62
00:02:19,650 --> 00:02:22,980
<font color="#E5E5E5">backdoor crime and what the impact of</font>

63
00:02:21,629 --> 00:02:25,739
the results<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> answers these</font>

64
00:02:22,980 --> 00:02:28,409
questions are for currently deployed

65
00:02:25,739 --> 00:02:30,060
cryptography so<font color="#E5E5E5"> a brief review</font><font color="#CCCCCC"> of the</font>

66
00:02:28,409 --> 00:02:32,250
<font color="#E5E5E5">number field sieve</font><font color="#CCCCCC"> you just heard</font>

67
00:02:30,060 --> 00:02:33,930
<font color="#E5E5E5">previous talk about that but to review</font>

68
00:02:32,250 --> 00:02:35,519
there's the first<font color="#E5E5E5"> stage</font><font color="#CCCCCC"> of polynomial</font>

69
00:02:33,930 --> 00:02:37,019
selection<font color="#E5E5E5"> you pick a good pair of</font>

70
00:02:35,519 --> 00:02:38,610
<font color="#CCCCCC">polynomials that share a root modulo the</font>

71
00:02:37,019 --> 00:02:40,530
<font color="#E5E5E5">prime you're targeting you collect</font>

72
00:02:38,610 --> 00:02:42,569
relations by sipping the polynomials and

73
00:02:40,530 --> 00:02:44,159
collecting results<font color="#E5E5E5"> that factor</font>

74
00:02:42,569 --> 00:02:47,310
<font color="#CCCCCC">completely below some bound that</font><font color="#E5E5E5"> you</font>

75
00:02:44,159 --> 00:02:49,500
choose<font color="#CCCCCC"> perform linear algebra to solve</font>

76
00:02:47,310 --> 00:02:53,430
for<font color="#E5E5E5"> the discrete logs of the elements in</font>

77
00:02:49,500 --> 00:02:55,370
your<font color="#E5E5E5"> in your base and then finally given</font>

78
00:02:53,430 --> 00:02:58,379
some specific<font color="#CCCCCC"> instance</font><font color="#E5E5E5"> of the problem</font><font color="#CCCCCC"> a</font>

79
00:02:55,370 --> 00:03:00,299
target<font color="#E5E5E5"> say Alice's GPA</font><font color="#CCCCCC"> or Bob's diva to</font>

80
00:02:58,379 --> 00:03:03,599
be<font color="#E5E5E5"> you try and write that target as the</font>

81
00:03:00,299 --> 00:03:05,730
<font color="#E5E5E5">sum of the logs</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> have from your</font>

82
00:03:03,599 --> 00:03:07,828
computation so how long does it take to

83
00:03:05,730 --> 00:03:09,840
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> run this algorithm</font><font color="#CCCCCC"> well the</font>

84
00:03:07,829 --> 00:03:11,760
first<font color="#E5E5E5"> answer is using the</font><font color="#CCCCCC"> usual</font><font color="#E5E5E5"> L</font>

85
00:03:09,840 --> 00:03:13,859
notation<font color="#E5E5E5"> the asymptotic complexity is L</font>

86
00:03:11,760 --> 00:03:16,200
of one third with the coefficient of one

87
00:03:13,859 --> 00:03:18,299
point<font color="#E5E5E5"> nine two three</font><font color="#CCCCCC"> it's actually</font>

88
00:03:16,200 --> 00:03:20,429
important to<font color="#E5E5E5"> note that this figure comes</font>

89
00:03:18,299 --> 00:03:23,370
from<font color="#E5E5E5"> the mostly from the pre computation</font>

90
00:03:20,430 --> 00:03:25,889
stage<font color="#CCCCCC"> and that</font><font color="#E5E5E5"> when you're actually</font>

91
00:03:23,370 --> 00:03:27,630
given an individual instance once you've

92
00:03:25,889 --> 00:03:29,130
completed<font color="#E5E5E5"> that stage and you're given an</font>

93
00:03:27,630 --> 00:03:31,079
individual instance<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> problem to</font>

94
00:03:29,130 --> 00:03:32,638
solve like G to<font color="#CCCCCC"> the a or T to the B the</font>

95
00:03:31,079 --> 00:03:35,180
coefficient<font color="#E5E5E5"> actually drops in the</font>

96
00:03:32,639 --> 00:03:37,099
element ation to one point<font color="#E5E5E5"> two three two</font>

97
00:03:35,180 --> 00:03:42,840
so what does<font color="#E5E5E5"> this look</font><font color="#CCCCCC"> like in practice</font>

98
00:03:37,099 --> 00:03:44,310
<font color="#CCCCCC">with a</font><font color="#E5E5E5"> 512 bit</font><font color="#CCCCCC"> prime number it might</font>

99
00:03:42,840 --> 00:03:45,780
<font color="#CCCCCC">take about</font><font color="#E5E5E5"> ten quarters of</font>

100
00:03:44,310 --> 00:03:47,280
pre-computation to run the number<font color="#E5E5E5"> field</font>

101
00:03:45,780 --> 00:03:49,079
sieve<font color="#E5E5E5"> and only about 10 minutes to</font>

102
00:03:47,280 --> 00:03:51,090
compute the discrete logarithm of an

103
00:03:49,079 --> 00:03:54,660
individual target as you heard<font color="#E5E5E5"> in</font>

104
00:03:51,090 --> 00:03:56,780
<font color="#CCCCCC">Thorsen's talk</font><font color="#E5E5E5"> previously for 768 bit</font>

105
00:03:54,660 --> 00:03:59,340
prime<font color="#CCCCCC"> might take about</font><font color="#E5E5E5"> five thousand</font>

106
00:03:56,780 --> 00:04:01,620
warriors<font color="#E5E5E5"> for the first stage</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then an</font>

107
00:03:59,340 --> 00:04:03,419
average of<font color="#E5E5E5"> two days to compute an</font>

108
00:04:01,620 --> 00:04:07,290
individual log in the second stage<font color="#E5E5E5"> and</font>

109
00:04:03,419 --> 00:04:08,849
<font color="#E5E5E5">finally for a kilobyte sized</font><font color="#CCCCCC"> Prime we</font>

110
00:04:07,290 --> 00:04:11,190
estimate<font color="#E5E5E5"> maybe it would take about 10</font>

111
00:04:08,849 --> 00:04:12,569
million<font color="#CCCCCC"> couriers</font><font color="#E5E5E5"> to run the number field</font>

112
00:04:11,190 --> 00:04:15,989
sieve and then<font color="#E5E5E5"> about a month to actually</font>

113
00:04:12,569 --> 00:04:17,760
do the second stage so jumping<font color="#E5E5E5"> back</font><font color="#CCCCCC"> to</font>

114
00:04:15,989 --> 00:04:20,370
<font color="#E5E5E5">the</font><font color="#CCCCCC"> first stage of the number</font><font color="#E5E5E5"> field</font>

115
00:04:17,760 --> 00:04:21,988
sieve<font color="#E5E5E5"> which is polynomial selection the</font>

116
00:04:20,370 --> 00:04:23,880
<font color="#E5E5E5">goal polynomial selection is to pick a</font>

117
00:04:21,988 --> 00:04:25,739
pair of<font color="#CCCCCC"> polynomials that share some</font>

118
00:04:23,880 --> 00:04:27,690
common root modulo<font color="#CCCCCC"> the prime to your</font>

119
00:04:25,740 --> 00:04:29,520
targeting so the kind<font color="#E5E5E5"> of</font>

120
00:04:27,690 --> 00:04:30,810
way to do this<font color="#CCCCCC"> algorithm that that will</font>

121
00:04:29,520 --> 00:04:32,039
certainly produce<font color="#E5E5E5"> that pair of</font>

122
00:04:30,810 --> 00:04:34,800
<font color="#E5E5E5">polynomials which could be usable for</font>

123
00:04:32,040 --> 00:04:36,690
<font color="#CCCCCC">the number</font><font color="#E5E5E5"> field sieve</font><font color="#CCCCCC"> as it follows you</font>

124
00:04:34,800 --> 00:04:38,910
could pick some<font color="#CCCCCC"> M</font><font color="#E5E5E5"> that's roughly around</font>

125
00:04:36,690 --> 00:04:42,510
the size of<font color="#E5E5E5"> the sixth root of P the size</font>

126
00:04:38,910 --> 00:04:45,180
of that number you can write P<font color="#E5E5E5"> in base M</font>

127
00:04:42,510 --> 00:04:46,650
and then just take the<font color="#E5E5E5"> coefficients from</font>

128
00:04:45,180 --> 00:04:48,150
<font color="#E5E5E5">that expansion and use them</font><font color="#CCCCCC"> for your</font>

129
00:04:46,650 --> 00:04:49,590
<font color="#E5E5E5">first polynomial if your second</font>

130
00:04:48,150 --> 00:04:52,169
<font color="#CCCCCC">polynomial you</font><font color="#E5E5E5"> can just write</font><font color="#CCCCCC"> X</font><font color="#E5E5E5"> minus M</font>

131
00:04:49,590 --> 00:04:55,549
it's clear to<font color="#CCCCCC"> see that when evaluated</font><font color="#E5E5E5"> M</font>

132
00:04:52,170 --> 00:04:57,660
both of these are going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be 0 mod p</font>

133
00:04:55,550 --> 00:04:59,760
<font color="#E5E5E5">using a construction like this or</font>

134
00:04:57,660 --> 00:05:01,530
similar constructions<font color="#CCCCCC"> we expect the size</font>

135
00:04:59,760 --> 00:05:03,780
<font color="#E5E5E5">of the coefficients are</font><font color="#CCCCCC"> going to be</font>

136
00:05:01,530 --> 00:05:06,119
about the size<font color="#E5E5E5"> of the sixth of the P or</font>

137
00:05:03,780 --> 00:05:08,760
the<font color="#CCCCCC"> sixth</font><font color="#E5E5E5"> root of P and this actually</font>

138
00:05:06,120 --> 00:05:12,030
has an important<font color="#CCCCCC"> impact</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> sipping</font>

139
00:05:08,760 --> 00:05:14,430
stage<font color="#CCCCCC"> namely when when you have smaller</font>

140
00:05:12,030 --> 00:05:16,109
coefficients on your polynomials<font color="#CCCCCC"> the</font>

141
00:05:14,430 --> 00:05:18,390
resulting norms when you sieve are going

142
00:05:16,110 --> 00:05:20,610
to be smaller<font color="#CCCCCC"> and actually have a higher</font>

143
00:05:18,390 --> 00:05:21,800
probability<font color="#E5E5E5"> of factoring completely</font>

144
00:05:20,610 --> 00:05:23,820
below the bound that you're targeting

145
00:05:21,800 --> 00:05:25,350
<font color="#E5E5E5">which leads us to</font><font color="#CCCCCC"> the case</font><font color="#E5E5E5"> of the</font>

146
00:05:23,820 --> 00:05:27,150
special number<font color="#E5E5E5"> field sieve which</font>

147
00:05:25,350 --> 00:05:29,790
actually historically preceded the

148
00:05:27,150 --> 00:05:31,770
general<font color="#CCCCCC"> number field sieve and it was</font>

149
00:05:29,790 --> 00:05:34,440
<font color="#E5E5E5">observed that for some some numbers</font><font color="#CCCCCC"> that</font>

150
00:05:31,770 --> 00:05:35,580
could be<font color="#CCCCCC"> expressed</font><font color="#E5E5E5"> with a pair of</font>

151
00:05:34,440 --> 00:05:37,560
polynomials<font color="#E5E5E5"> that had really small</font>

152
00:05:35,580 --> 00:05:40,710
coefficients<font color="#E5E5E5"> the number of</font><font color="#CCCCCC"> fields it was</font>

153
00:05:37,560 --> 00:05:43,140
actually much<font color="#E5E5E5"> more efficient</font><font color="#CCCCCC"> so for</font>

154
00:05:40,710 --> 00:05:46,020
example with<font color="#E5E5E5"> Mersenne numbers or</font><font color="#CCCCCC"> numbers</font>

155
00:05:43,140 --> 00:05:48,450
that are close to powers of<font color="#E5E5E5"> two and some</font>

156
00:05:46,020 --> 00:05:50,010
other numbers<font color="#E5E5E5"> similar to these it's very</font>

157
00:05:48,450 --> 00:05:52,050
easy<font color="#E5E5E5"> to find a pair</font><font color="#CCCCCC"> of polynomials</font><font color="#E5E5E5"> with</font>

158
00:05:50,010 --> 00:05:55,110
small coefficients they share a root

159
00:05:52,050 --> 00:05:56,190
modulo those numbers and the impact for

160
00:05:55,110 --> 00:05:57,660
compute for running<font color="#E5E5E5"> the number field</font>

161
00:05:56,190 --> 00:05:59,760
sieve<font color="#E5E5E5"> on the asymptotic complexity is</font>

162
00:05:57,660 --> 00:06:01,500
fairly large<font color="#E5E5E5"> the coefficient in the</font><font color="#CCCCCC"> L</font>

163
00:05:59,760 --> 00:06:03,960
notation drops from<font color="#E5E5E5"> one point nine</font><font color="#CCCCCC"> to</font>

164
00:06:01,500 --> 00:06:07,169
three<font color="#E5E5E5"> to one point five to six and in</font>

165
00:06:03,960 --> 00:06:09,750
real terms<font color="#CCCCCC"> a discrete logarithm</font>

166
00:06:07,169 --> 00:06:11,940
computation for 768 bit<font color="#CCCCCC"> special number</font>

167
00:06:09,750 --> 00:06:13,800
field sieve<font color="#E5E5E5"> applicable prime only takes</font>

168
00:06:11,940 --> 00:06:17,580
<font color="#E5E5E5">about 60 careers in comparison to</font><font color="#CCCCCC"> five</font>

169
00:06:13,800 --> 00:06:19,440
<font color="#CCCCCC">thousand</font><font color="#E5E5E5"> and in the in the kilobit case</font>

170
00:06:17,580 --> 00:06:21,300
<font color="#E5E5E5">it only takes about four hundred</font><font color="#CCCCCC"> careers</font>

171
00:06:19,440 --> 00:06:22,770
to run the number<font color="#E5E5E5"> field sieve I'm</font>

172
00:06:21,300 --> 00:06:27,750
supposed to estimated 10 million

173
00:06:22,770 --> 00:06:30,870
quarters so we take a brief trip back<font color="#CCCCCC"> to</font>

174
00:06:27,750 --> 00:06:32,430
<font color="#E5E5E5">the 1990s</font><font color="#CCCCCC"> 91 NIST was proposing</font>

175
00:06:30,870 --> 00:06:36,000
standardizing<font color="#E5E5E5"> digital signature</font>

176
00:06:32,430 --> 00:06:38,910
algorithm which was<font color="#E5E5E5"> one of</font><font color="#CCCCCC"> the first</font>

177
00:06:36,000 --> 00:06:40,530
proposed like standardized<font color="#E5E5E5"> schemes that</font>

178
00:06:38,910 --> 00:06:41,249
did that relied on the screen<font color="#E5E5E5"> logarithm</font>

179
00:06:40,530 --> 00:06:46,789
problem<font color="#CCCCCC"> the erican</font>

180
00:06:41,249 --> 00:06:49,259
using primes<font color="#E5E5E5"> of 512 bit size and 160 bit</font>

181
00:06:46,789 --> 00:06:51,269
prime<font color="#E5E5E5"> order subgroups</font><font color="#CCCCCC"> and it was</font>

182
00:06:49,259 --> 00:06:52,589
<font color="#E5E5E5">observed that a trapdoor could could</font>

183
00:06:51,269 --> 00:06:53,699
<font color="#E5E5E5">theoretically be constructed</font><font color="#CCCCCC"> or you</font>

184
00:06:52,589 --> 00:06:55,109
could<font color="#E5E5E5"> pick some</font><font color="#CCCCCC"> prime they'll be</font>

185
00:06:53,699 --> 00:06:57,029
amenable to the special<font color="#CCCCCC"> number field</font>

186
00:06:55,109 --> 00:06:59,758
sieve<font color="#E5E5E5"> but it would be somewhat hidden or</font>

187
00:06:57,029 --> 00:07:01,499
not<font color="#E5E5E5"> clear meaning it wouldn't be of the</font>

188
00:06:59,759 --> 00:07:02,489
form you know<font color="#CCCCCC"> - to that head - one or</font>

189
00:07:01,499 --> 00:07:04,499
something<font color="#CCCCCC"> close to</font><font color="#E5E5E5"> a power of 2 which</font>

190
00:07:02,489 --> 00:07:07,558
<font color="#CCCCCC">would</font><font color="#E5E5E5"> be obvious but some other kind of</font>

191
00:07:04,499 --> 00:07:09,149
number<font color="#E5E5E5"> that would not be clear so how</font>

192
00:07:07,559 --> 00:07:11,699
would<font color="#E5E5E5"> you possibly do this</font>

193
00:07:09,149 --> 00:07:15,389
so Daniel<font color="#CCCCCC"> Gordon a</font><font color="#E5E5E5"> 1992 wrote a paper</font>

194
00:07:11,699 --> 00:07:17,309
<font color="#E5E5E5">about trapdoor and DSA primes</font><font color="#CCCCCC"> a kind of</font>

195
00:07:15,389 --> 00:07:19,169
easy way to start off<font color="#E5E5E5"> doing this would</font>

196
00:07:17,309 --> 00:07:22,649
just be pick some random pair

197
00:07:19,169 --> 00:07:26,308
<font color="#E5E5E5">polynomials F and G where</font><font color="#CCCCCC"> your with</font>

198
00:07:22,649 --> 00:07:28,829
small coefficients<font color="#CCCCCC"> check if they share a</font>

199
00:07:26,309 --> 00:07:33,059
common root that is<font color="#CCCCCC"> a prime and then if</font>

200
00:07:28,829 --> 00:07:37,019
they do see if that<font color="#CCCCCC"> prime has has a has</font>

201
00:07:33,059 --> 00:07:39,749
a subgroup<font color="#E5E5E5"> of your desired order then</font>

202
00:07:37,019 --> 00:07:41,399
<font color="#E5E5E5">Dana Gordon Ashley proposed a improved</font>

203
00:07:39,749 --> 00:07:42,989
algorithm in this<font color="#E5E5E5"> paper where</font><font color="#CCCCCC"> you could</font>

204
00:07:41,399 --> 00:07:44,939
actually define your problem<font color="#CCCCCC"> in</font><font color="#E5E5E5"> terms of</font>

205
00:07:42,989 --> 00:07:46,558
some polynomial<font color="#CCCCCC"> F which you pick</font><font color="#E5E5E5"> in</font>

206
00:07:44,939 --> 00:07:48,929
advance that has small coefficients you

207
00:07:46,559 --> 00:07:52,349
<font color="#CCCCCC">pick the order</font><font color="#E5E5E5"> of your subgroup Q and</font>

208
00:07:48,929 --> 00:07:55,078
<font color="#CCCCCC">you try some random coefficient G 0 and</font>

209
00:07:52,349 --> 00:07:57,449
then see if you<font color="#CCCCCC"> can solve</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> G 1 that</font>

210
00:07:55,079 --> 00:07:59,789
such that<font color="#E5E5E5"> the resultant of your</font>

211
00:07:57,449 --> 00:08:01,799
<font color="#CCCCCC">polynomials is prime and you'll have the</font>

212
00:07:59,789 --> 00:08:05,128
property that P<font color="#CCCCCC"> minus 1 is divisible by</font>

213
00:08:01,799 --> 00:08:06,899
Q so it's<font color="#CCCCCC"> actually fairly simple</font>

214
00:08:05,129 --> 00:08:11,569
<font color="#E5E5E5">algorithm for coming up with such</font><font color="#CCCCCC"> a</font>

215
00:08:06,899 --> 00:08:13,979
trapdoor<font color="#CCCCCC"> Prime so how</font><font color="#E5E5E5"> would one</font><font color="#CCCCCC"> of these</font>

216
00:08:11,569 --> 00:08:17,159
<font color="#E5E5E5">would one of these Prime's generated</font>

217
00:08:13,979 --> 00:08:20,549
this way be detectable<font color="#CCCCCC"> the answer is yes</font>

218
00:08:17,159 --> 00:08:22,409
<font color="#E5E5E5">it would be certainly detectable if your</font>

219
00:08:20,549 --> 00:08:24,089
linear polynomial is<font color="#E5E5E5"> monocore the</font>

220
00:08:22,409 --> 00:08:26,069
coefficient in front of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> X was a 1</font>

221
00:08:24,089 --> 00:08:27,719
<font color="#E5E5E5">because</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> resulting prime would</font>

222
00:08:26,069 --> 00:08:30,949
actually the<font color="#E5E5E5"> upper bits of the resulting</font>

223
00:08:27,719 --> 00:08:35,519
prime<font color="#E5E5E5"> would</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> a direct product of the</font>

224
00:08:30,949 --> 00:08:37,949
direct result of the<font color="#CCCCCC"> the</font><font color="#E5E5E5"> coefficient G 0</font>

225
00:08:35,519 --> 00:08:39,659
<font color="#CCCCCC">and the</font><font color="#E5E5E5"> leading small coefficients in F</font>

226
00:08:37,948 --> 00:08:41,128
so<font color="#CCCCCC"> you</font><font color="#E5E5E5"> could since</font><font color="#CCCCCC"> F of small</font>

227
00:08:39,659 --> 00:08:43,529
coefficients you could<font color="#CCCCCC"> brute-force over</font>

228
00:08:41,129 --> 00:08:45,149
all the<font color="#E5E5E5"> values possible values for the</font>

229
00:08:43,529 --> 00:08:51,000
<font color="#E5E5E5">leading coefficient of F and see if you</font>

230
00:08:45,149 --> 00:08:52,889
can solve<font color="#CCCCCC"> for G</font><font color="#E5E5E5"> 0</font><font color="#CCCCCC"> however</font><font color="#E5E5E5"> if if the</font>

231
00:08:51,000 --> 00:08:56,089
<font color="#CCCCCC">polynomial is not monic and there's some</font>

232
00:08:52,889 --> 00:08:58,410
<font color="#CCCCCC">largest G</font><font color="#E5E5E5"> 1</font>

233
00:08:56,089 --> 00:08:59,790
<font color="#CCCCCC">used to construct</font><font color="#E5E5E5"> this then there's</font>

234
00:08:58,410 --> 00:09:02,339
<font color="#E5E5E5">actually no known way</font><font color="#CCCCCC"> to uncover</font><font color="#E5E5E5"> this</font>

235
00:08:59,790 --> 00:09:03,630
trapdoor<font color="#E5E5E5"> and stating</font><font color="#CCCCCC"> it's sort</font><font color="#E5E5E5"> of in a</font>

236
00:09:02,339 --> 00:09:05,839
different<font color="#CCCCCC"> way if you're given subprime</font>

237
00:09:03,630 --> 00:09:09,540
it's hard to find a pair<font color="#CCCCCC"> of polynomials</font>

238
00:09:05,839 --> 00:09:10,740
<font color="#CCCCCC">with small coefficients if there exists</font>

239
00:09:09,540 --> 00:09:13,890
such a<font color="#E5E5E5"> polynomial</font><font color="#CCCCCC"> the pair</font><font color="#E5E5E5"> of</font>

240
00:09:10,740 --> 00:09:18,029
<font color="#CCCCCC">polynomials so 1992 they were considered</font>

241
00:09:13,890 --> 00:09:20,939
using<font color="#E5E5E5"> 512 bit Prime's with 160 bit</font><font color="#CCCCCC"> prime</font>

242
00:09:18,029 --> 00:09:22,770
order subgroups and<font color="#E5E5E5"> actually trying to</font>

243
00:09:20,940 --> 00:09:25,920
construct<font color="#E5E5E5"> a trapdoor</font><font color="#CCCCCC"> prime with these</font>

244
00:09:22,770 --> 00:09:27,600
properties<font color="#E5E5E5"> was was considered to be</font>

245
00:09:25,920 --> 00:09:29,130
difficult or<font color="#E5E5E5"> impossible and you're</font>

246
00:09:27,600 --> 00:09:31,440
<font color="#E5E5E5">basically either forced to choose a</font>

247
00:09:29,130 --> 00:09:32,880
trapdoor<font color="#E5E5E5"> that gave you a polynomial that</font>

248
00:09:31,440 --> 00:09:35,040
<font color="#E5E5E5">was not optimal for any the number field</font>

249
00:09:32,880 --> 00:09:36,600
sieve namely the polynomial<font color="#E5E5E5"> the degree</font>

250
00:09:35,040 --> 00:09:37,680
of<font color="#E5E5E5"> the polynomial would have</font><font color="#CCCCCC"> two degree</font>

251
00:09:36,600 --> 00:09:40,410
<font color="#CCCCCC">if one of the</font><font color="#E5E5E5"> polynomials would have to</font>

252
00:09:37,680 --> 00:09:42,630
be<font color="#CCCCCC"> three</font><font color="#E5E5E5"> when in principle you really</font>

253
00:09:40,410 --> 00:09:44,160
<font color="#CCCCCC">wanted the</font><font color="#E5E5E5"> degree 5 polynomial or if you</font>

254
00:09:42,630 --> 00:09:45,540
picked<font color="#CCCCCC"> a larger degree polynomial the</font>

255
00:09:44,160 --> 00:09:48,899
coefficients would have to be so<font color="#E5E5E5"> small</font>

256
00:09:45,540 --> 00:09:50,640
such that it'd be easy<font color="#CCCCCC"> to</font><font color="#E5E5E5"> brute force</font>

257
00:09:48,899 --> 00:09:52,620
over the<font color="#E5E5E5"> polynomials or enumerate all</font>

258
00:09:50,640 --> 00:09:53,790
possible combinations<font color="#E5E5E5"> of polynomials or</font>

259
00:09:52,620 --> 00:09:57,390
all<font color="#E5E5E5"> possible polynomials</font><font color="#CCCCCC"> for one's</font>

260
00:09:53,790 --> 00:09:58,980
<font color="#E5E5E5">opponent was excuse me</font><font color="#CCCCCC"> and this led them</font>

261
00:09:57,390 --> 00:10:01,110
at the<font color="#E5E5E5"> time to believe and there was a</font>

262
00:09:58,980 --> 00:10:03,750
big panel discussion at<font color="#CCCCCC"> Euro crypt in</font>

263
00:10:01,110 --> 00:10:05,610
1992 about this topic<font color="#E5E5E5"> that the trap</font>

264
00:10:03,750 --> 00:10:07,470
wouldn't<font color="#CCCCCC"> really be feasible for for</font>

265
00:10:05,610 --> 00:10:09,320
these types of primes<font color="#CCCCCC"> or if you were</font><font color="#E5E5E5"> to</font>

266
00:10:07,470 --> 00:10:12,330
trapdoor<font color="#E5E5E5"> them they would be detectable</font>

267
00:10:09,320 --> 00:10:14,459
as such when the DSA was standardized

268
00:10:12,330 --> 00:10:16,110
they noted that<font color="#E5E5E5"> perhaps picking the</font>

269
00:10:14,459 --> 00:10:18,300
<font color="#E5E5E5">primes should</font><font color="#CCCCCC"> be done in some verifiably</font>

270
00:10:16,110 --> 00:10:20,430
random way<font color="#E5E5E5"> they gave a procedure for</font>

271
00:10:18,300 --> 00:10:23,760
<font color="#CCCCCC">doing that but</font><font color="#E5E5E5"> they sort of marked</font><font color="#CCCCCC"> a</font>

272
00:10:20,430 --> 00:10:25,890
proof<font color="#E5E5E5"> of this as an optional as an</font>

273
00:10:23,760 --> 00:10:27,150
optional field so you<font color="#CCCCCC"> could generate</font><font color="#E5E5E5"> you</font>

274
00:10:25,890 --> 00:10:29,130
could generate<font color="#CCCCCC"> your Prime's verifiably</font>

275
00:10:27,150 --> 00:10:32,189
random but you didn't<font color="#E5E5E5"> have to randomly</font><font color="#CCCCCC"> B</font>

276
00:10:29,130 --> 00:10:35,160
didn't have to how about today so today

277
00:10:32,190 --> 00:10:36,390
people<font color="#E5E5E5"> are using DSA</font><font color="#CCCCCC"> Prime's</font><font color="#E5E5E5"> that with</font>

278
00:10:35,160 --> 00:10:37,920
ten hundred<font color="#CCCCCC"> twenty-four bits that have</font><font color="#E5E5E5"> a</font>

279
00:10:36,390 --> 00:10:39,510
<font color="#E5E5E5">hundred sixty bit order subgroups and</font>

280
00:10:37,920 --> 00:10:41,550
this is actually optimal for Gordon's

281
00:10:39,510 --> 00:10:43,920
construction<font color="#E5E5E5"> this allows you to choose a</font>

282
00:10:41,550 --> 00:10:45,479
polynomial with degree six which is<font color="#E5E5E5"> good</font>

283
00:10:43,920 --> 00:10:46,620
for<font color="#E5E5E5"> the number field sieve and</font><font color="#CCCCCC"> it also</font>

284
00:10:45,480 --> 00:10:49,709
<font color="#E5E5E5">allows you to choose large enough</font>

285
00:10:46,620 --> 00:10:51,260
coefficients for your<font color="#E5E5E5"> polynomial F such</font>

286
00:10:49,709 --> 00:10:54,589
<font color="#CCCCCC">that actually enumerate all possible</font>

287
00:10:51,260 --> 00:10:56,899
polynomials<font color="#E5E5E5"> would be very expensive or</font>

288
00:10:54,589 --> 00:11:01,790
equivalent<font color="#E5E5E5"> to the cost of running</font><font color="#CCCCCC"> Perot</font>

289
00:10:56,899 --> 00:11:04,470
<font color="#E5E5E5">for this sub ordered for the subgroup Q</font>

290
00:11:01,790 --> 00:11:07,740
<font color="#E5E5E5">so it's certainly possible to construct</font>

291
00:11:04,470 --> 00:11:08,760
<font color="#CCCCCC">such a prime</font><font color="#E5E5E5"> using using the same</font>

292
00:11:07,740 --> 00:11:11,820
algorithm that Gordon

293
00:11:08,760 --> 00:11:13,290
published in 1992<font color="#CCCCCC"> so next</font><font color="#E5E5E5"> what we want</font>

294
00:11:11,820 --> 00:11:16,020
<font color="#CCCCCC">to show is that</font><font color="#E5E5E5"> it would actually be</font>

295
00:11:13,290 --> 00:11:18,780
<font color="#CCCCCC">possible to exploit</font><font color="#E5E5E5"> a prime that was</font>

296
00:11:16,020 --> 00:11:21,060
<font color="#E5E5E5">constructed this</font><font color="#CCCCCC"> way so we generated one</font>

297
00:11:18,780 --> 00:11:24,240
of these<font color="#CCCCCC"> primes using a small script</font>

298
00:11:21,060 --> 00:11:26,760
<font color="#E5E5E5">that implemented Gordon's algorithm</font><font color="#CCCCCC"> it</font>

299
00:11:24,240 --> 00:11:29,010
printed out<font color="#E5E5E5"> this pretty random looking</font>

300
00:11:26,760 --> 00:11:32,370
prime<font color="#E5E5E5"> it's random if you look at it like</font>

301
00:11:29,010 --> 00:11:33,990
<font color="#E5E5E5">this or in hex and a 160-bit</font><font color="#CCCCCC"> prime</font><font color="#E5E5E5"> order</font>

302
00:11:32,370 --> 00:11:35,840
<font color="#CCCCCC">subgroup you can see the polynomial pair</font>

303
00:11:33,990 --> 00:11:38,640
that shares the<font color="#E5E5E5"> root modulo this prime</font>

304
00:11:35,840 --> 00:11:39,900
and you can<font color="#E5E5E5"> observe that</font><font color="#CCCCCC"> in the F</font>

305
00:11:38,640 --> 00:11:42,689
polynomial the coefficients are really

306
00:11:39,900 --> 00:11:46,100
small<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> special number field sieve</font>

307
00:11:42,690 --> 00:11:48,450
applies<font color="#E5E5E5"> so we went ahead and ran the</font>

308
00:11:46,100 --> 00:11:52,350
number field<font color="#E5E5E5"> sieve for this</font><font color="#CCCCCC"> Prime</font><font color="#E5E5E5"> and</font>

309
00:11:48,450 --> 00:11:53,880
<font color="#E5E5E5">you can see that it took a fairly low</font>

310
00:11:52,350 --> 00:11:55,890
amount<font color="#E5E5E5"> of time it took about two months</font>

311
00:11:53,880 --> 00:11:59,120
of calendar time<font color="#E5E5E5"> split across two</font>

312
00:11:55,890 --> 00:12:03,900
clusters one<font color="#E5E5E5"> at UPenn</font><font color="#CCCCCC"> and one in inria</font>

313
00:11:59,120 --> 00:12:07,710
<font color="#CCCCCC">Anansi we used on average</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> 2,000</font>

314
00:12:03,900 --> 00:12:09,540
<font color="#E5E5E5">cores for most of the computation</font><font color="#CCCCCC"> the</font>

315
00:12:07,710 --> 00:12:11,820
Civic took about<font color="#E5E5E5"> one month the linear</font>

316
00:12:09,540 --> 00:12:13,199
<font color="#E5E5E5">algebra it took about one month</font><font color="#CCCCCC"> and well</font>

317
00:12:11,820 --> 00:12:14,640
note that<font color="#CCCCCC"> the linear algebra was faster</font>

318
00:12:13,200 --> 00:12:17,820
because we<font color="#E5E5E5"> were</font><font color="#CCCCCC"> able to do it</font>

319
00:12:14,640 --> 00:12:21,420
modulo or<font color="#E5E5E5"> 160-bit</font><font color="#CCCCCC"> Q instead</font><font color="#E5E5E5"> of if we'd</font>

320
00:12:17,820 --> 00:12:23,930
picked a safe<font color="#E5E5E5"> prime</font><font color="#CCCCCC"> it's also</font><font color="#E5E5E5"> worth</font>

321
00:12:21,420 --> 00:12:27,360
noting that the<font color="#E5E5E5"> solution step is fairly</font>

322
00:12:23,930 --> 00:12:31,199
fairly quick in our in our case<font color="#E5E5E5"> because</font>

323
00:12:27,360 --> 00:12:33,090
<font color="#CCCCCC">we used a neat trick</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> two horner to</font>

324
00:12:31,200 --> 00:12:36,540
speed<font color="#E5E5E5"> that up and have</font><font color="#CCCCCC"> that take a</font>

325
00:12:33,090 --> 00:12:38,820
significantly less<font color="#CCCCCC"> a smaller chunk</font><font color="#E5E5E5"> of</font>

326
00:12:36,540 --> 00:12:40,740
time we<font color="#CCCCCC"> also know the individual log</font>

327
00:12:38,820 --> 00:12:42,960
actually<font color="#E5E5E5"> computing a log given a target</font>

328
00:12:40,740 --> 00:12:44,100
<font color="#E5E5E5">we tried to speed it up significantly by</font>

329
00:12:42,960 --> 00:12:46,530
throwing a lot of<font color="#E5E5E5"> course at it and we</font>

330
00:12:44,100 --> 00:12:49,590
got<font color="#CCCCCC"> it down to</font><font color="#E5E5E5"> about an hour in 20</font>

331
00:12:46,530 --> 00:12:53,240
<font color="#E5E5E5">minutes across some subset of our</font>

332
00:12:49,590 --> 00:12:55,410
<font color="#CCCCCC">cluster so all in all actually computing</font>

333
00:12:53,240 --> 00:12:57,240
coming up with one<font color="#CCCCCC"> of these Prime's</font><font color="#E5E5E5"> and</font>

334
00:12:55,410 --> 00:13:00,719
computing discrete logarithm<font color="#CCCCCC"> for</font><font color="#E5E5E5"> it is</font>

335
00:12:57,240 --> 00:13:03,420
<font color="#E5E5E5">very much in range for attackers with</font>

336
00:13:00,720 --> 00:13:04,830
pretty modest<font color="#E5E5E5"> resources</font><font color="#CCCCCC"> in case</font><font color="#E5E5E5"> you're</font>

337
00:13:03,420 --> 00:13:08,370
<font color="#CCCCCC">wondering what</font><font color="#E5E5E5"> 2,000 cores actually</font>

338
00:13:04,830 --> 00:13:12,350
looks<font color="#E5E5E5"> like this is what it looks like</font>

339
00:13:08,370 --> 00:13:12,350
not too many racks not too many<font color="#E5E5E5"> servers</font>

340
00:13:14,690 --> 00:13:20,509
so how<font color="#CCCCCC"> about today</font><font color="#E5E5E5"> are there actual</font>

341
00:13:17,269 --> 00:13:23,449
<font color="#E5E5E5">primes</font><font color="#CCCCCC"> being used</font><font color="#E5E5E5"> and wild that ever met</font>

342
00:13:20,509 --> 00:13:24,889
<font color="#E5E5E5">a</font><font color="#CCCCCC"> bolt SNFs the answer is yes there are</font>

343
00:13:23,449 --> 00:13:27,439
some<font color="#E5E5E5"> Prime's that are being used that</font>

344
00:13:24,889 --> 00:13:29,829
are not<font color="#CCCCCC"> hidden at all name</font><font color="#E5E5E5"> of these</font>

345
00:13:27,440 --> 00:13:33,259
Prime's that<font color="#E5E5E5"> are close to powers of to</font>

346
00:13:29,829 --> 00:13:35,508
do a 512 bit prime and<font color="#E5E5E5"> a 1024 bit prime</font>

347
00:13:33,259 --> 00:13:38,050
which we discovered when using<font color="#CCCCCC"> internet</font>

348
00:13:35,509 --> 00:13:41,660
scanning of<font color="#E5E5E5"> publicly visible services</font>

349
00:13:38,050 --> 00:13:44,359
<font color="#CCCCCC">they're about 120 130</font><font color="#E5E5E5"> hosts that</font><font color="#CCCCCC"> are</font>

350
00:13:41,660 --> 00:13:48,019
still using<font color="#CCCCCC"> these</font><font color="#E5E5E5"> Prime's today as</font><font color="#CCCCCC"> of</font>

351
00:13:44,360 --> 00:13:49,370
last week<font color="#CCCCCC"> I believe for the</font><font color="#E5E5E5"> 512 bit</font>

352
00:13:48,019 --> 00:13:52,990
prime running the number<font color="#E5E5E5"> field sieve</font>

353
00:13:49,370 --> 00:13:55,189
actually takes just over<font color="#CCCCCC"> three hours</font>

354
00:13:52,990 --> 00:13:57,500
we ran the special number<font color="#CCCCCC"> field sieve</font>

355
00:13:55,189 --> 00:14:00,500
computation for the 784 bit prime<font color="#E5E5E5"> also</font>

356
00:13:57,500 --> 00:14:03,319
<font color="#E5E5E5">which was discovered and baked into a</font>

357
00:14:00,500 --> 00:14:05,000
crypto library<font color="#CCCCCC"> and that took about</font><font color="#E5E5E5"> 23</font>

358
00:14:03,319 --> 00:14:06,439
<font color="#E5E5E5">days on our cluster and then we did</font><font color="#CCCCCC"> not</font>

359
00:14:05,000 --> 00:14:08,569
<font color="#E5E5E5">run the special number field sieve for</font>

360
00:14:06,439 --> 00:14:10,819
<font color="#E5E5E5">the 1024 bit prime that we discovered we</font>

361
00:14:08,569 --> 00:14:13,310
<font color="#E5E5E5">estimated would have been three</font><font color="#CCCCCC"> or four</font>

362
00:14:10,819 --> 00:14:15,339
<font color="#E5E5E5">times harder than</font><font color="#CCCCCC"> the one that we ran</font>

363
00:14:13,310 --> 00:14:18,619
it's a safe<font color="#E5E5E5"> prime</font>

364
00:14:15,339 --> 00:14:19,790
how about poorly<font color="#CCCCCC"> hit</font><font color="#E5E5E5"> it in primes</font>

365
00:14:18,620 --> 00:14:21,230
so<font color="#E5E5E5"> Prime's</font><font color="#CCCCCC"> that have this</font><font color="#E5E5E5"> property where</font>

366
00:14:19,790 --> 00:14:23,630
there does exist some pair of

367
00:14:21,230 --> 00:14:26,240
polynomials<font color="#CCCCCC"> where there's a</font><font color="#E5E5E5"> small Cove</font>

368
00:14:23,630 --> 00:14:29,389
where the coefficient for<font color="#E5E5E5"> the linear</font>

369
00:14:26,240 --> 00:14:31,310
polynomial with the<font color="#E5E5E5"> linear polynomial is</font>

370
00:14:29,389 --> 00:14:33,230
<font color="#CCCCCC">monic</font><font color="#E5E5E5"> so we did</font><font color="#CCCCCC"> it we took collected all</font>

371
00:14:31,310 --> 00:14:35,989
the primes that<font color="#E5E5E5"> we could find from</font>

372
00:14:33,230 --> 00:14:38,300
various scans of internet hosts and we

373
00:14:35,990 --> 00:14:40,000
<font color="#CCCCCC">brew forced potential leading</font>

374
00:14:38,300 --> 00:14:43,849
coefficients of a degree F polynomial

375
00:14:40,000 --> 00:14:49,149
<font color="#CCCCCC">for degrees for polynomials of degrees</font><font color="#E5E5E5"> 2</font>

376
00:14:43,850 --> 00:14:52,610
through<font color="#E5E5E5"> 9 with up</font><font color="#CCCCCC"> to possible possible</font>

377
00:14:49,149 --> 00:14:54,470
<font color="#E5E5E5">10 bit leading coefficients we didn't</font>

378
00:14:52,610 --> 00:14:56,959
find any polynomials<font color="#E5E5E5"> we didn't find any</font>

379
00:14:54,470 --> 00:14:59,660
Prime's<font color="#CCCCCC"> that had these special</font><font color="#E5E5E5"> number</font>

380
00:14:56,959 --> 00:15:01,609
<font color="#E5E5E5">field</font><font color="#CCCCCC"> sieve polynomials so about the</font>

381
00:14:59,660 --> 00:15:06,699
<font color="#CCCCCC">remaining Prime's</font><font color="#E5E5E5"> that are seen today in</font>

382
00:15:01,610 --> 00:15:09,559
use<font color="#CCCCCC"> some of them are verifiably random</font>

383
00:15:06,699 --> 00:15:11,990
<font color="#CCCCCC">so the in the</font><font color="#E5E5E5"> Prime's that are published</font>

384
00:15:09,559 --> 00:15:14,120
<font color="#CCCCCC">in the Java JDK are actually published</font>

385
00:15:11,990 --> 00:15:16,430
<font color="#E5E5E5">with the seeds to show that</font><font color="#CCCCCC"> they're how</font>

386
00:15:14,120 --> 00:15:20,809
they were generated using<font color="#E5E5E5"> the generated</font>

387
00:15:16,430 --> 00:15:22,790
<font color="#CCCCCC">using lists</font><font color="#E5E5E5"> DSA verify like</font><font color="#CCCCCC"> Prime</font>

388
00:15:20,809 --> 00:15:24,469
generation algorithm some numbers are

389
00:15:22,790 --> 00:15:25,480
nothing up my sleeve numbers that are

390
00:15:24,470 --> 00:15:28,250
derived from

391
00:15:25,480 --> 00:15:29,660
<font color="#CCCCCC">digits of pi</font><font color="#E5E5E5"> or e</font>

392
00:15:28,250 --> 00:15:31,160
we sort<font color="#E5E5E5"> of trust</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> these numbers</font><font color="#CCCCCC"> are</font>

393
00:15:29,660 --> 00:15:33,199
not<font color="#CCCCCC"> backdoor because they seem to have</font>

394
00:15:31,160 --> 00:15:36,290
arrived at them in in a fairly<font color="#CCCCCC"> random</font>

395
00:15:33,200 --> 00:15:37,670
way<font color="#E5E5E5"> finally they're a bunch of numbers</font>

396
00:15:36,290 --> 00:15:39,349
<font color="#E5E5E5">that are sort of floating</font><font color="#CCCCCC"> around</font><font color="#E5E5E5"> or in</font>

397
00:15:37,670 --> 00:15:40,400
use that<font color="#E5E5E5"> we're for which we actually</font>

398
00:15:39,350 --> 00:15:43,070
have no record of<font color="#E5E5E5"> how they were</font>

399
00:15:40,400 --> 00:15:45,530
generated<font color="#CCCCCC"> some of these are actually</font>

400
00:15:43,070 --> 00:15:47,360
pretty commonly used<font color="#CCCCCC"> some examples</font>

401
00:15:45,530 --> 00:15:48,530
include<font color="#E5E5E5"> the groups that are baked into</font>

402
00:15:47,360 --> 00:15:51,020
the<font color="#E5E5E5"> Apache web server</font>

403
00:15:48,530 --> 00:15:54,020
there's no published record of how those

404
00:15:51,020 --> 00:15:56,449
<font color="#E5E5E5">were picked and also groups that were</font>

405
00:15:54,020 --> 00:15:59,689
standardized in RFC<font color="#CCCCCC"> five</font><font color="#E5E5E5"> one one</font><font color="#CCCCCC"> four</font>

406
00:15:56,450 --> 00:16:02,720
have no record<font color="#CCCCCC"> of exactly</font><font color="#E5E5E5"> how they were</font>

407
00:15:59,690 --> 00:16:04,880
generated<font color="#E5E5E5"> if you take a look at RFC five</font>

408
00:16:02,720 --> 00:16:07,700
104<font color="#CCCCCC"> the first group that it defines a</font>

409
00:16:04,880 --> 00:16:10,580
1024 big group<font color="#E5E5E5"> with 160 bit prime orders</font>

410
00:16:07,700 --> 00:16:15,890
<font color="#CCCCCC">sub group it's in use by</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> 900,000</font>

411
00:16:10,580 --> 00:16:18,980
web servers<font color="#E5E5E5"> today that which constitutes</font>

412
00:16:15,890 --> 00:16:21,350
about 2.3<font color="#CCCCCC"> percent of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> of web servers</font>

413
00:16:18,980 --> 00:16:22,430
<font color="#CCCCCC">using</font><font color="#E5E5E5"> HTTP or about</font><font color="#CCCCCC"> 10 percent of web</font>

414
00:16:21,350 --> 00:16:24,230
servers<font color="#CCCCCC"> using finite</font><font color="#E5E5E5"> field</font>

415
00:16:22,430 --> 00:16:27,770
diffie-hellman<font color="#E5E5E5"> and these problems</font><font color="#CCCCCC"> are</font>

416
00:16:24,230 --> 00:16:29,810
<font color="#CCCCCC">also being used for IPSec or VPN servers</font>

417
00:16:27,770 --> 00:16:31,610
<font color="#E5E5E5">about</font><font color="#CCCCCC"> 13</font><font color="#E5E5E5"> percent support these groups</font>

418
00:16:29,810 --> 00:16:33,589
<font color="#E5E5E5">and again these groups are have</font><font color="#CCCCCC"> been</font>

419
00:16:31,610 --> 00:16:36,200
published<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this document but there's</font>

420
00:16:33,590 --> 00:16:38,600
no record of how they were<font color="#E5E5E5"> actually</font>

421
00:16:36,200 --> 00:16:41,690
generated or no proof<font color="#E5E5E5"> of verifiable</font>

422
00:16:38,600 --> 00:16:43,820
randomness<font color="#CCCCCC"> the document</font><font color="#E5E5E5"> actually says</font>

423
00:16:41,690 --> 00:16:46,700
they drew them from<font color="#CCCCCC"> NIST</font><font color="#E5E5E5"> test data that</font>

424
00:16:43,820 --> 00:16:48,800
<font color="#CCCCCC">was</font><font color="#E5E5E5"> published when we released the</font>

425
00:16:46,700 --> 00:16:51,560
<font color="#CCCCCC">eprint of the paper</font><font color="#E5E5E5"> when we released the</font>

426
00:16:48,800 --> 00:16:53,780
<font color="#E5E5E5">paper on ePrint</font><font color="#CCCCCC"> there was a bunch of</font>

427
00:16:51,560 --> 00:16:55,550
discussion on the ITF mailing<font color="#CCCCCC"> lists</font><font color="#E5E5E5"> Tim</font>

428
00:16:53,780 --> 00:16:56,930
<font color="#E5E5E5">poke</font><font color="#CCCCCC"> firmness basically said these</font>

429
00:16:55,550 --> 00:16:59,060
probably<font color="#E5E5E5"> came from NIST but we have no</font>

430
00:16:56,930 --> 00:17:01,430
<font color="#E5E5E5">idea how we generated them we have no</font>

431
00:16:59,060 --> 00:17:04,369
record<font color="#E5E5E5"> it would probably be a good idea</font>

432
00:17:01,430 --> 00:17:08,810
<font color="#E5E5E5">to</font><font color="#CCCCCC"> deprecate them</font><font color="#E5E5E5"> given that</font><font color="#CCCCCC"> we can't</font>

433
00:17:04,369 --> 00:17:11,419
really<font color="#CCCCCC"> trust them so what about 2048</font>

434
00:17:08,810 --> 00:17:13,399
bits<font color="#CCCCCC"> gordon's trapdoor construction</font>

435
00:17:11,420 --> 00:17:16,910
<font color="#E5E5E5">would still work using modern parameters</font>

436
00:17:13,400 --> 00:17:18,319
so<font color="#CCCCCC"> primes that</font><font color="#E5E5E5"> are used today for DSA</font>

437
00:17:16,910 --> 00:17:22,810
<font color="#CCCCCC">primes that</font><font color="#E5E5E5"> are used today of 2048 bits</font>

438
00:17:18,319 --> 00:17:25,760
usually<font color="#CCCCCC"> have a 224 bit or 256 bit</font>

439
00:17:22,810 --> 00:17:27,530
subgroup<font color="#E5E5E5"> which allows us to</font><font color="#CCCCCC"> pick a</font>

440
00:17:25,760 --> 00:17:29,150
polynomial of degree<font color="#CCCCCC"> seven which is good</font>

441
00:17:27,530 --> 00:17:31,550
<font color="#E5E5E5">for the number field sieve and use</font>

442
00:17:29,150 --> 00:17:32,890
Gordon's algorithm however actually

443
00:17:31,550 --> 00:17:36,409
running the special number<font color="#E5E5E5"> field sieve</font>

444
00:17:32,890 --> 00:17:37,910
<font color="#E5E5E5">even for for a trapdoor number or</font>

445
00:17:36,410 --> 00:17:39,679
running the special<font color="#CCCCCC"> number field sieve</font>

446
00:17:37,910 --> 00:17:41,360
<font color="#E5E5E5">would still</font><font color="#CCCCCC"> probably take</font><font color="#E5E5E5"> about seven</font>

447
00:17:39,679 --> 00:17:45,320
billion<font color="#E5E5E5"> couriers</font>

448
00:17:41,360 --> 00:17:46,850
and in contrast<font color="#CCCCCC"> to our</font><font color="#E5E5E5"> 400</font><font color="#CCCCCC"> quarters for</font>

449
00:17:45,320 --> 00:17:48,860
the<font color="#CCCCCC"> kilobit SNFs it's probably</font><font color="#E5E5E5"> not</font>

450
00:17:46,850 --> 00:17:50,899
really feasible<font color="#E5E5E5"> but it's certainly</font><font color="#CCCCCC"> not</font>

451
00:17:48,860 --> 00:17:52,789
really giving you 2048-bit<font color="#E5E5E5"> strength</font><font color="#CCCCCC"> that</font>

452
00:17:50,900 --> 00:17:55,880
you might expect<font color="#E5E5E5"> otherwise if it's if</font>

453
00:17:52,789 --> 00:17:57,980
it's<font color="#E5E5E5"> trapped Dourdan so considerations</font>

454
00:17:55,880 --> 00:18:00,220
for<font color="#E5E5E5"> the future</font><font color="#CCCCCC"> takeaways it's</font><font color="#E5E5E5"> always</font>

455
00:17:57,980 --> 00:18:02,059
good when<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> designing crypto</font>

456
00:18:00,220 --> 00:18:03,350
<font color="#CCCCCC">algorithms and protocols</font><font color="#E5E5E5"> to try and</font>

457
00:18:02,059 --> 00:18:05,960
eliminate<font color="#E5E5E5"> the potential</font><font color="#CCCCCC"> for backdoored</font>

458
00:18:03,350 --> 00:18:07,939
parameters<font color="#CCCCCC"> we saw with dual</font><font color="#E5E5E5"> EC even if</font>

459
00:18:05,960 --> 00:18:10,010
it was never<font color="#E5E5E5"> actually backdoored by</font>

460
00:18:07,940 --> 00:18:13,370
anyone who standardized it it's<font color="#E5E5E5"> actually</font>

461
00:18:10,010 --> 00:18:15,850
been weaponized or used in in the real

462
00:18:13,370 --> 00:18:18,860
world<font color="#CCCCCC"> the back door has been exploited</font>

463
00:18:15,850 --> 00:18:22,279
<font color="#E5E5E5">it's important if you need verifiable</font>

464
00:18:18,860 --> 00:18:24,439
randomness<font color="#E5E5E5"> and your parameters to really</font>

465
00:18:22,279 --> 00:18:25,789
stress that<font color="#E5E5E5"> and</font><font color="#CCCCCC"> not allowed</font><font color="#E5E5E5"> to end up</font>

466
00:18:24,440 --> 00:18:26,720
getting<font color="#E5E5E5"> marked as optional</font><font color="#CCCCCC"> even if</font>

467
00:18:25,789 --> 00:18:32,029
<font color="#E5E5E5">something doesn't seem immediately</font>

468
00:18:26,720 --> 00:18:33,740
feasible<font color="#E5E5E5"> and of course it's good to</font>

469
00:18:32,029 --> 00:18:34,970
account for<font color="#E5E5E5"> pre-computation your</font>

470
00:18:33,740 --> 00:18:37,330
<font color="#CCCCCC">analysis if everyone is using the</font><font color="#E5E5E5"> same</font>

471
00:18:34,970 --> 00:18:39,200
<font color="#CCCCCC">set</font><font color="#E5E5E5"> of primes</font><font color="#CCCCCC"> then the cost of actually</font>

472
00:18:37,330 --> 00:18:40,720
<font color="#CCCCCC">backdooring or running the number field</font>

473
00:18:39,200 --> 00:18:43,880
sit for one of these<font color="#CCCCCC"> primes is amortized</font>

474
00:18:40,720 --> 00:18:44,980
<font color="#CCCCCC">because it gets you</font><font color="#E5E5E5"> many allows you to</font>

475
00:18:43,880 --> 00:18:47,780
break<font color="#E5E5E5"> many instances of</font><font color="#CCCCCC"> the problem</font>

476
00:18:44,980 --> 00:18:52,300
<font color="#E5E5E5">thank you</font>

477
00:18:47,780 --> 00:18:54,129
[Applause]

478
00:18:52,300 --> 00:19:08,169
Thank<font color="#E5E5E5"> You Joshua that very interesting</font>

479
00:18:54,130 --> 00:19:10,000
<font color="#CCCCCC">talk</font><font color="#E5E5E5"> do we have any questions</font><font color="#CCCCCC"> yeah is</font>

480
00:19:08,170 --> 00:19:11,830
there<font color="#E5E5E5"> any evidence to suggest that</font>

481
00:19:10,000 --> 00:19:16,929
Gordon's algorithm is optimal for

482
00:19:11,830 --> 00:19:18,309
embedding these trapdoors<font color="#CCCCCC"> well no one</font>

483
00:19:16,929 --> 00:19:21,700
has<font color="#CCCCCC"> come</font><font color="#E5E5E5"> up with a way of uncovering</font>

484
00:19:18,309 --> 00:19:23,740
them yet<font color="#CCCCCC"> so it seems somewhat optimal</font>

485
00:19:21,700 --> 00:19:25,600
but there may be better ways I mean you

486
00:19:23,740 --> 00:19:27,670
can basically you can<font color="#E5E5E5"> create these</font>

487
00:19:25,600 --> 00:19:29,110
<font color="#E5E5E5">trapdoors also by just randomly picking</font>

488
00:19:27,670 --> 00:19:37,059
a pair of<font color="#CCCCCC"> polynomials and seeing if</font><font color="#E5E5E5"> it</font>

489
00:19:29,110 --> 00:19:39,419
satisfies your criteria any other

490
00:19:37,059 --> 00:19:39,420
questions

491
00:19:42,150 --> 00:19:49,510
so have you<font color="#CCCCCC"> thought about if there's</font><font color="#E5E5E5"> an</font>

492
00:19:45,370 --> 00:19:52,330
algorithm<font color="#E5E5E5"> to detect whether kind of a</font>

493
00:19:49,510 --> 00:19:56,950
<font color="#E5E5E5">promise trapdoor without spilling out</font>

494
00:19:52,330 --> 00:19:58,840
<font color="#CCCCCC">the coefficients some of my co-authors</font>

495
00:19:56,950 --> 00:20:01,179
did spend a considerable amount<font color="#E5E5E5"> of</font><font color="#CCCCCC"> time</font>

496
00:19:58,840 --> 00:20:02,470
<font color="#E5E5E5">trying</font><font color="#CCCCCC"> to go through possible ways of</font>

497
00:20:01,179 --> 00:20:04,270
uncovering the trapdoors<font color="#CCCCCC"> and weren't</font>

498
00:20:02,470 --> 00:20:06,190
<font color="#E5E5E5">able to come</font><font color="#CCCCCC"> up with anything sort</font><font color="#E5E5E5"> of an</font>

499
00:20:04,270 --> 00:20:08,590
<font color="#CCCCCC">open problem</font><font color="#E5E5E5"> we don't</font><font color="#CCCCCC"> have a proof that</font>

500
00:20:06,190 --> 00:20:10,809
it's<font color="#E5E5E5"> not uncover</font><font color="#CCCCCC"> Abel or that it</font><font color="#E5E5E5"> isn't</font>

501
00:20:08,590 --> 00:20:12,730
good<font color="#E5E5E5"> we don't</font><font color="#CCCCCC"> have a</font><font color="#E5E5E5"> proof whether these</font>

502
00:20:10,809 --> 00:20:14,260
two problem are separated or something

503
00:20:12,730 --> 00:20:16,840
like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we don't have a proof that</font>

504
00:20:14,260 --> 00:20:17,679
that<font color="#E5E5E5"> this is completely undetectable it</font>

505
00:20:16,840 --> 00:20:19,030
could be that<font color="#E5E5E5"> someone in the future</font>

506
00:20:17,679 --> 00:20:20,950
comes up with some algorithm for

507
00:20:19,030 --> 00:20:24,250
<font color="#E5E5E5">detecting this but as of today there's</font>

508
00:20:20,950 --> 00:20:26,830
no known way of<font color="#CCCCCC"> detecting it so maybe</font>

509
00:20:24,250 --> 00:20:29,559
you<font color="#E5E5E5"> can detect but cannot spell it out</font>

510
00:20:26,830 --> 00:20:31,899
<font color="#E5E5E5">the exact</font><font color="#CCCCCC"> F energy you know is that a</font>

511
00:20:29,559 --> 00:20:34,980
possibility<font color="#E5E5E5"> to do that it may be faster</font>

512
00:20:31,900 --> 00:20:34,980
I'm not sure

