1
00:00:00,000 --> 00:00:04,859
thank you<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is a joint</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> with</font>

2
00:00:02,159 --> 00:00:09,120
Rafael<font color="#CCCCCC"> Paz and Elaine</font><font color="#E5E5E5"> Shi from Cornell</font>

3
00:00:04,859 --> 00:00:11,429
<font color="#E5E5E5">Tech and Cornell University</font><font color="#CCCCCC"> so let</font><font color="#E5E5E5"> me</font>

4
00:00:09,120 --> 00:00:13,469
start by<font color="#E5E5E5"> first</font><font color="#CCCCCC"> trying to put our work a</font>

5
00:00:11,429 --> 00:00:15,299
bit in<font color="#E5E5E5"> context sort of why why we'd want</font>

6
00:00:13,469 --> 00:00:18,750
<font color="#CCCCCC">these formal abstractions here by</font>

7
00:00:15,299 --> 00:00:20,520
looking<font color="#CCCCCC"> at the history</font><font color="#E5E5E5"> of how trusted</font>

8
00:00:18,750 --> 00:00:23,400
<font color="#E5E5E5">Hardware has been viewed in sort of</font>

9
00:00:20,520 --> 00:00:25,740
different communities and<font color="#E5E5E5"> we essentially</font>

10
00:00:23,400 --> 00:00:27,810
can<font color="#E5E5E5"> identify some to two different</font>

11
00:00:25,740 --> 00:00:30,419
<font color="#E5E5E5">trends here on the on the one hand in</font>

12
00:00:27,810 --> 00:00:33,989
<font color="#E5E5E5">our own crypto community especially in</font>

13
00:00:30,420 --> 00:00:36,390
theoretical cryptography<font color="#E5E5E5"> Hardware</font>

14
00:00:33,989 --> 00:00:39,690
assumptions have<font color="#CCCCCC"> usually have been used</font>

15
00:00:36,390 --> 00:00:42,360
as minimal set of<font color="#CCCCCC"> assumptions that allow</font>

16
00:00:39,690 --> 00:00:45,510
<font color="#CCCCCC">us to circumvent</font><font color="#E5E5E5"> some theoretical</font>

17
00:00:42,360 --> 00:00:50,100
<font color="#CCCCCC">impossibility so thinks a composable</font>

18
00:00:45,510 --> 00:00:52,559
security<font color="#E5E5E5"> and so usually the the goal</font>

19
00:00:50,100 --> 00:00:55,020
here<font color="#E5E5E5"> was more to get theoretical</font>

20
00:00:52,559 --> 00:00:57,539
feasibility from sort of smallest

21
00:00:55,020 --> 00:00:59,460
assumption possible and with little

22
00:00:57,539 --> 00:01:02,129
<font color="#CCCCCC">concern about the</font><font color="#E5E5E5"> actual practical</font>

23
00:00:59,460 --> 00:01:05,250
<font color="#CCCCCC">performance that you end up</font><font color="#E5E5E5"> getting from</font>

24
00:01:02,129 --> 00:01:06,750
these protocols<font color="#E5E5E5"> and on the other hand in</font>

25
00:01:05,250 --> 00:01:09,840
the sort<font color="#CCCCCC"> of architecture and system</font>

26
00:01:06,750 --> 00:01:11,189
security<font color="#CCCCCC"> communities</font><font color="#E5E5E5"> well the goal has</font>

27
00:01:09,840 --> 00:01:13,290
more<font color="#E5E5E5"> been to sort of view trusted</font>

28
00:01:11,189 --> 00:01:16,048
<font color="#CCCCCC">Hardware as a way of getting trusted</font>

29
00:01:13,290 --> 00:01:19,049
<font color="#CCCCCC">execution of say</font><font color="#E5E5E5"> general-purpose user</font>

30
00:01:16,049 --> 00:01:21,330
programs with a focus more on the actual

31
00:01:19,049 --> 00:01:22,680
<font color="#E5E5E5">expressivity that the hardware would</font>

32
00:01:21,330 --> 00:01:25,429
give you and sort<font color="#E5E5E5"> of cost-effectiveness</font>

33
00:01:22,680 --> 00:01:29,250
<font color="#E5E5E5">and reusability for many different</font>

34
00:01:25,430 --> 00:01:31,530
<font color="#E5E5E5">programs and it's actually</font><font color="#CCCCCC"> interesting</font>

35
00:01:29,250 --> 00:01:33,479
<font color="#CCCCCC">to see that</font><font color="#E5E5E5"> various projects in this</font>

36
00:01:31,530 --> 00:01:37,110
space both in in sort<font color="#CCCCCC"> of</font><font color="#E5E5E5"> academia and</font>

37
00:01:33,479 --> 00:01:38,610
<font color="#E5E5E5">industry</font><font color="#CCCCCC"> so from the hardware and</font>

38
00:01:37,110 --> 00:01:42,090
architecture<font color="#E5E5E5"> community have sort of</font>

39
00:01:38,610 --> 00:01:47,340
converged to this notion of<font color="#E5E5E5"> a tested</font>

40
00:01:42,090 --> 00:01:49,439
execution<font color="#E5E5E5"> and well first in this talk I</font>

41
00:01:47,340 --> 00:01:51,149
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> sort of try</font><font color="#CCCCCC"> and define this</font>

42
00:01:49,439 --> 00:01:53,820
notion<font color="#E5E5E5"> a bit more</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> more formally sort</font>

43
00:01:51,149 --> 00:01:55,560
of see what what this notion<font color="#E5E5E5"> really is</font>

44
00:01:53,820 --> 00:01:58,350
and then sort<font color="#CCCCCC"> of</font><font color="#E5E5E5"> a more interesting</font>

45
00:01:55,560 --> 00:02:00,630
question<font color="#E5E5E5"> from a from a theoretical</font>

46
00:01:58,350 --> 00:02:07,199
<font color="#E5E5E5">perspective well what does this notion</font>

47
00:02:00,630 --> 00:02:10,109
allow us to<font color="#E5E5E5"> express well or not</font><font color="#CCCCCC"> so let's</font>

48
00:02:07,200 --> 00:02:12,700
<font color="#E5E5E5">start from this standard setting where</font>

49
00:02:10,110 --> 00:02:17,110
you'd<font color="#E5E5E5"> have a client that wants</font><font color="#CCCCCC"> to out</font>

50
00:02:12,700 --> 00:02:19,440
computation<font color="#E5E5E5"> to an untrusted server</font><font color="#CCCCCC"> in</font>

51
00:02:17,110 --> 00:02:21,730
parts of<font color="#E5E5E5"> this talk I might use sort of</font>

52
00:02:19,440 --> 00:02:24,910
<font color="#E5E5E5">terminology and models that</font><font color="#CCCCCC"> are sort of</font>

53
00:02:21,730 --> 00:02:26,590
<font color="#E5E5E5">reminiscent of Intel's</font><font color="#CCCCCC"> SGX but the</font><font color="#E5E5E5"> the</font>

54
00:02:24,910 --> 00:02:29,500
sort<font color="#E5E5E5"> of aim is is to cover the the</font>

55
00:02:26,590 --> 00:02:35,080
<font color="#E5E5E5">essence of a tested execution in sort of</font>

56
00:02:29,500 --> 00:02:36,700
more<font color="#CCCCCC"> more general sense here</font><font color="#E5E5E5"> so the the</font>

57
00:02:35,080 --> 00:02:39,069
server who has access to a<font color="#CCCCCC"> secure</font>

58
00:02:36,700 --> 00:02:42,549
processor can then spin up a<font color="#CCCCCC"> so-called</font>

59
00:02:39,069 --> 00:02:44,708
<font color="#CCCCCC">enclaves so say an isolated execution</font>

60
00:02:42,550 --> 00:02:48,670
region that can compute this<font color="#CCCCCC"> this</font>

61
00:02:44,709 --> 00:02:50,890
<font color="#E5E5E5">program in isolation and the trust is</font>

62
00:02:48,670 --> 00:02:54,780
essentially bootstrapped by a trusted

63
00:02:50,890 --> 00:02:57,910
manufacturer that<font color="#E5E5E5"> can embed a secret</font>

64
00:02:54,780 --> 00:02:59,950
<font color="#CCCCCC">attestation key inside the the</font><font color="#E5E5E5"> hardware</font>

65
00:02:57,910 --> 00:03:02,200
<font color="#CCCCCC">that can then essentially</font><font color="#E5E5E5"> be used to</font>

66
00:02:59,950 --> 00:03:05,160
remotely<font color="#CCCCCC"> attest</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the to the</font>

67
00:03:02,200 --> 00:03:07,988
correctness of execution of a program

68
00:03:05,160 --> 00:03:10,959
<font color="#E5E5E5">and so this is kind</font><font color="#CCCCCC"> of a nice picture it</font>

69
00:03:07,989 --> 00:03:14,130
tells us<font color="#E5E5E5"> kind of what we what</font><font color="#CCCCCC"> we want</font>

70
00:03:10,959 --> 00:03:16,450
from from a tested execution from secure

71
00:03:14,130 --> 00:03:18,670
from trusted<font color="#E5E5E5"> hardware but it's not</font>

72
00:03:16,450 --> 00:03:23,500
<font color="#E5E5E5">necessarily a very precise abstraction</font>

73
00:03:18,670 --> 00:03:26,108
<font color="#CCCCCC">to work</font><font color="#E5E5E5"> with so why would we want the</font>

74
00:03:23,500 --> 00:03:29,260
<font color="#CCCCCC">sort of</font><font color="#E5E5E5"> more formal ideal abstraction</font>

75
00:03:26,109 --> 00:03:31,209
well<font color="#E5E5E5"> on the one hand systems that are</font>

76
00:03:29,260 --> 00:03:34,298
usually<font color="#CCCCCC"> built on top then of the of</font>

77
00:03:31,209 --> 00:03:36,790
trusted<font color="#CCCCCC"> Hardware have historically sort</font>

78
00:03:34,299 --> 00:03:38,890
of tended to prove security<font color="#CCCCCC"> and sort of</font>

79
00:03:36,790 --> 00:03:41,590
ad hoc fashion<font color="#E5E5E5"> because of a lack of a</font>

80
00:03:38,890 --> 00:03:43,268
sort of formal model in which to work

81
00:03:41,590 --> 00:03:46,980
with and so<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> something that we'd</font>

82
00:03:43,269 --> 00:03:50,950
hope to be able<font color="#E5E5E5"> to fix if we had a</font>

83
00:03:46,980 --> 00:03:53,768
formal<font color="#E5E5E5"> and precise abstraction</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's</font>

84
00:03:50,950 --> 00:03:55,869
important<font color="#CCCCCC"> to note that we</font><font color="#E5E5E5"> don't and</font>

85
00:03:53,769 --> 00:03:58,450
<font color="#E5E5E5">actually can't claim today that any</font>

86
00:03:55,870 --> 00:04:01,090
secure processor<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you can find on</font>

87
00:03:58,450 --> 00:04:03,488
the<font color="#CCCCCC"> market will actually realize any</font>

88
00:04:01,090 --> 00:04:06,640
form of ideal abstraction that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can't</font>

89
00:04:03,489 --> 00:04:09,310
come up<font color="#CCCCCC"> with</font><font color="#E5E5E5"> and this is sort</font><font color="#CCCCCC"> of the I</font>

90
00:04:06,640 --> 00:04:14,078
<font color="#CCCCCC">think the next important step then in</font>

91
00:04:09,310 --> 00:04:16,660
the end this<font color="#E5E5E5"> in this area</font><font color="#CCCCCC"> is that we'd</font>

92
00:04:14,079 --> 00:04:19,000
<font color="#CCCCCC">actually want to have secure processors</font>

93
00:04:16,660 --> 00:04:21,190
that<font color="#CCCCCC"> can be sort of formally verified</font><font color="#E5E5E5"> to</font>

94
00:04:19,000 --> 00:04:25,240
actually implement some some form of

95
00:04:21,190 --> 00:04:26,530
<font color="#E5E5E5">ideal abstraction so let me now dive</font>

96
00:04:25,240 --> 00:04:28,540
into the the<font color="#CCCCCC"> ax</font>

97
00:04:26,530 --> 00:04:31,299
formal model that we that we<font color="#E5E5E5"> work with</font>

98
00:04:28,540 --> 00:04:34,540
<font color="#E5E5E5">so we model a tested execution as a</font>

99
00:04:31,300 --> 00:04:38,590
ideal functionality<font color="#E5E5E5"> and if you see style</font>

100
00:04:34,540 --> 00:04:43,360
framework and this functionality

101
00:04:38,590 --> 00:04:45,520
essentially<font color="#CCCCCC"> will include all</font><font color="#E5E5E5"> secure</font>

102
00:04:43,360 --> 00:04:48,700
processors or all platforms<font color="#E5E5E5"> from</font><font color="#CCCCCC"> a from</font>

103
00:04:45,520 --> 00:04:52,960
a given manufacturer in a in a registry

104
00:04:48,700 --> 00:04:55,950
<font color="#E5E5E5">and the the interface of</font><font color="#CCCCCC"> this</font>

105
00:04:52,960 --> 00:04:57,700
functionality is pretty simple<font color="#CCCCCC"> so at</font>

106
00:04:55,950 --> 00:05:03,760
initialization times at manufacturing

107
00:04:57,700 --> 00:05:06,909
<font color="#CCCCCC">time it will generate public and secret</font>

108
00:05:03,760 --> 00:05:09,760
key<font color="#CCCCCC"> for attestation and so these</font><font color="#E5E5E5"> keys</font>

109
00:05:06,910 --> 00:05:12,040
will<font color="#E5E5E5"> be shared by all</font><font color="#CCCCCC"> platforms from</font><font color="#E5E5E5"> the</font>

110
00:05:09,760 --> 00:05:15,760
same manufacturer<font color="#CCCCCC"> and at any given</font><font color="#E5E5E5"> time</font>

111
00:05:12,040 --> 00:05:19,660
a remote<font color="#CCCCCC"> part</font><font color="#E5E5E5"> you might sort of be</font><font color="#CCCCCC"> able</font>

112
00:05:15,760 --> 00:05:21,669
to query to get this public key<font color="#CCCCCC"> and when</font>

113
00:05:19,660 --> 00:05:23,560
a party that belongs to the registries

114
00:05:21,669 --> 00:05:26,460
<font color="#CCCCCC">of a party</font><font color="#E5E5E5"> that has a</font><font color="#CCCCCC"> secure processor</font>

115
00:05:23,560 --> 00:05:29,650
<font color="#E5E5E5">wants to install</font><font color="#CCCCCC"> a new</font><font color="#E5E5E5"> program well</font><font color="#CCCCCC"> will</font>

116
00:05:26,460 --> 00:05:34,270
the ideal functionality will spin<font color="#CCCCCC"> up a</font>

117
00:05:29,650 --> 00:05:37,090
new<font color="#CCCCCC"> end</font><font color="#E5E5E5"> clave and assign it a unique</font>

118
00:05:34,270 --> 00:05:40,930
identifier of<font color="#CCCCCC"> the nonce identifier that</font>

119
00:05:37,090 --> 00:05:45,099
<font color="#CCCCCC">will allow us to</font><font color="#E5E5E5"> identify stateful</font>

120
00:05:40,930 --> 00:05:48,070
programs over<font color="#CCCCCC"> time and whenever the</font>

121
00:05:45,100 --> 00:05:50,070
party<font color="#E5E5E5"> that installed a enclaved program</font>

122
00:05:48,070 --> 00:05:53,020
wants to run<font color="#CCCCCC"> it on a</font><font color="#E5E5E5"> particular input</font>

123
00:05:50,070 --> 00:05:56,770
<font color="#E5E5E5">well we simply run the program that was</font>

124
00:05:53,020 --> 00:05:59,590
that was stored<font color="#E5E5E5"> and update its state so</font>

125
00:05:56,770 --> 00:06:02,049
essentially it's<font color="#E5E5E5"> its memory and then</font>

126
00:05:59,590 --> 00:06:07,229
produce an attestation so a digital

127
00:06:02,050 --> 00:06:10,060
<font color="#CCCCCC">signature</font><font color="#E5E5E5"> under this shared secret key</font>

128
00:06:07,229 --> 00:06:15,130
<font color="#E5E5E5">over the the program that was computed</font>

129
00:06:10,060 --> 00:06:19,150
and and the output so let me say a<font color="#CCCCCC"> bit</font>

130
00:06:15,130 --> 00:06:22,240
more<font color="#E5E5E5"> about</font><font color="#CCCCCC"> our modeling choices so we we</font>

131
00:06:19,150 --> 00:06:24,669
model this<font color="#E5E5E5"> a tested execution</font><font color="#CCCCCC"> ideal</font>

132
00:06:22,240 --> 00:06:28,120
functionality in the in the<font color="#CCCCCC"> UC framework</font>

133
00:06:24,669 --> 00:06:31,150
so why why<font color="#E5E5E5"> you do you see framework so</font>

134
00:06:28,120 --> 00:06:33,520
first of all<font color="#E5E5E5"> it's sort of worth noting</font>

135
00:06:31,150 --> 00:06:35,590
that<font color="#E5E5E5"> trusted</font><font color="#CCCCCC"> Hardware is probably not</font>

136
00:06:33,520 --> 00:06:37,630
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to be used in in isolation</font><font color="#E5E5E5"> it's</font>

137
00:06:35,590 --> 00:06:39,469
gonna<font color="#E5E5E5"> be part of sort</font><font color="#CCCCCC"> of larger</font>

138
00:06:37,630 --> 00:06:41,060
protocols and<font color="#CCCCCC"> we're</font>

139
00:06:39,470 --> 00:06:43,300
composition seems to be a sort<font color="#CCCCCC"> of</font>

140
00:06:41,060 --> 00:06:47,810
desirable property when we<font color="#E5E5E5"> want to prove</font>

141
00:06:43,300 --> 00:06:50,270
security of systems in this space<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so</font>

142
00:06:47,810 --> 00:06:53,150
why why the<font color="#CCCCCC"> generalized UC</font><font color="#E5E5E5"> framework</font>

143
00:06:50,270 --> 00:06:55,039
well this is to do<font color="#E5E5E5"> with the fact that</font>

144
00:06:53,150 --> 00:06:57,320
these at the station<font color="#E5E5E5"> keys are sort of</font>

145
00:06:55,040 --> 00:07:01,040
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> be inherently shared across</font>

146
00:06:57,320 --> 00:07:02,659
protocols<font color="#E5E5E5"> because well the way the</font>

147
00:07:01,040 --> 00:07:05,840
<font color="#E5E5E5">system is</font><font color="#CCCCCC"> actually set up in</font><font color="#E5E5E5"> practice</font>

148
00:07:02,660 --> 00:07:10,910
all platforms inherently share share

149
00:07:05,840 --> 00:07:12,770
<font color="#E5E5E5">state in in this sense and this actually</font>

150
00:07:10,910 --> 00:07:14,630
means that<font color="#E5E5E5"> at the stations that</font><font color="#CCCCCC"> are</font>

151
00:07:12,770 --> 00:07:16,580
produced in one run<font color="#CCCCCC"> over</font><font color="#E5E5E5"> protocol have a</font>

152
00:07:14,630 --> 00:07:19,430
have a<font color="#CCCCCC"> lifetime</font><font color="#E5E5E5"> that sort</font><font color="#CCCCCC"> of goes beyond</font>

153
00:07:16,580 --> 00:07:21,650
that particular<font color="#E5E5E5"> protocol and this is</font>

154
00:07:19,430 --> 00:07:23,540
actually a source of some technical

155
00:07:21,650 --> 00:07:25,880
difficulties<font color="#CCCCCC"> that we have to work with</font>

156
00:07:23,540 --> 00:07:28,190
so a concrete<font color="#CCCCCC"> example of a security</font>

157
00:07:25,880 --> 00:07:29,810
<font color="#E5E5E5">issue that can come</font><font color="#CCCCCC"> up from</font><font color="#E5E5E5"> this that</font>

158
00:07:28,190 --> 00:07:31,969
sort of<font color="#CCCCCC"> well-known in the cryptographic</font>

159
00:07:29,810 --> 00:07:35,720
<font color="#CCCCCC">community is this notion of</font><font color="#E5E5E5"> non</font>

160
00:07:31,970 --> 00:07:37,730
deniability so if one party produces an

161
00:07:35,720 --> 00:07:40,580
attestation in one run<font color="#CCCCCC"> of a protocol</font>

162
00:07:37,730 --> 00:07:42,830
then this sort of provides undeniable

163
00:07:40,580 --> 00:07:44,390
proof<font color="#CCCCCC"> that some party that belonged to</font>

164
00:07:42,830 --> 00:07:46,729
<font color="#E5E5E5">the registry</font><font color="#CCCCCC"> so that</font><font color="#E5E5E5"> has a secure</font>

165
00:07:44,390 --> 00:07:49,180
processor actually participated in<font color="#E5E5E5"> this</font>

166
00:07:46,730 --> 00:07:51,340
protocol<font color="#E5E5E5"> and I'll come back</font><font color="#CCCCCC"> to this</font>

167
00:07:49,180 --> 00:07:54,020
later

168
00:07:51,340 --> 00:07:56,270
so let's now move<font color="#E5E5E5"> on to this</font><font color="#CCCCCC"> maybe more</font>

169
00:07:54,020 --> 00:07:59,000
more interesting question of well say we

170
00:07:56,270 --> 00:08:00,289
have such a formal abstraction then what

171
00:07:59,000 --> 00:08:03,410
<font color="#E5E5E5">can we actually do with it</font>

172
00:08:00,290 --> 00:08:06,229
and<font color="#E5E5E5"> on the one hand this may be not very</font>

173
00:08:03,410 --> 00:08:08,990
surprising<font color="#E5E5E5"> that we can show that this is</font>

174
00:08:06,229 --> 00:08:12,380
<font color="#CCCCCC">a very powerful abstraction</font><font color="#E5E5E5"> and in</font>

175
00:08:08,990 --> 00:08:14,210
particular<font color="#E5E5E5"> it allows us</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> it sort</font><font color="#CCCCCC"> of we</font>

176
00:08:12,380 --> 00:08:16,700
<font color="#CCCCCC">can show that it implies a notion of</font>

177
00:08:14,210 --> 00:08:19,010
obfuscation<font color="#CCCCCC"> for stateful programs</font><font color="#E5E5E5"> is</font>

178
00:08:16,700 --> 00:08:22,070
actually impossible<font color="#E5E5E5"> to obtain</font><font color="#CCCCCC"> even if we</font>

179
00:08:19,010 --> 00:08:24,349
go sort<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the full route of general</font>

180
00:08:22,070 --> 00:08:26,000
cryptographic obfuscation and we also

181
00:08:24,350 --> 00:08:29,450
show<font color="#CCCCCC"> that you couldn't be able</font><font color="#E5E5E5"> to do</font>

182
00:08:26,000 --> 00:08:32,059
<font color="#E5E5E5">this if the your trusted</font><font color="#CCCCCC"> hardware was a</font>

183
00:08:29,450 --> 00:08:33,740
stateless only in the interest of time I

184
00:08:32,059 --> 00:08:35,959
won't<font color="#E5E5E5"> actually be</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> go</font><font color="#CCCCCC"> over this</font>

185
00:08:33,740 --> 00:08:37,789
in this talk<font color="#CCCCCC"> but I'll invite you to see</font>

186
00:08:35,960 --> 00:08:40,039
our paper for the<font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of formal</font>

187
00:08:37,789 --> 00:08:43,098
definitions and<font color="#E5E5E5"> and constructions we use</font>

188
00:08:40,039 --> 00:08:45,230
here<font color="#CCCCCC"> the part I want</font><font color="#E5E5E5"> to focus on a bit</font>

189
00:08:43,099 --> 00:08:47,780
<font color="#E5E5E5">more is actually what to us was a bit</font>

190
00:08:45,230 --> 00:08:51,260
more surprising<font color="#E5E5E5"> is that if starting from</font>

191
00:08:47,780 --> 00:08:53,150
<font color="#E5E5E5">this assumption</font><font color="#CCCCCC"> we try to get sort</font><font color="#E5E5E5"> of</font>

192
00:08:51,260 --> 00:08:56,120
full use

193
00:08:53,150 --> 00:08:58,790
secure multi-party computation<font color="#E5E5E5"> then</font>

194
00:08:56,120 --> 00:09:02,300
things<font color="#CCCCCC"> actually turn</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> to be somewhat</font>

195
00:08:58,790 --> 00:09:06,380
more<font color="#E5E5E5"> complicated and I'll go into this</font>

196
00:09:02,300 --> 00:09:08,510
now in a bit more<font color="#E5E5E5"> detail</font><font color="#CCCCCC"> so for for</font>

197
00:09:06,380 --> 00:09:11,240
simplicity<font color="#E5E5E5"> we can sort of look at just</font>

198
00:09:08,510 --> 00:09:13,910
two-party computation where if Alice<font color="#CCCCCC"> and</font>

199
00:09:11,240 --> 00:09:16,970
Bob<font color="#E5E5E5"> they want to commonly compute some</font>

200
00:09:13,910 --> 00:09:18,680
function of<font color="#E5E5E5"> their inputs and here what</font>

201
00:09:16,970 --> 00:09:22,460
we can show is<font color="#CCCCCC"> that actually when both</font>

202
00:09:18,680 --> 00:09:26,319
parties have a<font color="#CCCCCC"> secure processor then we</font>

203
00:09:22,460 --> 00:09:29,210
it's actually somewhat easy to get

204
00:09:26,320 --> 00:09:32,090
<font color="#E5E5E5">universally composable secure two-party</font>

205
00:09:29,210 --> 00:09:33,980
computation however if one party

206
00:09:32,090 --> 00:09:37,850
<font color="#CCCCCC">actually doesn't have a secure processor</font>

207
00:09:33,980 --> 00:09:40,310
so in this case Bob<font color="#E5E5E5"> lost his then we</font>

208
00:09:37,850 --> 00:09:42,110
actually<font color="#CCCCCC"> showed</font><font color="#E5E5E5"> that getting</font><font color="#CCCCCC"> two-party</font>

209
00:09:40,310 --> 00:09:46,010
computation in a you<font color="#E5E5E5"> see secure way</font><font color="#CCCCCC"> is</font>

210
00:09:42,110 --> 00:09:48,620
<font color="#CCCCCC">impossible</font><font color="#E5E5E5"> and this is somewhat</font>

211
00:09:46,010 --> 00:09:50,180
counterintuitive<font color="#CCCCCC"> so if you recall</font><font color="#E5E5E5"> the</font>

212
00:09:48,620 --> 00:09:52,100
sort of<font color="#E5E5E5"> informal picture from the</font>

213
00:09:50,180 --> 00:09:54,229
beginning of this talk where we<font color="#E5E5E5"> looked</font>

214
00:09:52,100 --> 00:09:56,630
at how a client<font color="#E5E5E5"> might want to outsource</font>

215
00:09:54,230 --> 00:09:58,640
computation to a server in this picture

216
00:09:56,630 --> 00:10:00,380
we<font color="#CCCCCC"> just considered that the server will</font>

217
00:09:58,640 --> 00:10:03,050
have trusted<font color="#E5E5E5"> hardware and the client</font>

218
00:10:00,380 --> 00:10:05,360
<font color="#E5E5E5">doesn't necessarily have to</font><font color="#CCCCCC"> it turns out</font>

219
00:10:03,050 --> 00:10:08,479
that it's<font color="#CCCCCC"> very</font><font color="#E5E5E5"> hard to prove sort of an</font>

220
00:10:05,360 --> 00:10:11,870
ideal notion of security<font color="#CCCCCC"> in in</font><font color="#E5E5E5"> this</font>

221
00:10:08,480 --> 00:10:14,270
model and sort<font color="#CCCCCC"> of a maybe the most</font>

222
00:10:11,870 --> 00:10:16,760
intuitive way<font color="#CCCCCC"> to see</font><font color="#E5E5E5"> what some of the</font>

223
00:10:14,270 --> 00:10:21,230
<font color="#E5E5E5">issues can be is through this notion of</font>

224
00:10:16,760 --> 00:10:23,030
non deniability<font color="#CCCCCC"> and so again here if if</font>

225
00:10:21,230 --> 00:10:26,570
in this protocol<font color="#E5E5E5"> alice was the only</font>

226
00:10:23,030 --> 00:10:28,459
party<font color="#CCCCCC"> who has a secure processor at any</font>

227
00:10:26,570 --> 00:10:32,200
time actually<font color="#E5E5E5"> uses this processor to</font>

228
00:10:28,460 --> 00:10:35,570
compute an attestation<font color="#E5E5E5"> under this global</font>

229
00:10:32,200 --> 00:10:37,370
<font color="#E5E5E5">globally shared key then if the other</font>

230
00:10:35,570 --> 00:10:39,650
party<font color="#CCCCCC"> is malicious it could sort of just</font>

231
00:10:37,370 --> 00:10:42,020
use this attestation to<font color="#E5E5E5"> convince anyone</font>

232
00:10:39,650 --> 00:10:44,870
<font color="#E5E5E5">else that some honest party that</font>

233
00:10:42,020 --> 00:10:47,120
belonged<font color="#E5E5E5"> to the registry of this</font>

234
00:10:44,870 --> 00:10:49,520
<font color="#E5E5E5">hardware platform actually participated</font>

235
00:10:47,120 --> 00:10:51,380
in<font color="#E5E5E5"> the protocol and while this is</font>

236
00:10:49,520 --> 00:10:53,390
something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> first of all the ideal</font>

237
00:10:51,380 --> 00:10:58,189
notion of two party<font color="#E5E5E5"> computation doesn't</font>

238
00:10:53,390 --> 00:11:00,080
really allow for<font color="#E5E5E5"> and it's also somewhat</font>

239
00:10:58,190 --> 00:11:02,720
<font color="#CCCCCC">intuitive to see that this this</font><font color="#E5E5E5"> wouldn't</font>

240
00:11:00,080 --> 00:11:05,060
be an issue<font color="#E5E5E5"> if both parties had a secure</font>

241
00:11:02,720 --> 00:11:06,440
processor because<font color="#E5E5E5"> then</font><font color="#CCCCCC"> while Bob could</font>

242
00:11:05,060 --> 00:11:06,859
have just came<font color="#CCCCCC"> up with this attestation</font>

243
00:11:06,440 --> 00:11:09,590
<font color="#E5E5E5">him</font>

244
00:11:06,860 --> 00:11:12,680
self so this sort<font color="#E5E5E5"> of provides a non</font><font color="#CCCCCC"> deny</font>

245
00:11:09,590 --> 00:11:18,890
<font color="#CCCCCC">a</font><font color="#E5E5E5"> motion of plausible</font><font color="#CCCCCC"> deniability for</font>

246
00:11:12,680 --> 00:11:20,930
for Alice<font color="#CCCCCC"> so maybe one of the more</font>

247
00:11:18,890 --> 00:11:23,840
technically interesting results we look

248
00:11:20,930 --> 00:11:25,780
at is well what if sort of really<font color="#CCCCCC"> really</font>

249
00:11:23,840 --> 00:11:29,380
wanted to<font color="#CCCCCC"> do things with a single</font>

250
00:11:25,780 --> 00:11:31,640
<font color="#CCCCCC">secured processors or would seem sort of</font>

251
00:11:29,380 --> 00:11:34,730
more interesting<font color="#CCCCCC"> in practice if not</font>

252
00:11:31,640 --> 00:11:36,890
<font color="#E5E5E5">every single party had to have a</font>

253
00:11:34,730 --> 00:11:39,290
processor from<font color="#E5E5E5"> the same manufacturer</font><font color="#CCCCCC"> and</font>

254
00:11:36,890 --> 00:11:40,900
so because<font color="#CCCCCC"> of these impossibility</font>

255
00:11:39,290 --> 00:11:44,060
results we actually have to rely on

256
00:11:40,900 --> 00:11:45,380
extra set of<font color="#E5E5E5"> assumptions and here we we</font>

257
00:11:44,060 --> 00:11:47,300
go for an assumption that<font color="#E5E5E5"> has already</font>

258
00:11:45,380 --> 00:11:49,820
<font color="#E5E5E5">been</font><font color="#CCCCCC"> used in this space of sort</font><font color="#E5E5E5"> of</font>

259
00:11:47,300 --> 00:11:52,370
composable<font color="#CCCCCC"> NPC</font><font color="#E5E5E5"> which is this notion of</font>

260
00:11:49,820 --> 00:11:54,530
an<font color="#E5E5E5"> Augmented common</font><font color="#CCCCCC"> reference string I</font>

261
00:11:52,370 --> 00:11:57,770
won't give a precise definition but you

262
00:11:54,530 --> 00:11:59,750
can think<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this as essentially a</font><font color="#CCCCCC"> set</font>

263
00:11:57,770 --> 00:12:02,680
<font color="#CCCCCC">up</font><font color="#E5E5E5"> that for honest parties is</font>

264
00:11:59,750 --> 00:12:05,930
essentially the same<font color="#E5E5E5"> as a standard CRS</font>

265
00:12:02,680 --> 00:12:08,030
but it also allows malicious parties to

266
00:12:05,930 --> 00:12:09,739
sort<font color="#E5E5E5"> of query for a so-called identity</font>

267
00:12:08,030 --> 00:12:12,079
key which is essentially just<font color="#E5E5E5"> a</font>

268
00:12:09,740 --> 00:12:15,170
signature of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> party's identity that</font>

269
00:12:12,080 --> 00:12:17,960
<font color="#E5E5E5">is then publicly verifiable</font><font color="#CCCCCC"> and two of</font>

270
00:12:15,170 --> 00:12:20,060
the important note<font color="#CCCCCC"> here that</font><font color="#E5E5E5"> yeah the</font>

271
00:12:17,960 --> 00:12:23,750
<font color="#E5E5E5">the honest parties will sort of never</font>

272
00:12:20,060 --> 00:12:27,619
have to interact<font color="#E5E5E5"> with</font><font color="#CCCCCC"> this with the CRS</font>

273
00:12:23,750 --> 00:12:29,420
during the the protocol<font color="#CCCCCC"> and although we</font>

274
00:12:27,620 --> 00:12:31,490
we<font color="#E5E5E5"> already know from prior work that</font>

275
00:12:29,420 --> 00:12:36,349
actually<font color="#E5E5E5"> just from this augmented CRS</font>

276
00:12:31,490 --> 00:12:38,450
you can get<font color="#E5E5E5"> secure</font><font color="#CCCCCC"> NPC</font><font color="#E5E5E5"> the protocols you</font>

277
00:12:36,350 --> 00:12:40,460
can get if<font color="#E5E5E5"> you include trusted</font><font color="#CCCCCC"> Hardware</font>

278
00:12:38,450 --> 00:12:42,650
are somewhat interesting because they

279
00:12:40,460 --> 00:12:45,290
sort<font color="#E5E5E5"> of have</font><font color="#CCCCCC"> a communication complexity</font>

280
00:12:42,650 --> 00:12:46,760
<font color="#CCCCCC">between parties that doesn't depend at</font>

281
00:12:45,290 --> 00:12:48,230
all on the complexity<font color="#E5E5E5"> of the program</font>

282
00:12:46,760 --> 00:12:50,330
<font color="#E5E5E5">that</font><font color="#CCCCCC"> you're trying to</font><font color="#E5E5E5"> run because</font>

283
00:12:48,230 --> 00:12:53,380
essentially the<font color="#CCCCCC"> program will</font><font color="#E5E5E5"> just run</font>

284
00:12:50,330 --> 00:12:56,780
inside<font color="#E5E5E5"> the the secure hardware and so</font>

285
00:12:53,380 --> 00:13:00,350
this is a something that that might<font color="#E5E5E5"> be</font>

286
00:12:56,780 --> 00:13:01,670
interesting to<font color="#E5E5E5"> achieve from a technical</font>

287
00:13:00,350 --> 00:13:03,460
point of view<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> is something that</font>

288
00:13:01,670 --> 00:13:05,599
<font color="#E5E5E5">I'll I'll go into a bit more detail</font>

289
00:13:03,460 --> 00:13:09,200
<font color="#CCCCCC">what's actually</font><font color="#E5E5E5"> quite interesting is</font>

290
00:13:05,600 --> 00:13:11,180
that<font color="#E5E5E5"> to to get sort of for the</font>

291
00:13:09,200 --> 00:13:13,450
simulation proof to go through<font color="#E5E5E5"> for for</font>

292
00:13:11,180 --> 00:13:16,670
<font color="#E5E5E5">us to actually be able to prove security</font>

293
00:13:13,450 --> 00:13:18,980
<font color="#CCCCCC">we</font><font color="#E5E5E5"> need to embed some backdoors into the</font>

294
00:13:16,670 --> 00:13:21,229
program that's run<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> Indian clave</font>

295
00:13:18,980 --> 00:13:23,240
<font color="#CCCCCC">which is somewhat surprising was some</font>

296
00:13:21,230 --> 00:13:25,130
thing<font color="#E5E5E5"> the sort of notion</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> back adoring</font>

297
00:13:23,240 --> 00:13:26,900
programs is something that's come up in

298
00:13:25,130 --> 00:13:29,420
work on say indistinguishability

299
00:13:26,900 --> 00:13:32,480
obfuscation but it wasn't necessarily

300
00:13:29,420 --> 00:13:34,729
clear to us<font color="#CCCCCC"> that this would</font><font color="#E5E5E5"> pop up in</font>

301
00:13:32,480 --> 00:13:37,490
this setting as well<font color="#CCCCCC"> and actually</font><font color="#E5E5E5"> most</font>

302
00:13:34,730 --> 00:13:43,030
or not maybe all<font color="#CCCCCC"> of the protocols that</font>

303
00:13:37,490 --> 00:13:47,000
<font color="#E5E5E5">we show in</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> paper</font><font color="#CCCCCC"> need some notion of</font>

304
00:13:43,030 --> 00:13:49,130
<font color="#CCCCCC">backdoor in the</font><font color="#E5E5E5"> programs</font><font color="#CCCCCC"> so let me show</font>

305
00:13:47,000 --> 00:13:53,420
a concrete example here so this is for

306
00:13:49,130 --> 00:13:54,890
this<font color="#E5E5E5"> MPC</font><font color="#CCCCCC"> protocol where we'll assume</font>

307
00:13:53,420 --> 00:13:57,349
that<font color="#E5E5E5"> there's sort</font><font color="#CCCCCC"> of one distinguished</font>

308
00:13:54,890 --> 00:13:59,990
party that we call the server that will

309
00:13:57,350 --> 00:14:02,630
host this<font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> single</font><font color="#CCCCCC"> secure</font>

310
00:13:59,990 --> 00:14:08,780
processor and there's a bunch<font color="#E5E5E5"> of remote</font>

311
00:14:02,630 --> 00:14:11,480
parties that want<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> MPC</font><font color="#E5E5E5"> and we have</font>

312
00:14:08,780 --> 00:14:14,900
this augmented common reference string

313
00:14:11,480 --> 00:14:17,150
as well<font color="#CCCCCC"> and the way the protocol works</font>

314
00:14:14,900 --> 00:14:19,610
is that the the program that's running

315
00:14:17,150 --> 00:14:23,360
on in the<font color="#CCCCCC"> end clave</font><font color="#E5E5E5"> will start by sort</font>

316
00:14:19,610 --> 00:14:26,360
of generating public key pairs for for

317
00:14:23,360 --> 00:14:28,760
each<font color="#CCCCCC"> parties and send these out</font><font color="#E5E5E5"> together</font>

318
00:14:26,360 --> 00:14:30,080
<font color="#E5E5E5">of an attestation</font><font color="#CCCCCC"> here in the interest</font>

319
00:14:28,760 --> 00:14:33,650
of<font color="#E5E5E5"> time</font><font color="#CCCCCC"> or sort</font><font color="#E5E5E5"> of gloss over some</font>

320
00:14:30,080 --> 00:14:36,320
details<font color="#E5E5E5"> especially</font><font color="#CCCCCC"> in the actual</font>

321
00:14:33,650 --> 00:14:38,810
protocol<font color="#E5E5E5"> the server has to replace this</font>

322
00:14:36,320 --> 00:14:41,390
attestation with a witness in this

323
00:14:38,810 --> 00:14:45,890
indistinguishable<font color="#E5E5E5"> proof to sort of get</font>

324
00:14:41,390 --> 00:14:47,990
rid<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> non deniability issue I will</font>

325
00:14:45,890 --> 00:14:49,850
<font color="#CCCCCC">I'll let you look at the the paper if</font>

326
00:14:47,990 --> 00:14:52,820
you're interested in<font color="#CCCCCC"> details about this</font>

327
00:14:49,850 --> 00:14:55,430
and sort<font color="#E5E5E5"> of after this the construction</font>

328
00:14:52,820 --> 00:14:59,660
is pretty standard<font color="#E5E5E5"> so the parties can do</font>

329
00:14:55,430 --> 00:15:02,569
<font color="#E5E5E5">key exchange with the the</font><font color="#CCCCCC"> N clave send</font>

330
00:14:59,660 --> 00:15:05,780
their inputs encrypted under<font color="#E5E5E5"> shared</font>

331
00:15:02,570 --> 00:15:08,090
<font color="#E5E5E5">symmetric key the</font><font color="#CCCCCC"> in clave</font><font color="#E5E5E5"> collects all</font>

332
00:15:05,780 --> 00:15:13,370
the inputs computes the function<font color="#E5E5E5"> and</font>

333
00:15:08,090 --> 00:15:15,020
sends out encrypted outputs so it's<font color="#CCCCCC"> not</font>

334
00:15:13,370 --> 00:15:17,690
look at sort of the the<font color="#E5E5E5"> interesting</font>

335
00:15:15,020 --> 00:15:19,280
thing<font color="#E5E5E5"> of how how we would prove security</font>

336
00:15:17,690 --> 00:15:21,460
of this how we would do the simulation

337
00:15:19,280 --> 00:15:24,680
so here we<font color="#CCCCCC"> consider that the server is</font>

338
00:15:21,460 --> 00:15:28,640
<font color="#E5E5E5">malicious so in particular the simulator</font>

339
00:15:24,680 --> 00:15:31,339
will be able<font color="#E5E5E5"> to also query the trusted</font>

340
00:15:28,640 --> 00:15:33,439
<font color="#CCCCCC">hardware</font><font color="#E5E5E5"> and here we'll have to sort of</font>

341
00:15:31,340 --> 00:15:34,790
embed trap doors<font color="#E5E5E5"> that will allow the</font>

342
00:15:33,440 --> 00:15:38,450
simulator<font color="#E5E5E5"> to</font>

343
00:15:34,790 --> 00:15:40,699
extract<font color="#CCCCCC"> the inputs and equivocate the</font>

344
00:15:38,450 --> 00:15:44,450
outputs for from malicious<font color="#E5E5E5"> remote</font>

345
00:15:40,700 --> 00:15:46,220
parties<font color="#CCCCCC"> and the way this works is that</font>

346
00:15:44,450 --> 00:15:50,240
when the when if the<font color="#E5E5E5"> simulator wants to</font>

347
00:15:46,220 --> 00:15:52,580
know the input<font color="#CCCCCC"> that</font><font color="#E5E5E5"> was given by some</font>

348
00:15:50,240 --> 00:15:55,550
malicious party it will first call a

349
00:15:52,580 --> 00:15:58,220
sort of<font color="#E5E5E5"> one one function in the in the</font>

350
00:15:55,550 --> 00:16:01,490
<font color="#E5E5E5">end clave that allows it if if it knows</font>

351
00:15:58,220 --> 00:16:03,530
the identity<font color="#CCCCCC"> key that it got from this</font>

352
00:16:01,490 --> 00:16:05,660
<font color="#E5E5E5">augmented common reference string for a</font>

353
00:16:03,530 --> 00:16:06,980
particular malicious party<font color="#E5E5E5"> well then the</font>

354
00:16:05,660 --> 00:16:11,240
anklet will just return the

355
00:16:06,980 --> 00:16:12,830
corresponding<font color="#E5E5E5"> secret key and so because</font>

356
00:16:11,240 --> 00:16:14,600
honest parties will sort<font color="#E5E5E5"> of never</font>

357
00:16:12,830 --> 00:16:16,340
interact with the common reference

358
00:16:14,600 --> 00:16:19,040
string then this sort<font color="#E5E5E5"> of allows the</font>

359
00:16:16,340 --> 00:16:20,660
simulator<font color="#E5E5E5"> to</font><font color="#CCCCCC"> extract inputs from</font>

360
00:16:19,040 --> 00:16:24,949
malicious party but it doesn't affect

361
00:16:20,660 --> 00:16:27,350
<font color="#CCCCCC">the security</font><font color="#E5E5E5"> for honest ones and in a</font>

362
00:16:24,950 --> 00:16:29,390
<font color="#E5E5E5">similar way once the simulator actually</font>

363
00:16:27,350 --> 00:16:33,350
learns the output it sort of has<font color="#CCCCCC"> to</font>

364
00:16:29,390 --> 00:16:35,689
program the the in clave to<font color="#E5E5E5"> produce this</font>

365
00:16:33,350 --> 00:16:38,260
output for malicious parties and<font color="#E5E5E5"> this it</font>

366
00:16:35,690 --> 00:16:41,780
can again do by sort of<font color="#E5E5E5"> calling another</font>

367
00:16:38,260 --> 00:16:45,260
<font color="#CCCCCC">backdoor function inside the the</font>

368
00:16:41,780 --> 00:16:47,810
enclaved program that<font color="#E5E5E5"> is sort of yeah</font>

369
00:16:45,260 --> 00:16:54,350
never going to be used for<font color="#E5E5E5"> in a in an</font>

370
00:16:47,810 --> 00:16:57,229
honest run of the protocol<font color="#E5E5E5"> okay so let</font>

371
00:16:54,350 --> 00:16:59,780
<font color="#CCCCCC">me now move on to another</font><font color="#E5E5E5"> of our of our</font>

372
00:16:57,230 --> 00:17:03,170
<font color="#E5E5E5">positive results which has to do with</font>

373
00:16:59,780 --> 00:17:05,270
<font color="#E5E5E5">fairness in two-party protocols and</font>

374
00:17:03,170 --> 00:17:07,399
<font color="#E5E5E5">hereby fairness essentially mean the</font>

375
00:17:05,270 --> 00:17:09,079
standard notion that we want to make

376
00:17:07,400 --> 00:17:11,570
sure<font color="#CCCCCC"> that if one</font><font color="#E5E5E5"> party learns</font>

377
00:17:09,079 --> 00:17:14,300
the result of the computation and the

378
00:17:11,569 --> 00:17:16,129
other part you<font color="#CCCCCC"> should be</font><font color="#E5E5E5"> also should</font>

379
00:17:14,300 --> 00:17:19,069
also be able<font color="#E5E5E5"> to obtain the result</font><font color="#CCCCCC"> after</font>

380
00:17:16,130 --> 00:17:23,390
maybe a some bounded<font color="#E5E5E5"> amount of time</font><font color="#CCCCCC"> even</font>

381
00:17:19,069 --> 00:17:24,948
<font color="#E5E5E5">if the first party aborted</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> actually</font>

382
00:17:23,390 --> 00:17:26,780
know that<font color="#E5E5E5"> sort of for for general</font>

383
00:17:24,949 --> 00:17:28,130
functionalities this is<font color="#E5E5E5"> impossible in</font>

384
00:17:26,780 --> 00:17:31,610
the in the<font color="#E5E5E5"> plane model this is a</font>

385
00:17:28,130 --> 00:17:33,110
celebrated<font color="#CCCCCC"> result by a cleave and sort</font>

386
00:17:31,610 --> 00:17:35,659
of natural question<font color="#E5E5E5"> is well could</font>

387
00:17:33,110 --> 00:17:39,620
trusted<font color="#CCCCCC"> Hardware help</font><font color="#E5E5E5"> achieve these</font>

388
00:17:35,660 --> 00:17:42,050
notions<font color="#CCCCCC"> of fairness as well so for</font><font color="#E5E5E5"> this</font>

389
00:17:39,620 --> 00:17:44,840
we<font color="#E5E5E5"> consider a sort</font><font color="#CCCCCC"> of an enhanced model</font>

390
00:17:42,050 --> 00:17:47,360
<font color="#E5E5E5">that we call a clock aware secure</font>

391
00:17:44,840 --> 00:17:48,360
processor<font color="#E5E5E5"> essentially a piece of trusted</font>

392
00:17:47,360 --> 00:17:51,479
hardware that has

393
00:17:48,360 --> 00:17:55,709
says to a source<font color="#E5E5E5"> of relative trusted</font>

394
00:17:51,480 --> 00:17:58,350
<font color="#E5E5E5">time</font><font color="#CCCCCC"> and here we can again show that</font>

395
00:17:55,710 --> 00:18:00,710
<font color="#E5E5E5">assuming</font><font color="#CCCCCC"> that both parties have such</font>

396
00:17:58,350 --> 00:18:03,000
<font color="#E5E5E5">secure processors we can actually get</font>

397
00:18:00,710 --> 00:18:05,520
fairness for general<font color="#E5E5E5"> two-party</font>

398
00:18:03,000 --> 00:18:07,679
computations again if one of the two

399
00:18:05,520 --> 00:18:10,830
parties<font color="#E5E5E5"> actually doesn't have a secure</font>

400
00:18:07,679 --> 00:18:13,140
processor things sort of break down<font color="#CCCCCC"> but</font>

401
00:18:10,830 --> 00:18:15,659
<font color="#E5E5E5">we can show that</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> specific</font>

402
00:18:13,140 --> 00:18:18,990
functionalities such as a coin tossing

403
00:18:15,660 --> 00:18:21,540
for instance<font color="#E5E5E5"> we can't get fairness even</font>

404
00:18:18,990 --> 00:18:23,880
in<font color="#E5E5E5"> this setting where a single party has</font>

405
00:18:21,540 --> 00:18:27,530
a<font color="#CCCCCC"> secured processor and we also have</font>

406
00:18:23,880 --> 00:18:30,570
this<font color="#E5E5E5"> augmented common reference</font><font color="#CCCCCC"> string</font>

407
00:18:27,530 --> 00:18:32,790
<font color="#CCCCCC">so this this protocol for fair</font><font color="#E5E5E5"> 2pc is</font>

408
00:18:30,570 --> 00:18:36,750
actually relatively<font color="#E5E5E5"> simple so let me go</font>

409
00:18:32,790 --> 00:18:38,820
<font color="#E5E5E5">over it quickly</font><font color="#CCCCCC"> sort of a pretty</font>

410
00:18:36,750 --> 00:18:41,280
standard<font color="#CCCCCC"> construction where first the</font>

411
00:18:38,820 --> 00:18:43,799
two parties<font color="#E5E5E5"> will</font><font color="#CCCCCC"> have their</font><font color="#E5E5E5"> secure</font>

412
00:18:41,280 --> 00:18:46,080
processors establish a<font color="#E5E5E5"> secure channel</font>

413
00:18:43,799 --> 00:18:47,850
<font color="#E5E5E5">over which they can actually</font><font color="#CCCCCC"> exchange</font>

414
00:18:46,080 --> 00:18:50,159
their inputs and then they can compute

415
00:18:47,850 --> 00:18:52,740
the<font color="#E5E5E5"> output so you sort of perform the</font>

416
00:18:50,160 --> 00:18:54,990
actual<font color="#CCCCCC"> two party computation</font><font color="#E5E5E5"> and at this</font>

417
00:18:52,740 --> 00:18:58,410
<font color="#E5E5E5">point the two enclaves will actually</font>

418
00:18:54,990 --> 00:19:00,480
just decide<font color="#E5E5E5"> to withhold the outputs for</font>

419
00:18:58,410 --> 00:19:02,850
a sort of predefined exponential amount

420
00:19:00,480 --> 00:19:06,919
of time and then they will sort of<font color="#E5E5E5"> start</font>

421
00:19:02,850 --> 00:19:09,629
this tit-for-tat<font color="#E5E5E5"> communication where at</font>

422
00:19:06,919 --> 00:19:12,150
in sort<font color="#E5E5E5"> of iterative fashion they will</font>

423
00:19:09,630 --> 00:19:13,919
agree<font color="#CCCCCC"> to have the amount</font><font color="#E5E5E5"> of time</font><font color="#CCCCCC"> that</font>

424
00:19:12,150 --> 00:19:16,830
they have to<font color="#CCCCCC"> wait until they will</font>

425
00:19:13,919 --> 00:19:20,190
<font color="#CCCCCC">actually release the outputs to the</font><font color="#E5E5E5"> to</font>

426
00:19:16,830 --> 00:19:23,340
their hosts yeah this wouldn't<font color="#CCCCCC"> be</font>

427
00:19:20,190 --> 00:19:27,179
<font color="#CCCCCC">possible if the processors weren't clock</font>

428
00:19:23,340 --> 00:19:29,790
aware and was easy to see here<font color="#CCCCCC"> that if</font>

429
00:19:27,179 --> 00:19:33,570
one party sort of<font color="#E5E5E5"> gets its output at</font>

430
00:19:29,790 --> 00:19:36,240
some time T then the other party sort of

431
00:19:33,570 --> 00:19:38,580
needs<font color="#E5E5E5"> to wait at least at most twice</font>

432
00:19:36,240 --> 00:19:40,169
that amount of time to<font color="#E5E5E5"> also get its</font>

433
00:19:38,580 --> 00:19:42,720
output so<font color="#CCCCCC"> we get a nice notion of</font>

434
00:19:40,169 --> 00:19:45,540
fairness and compared to<font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of prior</font>

435
00:19:42,720 --> 00:19:46,830
approaches here<font color="#E5E5E5"> what's nice in the</font>

436
00:19:45,540 --> 00:19:48,570
setting is that<font color="#E5E5E5"> the enclaves don't</font>

437
00:19:46,830 --> 00:19:51,389
actually need<font color="#E5E5E5"> to do any sort of wasteful</font>

438
00:19:48,570 --> 00:19:53,610
computation<font color="#CCCCCC"> such</font><font color="#E5E5E5"> as if you had say time</font>

439
00:19:51,390 --> 00:19:55,320
lock puzzles because sort<font color="#E5E5E5"> of in an</font>

440
00:19:53,610 --> 00:19:57,659
honest run they just do a number<font color="#CCCCCC"> of</font>

441
00:19:55,320 --> 00:20:00,149
back-and-forth<font color="#E5E5E5"> communications and if one</font>

442
00:19:57,660 --> 00:20:02,220
<font color="#E5E5E5">of the party aborts the other parties</font>

443
00:20:00,150 --> 00:20:06,480
<font color="#E5E5E5">and</font><font color="#CCCCCC"> clav just sits idle for</font>

444
00:20:02,220 --> 00:20:07,860
<font color="#CCCCCC">a certain amount of time so let me</font>

445
00:20:06,480 --> 00:20:09,809
conclude by<font color="#CCCCCC"> just sort</font><font color="#E5E5E5"> of looking a bit</font>

446
00:20:07,860 --> 00:20:13,199
that the future<font color="#E5E5E5"> directions given by</font><font color="#CCCCCC"> our</font>

447
00:20:09,809 --> 00:20:14,879
work<font color="#CCCCCC"> so in</font><font color="#E5E5E5"> this work we we've looked at</font>

448
00:20:13,200 --> 00:20:16,020
sort<font color="#CCCCCC"> of formal abstractions of</font><font color="#E5E5E5"> transit</font>

449
00:20:14,880 --> 00:20:19,710
<font color="#CCCCCC">hardware</font>

450
00:20:16,020 --> 00:20:21,389
we've shown that<font color="#CCCCCC"> a</font><font color="#E5E5E5"> tested execution is a</font>

451
00:20:19,710 --> 00:20:23,400
very powerful primitive that<font color="#E5E5E5"> allows</font><font color="#CCCCCC"> us</font>

452
00:20:21,390 --> 00:20:25,919
<font color="#E5E5E5">to do a lot of fun and interesting</font>

453
00:20:23,400 --> 00:20:28,260
<font color="#CCCCCC">things</font><font color="#E5E5E5"> but there's also some subtle</font>

454
00:20:25,919 --> 00:20:31,799
issues that can arise<font color="#E5E5E5"> because</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this</font>

455
00:20:28,260 --> 00:20:35,039
shared because keys are essentially

456
00:20:31,799 --> 00:20:36,570
shared across all all<font color="#E5E5E5"> protocols and as I</font>

457
00:20:35,039 --> 00:20:39,390
<font color="#CCCCCC">alluded</font><font color="#E5E5E5"> in the in the</font><font color="#CCCCCC"> beginning of this</font>

458
00:20:36,570 --> 00:20:41,460
talk what sort of<font color="#E5E5E5"> the next logical step</font>

459
00:20:39,390 --> 00:20:45,000
<font color="#E5E5E5">in this direction is to actually come up</font>

460
00:20:41,460 --> 00:20:47,280
<font color="#E5E5E5">with</font><font color="#CCCCCC"> a secure</font><font color="#E5E5E5"> process or design</font><font color="#CCCCCC"> that</font>

461
00:20:45,000 --> 00:20:50,669
<font color="#CCCCCC">could</font><font color="#E5E5E5"> be formally verified to actually</font>

462
00:20:47,280 --> 00:20:54,389
implement a precise formal abstraction

463
00:20:50,669 --> 00:20:57,750
<font color="#E5E5E5">which would then sort</font><font color="#CCCCCC"> of allow us to get</font>

464
00:20:54,390 --> 00:21:00,919
provably secure<font color="#E5E5E5"> implementations of</font>

465
00:20:57,750 --> 00:21:04,010
systems on top<font color="#E5E5E5"> of of trusted</font><font color="#CCCCCC"> Hardware</font>

466
00:21:00,919 --> 00:21:04,010
<font color="#E5E5E5">thank you</font>

467
00:21:08,700 --> 00:21:26,830
thank you<font color="#CCCCCC"> I still</font><font color="#E5E5E5"> have time for</font>

468
00:21:11,650 --> 00:21:29,740
<font color="#CCCCCC">questions so you said your model allows</font>

469
00:21:26,830 --> 00:21:32,500
for getting stateful office keishon

470
00:21:29,740 --> 00:21:34,660
right<font color="#CCCCCC"> and my understanding</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that in</font>

471
00:21:32,500 --> 00:21:37,810
case of Intel SGX you don't actually get

472
00:21:34,660 --> 00:21:41,290
state stateful office kitchen<font color="#E5E5E5"> because it</font>

473
00:21:37,810 --> 00:21:43,540
leaks some sort of access patterns<font color="#E5E5E5"> yes</font>

474
00:21:41,290 --> 00:21:45,690
I'm<font color="#E5E5E5"> just wondering where that gap is so</font>

475
00:21:43,540 --> 00:21:47,860
yes so this<font color="#E5E5E5"> is what I mentioned in the</font>

476
00:21:45,690 --> 00:21:51,130
<font color="#E5E5E5">earlier part in the talk that actually</font>

477
00:21:47,860 --> 00:21:54,399
<font color="#E5E5E5">today</font><font color="#CCCCCC"> we can't we can't show for any</font>

478
00:21:51,130 --> 00:21:57,220
particular processor on<font color="#CCCCCC"> the market</font><font color="#E5E5E5"> that</font>

479
00:21:54,400 --> 00:21:59,680
it<font color="#CCCCCC"> actually realizes the sort of ideal</font>

480
00:21:57,220 --> 00:22:02,350
abstraction that<font color="#E5E5E5"> we want in the case of</font>

481
00:21:59,680 --> 00:22:04,720
<font color="#CCCCCC">SGX this is for two reasons one because</font>

482
00:22:02,350 --> 00:22:06,580
there are these side channels<font color="#CCCCCC"> that sort</font>

483
00:22:04,720 --> 00:22:08,800
<font color="#CCCCCC">of show that</font><font color="#E5E5E5"> things aren't exactly as</font>

484
00:22:06,580 --> 00:22:11,199
secure that as we want<font color="#E5E5E5"> and on the other</font>

485
00:22:08,800 --> 00:22:12,460
<font color="#E5E5E5">hand that even if we could get rid of</font>

486
00:22:11,200 --> 00:22:14,410
these side channels<font color="#E5E5E5"> there's actually no</font>

487
00:22:12,460 --> 00:22:16,540
way of sort<font color="#E5E5E5"> of formally verifying that</font>

488
00:22:14,410 --> 00:22:20,280
the processor<font color="#E5E5E5"> what what the processor</font>

489
00:22:16,540 --> 00:22:23,020
actually<font color="#E5E5E5"> does and so</font><font color="#CCCCCC"> they're there</font>

490
00:22:20,280 --> 00:22:24,370
that's where the gap currently is is

491
00:22:23,020 --> 00:22:25,570
that sort<font color="#CCCCCC"> of between</font><font color="#E5E5E5"> the actual</font>

492
00:22:24,370 --> 00:22:28,030
implementation and the formal

493
00:22:25,570 --> 00:22:36,760
abstraction<font color="#CCCCCC"> they're sort of there's a</font>

494
00:22:28,030 --> 00:22:39,310
gap yeah so I understand<font color="#E5E5E5"> that in your</font>

495
00:22:36,760 --> 00:22:43,540
formalism to<font color="#CCCCCC"> run an enclave you need a</font>

496
00:22:39,310 --> 00:22:45,520
special<font color="#E5E5E5"> instruction so now is</font><font color="#CCCCCC"> your a</font>

497
00:22:43,540 --> 00:22:47,470
notion<font color="#E5E5E5"> of program allows to make these</font>

498
00:22:45,520 --> 00:22:51,070
special<font color="#CCCCCC"> instructions I mean can you</font><font color="#E5E5E5"> run</font>

499
00:22:47,470 --> 00:22:56,170
an<font color="#CCCCCC"> enclave</font><font color="#E5E5E5"> inside an enclave what do you</font>

500
00:22:51,070 --> 00:22:59,980
mean so I I mean that to run a program

501
00:22:56,170 --> 00:23:03,070
<font color="#CCCCCC">inside an</font><font color="#E5E5E5"> enclave which will ask to run</font>

502
00:22:59,980 --> 00:23:06,160
<font color="#E5E5E5">a program inside another Enclave so I</font>

503
00:23:03,070 --> 00:23:10,210
<font color="#E5E5E5">don't think we need this in in any of</font>

504
00:23:06,160 --> 00:23:12,580
<font color="#E5E5E5">our in any of our constructions it's</font>

505
00:23:10,210 --> 00:23:15,220
possible that<font color="#E5E5E5"> our formalism would allow</font>

506
00:23:12,580 --> 00:23:18,399
you<font color="#CCCCCC"> to do it but none of</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> protocols</font>

507
00:23:15,220 --> 00:23:21,150
sort of require the sort of<font color="#E5E5E5"> a circle or</font>

508
00:23:18,400 --> 00:23:21,150
no

509
00:23:21,830 --> 00:23:26,490
sort<font color="#E5E5E5"> of programs</font><font color="#CCCCCC"> to call other programs</font>

510
00:23:24,450 --> 00:23:28,220
so the for instance<font color="#CCCCCC"> the the trapdoors</font>

511
00:23:26,490 --> 00:23:31,679
<font color="#E5E5E5">that we have in some</font><font color="#CCCCCC"> of our</font>

512
00:23:28,220 --> 00:23:33,740
constructions are really part of the

513
00:23:31,679 --> 00:23:47,010
<font color="#E5E5E5">original program that is loaded inside</font>

514
00:23:33,740 --> 00:23:48,690
<font color="#E5E5E5">inside the enclaves</font><font color="#CCCCCC"> see your</font>

515
00:23:47,010 --> 00:23:50,640
impossibility result for secure

516
00:23:48,690 --> 00:23:53,010
computation<font color="#E5E5E5"> with</font><font color="#CCCCCC"> a single trusted</font>

517
00:23:50,640 --> 00:23:54,659
<font color="#E5E5E5">Hardware relied on the</font><font color="#CCCCCC"> fact that you</font>

518
00:23:53,010 --> 00:23:56,100
<font color="#E5E5E5">don't get deniability right so you can</font>

519
00:23:54,659 --> 00:23:58,679
imagine defining a notion of<font color="#E5E5E5"> an</font>

520
00:23:56,100 --> 00:23:59,730
undeniable secure computation<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then I</font>

521
00:23:58,679 --> 00:24:02,070
wonder whether you<font color="#E5E5E5"> looked at that and</font>

522
00:23:59,730 --> 00:24:03,750
<font color="#E5E5E5">whether that can be realized so we we</font>

523
00:24:02,070 --> 00:24:05,250
didn't look at<font color="#E5E5E5"> this specifically this is</font>

524
00:24:03,750 --> 00:24:07,590
<font color="#E5E5E5">sort</font><font color="#CCCCCC"> of an approach that's</font><font color="#E5E5E5"> been taken in</font>

525
00:24:05,250 --> 00:24:09,539
quite a number<font color="#CCCCCC"> of prior works of sort of</font>

526
00:24:07,590 --> 00:24:10,949
<font color="#E5E5E5">yeah weakening the actual ideal</font>

527
00:24:09,539 --> 00:24:14,879
functionality that<font color="#E5E5E5"> you want to realize</font>

528
00:24:10,950 --> 00:24:16,830
<font color="#CCCCCC">and</font><font color="#E5E5E5"> I don't see a reason why this this</font>

529
00:24:14,880 --> 00:24:18,289
<font color="#E5E5E5">wouldn't work in our case but we we</font>

530
00:24:16,830 --> 00:24:30,029
didn't look at<font color="#E5E5E5"> this</font><font color="#CCCCCC"> specific cleaning</font>

531
00:24:18,289 --> 00:24:31,620
<font color="#E5E5E5">thanks any more questions so just want</font>

532
00:24:30,029 --> 00:24:34,110
to make sure<font color="#E5E5E5"> in</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> stance so in this</font>

533
00:24:31,620 --> 00:24:35,789
in this<font color="#CCCCCC"> settings a trusted Hardware I</font>

534
00:24:34,110 --> 00:24:37,049
mean it's completely trusted it's not

535
00:24:35,789 --> 00:24:39,029
like a small<font color="#E5E5E5"> thing it can run like</font>

536
00:24:37,049 --> 00:24:41,010
everything it's like as<font color="#E5E5E5"> memories there</font>

537
00:24:39,029 --> 00:24:43,200
are no side channels<font color="#CCCCCC"> I just want to make</font>

538
00:24:41,010 --> 00:24:45,600
<font color="#E5E5E5">sure but usually the kind of problems</font>

539
00:24:43,200 --> 00:24:47,549
that<font color="#E5E5E5"> people have</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> like you you know</font>

540
00:24:45,600 --> 00:24:49,770
several people<font color="#E5E5E5"> around the sing and sing</font>

541
00:24:47,549 --> 00:24:51,149
share resources<font color="#CCCCCC"> like cache and so</font><font color="#E5E5E5"> on and</font>

542
00:24:49,770 --> 00:24:52,980
you know there<font color="#E5E5E5"> are all those kind of</font>

543
00:24:51,149 --> 00:24:53,639
<font color="#CCCCCC">sessions so here you just</font><font color="#E5E5E5"> assume there</font>

544
00:24:52,980 --> 00:24:55,440
is a process

545
00:24:53,640 --> 00:24:57,690
if you proof you see<font color="#CCCCCC"> security if it's</font>

546
00:24:55,440 --> 00:24:59,730
run several<font color="#E5E5E5"> times I mean essentially</font>

547
00:24:57,690 --> 00:25:01,529
<font color="#CCCCCC">nothing is leaked it's just a completely</font>

548
00:24:59,730 --> 00:25:03,090
<font color="#E5E5E5">trust it and</font><font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> sign everything I</font>

549
00:25:01,529 --> 00:25:05,220
<font color="#E5E5E5">just kind of want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> make sure</font><font color="#CCCCCC"> that I</font>

550
00:25:03,090 --> 00:25:07,529
understand<font color="#E5E5E5"> the model is it correct right</font>

551
00:25:05,220 --> 00:25:11,250
so you you<font color="#E5E5E5"> essentially would leak the</font>

552
00:25:07,529 --> 00:25:14,880
sort of<font color="#E5E5E5"> size of inputs and outputs and</font>

553
00:25:11,250 --> 00:25:16,590
<font color="#E5E5E5">the size of the function but it is a</font>

554
00:25:14,880 --> 00:25:22,320
sort<font color="#CCCCCC"> of strong</font><font color="#E5E5E5"> model in that yeah we we</font>

555
00:25:16,590 --> 00:25:25,168
assume<font color="#E5E5E5"> no no no other side channels we</font>

556
00:25:22,320 --> 00:25:28,830
actually consider<font color="#E5E5E5"> a much much</font><font color="#CCCCCC"> weaker</font>

557
00:25:25,169 --> 00:25:31,470
model that<font color="#E5E5E5"> we also proposed in in a</font>

558
00:25:28,830 --> 00:25:32,990
prior work<font color="#E5E5E5"> where we</font><font color="#CCCCCC"> actually assume</font><font color="#E5E5E5"> that</font>

559
00:25:31,470 --> 00:25:35,090
everything leaks

560
00:25:32,990 --> 00:25:39,020
so nothing<font color="#CCCCCC"> that is executed inside the</font>

561
00:25:35,090 --> 00:25:40,970
<font color="#E5E5E5">Enclave will actually be remain private</font>

562
00:25:39,020 --> 00:25:42,679
except for the at the station keys and

563
00:25:40,970 --> 00:25:44,480
this is sort of interesting<font color="#CCCCCC"> setting</font>

564
00:25:42,679 --> 00:25:48,350
because<font color="#E5E5E5"> it's in one sense you could</font>

565
00:25:44,480 --> 00:25:50,299
<font color="#E5E5E5">argue</font><font color="#CCCCCC"> that it's much</font><font color="#E5E5E5"> more relevant to</font>

566
00:25:48,350 --> 00:25:51,559
<font color="#CCCCCC">what we actually have in practice</font><font color="#E5E5E5"> and</font>

567
00:25:50,299 --> 00:25:53,809
<font color="#E5E5E5">you can still do some pretty interesting</font>

568
00:25:51,559 --> 00:25:55,850
<font color="#E5E5E5">things like zero knowledge proof sand</font>

569
00:25:53,809 --> 00:25:59,240
<font color="#E5E5E5">can you see secure</font><font color="#CCCCCC"> commitments in this</font>

570
00:25:55,850 --> 00:26:03,918
much weaker model<font color="#E5E5E5"> way did it appear is</font>

571
00:25:59,240 --> 00:26:06,710
it<font color="#E5E5E5"> so the prior work appeared at</font><font color="#CCCCCC"> your</font>

572
00:26:03,919 --> 00:26:08,659
<font color="#CCCCCC">SNP earlier this week and also</font><font color="#E5E5E5"> in this</font>

573
00:26:06,710 --> 00:26:12,190
paper we we sort<font color="#E5E5E5"> of formalized this</font>

574
00:26:08,659 --> 00:26:12,190
model more precisely

