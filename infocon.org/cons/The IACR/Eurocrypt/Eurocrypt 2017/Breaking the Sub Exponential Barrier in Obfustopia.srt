1
00:00:00,000 --> 00:00:04,710
yeah yeah thanks<font color="#CCCCCC"> Nev for the</font>

2
00:00:02,939 --> 00:00:06,689
introduction I'm<font color="#E5E5E5"> going to talk</font><font color="#CCCCCC"> about</font>

3
00:00:04,710 --> 00:00:09,150
breaking<font color="#E5E5E5"> the subjects financial barrier</font>

4
00:00:06,690 --> 00:00:11,429
<font color="#E5E5E5">in a</font><font color="#CCCCCC"> first Opia</font><font color="#E5E5E5"> and this is joint work</font>

5
00:00:09,150 --> 00:00:15,780
with<font color="#CCCCCC"> san jamar ohm</font><font color="#E5E5E5"> camp and a and mark</font>

6
00:00:11,429 --> 00:00:18,029
<font color="#E5E5E5">xandrie so let me start with the notion</font>

7
00:00:15,780 --> 00:00:20,070
of program of<font color="#CCCCCC"> fisk asian so program of</font>

8
00:00:18,029 --> 00:00:22,560
fisk asian was introduced in the seminal

9
00:00:20,070 --> 00:00:25,109
work<font color="#CCCCCC"> of</font><font color="#E5E5E5"> barack at all and it</font><font color="#CCCCCC"> is modeled</font>

10
00:00:22,560 --> 00:00:28,140
as a compiler that<font color="#CCCCCC"> takes a program PS</font>

11
00:00:25,109 --> 00:00:30,689
input and outputs<font color="#E5E5E5"> another program</font><font color="#CCCCCC"> o of p</font>

12
00:00:28,140 --> 00:00:32,730
that<font color="#CCCCCC"> preserves the functionality of</font><font color="#E5E5E5"> the</font>

13
00:00:30,689 --> 00:00:35,880
original program but hides all the

14
00:00:32,729 --> 00:00:38,218
<font color="#E5E5E5">implementation</font><font color="#CCCCCC"> details</font><font color="#E5E5E5"> so this security</font>

15
00:00:35,880 --> 00:00:40,469
notion of hiding all the<font color="#E5E5E5"> implementation</font>

16
00:00:38,219 --> 00:00:42,450
<font color="#CCCCCC">details has been formalized in different</font>

17
00:00:40,469 --> 00:00:43,950
ways<font color="#CCCCCC"> and in</font><font color="#E5E5E5"> this talk</font><font color="#CCCCCC"> i will be</font><font color="#E5E5E5"> focusing</font>

18
00:00:42,450 --> 00:00:47,460
on<font color="#E5E5E5"> the indistinguishability based</font>

19
00:00:43,950 --> 00:00:49,829
definition indistinguishability of fisk

20
00:00:47,460 --> 00:00:53,100
asian or<font color="#CCCCCC"> i/o in short guarantees that</font>

21
00:00:49,829 --> 00:00:57,030
<font color="#E5E5E5">for any two circuits</font><font color="#CCCCCC"> C 0 and C 1 that</font>

22
00:00:53,100 --> 00:00:59,160
compute the same functionality<font color="#CCCCCC"> efficient</font>

23
00:00:57,030 --> 00:01:01,350
of C 0<font color="#E5E5E5"> is computationally</font>

24
00:00:59,160 --> 00:01:04,500
indistinguishable to<font color="#CCCCCC"> the obfuscation of</font>

25
00:01:01,350 --> 00:01:06,960
C 1<font color="#E5E5E5"> and starting from the first</font>

26
00:01:04,500 --> 00:01:09,240
candidate construction<font color="#E5E5E5"> given by</font><font color="#CCCCCC"> gurga</font>

27
00:01:06,960 --> 00:01:11,369
tall in 2013 we now have several

28
00:01:09,240 --> 00:01:14,270
<font color="#E5E5E5">candidates of i/o from assumptions on</font>

29
00:01:11,369 --> 00:01:14,270
multi linear<font color="#E5E5E5"> Maps</font>

30
00:01:14,420 --> 00:01:20,850
<font color="#CCCCCC">ok the</font><font color="#E5E5E5"> security guarantee provided by</font><font color="#CCCCCC"> IO</font>

31
00:01:18,810 --> 00:01:23,310
seems extremely<font color="#E5E5E5"> weak but somewhat</font>

32
00:01:20,850 --> 00:01:24,929
surprisingly<font color="#E5E5E5"> I you place other standard</font>

33
00:01:23,310 --> 00:01:26,490
assumptions such as<font color="#E5E5E5"> one-way functions</font>

34
00:01:24,930 --> 00:01:29,340
has been used<font color="#E5E5E5"> to construct several</font>

35
00:01:26,490 --> 00:01:30,329
cryptographic primitives<font color="#E5E5E5"> to</font><font color="#CCCCCC"> give you a</font>

36
00:01:29,340 --> 00:01:32,189
few examples

37
00:01:30,329 --> 00:01:34,429
io has been used to<font color="#E5E5E5"> construct functional</font>

38
00:01:32,189 --> 00:01:36,990
encryption deniable encryption

39
00:01:34,430 --> 00:01:38,759
<font color="#CCCCCC">non-interactive key exchange</font><font color="#E5E5E5"> it's been</font>

40
00:01:36,990 --> 00:01:41,220
used to<font color="#CCCCCC"> constructor on multi-party</font>

41
00:01:38,759 --> 00:01:42,869
<font color="#E5E5E5">computation protocols you mean used to</font>

42
00:01:41,220 --> 00:01:45,329
<font color="#E5E5E5">prove hardness of the complexity class</font><font color="#CCCCCC"> P</font>

43
00:01:42,869 --> 00:01:47,490
pad<font color="#E5E5E5"> and it's also been used</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> construct</font>

44
00:01:45,329 --> 00:01:49,199
<font color="#E5E5E5">trapdoor permutations and these are just</font>

45
00:01:47,490 --> 00:01:52,789
<font color="#CCCCCC">a handful</font><font color="#E5E5E5"> of examples and there are</font>

46
00:01:49,200 --> 00:01:56,430
several other cool applications of<font color="#CCCCCC"> Io</font>

47
00:01:52,790 --> 00:01:58,979
<font color="#E5E5E5">but if we were to use</font><font color="#CCCCCC"> io to build</font>

48
00:01:56,430 --> 00:02:01,469
application to build cryptographic

49
00:01:58,979 --> 00:02:03,090
primitives or in<font color="#E5E5E5"> certain applications we</font>

50
00:02:01,469 --> 00:02:05,640
would run<font color="#CCCCCC"> into what we call as the</font>

51
00:02:03,090 --> 00:02:06,869
<font color="#E5E5E5">sub-exponential barrier so let me</font>

52
00:02:05,640 --> 00:02:10,560
<font color="#E5E5E5">explain what I mean by</font><font color="#CCCCCC"> the</font>

53
00:02:06,869 --> 00:02:13,450
<font color="#CCCCCC">sub-exponential barrier so intuitively</font>

54
00:02:10,560 --> 00:02:15,489
this<font color="#E5E5E5"> sub-exponential barrier reference</font>

55
00:02:13,450 --> 00:02:18,010
to the<font color="#E5E5E5"> subjects potential loss in the</font>

56
00:02:15,489 --> 00:02:21,310
security reduction<font color="#E5E5E5"> that incurs within</font>

57
00:02:18,010 --> 00:02:23,410
the construction<font color="#CCCCCC"> of IO so let</font><font color="#E5E5E5"> me start</font>

58
00:02:21,310 --> 00:02:26,640
with<font color="#E5E5E5"> an</font><font color="#CCCCCC"> observation that</font><font color="#E5E5E5"> all known</font>

59
00:02:23,410 --> 00:02:28,930
constructions of<font color="#E5E5E5"> IO either require an an</font>

60
00:02:26,640 --> 00:02:31,089
exponential number<font color="#CCCCCC"> of assumptions which</font>

61
00:02:28,930 --> 00:02:33,069
is essentially one assumption per each

62
00:02:31,090 --> 00:02:36,130
pair of functionally equivalent circuits

63
00:02:33,069 --> 00:02:38,589
or incurs<font color="#CCCCCC"> in</font><font color="#E5E5E5"> sub exponential loss in</font>

64
00:02:36,130 --> 00:02:41,440
<font color="#E5E5E5">security</font><font color="#CCCCCC"> if we were to base on a small</font>

65
00:02:38,590 --> 00:02:43,390
number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> assumptions and this is no</font>

66
00:02:41,440 --> 00:02:45,910
coin students and we strongly<font color="#CCCCCC"> believe</font>

67
00:02:43,390 --> 00:02:49,410
that this sub exponential loss is

68
00:02:45,910 --> 00:02:52,120
inherent<font color="#E5E5E5"> with the construction of IO and</font>

69
00:02:49,410 --> 00:02:54,750
this sub exponential loss carries over

70
00:02:52,120 --> 00:02:57,730
to<font color="#E5E5E5"> any</font><font color="#CCCCCC"> application of</font><font color="#E5E5E5"> IO as well and</font>

71
00:02:54,750 --> 00:02:59,500
furthermore several applications of<font color="#E5E5E5"> IU</font>

72
00:02:57,730 --> 00:03:01,599
including some<font color="#E5E5E5"> of them that I mentioned</font>

73
00:02:59,500 --> 00:03:03,489
in the previous slide<font color="#CCCCCC"> require sub</font>

74
00:03:01,599 --> 00:03:07,000
exponentially hard indistinguishability

75
00:03:03,489 --> 00:03:08,950
<font color="#CCCCCC">efficient to prove their security so for</font>

76
00:03:07,000 --> 00:03:10,870
such<font color="#E5E5E5"> application there</font><font color="#CCCCCC"> are two sub</font>

77
00:03:08,950 --> 00:03:13,328
exponential losses<font color="#E5E5E5"> one in the</font>

78
00:03:10,870 --> 00:03:16,840
construction of<font color="#CCCCCC"> io</font><font color="#E5E5E5"> another from IO to</font>

79
00:03:13,329 --> 00:03:19,180
that particular application<font color="#E5E5E5"> so the</font>

80
00:03:16,840 --> 00:03:22,180
question that we<font color="#CCCCCC"> asked in</font><font color="#E5E5E5"> this work is</font>

81
00:03:19,180 --> 00:03:24,880
this is that is this sub exponential

82
00:03:22,180 --> 00:03:27,310
loss<font color="#E5E5E5"> in</font><font color="#CCCCCC"> daring to construct applications</font>

83
00:03:24,880 --> 00:03:30,459
of<font color="#CCCCCC"> IU as well or can</font><font color="#E5E5E5"> we somehow</font>

84
00:03:27,310 --> 00:03:35,859
circumvent this exponential barrier<font color="#E5E5E5"> for</font>

85
00:03:30,459 --> 00:03:38,500
certain applications of<font color="#E5E5E5"> IU in this work</font>

86
00:03:35,859 --> 00:03:41,079
<font color="#E5E5E5">we show that certain applications of</font><font color="#CCCCCC"> io</font>

87
00:03:38,500 --> 00:03:43,660
<font color="#E5E5E5">can in fact be based on a polynomial</font>

88
00:03:41,079 --> 00:03:46,030
falsifiable assumption and the

89
00:03:43,660 --> 00:03:48,819
assumption that we use in this work is

90
00:03:46,030 --> 00:03:51,190
the existence of compact public key

91
00:03:48,819 --> 00:03:52,988
functional encryption<font color="#CCCCCC"> and we know</font>

92
00:03:51,190 --> 00:03:54,910
constructions of compact public key

93
00:03:52,989 --> 00:03:56,440
<font color="#CCCCCC">functional encryption from polynomial</font>

94
00:03:54,910 --> 00:03:59,139
hardness assumptions on multi<font color="#E5E5E5"> linear</font>

95
00:03:56,440 --> 00:04:01,540
<font color="#E5E5E5">maps where as all known constructions of</font>

96
00:03:59,139 --> 00:04:04,989
<font color="#CCCCCC">io a require some exponential hardness</font>

97
00:04:01,540 --> 00:04:07,000
assumptions on multilinear maps so the

98
00:04:04,989 --> 00:04:10,810
applications that we get in this work

99
00:04:07,000 --> 00:04:13,569
<font color="#CCCCCC">are first is the construction of</font>

100
00:04:10,810 --> 00:04:15,609
traveler permutations<font color="#E5E5E5"> and the second a</font>

101
00:04:13,569 --> 00:04:18,279
construction of<font color="#E5E5E5"> non interactive key</font>

102
00:04:15,609 --> 00:04:21,549
exchange for unbounded number of parties

103
00:04:18,279 --> 00:04:23,559
<font color="#E5E5E5">without a trusted setter</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> prior to</font>

104
00:04:21,548 --> 00:04:26,109
<font color="#CCCCCC">her work</font><font color="#E5E5E5"> the construction of</font><font color="#CCCCCC"> traveler</font>

105
00:04:23,560 --> 00:04:27,170
permutations required sub exponentially

106
00:04:26,110 --> 00:04:29,720
hard in distinguished

107
00:04:27,170 --> 00:04:31,520
<font color="#E5E5E5">the station and the construction of</font>

108
00:04:29,720 --> 00:04:33,560
non-interactive key exchange with these

109
00:04:31,520 --> 00:04:35,120
two<font color="#CCCCCC"> specific properties was known only</font>

110
00:04:33,560 --> 00:04:38,290
<font color="#E5E5E5">under polynomial hardness of</font>

111
00:04:35,120 --> 00:04:40,640
indistinguishability of physicians<font color="#E5E5E5"> and</font>

112
00:04:38,290 --> 00:04:43,610
at this<font color="#E5E5E5"> point I would like to remark</font>

113
00:04:40,640 --> 00:04:45,710
<font color="#E5E5E5">that it was shown in independent works</font>

114
00:04:43,610 --> 00:04:47,900
by an intention and<font color="#E5E5E5"> batons key in my</font>

115
00:04:45,710 --> 00:04:49,909
container<font color="#CCCCCC"> then that</font><font color="#E5E5E5"> subjects potentially</font>

116
00:04:47,900 --> 00:04:51,679
had in this compact public key

117
00:04:49,910 --> 00:04:53,150
<font color="#E5E5E5">functional encryption already implies</font>

118
00:04:51,680 --> 00:04:55,700
the full-fledged<font color="#E5E5E5"> industry</font>

119
00:04:53,150 --> 00:04:58,000
<font color="#E5E5E5">indistinguishability of</font><font color="#CCCCCC"> fisk asian but</font>

120
00:04:55,700 --> 00:05:00,349
whereas<font color="#E5E5E5"> in this work we just rely on</font>

121
00:04:58,000 --> 00:05:02,120
<font color="#E5E5E5">polynomially hard compact public key</font>

122
00:05:00,350 --> 00:05:04,580
functional encryption which seems<font color="#CCCCCC"> to be</font>

123
00:05:02,120 --> 00:05:08,090
a quantitatively weaker security

124
00:05:04,580 --> 00:05:09,919
assumption<font color="#E5E5E5"> when compared to i/o so in</font>

125
00:05:08,090 --> 00:05:12,710
<font color="#E5E5E5">this talk</font><font color="#CCCCCC"> I will</font><font color="#E5E5E5"> be focusing on just the</font>

126
00:05:09,920 --> 00:05:14,570
second result that is how to construct<font color="#CCCCCC"> a</font>

127
00:05:12,710 --> 00:05:17,120
non-interactive key exchange protocol

128
00:05:14,570 --> 00:05:19,610
<font color="#CCCCCC">and for the sake of simplicity</font><font color="#E5E5E5"> I will</font>

129
00:05:17,120 --> 00:05:21,650
<font color="#E5E5E5">assume</font><font color="#CCCCCC"> a bound on the number</font><font color="#E5E5E5"> of parties</font>

130
00:05:19,610 --> 00:05:24,380
<font color="#E5E5E5">and I also assume that there exists a</font>

131
00:05:21,650 --> 00:05:26,780
trusted<font color="#CCCCCC"> set up and</font><font color="#E5E5E5"> I encourage</font><font color="#CCCCCC"> you to</font>

132
00:05:24,380 --> 00:05:28,760
<font color="#E5E5E5">look into</font><font color="#CCCCCC"> our paper for the construction</font>

133
00:05:26,780 --> 00:05:31,340
of trapdoor permutations and how to

134
00:05:28,760 --> 00:05:32,930
remove these<font color="#CCCCCC"> restrictions of bounding</font>

135
00:05:31,340 --> 00:05:37,250
<font color="#CCCCCC">the number of parties</font><font color="#E5E5E5"> and as you mean</font>

136
00:05:32,930 --> 00:05:38,900
the existence<font color="#E5E5E5"> of a trusted set okay so</font>

137
00:05:37,250 --> 00:05:41,780
the<font color="#E5E5E5"> outline of the rest of the talk is</font>

138
00:05:38,900 --> 00:05:43,460
as follows<font color="#E5E5E5"> we</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> will start with the</font>

139
00:05:41,780 --> 00:05:46,219
<font color="#E5E5E5">notion of functional encryption give</font>

140
00:05:43,460 --> 00:05:49,729
some intuitive notion of definition<font color="#E5E5E5"> and</font>

141
00:05:46,220 --> 00:05:51,860
security I will then give you<font color="#CCCCCC"> a brief</font>

142
00:05:49,730 --> 00:05:53,900
outline<font color="#CCCCCC"> of the onions and Jane and</font>

143
00:05:51,860 --> 00:05:56,690
<font color="#CCCCCC">batons key and why Quentin</font><font color="#E5E5E5"> Athens Fe</font><font color="#CCCCCC"> -</font>

144
00:05:53,900 --> 00:05:59,060
<font color="#CCCCCC">IO transformation and I will explain why</font>

145
00:05:56,690 --> 00:06:02,630
this approach<font color="#E5E5E5"> in</font><font color="#CCCCCC"> Kherson sub-exponential</font>

146
00:05:59,060 --> 00:06:04,880
<font color="#E5E5E5">loss in security and I will then give</font>

147
00:06:02,630 --> 00:06:06,530
<font color="#CCCCCC">you the</font><font color="#E5E5E5"> key technique that we use to</font>

148
00:06:04,880 --> 00:06:09,050
break<font color="#E5E5E5"> this</font><font color="#CCCCCC"> so-called sub-exponential</font>

149
00:06:06,530 --> 00:06:12,530
<font color="#E5E5E5">barrier for certain applications of</font><font color="#CCCCCC"> IO</font>

150
00:06:09,050 --> 00:06:16,120
<font color="#E5E5E5">by modifying the technique</font><font color="#CCCCCC"> Fe - our</font>

151
00:06:12,530 --> 00:06:19,070
<font color="#E5E5E5">transformation approach and then I will</font>

152
00:06:16,120 --> 00:06:21,020
still how to use this technique to<font color="#E5E5E5"> base</font>

153
00:06:19,070 --> 00:06:25,700
<font color="#E5E5E5">or to construct</font><font color="#CCCCCC"> non interactive key</font>

154
00:06:21,020 --> 00:06:28,219
exchange protocol okay so let me<font color="#E5E5E5"> start</font>

155
00:06:25,700 --> 00:06:30,200
with functional encryption so functional

156
00:06:28,220 --> 00:06:31,820
encryption is just a<font color="#CCCCCC"> generalization of</font>

157
00:06:30,200 --> 00:06:34,580
public key encryption that provides

158
00:06:31,820 --> 00:06:36,080
flying grained access to data<font color="#E5E5E5"> so in a</font>

159
00:06:34,580 --> 00:06:37,909
functional encryption scheme the

160
00:06:36,080 --> 00:06:40,370
<font color="#CCCCCC">ciphertext is generated using some</font>

161
00:06:37,910 --> 00:06:40,910
public parameters and there is a master

162
00:06:40,370 --> 00:06:43,280
<font color="#E5E5E5">secret</font>

163
00:06:40,910 --> 00:06:46,490
<font color="#E5E5E5">that is associated with this set of</font>

164
00:06:43,280 --> 00:06:49,549
public parameters the master<font color="#E5E5E5"> secret key</font>

165
00:06:46,490 --> 00:06:52,700
<font color="#E5E5E5">allows you to derive function keys for</font>

166
00:06:49,550 --> 00:06:56,480
various functionalities the correctness

167
00:06:52,700 --> 00:06:59,270
guarantee requires that the function<font color="#E5E5E5"> the</font>

168
00:06:56,480 --> 00:07:01,970
decrypting some<font color="#E5E5E5"> ciphertext encrypting</font>

169
00:06:59,270 --> 00:07:04,099
some data<font color="#CCCCCC"> ID</font><font color="#E5E5E5"> using a functional secret</font>

170
00:07:01,970 --> 00:07:05,990
key<font color="#E5E5E5"> allows you to learn the output of</font>

171
00:07:04,100 --> 00:07:08,600
<font color="#E5E5E5">the functionality on the underlying data</font>

172
00:07:05,990 --> 00:07:13,240
and the security guarantee is<font color="#CCCCCC"> that</font>

173
00:07:08,600 --> 00:07:13,240
nothing apart from<font color="#E5E5E5"> the output is leaked</font>

174
00:07:13,870 --> 00:07:20,240
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> so now let me give you a brief</font>

175
00:07:17,330 --> 00:07:22,099
<font color="#CCCCCC">outline of the fe2 IO transformation of</font>

176
00:07:20,240 --> 00:07:26,390
<font color="#E5E5E5">ananthan</font><font color="#CCCCCC"> Jayne</font><font color="#E5E5E5"> and batons K&Y</font><font color="#CCCCCC"> Kanta</font>

177
00:07:22,100 --> 00:07:29,620
Norton so let's say we have a circuit<font color="#CCCCCC"> C</font>

178
00:07:26,390 --> 00:07:33,260
that takes n bits of inputs and<font color="#CCCCCC"> outputs</font>

179
00:07:29,620 --> 00:07:34,940
<font color="#CCCCCC">M bits</font><font color="#E5E5E5"> and we want to give out an</font>

180
00:07:33,260 --> 00:07:37,940
obfuscation of<font color="#CCCCCC"> this circuit</font><font color="#E5E5E5"> using</font>

181
00:07:34,940 --> 00:07:40,700
functional encryption so the first step

182
00:07:37,940 --> 00:07:43,940
is to view this circuit<font color="#E5E5E5"> as a full binary</font>

183
00:07:40,700 --> 00:07:46,159
tree of<font color="#E5E5E5"> depth n where n</font><font color="#CCCCCC"> is the same</font>

184
00:07:43,940 --> 00:07:49,219
<font color="#E5E5E5">where n is the number of bits of</font><font color="#CCCCCC"> input</font>

185
00:07:46,160 --> 00:07:51,680
that<font color="#E5E5E5"> this circuit takes so the leaves of</font>

186
00:07:49,220 --> 00:07:53,840
this binary tree are labeled<font color="#E5E5E5"> with the</font>

187
00:07:51,680 --> 00:07:56,150
all strings of length n starting<font color="#E5E5E5"> from</font>

188
00:07:53,840 --> 00:07:58,609
the all<font color="#E5E5E5"> 0 string and ending at the</font><font color="#CCCCCC"> all 1</font>

189
00:07:56,150 --> 00:08:01,780
string and the root is<font color="#E5E5E5"> denoted by the</font>

190
00:07:58,610 --> 00:08:05,540
empty string<font color="#CCCCCC"> let me call</font><font color="#E5E5E5"> it as</font><font color="#CCCCCC"> epsilon</font>

191
00:08:01,780 --> 00:08:09,020
to evaluate<font color="#E5E5E5"> this circuit on a particular</font>

192
00:08:05,540 --> 00:08:11,360
input you just<font color="#CCCCCC"> traverse along the route</font>

193
00:08:09,020 --> 00:08:13,070
to<font color="#CCCCCC"> the leaf part where leaf is given by</font>

194
00:08:11,360 --> 00:08:15,919
the<font color="#E5E5E5"> input that</font><font color="#CCCCCC"> you want to evaluate</font><font color="#E5E5E5"> the</font>

195
00:08:13,070 --> 00:08:20,210
<font color="#CCCCCC">circuit on compute the circuit at the</font>

196
00:08:15,919 --> 00:08:22,969
leaf and then output<font color="#CCCCCC"> the value so with</font>

197
00:08:20,210 --> 00:08:24,859
this view of<font color="#E5E5E5"> a circuit let let's see how</font>

198
00:08:22,970 --> 00:08:25,690
the obfuscation of the circuit<font color="#E5E5E5"> looks</font>

199
00:08:24,860 --> 00:08:28,160
<font color="#E5E5E5">like</font>

200
00:08:25,690 --> 00:08:31,100
so the obfuscation of<font color="#CCCCCC"> the circuit</font>

201
00:08:28,160 --> 00:08:33,950
consists of a bunch<font color="#E5E5E5"> of functional secret</font>

202
00:08:31,100 --> 00:08:36,200
keys<font color="#E5E5E5"> as</font><font color="#CCCCCC"> k1 2 sk n</font><font color="#E5E5E5"> along with the final</font>

203
00:08:33,950 --> 00:08:38,690
function secret key sk c<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then</font>

204
00:08:36,200 --> 00:08:41,780
initial ciphertext that encrypts the

205
00:08:38,690 --> 00:08:44,000
<font color="#E5E5E5">root epsilon so the final functional</font>

206
00:08:41,780 --> 00:08:46,699
secret key<font color="#CCCCCC"> is KC implements the circuit</font>

207
00:08:44,000 --> 00:08:48,350
that<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to obfuscate and the</font>

208
00:08:46,700 --> 00:08:50,960
intermediate functional secret keys

209
00:08:48,350 --> 00:08:53,510
which are<font color="#CCCCCC"> one for</font><font color="#E5E5E5"> every level of this</font>

210
00:08:50,960 --> 00:08:55,100
binary tree<font color="#CCCCCC"> implement the bit extension</font>

211
00:08:53,510 --> 00:08:56,600
functionality so let me explain

212
00:08:55,100 --> 00:08:59,829
what does this bit extension

213
00:08:56,600 --> 00:09:02,959
functionality mean<font color="#E5E5E5"> so suppose I</font><font color="#CCCCCC"> have a</font>

214
00:08:59,829 --> 00:09:06,138
encryption<font color="#E5E5E5"> of an</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> minus</font><font color="#CCCCCC"> 1 bit string X</font>

215
00:09:02,959 --> 00:09:09,229
1<font color="#E5E5E5"> to I</font><font color="#CCCCCC"> minus 1 and I decrypt this using</font>

216
00:09:06,139 --> 00:09:12,589
the secret<font color="#E5E5E5"> key SK I now I get to</font>

217
00:09:09,230 --> 00:09:15,860
ciphertext one that<font color="#E5E5E5"> containing the</font>

218
00:09:12,589 --> 00:09:17,990
extension of this input<font color="#E5E5E5"> by the bit</font><font color="#CCCCCC"> 0 and</font>

219
00:09:15,860 --> 00:09:21,110
the<font color="#E5E5E5"> other containing the extension of</font>

220
00:09:17,990 --> 00:09:24,829
<font color="#E5E5E5">this bit by</font><font color="#CCCCCC"> 1 so all</font><font color="#E5E5E5"> of these</font>

221
00:09:21,110 --> 00:09:28,759
intermediate<font color="#E5E5E5"> secret</font><font color="#CCCCCC"> keys implement this</font>

222
00:09:24,829 --> 00:09:30,979
<font color="#E5E5E5">bit extension functionality so let us</font>

223
00:09:28,759 --> 00:09:34,370
<font color="#E5E5E5">see how</font><font color="#CCCCCC"> to evaluate this obfuscation on</font>

224
00:09:30,980 --> 00:09:37,040
a particular input<font color="#E5E5E5"> let's say X so the</font>

225
00:09:34,370 --> 00:09:39,920
<font color="#CCCCCC">first step is to</font><font color="#E5E5E5"> take this ciphertext</font>

226
00:09:37,040 --> 00:09:42,680
<font color="#E5E5E5">that encrypts</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> root decrypted</font><font color="#CCCCCC"> using</font>

227
00:09:39,920 --> 00:09:45,259
the first secret key SK<font color="#E5E5E5"> 1 and you will</font>

228
00:09:42,680 --> 00:09:48,109
get<font color="#E5E5E5"> 2 encryptions</font><font color="#CCCCCC"> 1 encrypting the bit 0</font>

229
00:09:45,259 --> 00:09:50,209
and the other encrypting the bit 1 so

230
00:09:48,110 --> 00:09:52,610
depending<font color="#E5E5E5"> on the first bit of your input</font>

231
00:09:50,209 --> 00:09:55,099
you choose either the<font color="#CCCCCC"> 0 encryption</font><font color="#E5E5E5"> or</font>

232
00:09:52,610 --> 00:09:57,110
the 1 encryption and you then recurse

233
00:09:55,100 --> 00:10:00,889
this procedure using the second secret

234
00:09:57,110 --> 00:10:03,589
<font color="#E5E5E5">key and at the end of n decryptions you</font>

235
00:10:00,889 --> 00:10:06,949
get a functional encryption<font color="#CCCCCC"> that</font>

236
00:10:03,589 --> 00:10:09,199
encrypts<font color="#CCCCCC"> your actual input</font><font color="#E5E5E5"> X and now you</font>

237
00:10:06,949 --> 00:10:11,479
can<font color="#E5E5E5"> use the final function secret key</font>

238
00:10:09,199 --> 00:10:13,550
<font color="#CCCCCC">that just implements</font><font color="#E5E5E5"> this circuit and</font>

239
00:10:11,480 --> 00:10:17,689
obtain the<font color="#CCCCCC"> output of the circuit on this</font>

240
00:10:13,550 --> 00:10:19,160
<font color="#CCCCCC">input X but the the way that I just</font>

241
00:10:17,689 --> 00:10:21,439
described this<font color="#E5E5E5"> construction does not</font>

242
00:10:19,160 --> 00:10:23,300
give<font color="#CCCCCC"> full-fledged</font><font color="#E5E5E5"> i/o because the final</font>

243
00:10:21,439 --> 00:10:27,050
functional secret key<font color="#CCCCCC"> skc is not</font>

244
00:10:23,300 --> 00:10:28,939
guaranteed to hide this circuit<font color="#E5E5E5"> C and in</font>

245
00:10:27,050 --> 00:10:31,430
order<font color="#E5E5E5"> to hide</font><font color="#CCCCCC"> the circuit they the</font>

246
00:10:28,939 --> 00:10:33,709
approach just encrypts<font color="#E5E5E5"> the circuit using</font>

247
00:10:31,430 --> 00:10:38,319
a symmetric key<font color="#E5E5E5"> and then add the</font>

248
00:10:33,709 --> 00:10:42,739
symmetric key to the initial ciphertext

249
00:10:38,319 --> 00:10:45,110
<font color="#E5E5E5">ok so let's try</font><font color="#CCCCCC"> to get some intuition on</font>

250
00:10:42,740 --> 00:10:47,810
why this approach<font color="#E5E5E5"> incurs and</font><font color="#CCCCCC"> sub</font>

251
00:10:45,110 --> 00:10:50,959
<font color="#E5E5E5">exponential loss in security if it has</font>

252
00:10:47,810 --> 00:10:53,630
to get<font color="#E5E5E5"> full fledged obfuscation so let's</font>

253
00:10:50,959 --> 00:10:56,420
say we have two circuits<font color="#CCCCCC"> C</font><font color="#E5E5E5"> 0 and C 1</font>

254
00:10:53,630 --> 00:10:58,939
<font color="#E5E5E5">that are functionally equivalent and</font><font color="#CCCCCC"> we</font>

255
00:10:56,420 --> 00:11:00,560
want to<font color="#E5E5E5"> prove that obfuscation of C 0</font><font color="#CCCCCC"> is</font>

256
00:10:58,939 --> 00:11:04,730
computationally indistinguishable to

257
00:11:00,560 --> 00:11:06,739
<font color="#CCCCCC">obfuscation of C 1 so obfuscation of</font><font color="#E5E5E5"> C</font><font color="#CCCCCC"> 0</font>

258
00:11:04,730 --> 00:11:08,630
can be<font color="#E5E5E5"> thought of as a full binary tree</font>

259
00:11:06,740 --> 00:11:11,510
where C 0 is being a

260
00:11:08,630 --> 00:11:13,670
valuated at every leaf node<font color="#E5E5E5"> and we want</font>

261
00:11:11,510 --> 00:11:16,550
to change<font color="#CCCCCC"> to an obfuscation of</font><font color="#E5E5E5"> c1 where</font>

262
00:11:13,670 --> 00:11:19,719
c1<font color="#E5E5E5"> is being evaluated at every leaf</font><font color="#CCCCCC"> one</font>

263
00:11:16,550 --> 00:11:23,209
this<font color="#E5E5E5"> is just</font><font color="#CCCCCC"> a high level overview and</font>

264
00:11:19,720 --> 00:11:25,220
approach<font color="#E5E5E5"> that this works take is by a</font>

265
00:11:23,210 --> 00:11:28,700
hybrid argument<font color="#E5E5E5"> where in the first</font>

266
00:11:25,220 --> 00:11:31,580
<font color="#CCCCCC">hybrid they change to the obfuscation of</font>

267
00:11:28,700 --> 00:11:34,820
c0 to an intermediate circuit that

268
00:11:31,580 --> 00:11:37,460
evaluates c1 on the first leaf node

269
00:11:34,820 --> 00:11:40,730
which is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> input and c0 on the</font>

270
00:11:37,460 --> 00:11:42,740
rest of<font color="#E5E5E5"> the inputs</font><font color="#CCCCCC"> when this change is</font>

271
00:11:40,730 --> 00:11:44,720
possible<font color="#E5E5E5"> by</font><font color="#CCCCCC"> using the security of</font>

272
00:11:42,740 --> 00:11:46,940
<font color="#E5E5E5">functional encryption</font><font color="#CCCCCC"> and in</font><font color="#E5E5E5"> fact they</font>

273
00:11:44,720 --> 00:11:49,040
just<font color="#E5E5E5"> need a weaker notion of security</font>

274
00:11:46,940 --> 00:11:50,980
namely the indistinguishability based

275
00:11:49,040 --> 00:11:55,130
security<font color="#CCCCCC"> of functional encryption to</font>

276
00:11:50,980 --> 00:11:57,620
make this change<font color="#CCCCCC"> so the next hybrid is</font>

277
00:11:55,130 --> 00:12:00,200
to change to an intermediate circuit

278
00:11:57,620 --> 00:12:02,260
that evaluates c1 are the first<font color="#E5E5E5"> two leaf</font>

279
00:12:00,200 --> 00:12:07,250
nodes and<font color="#E5E5E5"> c0 on the rest of the Leafs</font>

280
00:12:02,260 --> 00:12:10,000
<font color="#E5E5E5">and this is done for every leaf one by</font>

281
00:12:07,250 --> 00:12:13,010
<font color="#CCCCCC">one and at</font><font color="#E5E5E5"> the end you get an obfuscated</font>

282
00:12:10,000 --> 00:12:16,280
<font color="#CCCCCC">one is being evaluated at every leaf</font>

283
00:12:13,010 --> 00:12:18,710
node so the number of hybrids<font color="#E5E5E5"> required</font>

284
00:12:16,280 --> 00:12:20,390
in these approaches equal to the total

285
00:12:18,710 --> 00:12:22,400
<font color="#CCCCCC">number of</font><font color="#E5E5E5"> inputs which is true to the</font>

286
00:12:20,390 --> 00:12:24,620
end and<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> why this approach</font>

287
00:12:22,400 --> 00:12:29,300
<font color="#CCCCCC">incursion sub exponential loss in</font>

288
00:12:24,620 --> 00:12:31,700
security<font color="#CCCCCC"> ok so now we have understood</font>

289
00:12:29,300 --> 00:12:33,680
why the previous<font color="#E5E5E5"> approach incurs and sub</font>

290
00:12:31,700 --> 00:12:35,960
exponential loss let us look at the key

291
00:12:33,680 --> 00:12:37,939
technique that we<font color="#E5E5E5"> use to break the</font>

292
00:12:35,960 --> 00:12:39,940
<font color="#CCCCCC">so-called</font><font color="#E5E5E5"> subjects potential barrier for</font>

293
00:12:37,940 --> 00:12:43,040
certain applications of<font color="#E5E5E5"> Io</font>

294
00:12:39,940 --> 00:12:45,320
so the main observation<font color="#E5E5E5"> that we use is</font>

295
00:12:43,040 --> 00:12:47,900
<font color="#CCCCCC">that</font><font color="#E5E5E5"> the circuits that</font><font color="#CCCCCC"> are usually</font>

296
00:12:45,320 --> 00:12:49,700
encountered in IO<font color="#CCCCCC"> proves have similar</font>

297
00:12:47,900 --> 00:12:52,490
structure so let<font color="#E5E5E5"> me explain what I mean</font>

298
00:12:49,700 --> 00:12:55,790
by<font color="#CCCCCC"> this similar</font><font color="#E5E5E5"> structure so in a</font>

299
00:12:52,490 --> 00:12:59,000
typical<font color="#E5E5E5"> IO proof I</font><font color="#CCCCCC"> have an application</font>

300
00:12:55,790 --> 00:13:01,069
of<font color="#E5E5E5"> c0 in</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> hybrid and I want to change</font>

301
00:12:59,000 --> 00:13:02,720
<font color="#E5E5E5">to an obfuscation of c1 in the next</font><font color="#CCCCCC"> I</font>

302
00:13:01,070 --> 00:13:06,020
<font color="#E5E5E5">bread such that c0 and c1 are</font>

303
00:13:02,720 --> 00:13:07,790
functionally equivalent<font color="#E5E5E5"> so by the</font>

304
00:13:06,020 --> 00:13:09,819
security of indistinguishable<font color="#CCCCCC"> to</font>

305
00:13:07,790 --> 00:13:11,689
obfuscate<font color="#CCCCCC"> this hybrid change is</font>

306
00:13:09,820 --> 00:13:16,040
<font color="#E5E5E5">indistinguishable with respect to an</font>

307
00:13:11,690 --> 00:13:18,800
adversary now if we look into<font color="#E5E5E5"> this</font><font color="#CCCCCC"> stuck</font>

308
00:13:16,040 --> 00:13:21,020
C 0 and C<font color="#CCCCCC"> one's circuits more closely</font>

309
00:13:18,800 --> 00:13:22,370
<font color="#E5E5E5">then we would realize that they are</font><font color="#CCCCCC"> not</font>

310
00:13:21,020 --> 00:13:24,439
only<font color="#E5E5E5"> functionally equivalent but</font>

311
00:13:22,370 --> 00:13:26,889
lots of similarities<font color="#E5E5E5"> in their structure</font>

312
00:13:24,439 --> 00:13:31,309
<font color="#E5E5E5">so to give</font><font color="#CCCCCC"> you a concrete</font><font color="#E5E5E5"> example</font>

313
00:13:26,889 --> 00:13:34,449
consider the c1 so c1<font color="#E5E5E5"> evaluates a new</font>

314
00:13:31,309 --> 00:13:37,430
circuit<font color="#E5E5E5"> c0 prime on a special input</font><font color="#CCCCCC"> on</font>

315
00:13:34,449 --> 00:13:41,329
on rest of the<font color="#CCCCCC"> input it evaluates the</font>

316
00:13:37,430 --> 00:13:44,089
same circuit<font color="#E5E5E5"> C 0 so this c0 prime is</font>

317
00:13:41,329 --> 00:13:46,910
constructed such that its output on the

318
00:13:44,089 --> 00:13:48,860
special input<font color="#E5E5E5"> is same as C 0</font><font color="#CCCCCC"> output on</font>

319
00:13:46,910 --> 00:13:51,050
the special input<font color="#E5E5E5"> so this is just to</font>

320
00:13:48,860 --> 00:13:54,309
<font color="#CCCCCC">ensure that</font><font color="#E5E5E5"> C 1 and C 0</font><font color="#CCCCCC"> are functionally</font>

321
00:13:51,050 --> 00:13:58,099
equivalent<font color="#E5E5E5"> but notice that C 1 is</font>

322
00:13:54,309 --> 00:14:01,879
evaluating the<font color="#E5E5E5"> same circuit C 0 on all</font>

323
00:13:58,100 --> 00:14:04,999
but one input<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it just evaluates a</font>

324
00:14:01,879 --> 00:14:07,639
new circuit<font color="#CCCCCC"> c0</font><font color="#E5E5E5"> prime on a</font><font color="#CCCCCC"> one special</font>

325
00:14:04,999 --> 00:14:10,759
<font color="#CCCCCC">input so if we look</font><font color="#E5E5E5"> into the binary tree</font>

326
00:14:07,639 --> 00:14:13,610
<font color="#E5E5E5">structure of this particular c1 then</font><font color="#CCCCCC"> you</font>

327
00:14:10,759 --> 00:14:17,059
would realize<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it is evaluating c0</font>

328
00:14:13,610 --> 00:14:20,779
<font color="#CCCCCC">Prime at</font><font color="#E5E5E5"> one leaf node and it evaluates</font>

329
00:14:17,059 --> 00:14:22,730
<font color="#CCCCCC">c0 on all the other leaf nodes so in</font>

330
00:14:20,779 --> 00:14:25,459
order<font color="#CCCCCC"> to change from</font><font color="#E5E5E5"> an obfuscation of</font>

331
00:14:22,730 --> 00:14:28,129
c0 where c0 is being evaluated at every

332
00:14:25,459 --> 00:14:30,439
leaf node to an obfuscation of c1 it is

333
00:14:28,129 --> 00:14:33,800
sufficient to<font color="#E5E5E5"> change the distribution at</font>

334
00:14:30,439 --> 00:14:36,370
<font color="#CCCCCC">one lis one leaf and this step can be</font>

335
00:14:33,800 --> 00:14:39,829
realized<font color="#E5E5E5"> just by using the polynomial</font>

336
00:14:36,370 --> 00:14:42,019
<font color="#E5E5E5">hardness of functional encryption and if</font>

337
00:14:39,829 --> 00:14:44,689
you are<font color="#CCCCCC"> wondering where do we encounter</font>

338
00:14:42,019 --> 00:14:46,429
such<font color="#CCCCCC"> c0 and c1</font><font color="#E5E5E5"> the answer is in the</font>

339
00:14:44,689 --> 00:14:48,679
punctured programming approach of<font color="#E5E5E5"> Sahai</font>

340
00:14:46,429 --> 00:14:51,259
<font color="#E5E5E5">inverters usually in the punctured</font>

341
00:14:48,679 --> 00:14:53,420
programming approach we change from one

342
00:14:51,259 --> 00:14:56,240
circuit<font color="#CCCCCC"> to another circuit that has an</font>

343
00:14:53,420 --> 00:14:59,149
additional if statement so the if the

344
00:14:56,240 --> 00:15:01,249
input<font color="#E5E5E5"> has some hard coded value</font><font color="#CCCCCC"> then you</font>

345
00:14:59,149 --> 00:15:03,319
<font color="#CCCCCC">output some hard-wired value in the</font>

346
00:15:01,249 --> 00:15:05,300
circuit<font color="#E5E5E5"> on the rest of the inputs you</font>

347
00:15:03,319 --> 00:15:09,019
just perform<font color="#E5E5E5"> the same computation as in</font>

348
00:15:05,300 --> 00:15:11,870
the<font color="#E5E5E5"> previous circuit and for such hybrid</font>

349
00:15:09,019 --> 00:15:14,179
changes we can in fact<font color="#E5E5E5"> realize the</font>

350
00:15:11,870 --> 00:15:18,860
hybrid chain by using polynomial

351
00:15:14,179 --> 00:15:20,569
hardness<font color="#E5E5E5"> of functional encryption so let</font>

352
00:15:18,860 --> 00:15:23,929
us<font color="#E5E5E5"> see how to</font><font color="#CCCCCC"> use this technique to</font>

353
00:15:20,569 --> 00:15:26,120
<font color="#E5E5E5">build</font><font color="#CCCCCC"> non interactive key exchange</font><font color="#E5E5E5"> so in</font>

354
00:15:23,929 --> 00:15:28,129
a<font color="#E5E5E5"> non interactive key exchange protocol</font>

355
00:15:26,120 --> 00:15:32,569
we<font color="#E5E5E5"> have several parties and they wish to</font>

356
00:15:28,129 --> 00:15:35,540
derive a shared key<font color="#CCCCCC"> so there is a public</font>

357
00:15:32,569 --> 00:15:35,959
<font color="#CCCCCC">bulletin board and the parties published</font>

358
00:15:35,540 --> 00:15:37,819
some

359
00:15:35,960 --> 00:15:39,830
<font color="#E5E5E5">public information</font><font color="#CCCCCC"> - this bulletin board</font>

360
00:15:37,820 --> 00:15:42,020
and retain some secret<font color="#E5E5E5"> information</font><font color="#CCCCCC"> with</font>

361
00:15:39,830 --> 00:15:45,050
themselves so the key derivation

362
00:15:42,020 --> 00:15:47,960
algorithm takes<font color="#E5E5E5"> the all the published</font>

363
00:15:45,050 --> 00:15:49,729
information and uses the<font color="#E5E5E5"> secret</font>

364
00:15:47,960 --> 00:15:52,940
<font color="#E5E5E5">information of a party and derives</font><font color="#CCCCCC"> a</font>

365
00:15:49,730 --> 00:15:55,160
<font color="#E5E5E5">shared key so the correctness guarantee</font>

366
00:15:52,940 --> 00:15:57,890
is that<font color="#CCCCCC"> the the key that</font><font color="#E5E5E5"> is derived by</font>

367
00:15:55,160 --> 00:16:00,560
<font color="#E5E5E5">every party is the same and the security</font>

368
00:15:57,890 --> 00:16:02,090
is<font color="#E5E5E5"> that the given just the public</font>

369
00:16:00,560 --> 00:16:06,050
<font color="#E5E5E5">information the shared key is</font>

370
00:16:02,090 --> 00:16:09,230
indistinguishable<font color="#E5E5E5"> to a random string so</font>

371
00:16:06,050 --> 00:16:11,209
let us<font color="#E5E5E5"> take a look at the</font><font color="#CCCCCC"> bonus and</font><font color="#E5E5E5"> we</font>

372
00:16:09,230 --> 00:16:13,100
non-interactive key exchange protocol

373
00:16:11,210 --> 00:16:14,960
from indistinguishability<font color="#E5E5E5"> office</font><font color="#CCCCCC"> Keshan</font>

374
00:16:13,100 --> 00:16:16,790
which will serve<font color="#CCCCCC"> as the</font><font color="#E5E5E5"> basis to</font>

375
00:16:14,960 --> 00:16:20,210
construct it from polynomially hard

376
00:16:16,790 --> 00:16:21,829
functional encryption so in the bonus

377
00:16:20,210 --> 00:16:24,230
entry non-interactive key exchange

378
00:16:21,830 --> 00:16:26,960
protocol the the<font color="#E5E5E5"> public information is</font>

379
00:16:24,230 --> 00:16:29,600
just a public key<font color="#CCCCCC"> of a semantically</font>

380
00:16:26,960 --> 00:16:31,670
<font color="#E5E5E5">secure encryption key scheme and the</font>

381
00:16:29,600 --> 00:16:36,050
secret key is the secret<font color="#E5E5E5"> information is</font>

382
00:16:31,670 --> 00:16:38,150
the corresponding secret<font color="#E5E5E5"> key so the the</font>

383
00:16:36,050 --> 00:16:40,969
shared key is given by a pseudo-random

384
00:16:38,150 --> 00:16:44,900
<font color="#E5E5E5">function evaluated on the set of public</font>

385
00:16:40,970 --> 00:16:46,490
parameters and in order to<font color="#CCCCCC"> evaluate this</font>

386
00:16:44,900 --> 00:16:48,829
<font color="#E5E5E5">pseudo-random function in a secure</font>

387
00:16:46,490 --> 00:16:51,770
manner<font color="#E5E5E5"> so that adversary does not learn</font>

388
00:16:48,830 --> 00:16:56,290
this value the<font color="#CCCCCC"> the parties take help of</font>

389
00:16:51,770 --> 00:16:58,730
a trusted party<font color="#E5E5E5"> so this trusted party</font>

390
00:16:56,290 --> 00:17:02,000
<font color="#E5E5E5">samples a pseudo-random function key</font>

391
00:16:58,730 --> 00:17:05,329
lets me call it as<font color="#E5E5E5"> s and it constructs</font>

392
00:17:02,000 --> 00:17:08,810
this program<font color="#E5E5E5"> P so this program</font><font color="#CCCCCC"> P takes</font>

393
00:17:05,329 --> 00:17:12,169
as input the<font color="#E5E5E5"> public parameters and first</font>

394
00:17:08,810 --> 00:17:14,270
it computes the shared key by<font color="#E5E5E5"> evaluating</font>

395
00:17:12,170 --> 00:17:17,270
<font color="#CCCCCC">the pseudo-random function on the set</font><font color="#E5E5E5"> of</font>

396
00:17:14,270 --> 00:17:19,490
public parameters and it just outputs

397
00:17:17,270 --> 00:17:22,510
the encryption of the<font color="#E5E5E5"> shared key under</font>

398
00:17:19,490 --> 00:17:25,520
each<font color="#E5E5E5"> one of those input public keys and</font>

399
00:17:22,510 --> 00:17:28,190
this trusted party obfuscates this

400
00:17:25,520 --> 00:17:34,400
program<font color="#E5E5E5"> P and publishes</font><font color="#CCCCCC"> it on the</font>

401
00:17:28,190 --> 00:17:36,680
<font color="#E5E5E5">bulletin board now the parties the the</font>

402
00:17:34,400 --> 00:17:41,120
actual parties that are<font color="#E5E5E5"> involved in the</font>

403
00:17:36,680 --> 00:17:43,130
scheme<font color="#CCCCCC"> take this</font><font color="#E5E5E5"> program P</font><font color="#CCCCCC"> random ran it</font>

404
00:17:41,120 --> 00:17:46,639
on<font color="#E5E5E5"> the set of public parameters and</font>

405
00:17:43,130 --> 00:17:48,890
<font color="#E5E5E5">obtain the ciphertext now using their</font>

406
00:17:46,640 --> 00:17:49,850
<font color="#CCCCCC">secret key they can decrypt one of the</font>

407
00:17:48,890 --> 00:17:51,620
<font color="#E5E5E5">ciphertext</font>

408
00:17:49,850 --> 00:17:54,320
because they know the secret key<font color="#CCCCCC"> s</font><font color="#E5E5E5"> ki</font>

409
00:17:51,620 --> 00:17:57,590
for the public<font color="#E5E5E5"> key</font><font color="#CCCCCC"> P ki and they can</font>

410
00:17:54,320 --> 00:18:00,950
derive the shared key the security<font color="#CCCCCC"> of</font>

411
00:17:57,590 --> 00:18:03,110
this construction is proved using the

412
00:18:00,950 --> 00:18:06,740
punctured programming approach of<font color="#E5E5E5"> Sahai</font>

413
00:18:03,110 --> 00:18:09,979
and waters<font color="#E5E5E5"> and at a high level</font><font color="#CCCCCC"> if you</font>

414
00:18:06,740 --> 00:18:11,960
look into the security proof the the the

415
00:18:09,980 --> 00:18:13,400
place where we will be<font color="#E5E5E5"> using the</font>

416
00:18:11,960 --> 00:18:16,429
<font color="#CCCCCC">indistinguishability obfuscation</font>

417
00:18:13,400 --> 00:18:18,919
guarantee<font color="#E5E5E5"> is in a</font><font color="#CCCCCC"> hybrid where we change</font>

418
00:18:16,429 --> 00:18:21,799
from a program<font color="#E5E5E5"> P that is constructed</font>

419
00:18:18,919 --> 00:18:24,650
<font color="#CCCCCC">honnestly by this trusted party to</font>

420
00:18:21,799 --> 00:18:28,850
another hybrid<font color="#CCCCCC"> or to a program P Prime</font>

421
00:18:24,650 --> 00:18:31,820
that on a special input<font color="#E5E5E5"> X that is</font><font color="#CCCCCC"> it the</font>

422
00:18:28,850 --> 00:18:34,039
set the<font color="#E5E5E5"> PK 1 2 PK</font><font color="#CCCCCC"> 4 is equal</font><font color="#E5E5E5"> to the</font>

423
00:18:31,820 --> 00:18:38,120
special input<font color="#E5E5E5"> X it out put some</font>

424
00:18:34,039 --> 00:18:41,840
<font color="#CCCCCC">hard-coded value Z on all other</font><font color="#E5E5E5"> places</font>

425
00:18:38,120 --> 00:18:43,899
<font color="#E5E5E5">it computes this PRF compare it computes</font>

426
00:18:41,840 --> 00:18:46,730
this PRF value on the set of inputs and

427
00:18:43,900 --> 00:18:50,630
<font color="#CCCCCC">outputs</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> ciphertext</font><font color="#E5E5E5"> just as in the</font>

428
00:18:46,730 --> 00:18:54,250
previous<font color="#E5E5E5"> program P so this fits well</font>

429
00:18:50,630 --> 00:18:56,960
into our<font color="#E5E5E5"> paradigm</font><font color="#CCCCCC"> of basing it on</font>

430
00:18:54,250 --> 00:18:58,850
polynomial hardness assumption and if

431
00:18:56,960 --> 00:19:01,820
you look into this binary tree structure

432
00:18:58,850 --> 00:19:04,610
again of this new program P<font color="#CCCCCC"> prime then</font>

433
00:19:01,820 --> 00:19:07,280
<font color="#E5E5E5">we would</font><font color="#CCCCCC"> just be</font><font color="#E5E5E5"> changing the</font>

434
00:19:04,610 --> 00:19:10,370
distribution<font color="#E5E5E5"> at just one leaf and this</font>

435
00:19:07,280 --> 00:19:16,700
can be realized by<font color="#E5E5E5"> using polynomial</font>

436
00:19:10,370 --> 00:19:21,289
hardness<font color="#E5E5E5"> of functional encryption to</font>

437
00:19:16,700 --> 00:19:23,179
conclude<font color="#CCCCCC"> we identify a property that</font><font color="#E5E5E5"> is</font>

438
00:19:21,289 --> 00:19:25,340
shared by<font color="#CCCCCC"> many applications of</font>

439
00:19:23,179 --> 00:19:28,220
indistinguishability<font color="#CCCCCC"> offers obfuscation</font>

440
00:19:25,340 --> 00:19:31,970
<font color="#E5E5E5">that enables us to be</font><font color="#CCCCCC"> a security</font><font color="#E5E5E5"> on</font>

441
00:19:28,220 --> 00:19:33,919
polynomial hardness assumptions<font color="#E5E5E5"> but we</font>

442
00:19:31,970 --> 00:19:37,100
<font color="#E5E5E5">haven't been able to</font><font color="#CCCCCC"> obtain all</font>

443
00:19:33,919 --> 00:19:38,510
applications of<font color="#CCCCCC"> i/o</font><font color="#E5E5E5"> even the application</font>

444
00:19:37,100 --> 00:19:41,990
<font color="#CCCCCC">that used the punctured programming</font>

445
00:19:38,510 --> 00:19:44,150
approach<font color="#E5E5E5"> one such application is the non</font>

446
00:19:41,990 --> 00:19:46,850
interactive<font color="#E5E5E5"> zero knowledge protocol of</font>

447
00:19:44,150 --> 00:19:49,640
<font color="#CCCCCC">the high-end</font><font color="#E5E5E5"> waters so we haven't been</font>

448
00:19:46,850 --> 00:19:51,918
<font color="#E5E5E5">able to base this on polynomial hard</font>

449
00:19:49,640 --> 00:19:54,799
functional encryption<font color="#E5E5E5"> and one other</font>

450
00:19:51,919 --> 00:19:57,470
example<font color="#E5E5E5"> is the deniable encryption</font><font color="#CCCCCC"> from</font>

451
00:19:54,799 --> 00:20:00,799
the same paper so<font color="#CCCCCC"> that is also</font><font color="#E5E5E5"> we</font>

452
00:19:57,470 --> 00:20:03,779
<font color="#E5E5E5">haven't been able to do that it would be</font>

453
00:20:00,799 --> 00:20:05,429
a nice open problem to base at<font color="#E5E5E5"> deny</font>

454
00:20:03,779 --> 00:20:08,909
<font color="#CCCCCC">will encryption on polynomially</font><font color="#E5E5E5"> hard</font>

455
00:20:05,429 --> 00:20:11,219
functional encryption so in a follow-up

456
00:20:08,909 --> 00:20:13,710
work by<font color="#E5E5E5"> you and xandrie they provide a</font>

457
00:20:11,219 --> 00:20:16,229
simple interface for constructing

458
00:20:13,710 --> 00:20:19,229
applications from polynomial hardness

459
00:20:16,229 --> 00:20:21,419
assumptions<font color="#E5E5E5"> by using the techniques that</font>

460
00:20:19,229 --> 00:20:24,450
we developed in this work as<font color="#E5E5E5"> well as a</font>

461
00:20:21,419 --> 00:20:33,299
previous work<font color="#E5E5E5"> and that's it</font>

462
00:20:24,450 --> 00:20:43,409
thank<font color="#E5E5E5"> you we have</font><font color="#CCCCCC"> time for some</font>

463
00:20:33,299 --> 00:20:45,809
<font color="#CCCCCC">questions yes do you have</font><font color="#E5E5E5"> any like kind</font>

464
00:20:43,409 --> 00:20:47,519
of conjecture<font color="#CCCCCC"> of you know let's say</font>

465
00:20:45,809 --> 00:20:49,379
undeniable encryption it are<font color="#E5E5E5"> there some</font>

466
00:20:47,519 --> 00:20:50,700
things which you applications<font color="#E5E5E5"> which you</font>

467
00:20:49,379 --> 00:20:53,789
think<font color="#E5E5E5"> this won't apply to you do you</font>

468
00:20:50,700 --> 00:20:56,009
think<font color="#E5E5E5"> it so the</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> can say about why</font>

469
00:20:53,789 --> 00:20:58,950
doesn't it work that would<font color="#CCCCCC"> be</font><font color="#E5E5E5"> simple</font>

470
00:20:56,009 --> 00:21:00,539
because in the soundness<font color="#E5E5E5"> to prove the</font>

471
00:20:58,950 --> 00:21:02,759
soundness<font color="#E5E5E5"> I need we need to prove that</font>

472
00:21:00,539 --> 00:21:06,059
<font color="#E5E5E5">for every X that is not in the language</font>

473
00:21:02,759 --> 00:21:11,369
<font color="#E5E5E5">we need to say that you cannot generate</font>

474
00:21:06,059 --> 00:21:14,908
a proof<font color="#E5E5E5"> and so the the the</font><font color="#CCCCCC"> Sahai</font><font color="#E5E5E5"> on what</font>

475
00:21:11,369 --> 00:21:18,059
is it<font color="#E5E5E5"> proof</font><font color="#CCCCCC"> actually checks if the x</font><font color="#E5E5E5"> it</font>

476
00:21:14,909 --> 00:21:19,919
takes as input the<font color="#CCCCCC"> the statement</font><font color="#E5E5E5"> X and</font>

477
00:21:18,059 --> 00:21:22,559
the witness for this relation and it

478
00:21:19,919 --> 00:21:24,809
<font color="#CCCCCC">then generates a signature for that</font><font color="#E5E5E5"> on</font>

479
00:21:22,559 --> 00:21:27,059
<font color="#CCCCCC">the</font><font color="#E5E5E5"> statement takes if the X comma W</font>

480
00:21:24,809 --> 00:21:29,668
belongs to the relation so this

481
00:21:27,059 --> 00:21:35,129
signature<font color="#CCCCCC"> is generated using a punctured</font>

482
00:21:29,669 --> 00:21:37,950
PRF key<font color="#E5E5E5"> and so the the in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use</font>

483
00:21:35,129 --> 00:21:40,349
our techniques we have<font color="#E5E5E5"> to puncture the</font>

484
00:21:37,950 --> 00:21:43,259
<font color="#E5E5E5">program the PRF key for every witness</font>

485
00:21:40,349 --> 00:21:45,239
<font color="#E5E5E5">and since the number</font><font color="#CCCCCC"> of witnesses is</font>

486
00:21:43,259 --> 00:21:50,399
actually exponential<font color="#E5E5E5"> we need to incur an</font>

487
00:21:45,239 --> 00:21:54,539
exponential<font color="#CCCCCC"> loss in</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> sitting as a</font>

488
00:21:50,399 --> 00:21:57,299
deniable<font color="#E5E5E5"> encryption</font><font color="#CCCCCC"> it's a I</font><font color="#E5E5E5"> think it's</font>

489
00:21:54,539 --> 00:22:00,599
a<font color="#E5E5E5"> similar problem the problem is</font><font color="#CCCCCC"> because</font>

490
00:21:57,299 --> 00:22:02,700
the the current proof that uses

491
00:22:00,599 --> 00:22:06,059
indistinguishability of<font color="#E5E5E5"> fisken is not</font>

492
00:22:02,700 --> 00:22:08,219
does<font color="#CCCCCC"> not seem to</font><font color="#E5E5E5"> be amenable to</font><font color="#CCCCCC"> our</font>

493
00:22:06,059 --> 00:22:15,119
techniques<font color="#CCCCCC"> maybe there</font><font color="#E5E5E5"> is a smarter</font>

494
00:22:08,219 --> 00:22:17,539
production which could be done more

495
00:22:15,119 --> 00:22:17,539
<font color="#E5E5E5">questions</font>

496
00:22:22,500 --> 00:22:27,150
do you think there<font color="#E5E5E5"> is hope to not paste</font>

497
00:22:25,320 --> 00:22:28,620
directly some of those application you

498
00:22:27,150 --> 00:22:30,060
mention like music and deniable

499
00:22:28,620 --> 00:22:32,909
encryption<font color="#E5E5E5"> directly and the</font><font color="#CCCCCC"> pulling on</font>

500
00:22:30,060 --> 00:22:35,399
only polynomial hardness assumptions<font color="#E5E5E5"> but</font>

501
00:22:32,910 --> 00:22:37,080
to do as was a located in this paper<font color="#E5E5E5"> by</font>

502
00:22:35,400 --> 00:22:38,790
<font color="#CCCCCC">marks entry to push all the</font>

503
00:22:37,080 --> 00:22:40,800
<font color="#CCCCCC">sub-exponential hardness to some</font>

504
00:22:38,790 --> 00:22:44,490
primitive which is like safer than I oh

505
00:22:40,800 --> 00:22:45,990
yeah<font color="#CCCCCC"> and to only rely on polynomial</font>

506
00:22:44,490 --> 00:22:47,520
hardness for the more involved

507
00:22:45,990 --> 00:22:49,470
<font color="#E5E5E5">primitives such as function encryption</font>

508
00:22:47,520 --> 00:22:53,730
using for example<font color="#E5E5E5"> extremely low C</font>

509
00:22:49,470 --> 00:22:56,910
functions so<font color="#CCCCCC"> the paper</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> luhan's and we</font>

510
00:22:53,730 --> 00:22:59,610
actually constructs a<font color="#E5E5E5"> know a primitive</font>

511
00:22:56,910 --> 00:23:01,950
called as exploding obfuscation<font color="#E5E5E5"> which is</font>

512
00:22:59,610 --> 00:23:04,639
based on polynomially hard functional

513
00:23:01,950 --> 00:23:06,600
encryption and<font color="#E5E5E5"> you can obtain the</font>

514
00:23:04,640 --> 00:23:08,730
application that<font color="#E5E5E5"> we discussed in this</font>

515
00:23:06,600 --> 00:23:12,719
work by<font color="#E5E5E5"> just using</font><font color="#CCCCCC"> this exploding</font><font color="#E5E5E5"> of</font>

516
00:23:08,730 --> 00:23:14,430
this occasion primitive so<font color="#E5E5E5"> yes so for</font>

517
00:23:12,720 --> 00:23:16,050
<font color="#E5E5E5">the author application like music do you</font>

518
00:23:14,430 --> 00:23:18,330
think<font color="#CCCCCC"> that there will</font><font color="#E5E5E5"> be hope to base</font>

519
00:23:16,050 --> 00:23:20,840
them on polynomial hardness assumption

520
00:23:18,330 --> 00:23:23,820
for functional encryption<font color="#E5E5E5"> plus</font>

521
00:23:20,840 --> 00:23:26,610
<font color="#E5E5E5">sub-exponential or</font><font color="#CCCCCC"> expo</font><font color="#E5E5E5"> for exemption we</font>

522
00:23:23,820 --> 00:23:28,770
can business polynomially had<font color="#E5E5E5"> functional</font>

523
00:23:26,610 --> 00:23:30,110
encryption please witness encryption but

524
00:23:28,770 --> 00:23:32,400
witness encryption requires

525
00:23:30,110 --> 00:23:37,520
<font color="#E5E5E5">sub-exponential hardness assumptions in</font>

526
00:23:32,400 --> 00:23:37,520
a similar manner to<font color="#CCCCCC"> okay</font>

