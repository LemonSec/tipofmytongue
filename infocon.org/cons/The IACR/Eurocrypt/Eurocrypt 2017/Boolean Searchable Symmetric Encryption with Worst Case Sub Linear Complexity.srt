1
00:00:00,060 --> 00:00:06,298
hi everyone<font color="#CCCCCC"> so</font><font color="#E5E5E5"> I'm going today to talk</font>

2
00:00:04,560 --> 00:00:08,340
about<font color="#E5E5E5"> our work</font><font color="#CCCCCC"> choice that boolean</font>

3
00:00:06,299 --> 00:00:10,980
search<font color="#CCCCCC"> or encryption with worst case of</font>

4
00:00:08,340 --> 00:00:15,480
linear complexity it's a joint work<font color="#E5E5E5"> with</font>

5
00:00:10,980 --> 00:00:18,029
<font color="#CCCCCC">with</font><font color="#E5E5E5"> cine camera</font><font color="#CCCCCC"> ok so it starts so Bob</font>

6
00:00:15,480 --> 00:00:21,359
like many of us use mini cloud services

7
00:00:18,029 --> 00:00:23,670
to<font color="#CCCCCC"> store his data</font><font color="#E5E5E5"> and Bob also cares</font>

8
00:00:21,359 --> 00:00:25,470
about his confidentiality so<font color="#E5E5E5"> his</font>

9
00:00:23,670 --> 00:00:29,250
<font color="#E5E5E5">encryption his data before outsourcing</font>

10
00:00:25,470 --> 00:00:31,320
it<font color="#CCCCCC"> to the cloud right</font><font color="#E5E5E5"> but you know many</font>

11
00:00:29,250 --> 00:00:33,690
<font color="#E5E5E5">of the encryption</font><font color="#CCCCCC"> the data makes Bob</font>

12
00:00:31,320 --> 00:00:35,340
lose<font color="#CCCCCC"> his search functionality</font><font color="#E5E5E5"> and this</font>

13
00:00:33,690 --> 00:00:38,309
motivates the problem of encrypted

14
00:00:35,340 --> 00:00:40,559
search area

15
00:00:38,309 --> 00:00:42,809
<font color="#E5E5E5">so the state of the art has many</font>

16
00:00:40,559 --> 00:00:45,180
approaches just<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> encryption search</font>

17
00:00:42,809 --> 00:00:47,480
problem like structured encryption and

18
00:00:45,180 --> 00:00:51,239
<font color="#CCCCCC">searchable encryption oblivious RAM</font>

19
00:00:47,480 --> 00:00:54,120
functional encryption<font color="#CCCCCC"> NPC property</font>

20
00:00:51,239 --> 00:00:56,370
preserve encryption and<font color="#CCCCCC"> for homomorphic</font>

21
00:00:54,120 --> 00:00:59,788
encryption<font color="#E5E5E5"> and actually there are so</font>

22
00:00:56,370 --> 00:01:03,809
many criteria<font color="#E5E5E5"> to evaluate these</font>

23
00:00:59,789 --> 00:01:06,420
approaches<font color="#E5E5E5"> one of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> most important one</font>

24
00:01:03,809 --> 00:01:07,950
of<font color="#E5E5E5"> them are the efficiency of the of the</font>

25
00:01:06,420 --> 00:01:12,060
approach the expressiveness of<font color="#E5E5E5"> the</font>

26
00:01:07,950 --> 00:01:13,920
approach at all<font color="#CCCCCC"> so the security</font><font color="#E5E5E5"> and you</font>

27
00:01:12,060 --> 00:01:15,780
<font color="#E5E5E5">know based on this criteria we think</font>

28
00:01:13,920 --> 00:01:17,700
that searchable symmetric encryption is

29
00:01:15,780 --> 00:01:20,430
better switch of all for the encrypted

30
00:01:17,700 --> 00:01:23,460
search problem<font color="#E5E5E5"> so in this talk we will</font>

31
00:01:20,430 --> 00:01:26,520
focus on<font color="#CCCCCC"> SSC and in more</font><font color="#E5E5E5"> particular on</font>

32
00:01:23,460 --> 00:01:27,809
expressive<font color="#CCCCCC"> sec</font><font color="#E5E5E5"> and in this talk we will</font>

33
00:01:26,520 --> 00:01:29,579
<font color="#CCCCCC">talk about boolean search double</font>

34
00:01:27,810 --> 00:01:32,250
<font color="#E5E5E5">symmetric encryption so there are so</font>

35
00:01:29,579 --> 00:01:33,210
many work that solve this problem<font color="#E5E5E5"> namely</font>

36
00:01:32,250 --> 00:01:36,450
<font color="#CCCCCC">oxc</font>

37
00:01:33,210 --> 00:01:39,350
and blind seer<font color="#E5E5E5"> constructions and they</font>

38
00:01:36,450 --> 00:01:42,810
offer different<font color="#CCCCCC"> trade off between</font>

39
00:01:39,350 --> 00:01:45,298
expressiveness and<font color="#E5E5E5"> efficiency all right</font>

40
00:01:42,810 --> 00:01:47,460
so the goal of<font color="#E5E5E5"> this paper is</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> improve</font>

41
00:01:45,299 --> 00:01:50,430
on these<font color="#E5E5E5"> lines and propose something</font>

42
00:01:47,460 --> 00:01:54,500
with as<font color="#CCCCCC"> propose better expressiveness</font>

43
00:01:50,430 --> 00:01:56,939
and efficiency with less leakage<font color="#E5E5E5"> as well</font>

44
00:01:54,500 --> 00:01:59,880
so let's gets in more details about<font color="#E5E5E5"> this</font>

45
00:01:56,939 --> 00:02:05,008
<font color="#CCCCCC">trio</font><font color="#E5E5E5"> construction the Alexi and and</font>

46
00:01:59,880 --> 00:02:07,649
blind<font color="#CCCCCC"> sea so oxc buy cash at</font><font color="#E5E5E5"> all efforts</font>

47
00:02:05,009 --> 00:02:11,099
<font color="#E5E5E5">sub linear search overhead for come for</font>

48
00:02:07,649 --> 00:02:13,170
<font color="#CCCCCC">conjunctive queries but</font><font color="#E5E5E5"> it has linear</font>

49
00:02:11,099 --> 00:02:15,390
search overhead for for<font color="#CCCCCC"> designs of</font><font color="#E5E5E5"> queer</font>

50
00:02:13,170 --> 00:02:18,679
and<font color="#E5E5E5"> also for any</font><font color="#CCCCCC"> arbitrary boolean</font>

51
00:02:15,390 --> 00:02:21,239
queries but it's<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> non interactive</font>

52
00:02:18,680 --> 00:02:24,000
<font color="#E5E5E5">blinds here on the other hand that has</font>

53
00:02:21,240 --> 00:02:26,459
sub linear search overhead for for

54
00:02:24,000 --> 00:02:28,590
arbitrary boolean queries<font color="#E5E5E5"> but it's</font>

55
00:02:26,459 --> 00:02:30,870
interactive and<font color="#E5E5E5"> has logarithmic</font>

56
00:02:28,590 --> 00:02:33,860
multiplicative overhead<font color="#E5E5E5"> over the the</font>

57
00:02:30,870 --> 00:02:37,430
<font color="#E5E5E5">result set so both of these</font>

58
00:02:33,860 --> 00:02:40,230
constructions have<font color="#E5E5E5"> advantages and</font>

59
00:02:37,430 --> 00:02:43,580
disadvantages right and the goal of<font color="#E5E5E5"> this</font>

60
00:02:40,230 --> 00:02:45,840
work is<font color="#CCCCCC"> to take</font><font color="#E5E5E5"> the best of</font><font color="#CCCCCC"> both worlds</font>

61
00:02:43,580 --> 00:02:50,209
<font color="#CCCCCC">namely having something</font><font color="#E5E5E5"> which is sub</font>

62
00:02:45,840 --> 00:02:53,400
linear in the worst case<font color="#CCCCCC"> non</font><font color="#E5E5E5"> interactive</font>

63
00:02:50,209 --> 00:02:56,250
hopefully less leakage<font color="#E5E5E5"> that we achieve</font>

64
00:02:53,400 --> 00:02:59,580
also and been having optimal

65
00:02:56,250 --> 00:03:01,950
communication<font color="#CCCCCC"> cost</font><font color="#E5E5E5"> as well</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so</font>

66
00:02:59,580 --> 00:03:04,769
the contribution<font color="#CCCCCC"> of our work can</font><font color="#E5E5E5"> be</font>

67
00:03:01,950 --> 00:03:06,390
divided<font color="#CCCCCC"> in two classes one</font><font color="#E5E5E5"> class that we</font>

68
00:03:04,769 --> 00:03:07,920
<font color="#CCCCCC">call the black box</font><font color="#E5E5E5"> construction and</font>

69
00:03:06,390 --> 00:03:09,929
another one what we call<font color="#E5E5E5"> the concrete</font>

70
00:03:07,920 --> 00:03:12,268
constructions so<font color="#E5E5E5"> but black box</font>

71
00:03:09,930 --> 00:03:15,030
construction<font color="#E5E5E5"> we propose three different</font>

72
00:03:12,269 --> 00:03:19,650
ones<font color="#CCCCCC"> like the first is</font><font color="#E5E5E5"> ie X that has a</font>

73
00:03:15,030 --> 00:03:22,410
purely disjunctive single keyword<font color="#E5E5E5"> search</font>

74
00:03:19,650 --> 00:03:23,910
and<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> interesting part of it is it</font>

75
00:03:22,410 --> 00:03:27,480
can<font color="#CCCCCC"> be built from any single keyword</font>

76
00:03:23,910 --> 00:03:29,310
<font color="#CCCCCC">ASIS</font><font color="#E5E5E5"> we also propose</font><font color="#CCCCCC"> bi x for</font><font color="#E5E5E5"> boolean</font>

77
00:03:27,480 --> 00:03:32,670
<font color="#CCCCCC">singh a searchable symmetric encryption</font>

78
00:03:29,310 --> 00:03:35,579
<font color="#E5E5E5">that can be built</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> IX and then we</font>

79
00:03:32,670 --> 00:03:37,920
<font color="#E5E5E5">propose the dynamic disjunctive</font><font color="#CCCCCC"> SSE that</font>

80
00:03:35,579 --> 00:03:41,940
within<font color="#CCCCCC"> OD IX that can be built from any</font>

81
00:03:37,920 --> 00:03:44,850
dynamic search a single keyword<font color="#CCCCCC"> SSC</font><font color="#E5E5E5"> and</font>

82
00:03:41,940 --> 00:03:46,410
can be made also<font color="#E5E5E5"> for word CQ so the nice</font>

83
00:03:44,850 --> 00:03:48,959
thing<font color="#E5E5E5"> that I want to point out here</font>

84
00:03:46,410 --> 00:03:51,690
about<font color="#CCCCCC"> this black box way of thinking</font>

85
00:03:48,959 --> 00:03:54,150
about searchable symmetric encryption is

86
00:03:51,690 --> 00:03:55,500
that we<font color="#E5E5E5"> just depend on</font><font color="#CCCCCC"> some simple</font>

87
00:03:54,150 --> 00:03:58,410
<font color="#E5E5E5">building block like in this case</font><font color="#CCCCCC"> a</font>

88
00:03:55,500 --> 00:04:00,480
single<font color="#CCCCCC"> keyword</font><font color="#E5E5E5"> SSC and the security of</font>

89
00:03:58,410 --> 00:04:02,370
our<font color="#CCCCCC"> construction will always depend on</font>

90
00:04:00,480 --> 00:04:04,170
<font color="#E5E5E5">this building</font><font color="#CCCCCC"> block so any advances</font>

91
00:04:02,370 --> 00:04:08,160
<font color="#E5E5E5">hopefully in futures does make this</font>

92
00:04:04,170 --> 00:04:09,858
<font color="#E5E5E5">construction better will imply basically</font>

93
00:04:08,160 --> 00:04:13,079
that our construction<font color="#E5E5E5"> will enjoy these</font>

94
00:04:09,859 --> 00:04:15,200
advances as well so as I have<font color="#CCCCCC"> said we</font>

95
00:04:13,079 --> 00:04:18,720
have concrete construction of our<font color="#E5E5E5"> IX</font>

96
00:04:15,200 --> 00:04:21,209
scheme so we basically instantiate the

97
00:04:18,720 --> 00:04:23,070
<font color="#E5E5E5">single keyword</font><font color="#CCCCCC"> SSE construction by the</font>

98
00:04:21,209 --> 00:04:26,520
<font color="#E5E5E5">true belief construction by</font><font color="#CCCCCC"> coschedule</font>

99
00:04:23,070 --> 00:04:26,790
<font color="#CCCCCC">and we also instantiate VIX with the</font>

100
00:04:26,520 --> 00:04:27,900
same

101
00:04:26,790 --> 00:04:31,320
<font color="#CCCCCC">action because it</font><font color="#E5E5E5"> happens</font><font color="#CCCCCC"> that this</font>

102
00:04:27,900 --> 00:04:34,530
construction is<font color="#E5E5E5"> also dynamic single key</font>

103
00:04:31,320 --> 00:04:37,380
<font color="#E5E5E5">or the SSC and due to some storage</font>

104
00:04:34,530 --> 00:04:39,690
overhead<font color="#E5E5E5"> issues we have also introduced</font>

105
00:04:37,380 --> 00:04:42,780
<font color="#E5E5E5">a new single</font><font color="#CCCCCC"> keyword</font><font color="#E5E5E5"> construction which</font>

106
00:04:39,690 --> 00:04:44,550
<font color="#CCCCCC">is very compact that</font><font color="#E5E5E5"> we call which is</font>

107
00:04:42,780 --> 00:04:46,260
<font color="#E5E5E5">instance you see the basil onion you'd</font>

108
00:04:44,550 --> 00:04:47,760
see a<font color="#E5E5E5"> plain text data structure</font><font color="#CCCCCC"> that we</font>

109
00:04:46,260 --> 00:04:49,980
call<font color="#CCCCCC"> mass or Scofield there</font><font color="#E5E5E5"> you can</font>

110
00:04:47,760 --> 00:04:51,719
think of it as a new bloom filter data

111
00:04:49,980 --> 00:04:54,240
structure that<font color="#CCCCCC"> I'll briefly talk about</font>

112
00:04:51,720 --> 00:04:55,830
<font color="#E5E5E5">taejun in the stock it has linear search</font>

113
00:04:54,240 --> 00:04:57,510
complexity though but you<font color="#CCCCCC"> will see that</font>

114
00:04:55,830 --> 00:05:00,800
<font color="#CCCCCC">it</font><font color="#E5E5E5"> doesn't have</font><font color="#CCCCCC"> any impact</font><font color="#E5E5E5"> in the way</font>

115
00:04:57,510 --> 00:05:03,990
how we use it in our<font color="#CCCCCC"> IX construction</font><font color="#E5E5E5"> and</font>

116
00:05:00,800 --> 00:05:05,700
of course we can instantiate our<font color="#CCCCCC"> IEX</font>

117
00:05:03,990 --> 00:05:07,800
with<font color="#E5E5E5"> zmf as well because it's a single</font>

118
00:05:05,700 --> 00:05:11,340
<font color="#CCCCCC">keyword</font><font color="#E5E5E5"> SSE and it will provide a better</font>

119
00:05:07,800 --> 00:05:13,170
compactness<font color="#E5E5E5"> okay so before getting in</font>

120
00:05:11,340 --> 00:05:15,419
<font color="#CCCCCC">the details of</font><font color="#E5E5E5"> our IX I want to give you</font>

121
00:05:13,170 --> 00:05:17,190
some preliminaries<font color="#E5E5E5"> so we will heavily</font>

122
00:05:15,420 --> 00:05:20,010
use in<font color="#CCCCCC"> this talk two types of data</font>

123
00:05:17,190 --> 00:05:23,370
structures<font color="#E5E5E5"> dictionary is an</font><font color="#CCCCCC"> Moochie Maps</font>

124
00:05:20,010 --> 00:05:24,920
so this dictionary<font color="#E5E5E5"> is basically our data</font>

125
00:05:23,370 --> 00:05:27,360
structures<font color="#CCCCCC"> that</font><font color="#E5E5E5"> map's</font>

126
00:05:24,920 --> 00:05:30,300
labels to values you can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> here an</font>

127
00:05:27,360 --> 00:05:33,360
illustration<font color="#E5E5E5"> of this data</font><font color="#CCCCCC"> structure and</font>

128
00:05:30,300 --> 00:05:35,070
for<font color="#E5E5E5"> example if for the gate operation if</font>

129
00:05:33,360 --> 00:05:39,270
<font color="#CCCCCC">we want to retrieve</font><font color="#E5E5E5"> the key the value</font>

130
00:05:35,070 --> 00:05:41,880
<font color="#E5E5E5">associated to the</font><font color="#CCCCCC"> key word</font><font color="#E5E5E5"> w3 it will</font>

131
00:05:39,270 --> 00:05:44,880
return identifier<font color="#CCCCCC"> 2 as you can see so</font>

132
00:05:41,880 --> 00:05:47,310
much in maps are also data<font color="#E5E5E5"> structure</font>

133
00:05:44,880 --> 00:05:50,400
<font color="#E5E5E5">that map labels but two tuples</font><font color="#CCCCCC"> other</font>

134
00:05:47,310 --> 00:05:52,340
than values and you<font color="#E5E5E5"> can see here also an</font>

135
00:05:50,400 --> 00:05:54,810
illustration of the data structure and

136
00:05:52,340 --> 00:05:55,979
for the gate operation<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can for</font>

137
00:05:54,810 --> 00:05:57,270
<font color="#CCCCCC">example the Ridgid of the tuple</font>

138
00:05:55,980 --> 00:05:59,790
associated with the<font color="#E5E5E5"> keyword tree and</font>

139
00:05:57,270 --> 00:06:01,560
here in this example<font color="#E5E5E5"> each will get back</font>

140
00:05:59,790 --> 00:06:04,200
the<font color="#CCCCCC"> identifier through a</font><font color="#E5E5E5"> die notifier</font>

141
00:06:01,560 --> 00:06:06,540
for the building block<font color="#E5E5E5"> also in our</font>

142
00:06:04,200 --> 00:06:08,219
construction<font color="#E5E5E5"> we use the primitive of</font>

143
00:06:06,540 --> 00:06:09,740
structure the encryption<font color="#E5E5E5"> so</font><font color="#CCCCCC"> structure</font>

144
00:06:08,220 --> 00:06:11,910
<font color="#E5E5E5">encryption just to give you a</font><font color="#CCCCCC"> high-level</font>

145
00:06:09,740 --> 00:06:13,890
<font color="#E5E5E5">intuition about it it's a cryptographic</font>

146
00:06:11,910 --> 00:06:16,980
<font color="#CCCCCC">primitive</font><font color="#E5E5E5"> that encrypts any data</font>

147
00:06:13,890 --> 00:06:21,300
structure in such a way<font color="#CCCCCC"> that you can</font>

148
00:06:16,980 --> 00:06:23,400
create private privately later on so for

149
00:06:21,300 --> 00:06:25,080
this presentation<font color="#E5E5E5"> I'm taking just an</font>

150
00:06:23,400 --> 00:06:26,609
example a milky mob but it can be any

151
00:06:25,080 --> 00:06:29,969
data structure graphs

152
00:06:26,610 --> 00:06:32,460
<font color="#CCCCCC">dictionaries arrays it's its general and</font>

153
00:06:29,970 --> 00:06:34,680
it's so<font color="#CCCCCC"> the structure the encryption</font><font color="#E5E5E5"> is</font>

154
00:06:32,460 --> 00:06:36,450
composed of three algorithms<font color="#CCCCCC"> a set up</font>

155
00:06:34,680 --> 00:06:38,010
<font color="#E5E5E5">choking and</font><font color="#CCCCCC"> gates</font><font color="#E5E5E5"> so the set up six</font>

156
00:06:36,450 --> 00:06:39,810
<font color="#E5E5E5">dozen input the</font><font color="#CCCCCC"> security parameter and</font>

157
00:06:38,010 --> 00:06:40,650
the data structure and without put<font color="#E5E5E5"> in</font>

158
00:06:39,810 --> 00:06:43,530
<font color="#CCCCCC">encrypted data</font>

159
00:06:40,650 --> 00:06:46,020
and the key the the token algorithm will

160
00:06:43,530 --> 00:06:48,270
check key and a<font color="#E5E5E5"> keyword and will</font><font color="#CCCCCC"> output</font>

161
00:06:46,020 --> 00:06:50,698
a token<font color="#E5E5E5"> which is basically you can think</font>

162
00:06:48,270 --> 00:06:52,530
of<font color="#E5E5E5"> it as an encryption of</font><font color="#CCCCCC"> as any type of</font>

163
00:06:50,699 --> 00:06:55,530
<font color="#E5E5E5">an encryption of the of the key</font><font color="#CCCCCC"> word</font>

164
00:06:52,530 --> 00:06:58,198
<font color="#CCCCCC">that it's given as an input</font><font color="#E5E5E5"> and the kid</font>

165
00:06:55,530 --> 00:07:00,299
<font color="#E5E5E5">algorithm takes as an input token and</font>

166
00:06:58,199 --> 00:07:03,539
<font color="#E5E5E5">the encrypted data structure and it will</font>

167
00:07:00,300 --> 00:07:06,000
<font color="#CCCCCC">output the the answer that can</font><font color="#E5E5E5"> be</font>

168
00:07:03,539 --> 00:07:07,979
encrypted<font color="#E5E5E5"> or not</font><font color="#CCCCCC"> in this example</font><font color="#E5E5E5"> it's</font>

169
00:07:06,000 --> 00:07:09,080
encrypted<font color="#CCCCCC"> and we call its response</font>

170
00:07:07,979 --> 00:07:11,659
<font color="#CCCCCC">hiding</font>

171
00:07:09,080 --> 00:07:14,909
<font color="#CCCCCC">otherwise this code</font><font color="#E5E5E5"> response will be</font>

172
00:07:11,660 --> 00:07:17,190
okay<font color="#E5E5E5"> so and one analogy that I want you</font>

173
00:07:14,910 --> 00:07:19,440
to<font color="#CCCCCC"> keep in</font><font color="#E5E5E5"> mind through this talk is</font>

174
00:07:17,190 --> 00:07:21,750
that<font color="#CCCCCC"> an encrypted</font><font color="#E5E5E5"> milchem map basically</font>

175
00:07:19,440 --> 00:07:24,150
is a one way to view it is<font color="#E5E5E5"> an encrypted</font>

176
00:07:21,750 --> 00:07:25,500
inverted<font color="#E5E5E5"> in text right and then in</font>

177
00:07:24,150 --> 00:07:27,510
corrupted<font color="#E5E5E5"> the inverted index is</font>

178
00:07:25,500 --> 00:07:30,270
<font color="#E5E5E5">basically single keyword it's a see that</font>

179
00:07:27,510 --> 00:07:32,430
<font color="#E5E5E5">we have seen these recent</font><font color="#CCCCCC"> sixteen or</font>

180
00:07:30,270 --> 00:07:35,010
<font color="#CCCCCC">seventeen years</font><font color="#E5E5E5"> from the</font><font color="#CCCCCC"> work by song in</font>

181
00:07:32,430 --> 00:07:37,680
<font color="#CCCCCC">in</font><font color="#E5E5E5"> 2000 and so many construction have</font>

182
00:07:35,010 --> 00:07:39,630
<font color="#CCCCCC">been published so far</font><font color="#E5E5E5"> that achieve</font>

183
00:07:37,680 --> 00:07:42,150
different trade-off between security and

184
00:07:39,630 --> 00:07:43,770
<font color="#CCCCCC">efficiency and for this talk when we</font>

185
00:07:42,150 --> 00:07:46,440
will get<font color="#E5E5E5"> to the concrete in sponsee</font>

186
00:07:43,770 --> 00:07:49,460
ations<font color="#E5E5E5"> we will use in particular</font><font color="#CCCCCC"> the</font>

187
00:07:46,440 --> 00:07:53,490
construction by caches all in 2014

188
00:07:49,460 --> 00:07:55,049
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> so it's also important</font><font color="#CCCCCC"> to</font>

189
00:07:53,490 --> 00:07:57,180
understand a little bit what<font color="#E5E5E5"> security we</font>

190
00:07:55,050 --> 00:08:00,780
get from<font color="#E5E5E5"> structured encryption so it's</font>

191
00:07:57,180 --> 00:08:03,120
we have like a real experiment<font color="#E5E5E5"> where the</font>

192
00:08:00,780 --> 00:08:04,710
<font color="#CCCCCC">adversary can send to the Challenger</font><font color="#E5E5E5"> any</font>

193
00:08:03,120 --> 00:08:06,840
data structure<font color="#E5E5E5"> so here for example I</font>

194
00:08:04,710 --> 00:08:08,460
<font color="#E5E5E5">have taken a</font><font color="#CCCCCC"> Mickey map as an example</font>

195
00:08:06,840 --> 00:08:11,219
<font color="#CCCCCC">the Challenger</font><font color="#E5E5E5"> will encrypt it send</font><font color="#CCCCCC"> it</font>

196
00:08:08,460 --> 00:08:13,620
<font color="#CCCCCC">back to the adversary the adversary can</font>

197
00:08:11,220 --> 00:08:15,840
actually send as many<font color="#CCCCCC"> a polynomial</font>

198
00:08:13,620 --> 00:08:17,340
number<font color="#E5E5E5"> of of queries to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> to the</font>

199
00:08:15,840 --> 00:08:19,619
Challenger who will encrypt<font color="#E5E5E5"> and sent</font>

200
00:08:17,340 --> 00:08:22,590
back to choke and this can be also done

201
00:08:19,620 --> 00:08:25,590
<font color="#E5E5E5">adaptively so additively means just the</font>

202
00:08:22,590 --> 00:08:27,388
fact that the adversary will wait to<font color="#CCCCCC"> see</font>

203
00:08:25,590 --> 00:08:32,010
the token before<font color="#CCCCCC"> send in</font><font color="#E5E5E5"> the next</font><font color="#CCCCCC"> joke</font>

204
00:08:27,389 --> 00:08:33,839
<font color="#E5E5E5">and the ideal experiment is the advert</font>

205
00:08:32,010 --> 00:08:35,549
isn't always the multi map but here

206
00:08:33,839 --> 00:08:37,800
there is<font color="#CCCCCC"> a simulator who will get just</font>

207
00:08:35,549 --> 00:08:41,069
the<font color="#E5E5E5"> set</font><font color="#CCCCCC"> up leakage of the</font><font color="#E5E5E5"> small team and</font>

208
00:08:37,799 --> 00:08:43,529
just based<font color="#E5E5E5"> on the set up leakage the</font>

209
00:08:41,070 --> 00:08:45,630
simulator will simulate<font color="#CCCCCC"> the</font><font color="#E5E5E5"> encrypted</font>

210
00:08:43,529 --> 00:08:48,089
<font color="#CCCCCC">multi-mode just</font><font color="#E5E5E5"> build on this LS</font><font color="#CCCCCC"> all</font>

211
00:08:45,630 --> 00:08:50,670
<font color="#E5E5E5">right and similarly for the query phase</font>

212
00:08:48,089 --> 00:08:52,600
<font color="#CCCCCC">the</font><font color="#E5E5E5"> simulator will get just the query</font>

213
00:08:50,670 --> 00:08:55,180
leakage of the

214
00:08:52,600 --> 00:08:56,920
of the of the keyword<font color="#CCCCCC"> that the adversary</font>

215
00:08:55,180 --> 00:08:59,229
<font color="#CCCCCC">wants to search for and will simulate</font>

216
00:08:56,920 --> 00:09:00,849
the<font color="#CCCCCC"> Chokin</font><font color="#E5E5E5"> that will be sent later on</font>

217
00:08:59,230 --> 00:09:02,350
the adversary we would say that<font color="#CCCCCC"> our</font>

218
00:09:00,850 --> 00:09:05,770
security<font color="#E5E5E5"> encryption is secure with</font>

219
00:09:02,350 --> 00:09:08,710
respect to<font color="#CCCCCC"> this to this</font><font color="#E5E5E5"> setup and query</font>

220
00:09:05,770 --> 00:09:11,230
leakage<font color="#CCCCCC"> if the real experiment and the</font>

221
00:09:08,710 --> 00:09:15,040
idea<font color="#CCCCCC"> x-men are in the same</font><font color="#E5E5E5"> ocean for any</font>

222
00:09:11,230 --> 00:09:17,920
people<font color="#E5E5E5"> all right</font><font color="#CCCCCC"> so so now we are ready</font>

223
00:09:15,040 --> 00:09:19,599
<font color="#E5E5E5">to go to the technical details but</font>

224
00:09:17,920 --> 00:09:21,790
before I<font color="#E5E5E5"> want to give you also a high</font>

225
00:09:19,600 --> 00:09:24,700
level<font color="#E5E5E5"> intuition that will underline our</font>

226
00:09:21,790 --> 00:09:26,380
our thought process in constructing our

227
00:09:24,700 --> 00:09:28,150
construction<font color="#E5E5E5"> so I will give you an</font>

228
00:09:26,380 --> 00:09:31,060
overview so first of all<font color="#CCCCCC"> I want</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> to</font>

229
00:09:28,150 --> 00:09:33,069
think<font color="#E5E5E5"> of a multi map as a collection of</font>

230
00:09:31,060 --> 00:09:36,069
sets<font color="#E5E5E5"> that you</font><font color="#CCCCCC"> can view a multi map as</font>

231
00:09:33,070 --> 00:09:38,530
collection<font color="#CCCCCC"> offset</font><font color="#E5E5E5"> and if you can see the</font>

232
00:09:36,070 --> 00:09:41,020
multi map like that<font color="#CCCCCC"> a disjunctive</font>

233
00:09:38,530 --> 00:09:42,730
keyword queries can<font color="#E5E5E5"> be viewed also as</font>

234
00:09:41,020 --> 00:09:46,390
the Union basically<font color="#E5E5E5"> of these sets</font>

235
00:09:42,730 --> 00:09:48,070
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> so one can may think of a</font><font color="#CCCCCC"> simple</font>

236
00:09:46,390 --> 00:09:50,470
<font color="#CCCCCC">solution basically</font><font color="#E5E5E5"> using a single</font>

237
00:09:48,070 --> 00:09:52,840
keyword<font color="#CCCCCC"> SSE</font><font color="#E5E5E5"> and doing</font><font color="#CCCCCC"> just a naive</font>

238
00:09:50,470 --> 00:09:53,980
simple<font color="#CCCCCC"> union between all the items</font><font color="#E5E5E5"> but</font>

239
00:09:52,840 --> 00:09:55,570
<font color="#CCCCCC">the problem of</font><font color="#E5E5E5"> that we will get a</font>

240
00:09:53,980 --> 00:09:57,220
multiplicity basically we will<font color="#E5E5E5"> have</font>

241
00:09:55,570 --> 00:10:01,000
<font color="#E5E5E5">redundant elements</font><font color="#CCCCCC"> sent back to the</font>

242
00:09:57,220 --> 00:10:02,890
<font color="#CCCCCC">client which basically implies</font><font color="#E5E5E5"> that we</font>

243
00:10:01,000 --> 00:10:04,780
will have suboptimal communication and

244
00:10:02,890 --> 00:10:08,949
the leakage is quite<font color="#E5E5E5"> heavy in this case</font>

245
00:10:04,780 --> 00:10:10,420
<font color="#CCCCCC">all right</font><font color="#E5E5E5"> all right</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> so we were</font>

246
00:10:08,950 --> 00:10:13,060
<font color="#CCCCCC">thinking how to</font><font color="#E5E5E5"> avoid that and basically</font>

247
00:10:10,420 --> 00:10:15,030
<font color="#E5E5E5">this leads asked you to introduce or to</font>

248
00:10:13,060 --> 00:10:17,829
use the inclusion exclusion<font color="#CCCCCC"> principle</font>

249
00:10:15,030 --> 00:10:21,579
based Union which remove basically<font color="#CCCCCC"> this</font>

250
00:10:17,830 --> 00:10:23,880
redundancy<font color="#CCCCCC"> and and it will</font><font color="#E5E5E5"> help us also</font>

251
00:10:21,580 --> 00:10:27,430
<font color="#E5E5E5">to have like optimal communication</font><font color="#CCCCCC"> and</font>

252
00:10:23,880 --> 00:10:30,610
<font color="#CCCCCC">less leakage so we</font><font color="#E5E5E5"> introduced a plain</font>

253
00:10:27,430 --> 00:10:32,709
<font color="#E5E5E5">text</font><font color="#CCCCCC"> set set</font><font color="#E5E5E5"> structure that makes using</font>

254
00:10:30,610 --> 00:10:36,250
<font color="#E5E5E5">this inclusion exclusion principle</font>

255
00:10:32,710 --> 00:10:39,400
<font color="#E5E5E5">easier and then we will show how to</font>

256
00:10:36,250 --> 00:10:44,830
generate the<font color="#E5E5E5"> encrypted structure from</font>

257
00:10:39,400 --> 00:10:46,980
<font color="#E5E5E5">that</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so now that I have</font><font color="#CCCCCC"> given</font>

258
00:10:44,830 --> 00:10:49,420
<font color="#E5E5E5">you a number view I will</font><font color="#CCCCCC"> give you an</font>

259
00:10:46,980 --> 00:10:51,130
illustrative overview so you<font color="#E5E5E5"> can keep in</font>

260
00:10:49,420 --> 00:10:53,229
mind all these step of our<font color="#CCCCCC"> thought</font>

261
00:10:51,130 --> 00:10:55,150
process so this is the<font color="#E5E5E5"> multi map and</font>

262
00:10:53,230 --> 00:10:57,730
basically you<font color="#CCCCCC"> can view it as sets so</font>

263
00:10:55,150 --> 00:11:01,329
this set is<font color="#E5E5E5"> basically composed of the</font>

264
00:10:57,730 --> 00:11:02,920
tuples of<font color="#E5E5E5"> the tuple associated</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

265
00:11:01,330 --> 00:11:04,810
<font color="#CCCCCC">keyword</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> alright and here is</font>

266
00:11:02,920 --> 00:11:06,400
<font color="#CCCCCC">identifiers one three four</font><font color="#E5E5E5"> so this is</font>

267
00:11:04,810 --> 00:11:10,000
our first set for keyword<font color="#E5E5E5"> one we can do</font>

268
00:11:06,400 --> 00:11:11,980
the same for keyword<font color="#CCCCCC"> - and the same for</font>

269
00:11:10,000 --> 00:11:14,620
keyword<font color="#E5E5E5"> - okay so we have our set</font>

270
00:11:11,980 --> 00:11:16,690
representation here<font color="#E5E5E5"> so the second step</font>

271
00:11:14,620 --> 00:11:18,780
<font color="#E5E5E5">as I have said we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> our disjunctive</font>

272
00:11:16,690 --> 00:11:22,000
query composed<font color="#E5E5E5"> here of three</font><font color="#CCCCCC"> keywords</font>

273
00:11:18,780 --> 00:11:27,100
<font color="#CCCCCC">one two and</font><font color="#E5E5E5"> three and you can view it as</font>

274
00:11:22,000 --> 00:11:30,430
<font color="#CCCCCC">the disjunction</font><font color="#E5E5E5"> of this this these sets</font>

275
00:11:27,100 --> 00:11:32,080
<font color="#E5E5E5">so here one point to note is look we</font>

276
00:11:30,430 --> 00:11:34,599
have some<font color="#E5E5E5"> redundancy here</font><font color="#CCCCCC"> so the</font>

277
00:11:32,080 --> 00:11:37,810
identifier here<font color="#E5E5E5"> in identifier or</font><font color="#CCCCCC"> four</font>

278
00:11:34,600 --> 00:11:38,980
<font color="#E5E5E5">are redundant and if we use our naive</font>

279
00:11:37,810 --> 00:11:40,750
construction we will get<font color="#CCCCCC"> these</font><font color="#E5E5E5"> two</font>

280
00:11:38,980 --> 00:11:42,940
<font color="#E5E5E5">identifiers back to the client and this</font>

281
00:11:40,750 --> 00:11:45,160
means that<font color="#E5E5E5"> we don't have optimal</font>

282
00:11:42,940 --> 00:11:46,780
<font color="#CCCCCC">communication for our source of</font>

283
00:11:45,160 --> 00:11:48,610
<font color="#E5E5E5">alternative source of all encryption</font>

284
00:11:46,780 --> 00:11:51,520
scheme so how can we avoid<font color="#E5E5E5"> this</font>

285
00:11:48,610 --> 00:11:55,930
redundancy<font color="#CCCCCC"> so I'm going to present it</font>

286
00:11:51,520 --> 00:11:59,319
here<font color="#E5E5E5"> so this is our our our Union and we</font>

287
00:11:55,930 --> 00:12:02,739
will take our<font color="#CCCCCC"> first set and we will</font>

288
00:11:59,320 --> 00:12:04,810
remove the intersection between the

289
00:12:02,740 --> 00:12:08,170
first and second set<font color="#E5E5E5"> and the first add</font>

290
00:12:04,810 --> 00:12:10,750
third set<font color="#E5E5E5"> so basically we</font><font color="#CCCCCC"> will have only</font>

291
00:12:08,170 --> 00:12:12,339
the<font color="#E5E5E5"> identifier one here then we will</font>

292
00:12:10,750 --> 00:12:15,790
<font color="#E5E5E5">move to the second set and for the</font>

293
00:12:12,340 --> 00:12:18,730
second set we<font color="#E5E5E5"> will just get</font><font color="#CCCCCC"> rid of</font><font color="#E5E5E5"> the</font>

294
00:12:15,790 --> 00:12:21,069
intersection with the church set and for

295
00:12:18,730 --> 00:12:22,990
the third set we don't do anything<font color="#CCCCCC"> all</font>

296
00:12:21,070 --> 00:12:26,680
<font color="#E5E5E5">right and you can note here</font><font color="#CCCCCC"> that we have</font>

297
00:12:22,990 --> 00:12:27,790
removed all redundancy<font color="#E5E5E5"> and it will give</font>

298
00:12:26,680 --> 00:12:29,500
<font color="#E5E5E5">us what we want</font><font color="#CCCCCC"> optimal communication</font>

299
00:12:27,790 --> 00:12:31,300
<font color="#E5E5E5">and this is just an example for three</font>

300
00:12:29,500 --> 00:12:34,060
set and you can<font color="#E5E5E5"> generalize</font><font color="#CCCCCC"> it with</font>

301
00:12:31,300 --> 00:12:38,050
<font color="#E5E5E5">inclusion exclusion principle</font><font color="#CCCCCC"> to too</font>

302
00:12:34,060 --> 00:12:40,810
<font color="#E5E5E5">many sets okay so now we want to build</font>

303
00:12:38,050 --> 00:12:43,660
our our set structure<font color="#E5E5E5"> with inclusion</font>

304
00:12:40,810 --> 00:12:46,089
exclusion<font color="#CCCCCC"> principle</font><font color="#E5E5E5"> and basically we</font>

305
00:12:43,660 --> 00:12:47,740
will<font color="#E5E5E5"> perform some pre-processing so the</font>

306
00:12:46,090 --> 00:12:50,110
<font color="#CCCCCC">pre-processing basically does the</font>

307
00:12:47,740 --> 00:12:52,720
<font color="#E5E5E5">following</font><font color="#CCCCCC"> it will take each of the sets</font>

308
00:12:50,110 --> 00:12:56,710
<font color="#E5E5E5">that we</font><font color="#CCCCCC"> have like here</font><font color="#E5E5E5"> 1 2</font><font color="#CCCCCC"> 3 and we will</font>

309
00:12:52,720 --> 00:13:00,760
pre compute the intersection between the

310
00:12:56,710 --> 00:13:02,950
<font color="#E5E5E5">this set so for the first set set</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> this</font>

311
00:13:00,760 --> 00:13:04,630
is basically the pre<font color="#E5E5E5"> computation of the</font>

312
00:13:02,950 --> 00:13:08,190
intersection between set you<font color="#CCCCCC"> and cetera</font>

313
00:13:04,630 --> 00:13:11,230
we do the same also for<font color="#CCCCCC"> the other sets</font>

314
00:13:08,190 --> 00:13:13,210
<font color="#CCCCCC">ok so now we after doing</font><font color="#E5E5E5"> this</font>

315
00:13:11,230 --> 00:13:15,250
<font color="#E5E5E5">pre-processing we will roll</font><font color="#CCCCCC"> back to our</font>

316
00:13:13,210 --> 00:13:17,290
first present representation of the

317
00:13:15,250 --> 00:13:19,270
<font color="#CCCCCC">Moochie map where the these sets are</font>

318
00:13:17,290 --> 00:13:19,930
basically<font color="#E5E5E5"> a multi map so in this talk we</font>

319
00:13:19,270 --> 00:13:22,540
will call it

320
00:13:19,930 --> 00:13:24,910
<font color="#CCCCCC">tima because</font><font color="#E5E5E5"> each will contain the</font>

321
00:13:22,540 --> 00:13:26,680
original<font color="#E5E5E5"> view of our our milky map and</font>

322
00:13:24,910 --> 00:13:29,980
then<font color="#E5E5E5"> we will add the local</font><font color="#CCCCCC"> milky maps</font>

323
00:13:26,680 --> 00:13:34,079
that the the pre-process it says that

324
00:13:29,980 --> 00:13:36,310
they<font color="#CCCCCC"> are</font><font color="#E5E5E5"> basically also</font><font color="#CCCCCC"> multi maps with</font>

325
00:13:34,080 --> 00:13:38,500
with labels that they are equal<font color="#E5E5E5"> to the</font>

326
00:13:36,310 --> 00:13:41,020
intersection<font color="#CCCCCC"> as I have explained between</font>

327
00:13:38,500 --> 00:13:43,450
<font color="#CCCCCC">keyword</font><font color="#E5E5E5"> 1 and keyword with you which is</font>

328
00:13:41,020 --> 00:13:44,920
<font color="#CCCCCC">that one and set two and this</font><font color="#E5E5E5"> is also</font>

329
00:13:43,450 --> 00:13:46,540
can<font color="#E5E5E5"> be viewed as a multi map and we will</font>

330
00:13:44,920 --> 00:13:49,029
call<font color="#E5E5E5"> it local Milky</font><font color="#CCCCCC"> Maps</font><font color="#E5E5E5"> because they</font>

331
00:13:46,540 --> 00:13:51,730
are local and<font color="#E5E5E5"> they are</font><font color="#CCCCCC"> pre-processed</font><font color="#E5E5E5"> so</font>

332
00:13:49,029 --> 00:13:53,560
this is a one way to<font color="#CCCCCC"> think about</font><font color="#E5E5E5"> plain</font>

333
00:13:51,730 --> 00:13:56,410
<font color="#E5E5E5">text set structure</font><font color="#CCCCCC"> so how can we</font><font color="#E5E5E5"> use</font>

334
00:13:53,560 --> 00:14:01,380
this to to encrypt our our<font color="#CCCCCC"> searchable</font>

335
00:13:56,410 --> 00:14:02,890
symmetric encryption so that we call IEX

336
00:14:01,380 --> 00:14:04,990
for short

337
00:14:02,890 --> 00:14:07,060
so as<font color="#E5E5E5"> in structure the encryption is</font>

338
00:14:04,990 --> 00:14:09,760
composed of the<font color="#CCCCCC"> set up of course the</font>

339
00:14:07,060 --> 00:14:12,339
Chokin and and gate<font color="#CCCCCC"> algorithms to set up</font>

340
00:14:09,760 --> 00:14:14,830
algorithm<font color="#CCCCCC"> ticks as an input</font><font color="#E5E5E5"> security</font>

341
00:14:12,339 --> 00:14:17,350
parameter and the<font color="#E5E5E5"> multi map and it will</font>

342
00:14:14,830 --> 00:14:20,800
<font color="#CCCCCC">output basically two</font><font color="#E5E5E5"> encrypted</font>

343
00:14:17,350 --> 00:14:23,830
<font color="#CCCCCC">Meucci map for the global and the local</font>

344
00:14:20,800 --> 00:14:26,109
<font color="#E5E5E5">multi</font><font color="#CCCCCC"> maps here so you can understand</font>

345
00:14:23,830 --> 00:14:27,520
that<font color="#E5E5E5"> there was like a subroutine here of</font>

346
00:14:26,110 --> 00:14:29,290
the<font color="#E5E5E5"> set</font><font color="#CCCCCC"> of algorithm</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> wrong this</font>

347
00:14:27,520 --> 00:14:32,770
<font color="#E5E5E5">pre-processing that I have discussed in</font>

348
00:14:29,290 --> 00:14:34,750
the<font color="#CCCCCC"> previous slide</font><font color="#E5E5E5"> and then encrypt them</font>

349
00:14:32,770 --> 00:14:36,490
using like a single<font color="#E5E5E5"> keyword SSE you</font>

350
00:14:34,750 --> 00:14:38,320
remember the the analogy<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I have</font>

351
00:14:36,490 --> 00:14:39,730
<font color="#CCCCCC">given</font><font color="#E5E5E5"> you at the very beginning</font><font color="#CCCCCC"> where an</font>

352
00:14:38,320 --> 00:14:41,980
encrypted multi map is equivalent<font color="#E5E5E5"> to</font>

353
00:14:39,730 --> 00:14:43,480
single keyword<font color="#CCCCCC"> ASIS right but here there</font>

354
00:14:41,980 --> 00:14:44,920
<font color="#E5E5E5">is a problem we</font><font color="#CCCCCC"> don't want to give the</font>

355
00:14:43,480 --> 00:14:47,050
<font color="#CCCCCC">adversary some additional leakage that</font>

356
00:14:44,920 --> 00:14:49,329
<font color="#E5E5E5">we can easily get rid of so here the</font>

357
00:14:47,050 --> 00:14:50,979
adversity can know the save the local

358
00:14:49,330 --> 00:14:55,720
minima which is basically the size<font color="#E5E5E5"> of</font>

359
00:14:50,980 --> 00:14:57,570
the intersections<font color="#E5E5E5"> okay so it's</font><font color="#CCCCCC"> easily we</font>

360
00:14:55,720 --> 00:14:59,920
can<font color="#CCCCCC"> easily handle that with just</font>

361
00:14:57,570 --> 00:15:02,620
encrypting the local<font color="#E5E5E5"> mean team up using</font>

362
00:14:59,920 --> 00:15:05,140
<font color="#E5E5E5">an encrypted dictionary and this will</font>

363
00:15:02,620 --> 00:15:07,660
just leak as I'm going to detail later

364
00:15:05,140 --> 00:15:10,959
on<font color="#E5E5E5"> just this the total size of all local</font>

365
00:15:07,660 --> 00:15:13,060
<font color="#E5E5E5">machine knows as a set of leakage and of</font>

366
00:15:10,959 --> 00:15:15,880
course we have also the key as as the

367
00:15:13,060 --> 00:15:18,369
output<font color="#CCCCCC"> of our set up algorithm so the</font>

368
00:15:15,880 --> 00:15:20,470
<font color="#CCCCCC">token algorithm of our IX construction</font>

369
00:15:18,370 --> 00:15:22,480
takes a key<font color="#CCCCCC"> and here for sake of clarity</font>

370
00:15:20,470 --> 00:15:24,070
<font color="#CCCCCC">I have</font><font color="#E5E5E5"> taken example</font><font color="#CCCCCC"> he</font><font color="#E5E5E5"> is much simpler</font>

371
00:15:22,480 --> 00:15:25,990
which is just composed of a dysfunction

372
00:15:24,070 --> 00:15:29,470
of<font color="#E5E5E5"> two keywords keyword</font><font color="#CCCCCC"> one and keyword</font>

373
00:15:25,990 --> 00:15:32,050
<font color="#E5E5E5">three and it will work as</font><font color="#CCCCCC"> follows it</font>

374
00:15:29,470 --> 00:15:32,800
will output a token composed of four sub

375
00:15:32,050 --> 00:15:34,870
tokens

376
00:15:32,800 --> 00:15:37,149
choose<font color="#E5E5E5"> to sub chickens for the global</font>

377
00:15:34,870 --> 00:15:40,450
which is basically for<font color="#CCCCCC"> keyword 1 and</font><font color="#E5E5E5"> q3</font>

378
00:15:37,149 --> 00:15:42,279
<font color="#E5E5E5">so we will see this this chicken will</font>

379
00:15:40,450 --> 00:15:44,800
mix it will make more sense<font color="#CCCCCC"> when we will</font>

380
00:15:42,279 --> 00:15:48,130
go through<font color="#E5E5E5"> the gates algorithm and will</font>

381
00:15:44,800 --> 00:15:50,439
output a dictionary sub<font color="#E5E5E5"> chicken and a</font>

382
00:15:48,130 --> 00:15:52,260
local sub chicken<font color="#CCCCCC"> so and all of them are</font>

383
00:15:50,440 --> 00:15:54,790
encrypted<font color="#E5E5E5"> so the adversity cannot say</font>

384
00:15:52,260 --> 00:15:57,610
this server<font color="#CCCCCC"> cannot see anything</font><font color="#E5E5E5"> out of</font>

385
00:15:54,790 --> 00:16:01,420
it so far<font color="#E5E5E5"> so the gate algorithm where</font>

386
00:15:57,610 --> 00:16:05,140
the<font color="#E5E5E5"> server wants to send the output</font><font color="#CCCCCC"> to</font>

387
00:16:01,420 --> 00:16:06,729
<font color="#E5E5E5">the client it will take the token and</font>

388
00:16:05,140 --> 00:16:10,360
the encrypted structure that we have

389
00:16:06,730 --> 00:16:13,029
outputted<font color="#CCCCCC"> from our set of algorithm and</font>

390
00:16:10,360 --> 00:16:14,800
it will work as follows<font color="#E5E5E5"> first it will</font>

391
00:16:13,029 --> 00:16:17,019
just call the gate algorithm<font color="#E5E5E5"> of a single</font>

392
00:16:14,800 --> 00:16:19,959
keyword<font color="#CCCCCC"> SEC and it will take the</font><font color="#E5E5E5"> global</font>

393
00:16:17,019 --> 00:16:22,060
sub token and the encrypted<font color="#CCCCCC"> mule tema</font>

394
00:16:19,959 --> 00:16:23,649
and it will<font color="#CCCCCC"> output the</font><font color="#E5E5E5"> result which is</font>

395
00:16:22,060 --> 00:16:25,510
basically a type<font color="#CCCCCC"> of identifier they are</font>

396
00:16:23,649 --> 00:16:27,339
encrypted<font color="#E5E5E5"> and if you can see this</font>

397
00:16:25,510 --> 00:16:30,040
encryption<font color="#E5E5E5"> is</font><font color="#CCCCCC"> dependant</font><font color="#E5E5E5"> of the keywords</font>

398
00:16:27,339 --> 00:16:31,990
<font color="#E5E5E5">so here for</font><font color="#CCCCCC"> example when we were running</font>

399
00:16:30,040 --> 00:16:34,630
near the gate algorithm on a different

400
00:16:31,990 --> 00:16:39,370
<font color="#E5E5E5">keyword these tags will</font><font color="#CCCCCC"> be different</font>

401
00:16:34,630 --> 00:16:44,910
because<font color="#E5E5E5"> they have</font><font color="#CCCCCC"> different keywords</font><font color="#E5E5E5"> as</font>

402
00:16:39,370 --> 00:16:48,450
their input okay so next for the look

403
00:16:44,910 --> 00:16:51,100
for the search algorithm we<font color="#E5E5E5"> will have</font>

404
00:16:48,450 --> 00:16:52,660
the gate algorithm will take the

405
00:16:51,100 --> 00:16:54,310
subsequent for the dictionary and<font color="#E5E5E5"> the</font>

406
00:16:52,660 --> 00:16:56,560
encrypted dictionary that we had and

407
00:16:54,310 --> 00:16:58,359
will output<font color="#E5E5E5"> just a local</font><font color="#CCCCCC"> mill</font><font color="#E5E5E5"> team up</font>

408
00:16:56,560 --> 00:17:00,130
that's much the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> subsequent that we</font>

409
00:16:58,360 --> 00:17:02,440
want basically this algorithm will<font color="#CCCCCC"> sub</font>

410
00:17:00,130 --> 00:17:05,380
extract the<font color="#CCCCCC"> local movie</font><font color="#E5E5E5"> map that we need</font>

411
00:17:02,440 --> 00:17:08,770
and then the local sub chicken that we

412
00:17:05,380 --> 00:17:11,350
we<font color="#CCCCCC"> want</font><font color="#E5E5E5"> it just</font><font color="#CCCCCC"> will be</font><font color="#E5E5E5"> used with the</font>

413
00:17:08,770 --> 00:17:13,329
encrypted<font color="#E5E5E5"> local mini-map to output the</font>

414
00:17:11,349 --> 00:17:15,490
tag<font color="#CCCCCC"> that we want to</font><font color="#E5E5E5"> remove from this</font>

415
00:17:13,329 --> 00:17:17,859
<font color="#E5E5E5">intersection so basically remember these</font>

416
00:17:15,490 --> 00:17:19,750
are<font color="#E5E5E5"> the results and one thing that</font><font color="#CCCCCC"> I</font>

417
00:17:17,859 --> 00:17:21,668
want<font color="#E5E5E5"> to emphasize here is those are</font>

418
00:17:19,750 --> 00:17:24,189
encrypted so in terms of leakage<font color="#E5E5E5"> even if</font>

419
00:17:21,669 --> 00:17:26,949
here<font color="#E5E5E5"> ID</font><font color="#CCCCCC"> 4 is the same here those are</font>

420
00:17:24,189 --> 00:17:31,390
encrypted differently so<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the server</font>

421
00:17:26,949 --> 00:17:34,720
<font color="#E5E5E5">software doesn't know actually that they</font>

422
00:17:31,390 --> 00:17:36,700
are the same<font color="#E5E5E5"> but this one is encrypted</font>

423
00:17:34,720 --> 00:17:38,200
<font color="#E5E5E5">with one of these it will be equal to</font>

424
00:17:36,700 --> 00:17:40,030
<font color="#E5E5E5">one of</font><font color="#CCCCCC"> these which is basically the</font>

425
00:17:38,200 --> 00:17:41,500
<font color="#E5E5E5">first one because this is</font><font color="#CCCCCC"> the first</font><font color="#E5E5E5"> one</font>

426
00:17:40,030 --> 00:17:42,730
<font color="#E5E5E5">that we have processed and we will</font>

427
00:17:41,500 --> 00:17:45,370
remove it<font color="#E5E5E5"> the server we know and we will</font>

428
00:17:42,730 --> 00:17:46,240
remove it<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we'll send just the result</font>

429
00:17:45,370 --> 00:17:51,159
to the

430
00:17:46,240 --> 00:17:53,350
<font color="#CCCCCC">to</font><font color="#E5E5E5"> decline</font><font color="#CCCCCC"> so here you can note that we</font>

431
00:17:51,160 --> 00:17:55,120
<font color="#E5E5E5">don't have any redundancy so this is</font>

432
00:17:53,350 --> 00:18:00,010
<font color="#E5E5E5">option and this is what we want to</font>

433
00:17:55,120 --> 00:18:01,360
achieve<font color="#E5E5E5"> all right so it's very important</font>

434
00:18:00,010 --> 00:18:02,710
<font color="#E5E5E5">to understand the security</font><font color="#CCCCCC"> and</font>

435
00:18:01,360 --> 00:18:04,030
efficiency<font color="#E5E5E5"> of our construction and</font>

436
00:18:02,710 --> 00:18:05,710
security in structure the encryption<font color="#E5E5E5"> is</font>

437
00:18:04,030 --> 00:18:08,800
to analyze and<font color="#E5E5E5"> to describe the leakage</font>

438
00:18:05,710 --> 00:18:10,960
and the leakage is in our construction

439
00:18:08,800 --> 00:18:14,230
<font color="#CCCCCC">viewed in a</font><font color="#E5E5E5"> black box we analyze in a</font>

440
00:18:10,960 --> 00:18:16,720
black box<font color="#E5E5E5"> fashion one thing that I want</font>

441
00:18:14,230 --> 00:18:18,490
to<font color="#E5E5E5"> say about that is that it gives us</font>

442
00:18:16,720 --> 00:18:21,040
some flexibility<font color="#E5E5E5"> in future because we</font>

443
00:18:18,490 --> 00:18:24,610
will use special<font color="#E5E5E5"> instantiation later on</font>

444
00:18:21,040 --> 00:18:26,770
<font color="#E5E5E5">and this black box view will help us to</font>

445
00:18:24,610 --> 00:18:28,090
analyze better the leakage of<font color="#CCCCCC"> ix</font>

446
00:18:26,770 --> 00:18:31,990
whenever there is a new<font color="#E5E5E5"> construction</font>

447
00:18:28,090 --> 00:18:34,000
<font color="#E5E5E5">that comes in future so the black box</font>

448
00:18:31,990 --> 00:18:36,280
<font color="#E5E5E5">set</font><font color="#CCCCCC"> up leakage of IX is composed of the</font>

449
00:18:34,000 --> 00:18:37,870
set<font color="#E5E5E5"> of leakage of both</font><font color="#CCCCCC"> EMM and</font><font color="#E5E5E5"> EDX</font><font color="#CCCCCC"> the</font>

450
00:18:36,280 --> 00:18:39,790
query leakage is the query leakage<font color="#E5E5E5"> of</font>

451
00:18:37,870 --> 00:18:41,409
<font color="#CCCCCC">the global EMM and the edx because those</font>

452
00:18:39,790 --> 00:18:46,960
are the<font color="#E5E5E5"> only one that</font><font color="#CCCCCC"> we have accessed</font>

453
00:18:41,410 --> 00:18:48,670
so what this black box<font color="#E5E5E5"> being in reality</font>

454
00:18:46,960 --> 00:18:50,830
<font color="#E5E5E5">so concretely if you want to instantiate</font>

455
00:18:48,670 --> 00:18:53,380
the EMM with some<font color="#CCCCCC"> standard like cache</font>

456
00:18:50,830 --> 00:18:55,120
it's all construction<font color="#E5E5E5"> concretely the set</font>

457
00:18:53,380 --> 00:18:58,000
<font color="#CCCCCC">up leakage will be for example the size</font>

458
00:18:55,120 --> 00:19:00,309
of the<font color="#CCCCCC"> global</font><font color="#E5E5E5"> AMM</font><font color="#CCCCCC"> multimap and/or the</font>

459
00:18:58,000 --> 00:19:02,260
<font color="#E5E5E5">total size and the total</font><font color="#CCCCCC"> soil</font><font color="#E5E5E5"> and the</font>

460
00:19:00,309 --> 00:19:03,850
total size of<font color="#E5E5E5"> the local immunity</font><font color="#CCCCCC"> maps</font><font color="#E5E5E5"> so</font>

461
00:19:02,260 --> 00:19:05,530
the concrete query leakage will be the

462
00:19:03,850 --> 00:19:08,290
search<font color="#E5E5E5"> and the access pattern of the</font>

463
00:19:05,530 --> 00:19:10,210
global<font color="#CCCCCC"> Meucci map the local MIDI map as</font>

464
00:19:08,290 --> 00:19:15,610
well and the tags that<font color="#CCCCCC"> they have have</font>

465
00:19:10,210 --> 00:19:17,470
been been shown in the previous slide<font color="#CCCCCC"> so</font>

466
00:19:15,610 --> 00:19:18,879
and and<font color="#E5E5E5"> finally the search and</font><font color="#CCCCCC"> access</font>

467
00:19:17,470 --> 00:19:22,660
pattern for the dictionary<font color="#CCCCCC"> because we</font>

468
00:19:18,880 --> 00:19:24,550
have accesses as well right<font color="#CCCCCC"> and one</font>

469
00:19:22,660 --> 00:19:26,920
thing that<font color="#E5E5E5"> I want to do to stress here</font>

470
00:19:24,550 --> 00:19:30,940
like compared to<font color="#CCCCCC"> oxc</font><font color="#E5E5E5"> for example our</font>

471
00:19:26,920 --> 00:19:34,090
leakages is is we<font color="#CCCCCC"> have listed</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> than</font>

472
00:19:30,940 --> 00:19:35,320
<font color="#CCCCCC">August so in terms of asymptotic we have</font>

473
00:19:34,090 --> 00:19:37,990
a communication<font color="#E5E5E5"> complexity which is</font>

474
00:19:35,320 --> 00:19:39,220
optimal in terms of<font color="#E5E5E5"> worst case in terms</font>

475
00:19:37,990 --> 00:19:41,170
of search complexity we have a<font color="#E5E5E5"> worse</font>

476
00:19:39,220 --> 00:19:42,760
<font color="#E5E5E5">case sub-linear such complexity so for</font>

477
00:19:41,170 --> 00:19:44,140
example if you have a disjunct<font color="#E5E5E5"> the</font>

478
00:19:42,760 --> 00:19:47,020
junction<font color="#CCCCCC"> composed</font><font color="#E5E5E5"> of Q</font>

479
00:19:44,140 --> 00:19:48,820
<font color="#CCCCCC">keywords it will be Q squared times M</font>

480
00:19:47,020 --> 00:19:52,360
<font color="#E5E5E5">where m</font><font color="#CCCCCC"> is the</font><font color="#E5E5E5"> size the cardinality of</font>

481
00:19:48,820 --> 00:19:54,790
the the response of the maximum of the

482
00:19:52,360 --> 00:19:56,350
<font color="#E5E5E5">response sizes of the global sub tokens</font>

483
00:19:54,790 --> 00:19:59,320
which is the<font color="#CCCCCC"> keywords that compose the</font>

484
00:19:56,350 --> 00:20:00,889
the query<font color="#E5E5E5"> and in terms of storage we</font>

485
00:19:59,320 --> 00:20:03,450
have<font color="#E5E5E5"> this</font>

486
00:20:00,890 --> 00:20:04,950
<font color="#CCCCCC">this formula which is in function</font><font color="#E5E5E5"> of the</font>

487
00:20:03,450 --> 00:20:07,080
<font color="#E5E5E5">number of pairs at the minimum and also</font>

488
00:20:04,950 --> 00:20:08,970
<font color="#E5E5E5">the total number</font><font color="#CCCCCC"> of pair of all</font><font color="#E5E5E5"> local</font>

489
00:20:07,080 --> 00:20:12,060
elementary math and you can see that I

490
00:20:08,970 --> 00:20:14,820
have put<font color="#CCCCCC"> that in red</font><font color="#E5E5E5"> and why you</font><font color="#CCCCCC"> may ask</font>

491
00:20:12,060 --> 00:20:16,530
<font color="#E5E5E5">why because it's quite heavy</font>

492
00:20:14,820 --> 00:20:18,629
when we came when we wanted<font color="#CCCCCC"> to evaluate</font>

493
00:20:16,530 --> 00:20:21,330
<font color="#CCCCCC">our</font><font color="#E5E5E5"> construction this term is quite a</font>

494
00:20:18,630 --> 00:20:26,210
lot for some<font color="#E5E5E5"> data for some data sets so</font>

495
00:20:21,330 --> 00:20:26,210
a<font color="#E5E5E5"> question is how can we for example</font>

496
00:20:26,360 --> 00:20:31,800
<font color="#CCCCCC">reduce this</font><font color="#E5E5E5"> this storage and make our</font><font color="#CCCCCC"> ax</font>

497
00:20:29,400 --> 00:20:34,410
construction more<font color="#E5E5E5"> compact so there is an</font>

498
00:20:31,800 --> 00:20:38,220
easy solution<font color="#E5E5E5"> which is using the</font><font color="#CCCCCC"> zi DX</font>

499
00:20:34,410 --> 00:20:39,840
construction by go<font color="#E5E5E5"> in 2003 as our local</font>

500
00:20:38,220 --> 00:20:41,610
<font color="#E5E5E5">minimum so</font><font color="#CCCCCC"> we instantiate the</font><font color="#E5E5E5"> local</font>

501
00:20:39,840 --> 00:20:43,230
museum up with the<font color="#CCCCCC"> special-purpose you</font>

502
00:20:41,610 --> 00:20:45,990
<font color="#E5E5E5">can see single keyword</font><font color="#CCCCCC"> SC which is more</font>

503
00:20:43,230 --> 00:20:47,910
compact<font color="#E5E5E5"> it has a it has</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> linear cost</font>

504
00:20:45,990 --> 00:20:49,740
<font color="#E5E5E5">but as long as</font><font color="#CCCCCC"> we search does unlock on</font>

505
00:20:47,910 --> 00:20:52,230
<font color="#CCCCCC">will come</font><font color="#E5E5E5"> up it will not</font><font color="#CCCCCC"> impact the sub</font>

506
00:20:49,740 --> 00:20:54,720
linearity even if it's linear<font color="#CCCCCC"> so it's</font>

507
00:20:52,230 --> 00:20:56,550
okay so<font color="#E5E5E5"> this is why I say it's okay</font><font color="#CCCCCC"> so</font>

508
00:20:54,720 --> 00:20:59,490
it's<font color="#CCCCCC"> very</font><font color="#E5E5E5"> compact but the problem of zi</font>

509
00:20:56,550 --> 00:21:01,290
DX<font color="#E5E5E5"> is not adaptively secure the</font><font color="#CCCCCC"> X</font><font color="#E5E5E5"> can be</font>

510
00:20:59,490 --> 00:21:03,240
<font color="#E5E5E5">made adaptively secure but the chicken</font>

511
00:21:01,290 --> 00:21:05,490
size can be<font color="#E5E5E5"> true large and weak you</font><font color="#CCCCCC"> care</font>

512
00:21:03,240 --> 00:21:07,200
if I can you you<font color="#E5E5E5"> know you can go to see</font>

513
00:21:05,490 --> 00:21:11,790
the<font color="#E5E5E5"> the paper to see the details why</font>

514
00:21:07,200 --> 00:21:14,370
this this<font color="#CCCCCC"> holds so this motivates the</font>

515
00:21:11,790 --> 00:21:15,750
the next<font color="#E5E5E5"> step where we</font><font color="#CCCCCC"> wanted to come up</font>

516
00:21:14,370 --> 00:21:17,909
<font color="#E5E5E5">with</font><font color="#CCCCCC"> the new construction that</font><font color="#E5E5E5"> is</font>

517
00:21:15,750 --> 00:21:20,040
compact but<font color="#CCCCCC"> also have like an optimal</font><font color="#E5E5E5"> to</font>

518
00:21:17,910 --> 00:21:21,660
concise and we<font color="#CCCCCC"> come up</font><font color="#E5E5E5"> with this Metro</font>

519
00:21:20,040 --> 00:21:23,430
scrap filter which is newness<font color="#CCCCCC"> it's bloom</font>

520
00:21:21,660 --> 00:21:25,020
filter with variable size and fix<font color="#CCCCCC"> it has</font>

521
00:21:23,430 --> 00:21:27,660
function and it has<font color="#E5E5E5"> the following</font>

522
00:21:25,020 --> 00:21:29,550
properties<font color="#CCCCCC"> it's based</font><font color="#E5E5E5"> on online ciphers</font>

523
00:21:27,660 --> 00:21:31,650
<font color="#E5E5E5">it's adaptively secure compact optimal</font>

524
00:21:29,550 --> 00:21:34,409
<font color="#CCCCCC">to concise and linear search complexity</font>

525
00:21:31,650 --> 00:21:36,540
and we move<font color="#CCCCCC"> from this formula</font><font color="#E5E5E5"> of storage</font>

526
00:21:34,410 --> 00:21:39,080
overhead<font color="#E5E5E5"> to something like that where we</font>

527
00:21:36,540 --> 00:21:42,270
depend only on the<font color="#CCCCCC"> number of co-occurs</font>

528
00:21:39,080 --> 00:21:45,179
right<font color="#E5E5E5"> so we have evaluated our</font>

529
00:21:42,270 --> 00:21:47,639
construction we used an<font color="#E5E5E5"> errand data set</font>

530
00:21:45,180 --> 00:21:50,820
which is around four hundred<font color="#CCCCCC"> forty</font>

531
00:21:47,640 --> 00:21:53,190
thousand files if<font color="#E5E5E5"> I remember correctly</font>

532
00:21:50,820 --> 00:21:55,080
<font color="#CCCCCC">and this here is</font><font color="#E5E5E5"> the search overhead and</font>

533
00:21:53,190 --> 00:21:57,690
this is the<font color="#CCCCCC"> the storage overhead so the</font>

534
00:21:55,080 --> 00:21:58,949
search overhead for example for<font color="#E5E5E5"> 1,000</font>

535
00:21:57,690 --> 00:22:00,480
selectivity basically the number<font color="#CCCCCC"> of</font>

536
00:21:58,950 --> 00:22:02,550
pairs<font color="#E5E5E5"> that we will return for a</font>

537
00:22:00,480 --> 00:22:06,450
<font color="#E5E5E5">conjunction and ten thousand here it's</font>

538
00:22:02,550 --> 00:22:10,409
around 12<font color="#E5E5E5"> milliseconds so compared to XC</font>

539
00:22:06,450 --> 00:22:12,480
<font color="#E5E5E5">that does</font><font color="#CCCCCC"> 200 milliseconds we have one</font>

540
00:22:10,410 --> 00:22:14,280
order<font color="#CCCCCC"> of magnitude lesser than that</font><font color="#E5E5E5"> even</font>

541
00:22:12,480 --> 00:22:17,250
<font color="#CCCCCC">fo XC was implement</font>

542
00:22:14,280 --> 00:22:20,250
in<font color="#E5E5E5"> C well ours is was in job so for the</font>

543
00:22:17,250 --> 00:22:22,500
<font color="#E5E5E5">set up</font><font color="#CCCCCC"> this is just to</font><font color="#E5E5E5"> show that the</font>

544
00:22:20,250 --> 00:22:24,030
difference<font color="#CCCCCC"> between zmf IX z MF + IX</font>

545
00:22:22,500 --> 00:22:25,890
would have<font color="#E5E5E5"> like z MF is the construction</font>

546
00:22:24,030 --> 00:22:28,289
<font color="#E5E5E5">that</font><font color="#CCCCCC"> i have discussed about using my</font>

547
00:22:25,890 --> 00:22:30,090
<font color="#E5E5E5">trashcan feature and in Wayne also one</font>

548
00:22:28,289 --> 00:22:36,929
order of magnitude install on the<font color="#CCCCCC"> same</font>

549
00:22:30,090 --> 00:22:39,510
data set<font color="#E5E5E5"> okay and finally we</font><font color="#CCCCCC"> introduced</font>

550
00:22:36,929 --> 00:22:42,270
occlusion<font color="#E5E5E5"> which is as far as we know is</font>

551
00:22:39,510 --> 00:22:45,390
the<font color="#CCCCCC"> first encrypted search library open</font>

552
00:22:42,270 --> 00:22:48,799
source under<font color="#E5E5E5"> GPL and it's written in</font>

553
00:22:45,390 --> 00:22:51,510
Java<font color="#E5E5E5"> which implements currently</font>

554
00:22:48,799 --> 00:22:55,350
different<font color="#E5E5E5"> SSE construction like to</font><font color="#CCCCCC"> leave</font>

555
00:22:51,510 --> 00:22:58,740
<font color="#CCCCCC">zmf dynamic SSC that are forward secure</font>

556
00:22:55,350 --> 00:23:02,189
<font color="#E5E5E5">to live</font><font color="#CCCCCC"> iooks to live ix EMF boolean</font>

557
00:22:58,740 --> 00:23:04,409
<font color="#CCCCCC">sse2 based</font><font color="#E5E5E5"> on two levels EMF there are</font>

558
00:23:02,190 --> 00:23:09,210
some work in progress<font color="#CCCCCC"> we implement</font>

559
00:23:04,409 --> 00:23:13,409
dynamic<font color="#CCCCCC"> SSE that</font><font color="#E5E5E5"> have better trade off</font>

560
00:23:09,210 --> 00:23:15,150
the and this<font color="#E5E5E5"> will come soon</font><font color="#CCCCCC"> Forsman</font><font color="#E5E5E5"> and</font>

561
00:23:13,409 --> 00:23:17,429
for su and graph<font color="#E5E5E5"> encryption that we call</font>

562
00:23:15,150 --> 00:23:20,130
<font color="#E5E5E5">edx those are some new</font><font color="#CCCCCC"> construction that</font>

563
00:23:17,429 --> 00:23:23,460
<font color="#E5E5E5">we will add</font><font color="#CCCCCC"> to the library</font><font color="#E5E5E5"> and with that</font>

564
00:23:20,130 --> 00:23:26,210
I want<font color="#E5E5E5"> to thank you and you can find the</font>

565
00:23:23,460 --> 00:23:26,210
link of the library

