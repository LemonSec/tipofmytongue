1
00:00:00,000 --> 00:00:06,359
<font color="#CCCCCC">Thanks</font><font color="#E5E5E5"> Khrushchev</font><font color="#CCCCCC"> thanks everybody for</font>

2
00:00:02,939 --> 00:00:07,620
<font color="#E5E5E5">waking up after the rump session so I'm</font>

3
00:00:06,359 --> 00:00:09,809
going<font color="#CCCCCC"> to talk about</font><font color="#E5E5E5"> cryptography with</font>

4
00:00:07,620 --> 00:00:12,570
updates<font color="#E5E5E5"> which is work with</font><font color="#CCCCCC"> per Bungie</font>

5
00:00:09,809 --> 00:00:14,340
announced<font color="#E5E5E5"> in Abhishek Jain so let's</font>

6
00:00:12,570 --> 00:00:16,440
start<font color="#E5E5E5"> by talking about garbled circuits</font>

7
00:00:14,340 --> 00:00:19,560
<font color="#CCCCCC">in a typical setting</font><font color="#E5E5E5"> for garbled</font>

8
00:00:16,440 --> 00:00:21,600
circuits there's two parties<font color="#CCCCCC"> Alice</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> on</font>

9
00:00:19,560 --> 00:00:23,220
the left<font color="#E5E5E5"> and she has some</font><font color="#CCCCCC"> circuits</font><font color="#E5E5E5"> see</font>

10
00:00:21,600 --> 00:00:26,430
that she wants Bob to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to compute</font>

11
00:00:23,220 --> 00:00:27,660
<font color="#E5E5E5">on an input X so alice is gonna before</font>

12
00:00:26,430 --> 00:00:29,789
she knows the input X she's gonna

13
00:00:27,660 --> 00:00:34,050
<font color="#E5E5E5">garbled the circuit and send it</font><font color="#CCCCCC"> over to</font>

14
00:00:29,789 --> 00:00:37,800
Bob<font color="#CCCCCC"> and then and this this operation</font><font color="#E5E5E5"> can</font>

15
00:00:34,050 --> 00:00:40,199
take time<font color="#CCCCCC"> this</font><font color="#E5E5E5"> operation</font><font color="#CCCCCC"> can take time</font>

16
00:00:37,800 --> 00:00:42,239
<font color="#CCCCCC">proportional the size of the circuit</font><font color="#E5E5E5"> and</font>

17
00:00:40,200 --> 00:00:44,399
then later she<font color="#CCCCCC"> was gonna</font><font color="#E5E5E5"> get the input X</font>

18
00:00:42,239 --> 00:00:47,339
and<font color="#E5E5E5"> she wants</font><font color="#CCCCCC"> to quickly send</font><font color="#E5E5E5"> that over</font>

19
00:00:44,399 --> 00:00:51,300
<font color="#E5E5E5">to Bob garbled so that Bob can learn C</font>

20
00:00:47,340 --> 00:00:53,910
of X and nothing<font color="#E5E5E5"> else</font><font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example C</font>

21
00:00:51,300 --> 00:00:55,769
might capture<font color="#E5E5E5"> Alice's knowledge or</font>

22
00:00:53,910 --> 00:00:59,489
beliefs about<font color="#E5E5E5"> the value</font><font color="#CCCCCC"> of Apple stock</font>

23
00:00:55,770 --> 00:01:01,680
so tonight alice<font color="#E5E5E5"> is gonna garble this</font>

24
00:00:59,489 --> 00:01:03,769
circuit that<font color="#E5E5E5"> captures this belief and</font>

25
00:01:01,680 --> 00:01:06,570
send it<font color="#CCCCCC"> over to</font><font color="#E5E5E5"> Bob and tomorrow morning</font>

26
00:01:03,769 --> 00:01:08,548
<font color="#CCCCCC">depending on X is like the stock price</font>

27
00:01:06,570 --> 00:01:12,298
or<font color="#CCCCCC"> something and C</font><font color="#E5E5E5"> of X will be</font><font color="#CCCCCC"> buy or</font>

28
00:01:08,549 --> 00:01:14,070
<font color="#CCCCCC">sell so this</font><font color="#E5E5E5"> is well and</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> but maybe</font>

29
00:01:12,299 --> 00:01:15,689
tonight<font color="#E5E5E5"> Alice is gonna learn something</font>

30
00:01:14,070 --> 00:01:17,580
about Apple<font color="#E5E5E5"> you know something that</font>

31
00:01:15,689 --> 00:01:19,229
<font color="#E5E5E5">changes her valuation of Apple stock you</font>

32
00:01:17,580 --> 00:01:24,570
know she sees a really cool<font color="#E5E5E5"> picture of</font>

33
00:01:19,229 --> 00:01:27,090
an iPhone<font color="#E5E5E5"> they got left at a bar now she</font>

34
00:01:24,570 --> 00:01:28,529
wants<font color="#E5E5E5"> to</font><font color="#CCCCCC"> update her circuit you know</font><font color="#E5E5E5"> she</font>

35
00:01:27,090 --> 00:01:30,869
updates her belief she wants to<font color="#E5E5E5"> make</font>

36
00:01:28,530 --> 00:01:34,140
some small change to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> circuit see it</font>

37
00:01:30,869 --> 00:01:37,500
make it C prime if Alice wants<font color="#E5E5E5"> to do</font>

38
00:01:34,140 --> 00:01:39,299
<font color="#E5E5E5">this so she can</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> garbled the circuit</font>

39
00:01:37,500 --> 00:01:41,490
C<font color="#E5E5E5"> prime from scratch</font><font color="#CCCCCC"> is there anything</font>

40
00:01:39,299 --> 00:01:43,500
better<font color="#E5E5E5"> that</font><font color="#CCCCCC"> she can do so in particular</font>

41
00:01:41,490 --> 00:01:46,619
<font color="#E5E5E5">if Alice just wants to change one</font>

42
00:01:43,500 --> 00:01:48,180
circuit one gate of the circuit C can

43
00:01:46,619 --> 00:01:49,470
she do any better than garbling the

44
00:01:48,180 --> 00:01:50,820
whole circuit<font color="#CCCCCC"> from scratch or is it</font>

45
00:01:49,470 --> 00:01:56,789
hopeless<font color="#CCCCCC"> does</font><font color="#E5E5E5"> she have to spend</font><font color="#CCCCCC"> time</font>

46
00:01:50,820 --> 00:01:58,619
proportional<font color="#E5E5E5"> to C or</font><font color="#CCCCCC"> instead maybe maybe</font>

47
00:01:56,790 --> 00:02:02,969
there's some small thing this purple

48
00:01:58,619 --> 00:02:05,009
thing<font color="#E5E5E5"> that Alice consent to Bob that Bob</font>

49
00:02:02,969 --> 00:02:06,829
<font color="#E5E5E5">can combine with the garbled circuit C</font>

50
00:02:05,009 --> 00:02:09,090
to get<font color="#E5E5E5"> the garbled circuit C</font><font color="#CCCCCC"> Prime</font>

51
00:02:06,829 --> 00:02:12,450
but that computing<font color="#E5E5E5"> this purple thing</font>

52
00:02:09,090 --> 00:02:13,520
<font color="#E5E5E5">would be easy much easier</font><font color="#CCCCCC"> than garbling</font>

53
00:02:12,450 --> 00:02:15,769
the circuit

54
00:02:13,520 --> 00:02:18,640
from scratch<font color="#E5E5E5"> we call</font><font color="#CCCCCC"> Oh we're gonna call</font>

55
00:02:15,770 --> 00:02:22,340
this<font color="#CCCCCC"> thing an updatable garbled circuit</font>

56
00:02:18,640 --> 00:02:24,230
this<font color="#E5E5E5"> is a very</font><font color="#CCCCCC"> natural question and it</font>

57
00:02:22,340 --> 00:02:25,880
<font color="#E5E5E5">immediately raises a bunch of other</font>

58
00:02:24,230 --> 00:02:27,920
natural<font color="#E5E5E5"> questions</font><font color="#CCCCCC"> so we can think about</font>

59
00:02:25,880 --> 00:02:29,960
<font color="#E5E5E5">the same question not</font><font color="#CCCCCC"> only in garbled</font>

60
00:02:27,920 --> 00:02:32,209
circuits but an obfuscation<font color="#CCCCCC"> if I need if</font>

61
00:02:29,960 --> 00:02:33,980
<font color="#CCCCCC">I obfuscate a circuit</font><font color="#E5E5E5"> see and then I</font>

62
00:02:32,210 --> 00:02:36,020
want to obfuscate<font color="#CCCCCC"> a circuit with one</font>

63
00:02:33,980 --> 00:02:37,970
gate change do I have to obfuscate all

64
00:02:36,020 --> 00:02:40,610
over again<font color="#E5E5E5"> to have to spend time</font>

65
00:02:37,970 --> 00:02:41,750
<font color="#E5E5E5">proportional</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> C or is there some way I</font>

66
00:02:40,610 --> 00:02:44,150
can leverage the work<font color="#E5E5E5"> you've already</font>

67
00:02:41,750 --> 00:02:45,200
<font color="#E5E5E5">done or in the setting of attribute</font>

68
00:02:44,150 --> 00:02:47,500
<font color="#E5E5E5">based encryption if I've already</font>

69
00:02:45,200 --> 00:02:50,299
generated a secret key for some policy

70
00:02:47,500 --> 00:02:51,770
<font color="#CCCCCC">do</font><font color="#E5E5E5"> I have to generate</font><font color="#CCCCCC"> it a whole new</font>

71
00:02:50,300 --> 00:02:54,350
secret key if I want to<font color="#E5E5E5"> change this</font><font color="#CCCCCC"> one</font>

72
00:02:51,770 --> 00:02:56,450
gate<font color="#CCCCCC"> in the policy or for</font><font color="#E5E5E5"> non</font>

73
00:02:54,350 --> 00:02:59,390
<font color="#E5E5E5">interactive proofs you know mythix or</font>

74
00:02:56,450 --> 00:03:02,299
<font color="#E5E5E5">witness indistinguishable proofs</font><font color="#CCCCCC"> if I</font>

75
00:02:59,390 --> 00:03:04,429
want if I've<font color="#CCCCCC"> already proved some some</font><font color="#E5E5E5"> NP</font>

76
00:03:02,300 --> 00:03:06,380
statement to you do I have to<font color="#E5E5E5"> take time</font>

77
00:03:04,430 --> 00:03:08,180
you<font color="#E5E5E5"> have to do it all</font><font color="#CCCCCC"> over if I want to</font>

78
00:03:06,380 --> 00:03:11,240
<font color="#E5E5E5">change a very small piece of the</font>

79
00:03:08,180 --> 00:03:15,500
<font color="#E5E5E5">statement and this problem has</font><font color="#CCCCCC"> been</font>

80
00:03:11,240 --> 00:03:18,290
studied only<font color="#CCCCCC"> in the city</font><font color="#E5E5E5"> this problem</font>

81
00:03:15,500 --> 00:03:19,760
<font color="#E5E5E5">has this problem has only received sort</font>

82
00:03:18,290 --> 00:03:21,590
of limited attention<font color="#E5E5E5"> mainly in the</font>

83
00:03:19,760 --> 00:03:22,910
setting of obfuscation<font color="#CCCCCC"> Prevention's</font>

84
00:03:21,590 --> 00:03:24,590
gonna talk about<font color="#E5E5E5"> some of</font><font color="#CCCCCC"> that work</font>

85
00:03:22,910 --> 00:03:28,940
<font color="#E5E5E5">tomorrow</font><font color="#CCCCCC"> later today</font>

86
00:03:24,590 --> 00:03:31,130
later today<font color="#E5E5E5"> but but basically there's</font>

87
00:03:28,940 --> 00:03:34,060
these types of questions haven't really

88
00:03:31,130 --> 00:03:37,310
been<font color="#E5E5E5"> studied before and this work we</font>

89
00:03:34,060 --> 00:03:39,590
construct we show how<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> updatable</font>

90
00:03:37,310 --> 00:03:42,020
garbled circuits<font color="#CCCCCC"> which</font><font color="#E5E5E5"> will allow you to</font>

91
00:03:39,590 --> 00:03:45,170
change any gate of the circuit<font color="#E5E5E5"> that you</font>

92
00:03:42,020 --> 00:03:46,550
want<font color="#E5E5E5"> only spending time sort of</font>

93
00:03:45,170 --> 00:03:48,500
proportional to the number of gates<font color="#E5E5E5"> are</font>

94
00:03:46,550 --> 00:03:50,660
going to change and we can<font color="#E5E5E5"> build this</font>

95
00:03:48,500 --> 00:03:54,770
<font color="#E5E5E5">from lattice assumptions like learning</font>

96
00:03:50,660 --> 00:03:56,540
with errors<font color="#E5E5E5"> and moreover we study</font>

97
00:03:54,770 --> 00:03:58,510
another<font color="#CCCCCC"> notion which is a little</font>

98
00:03:56,540 --> 00:04:00,530
<font color="#E5E5E5">confusing</font><font color="#CCCCCC"> Lee named these</font><font color="#E5E5E5"> two maybe</font>

99
00:03:58,510 --> 00:04:01,910
which we're gonna call<font color="#CCCCCC"> updatable</font>

100
00:04:00,530 --> 00:04:08,870
<font color="#E5E5E5">randomized encodings the distinction</font>

101
00:04:01,910 --> 00:04:11,690
<font color="#E5E5E5">will become clear is there</font><font color="#CCCCCC"> a mouse and</font>

102
00:04:08,870 --> 00:04:13,810
we<font color="#CCCCCC"> can we can</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> updatable</font><font color="#E5E5E5"> randomized</font>

103
00:04:11,690 --> 00:04:16,820
encodings for an even larger class<font color="#E5E5E5"> of</font>

104
00:04:13,810 --> 00:04:19,760
updates from functional encryption and

105
00:04:16,820 --> 00:04:21,798
if you if you only want to update a

106
00:04:19,760 --> 00:04:23,780
hundred times instead of unbounded<font color="#CCCCCC"> lis</font>

107
00:04:21,798 --> 00:04:25,760
many times we'll talk about<font color="#E5E5E5"> what that</font>

108
00:04:23,780 --> 00:04:27,179
<font color="#E5E5E5">means</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> a second we can do it from</font>

109
00:04:25,760 --> 00:04:30,849
<font color="#CCCCCC">one-way functions</font>

110
00:04:27,180 --> 00:04:32,710
and lastly we show that<font color="#CCCCCC"> updatable</font>

111
00:04:30,849 --> 00:04:34,090
<font color="#E5E5E5">randomized encodings</font><font color="#CCCCCC"> are gonna suffice</font>

112
00:04:32,710 --> 00:04:36,609
for<font color="#E5E5E5"> all the applications on the left</font>

113
00:04:34,090 --> 00:04:38,979
<font color="#E5E5E5">that so for example give an attribute</font>

114
00:04:36,610 --> 00:04:40,300
based encryption and and<font color="#CCCCCC"> updatable</font>

115
00:04:38,979 --> 00:04:45,729
<font color="#CCCCCC">randomized encodings you can get an</font>

116
00:04:40,300 --> 00:04:47,710
updatable<font color="#E5E5E5"> attribute based encryption so</font>

117
00:04:45,729 --> 00:04:49,169
I'm gonna start<font color="#CCCCCC"> by defining updatable</font>

118
00:04:47,710 --> 00:04:52,210
<font color="#CCCCCC">randomize encodings telling you about</font>

119
00:04:49,169 --> 00:04:54,039
what<font color="#E5E5E5"> related work there is and then show</font>

120
00:04:52,210 --> 00:04:56,888
<font color="#E5E5E5">you</font><font color="#CCCCCC"> how to do this</font><font color="#E5E5E5"> this transformation</font>

121
00:04:54,039 --> 00:04:59,289
<font color="#E5E5E5">just sort of by example and then we're</font>

122
00:04:56,889 --> 00:05:00,580
gonna go<font color="#CCCCCC"> back to if we have time kristef</font>

123
00:04:59,289 --> 00:05:03,009
is looking at<font color="#CCCCCC"> his watch</font><font color="#E5E5E5"> we're gonna go</font>

124
00:05:00,580 --> 00:05:04,508
back<font color="#CCCCCC"> to updatable garbled circuits</font><font color="#E5E5E5"> at</font>

125
00:05:03,009 --> 00:05:09,159
the end and see how to<font color="#E5E5E5"> construct them</font>

126
00:05:04,509 --> 00:05:10,539
from from lattices so<font color="#CCCCCC"> updatable</font>

127
00:05:09,159 --> 00:05:12,099
randomized<font color="#CCCCCC"> encodings</font><font color="#E5E5E5"> so what does it</font>

128
00:05:10,539 --> 00:05:15,878
mean<font color="#E5E5E5"> for a circuit to be</font><font color="#CCCCCC"> updatable</font>

129
00:05:12,099 --> 00:05:17,830
<font color="#E5E5E5">what's an updatable circuit so your</font>

130
00:05:15,879 --> 00:05:19,569
intuition<font color="#CCCCCC"> is the right thing it's a</font>

131
00:05:17,830 --> 00:05:21,120
little<font color="#CCCCCC"> annoying</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> formalize I'm not</font>

132
00:05:19,569 --> 00:05:23,889
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> do it formally but if you have a</font>

133
00:05:21,120 --> 00:05:25,210
circuit<font color="#E5E5E5"> and an input we're gonna think</font>

134
00:05:23,889 --> 00:05:26,589
for randomized encodings we'll think of

135
00:05:25,210 --> 00:05:29,469
circuits and inputs together<font color="#E5E5E5"> is</font>

136
00:05:26,589 --> 00:05:31,810
<font color="#E5E5E5">typically done</font><font color="#CCCCCC"> so if</font><font color="#E5E5E5"> you have a circuit</font>

137
00:05:29,469 --> 00:05:33,219
input<font color="#CCCCCC"> C and X and some update you with</font>

138
00:05:31,810 --> 00:05:37,000
this<font color="#E5E5E5"> update could be changed a gate of</font>

139
00:05:33,219 --> 00:05:39,520
the circuit<font color="#E5E5E5"> changed a bit of X and you</font>

140
00:05:37,000 --> 00:05:41,860
<font color="#CCCCCC">can in there's some way to</font><font color="#E5E5E5"> apply this to</font>

141
00:05:39,520 --> 00:05:45,188
this<font color="#CCCCCC"> see</font><font color="#E5E5E5"> it X to get a new C prime X</font>

142
00:05:41,860 --> 00:05:47,860
<font color="#CCCCCC">Prime and we can really do sort</font><font color="#E5E5E5"> of a</font>

143
00:05:45,189 --> 00:05:50,229
large class of updates<font color="#E5E5E5"> anything that the</font>

144
00:05:47,860 --> 00:05:52,870
the<font color="#CCCCCC"> application the the plus sign can</font><font color="#E5E5E5"> be</font>

145
00:05:50,229 --> 00:05:55,409
sort of computed by a circuit of a fixed

146
00:05:52,870 --> 00:05:59,139
size<font color="#E5E5E5"> so whatever your representation is</font>

147
00:05:55,409 --> 00:06:00,759
as long<font color="#E5E5E5"> as</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> true</font><font color="#CCCCCC"> but think</font><font color="#E5E5E5"> of like</font>

148
00:05:59,139 --> 00:06:04,149
changing a gate<font color="#E5E5E5"> or changing a bit of the</font>

149
00:06:00,759 --> 00:06:05,830
underlying representation<font color="#CCCCCC"> okay so what's</font>

150
00:06:04,149 --> 00:06:07,629
<font color="#E5E5E5">a randomized encoding randomized</font>

151
00:06:05,830 --> 00:06:11,438
encoding is a way to encode a circuit at

152
00:06:07,629 --> 00:06:12,039
an input<font color="#E5E5E5"> so into this green box see x</font>

153
00:06:11,439 --> 00:06:15,189
over there

154
00:06:12,039 --> 00:06:16,899
we're encoding takes takes is not too

155
00:06:15,189 --> 00:06:19,810
much<font color="#E5E5E5"> time it's easier to do the encoding</font>

156
00:06:16,899 --> 00:06:21,909
<font color="#E5E5E5">than to compute the circuit</font><font color="#CCCCCC"> but but this</font>

157
00:06:19,810 --> 00:06:24,899
encoding still<font color="#E5E5E5"> only reveals the values</font>

158
00:06:21,909 --> 00:06:24,899
<font color="#E5E5E5">of X and nothing more</font>

159
00:06:24,930 --> 00:06:31,029
so we want to<font color="#CCCCCC"> also find a way to encode</font>

160
00:06:28,659 --> 00:06:33,580
the update<font color="#E5E5E5"> this is sort of the main idea</font>

161
00:06:31,029 --> 00:06:35,830
<font color="#E5E5E5">we want to encode the update into this</font>

162
00:06:33,580 --> 00:06:38,050
purple<font color="#E5E5E5"> box on the right so that there's</font>

163
00:06:35,830 --> 00:06:40,029
a way to<font color="#CCCCCC"> combine the original randomized</font>

164
00:06:38,050 --> 00:06:40,550
encoding and<font color="#CCCCCC"> the encoded update to get a</font>

165
00:06:40,029 --> 00:06:43,490
new<font color="#E5E5E5"> ran</font>

166
00:06:40,550 --> 00:06:46,250
<font color="#CCCCCC">amazing coding for</font><font color="#E5E5E5"> C prime X prime okay</font>

167
00:06:43,490 --> 00:06:48,350
<font color="#CCCCCC">and the sort of the correctness the</font>

168
00:06:46,250 --> 00:06:51,020
thing that we want to<font color="#E5E5E5"> hold is that doing</font>

169
00:06:48,350 --> 00:06:53,570
it that<font color="#E5E5E5"> way if you go if you use the up</font>

170
00:06:51,020 --> 00:06:55,940
encoded update to update the encoding

171
00:06:53,570 --> 00:06:57,710
<font color="#E5E5E5">then you get the same</font><font color="#CCCCCC"> thing as if you</font>

172
00:06:55,940 --> 00:07:00,170
you get<font color="#E5E5E5"> a randomized encoding of</font><font color="#CCCCCC"> C prime</font>

173
00:06:57,710 --> 00:07:01,310
<font color="#CCCCCC">X prime where C prime</font><font color="#E5E5E5"> X prime or what</font>

174
00:07:00,170 --> 00:07:03,160
you would<font color="#CCCCCC"> have</font><font color="#E5E5E5"> gotten if you just did</font>

175
00:07:01,310 --> 00:07:08,450
the<font color="#CCCCCC"> update on</font><font color="#E5E5E5"> the left in the clear</font>

176
00:07:03,160 --> 00:07:10,580
<font color="#CCCCCC">makes sense so it's easy to</font><font color="#E5E5E5"> sort of see</font>

177
00:07:08,450 --> 00:07:12,590
why multiple<font color="#CCCCCC"> updates now</font><font color="#E5E5E5"> make sense</font>

178
00:07:10,580 --> 00:07:15,320
we're gonna think about multiple updates

179
00:07:12,590 --> 00:07:18,169
<font color="#CCCCCC">in</font><font color="#E5E5E5"> serials so if</font><font color="#CCCCCC"> I have C an X I apply</font>

180
00:07:15,320 --> 00:07:20,420
update you want to get CX<font color="#CCCCCC"> one and then I</font>

181
00:07:18,170 --> 00:07:23,330
update you<font color="#E5E5E5"> two I want to be able to do</font>

182
00:07:20,420 --> 00:07:24,890
that in the<font color="#E5E5E5"> encoding world</font><font color="#CCCCCC"> too so I want</font>

183
00:07:23,330 --> 00:07:26,750
<font color="#CCCCCC">to I</font><font color="#E5E5E5"> can give you the randomizing</font>

184
00:07:24,890 --> 00:07:28,070
coating of<font color="#CCCCCC"> CN</font><font color="#E5E5E5"> x then the encoding of the</font>

185
00:07:26,750 --> 00:07:29,900
<font color="#E5E5E5">first update</font><font color="#CCCCCC"> and then the encoding in</font>

186
00:07:28,070 --> 00:07:32,719
the second<font color="#CCCCCC"> update and you should be able</font>

187
00:07:29,900 --> 00:07:34,520
to<font color="#E5E5E5"> do the thing</font><font color="#CCCCCC"> that you want</font><font color="#E5E5E5"> to do</font><font color="#CCCCCC"> and</font>

188
00:07:32,720 --> 00:07:36,620
each<font color="#E5E5E5"> of the green boxes is a randomized</font>

189
00:07:34,520 --> 00:07:38,299
encoding<font color="#E5E5E5"> so you can decode each of the</font>

190
00:07:36,620 --> 00:07:42,280
green boxes and get the value<font color="#E5E5E5"> C that's</font>

191
00:07:38,300 --> 00:07:44,540
you want<font color="#CCCCCC"> have X</font><font color="#E5E5E5"> 1 C 1 C 2 of X 2 and</font>

192
00:07:42,280 --> 00:07:47,780
going back<font color="#E5E5E5"> just for a second to</font>

193
00:07:44,540 --> 00:07:49,160
<font color="#CCCCCC">updatable garbled circuits updatable</font>

194
00:07:47,780 --> 00:07:50,780
garbled circuits is going to correspond

195
00:07:49,160 --> 00:07:52,340
<font color="#CCCCCC">to like a</font><font color="#E5E5E5"> single use variant of this</font>

196
00:07:50,780 --> 00:07:55,250
where you can just decode the last value

197
00:07:52,340 --> 00:07:56,900
<font color="#CCCCCC">and at the end I'll show</font><font color="#E5E5E5"> you this</font>

198
00:07:55,250 --> 00:07:58,280
picture<font color="#E5E5E5"> for</font><font color="#CCCCCC"> updatable garbled circuits</font>

199
00:07:56,900 --> 00:08:01,370
and<font color="#E5E5E5"> it'll be clear before</font><font color="#CCCCCC"> we do the</font>

200
00:07:58,280 --> 00:08:04,369
<font color="#CCCCCC">construction so the key challenge and</font>

201
00:08:01,370 --> 00:08:07,250
all this is<font color="#CCCCCC"> efficiency if we didn't care</font>

202
00:08:04,370 --> 00:08:08,810
<font color="#CCCCCC">about efficiency</font><font color="#E5E5E5"> Alice could just do the</font>

203
00:08:07,250 --> 00:08:11,210
randomized encoding<font color="#CCCCCC"> of C prime</font><font color="#E5E5E5"> X prime</font>

204
00:08:08,810 --> 00:08:12,950
fresh<font color="#E5E5E5"> right</font><font color="#CCCCCC"> the only</font><font color="#E5E5E5"> thing that isn't</font>

205
00:08:11,210 --> 00:08:15,320
<font color="#E5E5E5">the only it's only interesting</font><font color="#CCCCCC"> if we</font>

206
00:08:12,950 --> 00:08:17,240
have efficiency so<font color="#E5E5E5"> what we want to</font>

207
00:08:15,320 --> 00:08:20,030
capture is that if we<font color="#E5E5E5"> don't change too</font>

208
00:08:17,240 --> 00:08:21,710
much<font color="#E5E5E5"> the size of the encoding the size</font>

209
00:08:20,030 --> 00:08:24,169
of the encoded update is not too large

210
00:08:21,710 --> 00:08:26,299
<font color="#CCCCCC">and so we want the encoded update the</font>

211
00:08:24,170 --> 00:08:28,430
thing in the purple<font color="#E5E5E5"> to grow with the</font>

212
00:08:26,300 --> 00:08:30,800
size of the update and with K the

213
00:08:28,430 --> 00:08:37,460
security parameter<font color="#E5E5E5"> but basically not</font>

214
00:08:30,800 --> 00:08:39,020
gonna mention<font color="#E5E5E5"> K ever again</font><font color="#CCCCCC"> and for some</font>

215
00:08:37,460 --> 00:08:41,300
<font color="#E5E5E5">of the applications of randomized</font>

216
00:08:39,020 --> 00:08:42,890
encoding to build you to build the<font color="#CCCCCC"> other</font>

217
00:08:41,299 --> 00:08:44,689
<font color="#CCCCCC">updatable primitives will also need</font>

218
00:08:42,890 --> 00:08:47,000
<font color="#CCCCCC">something stronger if we're considering</font>

219
00:08:44,690 --> 00:08:49,430
circuits that<font color="#CCCCCC"> have not just a</font><font color="#E5E5E5"> boolean</font>

220
00:08:47,000 --> 00:08:52,070
output but a longer output will<font color="#E5E5E5"> also</font>

221
00:08:49,430 --> 00:08:53,689
need the the up to the encoded<font color="#E5E5E5"> update</font>

222
00:08:52,070 --> 00:08:55,160
size or

223
00:08:53,690 --> 00:08:56,840
at the time<font color="#E5E5E5"> to generating</font><font color="#CCCCCC"> coded</font><font color="#E5E5E5"> update</font>

224
00:08:55,160 --> 00:08:58,130
to not depend<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the output length of</font>

225
00:08:56,840 --> 00:08:59,750
these circuits if we have<font color="#E5E5E5"> many bit</font>

226
00:08:58,130 --> 00:09:01,790
output<font color="#CCCCCC"> I'm gonna call this output</font>

227
00:08:59,750 --> 00:09:04,300
compactness<font color="#E5E5E5"> this is sort of in parallel</font>

228
00:09:01,790 --> 00:09:09,980
<font color="#E5E5E5">to a concept and functional encryption</font>

229
00:09:04,300 --> 00:09:12,740
<font color="#E5E5E5">literature security can be defined in</font>

230
00:09:09,980 --> 00:09:16,670
<font color="#E5E5E5">two natural</font><font color="#CCCCCC"> ways</font><font color="#E5E5E5"> simulation security</font>

231
00:09:12,740 --> 00:09:19,670
would say<font color="#E5E5E5"> says that if you have</font><font color="#CCCCCC"> all the</font>

232
00:09:16,670 --> 00:09:21,560
values<font color="#CCCCCC"> of all the of other</font><font color="#E5E5E5"> evaluations</font>

233
00:09:19,670 --> 00:09:23,000
<font color="#E5E5E5">then you can simulate the view of the</font>

234
00:09:21,560 --> 00:09:27,500
original<font color="#E5E5E5"> encoding and all the updates</font>

235
00:09:23,000 --> 00:09:31,520
<font color="#E5E5E5">and indistinguishability</font><font color="#CCCCCC"> is that if you</font>

236
00:09:27,500 --> 00:09:34,130
if a sequence<font color="#E5E5E5"> of evaluations agree then</font>

237
00:09:31,520 --> 00:09:35,480
<font color="#CCCCCC">their</font><font color="#E5E5E5"> encode the original encoding is in</font>

238
00:09:34,130 --> 00:09:38,870
the sequence of updates will be

239
00:09:35,480 --> 00:09:40,340
indistinguishable<font color="#E5E5E5"> and sort of similar to</font>

240
00:09:38,870 --> 00:09:42,110
<font color="#CCCCCC">the functional encryption literature</font>

241
00:09:40,340 --> 00:09:45,230
compactness is impossible in the

242
00:09:42,110 --> 00:09:46,610
simulation setting and there's a generic

243
00:09:45,230 --> 00:09:49,460
transformation from an indistinguishable

244
00:09:46,610 --> 00:09:50,960
<font color="#E5E5E5">scheme with compactness to simulation</font>

245
00:09:49,460 --> 00:09:54,380
scheme without compactness<font color="#E5E5E5"> and this is</font>

246
00:09:50,960 --> 00:09:58,610
<font color="#E5E5E5">pretty parallel to the results and</font>

247
00:09:54,380 --> 00:10:02,689
<font color="#E5E5E5">functional encryption literature okay so</font>

248
00:09:58,610 --> 00:10:04,280
now on to some previous<font color="#E5E5E5"> work so some of</font>

249
00:10:02,690 --> 00:10:05,900
<font color="#E5E5E5">you maybe are thinking</font><font color="#CCCCCC"> about incremental</font>

250
00:10:04,280 --> 00:10:08,870
<font color="#E5E5E5">cryptography this sounds a lot like</font>

251
00:10:05,900 --> 00:10:10,430
incremental cryptography maybe so

252
00:10:08,870 --> 00:10:12,890
<font color="#E5E5E5">incremental cryptography is like a lot</font>

253
00:10:10,430 --> 00:10:16,189
of<font color="#E5E5E5"> work was started by</font><font color="#CCCCCC"> Bill Airy</font>

254
00:10:12,890 --> 00:10:17,449
<font color="#CCCCCC">Goldwasser and Gould right I think</font><font color="#E5E5E5"> this</font>

255
00:10:16,190 --> 00:10:19,820
<font color="#E5E5E5">is</font><font color="#CCCCCC"> sort of a typical setting of</font>

256
00:10:17,450 --> 00:10:21,530
incremental cryptography<font color="#CCCCCC"> the you have a</font>

257
00:10:19,820 --> 00:10:23,540
signer that has a secret<font color="#E5E5E5"> key and he</font>

258
00:10:21,530 --> 00:10:24,980
signs a message and then he makes a

259
00:10:23,540 --> 00:10:26,750
small change<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the message and he wants</font>

260
00:10:24,980 --> 00:10:28,160
<font color="#E5E5E5">to sign it</font><font color="#CCCCCC"> again without sort of signing</font>

261
00:10:26,750 --> 00:10:30,920
<font color="#E5E5E5">from scratch he wants to do something</font>

262
00:10:28,160 --> 00:10:35,569
faster so this picture<font color="#E5E5E5"> looks a lot like</font>

263
00:10:30,920 --> 00:10:37,089
our picture so<font color="#CCCCCC"> what's the difference the</font>

264
00:10:35,570 --> 00:10:39,650
difference<font color="#CCCCCC"> is that on the Left</font>

265
00:10:37,089 --> 00:10:45,650
incremental cryptography<font color="#E5E5E5"> there's only</font>

266
00:10:39,650 --> 00:10:47,720
one party<font color="#E5E5E5"> there's only one party and the</font>

267
00:10:45,650 --> 00:10:50,089
<font color="#E5E5E5">party is doing everything in his head so</font>

268
00:10:47,720 --> 00:10:51,170
<font color="#E5E5E5">he knows the secrets and there's no he</font>

269
00:10:50,089 --> 00:10:52,880
doesn't have<font color="#E5E5E5"> to communicate anything</font>

270
00:10:51,170 --> 00:10:54,170
<font color="#CCCCCC">with anybody</font><font color="#E5E5E5"> he hears he outputs one</font>

271
00:10:52,880 --> 00:10:57,220
signature<font color="#E5E5E5"> and then the outputs the next</font>

272
00:10:54,170 --> 00:10:59,240
signature on the right<font color="#E5E5E5"> in our setting</font>

273
00:10:57,220 --> 00:11:01,580
there's an<font color="#CCCCCC"> authority and there's a user</font>

274
00:10:59,240 --> 00:11:03,980
the<font color="#E5E5E5"> authority knows the secrets the</font>

275
00:11:01,580 --> 00:11:05,780
randomness for the garbling but the user

276
00:11:03,980 --> 00:11:07,130
is the<font color="#CCCCCC"> one</font><font color="#E5E5E5"> who is eventually going to</font>

277
00:11:05,780 --> 00:11:07,660
apply the update<font color="#CCCCCC"> because the authority</font>

278
00:11:07,130 --> 00:11:11,080
doesn't<font color="#E5E5E5"> even</font>

279
00:11:07,660 --> 00:11:14,050
<font color="#E5E5E5">output the the new garbled circuit so</font>

280
00:11:11,080 --> 00:11:15,870
the authority has to encode this update

281
00:11:14,050 --> 00:11:20,130
in some way and send it to<font color="#E5E5E5"> the user so</font>

282
00:11:15,870 --> 00:11:25,840
<font color="#CCCCCC">this</font><font color="#E5E5E5"> our setting requires some sort of</font>

283
00:11:20,130 --> 00:11:27,400
stronger security<font color="#E5E5E5"> because because the</font>

284
00:11:25,840 --> 00:11:29,380
user gets to see more on<font color="#E5E5E5"> the left you</font>

285
00:11:27,400 --> 00:11:31,030
only see the two<font color="#E5E5E5"> signatures on the right</font>

286
00:11:29,380 --> 00:11:32,800
you see<font color="#E5E5E5"> the</font><font color="#CCCCCC"> two garbles you see the two</font>

287
00:11:31,030 --> 00:11:34,959
randomized encodings of the two garbled

288
00:11:32,800 --> 00:11:36,689
circuits<font color="#E5E5E5"> Plus this encoded update it</font>

289
00:11:34,960 --> 00:11:39,670
lets you transform from<font color="#CCCCCC"> one to the</font><font color="#E5E5E5"> other</font>

290
00:11:36,690 --> 00:11:42,220
but we do some<font color="#E5E5E5"> more</font><font color="#CCCCCC"> relaxed efficiency</font>

291
00:11:39,670 --> 00:11:45,510
in<font color="#E5E5E5"> that the whole process of going of</font>

292
00:11:42,220 --> 00:11:49,660
get going from Sigma to Sigma prime here

293
00:11:45,510 --> 00:11:52,930
is fast<font color="#E5E5E5"> whereas in our setting the only</font>

294
00:11:49,660 --> 00:11:55,030
thing we require is<font color="#CCCCCC"> that this error</font>

295
00:11:52,930 --> 00:11:57,010
<font color="#E5E5E5">which you can't see that pointer this</font>

296
00:11:55,030 --> 00:12:00,610
arrow here of generating the encoded

297
00:11:57,010 --> 00:12:02,770
update is fast<font color="#CCCCCC"> we're sort of relaxed</font>

298
00:12:00,610 --> 00:12:05,260
<font color="#CCCCCC">about how how long the</font><font color="#E5E5E5"> user or we're</font>

299
00:12:02,770 --> 00:12:06,819
willing to<font color="#E5E5E5"> make the user take in</font>

300
00:12:05,260 --> 00:12:08,080
<font color="#E5E5E5">particular the user is going</font><font color="#CCCCCC"> to take in</font>

301
00:12:06,820 --> 00:12:10,270
<font color="#E5E5E5">our constructions the user is going</font><font color="#CCCCCC"> to</font>

302
00:12:08,080 --> 00:12:16,000
take time proportional to<font color="#CCCCCC"> C to do</font><font color="#E5E5E5"> this</font>

303
00:12:10,270 --> 00:12:17,560
computation<font color="#E5E5E5"> now on to the pad</font><font color="#CCCCCC"> the</font>

304
00:12:16,000 --> 00:12:19,090
obfuscation work so there's<font color="#E5E5E5"> these</font><font color="#CCCCCC"> two</font>

305
00:12:17,560 --> 00:12:22,869
works<font color="#E5E5E5"> about incremental</font><font color="#CCCCCC"> patch of</font>

306
00:12:19,090 --> 00:12:24,100
obfuscation<font color="#CCCCCC"> and so both of these works</font>

307
00:12:22,870 --> 00:12:27,600
sort<font color="#E5E5E5"> of model things slightly</font>

308
00:12:24,100 --> 00:12:29,950
differently<font color="#CCCCCC"> whether the type of updates</font>

309
00:12:27,600 --> 00:12:31,720
<font color="#CCCCCC">and the types of constructions they get</font>

310
00:12:29,950 --> 00:12:33,600
but I think both<font color="#CCCCCC"> of these two works are</font>

311
00:12:31,720 --> 00:12:36,280
interesting and I<font color="#E5E5E5"> recommend them</font>

312
00:12:33,600 --> 00:12:39,330
<font color="#CCCCCC">particularly because the first work by</font>

313
00:12:36,280 --> 00:12:42,670
<font color="#E5E5E5">Gargan</font><font color="#CCCCCC"> Pandey has</font><font color="#E5E5E5"> this cool lower bound</font>

314
00:12:39,330 --> 00:12:44,620
which is<font color="#E5E5E5"> sort of something nothing like</font>

315
00:12:42,670 --> 00:12:46,240
we have the cool lower bound on<font color="#CCCCCC"> how</font>

316
00:12:44,620 --> 00:12:48,340
efficient<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can make</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> and</font>

317
00:12:46,240 --> 00:12:49,840
the<font color="#E5E5E5"> patro obfuscation which prevention</font>

318
00:12:48,340 --> 00:12:54,160
is going to talk<font color="#E5E5E5"> about</font><font color="#CCCCCC"> today I guess I</font>

319
00:12:49,840 --> 00:12:56,050
was wrong<font color="#CCCCCC"> where they can do one update</font>

320
00:12:54,160 --> 00:12:59,290
lets you update many obfuscated circuits

321
00:12:56,050 --> 00:13:02,620
so that's very cool<font color="#E5E5E5"> but this is sort</font><font color="#CCCCCC"> of</font>

322
00:12:59,290 --> 00:13:04,780
the main related work<font color="#CCCCCC"> and</font><font color="#E5E5E5"> lastly we</font>

323
00:13:02,620 --> 00:13:07,780
think about updating<font color="#CCCCCC"> in sort of</font><font color="#E5E5E5"> a serial</font>

324
00:13:04,780 --> 00:13:10,350
way<font color="#E5E5E5"> if you can also easily imagine</font>

325
00:13:07,780 --> 00:13:13,150
updating in parallel and parallel

326
00:13:10,350 --> 00:13:14,950
<font color="#CCCCCC">updatable randomized encoding of closely</font>

327
00:13:13,150 --> 00:13:16,840
corresponds to<font color="#E5E5E5"> reasonable garbled</font>

328
00:13:14,950 --> 00:13:21,670
circuits which have<font color="#E5E5E5"> been considered</font>

329
00:13:16,840 --> 00:13:24,620
before okay so on<font color="#E5E5E5"> to application</font>

330
00:13:21,670 --> 00:13:27,140
so this is a sort of a meta statement

331
00:13:24,620 --> 00:13:29,570
which is<font color="#CCCCCC"> not a formal statement give me</font>

332
00:13:27,140 --> 00:13:32,750
X Y Z and<font color="#CCCCCC"> updatable</font><font color="#E5E5E5"> randomizing coatings</font>

333
00:13:29,570 --> 00:13:35,600
and<font color="#E5E5E5"> I'll give you an updatable</font><font color="#CCCCCC"> XYZ so</font>

334
00:13:32,750 --> 00:13:37,370
this<font color="#E5E5E5"> is not true as stated it's not</font>

335
00:13:35,600 --> 00:13:40,880
<font color="#E5E5E5">formal enough but we can formalize it</font>

336
00:13:37,370 --> 00:13:42,350
<font color="#E5E5E5">for some large class of</font><font color="#CCCCCC"> XYZ including</font>

337
00:13:40,880 --> 00:13:45,080
<font color="#CCCCCC">attributes encryption function</font>

338
00:13:42,350 --> 00:13:47,740
encryption obfuscation<font color="#CCCCCC"> new we use</font>

339
00:13:45,080 --> 00:13:47,740
garbled circuits

340
00:13:47,870 --> 00:13:52,520
<font color="#E5E5E5">okay so</font><font color="#CCCCCC"> updatable randomized</font><font color="#E5E5E5"> encoding is</font>

341
00:13:50,630 --> 00:13:55,520
just sort of like<font color="#E5E5E5"> enable everything to</font>

342
00:13:52,520 --> 00:13:57,470
become<font color="#E5E5E5"> updatable so here's sort of the</font>

343
00:13:55,520 --> 00:14:00,439
<font color="#E5E5E5">simplest possible application of it so</font>

344
00:13:57,470 --> 00:14:01,970
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> one I'm going to show</font><font color="#CCCCCC"> you so</font>

345
00:14:00,440 --> 00:14:03,530
<font color="#E5E5E5">let's say I have an indistinguishable</font>

346
00:14:01,970 --> 00:14:04,730
obfuscator and I want to make an

347
00:14:03,530 --> 00:14:08,000
updatable<font color="#E5E5E5"> indistinguishability</font>

348
00:14:04,730 --> 00:14:10,310
obfuscator<font color="#E5E5E5"> so the new obfuscation</font>

349
00:14:08,000 --> 00:14:11,690
algorithm is going<font color="#CCCCCC"> to take a circuit and</font>

350
00:14:10,310 --> 00:14:16,329
it's gonna<font color="#CCCCCC"> update</font><font color="#E5E5E5"> it's going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> output</font>

351
00:14:11,690 --> 00:14:18,410
<font color="#E5E5E5">an obtainable randomized encoding of the</font>

352
00:14:16,330 --> 00:14:22,370
<font color="#E5E5E5">obfuscation circuit the circuit that</font>

353
00:14:18,410 --> 00:14:26,290
computes the obfuscation<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the circuit</font>

354
00:14:22,370 --> 00:14:29,120
that<font color="#CCCCCC"> I want to emphasize as input right</font>

355
00:14:26,290 --> 00:14:31,849
now to encode an update I just encode

356
00:14:29,120 --> 00:14:34,160
the update where<font color="#CCCCCC"> the update is now gonna</font>

357
00:14:31,850 --> 00:14:36,920
<font color="#CCCCCC">apply</font><font color="#E5E5E5"> to this</font><font color="#CCCCCC"> input</font><font color="#E5E5E5"> this is like this is</font>

358
00:14:34,160 --> 00:14:39,380
the<font color="#E5E5E5"> X that</font><font color="#CCCCCC"> we saw before and then and</font>

359
00:14:36,920 --> 00:14:41,120
then with this and this<font color="#E5E5E5"> the user can can</font>

360
00:14:39,380 --> 00:14:45,710
get the<font color="#CCCCCC"> updatable randomized encoding of</font>

361
00:14:41,120 --> 00:14:47,840
<font color="#CCCCCC">Io and C Prime right this</font><font color="#E5E5E5"> thing can</font><font color="#CCCCCC"> be</font>

362
00:14:45,710 --> 00:14:50,570
decoded<font color="#CCCCCC"> then you get the obfuscation of</font>

363
00:14:47,840 --> 00:14:53,450
C<font color="#CCCCCC"> prime and you're done so correctness</font>

364
00:14:50,570 --> 00:14:54,710
<font color="#E5E5E5">and security are inherited</font><font color="#CCCCCC"> from the</font>

365
00:14:53,450 --> 00:14:55,970
correctness and<font color="#E5E5E5"> the security of the</font>

366
00:14:54,710 --> 00:14:58,880
<font color="#E5E5E5">updatable randomized decoding and</font>

367
00:14:55,970 --> 00:15:00,830
obfuscation<font color="#E5E5E5"> and in this case efficiency</font>

368
00:14:58,880 --> 00:15:02,900
requires compactness because the circuit

369
00:15:00,830 --> 00:15:06,980
in question here is really<font color="#E5E5E5"> the</font>

370
00:15:02,900 --> 00:15:09,709
obfuscation<font color="#CCCCCC"> and this thing outputs many</font>

371
00:15:06,980 --> 00:15:13,670
bits so requires compactness but for

372
00:15:09,710 --> 00:15:15,380
example<font color="#E5E5E5"> maybe non-interactive witness</font>

373
00:15:13,670 --> 00:15:17,990
<font color="#E5E5E5">indistinguishable proofs</font><font color="#CCCCCC"> doesn't require</font>

374
00:15:15,380 --> 00:15:21,620
compactness<font color="#E5E5E5"> and correspondingly we'll be</font>

375
00:15:17,990 --> 00:15:24,200
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to get simulation security okay so</font>

376
00:15:21,620 --> 00:15:26,120
<font color="#E5E5E5">I don't</font><font color="#CCCCCC"> know how much time</font><font color="#E5E5E5"> I have but</font>

377
00:15:24,200 --> 00:15:28,580
<font color="#E5E5E5">not quite conclusions before</font><font color="#CCCCCC"> we go to</font>

378
00:15:26,120 --> 00:15:31,910
the construction<font color="#CCCCCC"> and potentially run out</font>

379
00:15:28,580 --> 00:15:33,000
of<font color="#E5E5E5"> time is that obtainable crypto is</font>

380
00:15:31,910 --> 00:15:35,430
sort of<font color="#E5E5E5"> a</font>

381
00:15:33,000 --> 00:15:37,770
<font color="#E5E5E5">met a question you can think</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> in</font>

382
00:15:35,430 --> 00:15:39,540
lots of<font color="#CCCCCC"> contexts</font><font color="#E5E5E5"> it's largely</font><font color="#CCCCCC"> unexplored</font>

383
00:15:37,770 --> 00:15:42,510
<font color="#CCCCCC">except for</font><font color="#E5E5E5"> this work in the application</font>

384
00:15:39,540 --> 00:15:44,430
work<font color="#CCCCCC"> and I</font><font color="#E5E5E5"> think we're not necessarily</font>

385
00:15:42,510 --> 00:15:48,360
settled on the right modeling or the

386
00:15:44,430 --> 00:15:49,949
right set of<font color="#CCCCCC"> definitions</font><font color="#E5E5E5"> and in our work</font>

387
00:15:48,360 --> 00:15:51,660
<font color="#E5E5E5">we sort of show that</font><font color="#CCCCCC"> updatable</font>

388
00:15:49,950 --> 00:15:53,640
randomized encodings is this huge hammer

389
00:15:51,660 --> 00:15:55,199
<font color="#E5E5E5">but it also requires functional</font>

390
00:15:53,640 --> 00:15:56,430
encryption<font color="#E5E5E5"> and in fact functional</font>

391
00:15:55,200 --> 00:15:59,160
encryption I didn't<font color="#CCCCCC"> mention I should</font>

392
00:15:56,430 --> 00:16:01,589
have is also<font color="#E5E5E5"> necessary sort of if you</font>

393
00:15:59,160 --> 00:16:02,699
have a compact<font color="#CCCCCC"> updatable randomized</font>

394
00:16:01,590 --> 00:16:06,270
encoding you can get a functional

395
00:16:02,700 --> 00:16:09,150
encryption<font color="#E5E5E5"> of the type that</font><font color="#CCCCCC"> we need</font><font color="#E5E5E5"> but</font>

396
00:16:06,270 --> 00:16:10,680
we<font color="#CCCCCC"> also see that for car build circuits</font>

397
00:16:09,150 --> 00:16:13,740
we can do<font color="#E5E5E5"> something from lattices</font>

398
00:16:10,680 --> 00:16:15,540
so<font color="#E5E5E5"> think about direct constructions for</font>

399
00:16:13,740 --> 00:16:17,220
<font color="#E5E5E5">individual primitives the ones that</font>

400
00:16:15,540 --> 00:16:18,780
you're interested in<font color="#CCCCCC"> you could do</font>

401
00:16:17,220 --> 00:16:21,420
<font color="#E5E5E5">something much better</font><font color="#CCCCCC"> potentially than</font>

402
00:16:18,780 --> 00:16:23,189
what we do<font color="#E5E5E5"> and</font><font color="#CCCCCC"> also sort of</font><font color="#E5E5E5"> the new</font>

403
00:16:21,420 --> 00:16:25,920
types of<font color="#E5E5E5"> questions like the obfuscation</font>

404
00:16:23,190 --> 00:16:28,590
works presented<font color="#CCCCCC"> lower bounds updating</font>

405
00:16:25,920 --> 00:16:31,500
many things at<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same time</font><font color="#E5E5E5"> it's</font>

406
00:16:28,590 --> 00:16:33,570
largely unexplored<font color="#E5E5E5"> and</font><font color="#CCCCCC"> now with the</font><font color="#E5E5E5"> four</font>

407
00:16:31,500 --> 00:16:36,300
minutes I have I'm<font color="#E5E5E5"> going to try to tell</font>

408
00:16:33,570 --> 00:16:40,290
you a<font color="#E5E5E5"> construction of obtainable garbled</font>

409
00:16:36,300 --> 00:16:42,240
circuits from lattices<font color="#CCCCCC"> okay so here's</font>

410
00:16:40,290 --> 00:16:44,040
the<font color="#E5E5E5"> picture I promised here's obtainable</font>

411
00:16:42,240 --> 00:16:46,290
garbled circuits<font color="#CCCCCC"> so now I'm gonna</font><font color="#E5E5E5"> change</font>

412
00:16:44,040 --> 00:16:47,730
<font color="#E5E5E5">notation to go back to sort</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

413
00:16:46,290 --> 00:16:49,949
notation<font color="#E5E5E5"> of garbled circuits where I</font>

414
00:16:47,730 --> 00:16:51,570
separate the circuit in<font color="#E5E5E5"> the input so</font>

415
00:16:49,950 --> 00:16:54,600
when it garble the circuit<font color="#E5E5E5"> get this</font>

416
00:16:51,570 --> 00:16:56,910
green thing<font color="#E5E5E5"> on the right and then garble</font>

417
00:16:54,600 --> 00:16:59,040
the update which will<font color="#E5E5E5"> allow</font><font color="#CCCCCC"> me to take</font>

418
00:16:56,910 --> 00:17:02,280
<font color="#CCCCCC">the garbled circuit C to get</font><font color="#E5E5E5"> a garbled</font>

419
00:16:59,040 --> 00:17:03,930
circuit C<font color="#CCCCCC"> prime</font><font color="#E5E5E5"> and at the end</font><font color="#CCCCCC"> the</font>

420
00:17:02,280 --> 00:17:05,970
authority is<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> garble the input X</font>

421
00:17:03,930 --> 00:17:09,119
and this input<font color="#E5E5E5"> is gonna allow you to</font>

422
00:17:05,970 --> 00:17:11,490
decode C prime of<font color="#E5E5E5"> X but not but</font><font color="#CCCCCC"> not C of</font>

423
00:17:09,119 --> 00:17:13,409
X<font color="#E5E5E5"> you only get it's a one-shot</font>

424
00:17:11,490 --> 00:17:15,540
evaluation you only get the evaluation

425
00:17:13,410 --> 00:17:19,050
<font color="#CCCCCC">yeah</font><font color="#E5E5E5"> and you need this last thing from</font>

426
00:17:15,540 --> 00:17:23,550
<font color="#E5E5E5">them from the authority that's the</font>

427
00:17:19,050 --> 00:17:25,829
<font color="#E5E5E5">picture so let's start just with garbled</font>

428
00:17:23,550 --> 00:17:27,448
circuits so<font color="#E5E5E5"> yahwah's garbled circuit</font>

429
00:17:25,829 --> 00:17:29,370
<font color="#CCCCCC">construction you take a circuit and for</font>

430
00:17:27,449 --> 00:17:31,710
every gate you do you make this garbled

431
00:17:29,370 --> 00:17:34,830
gate on the right<font color="#E5E5E5"> right each gate has a</font>

432
00:17:31,710 --> 00:17:37,860
thing on the<font color="#CCCCCC"> right those are the</font><font color="#E5E5E5"> garbled</font>

433
00:17:34,830 --> 00:17:40,260
gates<font color="#E5E5E5"> so let's just let's just try to do</font>

434
00:17:37,860 --> 00:17:42,928
<font color="#E5E5E5">it let's just try to update right so now</font>

435
00:17:40,260 --> 00:17:46,110
<font color="#CCCCCC">let's say I change</font><font color="#E5E5E5"> this that</font><font color="#CCCCCC"> and that or</font>

436
00:17:42,929 --> 00:17:46,740
gate to a NAND gate<font color="#E5E5E5"> so to generate</font>

437
00:17:46,110 --> 00:17:50,729
<font color="#E5E5E5">update</font><font color="#CCCCCC"> I'm</font>

438
00:17:46,740 --> 00:17:52,050
just gonna<font color="#E5E5E5"> I have all the secrets</font><font color="#CCCCCC"> the</font>

439
00:17:50,730 --> 00:17:54,300
authority<font color="#E5E5E5"> has all the secrets</font>

440
00:17:52,050 --> 00:17:57,270
so just recompute this garbled table

441
00:17:54,300 --> 00:17:59,610
this garbled gate on the<font color="#E5E5E5"> right okay</font>

442
00:17:57,270 --> 00:18:01,530
so certainly you<font color="#E5E5E5"> can apply the update</font>

443
00:17:59,610 --> 00:18:03,570
you<font color="#CCCCCC"> can take out the one gate and put in</font>

444
00:18:01,530 --> 00:18:05,580
the new gate<font color="#E5E5E5"> and this is all well</font><font color="#CCCCCC"> and</font>

445
00:18:03,570 --> 00:18:07,800
good<font color="#E5E5E5"> you certainly get efficiency and</font>

446
00:18:05,580 --> 00:18:08,250
change one gate<font color="#CCCCCC"> I generate one garbled</font>

447
00:18:07,800 --> 00:18:10,320
gate

448
00:18:08,250 --> 00:18:12,240
I get correctness you can evaluate the

449
00:18:10,320 --> 00:18:13,860
<font color="#CCCCCC">new circuit</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> I don't get</font><font color="#E5E5E5"> security</font>

450
00:18:12,240 --> 00:18:15,990
<font color="#E5E5E5">because you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> still evaluate the</font>

451
00:18:13,860 --> 00:18:17,459
original garbled circuit and maybe you

452
00:18:15,990 --> 00:18:21,090
can just break the<font color="#CCCCCC"> whole thing</font><font color="#E5E5E5"> and learn</font>

453
00:18:17,460 --> 00:18:23,190
<font color="#CCCCCC">learn</font><font color="#E5E5E5"> the circuit so now I want to fix</font>

454
00:18:21,090 --> 00:18:24,659
<font color="#CCCCCC">security so how am I</font><font color="#E5E5E5"> gonna do it I don't</font>

455
00:18:23,190 --> 00:18:27,270
know how to do<font color="#E5E5E5"> many</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> but I know</font>

456
00:18:24,660 --> 00:18:29,940
how<font color="#E5E5E5"> to encrypt so I'm gonna encrypt</font>

457
00:18:27,270 --> 00:18:31,950
every garbled gate and it's a little

458
00:18:29,940 --> 00:18:34,020
<font color="#CCCCCC">confusing</font><font color="#E5E5E5"> I don't mean that the garbled</font>

459
00:18:31,950 --> 00:18:37,350
gate has a lot of encryptions<font color="#E5E5E5"> inside of</font>

460
00:18:34,020 --> 00:18:38,670
it it does but I'm gonna generate<font color="#E5E5E5"> the</font>

461
00:18:37,350 --> 00:18:40,290
garbled gate and then<font color="#E5E5E5"> encrypt the whole</font>

462
00:18:38,670 --> 00:18:43,020
thing with a new symmetric key

463
00:18:40,290 --> 00:18:44,190
encryption scheme fresh<font color="#E5E5E5"> keys for every</font>

464
00:18:43,020 --> 00:18:46,200
game<font color="#E5E5E5"> okay</font>

465
00:18:44,190 --> 00:18:50,340
this is still an attempt this won't be

466
00:18:46,200 --> 00:18:52,050
the<font color="#E5E5E5"> final answer</font><font color="#CCCCCC"> and then at the end I'm</font>

467
00:18:50,340 --> 00:18:53,580
<font color="#E5E5E5">gonna give you the new garbled gate and</font>

468
00:18:52,050 --> 00:18:55,770
then I'm going to<font color="#E5E5E5"> give you one key for</font>

469
00:18:53,580 --> 00:18:57,300
every<font color="#E5E5E5"> gate that I didn't</font><font color="#CCCCCC"> update which</font>

470
00:18:55,770 --> 00:19:01,650
<font color="#CCCCCC">will allow you to open those encryptions</font>

471
00:18:57,300 --> 00:19:03,928
<font color="#E5E5E5">so this is great it's correct</font><font color="#CCCCCC"> still</font><font color="#E5E5E5"> it's</font>

472
00:19:01,650 --> 00:19:06,000
secure but<font color="#E5E5E5"> now I don't have efficiency</font>

473
00:19:03,929 --> 00:19:08,610
anymore right because I give you one key

474
00:19:06,000 --> 00:19:10,440
for<font color="#CCCCCC"> every gate I</font><font color="#E5E5E5"> didn't</font><font color="#CCCCCC"> update and I</font>

475
00:19:08,610 --> 00:19:12,899
gave<font color="#E5E5E5"> you a gate for every gate I updated</font>

476
00:19:10,440 --> 00:19:18,890
so I give<font color="#E5E5E5"> you something</font><font color="#CCCCCC"> as big</font><font color="#E5E5E5"> as the</font>

477
00:19:12,900 --> 00:19:21,720
circuit<font color="#E5E5E5"> okay so now how do we do better</font>

478
00:19:18,890 --> 00:19:23,690
<font color="#E5E5E5">let's use a punctured encryption scheme</font>

479
00:19:21,720 --> 00:19:27,690
so this is sort<font color="#CCCCCC"> of inspired by</font>

480
00:19:23,690 --> 00:19:30,030
puncturing<font color="#E5E5E5"> techniques so I'm gonna</font>

481
00:19:27,690 --> 00:19:32,400
encrypt<font color="#E5E5E5"> all the gates with the same key</font>

482
00:19:30,030 --> 00:19:34,590
instead<font color="#E5E5E5"> of different keys every time and</font>

483
00:19:32,400 --> 00:19:37,559
when I<font color="#CCCCCC"> update a gate I'm gonna give you</font>

484
00:19:34,590 --> 00:19:40,199
the decryption<font color="#E5E5E5"> key punctured on the gate</font>

485
00:19:37,559 --> 00:19:42,240
I<font color="#E5E5E5"> updated so what does it mean for a key</font>

486
00:19:40,200 --> 00:19:43,890
<font color="#E5E5E5">to be punctured it means it can decrypt</font>

487
00:19:42,240 --> 00:19:45,690
all<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ciphertext that I wanted</font><font color="#E5E5E5"> to</font>

488
00:19:43,890 --> 00:19:48,120
decrypt except for the one except for

489
00:19:45,690 --> 00:19:50,250
<font color="#CCCCCC">the one</font><font color="#E5E5E5"> I updated and this size of this</font>

490
00:19:48,120 --> 00:19:52,500
of this key is not<font color="#E5E5E5"> is</font><font color="#CCCCCC"> not big it doesn't</font>

491
00:19:50,250 --> 00:19:54,510
grow with the size of the circuit<font color="#E5E5E5"> and</font>

492
00:19:52,500 --> 00:19:56,250
since<font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> the symmetric key setting</font>

493
00:19:54,510 --> 00:19:57,900
this can be constructed<font color="#CCCCCC"> from just</font>

494
00:19:56,250 --> 00:20:00,090
puncture below pseudo-random functions

495
00:19:57,900 --> 00:20:04,230
which can<font color="#CCCCCC"> be constructed from one way</font>

496
00:20:00,090 --> 00:20:06,870
function just<font color="#E5E5E5"> the GGN PRF will let you</font>

497
00:20:04,230 --> 00:20:10,140
do this so this gets me everything I

498
00:20:06,870 --> 00:20:11,549
want<font color="#E5E5E5"> except I can only update once you</font>

499
00:20:10,140 --> 00:20:15,000
know<font color="#E5E5E5"> once I remove all the encryptions</font>

500
00:20:11,549 --> 00:20:18,049
I've done I can't go further so the last

501
00:20:15,000 --> 00:20:22,320
idea to<font color="#E5E5E5"> get many</font><font color="#CCCCCC"> updates</font><font color="#E5E5E5"> is to use</font>

502
00:20:18,049 --> 00:20:25,918
symmetric<font color="#CCCCCC"> part seria encryption ok so</font>

503
00:20:22,320 --> 00:20:27,689
what is what is proxy encryption do it

504
00:20:25,919 --> 00:20:29,279
says that if I want to transform

505
00:20:27,690 --> 00:20:31,320
ciphertext<font color="#CCCCCC"> if I want to let you</font>

506
00:20:29,279 --> 00:20:33,990
<font color="#CCCCCC">transform ciphertext from the blue to</font>

507
00:20:31,320 --> 00:20:35,580
the<font color="#CCCCCC"> red key there's some blue red key</font><font color="#E5E5E5"> I</font>

508
00:20:33,990 --> 00:20:39,240
<font color="#E5E5E5">can generate which will let you compute</font>

509
00:20:35,580 --> 00:20:42,029
the transformation<font color="#E5E5E5"> a punctured proxy or</font>

510
00:20:39,240 --> 00:20:43,620
encryption scheme<font color="#CCCCCC"> it sort of does the</font>

511
00:20:42,029 --> 00:20:46,080
<font color="#CCCCCC">same thing but I can puncture the rien</font>

512
00:20:43,620 --> 00:20:47,580
<font color="#CCCCCC">Krypton key so this blue red key will</font>

513
00:20:46,080 --> 00:20:49,139
only let you transform all<font color="#CCCCCC"> the</font>

514
00:20:47,580 --> 00:20:52,470
ciphertext<font color="#E5E5E5"> except for the one I don't</font>

515
00:20:49,140 --> 00:20:54,720
<font color="#E5E5E5">want you to transform so in the example</font>

516
00:20:52,470 --> 00:20:56,730
<font color="#E5E5E5">I it's punctured a</font><font color="#CCCCCC"> - I can transform 1 &</font>

517
00:20:54,720 --> 00:20:59,909
<font color="#CCCCCC">3 and</font><font color="#E5E5E5"> then the next key is punctured at</font>

518
00:20:56,730 --> 00:21:03,480
<font color="#E5E5E5">one I can only transform 3 and security</font>

519
00:20:59,909 --> 00:21:05,970
is security<font color="#CCCCCC"> holds if I give you these</font>

520
00:21:03,480 --> 00:21:08,159
<font color="#CCCCCC">two punctured keys and the green key at</font>

521
00:21:05,970 --> 00:21:10,380
the end<font color="#E5E5E5"> which will let me which will let</font>

522
00:21:08,159 --> 00:21:12,779
you<font color="#E5E5E5"> decrypt the green cipher text</font><font color="#CCCCCC"> so</font>

523
00:21:10,380 --> 00:21:14,669
<font color="#E5E5E5">even given all these keys 1</font><font color="#CCCCCC"> &</font><font color="#E5E5E5"> 2 should</font>

524
00:21:12,779 --> 00:21:19,080
be<font color="#E5E5E5"> hidden</font><font color="#CCCCCC"> this is the security</font><font color="#E5E5E5"> property</font>

525
00:21:14,669 --> 00:21:20,850
I'm<font color="#CCCCCC"> gonna need and such a such a</font>

526
00:21:19,080 --> 00:21:23,309
punctured proxy<font color="#E5E5E5"> or encryption scheme can</font>

527
00:21:20,850 --> 00:21:23,879
<font color="#CCCCCC">be built from chioma morphic</font><font color="#E5E5E5"> constrained</font>

528
00:21:23,309 --> 00:21:26,730
<font color="#E5E5E5">payoffs</font>

529
00:21:23,880 --> 00:21:29,070
so<font color="#E5E5E5"> symmetric encryption can be built</font>

530
00:21:26,730 --> 00:21:30,090
<font color="#E5E5E5">from</font><font color="#CCCCCC"> kim amorphic paragraphs to get</font>

531
00:21:29,070 --> 00:21:31,320
punctured

532
00:21:30,090 --> 00:21:32,668
<font color="#CCCCCC">Riaan</font><font color="#E5E5E5"> crip shin you can do it from</font>

533
00:21:31,320 --> 00:21:35,120
<font color="#CCCCCC">constrained kimura perhaps the</font>

534
00:21:32,669 --> 00:21:37,909
construction<font color="#E5E5E5"> looks a lot like the</font>

535
00:21:35,120 --> 00:21:42,270
<font color="#E5E5E5">construction and work of pushed off my</font>

536
00:21:37,909 --> 00:21:43,980
<font color="#E5E5E5">esteemed a chair of the session but</font><font color="#CCCCCC"> to</font>

537
00:21:42,270 --> 00:21:47,370
see we need<font color="#CCCCCC"> a stronger security</font><font color="#E5E5E5"> property</font>

538
00:21:43,980 --> 00:21:50,220
than they<font color="#E5E5E5"> prove so I'm out of time</font><font color="#CCCCCC"> so</font>

539
00:21:47,370 --> 00:21:52,260
<font color="#CCCCCC">what</font><font color="#E5E5E5"> am I gonna do I'm gonna go I'm</font>

540
00:21:50,220 --> 00:21:54,299
gonna encrypt the circuit gate by gate

541
00:21:52,260 --> 00:21:56,520
just<font color="#E5E5E5"> like I did</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> and at every step</font>

542
00:21:54,299 --> 00:21:59,220
<font color="#E5E5E5">I'm gonna give you the updated sorry the</font>

543
00:21:56,520 --> 00:22:01,230
updated<font color="#E5E5E5"> kate encrypted under the new key</font>

544
00:21:59,220 --> 00:22:03,390
and the<font color="#CCCCCC"> rien</font><font color="#E5E5E5"> crip</font><font color="#CCCCCC"> shin key that will let</font>

545
00:22:01,230 --> 00:22:05,399
you transform all of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ciphertext from</font>

546
00:22:03,390 --> 00:22:07,590
one key to the<font color="#E5E5E5"> next and then you can</font>

547
00:22:05,399 --> 00:22:09,149
continue continue and at the end with

548
00:22:07,590 --> 00:22:10,918
the<font color="#E5E5E5"> garbled input I'm gonna send you the</font>

549
00:22:09,149 --> 00:22:13,709
last key which will allow you to decrypt

550
00:22:10,919 --> 00:22:14,340
everything and evaluate you get

551
00:22:13,710 --> 00:22:18,090
<font color="#E5E5E5">efficiency</font>

552
00:22:14,340 --> 00:22:19,860
correctly<font color="#CCCCCC"> secret</font><font color="#E5E5E5"> security</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> it</font>

553
00:22:18,090 --> 00:22:22,799
<font color="#E5E5E5">that's the story</font>

554
00:22:19,860 --> 00:22:25,379
okay thanks look<font color="#E5E5E5"> for</font><font color="#CCCCCC"> this very nice</font>

555
00:22:22,799 --> 00:22:27,418
<font color="#CCCCCC">sculpt so we have time for one or two</font>

556
00:22:25,380 --> 00:22:34,230
short<font color="#CCCCCC"> questions while the</font><font color="#E5E5E5"> next speaker</font>

557
00:22:27,419 --> 00:22:36,480
sets up any questions<font color="#CCCCCC"> so maybe</font><font color="#E5E5E5"> let me</font>

558
00:22:34,230 --> 00:22:43,549
ask one<font color="#E5E5E5"> so what would be like a kill</font>

559
00:22:36,480 --> 00:22:45,539
application for those circuits

560
00:22:43,549 --> 00:22:47,908
obtainable garbled circuits I think

561
00:22:45,539 --> 00:22:49,919
there's not yet a killer<font color="#CCCCCC"> application I</font>

562
00:22:47,909 --> 00:22:51,809
think<font color="#CCCCCC"> it's just</font><font color="#E5E5E5"> the supernatural</font>

563
00:22:49,919 --> 00:22:54,179
question<font color="#E5E5E5"> it's not clear how to answer</font>

564
00:22:51,809 --> 00:22:56,610
<font color="#CCCCCC">will you</font><font color="#E5E5E5"> ask repeatable randomized</font>

565
00:22:54,179 --> 00:22:58,590
encodings<font color="#E5E5E5"> you get all the you get all</font>

566
00:22:56,610 --> 00:23:00,629
<font color="#E5E5E5">the applications on the left and if</font>

567
00:22:58,590 --> 00:23:02,668
we're<font color="#CCCCCC"> thinking about updatable anything</font>

568
00:23:00,630 --> 00:23:04,620
obtainable<font color="#E5E5E5"> X Y Z I don't know</font>

569
00:23:02,669 --> 00:23:06,929
pick your<font color="#CCCCCC"> favorite application</font><font color="#E5E5E5"> make it</font>

570
00:23:04,620 --> 00:23:09,059
<font color="#CCCCCC">updatable so I just think that</font><font color="#E5E5E5"> for</font>

571
00:23:06,929 --> 00:23:11,309
<font color="#CCCCCC">example</font><font color="#E5E5E5"> up not having to re up this gate</font>

572
00:23:09,059 --> 00:23:13,110
if you change one gate it's a it's a

573
00:23:11,309 --> 00:23:16,070
natural<font color="#E5E5E5"> property to want to require from</font>

574
00:23:13,110 --> 00:23:16,070
an obfuscation scheme

