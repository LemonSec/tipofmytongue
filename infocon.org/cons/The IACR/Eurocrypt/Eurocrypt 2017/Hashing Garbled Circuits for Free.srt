1
00:00:00,410 --> 00:00:04,950
thank you<font color="#E5E5E5"> I'll be talking about hashing</font>

2
00:00:03,330 --> 00:00:06,779
<font color="#CCCCCC">garbled circuits for free and</font><font color="#E5E5E5"> this is</font>

3
00:00:04,950 --> 00:00:10,230
joint work with<font color="#CCCCCC"> Zhang</font><font color="#E5E5E5"> fan and</font><font color="#CCCCCC"> blackulas</font>

4
00:00:06,779 --> 00:00:11,730
<font color="#CCCCCC">Nichols</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> garble</font><font color="#E5E5E5"> circuits is one of the</font>

5
00:00:10,230 --> 00:00:14,599
main<font color="#CCCCCC"> techniques for secure computation</font>

6
00:00:11,730 --> 00:00:16,529
<font color="#E5E5E5">and today a primitive in its own right</font>

7
00:00:14,599 --> 00:00:19,170
<font color="#E5E5E5">hashing garbled circuits could</font>

8
00:00:16,529 --> 00:00:20,970
potentially come up in many applications

9
00:00:19,170 --> 00:00:23,880
of garbled circuits like<font color="#CCCCCC"> cut</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> choose</font>

10
00:00:20,970 --> 00:00:25,848
for<font color="#CCCCCC"> two-party computation private</font>

11
00:00:23,880 --> 00:00:28,198
certified functions for<font color="#E5E5E5"> credentials</font>

12
00:00:25,849 --> 00:00:31,769
<font color="#E5E5E5">encrypted database systems like</font><font color="#CCCCCC"> blinds</font>

13
00:00:28,199 --> 00:00:33,540
<font color="#CCCCCC">here</font><font color="#E5E5E5"> and so on</font><font color="#CCCCCC"> a natural way to</font><font color="#E5E5E5"> hash a</font>

14
00:00:31,769 --> 00:00:35,280
<font color="#E5E5E5">garbled circuit is to first generate the</font>

15
00:00:33,540 --> 00:00:37,469
garbage circuit and then use a<font color="#E5E5E5"> hash</font>

16
00:00:35,280 --> 00:00:39,719
function like sha on the garbled circuit

17
00:00:37,469 --> 00:00:41,969
string but when we look at<font color="#E5E5E5"> the relative</font>

18
00:00:39,719 --> 00:00:44,910
<font color="#E5E5E5">cost of fixed key cipher gobbling and</font>

19
00:00:41,969 --> 00:00:47,850
hashing the cost could vary depending on

20
00:00:44,910 --> 00:00:50,429
the architecture<font color="#CCCCCC"> but with fast hardware</font>

21
00:00:47,850 --> 00:00:54,840
<font color="#E5E5E5">AES implementations gobbling is fast and</font>

22
00:00:50,430 --> 00:00:57,600
<font color="#CCCCCC">often times shy is the bottleneck</font><font color="#E5E5E5"> so in</font>

23
00:00:54,840 --> 00:00:59,520
on<font color="#E5E5E5"> typical computing platforms of today</font>

24
00:00:57,600 --> 00:01:01,410
hashing<font color="#CCCCCC"> or garbled circuit could cost up</font>

25
00:00:59,520 --> 00:01:04,080
<font color="#CCCCCC">to six</font><font color="#E5E5E5"> times more than that</font><font color="#CCCCCC"> of</font>

26
00:01:01,410 --> 00:01:06,658
generating a garbled circuit so in this

27
00:01:04,080 --> 00:01:08,490
work<font color="#CCCCCC"> we study free hashing which allows</font>

28
00:01:06,659 --> 00:01:10,860
for<font color="#E5E5E5"> hashing a garbled circuit at no</font>

29
00:01:08,490 --> 00:01:13,770
additional cost<font color="#CCCCCC"> during the generation</font><font color="#E5E5E5"> of</font>

30
00:01:10,860 --> 00:01:15,780
the GC itself<font color="#CCCCCC"> and we see</font><font color="#E5E5E5"> that</font>

31
00:01:13,770 --> 00:01:17,580
eliminating the cost of GC hashing

32
00:01:15,780 --> 00:01:20,909
significantly improves performance in

33
00:01:17,580 --> 00:01:22,710
<font color="#E5E5E5">many applications one of our motivating</font>

34
00:01:20,909 --> 00:01:25,259
applications is an attribute based

35
00:01:22,710 --> 00:01:27,658
credential verification where we have a

36
00:01:25,259 --> 00:01:29,189
<font color="#E5E5E5">proven with an input who wishes to prove</font>

37
00:01:27,659 --> 00:01:31,770
in zero<font color="#E5E5E5"> knowledge that his input</font>

38
00:01:29,189 --> 00:01:33,360
satisfies a<font color="#CCCCCC"> certain policy</font><font color="#E5E5E5"> and we are</font>

39
00:01:31,770 --> 00:01:35,339
interested in the setting<font color="#E5E5E5"> where the</font>

40
00:01:33,360 --> 00:01:38,009
verifiers<font color="#E5E5E5"> policy function is also</font>

41
00:01:35,340 --> 00:01:39,780
private so standard<font color="#CCCCCC"> cut</font><font color="#E5E5E5"> and choose</font>

42
00:01:38,009 --> 00:01:41,670
approaches do not seem<font color="#CCCCCC"> to work here</font>

43
00:01:39,780 --> 00:01:45,149
since the check circuits<font color="#E5E5E5"> reveal the</font>

44
00:01:41,670 --> 00:01:46,799
evaluated<font color="#CCCCCC"> policy function in a setting</font>

45
00:01:45,149 --> 00:01:49,259
<font color="#CCCCCC">where</font><font color="#E5E5E5"> or certificate authorities</font>

46
00:01:46,799 --> 00:01:51,860
available we can have the CA certify the

47
00:01:49,259 --> 00:01:54,540
correct generation of<font color="#E5E5E5"> garbled circuits</font>

48
00:01:51,860 --> 00:01:56,700
so here is the setting we are interested

49
00:01:54,540 --> 00:01:59,340
in<font color="#CCCCCC"> where hashed garble circuits could</font><font color="#E5E5E5"> be</font>

50
00:01:56,700 --> 00:02:01,350
applied<font color="#E5E5E5"> in</font><font color="#CCCCCC"> a straightforward way</font><font color="#E5E5E5"> we have</font>

51
00:01:59,340 --> 00:02:02,640
a proven<font color="#CCCCCC"> very fire and a</font><font color="#E5E5E5"> certificate</font>

52
00:02:01,350 --> 00:02:05,850
authority with the<font color="#CCCCCC"> signing</font><font color="#E5E5E5"> and</font>

53
00:02:02,640 --> 00:02:08,520
verification key the CA begins by

54
00:02:05,850 --> 00:02:10,889
generating<font color="#E5E5E5"> many</font><font color="#CCCCCC"> seeds to be</font><font color="#E5E5E5"> used as</font>

55
00:02:08,520 --> 00:02:12,800
<font color="#E5E5E5">seeds of a pseudo-random generator and</font>

56
00:02:10,889 --> 00:02:15,799
then garbles

57
00:02:12,800 --> 00:02:17,600
generates the garbled<font color="#CCCCCC"> circuit for the</font>

58
00:02:15,800 --> 00:02:20,090
circuit<font color="#E5E5E5"> that represents the policy</font>

59
00:02:17,600 --> 00:02:22,359
function of the verifier and he<font color="#CCCCCC"> uses the</font>

60
00:02:20,090 --> 00:02:27,380
randomness that<font color="#CCCCCC"> is generated</font><font color="#E5E5E5"> by using</font>

61
00:02:22,360 --> 00:02:29,690
the seed s now he computes the hash of

62
00:02:27,380 --> 00:02:31,820
the garbled circuit<font color="#E5E5E5"> signs the hash and</font>

63
00:02:29,690 --> 00:02:34,579
sends the seed<font color="#E5E5E5"> and the signature to the</font>

64
00:02:31,820 --> 00:02:36,350
verifier later in the online phase the

65
00:02:34,580 --> 00:02:38,390
verifier can reconstruct the garbage

66
00:02:36,350 --> 00:02:40,700
circuit using<font color="#CCCCCC"> the randomness generated</font>

67
00:02:38,390 --> 00:02:42,589
from the seed and she sends<font color="#E5E5E5"> the garbage</font>

68
00:02:40,700 --> 00:02:45,560
circuit along with the<font color="#CCCCCC"> CS</font><font color="#E5E5E5"> signature to</font>

69
00:02:42,590 --> 00:02:47,510
the probe<font color="#E5E5E5"> the prover can compute the</font>

70
00:02:45,560 --> 00:02:49,610
hash of the garbled circuit and he

71
00:02:47,510 --> 00:02:52,489
proceeds to evaluate the garbage circuit

72
00:02:49,610 --> 00:02:56,600
only<font color="#CCCCCC"> if the signature of</font><font color="#E5E5E5"> the CA verifies</font>

73
00:02:52,490 --> 00:02:59,060
<font color="#E5E5E5">a similar idea can be used</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> general</font>

74
00:02:56,600 --> 00:03:01,100
<font color="#CCCCCC">yucatan shows protocols this was first</font>

75
00:02:59,060 --> 00:03:05,510
formalized by<font color="#CCCCCC"> Goyal maahes allen</font><font color="#E5E5E5"> Smith</font>

76
00:03:01,100 --> 00:03:07,370
in 2008<font color="#E5E5E5"> where a party p1 uses a seed to</font>

77
00:03:05,510 --> 00:03:09,170
construct many garbled circuits<font color="#CCCCCC"> and</font>

78
00:03:07,370 --> 00:03:11,000
instead of sending all the<font color="#E5E5E5"> garbled</font>

79
00:03:09,170 --> 00:03:14,359
circuits to party p2 he sends many

80
00:03:11,000 --> 00:03:16,130
hashes<font color="#E5E5E5"> and if the</font><font color="#CCCCCC"> eyuth garbled circuit</font>

81
00:03:14,360 --> 00:03:19,489
has chosen to<font color="#CCCCCC"> be your</font><font color="#E5E5E5"> check circuit or</font>

82
00:03:16,130 --> 00:03:21,140
p1 reveals the seed<font color="#CCCCCC"> si and p2 can</font>

83
00:03:19,489 --> 00:03:25,160
reconstruct<font color="#E5E5E5"> the</font><font color="#CCCCCC"> I odd garbage circuit</font>

84
00:03:21,140 --> 00:03:27,109
and verify the hash so<font color="#E5E5E5"> GM s and all</font>

85
00:03:25,160 --> 00:03:29,239
subsequent protocols that use this idea

86
00:03:27,110 --> 00:03:32,300
<font color="#CCCCCC">use a collision resistant hash to</font><font color="#E5E5E5"> trade</font>

87
00:03:29,239 --> 00:03:34,220
<font color="#E5E5E5">off computation for communication and we</font>

88
00:03:32,300 --> 00:03:37,610
can ask if<font color="#E5E5E5"> our free hash construction</font>

89
00:03:34,220 --> 00:03:39,260
can be used in all these<font color="#E5E5E5"> protocols so</font>

90
00:03:37,610 --> 00:03:41,360
here is a summary of our<font color="#E5E5E5"> results we</font>

91
00:03:39,260 --> 00:03:44,209
begin by<font color="#E5E5E5"> giving a definition</font><font color="#CCCCCC"> for gobble</font>

92
00:03:41,360 --> 00:03:45,800
circuit hash security<font color="#E5E5E5"> and then give hash</font>

93
00:03:44,209 --> 00:03:47,360
<font color="#E5E5E5">to gobbling constructions both for</font>

94
00:03:45,800 --> 00:03:50,270
standard gobbling<font color="#E5E5E5"> and</font><font color="#CCCCCC"> state of the art</font>

95
00:03:47,360 --> 00:03:52,190
<font color="#E5E5E5">half gates construction we then</font>

96
00:03:50,270 --> 00:03:54,500
implement our construction and evaluate

97
00:03:52,190 --> 00:03:58,370
its performance<font color="#E5E5E5"> and finally discuss</font>

98
00:03:54,500 --> 00:04:00,320
<font color="#CCCCCC">applications of our constructions so</font>

99
00:03:58,370 --> 00:04:02,600
before I begin<font color="#E5E5E5"> let us quickly recall</font>

100
00:04:00,320 --> 00:04:04,640
<font color="#E5E5E5">what</font><font color="#CCCCCC"> our gobbling schemas so we have a</font>

101
00:04:02,600 --> 00:04:07,310
couple<font color="#E5E5E5"> of algorithms guard will encode</font>

102
00:04:04,640 --> 00:04:09,079
eval and decode garble<font color="#E5E5E5"> is a randomized</font>

103
00:04:07,310 --> 00:04:11,120
algorithm<font color="#E5E5E5"> that takes a circuit and</font>

104
00:04:09,080 --> 00:04:13,850
outputs a<font color="#E5E5E5"> garbled circuit along with</font>

105
00:04:11,120 --> 00:04:16,160
encoding and decoding information or the

106
00:04:13,850 --> 00:04:18,140
encode algorithm takes the plaintext

107
00:04:16,160 --> 00:04:21,260
input and the encoding<font color="#E5E5E5"> information and</font>

108
00:04:18,140 --> 00:04:23,180
outputs a garbled input eval<font color="#CCCCCC"> takes the</font>

109
00:04:21,260 --> 00:04:25,880
garbled circuit and the garbled input

110
00:04:23,180 --> 00:04:26,330
and gives a garbled output decode takes

111
00:04:25,880 --> 00:04:28,250
a<font color="#E5E5E5"> guard</font>

112
00:04:26,330 --> 00:04:30,560
output and the decoding information and

113
00:04:28,250 --> 00:04:33,470
gives the<font color="#E5E5E5"> plain circuit output we want</font>

114
00:04:30,560 --> 00:04:35,810
correctness<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> after evaluating the</font>

115
00:04:33,470 --> 00:04:38,360
<font color="#E5E5E5">garbled circuit if we</font><font color="#CCCCCC"> decode the garbled</font>

116
00:04:35,810 --> 00:04:40,879
output it should be equal<font color="#CCCCCC"> to C</font><font color="#E5E5E5"> of X and</font>

117
00:04:38,360 --> 00:04:42,650
for security<font color="#CCCCCC"> we want privacy</font><font color="#E5E5E5"> that is the</font>

118
00:04:40,879 --> 00:04:44,030
garbled circuit garbled<font color="#E5E5E5"> input and the</font>

119
00:04:42,650 --> 00:04:46,549
decoding<font color="#E5E5E5"> information should reveal</font>

120
00:04:44,030 --> 00:04:48,799
nothing<font color="#E5E5E5"> beyond C of X and authenticity</font>

121
00:04:46,550 --> 00:04:50,990
states that given<font color="#E5E5E5"> the</font><font color="#CCCCCC"> gobble circuit and</font>

122
00:04:48,800 --> 00:04:52,969
the garbled<font color="#E5E5E5"> input it's hard to find</font><font color="#CCCCCC"> the</font>

123
00:04:50,990 --> 00:04:56,180
<font color="#E5E5E5">garbled output that decodes</font><font color="#CCCCCC"> to something</font>

124
00:04:52,969 --> 00:04:58,310
other<font color="#E5E5E5"> than C of X in addition to these</font>

125
00:04:56,180 --> 00:05:00,560
standard properties we also want

126
00:04:58,310 --> 00:05:02,389
verifiability<font color="#CCCCCC"> which means that there is</font>

127
00:05:00,560 --> 00:05:04,669
an additional<font color="#E5E5E5"> algorithm called verify</font>

128
00:05:02,389 --> 00:05:07,039
that takes a circuit C and the

129
00:05:04,669 --> 00:05:09,590
perpetrate garbled circuit<font color="#E5E5E5"> C hat and</font>

130
00:05:07,039 --> 00:05:14,120
outputs<font color="#E5E5E5"> one if C hat is indeed a valid</font>

131
00:05:09,590 --> 00:05:15,888
<font color="#CCCCCC">gobbling of C and 0</font><font color="#E5E5E5"> otherwise so I'll</font>

132
00:05:14,120 --> 00:05:18,639
begin<font color="#CCCCCC"> by giving</font><font color="#E5E5E5"> our definition of</font>

133
00:05:15,889 --> 00:05:20,779
garbled circuit<font color="#CCCCCC"> our</font><font color="#E5E5E5"> security</font><font color="#CCCCCC"> the</font>

134
00:05:18,639 --> 00:05:22,639
<font color="#CCCCCC">high-level</font><font color="#E5E5E5"> idea is that we take</font>

135
00:05:20,779 --> 00:05:25,039
advantage<font color="#E5E5E5"> of the fact that the input to</font>

136
00:05:22,639 --> 00:05:27,020
<font color="#CCCCCC">hash is a garbled circuit</font><font color="#E5E5E5"> which means it</font>

137
00:05:25,039 --> 00:05:29,659
has to<font color="#CCCCCC"> be evaluated under the eval</font>

138
00:05:27,020 --> 00:05:31,310
<font color="#CCCCCC">function</font><font color="#E5E5E5"> and our definition</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to</font>

139
00:05:29,659 --> 00:05:33,949
be weaker than<font color="#E5E5E5"> the standard notion of</font>

140
00:05:31,310 --> 00:05:35,840
collision resistance<font color="#E5E5E5"> so given a</font>

141
00:05:33,949 --> 00:05:38,389
correctly generated garbled circuit<font color="#E5E5E5"> and</font>

142
00:05:35,840 --> 00:05:40,310
<font color="#CCCCCC">its corresponding</font><font color="#E5E5E5"> hash the adversary is</font>

143
00:05:38,389 --> 00:05:42,020
allowed to<font color="#E5E5E5"> come</font><font color="#CCCCCC"> up with another garbled</font>

144
00:05:40,310 --> 00:05:44,360
circuit<font color="#CCCCCC"> G C hat such that the hash</font>

145
00:05:42,020 --> 00:05:46,430
collides<font color="#E5E5E5"> but if that happens the</font>

146
00:05:44,360 --> 00:05:48,680
guarantee is<font color="#E5E5E5"> that the garbled circuit</font>

147
00:05:46,430 --> 00:05:52,490
property of<font color="#CCCCCC"> GC heart is broken which</font>

148
00:05:48,680 --> 00:05:54,620
means DC heart will fail to evaluate so

149
00:05:52,490 --> 00:05:56,210
here we have an adversary who outputs

150
00:05:54,620 --> 00:05:58,479
two different garbled circuits<font color="#E5E5E5"> along</font>

151
00:05:56,210 --> 00:06:02,419
with two<font color="#CCCCCC"> different encoding</font><font color="#E5E5E5"> information</font>

152
00:05:58,479 --> 00:06:04,310
<font color="#E5E5E5">decoding information D and hash edge now</font>

153
00:06:02,419 --> 00:06:07,698
say the two garbled circuits collide in

154
00:06:04,310 --> 00:06:09,259
their hash now we have that<font color="#E5E5E5"> if one of</font>

155
00:06:07,699 --> 00:06:12,020
<font color="#CCCCCC">the garbled</font><font color="#E5E5E5"> circuits say the green</font>

156
00:06:09,259 --> 00:06:14,419
garbage<font color="#CCCCCC"> socket verifies then the red</font>

157
00:06:12,020 --> 00:06:17,779
garbled circuit fails to evaluate that

158
00:06:14,419 --> 00:06:20,839
<font color="#E5E5E5">is a decoding the output</font><font color="#CCCCCC"> of eval on</font><font color="#E5E5E5"> the</font>

159
00:06:17,779 --> 00:06:22,520
red carpet circuit fails now<font color="#E5E5E5"> the</font>

160
00:06:20,839 --> 00:06:25,009
adversary<font color="#CCCCCC"> is allowed to come up with</font>

161
00:06:22,520 --> 00:06:26,330
<font color="#E5E5E5">green and red encoding</font><font color="#CCCCCC"> information</font>

162
00:06:25,009 --> 00:06:28,550
corresponding<font color="#CCCCCC"> to the two different</font>

163
00:06:26,330 --> 00:06:31,310
garbled circuits but the decoding

164
00:06:28,550 --> 00:06:33,259
information D is the same that<font color="#CCCCCC"> is the D</font>

165
00:06:31,310 --> 00:06:35,959
with<font color="#CCCCCC"> respect to which</font><font color="#E5E5E5"> the red garbled</font>

166
00:06:33,259 --> 00:06:37,699
circuit fails evaluation is the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> D</font>

167
00:06:35,959 --> 00:06:40,250
with<font color="#CCCCCC"> respect to which</font><font color="#E5E5E5"> the green garbage</font>

168
00:06:37,699 --> 00:06:42,530
<font color="#CCCCCC">socket passes verification</font>

169
00:06:40,250 --> 00:06:44,990
and this restriction<font color="#E5E5E5"> is essential for</font>

170
00:06:42,530 --> 00:06:47,510
<font color="#E5E5E5">higher</font><font color="#CCCCCC"> security because if we did not</font>

171
00:06:44,990 --> 00:06:49,670
place this<font color="#CCCCCC"> requirement or the adversary</font>

172
00:06:47,510 --> 00:06:52,670
can come up<font color="#CCCCCC"> with</font><font color="#E5E5E5"> D that simply decodes</font>

173
00:06:49,670 --> 00:06:57,770
<font color="#E5E5E5">any string returned by eval to arbitrary</font>

174
00:06:52,670 --> 00:07:01,700
outputs coming<font color="#CCCCCC"> to our</font><font color="#E5E5E5"> hashed garbling</font>

175
00:06:57,770 --> 00:07:03,590
constructions our<font color="#CCCCCC"> high-level idea</font><font color="#E5E5E5"> is to</font>

176
00:07:01,700 --> 00:07:05,750
intertwine the generation<font color="#E5E5E5"> of the hash</font>

177
00:07:03,590 --> 00:07:07,280
<font color="#CCCCCC">and verification of the hash with the</font>

178
00:07:05,750 --> 00:07:10,490
garbled circuit generation and

179
00:07:07,280 --> 00:07:12,590
evaluation we attempt this by

180
00:07:10,490 --> 00:07:15,770
<font color="#E5E5E5">maintaining a running hash as the XOR of</font>

181
00:07:12,590 --> 00:07:18,679
<font color="#E5E5E5">all the garbled rows so here we have an</font>

182
00:07:15,770 --> 00:07:20,599
example circuit<font color="#E5E5E5"> with two gates the</font>

183
00:07:18,680 --> 00:07:23,720
logical values on the wires are labeled

184
00:07:20,600 --> 00:07:26,780
<font color="#E5E5E5">and we have two keys corresponding to</font>

185
00:07:23,720 --> 00:07:29,050
the two values<font color="#E5E5E5"> on the wires so we have</font>

186
00:07:26,780 --> 00:07:32,059
<font color="#E5E5E5">GT</font><font color="#CCCCCC"> one which is a garbled table</font>

187
00:07:29,050 --> 00:07:35,090
corresponding<font color="#E5E5E5"> to the and gate</font><font color="#CCCCCC"> here so</font>

188
00:07:32,060 --> 00:07:37,070
this encrypts<font color="#CCCCCC"> the output wire labels c0</font>

189
00:07:35,090 --> 00:07:39,710
and c1 according to the<font color="#E5E5E5"> functionality</font><font color="#CCCCCC"> of</font>

190
00:07:37,070 --> 00:07:41,480
the and gate and<font color="#E5E5E5"> GT 2 is the garbled</font>

191
00:07:39,710 --> 00:07:43,400
table corresponding to the or gate<font color="#E5E5E5"> here</font>

192
00:07:41,480 --> 00:07:45,770
that encrypts the output wire label<font color="#CCCCCC"> a</font>

193
00:07:43,400 --> 00:07:48,349
according<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> or functionality and</font>

194
00:07:45,770 --> 00:07:51,049
the gobble circuit itself consists of

195
00:07:48,350 --> 00:07:53,500
the garbled tables and say we said the

196
00:07:51,050 --> 00:07:56,270
hash to be XOR of<font color="#E5E5E5"> all the garbled rows</font>

197
00:07:53,500 --> 00:07:57,919
so what can an adversary do now he can

198
00:07:56,270 --> 00:08:00,859
for example mount the following attack

199
00:07:57,919 --> 00:08:03,349
say he changes one of<font color="#E5E5E5"> the entries in GT</font>

200
00:08:00,860 --> 00:08:06,950
<font color="#CCCCCC">one so he changes the last</font><font color="#E5E5E5"> row here to</font>

201
00:08:03,350 --> 00:08:09,410
encrypt<font color="#E5E5E5"> c0 instead of C</font><font color="#CCCCCC"> one now we have</font>

202
00:08:06,950 --> 00:08:11,719
a<font color="#E5E5E5"> different garbled circuit GC hat but</font>

203
00:08:09,410 --> 00:08:14,840
this also<font color="#E5E5E5"> affects the running hash by</font>

204
00:08:11,720 --> 00:08:16,669
some offset<font color="#E5E5E5"> Delta now say the adversary</font>

205
00:08:14,840 --> 00:08:19,580
<font color="#CCCCCC">knows we're anywhere</font><font color="#E5E5E5"> in the circuit</font>

206
00:08:16,669 --> 00:08:21,919
there exists an inactive row he can

207
00:08:19,580 --> 00:08:25,580
change that entry by the<font color="#E5E5E5"> same offset</font>

208
00:08:21,919 --> 00:08:27,349
<font color="#E5E5E5">Delta which now fixes the hash and</font><font color="#CCCCCC"> since</font>

209
00:08:25,580 --> 00:08:29,870
this<font color="#E5E5E5"> row is not going to be used during</font>

210
00:08:27,350 --> 00:08:32,110
<font color="#CCCCCC">evaluation the adversary will not be</font>

211
00:08:29,870 --> 00:08:32,110
<font color="#E5E5E5">caught</font>

212
00:08:32,169 --> 00:08:37,610
<font color="#E5E5E5">so our refinement</font><font color="#CCCCCC"> of this approach is to</font>

213
00:08:35,360 --> 00:08:39,650
now make each gates<font color="#E5E5E5"> output wire label</font>

214
00:08:37,610 --> 00:08:42,890
<font color="#E5E5E5">depend on all entries of the garbled</font>

215
00:08:39,650 --> 00:08:45,290
<font color="#E5E5E5">table and the intuition is that the XOR</font>

216
00:08:42,890 --> 00:08:47,330
hash correction will now necessarily

217
00:08:45,290 --> 00:08:50,329
involve modifying an active garbled

218
00:08:47,330 --> 00:08:53,270
table entry thus affecting the computed

219
00:08:50,330 --> 00:08:54,050
output wire label of the gate so going

220
00:08:53,270 --> 00:08:57,199
back to our eggs

221
00:08:54,050 --> 00:08:59,689
ample circuit we now treat the output

222
00:08:57,200 --> 00:09:02,029
wire labels as temporary wire labels and

223
00:08:59,690 --> 00:09:05,630
change the way we define the<font color="#CCCCCC"> output wire</font>

224
00:09:02,029 --> 00:09:07,459
labels so now we have the<font color="#E5E5E5"> garbled tables</font>

225
00:09:05,630 --> 00:09:10,610
that<font color="#CCCCCC"> encrypt the temporary output wire</font>

226
00:09:07,459 --> 00:09:12,560
labels<font color="#E5E5E5"> and we set the real wire labels</font>

227
00:09:10,610 --> 00:09:14,240
to<font color="#E5E5E5"> be the temporary labels exhort with</font>

228
00:09:12,560 --> 00:09:17,630
all the rows<font color="#CCCCCC"> of the corresponding</font>

229
00:09:14,240 --> 00:09:21,050
garbled table<font color="#E5E5E5"> again we said the hash to</font>

230
00:09:17,630 --> 00:09:22,519
be the<font color="#E5E5E5"> XOR of all the rows I'm now going</font>

231
00:09:21,050 --> 00:09:26,060
<font color="#CCCCCC">back to the previous</font><font color="#E5E5E5"> attack if the</font>

232
00:09:22,519 --> 00:09:29,060
adversary changes one row he modifies

233
00:09:26,060 --> 00:09:31,459
the hash by some offset Delta<font color="#E5E5E5"> but now if</font>

234
00:09:29,060 --> 00:09:34,010
he changes some entry in<font color="#CCCCCC"> JT to to fix</font>

235
00:09:31,459 --> 00:09:35,959
Delta<font color="#E5E5E5"> he also changes the translation</font>

236
00:09:34,010 --> 00:09:38,839
between<font color="#CCCCCC"> the temporary wire label and the</font>

237
00:09:35,959 --> 00:09:41,810
real wire label but what he can<font color="#CCCCCC"> now do</font>

238
00:09:38,839 --> 00:09:43,610
instead is to guess which combination of

239
00:09:41,810 --> 00:09:46,430
values will not<font color="#CCCCCC"> be used in the same</font>

240
00:09:43,610 --> 00:09:49,130
garbled table<font color="#E5E5E5"> and change that to</font><font color="#CCCCCC"> fix the</font>

241
00:09:46,430 --> 00:09:51,649
offset<font color="#E5E5E5"> Delta which fixes both the hash</font>

242
00:09:49,130 --> 00:09:54,769
<font color="#E5E5E5">and the translation</font><font color="#CCCCCC"> between the output</font>

243
00:09:51,649 --> 00:09:58,270
<font color="#E5E5E5">wire label or C without disrupting the</font>

244
00:09:54,769 --> 00:10:00,920
translation<font color="#E5E5E5"> of the output wire label</font><font color="#CCCCCC"> e</font>

245
00:09:58,270 --> 00:10:03,380
so<font color="#E5E5E5"> this works because the adversary can</font>

246
00:10:00,920 --> 00:10:05,979
modify a<font color="#E5E5E5"> garbled table entry and correct</font>

247
00:10:03,380 --> 00:10:08,660
the disrupted hash<font color="#E5E5E5"> within the same table</font>

248
00:10:05,980 --> 00:10:10,670
this works since the fix for<font color="#CCCCCC"> the broken</font>

249
00:10:08,660 --> 00:10:14,149
hash also fixes the translation<font color="#E5E5E5"> from</font>

250
00:10:10,670 --> 00:10:16,130
temporary<font color="#CCCCCC"> and</font><font color="#E5E5E5"> real wire labels so the</font>

251
00:10:14,149 --> 00:10:18,589
idea<font color="#E5E5E5"> towards our final construction is</font>

252
00:10:16,130 --> 00:10:20,360
to use garbled tables for computing wire

253
00:10:18,589 --> 00:10:23,990
labels and the hash but in different

254
00:10:20,360 --> 00:10:26,060
<font color="#CCCCCC">ways and this</font><font color="#E5E5E5"> means</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> a fix for a</font>

255
00:10:23,990 --> 00:10:30,200
broken running hash will no longer<font color="#E5E5E5"> keep</font>

256
00:10:26,060 --> 00:10:31,670
the<font color="#CCCCCC"> output wire label valid so again we</font>

257
00:10:30,200 --> 00:10:34,130
treat the output wire labels as

258
00:10:31,670 --> 00:10:35,660
temporary wire labels<font color="#E5E5E5"> and we have the</font>

259
00:10:34,130 --> 00:10:38,570
garbled table entries encrypting

260
00:10:35,660 --> 00:10:40,760
temporary wire labels<font color="#E5E5E5"> now we define</font><font color="#CCCCCC"> the</font>

261
00:10:38,570 --> 00:10:42,740
translation as follows the output wire

262
00:10:40,760 --> 00:10:45,620
label<font color="#E5E5E5"> C is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be the temporary</font>

263
00:10:42,740 --> 00:10:47,209
<font color="#E5E5E5">wire label XOR with</font><font color="#CCCCCC"> some function</font><font color="#E5E5E5"> of all</font>

264
00:10:45,620 --> 00:10:50,360
the rows of<font color="#CCCCCC"> the corresponding garble</font>

265
00:10:47,209 --> 00:10:53,268
table we against at the hash to be the

266
00:10:50,360 --> 00:10:55,399
XOR of<font color="#E5E5E5"> all the garbled table</font><font color="#CCCCCC"> rows and</font>

267
00:10:53,269 --> 00:10:58,300
now we define the translation function<font color="#E5E5E5"> f</font>

268
00:10:55,399 --> 00:11:03,770
to<font color="#CCCCCC"> be the XOR of all the rows where</font><font color="#E5E5E5"> the</font>

269
00:10:58,300 --> 00:11:05,990
<font color="#CCCCCC">ayat'</font><font color="#E5E5E5"> Row is offset by I bits so our</font>

270
00:11:03,770 --> 00:11:07,470
final<font color="#E5E5E5"> construction uses all the garbled</font>

271
00:11:05,990 --> 00:11:09,390
table rows as<font color="#E5E5E5"> XOR</font>

272
00:11:07,470 --> 00:11:11,400
<font color="#E5E5E5">it's for computing both the</font><font color="#CCCCCC"> garble</font>

273
00:11:09,390 --> 00:11:13,319
<font color="#CCCCCC">circuit ash and for the translation</font>

274
00:11:11,400 --> 00:11:16,020
function<font color="#E5E5E5"> but in a different manner</font><font color="#CCCCCC"> and</font>

275
00:11:13,320 --> 00:11:18,240
<font color="#CCCCCC">this means that a fix</font><font color="#E5E5E5"> for the broken</font>

276
00:11:16,020 --> 00:11:20,939
hash will not simultaneously<font color="#E5E5E5"> keep the</font>

277
00:11:18,240 --> 00:11:23,490
<font color="#E5E5E5">vial able valid so if we have two</font>

278
00:11:20,940 --> 00:11:26,220
<font color="#CCCCCC">different garbled circuits such</font><font color="#E5E5E5"> that the</font>

279
00:11:23,490 --> 00:11:28,740
hash collides<font color="#E5E5E5"> then the</font><font color="#CCCCCC"> evaluation of GC</font>

280
00:11:26,220 --> 00:11:31,800
<font color="#E5E5E5">hat fails and this means that the</font>

281
00:11:28,740 --> 00:11:33,900
evaluation of GC hat<font color="#E5E5E5"> will deviate from</font>

282
00:11:31,800 --> 00:11:36,630
the evaluation<font color="#CCCCCC"> of GC with respect to</font>

283
00:11:33,900 --> 00:11:38,610
some wire label and subsequently<font color="#E5E5E5"> this</font>

284
00:11:36,630 --> 00:11:41,760
can return to either a correct running

285
00:11:38,610 --> 00:11:46,050
hash or to a correct<font color="#E5E5E5"> by a label but not</font>

286
00:11:41,760 --> 00:11:47,760
both we use bit shifting for our

287
00:11:46,050 --> 00:11:50,099
translation functions because it's both

288
00:11:47,760 --> 00:11:52,680
fast<font color="#E5E5E5"> and easy to implement but in</font>

289
00:11:50,100 --> 00:11:55,020
general we want functions<font color="#CCCCCC"> fi</font><font color="#E5E5E5"> such that</font>

290
00:11:52,680 --> 00:11:57,120
the<font color="#E5E5E5"> following property is satisfied</font><font color="#CCCCCC"> what</font>

291
00:11:55,020 --> 00:11:59,610
this says<font color="#E5E5E5"> is that if a garbled circuit</font>

292
00:11:57,120 --> 00:12:01,950
is modified<font color="#E5E5E5"> such that the XOR of the</font>

293
00:11:59,610 --> 00:12:04,560
rows remains the same then with high

294
00:12:01,950 --> 00:12:07,560
<font color="#CCCCCC">probability the XOR of F of the garbled</font>

295
00:12:04,560 --> 00:12:11,520
<font color="#E5E5E5">rows will change and this is sufficient</font>

296
00:12:07,560 --> 00:12:12,839
<font color="#CCCCCC">to prove</font><font color="#E5E5E5"> security of our</font><font color="#CCCCCC"> construction so</font>

297
00:12:11,520 --> 00:12:15,390
we<font color="#E5E5E5"> instantiate the key derivation</font>

298
00:12:12,840 --> 00:12:18,180
functions of<font color="#CCCCCC"> our gobbling scheme with</font>

299
00:12:15,390 --> 00:12:21,270
the<font color="#E5E5E5"> Davis</font><font color="#CCCCCC"> male</font><font color="#E5E5E5"> construction and assume</font>

300
00:12:18,180 --> 00:12:23,459
that<font color="#E5E5E5"> it</font><font color="#CCCCCC"> is a random permutation</font><font color="#E5E5E5"> to be</font>

301
00:12:21,270 --> 00:12:26,790
compatible with free<font color="#CCCCCC"> XOR we also assume</font>

302
00:12:23,460 --> 00:12:28,890
<font color="#CCCCCC">that it's correlation robust</font><font color="#E5E5E5"> or to prove</font>

303
00:12:26,790 --> 00:12:31,260
hash security of our<font color="#E5E5E5"> construction under</font>

304
00:12:28,890 --> 00:12:33,230
<font color="#E5E5E5">our definition we additionally require</font>

305
00:12:31,260 --> 00:12:36,030
<font color="#E5E5E5">collision resistance of</font><font color="#CCCCCC"> Davis mayor</font>

306
00:12:33,230 --> 00:12:41,100
<font color="#E5E5E5">which can be achieved</font><font color="#CCCCCC"> assuming</font><font color="#E5E5E5"> that it</font>

307
00:12:36,030 --> 00:12:43,199
<font color="#CCCCCC">is an ideal cipher the current state of</font>

308
00:12:41,100 --> 00:12:45,240
the art<font color="#E5E5E5"> in gardling is the half Gate</font>

309
00:12:43,200 --> 00:12:48,060
construction of<font color="#CCCCCC"> Jahoda toll from 2015</font>

310
00:12:45,240 --> 00:12:50,250
and<font color="#CCCCCC"> the half gate construction is</font>

311
00:12:48,060 --> 00:12:53,400
compatible with free XOR and uses to

312
00:12:50,250 --> 00:12:55,320
cipher text to guard will<font color="#E5E5E5"> a NAND gate so</font>

313
00:12:53,400 --> 00:12:57,360
the question is can we<font color="#CCCCCC"> have a free</font><font color="#E5E5E5"> hash</font>

314
00:12:55,320 --> 00:13:00,900
construction for the half gates gambling

315
00:12:57,360 --> 00:13:03,570
scheme so a half<font color="#CCCCCC"> gate is</font><font color="#E5E5E5"> a NAND gate</font>

316
00:13:00,900 --> 00:13:05,520
<font color="#CCCCCC">where one of</font><font color="#E5E5E5"> the inputs is known to the</font>

317
00:13:03,570 --> 00:13:08,490
known<font color="#CCCCCC"> to one of the parties in the clear</font>

318
00:13:05,520 --> 00:13:11,220
so say a here is known to be gobbler

319
00:13:08,490 --> 00:13:12,450
this is a generator<font color="#E5E5E5"> half gate and the</font>

320
00:13:11,220 --> 00:13:14,510
one of the<font color="#E5E5E5"> inputs is known to the</font>

321
00:13:12,450 --> 00:13:17,250
evaluator it's an evaluator<font color="#E5E5E5"> half gate</font>

322
00:13:14,510 --> 00:13:20,700
now if we look at<font color="#E5E5E5"> the following</font><font color="#CCCCCC"> two and</font>

323
00:13:17,250 --> 00:13:21,329
gates<font color="#E5E5E5"> where I here is a value</font><font color="#CCCCCC"> that is</font>

324
00:13:20,700 --> 00:13:23,399
chosen

325
00:13:21,329 --> 00:13:25,679
random<font color="#E5E5E5"> by the gobbler</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> if we can</font>

326
00:13:23,399 --> 00:13:28,410
arrange<font color="#CCCCCC"> for the evaluator to learn</font><font color="#E5E5E5"> a X</font>

327
00:13:25,679 --> 00:13:30,569
or<font color="#E5E5E5"> are in the clear</font><font color="#CCCCCC"> then we see that the</font>

328
00:13:28,410 --> 00:13:32,730
<font color="#E5E5E5">first and gate is an evaluator half gate</font>

329
00:13:30,569 --> 00:13:36,449
and the<font color="#E5E5E5"> second and gate is a generator</font>

330
00:13:32,730 --> 00:13:38,610
<font color="#CCCCCC">Haskett and we can put the two half</font>

331
00:13:36,449 --> 00:13:41,040
gates together<font color="#CCCCCC"> by exerting the output of</font>

332
00:13:38,610 --> 00:13:42,480
<font color="#E5E5E5">the two half gates to obtain a complete</font>

333
00:13:41,040 --> 00:13:45,269
and gate<font color="#CCCCCC"> here</font>

334
00:13:42,480 --> 00:13:47,730
and the half gates<font color="#E5E5E5"> construction shows</font>

335
00:13:45,269 --> 00:13:50,040
how<font color="#E5E5E5"> to garble two half gates using one</font>

336
00:13:47,730 --> 00:13:52,290
ciphertext<font color="#E5E5E5"> each and we can put them</font>

337
00:13:50,040 --> 00:13:55,139
<font color="#E5E5E5">together to garble a complete and gate</font>

338
00:13:52,290 --> 00:13:58,110
using<font color="#E5E5E5"> two cipher texts and we have X all</font>

339
00:13:55,139 --> 00:14:00,299
for free so now the observation is that

340
00:13:58,110 --> 00:14:02,939
in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> half gates construction there is</font>

341
00:14:00,299 --> 00:14:04,679
<font color="#E5E5E5">no inactive row which means that both</font>

342
00:14:02,939 --> 00:14:07,439
<font color="#E5E5E5">cipher texts are going to be decrypted</font>

343
00:14:04,679 --> 00:14:09,629
during evaluation<font color="#CCCCCC"> and</font><font color="#E5E5E5"> is used to compute</font>

344
00:14:07,439 --> 00:14:12,238
<font color="#E5E5E5">the output wire label so if the</font>

345
00:14:09,629 --> 00:14:14,009
adversary modifies any garbled row he is

346
00:14:12,239 --> 00:14:16,649
going<font color="#E5E5E5"> to change the output wire label</font>

347
00:14:14,009 --> 00:14:19,199
computed on that gate<font color="#E5E5E5"> this observation</font>

348
00:14:16,649 --> 00:14:21,660
<font color="#CCCCCC">leads us to a simpler hash construction</font>

349
00:14:19,199 --> 00:14:23,579
we<font color="#E5E5E5"> can set the hash of the garbled</font>

350
00:14:21,660 --> 00:14:24,899
circuit to<font color="#CCCCCC"> be the XOR of all the cipher</font>

351
00:14:23,579 --> 00:14:27,899
<font color="#E5E5E5">texts without having to use a</font>

352
00:14:24,899 --> 00:14:29,669
<font color="#E5E5E5">translation function and in the paper we</font>

353
00:14:27,899 --> 00:14:31,860
prove<font color="#CCCCCC"> that this</font><font color="#E5E5E5"> construction is secure</font>

354
00:14:29,669 --> 00:14:36,360
as per<font color="#E5E5E5"> our definition under</font><font color="#CCCCCC"> the same</font>

355
00:14:31,860 --> 00:14:38,519
assumptions we implemented<font color="#E5E5E5"> our</font>

356
00:14:36,360 --> 00:14:41,639
construction using the Lib<font color="#CCCCCC"> Carbon</font>

357
00:14:38,519 --> 00:14:45,149
library on a system that<font color="#CCCCCC"> has a yes ni</font>

358
00:14:41,639 --> 00:14:47,549
<font color="#E5E5E5">integrated and this table shows numbers</font>

359
00:14:45,149 --> 00:14:50,790
in cycles per gate for gobbling the AES

360
00:14:47,549 --> 00:14:52,799
circuit so the first<font color="#E5E5E5"> column is our</font>

361
00:14:50,790 --> 00:14:55,259
construction<font color="#E5E5E5"> and we compare it against</font>

362
00:14:52,799 --> 00:14:57,720
<font color="#E5E5E5">garbling a circuit and then using</font><font color="#CCCCCC"> Shou</font>

363
00:14:55,259 --> 00:14:59,910
on it using<font color="#CCCCCC"> the</font><font color="#E5E5E5"> char from</font><font color="#CCCCCC"> the OpenSSL</font>

364
00:14:57,720 --> 00:15:02,100
library<font color="#E5E5E5"> and we note</font><font color="#CCCCCC"> that our</font>

365
00:14:59,910 --> 00:15:04,410
<font color="#CCCCCC">construction is very</font><font color="#E5E5E5"> close</font><font color="#CCCCCC"> to the number</font>

366
00:15:02,100 --> 00:15:09,540
4 just garble just<font color="#E5E5E5"> gobbling the circuit</font>

367
00:15:04,410 --> 00:15:12,600
<font color="#E5E5E5">itself coming to applications of our</font>

368
00:15:09,540 --> 00:15:14,309
free<font color="#CCCCCC"> hash construction since</font><font color="#E5E5E5"> our</font>

369
00:15:12,600 --> 00:15:16,259
construction satisfies a different

370
00:15:14,309 --> 00:15:17,850
<font color="#E5E5E5">notion than that of collision resistance</font>

371
00:15:16,259 --> 00:15:19,739
<font color="#E5E5E5">let's look at the difference between</font>

372
00:15:17,850 --> 00:15:23,389
collision resistant hash and free hash

373
00:15:19,739 --> 00:15:25,919
in the context of<font color="#CCCCCC"> contentious protocols</font>

374
00:15:23,389 --> 00:15:29,040
so when using a collision resistant hash

375
00:15:25,919 --> 00:15:32,730
<font color="#CCCCCC">a party p1 commits to a garbled circuit</font>

376
00:15:29,040 --> 00:15:34,849
by sending a hash<font color="#E5E5E5"> and he can choose the</font>

377
00:15:32,730 --> 00:15:37,069
<font color="#E5E5E5">gobble circuit to either be a good</font>

378
00:15:34,850 --> 00:15:38,959
<font color="#E5E5E5">eating circuit and once the hash is</font>

379
00:15:37,069 --> 00:15:42,380
fixed he cannot flip<font color="#E5E5E5"> between the two</font>

380
00:15:38,959 --> 00:15:44,989
designations<font color="#E5E5E5"> when using free hash he</font>

381
00:15:42,380 --> 00:15:47,029
again has similar<font color="#CCCCCC"> choices he can</font><font color="#E5E5E5"> commit</font>

382
00:15:44,990 --> 00:15:49,100
<font color="#CCCCCC">to either</font><font color="#E5E5E5"> a good or</font><font color="#CCCCCC"> a cheating circuit</font>

383
00:15:47,029 --> 00:15:52,069
and cannot<font color="#E5E5E5"> change this designation</font><font color="#CCCCCC"> after</font>

384
00:15:49,100 --> 00:15:55,190
sending<font color="#E5E5E5"> the hash but now in</font><font color="#CCCCCC"> addition he</font>

385
00:15:52,069 --> 00:15:57,829
can do the following<font color="#E5E5E5"> he can open both a</font>

386
00:15:55,190 --> 00:15:59,720
good<font color="#CCCCCC"> and</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> cheating</font><font color="#E5E5E5"> garbled circuit into</font>

387
00:15:57,829 --> 00:16:02,329
what we call a broken garbled circuit

388
00:15:59,720 --> 00:16:04,940
which will fail evaluation and the

389
00:16:02,329 --> 00:16:07,120
question is when<font color="#CCCCCC"> can P to safely abort</font>

390
00:16:04,940 --> 00:16:11,300
when he sees a broken garbled circuit

391
00:16:07,120 --> 00:16:13,940
and we<font color="#E5E5E5"> observed that it</font><font color="#CCCCCC"> is safe for</font>

392
00:16:11,300 --> 00:16:16,609
<font color="#CCCCCC">Peter to</font><font color="#E5E5E5"> abort in protocols in the</font>

393
00:16:13,940 --> 00:16:18,589
covert security<font color="#E5E5E5"> model where a party</font><font color="#CCCCCC"> is</font>

394
00:16:16,610 --> 00:16:19,819
allowed to<font color="#CCCCCC"> deviate from</font><font color="#E5E5E5"> the protocol</font><font color="#CCCCCC"> but</font>

395
00:16:18,589 --> 00:16:23,029
is caught with<font color="#CCCCCC"> the fixed</font><font color="#E5E5E5"> probability</font>

396
00:16:19,819 --> 00:16:25,009
called the deterrence factor<font color="#E5E5E5"> this model</font>

397
00:16:23,029 --> 00:16:26,920
was<font color="#E5E5E5"> introduced by Ullman and Linda and</font>

398
00:16:25,009 --> 00:16:29,899
<font color="#E5E5E5">further studied in subsequent works</font>

399
00:16:26,920 --> 00:16:31,430
<font color="#E5E5E5">so in these protocols are cheating</font><font color="#CCCCCC"> p1</font>

400
00:16:29,899 --> 00:16:34,250
can already turn a good evaluation

401
00:16:31,430 --> 00:16:37,359
circuit into a<font color="#E5E5E5"> broken 1 and p2 can</font>

402
00:16:34,250 --> 00:16:40,459
safely about independently of his input

403
00:16:37,360 --> 00:16:42,920
<font color="#E5E5E5">so we see that in</font><font color="#CCCCCC"> protocols in</font><font color="#E5E5E5"> the</font>

404
00:16:40,459 --> 00:16:44,479
<font color="#E5E5E5">covert model using the three hash</font>

405
00:16:42,920 --> 00:16:46,550
construction we can<font color="#E5E5E5"> improve the</font>

406
00:16:44,480 --> 00:16:49,040
<font color="#E5E5E5">deterrence probability for the same</font>

407
00:16:46,550 --> 00:16:51,199
<font color="#E5E5E5">communication complexity and get an</font>

408
00:16:49,040 --> 00:16:54,949
improvement in the<font color="#E5E5E5"> total execution</font><font color="#CCCCCC"> time</font>

409
00:16:51,199 --> 00:16:58,160
for<font color="#E5E5E5"> the same deterrence so here we</font>

410
00:16:54,949 --> 00:17:00,050
compare execution times we have the

411
00:16:58,160 --> 00:17:02,569
total<font color="#CCCCCC"> number of circuits required to</font>

412
00:17:00,050 --> 00:17:04,490
achieve a deterrence of<font color="#CCCCCC"> 0.9</font><font color="#E5E5E5"> and to</font>

413
00:17:02,569 --> 00:17:07,309
compute<font color="#E5E5E5"> the execution time we assume</font>

414
00:17:04,490 --> 00:17:09,470
that<font color="#E5E5E5"> generating a garbled circuit takes</font>

415
00:17:07,309 --> 00:17:12,199
<font color="#E5E5E5">95 seconds for a billion gate circuit</font>

416
00:17:09,470 --> 00:17:14,750
and for communication we assume a 1<font color="#CCCCCC"> Gbps</font>

417
00:17:12,199 --> 00:17:16,970
<font color="#E5E5E5">channel and we see the improvement</font><font color="#CCCCCC"> in</font>

418
00:17:14,750 --> 00:17:19,280
the<font color="#E5E5E5"> second and fourth rows when using</font>

419
00:17:16,970 --> 00:17:24,589
<font color="#E5E5E5">our free</font><font color="#CCCCCC"> hash construction in the covert</font>

420
00:17:19,280 --> 00:17:26,899
secure protocols so can we apply our

421
00:17:24,589 --> 00:17:30,289
free hash construction to more general

422
00:17:26,900 --> 00:17:31,760
maliciously secure protocols we note

423
00:17:30,289 --> 00:17:33,710
that<font color="#E5E5E5"> it does not apply to the</font>

424
00:17:31,760 --> 00:17:36,408
state-of-the-art protocol of Lyndell 13

425
00:17:33,710 --> 00:17:38,120
and in general two<font color="#E5E5E5"> protocols in the</font><font color="#CCCCCC"> for</font>

426
00:17:36,409 --> 00:17:41,210
<font color="#CCCCCC">Gen loose technique that we saw in the</font>

427
00:17:38,120 --> 00:17:43,219
previous<font color="#E5E5E5"> two talks this is because in</font>

428
00:17:41,210 --> 00:17:45,950
these protocols<font color="#E5E5E5"> the cheating punishment</font>

429
00:17:43,220 --> 00:17:48,350
fails relies on at least one evaluation

430
00:17:45,950 --> 00:17:50,990
circuit<font color="#E5E5E5"> being good and</font>

431
00:17:48,350 --> 00:17:53,830
because<font color="#CCCCCC"> p1 can</font><font color="#E5E5E5"> open a good evaluation</font>

432
00:17:50,990 --> 00:17:57,170
circuit as a broken<font color="#CCCCCC"> one when he uses</font><font color="#E5E5E5"> the</font>

433
00:17:53,830 --> 00:17:59,720
<font color="#E5E5E5">free hash construction our p2 cannot</font>

434
00:17:57,170 --> 00:18:01,610
tell if a failure in decoding<font color="#CCCCCC"> is because</font>

435
00:17:59,720 --> 00:18:03,890
of<font color="#E5E5E5"> a hash failure or is a selector</font>

436
00:18:01,610 --> 00:18:07,340
failure<font color="#E5E5E5"> attacker and this effectively</font>

437
00:18:03,890 --> 00:18:09,530
prevents input recovery<font color="#E5E5E5"> it also does</font><font color="#CCCCCC"> not</font>

438
00:18:07,340 --> 00:18:12,860
<font color="#E5E5E5">apply to protocols in the dual execution</font>

439
00:18:09,530 --> 00:18:14,930
setting because<font color="#E5E5E5"> again a</font><font color="#CCCCCC"> cheating p1 can</font>

440
00:18:12,860 --> 00:18:17,840
open all good evaluation circuits as

441
00:18:14,930 --> 00:18:20,780
broken once and since the final<font color="#E5E5E5"> output</font>

442
00:18:17,840 --> 00:18:23,240
<font color="#CCCCCC">is the result of an equality test</font><font color="#E5E5E5"> or of</font>

443
00:18:20,780 --> 00:18:26,210
a private set intersection<font color="#CCCCCC"> the output of</font>

444
00:18:23,240 --> 00:18:30,380
psi<font color="#E5E5E5"> could potentially leak bits of PTO's</font>

445
00:18:26,210 --> 00:18:32,300
input nevertheless it can be used in

446
00:18:30,380 --> 00:18:36,020
protocols that<font color="#E5E5E5"> is based on majority</font>

447
00:18:32,300 --> 00:18:37,850
output<font color="#E5E5E5"> and moreover when we use a</font>

448
00:18:36,020 --> 00:18:40,220
collision resistant hash<font color="#CCCCCC"> and cut</font><font color="#E5E5E5"> and</font>

449
00:18:37,850 --> 00:18:42,290
<font color="#E5E5E5">choose protocols the cost of a check</font>

450
00:18:40,220 --> 00:18:43,760
circuit is cheaper than<font color="#CCCCCC"> the cost</font><font color="#E5E5E5"> of an</font>

451
00:18:42,290 --> 00:18:46,370
<font color="#E5E5E5">evaluation circuit in terms</font><font color="#CCCCCC"> of</font>

452
00:18:43,760 --> 00:18:48,440
communication and this results in<font color="#E5E5E5"> an</font>

453
00:18:46,370 --> 00:18:50,270
optimal ratio of check and<font color="#E5E5E5"> evaluation</font>

454
00:18:48,440 --> 00:18:52,400
circuits that<font color="#E5E5E5"> is different from half and</font>

455
00:18:50,270 --> 00:18:57,260
we show this calculation in the paper

456
00:18:52,400 --> 00:19:00,050
<font color="#E5E5E5">for</font><font color="#CCCCCC"> a dual execution protocol it remains</font>

457
00:18:57,260 --> 00:19:02,360
<font color="#E5E5E5">to be seen</font><font color="#CCCCCC"> whether our definition of</font>

458
00:19:00,050 --> 00:19:05,360
hash<font color="#E5E5E5"> security applies to protocols in</font>

459
00:19:02,360 --> 00:19:07,280
the<font color="#E5E5E5"> amortized settings also</font><font color="#CCCCCC"> our</font>

460
00:19:05,360 --> 00:19:09,620
definition of<font color="#E5E5E5"> hash security assumes that</font>

461
00:19:07,280 --> 00:19:10,879
the adversary outputs two different

462
00:19:09,620 --> 00:19:14,330
garbled circuits but the topology

463
00:19:10,880 --> 00:19:15,920
remains the same<font color="#CCCCCC"> so we can ask if we can</font>

464
00:19:14,330 --> 00:19:17,449
make<font color="#E5E5E5"> our constructions work when the</font>

465
00:19:15,920 --> 00:19:21,450
<font color="#CCCCCC">adversary can also change the topology</font>

466
00:19:17,450 --> 00:19:23,859
of the circuit<font color="#CCCCCC"> I</font><font color="#E5E5E5"> stop here thank you</font>

467
00:19:21,450 --> 00:19:23,859
[Applause]

