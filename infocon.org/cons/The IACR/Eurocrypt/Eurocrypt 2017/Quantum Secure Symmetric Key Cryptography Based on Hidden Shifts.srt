1
00:00:00,319 --> 00:00:06,150
<font color="#CCCCCC">Thanks so can everyone</font><font color="#E5E5E5"> hear me okay okay</font>

2
00:00:05,549 --> 00:00:09,000
good

3
00:00:06,150 --> 00:00:11,040
okay so<font color="#E5E5E5"> right so I'm gonna talk</font><font color="#CCCCCC"> about</font>

4
00:00:09,000 --> 00:00:12,840
some symmetric key crypto based on

5
00:00:11,040 --> 00:00:16,820
<font color="#E5E5E5">hidden shifts and this is joint work</font>

6
00:00:12,840 --> 00:00:20,460
<font color="#E5E5E5">with Alex Russell okay so in a typical</font>

7
00:00:16,820 --> 00:00:22,470
post quantum crypto scenario<font color="#E5E5E5"> we're a</font>

8
00:00:20,460 --> 00:00:24,660
classical user with a classical crypto

9
00:00:22,470 --> 00:00:27,029
system<font color="#E5E5E5"> with some classical functionality</font>

10
00:00:24,660 --> 00:00:29,759
and we're faced off against an adversary

11
00:00:27,029 --> 00:00:33,360
<font color="#E5E5E5">who has a quantum computer back at the</font>

12
00:00:29,760 --> 00:00:35,520
lab<font color="#CCCCCC"> okay in a more</font><font color="#E5E5E5"> sort of far-off</font>

13
00:00:33,360 --> 00:00:38,129
distant<font color="#E5E5E5"> future setting we might also</font>

14
00:00:35,520 --> 00:00:40,020
<font color="#CCCCCC">imagine a scenario</font><font color="#E5E5E5"> in which we are a</font>

15
00:00:38,129 --> 00:00:41,669
quantum and our crypto system is quantum

16
00:00:40,020 --> 00:00:42,960
and the<font color="#E5E5E5"> functionality we want as quantum</font>

17
00:00:41,670 --> 00:00:44,370
instead of<font color="#CCCCCC"> everything all around is</font>

18
00:00:42,960 --> 00:00:46,079
quantum

19
00:00:44,370 --> 00:00:48,570
but also in the past<font color="#E5E5E5"> few</font><font color="#CCCCCC"> years people</font>

20
00:00:46,079 --> 00:00:52,020
<font color="#E5E5E5">have started thinking</font><font color="#CCCCCC"> about a sort of</font>

21
00:00:48,570 --> 00:00:53,640
<font color="#E5E5E5">intermediate</font><font color="#CCCCCC"> model in which</font><font color="#E5E5E5"> the quantum</font>

22
00:00:52,020 --> 00:00:55,980
adversary has<font color="#E5E5E5"> somehow managed to creep a</font>

23
00:00:53,640 --> 00:00:58,170
<font color="#CCCCCC">little bit closer to us and now in</font>

24
00:00:55,980 --> 00:01:01,440
<font color="#E5E5E5">addition to</font><font color="#CCCCCC"> having a quantum computer</font>

25
00:00:58,170 --> 00:01:03,030
back at the lab<font color="#E5E5E5"> the adversary can also</font>

26
00:01:01,440 --> 00:01:05,489
somehow quantumly interface with our

27
00:01:03,030 --> 00:01:07,049
classical crypto system<font color="#CCCCCC"> ok so this is</font>

28
00:01:05,489 --> 00:01:13,200
the<font color="#E5E5E5"> model and that</font><font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> talk about</font>

29
00:01:07,049 --> 00:01:14,909
today<font color="#CCCCCC"> ok so right so before I</font><font color="#E5E5E5"> can</font>

30
00:01:13,200 --> 00:01:16,530
explain what it even means to have sort

31
00:01:14,909 --> 00:01:17,700
<font color="#E5E5E5">of quantum access to a classical crypto</font>

32
00:01:16,530 --> 00:01:20,040
system let me talk a little<font color="#CCCCCC"> bit about</font>

33
00:01:17,700 --> 00:01:21,630
how<font color="#E5E5E5"> to execute classical functions on a</font>

34
00:01:20,040 --> 00:01:23,369
quantum<font color="#CCCCCC"> computer and of course we'd</font>

35
00:01:21,630 --> 00:01:24,689
better be able<font color="#E5E5E5"> to do this because you</font>

36
00:01:23,369 --> 00:01:27,390
<font color="#E5E5E5">know quantum computers are a</font>

37
00:01:24,689 --> 00:01:29,399
generalization<font color="#E5E5E5"> of classical ones</font><font color="#CCCCCC"> ok so</font>

38
00:01:27,390 --> 00:01:32,970
how do we implement<font color="#E5E5E5"> some some function f</font>

39
00:01:29,400 --> 00:01:34,560
well<font color="#E5E5E5"> basically we can turn it first into</font>

40
00:01:32,970 --> 00:01:37,289
<font color="#E5E5E5">a reversible function let's say by</font>

41
00:01:34,560 --> 00:01:38,939
keeping the input around and then

42
00:01:37,290 --> 00:01:43,140
computing the function<font color="#CCCCCC"> you know just by</font>

43
00:01:38,939 --> 00:01:44,309
<font color="#CCCCCC">X</font><font color="#E5E5E5"> soaring it into another</font><font color="#CCCCCC"> register and</font>

44
00:01:43,140 --> 00:01:46,140
then we can just<font color="#E5E5E5"> sort of observe that</font>

45
00:01:44,310 --> 00:01:47,610
this is<font color="#CCCCCC"> now a unitary operator and this</font>

46
00:01:46,140 --> 00:01:50,820
<font color="#E5E5E5">is sort of suitable for running on a</font>

47
00:01:47,610 --> 00:01:54,000
quantum computer<font color="#E5E5E5"> so in particular if you</font>

48
00:01:50,820 --> 00:01:55,529
<font color="#CCCCCC">have any circuit for your function f any</font>

49
00:01:54,000 --> 00:01:56,729
classical circuit for your function f

50
00:01:55,530 --> 00:01:58,920
whether they're reversible<font color="#E5E5E5"> or not</font>

51
00:01:56,729 --> 00:02:01,380
reversible<font color="#E5E5E5"> or whatever</font><font color="#CCCCCC"> there are sort of</font>

52
00:01:58,920 --> 00:02:04,350
standards<font color="#E5E5E5"> ways of transforming it into a</font>

53
00:02:01,380 --> 00:02:06,000
reversible circuit efficiently<font color="#CCCCCC"> and then</font>

54
00:02:04,350 --> 00:02:07,500
this circuit<font color="#E5E5E5"> is kind of a special</font><font color="#CCCCCC"> case</font>

55
00:02:06,000 --> 00:02:08,169
<font color="#E5E5E5">of a quantum circuit and we can run it</font>

56
00:02:07,500 --> 00:02:12,099
on<font color="#E5E5E5"> our quantum</font>

57
00:02:08,169 --> 00:02:13,720
<font color="#E5E5E5">hardware okay of course</font><font color="#CCCCCC"> now that</font><font color="#E5E5E5"> we have</font>

58
00:02:12,099 --> 00:02:15,819
it<font color="#E5E5E5"> running on our quantum computer we</font>

59
00:02:13,720 --> 00:02:17,680
<font color="#CCCCCC">don't have to</font><font color="#E5E5E5"> we're not restricted to</font>

60
00:02:15,819 --> 00:02:20,019
<font color="#E5E5E5">just plugging in boring classical inputs</font>

61
00:02:17,680 --> 00:02:22,300
like<font color="#CCCCCC"> pairs X Y</font><font color="#E5E5E5"> we can actually prepare</font>

62
00:02:20,020 --> 00:02:25,450
more complicated<font color="#CCCCCC"> quantum states</font><font color="#E5E5E5"> which</font>

63
00:02:22,300 --> 00:02:27,220
are super positions with<font color="#E5E5E5"> perhaps very</font>

64
00:02:25,450 --> 00:02:31,660
<font color="#E5E5E5">complex amplitudes complicated</font>

65
00:02:27,220 --> 00:02:33,520
amplitudes<font color="#E5E5E5"> certainly complex over</font>

66
00:02:31,660 --> 00:02:35,290
different<font color="#E5E5E5"> pairs x and y and then if we</font>

67
00:02:33,520 --> 00:02:36,819
plug that kind<font color="#E5E5E5"> of complicated state into</font>

68
00:02:35,290 --> 00:02:38,109
an<font color="#E5E5E5"> Oracle then we'll get the</font>

69
00:02:36,819 --> 00:02:40,859
corresponding superposition of

70
00:02:38,110 --> 00:02:44,019
input-output pairs of the function<font color="#E5E5E5"> so</font>

71
00:02:40,860 --> 00:02:46,060
<font color="#CCCCCC">for</font><font color="#E5E5E5"> example one natural thing</font><font color="#CCCCCC"> you might</font>

72
00:02:44,019 --> 00:02:47,680
want to try<font color="#E5E5E5"> is prepare a uniform</font>

73
00:02:46,060 --> 00:02:49,660
superposition over the out input

74
00:02:47,680 --> 00:02:51,670
register and then plug that<font color="#E5E5E5"> into the</font>

75
00:02:49,660 --> 00:02:53,350
<font color="#E5E5E5">Oracle and</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> outcome will be the state</font>

76
00:02:51,670 --> 00:02:56,559
which is<font color="#CCCCCC"> a uniform superposition of</font>

77
00:02:53,350 --> 00:02:57,730
<font color="#E5E5E5">input-output pairs of the function and</font>

78
00:02:56,560 --> 00:03:00,280
once you have<font color="#E5E5E5"> that kind of state</font>

79
00:02:57,730 --> 00:03:02,290
prepared using the Oracle<font color="#E5E5E5"> you could try</font>

80
00:03:00,280 --> 00:03:04,620
different<font color="#CCCCCC"> things</font><font color="#E5E5E5"> you could</font><font color="#CCCCCC"> let's say</font><font color="#E5E5E5"> for</font>

81
00:03:02,290 --> 00:03:06,310
example<font color="#CCCCCC"> you</font><font color="#E5E5E5"> could measure this state</font>

82
00:03:04,620 --> 00:03:07,840
<font color="#E5E5E5">unfortunately that's not so useful</font>

83
00:03:06,310 --> 00:03:09,459
because<font color="#CCCCCC"> in that</font><font color="#E5E5E5"> case you will just get a</font>

84
00:03:07,840 --> 00:03:12,459
<font color="#CCCCCC">random</font><font color="#E5E5E5"> input output pair and you can do</font>

85
00:03:09,459 --> 00:03:14,049
<font color="#E5E5E5">that classically</font><font color="#CCCCCC"> but as it turns out if</font>

86
00:03:12,459 --> 00:03:15,310
you run some interesting quantum circuit

87
00:03:14,049 --> 00:03:17,470
like let's say the quantum Fourier

88
00:03:15,310 --> 00:03:19,239
transform<font color="#E5E5E5"> whatever that is and then</font><font color="#CCCCCC"> you</font>

89
00:03:17,470 --> 00:03:20,560
<font color="#E5E5E5">measure then we know</font><font color="#CCCCCC"> that in fact</font><font color="#E5E5E5"> for</font>

90
00:03:19,239 --> 00:03:23,049
<font color="#E5E5E5">some functions we can</font><font color="#CCCCCC"> actually compute</font>

91
00:03:20,560 --> 00:03:26,769
certain<font color="#E5E5E5"> things that</font><font color="#CCCCCC"> we cannot do with</font>

92
00:03:23,049 --> 00:03:28,269
classical access okay so that's the

93
00:03:26,769 --> 00:03:29,829
basic<font color="#CCCCCC"> set up for functions now what does</font>

94
00:03:28,269 --> 00:03:32,560
this mean<font color="#CCCCCC"> or what could</font><font color="#E5E5E5"> this mean for</font>

95
00:03:29,829 --> 00:03:34,480
<font color="#CCCCCC">cryptography</font><font color="#E5E5E5"> well recall that</font><font color="#CCCCCC"> in in</font>

96
00:03:32,560 --> 00:03:36,310
chosen plaintext attacks we<font color="#CCCCCC"> have some</font>

97
00:03:34,480 --> 00:03:38,380
kind<font color="#CCCCCC"> of protocol that involves an</font>

98
00:03:36,310 --> 00:03:40,900
encryption scheme<font color="#E5E5E5"> and somewhere in that</font>

99
00:03:38,380 --> 00:03:43,030
<font color="#E5E5E5">protocol there's an adversary</font><font color="#CCCCCC"> doing</font>

100
00:03:40,900 --> 00:03:45,880
<font color="#E5E5E5">whatever it does and now a natural</font>

101
00:03:43,030 --> 00:03:47,530
question<font color="#CCCCCC"> is is the you</font><font color="#E5E5E5"> know what happens</font>

102
00:03:45,880 --> 00:03:49,510
<font color="#E5E5E5">to the security of the protocol if we</font>

103
00:03:47,530 --> 00:03:53,590
grant<font color="#E5E5E5"> this adversary Oracle access to</font>

104
00:03:49,510 --> 00:03:55,480
the encryption<font color="#E5E5E5"> function so if this is a</font>

105
00:03:53,590 --> 00:03:56,859
classical<font color="#E5E5E5"> Oracle or a classical</font>

106
00:03:55,480 --> 00:03:58,690
adversary then it's clear what this

107
00:03:56,859 --> 00:04:00,730
means the adversary just picks<font color="#E5E5E5"> the</font>

108
00:03:58,690 --> 00:04:03,190
plaintext<font color="#CCCCCC"> X and then gets</font><font color="#E5E5E5"> back the</font>

109
00:04:00,730 --> 00:04:06,250
<font color="#CCCCCC">corresponding</font><font color="#E5E5E5"> ciphertext but now if a is</font>

110
00:04:03,190 --> 00:04:07,720
a quantum adversary<font color="#E5E5E5"> then we can ask you</font>

111
00:04:06,250 --> 00:04:10,000
<font color="#CCCCCC">know</font><font color="#E5E5E5"> does</font><font color="#CCCCCC"> it make sense if this</font>

112
00:04:07,720 --> 00:04:12,549
adversary actually gets quantum<font color="#CCCCCC"> Oracle</font>

113
00:04:10,000 --> 00:04:14,170
access to the<font color="#E5E5E5"> Oracle okay so what</font>

114
00:04:12,549 --> 00:04:16,478
happens if these arrows if you like

115
00:04:14,170 --> 00:04:19,089
become quantum well then it's reasonable

116
00:04:16,478 --> 00:04:21,789
<font color="#CCCCCC">to argue that a</font><font color="#E5E5E5"> should get kind of the</font>

117
00:04:19,089 --> 00:04:24,310
same<font color="#E5E5E5"> access</font><font color="#CCCCCC"> that it would get with any</font>

118
00:04:21,790 --> 00:04:26,830
implementation of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> function f okay so</font>

119
00:04:24,310 --> 00:04:28,630
perhaps a now gets<font color="#E5E5E5"> the quantum Oracle</font>

120
00:04:26,830 --> 00:04:30,520
where it can compute<font color="#E5E5E5"> to this encryption</font>

121
00:04:28,630 --> 00:04:34,659
function<font color="#E5E5E5"> into a second register</font>

122
00:04:30,520 --> 00:04:37,060
<font color="#CCCCCC">reversibly so that's</font><font color="#E5E5E5"> exactly the model</font>

123
00:04:34,660 --> 00:04:38,560
<font color="#E5E5E5">that</font><font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> talk about</font><font color="#CCCCCC"> and of course</font>

124
00:04:37,060 --> 00:04:39,940
one thing<font color="#E5E5E5"> we</font><font color="#CCCCCC"> should notice</font><font color="#E5E5E5"> is that we</font>

125
00:04:38,560 --> 00:04:41,410
can now do the<font color="#CCCCCC"> same thing we did</font><font color="#E5E5E5"> on the</font>

126
00:04:39,940 --> 00:04:43,990
previous<font color="#E5E5E5"> slide</font><font color="#CCCCCC"> we can run this</font><font color="#E5E5E5"> thing on</font>

127
00:04:41,410 --> 00:04:45,700
non classical inputs<font color="#E5E5E5"> so for example we</font>

128
00:04:43,990 --> 00:04:47,890
could<font color="#E5E5E5"> plug in the uniform superposition</font>

129
00:04:45,700 --> 00:04:50,229
and get back<font color="#CCCCCC"> the uniform superposition</font>

130
00:04:47,890 --> 00:04:52,659
<font color="#E5E5E5">of input-output pairs or plaintext</font>

131
00:04:50,230 --> 00:04:54,310
ciphertext pairs<font color="#E5E5E5"> okay and then perhaps</font>

132
00:04:52,660 --> 00:04:56,380
we can<font color="#E5E5E5"> run</font><font color="#CCCCCC"> some interesting quantum</font>

133
00:04:54,310 --> 00:04:58,390
circuit on it<font color="#E5E5E5"> and measure and get out</font>

134
00:04:56,380 --> 00:05:02,620
something that<font color="#CCCCCC"> we couldn't using just a</font>

135
00:04:58,390 --> 00:05:05,650
classical<font color="#E5E5E5"> access okay okay so does this</font>

136
00:05:02,620 --> 00:05:07,330
model<font color="#E5E5E5"> make sense is it realistic</font><font color="#CCCCCC"> so you</font>

137
00:05:05,650 --> 00:05:08,919
know that depends on<font color="#E5E5E5"> your view I think</font>

138
00:05:07,330 --> 00:05:11,050
<font color="#E5E5E5">in some settings it makes perfect</font><font color="#CCCCCC"> sense</font>

139
00:05:08,920 --> 00:05:14,230
<font color="#CCCCCC">certainly in any setting</font><font color="#E5E5E5"> in which the</font>

140
00:05:11,050 --> 00:05:16,030
adversary<font color="#CCCCCC"> gets access to</font><font color="#E5E5E5"> code that code</font>

141
00:05:14,230 --> 00:05:17,530
can always be transformed to reversible

142
00:05:16,030 --> 00:05:19,840
circuit and then run on<font color="#E5E5E5"> your quantum</font>

143
00:05:17,530 --> 00:05:22,059
hardware<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> certainly in the case of</font>

144
00:05:19,840 --> 00:05:24,219
<font color="#CCCCCC">public</font><font color="#E5E5E5"> encryption or hash functions or</font>

145
00:05:22,060 --> 00:05:26,320
or when you're exposing<font color="#E5E5E5"> code via</font>

146
00:05:24,220 --> 00:05:29,140
obfuscation<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> definitely a model</font>

147
00:05:26,320 --> 00:05:31,420
that<font color="#E5E5E5"> you need to be thinking about in</font>

148
00:05:29,140 --> 00:05:33,010
other setting maybe maybe this depends

149
00:05:31,420 --> 00:05:34,540
on<font color="#E5E5E5"> your on the model</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you're</font>

150
00:05:33,010 --> 00:05:35,950
interested<font color="#E5E5E5"> in or somehow the physics or</font>

151
00:05:34,540 --> 00:05:38,410
<font color="#E5E5E5">even the engineering of</font><font color="#CCCCCC"> the particular</font>

152
00:05:35,950 --> 00:05:40,840
device<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example you know maybe in</font>

153
00:05:38,410 --> 00:05:42,760
private key encryption<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> your</font>

154
00:05:40,840 --> 00:05:44,530
your<font color="#E5E5E5"> encryption scheme will run on some</font>

155
00:05:42,760 --> 00:05:47,260
very small<font color="#CCCCCC"> small</font><font color="#E5E5E5"> smart card and you're</font>

156
00:05:44,530 --> 00:05:48,849
worried that some clever adversary will

157
00:05:47,260 --> 00:05:50,140
be able<font color="#E5E5E5"> to take it back to their lab</font><font color="#CCCCCC"> and</font>

158
00:05:48,850 --> 00:05:54,330
you know put<font color="#E5E5E5"> it into their dilution</font>

159
00:05:50,140 --> 00:05:56,560
refrigerator<font color="#E5E5E5"> and and run it coherently</font>

160
00:05:54,330 --> 00:05:57,400
<font color="#CCCCCC">but in any case I'd like</font><font color="#E5E5E5"> to convince you</font>

161
00:05:56,560 --> 00:06:00,550
that the model is certainly a

162
00:05:57,400 --> 00:06:01,810
<font color="#E5E5E5">theoretical interest</font><font color="#CCCCCC"> and so let</font><font color="#E5E5E5"> me talk</font>

163
00:06:00,550 --> 00:06:04,720
<font color="#CCCCCC">about that in the next</font><font color="#E5E5E5"> set</font><font color="#CCCCCC"> of a couple</font>

164
00:06:01,810 --> 00:06:06,130
of slides<font color="#CCCCCC"> so</font><font color="#E5E5E5"> so first of all</font><font color="#CCCCCC"> is anything</font>

165
00:06:04,720 --> 00:06:09,130
secure at<font color="#E5E5E5"> all in this model is it a</font>

166
00:06:06,130 --> 00:06:10,719
trivial model<font color="#E5E5E5"> so yes things are secure</font>

167
00:06:09,130 --> 00:06:13,060
because<font color="#E5E5E5"> we still have pseudo randomness</font>

168
00:06:10,720 --> 00:06:15,160
okay so<font color="#E5E5E5"> Chandra showed that in</font><font color="#CCCCCC"> fact the</font>

169
00:06:13,060 --> 00:06:17,170
<font color="#CCCCCC">the same sort of ggm construction for</font>

170
00:06:15,160 --> 00:06:20,800
pseudo-random functions but with a more

171
00:06:17,170 --> 00:06:22,780
complicated proof<font color="#CCCCCC"> happens to</font><font color="#E5E5E5"> be quantum</font>

172
00:06:20,800 --> 00:06:24,220
Oracle<font color="#CCCCCC"> secure</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so even</font><font color="#E5E5E5"> if the</font>

173
00:06:22,780 --> 00:06:26,080
<font color="#CCCCCC">adversary gets</font><font color="#E5E5E5"> to plug in you know</font>

174
00:06:24,220 --> 00:06:27,340
<font color="#E5E5E5">superpositions of inputs into the PRF</font>

175
00:06:26,080 --> 00:06:29,710
and get back<font color="#E5E5E5"> the</font><font color="#CCCCCC"> corresponding</font>

176
00:06:27,340 --> 00:06:31,630
superposition<font color="#E5E5E5"> of outputs</font><font color="#CCCCCC"> still it looks</font>

177
00:06:29,710 --> 00:06:33,880
<font color="#E5E5E5">like a random</font><font color="#CCCCCC"> function okay of course</font>

178
00:06:31,630 --> 00:06:34,980
<font color="#CCCCCC">you have to start</font><font color="#E5E5E5"> from a from a quantum</font>

179
00:06:33,880 --> 00:06:40,080
one<font color="#E5E5E5"> wave function but</font>

180
00:06:34,980 --> 00:06:42,420
<font color="#CCCCCC">no</font><font color="#E5E5E5"> to build up this okay and this yields</font>

181
00:06:40,080 --> 00:06:44,219
<font color="#CCCCCC">sort</font><font color="#E5E5E5"> of authentication and encryption</font>

182
00:06:42,420 --> 00:06:45,630
<font color="#E5E5E5">that secure in this model using sort of</font>

183
00:06:44,220 --> 00:06:49,440
<font color="#E5E5E5">the standard constructions that we use</font>

184
00:06:45,630 --> 00:06:50,940
from prfs<font color="#E5E5E5"> okay so just a standard PRF</font>

185
00:06:49,440 --> 00:06:52,650
<font color="#CCCCCC">Mac</font><font color="#E5E5E5"> and the standard encryption scheme</font>

186
00:06:50,940 --> 00:06:56,490
symmetric key encryption scheme from PRF

187
00:06:52,650 --> 00:06:58,109
just works<font color="#E5E5E5"> okay okay so then you might</font>

188
00:06:56,490 --> 00:06:59,910
<font color="#CCCCCC">say well maybe everything is okay maybe</font>

189
00:06:58,110 --> 00:07:02,010
classical access against quantum

190
00:06:59,910 --> 00:07:04,170
adversaries<font color="#E5E5E5"> is the same as quantum</font>

191
00:07:02,010 --> 00:07:06,780
access against<font color="#E5E5E5"> Ponte Vedra series that</font>

192
00:07:04,170 --> 00:07:08,960
turns out not<font color="#CCCCCC"> to be the</font><font color="#E5E5E5"> case</font><font color="#CCCCCC"> someone</font>

193
00:07:06,780 --> 00:07:12,150
dramatically so so let's look at this

194
00:07:08,960 --> 00:07:16,409
<font color="#E5E5E5">simplest block cipher which is a variant</font>

195
00:07:12,150 --> 00:07:18,719
of<font color="#E5E5E5"> evidence or with a single key so here</font>

196
00:07:16,410 --> 00:07:22,320
we have a public random permutation P

197
00:07:18,720 --> 00:07:24,510
and to turn<font color="#E5E5E5"> it into a sort</font><font color="#CCCCCC"> of a private</font>

198
00:07:22,320 --> 00:07:28,469
permutation we select a uniformly<font color="#CCCCCC"> random</font>

199
00:07:24,510 --> 00:07:29,969
key and then<font color="#E5E5E5"> we encrypt by</font><font color="#CCCCCC"> X soaring the</font>

200
00:07:28,470 --> 00:07:31,320
<font color="#E5E5E5">key into</font><font color="#CCCCCC"> the plaintext</font><font color="#E5E5E5"> applying the</font>

201
00:07:29,970 --> 00:07:36,240
permutation and<font color="#E5E5E5"> then X touring in the</font>

202
00:07:31,320 --> 00:07:37,409
key again<font color="#E5E5E5"> okay so this is this</font><font color="#CCCCCC"> is a</font>

203
00:07:36,240 --> 00:07:39,540
strongly pseudo-random permutation

204
00:07:37,410 --> 00:07:41,370
classically you know and you can't

205
00:07:39,540 --> 00:07:42,660
decrypt you can't Forge<font color="#E5E5E5"> and so on and so</font>

206
00:07:41,370 --> 00:07:47,340
forth so<font color="#CCCCCC"> this is sort of a good block</font>

207
00:07:42,660 --> 00:07:48,630
cipher so what happens quantumly so

208
00:07:47,340 --> 00:07:52,469
quantumly it turns out that there's an

209
00:07:48,630 --> 00:07:54,060
attack<font color="#CCCCCC"> in the quantum Oracle model so</font>

210
00:07:52,470 --> 00:07:56,370
how does this attack work well it's

211
00:07:54,060 --> 00:07:58,140
pretty<font color="#E5E5E5"> simple it says you know given</font>

212
00:07:56,370 --> 00:08:00,240
that<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> Oracle access to P and</font>

213
00:07:58,140 --> 00:08:02,669
Oracle access to<font color="#E5E5E5"> e you</font><font color="#CCCCCC"> should just</font><font color="#E5E5E5"> form</font>

214
00:08:00,240 --> 00:08:05,880
the<font color="#E5E5E5"> XOR of these two things and then run</font>

215
00:08:02,670 --> 00:08:07,140
<font color="#E5E5E5">something</font><font color="#CCCCCC"> called Simon's algorithm so</font>

216
00:08:05,880 --> 00:08:09,390
what does Simon's algorithm if you

217
00:08:07,140 --> 00:08:11,400
haven't seen it<font color="#CCCCCC"> so Simon's algorithm is</font>

218
00:08:09,390 --> 00:08:13,650
a very simple predecessor to shore to

219
00:08:11,400 --> 00:08:15,900
shore<font color="#CCCCCC"> an algorithm</font><font color="#E5E5E5"> in fact it's kind</font><font color="#CCCCCC"> of</font>

220
00:08:13,650 --> 00:08:17,429
one of<font color="#E5E5E5"> the ideas that that motivated</font>

221
00:08:15,900 --> 00:08:19,710
<font color="#CCCCCC">shor to think about whether factoring is</font>

222
00:08:17,430 --> 00:08:21,720
possible<font color="#CCCCCC"> on a quantum computer</font><font color="#E5E5E5"> and</font>

223
00:08:19,710 --> 00:08:23,549
here's the<font color="#E5E5E5"> problem that it solves you</font>

224
00:08:21,720 --> 00:08:25,800
have Oracle access to some<font color="#CCCCCC"> function</font><font color="#E5E5E5"> and</font>

225
00:08:23,550 --> 00:08:26,490
<font color="#CCCCCC">you're promised</font><font color="#E5E5E5"> that there's some secret</font>

226
00:08:25,800 --> 00:08:30,720
<font color="#CCCCCC">okay</font>

227
00:08:26,490 --> 00:08:32,760
so that if two inputs differ by K then

228
00:08:30,720 --> 00:08:33,900
<font color="#E5E5E5">they're mapped to the same value</font><font color="#CCCCCC"> and if</font>

229
00:08:32,760 --> 00:08:36,330
they don't they're mapped to a different

230
00:08:33,900 --> 00:08:40,590
value<font color="#E5E5E5"> okay so this assignments promise</font>

231
00:08:36,330 --> 00:08:42,120
and Simon's algorithm outputs K<font color="#E5E5E5"> with a</font>

232
00:08:40,590 --> 00:08:43,770
linear<font color="#E5E5E5"> number of queries and it's an</font>

233
00:08:42,120 --> 00:08:45,420
<font color="#E5E5E5">extremely</font><font color="#CCCCCC"> simple algorithm it basically</font>

234
00:08:43,770 --> 00:08:47,400
just computes this function in the

235
00:08:45,420 --> 00:08:48,660
Fourier basis<font color="#E5E5E5"> using</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> quantum Fourier</font>

236
00:08:47,400 --> 00:08:50,550
transform

237
00:08:48,660 --> 00:08:52,050
but in this<font color="#E5E5E5"> case the quantum Fourier</font>

238
00:08:50,550 --> 00:08:54,569
transform is extremely simple it's just

239
00:08:52,050 --> 00:08:56,699
<font color="#CCCCCC">a depth one circuit you know of single</font>

240
00:08:54,569 --> 00:08:58,050
qubit<font color="#E5E5E5"> Hadamard gates okay</font><font color="#CCCCCC"> so it's an</font>

241
00:08:56,699 --> 00:09:02,069
<font color="#CCCCCC">extremely simple algorithm one of the</font>

242
00:08:58,050 --> 00:09:04,349
simplest<font color="#CCCCCC"> examples of quantum algorithms</font>

243
00:09:02,069 --> 00:09:06,660
<font color="#E5E5E5">so why does this work well</font><font color="#CCCCCC"> you can</font>

244
00:09:04,350 --> 00:09:08,279
simply just check<font color="#E5E5E5"> that you know the XOR</font>

245
00:09:06,660 --> 00:09:10,439
of these two things has exactly<font color="#E5E5E5"> the</font>

246
00:09:08,279 --> 00:09:13,500
<font color="#E5E5E5">Simon's property up to</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> little bit of</font>

247
00:09:10,439 --> 00:09:15,560
error which is no<font color="#E5E5E5"> problem because</font><font color="#CCCCCC"> the</font>

248
00:09:13,500 --> 00:09:18,029
<font color="#CCCCCC">word ring sort</font><font color="#E5E5E5"> of this global Fourier</font>

249
00:09:15,560 --> 00:09:20,579
computation<font color="#CCCCCC"> that doesn't care about</font>

250
00:09:18,029 --> 00:09:22,139
<font color="#CCCCCC">little disturbances</font><font color="#E5E5E5"> and and in</font><font color="#CCCCCC"> fact we</font>

251
00:09:20,579 --> 00:09:24,060
<font color="#E5E5E5">know</font><font color="#CCCCCC"> that this attack will actually now</font>

252
00:09:22,139 --> 00:09:26,459
output<font color="#E5E5E5"> K</font><font color="#CCCCCC"> okay so this is a devastating</font>

253
00:09:24,060 --> 00:09:27,989
<font color="#CCCCCC">attack</font><font color="#E5E5E5"> in this model at least it gives</font>

254
00:09:26,459 --> 00:09:30,560
completely key<font color="#E5E5E5"> recovery with only a</font>

255
00:09:27,990 --> 00:09:33,120
linear<font color="#CCCCCC"> number of queries space and time</font>

256
00:09:30,560 --> 00:09:35,579
<font color="#E5E5E5">so this was observed</font><font color="#CCCCCC"> by Kolkata and Mori</font>

257
00:09:33,120 --> 00:09:37,709
<font color="#CCCCCC">they also showed that in fact</font><font color="#E5E5E5"> Simon's</font>

258
00:09:35,579 --> 00:09:40,709
algorithm can be<font color="#CCCCCC"> used to distinguish the</font>

259
00:09:37,709 --> 00:09:42,268
<font color="#CCCCCC">3-round feistel cipher from random</font><font color="#E5E5E5"> and</font>

260
00:09:40,709 --> 00:09:43,979
then last year there was a nice crypto

261
00:09:42,269 --> 00:09:46,290
paper and<font color="#E5E5E5"> another paper which showed</font>

262
00:09:43,980 --> 00:09:49,709
that<font color="#E5E5E5"> in fact Simon's algorithm can be</font>

263
00:09:46,290 --> 00:09:52,709
<font color="#CCCCCC">used to break a whole host of other</font>

264
00:09:49,709 --> 00:09:54,300
<font color="#CCCCCC">things including</font><font color="#E5E5E5"> encrypted cbc-mac these</font>

265
00:09:52,709 --> 00:09:59,790
tweakable ciphers<font color="#CCCCCC"> and lots of other</font>

266
00:09:54,300 --> 00:10:02,430
stuff<font color="#CCCCCC"> okay okay so right so this</font><font color="#E5E5E5"> Simon</font>

267
00:09:59,790 --> 00:10:04,980
attack breaks quite a few things<font color="#CCCCCC"> so</font>

268
00:10:02,430 --> 00:10:06,420
what's really<font color="#E5E5E5"> happening</font><font color="#CCCCCC"> underneath so if</font>

269
00:10:04,980 --> 00:10:07,620
you view<font color="#E5E5E5"> these attacks in a certain way</font>

270
00:10:06,420 --> 00:10:09,630
and they're all kind<font color="#CCCCCC"> of a little bit</font>

271
00:10:07,620 --> 00:10:11,880
<font color="#CCCCCC">different but</font><font color="#E5E5E5"> from a certain point of</font>

272
00:10:09,630 --> 00:10:15,870
<font color="#CCCCCC">view they all build first</font><font color="#E5E5E5"> a pair</font><font color="#CCCCCC"> of</font>

273
00:10:11,880 --> 00:10:17,430
shifted functions F and<font color="#E5E5E5"> G in</font><font color="#CCCCCC"> the even</font>

274
00:10:15,870 --> 00:10:19,829
<font color="#CCCCCC">Monsour case you know these functions</font>

275
00:10:17,430 --> 00:10:21,989
are<font color="#CCCCCC"> just given to you and the shift is</font>

276
00:10:19,829 --> 00:10:23,219
<font color="#CCCCCC">just the key in other cases</font><font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> that</font>

277
00:10:21,990 --> 00:10:24,720
you have to work a little bit<font color="#CCCCCC"> to build</font>

278
00:10:23,220 --> 00:10:27,240
<font color="#E5E5E5">these functions and then the</font><font color="#CCCCCC"> thing that</font>

279
00:10:24,720 --> 00:10:29,399
you get from<font color="#E5E5E5"> the shift is sort of a yes</font>

280
00:10:27,240 --> 00:10:31,709
or no answer like is it pseudo-random or

281
00:10:29,399 --> 00:10:32,730
is it random<font color="#E5E5E5"> but the basic story looks</font>

282
00:10:31,709 --> 00:10:34,469
like this<font color="#E5E5E5"> and then you</font><font color="#CCCCCC"> just apply</font>

283
00:10:32,730 --> 00:10:38,279
<font color="#E5E5E5">Simon's algorithm to the XOR of these</font>

284
00:10:34,470 --> 00:10:39,990
two functions<font color="#E5E5E5"> okay so if you've sort of</font>

285
00:10:38,279 --> 00:10:42,360
thought<font color="#CCCCCC"> about quantum algorithms before</font>

286
00:10:39,990 --> 00:10:44,189
you'll probably notice this this<font color="#E5E5E5"> shifted</font>

287
00:10:42,360 --> 00:10:46,230
problem here this is exactly<font color="#CCCCCC"> the hidden</font>

288
00:10:44,189 --> 00:10:47,699
shift problem that the quantum

289
00:10:46,230 --> 00:10:50,189
algorithms community has been studying

290
00:10:47,699 --> 00:10:52,709
<font color="#E5E5E5">since basically since some</font><font color="#CCCCCC"> Shor's</font>

291
00:10:50,189 --> 00:10:55,019
algorithm so in the general<font color="#CCCCCC"> case it's</font>

292
00:10:52,709 --> 00:10:58,079
stated<font color="#E5E5E5"> like this you have some finite</font>

293
00:10:55,019 --> 00:10:59,819
group<font color="#E5E5E5"> G and you have Oracle access to</font>

294
00:10:58,079 --> 00:11:00,630
<font color="#E5E5E5">two injective functions and a promise</font>

295
00:10:59,819 --> 00:11:01,949
<font color="#CCCCCC">that there's a</font>

296
00:11:00,630 --> 00:11:04,500
shift<font color="#E5E5E5"> you know their shifts of each</font>

297
00:11:01,950 --> 00:11:09,390
other and the goal<font color="#CCCCCC"> is to output that</font>

298
00:11:04,500 --> 00:11:11,130
shift<font color="#E5E5E5"> okay so here's a couple of sort of</font>

299
00:11:09,390 --> 00:11:14,160
random random looking functions their

300
00:11:11,130 --> 00:11:16,290
shifts actually<font color="#CCCCCC"> so what do we know about</font>

301
00:11:14,160 --> 00:11:19,709
this<font color="#E5E5E5"> hidden shift problem after you know</font>

302
00:11:16,290 --> 00:11:21,810
<font color="#E5E5E5">20-some years of thinking</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> so we</font>

303
00:11:19,710 --> 00:11:24,480
know that<font color="#E5E5E5"> it requires exponentially many</font>

304
00:11:21,810 --> 00:11:26,489
queries classically<font color="#E5E5E5"> okay and here's the</font>

305
00:11:24,480 --> 00:11:29,790
<font color="#E5E5E5">right sort of complex key parameter is</font>

306
00:11:26,490 --> 00:11:31,350
log the size of the group and<font color="#E5E5E5"> we know</font>

307
00:11:29,790 --> 00:11:32,819
that<font color="#E5E5E5"> it's efficiently solvable for</font><font color="#CCCCCC"> Zima</font>

308
00:11:31,350 --> 00:11:35,790
<font color="#CCCCCC">to to the end</font><font color="#E5E5E5"> by the</font><font color="#CCCCCC"> algorithm that</font><font color="#E5E5E5"> I</font>

309
00:11:32,820 --> 00:11:37,140
just<font color="#E5E5E5"> told you about Simon however for</font>

310
00:11:35,790 --> 00:11:39,480
most<font color="#E5E5E5"> other groups</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> problem appears</font>

311
00:11:37,140 --> 00:11:42,569
to be hard<font color="#CCCCCC"> okay so on cyclic groups the</font>

312
00:11:39,480 --> 00:11:43,950
<font color="#CCCCCC">best-known algorithm takes time</font><font color="#E5E5E5"> to to</font>

313
00:11:42,570 --> 00:11:46,890
the root end this is the Cooper burg

314
00:11:43,950 --> 00:11:48,120
sieve and this is still<font color="#CCCCCC"> the best known</font>

315
00:11:46,890 --> 00:11:50,130
algorithm and it's certainly<font color="#E5E5E5"> not for</font>

316
00:11:48,120 --> 00:11:54,540
lack of trying<font color="#CCCCCC"> because we know from</font><font color="#E5E5E5"> a</font>

317
00:11:50,130 --> 00:11:57,300
result of reg EV from 2002 that if we

318
00:11:54,540 --> 00:11:59,520
could<font color="#E5E5E5"> make basically our</font><font color="#CCCCCC"> only idea for</font>

319
00:11:57,300 --> 00:12:02,099
this problem work this is called coset

320
00:11:59,520 --> 00:12:04,560
sampling<font color="#CCCCCC"> then we would</font><font color="#E5E5E5"> have then we</font>

321
00:12:02,100 --> 00:12:06,660
would put unique<font color="#CCCCCC"> SVP</font><font color="#E5E5E5"> into quantum</font>

322
00:12:04,560 --> 00:12:08,729
polynomial time<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> and when I say this</font>

323
00:12:06,660 --> 00:12:10,740
<font color="#E5E5E5">is our only idea</font><font color="#CCCCCC"> I really mean this is</font>

324
00:12:08,730 --> 00:12:13,230
our only idea<font color="#E5E5E5"> like there are no other</font>

325
00:12:10,740 --> 00:12:15,930
strategies<font color="#CCCCCC"> that have made any progress</font>

326
00:12:13,230 --> 00:12:18,240
whatsoever<font color="#CCCCCC"> and some group families this</font>

327
00:12:15,930 --> 00:12:19,229
<font color="#CCCCCC">coset sampling thing</font><font color="#E5E5E5"> makes quite a bit</font>

328
00:12:18,240 --> 00:12:20,910
of progress and<font color="#E5E5E5"> it's sort of a</font>

329
00:12:19,230 --> 00:12:22,980
generalization a natural generalization

330
00:12:20,910 --> 00:12:26,250
of<font color="#CCCCCC"> what happens in Shor's algorithm but</font>

331
00:12:22,980 --> 00:12:27,690
besides that<font color="#CCCCCC"> we have no</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> ideas okay</font>

332
00:12:26,250 --> 00:12:29,460
and then you<font color="#E5E5E5"> can go to more complicated</font>

333
00:12:27,690 --> 00:12:32,250
groups like symmetric groups and where

334
00:12:29,460 --> 00:12:33,840
there we really have have no idea what

335
00:12:32,250 --> 00:12:35,970
to do we don't<font color="#E5E5E5"> have any even sub</font>

336
00:12:33,840 --> 00:12:37,800
exponential time algorithms and we have

337
00:12:35,970 --> 00:12:39,870
<font color="#E5E5E5">quite a few negative results saying that</font>

338
00:12:37,800 --> 00:12:41,219
you know this<font color="#CCCCCC"> cosets sampling strategy</font>

339
00:12:39,870 --> 00:12:46,590
is probably<font color="#CCCCCC"> not going to go anywhere</font>

340
00:12:41,220 --> 00:12:48,780
<font color="#E5E5E5">okay so so this suggests it of a natural</font>

341
00:12:46,590 --> 00:12:51,690
fix for this<font color="#E5E5E5"> problem with all the</font>

342
00:12:48,780 --> 00:12:53,189
assignment attacks<font color="#CCCCCC"> which is to select</font>

343
00:12:51,690 --> 00:12:55,170
some exponentially large group like

344
00:12:53,190 --> 00:12:57,210
cyclic groups or dihedral groups or

345
00:12:55,170 --> 00:12:59,880
matrix groups<font color="#E5E5E5"> your favorite group</font><font color="#CCCCCC"> family</font>

346
00:12:57,210 --> 00:13:02,250
and to replace the<font color="#CCCCCC"> input-output spaces</font>

347
00:12:59,880 --> 00:13:04,800
and all of these different schemes with

348
00:13:02,250 --> 00:13:07,290
G and<font color="#E5E5E5"> replace the bitwise XOR operation</font>

349
00:13:04,800 --> 00:13:08,520
with<font color="#CCCCCC"> the group operation</font><font color="#E5E5E5"> on G and see if</font>

350
00:13:07,290 --> 00:13:10,890
you can get away<font color="#CCCCCC"> from this sort of</font>

351
00:13:08,520 --> 00:13:12,180
special feature<font color="#E5E5E5"> that</font><font color="#CCCCCC"> szema to at the</font><font color="#E5E5E5"> end</font>

352
00:13:10,890 --> 00:13:15,149
has kind of<font color="#E5E5E5"> in the quantum</font>

353
00:13:12,180 --> 00:13:16,589
world<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so of course you should do a</font>

354
00:13:15,149 --> 00:13:18,360
sanity check<font color="#E5E5E5"> first to make sure this</font>

355
00:13:16,589 --> 00:13:23,339
doesn't<font color="#E5E5E5"> affect classical access security</font>

356
00:13:18,360 --> 00:13:24,390
and<font color="#CCCCCC"> that all is fine so what happens so</font>

357
00:13:23,339 --> 00:13:25,860
I should say I mean certainly<font color="#E5E5E5"> people</font>

358
00:13:24,390 --> 00:13:27,689
have thought quite<font color="#E5E5E5"> a bit in the</font><font color="#CCCCCC"> past</font>

359
00:13:25,860 --> 00:13:28,920
about block ciphers on other domains so

360
00:13:27,690 --> 00:13:31,500
in sense<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is not</font><font color="#E5E5E5"> kind of a new idea</font>

361
00:13:28,920 --> 00:13:34,349
<font color="#CCCCCC">but let's see what</font><font color="#E5E5E5"> happens</font>

362
00:13:31,500 --> 00:13:38,100
so for Evan Mansoor we<font color="#E5E5E5"> now need need a</font>

363
00:13:34,350 --> 00:13:39,779
public permutation on G and we select a

364
00:13:38,100 --> 00:13:41,610
uniformly<font color="#CCCCCC"> random element of the</font><font color="#E5E5E5"> group as</font>

365
00:13:39,779 --> 00:13:43,230
our key and then<font color="#E5E5E5"> we do the natural thing</font>

366
00:13:41,610 --> 00:13:45,390
<font color="#E5E5E5">we compose the plaintext with the key</font>

367
00:13:43,230 --> 00:13:49,140
apply the permutation and then compose

368
00:13:45,390 --> 00:13:51,120
with the key again for feistel networks

369
00:13:49,140 --> 00:13:53,880
you can<font color="#CCCCCC"> do the</font><font color="#E5E5E5"> same thing you need some</font>

370
00:13:51,120 --> 00:13:55,350
pseudo-random functions on the group the

371
00:13:53,880 --> 00:13:58,080
keys<font color="#CCCCCC"> themselves can just be whatever the</font>

372
00:13:55,350 --> 00:13:59,430
keys are for the PRF and then you just

373
00:13:58,080 --> 00:14:01,770
run<font color="#E5E5E5"> the usual feistel</font><font color="#CCCCCC"> ladder</font>

374
00:13:59,430 --> 00:14:03,630
construction replacing a bitwise xor

375
00:14:01,770 --> 00:14:07,110
with the group<font color="#E5E5E5"> operation</font><font color="#CCCCCC"> just a natural</font>

376
00:14:03,630 --> 00:14:09,089
<font color="#E5E5E5">thing and this you know we can go on</font><font color="#CCCCCC"> to</font>

377
00:14:07,110 --> 00:14:12,170
all<font color="#E5E5E5"> of these</font><font color="#CCCCCC"> other schemes but ok</font><font color="#E5E5E5"> let's</font>

378
00:14:09,089 --> 00:14:14,700
<font color="#CCCCCC">maybe at least say the</font><font color="#E5E5E5"> encrypted cbc-mac</font>

379
00:14:12,170 --> 00:14:17,189
<font color="#CCCCCC">for that you need</font><font color="#E5E5E5"> a pseudo-random</font>

380
00:14:14,700 --> 00:14:20,100
permutation on<font color="#CCCCCC"> G</font><font color="#E5E5E5"> and you need the</font>

381
00:14:17,190 --> 00:14:22,410
messages to be<font color="#CCCCCC"> encoded somehow as powers</font>

382
00:14:20,100 --> 00:14:24,170
<font color="#E5E5E5">in powers</font><font color="#CCCCCC"> of the group okay and then you</font>

383
00:14:22,410 --> 00:14:27,510
decompose them and do the standard

384
00:14:24,170 --> 00:14:30,209
<font color="#E5E5E5">construction to get the tag out</font><font color="#CCCCCC"> okay</font>

385
00:14:27,510 --> 00:14:32,880
<font color="#CCCCCC">okay so I guess the real question is is</font>

386
00:14:30,209 --> 00:14:35,609
this<font color="#E5E5E5"> fix a good idea should we do this</font>

387
00:14:32,880 --> 00:14:37,830
<font color="#E5E5E5">so when thinking about</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> problem as</font>

388
00:14:35,610 --> 00:14:39,240
it turns out we we observed some

389
00:14:37,830 --> 00:14:41,940
interesting new things about<font color="#E5E5E5"> the hidden</font>

390
00:14:39,240 --> 00:14:45,690
shift problem that somehow<font color="#CCCCCC"> had not been</font>

391
00:14:41,940 --> 00:14:46,920
noticed before<font color="#CCCCCC"> and so let me try to</font>

392
00:14:45,690 --> 00:14:48,209
first<font color="#CCCCCC"> convince you that the hidden shift</font>

393
00:14:46,920 --> 00:14:51,240
problem seems to<font color="#CCCCCC"> be a good crypto</font>

394
00:14:48,209 --> 00:14:54,000
primitive so first of all<font color="#CCCCCC"> it's random</font>

395
00:14:51,240 --> 00:14:55,950
self reducible so a little<font color="#E5E5E5"> more</font>

396
00:14:54,000 --> 00:14:58,020
carefully<font color="#E5E5E5"> what do I mean</font><font color="#CCCCCC"> by that</font><font color="#E5E5E5"> we mean</font>

397
00:14:55,950 --> 00:14:59,730
that<font color="#CCCCCC"> if you take a randomized version</font><font color="#E5E5E5"> of</font>

398
00:14:58,020 --> 00:15:01,230
the hidden shift problem<font color="#CCCCCC"> where one</font>

399
00:14:59,730 --> 00:15:03,750
function is random and<font color="#CCCCCC"> the other one is</font>

400
00:15:01,230 --> 00:15:05,670
a shift then in fact<font color="#E5E5E5"> you can prove kind</font>

401
00:15:03,750 --> 00:15:07,650
of an amplification theorem that says

402
00:15:05,670 --> 00:15:09,329
<font color="#E5E5E5">that as</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> soon as you give</font><font color="#CCCCCC"> me a quantum</font>

403
00:15:07,650 --> 00:15:10,890
algorithm<font color="#CCCCCC"> that solves this problem for</font>

404
00:15:09,329 --> 00:15:12,989
an inverse polynomial fraction a<font color="#E5E5E5"> non</font>

405
00:15:10,890 --> 00:15:16,050
<font color="#E5E5E5">negligible fraction of inputs then in</font>

406
00:15:12,990 --> 00:15:17,399
<font color="#E5E5E5">fact I can solve it everywhere</font><font color="#CCCCCC"> and this</font>

407
00:15:16,050 --> 00:15:19,469
is relatively straightforward<font color="#CCCCCC"> to do</font>

408
00:15:17,399 --> 00:15:22,020
<font color="#E5E5E5">basically using</font><font color="#CCCCCC"> gendry's quantum secure</font>

409
00:15:19,470 --> 00:15:23,700
<font color="#E5E5E5">PRF and some simple tricks for you know</font>

410
00:15:22,020 --> 00:15:25,209
randomizing<font color="#CCCCCC"> the shift and randomizing</font>

411
00:15:23,700 --> 00:15:27,009
functions around

412
00:15:25,209 --> 00:15:28,329
and then doing some sampling and

413
00:15:27,009 --> 00:15:30,579
checking<font color="#CCCCCC"> to see if the answer is correct</font>

414
00:15:28,329 --> 00:15:36,519
<font color="#E5E5E5">we</font><font color="#CCCCCC"> can amplify</font><font color="#E5E5E5"> this all the way</font><font color="#CCCCCC"> to you</font>

415
00:15:30,579 --> 00:15:37,719
<font color="#E5E5E5">know one</font><font color="#CCCCCC"> - negligible</font><font color="#E5E5E5"> success okay</font><font color="#CCCCCC"> the</font>

416
00:15:36,519 --> 00:15:40,209
other<font color="#CCCCCC"> reason to think that it's a good</font>

417
00:15:37,720 --> 00:15:41,949
crypto primitive is that in most<font color="#E5E5E5"> cases</font>

418
00:15:40,209 --> 00:15:43,599
the decision<font color="#E5E5E5"> in search version turns out</font>

419
00:15:41,949 --> 00:15:47,889
to be<font color="#E5E5E5"> equivalent</font><font color="#CCCCCC"> says we were</font><font color="#E5E5E5"> also able</font>

420
00:15:43,600 --> 00:15:49,420
to show this<font color="#E5E5E5"> so the proof idea okay in</font>

421
00:15:47,889 --> 00:15:50,379
one direction that's it's obvious in the

422
00:15:49,420 --> 00:15:53,498
other<font color="#E5E5E5"> direction you</font><font color="#CCCCCC"> have to work a</font>

423
00:15:50,379 --> 00:15:55,149
little more so<font color="#E5E5E5"> so basically you know we</font>

424
00:15:53,499 --> 00:15:56,860
need some<font color="#E5E5E5"> additional condition on the</font>

425
00:15:55,149 --> 00:15:58,360
group we<font color="#E5E5E5"> need that it has this efficient</font>

426
00:15:56,860 --> 00:16:00,490
subgroup series but this is true for

427
00:15:58,360 --> 00:16:02,050
<font color="#CCCCCC">most groups</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> interest and then</font>

428
00:16:00,490 --> 00:16:04,119
basically we can<font color="#E5E5E5"> do a sort</font><font color="#CCCCCC"> of an</font>

429
00:16:02,050 --> 00:16:05,589
<font color="#E5E5E5">iterative or recursive rather algorithm</font>

430
00:16:04,119 --> 00:16:07,779
that descends down the<font color="#CCCCCC"> super</font><font color="#E5E5E5"> subgroup</font>

431
00:16:05,589 --> 00:16:08,980
<font color="#E5E5E5">tower and you know it has to do a little</font>

432
00:16:07,779 --> 00:16:10,809
<font color="#E5E5E5">work it has to work</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> the</font>

433
00:16:08,980 --> 00:16:13,050
transversal adjusting these shifts as it

434
00:16:10,809 --> 00:16:16,600
goes and calling the decisional

435
00:16:13,050 --> 00:16:18,069
algorithm<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of on each transversal</font>

436
00:16:16,600 --> 00:16:21,279
element and on each level of<font color="#E5E5E5"> the tower</font>

437
00:16:18,069 --> 00:16:25,719
<font color="#E5E5E5">and then eventually you</font><font color="#CCCCCC"> can build the</font>

438
00:16:21,279 --> 00:16:27,910
<font color="#E5E5E5">entire shift</font><font color="#CCCCCC"> right so I should have said</font>

439
00:16:25,720 --> 00:16:29,589
what I mean by the decisional version of

440
00:16:27,910 --> 00:16:31,059
the problem<font color="#CCCCCC"> I just mean that you decide</font>

441
00:16:29,589 --> 00:16:33,339
between<font color="#E5E5E5"> these two cases so I give you</font>

442
00:16:31,059 --> 00:16:35,290
<font color="#E5E5E5">two functions and</font><font color="#CCCCCC"> I promise either both</font>

443
00:16:33,339 --> 00:16:39,129
<font color="#CCCCCC">of them are random or one is random and</font>

444
00:16:35,290 --> 00:16:40,209
the other is a shift<font color="#CCCCCC"> okay right</font><font color="#E5E5E5"> so the</font>

445
00:16:39,129 --> 00:16:42,309
<font color="#CCCCCC">other reason to</font><font color="#E5E5E5"> think that this is a</font>

446
00:16:40,209 --> 00:16:43,748
generic fit<font color="#E5E5E5"> that this fix is a good</font><font color="#CCCCCC"> idea</font>

447
00:16:42,309 --> 00:16:45,670
is that<font color="#CCCCCC"> at least</font><font color="#E5E5E5"> sort of on the face of</font>

448
00:16:43,749 --> 00:16:47,829
<font color="#CCCCCC">it it seems</font><font color="#E5E5E5"> to frustrate all of these</font>

449
00:16:45,670 --> 00:16:49,839
attacks<font color="#CCCCCC"> okay so if you just try</font><font color="#E5E5E5"> to run</font>

450
00:16:47,829 --> 00:16:51,399
the same attack on these sort of hidden

451
00:16:49,839 --> 00:16:53,110
shift versions of these constructions

452
00:16:51,399 --> 00:16:54,309
<font color="#E5E5E5">then it really seems like you end up</font>

453
00:16:53,110 --> 00:16:55,720
with a<font color="#E5E5E5"> sub</font><font color="#CCCCCC"> root with needing a</font>

454
00:16:54,309 --> 00:16:59,439
subroutine<font color="#CCCCCC"> that solves the hidden shift</font>

455
00:16:55,720 --> 00:17:01,209
problem and you know by our theorems and

456
00:16:59,439 --> 00:17:02,860
<font color="#E5E5E5">some previous results this seems pretty</font>

457
00:17:01,209 --> 00:17:04,569
unlikely<font color="#CCCCCC"> okay so this would</font><font color="#E5E5E5"> yield</font>

458
00:17:02,860 --> 00:17:07,480
<font color="#CCCCCC">worst-case algorithms for hidden shift</font>

459
00:17:04,569 --> 00:17:09,490
and the hidden<font color="#E5E5E5"> subgroup problem</font><font color="#CCCCCC"> you know</font>

460
00:17:07,480 --> 00:17:12,069
as I<font color="#CCCCCC"> said over</font><font color="#E5E5E5"> the cyclic groups if it</font>

461
00:17:09,490 --> 00:17:16,390
follows the only idea<font color="#E5E5E5"> we know it would</font>

462
00:17:12,069 --> 00:17:17,709
lead to<font color="#E5E5E5"> attacks on</font><font color="#CCCCCC"> lattice crypto over</font>

463
00:17:16,390 --> 00:17:19,270
the symmetric group<font color="#E5E5E5"> it would give us</font>

464
00:17:17,709 --> 00:17:20,919
polynomial time quantum<font color="#E5E5E5"> algorithms for</font>

465
00:17:19,270 --> 00:17:25,109
graph isomorphism and also some attacks

466
00:17:20,919 --> 00:17:33,130
on on<font color="#CCCCCC"> Mecca</font><font color="#E5E5E5"> Lee's so this seems unlikely</font>

467
00:17:25,109 --> 00:17:34,689
and so<font color="#E5E5E5"> finally we were also able to show</font>

468
00:17:33,130 --> 00:17:37,659
the<font color="#CCCCCC"> following we were able to give some</font>

469
00:17:34,690 --> 00:17:38,770
security reductions<font color="#CCCCCC"> so we start</font><font color="#E5E5E5"> with the</font>

470
00:17:37,659 --> 00:17:40,480
<font color="#CCCCCC">following assumption</font>

471
00:17:38,770 --> 00:17:41,950
we start with the<font color="#E5E5E5"> assumption that there</font>

472
00:17:40,480 --> 00:17:43,750
does not exist a polynomial time quantum

473
00:17:41,950 --> 00:17:46,299
<font color="#E5E5E5">algorithm for the hidden shift problem</font><font color="#CCCCCC"> a</font>

474
00:17:43,750 --> 00:17:48,880
worst-case algorithm and then we<font color="#CCCCCC"> were</font>

475
00:17:46,299 --> 00:17:50,500
<font color="#E5E5E5">able to show that first of all that the</font>

476
00:17:48,880 --> 00:17:52,840
hidden shift<font color="#CCCCCC"> Evan Mansoor cipher a</font>

477
00:17:50,500 --> 00:17:56,110
<font color="#CCCCCC">pseudo-random</font><font color="#E5E5E5"> and that the hidden shift</font>

478
00:17:52,840 --> 00:17:58,600
encrypted cbc-mac<font color="#CCCCCC"> is</font><font color="#E5E5E5"> collision-free okay</font>

479
00:17:56,110 --> 00:17:59,979
<font color="#E5E5E5">so there's quite a few other schemes</font>

480
00:17:58,600 --> 00:18:02,949
that<font color="#E5E5E5"> I have not mentioned in terms of</font>

481
00:17:59,980 --> 00:18:04,960
security reductions<font color="#CCCCCC"> I think in many</font><font color="#E5E5E5"> of</font>

482
00:18:02,950 --> 00:18:07,149
those cases<font color="#E5E5E5"> so for example I think</font><font color="#CCCCCC"> for l</font>

483
00:18:04,960 --> 00:18:09,520
RW tweakable<font color="#CCCCCC"> ciphers sort</font><font color="#E5E5E5"> of a simple</font>

484
00:18:07,149 --> 00:18:10,928
adaptation<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> theorem would also</font>

485
00:18:09,520 --> 00:18:14,110
give you a security reduction in that

486
00:18:10,929 --> 00:18:15,700
case<font color="#E5E5E5"> for all the</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> i think</font>

487
00:18:14,110 --> 00:18:18,939
it's mostly a matter of you know<font color="#E5E5E5"> trying</font>

488
00:18:15,700 --> 00:18:20,110
and working working harder to to get

489
00:18:18,940 --> 00:18:24,880
those reductions<font color="#CCCCCC"> I think it's likely</font>

490
00:18:20,110 --> 00:18:28,080
<font color="#E5E5E5">that</font><font color="#CCCCCC"> they exist ok ok so let me</font>

491
00:18:24,880 --> 00:18:30,580
<font color="#E5E5E5">summarize by saying the</font><font color="#CCCCCC"> following so</font>

492
00:18:28,080 --> 00:18:32,320
right so you know by by<font color="#E5E5E5"> these amazing</font>

493
00:18:30,580 --> 00:18:33,820
<font color="#CCCCCC">results from</font><font color="#E5E5E5"> last year</font><font color="#CCCCCC"> and the past</font><font color="#E5E5E5"> few</font>

494
00:18:32,320 --> 00:18:36,309
<font color="#CCCCCC">years we know that in this</font><font color="#E5E5E5"> quantum</font>

495
00:18:33,820 --> 00:18:38,980
<font color="#E5E5E5">Oracle security model many standard</font>

496
00:18:36,309 --> 00:18:40,720
schemes are broken however<font color="#E5E5E5"> there seems</font>

497
00:18:38,980 --> 00:18:42,429
<font color="#CCCCCC">to</font><font color="#E5E5E5"> be a pretty easy kind of generic</font>

498
00:18:40,720 --> 00:18:44,890
patch which is<font color="#CCCCCC"> to replace</font><font color="#E5E5E5"> the bitwise</font>

499
00:18:42,429 --> 00:18:48,130
<font color="#E5E5E5">XOR operation with let's say modular</font>

500
00:18:44,890 --> 00:18:50,230
addition so<font color="#E5E5E5"> that at least gets you to to</font>

501
00:18:48,130 --> 00:18:52,779
where the best-known quantum<font color="#CCCCCC"> attacks or</font>

502
00:18:50,230 --> 00:18:54,250
<font color="#CCCCCC">sub exponential time</font><font color="#E5E5E5"> or you could pick</font>

503
00:18:52,779 --> 00:18:56,350
<font color="#CCCCCC">your favorite group operation and in</font>

504
00:18:54,250 --> 00:18:59,440
general<font color="#E5E5E5"> then we really don't know what</font>

505
00:18:56,350 --> 00:19:01,000
to<font color="#E5E5E5"> do quantum Li and we observed that</font>

506
00:18:59,440 --> 00:19:03,130
<font color="#E5E5E5">the quantum resistance of these sort of</font>

507
00:19:01,000 --> 00:19:05,320
of these<font color="#E5E5E5"> adaptive schemes is now</font>

508
00:19:03,130 --> 00:19:06,580
connected<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the hidden shift and hidden</font>

509
00:19:05,320 --> 00:19:08,710
subgroup problems which is kind of a

510
00:19:06,580 --> 00:19:10,090
nice new observation that allowed us<font color="#CCCCCC"> to</font>

511
00:19:08,710 --> 00:19:12,370
<font color="#E5E5E5">prove some new things about these</font>

512
00:19:10,090 --> 00:19:14,020
problems<font color="#CCCCCC"> that somehow had not been</font>

513
00:19:12,370 --> 00:19:17,529
noticed<font color="#E5E5E5"> by the quantum algorithms</font>

514
00:19:14,020 --> 00:19:19,000
community in the past<font color="#CCCCCC"> as</font><font color="#E5E5E5"> far as what's</font>

515
00:19:17,529 --> 00:19:20,740
next I mean I think<font color="#CCCCCC"> obviously we should</font>

516
00:19:19,000 --> 00:19:23,289
<font color="#E5E5E5">we should try hard to break more things</font>

517
00:19:20,740 --> 00:19:24,820
<font color="#E5E5E5">and this model</font><font color="#CCCCCC"> I think it would be nice</font>

518
00:19:23,289 --> 00:19:26,740
to<font color="#CCCCCC"> think about whether hidden shift or</font>

519
00:19:24,820 --> 00:19:29,080
hidden subgroup<font color="#E5E5E5"> can serve as a basis</font><font color="#CCCCCC"> for</font>

520
00:19:26,740 --> 00:19:31,840
other quantum secure cryptography maybe

521
00:19:29,080 --> 00:19:33,129
even public key constructions<font color="#CCCCCC"> and</font><font color="#E5E5E5"> in</font>

522
00:19:31,840 --> 00:19:34,840
general I<font color="#CCCCCC"> think there's some</font><font color="#E5E5E5"> nice work</font>

523
00:19:33,130 --> 00:19:37,559
to be done<font color="#E5E5E5"> in understanding</font><font color="#CCCCCC"> exactly what</font>

524
00:19:34,840 --> 00:19:39,730
the right<font color="#E5E5E5"> security notions should be for</font>

525
00:19:37,559 --> 00:19:42,158
encryption<font color="#E5E5E5"> and authentication and</font>

526
00:19:39,730 --> 00:19:43,630
signatures in this in this<font color="#E5E5E5"> quantum</font>

527
00:19:42,159 --> 00:19:44,860
Oracle model<font color="#E5E5E5"> there's been some work on</font>

528
00:19:43,630 --> 00:19:48,970
<font color="#E5E5E5">this already but I think there's still</font>

529
00:19:44,860 --> 00:19:54,719
<font color="#E5E5E5">quite a bit to do ok so thanks</font>

530
00:19:48,970 --> 00:19:58,169
[Applause]

531
00:19:54,720 --> 00:19:58,169
any questions

532
00:20:08,220 --> 00:20:13,830
could you commence a relation between

533
00:20:11,160 --> 00:20:17,530
<font color="#E5E5E5">the security of the</font><font color="#CCCCCC"> lead and shift and</font>

534
00:20:13,830 --> 00:20:21,070
<font color="#CCCCCC">McAleese the security</font><font color="#E5E5E5"> that we achieved</font>

535
00:20:17,530 --> 00:20:25,060
and<font color="#CCCCCC"> McAleese know the fact that if you</font>

536
00:20:21,070 --> 00:20:27,460
can break<font color="#E5E5E5"> Sweden shift for a certain</font>

537
00:20:25,060 --> 00:20:31,510
group then you<font color="#E5E5E5"> break the</font><font color="#CCCCCC"> security of</font>

538
00:20:27,460 --> 00:20:34,600
<font color="#CCCCCC">McGillis in which sense</font><font color="#E5E5E5"> yeah so there's</font>

539
00:20:31,510 --> 00:20:36,250
this<font color="#E5E5E5"> so there's this paper by denmoor</font>

540
00:20:34,600 --> 00:20:39,010
and<font color="#CCCCCC"> Russell from</font><font color="#E5E5E5"> a few years ago where</font>

541
00:20:36,250 --> 00:20:41,200
they<font color="#E5E5E5"> noticed that you can you</font><font color="#CCCCCC"> can think</font>

542
00:20:39,010 --> 00:20:44,200
<font color="#CCCCCC">about Mecca</font><font color="#E5E5E5"> lease in this sort of in the</font>

543
00:20:41,200 --> 00:20:46,090
known code adversary scenario<font color="#E5E5E5"> as sort of</font>

544
00:20:44,200 --> 00:20:49,240
a hidden shift in a certain<font color="#E5E5E5"> group it's</font>

545
00:20:46,090 --> 00:20:50,770
<font color="#E5E5E5">like the symmetric</font><font color="#CCCCCC"> group</font><font color="#E5E5E5"> product with a</font>

546
00:20:49,240 --> 00:20:52,810
certain<font color="#E5E5E5"> general general linear group</font>

547
00:20:50,770 --> 00:20:55,540
<font color="#E5E5E5">where these are like the two matrices on</font>

548
00:20:52,810 --> 00:20:59,590
either side of<font color="#E5E5E5"> your code</font><font color="#CCCCCC"> and then they</font>

549
00:20:55,540 --> 00:21:01,600
can show<font color="#E5E5E5"> that well right I mean then in</font>

550
00:20:59,590 --> 00:21:02,860
<font color="#E5E5E5">that model if you had a solution to the</font>

551
00:21:01,600 --> 00:21:05,980
hidden shift problem over that group

552
00:21:02,860 --> 00:21:07,419
then<font color="#CCCCCC"> you could attack</font><font color="#E5E5E5"> the scheme so they</font>

553
00:21:05,980 --> 00:21:09,160
showed<font color="#CCCCCC"> that in fact you would also need</font>

554
00:21:07,420 --> 00:21:10,780
some more advanced algorithmic

555
00:21:09,160 --> 00:21:12,190
techniques<font color="#E5E5E5"> to do this but you</font><font color="#CCCCCC"> know if</font>

556
00:21:10,780 --> 00:21:14,950
you had an<font color="#CCCCCC"> ARP</font><font color="#E5E5E5"> if you had a</font><font color="#CCCCCC"> general</font>

557
00:21:12,190 --> 00:21:16,660
polynomial time hidden shift algorithm

558
00:21:14,950 --> 00:21:18,640
for that<font color="#E5E5E5"> group family so like I said</font><font color="#CCCCCC"> I</font>

559
00:21:16,660 --> 00:21:21,850
think<font color="#CCCCCC"> it's symmetric group</font><font color="#E5E5E5"> product with</font>

560
00:21:18,640 --> 00:21:25,300
GL n<font color="#CCCCCC"> F Q and then you would be able</font><font color="#E5E5E5"> to</font>

561
00:21:21,850 --> 00:21:27,250
<font color="#E5E5E5">break it break this I don't think</font><font color="#CCCCCC"> I mean</font>

562
00:21:25,300 --> 00:21:29,830
I think this known code model is not

563
00:21:27,250 --> 00:21:31,330
exactly what happens in reality<font color="#CCCCCC"> I'm not</font>

564
00:21:29,830 --> 00:21:33,629
an<font color="#E5E5E5"> expert on Mike Elise but you know</font>

565
00:21:31,330 --> 00:21:33,629
yeah

