1
00:00:00,030 --> 00:00:04,710
all right thank you so again this is our

2
00:00:03,120 --> 00:00:06,899
paper building and efficient lettuce

3
00:00:04,710 --> 00:00:08,639
gadget toolkit sub Gaussian sampling and

4
00:00:06,899 --> 00:00:10,710
more this is doing work joint work for

5
00:00:08,639 --> 00:00:14,518
Daniel a muchacho and your Polyakov and

6
00:00:10,710 --> 00:00:16,109
this was funded by DARPA so a quick

7
00:00:14,519 --> 00:00:18,300
overview of the talk first I'm going to

8
00:00:16,109 --> 00:00:19,980
go over some backgrounds then I'll talk

9
00:00:18,300 --> 00:00:21,990
about our efficient sub Gaussian

10
00:00:19,980 --> 00:00:25,080
sampling algorithms or randomized PD

11
00:00:21,990 --> 00:00:27,990
compositions then I'll talk about our

12
00:00:25,080 --> 00:00:29,939
efficient CRT gadgets and the associated

13
00:00:27,990 --> 00:00:32,488
stamping algorithms that come along with

14
00:00:29,939 --> 00:00:37,860
them and finally I'll talk about our

15
00:00:32,488 --> 00:00:39,989
implementation in palisade so before we

16
00:00:37,860 --> 00:00:41,160
can define a gadget we're gonna we have

17
00:00:39,989 --> 00:00:46,019
to talk about some lattice base

18
00:00:41,160 --> 00:00:47,849
functions and we we designed these

19
00:00:46,020 --> 00:00:50,070
gadgets so these functions are always

20
00:00:47,850 --> 00:00:51,270
easy to invert so these should look

21
00:00:50,070 --> 00:00:53,280
familiar

22
00:00:51,270 --> 00:00:56,969
the first function is the SIS function

23
00:00:53,280 --> 00:00:59,789
it is privatized by matrix a that short

24
00:00:56,969 --> 00:01:02,609
and fat with entries modulo Q and the

25
00:00:59,789 --> 00:01:07,830
domain is the set of short integer

26
00:01:02,609 --> 00:01:09,390
vectors with small entries now it's

27
00:01:07,830 --> 00:01:13,530
important note here that the solutions

28
00:01:09,390 --> 00:01:15,299
to ax equals 0 mod Q for Miletus and we

29
00:01:13,530 --> 00:01:18,210
call these lettuces Kure lettuces

30
00:01:15,299 --> 00:01:22,619
because they contain all multiples of Q

31
00:01:18,210 --> 00:01:25,889
and also to note that the modulus q is

32
00:01:22,619 --> 00:01:31,650
usually much larger than the entries in

33
00:01:25,890 --> 00:01:34,110
X now where as we're treating a as a

34
00:01:31,650 --> 00:01:38,159
parity check matrix and s is the

35
00:01:34,110 --> 00:01:41,009
elderberry function is given a given a

36
00:01:38,159 --> 00:01:43,649
and a noisy codeword you want to return

37
00:01:41,009 --> 00:01:45,990
the codeword here and it's important to

38
00:01:43,649 --> 00:01:48,000
note that the the lattice corresponding

39
00:01:45,990 --> 00:01:54,380
to the L degree function is the scale

40
00:01:48,000 --> 00:01:56,810
dual of the s is lettuce okay so

41
00:01:54,380 --> 00:01:58,850
as I mentioned a gadget is any matrix

42
00:01:56,810 --> 00:02:03,530
such that we can efficiently invert the

43
00:01:58,850 --> 00:02:06,500
sis and lwe functions now will mostly be

44
00:02:03,530 --> 00:02:08,750
focused on the sis function and our

45
00:02:06,500 --> 00:02:10,910
notation here is going to be that X is

46
00:02:08,750 --> 00:02:15,500
going to be sampled from G inverse of U

47
00:02:10,910 --> 00:02:17,989
where u is a cue area vector in zq at

48
00:02:15,500 --> 00:02:20,690
the end now it's important to note here

49
00:02:17,989 --> 00:02:23,180
that G inverse is not a matrix it's a

50
00:02:20,690 --> 00:02:25,609
function and often times it's randomized

51
00:02:23,180 --> 00:02:30,920
so we'll be sampling a distribution over

52
00:02:25,610 --> 00:02:33,290
all over the solution set and we call

53
00:02:30,920 --> 00:02:38,089
the SAS lattice associated to this to

54
00:02:33,290 --> 00:02:39,799
the gadget the G lattice so a quick

55
00:02:38,090 --> 00:02:43,340
example of how these could be useful in

56
00:02:39,800 --> 00:02:44,870
the g SW fhe scheme if say I have two

57
00:02:43,340 --> 00:02:47,269
cipher texts where I don't have the

58
00:02:44,870 --> 00:02:48,709
secret key I can easily come up with the

59
00:02:47,269 --> 00:02:51,140
ciphertext corresponding to the

60
00:02:48,709 --> 00:02:52,519
plaintext multiplication by taking the

61
00:02:51,140 --> 00:02:57,429
inverse of one ciphertext and

62
00:02:52,519 --> 00:03:00,110
multiplying it with the other okay so

63
00:02:57,430 --> 00:03:01,910
gadget matrices originally appeared in

64
00:03:00,110 --> 00:03:04,010
lattice schemes through lattice

65
00:03:01,910 --> 00:03:07,190
trapdoors this is where we want to

66
00:03:04,010 --> 00:03:09,350
generate a random matrix a and keep some

67
00:03:07,190 --> 00:03:12,049
secrets short vectors in the Esaias

68
00:03:09,350 --> 00:03:14,480
lattice these these secret short vectors

69
00:03:12,049 --> 00:03:16,280
help us and allow us to efficiently

70
00:03:14,480 --> 00:03:20,780
invert the SIS and other reef functions

71
00:03:16,280 --> 00:03:23,090
and also in the form of key switching

72
00:03:20,780 --> 00:03:25,690
and fhe this is where a lot of gadgets

73
00:03:23,090 --> 00:03:30,799
also I came about always as a

74
00:03:25,690 --> 00:03:33,590
decomposition now today it seems like

75
00:03:30,799 --> 00:03:35,150
nearly every lattice scheme with

76
00:03:33,590 --> 00:03:37,760
advanced somewhat more fake capabilities

77
00:03:35,150 --> 00:03:42,130
has some underlying gadget operation

78
00:03:37,760 --> 00:03:44,750
included in it so this includes fhe a ve

79
00:03:42,130 --> 00:03:46,850
constraint hiding constraint PRS and

80
00:03:44,750 --> 00:03:52,700
everything else that's built off of the

81
00:03:46,850 --> 00:03:54,470
GG age 15 scheme okay so all of our

82
00:03:52,700 --> 00:03:56,869
gadgets are going to have this the same

83
00:03:54,470 --> 00:03:59,390
structure it's going to be this block

84
00:03:56,870 --> 00:04:03,199
diagonal matrix where the nonzero blocks

85
00:03:59,390 --> 00:04:04,790
are these power of V row vectors and if

86
00:04:03,199 --> 00:04:06,739
there's too many parameters here you can

87
00:04:04,790 --> 00:04:08,388
always think of V as two this

88
00:04:06,739 --> 00:04:11,720
corresponds exactly to a bit

89
00:04:08,389 --> 00:04:14,120
decomposition now what this does is it

90
00:04:11,720 --> 00:04:16,160
reduces inverting on the large matrix g2

91
00:04:14,120 --> 00:04:21,739
and parallel instances of inverting on

92
00:04:16,160 --> 00:04:23,330
the small row vector G so now our

93
00:04:21,738 --> 00:04:26,090
notation is going to be X is going to be

94
00:04:23,330 --> 00:04:30,099
sampled from the small G inverse and now

95
00:04:26,090 --> 00:04:37,280
the input is going to be a a number

96
00:04:30,100 --> 00:04:39,800
modulo Q integer modulo Kia okay so it's

97
00:04:37,280 --> 00:04:42,559
important to keep in mind that whenever

98
00:04:39,800 --> 00:04:47,090
we use gadgets we can design them for

99
00:04:42,560 --> 00:04:48,410
our efficiency needs so lately in CCS 17

100
00:04:47,090 --> 00:04:53,799
and African Crypt 18

101
00:04:48,410 --> 00:04:56,419
we've seen these crt-based gadgets and

102
00:04:53,800 --> 00:04:59,150
what these corresponds to is for a

103
00:04:56,419 --> 00:05:02,330
certain set of of moduli with what's

104
00:04:59,150 --> 00:05:03,859
small from prime factors and here the

105
00:05:02,330 --> 00:05:06,979
small prime factors is important because

106
00:05:03,860 --> 00:05:08,270
the width of a distribution that say if

107
00:05:06,979 --> 00:05:12,758
we were to sample over the distribution

108
00:05:08,270 --> 00:05:15,469
set would depend on the prime factors

109
00:05:12,759 --> 00:05:17,690
and I also want to point out that a

110
00:05:15,470 --> 00:05:24,620
simpler method was used in the lol

111
00:05:17,690 --> 00:05:26,419
library right so before I talk about our

112
00:05:24,620 --> 00:05:31,300
contribution I'm going to go over the

113
00:05:26,419 --> 00:05:31,299
state-of-the-art both before our paper

114
00:05:32,229 --> 00:05:39,469
so the first rigorous study of these G

115
00:05:36,710 --> 00:05:42,500
lattices or gadget lattices was done in

116
00:05:39,470 --> 00:05:44,600
MP 12 and there they give a discrete

117
00:05:42,500 --> 00:05:47,660
Gaussian sampling with linear time in

118
00:05:44,600 --> 00:05:51,110
space only for a modulus which is a

119
00:05:47,660 --> 00:05:53,810
power of B or power of T for simplicity

120
00:05:51,110 --> 00:05:56,030
and then last year we came up with a way

121
00:05:53,810 --> 00:05:57,380
to extend this for arbitrary modulus so

122
00:05:56,030 --> 00:06:01,929
prime modulus

123
00:05:57,380 --> 00:06:01,930
again only for these power of B gadgets

124
00:06:01,970 --> 00:06:07,190
so then a p14 well I haven't defined

125
00:06:04,580 --> 00:06:09,979
what a sub Gaussian inversion is but we

126
00:06:07,190 --> 00:06:13,730
can think of it as a a randomized PT

127
00:06:09,980 --> 00:06:17,090
composition and a P 14 again they use

128
00:06:13,730 --> 00:06:19,640
the algorithms from MP 12 so again they

129
00:06:17,090 --> 00:06:23,659
only have a efficient algorithm when Q

130
00:06:19,640 --> 00:06:25,820
is this power of P and the

131
00:06:23,660 --> 00:06:27,650
aforementioned CRT gadgets which need

132
00:06:25,820 --> 00:06:30,550
the modulus to have small prime factors

133
00:06:27,650 --> 00:06:33,770
and then also in MP twelve there is a

134
00:06:30,550 --> 00:06:36,230
algebra gadget decoding algorithm which

135
00:06:33,770 --> 00:06:39,909
is only linear time in space when the

136
00:06:36,230 --> 00:06:39,910
modulus is again the power of Q of B

137
00:06:40,570 --> 00:06:49,490
okay so as the name of our paper implies

138
00:06:45,920 --> 00:06:53,060
we optimize nearly all these algorithms

139
00:06:49,490 --> 00:06:55,010
so for a sub Gaussian inversion we we

140
00:06:53,060 --> 00:06:58,490
can do this in linear time in space for

141
00:06:55,010 --> 00:07:01,730
any Q there's also a trade-off between

142
00:06:58,490 --> 00:07:02,930
the how much how many random bits we

143
00:07:01,730 --> 00:07:07,310
need and the actual width of the

144
00:07:02,930 --> 00:07:10,850
distribution for for L debris decoding

145
00:07:07,310 --> 00:07:12,800
we have a linear time in space decoding

146
00:07:10,850 --> 00:07:15,800
algorithm on these powerbi gadgets where

147
00:07:12,800 --> 00:07:21,500
the error tolerance is almost optimal so

148
00:07:15,800 --> 00:07:24,110
Q over 2 times B plus 1 and then we

149
00:07:21,500 --> 00:07:27,200
introduced a new class of letteth a new

150
00:07:24,110 --> 00:07:31,700
class of CRT gadgets generalizing the

151
00:07:27,200 --> 00:07:35,419
Africa crypts 18 solution for a modulus

152
00:07:31,700 --> 00:07:39,890
of this you can pick these prime factors

153
00:07:35,419 --> 00:07:43,130
how you want and they sampling G inverse

154
00:07:39,890 --> 00:07:45,020
now reduces to L parallel instances and

155
00:07:43,130 --> 00:07:46,880
it's important here that the the width

156
00:07:45,020 --> 00:07:53,810
of the distribution is going to be

157
00:07:46,880 --> 00:07:56,450
independent of the Q eyes okay so in

158
00:07:53,810 --> 00:07:57,980
order to make these randomized bit

159
00:07:56,450 --> 00:08:01,580
decompositions rigorous we're going to

160
00:07:57,980 --> 00:08:03,800
use sub grassley analysis and as one

161
00:08:01,580 --> 00:08:06,800
would expect a sub Gaussian distribution

162
00:08:03,800 --> 00:08:08,480
in RM is going to be and he's any

163
00:08:06,800 --> 00:08:13,750
distribution whose tails are dominated

164
00:08:08,480 --> 00:08:16,180
by a Gaussian distribution with us so

165
00:08:13,750 --> 00:08:19,120
in mathematics these are often used and

166
00:08:16,180 --> 00:08:22,540
study random matrices so if we were to

167
00:08:19,120 --> 00:08:25,150
sample a random matrix with independent

168
00:08:22,540 --> 00:08:26,890
and dependent some Gaussian rows columns

169
00:08:25,150 --> 00:08:28,479
or entries we can get tight

170
00:08:26,890 --> 00:08:33,640
concentration bounds on the singular

171
00:08:28,480 --> 00:08:36,820
values of this matrix so unsurprisingly

172
00:08:33,640 --> 00:08:38,439
this is how these sub gaussian analysis

173
00:08:36,820 --> 00:08:41,320
first came about in lattice cryptography

174
00:08:38,440 --> 00:08:46,570
in a po9 when they're optimizing the gpv

175
00:08:41,320 --> 00:08:48,670
trapdoors but then shortly thereafter in

176
00:08:46,570 --> 00:08:51,520
AP 14 they realized the potential for a

177
00:08:48,670 --> 00:08:53,079
sub gaussian bit decomposition and while

178
00:08:51,520 --> 00:08:57,610
they were coming up with an optimization

179
00:08:53,080 --> 00:09:03,280
for the g SW fhe scheme and again for

180
00:08:57,610 --> 00:09:05,740
the they only had efficient algorithms

181
00:09:03,280 --> 00:09:08,430
when q was a power of B and for

182
00:09:05,740 --> 00:09:12,430
arbitrary moduli they had to rely on

183
00:09:08,430 --> 00:09:14,770
generic algorithms and this is an ideal

184
00:09:12,430 --> 00:09:16,689
because again we get to design these

185
00:09:14,770 --> 00:09:18,610
gadgets for our efficiency needs so you

186
00:09:16,690 --> 00:09:21,310
think there would be either another

187
00:09:18,610 --> 00:09:29,410
gadget or another possible algorithm to

188
00:09:21,310 --> 00:09:31,750
do this more efficiently and so why

189
00:09:29,410 --> 00:09:35,079
would this be useful in these fhe

190
00:09:31,750 --> 00:09:36,910
schemes if you were to add say L

191
00:09:35,080 --> 00:09:39,880
independently sampled sub Gaussian

192
00:09:36,910 --> 00:09:42,610
distributions the entries does grow with

193
00:09:39,880 --> 00:09:45,070
a square root of L compared to linear

194
00:09:42,610 --> 00:09:47,770
you know and we call this Pythagorean a

195
00:09:45,070 --> 00:09:49,330
nativity this is analogous to if you

196
00:09:47,770 --> 00:09:54,640
were to convolve our Gaussian

197
00:09:49,330 --> 00:09:56,950
distributions and as you would expect a

198
00:09:54,640 --> 00:09:59,980
discrete Gaussian is a sloped Gaussian

199
00:09:56,950 --> 00:10:01,210
distribution but often times and

200
00:09:59,980 --> 00:10:03,970
implementations discrete Gaussian

201
00:10:01,210 --> 00:10:05,170
sampling is a bottleneck so the last

202
00:10:03,970 --> 00:10:07,570
thing I want to do is add more

203
00:10:05,170 --> 00:10:10,209
bottlenecks into our implementations and

204
00:10:07,570 --> 00:10:12,550
also there's a slight increase in the

205
00:10:10,210 --> 00:10:16,240
width due to the smoothing parameter so

206
00:10:12,550 --> 00:10:18,189
we wanted a sample a more efficient more

207
00:10:16,240 --> 00:10:23,890
efficient our sample distribution more

208
00:10:18,190 --> 00:10:24,430
efficiently and without this blow-up so

209
00:10:23,890 --> 00:10:27,130
our

210
00:10:24,430 --> 00:10:28,779
solution is going to be very similar to

211
00:10:27,130 --> 00:10:30,160
the solution we had last year for the

212
00:10:28,779 --> 00:10:33,640
discrete Gaussian sampling on these

213
00:10:30,160 --> 00:10:35,620
power of GE gadgets now here I'm gonna

214
00:10:33,640 --> 00:10:41,620
have a power of V gadgets here I'm gonna

215
00:10:35,620 --> 00:10:43,720
have BB 2 & BQ is gonna is the basis of

216
00:10:41,620 --> 00:10:46,560
the Jie lettuce so what we found last

217
00:10:43,720 --> 00:10:49,690
year is that the basis always has this

218
00:10:46,560 --> 00:10:51,849
sparse triangular factorization these

219
00:10:49,690 --> 00:10:54,970
QIS are just going to correspond to the

220
00:10:51,850 --> 00:10:58,300
binary decomposition of Q and these D

221
00:10:54,970 --> 00:10:59,890
eyes are just going to be rational

222
00:10:58,300 --> 00:11:04,449
numbers between zero one that are

223
00:10:59,890 --> 00:11:06,699
functions of Q so now just like created

224
00:11:04,450 --> 00:11:08,950
with discrete Gaussian sampling to

225
00:11:06,700 --> 00:11:13,630
efficiently sample a distribution over

226
00:11:08,950 --> 00:11:15,310
the G lattice we can sample a randomized

227
00:11:13,630 --> 00:11:17,680
nearest plane on the lattice generated

228
00:11:15,310 --> 00:11:19,719
by D and apply B as a linear

229
00:11:17,680 --> 00:11:23,949
transformation and it's important out

230
00:11:19,720 --> 00:11:27,760
here that B is the G lettuce basis when

231
00:11:23,950 --> 00:11:31,540
Q is a power 2 and this matrix here just

232
00:11:27,760 --> 00:11:33,310
becomes the identity so we can do this

233
00:11:31,540 --> 00:11:35,439
efficiently because the sparsity and the

234
00:11:33,310 --> 00:11:38,439
triangular structure in d and also

235
00:11:35,440 --> 00:11:41,800
because of the small numbers and B and

236
00:11:38,440 --> 00:11:46,260
the as far so didn't be the the width

237
00:11:41,800 --> 00:11:49,120
doesn't Inc doesn't increase too much

238
00:11:46,260 --> 00:11:52,360
so the first algorithms in our toolkit

239
00:11:49,120 --> 00:11:54,400
for these power of B gadgets we have a

240
00:11:52,360 --> 00:11:57,520
efficient linear time and space sub

241
00:11:54,400 --> 00:12:01,390
Gaussian of sampling algorithm or bit

242
00:11:57,520 --> 00:12:03,819
decomposition and the sub Gaussian width

243
00:12:01,390 --> 00:12:06,130
is this beautiful enzyme square root of

244
00:12:03,820 --> 00:12:08,950
2 pi it's important note here that when

245
00:12:06,130 --> 00:12:13,420
Q is a power of B this plus 1 gets

246
00:12:08,950 --> 00:12:16,690
changed to a minus 1 and so what also

247
00:12:13,420 --> 00:12:20,140
when B is a power of B this the

248
00:12:16,690 --> 00:12:21,850
randomness used is just log Q of Q but

249
00:12:20,140 --> 00:12:24,040
arbitrary Q we have a trade-off between

250
00:12:21,850 --> 00:12:26,800
the randomness needed the sample

251
00:12:24,040 --> 00:12:28,779
distribution and how wide the

252
00:12:26,800 --> 00:12:30,370
distribution is so sometimes in

253
00:12:28,779 --> 00:12:33,640
implementations we'll use a large base

254
00:12:30,370 --> 00:12:36,400
like square root of Q then the random

255
00:12:33,640 --> 00:12:37,990
bits needed are just 2 log Q or if you

256
00:12:36,400 --> 00:12:39,970
want a small distribution you can have

257
00:12:37,990 --> 00:12:43,170
small base which is two and then you

258
00:12:39,970 --> 00:12:47,170
have log Q squared bits of randomness

259
00:12:43,170 --> 00:12:49,360
and another important point is that our

260
00:12:47,170 --> 00:12:51,160
dish are algorithms sample this

261
00:12:49,360 --> 00:12:55,500
distribution exactly so there's no use

262
00:12:51,160 --> 00:13:02,430
of floating-point numbers okay

263
00:12:55,500 --> 00:13:05,080
so oftentimes on to the the CRT gadgets

264
00:13:02,430 --> 00:13:06,969
oftentimes in lettuce based cryptography

265
00:13:05,080 --> 00:13:08,860
we're gonna have to use a modulus that's

266
00:13:06,970 --> 00:13:11,560
much larger than the 64 bits that's

267
00:13:08,860 --> 00:13:14,440
native in in modern hardware as

268
00:13:11,560 --> 00:13:17,229
arithmetic and a way to get around that

269
00:13:14,440 --> 00:13:21,010
is to use a modulus of the form Q times

270
00:13:17,230 --> 00:13:25,300
Q L so when we do when we do operations

271
00:13:21,010 --> 00:13:26,680
we can do them in parallel through where

272
00:13:25,300 --> 00:13:28,449
we do scalar operations you can do them

273
00:13:26,680 --> 00:13:32,589
in parallel through the Chinese

274
00:13:28,450 --> 00:13:39,550
remainder theorem isomorphism on Z mod Q

275
00:13:32,589 --> 00:13:42,310
see now this is especially useful in the

276
00:13:39,550 --> 00:13:43,930
ring setting which we're gonna hear a

277
00:13:42,310 --> 00:13:47,829
lot about rings and rings in the next

278
00:13:43,930 --> 00:13:49,779
talk but here we often use we do

279
00:13:47,829 --> 00:13:52,779
something called the double CRT so you

280
00:13:49,779 --> 00:13:55,360
do a CRT over the coefficients and see

281
00:13:52,779 --> 00:13:57,760
mod Q Z and then use each of these Q

282
00:13:55,360 --> 00:14:03,640
eyes you pick them so they factor into

283
00:13:57,760 --> 00:14:05,920
prime ideals okay and often in the

284
00:14:03,640 --> 00:14:08,649
setting we're gonna want these Q eyes to

285
00:14:05,920 --> 00:14:13,719
be also pretty large but less than 64

286
00:14:08,649 --> 00:14:16,329
bits so the exact problem statement that

287
00:14:13,720 --> 00:14:20,529
we're trying to solve is given an input

288
00:14:16,329 --> 00:14:23,589
in this CRT form how can we either with

289
00:14:20,529 --> 00:14:25,510
the existing gadgets or a gadget that we

290
00:14:23,589 --> 00:14:27,850
can come up with sample G inverse

291
00:14:25,510 --> 00:14:31,120
without going back to multi precision

292
00:14:27,850 --> 00:14:33,579
numbers and ideally we want to keep

293
00:14:31,120 --> 00:14:36,220
these distributions like sub Gaussian or

294
00:14:33,579 --> 00:14:36,489
discrete Gaussian we want to keep the

295
00:14:36,220 --> 00:14:38,200
width

296
00:14:36,490 --> 00:14:41,700
independent of the Q eyes because again

297
00:14:38,200 --> 00:14:41,700
we usually like them to be pretty large

298
00:14:43,140 --> 00:14:46,359
so

299
00:14:44,410 --> 00:14:47,949
what we're gonna do and this is also

300
00:14:46,359 --> 00:14:49,419
what was done in the Africa crypt 18

301
00:14:47,949 --> 00:14:51,819
paper is we're going to take the inverse

302
00:14:49,419 --> 00:14:56,889
CRT transformation and make it part of

303
00:14:51,819 --> 00:14:59,108
the gadget so we generalize these

304
00:14:56,889 --> 00:15:00,339
gadgets and so we we actually come up

305
00:14:59,109 --> 00:15:02,289
with them and then we've we realized

306
00:15:00,339 --> 00:15:12,359
that they were were a generalization of

307
00:15:02,289 --> 00:15:14,769
these Africa a Cree 18 gadgets now the

308
00:15:12,359 --> 00:15:19,929
the important where what what allows us

309
00:15:14,769 --> 00:15:23,729
to do L parallel inversions is that the

310
00:15:19,929 --> 00:15:28,959
gadgets we give they have a direct some

311
00:15:23,729 --> 00:15:31,179
structure where each of these GIS are of

312
00:15:28,959 --> 00:15:34,599
just a power of B gadget that we get to

313
00:15:31,179 --> 00:15:36,839
pick so if you can have this be you can

314
00:15:34,600 --> 00:15:38,799
have all these B power of T gadgets or

315
00:15:36,839 --> 00:15:40,479
decompositions and then you can have a

316
00:15:38,799 --> 00:15:50,619
very narrow distribution if you'd like

317
00:15:40,479 --> 00:15:53,649
to okay lastly I'm going to talk about

318
00:15:50,619 --> 00:15:55,839
our implementation and palisade so in

319
00:15:53,649 --> 00:15:58,809
our paper we implemented a key policy a

320
00:15:55,839 --> 00:16:01,059
VE scheme and use our algorithms in this

321
00:15:58,809 --> 00:16:04,449
implementation there are two reasons for

322
00:16:01,059 --> 00:16:07,389
doing kPa V scheme first is that the

323
00:16:04,449 --> 00:16:09,160
this is often used to build on top to

324
00:16:07,389 --> 00:16:13,269
make more advanced lattice based schemes

325
00:16:09,160 --> 00:16:15,429
and also the implementation uses every

326
00:16:13,269 --> 00:16:20,980
algorithm that that we describe in the

327
00:16:15,429 --> 00:16:23,829
paper so when we have our attribute

328
00:16:20,980 --> 00:16:28,019
vectors 16 bits we saw a almost 300

329
00:16:23,829 --> 00:16:32,049
times speed up for ciphertext evaluation

330
00:16:28,019 --> 00:16:33,639
and lastly I'd like to point out that

331
00:16:32,049 --> 00:16:35,769
all of these algorithms are implemented

332
00:16:33,639 --> 00:16:38,230
in palisade so they're available for

333
00:16:35,769 --> 00:16:39,970
public use and we ask that you use them

334
00:16:38,230 --> 00:16:42,960
download them and tell us how they're

335
00:16:39,970 --> 00:16:51,359
working thank you questions

336
00:16:42,960 --> 00:16:51,359
[Applause]

337
00:16:55,120 --> 00:17:01,430
so I was thinking of the gated

338
00:16:57,770 --> 00:17:02,720
decomposition in the binary case boost

339
00:17:01,430 --> 00:17:05,560
for Honda maizing and finding better

340
00:17:02,720 --> 00:17:09,050
solution there is those non-adjacent

341
00:17:05,560 --> 00:17:11,750
forms that have been used anywhere in

342
00:17:09,050 --> 00:17:12,948
crypto is it something compatible with

343
00:17:11,750 --> 00:17:16,160
what you're doing to try to optimize

344
00:17:12,949 --> 00:17:18,579
things in terms of size maybe what was

345
00:17:16,160 --> 00:17:22,520
that word known that just send forms

346
00:17:18,579 --> 00:17:25,849
omerta non-adjacent forms non-adjacent

347
00:17:22,520 --> 00:17:32,889
forms could you could you describe what

348
00:17:25,849 --> 00:17:32,889
these are I haven't seen that okay

349
00:17:33,580 --> 00:17:37,600
any more questions

350
00:17:42,380 --> 00:17:53,300
I don't know so you presented you the

351
00:17:50,720 --> 00:17:54,620
graduates for lattices but you so I'm

352
00:17:53,300 --> 00:17:57,020
not especially as but I see that you

353
00:17:54,620 --> 00:17:58,429
concentrate on this the two particular

354
00:17:57,020 --> 00:18:00,190
gadgets so I was wondering I don't know

355
00:17:58,430 --> 00:18:03,170
you can do many things with lattices why

356
00:18:00,190 --> 00:18:06,290
why just is to gadget so I imagine okay

357
00:18:03,170 --> 00:18:08,540
you have latticed and gadget you just do

358
00:18:06,290 --> 00:18:11,050
right know how to develop applications

359
00:18:08,540 --> 00:18:15,740
and stuff like that type so I don't know

360
00:18:11,050 --> 00:18:18,560
like why concentrate in this yeah I

361
00:18:15,740 --> 00:18:20,030
guess so the the gadgets they they allow

362
00:18:18,560 --> 00:18:21,590
us to balance these homomorphic

363
00:18:20,030 --> 00:18:23,960
properties while keeping number is small

364
00:18:21,590 --> 00:18:25,459
and because we picked this q to be

365
00:18:23,960 --> 00:18:28,070
pretty large it gives us a lot of room

366
00:18:25,460 --> 00:18:33,640
to operate while keeping these things

367
00:18:28,070 --> 00:18:33,639
small and also keep the algebra we want

368
00:18:35,740 --> 00:18:42,950
like well we need we need a microphone

369
00:18:38,600 --> 00:18:44,870
alone so the so did do they allow like

370
00:18:42,950 --> 00:18:46,130
because the ecumene you choose the part

371
00:18:44,870 --> 00:18:48,020
of inter cue and everything so is that

372
00:18:46,130 --> 00:18:49,700
chosen by you in the in the gadget or is

373
00:18:48,020 --> 00:18:52,580
it like something outside like which I

374
00:18:49,700 --> 00:18:55,730
can choose as a as a user yes so for

375
00:18:52,580 --> 00:18:58,040
functionality sometimes we most schemes

376
00:18:55,730 --> 00:19:00,680
you can take the cue sometimes if you

377
00:18:58,040 --> 00:19:01,760
need some you might need some special

378
00:19:00,680 --> 00:19:03,260
forms because you might need some

379
00:19:01,760 --> 00:19:06,650
matrices to be invertible so you might

380
00:19:03,260 --> 00:19:08,540
have you might need q to be a prime so

381
00:19:06,650 --> 00:19:10,970
that's usually fixed so you have some

382
00:19:08,540 --> 00:19:13,310
set of q you can take from and then you

383
00:19:10,970 --> 00:19:16,160
get to design the gadget as whatever you

384
00:19:13,310 --> 00:19:18,169
need so that's why the like the CRT

385
00:19:16,160 --> 00:19:20,420
gadgets that they were specifically for

386
00:19:18,170 --> 00:19:22,730
an obfuscation implementation originally

387
00:19:20,420 --> 00:19:24,350
not the ones we did but the ones I we

388
00:19:22,730 --> 00:19:30,590
talked about in the previous state of

389
00:19:24,350 --> 00:19:35,120
the art and a fhe influent a ssin and

390
00:19:30,590 --> 00:19:36,570
more questions so let's thank our

391
00:19:35,120 --> 00:19:40,379
speaker again

392
00:19:36,570 --> 00:19:40,379
[Applause]

