1
00:00:00,030 --> 00:00:05,069
Hey so today I'm going to talk about SEC

2
00:00:03,300 --> 00:00:06,390
funding secure computation on block

3
00:00:05,069 --> 00:00:09,330
sense and this is joint work with

4
00:00:06,390 --> 00:00:10,739
Whipple and ABI shake so what is the

5
00:00:09,330 --> 00:00:13,139
main motivation for it

6
00:00:10,740 --> 00:00:16,730
blocking the existence of blocks in

7
00:00:13,139 --> 00:00:19,919
weather irrespective of a fury you know

8
00:00:16,730 --> 00:00:24,539
individual views on its existence it

9
00:00:19,920 --> 00:00:26,369
exists and more concretely for us we

10
00:00:24,539 --> 00:00:29,279
want to examine the foundation of secure

11
00:00:26,369 --> 00:00:31,140
computation in the existence in the

12
00:00:29,279 --> 00:00:33,270
context of block chains so what does

13
00:00:31,140 --> 00:00:34,649
that mean now part is no longer just

14
00:00:33,270 --> 00:00:36,750
communicate with each other when they

15
00:00:34,649 --> 00:00:39,690
run a protocol but they're also exchange

16
00:00:36,750 --> 00:00:42,120
messages with the blockchain so what

17
00:00:39,690 --> 00:00:43,949
does this mean so we want to ask the

18
00:00:42,120 --> 00:00:45,780
question which is what change does this

19
00:00:43,950 --> 00:00:49,020
make to the study of protocols in the

20
00:00:45,780 --> 00:00:50,550
setting if any and the first step in

21
00:00:49,020 --> 00:00:53,039
this process is obviously going to be

22
00:00:50,550 --> 00:00:55,050
establishing a model and there's been

23
00:00:53,039 --> 00:00:56,850
this really really nice line of work

24
00:00:55,050 --> 00:00:59,038
recently which capture you know the

25
00:00:56,850 --> 00:01:01,230
essence of block chains and actually

26
00:00:59,039 --> 00:01:03,180
prove that under certain assumptions

27
00:01:01,230 --> 00:01:05,658
these block chains actually satisfy this

28
00:01:03,180 --> 00:01:09,180
property and this is the work you know

29
00:01:05,659 --> 00:01:12,090
starting with this work in 2016 and it's

30
00:01:09,180 --> 00:01:13,770
still sort of ongoing but for this talk

31
00:01:12,090 --> 00:01:17,970
I'm going to consider a very very

32
00:01:13,770 --> 00:01:19,740
simplified model and it it will suffice

33
00:01:17,970 --> 00:01:22,020
you know the main ideas and challenges

34
00:01:19,740 --> 00:01:24,658
in this work can be illustrated in this

35
00:01:22,020 --> 00:01:26,580
early simple model and you'll see that

36
00:01:24,659 --> 00:01:29,970
this model is you know sort of

37
00:01:26,580 --> 00:01:31,710
unrealistic in some sense but I should

38
00:01:29,970 --> 00:01:35,520
point out that in our paper we actually

39
00:01:31,710 --> 00:01:37,829
consider the full realistic model okay

40
00:01:35,520 --> 00:01:40,020
so what is the model so the model

41
00:01:37,829 --> 00:01:42,270
assumes is Oracle which I'll call the

42
00:01:40,020 --> 00:01:44,548
blockchain Oracle and it also has an

43
00:01:42,270 --> 00:01:46,860
additional timer with some parameter

44
00:01:44,549 --> 00:01:48,600
Delta so the Delta here is to sort of

45
00:01:46,860 --> 00:01:51,180
indicate the average time you know

46
00:01:48,600 --> 00:01:54,270
blocks are created in the blockchain so

47
00:01:51,180 --> 00:01:56,790
over time party send messages to the

48
00:01:54,270 --> 00:02:00,270
Oracle and after completion of this

49
00:01:56,790 --> 00:02:02,100
Delta this you know this Oracle collects

50
00:02:00,270 --> 00:02:03,780
all the messages along with some

51
00:02:02,100 --> 00:02:08,788
identifying information sends it back

52
00:02:03,780 --> 00:02:10,619
and now we require some certain

53
00:02:08,788 --> 00:02:12,660
properties from this blockchain so what

54
00:02:10,619 --> 00:02:13,630
are some of these properties one is we

55
00:02:12,660 --> 00:02:15,100
wonder or

56
00:02:13,630 --> 00:02:17,530
the parties to have a consistent view of

57
00:02:15,100 --> 00:02:19,810
the blockchain next we want that if

58
00:02:17,530 --> 00:02:22,720
messages are sent they should appear

59
00:02:19,810 --> 00:02:24,400
immediately on the next block and then

60
00:02:22,720 --> 00:02:26,890
the third property is that only the

61
00:02:24,400 --> 00:02:29,980
Oracles can create blocks again this is

62
00:02:26,890 --> 00:02:31,899
a super idealistic version of the

63
00:02:29,980 --> 00:02:36,220
blockchain in the paper we consider a

64
00:02:31,900 --> 00:02:38,140
more realistic model cool so we're

65
00:02:36,220 --> 00:02:40,090
talking about something what we call a

66
00:02:38,140 --> 00:02:42,790
blockchain hybrid model and what does it

67
00:02:40,090 --> 00:02:44,980
mean I say a party is blockchain active

68
00:02:42,790 --> 00:02:48,940
if it can sort of read and write to the

69
00:02:44,980 --> 00:02:51,040
blockchain sure now when establishing

70
00:02:48,940 --> 00:02:53,740
the model an important thing I rolling I

71
00:02:51,040 --> 00:02:56,170
need to note is that the simulator has

72
00:02:53,740 --> 00:02:58,840
the same access to the blockchain as

73
00:02:56,170 --> 00:03:01,239
every other party this is in contrast to

74
00:02:58,840 --> 00:03:03,130
some other recent work where the

75
00:03:01,240 --> 00:03:04,390
simulator can potentially even rewind

76
00:03:03,130 --> 00:03:06,700
the blockchain and so on

77
00:03:04,390 --> 00:03:08,859
so this gives the blockchain in the case

78
00:03:06,700 --> 00:03:11,109
where the simulator can rewind sort of a

79
00:03:08,860 --> 00:03:13,330
local flavor of the blockchain to the

80
00:03:11,110 --> 00:03:14,920
protocol while offsetting the blockchain

81
00:03:13,330 --> 00:03:17,410
is sort of global where in other

82
00:03:14,920 --> 00:03:21,339
protocols and other things can also use

83
00:03:17,410 --> 00:03:22,270
the blockchain independent of this all

84
00:03:21,340 --> 00:03:24,730
right good

85
00:03:22,270 --> 00:03:27,220
so I'm going to state our results first

86
00:03:24,730 --> 00:03:29,679
in terms of of a zero knowledge and then

87
00:03:27,220 --> 00:03:32,230
more general secure computation so for

88
00:03:29,680 --> 00:03:34,720
zero knowledge we show that if only the

89
00:03:32,230 --> 00:03:37,440
adversary is blocked in active then

90
00:03:34,720 --> 00:03:40,240
black box zero knowledge is impossible

91
00:03:37,440 --> 00:03:43,240
then we show you know in the positive

92
00:03:40,240 --> 00:03:45,040
result that if we mandate all parties to

93
00:03:43,240 --> 00:03:48,070
somehow use the blockchain and we see

94
00:03:45,040 --> 00:03:50,220
how that we can actually have a zero

95
00:03:48,070 --> 00:03:53,680
knowledge protocol in this setting so

96
00:03:50,220 --> 00:03:55,959
this is a super constant round protocol

97
00:03:53,680 --> 00:03:58,300
and in fact this is tight and we show

98
00:03:55,959 --> 00:04:00,970
that a constant round black box zero

99
00:03:58,300 --> 00:04:02,770
knowledge in this model is impossible so

100
00:04:00,970 --> 00:04:05,380
for this talk I'm going to focus only on

101
00:04:02,770 --> 00:04:08,010
the first two and you know you can see

102
00:04:05,380 --> 00:04:10,990
the paper for the impossibility result

103
00:04:08,010 --> 00:04:13,840
so moving on to more secure more general

104
00:04:10,990 --> 00:04:15,910
secure computation we show we sort of

105
00:04:13,840 --> 00:04:18,160
overcome the impossibility and show that

106
00:04:15,910 --> 00:04:22,659
concurrent secure computation is

107
00:04:18,160 --> 00:04:24,970
possible in the setting but you know not

108
00:04:22,660 --> 00:04:27,240
everything is all rosy we also show that

109
00:04:24,970 --> 00:04:31,860
universally composable commitments are

110
00:04:27,240 --> 00:04:33,210
possible in this model sure so again I'm

111
00:04:31,860 --> 00:04:35,699
going to focus only on the positive

112
00:04:33,210 --> 00:04:37,620
result in this setting so the main thing

113
00:04:35,699 --> 00:04:41,220
I want you to take away from this talk

114
00:04:37,620 --> 00:04:43,319
is that in context with you know secure

115
00:04:41,220 --> 00:04:45,060
computation the block chains have both

116
00:04:43,319 --> 00:04:47,970
you know destructive and constructive

117
00:04:45,060 --> 00:04:50,699
use cases okay

118
00:04:47,970 --> 00:04:52,199
so let's jump right in and I'm going to

119
00:04:50,699 --> 00:04:54,150
start with zero knowledge and you know

120
00:04:52,199 --> 00:04:56,039
very very quick overview of the

121
00:04:54,150 --> 00:04:57,960
definition of zero knowledge so here I

122
00:04:56,039 --> 00:04:59,849
have a prove or an a verifier and prove

123
00:04:57,960 --> 00:05:02,789
o wants to prove membership of some

124
00:04:59,849 --> 00:05:04,860
statement X and it does so by exchanging

125
00:05:02,789 --> 00:05:07,050
messages of the verifier and there are

126
00:05:04,860 --> 00:05:09,599
some properties that typical protocols

127
00:05:07,050 --> 00:05:12,539
require one is completeness meaning that

128
00:05:09,599 --> 00:05:15,060
if the statement is actually in this is

129
00:05:12,539 --> 00:05:17,669
a member then the prover can convince

130
00:05:15,060 --> 00:05:20,940
the verifier of this the second is if

131
00:05:17,669 --> 00:05:22,830
the statement is not a member then no

132
00:05:20,940 --> 00:05:24,780
matter how the approver behaves it

133
00:05:22,830 --> 00:05:26,370
shouldn't be able to convince the verify

134
00:05:24,780 --> 00:05:29,400
other than with some really small

135
00:05:26,370 --> 00:05:31,080
probability right and the third is when

136
00:05:29,400 --> 00:05:32,429
the verifier is trying to cheat where

137
00:05:31,080 --> 00:05:34,830
it's trying to sort of glean some

138
00:05:32,430 --> 00:05:36,990
information from the prover that it

139
00:05:34,830 --> 00:05:39,479
doesn't already have and this is defined

140
00:05:36,990 --> 00:05:41,219
with respect to an ideal world where

141
00:05:39,479 --> 00:05:43,889
only the verifier exists but not the

142
00:05:41,219 --> 00:05:47,849
proof oh and this is formalized by

143
00:05:43,889 --> 00:05:49,349
saying you know there exists some entity

144
00:05:47,849 --> 00:05:51,780
called the simulator which has the same

145
00:05:49,349 --> 00:05:53,250
input as the verifier it doesn't get the

146
00:05:51,780 --> 00:05:55,169
additional input that the prover does

147
00:05:53,250 --> 00:05:57,330
and it's able to somehow generate a

148
00:05:55,169 --> 00:05:59,818
transcript that looks the same to the

149
00:05:57,330 --> 00:06:02,068
verify so the verifier is now sort of

150
00:05:59,819 --> 00:06:03,719
able to learn any information by itself

151
00:06:02,069 --> 00:06:05,639
that it could have learned from the

152
00:06:03,719 --> 00:06:08,310
prover that's establishing this property

153
00:06:05,639 --> 00:06:10,229
of zero knowledge but now in our setting

154
00:06:08,310 --> 00:06:12,960
we sort of have this blockchain looming

155
00:06:10,229 --> 00:06:15,750
over us and the protocol this definition

156
00:06:12,960 --> 00:06:18,979
just to indicate that so what about the

157
00:06:15,750 --> 00:06:22,530
impossibility so in terms of blackbox

158
00:06:18,979 --> 00:06:24,419
protocols the advantage a simulator in

159
00:06:22,530 --> 00:06:26,549
the blackbox setting has over a regular

160
00:06:24,419 --> 00:06:29,250
prover is that the simulator is able to

161
00:06:26,550 --> 00:06:31,500
rewind the very file of an adversary

162
00:06:29,250 --> 00:06:34,949
it's able to make the adversity go back

163
00:06:31,500 --> 00:06:37,199
in time and so the main idea here is to

164
00:06:34,949 --> 00:06:40,349
construct a verify that prevents a

165
00:06:37,199 --> 00:06:41,110
simulator from rewinding so the idea is

166
00:06:40,349 --> 00:06:44,710
really simple

167
00:06:41,110 --> 00:06:45,220
so every time the verifier has to send a

168
00:06:44,710 --> 00:06:48,310
message

169
00:06:45,220 --> 00:06:50,080
it takes the transcript so far puts it

170
00:06:48,310 --> 00:06:50,800
on to the blockchain and then waits for

171
00:06:50,080 --> 00:06:52,539
a response

172
00:06:50,800 --> 00:06:54,790
once the response arrives with the

173
00:06:52,540 --> 00:06:57,310
message it checks if there's a different

174
00:06:54,790 --> 00:06:58,330
transcript for the same session already

175
00:06:57,310 --> 00:07:02,020
on the blockchain

176
00:06:58,330 --> 00:07:03,400
so for assimilated for assimilated to be

177
00:07:02,020 --> 00:07:06,219
able to revine there must be at least

178
00:07:03,400 --> 00:07:09,039
two partial transcripts of the same

179
00:07:06,220 --> 00:07:12,100
session on the blockchain right so the

180
00:07:09,040 --> 00:07:15,250
verifier will never respond to the

181
00:07:12,100 --> 00:07:17,710
prover if it finds another session so

182
00:07:15,250 --> 00:07:19,450
this prevents the simulator from ever

183
00:07:17,710 --> 00:07:21,969
being able to rewind the blockchain in

184
00:07:19,450 --> 00:07:23,320
the setting know that you're only the

185
00:07:21,970 --> 00:07:25,110
verifier is using the blockchain and

186
00:07:23,320 --> 00:07:28,390
approval is sort of oblivious to the

187
00:07:25,110 --> 00:07:30,190
existence of the blockchain so this is

188
00:07:28,390 --> 00:07:32,289
going to be an important point where we

189
00:07:30,190 --> 00:07:35,469
show that it's impossible if only the

190
00:07:32,290 --> 00:07:37,870
adversity is blockchain active sorry and

191
00:07:35,470 --> 00:07:39,280
but if all the parties are blockchain

192
00:07:37,870 --> 00:07:43,330
active then we actually show some

193
00:07:39,280 --> 00:07:45,729
positive results so the structure of the

194
00:07:43,330 --> 00:07:48,520
zero-knowledge protocol follows this you

195
00:07:45,730 --> 00:07:50,890
know preamble approach up from Prabhakar

196
00:07:48,520 --> 00:07:53,950
and Rosen Sahai and specifically it has

197
00:07:50,890 --> 00:07:55,719
these sort of three stages the first is

198
00:07:53,950 --> 00:07:58,360
the verifier committing towards a

199
00:07:55,720 --> 00:08:00,220
challenge and the second is what we are

200
00:07:58,360 --> 00:08:03,850
going to call extraction opportunities

201
00:08:00,220 --> 00:08:06,970
or slots this is to sort of enable a

202
00:08:03,850 --> 00:08:09,610
simulator to be to extract the challenge

203
00:08:06,970 --> 00:08:11,080
that the verifier commits to and the

204
00:08:09,610 --> 00:08:13,780
last phase is going to be the proof

205
00:08:11,080 --> 00:08:15,700
system you know concretely you can think

206
00:08:13,780 --> 00:08:17,830
of it is like the Hamiltonian proof

207
00:08:15,700 --> 00:08:20,530
system or something like that so why do

208
00:08:17,830 --> 00:08:22,599
we enforce this structure this structure

209
00:08:20,530 --> 00:08:25,510
is useful because it gives you the

210
00:08:22,600 --> 00:08:28,900
simulation guarantee that if you're able

211
00:08:25,510 --> 00:08:31,060
to extract the challenge in even one of

212
00:08:28,900 --> 00:08:32,709
these slots then the rest of the

213
00:08:31,060 --> 00:08:33,520
protocol can be simulated in a

214
00:08:32,710 --> 00:08:35,920
straight-line manner

215
00:08:33,520 --> 00:08:38,770
no more rewinding right so if I'm able

216
00:08:35,919 --> 00:08:40,750
to rewind once during this during these

217
00:08:38,770 --> 00:08:44,980
slots then I don't have to bother with

218
00:08:40,750 --> 00:08:47,410
rewinding any time in the future okay so

219
00:08:44,980 --> 00:08:51,160
let's look at how this protocol could

220
00:08:47,410 --> 00:08:53,110
potentially work so now we have the

221
00:08:51,160 --> 00:08:54,670
blockchain and the main idea is to use

222
00:08:53,110 --> 00:08:57,580
the blockchain as a

223
00:08:54,670 --> 00:09:00,459
course timer so what does that mean that

224
00:08:57,580 --> 00:09:02,560
means every party is going to have you

225
00:09:00,460 --> 00:09:04,870
know a timer with some parameter timeout

226
00:09:02,560 --> 00:09:06,609
parameter k and every time sort of a

227
00:09:04,870 --> 00:09:08,950
block comes is going to count down on

228
00:09:06,610 --> 00:09:11,920
the timer and then it's going to run the

229
00:09:08,950 --> 00:09:14,740
protocol so for instance okay I should

230
00:09:11,920 --> 00:09:16,360
note importantly that parties are not

231
00:09:14,740 --> 00:09:18,640
required to post anything on the ledger

232
00:09:16,360 --> 00:09:22,360
right so the use of the ledger in this

233
00:09:18,640 --> 00:09:25,270
protocol is only going to be read so for

234
00:09:22,360 --> 00:09:27,310
instance say this they run this first

235
00:09:25,270 --> 00:09:30,699
slot and now block appears both of them

236
00:09:27,310 --> 00:09:33,310
added and the second block appears so on

237
00:09:30,700 --> 00:09:35,110
and say now the third block appears here

238
00:09:33,310 --> 00:09:37,239
I'm assuming the verifier is cheating so

239
00:09:35,110 --> 00:09:40,360
it hasn't updated its local state with

240
00:09:37,240 --> 00:09:42,040
the prover sees okay Michael timeout was

241
00:09:40,360 --> 00:09:44,230
three and there are three blocks here

242
00:09:42,040 --> 00:09:47,680
I'm done and the verifier hasn't

243
00:09:44,230 --> 00:09:51,460
completed so I'm going to abort so the

244
00:09:47,680 --> 00:09:53,560
question is why is this useful how does

245
00:09:51,460 --> 00:09:55,630
this help us so we want to sort of

246
00:09:53,560 --> 00:09:59,020
recall the impossibility we want to stop

247
00:09:55,630 --> 00:10:02,320
the adversary from preventing rewinding

248
00:09:59,020 --> 00:10:04,360
right so concretely let's think of the

249
00:10:02,320 --> 00:10:07,150
case where you have four slots in or

250
00:10:04,360 --> 00:10:10,000
timer time out of three and then if the

251
00:10:07,150 --> 00:10:12,280
protocol actually computes you're going

252
00:10:10,000 --> 00:10:15,400
to have potentially less than three

253
00:10:12,280 --> 00:10:16,930
blocks so the yellow arrows indicate you

254
00:10:15,400 --> 00:10:19,000
know block appearing during the

255
00:10:16,930 --> 00:10:21,040
execution of the protocol and now I'm

256
00:10:19,000 --> 00:10:23,410
going to call the blocks where the slots

257
00:10:21,040 --> 00:10:24,790
where a block appeared is bad and the

258
00:10:23,410 --> 00:10:28,689
slots where the block didn't taste good

259
00:10:24,790 --> 00:10:31,150
right now I have two good slots where

260
00:10:28,690 --> 00:10:34,090
the adversary is not waiting on a block

261
00:10:31,150 --> 00:10:35,470
right now I can potentially rewind the

262
00:10:34,090 --> 00:10:39,790
adversary to my heart's content

263
00:10:35,470 --> 00:10:43,090
extraction done so are we done though

264
00:10:39,790 --> 00:10:45,339
and it turns out there is a really small

265
00:10:43,090 --> 00:10:47,440
subtle issue which shows up you know in

266
00:10:45,340 --> 00:10:50,170
the context of this setting is that of

267
00:10:47,440 --> 00:10:51,940
timing leakage what does that mean so it

268
00:10:50,170 --> 00:10:54,099
means that you know simulation typically

269
00:10:51,940 --> 00:10:56,410
takes time larger than the running time

270
00:10:54,100 --> 00:10:58,840
of the adversary of the honest execution

271
00:10:56,410 --> 00:11:01,060
of the protocol so in for instance

272
00:10:58,840 --> 00:11:04,060
completely think of this really bad case

273
00:11:01,060 --> 00:11:06,890
where the actual execution runs maybe

274
00:11:04,060 --> 00:11:08,839
takes you know one block duration

275
00:11:06,890 --> 00:11:10,850
in the blockchain world but while

276
00:11:08,840 --> 00:11:12,950
simulating it it takes three blocks

277
00:11:10,850 --> 00:11:14,600
duration and like this is now trivially

278
00:11:12,950 --> 00:11:17,980
distinguishable by a distinguisher who

279
00:11:14,600 --> 00:11:21,890
has access to the blockchain right so

280
00:11:17,980 --> 00:11:23,600
the important point to note is that the

281
00:11:21,890 --> 00:11:26,449
time the simulator takes to complete

282
00:11:23,600 --> 00:11:27,920
simulation and the number of computation

283
00:11:26,450 --> 00:11:30,320
steps that the simulator takes are

284
00:11:27,920 --> 00:11:32,800
slightly different right so now what we

285
00:11:30,320 --> 00:11:36,710
can hope to do is if it's parallelizable

286
00:11:32,800 --> 00:11:38,449
do some of these you know computation

287
00:11:36,710 --> 00:11:40,880
steps in parallel and then hopefully

288
00:11:38,450 --> 00:11:43,460
there is no timing leakage and this is

289
00:11:40,880 --> 00:11:46,160
exactly what we do so we have this

290
00:11:43,460 --> 00:11:48,380
notion of a main execution and we have

291
00:11:46,160 --> 00:11:50,569
the notion of an a rebound execution and

292
00:11:48,380 --> 00:11:53,870
note that these are run in parallel and

293
00:11:50,570 --> 00:11:56,420
I've indicated by the height to be the

294
00:11:53,870 --> 00:11:58,930
duration that the verifier takes to

295
00:11:56,420 --> 00:12:02,270
respond to the challenges or the

296
00:11:58,930 --> 00:12:04,370
execution of the slot and note that even

297
00:12:02,270 --> 00:12:06,050
for the same slot and the rebound

298
00:12:04,370 --> 00:12:08,300
execution the verifier can potentially

299
00:12:06,050 --> 00:12:10,370
take longer and what's the main

300
00:12:08,300 --> 00:12:12,229
difference between the main execution in

301
00:12:10,370 --> 00:12:14,990
the rebound execution is that the main

302
00:12:12,230 --> 00:12:17,780
execution you isolate the adversary from

303
00:12:14,990 --> 00:12:19,580
the blockchain meaning any query that it

304
00:12:17,780 --> 00:12:21,230
sends to the blockchain you don't send

305
00:12:19,580 --> 00:12:23,570
it anything that the blockchain sends

306
00:12:21,230 --> 00:12:25,580
you don't send to the adversary so what

307
00:12:23,570 --> 00:12:27,830
does this mean so if I have potentially

308
00:12:25,580 --> 00:12:30,350
blocks coming from the blockchain I know

309
00:12:27,830 --> 00:12:32,690
that in these blocks on the rebound

310
00:12:30,350 --> 00:12:36,050
execution the adversity is expecting a

311
00:12:32,690 --> 00:12:38,480
blockchain or block rather so these are

312
00:12:36,050 --> 00:12:40,939
all bad slots now I'm guaranteed there's

313
00:12:38,480 --> 00:12:44,090
at least one good slot and I can rewind

314
00:12:40,940 --> 00:12:46,850
right and this is pretty much all we

315
00:12:44,090 --> 00:12:49,430
needed right once we get one slot where

316
00:12:46,850 --> 00:12:52,850
we can rewind we're done so it turns out

317
00:12:49,430 --> 00:12:55,099
that for simulation 2 for extraction to

318
00:12:52,850 --> 00:12:56,810
succeed we need at least super constant

319
00:12:55,100 --> 00:12:58,450
many slots which in turn means we need

320
00:12:56,810 --> 00:13:00,709
super constant mini rounds and

321
00:12:58,450 --> 00:13:02,840
unfortunately this turns out to be tight

322
00:13:00,710 --> 00:13:04,790
and we show in the paper that does not

323
00:13:02,840 --> 00:13:07,120
exist a constant on protocol in this

324
00:13:04,790 --> 00:13:09,290
setting with black box simulation I

325
00:13:07,120 --> 00:13:12,500
should note that there are some

326
00:13:09,290 --> 00:13:14,930
similarities superficial similarities to

327
00:13:12,500 --> 00:13:17,660
the timing model where parties have

328
00:13:14,930 --> 00:13:20,120
synchronized clock anyway and like have

329
00:13:17,660 --> 00:13:22,490
delays to make protocols work

330
00:13:20,120 --> 00:13:24,259
the slight differences in the setting in

331
00:13:22,490 --> 00:13:26,569
the timing model the simulator can

332
00:13:24,259 --> 00:13:28,879
control the clock here sort of there's

333
00:13:26,569 --> 00:13:32,389
an unfortunate lack from the blockchain

334
00:13:28,879 --> 00:13:34,129
and in their timing model setting the

335
00:13:32,389 --> 00:13:36,319
adversity can be rebound at any point

336
00:13:34,129 --> 00:13:38,360
and but here we have this notion of safe

337
00:13:36,319 --> 00:13:41,479
and unsafe and this requires actually

338
00:13:38,360 --> 00:13:44,509
new rewinding techniques okay moving on

339
00:13:41,480 --> 00:13:46,430
to concurrent self composition so what

340
00:13:44,509 --> 00:13:48,920
is secure computation a really really

341
00:13:46,430 --> 00:13:51,439
quick overview parties jointly want to

342
00:13:48,920 --> 00:13:53,149
compute a function of the private inputs

343
00:13:51,439 --> 00:13:55,430
they communicate and at the end

344
00:13:53,149 --> 00:13:57,379
everybody gets their output so how do

345
00:13:55,430 --> 00:14:00,410
you define security security is defined

346
00:13:57,379 --> 00:14:02,360
with respect to an ideal world where

347
00:14:00,410 --> 00:14:05,120
everybody sends their inputs to an ideal

348
00:14:02,360 --> 00:14:08,300
party and the ideal party computes the

349
00:14:05,120 --> 00:14:11,209
output and sends it to them so you say

350
00:14:08,300 --> 00:14:13,670
that for every cup every set of corrupt

351
00:14:11,209 --> 00:14:15,410
parties executing the protocol there

352
00:14:13,670 --> 00:14:17,930
exists a simulator that corrupts the

353
00:14:15,410 --> 00:14:20,059
same set of parties and the views are

354
00:14:17,930 --> 00:14:21,769
sort of indistinguishable you don't need

355
00:14:20,059 --> 00:14:24,529
to really know what the exact definition

356
00:14:21,769 --> 00:14:27,160
is to proceed but again to note we have

357
00:14:24,529 --> 00:14:29,749
a looming blockchain so let's consider

358
00:14:27,160 --> 00:14:32,480
three protocol executions these are the

359
00:14:29,749 --> 00:14:34,160
transcripts of the execution of the same

360
00:14:32,480 --> 00:14:38,149
protocol with potentially different

361
00:14:34,160 --> 00:14:40,009
inputs so I consider this notion of only

362
00:14:38,149 --> 00:14:41,689
self composition where it's only the

363
00:14:40,009 --> 00:14:43,309
same protocol that's being run as

364
00:14:41,689 --> 00:14:45,319
opposed to you know general composition

365
00:14:43,309 --> 00:14:49,579
where I might have protocol a and

366
00:14:45,319 --> 00:14:51,800
protocol B messages and the self

367
00:14:49,579 --> 00:14:53,479
composition allows for arbitrary

368
00:14:51,800 --> 00:14:55,459
interleaving so I can concurrently

369
00:14:53,480 --> 00:14:58,040
arbitrary in to leave the messages and

370
00:14:55,459 --> 00:14:59,748
why is this model interesting it turns

371
00:14:58,040 --> 00:15:03,290
out that it's impossible in the plane

372
00:14:59,749 --> 00:15:05,120
model so what do we do the prior work

373
00:15:03,290 --> 00:15:07,069
typically takes the you know there are

374
00:15:05,120 --> 00:15:09,889
some weaker security notions or

375
00:15:07,069 --> 00:15:13,910
alternatively you establish some trust

376
00:15:09,889 --> 00:15:15,949
assumptions in our setting we construct

377
00:15:13,910 --> 00:15:18,350
a protocol in the blockchain model so

378
00:15:15,949 --> 00:15:19,699
what does that mean it means that our

379
00:15:18,350 --> 00:15:22,490
protocol works in a sort of

380
00:15:19,699 --> 00:15:24,829
decentralized trust assumption right so

381
00:15:22,490 --> 00:15:26,540
it's not like we're somehow overcoming

382
00:15:24,829 --> 00:15:29,299
the impossibility we are showing that it

383
00:15:26,540 --> 00:15:30,829
is possible to construct a protocol and

384
00:15:29,299 --> 00:15:33,130
this implies that you know it sort of in

385
00:15:30,829 --> 00:15:37,709
the decentralized trust assumption

386
00:15:33,130 --> 00:15:40,570
okay so just quickly to summarize why

387
00:15:37,710 --> 00:15:42,790
the impossibility holds it was initially

388
00:15:40,570 --> 00:15:44,500
showed by Linda in 2004 that it's

389
00:15:42,790 --> 00:15:46,630
impossible in the black box setting and

390
00:15:44,500 --> 00:15:48,040
this impossibility was extended to the

391
00:15:46,630 --> 00:15:51,820
non black box setting and you know

392
00:15:48,040 --> 00:15:54,250
various other models so the basic idea

393
00:15:51,820 --> 00:15:55,990
is this if I think of blue as one

394
00:15:54,250 --> 00:15:59,860
protocol execution and green as the

395
00:15:55,990 --> 00:16:02,740
other say I need to rewind at this point

396
00:15:59,860 --> 00:16:04,780
and the adversity at Green has committed

397
00:16:02,740 --> 00:16:07,090
to its input but the problem is now when

398
00:16:04,780 --> 00:16:08,890
I rewind beyond the input commitment

399
00:16:07,090 --> 00:16:11,290
face the adversity can potentially

400
00:16:08,890 --> 00:16:13,090
change the message or change its input

401
00:16:11,290 --> 00:16:14,980
and this leads to a whole lot of

402
00:16:13,090 --> 00:16:17,230
problems during simulation and it's

403
00:16:14,980 --> 00:16:21,040
something that we want to avoid and I'll

404
00:16:17,230 --> 00:16:22,990
come back to this point in a bit okay so

405
00:16:21,040 --> 00:16:25,420
the structure for our concurrently

406
00:16:22,990 --> 00:16:28,150
secure computation to identify what we

407
00:16:25,420 --> 00:16:31,060
mean is based off these you know works

408
00:16:28,150 --> 00:16:33,520
in weaker models and the protocol works

409
00:16:31,060 --> 00:16:35,140
like this most of this is sort of

410
00:16:33,520 --> 00:16:37,240
immaterial but I'll focus on the

411
00:16:35,140 --> 00:16:38,890
important part so I have some notion of

412
00:16:37,240 --> 00:16:41,710
a trapdoor generation I have a

413
00:16:38,890 --> 00:16:44,319
commitment phase I have coin tossing and

414
00:16:41,710 --> 00:16:48,310
then the actual protocol and it turns

415
00:16:44,320 --> 00:16:50,050
out that it's sufficient to build an a

416
00:16:48,310 --> 00:16:52,510
commitment scheme that's concurrently

417
00:16:50,050 --> 00:16:54,790
extractable and once I do that the rest

418
00:16:52,510 --> 00:16:56,710
of the protocol as before can be sort of

419
00:16:54,790 --> 00:16:59,640
simulated in a straight-line manner and

420
00:16:56,710 --> 00:17:02,200
I don't need to refine anywhere else so

421
00:16:59,640 --> 00:17:04,629
the point is that I now need to build

422
00:17:02,200 --> 00:17:07,360
this concurrently extractable commitment

423
00:17:04,630 --> 00:17:08,830
scheme and the structure is the same as

424
00:17:07,359 --> 00:17:10,479
something that you've seen before when I

425
00:17:08,829 --> 00:17:13,389
talked about the zero-knowledge protocol

426
00:17:10,480 --> 00:17:15,910
I have a commitment initial commitment

427
00:17:13,390 --> 00:17:17,980
phase where the committer commits to a

428
00:17:15,910 --> 00:17:22,650
message and as before I have these

429
00:17:17,980 --> 00:17:25,870
extraction opportunities or slots so

430
00:17:22,650 --> 00:17:28,060
remember the the impossibility stems

431
00:17:25,869 --> 00:17:32,320
from the fact that you were rewinding

432
00:17:28,060 --> 00:17:36,000
beyond the sort of the input commitment

433
00:17:32,320 --> 00:17:38,919
of a party now intuitively I'm going to

434
00:17:36,000 --> 00:17:41,620
sort of commit to the blockchain right

435
00:17:38,920 --> 00:17:44,500
so if I commit to the blockchain there's

436
00:17:41,620 --> 00:17:46,929
in one one would hope that there's no

437
00:17:44,500 --> 00:17:48,520
way of going beyond it because now

438
00:17:46,930 --> 00:17:50,200
committed something to a blockchain I

439
00:17:48,520 --> 00:17:52,450
can't change the value that I committed

440
00:17:50,200 --> 00:17:54,490
to the blockchain so the idea is this

441
00:17:52,450 --> 00:17:56,020
now the committee the first message

442
00:17:54,490 --> 00:17:57,940
which is the commitment sends it to the

443
00:17:56,020 --> 00:18:00,280
blockchain waits for a block to be

444
00:17:57,940 --> 00:18:02,650
created now both the committee and the

445
00:18:00,280 --> 00:18:06,399
receiver have this commitment right now

446
00:18:02,650 --> 00:18:08,380
as before they have this timer and they

447
00:18:06,400 --> 00:18:10,150
start the execution of the protocol the

448
00:18:08,380 --> 00:18:12,430
rest of it is identical as in the

449
00:18:10,150 --> 00:18:15,220
zero-knowledge case but how do we

450
00:18:12,430 --> 00:18:17,430
extract remember now because it's we are

451
00:18:15,220 --> 00:18:20,890
in the setting of concurrent execution

452
00:18:17,430 --> 00:18:23,170
the slots itself might be split over

453
00:18:20,890 --> 00:18:24,700
multiple rounds right and now they might

454
00:18:23,170 --> 00:18:27,100
be interleaved with other slots and

455
00:18:24,700 --> 00:18:29,200
rewinding one slot could potentially

456
00:18:27,100 --> 00:18:33,580
lead to rewinding other slots and so on

457
00:18:29,200 --> 00:18:36,310
and this leads to an issue and to solve

458
00:18:33,580 --> 00:18:37,960
this we look to this you know really

459
00:18:36,310 --> 00:18:40,450
really nice work in this sort of

460
00:18:37,960 --> 00:18:43,090
independent setting or a different

461
00:18:40,450 --> 00:18:45,790
setting by gaol in Pondy pass and so

462
00:18:43,090 --> 00:18:47,560
high and they talk about extraction in

463
00:18:45,790 --> 00:18:49,870
the presence of a constant number of

464
00:18:47,560 --> 00:18:51,310
external messages they show that if you

465
00:18:49,870 --> 00:18:53,860
have a constant number of external

466
00:18:51,310 --> 00:18:56,200
messages then you can construct a

467
00:18:53,860 --> 00:18:58,629
concurrent secure concurrently

468
00:18:56,200 --> 00:19:00,970
extractable commitment scheme right

469
00:18:58,630 --> 00:19:03,400
that's great like can we now apply this

470
00:19:00,970 --> 00:19:05,500
to our setting we have you know the

471
00:19:03,400 --> 00:19:08,860
external messages are now messages from

472
00:19:05,500 --> 00:19:10,870
the blockchain and now we're trying to

473
00:19:08,860 --> 00:19:13,270
extract while we have the blockchain and

474
00:19:10,870 --> 00:19:15,250
remember we can't go beyond we can't

475
00:19:13,270 --> 00:19:17,350
revine beyond any of the blockchain

476
00:19:15,250 --> 00:19:20,260
messages because you know the blockchain

477
00:19:17,350 --> 00:19:23,649
is fixed but it unfortunately it turns

478
00:19:20,260 --> 00:19:25,750
out that the number of messages that the

479
00:19:23,650 --> 00:19:28,030
protocol execution gets from the

480
00:19:25,750 --> 00:19:29,920
blockchain are not constant in fact you

481
00:19:28,030 --> 00:19:33,160
know we can only weakly bound it by the

482
00:19:29,920 --> 00:19:36,760
number of protocol executions that are

483
00:19:33,160 --> 00:19:38,530
running in the concurrent setting so our

484
00:19:36,760 --> 00:19:40,660
main challenge which unfortunately I

485
00:19:38,530 --> 00:19:43,000
won't have time to go over is to show

486
00:19:40,660 --> 00:19:45,970
how this sort of robust extraction lemma

487
00:19:43,000 --> 00:19:47,230
extends to the setting where we have

488
00:19:45,970 --> 00:19:49,630
this blockchain where there are

489
00:19:47,230 --> 00:19:54,580
potentially non-constant many number of

490
00:19:49,630 --> 00:19:57,370
messages and you sort of conclude I've

491
00:19:54,580 --> 00:20:00,280
shown you sort of protocols that the

492
00:19:57,370 --> 00:20:00,580
destructive nature in the sense that you

493
00:20:00,280 --> 00:20:02,678
know

494
00:20:00,580 --> 00:20:04,779
protocols that we know don't extend to

495
00:20:02,679 --> 00:20:06,610
the blockchain setting and then we have

496
00:20:04,779 --> 00:20:09,490
this constructive protocols where I've

497
00:20:06,610 --> 00:20:11,830
shown you okay 0s protocol that actually

498
00:20:09,490 --> 00:20:13,960
works and in fact we're able to sort of

499
00:20:11,830 --> 00:20:15,879
overcome some impossibility result in

500
00:20:13,960 --> 00:20:19,000
the concurrent composition setting and

501
00:20:15,880 --> 00:20:22,659
we actually can give a protocol in the

502
00:20:19,000 --> 00:20:23,950
blockchain model and that's it and if

503
00:20:22,659 --> 00:20:39,250
you have any questions I'd be happy to

504
00:20:23,950 --> 00:20:41,049
take them so these external messages

505
00:20:39,250 --> 00:20:43,179
that come from the blockchain in your

506
00:20:41,049 --> 00:20:45,039
construction do they have like do you

507
00:20:43,179 --> 00:20:47,620
need to have some structure like is it

508
00:20:45,039 --> 00:20:49,419
like some actual part of those or is it

509
00:20:47,620 --> 00:20:49,840
just any message any message from the

510
00:20:49,419 --> 00:20:52,690
blockchain

511
00:20:49,840 --> 00:20:54,970
so for us we assume that the blockchain

512
00:20:52,690 --> 00:20:58,059
Oracle sends messages only periodically

513
00:20:54,970 --> 00:20:59,950
and it's identifiable as you know

514
00:20:58,059 --> 00:21:01,570
blockchain messages so I can't force

515
00:20:59,950 --> 00:21:05,980
them in the simplified model at least

516
00:21:01,570 --> 00:21:08,408
yes zero to call you sort of just use

517
00:21:05,980 --> 00:21:09,789
the blockchain as a timer yes but the

518
00:21:08,409 --> 00:21:11,500
zero knowledge protocol we use it only

519
00:21:09,789 --> 00:21:14,100
as a timer but for here you actually

520
00:21:11,500 --> 00:21:17,649
have to post a message to the blockchain

521
00:21:14,100 --> 00:21:19,418
so can you like also make sense to use

522
00:21:17,649 --> 00:21:23,768
the blockchain and so like for some kind

523
00:21:19,419 --> 00:21:26,559
of computation sure I mean so we want to

524
00:21:23,769 --> 00:21:29,200
use it in minimal sense right we're just

525
00:21:26,559 --> 00:21:31,059
saying okay the blockchain exists we are

526
00:21:29,200 --> 00:21:33,370
talking about the most general setting

527
00:21:31,059 --> 00:21:34,960
you know this is in an idealized world

528
00:21:33,370 --> 00:21:37,149
this is what one would hope a blockchain

529
00:21:34,960 --> 00:21:38,769
gives you we don't know about you know

530
00:21:37,149 --> 00:21:42,820
can you do computation on the blockchain

531
00:21:38,769 --> 00:21:44,559
maybe it's so why doesn't why shouldn't

532
00:21:42,820 --> 00:21:48,330
the simulator be allowed to rewind the

533
00:21:44,559 --> 00:21:50,440
blockchain okay so it it's more of a

534
00:21:48,330 --> 00:21:52,750
different philosophy in the sense that

535
00:21:50,440 --> 00:21:54,580
if you can allow the simulator to rewind

536
00:21:52,750 --> 00:21:56,620
the blockchain but then the blockchain

537
00:21:54,580 --> 00:21:58,299
can be only used by the protocol that

538
00:21:56,620 --> 00:22:01,029
the simulator is simulating right

539
00:21:58,299 --> 00:22:02,590
because if you're similar rewinding the

540
00:22:01,029 --> 00:22:04,510
blockchain it can't be used by another

541
00:22:02,590 --> 00:22:05,830
you know something some other party

542
00:22:04,510 --> 00:22:09,549
because now it's seeing the blockchain

543
00:22:05,830 --> 00:22:12,399
roll back so you want the blockchain to

544
00:22:09,549 --> 00:22:14,168
be global in the sense that I'm using

545
00:22:12,399 --> 00:22:15,699
the blockchain to do this but

546
00:22:14,169 --> 00:22:17,230
other parties elsewhere in the world are

547
00:22:15,700 --> 00:22:18,820
also using the blockchain to do

548
00:22:17,230 --> 00:22:22,929
something so I don't want the simulator

549
00:22:18,820 --> 00:22:24,369
to be able to rewind the blockchain do

550
00:22:22,929 --> 00:22:26,679
you have any restriction on the

551
00:22:24,369 --> 00:22:30,939
blockchain oh you can use even a Bitcoin

552
00:22:26,679 --> 00:22:32,619
blockchain to run your protocol so this

553
00:22:30,940 --> 00:22:35,220
follows from these modeling's of the

554
00:22:32,619 --> 00:22:37,449
blockchain that as long as you know the

555
00:22:35,220 --> 00:22:39,999
protocol satisfy these certain

556
00:22:37,450 --> 00:22:42,159
properties that the you know these

557
00:22:39,999 --> 00:22:44,080
recent works show as modeling of the

558
00:22:42,159 --> 00:22:45,789
blockchain it's sufficient for a select

559
00:22:44,080 --> 00:22:47,470
phoresis do you have a space issue

560
00:22:45,789 --> 00:22:50,379
because if many players want to write

561
00:22:47,470 --> 00:22:52,119
and there is a block sites limited so

562
00:22:50,379 --> 00:22:54,580
those are those are potential issues

563
00:22:52,119 --> 00:22:56,259
that we sort of don't ignore and assume

564
00:22:54,580 --> 00:22:59,230
that you know what how many of them I

565
00:22:56,259 --> 00:23:06,670
mean every block is a limited yeah

566
00:22:59,230 --> 00:23:11,059
we assume the second speaker again

567
00:23:06,670 --> 00:23:11,059
[Applause]

