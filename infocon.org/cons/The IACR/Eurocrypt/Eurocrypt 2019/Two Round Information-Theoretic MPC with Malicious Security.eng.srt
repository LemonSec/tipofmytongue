1
00:00:00,000 --> 00:00:04,080
good evening everyone thanks for being

2
00:00:01,560 --> 00:00:05,910
here I'm Arushi and I'm going to talk

3
00:00:04,080 --> 00:00:07,109
about our results on two-round

4
00:00:05,910 --> 00:00:10,230
information-theoretic

5
00:00:07,109 --> 00:00:12,330
MPC with malicious security this is

6
00:00:10,230 --> 00:00:18,000
based on joint work with prop engine

7
00:00:12,330 --> 00:00:20,189
ARCA and Abhishek so we work in the

8
00:00:18,000 --> 00:00:22,320
similar setting as Rotom described but

9
00:00:20,189 --> 00:00:25,320
in case some of you just arrived let me

10
00:00:22,320 --> 00:00:29,910
just briefly give an overview of our

11
00:00:25,320 --> 00:00:32,969
setting so as the title of our paper

12
00:00:29,910 --> 00:00:35,640
suggests we consider security against

13
00:00:32,969 --> 00:00:37,739
malicious adversary's particularly a

14
00:00:35,640 --> 00:00:39,629
malicious adversary who can corrupt less

15
00:00:37,739 --> 00:00:42,328
than half of the parties in the system

16
00:00:39,629 --> 00:00:46,110
this is also known as the honest

17
00:00:42,329 --> 00:00:47,910
majority setting but why do we really

18
00:00:46,110 --> 00:00:50,579
care about the honest majority setting

19
00:00:47,910 --> 00:00:53,218
well there are a couple of reasons to

20
00:00:50,579 --> 00:00:55,590
begin with information theoretic

21
00:00:53,219 --> 00:00:57,480
and security is possible in the honest

22
00:00:55,590 --> 00:01:01,170
majority setting unlike the dishonest

23
00:00:57,480 --> 00:01:03,690
majority setting also simulation proofs

24
00:01:01,170 --> 00:01:05,610
for honest majority protocols are

25
00:01:03,690 --> 00:01:09,119
typically straight line and you see

26
00:01:05,610 --> 00:01:12,000
secure and also interestingly the round

27
00:01:09,119 --> 00:01:15,390
complexity lower bounds of dishonest

28
00:01:12,000 --> 00:01:17,549
majority NPC do not apply here so we can

29
00:01:15,390 --> 00:01:21,150
hope to achieve extremely efficient and

30
00:01:17,549 --> 00:01:24,030
ground optimal protocols also honest

31
00:01:21,150 --> 00:01:26,310
majority NPC finds applications in a lot

32
00:01:24,030 --> 00:01:28,380
of other cryptographic primitives for

33
00:01:26,310 --> 00:01:31,220
example it was used in the construction

34
00:01:28,380 --> 00:01:34,320
of efficient zero-knowledge protocols

35
00:01:31,220 --> 00:01:36,450
also for constructing leakage resilient

36
00:01:34,320 --> 00:01:39,439
circuit compilers and bounded key

37
00:01:36,450 --> 00:01:39,439
functional encryption

38
00:01:40,049 --> 00:01:45,869
thanks to wrote M for talking about the

39
00:01:43,860 --> 00:01:47,159
prior results in this area so I don't

40
00:01:45,869 --> 00:01:50,119
have to spend too much time on this

41
00:01:47,159 --> 00:01:53,040
slide but just to give a brief overview

42
00:01:50,119 --> 00:01:54,840
been or Goldwasser and Victor Singh gave

43
00:01:53,040 --> 00:01:59,520
the first construction of information

44
00:01:54,840 --> 00:02:01,829
theoretic NPC in 88 then in 89 bar-ilan

45
00:01:59,520 --> 00:02:03,360
and Beaver gave the first constant round

46
00:02:01,829 --> 00:02:07,829
construction of information theoretic

47
00:02:03,360 --> 00:02:09,419
NPC in 2010 issue I crucially wits and

48
00:02:07,829 --> 00:02:12,359
Baskin gave the first two on

49
00:02:09,419 --> 00:02:13,140
construction 40 less than n by 3

50
00:02:12,360 --> 00:02:16,200
malicious

51
00:02:13,140 --> 00:02:18,239
options however they considered a weaker

52
00:02:16,200 --> 00:02:23,010
notion of security called security with

53
00:02:18,240 --> 00:02:25,860
selective about and finally concurrent

54
00:02:23,010 --> 00:02:28,709
to our work the talk that you just

55
00:02:25,860 --> 00:02:31,500
turned Appelbaum breaker ski and Sabri

56
00:02:28,709 --> 00:02:33,270
give a two-round protocol for optimal

57
00:02:31,500 --> 00:02:35,190
corruption threshold but they also

58
00:02:33,270 --> 00:02:39,600
consider a weaker notion of security

59
00:02:35,190 --> 00:02:42,390
called selective about so we consider

60
00:02:39,600 --> 00:02:44,850
security with Abad and give a two-round

61
00:02:42,390 --> 00:02:47,279
protocol with optimal corruption

62
00:02:44,850 --> 00:02:50,489
threshold that achieves security with

63
00:02:47,280 --> 00:02:53,880
about against malicious adversary's over

64
00:02:50,489 --> 00:02:56,160
p2p and broadcast channels and we also

65
00:02:53,880 --> 00:02:58,769
give a tour on protocol that achieves

66
00:02:56,160 --> 00:03:02,940
security with selective Abad over just

67
00:02:58,769 --> 00:03:04,830
point-to-point channels in this talk I'm

68
00:03:02,940 --> 00:03:08,940
just going to focus on our results for

69
00:03:04,830 --> 00:03:11,940
security with a bot so let me start with

70
00:03:08,940 --> 00:03:14,030
a brief overview of our approach so we

71
00:03:11,940 --> 00:03:17,010
start with any arbitrary round

72
00:03:14,030 --> 00:03:19,260
information theoretic protocol and use

73
00:03:17,010 --> 00:03:21,420
round compression techniques to get a

74
00:03:19,260 --> 00:03:24,090
two round protocol that achieves privacy

75
00:03:21,420 --> 00:03:26,280
with knowledge of outputs privacy with

76
00:03:24,090 --> 00:03:28,470
knowledge of outputs is a strictly

77
00:03:26,280 --> 00:03:30,239
weaker notion of security than security

78
00:03:28,470 --> 00:03:33,510
with a bot and I'll get to the

79
00:03:30,239 --> 00:03:36,540
definition of this notion in a bit but

80
00:03:33,510 --> 00:03:38,459
going back to our approach we finally

81
00:03:36,540 --> 00:03:40,769
give a round preserving transformation

82
00:03:38,459 --> 00:03:45,450
from privacy with knowledge of outputs

83
00:03:40,769 --> 00:03:47,579
to security with a mod ok so on to the

84
00:03:45,450 --> 00:03:51,500
security definition let's just recall

85
00:03:47,579 --> 00:03:54,360
the definition of security with a bot so

86
00:03:51,500 --> 00:03:56,940
we say that an MPC protocol achieves

87
00:03:54,360 --> 00:04:00,030
security with abort if it captures the

88
00:03:56,940 --> 00:04:02,820
following in the ideal world so all the

89
00:04:00,030 --> 00:04:06,120
parties send their inputs to the trusted

90
00:04:02,820 --> 00:04:08,549
party implementing the functionality the

91
00:04:06,120 --> 00:04:11,730
trusted party evaluates this function on

92
00:04:08,549 --> 00:04:14,670
these inputs and sends the output to the

93
00:04:11,730 --> 00:04:17,820
adversary the adversity can then either

94
00:04:14,670 --> 00:04:20,430
choose to send the same message or the

95
00:04:17,820 --> 00:04:23,219
output or just send bottom and the

96
00:04:20,430 --> 00:04:25,260
trusted party forwards this message or

97
00:04:23,220 --> 00:04:27,020
response from the adversary to all the

98
00:04:25,260 --> 00:04:30,270
honest parties

99
00:04:27,020 --> 00:04:33,450
security with aboard satisfies two

100
00:04:30,270 --> 00:04:35,870
important properties one is privacy of

101
00:04:33,450 --> 00:04:38,550
inputs for the Honest parties

102
00:04:35,870 --> 00:04:40,950
additionally it also satisfies output

103
00:04:38,550 --> 00:04:43,140
correctness that is the honest parties

104
00:04:40,950 --> 00:04:46,469
either learn the correct output or they

105
00:04:43,140 --> 00:04:48,840
learn nothing privacy with knowledge of

106
00:04:46,470 --> 00:04:51,210
outputs is a strictly weaker notion in

107
00:04:48,840 --> 00:04:53,099
the sense that output correctness for

108
00:04:51,210 --> 00:04:55,590
the Honest parties is not guaranteed

109
00:04:53,100 --> 00:04:57,930
here which basically means that it was

110
00:04:55,590 --> 00:05:00,630
freakin choose to send any garbage value

111
00:04:57,930 --> 00:05:04,620
y prime as output for the honest parties

112
00:05:00,630 --> 00:05:07,680
to the trusted functionality okay so

113
00:05:04,620 --> 00:05:09,480
let's focus on our first step which is

114
00:05:07,680 --> 00:05:11,310
around preserving transformation from

115
00:05:09,480 --> 00:05:13,350
privacy with knowledge of outputs to

116
00:05:11,310 --> 00:05:15,450
security with a bond for which we

117
00:05:13,350 --> 00:05:19,080
devised a new tool that we call multi

118
00:05:15,450 --> 00:05:21,780
key Mac so message multi key message

119
00:05:19,080 --> 00:05:24,300
authentication codes are can be seen as

120
00:05:21,780 --> 00:05:26,909
as a multi key variant of regular multi

121
00:05:24,300 --> 00:05:29,670
message authentication codes where each

122
00:05:26,910 --> 00:05:31,100
party can sample its key independent of

123
00:05:29,670 --> 00:05:34,680
everybody else

124
00:05:31,100 --> 00:05:36,840
now given a set of keys a signer or a

125
00:05:34,680 --> 00:05:40,740
trusted party can compute a multi key

126
00:05:36,840 --> 00:05:44,489
Mac over a message X and send it back to

127
00:05:40,740 --> 00:05:47,130
all the parties now given the signature

128
00:05:44,490 --> 00:05:50,880
or multi key Mac each party can locally

129
00:05:47,130 --> 00:05:54,510
verify if the signature is valid just

130
00:05:50,880 --> 00:05:56,760
corresponding to their own key and for

131
00:05:54,510 --> 00:05:59,070
correctness we require that if the

132
00:05:56,760 --> 00:06:01,770
signature or multi key Mac was computed

133
00:05:59,070 --> 00:06:03,480
honestly then all honest parties should

134
00:06:01,770 --> 00:06:05,849
be able to verify the signature

135
00:06:03,480 --> 00:06:07,710
corresponding to their own key without

136
00:06:05,850 --> 00:06:13,320
having any knowledge of the other

137
00:06:07,710 --> 00:06:15,750
parties keys for security we say that a

138
00:06:13,320 --> 00:06:16,620
multi key Mac scheme is multi key

139
00:06:15,750 --> 00:06:19,470
unfortune

140
00:06:16,620 --> 00:06:21,420
if given a multi key Mac on a set of

141
00:06:19,470 --> 00:06:24,230
keys out of which some of these keys

142
00:06:21,420 --> 00:06:28,020
might be chosen by the adversary himself

143
00:06:24,230 --> 00:06:31,260
it cannot produce another multi key Mac

144
00:06:28,020 --> 00:06:33,150
on a message of its choice such that it

145
00:06:31,260 --> 00:06:36,930
verifies against any of the honest

146
00:06:33,150 --> 00:06:39,810
parties keys so in other words and it

147
00:06:36,930 --> 00:06:41,130
was we cannot output any valid message

148
00:06:39,810 --> 00:06:43,500
signature pair

149
00:06:41,130 --> 00:06:45,990
than the one it received so essentially

150
00:06:43,500 --> 00:06:48,620
multi key max ensure that either all

151
00:06:45,990 --> 00:06:51,780
parties or at least all honest parties

152
00:06:48,620 --> 00:06:53,610
verify a signature or all honest parties

153
00:06:51,780 --> 00:06:57,840
are not able to verify a signature with

154
00:06:53,610 --> 00:06:59,250
a very high probability okay so assuming

155
00:06:57,840 --> 00:07:02,010
we have a construction for this

156
00:06:59,250 --> 00:07:03,660
primitive how can we go from privacy

157
00:07:02,010 --> 00:07:05,849
with knowledge of outputs to security

158
00:07:03,660 --> 00:07:07,920
with a bond so let's say F is the

159
00:07:05,850 --> 00:07:11,730
function that that really we are

160
00:07:07,920 --> 00:07:14,520
computing using this MPC protocol and x1

161
00:07:11,730 --> 00:07:17,910
x2 x3 are the respective inputs of the

162
00:07:14,520 --> 00:07:21,680
parties we propose to modify this

163
00:07:17,910 --> 00:07:26,670
function using similar techniques as

164
00:07:21,680 --> 00:07:30,660
used in i KP 10 where this modified

165
00:07:26,670 --> 00:07:33,150
function f prime now additionally takes

166
00:07:30,660 --> 00:07:36,780
a key for the multi key max scheme as

167
00:07:33,150 --> 00:07:38,909
input from all the honest parties and it

168
00:07:36,780 --> 00:07:41,789
computes the function f on the original

169
00:07:38,910 --> 00:07:43,860
set of inputs as before and now in

170
00:07:41,790 --> 00:07:46,770
addition to that it also computes a

171
00:07:43,860 --> 00:07:53,370
multi key Mac over this output of F

172
00:07:46,770 --> 00:07:56,849
corresponding to the input keys and now

173
00:07:53,370 --> 00:07:59,070
given the output of F which is y and a

174
00:07:56,850 --> 00:08:01,980
multi key Mac on this on this output

175
00:07:59,070 --> 00:08:03,990
each body can locally verify if this is

176
00:08:01,980 --> 00:08:06,060
a valid signature on Y or not and

177
00:08:03,990 --> 00:08:10,340
depending on that it can choose to

178
00:08:06,060 --> 00:08:14,700
either output Y or just output bottom

179
00:08:10,340 --> 00:08:16,890
okay so now given the correctness

180
00:08:14,700 --> 00:08:19,680
guarantee of this multi key mac scheme

181
00:08:16,890 --> 00:08:22,020
if the if the it was free choices to

182
00:08:19,680 --> 00:08:24,600
send the same value that it received

183
00:08:22,020 --> 00:08:27,090
from the trusted party in response as

184
00:08:24,600 --> 00:08:29,070
output to the honest parties then we are

185
00:08:27,090 --> 00:08:31,560
guaranteed that each honest party you

186
00:08:29,070 --> 00:08:34,010
will be able to verify this multi key

187
00:08:31,560 --> 00:08:37,049
Mac with respect to their own keys and

188
00:08:34,010 --> 00:08:39,270
if in case the it was free tries to

189
00:08:37,049 --> 00:08:40,859
modify this value and sends anything

190
00:08:39,270 --> 00:08:44,159
other than the value that it received

191
00:08:40,860 --> 00:08:45,930
from the rust-red functionality we know

192
00:08:44,159 --> 00:08:48,360
that with a very high probability all

193
00:08:45,930 --> 00:08:50,969
honest parties will not be able to

194
00:08:48,360 --> 00:08:54,120
verify this and hence just output bottom

195
00:08:50,970 --> 00:08:57,059
so using this tool we can

196
00:08:54,120 --> 00:09:01,970
I guarantee output correctness and hence

197
00:08:57,059 --> 00:09:01,969
achieve security with a bot okay

198
00:09:02,480 --> 00:09:06,089
unfortunately I won't have time to go

199
00:09:04,889 --> 00:09:08,790
with our information theoretic

200
00:09:06,089 --> 00:09:12,839
construction of this primitive but I'm

201
00:09:08,790 --> 00:09:15,149
happy to talk about it offline moving on

202
00:09:12,839 --> 00:09:17,160
now that we have around preserving

203
00:09:15,149 --> 00:09:19,620
transformation from privacy with

204
00:09:17,160 --> 00:09:22,379
knowledge of outputs to security with a

205
00:09:19,620 --> 00:09:24,749
bot let's just focus on trying to get a

206
00:09:22,379 --> 00:09:26,220
two-round protocol that achieves privacy

207
00:09:24,749 --> 00:09:30,240
with knowledge of outputs against

208
00:09:26,220 --> 00:09:32,910
malicious adversary's okay so our

209
00:09:30,240 --> 00:09:34,730
starting point is the standard round

210
00:09:32,910 --> 00:09:37,620
compression techniques that have been

211
00:09:34,730 --> 00:09:40,319
used in literature in particular we

212
00:09:37,620 --> 00:09:43,379
start with our previous work on honest

213
00:09:40,319 --> 00:09:45,748
majority MPC where we construct a two

214
00:09:43,379 --> 00:09:49,860
round protocol that secure against

215
00:09:45,749 --> 00:09:51,899
malicious adversary's and only uses

216
00:09:49,860 --> 00:09:54,029
one-way functions and interestingly the

217
00:09:51,899 --> 00:09:57,360
only place where one-way functions are

218
00:09:54,029 --> 00:10:00,720
used in this paper or construction is in

219
00:09:57,360 --> 00:10:03,300
the use of Cobble circuits so a nice

220
00:10:00,720 --> 00:10:05,309
solution to get analogous results in the

221
00:10:03,300 --> 00:10:09,540
information theoretic setting would be

222
00:10:05,309 --> 00:10:10,889
to just replace the use of garble

223
00:10:09,540 --> 00:10:14,248
circuits with information theoretic

224
00:10:10,889 --> 00:10:17,100
variants of Cobble circuits and but

225
00:10:14,249 --> 00:10:20,490
unfortunately the simple idea runs into

226
00:10:17,100 --> 00:10:23,790
a fundamental problem and to explain why

227
00:10:20,490 --> 00:10:26,370
let me dive a little deeper into the

228
00:10:23,790 --> 00:10:30,449
round compression technique used in this

229
00:10:26,370 --> 00:10:33,569
paper and most prior works on these

230
00:10:30,449 --> 00:10:35,699
round compression techniques okay so the

231
00:10:33,569 --> 00:10:37,829
idea is pretty simple the idea is to

232
00:10:35,699 --> 00:10:42,540
start with an interactive or an

233
00:10:37,829 --> 00:10:44,729
arbitrary round MPC protocol and have

234
00:10:42,540 --> 00:10:47,040
the party somehow commit to their inputs

235
00:10:44,730 --> 00:10:50,249
in the first round then in the second

236
00:10:47,040 --> 00:10:52,019
round the parties send a gobbling of

237
00:10:50,249 --> 00:10:55,050
their next message functions for each

238
00:10:52,019 --> 00:10:57,689
round of the underlying protocol and all

239
00:10:55,050 --> 00:10:59,878
this is done while ensuring that the

240
00:10:57,689 --> 00:11:02,610
garble circuits can only be evaluated

241
00:10:59,879 --> 00:11:04,679
once all so that after the second round

242
00:11:02,610 --> 00:11:07,290
these gobble circuits can sort of talk

243
00:11:04,679 --> 00:11:07,880
to each other without any additional

244
00:11:07,290 --> 00:11:11,870
interact

245
00:11:07,880 --> 00:11:18,529
and essentially implementing MPC in the

246
00:11:11,870 --> 00:11:20,300
head to explain how these Kabul circuits

247
00:11:18,529 --> 00:11:23,920
actually talk to each other let me just

248
00:11:20,300 --> 00:11:26,959
consider this simplistic example where

249
00:11:23,920 --> 00:11:29,149
the second garble circuit of party one

250
00:11:26,959 --> 00:11:30,979
wants to commune once to get inputs from

251
00:11:29,149 --> 00:11:35,899
the first couple circuits of the two

252
00:11:30,980 --> 00:11:37,970
parties this is enabled using a helper

253
00:11:35,899 --> 00:11:41,149
protocol that implements the OT

254
00:11:37,970 --> 00:11:44,089
functionality and so basically the first

255
00:11:41,149 --> 00:11:45,709
Kabul circuit of party two just outputs

256
00:11:44,089 --> 00:11:48,350
its first round message in the

257
00:11:45,709 --> 00:11:51,079
underlying protocol and the first garble

258
00:11:48,350 --> 00:11:53,180
circuit of party one just sends its all

259
00:11:51,079 --> 00:11:55,670
all its input wire labels for the second

260
00:11:53,180 --> 00:11:58,729
gobble circuit and now this OT

261
00:11:55,670 --> 00:12:00,769
functionality computes the wire labels

262
00:11:58,730 --> 00:12:04,519
corresponding to the first message of

263
00:12:00,769 --> 00:12:07,279
party 2 and now given these input wire

264
00:12:04,519 --> 00:12:11,720
labels we can evaluate the second gobble

265
00:12:07,279 --> 00:12:14,600
circuit of the first party okay so now

266
00:12:11,720 --> 00:12:17,750
coming back to the problem with this

267
00:12:14,600 --> 00:12:19,880
initial approach is that the problem

268
00:12:17,750 --> 00:12:21,949
with information theoretic garbled

269
00:12:19,880 --> 00:12:24,889
circuits is that the size of the input

270
00:12:21,949 --> 00:12:26,449
wire labels grows exponentially in the

271
00:12:24,889 --> 00:12:30,290
depth of the circuit that is being

272
00:12:26,449 --> 00:12:33,439
gobbled and here since since we are

273
00:12:30,290 --> 00:12:35,360
gobbling a circuit that's proportional

274
00:12:33,439 --> 00:12:37,399
to the similar to the next message

275
00:12:35,360 --> 00:12:39,470
function in the initial protocol the

276
00:12:37,399 --> 00:12:41,990
size of this function could potentially

277
00:12:39,470 --> 00:12:44,269
be as large as the size of the circuit

278
00:12:41,990 --> 00:12:46,459
that the NPC is computing and so the

279
00:12:44,269 --> 00:12:49,279
communication complexity just grows

280
00:12:46,459 --> 00:12:51,969
exponentially and just just to note that

281
00:12:49,279 --> 00:12:55,310
this is a very simplistic explanation of

282
00:12:51,970 --> 00:12:57,769
why we run into this problem but I mean

283
00:12:55,310 --> 00:13:01,729
implicitly this is this is essentially

284
00:12:57,769 --> 00:13:04,220
why this is the problem ok so how do we

285
00:13:01,730 --> 00:13:06,079
solve this we use techniques that are

286
00:13:04,220 --> 00:13:09,589
very similar to the ones used in the

287
00:13:06,079 --> 00:13:12,469
work of panama da and lin which is to

288
00:13:09,589 --> 00:13:14,689
basically modify the function that the

289
00:13:12,470 --> 00:13:16,399
first party gobbles so now instead of

290
00:13:14,689 --> 00:13:20,209
just gobbling its next message function

291
00:13:16,399 --> 00:13:22,910
it just outputs its actual input x2

292
00:13:20,209 --> 00:13:25,489
and the computation of the next message

293
00:13:22,910 --> 00:13:29,209
function is delegated to the helper

294
00:13:25,490 --> 00:13:32,029
protocol and we modify the functionality

295
00:13:29,209 --> 00:13:32,809
implemented by this helper protocol as

296
00:13:32,029 --> 00:13:34,759
follows

297
00:13:32,809 --> 00:13:37,429
so the helper protocol first computes

298
00:13:34,759 --> 00:13:39,949
the next message function of the four of

299
00:13:37,429 --> 00:13:44,300
the second party and then implements in

300
00:13:39,949 --> 00:13:48,378
ot ot functionality over this as as

301
00:13:44,300 --> 00:13:50,420
before ok so now that we've successfully

302
00:13:48,379 --> 00:13:53,540
managed to shrink the size of the

303
00:13:50,420 --> 00:13:55,729
circuit that we want to cobble all that

304
00:13:53,540 --> 00:13:58,490
really remains is to design a two-round

305
00:13:55,730 --> 00:14:04,179
protocol or a two-round helper protocol

306
00:13:58,490 --> 00:14:06,110
for this particular functionality but

307
00:14:04,179 --> 00:14:07,970
unfortunately this is not as

308
00:14:06,110 --> 00:14:11,449
straightforward as it seems for the

309
00:14:07,970 --> 00:14:13,369
following reasons so recall the template

310
00:14:11,449 --> 00:14:16,368
for our two round protocol or a two

311
00:14:13,369 --> 00:14:19,639
round compressed protocol now that uses

312
00:14:16,369 --> 00:14:21,769
this two round helper protocol the first

313
00:14:19,639 --> 00:14:24,019
round messages of this two round helper

314
00:14:21,769 --> 00:14:26,809
protocol are actually used to implicitly

315
00:14:24,019 --> 00:14:31,549
commit to the inputs of the parties in

316
00:14:26,809 --> 00:14:33,769
our mean two round protocol and we know

317
00:14:31,549 --> 00:14:35,389
that for malicious security the

318
00:14:33,769 --> 00:14:38,179
simulator must be able to simulate

319
00:14:35,389 --> 00:14:40,790
messages on behalf of the honest parties

320
00:14:38,179 --> 00:14:43,429
and extract the inputs of the adversary

321
00:14:40,790 --> 00:14:48,079
to send it to the trusted functionality

322
00:14:43,429 --> 00:14:50,319
of the trusted party and if we have this

323
00:14:48,079 --> 00:14:53,149
helper protocol running as a subroutine

324
00:14:50,319 --> 00:14:55,368
as a part of this part of a two-round

325
00:14:53,149 --> 00:14:59,119
protocol that helps commit to the inputs

326
00:14:55,369 --> 00:15:01,759
of the parties there must be a way for

327
00:14:59,119 --> 00:15:04,189
the simulator of this helper protocol to

328
00:15:01,759 --> 00:15:07,730
extract the inputs from its adversary

329
00:15:04,189 --> 00:15:09,709
and which basically means that we

330
00:15:07,730 --> 00:15:13,639
require this helper protocol to be

331
00:15:09,709 --> 00:15:15,469
maliciously secure and now it seems like

332
00:15:13,639 --> 00:15:17,959
we've run into a circular problem we

333
00:15:15,470 --> 00:15:20,089
started with the goal of trying to

334
00:15:17,959 --> 00:15:22,399
design a to run protocol that achieves

335
00:15:20,089 --> 00:15:24,529
malicious security and if we knew how to

336
00:15:22,399 --> 00:15:27,230
do this I mean we wouldn't have to deal

337
00:15:24,529 --> 00:15:31,699
with all this in the first place so but

338
00:15:27,230 --> 00:15:33,350
in fortunately when we show that we

339
00:15:31,699 --> 00:15:34,199
don't really require full malicious

340
00:15:33,350 --> 00:15:36,630
security

341
00:15:34,200 --> 00:15:39,720
our helper protocol and a week a

342
00:15:36,630 --> 00:15:42,380
symmetric security notion suffices we

343
00:15:39,720 --> 00:15:44,820
also give a construction for the same

344
00:15:42,380 --> 00:15:48,060
unfortunately I don't have time to go

345
00:15:44,820 --> 00:15:49,529
over more details but I invite you to

346
00:15:48,060 --> 00:15:51,709
take a look at our paper for more

347
00:15:49,529 --> 00:15:58,610
details and thank you for your attention

348
00:15:51,710 --> 00:16:02,460
[Applause]

349
00:15:58,610 --> 00:16:02,460
[Music]

350
00:16:17,839 --> 00:16:23,519
so these information theoretic protocols

351
00:16:21,000 --> 00:16:25,829
are very nice and I'm wondering that

352
00:16:23,519 --> 00:16:28,050
whether there is especially with the

353
00:16:25,829 --> 00:16:30,449
rotten or rotten presented whether this

354
00:16:28,050 --> 00:16:33,029
will also give us simpler protocols in

355
00:16:30,449 --> 00:16:36,510
the computational setting with the

356
00:16:33,029 --> 00:16:40,860
technique that you have proposed it's a

357
00:16:36,510 --> 00:16:52,170
function reduction simpler in what in

358
00:16:40,860 --> 00:16:57,170
which context yeah but also in the

359
00:16:52,170 --> 00:16:59,640
computational setting our reduction is

360
00:16:57,170 --> 00:17:01,199
generic and it works both in the

361
00:16:59,640 --> 00:17:03,660
computational setting and the

362
00:17:01,199 --> 00:17:05,639
information theoretic setting so it

363
00:17:03,660 --> 00:17:08,990
depends for which protocol you start

364
00:17:05,640 --> 00:17:11,990
from before you reduce the degrees but

365
00:17:08,990 --> 00:17:11,990
yeah

366
00:17:15,380 --> 00:17:37,669
Oh for computing the degree to function

367
00:17:18,470 --> 00:17:40,070
itself yes so I think that we didn't we

368
00:17:37,669 --> 00:17:41,690
didn't need any new protocol for

369
00:17:40,070 --> 00:17:44,330
computing the degree to function and the

370
00:17:41,690 --> 00:17:48,230
computational setting and we really

371
00:17:44,330 --> 00:17:50,570
needed a new protocol for the perfect

372
00:17:48,230 --> 00:17:53,000
security setting in order to get three

373
00:17:50,570 --> 00:18:08,539
rounds but for the computational which

374
00:17:53,000 --> 00:18:11,059
is existing so it does give you a

375
00:18:08,539 --> 00:18:19,010
simpler protocols in the competition

376
00:18:11,059 --> 00:18:22,090
yeah different okay okay so let's like

377
00:18:19,010 --> 00:18:24,550
any more questions from the audience

378
00:18:22,090 --> 00:18:28,829
then let's thank the speakers

379
00:18:24,550 --> 00:18:28,829
[Applause]

