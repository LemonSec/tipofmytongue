1
00:00:00,260 --> 00:00:05,970
thank you for the introduction hi

2
00:00:03,689 --> 00:00:08,519
everyone my name is Joseph this is joint

3
00:00:05,970 --> 00:00:11,219
work with ethnic as our own and were

4
00:00:08,519 --> 00:00:13,799
interested in proving improving security

5
00:00:11,219 --> 00:00:15,750
results for symmetric encryption by

6
00:00:13,799 --> 00:00:19,050
taking into account limitations of the

7
00:00:15,750 --> 00:00:21,480
attackers memory broadly speaking we can

8
00:00:19,050 --> 00:00:23,369
think of attacks is providing trade-offs

9
00:00:21,480 --> 00:00:25,380
between how many resources and attacker

10
00:00:23,369 --> 00:00:28,939
throws at a problem and how likely that

11
00:00:25,380 --> 00:00:31,948
attack is to succeed we can define

12
00:00:28,939 --> 00:00:34,230
informally the security level of a

13
00:00:31,949 --> 00:00:36,300
scheme as the number of resources needed

14
00:00:34,230 --> 00:00:40,739
to achieve success probability around

15
00:00:36,300 --> 00:00:42,599
one the most common resource we consider

16
00:00:40,739 --> 00:00:45,000
in this sort of analysis is the

17
00:00:42,600 --> 00:00:46,590
computation time of an attack but there

18
00:00:45,000 --> 00:00:50,129
are numerous other resources that we

19
00:00:46,590 --> 00:00:52,579
know are important in practice some

20
00:00:50,129 --> 00:00:55,110
examples hash function computation

21
00:00:52,579 --> 00:00:57,690
application application specific

22
00:00:55,110 --> 00:01:00,690
circuits can be exploited parallelism

23
00:00:57,690 --> 00:01:02,699
pipelining and amortization to compute

24
00:01:00,690 --> 00:01:06,030
hashes much more quickly than the

25
00:01:02,699 --> 00:01:08,250
average user does a second example

26
00:01:06,030 --> 00:01:10,320
pre-computation attacks where an

27
00:01:08,250 --> 00:01:13,110
attacker can exploit time to run lots of

28
00:01:10,320 --> 00:01:15,649
pre computation which then allows its

29
00:01:13,110 --> 00:01:18,420
future attacks to be much more efficient

30
00:01:15,650 --> 00:01:19,830
from the defense perspective two ways

31
00:01:18,420 --> 00:01:22,200
that we've studied these sorts of things

32
00:01:19,830 --> 00:01:24,390
is that proposed that we should consider

33
00:01:22,200 --> 00:01:26,549
memory hard hash functions for which

34
00:01:24,390 --> 00:01:29,130
computing the hash function uses lots of

35
00:01:26,549 --> 00:01:31,650
memory which is believed to be much

36
00:01:29,130 --> 00:01:35,908
harder to run in this parallel manner

37
00:01:31,650 --> 00:01:38,700
that Asics are exploiting for the second

38
00:01:35,909 --> 00:01:40,860
example cryptographers in various

39
00:01:38,700 --> 00:01:43,020
settings have to have studied the

40
00:01:40,860 --> 00:01:44,970
trade-offs between the amount of memory

41
00:01:43,020 --> 00:01:49,408
want stores about their pre computation

42
00:01:44,970 --> 00:01:51,360
and the future attack success you'll

43
00:01:49,409 --> 00:01:52,680
notice kind of conveniently both of the

44
00:01:51,360 --> 00:01:54,509
examples i've mentioned here

45
00:01:52,680 --> 00:01:56,579
don't worth pounding the memory used by

46
00:01:54,509 --> 00:01:58,619
attackers so this raises the question of

47
00:01:56,579 --> 00:02:00,658
where outs my memory restrictions matter

48
00:01:58,619 --> 00:02:02,369
in particular in our work we were

49
00:02:00,659 --> 00:02:06,090
interested in looking at symmetric

50
00:02:02,369 --> 00:02:08,038
encryption most classic symmetric

51
00:02:06,090 --> 00:02:09,840
encryption schemes are built from PRF

52
00:02:08,038 --> 00:02:12,529
and have security up to the birthday

53
00:02:09,840 --> 00:02:14,080
bound when the number of queries squared

54
00:02:12,530 --> 00:02:18,190
equals to 2

55
00:02:14,080 --> 00:02:21,070
block lengths we want to try to improve

56
00:02:18,190 --> 00:02:23,380
this to a space-time but they bound in

57
00:02:21,070 --> 00:02:25,590
which now instead of Q squared we have Q

58
00:02:23,380 --> 00:02:28,870
times the amount of space in bits

59
00:02:25,590 --> 00:02:30,190
equaling 2 to the N to kind of walk

60
00:02:28,870 --> 00:02:34,900
through a concrete example we can think

61
00:02:30,190 --> 00:02:36,850
about a s which has 128 block length so

62
00:02:34,900 --> 00:02:38,950
that a normal birthday bound would give

63
00:02:36,850 --> 00:02:42,430
you a security level up to 2 to the 64

64
00:02:38,950 --> 00:02:44,500
blocks encrypted if we were to improve

65
00:02:42,430 --> 00:02:47,410
this to a spacetime birthday bound and

66
00:02:44,500 --> 00:02:49,180
kept the number of blocks the same we

67
00:02:47,410 --> 00:02:52,000
would find that attacker to reach the

68
00:02:49,180 --> 00:02:55,390
security bound needs to have 2 to the 64

69
00:02:52,000 --> 00:02:57,070
bits of memory now to kind of give you a

70
00:02:55,390 --> 00:03:00,220
sense of how much memory that actually

71
00:02:57,070 --> 00:03:02,400
is consider NSA's Utah data center a

72
00:03:00,220 --> 00:03:04,450
couple years ago a Forbes estimate

73
00:03:02,400 --> 00:03:06,130
estimated that this data center might

74
00:03:04,450 --> 00:03:09,060
contain somewhere between 3 and 12

75
00:03:06,130 --> 00:03:12,760
exabytes of data this upper bound is

76
00:03:09,060 --> 00:03:14,740
pretty close to two to the 64 bits so to

77
00:03:12,760 --> 00:03:16,840
have a really successful attack against

78
00:03:14,740 --> 00:03:18,640
one success one session all you have to

79
00:03:16,840 --> 00:03:22,570
do is throw the entire data center at

80
00:03:18,640 --> 00:03:25,208
that single session to kind of dig into

81
00:03:22,570 --> 00:03:27,549
the formalism a bit more we typically

82
00:03:25,209 --> 00:03:29,800
study the security of a scheme pi by

83
00:03:27,550 --> 00:03:32,410
defining an advantage function which

84
00:03:29,800 --> 00:03:35,080
Maps the amount of resources used to a

85
00:03:32,410 --> 00:03:36,700
number between 0 and 1 capturing how

86
00:03:35,080 --> 00:03:38,530
well the best adversary with those

87
00:03:36,700 --> 00:03:42,130
resources can succeed in breaking the

88
00:03:38,530 --> 00:03:43,750
scheme as cryptographers a lot of our

89
00:03:42,130 --> 00:03:45,940
work is just studying these advantage

90
00:03:43,750 --> 00:03:47,890
functions from the provable security

91
00:03:45,940 --> 00:03:50,050
side we give security proofs which

92
00:03:47,890 --> 00:03:52,570
provide upper bound on the advantage in

93
00:03:50,050 --> 00:03:56,200
attacking with crypt analysis provides

94
00:03:52,570 --> 00:03:58,900
lower bound on advantage functions the

95
00:03:56,200 --> 00:04:00,310
resources considered from attacks we can

96
00:03:58,900 --> 00:04:01,930
often look at attack and try to

97
00:04:00,310 --> 00:04:04,959
understand how well it does in terms of

98
00:04:01,930 --> 00:04:06,480
time memory or parallelism or whatever

99
00:04:04,959 --> 00:04:09,010
other resources you're interested

100
00:04:06,480 --> 00:04:11,530
however from the security proof side

101
00:04:09,010 --> 00:04:13,690
most of our proof techniques only really

102
00:04:11,530 --> 00:04:16,779
know how to deal with the amount of time

103
00:04:13,690 --> 00:04:18,370
used by the attack in this work we're

104
00:04:16,779 --> 00:04:20,200
trying to kind of bring these walls

105
00:04:18,370 --> 00:04:24,270
together with tighter bounds that also

106
00:04:20,200 --> 00:04:26,830
take into account the amount of memory

107
00:04:24,270 --> 00:04:27,909
now a typical security resort you might

108
00:04:26,830 --> 00:04:29,289
see

109
00:04:27,910 --> 00:04:33,040
looks something like this where the

110
00:04:29,290 --> 00:04:35,590
security of the scheme pi is bounded by

111
00:04:33,040 --> 00:04:37,660
an attack using a similar amount of

112
00:04:35,590 --> 00:04:40,750
runtime and queries against an

113
00:04:37,660 --> 00:04:45,250
underlying primitive p plus some small

114
00:04:40,750 --> 00:04:48,520
epsilon term at least my recent line of

115
00:04:45,250 --> 00:04:50,620
work stood by o a BA at crypto 17 looked

116
00:04:48,520 --> 00:04:53,289
at improving this by taking into account

117
00:04:50,620 --> 00:04:55,660
space in particular they were interested

118
00:04:53,290 --> 00:04:58,390
in finding memory tight reductions where

119
00:04:55,660 --> 00:05:01,030
the amount of space used by the original

120
00:04:58,390 --> 00:05:02,830
attacker against pi is comparable to the

121
00:05:01,030 --> 00:05:04,630
amount of state used by the new

122
00:05:02,830 --> 00:05:07,510
reduction attack against the underlying

123
00:05:04,630 --> 00:05:09,969
primitive in our work we're trying to

124
00:05:07,510 --> 00:05:11,260
consider space-time trade-offs where

125
00:05:09,970 --> 00:05:13,300
we're improving the analysis by

126
00:05:11,260 --> 00:05:16,930
additionally considering s in the bound

127
00:05:13,300 --> 00:05:21,360
on that epsilon term an important

128
00:05:16,930 --> 00:05:24,040
predecessor ly work at TCC last year

129
00:05:21,360 --> 00:05:25,720
studied this by designing new symmetric

130
00:05:24,040 --> 00:05:28,480
encryption schemes for which they could

131
00:05:25,720 --> 00:05:31,090
prove that this epsilon term was small

132
00:05:28,480 --> 00:05:33,670
even when Q was much larger than 2 to

133
00:05:31,090 --> 00:05:35,859
the block length by assuming that the

134
00:05:33,670 --> 00:05:39,520
amount of space the attacker had is

135
00:05:35,860 --> 00:05:40,660
somehow smaller than this in this work

136
00:05:39,520 --> 00:05:42,729
were coming at this from a different

137
00:05:40,660 --> 00:05:44,740
direction when were instead looking at

138
00:05:42,730 --> 00:05:46,810
already existing symmetric encryption

139
00:05:44,740 --> 00:05:49,150
schemes and trying to get as good bound

140
00:05:46,810 --> 00:05:51,520
as we can and particularly the scheme as

141
00:05:49,150 --> 00:05:53,349
we looked at all had security up to the

142
00:05:51,520 --> 00:05:55,359
birthday bound from the standard proofs

143
00:05:53,350 --> 00:05:59,020
and we are trying to improve this to a

144
00:05:55,360 --> 00:06:00,670
space-time but they bound the concretely

145
00:05:59,020 --> 00:06:02,560
the results we get in our paper slightly

146
00:06:00,670 --> 00:06:04,600
worse than what's shown here we have an

147
00:06:02,560 --> 00:06:07,570
additional square root term over that

148
00:06:04,600 --> 00:06:09,070
space-time birthday bound now broadly

149
00:06:07,570 --> 00:06:11,170
you might be wondering why we think

150
00:06:09,070 --> 00:06:13,090
these bounds might actually be the case

151
00:06:11,170 --> 00:06:15,400
and for that I'll walk through a kind of

152
00:06:13,090 --> 00:06:18,330
a simple example of how this trade-off

153
00:06:15,400 --> 00:06:20,950
seems to arise naturally in an attack

154
00:06:18,330 --> 00:06:23,500
so first let's recall the definition of

155
00:06:20,950 --> 00:06:25,210
security for symmetric encryption which

156
00:06:23,500 --> 00:06:27,040
considers an attacker in one of two

157
00:06:25,210 --> 00:06:29,260
worlds in a real world

158
00:06:27,040 --> 00:06:31,960
it feeds messages into a box and gets

159
00:06:29,260 --> 00:06:34,690
back riyo encryptions under a secret key

160
00:06:31,960 --> 00:06:36,849
and the random world the box instead

161
00:06:34,690 --> 00:06:39,190
just feeds back random bits the

162
00:06:36,850 --> 00:06:41,220
advantage of the adversary is just the

163
00:06:39,190 --> 00:06:42,719
difference in probability that it output

164
00:06:41,220 --> 00:06:45,330
in these two worlds measuring how well

165
00:06:42,720 --> 00:06:46,860
it can distinguish between them a kind

166
00:06:45,330 --> 00:06:49,830
of very basic symmetric encryption

167
00:06:46,860 --> 00:06:52,740
scheme which we know is secure in this

168
00:06:49,830 --> 00:06:54,659
setting is one block counter mode in one

169
00:06:52,740 --> 00:06:57,330
block counter mode we pick a random

170
00:06:54,660 --> 00:06:59,460
string we shove it through a PRF and XOR

171
00:06:57,330 --> 00:07:02,760
with the message and this produces our

172
00:06:59,460 --> 00:07:04,859
ciphertext a kind of classic result

173
00:07:02,760 --> 00:07:07,230
which you might see in any crypto 101

174
00:07:04,860 --> 00:07:10,230
course gives a security bound that looks

175
00:07:07,230 --> 00:07:13,320
like this well we do security to that of

176
00:07:10,230 --> 00:07:16,290
the PRF plus that exact birthday bound

177
00:07:13,320 --> 00:07:18,270
term we've been thinking about in fact

178
00:07:16,290 --> 00:07:20,040
we know that this is tight you can give

179
00:07:18,270 --> 00:07:24,510
it a matching attack but just

180
00:07:20,040 --> 00:07:26,190
considering an adversary that gathers q

181
00:07:24,510 --> 00:07:28,260
different samples of these ciphertext

182
00:07:26,190 --> 00:07:31,170
and then checks if the output of the PRF

183
00:07:28,260 --> 00:07:32,490
repeats whenever are repeated if that

184
00:07:31,170 --> 00:07:34,440
was the case we assume were in the real

185
00:07:32,490 --> 00:07:38,100
world otherwise we assume were in the

186
00:07:34,440 --> 00:07:39,870
random world it's a simple analysis just

187
00:07:38,100 --> 00:07:42,150
based on the probability that these are

188
00:07:39,870 --> 00:07:43,950
values repeats gives a term which is

189
00:07:42,150 --> 00:07:46,919
essentially tight with that birthday

190
00:07:43,950 --> 00:07:48,659
bound however you'll note that this

191
00:07:46,919 --> 00:07:50,039
attack needs lots of memory in

192
00:07:48,660 --> 00:07:51,780
particular this attack is just

193
00:07:50,040 --> 00:07:54,120
remembering every single ciphertext it

194
00:07:51,780 --> 00:07:56,099
ever saw so then we might wonder what

195
00:07:54,120 --> 00:07:59,310
happens if the amount of space is much

196
00:07:56,100 --> 00:08:01,350
less than this a kind of natural way to

197
00:07:59,310 --> 00:08:04,919
generalize this attack would work is

198
00:08:01,350 --> 00:08:08,550
follow when adversary first just was the

199
00:08:04,919 --> 00:08:11,039
first s ciphertext it sees and then for

200
00:08:08,550 --> 00:08:12,780
all future cipher texts it checks if it

201
00:08:11,040 --> 00:08:16,430
repeated our values with one of those

202
00:08:12,780 --> 00:08:18,270
previous ciphertext and if so does the

203
00:08:16,430 --> 00:08:20,490
comparison we've been talking about

204
00:08:18,270 --> 00:08:22,909
before otherwise it throws out that

205
00:08:20,490 --> 00:08:25,320
ciphertext and looks for the next one

206
00:08:22,910 --> 00:08:28,110
again kind of straightforward analysis

207
00:08:25,320 --> 00:08:30,900
gives that this adversary has advantage

208
00:08:28,110 --> 00:08:33,860
which is essentially equal to that space

209
00:08:30,900 --> 00:08:36,270
time trade-off we've been talking about

210
00:08:33,860 --> 00:08:38,219
so the space time trade-off seems to

211
00:08:36,270 --> 00:08:40,049
arise naturally from the attacks the

212
00:08:38,219 --> 00:08:42,990
question is can we prove that this is

213
00:08:40,049 --> 00:08:44,550
tight with an upper bound this is much

214
00:08:42,990 --> 00:08:46,230
more difficult because most of our proof

215
00:08:44,550 --> 00:08:48,030
techniques don't really note how to

216
00:08:46,230 --> 00:08:52,670
address the amount of space used by an

217
00:08:48,030 --> 00:08:54,410
attack so concretely in our work with

218
00:08:52,670 --> 00:08:57,110
introduced a framework for analyzing

219
00:08:54,410 --> 00:08:59,029
these memory bounded attackers in a

220
00:08:57,110 --> 00:09:01,970
streaming indistinguishability setting

221
00:08:59,029 --> 00:09:04,010
we applied that framework to look at a

222
00:09:01,970 --> 00:09:07,459
security proof randomized counter mode

223
00:09:04,010 --> 00:09:09,519
when you have a PRF and provide this

224
00:09:07,459 --> 00:09:12,439
sort of space-time but they bound

225
00:09:09,519 --> 00:09:15,260
furthermore we look at the classic PRP

226
00:09:12,440 --> 00:09:17,300
PRF switching ulema and we revisit the

227
00:09:15,260 --> 00:09:19,519
lemma in the case when queries are

228
00:09:17,300 --> 00:09:21,649
either all distinct or all random and

229
00:09:19,519 --> 00:09:24,440
again I get obtain this sort of

230
00:09:21,649 --> 00:09:26,540
space-time but they're bound and then

231
00:09:24,440 --> 00:09:30,410
furthermore using techniques under these

232
00:09:26,540 --> 00:09:34,390
two examples we can provide bound for

233
00:09:30,410 --> 00:09:34,390
another a number of other applications

234
00:09:34,570 --> 00:09:38,120
throughout the rest of the talk I'll

235
00:09:36,440 --> 00:09:40,970
pick one at a time talking about these

236
00:09:38,120 --> 00:09:42,769
different points so first what's our

237
00:09:40,970 --> 00:09:45,500
streaming indistinguishability setting

238
00:09:42,769 --> 00:09:49,730
look like we consider two distributions

239
00:09:45,500 --> 00:09:51,950
x and y each made up of q elements then

240
00:09:49,730 --> 00:09:55,459
an attacker one at a time is fed these

241
00:09:51,950 --> 00:09:57,470
elements either from X or from Y and in

242
00:09:55,459 --> 00:10:00,290
between each sample it's given the

243
00:09:57,470 --> 00:10:04,670
attacker stores on stage Sigma which has

244
00:10:00,290 --> 00:10:07,310
a bounded size of s we define the

245
00:10:04,670 --> 00:10:09,469
advantage of the attacker to be the

246
00:10:07,310 --> 00:10:11,859
difference that it outputs one in these

247
00:10:09,470 --> 00:10:15,040
two settings giving this sort of

248
00:10:11,860 --> 00:10:17,720
indistinguishability that were used to a

249
00:10:15,040 --> 00:10:20,060
useful lemma in this setting which we

250
00:10:17,720 --> 00:10:22,250
use for all of our following results

251
00:10:20,060 --> 00:10:24,920
deals with the fact if one of these

252
00:10:22,250 --> 00:10:28,010
distributions which are X here is

253
00:10:24,920 --> 00:10:30,229
uniform and independent using a sort of

254
00:10:28,010 --> 00:10:32,180
hybrid argument using K are divergent

255
00:10:30,230 --> 00:10:33,529
we're able to reduce the problem of

256
00:10:32,180 --> 00:10:36,260
upper bounding the distinguishing

257
00:10:33,529 --> 00:10:39,709
advantage to providing a lower bound on

258
00:10:36,260 --> 00:10:42,140
the Shannon entropy of the Y values

259
00:10:39,709 --> 00:10:42,969
conditioned on the previous state stored

260
00:10:42,140 --> 00:10:45,500
by the attacker

261
00:10:42,970 --> 00:10:48,649
this connection to these information

262
00:10:45,500 --> 00:10:50,899
theoretic measurements is kind of the

263
00:10:48,649 --> 00:10:56,120
core critical insight allowing the

264
00:10:50,899 --> 00:10:58,070
analysis based on state so that's the

265
00:10:56,120 --> 00:11:00,110
kind of first example that we can walk

266
00:10:58,070 --> 00:11:02,240
through with in this setting let's

267
00:11:00,110 --> 00:11:04,300
consider counter mode security using a

268
00:11:02,240 --> 00:11:07,700
PRF

269
00:11:04,300 --> 00:11:09,589
the kind of setting we have that that we

270
00:11:07,700 --> 00:11:11,690
saw before is worth considering either

271
00:11:09,590 --> 00:11:13,610
the real world where encryption happens

272
00:11:11,690 --> 00:11:15,260
in the specified manner here I'm just

273
00:11:13,610 --> 00:11:17,540
showing it for a one block out of mode

274
00:11:15,260 --> 00:11:20,240
when twirling clipping one block of a

275
00:11:17,540 --> 00:11:23,270
message at a time versus the random

276
00:11:20,240 --> 00:11:25,100
world in typical crypto poof settings

277
00:11:23,270 --> 00:11:27,079
the first step we consider a hybrid

278
00:11:25,100 --> 00:11:29,810
distribution where the PRF has been

279
00:11:27,080 --> 00:11:31,130
replaced by a random function we reduced

280
00:11:29,810 --> 00:11:33,170
the difference between the real world

281
00:11:31,130 --> 00:11:35,360
and this world by the PRF advantage of e

282
00:11:33,170 --> 00:11:37,150
there's nothing special going on there

283
00:11:35,360 --> 00:11:40,670
and our proofs that is the standard

284
00:11:37,150 --> 00:11:43,699
production the core part of our proof

285
00:11:40,670 --> 00:11:45,589
then is proving how well an attacker can

286
00:11:43,700 --> 00:11:48,950
distinguish between the type read and

287
00:11:45,590 --> 00:11:50,630
the random world and particularly the

288
00:11:48,950 --> 00:11:53,420
kind of information they are a cool

289
00:11:50,630 --> 00:11:55,130
problem you extract out of this asks how

290
00:11:53,420 --> 00:11:57,709
well an attacker can distinguish between

291
00:11:55,130 --> 00:12:01,340
a random function applied to random

292
00:11:57,710 --> 00:12:03,050
values or just pure randomness a thing

293
00:12:01,340 --> 00:12:06,470
to emphasize here this pure randomness

294
00:12:03,050 --> 00:12:08,569
will be uniform and independent venomous

295
00:12:06,470 --> 00:12:11,570
which is exactly what we needed to apply

296
00:12:08,570 --> 00:12:13,610
that lemma from before so according to

297
00:12:11,570 --> 00:12:16,340
that lemma all we need to do to prove

298
00:12:13,610 --> 00:12:19,550
our upper bound is we need to prove a

299
00:12:16,340 --> 00:12:21,140
lower bound on this Shannon entropy I'm

300
00:12:19,550 --> 00:12:24,050
not going to walk through the details of

301
00:12:21,140 --> 00:12:25,430
that in our proof in this talk but I

302
00:12:24,050 --> 00:12:28,069
want to emphasize it's actually a rather

303
00:12:25,430 --> 00:12:33,560
short calculation based only on kind of

304
00:12:28,070 --> 00:12:35,240
simple properties of Shannon entropy an

305
00:12:33,560 --> 00:12:37,609
open question which we weren't able to

306
00:12:35,240 --> 00:12:41,030
resolve is whether or not this is tight

307
00:12:37,610 --> 00:12:43,610
in particular that square root can we

308
00:12:41,030 --> 00:12:45,439
either provide a better proof which gets

309
00:12:43,610 --> 00:12:47,480
rid of the square root or is there

310
00:12:45,440 --> 00:12:49,340
actually some matching attack which has

311
00:12:47,480 --> 00:12:53,930
an advantage with that square root over

312
00:12:49,340 --> 00:12:55,460
it the kind of core crux of this

313
00:12:53,930 --> 00:12:57,349
analysis that I'm showing on the slide

314
00:12:55,460 --> 00:12:59,330
can also be applied to some of these

315
00:12:57,350 --> 00:13:02,780
other settings particularly the security

316
00:12:59,330 --> 00:13:06,050
of counter mode using a PRF with multi

317
00:13:02,780 --> 00:13:08,240
block messages the encrypted PRF generic

318
00:13:06,050 --> 00:13:13,599
construction and a sort of switching

319
00:13:08,240 --> 00:13:15,430
lemma applied to weak PRF so

320
00:13:13,600 --> 00:13:17,800
it's kind of revisit where we've been so

321
00:13:15,430 --> 00:13:20,138
far I showed you our framework for

322
00:13:17,800 --> 00:13:22,719
streaming indistinguishability I talked

323
00:13:20,139 --> 00:13:24,670
about how we use this to provide a proof

324
00:13:22,720 --> 00:13:28,569
of randomized counter mode using a PRF

325
00:13:24,670 --> 00:13:32,110
and I've showed half of so of the

326
00:13:28,569 --> 00:13:34,149
applications that I mentioned next up we

327
00:13:32,110 --> 00:13:36,850
are going to revisit the extended PRP

328
00:13:34,149 --> 00:13:39,550
PRF switching lemma so let's kind of

329
00:13:36,850 --> 00:13:42,399
recall the motivation behind that in

330
00:13:39,550 --> 00:13:44,380
practice when we do encryption that PRF

331
00:13:42,399 --> 00:13:46,750
we use is actually a block cipher a

332
00:13:44,380 --> 00:13:48,910
block cipher you may recall is a family

333
00:13:46,750 --> 00:13:52,720
of permutations each key provides a

334
00:13:48,910 --> 00:13:56,170
different permutation because of the

335
00:13:52,720 --> 00:13:58,480
structure inherent in permutations the

336
00:13:56,170 --> 00:14:01,000
PRF advantage can only be so good in

337
00:13:58,480 --> 00:14:03,040
particular there's there's an attack

338
00:14:01,000 --> 00:14:06,009
which has a birthday bound advantage

339
00:14:03,040 --> 00:14:08,829
against any permutation in terms of PRF

340
00:14:06,009 --> 00:14:11,019
security the standard way we kind of

341
00:14:08,829 --> 00:14:13,508
think about this in practice is we think

342
00:14:11,019 --> 00:14:16,060
of our block cipher as being a good PRP

343
00:14:13,509 --> 00:14:18,880
and then we have a generic switching

344
00:14:16,060 --> 00:14:21,430
lemma which says for any choice of e the

345
00:14:18,880 --> 00:14:23,649
difference between PRP and PRF security

346
00:14:21,430 --> 00:14:28,060
cannot be that big in particular it's

347
00:14:23,649 --> 00:14:29,529
bounded by a birthday bound term you

348
00:14:28,060 --> 00:14:31,449
know what we were interested in proving

349
00:14:29,529 --> 00:14:33,250
birthday bounce by changing them to

350
00:14:31,449 --> 00:14:35,139
space time birthday bounds so you might

351
00:14:33,250 --> 00:14:37,509
ask the question can we improve the

352
00:14:35,139 --> 00:14:41,259
switching lemma by placing bounds on the

353
00:14:37,509 --> 00:14:43,660
amount of memory used by an attacker in

354
00:14:41,259 --> 00:14:45,339
general the answer is no and this comes

355
00:14:43,660 --> 00:14:47,529
from the kind of classic psycho

356
00:14:45,339 --> 00:14:50,470
detection algorithms such as the one by

357
00:14:47,529 --> 00:14:53,170
Floyd which shows how to find a

358
00:14:50,470 --> 00:14:57,040
collision in a random function using

359
00:14:53,170 --> 00:14:59,380
only a square root amount of queries and

360
00:14:57,040 --> 00:15:01,209
a very small amount of memory so we

361
00:14:59,380 --> 00:15:02,500
cannot hope for really any trade off by

362
00:15:01,209 --> 00:15:09,550
bounding the amount of memory an

363
00:15:02,500 --> 00:15:11,319
attacker uses however so in general

364
00:15:09,550 --> 00:15:12,750
there's no switching lemma improvement

365
00:15:11,319 --> 00:15:15,819
which we can make for bounded memory

366
00:15:12,750 --> 00:15:17,649
however we can't do it in some special

367
00:15:15,819 --> 00:15:20,139
cases particularly cases I mentioned

368
00:15:17,649 --> 00:15:22,600
before when either all the queries made

369
00:15:20,139 --> 00:15:24,400
by the attacker or distinct or all the

370
00:15:22,600 --> 00:15:29,320
queries made by the attacker or picked

371
00:15:24,400 --> 00:15:31,810
random in our work we will need to able

372
00:15:29,320 --> 00:15:33,910
to prove this by making a kind of weak

373
00:15:31,810 --> 00:15:37,089
conjecture about the combinatorial

374
00:15:33,910 --> 00:15:40,000
properties of hypergraphs which I'll get

375
00:15:37,090 --> 00:15:41,830
to in a moment I should point out that

376
00:15:40,000 --> 00:15:44,080
there's some recent work by jr.

377
00:15:41,830 --> 00:15:45,610
appointed I posted on ePrint which

378
00:15:44,080 --> 00:15:47,890
improved this birthday bound for the

379
00:15:45,610 --> 00:15:51,070
switching lemma by making a connection

380
00:15:47,890 --> 00:15:52,810
to communication complexity both getting

381
00:15:51,070 --> 00:15:54,430
rid of the square root in the term was

382
00:15:52,810 --> 00:15:56,530
the small end term which is not too

383
00:15:54,430 --> 00:16:00,880
important and was able to do so without

384
00:15:56,530 --> 00:16:03,010
any conjectures the information

385
00:16:00,880 --> 00:16:05,110
theoretic core of this switching lemma

386
00:16:03,010 --> 00:16:07,840
in particular four distinct inputs we're

387
00:16:05,110 --> 00:16:10,000
considering a distinct x1 to execute and

388
00:16:07,840 --> 00:16:12,730
this is either fed through a random

389
00:16:10,000 --> 00:16:14,290
function or random permutation we asked

390
00:16:12,730 --> 00:16:16,780
how well an attacker can distinguish

391
00:16:14,290 --> 00:16:18,310
between the two if you kind of look at

392
00:16:16,780 --> 00:16:20,790
this problem for a bit you actually

393
00:16:18,310 --> 00:16:23,859
realize that it's identical to a kind of

394
00:16:20,790 --> 00:16:26,079
more basic question of how well an

395
00:16:23,860 --> 00:16:28,990
attacker can distinguish between uniform

396
00:16:26,080 --> 00:16:33,820
independent samples X 1 through X Q from

397
00:16:28,990 --> 00:16:35,920
some set of size n or Y 1 and Y Q take

398
00:16:33,820 --> 00:16:39,990
uniformly but without replacement

399
00:16:35,920 --> 00:16:39,990
so these Y's are not equal to each other

400
00:16:40,140 --> 00:16:46,000
now that we've shown we have the setting

401
00:16:43,630 --> 00:16:48,220
with uniform independent X's we can

402
00:16:46,000 --> 00:16:50,140
again call back to that lemma we

403
00:16:48,220 --> 00:16:53,680
mentioned earlier where we just have two

404
00:16:50,140 --> 00:16:56,080
bound Shannon entropy this bound unlike

405
00:16:53,680 --> 00:16:58,420
in the randomized counter mode proof is

406
00:16:56,080 --> 00:17:00,940
actually quite difficult and it's in

407
00:16:58,420 --> 00:17:05,109
that bound where we needed to call to

408
00:17:00,940 --> 00:17:06,850
our conjecture just talked briefly about

409
00:17:05,109 --> 00:17:09,069
what our conjecture was let's recall

410
00:17:06,849 --> 00:17:11,889
what hypergraph is in a hyper graph we

411
00:17:09,069 --> 00:17:15,609
have n nodes and edges between the nodes

412
00:17:11,890 --> 00:17:18,430
consist of subsets of all the N nodes in

413
00:17:15,609 --> 00:17:20,708
particular our conjecture worried about

414
00:17:18,430 --> 00:17:23,800
K uniform hyper graphs which means that

415
00:17:20,709 --> 00:17:26,290
each edge is I set consisting of K

416
00:17:23,800 --> 00:17:30,850
elements and the pictures shown here

417
00:17:26,290 --> 00:17:32,680
it's a three uniform hyper graph the

418
00:17:30,850 --> 00:17:35,669
degree of any particular node is then

419
00:17:32,680 --> 00:17:40,590
defined as the number of edges

420
00:17:35,670 --> 00:17:42,450
which that node is part of the kind of

421
00:17:40,590 --> 00:17:44,399
structure of such a graph can be studied

422
00:17:42,450 --> 00:17:47,580
by this sum of square of degrees in

423
00:17:44,400 --> 00:17:53,550
which you just simply square up you sum

424
00:17:47,580 --> 00:17:55,800
up the square of every node degree the

425
00:17:53,550 --> 00:17:59,180
kind of problem one might consider for

426
00:17:55,800 --> 00:18:02,610
this is for any particular value of n km

427
00:17:59,180 --> 00:18:05,610
what is the K uniform hyper graph with M

428
00:18:02,610 --> 00:18:07,709
hyper edges which maximizes the sum of

429
00:18:05,610 --> 00:18:09,689
square of degrees this is a problem

430
00:18:07,710 --> 00:18:11,670
which has been considered a bit in the

431
00:18:09,690 --> 00:18:13,650
mathematical community it's well

432
00:18:11,670 --> 00:18:15,990
understood in the case of typical graphs

433
00:18:13,650 --> 00:18:19,320
when our hyper edges are just normal

434
00:18:15,990 --> 00:18:21,510
edges consisting of only two nodes but

435
00:18:19,320 --> 00:18:23,909
the full solution isn't understood in

436
00:18:21,510 --> 00:18:27,210
the more general case where the degree

437
00:18:23,910 --> 00:18:30,390
of our edges per site when the size of

438
00:18:27,210 --> 00:18:33,480
our edges is more nodes in particular

439
00:18:30,390 --> 00:18:37,920
our conjecture considered parameters of

440
00:18:33,480 --> 00:18:40,710
a particular size where the edges each

441
00:18:37,920 --> 00:18:42,930
consists of more than half of the nodes

442
00:18:40,710 --> 00:18:44,850
in the graph and in particular the

443
00:18:42,930 --> 00:18:49,890
number of edges is this very nice size

444
00:18:44,850 --> 00:18:52,080
in which a complete sub hyper graph fits

445
00:18:49,890 --> 00:18:54,560
perfectly and we conjecture that this

446
00:18:52,080 --> 00:18:57,270
complete hyper graph is the maximal

447
00:18:54,560 --> 00:18:59,220
hyper graph of for sum of squares for

448
00:18:57,270 --> 00:19:01,800
these particular choices of parameters

449
00:18:59,220 --> 00:19:04,080
this is hopefully a reasonable

450
00:19:01,800 --> 00:19:06,090
assumption and in particular this is a

451
00:19:04,080 --> 00:19:10,590
natural generalization of what we know

452
00:19:06,090 --> 00:19:12,540
to be the case for normal graphs then

453
00:19:10,590 --> 00:19:14,909
using this conjecture we're able to

454
00:19:12,540 --> 00:19:17,190
prove a bound on that Shannon entropy

455
00:19:14,910 --> 00:19:19,200
which then in turn gives us our

456
00:19:17,190 --> 00:19:22,200
space-time trade-off in that

457
00:19:19,200 --> 00:19:24,270
distinguishing advantage this

458
00:19:22,200 --> 00:19:25,640
distinguishing advantage between uniform

459
00:19:24,270 --> 00:19:27,810
samples with or without replacement

460
00:19:25,640 --> 00:19:29,820
actually has a number of applications

461
00:19:27,810 --> 00:19:31,980
the switching lemma four distinct

462
00:19:29,820 --> 00:19:34,590
queries follows from it the switching

463
00:19:31,980 --> 00:19:37,020
lemma for random queries for Tom go into

464
00:19:34,590 --> 00:19:38,520
a bit more a moment follows from it we

465
00:19:37,020 --> 00:19:40,050
can use it to prove security for

466
00:19:38,520 --> 00:19:43,740
stateful counter mode when you use the

467
00:19:40,050 --> 00:19:45,930
PRP we can use it for stateful ofb when

468
00:19:43,740 --> 00:19:47,550
you use a PRP it also provides a

469
00:19:45,930 --> 00:19:49,650
switching lemma for weak PRP and

470
00:19:47,550 --> 00:19:52,740
security for one block counter mode

471
00:19:49,650 --> 00:19:54,270
with the PRP this is different from our

472
00:19:52,740 --> 00:19:56,700
only analysis which considered

473
00:19:54,270 --> 00:19:58,320
randomized counter mode with a PRF an

474
00:19:56,700 --> 00:19:59,880
open question which we haven't resolved

475
00:19:58,320 --> 00:20:01,889
is whether you get this sort of

476
00:19:59,880 --> 00:20:05,970
space-time but they bound for multi

477
00:20:01,890 --> 00:20:07,980
block counter mode using a PRP finally

478
00:20:05,970 --> 00:20:09,660
quickly walk through the proof for

479
00:20:07,980 --> 00:20:12,510
switching lemma when the inputs are

480
00:20:09,660 --> 00:20:14,910
random it boils down to distinguishing

481
00:20:12,510 --> 00:20:16,920
between these two worlds with either

482
00:20:14,910 --> 00:20:19,460
random function or random permutation

483
00:20:16,920 --> 00:20:21,840
applied to uniform independent samples

484
00:20:19,460 --> 00:20:23,390
we proved it by transitioning between

485
00:20:21,840 --> 00:20:27,240
the number of different distributions

486
00:20:23,390 --> 00:20:28,830
first we can use advantage to switch

487
00:20:27,240 --> 00:20:31,410
these X's to be sampled without

488
00:20:28,830 --> 00:20:33,600
replacement a random function applied to

489
00:20:31,410 --> 00:20:35,160
values sampled without replacement is

490
00:20:33,600 --> 00:20:38,820
equivalent to just picking samples

491
00:20:35,160 --> 00:20:41,490
uniformly with replacement once we've

492
00:20:38,820 --> 00:20:43,700
done this we can again apply a bound to

493
00:20:41,490 --> 00:20:47,429
make these samples be played picked

494
00:20:43,700 --> 00:20:48,809
without replacement again once we've

495
00:20:47,429 --> 00:20:50,700
done that it's equivalent to just

496
00:20:48,809 --> 00:20:54,928
applying a random permutation to our

497
00:20:50,700 --> 00:20:57,900
wise and then finally another call to

498
00:20:54,929 --> 00:21:02,660
our bound lets us replace those Y's back

499
00:20:57,900 --> 00:21:05,070
with the original X's with replacement

500
00:21:02,660 --> 00:21:06,420
the same analysis can be tweaked for

501
00:21:05,070 --> 00:21:09,149
some of those other applications I

502
00:21:06,420 --> 00:21:10,710
mentioned with that I've reached the end

503
00:21:09,150 --> 00:21:12,720
of my talk I just want to give you the

504
00:21:10,710 --> 00:21:14,670
kind of one sentence summary which is

505
00:21:12,720 --> 00:21:16,470
that we revisited the analysis of

506
00:21:14,670 --> 00:21:18,780
classic symmetric encryption schemes and

507
00:21:16,470 --> 00:21:21,660
improve them by giving spacetimes

508
00:21:18,780 --> 00:21:25,440
trade-offs to replace birthday bound

509
00:21:21,660 --> 00:21:32,259
with space-time but there BAPS thank you

510
00:21:25,440 --> 00:21:32,259
[Applause]

