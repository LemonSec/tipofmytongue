1
00:00:00,000 --> 00:00:06,390
hi everyone so this talk is to is about

2
00:00:03,090 --> 00:00:08,039
the secure computation in the correlated

3
00:00:06,390 --> 00:00:11,399
run on this model and more specifically

4
00:00:08,039 --> 00:00:13,349
it deals with a long quest for secure

5
00:00:11,400 --> 00:00:15,540
computation with low communication

6
00:00:13,349 --> 00:00:17,520
so what secure computation you have some

7
00:00:15,540 --> 00:00:19,049
number of parties here I will focus on

8
00:00:17,520 --> 00:00:20,550
the case of two parties for simplicity

9
00:00:19,050 --> 00:00:22,320
but everything I say can be extended to

10
00:00:20,550 --> 00:00:24,180
more parties and they would like to

11
00:00:22,320 --> 00:00:27,840
jointly compute some public function f

12
00:00:24,180 --> 00:00:29,880
on their joint private inputs and the

13
00:00:27,840 --> 00:00:31,500
protocol should be correct meaning that

14
00:00:29,880 --> 00:00:33,510
all the parties should get to learn the

15
00:00:31,500 --> 00:00:35,940
output of the function and it shall be

16
00:00:33,510 --> 00:00:37,620
secure in the sense that nobody should

17
00:00:35,940 --> 00:00:41,040
learn anything more from the protocol

18
00:00:37,620 --> 00:00:42,390
than the output of the function so if

19
00:00:41,040 --> 00:00:44,160
you want if you don't care about

20
00:00:42,390 --> 00:00:46,079
security and if you want to compute a

21
00:00:44,160 --> 00:00:48,390
function then it's easy to see that

22
00:00:46,079 --> 00:00:51,000
Alice and Bob only need to exchange our

23
00:00:48,390 --> 00:00:52,829
inputs meaning that the communication

24
00:00:51,000 --> 00:00:55,289
occurred to insecurely computer function

25
00:00:52,829 --> 00:00:57,559
is just the size of the inputs

26
00:00:55,289 --> 00:01:00,989
multiplied by the number of parties and

27
00:00:57,559 --> 00:01:03,769
in contrast the first protocols for

28
00:01:00,989 --> 00:01:07,740
secure computation the one by Yahoo in

29
00:01:03,769 --> 00:01:10,350
1986 in the gmw protocol in 1987 had a

30
00:01:07,740 --> 00:01:12,929
communication complexity which is

31
00:01:10,350 --> 00:01:15,509
proportional to the circuit size of the

32
00:01:12,930 --> 00:01:17,549
function so a very important very

33
00:01:15,509 --> 00:01:19,020
fundamental question in secure

34
00:01:17,549 --> 00:01:20,100
computation has been since the

35
00:01:19,020 --> 00:01:22,320
introduction of the first secure

36
00:01:20,100 --> 00:01:24,408
computation protocol to understand

37
00:01:22,320 --> 00:01:26,669
whether this is inherent whether

38
00:01:24,409 --> 00:01:29,549
securely computing a function does

39
00:01:26,670 --> 00:01:33,409
inherently require much more computation

40
00:01:29,549 --> 00:01:35,939
than in securely computing a function

41
00:01:33,409 --> 00:01:38,790
now since the breakthrough workers of

42
00:01:35,939 --> 00:01:39,990
Gentry in 2009 we know that and there

43
00:01:38,790 --> 00:01:41,729
are some suitable computational

44
00:01:39,990 --> 00:01:43,589
assumptions or some variants of the

45
00:01:41,729 --> 00:01:45,420
learning with our assumption it's

46
00:01:43,590 --> 00:01:47,820
actually possible to securely compute

47
00:01:45,420 --> 00:01:50,700
any function with optimal communication

48
00:01:47,820 --> 00:01:53,148
input size plus output size plus some

49
00:01:50,700 --> 00:01:56,460
polynomial in the security parameter and

50
00:01:53,149 --> 00:01:58,439
we also learn more recently that it's

51
00:01:56,460 --> 00:02:00,360
possible to securely compute a large

52
00:01:58,439 --> 00:02:02,008
class of function with a communication

53
00:02:00,360 --> 00:02:03,689
which is sub linear in the size of the

54
00:02:02,009 --> 00:02:05,780
circuit and there's a decisional

55
00:02:03,689 --> 00:02:07,559
diffie-hellman assumption so under

56
00:02:05,780 --> 00:02:09,810
computational assumption that are widely

57
00:02:07,560 --> 00:02:12,569
believed to hold this is more or less a

58
00:02:09,810 --> 00:02:13,830
solved problem so in this talk I'm going

59
00:02:12,569 --> 00:02:16,350
to revisit a bit

60
00:02:13,830 --> 00:02:18,300
equation in the context of secure

61
00:02:16,350 --> 00:02:20,880
computation in the correlated randomness

62
00:02:18,300 --> 00:02:23,220
model what is the correlated run on this

63
00:02:20,880 --> 00:02:24,990
model in this model you have a trusted

64
00:02:23,220 --> 00:02:27,359
dealer that before the start of the

65
00:02:24,990 --> 00:02:29,430
protocol will generate and distribute

66
00:02:27,360 --> 00:02:30,870
correlated role on coins that are

67
00:02:29,430 --> 00:02:33,560
independent of the inputs to the

68
00:02:30,870 --> 00:02:35,850
protocol and give them to the parties

69
00:02:33,560 --> 00:02:38,430
then the parties can use these

70
00:02:35,850 --> 00:02:41,519
correlated run on coins in the actual

71
00:02:38,430 --> 00:02:43,530
secure computation protocol so why do we

72
00:02:41,520 --> 00:02:46,680
care about this model there are two main

73
00:02:43,530 --> 00:02:49,940
reasons first I was shown by as was

74
00:02:46,680 --> 00:02:52,650
shown by beaver in 1991 and such

75
00:02:49,940 --> 00:02:54,180
following a trusted set up that

76
00:02:52,650 --> 00:02:56,280
distributes quality run on coins to the

77
00:02:54,180 --> 00:02:58,050
parties allows for information

78
00:02:56,280 --> 00:03:00,120
surgically secure computation in the

79
00:02:58,050 --> 00:03:02,310
online phase and this is in stark

80
00:03:00,120 --> 00:03:04,170
contrast we've studied secure

81
00:03:02,310 --> 00:03:06,660
computation without a setup which

82
00:03:04,170 --> 00:03:09,329
obviously requires computational

83
00:03:06,660 --> 00:03:11,609
hardness assumptions it's a second

84
00:03:09,330 --> 00:03:13,020
reason why we care about so much that we

85
00:03:11,610 --> 00:03:15,209
care so much about the correlated run on

86
00:03:13,020 --> 00:03:17,340
this model is that it turns out that it

87
00:03:15,209 --> 00:03:18,690
leads to extremely efficient like

88
00:03:17,340 --> 00:03:21,450
concretely efficient secure computation

89
00:03:18,690 --> 00:03:24,480
protocols and in fact almost all modern

90
00:03:21,450 --> 00:03:26,040
secure computation protocol that aim at

91
00:03:24,480 --> 00:03:29,700
being completely efficient that you can

92
00:03:26,040 --> 00:03:30,989
see nowadays do work in this model like

93
00:03:29,700 --> 00:03:32,369
they're working to phase in some

94
00:03:30,989 --> 00:03:34,470
pre-processing phase the parties will

95
00:03:32,370 --> 00:03:36,630
jointly generate some correlated Onam

96
00:03:34,470 --> 00:03:38,910
coins and then in the online phase the

97
00:03:36,630 --> 00:03:41,190
party will consume those run on coins to

98
00:03:38,910 --> 00:03:42,870
sexual evaluate the function and the

99
00:03:41,190 --> 00:03:44,790
secure evaluation will not only be

100
00:03:42,870 --> 00:03:49,110
information theoretically secure it's

101
00:03:44,790 --> 00:03:50,489
also extremely fast yet all known

102
00:03:49,110 --> 00:03:52,500
protocols that we know of in the

103
00:03:50,489 --> 00:03:55,320
correlated randomness model for general

104
00:03:52,500 --> 00:03:57,209
functions require a communication which

105
00:03:55,320 --> 00:04:00,540
is proportional to the circuit size of

106
00:03:57,209 --> 00:04:02,280
the function so question is to

107
00:04:00,540 --> 00:04:04,590
understand whether this is inherent and

108
00:04:02,280 --> 00:04:08,519
actually it was proven by danga d'etat

109
00:04:04,590 --> 00:04:10,140
in 2016 that this is indeed inherent for

110
00:04:08,519 --> 00:04:12,030
a large class of protocols in the

111
00:04:10,140 --> 00:04:14,488
collected on this model that were called

112
00:04:12,030 --> 00:04:17,430
gate by gate protocols which captured at

113
00:04:14,489 --> 00:04:21,329
the time all known protocols in the

114
00:04:17,430 --> 00:04:22,650
quality run on this model so in this

115
00:04:21,329 --> 00:04:24,300
work I'm going to revisit a bit this

116
00:04:22,650 --> 00:04:26,609
question and show that we can somehow

117
00:04:24,300 --> 00:04:27,630
hope to get kind of the best of both

118
00:04:26,610 --> 00:04:29,400
worlds

119
00:04:27,630 --> 00:04:31,350
meaning simultaneously the sub linear

120
00:04:29,400 --> 00:04:33,570
communication guarantees that we could

121
00:04:31,350 --> 00:04:36,390
only achieve as of today in the case of

122
00:04:33,570 --> 00:04:37,560
computationally secure computation but

123
00:04:36,390 --> 00:04:39,630
at the same time having information

124
00:04:37,560 --> 00:04:41,430
theoretic security and good concrete

125
00:04:39,630 --> 00:04:42,719
efficiency we've like only known

126
00:04:41,430 --> 00:04:46,380
cryptographic operation in the online

127
00:04:42,720 --> 00:04:48,570
phase maroush I'll more precisely I

128
00:04:46,380 --> 00:04:50,400
showed the following for any layered

129
00:04:48,570 --> 00:04:53,159
boolean circuit so boolean secret is

130
00:04:50,400 --> 00:04:55,919
layered if you can partition it's not in

131
00:04:53,160 --> 00:04:58,590
layers so that any edge only goes from

132
00:04:55,920 --> 00:05:00,990
one layer to the next layer for any

133
00:04:58,590 --> 00:05:03,179
linear boolean circuit of size s there

134
00:05:00,990 --> 00:05:04,950
is a secure computational protocol with

135
00:05:03,180 --> 00:05:06,990
all the properties you can want like no

136
00:05:04,950 --> 00:05:08,610
Honus majority any number of parties

137
00:05:06,990 --> 00:05:11,400
adaptive security security against

138
00:05:08,610 --> 00:05:15,300
malicious adversaries that can sexually

139
00:05:11,400 --> 00:05:17,280
evaluate this circuit using total

140
00:05:15,300 --> 00:05:20,220
communication proportional to s of a

141
00:05:17,280 --> 00:05:21,000
log-log s arguably that's only slightly

142
00:05:20,220 --> 00:05:23,610
sublinear

143
00:05:21,000 --> 00:05:25,650
but the real take off of this result is

144
00:05:23,610 --> 00:05:29,240
that there is no circuit sized barrier

145
00:05:25,650 --> 00:05:31,739
it's possible to go below this barrier

146
00:05:29,240 --> 00:05:33,330
the this result can be extended to the

147
00:05:31,740 --> 00:05:35,100
interesting case of arithmetic circuits

148
00:05:33,330 --> 00:05:37,680
using kind of the same techniques but it

149
00:05:35,100 --> 00:05:39,870
requires a few additional IDs as well as

150
00:05:37,680 --> 00:05:40,560
the case of functioning independent

151
00:05:39,870 --> 00:05:44,340
pre-processing

152
00:05:40,560 --> 00:05:46,560
and it since if the consents are very

153
00:05:44,340 --> 00:05:48,479
small actually constant here is one up

154
00:05:46,560 --> 00:05:50,250
to low order terms it also actually

155
00:05:48,480 --> 00:05:51,600
leads to concrete efficiency improvement

156
00:05:50,250 --> 00:05:55,020
for some existing secure computation

157
00:05:51,600 --> 00:05:56,670
protocols and in this tol to simplify I

158
00:05:55,020 --> 00:05:59,520
will focus on the case of two parties

159
00:05:56,670 --> 00:06:01,050
and some Ahana security the extension to

160
00:05:59,520 --> 00:06:06,690
the MA general case is not that hard

161
00:06:01,050 --> 00:06:09,150
okay so how does that work our starting

162
00:06:06,690 --> 00:06:11,790
point is a well-known protocol for

163
00:06:09,150 --> 00:06:13,710
sharing true stable correlations these

164
00:06:11,790 --> 00:06:15,600
protocols allowed to securely evaluate

165
00:06:13,710 --> 00:06:16,770
any function in the quality run on this

166
00:06:15,600 --> 00:06:20,070
model with information theoretic

167
00:06:16,770 --> 00:06:22,140
security when the function is were

168
00:06:20,070 --> 00:06:24,090
presented by its truth table so we take

169
00:06:22,140 --> 00:06:26,610
some function f and I will represent the

170
00:06:24,090 --> 00:06:27,900
function f by its true stable M so the

171
00:06:26,610 --> 00:06:30,810
function evaluated at all possible

172
00:06:27,900 --> 00:06:34,229
points and our trusted dealer will first

173
00:06:30,810 --> 00:06:37,410
pick a random shift our and he will

174
00:06:34,230 --> 00:06:39,660
shift the truth table our by this offset

175
00:06:37,410 --> 00:06:41,490
as a trustable M sorry by this offset

176
00:06:39,660 --> 00:06:45,479
and at the same time our trust

177
00:06:41,490 --> 00:06:48,000
we'll share this offset our into pots

178
00:06:45,479 --> 00:06:52,650
here the addition will denote a bitwise

179
00:06:48,000 --> 00:06:54,840
operation so midwives XOR so we have the

180
00:06:52,650 --> 00:06:57,030
shift adjustable M Prime and then the

181
00:06:54,840 --> 00:07:00,630
trusted leader will additionally share

182
00:06:57,030 --> 00:07:04,020
this shifted choice table into pots M

183
00:07:00,630 --> 00:07:07,500
prime 0 and M frame 1 and then each of

184
00:07:04,020 --> 00:07:10,109
the parties will receive a share of the

185
00:07:07,500 --> 00:07:14,940
offset and a share of the shifted truth

186
00:07:10,110 --> 00:07:17,729
table now using this process correlative

187
00:07:14,940 --> 00:07:19,139
done on coins sexual evaluating the

188
00:07:17,729 --> 00:07:21,949
function f turns out to be extremely

189
00:07:19,139 --> 00:07:24,780
easy because the bodies can simply

190
00:07:21,949 --> 00:07:28,259
exchange their inputs x0 and x1

191
00:07:24,780 --> 00:07:31,169
masked by their share of the offset R so

192
00:07:28,259 --> 00:07:35,190
you 0 and you want from shares now of X

193
00:07:31,169 --> 00:07:37,409
plus R so by simply now doing a lookup

194
00:07:35,190 --> 00:07:40,259
search in the in their share of the

195
00:07:37,409 --> 00:07:42,990
trust of the truth table they will

196
00:07:40,259 --> 00:07:47,490
recover what you can easily check to be

197
00:07:42,990 --> 00:07:49,440
additive shares of f of X so this means

198
00:07:47,490 --> 00:07:51,990
that to securely evaluate the function f

199
00:07:49,440 --> 00:07:54,780
the part is only hard to exchange your

200
00:07:51,990 --> 00:07:59,789
mask input so the protocol as optimal

201
00:07:54,780 --> 00:08:01,198
communication to M however the storage

202
00:07:59,789 --> 00:08:03,030
requirement to securely evaluate this

203
00:08:01,199 --> 00:08:04,199
function is proportional to the size of

204
00:08:03,030 --> 00:08:05,940
the truth table representing the

205
00:08:04,199 --> 00:08:09,389
function so it's exponentially in the

206
00:08:05,940 --> 00:08:12,630
input size and that's quite bad so the

207
00:08:09,389 --> 00:08:14,009
natural ID if we want to get sibling our

208
00:08:12,630 --> 00:08:15,659
communication in the quality run on this

209
00:08:14,009 --> 00:08:18,330
model is to start from this protocol and

210
00:08:15,659 --> 00:08:20,159
ask whether it's possible to make this

211
00:08:18,330 --> 00:08:22,979
storage polynomial instead of

212
00:08:20,159 --> 00:08:26,130
exponential turns out that it's unlikely

213
00:08:22,979 --> 00:08:28,289
to be easy because it was proven in 2013

214
00:08:26,130 --> 00:08:30,509
that if we could achieve a polymer

215
00:08:28,289 --> 00:08:32,578
storage for securely evaluating any

216
00:08:30,509 --> 00:08:35,640
function then that would imply a

217
00:08:32,578 --> 00:08:37,199
breakthrough results for someone's long

218
00:08:35,640 --> 00:08:38,939
standing open problem related to the

219
00:08:37,200 --> 00:08:41,640
study of information theoretic private

220
00:08:38,940 --> 00:08:43,079
information retrieval so I'm not trying

221
00:08:41,640 --> 00:08:45,750
to do any breakthrough result here

222
00:08:43,078 --> 00:08:47,370
instead let's try to work around this

223
00:08:45,750 --> 00:08:50,760
issue by doing something extremely

224
00:08:47,370 --> 00:08:53,070
simple and extremely simple thing will

225
00:08:50,760 --> 00:08:56,209
be just a simple modification of this

226
00:08:53,070 --> 00:08:58,949
truth table correlation for

227
00:08:56,209 --> 00:09:01,109
the kalamata i'm going to prove in which

228
00:08:58,949 --> 00:09:03,719
is a very very simple lemma is the

229
00:09:01,110 --> 00:09:05,279
following take any C local function

230
00:09:03,720 --> 00:09:08,160
what's a silikal function is a function

231
00:09:05,279 --> 00:09:10,499
such that any output beat depends on at

232
00:09:08,160 --> 00:09:13,139
most C input bits so you can see that

233
00:09:10,499 --> 00:09:15,540
the function as being concatenation of

234
00:09:13,139 --> 00:09:18,029
functions F 1 to F M each of them being

235
00:09:15,540 --> 00:09:20,248
applied to a size C subsets of the input

236
00:09:18,029 --> 00:09:22,439
bits then there is a protocol that's

237
00:09:20,249 --> 00:09:24,300
actually evaluate and that ticularly

238
00:09:22,439 --> 00:09:25,800
allows to evaluate to obtain shares of

239
00:09:24,300 --> 00:09:27,930
the function with perfect security in

240
00:09:25,800 --> 00:09:29,939
the quality run on this model where the

241
00:09:27,930 --> 00:09:32,430
communication is again optimal Big O of

242
00:09:29,939 --> 00:09:34,709
n the input size but we're now the

243
00:09:32,430 --> 00:09:38,008
storage requirement is M times 2 to the

244
00:09:34,709 --> 00:09:39,869
C plus n compared to the previous

245
00:09:38,009 --> 00:09:43,019
protocol what we've done is just

246
00:09:39,870 --> 00:09:45,089
shifting the exponential cost of the

247
00:09:43,019 --> 00:09:50,009
storage requirement from the input size

248
00:09:45,089 --> 00:09:52,819
to the locality parameter so how do we

249
00:09:50,009 --> 00:09:55,319
do it it's pretty simple intuitively

250
00:09:52,819 --> 00:09:57,809
since the function only operates on

251
00:09:55,319 --> 00:09:59,370
subsets of size C of the inputs instead

252
00:09:57,809 --> 00:10:01,709
of looking at the big trustable of the

253
00:09:59,370 --> 00:10:04,290
entire function you can look at the list

254
00:10:01,709 --> 00:10:06,059
of tress tables for each of the output

255
00:10:04,290 --> 00:10:08,339
bits or the function for each of the

256
00:10:06,059 --> 00:10:10,350
partial functions because each of these

257
00:10:08,339 --> 00:10:12,990
partial functions here's a function on

258
00:10:10,350 --> 00:10:15,930
inputs of size C so each of these

259
00:10:12,990 --> 00:10:17,370
trustable only has size 2 to the C so

260
00:10:15,930 --> 00:10:18,870
what we can do is just apply the first

261
00:10:17,370 --> 00:10:22,769
protocol in parallel for each of the

262
00:10:18,870 --> 00:10:24,059
output bit and then the trace earlier

263
00:10:22,769 --> 00:10:26,670
will generate those shares and those

264
00:10:24,059 --> 00:10:29,550
shifts now we get a protocol where this

265
00:10:26,670 --> 00:10:31,889
storage is just n times 2 to the C up to

266
00:10:29,550 --> 00:10:34,109
some additive thing but now the

267
00:10:31,889 --> 00:10:35,730
communication has increased because for

268
00:10:34,110 --> 00:10:38,370
securely doing all those protocols in

269
00:10:35,730 --> 00:10:40,529
parallel within now to see bits of

270
00:10:38,370 --> 00:10:43,350
communication for each of the M output

271
00:10:40,529 --> 00:10:45,179
bits and this is to bigotry that's more

272
00:10:43,350 --> 00:10:48,300
than the big of M communication that I

273
00:10:45,179 --> 00:10:50,670
claimed that we could have so the next

274
00:10:48,300 --> 00:10:54,689
ID is that we can go back to this

275
00:10:50,670 --> 00:10:57,269
communication proportional to M by not

276
00:10:54,689 --> 00:11:00,870
using independent shifts for all those

277
00:10:57,269 --> 00:11:04,949
interests for all those M

278
00:11:00,870 --> 00:11:07,379
truth table instead the trusted dealer

279
00:11:04,949 --> 00:11:08,010
will only pick a single global offset

280
00:11:07,379 --> 00:11:11,820
our

281
00:11:08,010 --> 00:11:13,890
and those l12 RM will not be defined as

282
00:11:11,820 --> 00:11:16,920
independent offset but as appropriate

283
00:11:13,890 --> 00:11:19,319
subsets of the bits of this single

284
00:11:16,920 --> 00:11:21,540
global offsets where the subsets are the

285
00:11:19,320 --> 00:11:23,220
subset s 1 2 sm corresponding to the

286
00:11:21,540 --> 00:11:26,730
subset of the bits that you need to take

287
00:11:23,220 --> 00:11:28,890
to compute the function if you do so

288
00:11:26,730 --> 00:11:31,860
then the part is now only need to

289
00:11:28,890 --> 00:11:35,730
exchange X 0 plus R 0 and X 1 plus R 1

290
00:11:31,860 --> 00:11:37,680
and intuitively applying the EM

291
00:11:35,730 --> 00:11:39,660
protocols in parallel only requires to

292
00:11:37,680 --> 00:11:43,140
take some appropriate subset of the bits

293
00:11:39,660 --> 00:11:46,350
of those basked inputs and the security

294
00:11:43,140 --> 00:11:49,410
is easy to prove so we with this variant

295
00:11:46,350 --> 00:11:51,210
of the protocol we obtain essentially

296
00:11:49,410 --> 00:11:53,490
exactly the same communication as before

297
00:11:51,210 --> 00:11:55,620
but the correlative Rondon s now is a

298
00:11:53,490 --> 00:11:59,220
bit different and we can still prove the

299
00:11:55,620 --> 00:12:01,110
protocol to satisfy perfect security so

300
00:11:59,220 --> 00:12:03,150
this is what I call the Kalima as you

301
00:12:01,110 --> 00:12:05,430
could see a very simple lemma you can

302
00:12:03,150 --> 00:12:07,560
have optimal communication and a cost

303
00:12:05,430 --> 00:12:11,459
exponential in the locality locality

304
00:12:07,560 --> 00:12:13,520
parameter of the function let's see why

305
00:12:11,460 --> 00:12:17,220
this is useful for the question at hand

306
00:12:13,520 --> 00:12:18,930
so as I told you the result that would

307
00:12:17,220 --> 00:12:21,420
prove shows that we can securely compute

308
00:12:18,930 --> 00:12:23,579
with a sub linear communication any

309
00:12:21,420 --> 00:12:24,959
layered boolean circuit so let's look at

310
00:12:23,580 --> 00:12:26,880
the layer boolean circuit the knots can

311
00:12:24,960 --> 00:12:29,510
be partitioned in two layers the edges

312
00:12:26,880 --> 00:12:34,470
go from one layer to the next layer and

313
00:12:29,510 --> 00:12:37,050
we will partition these disfunction into

314
00:12:34,470 --> 00:12:42,240
chunks each chunk will contain K

315
00:12:37,050 --> 00:12:44,069
consecutive layers and we will look at

316
00:12:42,240 --> 00:12:46,650
like some selected node on the last

317
00:12:44,070 --> 00:12:48,510
layer of a chunk and C's is selected not

318
00:12:46,650 --> 00:12:51,510
like the value computed on this node as

319
00:12:48,510 --> 00:12:53,490
a function of the value computed on the

320
00:12:51,510 --> 00:12:55,830
last layer of the previous trunk

321
00:12:53,490 --> 00:12:57,650
together with the input nodes of the

322
00:12:55,830 --> 00:13:02,340
same track let's ignore them for now

323
00:12:57,650 --> 00:13:04,980
so intuitively the obvious observation

324
00:13:02,340 --> 00:13:07,950
here is that since graph representing

325
00:13:04,980 --> 00:13:10,950
the circuit as in degree two then the

326
00:13:07,950 --> 00:13:15,600
selected node can only have 2 to the K

327
00:13:10,950 --> 00:13:18,060
ancestors if you go K layers above so

328
00:13:15,600 --> 00:13:19,650
phrase in terms of locality the function

329
00:13:18,060 --> 00:13:21,880
that map's the values on the last layer

330
00:13:19,650 --> 00:13:25,060
of a chunk to the values on the

331
00:13:21,880 --> 00:13:29,590
flair of the next change is a 2 to the K

332
00:13:25,060 --> 00:13:34,290
local function with W inputs where W is

333
00:13:29,590 --> 00:13:37,900
the width of our of our boolean circuit

334
00:13:34,290 --> 00:13:41,650
so we have the local function we go back

335
00:13:37,900 --> 00:13:44,140
to our call Emma and so but using the

336
00:13:41,650 --> 00:13:45,670
Kalima directly since this fi is a 2 to

337
00:13:44,140 --> 00:13:49,000
the K local function we know that we can

338
00:13:45,670 --> 00:13:50,890
securely computers of F I given shares

339
00:13:49,000 --> 00:13:52,990
of the input with communication

340
00:13:50,890 --> 00:13:56,310
proportional to W this width parameter

341
00:13:52,990 --> 00:13:59,080
and storage which is only exponential in

342
00:13:56,310 --> 00:14:01,060
the locality parameter so the storage

343
00:13:59,080 --> 00:14:06,730
will be proportional to 2 to the 2 to

344
00:14:01,060 --> 00:14:11,170
the K what follows is quite easy we will

345
00:14:06,730 --> 00:14:14,710
divide the input we will let the parties

346
00:14:11,170 --> 00:14:16,870
share the input between them and then

347
00:14:14,710 --> 00:14:19,540
they will divide the function to

348
00:14:16,870 --> 00:14:22,000
evaluate into D over K chunks each

349
00:14:19,540 --> 00:14:24,880
string as I said containing K

350
00:14:22,000 --> 00:14:27,640
consecutive layers D is the depth of the

351
00:14:24,880 --> 00:14:33,870
function and we call its each of this

352
00:14:27,640 --> 00:14:33,870
function f 1 to F D over K for each

353
00:14:34,140 --> 00:14:38,680
lastly as for all the values of the last

354
00:14:36,700 --> 00:14:40,690
layer of the chunk the parties will use

355
00:14:38,680 --> 00:14:42,189
a protocol given by the Kalima to

356
00:14:40,690 --> 00:14:44,710
securely compute with optimal

357
00:14:42,190 --> 00:14:49,090
communication shares of the value on the

358
00:14:44,710 --> 00:14:51,130
last layer of the next chunk that means

359
00:14:49,090 --> 00:14:54,580
that we obtain our protocol whose total

360
00:14:51,130 --> 00:14:57,790
communication is the width times D over

361
00:14:54,580 --> 00:14:59,290
K so if you adjust things right W times

362
00:14:57,790 --> 00:15:01,480
D that will just be your circuit size

363
00:14:59,290 --> 00:15:04,270
I'm assuming here for simplicity that

364
00:15:01,480 --> 00:15:06,220
the circuit will do live if is a

365
00:15:04,270 --> 00:15:07,870
rectangle but you don't need any such

366
00:15:06,220 --> 00:15:10,960
structural requirement you will end up

367
00:15:07,870 --> 00:15:12,820
for arbitrary shape of the circuit with

368
00:15:10,960 --> 00:15:16,510
a protocol whose total communication is

369
00:15:12,820 --> 00:15:18,280
s over K in the storage requirement of

370
00:15:16,510 --> 00:15:20,560
the protocol now is W times 2 to the 2

371
00:15:18,280 --> 00:15:22,540
to the K multiplied by T over K which is

372
00:15:20,560 --> 00:15:26,020
just essentially s times 2 to the 2 to

373
00:15:22,540 --> 00:15:28,660
the K divided by K and as you can guess

374
00:15:26,020 --> 00:15:31,870
you obtain the claim result by setting K

375
00:15:28,660 --> 00:15:33,579
to be log log s so that shows that you

376
00:15:31,870 --> 00:15:35,950
can securely evaluate any layered

377
00:15:33,580 --> 00:15:37,960
boolean circuit with

378
00:15:35,950 --> 00:15:39,880
polynomial amount of storage and total

379
00:15:37,960 --> 00:15:43,420
communication proportional to s of a log

380
00:15:39,880 --> 00:15:45,010
log s this can be extended to militia

381
00:15:43,420 --> 00:15:47,260
security that's quite simple you can

382
00:15:45,010 --> 00:15:49,300
also extend it to the arithmetic circuit

383
00:15:47,260 --> 00:15:50,680
here you cannot use true stable

384
00:15:49,300 --> 00:15:52,810
correlations anymore because a true

385
00:15:50,680 --> 00:15:55,270
stable for analytic function over an

386
00:15:52,810 --> 00:15:57,959
exponentially large field will be way

387
00:15:55,270 --> 00:16:01,150
too big but if you replay represent

388
00:15:57,960 --> 00:16:03,370
instead the chunks of your function by

389
00:16:01,150 --> 00:16:05,140
motivate polynomials you can essentially

390
00:16:03,370 --> 00:16:07,900
derive the same kind of approach and

391
00:16:05,140 --> 00:16:09,490
obtain a similar results communication s

392
00:16:07,900 --> 00:16:12,790
of a log log s number of group elements

393
00:16:09,490 --> 00:16:15,130
or field elements there are some open

394
00:16:12,790 --> 00:16:17,560
questions of course that is that comes

395
00:16:15,130 --> 00:16:20,080
from this work first nowhere is a real

396
00:16:17,560 --> 00:16:23,079
buyer so we've achieved s of a log log s

397
00:16:20,080 --> 00:16:24,580
that will be not very satisfying if s of

398
00:16:23,080 --> 00:16:27,010
a log log s was a real communication

399
00:16:24,580 --> 00:16:29,680
barriers that we cannot hope to break so

400
00:16:27,010 --> 00:16:31,780
where is the real barrier is it possible

401
00:16:29,680 --> 00:16:33,579
to get sub linear communication and

402
00:16:31,780 --> 00:16:36,010
still linear computation because the

403
00:16:33,580 --> 00:16:37,930
protocol I gave here has a computation

404
00:16:36,010 --> 00:16:39,550
which is quadratic in the size of the

405
00:16:37,930 --> 00:16:40,839
circuit and it can be reduced to

406
00:16:39,550 --> 00:16:43,569
slightly simple linear in the size of

407
00:16:40,840 --> 00:16:45,190
the circuit but linear is not something

408
00:16:43,570 --> 00:16:46,420
we can achieve here so can we achieve

409
00:16:45,190 --> 00:16:49,060
linear computation sub linear

410
00:16:46,420 --> 00:16:50,740
communication and is it possible to

411
00:16:49,060 --> 00:16:53,699
remove this layered circuit requirement

412
00:16:50,740 --> 00:16:56,440
and extend the result to all circuit and

413
00:16:53,700 --> 00:17:00,690
that's all thank you for your attention

414
00:16:56,440 --> 00:17:03,999
[Applause]

415
00:17:00,690 --> 00:17:03,999
[Music]

