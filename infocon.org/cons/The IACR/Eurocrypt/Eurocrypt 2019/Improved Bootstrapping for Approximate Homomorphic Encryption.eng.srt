1
00:00:00,469 --> 00:00:07,400
so thank you very much for the

2
00:00:02,520 --> 00:00:09,840
introduction can you hear me yes okay so

3
00:00:07,400 --> 00:00:11,340
I'm gonna start the presentation with a

4
00:00:09,840 --> 00:00:14,340
quick introduction on a morphic

5
00:00:11,340 --> 00:00:16,800
encryption i will also present of course

6
00:00:14,340 --> 00:00:19,710
the scheme here we improve Danny's

7
00:00:16,800 --> 00:00:21,210
bootstrapping and I will show you the

8
00:00:19,710 --> 00:00:24,029
improvement we did and I will try to

9
00:00:21,210 --> 00:00:27,840
finish with implementation results and

10
00:00:24,029 --> 00:00:29,550
open open and future works so since

11
00:00:27,840 --> 00:00:31,679
we're talking about American Krypton

12
00:00:29,550 --> 00:00:33,719
what is a morphic encryption so it's a

13
00:00:31,679 --> 00:00:36,719
family of encryption scheme that allows

14
00:00:33,719 --> 00:00:38,940
us to perform computation on encrypted

15
00:00:36,719 --> 00:00:42,510
messages without the needing to the

16
00:00:38,940 --> 00:00:44,699
crypto to know any any secret so in the

17
00:00:42,510 --> 00:00:49,170
general case imagine that we have two

18
00:00:44,700 --> 00:00:51,480
messages encrypted and in this slide the

19
00:00:49,170 --> 00:00:54,180
encryption is represented by the green

20
00:00:51,480 --> 00:00:56,550
box what we would like to do is to add

21
00:00:54,180 --> 00:00:58,980
those two ciphertext amorphic Ali or

22
00:00:56,550 --> 00:01:01,349
multiplied them automatically and we

23
00:00:58,980 --> 00:01:04,080
would like to retrieve as a result the

24
00:01:01,350 --> 00:01:06,540
sum a ciphertext encrypting the addition

25
00:01:04,080 --> 00:01:09,179
of the original messages or their

26
00:01:06,540 --> 00:01:11,340
multiplication am amorphic encryption is

27
00:01:09,180 --> 00:01:13,920
very interesting mainly because of the

28
00:01:11,340 --> 00:01:17,460
large amount of application in you can

29
00:01:13,920 --> 00:01:21,330
solve we can think about electronic

30
00:01:17,460 --> 00:01:24,740
voting or any kind of operation on

31
00:01:21,330 --> 00:01:30,179
sensitive data such as medical data

32
00:01:24,740 --> 00:01:35,339
genomic data financial data etc so OMA

33
00:01:30,180 --> 00:01:37,350
morphix ciphertext have contain some

34
00:01:35,340 --> 00:01:39,900
noise that at the beginning is very

35
00:01:37,350 --> 00:01:41,820
small when we encrypt them the problem

36
00:01:39,900 --> 00:01:43,710
is that every time we perform a

37
00:01:41,820 --> 00:01:46,829
computation which is an addition or

38
00:01:43,710 --> 00:01:49,740
mainly multiplications this noise starts

39
00:01:46,829 --> 00:01:52,380
growing and if we reach a certain amount

40
00:01:49,740 --> 00:01:54,449
after a certain number of operation if

41
00:01:52,380 --> 00:01:56,460
we don't control this noise the cipher

42
00:01:54,450 --> 00:01:59,579
text will not decrypt in a correct way

43
00:01:56,460 --> 00:02:01,798
so in this case we have a limit on the

44
00:01:59,579 --> 00:02:03,600
number of operation we can perform and

45
00:02:01,799 --> 00:02:06,329
we talk about level homomorphic

46
00:02:03,600 --> 00:02:08,190
encryption so this limit will be imposed

47
00:02:06,329 --> 00:02:11,008
by the parameter by the parameters of

48
00:02:08,190 --> 00:02:13,890
the schema and in case we would like to

49
00:02:11,008 --> 00:02:16,589
evaluate larger computations we

50
00:02:13,890 --> 00:02:19,380
just need to increase the parameters so

51
00:02:16,590 --> 00:02:22,110
this noise problem was solved in 2009 by

52
00:02:19,380 --> 00:02:24,840
Craig entry that proposed that technique

53
00:02:22,110 --> 00:02:27,990
called bootstrapping which manages the

54
00:02:24,840 --> 00:02:30,360
noise growth by evaluating or morally

55
00:02:27,990 --> 00:02:31,890
evaluating the decryption circuit so

56
00:02:30,360 --> 00:02:34,650
thanks to the text this technique we

57
00:02:31,890 --> 00:02:37,260
were able to have a fully automatic

58
00:02:34,650 --> 00:02:40,590
encryption so to potentially evaluate

59
00:02:37,260 --> 00:02:42,660
any possible function but the problem of

60
00:02:40,590 --> 00:02:44,819
bootstrapping is that is a very

61
00:02:42,660 --> 00:02:48,660
expensive operation so the work that

62
00:02:44,819 --> 00:02:51,179
followed the one by gantry try to of

63
00:02:48,660 --> 00:02:53,190
course propose new schemes but also to

64
00:02:51,180 --> 00:02:57,000
improve this bootstrapping technique and

65
00:02:53,190 --> 00:02:57,620
the work we we do is going to do the

66
00:02:57,000 --> 00:03:01,350
same

67
00:02:57,620 --> 00:03:04,590
so we have the scheme I I will talk

68
00:03:01,350 --> 00:03:07,109
about here is a lwe based him these are

69
00:03:04,590 --> 00:03:08,610
some of the lwe based scheme that we

70
00:03:07,110 --> 00:03:12,690
have in literature all of them have

71
00:03:08,610 --> 00:03:14,880
multiple variants and he and many of

72
00:03:12,690 --> 00:03:17,280
them have also an implementation that

73
00:03:14,880 --> 00:03:20,340
comes with and the schema he Anna which

74
00:03:17,280 --> 00:03:23,100
is the last one in the list is one of

75
00:03:20,340 --> 00:03:28,380
the newest scheme proposed so it was

76
00:03:23,100 --> 00:03:31,140
proposed in 2017 by China at all and in

77
00:03:28,380 --> 00:03:33,660
2018 a was improved by with the

78
00:03:31,140 --> 00:03:35,850
bootstrapping so it's also implemented

79
00:03:33,660 --> 00:03:38,790
and the implementation is in open source

80
00:03:35,850 --> 00:03:41,459
on github so what we did in this paper

81
00:03:38,790 --> 00:03:44,670
was to study in detail the schema here

82
00:03:41,459 --> 00:03:47,010
he's bootstrapping of course and to

83
00:03:44,670 --> 00:03:48,720
improve the bootstrapping and the

84
00:03:47,010 --> 00:03:50,280
technique we used to improve the

85
00:03:48,720 --> 00:03:55,010
bootstrapping could be also used to

86
00:03:50,280 --> 00:03:58,470
improve other amorphic computations so

87
00:03:55,010 --> 00:04:00,870
here is a shortcut for a morphic

88
00:03:58,470 --> 00:04:03,720
encryption for arithmetic of approximate

89
00:04:00,870 --> 00:04:06,390
numbers so as I said in the OMA morphix

90
00:04:03,720 --> 00:04:09,269
ciphertext we have some noise which is

91
00:04:06,390 --> 00:04:11,730
contained and in the case of young the

92
00:04:09,269 --> 00:04:13,859
noise is considered as a part of the

93
00:04:11,730 --> 00:04:16,680
error that is generated during the OMA

94
00:04:13,859 --> 00:04:18,299
morphic computations so the scheme is

95
00:04:16,680 --> 00:04:20,280
proposing the beginning as a level

96
00:04:18,298 --> 00:04:24,359
scheme so it can support a certain

97
00:04:20,279 --> 00:04:27,030
amount of multiplications the ciphertext

98
00:04:24,360 --> 00:04:27,870
at level L is expressed with respect to

99
00:04:27,030 --> 00:04:30,119
of size

100
00:04:27,870 --> 00:04:31,680
Tech's modulus QL and the message

101
00:04:30,120 --> 00:04:34,740
encrypt that is very small with respect

102
00:04:31,680 --> 00:04:36,660
to these modules and what is important

103
00:04:34,740 --> 00:04:39,600
to know is that the decryption is just

104
00:04:36,660 --> 00:04:42,479
an inner product between the ciphertext

105
00:04:39,600 --> 00:04:46,110
the secret and the secret key then

106
00:04:42,479 --> 00:04:48,180
reduce modulus this ciphertext modulo so

107
00:04:46,110 --> 00:04:51,090
the result of this decryption will be

108
00:04:48,180 --> 00:04:53,389
the message plus the error but since in

109
00:04:51,090 --> 00:04:56,070
hand the error is part of the

110
00:04:53,389 --> 00:04:59,910
computational error we can say that it's

111
00:04:56,070 --> 00:05:02,010
just an approximation of the message so

112
00:04:59,910 --> 00:05:04,590
the scheme is leveled as I said so we

113
00:05:02,010 --> 00:05:06,289
can perform a search just a certain

114
00:05:04,590 --> 00:05:09,299
amount of multiplication because each

115
00:05:06,289 --> 00:05:13,349
multiplication consumes a level so after

116
00:05:09,300 --> 00:05:16,650
L levels we have to stop the schemes

117
00:05:13,350 --> 00:05:19,560
encode the complex rounded plaintext and

118
00:05:16,650 --> 00:05:22,620
in particularly can support like many

119
00:05:19,560 --> 00:05:24,990
other of morphic schemes a packing

120
00:05:22,620 --> 00:05:27,180
technique so to pack together multiple

121
00:05:24,990 --> 00:05:30,180
of these messages and to perform a

122
00:05:27,180 --> 00:05:32,280
budget computations so I will call the

123
00:05:30,180 --> 00:05:34,050
polynomial representation the qf

124
00:05:32,280 --> 00:05:36,150
representation and the slot

125
00:05:34,050 --> 00:05:40,229
representation on the complex number the

126
00:05:36,150 --> 00:05:44,280
slot representation so as I said before

127
00:05:40,229 --> 00:05:46,860
the bootstrapping wants to refresh noisy

128
00:05:44,280 --> 00:05:48,840
ciphertext by evaluating the homomorphic

129
00:05:46,860 --> 00:05:51,919
or more freakily the decryption circuit

130
00:05:48,840 --> 00:05:54,150
in a no we will as well evaluate the

131
00:05:51,919 --> 00:05:56,490
homomorphic le the decryption circuit

132
00:05:54,150 --> 00:06:00,570
but the goal will not be to reduce the

133
00:05:56,490 --> 00:06:02,940
noise but just to have again new levels

134
00:06:00,570 --> 00:06:06,780
to perform a proper homomorphic

135
00:06:02,940 --> 00:06:09,270
computations so the amorphic decryption

136
00:06:06,780 --> 00:06:12,210
the amorphic circuit for him as I said

137
00:06:09,270 --> 00:06:14,940
just few minutes ago is a inner product

138
00:06:12,210 --> 00:06:17,370
between the ciphertext and the secret

139
00:06:14,940 --> 00:06:19,710
key reduce modulo Q so if we don't

140
00:06:17,370 --> 00:06:21,510
reduce modulo Q what we retrieve as a

141
00:06:19,710 --> 00:06:24,930
result of this inner product is an

142
00:06:21,510 --> 00:06:28,710
addition between the message and q

143
00:06:24,930 --> 00:06:31,050
multiplied by a factor a so the idea of

144
00:06:28,710 --> 00:06:34,080
the bootstrapping is the following one

145
00:06:31,050 --> 00:06:38,250
let's try to see the ciphertext on a

146
00:06:34,080 --> 00:06:41,810
larger modulus big Q so the decryption

147
00:06:38,250 --> 00:06:44,000
will just consist in a modular reduction

148
00:06:41,810 --> 00:06:48,620
in order to obtain again an encryption

149
00:06:44,000 --> 00:06:51,140
of the size of the message M so in order

150
00:06:48,620 --> 00:06:53,780
to evaluate the moderate reduction we we

151
00:06:51,140 --> 00:06:55,880
will evaluate a function that

152
00:06:53,780 --> 00:06:59,210
approximates this modular reduction and

153
00:06:55,880 --> 00:07:02,810
this function have to be close to the

154
00:06:59,210 --> 00:07:05,180
identity nearby 0 and Q periodic in

155
00:07:02,810 --> 00:07:07,280
order to approximate correctly so in the

156
00:07:05,180 --> 00:07:10,460
original paper the authors proposed to

157
00:07:07,280 --> 00:07:12,710
evaluate the scale design function which

158
00:07:10,460 --> 00:07:14,840
is represented by this figure in my

159
00:07:12,710 --> 00:07:17,539
slide that I take from the that I took

160
00:07:14,840 --> 00:07:21,380
from the from their bootstrapping paper

161
00:07:17,540 --> 00:07:26,020
and the function the formula is on the

162
00:07:21,380 --> 00:07:27,260
bottom ok so just to summarize the

163
00:07:26,020 --> 00:07:31,060
bootstrapping

164
00:07:27,260 --> 00:07:34,760
steps we start from a low level

165
00:07:31,060 --> 00:07:37,910
ciphertext encrypting the message M as I

166
00:07:34,760 --> 00:07:40,730
say we will go up to a larger level that

167
00:07:37,910 --> 00:07:43,220
I will call QL from now on on this

168
00:07:40,730 --> 00:07:45,080
higher level the same ciphertext will

169
00:07:43,220 --> 00:07:48,740
encrypt not only the message but the

170
00:07:45,080 --> 00:07:51,830
message plus Q times E and we would like

171
00:07:48,740 --> 00:07:53,660
to evaluate in the modular reduction so

172
00:07:51,830 --> 00:07:56,750
since the ciphertext encode multiple

173
00:07:53,660 --> 00:07:59,900
message packs multiple messages together

174
00:07:56,750 --> 00:08:04,910
we will start by evaluating our quest

175
00:07:59,900 --> 00:08:06,530
with lot operation which goes from the

176
00:08:04,910 --> 00:08:07,610
coefficients of from the polynomial

177
00:08:06,530 --> 00:08:10,099
representation to the slot

178
00:08:07,610 --> 00:08:13,460
representation we will then evaluate the

179
00:08:10,100 --> 00:08:16,190
sine function which is an approximation

180
00:08:13,460 --> 00:08:18,620
of the modular reduction and then we

181
00:08:16,190 --> 00:08:20,900
will finish by coming back to this to

182
00:08:18,620 --> 00:08:22,700
the coefficient representation so the

183
00:08:20,900 --> 00:08:26,299
idea is that if we choose the parameters

184
00:08:22,700 --> 00:08:29,180
in a proper way the arriving level Q

185
00:08:26,300 --> 00:08:31,970
little L will be larger than the

186
00:08:29,180 --> 00:08:35,990
original little Q so this will allow us

187
00:08:31,970 --> 00:08:41,270
to have more levels left to perform a

188
00:08:35,990 --> 00:08:43,430
proper amorphic computations ok so how

189
00:08:41,270 --> 00:08:45,560
does it work the design evaluation in

190
00:08:43,429 --> 00:08:48,079
the original paper so what they do is

191
00:08:45,560 --> 00:08:52,040
they perform it in perform it in two

192
00:08:48,080 --> 00:08:54,260
steps they start by evaluating the scale

193
00:08:52,040 --> 00:08:56,180
the exponential function and then

194
00:08:54,260 --> 00:08:59,180
retrieve the sine function by just

195
00:08:56,180 --> 00:09:02,030
extracting the imaginary part so in

196
00:08:59,180 --> 00:09:02,239
order to perform this in an efficient

197
00:09:02,030 --> 00:09:04,640
way

198
00:09:02,240 --> 00:09:07,880
in particular the exponential evaluation

199
00:09:04,640 --> 00:09:09,800
they do it in two steps they start by

200
00:09:07,880 --> 00:09:13,220
evaluating a lot degree Taylor

201
00:09:09,800 --> 00:09:16,250
polynomial of degree a lot degree D zero

202
00:09:13,220 --> 00:09:18,710
that approximates the exponential I in a

203
00:09:16,250 --> 00:09:21,710
precise way on a very small range and

204
00:09:18,710 --> 00:09:24,470
then they obtain the the desired

205
00:09:21,710 --> 00:09:27,440
precision on the larger range by doing

206
00:09:24,470 --> 00:09:29,180
repeated squaring so the total pulling

207
00:09:27,440 --> 00:09:31,640
the total degree of the polynomial they

208
00:09:29,180 --> 00:09:35,060
evaluate is the product between the 0

209
00:09:31,640 --> 00:09:38,930
and 2 to the power of R which is in

210
00:09:35,060 --> 00:09:41,119
their case about 1000 so in a work we

211
00:09:38,930 --> 00:09:43,069
decided to take a different approach

212
00:09:41,120 --> 00:09:45,290
instead of passing through the

213
00:09:43,070 --> 00:09:48,350
exponential we go straight on the sign

214
00:09:45,290 --> 00:09:50,150
evaluation and we approximate the sign

215
00:09:48,350 --> 00:09:52,580
evaluation by using the chebyshev

216
00:09:50,150 --> 00:09:54,079
interpolant so the temperature of

217
00:09:52,580 --> 00:09:57,080
interpolant is represented by the

218
00:09:54,080 --> 00:09:59,120
formula in the slide and it's just a

219
00:09:57,080 --> 00:10:03,140
linear combination of chebyshev

220
00:09:59,120 --> 00:10:03,860
polynomials which are which are

221
00:10:03,140 --> 00:10:06,590
recursively

222
00:10:03,860 --> 00:10:09,610
computed polynomials on the ciphertext

223
00:10:06,590 --> 00:10:12,850
and they are multiplied by those

224
00:10:09,610 --> 00:10:15,770
coefficients which can be pre computed

225
00:10:12,850 --> 00:10:19,730
so why using chebyshev instead of the

226
00:10:15,770 --> 00:10:22,850
previous technique mainly because we can

227
00:10:19,730 --> 00:10:26,660
have a better precision by consuming

228
00:10:22,850 --> 00:10:28,700
less levels so to give you practical

229
00:10:26,660 --> 00:10:31,640
numbers if in hand they needed a

230
00:10:28,700 --> 00:10:33,200
polynomial of degree about 1000 in our

231
00:10:31,640 --> 00:10:37,870
case we need a polynomial of degree

232
00:10:33,200 --> 00:10:41,020
about 100 and in order to be able to

233
00:10:37,870 --> 00:10:44,450
evaluate this chebyshev interpolant

234
00:10:41,020 --> 00:10:46,689
efficiently we decided to use a modified

235
00:10:44,450 --> 00:10:49,280
version of the patrician stockmeyer

236
00:10:46,690 --> 00:10:51,470
algorithm mix together with the

237
00:10:49,280 --> 00:10:54,829
baby-step giant step technique that

238
00:10:51,470 --> 00:10:57,800
needs to be adapted for the chebyshev

239
00:10:54,830 --> 00:11:00,080
setting so we are able to evaluate this

240
00:10:57,800 --> 00:11:02,240
polynomial in about square root of the

241
00:11:00,080 --> 00:11:04,300
non trivial multiplication between

242
00:11:02,240 --> 00:11:07,110
ciphertext

243
00:11:04,300 --> 00:11:09,540
so the second improvement

244
00:11:07,110 --> 00:11:12,180
we have is in the linear transforms so

245
00:11:09,540 --> 00:11:14,819
twelve to slot ins lot ofa are linear

246
00:11:12,180 --> 00:11:17,370
transforms and they are performed on

247
00:11:14,820 --> 00:11:19,110
every bootstrapping and they are the

248
00:11:17,370 --> 00:11:22,290
most costly part of the entire

249
00:11:19,110 --> 00:11:27,240
evaluation so we observe that the linear

250
00:11:22,290 --> 00:11:29,519
transforms can be computed as with FFT

251
00:11:27,240 --> 00:11:32,339
looking like algorithms which are

252
00:11:29,519 --> 00:11:34,500
composed by multiple levels and in every

253
00:11:32,339 --> 00:11:38,310
level we have a certain number of

254
00:11:34,500 --> 00:11:40,649
rotation and scalar multiplication so

255
00:11:38,310 --> 00:11:43,079
each level in practice is evaluating all

256
00:11:40,649 --> 00:11:46,829
together budge together multiple blood

257
00:11:43,079 --> 00:11:50,660
butterfly operations so in in the slide

258
00:11:46,829 --> 00:11:52,500
as you can see in the blue box I

259
00:11:50,660 --> 00:11:56,430
represented this linear transformation

260
00:11:52,500 --> 00:11:58,680
so we have K levels and in every level

261
00:11:56,430 --> 00:12:00,660
we have two rotations our rotation on

262
00:11:58,680 --> 00:12:03,089
the left our rotation on the right and

263
00:12:00,660 --> 00:12:08,339
three scalar multiplications of the

264
00:12:03,089 --> 00:12:10,170
cipher text times AI bi CI so levels are

265
00:12:08,339 --> 00:12:12,360
very important in a morphic encryption

266
00:12:10,170 --> 00:12:14,370
so if we can consume last level it will

267
00:12:12,360 --> 00:12:16,529
be better because donald's levels will

268
00:12:14,370 --> 00:12:20,339
be used later on propeller amorphic

269
00:12:16,529 --> 00:12:24,600
operations so an easy idea to reduce

270
00:12:20,339 --> 00:12:26,850
this these levels is to collapse

271
00:12:24,600 --> 00:12:29,760
together some of those levels as

272
00:12:26,850 --> 00:12:33,570
instance in my example if I collapse

273
00:12:29,760 --> 00:12:38,189
together two levels into one so I will

274
00:12:33,570 --> 00:12:41,699
take VI plus 1 and VI I will Express VI

275
00:12:38,190 --> 00:12:44,820
plus 1 in terms of VI minus 1 so instead

276
00:12:41,699 --> 00:12:47,250
of having K levels I will have K over 2

277
00:12:44,820 --> 00:12:49,140
levels so the ALF but the problem is

278
00:12:47,250 --> 00:12:52,199
that the complexity starts increasing

279
00:12:49,140 --> 00:12:55,579
because instead of having four rotations

280
00:12:52,199 --> 00:12:58,680
I have now six and instead of having six

281
00:12:55,579 --> 00:13:01,529
multiplications I have now seven so of

282
00:12:58,680 --> 00:13:03,870
course there exists two extremes the all

283
00:13:01,529 --> 00:13:06,870
the levels are evaluated and the

284
00:13:03,870 --> 00:13:09,329
complexity is really really small or I

285
00:13:06,870 --> 00:13:11,399
reduce all the level collapsing them in

286
00:13:09,329 --> 00:13:14,670
a single one and the complexity will be

287
00:13:11,399 --> 00:13:17,690
very large so we try of course to find a

288
00:13:14,670 --> 00:13:20,880
trade-off in order to have a better

289
00:13:17,690 --> 00:13:22,920
evaluation and in order to do that

290
00:13:20,880 --> 00:13:25,820
decided to use some dynamic programming

291
00:13:22,920 --> 00:13:28,280
that altas decided the collapsing

292
00:13:25,820 --> 00:13:31,350
strategy and also the collapsing point

293
00:13:28,280 --> 00:13:34,439
so in the in the image I show in the

294
00:13:31,350 --> 00:13:37,710
slide you have M the original axis the

295
00:13:34,440 --> 00:13:39,810
consumed level that we decide to use in

296
00:13:37,710 --> 00:13:42,270
the vertical axis the corresponding

297
00:13:39,810 --> 00:13:44,219
complexity and you can see that if we

298
00:13:42,270 --> 00:13:46,439
decide to collapse everything on a

299
00:13:44,220 --> 00:13:49,680
single level the complexity will grow

300
00:13:46,440 --> 00:13:53,040
very fast and every time we decide to

301
00:13:49,680 --> 00:13:58,800
use to use one more level complexity is

302
00:13:53,040 --> 00:14:01,890
reduced okay so those are the

303
00:13:58,800 --> 00:14:04,530
improvements we try of course to

304
00:14:01,890 --> 00:14:06,840
implement all this stuff in order to see

305
00:14:04,530 --> 00:14:09,500
what was the practical impact of these

306
00:14:06,840 --> 00:14:14,730
improvements on the on the bootstrapping

307
00:14:09,500 --> 00:14:16,710
so we compare our results with two other

308
00:14:14,730 --> 00:14:19,290
results of course the original ham

309
00:14:16,710 --> 00:14:21,930
wouldst wrapping paper proposing 2018

310
00:14:19,290 --> 00:14:25,560
that I will call in the following hand

311
00:14:21,930 --> 00:14:27,900
boot and in the meantime this hand

312
00:14:25,560 --> 00:14:30,180
bootstrapping has been implementing

313
00:14:27,900 --> 00:14:32,340
proved by the by the authors in an

314
00:14:30,180 --> 00:14:34,500
implementation and I will call this

315
00:14:32,340 --> 00:14:38,130
improved implementation here and boot

316
00:14:34,500 --> 00:14:40,680
plus so we implemented our code on here

317
00:14:38,130 --> 00:14:44,310
on boot plus and we tested it on a

318
00:14:40,680 --> 00:14:48,000
common laptop so I will present you to

319
00:14:44,310 --> 00:14:51,359
implementation results on two different

320
00:14:48,000 --> 00:14:53,970
parameter sets the first one is this one

321
00:14:51,360 --> 00:14:56,490
on the higher part you can see there

322
00:14:53,970 --> 00:14:58,140
here and bootstrap original results and

323
00:14:56,490 --> 00:15:01,740
improve the results by the

324
00:14:58,140 --> 00:15:05,130
implementation and then our results so

325
00:15:01,740 --> 00:15:07,710
if you check the linear transform column

326
00:15:05,130 --> 00:15:10,590
you can see that in here we have a huge

327
00:15:07,710 --> 00:15:12,780
improvement in terms of timings and this

328
00:15:10,590 --> 00:15:17,520
improvement is even more evident when

329
00:15:12,780 --> 00:15:19,740
you go watching the amortized timing the

330
00:15:17,520 --> 00:15:21,960
amortized timing so amortized timing

331
00:15:19,740 --> 00:15:24,690
means the timing for the bootstrapping

332
00:15:21,960 --> 00:15:27,210
for a single slot remember that every

333
00:15:24,690 --> 00:15:30,420
cipher text encrypts multiple slots

334
00:15:27,210 --> 00:15:34,240
multiple messages so in here we can see

335
00:15:30,420 --> 00:15:36,779
that we have at least a factor 510

336
00:15:34,240 --> 00:15:40,529
of improvement compared to the original

337
00:15:36,779 --> 00:15:46,480
improved implementation and even better

338
00:15:40,529 --> 00:15:48,790
on a larger parameter set we can observe

339
00:15:46,480 --> 00:15:51,190
that the improvement on the amortize

340
00:15:48,790 --> 00:15:53,829
time in this case is even more

341
00:15:51,190 --> 00:15:56,260
impressive so of course we are using a

342
00:15:53,830 --> 00:15:59,290
larger amount of slots compared to the

343
00:15:56,260 --> 00:16:01,660
original here this is because thanks to

344
00:15:59,290 --> 00:16:04,870
the fact that we are using this fft like

345
00:16:01,660 --> 00:16:06,939
algorithms we are able to manage in a

346
00:16:04,870 --> 00:16:09,610
better way the complexity so we were

347
00:16:06,940 --> 00:16:14,950
able to go on more larger amount of

348
00:16:09,610 --> 00:16:17,290
slots okay I will conclude by

349
00:16:14,950 --> 00:16:20,380
summarizing what we saw in in this

350
00:16:17,290 --> 00:16:22,719
presentation so as I said we improved

351
00:16:20,380 --> 00:16:24,880
the helmet strapping in particular we

352
00:16:22,720 --> 00:16:28,149
improved two parts of the unbowed

353
00:16:24,880 --> 00:16:30,550
strapping the sign evaluation and also

354
00:16:28,149 --> 00:16:33,580
the linear transform so coefficient 2

355
00:16:30,550 --> 00:16:35,859
slot and slaughter curve and I show you

356
00:16:33,580 --> 00:16:40,390
some implementation results which proved

357
00:16:35,860 --> 00:16:42,820
that our improvements are concrete about

358
00:16:40,390 --> 00:16:45,610
future work as I said in the beginning

359
00:16:42,820 --> 00:16:48,040
the techniques we proposed are not used

360
00:16:45,610 --> 00:16:50,020
only to improve the bootstrapping but

361
00:16:48,040 --> 00:16:52,839
can be used to improve other amorphic

362
00:16:50,020 --> 00:16:54,880
operations in particular chebyshev

363
00:16:52,839 --> 00:16:58,089
interpolant could be used as instance to

364
00:16:54,880 --> 00:16:59,800
improve some functions such as the

365
00:16:58,089 --> 00:17:01,779
sigmoid function or the reuleaux

366
00:16:59,800 --> 00:17:05,470
functions which are largely used in

367
00:17:01,779 --> 00:17:07,569
machine learning over encrypted data the

368
00:17:05,470 --> 00:17:10,510
same improvements we proposed for the

369
00:17:07,569 --> 00:17:13,329
import for the linear transformer could

370
00:17:10,510 --> 00:17:15,550
be also used to improve the evaluation

371
00:17:13,329 --> 00:17:19,959
of the discrete Fourier transform on a

372
00:17:15,550 --> 00:17:22,448
morphic data and an open work which

373
00:17:19,959 --> 00:17:24,850
would be very interesting to check on is

374
00:17:22,449 --> 00:17:27,069
to try to implement this new

375
00:17:24,849 --> 00:17:30,490
bootstrapping improved bootstrapping on

376
00:17:27,069 --> 00:17:32,710
the new RNs version of ioan which has

377
00:17:30,490 --> 00:17:34,710
already proved to be more faster

378
00:17:32,710 --> 00:17:37,510
compared to the original implementation

379
00:17:34,710 --> 00:17:40,670
so I think this is all I wanted to say

380
00:17:37,510 --> 00:17:48,289
thank you very much for your attention

381
00:17:40,670 --> 00:17:48,289
[Applause]

382
00:17:49,210 --> 00:18:01,670
since Hilary will use the microphone

383
00:17:51,230 --> 00:18:04,480
then please walk to that mic I have two

384
00:18:01,670 --> 00:18:07,670
questions regarding the linear transform

385
00:18:04,480 --> 00:18:10,370
improvement the first question there was

386
00:18:07,670 --> 00:18:12,740
a paper published a little bit later in

387
00:18:10,370 --> 00:18:15,560
a print by the CEO national university

388
00:18:12,740 --> 00:18:18,650
proposing an fft like technique have you

389
00:18:15,560 --> 00:18:20,480
had a chance to examine both approaches

390
00:18:18,650 --> 00:18:24,320
yours and the one that was proposed in

391
00:18:20,480 --> 00:18:27,110
that paper the question I asked you from

392
00:18:24,320 --> 00:18:29,510
the middle of the question sure sure

393
00:18:27,110 --> 00:18:32,030
there was another paper published a

394
00:18:29,510 --> 00:18:34,070
little bit later in a print with an fft

395
00:18:32,030 --> 00:18:36,440
like technique and that was applied to

396
00:18:34,070 --> 00:18:38,870
hearing bootstrapping by the National

397
00:18:36,440 --> 00:18:41,870
University I'm wondering if you've had a

398
00:18:38,870 --> 00:18:43,219
chance to compare the two approaches the

399
00:18:41,870 --> 00:18:45,260
complaint the complexity of two

400
00:18:43,220 --> 00:18:49,820
approaches and are they very similar or

401
00:18:45,260 --> 00:18:52,190
you've seen some differences so then the

402
00:18:49,820 --> 00:18:55,730
paper was I think published on apron

403
00:18:52,190 --> 00:19:00,730
after our paper so we didn't have the

404
00:18:55,730 --> 00:19:03,770
chance to compare it in in our paper

405
00:19:00,730 --> 00:19:06,200
from what I remember they use a similar

406
00:19:03,770 --> 00:19:08,360
technique to improve the DFT I think

407
00:19:06,200 --> 00:19:12,080
their main goal was to improve the DFT

408
00:19:08,360 --> 00:19:17,990
so they didn't imply any of this

409
00:19:12,080 --> 00:19:20,810
technique on the bootstrapping what else

410
00:19:17,990 --> 00:19:23,680
the the idea of for improving the DFT is

411
00:19:20,810 --> 00:19:27,500
similar but I cannot tell you any

412
00:19:23,680 --> 00:19:29,330
precise and more precise information yes

413
00:19:27,500 --> 00:19:33,950
thank you and I have another question

414
00:19:29,330 --> 00:19:35,720
yes about the linear transform part it

415
00:19:33,950 --> 00:19:37,900
looks like the analysis that was

416
00:19:35,720 --> 00:19:40,640
conducted on the number of levels used

417
00:19:37,900 --> 00:19:43,340
assumes that all rotations will

418
00:19:40,640 --> 00:19:44,870
basically take the same time but there

419
00:19:43,340 --> 00:19:47,959
was a recent work in crypt

420
00:19:44,870 --> 00:19:49,760
18 by Shia Levin Victor Shoop showing

421
00:19:47,960 --> 00:19:52,790
that you can use hoisting and certain

422
00:19:49,760 --> 00:19:54,820
rotations can be done much faster did

423
00:19:52,790 --> 00:19:58,480
you consider that because it sounds

424
00:19:54,820 --> 00:20:00,789
the analysis of linear transfer effect

425
00:19:58,480 --> 00:20:04,059
like technique by slightly change and

426
00:20:00,789 --> 00:20:05,620
the choice of parameters if rotations

427
00:20:04,059 --> 00:20:14,350
are not treated equal in other words in

428
00:20:05,620 --> 00:20:19,000
terms of efficiency we can you repeat it

429
00:20:14,350 --> 00:20:21,279
again sorry yes in the analysis of

430
00:20:19,000 --> 00:20:24,820
linear transform versus the FFT

431
00:20:21,279 --> 00:20:27,220
technique I think your assumption was

432
00:20:24,820 --> 00:20:30,580
that all rotations take roughly at the

433
00:20:27,220 --> 00:20:32,620
same time but sometimes you can use the

434
00:20:30,580 --> 00:20:34,600
hoisting technique and have much faster

435
00:20:32,620 --> 00:20:37,658
rotations up to for instance one order

436
00:20:34,600 --> 00:20:39,668
of magnitude do you think that would I

437
00:20:37,659 --> 00:20:43,059
mean have you considered applying the

438
00:20:39,669 --> 00:20:44,980
hoisting technique for instance to to

439
00:20:43,059 --> 00:20:48,789
improve the linear transforms in your

440
00:20:44,980 --> 00:20:52,570
case we didn't consider it in the paper

441
00:20:48,789 --> 00:20:53,980
but I will surely take a look too I mean

442
00:20:52,570 --> 00:20:58,418
it's a very interesting question so I

443
00:20:53,980 --> 00:21:06,519
will I will check it after this talk in

444
00:20:58,419 --> 00:21:09,309
the following yeah thank you so you

445
00:21:06,519 --> 00:21:12,190
mentioned that using error RNs

446
00:21:09,309 --> 00:21:14,740
rescission armor system is a future work

447
00:21:12,190 --> 00:21:17,409
but on the implementation slide you said

448
00:21:14,740 --> 00:21:19,570
you're using numbers that are like

449
00:21:17,409 --> 00:21:23,169
thousand bits long so what are you using

450
00:21:19,570 --> 00:21:25,779
for the long integer arithmetic we're

451
00:21:23,169 --> 00:21:28,240
using the same thing that they used in

452
00:21:25,779 --> 00:21:31,480
the original in the original

453
00:21:28,240 --> 00:21:34,899
implementation so it's not very nice so

454
00:21:31,480 --> 00:21:38,470
what is it you know I think it's large

455
00:21:34,899 --> 00:21:43,830
numbers sorry

456
00:21:38,470 --> 00:21:43,830
oh and yes okay okay

457
00:21:49,030 --> 00:21:53,710
all right so if their animal questioned

458
00:21:50,929 --> 00:21:53,710
and that's thing

