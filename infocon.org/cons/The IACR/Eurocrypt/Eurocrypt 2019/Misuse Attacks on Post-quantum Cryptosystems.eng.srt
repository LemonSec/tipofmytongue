1
00:00:00,030 --> 00:00:07,020
q so let me start with some context so

2
00:00:05,430 --> 00:00:09,139
as you know quantum computers will be

3
00:00:07,020 --> 00:00:11,309
able to solve hard problems such as

4
00:00:09,139 --> 00:00:13,530
factorization and discrete logarithm

5
00:00:11,309 --> 00:00:16,198
this means that standard public-key

6
00:00:13,530 --> 00:00:19,380
cryptosystem will be broken and as a

7
00:00:16,199 --> 00:00:22,010
result the NIST the NIST agency in the

8
00:00:19,380 --> 00:00:24,750
u.s. launched the process to standardize

9
00:00:22,010 --> 00:00:27,000
one or several post quantum accurate

10
00:00:24,750 --> 00:00:31,170
encryption scheme and signature scheme

11
00:00:27,000 --> 00:00:33,719
as well so roughly 60 proposals were

12
00:00:31,170 --> 00:00:37,649
received at the first deadline in winter

13
00:00:33,719 --> 00:00:39,899
2017 and most of them we can sort them

14
00:00:37,649 --> 00:00:42,750
out in three categories that's it's

15
00:00:39,899 --> 00:00:44,670
based code based and multivariate based

16
00:00:42,750 --> 00:00:47,820
today we will focus mainly on the

17
00:00:44,670 --> 00:00:51,690
lattice based and in turn each of this

18
00:00:47,820 --> 00:00:54,510
proposal comes in two flavors in CP one

19
00:00:51,690 --> 00:00:57,329
and an NCC one which is usually the

20
00:00:54,510 --> 00:01:01,559
Fujisaki Okamoto transform of the NCP

21
00:00:57,329 --> 00:01:03,809
one now the thing is the in CP violent

22
00:01:01,559 --> 00:01:06,570
does not allow for key reuse that means

23
00:01:03,809 --> 00:01:09,539
that for each new message we must pick a

24
00:01:06,570 --> 00:01:11,908
new secret key but it's also a simpler

25
00:01:09,540 --> 00:01:14,010
and more efficient so we think people

26
00:01:11,909 --> 00:01:15,330
will try to use it and they won't

27
00:01:14,010 --> 00:01:17,850
necessarily pay attention to the

28
00:01:15,330 --> 00:01:21,658
technical details like not reusing the

29
00:01:17,850 --> 00:01:23,460
key and in addition if the Fujisaki

30
00:01:21,659 --> 00:01:26,640
Okamoto transform is badly implemented

31
00:01:23,460 --> 00:01:29,729
in the in CCA scheme then it can leak

32
00:01:26,640 --> 00:01:32,520
some information about the underlying in

33
00:01:29,729 --> 00:01:35,070
CPS scheme so the question is what

34
00:01:32,520 --> 00:01:37,890
happens if a key is reused after how

35
00:01:35,070 --> 00:01:40,889
many really uses can we recover the

36
00:01:37,890 --> 00:01:46,770
secret key or at least a large part of

37
00:01:40,890 --> 00:01:49,890
it so we noticed that most lattice base

38
00:01:46,770 --> 00:01:52,048
scheme share a similar structure so we

39
00:01:49,890 --> 00:01:53,640
design an abstraction of the structure

40
00:01:52,049 --> 00:01:57,149
that we call the math application

41
00:01:53,640 --> 00:01:59,670
framework so what see what is this

42
00:01:57,149 --> 00:02:00,540
framework it's we work with six additive

43
00:01:59,670 --> 00:02:04,619
abelian groups

44
00:02:00,540 --> 00:02:06,719
si es BSS KS TSU as V and for

45
00:02:04,619 --> 00:02:09,840
billionaire mappings that we denote with

46
00:02:06,719 --> 00:02:11,760
this cross here between some of these

47
00:02:09,840 --> 00:02:12,690
groups it can be polynomial

48
00:02:11,760 --> 00:02:14,310
multiplication

49
00:02:12,690 --> 00:02:18,150
my matrix

50
00:02:14,310 --> 00:02:20,190
multiplication for instance now the

51
00:02:18,150 --> 00:02:22,860
public key is a total of two values a

52
00:02:20,190 --> 00:02:25,650
and B will be being a times the secret

53
00:02:22,860 --> 00:02:29,580
key plus D where the secret key and D

54
00:02:25,650 --> 00:02:33,300
have picked randomly but small we'll see

55
00:02:29,580 --> 00:02:35,459
what what does it mean the encryption of

56
00:02:33,300 --> 00:02:38,280
the plaintext it followed this this

57
00:02:35,459 --> 00:02:41,190
complicated expression here it's not so

58
00:02:38,280 --> 00:02:44,400
important for us today but note that the

59
00:02:41,190 --> 00:02:48,930
the plaintext is encoded before an

60
00:02:44,400 --> 00:02:51,600
encryption and in the decryption process

61
00:02:48,930 --> 00:02:55,140
we received the true ciphertext U and V

62
00:02:51,600 --> 00:02:57,810
and first we compute V minus u times the

63
00:02:55,140 --> 00:03:00,268
secret key which is actually equals to

64
00:02:57,810 --> 00:03:03,000
the encoding of the plaintext plus some

65
00:03:00,269 --> 00:03:06,380
noise Delta and then we applied the

66
00:03:03,000 --> 00:03:09,660
decoding function on this on this value

67
00:03:06,380 --> 00:03:12,540
so it follows that the decryption is

68
00:03:09,660 --> 00:03:15,150
correct if and only if the the noise

69
00:03:12,540 --> 00:03:18,450
Delta is small so small means here that

70
00:03:15,150 --> 00:03:21,920
it's the the norm of Delta is small or

71
00:03:18,450 --> 00:03:28,018
equal than row or row some threshold and

72
00:03:21,920 --> 00:03:30,390
the norm can be a parameter so now let's

73
00:03:28,019 --> 00:03:32,730
consider the model we consider for our

74
00:03:30,390 --> 00:03:35,160
attacks so this is a real-life setting

75
00:03:32,730 --> 00:03:38,429
where our clients want to communicate

76
00:03:35,160 --> 00:03:40,680
securely with a server so if the client

77
00:03:38,430 --> 00:03:42,810
is honest he can recruit the request the

78
00:03:40,680 --> 00:03:45,959
public key from the server then he can

79
00:03:42,810 --> 00:03:48,660
generate some key material k he encrypt

80
00:03:45,959 --> 00:03:52,139
the leukemic material which result in

81
00:03:48,660 --> 00:03:54,090
two cipher text U and V and then he can

82
00:03:52,139 --> 00:03:55,980
send you and Vito to the server that the

83
00:03:54,090 --> 00:03:58,079
crips then after some steps and maybe

84
00:03:55,980 --> 00:04:01,850
they can derive some some symmetric key

85
00:03:58,079 --> 00:04:05,069
and they can establish a secure channel

86
00:04:01,850 --> 00:04:07,858
now if the user is if the client is

87
00:04:05,069 --> 00:04:10,920
malicious instead of sending U and V you

88
00:04:07,859 --> 00:04:14,280
can try to send u and V plus some value

89
00:04:10,920 --> 00:04:16,978
X to the server and after some stuff

90
00:04:14,280 --> 00:04:19,019
they will try to communicate but if the

91
00:04:16,978 --> 00:04:20,880
communication atom is not successful it

92
00:04:19,019 --> 00:04:24,060
means that the decryption on the server

93
00:04:20,880 --> 00:04:25,700
side didn't give the right result it

94
00:04:24,060 --> 00:04:30,050
didn't give the

95
00:04:25,700 --> 00:04:32,210
you didn't decrypt the key material k so

96
00:04:30,050 --> 00:04:36,110
that's what we call the plain text

97
00:04:32,210 --> 00:04:38,570
checking attack so more formally the

98
00:04:36,110 --> 00:04:42,020
server a decryption will compute decode

99
00:04:38,570 --> 00:04:46,010
of Delta plus the value X X plus the

100
00:04:42,020 --> 00:04:48,169
encoding of the key material and this

101
00:04:46,010 --> 00:04:51,530
means that if the communication attempt

102
00:04:48,170 --> 00:04:54,170
is successful it means that the norm of

103
00:04:51,530 --> 00:04:56,659
Delta plus X is smaller a colon row and

104
00:04:54,170 --> 00:05:00,620
otherwise it means that the norm of

105
00:04:56,660 --> 00:05:02,570
Delta plus X is bigger than row so for

106
00:05:00,620 --> 00:05:05,300
the adversary this is the same as having

107
00:05:02,570 --> 00:05:08,300
access to some Oracle which returns

108
00:05:05,300 --> 00:05:12,320
whether the norm of Delta plus X is

109
00:05:08,300 --> 00:05:13,970
smaller or equal than row or not from

110
00:05:12,320 --> 00:05:16,060
there we can define a learning game

111
00:05:13,970 --> 00:05:19,940
where the goal of the adversary is to

112
00:05:16,060 --> 00:05:27,110
find this noise Delta given the access

113
00:05:19,940 --> 00:05:29,330
to the Oracle of X now we design several

114
00:05:27,110 --> 00:05:32,300
learning algorithms for different norms

115
00:05:29,330 --> 00:05:34,849
like the hamming the Hamming weight the

116
00:05:32,300 --> 00:05:37,220
alien finiti norms hanwen norms for

117
00:05:34,850 --> 00:05:40,730
example where we assume we work in a Z Q

118
00:05:37,220 --> 00:05:43,940
to the N or some isomorphic groups can

119
00:05:40,730 --> 00:05:47,960
work for example with polynomials from a

120
00:05:43,940 --> 00:05:51,140
polynomial ring so here is a small

121
00:05:47,960 --> 00:05:56,270
example where we consider Delta in zq

122
00:05:51,140 --> 00:05:57,710
row equals q over 8 and a delta is in GQ

123
00:05:56,270 --> 00:06:01,310
but we consider the value between minus

124
00:05:57,710 --> 00:06:04,760
Q over 2 and Q over 2 and after some

125
00:06:01,310 --> 00:06:07,550
computation we find that if we query of

126
00:06:04,760 --> 00:06:09,920
minus X minus Rho and we obtain 1 this

127
00:06:07,550 --> 00:06:11,830
is actually equivalent as having Delta

128
00:06:09,920 --> 00:06:16,040
bigger I called a greater equal than X

129
00:06:11,830 --> 00:06:18,620
so by varying this value X we can design

130
00:06:16,040 --> 00:06:21,260
so you binary search or cut and shoot

131
00:06:18,620 --> 00:06:25,880
algorithm to find the noise Delta in at

132
00:06:21,260 --> 00:06:26,740
most log of row or record queries so we

133
00:06:25,880 --> 00:06:29,409
designed several

134
00:06:26,740 --> 00:06:32,300
algorithm and based on the same idea and

135
00:06:29,410 --> 00:06:34,310
for all the norms we considered all the

136
00:06:32,300 --> 00:06:39,160
schemes we considered we can recover

137
00:06:34,310 --> 00:06:39,160
Delta in at most o of n log Q queries

138
00:06:40,190 --> 00:06:47,610
now given the noise Delta how can we

139
00:06:42,990 --> 00:06:50,220
recover the secret key actually the the

140
00:06:47,610 --> 00:06:52,590
noise that depends on the secret key by

141
00:06:50,220 --> 00:06:56,520
this expression here where the only

142
00:06:52,590 --> 00:06:58,310
unknowns for for the adversary is the

143
00:06:56,520 --> 00:07:02,760
value of the secret key of course and

144
00:06:58,310 --> 00:07:05,250
the value D but we know we can replace D

145
00:07:02,760 --> 00:07:08,760
by using the second equation here V

146
00:07:05,250 --> 00:07:12,690
equals a time's the secret key plus D so

147
00:07:08,760 --> 00:07:16,920
this means that we can recover a system

148
00:07:12,690 --> 00:07:20,100
of in our equations in the secret key so

149
00:07:16,920 --> 00:07:21,870
we can learn Delta and if Delta is in Z

150
00:07:20,100 --> 00:07:25,170
Q to the power n V it means that we get

151
00:07:21,870 --> 00:07:27,060
n V equations in the secret key and we

152
00:07:25,170 --> 00:07:29,370
can repeat this process K times let's

153
00:07:27,060 --> 00:07:32,400
say until we have enough equations to

154
00:07:29,370 --> 00:07:38,670
solve for all the components of of the

155
00:07:32,400 --> 00:07:42,870
secret key so then we can solve this

156
00:07:38,670 --> 00:07:44,970
system here where we assume that we work

157
00:07:42,870 --> 00:07:46,980
in some algebra where we can solve this

158
00:07:44,970 --> 00:07:48,510
type of equation but it's always the

159
00:07:46,980 --> 00:07:53,910
case for the crypto systems we

160
00:07:48,510 --> 00:07:56,820
considered so this means that learning

161
00:07:53,910 --> 00:08:04,380
the noise Delta is sufficient to recover

162
00:07:56,820 --> 00:08:06,480
the key in this cube we see a model now

163
00:08:04,380 --> 00:08:10,920
let's consider some quantum key recovery

164
00:08:06,480 --> 00:08:13,140
so we wanted to see how how well the

165
00:08:10,920 --> 00:08:15,360
scheme's resisted to the power of

166
00:08:13,140 --> 00:08:19,729
quantum computation and not particularly

167
00:08:15,360 --> 00:08:19,730
about quantum chosen ciphertext attack

168
00:08:19,970 --> 00:08:24,630
so obviously post quantum crypto systems

169
00:08:23,130 --> 00:08:27,960
should resist the power of quantum

170
00:08:24,630 --> 00:08:30,150
computers so usually we consider this we

171
00:08:27,960 --> 00:08:32,970
consider this motor here where the

172
00:08:30,150 --> 00:08:34,770
adversary or the parties are quantum but

173
00:08:32,970 --> 00:08:38,490
the communication between the two is

174
00:08:34,770 --> 00:08:40,460
classical but now what about a fully

175
00:08:38,490 --> 00:08:42,479
quantum setting so in this setting

176
00:08:40,460 --> 00:08:47,580
everything is quantum in currently

177
00:08:42,479 --> 00:08:50,120
including the communication so that

178
00:08:47,580 --> 00:08:52,939
means that we can have for example

179
00:08:50,120 --> 00:08:58,339
send some superposition over at the

180
00:08:52,939 --> 00:09:01,219
channel so in this case in a quantum

181
00:08:58,339 --> 00:09:03,790
chosen ciphertext attack instead of

182
00:09:01,220 --> 00:09:05,360
requiring the ciphertext and getting one

183
00:09:03,790 --> 00:09:09,170
corresponding plaintext

184
00:09:05,360 --> 00:09:11,329
we can we can query a superposition of

185
00:09:09,170 --> 00:09:13,759
ciphertext and a second register to get

186
00:09:11,329 --> 00:09:15,469
the output and then in the output we get

187
00:09:13,759 --> 00:09:18,410
the superposition of ciphertext and

188
00:09:15,470 --> 00:09:20,990
their corresponding decryption in the

189
00:09:18,410 --> 00:09:25,699
second register that's pretty much the

190
00:09:20,990 --> 00:09:27,920
model we consider as you know our

191
00:09:25,699 --> 00:09:29,719
classical learning with our samples look

192
00:09:27,920 --> 00:09:32,660
they look like this with a tuple of

193
00:09:29,720 --> 00:09:34,850
values a and a times some secret

194
00:09:32,660 --> 00:09:37,519
president knows and the goal of the

195
00:09:34,850 --> 00:09:42,829
problem is to find the secret key given

196
00:09:37,519 --> 00:09:45,259
several of these distempers now we can

197
00:09:42,829 --> 00:09:49,878
consider a quantum LW superposition

198
00:09:45,259 --> 00:09:51,759
where we get a superposition of of LW

199
00:09:49,879 --> 00:09:56,660
with samples for example for every

200
00:09:51,759 --> 00:09:58,899
possible value of a and it turns out

201
00:09:56,660 --> 00:10:01,910
that there is an efficient algorithm to

202
00:09:58,899 --> 00:10:03,889
recover the secret key given such an

203
00:10:01,910 --> 00:10:07,969
input designed by grillo occur in

204
00:10:03,889 --> 00:10:09,410
addition Zestra with some they can

205
00:10:07,970 --> 00:10:14,420
recover the secret key with a good

206
00:10:09,410 --> 00:10:17,779
probability but the problem is that in

207
00:10:14,420 --> 00:10:21,050
this chosen ciphertext attack model we

208
00:10:17,779 --> 00:10:24,319
get a superposition of we can this type

209
00:10:21,050 --> 00:10:29,569
of superposition here so the challenge

210
00:10:24,319 --> 00:10:32,689
is to to convert this quantum state into

211
00:10:29,569 --> 00:10:35,870
this quantum lwe superposition given in

212
00:10:32,689 --> 00:10:41,240
equation 1 so that's pretty much

213
00:10:35,870 --> 00:10:42,620
whatever attack does so again we assume

214
00:10:41,240 --> 00:10:44,809
we work with vectors with components in

215
00:10:42,620 --> 00:10:47,389
the queue if we work with polynomials we

216
00:10:44,809 --> 00:10:49,550
can take it a trivial representation of

217
00:10:47,389 --> 00:10:54,529
this this polynomial in Z is equal to

218
00:10:49,550 --> 00:10:55,878
the N where we go quickly through with

219
00:10:54,529 --> 00:10:58,060
the attacks you can find all the

220
00:10:55,879 --> 00:10:59,380
education the paper

221
00:10:58,060 --> 00:11:02,550
first we prepare the cypher text a

222
00:10:59,380 --> 00:11:05,590
preposition has in the previous slide

223
00:11:02,550 --> 00:11:08,349
and then we call the decryption Oracle

224
00:11:05,590 --> 00:11:12,460
so in the third register we get the

225
00:11:08,350 --> 00:11:14,410
corresponding plaintext then in the

226
00:11:12,460 --> 00:11:16,780
fourth register we compute V - the

227
00:11:14,410 --> 00:11:19,089
encoding of the plaintext and we take

228
00:11:16,780 --> 00:11:22,089
some subset of that are usually we take

229
00:11:19,090 --> 00:11:25,210
only one component and if we do the

230
00:11:22,090 --> 00:11:27,640
computation it is actually equals to the

231
00:11:25,210 --> 00:11:31,240
same subset of U times the secret key

232
00:11:27,640 --> 00:11:35,560
plus some noise sigh so it looks like a

233
00:11:31,240 --> 00:11:38,380
noisy sample then we call the decryption

234
00:11:35,560 --> 00:11:40,300
Oracle again so we can clear the third

235
00:11:38,380 --> 00:11:43,150
register the step is important to

236
00:11:40,300 --> 00:11:45,150
improve the probability of of

237
00:11:43,150 --> 00:11:49,630
measurement at the end of the algorithm

238
00:11:45,150 --> 00:11:53,410
and so we get this this last quantum

239
00:11:49,630 --> 00:11:56,320
state which is actually like twenty um

240
00:11:53,410 --> 00:11:57,910
lwe superposition that we wanted but

241
00:11:56,320 --> 00:12:00,190
then we can apply the educated step

242
00:11:57,910 --> 00:12:01,860
which means applying some quantum

243
00:12:00,190 --> 00:12:05,650
Fourier transform on the first and

244
00:12:01,860 --> 00:12:10,570
fourth register and then we can measure

245
00:12:05,650 --> 00:12:13,060
as in all quantum algorithms and it

246
00:12:10,570 --> 00:12:14,860
turns out that we after measurement we

247
00:12:13,060 --> 00:12:17,349
obtain the coefficients of a new

248
00:12:14,860 --> 00:12:20,740
equations of the secret key with

249
00:12:17,350 --> 00:12:23,230
probability roughly 1 over Q for all the

250
00:12:20,740 --> 00:12:25,600
proposals we considered except when you

251
00:12:23,230 --> 00:12:32,800
hope whether the probability is 1 over Q

252
00:12:25,600 --> 00:12:35,680
2 to the square square in another

253
00:12:32,800 --> 00:12:39,069
independent and concurrent work allege

254
00:12:35,680 --> 00:12:41,979
it at or noted another quantum key occa

255
00:12:39,070 --> 00:12:48,250
based on the Bernstein of a generic

256
00:12:41,980 --> 00:12:51,070
baggier any algorithm with the require

257
00:12:48,250 --> 00:12:54,040
stronger assumptions first that the

258
00:12:51,070 --> 00:12:58,240
quantum Oracle computes an addition in

259
00:12:54,040 --> 00:13:00,370
the second register during the so it had

260
00:12:58,240 --> 00:13:04,720
the second register with the decryption

261
00:13:00,370 --> 00:13:08,620
instead of just ignoring and secondly

262
00:13:04,720 --> 00:13:10,870
the decryption of one element must be of

263
00:13:08,620 --> 00:13:12,279
the following form it's the inner

264
00:13:10,870 --> 00:13:15,279
product of

265
00:13:12,279 --> 00:13:17,350
subset of the secret key with a subset

266
00:13:15,279 --> 00:13:19,689
of the ciphertext and then in the

267
00:13:17,350 --> 00:13:24,160
decoding phase we cut the zq into c

268
00:13:19,690 --> 00:13:25,990
intervals with some parameters and we

269
00:13:24,160 --> 00:13:28,660
output the corresponding interval so for

270
00:13:25,990 --> 00:13:32,019
example if the if the inner product is

271
00:13:28,660 --> 00:13:35,740
between QVC and 2q over C minus 1 we

272
00:13:32,019 --> 00:13:38,950
output 1 but the edges are the strong

273
00:13:35,740 --> 00:13:41,410
assumptions and we adapted this this

274
00:13:38,950 --> 00:13:43,870
attack to the nist form submissions

275
00:13:41,410 --> 00:13:47,350
fitting into our meta pkc framework as

276
00:13:43,870 --> 00:13:50,140
we did for the other attacks so I'm just

277
00:13:47,350 --> 00:13:52,720
giving the results here and for most

278
00:13:50,140 --> 00:13:55,829
proposals the probability to recover the

279
00:13:52,720 --> 00:14:01,390
secret key with one quantum Oracle query

280
00:13:55,829 --> 00:14:03,670
is at least 0.4 and we designed the

281
00:14:01,390 --> 00:14:07,870
violent of this algorithm for any hope

282
00:14:03,670 --> 00:14:13,810
and we get even better probability of

283
00:14:07,870 --> 00:14:15,430
0.6 to recover the secret key so we see

284
00:14:13,810 --> 00:14:24,099
that there are some Chenault stronger

285
00:14:15,430 --> 00:14:27,339
but results are better so did other

286
00:14:24,100 --> 00:14:30,000
teams we considered Frodo and you hope

287
00:14:27,339 --> 00:14:35,170
are the two that pass to the second

288
00:14:30,000 --> 00:14:37,839
round of the nist process you is the

289
00:14:35,170 --> 00:14:39,969
number of unknowns typically if the

290
00:14:37,839 --> 00:14:42,940
secret key is on vectors it's the number

291
00:14:39,970 --> 00:14:45,250
of components in the vector o is the

292
00:14:42,940 --> 00:14:50,079
number of Oracle calls we need to obtain

293
00:14:45,250 --> 00:14:52,630
e equations with probability P and C is

294
00:14:50,079 --> 00:14:59,529
the expected number of queries needed to

295
00:14:52,630 --> 00:15:01,709
recover the secret key so here we hear

296
00:14:59,529 --> 00:15:04,300
the result for the classical attack

297
00:15:01,709 --> 00:15:07,300
first we see that there is no a result

298
00:15:04,300 --> 00:15:08,800
for lizard and a new hope the reason is

299
00:15:07,300 --> 00:15:12,189
that they use some decompression

300
00:15:08,800 --> 00:15:15,370
function at decryption so it means that

301
00:15:12,190 --> 00:15:18,459
the components are multiplied before the

302
00:15:15,370 --> 00:15:20,800
decryption and that mitigates our attack

303
00:15:18,459 --> 00:15:25,660
because we lose the fine-grain control

304
00:15:20,800 --> 00:15:27,550
we had over this value X but other

305
00:15:25,660 --> 00:15:30,219
attacks are still possible as shown by

306
00:15:27,550 --> 00:15:33,519
volatile and King at all in some recent

307
00:15:30,220 --> 00:15:35,459
papers where they can recover I think

308
00:15:33,519 --> 00:15:39,759
the secret key which could probability

309
00:15:35,459 --> 00:15:41,739
with a few thousand of queries we CD

310
00:15:39,759 --> 00:15:44,259
with our attack we can recover at the

311
00:15:41,740 --> 00:15:50,410
secret key with a few thousand of

312
00:15:44,259 --> 00:15:52,839
queries and the efficiency of the attack

313
00:15:50,410 --> 00:15:55,449
depends mainly on the value so the

314
00:15:52,839 --> 00:16:01,029
number of unknowns which kind of makes

315
00:15:55,449 --> 00:16:03,959
sense now here are the results for the

316
00:16:01,029 --> 00:16:07,630
first quantum attack our quantum attack

317
00:16:03,959 --> 00:16:10,000
there is no result for India leptin

318
00:16:07,630 --> 00:16:13,120
Keaney because it doesn't apparently fit

319
00:16:10,000 --> 00:16:14,980
into our meta PC framework and leptin

320
00:16:13,120 --> 00:16:19,029
because it doesn't it uses some error

321
00:16:14,980 --> 00:16:21,550
correcting code so intuitively for some

322
00:16:19,029 --> 00:16:23,170
random pair of cipher texts you envy the

323
00:16:21,550 --> 00:16:26,258
probability to get an arrow at the

324
00:16:23,170 --> 00:16:28,839
decoding is extremely high so in the

325
00:16:26,259 --> 00:16:31,420
superposition we in a lot of the states

326
00:16:28,839 --> 00:16:33,730
of the superposition we will have only

327
00:16:31,420 --> 00:16:37,250
error code and no information about the

328
00:16:33,730 --> 00:16:39,670
secret key so we lose actually the

329
00:16:37,250 --> 00:16:43,579
of quantum computers and the point of

330
00:16:39,670 --> 00:16:45,290
quantum superposition now the

331
00:16:43,579 --> 00:16:49,219
probability of success is proportional

332
00:16:45,290 --> 00:16:51,949
to 1 over Q with Q often quite large and

333
00:16:49,220 --> 00:16:54,500
that explains the that the expected

334
00:16:51,949 --> 00:16:57,920
total number of queries is quite big

335
00:16:54,500 --> 00:17:00,139
actually and it's the result or not

336
00:16:57,920 --> 00:17:03,410
much better in this : that in the

337
00:17:00,139 --> 00:17:04,880
classical attack but the intuition like

338
00:17:03,410 --> 00:17:07,250
the interpretation is a bit different

339
00:17:04,880 --> 00:17:09,409
because here with 200 record calls we

340
00:17:07,250 --> 00:17:11,000
have a non-negligible probability to

341
00:17:09,409 --> 00:17:13,939
recover the secret key or as in the

342
00:17:11,000 --> 00:17:19,059
classical attack we always need to do a

343
00:17:13,939 --> 00:17:19,059
thousand of queries to recover the key

344
00:17:19,480 --> 00:17:27,890
and as we expected the age of attack

345
00:17:24,740 --> 00:17:33,470
works extremely well for most of the of

346
00:17:27,890 --> 00:17:36,200
the schemes only for lizard and

347
00:17:33,470 --> 00:17:42,530
allergies where we have more than one or

348
00:17:36,200 --> 00:17:44,120
two expected queries now as a final

349
00:17:42,530 --> 00:17:47,600
remark I want to say that the total cost

350
00:17:44,120 --> 00:17:49,070
so they were last with the : T is not

351
00:17:47,600 --> 00:17:51,889
necessary representative of the

352
00:17:49,070 --> 00:17:54,950
resilience of a scheme so for example if

353
00:17:51,890 --> 00:17:58,340
we take the gkz based attack against

354
00:17:54,950 --> 00:17:59,720
Frodo we can actually recover a current

355
00:17:58,340 --> 00:18:01,668
of the secret key so the support is a

356
00:17:59,720 --> 00:18:03,830
matrix we can recover a current of the

357
00:18:01,669 --> 00:18:07,220
of it with only an expected number of

358
00:18:03,830 --> 00:18:08,899
queries to the 14 and with this current

359
00:18:07,220 --> 00:18:11,720
we can already decrypt part of the

360
00:18:08,900 --> 00:18:15,220
ciphertext and may be recovered the

361
00:18:11,720 --> 00:18:15,220
entire secret key by other means

362
00:18:16,480 --> 00:18:22,760
so let me conclude we seen that running

363
00:18:20,210 --> 00:18:25,700
the noise Delta is sufficient to recover

364
00:18:22,760 --> 00:18:28,970
the key in this key recovery plaintext

365
00:18:25,700 --> 00:18:32,840
checking attack model not only a few

366
00:18:28,970 --> 00:18:35,210
thousand queries are needed to do so we

367
00:18:32,840 --> 00:18:37,090
also applied to quantum chaos C attack

368
00:18:35,210 --> 00:18:40,070
and we've seen that with one or two

369
00:18:37,090 --> 00:18:41,689
quantum Oracle course we can recover the

370
00:18:40,070 --> 00:18:45,830
secret key with a non-negligible

371
00:18:41,690 --> 00:18:48,770
probability and finally some design

372
00:18:45,830 --> 00:18:50,129
choices can mitigate the attacks but at

373
00:18:48,770 --> 00:18:52,110
the expense of the efficient

374
00:18:50,130 --> 00:18:54,990
see so for example we can increase the

375
00:18:52,110 --> 00:18:57,689
number of unknowns we can increase the

376
00:18:54,990 --> 00:19:00,240
value of Q or we can maybe use some

377
00:18:57,690 --> 00:19:03,000
error correcting codes as in leptin and

378
00:19:00,240 --> 00:19:05,960
it integrates the the quantum attacks at

379
00:19:03,000 --> 00:19:16,050
least the quantum attacks we considered

380
00:19:05,960 --> 00:19:27,630
that's all for me I have time for

381
00:19:16,050 --> 00:19:30,270
questions so these are few thousand

382
00:19:27,630 --> 00:19:32,430
queries queries that's like the n log Q

383
00:19:30,270 --> 00:19:36,090
value that you mentioned like you need n

384
00:19:32,430 --> 00:19:37,800
log Q queries so what is n in that what

385
00:19:36,090 --> 00:19:44,520
is what what is n so because you said

386
00:19:37,800 --> 00:19:47,310
that you need n log Q or if it's

387
00:19:44,520 --> 00:19:49,770
actually because I mean these thousand

388
00:19:47,310 --> 00:19:55,169
queries it comes from analog Q right yes

389
00:19:49,770 --> 00:19:58,379
Q so usually it's envy yeah it's envy

390
00:19:55,170 --> 00:20:01,320
log Q query so if Delta is in 6 e to the

391
00:19:58,380 --> 00:20:04,380
power n V so we do envy I lock you

392
00:20:01,320 --> 00:20:06,240
queries so there's no scope so you said

393
00:20:04,380 --> 00:20:09,180
okay the permutations between risk you

394
00:20:06,240 --> 00:20:12,300
couldn't you also increase n maybe or or

395
00:20:09,180 --> 00:20:18,000
n is something that n is n V actually in

396
00:20:12,300 --> 00:20:20,520
this line ok then V anyway but when you

397
00:20:18,000 --> 00:20:23,190
do this Oracle Kuenn you do deserve like

398
00:20:20,520 --> 00:20:25,379
queries do you have like is it this is

399
00:20:23,190 --> 00:20:27,450
there a new eristic to choose them the

400
00:20:25,380 --> 00:20:29,130
values of egg X or is it they are they

401
00:20:27,450 --> 00:20:30,540
just random or does it depends on the

402
00:20:29,130 --> 00:20:33,180
norm because you said it works for any

403
00:20:30,540 --> 00:20:36,450
normal so a tree there are different

404
00:20:33,180 --> 00:20:37,980
algorithm for different norms but of

405
00:20:36,450 --> 00:20:40,230
course if we know for example the

406
00:20:37,980 --> 00:20:42,690
distribution of Delta we can optimize

407
00:20:40,230 --> 00:20:44,660
which value of x we take and the

408
00:20:42,690 --> 00:20:46,820
expected number of queries will be

409
00:20:44,660 --> 00:20:53,390
smaller

410
00:20:46,820 --> 00:20:53,389
thanks and more questions

411
00:21:02,660 --> 00:21:06,500
so you said that this recover the secret

412
00:21:05,000 --> 00:21:08,630
key you actually need to solve these

413
00:21:06,500 --> 00:21:10,820
equations in some in this and some

414
00:21:08,630 --> 00:21:12,650
particular algebras but you said I mean

415
00:21:10,820 --> 00:21:15,840
you hinted that for some algebra this

416
00:21:12,650 --> 00:21:17,140
may not be solvable is this the case or

417
00:21:15,840 --> 00:21:22,659
[Music]

418
00:21:17,140 --> 00:21:25,550
for polynomials and and matrix

419
00:21:22,660 --> 00:21:33,080
multiplication it's it works so I don't

420
00:21:25,550 --> 00:21:35,000
have any example no more questions so

421
00:21:33,080 --> 00:21:35,500
let's thank all speakers of this session

422
00:21:35,000 --> 00:21:38,650
again

423
00:21:35,500 --> 00:21:38,650
[Applause]

